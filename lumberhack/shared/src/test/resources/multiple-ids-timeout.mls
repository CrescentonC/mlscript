:NewParser
:ParseOnly

// WRONG: will timeout
// fun id(x) = x
// fun id1(y) = y
// fun id2(z) = z
// id2(if primitive then id1(id(id(id2)))(3) else id1(id(id(id2)))(4))

// CORRECT: will not timeout
fun id(x) = x
fun id1(y) = y
fun id2(z) = z
fun id3(z) = z
fun id4(z) = z
fun id5(z) = z
fun id6(z) = z
fun id7(z) = z
fun id8(z) = z
id(if primitive then id1(id2(id3(id4)))(3) else id5(id6(id7(id8)))(4))
//│ |#fun| |id|(|x|)| |#=| |x|↵|#fun| |id1|(|y|)| |#=| |y|↵|#fun| |id2|(|z|)| |#=| |z|↵|#fun| |id3|(|z|)| |#=| |z|↵|#fun| |id4|(|z|)| |#=| |z|↵|#fun| |id5|(|z|)| |#=| |z|↵|#fun| |id6|(|z|)| |#=| |z|↵|#fun| |id7|(|z|)| |#=| |z|↵|#fun| |id8|(|z|)| |#=| |z|↵|id|(|#if| |primitive| |#then| |id1|(|id2|(|id3|(|id4|)|)|)|(|3|)| |#else| |id5|(|id6|(|id7|(|id8|)|)|)|(|4|)|)|
//│ Parsed: {fun id = x, => x; fun id1 = y, => y; fun id2 = z, => z; fun id3 = z, => z; fun id4 = z, => z; fun id5 = z, => z; fun id6 = z, => z; fun id7 = z, => z; fun id8 = z, => z; id (if (primitive) then id1 (id2 (id3 (id4,),),) (3,) else id5 (id6 (id7 (id8,),),) (4,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ id^19(if primitive⁰ then id1^21(id2^22(id3^23(id4^24)), 3) else id5^30(id6^31(id7^32(id8^33)), 4))
//│ def id(x⁰) = x⁰
//│ def id1(y⁰) = y⁰
//│ def id2(z⁰) = z⁰
//│ def id3(z¹) = z¹
//│ def id4(z²) = z²
//│ def id5(z³) = z³
//│ def id6(z⁴) = z⁴
//│ def id7(z⁵) = z⁵
//│ def id8(z⁶) = z⁶
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [id1^21] (hopeless to continue)
//│ [id2^22] (hopeless to continue)
//│ [id3^23] (hopeless to continue)
//│ [id4^24] (hopeless to continue)
//│ [id5^30] (hopeless to continue)
//│ [id6^31] (hopeless to continue)
//│ [id7^32] (hopeless to continue)
//│ [id8^33] (hopeless to continue)
//│ [id^19] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ id_₀(if primitive⁰ then id1_₀(id2_₀(id3_₀(id4_₀)), 3) else id5_₀(id6_₀(id7_₀(id8_₀)), 4))
//│ def id1_₀(y¹) = 
//│ 	y¹
//│ def id2_₀(z⁷) = 
//│ 	z⁷
//│ def id3_₀(z⁸) = 
//│ 	z⁸
//│ def id4_₀(z¹¹) = 
//│ 	z¹¹
//│ def id5_₀(z⁹) = 
//│ 	z⁹
//│ def id6_₀(z¹³) = 
//│ 	z¹³
//│ def id7_₀(z¹²) = 
//│ 	z¹²
//│ def id8_₀(z¹⁰) = 
//│ 	z¹⁰
//│ def id_₀(x¹) = 
//│ 	x¹
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ id_₀(if primitive⁰ then id1_₀(id2_₀(id3_₀(id4_₀)), 3) else id5_₀(id6_₀(id7_₀(id8_₀)), 4))
//│ def id1_₀(y²) = 
//│ 	y²
//│ def id2_₀(z¹⁷) = 
//│ 	z¹⁷
//│ def id3_₀(z¹⁸) = 
//│ 	z¹⁸
//│ def id4_₀(z¹⁵) = 
//│ 	z¹⁵
//│ def id5_₀(z¹⁶) = 
//│ 	z¹⁶
//│ def id6_₀(z¹⁴) = 
//│ 	z¹⁴
//│ def id7_₀(z²⁰) = 
//│ 	z²⁰
//│ def id8_₀(z¹⁹) = 
//│ 	z¹⁹
//│ def id_₀(x²) = 
//│ 	x²
//│ <<<<<<< after fusion <<<<<<<


// WRONG: will timeout sometimes
// fun id(x) = x
// fun id1(y) = y
// id1(id1(id1(id(id(id(id(id(id1)))))(3))))
