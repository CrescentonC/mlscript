:NewParser
:ParseOnly

:lhError
:lhInOCaml
let rec a = 4;;
let rec f = function A -> B | C -> D;;
let rec d a b = match a with
  | `A(s, d) -> `D
  | _ -> `S
  | k -> `D;;
let rec f (h:t) = h;;
let val = [false;true;false];;
f val
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ "compilation_unit" (
//│ 	"value_definition" (
//│ 		"let" ()
//│ 		"rec" ()
//│ 		"let_binding" (
//│ 			"value_name" ()
//│ 			"=" ()
//│ 			"number" ()))
//│ 	";;" ()
//│ 	"value_definition" (
//│ 		"let" ()
//│ 		"rec" ()
//│ 		"let_binding" (
//│ 			"value_name" ()
//│ 			"=" ()
//│ 			"function_expression" (
//│ 				"function" ()
//│ 				"match_case" (
//│ 					"constructor_path" (
//│ 						"constructor_name" ())
//│ 					"->" ()
//│ 					"constructor_path" (
//│ 						"constructor_name" ()))
//│ 				"|" ()
//│ 				"match_case" (
//│ 					"constructor_path" (
//│ 						"constructor_name" ())
//│ 					"->" ()
//│ 					"constructor_path" (
//│ 						"constructor_name" ())))))
//│ 	";;" ()
//│ 	"value_definition" (
//│ 		"let" ()
//│ 		"rec" ()
//│ 		"let_binding" (
//│ 			"value_name" ()
//│ 			"parameter" (
//│ 				"value_pattern" ())
//│ 			"parameter" (
//│ 				"value_pattern" ())
//│ 			"=" ()
//│ 			"match_expression" (
//│ 				"match" ()
//│ 				"value_path" (
//│ 					"value_name" ())
//│ 				"with" ()
//│ 				"|" ()
//│ 				"match_case" (
//│ 					"tag_pattern" (
//│ 						"tag" (
//│ 							"`" ())
//│ 						"parenthesized_pattern" (
//│ 							"(" ()
//│ 							"tuple_pattern" (
//│ 								"value_pattern" ()
//│ 								"," ()
//│ 								"value_pattern" ())
//│ 							")" ()))
//│ 					"->" ()
//│ 					"tag" (
//│ 						"`" ()))
//│ 				"|" ()
//│ 				"match_case" (
//│ 					"value_pattern" ()
//│ 					"->" ()
//│ 					"tag" (
//│ 						"`" ()))
//│ 				"|" ()
//│ 				"match_case" (
//│ 					"value_pattern" ()
//│ 					"->" ()
//│ 					"tag" (
//│ 						"`" ())))))
//│ 	";;" ()
//│ 	"value_definition" (
//│ 		"let" ()
//│ 		"rec" ()
//│ 		"let_binding" (
//│ 			"value_name" ()
//│ 			"parameter" (
//│ 				"typed_pattern" (
//│ 					"(" ()
//│ 					"value_pattern" ()
//│ 					":" ()
//│ 					"type_constructor_path" (
//│ 						"type_constructor" ())
//│ 					")" ()))
//│ 			"=" ()
//│ 			"value_path" (
//│ 				"value_name" ())))
//│ 	";;" ()
//│ 	"value_definition" (
//│ 		"let" ()
//│ 		"let_binding" (
//│ 			"value_name" ()
//│ 			"=" ()
//│ 			"list_expression" (
//│ 				"[" ()
//│ 				"boolean" (
//│ 					"false" ())
//│ 				";" ()
//│ 				"boolean" (
//│ 					"true" ())
//│ 				";" ()
//│ 				"boolean" (
//│ 					"false" ())
//│ 				"]" ())))
//│ 	";;" ()
//│ 	"expression_item" (
//│ 		"application_expression" (
//│ 			"value_path" (
//│ 				"value_name" ())
//│ 			"value_path" (
//│ 				"value_name" ()))))
//│ !!!!!!ERROR!!!!!!
//│ scala.NotImplementedError: an implementation is missing
//│ !!!!!!ERROR!!!!!!



:lhInHaskell
:lhGenOCaml
[x | x <- [1,2]]
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 	LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 	| LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹([LH_C 1 [LH_C 2 [LH_N]]])
//│ 		---------- unoptimized ocaml gen ----------
//│ 		(let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		  (match _lh_listcomp_fun_para_1 with
//│ 		    | (_lh_listcomp_fun_ls_h_1 :: _lh_listcomp_fun_ls_t_1) -> 
//│ 		      (_lh_listcomp_fun_ls_h_1::(_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))
//│ 		    | [] -> 
//│ 		      [])) in
//│ 		  (_lh_listcomp_fun_1 (1::(2::[]))))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ 
//│ 	let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹([LH_C 1 [LH_C 2 [LH_N]]])
//│ 
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 30 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 25
//│ [LH_C 2 [LH_N]]: 31 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 25
//│ [LH_C 1 [LH_C 2 [LH_N]]]: 32 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 25
//│ ------------------
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 25 --->
//│ 	[LH_N]: 30
//│ 	[LH_C 2 [LH_N]]: 31
//│ 	[LH_C 1 [LH_C 2 [LH_N]]]: 32
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_N]: 30 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 25
//│ [LH_C 2 [LH_N]]: 31 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 25
//│ [LH_C 1 [LH_C 2 [LH_N]]]: 32 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 25
//│ ------------------
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 25 --->
//│ 	[LH_N]: 30
//│ 	[LH_C 2 [LH_N]]: 31
//│ 	[LH_C 1 [LH_C 2 [LH_N]]]: 32
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ 
//│ 	let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun²))
//│ 	in _lh_listcomp_fun²(
//│ 		let _lh_listcomp_fun_ls_h² = 1
//│ 		in let _lh_listcomp_fun_ls_t² = 	
//│ 			let _lh_listcomp_fun_ls_h³ = 2
//│ 			in let _lh_listcomp_fun_ls_t³ = (fun _lh_listcomp_fun⁵ -> [LH_N])
//│ 			in (fun _lh_listcomp_fun⁴ -> [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t³)])
//│ 		in (fun _lh_listcomp_fun³ -> [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun³(_lh_listcomp_fun_ls_t²)]))
//│ 
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ cannot generate benchmark files: Internal Error: benchmark requires a method of name `testxxx` calling a value wrapped in `primId`
//│  and if there are manually fused benchmarks, there should be a call to `testManual`with exact the same parameter following the `testxxx`
//│ 
//│ (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│   (_lh_listcomp_fun_para_0 _lh_listcomp_fun_0)) in
//│   (_lh_listcomp_fun_0 (let rec _lh_listcomp_fun_ls_h_0 = 1 in
//│     (let rec _lh_listcomp_fun_ls_t_0 = (let rec _lh_listcomp_fun_ls_h_1 = 2 in
//│       (let rec _lh_listcomp_fun_ls_t_1 = (fun _lh_listcomp_fun_1 -> 
//│         []) in
//│         (fun _lh_listcomp_fun_2 -> 
//│           (_lh_listcomp_fun_ls_h_1::(_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_1))))) in
//│       (fun _lh_listcomp_fun_3 -> 
//│         (_lh_listcomp_fun_ls_h_0::(_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_0)))))))
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


:lhInHaskell
:lhGenOCaml
safe x d []    = True
safe x d (q:l) = (x /= q) && (x /= (q+d)) && (x /= (q-d)) && (safe x (d+1) l)
gen 0 nq = [[]]
gen n nq = [ (q:b) | b <- gen (n-1) nq, q <- [1..nq], safe q 1 b ]
nsoln nq = length (gen nq nq)
nsoln 10
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ nsoln₀^419(10)
//│ def enumFromTo₀(a², b²) = if (a² <= b²) then [LH_C a² enumFromTo₀^279((a² + 1), b²)] else [LH_N]
//│ def gen₀(_lh_gen_arg1¹, _lh_gen_arg2¹) = case _lh_gen_arg1¹ of {
//│ 	0  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 			LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 				let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 					LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀^359(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 					| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 				in _lh_listcomp_fun³(enumFromTo₀^383(1, _lh_gen_arg2¹))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²(gen₀^394((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ def length₀(ls⁷) = case ls⁷ of {
//│ 	LH_C h⁷ t⁸ => (1 + length₀^412(t⁸))
//│ 	| LH_N  => 0}
//│ def nsoln₀(_lh_nsoln_arg1¹) = length₀^293(gen₀^294(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ def safe₀(_lh_safe_arg1¹, _lh_safe_arg2¹, _lh_safe_arg3¹) = case _lh_safe_arg3¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀^334(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))
//│ 	| _  => error⁰("match error")}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo_d0 a_2 b_2 =
//│ 		  (if (a_2 <= b_2) then
//│ 		    (a_2::((enumFromTo_d0 (a_2 + 1)) b_2))
//│ 		  else
//│ 		    [])
//│ 		and gen_d0 _lh_gen_arg1_1 _lh_gen_arg2_1 =
//│ 		  (match _lh_gen_arg1_1 with
//│ 		    | 0 -> 
//│ 		      ([]::[])
//│ 		    | _ -> 
//│ 		      (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		        (match _lh_listcomp_fun_para_2 with
//│ 		          | (_lh_listcomp_fun_ls_h_2 :: _lh_listcomp_fun_ls_t_2) -> 
//│ 		            (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		              (match _lh_listcomp_fun_para_3 with
//│ 		                | (_lh_listcomp_fun_ls_h_3 :: _lh_listcomp_fun_ls_t_3) -> 
//│ 		                  (if (((safe_d0 _lh_listcomp_fun_ls_h_3) 1) _lh_listcomp_fun_ls_h_2) then
//│ 		                    ((_lh_listcomp_fun_ls_h_3::_lh_listcomp_fun_ls_h_2)::(_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3))
//│ 		                  else
//│ 		                    (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3))
//│ 		                | [] -> 
//│ 		                  (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2))) in
//│ 		              (_lh_listcomp_fun_3 ((enumFromTo_d0 1) _lh_gen_arg2_1)))
//│ 		          | [] -> 
//│ 		            [])) in
//│ 		        (_lh_listcomp_fun_2 ((gen_d0 (_lh_gen_arg1_1 - 1)) _lh_gen_arg2_1))))
//│ 		and length_d0 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | (h_7 :: t_8) -> 
//│ 		      (1 + (length_d0 t_8))
//│ 		    | [] -> 
//│ 		      0)
//│ 		and nsoln_d0 _lh_nsoln_arg1_1 =
//│ 		  (length_d0 ((gen_d0 _lh_nsoln_arg1_1) _lh_nsoln_arg1_1))
//│ 		and safe_d0 _lh_safe_arg1_1 _lh_safe_arg2_1 _lh_safe_arg3_1 =
//│ 		  (match _lh_safe_arg3_1 with
//│ 		    | [] -> 
//│ 		      true
//│ 		    | (_lh_safe_LH_C_0_1 :: _lh_safe_LH_C_1_1) -> 
//│ 		      ((((_lh_safe_arg1_1 != _lh_safe_LH_C_0_1) && (_lh_safe_arg1_1 != (_lh_safe_LH_C_0_1 + _lh_safe_arg2_1))) && (_lh_safe_arg1_1 != (_lh_safe_LH_C_0_1 - _lh_safe_arg2_1))) && (((safe_d0 _lh_safe_arg1_1) (_lh_safe_arg2_1 + 1)) _lh_safe_LH_C_1_1))
//│ 		    | _ -> 
//│ 		      (failwith "match error"));;
//│ 		(nsoln_d0 10)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [nsoln₀^419] (hopeless to continue)
//│ 	[nsoln₀^419 · gen₀^294] (using original def)
//│ 		[nsoln₀^419 · gen₀^294 · enumFromTo₀^383] (using original def)
//│ 			[nsoln₀^419 · gen₀^294 · enumFromTo₀^383 · enumFromTo₀^279] ---> [nsoln₀^419 · gen₀^294 · enumFromTo₀^383] (using original def)
//│ 		[nsoln₀^419 · gen₀^294 · gen₀^394] ---> [nsoln₀^419 · gen₀^294] (using original def)
//│ 		[nsoln₀^419 · gen₀^294 · safe₀^359] (using original def)
//│ 			[nsoln₀^419 · gen₀^294 · safe₀^359 · safe₀^334] ---> [nsoln₀^419 · gen₀^294 · safe₀^359] (using original def)
//│ 	[nsoln₀^419 · length₀^293] (using original def)
//│ 		[nsoln₀^419 · length₀^293 · length₀^412] ---> [nsoln₀^419 · length₀^293] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ nsoln₀₀(10)
//│ def nsoln₀₀(_lh_nsoln_arg1¹) = 
//│ 	length₀₀(gen₀₀(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ 	where
//│ 	def gen₀₀(_lh_gen_arg1¹, _lh_gen_arg2¹) = 
//│ 		case _lh_gen_arg1¹ of {
//│ 			0  => [LH_C [LH_N] [LH_N]]
//│ 			| _  => 
//│ 				let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 					LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 						let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 							LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 							| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 						in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹))
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun²(gen₀₀((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ 		where
//│ 		def enumFromTo₀₀(a¹, b¹) = 
//│ 			if (a¹ <= b¹) then [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)] else [LH_N]
//│ 		def safe₀₀(_lh_safe_arg1¹, _lh_safe_arg2¹, _lh_safe_arg3¹) = 
//│ 			case _lh_safe_arg3¹ of {
//│ 				LH_N  => [True]
//│ 				| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))
//│ 				| _  => error⁰("match error")}
//│ 	def length₀₀(ls¹) = 
//│ 		case ls¹ of {
//│ 			LH_C h¹ t¹ => (1 + length₀₀(t¹))
//│ 			| LH_N  => 0}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 203 --->
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 198
//│ [LH_N]: 204 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 240
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 286
//│ [LH_C [LH_N] [LH_N]]: 205 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 240
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 286
//│ [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 217 --->
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 198
//│ [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 221 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 240
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 286
//│ [LH_N]: 239 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 240
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 286
//│ [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)]: 272 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 229
//│ [LH_N]: 273 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 229
//│ ------------------
//│ case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 198 --->
//│ 	[LH_N]: 203
//│ 	[LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 217
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 229 --->
//│ 	[LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)]: 272
//│ 	[LH_N]: 273
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 240 --->
//│ 	[LH_N]: 204
//│ 	[LH_C [LH_N] [LH_N]]: 205
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 221
//│ 	[LH_N]: 239
//│ case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 286 --->
//│ 	[LH_N]: 204
//│ 	[LH_C [LH_N] [LH_N]]: 205
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 221
//│ 	[LH_N]: 239
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_N]: 203 --->
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 198
//│ [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 217 --->
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 198
//│ [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)]: 272 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 229
//│ [LH_N]: 273 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 229
//│ ------------------
//│ case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 198 --->
//│ 	[LH_N]: 203
//│ 	[LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 217
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 229 --->
//│ 	[LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)]: 272
//│ 	[LH_N]: 273
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ nsoln₀₀(10)
//│ def nsoln₀₀(_lh_nsoln_arg1²) = 
//│ 	length₀₀(gen₀₀(_lh_nsoln_arg1², _lh_nsoln_arg1²))
//│ 	where
//│ 	def gen₀₀(_lh_gen_arg1², _lh_gen_arg2²) = 
//│ 		case _lh_gen_arg1² of {
//│ 			0  => [LH_C (fun _lh_safe_arg1⁴ -> (fun _lh_safe_arg2⁴ -> [True])) [LH_N]]
//│ 			| _  => 
//│ 				let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 					LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 						let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁵ -> _lh_listcomp_fun_para⁵(_lh_listcomp_fun_ls_h², _lh_listcomp_fun⁹, _lh_listcomp_fun⁸, _lh_listcomp_fun_ls_t²))
//│ 						in _lh_listcomp_fun⁹(enumFromTo₀₀(1, _lh_gen_arg2²))
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun⁸(gen₀₀((_lh_gen_arg1² - 1), _lh_gen_arg2²))}
//│ 		where
//│ 		def enumFromTo₀₀(a², b²) = 
//│ 			if (a² <= b²) then 
//│ 				let _lh_listcomp_fun_ls_h⁴ = a²
//│ 				in let _lh_listcomp_fun_ls_t⁴ = enumFromTo₀₀((a² + 1), b²)
//│ 				in (fun _lh_listcomp_fun_ls_h⁵ -> (fun _lh_listcomp_fun⁴ -> (fun _lh_listcomp_fun⁵ -> (fun _lh_listcomp_fun_ls_t⁵ -> if safe₀₀(_lh_listcomp_fun_ls_h⁴, 1, _lh_listcomp_fun_ls_h⁵) then [LH_C 
//│ 					let _lh_safe_LH_C_0² = _lh_listcomp_fun_ls_h⁴
//│ 					in let _lh_safe_LH_C_1² = _lh_listcomp_fun_ls_h⁵
//│ 					in (fun _lh_safe_arg1² -> (fun _lh_safe_arg2² -> ((((_lh_safe_arg1² /= _lh_safe_LH_C_0²) && (_lh_safe_arg1² /= (_lh_safe_LH_C_0² + _lh_safe_arg2²))) && (_lh_safe_arg1² /= (_lh_safe_LH_C_0² - _lh_safe_arg2²))) && safe₀₀(_lh_safe_arg1², (_lh_safe_arg2² + 1), _lh_safe_LH_C_1²)))) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴))))) else (fun _lh_listcomp_fun_ls_h⁶ -> (fun _lh_listcomp_fun⁶ -> (fun _lh_listcomp_fun⁷ -> (fun _lh_listcomp_fun_ls_t⁶ -> _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁶)))))
//│ 		def safe₀₀(_lh_safe_arg1³, _lh_safe_arg2³, _lh_safe_arg3²) = 
//│ 			_lh_safe_arg3²(_lh_safe_arg1³, _lh_safe_arg2³)
//│ 	def length₀₀(ls²) = 
//│ 		case ls² of {
//│ 			LH_C h¹ t¹ => (1 + length₀₀(t¹))
//│ 			| LH_N  => 0}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ cannot generate benchmark files: Internal Error: benchmark requires a method of name `testxxx` calling a value wrapped in `primId`
//│  and if there are manually fused benchmarks, there should be a call to `testManual`with exact the same parameter following the `testxxx`
//│ 
//│ let rec enumFromTo_d0_d0 a_0 b_0 =
//│   (if (a_0 <= b_0) then
//│     (let rec _lh_listcomp_fun_ls_h_0 = a_0 in
//│       (let rec _lh_listcomp_fun_ls_t_0 = ((enumFromTo_d0_d0 (a_0 + 1)) b_0) in
//│         (fun _lh_listcomp_fun_ls_h_1 _lh_listcomp_fun_0 _lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1 -> 
//│           (if (((safe_d0_d0 _lh_listcomp_fun_ls_h_0) 1) _lh_listcomp_fun_ls_h_1) then
//│             ((let rec _lh_safe_LH_C_0_0 = _lh_listcomp_fun_ls_h_0 in
//│               (let rec _lh_safe_LH_C_1_0 = _lh_listcomp_fun_ls_h_1 in
//│                 (fun _lh_safe_arg1_0 _lh_safe_arg2_0 -> 
//│                   ((((_lh_safe_arg1_0 != _lh_safe_LH_C_0_0) && (_lh_safe_arg1_0 != (_lh_safe_LH_C_0_0 + _lh_safe_arg2_0))) && (_lh_safe_arg1_0 != (_lh_safe_LH_C_0_0 - _lh_safe_arg2_0))) && (((safe_d0_d0 _lh_safe_arg1_0) (_lh_safe_arg2_0 + 1)) _lh_safe_LH_C_1_0)))))::(_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│           else
//│             (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))))
//│   else
//│     (fun _lh_listcomp_fun_ls_h_2 _lh_listcomp_fun_2 _lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_2 -> 
//│       (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_2)))
//│ and gen_d0_d0 _lh_gen_arg1_0 _lh_gen_arg2_0 =
//│   (match _lh_gen_arg1_0 with
//│     | 0 -> 
//│       ((fun _lh_safe_arg1_2 _lh_safe_arg2_2 -> 
//│         true)::[])
//│     | _ -> 
//│       (let rec _lh_listcomp_fun_4 = (fun _lh_listcomp_fun_para_0 -> 
//│         (match _lh_listcomp_fun_para_0 with
//│           | (_lh_listcomp_fun_ls_h_3 :: _lh_listcomp_fun_ls_t_3) -> 
//│             (let rec _lh_listcomp_fun_5 = (fun _lh_listcomp_fun_para_1 -> 
//│               ((((_lh_listcomp_fun_para_1 _lh_listcomp_fun_ls_h_3) _lh_listcomp_fun_5) _lh_listcomp_fun_4) _lh_listcomp_fun_ls_t_3)) in
//│               (_lh_listcomp_fun_5 ((enumFromTo_d0_d0 1) _lh_gen_arg2_0)))
//│           | [] -> 
//│             [])) in
//│         (_lh_listcomp_fun_4 ((gen_d0_d0 (_lh_gen_arg1_0 - 1)) _lh_gen_arg2_0))))
//│ and length_d0_d0 ls_0 =
//│   (match ls_0 with
//│     | (h_0 :: t_0) -> 
//│       (1 + (length_d0_d0 t_0))
//│     | [] -> 
//│       0)
//│ and nsoln_d0_d0 _lh_nsoln_arg1_0 =
//│   (length_d0_d0 ((gen_d0_d0 _lh_nsoln_arg1_0) _lh_nsoln_arg1_0))
//│ and safe_d0_d0 _lh_safe_arg1_1 _lh_safe_arg2_1 _lh_safe_arg3_0 =
//│   ((_lh_safe_arg3_0 _lh_safe_arg1_1) _lh_safe_arg2_1);;
//│ (nsoln_d0_d0 10)
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<



:lhInHaskell
:lhGenOCaml
testMapmap ls = map (\x -> x + 1) $ map (\x -> x + x) ls
testMapmap $ primId [1..500000]
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMapmap₀^252(primId⁰(enumFromTo₀^254(1, 500000)))
//│ def enumFromTo₀(a², b²) = if (a² <= b²) then [LH_C a² enumFromTo₀^210((a² + 1), b²)] else [LH_N]
//│ def map₀(f⁴, ls⁷) = case ls⁷ of {
//│ 	LH_C h⁷ t⁸ => [LH_C f⁴(h⁷) map₀^228(f⁴, t⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map₁(f⁵, ls⁸) = case ls⁸ of {
//│ 	LH_C h⁸ t⁹ => [LH_C f⁵(h⁸) map₁^242(f⁵, t⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def testMapmap₀(_lh_testMapmap_arg1¹) = map₀^184((fun x² -> (x² + 1)), map₁^192((fun x³ -> (x³ + x³)), _lh_testMapmap_arg1¹))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo_d0 a_2 b_2 =
//│ 		  (if (a_2 <= b_2) then
//│ 		    (a_2::((enumFromTo_d0 (a_2 + 1)) b_2))
//│ 		  else
//│ 		    [])
//│ 		and map_d0 f_4 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | (h_7 :: t_8) -> 
//│ 		      ((f_4 h_7)::((map_d0 f_4) t_8))
//│ 		    | [] -> 
//│ 		      [])
//│ 		and map_d1 f_5 ls_8 =
//│ 		  (match ls_8 with
//│ 		    | (h_8 :: t_9) -> 
//│ 		      ((f_5 h_8)::((map_d1 f_5) t_9))
//│ 		    | [] -> 
//│ 		      [])
//│ 		and testMapmap_d0 _lh_testMapmap_arg1_1 =
//│ 		  ((map_d0 (fun x_2 -> 
//│ 		    (x_2 + 1))) ((map_d1 (fun x_3 -> 
//│ 		    (x_3 + x_3))) _lh_testMapmap_arg1_1));;
//│ 		(testMapmap_d0 ((enumFromTo_d0 1) 500000))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [enumFromTo₀^254]
//│ 	[enumFromTo₀^254 · enumFromTo₀^210] ---> [enumFromTo₀^254] (only one)
//│ [testMapmap₀^252]
//│ 	[testMapmap₀^252 · map₀^184]
//│ 		[testMapmap₀^252 · map₀^184 · map₀^228] ---> [testMapmap₀^252 · map₀^184] (only one)
//│ 	[testMapmap₀^252 · map₁^192]
//│ 		[testMapmap₀^252 · map₁^192 · map₁^242] ---> [testMapmap₀^252 · map₁^192] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testMapmap₀₀(primId⁰(enumFromTo₀₀(1, 500000)))
//│ def enumFromTo₀₀(a¹, b¹) = 
//│ 	if (a¹ <= b¹) then [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)] else [LH_N]
//│ def testMapmap₀₀(_lh_testMapmap_arg1¹) = 
//│ 	map₀₀((fun x² -> (x² + 1)), map₁₀((fun x³ -> (x³ + x³)), _lh_testMapmap_arg1¹))
//│ 	where
//│ 	def map₀₀(f², ls²) = 
//│ 		case ls² of {
//│ 			LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)]
//│ 			| LH_N  => [LH_N]}
//│ 	def map₁₀(f³, ls³) = 
//│ 		case ls³ of {
//│ 			LH_C h³ t³ => [LH_C f³(h³) map₁₀(f³, t³)]
//│ 			| LH_N  => [LH_N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f³(h³) map₁₀(f³, t³)]: 101 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 89
//│ [LH_N]: 102 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 89
//│ ------------------
//│ case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 89 --->
//│ 	[LH_C f³(h³) map₁₀(f³, t³)]: 101
//│ 	[LH_N]: 102
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C f³(h³) map₁₀(f³, t³)]: 101 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 89
//│ [LH_N]: 102 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 89
//│ ------------------
//│ case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 89 --->
//│ 	[LH_C f³(h³) map₁₀(f³, t³)]: 101
//│ 	[LH_N]: 102
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMapmap₀₀(primId⁰(enumFromTo₀₀(1, 500000)))
//│ def enumFromTo₀₀(a², b²) = 
//│ 	if (a² <= b²) then [LH_C a² enumFromTo₀₀((a² + 1), b²)] else [LH_N]
//│ def testMapmap₀₀(_lh_testMapmap_arg1²) = 
//│ 	map₀₀((fun x⁴ -> (x⁴ + 1)), map₁₀((fun x⁵ -> (x⁵ + x⁵)), _lh_testMapmap_arg1²))
//│ 	where
//│ 	def map₀₀(f⁴, ls⁴) = 
//│ 		ls⁴(f⁴)
//│ 	def map₁₀(f⁵, ls⁵) = 
//│ 		case ls⁵ of {
//│ 			LH_C h³ t³ => 
//│ 				let h⁴ = f⁵(h³)
//│ 				in let t⁴ = map₁₀(f⁵, t³)
//│ 				in (fun f⁶ -> [LH_C f⁶(h⁴) map₀₀(f⁶, t⁴)])
//│ 			| LH_N  => (fun f⁷ -> [LH_N])}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


// NOTE: lumberhack is slightly slower, since this lastDrive and
// last is also somehow accumulating-parametric?
:lhGenOCaml
fun enumFromTo(a, b) = if a < b then C(a, enumFromTo(a + 1, b)) else N
fun filter(ls, f) = if ls is
  C(h, t) then if f(h) then C(h, filter(t, f)) else filter(t, f)
  N then N
fun lastDrive(ls) = if ls is
  C(h, t) then Some(last(h, t))
  N then None
fun last(a, ls) = if ls is
  N then a
  C(h, t) then last(h, t)
fun testLastFilterPolyVar(ls) = lastDrive(filter(ls, x => x < 1000))
fun _lhManualLastFilter(ls, f, a) = if ls is
  C(h, t) then if f(h) then _lhManualLastFilter(t, f, Some(h)) else _lhManualLastFilter(t, f, a)
  N then a
fun testManual(ls) = _lhManualLastFilter(ls, x => x < 1000, None)
testLastFilterPolyVar(primId(enumFromTo(1, 500000)))
testManual(primId(enumFromTo(1, 500000)))
//│ |#fun| |enumFromTo|(|a|,| |b|)| |#=| |#if| |a| |<| |b| |#then| |C|(|a|,| |enumFromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#fun| |filter|(|ls|,| |f|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |#if| |f|(|h|)| |#then| |C|(|h|,| |filter|(|t|,| |f|)|)| |#else| |filter|(|t|,| |f|)|↵|N| |#then| |N|←|↵|#fun| |lastDrive|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |Some|(|last|(|h|,| |t|)|)|↵|N| |#then| |None|←|↵|#fun| |last|(|a|,| |ls|)| |#=| |#if| |ls| |is|→|N| |#then| |a|↵|C|(|h|,| |t|)| |#then| |last|(|h|,| |t|)|←|↵|#fun| |testLastFilterPolyVar|(|ls|)| |#=| |lastDrive|(|filter|(|ls|,| |x| |=>| |x| |<| |1000|)|)|↵|#fun| |_lhManualLastFilter|(|ls|,| |f|,| |a|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |#if| |f|(|h|)| |#then| |_lhManualLastFilter|(|t|,| |f|,| |Some|(|h|)|)| |#else| |_lhManualLastFilter|(|t|,| |f|,| |a|)|↵|N| |#then| |a|←|↵|#fun| |testManual|(|ls|)| |#=| |_lhManualLastFilter|(|ls|,| |x| |=>| |x| |<| |1000|,| |None|)|↵|testLastFilterPolyVar|(|primId|(|enumFromTo|(|1|,| |500000|)|)|)|↵|testManual|(|primId|(|enumFromTo|(|1|,| |500000|)|)|)|
//│ Parsed: {fun enumFromTo = a, b, => if (< (a,) (b,)) then C (a, enumFromTo (+ (a,) (1,), b,),) else N; fun filter = ls, f, => if ls is ‹(C (h, t,)) then if (f (h,)) then C (h, filter (t, f,),) else filter (t, f,); (N) then N›; fun lastDrive = ls, => if ls is ‹(C (h, t,)) then Some (last (h, t,),); (N) then None›; fun last = a, ls, => if ls is ‹(N) then a; (C (h, t,)) then last (h, t,)›; fun testLastFilterPolyVar = ls, => lastDrive (filter (ls, x, => < (x,) (1000,),),); fun _lhManualLastFilter = ls, f, a, => if ls is ‹(C (h, t,)) then if (f (h,)) then _lhManualLastFilter (t, f, Some (h,),) else _lhManualLastFilter (t, f, a,); (N) then a›; fun testManual = ls, => _lhManualLastFilter (ls, x, => < (x,) (1000,), None,); testLastFilterPolyVar (primId (enumFromTo (1, 500000,),),); testManual (primId (enumFromTo (1, 500000,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testLastFilterPolyVar^113(primId⁰(enumFromTo^115(1, 500000)))
//│ testManual^122(primId⁰(enumFromTo^124(1, 500000)))
//│ def _lhManualLastFilter(ls⁴, f¹, a²) = case ls⁴ of {
//│ 	C h³ t³ => if f¹(h³) then _lhManualLastFilter^79(t³, f¹, [Some h³]) else _lhManualLastFilter^87(t³, f¹, a²)
//│ 	| N  => a²}
//│ def enumFromTo(a⁰, b⁰) = if (a⁰ < b⁰) then [C a⁰ enumFromTo^7((a⁰ + 1), b⁰)] else [N]
//│ def filter(ls⁰, f⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => if f⁰(h⁰) then [C h⁰ filter^26(t⁰, f⁰)] else filter^32(t⁰, f⁰)
//│ 	| N  => [N]}
//│ def last(a¹, ls²) = case ls² of {
//│ 	N  => a¹
//│ 	| C h² t² => last^54(h², t²)}
//│ def lastDrive(ls¹) = case ls¹ of {
//│ 	C h¹ t¹ => [Some last^43(h¹, t¹)]
//│ 	| N  => [None]}
//│ def testLastFilterPolyVar(ls³) = lastDrive^62(filter^63(ls³, (fun x⁰ -> (x⁰ < 1000))))
//│ def testManual(ls⁵) = _lhManualLastFilter^100(ls⁵, (fun x¹ -> (x¹ < 1000)), [None])
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec _lhManualLastFilter ls_4 f_1 a_2 =
//│ 		  (match ls_4 with
//│ 		    | `C(h_3, t_3) -> 
//│ 		      (if (f_1 h_3) then
//│ 		        (((_lhManualLastFilter t_3) f_1) (`Some(h_3)))
//│ 		      else
//│ 		        (((_lhManualLastFilter t_3) f_1) a_2))
//│ 		    | `N -> 
//│ 		      a_2)
//│ 		and enumFromTo a_0 b_0 =
//│ 		  (if (a_0 < b_0) then
//│ 		    (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`N))
//│ 		and filter ls_0 f_0 =
//│ 		  (match ls_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (if (f_0 h_0) then
//│ 		        (`C(h_0, ((filter t_0) f_0)))
//│ 		      else
//│ 		        ((filter t_0) f_0))
//│ 		    | `N -> 
//│ 		      (`N))
//│ 		and last a_1 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `N -> 
//│ 		      a_1
//│ 		    | `C(h_2, t_2) -> 
//│ 		      ((last h_2) t_2))
//│ 		and lastDrive ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `C(h_1, t_1) -> 
//│ 		      (`Some(((last h_1) t_1)))
//│ 		    | `N -> 
//│ 		      (`None))
//│ 		and testLastFilterPolyVar ls_3 =
//│ 		  (lastDrive ((filter ls_3) (fun x_0 -> 
//│ 		    (x_0 < 1000))))
//│ 		and testManual ls_5 =
//│ 		  (((_lhManualLastFilter ls_5) (fun x_1 -> 
//│ 		    (x_1 < 1000))) (`None));;
//│ 		(testLastFilterPolyVar ((enumFromTo 1) 500000))
//│ 		(testManual ((enumFromTo 1) 500000))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [enumFromTo^115] (hopeless to continue)
//│ 	[enumFromTo^115 · enumFromTo^7] ---> [enumFromTo^115] (using original def)
//│ [enumFromTo^124]
//│ 	[enumFromTo^124 · enumFromTo^7] ---> [enumFromTo^124] (only one)
//│ [testLastFilterPolyVar^113]
//│ 	[testLastFilterPolyVar^113 · filter^63]
//│ 		[testLastFilterPolyVar^113 · filter^63 · filter^26] (hopeless to continue)
//│ 			[testLastFilterPolyVar^113 · filter^63 · filter^26 · filter^26] ---> [testLastFilterPolyVar^113 · filter^63 · filter^26] (using original def)
//│ 			[testLastFilterPolyVar^113 · filter^63 · filter^26 · filter^32] ---> [testLastFilterPolyVar^113 · filter^63 · filter^26] (using original def)
//│ 		[testLastFilterPolyVar^113 · filter^63 · filter^32] ---> [testLastFilterPolyVar^113 · filter^63] (only one)
//│ 	[testLastFilterPolyVar^113 · lastDrive^62] (hopeless to continue)
//│ 		[testLastFilterPolyVar^113 · lastDrive^62 · last^43] (using original def)
//│ 			[testLastFilterPolyVar^113 · lastDrive^62 · last^43 · last^54] ---> [testLastFilterPolyVar^113 · lastDrive^62 · last^43] (using original def)
//│ [testManual^122]
//│ 	[testManual^122 · _lhManualLastFilter^100]
//│ 		[testManual^122 · _lhManualLastFilter^100 · _lhManualLastFilter^79] (hopeless to continue)
//│ 			[testManual^122 · _lhManualLastFilter^100 · _lhManualLastFilter^79 · _lhManualLastFilter^79] ---> [testManual^122 · _lhManualLastFilter^100 · _lhManualLastFilter^79] (using original def)
//│ 			[testManual^122 · _lhManualLastFilter^100 · _lhManualLastFilter^79 · _lhManualLastFilter^87] ---> [testManual^122 · _lhManualLastFilter^100 · _lhManualLastFilter^79] (using original def)
//│ 		[testManual^122 · _lhManualLastFilter^100 · _lhManualLastFilter^87] ---> [testManual^122 · _lhManualLastFilter^100] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testLastFilterPolyVar₀(primId⁰(enumFromTo₀(1, 500000)))
//│ testManual₀(primId⁰(enumFromTo₁(1, 500000)))
//│ def enumFromTo₀(a⁴, b¹) = 
//│ 	if (a⁴ < b¹) then [C a⁴ enumFromTo₀((a⁴ + 1), b¹)] else [N]
//│ def enumFromTo₁(a⁵, b²) = 
//│ 	if (a⁵ < b²) then [C a⁵ enumFromTo₁((a⁵ + 1), b²)] else [N]
//│ def testLastFilterPolyVar₀(ls¹¹) = 
//│ 	lastDrive₀(filter₀(ls¹¹, (fun x³ -> (x³ < 1000))))
//│ 	where
//│ 	def filter₀(ls⁶, f²) = 
//│ 		case ls⁶ of {
//│ 			C h⁴ t⁴ => if f²(h⁴) then [C h⁴ filter₁(t⁴, f²)] else filter₀(t⁴, f²)
//│ 			| N  => [N]}
//│ 		where
//│ 		def filter₁(ls⁹, f³) = 
//│ 			case ls⁹ of {
//│ 				C h⁶ t⁶ => if f³(h⁶) then [C h⁶ filter₁(t⁶, f³)] else filter₁(t⁶, f³)
//│ 				| N  => [N]}
//│ 	def lastDrive₀(ls¹³) = 
//│ 		case ls¹³ of {
//│ 			C h⁹ t⁹ => [Some last₀(h⁹, t⁹)]
//│ 			| N  => [None]}
//│ 		where
//│ 		def last₀(a³, ls⁷) = 
//│ 			case ls⁷ of {
//│ 				N  => a³
//│ 				| C h⁵ t⁵ => last₀(h⁵, t⁵)}
//│ def testManual₀(ls⁸) = 
//│ 	_lhManualLastFilter₀(ls⁸, (fun x² -> (x² < 1000)), [None])
//│ 	where
//│ 	def _lhManualLastFilter₀(ls¹², f⁵, a⁷) = 
//│ 		case ls¹² of {
//│ 			C h⁸ t⁸ => if f⁵(h⁸) then _lhManualLastFilter₁(t⁸, f⁵, [Some h⁸]) else _lhManualLastFilter₀(t⁸, f⁵, a⁷)
//│ 			| N  => a⁷}
//│ 		where
//│ 		def _lhManualLastFilter₁(ls¹⁰, f⁴, a⁶) = 
//│ 			case ls¹⁰ of {
//│ 				C h⁷ t⁷ => if f⁴(h⁷) then _lhManualLastFilter₁(t⁷, f⁴, [Some h⁷]) else _lhManualLastFilter₁(t⁷, f⁴, a⁶)
//│ 				| N  => a⁶}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h⁴ filter₁(t⁴, f²)]: 141 --->
//│ 	case ls¹³ of {C h⁹ t⁹ => [Some last₀(h⁹, t⁹)] | N  => [None]}: 307
//│ [N]: 148 --->
//│ 	case ls¹³ of {C h⁹ t⁹ => [Some last₀(h⁹, t⁹)] | N  => [None]}: 307
//│ [C h⁶ filter₁(t⁶, f³)]: 185 --->
//│ 	case ls⁷ of {N  => a³ | C h⁵ t⁵ => last₀(h⁵, t⁵)}: 159
//│ [N]: 192 --->
//│ 	case ls⁷ of {N  => a³ | C h⁵ t⁵ => last₀(h⁵, t⁵)}: 159
//│ ------------------
//│ case ls⁷ of {N  => a³ | C h⁵ t⁵ => last₀(h⁵, t⁵)}: 159 --->
//│ 	[C h⁶ filter₁(t⁶, f³)]: 185
//│ 	[N]: 192
//│ case ls¹³ of {C h⁹ t⁹ => [Some last₀(h⁹, t⁹)] | N  => [None]}: 307 --->
//│ 	[C h⁴ filter₁(t⁴, f²)]: 141
//│ 	[N]: 148
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C h⁴ filter₁(t⁴, f²)]: 141 --->
//│ 	case ls¹³ of {C h⁹ t⁹ => [Some last₀(h⁹, t⁹)] | N  => [None]}: 307
//│ [N]: 148 --->
//│ 	case ls¹³ of {C h⁹ t⁹ => [Some last₀(h⁹, t⁹)] | N  => [None]}: 307
//│ [C h⁶ filter₁(t⁶, f³)]: 185 --->
//│ 	case ls⁷ of {N  => a³ | C h⁵ t⁵ => last₀(h⁵, t⁵)}: 159
//│ [N]: 192 --->
//│ 	case ls⁷ of {N  => a³ | C h⁵ t⁵ => last₀(h⁵, t⁵)}: 159
//│ ------------------
//│ case ls⁷ of {N  => a³ | C h⁵ t⁵ => last₀(h⁵, t⁵)}: 159 --->
//│ 	[C h⁶ filter₁(t⁶, f³)]: 185
//│ 	[N]: 192
//│ case ls¹³ of {C h⁹ t⁹ => [Some last₀(h⁹, t⁹)] | N  => [None]}: 307 --->
//│ 	[C h⁴ filter₁(t⁴, f²)]: 141
//│ 	[N]: 148
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testLastFilterPolyVar₀(primId⁰(enumFromTo₀(1, 500000)))
//│ testManual₀(primId⁰(enumFromTo₁(1, 500000)))
//│ def enumFromTo₀(a¹¹, b³) = 
//│ 	if (a¹¹ < b³) then [C a¹¹ enumFromTo₀((a¹¹ + 1), b³)] else [N]
//│ def enumFromTo₁(a¹², b⁴) = 
//│ 	if (a¹² < b⁴) then [C a¹² enumFromTo₁((a¹² + 1), b⁴)] else [N]
//│ def testLastFilterPolyVar₀(ls²⁰) = 
//│ 	lastDrive₀(filter₀(ls²⁰, (fun x⁵ -> (x⁵ < 1000))))
//│ 	where
//│ 	def filter₀(ls¹⁷, f⁷) = 
//│ 		case ls¹⁷ of {
//│ 			C h⁴ t⁴ => if f⁷(h⁴) then 
//│ 				let h¹¹ = h⁴
//│ 				in let t¹¹ = filter₁(t⁴, f⁷)
//│ 				in [Some last₀(h¹¹, t¹¹)] else filter₀(t⁴, f⁷)
//│ 			| N  => [None]}
//│ 		where
//│ 		def filter₁(ls¹⁵, f⁶) = 
//│ 			case ls¹⁵ of {
//│ 				C h⁶ t⁶ => if f⁶(h⁶) then 
//│ 					let h¹⁰ = h⁶
//│ 					in let t¹⁰ = filter₁(t⁶, f⁶)
//│ 					in (fun a⁸ -> last₀(h¹⁰, t¹⁰)) else filter₁(t⁶, f⁶)
//│ 				| N  => (fun a⁹ -> a⁹)}
//│ 	def lastDrive₀(ls¹⁴) = 
//│ 		ls¹⁴
//│ 		where
//│ 		def last₀(a¹⁰, ls¹⁶) = 
//│ 			ls¹⁶(a¹⁰)
//│ def testManual₀(ls¹⁸) = 
//│ 	_lhManualLastFilter₀(ls¹⁸, (fun x⁴ -> (x⁴ < 1000)), [None])
//│ 	where
//│ 	def _lhManualLastFilter₀(ls²¹, f⁹, a¹⁴) = 
//│ 		case ls²¹ of {
//│ 			C h⁸ t⁸ => if f⁹(h⁸) then _lhManualLastFilter₁(t⁸, f⁹, [Some h⁸]) else _lhManualLastFilter₀(t⁸, f⁹, a¹⁴)
//│ 			| N  => a¹⁴}
//│ 		where
//│ 		def _lhManualLastFilter₁(ls¹⁹, f⁸, a¹³) = 
//│ 			case ls¹⁹ of {
//│ 				C h⁷ t⁷ => if f⁸(h⁷) then _lhManualLastFilter₁(t⁷, f⁸, [Some h⁷]) else _lhManualLastFilter₁(t⁷, f⁸, a¹³)
//│ 				| N  => a¹³}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

:lhGenOCaml
fun enumFromTo(a, b) = if a < b then C(a, enumFromTo(a + 1, b)) else N
fun map(ls, f) = if ls is
  C(h, t) then C(f(h), map(t, f))
  N then N
fun testMapmapPolyVar(ls) = map(map(ls, x => x + 1), x => x * x)
fun _lhManual(ls, f1, f2) = if ls is
  C(h, t) then C(f2(f1(h)), _lhManual(t, f1, f2))
  N then N
fun testManual(ls) = _lhManual(ls, x => x + 1, x => x * x)
testMapmapPolyVar(primId(enumFromTo(1, 100000)))
testManual(primId(enumFromTo(1, 100000)))
//│ |#fun| |enumFromTo|(|a|,| |b|)| |#=| |#if| |a| |<| |b| |#then| |C|(|a|,| |enumFromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#fun| |map|(|ls|,| |f|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|t|,| |f|)|)|↵|N| |#then| |N|←|↵|#fun| |testMapmapPolyVar|(|ls|)| |#=| |map|(|map|(|ls|,| |x| |=>| |x| |+| |1|)|,| |x| |=>| |x| |*| |x|)|↵|#fun| |_lhManual|(|ls|,| |f1|,| |f2|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f2|(|f1|(|h|)|)|,| |_lhManual|(|t|,| |f1|,| |f2|)|)|↵|N| |#then| |N|←|↵|#fun| |testManual|(|ls|)| |#=| |_lhManual|(|ls|,| |x| |=>| |x| |+| |1|,| |x| |=>| |x| |*| |x|)|↵|testMapmapPolyVar|(|primId|(|enumFromTo|(|1|,| |100000|)|)|)|↵|testManual|(|primId|(|enumFromTo|(|1|,| |100000|)|)|)|
//│ Parsed: {fun enumFromTo = a, b, => if (< (a,) (b,)) then C (a, enumFromTo (+ (a,) (1,), b,),) else N; fun map = ls, f, => if ls is ‹(C (h, t,)) then C (f (h,), map (t, f,),); (N) then N›; fun testMapmapPolyVar = ls, => map (map (ls, x, => + (x,) (1,),), x, => * (x,) (x,),); fun _lhManual = ls, f1, f2, => if ls is ‹(C (h, t,)) then C (f2 (f1 (h,),), _lhManual (t, f1, f2,),); (N) then N›; fun testManual = ls, => _lhManual (ls, x, => + (x,) (1,), x, => * (x,) (x,),); testMapmapPolyVar (primId (enumFromTo (1, 100000,),),); testManual (primId (enumFromTo (1, 100000,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMapmapPolyVar^92(primId⁰(enumFromTo^94(1, 100000)))
//│ testManual^101(primId⁰(enumFromTo^103(1, 100000)))
//│ def _lhManual(ls², f1⁰, f2⁰) = case ls² of {
//│ 	C h¹ t¹ => [C f2⁰(f1⁰(h¹)) _lhManual^61(t¹, f1⁰, f2⁰)]
//│ 	| N  => [N]}
//│ def enumFromTo(a⁰, b⁰) = if (a⁰ < b⁰) then [C a⁰ enumFromTo^7((a⁰ + 1), b⁰)] else [N]
//│ def map(ls⁰, f⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map^25(t⁰, f⁰)]
//│ 	| N  => [N]}
//│ def testManual(ls³) = _lhManual^74(ls³, (fun x² -> (x² + 1)), (fun x³ -> (x³ * x³)))
//│ def testMapmapPolyVar(ls¹) = map^35(map^36(ls¹, (fun x⁰ -> (x⁰ + 1))), (fun x¹ -> (x¹ * x¹)))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec _lhManual ls_2 f1_0 f2_0 =
//│ 		  (match ls_2 with
//│ 		    | `C(h_1, t_1) -> 
//│ 		      (`C((f2_0 (f1_0 h_1)), (((_lhManual t_1) f1_0) f2_0)))
//│ 		    | `N -> 
//│ 		      (`N))
//│ 		and enumFromTo a_0 b_0 =
//│ 		  (if (a_0 < b_0) then
//│ 		    (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`N))
//│ 		and map ls_0 f_0 =
//│ 		  (match ls_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (`C((f_0 h_0), ((map t_0) f_0)))
//│ 		    | `N -> 
//│ 		      (`N))
//│ 		and testManual ls_3 =
//│ 		  (((_lhManual ls_3) (fun x_2 -> 
//│ 		    (x_2 + 1))) (fun x_3 -> 
//│ 		    (x_3 * x_3)))
//│ 		and testMapmapPolyVar ls_1 =
//│ 		  ((map ((map ls_1) (fun x_0 -> 
//│ 		    (x_0 + 1)))) (fun x_1 -> 
//│ 		    (x_1 * x_1)));;
//│ 		(testMapmapPolyVar ((enumFromTo 1) 100000))
//│ 		(testManual ((enumFromTo 1) 100000))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [enumFromTo^103]
//│ 	[enumFromTo^103 · enumFromTo^7] ---> [enumFromTo^103] (only one)
//│ [enumFromTo^94] (hopeless to continue)
//│ 	[enumFromTo^94 · enumFromTo^7] ---> [enumFromTo^94] (using original def)
//│ [testManual^101]
//│ 	[testManual^101 · _lhManual^74]
//│ 		[testManual^101 · _lhManual^74 · _lhManual^61] ---> [testManual^101 · _lhManual^74] (only one)
//│ [testMapmapPolyVar^92]
//│ 	[testMapmapPolyVar^92 · map^35]
//│ 		[testMapmapPolyVar^92 · map^35 · map^25] ---> [testMapmapPolyVar^92 · map^35] (only one)
//│ 	[testMapmapPolyVar^92 · map^36]
//│ 		[testMapmapPolyVar^92 · map^36 · map^25] ---> [testMapmapPolyVar^92 · map^36] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testMapmapPolyVar₀(primId⁰(enumFromTo₁(1, 100000)))
//│ testManual₀(primId⁰(enumFromTo₀(1, 100000)))
//│ def enumFromTo₀(a¹, b¹) = 
//│ 	if (a¹ < b¹) then [C a¹ enumFromTo₀((a¹ + 1), b¹)] else [N]
//│ def enumFromTo₁(a², b²) = 
//│ 	if (a² < b²) then [C a² enumFromTo₁((a² + 1), b²)] else [N]
//│ def testManual₀(ls⁴) = 
//│ 	_lhManual₀(ls⁴, (fun x⁴ -> (x⁴ + 1)), (fun x⁵ -> (x⁵ * x⁵)))
//│ 	where
//│ 	def _lhManual₀(ls⁶, f1¹, f2¹) = 
//│ 		case ls⁶ of {
//│ 			C h³ t³ => [C f2¹(f1¹(h³)) _lhManual₀(t³, f1¹, f2¹)]
//│ 			| N  => [N]}
//│ def testMapmapPolyVar₀(ls⁷) = 
//│ 	map₀(map₁(ls⁷, (fun x⁶ -> (x⁶ + 1))), (fun x⁷ -> (x⁷ * x⁷)))
//│ 	where
//│ 	def map₀(ls⁵, f¹) = 
//│ 		case ls⁵ of {
//│ 			C h² t² => [C f¹(h²) map₀(t², f¹)]
//│ 			| N  => [N]}
//│ 	def map₁(ls⁸, f²) = 
//│ 		case ls⁸ of {
//│ 			C h⁴ t⁴ => [C f²(h⁴) map₁(t⁴, f²)]
//│ 			| N  => [N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C f²(h⁴) map₁(t⁴, f²)]: 210 --->
//│ 	case ls⁵ of {C h² t² => [C f¹(h²) map₀(t², f¹)] | N  => [N]}: 139
//│ [N]: 211 --->
//│ 	case ls⁵ of {C h² t² => [C f¹(h²) map₀(t², f¹)] | N  => [N]}: 139
//│ ------------------
//│ case ls⁵ of {C h² t² => [C f¹(h²) map₀(t², f¹)] | N  => [N]}: 139 --->
//│ 	[C f²(h⁴) map₁(t⁴, f²)]: 210
//│ 	[N]: 211
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C f²(h⁴) map₁(t⁴, f²)]: 210 --->
//│ 	case ls⁵ of {C h² t² => [C f¹(h²) map₀(t², f¹)] | N  => [N]}: 139
//│ [N]: 211 --->
//│ 	case ls⁵ of {C h² t² => [C f¹(h²) map₀(t², f¹)] | N  => [N]}: 139
//│ ------------------
//│ case ls⁵ of {C h² t² => [C f¹(h²) map₀(t², f¹)] | N  => [N]}: 139 --->
//│ 	[C f²(h⁴) map₁(t⁴, f²)]: 210
//│ 	[N]: 211
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMapmapPolyVar₀(primId⁰(enumFromTo₁(1, 100000)))
//│ testManual₀(primId⁰(enumFromTo₀(1, 100000)))
//│ def enumFromTo₀(a⁴, b⁴) = 
//│ 	if (a⁴ < b⁴) then [C a⁴ enumFromTo₀((a⁴ + 1), b⁴)] else [N]
//│ def enumFromTo₁(a³, b³) = 
//│ 	if (a³ < b³) then [C a³ enumFromTo₁((a³ + 1), b³)] else [N]
//│ def testManual₀(ls¹³) = 
//│ 	_lhManual₀(ls¹³, (fun x¹⁰ -> (x¹⁰ + 1)), (fun x¹¹ -> (x¹¹ * x¹¹)))
//│ 	where
//│ 	def _lhManual₀(ls⁹, f1², f2²) = 
//│ 		case ls⁹ of {
//│ 			C h³ t³ => [C f2²(f1²(h³)) _lhManual₀(t³, f1², f2²)]
//│ 			| N  => [N]}
//│ def testMapmapPolyVar₀(ls¹⁰) = 
//│ 	map₀(map₁(ls¹⁰, (fun x⁸ -> (x⁸ + 1))), (fun x⁹ -> (x⁹ * x⁹)))
//│ 	where
//│ 	def map₀(ls¹¹, f³) = 
//│ 		ls¹¹(f³)
//│ 	def map₁(ls¹², f⁴) = 
//│ 		case ls¹² of {
//│ 			C h⁴ t⁴ => 
//│ 				let h⁵ = f⁴(h⁴)
//│ 				in let t⁵ = map₁(t⁴, f⁴)
//│ 				in (fun f⁵ -> [C f⁵(h⁵) map₀(t⁵, f⁵)])
//│ 			| N  => (fun f⁶ -> [N])}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


// NOTE: digression: simply use `let r = f(h) in C(r, map(t, f))` will be faster
:lhGenOCaml
fun enumFromTo(a, b) = if a < b then C(a, enumFromTo(a + 1, b)) else N
fun map(ls, f) = if ls is
  C(h, t) then let r = f(h) in C(r, map(t, f))
  N then N
fun testMapmapPolyVarLet(ls) = map(map(ls, x => x + 1), x => x * x)
testMapmapPolyVarLet(primId(enumFromTo(1, 100000)))
//│ |#fun| |enumFromTo|(|a|,| |b|)| |#=| |#if| |a| |<| |b| |#then| |C|(|a|,| |enumFromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#fun| |map|(|ls|,| |f|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |#let| |r| |#=| |f|(|h|)| |#in| |C|(|r|,| |map|(|t|,| |f|)|)|↵|N| |#then| |N|←|↵|#fun| |testMapmapPolyVarLet|(|ls|)| |#=| |map|(|map|(|ls|,| |x| |=>| |x| |+| |1|)|,| |x| |=>| |x| |*| |x|)|↵|testMapmapPolyVarLet|(|primId|(|enumFromTo|(|1|,| |100000|)|)|)|
//│ Parsed: {fun enumFromTo = a, b, => if (< (a,) (b,)) then C (a, enumFromTo (+ (a,) (1,), b,),) else N; fun map = ls, f, => if ls is ‹(C (h, t,)) then let r = f (h,) in C (r, map (t, f,),); (N) then N›; fun testMapmapPolyVarLet = ls, => map (map (ls, x, => + (x,) (1,),), x, => * (x,) (x,),); testMapmapPolyVarLet (primId (enumFromTo (1, 100000,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMapmapPolyVarLet^57(primId⁰(enumFromTo^59(1, 100000)))
//│ def enumFromTo(a⁰, b⁰) = if (a⁰ < b⁰) then [C a⁰ enumFromTo^7((a⁰ + 1), b⁰)] else [N]
//│ def map(ls⁰, f⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => 
//│ 		let r⁰ = f⁰(h⁰)
//│ 		in [C r⁰ map^26(t⁰, f⁰)]
//│ 	| N  => [N]}
//│ def testMapmapPolyVarLet(ls¹) = map^37(map^38(ls¹, (fun x⁰ -> (x⁰ + 1))), (fun x¹ -> (x¹ * x¹)))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo a_0 b_0 =
//│ 		  (if (a_0 < b_0) then
//│ 		    (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`N))
//│ 		and map ls_0 f_0 =
//│ 		  (match ls_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (let rec r_0 = (f_0 h_0) in
//│ 		        (`C(r_0, ((map t_0) f_0))))
//│ 		    | `N -> 
//│ 		      (`N))
//│ 		and testMapmapPolyVarLet ls_1 =
//│ 		  ((map ((map ls_1) (fun x_0 -> 
//│ 		    (x_0 + 1)))) (fun x_1 -> 
//│ 		    (x_1 * x_1)));;
//│ 		(testMapmapPolyVarLet ((enumFromTo 1) 100000))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [enumFromTo^59]
//│ 	[enumFromTo^59 · enumFromTo^7] ---> [enumFromTo^59] (only one)
//│ [testMapmapPolyVarLet^57]
//│ 	[testMapmapPolyVarLet^57 · map^37]
//│ 		[testMapmapPolyVarLet^57 · map^37 · map^26] ---> [testMapmapPolyVarLet^57 · map^37] (only one)
//│ 	[testMapmapPolyVarLet^57 · map^38]
//│ 		[testMapmapPolyVarLet^57 · map^38 · map^26] ---> [testMapmapPolyVarLet^57 · map^38] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testMapmapPolyVarLet₀(primId⁰(enumFromTo₀(1, 100000)))
//│ def enumFromTo₀(a¹, b¹) = 
//│ 	if (a¹ < b¹) then [C a¹ enumFromTo₀((a¹ + 1), b¹)] else [N]
//│ def testMapmapPolyVarLet₀(ls³) = 
//│ 	map₀(map₁(ls³, (fun x² -> (x² + 1))), (fun x³ -> (x³ * x³)))
//│ 	where
//│ 	def map₀(ls², f¹) = 
//│ 		case ls² of {
//│ 			C h¹ t¹ => 
//│ 				let r¹ = f¹(h¹)
//│ 				in [C r¹ map₀(t¹, f¹)]
//│ 			| N  => [N]}
//│ 	def map₁(ls⁴, f²) = 
//│ 		case ls⁴ of {
//│ 			C h² t² => 
//│ 				let r² = f²(h²)
//│ 				in [C r² map₁(t², f²)]
//│ 			| N  => [N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C r² map₁(t², f²)]: 132 --->
//│ 	case ls² of {C h¹ t¹ => let r¹ = f¹(h¹)
//│ in [C r¹ map₀(t¹, f¹)] | N  => [N]}: 79
//│ [N]: 134 --->
//│ 	case ls² of {C h¹ t¹ => let r¹ = f¹(h¹)
//│ in [C r¹ map₀(t¹, f¹)] | N  => [N]}: 79
//│ ------------------
//│ case ls² of {C h¹ t¹ => let r¹ = f¹(h¹)
//│ in [C r¹ map₀(t¹, f¹)] | N  => [N]}: 79 --->
//│ 	[C r² map₁(t², f²)]: 132
//│ 	[N]: 134
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C r² map₁(t², f²)]: 132 --->
//│ 	case ls² of {C h¹ t¹ => let r¹ = f¹(h¹)
//│ in [C r¹ map₀(t¹, f¹)] | N  => [N]}: 79
//│ [N]: 134 --->
//│ 	case ls² of {C h¹ t¹ => let r¹ = f¹(h¹)
//│ in [C r¹ map₀(t¹, f¹)] | N  => [N]}: 79
//│ ------------------
//│ case ls² of {C h¹ t¹ => let r¹ = f¹(h¹)
//│ in [C r¹ map₀(t¹, f¹)] | N  => [N]}: 79 --->
//│ 	[C r² map₁(t², f²)]: 132
//│ 	[N]: 134
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMapmapPolyVarLet₀(primId⁰(enumFromTo₀(1, 100000)))
//│ def enumFromTo₀(a², b²) = 
//│ 	if (a² < b²) then [C a² enumFromTo₀((a² + 1), b²)] else [N]
//│ def testMapmapPolyVarLet₀(ls⁶) = 
//│ 	map₀(map₁(ls⁶, (fun x⁴ -> (x⁴ + 1))), (fun x⁵ -> (x⁵ * x⁵)))
//│ 	where
//│ 	def map₀(ls⁵, f³) = 
//│ 		ls⁵(f³)
//│ 	def map₁(ls⁷, f⁴) = 
//│ 		case ls⁷ of {
//│ 			C h² t² => 
//│ 				let r³ = f⁴(h²)
//│ 				in let h³ = r³
//│ 				in let t³ = map₁(t², f⁴)
//│ 				in (fun f⁵ -> 
//│ 					let r⁴ = f⁵(h³)
//│ 					in [C r⁴ map₀(t³, f⁵)])
//│ 			| N  => (fun f⁶ -> [N])}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


:lhGenOCaml
:lhInHaskell
safe x d []    = True
safe x d (q:l) = (x /= q) && (x /= (q+d)) && (x /= (q-d)) && (safe x (d+1) l)
gen 0 nq = [[]]
gen n nq = [ (q:b) | b <- gen (n-1) nq, q <- [1..nq], safe q 1 b ]
nsoln nq = length (gen nq nq)
testQueen n = nsoln n
testQueen $ primId 11
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testQueen₀^429(primId⁰(11))
//│ def enumFromTo₀(a², b²) = if (a² <= b²) then [LH_C a² enumFromTo₀^415((a² + 1), b²)] else [LH_N]
//│ def gen₀(_lh_gen_arg1¹, _lh_gen_arg2¹) = case _lh_gen_arg1¹ of {
//│ 	0  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 			LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 				let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 					LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀^349(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 					| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 				in _lh_listcomp_fun³(enumFromTo₀^373(1, _lh_gen_arg2¹))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²(gen₀^384((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ def length₀(ls⁷) = case ls⁷ of {
//│ 	LH_C h⁷ t⁸ => (1 + length₀^402(t⁸))
//│ 	| LH_N  => 0}
//│ def nsoln₀(_lh_nsoln_arg1¹) = length₀^331(gen₀^332(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ def safe₀(_lh_safe_arg1¹, _lh_safe_arg2¹, _lh_safe_arg3¹) = case _lh_safe_arg3¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀^312(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))
//│ 	| _  => error⁰("match error")}
//│ def testQueen₀(_lh_testQueen_arg1¹) = nsoln₀^339(_lh_testQueen_arg1¹)
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo_d0 a_2 b_2 =
//│ 		  (if (a_2 <= b_2) then
//│ 		    (a_2::((enumFromTo_d0 (a_2 + 1)) b_2))
//│ 		  else
//│ 		    [])
//│ 		and gen_d0 _lh_gen_arg1_1 _lh_gen_arg2_1 =
//│ 		  (match _lh_gen_arg1_1 with
//│ 		    | 0 -> 
//│ 		      ([]::[])
//│ 		    | _ -> 
//│ 		      (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		        (match _lh_listcomp_fun_para_2 with
//│ 		          | (_lh_listcomp_fun_ls_h_2 :: _lh_listcomp_fun_ls_t_2) -> 
//│ 		            (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		              (match _lh_listcomp_fun_para_3 with
//│ 		                | (_lh_listcomp_fun_ls_h_3 :: _lh_listcomp_fun_ls_t_3) -> 
//│ 		                  (if (((safe_d0 _lh_listcomp_fun_ls_h_3) 1) _lh_listcomp_fun_ls_h_2) then
//│ 		                    ((_lh_listcomp_fun_ls_h_3::_lh_listcomp_fun_ls_h_2)::(_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3))
//│ 		                  else
//│ 		                    (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3))
//│ 		                | [] -> 
//│ 		                  (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2))) in
//│ 		              (_lh_listcomp_fun_3 ((enumFromTo_d0 1) _lh_gen_arg2_1)))
//│ 		          | [] -> 
//│ 		            [])) in
//│ 		        (_lh_listcomp_fun_2 ((gen_d0 (_lh_gen_arg1_1 - 1)) _lh_gen_arg2_1))))
//│ 		and length_d0 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | (h_7 :: t_8) -> 
//│ 		      (1 + (length_d0 t_8))
//│ 		    | [] -> 
//│ 		      0)
//│ 		and nsoln_d0 _lh_nsoln_arg1_1 =
//│ 		  (length_d0 ((gen_d0 _lh_nsoln_arg1_1) _lh_nsoln_arg1_1))
//│ 		and safe_d0 _lh_safe_arg1_1 _lh_safe_arg2_1 _lh_safe_arg3_1 =
//│ 		  (match _lh_safe_arg3_1 with
//│ 		    | [] -> 
//│ 		      true
//│ 		    | (_lh_safe_LH_C_0_1 :: _lh_safe_LH_C_1_1) -> 
//│ 		      ((((_lh_safe_arg1_1 != _lh_safe_LH_C_0_1) && (_lh_safe_arg1_1 != (_lh_safe_LH_C_0_1 + _lh_safe_arg2_1))) && (_lh_safe_arg1_1 != (_lh_safe_LH_C_0_1 - _lh_safe_arg2_1))) && (((safe_d0 _lh_safe_arg1_1) (_lh_safe_arg2_1 + 1)) _lh_safe_LH_C_1_1))
//│ 		    | _ -> 
//│ 		      (failwith "match error"))
//│ 		and testQueen_d0 _lh_testQueen_arg1_1 =
//│ 		  (nsoln_d0 _lh_testQueen_arg1_1);;
//│ 		(testQueen_d0 11)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testQueen₀^429] (hopeless to continue)
//│ 	[testQueen₀^429 · nsoln₀^339] (using original def)
//│ 		[testQueen₀^429 · nsoln₀^339 · gen₀^332] (using original def)
//│ 			[testQueen₀^429 · nsoln₀^339 · gen₀^332 · enumFromTo₀^373] (using original def)
//│ 				[testQueen₀^429 · nsoln₀^339 · gen₀^332 · enumFromTo₀^373 · enumFromTo₀^415] ---> [testQueen₀^429 · nsoln₀^339 · gen₀^332 · enumFromTo₀^373] (using original def)
//│ 			[testQueen₀^429 · nsoln₀^339 · gen₀^332 · gen₀^384] ---> [testQueen₀^429 · nsoln₀^339 · gen₀^332] (using original def)
//│ 			[testQueen₀^429 · nsoln₀^339 · gen₀^332 · safe₀^349] (using original def)
//│ 				[testQueen₀^429 · nsoln₀^339 · gen₀^332 · safe₀^349 · safe₀^312] ---> [testQueen₀^429 · nsoln₀^339 · gen₀^332 · safe₀^349] (using original def)
//│ 		[testQueen₀^429 · nsoln₀^339 · length₀^331] (using original def)
//│ 			[testQueen₀^429 · nsoln₀^339 · length₀^331 · length₀^402] ---> [testQueen₀^429 · nsoln₀^339 · length₀^331] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testQueen₀₀(primId⁰(11))
//│ def testQueen₀₀(_lh_testQueen_arg1¹) = 
//│ 	nsoln₀₀(_lh_testQueen_arg1¹)
//│ 	where
//│ 	def nsoln₀₀(_lh_nsoln_arg1¹) = 
//│ 		length₀₀(gen₀₀(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ 		where
//│ 		def gen₀₀(_lh_gen_arg1¹, _lh_gen_arg2¹) = 
//│ 			case _lh_gen_arg1¹ of {
//│ 				0  => [LH_C [LH_N] [LH_N]]
//│ 				| _  => 
//│ 					let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 						LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 							let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 								LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 								| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 							in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹))
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun²(gen₀₀((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ 			where
//│ 			def enumFromTo₀₀(a¹, b¹) = 
//│ 				if (a¹ <= b¹) then [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)] else [LH_N]
//│ 			def safe₀₀(_lh_safe_arg1¹, _lh_safe_arg2¹, _lh_safe_arg3¹) = 
//│ 				case _lh_safe_arg3¹ of {
//│ 					LH_N  => [True]
//│ 					| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))
//│ 					| _  => error⁰("match error")}
//│ 		def length₀₀(ls¹) = 
//│ 			case ls¹ of {
//│ 				LH_C h¹ t¹ => (1 + length₀₀(t¹))
//│ 				| LH_N  => 0}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)]: 235 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 267
//│ [LH_N]: 236 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 267
//│ [LH_N]: 241 --->
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 216
//│ [LH_N]: 242 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 278
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 304
//│ [LH_C [LH_N] [LH_N]]: 243 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 278
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 304
//│ [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 255 --->
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 216
//│ [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 259 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 278
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 304
//│ [LH_N]: 277 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 278
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 304
//│ ------------------
//│ case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 216 --->
//│ 	[LH_N]: 241
//│ 	[LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 255
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 267 --->
//│ 	[LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)]: 235
//│ 	[LH_N]: 236
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 278 --->
//│ 	[LH_N]: 242
//│ 	[LH_C [LH_N] [LH_N]]: 243
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 259
//│ 	[LH_N]: 277
//│ case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 304 --->
//│ 	[LH_N]: 242
//│ 	[LH_C [LH_N] [LH_N]]: 243
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 259
//│ 	[LH_N]: 277
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)]: 235 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 267
//│ [LH_N]: 236 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 267
//│ [LH_N]: 241 --->
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 216
//│ [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 255 --->
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 216
//│ ------------------
//│ case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 216 --->
//│ 	[LH_N]: 241
//│ 	[LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 255
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 267 --->
//│ 	[LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)]: 235
//│ 	[LH_N]: 236
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testQueen₀₀(primId⁰(11))
//│ def testQueen₀₀(_lh_testQueen_arg1²) = 
//│ 	nsoln₀₀(_lh_testQueen_arg1²)
//│ 	where
//│ 	def nsoln₀₀(_lh_nsoln_arg1²) = 
//│ 		length₀₀(gen₀₀(_lh_nsoln_arg1², _lh_nsoln_arg1²))
//│ 		where
//│ 		def gen₀₀(_lh_gen_arg1², _lh_gen_arg2²) = 
//│ 			case _lh_gen_arg1² of {
//│ 				0  => [LH_C (fun _lh_safe_arg1⁴ -> (fun _lh_safe_arg2⁴ -> [True])) [LH_N]]
//│ 				| _  => 
//│ 					let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 						LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 							let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁵ -> _lh_listcomp_fun_para⁵(_lh_listcomp_fun_ls_h², _lh_listcomp_fun⁹, _lh_listcomp_fun⁸, _lh_listcomp_fun_ls_t²))
//│ 							in _lh_listcomp_fun⁹(enumFromTo₀₀(1, _lh_gen_arg2²))
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun⁸(gen₀₀((_lh_gen_arg1² - 1), _lh_gen_arg2²))}
//│ 			where
//│ 			def enumFromTo₀₀(a², b²) = 
//│ 				if (a² <= b²) then 
//│ 					let _lh_listcomp_fun_ls_h⁴ = a²
//│ 					in let _lh_listcomp_fun_ls_t⁴ = enumFromTo₀₀((a² + 1), b²)
//│ 					in (fun _lh_listcomp_fun_ls_h⁵ -> (fun _lh_listcomp_fun⁴ -> (fun _lh_listcomp_fun⁵ -> (fun _lh_listcomp_fun_ls_t⁵ -> if safe₀₀(_lh_listcomp_fun_ls_h⁴, 1, _lh_listcomp_fun_ls_h⁵) then [LH_C 
//│ 						let _lh_safe_LH_C_0² = _lh_listcomp_fun_ls_h⁴
//│ 						in let _lh_safe_LH_C_1² = _lh_listcomp_fun_ls_h⁵
//│ 						in (fun _lh_safe_arg1² -> (fun _lh_safe_arg2² -> ((((_lh_safe_arg1² /= _lh_safe_LH_C_0²) && (_lh_safe_arg1² /= (_lh_safe_LH_C_0² + _lh_safe_arg2²))) && (_lh_safe_arg1² /= (_lh_safe_LH_C_0² - _lh_safe_arg2²))) && safe₀₀(_lh_safe_arg1², (_lh_safe_arg2² + 1), _lh_safe_LH_C_1²)))) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴))))) else (fun _lh_listcomp_fun_ls_h⁶ -> (fun _lh_listcomp_fun⁶ -> (fun _lh_listcomp_fun⁷ -> (fun _lh_listcomp_fun_ls_t⁶ -> _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁶)))))
//│ 			def safe₀₀(_lh_safe_arg1³, _lh_safe_arg2³, _lh_safe_arg3²) = 
//│ 				_lh_safe_arg3²(_lh_safe_arg1³, _lh_safe_arg2³)
//│ 		def length₀₀(ls²) = 
//│ 			case ls² of {
//│ 				LH_C h¹ t¹ => (1 + length₀₀(t¹))
//│ 				| LH_N  => 0}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

:lhGenOCaml
fun map(f, ls) = if ls is
  C(h, t) then C(f(h), map(f, t))
  N then N
fun upto(a, b) = if a > b then N else C(a, upto(a + 1, b))
fun sum(ls) = summ(0, ls)
fun summ(acc, ls) = if ls is
  N then acc
  C(h, t) then summ(acc + h, t)
fun testSumMap(n) = sum(map(x => x * x, upto(1, n)))
testSumMap(primId(300000))
//│ |#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |upto|(|a|,| |b|)| |#=| |#if| |a| |>| |b| |#then| |N| |#else| |C|(|a|,| |upto|(|a| |+| |1|,| |b|)|)|↵|#fun| |sum|(|ls|)| |#=| |summ|(|0|,| |ls|)|↵|#fun| |summ|(|acc|,| |ls|)| |#=| |#if| |ls| |is|→|N| |#then| |acc|↵|C|(|h|,| |t|)| |#then| |summ|(|acc| |+| |h|,| |t|)|←|↵|#fun| |testSumMap|(|n|)| |#=| |sum|(|map|(|x| |=>| |x| |*| |x|,| |upto|(|1|,| |n|)|)|)|↵|testSumMap|(|primId|(|300000|)|)|
//│ Parsed: {fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun upto = a, b, => if (> (a,) (b,)) then N else C (a, upto (+ (a,) (1,), b,),); fun sum = ls, => summ (0, ls,); fun summ = acc, ls, => if ls is ‹(N) then acc; (C (h, t,)) then summ (+ (acc,) (h,), t,)›; fun testSumMap = n, => sum (map (x, => * (x,) (x,), upto (1, n,),),); testSumMap (primId (300000,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testSumMap^72(primId⁰(300000))
//│ def map(f⁰, ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map^5(f⁰, t⁰)]
//│ 	| N  => [N]}
//│ def sum(ls¹) = summ^35(0, ls¹)
//│ def summ(acc⁰, ls²) = case ls² of {
//│ 	N  => acc⁰
//│ 	| C h¹ t¹ => summ^43((acc⁰ + h¹), t¹)}
//│ def testSumMap(n⁰) = sum^55(map^56((fun x⁰ -> (x⁰ * x⁰)), upto^64(1, n⁰)))
//│ def upto(a⁰, b⁰) = if (a⁰ > b⁰) then [N] else [C a⁰ upto^22((a⁰ + 1), b⁰)]
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec map f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (`C((f_0 h_0), ((map f_0) t_0)))
//│ 		    | `N -> 
//│ 		      (`N))
//│ 		and sum ls_1 =
//│ 		  ((summ 0) ls_1)
//│ 		and summ acc_0 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `N -> 
//│ 		      acc_0
//│ 		    | `C(h_1, t_1) -> 
//│ 		      ((summ (acc_0 + h_1)) t_1))
//│ 		and testSumMap n_0 =
//│ 		  (sum ((map (fun x_0 -> 
//│ 		    (x_0 * x_0))) ((upto 1) n_0)))
//│ 		and upto a_0 b_0 =
//│ 		  (if (a_0 > b_0) then
//│ 		    (`N)
//│ 		  else
//│ 		    (`C(a_0, ((upto (a_0 + 1)) b_0))));;
//│ 		(testSumMap 300000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testSumMap^72] (hopeless to continue)
//│ 	[testSumMap^72 · map^56] (using original def)
//│ 		[testSumMap^72 · map^56 · map^5] ---> [testSumMap^72 · map^56] (using original def)
//│ 	[testSumMap^72 · sum^55] (using original def)
//│ 		[testSumMap^72 · sum^55 · summ^35] (using original def)
//│ 			[testSumMap^72 · sum^55 · summ^35 · summ^43] ---> [testSumMap^72 · sum^55 · summ^35] (using original def)
//│ 	[testSumMap^72 · upto^64] (using original def)
//│ 		[testSumMap^72 · upto^64 · upto^22] ---> [testSumMap^72 · upto^64] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testSumMap₀(primId⁰(300000))
//│ def testSumMap₀(n¹) = 
//│ 	sum₀(map₀((fun x¹ -> (x¹ * x¹)), upto₀(1, n¹)))
//│ 	where
//│ 	def map₀(f¹, ls³) = 
//│ 		case ls³ of {
//│ 			C h² t² => [C f¹(h²) map₀(f¹, t²)]
//│ 			| N  => [N]}
//│ 	def sum₀(ls⁵) = 
//│ 		summ₀(0, ls⁵)
//│ 		where
//│ 		def summ₀(acc¹, ls⁴) = 
//│ 			case ls⁴ of {
//│ 				N  => acc¹
//│ 				| C h³ t³ => summ₀((acc¹ + h³), t³)}
//│ 	def upto₀(a¹, b¹) = 
//│ 		if (a¹ > b¹) then [N] else [C a¹ upto₀((a¹ + 1), b¹)]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C f¹(h²) map₀(f¹, t²)]: 103 --->
//│ 	case ls⁴ of {N  => acc¹ | C h³ t³ => summ₀((acc¹ + h³), t³)}: 139
//│ [N]: 104 --->
//│ 	case ls⁴ of {N  => acc¹ | C h³ t³ => summ₀((acc¹ + h³), t³)}: 139
//│ [N]: 113 --->
//│ 	case ls³ of {C h² t² => [C f¹(h²) map₀(f¹, t²)] | N  => [N]}: 105
//│ [C a¹ upto₀((a¹ + 1), b¹)]: 124 --->
//│ 	case ls³ of {C h² t² => [C f¹(h²) map₀(f¹, t²)] | N  => [N]}: 105
//│ ------------------
//│ case ls³ of {C h² t² => [C f¹(h²) map₀(f¹, t²)] | N  => [N]}: 105 --->
//│ 	[N]: 113
//│ 	[C a¹ upto₀((a¹ + 1), b¹)]: 124
//│ case ls⁴ of {N  => acc¹ | C h³ t³ => summ₀((acc¹ + h³), t³)}: 139 --->
//│ 	[C f¹(h²) map₀(f¹, t²)]: 103
//│ 	[N]: 104
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C f¹(h²) map₀(f¹, t²)]: 103 --->
//│ 	case ls⁴ of {N  => acc¹ | C h³ t³ => summ₀((acc¹ + h³), t³)}: 139
//│ [N]: 104 --->
//│ 	case ls⁴ of {N  => acc¹ | C h³ t³ => summ₀((acc¹ + h³), t³)}: 139
//│ [N]: 113 --->
//│ 	case ls³ of {C h² t² => [C f¹(h²) map₀(f¹, t²)] | N  => [N]}: 105
//│ [C a¹ upto₀((a¹ + 1), b¹)]: 124 --->
//│ 	case ls³ of {C h² t² => [C f¹(h²) map₀(f¹, t²)] | N  => [N]}: 105
//│ ------------------
//│ case ls³ of {C h² t² => [C f¹(h²) map₀(f¹, t²)] | N  => [N]}: 105 --->
//│ 	[N]: 113
//│ 	[C a¹ upto₀((a¹ + 1), b¹)]: 124
//│ case ls⁴ of {N  => acc¹ | C h³ t³ => summ₀((acc¹ + h³), t³)}: 139 --->
//│ 	[C f¹(h²) map₀(f¹, t²)]: 103
//│ 	[N]: 104
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testSumMap₀(primId⁰(300000))
//│ def testSumMap₀(n²) = 
//│ 	sum₀(map₀((fun x² -> (x² * x²)), upto₀(1, n²)))
//│ 	where
//│ 	def map₀(f⁴, ls⁸) = 
//│ 		ls⁸(f⁴)
//│ 	def sum₀(ls⁶) = 
//│ 		summ₀(0, ls⁶)
//│ 		where
//│ 		def summ₀(acc⁴, ls⁷) = 
//│ 			ls⁷(acc⁴)
//│ 	def upto₀(a², b²) = 
//│ 		if (a² > b²) then (fun f² -> (fun acc² -> acc²)) else 
//│ 			let h⁴ = a²
//│ 			in let t⁴ = upto₀((a² + 1), b²)
//│ 			in (fun f³ -> 
//│ 				let h⁵ = f³(h⁴)
//│ 				in let t⁵ = map₀(f³, t⁴)
//│ 				in (fun acc³ -> summ₀((acc³ + h⁵), t⁵)))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


:lhGenOCaml
fun map(f, ls) = if ls is
  C(h, t) then C(f(h), map(f, t))
  N then N
fun upto(a, b) = if a > b then N else C(a, upto(a + 1, b))
fun sum(ls) = if ls is
  C(h, t) then h + sum(t)
  N then 0
fun testSumMapNonTailRec(n) = sum(map(x => x * x, upto(1, n)))
testSumMapNonTailRec(primId(300000))
//│ |#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |upto|(|a|,| |b|)| |#=| |#if| |a| |>| |b| |#then| |N| |#else| |C|(|a|,| |upto|(|a| |+| |1|,| |b|)|)|↵|#fun| |sum|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |h| |+| |sum|(|t|)|↵|N| |#then| |0|←|↵|#fun| |testSumMapNonTailRec|(|n|)| |#=| |sum|(|map|(|x| |=>| |x| |*| |x|,| |upto|(|1|,| |n|)|)|)|↵|testSumMapNonTailRec|(|primId|(|300000|)|)|
//│ Parsed: {fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun upto = a, b, => if (> (a,) (b,)) then N else C (a, upto (+ (a,) (1,), b,),); fun sum = ls, => if ls is ‹(C (h, t,)) then + (h,) (sum (t,),); (N) then 0›; fun testSumMapNonTailRec = n, => sum (map (x, => * (x,) (x,), upto (1, n,),),); testSumMapNonTailRec (primId (300000,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testSumMapNonTailRec^63(primId⁰(300000))
//│ def map(f⁰, ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map^5(f⁰, t⁰)]
//│ 	| N  => [N]}
//│ def sum(ls¹) = case ls¹ of {
//│ 	C h¹ t¹ => (h¹ + sum^39(t¹))
//│ 	| N  => 0}
//│ def testSumMapNonTailRec(n⁰) = sum^46(map^47((fun x⁰ -> (x⁰ * x⁰)), upto^55(1, n⁰)))
//│ def upto(a⁰, b⁰) = if (a⁰ > b⁰) then [N] else [C a⁰ upto^22((a⁰ + 1), b⁰)]
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec map f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (`C((f_0 h_0), ((map f_0) t_0)))
//│ 		    | `N -> 
//│ 		      (`N))
//│ 		and sum ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `C(h_1, t_1) -> 
//│ 		      (h_1 + (sum t_1))
//│ 		    | `N -> 
//│ 		      0)
//│ 		and testSumMapNonTailRec n_0 =
//│ 		  (sum ((map (fun x_0 -> 
//│ 		    (x_0 * x_0))) ((upto 1) n_0)))
//│ 		and upto a_0 b_0 =
//│ 		  (if (a_0 > b_0) then
//│ 		    (`N)
//│ 		  else
//│ 		    (`C(a_0, ((upto (a_0 + 1)) b_0))));;
//│ 		(testSumMapNonTailRec 300000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testSumMapNonTailRec^63] (hopeless to continue)
//│ 	[testSumMapNonTailRec^63 · map^47] (using original def)
//│ 		[testSumMapNonTailRec^63 · map^47 · map^5] ---> [testSumMapNonTailRec^63 · map^47] (using original def)
//│ 	[testSumMapNonTailRec^63 · sum^46] (using original def)
//│ 		[testSumMapNonTailRec^63 · sum^46 · sum^39] ---> [testSumMapNonTailRec^63 · sum^46] (using original def)
//│ 	[testSumMapNonTailRec^63 · upto^55] (using original def)
//│ 		[testSumMapNonTailRec^63 · upto^55 · upto^22] ---> [testSumMapNonTailRec^63 · upto^55] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testSumMapNonTailRec₀(primId⁰(300000))
//│ def testSumMapNonTailRec₀(n¹) = 
//│ 	sum₀(map₀((fun x¹ -> (x¹ * x¹)), upto₀(1, n¹)))
//│ 	where
//│ 	def map₀(f¹, ls²) = 
//│ 		case ls² of {
//│ 			C h² t² => [C f¹(h²) map₀(f¹, t²)]
//│ 			| N  => [N]}
//│ 	def sum₀(ls³) = 
//│ 		case ls³ of {
//│ 			C h³ t³ => (h³ + sum₀(t³))
//│ 			| N  => 0}
//│ 	def upto₀(a¹, b¹) = 
//│ 		if (a¹ > b¹) then [N] else [C a¹ upto₀((a¹ + 1), b¹)]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C f¹(h²) map₀(f¹, t²)]: 77 --->
//│ 	case ls³ of {C h³ t³ => (h³ + sum₀(t³)) | N  => 0}: 111
//│ [N]: 78 --->
//│ 	case ls³ of {C h³ t³ => (h³ + sum₀(t³)) | N  => 0}: 111
//│ [N]: 87 --->
//│ 	case ls² of {C h² t² => [C f¹(h²) map₀(f¹, t²)] | N  => [N]}: 79
//│ [C a¹ upto₀((a¹ + 1), b¹)]: 98 --->
//│ 	case ls² of {C h² t² => [C f¹(h²) map₀(f¹, t²)] | N  => [N]}: 79
//│ ------------------
//│ case ls² of {C h² t² => [C f¹(h²) map₀(f¹, t²)] | N  => [N]}: 79 --->
//│ 	[N]: 87
//│ 	[C a¹ upto₀((a¹ + 1), b¹)]: 98
//│ case ls³ of {C h³ t³ => (h³ + sum₀(t³)) | N  => 0}: 111 --->
//│ 	[C f¹(h²) map₀(f¹, t²)]: 77
//│ 	[N]: 78
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C f¹(h²) map₀(f¹, t²)]: 77 --->
//│ 	case ls³ of {C h³ t³ => (h³ + sum₀(t³)) | N  => 0}: 111
//│ [N]: 78 --->
//│ 	case ls³ of {C h³ t³ => (h³ + sum₀(t³)) | N  => 0}: 111
//│ [N]: 87 --->
//│ 	case ls² of {C h² t² => [C f¹(h²) map₀(f¹, t²)] | N  => [N]}: 79
//│ [C a¹ upto₀((a¹ + 1), b¹)]: 98 --->
//│ 	case ls² of {C h² t² => [C f¹(h²) map₀(f¹, t²)] | N  => [N]}: 79
//│ ------------------
//│ case ls² of {C h² t² => [C f¹(h²) map₀(f¹, t²)] | N  => [N]}: 79 --->
//│ 	[N]: 87
//│ 	[C a¹ upto₀((a¹ + 1), b¹)]: 98
//│ case ls³ of {C h³ t³ => (h³ + sum₀(t³)) | N  => 0}: 111 --->
//│ 	[C f¹(h²) map₀(f¹, t²)]: 77
//│ 	[N]: 78
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testSumMapNonTailRec₀(primId⁰(300000))
//│ def testSumMapNonTailRec₀(n²) = 
//│ 	sum₀(map₀((fun x² -> (x² * x²)), upto₀(1, n²)))
//│ 	where
//│ 	def map₀(f², ls⁴) = 
//│ 		ls⁴(f²)
//│ 	def sum₀(ls⁵) = 
//│ 		ls⁵
//│ 	def upto₀(a², b²) = 
//│ 		if (a² > b²) then (fun f³ -> 0) else 
//│ 			let h⁴ = a²
//│ 			in let t⁴ = upto₀((a² + 1), b²)
//│ 			in (fun f⁴ -> 
//│ 				let h⁵ = f⁴(h⁴)
//│ 				in let t⁵ = map₀(f⁴, t⁴)
//│ 				in (h⁵ + sum₀(t⁵)))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

:lhGenOCaml
:lhInHaskell
and [] = True
and (h:t) = if h then and t else False
append [] ys = ys
append (h:t) ys = h:(append t ys)
queens 0 = [[]]
queens m = [ append p [n] | p <- queens (m - 1), n <- [1 .. 9], safe p n]
safe p n = let m = (length p) + 1 in (and [ (j /= n) && ((i + j) /= (m + n)) && ((i - j) /= (m - n)) | (i, j) <- zip [1..(m - 1)] p ])
testAnotherQueenNine n = length $ queens n
testAnotherQueenNine $ primId 9
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testAnotherQueenNine₀^571(primId⁰(9))
//│ def and₀(_lh_and_arg1¹) = case _lh_and_arg1¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_and_LH_C_0¹ _lh_and_LH_C_1¹ => if _lh_and_LH_C_0¹ then and₀^455(_lh_and_LH_C_1¹) else [False]
//│ 	| _  => error⁰("match error")}
//│ def append₀(_lh_append_arg1¹, _lh_append_arg2¹) = case _lh_append_arg1¹ of {
//│ 	LH_N  => _lh_append_arg2¹
//│ 	| LH_C _lh_append_LH_C_0¹ _lh_append_LH_C_1¹ => [LH_C _lh_append_LH_C_0¹ append₀^329(_lh_append_LH_C_1¹, _lh_append_arg2¹)]
//│ 	| _  => error⁰("match error")}
//│ def enumFromTo₀(a³, b³) = if (a³ <= b³) then [LH_C a³ enumFromTo₀^384((a³ + 1), b³)] else [LH_N]
//│ def enumFromTo₁(a², b²) = if (a² <= b²) then [LH_C a² enumFromTo₁^347((a² + 1), b²)] else [LH_N]
//│ def length₀(ls⁷) = case ls⁷ of {
//│ 	LH_C h⁷ t⁸ => (1 + length₀^475(t⁸))
//│ 	| LH_N  => 0}
//│ def length₁(ls⁸) = case ls⁸ of {
//│ 	LH_C h⁸ t⁹ => (1 + length₁^564(t⁹))
//│ 	| LH_N  => 0}
//│ def queens₀(_lh_queens_arg1¹) = case _lh_queens_arg1¹ of {
//│ 	0  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 			LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => 
//│ 				let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 					LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if safe₀^404(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h⁴) then [LH_C append₀^409(_lh_listcomp_fun_ls_h³, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)
//│ 					| LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ 				in _lh_listcomp_fun⁴(enumFromTo₀^430(1, 9))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun³(queens₀^441((_lh_queens_arg1¹ - 1)))}
//│ def safe₀(_lh_safe_arg1¹, _lh_safe_arg2¹) = 
//│ 	let m¹ = (length₁^483(_lh_safe_arg1¹) + 1)
//│ 	in and₀^489(
//│ 		let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => case _lh_listcomp_fun_ls_h⁵ of {
//│ 				LH_P2 _lh_safe_LH_P2_0¹ _lh_safe_LH_P2_1¹ => [LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)]
//│ 				| _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁵(zip₀^541(enumFromTo₁^542(1, (m¹ - 1)), _lh_safe_arg1¹)))
//│ def testAnotherQueenNine₀(_lh_testAnotherQueenNine_arg1¹) = length₀^465(queens₀^466(_lh_testAnotherQueenNine_arg1¹))
//│ def zip₀(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C hx¹ tx¹ => case ys¹ of {
//│ 		LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip₀^366(tx¹, ty¹)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec and_d0 _lh_and_arg1_1 =
//│ 		  (match _lh_and_arg1_1 with
//│ 		    | [] -> 
//│ 		      true
//│ 		    | (_lh_and_LH_C_0_1 :: _lh_and_LH_C_1_1) -> 
//│ 		      (if _lh_and_LH_C_0_1 then
//│ 		        (and_d0 _lh_and_LH_C_1_1)
//│ 		      else
//│ 		        false)
//│ 		    | _ -> 
//│ 		      (failwith "match error"))
//│ 		and append_d0 _lh_append_arg1_1 _lh_append_arg2_1 =
//│ 		  (match _lh_append_arg1_1 with
//│ 		    | [] -> 
//│ 		      _lh_append_arg2_1
//│ 		    | (_lh_append_LH_C_0_1 :: _lh_append_LH_C_1_1) -> 
//│ 		      (_lh_append_LH_C_0_1::((append_d0 _lh_append_LH_C_1_1) _lh_append_arg2_1))
//│ 		    | _ -> 
//│ 		      (failwith "match error"))
//│ 		and enumFromTo_d0 a_3 b_3 =
//│ 		  (if (a_3 <= b_3) then
//│ 		    (a_3::((enumFromTo_d0 (a_3 + 1)) b_3))
//│ 		  else
//│ 		    [])
//│ 		and enumFromTo_d1 a_2 b_2 =
//│ 		  (if (a_2 <= b_2) then
//│ 		    (a_2::((enumFromTo_d1 (a_2 + 1)) b_2))
//│ 		  else
//│ 		    [])
//│ 		and length_d0 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | (h_7 :: t_8) -> 
//│ 		      (1 + (length_d0 t_8))
//│ 		    | [] -> 
//│ 		      0)
//│ 		and length_d1 ls_8 =
//│ 		  (match ls_8 with
//│ 		    | (h_8 :: t_9) -> 
//│ 		      (1 + (length_d1 t_9))
//│ 		    | [] -> 
//│ 		      0)
//│ 		and queens_d0 _lh_queens_arg1_1 =
//│ 		  (match _lh_queens_arg1_1 with
//│ 		    | 0 -> 
//│ 		      ([]::[])
//│ 		    | _ -> 
//│ 		      (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		        (match _lh_listcomp_fun_para_3 with
//│ 		          | (_lh_listcomp_fun_ls_h_3 :: _lh_listcomp_fun_ls_t_3) -> 
//│ 		            (let rec _lh_listcomp_fun_4 = (fun _lh_listcomp_fun_para_4 -> 
//│ 		              (match _lh_listcomp_fun_para_4 with
//│ 		                | (_lh_listcomp_fun_ls_h_4 :: _lh_listcomp_fun_ls_t_4) -> 
//│ 		                  (if ((safe_d0 _lh_listcomp_fun_ls_h_3) _lh_listcomp_fun_ls_h_4) then
//│ 		                    (((append_d0 _lh_listcomp_fun_ls_h_3) (_lh_listcomp_fun_ls_h_4::[]))::(_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4))
//│ 		                  else
//│ 		                    (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4))
//│ 		                | [] -> 
//│ 		                  (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3))) in
//│ 		              (_lh_listcomp_fun_4 ((enumFromTo_d0 1) 9)))
//│ 		          | [] -> 
//│ 		            [])) in
//│ 		        (_lh_listcomp_fun_3 (queens_d0 (_lh_queens_arg1_1 - 1)))))
//│ 		and safe_d0 _lh_safe_arg1_1 _lh_safe_arg2_1 =
//│ 		  (let rec m_1 = ((length_d1 _lh_safe_arg1_1) + 1) in
//│ 		    (and_d0 (let rec _lh_listcomp_fun_5 = (fun _lh_listcomp_fun_para_5 -> 
//│ 		      (match _lh_listcomp_fun_para_5 with
//│ 		        | (_lh_listcomp_fun_ls_h_5 :: _lh_listcomp_fun_ls_t_5) -> 
//│ 		          (match _lh_listcomp_fun_ls_h_5 with
//│ 		            | (_lh_safe_LH_P2_0_1, _lh_safe_LH_P2_1_1) -> 
//│ 		              ((((_lh_safe_LH_P2_1_1 != _lh_safe_arg2_1) && ((_lh_safe_LH_P2_0_1 + _lh_safe_LH_P2_1_1) != (m_1 + _lh_safe_arg2_1))) && ((_lh_safe_LH_P2_0_1 - _lh_safe_LH_P2_1_1) != (m_1 - _lh_safe_arg2_1)))::(_lh_listcomp_fun_5 _lh_listcomp_fun_ls_t_5))
//│ 		            | _ -> 
//│ 		              (_lh_listcomp_fun_5 _lh_listcomp_fun_ls_t_5))
//│ 		        | [] -> 
//│ 		          [])) in
//│ 		      (_lh_listcomp_fun_5 ((zip_d0 ((enumFromTo_d1 1) (m_1 - 1))) _lh_safe_arg1_1)))))
//│ 		and testAnotherQueenNine_d0 _lh_testAnotherQueenNine_arg1_1 =
//│ 		  (length_d0 (queens_d0 _lh_testAnotherQueenNine_arg1_1))
//│ 		and zip_d0 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | (hx_1 :: tx_1) -> 
//│ 		      (match ys_1 with
//│ 		        | (hy_1 :: ty_1) -> 
//│ 		          ((hx_1, hy_1)::((zip_d0 tx_1) ty_1))
//│ 		        | [] -> 
//│ 		          [])
//│ 		    | [] -> 
//│ 		      []);;
//│ 		(testAnotherQueenNine_d0 9)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testAnotherQueenNine₀^571] (hopeless to continue)
//│ 	[testAnotherQueenNine₀^571 · length₀^465] (using original def)
//│ 		[testAnotherQueenNine₀^571 · length₀^465 · length₀^475] ---> [testAnotherQueenNine₀^571 · length₀^465] (using original def)
//│ 	[testAnotherQueenNine₀^571 · queens₀^466] (using original def)
//│ 		[testAnotherQueenNine₀^571 · queens₀^466 · append₀^409] (using original def)
//│ 			[testAnotherQueenNine₀^571 · queens₀^466 · append₀^409 · append₀^329] ---> [testAnotherQueenNine₀^571 · queens₀^466 · append₀^409] (using original def)
//│ 		[testAnotherQueenNine₀^571 · queens₀^466 · enumFromTo₀^430] (using original def)
//│ 			[testAnotherQueenNine₀^571 · queens₀^466 · enumFromTo₀^430 · enumFromTo₀^384] ---> [testAnotherQueenNine₀^571 · queens₀^466 · enumFromTo₀^430] (using original def)
//│ 		[testAnotherQueenNine₀^571 · queens₀^466 · queens₀^441] ---> [testAnotherQueenNine₀^571 · queens₀^466] (using original def)
//│ 		[testAnotherQueenNine₀^571 · queens₀^466 · safe₀^404] (using original def)
//│ 			[testAnotherQueenNine₀^571 · queens₀^466 · safe₀^404 · and₀^489] (using original def)
//│ 				[testAnotherQueenNine₀^571 · queens₀^466 · safe₀^404 · and₀^489 · and₀^455] ---> [testAnotherQueenNine₀^571 · queens₀^466 · safe₀^404 · and₀^489] (using original def)
//│ 			[testAnotherQueenNine₀^571 · queens₀^466 · safe₀^404 · enumFromTo₁^542] (using original def)
//│ 				[testAnotherQueenNine₀^571 · queens₀^466 · safe₀^404 · enumFromTo₁^542 · enumFromTo₁^347] ---> [testAnotherQueenNine₀^571 · queens₀^466 · safe₀^404 · enumFromTo₁^542] (using original def)
//│ 			[testAnotherQueenNine₀^571 · queens₀^466 · safe₀^404 · length₁^483] (using original def)
//│ 				[testAnotherQueenNine₀^571 · queens₀^466 · safe₀^404 · length₁^483 · length₁^564] ---> [testAnotherQueenNine₀^571 · queens₀^466 · safe₀^404 · length₁^483] (using original def)
//│ 			[testAnotherQueenNine₀^571 · queens₀^466 · safe₀^404 · zip₀^541] (using original def)
//│ 				[testAnotherQueenNine₀^571 · queens₀^466 · safe₀^404 · zip₀^541 · zip₀^366] ---> [testAnotherQueenNine₀^571 · queens₀^466 · safe₀^404 · zip₀^541] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testAnotherQueenNine₀₀(primId⁰(9))
//│ def testAnotherQueenNine₀₀(_lh_testAnotherQueenNine_arg1¹) = 
//│ 	length₀₀(queens₀₀(_lh_testAnotherQueenNine_arg1¹))
//│ 	where
//│ 	def length₀₀(ls²) = 
//│ 		case ls² of {
//│ 			LH_C h² t² => (1 + length₀₀(t²))
//│ 			| LH_N  => 0}
//│ 	def queens₀₀(_lh_queens_arg1¹) = 
//│ 		case _lh_queens_arg1¹ of {
//│ 			0  => [LH_C [LH_N] [LH_N]]
//│ 			| _  => 
//│ 				let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 					LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => 
//│ 						let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 							LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if safe₀₀(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h⁴) then [LH_C append₀₀(_lh_listcomp_fun_ls_h³, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)
//│ 							| LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ 						in _lh_listcomp_fun⁴(enumFromTo₀₀(1, 9))
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun³(queens₀₀((_lh_queens_arg1¹ - 1)))}
//│ 		where
//│ 		def append₀₀(_lh_append_arg1¹, _lh_append_arg2¹) = 
//│ 			case _lh_append_arg1¹ of {
//│ 				LH_N  => _lh_append_arg2¹
//│ 				| LH_C _lh_append_LH_C_0¹ _lh_append_LH_C_1¹ => [LH_C _lh_append_LH_C_0¹ append₀₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)]
//│ 				| _  => error⁰("match error")}
//│ 		def enumFromTo₀₀(a³, b³) = 
//│ 			if (a³ <= b³) then [LH_C a³ enumFromTo₀₀((a³ + 1), b³)] else [LH_N]
//│ 		def safe₀₀(_lh_safe_arg1¹, _lh_safe_arg2¹) = 
//│ 			let m¹ = (length₁₀(_lh_safe_arg1¹) + 1)
//│ 			in and₀₀(
//│ 				let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 					LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => case _lh_listcomp_fun_ls_h⁵ of {
//│ 						LH_P2 _lh_safe_LH_P2_0¹ _lh_safe_LH_P2_1¹ => [LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)]
//│ 						| _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun⁵(zip₀₀(enumFromTo₁₀(1, (m¹ - 1)), _lh_safe_arg1¹)))
//│ 			where
//│ 			def and₀₀(_lh_and_arg1¹) = 
//│ 				case _lh_and_arg1¹ of {
//│ 					LH_N  => [True]
//│ 					| LH_C _lh_and_LH_C_0¹ _lh_and_LH_C_1¹ => if _lh_and_LH_C_0¹ then and₀₀(_lh_and_LH_C_1¹) else [False]
//│ 					| _  => error⁰("match error")}
//│ 			def enumFromTo₁₀(a², b²) = 
//│ 				if (a² <= b²) then [LH_C a² enumFromTo₁₀((a² + 1), b²)] else [LH_N]
//│ 			def length₁₀(ls³) = 
//│ 				case ls³ of {
//│ 					LH_C h³ t³ => (1 + length₁₀(t³))
//│ 					| LH_N  => 0}
//│ 			def zip₀₀(xs¹, ys¹) = 
//│ 				case xs¹ of {
//│ 					LH_C hx¹ tx¹ => case ys¹ of {
//│ 						LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip₀₀(tx¹, ty¹)]
//│ 						| LH_N  => [LH_N]}
//│ 					| LH_N  => [LH_N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 252 --->
//│ 	case ls³ of {LH_C h³ t³ => (1 + length₁₀(t³)) | LH_N  => 0}: 416
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip₀₀(tx¹, ty¹)] | LH_N  => [LH_N]}: 436
//│ 	case _lh_append_arg1¹ of {LH_N  => _lh_append_arg2¹ | LH_C _lh_append_LH_C_0¹ _lh_append_LH_C_1¹ => [LH_C _lh_append_LH_C_0¹ append₀₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)] | _  => error⁰("match error")}: 453
//│ [LH_N]: 253 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if safe₀₀(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h⁴) then [LH_C append₀₀(_lh_listcomp_fun_ls_h³, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(enumFromTo₀₀(1, 9)) | LH_N  => [LH_N]}: 291
//│ 	case ls² of {LH_C h² t² => (1 + length₀₀(t²)) | LH_N  => 0}: 314
//│ [LH_C [LH_N] [LH_N]]: 254 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if safe₀₀(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h⁴) then [LH_C append₀₀(_lh_listcomp_fun_ls_h³, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(enumFromTo₀₀(1, 9)) | LH_N  => [LH_N]}: 291
//│ 	case ls² of {LH_C h² t² => (1 + length₀₀(t²)) | LH_N  => 0}: 314
//│ [LH_N]: 266 --->
//│ 	case ls³ of {LH_C h³ t³ => (1 + length₁₀(t³)) | LH_N  => 0}: 416
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip₀₀(tx¹, ty¹)] | LH_N  => [LH_N]}: 436
//│ 	case _lh_append_arg1¹ of {LH_N  => _lh_append_arg2¹ | LH_C _lh_append_LH_C_0¹ _lh_append_LH_C_1¹ => [LH_C _lh_append_LH_C_0¹ append₀₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)] | _  => error⁰("match error")}: 453
//│ [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]: 267 --->
//│ 	case ls³ of {LH_C h³ t³ => (1 + length₁₀(t³)) | LH_N  => 0}: 416
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip₀₀(tx¹, ty¹)] | LH_N  => [LH_N]}: 436
//│ 	case _lh_append_arg1¹ of {LH_N  => _lh_append_arg2¹ | LH_C _lh_append_LH_C_0¹ _lh_append_LH_C_1¹ => [LH_C _lh_append_LH_C_0¹ append₀₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)] | _  => error⁰("match error")}: 453
//│ [LH_C append₀₀(_lh_listcomp_fun_ls_h³, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 272 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if safe₀₀(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h⁴) then [LH_C append₀₀(_lh_listcomp_fun_ls_h³, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(enumFromTo₀₀(1, 9)) | LH_N  => [LH_N]}: 291
//│ 	case ls² of {LH_C h² t² => (1 + length₀₀(t²)) | LH_N  => 0}: 314
//│ [LH_N]: 290 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if safe₀₀(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h⁴) then [LH_C append₀₀(_lh_listcomp_fun_ls_h³, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(enumFromTo₀₀(1, 9)) | LH_N  => [LH_N]}: 291
//│ 	case ls² of {LH_C h² t² => (1 + length₀₀(t²)) | LH_N  => 0}: 314
//│ [LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)]: 366 --->
//│ 	case _lh_and_arg1¹ of {LH_N  => [True] | LH_C _lh_and_LH_C_0¹ _lh_and_LH_C_1¹ => if _lh_and_LH_C_0¹ then and₀₀(_lh_and_LH_C_1¹) else [False] | _  => error⁰("match error")}: 405
//│ [LH_N]: 371 --->
//│ 	case _lh_and_arg1¹ of {LH_N  => [True] | LH_C _lh_and_LH_C_0¹ _lh_and_LH_C_1¹ => if _lh_and_LH_C_0¹ then and₀₀(_lh_and_LH_C_1¹) else [False] | _  => error⁰("match error")}: 405
//│ [LH_P2 hx¹ hy¹]: 428 --->
//│ 	case _lh_listcomp_fun_ls_h⁵ of {LH_P2 _lh_safe_LH_P2_0¹ _lh_safe_LH_P2_1¹ => [LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] | _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 370
//│ [LH_C [LH_P2 hx¹ hy¹] zip₀₀(tx¹, ty¹)]: 434 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => case _lh_listcomp_fun_ls_h⁵ of {LH_P2 _lh_safe_LH_P2_0¹ _lh_safe_LH_P2_1¹ => [LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] | _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)} | LH_N  => [LH_N]}: 372
//│ [LH_N]: 435 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => case _lh_listcomp_fun_ls_h⁵ of {LH_P2 _lh_safe_LH_P2_0¹ _lh_safe_LH_P2_1¹ => [LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] | _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)} | LH_N  => [LH_N]}: 372
//│ [LH_N]: 437 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => case _lh_listcomp_fun_ls_h⁵ of {LH_P2 _lh_safe_LH_P2_0¹ _lh_safe_LH_P2_1¹ => [LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] | _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)} | LH_N  => [LH_N]}: 372
//│ [LH_C _lh_append_LH_C_0¹ append₀₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)]: 449 --->
//│ 	case ls³ of {LH_C h³ t³ => (1 + length₁₀(t³)) | LH_N  => 0}: 416
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip₀₀(tx¹, ty¹)] | LH_N  => [LH_N]}: 436
//│ 	case _lh_append_arg1¹ of {LH_N  => _lh_append_arg2¹ | LH_C _lh_append_LH_C_0¹ _lh_append_LH_C_1¹ => [LH_C _lh_append_LH_C_0¹ append₀₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)] | _  => error⁰("match error")}: 453
//│ [LH_C a² enumFromTo₁₀((a² + 1), b²)]: 471 --->
//│ 	case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip₀₀(tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 438
//│ [LH_N]: 472 --->
//│ 	case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip₀₀(tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 438
//│ [LH_C a³ enumFromTo₀₀((a³ + 1), b³)]: 491 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if safe₀₀(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h⁴) then [LH_C append₀₀(_lh_listcomp_fun_ls_h³, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 280
//│ [LH_N]: 492 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if safe₀₀(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h⁴) then [LH_C append₀₀(_lh_listcomp_fun_ls_h³, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 280
//│ ------------------
//│ case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if safe₀₀(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h⁴) then [LH_C append₀₀(_lh_listcomp_fun_ls_h³, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 280 --->
//│ 	[LH_C a³ enumFromTo₀₀((a³ + 1), b³)]: 491
//│ 	[LH_N]: 492
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if safe₀₀(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h⁴) then [LH_C append₀₀(_lh_listcomp_fun_ls_h³, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(enumFromTo₀₀(1, 9)) | LH_N  => [LH_N]}: 291 --->
//│ 	[LH_N]: 253
//│ 	[LH_C [LH_N] [LH_N]]: 254
//│ 	[LH_C append₀₀(_lh_listcomp_fun_ls_h³, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 272
//│ 	[LH_N]: 290
//│ case ls² of {LH_C h² t² => (1 + length₀₀(t²)) | LH_N  => 0}: 314 --->
//│ 	[LH_N]: 253
//│ 	[LH_C [LH_N] [LH_N]]: 254
//│ 	[LH_C append₀₀(_lh_listcomp_fun_ls_h³, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 272
//│ 	[LH_N]: 290
//│ case _lh_listcomp_fun_ls_h⁵ of {LH_P2 _lh_safe_LH_P2_0¹ _lh_safe_LH_P2_1¹ => [LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] | _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 370 --->
//│ 	[LH_P2 hx¹ hy¹]: 428
//│ case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => case _lh_listcomp_fun_ls_h⁵ of {LH_P2 _lh_safe_LH_P2_0¹ _lh_safe_LH_P2_1¹ => [LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] | _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)} | LH_N  => [LH_N]}: 372 --->
//│ 	[LH_C [LH_P2 hx¹ hy¹] zip₀₀(tx¹, ty¹)]: 434
//│ 	[LH_N]: 435
//│ 	[LH_N]: 437
//│ case _lh_and_arg1¹ of {LH_N  => [True] | LH_C _lh_and_LH_C_0¹ _lh_and_LH_C_1¹ => if _lh_and_LH_C_0¹ then and₀₀(_lh_and_LH_C_1¹) else [False] | _  => error⁰("match error")}: 405 --->
//│ 	[LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)]: 366
//│ 	[LH_N]: 371
//│ case ls³ of {LH_C h³ t³ => (1 + length₁₀(t³)) | LH_N  => 0}: 416 --->
//│ 	[LH_N]: 252
//│ 	[LH_N]: 266
//│ 	[LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]: 267
//│ 	[LH_C _lh_append_LH_C_0¹ append₀₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)]: 449
//│ case ys¹ of {LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip₀₀(tx¹, ty¹)] | LH_N  => [LH_N]}: 436 --->
//│ 	[LH_N]: 252
//│ 	[LH_N]: 266
//│ 	[LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]: 267
//│ 	[LH_C _lh_append_LH_C_0¹ append₀₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)]: 449
//│ case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip₀₀(tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 438 --->
//│ 	[LH_C a² enumFromTo₁₀((a² + 1), b²)]: 471
//│ 	[LH_N]: 472
//│ case _lh_append_arg1¹ of {LH_N  => _lh_append_arg2¹ | LH_C _lh_append_LH_C_0¹ _lh_append_LH_C_1¹ => [LH_C _lh_append_LH_C_0¹ append₀₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)] | _  => error⁰("match error")}: 453 --->
//│ 	[LH_N]: 252
//│ 	[LH_N]: 266
//│ 	[LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]: 267
//│ 	[LH_C _lh_append_LH_C_0¹ append₀₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)]: 449
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)]: 366 --->
//│ 	case _lh_and_arg1¹ of {LH_N  => [True] | LH_C _lh_and_LH_C_0¹ _lh_and_LH_C_1¹ => if _lh_and_LH_C_0¹ then and₀₀(_lh_and_LH_C_1¹) else [False] | _  => error⁰("match error")}: 405
//│ [LH_N]: 371 --->
//│ 	case _lh_and_arg1¹ of {LH_N  => [True] | LH_C _lh_and_LH_C_0¹ _lh_and_LH_C_1¹ => if _lh_and_LH_C_0¹ then and₀₀(_lh_and_LH_C_1¹) else [False] | _  => error⁰("match error")}: 405
//│ [LH_P2 hx¹ hy¹]: 428 --->
//│ 	case _lh_listcomp_fun_ls_h⁵ of {LH_P2 _lh_safe_LH_P2_0¹ _lh_safe_LH_P2_1¹ => [LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] | _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 370
//│ [LH_C [LH_P2 hx¹ hy¹] zip₀₀(tx¹, ty¹)]: 434 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => case _lh_listcomp_fun_ls_h⁵ of {LH_P2 _lh_safe_LH_P2_0¹ _lh_safe_LH_P2_1¹ => [LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] | _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)} | LH_N  => [LH_N]}: 372
//│ [LH_N]: 435 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => case _lh_listcomp_fun_ls_h⁵ of {LH_P2 _lh_safe_LH_P2_0¹ _lh_safe_LH_P2_1¹ => [LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] | _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)} | LH_N  => [LH_N]}: 372
//│ [LH_N]: 437 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => case _lh_listcomp_fun_ls_h⁵ of {LH_P2 _lh_safe_LH_P2_0¹ _lh_safe_LH_P2_1¹ => [LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] | _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)} | LH_N  => [LH_N]}: 372
//│ [LH_C a² enumFromTo₁₀((a² + 1), b²)]: 471 --->
//│ 	case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip₀₀(tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 438
//│ [LH_N]: 472 --->
//│ 	case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip₀₀(tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 438
//│ [LH_C a³ enumFromTo₀₀((a³ + 1), b³)]: 491 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if safe₀₀(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h⁴) then [LH_C append₀₀(_lh_listcomp_fun_ls_h³, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 280
//│ [LH_N]: 492 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if safe₀₀(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h⁴) then [LH_C append₀₀(_lh_listcomp_fun_ls_h³, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 280
//│ ------------------
//│ case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if safe₀₀(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h⁴) then [LH_C append₀₀(_lh_listcomp_fun_ls_h³, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]]) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 280 --->
//│ 	[LH_C a³ enumFromTo₀₀((a³ + 1), b³)]: 491
//│ 	[LH_N]: 492
//│ case _lh_listcomp_fun_ls_h⁵ of {LH_P2 _lh_safe_LH_P2_0¹ _lh_safe_LH_P2_1¹ => [LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] | _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 370 --->
//│ 	[LH_P2 hx¹ hy¹]: 428
//│ case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => case _lh_listcomp_fun_ls_h⁵ of {LH_P2 _lh_safe_LH_P2_0¹ _lh_safe_LH_P2_1¹ => [LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] | _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)} | LH_N  => [LH_N]}: 372 --->
//│ 	[LH_C [LH_P2 hx¹ hy¹] zip₀₀(tx¹, ty¹)]: 434
//│ 	[LH_N]: 435
//│ 	[LH_N]: 437
//│ case _lh_and_arg1¹ of {LH_N  => [True] | LH_C _lh_and_LH_C_0¹ _lh_and_LH_C_1¹ => if _lh_and_LH_C_0¹ then and₀₀(_lh_and_LH_C_1¹) else [False] | _  => error⁰("match error")}: 405 --->
//│ 	[LH_C (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2¹) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m¹ + _lh_safe_arg2¹))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m¹ - _lh_safe_arg2¹))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)]: 366
//│ 	[LH_N]: 371
//│ case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip₀₀(tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 438 --->
//│ 	[LH_C a² enumFromTo₁₀((a² + 1), b²)]: 471
//│ 	[LH_N]: 472
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testAnotherQueenNine₀₀(primId⁰(9))
//│ def testAnotherQueenNine₀₀(_lh_testAnotherQueenNine_arg1²) = 
//│ 	length₀₀(queens₀₀(_lh_testAnotherQueenNine_arg1²))
//│ 	where
//│ 	def length₀₀(ls⁴) = 
//│ 		case ls⁴ of {
//│ 			LH_C h² t² => (1 + length₀₀(t²))
//│ 			| LH_N  => 0}
//│ 	def queens₀₀(_lh_queens_arg1²) = 
//│ 		case _lh_queens_arg1² of {
//│ 			0  => [LH_C [LH_N] [LH_N]]
//│ 			| _  => 
//│ 				let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 					LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => 
//│ 						let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> _lh_listcomp_fun_para⁷(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun⁷, _lh_listcomp_fun⁶, _lh_listcomp_fun_ls_t³))
//│ 						in _lh_listcomp_fun⁷(enumFromTo₀₀(1, 9))
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun⁶(queens₀₀((_lh_queens_arg1² - 1)))}
//│ 		where
//│ 		def append₀₀(_lh_append_arg1², _lh_append_arg2²) = 
//│ 			case _lh_append_arg1² of {
//│ 				LH_N  => _lh_append_arg2²
//│ 				| LH_C _lh_append_LH_C_0¹ _lh_append_LH_C_1¹ => [LH_C _lh_append_LH_C_0¹ append₀₀(_lh_append_LH_C_1¹, _lh_append_arg2²)]
//│ 				| _  => error⁰("match error")}
//│ 		def enumFromTo₀₀(a⁵, b⁵) = 
//│ 			if (a⁵ <= b⁵) then 
//│ 				let _lh_listcomp_fun_ls_h⁷ = a⁵
//│ 				in let _lh_listcomp_fun_ls_t⁸ = enumFromTo₀₀((a⁵ + 1), b⁵)
//│ 				in (fun _lh_listcomp_fun_ls_h⁸ -> (fun _lh_listcomp_fun¹³ -> (fun _lh_listcomp_fun¹⁴ -> (fun _lh_listcomp_fun_ls_t⁹ -> if safe₀₀(_lh_listcomp_fun_ls_h⁸, _lh_listcomp_fun_ls_h⁷) then [LH_C append₀₀(_lh_listcomp_fun_ls_h⁸, [LH_C _lh_listcomp_fun_ls_h⁷ [LH_N]]) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁸))))) else (fun _lh_listcomp_fun_ls_h⁹ -> (fun _lh_listcomp_fun¹⁵ -> (fun _lh_listcomp_fun¹⁶ -> (fun _lh_listcomp_fun_ls_t¹⁰ -> _lh_listcomp_fun¹⁶(_lh_listcomp_fun_ls_t¹⁰)))))
//│ 		def safe₀₀(_lh_safe_arg1², _lh_safe_arg2²) = 
//│ 			let m² = (length₁₀(_lh_safe_arg1²) + 1)
//│ 			in and₀₀(
//│ 				let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> _lh_listcomp_fun_para⁸(_lh_safe_arg2², m², _lh_listcomp_fun⁸))
//│ 				in _lh_listcomp_fun⁸(zip₀₀(enumFromTo₁₀(1, (m² - 1)), _lh_safe_arg1²)))
//│ 			where
//│ 			def and₀₀(_lh_and_arg1²) = 
//│ 				_lh_and_arg1²
//│ 			def enumFromTo₁₀(a⁴, b⁴) = 
//│ 				if (a⁴ <= b⁴) then 
//│ 					let hx² = a⁴
//│ 					in let tx² = enumFromTo₁₀((a⁴ + 1), b⁴)
//│ 					in (fun ys³ -> case ys³ of {
//│ 						LH_C hy¹ ty¹ => 
//│ 							let _lh_listcomp_fun_ls_h⁶ = 	
//│ 								let _lh_safe_LH_P2_0² = hx²
//│ 								in let _lh_safe_LH_P2_1² = hy¹
//│ 								in (fun _lh_safe_arg2⁴ -> (fun m⁴ -> (fun _lh_listcomp_fun¹⁰ -> (fun _lh_listcomp_fun_ls_t⁷ -> 
//│ 									let _lh_and_LH_C_0² = (((_lh_safe_LH_P2_1² /= _lh_safe_arg2⁴) && ((_lh_safe_LH_P2_0² + _lh_safe_LH_P2_1²) /= (m⁴ + _lh_safe_arg2⁴))) && ((_lh_safe_LH_P2_0² - _lh_safe_LH_P2_1²) /= (m⁴ - _lh_safe_arg2⁴)))
//│ 									in let _lh_and_LH_C_1² = _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t⁷)
//│ 									in if _lh_and_LH_C_0² then and₀₀(_lh_and_LH_C_1²) else [False]))))
//│ 							in let _lh_listcomp_fun_ls_t⁶ = zip₀₀(tx², ty¹)
//│ 							in (fun _lh_safe_arg2³ -> (fun m³ -> (fun _lh_listcomp_fun⁹ -> _lh_listcomp_fun_ls_h⁶(_lh_safe_arg2³, m³, _lh_listcomp_fun⁹, _lh_listcomp_fun_ls_t⁶))))
//│ 						| LH_N  => (fun _lh_safe_arg2⁵ -> (fun m⁵ -> (fun _lh_listcomp_fun¹¹ -> [True])))}) else (fun ys⁴ -> (fun _lh_safe_arg2⁶ -> (fun m⁶ -> (fun _lh_listcomp_fun¹² -> [True]))))
//│ 			def length₁₀(ls⁵) = 
//│ 				case ls⁵ of {
//│ 					LH_C h³ t³ => (1 + length₁₀(t³))
//│ 					| LH_N  => 0}
//│ 			def zip₀₀(xs², ys²) = 
//│ 				xs²(ys²)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<



:lhInHaskell
:lhGenOCaml
sum [] = 0
sum (h:t) = h + (sum t)
testSumMapNonTailRecNonPolyVar n = sum $ map (\x -> x * x) (enumFromTo 1 n)
testSumMapNonTailRecNonPolyVar $ primId 500000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testSumMapNonTailRecNonPolyVar₀^256(primId⁰(500000))
//│ def enumFromTo₀(a², b²) = if (a² <= b²) then [LH_C a² enumFromTo₀^242((a² + 1), b²)] else [LH_N]
//│ def map₀(f⁴, ls⁷) = case ls⁷ of {
//│ 	LH_C h⁷ t⁸ => [LH_C f⁴(h⁷) map₀^195(f⁴, t⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def sum₀(_lh_sum_arg1¹) = case _lh_sum_arg1¹ of {
//│ 	LH_N  => 0
//│ 	| LH_C _lh_sum_LH_C_0¹ _lh_sum_LH_C_1¹ => (_lh_sum_LH_C_0¹ + sum₀^210(_lh_sum_LH_C_1¹))
//│ 	| _  => error⁰("match error")}
//│ def testSumMapNonTailRecNonPolyVar₀(_lh_testSumMapNonTailRecNonPolyVar_arg1¹) = sum₀^219(map₀^220((fun x¹ -> (x¹ * x¹)), enumFromTo₀^228(1, _lh_testSumMapNonTailRecNonPolyVar_arg1¹)))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo_d0 a_2 b_2 =
//│ 		  (if (a_2 <= b_2) then
//│ 		    (a_2::((enumFromTo_d0 (a_2 + 1)) b_2))
//│ 		  else
//│ 		    [])
//│ 		and map_d0 f_4 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | (h_7 :: t_8) -> 
//│ 		      ((f_4 h_7)::((map_d0 f_4) t_8))
//│ 		    | [] -> 
//│ 		      [])
//│ 		and sum_d0 _lh_sum_arg1_1 =
//│ 		  (match _lh_sum_arg1_1 with
//│ 		    | [] -> 
//│ 		      0
//│ 		    | (_lh_sum_LH_C_0_1 :: _lh_sum_LH_C_1_1) -> 
//│ 		      (_lh_sum_LH_C_0_1 + (sum_d0 _lh_sum_LH_C_1_1))
//│ 		    | _ -> 
//│ 		      (failwith "match error"))
//│ 		and testSumMapNonTailRecNonPolyVar_d0 _lh_testSumMapNonTailRecNonPolyVar_arg1_1 =
//│ 		  (sum_d0 ((map_d0 (fun x_1 -> 
//│ 		    (x_1 * x_1))) ((enumFromTo_d0 1) _lh_testSumMapNonTailRecNonPolyVar_arg1_1)));;
//│ 		(testSumMapNonTailRecNonPolyVar_d0 500000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testSumMapNonTailRecNonPolyVar₀^256] (hopeless to continue)
//│ 	[testSumMapNonTailRecNonPolyVar₀^256 · enumFromTo₀^228] (using original def)
//│ 		[testSumMapNonTailRecNonPolyVar₀^256 · enumFromTo₀^228 · enumFromTo₀^242] ---> [testSumMapNonTailRecNonPolyVar₀^256 · enumFromTo₀^228] (using original def)
//│ 	[testSumMapNonTailRecNonPolyVar₀^256 · map₀^220] (using original def)
//│ 		[testSumMapNonTailRecNonPolyVar₀^256 · map₀^220 · map₀^195] ---> [testSumMapNonTailRecNonPolyVar₀^256 · map₀^220] (using original def)
//│ 	[testSumMapNonTailRecNonPolyVar₀^256 · sum₀^219] (using original def)
//│ 		[testSumMapNonTailRecNonPolyVar₀^256 · sum₀^219 · sum₀^210] ---> [testSumMapNonTailRecNonPolyVar₀^256 · sum₀^219] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testSumMapNonTailRecNonPolyVar₀₀(primId⁰(500000))
//│ def testSumMapNonTailRecNonPolyVar₀₀(_lh_testSumMapNonTailRecNonPolyVar_arg1¹) = 
//│ 	sum₀₀(map₀₀((fun x¹ -> (x¹ * x¹)), enumFromTo₀₀(1, _lh_testSumMapNonTailRecNonPolyVar_arg1¹)))
//│ 	where
//│ 	def enumFromTo₀₀(a¹, b¹) = 
//│ 		if (a¹ <= b¹) then [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)] else [LH_N]
//│ 	def map₀₀(f¹, ls¹) = 
//│ 		case ls¹ of {
//│ 			LH_C h¹ t¹ => [LH_C f¹(h¹) map₀₀(f¹, t¹)]
//│ 			| LH_N  => [LH_N]}
//│ 	def sum₀₀(_lh_sum_arg1¹) = 
//│ 		case _lh_sum_arg1¹ of {
//│ 			LH_N  => 0
//│ 			| LH_C _lh_sum_LH_C_0¹ _lh_sum_LH_C_1¹ => (_lh_sum_LH_C_0¹ + sum₀₀(_lh_sum_LH_C_1¹))
//│ 			| _  => error⁰("match error")}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)]: 86 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map₀₀(f¹, t¹)] | LH_N  => [LH_N]}: 133
//│ [LH_N]: 87 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map₀₀(f¹, t¹)] | LH_N  => [LH_N]}: 133
//│ [LH_C f¹(h¹) map₀₀(f¹, t¹)]: 131 --->
//│ 	case _lh_sum_arg1¹ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0¹ _lh_sum_LH_C_1¹ => (_lh_sum_LH_C_0¹ + sum₀₀(_lh_sum_LH_C_1¹)) | _  => error⁰("match error")}: 103
//│ [LH_N]: 132 --->
//│ 	case _lh_sum_arg1¹ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0¹ _lh_sum_LH_C_1¹ => (_lh_sum_LH_C_0¹ + sum₀₀(_lh_sum_LH_C_1¹)) | _  => error⁰("match error")}: 103
//│ ------------------
//│ case _lh_sum_arg1¹ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0¹ _lh_sum_LH_C_1¹ => (_lh_sum_LH_C_0¹ + sum₀₀(_lh_sum_LH_C_1¹)) | _  => error⁰("match error")}: 103 --->
//│ 	[LH_C f¹(h¹) map₀₀(f¹, t¹)]: 131
//│ 	[LH_N]: 132
//│ case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map₀₀(f¹, t¹)] | LH_N  => [LH_N]}: 133 --->
//│ 	[LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)]: 86
//│ 	[LH_N]: 87
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)]: 86 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map₀₀(f¹, t¹)] | LH_N  => [LH_N]}: 133
//│ [LH_N]: 87 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map₀₀(f¹, t¹)] | LH_N  => [LH_N]}: 133
//│ [LH_C f¹(h¹) map₀₀(f¹, t¹)]: 131 --->
//│ 	case _lh_sum_arg1¹ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0¹ _lh_sum_LH_C_1¹ => (_lh_sum_LH_C_0¹ + sum₀₀(_lh_sum_LH_C_1¹)) | _  => error⁰("match error")}: 103
//│ [LH_N]: 132 --->
//│ 	case _lh_sum_arg1¹ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0¹ _lh_sum_LH_C_1¹ => (_lh_sum_LH_C_0¹ + sum₀₀(_lh_sum_LH_C_1¹)) | _  => error⁰("match error")}: 103
//│ ------------------
//│ case _lh_sum_arg1¹ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0¹ _lh_sum_LH_C_1¹ => (_lh_sum_LH_C_0¹ + sum₀₀(_lh_sum_LH_C_1¹)) | _  => error⁰("match error")}: 103 --->
//│ 	[LH_C f¹(h¹) map₀₀(f¹, t¹)]: 131
//│ 	[LH_N]: 132
//│ case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map₀₀(f¹, t¹)] | LH_N  => [LH_N]}: 133 --->
//│ 	[LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)]: 86
//│ 	[LH_N]: 87
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testSumMapNonTailRecNonPolyVar₀₀(primId⁰(500000))
//│ def testSumMapNonTailRecNonPolyVar₀₀(_lh_testSumMapNonTailRecNonPolyVar_arg1²) = 
//│ 	sum₀₀(map₀₀((fun x² -> (x² * x²)), enumFromTo₀₀(1, _lh_testSumMapNonTailRecNonPolyVar_arg1²)))
//│ 	where
//│ 	def enumFromTo₀₀(a², b²) = 
//│ 		if (a² <= b²) then 
//│ 			let h² = a²
//│ 			in let t² = enumFromTo₀₀((a² + 1), b²)
//│ 			in (fun f² -> 
//│ 				let _lh_sum_LH_C_0² = f²(h²)
//│ 				in let _lh_sum_LH_C_1² = map₀₀(f², t²)
//│ 				in (_lh_sum_LH_C_0² + sum₀₀(_lh_sum_LH_C_1²))) else (fun f³ -> 0)
//│ 	def map₀₀(f⁴, ls²) = 
//│ 		ls²(f⁴)
//│ 	def sum₀₀(_lh_sum_arg1²) = 
//│ 		_lh_sum_arg1²
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
