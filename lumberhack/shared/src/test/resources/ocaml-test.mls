:NewParser
:ParseOnly

:lhError
:lhInOCaml
let rec a = 4;;
let rec f = function A -> B | C -> D;;
let rec d a b = match a with
  | `A(s, d) -> `D
  | _ -> `S
  | k -> `D;;
let rec f (h:t) = h;;
let val = [false;true;false];;
f val
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ "compilation_unit" (
//│ 	"value_definition" (
//│ 		"let" ()
//│ 		"rec" ()
//│ 		"let_binding" (
//│ 			"value_name" ()
//│ 			"=" ()
//│ 			"number" ()))
//│ 	";;" ()
//│ 	"value_definition" (
//│ 		"let" ()
//│ 		"rec" ()
//│ 		"let_binding" (
//│ 			"value_name" ()
//│ 			"=" ()
//│ 			"function_expression" (
//│ 				"function" ()
//│ 				"match_case" (
//│ 					"constructor_path" (
//│ 						"constructor_name" ())
//│ 					"->" ()
//│ 					"constructor_path" (
//│ 						"constructor_name" ()))
//│ 				"|" ()
//│ 				"match_case" (
//│ 					"constructor_path" (
//│ 						"constructor_name" ())
//│ 					"->" ()
//│ 					"constructor_path" (
//│ 						"constructor_name" ())))))
//│ 	";;" ()
//│ 	"value_definition" (
//│ 		"let" ()
//│ 		"rec" ()
//│ 		"let_binding" (
//│ 			"value_name" ()
//│ 			"parameter" (
//│ 				"value_pattern" ())
//│ 			"parameter" (
//│ 				"value_pattern" ())
//│ 			"=" ()
//│ 			"match_expression" (
//│ 				"match" ()
//│ 				"value_path" (
//│ 					"value_name" ())
//│ 				"with" ()
//│ 				"|" ()
//│ 				"match_case" (
//│ 					"tag_pattern" (
//│ 						"tag" (
//│ 							"`" ())
//│ 						"parenthesized_pattern" (
//│ 							"(" ()
//│ 							"tuple_pattern" (
//│ 								"value_pattern" ()
//│ 								"," ()
//│ 								"value_pattern" ())
//│ 							")" ()))
//│ 					"->" ()
//│ 					"tag" (
//│ 						"`" ()))
//│ 				"|" ()
//│ 				"match_case" (
//│ 					"value_pattern" ()
//│ 					"->" ()
//│ 					"tag" (
//│ 						"`" ()))
//│ 				"|" ()
//│ 				"match_case" (
//│ 					"value_pattern" ()
//│ 					"->" ()
//│ 					"tag" (
//│ 						"`" ())))))
//│ 	";;" ()
//│ 	"value_definition" (
//│ 		"let" ()
//│ 		"rec" ()
//│ 		"let_binding" (
//│ 			"value_name" ()
//│ 			"parameter" (
//│ 				"typed_pattern" (
//│ 					"(" ()
//│ 					"value_pattern" ()
//│ 					":" ()
//│ 					"type_constructor_path" (
//│ 						"type_constructor" ())
//│ 					")" ()))
//│ 			"=" ()
//│ 			"value_path" (
//│ 				"value_name" ())))
//│ 	";;" ()
//│ 	"value_definition" (
//│ 		"let" ()
//│ 		"let_binding" (
//│ 			"value_name" ()
//│ 			"=" ()
//│ 			"list_expression" (
//│ 				"[" ()
//│ 				"boolean" (
//│ 					"false" ())
//│ 				";" ()
//│ 				"boolean" (
//│ 					"true" ())
//│ 				";" ()
//│ 				"boolean" (
//│ 					"false" ())
//│ 				"]" ())))
//│ 	";;" ()
//│ 	"expression_item" (
//│ 		"application_expression" (
//│ 			"value_path" (
//│ 				"value_name" ())
//│ 			"value_path" (
//│ 				"value_name" ()))))
//│ !!!!!!ERROR!!!!!!
//│ scala.NotImplementedError: an implementation is missing
//│ !!!!!!ERROR!!!!!!



:lhInHaskell
:lhGenOCaml
[x | x <- [1,2]]
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 	LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 	| LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹([LH_C 1 [LH_C 2 [LH_N]]])
//│ 		---------- unoptimized ocaml gen ----------
//│ 		(let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		  (match _lh_listcomp_fun_para_1 with
//│ 		    | (_lh_listcomp_fun_ls_h_1 :: _lh_listcomp_fun_ls_t_1) -> 
//│ 		      (_lh_listcomp_fun_ls_h_1::(_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))
//│ 		    | [] -> 
//│ 		      [])) in
//│ 		  (_lh_listcomp_fun_1 (1::(2::[]))))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ 
//│ 	let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹([LH_C 1 [LH_C 2 [LH_N]]])
//│ 
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 30 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 25
//│ [LH_C 2 [LH_N]]: 31 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 25
//│ [LH_C 1 [LH_C 2 [LH_N]]]: 32 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 25
//│ ------------------
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 25 --->
//│ 	[LH_N]: 30
//│ 	[LH_C 2 [LH_N]]: 31
//│ 	[LH_C 1 [LH_C 2 [LH_N]]]: 32
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_N]: 30 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 25
//│ [LH_C 2 [LH_N]]: 31 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 25
//│ [LH_C 1 [LH_C 2 [LH_N]]]: 32 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 25
//│ ------------------
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 25 --->
//│ 	[LH_N]: 30
//│ 	[LH_C 2 [LH_N]]: 31
//│ 	[LH_C 1 [LH_C 2 [LH_N]]]: 32
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ 
//│ 	let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun²))
//│ 	in _lh_listcomp_fun²(
//│ 		let _lh_listcomp_fun_ls_h² = 1
//│ 		in let _lh_listcomp_fun_ls_t² = 	
//│ 			let _lh_listcomp_fun_ls_h³ = 2
//│ 			in let _lh_listcomp_fun_ls_t³ = (fun _lh_listcomp_fun⁵ -> [LH_N])
//│ 			in (fun _lh_listcomp_fun⁴ -> [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t³)])
//│ 		in (fun _lh_listcomp_fun³ -> [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun³(_lh_listcomp_fun_ls_t²)]))
//│ 
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│   (_lh_listcomp_fun_para_0 _lh_listcomp_fun_0)) in
//│   (_lh_listcomp_fun_0 (let rec _lh_listcomp_fun_ls_h_0 = 1 in
//│     (let rec _lh_listcomp_fun_ls_t_0 = (let rec _lh_listcomp_fun_ls_h_1 = 2 in
//│       (let rec _lh_listcomp_fun_ls_t_1 = (fun _lh_listcomp_fun_1 -> 
//│         []) in
//│         (fun _lh_listcomp_fun_2 -> 
//│           (_lh_listcomp_fun_ls_h_1::(_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_1))))) in
//│       (fun _lh_listcomp_fun_3 -> 
//│         (_lh_listcomp_fun_ls_h_0::(_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_0)))))))
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


:lhInHaskell
:lhGenOCaml
safe x d []    = True
safe x d (q:l) = (x /= q) && (x /= (q+d)) && (x /= (q-d)) && (safe x (d+1) l)
gen 0 nq = [[]]
gen n nq = [ (q:b) | b <- gen (n-1) nq, q <- [1..nq], safe q 1 b ]
nsoln nq = length (gen nq nq)
nsoln 10
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ nsoln₀^413(10)
//│ def enumFromTo₀(a², b²) = if (a² <= b²) then [LH_C a² enumFromTo₀^276((a² + 1), b²)] else [LH_N]
//│ def gen₀(_lh_gen_arg1¹, _lh_gen_arg2¹) = case _lh_gen_arg1¹ of {
//│ 	0  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 			LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 				let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 					LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀^353(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 					| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 				in _lh_listcomp_fun³(enumFromTo₀^377(1, _lh_gen_arg2¹))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²(gen₀^388((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ def length₀(ls⁷) = case ls⁷ of {
//│ 	LH_C h⁷ t⁸ => (1 + length₀^406(t⁸))
//│ 	| LH_N  => 0}
//│ def nsoln₀(_lh_nsoln_arg1¹) = length₀^290(gen₀^291(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ def safe₀(_lh_safe_arg1¹, _lh_safe_arg2¹, _lh_safe_arg3¹) = case _lh_safe_arg3¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀^331(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo_d0 a_2 b_2 =
//│ 		  (if (a_2 <= b_2) then
//│ 		    (a_2::((enumFromTo_d0 (a_2 + 1)) b_2))
//│ 		  else
//│ 		    [])
//│ 		and gen_d0 _lh_gen_arg1_1 _lh_gen_arg2_1 =
//│ 		  (match _lh_gen_arg1_1 with
//│ 		    | 0 -> 
//│ 		      ([]::[])
//│ 		    | _ -> 
//│ 		      (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		        (match _lh_listcomp_fun_para_2 with
//│ 		          | (_lh_listcomp_fun_ls_h_2 :: _lh_listcomp_fun_ls_t_2) -> 
//│ 		            (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		              (match _lh_listcomp_fun_para_3 with
//│ 		                | (_lh_listcomp_fun_ls_h_3 :: _lh_listcomp_fun_ls_t_3) -> 
//│ 		                  (if (((safe_d0 _lh_listcomp_fun_ls_h_3) 1) _lh_listcomp_fun_ls_h_2) then
//│ 		                    ((_lh_listcomp_fun_ls_h_3::_lh_listcomp_fun_ls_h_2)::(_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3))
//│ 		                  else
//│ 		                    (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3))
//│ 		                | [] -> 
//│ 		                  (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2))) in
//│ 		              (_lh_listcomp_fun_3 ((enumFromTo_d0 1) _lh_gen_arg2_1)))
//│ 		          | [] -> 
//│ 		            [])) in
//│ 		        (_lh_listcomp_fun_2 ((gen_d0 (_lh_gen_arg1_1 - 1)) _lh_gen_arg2_1))))
//│ 		and length_d0 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | (h_7 :: t_8) -> 
//│ 		      (1 + (length_d0 t_8))
//│ 		    | [] -> 
//│ 		      0)
//│ 		and nsoln_d0 _lh_nsoln_arg1_1 =
//│ 		  (length_d0 ((gen_d0 _lh_nsoln_arg1_1) _lh_nsoln_arg1_1))
//│ 		and safe_d0 _lh_safe_arg1_1 _lh_safe_arg2_1 _lh_safe_arg3_1 =
//│ 		  (match _lh_safe_arg3_1 with
//│ 		    | [] -> 
//│ 		      true
//│ 		    | (_lh_safe_LH_C_0_1 :: _lh_safe_LH_C_1_1) -> 
//│ 		      ((((_lh_safe_arg1_1 != _lh_safe_LH_C_0_1) && (_lh_safe_arg1_1 != (_lh_safe_LH_C_0_1 + _lh_safe_arg2_1))) && (_lh_safe_arg1_1 != (_lh_safe_LH_C_0_1 - _lh_safe_arg2_1))) && (((safe_d0 _lh_safe_arg1_1) (_lh_safe_arg2_1 + 1)) _lh_safe_LH_C_1_1)));;
//│ 		(nsoln_d0 10)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [nsoln₀^413] (hopeless to continue)
//│ 	[nsoln₀^413 · gen₀^291] (using original def)
//│ 		[nsoln₀^413 · gen₀^291 · enumFromTo₀^377] (using original def)
//│ 			[nsoln₀^413 · gen₀^291 · enumFromTo₀^377 · enumFromTo₀^276] ---> [nsoln₀^413 · gen₀^291 · enumFromTo₀^377] (using original def)
//│ 		[nsoln₀^413 · gen₀^291 · gen₀^388] ---> [nsoln₀^413 · gen₀^291] (using original def)
//│ 		[nsoln₀^413 · gen₀^291 · safe₀^353] (using original def)
//│ 			[nsoln₀^413 · gen₀^291 · safe₀^353 · safe₀^331] ---> [nsoln₀^413 · gen₀^291 · safe₀^353] (using original def)
//│ 	[nsoln₀^413 · length₀^290] (using original def)
//│ 		[nsoln₀^413 · length₀^290 · length₀^406] ---> [nsoln₀^413 · length₀^290] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ nsoln₀₀(10)
//│ def nsoln₀₀(_lh_nsoln_arg1¹) = 
//│ 	length₀₀(gen₀₀(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ 	where
//│ 	def gen₀₀(_lh_gen_arg1¹, _lh_gen_arg2¹) = 
//│ 		case _lh_gen_arg1¹ of {
//│ 			0  => [LH_C [LH_N] [LH_N]]
//│ 			| _  => 
//│ 				let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 					LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 						let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 							LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 							| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 						in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹))
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun²(gen₀₀((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ 		where
//│ 		def enumFromTo₀₀(a¹, b¹) = 
//│ 			if (a¹ <= b¹) then [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)] else [LH_N]
//│ 		def safe₀₀(_lh_safe_arg1¹, _lh_safe_arg2¹, _lh_safe_arg3¹) = 
//│ 			case _lh_safe_arg3¹ of {
//│ 				LH_N  => [True]
//│ 				| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))}
//│ 	def length₀₀(ls¹) = 
//│ 		case ls¹ of {
//│ 			LH_C h¹ t¹ => (1 + length₀₀(t¹))
//│ 			| LH_N  => 0}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 148 --->
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))}: 258
//│ [LH_N]: 149 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 185
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 211
//│ [LH_C [LH_N] [LH_N]]: 150 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 185
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 211
//│ [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 162 --->
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))}: 258
//│ [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 166 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 185
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 211
//│ [LH_N]: 184 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 185
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 211
//│ [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)]: 285 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 174
//│ [LH_N]: 286 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 174
//│ ------------------
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 174 --->
//│ 	[LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)]: 285
//│ 	[LH_N]: 286
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₀₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 185 --->
//│ 	[LH_N]: 149
//│ 	[LH_C [LH_N] [LH_N]]: 150
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 166
//│ 	[LH_N]: 184
//│ case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 211 --->
//│ 	[LH_N]: 149
//│ 	[LH_C [LH_N] [LH_N]]: 150
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 166
//│ 	[LH_N]: 184
//│ case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))}: 258 --->
//│ 	[LH_N]: 148
//│ 	[LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 162
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_N]: 148 --->
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))}: 258
//│ [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 162 --->
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))}: 258
//│ [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)]: 285 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 174
//│ [LH_N]: 286 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 174
//│ ------------------
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 174 --->
//│ 	[LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)]: 285
//│ 	[LH_N]: 286
//│ case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))}: 258 --->
//│ 	[LH_N]: 148
//│ 	[LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 162
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ nsoln₀₀(10)
//│ def nsoln₀₀(_lh_nsoln_arg1²) = 
//│ 	length₀₀(gen₀₀(_lh_nsoln_arg1², _lh_nsoln_arg1²))
//│ 	where
//│ 	def gen₀₀(_lh_gen_arg1², _lh_gen_arg2²) = 
//│ 		case _lh_gen_arg1² of {
//│ 			0  => [LH_C (fun _lh_safe_arg1⁴ -> (fun _lh_safe_arg2⁴ -> [True])) [LH_N]]
//│ 			| _  => 
//│ 				let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 					LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 						let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁵ -> _lh_listcomp_fun_para⁵(_lh_listcomp_fun_ls_h², _lh_listcomp_fun⁹, _lh_listcomp_fun⁸, _lh_listcomp_fun_ls_t²))
//│ 						in _lh_listcomp_fun⁹(enumFromTo₀₀(1, _lh_gen_arg2²))
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun⁸(gen₀₀((_lh_gen_arg1² - 1), _lh_gen_arg2²))}
//│ 		where
//│ 		def enumFromTo₀₀(a², b²) = 
//│ 			if (a² <= b²) then 
//│ 				let _lh_listcomp_fun_ls_h⁴ = a²
//│ 				in let _lh_listcomp_fun_ls_t⁴ = enumFromTo₀₀((a² + 1), b²)
//│ 				in (fun _lh_listcomp_fun_ls_h⁵ -> (fun _lh_listcomp_fun⁴ -> (fun _lh_listcomp_fun⁵ -> (fun _lh_listcomp_fun_ls_t⁵ -> if safe₀₀(_lh_listcomp_fun_ls_h⁴, 1, _lh_listcomp_fun_ls_h⁵) then [LH_C 
//│ 					let _lh_safe_LH_C_0² = _lh_listcomp_fun_ls_h⁴
//│ 					in let _lh_safe_LH_C_1² = _lh_listcomp_fun_ls_h⁵
//│ 					in (fun _lh_safe_arg1² -> (fun _lh_safe_arg2² -> ((((_lh_safe_arg1² /= _lh_safe_LH_C_0²) && (_lh_safe_arg1² /= (_lh_safe_LH_C_0² + _lh_safe_arg2²))) && (_lh_safe_arg1² /= (_lh_safe_LH_C_0² - _lh_safe_arg2²))) && safe₀₀(_lh_safe_arg1², (_lh_safe_arg2² + 1), _lh_safe_LH_C_1²)))) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴))))) else (fun _lh_listcomp_fun_ls_h⁶ -> (fun _lh_listcomp_fun⁶ -> (fun _lh_listcomp_fun⁷ -> (fun _lh_listcomp_fun_ls_t⁶ -> _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁶)))))
//│ 		def safe₀₀(_lh_safe_arg1³, _lh_safe_arg2³, _lh_safe_arg3²) = 
//│ 			_lh_safe_arg3²(_lh_safe_arg1³, _lh_safe_arg2³)
//│ 	def length₀₀(ls²) = 
//│ 		case ls² of {
//│ 			LH_C h¹ t¹ => (1 + length₀₀(t¹))
//│ 			| LH_N  => 0}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ let rec enumFromTo_d0_d0 a_0 b_0 =
//│   (if (a_0 <= b_0) then
//│     (let rec _lh_listcomp_fun_ls_h_0 = a_0 in
//│       (let rec _lh_listcomp_fun_ls_t_0 = ((enumFromTo_d0_d0 (a_0 + 1)) b_0) in
//│         (fun _lh_listcomp_fun_ls_h_1 _lh_listcomp_fun_0 _lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1 -> 
//│           (if (((safe_d0_d0 _lh_listcomp_fun_ls_h_0) 1) _lh_listcomp_fun_ls_h_1) then
//│             ((let rec _lh_safe_LH_C_0_0 = _lh_listcomp_fun_ls_h_0 in
//│               (let rec _lh_safe_LH_C_1_0 = _lh_listcomp_fun_ls_h_1 in
//│                 (fun _lh_safe_arg1_0 _lh_safe_arg2_0 -> 
//│                   ((((_lh_safe_arg1_0 != _lh_safe_LH_C_0_0) && (_lh_safe_arg1_0 != (_lh_safe_LH_C_0_0 + _lh_safe_arg2_0))) && (_lh_safe_arg1_0 != (_lh_safe_LH_C_0_0 - _lh_safe_arg2_0))) && (((safe_d0_d0 _lh_safe_arg1_0) (_lh_safe_arg2_0 + 1)) _lh_safe_LH_C_1_0)))))::(_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│           else
//│             (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))))
//│   else
//│     (fun _lh_listcomp_fun_ls_h_2 _lh_listcomp_fun_2 _lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_2 -> 
//│       (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_2)))
//│ and gen_d0_d0 _lh_gen_arg1_0 _lh_gen_arg2_0 =
//│   (match _lh_gen_arg1_0 with
//│     | 0 -> 
//│       ((fun _lh_safe_arg1_2 _lh_safe_arg2_2 -> 
//│         true)::[])
//│     | _ -> 
//│       (let rec _lh_listcomp_fun_4 = (fun _lh_listcomp_fun_para_0 -> 
//│         (match _lh_listcomp_fun_para_0 with
//│           | (_lh_listcomp_fun_ls_h_3 :: _lh_listcomp_fun_ls_t_3) -> 
//│             (let rec _lh_listcomp_fun_5 = (fun _lh_listcomp_fun_para_1 -> 
//│               ((((_lh_listcomp_fun_para_1 _lh_listcomp_fun_ls_h_3) _lh_listcomp_fun_5) _lh_listcomp_fun_4) _lh_listcomp_fun_ls_t_3)) in
//│               (_lh_listcomp_fun_5 ((enumFromTo_d0_d0 1) _lh_gen_arg2_0)))
//│           | [] -> 
//│             [])) in
//│         (_lh_listcomp_fun_4 ((gen_d0_d0 (_lh_gen_arg1_0 - 1)) _lh_gen_arg2_0))))
//│ and length_d0_d0 ls_0 =
//│   (match ls_0 with
//│     | (h_0 :: t_0) -> 
//│       (1 + (length_d0_d0 t_0))
//│     | [] -> 
//│       0)
//│ and nsoln_d0_d0 _lh_nsoln_arg1_0 =
//│   (length_d0_d0 ((gen_d0_d0 _lh_nsoln_arg1_0) _lh_nsoln_arg1_0))
//│ and safe_d0_d0 _lh_safe_arg1_1 _lh_safe_arg2_1 _lh_safe_arg3_0 =
//│   ((_lh_safe_arg3_0 _lh_safe_arg1_1) _lh_safe_arg2_1);;
//│ (nsoln_d0_d0 10)
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<



:lhInHaskell
:lhGenOCaml
testMapmap ls = map (\x -> x + 1) $ map (\x -> x + x) ls
testMapmap $ primId [1..1000000]
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMapmap₀^252(primId⁰(enumFromTo₀^254(1, 1000000)))
//│ def enumFromTo₀(a², b²) = if (a² <= b²) then [LH_C a² enumFromTo₀^210((a² + 1), b²)] else [LH_N]
//│ def map₀(f⁴, ls⁷) = case ls⁷ of {
//│ 	LH_C h⁷ t⁸ => [LH_C f⁴(h⁷) map₀^228(f⁴, t⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map₁(f⁵, ls⁸) = case ls⁸ of {
//│ 	LH_C h⁸ t⁹ => [LH_C f⁵(h⁸) map₁^242(f⁵, t⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def testMapmap₀(_lh_testMapmap_arg1¹) = map₀^184((fun x² -> (x² + 1)), map₁^192((fun x³ -> (x³ + x³)), _lh_testMapmap_arg1¹))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo_d0 a_2 b_2 =
//│ 		  (if (a_2 <= b_2) then
//│ 		    (a_2::((enumFromTo_d0 (a_2 + 1)) b_2))
//│ 		  else
//│ 		    [])
//│ 		and map_d0 f_4 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | (h_7 :: t_8) -> 
//│ 		      ((f_4 h_7)::((map_d0 f_4) t_8))
//│ 		    | [] -> 
//│ 		      [])
//│ 		and map_d1 f_5 ls_8 =
//│ 		  (match ls_8 with
//│ 		    | (h_8 :: t_9) -> 
//│ 		      ((f_5 h_8)::((map_d1 f_5) t_9))
//│ 		    | [] -> 
//│ 		      [])
//│ 		and testMapmap_d0 _lh_testMapmap_arg1_1 =
//│ 		  ((map_d0 (fun x_2 -> 
//│ 		    (x_2 + 1))) ((map_d1 (fun x_3 -> 
//│ 		    (x_3 + x_3))) _lh_testMapmap_arg1_1));;
//│ 		(testMapmap_d0 ((enumFromTo_d0 1) 1000000))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [enumFromTo₀^254]
//│ 	[enumFromTo₀^254 · enumFromTo₀^210] ---> [enumFromTo₀^254] (only one)
//│ [testMapmap₀^252]
//│ 	[testMapmap₀^252 · map₀^184]
//│ 		[testMapmap₀^252 · map₀^184 · map₀^228] ---> [testMapmap₀^252 · map₀^184] (only one)
//│ 	[testMapmap₀^252 · map₁^192]
//│ 		[testMapmap₀^252 · map₁^192 · map₁^242] ---> [testMapmap₀^252 · map₁^192] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testMapmap₀₀(primId⁰(enumFromTo₀₀(1, 1000000)))
//│ def enumFromTo₀₀(a¹, b¹) = 
//│ 	if (a¹ <= b¹) then [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)] else [LH_N]
//│ def testMapmap₀₀(_lh_testMapmap_arg1¹) = 
//│ 	map₀₀((fun x² -> (x² + 1)), map₁₀((fun x³ -> (x³ + x³)), _lh_testMapmap_arg1¹))
//│ 	where
//│ 	def map₀₀(f², ls²) = 
//│ 		case ls² of {
//│ 			LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)]
//│ 			| LH_N  => [LH_N]}
//│ 	def map₁₀(f³, ls³) = 
//│ 		case ls³ of {
//│ 			LH_C h³ t³ => [LH_C f³(h³) map₁₀(f³, t³)]
//│ 			| LH_N  => [LH_N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f³(h³) map₁₀(f³, t³)]: 101 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 89
//│ [LH_N]: 102 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 89
//│ ------------------
//│ case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 89 --->
//│ 	[LH_C f³(h³) map₁₀(f³, t³)]: 101
//│ 	[LH_N]: 102
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C f³(h³) map₁₀(f³, t³)]: 101 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 89
//│ [LH_N]: 102 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 89
//│ ------------------
//│ case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 89 --->
//│ 	[LH_C f³(h³) map₁₀(f³, t³)]: 101
//│ 	[LH_N]: 102
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMapmap₀₀(primId⁰(enumFromTo₀₀(1, 1000000)))
//│ def enumFromTo₀₀(a², b²) = 
//│ 	if (a² <= b²) then [LH_C a² enumFromTo₀₀((a² + 1), b²)] else [LH_N]
//│ def testMapmap₀₀(_lh_testMapmap_arg1²) = 
//│ 	map₀₀((fun x⁴ -> (x⁴ + 1)), map₁₀((fun x⁵ -> (x⁵ + x⁵)), _lh_testMapmap_arg1²))
//│ 	where
//│ 	def map₀₀(f⁴, ls⁴) = 
//│ 		ls⁴(f⁴)
//│ 	def map₁₀(f⁵, ls⁵) = 
//│ 		case ls⁵ of {
//│ 			LH_C h³ t³ => 
//│ 				let h⁴ = f⁵(h³)
//│ 				in let t⁴ = map₁₀(f⁵, t³)
//│ 				in (fun f⁶ -> [LH_C f⁶(h⁴) map₀₀(f⁶, t⁴)])
//│ 			| LH_N  => (fun f⁷ -> [LH_N])}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ (*
//│ ocamlfind ocamlopt -rectypes -thread -O3 ./Mapmap.ml -o "./Mapmap.out" -linkpkg -package "core_unix.command_unix" -linkpkg -package "core_bench" && ./Mapmap.out
//│ *)
//│ (* #use "topfind";;
//│ #require "core_unix.command_unix";;
//│ #require "core_bench";; *)
//│ open Core_bench;;
//│ 
//│ (* original *)
//│ let rec enumFromTo_d0 a_2 b_2 =
//│   (if (a_2 <= b_2) then
//│     (a_2::((enumFromTo_d0 (a_2 + 1)) b_2))
//│   else
//│     [])
//│ and map_d0 f_4 ls_7 =
//│   (match ls_7 with
//│     | (h_7 :: t_8) -> 
//│       ((f_4 h_7)::((map_d0 f_4) t_8))
//│     | [] -> 
//│       [])
//│ and map_d1 f_5 ls_8 =
//│   (match ls_8 with
//│     | (h_8 :: t_9) -> 
//│       ((f_5 h_8)::((map_d1 f_5) t_9))
//│     | [] -> 
//│       [])
//│ and testMapmap_d0 _lh_testMapmap_arg1_1 =
//│   ((map_d0 (fun x_2 -> 
//│     (x_2 + 1))) ((map_d1 (fun x_3 -> 
//│     (x_3 + x_3))) _lh_testMapmap_arg1_1));;
//│ 
//│ (* optimized *)
//│ let rec enumFromTo_d0_d0 a_0 b_0 =
//│   (if (a_0 <= b_0) then
//│     (a_0::((enumFromTo_d0_d0 (a_0 + 1)) b_0))
//│   else
//│     [])
//│ and map_d0_d0 f_0 ls_0 =
//│   (ls_0 f_0)
//│ and map_d1_d0 f_1 ls_1 =
//│   (match ls_1 with
//│     | (h_0 :: t_0) -> 
//│       (let rec h_1 = (f_1 h_0) in
//│         (let rec t_1 = ((map_d1_d0 f_1) t_0) in
//│           (fun f_2 -> 
//│             ((f_2 h_1)::((map_d0_d0 f_2) t_1)))))
//│     | [] -> 
//│       (fun f_3 -> 
//│         []))
//│ and testMapmap_d0_d0 _lh_testMapmap_arg1_0 =
//│   ((map_d0_d0 (fun x_0 -> 
//│     (x_0 + 1))) ((map_d1_d0 (fun x_1 -> 
//│     (x_1 + x_1))) _lh_testMapmap_arg1_0));;
//│ 
//│ Command_unix.run (Bench.make_command [
//│   Bench.Test.create ~name:"original_Mapmap_1" (fun () -> ignore ((testMapmap_d0 ((enumFromTo_d0 1) 1000000))));
//│   Bench.Test.create ~name:"lumberhack_Mapmap_1" (fun () -> ignore ((testMapmap_d0_d0 ((enumFromTo_d0_d0 1) 1000000))));
//│   Bench.Test.create ~name:"original_Mapmap_2" (fun () -> ignore ((testMapmap_d0 ((enumFromTo_d0 1) 1000000))));
//│   Bench.Test.create ~name:"lumberhack_Mapmap_2" (fun () -> ignore ((testMapmap_d0_d0 ((enumFromTo_d0_d0 1) 1000000))));
//│ ])
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


// NOTE: lumberhack is slightly slower, since this lastDrive and
// last is also somehow accumulating-parametric?
:lhGenOCaml
fun enumFromTo(a, b) = if a < b then C(a, enumFromTo(a + 1, b)) else N
fun filter(ls, f) = if ls is
  C(h, t) then if f(h) then C(h, filter(t, f)) else filter(t, f)
  N then N
fun lastDrive(ls) = if ls is
  C(h, t) then Some(last(h, t))
  N then None
fun last(a, ls) = if ls is
  N then a
  C(h, t) then last(h, t)
fun lastFilter(ls, f) = lastDrive(filter(ls, f))
fun testLastFilterPolyVar(ls) = lastFilter(ls, x => x < 1000)
testLastFilterPolyVar(primId(enumFromTo(1, 100000)))
//│ |#fun| |enumFromTo|(|a|,| |b|)| |#=| |#if| |a| |<| |b| |#then| |C|(|a|,| |enumFromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#fun| |filter|(|ls|,| |f|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |#if| |f|(|h|)| |#then| |C|(|h|,| |filter|(|t|,| |f|)|)| |#else| |filter|(|t|,| |f|)|↵|N| |#then| |N|←|↵|#fun| |lastDrive|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |Some|(|last|(|h|,| |t|)|)|↵|N| |#then| |None|←|↵|#fun| |last|(|a|,| |ls|)| |#=| |#if| |ls| |is|→|N| |#then| |a|↵|C|(|h|,| |t|)| |#then| |last|(|h|,| |t|)|←|↵|#fun| |lastFilter|(|ls|,| |f|)| |#=| |lastDrive|(|filter|(|ls|,| |f|)|)|↵|#fun| |testLastFilterPolyVar|(|ls|)| |#=| |lastFilter|(|ls|,| |x| |=>| |x| |<| |1000|)|↵|testLastFilterPolyVar|(|primId|(|enumFromTo|(|1|,| |100000|)|)|)|
//│ Parsed: {fun enumFromTo = a, b, => if (< (a,) (b,)) then C (a, enumFromTo (+ (a,) (1,), b,),) else N; fun filter = ls, f, => if ls is ‹(C (h, t,)) then if (f (h,)) then C (h, filter (t, f,),) else filter (t, f,); (N) then N›; fun lastDrive = ls, => if ls is ‹(C (h, t,)) then Some (last (h, t,),); (N) then None›; fun last = a, ls, => if ls is ‹(N) then a; (C (h, t,)) then last (h, t,)›; fun lastFilter = ls, f, => lastDrive (filter (ls, f,),); fun testLastFilterPolyVar = ls, => lastFilter (ls, x, => < (x,) (1000,),); testLastFilterPolyVar (primId (enumFromTo (1, 100000,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testLastFilterPolyVar^82(primId⁰(enumFromTo^84(1, 100000)))
//│ def enumFromTo(a⁰, b⁰) = if (a⁰ < b⁰) then [C a⁰ enumFromTo^7((a⁰ + 1), b⁰)] else [N]
//│ def filter(ls⁰, f⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => if f⁰(h⁰) then [C h⁰ filter^26(t⁰, f⁰)] else filter^32(t⁰, f⁰)
//│ 	| N  => [N]}
//│ def last(a¹, ls²) = case ls² of {
//│ 	N  => a¹
//│ 	| C h² t² => last^54(h², t²)}
//│ def lastDrive(ls¹) = case ls¹ of {
//│ 	C h¹ t¹ => [Some last^43(h¹, t¹)]
//│ 	| N  => [None]}
//│ def lastFilter(ls³, f¹) = lastDrive^62(filter^63(ls³, f¹))
//│ def testLastFilterPolyVar(ls⁴) = lastFilter^71(ls⁴, (fun x⁰ -> (x⁰ < 1000)))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo a_0 b_0 =
//│ 		  (if (a_0 < b_0) then
//│ 		    (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`N))
//│ 		and filter ls_0 f_0 =
//│ 		  (match ls_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (if (f_0 h_0) then
//│ 		        (`C(h_0, ((filter t_0) f_0)))
//│ 		      else
//│ 		        ((filter t_0) f_0))
//│ 		    | `N -> 
//│ 		      (`N))
//│ 		and last a_1 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `N -> 
//│ 		      a_1
//│ 		    | `C(h_2, t_2) -> 
//│ 		      ((last h_2) t_2))
//│ 		and lastDrive ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `C(h_1, t_1) -> 
//│ 		      (`Some(((last h_1) t_1)))
//│ 		    | `N -> 
//│ 		      (`None))
//│ 		and lastFilter ls_3 f_1 =
//│ 		  (lastDrive ((filter ls_3) f_1))
//│ 		and testLastFilterPolyVar ls_4 =
//│ 		  ((lastFilter ls_4) (fun x_0 -> 
//│ 		    (x_0 < 1000)));;
//│ 		(testLastFilterPolyVar ((enumFromTo 1) 100000))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [enumFromTo^84]
//│ 	[enumFromTo^84 · enumFromTo^7] ---> [enumFromTo^84] (only one)
//│ [testLastFilterPolyVar^82]
//│ 	[testLastFilterPolyVar^82 · lastFilter^71]
//│ 		[testLastFilterPolyVar^82 · lastFilter^71 · filter^63]
//│ 			[testLastFilterPolyVar^82 · lastFilter^71 · filter^63 · filter^26] (hopeless to continue)
//│ 				[testLastFilterPolyVar^82 · lastFilter^71 · filter^63 · filter^26 · filter^26] ---> [testLastFilterPolyVar^82 · lastFilter^71 · filter^63 · filter^26] (using original def)
//│ 				[testLastFilterPolyVar^82 · lastFilter^71 · filter^63 · filter^26 · filter^32] ---> [testLastFilterPolyVar^82 · lastFilter^71 · filter^63 · filter^26] (using original def)
//│ 			[testLastFilterPolyVar^82 · lastFilter^71 · filter^63 · filter^32] ---> [testLastFilterPolyVar^82 · lastFilter^71 · filter^63] (only one)
//│ 		[testLastFilterPolyVar^82 · lastFilter^71 · lastDrive^62] (hopeless to continue)
//│ 			[testLastFilterPolyVar^82 · lastFilter^71 · lastDrive^62 · last^43] (using original def)
//│ 				[testLastFilterPolyVar^82 · lastFilter^71 · lastDrive^62 · last^43 · last^54] ---> [testLastFilterPolyVar^82 · lastFilter^71 · lastDrive^62 · last^43] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testLastFilterPolyVar₀(primId⁰(enumFromTo₀(1, 100000)))
//│ def enumFromTo₀(a², b¹) = 
//│ 	if (a² < b¹) then [C a² enumFromTo₀((a² + 1), b¹)] else [N]
//│ def testLastFilterPolyVar₀(ls¹⁰) = 
//│ 	lastFilter₀(ls¹⁰, (fun x¹ -> (x¹ < 1000)))
//│ 	where
//│ 	def lastFilter₀(ls⁹, f⁴) = 
//│ 		lastDrive₀(filter₀(ls⁹, f⁴))
//│ 		where
//│ 		def filter₀(ls⁶, f²) = 
//│ 			case ls⁶ of {
//│ 				C h⁴ t⁴ => if f²(h⁴) then [C h⁴ filter₁(t⁴, f²)] else filter₀(t⁴, f²)
//│ 				| N  => [N]}
//│ 			where
//│ 			def filter₁(ls⁷, f³) = 
//│ 				case ls⁷ of {
//│ 					C h⁵ t⁵ => if f³(h⁵) then [C h⁵ filter₁(t⁵, f³)] else filter₁(t⁵, f³)
//│ 					| N  => [N]}
//│ 		def lastDrive₀(ls⁸) = 
//│ 			case ls⁸ of {
//│ 				C h⁶ t⁶ => [Some last₀(h⁶, t⁶)]
//│ 				| N  => [None]}
//│ 			where
//│ 			def last₀(a³, ls⁵) = 
//│ 				case ls⁵ of {
//│ 					N  => a³
//│ 					| C h³ t³ => last₀(h³, t³)}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h⁴ filter₁(t⁴, f²)]: 131 --->
//│ 	case ls⁸ of {C h⁶ t⁶ => [Some last₀(h⁶, t⁶)] | N  => [None]}: 171
//│ [N]: 138 --->
//│ 	case ls⁸ of {C h⁶ t⁶ => [Some last₀(h⁶, t⁶)] | N  => [None]}: 171
//│ [C h⁵ filter₁(t⁵, f³)]: 152 --->
//│ 	case ls⁵ of {N  => a³ | C h³ t³ => last₀(h³, t³)}: 118
//│ [N]: 159 --->
//│ 	case ls⁵ of {N  => a³ | C h³ t³ => last₀(h³, t³)}: 118
//│ ------------------
//│ case ls⁵ of {N  => a³ | C h³ t³ => last₀(h³, t³)}: 118 --->
//│ 	[C h⁵ filter₁(t⁵, f³)]: 152
//│ 	[N]: 159
//│ case ls⁸ of {C h⁶ t⁶ => [Some last₀(h⁶, t⁶)] | N  => [None]}: 171 --->
//│ 	[C h⁴ filter₁(t⁴, f²)]: 131
//│ 	[N]: 138
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C h⁴ filter₁(t⁴, f²)]: 131 --->
//│ 	case ls⁸ of {C h⁶ t⁶ => [Some last₀(h⁶, t⁶)] | N  => [None]}: 171
//│ [N]: 138 --->
//│ 	case ls⁸ of {C h⁶ t⁶ => [Some last₀(h⁶, t⁶)] | N  => [None]}: 171
//│ [C h⁵ filter₁(t⁵, f³)]: 152 --->
//│ 	case ls⁵ of {N  => a³ | C h³ t³ => last₀(h³, t³)}: 118
//│ [N]: 159 --->
//│ 	case ls⁵ of {N  => a³ | C h³ t³ => last₀(h³, t³)}: 118
//│ ------------------
//│ case ls⁵ of {N  => a³ | C h³ t³ => last₀(h³, t³)}: 118 --->
//│ 	[C h⁵ filter₁(t⁵, f³)]: 152
//│ 	[N]: 159
//│ case ls⁸ of {C h⁶ t⁶ => [Some last₀(h⁶, t⁶)] | N  => [None]}: 171 --->
//│ 	[C h⁴ filter₁(t⁴, f²)]: 131
//│ 	[N]: 138
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testLastFilterPolyVar₀(primId⁰(enumFromTo₀(1, 100000)))
//│ def enumFromTo₀(a⁷, b²) = 
//│ 	if (a⁷ < b²) then [C a⁷ enumFromTo₀((a⁷ + 1), b²)] else [N]
//│ def testLastFilterPolyVar₀(ls¹⁵) = 
//│ 	lastFilter₀(ls¹⁵, (fun x² -> (x² < 1000)))
//│ 	where
//│ 	def lastFilter₀(ls¹⁶, f⁷) = 
//│ 		lastDrive₀(filter₀(ls¹⁶, f⁷))
//│ 		where
//│ 		def filter₀(ls¹⁴, f⁶) = 
//│ 			case ls¹⁴ of {
//│ 				C h⁴ t⁴ => if f⁶(h⁴) then 
//│ 					let h⁸ = h⁴
//│ 					in let t⁸ = filter₁(t⁴, f⁶)
//│ 					in [Some last₀(h⁸, t⁸)] else filter₀(t⁴, f⁶)
//│ 				| N  => [None]}
//│ 			where
//│ 			def filter₁(ls¹², f⁵) = 
//│ 				case ls¹² of {
//│ 					C h⁵ t⁵ => if f⁵(h⁵) then 
//│ 						let h⁷ = h⁵
//│ 						in let t⁷ = filter₁(t⁵, f⁵)
//│ 						in (fun a⁴ -> last₀(h⁷, t⁷)) else filter₁(t⁵, f⁵)
//│ 					| N  => (fun a⁵ -> a⁵)}
//│ 		def lastDrive₀(ls¹¹) = 
//│ 			ls¹¹
//│ 			where
//│ 			def last₀(a⁶, ls¹³) = 
//│ 				ls¹³(a⁶)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ (*
//│ ocamlfind ocamlopt -rectypes -thread -O3 ./LastFilterPolyVar.ml -o "./LastFilterPolyVar.out" -linkpkg -package "core_unix.command_unix" -linkpkg -package "core_bench" && ./LastFilterPolyVar.out
//│ *)
//│ (* #use "topfind";;
//│ #require "core_unix.command_unix";;
//│ #require "core_bench";; *)
//│ open Core_bench;;
//│ 
//│ (* original *)
//│ let rec enumFromTo a_0 b_0 =
//│   (if (a_0 < b_0) then
//│     (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│   else
//│     (`N))
//│ and filter ls_0 f_0 =
//│   (match ls_0 with
//│     | `C(h_0, t_0) -> 
//│       (if (f_0 h_0) then
//│         (`C(h_0, ((filter t_0) f_0)))
//│       else
//│         ((filter t_0) f_0))
//│     | `N -> 
//│       (`N))
//│ and last a_1 ls_2 =
//│   (match ls_2 with
//│     | `N -> 
//│       a_1
//│     | `C(h_2, t_2) -> 
//│       ((last h_2) t_2))
//│ and lastDrive ls_1 =
//│   (match ls_1 with
//│     | `C(h_1, t_1) -> 
//│       (`Some(((last h_1) t_1)))
//│     | `N -> 
//│       (`None))
//│ and lastFilter ls_3 f_1 =
//│   (lastDrive ((filter ls_3) f_1))
//│ and testLastFilterPolyVar ls_4 =
//│   ((lastFilter ls_4) (fun x_0 -> 
//│     (x_0 < 1000)));;
//│ 
//│ (* optimized *)
//│ let rec enumFromTo_d0 a_3 b_0 =
//│   (if (a_3 < b_0) then
//│     (`C(a_3, ((enumFromTo_d0 (a_3 + 1)) b_0)))
//│   else
//│     (`N))
//│ and filter_d0 ls_3 f_1 =
//│   (match ls_3 with
//│     | `C(h_2, t_2) -> 
//│       (if (f_1 h_2) then
//│         (let rec h_3 = h_2 in
//│           (let rec t_3 = ((filter_d1 t_2) f_1) in
//│             (`Some(((last_d0 h_3) t_3)))))
//│       else
//│         ((filter_d0 t_2) f_1))
//│     | `N -> 
//│       (`None))
//│ and filter_d1 ls_1 f_0 =
//│   (match ls_1 with
//│     | `C(h_0, t_0) -> 
//│       (if (f_0 h_0) then
//│         (let rec h_1 = h_0 in
//│           (let rec t_1 = ((filter_d1 t_0) f_0) in
//│             (fun a_0 -> 
//│               ((last_d0 h_1) t_1))))
//│       else
//│         ((filter_d1 t_0) f_0))
//│     | `N -> 
//│       (fun a_1 -> 
//│         a_1))
//│ and lastDrive_d0 ls_0 =
//│   ls_0
//│ and lastFilter_d0 ls_5 f_2 =
//│   (lastDrive_d0 ((filter_d0 ls_5) f_2))
//│ and last_d0 a_2 ls_2 =
//│   (ls_2 a_2)
//│ and testLastFilterPolyVar_d0 ls_4 =
//│   ((lastFilter_d0 ls_4) (fun x_0 -> 
//│     (x_0 < 1000)));;
//│ 
//│ Command_unix.run (Bench.make_command [
//│   Bench.Test.create ~name:"original_LastFilterPolyVar_1" (fun () -> ignore ((testLastFilterPolyVar ((enumFromTo 1) 100000))));
//│   Bench.Test.create ~name:"lumberhack_LastFilterPolyVar_1" (fun () -> ignore ((testLastFilterPolyVar_d0 ((enumFromTo_d0 1) 100000))));
//│   Bench.Test.create ~name:"original_LastFilterPolyVar_2" (fun () -> ignore ((testLastFilterPolyVar ((enumFromTo 1) 100000))));
//│   Bench.Test.create ~name:"lumberhack_LastFilterPolyVar_2" (fun () -> ignore ((testLastFilterPolyVar_d0 ((enumFromTo_d0 1) 100000))));
//│ ])
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

:lhGenOCaml
fun enumFromTo(a, b) = if a < b then C(a, enumFromTo(a + 1, b)) else N
fun map(ls, f) = if ls is
  C(h, t) then C(f(h), map(t, f))
  N then N
fun testMapmapPolyVar(ls) = map(map(ls, x => x + 1), x => x * x)
testMapmapPolyVar(primId(enumFromTo(1, 100000)))
//│ |#fun| |enumFromTo|(|a|,| |b|)| |#=| |#if| |a| |<| |b| |#then| |C|(|a|,| |enumFromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#fun| |map|(|ls|,| |f|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|t|,| |f|)|)|↵|N| |#then| |N|←|↵|#fun| |testMapmapPolyVar|(|ls|)| |#=| |map|(|map|(|ls|,| |x| |=>| |x| |+| |1|)|,| |x| |=>| |x| |*| |x|)|↵|testMapmapPolyVar|(|primId|(|enumFromTo|(|1|,| |100000|)|)|)|
//│ Parsed: {fun enumFromTo = a, b, => if (< (a,) (b,)) then C (a, enumFromTo (+ (a,) (1,), b,),) else N; fun map = ls, f, => if ls is ‹(C (h, t,)) then C (f (h,), map (t, f,),); (N) then N›; fun testMapmapPolyVar = ls, => map (map (ls, x, => + (x,) (1,),), x, => * (x,) (x,),); testMapmapPolyVar (primId (enumFromTo (1, 100000,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMapmapPolyVar^55(primId⁰(enumFromTo^57(1, 100000)))
//│ def enumFromTo(a⁰, b⁰) = if (a⁰ < b⁰) then [C a⁰ enumFromTo^7((a⁰ + 1), b⁰)] else [N]
//│ def map(ls⁰, f⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map^25(t⁰, f⁰)]
//│ 	| N  => [N]}
//│ def testMapmapPolyVar(ls¹) = map^35(map^36(ls¹, (fun x⁰ -> (x⁰ + 1))), (fun x¹ -> (x¹ * x¹)))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo a_0 b_0 =
//│ 		  (if (a_0 < b_0) then
//│ 		    (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`N))
//│ 		and map ls_0 f_0 =
//│ 		  (match ls_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (`C((f_0 h_0), ((map t_0) f_0)))
//│ 		    | `N -> 
//│ 		      (`N))
//│ 		and testMapmapPolyVar ls_1 =
//│ 		  ((map ((map ls_1) (fun x_0 -> 
//│ 		    (x_0 + 1)))) (fun x_1 -> 
//│ 		    (x_1 * x_1)));;
//│ 		(testMapmapPolyVar ((enumFromTo 1) 100000))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [enumFromTo^57]
//│ 	[enumFromTo^57 · enumFromTo^7] ---> [enumFromTo^57] (only one)
//│ [testMapmapPolyVar^55]
//│ 	[testMapmapPolyVar^55 · map^35]
//│ 		[testMapmapPolyVar^55 · map^35 · map^25] ---> [testMapmapPolyVar^55 · map^35] (only one)
//│ 	[testMapmapPolyVar^55 · map^36]
//│ 		[testMapmapPolyVar^55 · map^36 · map^25] ---> [testMapmapPolyVar^55 · map^36] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testMapmapPolyVar₀(primId⁰(enumFromTo₀(1, 100000)))
//│ def enumFromTo₀(a¹, b¹) = 
//│ 	if (a¹ < b¹) then [C a¹ enumFromTo₀((a¹ + 1), b¹)] else [N]
//│ def testMapmapPolyVar₀(ls²) = 
//│ 	map₀(map₁(ls², (fun x² -> (x² + 1))), (fun x³ -> (x³ * x³)))
//│ 	where
//│ 	def map₀(ls³, f¹) = 
//│ 		case ls³ of {
//│ 			C h¹ t¹ => [C f¹(h¹) map₀(t¹, f¹)]
//│ 			| N  => [N]}
//│ 	def map₁(ls⁴, f²) = 
//│ 		case ls⁴ of {
//│ 			C h² t² => [C f²(h²) map₁(t², f²)]
//│ 			| N  => [N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C f²(h²) map₁(t², f²)]: 127 --->
//│ 	case ls³ of {C h¹ t¹ => [C f¹(h¹) map₀(t¹, f¹)] | N  => [N]}: 115
//│ [N]: 128 --->
//│ 	case ls³ of {C h¹ t¹ => [C f¹(h¹) map₀(t¹, f¹)] | N  => [N]}: 115
//│ ------------------
//│ case ls³ of {C h¹ t¹ => [C f¹(h¹) map₀(t¹, f¹)] | N  => [N]}: 115 --->
//│ 	[C f²(h²) map₁(t², f²)]: 127
//│ 	[N]: 128
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C f²(h²) map₁(t², f²)]: 127 --->
//│ 	case ls³ of {C h¹ t¹ => [C f¹(h¹) map₀(t¹, f¹)] | N  => [N]}: 115
//│ [N]: 128 --->
//│ 	case ls³ of {C h¹ t¹ => [C f¹(h¹) map₀(t¹, f¹)] | N  => [N]}: 115
//│ ------------------
//│ case ls³ of {C h¹ t¹ => [C f¹(h¹) map₀(t¹, f¹)] | N  => [N]}: 115 --->
//│ 	[C f²(h²) map₁(t², f²)]: 127
//│ 	[N]: 128
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMapmapPolyVar₀(primId⁰(enumFromTo₀(1, 100000)))
//│ def enumFromTo₀(a², b²) = 
//│ 	if (a² < b²) then [C a² enumFromTo₀((a² + 1), b²)] else [N]
//│ def testMapmapPolyVar₀(ls⁵) = 
//│ 	map₀(map₁(ls⁵, (fun x⁴ -> (x⁴ + 1))), (fun x⁵ -> (x⁵ * x⁵)))
//│ 	where
//│ 	def map₀(ls⁶, f³) = 
//│ 		ls⁶(f³)
//│ 	def map₁(ls⁷, f⁴) = 
//│ 		case ls⁷ of {
//│ 			C h² t² => 
//│ 				let h³ = f⁴(h²)
//│ 				in let t³ = map₁(t², f⁴)
//│ 				in (fun f⁵ -> [C f⁵(h³) map₀(t³, f⁵)])
//│ 			| N  => (fun f⁶ -> [N])}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ (*
//│ ocamlfind ocamlopt -rectypes -thread -O3 ./MapmapPolyVar.ml -o "./MapmapPolyVar.out" -linkpkg -package "core_unix.command_unix" -linkpkg -package "core_bench" && ./MapmapPolyVar.out
//│ *)
//│ (* #use "topfind";;
//│ #require "core_unix.command_unix";;
//│ #require "core_bench";; *)
//│ open Core_bench;;
//│ 
//│ (* original *)
//│ let rec enumFromTo a_0 b_0 =
//│   (if (a_0 < b_0) then
//│     (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│   else
//│     (`N))
//│ and map ls_0 f_0 =
//│   (match ls_0 with
//│     | `C(h_0, t_0) -> 
//│       (`C((f_0 h_0), ((map t_0) f_0)))
//│     | `N -> 
//│       (`N))
//│ and testMapmapPolyVar ls_1 =
//│   ((map ((map ls_1) (fun x_0 -> 
//│     (x_0 + 1)))) (fun x_1 -> 
//│     (x_1 * x_1)));;
//│ 
//│ (* optimized *)
//│ let rec enumFromTo_d0 a_0 b_0 =
//│   (if (a_0 < b_0) then
//│     (`C(a_0, ((enumFromTo_d0 (a_0 + 1)) b_0)))
//│   else
//│     (`N))
//│ and map_d0 ls_1 f_0 =
//│   (ls_1 f_0)
//│ and map_d1 ls_2 f_1 =
//│   (match ls_2 with
//│     | `C(h_0, t_0) -> 
//│       (let rec h_1 = (f_1 h_0) in
//│         (let rec t_1 = ((map_d1 t_0) f_1) in
//│           (fun f_2 -> 
//│             (`C((f_2 h_1), ((map_d0 t_1) f_2))))))
//│     | `N -> 
//│       (fun f_3 -> 
//│         (`N)))
//│ and testMapmapPolyVar_d0 ls_0 =
//│   ((map_d0 ((map_d1 ls_0) (fun x_0 -> 
//│     (x_0 + 1)))) (fun x_1 -> 
//│     (x_1 * x_1)));;
//│ 
//│ Command_unix.run (Bench.make_command [
//│   Bench.Test.create ~name:"original_MapmapPolyVar_1" (fun () -> ignore ((testMapmapPolyVar ((enumFromTo 1) 100000))));
//│   Bench.Test.create ~name:"lumberhack_MapmapPolyVar_1" (fun () -> ignore ((testMapmapPolyVar_d0 ((enumFromTo_d0 1) 100000))));
//│   Bench.Test.create ~name:"original_MapmapPolyVar_2" (fun () -> ignore ((testMapmapPolyVar ((enumFromTo 1) 100000))));
//│   Bench.Test.create ~name:"lumberhack_MapmapPolyVar_2" (fun () -> ignore ((testMapmapPolyVar_d0 ((enumFromTo_d0 1) 100000))));
//│ ])
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


// NOTE: digression: simply use `let r = f(h) in C(r, map(t, f))` will be faster
:lhGenOCaml
fun enumFromTo(a, b) = if a < b then C(a, enumFromTo(a + 1, b)) else N
fun map(ls, f) = if ls is
  C(h, t) then let r = f(h) in C(r, map(t, f))
  N then N
fun testMapmapPolyVarLet(ls) = map(map(ls, x => x + 1), x => x * x)
testMapmapPolyVarLet(primId(enumFromTo(1, 100000)))
//│ |#fun| |enumFromTo|(|a|,| |b|)| |#=| |#if| |a| |<| |b| |#then| |C|(|a|,| |enumFromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#fun| |map|(|ls|,| |f|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |#let| |r| |#=| |f|(|h|)| |#in| |C|(|r|,| |map|(|t|,| |f|)|)|↵|N| |#then| |N|←|↵|#fun| |testMapmapPolyVarLet|(|ls|)| |#=| |map|(|map|(|ls|,| |x| |=>| |x| |+| |1|)|,| |x| |=>| |x| |*| |x|)|↵|testMapmapPolyVarLet|(|primId|(|enumFromTo|(|1|,| |100000|)|)|)|
//│ Parsed: {fun enumFromTo = a, b, => if (< (a,) (b,)) then C (a, enumFromTo (+ (a,) (1,), b,),) else N; fun map = ls, f, => if ls is ‹(C (h, t,)) then let r = f (h,) in C (r, map (t, f,),); (N) then N›; fun testMapmapPolyVarLet = ls, => map (map (ls, x, => + (x,) (1,),), x, => * (x,) (x,),); testMapmapPolyVarLet (primId (enumFromTo (1, 100000,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMapmapPolyVarLet^57(primId⁰(enumFromTo^59(1, 100000)))
//│ def enumFromTo(a⁰, b⁰) = if (a⁰ < b⁰) then [C a⁰ enumFromTo^7((a⁰ + 1), b⁰)] else [N]
//│ def map(ls⁰, f⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => 
//│ 		let r⁰ = f⁰(h⁰)
//│ 		in [C r⁰ map^26(t⁰, f⁰)]
//│ 	| N  => [N]}
//│ def testMapmapPolyVarLet(ls¹) = map^37(map^38(ls¹, (fun x⁰ -> (x⁰ + 1))), (fun x¹ -> (x¹ * x¹)))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo a_0 b_0 =
//│ 		  (if (a_0 < b_0) then
//│ 		    (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`N))
//│ 		and map ls_0 f_0 =
//│ 		  (match ls_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (let rec r_0 = (f_0 h_0) in
//│ 		        (`C(r_0, ((map t_0) f_0))))
//│ 		    | `N -> 
//│ 		      (`N))
//│ 		and testMapmapPolyVarLet ls_1 =
//│ 		  ((map ((map ls_1) (fun x_0 -> 
//│ 		    (x_0 + 1)))) (fun x_1 -> 
//│ 		    (x_1 * x_1)));;
//│ 		(testMapmapPolyVarLet ((enumFromTo 1) 100000))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [enumFromTo^59]
//│ 	[enumFromTo^59 · enumFromTo^7] ---> [enumFromTo^59] (only one)
//│ [testMapmapPolyVarLet^57]
//│ 	[testMapmapPolyVarLet^57 · map^37]
//│ 		[testMapmapPolyVarLet^57 · map^37 · map^26] ---> [testMapmapPolyVarLet^57 · map^37] (only one)
//│ 	[testMapmapPolyVarLet^57 · map^38]
//│ 		[testMapmapPolyVarLet^57 · map^38 · map^26] ---> [testMapmapPolyVarLet^57 · map^38] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testMapmapPolyVarLet₀(primId⁰(enumFromTo₀(1, 100000)))
//│ def enumFromTo₀(a¹, b¹) = 
//│ 	if (a¹ < b¹) then [C a¹ enumFromTo₀((a¹ + 1), b¹)] else [N]
//│ def testMapmapPolyVarLet₀(ls³) = 
//│ 	map₀(map₁(ls³, (fun x² -> (x² + 1))), (fun x³ -> (x³ * x³)))
//│ 	where
//│ 	def map₀(ls², f¹) = 
//│ 		case ls² of {
//│ 			C h¹ t¹ => 
//│ 				let r¹ = f¹(h¹)
//│ 				in [C r¹ map₀(t¹, f¹)]
//│ 			| N  => [N]}
//│ 	def map₁(ls⁴, f²) = 
//│ 		case ls⁴ of {
//│ 			C h² t² => 
//│ 				let r² = f²(h²)
//│ 				in [C r² map₁(t², f²)]
//│ 			| N  => [N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C r² map₁(t², f²)]: 132 --->
//│ 	case ls² of {C h¹ t¹ => let r¹ = f¹(h¹)
//│ in [C r¹ map₀(t¹, f¹)] | N  => [N]}: 79
//│ [N]: 134 --->
//│ 	case ls² of {C h¹ t¹ => let r¹ = f¹(h¹)
//│ in [C r¹ map₀(t¹, f¹)] | N  => [N]}: 79
//│ ------------------
//│ case ls² of {C h¹ t¹ => let r¹ = f¹(h¹)
//│ in [C r¹ map₀(t¹, f¹)] | N  => [N]}: 79 --->
//│ 	[C r² map₁(t², f²)]: 132
//│ 	[N]: 134
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C r² map₁(t², f²)]: 132 --->
//│ 	case ls² of {C h¹ t¹ => let r¹ = f¹(h¹)
//│ in [C r¹ map₀(t¹, f¹)] | N  => [N]}: 79
//│ [N]: 134 --->
//│ 	case ls² of {C h¹ t¹ => let r¹ = f¹(h¹)
//│ in [C r¹ map₀(t¹, f¹)] | N  => [N]}: 79
//│ ------------------
//│ case ls² of {C h¹ t¹ => let r¹ = f¹(h¹)
//│ in [C r¹ map₀(t¹, f¹)] | N  => [N]}: 79 --->
//│ 	[C r² map₁(t², f²)]: 132
//│ 	[N]: 134
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMapmapPolyVarLet₀(primId⁰(enumFromTo₀(1, 100000)))
//│ def enumFromTo₀(a², b²) = 
//│ 	if (a² < b²) then [C a² enumFromTo₀((a² + 1), b²)] else [N]
//│ def testMapmapPolyVarLet₀(ls⁶) = 
//│ 	map₀(map₁(ls⁶, (fun x⁴ -> (x⁴ + 1))), (fun x⁵ -> (x⁵ * x⁵)))
//│ 	where
//│ 	def map₀(ls⁵, f³) = 
//│ 		ls⁵(f³)
//│ 	def map₁(ls⁷, f⁴) = 
//│ 		case ls⁷ of {
//│ 			C h² t² => 
//│ 				let r³ = f⁴(h²)
//│ 				in let h³ = r³
//│ 				in let t³ = map₁(t², f⁴)
//│ 				in (fun f⁵ -> 
//│ 					let r⁴ = f⁵(h³)
//│ 					in [C r⁴ map₀(t³, f⁵)])
//│ 			| N  => (fun f⁶ -> [N])}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ (*
//│ ocamlfind ocamlopt -rectypes -thread -O3 ./MapmapPolyVarLet.ml -o "./MapmapPolyVarLet.out" -linkpkg -package "core_unix.command_unix" -linkpkg -package "core_bench" && ./MapmapPolyVarLet.out
//│ *)
//│ (* #use "topfind";;
//│ #require "core_unix.command_unix";;
//│ #require "core_bench";; *)
//│ open Core_bench;;
//│ 
//│ (* original *)
//│ let rec enumFromTo a_0 b_0 =
//│   (if (a_0 < b_0) then
//│     (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│   else
//│     (`N))
//│ and map ls_0 f_0 =
//│   (match ls_0 with
//│     | `C(h_0, t_0) -> 
//│       (let rec r_0 = (f_0 h_0) in
//│         (`C(r_0, ((map t_0) f_0))))
//│     | `N -> 
//│       (`N))
//│ and testMapmapPolyVarLet ls_1 =
//│   ((map ((map ls_1) (fun x_0 -> 
//│     (x_0 + 1)))) (fun x_1 -> 
//│     (x_1 * x_1)));;
//│ 
//│ (* optimized *)
//│ let rec enumFromTo_d0 a_0 b_0 =
//│   (if (a_0 < b_0) then
//│     (`C(a_0, ((enumFromTo_d0 (a_0 + 1)) b_0)))
//│   else
//│     (`N))
//│ and map_d0 ls_0 f_0 =
//│   (ls_0 f_0)
//│ and map_d1 ls_2 f_1 =
//│   (match ls_2 with
//│     | `C(h_0, t_0) -> 
//│       (let rec r_0 = (f_1 h_0) in
//│         (let rec h_1 = r_0 in
//│           (let rec t_1 = ((map_d1 t_0) f_1) in
//│             (fun f_2 -> 
//│               (let rec r_1 = (f_2 h_1) in
//│                 (`C(r_1, ((map_d0 t_1) f_2))))))))
//│     | `N -> 
//│       (fun f_3 -> 
//│         (`N)))
//│ and testMapmapPolyVarLet_d0 ls_1 =
//│   ((map_d0 ((map_d1 ls_1) (fun x_0 -> 
//│     (x_0 + 1)))) (fun x_1 -> 
//│     (x_1 * x_1)));;
//│ 
//│ Command_unix.run (Bench.make_command [
//│   Bench.Test.create ~name:"original_MapmapPolyVarLet_1" (fun () -> ignore ((testMapmapPolyVarLet ((enumFromTo 1) 100000))));
//│   Bench.Test.create ~name:"lumberhack_MapmapPolyVarLet_1" (fun () -> ignore ((testMapmapPolyVarLet_d0 ((enumFromTo_d0 1) 100000))));
//│   Bench.Test.create ~name:"original_MapmapPolyVarLet_2" (fun () -> ignore ((testMapmapPolyVarLet ((enumFromTo 1) 100000))));
//│   Bench.Test.create ~name:"lumberhack_MapmapPolyVarLet_2" (fun () -> ignore ((testMapmapPolyVarLet_d0 ((enumFromTo_d0 1) 100000))));
//│ ])
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
