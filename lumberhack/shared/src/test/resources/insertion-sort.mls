:NewParser
:ParseOnly

:lhEval
fun isort(xs) = if xs is
  N then N
  C(x, xs) then insert(x, isort(xs))
fun insert(y, xs) = if xs is
  N then C(y, N)
  C(z, zs) then if z > y then C(y, C(z, zs)) else C(z, insert(y, zs))
fun testInsertionSortPolyVar(xs) = isort(xs)
testInsertionSortPolyVar(primId(C(1, C(4, C(2, N)))))
//│ |#fun| |isort|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |N|↵|C|(|x|,| |xs|)| |#then| |insert|(|x|,| |isort|(|xs|)|)|←|↵|#fun| |insert|(|y|,| |xs|)| |#=| |#if| |xs| |is|→|N| |#then| |C|(|y|,| |N|)|↵|C|(|z|,| |zs|)| |#then| |#if| |z| |>| |y| |#then| |C|(|y|,| |C|(|z|,| |zs|)|)| |#else| |C|(|z|,| |insert|(|y|,| |zs|)|)|←|↵|#fun| |testInsertionSortPolyVar|(|xs|)| |#=| |isort|(|xs|)|↵|testInsertionSortPolyVar|(|primId|(|C|(|1|,| |C|(|4|,| |C|(|2|,| |N|)|)|)|)|)|
//│ Parsed: {fun isort = xs, => if xs is ‹(N) then N; (C (x, xs,)) then insert (x, isort (xs,),)›; fun insert = y, xs, => if xs is ‹(N) then C (y, N,); (C (z, zs,)) then if (> (z,) (y,)) then C (y, C (z, zs,),) else C (z, insert (y, zs,),)›; fun testInsertionSortPolyVar = xs, => isort (xs,); testInsertionSortPolyVar (primId (C (1, C (4, C (2, N,),),),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testInsertionSortPolyVar^41(primId⁰([C 1 [C 4 [C 2 [N]]]]))
//│ def insert(y⁰, xs²) = case xs² of {
//│ 	N  => [C y⁰ [N]]
//│ 	| C z⁰ zs⁰ => if (z⁰ > y⁰) then [C y⁰ [C z⁰ zs⁰]] else [C z⁰ insert^27(y⁰, zs⁰)]}
//│ def isort(xs⁰) = case xs⁰ of {
//│ 	N  => [N]
//│ 	| C x⁰ xs¹ => insert^3(x⁰, isort^6(xs¹))}
//│ def testInsertionSortPolyVar(xs³) = isort^37(xs³)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [C 1 [C 2 [C 4 [N]]]]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 2 --->
//│ 	NoCons
//│ 	case xs² of {N  => [C y⁰ [N]] | C z⁰ zs⁰ => if (z⁰ > y⁰) then [C y⁰ [C z⁰ zs⁰]] else [C z⁰ insert(y⁰, zs⁰)]}: 34
//│ [N]: 14 --->
//│ 	NoCons
//│ 	case xs² of {N  => [C y⁰ [N]] | C z⁰ zs⁰ => if (z⁰ > y⁰) then [C y⁰ [C z⁰ zs⁰]] else [C z⁰ insert(y⁰, zs⁰)]}: 34
//│ [C y⁰ [N]]: 15 --->
//│ 	NoCons
//│ 	case xs² of {N  => [C y⁰ [N]] | C z⁰ zs⁰ => if (z⁰ > y⁰) then [C y⁰ [C z⁰ zs⁰]] else [C z⁰ insert(y⁰, zs⁰)]}: 34
//│ [C z⁰ zs⁰]: 24 --->
//│ 	NoCons
//│ 	case xs² of {N  => [C y⁰ [N]] | C z⁰ zs⁰ => if (z⁰ > y⁰) then [C y⁰ [C z⁰ zs⁰]] else [C z⁰ insert(y⁰, zs⁰)]}: 34
//│ [C y⁰ [C z⁰ zs⁰]]: 25 --->
//│ 	NoCons
//│ 	case xs² of {N  => [C y⁰ [N]] | C z⁰ zs⁰ => if (z⁰ > y⁰) then [C y⁰ [C z⁰ zs⁰]] else [C z⁰ insert(y⁰, zs⁰)]}: 34
//│ [C z⁰ insert(y⁰, zs⁰)]: 32 --->
//│ 	NoCons
//│ 	case xs² of {N  => [C y⁰ [N]] | C z⁰ zs⁰ => if (z⁰ > y⁰) then [C y⁰ [C z⁰ zs⁰]] else [C z⁰ insert(y⁰, zs⁰)]}: 34
//│ ------------------
//│ case xs² of {N  => [C y⁰ [N]] | C z⁰ zs⁰ => if (z⁰ > y⁰) then [C y⁰ [C z⁰ zs⁰]] else [C z⁰ insert(y⁰, zs⁰)]}: 34 --->
//│ 	[N]: 2
//│ 	[N]: 14
//│ 	[C y⁰ [N]]: 15
//│ 	[C z⁰ zs⁰]: 24
//│ 	[C y⁰ [C z⁰ zs⁰]]: 25
//│ 	[C z⁰ insert(y⁰, zs⁰)]: 32
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testInsertionSortPolyVar(primId⁰([C 1 [C 4 [C 2 [N]]]]))
//│ def insert(y¹, xs⁵) = case xs⁵ of {
//│ 	N  => [C y¹ [N]]
//│ 	| C z⁰ zs⁰ => if (z⁰ > y¹) then [C y¹ [C z⁰ zs⁰]] else [C z⁰ insert(y¹, zs⁰)]}
//│ def isort(xs⁴) = case xs⁴ of {
//│ 	N  => [N]
//│ 	| C x⁰ xs¹ => insert(x⁰, isort(xs¹))}
//│ def testInsertionSortPolyVar(xs⁶) = isort(xs⁶)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C 1 [C 2 [C 4 [N]]]]
//│ <<<<<<< evaluate <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ 
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ 
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ testInsertionSortPolyVar(primId⁰([C 1 [C 4 [C 2 [N]]]]))
//│ def insert(y⁰, xs²) = case xs² of {
//│ 	N  => [C y⁰ [N]]
//│ 	| C z⁰ zs⁰ => if (z⁰ > y⁰) then [C y⁰ [C z⁰ zs⁰]] else [C z⁰ insert(y⁰, zs⁰)]}
//│ def isort(xs⁰) = case xs⁰ of {
//│ 	N  => [N]
//│ 	| C x⁰ xs¹ => insert(x⁰, isort(xs¹))}
//│ def testInsertionSortPolyVar(xs³) = isort(xs³)
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ testInsertionSortPolyVar(primId⁰([C 1 [C 4 [C 2 [N]]]]))
//│ def insert(y⁰, xs²) = case xs² of {
//│ 	N  => [C y⁰ [N]]
//│ 	| C z⁰ zs⁰ => if (z⁰ > y⁰) then [C y⁰ [C z⁰ zs⁰]] else [C z⁰ insert(y⁰, zs⁰)]}
//│ def isort(xs⁰) = case xs⁰ of {
//│ 	N  => [N]
//│ 	| C x⁰ xs¹ => insert(x⁰, isort(xs¹))}
//│ def testInsertionSortPolyVar(xs³) = isort(xs³)
//│ <<<<<<< after floating out <<<<<<<
