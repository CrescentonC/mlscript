:NewParser
:ParseOnly

:lhGenHaskell
:lhInHaskell
testMapmap len = map (\x -> x + 1) $ map (\x -> x + x) [1..len]
testMapmap $ primId 5000000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMapmap_₀^705(primId⁰(5000000))
//│ def enumFromTo_₀(a⁵, b²) = if (a⁵ <= b²) then [LH_C a⁵ enumFromTo_₀^677((a⁵ + 1), b²)] else [LH_N]
//│ def map_₀(f¹³, ls²⁰) = case ls²⁰ of {
//│ 	LH_C h²¹ t²³ => [LH_C f¹³(h²¹) map_₀^695(f¹³, t²³)]
//│ 	| LH_N  => [LH_N]}
//│ def map_₁(f¹², ls¹⁹) = case ls¹⁹ of {
//│ 	LH_C h²⁰ t²² => [LH_C f¹²(h²⁰) map_₁^661(f¹², t²²)]
//│ 	| LH_N  => [LH_N]}
//│ def testMapmap_₀(_lh_testMapmap_arg1¹) = map_₀^633((fun x⁴ -> (x⁴ + 1)), map_₁^641((fun x⁵ -> (x⁵ + x⁵)), enumFromTo_₀^649(1, _lh_testMapmap_arg1¹)))
//│ 		---------- unoptimized haskell gen ----------
//│ 		(testMapmap_₀ 5000000)
//│ 		enumFromTo_₀ a⁵ b² = (if (a⁵ <= b²) then (a⁵:((enumFromTo_₀ (a⁵ + 1)) b²)) else [])
//│ 		map_₀ f¹³ ls²⁰ = (case ls²⁰ of {(h²¹ : t²³) -> ((f¹³ h²¹):((map_₀ f¹³) t²³)); [] -> []})
//│ 		map_₁ f¹² ls¹⁹ = (case ls¹⁹ of {(h²⁰ : t²²) -> ((f¹² h²⁰):((map_₁ f¹²) t²²)); [] -> []})
//│ 		testMapmap_₀ _lh_testMapmap_arg1¹ = ((map_₀ (\x⁴ -> (x⁴ + 1))) ((map_₁ (\x⁵ -> (x⁵ + x⁵))) ((enumFromTo_₀ 1) _lh_testMapmap_arg1¹)))
//│ 		---------- unoptimized haskell gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testMapmap_₀^705]
//│ 	[testMapmap_₀^705 · enumFromTo_₀^649] (hopeless to continue)
//│ 		[testMapmap_₀^705 · enumFromTo_₀^649 · enumFromTo_₀^677] ---> [testMapmap_₀^705 · enumFromTo_₀^649] (using original def)
//│ 	[testMapmap_₀^705 · map_₀^633]
//│ 		[testMapmap_₀^705 · map_₀^633 · map_₀^695] ---> [testMapmap_₀^705 · map_₀^633] (only one)
//│ 	[testMapmap_₀^705 · map_₁^641] (hopeless to continue)
//│ 		[testMapmap_₀^705 · map_₁^641 · map_₁^661] ---> [testMapmap_₀^705 · map_₁^641] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testMapmap_₀_₀(primId⁰(5000000))
//│ def testMapmap_₀_₀(_lh_testMapmap_arg1¹) = 
//│ 	map_₀_₀((fun x² -> (x² + 1)), map_₁_₀((fun x³ -> (x³ + x³)), enumFromTo_₀_₀(1, _lh_testMapmap_arg1¹)))
//│ 	where
//│ 	def enumFromTo_₀_₀(a¹, b¹) = 
//│ 		if (a¹ <= b¹) then [LH_C a¹ enumFromTo_₀_₀((a¹ + 1), b¹)] else [LH_N]
//│ 	def map_₀_₀(f³, ls³) = 
//│ 		case ls³ of {
//│ 			LH_C h³ t³ => [LH_C f³(h³) map_₀_₀(f³, t³)]
//│ 			| LH_N  => [LH_N]}
//│ 	def map_₁_₀(f², ls²) = 
//│ 		case ls² of {
//│ 			LH_C h² t² => [LH_C f²(h²) map_₁_₀(f², t²)]
//│ 			| LH_N  => [LH_N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f²(h²) map_₁_₀(f², t²)]: 87 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C f³(h³) map_₀_₀(f³, t³)] | LH_N  => [LH_N]}: 103
//│ [LH_N]: 88 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C f³(h³) map_₀_₀(f³, t³)] | LH_N  => [LH_N]}: 103
//│ [LH_C a¹ enumFromTo_₀_₀((a¹ + 1), b¹)]: 121 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map_₁_₀(f², t²)] | LH_N  => [LH_N]}: 89
//│ [LH_N]: 122 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map_₁_₀(f², t²)] | LH_N  => [LH_N]}: 89
//│ ------------------
//│ case ls² of {LH_C h² t² => [LH_C f²(h²) map_₁_₀(f², t²)] | LH_N  => [LH_N]}: 89 --->
//│ 	[LH_C a¹ enumFromTo_₀_₀((a¹ + 1), b¹)]: 121
//│ 	[LH_N]: 122
//│ case ls³ of {LH_C h³ t³ => [LH_C f³(h³) map_₀_₀(f³, t³)] | LH_N  => [LH_N]}: 103 --->
//│ 	[LH_C f²(h²) map_₁_₀(f², t²)]: 87
//│ 	[LH_N]: 88
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C f²(h²) map_₁_₀(f², t²)]: 87 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C f³(h³) map_₀_₀(f³, t³)] | LH_N  => [LH_N]}: 103
//│ [LH_N]: 88 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C f³(h³) map_₀_₀(f³, t³)] | LH_N  => [LH_N]}: 103
//│ [LH_C a¹ enumFromTo_₀_₀((a¹ + 1), b¹)]: 121 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map_₁_₀(f², t²)] | LH_N  => [LH_N]}: 89
//│ [LH_N]: 122 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map_₁_₀(f², t²)] | LH_N  => [LH_N]}: 89
//│ ------------------
//│ case ls² of {LH_C h² t² => [LH_C f²(h²) map_₁_₀(f², t²)] | LH_N  => [LH_N]}: 89 --->
//│ 	[LH_C a¹ enumFromTo_₀_₀((a¹ + 1), b¹)]: 121
//│ 	[LH_N]: 122
//│ case ls³ of {LH_C h³ t³ => [LH_C f³(h³) map_₀_₀(f³, t³)] | LH_N  => [LH_N]}: 103 --->
//│ 	[LH_C f²(h²) map_₁_₀(f², t²)]: 87
//│ 	[LH_N]: 88
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMapmap_₀_₀(primId⁰(5000000))
//│ def testMapmap_₀_₀(_lh_testMapmap_arg1²) = 
//│ 	map_₀_₀((fun x⁴ -> (x⁴ + 1)), map_₁_₀((fun x⁵ -> (x⁵ + x⁵)), enumFromTo_₀_₀(1, _lh_testMapmap_arg1²)))
//│ 	where
//│ 	def enumFromTo_₀_₀(a², b²) = 
//│ 		if (a² <= b²) then 
//│ 			let t⁴ = enumFromTo_₀_₀((a² + 1), b²)
//│ 			in let h⁴ = a²
//│ 			in (fun f⁶ -> 
//│ 				let t⁵ = map_₁_₀(f⁶, t⁴)
//│ 				in let h⁵ = f⁶(h⁴)
//│ 				in (fun f⁷ -> [LH_C f⁷(h⁵) map_₀_₀(f⁷, t⁵)])) else (fun f⁸ -> (fun f⁹ -> [LH_N]))
//│ 	def map_₀_₀(f⁵, ls⁵) = 
//│ 		ls⁵(f⁵)
//│ 	def map_₁_₀(f⁴, ls⁴) = 
//│ 		ls⁴(f⁴)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated Haskell >>>>>>>>>>
//│ import Criterion.Main
//│ 
//│ 
//│ --- original ---
//│ enumFromTo_₀ a⁵ b² = (if (a⁵ <= b²) then (a⁵:((enumFromTo_₀ (a⁵ + 1)) b²)) else [])
//│ map_₀ f¹³ ls²⁰ = (case ls²⁰ of {(h²¹ : t²³) -> ((f¹³ h²¹):((map_₀ f¹³) t²³)); [] -> []})
//│ map_₁ f¹² ls¹⁹ = (case ls¹⁹ of {(h²⁰ : t²²) -> ((f¹² h²⁰):((map_₁ f¹²) t²²)); [] -> []})
//│ testMapmap_₀ _lh_testMapmap_arg1¹ = ((map_₀ (\x⁴ -> (x⁴ + 1))) ((map_₁ (\x⁵ -> (x⁵ + x⁵))) ((enumFromTo_₀ 1) _lh_testMapmap_arg1¹)))
//│ 
//│ --- lumberhack ---
//│ enumFromTo_₀_₀ a⁰ b⁰ = (if (a⁰ <= b⁰) then (let t⁰ = ((enumFromTo_₀_₀ (a⁰ + 1)) b⁰) in (let h⁰ = a⁰ in (\f² -> (let t¹ = ((map_₁_₀ f²) t⁰) in (let h¹ = (f² h⁰) in (\f³ -> ((f³ h¹):((map_₀_₀ f³) t¹)))))))) else (\f⁴ f⁵ -> []))
//│ map_₀_₀ f¹ ls¹ = (ls¹ f¹)
//│ map_₁_₀ f⁰ ls⁰ = (ls⁰ f⁰)
//│ testMapmap_₀_₀ _lh_testMapmap_arg1⁰ = ((map_₀_₀ (\x⁰ -> (x⁰ + 1))) ((map_₁_₀ (\x¹ -> (x¹ + x¹))) ((enumFromTo_₀_₀ 1) _lh_testMapmap_arg1⁰)))
//│ 
//│ main :: IO ()
//│ main = defaultMain [ bgroup "Mapmap" [
//│     bench "lumberhack_Mapmap" $ nf testMapmap_₀_₀ 5000000
//│   , bench "original_Mapmap" $ nf testMapmap_₀ 5000000 ] ]
//│ <<<<<<<<<< Generated Haskell <<<<<<<<<<


// fusion clash due to: the thing returned by `gen` will be consumed
// by both `gen` itself (`b <- gen (n-1) nq`) and `length`
// NOTE: being slower (than the desugared version, faster than the most original version) may be because
// originally the type of `gen` is `Int -> Int -> [[Int]]`
// after the fusion the type of `gen` is `Int -> Int -> [Int -> Int -> Bool]`
:lhGenHaskell
:lhInHaskell
safe x d []    = True
safe x d (q:l) = (x /= q) && (x /= (q+d)) && (x /= (q-d)) && (safe x (d+1) l)
gen 0 nq = [[]]
gen n nq = [ (q:b) | b <- gen (n-1) nq, q <- (primId [1..nq]), safe q 1 b ]
nsoln nq = length (gen nq nq)
testQueen n = nsoln n
testQueen $ primId 12
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testQueen_₀^878(primId⁰(12))
//│ def enumFromTo_₀(a⁵, b²) = if (a⁵ <= b²) then [LH_C a⁵ enumFromTo_₀^757((a⁵ + 1), b²)] else [LH_N]
//│ def gen_₀(_lh_gen_arg1¹, _lh_gen_arg2¹) = case _lh_gen_arg1¹ of {
//│ 	0  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 			LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 				let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 					LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀^827(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 					| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 				in _lh_listcomp_fun³(primId⁰(enumFromTo_₀^852(1, _lh_gen_arg2¹)))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²(gen_₀^864((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ def length_₀(ls¹⁹) = case ls¹⁹ of {
//│ 	LH_C h²⁰ t²² => (1 + length_₀^744(t²²))
//│ 	| LH_N  => 0}
//│ def nsoln_₀(_lh_nsoln_arg1¹) = length_₀^728(gen_₀^729(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ def safe_₀(_lh_safe_arg1¹, _lh_safe_arg2¹, _lh_safe_arg3¹) = case _lh_safe_arg3¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_₀^804(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))
//│ 	| _  => error⁰}
//│ def testQueen_₀(_lh_testQueen_arg1¹) = nsoln_₀^736(_lh_testQueen_arg1¹)
//│ 		---------- unoptimized haskell gen ----------
//│ 		(testQueen_₀ 12)
//│ 		enumFromTo_₀ a⁵ b² = (if (a⁵ <= b²) then (a⁵:((enumFromTo_₀ (a⁵ + 1)) b²)) else [])
//│ 		gen_₀ _lh_gen_arg1¹ _lh_gen_arg2¹ = (case _lh_gen_arg1¹ of {0 -> ([]:[]); _ -> (let _lh_listcomp_fun² = (\_lh_listcomp_fun_para² -> (case _lh_listcomp_fun_para² of {(_lh_listcomp_fun_ls_h² : _lh_listcomp_fun_ls_t²) -> (let _lh_listcomp_fun³ = (\_lh_listcomp_fun_para³ -> (case _lh_listcomp_fun_para³ of {(_lh_listcomp_fun_ls_h³ : _lh_listcomp_fun_ls_t³) -> (if (((safe_₀ _lh_listcomp_fun_ls_h³) 1) _lh_listcomp_fun_ls_h²) then ((_lh_listcomp_fun_ls_h³:_lh_listcomp_fun_ls_h²):(_lh_listcomp_fun³ _lh_listcomp_fun_ls_t³)) else (_lh_listcomp_fun³ _lh_listcomp_fun_ls_t³)); [] -> (_lh_listcomp_fun² _lh_listcomp_fun_ls_t²)})) in (_lh_listcomp_fun³ ((enumFromTo_₀ 1) _lh_gen_arg2¹))); [] -> []})) in (_lh_listcomp_fun² ((gen_₀ (_lh_gen_arg1¹ - 1)) _lh_gen_arg2¹)))})
//│ 		length_₀ ls¹⁹ = (case ls¹⁹ of {(h²⁰ : t²²) -> (1 + (length_₀ t²²)); [] -> 0})
//│ 		nsoln_₀ _lh_nsoln_arg1¹ = (length_₀ ((gen_₀ _lh_nsoln_arg1¹) _lh_nsoln_arg1¹))
//│ 		safe_₀ _lh_safe_arg1¹ _lh_safe_arg2¹ _lh_safe_arg3¹ = (case _lh_safe_arg3¹ of {[] -> True; (_lh_safe_LH_C_0¹ : _lh_safe_LH_C_1¹) -> ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && (((safe_₀ _lh_safe_arg1¹) (_lh_safe_arg2¹ + 1)) _lh_safe_LH_C_1¹)); _ -> error})
//│ 		testQueen_₀ _lh_testQueen_arg1¹ = (nsoln_₀ _lh_testQueen_arg1¹)
//│ 		---------- unoptimized haskell gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testQueen_₀^878] (hopeless to continue)
//│ 	[testQueen_₀^878 · nsoln_₀^736] (using original def)
//│ 		[testQueen_₀^878 · nsoln_₀^736 · gen_₀^729] (using original def)
//│ 			[testQueen_₀^878 · nsoln_₀^736 · gen_₀^729 · enumFromTo_₀^852] (using original def)
//│ 				[testQueen_₀^878 · nsoln_₀^736 · gen_₀^729 · enumFromTo_₀^852 · enumFromTo_₀^757] ---> [testQueen_₀^878 · nsoln_₀^736 · gen_₀^729 · enumFromTo_₀^852] (using original def)
//│ 			[testQueen_₀^878 · nsoln_₀^736 · gen_₀^729 · gen_₀^864] ---> [testQueen_₀^878 · nsoln_₀^736 · gen_₀^729] (using original def)
//│ 			[testQueen_₀^878 · nsoln_₀^736 · gen_₀^729 · safe_₀^827] (using original def)
//│ 				[testQueen_₀^878 · nsoln_₀^736 · gen_₀^729 · safe_₀^827 · safe_₀^804] ---> [testQueen_₀^878 · nsoln_₀^736 · gen_₀^729 · safe_₀^827] (using original def)
//│ 		[testQueen_₀^878 · nsoln_₀^736 · length_₀^728] (using original def)
//│ 			[testQueen_₀^878 · nsoln_₀^736 · length_₀^728 · length_₀^744] ---> [testQueen_₀^878 · nsoln_₀^736 · length_₀^728] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testQueen_₀_₀(primId⁰(12))
//│ def testQueen_₀_₀(_lh_testQueen_arg1¹) = 
//│ 	nsoln_₀_₀(_lh_testQueen_arg1¹)
//│ 	where
//│ 	def nsoln_₀_₀(_lh_nsoln_arg1¹) = 
//│ 		length_₀_₀(gen_₀_₀(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ 		where
//│ 		def gen_₀_₀(_lh_gen_arg1¹, _lh_gen_arg2¹) = 
//│ 			case _lh_gen_arg1¹ of {
//│ 				0  => [LH_C [LH_N] [LH_N]]
//│ 				| _  => 
//│ 					let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 						LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 							let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 								LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 								| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 							in _lh_listcomp_fun³(primId⁰(enumFromTo_₀_₀(1, _lh_gen_arg2¹)))
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun²(gen_₀_₀((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ 			where
//│ 			def enumFromTo_₀_₀(a¹, b¹) = 
//│ 				if (a¹ <= b¹) then [LH_C a¹ enumFromTo_₀_₀((a¹ + 1), b¹)] else [LH_N]
//│ 			def safe_₀_₀(_lh_safe_arg1¹, _lh_safe_arg2¹, _lh_safe_arg3¹) = 
//│ 				case _lh_safe_arg3¹ of {
//│ 					LH_N  => [True]
//│ 					| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_₀_₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))
//│ 					| _  => error⁰}
//│ 		def length_₀_₀(ls¹) = 
//│ 			case ls¹ of {
//│ 				LH_C h¹ t¹ => (1 + length_₀_₀(t¹))
//│ 				| LH_N  => 0}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 189 --->
//│ 	DeadCodeCons
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_₀_₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰}: 291
//│ [LH_N]: 190 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo_₀_₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 228
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_₀_₀(t¹)) | LH_N  => 0}: 304
//│ [LH_C [LH_N] [LH_N]]: 191 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo_₀_₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 228
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_₀_₀(t¹)) | LH_N  => 0}: 304
//│ [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 203 --->
//│ 	DeadCodeCons
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_₀_₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰}: 291
//│ [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 207 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo_₀_₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 228
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_₀_₀(t¹)) | LH_N  => 0}: 304
//│ [LH_N]: 227 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo_₀_₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 228
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_₀_₀(t¹)) | LH_N  => 0}: 304
//│ ------------------
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo_₀_₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 228 --->
//│ 	[LH_N]: 190
//│ 	[LH_C [LH_N] [LH_N]]: 191
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 207
//│ 	[LH_N]: 227
//│ case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_₀_₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰}: 291 --->
//│ 	[LH_N]: 189
//│ 	[LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 203
//│ case ls¹ of {LH_C h¹ t¹ => (1 + length_₀_₀(t¹)) | LH_N  => 0}: 304 --->
//│ 	[LH_N]: 190
//│ 	[LH_C [LH_N] [LH_N]]: 191
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 207
//│ 	[LH_N]: 227
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testQueen_₀_₀(primId⁰(12))
//│ def testQueen_₀_₀(_lh_testQueen_arg1²) = 
//│ 	nsoln_₀_₀(_lh_testQueen_arg1²)
//│ 	where
//│ 	def nsoln_₀_₀(_lh_nsoln_arg1²) = 
//│ 		length_₀_₀(gen_₀_₀(_lh_nsoln_arg1², _lh_nsoln_arg1²))
//│ 		where
//│ 		def gen_₀_₀(_lh_gen_arg1², _lh_gen_arg2²) = 
//│ 			case _lh_gen_arg1² of {
//│ 				0  => [LH_C [LH_N] [LH_N]]
//│ 				| _  => 
//│ 					let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 						LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 							let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 								LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t³)
//│ 								| LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t²)})
//│ 							in _lh_listcomp_fun⁵(primId⁰(enumFromTo_₀_₀(1, _lh_gen_arg2²)))
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun⁴(gen_₀_₀((_lh_gen_arg1² - 1), _lh_gen_arg2²))}
//│ 			where
//│ 			def enumFromTo_₀_₀(a², b²) = 
//│ 				if (a² <= b²) then [LH_C a² enumFromTo_₀_₀((a² + 1), b²)] else [LH_N]
//│ 			def safe_₀_₀(_lh_safe_arg1², _lh_safe_arg2², _lh_safe_arg3²) = 
//│ 				case _lh_safe_arg3² of {
//│ 					LH_N  => [True]
//│ 					| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1² /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1² /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2²))) && (_lh_safe_arg1² /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2²))) && safe_₀_₀(_lh_safe_arg1², (_lh_safe_arg2² + 1), _lh_safe_LH_C_1¹))
//│ 					| _  => error⁰}
//│ 		def length_₀_₀(ls²) = 
//│ 			case ls² of {
//│ 				LH_C h¹ t¹ => (1 + length_₀_₀(t¹))
//│ 				| LH_N  => 0}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated Haskell >>>>>>>>>>
//│ import Criterion.Main
//│ 
//│ 
//│ --- original ---
//│ enumFromTo_₀ a⁵ b² = (if (a⁵ <= b²) then (a⁵:((enumFromTo_₀ (a⁵ + 1)) b²)) else [])
//│ gen_₀ _lh_gen_arg1¹ _lh_gen_arg2¹ = (case _lh_gen_arg1¹ of {0 -> ([]:[]); _ -> (let _lh_listcomp_fun² = (\_lh_listcomp_fun_para² -> (case _lh_listcomp_fun_para² of {(_lh_listcomp_fun_ls_h² : _lh_listcomp_fun_ls_t²) -> (let _lh_listcomp_fun³ = (\_lh_listcomp_fun_para³ -> (case _lh_listcomp_fun_para³ of {(_lh_listcomp_fun_ls_h³ : _lh_listcomp_fun_ls_t³) -> (if (((safe_₀ _lh_listcomp_fun_ls_h³) 1) _lh_listcomp_fun_ls_h²) then ((_lh_listcomp_fun_ls_h³:_lh_listcomp_fun_ls_h²):(_lh_listcomp_fun³ _lh_listcomp_fun_ls_t³)) else (_lh_listcomp_fun³ _lh_listcomp_fun_ls_t³)); [] -> (_lh_listcomp_fun² _lh_listcomp_fun_ls_t²)})) in (_lh_listcomp_fun³ ((enumFromTo_₀ 1) _lh_gen_arg2¹))); [] -> []})) in (_lh_listcomp_fun² ((gen_₀ (_lh_gen_arg1¹ - 1)) _lh_gen_arg2¹)))})
//│ length_₀ ls¹⁹ = (case ls¹⁹ of {(h²⁰ : t²²) -> (1 + (length_₀ t²²)); [] -> 0})
//│ nsoln_₀ _lh_nsoln_arg1¹ = (length_₀ ((gen_₀ _lh_nsoln_arg1¹) _lh_nsoln_arg1¹))
//│ safe_₀ _lh_safe_arg1¹ _lh_safe_arg2¹ _lh_safe_arg3¹ = (case _lh_safe_arg3¹ of {[] -> True; (_lh_safe_LH_C_0¹ : _lh_safe_LH_C_1¹) -> ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && (((safe_₀ _lh_safe_arg1¹) (_lh_safe_arg2¹ + 1)) _lh_safe_LH_C_1¹)); _ -> error})
//│ testQueen_₀ _lh_testQueen_arg1¹ = (nsoln_₀ _lh_testQueen_arg1¹)
//│ 
//│ --- lumberhack ---
//│ enumFromTo_₀_₀ a⁰ b⁰ = (if (a⁰ <= b⁰) then (a⁰:((enumFromTo_₀_₀ (a⁰ + 1)) b⁰)) else [])
//│ gen_₀_₀ _lh_gen_arg1⁰ _lh_gen_arg2⁰ = (case _lh_gen_arg1⁰ of {0 -> ([]:[]); _ -> (let _lh_listcomp_fun⁰ = (\_lh_listcomp_fun_para⁰ -> (case _lh_listcomp_fun_para⁰ of {(_lh_listcomp_fun_ls_h⁰ : _lh_listcomp_fun_ls_t⁰) -> (let _lh_listcomp_fun¹ = (\_lh_listcomp_fun_para¹ -> (case _lh_listcomp_fun_para¹ of {(_lh_listcomp_fun_ls_h¹ : _lh_listcomp_fun_ls_t¹) -> (if (((safe_₀_₀ _lh_listcomp_fun_ls_h¹) 1) _lh_listcomp_fun_ls_h⁰) then ((_lh_listcomp_fun_ls_h¹:_lh_listcomp_fun_ls_h⁰):(_lh_listcomp_fun¹ _lh_listcomp_fun_ls_t¹)) else (_lh_listcomp_fun¹ _lh_listcomp_fun_ls_t¹)); [] -> (_lh_listcomp_fun⁰ _lh_listcomp_fun_ls_t⁰)})) in (_lh_listcomp_fun¹ ((enumFromTo_₀_₀ 1) _lh_gen_arg2⁰))); [] -> []})) in (_lh_listcomp_fun⁰ ((gen_₀_₀ (_lh_gen_arg1⁰ - 1)) _lh_gen_arg2⁰)))})
//│ length_₀_₀ ls⁰ = (case ls⁰ of {(h⁰ : t⁰) -> (1 + (length_₀_₀ t⁰)); [] -> 0})
//│ nsoln_₀_₀ _lh_nsoln_arg1⁰ = (length_₀_₀ ((gen_₀_₀ _lh_nsoln_arg1⁰) _lh_nsoln_arg1⁰))
//│ safe_₀_₀ _lh_safe_arg1⁰ _lh_safe_arg2⁰ _lh_safe_arg3⁰ = (case _lh_safe_arg3⁰ of {[] -> True; (_lh_safe_LH_C_0⁰ : _lh_safe_LH_C_1⁰) -> ((((_lh_safe_arg1⁰ /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2⁰))) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2⁰))) && (((safe_₀_₀ _lh_safe_arg1⁰) (_lh_safe_arg2⁰ + 1)) _lh_safe_LH_C_1⁰)); _ -> error})
//│ testQueen_₀_₀ _lh_testQueen_arg1⁰ = (nsoln_₀_₀ _lh_testQueen_arg1⁰)
//│ 
//│ main :: IO ()
//│ main = defaultMain [ bgroup "Queen" [
//│     bench "lumberhack_Queen" $ nf testQueen_₀_₀ 12
//│   , bench "original_Queen" $ nf testQueen_₀ 12 ] ]
//│ <<<<<<<<<< Generated Haskell <<<<<<<<<<


// WRONG: haskell also cannot handle `[1..nq]` in list comprehension, type error
:lhInHaskell
safe x d []    = True
safe x d (q:l) = (x /= q) && (x /= (q+d)) && (x /= (q-d)) && (safe x (d+1) l)
gen 0 nq = [[]]
gen n nq = [ (q:b) | b <- gen (n-1) nq, q <- [1..nq], safe q 1 b ]
nsoln nq = length (gen nq nq)
test n = nsoln n
test $ primId 4
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ test_₀^874(primId⁰(4))
//│ def enumFromTo_₀(a⁵, b²) = if (a⁵ <= b²) then [LH_C a⁵ enumFromTo_₀^736((a⁵ + 1), b²)] else [LH_N]
//│ def gen_₀(_lh_gen_arg1¹, _lh_gen_arg2¹) = case _lh_gen_arg1¹ of {
//│ 	0  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 			LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 				let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 					LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀^817(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 					| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 				in _lh_listcomp_fun³(enumFromTo_₀^841(1, _lh_gen_arg2¹))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²(gen_₀^852((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ def length_₀(ls¹⁹) = case ls¹⁹ of {
//│ 	LH_C h²⁰ t²² => (1 + length_₀^754(t²²))
//│ 	| LH_N  => 0}
//│ def nsoln_₀(_lh_nsoln_arg1¹) = length_₀^866(gen_₀^867(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ def safe_₀(_lh_safe_arg1¹, _lh_safe_arg2¹, _lh_safe_arg3¹) = case _lh_safe_arg3¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_₀^794(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))
//│ 	| _  => error⁰}
//│ def test_₀(_lh_test_arg1¹) = nsoln_₀^726(_lh_test_arg1¹)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [test_₀^874] (hopeless to continue)
//│ 	[test_₀^874 · nsoln_₀^726] (using original def)
//│ 		[test_₀^874 · nsoln_₀^726 · gen_₀^867] (using original def)
//│ 			[test_₀^874 · nsoln_₀^726 · gen_₀^867 · enumFromTo_₀^841] (using original def)
//│ 				[test_₀^874 · nsoln_₀^726 · gen_₀^867 · enumFromTo_₀^841 · enumFromTo_₀^736] ---> [test_₀^874 · nsoln_₀^726 · gen_₀^867 · enumFromTo_₀^841] (using original def)
//│ 			[test_₀^874 · nsoln_₀^726 · gen_₀^867 · gen_₀^852] ---> [test_₀^874 · nsoln_₀^726 · gen_₀^867] (using original def)
//│ 			[test_₀^874 · nsoln_₀^726 · gen_₀^867 · safe_₀^817] (using original def)
//│ 				[test_₀^874 · nsoln_₀^726 · gen_₀^867 · safe_₀^817 · safe_₀^794] ---> [test_₀^874 · nsoln_₀^726 · gen_₀^867 · safe_₀^817] (using original def)
//│ 		[test_₀^874 · nsoln_₀^726 · length_₀^866] (using original def)
//│ 			[test_₀^874 · nsoln_₀^726 · length_₀^866 · length_₀^754] ---> [test_₀^874 · nsoln_₀^726 · length_₀^866] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ test_₀_₀(primId⁰(4))
//│ def test_₀_₀(_lh_test_arg1¹) = 
//│ 	nsoln_₀_₀(_lh_test_arg1¹)
//│ 	where
//│ 	def nsoln_₀_₀(_lh_nsoln_arg1¹) = 
//│ 		length_₀_₀(gen_₀_₀(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ 		where
//│ 		def gen_₀_₀(_lh_gen_arg1¹, _lh_gen_arg2¹) = 
//│ 			case _lh_gen_arg1¹ of {
//│ 				0  => [LH_C [LH_N] [LH_N]]
//│ 				| _  => 
//│ 					let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 						LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 							let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 								LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 								| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 							in _lh_listcomp_fun³(enumFromTo_₀_₀(1, _lh_gen_arg2¹))
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun²(gen_₀_₀((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ 			where
//│ 			def enumFromTo_₀_₀(a¹, b¹) = 
//│ 				if (a¹ <= b¹) then [LH_C a¹ enumFromTo_₀_₀((a¹ + 1), b¹)] else [LH_N]
//│ 			def safe_₀_₀(_lh_safe_arg1¹, _lh_safe_arg2¹, _lh_safe_arg3¹) = 
//│ 				case _lh_safe_arg3¹ of {
//│ 					LH_N  => [True]
//│ 					| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_₀_₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))
//│ 					| _  => error⁰}
//│ 		def length_₀_₀(ls¹) = 
//│ 			case ls¹ of {
//│ 				LH_C h¹ t¹ => (1 + length_₀_₀(t¹))
//│ 				| LH_N  => 0}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C a¹ enumFromTo_₀_₀((a¹ + 1), b¹)]: 169 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 224
//│ [LH_N]: 170 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 224
//│ [LH_N]: 198 --->
//│ 	DeadCodeCons
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_₀_₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰}: 298
//│ [LH_N]: 199 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_₀_₀(t¹)) | LH_N  => 0}: 195
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_₀_₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 235
//│ [LH_C [LH_N] [LH_N]]: 200 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_₀_₀(t¹)) | LH_N  => 0}: 195
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_₀_₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 235
//│ [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 212 --->
//│ 	DeadCodeCons
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_₀_₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰}: 298
//│ [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 216 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_₀_₀(t¹)) | LH_N  => 0}: 195
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_₀_₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 235
//│ [LH_N]: 234 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_₀_₀(t¹)) | LH_N  => 0}: 195
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_₀_₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 235
//│ ------------------
//│ case ls¹ of {LH_C h¹ t¹ => (1 + length_₀_₀(t¹)) | LH_N  => 0}: 195 --->
//│ 	[LH_N]: 199
//│ 	[LH_C [LH_N] [LH_N]]: 200
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 216
//│ 	[LH_N]: 234
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 224 --->
//│ 	[LH_C a¹ enumFromTo_₀_₀((a¹ + 1), b¹)]: 169
//│ 	[LH_N]: 170
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_₀_₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 235 --->
//│ 	[LH_N]: 199
//│ 	[LH_C [LH_N] [LH_N]]: 200
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 216
//│ 	[LH_N]: 234
//│ case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_₀_₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰}: 298 --->
//│ 	[LH_N]: 198
//│ 	[LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 212
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C a¹ enumFromTo_₀_₀((a¹ + 1), b¹)]: 169 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 224
//│ [LH_N]: 170 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 224
//│ ------------------
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_₀_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 224 --->
//│ 	[LH_C a¹ enumFromTo_₀_₀((a¹ + 1), b¹)]: 169
//│ 	[LH_N]: 170
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ test_₀_₀(primId⁰(4))
//│ def test_₀_₀(_lh_test_arg1²) = 
//│ 	nsoln_₀_₀(_lh_test_arg1²)
//│ 	where
//│ 	def nsoln_₀_₀(_lh_nsoln_arg1²) = 
//│ 		length_₀_₀(gen_₀_₀(_lh_nsoln_arg1², _lh_nsoln_arg1²))
//│ 		where
//│ 		def gen_₀_₀(_lh_gen_arg1², _lh_gen_arg2²) = 
//│ 			case _lh_gen_arg1² of {
//│ 				0  => [LH_C [LH_N] [LH_N]]
//│ 				| _  => 
//│ 					let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 						LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 							let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> _lh_listcomp_fun_para⁵(_lh_listcomp_fun_ls_h², _lh_listcomp_fun⁵, _lh_listcomp_fun_ls_t², _lh_listcomp_fun⁴))
//│ 							in _lh_listcomp_fun⁵(enumFromTo_₀_₀(1, _lh_gen_arg2²))
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun⁴(gen_₀_₀((_lh_gen_arg1² - 1), _lh_gen_arg2²))}
//│ 			where
//│ 			def enumFromTo_₀_₀(a², b²) = 
//│ 				if (a² <= b²) then 
//│ 					let _lh_listcomp_fun_ls_t⁴ = enumFromTo_₀_₀((a² + 1), b²)
//│ 					in let _lh_listcomp_fun_ls_h⁴ = a²
//│ 					in (fun _lh_listcomp_fun_ls_h⁵ -> (fun _lh_listcomp_fun⁶ -> (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁷ -> if safe_₀_₀(_lh_listcomp_fun_ls_h⁴, 1, _lh_listcomp_fun_ls_h⁵) then [LH_C [LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_h⁵] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁴))))) else (fun _lh_listcomp_fun_ls_h⁶ -> (fun _lh_listcomp_fun⁸ -> (fun _lh_listcomp_fun_ls_t⁶ -> (fun _lh_listcomp_fun⁹ -> _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁶)))))
//│ 			def safe_₀_₀(_lh_safe_arg1², _lh_safe_arg2², _lh_safe_arg3²) = 
//│ 				case _lh_safe_arg3² of {
//│ 					LH_N  => [True]
//│ 					| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1² /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1² /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2²))) && (_lh_safe_arg1² /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2²))) && safe_₀_₀(_lh_safe_arg1², (_lh_safe_arg2² + 1), _lh_safe_LH_C_1¹))
//│ 					| _  => error⁰}
//│ 		def length_₀_₀(ls²) = 
//│ 			case ls² of {
//│ 				LH_C h¹ t¹ => (1 + length_₀_₀(t¹))
//│ 				| LH_N  => 0}
//│ <<<<<<< after fusion <<<<<<<


// WRONG: not well-typed in haskell
:lhInHaskell
// [ (a, b) | b <- [1, 4, 10], a <- [2, 3, 5], a < b ]

// TODO: support where, but cannot be local mutual recursive let bindings
// :haskell
// nsoln nq = length (gen nq)
//  where
//     safe :: Int -> Int -> [Int] -> Bool
//     safe x d []    = True
//     safe x d (q:l) = x /= q && x /= q+d && x /= q-d && safe x (d+1) l
//     gen :: Int -> [[Int]]
//     gen 0 = [[]]
//     gen n = [ (q:b) | b <- gen (n-1), q <- [1..nq], safe q 1 b]

:lhInHaskell
// gen 0 nq = [[]]
// gen n nq = [ (q:b) | b <- gen (n-1) nq, q <- (primId [1..nq])]
// nsoln nq = length (gen nq nq)
// nsoln 3

:lhInHaskell
// f 0 = error("no")
// f n = n + error("yes")
// f 9

:lhInHaskell
// f [] ys = []
// f xs [] = []
// f (x:xs) (y:ys) = (x,y):(f xs ys)
// f [1,2] [2,3]

// WRONG: type error after fusion in haskell: f x = x f
:lhInHaskell
// [a | (Just a) <- [Nothing, Just 3]]

// WRONG: not well-typed in haskell after fusion
:lhInHaskell
:lhGenHaskell
testSimpleRecursiveTypeExample x = [a | a <- [x]]
testSimpleRecursiveTypeExample $ primId 3
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testSimpleRecursiveTypeExample_₀^641(primId⁰(3))
//│ def testSimpleRecursiveTypeExample_₀(_lh_testSimpleRecursiveTypeExample_arg1¹) = 
//│ 	let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹([LH_C _lh_testSimpleRecursiveTypeExample_arg1¹ [LH_N]])
//│ 		---------- unoptimized haskell gen ----------
//│ 		(testSimpleRecursiveTypeExample_₀ 3)
//│ 		testSimpleRecursiveTypeExample_₀ _lh_testSimpleRecursiveTypeExample_arg1¹ = (let _lh_listcomp_fun¹ = (\_lh_listcomp_fun_para¹ -> (case _lh_listcomp_fun_para¹ of {(_lh_listcomp_fun_ls_h¹ : _lh_listcomp_fun_ls_t¹) -> (_lh_listcomp_fun_ls_h¹:(_lh_listcomp_fun¹ _lh_listcomp_fun_ls_t¹)); [] -> []})) in (_lh_listcomp_fun¹ (_lh_testSimpleRecursiveTypeExample_arg1¹:[])))
//│ 		---------- unoptimized haskell gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testSimpleRecursiveTypeExample_₀^641] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testSimpleRecursiveTypeExample_₀_₀(primId⁰(3))
//│ def testSimpleRecursiveTypeExample_₀_₀(_lh_testSimpleRecursiveTypeExample_arg1¹) = 
//│ 	let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹([LH_C _lh_testSimpleRecursiveTypeExample_arg1¹ [LH_N]])
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 33 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 29
//│ [LH_C _lh_testSimpleRecursiveTypeExample_arg1¹ [LH_N]]: 34 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 29
//│ ------------------
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 29 --->
//│ 	[LH_N]: 33
//│ 	[LH_C _lh_testSimpleRecursiveTypeExample_arg1¹ [LH_N]]: 34
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_N]: 33 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 29
//│ [LH_C _lh_testSimpleRecursiveTypeExample_arg1¹ [LH_N]]: 34 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 29
//│ ------------------
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 29 --->
//│ 	[LH_N]: 33
//│ 	[LH_C _lh_testSimpleRecursiveTypeExample_arg1¹ [LH_N]]: 34
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testSimpleRecursiveTypeExample_₀_₀(primId⁰(3))
//│ def testSimpleRecursiveTypeExample_₀_₀(_lh_testSimpleRecursiveTypeExample_arg1²) = 
//│ 	let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun²))
//│ 	in _lh_listcomp_fun²(
//│ 		let _lh_listcomp_fun_ls_t² = (fun _lh_listcomp_fun⁴ -> [LH_N])
//│ 		in let _lh_listcomp_fun_ls_h² = _lh_testSimpleRecursiveTypeExample_arg1²
//│ 		in (fun _lh_listcomp_fun³ -> [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun³(_lh_listcomp_fun_ls_t²)]))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated Haskell >>>>>>>>>>
//│ import Criterion.Main
//│ 
//│ 
//│ --- original ---
//│ testSimpleRecursiveTypeExample_₀ _lh_testSimpleRecursiveTypeExample_arg1¹ = (let _lh_listcomp_fun¹ = (\_lh_listcomp_fun_para¹ -> (case _lh_listcomp_fun_para¹ of {(_lh_listcomp_fun_ls_h¹ : _lh_listcomp_fun_ls_t¹) -> (_lh_listcomp_fun_ls_h¹:(_lh_listcomp_fun¹ _lh_listcomp_fun_ls_t¹)); [] -> []})) in (_lh_listcomp_fun¹ (_lh_testSimpleRecursiveTypeExample_arg1¹:[])))
//│ 
//│ --- lumberhack ---
//│ testSimpleRecursiveTypeExample_₀_₀ _lh_testSimpleRecursiveTypeExample_arg1⁰ = (let _lh_listcomp_fun⁰ = (\_lh_listcomp_fun_para⁰ -> (_lh_listcomp_fun_para⁰ _lh_listcomp_fun⁰)) in (_lh_listcomp_fun⁰ (let _lh_listcomp_fun_ls_t⁰ = (\_lh_listcomp_fun¹ -> []) in (let _lh_listcomp_fun_ls_h⁰ = _lh_testSimpleRecursiveTypeExample_arg1⁰ in (\_lh_listcomp_fun² -> (_lh_listcomp_fun_ls_h⁰:(_lh_listcomp_fun² _lh_listcomp_fun_ls_t⁰)))))))
//│ 
//│ main :: IO ()
//│ main = defaultMain [ bgroup "SimpleRecursiveTypeExample" [
//│     bench "lumberhack_SimpleRecursiveTypeExample" $ nf testSimpleRecursiveTypeExample_₀_₀ 3
//│   , bench "original_SimpleRecursiveTypeExample" $ nf testSimpleRecursiveTypeExample_₀ 3 ] ]
//│ <<<<<<<<<< Generated Haskell <<<<<<<<<<

// WRONG: not well-typed in haskell
:lhInHaskell
// [a | a <- [1..2]]
