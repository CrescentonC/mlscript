:NewParser
:ParseOnly

_LUMBERHACK_EVAL
if "sdf" is
  "sdf" then L
  A then B
//│ |_LUMBERHACK_EVAL|↵|#if| |"sdf"| |is|→|"sdf"| |#then| |L|↵|A| |#then| |B|←|
//│ Parsed: {_LUMBERHACK_EVAL; if "sdf" is ‹("sdf") then L; (A) then B›}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ case "sdf" of {
//│ 	"sdf"  => [L]
//│ 	| A  => [B]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [L]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ case "sdf" of {
//│ 	"sdf"  => [L]
//│ 	| A  => [B]}
//│ 
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ case "sdf" of {
//│ 	"sdf"  => [L]
//│ 	| A  => [B]}
//│ 
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [L]
//│ <<<<<<< evaluate <<<<<<<

:haskell
test 3 ls = map f ls
test a ls = ls
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ "haskell" (
//│ 	"function" (
//│ 		"variable" ()
//│ 		"patterns" (
//│ 			"pat_literal" (
//│ 				"integer" ())
//│ 			"pat_name" (
//│ 				"variable" ()))
//│ 		"=" ()
//│ 		"exp_apply" (
//│ 			"exp_name" (
//│ 				"variable" ())
//│ 			"exp_name" (
//│ 				"variable" ())
//│ 			"exp_name" (
//│ 				"variable" ())))
//│ 	"function" (
//│ 		"variable" ()
//│ 		"patterns" (
//│ 			"pat_name" (
//│ 				"variable" ())
//│ 			"pat_name" (
//│ 				"variable" ()))
//│ 		"=" ()
//│ 		"exp_name" (
//│ 			"variable" ())))
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.lumberhack.FromHaskell$.apply(CodeGen.scala:50)
//│ 	at: mlscript.lumberhack.DiffTestLumberhack.postProcess(DiffTestLumberhack.scala:51)
//│ 	at: mlscript.DiffTests.rec$1(DiffTests.scala:367)
//│ 	at: mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:774)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ 	at: org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
//│ 	at: org.scalatest.Transformer.apply(Transformer.scala:22)
//│ 	at: org.scalatest.Transformer.apply(Transformer.scala:20)

:haskell
map (\x -> x + 1) $ map (\x -> x + x) (primId [1..100])
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ "haskell" (
//│ 	"top_splice" (
//│ 		"exp_infix" (
//│ 			"exp_apply" (
//│ 				"exp_name" (
//│ 					"variable" ())
//│ 				"exp_parens" (
//│ 					"(" ()
//│ 					"exp_lambda" (
//│ 						"\" ()
//│ 						"pat_name" (
//│ 							"variable" ())
//│ 						"->" ()
//│ 						"exp_infix" (
//│ 							"exp_name" (
//│ 								"variable" ())
//│ 							"operator" ()
//│ 							"exp_literal" (
//│ 								"integer" ())))
//│ 					")" ()))
//│ 			"operator" ()
//│ 			"exp_apply" (
//│ 				"exp_name" (
//│ 					"variable" ())
//│ 				"exp_parens" (
//│ 					"(" ()
//│ 					"exp_lambda" (
//│ 						"\" ()
//│ 						"pat_name" (
//│ 							"variable" ())
//│ 						"->" ()
//│ 						"exp_infix" (
//│ 							"exp_name" (
//│ 								"variable" ())
//│ 							"operator" ()
//│ 							"exp_name" (
//│ 								"variable" ())))
//│ 					")" ())
//│ 				"exp_parens" (
//│ 					"(" ()
//│ 					"exp_apply" (
//│ 						"exp_name" (
//│ 							"variable" ())
//│ 						"exp_arithmetic_sequence" (
//│ 							"[" ()
//│ 							"exp_literal" (
//│ 								"integer" ())
//│ 							".." ()
//│ 							"exp_literal" (
//│ 								"integer" ())
//│ 							"]" ()))
//│ 					")" ())))))
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.lumberhack.FromHaskell$.apply(CodeGen.scala:50)
//│ 	at: mlscript.lumberhack.DiffTestLumberhack.postProcess(DiffTestLumberhack.scala:51)
//│ 	at: mlscript.DiffTests.rec$1(DiffTests.scala:367)
//│ 	at: mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:774)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ 	at: org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
//│ 	at: org.scalatest.Transformer.apply(Transformer.scala:22)
//│ 	at: org.scalatest.Transformer.apply(Transformer.scala:20)




// :haskell
// main = (print . sum . concat . queens) 10
//   where
//     queens :: Int -> [[Int]]
//     queens 0 = [[]]
//     queens m = [ p ++ [n] | p <- queens (m-1) , n <- [1..10], safe p n]
//    
//     safe : : [Int] -> Int -> Bool
//     safe p n = and [ (j /= n) && (i+j /= m + n) && (i - j /= m - n) | (i, j) <- zip [1 ..] p]
//       where
//         m = length p + 1


