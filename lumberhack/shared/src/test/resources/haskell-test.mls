:NewParser
:ParseOnly


:lhhaskell
f (a, b) = a + b
f (3, 4)
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ f₀^182([LH_P2 3 4])
//│ def f₀(_lh_f_arg1¹) = case _lh_f_arg1¹ of {
//│ 	LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => (_lh_f_LH_P2_0¹ + _lh_f_LH_P2_1¹)
//│ 	| _  => error⁰("match error")}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [f₀^182] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ f₀₀([LH_P2 3 4])
//│ def f₀₀(_lh_f_arg1¹) = 
//│ 	case _lh_f_arg1¹ of {
//│ 		LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => (_lh_f_LH_P2_0¹ + _lh_f_LH_P2_1¹)
//│ 		| _  => error⁰("match error")}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_P2 3 4]: 31 --->
//│ 	case _lh_f_arg1¹ of {LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => (_lh_f_LH_P2_0¹ + _lh_f_LH_P2_1¹) | _  => error⁰("match error")}: 26
//│ ------------------
//│ case _lh_f_arg1¹ of {LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => (_lh_f_LH_P2_0¹ + _lh_f_LH_P2_1¹) | _  => error⁰("match error")}: 26 --->
//│ 	[LH_P2 3 4]: 31
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_P2 3 4]: 31 --->
//│ 	case _lh_f_arg1¹ of {LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => (_lh_f_LH_P2_0¹ + _lh_f_LH_P2_1¹) | _  => error⁰("match error")}: 26
//│ ------------------
//│ case _lh_f_arg1¹ of {LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => (_lh_f_LH_P2_0¹ + _lh_f_LH_P2_1¹) | _  => error⁰("match error")}: 26 --->
//│ 	[LH_P2 3 4]: 31
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ f₀₀(
//│ 	let _lh_f_LH_P2_0² = 3
//│ 	in let _lh_f_LH_P2_1² = 4
//│ 	in (_lh_f_LH_P2_0² + _lh_f_LH_P2_1²))
//│ def f₀₀(_lh_f_arg1²) = 
//│ 	_lh_f_arg1²
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated Haskell Code >>>>>>>>>>
//│ module Main where
//│ import Criterion.Main
//│ (f₀₀ (let _lh_f_LH_P2_0⁰ = 3 in (let _lh_f_LH_P2_1⁰ = 4 in (_lh_f_LH_P2_0⁰ + _lh_f_LH_P2_1⁰))))
//│ f₀₀ _lh_f_arg1⁰ = _lh_f_arg1⁰
//│ <<<<<<<<<< Generated Haskell Code <<<<<<<<<<

// WRONG: not well-typed in haskell
:lhhaskell
[ (a, b) | b <- [1, 4, 10], a <- [2, 3, 5], a < b ]
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 	LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 		let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 			LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 			| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 		in _lh_listcomp_fun³([LH_C 2 [LH_C 3 [LH_C 5 [LH_N]]]])
//│ 	| LH_N  => [LH_N]})
//│ in _lh_listcomp_fun²([LH_C 1 [LH_C 4 [LH_C 10 [LH_N]]]])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ 
//│ 	let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 		LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 			let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 				LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 				| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 			in _lh_listcomp_fun³([LH_C 2 [LH_C 3 [LH_C 5 [LH_N]]]])
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun²([LH_C 1 [LH_C 4 [LH_C 10 [LH_N]]]])
//│ 
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 74 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 68
//│ [LH_C 5 [LH_N]]: 75 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 68
//│ [LH_C 3 [LH_C 5 [LH_N]]]: 76 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 68
//│ [LH_C 2 [LH_C 3 [LH_C 5 [LH_N]]]]: 77 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 68
//│ [LH_N]: 87 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³([LH_C 2 [LH_C 3 [LH_C 5 [LH_N]]]]) | LH_N  => [LH_N]}: 81
//│ [LH_C 10 [LH_N]]: 88 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³([LH_C 2 [LH_C 3 [LH_C 5 [LH_N]]]]) | LH_N  => [LH_N]}: 81
//│ [LH_C 4 [LH_C 10 [LH_N]]]: 89 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³([LH_C 2 [LH_C 3 [LH_C 5 [LH_N]]]]) | LH_N  => [LH_N]}: 81
//│ [LH_C 1 [LH_C 4 [LH_C 10 [LH_N]]]]: 90 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³([LH_C 2 [LH_C 3 [LH_C 5 [LH_N]]]]) | LH_N  => [LH_N]}: 81
//│ ------------------
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 68 --->
//│ 	[LH_N]: 74
//│ 	[LH_C 5 [LH_N]]: 75
//│ 	[LH_C 3 [LH_C 5 [LH_N]]]: 76
//│ 	[LH_C 2 [LH_C 3 [LH_C 5 [LH_N]]]]: 77
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³([LH_C 2 [LH_C 3 [LH_C 5 [LH_N]]]]) | LH_N  => [LH_N]}: 81 --->
//│ 	[LH_N]: 87
//│ 	[LH_C 10 [LH_N]]: 88
//│ 	[LH_C 4 [LH_C 10 [LH_N]]]: 89
//│ 	[LH_C 1 [LH_C 4 [LH_C 10 [LH_N]]]]: 90
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_N]: 74 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 68
//│ [LH_C 5 [LH_N]]: 75 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 68
//│ [LH_C 3 [LH_C 5 [LH_N]]]: 76 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 68
//│ [LH_C 2 [LH_C 3 [LH_C 5 [LH_N]]]]: 77 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 68
//│ [LH_N]: 87 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³([LH_C 2 [LH_C 3 [LH_C 5 [LH_N]]]]) | LH_N  => [LH_N]}: 81
//│ [LH_C 10 [LH_N]]: 88 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³([LH_C 2 [LH_C 3 [LH_C 5 [LH_N]]]]) | LH_N  => [LH_N]}: 81
//│ [LH_C 4 [LH_C 10 [LH_N]]]: 89 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³([LH_C 2 [LH_C 3 [LH_C 5 [LH_N]]]]) | LH_N  => [LH_N]}: 81
//│ [LH_C 1 [LH_C 4 [LH_C 10 [LH_N]]]]: 90 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³([LH_C 2 [LH_C 3 [LH_C 5 [LH_N]]]]) | LH_N  => [LH_N]}: 81
//│ ------------------
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 68 --->
//│ 	[LH_N]: 74
//│ 	[LH_C 5 [LH_N]]: 75
//│ 	[LH_C 3 [LH_C 5 [LH_N]]]: 76
//│ 	[LH_C 2 [LH_C 3 [LH_C 5 [LH_N]]]]: 77
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³([LH_C 2 [LH_C 3 [LH_C 5 [LH_N]]]]) | LH_N  => [LH_N]}: 81 --->
//│ 	[LH_N]: 87
//│ 	[LH_C 10 [LH_N]]: 88
//│ 	[LH_C 4 [LH_C 10 [LH_N]]]: 89
//│ 	[LH_C 1 [LH_C 4 [LH_C 10 [LH_N]]]]: 90
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ 
//│ 	let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> _lh_listcomp_fun_para⁴(_lh_listcomp_fun⁴))
//│ 	in _lh_listcomp_fun⁴(
//│ 		let _lh_listcomp_fun_ls_h⁴ = 1
//│ 		in let _lh_listcomp_fun_ls_t⁴ = 	
//│ 			let _lh_listcomp_fun_ls_h¹² = 4
//│ 			in let _lh_listcomp_fun_ls_t¹² = 	
//│ 				let _lh_listcomp_fun_ls_h²⁰ = 10
//│ 				in let _lh_listcomp_fun_ls_t²⁰ = (fun _lh_listcomp_fun³⁵ -> [LH_N])
//│ 				in (fun _lh_listcomp_fun²⁵ -> 
//│ 					let _lh_listcomp_fun²⁶ = (fun _lh_listcomp_fun_para⁷ -> _lh_listcomp_fun_para⁷(_lh_listcomp_fun_ls_h²⁰, _lh_listcomp_fun²⁶, _lh_listcomp_fun²⁵, _lh_listcomp_fun_ls_t²⁰))
//│ 					in _lh_listcomp_fun²⁶(
//│ 						let _lh_listcomp_fun_ls_h²¹ = 2
//│ 						in let _lh_listcomp_fun_ls_t²¹ = 	
//│ 							let _lh_listcomp_fun_ls_h²³ = 3
//│ 							in let _lh_listcomp_fun_ls_t²³ = 	
//│ 								let _lh_listcomp_fun_ls_h²⁵ = 5
//│ 								in let _lh_listcomp_fun_ls_t²⁵ = (fun _lh_listcomp_fun_ls_h²⁷ -> (fun _lh_listcomp_fun³³ -> (fun _lh_listcomp_fun³⁴ -> (fun _lh_listcomp_fun_ls_t²⁷ -> _lh_listcomp_fun³⁴(_lh_listcomp_fun_ls_t²⁷)))))
//│ 								in (fun _lh_listcomp_fun_ls_h²⁶ -> (fun _lh_listcomp_fun³¹ -> (fun _lh_listcomp_fun³² -> (fun _lh_listcomp_fun_ls_t²⁶ -> if (_lh_listcomp_fun_ls_h²⁵ < _lh_listcomp_fun_ls_h²⁶) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h²⁵ _lh_listcomp_fun_ls_h²⁶] _lh_listcomp_fun³¹(_lh_listcomp_fun_ls_t²⁵)] else _lh_listcomp_fun³¹(_lh_listcomp_fun_ls_t²⁵)))))
//│ 							in (fun _lh_listcomp_fun_ls_h²⁴ -> (fun _lh_listcomp_fun²⁹ -> (fun _lh_listcomp_fun³⁰ -> (fun _lh_listcomp_fun_ls_t²⁴ -> if (_lh_listcomp_fun_ls_h²³ < _lh_listcomp_fun_ls_h²⁴) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h²³ _lh_listcomp_fun_ls_h²⁴] _lh_listcomp_fun²⁹(_lh_listcomp_fun_ls_t²³)] else _lh_listcomp_fun²⁹(_lh_listcomp_fun_ls_t²³)))))
//│ 						in (fun _lh_listcomp_fun_ls_h²² -> (fun _lh_listcomp_fun²⁷ -> (fun _lh_listcomp_fun²⁸ -> (fun _lh_listcomp_fun_ls_t²² -> if (_lh_listcomp_fun_ls_h²¹ < _lh_listcomp_fun_ls_h²²) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h²¹ _lh_listcomp_fun_ls_h²²] _lh_listcomp_fun²⁷(_lh_listcomp_fun_ls_t²¹)] else _lh_listcomp_fun²⁷(_lh_listcomp_fun_ls_t²¹)))))))
//│ 			in (fun _lh_listcomp_fun¹⁵ -> 
//│ 				let _lh_listcomp_fun¹⁶ = (fun _lh_listcomp_fun_para⁶ -> _lh_listcomp_fun_para⁶(_lh_listcomp_fun_ls_h¹², _lh_listcomp_fun¹⁶, _lh_listcomp_fun¹⁵, _lh_listcomp_fun_ls_t¹²))
//│ 				in _lh_listcomp_fun¹⁶(
//│ 					let _lh_listcomp_fun_ls_h¹³ = 2
//│ 					in let _lh_listcomp_fun_ls_t¹³ = 	
//│ 						let _lh_listcomp_fun_ls_h¹⁵ = 3
//│ 						in let _lh_listcomp_fun_ls_t¹⁵ = 	
//│ 							let _lh_listcomp_fun_ls_h¹⁷ = 5
//│ 							in let _lh_listcomp_fun_ls_t¹⁷ = (fun _lh_listcomp_fun_ls_h¹⁹ -> (fun _lh_listcomp_fun²³ -> (fun _lh_listcomp_fun²⁴ -> (fun _lh_listcomp_fun_ls_t¹⁹ -> _lh_listcomp_fun²⁴(_lh_listcomp_fun_ls_t¹⁹)))))
//│ 							in (fun _lh_listcomp_fun_ls_h¹⁸ -> (fun _lh_listcomp_fun²¹ -> (fun _lh_listcomp_fun²² -> (fun _lh_listcomp_fun_ls_t¹⁸ -> if (_lh_listcomp_fun_ls_h¹⁷ < _lh_listcomp_fun_ls_h¹⁸) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹⁷ _lh_listcomp_fun_ls_h¹⁸] _lh_listcomp_fun²¹(_lh_listcomp_fun_ls_t¹⁷)] else _lh_listcomp_fun²¹(_lh_listcomp_fun_ls_t¹⁷)))))
//│ 						in (fun _lh_listcomp_fun_ls_h¹⁶ -> (fun _lh_listcomp_fun¹⁹ -> (fun _lh_listcomp_fun²⁰ -> (fun _lh_listcomp_fun_ls_t¹⁶ -> if (_lh_listcomp_fun_ls_h¹⁵ < _lh_listcomp_fun_ls_h¹⁶) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹⁵ _lh_listcomp_fun_ls_h¹⁶] _lh_listcomp_fun¹⁹(_lh_listcomp_fun_ls_t¹⁵)] else _lh_listcomp_fun¹⁹(_lh_listcomp_fun_ls_t¹⁵)))))
//│ 					in (fun _lh_listcomp_fun_ls_h¹⁴ -> (fun _lh_listcomp_fun¹⁷ -> (fun _lh_listcomp_fun¹⁸ -> (fun _lh_listcomp_fun_ls_t¹⁴ -> if (_lh_listcomp_fun_ls_h¹³ < _lh_listcomp_fun_ls_h¹⁴) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹³ _lh_listcomp_fun_ls_h¹⁴] _lh_listcomp_fun¹⁷(_lh_listcomp_fun_ls_t¹³)] else _lh_listcomp_fun¹⁷(_lh_listcomp_fun_ls_t¹³)))))))
//│ 		in (fun _lh_listcomp_fun⁵ -> 
//│ 			let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁵ -> _lh_listcomp_fun_para⁵(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun⁶, _lh_listcomp_fun⁵, _lh_listcomp_fun_ls_t⁴))
//│ 			in _lh_listcomp_fun⁶(
//│ 				let _lh_listcomp_fun_ls_h⁵ = 2
//│ 				in let _lh_listcomp_fun_ls_t⁵ = 	
//│ 					let _lh_listcomp_fun_ls_h⁷ = 3
//│ 					in let _lh_listcomp_fun_ls_t⁷ = 	
//│ 						let _lh_listcomp_fun_ls_h⁹ = 5
//│ 						in let _lh_listcomp_fun_ls_t⁹ = (fun _lh_listcomp_fun_ls_h¹¹ -> (fun _lh_listcomp_fun¹³ -> (fun _lh_listcomp_fun¹⁴ -> (fun _lh_listcomp_fun_ls_t¹¹ -> _lh_listcomp_fun¹⁴(_lh_listcomp_fun_ls_t¹¹)))))
//│ 						in (fun _lh_listcomp_fun_ls_h¹⁰ -> (fun _lh_listcomp_fun¹¹ -> (fun _lh_listcomp_fun¹² -> (fun _lh_listcomp_fun_ls_t¹⁰ -> if (_lh_listcomp_fun_ls_h⁹ < _lh_listcomp_fun_ls_h¹⁰) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_h¹⁰] _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t⁹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t⁹)))))
//│ 					in (fun _lh_listcomp_fun_ls_h⁸ -> (fun _lh_listcomp_fun⁹ -> (fun _lh_listcomp_fun¹⁰ -> (fun _lh_listcomp_fun_ls_t⁸ -> if (_lh_listcomp_fun_ls_h⁷ < _lh_listcomp_fun_ls_h⁸) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁷)))))
//│ 				in (fun _lh_listcomp_fun_ls_h⁶ -> (fun _lh_listcomp_fun⁷ -> (fun _lh_listcomp_fun⁸ -> (fun _lh_listcomp_fun_ls_t⁶ -> if (_lh_listcomp_fun_ls_h⁵ < _lh_listcomp_fun_ls_h⁶) then [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁵))))))))
//│ 
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated Haskell Code >>>>>>>>>>
//│ module Main where
//│ import Criterion.Main
//│ (let _lh_listcomp_fun⁰ = (\_lh_listcomp_fun_para⁰ -> (_lh_listcomp_fun_para⁰ _lh_listcomp_fun⁰)) in (_lh_listcomp_fun⁰ (let _lh_listcomp_fun_ls_h⁰ = 1 in (let _lh_listcomp_fun_ls_t⁰ = (let _lh_listcomp_fun_ls_h¹ = 4 in (let _lh_listcomp_fun_ls_t¹ = (let _lh_listcomp_fun_ls_h² = 10 in (let _lh_listcomp_fun_ls_t² = (\_lh_listcomp_fun¹ -> []) in (\_lh_listcomp_fun² -> (let _lh_listcomp_fun³ = (\_lh_listcomp_fun_para¹ -> ((((_lh_listcomp_fun_para¹ _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³) _lh_listcomp_fun²) _lh_listcomp_fun_ls_t²)) in (_lh_listcomp_fun³ (let _lh_listcomp_fun_ls_h³ = 2 in (let _lh_listcomp_fun_ls_t³ = (let _lh_listcomp_fun_ls_h⁴ = 3 in (let _lh_listcomp_fun_ls_t⁴ = (let _lh_listcomp_fun_ls_h⁵ = 5 in (let _lh_listcomp_fun_ls_t⁵ = (\_lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun⁴ _lh_listcomp_fun⁵ _lh_listcomp_fun_ls_t⁶ -> (_lh_listcomp_fun⁵ _lh_listcomp_fun_ls_t⁶)) in (\_lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun⁶ _lh_listcomp_fun⁷ _lh_listcomp_fun_ls_t⁷ -> (if (_lh_listcomp_fun_ls_h⁵ < _lh_listcomp_fun_ls_h⁷) then ((_lh_listcomp_fun_ls_h⁵, _lh_listcomp_fun_ls_h⁷):(_lh_listcomp_fun⁶ _lh_listcomp_fun_ls_t⁵)) else (_lh_listcomp_fun⁶ _lh_listcomp_fun_ls_t⁵))))) in (\_lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸ _lh_listcomp_fun⁹ _lh_listcomp_fun_ls_t⁸ -> (if (_lh_listcomp_fun_ls_h⁴ < _lh_listcomp_fun_ls_h⁸) then ((_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun_ls_h⁸):(_lh_listcomp_fun⁸ _lh_listcomp_fun_ls_t⁴)) else (_lh_listcomp_fun⁸ _lh_listcomp_fun_ls_t⁴))))) in (\_lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun¹⁰ _lh_listcomp_fun¹¹ _lh_listcomp_fun_ls_t⁹ -> (if (_lh_listcomp_fun_ls_h³ < _lh_listcomp_fun_ls_h⁹) then ((_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h⁹):(_lh_listcomp_fun¹⁰ _lh_listcomp_fun_ls_t³)) else (_lh_listcomp_fun¹⁰ _lh_listcomp_fun_ls_t³)))))))))) in (\_lh_listcomp_fun¹² -> (let _lh_listcomp_fun¹³ = (\_lh_listcomp_fun_para² -> ((((_lh_listcomp_fun_para² _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹³) _lh_listcomp_fun¹²) _lh_listcomp_fun_ls_t¹)) in (_lh_listcomp_fun¹³ (let _lh_listcomp_fun_ls_h¹⁰ = 2 in (let _lh_listcomp_fun_ls_t¹⁰ = (let _lh_listcomp_fun_ls_h¹¹ = 3 in (let _lh_listcomp_fun_ls_t¹¹ = (let _lh_listcomp_fun_ls_h¹² = 5 in (let _lh_listcomp_fun_ls_t¹² = (\_lh_listcomp_fun_ls_h¹³ _lh_listcomp_fun¹⁴ _lh_listcomp_fun¹⁵ _lh_listcomp_fun_ls_t¹³ -> (_lh_listcomp_fun¹⁵ _lh_listcomp_fun_ls_t¹³)) in (\_lh_listcomp_fun_ls_h¹⁴ _lh_listcomp_fun¹⁶ _lh_listcomp_fun¹⁷ _lh_listcomp_fun_ls_t¹⁴ -> (if (_lh_listcomp_fun_ls_h¹² < _lh_listcomp_fun_ls_h¹⁴) then ((_lh_listcomp_fun_ls_h¹², _lh_listcomp_fun_ls_h¹⁴):(_lh_listcomp_fun¹⁶ _lh_listcomp_fun_ls_t¹²)) else (_lh_listcomp_fun¹⁶ _lh_listcomp_fun_ls_t¹²))))) in (\_lh_listcomp_fun_ls_h¹⁵ _lh_listcomp_fun¹⁸ _lh_listcomp_fun¹⁹ _lh_listcomp_fun_ls_t¹⁵ -> (if (_lh_listcomp_fun_ls_h¹¹ < _lh_listcomp_fun_ls_h¹⁵) then ((_lh_listcomp_fun_ls_h¹¹, _lh_listcomp_fun_ls_h¹⁵):(_lh_listcomp_fun¹⁸ _lh_listcomp_fun_ls_t¹¹)) else (_lh_listcomp_fun¹⁸ _lh_listcomp_fun_ls_t¹¹))))) in (\_lh_listcomp_fun_ls_h¹⁶ _lh_listcomp_fun²⁰ _lh_listcomp_fun²¹ _lh_listcomp_fun_ls_t¹⁶ -> (if (_lh_listcomp_fun_ls_h¹⁰ < _lh_listcomp_fun_ls_h¹⁶) then ((_lh_listcomp_fun_ls_h¹⁰, _lh_listcomp_fun_ls_h¹⁶):(_lh_listcomp_fun²⁰ _lh_listcomp_fun_ls_t¹⁰)) else (_lh_listcomp_fun²⁰ _lh_listcomp_fun_ls_t¹⁰)))))))))) in (\_lh_listcomp_fun²² -> (let _lh_listcomp_fun²³ = (\_lh_listcomp_fun_para³ -> ((((_lh_listcomp_fun_para³ _lh_listcomp_fun_ls_h⁰) _lh_listcomp_fun²³) _lh_listcomp_fun²²) _lh_listcomp_fun_ls_t⁰)) in (_lh_listcomp_fun²³ (let _lh_listcomp_fun_ls_h¹⁷ = 2 in (let _lh_listcomp_fun_ls_t¹⁷ = (let _lh_listcomp_fun_ls_h¹⁸ = 3 in (let _lh_listcomp_fun_ls_t¹⁸ = (let _lh_listcomp_fun_ls_h¹⁹ = 5 in (let _lh_listcomp_fun_ls_t¹⁹ = (\_lh_listcomp_fun_ls_h²⁰ _lh_listcomp_fun²⁴ _lh_listcomp_fun²⁵ _lh_listcomp_fun_ls_t²⁰ -> (_lh_listcomp_fun²⁵ _lh_listcomp_fun_ls_t²⁰)) in (\_lh_listcomp_fun_ls_h²¹ _lh_listcomp_fun²⁶ _lh_listcomp_fun²⁷ _lh_listcomp_fun_ls_t²¹ -> (if (_lh_listcomp_fun_ls_h¹⁹ < _lh_listcomp_fun_ls_h²¹) then ((_lh_listcomp_fun_ls_h¹⁹, _lh_listcomp_fun_ls_h²¹):(_lh_listcomp_fun²⁶ _lh_listcomp_fun_ls_t¹⁹)) else (_lh_listcomp_fun²⁶ _lh_listcomp_fun_ls_t¹⁹))))) in (\_lh_listcomp_fun_ls_h²² _lh_listcomp_fun²⁸ _lh_listcomp_fun²⁹ _lh_listcomp_fun_ls_t²² -> (if (_lh_listcomp_fun_ls_h¹⁸ < _lh_listcomp_fun_ls_h²²) then ((_lh_listcomp_fun_ls_h¹⁸, _lh_listcomp_fun_ls_h²²):(_lh_listcomp_fun²⁸ _lh_listcomp_fun_ls_t¹⁸)) else (_lh_listcomp_fun²⁸ _lh_listcomp_fun_ls_t¹⁸))))) in (\_lh_listcomp_fun_ls_h²³ _lh_listcomp_fun³⁰ _lh_listcomp_fun³¹ _lh_listcomp_fun_ls_t²³ -> (if (_lh_listcomp_fun_ls_h¹⁷ < _lh_listcomp_fun_ls_h²³) then ((_lh_listcomp_fun_ls_h¹⁷, _lh_listcomp_fun_ls_h²³):(_lh_listcomp_fun³⁰ _lh_listcomp_fun_ls_t¹⁷)) else (_lh_listcomp_fun³⁰ _lh_listcomp_fun_ls_t¹⁷))))))))))))
//│ <<<<<<<<<< Generated Haskell Code <<<<<<<<<<

:lhhaskell
map (\x -> x + 1) $ map (\x -> x + x) (primId [1..10])
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ map₀^228((fun x² -> (x² + 1)), map₁^236((fun x³ -> (x³ + x³)), primId⁰(enumFromTo₀^245(1, 10))))
//│ def enumFromTo₀(a², b²) = if (a² <= b²) then [LH_C a² enumFromTo₀^214((a² + 1), b²)] else [LH_N]
//│ def map₀(f⁵, ls⁸) = case ls⁸ of {
//│ 	LH_C h⁸ t⁹ => [LH_C f⁵(h⁸) map₀^198(f⁵, t⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def map₁(f⁴, ls⁷) = case ls⁷ of {
//│ 	LH_C h⁷ t⁸ => [LH_C f⁴(h⁷) map₁^184(f⁴, t⁸)]
//│ 	| LH_N  => [LH_N]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [enumFromTo₀^245]
//│ 	[enumFromTo₀^245 · enumFromTo₀^214] ---> [enumFromTo₀^245] (only one)
//│ [map₀^228]
//│ 	[map₀^228 · map₀^198] ---> [map₀^228] (only one)
//│ [map₁^236]
//│ 	[map₁^236 · map₁^184] ---> [map₁^236] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ map₀₀((fun x² -> (x² + 1)), map₁₀((fun x³ -> (x³ + x³)), primId⁰(enumFromTo₀₀(1, 10))))
//│ def enumFromTo₀₀(a¹, b¹) = 
//│ 	if (a¹ <= b¹) then [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)] else [LH_N]
//│ def map₀₀(f², ls²) = 
//│ 	case ls² of {
//│ 		LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)]
//│ 		| LH_N  => [LH_N]}
//│ def map₁₀(f³, ls³) = 
//│ 	case ls³ of {
//│ 		LH_C h³ t³ => [LH_C f³(h³) map₁₀(f³, t³)]
//│ 		| LH_N  => [LH_N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f³(h³) map₁₀(f³, t³)]: 117 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 105
//│ [LH_N]: 118 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 105
//│ ------------------
//│ case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 105 --->
//│ 	[LH_C f³(h³) map₁₀(f³, t³)]: 117
//│ 	[LH_N]: 118
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C f³(h³) map₁₀(f³, t³)]: 117 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 105
//│ [LH_N]: 118 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 105
//│ ------------------
//│ case ls² of {LH_C h² t² => [LH_C f²(h²) map₀₀(f², t²)] | LH_N  => [LH_N]}: 105 --->
//│ 	[LH_C f³(h³) map₁₀(f³, t³)]: 117
//│ 	[LH_N]: 118
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ map₀₀((fun x⁴ -> (x⁴ + 1)), map₁₀((fun x⁵ -> (x⁵ + x⁵)), primId⁰(enumFromTo₀₀(1, 10))))
//│ def enumFromTo₀₀(a², b²) = 
//│ 	if (a² <= b²) then [LH_C a² enumFromTo₀₀((a² + 1), b²)] else [LH_N]
//│ def map₀₀(f⁴, ls⁴) = 
//│ 	ls⁴(f⁴)
//│ def map₁₀(f⁵, ls⁵) = 
//│ 	case ls⁵ of {
//│ 		LH_C h³ t³ => 
//│ 			let h⁴ = f⁵(h³)
//│ 			in let t⁴ = map₁₀(f⁵, t³)
//│ 			in (fun f⁶ -> [LH_C f⁶(h⁴) map₀₀(f⁶, t⁴)])
//│ 		| LH_N  => (fun f⁷ -> [LH_N])}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated Haskell Code >>>>>>>>>>
//│ module Main where
//│ import Criterion.Main
//│ ((map₀₀ (\x⁰ -> (x⁰ + 1))) ((map₁₀ (\x¹ -> (x¹ + x¹))) ((enumFromTo₀₀ 1) 10)))
//│ enumFromTo₀₀ a⁰ b⁰ = (if (a⁰ <= b⁰) then (a⁰:((enumFromTo₀₀ (a⁰ + 1)) b⁰)) else [])
//│ map₀₀ f⁰ ls⁰ = (ls⁰ f⁰)
//│ map₁₀ f¹ ls¹ = (case ls¹ of {(h⁰ : t⁰) -> (let h¹ = (f¹ h⁰) in (let t¹ = ((map₁₀ f¹) t⁰) in (\f² -> ((f² h¹):((map₀₀ f²) t¹))))); [] -> (\f³ -> [])})
//│ <<<<<<<<<< Generated Haskell Code <<<<<<<<<<




// :haskell TODO: support where, but cannot be local mutual recursive let bindings
// nsoln nq = length (gen nq)
//  where
//     safe :: Int -> Int -> [Int] -> Bool
//     safe x d []    = True
//     safe x d (q:l) = x /= q && x /= q+d && x /= q-d && safe x (d+1) l
//     gen :: Int -> [[Int]]
//     gen 0 = [[]]
//     gen n = [ (q:b) | b <- gen (n-1), q <- [1..nq], safe q 1 b]



:lhhaskell
safe x d []    = True
safe x d (q:l) = (x /= q) && (x /= (q+d)) && (x /= (q-d)) && (safe x (d+1) l)
gen 0 nq = [[]]
gen n nq = [ (q:b) | b <- gen (n-1) nq, q <- (primId [1..nq]), safe q 1 b ]
nsoln nq = length (gen nq nq)
nsoln 12
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ nsoln₀^423(12)
//│ def enumFromTo₀(a², b²) = if (a² <= b²) then [LH_C a² enumFromTo₀^338((a² + 1), b²)] else [LH_N]
//│ def gen₀(_lh_gen_arg1¹, _lh_gen_arg2¹) = case _lh_gen_arg1¹ of {
//│ 	0  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 			LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 				let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 					LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀^281(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 					| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 				in _lh_listcomp_fun³(primId⁰(enumFromTo₀^306(1, _lh_gen_arg2¹)))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²(gen₀^318((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ def length₀(ls⁷) = case ls⁷ of {
//│ 	LH_C h⁷ t⁸ => (1 + length₀^356(t⁸))
//│ 	| LH_N  => 0}
//│ def nsoln₀(_lh_nsoln_arg1¹) = length₀^415(gen₀^416(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ def safe₀(_lh_safe_arg1¹, _lh_safe_arg2¹, _lh_safe_arg3¹) = case _lh_safe_arg3¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀^396(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))
//│ 	| _  => error⁰("match error")}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [nsoln₀^423] (hopeless to continue)
//│ 	[nsoln₀^423 · gen₀^416] (using original def)
//│ 		[nsoln₀^423 · gen₀^416 · enumFromTo₀^306] (using original def)
//│ 			[nsoln₀^423 · gen₀^416 · enumFromTo₀^306 · enumFromTo₀^338] ---> [nsoln₀^423 · gen₀^416 · enumFromTo₀^306] (using original def)
//│ 		[nsoln₀^423 · gen₀^416 · gen₀^318] ---> [nsoln₀^423 · gen₀^416] (using original def)
//│ 		[nsoln₀^423 · gen₀^416 · safe₀^281] (using original def)
//│ 			[nsoln₀^423 · gen₀^416 · safe₀^281 · safe₀^396] ---> [nsoln₀^423 · gen₀^416 · safe₀^281] (using original def)
//│ 	[nsoln₀^423 · length₀^415] (using original def)
//│ 		[nsoln₀^423 · length₀^415 · length₀^356] ---> [nsoln₀^423 · length₀^415] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ nsoln₀₀(12)
//│ def nsoln₀₀(_lh_nsoln_arg1¹) = 
//│ 	length₀₀(gen₀₀(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ 	where
//│ 	def gen₀₀(_lh_gen_arg1¹, _lh_gen_arg2¹) = 
//│ 		case _lh_gen_arg1¹ of {
//│ 			0  => [LH_C [LH_N] [LH_N]]
//│ 			| _  => 
//│ 				let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 					LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 						let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 							LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 							| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 						in _lh_listcomp_fun³(primId⁰(enumFromTo₀₀(1, _lh_gen_arg2¹)))
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun²(gen₀₀((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ 		where
//│ 		def enumFromTo₀₀(a¹, b¹) = 
//│ 			if (a¹ <= b¹) then [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)] else [LH_N]
//│ 		def safe₀₀(_lh_safe_arg1¹, _lh_safe_arg2¹, _lh_safe_arg3¹) = 
//│ 			case _lh_safe_arg3¹ of {
//│ 				LH_N  => [True]
//│ 				| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))
//│ 				| _  => error⁰("match error")}
//│ 	def length₀₀(ls¹) = 
//│ 		case ls¹ of {
//│ 			LH_C h¹ t¹ => (1 + length₀₀(t¹))
//│ 			| LH_N  => 0}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 184 --->
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 296
//│ [LH_N]: 185 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 181
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo₀₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 223
//│ [LH_C [LH_N] [LH_N]]: 186 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 181
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo₀₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 223
//│ [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 198 --->
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 296
//│ [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 202 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 181
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo₀₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 223
//│ [LH_N]: 222 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 181
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo₀₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 223
//│ ------------------
//│ case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 181 --->
//│ 	[LH_N]: 185
//│ 	[LH_C [LH_N] [LH_N]]: 186
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 202
//│ 	[LH_N]: 222
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo₀₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 223 --->
//│ 	[LH_N]: 185
//│ 	[LH_C [LH_N] [LH_N]]: 186
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 202
//│ 	[LH_N]: 222
//│ case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 296 --->
//│ 	[LH_N]: 184
//│ 	[LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 198
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_N]: 184 --->
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 296
//│ [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 198 --->
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 296
//│ ------------------
//│ case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe₀₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰("match error")}: 296 --->
//│ 	[LH_N]: 184
//│ 	[LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 198
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ nsoln₀₀(12)
//│ def nsoln₀₀(_lh_nsoln_arg1²) = 
//│ 	length₀₀(gen₀₀(_lh_nsoln_arg1², _lh_nsoln_arg1²))
//│ 	where
//│ 	def gen₀₀(_lh_gen_arg1², _lh_gen_arg2²) = 
//│ 		case _lh_gen_arg1² of {
//│ 			0  => [LH_C (fun _lh_safe_arg1³ -> (fun _lh_safe_arg2³ -> [True])) [LH_N]]
//│ 			| _  => 
//│ 				let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 					LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 						let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 							LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe₀₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C 
//│ 								let _lh_safe_LH_C_0² = _lh_listcomp_fun_ls_h³
//│ 								in let _lh_safe_LH_C_1² = _lh_listcomp_fun_ls_h²
//│ 								in (fun _lh_safe_arg1⁴ -> (fun _lh_safe_arg2⁴ -> ((((_lh_safe_arg1⁴ /= _lh_safe_LH_C_0²) && (_lh_safe_arg1⁴ /= (_lh_safe_LH_C_0² + _lh_safe_arg2⁴))) && (_lh_safe_arg1⁴ /= (_lh_safe_LH_C_0² - _lh_safe_arg2⁴))) && safe₀₀(_lh_safe_arg1⁴, (_lh_safe_arg2⁴ + 1), _lh_safe_LH_C_1²)))) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t³)
//│ 							| LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t²)})
//│ 						in _lh_listcomp_fun⁵(primId⁰(enumFromTo₀₀(1, _lh_gen_arg2²)))
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun⁴(gen₀₀((_lh_gen_arg1² - 1), _lh_gen_arg2²))}
//│ 		where
//│ 		def enumFromTo₀₀(a², b²) = 
//│ 			if (a² <= b²) then [LH_C a² enumFromTo₀₀((a² + 1), b²)] else [LH_N]
//│ 		def safe₀₀(_lh_safe_arg1², _lh_safe_arg2², _lh_safe_arg3²) = 
//│ 			_lh_safe_arg3²(_lh_safe_arg1², _lh_safe_arg2²)
//│ 	def length₀₀(ls²) = 
//│ 		case ls² of {
//│ 			LH_C h¹ t¹ => (1 + length₀₀(t¹))
//│ 			| LH_N  => 0}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated Haskell Code >>>>>>>>>>
//│ module Main where
//│ import Criterion.Main
//│ (nsoln₀₀ 12)
//│ enumFromTo₀₀ a⁰ b⁰ = (if (a⁰ <= b⁰) then (a⁰:((enumFromTo₀₀ (a⁰ + 1)) b⁰)) else [])
//│ nsoln₀₀ _lh_nsoln_arg1⁰ = (length₀₀ ((gen₀₀ _lh_nsoln_arg1⁰) _lh_nsoln_arg1⁰))
//│ safe₀₀ _lh_safe_arg1⁰ _lh_safe_arg2⁰ _lh_safe_arg3⁰ = ((_lh_safe_arg3⁰ _lh_safe_arg1⁰) _lh_safe_arg2⁰)
//│ gen₀₀ _lh_gen_arg1⁰ _lh_gen_arg2⁰ = (case _lh_gen_arg1⁰ of {0 -> ((\_lh_safe_arg1¹ _lh_safe_arg2¹ -> (True )):[]); _ -> (let _lh_listcomp_fun⁰ = (\_lh_listcomp_fun_para⁰ -> (case _lh_listcomp_fun_para⁰ of {(_lh_listcomp_fun_ls_h⁰ : _lh_listcomp_fun_ls_t⁰) -> (let _lh_listcomp_fun¹ = (\_lh_listcomp_fun_para¹ -> (case _lh_listcomp_fun_para¹ of {(_lh_listcomp_fun_ls_h¹ : _lh_listcomp_fun_ls_t¹) -> (if (((safe₀₀ _lh_listcomp_fun_ls_h¹) 1) _lh_listcomp_fun_ls_h⁰) then ((let _lh_safe_LH_C_0⁰ = _lh_listcomp_fun_ls_h¹ in (let _lh_safe_LH_C_1⁰ = _lh_listcomp_fun_ls_h⁰ in (\_lh_safe_arg1² _lh_safe_arg2² -> ((((_lh_safe_arg1² /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1² /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2²))) && (_lh_safe_arg1² /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2²))) && (((safe₀₀ _lh_safe_arg1²) (_lh_safe_arg2² + 1)) _lh_safe_LH_C_1⁰))))):(_lh_listcomp_fun¹ _lh_listcomp_fun_ls_t¹)) else (_lh_listcomp_fun¹ _lh_listcomp_fun_ls_t¹)); [] -> (_lh_listcomp_fun⁰ _lh_listcomp_fun_ls_t⁰)})) in (_lh_listcomp_fun¹ ((enumFromTo₀₀ 1) _lh_gen_arg2⁰))); [] -> []})) in (_lh_listcomp_fun⁰ ((gen₀₀ (_lh_gen_arg1⁰ - 1)) _lh_gen_arg2⁰)))})
//│ length₀₀ ls⁰ = (case ls⁰ of {(h⁰ : t⁰) -> (1 + (length₀₀ t⁰)); [] -> 0})
//│ <<<<<<<<<< Generated Haskell Code <<<<<<<<<<


:lhhaskell
gen 0 nq = [[]]
gen n nq = [ (q:b) | b <- gen (n-1) nq, q <- (primId [1..nq])]
nsoln nq = length (gen nq nq)
nsoln 3
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ nsoln₀^297(3)
//│ def enumFromTo₀(a², b²) = if (a² <= b²) then [LH_C a² enumFromTo₀^218((a² + 1), b²)] else [LH_N]
//│ def gen₀(_lh_gen_arg1¹, _lh_gen_arg2¹) = case _lh_gen_arg1¹ of {
//│ 	0  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 			LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 				let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 					LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 					| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 				in _lh_listcomp_fun³(primId⁰(enumFromTo₀^271(1, _lh_gen_arg2¹)))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²(gen₀^283((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ def length₀(ls⁷) = case ls⁷ of {
//│ 	LH_C h⁷ t⁸ => (1 + length₀^236(t⁸))
//│ 	| LH_N  => 0}
//│ def nsoln₀(_lh_nsoln_arg1¹) = length₀^243(gen₀^244(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [nsoln₀^297] (hopeless to continue)
//│ 	[nsoln₀^297 · gen₀^244] (using original def)
//│ 		[nsoln₀^297 · gen₀^244 · enumFromTo₀^271] (using original def)
//│ 			[nsoln₀^297 · gen₀^244 · enumFromTo₀^271 · enumFromTo₀^218] ---> [nsoln₀^297 · gen₀^244 · enumFromTo₀^271] (using original def)
//│ 		[nsoln₀^297 · gen₀^244 · gen₀^283] ---> [nsoln₀^297 · gen₀^244] (using original def)
//│ 	[nsoln₀^297 · length₀^243] (using original def)
//│ 		[nsoln₀^297 · length₀^243 · length₀^236] ---> [nsoln₀^297 · length₀^243] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ nsoln₀₀(3)
//│ def nsoln₀₀(_lh_nsoln_arg1¹) = 
//│ 	length₀₀(gen₀₀(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ 	where
//│ 	def gen₀₀(_lh_gen_arg1¹, _lh_gen_arg2¹) = 
//│ 		case _lh_gen_arg1¹ of {
//│ 			0  => [LH_C [LH_N] [LH_N]]
//│ 			| _  => 
//│ 				let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 					LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 						let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 							LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 							| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 						in _lh_listcomp_fun³(primId⁰(enumFromTo₀₀(1, _lh_gen_arg2¹)))
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun²(gen₀₀((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ 		where
//│ 		def enumFromTo₀₀(a¹, b¹) = 
//│ 			if (a¹ <= b¹) then [LH_C a¹ enumFromTo₀₀((a¹ + 1), b¹)] else [LH_N]
//│ 	def length₀₀(ls¹) = 
//│ 		case ls¹ of {
//│ 			LH_C h¹ t¹ => (1 + length₀₀(t¹))
//│ 			| LH_N  => 0}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 91 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo₀₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 118
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 164
//│ [LH_C [LH_N] [LH_N]]: 92 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo₀₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 118
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 164
//│ [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 101 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo₀₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 118
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 164
//│ [LH_N]: 117 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo₀₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 118
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 164
//│ ------------------
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo₀₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 118 --->
//│ 	[LH_N]: 91
//│ 	[LH_C [LH_N] [LH_N]]: 92
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 101
//│ 	[LH_N]: 117
//│ case ls¹ of {LH_C h¹ t¹ => (1 + length₀₀(t¹)) | LH_N  => 0}: 164 --->
//│ 	[LH_N]: 91
//│ 	[LH_C [LH_N] [LH_N]]: 92
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 101
//│ 	[LH_N]: 117
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ nsoln₀₀(3)
//│ def nsoln₀₀(_lh_nsoln_arg1²) = 
//│ 	length₀₀(gen₀₀(_lh_nsoln_arg1², _lh_nsoln_arg1²))
//│ 	where
//│ 	def gen₀₀(_lh_gen_arg1², _lh_gen_arg2²) = 
//│ 		case _lh_gen_arg1² of {
//│ 			0  => [LH_C [LH_N] [LH_N]]
//│ 			| _  => 
//│ 				let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 					LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 						let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 							LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t³)]
//│ 							| LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t²)})
//│ 						in _lh_listcomp_fun⁵(primId⁰(enumFromTo₀₀(1, _lh_gen_arg2²)))
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun⁴(gen₀₀((_lh_gen_arg1² - 1), _lh_gen_arg2²))}
//│ 		where
//│ 		def enumFromTo₀₀(a², b²) = 
//│ 			if (a² <= b²) then [LH_C a² enumFromTo₀₀((a² + 1), b²)] else [LH_N]
//│ 	def length₀₀(ls²) = 
//│ 		case ls² of {
//│ 			LH_C h¹ t¹ => (1 + length₀₀(t¹))
//│ 			| LH_N  => 0}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated Haskell Code >>>>>>>>>>
//│ module Main where
//│ import Criterion.Main
//│ (nsoln₀₀ 3)
//│ gen₀₀ _lh_gen_arg1⁰ _lh_gen_arg2⁰ = (case _lh_gen_arg1⁰ of {0 -> ([]:[]); _ -> (let _lh_listcomp_fun⁰ = (\_lh_listcomp_fun_para⁰ -> (case _lh_listcomp_fun_para⁰ of {(_lh_listcomp_fun_ls_h⁰ : _lh_listcomp_fun_ls_t⁰) -> (let _lh_listcomp_fun¹ = (\_lh_listcomp_fun_para¹ -> (case _lh_listcomp_fun_para¹ of {(_lh_listcomp_fun_ls_h¹ : _lh_listcomp_fun_ls_t¹) -> ((_lh_listcomp_fun_ls_h¹:_lh_listcomp_fun_ls_h⁰):(_lh_listcomp_fun¹ _lh_listcomp_fun_ls_t¹)); [] -> (_lh_listcomp_fun⁰ _lh_listcomp_fun_ls_t⁰)})) in (_lh_listcomp_fun¹ ((enumFromTo₀₀ 1) _lh_gen_arg2⁰))); [] -> []})) in (_lh_listcomp_fun⁰ ((gen₀₀ (_lh_gen_arg1⁰ - 1)) _lh_gen_arg2⁰)))})
//│ enumFromTo₀₀ a⁰ b⁰ = (if (a⁰ <= b⁰) then (a⁰:((enumFromTo₀₀ (a⁰ + 1)) b⁰)) else [])
//│ length₀₀ ls⁰ = (case ls⁰ of {(h⁰ : t⁰) -> (1 + (length₀₀ t⁰)); [] -> 0})
//│ nsoln₀₀ _lh_nsoln_arg1⁰ = (length₀₀ ((gen₀₀ _lh_nsoln_arg1⁰) _lh_nsoln_arg1⁰))
//│ <<<<<<<<<< Generated Haskell Code <<<<<<<<<<



:lhhaskell
// f 0 = error("no")
// f n = n + error("yes")
// f 9



:lhhaskell
// f [] ys = []
// f xs [] = []
// f (x:xs) (y:ys) = (x,y):(f xs ys)
// f [1,2] [2,3]



// WRONG: type error in haskell?
:lhhaskell
[a | (Just a) <- [Nothing, Just 3]]
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 	LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {
//│ 		Just _lh_Just_0¹ => [LH_C _lh_Just_0¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 		| _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}
//│ 	| LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹([LH_C [Nothing] [LH_C [Just 3] [LH_N]]])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ 
//│ 	let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {
//│ 			Just _lh_Just_0¹ => [LH_C _lh_Just_0¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 			| _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹([LH_C [Nothing] [LH_C [Just 3] [LH_N]]])
//│ 
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [Nothing]: 39 --->
//│ 	case _lh_listcomp_fun_ls_h¹ of {Just _lh_Just_0¹ => [LH_C _lh_Just_0¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 34
//│ [Just 3]: 41 --->
//│ 	case _lh_listcomp_fun_ls_h¹ of {Just _lh_Just_0¹ => [LH_C _lh_Just_0¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 34
//│ [LH_N]: 42 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {Just _lh_Just_0¹ => [LH_C _lh_Just_0¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => [LH_N]}: 36
//│ [LH_C [Just 3] [LH_N]]: 43 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {Just _lh_Just_0¹ => [LH_C _lh_Just_0¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => [LH_N]}: 36
//│ [LH_C [Nothing] [LH_C [Just 3] [LH_N]]]: 44 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {Just _lh_Just_0¹ => [LH_C _lh_Just_0¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => [LH_N]}: 36
//│ ------------------
//│ case _lh_listcomp_fun_ls_h¹ of {Just _lh_Just_0¹ => [LH_C _lh_Just_0¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 34 --->
//│ 	[Nothing]: 39
//│ 	[Just 3]: 41
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {Just _lh_Just_0¹ => [LH_C _lh_Just_0¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => [LH_N]}: 36 --->
//│ 	[LH_N]: 42
//│ 	[LH_C [Just 3] [LH_N]]: 43
//│ 	[LH_C [Nothing] [LH_C [Just 3] [LH_N]]]: 44
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_N]: 42 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {Just _lh_Just_0¹ => [LH_C _lh_Just_0¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => [LH_N]}: 36
//│ [LH_C [Just 3] [LH_N]]: 43 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {Just _lh_Just_0¹ => [LH_C _lh_Just_0¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => [LH_N]}: 36
//│ [LH_C [Nothing] [LH_C [Just 3] [LH_N]]]: 44 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {Just _lh_Just_0¹ => [LH_C _lh_Just_0¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => [LH_N]}: 36
//│ ------------------
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {Just _lh_Just_0¹ => [LH_C _lh_Just_0¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => [LH_N]}: 36 --->
//│ 	[LH_N]: 42
//│ 	[LH_C [Just 3] [LH_N]]: 43
//│ 	[LH_C [Nothing] [LH_C [Just 3] [LH_N]]]: 44
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ 
//│ 	let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun²))
//│ 	in _lh_listcomp_fun²(
//│ 		let _lh_listcomp_fun_ls_h² = [Nothing]
//│ 		in let _lh_listcomp_fun_ls_t² = 	
//│ 			let _lh_listcomp_fun_ls_h³ = [Just 3]
//│ 			in let _lh_listcomp_fun_ls_t³ = (fun _lh_listcomp_fun⁵ -> [LH_N])
//│ 			in (fun _lh_listcomp_fun⁴ -> case _lh_listcomp_fun_ls_h³ of {
//│ 				Just _lh_Just_0¹ => [LH_C _lh_Just_0¹ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t³)]
//│ 				| _  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t³)})
//│ 		in (fun _lh_listcomp_fun³ -> case _lh_listcomp_fun_ls_h² of {
//│ 			Just _lh_Just_0¹ => [LH_C _lh_Just_0¹ _lh_listcomp_fun³(_lh_listcomp_fun_ls_t²)]
//│ 			| _  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t²)}))
//│ 
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ ~~~~~~~~~~~~~~~~~~~~~~~ NEXT ITERATION ~~~~~~~~~~~~~~~~~~~~~~~
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ 
//│ 	let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para¹ -> _lh_listcomp_fun_para¹(_lh_listcomp_fun⁴))
//│ 	in _lh_listcomp_fun⁴(
//│ 		let _lh_listcomp_fun_ls_h² = [Nothing]
//│ 		in let _lh_listcomp_fun_ls_t² = 	
//│ 			let _lh_listcomp_fun_ls_h³ = [Just 3]
//│ 			in let _lh_listcomp_fun_ls_t³ = (fun _lh_listcomp_fun⁵ -> [LH_N])
//│ 			in (fun _lh_listcomp_fun⁶ -> case _lh_listcomp_fun_ls_h³ of {
//│ 				Just _lh_Just_0² => [LH_C _lh_Just_0² _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)]
//│ 				| _  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)})
//│ 		in (fun _lh_listcomp_fun⁷ -> case _lh_listcomp_fun_ls_h² of {
//│ 			Just _lh_Just_0³ => [LH_C _lh_Just_0³ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t²)]
//│ 			| _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t²)}))
//│ 
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [Nothing]: 44 --->
//│ 	case _lh_listcomp_fun_ls_h² of {Just _lh_Just_0³ => [LH_C _lh_Just_0³ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t²)] | _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t²)}: 71
//│ [Just 3]: 46 --->
//│ 	case _lh_listcomp_fun_ls_h³ of {Just _lh_Just_0² => [LH_C _lh_Just_0² _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)] | _  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)}: 58
//│ ------------------
//│ case _lh_listcomp_fun_ls_h³ of {Just _lh_Just_0² => [LH_C _lh_Just_0² _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)] | _  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)}: 58 --->
//│ 	[Just 3]: 46
//│ case _lh_listcomp_fun_ls_h² of {Just _lh_Just_0³ => [LH_C _lh_Just_0³ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t²)] | _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t²)}: 71 --->
//│ 	[Nothing]: 44
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [Just 3]: 46 --->
//│ 	case _lh_listcomp_fun_ls_h³ of {Just _lh_Just_0² => [LH_C _lh_Just_0² _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)] | _  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)}: 58
//│ ------------------
//│ case _lh_listcomp_fun_ls_h³ of {Just _lh_Just_0² => [LH_C _lh_Just_0² _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)] | _  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)}: 58 --->
//│ 	[Just 3]: 46
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ 
//│ 	let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun⁸))
//│ 	in _lh_listcomp_fun⁸(
//│ 		let _lh_listcomp_fun_ls_h⁴ = [Nothing]
//│ 		in let _lh_listcomp_fun_ls_t⁴ = 	
//│ 			let _lh_listcomp_fun_ls_h⁵ = 	
//│ 				let _lh_Just_0⁴ = 3
//│ 				in (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁹ -> [LH_C _lh_Just_0⁴ _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁵)]))
//│ 			in let _lh_listcomp_fun_ls_t⁶ = (fun _lh_listcomp_fun¹⁰ -> [LH_N])
//│ 			in (fun _lh_listcomp_fun¹¹ -> _lh_listcomp_fun_ls_h⁵(_lh_listcomp_fun_ls_t⁶, _lh_listcomp_fun¹¹))
//│ 		in (fun _lh_listcomp_fun¹² -> case _lh_listcomp_fun_ls_h⁴ of {
//│ 			Just _lh_Just_0³ => [LH_C _lh_Just_0³ _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁴)]
//│ 			| _  => _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁴)}))
//│ 
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated Haskell Code >>>>>>>>>>
//│ module Main where
//│ import Criterion.Main
//│ (let _lh_listcomp_fun⁰ = (\_lh_listcomp_fun_para⁰ -> (_lh_listcomp_fun_para⁰ _lh_listcomp_fun⁰)) in (_lh_listcomp_fun⁰ (let _lh_listcomp_fun_ls_h⁰ = (Nothing ) in (let _lh_listcomp_fun_ls_t⁰ = (let _lh_listcomp_fun_ls_h¹ = (let _lh_Just_0⁰ = 3 in (\_lh_listcomp_fun_ls_t¹ _lh_listcomp_fun¹ -> (_lh_Just_0⁰:(_lh_listcomp_fun¹ _lh_listcomp_fun_ls_t¹)))) in (let _lh_listcomp_fun_ls_t² = (\_lh_listcomp_fun² -> []) in (\_lh_listcomp_fun³ -> ((_lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t²) _lh_listcomp_fun³)))) in (\_lh_listcomp_fun⁴ -> (case _lh_listcomp_fun_ls_h⁰ of {Just _lh_Just_0¹ -> (_lh_Just_0¹:(_lh_listcomp_fun⁴ _lh_listcomp_fun_ls_t⁰)); _ -> (_lh_listcomp_fun⁴ _lh_listcomp_fun_ls_t⁰)}))))))
//│ <<<<<<<<<< Generated Haskell Code <<<<<<<<<<

// WRONG: not well-typed in haskell
:lhhaskell
[a | a <- [3]]
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 	LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 	| LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹([LH_C 3 [LH_N]])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ 
//│ 	let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹([LH_C 3 [LH_N]])
//│ 
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 27 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 23
//│ [LH_C 3 [LH_N]]: 28 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 23
//│ ------------------
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 23 --->
//│ 	[LH_N]: 27
//│ 	[LH_C 3 [LH_N]]: 28
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_N]: 27 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 23
//│ [LH_C 3 [LH_N]]: 28 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 23
//│ ------------------
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 23 --->
//│ 	[LH_N]: 27
//│ 	[LH_C 3 [LH_N]]: 28
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ 
//│ 	let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun²))
//│ 	in _lh_listcomp_fun²(
//│ 		let _lh_listcomp_fun_ls_h² = 3
//│ 		in let _lh_listcomp_fun_ls_t² = (fun _lh_listcomp_fun⁴ -> [LH_N])
//│ 		in (fun _lh_listcomp_fun³ -> [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun³(_lh_listcomp_fun_ls_t²)]))
//│ 
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated Haskell Code >>>>>>>>>>
//│ module Main where
//│ import Criterion.Main
//│ (let _lh_listcomp_fun⁰ = (\_lh_listcomp_fun_para⁰ -> (_lh_listcomp_fun_para⁰ _lh_listcomp_fun⁰)) in (_lh_listcomp_fun⁰ (let _lh_listcomp_fun_ls_h⁰ = 3 in (let _lh_listcomp_fun_ls_t⁰ = (\_lh_listcomp_fun¹ -> []) in (\_lh_listcomp_fun² -> (_lh_listcomp_fun_ls_h⁰:(_lh_listcomp_fun² _lh_listcomp_fun_ls_t⁰)))))))
//│ <<<<<<<<<< Generated Haskell Code <<<<<<<<<<

