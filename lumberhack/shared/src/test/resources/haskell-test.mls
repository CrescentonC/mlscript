:NewParser
:ParseOnly

:lhGenHaskell
:lhInHaskell
testMapmap len = map (\x -> x + 1) $ map (\x -> x + x) [1..len]
testMapmap $ primId 5000000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMapmap_lh^59(primId⁰(5000000))
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^21((a⁰ + 1), b⁰)] else [LH_N]
//│ def map_lh(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh^5(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def testMapmap_lh(_lh_testMapmap_arg1⁰) = map_lh^35((fun x⁰ -> (x⁰ + 1)), map_lh^43((fun x¹ -> (x¹ + x¹)), enumFromTo_lh^51(1, _lh_testMapmap_arg1⁰)))
//│ 		---------- unoptimized haskell gen ----------
//│ 		(testMapmap_lh 5000000)
//│ 		enumFromTo_lh a⁰ b⁰ = (if (a⁰ <= b⁰) then (a⁰:((enumFromTo_lh (a⁰ + 1)) b⁰)) else [])
//│ 		map_lh f⁰ ls⁰ = (case ls⁰ of {(h⁰ : t⁰) -> ((f⁰ h⁰):((map_lh f⁰) t⁰)); [] -> []})
//│ 		testMapmap_lh _lh_testMapmap_arg1⁰ = ((map_lh (\x⁰ -> (x⁰ + 1))) ((map_lh (\x¹ -> (x¹ + x¹))) ((enumFromTo_lh 1) _lh_testMapmap_arg1⁰)))
//│ 		---------- unoptimized haskell gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testMapmap_lh^59] (hopeless to continue)
//│ 	[testMapmap_lh^59 · enumFromTo_lh^51] (using original def)
//│ 		[testMapmap_lh^59 · enumFromTo_lh^51 · enumFromTo_lh^21] ---> [testMapmap_lh^59 · enumFromTo_lh^51] (using original def)
//│ 	[testMapmap_lh^59 · map_lh^35] (using original def)
//│ 		[testMapmap_lh^59 · map_lh^35 · map_lh^5] ---> [testMapmap_lh^59 · map_lh^35] (using original def)
//│ 	[testMapmap_lh^59 · map_lh^43] (using original def)
//│ 		[testMapmap_lh^59 · map_lh^43 · map_lh^5] ---> [testMapmap_lh^59 · map_lh^43] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testMapmap_lh_₀(primId⁰(5000000))
//│ def testMapmap_lh_₀(_lh_testMapmap_arg1¹) = 
//│ 	map_lh_₀((fun x² -> (x² + 1)), map_lh_₁((fun x³ -> (x³ + x³)), enumFromTo_lh_₀(1, _lh_testMapmap_arg1¹)))
//│ 	where
//│ 	def enumFromTo_lh_₀(a¹, b¹) = 
//│ 		if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh_₀((a¹ + 1), b¹)] else [LH_N]
//│ 	def map_lh_₀(f², ls²) = 
//│ 		case ls² of {
//│ 			LH_C h² t² => [LH_C f²(h²) map_lh_₀(f², t²)]
//│ 			| LH_N  => [LH_N]}
//│ 	def map_lh_₁(f¹, ls¹) = 
//│ 		case ls¹ of {
//│ 			LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₁(f¹, t¹)]
//│ 			| LH_N  => [LH_N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f¹(h¹) map_lh_₁(f¹, t¹)]: 73 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map_lh_₀(f², t²)] | LH_N  => [LH_N]}: 89
//│ [LH_N]: 74 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map_lh_₀(f², t²)] | LH_N  => [LH_N]}: 89
//│ [LH_C a¹ enumFromTo_lh_₀((a¹ + 1), b¹)]: 131 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₁(f¹, t¹)] | LH_N  => [LH_N]}: 75
//│ [LH_N]: 132 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₁(f¹, t¹)] | LH_N  => [LH_N]}: 75
//│ ------------------
//│ case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₁(f¹, t¹)] | LH_N  => [LH_N]}: 75 --->
//│ 	[LH_C a¹ enumFromTo_lh_₀((a¹ + 1), b¹)]: 131
//│ 	[LH_N]: 132
//│ case ls² of {LH_C h² t² => [LH_C f²(h²) map_lh_₀(f², t²)] | LH_N  => [LH_N]}: 89 --->
//│ 	[LH_C f¹(h¹) map_lh_₁(f¹, t¹)]: 73
//│ 	[LH_N]: 74
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C f¹(h¹) map_lh_₁(f¹, t¹)]: 73 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map_lh_₀(f², t²)] | LH_N  => [LH_N]}: 89
//│ [LH_N]: 74 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map_lh_₀(f², t²)] | LH_N  => [LH_N]}: 89
//│ [LH_C a¹ enumFromTo_lh_₀((a¹ + 1), b¹)]: 131 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₁(f¹, t¹)] | LH_N  => [LH_N]}: 75
//│ [LH_N]: 132 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₁(f¹, t¹)] | LH_N  => [LH_N]}: 75
//│ ------------------
//│ case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₁(f¹, t¹)] | LH_N  => [LH_N]}: 75 --->
//│ 	[LH_C a¹ enumFromTo_lh_₀((a¹ + 1), b¹)]: 131
//│ 	[LH_N]: 132
//│ case ls² of {LH_C h² t² => [LH_C f²(h²) map_lh_₀(f², t²)] | LH_N  => [LH_N]}: 89 --->
//│ 	[LH_C f¹(h¹) map_lh_₁(f¹, t¹)]: 73
//│ 	[LH_N]: 74
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMapmap_lh_₀(primId⁰(5000000))
//│ def testMapmap_lh_₀(_lh_testMapmap_arg1²) = 
//│ 	map_lh_₀((fun x⁴ -> (x⁴ + 1)), map_lh_₁((fun x⁵ -> (x⁵ + x⁵)), enumFromTo_lh_₀(1, _lh_testMapmap_arg1²)))
//│ 	where
//│ 	def enumFromTo_lh_₀(a², b²) = 
//│ 		if (a² <= b²) then 
//│ 			let t³ = enumFromTo_lh_₀((a² + 1), b²)
//│ 			in let h³ = a²
//│ 			in (fun f⁵ -> 
//│ 				let t⁴ = map_lh_₁(f⁵, t³)
//│ 				in let h⁴ = f⁵(h³)
//│ 				in (fun f⁶ -> [LH_C f⁶(h⁴) map_lh_₀(f⁶, t⁴)])) else (fun f⁷ -> (fun f⁸ -> [LH_N]))
//│ 	def map_lh_₀(f⁴, ls⁴) = 
//│ 		ls⁴(f⁴)
//│ 	def map_lh_₁(f³, ls³) = 
//│ 		ls³(f³)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated Haskell >>>>>>>>>>
//│ import Criterion.Main
//│ 
//│ 
//│ --- original ---
//│ (testMapmap_lh 5000000)
//│ enumFromTo_lh a⁰ b⁰ = (if (a⁰ <= b⁰) then (a⁰:((enumFromTo_lh (a⁰ + 1)) b⁰)) else [])
//│ testMapmap_lh _lh_testMapmap_arg1⁰ = ((map_lh (\x⁰ -> (x⁰ + 1))) ((map_lh (\x¹ -> (x¹ + x¹))) ((enumFromTo_lh 1) _lh_testMapmap_arg1⁰)))
//│ 
//│ --- lumberhack ---
//│ enumFromTo_lh_₀ a⁰ b⁰ = (if (a⁰ <= b⁰) then (let t⁰ = ((enumFromTo_lh_₀ (a⁰ + 1)) b⁰) in (let h⁰ = a⁰ in (\f² -> (let t¹ = ((map_lh_₁ f²) t⁰) in (let h¹ = (f² h⁰) in (\f³ -> ((f³ h¹):((map_lh_₀ f³) t¹)))))))) else (\f⁴ f⁵ -> []))
//│ map_lh_₀ f¹ ls¹ = (ls¹ f¹)
//│ map_lh_₁ f⁰ ls⁰ = (ls⁰ f⁰)
//│ testMapmap_lh_₀ _lh_testMapmap_arg1⁰ = ((map_lh_₀ (\x⁰ -> (x⁰ + 1))) ((map_lh_₁ (\x¹ -> (x¹ + x¹))) ((enumFromTo_lh_₀ 1) _lh_testMapmap_arg1⁰)))
//│ 
//│ main :: IO ()
//│ main = defaultMain [ bgroup "Mapmap_lh" [
//│     bench "lumberhack_Mapmap_lh" $ nf testMapmap_lh_₀ 5000000
//│   , bench "original_Mapmap_lh" $ nf testMapmap_lh 5000000 ] ]
//│ <<<<<<<<<< Generated Haskell <<<<<<<<<<


// fusion clash due to: the thing returned by `gen` will be consumed
// by both `gen` itself (`b <- gen (n-1) nq`) and `length`
// NOTE: being slower (than the desugared version, faster than the most original version) may be because
// originally the type of `gen` is `Int -> Int -> [[Int]]`
// after the fusion the type of `gen` is `Int -> Int -> [Int -> Int -> Bool]`
:lhGenHaskell
:lhInHaskell
safe x d []    = True
safe x d (q:l) = (x /= q) && (x /= (q+d)) && (x /= (q-d)) && (safe x (d+1) l)
gen 0 nq = [[]]
gen n nq = [ (q:b) | b <- gen (n-1) nq, q <- (primId [1..nq]), safe q 1 b ]
nsoln nq = length (gen nq nq)
testQueen n = nsoln n
testQueen $ primId 12
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testQueen_lh^151(primId⁰(12))
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^7((a⁰ + 1), b⁰)] else [LH_N]
//│ def gen_lh(_lh_gen_arg1⁰, _lh_gen_arg2⁰) = case _lh_gen_arg1⁰ of {
//│ 	0  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 				let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 					LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if safe_lh^100(_lh_listcomp_fun_ls_h¹, 1, _lh_listcomp_fun_ls_h⁰) then [LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)
//│ 					| LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ 				in _lh_listcomp_fun¹(primId⁰(enumFromTo_lh^125(1, _lh_gen_arg2⁰)))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁰(gen_lh^137((_lh_gen_arg1⁰ - 1), _lh_gen_arg2⁰))}
//│ def length_lh(ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => (1 + length_lh^25(t⁰))
//│ 	| LH_N  => 0}
//│ def nsoln_lh(_lh_nsoln_arg1⁰) = length_lh^36(gen_lh^37(_lh_nsoln_arg1⁰, _lh_nsoln_arg1⁰))
//│ def safe_lh(_lh_safe_arg1⁰, _lh_safe_arg2⁰, _lh_safe_arg3⁰) = case _lh_safe_arg3⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_safe_LH_C_0⁰ _lh_safe_LH_C_1⁰ => ((((_lh_safe_arg1⁰ /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2⁰))) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2⁰))) && safe_lh^77(_lh_safe_arg1⁰, (_lh_safe_arg2⁰ + 1), _lh_safe_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def testQueen_lh(_lh_testQueen_arg1⁰) = nsoln_lh^32(_lh_testQueen_arg1⁰)
//│ 		---------- unoptimized haskell gen ----------
//│ 		(testQueen_lh 12)
//│ 		enumFromTo_lh a⁰ b⁰ = (if (a⁰ <= b⁰) then (a⁰:((enumFromTo_lh (a⁰ + 1)) b⁰)) else [])
//│ 		gen_lh _lh_gen_arg1⁰ _lh_gen_arg2⁰ = (case _lh_gen_arg1⁰ of {0 -> ([]:[]); _ -> (let _lh_listcomp_fun⁰ = (\_lh_listcomp_fun_para⁰ -> (case _lh_listcomp_fun_para⁰ of {(_lh_listcomp_fun_ls_h⁰ : _lh_listcomp_fun_ls_t⁰) -> (let _lh_listcomp_fun¹ = (\_lh_listcomp_fun_para¹ -> (case _lh_listcomp_fun_para¹ of {(_lh_listcomp_fun_ls_h¹ : _lh_listcomp_fun_ls_t¹) -> (if (((safe_lh _lh_listcomp_fun_ls_h¹) 1) _lh_listcomp_fun_ls_h⁰) then ((_lh_listcomp_fun_ls_h¹:_lh_listcomp_fun_ls_h⁰):(_lh_listcomp_fun¹ _lh_listcomp_fun_ls_t¹)) else (_lh_listcomp_fun¹ _lh_listcomp_fun_ls_t¹)); [] -> (_lh_listcomp_fun⁰ _lh_listcomp_fun_ls_t⁰)})) in (_lh_listcomp_fun¹ ((enumFromTo_lh 1) _lh_gen_arg2⁰))); [] -> []})) in (_lh_listcomp_fun⁰ ((gen_lh (_lh_gen_arg1⁰ - 1)) _lh_gen_arg2⁰)))})
//│ 		length_lh ls⁰ = (case ls⁰ of {(h⁰ : t⁰) -> (1 + (length_lh t⁰)); [] -> 0})
//│ 		nsoln_lh _lh_nsoln_arg1⁰ = (length_lh ((gen_lh _lh_nsoln_arg1⁰) _lh_nsoln_arg1⁰))
//│ 		safe_lh _lh_safe_arg1⁰ _lh_safe_arg2⁰ _lh_safe_arg3⁰ = (case _lh_safe_arg3⁰ of {[] -> True; (_lh_safe_LH_C_0⁰ : _lh_safe_LH_C_1⁰) -> ((((_lh_safe_arg1⁰ /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2⁰))) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2⁰))) && (((safe_lh _lh_safe_arg1⁰) (_lh_safe_arg2⁰ + 1)) _lh_safe_LH_C_1⁰)); _ -> error})
//│ 		testQueen_lh _lh_testQueen_arg1⁰ = (nsoln_lh _lh_testQueen_arg1⁰)
//│ 		---------- unoptimized haskell gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testQueen_lh^151] (hopeless to continue)
//│ 	[testQueen_lh^151 · nsoln_lh^32] (using original def)
//│ 		[testQueen_lh^151 · nsoln_lh^32 · gen_lh^37] (using original def)
//│ 			[testQueen_lh^151 · nsoln_lh^32 · gen_lh^37 · enumFromTo_lh^125] (using original def)
//│ 				[testQueen_lh^151 · nsoln_lh^32 · gen_lh^37 · enumFromTo_lh^125 · enumFromTo_lh^7] ---> [testQueen_lh^151 · nsoln_lh^32 · gen_lh^37 · enumFromTo_lh^125] (using original def)
//│ 			[testQueen_lh^151 · nsoln_lh^32 · gen_lh^37 · gen_lh^137] ---> [testQueen_lh^151 · nsoln_lh^32 · gen_lh^37] (using original def)
//│ 			[testQueen_lh^151 · nsoln_lh^32 · gen_lh^37 · safe_lh^100] (using original def)
//│ 				[testQueen_lh^151 · nsoln_lh^32 · gen_lh^37 · safe_lh^100 · safe_lh^77] ---> [testQueen_lh^151 · nsoln_lh^32 · gen_lh^37 · safe_lh^100] (using original def)
//│ 		[testQueen_lh^151 · nsoln_lh^32 · length_lh^36] (using original def)
//│ 			[testQueen_lh^151 · nsoln_lh^32 · length_lh^36 · length_lh^25] ---> [testQueen_lh^151 · nsoln_lh^32 · length_lh^36] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testQueen_lh_₀(primId⁰(12))
//│ def testQueen_lh_₀(_lh_testQueen_arg1¹) = 
//│ 	nsoln_lh_₀(_lh_testQueen_arg1¹)
//│ 	where
//│ 	def nsoln_lh_₀(_lh_nsoln_arg1¹) = 
//│ 		length_lh_₀(gen_lh_₀(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ 		where
//│ 		def gen_lh_₀(_lh_gen_arg1¹, _lh_gen_arg2¹) = 
//│ 			case _lh_gen_arg1¹ of {
//│ 				0  => [LH_C [LH_N] [LH_N]]
//│ 				| _  => 
//│ 					let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 						LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 							let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 								LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 								| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 							in _lh_listcomp_fun³(primId⁰(enumFromTo_lh_₀(1, _lh_gen_arg2¹)))
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun²(gen_lh_₀((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ 			where
//│ 			def enumFromTo_lh_₀(a¹, b¹) = 
//│ 				if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh_₀((a¹ + 1), b¹)] else [LH_N]
//│ 			def safe_lh_₀(_lh_safe_arg1¹, _lh_safe_arg2¹, _lh_safe_arg3¹) = 
//│ 				case _lh_safe_arg3¹ of {
//│ 					LH_N  => [True]
//│ 					| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_lh_₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))
//│ 					| _  => error⁰}
//│ 		def length_lh_₀(ls¹) = 
//│ 			case ls¹ of {
//│ 				LH_C h¹ t¹ => (1 + length_lh_₀(t¹))
//│ 				| LH_N  => 0}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 235 --->
//│ 	DeadCodeCons
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_lh_₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰}: 230
//│ [LH_N]: 236 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo_lh_₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 274
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_lh_₀(t¹)) | LH_N  => 0}: 300
//│ [LH_C [LH_N] [LH_N]]: 237 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo_lh_₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 274
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_lh_₀(t¹)) | LH_N  => 0}: 300
//│ [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 249 --->
//│ 	DeadCodeCons
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_lh_₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰}: 230
//│ [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 253 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo_lh_₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 274
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_lh_₀(t¹)) | LH_N  => 0}: 300
//│ [LH_N]: 273 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo_lh_₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 274
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_lh_₀(t¹)) | LH_N  => 0}: 300
//│ ------------------
//│ case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_lh_₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰}: 230 --->
//│ 	[LH_N]: 235
//│ 	[LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 249
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(primId⁰(enumFromTo_lh_₀(1, _lh_gen_arg2¹))) | LH_N  => [LH_N]}: 274 --->
//│ 	[LH_N]: 236
//│ 	[LH_C [LH_N] [LH_N]]: 237
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 253
//│ 	[LH_N]: 273
//│ case ls¹ of {LH_C h¹ t¹ => (1 + length_lh_₀(t¹)) | LH_N  => 0}: 300 --->
//│ 	[LH_N]: 236
//│ 	[LH_C [LH_N] [LH_N]]: 237
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 253
//│ 	[LH_N]: 273
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testQueen_lh_₀(primId⁰(12))
//│ def testQueen_lh_₀(_lh_testQueen_arg1²) = 
//│ 	nsoln_lh_₀(_lh_testQueen_arg1²)
//│ 	where
//│ 	def nsoln_lh_₀(_lh_nsoln_arg1²) = 
//│ 		length_lh_₀(gen_lh_₀(_lh_nsoln_arg1², _lh_nsoln_arg1²))
//│ 		where
//│ 		def gen_lh_₀(_lh_gen_arg1², _lh_gen_arg2²) = 
//│ 			case _lh_gen_arg1² of {
//│ 				0  => [LH_C [LH_N] [LH_N]]
//│ 				| _  => 
//│ 					let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 						LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 							let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 								LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t³)
//│ 								| LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t²)})
//│ 							in _lh_listcomp_fun⁵(primId⁰(enumFromTo_lh_₀(1, _lh_gen_arg2²)))
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun⁴(gen_lh_₀((_lh_gen_arg1² - 1), _lh_gen_arg2²))}
//│ 			where
//│ 			def enumFromTo_lh_₀(a², b²) = 
//│ 				if (a² <= b²) then [LH_C a² enumFromTo_lh_₀((a² + 1), b²)] else [LH_N]
//│ 			def safe_lh_₀(_lh_safe_arg1², _lh_safe_arg2², _lh_safe_arg3²) = 
//│ 				case _lh_safe_arg3² of {
//│ 					LH_N  => [True]
//│ 					| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1² /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1² /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2²))) && (_lh_safe_arg1² /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2²))) && safe_lh_₀(_lh_safe_arg1², (_lh_safe_arg2² + 1), _lh_safe_LH_C_1¹))
//│ 					| _  => error⁰}
//│ 		def length_lh_₀(ls²) = 
//│ 			case ls² of {
//│ 				LH_C h¹ t¹ => (1 + length_lh_₀(t¹))
//│ 				| LH_N  => 0}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated Haskell >>>>>>>>>>
//│ import Criterion.Main
//│ 
//│ 
//│ --- original ---
//│ (testQueen_lh 12)
//│ gen_lh _lh_gen_arg1⁰ _lh_gen_arg2⁰ = (case _lh_gen_arg1⁰ of {0 -> ([]:[]); _ -> (let _lh_listcomp_fun⁰ = (\_lh_listcomp_fun_para⁰ -> (case _lh_listcomp_fun_para⁰ of {(_lh_listcomp_fun_ls_h⁰ : _lh_listcomp_fun_ls_t⁰) -> (let _lh_listcomp_fun¹ = (\_lh_listcomp_fun_para¹ -> (case _lh_listcomp_fun_para¹ of {(_lh_listcomp_fun_ls_h¹ : _lh_listcomp_fun_ls_t¹) -> (if (((safe_lh _lh_listcomp_fun_ls_h¹) 1) _lh_listcomp_fun_ls_h⁰) then ((_lh_listcomp_fun_ls_h¹:_lh_listcomp_fun_ls_h⁰):(_lh_listcomp_fun¹ _lh_listcomp_fun_ls_t¹)) else (_lh_listcomp_fun¹ _lh_listcomp_fun_ls_t¹)); [] -> (_lh_listcomp_fun⁰ _lh_listcomp_fun_ls_t⁰)})) in (_lh_listcomp_fun¹ ((enumFromTo_lh 1) _lh_gen_arg2⁰))); [] -> []})) in (_lh_listcomp_fun⁰ ((gen_lh (_lh_gen_arg1⁰ - 1)) _lh_gen_arg2⁰)))})
//│ length_lh ls⁰ = (case ls⁰ of {(h⁰ : t⁰) -> (1 + (length_lh t⁰)); [] -> 0})
//│ nsoln_lh _lh_nsoln_arg1⁰ = (length_lh ((gen_lh _lh_nsoln_arg1⁰) _lh_nsoln_arg1⁰))
//│ safe_lh _lh_safe_arg1⁰ _lh_safe_arg2⁰ _lh_safe_arg3⁰ = (case _lh_safe_arg3⁰ of {[] -> True; (_lh_safe_LH_C_0⁰ : _lh_safe_LH_C_1⁰) -> ((((_lh_safe_arg1⁰ /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2⁰))) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2⁰))) && (((safe_lh _lh_safe_arg1⁰) (_lh_safe_arg2⁰ + 1)) _lh_safe_LH_C_1⁰)); _ -> error})
//│ testQueen_lh _lh_testQueen_arg1⁰ = (nsoln_lh _lh_testQueen_arg1⁰)
//│ 
//│ --- lumberhack ---
//│ enumFromTo_lh_₀ a⁰ b⁰ = (if (a⁰ <= b⁰) then (a⁰:((enumFromTo_lh_₀ (a⁰ + 1)) b⁰)) else [])
//│ gen_lh_₀ _lh_gen_arg1⁰ _lh_gen_arg2⁰ = (case _lh_gen_arg1⁰ of {0 -> ([]:[]); _ -> (let _lh_listcomp_fun⁰ = (\_lh_listcomp_fun_para⁰ -> (case _lh_listcomp_fun_para⁰ of {(_lh_listcomp_fun_ls_h⁰ : _lh_listcomp_fun_ls_t⁰) -> (let _lh_listcomp_fun¹ = (\_lh_listcomp_fun_para¹ -> (case _lh_listcomp_fun_para¹ of {(_lh_listcomp_fun_ls_h¹ : _lh_listcomp_fun_ls_t¹) -> (if (((safe_lh_₀ _lh_listcomp_fun_ls_h¹) 1) _lh_listcomp_fun_ls_h⁰) then ((_lh_listcomp_fun_ls_h¹:_lh_listcomp_fun_ls_h⁰):(_lh_listcomp_fun¹ _lh_listcomp_fun_ls_t¹)) else (_lh_listcomp_fun¹ _lh_listcomp_fun_ls_t¹)); [] -> (_lh_listcomp_fun⁰ _lh_listcomp_fun_ls_t⁰)})) in (_lh_listcomp_fun¹ ((enumFromTo_lh_₀ 1) _lh_gen_arg2⁰))); [] -> []})) in (_lh_listcomp_fun⁰ ((gen_lh_₀ (_lh_gen_arg1⁰ - 1)) _lh_gen_arg2⁰)))})
//│ length_lh_₀ ls⁰ = (case ls⁰ of {(h⁰ : t⁰) -> (1 + (length_lh_₀ t⁰)); [] -> 0})
//│ nsoln_lh_₀ _lh_nsoln_arg1⁰ = (length_lh_₀ ((gen_lh_₀ _lh_nsoln_arg1⁰) _lh_nsoln_arg1⁰))
//│ safe_lh_₀ _lh_safe_arg1⁰ _lh_safe_arg2⁰ _lh_safe_arg3⁰ = (case _lh_safe_arg3⁰ of {[] -> True; (_lh_safe_LH_C_0⁰ : _lh_safe_LH_C_1⁰) -> ((((_lh_safe_arg1⁰ /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2⁰))) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2⁰))) && (((safe_lh_₀ _lh_safe_arg1⁰) (_lh_safe_arg2⁰ + 1)) _lh_safe_LH_C_1⁰)); _ -> error})
//│ testQueen_lh_₀ _lh_testQueen_arg1⁰ = (nsoln_lh_₀ _lh_testQueen_arg1⁰)
//│ 
//│ main :: IO ()
//│ main = defaultMain [ bgroup "Queen_lh" [
//│     bench "lumberhack_Queen_lh" $ nf testQueen_lh_₀ 12
//│   , bench "original_Queen_lh" $ nf testQueen_lh 12 ] ]
//│ <<<<<<<<<< Generated Haskell <<<<<<<<<<


// WRONG: haskell also cannot handle `[1..nq]` in list comprehension, type error
:lhInHaskell
safe x d []    = True
safe x d (q:l) = (x /= q) && (x /= (q+d)) && (x /= (q-d)) && (safe x (d+1) l)
gen 0 nq = [[]]
gen n nq = [ (q:b) | b <- gen (n-1) nq, q <- [1..nq], safe q 1 b ]
nsoln nq = length (gen nq nq)
test n = nsoln n
test $ primId 4
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ test_lh^149(primId⁰(4))
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^7((a⁰ + 1), b⁰)] else [LH_N]
//│ def gen_lh(_lh_gen_arg1⁰, _lh_gen_arg2⁰) = case _lh_gen_arg1⁰ of {
//│ 	0  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 				let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 					LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if safe_lh^100(_lh_listcomp_fun_ls_h¹, 1, _lh_listcomp_fun_ls_h⁰) then [LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)
//│ 					| LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ 				in _lh_listcomp_fun¹(enumFromTo_lh^124(1, _lh_gen_arg2⁰))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁰(gen_lh^135((_lh_gen_arg1⁰ - 1), _lh_gen_arg2⁰))}
//│ def length_lh(ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => (1 + length_lh^25(t⁰))
//│ 	| LH_N  => 0}
//│ def nsoln_lh(_lh_nsoln_arg1⁰) = length_lh^36(gen_lh^37(_lh_nsoln_arg1⁰, _lh_nsoln_arg1⁰))
//│ def safe_lh(_lh_safe_arg1⁰, _lh_safe_arg2⁰, _lh_safe_arg3⁰) = case _lh_safe_arg3⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_safe_LH_C_0⁰ _lh_safe_LH_C_1⁰ => ((((_lh_safe_arg1⁰ /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2⁰))) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2⁰))) && safe_lh^77(_lh_safe_arg1⁰, (_lh_safe_arg2⁰ + 1), _lh_safe_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def test_lh(_lh_test_arg1⁰) = nsoln_lh^32(_lh_test_arg1⁰)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [test_lh^149] (hopeless to continue)
//│ 	[test_lh^149 · nsoln_lh^32] (using original def)
//│ 		[test_lh^149 · nsoln_lh^32 · gen_lh^37] (using original def)
//│ 			[test_lh^149 · nsoln_lh^32 · gen_lh^37 · enumFromTo_lh^124] (using original def)
//│ 				[test_lh^149 · nsoln_lh^32 · gen_lh^37 · enumFromTo_lh^124 · enumFromTo_lh^7] ---> [test_lh^149 · nsoln_lh^32 · gen_lh^37 · enumFromTo_lh^124] (using original def)
//│ 			[test_lh^149 · nsoln_lh^32 · gen_lh^37 · gen_lh^135] ---> [test_lh^149 · nsoln_lh^32 · gen_lh^37] (using original def)
//│ 			[test_lh^149 · nsoln_lh^32 · gen_lh^37 · safe_lh^100] (using original def)
//│ 				[test_lh^149 · nsoln_lh^32 · gen_lh^37 · safe_lh^100 · safe_lh^77] ---> [test_lh^149 · nsoln_lh^32 · gen_lh^37 · safe_lh^100] (using original def)
//│ 		[test_lh^149 · nsoln_lh^32 · length_lh^36] (using original def)
//│ 			[test_lh^149 · nsoln_lh^32 · length_lh^36 · length_lh^25] ---> [test_lh^149 · nsoln_lh^32 · length_lh^36] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ test_lh_₀(primId⁰(4))
//│ def test_lh_₀(_lh_test_arg1¹) = 
//│ 	nsoln_lh_₀(_lh_test_arg1¹)
//│ 	where
//│ 	def nsoln_lh_₀(_lh_nsoln_arg1¹) = 
//│ 		length_lh_₀(gen_lh_₀(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ 		where
//│ 		def gen_lh_₀(_lh_gen_arg1¹, _lh_gen_arg2¹) = 
//│ 			case _lh_gen_arg1¹ of {
//│ 				0  => [LH_C [LH_N] [LH_N]]
//│ 				| _  => 
//│ 					let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 						LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 							let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 								LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 								| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 							in _lh_listcomp_fun³(enumFromTo_lh_₀(1, _lh_gen_arg2¹))
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun²(gen_lh_₀((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ 			where
//│ 			def enumFromTo_lh_₀(a¹, b¹) = 
//│ 				if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh_₀((a¹ + 1), b¹)] else [LH_N]
//│ 			def safe_lh_₀(_lh_safe_arg1¹, _lh_safe_arg2¹, _lh_safe_arg3¹) = 
//│ 				case _lh_safe_arg3¹ of {
//│ 					LH_N  => [True]
//│ 					| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_lh_₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹))
//│ 					| _  => error⁰}
//│ 		def length_lh_₀(ls¹) = 
//│ 			case ls¹ of {
//│ 				LH_C h¹ t¹ => (1 + length_lh_₀(t¹))
//│ 				| LH_N  => 0}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 224 --->
//│ 	DeadCodeCons
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_lh_₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰}: 219
//│ [LH_N]: 225 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_lh_₀(t¹)) | LH_N  => 0}: 163
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_lh_₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 261
//│ [LH_C [LH_N] [LH_N]]: 226 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_lh_₀(t¹)) | LH_N  => 0}: 163
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_lh_₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 261
//│ [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 238 --->
//│ 	DeadCodeCons
//│ 	case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_lh_₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰}: 219
//│ [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 242 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_lh_₀(t¹)) | LH_N  => 0}: 163
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_lh_₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 261
//│ [LH_N]: 260 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_lh_₀(t¹)) | LH_N  => 0}: 163
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_lh_₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 261
//│ [LH_C a¹ enumFromTo_lh_₀((a¹ + 1), b¹)]: 293 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 250
//│ [LH_N]: 294 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 250
//│ ------------------
//│ case ls¹ of {LH_C h¹ t¹ => (1 + length_lh_₀(t¹)) | LH_N  => 0}: 163 --->
//│ 	[LH_N]: 225
//│ 	[LH_C [LH_N] [LH_N]]: 226
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 242
//│ 	[LH_N]: 260
//│ case _lh_safe_arg3¹ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2¹))) && safe_lh_₀(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1¹)) | _  => error⁰}: 219 --->
//│ 	[LH_N]: 224
//│ 	[LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²]: 238
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 250 --->
//│ 	[LH_C a¹ enumFromTo_lh_₀((a¹ + 1), b¹)]: 293
//│ 	[LH_N]: 294
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_lh_₀(1, _lh_gen_arg2¹)) | LH_N  => [LH_N]}: 261 --->
//│ 	[LH_N]: 225
//│ 	[LH_C [LH_N] [LH_N]]: 226
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 242
//│ 	[LH_N]: 260
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C a¹ enumFromTo_lh_₀((a¹ + 1), b¹)]: 293 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 250
//│ [LH_N]: 294 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 250
//│ ------------------
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => if safe_lh_₀(_lh_listcomp_fun_ls_h³, 1, _lh_listcomp_fun_ls_h²) then [LH_C [LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³) | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 250 --->
//│ 	[LH_C a¹ enumFromTo_lh_₀((a¹ + 1), b¹)]: 293
//│ 	[LH_N]: 294
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ test_lh_₀(primId⁰(4))
//│ def test_lh_₀(_lh_test_arg1²) = 
//│ 	nsoln_lh_₀(_lh_test_arg1²)
//│ 	where
//│ 	def nsoln_lh_₀(_lh_nsoln_arg1²) = 
//│ 		length_lh_₀(gen_lh_₀(_lh_nsoln_arg1², _lh_nsoln_arg1²))
//│ 		where
//│ 		def gen_lh_₀(_lh_gen_arg1², _lh_gen_arg2²) = 
//│ 			case _lh_gen_arg1² of {
//│ 				0  => [LH_C [LH_N] [LH_N]]
//│ 				| _  => 
//│ 					let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 						LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 							let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> _lh_listcomp_fun_para⁵(_lh_listcomp_fun_ls_h², _lh_listcomp_fun⁵, _lh_listcomp_fun_ls_t², _lh_listcomp_fun⁴))
//│ 							in _lh_listcomp_fun⁵(enumFromTo_lh_₀(1, _lh_gen_arg2²))
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun⁴(gen_lh_₀((_lh_gen_arg1² - 1), _lh_gen_arg2²))}
//│ 			where
//│ 			def enumFromTo_lh_₀(a², b²) = 
//│ 				if (a² <= b²) then 
//│ 					let _lh_listcomp_fun_ls_t⁴ = enumFromTo_lh_₀((a² + 1), b²)
//│ 					in let _lh_listcomp_fun_ls_h⁴ = a²
//│ 					in (fun _lh_listcomp_fun_ls_h⁵ -> (fun _lh_listcomp_fun⁶ -> (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁷ -> if safe_lh_₀(_lh_listcomp_fun_ls_h⁴, 1, _lh_listcomp_fun_ls_h⁵) then [LH_C [LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_h⁵] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁴))))) else (fun _lh_listcomp_fun_ls_h⁶ -> (fun _lh_listcomp_fun⁸ -> (fun _lh_listcomp_fun_ls_t⁶ -> (fun _lh_listcomp_fun⁹ -> _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁶)))))
//│ 			def safe_lh_₀(_lh_safe_arg1², _lh_safe_arg2², _lh_safe_arg3²) = 
//│ 				case _lh_safe_arg3² of {
//│ 					LH_N  => [True]
//│ 					| LH_C _lh_safe_LH_C_0¹ _lh_safe_LH_C_1¹ => ((((_lh_safe_arg1² /= _lh_safe_LH_C_0¹) && (_lh_safe_arg1² /= (_lh_safe_LH_C_0¹ + _lh_safe_arg2²))) && (_lh_safe_arg1² /= (_lh_safe_LH_C_0¹ - _lh_safe_arg2²))) && safe_lh_₀(_lh_safe_arg1², (_lh_safe_arg2² + 1), _lh_safe_LH_C_1¹))
//│ 					| _  => error⁰}
//│ 		def length_lh_₀(ls²) = 
//│ 			case ls² of {
//│ 				LH_C h¹ t¹ => (1 + length_lh_₀(t¹))
//│ 				| LH_N  => 0}
//│ <<<<<<< after fusion <<<<<<<


// WRONG: not well-typed in haskell
:lhInHaskell
// [ (a, b) | b <- [1, 4, 10], a <- [2, 3, 5], a < b ]

// TODO: support where, but cannot be local mutual recursive let bindings
// :haskell
// nsoln nq = length (gen nq)
//  where
//     safe :: Int -> Int -> [Int] -> Bool
//     safe x d []    = True
//     safe x d (q:l) = x /= q && x /= q+d && x /= q-d && safe x (d+1) l
//     gen :: Int -> [[Int]]
//     gen 0 = [[]]
//     gen n = [ (q:b) | b <- gen (n-1), q <- [1..nq], safe q 1 b]

:lhInHaskell
// gen 0 nq = [[]]
// gen n nq = [ (q:b) | b <- gen (n-1) nq, q <- (primId [1..nq])]
// nsoln nq = length (gen nq nq)
// nsoln 3

:lhInHaskell
// f 0 = error("no")
// f n = n + error("yes")
// f 9

:lhInHaskell
// f [] ys = []
// f xs [] = []
// f (x:xs) (y:ys) = (x,y):(f xs ys)
// f [1,2] [2,3]

// WRONG: type error after fusion in haskell: f x = x f
:lhInHaskell
// [a | (Just a) <- [Nothing, Just 3]]

// WRONG: not well-typed in haskell after fusion
:lhInHaskell
:lhGenHaskell
testSimpleRecursiveTypeExample x = [a | a <- [x]]
testSimpleRecursiveTypeExample $ primId 3
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testSimpleRecursiveTypeExample_lh^17(primId⁰(3))
//│ def testSimpleRecursiveTypeExample_lh(_lh_testSimpleRecursiveTypeExample_arg1⁰) = 
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰([LH_C _lh_testSimpleRecursiveTypeExample_arg1⁰ [LH_N]])
//│ 		---------- unoptimized haskell gen ----------
//│ 		(testSimpleRecursiveTypeExample_lh 3)
//│ 		testSimpleRecursiveTypeExample_lh _lh_testSimpleRecursiveTypeExample_arg1⁰ = (let _lh_listcomp_fun⁰ = (\_lh_listcomp_fun_para⁰ -> (case _lh_listcomp_fun_para⁰ of {(_lh_listcomp_fun_ls_h⁰ : _lh_listcomp_fun_ls_t⁰) -> (_lh_listcomp_fun_ls_h⁰:(_lh_listcomp_fun⁰ _lh_listcomp_fun_ls_t⁰)); [] -> []})) in (_lh_listcomp_fun⁰ (_lh_testSimpleRecursiveTypeExample_arg1⁰:[])))
//│ 		---------- unoptimized haskell gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testSimpleRecursiveTypeExample_lh^17] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testSimpleRecursiveTypeExample_lh_₀(primId⁰(3))
//│ def testSimpleRecursiveTypeExample_lh_₀(_lh_testSimpleRecursiveTypeExample_arg1¹) = 
//│ 	let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹([LH_C _lh_testSimpleRecursiveTypeExample_arg1¹ [LH_N]])
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 33 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 29
//│ [LH_C _lh_testSimpleRecursiveTypeExample_arg1¹ [LH_N]]: 34 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 29
//│ ------------------
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 29 --->
//│ 	[LH_N]: 33
//│ 	[LH_C _lh_testSimpleRecursiveTypeExample_arg1¹ [LH_N]]: 34
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_N]: 33 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 29
//│ [LH_C _lh_testSimpleRecursiveTypeExample_arg1¹ [LH_N]]: 34 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 29
//│ ------------------
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 29 --->
//│ 	[LH_N]: 33
//│ 	[LH_C _lh_testSimpleRecursiveTypeExample_arg1¹ [LH_N]]: 34
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testSimpleRecursiveTypeExample_lh_₀(primId⁰(3))
//│ def testSimpleRecursiveTypeExample_lh_₀(_lh_testSimpleRecursiveTypeExample_arg1²) = 
//│ 	let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun²))
//│ 	in _lh_listcomp_fun²(
//│ 		let _lh_listcomp_fun_ls_t² = (fun _lh_listcomp_fun⁴ -> [LH_N])
//│ 		in let _lh_listcomp_fun_ls_h² = _lh_testSimpleRecursiveTypeExample_arg1²
//│ 		in (fun _lh_listcomp_fun³ -> [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun³(_lh_listcomp_fun_ls_t²)]))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated Haskell >>>>>>>>>>
//│ import Criterion.Main
//│ 
//│ 
//│ --- original ---
//│ (testSimpleRecursiveTypeExample_lh 3)
//│ 
//│ --- lumberhack ---
//│ testSimpleRecursiveTypeExample_lh_₀ _lh_testSimpleRecursiveTypeExample_arg1⁰ = (let _lh_listcomp_fun⁰ = (\_lh_listcomp_fun_para⁰ -> (_lh_listcomp_fun_para⁰ _lh_listcomp_fun⁰)) in (_lh_listcomp_fun⁰ (let _lh_listcomp_fun_ls_t⁰ = (\_lh_listcomp_fun¹ -> []) in (let _lh_listcomp_fun_ls_h⁰ = _lh_testSimpleRecursiveTypeExample_arg1⁰ in (\_lh_listcomp_fun² -> (_lh_listcomp_fun_ls_h⁰:(_lh_listcomp_fun² _lh_listcomp_fun_ls_t⁰)))))))
//│ 
//│ main :: IO ()
//│ main = defaultMain [ bgroup "SimpleRecursiveTypeExample_lh" [
//│     bench "lumberhack_SimpleRecursiveTypeExample_lh" $ nf testSimpleRecursiveTypeExample_lh_₀ 3
//│   , bench "original_SimpleRecursiveTypeExample_lh" $ nf testSimpleRecursiveTypeExample_lh 3 ] ]
//│ <<<<<<<<<< Generated Haskell <<<<<<<<<<

// WRONG: not well-typed in haskell
:lhInHaskell
// [a | a <- [1..2]]
