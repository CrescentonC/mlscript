:NewParser
:ParseOnly


// Initial program, not immediately fusable:
fun count(c, xs) = if xs is
    C(h, t) then count(add(c, 1), t)
    N then c
fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
    N then a
count(0, rev(N, N))
//│ |#fun| |count|(|c|,| |xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |count|(|add|(|c|,| |1|)|,| |t|)|↵|N| |#then| |c|←|↵|#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|↵|N| |#then| |a|←|↵|count|(|0|,| |rev|(|N|,| |N|)|)|
//│ Parsed: {fun count = c, xs, => if xs is ‹(C (h, t,)) then count (add (c, 1,), t,); (N) then c›; fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,); (N) then a›; count (0, rev (N, N,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((count:6^27 0) ((rev:7^30 [N]) [N]))
//│ def count:6 = (fun c:8 -> (fun xs:9 -> case xs:9^1 of {
//│ 	C h:10 t:11 => ((count:6^2 ((add:4^3 c:8^4) 1)) t:11^9)
//│ 	| N => c:8^11}))
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^15 of {
//│ 	C h1:14 t1:15 => ((rev:7^16 [C h1:14^17 a:12^18]) t1:15^21)
//│ 	| N => a:12^23}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(13'h1, 11'a) <: 3'xs
//│ 	[+rev:7^16 · +rev:7^16 · +rev:7^16 · -rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2]  --->  [+rev:7^16 · +rev:7^16 · -rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2]
//│ 	[+rev:7^16 · +rev:7^16 · +rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2]  --->  [+rev:7^16 · +rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2]
//│ NoProd <: 3'xs
//│ 	[+rev:7^30 · -rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · -rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2]
//│ 	[+rev:7^30 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · -rev:7^30 · +count:6^27 · +count:6^2]
//│ NoProd <: 12'ys
//│ 	[+rev:7^30 · +rev:7^16 · +rev:7^16]  --->  [+rev:7^30 · +rev:7^16]
//│ NoProd <: 5't
//│ 	[+rev:7^30 · +rev:7^16 · +rev:7^16 · -rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · +rev:7^16 · +rev:7^16 · -rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2]
//│ 	[+rev:7^30 · +rev:7^16 · +rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · +rev:7^16 · +rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2]
//│ 	[+rev:7^30 · +rev:7^16 · -rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · +rev:7^16 · -rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2]
//│ 	[+rev:7^30 · +rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · +rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [count:6^27 · count:6^2 · count:6^2] --> [count:6^27 · count:6^2]
//│ [rev:7^30 · rev:7^16 · rev:7^16] --> [rev:7^30 · rev:7^16]
//│ [rev:7^30 · rev:7^16] --> [rev:7^30 · rev:7^16]
//│ [rev:7^30] --> [rev:7^30]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [count:6^27]
//│ 	[count:6^27 · count:6^2]
//│ 		[count:6^27 · count:6^2 · count:6^2] ---> [count:6^27 · count:6^2] (only one)
//│ [rev:7^30]
//│ 	[rev:7^30 · rev:7^16]
//│ 		[rev:7^30 · rev:7^16 · rev:7^16] ---> [rev:7^30 · rev:7^16] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([count:6^27]:16^88 0) (([rev:7^30]:18^91 [N]) [N]))
//│ def [count:6^27 · count:6^2]:17 = (fun c:34 -> (fun xs:35 -> case xs:35^60 of {
//│ 	C h:36 t:37 => (([count:6^27 · count:6^2]:17^61 ((add:24^62 c:34^63) 1)) t:37^68)
//│ 	| N => c:34^70}))
//│ def [count:6^27]:16 = (fun c:38 -> (fun xs:39 -> case xs:39^74 of {
//│ 	C h:40 t:41 => (([count:6^27 · count:6^2]:17^75 ((add:24^76 c:38^77) 1)) t:41^82)
//│ 	| N => c:38^84}))
//│ def [rev:7^30 · rev:7^16]:19 = (fun a:30 -> (fun ys:31 -> case ys:31^48 of {
//│ 	C h1:32 t1:33 => (([rev:7^30 · rev:7^16]:19^49 [C h1:32^50 a:30^51]) t1:33^54)
//│ 	| N => a:30^56}))
//│ def [rev:7^30]:18 = (fun a:26 -> (fun ys:27 -> case ys:27^36 of {
//│ 	C h1:28 t1:29 => (([rev:7^30 · rev:7^16]:19^37 [C h1:28^38 a:26^39]) t1:29^42)
//│ 	| N => a:26^44}))
//│ def count:6 = (fun c:8 -> (fun xs:9 -> case xs:9^10 of {
//│ 	C h:10 t:11 => ((count:6^11 ((add:4^12 c:8^13) 1)) t:11^18)
//│ 	| N => c:8^20}))
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^24 of {
//│ 	C h1:14 t1:15 => ((rev:7^25 [C h1:14^26 a:12^27]) t1:15^30)
//│ 	| N => a:12^32}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 40: [C 38: h1:28^38 39: a:26^39]
//│ [C h1:28^38 a:26^39] --->
//│ 	case xs:35^60 of {C h:36 t:37 => (([count:6^27 · count:6^2]:17^61 ((add:24^62 c:34^63) 1)) t:37^68) | N => c:34^70}
//│ 	case xs:39^74 of {C h:40 t:41 => (([count:6^27 · count:6^2]:17^75 ((add:24^76 c:38^77) 1)) t:41^82) | N => c:38^84}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 52: [C 50: h1:32^50 51: a:30^51]
//│ [C h1:32^50 a:30^51] --->
//│ 	case xs:35^60 of {C h:36 t:37 => (([count:6^27 · count:6^2]:17^61 ((add:24^62 c:34^63) 1)) t:37^68) | N => c:34^70}
//│ 	case xs:39^74 of {C h:40 t:41 => (([count:6^27 · count:6^2]:17^75 ((add:24^76 c:38^77) 1)) t:41^82) | N => c:38^84}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 92: [N]
//│ [N] --->
//│ 	case xs:35^60 of {C h:36 t:37 => (([count:6^27 · count:6^2]:17^61 ((add:24^62 c:34^63) 1)) t:37^68) | N => c:34^70}
//│ 	case xs:39^74 of {C h:40 t:41 => (([count:6^27 · count:6^2]:17^75 ((add:24^76 c:38^77) 1)) t:41^82) | N => c:38^84}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 94: [N]
//│ [N] --->
//│ 	case ys:27^36 of {C h1:28 t1:29 => (([rev:7^30 · rev:7^16]:19^37 [C h1:28^38 a:26^39]) t1:29^42) | N => a:26^44}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (([count:6^27]:16^97 0) (([rev:7^30]:18^100 c:34^101) a:26^103))
//│ def [count:6^27 · count:6^2]:17 = (fun c:34 -> (fun xs:35 -> xs:35^120))
//│ def [count:6^27]:16 = (fun c:38 -> (fun xs:39 -> xs:39^160))
//│ def [rev:7^30 · rev:7^16]:19 = (fun a:30 -> (fun ys:31 -> case ys:31^138 of {
//│ 	C h1:32 t1:33 => (([rev:7^30 · rev:7^16]:19^139 let h:40 = h1:32^151
//│ 	in let t:41 = a:30^149
//│ 	in (([count:6^27 · count:6^2]:17^140 ((add:24^141 c:38^142) 1)) t:41^147)) t1:33^154)
//│ 	| N => a:30^156}))
//│ def [rev:7^30]:18 = (fun a:26 -> (fun ys:27 -> ys:27^123))
//│ def count:6 = (fun c:8 -> (fun xs:9 -> case xs:9^106 of {
//│ 	C h:10 t:11 => ((count:6^107 ((add:4^108 c:8^109) 1)) t:11^114)
//│ 	| N => c:8^116}))
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^126 of {
//│ 	C h1:14 t1:15 => ((rev:7^127 [C h1:14^128 a:12^129]) t1:15^132)
//│ 	| N => a:12^134}))
//│ <<<<<<< after fusion <<<<<<<


// Fusablified program:
fun count(xs) = if xs is
    C(h, t) then c => count(t)(add(c, 1))
    N then c => c
fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
    N then a
fun init = N
count(rev(N, init))(0)
//│ |#fun| |count|(|xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |c| |=>| |count|(|t|)|(|add|(|c|,| |1|)|)|↵|N| |#then| |c| |=>| |c|←|↵|#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|↵|N| |#then| |a|←|↵|#fun| |init| |#=| |N|↵|count|(|rev|(|N|,| |init|)|)|(|0|)|
//│ Parsed: {fun count = xs, => if xs is ‹(C (h, t,)) then c, => count (t,) (add (c, 1,),); (N) then c, => c›; fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,); (N) then a›; fun init = N; count (rev (N, init,),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((count:6^29 ((rev:7^30 [N]) init:8^33)) 0)
//│ def count:6 = (fun xs:9 -> case xs:9^1 of {
//│ 	C h:10 t:11 => (fun c:12 -> ((count:6^2 t:11^3) ((add:4^5 c:12^6) 1)))
//│ 	| N => (fun c:13 -> c:13^12)})
//│ def init:8 = [N]
//│ def rev:7 = (fun a:14 -> (fun ys:15 -> case ys:15^16 of {
//│ 	C h1:16 t1:17 => ((rev:7^17 [C h1:16^18 a:14^19]) t1:17^22)
//│ 	| N => a:14^24}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(15'h1, 13'a) <: 3'xs
//│ 	[+rev:7^17 · +rev:7^17 · +rev:7^17 · -rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2]  --->  [+rev:7^17 · +rev:7^17 · -rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2]
//│ 	[+rev:7^17 · +rev:7^17 · +rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2]  --->  [+rev:7^17 · +rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2]
//│ NoProd <: 3'xs
//│ 	[+rev:7^30 · -rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · -rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2]
//│ 	[+rev:7^30 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · -rev:7^30 · +count:6^29 · +count:6^2]
//│ NoProd <: 14'ys
//│ 	[-init:8^33 · +rev:7^30 · +rev:7^17 · +rev:7^17]  --->  [-init:8^33 · +rev:7^30 · +rev:7^17]
//│ NoProd <: 5't
//│ 	[+rev:7^30 · +rev:7^17 · +rev:7^17 · -rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · +rev:7^17 · +rev:7^17 · -rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2]
//│ 	[+rev:7^30 · +rev:7^17 · +rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · +rev:7^17 · +rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2]
//│ 	[+rev:7^30 · +rev:7^17 · -rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · +rev:7^17 · -rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2]
//│ 	[+rev:7^30 · +rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · +rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [count:6^29 · count:6^2 · count:6^2] --> [count:6^29 · count:6^2]
//│ [rev:7^30 · rev:7^17 · rev:7^17] --> [rev:7^30 · rev:7^17]
//│ [init:8^33] --> [init:8^33]
//│ [rev:7^30 · rev:7^17] --> [rev:7^30 · rev:7^17]
//│ [rev:7^30] --> [rev:7^30]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [count:6^29]
//│ 	[count:6^29 · count:6^2]
//│ 		[count:6^29 · count:6^2 · count:6^2] ---> [count:6^29 · count:6^2] (only one)
//│ [init:8^33]
//│ 
//│ [rev:7^30]
//│ 	[rev:7^30 · rev:7^17]
//│ 		[rev:7^30 · rev:7^17 · rev:7^17] ---> [rev:7^30 · rev:7^17] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([count:6^29]:18^93 (([rev:7^30]:20^94 [N]) [init:8^33]:22^97)) 0)
//│ def [count:6^29 · count:6^2]:19 = (fun xs:29 -> case xs:29^39 of {
//│ 	C h:30 t:31 => (fun c:32 -> (([count:6^29 · count:6^2]:19^40 t:31^41) ((add:27^43 c:32^44) 1)))
//│ 	| N => (fun c:33 -> c:33^50)})
//│ def [count:6^29]:18 = (fun xs:42 -> case xs:42^78 of {
//│ 	C h:43 t:44 => (fun c:45 -> (([count:6^29 · count:6^2]:19^79 t:44^80) ((add:27^82 c:45^83) 1)))
//│ 	| N => (fun c:46 -> c:46^89)})
//│ def [init:8^33]:22 = [N]
//│ def [rev:7^30 · rev:7^17]:21 = (fun a:38 -> (fun ys:39 -> case ys:39^66 of {
//│ 	C h1:40 t1:41 => (([rev:7^30 · rev:7^17]:21^67 [C h1:40^68 a:38^69]) t1:41^72)
//│ 	| N => a:38^74}))
//│ def [rev:7^30]:20 = (fun a:34 -> (fun ys:35 -> case ys:35^54 of {
//│ 	C h1:36 t1:37 => (([rev:7^30 · rev:7^17]:21^55 [C h1:36^56 a:34^57]) t1:37^60)
//│ 	| N => a:34^62}))
//│ def count:6 = (fun xs:9 -> case xs:9^10 of {
//│ 	C h:10 t:11 => (fun c:12 -> ((count:6^11 t:11^12) ((add:4^14 c:12^15) 1)))
//│ 	| N => (fun c:13 -> c:13^21)})
//│ def init:8 = [N]
//│ def rev:7 = (fun a:14 -> (fun ys:15 -> case ys:15^25 of {
//│ 	C h1:16 t1:17 => ((rev:7^26 [C h1:16^27 a:14^28]) t1:17^31)
//│ 	| N => a:14^33}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 38: [N]
//│ [N] --->
//│ 	case ys:35^54 of {C h1:36 t1:37 => (([rev:7^30 · rev:7^17]:21^55 [C h1:36^56 a:34^57]) t1:37^60) | N => a:34^62}
//│ 58: [C 56: h1:36^56 57: a:34^57]
//│ [C h1:36^56 a:34^57] --->
//│ 	case xs:29^39 of {C h:30 t:31 => (fun c:32 -> (([count:6^29 · count:6^2]:19^40 t:31^41) ((add:27^43 c:32^44) 1))) | N => (fun c:33 -> c:33^50)}
//│ 	case xs:42^78 of {C h:43 t:44 => (fun c:45 -> (([count:6^29 · count:6^2]:19^79 t:44^80) ((add:27^82 c:45^83) 1))) | N => (fun c:46 -> c:46^89)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 70: [C 68: h1:40^68 69: a:38^69]
//│ [C h1:40^68 a:38^69] --->
//│ 	case xs:29^39 of {C h:30 t:31 => (fun c:32 -> (([count:6^29 · count:6^2]:19^40 t:31^41) ((add:27^43 c:32^44) 1))) | N => (fun c:33 -> c:33^50)}
//│ 	case xs:42^78 of {C h:43 t:44 => (fun c:45 -> (([count:6^29 · count:6^2]:19^79 t:44^80) ((add:27^82 c:45^83) 1))) | N => (fun c:46 -> c:46^89)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 95: [N]
//│ [N] --->
//│ 	case xs:29^39 of {C h:30 t:31 => (fun c:32 -> (([count:6^29 · count:6^2]:19^40 t:31^41) ((add:27^43 c:32^44) 1))) | N => (fun c:33 -> c:33^50)}
//│ 	case xs:42^78 of {C h:43 t:44 => (fun c:45 -> (([count:6^29 · count:6^2]:19^79 t:44^80) ((add:27^82 c:45^83) 1))) | N => (fun c:46 -> c:46^89)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (([count:6^29]:18^102 (([rev:7^30]:20^103 (fun c:46 -> c:46^104)) [init:8^33]:22^107)) 0)
//│ def [count:6^29 · count:6^2]:19 = (fun xs:29 -> xs:29^112)
//│ def [count:6^29]:18 = (fun xs:42 -> xs:42^114)
//│ def [init:8^33]:22 = a:34^129
//│ def [rev:7^30 · rev:7^17]:21 = (fun a:38 -> (fun ys:39 -> case ys:39^148 of {
//│ 	C h1:40 t1:41 => (([rev:7^30 · rev:7^17]:21^149 let h:43 = h1:40^162
//│ 	in let t:44 = a:38^160
//│ 	in (fun c:45 -> (([count:6^29 · count:6^2]:19^150 t:44^151) ((add:27^153 c:45^154) 1)))) t1:41^165)
//│ 	| N => a:38^167}))
//│ def [rev:7^30]:20 = (fun a:34 -> (fun ys:35 -> ys:35^130))
//│ def count:6 = (fun xs:9 -> case xs:9^133 of {
//│ 	C h:10 t:11 => (fun c:12 -> ((count:6^134 t:11^135) ((add:4^137 c:12^138) 1)))
//│ 	| N => (fun c:13 -> c:13^144)})
//│ def init:8 = [N]
//│ def rev:7 = (fun a:14 -> (fun ys:15 -> case ys:15^117 of {
//│ 	C h1:16 t1:17 => ((rev:7^118 [C h1:16^119 a:14^120]) t1:17^123)
//│ 	| N => a:14^125}))
//│ <<<<<<< after fusion <<<<<<<


// FIXME
// Paper example (original)
fun idxSum(i, xs) = if xs is
    C(h, t) then add(i, idxSum(add(i, 1), t))
    N then 0
fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
    N then a
idxSum(0, rev(N, N))
//│ |#fun| |idxSum|(|i|,| |xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |add|(|i|,| |idxSum|(|add|(|i|,| |1|)|,| |t|)|)|↵|N| |#then| |0|←|↵|#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|↵|N| |#then| |a|←|↵|idxSum|(|0|,| |rev|(|N|,| |N|)|)|
//│ Parsed: {fun idxSum = i, xs, => if xs is ‹(C (h, t,)) then add (i, idxSum (add (i, 1,), t,),); (N) then 0›; fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,); (N) then a›; idxSum (0, rev (N, N,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((idxSum:6^31 0) ((rev:7^34 [N]) [N]))
//│ def idxSum:6 = (fun i:8 -> (fun xs:9 -> case xs:9^1 of {
//│ 	C h:10 t:11 => ((add:4^2 i:8^3) ((idxSum:6^5 ((add:4^6 i:8^7) 1)) t:11^12))
//│ 	| N => 0}))
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^19 of {
//│ 	C h1:14 t1:15 => ((rev:7^20 [C h1:14^21 a:12^22]) t1:15^25)
//│ 	| N => a:12^27}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(15'h1, 13'a) <: 3'xs
//│ 	[+rev:7^20 · +rev:7^20 · +rev:7^20 · -rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5]  --->  [+rev:7^20 · +rev:7^20 · -rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5]
//│ 	[+rev:7^20 · +rev:7^20 · +rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5]  --->  [+rev:7^20 · +rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5]
//│ NoProd <: 3'xs
//│ 	[+rev:7^34 · -rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5]  --->  [+rev:7^34 · -rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5]
//│ 	[+rev:7^34 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5]  --->  [+rev:7^34 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5]
//│ NoProd <: 14'ys
//│ 	[+rev:7^34 · +rev:7^20 · +rev:7^20]  --->  [+rev:7^34 · +rev:7^20]
//│ NoProd <: 5't
//│ 	[+rev:7^34 · +rev:7^20 · +rev:7^20 · -rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5 · +idxSum:6^5]  --->  [+rev:7^34 · +rev:7^20 · +rev:7^20 · -rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5]
//│ 	[+rev:7^34 · +rev:7^20 · +rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5 · +idxSum:6^5]  --->  [+rev:7^34 · +rev:7^20 · +rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5]
//│ 	[+rev:7^34 · +rev:7^20 · -rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5]  --->  [+rev:7^34 · +rev:7^20 · -rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5]
//│ 	[+rev:7^34 · +rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5]  --->  [+rev:7^34 · +rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [idxSum:6^31 · idxSum:6^5 · idxSum:6^5] --> [idxSum:6^31 · idxSum:6^5]
//│ [rev:7^34 · rev:7^20 · rev:7^20] --> [rev:7^34 · rev:7^20]
//│ [rev:7^34 · rev:7^20] --> [rev:7^34 · rev:7^20]
//│ [rev:7^34] --> [rev:7^34]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [idxSum:6^31]
//│ 	[idxSum:6^31 · idxSum:6^5]
//│ 		[idxSum:6^31 · idxSum:6^5 · idxSum:6^5] ---> [idxSum:6^31 · idxSum:6^5] (only one)
//│ [rev:7^34]
//│ 	[rev:7^34 · rev:7^20]
//│ 		[rev:7^34 · rev:7^20 · rev:7^20] ---> [rev:7^34 · rev:7^20] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([idxSum:6^31]:18^100 0) (([rev:7^34]:16^103 [N]) [N]))
//│ def [idxSum:6^31 · idxSum:6^5]:19 = (fun i:26 -> (fun xs:27 -> case xs:27^40 of {
//│ 	C h:28 t:29 => ((add:24^41 i:26^42) (([idxSum:6^31 · idxSum:6^5]:19^44 ((add:24^45 i:26^46) 1)) t:29^51))
//│ 	| N => 0}))
//│ def [idxSum:6^31]:18 = (fun i:38 -> (fun xs:39 -> case xs:39^82 of {
//│ 	C h:40 t:41 => ((add:24^83 i:38^84) (([idxSum:6^31 · idxSum:6^5]:19^86 ((add:24^87 i:38^88) 1)) t:41^93))
//│ 	| N => 0}))
//│ def [rev:7^34 · rev:7^20]:17 = (fun a:34 -> (fun ys:35 -> case ys:35^70 of {
//│ 	C h1:36 t1:37 => (([rev:7^34 · rev:7^20]:17^71 [C h1:36^72 a:34^73]) t1:37^76)
//│ 	| N => a:34^78}))
//│ def [rev:7^34]:16 = (fun a:30 -> (fun ys:31 -> case ys:31^58 of {
//│ 	C h1:32 t1:33 => (([rev:7^34 · rev:7^20]:17^59 [C h1:32^60 a:30^61]) t1:33^64)
//│ 	| N => a:30^66}))
//│ def idxSum:6 = (fun i:8 -> (fun xs:9 -> case xs:9^10 of {
//│ 	C h:10 t:11 => ((add:4^11 i:8^12) ((idxSum:6^14 ((add:4^15 i:8^16) 1)) t:11^21))
//│ 	| N => 0}))
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^28 of {
//│ 	C h1:14 t1:15 => ((rev:7^29 [C h1:14^30 a:12^31]) t1:15^34)
//│ 	| N => a:12^36}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 104: [N]
//│ [N] --->
//│ 	case xs:27^40 of {C h:28 t:29 => ((add:24^41 i:26^42) (([idxSum:6^31 · idxSum:6^5]:19^44 ((add:24^45 i:26^46) 1)) t:29^51)) | N => 0}
//│ 	case xs:39^82 of {C h:40 t:41 => ((add:24^83 i:38^84) (([idxSum:6^31 · idxSum:6^5]:19^86 ((add:24^87 i:38^88) 1)) t:41^93)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 106: [N]
//│ [N] --->
//│ 	case ys:31^58 of {C h1:32 t1:33 => (([rev:7^34 · rev:7^20]:17^59 [C h1:32^60 a:30^61]) t1:33^64) | N => a:30^66}
//│ 62: [C 60: h1:32^60 61: a:30^61]
//│ [C h1:32^60 a:30^61] --->
//│ 	case xs:27^40 of {C h:28 t:29 => ((add:24^41 i:26^42) (([idxSum:6^31 · idxSum:6^5]:19^44 ((add:24^45 i:26^46) 1)) t:29^51)) | N => 0}
//│ 	case xs:39^82 of {C h:40 t:41 => ((add:24^83 i:38^84) (([idxSum:6^31 · idxSum:6^5]:19^86 ((add:24^87 i:38^88) 1)) t:41^93)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 74: [C 72: h1:36^72 73: a:34^73]
//│ [C h1:36^72 a:34^73] --->
//│ 	case xs:27^40 of {C h:28 t:29 => ((add:24^41 i:26^42) (([idxSum:6^31 · idxSum:6^5]:19^44 ((add:24^45 i:26^46) 1)) t:29^51)) | N => 0}
//│ 	case xs:39^82 of {C h:40 t:41 => ((add:24^83 i:38^84) (([idxSum:6^31 · idxSum:6^5]:19^86 ((add:24^87 i:38^88) 1)) t:41^93)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (([idxSum:6^31]:18^109 0) (([rev:7^34]:16^112 0) a:30^115))
//│ def [idxSum:6^31 · idxSum:6^5]:19 = (fun i:26 -> (fun xs:27 -> xs:27^168))
//│ def [idxSum:6^31]:18 = (fun i:38 -> (fun xs:39 -> xs:39^118))
//│ def [rev:7^34 · rev:7^20]:17 = (fun a:34 -> (fun ys:35 -> case ys:35^142 of {
//│ 	C h1:36 t1:37 => (([rev:7^34 · rev:7^20]:17^143 let h:40 = h1:36^159
//│ 	in let t:41 = a:34^157
//│ 	in ((add:24^144 i:38^145) (([idxSum:6^31 · idxSum:6^5]:19^147 ((add:24^148 i:38^149) 1)) t:41^154))) t1:37^162)
//│ 	| N => a:34^164}))
//│ def [rev:7^34]:16 = (fun a:30 -> (fun ys:31 -> ys:31^121))
//│ def idxSum:6 = (fun i:8 -> (fun xs:9 -> case xs:9^124 of {
//│ 	C h:10 t:11 => ((add:4^125 i:8^126) ((idxSum:6^128 ((add:4^129 i:8^130) 1)) t:11^135))
//│ 	| N => 0}))
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^171 of {
//│ 	C h1:14 t1:15 => ((rev:7^172 [C h1:14^173 a:12^174]) t1:15^177)
//│ 	| N => a:12^179}))
//│ <<<<<<< after fusion <<<<<<<




fun count(xs) = if xs is
    C(h, t) then add(1, count(t))
    N then 0
fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
    N then a
fun init = N
count(rev(N, init))
//│ |#fun| |count|(|xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |add|(|1|,| |count|(|t|)|)|↵|N| |#then| |0|←|↵|#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|↵|N| |#then| |a|←|↵|#fun| |init| |#=| |N|↵|count|(|rev|(|N|,| |init|)|)|
//│ Parsed: {fun count = xs, => if xs is ‹(C (h, t,)) then add (1, count (t,),); (N) then 0›; fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,); (N) then a›; fun init = N; count (rev (N, init,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (count:6^25 ((rev:7^26 [N]) init:8^29))
//│ def count:6 = (fun xs:9 -> case xs:9^1 of {
//│ 	C h:10 t:11 => ((add:4^2 1) (count:6^5 t:11^6))
//│ 	| N => 0})
//│ def init:8 = [N]
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^12 of {
//│ 	C h1:14 t1:15 => ((rev:7^13 [C h1:14^14 a:12^15]) t1:15^18)
//│ 	| N => a:12^20}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(12'h1, 10'a) <: 3'xs
//│ 	[+rev:7^13 · +rev:7^13 · +rev:7^13 · -rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5]  --->  [+rev:7^13 · +rev:7^13 · -rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5]
//│ 	[+rev:7^13 · +rev:7^13 · +rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5]  --->  [+rev:7^13 · +rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5]
//│ NoProd <: 3'xs
//│ 	[+rev:7^26 · -rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5]  --->  [+rev:7^26 · -rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5]
//│ 	[+rev:7^26 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5]  --->  [+rev:7^26 · -rev:7^26 · +count:6^25 · +count:6^5]
//│ NoProd <: 11'ys
//│ 	[-init:8^29 · +rev:7^26 · +rev:7^13 · +rev:7^13]  --->  [-init:8^29 · +rev:7^26 · +rev:7^13]
//│ NoProd <: 5't
//│ 	[+rev:7^26 · +rev:7^13 · +rev:7^13 · -rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5 · +count:6^5]  --->  [+rev:7^26 · +rev:7^13 · +rev:7^13 · -rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5]
//│ 	[+rev:7^26 · +rev:7^13 · +rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5 · +count:6^5]  --->  [+rev:7^26 · +rev:7^13 · +rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5]
//│ 	[+rev:7^26 · +rev:7^13 · -rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5]  --->  [+rev:7^26 · +rev:7^13 · -rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5]
//│ 	[+rev:7^26 · +rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5]  --->  [+rev:7^26 · +rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [count:6^25 · count:6^5 · count:6^5] --> [count:6^25 · count:6^5]
//│ [rev:7^26 · rev:7^13 · rev:7^13] --> [rev:7^26 · rev:7^13]
//│ [init:8^29] --> [init:8^29]
//│ [rev:7^26 · rev:7^13] --> [rev:7^26 · rev:7^13]
//│ [rev:7^26] --> [rev:7^26]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [count:6^25]
//│ 	[count:6^25 · count:6^5]
//│ 		[count:6^25 · count:6^5 · count:6^5] ---> [count:6^25 · count:6^5] (only one)
//│ [init:8^29]
//│ 
//│ [rev:7^26]
//│ 	[rev:7^26 · rev:7^13]
//│ 		[rev:7^26 · rev:7^13 · rev:7^13] ---> [rev:7^26 · rev:7^13] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([count:6^25]:16^79 (([rev:7^26]:18^80 [N]) [init:8^29]:20^83))
//│ def [count:6^25 · count:6^5]:17 = (fun xs:31 -> case xs:31^44 of {
//│ 	C h:32 t:33 => ((add:25^45 1) ([count:6^25 · count:6^5]:17^48 t:33^49))
//│ 	| N => 0})
//│ def [count:6^25]:16 = (fun xs:38 -> case xs:38^68 of {
//│ 	C h:39 t:40 => ((add:25^69 1) ([count:6^25 · count:6^5]:17^72 t:40^73))
//│ 	| N => 0})
//│ def [init:8^29]:20 = [N]
//│ def [rev:7^26 · rev:7^13]:19 = (fun a:27 -> (fun ys:28 -> case ys:28^32 of {
//│ 	C h1:29 t1:30 => (([rev:7^26 · rev:7^13]:19^33 [C h1:29^34 a:27^35]) t1:30^38)
//│ 	| N => a:27^40}))
//│ def [rev:7^26]:18 = (fun a:34 -> (fun ys:35 -> case ys:35^56 of {
//│ 	C h1:36 t1:37 => (([rev:7^26 · rev:7^13]:19^57 [C h1:36^58 a:34^59]) t1:37^62)
//│ 	| N => a:34^64}))
//│ def count:6 = (fun xs:9 -> case xs:9^8 of {
//│ 	C h:10 t:11 => ((add:4^9 1) (count:6^12 t:11^13))
//│ 	| N => 0})
//│ def init:8 = [N]
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^19 of {
//│ 	C h1:14 t1:15 => ((rev:7^20 [C h1:14^21 a:12^22]) t1:15^25)
//│ 	| N => a:12^27}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 36: [C 34: h1:29^34 35: a:27^35]
//│ [C h1:29^34 a:27^35] --->
//│ 	case xs:31^44 of {C h:32 t:33 => ((add:25^45 1) ([count:6^25 · count:6^5]:17^48 t:33^49)) | N => 0}
//│ 	case xs:38^68 of {C h:39 t:40 => ((add:25^69 1) ([count:6^25 · count:6^5]:17^72 t:40^73)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 55: [N]
//│ [N] --->
//│ 	case ys:35^56 of {C h1:36 t1:37 => (([rev:7^26 · rev:7^13]:19^57 [C h1:36^58 a:34^59]) t1:37^62) | N => a:34^64}
//│ 60: [C 58: h1:36^58 59: a:34^59]
//│ [C h1:36^58 a:34^59] --->
//│ 	case xs:31^44 of {C h:32 t:33 => ((add:25^45 1) ([count:6^25 · count:6^5]:17^48 t:33^49)) | N => 0}
//│ 	case xs:38^68 of {C h:39 t:40 => ((add:25^69 1) ([count:6^25 · count:6^5]:17^72 t:40^73)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 81: [N]
//│ [N] --->
//│ 	case xs:31^44 of {C h:32 t:33 => ((add:25^45 1) ([count:6^25 · count:6^5]:17^48 t:33^49)) | N => 0}
//│ 	case xs:38^68 of {C h:39 t:40 => ((add:25^69 1) ([count:6^25 · count:6^5]:17^72 t:40^73)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([count:6^25]:16^86 (([rev:7^26]:18^87 0) [init:8^29]:20^90))
//│ def [count:6^25 · count:6^5]:17 = (fun xs:31 -> case xs:31^141 of {
//│ 	C h:32 t:33 => ((add:25^142 1) ([count:6^25 · count:6^5]:17^145 t:33^146))
//│ 	| N => 0})
//│ def [count:6^25]:16 = (fun xs:38 -> xs:38^139)
//│ def [init:8^29]:20 = a:34^152
//│ def [rev:7^26 · rev:7^13]:19 = (fun a:27 -> (fun ys:28 -> case ys:28^93 of {
//│ 	C h1:29 t1:30 => (([rev:7^26 · rev:7^13]:19^94 let h:39 = h1:29^104
//│ 	in let t:40 = a:27^102
//│ 	in ((add:25^95 1) ([count:6^25 · count:6^5]:17^98 t:40^99))) t1:30^107)
//│ 	| N => a:27^109}))
//│ def [rev:7^26]:18 = (fun a:34 -> (fun ys:35 -> ys:35^113))
//│ def count:6 = (fun xs:9 -> case xs:9^116 of {
//│ 	C h:10 t:11 => ((add:4^117 1) (count:6^120 t:11^121))
//│ 	| N => 0})
//│ def init:8 = [N]
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^127 of {
//│ 	C h1:14 t1:15 => ((rev:7^128 [C h1:14^129 a:12^130]) t1:15^133)
//│ 	| N => a:12^135}))
//│ <<<<<<< after fusion <<<<<<<


fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
    N then a
fun init = C(0, init)
rev(N, init)
//│ |#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|↵|N| |#then| |a|←|↵|#fun| |init| |#=| |C|(|0|,| |init|)|↵|rev|(|N|,| |init|)|
//│ Parsed: {fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,); (N) then a›; fun init = C (0, init,); rev (N, init,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((rev:6^16 [N]) init:7^19)
//│ def init:7 = [C 0 init:7^14]
//│ def rev:6 = (fun a:8 -> (fun ys:9 -> case ys:9^1 of {
//│ 	C h1:10 t1:11 => ((rev:6^2 [C h1:10^3 a:8^4]) t1:11^7)
//│ 	| N => a:8^9}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(Int, 1'init_7^14) <: 3'ys
//│ 	[-init:7^14 · -init:7^14 · -init:7^19 · +rev:6^16 · +rev:6^2 · +rev:6^2]  --->  [-init:7^14 · -init:7^19 · +rev:6^16 · +rev:6^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [rev:6^16 · rev:6^2 · rev:6^2] --> [rev:6^16 · rev:6^2]
//│ [init:7^19 · init:7^14 · init:7^14] --> [init:7^19 · init:7^14]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [init:7^19]
//│ 	[init:7^19 · init:7^14]
//│ 		[init:7^19 · init:7^14 · init:7^14] ---> [init:7^19 · init:7^14] (only one)
//│ [rev:6^16]
//│ 	[rev:6^16 · rev:6^2]
//│ 		[rev:6^16 · rev:6^2 · rev:6^2] ---> [rev:6^16 · rev:6^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([rev:6^16]:12^51 [N]) [init:7^19]:14^54)
//│ def [init:7^19 · init:7^14]:15 = [C 0 [init:7^19 · init:7^14]:15^49]
//│ def [init:7^19]:14 = [C 0 [init:7^19 · init:7^14]:15^46]
//│ def [rev:6^16 · rev:6^2]:13 = (fun a:22 -> (fun ys:23 -> case ys:23^21 of {
//│ 	C h1:24 t1:25 => (([rev:6^16 · rev:6^2]:13^22 [C h1:24^23 a:22^24]) t1:25^27)
//│ 	| N => a:22^29}))
//│ def [rev:6^16]:12 = (fun a:26 -> (fun ys:27 -> case ys:27^33 of {
//│ 	C h1:28 t1:29 => (([rev:6^16 · rev:6^2]:13^34 [C h1:28^35 a:26^36]) t1:29^39)
//│ 	| N => a:26^41}))
//│ def init:7 = [C 0 init:7^19]
//│ def rev:6 = (fun a:8 -> (fun ys:9 -> case ys:9^6 of {
//│ 	C h1:10 t1:11 => ((rev:6^7 [C h1:10^8 a:8^9]) t1:11^12)
//│ 	| N => a:8^14}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 47: [C 45: 0 46: [init:7^19 · init:7^14]:15^46]
//│ [C 0 [init:7^19 · init:7^14]:15^46] --->
//│ 	case ys:27^33 of {C h1:28 t1:29 => (([rev:6^16 · rev:6^2]:13^34 [C h1:28^35 a:26^36]) t1:29^39) | N => a:26^41}
//│ 50: [C 48: 0 49: [init:7^19 · init:7^14]:15^49]
//│ [C 0 [init:7^19 · init:7^14]:15^49] --->
//│ 	case ys:23^21 of {C h1:24 t1:25 => (([rev:6^16 · rev:6^2]:13^22 [C h1:24^23 a:22^24]) t1:25^27) | N => a:22^29}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (([rev:6^16]:12^56 [N]) [init:7^19]:14^59)
//│ def [init:7^19 · init:7^14]:15 = let h1:24 = 0
//│ in let t1:25 = [init:7^19 · init:7^14]:15^68
//│ in (([rev:6^16 · rev:6^2]:13^61 [C h1:24^62 a:22^63]) t1:25^66)
//│ def [init:7^19]:14 = let h1:28 = 0
//│ in let t1:29 = [init:7^19 · init:7^14]:15^94
//│ in (([rev:6^16 · rev:6^2]:13^87 [C h1:28^88 a:26^89]) t1:29^92)
//│ def [rev:6^16 · rev:6^2]:13 = (fun a:22 -> (fun ys:23 -> ys:23^98))
//│ def [rev:6^16]:12 = (fun a:26 -> (fun ys:27 -> ys:27^84))
//│ def init:7 = [C 0 init:7^102]
//│ def rev:6 = (fun a:8 -> (fun ys:9 -> case ys:9^72 of {
//│ 	C h1:10 t1:11 => ((rev:6^73 [C h1:10^74 a:8^75]) t1:11^78)
//│ 	| N => a:8^80}))
//│ <<<<<<< after fusion <<<<<<<

fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
fun init = C(0, init)
rev(N, init)
//│ |#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|←|↵|#fun| |init| |#=| |C|(|0|,| |init|)|↵|rev|(|N|,| |init|)|
//│ Parsed: {fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,)›; fun init = C (0, init,); rev (N, init,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((rev:6^15 [N]) init:7^18)
//│ def init:7 = [C 0 init:7^13]
//│ def rev:6 = (fun a:8 -> (fun ys:9 -> case ys:9^1 of {
//│ 	C h1:10 t1:11 => ((rev:6^2 [C h1:10^3 a:8^4]) t1:11^7)}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(Int, 1'init_7^13) <: 3'ys
//│ 	[-init:7^13 · -init:7^13 · -init:7^18 · +rev:6^15 · +rev:6^2 · +rev:6^2]  --->  [-init:7^13 · -init:7^18 · +rev:6^15 · +rev:6^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [rev:6^15 · rev:6^2 · rev:6^2] --> [rev:6^15 · rev:6^2]
//│ [init:7^18 · init:7^13 · init:7^13] --> [init:7^18 · init:7^13]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [init:7^18]
//│ 	[init:7^18 · init:7^13]
//│ 		[init:7^18 · init:7^13 · init:7^13] ---> [init:7^18 · init:7^13] (only one)
//│ [rev:6^15]
//│ 	[rev:6^15 · rev:6^2]
//│ 		[rev:6^15 · rev:6^2 · rev:6^2] ---> [rev:6^15 · rev:6^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([rev:6^15]:14^48 [N]) [init:7^18]:12^51)
//│ def [init:7^18 · init:7^13]:13 = [C 0 [init:7^18 · init:7^13]:13^32]
//│ def [init:7^18]:12 = [C 0 [init:7^18 · init:7^13]:13^35]
//│ def [rev:6^15 · rev:6^2]:15 = (fun a:22 -> (fun ys:23 -> case ys:23^20 of {
//│ 	C h1:24 t1:25 => (([rev:6^15 · rev:6^2]:15^21 [C h1:24^22 a:22^23]) t1:25^26)}))
//│ def [rev:6^15]:14 = (fun a:26 -> (fun ys:27 -> case ys:27^37 of {
//│ 	C h1:28 t1:29 => (([rev:6^15 · rev:6^2]:15^38 [C h1:28^39 a:26^40]) t1:29^43)}))
//│ def init:7 = [C 0 init:7^18]
//│ def rev:6 = (fun a:8 -> (fun ys:9 -> case ys:9^6 of {
//│ 	C h1:10 t1:11 => ((rev:6^7 [C h1:10^8 a:8^9]) t1:11^12)}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 33: [C 31: 0 32: [init:7^18 · init:7^13]:13^32]
//│ [C 0 [init:7^18 · init:7^13]:13^32] --->
//│ 	case ys:23^20 of {C h1:24 t1:25 => (([rev:6^15 · rev:6^2]:15^21 [C h1:24^22 a:22^23]) t1:25^26)}
//│ 36: [C 34: 0 35: [init:7^18 · init:7^13]:13^35]
//│ [C 0 [init:7^18 · init:7^13]:13^35] --->
//│ 	case ys:27^37 of {C h1:28 t1:29 => (([rev:6^15 · rev:6^2]:15^38 [C h1:28^39 a:26^40]) t1:29^43)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (([rev:6^15]:14^53 [N]) [init:7^18]:12^56)
//│ def [init:7^18 · init:7^13]:13 = let h1:24 = 0
//│ in let t1:25 = [init:7^18 · init:7^13]:13^93
//│ in (([rev:6^15 · rev:6^2]:15^86 [C h1:24^87 a:22^88]) t1:25^91)
//│ def [init:7^18]:12 = let h1:28 = 0
//│ in let t1:29 = [init:7^18 · init:7^13]:13^82
//│ in (([rev:6^15 · rev:6^2]:15^75 [C h1:28^76 a:26^77]) t1:29^80)
//│ def [rev:6^15 · rev:6^2]:15 = (fun a:22 -> (fun ys:23 -> ys:23^61))
//│ def [rev:6^15]:14 = (fun a:26 -> (fun ys:27 -> ys:27^58))
//│ def init:7 = [C 0 init:7^98]
//│ def rev:6 = (fun a:8 -> (fun ys:9 -> case ys:9^64 of {
//│ 	C h1:10 t1:11 => ((rev:6^65 [C h1:10^66 a:8^67]) t1:11^70)}))
//│ <<<<<<< after fusion <<<<<<<

fun c(x) = if x is
    C(a) then c(a)
    N then N
//│ |#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|↵|N| |#then| |N|←|
//│ Parsed: {fun c = x, => if x is ‹(C (a,)) then c (a,); (N) then N›}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def c:6 = (fun x:7 -> case x:7^1 of {
//│ 	C a:8 => (c:6^2 a:8^3)
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ def c:6 = (fun x:7 -> case x:7^1 of {
//│ 	C a:8 => (c:6^2 a:8^3)
//│ 	| N => [N]})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ def c:6 = (fun x:7 -> case x:7^8 of {
//│ 	C a:8 => (c:6^9 a:8^10)
//│ 	| N => [N]})
//│ <<<<<<< after fusion <<<<<<<


fun rev(a, ys) = if ys is
    C(h1, t1) then rev(a, t1)
    N then a
fun rev2(a2, ys2) = if ys2 is
    C(h12, t12) then rev2(a2, t12)
    N then a2
fun init = C(0, init)
fun init2 = C(0, init2)
rev(rev2, init)(1, init2)
//│ |#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|a|,| |t1|)|↵|N| |#then| |a|←|↵|#fun| |rev2|(|a2|,| |ys2|)| |#=| |#if| |ys2| |is|→|C|(|h12|,| |t12|)| |#then| |rev2|(|a2|,| |t12|)|↵|N| |#then| |a2|←|↵|#fun| |init| |#=| |C|(|0|,| |init|)|↵|#fun| |init2| |#=| |C|(|0|,| |init2|)|↵|rev|(|rev2|,| |init|)|(|1|,| |init2|)|
//│ Parsed: {fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (a, t1,); (N) then a›; fun rev2 = a2, ys2, => if ys2 is ‹(C (h12, t12,)) then rev2 (a2, t12,); (N) then a2›; fun init = C (0, init,); fun init2 = C (0, init2,); rev (rev2, init,) (1, init2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((((rev:6^27 rev2:7^28) init:8^30) 1) init2:9^34)
//│ def init:8 = [C 0 init:8^22]
//│ def init2:9 = [C 0 init2:9^25]
//│ def rev:6 = (fun a:10 -> (fun ys:11 -> case ys:11^1 of {
//│ 	C h1:12 t1:13 => ((rev:6^2 a:10^3) t1:13^5)
//│ 	| N => a:10^7}))
//│ def rev2:7 = (fun a2:14 -> (fun ys2:15 -> case ys2:15^11 of {
//│ 	C h12:16 t12:17 => ((rev2:7^12 a2:14^13) t12:17^15)
//│ 	| N => a2:14^17}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(Int, 2'init_8^22) <: 5'ys
//│ 	[-init:8^22 · -init:8^22 · -init:8^30 · +rev:6^27 · +rev:6^2 · +rev:6^2]  --->  [-init:8^22 · -init:8^30 · +rev:6^27 · +rev:6^2]
//│ C(Int, 3'init2_9^25) <: 12'ys2
//│ 	[-init2:9^25 · -init2:9^34 · +rev:6^27 · +rev:6^2 · -rev:6^27 · +rev2:7^28 · +rev2:7^12]  --->  [-init2:9^34 · +rev:6^27 · +rev:6^2 · -rev:6^27 · +rev2:7^28]
//│ 	[-init2:9^25 · -init2:9^34 · +rev:6^27 · -rev:6^27 · +rev2:7^28 · +rev2:7^12]  --->  [-init2:9^34 · +rev:6^27 · -rev:6^27 · +rev2:7^28]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [rev2:7^28 · rev2:7^12] --> [rev2:7^28]
//│ [rev:6^27 · rev:6^2 · rev:6^2] --> [rev:6^27 · rev:6^2]
//│ [init2:9^34 · init2:9^25] --> [init2:9^34]
//│ [init:8^30 · init:8^22 · init:8^22] --> [init:8^30 · init:8^22]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [init2:9^34]
//│ 	[init2:9^34 · init2:9^25] ---> [init2:9^34] (only one)
//│ [init:8^30]
//│ 	[init:8^30 · init:8^22]
//│ 		[init:8^30 · init:8^22 · init:8^22] ---> [init:8^30 · init:8^22] (only one)
//│ [rev2:7^28]
//│ 	[rev2:7^28 · rev2:7^12] ---> [rev2:7^28] (only one)
//│ [rev:6^27]
//│ 	[rev:6^27 · rev:6^2]
//│ 		[rev:6^27 · rev:6^2 · rev:6^2] ---> [rev:6^27 · rev:6^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (((([rev:6^27]:22^75 [rev2:7^28]:20^76) [init:8^30]:18^78) 1) [init2:9^34]:21^82)
//│ def [init2:9^34]:21 = [C 0 [init2:9^34]:21^63]
//│ def [init:8^30 · init:8^22]:19 = [C 0 [init:8^30 · init:8^22]:19^60]
//│ def [init:8^30]:18 = [C 0 [init:8^30 · init:8^22]:19^57]
//│ def [rev2:7^28]:20 = (fun a2:34 -> (fun ys2:35 -> case ys2:35^46 of {
//│ 	C h12:36 t12:37 => (([rev2:7^28]:20^47 a2:34^48) t12:37^50)
//│ 	| N => a2:34^52}))
//│ def [rev:6^27 · rev:6^2]:23 = (fun a:30 -> (fun ys:31 -> case ys:31^36 of {
//│ 	C h1:32 t1:33 => (([rev:6^27 · rev:6^2]:23^37 a:30^38) t1:33^40)
//│ 	| N => a:30^42}))
//│ def [rev:6^27]:22 = (fun a:38 -> (fun ys:39 -> case ys:39^65 of {
//│ 	C h1:40 t1:41 => (([rev:6^27 · rev:6^2]:23^66 a:38^67) t1:41^69)
//│ 	| N => a:38^71}))
//│ def init:8 = [C 0 init:8^31]
//│ def init2:9 = [C 0 init2:9^34]
//│ def rev:6 = (fun a:10 -> (fun ys:11 -> case ys:11^10 of {
//│ 	C h1:12 t1:13 => ((rev:6^11 a:10^12) t1:13^14)
//│ 	| N => a:10^16}))
//│ def rev2:7 = (fun a2:14 -> (fun ys2:15 -> case ys2:15^20 of {
//│ 	C h12:16 t12:17 => ((rev2:7^21 a2:14^22) t12:17^24)
//│ 	| N => a2:14^26}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 58: [C 56: 0 57: [init:8^30 · init:8^22]:19^57]
//│ [C 0 [init:8^30 · init:8^22]:19^57] --->
//│ 	case ys:39^65 of {C h1:40 t1:41 => (([rev:6^27 · rev:6^2]:23^66 a:38^67) t1:41^69) | N => a:38^71}
//│ 61: [C 59: 0 60: [init:8^30 · init:8^22]:19^60]
//│ [C 0 [init:8^30 · init:8^22]:19^60] --->
//│ 	case ys:31^36 of {C h1:32 t1:33 => (([rev:6^27 · rev:6^2]:23^37 a:30^38) t1:33^40) | N => a:30^42}
//│ 64: [C 62: 0 63: [init2:9^34]:21^63]
//│ [C 0 [init2:9^34]:21^63] --->
//│ 	case ys2:35^46 of {C h12:36 t12:37 => (([rev2:7^28]:20^47 a2:34^48) t12:37^50) | N => a2:34^52}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (((([rev:6^27]:22^84 [rev2:7^28]:20^85) [init:8^30]:18^87) 1) [init2:9^34]:21^91)
//│ def [init2:9^34]:21 = let h12:36 = 0
//│ in let t12:37 = [init2:9^34]:21^133
//│ in (([rev2:7^28]:20^128 a2:34^129) t12:37^131)
//│ def [init:8^30 · init:8^22]:19 = let h1:32 = 0
//│ in let t1:33 = [init:8^30 · init:8^22]:19^151
//│ in (([rev:6^27 · rev:6^2]:23^146 a:30^147) t1:33^149)
//│ def [init:8^30]:18 = let h1:40 = 0
//│ in let t1:41 = [init:8^30 · init:8^22]:19^111
//│ in (([rev:6^27 · rev:6^2]:23^106 a:38^107) t1:41^109)
//│ def [rev2:7^28]:20 = (fun a2:34 -> (fun ys2:35 -> ys2:35^140))
//│ def [rev:6^27 · rev:6^2]:23 = (fun a:30 -> (fun ys:31 -> ys:31^137))
//│ def [rev:6^27]:22 = (fun a:38 -> (fun ys:39 -> ys:39^93))
//│ def init:8 = [C 0 init:8^116]
//│ def init2:9 = [C 0 init2:9^144]
//│ def rev:6 = (fun a:10 -> (fun ys:11 -> case ys:11^118 of {
//│ 	C h1:12 t1:13 => ((rev:6^119 a:10^120) t1:13^122)
//│ 	| N => a:10^124}))
//│ def rev2:7 = (fun a2:14 -> (fun ys2:15 -> case ys2:15^96 of {
//│ 	C h12:16 t12:17 => ((rev2:7^97 a2:14^98) t12:17^100)
//│ 	| N => a2:14^102}))
//│ <<<<<<< after fusion <<<<<<<
