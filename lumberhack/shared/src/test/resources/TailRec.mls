:NewParser
:ParseOnly


// Initial program, not immediately fusable:
fun count(c, xs) = if xs is
    C(h, t) then count(add(c, 1), t)
    N then c
fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
    N then a
count(0, rev(N, N))
//│ |#fun| |count|(|c|,| |xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |count|(|add|(|c|,| |1|)|,| |t|)|↵|N| |#then| |c|←|↵|#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|↵|N| |#then| |a|←|↵|count|(|0|,| |rev|(|N|,| |N|)|)|
//│ Parsed: {fun count = c, xs, => if xs is ‹(C (h, t,)) then count (add (c, 1,), t,); (N) then c›; fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,); (N) then a›; count (0, rev (N, N,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((count^27 0) ((rev^30 [N]) [N]))
//│ def count = (fun c:8 -> (fun xs:9 -> case xs:9 of {
//│ 	C h:10 t:11 => ((count^2 ((add:4 c:8) 1)) t:11)
//│ 	| N => c:8}))
//│ def rev = (fun a:12 -> (fun ys:13 -> case ys:13 of {
//│ 	C h1:14 t1:15 => ((rev^16 [C h1:14 a:12]) t1:15)
//│ 	| N => a:12}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C('h1:14, 'a:12) <: 'xs:9
//│ 	[+rev^16 · +rev^16 · +rev^16 · -rev^30 · +count^27 · +count^2 · +count^2]  --->  [+rev^16 · +rev^16 · -rev^30 · +count^27 · +count^2]
//│ 	[+rev^16 · +rev^16 · +rev^16 · -rev^16 · -rev^30 · +count^27 · +count^2 · +count^2]  --->  [+rev^16 · +rev^16 · -rev^16 · -rev^30 · +count^27 · +count^2]
//│ NoProd <: 't:11
//│ 	[+rev^30 · +rev^16 · -rev^30 · +count^27 · +count^2 · +count^2]  --->  [+rev^30 · +rev^16 · -rev^30 · +count^27 · +count^2]
//│ 	[+rev^30 · +rev^16 · +rev^16 · -rev^30 · +count^27 · +count^2 · +count^2 · +count^2]  --->  [+rev^30 · +rev^16 · +rev^16 · -rev^30 · +count^27 · +count^2 · +count^2]
//│ 	[+rev^30 · +rev^16 · -rev^16 · -rev^30 · +count^27 · +count^2 · +count^2]  --->  [+rev^30 · +rev^16 · -rev^16 · -rev^30 · +count^27 · +count^2]
//│ 	[+rev^30 · +rev^16 · +rev^16 · -rev^16 · -rev^30 · +count^27 · +count^2 · +count^2 · +count^2]  --->  [+rev^30 · +rev^16 · +rev^16 · -rev^16 · -rev^30 · +count^27 · +count^2 · +count^2]
//│ NoProd <: 'ys:13
//│ 	[+rev^30 · +rev^16 · +rev^16]  --->  [+rev^30 · +rev^16]
//│ NoProd <: 'xs:9
//│ 	[+rev^30 · -rev^30 · +count^27 · +count^2 · +count^2]  --->  [+rev^30 · -rev^30 · +count^27 · +count^2]
//│ 	[+rev^30 · -rev^16 · -rev^30 · +count^27 · +count^2 · +count^2]  --->  [+rev^30 · -rev^16 · -rev^30 · +count^27 · +count^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [count^27]
//│ 	[count^27 · count^2]
//│ 		[count^27 · count^2 · count^2] ---> [count^27 · count^2] (only one)
//│ [rev^30]
//│ 	[rev^30 · rev^16]
//│ 		[rev^30 · rev^16 · rev^16] ---> [rev^30 · rev^16] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h1 a] --->
//│ 	case xs of {C h t => ((count₁ ((add c) 1)) t) | N => c}
//│ 	case xs of {C h t => ((count₁ ((add c) 1)) t) | N => c}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C h1 a] --->
//│ 	case xs of {C h t => ((count₁ ((add c) 1)) t) | N => c}
//│ 	case xs of {C h t => ((count₁ ((add c) 1)) t) | N => c}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N] --->
//│ 	case xs of {C h t => ((count₁ ((add c) 1)) t) | N => c}
//│ 	case xs of {C h t => ((count₁ ((add c) 1)) t) | N => c}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N] --->
//│ 	case ys of {C h1 t1 => ((rev₁ [C h1 a]) t1) | N => a}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((count₀ 0) ((rev₀ c) a))
//│ def count₀ = 
//│ 	(fun c -> (fun xs -> xs))
//│ 	where
//│ 	def count₁ = 
//│ 		(fun c -> (fun xs -> xs))
//│ def rev₀ = 
//│ 	(fun a -> (fun ys -> ys))
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun a -> (fun ys -> case ys of {
//│ 			C h1 t1 => ((rev₁ 
//│ 				let h = h1
//│ 				in let t = a
//│ 				in ((count₁ ((add c) 1)) t)) t1)
//│ 			| N => a}))
//│ <<<<<<< after fusion <<<<<<<


// Fusablified program:
fun count(xs) = if xs is
    C(h, t) then c => count(t)(add(c, 1))
    N then c => c
fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
    N then a
fun init = N
count(rev(N, init))(0)
//│ |#fun| |count|(|xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |c| |=>| |count|(|t|)|(|add|(|c|,| |1|)|)|↵|N| |#then| |c| |=>| |c|←|↵|#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|↵|N| |#then| |a|←|↵|#fun| |init| |#=| |N|↵|count|(|rev|(|N|,| |init|)|)|(|0|)|
//│ Parsed: {fun count = xs, => if xs is ‹(C (h, t,)) then c, => count (t,) (add (c, 1,),); (N) then c, => c›; fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,); (N) then a›; fun init = N; count (rev (N, init,),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((count^29 ((rev^30 [N]) init^33)) 0)
//│ def count = (fun xs:9 -> case xs:9 of {
//│ 	C h:10 t:11 => (fun c:12 -> ((count^2 t:11) ((add:4 c:12) 1)))
//│ 	| N => (fun c:13 -> c:13)})
//│ def init = [N]
//│ def rev = (fun a:14 -> (fun ys:15 -> case ys:15 of {
//│ 	C h1:16 t1:17 => ((rev^17 [C h1:16 a:14]) t1:17)
//│ 	| N => a:14}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C('h1:16, 'a:14) <: 'xs:9
//│ 	[+rev^17 · +rev^17 · +rev^17 · -rev^30 · +count^29 · +count^2 · +count^2]  --->  [+rev^17 · +rev^17 · -rev^30 · +count^29 · +count^2]
//│ 	[+rev^17 · +rev^17 · +rev^17 · -rev^17 · -rev^30 · +count^29 · +count^2 · +count^2]  --->  [+rev^17 · +rev^17 · -rev^17 · -rev^30 · +count^29 · +count^2]
//│ NoProd <: 't:11
//│ 	[+rev^30 · +rev^17 · -rev^30 · +count^29 · +count^2 · +count^2]  --->  [+rev^30 · +rev^17 · -rev^30 · +count^29 · +count^2]
//│ 	[+rev^30 · +rev^17 · +rev^17 · -rev^30 · +count^29 · +count^2 · +count^2 · +count^2]  --->  [+rev^30 · +rev^17 · +rev^17 · -rev^30 · +count^29 · +count^2 · +count^2]
//│ 	[+rev^30 · +rev^17 · -rev^17 · -rev^30 · +count^29 · +count^2 · +count^2]  --->  [+rev^30 · +rev^17 · -rev^17 · -rev^30 · +count^29 · +count^2]
//│ 	[+rev^30 · +rev^17 · +rev^17 · -rev^17 · -rev^30 · +count^29 · +count^2 · +count^2 · +count^2]  --->  [+rev^30 · +rev^17 · +rev^17 · -rev^17 · -rev^30 · +count^29 · +count^2 · +count^2]
//│ NoProd <: 'xs:9
//│ 	[+rev^30 · -rev^30 · +count^29 · +count^2 · +count^2]  --->  [+rev^30 · -rev^30 · +count^29 · +count^2]
//│ 	[+rev^30 · -rev^17 · -rev^30 · +count^29 · +count^2 · +count^2]  --->  [+rev^30 · -rev^17 · -rev^30 · +count^29 · +count^2]
//│ NoProd <: 'ys:15
//│ 	[-init^33 · +rev^30 · +rev^17 · +rev^17]  --->  [-init^33 · +rev^30 · +rev^17]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [count^29]
//│ 	[count^29 · count^2]
//│ 		[count^29 · count^2 · count^2] ---> [count^29 · count^2] (only one)
//│ [init^33]
//│ [rev^30]
//│ 	[rev^30 · rev^17]
//│ 		[rev^30 · rev^17 · rev^17] ---> [rev^30 · rev^17] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N] --->
//│ 	case ys of {C h1 t1 => ((rev₁ [C h1 a]) t1) | N => a}
//│ [C h1 a] --->
//│ 	case xs of {C h t => (fun c -> ((count₁ t) ((add c) 1))) | N => (fun c -> c)}
//│ 	case xs of {C h t => (fun c -> ((count₁ t) ((add c) 1))) | N => (fun c -> c)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C h1 a] --->
//│ 	case xs of {C h t => (fun c -> ((count₁ t) ((add c) 1))) | N => (fun c -> c)}
//│ 	case xs of {C h t => (fun c -> ((count₁ t) ((add c) 1))) | N => (fun c -> c)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N] --->
//│ 	case xs of {C h t => (fun c -> ((count₁ t) ((add c) 1))) | N => (fun c -> c)}
//│ 	case xs of {C h t => (fun c -> ((count₁ t) ((add c) 1))) | N => (fun c -> c)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((count₀ ((rev₀ (fun c -> c)) init₀)) 0)
//│ def count₀ = 
//│ 	(fun xs -> xs)
//│ 	where
//│ 	def count₁ = 
//│ 		(fun xs -> xs)
//│ def rev₀ = 
//│ 	(fun a -> (fun ys -> ys))
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun a -> (fun ys -> case ys of {
//│ 			C h1 t1 => ((rev₁ 
//│ 				let h = h1
//│ 				in let t = a
//│ 				in (fun c -> ((count₁ t) ((add c) 1)))) t1)
//│ 			| N => a}))
//│ def init₀ = 
//│ 	a
//│ <<<<<<< after fusion <<<<<<<


// FIXME
// Paper example (original)
fun idxSum(i, xs) = if xs is
    C(h, t) then add(i, idxSum(add(i, 1), t))
    N then 0
fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
    N then a
idxSum(0, rev(N, N))
//│ |#fun| |idxSum|(|i|,| |xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |add|(|i|,| |idxSum|(|add|(|i|,| |1|)|,| |t|)|)|↵|N| |#then| |0|←|↵|#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|↵|N| |#then| |a|←|↵|idxSum|(|0|,| |rev|(|N|,| |N|)|)|
//│ Parsed: {fun idxSum = i, xs, => if xs is ‹(C (h, t,)) then add (i, idxSum (add (i, 1,), t,),); (N) then 0›; fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,); (N) then a›; idxSum (0, rev (N, N,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((idxSum^31 0) ((rev^34 [N]) [N]))
//│ def idxSum = (fun i:8 -> (fun xs:9 -> case xs:9 of {
//│ 	C h:10 t:11 => ((add:4 i:8) ((idxSum^5 ((add:4 i:8) 1)) t:11))
//│ 	| N => 0}))
//│ def rev = (fun a:12 -> (fun ys:13 -> case ys:13 of {
//│ 	C h1:14 t1:15 => ((rev^20 [C h1:14 a:12]) t1:15)
//│ 	| N => a:12}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C('h1:14, 'a:12) <: 'xs:9
//│ 	[+rev^20 · +rev^20 · +rev^20 · -rev^34 · +idxSum^31 · +idxSum^5 · +idxSum^5]  --->  [+rev^20 · +rev^20 · -rev^34 · +idxSum^31 · +idxSum^5]
//│ 	[+rev^20 · +rev^20 · +rev^20 · -rev^20 · -rev^34 · +idxSum^31 · +idxSum^5 · +idxSum^5]  --->  [+rev^20 · +rev^20 · -rev^20 · -rev^34 · +idxSum^31 · +idxSum^5]
//│ NoProd <: 't:11
//│ 	[+rev^34 · +rev^20 · -rev^34 · +idxSum^31 · +idxSum^5 · +idxSum^5]  --->  [+rev^34 · +rev^20 · -rev^34 · +idxSum^31 · +idxSum^5]
//│ 	[+rev^34 · +rev^20 · +rev^20 · -rev^34 · +idxSum^31 · +idxSum^5 · +idxSum^5 · +idxSum^5]  --->  [+rev^34 · +rev^20 · +rev^20 · -rev^34 · +idxSum^31 · +idxSum^5 · +idxSum^5]
//│ 	[+rev^34 · +rev^20 · -rev^20 · -rev^34 · +idxSum^31 · +idxSum^5 · +idxSum^5]  --->  [+rev^34 · +rev^20 · -rev^20 · -rev^34 · +idxSum^31 · +idxSum^5]
//│ 	[+rev^34 · +rev^20 · +rev^20 · -rev^20 · -rev^34 · +idxSum^31 · +idxSum^5 · +idxSum^5 · +idxSum^5]  --->  [+rev^34 · +rev^20 · +rev^20 · -rev^20 · -rev^34 · +idxSum^31 · +idxSum^5 · +idxSum^5]
//│ NoProd <: 'xs:9
//│ 	[+rev^34 · -rev^34 · +idxSum^31 · +idxSum^5 · +idxSum^5]  --->  [+rev^34 · -rev^34 · +idxSum^31 · +idxSum^5]
//│ 	[+rev^34 · -rev^20 · -rev^34 · +idxSum^31 · +idxSum^5 · +idxSum^5]  --->  [+rev^34 · -rev^20 · -rev^34 · +idxSum^31 · +idxSum^5]
//│ NoProd <: 'ys:13
//│ 	[+rev^34 · +rev^20 · +rev^20]  --->  [+rev^34 · +rev^20]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [idxSum^31]
//│ 	[idxSum^31 · idxSum^5]
//│ 		[idxSum^31 · idxSum^5 · idxSum^5] ---> [idxSum^31 · idxSum^5] (only one)
//│ [rev^34]
//│ 	[rev^34 · rev^20]
//│ 		[rev^34 · rev^20 · rev^20] ---> [rev^34 · rev^20] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N] --->
//│ 	case xs of {C h t => ((add i) ((idxSum₁ ((add i) 1)) t)) | N => 0}
//│ 	case xs of {C h t => ((add i) ((idxSum₁ ((add i) 1)) t)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N] --->
//│ 	case ys of {C h1 t1 => ((rev₁ [C h1 a]) t1) | N => a}
//│ [C h1 a] --->
//│ 	case xs of {C h t => ((add i) ((idxSum₁ ((add i) 1)) t)) | N => 0}
//│ 	case xs of {C h t => ((add i) ((idxSum₁ ((add i) 1)) t)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C h1 a] --->
//│ 	case xs of {C h t => ((add i) ((idxSum₁ ((add i) 1)) t)) | N => 0}
//│ 	case xs of {C h t => ((add i) ((idxSum₁ ((add i) 1)) t)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((idxSum₀ 0) ((rev₀ 0) a))
//│ def rev₀ = 
//│ 	(fun a -> (fun ys -> ys))
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun a -> (fun ys -> case ys of {
//│ 			C h1 t1 => ((rev₁ 
//│ 				let h = h1
//│ 				in let t = a
//│ 				in ((add i) ((idxSum₁ ((add i) 1)) t))) t1)
//│ 			| N => a}))
//│ def idxSum₀ = 
//│ 	(fun i -> (fun xs -> xs))
//│ 	where
//│ 	def idxSum₁ = 
//│ 		(fun i -> (fun xs -> xs))
//│ <<<<<<< after fusion <<<<<<<




fun count(xs) = if xs is
    C(h, t) then add(1, count(t))
    N then 0
fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
    N then a
fun init = N
count(rev(N, init))
//│ |#fun| |count|(|xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |add|(|1|,| |count|(|t|)|)|↵|N| |#then| |0|←|↵|#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|↵|N| |#then| |a|←|↵|#fun| |init| |#=| |N|↵|count|(|rev|(|N|,| |init|)|)|
//│ Parsed: {fun count = xs, => if xs is ‹(C (h, t,)) then add (1, count (t,),); (N) then 0›; fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,); (N) then a›; fun init = N; count (rev (N, init,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (count^25 ((rev^26 [N]) init^29))
//│ def count = (fun xs:9 -> case xs:9 of {
//│ 	C h:10 t:11 => ((add:4 1) (count^5 t:11))
//│ 	| N => 0})
//│ def init = [N]
//│ def rev = (fun a:12 -> (fun ys:13 -> case ys:13 of {
//│ 	C h1:14 t1:15 => ((rev^13 [C h1:14 a:12]) t1:15)
//│ 	| N => a:12}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C('h1:14, 'a:12) <: 'xs:9
//│ 	[+rev^13 · +rev^13 · +rev^13 · -rev^26 · +count^25 · +count^5 · +count^5]  --->  [+rev^13 · +rev^13 · -rev^26 · +count^25 · +count^5]
//│ 	[+rev^13 · +rev^13 · +rev^13 · -rev^13 · -rev^26 · +count^25 · +count^5 · +count^5]  --->  [+rev^13 · +rev^13 · -rev^13 · -rev^26 · +count^25 · +count^5]
//│ NoProd <: 't:11
//│ 	[+rev^26 · +rev^13 · -rev^26 · +count^25 · +count^5 · +count^5]  --->  [+rev^26 · +rev^13 · -rev^26 · +count^25 · +count^5]
//│ 	[+rev^26 · +rev^13 · +rev^13 · -rev^26 · +count^25 · +count^5 · +count^5 · +count^5]  --->  [+rev^26 · +rev^13 · +rev^13 · -rev^26 · +count^25 · +count^5 · +count^5]
//│ 	[+rev^26 · +rev^13 · -rev^13 · -rev^26 · +count^25 · +count^5 · +count^5]  --->  [+rev^26 · +rev^13 · -rev^13 · -rev^26 · +count^25 · +count^5]
//│ 	[+rev^26 · +rev^13 · +rev^13 · -rev^13 · -rev^26 · +count^25 · +count^5 · +count^5 · +count^5]  --->  [+rev^26 · +rev^13 · +rev^13 · -rev^13 · -rev^26 · +count^25 · +count^5 · +count^5]
//│ NoProd <: 'ys:13
//│ 	[-init^29 · +rev^26 · +rev^13 · +rev^13]  --->  [-init^29 · +rev^26 · +rev^13]
//│ NoProd <: 'xs:9
//│ 	[+rev^26 · -rev^26 · +count^25 · +count^5 · +count^5]  --->  [+rev^26 · -rev^26 · +count^25 · +count^5]
//│ 	[+rev^26 · -rev^13 · -rev^26 · +count^25 · +count^5 · +count^5]  --->  [+rev^26 · -rev^13 · -rev^26 · +count^25 · +count^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [count^25]
//│ 	[count^25 · count^5]
//│ 		[count^25 · count^5 · count^5] ---> [count^25 · count^5] (only one)
//│ [init^29]
//│ [rev^26]
//│ 	[rev^26 · rev^13]
//│ 		[rev^26 · rev^13 · rev^13] ---> [rev^26 · rev^13] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h1 a] --->
//│ 	case xs of {C h t => ((add 1) (count₁ t)) | N => 0}
//│ 	case xs of {C h t => ((add 1) (count₁ t)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N] --->
//│ 	case ys of {C h1 t1 => ((rev₁ [C h1 a]) t1) | N => a}
//│ [C h1 a] --->
//│ 	case xs of {C h t => ((add 1) (count₁ t)) | N => 0}
//│ 	case xs of {C h t => ((add 1) (count₁ t)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N] --->
//│ 	case xs of {C h t => ((add 1) (count₁ t)) | N => 0}
//│ 	case xs of {C h t => ((add 1) (count₁ t)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (count₀ ((rev₀ 0) init₀))
//│ def count₀ = 
//│ 	(fun xs -> xs)
//│ 	where
//│ 	def count₁ = 
//│ 		(fun xs -> case xs of {
//│ 			C h t => ((add 1) (count₁ t))
//│ 			| N => 0})
//│ def rev₀ = 
//│ 	(fun a -> (fun ys -> ys))
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun a -> (fun ys -> case ys of {
//│ 			C h1 t1 => ((rev₁ 
//│ 				let h = h1
//│ 				in let t = a
//│ 				in ((add 1) (count₁ t))) t1)
//│ 			| N => a}))
//│ def init₀ = 
//│ 	a
//│ <<<<<<< after fusion <<<<<<<


fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
    N then a
fun init = C(0, init)
rev(N, init)
//│ |#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|↵|N| |#then| |a|←|↵|#fun| |init| |#=| |C|(|0|,| |init|)|↵|rev|(|N|,| |init|)|
//│ Parsed: {fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,); (N) then a›; fun init = C (0, init,); rev (N, init,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((rev^16 [N]) init^19)
//│ def init = [C 0 init^14]
//│ def rev = (fun a:8 -> (fun ys:9 -> case ys:9 of {
//│ 	C h1:10 t1:11 => ((rev^2 [C h1:10 a:8]) t1:11)
//│ 	| N => a:8}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(Int, 'init:7) <: 'ys:9
//│ 	[-init^14 · -init^14 · -init^19 · +rev^16 · +rev^2 · +rev^2]  --->  [-init^14 · -init^19 · +rev^16 · +rev^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [init^19]
//│ 	[init^19 · init^14]
//│ 		[init^19 · init^14 · init^14] ---> [init^19 · init^14] (only one)
//│ [rev^16]
//│ 	[rev^16 · rev^2]
//│ 		[rev^16 · rev^2 · rev^2] ---> [rev^16 · rev^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 0 init₁] --->
//│ 	case ys of {C h1 t1 => ((rev₁ [C h1 a]) t1) | N => a}
//│ [C 0 init₁] --->
//│ 	case ys of {C h1 t1 => ((rev₁ [C h1 a]) t1) | N => a}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((rev₀ [N]) init₀)
//│ def rev₀ = 
//│ 	(fun a -> (fun ys -> ys))
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun a -> (fun ys -> ys))
//│ def init₀ = 
//│ 	let h1 = 0
//│ 	in let t1 = init₁
//│ 	in ((rev₁ [C h1 a]) t1)
//│ 	where
//│ 	def init₁ = 
//│ 		let h1 = 0
//│ 		in let t1 = init₁
//│ 		in ((rev₁ [C h1 a]) t1)
//│ <<<<<<< after fusion <<<<<<<

fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
fun init = C(0, init)
rev(N, init)
//│ |#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|←|↵|#fun| |init| |#=| |C|(|0|,| |init|)|↵|rev|(|N|,| |init|)|
//│ Parsed: {fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,)›; fun init = C (0, init,); rev (N, init,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((rev^15 [N]) init^18)
//│ def init = [C 0 init^13]
//│ def rev = (fun a:8 -> (fun ys:9 -> case ys:9 of {
//│ 	C h1:10 t1:11 => ((rev^2 [C h1:10 a:8]) t1:11)}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(Int, 'init:7) <: 'ys:9
//│ 	[-init^13 · -init^13 · -init^18 · +rev^15 · +rev^2 · +rev^2]  --->  [-init^13 · -init^18 · +rev^15 · +rev^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [init^18]
//│ 	[init^18 · init^13]
//│ 		[init^18 · init^13 · init^13] ---> [init^18 · init^13] (only one)
//│ [rev^15]
//│ 	[rev^15 · rev^2]
//│ 		[rev^15 · rev^2 · rev^2] ---> [rev^15 · rev^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 0 init₁] --->
//│ 	case ys of {C h1 t1 => ((rev₁ [C h1 a]) t1)}
//│ [C 0 init₁] --->
//│ 	case ys of {C h1 t1 => ((rev₁ [C h1 a]) t1)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((rev₀ [N]) init₀)
//│ def init₀ = 
//│ 	let h1 = 0
//│ 	in let t1 = init₁
//│ 	in ((rev₁ [C h1 a]) t1)
//│ 	where
//│ 	def init₁ = 
//│ 		let h1 = 0
//│ 		in let t1 = init₁
//│ 		in ((rev₁ [C h1 a]) t1)
//│ def rev₀ = 
//│ 	(fun a -> (fun ys -> ys))
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun a -> (fun ys -> ys))
//│ <<<<<<< after fusion <<<<<<<

fun c(x) = if x is
    C(a) then c(a)
    N then N
//│ |#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|↵|N| |#then| |N|←|
//│ Parsed: {fun c = x, => if x is ‹(C (a,)) then c (a,); (N) then N›}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def c = (fun x:7 -> case x:7 of {
//│ 	C a:8 => (c^2 a:8)
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ 
//│ 
//│ <<<<<<< after fusion <<<<<<<


fun rev(a, ys) = if ys is
    C(h1, t1) then rev(a, t1)
    N then a
fun rev2(a2, ys2) = if ys2 is
    C(h12, t12) then rev2(a2, t12)
    N then a2
fun init = C(0, init)
fun init2 = C(0, init2)
rev(rev2, init)(1, init2)
//│ |#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|a|,| |t1|)|↵|N| |#then| |a|←|↵|#fun| |rev2|(|a2|,| |ys2|)| |#=| |#if| |ys2| |is|→|C|(|h12|,| |t12|)| |#then| |rev2|(|a2|,| |t12|)|↵|N| |#then| |a2|←|↵|#fun| |init| |#=| |C|(|0|,| |init|)|↵|#fun| |init2| |#=| |C|(|0|,| |init2|)|↵|rev|(|rev2|,| |init|)|(|1|,| |init2|)|
//│ Parsed: {fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (a, t1,); (N) then a›; fun rev2 = a2, ys2, => if ys2 is ‹(C (h12, t12,)) then rev2 (a2, t12,); (N) then a2›; fun init = C (0, init,); fun init2 = C (0, init2,); rev (rev2, init,) (1, init2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((((rev^27 rev2^28) init^30) 1) init2^34)
//│ def init = [C 0 init^22]
//│ def init2 = [C 0 init2^25]
//│ def rev = (fun a:10 -> (fun ys:11 -> case ys:11 of {
//│ 	C h1:12 t1:13 => ((rev^2 a:10) t1:13)
//│ 	| N => a:10}))
//│ def rev2 = (fun a2:14 -> (fun ys2:15 -> case ys2:15 of {
//│ 	C h12:16 t12:17 => ((rev2^12 a2:14) t12:17)
//│ 	| N => a2:14}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(Int, 'init2:9) <: 'ys2:15
//│ 	[-init2^25 · -init2^34 · +rev^27 · +rev^2 · -rev^27 · +rev2^28 · +rev2^12]  --->  [-init2^34 · +rev^27 · +rev^2 · -rev^27 · +rev2^28]
//│ 	[-init2^25 · -init2^34 · +rev^27 · -rev^27 · +rev2^28 · +rev2^12]  --->  [-init2^34 · +rev^27 · -rev^27 · +rev2^28]
//│ C(Int, 'init:8) <: 'ys:11
//│ 	[-init^22 · -init^22 · -init^30 · +rev^27 · +rev^2 · +rev^2]  --->  [-init^22 · -init^30 · +rev^27 · +rev^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [init2^34]
//│ 	[init2^34 · init2^25] ---> [init2^34] (only one)
//│ [init^30]
//│ 	[init^30 · init^22]
//│ 		[init^30 · init^22 · init^22] ---> [init^30 · init^22] (only one)
//│ [rev2^28]
//│ 	[rev2^28 · rev2^12] ---> [rev2^28] (only one)
//│ [rev^27]
//│ 	[rev^27 · rev^2]
//│ 		[rev^27 · rev^2 · rev^2] ---> [rev^27 · rev^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 0 init₁] --->
//│ 	case ys of {C h1 t1 => ((rev₁ a) t1) | N => a}
//│ [C 0 init₁] --->
//│ 	case ys of {C h1 t1 => ((rev₁ a) t1) | N => a}
//│ [C 0 init2₀] --->
//│ 	case ys2 of {C h12 t12 => ((rev2₀ a2) t12) | N => a2}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((((rev₀ rev2₀) init₀) 1) init2₀)
//│ def init₀ = 
//│ 	let h1 = 0
//│ 	in let t1 = init₁
//│ 	in ((rev₁ a) t1)
//│ 	where
//│ 	def init₁ = 
//│ 		let h1 = 0
//│ 		in let t1 = init₁
//│ 		in ((rev₁ a) t1)
//│ def rev2₀ = 
//│ 	(fun a2 -> (fun ys2 -> ys2))
//│ def init2₀ = 
//│ 	let h12 = 0
//│ 	in let t12 = init2₀
//│ 	in ((rev2₀ a2) t12)
//│ def rev₀ = 
//│ 	(fun a -> (fun ys -> ys))
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun a -> (fun ys -> ys))
//│ <<<<<<< after fusion <<<<<<<
