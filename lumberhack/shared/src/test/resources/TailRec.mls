:NewParser
:ParseOnly


// Initial program, not immediately fusable:
fun count(c, xs) = if xs is
    C(h, t) then count(add(c, 1), t)
    N then c
fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
    N then a
count(0, rev(N, N))
//│ |#fun| |count|(|c|,| |xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |count|(|add|(|c|,| |1|)|,| |t|)|↵|N| |#then| |c|←|↵|#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|↵|N| |#then| |a|←|↵|count|(|0|,| |rev|(|N|,| |N|)|)|
//│ Parsed: {fun count = c, xs, => if xs is ‹(C (h, t,)) then count (add (c, 1,), t,); (N) then c›; fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,); (N) then a›; count (0, rev (N, N,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((count:6^27 0) ((rev:7^30 [N]) [N]))
//│ def count:6 = (fun c:8 -> (fun xs:9 -> case xs:9^1 of {
//│ 	C h:10 t:11 => ((count:6^2 ((add:4^3 c:8^4) 1)) t:11^9)
//│ 	| N => c:8^11}))
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^15 of {
//│ 	C h1:14 t1:15 => ((rev:7^16 [C h1:14^17 a:12^18]) t1:15^21)
//│ 	| N => a:12^23}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(13'h1, 11'a) <: 3'xs
//│ 	[+rev:7^16 · +rev:7^16 · +rev:7^16 · -rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2]  --->  [+rev:7^16 · +rev:7^16 · -rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2]
//│ 	[+rev:7^16 · +rev:7^16 · +rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2]  --->  [+rev:7^16 · +rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2]
//│ NoProd <: 3'xs
//│ 	[+rev:7^30 · -rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · -rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2]
//│ 	[+rev:7^30 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · -rev:7^30 · +count:6^27 · +count:6^2]
//│ NoProd <: 12'ys
//│ 	[+rev:7^30 · +rev:7^16 · +rev:7^16]  --->  [+rev:7^30 · +rev:7^16]
//│ NoProd <: 5't
//│ 	[+rev:7^30 · +rev:7^16 · +rev:7^16 · -rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · +rev:7^16 · +rev:7^16 · -rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2]
//│ 	[+rev:7^30 · +rev:7^16 · +rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · +rev:7^16 · +rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2]
//│ 	[+rev:7^30 · +rev:7^16 · -rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · +rev:7^16 · -rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2]
//│ 	[+rev:7^30 · +rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · +rev:7^16 · -rev:7^30 · +count:6^27 · +count:6^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [count:6^27 · count:6^2 · count:6^2] --> [count:6^27 · count:6^2]
//│ [rev:7^30 · rev:7^16 · rev:7^16] --> [rev:7^30 · rev:7^16]
//│ [rev:7^30 · rev:7^16] --> [rev:7^30 · rev:7^16]
//│ [rev:7^30] --> [rev:7^30]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [count:6^27]
//│ 	[count:6^27 · count:6^2]
//│ 		[count:6^27 · count:6^2 · count:6^2] ---> [count:6^27 · count:6^2] (only one)
//│ [rev:7^30]
//│ 	[rev:7^30 · rev:7^16]
//│ 		[rev:7^30 · rev:7^16 · rev:7^16] ---> [rev:7^30 · rev:7^16] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((count:6^27:16^88 0) ((rev:7^30:18^91 [N]) [N]))
//│ def count:6 = (fun c:8 -> (fun xs:9 -> case xs:9^10 of {
//│ 	C h:10 t:11 => ((count:6^11 ((add:4^12 c:8^13) 1)) t:11^18)
//│ 	| N => c:8^20}))
//│ def count:6^27:16 = (fun c:32 -> (fun xs:33 -> case xs:33^74 of {
//│ 	C h:34 t:35 => ((count:6^27_count:6^2:17^75 ((add:4^76 c:32^77) 1)) t:35^82)
//│ 	| N => c:32^84}))
//│ def count:6^27_count:6^2:17 = (fun c:28 -> (fun xs:29 -> case xs:29^60 of {
//│ 	C h:30 t:31 => ((count:6^27_count:6^2:17^61 ((add:4^62 c:28^63) 1)) t:31^68)
//│ 	| N => c:28^70}))
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^24 of {
//│ 	C h1:14 t1:15 => ((rev:7^25 [C h1:14^26 a:12^27]) t1:15^30)
//│ 	| N => a:12^32}))
//│ def rev:7^30:18 = (fun a:20 -> (fun ys:21 -> case ys:21^36 of {
//│ 	C h1:22 t1:23 => ((rev:7^30_rev:7^16:19^37 [C h1:22^38 a:20^39]) t1:23^42)
//│ 	| N => a:20^44}))
//│ def rev:7^30_rev:7^16:19 = (fun a:24 -> (fun ys:25 -> case ys:25^48 of {
//│ 	C h1:26 t1:27 => ((rev:7^30_rev:7^16:19^49 [C h1:26^50 a:24^51]) t1:27^54)
//│ 	| N => a:24^56}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 40: [C 38: h1:22^38 39: a:20^39]
//│ [C h1:22^38 a:20^39] --->
//│ 	case xs:29^60 of {C h:30 t:31 => ((count:6^27_count:6^2:17^61 ((add:4^62 c:28^63) 1)) t:31^68) | N => c:28^70}
//│ 	case xs:33^74 of {C h:34 t:35 => ((count:6^27_count:6^2:17^75 ((add:4^76 c:32^77) 1)) t:35^82) | N => c:32^84}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 52: [C 50: h1:26^50 51: a:24^51]
//│ [C h1:26^50 a:24^51] --->
//│ 	case xs:29^60 of {C h:30 t:31 => ((count:6^27_count:6^2:17^61 ((add:4^62 c:28^63) 1)) t:31^68) | N => c:28^70}
//│ 	case xs:33^74 of {C h:34 t:35 => ((count:6^27_count:6^2:17^75 ((add:4^76 c:32^77) 1)) t:35^82) | N => c:32^84}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 92: [N]
//│ [N] --->
//│ 	case xs:29^60 of {C h:30 t:31 => ((count:6^27_count:6^2:17^61 ((add:4^62 c:28^63) 1)) t:31^68) | N => c:28^70}
//│ 	case xs:33^74 of {C h:34 t:35 => ((count:6^27_count:6^2:17^75 ((add:4^76 c:32^77) 1)) t:35^82) | N => c:32^84}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 94: [N]
//│ [N] --->
//│ 	case ys:21^36 of {C h1:22 t1:23 => ((rev:7^30_rev:7^16:19^37 [C h1:22^38 a:20^39]) t1:23^42) | N => a:20^44}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((count:6^27:16^97 0) ((rev:7^30:18^100 c:28^101) a:20^103))
//│ def count:6 = (fun c:8 -> (fun xs:9 -> case xs:9^131 of {
//│ 	C h:10 t:11 => ((count:6^132 ((add:4^133 c:8^134) 1)) t:11^139)
//│ 	| N => c:8^141}))
//│ def count:6^27:16 = (fun c:32 -> (fun xs:33 -> xs:33^145))
//│ def count:6^27_count:6^2:17 = (fun c:28 -> (fun xs:29 -> xs:29^160))
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^148 of {
//│ 	C h1:14 t1:15 => ((rev:7^149 [C h1:14^150 a:12^151]) t1:15^154)
//│ 	| N => a:12^156}))
//│ def rev:7^30:18 = (fun a:20 -> (fun ys:21 -> ys:21^128))
//│ def rev:7^30_rev:7^16:19 = (fun a:24 -> (fun ys:25 -> case ys:25^106 of {
//│ 	C h1:26 t1:27 => ((rev:7^30_rev:7^16:19^107 let h:34 = h1:26^119
//│ 	in let t:35 = a:24^117
//│ 	in ((count:6^27_count:6^2:17^108 ((add:4^109 c:32^110) 1)) t:35^115)) t1:27^122)
//│ 	| N => a:24^124}))
//│ <<<<<<< after fusion <<<<<<<


// Fusablified program:
fun count(xs) = if xs is
    C(h, t) then c => count(t)(add(c, 1))
    N then c => c
fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
    N then a
fun init = N
count(rev(N, init))(0)
//│ |#fun| |count|(|xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |c| |=>| |count|(|t|)|(|add|(|c|,| |1|)|)|↵|N| |#then| |c| |=>| |c|←|↵|#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|↵|N| |#then| |a|←|↵|#fun| |init| |#=| |N|↵|count|(|rev|(|N|,| |init|)|)|(|0|)|
//│ Parsed: {fun count = xs, => if xs is ‹(C (h, t,)) then c, => count (t,) (add (c, 1,),); (N) then c, => c›; fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,); (N) then a›; fun init = N; count (rev (N, init,),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((count:6^29 ((rev:7^30 [N]) init:8^33)) 0)
//│ def count:6 = (fun xs:9 -> case xs:9^1 of {
//│ 	C h:10 t:11 => (fun c:12 -> ((count:6^2 t:11^3) ((add:4^5 c:12^6) 1)))
//│ 	| N => (fun c:13 -> c:13^12)})
//│ def init:8 = [N]
//│ def rev:7 = (fun a:14 -> (fun ys:15 -> case ys:15^16 of {
//│ 	C h1:16 t1:17 => ((rev:7^17 [C h1:16^18 a:14^19]) t1:17^22)
//│ 	| N => a:14^24}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(15'h1, 13'a) <: 3'xs
//│ 	[+rev:7^17 · +rev:7^17 · +rev:7^17 · -rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2]  --->  [+rev:7^17 · +rev:7^17 · -rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2]
//│ 	[+rev:7^17 · +rev:7^17 · +rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2]  --->  [+rev:7^17 · +rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2]
//│ NoProd <: 3'xs
//│ 	[+rev:7^30 · -rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · -rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2]
//│ 	[+rev:7^30 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · -rev:7^30 · +count:6^29 · +count:6^2]
//│ NoProd <: 14'ys
//│ 	[-init:8^33 · +rev:7^30 · +rev:7^17 · +rev:7^17]  --->  [-init:8^33 · +rev:7^30 · +rev:7^17]
//│ NoProd <: 5't
//│ 	[+rev:7^30 · +rev:7^17 · +rev:7^17 · -rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · +rev:7^17 · +rev:7^17 · -rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2]
//│ 	[+rev:7^30 · +rev:7^17 · +rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · +rev:7^17 · +rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2]
//│ 	[+rev:7^30 · +rev:7^17 · -rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · +rev:7^17 · -rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2]
//│ 	[+rev:7^30 · +rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2 · +count:6^2]  --->  [+rev:7^30 · +rev:7^17 · -rev:7^30 · +count:6^29 · +count:6^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [count:6^29 · count:6^2 · count:6^2] --> [count:6^29 · count:6^2]
//│ [rev:7^30 · rev:7^17 · rev:7^17] --> [rev:7^30 · rev:7^17]
//│ [init:8^33] --> [init:8^33]
//│ [rev:7^30 · rev:7^17] --> [rev:7^30 · rev:7^17]
//│ [rev:7^30] --> [rev:7^30]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [count:6^29]
//│ 	[count:6^29 · count:6^2]
//│ 		[count:6^29 · count:6^2 · count:6^2] ---> [count:6^29 · count:6^2] (only one)
//│ [init:8^33]
//│ 
//│ [rev:7^30]
//│ 	[rev:7^30 · rev:7^17]
//│ 		[rev:7^30 · rev:7^17 · rev:7^17] ---> [rev:7^30 · rev:7^17] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((count:6^29:18^93 ((rev:7^30:20^94 [N]) init:8^33:22^97)) 0)
//│ def count:6 = (fun xs:9 -> case xs:9^10 of {
//│ 	C h:10 t:11 => (fun c:12 -> ((count:6^11 t:11^12) ((add:4^14 c:12^15) 1)))
//│ 	| N => (fun c:13 -> c:13^21)})
//│ def count:6^29:18 = (fun xs:36 -> case xs:36^78 of {
//│ 	C h:37 t:38 => (fun c:39 -> ((count:6^29_count:6^2:19^79 t:38^80) ((add:4^82 c:39^83) 1)))
//│ 	| N => (fun c:40 -> c:40^89)})
//│ def count:6^29_count:6^2:19 = (fun xs:23 -> case xs:23^39 of {
//│ 	C h:24 t:25 => (fun c:26 -> ((count:6^29_count:6^2:19^40 t:25^41) ((add:4^43 c:26^44) 1)))
//│ 	| N => (fun c:27 -> c:27^50)})
//│ def init:8 = [N]
//│ def init:8^33:22 = [N]
//│ def rev:7 = (fun a:14 -> (fun ys:15 -> case ys:15^25 of {
//│ 	C h1:16 t1:17 => ((rev:7^26 [C h1:16^27 a:14^28]) t1:17^31)
//│ 	| N => a:14^33}))
//│ def rev:7^30:20 = (fun a:28 -> (fun ys:29 -> case ys:29^54 of {
//│ 	C h1:30 t1:31 => ((rev:7^30_rev:7^17:21^55 [C h1:30^56 a:28^57]) t1:31^60)
//│ 	| N => a:28^62}))
//│ def rev:7^30_rev:7^17:21 = (fun a:32 -> (fun ys:33 -> case ys:33^66 of {
//│ 	C h1:34 t1:35 => ((rev:7^30_rev:7^17:21^67 [C h1:34^68 a:32^69]) t1:35^72)
//│ 	| N => a:32^74}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 38: [N]
//│ [N] --->
//│ 	case ys:29^54 of {C h1:30 t1:31 => ((rev:7^30_rev:7^17:21^55 [C h1:30^56 a:28^57]) t1:31^60) | N => a:28^62}
//│ 58: [C 56: h1:30^56 57: a:28^57]
//│ [C h1:30^56 a:28^57] --->
//│ 	case xs:23^39 of {C h:24 t:25 => (fun c:26 -> ((count:6^29_count:6^2:19^40 t:25^41) ((add:4^43 c:26^44) 1))) | N => (fun c:27 -> c:27^50)}
//│ 	case xs:36^78 of {C h:37 t:38 => (fun c:39 -> ((count:6^29_count:6^2:19^79 t:38^80) ((add:4^82 c:39^83) 1))) | N => (fun c:40 -> c:40^89)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 70: [C 68: h1:34^68 69: a:32^69]
//│ [C h1:34^68 a:32^69] --->
//│ 	case xs:23^39 of {C h:24 t:25 => (fun c:26 -> ((count:6^29_count:6^2:19^40 t:25^41) ((add:4^43 c:26^44) 1))) | N => (fun c:27 -> c:27^50)}
//│ 	case xs:36^78 of {C h:37 t:38 => (fun c:39 -> ((count:6^29_count:6^2:19^79 t:38^80) ((add:4^82 c:39^83) 1))) | N => (fun c:40 -> c:40^89)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 95: [N]
//│ [N] --->
//│ 	case xs:23^39 of {C h:24 t:25 => (fun c:26 -> ((count:6^29_count:6^2:19^40 t:25^41) ((add:4^43 c:26^44) 1))) | N => (fun c:27 -> c:27^50)}
//│ 	case xs:36^78 of {C h:37 t:38 => (fun c:39 -> ((count:6^29_count:6^2:19^79 t:38^80) ((add:4^82 c:39^83) 1))) | N => (fun c:40 -> c:40^89)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((count:6^29:18^102 ((rev:7^30:20^103 (fun c:40 -> c:40^104)) init:8^33:22^107)) 0)
//│ def count:6 = (fun xs:9 -> case xs:9^117 of {
//│ 	C h:10 t:11 => (fun c:12 -> ((count:6^118 t:11^119) ((add:4^121 c:12^122) 1)))
//│ 	| N => (fun c:13 -> c:13^128)})
//│ def count:6^29:18 = (fun xs:36 -> xs:36^115)
//│ def count:6^29_count:6^2:19 = (fun xs:23 -> xs:23^133)
//│ def init:8 = [N]
//│ def init:8^33:22 = a:28^147
//│ def rev:7 = (fun a:14 -> (fun ys:15 -> case ys:15^135 of {
//│ 	C h1:16 t1:17 => ((rev:7^136 [C h1:16^137 a:14^138]) t1:17^141)
//│ 	| N => a:14^143}))
//│ def rev:7^30:20 = (fun a:28 -> (fun ys:29 -> ys:29^112))
//│ def rev:7^30_rev:7^17:21 = (fun a:32 -> (fun ys:33 -> case ys:33^148 of {
//│ 	C h1:34 t1:35 => ((rev:7^30_rev:7^17:21^149 let h:37 = h1:34^162
//│ 	in let t:38 = a:32^160
//│ 	in (fun c:39 -> ((count:6^29_count:6^2:19^150 t:38^151) ((add:4^153 c:39^154) 1)))) t1:35^165)
//│ 	| N => a:32^167}))
//│ <<<<<<< after fusion <<<<<<<


// FIXME
// Paper example (original)
fun idxSum(i, xs) = if xs is
    C(h, t) then add(i, idxSum(add(i, 1), t))
    N then 0
fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
    N then a
idxSum(0, rev(N, N))
//│ |#fun| |idxSum|(|i|,| |xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |add|(|i|,| |idxSum|(|add|(|i|,| |1|)|,| |t|)|)|↵|N| |#then| |0|←|↵|#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|↵|N| |#then| |a|←|↵|idxSum|(|0|,| |rev|(|N|,| |N|)|)|
//│ Parsed: {fun idxSum = i, xs, => if xs is ‹(C (h, t,)) then add (i, idxSum (add (i, 1,), t,),); (N) then 0›; fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,); (N) then a›; idxSum (0, rev (N, N,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((idxSum:6^31 0) ((rev:7^34 [N]) [N]))
//│ def idxSum:6 = (fun i:8 -> (fun xs:9 -> case xs:9^1 of {
//│ 	C h:10 t:11 => ((add:4^2 i:8^3) ((idxSum:6^5 ((add:4^6 i:8^7) 1)) t:11^12))
//│ 	| N => 0}))
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^19 of {
//│ 	C h1:14 t1:15 => ((rev:7^20 [C h1:14^21 a:12^22]) t1:15^25)
//│ 	| N => a:12^27}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(15'h1, 13'a) <: 3'xs
//│ 	[+rev:7^20 · +rev:7^20 · +rev:7^20 · -rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5]  --->  [+rev:7^20 · +rev:7^20 · -rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5]
//│ 	[+rev:7^20 · +rev:7^20 · +rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5]  --->  [+rev:7^20 · +rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5]
//│ NoProd <: 3'xs
//│ 	[+rev:7^34 · -rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5]  --->  [+rev:7^34 · -rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5]
//│ 	[+rev:7^34 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5]  --->  [+rev:7^34 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5]
//│ NoProd <: 14'ys
//│ 	[+rev:7^34 · +rev:7^20 · +rev:7^20]  --->  [+rev:7^34 · +rev:7^20]
//│ NoProd <: 5't
//│ 	[+rev:7^34 · +rev:7^20 · +rev:7^20 · -rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5 · +idxSum:6^5]  --->  [+rev:7^34 · +rev:7^20 · +rev:7^20 · -rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5]
//│ 	[+rev:7^34 · +rev:7^20 · +rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5 · +idxSum:6^5]  --->  [+rev:7^34 · +rev:7^20 · +rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5]
//│ 	[+rev:7^34 · +rev:7^20 · -rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5]  --->  [+rev:7^34 · +rev:7^20 · -rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5]
//│ 	[+rev:7^34 · +rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5 · +idxSum:6^5]  --->  [+rev:7^34 · +rev:7^20 · -rev:7^34 · +idxSum:6^31 · +idxSum:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [idxSum:6^31 · idxSum:6^5 · idxSum:6^5] --> [idxSum:6^31 · idxSum:6^5]
//│ [rev:7^34 · rev:7^20 · rev:7^20] --> [rev:7^34 · rev:7^20]
//│ [rev:7^34 · rev:7^20] --> [rev:7^34 · rev:7^20]
//│ [rev:7^34] --> [rev:7^34]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [idxSum:6^31]
//│ 	[idxSum:6^31 · idxSum:6^5]
//│ 		[idxSum:6^31 · idxSum:6^5 · idxSum:6^5] ---> [idxSum:6^31 · idxSum:6^5] (only one)
//│ [rev:7^34]
//│ 	[rev:7^34 · rev:7^20]
//│ 		[rev:7^34 · rev:7^20 · rev:7^20] ---> [rev:7^34 · rev:7^20] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((idxSum:6^31:18^100 0) ((rev:7^34:16^103 [N]) [N]))
//│ def idxSum:6 = (fun i:8 -> (fun xs:9 -> case xs:9^10 of {
//│ 	C h:10 t:11 => ((add:4^11 i:8^12) ((idxSum:6^14 ((add:4^15 i:8^16) 1)) t:11^21))
//│ 	| N => 0}))
//│ def idxSum:6^31:18 = (fun i:32 -> (fun xs:33 -> case xs:33^82 of {
//│ 	C h:34 t:35 => ((add:4^83 i:32^84) ((idxSum:6^31_idxSum:6^5:19^86 ((add:4^87 i:32^88) 1)) t:35^93))
//│ 	| N => 0}))
//│ def idxSum:6^31_idxSum:6^5:19 = (fun i:20 -> (fun xs:21 -> case xs:21^40 of {
//│ 	C h:22 t:23 => ((add:4^41 i:20^42) ((idxSum:6^31_idxSum:6^5:19^44 ((add:4^45 i:20^46) 1)) t:23^51))
//│ 	| N => 0}))
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^28 of {
//│ 	C h1:14 t1:15 => ((rev:7^29 [C h1:14^30 a:12^31]) t1:15^34)
//│ 	| N => a:12^36}))
//│ def rev:7^34:16 = (fun a:24 -> (fun ys:25 -> case ys:25^58 of {
//│ 	C h1:26 t1:27 => ((rev:7^34_rev:7^20:17^59 [C h1:26^60 a:24^61]) t1:27^64)
//│ 	| N => a:24^66}))
//│ def rev:7^34_rev:7^20:17 = (fun a:28 -> (fun ys:29 -> case ys:29^70 of {
//│ 	C h1:30 t1:31 => ((rev:7^34_rev:7^20:17^71 [C h1:30^72 a:28^73]) t1:31^76)
//│ 	| N => a:28^78}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 104: [N]
//│ [N] --->
//│ 	case xs:21^40 of {C h:22 t:23 => ((add:4^41 i:20^42) ((idxSum:6^31_idxSum:6^5:19^44 ((add:4^45 i:20^46) 1)) t:23^51)) | N => 0}
//│ 	case xs:33^82 of {C h:34 t:35 => ((add:4^83 i:32^84) ((idxSum:6^31_idxSum:6^5:19^86 ((add:4^87 i:32^88) 1)) t:35^93)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 106: [N]
//│ [N] --->
//│ 	case ys:25^58 of {C h1:26 t1:27 => ((rev:7^34_rev:7^20:17^59 [C h1:26^60 a:24^61]) t1:27^64) | N => a:24^66}
//│ 62: [C 60: h1:26^60 61: a:24^61]
//│ [C h1:26^60 a:24^61] --->
//│ 	case xs:21^40 of {C h:22 t:23 => ((add:4^41 i:20^42) ((idxSum:6^31_idxSum:6^5:19^44 ((add:4^45 i:20^46) 1)) t:23^51)) | N => 0}
//│ 	case xs:33^82 of {C h:34 t:35 => ((add:4^83 i:32^84) ((idxSum:6^31_idxSum:6^5:19^86 ((add:4^87 i:32^88) 1)) t:35^93)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 74: [C 72: h1:30^72 73: a:28^73]
//│ [C h1:30^72 a:28^73] --->
//│ 	case xs:21^40 of {C h:22 t:23 => ((add:4^41 i:20^42) ((idxSum:6^31_idxSum:6^5:19^44 ((add:4^45 i:20^46) 1)) t:23^51)) | N => 0}
//│ 	case xs:33^82 of {C h:34 t:35 => ((add:4^83 i:32^84) ((idxSum:6^31_idxSum:6^5:19^86 ((add:4^87 i:32^88) 1)) t:35^93)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((idxSum:6^31:18^109 0) ((rev:7^34:16^112 0) a:24^115))
//│ def idxSum:6 = (fun i:8 -> (fun xs:9 -> case xs:9^147 of {
//│ 	C h:10 t:11 => ((add:4^148 i:8^149) ((idxSum:6^151 ((add:4^152 i:8^153) 1)) t:11^158))
//│ 	| N => 0}))
//│ def idxSum:6^31:18 = (fun i:32 -> (fun xs:33 -> xs:33^180))
//│ def idxSum:6^31_idxSum:6^5:19 = (fun i:20 -> (fun xs:21 -> xs:21^177))
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^165 of {
//│ 	C h1:14 t1:15 => ((rev:7^166 [C h1:14^167 a:12^168]) t1:15^171)
//│ 	| N => a:12^173}))
//│ def rev:7^34:16 = (fun a:24 -> (fun ys:25 -> ys:25^118))
//│ def rev:7^34_rev:7^20:17 = (fun a:28 -> (fun ys:29 -> case ys:29^121 of {
//│ 	C h1:30 t1:31 => ((rev:7^34_rev:7^20:17^122 let h:34 = h1:30^138
//│ 	in let t:35 = a:28^136
//│ 	in ((add:4^123 i:32^124) ((idxSum:6^31_idxSum:6^5:19^126 ((add:4^127 i:32^128) 1)) t:35^133))) t1:31^141)
//│ 	| N => a:28^143}))
//│ <<<<<<< after fusion <<<<<<<




fun count(xs) = if xs is
    C(h, t) then add(1, count(t))
    N then 0
fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
    N then a
fun init = N
count(rev(N, init))
//│ |#fun| |count|(|xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |add|(|1|,| |count|(|t|)|)|↵|N| |#then| |0|←|↵|#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|↵|N| |#then| |a|←|↵|#fun| |init| |#=| |N|↵|count|(|rev|(|N|,| |init|)|)|
//│ Parsed: {fun count = xs, => if xs is ‹(C (h, t,)) then add (1, count (t,),); (N) then 0›; fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,); (N) then a›; fun init = N; count (rev (N, init,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (count:6^25 ((rev:7^26 [N]) init:8^29))
//│ def count:6 = (fun xs:9 -> case xs:9^1 of {
//│ 	C h:10 t:11 => ((add:4^2 1) (count:6^5 t:11^6))
//│ 	| N => 0})
//│ def init:8 = [N]
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^12 of {
//│ 	C h1:14 t1:15 => ((rev:7^13 [C h1:14^14 a:12^15]) t1:15^18)
//│ 	| N => a:12^20}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(12'h1, 10'a) <: 3'xs
//│ 	[+rev:7^13 · +rev:7^13 · +rev:7^13 · -rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5]  --->  [+rev:7^13 · +rev:7^13 · -rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5]
//│ 	[+rev:7^13 · +rev:7^13 · +rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5]  --->  [+rev:7^13 · +rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5]
//│ NoProd <: 3'xs
//│ 	[+rev:7^26 · -rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5]  --->  [+rev:7^26 · -rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5]
//│ 	[+rev:7^26 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5]  --->  [+rev:7^26 · -rev:7^26 · +count:6^25 · +count:6^5]
//│ NoProd <: 11'ys
//│ 	[-init:8^29 · +rev:7^26 · +rev:7^13 · +rev:7^13]  --->  [-init:8^29 · +rev:7^26 · +rev:7^13]
//│ NoProd <: 5't
//│ 	[+rev:7^26 · +rev:7^13 · +rev:7^13 · -rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5 · +count:6^5]  --->  [+rev:7^26 · +rev:7^13 · +rev:7^13 · -rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5]
//│ 	[+rev:7^26 · +rev:7^13 · +rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5 · +count:6^5]  --->  [+rev:7^26 · +rev:7^13 · +rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5]
//│ 	[+rev:7^26 · +rev:7^13 · -rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5]  --->  [+rev:7^26 · +rev:7^13 · -rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5]
//│ 	[+rev:7^26 · +rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5 · +count:6^5]  --->  [+rev:7^26 · +rev:7^13 · -rev:7^26 · +count:6^25 · +count:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [count:6^25 · count:6^5 · count:6^5] --> [count:6^25 · count:6^5]
//│ [rev:7^26 · rev:7^13 · rev:7^13] --> [rev:7^26 · rev:7^13]
//│ [init:8^29] --> [init:8^29]
//│ [rev:7^26 · rev:7^13] --> [rev:7^26 · rev:7^13]
//│ [rev:7^26] --> [rev:7^26]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [count:6^25]
//│ 	[count:6^25 · count:6^5]
//│ 		[count:6^25 · count:6^5 · count:6^5] ---> [count:6^25 · count:6^5] (only one)
//│ [init:8^29]
//│ 
//│ [rev:7^26]
//│ 	[rev:7^26 · rev:7^13]
//│ 		[rev:7^26 · rev:7^13 · rev:7^13] ---> [rev:7^26 · rev:7^13] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (count:6^25:16^79 ((rev:7^26:18^80 [N]) init:8^29:20^83))
//│ def count:6 = (fun xs:9 -> case xs:9^8 of {
//│ 	C h:10 t:11 => ((add:4^9 1) (count:6^12 t:11^13))
//│ 	| N => 0})
//│ def count:6^25:16 = (fun xs:32 -> case xs:32^68 of {
//│ 	C h:33 t:34 => ((add:4^69 1) (count:6^25_count:6^5:17^72 t:34^73))
//│ 	| N => 0})
//│ def count:6^25_count:6^5:17 = (fun xs:25 -> case xs:25^44 of {
//│ 	C h:26 t:27 => ((add:4^45 1) (count:6^25_count:6^5:17^48 t:27^49))
//│ 	| N => 0})
//│ def init:8 = [N]
//│ def init:8^29:20 = [N]
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^19 of {
//│ 	C h1:14 t1:15 => ((rev:7^20 [C h1:14^21 a:12^22]) t1:15^25)
//│ 	| N => a:12^27}))
//│ def rev:7^26:18 = (fun a:28 -> (fun ys:29 -> case ys:29^56 of {
//│ 	C h1:30 t1:31 => ((rev:7^26_rev:7^13:19^57 [C h1:30^58 a:28^59]) t1:31^62)
//│ 	| N => a:28^64}))
//│ def rev:7^26_rev:7^13:19 = (fun a:21 -> (fun ys:22 -> case ys:22^32 of {
//│ 	C h1:23 t1:24 => ((rev:7^26_rev:7^13:19^33 [C h1:23^34 a:21^35]) t1:24^38)
//│ 	| N => a:21^40}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 36: [C 34: h1:23^34 35: a:21^35]
//│ [C h1:23^34 a:21^35] --->
//│ 	case xs:25^44 of {C h:26 t:27 => ((add:4^45 1) (count:6^25_count:6^5:17^48 t:27^49)) | N => 0}
//│ 	case xs:32^68 of {C h:33 t:34 => ((add:4^69 1) (count:6^25_count:6^5:17^72 t:34^73)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 55: [N]
//│ [N] --->
//│ 	case ys:29^56 of {C h1:30 t1:31 => ((rev:7^26_rev:7^13:19^57 [C h1:30^58 a:28^59]) t1:31^62) | N => a:28^64}
//│ 60: [C 58: h1:30^58 59: a:28^59]
//│ [C h1:30^58 a:28^59] --->
//│ 	case xs:25^44 of {C h:26 t:27 => ((add:4^45 1) (count:6^25_count:6^5:17^48 t:27^49)) | N => 0}
//│ 	case xs:32^68 of {C h:33 t:34 => ((add:4^69 1) (count:6^25_count:6^5:17^72 t:34^73)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 81: [N]
//│ [N] --->
//│ 	case xs:25^44 of {C h:26 t:27 => ((add:4^45 1) (count:6^25_count:6^5:17^48 t:27^49)) | N => 0}
//│ 	case xs:32^68 of {C h:33 t:34 => ((add:4^69 1) (count:6^25_count:6^5:17^72 t:34^73)) | N => 0}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (count:6^25:16^86 ((rev:7^26:18^87 0) init:8^29:20^90))
//│ def count:6 = (fun xs:9 -> case xs:9^106 of {
//│ 	C h:10 t:11 => ((add:4^107 1) (count:6^110 t:11^111))
//│ 	| N => 0})
//│ def count:6^25:16 = (fun xs:32 -> xs:32^93)
//│ def count:6^25_count:6^5:17 = (fun xs:25 -> case xs:25^95 of {
//│ 	C h:26 t:27 => ((add:4^96 1) (count:6^25_count:6^5:17^99 t:27^100))
//│ 	| N => 0})
//│ def init:8 = [N]
//│ def init:8^29:20 = a:28^153
//│ def rev:7 = (fun a:12 -> (fun ys:13 -> case ys:13^138 of {
//│ 	C h1:14 t1:15 => ((rev:7^139 [C h1:14^140 a:12^141]) t1:15^144)
//│ 	| N => a:12^146}))
//│ def rev:7^26:18 = (fun a:28 -> (fun ys:29 -> ys:29^150))
//│ def rev:7^26_rev:7^13:19 = (fun a:21 -> (fun ys:22 -> case ys:22^118 of {
//│ 	C h1:23 t1:24 => ((rev:7^26_rev:7^13:19^119 let h:33 = h1:23^129
//│ 	in let t:34 = a:21^127
//│ 	in ((add:4^120 1) (count:6^25_count:6^5:17^123 t:34^124))) t1:24^132)
//│ 	| N => a:21^134}))
//│ <<<<<<< after fusion <<<<<<<


fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
    N then a
fun init = C(0, init)
rev(N, init)
//│ |#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|↵|N| |#then| |a|←|↵|#fun| |init| |#=| |C|(|0|,| |init|)|↵|rev|(|N|,| |init|)|
//│ Parsed: {fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,); (N) then a›; fun init = C (0, init,); rev (N, init,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((rev:6^16 [N]) init:7^19)
//│ def init:7 = [C 0 init:7^14]
//│ def rev:6 = (fun a:8 -> (fun ys:9 -> case ys:9^1 of {
//│ 	C h1:10 t1:11 => ((rev:6^2 [C h1:10^3 a:8^4]) t1:11^7)
//│ 	| N => a:8^9}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(Int, 1'init_7^14) <: 3'ys
//│ 	[-init:7^14 · -init:7^14 · -init:7^19 · +rev:6^16 · +rev:6^2 · +rev:6^2]  --->  [-init:7^14 · -init:7^19 · +rev:6^16 · +rev:6^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [rev:6^16 · rev:6^2 · rev:6^2] --> [rev:6^16 · rev:6^2]
//│ [init:7^19 · init:7^14 · init:7^14] --> [init:7^19 · init:7^14]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [init:7^19]
//│ 	[init:7^19 · init:7^14]
//│ 		[init:7^19 · init:7^14 · init:7^14] ---> [init:7^19 · init:7^14] (only one)
//│ [rev:6^16]
//│ 	[rev:6^16 · rev:6^2]
//│ 		[rev:6^16 · rev:6^2 · rev:6^2] ---> [rev:6^16 · rev:6^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((rev:6^16:12^51 [N]) init:7^19:14^54)
//│ def init:7 = [C 0 init:7^19]
//│ def init:7^19:14 = [C 0 init:7^19_init:7^14:15^46]
//│ def init:7^19_init:7^14:15 = [C 0 init:7^19_init:7^14:15^49]
//│ def rev:6 = (fun a:8 -> (fun ys:9 -> case ys:9^6 of {
//│ 	C h1:10 t1:11 => ((rev:6^7 [C h1:10^8 a:8^9]) t1:11^12)
//│ 	| N => a:8^14}))
//│ def rev:6^16:12 = (fun a:20 -> (fun ys:21 -> case ys:21^33 of {
//│ 	C h1:22 t1:23 => ((rev:6^16_rev:6^2:13^34 [C h1:22^35 a:20^36]) t1:23^39)
//│ 	| N => a:20^41}))
//│ def rev:6^16_rev:6^2:13 = (fun a:16 -> (fun ys:17 -> case ys:17^21 of {
//│ 	C h1:18 t1:19 => ((rev:6^16_rev:6^2:13^22 [C h1:18^23 a:16^24]) t1:19^27)
//│ 	| N => a:16^29}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 47: [C 45: 0 46: init:7^19_init:7^14:15^46]
//│ [C 0 init:7^19_init:7^14:15^46] --->
//│ 	case ys:21^33 of {C h1:22 t1:23 => ((rev:6^16_rev:6^2:13^34 [C h1:22^35 a:20^36]) t1:23^39) | N => a:20^41}
//│ 50: [C 48: 0 49: init:7^19_init:7^14:15^49]
//│ [C 0 init:7^19_init:7^14:15^49] --->
//│ 	case ys:17^21 of {C h1:18 t1:19 => ((rev:6^16_rev:6^2:13^22 [C h1:18^23 a:16^24]) t1:19^27) | N => a:16^29}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((rev:6^16:12^56 [N]) init:7^19:14^59)
//│ def init:7 = [C 0 init:7^99]
//│ def init:7^19:14 = let h1:22 = 0
//│ in let t1:23 = init:7^19_init:7^14:15^68
//│ in ((rev:6^16_rev:6^2:13^61 [C h1:22^62 a:20^63]) t1:23^66)
//│ def init:7^19_init:7^14:15 = let h1:18 = 0
//│ in let t1:19 = init:7^19_init:7^14:15^94
//│ in ((rev:6^16_rev:6^2:13^87 [C h1:18^88 a:16^89]) t1:19^92)
//│ def rev:6 = (fun a:8 -> (fun ys:9 -> case ys:9^72 of {
//│ 	C h1:10 t1:11 => ((rev:6^73 [C h1:10^74 a:8^75]) t1:11^78)
//│ 	| N => a:8^80}))
//│ def rev:6^16:12 = (fun a:20 -> (fun ys:21 -> ys:21^84))
//│ def rev:6^16_rev:6^2:13 = (fun a:16 -> (fun ys:17 -> ys:17^101))
//│ <<<<<<< after fusion <<<<<<<

fun rev(a, ys) = if ys is
    C(h1, t1) then rev(C(h1, a), t1)
fun init = C(0, init)
rev(N, init)
//│ |#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|C|(|h1|,| |a|)|,| |t1|)|←|↵|#fun| |init| |#=| |C|(|0|,| |init|)|↵|rev|(|N|,| |init|)|
//│ Parsed: {fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (C (h1, a,), t1,)›; fun init = C (0, init,); rev (N, init,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((rev:6^15 [N]) init:7^18)
//│ def init:7 = [C 0 init:7^13]
//│ def rev:6 = (fun a:8 -> (fun ys:9 -> case ys:9^1 of {
//│ 	C h1:10 t1:11 => ((rev:6^2 [C h1:10^3 a:8^4]) t1:11^7)}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(Int, 1'init_7^13) <: 3'ys
//│ 	[-init:7^13 · -init:7^13 · -init:7^18 · +rev:6^15 · +rev:6^2 · +rev:6^2]  --->  [-init:7^13 · -init:7^18 · +rev:6^15 · +rev:6^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [rev:6^15 · rev:6^2 · rev:6^2] --> [rev:6^15 · rev:6^2]
//│ [init:7^18 · init:7^13 · init:7^13] --> [init:7^18 · init:7^13]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [init:7^18]
//│ 	[init:7^18 · init:7^13]
//│ 		[init:7^18 · init:7^13 · init:7^13] ---> [init:7^18 · init:7^13] (only one)
//│ [rev:6^15]
//│ 	[rev:6^15 · rev:6^2]
//│ 		[rev:6^15 · rev:6^2 · rev:6^2] ---> [rev:6^15 · rev:6^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((rev:6^15:14^48 [N]) init:7^18:12^51)
//│ def init:7 = [C 0 init:7^18]
//│ def init:7^18:12 = [C 0 init:7^18_init:7^13:13^35]
//│ def init:7^18_init:7^13:13 = [C 0 init:7^18_init:7^13:13^32]
//│ def rev:6 = (fun a:8 -> (fun ys:9 -> case ys:9^6 of {
//│ 	C h1:10 t1:11 => ((rev:6^7 [C h1:10^8 a:8^9]) t1:11^12)}))
//│ def rev:6^15:14 = (fun a:20 -> (fun ys:21 -> case ys:21^37 of {
//│ 	C h1:22 t1:23 => ((rev:6^15_rev:6^2:15^38 [C h1:22^39 a:20^40]) t1:23^43)}))
//│ def rev:6^15_rev:6^2:15 = (fun a:16 -> (fun ys:17 -> case ys:17^20 of {
//│ 	C h1:18 t1:19 => ((rev:6^15_rev:6^2:15^21 [C h1:18^22 a:16^23]) t1:19^26)}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 33: [C 31: 0 32: init:7^18_init:7^13:13^32]
//│ [C 0 init:7^18_init:7^13:13^32] --->
//│ 	case ys:17^20 of {C h1:18 t1:19 => ((rev:6^15_rev:6^2:15^21 [C h1:18^22 a:16^23]) t1:19^26)}
//│ 36: [C 34: 0 35: init:7^18_init:7^13:13^35]
//│ [C 0 init:7^18_init:7^13:13^35] --->
//│ 	case ys:21^37 of {C h1:22 t1:23 => ((rev:6^15_rev:6^2:15^38 [C h1:22^39 a:20^40]) t1:23^43)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((rev:6^15:14^53 [N]) init:7^18:12^56)
//│ def init:7 = [C 0 init:7^98]
//│ def init:7^18:12 = let h1:22 = 0
//│ in let t1:23 = init:7^18_init:7^13:13^65
//│ in ((rev:6^15_rev:6^2:15^58 [C h1:22^59 a:20^60]) t1:23^63)
//│ def init:7^18_init:7^13:13 = let h1:18 = 0
//│ in let t1:19 = init:7^18_init:7^13:13^76
//│ in ((rev:6^15_rev:6^2:15^69 [C h1:18^70 a:16^71]) t1:19^74)
//│ def rev:6 = (fun a:8 -> (fun ys:9 -> case ys:9^86 of {
//│ 	C h1:10 t1:11 => ((rev:6^87 [C h1:10^88 a:8^89]) t1:11^92)}))
//│ def rev:6^15:14 = (fun a:20 -> (fun ys:21 -> ys:21^83))
//│ def rev:6^15_rev:6^2:15 = (fun a:16 -> (fun ys:17 -> ys:17^80))
//│ <<<<<<< after fusion <<<<<<<

fun c(x) = if x is
    C(a) then c(a)
    N then N
//│ |#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|↵|N| |#then| |N|←|
//│ Parsed: {fun c = x, => if x is ‹(C (a,)) then c (a,); (N) then N›}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def c:6 = (fun x:7 -> case x:7^1 of {
//│ 	C a:8 => (c:6^2 a:8^3)
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ def c:6 = (fun x:7 -> case x:7^1 of {
//│ 	C a:8 => (c:6^2 a:8^3)
//│ 	| N => [N]})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ def c:6 = (fun x:7 -> case x:7^8 of {
//│ 	C a:8 => (c:6^9 a:8^10)
//│ 	| N => [N]})
//│ <<<<<<< after fusion <<<<<<<


fun rev(a, ys) = if ys is
    C(h1, t1) then rev(a, t1)
    N then a
fun rev2(a2, ys2) = if ys2 is
    C(h12, t12) then rev2(a2, t12)
    N then a2
fun init = C(0, init)
fun init2 = C(0, init2)
rev(rev2, init)(1, init2)
//│ |#fun| |rev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h1|,| |t1|)| |#then| |rev|(|a|,| |t1|)|↵|N| |#then| |a|←|↵|#fun| |rev2|(|a2|,| |ys2|)| |#=| |#if| |ys2| |is|→|C|(|h12|,| |t12|)| |#then| |rev2|(|a2|,| |t12|)|↵|N| |#then| |a2|←|↵|#fun| |init| |#=| |C|(|0|,| |init|)|↵|#fun| |init2| |#=| |C|(|0|,| |init2|)|↵|rev|(|rev2|,| |init|)|(|1|,| |init2|)|
//│ Parsed: {fun rev = a, ys, => if ys is ‹(C (h1, t1,)) then rev (a, t1,); (N) then a›; fun rev2 = a2, ys2, => if ys2 is ‹(C (h12, t12,)) then rev2 (a2, t12,); (N) then a2›; fun init = C (0, init,); fun init2 = C (0, init2,); rev (rev2, init,) (1, init2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((((rev:6^27 rev2:7^28) init:8^30) 1) init2:9^34)
//│ def init:8 = [C 0 init:8^22]
//│ def init2:9 = [C 0 init2:9^25]
//│ def rev:6 = (fun a:10 -> (fun ys:11 -> case ys:11^1 of {
//│ 	C h1:12 t1:13 => ((rev:6^2 a:10^3) t1:13^5)
//│ 	| N => a:10^7}))
//│ def rev2:7 = (fun a2:14 -> (fun ys2:15 -> case ys2:15^11 of {
//│ 	C h12:16 t12:17 => ((rev2:7^12 a2:14^13) t12:17^15)
//│ 	| N => a2:14^17}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(Int, 2'init_8^22) <: 5'ys
//│ 	[-init:8^22 · -init:8^22 · -init:8^30 · +rev:6^27 · +rev:6^2 · +rev:6^2]  --->  [-init:8^22 · -init:8^30 · +rev:6^27 · +rev:6^2]
//│ C(Int, 3'init2_9^25) <: 12'ys2
//│ 	[-init2:9^25 · -init2:9^34 · +rev:6^27 · +rev:6^2 · -rev:6^27 · +rev2:7^28 · +rev2:7^12]  --->  [-init2:9^34 · +rev:6^27 · +rev:6^2 · -rev:6^27 · +rev2:7^28]
//│ 	[-init2:9^25 · -init2:9^34 · +rev:6^27 · -rev:6^27 · +rev2:7^28 · +rev2:7^12]  --->  [-init2:9^34 · +rev:6^27 · -rev:6^27 · +rev2:7^28]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [rev2:7^28 · rev2:7^12] --> [rev2:7^28]
//│ [rev:6^27 · rev:6^2 · rev:6^2] --> [rev:6^27 · rev:6^2]
//│ [init2:9^34 · init2:9^25] --> [init2:9^34]
//│ [init:8^30 · init:8^22 · init:8^22] --> [init:8^30 · init:8^22]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [init2:9^34]
//│ 	[init2:9^34 · init2:9^25] ---> [init2:9^34] (only one)
//│ [init:8^30]
//│ 	[init:8^30 · init:8^22]
//│ 		[init:8^30 · init:8^22 · init:8^22] ---> [init:8^30 · init:8^22] (only one)
//│ [rev2:7^28]
//│ 	[rev2:7^28 · rev2:7^12] ---> [rev2:7^28] (only one)
//│ [rev:6^27]
//│ 	[rev:6^27 · rev:6^2]
//│ 		[rev:6^27 · rev:6^2 · rev:6^2] ---> [rev:6^27 · rev:6^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((((rev:6^27:22^75 rev2:7^28:20^76) init:8^30:18^78) 1) init2:9^34:21^82)
//│ def init:8 = [C 0 init:8^31]
//│ def init2:9 = [C 0 init2:9^34]
//│ def init2:9^34:21 = [C 0 init2:9^34:21^63]
//│ def init:8^30:18 = [C 0 init:8^30_init:8^22:19^57]
//│ def init:8^30_init:8^22:19 = [C 0 init:8^30_init:8^22:19^60]
//│ def rev:6 = (fun a:10 -> (fun ys:11 -> case ys:11^10 of {
//│ 	C h1:12 t1:13 => ((rev:6^11 a:10^12) t1:13^14)
//│ 	| N => a:10^16}))
//│ def rev2:7 = (fun a2:14 -> (fun ys2:15 -> case ys2:15^20 of {
//│ 	C h12:16 t12:17 => ((rev2:7^21 a2:14^22) t12:17^24)
//│ 	| N => a2:14^26}))
//│ def rev2:7^28:20 = (fun a2:28 -> (fun ys2:29 -> case ys2:29^46 of {
//│ 	C h12:30 t12:31 => ((rev2:7^28:20^47 a2:28^48) t12:31^50)
//│ 	| N => a2:28^52}))
//│ def rev:6^27:22 = (fun a:32 -> (fun ys:33 -> case ys:33^65 of {
//│ 	C h1:34 t1:35 => ((rev:6^27_rev:6^2:23^66 a:32^67) t1:35^69)
//│ 	| N => a:32^71}))
//│ def rev:6^27_rev:6^2:23 = (fun a:24 -> (fun ys:25 -> case ys:25^36 of {
//│ 	C h1:26 t1:27 => ((rev:6^27_rev:6^2:23^37 a:24^38) t1:27^40)
//│ 	| N => a:24^42}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 58: [C 56: 0 57: init:8^30_init:8^22:19^57]
//│ [C 0 init:8^30_init:8^22:19^57] --->
//│ 	case ys:33^65 of {C h1:34 t1:35 => ((rev:6^27_rev:6^2:23^66 a:32^67) t1:35^69) | N => a:32^71}
//│ 61: [C 59: 0 60: init:8^30_init:8^22:19^60]
//│ [C 0 init:8^30_init:8^22:19^60] --->
//│ 	case ys:25^36 of {C h1:26 t1:27 => ((rev:6^27_rev:6^2:23^37 a:24^38) t1:27^40) | N => a:24^42}
//│ 64: [C 62: 0 63: init2:9^34:21^63]
//│ [C 0 init2:9^34:21^63] --->
//│ 	case ys2:29^46 of {C h12:30 t12:31 => ((rev2:7^28:20^47 a2:28^48) t12:31^50) | N => a2:28^52}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((((rev:6^27:22^84 rev2:7^28:20^85) init:8^30:18^87) 1) init2:9^34:21^91)
//│ def init:8 = [C 0 init:8^100]
//│ def init2:9 = [C 0 init2:9^116]
//│ def init2:9^34:21 = let h12:30 = 0
//│ in let t12:31 = init2:9^34:21^142
//│ in ((rev2:7^28:20^137 a2:28^138) t12:31^140)
//│ def init:8^30:18 = let h1:34 = 0
//│ in let t1:35 = init:8^30_init:8^22:19^151
//│ in ((rev:6^27_rev:6^2:23^146 a:32^147) t1:35^149)
//│ def init:8^30_init:8^22:19 = let h1:26 = 0
//│ in let t1:27 = init:8^30_init:8^22:19^123
//│ in ((rev:6^27_rev:6^2:23^118 a:24^119) t1:27^121)
//│ def rev:6 = (fun a:10 -> (fun ys:11 -> case ys:11^102 of {
//│ 	C h1:12 t1:13 => ((rev:6^103 a:10^104) t1:13^106)
//│ 	| N => a:10^108}))
//│ def rev2:7 = (fun a2:14 -> (fun ys2:15 -> case ys2:15^127 of {
//│ 	C h12:16 t12:17 => ((rev2:7^128 a2:14^129) t12:17^131)
//│ 	| N => a2:14^133}))
//│ def rev2:7^28:20 = (fun a2:28 -> (fun ys2:29 -> ys2:29^96))
//│ def rev:6^27:22 = (fun a:32 -> (fun ys:33 -> ys:33^112))
//│ def rev:6^27_rev:6^2:23 = (fun a:24 -> (fun ys:25 -> ys:25^93))
//│ <<<<<<< after fusion <<<<<<<
