:NewParser
:ParseOnly


:lhInHaskell
:lhGenOCaml
testMapmapBuiltInType ls = map (\x -> x + 1) $ map (\x -> x * x) ls
testMapmapBuiltInType $ primId [1..100000]
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMapmapBuiltInType_lh^55(primId⁰(enumFromTo_lh^57(1, 100000)))
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^21((a⁰ + 1), b⁰)] else [LH_N]
//│ def map_lh(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh^5(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def testMapmapBuiltInType_lh(_lh_testMapmapBuiltInType_arg1⁰) = map_lh^35((fun x⁰ -> (x⁰ + 1)), map_lh^43((fun x¹ -> (x¹ * x¹)), _lh_testMapmapBuiltInType_arg1⁰))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo_lh a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec map_lh f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C((f_0 h_0), ((map_lh f_0) t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec testMapmapBuiltInType_lh _lh_testMapmapBuiltInType_arg1_0 =
//│ 		  ((map_lh (fun x_0 -> 
//│ 		    (x_0 + 1))) ((map_lh (fun x_1 -> 
//│ 		    (x_1 * x_1))) _lh_testMapmapBuiltInType_arg1_0));;
//│ 		(testMapmapBuiltInType_lh ((enumFromTo_lh 1) 100000))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10 --->
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_N]: 11 --->
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12 --->
//│ 	NoProd
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMapmapBuiltInType_lh(primId⁰(enumFromTo_lh(1, 100000)))
//│ def enumFromTo_lh(a¹, b¹) = if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh((a¹ + 1), b¹)] else [LH_N]
//│ def map_lh(f¹, ls¹) = case ls¹ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f¹(h⁰) map_lh(f¹, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def testMapmapBuiltInType_lh(_lh_testMapmapBuiltInType_arg1¹) = map_lh((fun x² -> (x² + 1)), map_lh((fun x³ -> (x³ * x³)), _lh_testMapmapBuiltInType_arg1¹))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

// NOTE: why manually fused version is still not faster?
:lhGenOCaml
fun enumFromTo(a, b) = if a <= b then C(a, enumFromTo(a + 1, b)) else N
fun filter(ls, f) = if ls is
  C(h, t) then if f(h) then C(h, filter(t, f)) else filter(t, f)
  N then N
fun lastDrive(ls) = if ls is
  C(h, t) then Some(last(h, t))
  N then None
fun last(a, ls) = if ls is
  N then a
  C(h, t) then last(h, t)
fun testLastFilter(ls) = lastDrive(filter(ls, x => x < 1000))
fun _lhManualLastFilterDrive(ls, f) = if ls is
  C(h, t) then if f(h) then
    let a = _lhManualLastFilter(t, f, h)
    Some(a)
  else
    _lhManualLastFilterDrive(t, f)
  N then None
fun _lhManualLastFilter(ls, f, a) = if ls is
  C(h, t) then if f(h) then _lhManualLastFilter(t, f, h) else _lhManualLastFilter(t, f, a)
  N then a
fun testManual(ls) = _lhManualLastFilterDrive(ls, x => x < 1000)
testLastFilter(primId(enumFromTo(1, 500000)))
testManual(primId(enumFromTo(1, 500000)))
//│ |#fun| |enumFromTo|(|a|,| |b|)| |#=| |#if| |a| |<=| |b| |#then| |C|(|a|,| |enumFromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#fun| |filter|(|ls|,| |f|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |#if| |f|(|h|)| |#then| |C|(|h|,| |filter|(|t|,| |f|)|)| |#else| |filter|(|t|,| |f|)|↵|N| |#then| |N|←|↵|#fun| |lastDrive|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |Some|(|last|(|h|,| |t|)|)|↵|N| |#then| |None|←|↵|#fun| |last|(|a|,| |ls|)| |#=| |#if| |ls| |is|→|N| |#then| |a|↵|C|(|h|,| |t|)| |#then| |last|(|h|,| |t|)|←|↵|#fun| |testLastFilter|(|ls|)| |#=| |lastDrive|(|filter|(|ls|,| |x| |=>| |x| |<| |1000|)|)|↵|#fun| |_lhManualLastFilterDrive|(|ls|,| |f|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |#if| |f|(|h|)| |#then|→|#let| |a| |#=| |_lhManualLastFilter|(|t|,| |f|,| |h|)|↵|Some|(|a|)|←|↵|#else|→|_lhManualLastFilterDrive|(|t|,| |f|)|←|↵|N| |#then| |None|←|↵|#fun| |_lhManualLastFilter|(|ls|,| |f|,| |a|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |#if| |f|(|h|)| |#then| |_lhManualLastFilter|(|t|,| |f|,| |h|)| |#else| |_lhManualLastFilter|(|t|,| |f|,| |a|)|↵|N| |#then| |a|←|↵|#fun| |testManual|(|ls|)| |#=| |_lhManualLastFilterDrive|(|ls|,| |x| |=>| |x| |<| |1000|)|↵|testLastFilter|(|primId|(|enumFromTo|(|1|,| |500000|)|)|)|↵|testManual|(|primId|(|enumFromTo|(|1|,| |500000|)|)|)|
//│ Parsed: {fun enumFromTo = a, b, => if (<= (a,) (b,)) then C (a, enumFromTo (+ (a,) (1,), b,),) else N; fun filter = ls, f, => if ls is ‹(C (h, t,)) then if (f (h,)) then C (h, filter (t, f,),) else filter (t, f,); (N) then N›; fun lastDrive = ls, => if ls is ‹(C (h, t,)) then Some (last (h, t,),); (N) then None›; fun last = a, ls, => if ls is ‹(N) then a; (C (h, t,)) then last (h, t,)›; fun testLastFilter = ls, => lastDrive (filter (ls, x, => < (x,) (1000,),),); fun _lhManualLastFilterDrive = ls, f, => if ls is ‹(C (h, t,)) then if (f (h,)) then {let a = _lhManualLastFilter (t, f, h,); Some (a,)} else {_lhManualLastFilterDrive (t, f,)}; (N) then None›; fun _lhManualLastFilter = ls, f, a, => if ls is ‹(C (h, t,)) then if (f (h,)) then _lhManualLastFilter (t, f, h,) else _lhManualLastFilter (t, f, a,); (N) then a›; fun testManual = ls, => _lhManualLastFilterDrive (ls, x, => < (x,) (1000,),); testLastFilter (primId (enumFromTo (1, 500000,),),); testManual (primId (enumFromTo (1, 500000,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testLastFilter^134(primId⁰(enumFromTo^136(1, 500000)))
//│ testManual^143(primId⁰(enumFromTo^145(1, 500000)))
//│ def _lhManualLastFilter(ls⁵, f², a³) = case ls⁵ of {
//│ 	C h⁴ t⁴ => if f²(h⁴) then _lhManualLastFilter^103(t⁴, f², h⁴) else _lhManualLastFilter^110(t⁴, f², a³)
//│ 	| N  => a³}
//│ def _lhManualLastFilterDrive(ls⁴, f¹) = case ls⁴ of {
//│ 	C h³ t³ => if f¹(h³) then 
//│ 		let a² = _lhManualLastFilter^79(t³, f¹, h³)
//│ 		in [Some a²] else _lhManualLastFilterDrive^89(t³, f¹)
//│ 	| N  => [None]}
//│ def enumFromTo(a⁰, b⁰) = if (a⁰ <= b⁰) then [C a⁰ enumFromTo^7((a⁰ + 1), b⁰)] else [N]
//│ def filter(ls⁰, f⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => if f⁰(h⁰) then [C h⁰ filter^26(t⁰, f⁰)] else filter^32(t⁰, f⁰)
//│ 	| N  => [N]}
//│ def last(a¹, ls²) = case ls² of {
//│ 	N  => a¹
//│ 	| C h² t² => last^54(h², t²)}
//│ def lastDrive(ls¹) = case ls¹ of {
//│ 	C h¹ t¹ => [Some last^43(h¹, t¹)]
//│ 	| N  => [None]}
//│ def testLastFilter(ls³) = lastDrive^62(filter^63(ls³, (fun x⁰ -> (x⁰ < 1000))))
//│ def testManual(ls⁶) = _lhManualLastFilterDrive^123(ls⁶, (fun x¹ -> (x¹ < 1000)))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec _lhManualLastFilter ls_5 f_2 a_3 =
//│ 		  (match ls_5 with
//│ 		    | `C(h_4, t_4) -> 
//│ 		      (if (f_2 h_4) then
//│ 		        (((_lhManualLastFilter t_4) f_2) h_4)
//│ 		      else
//│ 		        (((_lhManualLastFilter t_4) f_2) a_3))
//│ 		    | `N -> 
//│ 		      a_3);;
//│ 		let rec filter ls_0 f_0 =
//│ 		  (match ls_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (if (f_0 h_0) then
//│ 		        (`C(h_0, ((filter t_0) f_0)))
//│ 		      else
//│ 		        ((filter t_0) f_0))
//│ 		    | `N -> 
//│ 		      (`N));;
//│ 		let rec last a_1 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `N -> 
//│ 		      a_1
//│ 		    | `C(h_2, t_2) -> 
//│ 		      ((last h_2) t_2));;
//│ 		let rec enumFromTo a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`N));;
//│ 		let rec _lhManualLastFilterDrive ls_4 f_1 =
//│ 		  (match ls_4 with
//│ 		    | `C(h_3, t_3) -> 
//│ 		      (if (f_1 h_3) then
//│ 		        (let rec a_2 = (((_lhManualLastFilter t_3) f_1) h_3) in
//│ 		          (`Some(a_2)))
//│ 		      else
//│ 		        ((_lhManualLastFilterDrive t_3) f_1))
//│ 		    | `N -> 
//│ 		      (`None));;
//│ 		let rec lastDrive ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `C(h_1, t_1) -> 
//│ 		      (`Some(((last h_1) t_1)))
//│ 		    | `N -> 
//│ 		      (`None));;
//│ 		let rec testManual ls_6 =
//│ 		  ((_lhManualLastFilterDrive ls_6) (fun x_1 -> 
//│ 		    (x_1 < 1000)));;
//│ 		let rec testLastFilter ls_3 =
//│ 		  (lastDrive ((filter ls_3) (fun x_0 -> 
//│ 		    (x_0 < 1000))));;
//│ 		(testLastFilter ((enumFromTo 1) 500000))
//│ 		(testManual ((enumFromTo 1) 500000))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [enumFromTo^136] (hopeless to continue)
//│ 	[enumFromTo^136 · enumFromTo^7] ---> [enumFromTo^136] (using original def)
//│ [enumFromTo^145] (hopeless to continue)
//│ 	[enumFromTo^145 · enumFromTo^7] ---> [enumFromTo^145] (using original def)
//│ [testLastFilter^134] (hopeless to continue)
//│ 	[testLastFilter^134 · filter^63] (using original def)
//│ 		[testLastFilter^134 · filter^63 · filter^26] ---> [testLastFilter^134 · filter^63] (using original def)
//│ 		[testLastFilter^134 · filter^63 · filter^32] ---> [testLastFilter^134 · filter^63] (using original def)
//│ 	[testLastFilter^134 · lastDrive^62] (using original def)
//│ 		[testLastFilter^134 · lastDrive^62 · last^43] (using original def)
//│ 			[testLastFilter^134 · lastDrive^62 · last^43 · last^54] ---> [testLastFilter^134 · lastDrive^62 · last^43] (using original def)
//│ [testManual^143] (hopeless to continue)
//│ 	[testManual^143 · _lhManualLastFilterDrive^123] (using original def)
//│ 		[testManual^143 · _lhManualLastFilterDrive^123 · _lhManualLastFilterDrive^89] ---> [testManual^143 · _lhManualLastFilterDrive^123] (using original def)
//│ 		[testManual^143 · _lhManualLastFilterDrive^123 · _lhManualLastFilter^79] (using original def)
//│ 			[testManual^143 · _lhManualLastFilterDrive^123 · _lhManualLastFilter^79 · _lhManualLastFilter^103] ---> [testManual^143 · _lhManualLastFilterDrive^123 · _lhManualLastFilter^79] (using original def)
//│ 			[testManual^143 · _lhManualLastFilterDrive^123 · _lhManualLastFilter^79 · _lhManualLastFilter^110] ---> [testManual^143 · _lhManualLastFilterDrive^123 · _lhManualLastFilter^79] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testLastFilter_₀(primId⁰(enumFromTo_₀(1, 500000)))
//│ testManual_₀(primId⁰(enumFromTo_₁(1, 500000)))
//│ def enumFromTo_₀(a⁷, b²) = 
//│ 	if (a⁷ <= b²) then [C a⁷ enumFromTo_₀((a⁷ + 1), b²)] else [N]
//│ def enumFromTo_₁(a⁴, b¹) = 
//│ 	if (a⁴ <= b¹) then [C a⁴ enumFromTo_₁((a⁴ + 1), b¹)] else [N]
//│ def testLastFilter_₀(ls⁸) = 
//│ 	lastDrive_₀(filter_₀(ls⁸, (fun x² -> (x² < 1000))))
//│ 	where
//│ 	def filter_₀(ls¹³, f⁵) = 
//│ 		case ls¹³ of {
//│ 			C h⁹ t⁹ => if f⁵(h⁹) then [C h⁹ filter_₀(t⁹, f⁵)] else filter_₀(t⁹, f⁵)
//│ 			| N  => [N]}
//│ 	def lastDrive_₀(ls⁷) = 
//│ 		case ls⁷ of {
//│ 			C h⁵ t⁵ => [Some last_₀(h⁵, t⁵)]
//│ 			| N  => [None]}
//│ 		where
//│ 		def last_₀(a⁶, ls¹¹) = 
//│ 			case ls¹¹ of {
//│ 				N  => a⁶
//│ 				| C h⁷ t⁷ => last_₀(h⁷, t⁷)}
//│ def testManual_₀(ls⁹) = 
//│ 	_lhManualLastFilterDrive_₀(ls⁹, (fun x³ -> (x³ < 1000)))
//│ 	where
//│ 	def _lhManualLastFilterDrive_₀(ls¹⁰, f³) = 
//│ 		case ls¹⁰ of {
//│ 			C h⁶ t⁶ => if f³(h⁶) then 
//│ 				let a⁵ = _lhManualLastFilter_₀(t⁶, f³, h⁶)
//│ 				in [Some a⁵] else _lhManualLastFilterDrive_₀(t⁶, f³)
//│ 			| N  => [None]}
//│ 		where
//│ 		def _lhManualLastFilter_₀(ls¹², f⁴, a⁸) = 
//│ 			case ls¹² of {
//│ 				C h⁸ t⁸ => if f⁴(h⁸) then _lhManualLastFilter_₀(t⁸, f⁴, h⁸) else _lhManualLastFilter_₀(t⁸, f⁴, a⁸)
//│ 				| N  => a⁸}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h⁹ filter_₀(t⁹, f⁵)]: 294 --->
//│ 	case ls⁷ of {C h⁵ t⁵ => [Some last_₀(h⁵, t⁵)] | N  => [None]}: 180
//│ 	case ls¹¹ of {N  => a⁶ | C h⁷ t⁷ => last_₀(h⁷, t⁷)}: 237
//│ [N]: 301 --->
//│ 	case ls⁷ of {C h⁵ t⁵ => [Some last_₀(h⁵, t⁵)] | N  => [None]}: 180
//│ 	case ls¹¹ of {N  => a⁶ | C h⁷ t⁷ => last_₀(h⁷, t⁷)}: 237
//│ ------------------
//│ case ls⁷ of {C h⁵ t⁵ => [Some last_₀(h⁵, t⁵)] | N  => [None]}: 180 --->
//│ 	[C h⁹ filter_₀(t⁹, f⁵)]: 294
//│ 	[N]: 301
//│ case ls¹¹ of {N  => a⁶ | C h⁷ t⁷ => last_₀(h⁷, t⁷)}: 237 --->
//│ 	[C h⁹ filter_₀(t⁹, f⁵)]: 294
//│ 	[N]: 301
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testLastFilter_₀(primId⁰(enumFromTo_₀(1, 500000)))
//│ testManual_₀(primId⁰(enumFromTo_₁(1, 500000)))
//│ def enumFromTo_₀(a¹¹, b⁴) = 
//│ 	if (a¹¹ <= b⁴) then [C a¹¹ enumFromTo_₀((a¹¹ + 1), b⁴)] else [N]
//│ def enumFromTo_₁(a⁹, b³) = 
//│ 	if (a⁹ <= b³) then [C a⁹ enumFromTo_₁((a⁹ + 1), b³)] else [N]
//│ def testLastFilter_₀(ls¹⁸) = 
//│ 	lastDrive_₀(filter_₀(ls¹⁸, (fun x⁵ -> (x⁵ < 1000))))
//│ 	where
//│ 	def filter_₀(ls¹⁵, f⁶) = 
//│ 		case ls¹⁵ of {
//│ 			C h⁹ t⁹ => if f⁶(h⁹) then [C h⁹ filter_₀(t⁹, f⁶)] else filter_₀(t⁹, f⁶)
//│ 			| N  => [N]}
//│ 	def lastDrive_₀(ls¹⁴) = 
//│ 		case ls¹⁴ of {
//│ 			C h⁵ t⁵ => [Some last_₀(h⁵, t⁵)]
//│ 			| N  => [None]}
//│ 		where
//│ 		def last_₀(a¹², ls¹⁹) = 
//│ 			case ls¹⁹ of {
//│ 				N  => a¹²
//│ 				| C h⁷ t⁷ => last_₀(h⁷, t⁷)}
//│ def testManual_₀(ls¹⁶) = 
//│ 	_lhManualLastFilterDrive_₀(ls¹⁶, (fun x⁴ -> (x⁴ < 1000)))
//│ 	where
//│ 	def _lhManualLastFilterDrive_₀(ls¹⁷, f⁷) = 
//│ 		case ls¹⁷ of {
//│ 			C h⁶ t⁶ => if f⁷(h⁶) then 
//│ 				let a¹⁰ = _lhManualLastFilter_₀(t⁶, f⁷, h⁶)
//│ 				in [Some a¹⁰] else _lhManualLastFilterDrive_₀(t⁶, f⁷)
//│ 			| N  => [None]}
//│ 		where
//│ 		def _lhManualLastFilter_₀(ls²⁰, f⁸, a¹³) = 
//│ 			case ls²⁰ of {
//│ 				C h⁸ t⁸ => if f⁸(h⁸) then _lhManualLastFilter_₀(t⁸, f⁸, h⁸) else _lhManualLastFilter_₀(t⁸, f⁸, a¹³)
//│ 				| N  => a¹³}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ cannot generate benchmark files: key not found: Ident(true,_lhManualLastFilter_₀,0)
//│ 
//│ let rec enumFromTo__d1 a_0 b_0 =
//│   (if (a_0 <= b_0) then
//│     (`C(a_0, ((enumFromTo__d1 (a_0 + 1)) b_0)))
//│   else
//│     (`N));;
//│ let rec enumFromTo__d0 a_2 b_1 =
//│   (if (a_2 <= b_1) then
//│     (`C(a_2, ((enumFromTo__d0 (a_2 + 1)) b_1)))
//│   else
//│     (`N));;
//│ let rec _lhManualLastFilter__d0 ls_6 f_2 a_4 =
//│   (match ls_6 with
//│     | `C(h_4, t_4) -> 
//│       (if (f_2 h_4) then
//│         (((_lhManualLastFilter__d0 t_4) f_2) h_4)
//│       else
//│         (((_lhManualLastFilter__d0 t_4) f_2) a_4))
//│     | `N -> 
//│       a_4);;
//│ let rec last__d0 a_3 ls_5 =
//│   (match ls_5 with
//│     | `N -> 
//│       a_3
//│     | `C(h_3, t_3) -> 
//│       ((last__d0 h_3) t_3));;
//│ let rec filter__d0 ls_1 f_0 =
//│   (match ls_1 with
//│     | `C(h_1, t_1) -> 
//│       (if (f_0 h_1) then
//│         (`C(h_1, ((filter__d0 t_1) f_0)))
//│       else
//│         ((filter__d0 t_1) f_0))
//│     | `N -> 
//│       (`N));;
//│ let rec _lhManualLastFilterDrive__d0 ls_3 f_1 =
//│   (match ls_3 with
//│     | `C(h_2, t_2) -> 
//│       (if (f_1 h_2) then
//│         (let rec a_1 = (((_lhManualLastFilter__d0 t_2) f_1) h_2) in
//│           (`Some(a_1)))
//│       else
//│         ((_lhManualLastFilterDrive__d0 t_2) f_1))
//│     | `N -> 
//│       (`None));;
//│ let rec lastDrive__d0 ls_0 =
//│   (match ls_0 with
//│     | `C(h_0, t_0) -> 
//│       (`Some(((last__d0 h_0) t_0)))
//│     | `N -> 
//│       (`None));;
//│ let rec testManual__d0 ls_2 =
//│   ((_lhManualLastFilterDrive__d0 ls_2) (fun x_0 -> 
//│     (x_0 < 1000)));;
//│ let rec testLastFilter__d0 ls_4 =
//│   (lastDrive__d0 ((filter__d0 ls_4) (fun x_1 -> 
//│     (x_1 < 1000))));;
//│ (testLastFilter__d0 ((enumFromTo__d0 1) 500000))
//│ (testManual__d0 ((enumFromTo__d1 1) 500000))
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

:lhGenOCaml
fun enumFromTo(a, b) = if a <= b then C(a, enumFromTo(a + 1, b)) else N
fun filter(ls, f) = if ls is
  C(h, t) then if f(h) then C(h, filter(t, f)) else filter(t, f)
  N then N
fun lastDrive(ls) = if ls is
  C(h, t) then Some(last(h, t))
  N then None
fun last(a, ls) = if ls is
  N then a
  C(h, t) then last(h, t)
fun testLastFilterEnum(n) = lastDrive(filter(enumFromTo(1, n), x => x < 1000))
testLastFilterEnum(primId(500000))
//│ |#fun| |enumFromTo|(|a|,| |b|)| |#=| |#if| |a| |<=| |b| |#then| |C|(|a|,| |enumFromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#fun| |filter|(|ls|,| |f|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |#if| |f|(|h|)| |#then| |C|(|h|,| |filter|(|t|,| |f|)|)| |#else| |filter|(|t|,| |f|)|↵|N| |#then| |N|←|↵|#fun| |lastDrive|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |Some|(|last|(|h|,| |t|)|)|↵|N| |#then| |None|←|↵|#fun| |last|(|a|,| |ls|)| |#=| |#if| |ls| |is|→|N| |#then| |a|↵|C|(|h|,| |t|)| |#then| |last|(|h|,| |t|)|←|↵|#fun| |testLastFilterEnum|(|n|)| |#=| |lastDrive|(|filter|(|enumFromTo|(|1|,| |n|)|,| |x| |=>| |x| |<| |1000|)|)|↵|testLastFilterEnum|(|primId|(|500000|)|)|
//│ Parsed: {fun enumFromTo = a, b, => if (<= (a,) (b,)) then C (a, enumFromTo (+ (a,) (1,), b,),) else N; fun filter = ls, f, => if ls is ‹(C (h, t,)) then if (f (h,)) then C (h, filter (t, f,),) else filter (t, f,); (N) then N›; fun lastDrive = ls, => if ls is ‹(C (h, t,)) then Some (last (h, t,),); (N) then None›; fun last = a, ls, => if ls is ‹(N) then a; (C (h, t,)) then last (h, t,)›; fun testLastFilterEnum = n, => lastDrive (filter (enumFromTo (1, n,), x, => < (x,) (1000,),),); testLastFilterEnum (primId (500000,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testLastFilterEnum^79(primId⁰(500000))
//│ def enumFromTo(a⁰, b⁰) = if (a⁰ <= b⁰) then [C a⁰ enumFromTo^7((a⁰ + 1), b⁰)] else [N]
//│ def filter(ls⁰, f⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => if f⁰(h⁰) then [C h⁰ filter^26(t⁰, f⁰)] else filter^32(t⁰, f⁰)
//│ 	| N  => [N]}
//│ def last(a¹, ls²) = case ls² of {
//│ 	N  => a¹
//│ 	| C h² t² => last^54(h², t²)}
//│ def lastDrive(ls¹) = case ls¹ of {
//│ 	C h¹ t¹ => [Some last^43(h¹, t¹)]
//│ 	| N  => [None]}
//│ def testLastFilterEnum(n⁰) = lastDrive^62(filter^63(enumFromTo^64(1, n⁰), (fun x⁰ -> (x⁰ < 1000))))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec filter ls_0 f_0 =
//│ 		  (match ls_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (if (f_0 h_0) then
//│ 		        (`C(h_0, ((filter t_0) f_0)))
//│ 		      else
//│ 		        ((filter t_0) f_0))
//│ 		    | `N -> 
//│ 		      (`N));;
//│ 		let rec last a_1 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `N -> 
//│ 		      a_1
//│ 		    | `C(h_2, t_2) -> 
//│ 		      ((last h_2) t_2));;
//│ 		let rec enumFromTo a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`N));;
//│ 		let rec lastDrive ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `C(h_1, t_1) -> 
//│ 		      (`Some(((last h_1) t_1)))
//│ 		    | `N -> 
//│ 		      (`None));;
//│ 		let rec testLastFilterEnum n_0 =
//│ 		  (lastDrive ((filter ((enumFromTo 1) n_0)) (fun x_0 -> 
//│ 		    (x_0 < 1000))));;
//│ 		(testLastFilterEnum 500000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testLastFilterEnum^79] (hopeless to continue)
//│ 	[testLastFilterEnum^79 · enumFromTo^64] (using original def)
//│ 		[testLastFilterEnum^79 · enumFromTo^64 · enumFromTo^7] ---> [testLastFilterEnum^79 · enumFromTo^64] (using original def)
//│ 	[testLastFilterEnum^79 · filter^63] (using original def)
//│ 		[testLastFilterEnum^79 · filter^63 · filter^26] ---> [testLastFilterEnum^79 · filter^63] (using original def)
//│ 		[testLastFilterEnum^79 · filter^63 · filter^32] ---> [testLastFilterEnum^79 · filter^63] (using original def)
//│ 	[testLastFilterEnum^79 · lastDrive^62] (using original def)
//│ 		[testLastFilterEnum^79 · lastDrive^62 · last^43] (using original def)
//│ 			[testLastFilterEnum^79 · lastDrive^62 · last^43 · last^54] ---> [testLastFilterEnum^79 · lastDrive^62 · last^43] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testLastFilterEnum_₀(primId⁰(500000))
//│ def testLastFilterEnum_₀(n¹) = 
//│ 	lastDrive_₀(filter_₀(enumFromTo_₀(1, n¹), (fun x¹ -> (x¹ < 1000))))
//│ 	where
//│ 	def enumFromTo_₀(a², b¹) = 
//│ 		if (a² <= b¹) then [C a² enumFromTo_₀((a² + 1), b¹)] else [N]
//│ 	def filter_₀(ls⁴, f¹) = 
//│ 		case ls⁴ of {
//│ 			C h⁴ t⁴ => if f¹(h⁴) then [C h⁴ filter_₀(t⁴, f¹)] else filter_₀(t⁴, f¹)
//│ 			| N  => [N]}
//│ 	def lastDrive_₀(ls³) = 
//│ 		case ls³ of {
//│ 			C h³ t³ => [Some last_₀(h³, t³)]
//│ 			| N  => [None]}
//│ 		where
//│ 		def last_₀(a³, ls⁵) = 
//│ 			case ls⁵ of {
//│ 				N  => a³
//│ 				| C h⁵ t⁵ => last_₀(h⁵, t⁵)}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C a² enumFromTo_₀((a² + 1), b¹)]: 99 --->
//│ 	case ls⁴ of {C h⁴ t⁴ => if f¹(h⁴) then [C h⁴ filter_₀(t⁴, f¹)] else filter_₀(t⁴, f¹) | N  => [N]}: 132
//│ [N]: 100 --->
//│ 	case ls⁴ of {C h⁴ t⁴ => if f¹(h⁴) then [C h⁴ filter_₀(t⁴, f¹)] else filter_₀(t⁴, f¹) | N  => [N]}: 132
//│ [C h⁴ filter_₀(t⁴, f¹)]: 124 --->
//│ 	case ls³ of {C h³ t³ => [Some last_₀(h³, t³)] | N  => [None]}: 112
//│ 	case ls⁵ of {N  => a³ | C h⁵ t⁵ => last_₀(h⁵, t⁵)}: 159
//│ [N]: 131 --->
//│ 	case ls³ of {C h³ t³ => [Some last_₀(h³, t³)] | N  => [None]}: 112
//│ 	case ls⁵ of {N  => a³ | C h⁵ t⁵ => last_₀(h⁵, t⁵)}: 159
//│ ------------------
//│ case ls³ of {C h³ t³ => [Some last_₀(h³, t³)] | N  => [None]}: 112 --->
//│ 	[C h⁴ filter_₀(t⁴, f¹)]: 124
//│ 	[N]: 131
//│ case ls⁴ of {C h⁴ t⁴ => if f¹(h⁴) then [C h⁴ filter_₀(t⁴, f¹)] else filter_₀(t⁴, f¹) | N  => [N]}: 132 --->
//│ 	[C a² enumFromTo_₀((a² + 1), b¹)]: 99
//│ 	[N]: 100
//│ case ls⁵ of {N  => a³ | C h⁵ t⁵ => last_₀(h⁵, t⁵)}: 159 --->
//│ 	[C h⁴ filter_₀(t⁴, f¹)]: 124
//│ 	[N]: 131
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C a² enumFromTo_₀((a² + 1), b¹)]: 99 --->
//│ 	case ls⁴ of {C h⁴ t⁴ => if f¹(h⁴) then [C h⁴ filter_₀(t⁴, f¹)] else filter_₀(t⁴, f¹) | N  => [N]}: 132
//│ [N]: 100 --->
//│ 	case ls⁴ of {C h⁴ t⁴ => if f¹(h⁴) then [C h⁴ filter_₀(t⁴, f¹)] else filter_₀(t⁴, f¹) | N  => [N]}: 132
//│ ------------------
//│ case ls⁴ of {C h⁴ t⁴ => if f¹(h⁴) then [C h⁴ filter_₀(t⁴, f¹)] else filter_₀(t⁴, f¹) | N  => [N]}: 132 --->
//│ 	[C a² enumFromTo_₀((a² + 1), b¹)]: 99
//│ 	[N]: 100
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testLastFilterEnum_₀(primId⁰(500000))
//│ def testLastFilterEnum_₀(n²) = 
//│ 	lastDrive_₀(filter_₀(enumFromTo_₀(1, n²), (fun x² -> (x² < 1000))))
//│ 	where
//│ 	def enumFromTo_₀(a⁵, b²) = 
//│ 		if (a⁵ <= b²) then 
//│ 			let t⁶ = enumFromTo_₀((a⁵ + 1), b²)
//│ 			in let h⁶ = a⁵
//│ 			in (fun f³ -> if f³(h⁶) then [C h⁶ filter_₀(t⁶, f³)] else filter_₀(t⁶, f³)) else (fun f⁴ -> [N])
//│ 	def filter_₀(ls⁷, f²) = 
//│ 		ls⁷(f²)
//│ 	def lastDrive_₀(ls⁶) = 
//│ 		case ls⁶ of {
//│ 			C h³ t³ => [Some last_₀(h³, t³)]
//│ 			| N  => [None]}
//│ 		where
//│ 		def last_₀(a⁴, ls⁸) = 
//│ 			case ls⁸ of {
//│ 				N  => a⁴
//│ 				| C h⁵ t⁵ => last_₀(h⁵, t⁵)}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

:lhGenOCaml
fun enumFromTo(a, b) = if a <= b then C(a, enumFromTo(a + 1, b)) else N
fun map(f, ls) = if ls is
  C(h, t) then C(f(h), map(f, t))
  N then N
fun testMapmap(ls) = map(x => x + 1, map(x => x * x, ls))
fun _lhManual(ls, f1, f2) = if ls is
  C(h, t) then C(f2(f1(h)), _lhManual(t, f1, f2))
  N then N
fun testManual(ls) = _lhManual(ls, x => x * x, x => x + 1)
testMapmap(primId(enumFromTo(1, 100000)))
testManual(primId(enumFromTo(1, 100000)))
//│ |#fun| |enumFromTo|(|a|,| |b|)| |#=| |#if| |a| |<=| |b| |#then| |C|(|a|,| |enumFromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |testMapmap|(|ls|)| |#=| |map|(|x| |=>| |x| |+| |1|,| |map|(|x| |=>| |x| |*| |x|,| |ls|)|)|↵|#fun| |_lhManual|(|ls|,| |f1|,| |f2|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f2|(|f1|(|h|)|)|,| |_lhManual|(|t|,| |f1|,| |f2|)|)|↵|N| |#then| |N|←|↵|#fun| |testManual|(|ls|)| |#=| |_lhManual|(|ls|,| |x| |=>| |x| |*| |x|,| |x| |=>| |x| |+| |1|)|↵|testMapmap|(|primId|(|enumFromTo|(|1|,| |100000|)|)|)|↵|testManual|(|primId|(|enumFromTo|(|1|,| |100000|)|)|)|
//│ Parsed: {fun enumFromTo = a, b, => if (<= (a,) (b,)) then C (a, enumFromTo (+ (a,) (1,), b,),) else N; fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun testMapmap = ls, => map (x, => + (x,) (1,), map (x, => * (x,) (x,), ls,),); fun _lhManual = ls, f1, f2, => if ls is ‹(C (h, t,)) then C (f2 (f1 (h,),), _lhManual (t, f1, f2,),); (N) then N›; fun testManual = ls, => _lhManual (ls, x, => * (x,) (x,), x, => + (x,) (1,),); testMapmap (primId (enumFromTo (1, 100000,),),); testManual (primId (enumFromTo (1, 100000,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMapmap^92(primId⁰(enumFromTo^94(1, 100000)))
//│ testManual^101(primId⁰(enumFromTo^103(1, 100000)))
//│ def _lhManual(ls², f1⁰, f2⁰) = case ls² of {
//│ 	C h¹ t¹ => [C f2⁰(f1⁰(h¹)) _lhManual^61(t¹, f1⁰, f2⁰)]
//│ 	| N  => [N]}
//│ def enumFromTo(a⁰, b⁰) = if (a⁰ <= b⁰) then [C a⁰ enumFromTo^7((a⁰ + 1), b⁰)] else [N]
//│ def map(f⁰, ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map^25(f⁰, t⁰)]
//│ 	| N  => [N]}
//│ def testManual(ls³) = _lhManual^74(ls³, (fun x² -> (x² * x²)), (fun x³ -> (x³ + 1)))
//│ def testMapmap(ls¹) = map^35((fun x⁰ -> (x⁰ + 1)), map^43((fun x¹ -> (x¹ * x¹)), ls¹))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec _lhManual ls_2 f1_0 f2_0 =
//│ 		  (match ls_2 with
//│ 		    | `C(h_1, t_1) -> 
//│ 		      (`C((f2_0 (f1_0 h_1)), (((_lhManual t_1) f1_0) f2_0)))
//│ 		    | `N -> 
//│ 		      (`N));;
//│ 		let rec enumFromTo a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`N));;
//│ 		let rec map f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (`C((f_0 h_0), ((map f_0) t_0)))
//│ 		    | `N -> 
//│ 		      (`N));;
//│ 		let rec testManual ls_3 =
//│ 		  (((_lhManual ls_3) (fun x_2 -> 
//│ 		    (x_2 * x_2))) (fun x_3 -> 
//│ 		    (x_3 + 1)));;
//│ 		let rec testMapmap ls_1 =
//│ 		  ((map (fun x_0 -> 
//│ 		    (x_0 + 1))) ((map (fun x_1 -> 
//│ 		    (x_1 * x_1))) ls_1));;
//│ 		(testMapmap ((enumFromTo 1) 100000))
//│ 		(testManual ((enumFromTo 1) 100000))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [enumFromTo^103] (hopeless to continue)
//│ 	[enumFromTo^103 · enumFromTo^7] ---> [enumFromTo^103] (using original def)
//│ [enumFromTo^94] (hopeless to continue)
//│ 	[enumFromTo^94 · enumFromTo^7] ---> [enumFromTo^94] (using original def)
//│ [testManual^101] (hopeless to continue)
//│ 	[testManual^101 · _lhManual^74] (using original def)
//│ 		[testManual^101 · _lhManual^74 · _lhManual^61] ---> [testManual^101 · _lhManual^74] (using original def)
//│ [testMapmap^92] (hopeless to continue)
//│ 	[testMapmap^92 · map^35] (using original def)
//│ 		[testMapmap^92 · map^35 · map^25] ---> [testMapmap^92 · map^35] (using original def)
//│ 	[testMapmap^92 · map^43] (using original def)
//│ 		[testMapmap^92 · map^43 · map^25] ---> [testMapmap^92 · map^43] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testMapmap_₀(primId⁰(enumFromTo_₁(1, 100000)))
//│ testManual_₀(primId⁰(enumFromTo_₀(1, 100000)))
//│ def enumFromTo_₀(a¹, b¹) = 
//│ 	if (a¹ <= b¹) then [C a¹ enumFromTo_₀((a¹ + 1), b¹)] else [N]
//│ def enumFromTo_₁(a², b²) = 
//│ 	if (a² <= b²) then [C a² enumFromTo_₁((a² + 1), b²)] else [N]
//│ def testManual_₀(ls⁴) = 
//│ 	_lhManual_₀(ls⁴, (fun x⁴ -> (x⁴ * x⁴)), (fun x⁵ -> (x⁵ + 1)))
//│ 	where
//│ 	def _lhManual_₀(ls⁶, f1¹, f2¹) = 
//│ 		case ls⁶ of {
//│ 			C h³ t³ => [C f2¹(f1¹(h³)) _lhManual_₀(t³, f1¹, f2¹)]
//│ 			| N  => [N]}
//│ def testMapmap_₀(ls⁸) = 
//│ 	map_₀((fun x⁶ -> (x⁶ + 1)), map_₁((fun x⁷ -> (x⁷ * x⁷)), ls⁸))
//│ 	where
//│ 	def map_₀(f², ls⁷) = 
//│ 		case ls⁷ of {
//│ 			C h⁴ t⁴ => [C f²(h⁴) map_₀(f², t⁴)]
//│ 			| N  => [N]}
//│ 	def map_₁(f¹, ls⁵) = 
//│ 		case ls⁵ of {
//│ 			C h² t² => [C f¹(h²) map_₁(f¹, t²)]
//│ 			| N  => [N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C f¹(h²) map_₁(f¹, t²)]: 137 --->
//│ 	case ls⁷ of {C h⁴ t⁴ => [C f²(h⁴) map_₀(f², t⁴)] | N  => [N]}: 192
//│ [N]: 138 --->
//│ 	case ls⁷ of {C h⁴ t⁴ => [C f²(h⁴) map_₀(f², t⁴)] | N  => [N]}: 192
//│ ------------------
//│ case ls⁷ of {C h⁴ t⁴ => [C f²(h⁴) map_₀(f², t⁴)] | N  => [N]}: 192 --->
//│ 	[C f¹(h²) map_₁(f¹, t²)]: 137
//│ 	[N]: 138
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C f¹(h²) map_₁(f¹, t²)]: 137 --->
//│ 	case ls⁷ of {C h⁴ t⁴ => [C f²(h⁴) map_₀(f², t⁴)] | N  => [N]}: 192
//│ [N]: 138 --->
//│ 	case ls⁷ of {C h⁴ t⁴ => [C f²(h⁴) map_₀(f², t⁴)] | N  => [N]}: 192
//│ ------------------
//│ case ls⁷ of {C h⁴ t⁴ => [C f²(h⁴) map_₀(f², t⁴)] | N  => [N]}: 192 --->
//│ 	[C f¹(h²) map_₁(f¹, t²)]: 137
//│ 	[N]: 138
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMapmap_₀(primId⁰(enumFromTo_₁(1, 100000)))
//│ testManual_₀(primId⁰(enumFromTo_₀(1, 100000)))
//│ def enumFromTo_₀(a⁴, b⁴) = 
//│ 	if (a⁴ <= b⁴) then [C a⁴ enumFromTo_₀((a⁴ + 1), b⁴)] else [N]
//│ def enumFromTo_₁(a³, b³) = 
//│ 	if (a³ <= b³) then [C a³ enumFromTo_₁((a³ + 1), b³)] else [N]
//│ def testManual_₀(ls¹²) = 
//│ 	_lhManual_₀(ls¹², (fun x¹⁰ -> (x¹⁰ * x¹⁰)), (fun x¹¹ -> (x¹¹ + 1)))
//│ 	where
//│ 	def _lhManual_₀(ls¹³, f1², f2²) = 
//│ 		case ls¹³ of {
//│ 			C h³ t³ => [C f2²(f1²(h³)) _lhManual_₀(t³, f1², f2²)]
//│ 			| N  => [N]}
//│ def testMapmap_₀(ls¹⁰) = 
//│ 	map_₀((fun x⁸ -> (x⁸ + 1)), map_₁((fun x⁹ -> (x⁹ * x⁹)), ls¹⁰))
//│ 	where
//│ 	def map_₀(f³, ls⁹) = 
//│ 		ls⁹(f³)
//│ 	def map_₁(f⁴, ls¹¹) = 
//│ 		case ls¹¹ of {
//│ 			C h² t² => 
//│ 				let t⁵ = map_₁(f⁴, t²)
//│ 				in let h⁵ = f⁴(h²)
//│ 				in (fun f⁵ -> [C f⁵(h⁵) map_₀(f⁵, t⁵)])
//│ 			| N  => (fun f⁶ -> [N])}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ cannot generate benchmark files: key not found: Ident(true,_lhManual_₀,0)
//│ 
//│ let rec map__d0 f_0 ls_0 =
//│   (ls_0 f_0);;
//│ let rec enumFromTo__d0 a_1 b_1 =
//│   (if (a_1 <= b_1) then
//│     (`C(a_1, ((enumFromTo__d0 (a_1 + 1)) b_1)))
//│   else
//│     (`N));;
//│ let rec enumFromTo__d1 a_0 b_0 =
//│   (if (a_0 <= b_0) then
//│     (`C(a_0, ((enumFromTo__d1 (a_0 + 1)) b_0)))
//│   else
//│     (`N));;
//│ let rec _lhManual__d0 ls_4 f1_0 f2_0 =
//│   (match ls_4 with
//│     | `C(h_2, t_2) -> 
//│       (`C((f2_0 (f1_0 h_2)), (((_lhManual__d0 t_2) f1_0) f2_0)))
//│     | `N -> 
//│       (`N));;
//│ let rec map__d1 f_1 ls_2 =
//│   (match ls_2 with
//│     | `C(h_0, t_0) -> 
//│       (let rec t_1 = ((map__d1 f_1) t_0) in
//│         (let rec h_1 = (f_1 h_0) in
//│           (fun f_2 -> 
//│             (`C((f_2 h_1), ((map__d0 f_2) t_1))))))
//│     | `N -> 
//│       (fun f_3 -> 
//│         (`N)));;
//│ let rec testManual__d0 ls_3 =
//│   (((_lhManual__d0 ls_3) (fun x_2 -> 
//│     (x_2 * x_2))) (fun x_3 -> 
//│     (x_3 + 1)));;
//│ let rec testMapmap__d0 ls_1 =
//│   ((map__d0 (fun x_0 -> 
//│     (x_0 + 1))) ((map__d1 (fun x_1 -> 
//│     (x_1 * x_1))) ls_1));;
//│ (testMapmap__d0 ((enumFromTo__d1 1) 100000))
//│ (testManual__d0 ((enumFromTo__d0 1) 100000))
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


// NOTE: digression: simply use `let r = f(h) in C(r, map(t, f))` will be faster
:lhGenOCaml
fun enumFromTo(a, b) = if a <= b then C(a, enumFromTo(a + 1, b)) else N
fun map(f, ls) = if ls is
  C(h, t) then let r = f(h) in C(r, map(f, t))
  N then N
fun testMapmapLet(ls) = map(x => x + 1, map(x => x * x, ls))
testMapmapLet(primId(enumFromTo(1, 100000)))
//│ |#fun| |enumFromTo|(|a|,| |b|)| |#=| |#if| |a| |<=| |b| |#then| |C|(|a|,| |enumFromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |#let| |r| |#=| |f|(|h|)| |#in| |C|(|r|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |testMapmapLet|(|ls|)| |#=| |map|(|x| |=>| |x| |+| |1|,| |map|(|x| |=>| |x| |*| |x|,| |ls|)|)|↵|testMapmapLet|(|primId|(|enumFromTo|(|1|,| |100000|)|)|)|
//│ Parsed: {fun enumFromTo = a, b, => if (<= (a,) (b,)) then C (a, enumFromTo (+ (a,) (1,), b,),) else N; fun map = f, ls, => if ls is ‹(C (h, t,)) then let r = f (h,) in C (r, map (f, t,),); (N) then N›; fun testMapmapLet = ls, => map (x, => + (x,) (1,), map (x, => * (x,) (x,), ls,),); testMapmapLet (primId (enumFromTo (1, 100000,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMapmapLet^57(primId⁰(enumFromTo^59(1, 100000)))
//│ def enumFromTo(a⁰, b⁰) = if (a⁰ <= b⁰) then [C a⁰ enumFromTo^7((a⁰ + 1), b⁰)] else [N]
//│ def map(f⁰, ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => 
//│ 		let r⁰ = f⁰(h⁰)
//│ 		in [C r⁰ map^26(f⁰, t⁰)]
//│ 	| N  => [N]}
//│ def testMapmapLet(ls¹) = map^37((fun x⁰ -> (x⁰ + 1)), map^45((fun x¹ -> (x¹ * x¹)), ls¹))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec map f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (let rec r_0 = (f_0 h_0) in
//│ 		        (`C(r_0, ((map f_0) t_0))))
//│ 		    | `N -> 
//│ 		      (`N));;
//│ 		let rec enumFromTo a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`N));;
//│ 		let rec testMapmapLet ls_1 =
//│ 		  ((map (fun x_0 -> 
//│ 		    (x_0 + 1))) ((map (fun x_1 -> 
//│ 		    (x_1 * x_1))) ls_1));;
//│ 		(testMapmapLet ((enumFromTo 1) 100000))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [enumFromTo^59] (hopeless to continue)
//│ 	[enumFromTo^59 · enumFromTo^7] ---> [enumFromTo^59] (using original def)
//│ [testMapmapLet^57] (hopeless to continue)
//│ 	[testMapmapLet^57 · map^37] (using original def)
//│ 		[testMapmapLet^57 · map^37 · map^26] ---> [testMapmapLet^57 · map^37] (using original def)
//│ 	[testMapmapLet^57 · map^45] (using original def)
//│ 		[testMapmapLet^57 · map^45 · map^26] ---> [testMapmapLet^57 · map^45] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testMapmapLet_₀(primId⁰(enumFromTo_₀(1, 100000)))
//│ def enumFromTo_₀(a¹, b¹) = 
//│ 	if (a¹ <= b¹) then [C a¹ enumFromTo_₀((a¹ + 1), b¹)] else [N]
//│ def testMapmapLet_₀(ls³) = 
//│ 	map_₀((fun x² -> (x² + 1)), map_₁((fun x³ -> (x³ * x³)), ls³))
//│ 	where
//│ 	def map_₀(f², ls⁴) = 
//│ 		case ls⁴ of {
//│ 			C h² t² => 
//│ 				let r² = f²(h²)
//│ 				in [C r² map_₀(f², t²)]
//│ 			| N  => [N]}
//│ 	def map_₁(f¹, ls²) = 
//│ 		case ls² of {
//│ 			C h¹ t¹ => 
//│ 				let r¹ = f¹(h¹)
//│ 				in [C r¹ map_₁(f¹, t¹)]
//│ 			| N  => [N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C r¹ map_₁(f¹, t¹)]: 76 --->
//│ 	case ls⁴ of {C h² t² => let r² = f²(h²)
//│ in [C r² map_₀(f², t²)] | N  => [N]}: 135
//│ [N]: 78 --->
//│ 	case ls⁴ of {C h² t² => let r² = f²(h²)
//│ in [C r² map_₀(f², t²)] | N  => [N]}: 135
//│ ------------------
//│ case ls⁴ of {C h² t² => let r² = f²(h²)
//│ in [C r² map_₀(f², t²)] | N  => [N]}: 135 --->
//│ 	[C r¹ map_₁(f¹, t¹)]: 76
//│ 	[N]: 78
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C r¹ map_₁(f¹, t¹)]: 76 --->
//│ 	case ls⁴ of {C h² t² => let r² = f²(h²)
//│ in [C r² map_₀(f², t²)] | N  => [N]}: 135
//│ [N]: 78 --->
//│ 	case ls⁴ of {C h² t² => let r² = f²(h²)
//│ in [C r² map_₀(f², t²)] | N  => [N]}: 135
//│ ------------------
//│ case ls⁴ of {C h² t² => let r² = f²(h²)
//│ in [C r² map_₀(f², t²)] | N  => [N]}: 135 --->
//│ 	[C r¹ map_₁(f¹, t¹)]: 76
//│ 	[N]: 78
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMapmapLet_₀(primId⁰(enumFromTo_₀(1, 100000)))
//│ def enumFromTo_₀(a², b²) = 
//│ 	if (a² <= b²) then [C a² enumFromTo_₀((a² + 1), b²)] else [N]
//│ def testMapmapLet_₀(ls⁶) = 
//│ 	map_₀((fun x⁴ -> (x⁴ + 1)), map_₁((fun x⁵ -> (x⁵ * x⁵)), ls⁶))
//│ 	where
//│ 	def map_₀(f⁶, ls⁷) = 
//│ 		ls⁷(f⁶)
//│ 	def map_₁(f³, ls⁵) = 
//│ 		case ls⁵ of {
//│ 			C h¹ t¹ => 
//│ 				let r³ = f³(h¹)
//│ 				in let t³ = map_₁(f³, t¹)
//│ 				in let h³ = r³
//│ 				in (fun f⁴ -> 
//│ 					let r⁴ = f⁴(h³)
//│ 					in [C r⁴ map_₀(f⁴, t³)])
//│ 			| N  => (fun f⁵ -> [N])}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


:lhGenOCaml
:lhInHaskell
safe x d []    = True
safe x d (q:l) = (x /= q) && (x /= (q+d)) && (x /= (q-d)) && (safe x (d+1) l)
gen 0 nq = [[]]
gen n nq = flatMap (\b ->
              flatMap (\q -> if (safe q 1 b) then [q:b] else []) [1..nq]
            ) (gen (n-1) nq)
flatMap f [] = []
flatMap f (h:t) = append (f h) (flatMap f t)
append [] ys = ys
append (h:t) ys = h:(append t ys)
nsoln nq = length (gen nq nq)
testQueenUsingFlatMapBuiltInType n = nsoln n
testQueenUsingFlatMapBuiltInType $ primId 11
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testQueenUsingFlatMapBuiltInType_lh^167(primId⁰(11))
//│ def append_lh(_lh_append_arg1⁰, _lh_append_arg2⁰) = case _lh_append_arg1⁰ of {
//│ 	LH_N  => _lh_append_arg2⁰
//│ 	| LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => [LH_C _lh_append_LH_C_0⁰ append_lh^157(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)]
//│ 	| _  => error⁰}
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^7((a⁰ + 1), b⁰)] else [LH_N]
//│ def flatMap_lh(_lh_flatMap_arg1⁰, _lh_flatMap_arg2⁰) = case _lh_flatMap_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => append_lh^96(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh^101(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def gen_lh(_lh_gen_arg1⁰, _lh_gen_arg2⁰) = case _lh_gen_arg1⁰ of {
//│ 	0  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => flatMap_lh^115((fun b¹ -> flatMap_lh^116((fun q⁰ -> if safe_lh^117(q⁰, 1, b¹) then [LH_C [LH_C q⁰ b¹] [LH_N]] else [LH_N]), enumFromTo_lh^133(1, _lh_gen_arg2⁰))), gen_lh^141((_lh_gen_arg1⁰ - 1), _lh_gen_arg2⁰))}
//│ def length_lh(ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => (1 + length_lh^25(t⁰))
//│ 	| LH_N  => 0}
//│ def nsoln_lh(_lh_nsoln_arg1⁰) = length_lh^32(gen_lh^33(_lh_nsoln_arg1⁰, _lh_nsoln_arg1⁰))
//│ def safe_lh(_lh_safe_arg1⁰, _lh_safe_arg2⁰, _lh_safe_arg3⁰) = case _lh_safe_arg3⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_safe_LH_C_0⁰ _lh_safe_LH_C_1⁰ => ((((_lh_safe_arg1⁰ /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2⁰))) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2⁰))) && safe_lh^73(_lh_safe_arg1⁰, (_lh_safe_arg2⁰ + 1), _lh_safe_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def testQueenUsingFlatMapBuiltInType_lh(_lh_testQueenUsingFlatMapBuiltInType_arg1⁰) = nsoln_lh^90(_lh_testQueenUsingFlatMapBuiltInType_arg1⁰)
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec length_lh ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (1 + (length_lh t_0))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec append_lh _lh_append_arg1_0 _lh_append_arg2_0 =
//│ 		  (match _lh_append_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      _lh_append_arg2_0
//│ 		    | `LH_C(_lh_append_LH_C_0_0, _lh_append_LH_C_1_0) -> 
//│ 		      (`LH_C(_lh_append_LH_C_0_0, ((append_lh _lh_append_LH_C_1_0) _lh_append_arg2_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec enumFromTo_lh a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec safe_lh _lh_safe_arg1_0 _lh_safe_arg2_0 _lh_safe_arg3_0 =
//│ 		  (match _lh_safe_arg3_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_safe_LH_C_0_0, _lh_safe_LH_C_1_0) -> 
//│ 		      ((((_lh_safe_arg1_0 <> _lh_safe_LH_C_0_0) && (_lh_safe_arg1_0 <> (_lh_safe_LH_C_0_0 + _lh_safe_arg2_0))) && (_lh_safe_arg1_0 <> (_lh_safe_LH_C_0_0 - _lh_safe_arg2_0))) && (((safe_lh _lh_safe_arg1_0) (_lh_safe_arg2_0 + 1)) _lh_safe_LH_C_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec flatMap_lh _lh_flatMap_arg1_0 _lh_flatMap_arg2_0 =
//│ 		  (match _lh_flatMap_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_flatMap_LH_C_0_0, _lh_flatMap_LH_C_1_0) -> 
//│ 		      ((append_lh (_lh_flatMap_arg1_0 _lh_flatMap_LH_C_0_0)) ((flatMap_lh _lh_flatMap_arg1_0) _lh_flatMap_LH_C_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec gen_lh _lh_gen_arg1_0 _lh_gen_arg2_0 =
//│ 		  (match _lh_gen_arg1_0 with
//│ 		    | 0 -> 
//│ 		      (`LH_C((`LH_N), (`LH_N)))
//│ 		    | _ -> 
//│ 		      ((flatMap_lh (fun b_1 -> 
//│ 		        ((flatMap_lh (fun q_0 -> 
//│ 		          (if (((safe_lh q_0) 1) b_1) then
//│ 		            (`LH_C((`LH_C(q_0, b_1)), (`LH_N)))
//│ 		          else
//│ 		            (`LH_N)))) ((enumFromTo_lh 1) _lh_gen_arg2_0)))) ((gen_lh (_lh_gen_arg1_0 - 1)) _lh_gen_arg2_0)));;
//│ 		let rec nsoln_lh _lh_nsoln_arg1_0 =
//│ 		  (length_lh ((gen_lh _lh_nsoln_arg1_0) _lh_nsoln_arg1_0));;
//│ 		let rec testQueenUsingFlatMapBuiltInType_lh _lh_testQueenUsingFlatMapBuiltInType_arg1_0 =
//│ 		  (nsoln_lh _lh_testQueenUsingFlatMapBuiltInType_arg1_0);;
//│ 		(testQueenUsingFlatMapBuiltInType_lh 11)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 16 --->
//│ 	case _lh_flatMap_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => append_lh(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰)) | _  => error⁰}: 108
//│ [LH_N]: 17 --->
//│ 	case _lh_flatMap_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => append_lh(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰)) | _  => error⁰}: 108
//│ [LH_N]: 95 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 30
//│ 	case _lh_flatMap_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => append_lh(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰)) | _  => error⁰}: 108
//│ 	case _lh_append_arg1⁰ of {LH_N  => _lh_append_arg2⁰ | LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)] | _  => error⁰}: 164
//│ [LH_N]: 112 --->
//│ 	DeadCodeCons
//│ 	case _lh_safe_arg3⁰ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0⁰ _lh_safe_LH_C_1⁰ => ((((_lh_safe_arg1⁰ /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2⁰))) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2⁰))) && safe_lh(_lh_safe_arg1⁰, (_lh_safe_arg2⁰ + 1), _lh_safe_LH_C_1⁰)) | _  => error⁰}: 86
//│ [LH_N]: 113 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 30
//│ 	case _lh_flatMap_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => append_lh(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰)) | _  => error⁰}: 108
//│ [LH_C [LH_N] [LH_N]]: 114 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 30
//│ 	case _lh_flatMap_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => append_lh(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰)) | _  => error⁰}: 108
//│ [LH_C q⁰ b¹]: 126 --->
//│ 	DeadCodeCons
//│ 	case _lh_safe_arg3⁰ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0⁰ _lh_safe_LH_C_1⁰ => ((((_lh_safe_arg1⁰ /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2⁰))) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2⁰))) && safe_lh(_lh_safe_arg1⁰, (_lh_safe_arg2⁰ + 1), _lh_safe_LH_C_1⁰)) | _  => error⁰}: 86
//│ [LH_N]: 127 --->
//│ 	case _lh_append_arg1⁰ of {LH_N  => _lh_append_arg2⁰ | LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)] | _  => error⁰}: 164
//│ [LH_C [LH_C q⁰ b¹] [LH_N]]: 128 --->
//│ 	case _lh_append_arg1⁰ of {LH_N  => _lh_append_arg2⁰ | LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)] | _  => error⁰}: 164
//│ [LH_N]: 129 --->
//│ 	case _lh_append_arg1⁰ of {LH_N  => _lh_append_arg2⁰ | LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)] | _  => error⁰}: 164
//│ [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)]: 162 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 30
//│ 	case _lh_flatMap_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => append_lh(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰)) | _  => error⁰}: 108
//│ 	case _lh_append_arg1⁰ of {LH_N  => _lh_append_arg2⁰ | LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)] | _  => error⁰}: 164
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 30 --->
//│ 	[LH_N]: 95
//│ 	[LH_N]: 113
//│ 	[LH_C [LH_N] [LH_N]]: 114
//│ 	[LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)]: 162
//│ case _lh_safe_arg3⁰ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0⁰ _lh_safe_LH_C_1⁰ => ((((_lh_safe_arg1⁰ /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2⁰))) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2⁰))) && safe_lh(_lh_safe_arg1⁰, (_lh_safe_arg2⁰ + 1), _lh_safe_LH_C_1⁰)) | _  => error⁰}: 86 --->
//│ 	[LH_N]: 112
//│ 	[LH_C q⁰ b¹]: 126
//│ case _lh_flatMap_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => append_lh(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰)) | _  => error⁰}: 108 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 16
//│ 	[LH_N]: 17
//│ 	[LH_N]: 95
//│ 	[LH_N]: 113
//│ 	[LH_C [LH_N] [LH_N]]: 114
//│ 	[LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)]: 162
//│ case _lh_append_arg1⁰ of {LH_N  => _lh_append_arg2⁰ | LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)] | _  => error⁰}: 164 --->
//│ 	[LH_N]: 95
//│ 	[LH_N]: 127
//│ 	[LH_C [LH_C q⁰ b¹] [LH_N]]: 128
//│ 	[LH_N]: 129
//│ 	[LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)]: 162
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testQueenUsingFlatMapBuiltInType_lh(primId⁰(11))
//│ def append_lh(_lh_append_arg1¹, _lh_append_arg2¹) = case _lh_append_arg1¹ of {
//│ 	LH_N  => _lh_append_arg2¹
//│ 	| LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2¹)]
//│ 	| _  => error⁰}
//│ def enumFromTo_lh(a¹, b²) = if (a¹ <= b²) then [LH_C a¹ enumFromTo_lh((a¹ + 1), b²)] else [LH_N]
//│ def flatMap_lh(_lh_flatMap_arg1¹, _lh_flatMap_arg2¹) = case _lh_flatMap_arg2¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => append_lh(_lh_flatMap_arg1¹(_lh_flatMap_LH_C_0⁰), flatMap_lh(_lh_flatMap_arg1¹, _lh_flatMap_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def gen_lh(_lh_gen_arg1¹, _lh_gen_arg2¹) = case _lh_gen_arg1¹ of {
//│ 	0  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => flatMap_lh((fun b³ -> flatMap_lh((fun q¹ -> if safe_lh(q¹, 1, b³) then [LH_C [LH_C q¹ b³] [LH_N]] else [LH_N]), enumFromTo_lh(1, _lh_gen_arg2¹))), gen_lh((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ def length_lh(ls¹) = case ls¹ of {
//│ 	LH_C h⁰ t⁰ => (1 + length_lh(t⁰))
//│ 	| LH_N  => 0}
//│ def nsoln_lh(_lh_nsoln_arg1¹) = length_lh(gen_lh(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ def safe_lh(_lh_safe_arg1¹, _lh_safe_arg2¹, _lh_safe_arg3¹) = case _lh_safe_arg3¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_safe_LH_C_0⁰ _lh_safe_LH_C_1⁰ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2¹))) && safe_lh(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def testQueenUsingFlatMapBuiltInType_lh(_lh_testQueenUsingFlatMapBuiltInType_arg1¹) = nsoln_lh(_lh_testQueenUsingFlatMapBuiltInType_arg1¹)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<



:lhGenOCaml
:lhInHaskell
safe x d []    = True
safe x d (q:l) = (x /= q) && (x /= (q+d)) && (x /= (q-d)) && (safe x (d+1) l)
gen 0 nq = [[]]
gen n nq = [ (q:b) | b <- gen (n-1) nq, q <- [1..nq], safe q 1 b ]
nsoln nq = length (gen nq nq)
testQueenBuiltInType n = nsoln n
testQueenBuiltInType $ primId 11
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testQueenBuiltInType_lh^149(primId⁰(11))
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^7((a⁰ + 1), b⁰)] else [LH_N]
//│ def gen_lh(_lh_gen_arg1⁰, _lh_gen_arg2⁰) = case _lh_gen_arg1⁰ of {
//│ 	0  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 				let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 					LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if safe_lh^100(_lh_listcomp_fun_ls_h¹, 1, _lh_listcomp_fun_ls_h⁰) then [LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)
//│ 					| LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ 				in _lh_listcomp_fun¹(enumFromTo_lh^124(1, _lh_gen_arg2⁰))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁰(gen_lh^135((_lh_gen_arg1⁰ - 1), _lh_gen_arg2⁰))}
//│ def length_lh(ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => (1 + length_lh^25(t⁰))
//│ 	| LH_N  => 0}
//│ def nsoln_lh(_lh_nsoln_arg1⁰) = length_lh^32(gen_lh^33(_lh_nsoln_arg1⁰, _lh_nsoln_arg1⁰))
//│ def safe_lh(_lh_safe_arg1⁰, _lh_safe_arg2⁰, _lh_safe_arg3⁰) = case _lh_safe_arg3⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_safe_LH_C_0⁰ _lh_safe_LH_C_1⁰ => ((((_lh_safe_arg1⁰ /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2⁰))) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2⁰))) && safe_lh^73(_lh_safe_arg1⁰, (_lh_safe_arg2⁰ + 1), _lh_safe_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def testQueenBuiltInType_lh(_lh_testQueenBuiltInType_arg1⁰) = nsoln_lh^90(_lh_testQueenBuiltInType_arg1⁰)
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec length_lh ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (1 + (length_lh t_0))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec enumFromTo_lh a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec safe_lh _lh_safe_arg1_0 _lh_safe_arg2_0 _lh_safe_arg3_0 =
//│ 		  (match _lh_safe_arg3_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_safe_LH_C_0_0, _lh_safe_LH_C_1_0) -> 
//│ 		      ((((_lh_safe_arg1_0 <> _lh_safe_LH_C_0_0) && (_lh_safe_arg1_0 <> (_lh_safe_LH_C_0_0 + _lh_safe_arg2_0))) && (_lh_safe_arg1_0 <> (_lh_safe_LH_C_0_0 - _lh_safe_arg2_0))) && (((safe_lh _lh_safe_arg1_0) (_lh_safe_arg2_0 + 1)) _lh_safe_LH_C_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec gen_lh _lh_gen_arg1_0 _lh_gen_arg2_0 =
//│ 		  (match _lh_gen_arg1_0 with
//│ 		    | 0 -> 
//│ 		      (`LH_C((`LH_N), (`LH_N)))
//│ 		    | _ -> 
//│ 		      (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		        (match _lh_listcomp_fun_para_0 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		            (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		              (match _lh_listcomp_fun_para_1 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		                  (if (((safe_lh _lh_listcomp_fun_ls_h_1) 1) _lh_listcomp_fun_ls_h_0) then
//│ 		                    (`LH_C((`LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_h_0)), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		                  else
//│ 		                    (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))
//│ 		                | `LH_N -> 
//│ 		                  (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))) in
//│ 		              (_lh_listcomp_fun_1 ((enumFromTo_lh 1) _lh_gen_arg2_0)))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_0 ((gen_lh (_lh_gen_arg1_0 - 1)) _lh_gen_arg2_0))));;
//│ 		let rec nsoln_lh _lh_nsoln_arg1_0 =
//│ 		  (length_lh ((gen_lh _lh_nsoln_arg1_0) _lh_nsoln_arg1_0));;
//│ 		let rec testQueenBuiltInType_lh _lh_testQueenBuiltInType_arg1_0 =
//│ 		  (nsoln_lh _lh_testQueenBuiltInType_arg1_0);;
//│ 		(testQueenBuiltInType_lh 11)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 16 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if safe_lh(_lh_listcomp_fun_ls_h¹, 1, _lh_listcomp_fun_ls_h⁰) then [LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 121
//│ [LH_N]: 17 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if safe_lh(_lh_listcomp_fun_ls_h¹, 1, _lh_listcomp_fun_ls_h⁰) then [LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 121
//│ [LH_N]: 95 --->
//│ 	DeadCodeCons
//│ 	case _lh_safe_arg3⁰ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0⁰ _lh_safe_LH_C_1⁰ => ((((_lh_safe_arg1⁰ /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2⁰))) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2⁰))) && safe_lh(_lh_safe_arg1⁰, (_lh_safe_arg2⁰ + 1), _lh_safe_LH_C_1⁰)) | _  => error⁰}: 86
//│ [LH_N]: 96 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 30
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if safe_lh(_lh_listcomp_fun_ls_h¹, 1, _lh_listcomp_fun_ls_h⁰) then [LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(1, _lh_gen_arg2⁰)) | LH_N  => [LH_N]}: 132
//│ [LH_C [LH_N] [LH_N]]: 97 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 30
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if safe_lh(_lh_listcomp_fun_ls_h¹, 1, _lh_listcomp_fun_ls_h⁰) then [LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(1, _lh_gen_arg2⁰)) | LH_N  => [LH_N]}: 132
//│ [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰]: 109 --->
//│ 	DeadCodeCons
//│ 	case _lh_safe_arg3⁰ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0⁰ _lh_safe_LH_C_1⁰ => ((((_lh_safe_arg1⁰ /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2⁰))) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2⁰))) && safe_lh(_lh_safe_arg1⁰, (_lh_safe_arg2⁰ + 1), _lh_safe_LH_C_1⁰)) | _  => error⁰}: 86
//│ [LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 113 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 30
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if safe_lh(_lh_listcomp_fun_ls_h¹, 1, _lh_listcomp_fun_ls_h⁰) then [LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(1, _lh_gen_arg2⁰)) | LH_N  => [LH_N]}: 132
//│ [LH_N]: 131 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 30
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if safe_lh(_lh_listcomp_fun_ls_h¹, 1, _lh_listcomp_fun_ls_h⁰) then [LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(1, _lh_gen_arg2⁰)) | LH_N  => [LH_N]}: 132
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 30 --->
//│ 	[LH_N]: 96
//│ 	[LH_C [LH_N] [LH_N]]: 97
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 113
//│ 	[LH_N]: 131
//│ case _lh_safe_arg3⁰ of {LH_N  => [True] | LH_C _lh_safe_LH_C_0⁰ _lh_safe_LH_C_1⁰ => ((((_lh_safe_arg1⁰ /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2⁰))) && (_lh_safe_arg1⁰ /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2⁰))) && safe_lh(_lh_safe_arg1⁰, (_lh_safe_arg2⁰ + 1), _lh_safe_LH_C_1⁰)) | _  => error⁰}: 86 --->
//│ 	[LH_N]: 95
//│ 	[LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰]: 109
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if safe_lh(_lh_listcomp_fun_ls_h¹, 1, _lh_listcomp_fun_ls_h⁰) then [LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 121 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 16
//│ 	[LH_N]: 17
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if safe_lh(_lh_listcomp_fun_ls_h¹, 1, _lh_listcomp_fun_ls_h⁰) then [LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(1, _lh_gen_arg2⁰)) | LH_N  => [LH_N]}: 132 --->
//│ 	[LH_N]: 96
//│ 	[LH_C [LH_N] [LH_N]]: 97
//│ 	[LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 113
//│ 	[LH_N]: 131
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 16 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if safe_lh(_lh_listcomp_fun_ls_h¹, 1, _lh_listcomp_fun_ls_h⁰) then [LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 121
//│ [LH_N]: 17 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if safe_lh(_lh_listcomp_fun_ls_h¹, 1, _lh_listcomp_fun_ls_h⁰) then [LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 121
//│ ------------------
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if safe_lh(_lh_listcomp_fun_ls_h¹, 1, _lh_listcomp_fun_ls_h⁰) then [LH_C [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 121 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 16
//│ 	[LH_N]: 17
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testQueenBuiltInType_lh(primId⁰(11))
//│ def enumFromTo_lh(a¹, b¹) = if (a¹ <= b¹) then 
//│ 	let _lh_listcomp_fun_ls_t² = enumFromTo_lh((a¹ + 1), b¹)
//│ 	in let _lh_listcomp_fun_ls_h² = a¹
//│ 	in (fun _lh_listcomp_fun_ls_h³ -> (fun _lh_listcomp_fun² -> (fun _lh_listcomp_fun_ls_t³ -> (fun _lh_listcomp_fun³ -> if safe_lh(_lh_listcomp_fun_ls_h², 1, _lh_listcomp_fun_ls_h³) then [LH_C [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²))))) else (fun _lh_listcomp_fun_ls_h⁴ -> (fun _lh_listcomp_fun⁴ -> (fun _lh_listcomp_fun_ls_t⁴ -> (fun _lh_listcomp_fun⁵ -> _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁴)))))
//│ def gen_lh(_lh_gen_arg1¹, _lh_gen_arg2¹) = case _lh_gen_arg1¹ of {
//│ 	0  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 				let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para³ -> _lh_listcomp_fun_para³(_lh_listcomp_fun_ls_h⁰, _lh_listcomp_fun⁷, _lh_listcomp_fun_ls_t⁰, _lh_listcomp_fun⁶))
//│ 				in _lh_listcomp_fun⁷(enumFromTo_lh(1, _lh_gen_arg2¹))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁶(gen_lh((_lh_gen_arg1¹ - 1), _lh_gen_arg2¹))}
//│ def length_lh(ls¹) = case ls¹ of {
//│ 	LH_C h⁰ t⁰ => (1 + length_lh(t⁰))
//│ 	| LH_N  => 0}
//│ def nsoln_lh(_lh_nsoln_arg1¹) = length_lh(gen_lh(_lh_nsoln_arg1¹, _lh_nsoln_arg1¹))
//│ def safe_lh(_lh_safe_arg1¹, _lh_safe_arg2¹, _lh_safe_arg3¹) = case _lh_safe_arg3¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_safe_LH_C_0⁰ _lh_safe_LH_C_1⁰ => ((((_lh_safe_arg1¹ /= _lh_safe_LH_C_0⁰) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0⁰ + _lh_safe_arg2¹))) && (_lh_safe_arg1¹ /= (_lh_safe_LH_C_0⁰ - _lh_safe_arg2¹))) && safe_lh(_lh_safe_arg1¹, (_lh_safe_arg2¹ + 1), _lh_safe_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def testQueenBuiltInType_lh(_lh_testQueenBuiltInType_arg1¹) = nsoln_lh(_lh_testQueenBuiltInType_arg1¹)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

:lhGenOCaml
fun map(f, ls) = if ls is
  C(h, t) then C(f(h), map(f, t))
  N then N
fun enumFromTo(a, b) = if a <= b then C(a, enumFromTo(a + 1, b)) else N
fun sum(ls) = summ(0, ls)
fun summ(acc, ls) = if ls is
  N then acc
  C(h, t) then summ(acc + h, t)
fun testSumMapEnumSumAcc(n) = sum(map(x => x * x, enumFromTo(1, n)))
testSumMapEnumSumAcc(primId(300000))
//│ |#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |enumFromTo|(|a|,| |b|)| |#=| |#if| |a| |<=| |b| |#then| |C|(|a|,| |enumFromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#fun| |sum|(|ls|)| |#=| |summ|(|0|,| |ls|)|↵|#fun| |summ|(|acc|,| |ls|)| |#=| |#if| |ls| |is|→|N| |#then| |acc|↵|C|(|h|,| |t|)| |#then| |summ|(|acc| |+| |h|,| |t|)|←|↵|#fun| |testSumMapEnumSumAcc|(|n|)| |#=| |sum|(|map|(|x| |=>| |x| |*| |x|,| |enumFromTo|(|1|,| |n|)|)|)|↵|testSumMapEnumSumAcc|(|primId|(|300000|)|)|
//│ Parsed: {fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun enumFromTo = a, b, => if (<= (a,) (b,)) then C (a, enumFromTo (+ (a,) (1,), b,),) else N; fun sum = ls, => summ (0, ls,); fun summ = acc, ls, => if ls is ‹(N) then acc; (C (h, t,)) then summ (+ (acc,) (h,), t,)›; fun testSumMapEnumSumAcc = n, => sum (map (x, => * (x,) (x,), enumFromTo (1, n,),),); testSumMapEnumSumAcc (primId (300000,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testSumMapEnumSumAcc^72(primId⁰(300000))
//│ def enumFromTo(a⁰, b⁰) = if (a⁰ <= b⁰) then [C a⁰ enumFromTo^21((a⁰ + 1), b⁰)] else [N]
//│ def map(f⁰, ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map^5(f⁰, t⁰)]
//│ 	| N  => [N]}
//│ def sum(ls¹) = summ^35(0, ls¹)
//│ def summ(acc⁰, ls²) = case ls² of {
//│ 	N  => acc⁰
//│ 	| C h¹ t¹ => summ^43((acc⁰ + h¹), t¹)}
//│ def testSumMapEnumSumAcc(n⁰) = sum^55(map^56((fun x⁰ -> (x⁰ * x⁰)), enumFromTo^64(1, n⁰)))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`N));;
//│ 		let rec summ acc_0 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `N -> 
//│ 		      acc_0
//│ 		    | `C(h_1, t_1) -> 
//│ 		      ((summ (acc_0 + h_1)) t_1));;
//│ 		let rec map f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (`C((f_0 h_0), ((map f_0) t_0)))
//│ 		    | `N -> 
//│ 		      (`N));;
//│ 		let rec sum ls_1 =
//│ 		  ((summ 0) ls_1);;
//│ 		let rec testSumMapEnumSumAcc n_0 =
//│ 		  (sum ((map (fun x_0 -> 
//│ 		    (x_0 * x_0))) ((enumFromTo 1) n_0)));;
//│ 		(testSumMapEnumSumAcc 300000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testSumMapEnumSumAcc^72] (hopeless to continue)
//│ 	[testSumMapEnumSumAcc^72 · enumFromTo^64] (using original def)
//│ 		[testSumMapEnumSumAcc^72 · enumFromTo^64 · enumFromTo^21] ---> [testSumMapEnumSumAcc^72 · enumFromTo^64] (using original def)
//│ 	[testSumMapEnumSumAcc^72 · map^56] (using original def)
//│ 		[testSumMapEnumSumAcc^72 · map^56 · map^5] ---> [testSumMapEnumSumAcc^72 · map^56] (using original def)
//│ 	[testSumMapEnumSumAcc^72 · sum^55] (using original def)
//│ 		[testSumMapEnumSumAcc^72 · sum^55 · summ^35] (using original def)
//│ 			[testSumMapEnumSumAcc^72 · sum^55 · summ^35 · summ^43] ---> [testSumMapEnumSumAcc^72 · sum^55 · summ^35] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testSumMapEnumSumAcc_₀(primId⁰(300000))
//│ def testSumMapEnumSumAcc_₀(n¹) = 
//│ 	sum_₀(map_₀((fun x¹ -> (x¹ * x¹)), enumFromTo_₀(1, n¹)))
//│ 	where
//│ 	def enumFromTo_₀(a¹, b¹) = 
//│ 		if (a¹ <= b¹) then [C a¹ enumFromTo_₀((a¹ + 1), b¹)] else [N]
//│ 	def map_₀(f¹, ls³) = 
//│ 		case ls³ of {
//│ 			C h² t² => [C f¹(h²) map_₀(f¹, t²)]
//│ 			| N  => [N]}
//│ 	def sum_₀(ls⁵) = 
//│ 		summ_₀(0, ls⁵)
//│ 		where
//│ 		def summ_₀(acc¹, ls⁴) = 
//│ 			case ls⁴ of {
//│ 				N  => acc¹
//│ 				| C h³ t³ => summ_₀((acc¹ + h³), t³)}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C a¹ enumFromTo_₀((a¹ + 1), b¹)]: 92 --->
//│ 	case ls³ of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 108
//│ [N]: 93 --->
//│ 	case ls³ of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 108
//│ [C f¹(h²) map_₀(f¹, t²)]: 106 --->
//│ 	case ls⁴ of {N  => acc¹ | C h³ t³ => summ_₀((acc¹ + h³), t³)}: 122
//│ [N]: 107 --->
//│ 	case ls⁴ of {N  => acc¹ | C h³ t³ => summ_₀((acc¹ + h³), t³)}: 122
//│ ------------------
//│ case ls³ of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 108 --->
//│ 	[C a¹ enumFromTo_₀((a¹ + 1), b¹)]: 92
//│ 	[N]: 93
//│ case ls⁴ of {N  => acc¹ | C h³ t³ => summ_₀((acc¹ + h³), t³)}: 122 --->
//│ 	[C f¹(h²) map_₀(f¹, t²)]: 106
//│ 	[N]: 107
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C a¹ enumFromTo_₀((a¹ + 1), b¹)]: 92 --->
//│ 	case ls³ of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 108
//│ [N]: 93 --->
//│ 	case ls³ of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 108
//│ [C f¹(h²) map_₀(f¹, t²)]: 106 --->
//│ 	case ls⁴ of {N  => acc¹ | C h³ t³ => summ_₀((acc¹ + h³), t³)}: 122
//│ [N]: 107 --->
//│ 	case ls⁴ of {N  => acc¹ | C h³ t³ => summ_₀((acc¹ + h³), t³)}: 122
//│ ------------------
//│ case ls³ of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 108 --->
//│ 	[C a¹ enumFromTo_₀((a¹ + 1), b¹)]: 92
//│ 	[N]: 93
//│ case ls⁴ of {N  => acc¹ | C h³ t³ => summ_₀((acc¹ + h³), t³)}: 122 --->
//│ 	[C f¹(h²) map_₀(f¹, t²)]: 106
//│ 	[N]: 107
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testSumMapEnumSumAcc_₀(primId⁰(300000))
//│ def testSumMapEnumSumAcc_₀(n²) = 
//│ 	sum_₀(map_₀((fun x² -> (x² * x²)), enumFromTo_₀(1, n²)))
//│ 	where
//│ 	def enumFromTo_₀(a², b²) = 
//│ 		if (a² <= b²) then 
//│ 			let t⁴ = enumFromTo_₀((a² + 1), b²)
//│ 			in let h⁴ = a²
//│ 			in (fun f³ -> 
//│ 				let t⁵ = map_₀(f³, t⁴)
//│ 				in let h⁵ = f³(h⁴)
//│ 				in (fun acc² -> summ_₀((acc² + h⁵), t⁵))) else (fun f⁴ -> (fun acc³ -> acc³))
//│ 	def map_₀(f², ls⁶) = 
//│ 		ls⁶(f²)
//│ 	def sum_₀(ls⁷) = 
//│ 		summ_₀(0, ls⁷)
//│ 		where
//│ 		def summ_₀(acc⁴, ls⁸) = 
//│ 			ls⁸(acc⁴)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


:lhGenOCaml
fun map(f, ls) = if ls is
  C(h, t) then C(f(h), map(f, t))
  N then N
fun enumFromTo(a, b) = if a <= b then C(a, enumFromTo(a + 1, b)) else N
fun sum(ls) = if ls is
  C(h, t) then h + sum(t)
  N then 0
fun testSumMapEnum(n) = sum(map(x => x * x, enumFromTo(1, n)))
testSumMapEnum(primId(300000))
//│ |#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |enumFromTo|(|a|,| |b|)| |#=| |#if| |a| |<=| |b| |#then| |C|(|a|,| |enumFromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#fun| |sum|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |h| |+| |sum|(|t|)|↵|N| |#then| |0|←|↵|#fun| |testSumMapEnum|(|n|)| |#=| |sum|(|map|(|x| |=>| |x| |*| |x|,| |enumFromTo|(|1|,| |n|)|)|)|↵|testSumMapEnum|(|primId|(|300000|)|)|
//│ Parsed: {fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun enumFromTo = a, b, => if (<= (a,) (b,)) then C (a, enumFromTo (+ (a,) (1,), b,),) else N; fun sum = ls, => if ls is ‹(C (h, t,)) then + (h,) (sum (t,),); (N) then 0›; fun testSumMapEnum = n, => sum (map (x, => * (x,) (x,), enumFromTo (1, n,),),); testSumMapEnum (primId (300000,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testSumMapEnum^63(primId⁰(300000))
//│ def enumFromTo(a⁰, b⁰) = if (a⁰ <= b⁰) then [C a⁰ enumFromTo^21((a⁰ + 1), b⁰)] else [N]
//│ def map(f⁰, ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map^5(f⁰, t⁰)]
//│ 	| N  => [N]}
//│ def sum(ls¹) = case ls¹ of {
//│ 	C h¹ t¹ => (h¹ + sum^39(t¹))
//│ 	| N  => 0}
//│ def testSumMapEnum(n⁰) = sum^46(map^47((fun x⁰ -> (x⁰ * x⁰)), enumFromTo^55(1, n⁰)))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec sum ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `C(h_1, t_1) -> 
//│ 		      (h_1 + (sum t_1))
//│ 		    | `N -> 
//│ 		      0);;
//│ 		let rec enumFromTo a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`N));;
//│ 		let rec map f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (`C((f_0 h_0), ((map f_0) t_0)))
//│ 		    | `N -> 
//│ 		      (`N));;
//│ 		let rec testSumMapEnum n_0 =
//│ 		  (sum ((map (fun x_0 -> 
//│ 		    (x_0 * x_0))) ((enumFromTo 1) n_0)));;
//│ 		(testSumMapEnum 300000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testSumMapEnum^63] (hopeless to continue)
//│ 	[testSumMapEnum^63 · enumFromTo^55] (using original def)
//│ 		[testSumMapEnum^63 · enumFromTo^55 · enumFromTo^21] ---> [testSumMapEnum^63 · enumFromTo^55] (using original def)
//│ 	[testSumMapEnum^63 · map^47] (using original def)
//│ 		[testSumMapEnum^63 · map^47 · map^5] ---> [testSumMapEnum^63 · map^47] (using original def)
//│ 	[testSumMapEnum^63 · sum^46] (using original def)
//│ 		[testSumMapEnum^63 · sum^46 · sum^39] ---> [testSumMapEnum^63 · sum^46] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testSumMapEnum_₀(primId⁰(300000))
//│ def testSumMapEnum_₀(n¹) = 
//│ 	sum_₀(map_₀((fun x¹ -> (x¹ * x¹)), enumFromTo_₀(1, n¹)))
//│ 	where
//│ 	def enumFromTo_₀(a¹, b¹) = 
//│ 		if (a¹ <= b¹) then [C a¹ enumFromTo_₀((a¹ + 1), b¹)] else [N]
//│ 	def map_₀(f¹, ls²) = 
//│ 		case ls² of {
//│ 			C h² t² => [C f¹(h²) map_₀(f¹, t²)]
//│ 			| N  => [N]}
//│ 	def sum_₀(ls³) = 
//│ 		case ls³ of {
//│ 			C h³ t³ => (h³ + sum_₀(t³))
//│ 			| N  => 0}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C f¹(h²) map_₀(f¹, t²)]: 94 --->
//│ 	case ls³ of {C h³ t³ => (h³ + sum_₀(t³)) | N  => 0}: 128
//│ [N]: 95 --->
//│ 	case ls³ of {C h³ t³ => (h³ + sum_₀(t³)) | N  => 0}: 128
//│ [C a¹ enumFromTo_₀((a¹ + 1), b¹)]: 114 --->
//│ 	case ls² of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 96
//│ [N]: 115 --->
//│ 	case ls² of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 96
//│ ------------------
//│ case ls² of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 96 --->
//│ 	[C a¹ enumFromTo_₀((a¹ + 1), b¹)]: 114
//│ 	[N]: 115
//│ case ls³ of {C h³ t³ => (h³ + sum_₀(t³)) | N  => 0}: 128 --->
//│ 	[C f¹(h²) map_₀(f¹, t²)]: 94
//│ 	[N]: 95
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C f¹(h²) map_₀(f¹, t²)]: 94 --->
//│ 	case ls³ of {C h³ t³ => (h³ + sum_₀(t³)) | N  => 0}: 128
//│ [N]: 95 --->
//│ 	case ls³ of {C h³ t³ => (h³ + sum_₀(t³)) | N  => 0}: 128
//│ [C a¹ enumFromTo_₀((a¹ + 1), b¹)]: 114 --->
//│ 	case ls² of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 96
//│ [N]: 115 --->
//│ 	case ls² of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 96
//│ ------------------
//│ case ls² of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 96 --->
//│ 	[C a¹ enumFromTo_₀((a¹ + 1), b¹)]: 114
//│ 	[N]: 115
//│ case ls³ of {C h³ t³ => (h³ + sum_₀(t³)) | N  => 0}: 128 --->
//│ 	[C f¹(h²) map_₀(f¹, t²)]: 94
//│ 	[N]: 95
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testSumMapEnum_₀(primId⁰(300000))
//│ def testSumMapEnum_₀(n²) = 
//│ 	sum_₀(map_₀((fun x² -> (x² * x²)), enumFromTo_₀(1, n²)))
//│ 	where
//│ 	def enumFromTo_₀(a², b²) = 
//│ 		if (a² <= b²) then 
//│ 			let t⁴ = enumFromTo_₀((a² + 1), b²)
//│ 			in let h⁴ = a²
//│ 			in (fun f³ -> 
//│ 				let t⁵ = map_₀(f³, t⁴)
//│ 				in let h⁵ = f³(h⁴)
//│ 				in (fun _lh_dummy⁰ -> (h⁵ + sum_₀(t⁵)))) else (fun f⁴ -> (fun _lh_dummy¹ -> 0))
//│ 	def map_₀(f², ls⁴) = 
//│ 		ls⁴(f²)
//│ 	def sum_₀(ls⁵) = 
//│ 		ls⁵(99)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

:lhGenOCaml
:lhInHaskell
and [] = True
and (h:t) = if h then and t else False
append [] ys = ys
append (h:t) ys = h:(append t ys)
queens 0 = [[]]
queens m = [ append p [n] | p <- queens (m - 1), n <- [1 .. 9], safe p n]
safe p n = let m = (length p) + 1 in (and [ (j /= n) && ((i + j) /= (m + n)) && ((i - j) /= (m - n)) | (i, j) <- zip [1..(m - 1)] p ])
testAnotherQueenNineBuiltInType n = length $ queens n
testAnotherQueenNineBuiltInType $ primId 9
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testAnotherQueenNineBuiltInType_lh^211(primId⁰(9))
//│ def and_lh(_lh_and_arg1⁰) = case _lh_and_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_and_LH_C_0⁰ _lh_and_LH_C_1⁰ => if _lh_and_LH_C_0⁰ then and_lh^190(_lh_and_LH_C_1⁰) else [False]
//│ 	| _  => error⁰}
//│ def append_lh(_lh_append_arg1⁰, _lh_append_arg2⁰) = case _lh_append_arg1⁰ of {
//│ 	LH_N  => _lh_append_arg2⁰
//│ 	| LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => [LH_C _lh_append_LH_C_0⁰ append_lh^201(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)]
//│ 	| _  => error⁰}
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^24((a⁰ + 1), b⁰)] else [LH_N]
//│ def length_lh(ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => (1 + length_lh^42(t⁰))
//│ 	| LH_N  => 0}
//│ def queens_lh(_lh_queens_arg1⁰) = case _lh_queens_arg1⁰ of {
//│ 	0  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => 
//│ 				let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 					LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if safe_lh^139(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h²) then [LH_C append_lh^144(_lh_listcomp_fun_ls_h¹, [LH_C _lh_listcomp_fun_ls_h² [LH_N]]) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)
//│ 					| LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ 				in _lh_listcomp_fun²(enumFromTo_lh^165(1, 9))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun¹(queens_lh^176((_lh_queens_arg1⁰ - 1)))}
//│ def safe_lh(_lh_safe_arg1⁰, _lh_safe_arg2⁰) = 
//│ 	let m⁰ = (length_lh^56(_lh_safe_arg1⁰) + 1)
//│ 	in and_lh^62(
//│ 		let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {
//│ 				LH_P2 _lh_safe_LH_P2_0⁰ _lh_safe_LH_P2_1⁰ => [LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 				| _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁰(zip_lh^114(enumFromTo_lh^115(1, (m⁰ - 1)), _lh_safe_arg1⁰)))
//│ def testAnotherQueenNineBuiltInType_lh(_lh_testAnotherQueenNineBuiltInType_arg1⁰) = length_lh^49(queens_lh^50(_lh_testAnotherQueenNineBuiltInType_arg1⁰))
//│ def zip_lh(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C hx⁰ tx⁰ => case ys⁰ of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh^6(tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec append_lh _lh_append_arg1_0 _lh_append_arg2_0 =
//│ 		  (match _lh_append_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      _lh_append_arg2_0
//│ 		    | `LH_C(_lh_append_LH_C_0_0, _lh_append_LH_C_1_0) -> 
//│ 		      (`LH_C(_lh_append_LH_C_0_0, ((append_lh _lh_append_LH_C_1_0) _lh_append_arg2_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec enumFromTo_lh a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec zip_lh xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(hx_0, tx_0) -> 
//│ 		      (match ys_0 with
//│ 		        | `LH_C(hy_0, ty_0) -> 
//│ 		          (`LH_C((`LH_P2(hx_0, hy_0)), ((zip_lh tx_0) ty_0)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec length_lh ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (1 + (length_lh t_0))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec and_lh _lh_and_arg1_0 =
//│ 		  (match _lh_and_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_and_LH_C_0_0, _lh_and_LH_C_1_0) -> 
//│ 		      (if _lh_and_LH_C_0_0 then
//│ 		        (and_lh _lh_and_LH_C_1_0)
//│ 		      else
//│ 		        false)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec safe_lh _lh_safe_arg1_0 _lh_safe_arg2_0 =
//│ 		  (let rec m_0 = ((length_lh _lh_safe_arg1_0) + 1) in
//│ 		    (and_lh (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		      (match _lh_listcomp_fun_para_0 with
//│ 		        | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		          (match _lh_listcomp_fun_ls_h_0 with
//│ 		            | `LH_P2(_lh_safe_LH_P2_0_0, _lh_safe_LH_P2_1_0) -> 
//│ 		              (`LH_C((((_lh_safe_LH_P2_1_0 <> _lh_safe_arg2_0) && ((_lh_safe_LH_P2_0_0 + _lh_safe_LH_P2_1_0) <> (m_0 + _lh_safe_arg2_0))) && ((_lh_safe_LH_P2_0_0 - _lh_safe_LH_P2_1_0) <> (m_0 - _lh_safe_arg2_0))), (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		            | _ -> 
//│ 		              (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))) in
//│ 		      (_lh_listcomp_fun_0 ((zip_lh ((enumFromTo_lh 1) (m_0 - 1))) _lh_safe_arg1_0)))));;
//│ 		let rec queens_lh _lh_queens_arg1_0 =
//│ 		  (match _lh_queens_arg1_0 with
//│ 		    | 0 -> 
//│ 		      (`LH_C((`LH_N), (`LH_N)))
//│ 		    | _ -> 
//│ 		      (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		        (match _lh_listcomp_fun_para_1 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		            (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		              (match _lh_listcomp_fun_para_2 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		                  (if ((safe_lh _lh_listcomp_fun_ls_h_1) _lh_listcomp_fun_ls_h_2) then
//│ 		                    (`LH_C(((append_lh _lh_listcomp_fun_ls_h_1) (`LH_C(_lh_listcomp_fun_ls_h_2, (`LH_N)))), (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2)))
//│ 		                  else
//│ 		                    (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2))
//│ 		                | `LH_N -> 
//│ 		                  (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))) in
//│ 		              (_lh_listcomp_fun_2 ((enumFromTo_lh 1) 9)))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_1 (queens_lh (_lh_queens_arg1_0 - 1)))));;
//│ 		let rec testAnotherQueenNineBuiltInType_lh _lh_testAnotherQueenNineBuiltInType_arg1_0 =
//│ 		  (length_lh (queens_lh _lh_testAnotherQueenNineBuiltInType_arg1_0));;
//│ 		(testAnotherQueenNineBuiltInType_lh 9)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_P2 hx⁰ hy⁰]: 5 --->
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_safe_LH_P2_0⁰ _lh_safe_LH_P2_1⁰ => [LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 109
//│ [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)]: 11 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_safe_LH_P2_0⁰ _lh_safe_LH_P2_1⁰ => [LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 111
//│ [LH_N]: 12 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_safe_LH_P2_0⁰ _lh_safe_LH_P2_1⁰ => [LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 111
//│ [LH_N]: 14 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_safe_LH_P2_0⁰ _lh_safe_LH_P2_1⁰ => [LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 111
//│ [LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 33 --->
//│ 	case xs⁰ of {LH_C hx⁰ tx⁰ => case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 15
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if safe_lh(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h²) then [LH_C append_lh(_lh_listcomp_fun_ls_h¹, [LH_C _lh_listcomp_fun_ls_h² [LH_N]]) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 162
//│ [LH_N]: 34 --->
//│ 	case xs⁰ of {LH_C hx⁰ tx⁰ => case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 15
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if safe_lh(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h²) then [LH_C append_lh(_lh_listcomp_fun_ls_h¹, [LH_C _lh_listcomp_fun_ls_h² [LH_N]]) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 162
//│ [LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 105 --->
//│ 	case _lh_and_arg1⁰ of {LH_N  => [True] | LH_C _lh_and_LH_C_0⁰ _lh_and_LH_C_1⁰ => if _lh_and_LH_C_0⁰ then and_lh(_lh_and_LH_C_1⁰) else [False] | _  => error⁰}: 196
//│ [LH_N]: 110 --->
//│ 	case _lh_and_arg1⁰ of {LH_N  => [True] | LH_C _lh_and_LH_C_0⁰ _lh_and_LH_C_1⁰ => if _lh_and_LH_C_0⁰ then and_lh(_lh_and_LH_C_1⁰) else [False] | _  => error⁰}: 196
//│ [LH_N]: 134 --->
//│ 	DeadCodeCons
//│ 	case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 13
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 47
//│ 	case _lh_append_arg1⁰ of {LH_N  => _lh_append_arg2⁰ | LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)] | _  => error⁰}: 208
//│ [LH_N]: 135 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 47
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if safe_lh(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h²) then [LH_C append_lh(_lh_listcomp_fun_ls_h¹, [LH_C _lh_listcomp_fun_ls_h² [LH_N]]) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(1, 9)) | LH_N  => [LH_N]}: 173
//│ [LH_C [LH_N] [LH_N]]: 136 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 47
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if safe_lh(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h²) then [LH_C append_lh(_lh_listcomp_fun_ls_h¹, [LH_C _lh_listcomp_fun_ls_h² [LH_N]]) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(1, 9)) | LH_N  => [LH_N]}: 173
//│ [LH_N]: 148 --->
//│ 	DeadCodeCons
//│ 	case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 13
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 47
//│ 	case _lh_append_arg1⁰ of {LH_N  => _lh_append_arg2⁰ | LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)] | _  => error⁰}: 208
//│ [LH_C _lh_listcomp_fun_ls_h² [LH_N]]: 149 --->
//│ 	DeadCodeCons
//│ 	case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 13
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 47
//│ 	case _lh_append_arg1⁰ of {LH_N  => _lh_append_arg2⁰ | LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)] | _  => error⁰}: 208
//│ [LH_C append_lh(_lh_listcomp_fun_ls_h¹, [LH_C _lh_listcomp_fun_ls_h² [LH_N]]) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 154 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 47
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if safe_lh(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h²) then [LH_C append_lh(_lh_listcomp_fun_ls_h¹, [LH_C _lh_listcomp_fun_ls_h² [LH_N]]) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(1, 9)) | LH_N  => [LH_N]}: 173
//│ [LH_N]: 172 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 47
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if safe_lh(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h²) then [LH_C append_lh(_lh_listcomp_fun_ls_h¹, [LH_C _lh_listcomp_fun_ls_h² [LH_N]]) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(1, 9)) | LH_N  => [LH_N]}: 173
//│ [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)]: 206 --->
//│ 	DeadCodeCons
//│ 	case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 13
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 47
//│ 	case _lh_append_arg1⁰ of {LH_N  => _lh_append_arg2⁰ | LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)] | _  => error⁰}: 208
//│ ------------------
//│ case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 13 --->
//│ 	[LH_N]: 134
//│ 	[LH_N]: 148
//│ 	[LH_C _lh_listcomp_fun_ls_h² [LH_N]]: 149
//│ 	[LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)]: 206
//│ case xs⁰ of {LH_C hx⁰ tx⁰ => case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 15 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 33
//│ 	[LH_N]: 34
//│ case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh(t⁰)) | LH_N  => 0}: 47 --->
//│ 	[LH_N]: 134
//│ 	[LH_N]: 135
//│ 	[LH_C [LH_N] [LH_N]]: 136
//│ 	[LH_N]: 148
//│ 	[LH_C _lh_listcomp_fun_ls_h² [LH_N]]: 149
//│ 	[LH_C append_lh(_lh_listcomp_fun_ls_h¹, [LH_C _lh_listcomp_fun_ls_h² [LH_N]]) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 154
//│ 	[LH_N]: 172
//│ 	[LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)]: 206
//│ case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_safe_LH_P2_0⁰ _lh_safe_LH_P2_1⁰ => [LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 109 --->
//│ 	[LH_P2 hx⁰ hy⁰]: 5
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_safe_LH_P2_0⁰ _lh_safe_LH_P2_1⁰ => [LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 111 --->
//│ 	[LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)]: 11
//│ 	[LH_N]: 12
//│ 	[LH_N]: 14
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if safe_lh(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h²) then [LH_C append_lh(_lh_listcomp_fun_ls_h¹, [LH_C _lh_listcomp_fun_ls_h² [LH_N]]) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 162 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 33
//│ 	[LH_N]: 34
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if safe_lh(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h²) then [LH_C append_lh(_lh_listcomp_fun_ls_h¹, [LH_C _lh_listcomp_fun_ls_h² [LH_N]]) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(1, 9)) | LH_N  => [LH_N]}: 173 --->
//│ 	[LH_N]: 135
//│ 	[LH_C [LH_N] [LH_N]]: 136
//│ 	[LH_C append_lh(_lh_listcomp_fun_ls_h¹, [LH_C _lh_listcomp_fun_ls_h² [LH_N]]) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 154
//│ 	[LH_N]: 172
//│ case _lh_and_arg1⁰ of {LH_N  => [True] | LH_C _lh_and_LH_C_0⁰ _lh_and_LH_C_1⁰ => if _lh_and_LH_C_0⁰ then and_lh(_lh_and_LH_C_1⁰) else [False] | _  => error⁰}: 196 --->
//│ 	[LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 105
//│ 	[LH_N]: 110
//│ case _lh_append_arg1⁰ of {LH_N  => _lh_append_arg2⁰ | LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)] | _  => error⁰}: 208 --->
//│ 	[LH_N]: 134
//│ 	[LH_N]: 148
//│ 	[LH_C _lh_listcomp_fun_ls_h² [LH_N]]: 149
//│ 	[LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)]: 206
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_P2 hx⁰ hy⁰]: 5 --->
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_safe_LH_P2_0⁰ _lh_safe_LH_P2_1⁰ => [LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 109
//│ [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)]: 11 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_safe_LH_P2_0⁰ _lh_safe_LH_P2_1⁰ => [LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 111
//│ [LH_N]: 12 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_safe_LH_P2_0⁰ _lh_safe_LH_P2_1⁰ => [LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 111
//│ [LH_N]: 14 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_safe_LH_P2_0⁰ _lh_safe_LH_P2_1⁰ => [LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 111
//│ [LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 105 --->
//│ 	case _lh_and_arg1⁰ of {LH_N  => [True] | LH_C _lh_and_LH_C_0⁰ _lh_and_LH_C_1⁰ => if _lh_and_LH_C_0⁰ then and_lh(_lh_and_LH_C_1⁰) else [False] | _  => error⁰}: 196
//│ [LH_N]: 110 --->
//│ 	case _lh_and_arg1⁰ of {LH_N  => [True] | LH_C _lh_and_LH_C_0⁰ _lh_and_LH_C_1⁰ => if _lh_and_LH_C_0⁰ then and_lh(_lh_and_LH_C_1⁰) else [False] | _  => error⁰}: 196
//│ ------------------
//│ case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_safe_LH_P2_0⁰ _lh_safe_LH_P2_1⁰ => [LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 109 --->
//│ 	[LH_P2 hx⁰ hy⁰]: 5
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_safe_LH_P2_0⁰ _lh_safe_LH_P2_1⁰ => [LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 111 --->
//│ 	[LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)]: 11
//│ 	[LH_N]: 12
//│ 	[LH_N]: 14
//│ case _lh_and_arg1⁰ of {LH_N  => [True] | LH_C _lh_and_LH_C_0⁰ _lh_and_LH_C_1⁰ => if _lh_and_LH_C_0⁰ then and_lh(_lh_and_LH_C_1⁰) else [False] | _  => error⁰}: 196 --->
//│ 	[LH_C (((_lh_safe_LH_P2_1⁰ /= _lh_safe_arg2⁰) && ((_lh_safe_LH_P2_0⁰ + _lh_safe_LH_P2_1⁰) /= (m⁰ + _lh_safe_arg2⁰))) && ((_lh_safe_LH_P2_0⁰ - _lh_safe_LH_P2_1⁰) /= (m⁰ - _lh_safe_arg2⁰))) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 105
//│ 	[LH_N]: 110
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testAnotherQueenNineBuiltInType_lh(primId⁰(9))
//│ def and_lh(_lh_and_arg1¹) = _lh_and_arg1¹(99)
//│ def append_lh(_lh_append_arg1¹, _lh_append_arg2¹) = case _lh_append_arg1¹ of {
//│ 	LH_N  => _lh_append_arg2¹
//│ 	| LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2¹)]
//│ 	| _  => error⁰}
//│ def enumFromTo_lh(a¹, b¹) = if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh((a¹ + 1), b¹)] else [LH_N]
//│ def length_lh(ls¹) = case ls¹ of {
//│ 	LH_C h⁰ t⁰ => (1 + length_lh(t⁰))
//│ 	| LH_N  => 0}
//│ def queens_lh(_lh_queens_arg1¹) = case _lh_queens_arg1¹ of {
//│ 	0  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => 
//│ 				let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 					LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if safe_lh(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h²) then [LH_C append_lh(_lh_listcomp_fun_ls_h¹, [LH_C _lh_listcomp_fun_ls_h² [LH_N]]) _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t²)
//│ 					| LH_N  => _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t¹)})
//│ 				in _lh_listcomp_fun⁹(enumFromTo_lh(1, 9))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁸(queens_lh((_lh_queens_arg1¹ - 1)))}
//│ def safe_lh(_lh_safe_arg1¹, _lh_safe_arg2¹) = 
//│ 	let m¹ = (length_lh(_lh_safe_arg1¹) + 1)
//│ 	in and_lh(
//│ 		let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> _lh_listcomp_fun_para³(_lh_listcomp_fun³, _lh_safe_arg2¹, m¹))
//│ 		in _lh_listcomp_fun³(zip_lh(enumFromTo_lh(1, (m¹ - 1)), _lh_safe_arg1¹)))
//│ def testAnotherQueenNineBuiltInType_lh(_lh_testAnotherQueenNineBuiltInType_arg1¹) = length_lh(queens_lh(_lh_testAnotherQueenNineBuiltInType_arg1¹))
//│ def zip_lh(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C hx⁰ tx⁰ => case ys¹ of {
//│ 		LH_C hy⁰ ty⁰ => 
//│ 			let _lh_listcomp_fun_ls_t³ = zip_lh(tx⁰, ty⁰)
//│ 			in let _lh_listcomp_fun_ls_h³ = 	
//│ 				let _lh_safe_LH_P2_1¹ = hy⁰
//│ 				in let _lh_safe_LH_P2_0¹ = hx⁰
//│ 				in (fun _lh_listcomp_fun_ls_t⁴ -> (fun _lh_listcomp_fun⁵ -> (fun _lh_safe_arg2³ -> (fun m³ -> 
//│ 					let _lh_and_LH_C_1¹ = _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁴)
//│ 					in let _lh_and_LH_C_0¹ = (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2³) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m³ + _lh_safe_arg2³))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m³ - _lh_safe_arg2³)))
//│ 					in (fun _lh_dummy⁰ -> if _lh_and_LH_C_0¹ then and_lh(_lh_and_LH_C_1¹) else [False])))))
//│ 			in (fun _lh_listcomp_fun⁴ -> (fun _lh_safe_arg2² -> (fun m² -> _lh_listcomp_fun_ls_h³(_lh_listcomp_fun_ls_t³, _lh_listcomp_fun⁴, _lh_safe_arg2², m²))))
//│ 		| LH_N  => (fun _lh_listcomp_fun⁶ -> (fun _lh_safe_arg2⁴ -> (fun m⁴ -> (fun _lh_dummy¹ -> [True]))))}
//│ 	| LH_N  => (fun _lh_listcomp_fun⁷ -> (fun _lh_safe_arg2⁵ -> (fun m⁵ -> (fun _lh_dummy² -> [True]))))}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ ~~~~~~~~~~~~~~~~~~~~~~~ NEXT ITERATION ~~~~~~~~~~~~~~~~~~~~~~~
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testAnotherQueenNineBuiltInType_lh^1] (hopeless to continue)
//│ 	[testAnotherQueenNineBuiltInType_lh^1 · length_lh^39] (using original def)
//│ 		[testAnotherQueenNineBuiltInType_lh^1 · length_lh^39 · length_lh^85] ---> [testAnotherQueenNineBuiltInType_lh^1 · length_lh^39] (using original def)
//│ 	[testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40] (using original def)
//│ 		[testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · append_lh^199] (using original def)
//│ 			[testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · append_lh^199 · append_lh^29] ---> [testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · append_lh^199] (using original def)
//│ 		[testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · enumFromTo_lh^220] (using original def)
//│ 			[testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · enumFromTo_lh^220 · enumFromTo_lh^12] ---> [testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · enumFromTo_lh^220] (using original def)
//│ 		[testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · queens_lh^231] ---> [testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40] (using original def)
//│ 		[testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · safe_lh^194] (using original def)
//│ 			[testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · safe_lh^194 · and_lh^52] (using original def)
//│ 			[testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · safe_lh^194 · enumFromTo_lh^63] (using original def)
//│ 				[testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · safe_lh^194 · enumFromTo_lh^63 · enumFromTo_lh^12] ---> [testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · safe_lh^194 · enumFromTo_lh^63] (using original def)
//│ 			[testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · safe_lh^194 · length_lh^46] (using original def)
//│ 				[testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · safe_lh^194 · length_lh^46 · length_lh^85] ---> [testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · safe_lh^194 · length_lh^46] (using original def)
//│ 			[testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · safe_lh^194 · zip_lh^62] (using original def)
//│ 				[testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · safe_lh^194 · zip_lh^62 · and_lh^146] (using original def)
//│ 				[testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · safe_lh^194 · zip_lh^62 · zip_lh^98] ---> [testAnotherQueenNineBuiltInType_lh^1 · queens_lh^40 · safe_lh^194 · zip_lh^62] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testAnotherQueenNineBuiltInType_lh_₀(primId⁰(9))
//│ def testAnotherQueenNineBuiltInType_lh_₀(_lh_testAnotherQueenNineBuiltInType_arg1¹) = 
//│ 	length_lh_₀(queens_lh_₀(_lh_testAnotherQueenNineBuiltInType_arg1¹))
//│ 	where
//│ 	def length_lh_₀(ls²) = 
//│ 		case ls² of {
//│ 			LH_C h² t² => (1 + length_lh_₀(t²))
//│ 			| LH_N  => 0}
//│ 	def queens_lh_₀(_lh_queens_arg1¹) = 
//│ 		case _lh_queens_arg1¹ of {
//│ 			0  => [LH_C [LH_N] [LH_N]]
//│ 			| _  => 
//│ 				let _lh_listcomp_fun¹² = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 					LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁶ => 
//│ 						let _lh_listcomp_fun¹³ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 							LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁷ => if safe_lh_₀(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun_ls_h⁵) then [LH_C append_lh_₀(_lh_listcomp_fun_ls_h⁴, [LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)
//│ 							| LH_N  => _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁶)})
//│ 						in _lh_listcomp_fun¹³(enumFromTo_lh_₀(1, 9))
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun¹²(queens_lh_₀((_lh_queens_arg1¹ - 1)))}
//│ 		where
//│ 		def append_lh_₀(_lh_append_arg1¹, _lh_append_arg2¹) = 
//│ 			case _lh_append_arg1¹ of {
//│ 				LH_N  => _lh_append_arg2¹
//│ 				| LH_C _lh_append_LH_C_0¹ _lh_append_LH_C_1¹ => [LH_C _lh_append_LH_C_0¹ append_lh_₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)]
//│ 				| _  => error⁰}
//│ 		def enumFromTo_lh_₀(a², b²) = 
//│ 			if (a² <= b²) then [LH_C a² enumFromTo_lh_₀((a² + 1), b²)] else [LH_N]
//│ 		def safe_lh_₀(_lh_safe_arg1¹, _lh_safe_arg2⁵) = 
//│ 			let m⁵ = (length_lh_₁(_lh_safe_arg1¹) + 1)
//│ 			in and_lh_₀(
//│ 				let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para³ -> _lh_listcomp_fun_para³(_lh_listcomp_fun⁷, _lh_safe_arg2⁵, m⁵))
//│ 				in _lh_listcomp_fun⁷(zip_lh_₀(enumFromTo_lh_₁(1, (m⁵ - 1)), _lh_safe_arg1¹)))
//│ 			where
//│ 			def and_lh_₀(_lh_and_arg1¹) = 
//│ 				_lh_and_arg1¹(99)
//│ 			def enumFromTo_lh_₁(a¹, b¹) = 
//│ 				if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)] else [LH_N]
//│ 			def length_lh_₁(ls¹) = 
//│ 				case ls¹ of {
//│ 					LH_C h¹ t¹ => (1 + length_lh_₁(t¹))
//│ 					| LH_N  => 0}
//│ 			def zip_lh_₀(xs¹, ys¹) = 
//│ 				case xs¹ of {
//│ 					LH_C hx¹ tx¹ => case ys¹ of {
//│ 						LH_C hy¹ ty¹ => 
//│ 							let _lh_listcomp_fun_ls_t⁴ = zip_lh_₀(tx¹, ty¹)
//│ 							in let _lh_listcomp_fun_ls_h³ = 	
//│ 								let _lh_safe_LH_P2_1¹ = hy¹
//│ 								in let _lh_safe_LH_P2_0¹ = hx¹
//│ 								in (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁸ -> (fun _lh_safe_arg2⁶ -> (fun m⁶ -> 
//│ 									let _lh_and_LH_C_1¹ = _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁵)
//│ 									in let _lh_and_LH_C_0¹ = (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2⁶) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m⁶ + _lh_safe_arg2⁶))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m⁶ - _lh_safe_arg2⁶)))
//│ 									in (fun _lh_dummy³ -> if _lh_and_LH_C_0¹ then and_lh_₁(_lh_and_LH_C_1¹) else [False])))))
//│ 							in (fun _lh_listcomp_fun⁹ -> (fun _lh_safe_arg2⁷ -> (fun m⁷ -> _lh_listcomp_fun_ls_h³(_lh_listcomp_fun_ls_t⁴, _lh_listcomp_fun⁹, _lh_safe_arg2⁷, m⁷))))
//│ 						| LH_N  => (fun _lh_listcomp_fun¹⁰ -> (fun _lh_safe_arg2⁸ -> (fun m⁸ -> (fun _lh_dummy⁴ -> [True]))))}
//│ 					| LH_N  => (fun _lh_listcomp_fun¹¹ -> (fun _lh_safe_arg2⁹ -> (fun m⁹ -> (fun _lh_dummy⁵ -> [True]))))}
//│ 				where
//│ 				def and_lh_₁(_lh_and_arg1²) = 
//│ 					_lh_and_arg1²(99)
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)]: 257 --->
//│ 	case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => let _lh_listcomp_fun_ls_t⁴ = zip_lh_₀(tx¹, ty¹)
//│ in let _lh_listcomp_fun_ls_h³ = let _lh_safe_LH_P2_1¹ = hy¹
//│ in let _lh_safe_LH_P2_0¹ = hx¹
//│ in (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁸ -> (fun _lh_safe_arg2⁶ -> (fun m⁶ -> let _lh_and_LH_C_1¹ = _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁵)
//│ in let _lh_and_LH_C_0¹ = (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2⁶) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m⁶ + _lh_safe_arg2⁶))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m⁶ - _lh_safe_arg2⁶)))
//│ in (fun _lh_dummy³ -> if _lh_and_LH_C_0¹ then and_lh_₁(_lh_and_LH_C_1¹) else [False])))))
//│ in (fun _lh_listcomp_fun⁹ -> (fun _lh_safe_arg2⁷ -> (fun m⁷ -> _lh_listcomp_fun_ls_h³(_lh_listcomp_fun_ls_t⁴, _lh_listcomp_fun⁹, _lh_safe_arg2⁷, m⁷)))) | LH_N  => (fun _lh_listcomp_fun¹⁰ -> (fun _lh_safe_arg2⁸ -> (fun m⁸ -> (fun _lh_dummy⁴ -> [True]))))} | LH_N  => (fun _lh_listcomp_fun¹¹ -> (fun _lh_safe_arg2⁹ -> (fun m⁹ -> (fun _lh_dummy⁵ -> [True]))))}: 406
//│ [LH_N]: 258 --->
//│ 	case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => let _lh_listcomp_fun_ls_t⁴ = zip_lh_₀(tx¹, ty¹)
//│ in let _lh_listcomp_fun_ls_h³ = let _lh_safe_LH_P2_1¹ = hy¹
//│ in let _lh_safe_LH_P2_0¹ = hx¹
//│ in (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁸ -> (fun _lh_safe_arg2⁶ -> (fun m⁶ -> let _lh_and_LH_C_1¹ = _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁵)
//│ in let _lh_and_LH_C_0¹ = (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2⁶) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m⁶ + _lh_safe_arg2⁶))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m⁶ - _lh_safe_arg2⁶)))
//│ in (fun _lh_dummy³ -> if _lh_and_LH_C_0¹ then and_lh_₁(_lh_and_LH_C_1¹) else [False])))))
//│ in (fun _lh_listcomp_fun⁹ -> (fun _lh_safe_arg2⁷ -> (fun m⁷ -> _lh_listcomp_fun_ls_h³(_lh_listcomp_fun_ls_t⁴, _lh_listcomp_fun⁹, _lh_safe_arg2⁷, m⁷)))) | LH_N  => (fun _lh_listcomp_fun¹⁰ -> (fun _lh_safe_arg2⁸ -> (fun m⁸ -> (fun _lh_dummy⁴ -> [True]))))} | LH_N  => (fun _lh_listcomp_fun¹¹ -> (fun _lh_safe_arg2⁹ -> (fun m⁹ -> (fun _lh_dummy⁵ -> [True]))))}: 406
//│ [LH_N]: 410 --->
//│ 	DeadCodeCons
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_lh_₁(t¹)) | LH_N  => 0}: 271
//│ 	case ys¹ of {LH_C hy¹ ty¹ => let _lh_listcomp_fun_ls_t⁴ = zip_lh_₀(tx¹, ty¹)
//│ in let _lh_listcomp_fun_ls_h³ = let _lh_safe_LH_P2_1¹ = hy¹
//│ in let _lh_safe_LH_P2_0¹ = hx¹
//│ in (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁸ -> (fun _lh_safe_arg2⁶ -> (fun m⁶ -> let _lh_and_LH_C_1¹ = _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁵)
//│ in let _lh_and_LH_C_0¹ = (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2⁶) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m⁶ + _lh_safe_arg2⁶))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m⁶ - _lh_safe_arg2⁶)))
//│ in (fun _lh_dummy³ -> if _lh_and_LH_C_0¹ then and_lh_₁(_lh_and_LH_C_1¹) else [False])))))
//│ in (fun _lh_listcomp_fun⁹ -> (fun _lh_safe_arg2⁷ -> (fun m⁷ -> _lh_listcomp_fun_ls_h³(_lh_listcomp_fun_ls_t⁴, _lh_listcomp_fun⁹, _lh_safe_arg2⁷, m⁷)))) | LH_N  => (fun _lh_listcomp_fun¹⁰ -> (fun _lh_safe_arg2⁸ -> (fun m⁸ -> (fun _lh_dummy⁴ -> [True]))))}: 400
//│ 	case _lh_append_arg1¹ of {LH_N  => _lh_append_arg2¹ | LH_C _lh_append_LH_C_0¹ _lh_append_LH_C_1¹ => [LH_C _lh_append_LH_C_0¹ append_lh_₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)] | _  => error⁰}: 510
//│ [LH_N]: 411 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun¹³ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁷ => if safe_lh_₀(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun_ls_h⁵) then [LH_C append_lh_₀(_lh_listcomp_fun_ls_h⁴, [LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷) | LH_N  => _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun¹³(enumFromTo_lh_₀(1, 9)) | LH_N  => [LH_N]}: 449
//│ 	case ls² of {LH_C h² t² => (1 + length_lh_₀(t²)) | LH_N  => 0}: 492
//│ [LH_C [LH_N] [LH_N]]: 412 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun¹³ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁷ => if safe_lh_₀(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun_ls_h⁵) then [LH_C append_lh_₀(_lh_listcomp_fun_ls_h⁴, [LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷) | LH_N  => _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun¹³(enumFromTo_lh_₀(1, 9)) | LH_N  => [LH_N]}: 449
//│ 	case ls² of {LH_C h² t² => (1 + length_lh_₀(t²)) | LH_N  => 0}: 492
//│ [LH_N]: 424 --->
//│ 	DeadCodeCons
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_lh_₁(t¹)) | LH_N  => 0}: 271
//│ 	case ys¹ of {LH_C hy¹ ty¹ => let _lh_listcomp_fun_ls_t⁴ = zip_lh_₀(tx¹, ty¹)
//│ in let _lh_listcomp_fun_ls_h³ = let _lh_safe_LH_P2_1¹ = hy¹
//│ in let _lh_safe_LH_P2_0¹ = hx¹
//│ in (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁸ -> (fun _lh_safe_arg2⁶ -> (fun m⁶ -> let _lh_and_LH_C_1¹ = _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁵)
//│ in let _lh_and_LH_C_0¹ = (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2⁶) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m⁶ + _lh_safe_arg2⁶))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m⁶ - _lh_safe_arg2⁶)))
//│ in (fun _lh_dummy³ -> if _lh_and_LH_C_0¹ then and_lh_₁(_lh_and_LH_C_1¹) else [False])))))
//│ in (fun _lh_listcomp_fun⁹ -> (fun _lh_safe_arg2⁷ -> (fun m⁷ -> _lh_listcomp_fun_ls_h³(_lh_listcomp_fun_ls_t⁴, _lh_listcomp_fun⁹, _lh_safe_arg2⁷, m⁷)))) | LH_N  => (fun _lh_listcomp_fun¹⁰ -> (fun _lh_safe_arg2⁸ -> (fun m⁸ -> (fun _lh_dummy⁴ -> [True]))))}: 400
//│ 	case _lh_append_arg1¹ of {LH_N  => _lh_append_arg2¹ | LH_C _lh_append_LH_C_0¹ _lh_append_LH_C_1¹ => [LH_C _lh_append_LH_C_0¹ append_lh_₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)] | _  => error⁰}: 510
//│ [LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]: 425 --->
//│ 	DeadCodeCons
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_lh_₁(t¹)) | LH_N  => 0}: 271
//│ 	case ys¹ of {LH_C hy¹ ty¹ => let _lh_listcomp_fun_ls_t⁴ = zip_lh_₀(tx¹, ty¹)
//│ in let _lh_listcomp_fun_ls_h³ = let _lh_safe_LH_P2_1¹ = hy¹
//│ in let _lh_safe_LH_P2_0¹ = hx¹
//│ in (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁸ -> (fun _lh_safe_arg2⁶ -> (fun m⁶ -> let _lh_and_LH_C_1¹ = _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁵)
//│ in let _lh_and_LH_C_0¹ = (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2⁶) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m⁶ + _lh_safe_arg2⁶))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m⁶ - _lh_safe_arg2⁶)))
//│ in (fun _lh_dummy³ -> if _lh_and_LH_C_0¹ then and_lh_₁(_lh_and_LH_C_1¹) else [False])))))
//│ in (fun _lh_listcomp_fun⁹ -> (fun _lh_safe_arg2⁷ -> (fun m⁷ -> _lh_listcomp_fun_ls_h³(_lh_listcomp_fun_ls_t⁴, _lh_listcomp_fun⁹, _lh_safe_arg2⁷, m⁷)))) | LH_N  => (fun _lh_listcomp_fun¹⁰ -> (fun _lh_safe_arg2⁸ -> (fun m⁸ -> (fun _lh_dummy⁴ -> [True]))))}: 400
//│ 	case _lh_append_arg1¹ of {LH_N  => _lh_append_arg2¹ | LH_C _lh_append_LH_C_0¹ _lh_append_LH_C_1¹ => [LH_C _lh_append_LH_C_0¹ append_lh_₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)] | _  => error⁰}: 510
//│ [LH_C append_lh_₀(_lh_listcomp_fun_ls_h⁴, [LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)]: 430 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun¹³ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁷ => if safe_lh_₀(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun_ls_h⁵) then [LH_C append_lh_₀(_lh_listcomp_fun_ls_h⁴, [LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷) | LH_N  => _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun¹³(enumFromTo_lh_₀(1, 9)) | LH_N  => [LH_N]}: 449
//│ 	case ls² of {LH_C h² t² => (1 + length_lh_₀(t²)) | LH_N  => 0}: 492
//│ [LH_N]: 448 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun¹³ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁷ => if safe_lh_₀(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun_ls_h⁵) then [LH_C append_lh_₀(_lh_listcomp_fun_ls_h⁴, [LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷) | LH_N  => _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun¹³(enumFromTo_lh_₀(1, 9)) | LH_N  => [LH_N]}: 449
//│ 	case ls² of {LH_C h² t² => (1 + length_lh_₀(t²)) | LH_N  => 0}: 492
//│ [LH_C a² enumFromTo_lh_₀((a² + 1), b²)]: 478 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁷ => if safe_lh_₀(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun_ls_h⁵) then [LH_C append_lh_₀(_lh_listcomp_fun_ls_h⁴, [LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷) | LH_N  => _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁶)}: 438
//│ [LH_N]: 479 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁷ => if safe_lh_₀(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun_ls_h⁵) then [LH_C append_lh_₀(_lh_listcomp_fun_ls_h⁴, [LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷) | LH_N  => _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁶)}: 438
//│ [LH_C _lh_append_LH_C_0¹ append_lh_₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)]: 508 --->
//│ 	DeadCodeCons
//│ 	case ls¹ of {LH_C h¹ t¹ => (1 + length_lh_₁(t¹)) | LH_N  => 0}: 271
//│ 	case ys¹ of {LH_C hy¹ ty¹ => let _lh_listcomp_fun_ls_t⁴ = zip_lh_₀(tx¹, ty¹)
//│ in let _lh_listcomp_fun_ls_h³ = let _lh_safe_LH_P2_1¹ = hy¹
//│ in let _lh_safe_LH_P2_0¹ = hx¹
//│ in (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁸ -> (fun _lh_safe_arg2⁶ -> (fun m⁶ -> let _lh_and_LH_C_1¹ = _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁵)
//│ in let _lh_and_LH_C_0¹ = (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2⁶) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m⁶ + _lh_safe_arg2⁶))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m⁶ - _lh_safe_arg2⁶)))
//│ in (fun _lh_dummy³ -> if _lh_and_LH_C_0¹ then and_lh_₁(_lh_and_LH_C_1¹) else [False])))))
//│ in (fun _lh_listcomp_fun⁹ -> (fun _lh_safe_arg2⁷ -> (fun m⁷ -> _lh_listcomp_fun_ls_h³(_lh_listcomp_fun_ls_t⁴, _lh_listcomp_fun⁹, _lh_safe_arg2⁷, m⁷)))) | LH_N  => (fun _lh_listcomp_fun¹⁰ -> (fun _lh_safe_arg2⁸ -> (fun m⁸ -> (fun _lh_dummy⁴ -> [True]))))}: 400
//│ 	case _lh_append_arg1¹ of {LH_N  => _lh_append_arg2¹ | LH_C _lh_append_LH_C_0¹ _lh_append_LH_C_1¹ => [LH_C _lh_append_LH_C_0¹ append_lh_₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)] | _  => error⁰}: 510
//│ ------------------
//│ case ls¹ of {LH_C h¹ t¹ => (1 + length_lh_₁(t¹)) | LH_N  => 0}: 271 --->
//│ 	[LH_N]: 410
//│ 	[LH_N]: 424
//│ 	[LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]: 425
//│ 	[LH_C _lh_append_LH_C_0¹ append_lh_₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)]: 508
//│ case ys¹ of {LH_C hy¹ ty¹ => let _lh_listcomp_fun_ls_t⁴ = zip_lh_₀(tx¹, ty¹)
//│ in let _lh_listcomp_fun_ls_h³ = let _lh_safe_LH_P2_1¹ = hy¹
//│ in let _lh_safe_LH_P2_0¹ = hx¹
//│ in (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁸ -> (fun _lh_safe_arg2⁶ -> (fun m⁶ -> let _lh_and_LH_C_1¹ = _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁵)
//│ in let _lh_and_LH_C_0¹ = (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2⁶) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m⁶ + _lh_safe_arg2⁶))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m⁶ - _lh_safe_arg2⁶)))
//│ in (fun _lh_dummy³ -> if _lh_and_LH_C_0¹ then and_lh_₁(_lh_and_LH_C_1¹) else [False])))))
//│ in (fun _lh_listcomp_fun⁹ -> (fun _lh_safe_arg2⁷ -> (fun m⁷ -> _lh_listcomp_fun_ls_h³(_lh_listcomp_fun_ls_t⁴, _lh_listcomp_fun⁹, _lh_safe_arg2⁷, m⁷)))) | LH_N  => (fun _lh_listcomp_fun¹⁰ -> (fun _lh_safe_arg2⁸ -> (fun m⁸ -> (fun _lh_dummy⁴ -> [True]))))}: 400 --->
//│ 	[LH_N]: 410
//│ 	[LH_N]: 424
//│ 	[LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]: 425
//│ 	[LH_C _lh_append_LH_C_0¹ append_lh_₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)]: 508
//│ case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => let _lh_listcomp_fun_ls_t⁴ = zip_lh_₀(tx¹, ty¹)
//│ in let _lh_listcomp_fun_ls_h³ = let _lh_safe_LH_P2_1¹ = hy¹
//│ in let _lh_safe_LH_P2_0¹ = hx¹
//│ in (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁸ -> (fun _lh_safe_arg2⁶ -> (fun m⁶ -> let _lh_and_LH_C_1¹ = _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁵)
//│ in let _lh_and_LH_C_0¹ = (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2⁶) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m⁶ + _lh_safe_arg2⁶))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m⁶ - _lh_safe_arg2⁶)))
//│ in (fun _lh_dummy³ -> if _lh_and_LH_C_0¹ then and_lh_₁(_lh_and_LH_C_1¹) else [False])))))
//│ in (fun _lh_listcomp_fun⁹ -> (fun _lh_safe_arg2⁷ -> (fun m⁷ -> _lh_listcomp_fun_ls_h³(_lh_listcomp_fun_ls_t⁴, _lh_listcomp_fun⁹, _lh_safe_arg2⁷, m⁷)))) | LH_N  => (fun _lh_listcomp_fun¹⁰ -> (fun _lh_safe_arg2⁸ -> (fun m⁸ -> (fun _lh_dummy⁴ -> [True]))))} | LH_N  => (fun _lh_listcomp_fun¹¹ -> (fun _lh_safe_arg2⁹ -> (fun m⁹ -> (fun _lh_dummy⁵ -> [True]))))}: 406 --->
//│ 	[LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)]: 257
//│ 	[LH_N]: 258
//│ case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁷ => if safe_lh_₀(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun_ls_h⁵) then [LH_C append_lh_₀(_lh_listcomp_fun_ls_h⁴, [LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷) | LH_N  => _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁶)}: 438 --->
//│ 	[LH_C a² enumFromTo_lh_₀((a² + 1), b²)]: 478
//│ 	[LH_N]: 479
//│ case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun¹³ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁷ => if safe_lh_₀(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun_ls_h⁵) then [LH_C append_lh_₀(_lh_listcomp_fun_ls_h⁴, [LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷) | LH_N  => _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun¹³(enumFromTo_lh_₀(1, 9)) | LH_N  => [LH_N]}: 449 --->
//│ 	[LH_N]: 411
//│ 	[LH_C [LH_N] [LH_N]]: 412
//│ 	[LH_C append_lh_₀(_lh_listcomp_fun_ls_h⁴, [LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)]: 430
//│ 	[LH_N]: 448
//│ case ls² of {LH_C h² t² => (1 + length_lh_₀(t²)) | LH_N  => 0}: 492 --->
//│ 	[LH_N]: 411
//│ 	[LH_C [LH_N] [LH_N]]: 412
//│ 	[LH_C append_lh_₀(_lh_listcomp_fun_ls_h⁴, [LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)]: 430
//│ 	[LH_N]: 448
//│ case _lh_append_arg1¹ of {LH_N  => _lh_append_arg2¹ | LH_C _lh_append_LH_C_0¹ _lh_append_LH_C_1¹ => [LH_C _lh_append_LH_C_0¹ append_lh_₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)] | _  => error⁰}: 510 --->
//│ 	[LH_N]: 410
//│ 	[LH_N]: 424
//│ 	[LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]: 425
//│ 	[LH_C _lh_append_LH_C_0¹ append_lh_₀(_lh_append_LH_C_1¹, _lh_append_arg2¹)]: 508
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)]: 257 --->
//│ 	case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => let _lh_listcomp_fun_ls_t⁴ = zip_lh_₀(tx¹, ty¹)
//│ in let _lh_listcomp_fun_ls_h³ = let _lh_safe_LH_P2_1¹ = hy¹
//│ in let _lh_safe_LH_P2_0¹ = hx¹
//│ in (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁸ -> (fun _lh_safe_arg2⁶ -> (fun m⁶ -> let _lh_and_LH_C_1¹ = _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁵)
//│ in let _lh_and_LH_C_0¹ = (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2⁶) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m⁶ + _lh_safe_arg2⁶))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m⁶ - _lh_safe_arg2⁶)))
//│ in (fun _lh_dummy³ -> if _lh_and_LH_C_0¹ then and_lh_₁(_lh_and_LH_C_1¹) else [False])))))
//│ in (fun _lh_listcomp_fun⁹ -> (fun _lh_safe_arg2⁷ -> (fun m⁷ -> _lh_listcomp_fun_ls_h³(_lh_listcomp_fun_ls_t⁴, _lh_listcomp_fun⁹, _lh_safe_arg2⁷, m⁷)))) | LH_N  => (fun _lh_listcomp_fun¹⁰ -> (fun _lh_safe_arg2⁸ -> (fun m⁸ -> (fun _lh_dummy⁴ -> [True]))))} | LH_N  => (fun _lh_listcomp_fun¹¹ -> (fun _lh_safe_arg2⁹ -> (fun m⁹ -> (fun _lh_dummy⁵ -> [True]))))}: 406
//│ [LH_N]: 258 --->
//│ 	case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => let _lh_listcomp_fun_ls_t⁴ = zip_lh_₀(tx¹, ty¹)
//│ in let _lh_listcomp_fun_ls_h³ = let _lh_safe_LH_P2_1¹ = hy¹
//│ in let _lh_safe_LH_P2_0¹ = hx¹
//│ in (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁸ -> (fun _lh_safe_arg2⁶ -> (fun m⁶ -> let _lh_and_LH_C_1¹ = _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁵)
//│ in let _lh_and_LH_C_0¹ = (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2⁶) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m⁶ + _lh_safe_arg2⁶))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m⁶ - _lh_safe_arg2⁶)))
//│ in (fun _lh_dummy³ -> if _lh_and_LH_C_0¹ then and_lh_₁(_lh_and_LH_C_1¹) else [False])))))
//│ in (fun _lh_listcomp_fun⁹ -> (fun _lh_safe_arg2⁷ -> (fun m⁷ -> _lh_listcomp_fun_ls_h³(_lh_listcomp_fun_ls_t⁴, _lh_listcomp_fun⁹, _lh_safe_arg2⁷, m⁷)))) | LH_N  => (fun _lh_listcomp_fun¹⁰ -> (fun _lh_safe_arg2⁸ -> (fun m⁸ -> (fun _lh_dummy⁴ -> [True]))))} | LH_N  => (fun _lh_listcomp_fun¹¹ -> (fun _lh_safe_arg2⁹ -> (fun m⁹ -> (fun _lh_dummy⁵ -> [True]))))}: 406
//│ [LH_C a² enumFromTo_lh_₀((a² + 1), b²)]: 478 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁷ => if safe_lh_₀(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun_ls_h⁵) then [LH_C append_lh_₀(_lh_listcomp_fun_ls_h⁴, [LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷) | LH_N  => _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁶)}: 438
//│ [LH_N]: 479 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁷ => if safe_lh_₀(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun_ls_h⁵) then [LH_C append_lh_₀(_lh_listcomp_fun_ls_h⁴, [LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷) | LH_N  => _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁶)}: 438
//│ ------------------
//│ case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => let _lh_listcomp_fun_ls_t⁴ = zip_lh_₀(tx¹, ty¹)
//│ in let _lh_listcomp_fun_ls_h³ = let _lh_safe_LH_P2_1¹ = hy¹
//│ in let _lh_safe_LH_P2_0¹ = hx¹
//│ in (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁸ -> (fun _lh_safe_arg2⁶ -> (fun m⁶ -> let _lh_and_LH_C_1¹ = _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁵)
//│ in let _lh_and_LH_C_0¹ = (((_lh_safe_LH_P2_1¹ /= _lh_safe_arg2⁶) && ((_lh_safe_LH_P2_0¹ + _lh_safe_LH_P2_1¹) /= (m⁶ + _lh_safe_arg2⁶))) && ((_lh_safe_LH_P2_0¹ - _lh_safe_LH_P2_1¹) /= (m⁶ - _lh_safe_arg2⁶)))
//│ in (fun _lh_dummy³ -> if _lh_and_LH_C_0¹ then and_lh_₁(_lh_and_LH_C_1¹) else [False])))))
//│ in (fun _lh_listcomp_fun⁹ -> (fun _lh_safe_arg2⁷ -> (fun m⁷ -> _lh_listcomp_fun_ls_h³(_lh_listcomp_fun_ls_t⁴, _lh_listcomp_fun⁹, _lh_safe_arg2⁷, m⁷)))) | LH_N  => (fun _lh_listcomp_fun¹⁰ -> (fun _lh_safe_arg2⁸ -> (fun m⁸ -> (fun _lh_dummy⁴ -> [True]))))} | LH_N  => (fun _lh_listcomp_fun¹¹ -> (fun _lh_safe_arg2⁹ -> (fun m⁹ -> (fun _lh_dummy⁵ -> [True]))))}: 406 --->
//│ 	[LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)]: 257
//│ 	[LH_N]: 258
//│ case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁷ => if safe_lh_₀(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun_ls_h⁵) then [LH_C append_lh_₀(_lh_listcomp_fun_ls_h⁴, [LH_C _lh_listcomp_fun_ls_h⁵ [LH_N]]) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷) | LH_N  => _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁶)}: 438 --->
//│ 	[LH_C a² enumFromTo_lh_₀((a² + 1), b²)]: 478
//│ 	[LH_N]: 479
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testAnotherQueenNineBuiltInType_lh_₀(primId⁰(9))
//│ def testAnotherQueenNineBuiltInType_lh_₀(_lh_testAnotherQueenNineBuiltInType_arg1²) = 
//│ 	length_lh_₀(queens_lh_₀(_lh_testAnotherQueenNineBuiltInType_arg1²))
//│ 	where
//│ 	def length_lh_₀(ls⁴) = 
//│ 		case ls⁴ of {
//│ 			LH_C h² t² => (1 + length_lh_₀(t²))
//│ 			| LH_N  => 0}
//│ 	def queens_lh_₀(_lh_queens_arg1²) = 
//│ 		case _lh_queens_arg1² of {
//│ 			0  => [LH_C [LH_N] [LH_N]]
//│ 			| _  => 
//│ 				let _lh_listcomp_fun¹⁴ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 					LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁶ => 
//│ 						let _lh_listcomp_fun¹⁵ = (fun _lh_listcomp_fun_para⁷ -> _lh_listcomp_fun_para⁷(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun¹⁵, _lh_listcomp_fun_ls_t⁶, _lh_listcomp_fun¹⁴))
//│ 						in _lh_listcomp_fun¹⁵(enumFromTo_lh_₀(1, 9))
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun¹⁴(queens_lh_₀((_lh_queens_arg1² - 1)))}
//│ 		where
//│ 		def append_lh_₀(_lh_append_arg1², _lh_append_arg2²) = 
//│ 			case _lh_append_arg1² of {
//│ 				LH_N  => _lh_append_arg2²
//│ 				| LH_C _lh_append_LH_C_0¹ _lh_append_LH_C_1¹ => [LH_C _lh_append_LH_C_0¹ append_lh_₀(_lh_append_LH_C_1¹, _lh_append_arg2²)]
//│ 				| _  => error⁰}
//│ 		def enumFromTo_lh_₀(a⁴, b⁴) = 
//│ 			if (a⁴ <= b⁴) then 
//│ 				let _lh_listcomp_fun_ls_t¹⁰ = enumFromTo_lh_₀((a⁴ + 1), b⁴)
//│ 				in let _lh_listcomp_fun_ls_h⁷ = a⁴
//│ 				in (fun _lh_listcomp_fun_ls_h⁸ -> (fun _lh_listcomp_fun²¹ -> (fun _lh_listcomp_fun_ls_t¹¹ -> (fun _lh_listcomp_fun²² -> if safe_lh_₀(_lh_listcomp_fun_ls_h⁸, _lh_listcomp_fun_ls_h⁷) then [LH_C append_lh_₀(_lh_listcomp_fun_ls_h⁸, [LH_C _lh_listcomp_fun_ls_h⁷ [LH_N]]) _lh_listcomp_fun²¹(_lh_listcomp_fun_ls_t¹⁰)] else _lh_listcomp_fun²¹(_lh_listcomp_fun_ls_t¹⁰))))) else (fun _lh_listcomp_fun_ls_h⁹ -> (fun _lh_listcomp_fun²³ -> (fun _lh_listcomp_fun_ls_t¹² -> (fun _lh_listcomp_fun²⁴ -> _lh_listcomp_fun²⁴(_lh_listcomp_fun_ls_t¹²)))))
//│ 		def safe_lh_₀(_lh_safe_arg1², _lh_safe_arg2¹⁰) = 
//│ 			let m¹⁰ = (length_lh_₁(_lh_safe_arg1²) + 1)
//│ 			in and_lh_₀(
//│ 				let _lh_listcomp_fun¹⁶ = (fun _lh_listcomp_fun_para⁸ -> _lh_listcomp_fun_para⁸(_lh_listcomp_fun¹⁶, _lh_safe_arg2¹⁰, m¹⁰))
//│ 				in _lh_listcomp_fun¹⁶(zip_lh_₀(enumFromTo_lh_₁(1, (m¹⁰ - 1)), _lh_safe_arg1²)))
//│ 			where
//│ 			def and_lh_₀(_lh_and_arg1⁴) = 
//│ 				_lh_and_arg1⁴(99)
//│ 			def enumFromTo_lh_₁(a³, b³) = 
//│ 				if (a³ <= b³) then 
//│ 					let tx² = enumFromTo_lh_₁((a³ + 1), b³)
//│ 					in let hx² = a³
//│ 					in (fun ys² -> case ys² of {
//│ 						LH_C hy¹ ty¹ => 
//│ 							let _lh_listcomp_fun_ls_t⁸ = zip_lh_₀(tx², ty¹)
//│ 							in let _lh_listcomp_fun_ls_h⁶ = 	
//│ 								let _lh_safe_LH_P2_1² = hy¹
//│ 								in let _lh_safe_LH_P2_0² = hx²
//│ 								in (fun _lh_listcomp_fun_ls_t⁹ -> (fun _lh_listcomp_fun¹⁷ -> (fun _lh_safe_arg2¹¹ -> (fun m¹¹ -> 
//│ 									let _lh_and_LH_C_1² = _lh_listcomp_fun¹⁷(_lh_listcomp_fun_ls_t⁹)
//│ 									in let _lh_and_LH_C_0² = (((_lh_safe_LH_P2_1² /= _lh_safe_arg2¹¹) && ((_lh_safe_LH_P2_0² + _lh_safe_LH_P2_1²) /= (m¹¹ + _lh_safe_arg2¹¹))) && ((_lh_safe_LH_P2_0² - _lh_safe_LH_P2_1²) /= (m¹¹ - _lh_safe_arg2¹¹)))
//│ 									in (fun _lh_dummy⁶ -> if _lh_and_LH_C_0² then and_lh_₁(_lh_and_LH_C_1²) else [False])))))
//│ 							in (fun _lh_listcomp_fun¹⁸ -> (fun _lh_safe_arg2¹² -> (fun m¹² -> _lh_listcomp_fun_ls_h⁶(_lh_listcomp_fun_ls_t⁸, _lh_listcomp_fun¹⁸, _lh_safe_arg2¹², m¹²))))
//│ 						| LH_N  => (fun _lh_listcomp_fun¹⁹ -> (fun _lh_safe_arg2¹³ -> (fun m¹³ -> (fun _lh_dummy⁷ -> [True]))))}) else (fun ys³ -> (fun _lh_listcomp_fun²⁰ -> (fun _lh_safe_arg2¹⁴ -> (fun m¹⁴ -> (fun _lh_dummy⁸ -> [True])))))
//│ 			def length_lh_₁(ls³) = 
//│ 				case ls³ of {
//│ 					LH_C h¹ t¹ => (1 + length_lh_₁(t¹))
//│ 					| LH_N  => 0}
//│ 			def zip_lh_₀(xs², ys⁴) = 
//│ 				xs²(ys⁴)
//│ 				where
//│ 				def and_lh_₁(_lh_and_arg1³) = 
//│ 					_lh_and_arg1³(99)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<



:lhInHaskell
:lhGenOCaml
sum [] = 0
sum (h:t) = h + (sum t)
testSumMapEnumBuiltInType n = sum $ map (\x -> x * x) (enumFromTo 1 n)
testSumMapEnumBuiltInType $ primId 300000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testSumMapEnumBuiltInType_lh^75(primId⁰(300000))
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^21((a⁰ + 1), b⁰)] else [LH_N]
//│ def map_lh(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh^5(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def sum_lh(ls¹) = case ls¹ of {
//│ 	LH_C h¹ t¹ => (h¹ + sum_lh^39(t¹))
//│ 	| LH_N  => 0}
//│ def sum_lh(_lh_sum_arg1⁰) = case _lh_sum_arg1⁰ of {
//│ 	LH_N  => 0
//│ 	| LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => (_lh_sum_LH_C_0⁰ + sum_lh^68(_lh_sum_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def testSumMapEnumBuiltInType_lh(_lh_testSumMapEnumBuiltInType_arg1⁰) = sum_lh^46(map_lh^47((fun x⁰ -> (x⁰ * x⁰)), enumFromTo_lh^55(1, _lh_testSumMapEnumBuiltInType_arg1⁰)))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec sum_lh _lh_sum_arg1_0 =
//│ 		  (match _lh_sum_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      0
//│ 		    | `LH_C(_lh_sum_LH_C_0_0, _lh_sum_LH_C_1_0) -> 
//│ 		      (_lh_sum_LH_C_0_0 + (sum_lh _lh_sum_LH_C_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec map_lh f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C((f_0 h_0), ((map_lh f_0) t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec enumFromTo_lh a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec testSumMapEnumBuiltInType_lh _lh_testSumMapEnumBuiltInType_arg1_0 =
//│ 		  (sum_lh ((map_lh (fun x_0 -> 
//│ 		    (x_0 * x_0))) ((enumFromTo_lh 1) _lh_testSumMapEnumBuiltInType_arg1_0)));;
//│ 		(testSumMapEnumBuiltInType_lh 300000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => (h¹ + sum_lh(t¹)) | LH_N  => 0}: 44
//│ 	case _lh_sum_arg1⁰ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => (_lh_sum_LH_C_0⁰ + sum_lh(_lh_sum_LH_C_1⁰)) | _  => error⁰}: 73
//│ [LH_N]: 11 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => (h¹ + sum_lh(t¹)) | LH_N  => 0}: 44
//│ 	case _lh_sum_arg1⁰ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => (_lh_sum_LH_C_0⁰ + sum_lh(_lh_sum_LH_C_1⁰)) | _  => error⁰}: 73
//│ [LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 30 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_N]: 31 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 30
//│ 	[LH_N]: 31
//│ case ls¹ of {LH_C h¹ t¹ => (h¹ + sum_lh(t¹)) | LH_N  => 0}: 44 --->
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ case _lh_sum_arg1⁰ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => (_lh_sum_LH_C_0⁰ + sum_lh(_lh_sum_LH_C_1⁰)) | _  => error⁰}: 73 --->
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 30 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_N]: 31 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 30
//│ 	[LH_N]: 31
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testSumMapEnumBuiltInType_lh(primId⁰(300000))
//│ def enumFromTo_lh(a¹, b¹) = if (a¹ <= b¹) then 
//│ 	let t² = enumFromTo_lh((a¹ + 1), b¹)
//│ 	in let h² = a¹
//│ 	in (fun f² -> [LH_C f²(h²) map_lh(f², t²)]) else (fun f³ -> [LH_N])
//│ def map_lh(f¹, ls²) = ls²(f¹)
//│ def sum_lh(_lh_sum_arg1¹) = case _lh_sum_arg1¹ of {
//│ 	LH_N  => 0
//│ 	| LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => (_lh_sum_LH_C_0⁰ + sum_lh(_lh_sum_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def testSumMapEnumBuiltInType_lh(_lh_testSumMapEnumBuiltInType_arg1¹) = sum_lh(map_lh((fun x¹ -> (x¹ * x¹)), enumFromTo_lh(1, _lh_testSumMapEnumBuiltInType_arg1¹)))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ ~~~~~~~~~~~~~~~~~~~~~~~ NEXT ITERATION ~~~~~~~~~~~~~~~~~~~~~~~
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testSumMapEnumBuiltInType_lh^1] (hopeless to continue)
//│ 	[testSumMapEnumBuiltInType_lh^1 · enumFromTo_lh^64] (using original def)
//│ 		[testSumMapEnumBuiltInType_lh^1 · enumFromTo_lh^64 · enumFromTo_lh^16] ---> [testSumMapEnumBuiltInType_lh^1 · enumFromTo_lh^64] (using original def)
//│ 		[testSumMapEnumBuiltInType_lh^1 · enumFromTo_lh^64 · map_lh^29] (using original def)
//│ 	[testSumMapEnumBuiltInType_lh^1 · map_lh^56] (using original def)
//│ 	[testSumMapEnumBuiltInType_lh^1 · sum_lh^55] (using original def)
//│ 		[testSumMapEnumBuiltInType_lh^1 · sum_lh^55 · sum_lh^48] ---> [testSumMapEnumBuiltInType_lh^1 · sum_lh^55] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testSumMapEnumBuiltInType_lh_₀(primId⁰(300000))
//│ def testSumMapEnumBuiltInType_lh_₀(_lh_testSumMapEnumBuiltInType_arg1¹) = 
//│ 	sum_lh_₀(map_lh_₁((fun x¹ -> (x¹ * x¹)), enumFromTo_lh_₀(1, _lh_testSumMapEnumBuiltInType_arg1¹)))
//│ 	where
//│ 	def enumFromTo_lh_₀(a¹, b¹) = 
//│ 		if (a¹ <= b¹) then 
//│ 			let t¹ = enumFromTo_lh_₀((a¹ + 1), b¹)
//│ 			in let h¹ = a¹
//│ 			in (fun f⁴ -> [LH_C f⁴(h¹) map_lh_₀(f⁴, t¹)]) else (fun f⁵ -> [LH_N])
//│ 		where
//│ 		def map_lh_₀(f⁶, ls²) = 
//│ 			ls²(f⁶)
//│ 	def map_lh_₁(f³, ls¹) = 
//│ 		ls¹(f³)
//│ 	def sum_lh_₀(_lh_sum_arg1¹) = 
//│ 		case _lh_sum_arg1¹ of {
//│ 			LH_N  => 0
//│ 			| LH_C _lh_sum_LH_C_0¹ _lh_sum_LH_C_1¹ => (_lh_sum_LH_C_0¹ + sum_lh_₀(_lh_sum_LH_C_1¹))
//│ 			| _  => error⁰}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f⁴(h¹) map_lh_₀(f⁴, t¹)]: 112 --->
//│ 	case _lh_sum_arg1¹ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0¹ _lh_sum_LH_C_1¹ => (_lh_sum_LH_C_0¹ + sum_lh_₀(_lh_sum_LH_C_1¹)) | _  => error⁰}: 82
//│ [LH_N]: 116 --->
//│ 	case _lh_sum_arg1¹ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0¹ _lh_sum_LH_C_1¹ => (_lh_sum_LH_C_0¹ + sum_lh_₀(_lh_sum_LH_C_1¹)) | _  => error⁰}: 82
//│ ------------------
//│ case _lh_sum_arg1¹ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0¹ _lh_sum_LH_C_1¹ => (_lh_sum_LH_C_0¹ + sum_lh_₀(_lh_sum_LH_C_1¹)) | _  => error⁰}: 82 --->
//│ 	[LH_C f⁴(h¹) map_lh_₀(f⁴, t¹)]: 112
//│ 	[LH_N]: 116
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C f⁴(h¹) map_lh_₀(f⁴, t¹)]: 112 --->
//│ 	case _lh_sum_arg1¹ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0¹ _lh_sum_LH_C_1¹ => (_lh_sum_LH_C_0¹ + sum_lh_₀(_lh_sum_LH_C_1¹)) | _  => error⁰}: 82
//│ [LH_N]: 116 --->
//│ 	case _lh_sum_arg1¹ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0¹ _lh_sum_LH_C_1¹ => (_lh_sum_LH_C_0¹ + sum_lh_₀(_lh_sum_LH_C_1¹)) | _  => error⁰}: 82
//│ ------------------
//│ case _lh_sum_arg1¹ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0¹ _lh_sum_LH_C_1¹ => (_lh_sum_LH_C_0¹ + sum_lh_₀(_lh_sum_LH_C_1¹)) | _  => error⁰}: 82 --->
//│ 	[LH_C f⁴(h¹) map_lh_₀(f⁴, t¹)]: 112
//│ 	[LH_N]: 116
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testSumMapEnumBuiltInType_lh_₀(primId⁰(300000))
//│ def testSumMapEnumBuiltInType_lh_₀(_lh_testSumMapEnumBuiltInType_arg1²) = 
//│ 	sum_lh_₀(map_lh_₁((fun x² -> (x² * x²)), enumFromTo_lh_₀(1, _lh_testSumMapEnumBuiltInType_arg1²)))
//│ 	where
//│ 	def enumFromTo_lh_₀(a², b²) = 
//│ 		if (a² <= b²) then 
//│ 			let t² = enumFromTo_lh_₀((a² + 1), b²)
//│ 			in let h² = a²
//│ 			in (fun f⁹ -> 
//│ 				let _lh_sum_LH_C_1² = map_lh_₀(f⁹, t²)
//│ 				in let _lh_sum_LH_C_0² = f⁹(h²)
//│ 				in (fun _lh_dummy⁰ -> (_lh_sum_LH_C_0² + sum_lh_₀(_lh_sum_LH_C_1²)))) else (fun f¹⁰ -> (fun _lh_dummy¹ -> 0))
//│ 		where
//│ 		def map_lh_₀(f⁷, ls³) = 
//│ 			ls³(f⁷)
//│ 	def map_lh_₁(f⁸, ls⁴) = 
//│ 		ls⁴(f⁸)
//│ 	def sum_lh_₀(_lh_sum_arg1²) = 
//│ 		_lh_sum_arg1²(99)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

:lhGenOCaml
fun genTree(n, i) = if n <= 0 then N(i) else T(genTree(n - 1, i), genTree(n - 1, i + 1))
fun flip(t) = if t is
  T(l, r) then T(flip(r), flip(l))
  N(v) then N(v)
fun ff(t) = flip(flip(t))
fun testFlipFlip(t) = ff(t)
testFlipFlip(primId(genTree(17, 0)))
//│ |#fun| |genTree|(|n|,| |i|)| |#=| |#if| |n| |<=| |0| |#then| |N|(|i|)| |#else| |T|(|genTree|(|n| |-| |1|,| |i|)|,| |genTree|(|n| |-| |1|,| |i| |+| |1|)|)|↵|#fun| |flip|(|t|)| |#=| |#if| |t| |is|→|T|(|l|,| |r|)| |#then| |T|(|flip|(|r|)|,| |flip|(|l|)|)|↵|N|(|v|)| |#then| |N|(|v|)|←|↵|#fun| |ff|(|t|)| |#=| |flip|(|flip|(|t|)|)|↵|#fun| |testFlipFlip|(|t|)| |#=| |ff|(|t|)|↵|testFlipFlip|(|primId|(|genTree|(|17|,| |0|)|)|)|
//│ Parsed: {fun genTree = n, i, => if (<= (n,) (0,)) then N (i,) else T (genTree (- (n,) (1,), i,), genTree (- (n,) (1,), + (i,) (1,),),); fun flip = t, => if t is ‹(T (l, r,)) then T (flip (r,), flip (l,),); (N (v,)) then N (v,)›; fun ff = t, => flip (flip (t,),); fun testFlipFlip = t, => ff (t,); testFlipFlip (primId (genTree (17, 0,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testFlipFlip^56(primId⁰(genTree^58(17, 0)))
//│ def ff(t¹) = flip^46(flip^47(t¹))
//│ def flip(t⁰) = case t⁰ of {
//│ 	T l⁰ r⁰ => [T flip^35(r⁰) flip^38(l⁰)]
//│ 	| N v⁰ => [N v⁰]}
//│ def genTree(n⁰, i⁰) = if (n⁰ <= 0) then [N i⁰] else [T genTree^8((n⁰ - 1), i⁰) genTree^17((n⁰ - 1), (i⁰ + 1))]
//│ def testFlipFlip(t²) = ff^52(t²)
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec flip t_0 =
//│ 		  (match t_0 with
//│ 		    | `T(l_0, r_0) -> 
//│ 		      (`T((flip r_0), (flip l_0)))
//│ 		    | `N(v_0) -> 
//│ 		      (`N(v_0)));;
//│ 		let rec genTree n_0 i_0 =
//│ 		  (if (n_0 <= 0) then
//│ 		    (`N(i_0))
//│ 		  else
//│ 		    (`T(((genTree (n_0 - 1)) i_0), ((genTree (n_0 - 1)) (i_0 + 1)))));;
//│ 		let rec ff t_1 =
//│ 		  (flip (flip t_1));;
//│ 		let rec testFlipFlip t_2 =
//│ 		  (ff t_2);;
//│ 		(testFlipFlip ((genTree 17) 0))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [genTree^58] (hopeless to continue)
//│ 	[genTree^58 · genTree^17] ---> [genTree^58] (using original def)
//│ 	[genTree^58 · genTree^8] ---> [genTree^58] (using original def)
//│ [testFlipFlip^56] (hopeless to continue)
//│ 	[testFlipFlip^56 · ff^52] (using original def)
//│ 		[testFlipFlip^56 · ff^52 · flip^46] (using original def)
//│ 			[testFlipFlip^56 · ff^52 · flip^46 · flip^35] ---> [testFlipFlip^56 · ff^52 · flip^46] (using original def)
//│ 			[testFlipFlip^56 · ff^52 · flip^46 · flip^38] ---> [testFlipFlip^56 · ff^52 · flip^46] (using original def)
//│ 		[testFlipFlip^56 · ff^52 · flip^47] (using original def)
//│ 			[testFlipFlip^56 · ff^52 · flip^47 · flip^35] ---> [testFlipFlip^56 · ff^52 · flip^47] (using original def)
//│ 			[testFlipFlip^56 · ff^52 · flip^47 · flip^38] ---> [testFlipFlip^56 · ff^52 · flip^47] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testFlipFlip_₀(primId⁰(genTree_₀(17, 0)))
//│ def genTree_₀(n¹, i¹) = 
//│ 	if (n¹ <= 0) then [N i¹] else [T genTree_₀((n¹ - 1), i¹) genTree_₀((n¹ - 1), (i¹ + 1))]
//│ def testFlipFlip_₀(t⁶) = 
//│ 	ff_₀(t⁶)
//│ 	where
//│ 	def ff_₀(t⁴) = 
//│ 		flip_₀(flip_₁(t⁴))
//│ 		where
//│ 		def flip_₀(t³) = 
//│ 			case t³ of {
//│ 				T l¹ r¹ => [T flip_₀(r¹) flip_₀(l¹)]
//│ 				| N v¹ => [N v¹]}
//│ 		def flip_₁(t⁵) = 
//│ 			case t⁵ of {
//│ 				T l² r² => [T flip_₁(r²) flip_₁(l²)]
//│ 				| N v² => [N v²]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [T flip_₁(r²) flip_₁(l²)]: 123 --->
//│ 	case t³ of {T l¹ r¹ => [T flip_₀(r¹) flip_₀(l¹)] | N v¹ => [N v¹]}: 75
//│ [N v²]: 125 --->
//│ 	case t³ of {T l¹ r¹ => [T flip_₀(r¹) flip_₀(l¹)] | N v¹ => [N v¹]}: 75
//│ ------------------
//│ case t³ of {T l¹ r¹ => [T flip_₀(r¹) flip_₀(l¹)] | N v¹ => [N v¹]}: 75 --->
//│ 	[T flip_₁(r²) flip_₁(l²)]: 123
//│ 	[N v²]: 125
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [T flip_₁(r²) flip_₁(l²)]: 123 --->
//│ 	case t³ of {T l¹ r¹ => [T flip_₀(r¹) flip_₀(l¹)] | N v¹ => [N v¹]}: 75
//│ [N v²]: 125 --->
//│ 	case t³ of {T l¹ r¹ => [T flip_₀(r¹) flip_₀(l¹)] | N v¹ => [N v¹]}: 75
//│ ------------------
//│ case t³ of {T l¹ r¹ => [T flip_₀(r¹) flip_₀(l¹)] | N v¹ => [N v¹]}: 75 --->
//│ 	[T flip_₁(r²) flip_₁(l²)]: 123
//│ 	[N v²]: 125
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testFlipFlip_₀(primId⁰(genTree_₀(17, 0)))
//│ def genTree_₀(n², i²) = 
//│ 	if (n² <= 0) then [N i²] else [T genTree_₀((n² - 1), i²) genTree_₀((n² - 1), (i² + 1))]
//│ def testFlipFlip_₀(t¹⁰) = 
//│ 	ff_₀(t¹⁰)
//│ 	where
//│ 	def ff_₀(t⁹) = 
//│ 		flip_₀(flip_₁(t⁹))
//│ 		where
//│ 		def flip_₀(t⁷) = 
//│ 			t⁷(99)
//│ 		def flip_₁(t⁸) = 
//│ 			case t⁸ of {
//│ 				T l² r² => 
//│ 					let r³ = flip_₁(l²)
//│ 					in let l³ = flip_₁(r²)
//│ 					in (fun _lh_dummy⁰ -> [T flip_₀(r³) flip_₀(l³)])
//│ 				| N v² => 
//│ 					let v³ = v²
//│ 					in (fun _lh_dummy¹ -> [N v³])}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


:lhGenOCaml
fun map(f, ls) = if ls is
  C(h, t) then C(f(h), map(f, t))
  N then N
fun foldl(f, s, ls) = if ls is
  C(h, t) then foldl(f, f(s, h), t)
  N then s
fun enumFromTo(a, b) = if a <= b then C(a, enumFromTo(a + 1, b)) else N
fun testFoldMap(n) = foldl(
  i => x => i + x,
  0,
  map(x => x * x, primId(enumFromTo(1, n)))
)
testFoldMap(primId(300000))
//│ |#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |foldl|(|f|,| |s|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |foldl|(|f|,| |f|(|s|,| |h|)|,| |t|)|↵|N| |#then| |s|←|↵|#fun| |enumFromTo|(|a|,| |b|)| |#=| |#if| |a| |<=| |b| |#then| |C|(|a|,| |enumFromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#fun| |testFoldMap|(|n|)| |#=| |foldl|(|→|i| |=>| |x| |=>| |i| |+| |x|,|↵|0|,|↵|map|(|x| |=>| |x| |*| |x|,| |primId|(|enumFromTo|(|1|,| |n|)|)|)|←|↵|)|↵|testFoldMap|(|primId|(|300000|)|)|
//│ Parsed: {fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun foldl = f, s, ls, => if ls is ‹(C (h, t,)) then foldl (f, f (s, h,), t,); (N) then s›; fun enumFromTo = a, b, => if (<= (a,) (b,)) then C (a, enumFromTo (+ (a,) (1,), b,),) else N; fun testFoldMap = n, => foldl (i, => x, => + (i,) (x,), 0, map (x, => * (x,) (x,), primId (enumFromTo (1, n,),),),); testFoldMap (primId (300000,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testFoldMap^81(primId⁰(300000))
//│ def enumFromTo(a⁰, b⁰) = if (a⁰ <= b⁰) then [C a⁰ enumFromTo^38((a⁰ + 1), b⁰)] else [N]
//│ def foldl(f¹, s⁰, ls¹) = case ls¹ of {
//│ 	C h¹ t¹ => foldl^16(f¹, f¹(s⁰, h¹), t¹)
//│ 	| N  => s⁰}
//│ def map(f⁰, ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map^5(f⁰, t⁰)]
//│ 	| N  => [N]}
//│ def testFoldMap(n⁰) = foldl^52((fun i⁰ -> (fun x⁰ -> (i⁰ + x⁰))), 0, map^63((fun x¹ -> (x¹ * x¹)), primId⁰(enumFromTo^72(1, n⁰))))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec foldl f_1 s_0 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `C(h_1, t_1) -> 
//│ 		      (((foldl f_1) ((f_1 s_0) h_1)) t_1)
//│ 		    | `N -> 
//│ 		      s_0);;
//│ 		let rec map f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (`C((f_0 h_0), ((map f_0) t_0)))
//│ 		    | `N -> 
//│ 		      (`N));;
//│ 		let rec enumFromTo a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`N));;
//│ 		let rec testFoldMap n_0 =
//│ 		  (((foldl (fun i_0 x_0 -> 
//│ 		    (i_0 + x_0))) 0) ((map (fun x_1 -> 
//│ 		    (x_1 * x_1))) ((enumFromTo 1) n_0)));;
//│ 		(testFoldMap 300000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testFoldMap^81] (hopeless to continue)
//│ 	[testFoldMap^81 · enumFromTo^72] (using original def)
//│ 		[testFoldMap^81 · enumFromTo^72 · enumFromTo^38] ---> [testFoldMap^81 · enumFromTo^72] (using original def)
//│ 	[testFoldMap^81 · foldl^52] (using original def)
//│ 		[testFoldMap^81 · foldl^52 · foldl^16] ---> [testFoldMap^81 · foldl^52] (using original def)
//│ 	[testFoldMap^81 · map^63] (using original def)
//│ 		[testFoldMap^81 · map^63 · map^5] ---> [testFoldMap^81 · map^63] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testFoldMap_₀(primId⁰(300000))
//│ def testFoldMap_₀(n¹) = 
//│ 	foldl_₀((fun i¹ -> (fun x² -> (i¹ + x²))), 0, map_₀((fun x³ -> (x³ * x³)), primId⁰(enumFromTo_₀(1, n¹))))
//│ 	where
//│ 	def enumFromTo_₀(a¹, b¹) = 
//│ 		if (a¹ <= b¹) then [C a¹ enumFromTo_₀((a¹ + 1), b¹)] else [N]
//│ 	def foldl_₀(f², s¹, ls²) = 
//│ 		case ls² of {
//│ 			C h² t² => foldl_₀(f², f²(s¹, h²), t²)
//│ 			| N  => s¹}
//│ 	def map_₀(f³, ls³) = 
//│ 		case ls³ of {
//│ 			C h³ t³ => [C f³(h³) map_₀(f³, t³)]
//│ 			| N  => [N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C f³(h³) map_₀(f³, t³)]: 112 --->
//│ 	case ls² of {C h² t² => foldl_₀(f², f²(s¹, h²), t²) | N  => s¹}: 99
//│ [N]: 113 --->
//│ 	case ls² of {C h² t² => foldl_₀(f², f²(s¹, h²), t²) | N  => s¹}: 99
//│ ------------------
//│ case ls² of {C h² t² => foldl_₀(f², f²(s¹, h²), t²) | N  => s¹}: 99 --->
//│ 	[C f³(h³) map_₀(f³, t³)]: 112
//│ 	[N]: 113
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C f³(h³) map_₀(f³, t³)]: 112 --->
//│ 	case ls² of {C h² t² => foldl_₀(f², f²(s¹, h²), t²) | N  => s¹}: 99
//│ [N]: 113 --->
//│ 	case ls² of {C h² t² => foldl_₀(f², f²(s¹, h²), t²) | N  => s¹}: 99
//│ ------------------
//│ case ls² of {C h² t² => foldl_₀(f², f²(s¹, h²), t²) | N  => s¹}: 99 --->
//│ 	[C f³(h³) map_₀(f³, t³)]: 112
//│ 	[N]: 113
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testFoldMap_₀(primId⁰(300000))
//│ def testFoldMap_₀(n²) = 
//│ 	foldl_₀((fun i² -> (fun x⁴ -> (i² + x⁴))), 0, map_₀((fun x⁵ -> (x⁵ * x⁵)), primId⁰(enumFromTo_₀(1, n²))))
//│ 	where
//│ 	def enumFromTo_₀(a², b²) = 
//│ 		if (a² <= b²) then [C a² enumFromTo_₀((a² + 1), b²)] else [N]
//│ 	def foldl_₀(f⁴, s², ls⁴) = 
//│ 		ls⁴(f⁴, s²)
//│ 	def map_₀(f⁵, ls⁵) = 
//│ 		case ls⁵ of {
//│ 			C h³ t³ => 
//│ 				let t⁴ = map_₀(f⁵, t³)
//│ 				in let h⁴ = f⁵(h³)
//│ 				in (fun f⁶ -> (fun s³ -> foldl_₀(f⁶, f⁶(s³, h⁴), t⁴)))
//│ 			| N  => (fun f⁷ -> (fun s⁴ -> s⁴))}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

:lhGenOCaml
fun enumFromTo(a, b) = if a <= b then C(a, enumFromTo(a + 1, b)) else N
fun map(f, xs) = if xs is
  C(h, t) then C(f(h), map(f, t))
  N then N
fun qrev(a, ys) = if ys is
  C(h, t) then qrev(C(h, a), t)
  N then a
fun testMapQrev(ls) = map(x => x + 1, qrev(N, ls))
testMapQrev(primId(enumFromTo(1, 10000)))
//│ |#fun| |enumFromTo|(|a|,| |b|)| |#=| |#if| |a| |<=| |b| |#then| |C|(|a|,| |enumFromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#fun| |map|(|f|,| |xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |qrev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h|,| |t|)| |#then| |qrev|(|C|(|h|,| |a|)|,| |t|)|↵|N| |#then| |a|←|↵|#fun| |testMapQrev|(|ls|)| |#=| |map|(|x| |=>| |x| |+| |1|,| |qrev|(|N|,| |ls|)|)|↵|testMapQrev|(|primId|(|enumFromTo|(|1|,| |10000|)|)|)|
//│ Parsed: {fun enumFromTo = a, b, => if (<= (a,) (b,)) then C (a, enumFromTo (+ (a,) (1,), b,),) else N; fun map = f, xs, => if xs is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun qrev = a, ys, => if ys is ‹(C (h, t,)) then qrev (C (h, a,), t,); (N) then a›; fun testMapQrev = ls, => map (x, => + (x,) (1,), qrev (N, ls,),); testMapQrev (primId (enumFromTo (1, 10000,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMapQrev^62(primId⁰(enumFromTo^64(1, 10000)))
//│ def enumFromTo(a⁰, b⁰) = if (a⁰ <= b⁰) then [C a⁰ enumFromTo^7((a⁰ + 1), b⁰)] else [N]
//│ def map(f⁰, xs⁰) = case xs⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map^25(f⁰, t⁰)]
//│ 	| N  => [N]}
//│ def qrev(a¹, ys⁰) = case ys⁰ of {
//│ 	C h¹ t¹ => qrev^36([C h¹ a¹], t¹)
//│ 	| N  => a¹}
//│ def testMapQrev(ls⁰) = map^47((fun x⁰ -> (x⁰ + 1)), qrev^55([N], ls⁰))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`N));;
//│ 		let rec map f_0 xs_0 =
//│ 		  (match xs_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (`C((f_0 h_0), ((map f_0) t_0)))
//│ 		    | `N -> 
//│ 		      (`N));;
//│ 		let rec qrev a_1 ys_0 =
//│ 		  (match ys_0 with
//│ 		    | `C(h_1, t_1) -> 
//│ 		      ((qrev (`C(h_1, a_1))) t_1)
//│ 		    | `N -> 
//│ 		      a_1);;
//│ 		let rec testMapQrev ls_0 =
//│ 		  ((map (fun x_0 -> 
//│ 		    (x_0 + 1))) ((qrev (`N)) ls_0));;
//│ 		(testMapQrev ((enumFromTo 1) 10000))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [enumFromTo^64] (hopeless to continue)
//│ 	[enumFromTo^64 · enumFromTo^7] ---> [enumFromTo^64] (using original def)
//│ [testMapQrev^62] (hopeless to continue)
//│ 	[testMapQrev^62 · map^47] (using original def)
//│ 		[testMapQrev^62 · map^47 · map^25] ---> [testMapQrev^62 · map^47] (using original def)
//│ 	[testMapQrev^62 · qrev^55] (using original def)
//│ 		[testMapQrev^62 · qrev^55 · qrev^36] ---> [testMapQrev^62 · qrev^55] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testMapQrev_₀(primId⁰(enumFromTo_₀(1, 10000)))
//│ def enumFromTo_₀(a², b¹) = 
//│ 	if (a² <= b¹) then [C a² enumFromTo_₀((a² + 1), b¹)] else [N]
//│ def testMapQrev_₀(ls¹) = 
//│ 	map_₀((fun x¹ -> (x¹ + 1)), qrev_₀([N], ls¹))
//│ 	where
//│ 	def map_₀(f¹, xs¹) = 
//│ 		case xs¹ of {
//│ 			C h³ t³ => [C f¹(h³) map_₀(f¹, t³)]
//│ 			| N  => [N]}
//│ 	def qrev_₀(a³, ys¹) = 
//│ 		case ys¹ of {
//│ 			C h² t² => qrev_₀([C h² a³], t²)
//│ 			| N  => a³}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 80 --->
//│ 	case xs¹ of {C h³ t³ => [C f¹(h³) map_₀(f¹, t³)] | N  => [N]}: 129
//│ [C h² a³]: 110 --->
//│ 	case xs¹ of {C h³ t³ => [C f¹(h³) map_₀(f¹, t³)] | N  => [N]}: 129
//│ ------------------
//│ case xs¹ of {C h³ t³ => [C f¹(h³) map_₀(f¹, t³)] | N  => [N]}: 129 --->
//│ 	[N]: 80
//│ 	[C h² a³]: 110
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 80 --->
//│ 	case xs¹ of {C h³ t³ => [C f¹(h³) map_₀(f¹, t³)] | N  => [N]}: 129
//│ [C h² a³]: 110 --->
//│ 	case xs¹ of {C h³ t³ => [C f¹(h³) map_₀(f¹, t³)] | N  => [N]}: 129
//│ ------------------
//│ case xs¹ of {C h³ t³ => [C f¹(h³) map_₀(f¹, t³)] | N  => [N]}: 129 --->
//│ 	[N]: 80
//│ 	[C h² a³]: 110
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMapQrev_₀(primId⁰(enumFromTo_₀(1, 10000)))
//│ def enumFromTo_₀(a⁴, b²) = 
//│ 	if (a⁴ <= b²) then [C a⁴ enumFromTo_₀((a⁴ + 1), b²)] else [N]
//│ def testMapQrev_₀(ls²) = 
//│ 	map_₀((fun x² -> (x² + 1)), qrev_₀((fun f² -> [N]), ls²))
//│ 	where
//│ 	def map_₀(f⁴, xs²) = 
//│ 		xs²(f⁴)
//│ 	def qrev_₀(a⁵, ys²) = 
//│ 		case ys² of {
//│ 			C h² t² => qrev_₀(
//│ 				let t⁴ = a⁵
//│ 				in let h⁴ = h²
//│ 				in (fun f³ -> [C f³(h⁴) map_₀(f³, t⁴)]), t²)
//│ 			| N  => a⁵}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


:lhGenOCaml
fun enumFromTo(a, b) = if a <= b then C(a, enumFromTo(a + 1, b)) else N
fun map(f, xs) = if xs is
  C(h, t) then C(f(h), map(f, t))
  N then N
fun qrev(a, ys) = if ys is
  C(h, t) then qrev(C(h, a), t)
  N then a
fun _lhManualQrevMap(f, xs, a) = if xs is
  C(h, t) then _lhManualQrevMap(f, t, C(f(h), a))
  N then a
fun testQrevMap(ls) = qrev(N, map(x => x + 1, ls))
fun testManual(ls) = _lhManualQrevMap(x => x + 1, ls, N)
testQrevMap(primId(enumFromTo(1, 10000)))
testManual(primId(enumFromTo(1, 10000)))
//│ |#fun| |enumFromTo|(|a|,| |b|)| |#=| |#if| |a| |<=| |b| |#then| |C|(|a|,| |enumFromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#fun| |map|(|f|,| |xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |qrev|(|a|,| |ys|)| |#=| |#if| |ys| |is|→|C|(|h|,| |t|)| |#then| |qrev|(|C|(|h|,| |a|)|,| |t|)|↵|N| |#then| |a|←|↵|#fun| |_lhManualQrevMap|(|f|,| |xs|,| |a|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |_lhManualQrevMap|(|f|,| |t|,| |C|(|f|(|h|)|,| |a|)|)|↵|N| |#then| |a|←|↵|#fun| |testQrevMap|(|ls|)| |#=| |qrev|(|N|,| |map|(|x| |=>| |x| |+| |1|,| |ls|)|)|↵|#fun| |testManual|(|ls|)| |#=| |_lhManualQrevMap|(|x| |=>| |x| |+| |1|,| |ls|,| |N|)|↵|testQrevMap|(|primId|(|enumFromTo|(|1|,| |10000|)|)|)|↵|testManual|(|primId|(|enumFromTo|(|1|,| |10000|)|)|)|
//│ Parsed: {fun enumFromTo = a, b, => if (<= (a,) (b,)) then C (a, enumFromTo (+ (a,) (1,), b,),) else N; fun map = f, xs, => if xs is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun qrev = a, ys, => if ys is ‹(C (h, t,)) then qrev (C (h, a,), t,); (N) then a›; fun _lhManualQrevMap = f, xs, a, => if xs is ‹(C (h, t,)) then _lhManualQrevMap (f, t, C (f (h,), a,),); (N) then a›; fun testQrevMap = ls, => qrev (N, map (x, => + (x,) (1,), ls,),); fun testManual = ls, => _lhManualQrevMap (x, => + (x,) (1,), ls, N,); testQrevMap (primId (enumFromTo (1, 10000,),),); testManual (primId (enumFromTo (1, 10000,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testQrevMap^92(primId⁰(enumFromTo^94(1, 10000)))
//│ testManual^101(primId⁰(enumFromTo^103(1, 10000)))
//│ def _lhManualQrevMap(f¹, xs¹, a²) = case xs¹ of {
//│ 	C h² t² => _lhManualQrevMap^48(f¹, t², [C f¹(h²) a²])
//│ 	| N  => a²}
//│ def enumFromTo(a⁰, b⁰) = if (a⁰ <= b⁰) then [C a⁰ enumFromTo^7((a⁰ + 1), b⁰)] else [N]
//│ def map(f⁰, xs⁰) = case xs⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map^25(f⁰, t⁰)]
//│ 	| N  => [N]}
//│ def qrev(a¹, ys⁰) = case ys⁰ of {
//│ 	C h¹ t¹ => qrev^36([C h¹ a¹], t¹)
//│ 	| N  => a¹}
//│ def testManual(ls¹) = _lhManualQrevMap^79((fun x¹ -> (x¹ + 1)), ls¹, [N])
//│ def testQrevMap(ls⁰) = qrev^64([N], map^67((fun x⁰ -> (x⁰ + 1)), ls⁰))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec _lhManualQrevMap f_1 xs_1 a_2 =
//│ 		  (match xs_1 with
//│ 		    | `C(h_2, t_2) -> 
//│ 		      (((_lhManualQrevMap f_1) t_2) (`C((f_1 h_2), a_2)))
//│ 		    | `N -> 
//│ 		      a_2);;
//│ 		let rec enumFromTo a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`C(a_0, ((enumFromTo (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`N));;
//│ 		let rec qrev a_1 ys_0 =
//│ 		  (match ys_0 with
//│ 		    | `C(h_1, t_1) -> 
//│ 		      ((qrev (`C(h_1, a_1))) t_1)
//│ 		    | `N -> 
//│ 		      a_1);;
//│ 		let rec map f_0 xs_0 =
//│ 		  (match xs_0 with
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (`C((f_0 h_0), ((map f_0) t_0)))
//│ 		    | `N -> 
//│ 		      (`N));;
//│ 		let rec testManual ls_1 =
//│ 		  (((_lhManualQrevMap (fun x_1 -> 
//│ 		    (x_1 + 1))) ls_1) (`N));;
//│ 		let rec testQrevMap ls_0 =
//│ 		  ((qrev (`N)) ((map (fun x_0 -> 
//│ 		    (x_0 + 1))) ls_0));;
//│ 		(testQrevMap ((enumFromTo 1) 10000))
//│ 		(testManual ((enumFromTo 1) 10000))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [enumFromTo^103] (hopeless to continue)
//│ 	[enumFromTo^103 · enumFromTo^7] ---> [enumFromTo^103] (using original def)
//│ [enumFromTo^94] (hopeless to continue)
//│ 	[enumFromTo^94 · enumFromTo^7] ---> [enumFromTo^94] (using original def)
//│ [testManual^101] (hopeless to continue)
//│ 	[testManual^101 · _lhManualQrevMap^79] (using original def)
//│ 		[testManual^101 · _lhManualQrevMap^79 · _lhManualQrevMap^48] ---> [testManual^101 · _lhManualQrevMap^79] (using original def)
//│ [testQrevMap^92] (hopeless to continue)
//│ 	[testQrevMap^92 · map^67] (using original def)
//│ 		[testQrevMap^92 · map^67 · map^25] ---> [testQrevMap^92 · map^67] (using original def)
//│ 	[testQrevMap^92 · qrev^64] (using original def)
//│ 		[testQrevMap^92 · qrev^64 · qrev^36] ---> [testQrevMap^92 · qrev^64] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testQrevMap_₀(primId⁰(enumFromTo_₁(1, 10000)))
//│ testManual_₀(primId⁰(enumFromTo_₀(1, 10000)))
//│ def enumFromTo_₀(a⁴, b¹) = 
//│ 	if (a⁴ <= b¹) then [C a⁴ enumFromTo_₀((a⁴ + 1), b¹)] else [N]
//│ def enumFromTo_₁(a⁵, b²) = 
//│ 	if (a⁵ <= b²) then [C a⁵ enumFromTo_₁((a⁵ + 1), b²)] else [N]
//│ def testManual_₀(ls²) = 
//│ 	_lhManualQrevMap_₀((fun x² -> (x² + 1)), ls², [N])
//│ 	where
//│ 	def _lhManualQrevMap_₀(f³, xs³, a⁶) = 
//│ 		case xs³ of {
//│ 			C h⁵ t⁵ => _lhManualQrevMap_₀(f³, t⁵, [C f³(h⁵) a⁶])
//│ 			| N  => a⁶}
//│ def testQrevMap_₀(ls³) = 
//│ 	qrev_₀([N], map_₀((fun x³ -> (x³ + 1)), ls³))
//│ 	where
//│ 	def map_₀(f², xs²) = 
//│ 		case xs² of {
//│ 			C h⁴ t⁴ => [C f²(h⁴) map_₀(f², t⁴)]
//│ 			| N  => [N]}
//│ 	def qrev_₀(a³, ys¹) = 
//│ 		case ys¹ of {
//│ 			C h³ t³ => qrev_₀([C h³ a³], t³)
//│ 			| N  => a³}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C f²(h⁴) map_₀(f², t⁴)]: 164 --->
//│ 	case ys¹ of {C h³ t³ => qrev_₀([C h³ a³], t³) | N  => a³}: 119
//│ [N]: 165 --->
//│ 	case ys¹ of {C h³ t³ => qrev_₀([C h³ a³], t³) | N  => a³}: 119
//│ ------------------
//│ case ys¹ of {C h³ t³ => qrev_₀([C h³ a³], t³) | N  => a³}: 119 --->
//│ 	[C f²(h⁴) map_₀(f², t⁴)]: 164
//│ 	[N]: 165
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C f²(h⁴) map_₀(f², t⁴)]: 164 --->
//│ 	case ys¹ of {C h³ t³ => qrev_₀([C h³ a³], t³) | N  => a³}: 119
//│ [N]: 165 --->
//│ 	case ys¹ of {C h³ t³ => qrev_₀([C h³ a³], t³) | N  => a³}: 119
//│ ------------------
//│ case ys¹ of {C h³ t³ => qrev_₀([C h³ a³], t³) | N  => a³}: 119 --->
//│ 	[C f²(h⁴) map_₀(f², t⁴)]: 164
//│ 	[N]: 165
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testQrevMap_₀(primId⁰(enumFromTo_₁(1, 10000)))
//│ testManual_₀(primId⁰(enumFromTo_₀(1, 10000)))
//│ def enumFromTo_₀(a¹⁰, b⁴) = 
//│ 	if (a¹⁰ <= b⁴) then [C a¹⁰ enumFromTo_₀((a¹⁰ + 1), b⁴)] else [N]
//│ def enumFromTo_₁(a⁹, b³) = 
//│ 	if (a⁹ <= b³) then [C a⁹ enumFromTo_₁((a⁹ + 1), b³)] else [N]
//│ def testManual_₀(ls⁵) = 
//│ 	_lhManualQrevMap_₀((fun x⁵ -> (x⁵ + 1)), ls⁵, [N])
//│ 	where
//│ 	def _lhManualQrevMap_₀(f⁵, xs⁵, a¹¹) = 
//│ 		case xs⁵ of {
//│ 			C h⁵ t⁵ => _lhManualQrevMap_₀(f⁵, t⁵, [C f⁵(h⁵) a¹¹])
//│ 			| N  => a¹¹}
//│ def testQrevMap_₀(ls⁴) = 
//│ 	qrev_₀([N], map_₀((fun x⁴ -> (x⁴ + 1)), ls⁴))
//│ 	where
//│ 	def map_₀(f⁴, xs⁴) = 
//│ 		case xs⁴ of {
//│ 			C h⁴ t⁴ => 
//│ 				let t⁶ = map_₀(f⁴, t⁴)
//│ 				in let h⁶ = f⁴(h⁴)
//│ 				in (fun a⁷ -> qrev_₀([C h⁶ a⁷], t⁶))
//│ 			| N  => (fun a⁸ -> a⁸)}
//│ 	def qrev_₀(a¹², ys²) = 
//│ 		ys²(a¹²)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ cannot generate benchmark files: key not found: Ident(true,_lhManualQrevMap_₀,0)
//│ 
//│ let rec qrev__d0 a_5 ys_0 =
//│   (ys_0 a_5);;
//│ let rec enumFromTo__d0 a_3 b_1 =
//│   (if (a_3 <= b_1) then
//│     (`C(a_3, ((enumFromTo__d0 (a_3 + 1)) b_1)))
//│   else
//│     (`N));;
//│ let rec enumFromTo__d1 a_2 b_0 =
//│   (if (a_2 <= b_0) then
//│     (`C(a_2, ((enumFromTo__d1 (a_2 + 1)) b_0)))
//│   else
//│     (`N));;
//│ let rec _lhManualQrevMap__d0 f_1 xs_1 a_4 =
//│   (match xs_1 with
//│     | `C(h_2, t_2) -> 
//│       (((_lhManualQrevMap__d0 f_1) t_2) (`C((f_1 h_2), a_4)))
//│     | `N -> 
//│       a_4);;
//│ let rec map__d0 f_0 xs_0 =
//│   (match xs_0 with
//│     | `C(h_0, t_0) -> 
//│       (let rec t_1 = ((map__d0 f_0) t_0) in
//│         (let rec h_1 = (f_0 h_0) in
//│           (fun a_0 -> 
//│             ((qrev__d0 (`C(h_1, a_0))) t_1))))
//│     | `N -> 
//│       (fun a_1 -> 
//│         a_1));;
//│ let rec testManual__d0 ls_1 =
//│   (((_lhManualQrevMap__d0 (fun x_1 -> 
//│     (x_1 + 1))) ls_1) (`N));;
//│ let rec testQrevMap__d0 ls_0 =
//│   ((qrev__d0 (`N)) ((map__d0 (fun x_0 -> 
//│     (x_0 + 1))) ls_0));;
//│ (testQrevMap__d0 ((enumFromTo__d1 1) 10000))
//│ (testManual__d0 ((enumFromTo__d0 1) 10000))
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

:lhInHaskell
:lhGenOCaml
sum [] = 0
sum (h:t) = h + sum(t)
testSumListComprehensionBuiltInType n = sum [ k * m | k <- [1..n], m <- [1..k] ]
testSumListComprehensionBuiltInType $ primId 1000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testSumListComprehensionBuiltInType_lh^82(primId⁰(1000))
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^7((a⁰ + 1), b⁰)] else [LH_N]
//│ def sum_lh(ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => (h⁰ + sum_lh^25(t⁰))
//│ 	| LH_N  => 0}
//│ def sum_lh(_lh_sum_arg1⁰) = case _lh_sum_arg1⁰ of {
//│ 	LH_N  => 0
//│ 	| LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => (_lh_sum_LH_C_0⁰ + sum_lh^75(_lh_sum_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def testSumListComprehensionBuiltInType_lh(_lh_testSumListComprehensionBuiltInType_arg1⁰) = sum_lh^32(
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 			let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 				LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C (_lh_listcomp_fun_ls_h⁰ * _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 				| LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ 			in _lh_listcomp_fun¹(enumFromTo_lh^50(1, _lh_listcomp_fun_ls_h⁰))
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰(enumFromTo_lh^61(1, _lh_testSumListComprehensionBuiltInType_arg1⁰)))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo_lh a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec sum_lh _lh_sum_arg1_0 =
//│ 		  (match _lh_sum_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      0
//│ 		    | `LH_C(_lh_sum_LH_C_0_0, _lh_sum_LH_C_1_0) -> 
//│ 		      (_lh_sum_LH_C_0_0 + (sum_lh _lh_sum_LH_C_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec testSumListComprehensionBuiltInType_lh _lh_testSumListComprehensionBuiltInType_arg1_0 =
//│ 		  (sum_lh (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		    (match _lh_listcomp_fun_para_0 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		        (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		          (match _lh_listcomp_fun_para_1 with
//│ 		            | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		              (`LH_C((_lh_listcomp_fun_ls_h_0 * _lh_listcomp_fun_ls_h_1), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		            | `LH_N -> 
//│ 		              (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))) in
//│ 		          (_lh_listcomp_fun_1 ((enumFromTo_lh 1) _lh_listcomp_fun_ls_h_0)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_0 ((enumFromTo_lh 1) _lh_testSumListComprehensionBuiltInType_arg1_0))));;
//│ 		(testSumListComprehensionBuiltInType_lh 1000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 16 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C (_lh_listcomp_fun_ls_h⁰ * _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 47
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C (_lh_listcomp_fun_ls_h⁰ * _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(1, _lh_listcomp_fun_ls_h⁰)) | LH_N  => [LH_N]}: 58
//│ [LH_N]: 17 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C (_lh_listcomp_fun_ls_h⁰ * _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 47
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C (_lh_listcomp_fun_ls_h⁰ * _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(1, _lh_listcomp_fun_ls_h⁰)) | LH_N  => [LH_N]}: 58
//│ [LH_C (_lh_listcomp_fun_ls_h⁰ * _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 43 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (h⁰ + sum_lh(t⁰)) | LH_N  => 0}: 30
//│ 	case _lh_sum_arg1⁰ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => (_lh_sum_LH_C_0⁰ + sum_lh(_lh_sum_LH_C_1⁰)) | _  => error⁰}: 80
//│ [LH_N]: 57 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (h⁰ + sum_lh(t⁰)) | LH_N  => 0}: 30
//│ 	case _lh_sum_arg1⁰ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => (_lh_sum_LH_C_0⁰ + sum_lh(_lh_sum_LH_C_1⁰)) | _  => error⁰}: 80
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => (h⁰ + sum_lh(t⁰)) | LH_N  => 0}: 30 --->
//│ 	[LH_C (_lh_listcomp_fun_ls_h⁰ * _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 43
//│ 	[LH_N]: 57
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C (_lh_listcomp_fun_ls_h⁰ * _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 47 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 16
//│ 	[LH_N]: 17
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C (_lh_listcomp_fun_ls_h⁰ * _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(1, _lh_listcomp_fun_ls_h⁰)) | LH_N  => [LH_N]}: 58 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 16
//│ 	[LH_N]: 17
//│ case _lh_sum_arg1⁰ of {LH_N  => 0 | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => (_lh_sum_LH_C_0⁰ + sum_lh(_lh_sum_LH_C_1⁰)) | _  => error⁰}: 80 --->
//│ 	[LH_C (_lh_listcomp_fun_ls_h⁰ * _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 43
//│ 	[LH_N]: 57
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testSumListComprehensionBuiltInType_lh(primId⁰(1000))
//│ def enumFromTo_lh(a¹, b¹) = if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh((a¹ + 1), b¹)] else [LH_N]
//│ def sum_lh(_lh_sum_arg1¹) = case _lh_sum_arg1¹ of {
//│ 	LH_N  => 0
//│ 	| LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => (_lh_sum_LH_C_0⁰ + sum_lh(_lh_sum_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def testSumListComprehensionBuiltInType_lh(_lh_testSumListComprehensionBuiltInType_arg1¹) = sum_lh(
//│ 	let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 			let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 				LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C (_lh_listcomp_fun_ls_h⁰ * _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t¹)]
//│ 				| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t⁰)})
//│ 			in _lh_listcomp_fun³(enumFromTo_lh(1, _lh_listcomp_fun_ls_h⁰))
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun²(enumFromTo_lh(1, _lh_testSumListComprehensionBuiltInType_arg1¹)))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


:lhInHaskell
:lhGenOCaml
flatMap f [] = []
flatMap f (h:t) = (f h) ++ (flatMap f t)
sum s [] = s
sum s (h:t) = sum (s+h) t
testSumFlatmapEnum n = sum 0 $ flatMap (\a -> [a, a]) [1..n]
testSumFlatmapEnum $ primId 100000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testSumFlatmapEnum_lh^95(primId⁰(100000))
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^7((a⁰ + 1), b⁰)] else [LH_N]
//│ def flatMap_lh(_lh_flatMap_arg1⁰, _lh_flatMap_arg2⁰) = case _lh_flatMap_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => mappend_lh^46(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh^51(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def mappend_lh(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh^23(t⁰, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def sum_lh(ls⁰) = case ls⁰ of {
//│ 	LH_C h¹ t¹ => (h¹ + sum_lh^37(t¹))
//│ 	| LH_N  => 0}
//│ def sum_lh(_lh_sum_arg1⁰, _lh_sum_arg2⁰) = case _lh_sum_arg2⁰ of {
//│ 	LH_N  => _lh_sum_arg1⁰
//│ 	| LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => sum_lh^82((_lh_sum_arg1⁰ + _lh_sum_LH_C_0⁰), _lh_sum_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def testSumFlatmapEnum_lh(_lh_testSumFlatmapEnum_arg1⁰) = sum_lh^61(0, flatMap_lh^64((fun a¹ -> [LH_C a¹ [LH_C a¹ [LH_N]]]), enumFromTo_lh^72(1, _lh_testSumFlatmapEnum_arg1⁰)))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec mappend_lh xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C(h_0, ((mappend_lh t_0) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec enumFromTo_lh a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec sum_lh _lh_sum_arg1_0 _lh_sum_arg2_0 =
//│ 		  (match _lh_sum_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      _lh_sum_arg1_0
//│ 		    | `LH_C(_lh_sum_LH_C_0_0, _lh_sum_LH_C_1_0) -> 
//│ 		      ((sum_lh (_lh_sum_arg1_0 + _lh_sum_LH_C_0_0)) _lh_sum_LH_C_1_0)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec flatMap_lh _lh_flatMap_arg1_0 _lh_flatMap_arg2_0 =
//│ 		  (match _lh_flatMap_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_flatMap_LH_C_0_0, _lh_flatMap_LH_C_1_0) -> 
//│ 		      ((mappend_lh (_lh_flatMap_arg1_0 _lh_flatMap_LH_C_0_0)) ((flatMap_lh _lh_flatMap_arg1_0) _lh_flatMap_LH_C_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec testSumFlatmapEnum_lh _lh_testSumFlatmapEnum_arg1_0 =
//│ 		  ((sum_lh 0) ((flatMap_lh (fun a_1 -> 
//│ 		    (`LH_C(a_1, (`LH_C(a_1, (`LH_N))))))) ((enumFromTo_lh 1) _lh_testSumFlatmapEnum_arg1_0)));;
//│ 		(testSumFlatmapEnum_lh 100000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 16 --->
//│ 	case _lh_flatMap_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => mappend_lh(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰)) | _  => error⁰}: 58
//│ [LH_N]: 17 --->
//│ 	case _lh_flatMap_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => mappend_lh(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰)) | _  => error⁰}: 58
//│ [LH_C h⁰ mappend_lh(t⁰, ys⁰)]: 28 --->
//│ 	case _lh_sum_arg2⁰ of {LH_N  => _lh_sum_arg1⁰ | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => sum_lh((_lh_sum_arg1⁰ + _lh_sum_LH_C_0⁰), _lh_sum_LH_C_1⁰) | _  => error⁰}: 92
//│ [LH_N]: 45 --->
//│ 	case _lh_sum_arg2⁰ of {LH_N  => _lh_sum_arg1⁰ | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => sum_lh((_lh_sum_arg1⁰ + _lh_sum_LH_C_0⁰), _lh_sum_LH_C_1⁰) | _  => error⁰}: 92
//│ [LH_N]: 67 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh(t⁰, ys⁰)] | LH_N  => ys⁰}: 30
//│ [LH_C a¹ [LH_N]]: 68 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh(t⁰, ys⁰)] | LH_N  => ys⁰}: 30
//│ [LH_C a¹ [LH_C a¹ [LH_N]]]: 69 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh(t⁰, ys⁰)] | LH_N  => ys⁰}: 30
//│ ------------------
//│ case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh(t⁰, ys⁰)] | LH_N  => ys⁰}: 30 --->
//│ 	[LH_N]: 67
//│ 	[LH_C a¹ [LH_N]]: 68
//│ 	[LH_C a¹ [LH_C a¹ [LH_N]]]: 69
//│ case _lh_flatMap_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => mappend_lh(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰)) | _  => error⁰}: 58 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 16
//│ 	[LH_N]: 17
//│ case _lh_sum_arg2⁰ of {LH_N  => _lh_sum_arg1⁰ | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => sum_lh((_lh_sum_arg1⁰ + _lh_sum_LH_C_0⁰), _lh_sum_LH_C_1⁰) | _  => error⁰}: 92 --->
//│ 	[LH_C h⁰ mappend_lh(t⁰, ys⁰)]: 28
//│ 	[LH_N]: 45
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 16 --->
//│ 	case _lh_flatMap_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => mappend_lh(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰)) | _  => error⁰}: 58
//│ [LH_N]: 17 --->
//│ 	case _lh_flatMap_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => mappend_lh(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰)) | _  => error⁰}: 58
//│ [LH_C h⁰ mappend_lh(t⁰, ys⁰)]: 28 --->
//│ 	case _lh_sum_arg2⁰ of {LH_N  => _lh_sum_arg1⁰ | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => sum_lh((_lh_sum_arg1⁰ + _lh_sum_LH_C_0⁰), _lh_sum_LH_C_1⁰) | _  => error⁰}: 92
//│ [LH_N]: 45 --->
//│ 	case _lh_sum_arg2⁰ of {LH_N  => _lh_sum_arg1⁰ | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => sum_lh((_lh_sum_arg1⁰ + _lh_sum_LH_C_0⁰), _lh_sum_LH_C_1⁰) | _  => error⁰}: 92
//│ [LH_N]: 67 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh(t⁰, ys⁰)] | LH_N  => ys⁰}: 30
//│ [LH_C a¹ [LH_N]]: 68 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh(t⁰, ys⁰)] | LH_N  => ys⁰}: 30
//│ [LH_C a¹ [LH_C a¹ [LH_N]]]: 69 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh(t⁰, ys⁰)] | LH_N  => ys⁰}: 30
//│ ------------------
//│ case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh(t⁰, ys⁰)] | LH_N  => ys⁰}: 30 --->
//│ 	[LH_N]: 67
//│ 	[LH_C a¹ [LH_N]]: 68
//│ 	[LH_C a¹ [LH_C a¹ [LH_N]]]: 69
//│ case _lh_flatMap_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => mappend_lh(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰)) | _  => error⁰}: 58 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 16
//│ 	[LH_N]: 17
//│ case _lh_sum_arg2⁰ of {LH_N  => _lh_sum_arg1⁰ | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => sum_lh((_lh_sum_arg1⁰ + _lh_sum_LH_C_0⁰), _lh_sum_LH_C_1⁰) | _  => error⁰}: 92 --->
//│ 	[LH_C h⁰ mappend_lh(t⁰, ys⁰)]: 28
//│ 	[LH_N]: 45
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testSumFlatmapEnum_lh(primId⁰(100000))
//│ def enumFromTo_lh(a², b¹) = if (a² <= b¹) then 
//│ 	let _lh_flatMap_LH_C_1¹ = enumFromTo_lh((a² + 1), b¹)
//│ 	in let _lh_flatMap_LH_C_0¹ = a²
//│ 	in (fun _lh_flatMap_arg1¹ -> mappend_lh(_lh_flatMap_arg1¹(_lh_flatMap_LH_C_0¹), flatMap_lh(_lh_flatMap_arg1¹, _lh_flatMap_LH_C_1¹))) else (fun _lh_flatMap_arg1² -> (fun _lh_sum_arg1¹ -> _lh_sum_arg1¹))
//│ def flatMap_lh(_lh_flatMap_arg1³, _lh_flatMap_arg2¹) = _lh_flatMap_arg2¹(_lh_flatMap_arg1³)
//│ def mappend_lh(xs¹, ys¹) = xs¹(ys¹)
//│ def sum_lh(_lh_sum_arg1², _lh_sum_arg2¹) = _lh_sum_arg2¹(_lh_sum_arg1²)
//│ def testSumFlatmapEnum_lh(_lh_testSumFlatmapEnum_arg1¹) = sum_lh(0, flatMap_lh((fun a³ -> 
//│ 	let t² = 	
//│ 		let t³ = (fun ys⁴ -> ys⁴)
//│ 		in let h³ = a³
//│ 		in (fun ys³ -> 
//│ 			let _lh_sum_LH_C_1² = mappend_lh(t³, ys³)
//│ 			in let _lh_sum_LH_C_0² = h³
//│ 			in (fun _lh_sum_arg1⁴ -> sum_lh((_lh_sum_arg1⁴ + _lh_sum_LH_C_0²), _lh_sum_LH_C_1²)))
//│ 	in let h² = a³
//│ 	in (fun ys² -> 
//│ 		let _lh_sum_LH_C_1¹ = mappend_lh(t², ys²)
//│ 		in let _lh_sum_LH_C_0¹ = h²
//│ 		in (fun _lh_sum_arg1³ -> sum_lh((_lh_sum_arg1³ + _lh_sum_LH_C_0¹), _lh_sum_LH_C_1¹)))), enumFromTo_lh(1, _lh_testSumFlatmapEnum_arg1¹)))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

:lhInHaskell
:lhGenOCaml
flatMap f [] = []
flatMap f (h:t) = (f h) ++ (flatMap f t)
sum s [] = s
sum s (h:t) = sum (s+h) t
testSumFlatmap n = sum 0 $ flatMap (\a -> [a, a]) (primId [1..n])
testSumFlatmap $ primId 100000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testSumFlatmap_lh^97(primId⁰(100000))
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^7((a⁰ + 1), b⁰)] else [LH_N]
//│ def flatMap_lh(_lh_flatMap_arg1⁰, _lh_flatMap_arg2⁰) = case _lh_flatMap_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => mappend_lh^67(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh^72(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def mappend_lh(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh^23(t⁰, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def sum_lh(ls⁰) = case ls⁰ of {
//│ 	LH_C h¹ t¹ => (h¹ + sum_lh^37(t¹))
//│ 	| LH_N  => 0}
//│ def sum_lh(_lh_sum_arg1⁰, _lh_sum_arg2⁰) = case _lh_sum_arg2⁰ of {
//│ 	LH_N  => _lh_sum_arg1⁰
//│ 	| LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => sum_lh^84((_lh_sum_arg1⁰ + _lh_sum_LH_C_0⁰), _lh_sum_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def testSumFlatmap_lh(_lh_testSumFlatmap_arg1⁰) = sum_lh^44(0, flatMap_lh^47((fun a¹ -> [LH_C a¹ [LH_C a¹ [LH_N]]]), primId⁰(enumFromTo_lh^56(1, _lh_testSumFlatmap_arg1⁰))))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec mappend_lh xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C(h_0, ((mappend_lh t_0) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec sum_lh _lh_sum_arg1_0 _lh_sum_arg2_0 =
//│ 		  (match _lh_sum_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      _lh_sum_arg1_0
//│ 		    | `LH_C(_lh_sum_LH_C_0_0, _lh_sum_LH_C_1_0) -> 
//│ 		      ((sum_lh (_lh_sum_arg1_0 + _lh_sum_LH_C_0_0)) _lh_sum_LH_C_1_0)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec enumFromTo_lh a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec flatMap_lh _lh_flatMap_arg1_0 _lh_flatMap_arg2_0 =
//│ 		  (match _lh_flatMap_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_flatMap_LH_C_0_0, _lh_flatMap_LH_C_1_0) -> 
//│ 		      ((mappend_lh (_lh_flatMap_arg1_0 _lh_flatMap_LH_C_0_0)) ((flatMap_lh _lh_flatMap_arg1_0) _lh_flatMap_LH_C_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec testSumFlatmap_lh _lh_testSumFlatmap_arg1_0 =
//│ 		  ((sum_lh 0) ((flatMap_lh (fun a_1 -> 
//│ 		    (`LH_C(a_1, (`LH_C(a_1, (`LH_N))))))) ((enumFromTo_lh 1) _lh_testSumFlatmap_arg1_0)));;
//│ 		(testSumFlatmap_lh 100000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C h⁰ mappend_lh(t⁰, ys⁰)]: 28 --->
//│ 	case _lh_sum_arg2⁰ of {LH_N  => _lh_sum_arg1⁰ | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => sum_lh((_lh_sum_arg1⁰ + _lh_sum_LH_C_0⁰), _lh_sum_LH_C_1⁰) | _  => error⁰}: 94
//│ [LH_N]: 50 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh(t⁰, ys⁰)] | LH_N  => ys⁰}: 30
//│ [LH_C a¹ [LH_N]]: 51 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh(t⁰, ys⁰)] | LH_N  => ys⁰}: 30
//│ [LH_C a¹ [LH_C a¹ [LH_N]]]: 52 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh(t⁰, ys⁰)] | LH_N  => ys⁰}: 30
//│ [LH_N]: 66 --->
//│ 	case _lh_sum_arg2⁰ of {LH_N  => _lh_sum_arg1⁰ | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => sum_lh((_lh_sum_arg1⁰ + _lh_sum_LH_C_0⁰), _lh_sum_LH_C_1⁰) | _  => error⁰}: 94
//│ ------------------
//│ case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh(t⁰, ys⁰)] | LH_N  => ys⁰}: 30 --->
//│ 	[LH_N]: 50
//│ 	[LH_C a¹ [LH_N]]: 51
//│ 	[LH_C a¹ [LH_C a¹ [LH_N]]]: 52
//│ case _lh_sum_arg2⁰ of {LH_N  => _lh_sum_arg1⁰ | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => sum_lh((_lh_sum_arg1⁰ + _lh_sum_LH_C_0⁰), _lh_sum_LH_C_1⁰) | _  => error⁰}: 94 --->
//│ 	[LH_C h⁰ mappend_lh(t⁰, ys⁰)]: 28
//│ 	[LH_N]: 66
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C h⁰ mappend_lh(t⁰, ys⁰)]: 28 --->
//│ 	case _lh_sum_arg2⁰ of {LH_N  => _lh_sum_arg1⁰ | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => sum_lh((_lh_sum_arg1⁰ + _lh_sum_LH_C_0⁰), _lh_sum_LH_C_1⁰) | _  => error⁰}: 94
//│ [LH_N]: 50 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh(t⁰, ys⁰)] | LH_N  => ys⁰}: 30
//│ [LH_C a¹ [LH_N]]: 51 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh(t⁰, ys⁰)] | LH_N  => ys⁰}: 30
//│ [LH_C a¹ [LH_C a¹ [LH_N]]]: 52 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh(t⁰, ys⁰)] | LH_N  => ys⁰}: 30
//│ [LH_N]: 66 --->
//│ 	case _lh_sum_arg2⁰ of {LH_N  => _lh_sum_arg1⁰ | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => sum_lh((_lh_sum_arg1⁰ + _lh_sum_LH_C_0⁰), _lh_sum_LH_C_1⁰) | _  => error⁰}: 94
//│ ------------------
//│ case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh(t⁰, ys⁰)] | LH_N  => ys⁰}: 30 --->
//│ 	[LH_N]: 50
//│ 	[LH_C a¹ [LH_N]]: 51
//│ 	[LH_C a¹ [LH_C a¹ [LH_N]]]: 52
//│ case _lh_sum_arg2⁰ of {LH_N  => _lh_sum_arg1⁰ | LH_C _lh_sum_LH_C_0⁰ _lh_sum_LH_C_1⁰ => sum_lh((_lh_sum_arg1⁰ + _lh_sum_LH_C_0⁰), _lh_sum_LH_C_1⁰) | _  => error⁰}: 94 --->
//│ 	[LH_C h⁰ mappend_lh(t⁰, ys⁰)]: 28
//│ 	[LH_N]: 66
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testSumFlatmap_lh(primId⁰(100000))
//│ def enumFromTo_lh(a², b¹) = if (a² <= b¹) then [LH_C a² enumFromTo_lh((a² + 1), b¹)] else [LH_N]
//│ def flatMap_lh(_lh_flatMap_arg1¹, _lh_flatMap_arg2¹) = case _lh_flatMap_arg2¹ of {
//│ 	LH_N  => (fun _lh_sum_arg1¹ -> _lh_sum_arg1¹)
//│ 	| LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => mappend_lh(_lh_flatMap_arg1¹(_lh_flatMap_LH_C_0⁰), flatMap_lh(_lh_flatMap_arg1¹, _lh_flatMap_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def mappend_lh(xs¹, ys¹) = xs¹(ys¹)
//│ def sum_lh(_lh_sum_arg1², _lh_sum_arg2¹) = _lh_sum_arg2¹(_lh_sum_arg1²)
//│ def testSumFlatmap_lh(_lh_testSumFlatmap_arg1¹) = sum_lh(0, flatMap_lh((fun a³ -> 
//│ 	let t² = 	
//│ 		let t³ = (fun ys⁴ -> ys⁴)
//│ 		in let h³ = a³
//│ 		in (fun ys³ -> 
//│ 			let _lh_sum_LH_C_1² = mappend_lh(t³, ys³)
//│ 			in let _lh_sum_LH_C_0² = h³
//│ 			in (fun _lh_sum_arg1⁴ -> sum_lh((_lh_sum_arg1⁴ + _lh_sum_LH_C_0²), _lh_sum_LH_C_1²)))
//│ 	in let h² = a³
//│ 	in (fun ys² -> 
//│ 		let _lh_sum_LH_C_1¹ = mappend_lh(t², ys²)
//│ 		in let _lh_sum_LH_C_0¹ = h²
//│ 		in (fun _lh_sum_arg1³ -> sum_lh((_lh_sum_arg1³ + _lh_sum_LH_C_0¹), _lh_sum_LH_C_1¹)))), primId⁰(enumFromTo_lh(1, _lh_testSumFlatmap_arg1¹))))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


:lhGenOCaml
fun sqTree(t) = if t is
  T(v, l, r) then T(v * v, sqTree(l), sqTree(r))
  L then L
fun sumTree(t) = if t is
  T(v, l, r) then v + sumTree(l) + sumTree(r)
  L then 0
fun genTree(n) = if n > 0 then T(n, genTree(n - 1), genTree(n - 1)) else L
fun testSumSquareTree(n) = sumTree(sqTree(primId(genTree(n))))
testSumSquareTree(primId(18))
//│ |#fun| |sqTree|(|t|)| |#=| |#if| |t| |is|→|T|(|v|,| |l|,| |r|)| |#then| |T|(|v| |*| |v|,| |sqTree|(|l|)|,| |sqTree|(|r|)|)|↵|L| |#then| |L|←|↵|#fun| |sumTree|(|t|)| |#=| |#if| |t| |is|→|T|(|v|,| |l|,| |r|)| |#then| |v| |+| |sumTree|(|l|)| |+| |sumTree|(|r|)|↵|L| |#then| |0|←|↵|#fun| |genTree|(|n|)| |#=| |#if| |n| |>| |0| |#then| |T|(|n|,| |genTree|(|n| |-| |1|)|,| |genTree|(|n| |-| |1|)|)| |#else| |L|↵|#fun| |testSumSquareTree|(|n|)| |#=| |sumTree|(|sqTree|(|primId|(|genTree|(|n|)|)|)|)|↵|testSumSquareTree|(|primId|(|18|)|)|
//│ Parsed: {fun sqTree = t, => if t is ‹(T (v, l, r,)) then T (* (v,) (v,), sqTree (l,), sqTree (r,),); (L) then L›; fun sumTree = t, => if t is ‹(T (v, l, r,)) then + (+ (v,) (sumTree (l,),),) (sumTree (r,),); (L) then 0›; fun genTree = n, => if (> (n,) (0,)) then T (n, genTree (- (n,) (1,),), genTree (- (n,) (1,),),) else L; fun testSumSquareTree = n, => sumTree (sqTree (primId (genTree (n,),),),); testSumSquareTree (primId (18,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testSumSquareTree^68(primId⁰(18))
//│ def genTree(n⁰) = if (n⁰ > 0) then [T n⁰ genTree^40((n⁰ - 1)) genTree^47((n⁰ - 1))] else [L]
//│ def sqTree(t⁰) = case t⁰ of {
//│ 	T v⁰ l⁰ r⁰ => [T (v⁰ * v⁰) sqTree^7(l⁰) sqTree^10(r⁰)]
//│ 	| L  => [L]}
//│ def sumTree(t¹) = case t¹ of {
//│ 	T v¹ l¹ r¹ => ((v¹ + sumTree^22(l¹)) + sumTree^27(r¹))
//│ 	| L  => 0}
//│ def testSumSquareTree(n¹) = sumTree^58(sqTree^59(primId⁰(genTree^61(n¹))))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec sqTree t_0 =
//│ 		  (match t_0 with
//│ 		    | `T(v_0, l_0, r_0) -> 
//│ 		      (`T((v_0 * v_0), (sqTree l_0), (sqTree r_0)))
//│ 		    | `L -> 
//│ 		      (`L));;
//│ 		let rec sumTree t_1 =
//│ 		  (match t_1 with
//│ 		    | `T(v_1, l_1, r_1) -> 
//│ 		      ((v_1 + (sumTree l_1)) + (sumTree r_1))
//│ 		    | `L -> 
//│ 		      0);;
//│ 		let rec genTree n_0 =
//│ 		  (if (n_0 > 0) then
//│ 		    (`T(n_0, (genTree (n_0 - 1)), (genTree (n_0 - 1))))
//│ 		  else
//│ 		    (`L));;
//│ 		let rec testSumSquareTree n_1 =
//│ 		  (sumTree (sqTree (genTree n_1)));;
//│ 		(testSumSquareTree 18)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testSumSquareTree^68] (hopeless to continue)
//│ 	[testSumSquareTree^68 · genTree^61] (using original def)
//│ 		[testSumSquareTree^68 · genTree^61 · genTree^40] ---> [testSumSquareTree^68 · genTree^61] (using original def)
//│ 		[testSumSquareTree^68 · genTree^61 · genTree^47] ---> [testSumSquareTree^68 · genTree^61] (using original def)
//│ 	[testSumSquareTree^68 · sqTree^59] (using original def)
//│ 		[testSumSquareTree^68 · sqTree^59 · sqTree^10] ---> [testSumSquareTree^68 · sqTree^59] (using original def)
//│ 		[testSumSquareTree^68 · sqTree^59 · sqTree^7] ---> [testSumSquareTree^68 · sqTree^59] (using original def)
//│ 	[testSumSquareTree^68 · sumTree^58] (using original def)
//│ 		[testSumSquareTree^68 · sumTree^58 · sumTree^22] ---> [testSumSquareTree^68 · sumTree^58] (using original def)
//│ 		[testSumSquareTree^68 · sumTree^58 · sumTree^27] ---> [testSumSquareTree^68 · sumTree^58] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testSumSquareTree_₀(primId⁰(18))
//│ def testSumSquareTree_₀(n²) = 
//│ 	sumTree_₀(sqTree_₀(primId⁰(genTree_₀(n²))))
//│ 	where
//│ 	def genTree_₀(n³) = 
//│ 		if (n³ > 0) then [T n³ genTree_₀((n³ - 1)) genTree_₀((n³ - 1))] else [L]
//│ 	def sqTree_₀(t³) = 
//│ 		case t³ of {
//│ 			T v³ l³ r³ => [T (v³ * v³) sqTree_₀(l³) sqTree_₀(r³)]
//│ 			| L  => [L]}
//│ 	def sumTree_₀(t²) = 
//│ 		case t² of {
//│ 			T v² l² r² => ((v² + sumTree_₀(l²)) + sumTree_₀(r²))
//│ 			| L  => 0}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [T (v³ * v³) sqTree_₀(l³) sqTree_₀(r³)]: 102 --->
//│ 	case t² of {T v² l² r² => ((v² + sumTree_₀(l²)) + sumTree_₀(r²)) | L  => 0}: 88
//│ [L]: 103 --->
//│ 	case t² of {T v² l² r² => ((v² + sumTree_₀(l²)) + sumTree_₀(r²)) | L  => 0}: 88
//│ ------------------
//│ case t² of {T v² l² r² => ((v² + sumTree_₀(l²)) + sumTree_₀(r²)) | L  => 0}: 88 --->
//│ 	[T (v³ * v³) sqTree_₀(l³) sqTree_₀(r³)]: 102
//│ 	[L]: 103
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [T (v³ * v³) sqTree_₀(l³) sqTree_₀(r³)]: 102 --->
//│ 	case t² of {T v² l² r² => ((v² + sumTree_₀(l²)) + sumTree_₀(r²)) | L  => 0}: 88
//│ [L]: 103 --->
//│ 	case t² of {T v² l² r² => ((v² + sumTree_₀(l²)) + sumTree_₀(r²)) | L  => 0}: 88
//│ ------------------
//│ case t² of {T v² l² r² => ((v² + sumTree_₀(l²)) + sumTree_₀(r²)) | L  => 0}: 88 --->
//│ 	[T (v³ * v³) sqTree_₀(l³) sqTree_₀(r³)]: 102
//│ 	[L]: 103
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testSumSquareTree_₀(primId⁰(18))
//│ def testSumSquareTree_₀(n⁴) = 
//│ 	sumTree_₀(sqTree_₀(primId⁰(genTree_₀(n⁴))))
//│ 	where
//│ 	def genTree_₀(n⁵) = 
//│ 		if (n⁵ > 0) then [T n⁵ genTree_₀((n⁵ - 1)) genTree_₀((n⁵ - 1))] else [L]
//│ 	def sqTree_₀(t⁵) = 
//│ 		case t⁵ of {
//│ 			T v³ l³ r³ => 
//│ 				let r⁴ = sqTree_₀(r³)
//│ 				in let l⁴ = sqTree_₀(l³)
//│ 				in let v⁴ = (v³ * v³)
//│ 				in (fun _lh_dummy⁰ -> ((v⁴ + sumTree_₀(l⁴)) + sumTree_₀(r⁴)))
//│ 			| L  => (fun _lh_dummy¹ -> 0)}
//│ 	def sumTree_₀(t⁴) = 
//│ 		t⁴(99)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<



:lhInHaskell
:lhGenOCaml
summ xs = case xs of { [] -> 0; (h:t) -> h + (summ t) }
append xs ys = case xs of { [] -> ys; (h:t) -> h:(append t ys) }
flatten xss = case xss of { [] -> []; (h:t) -> append h (flatten t) }
testSumFlatten n = summ $ flatten n
sum2 ls = let k = ls in k 99
append2 xs ys p = case xs of { [] -> ys p; (h:t) -> let tt = append2 t ys in let hh = h in hh + sum2 tt }
flatten2 ls p = case ls of { [] -> 0; (h:t) -> append2 h (flatten2 t) p }
testManual n = sum2 $ flatten2 n
testSumFlatten $ primId [primId [1..n] | n <- primId [1..1000]]
testManual $ primId [primId [1..n] | n <- primId [1..1000]]
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testSumFlatten_lh^125(primId⁰(
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C primId⁰(enumFromTo_lh^129(1, _lh_listcomp_fun_ls_h⁰)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰(primId⁰(enumFromTo_lh^144(1, 1000)))))
//│ testManual_lh^154(primId⁰(
//│ 	let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C primId⁰(enumFromTo_lh^158(1, _lh_listcomp_fun_ls_h¹)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹(primId⁰(enumFromTo_lh^173(1, 1000)))))
//│ def append2_lh(_lh_append2_arg1⁰, _lh_append2_arg2⁰, _lh_append2_arg3⁰) = 
//│ 	let _lh_matchIdent⁴ = _lh_append2_arg1⁰
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_N  => _lh_append2_arg2⁰(_lh_append2_arg3⁰)
//│ 		| LH_C _lh_append2_LH_C_0⁰ _lh_append2_LH_C_1⁰ => 
//│ 			let tt⁰ = append2_lh^104(_lh_append2_LH_C_1⁰, _lh_append2_arg2⁰)
//│ 			in let hh⁰ = _lh_append2_LH_C_0⁰
//│ 			in (hh⁰ + sum2_lh^113(tt⁰))
//│ 		| _  => error⁰}
//│ def append_lh(_lh_append_arg1⁰, _lh_append_arg2⁰) = 
//│ 	let _lh_matchIdent³ = _lh_append_arg1⁰
//│ 	in case _lh_matchIdent³ of {
//│ 		LH_N  => _lh_append_arg2⁰
//│ 		| LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => [LH_C _lh_append_LH_C_0⁰ append_lh^88(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)]
//│ 		| _  => error⁰}
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^7((a⁰ + 1), b⁰)] else [LH_N]
//│ def flatten2_lh(_lh_flatten2_arg1⁰, _lh_flatten2_arg2⁰) = 
//│ 	let _lh_matchIdent² = _lh_flatten2_arg1⁰
//│ 	in case _lh_matchIdent² of {
//│ 		LH_N  => 0
//│ 		| LH_C _lh_flatten2_LH_C_0⁰ _lh_flatten2_LH_C_1⁰ => append2_lh^70(_lh_flatten2_LH_C_0⁰, flatten2_lh^73(_lh_flatten2_LH_C_1⁰), _lh_flatten2_arg2⁰)
//│ 		| _  => error⁰}
//│ def flatten_lh(_lh_flatten_arg1⁰) = 
//│ 	let _lh_matchIdent⁰ = _lh_flatten_arg1⁰
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_flatten_LH_C_0⁰ _lh_flatten_LH_C_1⁰ => append_lh^24(_lh_flatten_LH_C_0⁰, flatten_lh^27(_lh_flatten_LH_C_1⁰))
//│ 		| _  => error⁰}
//│ def sum2_lh(_lh_sum2_arg1⁰) = 
//│ 	let k⁰ = _lh_sum2_arg1⁰
//│ 	in k⁰(99)
//│ def summ_lh(_lh_summ_arg1⁰) = 
//│ 	let _lh_matchIdent¹ = _lh_summ_arg1⁰
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_N  => 0
//│ 		| LH_C _lh_summ_LH_C_0⁰ _lh_summ_LH_C_1⁰ => (_lh_summ_LH_C_0⁰ + summ_lh^59(_lh_summ_LH_C_1⁰))
//│ 		| _  => error⁰}
//│ def testManual_lh(_lh_testManual_arg1⁰) = sum2_lh^35(flatten2_lh^36(_lh_testManual_arg1⁰))
//│ def testSumFlatten_lh(_lh_testSumFlatten_arg1⁰) = summ_lh^41(flatten_lh^42(_lh_testSumFlatten_arg1⁰))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo_lh a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec sum2_lh _lh_sum2_arg1_0 =
//│ 		  (let rec k_0 = _lh_sum2_arg1_0 in
//│ 		    (k_0 99));;
//│ 		let rec append_lh _lh_append_arg1_0 _lh_append_arg2_0 =
//│ 		  (let rec _lh_matchIdent_3 = _lh_append_arg1_0 in
//│ 		    (match _lh_matchIdent_3 with
//│ 		      | `LH_N -> 
//│ 		        _lh_append_arg2_0
//│ 		      | `LH_C(_lh_append_LH_C_0_0, _lh_append_LH_C_1_0) -> 
//│ 		        (`LH_C(_lh_append_LH_C_0_0, ((append_lh _lh_append_LH_C_1_0) _lh_append_arg2_0)))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec summ_lh _lh_summ_arg1_0 =
//│ 		  (let rec _lh_matchIdent_1 = _lh_summ_arg1_0 in
//│ 		    (match _lh_matchIdent_1 with
//│ 		      | `LH_N -> 
//│ 		        0
//│ 		      | `LH_C(_lh_summ_LH_C_0_0, _lh_summ_LH_C_1_0) -> 
//│ 		        (_lh_summ_LH_C_0_0 + (summ_lh _lh_summ_LH_C_1_0))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec append2_lh _lh_append2_arg1_0 _lh_append2_arg2_0 _lh_append2_arg3_0 =
//│ 		  (let rec _lh_matchIdent_4 = _lh_append2_arg1_0 in
//│ 		    (match _lh_matchIdent_4 with
//│ 		      | `LH_N -> 
//│ 		        (_lh_append2_arg2_0 _lh_append2_arg3_0)
//│ 		      | `LH_C(_lh_append2_LH_C_0_0, _lh_append2_LH_C_1_0) -> 
//│ 		        (let rec tt_0 = ((append2_lh _lh_append2_LH_C_1_0) _lh_append2_arg2_0) in
//│ 		          (let rec hh_0 = _lh_append2_LH_C_0_0 in
//│ 		            (hh_0 + (sum2_lh tt_0))))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec flatten_lh _lh_flatten_arg1_0 =
//│ 		  (let rec _lh_matchIdent_0 = _lh_flatten_arg1_0 in
//│ 		    (match _lh_matchIdent_0 with
//│ 		      | `LH_N -> 
//│ 		        (`LH_N)
//│ 		      | `LH_C(_lh_flatten_LH_C_0_0, _lh_flatten_LH_C_1_0) -> 
//│ 		        ((append_lh _lh_flatten_LH_C_0_0) (flatten_lh _lh_flatten_LH_C_1_0))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec flatten2_lh _lh_flatten2_arg1_0 _lh_flatten2_arg2_0 =
//│ 		  (let rec _lh_matchIdent_2 = _lh_flatten2_arg1_0 in
//│ 		    (match _lh_matchIdent_2 with
//│ 		      | `LH_N -> 
//│ 		        0
//│ 		      | `LH_C(_lh_flatten2_LH_C_0_0, _lh_flatten2_LH_C_1_0) -> 
//│ 		        (((append2_lh _lh_flatten2_LH_C_0_0) (flatten2_lh _lh_flatten2_LH_C_1_0)) _lh_flatten2_arg2_0)
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec testSumFlatten_lh _lh_testSumFlatten_arg1_0 =
//│ 		  (summ_lh (flatten_lh _lh_testSumFlatten_arg1_0));;
//│ 		let rec testManual_lh _lh_testManual_arg1_0 =
//│ 		  (sum2_lh (flatten2_lh _lh_testManual_arg1_0));;
//│ 		(testSumFlatten_lh (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		  (match _lh_listcomp_fun_para_0 with
//│ 		    | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		      (`LH_C(((enumFromTo_lh 1) _lh_listcomp_fun_ls_h_0), (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N))) in
//│ 		  (_lh_listcomp_fun_0 ((enumFromTo_lh 1) 1000))))
//│ 		(testManual_lh (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		  (match _lh_listcomp_fun_para_1 with
//│ 		    | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		      (`LH_C(((enumFromTo_lh 1) _lh_listcomp_fun_ls_h_1), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N))) in
//│ 		  (_lh_listcomp_fun_1 ((enumFromTo_lh 1) 1000))))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 23 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_summ_LH_C_0⁰ _lh_summ_LH_C_1⁰ => (_lh_summ_LH_C_0⁰ + summ_lh(_lh_summ_LH_C_1⁰)) | _  => error⁰}: 64
//│ [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)]: 93 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_summ_LH_C_0⁰ _lh_summ_LH_C_1⁰ => (_lh_summ_LH_C_0⁰ + summ_lh(_lh_summ_LH_C_1⁰)) | _  => error⁰}: 64
//│ ------------------
//│ case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_summ_LH_C_0⁰ _lh_summ_LH_C_1⁰ => (_lh_summ_LH_C_0⁰ + summ_lh(_lh_summ_LH_C_1⁰)) | _  => error⁰}: 64 --->
//│ 	[LH_N]: 23
//│ 	[LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)]: 93
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_N]: 23 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_summ_LH_C_0⁰ _lh_summ_LH_C_1⁰ => (_lh_summ_LH_C_0⁰ + summ_lh(_lh_summ_LH_C_1⁰)) | _  => error⁰}: 64
//│ [LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)]: 93 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_summ_LH_C_0⁰ _lh_summ_LH_C_1⁰ => (_lh_summ_LH_C_0⁰ + summ_lh(_lh_summ_LH_C_1⁰)) | _  => error⁰}: 64
//│ ------------------
//│ case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_summ_LH_C_0⁰ _lh_summ_LH_C_1⁰ => (_lh_summ_LH_C_0⁰ + summ_lh(_lh_summ_LH_C_1⁰)) | _  => error⁰}: 64 --->
//│ 	[LH_N]: 23
//│ 	[LH_C _lh_append_LH_C_0⁰ append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2⁰)]: 93
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testSumFlatten_lh(primId⁰(
//│ 	let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C primId⁰(enumFromTo_lh(1, _lh_listcomp_fun_ls_h⁰)) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t⁰)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun²(primId⁰(enumFromTo_lh(1, 1000)))))
//│ testManual_lh(primId⁰(
//│ 	let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C primId⁰(enumFromTo_lh(1, _lh_listcomp_fun_ls_h¹)) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t¹)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun³(primId⁰(enumFromTo_lh(1, 1000)))))
//│ def append2_lh(_lh_append2_arg1¹, _lh_append2_arg2¹, _lh_append2_arg3¹) = 
//│ 	let _lh_matchIdent⁵ = _lh_append2_arg1¹
//│ 	in case _lh_matchIdent⁵ of {
//│ 		LH_N  => _lh_append2_arg2¹(_lh_append2_arg3¹)
//│ 		| LH_C _lh_append2_LH_C_0⁰ _lh_append2_LH_C_1⁰ => 
//│ 			let tt¹ = append2_lh(_lh_append2_LH_C_1⁰, _lh_append2_arg2¹)
//│ 			in let hh¹ = _lh_append2_LH_C_0⁰
//│ 			in (hh¹ + sum2_lh(tt¹))
//│ 		| _  => error⁰}
//│ def append_lh(_lh_append_arg1¹, _lh_append_arg2¹) = 
//│ 	let _lh_matchIdent⁹ = _lh_append_arg1¹
//│ 	in case _lh_matchIdent⁹ of {
//│ 		LH_N  => _lh_append_arg2¹
//│ 		| LH_C _lh_append_LH_C_0⁰ _lh_append_LH_C_1⁰ => 
//│ 			let _lh_summ_LH_C_1¹ = append_lh(_lh_append_LH_C_1⁰, _lh_append_arg2¹)
//│ 			in let _lh_summ_LH_C_0¹ = _lh_append_LH_C_0⁰
//│ 			in (fun _lh_dummy¹ -> (_lh_summ_LH_C_0¹ + summ_lh(_lh_summ_LH_C_1¹)))
//│ 		| _  => error⁰}
//│ def enumFromTo_lh(a¹, b¹) = if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh((a¹ + 1), b¹)] else [LH_N]
//│ def flatten2_lh(_lh_flatten2_arg1¹, _lh_flatten2_arg2¹) = 
//│ 	let _lh_matchIdent⁶ = _lh_flatten2_arg1¹
//│ 	in case _lh_matchIdent⁶ of {
//│ 		LH_N  => 0
//│ 		| LH_C _lh_flatten2_LH_C_0⁰ _lh_flatten2_LH_C_1⁰ => append2_lh(_lh_flatten2_LH_C_0⁰, flatten2_lh(_lh_flatten2_LH_C_1⁰), _lh_flatten2_arg2¹)
//│ 		| _  => error⁰}
//│ def flatten_lh(_lh_flatten_arg1¹) = 
//│ 	let _lh_matchIdent⁸ = _lh_flatten_arg1¹
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_N  => (fun _lh_dummy⁰ -> 0)
//│ 		| LH_C _lh_flatten_LH_C_0⁰ _lh_flatten_LH_C_1⁰ => append_lh(_lh_flatten_LH_C_0⁰, flatten_lh(_lh_flatten_LH_C_1⁰))
//│ 		| _  => error⁰}
//│ def sum2_lh(_lh_sum2_arg1¹) = 
//│ 	let k¹ = _lh_sum2_arg1¹
//│ 	in k¹(99)
//│ def summ_lh(_lh_summ_arg1¹) = 
//│ 	let _lh_matchIdent⁷ = _lh_summ_arg1¹
//│ 	in _lh_matchIdent⁷(99)
//│ def testManual_lh(_lh_testManual_arg1¹) = sum2_lh(flatten2_lh(_lh_testManual_arg1¹))
//│ def testSumFlatten_lh(_lh_testSumFlatten_arg1¹) = summ_lh(flatten_lh(_lh_testSumFlatten_arg1¹))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ cannot generate benchmark files: key not found: Ident(true,testManual_lh,0)
//│ 
//│ let rec sum2_lh _lh_sum2_arg1_0 =
//│   (let rec k_0 = _lh_sum2_arg1_0 in
//│     (k_0 99));;
//│ let rec enumFromTo_lh a_0 b_0 =
//│   (if (a_0 <= b_0) then
//│     (`LH_C(a_0, ((enumFromTo_lh (a_0 + 1)) b_0)))
//│   else
//│     (`LH_N));;
//│ let rec summ_lh _lh_summ_arg1_0 =
//│   (let rec _lh_matchIdent_2 = _lh_summ_arg1_0 in
//│     (_lh_matchIdent_2 99));;
//│ let rec append2_lh _lh_append2_arg1_0 _lh_append2_arg2_0 _lh_append2_arg3_0 =
//│   (let rec _lh_matchIdent_0 = _lh_append2_arg1_0 in
//│     (match _lh_matchIdent_0 with
//│       | `LH_N -> 
//│         (_lh_append2_arg2_0 _lh_append2_arg3_0)
//│       | `LH_C(_lh_append2_LH_C_0_0, _lh_append2_LH_C_1_0) -> 
//│         (let rec tt_0 = ((append2_lh _lh_append2_LH_C_1_0) _lh_append2_arg2_0) in
//│           (let rec hh_0 = _lh_append2_LH_C_0_0 in
//│             (hh_0 + (sum2_lh tt_0))))
//│       | _ -> 
//│         (failwith "error")));;
//│ let rec append_lh _lh_append_arg1_0 _lh_append_arg2_0 =
//│   (let rec _lh_matchIdent_4 = _lh_append_arg1_0 in
//│     (match _lh_matchIdent_4 with
//│       | `LH_N -> 
//│         _lh_append_arg2_0
//│       | `LH_C(_lh_append_LH_C_0_0, _lh_append_LH_C_1_0) -> 
//│         (let rec _lh_summ_LH_C_1_0 = ((append_lh _lh_append_LH_C_1_0) _lh_append_arg2_0) in
//│           (let rec _lh_summ_LH_C_0_0 = _lh_append_LH_C_0_0 in
//│             (fun _lh_dummy_1 -> 
//│               (_lh_summ_LH_C_0_0 + (summ_lh _lh_summ_LH_C_1_0)))))
//│       | _ -> 
//│         (failwith "error")));;
//│ let rec flatten2_lh _lh_flatten2_arg1_0 _lh_flatten2_arg2_0 =
//│   (let rec _lh_matchIdent_1 = _lh_flatten2_arg1_0 in
//│     (match _lh_matchIdent_1 with
//│       | `LH_N -> 
//│         0
//│       | `LH_C(_lh_flatten2_LH_C_0_0, _lh_flatten2_LH_C_1_0) -> 
//│         (((append2_lh _lh_flatten2_LH_C_0_0) (flatten2_lh _lh_flatten2_LH_C_1_0)) _lh_flatten2_arg2_0)
//│       | _ -> 
//│         (failwith "error")));;
//│ let rec flatten_lh _lh_flatten_arg1_0 =
//│   (let rec _lh_matchIdent_3 = _lh_flatten_arg1_0 in
//│     (match _lh_matchIdent_3 with
//│       | `LH_N -> 
//│         (fun _lh_dummy_0 -> 
//│           0)
//│       | `LH_C(_lh_flatten_LH_C_0_0, _lh_flatten_LH_C_1_0) -> 
//│         ((append_lh _lh_flatten_LH_C_0_0) (flatten_lh _lh_flatten_LH_C_1_0))
//│       | _ -> 
//│         (failwith "error")));;
//│ let rec testManual_lh _lh_testManual_arg1_0 =
//│   (sum2_lh (flatten2_lh _lh_testManual_arg1_0));;
//│ let rec testSumFlatten_lh _lh_testSumFlatten_arg1_0 =
//│   (summ_lh (flatten_lh _lh_testSumFlatten_arg1_0));;
//│ (testSumFlatten_lh (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│   (match _lh_listcomp_fun_para_0 with
//│     | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│       (`LH_C(((enumFromTo_lh 1) _lh_listcomp_fun_ls_h_0), (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│     | `LH_N -> 
//│       (`LH_N))) in
//│   (_lh_listcomp_fun_0 ((enumFromTo_lh 1) 1000))))
//│ (testManual_lh (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│   (match _lh_listcomp_fun_para_1 with
//│     | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│       (`LH_C(((enumFromTo_lh 1) _lh_listcomp_fun_ls_h_1), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│     | `LH_N -> 
//│       (`LH_N))) in
//│   (_lh_listcomp_fun_1 ((enumFromTo_lh 1) 1000))))
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

:lhInHaskell
:lhGenOCaml
testZipEnumEnum n = zip [1..n] [1..n]
testZipEnumEnum $ primId 100000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testZipEnumEnum_lh^52(primId⁰(100000))
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^24((a⁰ + 1), b⁰)] else [LH_N]
//│ def testZipEnumEnum_lh(_lh_testZipEnumEnum_arg1⁰) = zip_lh^38(enumFromTo_lh^39(1, _lh_testZipEnumEnum_arg1⁰), enumFromTo_lh^45(1, _lh_testZipEnumEnum_arg1⁰))
//│ def zip_lh(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C hx⁰ tx⁰ => case ys⁰ of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh^6(tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec zip_lh xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(hx_0, tx_0) -> 
//│ 		      (match ys_0 with
//│ 		        | `LH_C(hy_0, ty_0) -> 
//│ 		          (`LH_C((`LH_P2(hx_0, hy_0)), ((zip_lh tx_0) ty_0)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec enumFromTo_lh a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec testZipEnumEnum_lh _lh_testZipEnumEnum_arg1_0 =
//│ 		  ((zip_lh ((enumFromTo_lh 1) _lh_testZipEnumEnum_arg1_0)) ((enumFromTo_lh 1) _lh_testZipEnumEnum_arg1_0));;
//│ 		(testZipEnumEnum_lh 100000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 33 --->
//│ 	case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 13
//│ 	case xs⁰ of {LH_C hx⁰ tx⁰ => case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 15
//│ [LH_N]: 34 --->
//│ 	case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 13
//│ 	case xs⁰ of {LH_C hx⁰ tx⁰ => case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 15
//│ ------------------
//│ case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 13 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 33
//│ 	[LH_N]: 34
//│ case xs⁰ of {LH_C hx⁰ tx⁰ => case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 15 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 33
//│ 	[LH_N]: 34
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testZipEnumEnum_lh(primId⁰(100000))
//│ def enumFromTo_lh(a¹, b¹) = if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh((a¹ + 1), b¹)] else [LH_N]
//│ def testZipEnumEnum_lh(_lh_testZipEnumEnum_arg1¹) = zip_lh(enumFromTo_lh(1, _lh_testZipEnumEnum_arg1¹), enumFromTo_lh(1, _lh_testZipEnumEnum_arg1¹))
//│ def zip_lh(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C hx⁰ tx⁰ => case ys¹ of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh(tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
