:NewParser
:ParseOnly


fun map(ls, f) = if ls is
  C(h, t) then C(f(h), map(t, f))
  N then N
fun filter(xs, p) = if xs is
  C(h, t) then if p(h) then C(h, filter(t, p)) else filter(t, p)
  N then N
filter(map(primitive, primitive), primitive)
//│ |#fun| |map|(|ls|,| |f|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|t|,| |f|)|)|↵|N| |#then| |N|←|↵|#fun| |filter|(|xs|,| |p|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |#if| |p|(|h|)| |#then| |C|(|h|,| |filter|(|t|,| |p|)|)| |#else| |filter|(|t|,| |p|)|↵|N| |#then| |N|←|↵|filter|(|map|(|primitive|,| |primitive|)|,| |primitive|)|
//│ Parsed: {fun map = ls, f, => if ls is ‹(C (h, t,)) then C (f (h,), map (t, f,),); (N) then N›; fun filter = xs, p, => if xs is ‹(C (h, t,)) then if (p (h,)) then C (h, filter (t, p,),) else filter (t, p,); (N) then N›; filter (map (primitive, primitive,), primitive,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ filter^36(map^37(primitive⁰, primitive⁰), primitive⁰)
//│ def filter(xs⁰, p⁰) = case xs⁰ of {
//│ 	C h¹ t¹ => if p⁰(h¹) then [C h¹ filter^20(t¹, p⁰)] else filter^26(t¹, p⁰)
//│ 	| N  => [N]}
//│ def map(ls⁰, f⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map^5(t⁰, f⁰)]
//│ 	| N  => [N]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C f⁰(h⁰) map(t⁰, f⁰)]: 10 --->
//│ 	case xs⁰ of {C h¹ t¹ => if p⁰(h¹) then [C h¹ filter(t¹, p⁰)] else filter(t¹, p⁰) | N  => [N]}: 33
//│ [N]: 11 --->
//│ 	case xs⁰ of {C h¹ t¹ => if p⁰(h¹) then [C h¹ filter(t¹, p⁰)] else filter(t¹, p⁰) | N  => [N]}: 33
//│ ------------------
//│ case xs⁰ of {C h¹ t¹ => if p⁰(h¹) then [C h¹ filter(t¹, p⁰)] else filter(t¹, p⁰) | N  => [N]}: 33 --->
//│ 	[C f⁰(h⁰) map(t⁰, f⁰)]: 10
//│ 	[N]: 11
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C f⁰(h⁰) map(t⁰, f⁰)]: 10 --->
//│ 	case xs⁰ of {C h¹ t¹ => if p⁰(h¹) then [C h¹ filter(t¹, p⁰)] else filter(t¹, p⁰) | N  => [N]}: 33
//│ [N]: 11 --->
//│ 	case xs⁰ of {C h¹ t¹ => if p⁰(h¹) then [C h¹ filter(t¹, p⁰)] else filter(t¹, p⁰) | N  => [N]}: 33
//│ ------------------
//│ case xs⁰ of {C h¹ t¹ => if p⁰(h¹) then [C h¹ filter(t¹, p⁰)] else filter(t¹, p⁰) | N  => [N]}: 33 --->
//│ 	[C f⁰(h⁰) map(t⁰, f⁰)]: 10
//│ 	[N]: 11
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ filter(map(primitive⁰, primitive⁰), primitive⁰)
//│ def filter(xs¹, p³) = xs¹(p³)
//│ def map(ls¹, f¹) = case ls¹ of {
//│ 	C h⁰ t⁰ => 
//│ 		let t² = map(t⁰, f¹)
//│ 		in let h² = f¹(h⁰)
//│ 		in (fun p¹ -> if p¹(h²) then [C h² filter(t², p¹)] else filter(t², p¹))
//│ 	| N  => (fun p² -> [N])}
//│ <<<<<<< after fusion <<<<<<<

_LUMBERHACK_EVAL
fun map(ls, f) = if ls is
  C(h, t) then C(f(h), map(t, f))
  N then N
fun filter(xs, p) = if xs is
  C(h, t) then if p(h) then C(h, filter(t, p)) else filter(t, p)
  N then N
filter(map(C(1, C(2, C(3, N))), x => x * 2), x => x > 3)
//│ |_LUMBERHACK_EVAL|↵|#fun| |map|(|ls|,| |f|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|t|,| |f|)|)|↵|N| |#then| |N|←|↵|#fun| |filter|(|xs|,| |p|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |#if| |p|(|h|)| |#then| |C|(|h|,| |filter|(|t|,| |p|)|)| |#else| |filter|(|t|,| |p|)|↵|N| |#then| |N|←|↵|filter|(|map|(|C|(|1|,| |C|(|2|,| |C|(|3|,| |N|)|)|)|,| |x| |=>| |x| |*| |2|)|,| |x| |=>| |x| |>| |3|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun map = ls, f, => if ls is ‹(C (h, t,)) then C (f (h,), map (t, f,),); (N) then N›; fun filter = xs, p, => if xs is ‹(C (h, t,)) then if (p (h,)) then C (h, filter (t, p,),) else filter (t, p,); (N) then N›; filter (map (C (1, C (2, C (3, N,),),), x, => * (x,) (2,),), x, => > (x,) (3,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ filter^36(map^37([C 1 [C 2 [C 3 [N]]]], (fun x⁰ -> (x⁰ * 2))), (fun x¹ -> (x¹ > 3)))
//│ def filter(xs⁰, p⁰) = case xs⁰ of {
//│ 	C h¹ t¹ => if p⁰(h¹) then [C h¹ filter^20(t¹, p⁰)] else filter^26(t¹, p⁰)
//│ 	| N  => [N]}
//│ def map(ls⁰, f⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map^5(t⁰, f⁰)]
//│ 	| N  => [N]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [C 4 [C 6 [N]]]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C f⁰(h⁰) map(t⁰, f⁰)]: 10 --->
//│ 	case xs⁰ of {C h¹ t¹ => if p⁰(h¹) then [C h¹ filter(t¹, p⁰)] else filter(t¹, p⁰) | N  => [N]}: 33
//│ [N]: 11 --->
//│ 	case xs⁰ of {C h¹ t¹ => if p⁰(h¹) then [C h¹ filter(t¹, p⁰)] else filter(t¹, p⁰) | N  => [N]}: 33
//│ [N]: 41 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => [C f⁰(h⁰) map(t⁰, f⁰)] | N  => [N]}: 12
//│ [C 3 [N]]: 42 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => [C f⁰(h⁰) map(t⁰, f⁰)] | N  => [N]}: 12
//│ [C 2 [C 3 [N]]]: 43 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => [C f⁰(h⁰) map(t⁰, f⁰)] | N  => [N]}: 12
//│ [C 1 [C 2 [C 3 [N]]]]: 44 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => [C f⁰(h⁰) map(t⁰, f⁰)] | N  => [N]}: 12
//│ ------------------
//│ case ls⁰ of {C h⁰ t⁰ => [C f⁰(h⁰) map(t⁰, f⁰)] | N  => [N]}: 12 --->
//│ 	[N]: 41
//│ 	[C 3 [N]]: 42
//│ 	[C 2 [C 3 [N]]]: 43
//│ 	[C 1 [C 2 [C 3 [N]]]]: 44
//│ case xs⁰ of {C h¹ t¹ => if p⁰(h¹) then [C h¹ filter(t¹, p⁰)] else filter(t¹, p⁰) | N  => [N]}: 33 --->
//│ 	[C f⁰(h⁰) map(t⁰, f⁰)]: 10
//│ 	[N]: 11
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C f⁰(h⁰) map(t⁰, f⁰)]: 10 --->
//│ 	case xs⁰ of {C h¹ t¹ => if p⁰(h¹) then [C h¹ filter(t¹, p⁰)] else filter(t¹, p⁰) | N  => [N]}: 33
//│ [N]: 11 --->
//│ 	case xs⁰ of {C h¹ t¹ => if p⁰(h¹) then [C h¹ filter(t¹, p⁰)] else filter(t¹, p⁰) | N  => [N]}: 33
//│ [N]: 41 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => [C f⁰(h⁰) map(t⁰, f⁰)] | N  => [N]}: 12
//│ [C 3 [N]]: 42 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => [C f⁰(h⁰) map(t⁰, f⁰)] | N  => [N]}: 12
//│ [C 2 [C 3 [N]]]: 43 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => [C f⁰(h⁰) map(t⁰, f⁰)] | N  => [N]}: 12
//│ [C 1 [C 2 [C 3 [N]]]]: 44 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => [C f⁰(h⁰) map(t⁰, f⁰)] | N  => [N]}: 12
//│ ------------------
//│ case ls⁰ of {C h⁰ t⁰ => [C f⁰(h⁰) map(t⁰, f⁰)] | N  => [N]}: 12 --->
//│ 	[N]: 41
//│ 	[C 3 [N]]: 42
//│ 	[C 2 [C 3 [N]]]: 43
//│ 	[C 1 [C 2 [C 3 [N]]]]: 44
//│ case xs⁰ of {C h¹ t¹ => if p⁰(h¹) then [C h¹ filter(t¹, p⁰)] else filter(t¹, p⁰) | N  => [N]}: 33 --->
//│ 	[C f⁰(h⁰) map(t⁰, f⁰)]: 10
//│ 	[N]: 11
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ filter(map(
//│ 	let t² = 	
//│ 		let t⁴ = 	
//│ 			let t⁶ = (fun f⁴ -> (fun p⁴ -> [N]))
//│ 			in let h⁶ = 3
//│ 			in (fun f³ -> 
//│ 				let t⁷ = map(t⁶, f³)
//│ 				in let h⁷ = f³(h⁶)
//│ 				in (fun p³ -> if p³(h⁷) then [C h⁷ filter(t⁷, p³)] else filter(t⁷, p³)))
//│ 		in let h⁴ = 2
//│ 		in (fun f² -> 
//│ 			let t⁵ = map(t⁴, f²)
//│ 			in let h⁵ = f²(h⁴)
//│ 			in (fun p² -> if p²(h⁵) then [C h⁵ filter(t⁵, p²)] else filter(t⁵, p²)))
//│ 	in let h² = 1
//│ 	in (fun f¹ -> 
//│ 		let t³ = map(t², f¹)
//│ 		in let h³ = f¹(h²)
//│ 		in (fun p¹ -> if p¹(h³) then [C h³ filter(t³, p¹)] else filter(t³, p¹))), (fun x² -> (x² * 2))), (fun x³ -> (x³ > 3)))
//│ def filter(xs¹, p⁵) = xs¹(p⁵)
//│ def map(ls¹, f⁵) = ls¹(f⁵)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C 4 [C 6 [N]]]
//│ <<<<<<< evaluate <<<<<<<
