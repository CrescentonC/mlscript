:NewParser
:ParseOnly

// CORRECT: p1 and c are aligned, and p2 and c is not algned
// WRONG: example for merging the alpha-equiv strategies being difficult
let p1 = C(C(p1))
let p2 = D(D(D(p2)))
fun c(x) = if x is
  C(aa) then if aa is
    C(a2) then if a2 is
      C(a3) then y => if y is
        D(bb) then if bb is
          D(cc) then c(a3)(cc)
c(p1)(p2)
//│ |#let| |p1| |#=| |C|(|C|(|p1|)|)|↵|#let| |p2| |#=| |D|(|D|(|D|(|p2|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|aa|)| |#then| |#if| |aa| |is|→|C|(|a2|)| |#then| |#if| |a2| |is|→|C|(|a3|)| |#then| |y| |=>| |#if| |y| |is|→|D|(|bb|)| |#then| |#if| |bb| |is|→|D|(|cc|)| |#then| |c|(|a3|)|(|cc|)|←|←|←|←|←|↵|c|(|p1|)|(|p2|)|
//│ Parsed: {let p1 = C (C (p1,),); let p2 = D (D (D (p2,),),); fun c = x, => if x is ‹(C (aa,)) then if aa is ‹(C (a2,)) then if a2 is ‹(C (a3,)) then y, => if y is ‹(D (bb,)) then if bb is ‹(D (cc,)) then c (a3,) (cc,)›››››; c (p1,) (p2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ c^25(p1^26, p2^28)
//│ def c(x⁰) = case x⁰ of {
//│ 	C aa⁰ => case aa⁰ of {
//│ 		C a2⁰ => case a2⁰ of {
//│ 			C a3⁰ => (fun y⁰ -> case y⁰ of {
//│ 				D bb⁰ => case bb⁰ of {
//│ 					D cc⁰ => c^13(a3⁰, cc⁰)}})}}}
//│ def p1 = [C [C p1^1]]
//│ def p2 = [D [D [D p2^4]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^25] (hopeless to continue)
//│ 	[c^25 · c^13] ---> [c^25] (using original def)
//│ [p1^26] (hopeless to continue)
//│ 	[p1^26 · p1^1] ---> [p1^26] (using original def)
//│ [p2^28] (hopeless to continue)
//│ 	[p2^28 · p2^4] ---> [p2^28] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ c_₀(p1_₀, p2_₀)
//│ def c_₀(x¹) = 
//│ 	case x¹ of {
//│ 		C aa¹ => case aa¹ of {
//│ 			C a2¹ => case a2¹ of {
//│ 				C a3¹ => (fun y¹ -> case y¹ of {
//│ 					D bb¹ => case bb¹ of {
//│ 						D cc¹ => c_₀(a3¹, cc¹)}})}}}
//│ def p1_₀ = 
//│ 	[C [C p1_₀]]
//│ def p2_₀ = 
//│ 	[D [D [D p2_₀]]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C p1_₀]: 31 --->
//│ 	case a2¹ of {C a3¹ => (fun y¹ -> case y¹ of {D bb¹ => case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}})}: 50
//│ 	case aa¹ of {C a2¹ => case a2¹ of {C a3¹ => (fun y¹ -> case y¹ of {D bb¹ => case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}})}}: 51
//│ 	case x¹ of {C aa¹ => case aa¹ of {C a2¹ => case a2¹ of {C a3¹ => (fun y¹ -> case y¹ of {D bb¹ => case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}})}}}: 52
//│ [C [C p1_₀]]: 32 --->
//│ 	case a2¹ of {C a3¹ => (fun y¹ -> case y¹ of {D bb¹ => case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}})}: 50
//│ 	case aa¹ of {C a2¹ => case a2¹ of {C a3¹ => (fun y¹ -> case y¹ of {D bb¹ => case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}})}}: 51
//│ 	case x¹ of {C aa¹ => case aa¹ of {C a2¹ => case a2¹ of {C a3¹ => (fun y¹ -> case y¹ of {D bb¹ => case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}})}}}: 52
//│ [D p2_₀]: 34 --->
//│ 	case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}: 47
//│ 	case y¹ of {D bb¹ => case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}}: 48
//│ [D [D p2_₀]]: 35 --->
//│ 	case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}: 47
//│ 	case y¹ of {D bb¹ => case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}}: 48
//│ [D [D [D p2_₀]]]: 36 --->
//│ 	case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}: 47
//│ 	case y¹ of {D bb¹ => case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}}: 48
//│ ------------------
//│ case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}: 47 --->
//│ 	[D p2_₀]: 34
//│ 	[D [D p2_₀]]: 35
//│ 	[D [D [D p2_₀]]]: 36
//│ case y¹ of {D bb¹ => case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}}: 48 --->
//│ 	[D p2_₀]: 34
//│ 	[D [D p2_₀]]: 35
//│ 	[D [D [D p2_₀]]]: 36
//│ case a2¹ of {C a3¹ => (fun y¹ -> case y¹ of {D bb¹ => case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}})}: 50 --->
//│ 	[C p1_₀]: 31
//│ 	[C [C p1_₀]]: 32
//│ case aa¹ of {C a2¹ => case a2¹ of {C a3¹ => (fun y¹ -> case y¹ of {D bb¹ => case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}})}}: 51 --->
//│ 	[C p1_₀]: 31
//│ 	[C [C p1_₀]]: 32
//│ case x¹ of {C aa¹ => case aa¹ of {C a2¹ => case a2¹ of {C a3¹ => (fun y¹ -> case y¹ of {D bb¹ => case bb¹ of {D cc¹ => c_₀(a3¹, cc¹)}})}}}: 52 --->
//│ 	[C p1_₀]: 31
//│ 	[C [C p1_₀]]: 32
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ c_₀(p1_₀, p2_₀)
//│ def c_₀(x²) = 
//│ 	case x² of {
//│ 		C aa¹ => case aa¹ of {
//│ 			C a2¹ => case a2¹ of {
//│ 				C a3¹ => (fun y² -> case y² of {
//│ 					D bb¹ => case bb¹ of {
//│ 						D cc¹ => c_₀(a3¹, cc¹)}})}}}
//│ def p1_₀ = 
//│ 	[C [C p1_₀]]
//│ def p2_₀ = 
//│ 	[D [D [D p2_₀]]]
//│ <<<<<<< after fusion <<<<<<<

// WRONG: manually do the fusion on top of the previous fusion result, since `c0` is used twice, it is wrong
fun c0(x) = x
fun c1(x) = x
let p10 = p11
fun p11(y) = if y is
  D(bb) then if bb is
    D(cc) then c1(p12)(cc)
fun p12(y) = if y is
  D(bb) then if bb is
    D(cc) then c0(p10)(cc)
let p20 = D(D(D(p21)))
let p21 = D(D(D(p20)))
c0(p10)(p20)
//│ |#fun| |c0|(|x|)| |#=| |x|↵|#fun| |c1|(|x|)| |#=| |x|↵|#let| |p10| |#=| |p11|↵|#fun| |p11|(|y|)| |#=| |#if| |y| |is|→|D|(|bb|)| |#then| |#if| |bb| |is|→|D|(|cc|)| |#then| |c1|(|p12|)|(|cc|)|←|←|↵|#fun| |p12|(|y|)| |#=| |#if| |y| |is|→|D|(|bb|)| |#then| |#if| |bb| |is|→|D|(|cc|)| |#then| |c0|(|p10|)|(|cc|)|←|←|↵|#let| |p20| |#=| |D|(|D|(|D|(|p21|)|)|)|↵|#let| |p21| |#=| |D|(|D|(|D|(|p20|)|)|)|↵|c0|(|p10|)|(|p20|)|
//│ Parsed: {fun c0 = x, => x; fun c1 = x, => x; let p10 = p11; fun p11 = y, => if y is ‹(D (bb,)) then if bb is ‹(D (cc,)) then c1 (p12,) (cc,)››; fun p12 = y, => if y is ‹(D (bb,)) then if bb is ‹(D (cc,)) then c0 (p10,) (cc,)››; let p20 = D (D (D (p21,),),); let p21 = D (D (D (p20,),),); c0 (p10,) (p20,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ c0^34(p10^35, p20^37)
//│ def c0(x⁰) = x⁰
//│ def c1(x¹) = x¹
//│ def p10 = p11^5
//│ def p11(y⁰) = case y⁰ of {
//│ 	D bb⁰ => case bb⁰ of {
//│ 		D cc⁰ => c1^8(p12^9, cc⁰)}}
//│ def p12(y¹) = case y¹ of {
//│ 	D bb¹ => case bb¹ of {
//│ 		D cc¹ => c0^18(p10^19, cc¹)}}
//│ def p20 = [D [D [D p21^26]]]
//│ def p21 = [D [D [D p20^30]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c0^34] (hopeless to continue)
//│ [p10^35] (hopeless to continue)
//│ 	[p10^35 · p11^5] (using original def)
//│ 		[p10^35 · p11^5 · c1^8] (using original def)
//│ 		[p10^35 · p11^5 · p12^9] (using original def)
//│ 			[p10^35 · p11^5 · p12^9 · c0^18] (using original def)
//│ 			[p10^35 · p11^5 · p12^9 · p10^19] ---> [p10^35] (using original def)
//│ [p20^37] (hopeless to continue)
//│ 	[p20^37 · p21^26] (using original def)
//│ 		[p20^37 · p21^26 · p20^30] ---> [p20^37] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ c0_₀(p10_₀, p20_₀)
//│ def c0_₀(x³) = 
//│ 	x³
//│ def p10_₀ = 
//│ 	p11_₀
//│ 	where
//│ 	def p11_₀(y³) = 
//│ 		case y³ of {
//│ 			D bb³ => case bb³ of {
//│ 				D cc³ => c1_₀(p12_₀, cc³)}}
//│ 		where
//│ 		def c1_₀(x⁴) = 
//│ 			x⁴
//│ 		def p12_₀(y²) = 
//│ 			case y² of {
//│ 				D bb² => case bb² of {
//│ 					D cc² => c0_₁(p10_₀, cc²)}}
//│ 			where
//│ 			def c0_₁(x²) = 
//│ 				x²
//│ def p20_₀ = 
//│ 	[D [D [D p21_₀]]]
//│ 	where
//│ 	def p21_₀ = 
//│ 		[D [D [D p20_₀]]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [D p20_₀]: 64 --->
//│ 	case bb² of {D cc² => c0_₁(p10_₀, cc²)}: 46
//│ 	case bb³ of {D cc³ => c1_₀(p12_₀, cc³)}: 60
//│ [D [D p20_₀]]: 65 --->
//│ 	case y² of {D bb² => case bb² of {D cc² => c0_₁(p10_₀, cc²)}}: 47
//│ 	case y³ of {D bb³ => case bb³ of {D cc³ => c1_₀(p12_₀, cc³)}}: 61
//│ [D [D [D p20_₀]]]: 66 --->
//│ 	case bb² of {D cc² => c0_₁(p10_₀, cc²)}: 46
//│ 	case bb³ of {D cc³ => c1_₀(p12_₀, cc³)}: 60
//│ [D p21_₀]: 71 --->
//│ 	case y² of {D bb² => case bb² of {D cc² => c0_₁(p10_₀, cc²)}}: 47
//│ 	case y³ of {D bb³ => case bb³ of {D cc³ => c1_₀(p12_₀, cc³)}}: 61
//│ [D [D p21_₀]]: 72 --->
//│ 	case bb² of {D cc² => c0_₁(p10_₀, cc²)}: 46
//│ 	case bb³ of {D cc³ => c1_₀(p12_₀, cc³)}: 60
//│ [D [D [D p21_₀]]]: 73 --->
//│ 	case y² of {D bb² => case bb² of {D cc² => c0_₁(p10_₀, cc²)}}: 47
//│ 	case y³ of {D bb³ => case bb³ of {D cc³ => c1_₀(p12_₀, cc³)}}: 61
//│ ------------------
//│ case bb² of {D cc² => c0_₁(p10_₀, cc²)}: 46 --->
//│ 	[D p20_₀]: 64
//│ 	[D [D [D p20_₀]]]: 66
//│ 	[D [D p21_₀]]: 72
//│ case y² of {D bb² => case bb² of {D cc² => c0_₁(p10_₀, cc²)}}: 47 --->
//│ 	[D [D p20_₀]]: 65
//│ 	[D p21_₀]: 71
//│ 	[D [D [D p21_₀]]]: 73
//│ case bb³ of {D cc³ => c1_₀(p12_₀, cc³)}: 60 --->
//│ 	[D p20_₀]: 64
//│ 	[D [D [D p20_₀]]]: 66
//│ 	[D [D p21_₀]]: 72
//│ case y³ of {D bb³ => case bb³ of {D cc³ => c1_₀(p12_₀, cc³)}}: 61 --->
//│ 	[D [D p20_₀]]: 65
//│ 	[D p21_₀]: 71
//│ 	[D [D [D p21_₀]]]: 73
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ c0_₀(p10_₀, p20_₀)
//│ def c0_₀(x⁷) = 
//│ 	x⁷
//│ def p10_₀ = 
//│ 	p11_₀
//│ 	where
//│ 	def p11_₀(y⁴) = 
//│ 		case y⁴ of {
//│ 			D bb³ => case bb³ of {
//│ 				D cc³ => c1_₀(p12_₀, cc³)}}
//│ 		where
//│ 		def c1_₀(x⁵) = 
//│ 			x⁵
//│ 		def p12_₀(y⁵) = 
//│ 			case y⁵ of {
//│ 				D bb² => case bb² of {
//│ 					D cc² => c0_₁(p10_₀, cc²)}}
//│ 			where
//│ 			def c0_₁(x⁶) = 
//│ 				x⁶
//│ def p20_₀ = 
//│ 	[D [D [D p21_₀]]]
//│ 	where
//│ 	def p21_₀ = 
//│ 		[D [D [D p20_₀]]]
//│ <<<<<<< after fusion <<<<<<<

// CORRECT: after duplicating the used-more-than-once `c0`, the result is correct
fun c0(x) = x
fun c1(x) = x
fun id(x) = x
let p10 = p11
fun p11(y) = if y is
  D(bb) then if bb is
    D(cc) then c1(p12)(cc)
fun p12(y) = if y is
  D(bb) then if bb is
    D(cc) then id(p10)(cc)
let p20 = D(D(D(p21)))
let p21 = D(D(D(p20)))
c0(p10)(p20)
//│ |#fun| |c0|(|x|)| |#=| |x|↵|#fun| |c1|(|x|)| |#=| |x|↵|#fun| |id|(|x|)| |#=| |x|↵|#let| |p10| |#=| |p11|↵|#fun| |p11|(|y|)| |#=| |#if| |y| |is|→|D|(|bb|)| |#then| |#if| |bb| |is|→|D|(|cc|)| |#then| |c1|(|p12|)|(|cc|)|←|←|↵|#fun| |p12|(|y|)| |#=| |#if| |y| |is|→|D|(|bb|)| |#then| |#if| |bb| |is|→|D|(|cc|)| |#then| |id|(|p10|)|(|cc|)|←|←|↵|#let| |p20| |#=| |D|(|D|(|D|(|p21|)|)|)|↵|#let| |p21| |#=| |D|(|D|(|D|(|p20|)|)|)|↵|c0|(|p10|)|(|p20|)|
//│ Parsed: {fun c0 = x, => x; fun c1 = x, => x; fun id = x, => x; let p10 = p11; fun p11 = y, => if y is ‹(D (bb,)) then if bb is ‹(D (cc,)) then c1 (p12,) (cc,)››; fun p12 = y, => if y is ‹(D (bb,)) then if bb is ‹(D (cc,)) then id (p10,) (cc,)››; let p20 = D (D (D (p21,),),); let p21 = D (D (D (p20,),),); c0 (p10,) (p20,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ c0^36(p10^37, p20^39)
//│ def c0(x⁰) = x⁰
//│ def c1(x¹) = x¹
//│ def id(x²) = x²
//│ def p10 = p11^7
//│ def p11(y⁰) = case y⁰ of {
//│ 	D bb⁰ => case bb⁰ of {
//│ 		D cc⁰ => c1^10(p12^11, cc⁰)}}
//│ def p12(y¹) = case y¹ of {
//│ 	D bb¹ => case bb¹ of {
//│ 		D cc¹ => id^20(p10^21, cc¹)}}
//│ def p20 = [D [D [D p21^28]]]
//│ def p21 = [D [D [D p20^32]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c0^36] (hopeless to continue)
//│ [p10^37] (hopeless to continue)
//│ 	[p10^37 · p11^7] (using original def)
//│ 		[p10^37 · p11^7 · c1^10] (using original def)
//│ 		[p10^37 · p11^7 · p12^11] (using original def)
//│ 			[p10^37 · p11^7 · p12^11 · id^20] (using original def)
//│ 			[p10^37 · p11^7 · p12^11 · p10^21] ---> [p10^37] (using original def)
//│ [p20^39] (hopeless to continue)
//│ 	[p20^39 · p21^28] (using original def)
//│ 		[p20^39 · p21^28 · p20^32] ---> [p20^39] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ c0_₀(p10_₀, p20_₀)
//│ def c0_₀(x³) = 
//│ 	x³
//│ def p10_₀ = 
//│ 	p11_₀
//│ 	where
//│ 	def p11_₀(y³) = 
//│ 		case y³ of {
//│ 			D bb³ => case bb³ of {
//│ 				D cc³ => c1_₀(p12_₀, cc³)}}
//│ 		where
//│ 		def c1_₀(x⁵) = 
//│ 			x⁵
//│ 		def p12_₀(y²) = 
//│ 			case y² of {
//│ 				D bb² => case bb² of {
//│ 					D cc² => id_₀(p10_₀, cc²)}}
//│ 			where
//│ 			def id_₀(x⁴) = 
//│ 				x⁴
//│ def p20_₀ = 
//│ 	[D [D [D p21_₀]]]
//│ 	where
//│ 	def p21_₀ = 
//│ 		[D [D [D p20_₀]]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [D p21_₀]: 52 --->
//│ 	case y² of {D bb² => case bb² of {D cc² => id_₀(p10_₀, cc²)}}: 49
//│ 	case y³ of {D bb³ => case bb³ of {D cc³ => c1_₀(p12_₀, cc³)}}: 63
//│ [D [D p21_₀]]: 53 --->
//│ 	case bb² of {D cc² => id_₀(p10_₀, cc²)}: 48
//│ 	case bb³ of {D cc³ => c1_₀(p12_₀, cc³)}: 62
//│ [D [D [D p21_₀]]]: 54 --->
//│ 	case y² of {D bb² => case bb² of {D cc² => id_₀(p10_₀, cc²)}}: 49
//│ 	case y³ of {D bb³ => case bb³ of {D cc³ => c1_₀(p12_₀, cc³)}}: 63
//│ [D p20_₀]: 69 --->
//│ 	case bb² of {D cc² => id_₀(p10_₀, cc²)}: 48
//│ 	case bb³ of {D cc³ => c1_₀(p12_₀, cc³)}: 62
//│ [D [D p20_₀]]: 70 --->
//│ 	case y² of {D bb² => case bb² of {D cc² => id_₀(p10_₀, cc²)}}: 49
//│ 	case y³ of {D bb³ => case bb³ of {D cc³ => c1_₀(p12_₀, cc³)}}: 63
//│ [D [D [D p20_₀]]]: 71 --->
//│ 	case bb² of {D cc² => id_₀(p10_₀, cc²)}: 48
//│ 	case bb³ of {D cc³ => c1_₀(p12_₀, cc³)}: 62
//│ ------------------
//│ case bb² of {D cc² => id_₀(p10_₀, cc²)}: 48 --->
//│ 	[D [D p21_₀]]: 53
//│ 	[D p20_₀]: 69
//│ 	[D [D [D p20_₀]]]: 71
//│ case y² of {D bb² => case bb² of {D cc² => id_₀(p10_₀, cc²)}}: 49 --->
//│ 	[D p21_₀]: 52
//│ 	[D [D [D p21_₀]]]: 54
//│ 	[D [D p20_₀]]: 70
//│ case bb³ of {D cc³ => c1_₀(p12_₀, cc³)}: 62 --->
//│ 	[D [D p21_₀]]: 53
//│ 	[D p20_₀]: 69
//│ 	[D [D [D p20_₀]]]: 71
//│ case y³ of {D bb³ => case bb³ of {D cc³ => c1_₀(p12_₀, cc³)}}: 63 --->
//│ 	[D p21_₀]: 52
//│ 	[D [D [D p21_₀]]]: 54
//│ 	[D [D p20_₀]]: 70
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ c0_₀(p10_₀, p20_₀)
//│ def c0_₀(x⁷) = 
//│ 	x⁷
//│ def p10_₀ = 
//│ 	p11_₀
//│ 	where
//│ 	def p11_₀(y⁴) = 
//│ 		case y⁴ of {
//│ 			D bb³ => case bb³ of {
//│ 				D cc³ => c1_₀(p12_₀, cc³)}}
//│ 		where
//│ 		def c1_₀(x⁶) = 
//│ 			x⁶
//│ 		def p12_₀(y⁵) = 
//│ 			case y⁵ of {
//│ 				D bb² => case bb² of {
//│ 					D cc² => id_₀(p10_₀, cc²)}}
//│ 			where
//│ 			def id_₀(x⁸) = 
//│ 				x⁸
//│ def p20_₀ = 
//│ 	[D [D [D p21_₀]]]
//│ 	where
//│ 	def p21_₀ = 
//│ 		[D [D [D p20_₀]]]
//│ <<<<<<< after fusion <<<<<<<
