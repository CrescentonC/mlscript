:NewParser
:ParseOnly


// NOTE: the `p` inside `C(p)` is untouched
// TODO don't rewrite dead code
let p = C(p)
fun c(x) = if C(x) is
    C(a) then a
c(p)
//│ |#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |C|(|x|)| |is|→|C|(|a|)| |#then| |a|←|↵|c|(|p|)|
//│ Parsed: {let p = C (p,); fun c = x, => if C (x,) is ‹(C (a,)) then a›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 2: [C 1: p:6]
//│ def c:7 = 7: (fun x:8 -> 6: case 4: [C 3: x:8] of {C a:9 -> 5: a:9})
//│ 10: (8: c:7 9: p:6)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------


// NOTE: how to produce a finite rewrtten program?
_LUMBERHACK_ERROR
let p = Pair(A, B)
fun c(x) = if x is
    Pair(a, b) then c(Pair(b, a))
c(p)
//│ |_LUMBERHACK_ERROR|↵|#let| |p| |#=| |Pair|(|A|,| |B|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|Pair|(|a|,| |b|)| |#then| |c|(|Pair|(|b|,| |a|)|)|←|↵|c|(|p|)|
//│ Parsed: {_LUMBERHACK_ERROR; let p = Pair (A, B,); fun c = x, => if x is ‹(Pair (a, b,)) then c (Pair (b, a,),)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 3: [Pair 1: [A] 2: [B]]
//│ def c:7 = 11: (fun x:8 -> 10: case 4: x:8 of {Pair a:9 b:10 -> 9: (5: c:7 8: [Pair 6: b:10 7: a:9])})
//│ 14: (12: c:7 13: p:6)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ B <: 4'b
//│ 	[-p:6^13 · +c:7^12 · +c:7^5 · +c:7^5]  --->  [-p:6^13 · +c:7^12]
//│ A <: 3'a
//│ 	[-p:6^13 · +c:7^12 · +c:7^5 · +c:7^5]  --->  [-p:6^13 · +c:7^12]

// Just a more valid/reasonable version of the above
// TODO support nested patterns as in `Pair(0)`
// TODO get a recursive knot even when using `primitive` (we get it without)
_LUMBERHACK_ERROR
let p = Wrap(3)
fun c(x) = if x is
    N then 0
    Wrap(a) then c(Wrap(primitive(a)))
c(p)
//│ |_LUMBERHACK_ERROR|↵|#let| |p| |#=| |Wrap|(|3|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|N| |#then| |0|↵|Wrap|(|a|)| |#then| |c|(|Wrap|(|primitive|(|a|)|)|)|←|↵|c|(|p|)|
//│ Parsed: {_LUMBERHACK_ERROR; let p = Wrap (3,); fun c = x, => if x is ‹(N) then 0; (Wrap (a,)) then c (Wrap (primitive (a,),),)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 2: [Wrap 1: 3]
//│ def c:7 = 12: (fun x:8 -> 11: case 3: x:8 of {N -> 4: 0 | Wrap a:9 -> 10: (5: c:7 9: [Wrap 8: (6: primitive:3 7: a:9)])})
//│ 15: (13: c:7 14: p:6)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ Int <: 5'10_callres
//│ 	[-c:7^5 · -c:7^5]  --->  [-c:7^5]

fun c(x) = if primitive(x) is
    True then 0
    False then c(primitive(x))
c(0)
//│ |#fun| |c|(|x|)| |#=| |#if| |primitive|(|x|)| |is|→|True| |#then| |0|↵|False| |#then| |c|(|primitive|(|x|)|)|←|↵|c|(|0|)|
//│ Parsed: {fun c = x, => if primitive (x,) is ‹(True) then 0; (False) then c (primitive (x,),)›; c (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def c:6 = 11: (fun x:7 -> 10: case 3: (1: primitive:3 2: x:7) of {True -> 4: 0 | False -> 9: (5: c:6 8: (6: primitive:3 7: x:7))})
//│ 14: (12: c:6 13: 0)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ Int <: 4'9_callres
//│ 	[-c:6^5 · -c:6^5]  --->  [-c:6^5]


// NOTE: only the first two element is handled
_LUMBERHACK_ERROR
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
fun ff(x) = if x is
    K then T
    KK then TT
    KKKK then TTTT
let l = C(K, C(KK, C(KKKK, N)))
map(ff, l)
//│ |_LUMBERHACK_ERROR|↵|#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|ff|,| |l|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; let l = C (K, C (KK, C (KKKK, N,),),); map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = 14: (fun f:9 -> 13: (fun ls:10 -> 12: case 1: ls:10 of {C h:11 t:12 -> 10: [C 4: (2: f:9 3: h:11) 9: (7: (5: map:6 6: f:9) 8: t:12)] | N -> 11: [N]}))
//│ def ff:7 = 20: (fun x:13 -> 19: case 15: x:13 of {K -> 16: [T] | KK -> 17: [TT] | KKKK -> 18: [TTTT]})
//│ def l:8 = 27: [C 21: [K] 26: [C 22: [KK] 25: [C 23: [KKKK] 24: [N]]]]
//│ 32: (30: (28: map:6 29: ff:7) 31: l:8)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ([]: 11'x) => ([]: 12'19_matchres) <: 3'f
//│ 	[-ff:7^29 · +map:6^28 · +map:6^5 · +map:6^5]  --->  [-ff:7^29 · +map:6^28 · +map:6^5]


// NOTE: some program not be able to write?
_LUMBERHACK_ERROR
fun last(ls) = if ls is
    C(h, t) then if t is
        N then Some(h)
        C(hh, tt) then last(t)
        // C(hh, tt) then last(C(hh, tt))
    N then None
let p = C(1, C(2, N))
last(p)
//│ |_LUMBERHACK_ERROR|↵|#fun| |last|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |#if| |t| |is|→|N| |#then| |Some|(|h|)|↵|C|(|hh|,| |tt|)| |#then| |last|(|t|)|↵|/* C(hh, tt) then last(C(hh, tt))*/|←|↵|N| |#then| |None|←|↵|#let| |p| |#=| |C|(|1|,| |C|(|2|,| |N|)|)|↵|last|(|p|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun last = ls, => if ls is ‹(C (h, t,)) then if t is ‹(N) then Some (h,); (C (hh, tt,)) then last (t,)›; (N) then None›; let p = C (1, C (2, N,),); last (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def last:6 = 11: (fun ls:8 -> 10: case 1: ls:8 of {C h:9 t:10 -> 8: case 2: t:10 of {N -> 4: [Some 3: h:9] | C hh:11 tt:12 -> 7: (5: last:6 6: t:10)} | N -> 9: [None]})
//│ def p:7 = 16: [C 12: 1 15: [C 13: 2 14: [N]]]
//│ 19: (17: last:6 18: p:7)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ Some(([]: 3'h)) <: 7'7_callres
//│ 	[-last:6^5 · -last:6^5]  --->  [-last:6^5]
//│ None <: 7'7_callres
//│ 	[-last:6^5 · -last:6^5]  --->  [-last:6^5]

_LUMBERHACK_ERROR
let add = primitive
fun idxSum(ls) = if ls is
    N then acc => 0
    C(h, t) then acc => add(acc, idxSum(t)(add(acc, 1)))
fun rev(lss, a) = if lss is
    N then a
    C(hh, tt) then rev(tt, C(hh, a))
idxSum(rev(primitive, N))(0)
//│ |_LUMBERHACK_ERROR|↵|#let| |add| |#=| |primitive|↵|#fun| |idxSum|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |acc| |=>| |0|↵|C|(|h|,| |t|)| |#then| |acc| |=>| |add|(|acc|,| |idxSum|(|t|)|(|add|(|acc|,| |1|)|)|)|←|↵|#fun| |rev|(|lss|,| |a|)| |#=| |#if| |lss| |is|→|N| |#then| |a|↵|C|(|hh|,| |tt|)| |#then| |rev|(|tt|,| |C|(|hh|,| |a|)|)|←|↵|idxSum|(|rev|(|primitive|,| |N|)|)|(|0|)|
//│ Parsed: {_LUMBERHACK_ERROR; let add = primitive; fun idxSum = ls, => if ls is ‹(N) then acc, => 0; (C (h, t,)) then acc, => add (acc, idxSum (t,) (add (acc, 1,),),)›; fun rev = lss, a, => if lss is ‹(N) then a; (C (hh, tt,)) then rev (tt, C (hh, a,),)›; idxSum (rev (primitive, N,),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def add:4 = 1: primitive:3
//│ def idxSum:7 = 20: (fun ls:9 -> 19: case 2: ls:9 of {N -> 4: (fun acc:10 -> 3: 0) | C h:11 t:12 -> 18: (fun acc:13 -> 17: (7: (5: add:4 6: acc:13) 16: (10: (8: idxSum:7 9: t:12) 15: (13: (11: add:4 12: acc:13) 14: 1))))})
//│ def rev:8 = 32: (fun lss:14 -> 31: (fun a:15 -> 30: case 21: lss:14 of {N -> 22: a:15 | C hh:16 tt:17 -> 29: (25: (23: rev:8 24: tt:17) 28: [C 26: hh:16 27: a:15])}))
//│ 41: (39: (33: idxSum:7 38: (36: (34: rev:8 35: primitive:3) 37: [N])) 40: 0)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ N <: 20'29_callres
//│ 	[+rev:8^34 · -rev:8^23 · -rev:8^23]  --->  [+rev:8^34 · -rev:8^23]
//│ C(([]: 17'hh), ([]: 16'a)) <: 20'29_callres
//│ 	[+rev:8^23 · -rev:8^23 · -rev:8^23]  --->  [+rev:8^23 · -rev:8^23]
//│ 		[-rev:8^23]  --->  []
//│ C(([]: 17'hh), ([]: 16'a)) <: 3'ls
//│ 	[+rev:8^23 · +rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ 		[+rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ 	[+rev:8^23 · +rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]


fun minuss(a) = if a is
    S(aa) then b => if b is
        S(bb) then minuss(aa, bb)
        Z then aa
    Z then n => Z
let fst = S(S(Z))
let snd = Z
minuss(fst)(snd)
//│ |#fun| |minuss|(|a|)| |#=| |#if| |a| |is|→|S|(|aa|)| |#then| |b| |=>| |#if| |b| |is|→|S|(|bb|)| |#then| |minuss|(|aa|,| |bb|)|↵|Z| |#then| |aa|←|↵|Z| |#then| |n| |=>| |Z|←|↵|#let| |fst| |#=| |S|(|S|(|Z|)|)|↵|#let| |snd| |#=| |Z|↵|minuss|(|fst|)|(|snd|)|
//│ Parsed: {fun minuss = a, => if a is ‹(S (aa,)) then b, => if b is ‹(S (bb,)) then minuss (aa, bb,); (Z) then aa›; (Z) then n, => Z›; let fst = S (S (Z,),); let snd = Z; minuss (fst,) (snd,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def minuss:6 = 14: (fun a:9 -> 13: case 1: a:9 of {S aa:10 -> 10: (fun b:11 -> 9: case 2: b:11 of {S bb:12 -> 7: (5: (3: minuss:6 4: aa:10) 6: bb:12) | Z -> 8: aa:10}) | Z -> 12: (fun n:13 -> 11: [Z])})
//│ def fst:7 = 17: [S 16: [S 15: [Z]]]
//│ def snd:8 = 18: [Z]
//│ 23: (21: (19: minuss:6 20: fst:7) 22: snd:8)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ S(([]: Z)) <: 8'7_callres
//│ 	[-fst:7^20 · +minuss:6^19 · -minuss:6^3 · -minuss:6^3]  --->  [-fst:7^20 · +minuss:6^19 · -minuss:6^3]
//│ Z <: 8'7_callres
//│ 	[-minuss:6^3 · -minuss:6^3]  --->  [-minuss:6^3]
//│ 	[-fst:7^20 · +minuss:6^19 · +minuss:6^3 · -minuss:6^3 · -minuss:6^3]  --->  [-fst:7^20 · +minuss:6^19 · +minuss:6^3 · -minuss:6^3]
//│ 		[-fst:7^20 · +minuss:6^19 · -minuss:6^3]  --->  [-fst:7^20 · +minuss:6^19]

// FIXME: weird recursive
_LUMBERHACK_ERROR
fun minuss(a) = if a is
    S(aa) then b => checkb(b)(aa)
    Z then n => Z
fun checkb(b) = if b is
    S(bb) then aaa => minuss(aaa, bb)
    Z then aaa => aaa
let fst = S(S(Z))
let snd = Z
minuss(fst)(snd)
//│ |_LUMBERHACK_ERROR|↵|#fun| |minuss|(|a|)| |#=| |#if| |a| |is|→|S|(|aa|)| |#then| |b| |=>| |checkb|(|b|)|(|aa|)|↵|Z| |#then| |n| |=>| |Z|←|↵|#fun| |checkb|(|b|)| |#=| |#if| |b| |is|→|S|(|bb|)| |#then| |aaa| |=>| |minuss|(|aaa|,| |bb|)|↵|Z| |#then| |aaa| |=>| |aaa|←|↵|#let| |fst| |#=| |S|(|S|(|Z|)|)|↵|#let| |snd| |#=| |Z|↵|minuss|(|fst|)|(|snd|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun minuss = a, => if a is ‹(S (aa,)) then b, => checkb (b,) (aa,); (Z) then n, => Z›; fun checkb = b, => if b is ‹(S (bb,)) then aaa, => minuss (aaa, bb,); (Z) then aaa, => aaa›; let fst = S (S (Z,),); let snd = Z; minuss (fst,) (snd,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def minuss:6 = 11: (fun a:10 -> 10: case 1: a:10 of {S aa:11 -> 7: (fun b:12 -> 6: (4: (2: checkb:7 3: b:12) 5: aa:11)) | Z -> 9: (fun n:13 -> 8: [Z])})
//│ def checkb:7 = 22: (fun b:14 -> 21: case 12: b:14 of {S bb:15 -> 18: (fun aaa:16 -> 17: (15: (13: minuss:6 14: aaa:16) 16: bb:15)) | Z -> 20: (fun aaa:17 -> 19: aaa:17)})
//│ def fst:8 = 25: [S 24: [S 23: [Z]]]
//│ def snd:9 = 26: [Z]
//│ 31: (29: (27: minuss:6 28: fst:8) 30: snd:9)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ S(([]: Z)) <: 8'6_callres
//│ 	[-fst:8^28 · +minuss:6^27 · +checkb:7^2 · -checkb:7^2 · -minuss:6^13 · -checkb:7^2]  --->  [-fst:8^28 · +minuss:6^27 · +checkb:7^2 · -checkb:7^2]
//│ 		[-fst:8^28 · +minuss:6^27 · -minuss:6^13 · -checkb:7^2]  --->  [-fst:8^28 · +minuss:6^27]
//│ Z <: 8'6_callres
//│ 	[-fst:8^28 · +minuss:6^27 · +checkb:7^2 · +minuss:6^13 · +checkb:7^2 · -checkb:7^2 · -minuss:6^13 · -checkb:7^2]  --->  [-fst:8^28 · +minuss:6^27 · +checkb:7^2 · +minuss:6^13 · +checkb:7^2 · -checkb:7^2]
//│ 		[-fst:8^28 · +minuss:6^27]  --->  [-fst:8^28 · +minuss:6^27 · +checkb:7^2 · +minuss:6^13]
//│ 	[-minuss:6^13 · -checkb:7^2 · -minuss:6^13 · -checkb:7^2]  --->  [-minuss:6^13 · -checkb:7^2]
