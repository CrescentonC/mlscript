:NewParser
:ParseOnly


// NOTE: the `p` inside `C(p)` is untouched
// TODO don't rewrite dead code
let p = C(p)
fun c(x) = if C(x) is
    C(a) then a
c(p)
//│ |#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |C|(|x|)| |is|→|C|(|a|)| |#then| |a|←|↵|c|(|p|)|
//│ Parsed: {let p = C (p,); fun c = x, => if C (x,) is ‹(C (a,)) then a›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^8 p^9)
//│ def c = (fun x:8 -> case [C x:8] of {
//│ 	C a:9 => a:9})
//│ def p = [C p^1]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^8]
//│ [p^9]
//│ 	[p^9 · p^1] ---> [p^9] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C x] --->
//│ 	case [C x] of {C a => a}
//│ [C x] --->
//│ 	case [C x] of {C a => a}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c₀ p₀)
//│ def p₀ = 
//│ 	[C p₀]
//│ def c₀ = 
//│ 	(fun x -> 
//│ 		let a = x
//│ 		in a)
//│ <<<<<<< after fusion <<<<<<<


// NOTE: how to produce a finite rewrtten program?
_LUMBERHACK_ERROR
let p = Pair(A, B)
fun c(x) = if x is
    Pair(a, b) then c(Pair(b, a))
c(p)
//│ |_LUMBERHACK_ERROR|↵|#let| |p| |#=| |Pair|(|A|,| |B|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|Pair|(|a|,| |b|)| |#then| |c|(|Pair|(|b|,| |a|)|)|←|↵|c|(|p|)|
//│ Parsed: {_LUMBERHACK_ERROR; let p = Pair (A, B,); fun c = x, => if x is ‹(Pair (a, b,)) then c (Pair (b, a,),)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^12 p^13)
//│ def c = (fun x:8 -> case x:8 of {
//│ 	Pair a:9 b:10 => (c^5 [Pair b:10 a:9])})
//│ def p = [Pair [A] [B]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^12]
//│ 	[c^12 · c^5] ---> [c^12] (using original def)
//│ [p^13]
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [Pair b a] --->
//│ 	case x of {Pair a b => (c [Pair b a])}
//│ [Pair [A] [B]] --->
//│ 	case x of {Pair a b => (c₀ [Pair b a])}
//│ [Pair b a] --->
//│ 	case x of {Pair a b => (c₀ [Pair b a])}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ !!!!!!ERROR!!!!!!
//│ java.lang.StackOverflowError
//│ !!!!!!ERROR!!!!!!

// Just a more valid/reasonable version of the above
// TODO get a recursive knot even when using `primitive` (we get it without)
_LUMBERHACK_ERROR
let p = Wrap(3)
fun c(x) = if x is
    N then 0
    Wrap(a) then c(Wrap(primitive(a)))
c(p)
//│ |_LUMBERHACK_ERROR|↵|#let| |p| |#=| |Wrap|(|3|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|N| |#then| |0|↵|Wrap|(|a|)| |#then| |c|(|Wrap|(|primitive|(|a|)|)|)|←|↵|c|(|p|)|
//│ Parsed: {_LUMBERHACK_ERROR; let p = Wrap (3,); fun c = x, => if x is ‹(N) then 0; (Wrap (a,)) then c (Wrap (primitive (a,),),)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^13 p^14)
//│ def c = (fun x:8 -> case x:8 of {
//│ 	N => 0
//│ 	| Wrap a:9 => (c^5 [Wrap (primitive:3 a:9)])})
//│ def p = [Wrap 3]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^13]
//│ 	[c^13 · c^5] ---> [c^13] (using original def)
//│ [p^14]
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [Wrap (primitive a)] --->
//│ 	case x of {N => 0 | Wrap a => (c [Wrap (primitive a)])}
//│ [Wrap 3] --->
//│ 	case x of {N => 0 | Wrap a => (c₀ [Wrap (primitive a)])}
//│ [Wrap (primitive a)] --->
//│ 	case x of {N => 0 | Wrap a => (c₀ [Wrap (primitive a)])}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ !!!!!!ERROR!!!!!!
//│ java.lang.StackOverflowError
//│ !!!!!!ERROR!!!!!!

fun c(x) = if primitive(x) is
    True then 0
    False then c(primitive(x))
c(0)
//│ |#fun| |c|(|x|)| |#=| |#if| |primitive|(|x|)| |is|→|True| |#then| |0|↵|False| |#then| |c|(|primitive|(|x|)|)|←|↵|c|(|0|)|
//│ Parsed: {fun c = x, => if primitive (x,) is ‹(True) then 0; (False) then c (primitive (x,),)›; c (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^12 0)
//│ def c = (fun x:7 -> case (primitive:3 x:7) of {
//│ 	True => 0
//│ 	| False => (c^5 (primitive:3 x:7))})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^12]
//│ 	[c^12 · c^5] ---> [c^12] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c₀ 0)
//│ def c₀ = 
//│ 	(fun x -> case (primitive x) of {
//│ 		True => 0
//│ 		| False => (c₀ (primitive x))})
//│ <<<<<<< after fusion <<<<<<<


// NOTE: only the first two element is handled
_LUMBERHACK_ERROR
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
fun ff(x) = if x is
    K then T
    KK then TT
    KKKK then TTTT
let l = C(K, C(KK, C(KKKK, N)))
map(ff, l)
//│ |_LUMBERHACK_ERROR|↵|#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|ff|,| |l|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; let l = C (K, C (KK, C (KKKK, N,),),); map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((map^28 ff^29) l^31)
//│ def ff = (fun x:13 -> case x:13 of {
//│ 	K => [T]
//│ 	| KK => [TT]
//│ 	| KKKK => [TTTT]})
//│ def l = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map = (fun f:9 -> (fun ls:10 -> case ls:10 of {
//│ 	C h:11 t:12 => [C (f:9 h:11) ((map^5 f:9) t:12)]
//│ 	| N => [N]}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 't:12
//│ 	[-l^31 · +map^28 · +map^5 · +map^5 · +map^5 · +map^5]  --->  [-l^31 · +map^28 · +map^5 · +map^5 · +map^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [ff^29]
//│ [l^31]
//│ [map^28]
//│ 	[map^28 · map^5]
//│ 		[map^28 · map^5 · map^5]
//│ 			[map^28 · map^5 · map^5 · map^5]
//│ 				[map^28 · map^5 · map^5 · map^5 · map^5] ---> [map^28 · map^5 · map^5 · map^5] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [K] --->
//│ 	case x of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ [KK] --->
//│ 	case x of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ [KKKK] --->
//│ 	case x of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ [N] --->
//│ 	case ls of {C h t => [C (f h) ((map₃ f) t)] | N => [N]}
//│ [C [KKKK] [N]] --->
//│ 	case ls of {C h t => [C (f h) ((map₃ f) t)] | N => [N]}
//│ [C [KK] [C [KKKK] [N]]] --->
//│ 	case ls of {C h t => [C (f h) ((map₂ f) t)] | N => [N]}
//│ [C [K] [C [KK] [C [KKKK] [N]]]] --->
//│ 	case ls of {C h t => [C (f h) ((map₁ f) t)] | N => [N]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((map₀ ff₀) l₀)
//│ def ff₀ = 
//│ 	(fun x -> x)
//│ def map₀ = 
//│ 	(fun f -> (fun ls -> ls))
//│ 	where
//│ 	def map₁ = 
//│ 		(fun f -> (fun ls -> ls))
//│ 		where
//│ 		def map₂ = 
//│ 			(fun f -> (fun ls -> ls))
//│ 			where
//│ 			def map₃ = 
//│ 				(fun f -> (fun ls -> ls))
//│ def l₀ = 
//│ 	let h = [T]
//│ 	in let t = 	
//│ 		let h = [TT]
//│ 		in let t = 	
//│ 			let h = [TTTT]
//│ 			in let t = [N]
//│ 			in [C (f h) ((map₃ f) t)]
//│ 		in [C (f h) ((map₂ f) t)]
//│ 	in [C (f h) ((map₁ f) t)]
//│ <<<<<<< after fusion <<<<<<<


// NOTE: some program not be able to write?
_LUMBERHACK_ERROR
fun last(ls) = if ls is
    C(h, t) then if t is
        N then Some(h)
        C(hh, tt) then last(t)
        // C(hh, tt) then last(C(hh, tt))
    N then None
let p = C(1, C(2, N))
last(p)
//│ |_LUMBERHACK_ERROR|↵|#fun| |last|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |#if| |t| |is|→|N| |#then| |Some|(|h|)|↵|C|(|hh|,| |tt|)| |#then| |last|(|t|)|↵|/* C(hh, tt) then last(C(hh, tt))*/|←|↵|N| |#then| |None|←|↵|#let| |p| |#=| |C|(|1|,| |C|(|2|,| |N|)|)|↵|last|(|p|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun last = ls, => if ls is ‹(C (h, t,)) then if t is ‹(N) then Some (h,); (C (hh, tt,)) then last (t,)›; (N) then None›; let p = C (1, C (2, N,),); last (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (last^17 p^18)
//│ def last = (fun ls:8 -> case ls:8 of {
//│ 	C h:9 t:10 => case t:10 of {
//│ 		N => [Some h:9]
//│ 		| C hh:11 tt:12 => (last^5 t:10)}
//│ 	| N => [None]})
//│ def p = [C 1 [C 2 [N]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 't:10
//│ 	[-p^18 · +last^17 · +last^5 · +last^5 · +last^5]  --->  [-p^18 · +last^17 · +last^5 · +last^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [last^17]
//│ 	[last^17 · last^5]
//│ 		[last^17 · last^5 · last^5]
//│ 			[last^17 · last^5 · last^5 · last^5] ---> [last^17 · last^5 · last^5] (only one)
//│ [p^18]
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N] --->
//│ 	case ls of {C h t => case t of {N => [Some h] | C hh tt => (last₂ t)} | N => [None]}
//│ 	case t of {N => [Some h] | C hh tt => (last₂ t)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C 2 [N]] --->
//│ 	case ls of {C h t => case t of {N => [Some h] | C hh tt => (last₂ t)} | N => [None]}
//│ 	case t of {N => [Some h] | C hh tt => (last₁ t)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C 1 [C 2 [N]]] --->
//│ 	case ls of {C h t => case t of {N => [Some h] | C hh tt => (last₁ t)} | N => [None]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (last₀ p₀)
//│ def p₀ = 
//│ 	let h = 1
//│ 	in let t = 	
//│ 		let h = 2
//│ 		in let t = [None]
//│ 		in case t of {
//│ 			N => [Some h]
//│ 			| C hh tt => (last₂ t)}
//│ 	in case t of {
//│ 		N => [Some h]
//│ 		| C hh tt => (last₁ t)}
//│ def last₀ = 
//│ 	(fun ls -> ls)
//│ 	where
//│ 	def last₁ = 
//│ 		(fun ls -> ls)
//│ 		where
//│ 		def last₂ = 
//│ 			(fun ls -> ls)
//│ <<<<<<< after fusion <<<<<<<

_LUMBERHACK_ERROR
let add = primitive
fun idxSum(ls) = if ls is
    N then acc => 0
    C(h, t) then acc => add(acc, idxSum(t)(add(acc, 1)))
fun rev(lss, a) = if lss is
    N then a
    C(hh, tt) then rev(tt, C(hh, a))
idxSum(rev(primitive, N))(0)
//│ |_LUMBERHACK_ERROR|↵|#let| |add| |#=| |primitive|↵|#fun| |idxSum|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |acc| |=>| |0|↵|C|(|h|,| |t|)| |#then| |acc| |=>| |add|(|acc|,| |idxSum|(|t|)|(|add|(|acc|,| |1|)|)|)|←|↵|#fun| |rev|(|lss|,| |a|)| |#=| |#if| |lss| |is|→|N| |#then| |a|↵|C|(|hh|,| |tt|)| |#then| |rev|(|tt|,| |C|(|hh|,| |a|)|)|←|↵|idxSum|(|rev|(|primitive|,| |N|)|)|(|0|)|
//│ Parsed: {_LUMBERHACK_ERROR; let add = primitive; fun idxSum = ls, => if ls is ‹(N) then acc, => 0; (C (h, t,)) then acc, => add (acc, idxSum (t,) (add (acc, 1,),),)›; fun rev = lss, a, => if lss is ‹(N) then a; (C (hh, tt,)) then rev (tt, C (hh, a,),)›; idxSum (rev (primitive, N,),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((idxSum^33 ((rev^34 primitive:3) [N])) 0)
//│ def add = primitive:3
//│ def idxSum = (fun ls:9 -> case ls:9 of {
//│ 	N => (fun acc:10 -> 0)
//│ 	| C h:11 t:12 => (fun acc:13 -> ((add:4 acc:13) ((idxSum^8 t:12) ((add:4 acc:13) 1))))})
//│ def rev = (fun lss:14 -> (fun a:15 -> case lss:14 of {
//│ 	N => a:15
//│ 	| C hh:16 tt:17 => ((rev^23 tt:17) [C hh:16 a:15])}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C('hh:16, 'a:15) <: 'ls:9
//│ 	[+rev^23 · +rev^23 · +rev^23 · -rev^34 · +idxSum^33 · +idxSum^8 · +idxSum^8]  --->  [+rev^23 · +rev^23 · -rev^34 · +idxSum^33 · +idxSum^8]
//│ 	[+rev^23 · +rev^23 · +rev^23 · -rev^23 · -rev^34 · +idxSum^33 · +idxSum^8 · +idxSum^8]  --->  [+rev^23 · +rev^23 · -rev^23 · -rev^34 · +idxSum^33 · +idxSum^8]
//│ NoProd <: 'lss:14
//│ 	[+rev^34 · +rev^23 · +rev^23]  --->  [+rev^34 · +rev^23]
//│ NoProd <: 'ls:9
//│ 	[+rev^34 · -rev^34 · +idxSum^33 · +idxSum^8 · +idxSum^8]  --->  [+rev^34 · -rev^34 · +idxSum^33 · +idxSum^8]
//│ 	[+rev^34 · -rev^23 · -rev^34 · +idxSum^33 · +idxSum^8 · +idxSum^8]  --->  [+rev^34 · -rev^23 · -rev^34 · +idxSum^33 · +idxSum^8]
//│ NoProd <: 't:12
//│ 	[+rev^34 · +rev^23 · -rev^34 · +idxSum^33 · +idxSum^8 · +idxSum^8]  --->  [+rev^34 · +rev^23 · -rev^34 · +idxSum^33 · +idxSum^8]
//│ 	[+rev^34 · +rev^23 · +rev^23 · -rev^34 · +idxSum^33 · +idxSum^8 · +idxSum^8 · +idxSum^8]  --->  [+rev^34 · +rev^23 · +rev^23 · -rev^34 · +idxSum^33 · +idxSum^8 · +idxSum^8]
//│ 	[+rev^34 · +rev^23 · -rev^23 · -rev^34 · +idxSum^33 · +idxSum^8 · +idxSum^8]  --->  [+rev^34 · +rev^23 · -rev^23 · -rev^34 · +idxSum^33 · +idxSum^8]
//│ 	[+rev^34 · +rev^23 · +rev^23 · -rev^23 · -rev^34 · +idxSum^33 · +idxSum^8 · +idxSum^8 · +idxSum^8]  --->  [+rev^34 · +rev^23 · +rev^23 · -rev^23 · -rev^34 · +idxSum^33 · +idxSum^8 · +idxSum^8]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [idxSum^33]
//│ 	[idxSum^33 · idxSum^8]
//│ 		[idxSum^33 · idxSum^8 · idxSum^8] ---> [idxSum^33 · idxSum^8] (only one)
//│ [rev^34]
//│ 	[rev^34 · rev^23]
//│ 		[rev^34 · rev^23 · rev^23] ---> [rev^34 · rev^23] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N] --->
//│ 	case ls of {N => (fun acc -> 0) | C h t => (fun acc -> ((add acc) ((idxSum₁ t) ((add acc) 1))))}
//│ 	case ls of {N => (fun acc -> 0) | C h t => (fun acc -> ((add acc) ((idxSum₁ t) ((add acc) 1))))}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C hh a] --->
//│ 	case ls of {N => (fun acc -> 0) | C h t => (fun acc -> ((add acc) ((idxSum₁ t) ((add acc) 1))))}
//│ 	case ls of {N => (fun acc -> 0) | C h t => (fun acc -> ((add acc) ((idxSum₁ t) ((add acc) 1))))}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C hh a] --->
//│ 	case ls of {N => (fun acc -> 0) | C h t => (fun acc -> ((add acc) ((idxSum₁ t) ((add acc) 1))))}
//│ 	case ls of {N => (fun acc -> 0) | C h t => (fun acc -> ((add acc) ((idxSum₁ t) ((add acc) 1))))}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((idxSum₀ ((rev₀ primitive) (fun acc -> 0))) 0)
//│ def rev₀ = 
//│ 	(fun lss -> (fun a -> case lss of {
//│ 		N => a
//│ 		| C hh tt => ((rev₁ tt) 
//│ 			let h = hh
//│ 			in let t = a
//│ 			in (fun acc -> ((add acc) ((idxSum₁ t) ((add acc) 1)))))}))
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun lss -> (fun a -> case lss of {
//│ 			N => a
//│ 			| C hh tt => ((rev₁ tt) 
//│ 				let h = hh
//│ 				in let t = a
//│ 				in (fun acc -> ((add acc) ((idxSum₁ t) ((add acc) 1)))))}))
//│ def idxSum₀ = 
//│ 	(fun ls -> ls)
//│ 	where
//│ 	def idxSum₁ = 
//│ 		(fun ls -> case ls of {
//│ 			N => (fun acc -> 0)
//│ 			| C h t => (fun acc -> ((add acc) ((idxSum₁ t) ((add acc) 1))))})
//│ <<<<<<< after fusion <<<<<<<


fun minuss(a) = if a is
    S(aa) then b => if b is
        S(bb) then minuss(aa, bb)
        Z then aa
    Z then n => Z
let fst = S(S(Z))
let snd = Z
minuss(fst)(snd)
//│ |#fun| |minuss|(|a|)| |#=| |#if| |a| |is|→|S|(|aa|)| |#then| |b| |=>| |#if| |b| |is|→|S|(|bb|)| |#then| |minuss|(|aa|,| |bb|)|↵|Z| |#then| |aa|←|↵|Z| |#then| |n| |=>| |Z|←|↵|#let| |fst| |#=| |S|(|S|(|Z|)|)|↵|#let| |snd| |#=| |Z|↵|minuss|(|fst|)|(|snd|)|
//│ Parsed: {fun minuss = a, => if a is ‹(S (aa,)) then b, => if b is ‹(S (bb,)) then minuss (aa, bb,); (Z) then aa›; (Z) then n, => Z›; let fst = S (S (Z,),); let snd = Z; minuss (fst,) (snd,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((minuss^19 fst^20) snd^22)
//│ def fst = [S [S [Z]]]
//│ def minuss = (fun a:9 -> case a:9 of {
//│ 	S aa:10 => (fun b:11 -> case b:11 of {
//│ 		S bb:12 => ((minuss^3 aa:10) bb:12)
//│ 		| Z => aa:10})
//│ 	| Z => (fun n:13 -> [Z])})
//│ def snd = [Z]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 'aa:10
//│ 	[-fst^20 · +minuss^19 · +minuss^3 · +minuss^3 · +minuss^3]  --->  [-fst^20 · +minuss^19 · +minuss^3 · +minuss^3]
//│ NoProd <: 'b:11
//│ 	[-snd^22 · +minuss^19 · +minuss^3 · +minuss^3]  --->  [-snd^22 · +minuss^19 · +minuss^3]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [fst^20]
//│ [minuss^19]
//│ 	[minuss^19 · minuss^3]
//│ 		[minuss^19 · minuss^3 · minuss^3] ---> [minuss^19 · minuss^3] (only one)
//│ [snd^22]
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [Z] --->
//│ 	case b of {S bb => ((minuss₁ aa) bb) | Z => aa}
//│ [Z] --->
//│ 	case a of {S aa => (fun b -> case b of {S bb => ((minuss₁ aa) bb) | Z => aa}) | Z => (fun n -> [Z])}
//│ [S [Z]] --->
//│ 	case a of {S aa => (fun b -> case b of {S bb => ((minuss₁ aa) bb) | Z => aa}) | Z => (fun n -> [Z])}
//│ [S [S [Z]]] --->
//│ 	case a of {S aa => (fun b -> case b of {S bb => ((minuss₁ aa) bb) | Z => aa}) | Z => (fun n -> [Z])}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((minuss₀ fst₀) snd₀)
//│ def snd₀ = 
//│ 	aa
//│ def minuss₀ = 
//│ 	(fun a -> a)
//│ 	where
//│ 	def minuss₁ = 
//│ 		(fun a -> a)
//│ def fst₀ = 
//│ 	let aa = 	
//│ 		let aa = (fun n -> [Z])
//│ 		in (fun b -> case b of {
//│ 			S bb => ((minuss₁ aa) bb)
//│ 			| Z => aa})
//│ 	in (fun b -> b)
//│ <<<<<<< after fusion <<<<<<<

// FIXME: weird recursive
_LUMBERHACK_ERROR
fun minuss(a) = if a is
    S(aa) then b => checkb(b)(aa)
    Z then n => Z
fun checkb(b) = if b is
    S(bb) then aaa => minuss(aaa, bb)
    Z then aaa => aaa
let fst = S(S(Z))
let snd = Z
minuss(fst)(snd)
//│ |_LUMBERHACK_ERROR|↵|#fun| |minuss|(|a|)| |#=| |#if| |a| |is|→|S|(|aa|)| |#then| |b| |=>| |checkb|(|b|)|(|aa|)|↵|Z| |#then| |n| |=>| |Z|←|↵|#fun| |checkb|(|b|)| |#=| |#if| |b| |is|→|S|(|bb|)| |#then| |aaa| |=>| |minuss|(|aaa|,| |bb|)|↵|Z| |#then| |aaa| |=>| |aaa|←|↵|#let| |fst| |#=| |S|(|S|(|Z|)|)|↵|#let| |snd| |#=| |Z|↵|minuss|(|fst|)|(|snd|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun minuss = a, => if a is ‹(S (aa,)) then b, => checkb (b,) (aa,); (Z) then n, => Z›; fun checkb = b, => if b is ‹(S (bb,)) then aaa, => minuss (aaa, bb,); (Z) then aaa, => aaa›; let fst = S (S (Z,),); let snd = Z; minuss (fst,) (snd,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((minuss^27 fst^28) snd^30)
//│ def checkb = (fun b:14 -> case b:14 of {
//│ 	S bb:15 => (fun aaa:16 -> ((minuss^13 aaa:16) bb:15))
//│ 	| Z => (fun aaa:17 -> aaa:17)})
//│ def fst = [S [S [Z]]]
//│ def minuss = (fun a:10 -> case a:10 of {
//│ 	S aa:11 => (fun b:12 -> ((checkb^2 b:12) aa:11))
//│ 	| Z => (fun n:13 -> [Z])})
//│ def snd = [Z]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 'bb:15
//│ 	[-snd^30 · +minuss^27 · +checkb^2 · +minuss^13 · +checkb^2]  --->  [-snd^30 · +minuss^27 · +checkb^2]
//│ NoProd <: 'aa:11
//│ 	[-fst^28 · +minuss^27 · +checkb^2 · +minuss^13 · +checkb^2 · +minuss^13 · +checkb^2 · +minuss^13]  --->  [-fst^28 · +minuss^27 · +checkb^2 · +minuss^13 · +checkb^2 · +minuss^13]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [fst^28]
//│ [minuss^27]
//│ 	[minuss^27 · checkb^2]
//│ 		[minuss^27 · checkb^2 · minuss^13]
//│ 			[minuss^27 · checkb^2 · minuss^13 · checkb^2] ---> [minuss^27 · checkb^2] (only one)
//│ [snd^30]
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [Z] --->
//│ 	case a of {S aa => (fun b -> ((checkb₀ b) aa)) | Z => (fun n -> [Z])}
//│ [S [Z]] --->
//│ 	case a of {S aa => (fun b -> ((checkb₀ b) aa)) | Z => (fun n -> [Z])}
//│ [S [S [Z]]] --->
//│ 	case a of {S aa => (fun b -> ((checkb₀ b) aa)) | Z => (fun n -> [Z])}
//│ [Z] --->
//│ 	case b of {S bb => (fun aaa -> ((minuss₁ aaa) bb)) | Z => (fun aaa -> aaa)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((minuss₀ fst₀) snd₀)
//│ def minuss₀ = 
//│ 	(fun a -> a)
//│ 	where
//│ 	def checkb₀ = 
//│ 		(fun b -> b)
//│ 		where
//│ 		def minuss₁ = 
//│ 			(fun a -> a)
//│ def snd₀ = 
//│ 	(fun aaa -> aaa)
//│ def fst₀ = 
//│ 	let aa = 	
//│ 		let aa = (fun n -> [Z])
//│ 		in (fun b -> ((checkb₀ b) aa))
//│ 	in (fun b -> ((checkb₀ b) aa))
//│ <<<<<<< after fusion <<<<<<<


fun id(x) = if x is
    ID(b) then b
    C(a) then id(ID(C(a)))
let p = C(p)
fun c(y) = if y is
    C(aa) then c(aa)
c(id(p))
//│ |#fun| |id|(|x|)| |#=| |#if| |x| |is|→|ID|(|b|)| |#then| |b|↵|C|(|a|)| |#then| |id|(|ID|(|C|(|a|)|)|)|←|↵|#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|y|)| |#=| |#if| |y| |is|→|C|(|aa|)| |#then| |c|(|aa|)|←|↵|c|(|id|(|p|)|)|
//│ Parsed: {fun id = x, => if x is ‹(ID (b,)) then b; (C (a,)) then id (ID (C (a,),),)›; let p = C (p,); fun c = y, => if y is ‹(C (aa,)) then c (aa,)›; c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^18 (id^19 p^20))
//│ def c = (fun y:12 -> case y:12 of {
//│ 	C aa:13 => (c^13 aa:13)})
//│ def id = (fun x:9 -> case x:9 of {
//│ 	ID b:10 => b:10
//│ 	| C a:11 => (id^3 [ID [C a:11]])})
//│ def p = [C p^10]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C('p:7) <: 'aa:13
//│ 	[-p^10 · -p^10 · -p^20 · +id^19 · +id^3 · -id^19 · +c^18 · +c^13]  --->  [-p^10 · -p^20 · +id^19 · +id^3 · -id^19 · +c^18]
//│ 	[-p^10 · -p^10 · -p^20 · +id^19 · +id^3 · -id^3 · -id^19 · +c^18 · +c^13]  --->  [-p^10 · -p^20 · +id^19 · +id^3 · -id^3 · -id^19 · +c^18]
//│ NoProd <: 'y:12
//│ 	[-p^20 · +id^19 · -id^19 · +c^18 · +c^13]  --->  [-p^20 · +id^19 · -id^19 · +c^18]
//│ 	[-p^20 · +id^19 · -id^3 · -id^19 · +c^18 · +c^13]  --->  [-p^20 · +id^19 · -id^3 · -id^19 · +c^18]
//│ NoProd <: 'aa:13
//│ 	[+id^3 · +id^3 · -id^19 · +c^18 · +c^13]  --->  [+id^3 · +id^3 · -id^19 · +c^18]
//│ 	[+id^3 · +id^3 · -id^3 · -id^19 · +c^18 · +c^13]  --->  [+id^3 · +id^3 · -id^3 · -id^19 · +c^18]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^18]
//│ 	[c^18 · c^13] ---> [c^18] (only one)
//│ [id^19]
//│ 	[id^19 · id^3]
//│ 		[id^19 · id^3 · id^3] ---> [id^19 · id^3] (using original def)
//│ [p^20]
//│ 	[p^20 · p^10]
//│ 		[p^20 · p^10 · p^10] ---> [p^20 · p^10] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [ID [C a]] --->
//│ 	case x of {ID b => b | C a => (id [ID [C a]])}
//│ [C p₁] --->
//│ 	case x of {ID b => b | C a => (id₁ [ID [C a]])}
//│ [C p₁] --->
//│ 	case y of {C aa => (c₀ aa)}
//│ [C a] --->
//│ 	case y of {C aa => (c₀ aa)}
//│ [ID [C a]] --->
//│ 	case x of {ID b => b | C a => (id₁ [ID [C a]])}
//│ [C a] --->
//│ 	case y of {C aa => (c₀ aa)}
//│ [ID [C a]] --->
//│ 	case x of {ID b => b | C a => (id₁ [ID [C a]])}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c₀ (id₀ p₀))
//│ def id₀ = 
//│ 	(fun x -> x)
//│ 	where
//│ 	def id₁ = 
//│ 		(fun x -> x)
//│ def p₀ = 
//│ 	let a = p₁
//│ 	in (id₁ 
//│ 		let b = 	
//│ 			let aa = a
//│ 			in (c₀ aa)
//│ 		in b)
//│ 	where
//│ 	def p₁ = 
//│ 		let aa = p₁
//│ 		in (c₀ aa)
//│ def c₀ = 
//│ 	(fun y -> y)
//│ <<<<<<< after fusion <<<<<<<
