:NewParser
:ParseOnly


fun f(xs, a) = primitive(
  if xs is
    C(h, t) then primitive(h)(t)(a)
)
f(C(1, C(2, N)))
//│ |#fun| |f|(|xs|,| |a|)| |#=| |primitive|(|→|#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |primitive|(|h|)|(|t|)|(|a|)|←|←|↵|)|↵|f|(|C|(|1|,| |C|(|2|,| |N|)|)|)|
//│ Parsed: {fun f = xs, a, => primitive (if xs is ‹(C (h, t,)) then primitive (h,) (t,) (a,)›,); f (C (1, C (2, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ f^14([C 1 [C 2 [N]]])
//│ def f(xs⁰, a⁰) = primitive⁰(case xs⁰ of {
//│ 	C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a⁰)})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 1 [C 2 [N]]]: 19 --->
//│ 	case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a⁰)}: 10
//│ ------------------
//│ case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a⁰)}: 10 --->
//│ 	[C 1 [C 2 [N]]]: 19
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C 1 [C 2 [N]]]: 19 --->
//│ 	case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a⁰)}: 10
//│ ------------------
//│ case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a⁰)}: 10 --->
//│ 	[C 1 [C 2 [N]]]: 19
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ f(
//│ 	let t¹ = [C 2 [N]]
//│ 	in let h¹ = 1
//│ 	in (fun a¹ -> primitive⁰(h¹, t¹, a¹)))
//│ def f(xs¹, a²) = primitive⁰(xs¹(a²))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ f
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ 
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ (fun a⁰ -> primitive⁰(
//│ 	let t⁰ = [C 2 [N]]
//│ 	in let h⁰ = 1
//│ 	in (fun a¹ -> primitive⁰(h⁰, t⁰, a¹))(a⁰)))
//│ def f(xs⁰, a²) = primitive⁰(xs⁰(a²))
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ (fun a⁰ -> primitive⁰(
//│ 	let t⁰ = [C 2 [N]]
//│ 	in let h⁰ = 1
//│ 	in (fun a¹ -> primitive⁰(h⁰, t⁰, a¹))(a⁰)))
//│ def f(xs⁰, a²) = primitive⁰(xs⁰(a²))
//│ <<<<<<< after floating out <<<<<<<

fun f(xs, a) = primitive(
  if xs is
    C(h, t) then primitive(h)(t)(a)
)
let cs = C(1, C(2, cs))
f(cs)
//│ |#fun| |f|(|xs|,| |a|)| |#=| |primitive|(|→|#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |primitive|(|h|)|(|t|)|(|a|)|←|←|↵|)|↵|#let| |cs| |#=| |C|(|1|,| |C|(|2|,| |cs|)|)|↵|f|(|cs|)|
//│ Parsed: {fun f = xs, a, => primitive (if xs is ‹(C (h, t,)) then primitive (h,) (t,) (a,)›,); let cs = C (1, C (2, cs,),); f (cs,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ f^19(cs^20)
//│ def cs = [C 1 [C 2 cs^16]]
//│ def f(xs⁰, a⁰) = primitive⁰(case xs⁰ of {
//│ 	C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a⁰)})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 1 [C 2 cs]]: 18 --->
//│ 	NoCons
//│ 	case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a⁰)}: 10
//│ ------------------
//│ case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a⁰)}: 10 --->
//│ 	[C 1 [C 2 cs]]: 18
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ f(cs)
//│ def cs = [C 1 [C 2 cs]]
//│ def f(xs¹, a¹) = primitive⁰(case xs¹ of {
//│ 	C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a¹)})
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ 
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ 
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ f(cs)
//│ def cs = [C 1 [C 2 cs]]
//│ def f(xs⁰, a⁰) = primitive⁰(case xs⁰ of {
//│ 	C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a⁰)})
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ f(cs)
//│ def cs = [C 1 [C 2 cs]]
//│ def f(xs⁰, a⁰) = primitive⁰(case xs⁰ of {
//│ 	C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a⁰)})
//│ <<<<<<< after floating out <<<<<<<


_LUMBERHACK_EVAL
fun f(xs, a) = primitive(
  if xs is
    C(h, t) then primitive(h)(f(t, a))(a)
    N then primitive(a)
)
fun g(init) = if init > 0
  then C(1, g(init - 1))
  else N 
f(g(42))(0)
//│ |_LUMBERHACK_EVAL|↵|#fun| |f|(|xs|,| |a|)| |#=| |primitive|(|→|#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |primitive|(|h|)|(|f|(|t|,| |a|)|)|(|a|)|↵|N| |#then| |primitive|(|a|)|←|←|↵|)|↵|#fun| |g|(|init|)| |#=| |#if| |init| |>| |0|→|#then| |C|(|1|,| |g|(|init| |-| |1|)|)|↵|#else| |N| |←|↵|f|(|g|(|42|)|)|(|0|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun f = xs, a, => primitive (if xs is ‹(C (h, t,)) then primitive (h,) (f (t, a,),) (a,); (N) then primitive (a,)›,); fun g = init, => if (> (init,) (0,)) then C (1, g (- (init,) (1,),),) else N; f (g (42,),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ f^38(g^39(42), 0)
//│ def f(xs⁰, a⁰) = primitive⁰(case xs⁰ of {
//│ 	C h⁰ t⁰ => primitive⁰(h⁰, f^6(t⁰, a⁰), a⁰)
//│ 	| N  => primitive⁰(a⁰)})
//│ def g(init⁰) = if (init⁰ > 0) then [C 1 g^27((init⁰ - 1))] else [N]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0))
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 1 g((init⁰ - 1))]: 34 --->
//│ 	case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, f(t⁰, a⁰), a⁰) | N  => primitive⁰(a⁰)}: 17
//│ [N]: 35 --->
//│ 	case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, f(t⁰, a⁰), a⁰) | N  => primitive⁰(a⁰)}: 17
//│ ------------------
//│ case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, f(t⁰, a⁰), a⁰) | N  => primitive⁰(a⁰)}: 17 --->
//│ 	[C 1 g((init⁰ - 1))]: 34
//│ 	[N]: 35
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C 1 g((init⁰ - 1))]: 34 --->
//│ 	case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, f(t⁰, a⁰), a⁰) | N  => primitive⁰(a⁰)}: 17
//│ [N]: 35 --->
//│ 	case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, f(t⁰, a⁰), a⁰) | N  => primitive⁰(a⁰)}: 17
//│ ------------------
//│ case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, f(t⁰, a⁰), a⁰) | N  => primitive⁰(a⁰)}: 17 --->
//│ 	[C 1 g((init⁰ - 1))]: 34
//│ 	[N]: 35
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ f(g(42), 0)
//│ def f(xs¹, a¹) = primitive⁰(xs¹(a¹))
//│ def g(init¹) = if (init¹ > 0) then 
//│ 	let t¹ = g((init¹ - 1))
//│ 	in let h¹ = 1
//│ 	in (fun a² -> primitive⁰(h¹, f(t¹, a²), a²)) else (fun a³ -> primitive⁰(a³))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0)), 0))
//│ <<<<<<< evaluate <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ f
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ g -> 2
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ primitive⁰(g(42, 0))
//│ def f(xs⁰, a⁰) = primitive⁰(xs⁰(a⁰))
//│ def g(init⁰) = if (init⁰ > 0) then 
//│ 	let t⁰ = g((init⁰ - 1))
//│ 	in let h⁰ = 1
//│ 	in (fun a¹ -> primitive⁰(h⁰, primitive⁰(t⁰(a¹)), a¹)) else (fun a² -> primitive⁰(a²))
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ primitive⁰(g(42, 0))
//│ def f(xs⁰, a⁰) = primitive⁰(xs⁰(a⁰))
//│ def g(init⁰, _lh_popOutId_0⁰) = if (init⁰ > 0) then 
//│ 	let t⁰ = g((init⁰ - 1))
//│ 	in let h⁰ = 1
//│ 	in primitive⁰(h⁰, primitive⁰(t⁰(_lh_popOutId_0⁰)), _lh_popOutId_0⁰) else primitive⁰(_lh_popOutId_0⁰)
//│ <<<<<<< after floating out <<<<<<<

_LUMBERHACK_EVAL
fun f(xs, a) = primitive(
  if xs is
    C(h, t) then primitive(h)(f(t, a + 1))(a)
    N then primitive(a)
)
fun g(init) = if init > 0
  then C(1, g(init - 1))
  else N
f(g(42))(0)
//│ |_LUMBERHACK_EVAL|↵|#fun| |f|(|xs|,| |a|)| |#=| |primitive|(|→|#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |primitive|(|h|)|(|f|(|t|,| |a| |+| |1|)|)|(|a|)|↵|N| |#then| |primitive|(|a|)|←|←|↵|)|↵|#fun| |g|(|init|)| |#=| |#if| |init| |>| |0|→|#then| |C|(|1|,| |g|(|init| |-| |1|)|)|↵|#else| |N|←|↵|f|(|g|(|42|)|)|(|0|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun f = xs, a, => primitive (if xs is ‹(C (h, t,)) then primitive (h,) (f (t, + (a,) (1,),),) (a,); (N) then primitive (a,)›,); fun g = init, => if (> (init,) (0,)) then C (1, g (- (init,) (1,),),) else N; f (g (42,),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ f^42(g^43(42), 0)
//│ def f(xs⁰, a⁰) = primitive⁰(case xs⁰ of {
//│ 	C h⁰ t⁰ => primitive⁰(h⁰, f^6(t⁰, (a⁰ + 1)), a⁰)
//│ 	| N  => primitive⁰(a⁰)})
//│ def g(init⁰) = if (init⁰ > 0) then [C 1 g^31((init⁰ - 1))] else [N]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(42)), 41)), 40)), 39)), 38)), 37)), 36)), 35)), 34)), 33)), 32)), 31)), 30)), 29)), 28)), 27)), 26)), 25)), 24)), 23)), 22)), 21)), 20)), 19)), 18)), 17)), 16)), 15)), 14)), 13)), 12)), 11)), 10)), 9)), 8)), 7)), 6)), 5)), 4)), 3)), 2)), 1)), 0))
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 1 g((init⁰ - 1))]: 38 --->
//│ 	case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, f(t⁰, (a⁰ + 1)), a⁰) | N  => primitive⁰(a⁰)}: 21
//│ [N]: 39 --->
//│ 	case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, f(t⁰, (a⁰ + 1)), a⁰) | N  => primitive⁰(a⁰)}: 21
//│ ------------------
//│ case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, f(t⁰, (a⁰ + 1)), a⁰) | N  => primitive⁰(a⁰)}: 21 --->
//│ 	[C 1 g((init⁰ - 1))]: 38
//│ 	[N]: 39
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C 1 g((init⁰ - 1))]: 38 --->
//│ 	case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, f(t⁰, (a⁰ + 1)), a⁰) | N  => primitive⁰(a⁰)}: 21
//│ [N]: 39 --->
//│ 	case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, f(t⁰, (a⁰ + 1)), a⁰) | N  => primitive⁰(a⁰)}: 21
//│ ------------------
//│ case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, f(t⁰, (a⁰ + 1)), a⁰) | N  => primitive⁰(a⁰)}: 21 --->
//│ 	[C 1 g((init⁰ - 1))]: 38
//│ 	[N]: 39
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ f(g(42), 0)
//│ def f(xs¹, a¹) = primitive⁰(xs¹(a¹))
//│ def g(init¹) = if (init¹ > 0) then 
//│ 	let t¹ = g((init¹ - 1))
//│ 	in let h¹ = 1
//│ 	in (fun a² -> primitive⁰(h¹, f(t¹, (a² + 1)), a²)) else (fun a³ -> primitive⁰(a³))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(1, primitive⁰(primitive⁰(42)), 41)), 40)), 39)), 38)), 37)), 36)), 35)), 34)), 33)), 32)), 31)), 30)), 29)), 28)), 27)), 26)), 25)), 24)), 23)), 22)), 21)), 20)), 19)), 18)), 17)), 16)), 15)), 14)), 13)), 12)), 11)), 10)), 9)), 8)), 7)), 6)), 5)), 4)), 3)), 2)), 1)), 0))
//│ <<<<<<< evaluate <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ f
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ g -> 2
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ primitive⁰(g(42, 0))
//│ def f(xs⁰, a⁰) = primitive⁰(xs⁰(a⁰))
//│ def g(init⁰) = if (init⁰ > 0) then 
//│ 	let t⁰ = g((init⁰ - 1))
//│ 	in let h⁰ = 1
//│ 	in (fun a¹ -> primitive⁰(h⁰, primitive⁰(t⁰((a¹ + 1))), a¹)) else (fun a² -> primitive⁰(a²))
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ primitive⁰(g(42, 0))
//│ def f(xs⁰, a⁰) = primitive⁰(xs⁰(a⁰))
//│ def g(init⁰, _lh_popOutId_0⁰) = if (init⁰ > 0) then 
//│ 	let t⁰ = g((init⁰ - 1))
//│ 	in let h⁰ = 1
//│ 	in primitive⁰(h⁰, primitive⁰(t⁰((_lh_popOutId_0⁰ + 1))), _lh_popOutId_0⁰) else primitive⁰(_lh_popOutId_0⁰)
//│ <<<<<<< after floating out <<<<<<<


// TODO: why '54_callres
_LUMBERHACK_EVAL
fun f(xs, a) = primitive(
  if xs is
    C(h, t) then primitive(h)(t)(a)
    N then primitive(a)
)
fun g(init) = if init > 0
  then C(1, C(2, g(init - 1)))
  else N
f(g(42))(0)
//│ |_LUMBERHACK_EVAL|↵|#fun| |f|(|xs|,| |a|)| |#=| |primitive|(|→|#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |primitive|(|h|)|(|t|)|(|a|)|↵|N| |#then| |primitive|(|a|)|←|←|↵|)|↵|#fun| |g|(|init|)| |#=| |#if| |init| |>| |0|→|#then| |C|(|1|,| |C|(|2|,| |g|(|init| |-| |1|)|)|)|↵|#else| |N|←|↵|f|(|g|(|42|)|)|(|0|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun f = xs, a, => primitive (if xs is ‹(C (h, t,)) then primitive (h,) (t,) (a,); (N) then primitive (a,)›,); fun g = init, => if (> (init,) (0,)) then C (1, C (2, g (- (init,) (1,),),),) else N; f (g (42,),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ f^36(g^37(42), 0)
//│ def f(xs⁰, a⁰) = primitive⁰(case xs⁰ of {
//│ 	C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a⁰)
//│ 	| N  => primitive⁰(a⁰)})
//│ def g(init⁰) = if (init⁰ > 0) then [C 1 [C 2 g^24((init⁰ - 1))]] else [N]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ primitive⁰(primitive⁰(1, [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 0))
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 1 [C 2 g((init⁰ - 1))]]: 32 --->
//│ 	NoCons
//│ 	case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a⁰) | N  => primitive⁰(a⁰)}: 13
//│ [N]: 33 --->
//│ 	NoCons
//│ 	case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a⁰) | N  => primitive⁰(a⁰)}: 13
//│ ------------------
//│ case xs⁰ of {C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a⁰) | N  => primitive⁰(a⁰)}: 13 --->
//│ 	[C 1 [C 2 g((init⁰ - 1))]]: 32
//│ 	[N]: 33
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ f(g(42), 0)
//│ def f(xs¹, a¹) = primitive⁰(case xs¹ of {
//│ 	C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a¹)
//│ 	| N  => primitive⁰(a¹)})
//│ def g(init¹) = if (init¹ > 0) then [C 1 [C 2 g((init¹ - 1))]] else [N]
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ primitive⁰(primitive⁰(1, [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [C 1 [C 2 [N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 0))
//│ <<<<<<< evaluate <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ 
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ 
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ f(g(42), 0)
//│ def f(xs⁰, a⁰) = primitive⁰(case xs⁰ of {
//│ 	C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a⁰)
//│ 	| N  => primitive⁰(a⁰)})
//│ def g(init⁰) = if (init⁰ > 0) then [C 1 [C 2 g((init⁰ - 1))]] else [N]
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ f(g(42), 0)
//│ def f(xs⁰, a⁰) = primitive⁰(case xs⁰ of {
//│ 	C h⁰ t⁰ => primitive⁰(h⁰, t⁰, a⁰)
//│ 	| N  => primitive⁰(a⁰)})
//│ def g(init⁰) = if (init⁰ > 0) then [C 1 [C 2 g((init⁰ - 1))]] else [N]
//│ <<<<<<< after floating out <<<<<<<



