:NewParser
:ParseOnly


fun last(xs) = if xs is
  C(h, t) then if t is
    C(hh, tt) then last(C(hh, tt))
    N then Some(h)
  N then None
last(C(1, C(2, N)))
//│ |#fun| |last|(|xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |#if| |t| |is|→|C|(|hh|,| |tt|)| |#then| |last|(|C|(|hh|,| |tt|)|)|↵|N| |#then| |Some|(|h|)|←|↵|N| |#then| |None|←|↵|last|(|C|(|1|,| |C|(|2|,| |N|)|)|)|
//│ Parsed: {fun last = xs, => if xs is ‹(C (h, t,)) then if t is ‹(C (hh, tt,)) then last (C (hh, tt,),); (N) then Some (h,)›; (N) then None›; last (C (1, C (2, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ last^14([C 1 [C 2 [N]]])
//│ def last(xs⁰) = case xs⁰ of {
//│ 	C h⁰ t⁰ => case t⁰ of {
//│ 		C hh⁰ tt⁰ => last^3([C hh⁰ tt⁰])
//│ 		| N  => [Some h⁰]}
//│ 	| N  => [None]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C hh⁰ tt⁰]: 6 --->
//│ 	case xs⁰ of {C h⁰ t⁰ => case t⁰ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h⁰]} | N  => [None]}: 12
//│ [N]: 17 --->
//│ 	case t⁰ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h⁰]}: 10
//│ [C 2 [N]]: 18 --->
//│ 	case t⁰ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h⁰]}: 10
//│ [C 1 [C 2 [N]]]: 19 --->
//│ 	case xs⁰ of {C h⁰ t⁰ => case t⁰ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h⁰]} | N  => [None]}: 12
//│ ------------------
//│ case t⁰ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h⁰]}: 10 --->
//│ 	[N]: 17
//│ 	[C 2 [N]]: 18
//│ case xs⁰ of {C h⁰ t⁰ => case t⁰ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h⁰]} | N  => [None]}: 12 --->
//│ 	[C hh⁰ tt⁰]: 6
//│ 	[C 1 [C 2 [N]]]: 19
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 17 --->
//│ 	case t⁰ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h⁰]}: 10
//│ [C 2 [N]]: 18 --->
//│ 	case t⁰ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h⁰]}: 10
//│ ------------------
//│ case t⁰ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h⁰]}: 10 --->
//│ 	[N]: 17
//│ 	[C 2 [N]]: 18
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ last([C 1 
//│ 	let tt¹ = (fun h² -> [Some h²])
//│ 	in let hh¹ = 2
//│ 	in (fun h¹ -> last([C hh¹ tt¹]))])
//│ def last(xs¹) = case xs¹ of {
//│ 	C h⁰ t⁰ => t⁰(h⁰)
//│ 	| N  => [None]}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ last
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ 
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ case [C 1 
//│ 	let tt⁰ = (fun h⁰ -> [Some h⁰])
//│ 	in let hh⁰ = 2
//│ 	in (fun h¹ -> case [C hh⁰ tt⁰] of {
//│ 		C h² t⁰ => t⁰(h²)
//│ 		| N  => [None]})] of {
//│ 	C h³ t¹ => t¹(h³)
//│ 	| N  => [None]}
//│ def last(xs⁰) = case xs⁰ of {
//│ 	C h⁴ t² => t²(h⁴)
//│ 	| N  => [None]}
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ case [C 1 
//│ 	let tt⁰ = (fun h⁰ -> [Some h⁰])
//│ 	in let hh⁰ = 2
//│ 	in (fun h¹ -> case [C hh⁰ tt⁰] of {
//│ 		C h² t⁰ => t⁰(h²)
//│ 		| N  => [None]})] of {
//│ 	C h³ t¹ => t¹(h³)
//│ 	| N  => [None]}
//│ def last(xs⁰) = case xs⁰ of {
//│ 	C h⁴ t² => t²(h⁴)
//│ 	| N  => [None]}
//│ <<<<<<< after floating out <<<<<<<

fun last(xs) = if xs is
  C(h, t) then if t is
    C(hh, tt) then last(C(hh, tt))
    N then Some(h)
  N then None
last(primitive)
//│ |#fun| |last|(|xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |#if| |t| |is|→|C|(|hh|,| |tt|)| |#then| |last|(|C|(|hh|,| |tt|)|)|↵|N| |#then| |Some|(|h|)|←|↵|N| |#then| |None|←|↵|last|(|primitive|)|
//│ Parsed: {fun last = xs, => if xs is ‹(C (h, t,)) then if t is ‹(C (hh, tt,)) then last (C (hh, tt,),); (N) then Some (h,)›; (N) then None›; last (primitive,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ last^14(primitive⁰)
//│ def last(xs⁰) = case xs⁰ of {
//│ 	C h⁰ t⁰ => case t⁰ of {
//│ 		C hh⁰ tt⁰ => last^3([C hh⁰ tt⁰])
//│ 		| N  => [Some h⁰]}
//│ 	| N  => [None]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C hh⁰ tt⁰]: 6 --->
//│ 	case xs⁰ of {C h⁰ t⁰ => case t⁰ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h⁰]} | N  => [None]}: 12
//│ ------------------
//│ case xs⁰ of {C h⁰ t⁰ => case t⁰ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h⁰]} | N  => [None]}: 12 --->
//│ 	[C hh⁰ tt⁰]: 6
//│ 	NoProd
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ last(primitive⁰)
//│ def last(xs¹) = case xs¹ of {
//│ 	C h⁰ t⁰ => case t⁰ of {
//│ 		C hh⁰ tt⁰ => last([C hh⁰ tt⁰])
//│ 		| N  => [Some h⁰]}
//│ 	| N  => [None]}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ 
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ 
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ last(primitive⁰)
//│ def last(xs⁰) = case xs⁰ of {
//│ 	C h⁰ t⁰ => case t⁰ of {
//│ 		C hh⁰ tt⁰ => last([C hh⁰ tt⁰])
//│ 		| N  => [Some h⁰]}
//│ 	| N  => [None]}
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ last(primitive⁰)
//│ def last(xs⁰) = case xs⁰ of {
//│ 	C h⁰ t⁰ => case t⁰ of {
//│ 		C hh⁰ tt⁰ => last([C hh⁰ tt⁰])
//│ 		| N  => [Some h⁰]}
//│ 	| N  => [None]}
//│ <<<<<<< after floating out <<<<<<<


fun map(ls, f) = if ls is
  C(h, t) then C(f(h), map(t, f))
  N then N
fun last(xs) = if xs is
  C(h, t) then if t is
    C(hh, tt) then last(C(hh, tt))
    N then Some(h)
  N then None
last(map(primitive, primitive))
//│ |#fun| |map|(|ls|,| |f|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|t|,| |f|)|)|↵|N| |#then| |N|←|↵|#fun| |last|(|xs|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |#if| |t| |is|→|C|(|hh|,| |tt|)| |#then| |last|(|C|(|hh|,| |tt|)|)|↵|N| |#then| |Some|(|h|)|←|↵|N| |#then| |None|←|↵|last|(|map|(|primitive|,| |primitive|)|)|
//│ Parsed: {fun map = ls, f, => if ls is ‹(C (h, t,)) then C (f (h,), map (t, f,),); (N) then N›; fun last = xs, => if xs is ‹(C (h, t,)) then if t is ‹(C (hh, tt,)) then last (C (hh, tt,),); (N) then Some (h,)›; (N) then None›; last (map (primitive, primitive,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ last^28(map^29(primitive⁰, primitive⁰))
//│ def last(xs⁰) = case xs⁰ of {
//│ 	C h¹ t¹ => case t¹ of {
//│ 		C hh⁰ tt⁰ => last^17([C hh⁰ tt⁰])
//│ 		| N  => [Some h¹]}
//│ 	| N  => [None]}
//│ def map(ls⁰, f⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map^5(t⁰, f⁰)]
//│ 	| N  => [N]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C f⁰(h⁰) map(t⁰, f⁰)]: 10 --->
//│ 	case t¹ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h¹]}: 24
//│ 	case xs⁰ of {C h¹ t¹ => case t¹ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h¹]} | N  => [None]}: 26
//│ [N]: 11 --->
//│ 	case t¹ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h¹]}: 24
//│ 	case xs⁰ of {C h¹ t¹ => case t¹ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h¹]} | N  => [None]}: 26
//│ [C hh⁰ tt⁰]: 20 --->
//│ 	case xs⁰ of {C h¹ t¹ => case t¹ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h¹]} | N  => [None]}: 26
//│ ------------------
//│ case t¹ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h¹]}: 24 --->
//│ 	[C f⁰(h⁰) map(t⁰, f⁰)]: 10
//│ 	[N]: 11
//│ case xs⁰ of {C h¹ t¹ => case t¹ of {C hh⁰ tt⁰ => last([C hh⁰ tt⁰]) | N  => [Some h¹]} | N  => [None]}: 26 --->
//│ 	[C f⁰(h⁰) map(t⁰, f⁰)]: 10
//│ 	[N]: 11
//│ 	[C hh⁰ tt⁰]: 20
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ last(map(primitive⁰, primitive⁰))
//│ def last(xs¹) = case xs¹ of {
//│ 	C h¹ t¹ => case t¹ of {
//│ 		C hh⁰ tt⁰ => last([C hh⁰ tt⁰])
//│ 		| N  => [Some h¹]}
//│ 	| N  => [None]}
//│ def map(ls¹, f¹) = case ls¹ of {
//│ 	C h⁰ t⁰ => [C f¹(h⁰) map(t⁰, f¹)]
//│ 	| N  => [N]}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ 
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ 
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ last(map(primitive⁰, primitive⁰))
//│ def last(xs⁰) = case xs⁰ of {
//│ 	C h¹ t¹ => case t¹ of {
//│ 		C hh⁰ tt⁰ => last([C hh⁰ tt⁰])
//│ 		| N  => [Some h¹]}
//│ 	| N  => [None]}
//│ def map(ls⁰, f⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map(t⁰, f⁰)]
//│ 	| N  => [N]}
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ last(map(primitive⁰, primitive⁰))
//│ def last(xs⁰) = case xs⁰ of {
//│ 	C h¹ t¹ => case t¹ of {
//│ 		C hh⁰ tt⁰ => last([C hh⁰ tt⁰])
//│ 		| N  => [Some h¹]}
//│ 	| N  => [None]}
//│ def map(ls⁰, f⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map(t⁰, f⁰)]
//│ 	| N  => [N]}
//│ <<<<<<< after floating out <<<<<<<
