:NewParser
:ParseOnly


:lhEval
// NOTE: sometimes the output program will be correct without adding Obj.magic
fun f(a, ret) = if a is
  A then b =>
    if b is
      B then ret
  AA then b => End2
f(A, ReturnValue, B)
//│ |#fun| |f|(|a|,| |ret|)| |#=| |#if| |a| |is|→|A| |#then| |b| |=>|→|#if| |b| |is|→|B| |#then| |ret|←|←|↵|AA| |#then| |b| |=>| |End2|←|↵|f|(|A|,| |ReturnValue|,| |B|)|
//│ Parsed: {fun f = a, ret, => if a is ‹(A) then b, => {if b is ‹(B) then ret›}; (AA) then b, => End2›; f (A, ReturnValue, B,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ f^11([A], [ReturnValue], [B])
//│ def f(a⁰, ret⁰) = case a⁰ of {
//│ 	A  => (fun b⁰ -> case b⁰ of {
//│ 		B  => ret⁰})
//│ 	| AA  => (fun b¹ -> [End2])}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [ReturnValue]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [f^11] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ f₀([A], [ReturnValue], [B])
//│ def f₀(a¹, ret¹) = 
//│ 	case a¹ of {
//│ 		A  => (fun b² -> case b² of {
//│ 			B  => ret¹})
//│ 		| AA  => (fun b³ -> [End2])}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [A]: 29 --->
//│ 	case a¹ of {A  => (fun b² -> case b² of {B  => ret¹}) | AA  => (fun b³ -> [End2])}: 25
//│ [B]: 33 --->
//│ 	case b² of {B  => ret¹}: 21
//│ ------------------
//│ case b² of {B  => ret¹}: 21 --->
//│ 	[B]: 33
//│ case a¹ of {A  => (fun b² -> case b² of {B  => ret¹}) | AA  => (fun b³ -> [End2])}: 25 --->
//│ 	[A]: 29
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [A]: 29 --->
//│ 	case a¹ of {A  => (fun b² -> case b² of {B  => ret¹}) | AA  => (fun b³ -> [End2])}: 25
//│ [B]: 33 --->
//│ 	case b² of {B  => ret¹}: 21
//│ ------------------
//│ case b² of {B  => ret¹}: 21 --->
//│ 	[B]: 33
//│ case a¹ of {A  => (fun b² -> case b² of {B  => ret¹}) | AA  => (fun b³ -> [End2])}: 25 --->
//│ 	[A]: 29
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ f₀((fun ret² -> (fun b⁴ -> b⁴(ret²))), [ReturnValue], (fun ret³ -> ret³))
//│ def f₀(a², ret⁴) = 
//│ 	a²(ret⁴)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [ReturnValue]
//│ <<<<<<< evaluate <<<<<<<

// NOTE: mlscript thinks this is ok, but not ocaml
:lhError
:lhGenOCaml
:d
fun f(a) = if True then C(0) else C(x => x)
f(0)
// // will need to be:
// ignore(f(0))
//│ |#fun| |f|(|a|)| |#=| |#if| |True| |#then| |C|(|0|)| |#else| |C|(|x| |=>| |x|)|↵|f|(|0|)|↵|/* // will need to be:*/|↵|/* ignore(f(0))*/|
//│ Parsed: {fun f = a, => if (True) then C (0,) else C (x, => x,); f (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ f^9(0)
//│ def f(a⁰) = if [True] then [C 0] else [C (fun x⁰ -> x⁰)]
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec f a_0 =
//│ 		  (if true then
//│ 		    (`C(0))
//│ 		  else
//│ 		    (`C((fun x_0 -> 
//│ 		      x_0))));;
//│ 		(f 0)
//│ 		....... ocaml repl result .......
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception:           Lines 5-6, characters 7-11:
//│ 5 | .......((fun x_0 -> 
//│ 6 |       x_0))....
//│ Error: This expression should not be a function, the expected type is int
//│ !!!!!!ERROR!!!!!!

// fun f(a) = if True then C(0) else Object.magic(C(x => x))
// f(0)



// TODO: investigate why the expander doesn't dup dropWhile, which causes its outer layer not to fuse
// reproduced as below
// ```
// fun c(x) = if x is
//   C(a) then c(a)
//   N then N
// c(C(C(C(N))))
// ```
// the fusion process if the `NoCons` does not block the fusion
// and the dropWhile gets duplicated as needed
// fun dropWhile(ls) = (if ls is
//   N then () => C(N)
//   C(t) then () => if True then dropWhile(t) else C(t))()
// dropWhile(C(N))
// -----------
// dropWhile'(ls) = ls ()
// dropWhile'(
//   let t = N
//   in () => if True then dropWhile(t) else C(t)
// )
// -----------
// dropWhile''(ls) = ls()
// dropWhile'(ls) = ls()
// dropWhile'(
//   let t = () => C(N)
//   in () => if True then dropWhile''(t) else C(t)
// )
:lhGenOCaml
:d
fun dropWhile(ls) = if ls is
  N then C(N)
  C(t) then if True then dropWhile(t) else C(t)
dropWhile(C(N))
//│ |#fun| |dropWhile|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |C|(|N|)|↵|C|(|t|)| |#then| |#if| |True| |#then| |dropWhile|(|t|)| |#else| |C|(|t|)|←|↵|dropWhile|(|C|(|N|)|)|
//│ Parsed: {fun dropWhile = ls, => if ls is ‹(N) then C (N,); (C (t,)) then if (True) then dropWhile (t,) else C (t,)›; dropWhile (C (N,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ dropWhile^13([C [N]])
//│ def dropWhile(ls⁰) = case ls⁰ of {
//│ 	N  => [C [N]]
//│ 	| C t⁰ => if [True] then dropWhile^5(t⁰) else [C t⁰]}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec dropWhile ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `N -> 
//│ 		      (`C((`N)))
//│ 		    | `C(t_0) -> 
//│ 		      (if true then
//│ 		        (dropWhile t_0)
//│ 		      else
//│ 		        (`C(t_0))));;
//│ 		(dropWhile (`C((`N))))
//│ 		....... ocaml repl result .......
//│ 		[ok]
//│ 		                val dropWhile : ([< `C of 'a | `N > `N ] as 'a) -> [> `C of 'a ] = <fun>
//│ 		....... ocaml repl result .......
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [dropWhile^13] (hopeless to continue)
//│ 	[dropWhile^13 · dropWhile^5] ---> [dropWhile^13] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ dropWhile₀([C [N]])
//│ def dropWhile₀(ls¹) = 
//│ 	case ls¹ of {
//│ 		N  => [C [N]]
//│ 		| C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 30 --->
//│ 	NoCons
//│ 	case ls¹ of {N  => [C [N]] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 27
//│ [C [N]]: 31 --->
//│ 	case ls¹ of {N  => [C [N]] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 27
//│ ------------------
//│ case ls¹ of {N  => [C [N]] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 27 --->
//│ 	[N]: 30
//│ 	[C [N]]: 31
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ dropWhile₀([C [N]])
//│ def dropWhile₀(ls²) = 
//│ 	case ls² of {
//│ 		N  => [C [N]]
//│ 		| C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ 
//│ >>>>>>>>>> deadcode elimination info >>>>>>>>>>
//│ dropWhile₀ :: 'dropWhile₀ <: [] ::: true
//│ [N] :: N ::: true
//│ [C [N]] :: C(N) ::: true
//│ dropWhile₀([C [N]]) :: '4_callres <: [] ::: true
//│ ls :: 'ls⁰ <: [] ::: true
//│ [N] :: N ::: true
//│ [C [N]] :: C(N) ::: true
//│ [True] :: True ::: true
//│ dropWhile₀ :: 'dropWhile₀ <: [] ::: true
//│ t :: 't⁰ <: [] ::: true
//│ dropWhile₀(t) :: '11_callres <: [] ::: true
//│ t :: 't⁰ <: [] ::: true
//│ [C t] :: C('t⁰) ::: true
//│ if [True] then dropWhile₀(t) else [C t] :: '14_ifres <: [] ::: true
//│ case ls of {N  => [C [N]] | C t => if [True] then dropWhile₀(t) else [C t]} :: '15_matchres <: [] ::: true
//│ (fun ls -> case ls of {N  => [C [N]] | C t => if [True] then dropWhile₀(t) else [C t]}) :: 'ls⁰ => '15_matchres ::: true
//│ <<<<<<<<<< deadcode elimination info <<<<<<<<<<
//│ cannot generate benchmark files: Internal Error: benchmark requires a method of name `testxxx` calling a value wrapped in `primId`
//│  and if there are manually fused benchmarks, there should be a call to `testManual`with exact the same parameter following the `testxxx`
//│ 
//│ let rec dropWhile_d0 ls_0 =
//│   (match ls_0 with
//│     | `N -> 
//│       (`C((`N)))
//│     | `C(t_0) -> 
//│       (if true then
//│         (dropWhile_d0 t_0)
//│       else
//│         (`C(t_0))));;
//│ (dropWhile_d0 (`C((`N))))
//│ 
//│ --------------- ocaml repl result -----------------
//│ [ok]
//│   - : [> `C of [ `C of 'a | `N ] as 'a ] = `C `N
//│ 
//│ --------------- ocaml repl result -----------------
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


:lhGenOCaml
:d
fun dropWhile(ls) = if ls is
  N then C(N)
  C(t) then if True then dropWhile(t) else C(t)
(x => 2)(dropWhile(C(N)))
//│ |#fun| |dropWhile|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |C|(|N|)|↵|C|(|t|)| |#then| |#if| |True| |#then| |dropWhile|(|t|)| |#else| |C|(|t|)|←|↵|(|x| |=>| |2|)|(|dropWhile|(|C|(|N|)|)|)|
//│ Parsed: {fun dropWhile = ls, => if ls is ‹(N) then C (N,); (C (t,)) then if (True) then dropWhile (t,) else C (t,)›; '(' x, => 2, ')' (dropWhile (C (N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (fun x⁰ -> 2)(dropWhile^15([C [N]]))
//│ def dropWhile(ls⁰) = case ls⁰ of {
//│ 	N  => [C [N]]
//│ 	| C t⁰ => if [True] then dropWhile^5(t⁰) else [C t⁰]}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec dropWhile ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `N -> 
//│ 		      (`C((`N)))
//│ 		    | `C(t_0) -> 
//│ 		      (if true then
//│ 		        (dropWhile t_0)
//│ 		      else
//│ 		        (`C(t_0))));;
//│ 		((fun x_0 -> 
//│ 		  2) (dropWhile (`C((`N)))))
//│ 		....... ocaml repl result .......
//│ 		[ok]
//│ 		                val dropWhile : ([< `C of 'a | `N > `N ] as 'a) -> [> `C of 'a ] = <fun>
//│ 		....... ocaml repl result .......
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [dropWhile^15] (hopeless to continue)
//│ 	[dropWhile^15 · dropWhile^5] ---> [dropWhile^15] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (fun x¹ -> 2)(dropWhile₀([C [N]]))
//│ def dropWhile₀(ls¹) = 
//│ 	case ls¹ of {
//│ 		N  => [C [N]]
//│ 		| C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 35 --->
//│ 	case ls¹ of {N  => [C [N]] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 30
//│ [C [N]]: 36 --->
//│ 	case ls¹ of {N  => [C [N]] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 30
//│ ------------------
//│ case ls¹ of {N  => [C [N]] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 30 --->
//│ 	[N]: 35
//│ 	[C [N]]: 36
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 35 --->
//│ 	case ls¹ of {N  => [C [N]] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 30
//│ [C [N]]: 36 --->
//│ 	case ls¹ of {N  => [C [N]] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 30
//│ ------------------
//│ case ls¹ of {N  => [C [N]] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 30 --->
//│ 	[N]: 35
//│ 	[C [N]]: 36
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (fun x² -> 2)(dropWhile₀(
//│ 	let t² = (fun _lh_dummy¹ -> [C [N]])
//│ 	in (fun _lh_dummy⁰ -> if [True] then dropWhile₀(t²) else [C t²])))
//│ def dropWhile₀(ls²) = 
//│ 	ls²(99)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ 
//│ >>>>>>>>>> deadcode elimination info >>>>>>>>>>
//│ 2 :: Int ::: false
//│ (fun x -> 2) :: 'x⁰ => Int ::: false
//│ dropWhile₀ :: 'dropWhile₀ <: ['t⁰ => '10_callres | '_lh_dummy¹ => '13_ifres => '16_callres] ::: false
//│ [N] :: N ::: true
//│ [C [N]] :: C(N) ::: true
//│ (fun _lh_dummy -> [C [N]]) :: '_lh_dummy⁰ => C(N) ::: false
//│ [True] :: True ::: false
//│ dropWhile₀ :: 'dropWhile₀ <: ['t⁰ => '10_callres | '_lh_dummy¹ => '13_ifres => '16_callres] ::: false
//│ t :: 't⁰ <: ['ls⁰] ::: false
//│ dropWhile₀(t) :: '10_callres <: ['13_ifres] ::: true
//│ t :: 't⁰ <: ['ls⁰] ::: false
//│ [C t] :: C('t⁰) ::: true
//│ if [True] then dropWhile₀(t) else [C t] :: '13_ifres <: ['20_callres] ::: true
//│ (fun _lh_dummy -> if [True] then dropWhile₀(t) else [C t]) :: '_lh_dummy¹ => '13_ifres ::: false
//│ let t = (fun _lh_dummy -> [C [N]])
//│ in (fun _lh_dummy -> if [True] then dropWhile₀(t) else [C t]) :: '_lh_dummy¹ => '13_ifres ::: false
//│ dropWhile₀(let t = (fun _lh_dummy -> [C [N]])
//│ in (fun _lh_dummy -> if [True] then dropWhile₀(t) else [C t])) :: '16_callres <: ['x⁰] ::: true
//│ (fun x -> 2)(dropWhile₀(let t = (fun _lh_dummy -> [C [N]])
//│ in (fun _lh_dummy -> if [True] then dropWhile₀(t) else [C t]))) :: '17_callres <: [NoCons] ::: false
//│ ls :: 'ls⁰ <: [Int => '20_callres] ::: false
//│ 99 :: Int ::: false
//│ ls(99) :: '20_callres <: ['10_callres | '16_callres] ::: true
//│ (fun ls -> ls(99)) :: 'ls⁰ => '20_callres ::: false
//│ <<<<<<<<<< deadcode elimination info <<<<<<<<<<
//│ cannot generate benchmark files: Internal Error: benchmark requires a method of name `testxxx` calling a value wrapped in `primId`
//│  and if there are manually fused benchmarks, there should be a call to `testManual`with exact the same parameter following the `testxxx`
//│ 
//│ let rec dropWhile_d0 ls_0 =
//│   (Obj.magic 99);;
//│ ((fun x_0 -> 
//│   2) (Obj.magic 99))
//│ 
//│ --------------- ocaml repl result -----------------
//│ [ok]
//│     - : int = 2
//│ 
//│ --------------- ocaml repl result -----------------
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

:lhGenOCaml
:d
fun dropWhile(ls) = if ls is
  N then N
  C(t) then if True then dropWhile(t) else C(t)
fun f(x) = Pair(f(C(N)), f(x))
f(dropWhile(C(N)))
//│ |#fun| |dropWhile|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |N|↵|C|(|t|)| |#then| |#if| |True| |#then| |dropWhile|(|t|)| |#else| |C|(|t|)|←|↵|#fun| |f|(|x|)| |#=| |Pair|(|f|(|C|(|N|)|)|,| |f|(|x|)|)|↵|f|(|dropWhile|(|C|(|N|)|)|)|
//│ Parsed: {fun dropWhile = ls, => if ls is ‹(N) then N; (C (t,)) then if (True) then dropWhile (t,) else C (t,)›; fun f = x, => Pair (f (C (N,),), f (x,),); f (dropWhile (C (N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ f^21(dropWhile^22([C [N]]))
//│ def dropWhile(ls⁰) = case ls⁰ of {
//│ 	N  => [N]
//│ 	| C t⁰ => if [True] then dropWhile^4(t⁰) else [C t⁰]}
//│ def f(x⁰) = [Pair f^12([C [N]]) f^16(x⁰)]
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec dropWhile ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `N -> 
//│ 		      (`N)
//│ 		    | `C(t_0) -> 
//│ 		      (if true then
//│ 		        (dropWhile t_0)
//│ 		      else
//│ 		        (`C(t_0))))
//│ 		and f x_0 =
//│ 		  (`Pair((f (`C((`N)))), (f x_0)));;
//│ 		(f (dropWhile (`C((`N)))))
//│ 		....... ocaml repl result .......
//│ 		[ok]
//│ 		                    val dropWhile : ([< `C of 'a | `N ] as 'a) -> [> `C of 'a | `N ] = <fun>
//│ 		val f : [> `C of [> `N ] ] -> ([> `Pair of 'a * 'a ] as 'a) = <fun>
//│ 		....... ocaml repl result .......
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [dropWhile^22] (hopeless to continue)
//│ 	[dropWhile^22 · dropWhile^4] ---> [dropWhile^22] (using original def)
//│ [f^21]
//│ 	[f^21 · f^12] ---> [f^21] (only one)
//│ 	[f^21 · f^16] ---> [f^21] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ f₀(dropWhile₀([C [N]]))
//│ def dropWhile₀(ls¹) = 
//│ 	case ls¹ of {
//│ 		N  => [N]
//│ 		| C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}
//│ def f₀(x¹) = 
//│ 	[Pair f₀([C [N]]) f₀(x¹)]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 49 --->
//│ 	case ls¹ of {N  => [N] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 36
//│ [C [N]]: 50 --->
//│ 	case ls¹ of {N  => [N] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 36
//│ ------------------
//│ case ls¹ of {N  => [N] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 36 --->
//│ 	[N]: 49
//│ 	[C [N]]: 50
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 49 --->
//│ 	case ls¹ of {N  => [N] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 36
//│ [C [N]]: 50 --->
//│ 	case ls¹ of {N  => [N] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 36
//│ ------------------
//│ case ls¹ of {N  => [N] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 36 --->
//│ 	[N]: 49
//│ 	[C [N]]: 50
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ f₀(dropWhile₀(
//│ 	let t² = (fun _lh_dummy¹ -> [N])
//│ 	in (fun _lh_dummy⁰ -> if [True] then dropWhile₀(t²) else [C t²])))
//│ def dropWhile₀(ls²) = 
//│ 	ls²(99)
//│ def f₀(x²) = 
//│ 	[Pair f₀([C [N]]) f₀(x²)]
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ 
//│ >>>>>>>>>> deadcode elimination info >>>>>>>>>>
//│ f₀ :: 'f₀ <: ['14_callres => '15_callres | C(N) => '23_callres | 'x⁰ => '26_callres] ::: false
//│ dropWhile₀ :: 'dropWhile₀ <: ['t⁰ => '8_callres | '_lh_dummy¹ => '11_ifres => '14_callres] ::: false
//│ [N] :: N ::: true
//│ (fun _lh_dummy -> [N]) :: '_lh_dummy⁰ => N ::: false
//│ [True] :: True ::: false
//│ dropWhile₀ :: 'dropWhile₀ <: ['t⁰ => '8_callres | '_lh_dummy¹ => '11_ifres => '14_callres] ::: false
//│ t :: 't⁰ <: ['ls⁰] ::: false
//│ dropWhile₀(t) :: '8_callres <: ['11_ifres] ::: true
//│ t :: 't⁰ <: ['ls⁰] ::: false
//│ [C t] :: C('t⁰) ::: true
//│ if [True] then dropWhile₀(t) else [C t] :: '11_ifres <: ['18_callres] ::: true
//│ (fun _lh_dummy -> if [True] then dropWhile₀(t) else [C t]) :: '_lh_dummy¹ => '11_ifres ::: false
//│ let t = (fun _lh_dummy -> [N])
//│ in (fun _lh_dummy -> if [True] then dropWhile₀(t) else [C t]) :: '_lh_dummy¹ => '11_ifres ::: false
//│ dropWhile₀(let t = (fun _lh_dummy -> [N])
//│ in (fun _lh_dummy -> if [True] then dropWhile₀(t) else [C t])) :: '14_callres <: ['x⁰] ::: true
//│ f₀(dropWhile₀(let t = (fun _lh_dummy -> [N])
//│ in (fun _lh_dummy -> if [True] then dropWhile₀(t) else [C t]))) :: '15_callres <: [NoCons] ::: false
//│ ls :: 'ls⁰ <: [Int => '18_callres] ::: false
//│ 99 :: Int ::: false
//│ ls(99) :: '18_callres <: ['8_callres | '14_callres] ::: true
//│ (fun ls -> ls(99)) :: 'ls⁰ => '18_callres ::: false
//│ f₀ :: 'f₀ <: ['14_callres => '15_callres | C(N) => '23_callres | 'x⁰ => '26_callres] ::: false
//│ [N] :: N ::: true
//│ [C [N]] :: C(N) ::: true
//│ f₀([C [N]]) :: '23_callres <: [NoCons] ::: false
//│ f₀ :: 'f₀ <: ['14_callres => '15_callres | C(N) => '23_callres | 'x⁰ => '26_callres] ::: false
//│ x :: 'x⁰ <: [] ::: true
//│ f₀(x) :: '26_callres <: [NoCons] ::: false
//│ [Pair f₀([C [N]]) f₀(x)] :: Pair('23_callres, '26_callres) ::: false
//│ (fun x -> [Pair f₀([C [N]]) f₀(x)]) :: 'x⁰ => Pair('23_callres, '26_callres) ::: false
//│ <<<<<<<<<< deadcode elimination info <<<<<<<<<<
//│ cannot generate benchmark files: Internal Error: benchmark requires a method of name `testxxx` calling a value wrapped in `primId`
//│  and if there are manually fused benchmarks, there should be a call to `testManual`with exact the same parameter following the `testxxx`
//│ 
//│ let rec dropWhile_d0 ls_0 =
//│   (Obj.magic 99)
//│ and f_d0 x_0 =
//│   (`Pair((f_d0 (Obj.magic 99)), (f_d0 (Obj.magic 99))));;
//│ (f_d0 (Obj.magic 99))
//│ 
//│ --------------- ocaml repl result -----------------
//│ [ok]
//│   Stack overflow during evaluation (looping recursion?).
//│ 
//│ --------------- ocaml repl result -----------------
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


:lhGenOCaml
:d
fun dropWhile(ls) = if ls is
  N then N
  C(t) then if True then dropWhile(t) else C(t)
fun f(x) =
  let x = f(C(N))
  if x is
    C(a) then N
    N then f(x)
f(dropWhile(C(N)))
//│ |#fun| |dropWhile|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |N|↵|C|(|t|)| |#then| |#if| |True| |#then| |dropWhile|(|t|)| |#else| |C|(|t|)|←|↵|#fun| |f|(|x|)| |#=|→|#let| |x| |#=| |f|(|C|(|N|)|)|↵|#if| |x| |is|→|C|(|a|)| |#then| |N|↵|N| |#then| |f|(|x|)|←|←|↵|f|(|dropWhile|(|C|(|N|)|)|)|
//│ Parsed: {fun dropWhile = ls, => if ls is ‹(N) then N; (C (t,)) then if (True) then dropWhile (t,) else C (t,)›; fun f = x, => {let x = f (C (N,),); if x is ‹(C (a,)) then N; (N) then f (x,)›}; f (dropWhile (C (N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ f^24(dropWhile^25([C [N]]))
//│ def dropWhile(ls⁰) = case ls⁰ of {
//│ 	N  => [N]
//│ 	| C t⁰ => if [True] then dropWhile^4(t⁰) else [C t⁰]}
//│ def f(x⁰) = 
//│ 	let x¹ = f^12([C [N]])
//│ 	in case x¹ of {
//│ 		C a⁰ => [N]
//│ 		| N  => f^18(x¹)}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec dropWhile ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `N -> 
//│ 		      (`N)
//│ 		    | `C(t_0) -> 
//│ 		      (if true then
//│ 		        (dropWhile t_0)
//│ 		      else
//│ 		        (`C(t_0))))
//│ 		and f x_0 =
//│ 		  (let rec x_1 = (f (`C((`N)))) in
//│ 		    (match x_1 with
//│ 		      | `C(a_0) -> 
//│ 		        (`N)
//│ 		      | `N -> 
//│ 		        (f x_1)));;
//│ 		(f (dropWhile (`C((`N)))))
//│ 		....... ocaml repl result .......
//│ 		[ok]
//│ 		                              val dropWhile : ([< `C of 'a | `N ] as 'a) -> [> `C of 'a | `N ] = <fun>
//│ 		val f : [ `C of [> `N ] as 'a | `N ] -> [ `C of 'a | `N ] = <fun>
//│ 		....... ocaml repl result .......
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [dropWhile^25] (hopeless to continue)
//│ 	[dropWhile^25 · dropWhile^4] ---> [dropWhile^25] (using original def)
//│ [f^24] (hopeless to continue)
//│ 	[f^24 · f^12] ---> [f^24] (using original def)
//│ 	[f^24 · f^18] ---> [f^24] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ f₀(dropWhile₀([C [N]]))
//│ def dropWhile₀(ls¹) = 
//│ 	case ls¹ of {
//│ 		N  => [N]
//│ 		| C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}
//│ def f₀(x²) = 
//│ 	let x³ = f₀([C [N]])
//│ 	in case x³ of {
//│ 		C a¹ => [N]
//│ 		| N  => f₀(x³)}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 35 --->
//│ 	NoCons
//│ 	case x³ of {C a¹ => [N] | N  => f₀(x³)}: 39
//│ [N]: 55 --->
//│ 	case ls¹ of {N  => [N] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 51
//│ [C [N]]: 56 --->
//│ 	case ls¹ of {N  => [N] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 51
//│ ------------------
//│ case x³ of {C a¹ => [N] | N  => f₀(x³)}: 39 --->
//│ 	[N]: 35
//│ case ls¹ of {N  => [N] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 51 --->
//│ 	[N]: 55
//│ 	[C [N]]: 56
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 55 --->
//│ 	case ls¹ of {N  => [N] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 51
//│ [C [N]]: 56 --->
//│ 	case ls¹ of {N  => [N] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 51
//│ ------------------
//│ case ls¹ of {N  => [N] | C t¹ => if [True] then dropWhile₀(t¹) else [C t¹]}: 51 --->
//│ 	[N]: 55
//│ 	[C [N]]: 56
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ f₀(dropWhile₀(
//│ 	let t² = (fun _lh_dummy¹ -> [N])
//│ 	in (fun _lh_dummy⁰ -> if [True] then dropWhile₀(t²) else [C t²])))
//│ def dropWhile₀(ls²) = 
//│ 	ls²(99)
//│ def f₀(x⁴) = 
//│ 	let x⁵ = f₀([C [N]])
//│ 	in case x⁵ of {
//│ 		C a¹ => [N]
//│ 		| N  => f₀(x⁵)}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ 
//│ >>>>>>>>>> deadcode elimination info >>>>>>>>>>
//│ f₀ :: 'f₀ <: ['14_callres => '15_callres | C(N) => '19_callres | 'x¹ => '24_callres] ::: false
//│ dropWhile₀ :: 'dropWhile₀ <: ['t⁰ => '8_callres | '_lh_dummy¹ => '11_ifres => '14_callres] ::: false
//│ [N] :: N ::: true
//│ (fun _lh_dummy -> [N]) :: '_lh_dummy⁰ => N ::: false
//│ [True] :: True ::: false
//│ dropWhile₀ :: 'dropWhile₀ <: ['t⁰ => '8_callres | '_lh_dummy¹ => '11_ifres => '14_callres] ::: false
//│ t :: 't⁰ <: ['ls⁰] ::: false
//│ dropWhile₀(t) :: '8_callres <: ['11_ifres] ::: true
//│ t :: 't⁰ <: ['ls⁰] ::: false
//│ [C t] :: C('t⁰) ::: true
//│ if [True] then dropWhile₀(t) else [C t] :: '11_ifres <: ['30_callres] ::: true
//│ (fun _lh_dummy -> if [True] then dropWhile₀(t) else [C t]) :: '_lh_dummy¹ => '11_ifres ::: false
//│ let t = (fun _lh_dummy -> [N])
//│ in (fun _lh_dummy -> if [True] then dropWhile₀(t) else [C t]) :: '_lh_dummy¹ => '11_ifres ::: false
//│ dropWhile₀(let t = (fun _lh_dummy -> [N])
//│ in (fun _lh_dummy -> if [True] then dropWhile₀(t) else [C t])) :: '14_callres <: ['x⁰] ::: true
//│ f₀(dropWhile₀(let t = (fun _lh_dummy -> [N])
//│ in (fun _lh_dummy -> if [True] then dropWhile₀(t) else [C t]))) :: '15_callres <: [NoCons] ::: false
//│ f₀ :: 'f₀ <: ['14_callres => '15_callres | C(N) => '19_callres | 'x¹ => '24_callres] ::: false
//│ [N] :: N ::: true
//│ [C [N]] :: C(N) ::: true
//│ f₀([C [N]]) :: '19_callres <: ['x¹] ::: false
//│ x :: 'x¹ <: ['x⁰ | Destruct(C('a⁰), N)] ::: false
//│ [N] :: N ::: false
//│ f₀ :: 'f₀ <: ['14_callres => '15_callres | C(N) => '19_callres | 'x¹ => '24_callres] ::: false
//│ x :: 'x¹ <: ['x⁰ | Destruct(C('a⁰), N)] ::: false
//│ f₀(x) :: '24_callres <: ['25_matchres] ::: false
//│ case x of {C a => [N] | N  => f₀(x)} :: '25_matchres <: ['15_callres | '19_callres | '24_callres] ::: false
//│ let x = f₀([C [N]])
//│ in case x of {C a => [N] | N  => f₀(x)} :: '25_matchres <: ['15_callres | '19_callres | '24_callres] ::: false
//│ (fun x -> let x = f₀([C [N]])
//│ in case x of {C a => [N] | N  => f₀(x)}) :: 'x⁰ => '25_matchres ::: false
//│ ls :: 'ls⁰ <: [Int => '30_callres] ::: false
//│ 99 :: Int ::: false
//│ ls(99) :: '30_callres <: ['8_callres | '14_callres] ::: true
//│ (fun ls -> ls(99)) :: 'ls⁰ => '30_callres ::: false
//│ <<<<<<<<<< deadcode elimination info <<<<<<<<<<
//│ cannot generate benchmark files: Internal Error: benchmark requires a method of name `testxxx` calling a value wrapped in `primId`
//│  and if there are manually fused benchmarks, there should be a call to `testManual`with exact the same parameter following the `testxxx`
//│ 
//│ let rec dropWhile_d0 ls_0 =
//│   (Obj.magic 99)
//│ and f_d0 x_0 =
//│   (let rec x_1 = (f_d0 (Obj.magic 99)) in
//│     (match x_1 with
//│       | `C(a_0) -> 
//│         (`N)
//│       | `N -> 
//│         (f_d0 x_1)));;
//│ (f_d0 (Obj.magic 99))
//│ 
//│ --------------- ocaml repl result -----------------
//│ [ok]
//│   Stack overflow during evaluation (looping recursion?).
//│ 
//│ --------------- ocaml repl result -----------------
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


:lhGenOCaml
:lhNoIter
:d
fun break(ls) = if ls is
  N then
    let fst = N
    let snd = N
    C(fst, words1(snd))
  C(h,t) then
    let fst = N
    let snd = C(h,t)
    C(fst, words1(snd))
fun dropWhile(p, ls) = if ls is
  N then N
  C(h,t) then if p(h) then dropWhile(p, t) else C(h,t)
fun words0(ls) =
  let mident = dropWhile(x => False, ls)
  if mident is
    N then N
    _ then break(mident)
fun words1(ls) =
  let mident = dropWhile(x => False, ls)
  if mident is
    N then N
    _ then break(mident)
(x => 2)(words0)
//│ |#fun| |break|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then|→|#let| |fst| |#=| |N|↵|#let| |snd| |#=| |N|↵|C|(|fst|,| |words1|(|snd|)|)|←|↵|C|(|h|,|t|)| |#then|→|#let| |fst| |#=| |N|↵|#let| |snd| |#=| |C|(|h|,|t|)|↵|C|(|fst|,| |words1|(|snd|)|)|←|←|↵|#fun| |dropWhile|(|p|,| |ls|)| |#=| |#if| |ls| |is|→|N| |#then| |N|↵|C|(|h|,|t|)| |#then| |#if| |p|(|h|)| |#then| |dropWhile|(|p|,| |t|)| |#else| |C|(|h|,|t|)|←|↵|#fun| |words0|(|ls|)| |#=|→|#let| |mident| |#=| |dropWhile|(|x| |=>| |False|,| |ls|)|↵|#if| |mident| |is|→|N| |#then| |N|↵|_| |#then| |break|(|mident|)|←|←|↵|#fun| |words1|(|ls|)| |#=|→|#let| |mident| |#=| |dropWhile|(|x| |=>| |False|,| |ls|)|↵|#if| |mident| |is|→|N| |#then| |N|↵|_| |#then| |break|(|mident|)|←|←|↵|(|x| |=>| |2|)|(|words0|)|
//│ Parsed: {fun break = ls, => if ls is ‹(N) then {let fst = N; let snd = N; C (fst, words1 (snd,),)}; (C (h, t,)) then {let fst = N; let snd = C (h, t,); C (fst, words1 (snd,),)}›; fun dropWhile = p, ls, => if ls is ‹(N) then N; (C (h, t,)) then if (p (h,)) then dropWhile (p, t,) else C (h, t,)›; fun words0 = ls, => {let mident = dropWhile (x, => False, ls,); if mident is ‹(N) then N; (_) then break (mident,)›}; fun words1 = ls, => {let mident = dropWhile (x, => False, ls,); if mident is ‹(N) then N; (_) then break (mident,)›}; '(' x, => 2, ')' (words0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (fun x² -> 2)(words0^71)
//│ def break(ls⁰) = case ls⁰ of {
//│ 	N  => 
//│ 		let fst⁰ = [N]
//│ 		in let snd⁰ = [N]
//│ 		in [C fst⁰ words1^5(snd⁰)]
//│ 	| C h⁰ t⁰ => 
//│ 		let fst¹ = [N]
//│ 		in let snd¹ = [C h⁰ t⁰]
//│ 		in [C fst¹ words1^16(snd¹)]}
//│ def dropWhile(p⁰, ls¹) = case ls¹ of {
//│ 	N  => [N]
//│ 	| C h¹ t¹ => if p⁰(h¹) then dropWhile^29(p⁰, t¹) else [C h¹ t¹]}
//│ def words0(ls²) = 
//│ 	let mident⁰ = dropWhile^41((fun x⁰ -> [False]), ls²)
//│ 	in case mident⁰ of {
//│ 		N  => [N]
//│ 		| _  => break^49(mident⁰)}
//│ def words1(ls³) = 
//│ 	let mident¹ = dropWhile^55((fun x¹ -> [False]), ls³)
//│ 	in case mident¹ of {
//│ 		N  => [N]
//│ 		| _  => break^63(mident¹)}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec break ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `N -> 
//│ 		      (let rec fst_0 = (`N) in
//│ 		        (let rec snd_0 = (`N) in
//│ 		          (`C(fst_0, (words1 snd_0)))))
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (let rec fst_1 = (`N) in
//│ 		        (let rec snd_1 = (`C(h_0, t_0)) in
//│ 		          (`C(fst_1, (words1 snd_1))))))
//│ 		and dropWhile p_0 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `N -> 
//│ 		      (`N)
//│ 		    | `C(h_1, t_1) -> 
//│ 		      (if (p_0 h_1) then
//│ 		        ((dropWhile p_0) t_1)
//│ 		      else
//│ 		        (`C(h_1, t_1))))
//│ 		and words0 ls_2 =
//│ 		  (let rec mident_0 = ((dropWhile (fun x_0 -> 
//│ 		    false)) ls_2) in
//│ 		    (match mident_0 with
//│ 		      | `N -> 
//│ 		        (`N)
//│ 		      | _ -> 
//│ 		        (break mident_0)))
//│ 		and words1 ls_3 =
//│ 		  (let rec mident_1 = ((dropWhile (fun x_1 -> 
//│ 		    false)) ls_3) in
//│ 		    (match mident_1 with
//│ 		      | `N -> 
//│ 		        (`N)
//│ 		      | _ -> 
//│ 		        (break mident_1)));;
//│ 		((fun x_2 -> 
//│ 		  2) words0)
//│ 		....... ocaml repl result .......
//│ 		[ok]
//│ 		                                                                    val break :
//│ 		  [ `C of 'a * ([ `C of 'a * 'b | `N ] as 'b) | `N ] ->
//│ 		  ([> `C of [> `N ] * 'c | `N ] as 'c) = <fun>
//│ 		val dropWhile :
//│ 		  ('a -> bool) -> ([ `C of 'a * 'b | `N ] as 'b) -> [ `C of 'a * 'b | `N ] =
//│ 		  <fun>
//│ 		val words0 :
//│ 		  ([ `C of 'b * 'a | `N ] as 'a) -> ([> `C of [> `N ] * 'c | `N ] as 'c) =
//│ 		  <fun>
//│ 		val words1 :
//│ 		  ([ `C of 'b * 'a | `N ] as 'a) -> ([> `C of [> `N ] * 'c | `N ] as 'c) =
//│ 		  <fun>
//│ 		....... ocaml repl result .......
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [words0^71] (hopeless to continue)
//│ 	[words0^71 · break^49] (using original def)
//│ 		[words0^71 · break^49 · words1^16] (using original def)
//│ 			[words0^71 · break^49 · words1^16 · break^63] ---> [words0^71 · break^49] (using original def)
//│ 			[words0^71 · break^49 · words1^16 · dropWhile^55] (using original def)
//│ 				[words0^71 · break^49 · words1^16 · dropWhile^55 · dropWhile^29] ---> [words0^71 · break^49 · words1^16 · dropWhile^55] (using original def)
//│ 		[words0^71 · break^49 · words1^5] (using original def)
//│ 			[words0^71 · break^49 · words1^5 · break^63] ---> [words0^71 · break^49] (using original def)
//│ 			[words0^71 · break^49 · words1^5 · dropWhile^55] (using original def)
//│ 				[words0^71 · break^49 · words1^5 · dropWhile^55 · dropWhile^29] ---> [words0^71 · break^49 · words1^5 · dropWhile^55] (using original def)
//│ 	[words0^71 · dropWhile^41] (using original def)
//│ 		[words0^71 · dropWhile^41 · dropWhile^29] ---> [words0^71 · dropWhile^41] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (fun x⁶ -> 2)(words0₀)
//│ def words0₀(ls⁴) = 
//│ 	let mident² = dropWhile₂((fun x³ -> [False]), ls⁴)
//│ 	in case mident² of {
//│ 		N  => [N]
//│ 		| _  => break₀(mident²)}
//│ 	where
//│ 	def break₀(ls⁸) = 
//│ 		case ls⁸ of {
//│ 			N  => 
//│ 				let fst² = [N]
//│ 				in let snd² = [N]
//│ 				in [C fst² words1₁(snd²)]
//│ 			| C h⁴ t⁴ => 
//│ 				let fst³ = [N]
//│ 				in let snd³ = [C h⁴ t⁴]
//│ 				in [C fst³ words1₀(snd³)]}
//│ 		where
//│ 		def words1₀(ls¹⁰) = 
//│ 			let mident⁴ = dropWhile₀((fun x⁵ -> [False]), ls¹⁰)
//│ 			in case mident⁴ of {
//│ 				N  => [N]
//│ 				| _  => break₀(mident⁴)}
//│ 			where
//│ 			def dropWhile₀(p³, ls⁹) = 
//│ 				case ls⁹ of {
//│ 					N  => [N]
//│ 					| C h⁵ t⁵ => if p³(h⁵) then dropWhile₀(p³, t⁵) else [C h⁵ t⁵]}
//│ 		def words1₁(ls⁵) = 
//│ 			let mident³ = dropWhile₁((fun x⁴ -> [False]), ls⁵)
//│ 			in case mident³ of {
//│ 				N  => [N]
//│ 				| _  => break₀(mident³)}
//│ 			where
//│ 			def dropWhile₁(p¹, ls⁶) = 
//│ 				case ls⁶ of {
//│ 					N  => [N]
//│ 					| C h² t² => if p¹(h²) then dropWhile₁(p¹, t²) else [C h² t²]}
//│ 	def dropWhile₂(p², ls⁷) = 
//│ 		case ls⁷ of {
//│ 			N  => [N]
//│ 			| C h³ t³ => if p²(h³) then dropWhile₂(p², t³) else [C h³ t³]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 102 --->
//│ 	case mident³ of {N  => [N] | _  => break₀(mident³)}: 98
//│ 	case ls⁸ of {N  => let fst² = [N]
//│ in let snd² = [N]
//│ in [C fst² words1₁(snd²)] | C h⁴ t⁴ => let fst³ = [N]
//│ in let snd³ = [C h⁴ t⁴]
//│ in [C fst³ words1₀(snd³)]}: 156
//│ [C h² t²]: 113 --->
//│ 	case mident³ of {N  => [N] | _  => break₀(mident³)}: 98
//│ 	case ls⁸ of {N  => let fst² = [N]
//│ in let snd² = [N]
//│ in [C fst² words1₁(snd²)] | C h⁴ t⁴ => let fst³ = [N]
//│ in let snd³ = [C h⁴ t⁴]
//│ in [C fst³ words1₀(snd³)]}: 156
//│ [N]: 119 --->
//│ 	case mident² of {N  => [N] | _  => break₀(mident²)}: 84
//│ 	case ls⁸ of {N  => let fst² = [N]
//│ in let snd² = [N]
//│ in [C fst² words1₁(snd²)] | C h⁴ t⁴ => let fst³ = [N]
//│ in let snd³ = [C h⁴ t⁴]
//│ in [C fst³ words1₀(snd³)]}: 156
//│ [C h³ t³]: 130 --->
//│ 	case mident² of {N  => [N] | _  => break₀(mident²)}: 84
//│ 	case ls⁸ of {N  => let fst² = [N]
//│ in let snd² = [N]
//│ in [C fst² words1₁(snd²)] | C h⁴ t⁴ => let fst³ = [N]
//│ in let snd³ = [C h⁴ t⁴]
//│ in [C fst³ words1₀(snd³)]}: 156
//│ [N]: 137 --->
//│ 	case ls⁶ of {N  => [N] | C h² t² => if p¹(h²) then dropWhile₁(p¹, t²) else [C h² t²]}: 115
//│ [C h⁴ t⁴]: 148 --->
//│ 	case ls⁹ of {N  => [N] | C h⁵ t⁵ => if p³(h⁵) then dropWhile₀(p³, t⁵) else [C h⁵ t⁵]}: 172
//│ [N]: 159 --->
//│ 	case ls⁸ of {N  => let fst² = [N]
//│ in let snd² = [N]
//│ in [C fst² words1₁(snd²)] | C h⁴ t⁴ => let fst³ = [N]
//│ in let snd³ = [C h⁴ t⁴]
//│ in [C fst³ words1₀(snd³)]}: 156
//│ 	case mident⁴ of {N  => [N] | _  => break₀(mident⁴)}: 186
//│ [C h⁵ t⁵]: 170 --->
//│ 	case ls⁸ of {N  => let fst² = [N]
//│ in let snd² = [N]
//│ in [C fst² words1₁(snd²)] | C h⁴ t⁴ => let fst³ = [N]
//│ in let snd³ = [C h⁴ t⁴]
//│ in [C fst³ words1₀(snd³)]}: 156
//│ 	case mident⁴ of {N  => [N] | _  => break₀(mident⁴)}: 186
//│ ------------------
//│ case mident² of {N  => [N] | _  => break₀(mident²)}: 84 --->
//│ 	[N]: 119
//│ 	[C h³ t³]: 130
//│ case mident³ of {N  => [N] | _  => break₀(mident³)}: 98 --->
//│ 	[N]: 102
//│ 	[C h² t²]: 113
//│ case ls⁶ of {N  => [N] | C h² t² => if p¹(h²) then dropWhile₁(p¹, t²) else [C h² t²]}: 115 --->
//│ 	[N]: 137
//│ case ls⁸ of {N  => let fst² = [N]
//│ in let snd² = [N]
//│ in [C fst² words1₁(snd²)] | C h⁴ t⁴ => let fst³ = [N]
//│ in let snd³ = [C h⁴ t⁴]
//│ in [C fst³ words1₀(snd³)]}: 156 --->
//│ 	[N]: 102
//│ 	[C h² t²]: 113
//│ 	[N]: 119
//│ 	[C h³ t³]: 130
//│ 	[N]: 159
//│ 	[C h⁵ t⁵]: 170
//│ case ls⁹ of {N  => [N] | C h⁵ t⁵ => if p³(h⁵) then dropWhile₀(p³, t⁵) else [C h⁵ t⁵]}: 172 --->
//│ 	[C h⁴ t⁴]: 148
//│ case mident⁴ of {N  => [N] | _  => break₀(mident⁴)}: 186 --->
//│ 	[N]: 159
//│ 	[C h⁵ t⁵]: 170
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 137 --->
//│ 	case ls⁶ of {N  => [N] | C h² t² => if p¹(h²) then dropWhile₁(p¹, t²) else [C h² t²]}: 115
//│ [C h⁴ t⁴]: 148 --->
//│ 	case ls⁹ of {N  => [N] | C h⁵ t⁵ => if p³(h⁵) then dropWhile₀(p³, t⁵) else [C h⁵ t⁵]}: 172
//│ ------------------
//│ case ls⁶ of {N  => [N] | C h² t² => if p¹(h²) then dropWhile₁(p¹, t²) else [C h² t²]}: 115 --->
//│ 	[N]: 137
//│ case ls⁹ of {N  => [N] | C h⁵ t⁵ => if p³(h⁵) then dropWhile₀(p³, t⁵) else [C h⁵ t⁵]}: 172 --->
//│ 	[C h⁴ t⁴]: 148
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (fun x⁷ -> 2)(words0₀)
//│ def words0₀(ls¹²) = 
//│ 	let mident⁶ = dropWhile₂((fun x⁹ -> [False]), ls¹²)
//│ 	in case mident⁶ of {
//│ 		N  => [N]
//│ 		| _  => break₀(mident⁶)}
//│ 	where
//│ 	def break₀(ls¹⁷) = 
//│ 		case ls¹⁷ of {
//│ 			N  => 
//│ 				let fst⁴ = [N]
//│ 				in let snd⁴ = (fun p⁷ -> [N])
//│ 				in [C fst⁴ words1₁(snd⁴)]
//│ 			| C h⁴ t⁴ => 
//│ 				let fst⁵ = [N]
//│ 				in let snd⁵ = 	
//│ 					let h⁶ = h⁴
//│ 					in let t⁶ = t⁴
//│ 					in (fun p⁸ -> if p⁸(h⁶) then dropWhile₀(p⁸, t⁶) else [C h⁶ t⁶])
//│ 				in [C fst⁵ words1₀(snd⁵)]}
//│ 		where
//│ 		def words1₀(ls¹⁴) = 
//│ 			let mident⁷ = dropWhile₀((fun x¹⁰ -> [False]), ls¹⁴)
//│ 			in case mident⁷ of {
//│ 				N  => [N]
//│ 				| _  => break₀(mident⁷)}
//│ 			where
//│ 			def dropWhile₀(p⁵, ls¹⁵) = 
//│ 				ls¹⁵(p⁵)
//│ 		def words1₁(ls¹¹) = 
//│ 			let mident⁵ = dropWhile₁((fun x⁸ -> [False]), ls¹¹)
//│ 			in case mident⁵ of {
//│ 				N  => [N]
//│ 				| _  => break₀(mident⁵)}
//│ 			where
//│ 			def dropWhile₁(p⁶, ls¹⁶) = 
//│ 				ls¹⁶(p⁶)
//│ 	def dropWhile₂(p⁴, ls¹³) = 
//│ 		case ls¹³ of {
//│ 			N  => [N]
//│ 			| C h³ t³ => if p⁴(h³) then dropWhile₂(p⁴, t³) else [C h³ t³]}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ 
//│ >>>>>>>>>> deadcode elimination info >>>>>>>>>>
//│ 2 :: Int ::: false
//│ (fun x -> 2) :: 'x⁰ => Int ::: true
//│ words0₀ :: 'words0₀ <: [] ::: true
//│ (fun x -> 2)(words0₀) :: '4_callres <: [] ::: true
//│ dropWhile₁ :: 'dropWhile₁ <: [] ::: true
//│ [False] :: False ::: true
//│ (fun x -> [False]) :: 'x¹ => False ::: true
//│ dropWhile₁((fun x -> [False])) :: '8_callres <: [] ::: true
//│ ls :: 'ls⁰ <: [] ::: true
//│ dropWhile₁((fun x -> [False]), ls) :: '10_callres <: [] ::: true
//│ mident :: 'mident⁰ <: [] ::: true
//│ [N] :: N ::: true
//│ break₀ :: 'break₀ <: [] ::: true
//│ mident :: 'mident⁰ <: [] ::: true
//│ break₀(mident) :: '15_callres <: [] ::: true
//│ case mident of {N  => [N] | _  => break₀(mident)} :: '16_matchres <: [] ::: true
//│ let mident = dropWhile₁((fun x -> [False]), ls)
//│ in case mident of {N  => [N] | _  => break₀(mident)} :: '16_matchres <: [] ::: true
//│ (fun ls -> let mident = dropWhile₁((fun x -> [False]), ls)
//│ in case mident of {N  => [N] | _  => break₀(mident)}) :: 'ls⁰ => '16_matchres ::: true
//│ dropWhile₂ :: 'dropWhile₂ <: [] ::: true
//│ [False] :: False ::: true
//│ (fun x -> [False]) :: 'x² => False ::: true
//│ dropWhile₂((fun x -> [False])) :: '22_callres <: [] ::: true
//│ ls :: 'ls¹ <: [] ::: true
//│ dropWhile₂((fun x -> [False]), ls) :: '24_callres <: [] ::: true
//│ mident :: 'mident¹ <: [] ::: true
//│ [N] :: N ::: true
//│ break₀ :: 'break₀ <: [] ::: true
//│ mident :: 'mident¹ <: [] ::: true
//│ break₀(mident) :: '29_callres <: [] ::: true
//│ case mident of {N  => [N] | _  => break₀(mident)} :: '30_matchres <: [] ::: true
//│ let mident = dropWhile₂((fun x -> [False]), ls)
//│ in case mident of {N  => [N] | _  => break₀(mident)} :: '30_matchres <: [] ::: true
//│ (fun ls -> let mident = dropWhile₂((fun x -> [False]), ls)
//│ in case mident of {N  => [N] | _  => break₀(mident)}) :: 'ls¹ => '30_matchres ::: true
//│ ls :: 'ls² <: [] ::: true
//│ [N] :: N ::: true
//│ p :: 'p⁰ <: [] ::: true
//│ h :: 'h⁰ <: [] ::: true
//│ p(h) :: '37_callres <: [] ::: true
//│ dropWhile₂ :: 'dropWhile₂ <: [] ::: true
//│ p :: 'p⁰ <: [] ::: true
//│ dropWhile₂(p) :: '40_callres <: [] ::: true
//│ t :: 't⁰ <: [] ::: true
//│ dropWhile₂(p, t) :: '42_callres <: [] ::: true
//│ h :: 'h⁰ <: [] ::: true
//│ t :: 't⁰ <: [] ::: true
//│ [C h t] :: C('h⁰, 't⁰) ::: true
//│ if p(h) then dropWhile₂(p, t) else [C h t] :: '46_ifres <: [] ::: true
//│ case ls of {N  => [N] | C h t => if p(h) then dropWhile₂(p, t) else [C h t]} :: '47_matchres <: [] ::: true
//│ (fun ls -> case ls of {N  => [N] | C h t => if p(h) then dropWhile₂(p, t) else [C h t]}) :: 'ls² => '47_matchres ::: true
//│ (fun p -> (fun ls -> case ls of {N  => [N] | C h t => if p(h) then dropWhile₂(p, t) else [C h t]})) :: 'p⁰ => 'ls² => '47_matchres ::: true
//│ dropWhile₀ :: 'dropWhile₀ <: [] ::: true
//│ [False] :: False ::: true
//│ (fun x -> [False]) :: 'x³ => False ::: true
//│ dropWhile₀((fun x -> [False])) :: '53_callres <: [] ::: true
//│ ls :: 'ls³ <: [] ::: true
//│ dropWhile₀((fun x -> [False]), ls) :: '55_callres <: [] ::: true
//│ mident :: 'mident² <: [] ::: true
//│ [N] :: N ::: true
//│ break₀ :: 'break₀ <: [] ::: true
//│ mident :: 'mident² <: [] ::: true
//│ break₀(mident) :: '60_callres <: [] ::: true
//│ case mident of {N  => [N] | _  => break₀(mident)} :: '61_matchres <: [] ::: true
//│ let mident = dropWhile₀((fun x -> [False]), ls)
//│ in case mident of {N  => [N] | _  => break₀(mident)} :: '61_matchres <: [] ::: true
//│ (fun ls -> let mident = dropWhile₀((fun x -> [False]), ls)
//│ in case mident of {N  => [N] | _  => break₀(mident)}) :: 'ls³ => '61_matchres ::: true
//│ ls :: 'ls⁴ <: [] ::: true
//│ p :: 'p¹ <: [] ::: true
//│ ls(p) :: '66_callres <: [] ::: true
//│ (fun ls -> ls(p)) :: 'ls⁴ => '66_callres ::: true
//│ (fun p -> (fun ls -> ls(p))) :: 'p¹ => 'ls⁴ => '66_callres ::: true
//│ ls :: 'ls⁵ <: [] ::: true
//│ p :: 'p² <: [] ::: true
//│ ls(p) :: '71_callres <: [] ::: true
//│ (fun ls -> ls(p)) :: 'ls⁵ => '71_callres ::: true
//│ (fun p -> (fun ls -> ls(p))) :: 'p² => 'ls⁵ => '71_callres ::: true
//│ ls :: 'ls⁶ <: [] ::: true
//│ [N] :: N ::: true
//│ [N] :: N ::: true
//│ (fun p -> [N]) :: 'p³ => N ::: true
//│ fst :: 'fst⁰ <: [] ::: true
//│ words1₁ :: 'words1₁ <: [] ::: true
//│ snd :: 'snd⁰ <: [] ::: true
//│ words1₁(snd) :: '81_callres <: [] ::: true
//│ [C fst words1₁(snd)] :: C('fst⁰, '81_callres) ::: true
//│ let snd = (fun p -> [N])
//│ in [C fst words1₁(snd)] :: C('fst⁰, '81_callres) ::: true
//│ let fst = [N]
//│ in let snd = (fun p -> [N])
//│ in [C fst words1₁(snd)] :: C('fst⁰, '81_callres) ::: true
//│ [N] :: N ::: true
//│ h :: 'h¹ <: [] ::: true
//│ t :: 't¹ <: [] ::: true
//│ p :: 'p⁴ <: [] ::: true
//│ h :: 'h² <: [] ::: true
//│ p(h) :: '90_callres <: [] ::: true
//│ dropWhile₀ :: 'dropWhile₀ <: [] ::: true
//│ p :: 'p⁴ <: [] ::: true
//│ dropWhile₀(p) :: '93_callres <: [] ::: true
//│ t :: 't² <: [] ::: true
//│ dropWhile₀(p, t) :: '95_callres <: [] ::: true
//│ h :: 'h² <: [] ::: true
//│ t :: 't² <: [] ::: true
//│ [C h t] :: C('h², 't²) ::: true
//│ if p(h) then dropWhile₀(p, t) else [C h t] :: '99_ifres <: [] ::: true
//│ (fun p -> if p(h) then dropWhile₀(p, t) else [C h t]) :: 'p⁴ => '99_ifres ::: true
//│ let t = t
//│ in (fun p -> if p(h) then dropWhile₀(p, t) else [C h t]) :: 'p⁴ => '99_ifres ::: true
//│ let h = h
//│ in let t = t
//│ in (fun p -> if p(h) then dropWhile₀(p, t) else [C h t]) :: 'p⁴ => '99_ifres ::: true
//│ fst :: 'fst¹ <: [] ::: true
//│ words1₀ :: 'words1₀ <: [] ::: true
//│ snd :: 'snd¹ <: [] ::: true
//│ words1₀(snd) :: '106_callres <: [] ::: true
//│ [C fst words1₀(snd)] :: C('fst¹, '106_callres) ::: true
//│ let snd = let h = h
//│ in let t = t
//│ in (fun p -> if p(h) then dropWhile₀(p, t) else [C h t])
//│ in [C fst words1₀(snd)] :: C('fst¹, '106_callres) ::: true
//│ let fst = [N]
//│ in let snd = let h = h
//│ in let t = t
//│ in (fun p -> if p(h) then dropWhile₀(p, t) else [C h t])
//│ in [C fst words1₀(snd)] :: C('fst¹, '106_callres) ::: true
//│ case ls of {N  => let fst = [N]
//│ in let snd = (fun p -> [N])
//│ in [C fst words1₁(snd)] | C h t => let fst = [N]
//│ in let snd = let h = h
//│ in let t = t
//│ in (fun p -> if p(h) then dropWhile₀(p, t) else [C h t])
//│ in [C fst words1₀(snd)]} :: '110_matchres <: [] ::: true
//│ (fun ls -> case ls of {N  => let fst = [N]
//│ in let snd = (fun p -> [N])
//│ in [C fst words1₁(snd)] | C h t => let fst = [N]
//│ in let snd = let h = h
//│ in let t = t
//│ in (fun p -> if p(h) then dropWhile₀(p, t) else [C h t])
//│ in [C fst words1₀(snd)]}) :: 'ls⁶ => '110_matchres ::: true
//│ <<<<<<<<<< deadcode elimination info <<<<<<<<<<
//│ cannot generate benchmark files: Internal Error: benchmark requires a method of name `testxxx` calling a value wrapped in `primId`
//│  and if there are manually fused benchmarks, there should be a call to `testManual`with exact the same parameter following the `testxxx`
//│ 
//│ let rec break_d0 ls_5 =
//│   (Obj.magic 99)
//│ and dropWhile_d0 p_1 ls_3 =
//│   (ls_3 p_1)
//│ and dropWhile_d1 p_2 ls_4 =
//│   (ls_4 (Obj.magic 99))
//│ and dropWhile_d2 p_0 ls_1 =
//│   (match ls_1 with
//│     | `N -> 
//│       (`N)
//│     | `C(h_0, t_0) -> 
//│       (if (p_0 (Obj.magic 99)) then
//│         ((dropWhile_d2 p_0) t_0)
//│       else
//│         (`C((Obj.magic 99), t_0))))
//│ and words0_d0 =
//│   (Obj.magic 99)
//│ and words1_d0 ls_2 =
//│   (Obj.magic 99)
//│ and words1_d1 ls_0 =
//│   (Obj.magic 99);;
//│ ((fun x_0 -> 
//│   2) (Obj.magic 99))
//│ 
//│ --------------- ocaml repl result -----------------
//│ [ok]
//│     - : int = 2
//│ 
//│ --------------- ocaml repl result -----------------
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: expect to fail but pass
//│ !!!!!!ERROR!!!!!!


:lhGenOCaml
:lhNoIter
:d
fun f(x) = if x is
  C(t) then if True then f(t) else x // NOTE: or `else x`, but two branches must exist
fun break(x) = break(f(C(x)))
(x => 2)(x => break(f(x)))
//│ |#fun| |f|(|x|)| |#=| |#if| |x| |is|→|C|(|t|)| |#then| |#if| |True| |#then| |f|(|t|)| |#else| |x| |/* NOTE: or `else x`, but two branches must exist*/|←|↵|#fun| |break|(|x|)| |#=| |break|(|f|(|C|(|x|)|)|)|↵|(|x| |=>| |2|)|(|x| |=>| |break|(|f|(|x|)|)|)|
//│ Parsed: {fun f = x, => if x is ‹(C (t,)) then if (True) then f (t,) else x›; fun break = x, => break (f (C (x,),),); '(' x, => 2, ')' (x, => break (f (x,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (fun x² -> 2)((fun x³ -> break^19(f^20(x³))))
//│ def break(x¹) = break^10(f^11([C x¹]))
//│ def f(x⁰) = case x⁰ of {
//│ 	C t⁰ => if [True] then f^3(t⁰) else x⁰}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec break x_1 =
//│ 		  (break (f (`C(x_1))))
//│ 		and f x_0 =
//│ 		  (match x_0 with
//│ 		    | `C(t_0) -> 
//│ 		      (if true then
//│ 		        (f t_0)
//│ 		      else
//│ 		        x_0));;
//│ 		((fun x_2 -> 
//│ 		  2) (fun x_3 -> 
//│ 		  (break (f x_3))))
//│ 		....... ocaml repl result .......
//│ 		[ok]
//│ 		                val break : ([ `C of 'a ] as 'a) -> 'b = <fun>
//│ 		val f : ([ `C of 'a ] as 'a) -> 'a = <fun>
//│ 		....... ocaml repl result .......
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [break^19] (hopeless to continue)
//│ 	[break^19 · break^10] ---> [break^19] (using original def)
//│ 	[break^19 · f^11] (using original def)
//│ 		[break^19 · f^11 · f^3] ---> [break^19 · f^11] (using original def)
//│ [f^20] (hopeless to continue)
//│ 	[f^20 · f^3] ---> [f^20] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (fun x⁷ -> 2)((fun x⁸ -> break₀(f₁(x⁸))))
//│ def break₀(x⁴) = 
//│ 	break₀(f₀([C x⁴]))
//│ 	where
//│ 	def f₀(x⁵) = 
//│ 		case x⁵ of {
//│ 			C t¹ => if [True] then f₀(t¹) else x⁵}
//│ def f₁(x⁶) = 
//│ 	case x⁶ of {
//│ 		C t² => if [True] then f₁(t²) else x⁶}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C x⁴]: 29 --->
//│ 	case x⁵ of {C t¹ => if [True] then f₀(t¹) else x⁵}: 40
//│ ------------------
//│ case x⁵ of {C t¹ => if [True] then f₀(t¹) else x⁵}: 40 --->
//│ 	[C x⁴]: 29
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C x⁴]: 29 --->
//│ 	case x⁵ of {C t¹ => if [True] then f₀(t¹) else x⁵}: 40
//│ ------------------
//│ case x⁵ of {C t¹ => if [True] then f₀(t¹) else x⁵}: 40 --->
//│ 	[C x⁴]: 29
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (fun x⁹ -> 2)((fun x¹⁰ -> break₀(f₁(x¹⁰))))
//│ def break₀(x¹¹) = 
//│ 	break₀(f₀(
//│ 		let t³ = x¹¹
//│ 		in (fun x¹² -> if [True] then f₀(t³) else x¹²)))
//│ 	where
//│ 	def f₀(x¹³) = 
//│ 		x¹³(x¹³)
//│ def f₁(x¹⁴) = 
//│ 	case x¹⁴ of {
//│ 		C t² => if [True] then f₁(t²) else x¹⁴}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ 
//│ >>>>>>>>>> deadcode elimination info >>>>>>>>>>
//│ 2 :: Int ::: false
//│ (fun x -> 2) :: 'x⁰ => Int ::: true
//│ break₀ :: 'break₀ <: [] ::: true
//│ f₁ :: 'f₁ <: [] ::: true
//│ x :: 'x¹ <: [] ::: true
//│ f₁(x) :: '6_callres <: [] ::: true
//│ break₀(f₁(x)) :: '7_callres <: [] ::: true
//│ (fun x -> break₀(f₁(x))) :: 'x¹ => '7_callres ::: true
//│ (fun x -> 2)((fun x -> break₀(f₁(x)))) :: '9_callres <: [] ::: true
//│ break₀ :: 'break₀ <: [] ::: true
//│ f₀ :: 'f₀ <: [] ::: true
//│ x :: 'x² <: [] ::: true
//│ [True] :: True ::: true
//│ f₀ :: 'f₀ <: [] ::: true
//│ t :: 't⁰ <: [] ::: true
//│ f₀(t) :: '16_callres <: [] ::: true
//│ x :: 'x³ <: [] ::: true
//│ if [True] then f₀(t) else x :: '18_ifres <: [] ::: true
//│ (fun x -> if [True] then f₀(t) else x) :: 'x³ => '18_ifres ::: true
//│ let t = x
//│ in (fun x -> if [True] then f₀(t) else x) :: 'x³ => '18_ifres ::: true
//│ f₀(let t = x
//│ in (fun x -> if [True] then f₀(t) else x)) :: '21_callres <: [] ::: true
//│ break₀(f₀(let t = x
//│ in (fun x -> if [True] then f₀(t) else x))) :: '22_callres <: [] ::: true
//│ (fun x -> break₀(f₀(let t = x
//│ in (fun x -> if [True] then f₀(t) else x)))) :: 'x² => '22_callres ::: true
//│ x :: 'x⁴ <: [] ::: true
//│ x :: 'x⁴ <: [] ::: true
//│ x(x) :: '26_callres <: [] ::: true
//│ (fun x -> x(x)) :: 'x⁴ => '26_callres ::: true
//│ x :: 'x⁵ <: [] ::: true
//│ [True] :: True ::: true
//│ f₁ :: 'f₁ <: [] ::: true
//│ t :: 't¹ <: [] ::: true
//│ f₁(t) :: '32_callres <: [] ::: true
//│ x :: 'x⁵ <: [] ::: true
//│ if [True] then f₁(t) else x :: '34_ifres <: [] ::: true
//│ case x of {C t => if [True] then f₁(t) else x} :: '35_matchres <: [] ::: true
//│ (fun x -> case x of {C t => if [True] then f₁(t) else x}) :: 'x⁵ => '35_matchres ::: true
//│ <<<<<<<<<< deadcode elimination info <<<<<<<<<<
//│ cannot generate benchmark files: Internal Error: benchmark requires a method of name `testxxx` calling a value wrapped in `primId`
//│  and if there are manually fused benchmarks, there should be a call to `testManual`with exact the same parameter following the `testxxx`
//│ 
//│ let rec break_d0 x_1 =
//│   (Obj.magic 99)
//│ and f_d0 x_2 =
//│   (x_2 x_2)
//│ and f_d1 x_3 =
//│   (match x_3 with
//│     | `C(t_0) -> 
//│       (if true then
//│         (f_d1 t_0)
//│       else
//│         x_3));;
//│ ((fun x_0 -> 
//│   2) (Obj.magic 99))
//│ 
//│ --------------- ocaml repl result -----------------
//│ [ok]
//│     - : int = 2
//│ 
//│ --------------- ocaml repl result -----------------
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

// prodType recurses in a way that will return a type of `[C of 'a] as 'a`
// two uses of the consumer `f`:
// for one branch the input is not constraint with any prodStrat, so it is ignored with no clash;
// for the other branch the input is `g(t)` which produces a `C(t)`, and it will be fused
// and our type system does not catch this?
:lhGenOCaml
:d
fun prodType(x) = if x is
  C(t) then if True then t else prodType(t)
fun f(x) = if x is
  C(t) then if True then f(t) else f(g(t))
fun g(t) = C(t)
(x => 2)(x => f(prodType(x)))
//│ |#fun| |prodType|(|x|)| |#=| |#if| |x| |is|→|C|(|t|)| |#then| |#if| |True| |#then| |t| |#else| |prodType|(|t|)|←|↵|#fun| |f|(|x|)| |#=| |#if| |x| |is|→|C|(|t|)| |#then| |#if| |True| |#then| |f|(|t|)| |#else| |f|(|g|(|t|)|)|←|↵|#fun| |g|(|t|)| |#=| |C|(|t|)|↵|(|x| |=>| |2|)|(|x| |=>| |f|(|prodType|(|x|)|)|)|
//│ Parsed: {fun prodType = x, => if x is ‹(C (t,)) then if (True) then t else prodType (t,)›; fun f = x, => if x is ‹(C (t,)) then if (True) then f (t,) else f (g (t,),)›; fun g = t, => C (t,); '(' x, => 2, ')' (x, => f (prodType (x,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (fun x² -> 2)((fun x³ -> f^28(prodType^29(x³))))
//│ def f(x¹) = case x¹ of {
//│ 	C t¹ => if [True] then f^12(t¹) else f^15(g^16(t¹))}
//│ def g(t²) = [C t²]
//│ def prodType(x⁰) = case x⁰ of {
//│ 	C t⁰ => if [True] then t⁰ else prodType^4(t⁰)}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec f x_1 =
//│ 		  (match x_1 with
//│ 		    | `C(t_1) -> 
//│ 		      (if true then
//│ 		        (f t_1)
//│ 		      else
//│ 		        (f (g t_1))))
//│ 		and g t_2 =
//│ 		  (`C(t_2))
//│ 		and prodType x_0 =
//│ 		  (match x_0 with
//│ 		    | `C(t_0) -> 
//│ 		      (if true then
//│ 		        t_0
//│ 		      else
//│ 		        (prodType t_0)));;
//│ 		((fun x_2 -> 
//│ 		  2) (fun x_3 -> 
//│ 		  (f (prodType x_3))))
//│ 		....... ocaml repl result .......
//│ 		[ok]
//│ 		                              val f : ([ `C of 'a ] as 'a) -> 'b = <fun>
//│ 		val g : ([ `C of 'a ] as 'a) -> 'a = <fun>
//│ 		val prodType : ([< `C of 'a ] as 'a) -> 'a = <fun>
//│ 		....... ocaml repl result .......
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [f^28] (hopeless to continue)
//│ 	[f^28 · f^12] ---> [f^28] (using original def)
//│ 	[f^28 · f^15] ---> [f^28] (using original def)
//│ 	[f^28 · g^16] (using original def)
//│ [prodType^29] (hopeless to continue)
//│ 	[prodType^29 · prodType^4] ---> [prodType^29] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (fun x⁶ -> 2)((fun x⁷ -> f₀(prodType₀(x⁷))))
//│ def f₀(x⁴) = 
//│ 	case x⁴ of {
//│ 		C t⁴ => if [True] then f₀(t⁴) else f₀(g₀(t⁴))}
//│ 	where
//│ 	def g₀(t³) = 
//│ 		[C t³]
//│ def prodType₀(x⁵) = 
//│ 	case x⁵ of {
//│ 		C t⁵ => if [True] then t⁵ else prodType₀(t⁵)}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C t³]: 36 --->
//│ 	case x⁴ of {C t⁴ => if [True] then f₀(t⁴) else f₀(g₀(t⁴))}: 49
//│ ------------------
//│ case x⁴ of {C t⁴ => if [True] then f₀(t⁴) else f₀(g₀(t⁴))}: 49 --->
//│ 	[C t³]: 36
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C t³]: 36 --->
//│ 	case x⁴ of {C t⁴ => if [True] then f₀(t⁴) else f₀(g₀(t⁴))}: 49
//│ ------------------
//│ case x⁴ of {C t⁴ => if [True] then f₀(t⁴) else f₀(g₀(t⁴))}: 49 --->
//│ 	[C t³]: 36
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (fun x⁸ -> 2)((fun x⁹ -> f₀(prodType₀(x⁹))))
//│ def f₀(x¹⁰) = 
//│ 	x¹⁰(99)
//│ 	where
//│ 	def g₀(t⁶) = 
//│ 		let t⁷ = t⁶
//│ 		in (fun _lh_dummy⁰ -> if [True] then f₀(t⁷) else f₀(g₀(t⁷)))
//│ def prodType₀(x¹¹) = 
//│ 	case x¹¹ of {
//│ 		C t⁵ => if [True] then t⁵ else prodType₀(t⁵)}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ 
//│ >>>>>>>>>> deadcode elimination info >>>>>>>>>>
//│ 2 :: Int ::: false
//│ (fun x -> 2) :: 'x⁰ => Int ::: false
//│ f₀ :: 'f₀ <: ['6_callres => '7_callres | 't¹ => '14_callres | '18_callres => '19_callres] ::: false
//│ prodType₀ :: 'prodType₀ <: ['x¹ => '6_callres | 't² => '33_callres] ::: false
//│ x :: 'x¹ <: ['x³] ::: false
//│ prodType₀(x) :: '6_callres <: ['x²] ::: false
//│ f₀(prodType₀(x)) :: '7_callres <: [] ::: true
//│ (fun x -> f₀(prodType₀(x))) :: 'x¹ => '7_callres ::: true
//│ (fun x -> 2)((fun x -> f₀(prodType₀(x)))) :: '9_callres <: [NoCons] ::: false
//│ t :: 't⁰ <: ['t¹] ::: false
//│ [True] :: True ::: false
//│ f₀ :: 'f₀ <: ['6_callres => '7_callres | 't¹ => '14_callres | '18_callres => '19_callres] ::: false
//│ t :: 't¹ <: ['x² | 't⁰] ::: false
//│ f₀(t) :: '14_callres <: ['20_ifres] ::: true
//│ f₀ :: 'f₀ <: ['6_callres => '7_callres | 't¹ => '14_callres | '18_callres => '19_callres] ::: false
//│ g₀ :: 'g₀ <: ['t¹ => '18_callres] ::: false
//│ t :: 't¹ <: ['x² | 't⁰] ::: false
//│ g₀(t) :: '18_callres <: ['x²] ::: false
//│ f₀(g₀(t)) :: '19_callres <: ['20_ifres] ::: true
//│ if [True] then f₀(t) else f₀(g₀(t)) :: '20_ifres <: ['26_callres] ::: true
//│ (fun _lh_dummy -> if [True] then f₀(t) else f₀(g₀(t))) :: '_lh_dummy⁰ => '20_ifres ::: false
//│ let t = t
//│ in (fun _lh_dummy -> if [True] then f₀(t) else f₀(g₀(t))) :: '_lh_dummy⁰ => '20_ifres ::: false
//│ (fun t -> let t = t
//│ in (fun _lh_dummy -> if [True] then f₀(t) else f₀(g₀(t)))) :: 't⁰ => '_lh_dummy⁰ => '20_ifres ::: false
//│ x :: 'x² <: [Int => '26_callres] ::: false
//│ 99 :: Int ::: false
//│ x(99) :: '26_callres <: ['7_callres | '14_callres | '19_callres] ::: true
//│ (fun x -> x(99)) :: 'x² => '26_callres ::: false
//│ x :: 'x³ <: [Destruct(C('t²))] ::: false
//│ [True] :: True ::: false
//│ t :: 't² <: ['34_ifres | 'x³] ::: false
//│ prodType₀ :: 'prodType₀ <: ['x¹ => '6_callres | 't² => '33_callres] ::: false
//│ t :: 't² <: ['34_ifres | 'x³] ::: false
//│ prodType₀(t) :: '33_callres <: ['34_ifres] ::: false
//│ if [True] then t else prodType₀(t) :: '34_ifres <: ['35_matchres] ::: false
//│ case x of {C t => if [True] then t else prodType₀(t)} :: '35_matchres <: ['6_callres | '33_callres] ::: false
//│ (fun x -> case x of {C t => if [True] then t else prodType₀(t)}) :: 'x³ => '35_matchres ::: false
//│ <<<<<<<<<< deadcode elimination info <<<<<<<<<<
//│ cannot generate benchmark files: Internal Error: benchmark requires a method of name `testxxx` calling a value wrapped in `primId`
//│  and if there are manually fused benchmarks, there should be a call to `testManual`with exact the same parameter following the `testxxx`
//│ 
//│ let rec f_d0 x_1 =
//│   (Obj.magic 99)
//│ and g_d0 t_0 =
//│   (let rec t_1 = t_0 in
//│     (fun _lh_dummy_0 -> 
//│       (Obj.magic 99)))
//│ and prodType_d0 x_2 =
//│   (match x_2 with
//│     | `C(t_2) -> 
//│       (if true then
//│         t_2
//│       else
//│         (prodType_d0 t_2)));;
//│ ((fun x_0 -> 
//│   2) (Obj.magic 99))
//│ 
//│ --------------- ocaml repl result -----------------
//│ [ok]
//│     - : int = 2
//│ 
//│ --------------- ocaml repl result -----------------
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


:lhGenOCaml
:d
:lhLessExpansion
fun break(ls) = if ls is
  N then P(N, N)
  C(h, t) then if h == 1 then P(N, C(h, t)) else if (break(t)) is
    P(fst, snd) then P(C(h, fst), snd)
fun line(ls) = if break(ls) is
  P(fst, snd) then
    C(
      fst,
      if snd is
        C(h, t) then line(t)
        N then N
    )
fun head(ls) = if ls is
  C(h, t) then h
  N then error
(head(line(primId(C(2,C(2,C(1,C(2,N))))))))
//│ |#fun| |break|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |P|(|N|,| |N|)|↵|C|(|h|,| |t|)| |#then| |#if| |h| |==| |1| |#then| |P|(|N|,| |C|(|h|,| |t|)|)| |#else| |#if| |(|break|(|t|)|)| |is|→|P|(|fst|,| |snd|)| |#then| |P|(|C|(|h|,| |fst|)|,| |snd|)|←|←|↵|#fun| |line|(|ls|)| |#=| |#if| |break|(|ls|)| |is|→|P|(|fst|,| |snd|)| |#then|→|C|(|→|fst|,|↵|#if| |snd| |is|→|C|(|h|,| |t|)| |#then| |line|(|t|)|↵|N| |#then| |N|←|←|↵|)|←|←|↵|#fun| |head|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |h|↵|N| |#then| |error|←|↵|(|head|(|line|(|primId|(|C|(|2|,|C|(|2|,|C|(|1|,|C|(|2|,|N|)|)|)|)|)|)|)|)|
//│ Parsed: {fun break = ls, => if ls is ‹(N) then P (N, N,); (C (h, t,)) then if (== (h,) (1,)) then P (N, C (h, t,),) else if '(' break (t,), ')' is ‹(P (fst, snd,)) then P (C (h, fst,), snd,)››; fun line = ls, => if break (ls,) is ‹(P (fst, snd,)) then {C (fst, if snd is ‹(C (h, t,)) then line (t,); (N) then N›,)}›; fun head = ls, => if ls is ‹(C (h, t,)) then h; (N) then error›; '(' head (line (primId (C (2, C (2, C (1, C (2, N,),),),),),),), ')'}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ head^45(line^46(primId⁰([C 2 [C 2 [C 1 [C 2 [N]]]]])))
//│ def break(ls⁰) = case ls⁰ of {
//│ 	N  => [P [N] [N]]
//│ 	| C h⁰ t⁰ => if (h⁰ == 1) then [P [N] [C h⁰ t⁰]] else case break^15(t⁰) of {
//│ 		P fst⁰ snd⁰ => [P [C h⁰ fst⁰] snd⁰]}}
//│ def head(ls²) = case ls² of {
//│ 	C h² t² => h²
//│ 	| N  => error⁰}
//│ def line(ls¹) = case break^27(ls¹) of {
//│ 	P fst¹ snd¹ => [C fst¹ case snd¹ of {
//│ 		C h¹ t¹ => line^32(t¹)
//│ 		| N  => [N]}]}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec break ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `N -> 
//│ 		      (`P((`N), (`N)))
//│ 		    | `C(h_0, t_0) -> 
//│ 		      (if (h_0 = 1) then
//│ 		        (`P((`N), (`C(h_0, t_0))))
//│ 		      else
//│ 		        (match (break t_0) with
//│ 		          | `P(fst_0, snd_0) -> 
//│ 		            (`P((`C(h_0, fst_0)), snd_0)))))
//│ 		and head ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `C(h_2, t_2) -> 
//│ 		      h_2
//│ 		    | `N -> 
//│ 		      (failwith "error"))
//│ 		and line ls_1 =
//│ 		  (match (break ls_1) with
//│ 		    | `P(fst_1, snd_1) -> 
//│ 		      (`C(fst_1, (match snd_1 with
//│ 		        | `C(h_1, t_1) -> 
//│ 		          (line t_1)
//│ 		        | `N -> 
//│ 		          (`N)))));;
//│ 		(head (line (`C(2, (`C(2, (`C(1, (`C(2, (`N)))))))))))
//│ 		....... ocaml repl result .......
//│ 		[ok]
//│ 		                                                val break :
//│ 		  ([< `C of int * 'a | `N ] as 'a) ->
//│ 		  [ `P of ([> `C of int * 'b | `N ] as 'b) * [ `C of int * 'a | `N ] ] =
//│ 		  <fun>
//│ 		val head : [< `C of 'a * 'b | `N ] -> 'a = <fun>
//│ 		val line :
//│ 		  ([< `C of int * 'a | `N ] as 'a) ->
//│ 		  ([> `C of ([> `C of int * 'c | `N ] as 'c) * 'b | `N ] as 'b) = <fun>
//│ 		....... ocaml repl result .......
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 3 --->
//│ 	case snd¹ of {C h¹ t¹ => line(t¹) | N  => [N]}: 36
//│ [P [N] [N]]: 4 --->
//│ 	case break(t⁰) of {P fst⁰ snd⁰ => [P [C h⁰ fst⁰] snd⁰]}: 23
//│ 	case break(ls¹) of {P fst¹ snd¹ => [C fst¹ case snd¹ of {C h¹ t¹ => line(t¹) | N  => [N]}]}: 38
//│ [C h⁰ t⁰]: 13 --->
//│ 	case snd¹ of {C h¹ t¹ => line(t¹) | N  => [N]}: 36
//│ [P [N] [C h⁰ t⁰]]: 14 --->
//│ 	case break(t⁰) of {P fst⁰ snd⁰ => [P [C h⁰ fst⁰] snd⁰]}: 23
//│ 	case break(ls¹) of {P fst¹ snd¹ => [C fst¹ case snd¹ of {C h¹ t¹ => line(t¹) | N  => [N]}]}: 38
//│ [P [C h⁰ fst⁰] snd⁰]: 22 --->
//│ 	case break(t⁰) of {P fst⁰ snd⁰ => [P [C h⁰ fst⁰] snd⁰]}: 23
//│ 	case break(ls¹) of {P fst¹ snd¹ => [C fst¹ case snd¹ of {C h¹ t¹ => line(t¹) | N  => [N]}]}: 38
//│ [C fst¹ case snd¹ of {C h¹ t¹ => line(t¹) | N  => [N]}]: 37 --->
//│ 	case ls² of {C h² t² => h² | N  => error⁰}: 43
//│ ------------------
//│ case break(t⁰) of {P fst⁰ snd⁰ => [P [C h⁰ fst⁰] snd⁰]}: 23 --->
//│ 	[P [N] [N]]: 4
//│ 	[P [N] [C h⁰ t⁰]]: 14
//│ 	[P [C h⁰ fst⁰] snd⁰]: 22
//│ case snd¹ of {C h¹ t¹ => line(t¹) | N  => [N]}: 36 --->
//│ 	[N]: 3
//│ 	[C h⁰ t⁰]: 13
//│ case break(ls¹) of {P fst¹ snd¹ => [C fst¹ case snd¹ of {C h¹ t¹ => line(t¹) | N  => [N]}]}: 38 --->
//│ 	[P [N] [N]]: 4
//│ 	[P [N] [C h⁰ t⁰]]: 14
//│ 	[P [C h⁰ fst⁰] snd⁰]: 22
//│ case ls² of {C h² t² => h² | N  => error⁰}: 43 --->
//│ 	[C fst¹ case snd¹ of {C h¹ t¹ => line(t¹) | N  => [N]}]: 37
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 3 --->
//│ 	case snd¹ of {C h¹ t¹ => line(t¹) | N  => [N]}: 36
//│ [C h⁰ t⁰]: 13 --->
//│ 	case snd¹ of {C h¹ t¹ => line(t¹) | N  => [N]}: 36
//│ [C fst¹ case snd¹ of {C h¹ t¹ => line(t¹) | N  => [N]}]: 37 --->
//│ 	case ls² of {C h² t² => h² | N  => error⁰}: 43
//│ ------------------
//│ case snd¹ of {C h¹ t¹ => line(t¹) | N  => [N]}: 36 --->
//│ 	[N]: 3
//│ 	[C h⁰ t⁰]: 13
//│ case ls² of {C h² t² => h² | N  => error⁰}: 43 --->
//│ 	[C fst¹ case snd¹ of {C h¹ t¹ => line(t¹) | N  => [N]}]: 37
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ head(line(primId⁰([C 2 [C 2 [C 1 [C 2 [N]]]]])))
//│ def break(ls³) = case ls³ of {
//│ 	N  => [P [N] (fun _lh_dummy⁰ -> [N])]
//│ 	| C h⁰ t⁰ => if (h⁰ == 1) then [P [N] 
//│ 		let t³ = t⁰
//│ 		in (fun _lh_dummy¹ -> line(t³))] else case break(t⁰) of {
//│ 		P fst⁰ snd⁰ => [P [C h⁰ fst⁰] snd⁰]}}
//│ def head(ls⁵) = ls⁵(99)
//│ def line(ls⁴) = case break(ls⁴) of {
//│ 	P fst¹ snd¹ => 
//│ 		let h³ = fst¹
//│ 		in (fun _lh_dummy² -> h³)}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ 
//│ >>>>>>>>>> deadcode elimination info >>>>>>>>>>
//│ head :: 'head <: ['14_callres => '15_callres] ::: false
//│ line :: 'line <: ['13_callres => '14_callres | 't¹ => '30_callres] ::: false
//│ primId :: NoProd ::: false
//│ 2 :: Int ::: false
//│ 2 :: Int ::: false
//│ 1 :: Int ::: false
//│ 2 :: Int ::: false
//│ [N] :: N ::: false
//│ [C 2 [N]] :: C(Int, N) ::: false
//│ [C 1 [C 2 [N]]] :: C(Int, C(Int, N)) ::: false
//│ [C 2 [C 1 [C 2 [N]]]] :: C(Int, C(Int, C(Int, N))) ::: false
//│ [C 2 [C 2 [C 1 [C 2 [N]]]]] :: C(Int, C(Int, C(Int, C(Int, N)))) ::: false
//│ primId([C 2 [C 2 [C 1 [C 2 [N]]]]]) :: '13_callres <: ['ls¹] ::: false
//│ line(primId([C 2 [C 2 [C 1 [C 2 [N]]]]])) :: '14_callres <: ['ls²] ::: false
//│ head(line(primId([C 2 [C 2 [C 1 [C 2 [N]]]]]))) :: '15_callres <: [NoCons] ::: false
//│ ls :: 'ls⁰ <: [Destruct(N, C('h⁰, 't⁰))] ::: false
//│ [N] :: N ::: false
//│ [N] :: N ::: true
//│ (fun _lh_dummy -> [N]) :: '_lh_dummy⁰ => N ::: true
//│ [P [N] (fun _lh_dummy -> [N])] :: P(N, '_lh_dummy⁰ => N) ::: false
//│ == :: Destruct(Int) => Destruct(Int) => Sum[True, False] ::: false
//│ h :: 'h⁰ <: [NoCons | Destruct(Int)] ::: false
//│ ==(h) :: '23_callres <: [Int => '25_callres] ::: false
//│ 1 :: Int ::: false
//│ (h == 1) :: '25_callres <: [Destruct(True, False)] ::: false
//│ [N] :: N ::: false
//│ t :: 't⁰ <: ['t¹ | 'ls⁰] ::: false
//│ line :: 'line <: ['13_callres => '14_callres | 't¹ => '30_callres] ::: false
//│ t :: 't¹ <: ['ls¹] ::: false
//│ line(t) :: '30_callres <: [] ::: true
//│ (fun _lh_dummy -> line(t)) :: '_lh_dummy¹ => '30_callres ::: true
//│ let t = t
//│ in (fun _lh_dummy -> line(t)) :: '_lh_dummy¹ => '30_callres ::: true
//│ [P [N] let t = t
//│ in (fun _lh_dummy -> line(t))] :: P(N, '_lh_dummy¹ => '30_callres) ::: false
//│ break :: 'break <: ['t⁰ => '36_callres | 'ls¹ => '48_callres] ::: false
//│ t :: 't⁰ <: ['t¹ | 'ls⁰] ::: false
//│ break(t) :: '36_callres <: [Destruct(P('fst⁰, 'snd⁰))] ::: false
//│ h :: 'h⁰ <: [NoCons | Destruct(Int)] ::: false
//│ fst :: 'fst⁰ <: [NoCons] ::: false
//│ [C h fst] :: C('h⁰, 'fst⁰) ::: false
//│ snd :: 'snd⁰ <: ['snd¹] ::: true
//│ [P [C h fst] snd] :: P(C('h⁰, 'fst⁰), 'snd⁰) ::: false
//│ case break(t) of {P fst snd => [P [C h fst] snd]} :: '42_matchres <: ['43_ifres] ::: false
//│ if (h == 1) then [P [N] let t = t
//│ in (fun _lh_dummy -> line(t))] else case break(t) of {P fst snd => [P [C h fst] snd]} :: '43_ifres <: ['44_matchres] ::: false
//│ case ls of {N  => [P [N] (fun _lh_dummy -> [N])] | C h t => if (h == 1) then [P [N] let t = t
//│ in (fun _lh_dummy -> line(t))] else case break(t) of {P fst snd => [P [C h fst] snd]}} :: '44_matchres <: ['36_callres | '48_callres] ::: false
//│ (fun ls -> case ls of {N  => [P [N] (fun _lh_dummy -> [N])] | C h t => if (h == 1) then [P [N] let t = t
//│ in (fun _lh_dummy -> line(t))] else case break(t) of {P fst snd => [P [C h fst] snd]}}) :: 'ls⁰ => '44_matchres ::: false
//│ break :: 'break <: ['t⁰ => '36_callres | 'ls¹ => '48_callres] ::: false
//│ ls :: 'ls¹ <: ['ls⁰] ::: false
//│ break(ls) :: '48_callres <: [Destruct(P('fst¹, 'snd¹))] ::: false
//│ fst :: 'fst¹ <: ['h¹] ::: false
//│ h :: 'h¹ <: ['57_callres] ::: false
//│ (fun _lh_dummy -> h) :: '_lh_dummy² => 'h¹ ::: false
//│ let h = fst
//│ in (fun _lh_dummy -> h) :: '_lh_dummy² => 'h¹ ::: false
//│ case break(ls) of {P fst snd => let h = fst
//│ in (fun _lh_dummy -> h)} :: '53_matchres <: ['14_callres | '30_callres] ::: false
//│ (fun ls -> case break(ls) of {P fst snd => let h = fst
//│ in (fun _lh_dummy -> h)}) :: 'ls¹ => '53_matchres ::: false
//│ ls :: 'ls² <: [Int => '57_callres] ::: false
//│ 99 :: Int ::: false
//│ ls(99) :: '57_callres <: ['15_callres] ::: false
//│ (fun ls -> ls(99)) :: 'ls² => '57_callres ::: false
//│ <<<<<<<<<< deadcode elimination info <<<<<<<<<<
//│ cannot generate benchmark files: Internal Error: benchmark requires a method of name `testxxx` calling a value wrapped in `primId`
//│  and if there are manually fused benchmarks, there should be a call to `testManual`with exact the same parameter following the `testxxx`
//│ 
//│ let rec break ls_0 =
//│   (match ls_0 with
//│     | `N -> 
//│       (`P((`N), (Obj.magic 99)))
//│     | `C(h_0, t_0) -> 
//│       (if (h_0 = 1) then
//│         (`P((`N), (Obj.magic 99)))
//│       else
//│         (match (break t_0) with
//│           | `P(fst_0, snd_0) -> 
//│             (`P((`C(h_0, fst_0)), (Obj.magic 99))))))
//│ and head ls_2 =
//│   (ls_2 99)
//│ and line ls_1 =
//│   (match (break ls_1) with
//│     | `P(fst_1, snd_1) -> 
//│       (let rec h_1 = fst_1 in
//│         (fun _lh_dummy_0 -> 
//│           h_1)));;
//│ (head (line (`C(2, (`C(2, (`C(1, (`C(2, (`N)))))))))))
//│ 
//│ --------------- ocaml repl result -----------------
//│ [ok]
//│   - : [> `C of int * 'a | `N ] as 'a = `C (2, `C (2, `N))
//│ 
//│ --------------- ocaml repl result -----------------
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
