:NewParser
:ParseOnly

:ns
// the `p · p` is never touched (checked) by the typer, so no path leads to it, and no recusive map from it
let p = C(p)
fun c(x) = if C(x) is
    C(a) then c(a)
c(p)
//│ |#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |C|(|x|)| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|c|(|p|)|
//│ Parsed: {let p = C (p,); fun c = x, => if C (x,) is ‹(C (a,)) then c (a,)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C p:6^1]
//│ def c:7 = (fun x:8 -> case [C x:8^3] of {
//│ 	C a:9 => (c:7^5 a:9^6)})
//│ (c:7^10 p:6^11)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([c:7^10]: 1'c) <: ([]: ([p:6^11]: 0'p) => ([]: 6'12_callres))
//│ ([]: ([]: 2'x) => ([]: 5'8_matchres)) <: ([]: 1'c)
//│ ([]: 4'7_callres) <: ([]: 5'8_matchres)
//│ ([]: C(([]: 2'x))) <: ([]: Destruct(C(3'a)))
//│ ([c:7^5]: 1'c) <: ([]: ([]: 3'a) => ([]: 4'7_callres))
//│ ([]: C(([p:6^1]: 0'p))) <: ([]: 0'p)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(0'p) <: 2'x
//│ 	[-p:6^11 · +c:7^10 · +c:7^5]  --->  [-p:6^11 · +c:7^10]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'p:
//│ 	0'p[-p:6^11 · +c:7^10] < ([]: 2'x)
//│ 	([]: C(([p:6^1]: 0'p))) < []0'p
//│ --------------
//│ 5'8_matchres:
//│ 	5'8_matchres[] < ([-c:7^5]: 4'7_callres)
//│ 	5'8_matchres[] < ([-c:7^10]: 6'12_callres)
//│ --------------
//│ 1'c:
//│ 	1'c[-c:7^5] < ([]: ([]: 3'a) => ([]: 4'7_callres))
//│ 	1'c[-c:7^10] < ([]: ([p:6^11]: 0'p) => ([]: 6'12_callres))
//│ 	([]: ([]: 2'x) => ([]: 5'8_matchres)) < []1'c
//│ --------------
//│ 2'x:
//│ 	2'x[] < ([]: 3'a)
//│ 	([]: C(([p:6^1]: 0'p))) < [-p:6^11 · +c:7^10]2'x
//│ --------------
//│ 3'a:
//│ 	3'a[+c:7^5] < ([]: 2'x)
//│ 	([+c:7^10 · -p:6^11]: C(([p:6^1]: 0'p))) < []3'a
//│ --------------
//│ 4'7_callres:
//│ 	4'7_callres[] < ([]: 5'8_matchres)
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<

// the `p · p` is never touched (checked) by the typer, so no path leads to it, and no recusive map from it
:ns
let rec p = C(p)
fun c(x) = if x is
    C(a) then a
fun main(y) = c(p)
main(0)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |a|←|↵|#fun| |main|(|y|)| |#=| |c|(|p|)|↵|main|(|0|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then a›; fun main = y, => c (p,); main (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C p:6^1]
//│ def c:7 = (fun x:9 -> case x:9^3 of {
//│ 	C a:10 => a:10^4})
//│ def main:8 = (fun y:11 -> (c:7^7 p:6^8))
//│ (main:8^11 0)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([main:8^11]: 2'main) <: ([]: ([]: Int) => ([]: 8'13_callres))
//│ ([]: ([]: 6'y) => ([]: 7'9_callres)) <: ([]: 2'main)
//│ ([c:7^7]: 1'c) <: ([]: ([p:6^8]: 0'p) => ([]: 7'9_callres))
//│ ([]: ([]: 3'x) => ([]: 5'5_matchres)) <: ([]: 1'c)
//│ ([]: 4'a) <: ([]: 5'5_matchres)
//│ ([]: 3'x) <: ([]: Destruct(C(4'a)))
//│ ([]: C(([p:6^1]: 0'p))) <: ([]: 0'p)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'p:
//│ 	0'p[-p:6^1 · -p:6^8 · +c:7^7] < ([]: 4'a)
//│ 	0'p[-p:6^8 · +c:7^7] < ([]: 3'x)
//│ 	([]: C(([p:6^1]: 0'p))) < []0'p
//│ --------------
//│ 5'5_matchres:
//│ 	5'5_matchres[] < ([-c:7^7]: 7'9_callres)
//│ 	([+c:7^7 · -p:6^8 · -p:6^1]: C(([p:6^1]: 0'p))) < []5'5_matchres
//│ --------------
//│ 1'c:
//│ 	1'c[-c:7^7] < ([]: ([p:6^8]: 0'p) => ([]: 7'9_callres))
//│ 	([]: ([]: 3'x) => ([]: 5'5_matchres)) < []1'c
//│ --------------
//│ 6'y:
//│ 	([+main:8^11]: Int) < []6'y
//│ --------------
//│ 2'main:
//│ 	2'main[-main:8^11] < ([]: ([]: Int) => ([]: 8'13_callres))
//│ 	([]: ([]: 6'y) => ([]: 7'9_callres)) < []2'main
//│ --------------
//│ 7'9_callres:
//│ 	7'9_callres[] < ([-main:8^11]: 8'13_callres)
//│ 	([+c:7^7 · -p:6^8 · -p:6^1]: C(([p:6^1]: 0'p))) < [-c:7^7]7'9_callres
//│ --------------
//│ 3'x:
//│ 	3'x[] < ([]: Destruct(C(4'a)))
//│ 	([]: C(([p:6^1]: 0'p))) < [-p:6^8 · +c:7^7]3'x
//│ --------------
//│ 8'13_callres:
//│ 	([-c:7^7 · +c:7^7 · -p:6^8 · -p:6^1]: C(([p:6^1]: 0'p))) < [-main:8^11]8'13_callres
//│ --------------
//│ 4'a:
//│ 	4'a[] < ([]: 5'5_matchres)
//│ 	([]: C(([p:6^1]: 0'p))) < [-p:6^1 · -p:6^8 · +c:7^7]4'a
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<



// NOTE: push in problem
:ns
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
let l = C(K, l)
fun ff(x) = if x is
    K then T
map(ff, l)
//│ |#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |l|)|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|←|↵|map|(|ff|,| |l|)|
//│ Parsed: {fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; let l = C (K, l,); fun ff = x, => if x is ‹(K) then T›; map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = (fun f:9 -> (fun ls:10 -> case ls:10^1 of {
//│ 	C h:11 t:12 => [C (f:9^2 h:11^3) ((map:6^5 f:9^6) t:12^8)]
//│ 	| N => [N]}))
//│ def l:7 = [C [K] l:7^16]
//│ def ff:8 = (fun x:13 -> case x:13^18 of {
//│ 	K => [T]})
//│ ((map:6^22 ff:8^23) l:7^25)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 13'24_callres) <: ([]: ([l:7^25]: 1'l) => ([]: 14'26_callres))
//│ ([map:6^22]: 0'map) <: ([]: ([ff:8^23]: 2'ff) => ([]: 13'24_callres))
//│ ([]: ([]: 11'x) => ([]: 12'20_matchres)) <: ([]: 2'ff)
//│ ([]: T) <: ([]: 12'20_matchres)
//│ ([]: 11'x) <: ([]: Destruct(K))
//│ ([]: C(([]: K), ([l:7^16]: 1'l))) <: ([]: 1'l)
//│ ([]: ([]: 3'f) => ([]: ([]: 4'ls) => ([]: 10'12_matchres))) <: ([]: 0'map)
//│ ([]: N) <: ([]: 10'12_matchres)
//│ ([]: C(([]: 7'4_callres), ([]: 9'9_callres))) <: ([]: 10'12_matchres)
//│ ([]: 4'ls) <: ([]: Destruct(C(5'h, 6't), N))
//│ ([]: 8'7_callres) <: ([]: ([]: 6't) => ([]: 9'9_callres))
//│ ([map:6^5]: 0'map) <: ([]: ([]: 3'f) => ([]: 8'7_callres))
//│ ([]: 3'f) <: ([]: ([]: 5'h) => ([]: 7'4_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(K, 1'l) <: 4'ls
//│ 	[-l:7^16 · -l:7^16 · -l:7^25 · +map:6^22 · +map:6^5 · +map:6^5]  --->  [-l:7^16 · -l:7^25 · +map:6^22 · +map:6^5]
//│ 11'x => 12'20_matchres <: 3'f
//│ 	[-ff:8^23 · +map:6^22 · +map:6^5 · +map:6^5]  --->  [-ff:8^23 · +map:6^22 · +map:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'map:
//│ 	0'map[-map:6^5] < ([]: ([]: 3'f) => ([]: 8'7_callres))
//│ 	0'map[-map:6^22] < ([]: ([ff:8^23]: 2'ff) => ([]: 13'24_callres))
//│ 	([]: ([]: 3'f) => ([]: ([]: 4'ls) => ([]: 10'12_matchres))) < []0'map
//│ --------------
//│ 5'h:
//│ 	5'h[] < ([-map:6^22 · +ff:8^23]: 11'x)
//│ 	5'h[] < ([-map:6^5 · -map:6^22 · +ff:8^23]: 11'x)
//│ 	([+map:6^5 · +map:6^22 · -l:7^25 · -l:7^16]: K) < []5'h
//│ 	([+map:6^22 · -l:7^25]: K) < []5'h
//│ --------------
//│ 10'12_matchres:
//│ 	10'12_matchres[-map:6^5] < ([]: 9'9_callres)
//│ 	10'12_matchres[-map:6^22] < ([]: 14'26_callres)
//│ 	([]: C(([]: 7'4_callres), ([]: 9'9_callres))) < []10'12_matchres
//│ 	([]: N) < []10'12_matchres
//│ --------------
//│ 14'26_callres:
//│ 	([]: C(([]: 7'4_callres), ([]: 9'9_callres))) < [-map:6^22]14'26_callres
//│ 	([]: N) < [-map:6^22]14'26_callres
//│ --------------
//│ 1'l:
//│ 	1'l[-l:7^16 · -l:7^16 · -l:7^25 · +map:6^22 · +map:6^5] < ([]: 6't)
//│ 	1'l[-l:7^16 · -l:7^25 · +map:6^22] < ([]: 6't)
//│ 	1'l[-l:7^25] < ([+map:6^22]: 4'ls)
//│ 	([]: C(([]: K), ([l:7^16]: 1'l))) < []1'l
//│ --------------
//│ 6't:
//│ 	6't[] < ([+map:6^5]: 4'ls)
//│ 	([]: C(([]: K), ([l:7^16]: 1'l))) < [-l:7^16 · -l:7^16 · -l:7^25 · +map:6^22 · +map:6^5]6't
//│ 	([]: C(([]: K), ([l:7^16]: 1'l))) < [-l:7^16 · -l:7^25 · +map:6^22]6't
//│ --------------
//│ 9'9_callres:
//│ 	([]: N) < [-map:6^5]9'9_callres
//│ 	([]: C(([]: 7'4_callres), ([]: 9'9_callres))) < [-map:6^5]9'9_callres
//│ --------------
//│ 13'24_callres:
//│ 	13'24_callres[] < ([]: ([l:7^25]: 1'l) => ([]: 14'26_callres))
//│ 	([]: ([]: 4'ls) => ([]: 10'12_matchres)) < [-map:6^22]13'24_callres
//│ --------------
//│ 2'ff:
//│ 	2'ff[-ff:8^23 · +map:6^22] < ([]: 3'f)
//│ 	([]: ([]: 11'x) => ([]: 12'20_matchres)) < []2'ff
//│ --------------
//│ 12'20_matchres:
//│ 	12'20_matchres[-ff:8^23 · +map:6^22] < ([]: 7'4_callres)
//│ 	12'20_matchres[-ff:8^23 · +map:6^22 · +map:6^5] < ([]: 7'4_callres)
//│ 	([]: T) < []12'20_matchres
//│ --------------
//│ 7'4_callres:
//│ 	([]: T) < [-ff:8^23 · +map:6^22]7'4_callres
//│ 	([]: T) < [-ff:8^23 · +map:6^22 · +map:6^5]7'4_callres
//│ --------------
//│ 3'f:
//│ 	3'f[] < ([]: ([]: 5'h) => ([]: 7'4_callres))
//│ 	3'f[+map:6^5] < ([]: 3'f)
//│ 	([+map:6^22 · -ff:8^23]: ([]: 11'x) => ([]: 12'20_matchres)) < [+map:6^5]3'f
//│ 	([]: ([]: 11'x) => ([]: 12'20_matchres)) < [-ff:8^23 · +map:6^22]3'f
//│ --------------
//│ 11'x:
//│ 	11'x[] < ([]: Destruct(K))
//│ 	([+map:6^22 · -l:7^25]: K) < [-map:6^22 · +ff:8^23]11'x
//│ 	([+map:6^5 · +map:6^22 · -l:7^25 · -l:7^16]: K) < [-map:6^22 · +ff:8^23]11'x
//│ 	([+map:6^22 · -l:7^25]: K) < [-map:6^5 · -map:6^22 · +ff:8^23]11'x
//│ 	([+map:6^5 · +map:6^22 · -l:7^25 · -l:7^16]: K) < [-map:6^5 · -map:6^22 · +ff:8^23]11'x
//│ --------------
//│ 8'7_callres:
//│ 	8'7_callres[] < ([]: ([]: 6't) => ([]: 9'9_callres))
//│ 	([]: ([]: 4'ls) => ([]: 10'12_matchres)) < [-map:6^5]8'7_callres
//│ --------------
//│ 4'ls:
//│ 	4'ls[] < ([]: Destruct(C(5'h, 6't), N))
//│ 	([+map:6^22 · -l:7^25 · -l:7^16]: C(([]: K), ([l:7^16]: 1'l))) < [+map:6^5]4'ls
//│ 	([]: C(([]: K), ([l:7^16]: 1'l))) < [-l:7^25 · +map:6^22]4'ls
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<

// NOTE: only first two is handled
:ns
_LUMBERHACK_ERROR
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
fun ff(x) = if x is
    K then T
    KK then TT
    KKKK then TTTT
let l = C(K, C(KK, C(KKKK, N)))
map(ff, l)
//│ |_LUMBERHACK_ERROR|↵|#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|ff|,| |l|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; let l = C (K, C (KK, C (KKKK, N,),),); map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = (fun f:9 -> (fun ls:10 -> case ls:10^1 of {
//│ 	C h:11 t:12 => [C (f:9^2 h:11^3) ((map:6^5 f:9^6) t:12^8)]
//│ 	| N => [N]}))
//│ def ff:7 = (fun x:13 -> case x:13^15 of {
//│ 	K => [T]
//│ 	| KK => [TT]
//│ 	| KKKK => [TTTT]})
//│ def l:8 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ ((map:6^28 ff:7^29) l:8^31)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 13'30_callres) <: ([]: ([l:8^31]: 2'l) => ([]: 14'32_callres))
//│ ([map:6^28]: 0'map) <: ([]: ([ff:7^29]: 1'ff) => ([]: 13'30_callres))
//│ ([]: C(([]: K), ([]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))))) <: ([]: 2'l)
//│ ([]: ([]: 11'x) => ([]: 12'19_matchres)) <: ([]: 1'ff)
//│ ([]: TTTT) <: ([]: 12'19_matchres)
//│ ([]: TT) <: ([]: 12'19_matchres)
//│ ([]: T) <: ([]: 12'19_matchres)
//│ ([]: 11'x) <: ([]: Destruct(K, KK, KKKK))
//│ ([]: ([]: 3'f) => ([]: ([]: 4'ls) => ([]: 10'12_matchres))) <: ([]: 0'map)
//│ ([]: N) <: ([]: 10'12_matchres)
//│ ([]: C(([]: 7'4_callres), ([]: 9'9_callres))) <: ([]: 10'12_matchres)
//│ ([]: 4'ls) <: ([]: Destruct(C(5'h, 6't), N))
//│ ([]: 8'7_callres) <: ([]: ([]: 6't) => ([]: 9'9_callres))
//│ ([map:6^5]: 0'map) <: ([]: ([]: 3'f) => ([]: 8'7_callres))
//│ ([]: 3'f) <: ([]: ([]: 5'h) => ([]: 7'4_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ 11'x => 12'19_matchres <: 3'f
//│ 	[-ff:7^29 · +map:6^28 · +map:6^5 · +map:6^5]  --->  [-ff:7^29 · +map:6^28 · +map:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'map:
//│ 	0'map[-map:6^5] < ([]: ([]: 3'f) => ([]: 8'7_callres))
//│ 	0'map[-map:6^28] < ([]: ([ff:7^29]: 1'ff) => ([]: 13'30_callres))
//│ 	([]: ([]: 3'f) => ([]: ([]: 4'ls) => ([]: 10'12_matchres))) < []0'map
//│ --------------
//│ 5'h:
//│ 	5'h[] < ([-map:6^28 · +ff:7^29]: 11'x)
//│ 	5'h[] < ([-map:6^5 · -map:6^28 · +ff:7^29]: 11'x)
//│ 	([+map:6^5 · +map:6^5 · +map:6^28 · -l:8^31]: KKKK) < []5'h
//│ 	([+map:6^5 · +map:6^28 · -l:8^31]: KK) < []5'h
//│ 	([+map:6^28 · -l:8^31]: K) < []5'h
//│ --------------
//│ 10'12_matchres:
//│ 	10'12_matchres[-map:6^5] < ([]: 9'9_callres)
//│ 	10'12_matchres[-map:6^28] < ([]: 14'32_callres)
//│ 	([]: C(([]: 7'4_callres), ([]: 9'9_callres))) < []10'12_matchres
//│ 	([]: N) < []10'12_matchres
//│ --------------
//│ 14'32_callres:
//│ 	([]: C(([]: 7'4_callres), ([]: 9'9_callres))) < [-map:6^28]14'32_callres
//│ 	([]: N) < [-map:6^28]14'32_callres
//│ --------------
//│ 1'ff:
//│ 	1'ff[-ff:7^29 · +map:6^28] < ([]: 3'f)
//│ 	([]: ([]: 11'x) => ([]: 12'19_matchres)) < []1'ff
//│ --------------
//│ 6't:
//│ 	6't[] < ([+map:6^5]: 4'ls)
//│ 	([+map:6^5 · +map:6^5 · +map:6^28 · -l:8^31]: N) < []6't
//│ 	([+map:6^5 · +map:6^28 · -l:8^31]: C(([]: KKKK), ([]: N))) < []6't
//│ 	([+map:6^28 · -l:8^31]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))) < []6't
//│ --------------
//│ 9'9_callres:
//│ 	([]: N) < [-map:6^5]9'9_callres
//│ 	([]: C(([]: 7'4_callres), ([]: 9'9_callres))) < [-map:6^5]9'9_callres
//│ --------------
//│ 13'30_callres:
//│ 	13'30_callres[] < ([]: ([l:8^31]: 2'l) => ([]: 14'32_callres))
//│ 	([]: ([]: 4'ls) => ([]: 10'12_matchres)) < [-map:6^28]13'30_callres
//│ --------------
//│ 2'l:
//│ 	2'l[-l:8^31] < ([+map:6^28]: 4'ls)
//│ 	([]: C(([]: K), ([]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))))) < []2'l
//│ --------------
//│ 12'19_matchres:
//│ 	12'19_matchres[-ff:7^29 · +map:6^28] < ([]: 7'4_callres)
//│ 	12'19_matchres[-ff:7^29 · +map:6^28 · +map:6^5] < ([]: 7'4_callres)
//│ 	([]: T) < []12'19_matchres
//│ 	([]: TT) < []12'19_matchres
//│ 	([]: TTTT) < []12'19_matchres
//│ --------------
//│ 7'4_callres:
//│ 	([]: TTTT) < [-ff:7^29 · +map:6^28]7'4_callres
//│ 	([]: TT) < [-ff:7^29 · +map:6^28]7'4_callres
//│ 	([]: T) < [-ff:7^29 · +map:6^28]7'4_callres
//│ 	([]: TTTT) < [-ff:7^29 · +map:6^28 · +map:6^5]7'4_callres
//│ 	([]: TT) < [-ff:7^29 · +map:6^28 · +map:6^5]7'4_callres
//│ 	([]: T) < [-ff:7^29 · +map:6^28 · +map:6^5]7'4_callres
//│ --------------
//│ 3'f:
//│ 	3'f[] < ([]: ([]: 5'h) => ([]: 7'4_callres))
//│ 	3'f[+map:6^5] < ([]: 3'f)
//│ 	([+map:6^28 · -ff:7^29]: ([]: 11'x) => ([]: 12'19_matchres)) < [+map:6^5]3'f
//│ 	([]: ([]: 11'x) => ([]: 12'19_matchres)) < [-ff:7^29 · +map:6^28]3'f
//│ --------------
//│ 11'x:
//│ 	11'x[] < ([]: Destruct(K, KK, KKKK))
//│ 	([+map:6^28 · -l:8^31]: K) < [-map:6^28 · +ff:7^29]11'x
//│ 	([+map:6^5 · +map:6^28 · -l:8^31]: KK) < [-map:6^28 · +ff:7^29]11'x
//│ 	([+map:6^5 · +map:6^5 · +map:6^28 · -l:8^31]: KKKK) < [-map:6^28 · +ff:7^29]11'x
//│ 	([+map:6^28 · -l:8^31]: K) < [-map:6^5 · -map:6^28 · +ff:7^29]11'x
//│ 	([+map:6^5 · +map:6^28 · -l:8^31]: KK) < [-map:6^5 · -map:6^28 · +ff:7^29]11'x
//│ 	([+map:6^5 · +map:6^5 · +map:6^28 · -l:8^31]: KKKK) < [-map:6^5 · -map:6^28 · +ff:7^29]11'x
//│ --------------
//│ 8'7_callres:
//│ 	8'7_callres[] < ([]: ([]: 6't) => ([]: 9'9_callres))
//│ 	([]: ([]: 4'ls) => ([]: 10'12_matchres)) < [-map:6^5]8'7_callres
//│ --------------
//│ 4'ls:
//│ 	4'ls[] < ([]: Destruct(C(5'h, 6't), N))
//│ 	([+map:6^5 · +map:6^5 · +map:6^28 · -l:8^31]: N) < [+map:6^5]4'ls
//│ 	([+map:6^5 · +map:6^28 · -l:8^31]: C(([]: KKKK), ([]: N))) < [+map:6^5]4'ls
//│ 	([+map:6^28 · -l:8^31]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))) < [+map:6^5]4'ls
//│ 	([]: C(([]: K), ([]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))))) < [-l:8^31 · +map:6^28]4'ls
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<

:ns
_LUMBERHACK_ERROR
fun rev(l1, l2) = if l1 is
    C(h, t) then rev(t, C(h, l2))
    N then l2
fun rev1(l11, l22) = if l11 is
    C(h1, t1) then rev1(t1, C(h1, l22))
    N then l22
let p = C(K, N)
rev(rev1(p, N), N)
//│ |_LUMBERHACK_ERROR|↵|#fun| |rev|(|l1|,| |l2|)| |#=| |#if| |l1| |is|→|C|(|h|,| |t|)| |#then| |rev|(|t|,| |C|(|h|,| |l2|)|)|↵|N| |#then| |l2|←|↵|#fun| |rev1|(|l11|,| |l22|)| |#=| |#if| |l11| |is|→|C|(|h1|,| |t1|)| |#then| |rev1|(|t1|,| |C|(|h1|,| |l22|)|)|↵|N| |#then| |l22|←|↵|#let| |p| |#=| |C|(|K|,| |N|)|↵|rev|(|rev1|(|p|,| |N|)|,| |N|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun rev = l1, l2, => if l1 is ‹(C (h, t,)) then rev (t, C (h, l2,),); (N) then l2›; fun rev1 = l11, l22, => if l11 is ‹(C (h1, t1,)) then rev1 (t1, C (h1, l22,),); (N) then l22›; let p = C (K, N,); rev (rev1 (p, N,), N,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def rev:6 = (fun l1:9 -> (fun l2:10 -> case l1:9^1 of {
//│ 	C h:11 t:12 => ((rev:6^2 t:12^3) [C h:11^5 l2:10^6])
//│ 	| N => l2:10^9}))
//│ def rev1:7 = (fun l11:13 -> (fun l22:14 -> case l11:13^13 of {
//│ 	C h1:15 t1:16 => ((rev1:7^14 t1:16^15) [C h1:15^17 l22:14^18])
//│ 	| N => l22:14^21}))
//│ def p:8 = [C [K] [N]]
//│ ((rev:6^28 ((rev1:7^29 p:8^30) [N])) [N])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 19'34_callres) <: ([]: ([]: N) => ([]: 20'36_callres))
//│ ([rev:6^28]: 0'rev) <: ([]: ([]: 18'33_callres) => ([]: 19'34_callres))
//│ ([]: 17'31_callres) <: ([]: ([]: N) => ([]: 18'33_callres))
//│ ([rev1:7^29]: 1'rev1) <: ([]: ([p:8^30]: 2'p) => ([]: 17'31_callres))
//│ ([]: C(([]: K), ([]: N))) <: ([]: 2'p)
//│ ([]: ([]: 10'l11) => ([]: ([]: 11'l22) => ([]: 16'22_matchres))) <: ([]: 1'rev1)
//│ ([]: 11'l22) <: ([]: 16'22_matchres)
//│ ([]: 15'20_callres) <: ([]: 16'22_matchres)
//│ ([]: 10'l11) <: ([]: Destruct(C(12'h1, 13't1), N))
//│ ([]: 14'16_callres) <: ([]: ([]: C(([]: 12'h1), ([]: 11'l22))) => ([]: 15'20_callres))
//│ ([rev1:7^14]: 1'rev1) <: ([]: ([]: 13't1) => ([]: 14'16_callres))
//│ ([]: ([]: 3'l1) => ([]: ([]: 4'l2) => ([]: 9'10_matchres))) <: ([]: 0'rev)
//│ ([]: 4'l2) <: ([]: 9'10_matchres)
//│ ([]: 8'8_callres) <: ([]: 9'10_matchres)
//│ ([]: 3'l1) <: ([]: Destruct(C(5'h, 6't), N))
//│ ([]: 7'4_callres) <: ([]: ([]: C(([]: 5'h), ([]: 4'l2))) => ([]: 8'8_callres))
//│ ([rev:6^2]: 0'rev) <: ([]: ([]: 6't) => ([]: 7'4_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ N <: 15'20_callres
//│ 	[+rev1:7^29 · -rev1:7^14 · -rev1:7^14]  --->  [+rev1:7^29 · -rev1:7^14]
//│ C(12'h1, 11'l22) <: 3'l1
//│ 	[+rev1:7^14 · +rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]
//│ 	[+rev1:7^14 · +rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]
//│ C(12'h1, 11'l22) <: 15'20_callres
//│ 	[+rev1:7^14 · -rev1:7^14 · -rev1:7^14]  --->  [+rev1:7^14 · -rev1:7^14]
//│ N <: 8'8_callres
//│ 	[+rev:6^28 · -rev:6^2 · -rev:6^2]  --->  [+rev:6^28 · -rev:6^2]
//│ C(5'h, 4'l2) <: 8'8_callres
//│ 	[+rev:6^2 · -rev:6^2 · -rev:6^2]  --->  [+rev:6^2 · -rev:6^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'rev:
//│ 	0'rev[-rev:6^2] < ([]: ([]: 6't) => ([]: 7'4_callres))
//│ 	0'rev[-rev:6^28] < ([]: ([]: 18'33_callres) => ([]: 19'34_callres))
//│ 	([]: ([]: 3'l1) => ([]: ([]: 4'l2) => ([]: 9'10_matchres))) < []0'rev
//│ --------------
//│ 5'h:
//│ 	([+rev1:7^29 · -p:8^30]: K) < [+rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]5'h
//│ 	([+rev1:7^29 · -p:8^30]: K) < [+rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]5'h
//│ 	([+rev1:7^29 · -p:8^30]: K) < [+rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28]5'h
//│ 	([+rev1:7^29 · -p:8^30]: K) < [+rev1:7^14 · -rev1:7^29 · +rev:6^28]5'h
//│ --------------
//│ 10'l11:
//│ 	10'l11[] < ([]: Destruct(C(12'h1, 13't1), N))
//│ 	([+rev1:7^29 · -p:8^30]: N) < [+rev1:7^14]10'l11
//│ 	([]: C(([]: K), ([]: N))) < [-p:8^30 · +rev1:7^29]10'l11
//│ --------------
//│ 14'16_callres:
//│ 	14'16_callres[] < ([]: ([]: C(([]: 12'h1), ([]: 11'l22))) => ([]: 15'20_callres))
//│ 	([]: ([]: 11'l22) => ([]: 16'22_matchres)) < [-rev1:7^14]14'16_callres
//│ --------------
//│ 20'36_callres:
//│ 	([-rev:6^2 · +rev:6^28]: N) < [-rev:6^28]20'36_callres
//│ 	([-rev:6^2 · +rev:6^2]: C(([]: 5'h), ([]: 4'l2))) < [-rev:6^28]20'36_callres
//│ 	([+rev:6^2]: C(([]: 5'h), ([]: 4'l2))) < [-rev:6^28]20'36_callres
//│ 	([+rev:6^28]: N) < [-rev:6^28]20'36_callres
//│ --------------
//│ 1'rev1:
//│ 	1'rev1[-rev1:7^14] < ([]: ([]: 13't1) => ([]: 14'16_callres))
//│ 	1'rev1[-rev1:7^29] < ([]: ([p:8^30]: 2'p) => ([]: 17'31_callres))
//│ 	([]: ([]: 10'l11) => ([]: ([]: 11'l22) => ([]: 16'22_matchres))) < []1'rev1
//│ --------------
//│ 6't:
//│ 	6't[+rev:6^2] < ([]: 3'l1)
//│ 	([+rev1:7^29]: N) < [+rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]6't
//│ 	([+rev1:7^14]: C(([]: 12'h1), ([]: 11'l22))) < [+rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]6't
//│ 	([+rev1:7^29]: N) < [+rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]6't
//│ 	([+rev1:7^14]: C(([]: 12'h1), ([]: 11'l22))) < [+rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]6't
//│ 	([+rev1:7^29]: N) < [+rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28]6't
//│ 	([+rev1:7^14]: C(([]: 12'h1), ([]: 11'l22))) < [+rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28]6't
//│ 	([+rev1:7^29]: N) < [+rev1:7^14 · -rev1:7^29 · +rev:6^28]6't
//│ 	([+rev1:7^14]: C(([]: 12'h1), ([]: 11'l22))) < [+rev1:7^14 · -rev1:7^29 · +rev:6^28]6't
//│ --------------
//│ 9'10_matchres:
//│ 	9'10_matchres[-rev:6^2] < ([]: 8'8_callres)
//│ 	9'10_matchres[-rev:6^28] < ([]: 20'36_callres)
//│ 	([-rev:6^2 · +rev:6^28]: N) < []9'10_matchres
//│ 	([-rev:6^2 · +rev:6^2]: C(([]: 5'h), ([]: 4'l2))) < []9'10_matchres
//│ 	([+rev:6^2]: C(([]: 5'h), ([]: 4'l2))) < []9'10_matchres
//│ 	([+rev:6^28]: N) < []9'10_matchres
//│ --------------
//│ 13't1:
//│ 	13't1[+rev1:7^14] < ([]: 10'l11)
//│ 	([+rev1:7^29 · -p:8^30]: N) < []13't1
//│ --------------
//│ 2'p:
//│ 	2'p[-p:8^30 · +rev1:7^29] < ([]: 10'l11)
//│ 	([]: C(([]: K), ([]: N))) < []2'p
//│ --------------
//│ 17'31_callres:
//│ 	17'31_callres[] < ([]: ([]: N) => ([]: 18'33_callres))
//│ 	([]: ([]: 11'l22) => ([]: 16'22_matchres)) < [-rev1:7^29]17'31_callres
//│ --------------
//│ 12'h1:
//│ 	12'h1[+rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2] < ([]: 5'h)
//│ 	12'h1[+rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2] < ([]: 5'h)
//│ 	12'h1[+rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28] < ([]: 5'h)
//│ 	12'h1[+rev1:7^14 · -rev1:7^29 · +rev:6^28] < ([]: 5'h)
//│ 	([+rev1:7^29 · -p:8^30]: K) < []12'h1
//│ --------------
//│ 7'4_callres:
//│ 	7'4_callres[] < ([]: ([]: C(([]: 5'h), ([]: 4'l2))) => ([]: 8'8_callres))
//│ 	([]: ([]: 4'l2) => ([]: 9'10_matchres)) < [-rev:6^2]7'4_callres
//│ --------------
//│ 3'l1:
//│ 	3'l1[] < ([]: Destruct(C(5'h, 6't), N))
//│ 	([+rev:6^2 · +rev:6^28 · -rev1:7^29 · +rev1:7^14 · +rev1:7^14 · +rev1:7^29]: N) < [+rev:6^2]3'l1
//│ 	([+rev:6^28 · -rev1:7^29 · +rev1:7^14 · +rev1:7^14]: C(([]: 12'h1), ([]: 11'l22))) < [+rev:6^2]3'l1
//│ 	([+rev:6^28 · -rev1:7^29 · +rev1:7^14 · +rev1:7^29]: N) < [+rev:6^2]3'l1
//│ 	([+rev:6^2 · +rev:6^28 · -rev1:7^29 · -rev1:7^14 · +rev1:7^14 · +rev1:7^14 · +rev1:7^29]: N) < [+rev:6^2]3'l1
//│ 	([+rev:6^28 · -rev1:7^29 · -rev1:7^14 · +rev1:7^14 · +rev1:7^14]: C(([]: 12'h1), ([]: 11'l22))) < [+rev:6^2]3'l1
//│ 	([+rev:6^28 · -rev1:7^29 · -rev1:7^14 · +rev1:7^14 · +rev1:7^29]: N) < [+rev:6^2]3'l1
//│ 	([-rev1:7^29 · +rev1:7^29]: N) < [+rev:6^28]3'l1
//│ 	([-rev1:7^29 · +rev1:7^14]: C(([]: 12'h1), ([]: 11'l22))) < [+rev:6^28]3'l1
//│ 	([-rev1:7^29 · -rev1:7^14 · +rev1:7^14]: C(([]: 12'h1), ([]: 11'l22))) < [+rev:6^28]3'l1
//│ 	([-rev1:7^29 · -rev1:7^14 · +rev1:7^29]: N) < [+rev:6^28]3'l1
//│ --------------
//│ 18'33_callres:
//│ 	18'33_callres[+rev:6^28] < ([]: 3'l1)
//│ 	([-rev1:7^14 · +rev1:7^29]: N) < [-rev1:7^29]18'33_callres
//│ 	([-rev1:7^14 · +rev1:7^14]: C(([]: 12'h1), ([]: 11'l22))) < [-rev1:7^29]18'33_callres
//│ 	([+rev1:7^14]: C(([]: 12'h1), ([]: 11'l22))) < [-rev1:7^29]18'33_callres
//│ 	([+rev1:7^29]: N) < [-rev1:7^29]18'33_callres
//│ --------------
//│ 16'22_matchres:
//│ 	16'22_matchres[-rev1:7^14] < ([]: 15'20_callres)
//│ 	16'22_matchres[-rev1:7^29] < ([]: 18'33_callres)
//│ 	([-rev1:7^14 · +rev1:7^29]: N) < []16'22_matchres
//│ 	([-rev1:7^14 · +rev1:7^14]: C(([]: 12'h1), ([]: 11'l22))) < []16'22_matchres
//│ 	([+rev1:7^14]: C(([]: 12'h1), ([]: 11'l22))) < []16'22_matchres
//│ 	([+rev1:7^29]: N) < []16'22_matchres
//│ --------------
//│ 11'l22:
//│ 	11'l22[+rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2] < ([]: 6't)
//│ 	11'l22[+rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2] < ([]: 6't)
//│ 	11'l22[+rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28] < ([]: 6't)
//│ 	11'l22[+rev1:7^14 · -rev1:7^29 · +rev:6^28] < ([]: 6't)
//│ 	11'l22[] < ([]: 16'22_matchres)
//│ 	([]: C(([]: 12'h1), ([]: 11'l22))) < [+rev1:7^14]11'l22
//│ 	([]: N) < [+rev1:7^29]11'l22
//│ --------------
//│ 8'8_callres:
//│ 	8'8_callres[] < ([]: 9'10_matchres)
//│ 	([+rev:6^28]: N) < [-rev:6^2]8'8_callres
//│ 	([+rev:6^2]: C(([]: 5'h), ([]: 4'l2))) < [-rev:6^2]8'8_callres
//│ --------------
//│ 19'34_callres:
//│ 	19'34_callres[] < ([]: ([]: N) => ([]: 20'36_callres))
//│ 	([]: ([]: 4'l2) => ([]: 9'10_matchres)) < [-rev:6^28]19'34_callres
//│ --------------
//│ 4'l2:
//│ 	4'l2[] < ([]: 9'10_matchres)
//│ 	([]: C(([]: 5'h), ([]: 4'l2))) < [+rev:6^2]4'l2
//│ 	([]: N) < [+rev:6^28]4'l2
//│ --------------
//│ 15'20_callres:
//│ 	15'20_callres[] < ([]: 16'22_matchres)
//│ 	([+rev1:7^29]: N) < [-rev1:7^14]15'20_callres
//│ 	([+rev1:7^14]: C(([]: 12'h1), ([]: 11'l22))) < [-rev1:7^14]15'20_callres
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


// `id2` used twice
:ns
let p = C(C(C(id2(p))))
fun c(x) = if x is
    C(a) then if a is
        C(a) then c(a)
fun id2(yy) = yy
fun id(y) = id2(y)
c(id(p))
//│ |#let| |p| |#=| |C|(|C|(|C|(|id2|(|p|)|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|a|)| |#then| |c|(|a|)|←|←|↵|#fun| |id2|(|yy|)| |#=| |yy|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|c|(|id|(|p|)|)|
//│ Parsed: {let p = C (C (C (id2 (p,),),),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (a,)) then c (a,)››; fun id2 = yy, => yy; fun id = y, => id2 (y,); c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C [C [C (id2:8^1 p:6^2)]]]
//│ def c:7 = (fun x:10 -> case x:10^7 of {
//│ 	C a:11 => case a:11^8 of {
//│ 		C a:12 => (c:7^9 a:12^10)}})
//│ def id2:8 = (fun yy:13 -> yy:13^15)
//│ def id:9 = (fun y:14 -> (id2:8^17 y:14^18))
//│ (c:7^21 (id:9^22 p:6^23))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([c:7^21]: 1'c) <: ([]: ([]: 14'24_callres) => ([]: 15'25_callres))
//│ ([id:9^22]: 3'id) <: ([]: ([p:6^23]: 0'p) => ([]: 14'24_callres))
//│ ([]: ([]: 12'y) => ([]: 13'19_callres)) <: ([]: 3'id)
//│ ([id2:8^17]: 2'id2) <: ([]: ([]: 12'y) => ([]: 13'19_callres))
//│ ([]: ([]: 11'yy) => ([]: 11'yy)) <: ([]: 2'id2)
//│ ([]: ([]: 5'x) => ([]: 10'13_matchres)) <: ([]: 1'c)
//│ ([]: 9'12_matchres) <: ([]: 10'13_matchres)
//│ ([]: 5'x) <: ([]: Destruct(C(6'a)))
//│ ([]: 8'11_callres) <: ([]: 9'12_matchres)
//│ ([]: 6'a) <: ([]: Destruct(C(7'a)))
//│ ([c:7^9]: 1'c) <: ([]: ([]: 7'a) => ([]: 8'11_callres))
//│ ([]: C(([]: C(([]: C(([]: 4'3_callres))))))) <: ([]: 0'p)
//│ ([id2:8^1]: 2'id2) <: ([]: ([p:6^2]: 0'p) => ([]: 4'3_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(C(4'3_callres))) <: 7'a
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ C(C(C(4'3_callres))) <: 6'a
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'p:
//│ 	0'p[-p:6^2 · +id2:8^1] < ([]: 11'yy)
//│ 	0'p[-p:6^23 · +id:9^22] < ([]: 12'y)
//│ 	([]: C(([]: C(([]: C(([]: 4'3_callres))))))) < []0'p
//│ --------------
//│ 5'x:
//│ 	5'x[] < ([]: Destruct(C(6'a)))
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: 4'3_callres))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: 4'3_callres))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: 4'3_callres))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [+c:7^9]5'x
//│ 	([+c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: 4'3_callres))))) < [+c:7^9]5'x
//│ 	([+c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < [+c:7^9]5'x
//│ 	([-id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [+c:7^21]5'x
//│ 	([+c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < [+c:7^9]5'x
//│ 	([-id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [+c:7^21]5'x
//│ --------------
//│ 10'13_matchres:
//│ 	10'13_matchres[] < ([-c:7^9]: 8'11_callres)
//│ 	10'13_matchres[] < ([-c:7^21]: 15'25_callres)
//│ --------------
//│ 14'24_callres:
//│ 	14'24_callres[+c:7^21] < ([]: 5'x)
//│ 	([-id2:8^17 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-id:9^22]14'24_callres
//│ 	([-id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-id:9^22]14'24_callres
//│ --------------
//│ 1'c:
//│ 	1'c[-c:7^9] < ([]: ([]: 7'a) => ([]: 8'11_callres))
//│ 	1'c[-c:7^21] < ([]: ([]: 14'24_callres) => ([]: 15'25_callres))
//│ 	([]: ([]: 5'x) => ([]: 10'13_matchres)) < []1'c
//│ --------------
//│ 6'a:
//│ 	6'a[] < ([]: Destruct(C(7'a)))
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: 4'3_callres))))) < []6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < []6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < []6'a
//│ 	([-id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: 4'3_callres))))) < []6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < []6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < []6'a
//│ 	([-id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < []6'a
//│ 	([-id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < []6'a
//│ 	([-id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < []6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: 4'3_callres))))) < []6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < []6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < []6'a
//│ 	([-id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < []6'a
//│ 	([-id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < []6'a
//│ 	([-id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < []6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: 4'3_callres))))) < []6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < []6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < []6'a
//│ 	([-id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: 4'3_callres))))) < []6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < []6'a
//│ 	([-id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: 4'3_callres))))) < []6'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < []6'a
//│ 	([-id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]6'a
//│ 	([+c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2]: C(([]: C(([]: 4'3_callres))))) < []6'a
//│ 	([+c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < []6'a
//│ --------------
//│ 9'12_matchres:
//│ 	9'12_matchres[] < ([]: 10'13_matchres)
//│ --------------
//│ 13'19_callres:
//│ 	13'19_callres[] < ([-id:9^22]: 14'24_callres)
//│ 	([+id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-id2:8^17]13'19_callres
//│ 	([+id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-id2:8^17]13'19_callres
//│ --------------
//│ 2'id2:
//│ 	2'id2[-id2:8^1] < ([]: ([p:6^2]: 0'p) => ([]: 4'3_callres))
//│ 	2'id2[-id2:8^17] < ([]: ([]: 12'y) => ([]: 13'19_callres))
//│ 	([]: ([]: 11'yy) => ([]: 11'yy)) < []2'id2
//│ --------------
//│ 12'y:
//│ 	12'y[+id2:8^17] < ([]: 11'yy)
//│ 	([]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^23 · +id:9^22]12'y
//│ --------------
//│ 7'a:
//│ 	7'a[+c:7^9] < ([]: 5'x)
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < []7'a
//│ 	([-id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < []7'a
//│ 	([-id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]7'a
//│ 	([+c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < []7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < []7'a
//│ 	([-id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < []7'a
//│ 	([-id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]7'a
//│ 	([+c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < []7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: 4'3_callres))))) < []7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < []7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < []7'a
//│ 	([-id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < []7'a
//│ 	([-id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < []7'a
//│ 	([-id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < []7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: 4'3_callres))))) < []7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < []7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < []7'a
//│ 	([-id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < []7'a
//│ 	([-id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < []7'a
//│ 	([-id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: 4'3_callres))))) < []7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < []7'a
//│ 	([-id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]7'a
//│ 	([+c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: 4'3_callres))))) < []7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < []7'a
//│ 	([-id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]7'a
//│ 	([+c:7^9 · +c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2 · -id2:8^1 · +id2:8^1 · -p:6^2]: C(([]: C(([]: 4'3_callres))))) < []7'a
//│ 	([+c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^1 · -p:6^2]: C(([]: 4'3_callres))) < []7'a
//│ 	([+c:7^21 · -id:9^22 · -id2:8^17 · +id2:8^17 · +id:9^22 · -p:6^23]: C(([]: 4'3_callres))) < []7'a
//│ --------------
//│ 3'id:
//│ 	3'id[-id:9^22] < ([]: ([p:6^23]: 0'p) => ([]: 14'24_callres))
//│ 	([]: ([]: 12'y) => ([]: 13'19_callres)) < []3'id
//│ --------------
//│ 11'yy:
//│ 	11'yy[] < ([-id2:8^1]: 4'3_callres)
//│ 	11'yy[] < ([-id2:8^17]: 13'19_callres)
//│ 	([]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-p:6^2 · +id2:8^1]11'yy
//│ 	([+id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [+id2:8^17]11'yy
//│ --------------
//│ 8'11_callres:
//│ 	8'11_callres[] < ([]: 9'12_matchres)
//│ --------------
//│ 4'3_callres:
//│ 	4'3_callres[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 6'a)
//│ 	4'3_callres[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 6'a)
//│ 	4'3_callres[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9] < ([]: 7'a)
//│ 	4'3_callres[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 6'a)
//│ 	4'3_callres[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 6'a)
//│ 	4'3_callres[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9] < ([]: 7'a)
//│ 	4'3_callres[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 7'a)
//│ 	4'3_callres[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 7'a)
//│ 	4'3_callres[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 6'a)
//│ 	4'3_callres[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 6'a)
//│ 	4'3_callres[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 6'a)
//│ 	4'3_callres[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 7'a)
//│ 	4'3_callres[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 7'a)
//│ 	4'3_callres[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 7'a)
//│ 	4'3_callres[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 6'a)
//│ 	4'3_callres[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 6'a)
//│ 	4'3_callres[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 6'a)
//│ 	4'3_callres[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 7'a)
//│ 	4'3_callres[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 6'a)
//│ 	4'3_callres[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9] < ([]: 7'a)
//│ 	4'3_callres[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 6'a)
//│ 	4'3_callres[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9] < ([]: 7'a)
//│ 	4'3_callres[-p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9] < ([]: 6'a)
//│ 	4'3_callres[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9] < ([]: 6'a)
//│ 	([+id2:8^17 · +id:9^22 · -p:6^23]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-id2:8^1]4'3_callres
//│ 	([+id2:8^1 · -p:6^2]: C(([]: C(([]: C(([]: 4'3_callres))))))) < [-id2:8^1]4'3_callres
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


// no polymorphism
:ns
_LUMBERHACK_ERROR
fun id(x) = x
let rec p1 = C(p1)
fun c1(a) = if a is
    C(i) then c1(i)
id(c1)(id(p1))
//│ |_LUMBERHACK_ERROR|↵|#fun| |id|(|x|)| |#=| |x|↵|#let| |#rec| |p1| |#=| |C|(|p1|)|↵|#fun| |c1|(|a|)| |#=| |#if| |a| |is|→|C|(|i|)| |#then| |c1|(|i|)|←|↵|id|(|c1|)|(|id|(|p1|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun id = x, => x; let rec p1 = C (p1,); fun c1 = a, => if a is ‹(C (i,)) then c1 (i,)›; id (c1,) (id (p1,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def id:6 = (fun x:9 -> x:9^1)
//│ def p1:7 = [C p1:7^3]
//│ def c1:8 = (fun a:10 -> case a:10^5 of {
//│ 	C i:11 => (c1:8^6 i:11^7)})
//│ ((id:6^11 c1:8^12) (id:6^14 p1:7^15))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 8'13_callres) <: ([]: ([]: 9'16_callres) => ([]: 10'17_callres))
//│ ([id:6^14]: 0'id) <: ([]: ([p1:7^15]: 1'p1) => ([]: 9'16_callres))
//│ ([id:6^11]: 0'id) <: ([]: ([c1:8^12]: 2'c1) => ([]: 8'13_callres))
//│ ([]: ([]: 4'a) => ([]: 7'9_matchres)) <: ([]: 2'c1)
//│ ([]: 6'8_callres) <: ([]: 7'9_matchres)
//│ ([]: 4'a) <: ([]: Destruct(C(5'i)))
//│ ([c1:8^6]: 2'c1) <: ([]: ([]: 5'i) => ([]: 6'8_callres))
//│ ([]: C(([p1:7^3]: 1'p1))) <: ([]: 1'p1)
//│ ([]: ([]: 3'x) => ([]: 3'x)) <: ([]: 0'id)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error
//│ !!!!!!ERROR!!!!!!

:ns
_LUMBERHACK_ERROR
fun map(ls) = if ls is
    C(hh, tt) then C(
        (if hh is
            A then B
            AA then BB
        ),
        map(tt)
    )
    N then N
fun rev(a, lss) = if lss is
    C(h, t) then rev(C(h, a), t)
    N then a
// map(rev(N, C(A, C(AA, N))))
map(rev(N, primitive))
//│ |_LUMBERHACK_ERROR|↵|#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|hh|,| |tt|)| |#then| |C|(|→|(|#if| |hh| |is|→|A| |#then| |B|↵|AA| |#then| |BB|←|↵|)|,|↵|map|(|tt|)|←|↵|)|↵|N| |#then| |N|←|↵|#fun| |rev|(|a|,| |lss|)| |#=| |#if| |lss| |is|→|C|(|h|,| |t|)| |#then| |rev|(|C|(|h|,| |a|)|,| |t|)|↵|N| |#then| |a|←|↵|/* map(rev(N, C(A, C(AA, N))))*/|↵|map|(|rev|(|N|,| |primitive|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun map = ls, => if ls is ‹(C (hh, tt,)) then C ('(' if hh is ‹(A) then B; (AA) then BB›, ')', map (tt,),); (N) then N›; fun rev = a, lss, => if lss is ‹(C (h, t,)) then rev (C (h, a,), t,); (N) then a›; map (rev (N, primitive,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = (fun ls:8 -> case ls:8^1 of {
//│ 	C hh:9 tt:10 => [C case hh:9^2 of {
//│ 		A => [B]
//│ 		| AA => [BB]} (map:6^6 tt:10^7)]
//│ 	| N => [N]})
//│ def rev:7 = (fun a:11 -> (fun lss:12 -> case lss:12^13 of {
//│ 	C h:13 t:14 => ((rev:7^14 [C h:13^15 a:11^16]) t:14^19)
//│ 	| N => a:11^21}))
//│ (map:6^25 ((rev:7^26 [N]) primitive:3^29))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([map:6^25]: 0'map) <: ([]: ([]: 16'30_callres) => ([]: 17'31_callres))
//│ ([]: 15'28_callres) <: ([]: ([]: NoProd) => ([]: 16'30_callres))
//│ ([rev:7^26]: 1'rev) <: ([]: ([]: N) => ([]: 15'28_callres))
//│ ([]: ([]: 8'a) => ([]: ([]: 9'lss) => ([]: 14'22_matchres))) <: ([]: 1'rev)
//│ ([]: 8'a) <: ([]: 14'22_matchres)
//│ ([]: 13'20_callres) <: ([]: 14'22_matchres)
//│ ([]: 9'lss) <: ([]: Destruct(C(10'h, 11't), N))
//│ ([]: 12'18_callres) <: ([]: ([]: 11't) => ([]: 13'20_callres))
//│ ([rev:7^14]: 1'rev) <: ([]: ([]: C(([]: 10'h), ([]: 8'a))) => ([]: 12'18_callres))
//│ ([]: ([]: 2'ls) => ([]: 7'11_matchres)) <: ([]: 0'map)
//│ ([]: N) <: ([]: 7'11_matchres)
//│ ([]: C(([]: 5'5_matchres), ([]: 6'8_callres))) <: ([]: 7'11_matchres)
//│ ([]: 2'ls) <: ([]: Destruct(C(3'hh, 4'tt), N))
//│ ([map:6^6]: 0'map) <: ([]: ([]: 4'tt) => ([]: 6'8_callres))
//│ ([]: BB) <: ([]: 5'5_matchres)
//│ ([]: B) <: ([]: 5'5_matchres)
//│ ([]: 3'hh) <: ([]: Destruct(A, AA))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ N <: 13'20_callres
//│ 	[+rev:7^26 · -rev:7^14 · -rev:7^14]  --->  [+rev:7^26 · -rev:7^14]
//│ C(10'h, 8'a) <: 13'20_callres
//│ 	[+rev:7^14 · -rev:7^14 · -rev:7^14]  --->  [+rev:7^14 · -rev:7^14]
//│ C(10'h, 8'a) <: 2'ls
//│ 	[+rev:7^14 · +rev:7^14 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]  --->  [+rev:7^14 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]
//│ 	[+rev:7^14 · +rev:7^14 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]  --->  [+rev:7^14 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'map:
//│ 	0'map[-map:6^6] < ([]: ([]: 4'tt) => ([]: 6'8_callres))
//│ 	0'map[-map:6^25] < ([]: ([]: 16'30_callres) => ([]: 17'31_callres))
//│ 	([]: ([]: 2'ls) => ([]: 7'11_matchres)) < []0'map
//│ --------------
//│ 5'5_matchres:
//│ 	([]: B) < []5'5_matchres
//│ 	([]: BB) < []5'5_matchres
//│ --------------
//│ 10'h:
//│ 	10'h[+rev:7^14 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6] < ([]: 3'hh)
//│ 	10'h[+rev:7^14 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6] < ([]: 3'hh)
//│ 	10'h[+rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25] < ([]: 3'hh)
//│ 	10'h[+rev:7^14 · -rev:7^26 · +map:6^25] < ([]: 3'hh)
//│ --------------
//│ 14'22_matchres:
//│ 	14'22_matchres[-rev:7^14] < ([]: 13'20_callres)
//│ 	14'22_matchres[-rev:7^26] < ([]: 16'30_callres)
//│ 	([-rev:7^14 · +rev:7^26]: N) < []14'22_matchres
//│ 	([-rev:7^14 · +rev:7^14]: C(([]: 10'h), ([]: 8'a))) < []14'22_matchres
//│ 	([+rev:7^14]: C(([]: 10'h), ([]: 8'a))) < []14'22_matchres
//│ 	([+rev:7^26]: N) < []14'22_matchres
//│ --------------
//│ 1'rev:
//│ 	1'rev[-rev:7^14] < ([]: ([]: C(([]: 10'h), ([]: 8'a))) => ([]: 12'18_callres))
//│ 	1'rev[-rev:7^26] < ([]: ([]: N) => ([]: 15'28_callres))
//│ 	([]: ([]: 8'a) => ([]: ([]: 9'lss) => ([]: 14'22_matchres))) < []1'rev
//│ --------------
//│ 6'8_callres:
//│ 	([]: N) < [-map:6^6]6'8_callres
//│ 	([]: C(([]: 5'5_matchres), ([]: 6'8_callres))) < [-map:6^6]6'8_callres
//│ --------------
//│ 9'lss:
//│ 	9'lss[] < ([]: Destruct(C(10'h, 11't), N))
//│ --------------
//│ 13'20_callres:
//│ 	13'20_callres[] < ([]: 14'22_matchres)
//│ 	([+rev:7^26]: N) < [-rev:7^14]13'20_callres
//│ 	([+rev:7^14]: C(([]: 10'h), ([]: 8'a))) < [-rev:7^14]13'20_callres
//│ --------------
//│ 2'ls:
//│ 	2'ls[] < ([]: Destruct(C(3'hh, 4'tt), N))
//│ 	([+map:6^6 · +map:6^25 · -rev:7^26 · +rev:7^14 · +rev:7^14 · +rev:7^26]: N) < [+map:6^6]2'ls
//│ 	([+map:6^25 · -rev:7^26 · +rev:7^14 · +rev:7^14]: C(([]: 10'h), ([]: 8'a))) < [+map:6^6]2'ls
//│ 	([+map:6^25 · -rev:7^26 · +rev:7^14 · +rev:7^26]: N) < [+map:6^6]2'ls
//│ 	([+map:6^6 · +map:6^25 · -rev:7^26 · -rev:7^14 · +rev:7^14 · +rev:7^14 · +rev:7^26]: N) < [+map:6^6]2'ls
//│ 	([+map:6^25 · -rev:7^26 · -rev:7^14 · +rev:7^14 · +rev:7^14]: C(([]: 10'h), ([]: 8'a))) < [+map:6^6]2'ls
//│ 	([+map:6^25 · -rev:7^26 · -rev:7^14 · +rev:7^14 · +rev:7^26]: N) < [+map:6^6]2'ls
//│ 	([-rev:7^26 · +rev:7^26]: N) < [+map:6^25]2'ls
//│ 	([-rev:7^26 · +rev:7^14]: C(([]: 10'h), ([]: 8'a))) < [+map:6^25]2'ls
//│ 	([-rev:7^26 · -rev:7^14 · +rev:7^14]: C(([]: 10'h), ([]: 8'a))) < [+map:6^25]2'ls
//│ 	([-rev:7^26 · -rev:7^14 · +rev:7^26]: N) < [+map:6^25]2'ls
//│ --------------
//│ 17'31_callres:
//│ 	([]: C(([]: 5'5_matchres), ([]: 6'8_callres))) < [-map:6^25]17'31_callres
//│ 	([]: N) < [-map:6^25]17'31_callres
//│ --------------
//│ 12'18_callres:
//│ 	12'18_callres[] < ([]: ([]: 11't) => ([]: 13'20_callres))
//│ 	([]: ([]: 9'lss) => ([]: 14'22_matchres)) < [-rev:7^14]12'18_callres
//│ --------------
//│ 7'11_matchres:
//│ 	7'11_matchres[] < ([-map:6^6]: 6'8_callres)
//│ 	7'11_matchres[] < ([-map:6^25]: 17'31_callres)
//│ 	([]: C(([]: 5'5_matchres), ([]: 6'8_callres))) < []7'11_matchres
//│ 	([]: N) < []7'11_matchres
//│ --------------
//│ 3'hh:
//│ 	3'hh[] < ([]: Destruct(A, AA))
//│ --------------
//│ 16'30_callres:
//│ 	16'30_callres[+map:6^25] < ([]: 2'ls)
//│ 	([-rev:7^14 · +rev:7^26]: N) < [-rev:7^26]16'30_callres
//│ 	([-rev:7^14 · +rev:7^14]: C(([]: 10'h), ([]: 8'a))) < [-rev:7^26]16'30_callres
//│ 	([+rev:7^14]: C(([]: 10'h), ([]: 8'a))) < [-rev:7^26]16'30_callres
//│ 	([+rev:7^26]: N) < [-rev:7^26]16'30_callres
//│ --------------
//│ 11't:
//│ 	11't[] < ([+rev:7^14]: 9'lss)
//│ --------------
//│ 8'a:
//│ 	8'a[+rev:7^14 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6] < ([]: 4'tt)
//│ 	8'a[+rev:7^14 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6] < ([]: 4'tt)
//│ 	8'a[+rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25] < ([]: 4'tt)
//│ 	8'a[+rev:7^14 · -rev:7^26 · +map:6^25] < ([]: 4'tt)
//│ 	8'a[] < ([]: 14'22_matchres)
//│ 	([+rev:7^14]: C(([]: 10'h), ([]: 8'a))) < []8'a
//│ 	([+rev:7^26]: N) < []8'a
//│ --------------
//│ 4'tt:
//│ 	4'tt[+map:6^6] < ([]: 2'ls)
//│ 	([+rev:7^26]: N) < [+rev:7^14 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]4'tt
//│ 	([+rev:7^14]: C(([]: 10'h), ([]: 8'a))) < [+rev:7^14 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]4'tt
//│ 	([+rev:7^26]: N) < [+rev:7^14 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]4'tt
//│ 	([+rev:7^14]: C(([]: 10'h), ([]: 8'a))) < [+rev:7^14 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]4'tt
//│ 	([+rev:7^26]: N) < [+rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25]4'tt
//│ 	([+rev:7^14]: C(([]: 10'h), ([]: 8'a))) < [+rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25]4'tt
//│ 	([+rev:7^26]: N) < [+rev:7^14 · -rev:7^26 · +map:6^25]4'tt
//│ 	([+rev:7^14]: C(([]: 10'h), ([]: 8'a))) < [+rev:7^14 · -rev:7^26 · +map:6^25]4'tt
//│ --------------
//│ 15'28_callres:
//│ 	15'28_callres[] < ([]: ([]: NoProd) => ([]: 16'30_callres))
//│ 	([]: ([]: 9'lss) => ([]: 14'22_matchres)) < [-rev:7^26]15'28_callres
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<

:ns
_LUMBERHACK_ERROR
let p = Pair(A, B)
fun c(x) = if x is
    Pair(a, b) then c(Pair(b, a))
c(p)
//│ |_LUMBERHACK_ERROR|↵|#let| |p| |#=| |Pair|(|A|,| |B|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|Pair|(|a|,| |b|)| |#then| |c|(|Pair|(|b|,| |a|)|)|←|↵|c|(|p|)|
//│ Parsed: {_LUMBERHACK_ERROR; let p = Pair (A, B,); fun c = x, => if x is ‹(Pair (a, b,)) then c (Pair (b, a,),)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [Pair [A] [B]]
//│ def c:7 = (fun x:8 -> case x:8^4 of {
//│ 	Pair a:9 b:10 => (c:7^5 [Pair b:10^6 a:9^7])})
//│ (c:7^12 p:6^13)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([c:7^12]: 1'c) <: ([]: ([p:6^13]: 0'p) => ([]: 7'14_callres))
//│ ([]: ([]: 2'x) => ([]: 6'10_matchres)) <: ([]: 1'c)
//│ ([]: 5'9_callres) <: ([]: 6'10_matchres)
//│ ([]: 2'x) <: ([]: Destruct(Pair(3'a, 4'b)))
//│ ([c:7^5]: 1'c) <: ([]: ([]: Pair(([]: 4'b), ([]: 3'a))) => ([]: 5'9_callres))
//│ ([]: Pair(([]: A), ([]: B))) <: ([]: 0'p)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ B <: 4'b
//│ 	[-p:6^13 · +c:7^12 · +c:7^5 · +c:7^5]  --->  [-p:6^13 · +c:7^12]
//│ A <: 3'a
//│ 	[-p:6^13 · +c:7^12 · +c:7^5 · +c:7^5]  --->  [-p:6^13 · +c:7^12]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'p:
//│ 	0'p[-p:6^13 · +c:7^12] < ([]: 2'x)
//│ 	([]: Pair(([]: A), ([]: B))) < []0'p
//│ --------------
//│ 5'9_callres:
//│ 	5'9_callres[] < ([]: 6'10_matchres)
//│ --------------
//│ 1'c:
//│ 	1'c[-c:7^5] < ([]: ([]: Pair(([]: 4'b), ([]: 3'a))) => ([]: 5'9_callres))
//│ 	1'c[-c:7^12] < ([]: ([p:6^13]: 0'p) => ([]: 7'14_callres))
//│ 	([]: ([]: 2'x) => ([]: 6'10_matchres)) < []1'c
//│ --------------
//│ 6'10_matchres:
//│ 	6'10_matchres[] < ([-c:7^5]: 5'9_callres)
//│ 	6'10_matchres[] < ([-c:7^12]: 7'14_callres)
//│ --------------
//│ 2'x:
//│ 	2'x[] < ([]: Destruct(Pair(3'a, 4'b)))
//│ 	([]: Pair(([]: A), ([]: B))) < [-p:6^13 · +c:7^12]2'x
//│ 	([+c:7^5]: Pair(([]: 4'b), ([]: 3'a))) < []2'x
//│ --------------
//│ 3'a:
//│ 	3'a[+c:7^5] < ([]: 4'b)
//│ 	([+c:7^12 · -p:6^13]: B) < [+c:7^5]3'a
//│ 	([+c:7^12 · -p:6^13]: A) < []3'a
//│ --------------
//│ 4'b:
//│ 	4'b[+c:7^5] < ([]: 3'a)
//│ 	([+c:7^12 · -p:6^13]: B) < []4'b
//│ 	([+c:7^12 · -p:6^13]: A) < [+c:7^5]4'b
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


// pushing in of auxiliary parameters
// FIXME: weird recursive
:ns
fun last(x, ys) = if ys is
    N then x
    C(h, t) then last(h, t)
fun lastDrive(xs) = if xs is
    N then None
    C(hh, tt) then Some(last(hh, tt))
lastDrive(C(1, C(2, N)))
//│ |#fun| |last|(|x|,| |ys|)| |#=| |#if| |ys| |is|→|N| |#then| |x|↵|C|(|h|,| |t|)| |#then| |last|(|h|,| |t|)|←|↵|#fun| |lastDrive|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |None|↵|C|(|hh|,| |tt|)| |#then| |Some|(|last|(|hh|,| |tt|)|)|←|↵|lastDrive|(|C|(|1|,| |C|(|2|,| |N|)|)|)|
//│ Parsed: {fun last = x, ys, => if ys is ‹(N) then x; (C (h, t,)) then last (h, t,)›; fun lastDrive = xs, => if xs is ‹(N) then None; (C (hh, tt,)) then Some (last (hh, tt,),)›; lastDrive (C (1, C (2, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def last:6 = (fun x:8 -> (fun ys:9 -> case ys:9^1 of {
//│ 	N => x:8^2
//│ 	| C h:10 t:11 => ((last:6^3 h:10^4) t:11^6)}))
//│ def lastDrive:7 = (fun xs:12 -> case xs:12^11 of {
//│ 	N => [None]
//│ 	| C hh:13 tt:14 => [Some ((last:6^13 hh:13^14) tt:14^16)]})
//│ (lastDrive:7^21 [C 1 [C 2 [N]]])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([lastDrive:7^21]: 1'lastDrive) <: ([]: ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) => ([]: 15'27_callres))
//│ ([]: ([]: 9'xs) => ([]: 14'19_matchres)) <: ([]: 1'lastDrive)
//│ ([]: Some(([]: 13'17_callres))) <: ([]: 14'19_matchres)
//│ ([]: None) <: ([]: 14'19_matchres)
//│ ([]: 9'xs) <: ([]: Destruct(N, C(10'hh, 11'tt)))
//│ ([]: 12'15_callres) <: ([]: ([]: 11'tt) => ([]: 13'17_callres))
//│ ([last:6^13]: 0'last) <: ([]: ([]: 10'hh) => ([]: 12'15_callres))
//│ ([]: ([]: 2'x) => ([]: ([]: 3'ys) => ([]: 8'8_matchres))) <: ([]: 0'last)
//│ ([]: 7'7_callres) <: ([]: 8'8_matchres)
//│ ([]: 2'x) <: ([]: 8'8_matchres)
//│ ([]: 3'ys) <: ([]: Destruct(N, C(4'h, 5't)))
//│ ([]: 6'5_callres) <: ([]: ([]: 5't) => ([]: 7'7_callres))
//│ ([last:6^3]: 0'last) <: ([]: ([]: 4'h) => ([]: 6'5_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ Int <: 7'7_callres
//│ 	[+lastDrive:7^21 · +last:6^13 · +last:6^3 · -last:6^3 · -last:6^3]  --->  [+lastDrive:7^21 · +last:6^13 · +last:6^3 · -last:6^3]
//│ 	[+lastDrive:7^21 · +last:6^13 · -last:6^3 · -last:6^3]  --->  [+lastDrive:7^21 · +last:6^13 · -last:6^3]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'last:
//│ 	0'last[-last:6^3] < ([]: ([]: 4'h) => ([]: 6'5_callres))
//│ 	0'last[-last:6^13] < ([]: ([]: 10'hh) => ([]: 12'15_callres))
//│ 	([]: ([]: 2'x) => ([]: ([]: 3'ys) => ([]: 8'8_matchres))) < []0'last
//│ --------------
//│ 5't:
//│ 	5't[] < ([+last:6^3]: 3'ys)
//│ 	([+last:6^13 · +lastDrive:7^21]: N) < []5't
//│ --------------
//│ 10'hh:
//│ 	10'hh[+last:6^13] < ([]: 2'x)
//│ 	([+lastDrive:7^21]: Int) < []10'hh
//│ --------------
//│ 14'19_matchres:
//│ 	14'19_matchres[] < ([-lastDrive:7^21]: 15'27_callres)
//│ 	([]: None) < []14'19_matchres
//│ 	([]: Some(([]: 13'17_callres))) < []14'19_matchres
//│ --------------
//│ 1'lastDrive:
//│ 	1'lastDrive[-lastDrive:7^21] < ([]: ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) => ([]: 15'27_callres))
//│ 	([]: ([]: 9'xs) => ([]: 14'19_matchres)) < []1'lastDrive
//│ --------------
//│ 6'5_callres:
//│ 	6'5_callres[] < ([]: ([]: 5't) => ([]: 7'7_callres))
//│ 	([]: ([]: 3'ys) => ([]: 8'8_matchres)) < [-last:6^3]6'5_callres
//│ --------------
//│ 9'xs:
//│ 	9'xs[] < ([]: Destruct(N, C(10'hh, 11'tt)))
//│ 	([+lastDrive:7^21]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < []9'xs
//│ --------------
//│ 13'17_callres:
//│ 	([-last:6^3 · +last:6^13 · +lastDrive:7^21]: Int) < [-last:6^13]13'17_callres
//│ 	([-last:6^3 · +last:6^3 · +last:6^13 · +lastDrive:7^21]: Int) < [-last:6^13]13'17_callres
//│ 	([+last:6^3 · +last:6^13 · +lastDrive:7^21]: Int) < [-last:6^13]13'17_callres
//│ 	([+last:6^13 · +lastDrive:7^21]: Int) < [-last:6^13]13'17_callres
//│ --------------
//│ 2'x:
//│ 	2'x[] < ([]: 8'8_matchres)
//│ 	([+last:6^13 · +lastDrive:7^21]: Int) < [+last:6^3]2'x
//│ 	([+lastDrive:7^21]: Int) < [+last:6^13]2'x
//│ --------------
//│ 12'15_callres:
//│ 	12'15_callres[] < ([]: ([]: 11'tt) => ([]: 13'17_callres))
//│ 	([]: ([]: 3'ys) => ([]: 8'8_matchres)) < [-last:6^13]12'15_callres
//│ --------------
//│ 7'7_callres:
//│ 	7'7_callres[] < ([]: 8'8_matchres)
//│ 	([+last:6^13 · +lastDrive:7^21]: Int) < [-last:6^3]7'7_callres
//│ 	([+last:6^3 · +last:6^13 · +lastDrive:7^21]: Int) < [-last:6^3]7'7_callres
//│ --------------
//│ 3'ys:
//│ 	3'ys[] < ([]: Destruct(N, C(4'h, 5't)))
//│ 	([+last:6^13 · +lastDrive:7^21]: N) < [+last:6^3]3'ys
//│ 	([+lastDrive:7^21]: C(([]: Int), ([]: N))) < [+last:6^13]3'ys
//│ --------------
//│ 11'tt:
//│ 	11'tt[] < ([+last:6^13]: 3'ys)
//│ 	([+lastDrive:7^21]: C(([]: Int), ([]: N))) < []11'tt
//│ --------------
//│ 8'8_matchres:
//│ 	8'8_matchres[-last:6^3] < ([]: 7'7_callres)
//│ 	8'8_matchres[-last:6^13] < ([]: 13'17_callres)
//│ 	([-last:6^3 · +last:6^13 · +lastDrive:7^21]: Int) < []8'8_matchres
//│ 	([-last:6^3 · +last:6^3 · +last:6^13 · +lastDrive:7^21]: Int) < []8'8_matchres
//│ 	([+last:6^3 · +last:6^13 · +lastDrive:7^21]: Int) < []8'8_matchres
//│ 	([+last:6^13 · +lastDrive:7^21]: Int) < []8'8_matchres
//│ --------------
//│ 4'h:
//│ 	4'h[+last:6^3] < ([]: 2'x)
//│ 	([+last:6^13 · +lastDrive:7^21]: Int) < []4'h
//│ --------------
//│ 15'27_callres:
//│ 	([]: None) < [-lastDrive:7^21]15'27_callres
//│ 	([]: Some(([]: 13'17_callres))) < [-lastDrive:7^21]15'27_callres
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<

:ns
fun inter(xs, ys) = if xs is
    N then ys
    C(h, t) then C(h, inter(ys, t))
inter(C(1, C(2, C(3, N))), C(9, C(8, C(7, N))))
//│ |#fun| |inter|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|N| |#then| |ys|↵|C|(|h|,| |t|)| |#then| |C|(|h|,| |inter|(|ys|,| |t|)|)|←|↵|inter|(|C|(|1|,| |C|(|2|,| |C|(|3|,| |N|)|)|)|,| |C|(|9|,| |C|(|8|,| |C|(|7|,| |N|)|)|)|)|
//│ Parsed: {fun inter = xs, ys, => if xs is ‹(N) then ys; (C (h, t,)) then C (h, inter (ys, t,),)›; inter (C (1, C (2, C (3, N,),),), C (9, C (8, C (7, N,),),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def inter:6 = (fun xs:7 -> (fun ys:8 -> case xs:7^1 of {
//│ 	N => ys:8^2
//│ 	| C h:9 t:10 => [C h:9^3 ((inter:6^4 ys:8^5) t:10^7)]}))
//│ ((inter:6^13 [C 1 [C 2 [C 3 [N]]]]) [C 9 [C 8 [C 7 [N]]]])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 8'21_callres) <: ([]: ([]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))))) => ([]: 9'29_callres))
//│ ([inter:6^13]: 0'inter) <: ([]: ([]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))))) => ([]: 8'21_callres))
//│ ([]: ([]: 1'xs) => ([]: ([]: 2'ys) => ([]: 7'10_matchres))) <: ([]: 0'inter)
//│ ([]: C(([]: 3'h), ([]: 6'8_callres))) <: ([]: 7'10_matchres)
//│ ([]: 2'ys) <: ([]: 7'10_matchres)
//│ ([]: 1'xs) <: ([]: Destruct(N, C(3'h, 4't)))
//│ ([]: 5'6_callres) <: ([]: ([]: 4't) => ([]: 6'8_callres))
//│ ([inter:6^4]: 0'inter) <: ([]: ([]: 2'ys) => ([]: 5'6_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'inter:
//│ 	0'inter[-inter:6^4] < ([]: ([]: 2'ys) => ([]: 5'6_callres))
//│ 	0'inter[-inter:6^13] < ([]: ([]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))))) => ([]: 8'21_callres))
//│ 	([]: ([]: 1'xs) => ([]: ([]: 2'ys) => ([]: 7'10_matchres))) < []0'inter
//│ --------------
//│ 5'6_callres:
//│ 	5'6_callres[] < ([]: ([]: 4't) => ([]: 6'8_callres))
//│ 	([]: ([]: 2'ys) => ([]: 7'10_matchres)) < [-inter:6^4]5'6_callres
//│ --------------
//│ 1'xs:
//│ 	1'xs[] < ([]: Destruct(N, C(3'h, 4't)))
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: N) < [+inter:6^4]1'xs
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: C(([]: Int), ([]: N))) < [+inter:6^4]1'xs
//│ 	([+inter:6^4 · +inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < [+inter:6^4]1'xs
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: N) < [+inter:6^4]1'xs
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: C(([]: Int), ([]: N))) < [+inter:6^4]1'xs
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < [+inter:6^4]1'xs
//│ 	([+inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))))) < [+inter:6^4]1'xs
//│ 	([+inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))))) < []1'xs
//│ --------------
//│ 6'8_callres:
//│ 	([]: C(([]: 3'h), ([]: 6'8_callres))) < [-inter:6^4]6'8_callres
//│ 	([+inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))))) < [-inter:6^4]6'8_callres
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: N) < [-inter:6^4]6'8_callres
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: C(([]: Int), ([]: N))) < [-inter:6^4]6'8_callres
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < [-inter:6^4]6'8_callres
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: N) < [-inter:6^4]6'8_callres
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: C(([]: Int), ([]: N))) < [-inter:6^4]6'8_callres
//│ 	([+inter:6^4 · +inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < [-inter:6^4]6'8_callres
//│ --------------
//│ 9'29_callres:
//│ 	([+inter:6^4 · +inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < [-inter:6^13]9'29_callres
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: C(([]: Int), ([]: N))) < [-inter:6^13]9'29_callres
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: N) < [-inter:6^13]9'29_callres
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < [-inter:6^13]9'29_callres
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: C(([]: Int), ([]: N))) < [-inter:6^13]9'29_callres
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: N) < [-inter:6^13]9'29_callres
//│ 	([+inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))))) < [-inter:6^13]9'29_callres
//│ 	([]: C(([]: 3'h), ([]: 6'8_callres))) < [-inter:6^13]9'29_callres
//│ --------------
//│ 2'ys:
//│ 	2'ys[+inter:6^4] < ([]: 1'xs)
//│ 	2'ys[] < ([]: 7'10_matchres)
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: N) < [+inter:6^4]2'ys
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^13]: C(([]: Int), ([]: N))) < [+inter:6^4]2'ys
//│ 	([+inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < [+inter:6^4]2'ys
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: N) < [+inter:6^4]2'ys
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: C(([]: Int), ([]: N))) < [+inter:6^4]2'ys
//│ 	([+inter:6^4 · +inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < [+inter:6^4]2'ys
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))))) < [+inter:6^13]2'ys
//│ --------------
//│ 7'10_matchres:
//│ 	7'10_matchres[-inter:6^4] < ([]: 6'8_callres)
//│ 	7'10_matchres[-inter:6^13] < ([]: 9'29_callres)
//│ 	([+inter:6^4 · +inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < []7'10_matchres
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: C(([]: Int), ([]: N))) < []7'10_matchres
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: N) < []7'10_matchres
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < []7'10_matchres
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: C(([]: Int), ([]: N))) < []7'10_matchres
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: N) < []7'10_matchres
//│ 	([+inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))))) < []7'10_matchres
//│ 	([]: C(([]: 3'h), ([]: 6'8_callres))) < []7'10_matchres
//│ --------------
//│ 3'h:
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: Int) < []3'h
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^13]: Int) < []3'h
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: Int) < []3'h
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: Int) < []3'h
//│ 	([+inter:6^4 · +inter:6^13]: Int) < []3'h
//│ 	([+inter:6^13]: Int) < []3'h
//│ --------------
//│ 8'21_callres:
//│ 	8'21_callres[] < ([]: ([]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))))) => ([]: 9'29_callres))
//│ 	([]: ([]: 2'ys) => ([]: 7'10_matchres)) < [-inter:6^13]8'21_callres
//│ --------------
//│ 4't:
//│ 	4't[] < ([+inter:6^4]: 2'ys)
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: N) < []4't
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^13]: C(([]: Int), ([]: N))) < []4't
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: N) < []4't
//│ 	([+inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^13]: C(([]: Int), ([]: N))) < []4't
//│ 	([+inter:6^4 · +inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < []4't
//│ 	([+inter:6^13]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < []4't
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<

:ns
_LUMBERHACK_ERROR
let add = primitive
fun idxSum(ls) = if ls is
    N then acc => 0
    C(h, t) then acc => add(acc, idxSum(t)(add(acc, 1)))
fun rev(lss, a) = if lss is
    N then a
    C(hh, tt) then rev(tt, C(hh, a))
idxSum(rev(primitive, N))(0)
//│ |_LUMBERHACK_ERROR|↵|#let| |add| |#=| |primitive|↵|#fun| |idxSum|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |acc| |=>| |0|↵|C|(|h|,| |t|)| |#then| |acc| |=>| |add|(|acc|,| |idxSum|(|t|)|(|add|(|acc|,| |1|)|)|)|←|↵|#fun| |rev|(|lss|,| |a|)| |#=| |#if| |lss| |is|→|N| |#then| |a|↵|C|(|hh|,| |tt|)| |#then| |rev|(|tt|,| |C|(|hh|,| |a|)|)|←|↵|idxSum|(|rev|(|primitive|,| |N|)|)|(|0|)|
//│ Parsed: {_LUMBERHACK_ERROR; let add = primitive; fun idxSum = ls, => if ls is ‹(N) then acc, => 0; (C (h, t,)) then acc, => add (acc, idxSum (t,) (add (acc, 1,),),)›; fun rev = lss, a, => if lss is ‹(N) then a; (C (hh, tt,)) then rev (tt, C (hh, a,),)›; idxSum (rev (primitive, N,),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def add:4 = primitive:3^1
//│ def idxSum:7 = (fun ls:9 -> case ls:9^2 of {
//│ 	N => (fun acc:10 -> 0)
//│ 	| C h:11 t:12 => (fun acc:13 -> ((add:4^5 acc:13^6) ((idxSum:7^8 t:12^9) ((add:4^11 acc:13^12) 1))))})
//│ def rev:8 = (fun lss:14 -> (fun a:15 -> case lss:14^21 of {
//│ 	N => a:15^22
//│ 	| C hh:16 tt:17 => ((rev:8^23 tt:17^24) [C hh:16^26 a:15^27])}))
//│ ((idxSum:7^33 ((rev:8^34 primitive:3^35) [N])) 0)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 24'39_callres) <: ([]: ([]: Int) => ([]: 25'41_callres))
//│ ([idxSum:7^33]: 1'idxSum) <: ([]: ([]: 23'38_callres) => ([]: 24'39_callres))
//│ ([]: 22'36_callres) <: ([]: ([]: N) => ([]: 23'38_callres))
//│ ([rev:8^34]: 2'rev) <: ([]: ([]: NoProd) => ([]: 22'36_callres))
//│ ([]: ([]: 15'lss) => ([]: ([]: 16'a) => ([]: 21'30_matchres))) <: ([]: 2'rev)
//│ ([]: 20'29_callres) <: ([]: 21'30_matchres)
//│ ([]: 16'a) <: ([]: 21'30_matchres)
//│ ([]: 15'lss) <: ([]: Destruct(N, C(17'hh, 18'tt)))
//│ ([]: 19'25_callres) <: ([]: ([]: C(([]: 17'hh), ([]: 16'a))) => ([]: 20'29_callres))
//│ ([rev:8^23]: 2'rev) <: ([]: ([]: 18'tt) => ([]: 19'25_callres))
//│ ([]: ([]: 3'ls) => ([]: 14'19_matchres)) <: ([]: 1'idxSum)
//│ ([]: ([]: 7'acc) => ([]: 13'17_callres)) <: ([]: 14'19_matchres)
//│ ([]: ([]: 4'acc) => ([]: Int)) <: ([]: 14'19_matchres)
//│ ([]: 3'ls) <: ([]: Destruct(N, C(5'h, 6't)))
//│ ([]: 8'7_callres) <: ([]: ([]: 12'16_callres) => ([]: 13'17_callres))
//│ ([]: 9'10_callres) <: ([]: ([]: 11'15_callres) => ([]: 12'16_callres))
//│ ([]: 10'13_callres) <: ([]: ([]: Int) => ([]: 11'15_callres))
//│ ([]: ([]: Destruct(Int)) => ([]: ([]: Destruct(Int)) => ([]: Int))) <: ([]: ([]: 7'acc) => ([]: 10'13_callres))
//│ ([idxSum:7^8]: 1'idxSum) <: ([]: ([]: 6't) => ([]: 9'10_callres))
//│ ([]: ([]: Destruct(Int)) => ([]: ([]: Destruct(Int)) => ([]: Int))) <: ([]: ([]: 7'acc) => ([]: 8'7_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ N <: 20'29_callres
//│ 	[+rev:8^34 · -rev:8^23 · -rev:8^23]  --->  [+rev:8^34 · -rev:8^23]
//│ C(17'hh, 16'a) <: 20'29_callres
//│ 	[+rev:8^23 · -rev:8^23 · -rev:8^23]  --->  [+rev:8^23 · -rev:8^23]
//│ C(17'hh, 16'a) <: 3'ls
//│ 	[+rev:8^23 · +rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ 	[+rev:8^23 · +rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 10'13_callres:
//│ 	10'13_callres[] < ([]: ([]: Int) => ([]: 11'15_callres))
//│ 	([]: ([]: Destruct(Int)) => ([]: Int)) < []10'13_callres
//│ --------------
//│ 14'19_matchres:
//│ 	14'19_matchres[] < ([-idxSum:7^8]: 9'10_callres)
//│ 	14'19_matchres[] < ([-idxSum:7^33]: 24'39_callres)
//│ 	([]: ([]: 4'acc) => ([]: Int)) < []14'19_matchres
//│ 	([]: ([]: 7'acc) => ([]: 13'17_callres)) < []14'19_matchres
//│ --------------
//│ 20'29_callres:
//│ 	20'29_callres[] < ([]: 21'30_matchres)
//│ 	([+rev:8^34]: N) < [-rev:8^23]20'29_callres
//│ 	([+rev:8^23]: C(([]: 17'hh), ([]: 16'a))) < [-rev:8^23]20'29_callres
//│ --------------
//│ 1'idxSum:
//│ 	1'idxSum[-idxSum:7^8] < ([]: ([]: 6't) => ([]: 9'10_callres))
//│ 	1'idxSum[-idxSum:7^33] < ([]: ([]: 23'38_callres) => ([]: 24'39_callres))
//│ 	([]: ([]: 3'ls) => ([]: 14'19_matchres)) < []1'idxSum
//│ --------------
//│ 6't:
//│ 	6't[+idxSum:7^8] < ([]: 3'ls)
//│ 	([+rev:8^34]: N) < [+rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]6't
//│ 	([+rev:8^23]: C(([]: 17'hh), ([]: 16'a))) < [+rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]6't
//│ 	([+rev:8^34]: N) < [+rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]6't
//│ 	([+rev:8^23]: C(([]: 17'hh), ([]: 16'a))) < [+rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]6't
//│ 	([+rev:8^34]: N) < [+rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33]6't
//│ 	([+rev:8^23]: C(([]: 17'hh), ([]: 16'a))) < [+rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33]6't
//│ 	([+rev:8^34]: N) < [+rev:8^23 · -rev:8^34 · +idxSum:7^33]6't
//│ 	([+rev:8^23]: C(([]: 17'hh), ([]: 16'a))) < [+rev:8^23 · -rev:8^34 · +idxSum:7^33]6't
//│ --------------
//│ 21'30_matchres:
//│ 	21'30_matchres[-rev:8^23] < ([]: 20'29_callres)
//│ 	21'30_matchres[-rev:8^34] < ([]: 23'38_callres)
//│ 	([-rev:8^23 · +rev:8^34]: N) < []21'30_matchres
//│ 	([-rev:8^23 · +rev:8^23]: C(([]: 17'hh), ([]: 16'a))) < []21'30_matchres
//│ 	([+rev:8^23]: C(([]: 17'hh), ([]: 16'a))) < []21'30_matchres
//│ 	([+rev:8^34]: N) < []21'30_matchres
//│ --------------
//│ 9'10_callres:
//│ 	9'10_callres[] < ([]: ([]: 11'15_callres) => ([]: 12'16_callres))
//│ 	([]: ([]: 7'acc) => ([]: 13'17_callres)) < [-idxSum:7^8]9'10_callres
//│ 	([]: ([]: 4'acc) => ([]: Int)) < [-idxSum:7^8]9'10_callres
//│ --------------
//│ 13'17_callres:
//│ 	13'17_callres[-idxSum:7^8] < ([]: 12'16_callres)
//│ 	13'17_callres[-idxSum:7^33] < ([]: 25'41_callres)
//│ 	([]: Int) < []13'17_callres
//│ --------------
//│ 2'rev:
//│ 	2'rev[-rev:8^23] < ([]: ([]: 18'tt) => ([]: 19'25_callres))
//│ 	2'rev[-rev:8^34] < ([]: ([]: NoProd) => ([]: 22'36_callres))
//│ 	([]: ([]: 15'lss) => ([]: ([]: 16'a) => ([]: 21'30_matchres))) < []2'rev
//│ --------------
//│ 17'hh:
//│ 	17'hh[+rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8] < ([]: 5'h)
//│ 	17'hh[+rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8] < ([]: 5'h)
//│ 	17'hh[+rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33] < ([]: 5'h)
//│ 	17'hh[+rev:8^23 · -rev:8^34 · +idxSum:7^33] < ([]: 5'h)
//│ --------------
//│ 22'36_callres:
//│ 	22'36_callres[] < ([]: ([]: N) => ([]: 23'38_callres))
//│ 	([]: ([]: 16'a) => ([]: 21'30_matchres)) < [-rev:8^34]22'36_callres
//│ --------------
//│ 12'16_callres:
//│ 	12'16_callres[] < ([]: Destruct(Int))
//│ 	([]: Int) < [-idxSum:7^8]12'16_callres
//│ 	([-idxSum:7^8]: Int) < []12'16_callres
//│ --------------
//│ 7'acc:
//│ 	7'acc[] < ([]: Destruct(Int))
//│ 	7'acc[] < ([]: Destruct(Int))
//│ 	([]: Int) < [+idxSum:7^8]7'acc
//│ 	([]: Int) < [+idxSum:7^33]7'acc
//│ --------------
//│ 3'ls:
//│ 	3'ls[] < ([]: Destruct(N, C(5'h, 6't)))
//│ 	([+idxSum:7^8 · +idxSum:7^33 · -rev:8^34 · +rev:8^23 · +rev:8^23 · +rev:8^34]: N) < [+idxSum:7^8]3'ls
//│ 	([+idxSum:7^33 · -rev:8^34 · +rev:8^23 · +rev:8^23]: C(([]: 17'hh), ([]: 16'a))) < [+idxSum:7^8]3'ls
//│ 	([+idxSum:7^33 · -rev:8^34 · +rev:8^23 · +rev:8^34]: N) < [+idxSum:7^8]3'ls
//│ 	([+idxSum:7^8 · +idxSum:7^33 · -rev:8^34 · -rev:8^23 · +rev:8^23 · +rev:8^23 · +rev:8^34]: N) < [+idxSum:7^8]3'ls
//│ 	([+idxSum:7^33 · -rev:8^34 · -rev:8^23 · +rev:8^23 · +rev:8^23]: C(([]: 17'hh), ([]: 16'a))) < [+idxSum:7^8]3'ls
//│ 	([+idxSum:7^33 · -rev:8^34 · -rev:8^23 · +rev:8^23 · +rev:8^34]: N) < [+idxSum:7^8]3'ls
//│ 	([-rev:8^34 · +rev:8^34]: N) < [+idxSum:7^33]3'ls
//│ 	([-rev:8^34 · +rev:8^23]: C(([]: 17'hh), ([]: 16'a))) < [+idxSum:7^33]3'ls
//│ 	([-rev:8^34 · -rev:8^23 · +rev:8^23]: C(([]: 17'hh), ([]: 16'a))) < [+idxSum:7^33]3'ls
//│ 	([-rev:8^34 · -rev:8^23 · +rev:8^34]: N) < [+idxSum:7^33]3'ls
//│ --------------
//│ 18'tt:
//│ 	18'tt[+rev:8^23] < ([]: 15'lss)
//│ --------------
//│ 16'a:
//│ 	16'a[+rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8] < ([]: 6't)
//│ 	16'a[+rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8] < ([]: 6't)
//│ 	16'a[+rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33] < ([]: 6't)
//│ 	16'a[+rev:8^23 · -rev:8^34 · +idxSum:7^33] < ([]: 6't)
//│ 	16'a[] < ([]: 21'30_matchres)
//│ 	([]: C(([]: 17'hh), ([]: 16'a))) < [+rev:8^23]16'a
//│ 	([]: N) < [+rev:8^34]16'a
//│ --------------
//│ 11'15_callres:
//│ 	11'15_callres[] < ([+idxSum:7^8]: 7'acc)
//│ 	11'15_callres[] < ([+idxSum:7^8]: 4'acc)
//│ 	([]: Int) < []11'15_callres
//│ --------------
//│ 23'38_callres:
//│ 	23'38_callres[+idxSum:7^33] < ([]: 3'ls)
//│ 	([-rev:8^23 · +rev:8^34]: N) < [-rev:8^34]23'38_callres
//│ 	([-rev:8^23 · +rev:8^23]: C(([]: 17'hh), ([]: 16'a))) < [-rev:8^34]23'38_callres
//│ 	([+rev:8^23]: C(([]: 17'hh), ([]: 16'a))) < [-rev:8^34]23'38_callres
//│ 	([+rev:8^34]: N) < [-rev:8^34]23'38_callres
//│ --------------
//│ 8'7_callres:
//│ 	8'7_callres[] < ([]: ([]: 12'16_callres) => ([]: 13'17_callres))
//│ 	([]: ([]: Destruct(Int)) => ([]: Int)) < []8'7_callres
//│ --------------
//│ 19'25_callres:
//│ 	19'25_callres[] < ([]: ([]: C(([]: 17'hh), ([]: 16'a))) => ([]: 20'29_callres))
//│ 	([]: ([]: 16'a) => ([]: 21'30_matchres)) < [-rev:8^23]19'25_callres
//│ --------------
//│ 4'acc:
//│ 	([]: Int) < [+idxSum:7^8]4'acc
//│ 	([]: Int) < [+idxSum:7^33]4'acc
//│ --------------
//│ 15'lss:
//│ 	15'lss[] < ([]: Destruct(N, C(17'hh, 18'tt)))
//│ --------------
//│ 24'39_callres:
//│ 	24'39_callres[] < ([]: ([]: Int) => ([]: 25'41_callres))
//│ 	([]: ([]: 4'acc) => ([]: Int)) < [-idxSum:7^33]24'39_callres
//│ 	([]: ([]: 7'acc) => ([]: 13'17_callres)) < [-idxSum:7^33]24'39_callres
//│ --------------
//│ 25'41_callres:
//│ 	([]: Int) < [-idxSum:7^33]25'41_callres
//│ 	([-idxSum:7^33]: Int) < []25'41_callres
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


// scope extrusion
:ns
fun inter(xs) = if xs is
    N then ys => ys
    C(h0, t0) then ys => if ys is
        N then N2
        C(h1, t1) then C2(add(h0,h1), inter(t0, t1))
let l1 = C(1, C(2, C(1, C(2, N))))
// let rec l2 = N
let rec l2 = C(11, N)
inter(l1, l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h0|,| |t0|)| |#then| |ys| |=>| |#if| |ys| |is|→|N| |#then| |N2|↵|C|(|h1|,| |t1|)| |#then| |C2|(|add|(|h0|,|h1|)|,| |inter|(|t0|,| |t1|)|)|←|←|↵|#let| |l1| |#=| |C|(|1|,| |C|(|2|,| |C|(|1|,| |C|(|2|,| |N|)|)|)|)|↵|/* let rec l2 = N*/|↵|#let| |#rec| |l2| |#=| |C|(|11|,| |N|)|↵|inter|(|l1|,| |l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h0, t0,)) then ys, => if ys is ‹(N) then N2; (C (h1, t1,)) then C2 (add (h0, h1,), inter (t0, t1,),)››; let l1 = C (1, C (2, C (1, C (2, N,),),),); let rec l2 = C (11, N,); inter (l1, l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def inter:6 = (fun xs:9 -> case xs:9^1 of {
//│ 	N => (fun ys:10 -> ys:10^2)
//│ 	| C h0:11 t0:12 => (fun ys:13 -> case ys:13^4 of {
//│ 		N => [N2]
//│ 		| C h1:14 t1:15 => [C2 ((add:4^6 h0:11^7) h1:14^9) ((inter:6^11 t0:12^12) t1:15^14)]})})
//│ def l1:7 = [C 1 [C 2 [C 1 [C 2 [N]]]]]
//│ def l2:8 = [C 11 [N]]
//│ ((inter:6^33 l1:7^34) l2:8^36)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 16'35_callres) <: ([]: ([l2:8^36]: 2'l2) => ([]: 17'37_callres))
//│ ([inter:6^33]: 0'inter) <: ([]: ([l1:7^34]: 1'l1) => ([]: 16'35_callres))
//│ ([]: C(([]: Int), ([]: N))) <: ([]: 2'l2)
//│ ([]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))))))) <: ([]: 1'l1)
//│ ([]: ([]: 3'xs) => ([]: 15'19_matchres)) <: ([]: 0'inter)
//│ ([]: ([]: 7'ys) => ([]: 14'17_matchres)) <: ([]: 15'19_matchres)
//│ ([]: ([]: 4'ys) => ([]: 4'ys)) <: ([]: 15'19_matchres)
//│ ([]: 3'xs) <: ([]: Destruct(N, C(5'h0, 6't0)))
//│ ([]: C2(([]: 11'10_callres), ([]: 13'15_callres))) <: ([]: 14'17_matchres)
//│ ([]: N2) <: ([]: 14'17_matchres)
//│ ([]: 7'ys) <: ([]: Destruct(N, C(8'h1, 9't1)))
//│ ([]: 12'13_callres) <: ([]: ([]: 9't1) => ([]: 13'15_callres))
//│ ([inter:6^11]: 0'inter) <: ([]: ([]: 6't0) => ([]: 12'13_callres))
//│ ([]: 10'8_callres) <: ([]: ([]: 8'h1) => ([]: 11'10_callres))
//│ ([]: ([]: Destruct(Int)) => ([]: ([]: Destruct(Int)) => ([]: Int))) <: ([]: ([]: 5'h0) => ([]: 10'8_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'inter:
//│ 	0'inter[-inter:6^11] < ([]: ([]: 6't0) => ([]: 12'13_callres))
//│ 	0'inter[-inter:6^33] < ([]: ([l1:7^34]: 1'l1) => ([]: 16'35_callres))
//│ 	([]: ([]: 3'xs) => ([]: 15'19_matchres)) < []0'inter
//│ --------------
//│ 5'h0:
//│ 	5'h0[] < ([]: Destruct(Int))
//│ 	([+inter:6^11 · +inter:6^11 · +inter:6^11 · +inter:6^33 · -l1:7^34]: Int) < []5'h0
//│ 	([+inter:6^11 · +inter:6^11 · +inter:6^33 · -l1:7^34]: Int) < []5'h0
//│ 	([+inter:6^11 · +inter:6^33 · -l1:7^34]: Int) < []5'h0
//│ 	([+inter:6^33 · -l1:7^34]: Int) < []5'h0
//│ --------------
//│ 10'8_callres:
//│ 	10'8_callres[] < ([]: ([]: 8'h1) => ([]: 11'10_callres))
//│ 	([]: ([]: Destruct(Int)) => ([]: Int)) < []10'8_callres
//│ --------------
//│ 14'17_matchres:
//│ 	14'17_matchres[-inter:6^11] < ([]: 13'15_callres)
//│ 	14'17_matchres[-inter:6^33] < ([]: 17'37_callres)
//│ 	([]: N2) < []14'17_matchres
//│ 	([]: C2(([]: 11'10_callres), ([]: 13'15_callres))) < []14'17_matchres
//│ --------------
//│ 1'l1:
//│ 	1'l1[-l1:7^34 · +inter:6^33] < ([]: 3'xs)
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))))))) < []1'l1
//│ --------------
//│ 6't0:
//│ 	6't0[+inter:6^11] < ([]: 3'xs)
//│ 	([+inter:6^11 · +inter:6^11 · +inter:6^11 · +inter:6^33 · -l1:7^34]: N) < []6't0
//│ 	([+inter:6^11 · +inter:6^11 · +inter:6^33 · -l1:7^34]: C(([]: Int), ([]: N))) < []6't0
//│ 	([+inter:6^11 · +inter:6^33 · -l1:7^34]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < []6't0
//│ 	([+inter:6^33 · -l1:7^34]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))))) < []6't0
//│ --------------
//│ 9't1:
//│ 	9't1[] < ([+inter:6^11]: 7'ys)
//│ 	9't1[] < ([+inter:6^11]: 4'ys)
//│ 	([+inter:6^33 · -l2:8^36]: N) < []9't1
//│ --------------
//│ 13'15_callres:
//│ 	([]: C2(([]: 11'10_callres), ([]: 13'15_callres))) < [-inter:6^11]13'15_callres
//│ 	([]: N2) < [-inter:6^11]13'15_callres
//│ 	([+inter:6^33 · -l2:8^36]: C(([]: Int), ([]: N))) < [-inter:6^11]13'15_callres
//│ 	([+inter:6^11 · +inter:6^33 · -l2:8^36]: N) < [-inter:6^11]13'15_callres
//│ --------------
//│ 2'l2:
//│ 	2'l2[-l2:8^36] < ([+inter:6^33]: 4'ys)
//│ 	2'l2[-l2:8^36] < ([+inter:6^33]: 7'ys)
//│ 	([]: C(([]: Int), ([]: N))) < []2'l2
//│ --------------
//│ 17'37_callres:
//│ 	([+inter:6^11 · +inter:6^33 · -l2:8^36]: N) < [-inter:6^33]17'37_callres
//│ 	([]: N2) < [-inter:6^33]17'37_callres
//│ 	([]: C2(([]: 11'10_callres), ([]: 13'15_callres))) < [-inter:6^33]17'37_callres
//│ 	([+inter:6^33 · -l2:8^36]: C(([]: Int), ([]: N))) < [-inter:6^33]17'37_callres
//│ --------------
//│ 12'13_callres:
//│ 	12'13_callres[] < ([]: ([]: 9't1) => ([]: 13'15_callres))
//│ 	([]: ([]: 7'ys) => ([]: 14'17_matchres)) < [-inter:6^11]12'13_callres
//│ 	([]: ([]: 4'ys) => ([]: 4'ys)) < [-inter:6^11]12'13_callres
//│ --------------
//│ 7'ys:
//│ 	7'ys[] < ([]: Destruct(N, C(8'h1, 9't1)))
//│ 	([+inter:6^33 · -l2:8^36]: N) < [+inter:6^11]7'ys
//│ 	([]: C(([]: Int), ([]: N))) < [-l2:8^36 · +inter:6^33]7'ys
//│ --------------
//│ 3'xs:
//│ 	3'xs[] < ([]: Destruct(N, C(5'h0, 6't0)))
//│ 	([+inter:6^11 · +inter:6^11 · +inter:6^11 · +inter:6^33 · -l1:7^34]: N) < [+inter:6^11]3'xs
//│ 	([+inter:6^11 · +inter:6^11 · +inter:6^33 · -l1:7^34]: C(([]: Int), ([]: N))) < [+inter:6^11]3'xs
//│ 	([+inter:6^11 · +inter:6^33 · -l1:7^34]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < [+inter:6^11]3'xs
//│ 	([+inter:6^33 · -l1:7^34]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))))) < [+inter:6^11]3'xs
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))))))) < [-l1:7^34 · +inter:6^33]3'xs
//│ --------------
//│ 16'35_callres:
//│ 	16'35_callres[] < ([]: ([l2:8^36]: 2'l2) => ([]: 17'37_callres))
//│ 	([]: ([]: 4'ys) => ([]: 4'ys)) < [-inter:6^33]16'35_callres
//│ 	([]: ([]: 7'ys) => ([]: 14'17_matchres)) < [-inter:6^33]16'35_callres
//│ --------------
//│ 11'10_callres:
//│ 	([]: Int) < []11'10_callres
//│ --------------
//│ 8'h1:
//│ 	8'h1[] < ([]: Destruct(Int))
//│ 	([+inter:6^33 · -l2:8^36]: Int) < []8'h1
//│ --------------
//│ 4'ys:
//│ 	4'ys[-inter:6^11] < ([]: 13'15_callres)
//│ 	4'ys[-inter:6^33] < ([]: 17'37_callres)
//│ 	([+inter:6^33 · -l2:8^36]: N) < [+inter:6^11]4'ys
//│ 	([]: C(([]: Int), ([]: N))) < [-l2:8^36 · +inter:6^33]4'ys
//│ --------------
//│ 15'19_matchres:
//│ 	15'19_matchres[] < ([-inter:6^11]: 12'13_callres)
//│ 	15'19_matchres[] < ([-inter:6^33]: 16'35_callres)
//│ 	([]: ([]: 4'ys) => ([]: 4'ys)) < []15'19_matchres
//│ 	([]: ([]: 7'ys) => ([]: 14'17_matchres)) < []15'19_matchres
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


:ns
let rec p = C(C(C(id(p))))
fun c(x) = if x is
    C(a) then if a is
        C(b) then c(b)
fun id2(z) = z
fun id(y) = id2(y)
fun id3(d) = d
c(id3(p))
//│ |#let| |#rec| |p| |#=| |C|(|C|(|C|(|id|(|p|)|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|b|)| |#then| |c|(|b|)|←|←|↵|#fun| |id2|(|z|)| |#=| |z|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|#fun| |id3|(|d|)| |#=| |d|↵|c|(|id3|(|p|)|)|
//│ Parsed: {let rec p = C (C (C (id (p,),),),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (b,)) then c (b,)››; fun id2 = z, => z; fun id = y, => id2 (y,); fun id3 = d, => d; c (id3 (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C [C [C (id:9^1 p:6^2)]]]
//│ def c:7 = (fun x:11 -> case x:11^7 of {
//│ 	C a:12 => case a:12^8 of {
//│ 		C b:13 => (c:7^9 b:13^10)}})
//│ def id2:8 = (fun z:14 -> z:14^15)
//│ def id:9 = (fun y:15 -> (id2:8^17 y:15^18))
//│ def id3:10 = (fun d:16 -> d:16^21)
//│ (c:7^23 (id3:10^24 p:6^25))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([c:7^23]: 1'c) <: ([]: ([]: 16'26_callres) => ([]: 17'27_callres))
//│ ([id3:10^24]: 4'id3) <: ([]: ([p:6^25]: 0'p) => ([]: 16'26_callres))
//│ ([]: ([]: 15'd) => ([]: 15'd)) <: ([]: 4'id3)
//│ ([]: ([]: 13'y) => ([]: 14'19_callres)) <: ([]: 3'id)
//│ ([id2:8^17]: 2'id2) <: ([]: ([]: 13'y) => ([]: 14'19_callres))
//│ ([]: ([]: 12'z) => ([]: 12'z)) <: ([]: 2'id2)
//│ ([]: ([]: 6'x) => ([]: 11'13_matchres)) <: ([]: 1'c)
//│ ([]: 10'12_matchres) <: ([]: 11'13_matchres)
//│ ([]: 6'x) <: ([]: Destruct(C(7'a)))
//│ ([]: 9'11_callres) <: ([]: 10'12_matchres)
//│ ([]: 7'a) <: ([]: Destruct(C(8'b)))
//│ ([c:7^9]: 1'c) <: ([]: ([]: 8'b) => ([]: 9'11_callres))
//│ ([]: C(([]: C(([]: C(([]: 5'3_callres))))))) <: ([]: 0'p)
//│ ([id:9^1]: 3'id) <: ([]: ([p:6^2]: 0'p) => ([]: 5'3_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(C(5'3_callres))) <: 7'a
//│ 	[-p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^25 · +id3:10^24 · -id3:10^24 · +c:7^23 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^25 · +id3:10^24 · -id3:10^24 · +c:7^23 · +c:7^9]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'p:
//│ 	0'p[-p:6^2 · +id:9^1] < ([]: 13'y)
//│ 	0'p[-p:6^25 · +id3:10^24] < ([]: 15'd)
//│ 	([]: C(([]: C(([]: C(([]: 5'3_callres))))))) < []0'p
//│ --------------
//│ 5'3_callres:
//│ 	5'3_callres[-p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^25 · +id3:10^24 · -id3:10^24 · +c:7^23 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9] < ([]: 7'a)
//│ 	5'3_callres[-p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^25 · +id3:10^24 · -id3:10^24 · +c:7^23 · +c:7^9 · +c:7^9] < ([]: 8'b)
//│ 	5'3_callres[-p:6^25 · +id3:10^24 · -id3:10^24 · +c:7^23 · +c:7^9] < ([]: 7'a)
//│ 	([-id2:8^17 · +id2:8^17 · +id:9^1 · -p:6^2]: C(([]: C(([]: C(([]: 5'3_callres))))))) < [-id:9^1]5'3_callres
//│ --------------
//│ 10'12_matchres:
//│ 	10'12_matchres[] < ([]: 11'13_matchres)
//│ --------------
//│ 14'19_callres:
//│ 	14'19_callres[] < ([-id:9^1]: 5'3_callres)
//│ 	([+id2:8^17 · +id:9^1 · -p:6^2]: C(([]: C(([]: C(([]: 5'3_callres))))))) < [-id2:8^17]14'19_callres
//│ --------------
//│ 1'c:
//│ 	1'c[-c:7^9] < ([]: ([]: 8'b) => ([]: 9'11_callres))
//│ 	1'c[-c:7^23] < ([]: ([]: 16'26_callres) => ([]: 17'27_callres))
//│ 	([]: ([]: 6'x) => ([]: 11'13_matchres)) < []1'c
//│ --------------
//│ 6'x:
//│ 	6'x[] < ([]: Destruct(C(7'a)))
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^23 · -id3:10^24 · +id3:10^24 · -p:6^25 · -id:9^1 · -id2:8^17 · +id2:8^17 · +id:9^1 · -p:6^2 · -id:9^1 · -id2:8^17 · +id2:8^17 · +id:9^1 · -p:6^2]: C(([]: 5'3_callres))) < [+c:7^9]6'x
//│ 	([+c:7^9 · +c:7^9 · +c:7^23 · -id3:10^24 · +id3:10^24 · -p:6^25 · -id:9^1 · -id2:8^17 · +id2:8^17 · +id:9^1 · -p:6^2 · -id:9^1 · -id2:8^17 · +id2:8^17 · +id:9^1 · -p:6^2]: C(([]: C(([]: C(([]: 5'3_callres))))))) < [+c:7^9]6'x
//│ 	([+c:7^9 · +c:7^23 · -id3:10^24 · +id3:10^24 · -p:6^25 · -id:9^1 · -id2:8^17 · +id2:8^17 · +id:9^1 · -p:6^2]: C(([]: C(([]: 5'3_callres))))) < [+c:7^9]6'x
//│ 	([+c:7^23 · -id3:10^24 · +id3:10^24 · -p:6^25]: C(([]: 5'3_callres))) < [+c:7^9]6'x
//│ 	([-id3:10^24 · +id3:10^24 · -p:6^25]: C(([]: C(([]: C(([]: 5'3_callres))))))) < [+c:7^23]6'x
//│ --------------
//│ 9'11_callres:
//│ 	9'11_callres[] < ([]: 10'12_matchres)
//│ --------------
//│ 13'y:
//│ 	13'y[+id2:8^17] < ([]: 12'z)
//│ 	([]: C(([]: C(([]: C(([]: 5'3_callres))))))) < [-p:6^2 · +id:9^1]13'y
//│ --------------
//│ 2'id2:
//│ 	2'id2[-id2:8^17] < ([]: ([]: 13'y) => ([]: 14'19_callres))
//│ 	([]: ([]: 12'z) => ([]: 12'z)) < []2'id2
//│ --------------
//│ 12'z:
//│ 	12'z[] < ([-id2:8^17]: 14'19_callres)
//│ 	([+id:9^1 · -p:6^2]: C(([]: C(([]: C(([]: 5'3_callres))))))) < [+id2:8^17]12'z
//│ --------------
//│ 7'a:
//│ 	7'a[] < ([]: Destruct(C(8'b)))
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^23 · -id3:10^24 · +id3:10^24 · -p:6^25 · -id:9^1 · -id2:8^17 · +id2:8^17 · +id:9^1 · -p:6^2 · -id:9^1 · -id2:8^17 · +id2:8^17 · +id:9^1 · -p:6^2]: C(([]: C(([]: 5'3_callres))))) < []7'a
//│ 	([+c:7^9 · +c:7^9 · +c:7^23 · -id3:10^24 · +id3:10^24 · -p:6^25 · -id:9^1 · -id2:8^17 · +id2:8^17 · +id:9^1 · -p:6^2]: C(([]: 5'3_callres))) < []7'a
//│ 	([-id:9^1 · -id2:8^17 · +id2:8^17 · +id:9^1 · -p:6^2]: C(([]: C(([]: C(([]: 5'3_callres))))))) < [-p:6^25 · +id3:10^24 · -id3:10^24 · +c:7^23 · +c:7^9]7'a
//│ 	([+c:7^23 · -id3:10^24 · +id3:10^24 · -p:6^25]: C(([]: C(([]: 5'3_callres))))) < []7'a
//│ --------------
//│ 3'id:
//│ 	3'id[-id:9^1] < ([]: ([p:6^2]: 0'p) => ([]: 5'3_callres))
//│ 	([]: ([]: 13'y) => ([]: 14'19_callres)) < []3'id
//│ --------------
//│ 16'26_callres:
//│ 	16'26_callres[+c:7^23] < ([]: 6'x)
//│ 	([+id3:10^24 · -p:6^25]: C(([]: C(([]: C(([]: 5'3_callres))))))) < [-id3:10^24]16'26_callres
//│ --------------
//│ 11'13_matchres:
//│ 	11'13_matchres[] < ([-c:7^9]: 9'11_callres)
//│ 	11'13_matchres[] < ([-c:7^23]: 17'27_callres)
//│ --------------
//│ 8'b:
//│ 	8'b[+c:7^9] < ([]: 6'x)
//│ 	([+c:7^9 · +c:7^9 · +c:7^9 · +c:7^23 · -id3:10^24 · +id3:10^24 · -p:6^25 · -id:9^1 · -id2:8^17 · +id2:8^17 · +id:9^1 · -p:6^2 · -id:9^1 · -id2:8^17 · +id2:8^17 · +id:9^1 · -p:6^2]: C(([]: 5'3_callres))) < []8'b
//│ 	([-id:9^1 · -id2:8^17 · +id2:8^17 · +id:9^1 · -p:6^2]: C(([]: C(([]: C(([]: 5'3_callres))))))) < [-p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^25 · +id3:10^24 · -id3:10^24 · +c:7^23 · +c:7^9 · +c:7^9]8'b
//│ 	([+c:7^9 · +c:7^23 · -id3:10^24 · +id3:10^24 · -p:6^25 · -id:9^1 · -id2:8^17 · +id2:8^17 · +id:9^1 · -p:6^2]: C(([]: C(([]: 5'3_callres))))) < []8'b
//│ 	([+c:7^23 · -id3:10^24 · +id3:10^24 · -p:6^25]: C(([]: 5'3_callres))) < []8'b
//│ --------------
//│ 4'id3:
//│ 	4'id3[-id3:10^24] < ([]: ([p:6^25]: 0'p) => ([]: 16'26_callres))
//│ 	([]: ([]: 15'd) => ([]: 15'd)) < []4'id3
//│ --------------
//│ 15'd:
//│ 	15'd[] < ([-id3:10^24]: 16'26_callres)
//│ 	([]: C(([]: C(([]: C(([]: 5'3_callres))))))) < [-p:6^25 · +id3:10^24]15'd
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<

:ns
fun id(k) = k
fun id1(x) = id(x)
fun id2(y) = y
fun id3(z) = z
let rec p = C(C(C(id7(C(C(id1(p)))))))
fun c(xx) = if xx is
    C(a) then c(a)
fun id4(k) = k
fun id5(j) = j
fun id6(l) = l
fun id7(i) = i
id6(id4)(c)(id5(id2)(id3(p)))
//│ |#fun| |id|(|k|)| |#=| |k|↵|#fun| |id1|(|x|)| |#=| |id|(|x|)|↵|#fun| |id2|(|y|)| |#=| |y|↵|#fun| |id3|(|z|)| |#=| |z|↵|#let| |#rec| |p| |#=| |C|(|C|(|C|(|id7|(|C|(|C|(|id1|(|p|)|)|)|)|)|)|)|↵|#fun| |c|(|xx|)| |#=| |#if| |xx| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |id4|(|k|)| |#=| |k|↵|#fun| |id5|(|j|)| |#=| |j|↵|#fun| |id6|(|l|)| |#=| |l|↵|#fun| |id7|(|i|)| |#=| |i|↵|id6|(|id4|)|(|c|)|(|id5|(|id2|)|(|id3|(|p|)|)|)|
//│ Parsed: {fun id = k, => k; fun id1 = x, => id (x,); fun id2 = y, => y; fun id3 = z, => z; let rec p = C (C (C (id7 (C (C (id1 (p,),),),),),),); fun c = xx, => if xx is ‹(C (a,)) then c (a,)›; fun id4 = k, => k; fun id5 = j, => j; fun id6 = l, => l; fun id7 = i, => i; id6 (id4,) (c,) (id5 (id2,) (id3 (p,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def id:6 = (fun k:16 -> k:16^1)
//│ def id1:7 = (fun x:17 -> (id:6^3 x:17^4))
//│ def id2:8 = (fun y:18 -> y:18^7)
//│ def id3:9 = (fun z:19 -> z:19^9)
//│ def p:10 = [C [C [C (id7:15^11 [C [C (id1:7^12 p:10^13)]])]]]
//│ def c:11 = (fun xx:20 -> case xx:20^21 of {
//│ 	C a:21 => (c:11^22 a:21^23)})
//│ def id4:12 = (fun k:22 -> k:22^27)
//│ def id5:13 = (fun j:23 -> j:23^29)
//│ def id6:14 = (fun l:24 -> l:24^31)
//│ def id7:15 = (fun i:25 -> i:25^33)
//│ (((id6:14^35 id4:12^36) c:11^38) ((id5:13^40 id2:8^41) (id3:9^43 p:10^44)))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 26'39_callres) <: ([]: ([]: 29'46_callres) => ([]: 30'47_callres))
//│ ([]: 27'42_callres) <: ([]: ([]: 28'45_callres) => ([]: 29'46_callres))
//│ ([id3:9^43]: 3'id3) <: ([]: ([p:10^44]: 4'p) => ([]: 28'45_callres))
//│ ([id5:13^40]: 7'id5) <: ([]: ([id2:8^41]: 2'id2) => ([]: 27'42_callres))
//│ ([]: 25'37_callres) <: ([]: ([c:11^38]: 5'c) => ([]: 26'39_callres))
//│ ([id6:14^35]: 8'id6) <: ([]: ([id4:12^36]: 6'id4) => ([]: 25'37_callres))
//│ ([]: ([]: 24'i) => ([]: 24'i)) <: ([]: 9'id7)
//│ ([]: ([]: 23'l) => ([]: 23'l)) <: ([]: 8'id6)
//│ ([]: ([]: 22'j) => ([]: 22'j)) <: ([]: 7'id5)
//│ ([]: ([]: 21'k) => ([]: 21'k)) <: ([]: 6'id4)
//│ ([]: ([]: 17'xx) => ([]: 20'25_matchres)) <: ([]: 5'c)
//│ ([]: 19'24_callres) <: ([]: 20'25_matchres)
//│ ([]: 17'xx) <: ([]: Destruct(C(18'a)))
//│ ([c:11^22]: 5'c) <: ([]: ([]: 18'a) => ([]: 19'24_callres))
//│ ([]: C(([]: C(([]: C(([]: 16'17_callres))))))) <: ([]: 4'p)
//│ ([id7:15^11]: 9'id7) <: ([]: ([]: C(([]: C(([]: 15'14_callres))))) => ([]: 16'17_callres))
//│ ([id1:7^12]: 1'id1) <: ([]: ([p:10^13]: 4'p) => ([]: 15'14_callres))
//│ ([]: ([]: 14'z) => ([]: 14'z)) <: ([]: 3'id3)
//│ ([]: ([]: 13'y) => ([]: 13'y)) <: ([]: 2'id2)
//│ ([]: ([]: 11'x) => ([]: 12'5_callres)) <: ([]: 1'id1)
//│ ([id:6^3]: 0'id) <: ([]: ([]: 11'x) => ([]: 12'5_callres))
//│ ([]: ([]: 10'k) => ([]: 10'k)) <: ([]: 0'id)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(C(16'17_callres))) <: 18'a
//│ 	[-p:10^13 · +id1:7^12 · +id:6^3 · -id:6^3 · -id1:7^12 · +id7:15^11 · -id7:15^11 · -p:10^13 · +id1:7^12 · +id:6^3 · -id:6^3 · -id1:7^12 · +id7:15^11 · -id7:15^11 · -p:10^44 · +id3:9^43 · -id3:9^43 · +id5:13^40 · -id5:13^40 · +id2:8^41 · -id2:8^41 · +id5:13^40 · -id5:13^40 · +id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22]  --->  [-p:10^13 · +id1:7^12 · +id:6^3 · -id:6^3 · -id1:7^12 · +id7:15^11 · -id7:15^11 · -p:10^44 · +id3:9^43 · -id3:9^43 · +id5:13^40 · -id5:13^40 · +id2:8^41 · -id2:8^41 · +id5:13^40 · -id5:13^40 · +id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'id:
//│ 	0'id[-id:6^3] < ([]: ([]: 11'x) => ([]: 12'5_callres))
//│ 	([]: ([]: 10'k) => ([]: 10'k)) < []0'id
//│ --------------
//│ 5'c:
//│ 	5'c[-c:11^22] < ([]: ([]: 18'a) => ([]: 19'24_callres))
//│ 	5'c[-c:11^38] < ([+id6:14^35 · -id6:14^35 · +id4:12^36]: 21'k)
//│ 	([]: ([]: 17'xx) => ([]: 20'25_matchres)) < []5'c
//│ --------------
//│ 10'k:
//│ 	10'k[] < ([-id:6^3]: 12'5_callres)
//│ 	([+id1:7^12 · -p:10^13]: C(([]: C(([]: C(([]: 16'17_callres))))))) < [+id:6^3]10'k
//│ --------------
//│ 14'z:
//│ 	14'z[] < ([-id3:9^43]: 28'45_callres)
//│ 	([]: C(([]: C(([]: C(([]: 16'17_callres))))))) < [-p:10^44 · +id3:9^43]14'z
//│ --------------
//│ 1'id1:
//│ 	1'id1[-id1:7^12] < ([]: ([p:10^13]: 4'p) => ([]: 15'14_callres))
//│ 	([]: ([]: 11'x) => ([]: 12'5_callres)) < []1'id1
//│ --------------
//│ 6'id4:
//│ 	6'id4[-id4:12^36 · +id6:14^35] < ([]: 23'l)
//│ 	([]: ([]: 21'k) => ([]: 21'k)) < []6'id4
//│ --------------
//│ 9'id7:
//│ 	9'id7[-id7:15^11] < ([]: ([]: C(([]: C(([]: 15'14_callres))))) => ([]: 16'17_callres))
//│ 	([]: ([]: 24'i) => ([]: 24'i)) < []9'id7
//│ --------------
//│ 13'y:
//│ 	13'y[-id2:8^41 · +id5:13^40 · -id5:13^40] < ([]: 29'46_callres)
//│ 	([-id3:9^43 · +id3:9^43 · -p:10^44]: C(([]: C(([]: C(([]: 16'17_callres))))))) < [+id5:13^40 · -id5:13^40 · +id2:8^41]13'y
//│ --------------
//│ 2'id2:
//│ 	2'id2[-id2:8^41 · +id5:13^40] < ([]: 22'j)
//│ 	([]: ([]: 13'y) => ([]: 13'y)) < []2'id2
//│ --------------
//│ 17'xx:
//│ 	17'xx[] < ([]: Destruct(C(18'a)))
//│ 	([+c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^38 · -id6:14^35 · +id6:14^35 · -id4:12^36 · +id4:12^36 · -id6:14^35 · +id6:14^35 · -id5:13^40 · +id5:13^40 · -id2:8^41 · +id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44 · -id7:15^11 · +id7:15^11 · -id1:7^12 · -id:6^3 · +id:6^3 · +id1:7^12 · -p:10^13 · -id7:15^11 · +id7:15^11]: C(([]: 15'14_callres))) < [+c:11^22]17'xx
//│ 	([+c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^38 · -id6:14^35 · +id6:14^35 · -id4:12^36 · +id4:12^36 · -id6:14^35 · +id6:14^35 · -id5:13^40 · +id5:13^40 · -id2:8^41 · +id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44 · -id7:15^11 · +id7:15^11 · -id1:7^12 · -id:6^3 · +id:6^3 · +id1:7^12 · -p:10^13 · -id7:15^11 · +id7:15^11]: C(([]: C(([]: 15'14_callres))))) < [+c:11^22]17'xx
//│ 	([+c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^38 · -id6:14^35 · +id6:14^35 · -id4:12^36 · +id4:12^36 · -id6:14^35 · +id6:14^35 · -id5:13^40 · +id5:13^40 · -id2:8^41 · +id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44 · -id7:15^11 · +id7:15^11 · -id1:7^12 · -id:6^3 · +id:6^3 · +id1:7^12 · -p:10^13]: C(([]: 16'17_callres))) < [+c:11^22]17'xx
//│ 	([+c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^38 · -id6:14^35 · +id6:14^35 · -id4:12^36 · +id4:12^36 · -id6:14^35 · +id6:14^35 · -id5:13^40 · +id5:13^40 · -id2:8^41 · +id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44 · -id7:15^11 · +id7:15^11 · -id1:7^12 · -id:6^3 · +id:6^3 · +id1:7^12 · -p:10^13]: C(([]: C(([]: 16'17_callres))))) < [+c:11^22]17'xx
//│ 	([+c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^38 · -id6:14^35 · +id6:14^35 · -id4:12^36 · +id4:12^36 · -id6:14^35 · +id6:14^35 · -id5:13^40 · +id5:13^40 · -id2:8^41 · +id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44 · -id7:15^11 · +id7:15^11 · -id1:7^12 · -id:6^3 · +id:6^3 · +id1:7^12 · -p:10^13]: C(([]: C(([]: C(([]: 16'17_callres))))))) < [+c:11^22]17'xx
//│ 	([+c:11^22 · +c:11^22 · +c:11^22 · +c:11^38 · -id6:14^35 · +id6:14^35 · -id4:12^36 · +id4:12^36 · -id6:14^35 · +id6:14^35 · -id5:13^40 · +id5:13^40 · -id2:8^41 · +id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44 · -id7:15^11 · +id7:15^11]: C(([]: 15'14_callres))) < [+c:11^22]17'xx
//│ 	([+c:11^22 · +c:11^22 · +c:11^38 · -id6:14^35 · +id6:14^35 · -id4:12^36 · +id4:12^36 · -id6:14^35 · +id6:14^35 · -id5:13^40 · +id5:13^40 · -id2:8^41 · +id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44 · -id7:15^11 · +id7:15^11]: C(([]: C(([]: 15'14_callres))))) < [+c:11^22]17'xx
//│ 	([+c:11^22 · +c:11^38 · -id6:14^35 · +id6:14^35 · -id4:12^36 · +id4:12^36 · -id6:14^35 · +id6:14^35 · -id5:13^40 · +id5:13^40 · -id2:8^41 · +id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44]: C(([]: 16'17_callres))) < [+c:11^22]17'xx
//│ 	([+c:11^38 · -id6:14^35 · +id6:14^35 · -id4:12^36 · +id4:12^36 · -id6:14^35 · +id6:14^35 · -id5:13^40 · +id5:13^40 · -id2:8^41 · +id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44]: C(([]: C(([]: 16'17_callres))))) < [+c:11^22]17'xx
//│ 	([-id5:13^40 · +id5:13^40 · -id2:8^41 · +id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44]: C(([]: C(([]: C(([]: 16'17_callres))))))) < [+id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38]17'xx
//│ --------------
//│ 12'5_callres:
//│ 	12'5_callres[] < ([-id1:7^12]: 15'14_callres)
//│ 	([+id:6^3 · +id1:7^12 · -p:10^13]: C(([]: C(([]: C(([]: 16'17_callres))))))) < [-id:6^3]12'5_callres
//│ --------------
//│ 7'id5:
//│ 	7'id5[-id5:13^40] < ([]: ([id2:8^41]: 2'id2) => ([]: 27'42_callres))
//│ 	([]: ([]: 22'j) => ([]: 22'j)) < []7'id5
//│ --------------
//│ 3'id3:
//│ 	3'id3[-id3:9^43] < ([]: ([p:10^44]: 4'p) => ([]: 28'45_callres))
//│ 	([]: ([]: 14'z) => ([]: 14'z)) < []3'id3
//│ --------------
//│ 18'a:
//│ 	18'a[+c:11^22] < ([]: 17'xx)
//│ 	([+c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^38 · -id6:14^35 · +id6:14^35 · -id4:12^36 · +id4:12^36 · -id6:14^35 · +id6:14^35 · -id5:13^40 · +id5:13^40 · -id2:8^41 · +id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44 · -id7:15^11 · +id7:15^11 · -id1:7^12 · -id:6^3 · +id:6^3 · +id1:7^12 · -p:10^13 · -id7:15^11 · +id7:15^11]: C(([]: 15'14_callres))) < []18'a
//│ 	([-id7:15^11 · +id7:15^11]: C(([]: C(([]: 15'14_callres))))) < [-p:10^13 · +id1:7^12 · +id:6^3 · -id:6^3 · -id1:7^12 · +id7:15^11 · -id7:15^11 · -p:10^44 · +id3:9^43 · -id3:9^43 · +id5:13^40 · -id5:13^40 · +id2:8^41 · -id2:8^41 · +id5:13^40 · -id5:13^40 · +id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22]18'a
//│ 	([+c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^38 · -id6:14^35 · +id6:14^35 · -id4:12^36 · +id4:12^36 · -id6:14^35 · +id6:14^35 · -id5:13^40 · +id5:13^40 · -id2:8^41 · +id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44 · -id7:15^11 · +id7:15^11 · -id1:7^12 · -id:6^3 · +id:6^3 · +id1:7^12 · -p:10^13]: C(([]: 16'17_callres))) < []18'a
//│ 	([+c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^38 · -id6:14^35 · +id6:14^35 · -id4:12^36 · +id4:12^36 · -id6:14^35 · +id6:14^35 · -id5:13^40 · +id5:13^40 · -id2:8^41 · +id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44 · -id7:15^11 · +id7:15^11 · -id1:7^12 · -id:6^3 · +id:6^3 · +id1:7^12 · -p:10^13]: C(([]: C(([]: 16'17_callres))))) < []18'a
//│ 	([-id1:7^12 · -id:6^3 · +id:6^3 · +id1:7^12 · -p:10^13]: C(([]: C(([]: C(([]: 16'17_callres))))))) < [+id7:15^11 · -id7:15^11 · -p:10^44 · +id3:9^43 · -id3:9^43 · +id5:13^40 · -id5:13^40 · +id2:8^41 · -id2:8^41 · +id5:13^40 · -id5:13^40 · +id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22]18'a
//│ 	([+c:11^22 · +c:11^22 · +c:11^22 · +c:11^38 · -id6:14^35 · +id6:14^35 · -id4:12^36 · +id4:12^36 · -id6:14^35 · +id6:14^35 · -id5:13^40 · +id5:13^40 · -id2:8^41 · +id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44 · -id7:15^11 · +id7:15^11]: C(([]: 15'14_callres))) < []18'a
//│ 	([-id7:15^11 · +id7:15^11]: C(([]: C(([]: 15'14_callres))))) < [-p:10^44 · +id3:9^43 · -id3:9^43 · +id5:13^40 · -id5:13^40 · +id2:8^41 · -id2:8^41 · +id5:13^40 · -id5:13^40 · +id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38 · +c:11^22 · +c:11^22]18'a
//│ 	([+c:11^22 · +c:11^38 · -id6:14^35 · +id6:14^35 · -id4:12^36 · +id4:12^36 · -id6:14^35 · +id6:14^35 · -id5:13^40 · +id5:13^40 · -id2:8^41 · +id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44]: C(([]: 16'17_callres))) < []18'a
//│ 	([+c:11^38 · -id6:14^35 · +id6:14^35 · -id4:12^36 · +id4:12^36 · -id6:14^35 · +id6:14^35 · -id5:13^40 · +id5:13^40 · -id2:8^41 · +id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44]: C(([]: C(([]: 16'17_callres))))) < []18'a
//│ --------------
//│ 16'17_callres:
//│ 	16'17_callres[-p:10^13 · +id1:7^12 · +id:6^3 · -id:6^3 · -id1:7^12 · +id7:15^11 · -id7:15^11 · -p:10^44 · +id3:9^43 · -id3:9^43 · +id5:13^40 · -id5:13^40 · +id2:8^41 · -id2:8^41 · +id5:13^40 · -id5:13^40 · +id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22] < ([]: 18'a)
//│ 	16'17_callres[-p:10^44 · +id3:9^43 · -id3:9^43 · +id5:13^40 · -id5:13^40 · +id2:8^41 · -id2:8^41 · +id5:13^40 · -id5:13^40 · +id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38 · +c:11^22 · +c:11^22] < ([]: 18'a)
//│ 	([+id7:15^11]: C(([]: C(([]: 15'14_callres))))) < [-id7:15^11]16'17_callres
//│ --------------
//│ 11'x:
//│ 	11'x[+id:6^3] < ([]: 10'k)
//│ 	([]: C(([]: C(([]: C(([]: 16'17_callres))))))) < [-p:10^13 · +id1:7^12]11'x
//│ --------------
//│ 8'id6:
//│ 	8'id6[-id6:14^35] < ([]: ([id4:12^36]: 6'id4) => ([]: 25'37_callres))
//│ 	([]: ([]: 23'l) => ([]: 23'l)) < []8'id6
//│ --------------
//│ 19'24_callres:
//│ 	19'24_callres[] < ([]: 20'25_matchres)
//│ --------------
//│ 4'p:
//│ 	4'p[-p:10^13 · +id1:7^12] < ([]: 11'x)
//│ 	4'p[-p:10^44 · +id3:9^43] < ([]: 14'z)
//│ 	([]: C(([]: C(([]: C(([]: 16'17_callres))))))) < []4'p
//│ --------------
//│ 15'14_callres:
//│ 	15'14_callres[+id7:15^11 · -id7:15^11 · -p:10^13 · +id1:7^12 · +id:6^3 · -id:6^3 · -id1:7^12 · +id7:15^11 · -id7:15^11 · -p:10^44 · +id3:9^43 · -id3:9^43 · +id5:13^40 · -id5:13^40 · +id2:8^41 · -id2:8^41 · +id5:13^40 · -id5:13^40 · +id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22] < ([]: 18'a)
//│ 	15'14_callres[+id7:15^11 · -id7:15^11 · -p:10^44 · +id3:9^43 · -id3:9^43 · +id5:13^40 · -id5:13^40 · +id2:8^41 · -id2:8^41 · +id5:13^40 · -id5:13^40 · +id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22] < ([]: 18'a)
//│ 	([-id:6^3 · +id:6^3 · +id1:7^12 · -p:10^13]: C(([]: C(([]: C(([]: 16'17_callres))))))) < [-id1:7^12]15'14_callres
//│ --------------
//│ 24'i:
//│ 	24'i[] < ([-id7:15^11]: 16'17_callres)
//│ 	([+id7:15^11]: C(([]: C(([]: 15'14_callres))))) < []24'i
//│ --------------
//│ 25'37_callres:
//│ 	25'37_callres[] < ([]: ([c:11^38]: 5'c) => ([]: 26'39_callres))
//│ 	([+id6:14^35 · -id4:12^36]: ([]: 21'k) => ([]: 21'k)) < [-id6:14^35]25'37_callres
//│ --------------
//│ 20'25_matchres:
//│ 	20'25_matchres[] < ([-c:11^22]: 19'24_callres)
//│ 	20'25_matchres[-c:11^38 · +id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35] < ([]: 30'47_callres)
//│ --------------
//│ 29'46_callres:
//│ 	29'46_callres[] < ([+id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38]: 17'xx)
//│ 	([+id2:8^41 · -id5:13^40 · +id5:13^40 · -id3:9^43 · +id3:9^43 · -p:10^44]: C(([]: C(([]: C(([]: 16'17_callres))))))) < [-id2:8^41 · +id5:13^40 · -id5:13^40]29'46_callres
//│ --------------
//│ 28'45_callres:
//│ 	28'45_callres[] < ([+id5:13^40 · -id5:13^40 · +id2:8^41]: 13'y)
//│ 	([+id3:9^43 · -p:10^44]: C(([]: C(([]: C(([]: 16'17_callres))))))) < [-id3:9^43]28'45_callres
//│ --------------
//│ 21'k:
//│ 	21'k[-id4:12^36 · +id6:14^35 · -id6:14^35] < ([]: 26'39_callres)
//│ 	([]: ([]: 17'xx) => ([]: 20'25_matchres)) < [-c:11^38 · +id6:14^35 · -id6:14^35 · +id4:12^36]21'k
//│ --------------
//│ 22'j:
//│ 	22'j[] < ([-id5:13^40]: 27'42_callres)
//│ 	([]: ([]: 13'y) => ([]: 13'y)) < [-id2:8^41 · +id5:13^40]22'j
//│ --------------
//│ 27'42_callres:
//│ 	27'42_callres[] < ([]: ([]: 28'45_callres) => ([]: 29'46_callres))
//│ 	([+id5:13^40 · -id2:8^41]: ([]: 13'y) => ([]: 13'y)) < [-id5:13^40]27'42_callres
//│ --------------
//│ 26'39_callres:
//│ 	26'39_callres[] < ([]: ([]: 29'46_callres) => ([]: 30'47_callres))
//│ 	([+id4:12^36 · -id6:14^35 · +id6:14^35 · -c:11^38]: ([]: 17'xx) => ([]: 20'25_matchres)) < [-id4:12^36 · +id6:14^35 · -id6:14^35]26'39_callres
//│ --------------
//│ 23'l:
//│ 	23'l[] < ([-id6:14^35]: 25'37_callres)
//│ 	([]: ([]: 21'k) => ([]: 21'k)) < [-id4:12^36 · +id6:14^35]23'l
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<
