:NewParser
:ParseOnly

// WRONG: no push in, but all the elements can be handled
_LUMBERHACK_ERROR
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
fun ff(x) = if x is
    K then T
    KK then TT
    KKKK then TTTT
let l = C(K, C(KK, C(KKKK, N)))
map(ff, l)
//│ |_LUMBERHACK_ERROR|↵|#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|ff|,| |l|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; let l = C (K, C (KK, C (KKKK, N,),),); map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((map^28 ff^29) l^31)
//│ def ff = (fun x⁰ -> case x⁰ of {
//│ 	K => [T]
//│ 	| KK => [TT]
//│ 	| KKKK => [TTTT]})
//│ def l = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map = (fun f⁰ -> (fun ls⁰ -> case ls⁰ of {
//│ 	C h⁰ t⁰ => [C (f⁰ h⁰) ((map^5 f⁰) t⁰)]
//│ 	| N => [N]}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [ff^29] (hopeless to continue)
//│ [l^31]
//│ [map^28]
//│ 	[map^28 · map^5]
//│ 		[map^28 · map^5 · map^5]
//│ 			[map^28 · map^5 · map^5 · map^5]
//│ 				[map^28 · map^5 · map^5 · map^5 · map^5] ---> [map^28 · map^5 · map^5 · map^5] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((map₀ ff₀) l₀)
//│ def ff₀ = 
//│ 	(fun x¹ -> case x¹ of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]})
//│ def l₀ = 
//│ 	[C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map₀ = 
//│ 	(fun f⁴ -> (fun ls⁴ -> case ls⁴ of {
//│ 		C h⁴ t⁴ => [C (f⁴ h⁴) ((map₁ f⁴) t⁴)]
//│ 		| N => [N]}))
//│ 	where
//│ 	def map₁ = 
//│ 		(fun f³ -> (fun ls³ -> case ls³ of {
//│ 			C h³ t³ => [C (f³ h³) ((map₂ f³) t³)]
//│ 			| N => [N]}))
//│ 		where
//│ 		def map₂ = 
//│ 			(fun f¹ -> (fun ls¹ -> case ls¹ of {
//│ 				C h¹ t¹ => [C (f¹ h¹) ((map₃ f¹) t¹)]
//│ 				| N => [N]}))
//│ 			where
//│ 			def map₃ = 
//│ 				(fun f² -> (fun ls² -> case ls² of {
//│ 					C h² t² => [C (f² h²) ((map₃ f²) t²)]
//│ 					| N => [N]}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C [KKKK] [N]] --->
//│ 	case ls¹ of {C h¹ t¹ => [C (f¹ h¹) ((map₃ f¹) t¹)] | N => [N]}
//│ [C [KK] [C [KKKK] [N]]] --->
//│ 	case ls³ of {C h³ t³ => [C (f³ h³) ((map₂ f³) t³)] | N => [N]}
//│ [C [K] [C [KK] [C [KKKK] [N]]]] --->
//│ 	case ls⁴ of {C h⁴ t⁴ => [C (f⁴ h⁴) ((map₁ f⁴) t⁴)] | N => [N]}
//│ [KKKK] --->
//│ 	case x¹ of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ [KK] --->
//│ 	case x¹ of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ [K] --->
//│ 	case x¹ of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ [N] --->
//│ 	case ls² of {C h² t² => [C (f² h²) ((map₃ f²) t²)] | N => [N]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((map₀ ff₀) l₀)
//│ def ff₀ = 
//│ 	(fun x¹ -> x¹)
//│ def l₀ = 
//│ 	let h⁴ = [T]
//│ 	in let t⁴ = 	
//│ 		let h³ = [TT]
//│ 		in let t³ = 	
//│ 			let h¹ = [TTTT]
//│ 			in let t¹ = [N]
//│ 			in [C (f¹ h¹) ((map₃ f¹) t¹)]
//│ 		in [C (f³ h³) ((map₂ f³) t³)]
//│ 	in [C (f⁴ h⁴) ((map₁ f⁴) t⁴)]
//│ def map₀ = 
//│ 	(fun f⁴ -> (fun ls⁴ -> ls⁴))
//│ 	where
//│ 	def map₁ = 
//│ 		(fun f³ -> (fun ls³ -> ls³))
//│ 		where
//│ 		def map₂ = 
//│ 			(fun f¹ -> (fun ls¹ -> ls¹))
//│ 			where
//│ 			def map₃ = 
//│ 				(fun f² -> (fun ls² -> ls²))
//│ <<<<<<< after fusion <<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: binding not found: Ident(false,f,1)
//│ !!!!!!ERROR!!!!!!

// WRONG: cannot handle the second rev call (but top level non-polymorphic multiple references can now be handled)
_LUMBERHACK_ERROR
fun rev(ls) = if ls is
  N then a => a
  C(h, t) then a => rev(t)(C(h, a))
rev(C(AA, C(BB, C(CC, N))))(N)
//│ |_LUMBERHACK_ERROR|↵|#fun| |rev|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |a| |=>| |a|↵|C|(|h|,| |t|)| |#then| |a| |=>| |rev|(|t|)|(|C|(|h|,| |a|)|)|←|↵|rev|(|C|(|AA|,| |C|(|BB|,| |C|(|CC|,| |N|)|)|)|)|(|N|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun rev = ls, => if ls is ‹(N) then a, => a; (C (h, t,)) then a, => rev (t,) (C (h, a,),)›; rev (C (AA, C (BB, C (CC, N,),),),) (N,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((rev^14 [C [AA] [C [BB] [C [CC] [N]]]]) [N])
//│ def rev = (fun ls⁰ -> case ls⁰ of {
//│ 	N => (fun a⁰ -> a⁰)
//│ 	| C h⁰ t⁰ => (fun a¹ -> ((rev^4 t⁰) [C h⁰ a¹]))})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [rev^14]
//│ 	[rev^14 · rev^4]
//│ 		[rev^14 · rev^4 · rev^4]
//│ 			[rev^14 · rev^4 · rev^4 · rev^4]
//│ 				[rev^14 · rev^4 · rev^4 · rev^4 · rev^4] ---> [rev^14 · rev^4 · rev^4 · rev^4] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((rev₀ [C [AA] [C [BB] [C [CC] [N]]]]) [N])
//│ def rev₀ = 
//│ 	(fun ls⁴ -> case ls⁴ of {
//│ 		N => (fun a⁸ -> a⁸)
//│ 		| C h⁴ t⁴ => (fun a⁹ -> ((rev₁ t⁴) [C h⁴ a⁹]))})
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun ls³ -> case ls³ of {
//│ 			N => (fun a⁶ -> a⁶)
//│ 			| C h³ t³ => (fun a⁷ -> ((rev₂ t³) [C h³ a⁷]))})
//│ 		where
//│ 		def rev₂ = 
//│ 			(fun ls² -> case ls² of {
//│ 				N => (fun a⁴ -> a⁴)
//│ 				| C h² t² => (fun a⁵ -> ((rev₃ t²) [C h² a⁵]))})
//│ 			where
//│ 			def rev₃ = 
//│ 				(fun ls¹ -> case ls¹ of {
//│ 					N => (fun a² -> a²)
//│ 					| C h¹ t¹ => (fun a³ -> ((rev₃ t¹) [C h¹ a³]))})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C [AA] [C [BB] [C [CC] [N]]]] --->
//│ 	case ls⁴ of {N => (fun a⁸ -> a⁸) | C h⁴ t⁴ => (fun a⁹ -> ((rev₁ t⁴) [C h⁴ a⁹]))}
//│ [C [BB] [C [CC] [N]]] --->
//│ 	case ls³ of {N => (fun a⁶ -> a⁶) | C h³ t³ => (fun a⁷ -> ((rev₂ t³) [C h³ a⁷]))}
//│ [C [CC] [N]] --->
//│ 	case ls² of {N => (fun a⁴ -> a⁴) | C h² t² => (fun a⁵ -> ((rev₃ t²) [C h² a⁵]))}
//│ [N] --->
//│ 	case ls¹ of {N => (fun a² -> a²) | C h¹ t¹ => (fun a³ -> ((rev₃ t¹) [C h¹ a³]))}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((rev₀ 
//│ 	let h⁴ = [AA]
//│ 	in let t⁴ = 	
//│ 		let h³ = [BB]
//│ 		in let t³ = 	
//│ 			let h² = [CC]
//│ 			in let t² = (fun a² -> a²)
//│ 			in (fun a⁵ -> ((rev₃ t²) [C h² a⁵]))
//│ 		in (fun a⁷ -> ((rev₂ t³) [C h³ a⁷]))
//│ 	in (fun a⁹ -> ((rev₁ t⁴) [C h⁴ a⁹]))) [N])
//│ def rev₀ = 
//│ 	(fun ls⁴ -> ls⁴)
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun ls³ -> ls³)
//│ 		where
//│ 		def rev₂ = 
//│ 			(fun ls² -> ls²)
//│ 			where
//│ 			def rev₃ = 
//│ 				(fun ls¹ -> ls¹)
//│ <<<<<<< after fusion <<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: expect to fail but pass
//│ !!!!!!ERROR!!!!!!


// `id2` used twice
// WRONG: recursive length wrong?
// NOTE: any more behavioural differences?
let p = C(C(C(id2(p))))
fun c(x) = if x is
    C(a) then if a is
        C(b) then c(b)
fun id2(yy) = yy
fun id(y) = id2(y)
c(id(p))
//│ |#let| |p| |#=| |C|(|C|(|C|(|id2|(|p|)|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|b|)| |#then| |c|(|b|)|←|←|↵|#fun| |id2|(|yy|)| |#=| |yy|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|c|(|id|(|p|)|)|
//│ Parsed: {let p = C (C (C (id2 (p,),),),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (b,)) then c (b,)››; fun id2 = yy, => yy; fun id = y, => id2 (y,); c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^21 (id^22 p^23))
//│ def c = (fun x⁰ -> case x⁰ of {
//│ 	C a⁰ => case a⁰ of {
//│ 		C b⁰ => (c^9 b⁰)}})
//│ def id = (fun y⁰ -> (id2^17 y⁰))
//│ def id2 = (fun yy⁰ -> yy⁰)
//│ def p = [C [C [C (id2^1 p^2)]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^21]
//│ 	[c^21 · c^9]
//│ 		[c^21 · c^9 · c^9]
//│ 			[c^21 · c^9 · c^9 · c^9]
//│ 				[c^21 · c^9 · c^9 · c^9 · c^9] ---> [c^21 · c^9] (only one)
//│ [id^22] (hopeless to continue)
//│ 	[id^22 · id2^17] (using original def)
//│ [p^23]
//│ 	[p^23 · id2^1] (hopeless to continue)
//│ 	[p^23 · p^2]
//│ 		[p^23 · p^2 · id2^1] (hopeless to continue)
//│ 		[p^23 · p^2 · p^2]
//│ 			[p^23 · p^2 · p^2 · id2^1] (hopeless to continue)
//│ 			[p^23 · p^2 · p^2 · p^2] ---> [p^23 · p^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (c₀ (id₀ p₀))
//│ def c₀ = 
//│ 	(fun x³ -> case x³ of {
//│ 		C a³ => case a³ of {
//│ 			C b³ => (c₁ b³)}})
//│ 	where
//│ 	def c₁ = 
//│ 		(fun x¹ -> case x¹ of {
//│ 			C a¹ => case a¹ of {
//│ 				C b¹ => (c₂ b¹)}})
//│ 		where
//│ 		def c₂ = 
//│ 			(fun x² -> case x² of {
//│ 				C a² => case a² of {
//│ 					C b² => (c₃ b²)}})
//│ 			where
//│ 			def c₃ = 
//│ 				(fun x⁴ -> case x⁴ of {
//│ 					C a⁴ => case a⁴ of {
//│ 						C b⁴ => (c₁ b⁴)}})
//│ def id₀ = 
//│ 	(fun y¹ -> (id2₀ y¹))
//│ 	where
//│ 	def id2₀ = 
//│ 		(fun yy³ -> yy³)
//│ def p₀ = 
//│ 	[C [C [C (id2₁ p₁)]]]
//│ 	where
//│ 	def id2₁ = 
//│ 		(fun yy⁴ -> yy⁴)
//│ 	def p₁ = 
//│ 		[C [C [C (id2₂ p₂)]]]
//│ 		where
//│ 		def id2₂ = 
//│ 			(fun yy¹ -> yy¹)
//│ 		def p₂ = 
//│ 			[C [C [C (id2₃ p₁)]]]
//│ 			where
//│ 			def id2₃ = 
//│ 				(fun yy² -> yy²)
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C (id2₁ p₁)] --->
//│ 	case x¹ of {C a¹ => case a¹ of {C b¹ => (c₂ b¹)}}
//│ [C (id2₂ p₂)] --->
//│ 	case a² of {C b² => (c₃ b²)}
//│ [C (id2₃ p₁)] --->
//│ 	case x¹ of {C a¹ => case a¹ of {C b¹ => (c₂ b¹)}}
//│ [C [C (id2₁ p₁)]] --->
//│ 	case a³ of {C b³ => (c₁ b³)}
//│ [C [C (id2₂ p₂)]] --->
//│ 	case x² of {C a² => case a² of {C b² => (c₃ b²)}}
//│ [C [C (id2₃ p₁)]] --->
//│ 	case a⁴ of {C b⁴ => (c₁ b⁴)}
//│ [C [C [C (id2₁ p₁)]]] --->
//│ 	case x³ of {C a³ => case a³ of {C b³ => (c₁ b³)}}
//│ [C [C [C (id2₂ p₂)]]] --->
//│ 	case a¹ of {C b¹ => (c₂ b¹)}
//│ [C [C [C (id2₃ p₁)]]] --->
//│ 	case x⁴ of {C a⁴ => case a⁴ of {C b⁴ => (c₁ b⁴)}}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c₀ (id₀ p₀))
//│ def c₀ = 
//│ 	(fun x³ -> x³)
//│ 	where
//│ 	def c₁ = 
//│ 		(fun x¹ -> x¹)
//│ 		where
//│ 		def c₂ = 
//│ 			(fun x² -> x²)
//│ 			where
//│ 			def c₃ = 
//│ 				(fun x⁴ -> x⁴)
//│ def id₀ = 
//│ 	(fun y¹ -> (id2₀ y¹))
//│ 	where
//│ 	def id2₀ = 
//│ 		(fun yy³ -> yy³)
//│ def p₀ = 
//│ 	let a³ = 	
//│ 		let b³ = 	
//│ 			let a¹ = (id2₁ p₁)
//│ 			in a¹
//│ 		in (c₁ b³)
//│ 	in a³
//│ 	where
//│ 	def id2₁ = 
//│ 		(fun yy⁴ -> yy⁴)
//│ 	def p₁ = 
//│ 		let b¹ = 	
//│ 			let a² = 	
//│ 				let b² = (id2₂ p₂)
//│ 				in (c₃ b²)
//│ 			in a²
//│ 		in (c₂ b¹)
//│ 		where
//│ 		def id2₂ = 
//│ 			(fun yy¹ -> yy¹)
//│ 		def p₂ = 
//│ 			let a⁴ = 	
//│ 				let b⁴ = 	
//│ 					let a¹ = (id2₃ p₁)
//│ 					in a¹
//│ 				in (c₁ b⁴)
//│ 			in a⁴
//│ 			where
//│ 			def id2₃ = 
//│ 				(fun yy² -> yy²)
//│ <<<<<<< after fusion <<<<<<<


// WRONG: no polymorphism
_LUMBERHACK_ERROR
fun id(x) = x
let p = C(p)
fun c(a) = if a is
    C(i) then c(i)
id(c)(id(p))
//│ |_LUMBERHACK_ERROR|↵|#fun| |id|(|x|)| |#=| |x|↵|#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|a|)| |#=| |#if| |a| |is|→|C|(|i|)| |#then| |c|(|i|)|←|↵|id|(|c|)|(|id|(|p|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun id = x, => x; let p = C (p,); fun c = a, => if a is ‹(C (i,)) then c (i,)›; id (c,) (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((id^11 c^12) (id^14 p^15))
//│ def c = (fun a⁰ -> case a⁰ of {
//│ 	C i⁰ => (c^6 i⁰)})
//│ def id = (fun x⁰ -> x⁰)
//│ def p = [C p^3]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error C('p) <: '16_callres => '17_callres
//│ !!!!!!ERROR!!!!!!

// WRONG:
// NOTE: but the result is correct
// but the multiple matches are concerning
fun map(ls) = if ls is
  C(hh, tt) then C(
    (if hh is
      A then B
      AA then BB
    ),
    map(tt)
  )
  N then N
fun rev(lss) = if lss is
  C(h, t) then a => rev(t)(C(h, a))
  N then a => a
map(rev(C(A, C(AA, N)))(N))
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|hh|,| |tt|)| |#then| |C|(|→|(|#if| |hh| |is|→|A| |#then| |B|↵|AA| |#then| |BB|←|↵|)|,|↵|map|(|tt|)|←|↵|)|↵|N| |#then| |N|←|↵|#fun| |rev|(|lss|)| |#=| |#if| |lss| |is|→|C|(|h|,| |t|)| |#then| |a| |=>| |rev|(|t|)|(|C|(|h|,| |a|)|)|↵|N| |#then| |a| |=>| |a|←|↵|map|(|rev|(|C|(|A|,| |C|(|AA|,| |N|)|)|)|(|N|)|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (hh, tt,)) then C ('(' if hh is ‹(A) then B; (AA) then BB›, ')', map (tt,),); (N) then N›; fun rev = lss, => if lss is ‹(C (h, t,)) then a, => rev (t,) (C (h, a,),); (N) then a, => a›; map (rev (C (A, C (AA, N,),),) (N,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (map^26 ((rev^27 [C [A] [C [AA] [N]]]) [N]))
//│ def map = (fun ls⁰ -> case ls⁰ of {
//│ 	C hh⁰ tt⁰ => [C case hh⁰ of {
//│ 		A => [B]
//│ 		| AA => [BB]} (map^6 tt⁰)]
//│ 	| N => [N]})
//│ def rev = (fun lss⁰ -> case lss⁰ of {
//│ 	C h⁰ t⁰ => (fun a⁰ -> ((rev^14 t⁰) [C h⁰ a⁰]))
//│ 	| N => (fun a¹ -> a¹)})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [map^26]
//│ 	[map^26 · map^6]
//│ 		[map^26 · map^6 · map^6] ---> [map^26 · map^6] (only one)
//│ [rev^27]
//│ 	[rev^27 · rev^14]
//│ 		[rev^27 · rev^14 · rev^14]
//│ 			[rev^27 · rev^14 · rev^14 · rev^14] ---> [rev^27 · rev^14 · rev^14] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (map₀ ((rev₀ [C [A] [C [AA] [N]]]) [N]))
//│ def map₀ = 
//│ 	(fun ls² -> case ls² of {
//│ 		C hh² tt² => [C case hh² of {
//│ 			A => [B]
//│ 			| AA => [BB]} (map₁ tt²)]
//│ 		| N => [N]})
//│ 	where
//│ 	def map₁ = 
//│ 		(fun ls¹ -> case ls¹ of {
//│ 			C hh¹ tt¹ => [C case hh¹ of {
//│ 				A => [B]
//│ 				| AA => [BB]} (map₁ tt¹)]
//│ 			| N => [N]})
//│ def rev₀ = 
//│ 	(fun lss² -> case lss² of {
//│ 		C h² t² => (fun a⁴ -> ((rev₁ t²) [C h² a⁴]))
//│ 		| N => (fun a⁵ -> a⁵)})
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun lss³ -> case lss³ of {
//│ 			C h³ t³ => (fun a⁶ -> ((rev₂ t³) [C h³ a⁶]))
//│ 			| N => (fun a⁷ -> a⁷)})
//│ 		where
//│ 		def rev₂ = 
//│ 			(fun lss¹ -> case lss¹ of {
//│ 				C h¹ t¹ => (fun a² -> ((rev₂ t¹) [C h¹ a²]))
//│ 				| N => (fun a³ -> a³)})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [AA] --->
//│ 	case hh² of {A => [B] | AA => [BB]}
//│ 	case hh¹ of {A => [B] | AA => [BB]}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [A] --->
//│ 	case hh¹ of {A => [B] | AA => [BB]}
//│ 	case hh² of {A => [B] | AA => [BB]}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C [AA] [N]] --->
//│ 	case lss³ of {C h³ t³ => (fun a⁶ -> ((rev₂ t³) [C h³ a⁶])) | N => (fun a⁷ -> a⁷)}
//│ [C [A] [C [AA] [N]]] --->
//│ 	case lss² of {C h² t² => (fun a⁴ -> ((rev₁ t²) [C h² a⁴])) | N => (fun a⁵ -> a⁵)}
//│ [C h² a⁴] --->
//│ 	case ls¹ of {C hh¹ tt¹ => [C case hh¹ of {A => [B] | AA => [BB]} (map₁ tt¹)] | N => [N]}
//│ 	case ls² of {C hh² tt² => [C case hh² of {A => [B] | AA => [BB]} (map₁ tt²)] | N => [N]}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C h¹ a²] --->
//│ 	case ls² of {C hh² tt² => [C case hh² of {A => [B] | AA => [BB]} (map₁ tt²)] | N => [N]}
//│ 	case ls¹ of {C hh¹ tt¹ => [C case hh¹ of {A => [B] | AA => [BB]} (map₁ tt¹)] | N => [N]}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C h³ a⁶] --->
//│ 	case ls² of {C hh² tt² => [C case hh² of {A => [B] | AA => [BB]} (map₁ tt²)] | N => [N]}
//│ 	case ls¹ of {C hh¹ tt¹ => [C case hh¹ of {A => [B] | AA => [BB]} (map₁ tt¹)] | N => [N]}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N] --->
//│ 	case lss¹ of {C h¹ t¹ => (fun a² -> ((rev₂ t¹) [C h¹ a²])) | N => (fun a³ -> a³)}
//│ [N] --->
//│ 	case ls¹ of {C hh¹ tt¹ => [C case hh¹ of {A => [B] | AA => [BB]} (map₁ tt¹)] | N => [N]}
//│ 	case ls² of {C hh² tt² => [C case hh² of {A => [B] | AA => [BB]} (map₁ tt²)] | N => [N]}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (map₀ ((rev₀ 
//│ 	let h² = [B]
//│ 	in let t² = 	
//│ 		let h³ = [BB]
//│ 		in let t³ = (fun a³ -> a³)
//│ 		in (fun a⁶ -> ((rev₂ t³) 
//│ 			let hh² = h³
//│ 			in let tt² = a⁶
//│ 			in [C hh² (map₁ tt²)]))
//│ 	in (fun a⁴ -> ((rev₁ t²) 
//│ 		let hh¹ = h²
//│ 		in let tt¹ = a⁴
//│ 		in [C hh¹ (map₁ tt¹)]))) [N]))
//│ def map₀ = 
//│ 	(fun ls² -> ls²)
//│ 	where
//│ 	def map₁ = 
//│ 		(fun ls¹ -> ls¹)
//│ def rev₀ = 
//│ 	(fun lss² -> lss²)
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun lss³ -> lss³)
//│ 		where
//│ 		def rev₂ = 
//│ 			(fun lss¹ -> lss¹)
//│ <<<<<<< after fusion <<<<<<<

// WRONG: recursive fusion strategies
_LUMBERHACK_ERROR
let p = Pair(A, B)
fun c(x) = if x is
  Pair(a, b) then c(Pair(b, a))
c(p)
//│ |_LUMBERHACK_ERROR|↵|#let| |p| |#=| |Pair|(|A|,| |B|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|Pair|(|a|,| |b|)| |#then| |c|(|Pair|(|b|,| |a|)|)|←|↵|c|(|p|)|
//│ Parsed: {_LUMBERHACK_ERROR; let p = Pair (A, B,); fun c = x, => if x is ‹(Pair (a, b,)) then c (Pair (b, a,),)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^12 p^13)
//│ def c = (fun x⁰ -> case x⁰ of {
//│ 	Pair a⁰ b⁰ => (c^5 [Pair b⁰ a⁰])})
//│ def p = [Pair [A] [B]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^12] (hopeless to continue)
//│ 	[c^12 · c^5] ---> [c^12] (using original def)
//│ [p^13] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (c₀ p₀)
//│ def c₀ = 
//│ 	(fun x¹ -> case x¹ of {
//│ 		Pair a¹ b¹ => (c₀ [Pair b¹ a¹])})
//│ def p₀ = 
//│ 	[Pair [A] [B]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [Pair [A] [B]] --->
//│ 	case x¹ of {Pair a¹ b¹ => (c₀ [Pair b¹ a¹])}
//│ [Pair b¹ a¹] --->
//│ 	case x¹ of {Pair a¹ b¹ => (c₀ [Pair b¹ a¹])}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ !!!!!!ERROR!!!!!!
//│ java.lang.StackOverflowError
//│ !!!!!!ERROR!!!!!!

// WRONG: it returns something like: C(1, C(9, C(2, ys => ys)))
// despite the fact that there is no clash at all
fun inter(xs) = if xs is
  N then ys => ys
  C(h, t) then ys => C(h, inter(ys)(t))
inter(C(1, C(2, N)))(C(9, N))
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|inter|(|C|(|1|,| |C|(|2|,| |N|)|)|)|(|C|(|9|,| |N|)|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; inter (C (1, C (2, N,),),) (C (9, N,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((inter^14 [C 1 [C 2 [N]]]) [C 9 [N]])
//│ def inter = (fun xs⁰ -> case xs⁰ of {
//│ 	N => (fun ys⁰ -> ys⁰)
//│ 	| C h⁰ t⁰ => (fun ys¹ -> [C h⁰ ((inter^5 ys¹) t⁰)])})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter^14]
//│ 	[inter^14 · inter^5]
//│ 		[inter^14 · inter^5 · inter^5]
//│ 			[inter^14 · inter^5 · inter^5 · inter^5]
//│ 				[inter^14 · inter^5 · inter^5 · inter^5 · inter^5]
//│ 					[inter^14 · inter^5 · inter^5 · inter^5 · inter^5 · inter^5] ---> [inter^14 · inter^5 · inter^5 · inter^5] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((inter₀ [C 1 [C 2 [N]]]) [C 9 [N]])
//│ def inter₀ = 
//│ 	(fun xs¹ -> case xs¹ of {
//│ 		N => (fun ys² -> ys²)
//│ 		| C h¹ t¹ => (fun ys³ -> [C h¹ ((inter₁ ys³) t¹)])})
//│ 	where
//│ 	def inter₁ = 
//│ 		(fun xs⁵ -> case xs⁵ of {
//│ 			N => (fun ys¹⁰ -> ys¹⁰)
//│ 			| C h⁵ t⁵ => (fun ys¹¹ -> [C h⁵ ((inter₂ ys¹¹) t⁵)])})
//│ 		where
//│ 		def inter₂ = 
//│ 			(fun xs⁴ -> case xs⁴ of {
//│ 				N => (fun ys⁸ -> ys⁸)
//│ 				| C h⁴ t⁴ => (fun ys⁹ -> [C h⁴ ((inter₃ ys⁹) t⁴)])})
//│ 			where
//│ 			def inter₃ = 
//│ 				(fun xs³ -> case xs³ of {
//│ 					N => (fun ys⁶ -> ys⁶)
//│ 					| C h³ t³ => (fun ys⁷ -> [C h³ ((inter₄ ys⁷) t³)])})
//│ 				where
//│ 				def inter₄ = 
//│ 					(fun xs² -> case xs² of {
//│ 						N => (fun ys⁴ -> ys⁴)
//│ 						| C h² t² => (fun ys⁵ -> [C h² ((inter₃ ys⁵) t²)])})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 1 [C 2 [N]]] --->
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ ((inter₁ ys³) t¹)])}
//│ [C 2 [N]] --->
//│ 	case xs⁴ of {N => (fun ys⁸ -> ys⁸) | C h⁴ t⁴ => (fun ys⁹ -> [C h⁴ ((inter₃ ys⁹) t⁴)])}
//│ [C 9 [N]] --->
//│ 	case xs⁵ of {N => (fun ys¹⁰ -> ys¹⁰) | C h⁵ t⁵ => (fun ys¹¹ -> [C h⁵ ((inter₂ ys¹¹) t⁵)])}
//│ [N] --->
//│ 	case xs³ of {N => (fun ys⁶ -> ys⁶) | C h³ t³ => (fun ys⁷ -> [C h³ ((inter₄ ys⁷) t³)])}
//│ [N] --->
//│ 	case xs² of {N => (fun ys⁴ -> ys⁴) | C h² t² => (fun ys⁵ -> [C h² ((inter₃ ys⁵) t²)])}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((inter₀ 
//│ 	let h¹ = 1
//│ 	in let t¹ = 	
//│ 		let h⁴ = 2
//│ 		in let t⁴ = (fun ys⁴ -> ys⁴)
//│ 		in (fun ys⁹ -> [C h⁴ ((inter₃ ys⁹) t⁴)])
//│ 	in (fun ys³ -> [C h¹ ((inter₁ ys³) t¹)])) 
//│ 	let h⁵ = 9
//│ 	in let t⁵ = (fun ys⁶ -> ys⁶)
//│ 	in (fun ys¹¹ -> [C h⁵ ((inter₂ ys¹¹) t⁵)]))
//│ def inter₀ = 
//│ 	(fun xs¹ -> xs¹)
//│ 	where
//│ 	def inter₁ = 
//│ 		(fun xs⁵ -> xs⁵)
//│ 		where
//│ 		def inter₂ = 
//│ 			(fun xs⁴ -> xs⁴)
//│ 			where
//│ 			def inter₃ = 
//│ 				(fun xs³ -> xs³)
//│ 				where
//│ 				def inter₄ = 
//│ 					(fun xs² -> xs²)
//│ <<<<<<< after fusion <<<<<<<


// WRONG:
_LUMBERHACK_ERROR
fun inter(xs) = if xs is
  N then ys => ys
  C(h, t) then ys => C(h, inter(ys)(t))
fun typeCheck(ls) = if ls is
  C(a, b) then typeCheck(b)
  N then OK
typeCheck(inter(C(1, C(2, N)))(C(9, N)))
//│ |_LUMBERHACK_ERROR|↵|#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|#fun| |typeCheck|(|ls|)| |#=| |#if| |ls| |is|→|C|(|a|,| |b|)| |#then| |typeCheck|(|b|)|↵|N| |#then| |OK|←|↵|typeCheck|(|inter|(|C|(|1|,| |C|(|2|,| |N|)|)|)|(|C|(|9|,| |N|)|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; fun typeCheck = ls, => if ls is ‹(C (a, b,)) then typeCheck (b,); (N) then OK›; typeCheck (inter (C (1, C (2, N,),),) (C (9, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (typeCheck^21 ((inter^22 [C 1 [C 2 [N]]]) [C 9 [N]]))
//│ def inter = (fun xs⁰ -> case xs⁰ of {
//│ 	N => (fun ys⁰ -> ys⁰)
//│ 	| C h⁰ t⁰ => (fun ys¹ -> [C h⁰ ((inter^5 ys¹) t⁰)])})
//│ def typeCheck = (fun ls⁰ -> case ls⁰ of {
//│ 	C a⁰ b⁰ => (typeCheck^15 b⁰)
//│ 	| N => [OK]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter^22]
//│ 	[inter^22 · inter^5]
//│ 		[inter^22 · inter^5 · inter^5] ---> [inter^22 · inter^5] (only one)
//│ [typeCheck^21]
//│ 	[typeCheck^21 · typeCheck^15] ---> [typeCheck^21] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (typeCheck₀ ((inter₀ [C 1 [C 2 [N]]]) [C 9 [N]]))
//│ def inter₀ = 
//│ 	(fun xs² -> case xs² of {
//│ 		N => (fun ys⁴ -> ys⁴)
//│ 		| C h² t² => (fun ys⁵ -> [C h² ((inter₁ ys⁵) t²)])})
//│ 	where
//│ 	def inter₁ = 
//│ 		(fun xs¹ -> case xs¹ of {
//│ 			N => (fun ys² -> ys²)
//│ 			| C h¹ t¹ => (fun ys³ -> [C h¹ ((inter₁ ys³) t¹)])})
//│ def typeCheck₀ = 
//│ 	(fun ls¹ -> case ls¹ of {
//│ 		C a¹ b¹ => (typeCheck₀ b¹)
//│ 		| N => [OK]})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 1 [C 2 [N]]] --->
//│ 	case xs² of {N => (fun ys⁴ -> ys⁴) | C h² t² => (fun ys⁵ -> [C h² ((inter₁ ys⁵) t²)])}
//│ [C 2 [N]] --->
//│ 	case ls¹ of {C a¹ b¹ => (typeCheck₀ b¹) | N => [OK]}
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ ((inter₁ ys³) t¹)])}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C 9 [N]] --->
//│ 	case ls¹ of {C a¹ b¹ => (typeCheck₀ b¹) | N => [OK]}
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ ((inter₁ ys³) t¹)])}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C h¹ ((inter₁ ys³) t¹)] --->
//│ 	case ls¹ of {C a¹ b¹ => (typeCheck₀ b¹) | N => [OK]}
//│ [C h² ((inter₁ ys⁵) t²)] --->
//│ 	case ls¹ of {C a¹ b¹ => (typeCheck₀ b¹) | N => [OK]}
//│ [N] --->
//│ 	case ls¹ of {C a¹ b¹ => (typeCheck₀ b¹) | N => [OK]}
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ ((inter₁ ys³) t¹)])}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N] --->
//│ 	case ls¹ of {C a¹ b¹ => (typeCheck₀ b¹) | N => [OK]}
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ ((inter₁ ys³) t¹)])}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (typeCheck₀ ((inter₀ 
//│ 	let h² = 1
//│ 	in let t² = 	
//│ 		let h¹ = 2
//│ 		in let t¹ = (fun ys² -> ys²)
//│ 		in (fun ys³ -> 
//│ 			let a¹ = h¹
//│ 			in let b¹ = ((inter₁ ys³) t¹)
//│ 			in (typeCheck₀ b¹))
//│ 	in (fun ys⁵ -> 
//│ 		let a¹ = h²
//│ 		in let b¹ = ((inter₁ ys⁵) t²)
//│ 		in (typeCheck₀ b¹))) 
//│ 	let a¹ = 9
//│ 	in let b¹ = [OK]
//│ 	in (typeCheck₀ b¹)))
//│ def inter₀ = 
//│ 	(fun xs² -> xs²)
//│ 	where
//│ 	def inter₁ = 
//│ 		(fun xs¹ -> xs¹)
//│ def typeCheck₀ = 
//│ 	(fun ls¹ -> ls¹)
//│ <<<<<<< after fusion <<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error OK <: 't² => '89_callres
//│ !!!!!!ERROR!!!!!!

:ns
// TODO:
_LUMBERHACK_ERROR
fun idxSum(ls) = if ls is
  N then acc => 0
  C(h, t) then acc => acc + idxSum(t)(acc + 1)
fun rev(lss) = if lss is
  N then a => a
  C(hh, tt) then a => rev(tt)(C(hh, a))
idxSum(rev(primitive, N))(0)
//│ |_LUMBERHACK_ERROR|↵|#fun| |idxSum|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |acc| |=>| |0|↵|C|(|h|,| |t|)| |#then| |acc| |=>| |acc| |+| |idxSum|(|t|)|(|acc| |+| |1|)|←|↵|#fun| |rev|(|lss|)| |#=| |#if| |lss| |is|→|N| |#then| |a| |=>| |a|↵|C|(|hh|,| |tt|)| |#then| |a| |=>| |rev|(|tt|)|(|C|(|hh|,| |a|)|)|←|↵|idxSum|(|rev|(|primitive|,| |N|)|)|(|0|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun idxSum = ls, => if ls is ‹(N) then acc, => 0; (C (h, t,)) then acc, => + (acc,) (idxSum (t,) (+ (acc,) (1,),),)›; fun rev = lss, => if lss is ‹(N) then a, => a; (C (hh, tt,)) then a, => rev (tt,) (C (hh, a,),)›; idxSum (rev (primitive, N,),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((idxSum^33 ((rev^34 primitive⁰) [N])) 0)
//│ def idxSum = (fun ls⁰ -> case ls⁰ of {
//│ 	N => (fun acc⁰ -> 0)
//│ 	| C h⁰ t⁰ => (fun acc¹ -> (acc¹ + ((idxSum^7 t⁰) (acc¹ + 1))))})
//│ def rev = (fun lss⁰ -> case lss⁰ of {
//│ 	N => (fun a⁰ -> a⁰)
//│ 	| C hh⁰ tt⁰ => (fun a¹ -> ((rev^23 tt⁰) [C hh⁰ a¹]))})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [idxSum^33]
//│ 	[idxSum^33 · idxSum^7]
//│ 		[idxSum^33 · idxSum^7 · idxSum^7] ---> [idxSum^33 · idxSum^7] (only one)
//│ [rev^34]
//│ 	[rev^34 · rev^23]
//│ 		[rev^34 · rev^23 · rev^23] ---> [rev^34 · rev^23] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((idxSum₀ ((rev₀ primitive⁰) [N])) 0)
//│ def idxSum₀ = 
//│ 	(fun ls² -> case ls² of {
//│ 		N => (fun acc⁴ -> 0)
//│ 		| C h² t² => (fun acc⁵ -> (acc⁵ + ((idxSum₁ t²) (acc⁵ + 1))))})
//│ 	where
//│ 	def idxSum₁ = 
//│ 		(fun ls¹ -> case ls¹ of {
//│ 			N => (fun acc² -> 0)
//│ 			| C h¹ t¹ => (fun acc³ -> (acc³ + ((idxSum₁ t¹) (acc³ + 1))))})
//│ def rev₀ = 
//│ 	(fun lss¹ -> case lss¹ of {
//│ 		N => (fun a² -> a²)
//│ 		| C hh¹ tt¹ => (fun a³ -> ((rev₁ tt¹) [C hh¹ a³]))})
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun lss² -> case lss² of {
//│ 			N => (fun a⁴ -> a⁴)
//│ 			| C hh² tt² => (fun a⁵ -> ((rev₁ tt²) [C hh² a⁵]))})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C hh² a⁵] --->
//│ 	case ls² of {N => (fun acc⁴ -> 0) | C h² t² => (fun acc⁵ -> (acc⁵ + ((idxSum₁ t²) (acc⁵ + 1))))}
//│ 	case ls¹ of {N => (fun acc² -> 0) | C h¹ t¹ => (fun acc³ -> (acc³ + ((idxSum₁ t¹) (acc³ + 1))))}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C hh¹ a³] --->
//│ 	case ls¹ of {N => (fun acc² -> 0) | C h¹ t¹ => (fun acc³ -> (acc³ + ((idxSum₁ t¹) (acc³ + 1))))}
//│ 	case ls² of {N => (fun acc⁴ -> 0) | C h² t² => (fun acc⁵ -> (acc⁵ + ((idxSum₁ t²) (acc⁵ + 1))))}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N] --->
//│ 	case ls² of {N => (fun acc⁴ -> 0) | C h² t² => (fun acc⁵ -> (acc⁵ + ((idxSum₁ t²) (acc⁵ + 1))))}
//│ 	case ls¹ of {N => (fun acc² -> 0) | C h¹ t¹ => (fun acc³ -> (acc³ + ((idxSum₁ t¹) (acc³ + 1))))}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((idxSum₀ ((rev₀ primitive⁰) (fun acc⁴ -> 0))) 0)
//│ def idxSum₀ = 
//│ 	(fun ls² -> ls²)
//│ 	where
//│ 	def idxSum₁ = 
//│ 		(fun ls¹ -> ls¹)
//│ def rev₀ = 
//│ 	(fun lss¹ -> case lss¹ of {
//│ 		N => (fun a² -> a²)
//│ 		| C hh¹ tt¹ => (fun a³ -> ((rev₁ tt¹) 
//│ 			let h¹ = hh¹
//│ 			in let t¹ = a³
//│ 			in (fun acc³ -> (acc³ + ((idxSum₁ t¹) (acc³ + 1))))))})
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun lss² -> case lss² of {
//│ 			N => (fun a⁴ -> a⁴)
//│ 			| C hh² tt² => (fun a⁵ -> ((rev₁ tt²) 
//│ 				let h² = hh²
//│ 				in let t² = a⁵
//│ 				in (fun acc⁵ -> (acc⁵ + ((idxSum₁ t²) (acc⁵ + 1))))))})
//│ <<<<<<< after fusion <<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: expect to fail but pass
//│ !!!!!!ERROR!!!!!!


// WRONG: type
_LUMBERHACK_ERROR
fun id(x) = if x is
  ID(b) then b
  _ then id(ID(x))
let p = C(p)
fun c(y) = if y is
  C(aa) then c(aa)
c(id(p))
//│ |_LUMBERHACK_ERROR|↵|#fun| |id|(|x|)| |#=| |#if| |x| |is|→|ID|(|b|)| |#then| |b|↵|_| |#then| |id|(|ID|(|x|)|)|←|↵|#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|y|)| |#=| |#if| |y| |is|→|C|(|aa|)| |#then| |c|(|aa|)|←|↵|c|(|id|(|p|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun id = x, => if x is ‹(ID (b,)) then b; (_) then id (ID (x,),)›; let p = C (p,); fun c = y, => if y is ‹(C (aa,)) then c (aa,)›; c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^17 (id^18 p^19))
//│ def c = (fun y⁰ -> case y⁰ of {
//│ 	C aa⁰ => (c^12 aa⁰)})
//│ def id = (fun x⁰ -> case x⁰ of {
//│ 	ID b⁰ => b⁰
//│ 	| _ => (id^3 [ID x⁰])})
//│ def p = [C p^9]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error ID('x⁰) <: Destruct(C('aa⁰))
//│ !!!!!!ERROR!!!!!!
