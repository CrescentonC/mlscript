:NewParser
:ParseOnly

// WRONG: no push in, but all the elements can be handled
_LUMBERHACK_ERROR
fun map(f, ls) = if ls is
  C(h, t) then C(f(h), map(f, t))
  N then N
fun ff(x) = if x is
  K then T
  KK then TT
  KKKK then TTTT
let l = C(K, C(KK, C(KKKK, N)))
map(ff, l)
//│ |_LUMBERHACK_ERROR|↵|#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|ff|,| |l|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; let l = C (K, C (KK, C (KKKK, N,),),); map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((map^28 ff^29) l^31)
//│ def ff = (fun x⁰ -> case x⁰ of {
//│ 	K => [T]
//│ 	| KK => [TT]
//│ 	| KKKK => [TTTT]})
//│ def l = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map = (fun f⁰ -> (fun ls⁰ -> case ls⁰ of {
//│ 	C h⁰ t⁰ => [C (f⁰ h⁰) ((map^5 f⁰) t⁰)]
//│ 	| N => [N]}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [ff^29] (hopeless to continue)
//│ [l^31]
//│ [map^28]
//│ 	[map^28 · map^5]
//│ 		[map^28 · map^5 · map^5]
//│ 			[map^28 · map^5 · map^5 · map^5]
//│ 				[map^28 · map^5 · map^5 · map^5 · map^5] ---> [map^28 · map^5 · map^5 · map^5] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((map₀ ff₀) l₀)
//│ def ff₀ = 
//│ 	(fun x¹ -> case x¹ of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]})
//│ def l₀ = 
//│ 	[C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map₀ = 
//│ 	(fun f⁴ -> (fun ls⁴ -> case ls⁴ of {
//│ 		C h⁴ t⁴ => [C (f⁴ h⁴) ((map₁ f⁴) t⁴)]
//│ 		| N => [N]}))
//│ 	where
//│ 	def map₁ = 
//│ 		(fun f³ -> (fun ls³ -> case ls³ of {
//│ 			C h³ t³ => [C (f³ h³) ((map₂ f³) t³)]
//│ 			| N => [N]}))
//│ 		where
//│ 		def map₂ = 
//│ 			(fun f¹ -> (fun ls¹ -> case ls¹ of {
//│ 				C h¹ t¹ => [C (f¹ h¹) ((map₃ f¹) t¹)]
//│ 				| N => [N]}))
//│ 			where
//│ 			def map₃ = 
//│ 				(fun f² -> (fun ls² -> case ls² of {
//│ 					C h² t² => [C (f² h²) ((map₃ f²) t²)]
//│ 					| N => [N]}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C [KKKK] [N]]: 99 --->
//│ 	case ls¹ of {C h¹ t¹ => [C (f¹ h¹) ((map₃ f¹) t¹)] | N => [N]}: 44
//│ [C [KK] [C [KKKK] [N]]]: 100 --->
//│ 	case ls³ of {C h³ t³ => [C (f³ h³) ((map₂ f³) t³)] | N => [N]}: 72
//│ [C [K] [C [KK] [C [KKKK] [N]]]]: 101 --->
//│ 	case ls⁴ of {C h⁴ t⁴ => [C (f⁴ h⁴) ((map₁ f⁴) t⁴)] | N => [N]}: 92
//│ [KKKK]: 97 --->
//│ 	case x¹ of {K => [T] | KK => [TT] | KKKK => [TTTT]}: 79
//│ [KK]: 96 --->
//│ 	case x¹ of {K => [T] | KK => [TT] | KKKK => [TTTT]}: 79
//│ [K]: 95 --->
//│ 	case x¹ of {K => [T] | KK => [TT] | KKKK => [TTTT]}: 79
//│ [N]: 98 --->
//│ 	case ls² of {C h² t² => [C (f² h²) ((map₃ f²) t²)] | N => [N]}: 58
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((map₀ ff₀) l₀)
//│ def ff₀ = 
//│ 	(fun x¹ -> x¹)
//│ def l₀ = 
//│ 	let h⁴ = [T]
//│ 	in let t⁴ = 	
//│ 		let h³ = [TT]
//│ 		in let t³ = 	
//│ 			let h¹ = [TTTT]
//│ 			in let t¹ = [N]
//│ 			in [C (f¹ h¹) ((map₃ f¹) t¹)]
//│ 		in [C (f³ h³) ((map₂ f³) t³)]
//│ 	in [C (f⁴ h⁴) ((map₁ f⁴) t⁴)]
//│ def map₀ = 
//│ 	(fun f⁴ -> (fun ls⁴ -> ls⁴))
//│ 	where
//│ 	def map₁ = 
//│ 		(fun f³ -> (fun ls³ -> ls³))
//│ 		where
//│ 		def map₂ = 
//│ 			(fun f¹ -> (fun ls¹ -> ls¹))
//│ 			where
//│ 			def map₃ = 
//│ 				(fun f² -> (fun ls² -> ls²))
//│ <<<<<<< after fusion <<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: binding not found: Ident(false,f,1)
//│ !!!!!!ERROR!!!!!!

// WRONG: cannot handle the second rev call (but top level non-polymorphic multiple references can now be handled)
_LUMBERHACK_ERROR
fun rev(ls) = if ls is
  N then a => a
  C(h, t) then a => rev(t)(C(h, a))
rev(C(AA, C(BB, C(CC, N))))(N)
//│ |_LUMBERHACK_ERROR|↵|#fun| |rev|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |a| |=>| |a|↵|C|(|h|,| |t|)| |#then| |a| |=>| |rev|(|t|)|(|C|(|h|,| |a|)|)|←|↵|rev|(|C|(|AA|,| |C|(|BB|,| |C|(|CC|,| |N|)|)|)|)|(|N|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun rev = ls, => if ls is ‹(N) then a, => a; (C (h, t,)) then a, => rev (t,) (C (h, a,),)›; rev (C (AA, C (BB, C (CC, N,),),),) (N,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((rev^14 [C [AA] [C [BB] [C [CC] [N]]]]) [N])
//│ def rev = (fun ls⁰ -> case ls⁰ of {
//│ 	N => (fun a⁰ -> a⁰)
//│ 	| C h⁰ t⁰ => (fun a¹ -> ((rev^4 t⁰) [C h⁰ a¹]))})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [rev^14]
//│ 	[rev^14 · rev^4]
//│ 		[rev^14 · rev^4 · rev^4]
//│ 			[rev^14 · rev^4 · rev^4 · rev^4]
//│ 				[rev^14 · rev^4 · rev^4 · rev^4 · rev^4] ---> [rev^14 · rev^4 · rev^4 · rev^4] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((rev₀ [C [AA] [C [BB] [C [CC] [N]]]]) [N])
//│ def rev₀ = 
//│ 	(fun ls⁴ -> case ls⁴ of {
//│ 		N => (fun a⁸ -> a⁸)
//│ 		| C h⁴ t⁴ => (fun a⁹ -> ((rev₁ t⁴) [C h⁴ a⁹]))})
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun ls³ -> case ls³ of {
//│ 			N => (fun a⁶ -> a⁶)
//│ 			| C h³ t³ => (fun a⁷ -> ((rev₂ t³) [C h³ a⁷]))})
//│ 		where
//│ 		def rev₂ = 
//│ 			(fun ls² -> case ls² of {
//│ 				N => (fun a⁴ -> a⁴)
//│ 				| C h² t² => (fun a⁵ -> ((rev₃ t²) [C h² a⁵]))})
//│ 			where
//│ 			def rev₃ = 
//│ 				(fun ls¹ -> case ls¹ of {
//│ 					N => (fun a² -> a²)
//│ 					| C h¹ t¹ => (fun a³ -> ((rev₃ t¹) [C h¹ a³]))})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C [AA] [C [BB] [C [CC] [N]]]]: 84 --->
//│ 	case ls⁴ of {N => (fun a⁸ -> a⁸) | C h⁴ t⁴ => (fun a⁹ -> ((rev₁ t⁴) [C h⁴ a⁹]))}: 75
//│ [C [BB] [C [CC] [N]]]: 83 --->
//│ 	case ls³ of {N => (fun a⁶ -> a⁶) | C h³ t³ => (fun a⁷ -> ((rev₂ t³) [C h³ a⁷]))}: 62
//│ [C [CC] [N]]: 82 --->
//│ 	case ls² of {N => (fun a⁴ -> a⁴) | C h² t² => (fun a⁵ -> ((rev₃ t²) [C h² a⁵]))}: 49
//│ [N]: 81 --->
//│ 	case ls¹ of {N => (fun a² -> a²) | C h¹ t¹ => (fun a³ -> ((rev₃ t¹) [C h¹ a³]))}: 36
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((rev₀ 
//│ 	let h⁴ = [AA]
//│ 	in let t⁴ = 	
//│ 		let h³ = [BB]
//│ 		in let t³ = 	
//│ 			let h² = [CC]
//│ 			in let t² = (fun a² -> a²)
//│ 			in (fun a⁵ -> ((rev₃ t²) [C h² a⁵]))
//│ 		in (fun a⁷ -> ((rev₂ t³) [C h³ a⁷]))
//│ 	in (fun a⁹ -> ((rev₁ t⁴) [C h⁴ a⁹]))) [N])
//│ def rev₀ = 
//│ 	(fun ls⁴ -> ls⁴)
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun ls³ -> ls³)
//│ 		where
//│ 		def rev₂ = 
//│ 			(fun ls² -> ls²)
//│ 			where
//│ 			def rev₃ = 
//│ 				(fun ls¹ -> ls¹)
//│ <<<<<<< after fusion <<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: expect to fail but pass
//│ !!!!!!ERROR!!!!!!


// `id2` used twice
// WRONG: recursive length wrong?
// NOTE: any more behavioural differences?
let p = C(C(C(id2(p))))
fun c(x) = if x is
  C(a) then if a is
    C(b) then c(b)
fun id2(yy) = yy
fun id(y) = id2(y)
c(id(p))
//│ |#let| |p| |#=| |C|(|C|(|C|(|id2|(|p|)|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|b|)| |#then| |c|(|b|)|←|←|↵|#fun| |id2|(|yy|)| |#=| |yy|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|c|(|id|(|p|)|)|
//│ Parsed: {let p = C (C (C (id2 (p,),),),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (b,)) then c (b,)››; fun id2 = yy, => yy; fun id = y, => id2 (y,); c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^21 (id^22 p^23))
//│ def c = (fun x⁰ -> case x⁰ of {
//│ 	C a⁰ => case a⁰ of {
//│ 		C b⁰ => (c^9 b⁰)}})
//│ def id = (fun y⁰ -> (id2^17 y⁰))
//│ def id2 = (fun yy⁰ -> yy⁰)
//│ def p = [C [C [C (id2^1 p^2)]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^21]
//│ 	[c^21 · c^9]
//│ 		[c^21 · c^9 · c^9]
//│ 			[c^21 · c^9 · c^9 · c^9]
//│ 				[c^21 · c^9 · c^9 · c^9 · c^9] ---> [c^21 · c^9] (only one)
//│ [id^22] (hopeless to continue)
//│ 	[id^22 · id2^17] (using original def)
//│ [p^23]
//│ 	[p^23 · id2^1] (hopeless to continue)
//│ 	[p^23 · p^2]
//│ 		[p^23 · p^2 · id2^1] (hopeless to continue)
//│ 		[p^23 · p^2 · p^2]
//│ 			[p^23 · p^2 · p^2 · id2^1] (hopeless to continue)
//│ 			[p^23 · p^2 · p^2 · p^2] ---> [p^23 · p^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (c₀ (id₀ p₀))
//│ def c₀ = 
//│ 	(fun x³ -> case x³ of {
//│ 		C a³ => case a³ of {
//│ 			C b³ => (c₁ b³)}})
//│ 	where
//│ 	def c₁ = 
//│ 		(fun x¹ -> case x¹ of {
//│ 			C a¹ => case a¹ of {
//│ 				C b¹ => (c₂ b¹)}})
//│ 		where
//│ 		def c₂ = 
//│ 			(fun x² -> case x² of {
//│ 				C a² => case a² of {
//│ 					C b² => (c₃ b²)}})
//│ 			where
//│ 			def c₃ = 
//│ 				(fun x⁴ -> case x⁴ of {
//│ 					C a⁴ => case a⁴ of {
//│ 						C b⁴ => (c₁ b⁴)}})
//│ def id₀ = 
//│ 	(fun y¹ -> (id2₀ y¹))
//│ 	where
//│ 	def id2₀ = 
//│ 		(fun yy³ -> yy³)
//│ def p₀ = 
//│ 	[C [C [C (id2₁ p₁)]]]
//│ 	where
//│ 	def id2₁ = 
//│ 		(fun yy⁴ -> yy⁴)
//│ 	def p₁ = 
//│ 		[C [C [C (id2₂ p₂)]]]
//│ 		where
//│ 		def id2₂ = 
//│ 			(fun yy¹ -> yy¹)
//│ 		def p₂ = 
//│ 			[C [C [C (id2₃ p₁)]]]
//│ 			where
//│ 			def id2₃ = 
//│ 				(fun yy² -> yy²)
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C (id2₁ p₁)]: 85 --->
//│ 	case x¹ of {C a¹ => case a¹ of {C b¹ => (c₂ b¹)}}: 32
//│ [C (id2₂ p₂)]: 71 --->
//│ 	case a² of {C b² => (c₃ b²)}: 51
//│ [C (id2₃ p₁)]: 41 --->
//│ 	case x¹ of {C a¹ => case a¹ of {C b¹ => (c₂ b¹)}}: 32
//│ [C [C (id2₁ p₁)]]: 86 --->
//│ 	case a³ of {C b³ => (c₁ b³)}: 59
//│ [C [C (id2₂ p₂)]]: 72 --->
//│ 	case x² of {C a² => case a² of {C b² => (c₃ b²)}}: 52
//│ [C [C (id2₃ p₁)]]: 42 --->
//│ 	case a⁴ of {C b⁴ => (c₁ b⁴)}: 79
//│ [C [C [C (id2₁ p₁)]]]: 87 --->
//│ 	case x³ of {C a³ => case a³ of {C b³ => (c₁ b³)}}: 60
//│ [C [C [C (id2₂ p₂)]]]: 73 --->
//│ 	case a¹ of {C b¹ => (c₂ b¹)}: 31
//│ [C [C [C (id2₃ p₁)]]]: 43 --->
//│ 	case x⁴ of {C a⁴ => case a⁴ of {C b⁴ => (c₁ b⁴)}}: 80
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c₀ (id₀ p₀))
//│ def c₀ = 
//│ 	(fun x³ -> x³)
//│ 	where
//│ 	def c₁ = 
//│ 		(fun x¹ -> x¹)
//│ 		where
//│ 		def c₂ = 
//│ 			(fun x² -> x²)
//│ 			where
//│ 			def c₃ = 
//│ 				(fun x⁴ -> x⁴)
//│ def id₀ = 
//│ 	(fun y¹ -> (id2₀ y¹))
//│ 	where
//│ 	def id2₀ = 
//│ 		(fun yy³ -> yy³)
//│ def p₀ = 
//│ 	let a³ = 	
//│ 		let b³ = 	
//│ 			let a¹ = (id2₁ p₁)
//│ 			in a¹
//│ 		in (c₁ b³)
//│ 	in a³
//│ 	where
//│ 	def id2₁ = 
//│ 		(fun yy⁴ -> yy⁴)
//│ 	def p₁ = 
//│ 		let b¹ = 	
//│ 			let a² = 	
//│ 				let b² = (id2₂ p₂)
//│ 				in (c₃ b²)
//│ 			in a²
//│ 		in (c₂ b¹)
//│ 		where
//│ 		def id2₂ = 
//│ 			(fun yy¹ -> yy¹)
//│ 		def p₂ = 
//│ 			let a⁴ = 	
//│ 				let b⁴ = 	
//│ 					let a¹ = (id2₃ p₁)
//│ 					in a¹
//│ 				in (c₁ b⁴)
//│ 			in a⁴
//│ 			where
//│ 			def id2₃ = 
//│ 				(fun yy² -> yy²)
//│ <<<<<<< after fusion <<<<<<<


// WRONG: no polymorphism
_LUMBERHACK_ERROR
fun id(x) = x
let p = C(p)
fun c(a) = if a is
  C(i) then c(i)
id(c)(id(p))
//│ |_LUMBERHACK_ERROR|↵|#fun| |id|(|x|)| |#=| |x|↵|#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|a|)| |#=| |#if| |a| |is|→|C|(|i|)| |#then| |c|(|i|)|←|↵|id|(|c|)|(|id|(|p|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun id = x, => x; let p = C (p,); fun c = a, => if a is ‹(C (i,)) then c (i,)›; id (c,) (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((id^11 c^12) (id^14 p^15))
//│ def c = (fun a⁰ -> case a⁰ of {
//│ 	C i⁰ => (c^6 i⁰)})
//│ def id = (fun x⁰ -> x⁰)
//│ def p = [C p^3]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error C('p) <: '16_callres => '17_callres
//│ !!!!!!ERROR!!!!!!

// WRONG:
// NOTE: but the result is correct
// but the multiple matches are concerning
fun map(ls) = if ls is
  C(hh, tt) then C(
    (if hh is
      A then B
      AA then BB
    ),
    map(tt)
  )
  N then N
fun rev(lss) = if lss is
  C(h, t) then a => rev(t)(C(h, a))
  N then a => a
map(rev(C(A, C(AA, N)))(N))
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|hh|,| |tt|)| |#then| |C|(|→|(|#if| |hh| |is|→|A| |#then| |B|↵|AA| |#then| |BB|←|↵|)|,|↵|map|(|tt|)|←|↵|)|↵|N| |#then| |N|←|↵|#fun| |rev|(|lss|)| |#=| |#if| |lss| |is|→|C|(|h|,| |t|)| |#then| |a| |=>| |rev|(|t|)|(|C|(|h|,| |a|)|)|↵|N| |#then| |a| |=>| |a|←|↵|map|(|rev|(|C|(|A|,| |C|(|AA|,| |N|)|)|)|(|N|)|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (hh, tt,)) then C ('(' if hh is ‹(A) then B; (AA) then BB›, ')', map (tt,),); (N) then N›; fun rev = lss, => if lss is ‹(C (h, t,)) then a, => rev (t,) (C (h, a,),); (N) then a, => a›; map (rev (C (A, C (AA, N,),),) (N,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (map^26 ((rev^27 [C [A] [C [AA] [N]]]) [N]))
//│ def map = (fun ls⁰ -> case ls⁰ of {
//│ 	C hh⁰ tt⁰ => [C case hh⁰ of {
//│ 		A => [B]
//│ 		| AA => [BB]} (map^6 tt⁰)]
//│ 	| N => [N]})
//│ def rev = (fun lss⁰ -> case lss⁰ of {
//│ 	C h⁰ t⁰ => (fun a⁰ -> ((rev^14 t⁰) [C h⁰ a⁰]))
//│ 	| N => (fun a¹ -> a¹)})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [map^26]
//│ 	[map^26 · map^6]
//│ 		[map^26 · map^6 · map^6] ---> [map^26 · map^6] (only one)
//│ [rev^27]
//│ 	[rev^27 · rev^14]
//│ 		[rev^27 · rev^14 · rev^14]
//│ 			[rev^27 · rev^14 · rev^14 · rev^14] ---> [rev^27 · rev^14 · rev^14] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (map₀ ((rev₀ [C [A] [C [AA] [N]]]) [N]))
//│ def map₀ = 
//│ 	(fun ls² -> case ls² of {
//│ 		C hh² tt² => [C case hh² of {
//│ 			A => [B]
//│ 			| AA => [BB]} (map₁ tt²)]
//│ 		| N => [N]})
//│ 	where
//│ 	def map₁ = 
//│ 		(fun ls¹ -> case ls¹ of {
//│ 			C hh¹ tt¹ => [C case hh¹ of {
//│ 				A => [B]
//│ 				| AA => [BB]} (map₁ tt¹)]
//│ 			| N => [N]})
//│ def rev₀ = 
//│ 	(fun lss² -> case lss² of {
//│ 		C h² t² => (fun a⁴ -> ((rev₁ t²) [C h² a⁴]))
//│ 		| N => (fun a⁵ -> a⁵)})
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun lss³ -> case lss³ of {
//│ 			C h³ t³ => (fun a⁶ -> ((rev₂ t³) [C h³ a⁶]))
//│ 			| N => (fun a⁷ -> a⁷)})
//│ 		where
//│ 		def rev₂ = 
//│ 			(fun lss¹ -> case lss¹ of {
//│ 				C h¹ t¹ => (fun a² -> ((rev₂ t¹) [C h¹ a²]))
//│ 				| N => (fun a³ -> a³)})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [AA]: 103 --->
//│ 	case hh² of {A => [B] | AA => [BB]}: 66
//│ 	case hh¹ of {A => [B] | AA => [BB]}: 41
//│ 	 MORE THAN ONE MATCH EXPR
//│ [A]: 102 --->
//│ 	case hh¹ of {A => [B] | AA => [BB]}: 41
//│ 	case hh² of {A => [B] | AA => [BB]}: 66
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C [AA] [N]]: 105 --->
//│ 	case lss³ of {C h³ t³ => (fun a⁶ -> ((rev₂ t³) [C h³ a⁶])) | N => (fun a⁷ -> a⁷)}: 98
//│ [C [A] [C [AA] [N]]]: 106 --->
//│ 	case lss² of {C h² t² => (fun a⁴ -> ((rev₁ t²) [C h² a⁴])) | N => (fun a⁵ -> a⁵)}: 85
//│ [C h² a⁴]: 80 --->
//│ 	case ls¹ of {C hh¹ tt¹ => [C case hh¹ of {A => [B] | AA => [BB]} (map₁ tt¹)] | N => [N]}: 47
//│ 	case ls² of {C hh² tt² => [C case hh² of {A => [B] | AA => [BB]} (map₁ tt²)] | N => [N]}: 72
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C h¹ a²]: 55 --->
//│ 	case ls² of {C hh² tt² => [C case hh² of {A => [B] | AA => [BB]} (map₁ tt²)] | N => [N]}: 72
//│ 	case ls¹ of {C hh¹ tt¹ => [C case hh¹ of {A => [B] | AA => [BB]} (map₁ tt¹)] | N => [N]}: 47
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C h³ a⁶]: 93 --->
//│ 	case ls² of {C hh² tt² => [C case hh² of {A => [B] | AA => [BB]} (map₁ tt²)] | N => [N]}: 72
//│ 	case ls¹ of {C hh¹ tt¹ => [C case hh¹ of {A => [B] | AA => [BB]} (map₁ tt¹)] | N => [N]}: 47
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N]: 104 --->
//│ 	case lss¹ of {C h¹ t¹ => (fun a² -> ((rev₂ t¹) [C h¹ a²])) | N => (fun a³ -> a³)}: 60
//│ [N]: 108 --->
//│ 	case ls¹ of {C hh¹ tt¹ => [C case hh¹ of {A => [B] | AA => [BB]} (map₁ tt¹)] | N => [N]}: 47
//│ 	case ls² of {C hh² tt² => [C case hh² of {A => [B] | AA => [BB]} (map₁ tt²)] | N => [N]}: 72
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (map₀ ((rev₀ 
//│ 	let h² = [B]
//│ 	in let t² = 	
//│ 		let h³ = [BB]
//│ 		in let t³ = (fun a³ -> a³)
//│ 		in (fun a⁶ -> ((rev₂ t³) 
//│ 			let hh² = h³
//│ 			in let tt² = a⁶
//│ 			in [C hh² (map₁ tt²)]))
//│ 	in (fun a⁴ -> ((rev₁ t²) 
//│ 		let hh¹ = h²
//│ 		in let tt¹ = a⁴
//│ 		in [C hh¹ (map₁ tt¹)]))) [N]))
//│ def map₀ = 
//│ 	(fun ls² -> ls²)
//│ 	where
//│ 	def map₁ = 
//│ 		(fun ls¹ -> ls¹)
//│ def rev₀ = 
//│ 	(fun lss² -> lss²)
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun lss³ -> lss³)
//│ 		where
//│ 		def rev₂ = 
//│ 			(fun lss¹ -> lss¹)
//│ <<<<<<< after fusion <<<<<<<

// WRONG: recursive fusion strategies
_LUMBERHACK_ERROR
let p = Pair(A, B)
fun c(x) = if x is
  Pair(a, b) then c(Pair(b, a))
c(p)
//│ |_LUMBERHACK_ERROR|↵|#let| |p| |#=| |Pair|(|A|,| |B|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|Pair|(|a|,| |b|)| |#then| |c|(|Pair|(|b|,| |a|)|)|←|↵|c|(|p|)|
//│ Parsed: {_LUMBERHACK_ERROR; let p = Pair (A, B,); fun c = x, => if x is ‹(Pair (a, b,)) then c (Pair (b, a,),)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^12 p^13)
//│ def c = (fun x⁰ -> case x⁰ of {
//│ 	Pair a⁰ b⁰ => (c^5 [Pair b⁰ a⁰])})
//│ def p = [Pair [A] [B]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^12] (hopeless to continue)
//│ 	[c^12 · c^5] ---> [c^12] (using original def)
//│ [p^13] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (c₀ p₀)
//│ def c₀ = 
//│ 	(fun x¹ -> case x¹ of {
//│ 		Pair a¹ b¹ => (c₀ [Pair b¹ a¹])})
//│ def p₀ = 
//│ 	[Pair [A] [B]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [Pair [A] [B]]: 25 --->
//│ 	case x¹ of {Pair a¹ b¹ => (c₀ [Pair b¹ a¹])}: 21
//│ [Pair b¹ a¹]: 19 --->
//│ 	case x¹ of {Pair a¹ b¹ => (c₀ [Pair b¹ a¹])}: 21
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ !!!!!!ERROR!!!!!!
//│ java.lang.StackOverflowError
//│ !!!!!!ERROR!!!!!!

// WRONG: it returns something like: C(1, C(9, C(2, ys => ys)))
// despite the fact that there is no clash at all
fun inter(xs) = if xs is
  N then ys => ys
  C(h, t) then ys => C(h, inter(ys)(t))
inter(C(1, C(2, N)))(C(9, N))
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|inter|(|C|(|1|,| |C|(|2|,| |N|)|)|)|(|C|(|9|,| |N|)|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; inter (C (1, C (2, N,),),) (C (9, N,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((inter^14 [C 1 [C 2 [N]]]) [C 9 [N]])
//│ def inter = (fun xs⁰ -> case xs⁰ of {
//│ 	N => (fun ys⁰ -> ys⁰)
//│ 	| C h⁰ t⁰ => (fun ys¹ -> [C h⁰ ((inter^5 ys¹) t⁰)])})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter^14]
//│ 	[inter^14 · inter^5]
//│ 		[inter^14 · inter^5 · inter^5]
//│ 			[inter^14 · inter^5 · inter^5 · inter^5]
//│ 				[inter^14 · inter^5 · inter^5 · inter^5 · inter^5]
//│ 					[inter^14 · inter^5 · inter^5 · inter^5 · inter^5 · inter^5] ---> [inter^14 · inter^5 · inter^5 · inter^5] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((inter₀ [C 1 [C 2 [N]]]) [C 9 [N]])
//│ def inter₀ = 
//│ 	(fun xs¹ -> case xs¹ of {
//│ 		N => (fun ys² -> ys²)
//│ 		| C h¹ t¹ => (fun ys³ -> [C h¹ ((inter₁ ys³) t¹)])})
//│ 	where
//│ 	def inter₁ = 
//│ 		(fun xs⁵ -> case xs⁵ of {
//│ 			N => (fun ys¹⁰ -> ys¹⁰)
//│ 			| C h⁵ t⁵ => (fun ys¹¹ -> [C h⁵ ((inter₂ ys¹¹) t⁵)])})
//│ 		where
//│ 		def inter₂ = 
//│ 			(fun xs⁴ -> case xs⁴ of {
//│ 				N => (fun ys⁸ -> ys⁸)
//│ 				| C h⁴ t⁴ => (fun ys⁹ -> [C h⁴ ((inter₃ ys⁹) t⁴)])})
//│ 			where
//│ 			def inter₃ = 
//│ 				(fun xs³ -> case xs³ of {
//│ 					N => (fun ys⁶ -> ys⁶)
//│ 					| C h³ t³ => (fun ys⁷ -> [C h³ ((inter₄ ys⁷) t³)])})
//│ 				where
//│ 				def inter₄ = 
//│ 					(fun xs² -> case xs² of {
//│ 						N => (fun ys⁴ -> ys⁴)
//│ 						| C h² t² => (fun ys⁵ -> [C h² ((inter₃ ys⁵) t²)])})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 1 [C 2 [N]]]: 95 --->
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ ((inter₁ ys³) t¹)])}: 36
//│ [C 2 [N]]: 94 --->
//│ 	case xs⁴ of {N => (fun ys⁸ -> ys⁸) | C h⁴ t⁴ => (fun ys⁹ -> [C h⁴ ((inter₃ ys⁹) t⁴)])}: 75
//│ [C 9 [N]]: 99 --->
//│ 	case xs⁵ of {N => (fun ys¹⁰ -> ys¹⁰) | C h⁵ t⁵ => (fun ys¹¹ -> [C h⁵ ((inter₂ ys¹¹) t⁵)])}: 88
//│ [N]: 98 --->
//│ 	case xs³ of {N => (fun ys⁶ -> ys⁶) | C h³ t³ => (fun ys⁷ -> [C h³ ((inter₄ ys⁷) t³)])}: 62
//│ [N]: 93 --->
//│ 	case xs² of {N => (fun ys⁴ -> ys⁴) | C h² t² => (fun ys⁵ -> [C h² ((inter₃ ys⁵) t²)])}: 49
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((inter₀ 
//│ 	let h¹ = 1
//│ 	in let t¹ = 	
//│ 		let h⁴ = 2
//│ 		in let t⁴ = (fun ys⁴ -> ys⁴)
//│ 		in (fun ys⁹ -> [C h⁴ ((inter₃ ys⁹) t⁴)])
//│ 	in (fun ys³ -> [C h¹ ((inter₁ ys³) t¹)])) 
//│ 	let h⁵ = 9
//│ 	in let t⁵ = (fun ys⁶ -> ys⁶)
//│ 	in (fun ys¹¹ -> [C h⁵ ((inter₂ ys¹¹) t⁵)]))
//│ def inter₀ = 
//│ 	(fun xs¹ -> xs¹)
//│ 	where
//│ 	def inter₁ = 
//│ 		(fun xs⁵ -> xs⁵)
//│ 		where
//│ 		def inter₂ = 
//│ 			(fun xs⁴ -> xs⁴)
//│ 			where
//│ 			def inter₃ = 
//│ 				(fun xs³ -> xs³)
//│ 				where
//│ 				def inter₄ = 
//│ 					(fun xs² -> xs²)
//│ <<<<<<< after fusion <<<<<<<


// WRONG:
_LUMBERHACK_ERROR
fun inter(xs) = if xs is
  N then ys => ys
  C(h, t) then ys => C(h, inter(ys)(t))
fun typeCheck(ls) = if ls is
  C(a, b) then typeCheck(b)
  N then OK
typeCheck(inter(C(1, C(2, N)))(C(9, N)))
//│ |_LUMBERHACK_ERROR|↵|#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|#fun| |typeCheck|(|ls|)| |#=| |#if| |ls| |is|→|C|(|a|,| |b|)| |#then| |typeCheck|(|b|)|↵|N| |#then| |OK|←|↵|typeCheck|(|inter|(|C|(|1|,| |C|(|2|,| |N|)|)|)|(|C|(|9|,| |N|)|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; fun typeCheck = ls, => if ls is ‹(C (a, b,)) then typeCheck (b,); (N) then OK›; typeCheck (inter (C (1, C (2, N,),),) (C (9, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (typeCheck^21 ((inter^22 [C 1 [C 2 [N]]]) [C 9 [N]]))
//│ def inter = (fun xs⁰ -> case xs⁰ of {
//│ 	N => (fun ys⁰ -> ys⁰)
//│ 	| C h⁰ t⁰ => (fun ys¹ -> [C h⁰ ((inter^5 ys¹) t⁰)])})
//│ def typeCheck = (fun ls⁰ -> case ls⁰ of {
//│ 	C a⁰ b⁰ => (typeCheck^15 b⁰)
//│ 	| N => [OK]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter^22]
//│ 	[inter^22 · inter^5]
//│ 		[inter^22 · inter^5 · inter^5] ---> [inter^22 · inter^5] (only one)
//│ [typeCheck^21]
//│ 	[typeCheck^21 · typeCheck^15] ---> [typeCheck^21] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (typeCheck₀ ((inter₀ [C 1 [C 2 [N]]]) [C 9 [N]]))
//│ def inter₀ = 
//│ 	(fun xs² -> case xs² of {
//│ 		N => (fun ys⁴ -> ys⁴)
//│ 		| C h² t² => (fun ys⁵ -> [C h² ((inter₁ ys⁵) t²)])})
//│ 	where
//│ 	def inter₁ = 
//│ 		(fun xs¹ -> case xs¹ of {
//│ 			N => (fun ys² -> ys²)
//│ 			| C h¹ t¹ => (fun ys³ -> [C h¹ ((inter₁ ys³) t¹)])})
//│ def typeCheck₀ = 
//│ 	(fun ls¹ -> case ls¹ of {
//│ 		C a¹ b¹ => (typeCheck₀ b¹)
//│ 		| N => [OK]})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 1 [C 2 [N]]]: 73 --->
//│ 	case xs² of {N => (fun ys⁴ -> ys⁴) | C h² t² => (fun ys⁵ -> [C h² ((inter₁ ys⁵) t²)])}: 65
//│ [C 2 [N]]: 72 --->
//│ 	case ls¹ of {C a¹ b¹ => (typeCheck₀ b¹) | N => [OK]}: 39
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ ((inter₁ ys³) t¹)])}: 52
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C 9 [N]]: 77 --->
//│ 	case ls¹ of {C a¹ b¹ => (typeCheck₀ b¹) | N => [OK]}: 39
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ ((inter₁ ys³) t¹)])}: 52
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C h¹ ((inter₁ ys³) t¹)]: 50 --->
//│ 	case ls¹ of {C a¹ b¹ => (typeCheck₀ b¹) | N => [OK]}: 39
//│ [C h² ((inter₁ ys⁵) t²)]: 63 --->
//│ 	case ls¹ of {C a¹ b¹ => (typeCheck₀ b¹) | N => [OK]}: 39
//│ [N]: 71 --->
//│ 	case ls¹ of {C a¹ b¹ => (typeCheck₀ b¹) | N => [OK]}: 39
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ ((inter₁ ys³) t¹)])}: 52
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N]: 76 --->
//│ 	case ls¹ of {C a¹ b¹ => (typeCheck₀ b¹) | N => [OK]}: 39
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ ((inter₁ ys³) t¹)])}: 52
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (typeCheck₀ ((inter₀ 
//│ 	let h² = 1
//│ 	in let t² = 	
//│ 		let h¹ = 2
//│ 		in let t¹ = (fun ys² -> ys²)
//│ 		in (fun ys³ -> 
//│ 			let a¹ = h¹
//│ 			in let b¹ = ((inter₁ ys³) t¹)
//│ 			in (typeCheck₀ b¹))
//│ 	in (fun ys⁵ -> 
//│ 		let a¹ = h²
//│ 		in let b¹ = ((inter₁ ys⁵) t²)
//│ 		in (typeCheck₀ b¹))) 
//│ 	let a¹ = 9
//│ 	in let b¹ = [OK]
//│ 	in (typeCheck₀ b¹)))
//│ def inter₀ = 
//│ 	(fun xs² -> xs²)
//│ 	where
//│ 	def inter₁ = 
//│ 		(fun xs¹ -> xs¹)
//│ def typeCheck₀ = 
//│ 	(fun ls¹ -> ls¹)
//│ <<<<<<< after fusion <<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error OK <: 't² => '89_callres
//│ !!!!!!ERROR!!!!!!

:ns
// TODO:
_LUMBERHACK_ERROR
fun idxSum(ls) = if ls is
  N then acc => 0
  C(h, t) then acc => acc + idxSum(t)(acc + 1)
fun rev(lss) = if lss is
  N then a => a
  C(hh, tt) then a => rev(tt)(C(hh, a))
idxSum(rev(primitive, N))(0)
//│ |_LUMBERHACK_ERROR|↵|#fun| |idxSum|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |acc| |=>| |0|↵|C|(|h|,| |t|)| |#then| |acc| |=>| |acc| |+| |idxSum|(|t|)|(|acc| |+| |1|)|←|↵|#fun| |rev|(|lss|)| |#=| |#if| |lss| |is|→|N| |#then| |a| |=>| |a|↵|C|(|hh|,| |tt|)| |#then| |a| |=>| |rev|(|tt|)|(|C|(|hh|,| |a|)|)|←|↵|idxSum|(|rev|(|primitive|,| |N|)|)|(|0|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun idxSum = ls, => if ls is ‹(N) then acc, => 0; (C (h, t,)) then acc, => + (acc,) (idxSum (t,) (+ (acc,) (1,),),)›; fun rev = lss, => if lss is ‹(N) then a, => a; (C (hh, tt,)) then a, => rev (tt,) (C (hh, a,),)›; idxSum (rev (primitive, N,),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((idxSum^33 ((rev^34 primitive⁰) [N])) 0)
//│ def idxSum = (fun ls⁰ -> case ls⁰ of {
//│ 	N => (fun acc⁰ -> 0)
//│ 	| C h⁰ t⁰ => (fun acc¹ -> (acc¹ + ((idxSum^7 t⁰) (acc¹ + 1))))})
//│ def rev = (fun lss⁰ -> case lss⁰ of {
//│ 	N => (fun a⁰ -> a⁰)
//│ 	| C hh⁰ tt⁰ => (fun a¹ -> ((rev^23 tt⁰) [C hh⁰ a¹]))})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [idxSum^33]
//│ 	[idxSum^33 · idxSum^7]
//│ 		[idxSum^33 · idxSum^7 · idxSum^7] ---> [idxSum^33 · idxSum^7] (only one)
//│ [rev^34]
//│ 	[rev^34 · rev^23]
//│ 		[rev^34 · rev^23 · rev^23] ---> [rev^34 · rev^23] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((idxSum₀ ((rev₀ primitive⁰) [N])) 0)
//│ def idxSum₀ = 
//│ 	(fun ls² -> case ls² of {
//│ 		N => (fun acc⁴ -> 0)
//│ 		| C h² t² => (fun acc⁵ -> (acc⁵ + ((idxSum₁ t²) (acc⁵ + 1))))})
//│ 	where
//│ 	def idxSum₁ = 
//│ 		(fun ls¹ -> case ls¹ of {
//│ 			N => (fun acc² -> 0)
//│ 			| C h¹ t¹ => (fun acc³ -> (acc³ + ((idxSum₁ t¹) (acc³ + 1))))})
//│ def rev₀ = 
//│ 	(fun lss¹ -> case lss¹ of {
//│ 		N => (fun a² -> a²)
//│ 		| C hh¹ tt¹ => (fun a³ -> ((rev₁ tt¹) [C hh¹ a³]))})
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun lss² -> case lss² of {
//│ 			N => (fun a⁴ -> a⁴)
//│ 			| C hh² tt² => (fun a⁵ -> ((rev₁ tt²) [C hh² a⁵]))})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C hh² a⁵]: 101 --->
//│ 	case ls² of {N => (fun acc⁴ -> 0) | C h² t² => (fun acc⁵ -> (acc⁵ + ((idxSum₁ t²) (acc⁵ + 1))))}: 78
//│ 	case ls¹ of {N => (fun acc² -> 0) | C h¹ t¹ => (fun acc³ -> (acc³ + ((idxSum₁ t¹) (acc³ + 1))))}: 59
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C hh¹ a³]: 88 --->
//│ 	case ls¹ of {N => (fun acc² -> 0) | C h¹ t¹ => (fun acc³ -> (acc³ + ((idxSum₁ t¹) (acc³ + 1))))}: 59
//│ 	case ls² of {N => (fun acc⁴ -> 0) | C h² t² => (fun acc⁵ -> (acc⁵ + ((idxSum₁ t²) (acc⁵ + 1))))}: 78
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N]: 110 --->
//│ 	case ls² of {N => (fun acc⁴ -> 0) | C h² t² => (fun acc⁵ -> (acc⁵ + ((idxSum₁ t²) (acc⁵ + 1))))}: 78
//│ 	case ls¹ of {N => (fun acc² -> 0) | C h¹ t¹ => (fun acc³ -> (acc³ + ((idxSum₁ t¹) (acc³ + 1))))}: 59
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((idxSum₀ ((rev₀ primitive⁰) (fun acc⁴ -> 0))) 0)
//│ def idxSum₀ = 
//│ 	(fun ls² -> ls²)
//│ 	where
//│ 	def idxSum₁ = 
//│ 		(fun ls¹ -> ls¹)
//│ def rev₀ = 
//│ 	(fun lss¹ -> case lss¹ of {
//│ 		N => (fun a² -> a²)
//│ 		| C hh¹ tt¹ => (fun a³ -> ((rev₁ tt¹) 
//│ 			let h¹ = hh¹
//│ 			in let t¹ = a³
//│ 			in (fun acc³ -> (acc³ + ((idxSum₁ t¹) (acc³ + 1))))))})
//│ 	where
//│ 	def rev₁ = 
//│ 		(fun lss² -> case lss² of {
//│ 			N => (fun a⁴ -> a⁴)
//│ 			| C hh² tt² => (fun a⁵ -> ((rev₁ tt²) 
//│ 				let h² = hh²
//│ 				in let t² = a⁵
//│ 				in (fun acc⁵ -> (acc⁵ + ((idxSum₁ t²) (acc⁵ + 1))))))})
//│ <<<<<<< after fusion <<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: expect to fail but pass
//│ !!!!!!ERROR!!!!!!


// WRONG: type
_LUMBERHACK_ERROR
fun id(x) = if x is
  ID(b) then b
  _ then id(ID(x))
let p = C(p)
fun c(y) = if y is
  C(aa) then c(aa)
c(id(p))
//│ |_LUMBERHACK_ERROR|↵|#fun| |id|(|x|)| |#=| |#if| |x| |is|→|ID|(|b|)| |#then| |b|↵|_| |#then| |id|(|ID|(|x|)|)|←|↵|#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|y|)| |#=| |#if| |y| |is|→|C|(|aa|)| |#then| |c|(|aa|)|←|↵|c|(|id|(|p|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun id = x, => if x is ‹(ID (b,)) then b; (_) then id (ID (x,),)›; let p = C (p,); fun c = y, => if y is ‹(C (aa,)) then c (aa,)›; c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^17 (id^18 p^19))
//│ def c = (fun y⁰ -> case y⁰ of {
//│ 	C aa⁰ => (c^12 aa⁰)})
//│ def id = (fun x⁰ -> case x⁰ of {
//│ 	ID b⁰ => b⁰
//│ 	| _ => (id^3 [ID x⁰])})
//│ def p = [C p^9]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error ID('x⁰) <: Destruct(C('aa⁰))
//│ !!!!!!ERROR!!!!!!



// WRONG:
_LUMBERHACK_ERROR
fun inter(xs) = if xs is
  N then ys => ys
  C(h, t) then ys => C(h, inter(ys)(t))
fun l1(x) = C(1, C(2, l1(add(x, 1))))
let rec l2 = C(9, C(8, l2))
inter(l1(0))(l2)
//│ |_LUMBERHACK_ERROR|↵|#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|#fun| |l1|(|x|)| |#=| |C|(|1|,| |C|(|2|,| |l1|(|add|(|x|,| |1|)|)|)|)|↵|#let| |#rec| |l2| |#=| |C|(|9|,| |C|(|8|,| |l2|)|)|↵|inter|(|l1|(|0|)|)|(|l2|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; fun l1 = x, => C (1, C (2, l1 (add (x, 1,),),),); let rec l2 = C (9, C (8, l2,),); inter (l1 (0,),) (l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((inter^31 (l1^32 0)) l2^36)
//│ def inter = (fun xs⁰ -> case xs⁰ of {
//│ 	N => (fun ys⁰ -> ys⁰)
//│ 	| C h⁰ t⁰ => (fun ys¹ -> [C h⁰ ((inter^5 ys¹) t⁰)])})
//│ def l1 = (fun x⁰ -> [C 1 [C 2 (l1^16 ((add⁰ x⁰) 1))]])
//│ def l2 = [C 9 [C 8 l2^28]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter^31]
//│ 	[inter^31 · inter^5]
//│ 		[inter^31 · inter^5 · inter^5]
//│ 			[inter^31 · inter^5 · inter^5 · inter^5]
//│ 				[inter^31 · inter^5 · inter^5 · inter^5 · inter^5]
//│ 					[inter^31 · inter^5 · inter^5 · inter^5 · inter^5 · inter^5] ---> [inter^31 · inter^5] (only one)
//│ [l1^32]
//│ 	[l1^32 · l1^16] ---> [l1^32] (only one)
//│ [l2^36]
//│ 	[l2^36 · l2^28] ---> [l2^36] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((inter₀ (l1₀ 0)) l2₀)
//│ def inter₀ = 
//│ 	(fun xs⁵ -> case xs⁵ of {
//│ 		N => (fun ys¹⁰ -> ys¹⁰)
//│ 		| C h⁵ t⁵ => (fun ys¹¹ -> [C h⁵ ((inter₁ ys¹¹) t⁵)])})
//│ 	where
//│ 	def inter₁ = 
//│ 		(fun xs² -> case xs² of {
//│ 			N => (fun ys⁴ -> ys⁴)
//│ 			| C h² t² => (fun ys⁵ -> [C h² ((inter₂ ys⁵) t²)])})
//│ 		where
//│ 		def inter₂ = 
//│ 			(fun xs¹ -> case xs¹ of {
//│ 				N => (fun ys² -> ys²)
//│ 				| C h¹ t¹ => (fun ys³ -> [C h¹ ((inter₃ ys³) t¹)])})
//│ 			where
//│ 			def inter₃ = 
//│ 				(fun xs³ -> case xs³ of {
//│ 					N => (fun ys⁶ -> ys⁶)
//│ 					| C h³ t³ => (fun ys⁷ -> [C h³ ((inter₄ ys⁷) t³)])})
//│ 				where
//│ 				def inter₄ = 
//│ 					(fun xs⁴ -> case xs⁴ of {
//│ 						N => (fun ys⁸ -> ys⁸)
//│ 						| C h⁴ t⁴ => (fun ys⁹ -> [C h⁴ ((inter₁ ys⁹) t⁴)])})
//│ def l1₀ = 
//│ 	(fun x¹ -> [C 1 [C 2 (l1₀ ((add⁰ x¹) 1))]])
//│ def l2₀ = 
//│ 	[C 9 [C 8 l2₀]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 1 [C 2 (l1₀ ((add⁰ x¹) 1))]]: 118 --->
//│ 	case xs⁵ of {N => (fun ys¹⁰ -> ys¹⁰) | C h⁵ t⁵ => (fun ys¹¹ -> [C h⁵ ((inter₁ ys¹¹) t⁵)])}: 106
//│ 	case xs⁴ of {N => (fun ys⁸ -> ys⁸) | C h⁴ t⁴ => (fun ys⁹ -> [C h⁴ ((inter₁ ys⁹) t⁴)])}: 93
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C 2 (l1₀ ((add⁰ x¹) 1))]: 117 --->
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ ((inter₃ ys³) t¹)])}: 49
//│ [C 8 l2₀]: 54 --->
//│ 	case xs³ of {N => (fun ys⁶ -> ys⁶) | C h³ t³ => (fun ys⁷ -> [C h³ ((inter₄ ys⁷) t³)])}: 80
//│ [C 9 [C 8 l2₀]]: 55 --->
//│ 	case xs² of {N => (fun ys⁴ -> ys⁴) | C h² t² => (fun ys⁵ -> [C h² ((inter₂ ys⁵) t²)])}: 67
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((inter₀ (l1₀ 0)) l2₀)
//│ def inter₀ = 
//│ 	(fun xs⁵ -> xs⁵)
//│ 	where
//│ 	def inter₁ = 
//│ 		(fun xs² -> xs²)
//│ 		where
//│ 		def inter₂ = 
//│ 			(fun xs¹ -> xs¹)
//│ 			where
//│ 			def inter₃ = 
//│ 				(fun xs³ -> xs³)
//│ 				where
//│ 				def inter₄ = 
//│ 					(fun xs⁴ -> case xs⁴ of {
//│ 						N => (fun ys⁸ -> ys⁸)
//│ 						| C h⁴ t⁴ => (fun ys⁹ -> [C h⁴ ((inter₁ ys⁹) t⁴)])})
//│ def l1₀ = 
//│ 	(fun x¹ -> 
//│ 		let h⁵ = 1
//│ 		in let t⁵ = 	
//│ 			let h¹ = 2
//│ 			in let t¹ = (l1₀ ((add⁰ x¹) 1))
//│ 			in (fun ys³ -> [C h¹ ((inter₃ ys³) t¹)])
//│ 		in (fun ys¹¹ -> [C h⁵ ((inter₁ ys¹¹) t⁵)]))
//│ def l2₀ = 
//│ 	let h² = 9
//│ 	in let t² = 	
//│ 		let h³ = 8
//│ 		in let t³ = l2₀
//│ 		in (fun ys⁷ -> [C h³ ((inter₄ ys⁷) t³)])
//│ 	in (fun ys⁵ -> [C h² ((inter₂ ys⁵) t²)])
//│ <<<<<<< after fusion <<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error 'ys¹¹ => C('h⁵, '179_callres) <: Destruct(N, C('h⁴, 't⁴))
//│ !!!!!!ERROR!!!!!!


// WRONG: explosion on branch and recursive strategies
// NOTE: need return pattern specilization for recursive strategies
_LUMBERHACK_ERROR
fun filterMax(ls) = if ls is
  C(h, t) then m => if h > 0 is
    True then if h > m is
      True then if filterMax(t)(h) is
        Pair(ys, max) then Pair(C(h, ys), max)
      False then if filterMax(t)(m) is
        Pair(ys, max) then Pair(C(h, ys), max)
    False then filterMax(t)(m)
  N then m => Pair(N, m)
filterMax(C(1, C(2, N)))(0)
//│ |_LUMBERHACK_ERROR|↵|#fun| |filterMax|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |m| |=>| |#if| |h| |>| |0| |is|→|True| |#then| |#if| |h| |>| |m| |is|→|True| |#then| |#if| |filterMax|(|t|)|(|h|)| |is|→|Pair|(|ys|,| |max|)| |#then| |Pair|(|C|(|h|,| |ys|)|,| |max|)|←|↵|False| |#then| |#if| |filterMax|(|t|)|(|m|)| |is|→|Pair|(|ys|,| |max|)| |#then| |Pair|(|C|(|h|,| |ys|)|,| |max|)|←|←|↵|False| |#then| |filterMax|(|t|)|(|m|)|←|↵|N| |#then| |m| |=>| |Pair|(|N|,| |m|)|←|↵|filterMax|(|C|(|1|,| |C|(|2|,| |N|)|)|)|(|0|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun filterMax = ls, => if ls is ‹(C (h, t,)) then m, => if > (h,) (0,) is ‹(True) then if > (h,) (m,) is ‹(True) then if filterMax (t,) (h,) is ‹(Pair (ys, max,)) then Pair (C (h, ys,), max,)›; (False) then if filterMax (t,) (m,) is ‹(Pair (ys, max,)) then Pair (C (h, ys,), max,)››; (False) then filterMax (t,) (m,)›; (N) then m, => Pair (N, m,)›; filterMax (C (1, C (2, N,),),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((filterMax^48 [C 1 [C 2 [N]]]) 0)
//│ def filterMax = (fun ls⁰ -> case ls⁰ of {
//│ 	C h⁰ t⁰ => (fun m⁰ -> case (h⁰ > 0) of {
//│ 		True => case (h⁰ > m⁰) of {
//│ 			True => case ((filterMax^12 t⁰) h⁰) of {
//│ 				Pair ys⁰ max⁰ => [Pair [C h⁰ ys⁰] max⁰]}
//│ 			| False => case ((filterMax^23 t⁰) m⁰) of {
//│ 				Pair ys¹ max¹ => [Pair [C h⁰ ys¹] max¹]}}
//│ 		| False => ((filterMax^35 t⁰) m⁰)})
//│ 	| N => (fun m¹ -> [Pair [N] m¹])})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [filterMax^48]
//│ 	[filterMax^48 · filterMax^12]
//│ 		[filterMax^48 · filterMax^12 · filterMax^12]
//│ 			[filterMax^48 · filterMax^12 · filterMax^12 · filterMax^12] ---> [filterMax^48 · filterMax^12 · filterMax^12] (only one)
//│ 			[filterMax^48 · filterMax^12 · filterMax^12 · filterMax^23] ---> [filterMax^48 · filterMax^12 · filterMax^12] (only one)
//│ 			[filterMax^48 · filterMax^12 · filterMax^12 · filterMax^35] ---> [filterMax^48 · filterMax^12 · filterMax^12] (only one)
//│ 		[filterMax^48 · filterMax^12 · filterMax^23]
//│ 			[filterMax^48 · filterMax^12 · filterMax^23 · filterMax^12] ---> [filterMax^48 · filterMax^12 · filterMax^23] (only one)
//│ 			[filterMax^48 · filterMax^12 · filterMax^23 · filterMax^23] ---> [filterMax^48 · filterMax^12 · filterMax^23] (only one)
//│ 			[filterMax^48 · filterMax^12 · filterMax^23 · filterMax^35] ---> [filterMax^48 · filterMax^12 · filterMax^23] (only one)
//│ 		[filterMax^48 · filterMax^12 · filterMax^35]
//│ 			[filterMax^48 · filterMax^12 · filterMax^35 · filterMax^12] ---> [filterMax^48 · filterMax^12 · filterMax^35] (only one)
//│ 			[filterMax^48 · filterMax^12 · filterMax^35 · filterMax^23] ---> [filterMax^48 · filterMax^12 · filterMax^35] (only one)
//│ 			[filterMax^48 · filterMax^12 · filterMax^35 · filterMax^35] ---> [filterMax^48 · filterMax^12 · filterMax^35] (only one)
//│ 	[filterMax^48 · filterMax^23]
//│ 		[filterMax^48 · filterMax^23 · filterMax^12]
//│ 			[filterMax^48 · filterMax^23 · filterMax^12 · filterMax^12] ---> [filterMax^48 · filterMax^23 · filterMax^12] (only one)
//│ 			[filterMax^48 · filterMax^23 · filterMax^12 · filterMax^23] ---> [filterMax^48 · filterMax^23 · filterMax^12] (only one)
//│ 			[filterMax^48 · filterMax^23 · filterMax^12 · filterMax^35] ---> [filterMax^48 · filterMax^23 · filterMax^12] (only one)
//│ 		[filterMax^48 · filterMax^23 · filterMax^23]
//│ 			[filterMax^48 · filterMax^23 · filterMax^23 · filterMax^12]
//│ 				[filterMax^48 · filterMax^23 · filterMax^23 · filterMax^12 · filterMax^12] ---> [filterMax^48 · filterMax^23 · filterMax^23 · filterMax^12] (only one)
//│ 				[filterMax^48 · filterMax^23 · filterMax^23 · filterMax^12 · filterMax^23] ---> [filterMax^48 · filterMax^23 · filterMax^23 · filterMax^12] (only one)
//│ 				[filterMax^48 · filterMax^23 · filterMax^23 · filterMax^12 · filterMax^35] ---> [filterMax^48 · filterMax^23 · filterMax^23 · filterMax^12] (only one)
//│ 			[filterMax^48 · filterMax^23 · filterMax^23 · filterMax^23] ---> [filterMax^48 · filterMax^23 · filterMax^23] (only one)
//│ 			[filterMax^48 · filterMax^23 · filterMax^23 · filterMax^35] ---> [filterMax^48 · filterMax^23 · filterMax^23] (only one)
//│ 		[filterMax^48 · filterMax^23 · filterMax^35]
//│ 			[filterMax^48 · filterMax^23 · filterMax^35 · filterMax^12]
//│ 				[filterMax^48 · filterMax^23 · filterMax^35 · filterMax^12 · filterMax^12] ---> [filterMax^48 · filterMax^23 · filterMax^35 · filterMax^12] (only one)
//│ 				[filterMax^48 · filterMax^23 · filterMax^35 · filterMax^12 · filterMax^23] ---> [filterMax^48 · filterMax^23 · filterMax^35 · filterMax^12] (only one)
//│ 				[filterMax^48 · filterMax^23 · filterMax^35 · filterMax^12 · filterMax^35] ---> [filterMax^48 · filterMax^23 · filterMax^35 · filterMax^12] (only one)
//│ 			[filterMax^48 · filterMax^23 · filterMax^35 · filterMax^23] ---> [filterMax^48 · filterMax^23 · filterMax^35] (only one)
//│ 			[filterMax^48 · filterMax^23 · filterMax^35 · filterMax^35] ---> [filterMax^48 · filterMax^23 · filterMax^35] (only one)
//│ 	[filterMax^48 · filterMax^35]
//│ 		[filterMax^48 · filterMax^35 · filterMax^12]
//│ 			[filterMax^48 · filterMax^35 · filterMax^12 · filterMax^12] ---> [filterMax^48 · filterMax^35 · filterMax^12] (only one)
//│ 			[filterMax^48 · filterMax^35 · filterMax^12 · filterMax^23] ---> [filterMax^48 · filterMax^35 · filterMax^12] (only one)
//│ 			[filterMax^48 · filterMax^35 · filterMax^12 · filterMax^35] ---> [filterMax^48 · filterMax^35 · filterMax^12] (only one)
//│ 		[filterMax^48 · filterMax^35 · filterMax^23]
//│ 			[filterMax^48 · filterMax^35 · filterMax^23 · filterMax^12]
//│ 				[filterMax^48 · filterMax^35 · filterMax^23 · filterMax^12 · filterMax^12] ---> [filterMax^48 · filterMax^35 · filterMax^23 · filterMax^12] (only one)
//│ 				[filterMax^48 · filterMax^35 · filterMax^23 · filterMax^12 · filterMax^23] ---> [filterMax^48 · filterMax^35 · filterMax^23 · filterMax^12] (only one)
//│ 				[filterMax^48 · filterMax^35 · filterMax^23 · filterMax^12 · filterMax^35] ---> [filterMax^48 · filterMax^35 · filterMax^23 · filterMax^12] (only one)
//│ 			[filterMax^48 · filterMax^35 · filterMax^23 · filterMax^23] ---> [filterMax^48 · filterMax^35 · filterMax^23] (only one)
//│ 			[filterMax^48 · filterMax^35 · filterMax^23 · filterMax^35] ---> [filterMax^48 · filterMax^35 · filterMax^23] (only one)
//│ 		[filterMax^48 · filterMax^35 · filterMax^35]
//│ 			[filterMax^48 · filterMax^35 · filterMax^35 · filterMax^12]
//│ 				[filterMax^48 · filterMax^35 · filterMax^35 · filterMax^12 · filterMax^12] ---> [filterMax^48 · filterMax^35 · filterMax^35 · filterMax^12] (only one)
//│ 				[filterMax^48 · filterMax^35 · filterMax^35 · filterMax^12 · filterMax^23] ---> [filterMax^48 · filterMax^35 · filterMax^35 · filterMax^12] (only one)
//│ 				[filterMax^48 · filterMax^35 · filterMax^35 · filterMax^12 · filterMax^35] ---> [filterMax^48 · filterMax^35 · filterMax^35 · filterMax^12] (only one)
//│ 			[filterMax^48 · filterMax^35 · filterMax^35 · filterMax^23]
//│ 				[filterMax^48 · filterMax^35 · filterMax^35 · filterMax^23 · filterMax^12]
//│ 					[filterMax^48 · filterMax^35 · filterMax^35 · filterMax^23 · filterMax^12 · filterMax^12] ---> [filterMax^48 · filterMax^35 · filterMax^35 · filterMax^23 · filterMax^12] (only one)
//│ 					[filterMax^48 · filterMax^35 · filterMax^35 · filterMax^23 · filterMax^12 · filterMax^23] ---> [filterMax^48 · filterMax^35 · filterMax^35 · filterMax^23 · filterMax^12] (only one)
//│ 					[filterMax^48 · filterMax^35 · filterMax^35 · filterMax^23 · filterMax^12 · filterMax^35] ---> [filterMax^48 · filterMax^35 · filterMax^35 · filterMax^23 · filterMax^12] (only one)
//│ 				[filterMax^48 · filterMax^35 · filterMax^35 · filterMax^23 · filterMax^23] ---> [filterMax^48 · filterMax^35 · filterMax^35 · filterMax^23] (only one)
//│ 				[filterMax^48 · filterMax^35 · filterMax^35 · filterMax^23 · filterMax^35] ---> [filterMax^48 · filterMax^35 · filterMax^35 · filterMax^23] (only one)
//│ 			[filterMax^48 · filterMax^35 · filterMax^35 · filterMax^35] ---> [filterMax^48 · filterMax^35 · filterMax^35] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((filterMax₀ [C 1 [C 2 [N]]]) 0)
//│ def filterMax₀ = 
//│ 	(fun ls¹ -> case ls¹ of {
//│ 		C h¹ t¹ => (fun m² -> case (h¹ > 0) of {
//│ 			True => case (h¹ > m²) of {
//│ 				True => case ((filterMax₁ t¹) h¹) of {
//│ 					Pair ys² max² => [Pair [C h¹ ys²] max²]}
//│ 				| False => case ((filterMax₅ t¹) m²) of {
//│ 					Pair ys³ max³ => [Pair [C h¹ ys³] max³]}}
//│ 			| False => ((filterMax₁₁ t¹) m²)})
//│ 		| N => (fun m³ -> [Pair [N] m³])})
//│ 	where
//│ 	def filterMax₁ = 
//│ 		(fun ls¹³ -> case ls¹³ of {
//│ 			C h¹³ t¹³ => (fun m²⁶ -> case (h¹³ > 0) of {
//│ 				True => case (h¹³ > m²⁶) of {
//│ 					True => case ((filterMax₂ t¹³) h¹³) of {
//│ 						Pair ys²⁶ max²⁶ => [Pair [C h¹³ ys²⁶] max²⁶]}
//│ 					| False => case ((filterMax₃ t¹³) m²⁶) of {
//│ 						Pair ys²⁷ max²⁷ => [Pair [C h¹³ ys²⁷] max²⁷]}}
//│ 				| False => ((filterMax₄ t¹³) m²⁶)})
//│ 			| N => (fun m²⁷ -> [Pair [N] m²⁷])})
//│ 		where
//│ 		def filterMax₂ = 
//│ 			(fun ls¹⁵ -> case ls¹⁵ of {
//│ 				C h¹⁵ t¹⁵ => (fun m³⁰ -> case (h¹⁵ > 0) of {
//│ 					True => case (h¹⁵ > m³⁰) of {
//│ 						True => case ((filterMax₂ t¹⁵) h¹⁵) of {
//│ 							Pair ys³⁰ max³⁰ => [Pair [C h¹⁵ ys³⁰] max³⁰]}
//│ 						| False => case ((filterMax₂ t¹⁵) m³⁰) of {
//│ 							Pair ys³¹ max³¹ => [Pair [C h¹⁵ ys³¹] max³¹]}}
//│ 					| False => ((filterMax₂ t¹⁵) m³⁰)})
//│ 				| N => (fun m³¹ -> [Pair [N] m³¹])})
//│ 		def filterMax₃ = 
//│ 			(fun ls¹⁷ -> case ls¹⁷ of {
//│ 				C h¹⁷ t¹⁷ => (fun m³⁴ -> case (h¹⁷ > 0) of {
//│ 					True => case (h¹⁷ > m³⁴) of {
//│ 						True => case ((filterMax₃ t¹⁷) h¹⁷) of {
//│ 							Pair ys³⁴ max³⁴ => [Pair [C h¹⁷ ys³⁴] max³⁴]}
//│ 						| False => case ((filterMax₃ t¹⁷) m³⁴) of {
//│ 							Pair ys³⁵ max³⁵ => [Pair [C h¹⁷ ys³⁵] max³⁵]}}
//│ 					| False => ((filterMax₃ t¹⁷) m³⁴)})
//│ 				| N => (fun m³⁵ -> [Pair [N] m³⁵])})
//│ 		def filterMax₄ = 
//│ 			(fun ls¹¹ -> case ls¹¹ of {
//│ 				C h¹¹ t¹¹ => (fun m²² -> case (h¹¹ > 0) of {
//│ 					True => case (h¹¹ > m²²) of {
//│ 						True => case ((filterMax₄ t¹¹) h¹¹) of {
//│ 							Pair ys²² max²² => [Pair [C h¹¹ ys²²] max²²]}
//│ 						| False => case ((filterMax₄ t¹¹) m²²) of {
//│ 							Pair ys²³ max²³ => [Pair [C h¹¹ ys²³] max²³]}}
//│ 					| False => ((filterMax₄ t¹¹) m²²)})
//│ 				| N => (fun m²³ -> [Pair [N] m²³])})
//│ 	def filterMax₅ = 
//│ 		(fun ls⁶ -> case ls⁶ of {
//│ 			C h⁶ t⁶ => (fun m¹² -> case (h⁶ > 0) of {
//│ 				True => case (h⁶ > m¹²) of {
//│ 					True => case ((filterMax₆ t⁶) h⁶) of {
//│ 						Pair ys¹² max¹² => [Pair [C h⁶ ys¹²] max¹²]}
//│ 					| False => case ((filterMax₇ t⁶) m¹²) of {
//│ 						Pair ys¹³ max¹³ => [Pair [C h⁶ ys¹³] max¹³]}}
//│ 				| False => ((filterMax₉ t⁶) m¹²)})
//│ 			| N => (fun m¹³ -> [Pair [N] m¹³])})
//│ 		where
//│ 		def filterMax₆ = 
//│ 			(fun ls¹⁸ -> case ls¹⁸ of {
//│ 				C h¹⁸ t¹⁸ => (fun m³⁶ -> case (h¹⁸ > 0) of {
//│ 					True => case (h¹⁸ > m³⁶) of {
//│ 						True => case ((filterMax₆ t¹⁸) h¹⁸) of {
//│ 							Pair ys³⁶ max³⁶ => [Pair [C h¹⁸ ys³⁶] max³⁶]}
//│ 						| False => case ((filterMax₆ t¹⁸) m³⁶) of {
//│ 							Pair ys³⁷ max³⁷ => [Pair [C h¹⁸ ys³⁷] max³⁷]}}
//│ 					| False => ((filterMax₆ t¹⁸) m³⁶)})
//│ 				| N => (fun m³⁷ -> [Pair [N] m³⁷])})
//│ 		def filterMax₇ = 
//│ 			(fun ls¹² -> case ls¹² of {
//│ 				C h¹² t¹² => (fun m²⁴ -> case (h¹² > 0) of {
//│ 					True => case (h¹² > m²⁴) of {
//│ 						True => case ((filterMax₈ t¹²) h¹²) of {
//│ 							Pair ys²⁴ max²⁴ => [Pair [C h¹² ys²⁴] max²⁴]}
//│ 						| False => case ((filterMax₇ t¹²) m²⁴) of {
//│ 							Pair ys²⁵ max²⁵ => [Pair [C h¹² ys²⁵] max²⁵]}}
//│ 					| False => ((filterMax₇ t¹²) m²⁴)})
//│ 				| N => (fun m²⁵ -> [Pair [N] m²⁵])})
//│ 			where
//│ 			def filterMax₈ = 
//│ 				(fun ls¹⁰ -> case ls¹⁰ of {
//│ 					C h¹⁰ t¹⁰ => (fun m²⁰ -> case (h¹⁰ > 0) of {
//│ 						True => case (h¹⁰ > m²⁰) of {
//│ 							True => case ((filterMax₈ t¹⁰) h¹⁰) of {
//│ 								Pair ys²⁰ max²⁰ => [Pair [C h¹⁰ ys²⁰] max²⁰]}
//│ 							| False => case ((filterMax₈ t¹⁰) m²⁰) of {
//│ 								Pair ys²¹ max²¹ => [Pair [C h¹⁰ ys²¹] max²¹]}}
//│ 						| False => ((filterMax₈ t¹⁰) m²⁰)})
//│ 					| N => (fun m²¹ -> [Pair [N] m²¹])})
//│ 		def filterMax₉ = 
//│ 			(fun ls⁷ -> case ls⁷ of {
//│ 				C h⁷ t⁷ => (fun m¹⁴ -> case (h⁷ > 0) of {
//│ 					True => case (h⁷ > m¹⁴) of {
//│ 						True => case ((filterMax₁₀ t⁷) h⁷) of {
//│ 							Pair ys¹⁴ max¹⁴ => [Pair [C h⁷ ys¹⁴] max¹⁴]}
//│ 						| False => case ((filterMax₉ t⁷) m¹⁴) of {
//│ 							Pair ys¹⁵ max¹⁵ => [Pair [C h⁷ ys¹⁵] max¹⁵]}}
//│ 					| False => ((filterMax₉ t⁷) m¹⁴)})
//│ 				| N => (fun m¹⁵ -> [Pair [N] m¹⁵])})
//│ 			where
//│ 			def filterMax₁₀ = 
//│ 				(fun ls⁹ -> case ls⁹ of {
//│ 					C h⁹ t⁹ => (fun m¹⁸ -> case (h⁹ > 0) of {
//│ 						True => case (h⁹ > m¹⁸) of {
//│ 							True => case ((filterMax₁₀ t⁹) h⁹) of {
//│ 								Pair ys¹⁸ max¹⁸ => [Pair [C h⁹ ys¹⁸] max¹⁸]}
//│ 							| False => case ((filterMax₁₀ t⁹) m¹⁸) of {
//│ 								Pair ys¹⁹ max¹⁹ => [Pair [C h⁹ ys¹⁹] max¹⁹]}}
//│ 						| False => ((filterMax₁₀ t⁹) m¹⁸)})
//│ 					| N => (fun m¹⁹ -> [Pair [N] m¹⁹])})
//│ 	def filterMax₁₁ = 
//│ 		(fun ls⁵ -> case ls⁵ of {
//│ 			C h⁵ t⁵ => (fun m¹⁰ -> case (h⁵ > 0) of {
//│ 				True => case (h⁵ > m¹⁰) of {
//│ 					True => case ((filterMax₁₂ t⁵) h⁵) of {
//│ 						Pair ys¹⁰ max¹⁰ => [Pair [C h⁵ ys¹⁰] max¹⁰]}
//│ 					| False => case ((filterMax₁₃ t⁵) m¹⁰) of {
//│ 						Pair ys¹¹ max¹¹ => [Pair [C h⁵ ys¹¹] max¹¹]}}
//│ 				| False => ((filterMax₁₅ t⁵) m¹⁰)})
//│ 			| N => (fun m¹¹ -> [Pair [N] m¹¹])})
//│ 		where
//│ 		def filterMax₁₂ = 
//│ 			(fun ls¹⁹ -> case ls¹⁹ of {
//│ 				C h¹⁹ t¹⁹ => (fun m³⁸ -> case (h¹⁹ > 0) of {
//│ 					True => case (h¹⁹ > m³⁸) of {
//│ 						True => case ((filterMax₁₂ t¹⁹) h¹⁹) of {
//│ 							Pair ys³⁸ max³⁸ => [Pair [C h¹⁹ ys³⁸] max³⁸]}
//│ 						| False => case ((filterMax₁₂ t¹⁹) m³⁸) of {
//│ 							Pair ys³⁹ max³⁹ => [Pair [C h¹⁹ ys³⁹] max³⁹]}}
//│ 					| False => ((filterMax₁₂ t¹⁹) m³⁸)})
//│ 				| N => (fun m³⁹ -> [Pair [N] m³⁹])})
//│ 		def filterMax₁₃ = 
//│ 			(fun ls¹⁶ -> case ls¹⁶ of {
//│ 				C h¹⁶ t¹⁶ => (fun m³² -> case (h¹⁶ > 0) of {
//│ 					True => case (h¹⁶ > m³²) of {
//│ 						True => case ((filterMax₁₄ t¹⁶) h¹⁶) of {
//│ 							Pair ys³² max³² => [Pair [C h¹⁶ ys³²] max³²]}
//│ 						| False => case ((filterMax₁₃ t¹⁶) m³²) of {
//│ 							Pair ys³³ max³³ => [Pair [C h¹⁶ ys³³] max³³]}}
//│ 					| False => ((filterMax₁₃ t¹⁶) m³²)})
//│ 				| N => (fun m³³ -> [Pair [N] m³³])})
//│ 			where
//│ 			def filterMax₁₄ = 
//│ 				(fun ls⁸ -> case ls⁸ of {
//│ 					C h⁸ t⁸ => (fun m¹⁶ -> case (h⁸ > 0) of {
//│ 						True => case (h⁸ > m¹⁶) of {
//│ 							True => case ((filterMax₁₄ t⁸) h⁸) of {
//│ 								Pair ys¹⁶ max¹⁶ => [Pair [C h⁸ ys¹⁶] max¹⁶]}
//│ 							| False => case ((filterMax₁₄ t⁸) m¹⁶) of {
//│ 								Pair ys¹⁷ max¹⁷ => [Pair [C h⁸ ys¹⁷] max¹⁷]}}
//│ 						| False => ((filterMax₁₄ t⁸) m¹⁶)})
//│ 					| N => (fun m¹⁷ -> [Pair [N] m¹⁷])})
//│ 		def filterMax₁₅ = 
//│ 			(fun ls² -> case ls² of {
//│ 				C h² t² => (fun m⁴ -> case (h² > 0) of {
//│ 					True => case (h² > m⁴) of {
//│ 						True => case ((filterMax₁₆ t²) h²) of {
//│ 							Pair ys⁴ max⁴ => [Pair [C h² ys⁴] max⁴]}
//│ 						| False => case ((filterMax₁₇ t²) m⁴) of {
//│ 							Pair ys⁵ max⁵ => [Pair [C h² ys⁵] max⁵]}}
//│ 					| False => ((filterMax₁₅ t²) m⁴)})
//│ 				| N => (fun m⁵ -> [Pair [N] m⁵])})
//│ 			where
//│ 			def filterMax₁₆ = 
//│ 				(fun ls⁴ -> case ls⁴ of {
//│ 					C h⁴ t⁴ => (fun m⁸ -> case (h⁴ > 0) of {
//│ 						True => case (h⁴ > m⁸) of {
//│ 							True => case ((filterMax₁₆ t⁴) h⁴) of {
//│ 								Pair ys⁸ max⁸ => [Pair [C h⁴ ys⁸] max⁸]}
//│ 							| False => case ((filterMax₁₆ t⁴) m⁸) of {
//│ 								Pair ys⁹ max⁹ => [Pair [C h⁴ ys⁹] max⁹]}}
//│ 						| False => ((filterMax₁₆ t⁴) m⁸)})
//│ 					| N => (fun m⁹ -> [Pair [N] m⁹])})
//│ 			def filterMax₁₇ = 
//│ 				(fun ls³ -> case ls³ of {
//│ 					C h³ t³ => (fun m⁶ -> case (h³ > 0) of {
//│ 						True => case (h³ > m⁶) of {
//│ 							True => case ((filterMax₁₈ t³) h³) of {
//│ 								Pair ys⁶ max⁶ => [Pair [C h³ ys⁶] max⁶]}
//│ 							| False => case ((filterMax₁₇ t³) m⁶) of {
//│ 								Pair ys⁷ max⁷ => [Pair [C h³ ys⁷] max⁷]}}
//│ 						| False => ((filterMax₁₇ t³) m⁶)})
//│ 					| N => (fun m⁷ -> [Pair [N] m⁷])})
//│ 				where
//│ 				def filterMax₁₈ = 
//│ 					(fun ls¹⁴ -> case ls¹⁴ of {
//│ 						C h¹⁴ t¹⁴ => (fun m²⁸ -> case (h¹⁴ > 0) of {
//│ 							True => case (h¹⁴ > m²⁸) of {
//│ 								True => case ((filterMax₁₈ t¹⁴) h¹⁴) of {
//│ 									Pair ys²⁸ max²⁸ => [Pair [C h¹⁴ ys²⁸] max²⁸]}
//│ 								| False => case ((filterMax₁₈ t¹⁴) m²⁸) of {
//│ 									Pair ys²⁹ max²⁹ => [Pair [C h¹⁴ ys²⁹] max²⁹]}}
//│ 							| False => ((filterMax₁₈ t¹⁴) m²⁸)})
//│ 						| N => (fun m²⁹ -> [Pair [N] m²⁹])})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 1 [C 2 [N]]]: 955 --->
//│ 	case ls¹ of {C h¹ t¹ => (fun m² -> case (h¹ > 0) of {True => case (h¹ > m²) of {True => case ((filterMax₁ t¹) h¹) of {Pair ys² max² => [Pair [C h¹ ys²] max²]} | False => case ((filterMax₅ t¹) m²) of {Pair ys³ max³ => [Pair [C h¹ ys³] max³]}} | False => ((filterMax₁₁ t¹) m²)}) | N => (fun m³ -> [Pair [N] m³])}: 102
//│ [C 2 [N]]: 954 --->
//│ 	case ls⁵ of {C h⁵ t⁵ => (fun m¹⁰ -> case (h⁵ > 0) of {True => case (h⁵ > m¹⁰) of {True => case ((filterMax₁₂ t⁵) h⁵) of {Pair ys¹⁰ max¹⁰ => [Pair [C h⁵ ys¹⁰] max¹⁰]} | False => case ((filterMax₁₃ t⁵) m¹⁰) of {Pair ys¹¹ max¹¹ => [Pair [C h⁵ ys¹¹] max¹¹]}} | False => ((filterMax₁₅ t⁵) m¹⁰)}) | N => (fun m¹¹ -> [Pair [N] m¹¹])}: 290
//│ 	case ls¹³ of {C h¹³ t¹³ => (fun m²⁶ -> case (h¹³ > 0) of {True => case (h¹³ > m²⁶) of {True => case ((filterMax₂ t¹³) h¹³) of {Pair ys²⁶ max²⁶ => [Pair [C h¹³ ys²⁶] max²⁶]} | False => case ((filterMax₃ t¹³) m²⁶) of {Pair ys²⁷ max²⁷ => [Pair [C h¹³ ys²⁷] max²⁷]}} | False => ((filterMax₄ t¹³) m²⁶)}) | N => (fun m²⁷ -> [Pair [N] m²⁷])}: 666
//│ 	case ls⁶ of {C h⁶ t⁶ => (fun m¹² -> case (h⁶ > 0) of {True => case (h⁶ > m¹²) of {True => case ((filterMax₆ t⁶) h⁶) of {Pair ys¹² max¹² => [Pair [C h⁶ ys¹²] max¹²]} | False => case ((filterMax₇ t⁶) m¹²) of {Pair ys¹³ max¹³ => [Pair [C h⁶ ys¹³] max¹³]}} | False => ((filterMax₉ t⁶) m¹²)}) | N => (fun m¹³ -> [Pair [N] m¹³])}: 337
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N]: 953 --->
//│ 	case ls⁷ of {C h⁷ t⁷ => (fun m¹⁴ -> case (h⁷ > 0) of {True => case (h⁷ > m¹⁴) of {True => case ((filterMax₁₀ t⁷) h⁷) of {Pair ys¹⁴ max¹⁴ => [Pair [C h⁷ ys¹⁴] max¹⁴]} | False => case ((filterMax₉ t⁷) m¹⁴) of {Pair ys¹⁵ max¹⁵ => [Pair [C h⁷ ys¹⁵] max¹⁵]}} | False => ((filterMax₉ t⁷) m¹⁴)}) | N => (fun m¹⁵ -> [Pair [N] m¹⁵])}: 384
//│ 	case ls¹⁹ of {C h¹⁹ t¹⁹ => (fun m³⁸ -> case (h¹⁹ > 0) of {True => case (h¹⁹ > m³⁸) of {True => case ((filterMax₁₂ t¹⁹) h¹⁹) of {Pair ys³⁸ max³⁸ => [Pair [C h¹⁹ ys³⁸] max³⁸]} | False => case ((filterMax₁₂ t¹⁹) m³⁸) of {Pair ys³⁹ max³⁹ => [Pair [C h¹⁹ ys³⁹] max³⁹]}} | False => ((filterMax₁₂ t¹⁹) m³⁸)}) | N => (fun m³⁹ -> [Pair [N] m³⁹])}: 948
//│ 	case ls¹⁶ of {C h¹⁶ t¹⁶ => (fun m³² -> case (h¹⁶ > 0) of {True => case (h¹⁶ > m³²) of {True => case ((filterMax₁₄ t¹⁶) h¹⁶) of {Pair ys³² max³² => [Pair [C h¹⁶ ys³²] max³²]} | False => case ((filterMax₁₃ t¹⁶) m³²) of {Pair ys³³ max³³ => [Pair [C h¹⁶ ys³³] max³³]}} | False => ((filterMax₁₃ t¹⁶) m³²)}) | N => (fun m³³ -> [Pair [N] m³³])}: 807
//│ 	case ls² of {C h² t² => (fun m⁴ -> case (h² > 0) of {True => case (h² > m⁴) of {True => case ((filterMax₁₆ t²) h²) of {Pair ys⁴ max⁴ => [Pair [C h² ys⁴] max⁴]} | False => case ((filterMax₁₇ t²) m⁴) of {Pair ys⁵ max⁵ => [Pair [C h² ys⁵] max⁵]}} | False => ((filterMax₁₅ t²) m⁴)}) | N => (fun m⁵ -> [Pair [N] m⁵])}: 149
//│ 	case ls¹⁵ of {C h¹⁵ t¹⁵ => (fun m³⁰ -> case (h¹⁵ > 0) of {True => case (h¹⁵ > m³⁰) of {True => case ((filterMax₂ t¹⁵) h¹⁵) of {Pair ys³⁰ max³⁰ => [Pair [C h¹⁵ ys³⁰] max³⁰]} | False => case ((filterMax₂ t¹⁵) m³⁰) of {Pair ys³¹ max³¹ => [Pair [C h¹⁵ ys³¹] max³¹]}} | False => ((filterMax₂ t¹⁵) m³⁰)}) | N => (fun m³¹ -> [Pair [N] m³¹])}: 760
//│ 	case ls¹⁷ of {C h¹⁷ t¹⁷ => (fun m³⁴ -> case (h¹⁷ > 0) of {True => case (h¹⁷ > m³⁴) of {True => case ((filterMax₃ t¹⁷) h¹⁷) of {Pair ys³⁴ max³⁴ => [Pair [C h¹⁷ ys³⁴] max³⁴]} | False => case ((filterMax₃ t¹⁷) m³⁴) of {Pair ys³⁵ max³⁵ => [Pair [C h¹⁷ ys³⁵] max³⁵]}} | False => ((filterMax₃ t¹⁷) m³⁴)}) | N => (fun m³⁵ -> [Pair [N] m³⁵])}: 854
//│ 	case ls¹¹ of {C h¹¹ t¹¹ => (fun m²² -> case (h¹¹ > 0) of {True => case (h¹¹ > m²²) of {True => case ((filterMax₄ t¹¹) h¹¹) of {Pair ys²² max²² => [Pair [C h¹¹ ys²²] max²²]} | False => case ((filterMax₄ t¹¹) m²²) of {Pair ys²³ max²³ => [Pair [C h¹¹ ys²³] max²³]}} | False => ((filterMax₄ t¹¹) m²²)}) | N => (fun m²³ -> [Pair [N] m²³])}: 572
//│ 	case ls¹⁸ of {C h¹⁸ t¹⁸ => (fun m³⁶ -> case (h¹⁸ > 0) of {True => case (h¹⁸ > m³⁶) of {True => case ((filterMax₆ t¹⁸) h¹⁸) of {Pair ys³⁶ max³⁶ => [Pair [C h¹⁸ ys³⁶] max³⁶]} | False => case ((filterMax₆ t¹⁸) m³⁶) of {Pair ys³⁷ max³⁷ => [Pair [C h¹⁸ ys³⁷] max³⁷]}} | False => ((filterMax₆ t¹⁸) m³⁶)}) | N => (fun m³⁷ -> [Pair [N] m³⁷])}: 901
//│ 	case ls¹² of {C h¹² t¹² => (fun m²⁴ -> case (h¹² > 0) of {True => case (h¹² > m²⁴) of {True => case ((filterMax₈ t¹²) h¹²) of {Pair ys²⁴ max²⁴ => [Pair [C h¹² ys²⁴] max²⁴]} | False => case ((filterMax₇ t¹²) m²⁴) of {Pair ys²⁵ max²⁵ => [Pair [C h¹² ys²⁵] max²⁵]}} | False => ((filterMax₇ t¹²) m²⁴)}) | N => (fun m²⁵ -> [Pair [N] m²⁵])}: 619
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹³ ys²⁶] max²⁶]: 641 --->
//│ 	case ((filterMax₁ t¹) h¹) of {Pair ys² max² => [Pair [C h¹ ys²] max²]}: 78
//│ [Pair [C h¹³ ys²⁷] max²⁷]: 652 --->
//│ 	case ((filterMax₁ t¹) h¹) of {Pair ys² max² => [Pair [C h¹ ys²] max²]}: 78
//│ [Pair [C h¹⁶ ys³²] max³²]: 782 --->
//│ 	case ((filterMax₁₃ t¹⁶) m³²) of {Pair ys³³ max³³ => [Pair [C h¹⁶ ys³³] max³³]}: 794
//│ 	case ((filterMax₁₃ t⁵) m¹⁰) of {Pair ys¹¹ max¹¹ => [Pair [C h⁵ ys¹¹] max¹¹]}: 277
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h⁸ ys¹⁶] max¹⁶]: 406 --->
//│ 	case ((filterMax₁₄ t¹⁶) h¹⁶) of {Pair ys³² max³² => [Pair [C h¹⁶ ys³²] max³²]}: 783
//│ 	case ((filterMax₁₄ t⁸) h⁸) of {Pair ys¹⁶ max¹⁶ => [Pair [C h⁸ ys¹⁶] max¹⁶]}: 407
//│ 	case ((filterMax₁₄ t⁸) m¹⁶) of {Pair ys¹⁷ max¹⁷ => [Pair [C h⁸ ys¹⁷] max¹⁷]}: 418
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹⁶ ys³³] max³³]: 793 --->
//│ 	case ((filterMax₁₃ t¹⁶) m³²) of {Pair ys³³ max³³ => [Pair [C h¹⁶ ys³³] max³³]}: 794
//│ 	case ((filterMax₁₃ t⁵) m¹⁰) of {Pair ys¹¹ max¹¹ => [Pair [C h⁵ ys¹¹] max¹¹]}: 277
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹⁹ ys³⁸] max³⁸]: 923 --->
//│ 	case ((filterMax₁₂ t¹⁹) h¹⁹) of {Pair ys³⁸ max³⁸ => [Pair [C h¹⁹ ys³⁸] max³⁸]}: 924
//│ 	case ((filterMax₁₂ t⁵) h⁵) of {Pair ys¹⁰ max¹⁰ => [Pair [C h⁵ ys¹⁰] max¹⁰]}: 266
//│ 	case ((filterMax₁₂ t¹⁹) m³⁸) of {Pair ys³⁹ max³⁹ => [Pair [C h¹⁹ ys³⁹] max³⁹]}: 935
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h⁸ ys¹⁷] max¹⁷]: 417 --->
//│ 	case ((filterMax₁₄ t¹⁶) h¹⁶) of {Pair ys³² max³² => [Pair [C h¹⁶ ys³²] max³²]}: 783
//│ 	case ((filterMax₁₄ t⁸) h⁸) of {Pair ys¹⁶ max¹⁶ => [Pair [C h⁸ ys¹⁶] max¹⁶]}: 407
//│ 	case ((filterMax₁₄ t⁸) m¹⁶) of {Pair ys¹⁷ max¹⁷ => [Pair [C h⁸ ys¹⁷] max¹⁷]}: 418
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹¹ ys²²] max²²]: 547 --->
//│ 	case ((filterMax₁ t¹) h¹) of {Pair ys² max² => [Pair [C h¹ ys²] max²]}: 78
//│ 	case ((filterMax₄ t¹¹) h¹¹) of {Pair ys²² max²² => [Pair [C h¹¹ ys²²] max²²]}: 548
//│ 	case ((filterMax₄ t¹¹) m²²) of {Pair ys²³ max²³ => [Pair [C h¹¹ ys²³] max²³]}: 559
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹⁹ ys³⁹] max³⁹]: 934 --->
//│ 	case ((filterMax₁₂ t¹⁹) h¹⁹) of {Pair ys³⁸ max³⁸ => [Pair [C h¹⁹ ys³⁸] max³⁸]}: 924
//│ 	case ((filterMax₁₂ t⁵) h⁵) of {Pair ys¹⁰ max¹⁰ => [Pair [C h⁵ ys¹⁰] max¹⁰]}: 266
//│ 	case ((filterMax₁₂ t¹⁹) m³⁸) of {Pair ys³⁹ max³⁹ => [Pair [C h¹⁹ ys³⁹] max³⁹]}: 935
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h³ ys⁶] max⁶]: 171 --->
//│ 	case ((filterMax₁₇ t³) m⁶) of {Pair ys⁷ max⁷ => [Pair [C h³ ys⁷] max⁷]}: 183
//│ 	case ((filterMax₁₇ t²) m⁴) of {Pair ys⁵ max⁵ => [Pair [C h² ys⁵] max⁵]}: 136
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹¹ ys²³] max²³]: 558 --->
//│ 	case ((filterMax₁ t¹) h¹) of {Pair ys² max² => [Pair [C h¹ ys²] max²]}: 78
//│ 	case ((filterMax₄ t¹¹) h¹¹) of {Pair ys²² max²² => [Pair [C h¹¹ ys²²] max²²]}: 548
//│ 	case ((filterMax₄ t¹¹) m²²) of {Pair ys²³ max²³ => [Pair [C h¹¹ ys²³] max²³]}: 559
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹⁴ ys²⁸] max²⁸]: 688 --->
//│ 	case ((filterMax₁₈ t¹⁴) h¹⁴) of {Pair ys²⁸ max²⁸ => [Pair [C h¹⁴ ys²⁸] max²⁸]}: 689
//│ 	case ((filterMax₁₈ t³) h³) of {Pair ys⁶ max⁶ => [Pair [C h³ ys⁶] max⁶]}: 172
//│ 	case ((filterMax₁₈ t¹⁴) m²⁸) of {Pair ys²⁹ max²⁹ => [Pair [C h¹⁴ ys²⁹] max²⁹]}: 700
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h³ ys⁷] max⁷]: 182 --->
//│ 	case ((filterMax₁₇ t³) m⁶) of {Pair ys⁷ max⁷ => [Pair [C h³ ys⁷] max⁷]}: 183
//│ 	case ((filterMax₁₇ t²) m⁴) of {Pair ys⁵ max⁵ => [Pair [C h² ys⁵] max⁵]}: 136
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h⁶ ys¹²] max¹²]: 312 --->
//│ 	case ((filterMax₅ t¹) m²) of {Pair ys³ max³ => [Pair [C h¹ ys³] max³]}: 89
//│ [Pair [C h¹⁴ ys²⁹] max²⁹]: 699 --->
//│ 	case ((filterMax₁₈ t¹⁴) h¹⁴) of {Pair ys²⁸ max²⁸ => [Pair [C h¹⁴ ys²⁸] max²⁸]}: 689
//│ 	case ((filterMax₁₈ t³) h³) of {Pair ys⁶ max⁶ => [Pair [C h³ ys⁶] max⁶]}: 172
//│ 	case ((filterMax₁₈ t¹⁴) m²⁸) of {Pair ys²⁹ max²⁹ => [Pair [C h¹⁴ ys²⁹] max²⁹]}: 700
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹⁷ ys³⁴] max³⁴]: 829 --->
//│ 	case ((filterMax₃ t¹⁷) h¹⁷) of {Pair ys³⁴ max³⁴ => [Pair [C h¹⁷ ys³⁴] max³⁴]}: 830
//│ 	case ((filterMax₃ t¹⁷) m³⁴) of {Pair ys³⁵ max³⁵ => [Pair [C h¹⁷ ys³⁵] max³⁵]}: 841
//│ 	case ((filterMax₃ t¹³) m²⁶) of {Pair ys²⁷ max²⁷ => [Pair [C h¹³ ys²⁷] max²⁷]}: 653
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h⁶ ys¹³] max¹³]: 323 --->
//│ 	case ((filterMax₅ t¹) m²) of {Pair ys³ max³ => [Pair [C h¹ ys³] max³]}: 89
//│ [Pair [C h⁹ ys¹⁸] max¹⁸]: 453 --->
//│ 	case ((filterMax₁₀ t⁹) h⁹) of {Pair ys¹⁸ max¹⁸ => [Pair [C h⁹ ys¹⁸] max¹⁸]}: 454
//│ 	case ((filterMax₁₀ t⁷) h⁷) of {Pair ys¹⁴ max¹⁴ => [Pair [C h⁷ ys¹⁴] max¹⁴]}: 360
//│ 	case ((filterMax₁₀ t⁹) m¹⁸) of {Pair ys¹⁹ max¹⁹ => [Pair [C h⁹ ys¹⁹] max¹⁹]}: 465
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹⁷ ys³⁵] max³⁵]: 840 --->
//│ 	case ((filterMax₃ t¹⁷) h¹⁷) of {Pair ys³⁴ max³⁴ => [Pair [C h¹⁷ ys³⁴] max³⁴]}: 830
//│ 	case ((filterMax₃ t¹⁷) m³⁴) of {Pair ys³⁵ max³⁵ => [Pair [C h¹⁷ ys³⁵] max³⁵]}: 841
//│ 	case ((filterMax₃ t¹³) m²⁶) of {Pair ys²⁷ max²⁷ => [Pair [C h¹³ ys²⁷] max²⁷]}: 653
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h⁹ ys¹⁹] max¹⁹]: 464 --->
//│ 	case ((filterMax₁₀ t⁹) h⁹) of {Pair ys¹⁸ max¹⁸ => [Pair [C h⁹ ys¹⁸] max¹⁸]}: 454
//│ 	case ((filterMax₁₀ t⁷) h⁷) of {Pair ys¹⁴ max¹⁴ => [Pair [C h⁷ ys¹⁴] max¹⁴]}: 360
//│ 	case ((filterMax₁₀ t⁹) m¹⁸) of {Pair ys¹⁹ max¹⁹ => [Pair [C h⁹ ys¹⁹] max¹⁹]}: 465
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹² ys²⁴] max²⁴]: 594 --->
//│ 	case ((filterMax₇ t¹²) m²⁴) of {Pair ys²⁵ max²⁵ => [Pair [C h¹² ys²⁵] max²⁵]}: 606
//│ 	case ((filterMax₇ t⁶) m¹²) of {Pair ys¹³ max¹³ => [Pair [C h⁶ ys¹³] max¹³]}: 324
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h⁴ ys⁸] max⁸]: 218 --->
//│ 	case ((filterMax₁₆ t⁴) h⁴) of {Pair ys⁸ max⁸ => [Pair [C h⁴ ys⁸] max⁸]}: 219
//│ 	case ((filterMax₁₆ t²) h²) of {Pair ys⁴ max⁴ => [Pair [C h² ys⁴] max⁴]}: 125
//│ 	case ((filterMax₁₆ t⁴) m⁸) of {Pair ys⁹ max⁹ => [Pair [C h⁴ ys⁹] max⁹]}: 230
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹² ys²⁵] max²⁵]: 605 --->
//│ 	case ((filterMax₇ t¹²) m²⁴) of {Pair ys²⁵ max²⁵ => [Pair [C h¹² ys²⁵] max²⁵]}: 606
//│ 	case ((filterMax₇ t⁶) m¹²) of {Pair ys¹³ max¹³ => [Pair [C h⁶ ys¹³] max¹³]}: 324
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹⁵ ys³⁰] max³⁰]: 735 --->
//│ 	case ((filterMax₂ t¹⁵) h¹⁵) of {Pair ys³⁰ max³⁰ => [Pair [C h¹⁵ ys³⁰] max³⁰]}: 736
//│ 	case ((filterMax₂ t¹³) h¹³) of {Pair ys²⁶ max²⁶ => [Pair [C h¹³ ys²⁶] max²⁶]}: 642
//│ 	case ((filterMax₂ t¹⁵) m³⁰) of {Pair ys³¹ max³¹ => [Pair [C h¹⁵ ys³¹] max³¹]}: 747
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h⁴ ys⁹] max⁹]: 229 --->
//│ 	case ((filterMax₁₆ t⁴) h⁴) of {Pair ys⁸ max⁸ => [Pair [C h⁴ ys⁸] max⁸]}: 219
//│ 	case ((filterMax₁₆ t²) h²) of {Pair ys⁴ max⁴ => [Pair [C h² ys⁴] max⁴]}: 125
//│ 	case ((filterMax₁₆ t⁴) m⁸) of {Pair ys⁹ max⁹ => [Pair [C h⁴ ys⁹] max⁹]}: 230
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h⁷ ys¹⁴] max¹⁴]: 359 --->
//│ 	case ((filterMax₅ t¹) m²) of {Pair ys³ max³ => [Pair [C h¹ ys³] max³]}: 89
//│ 	case ((filterMax₉ t⁷) m¹⁴) of {Pair ys¹⁵ max¹⁵ => [Pair [C h⁷ ys¹⁵] max¹⁵]}: 371
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹⁵ ys³¹] max³¹]: 746 --->
//│ 	case ((filterMax₂ t¹⁵) h¹⁵) of {Pair ys³⁰ max³⁰ => [Pair [C h¹⁵ ys³⁰] max³⁰]}: 736
//│ 	case ((filterMax₂ t¹³) h¹³) of {Pair ys²⁶ max²⁶ => [Pair [C h¹³ ys²⁶] max²⁶]}: 642
//│ 	case ((filterMax₂ t¹⁵) m³⁰) of {Pair ys³¹ max³¹ => [Pair [C h¹⁵ ys³¹] max³¹]}: 747
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹⁸ ys³⁶] max³⁶]: 876 --->
//│ 	case ((filterMax₆ t¹⁸) h¹⁸) of {Pair ys³⁶ max³⁶ => [Pair [C h¹⁸ ys³⁶] max³⁶]}: 877
//│ 	case ((filterMax₆ t⁶) h⁶) of {Pair ys¹² max¹² => [Pair [C h⁶ ys¹²] max¹²]}: 313
//│ 	case ((filterMax₆ t¹⁸) m³⁶) of {Pair ys³⁷ max³⁷ => [Pair [C h¹⁸ ys³⁷] max³⁷]}: 888
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h⁷ ys¹⁵] max¹⁵]: 370 --->
//│ 	case ((filterMax₅ t¹) m²) of {Pair ys³ max³ => [Pair [C h¹ ys³] max³]}: 89
//│ 	case ((filterMax₉ t⁷) m¹⁴) of {Pair ys¹⁵ max¹⁵ => [Pair [C h⁷ ys¹⁵] max¹⁵]}: 371
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹⁰ ys²⁰] max²⁰]: 500 --->
//│ 	case ((filterMax₈ t¹²) h¹²) of {Pair ys²⁴ max²⁴ => [Pair [C h¹² ys²⁴] max²⁴]}: 595
//│ 	case ((filterMax₈ t¹⁰) h¹⁰) of {Pair ys²⁰ max²⁰ => [Pair [C h¹⁰ ys²⁰] max²⁰]}: 501
//│ 	case ((filterMax₈ t¹⁰) m²⁰) of {Pair ys²¹ max²¹ => [Pair [C h¹⁰ ys²¹] max²¹]}: 512
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹⁸ ys³⁷] max³⁷]: 887 --->
//│ 	case ((filterMax₆ t¹⁸) h¹⁸) of {Pair ys³⁶ max³⁶ => [Pair [C h¹⁸ ys³⁶] max³⁶]}: 877
//│ 	case ((filterMax₆ t⁶) h⁶) of {Pair ys¹² max¹² => [Pair [C h⁶ ys¹²] max¹²]}: 313
//│ 	case ((filterMax₆ t¹⁸) m³⁶) of {Pair ys³⁷ max³⁷ => [Pair [C h¹⁸ ys³⁷] max³⁷]}: 888
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [C h¹⁰ ys²¹] max²¹]: 511 --->
//│ 	case ((filterMax₈ t¹²) h¹²) of {Pair ys²⁴ max²⁴ => [Pair [C h¹² ys²⁴] max²⁴]}: 595
//│ 	case ((filterMax₈ t¹⁰) h¹⁰) of {Pair ys²⁰ max²⁰ => [Pair [C h¹⁰ ys²⁰] max²⁰]}: 501
//│ 	case ((filterMax₈ t¹⁰) m²⁰) of {Pair ys²¹ max²¹ => [Pair [C h¹⁰ ys²¹] max²¹]}: 512
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [N] m³⁷]: 899 --->
//│ 	case ((filterMax₆ t¹⁸) h¹⁸) of {Pair ys³⁶ max³⁶ => [Pair [C h¹⁸ ys³⁶] max³⁶]}: 877
//│ 	case ((filterMax₆ t⁶) h⁶) of {Pair ys¹² max¹² => [Pair [C h⁶ ys¹²] max¹²]}: 313
//│ 	case ((filterMax₆ t¹⁸) m³⁶) of {Pair ys³⁷ max³⁷ => [Pair [C h¹⁸ ys³⁷] max³⁷]}: 888
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [N] m²¹]: 523 --->
//│ 	case ((filterMax₈ t¹²) h¹²) of {Pair ys²⁴ max²⁴ => [Pair [C h¹² ys²⁴] max²⁴]}: 595
//│ 	case ((filterMax₈ t¹⁰) h¹⁰) of {Pair ys²⁰ max²⁰ => [Pair [C h¹⁰ ys²⁰] max²⁰]}: 501
//│ 	case ((filterMax₈ t¹⁰) m²⁰) of {Pair ys²¹ max²¹ => [Pair [C h¹⁰ ys²¹] max²¹]}: 512
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [N] m²⁷]: 664 --->
//│ 	case ((filterMax₁ t¹) h¹) of {Pair ys² max² => [Pair [C h¹ ys²] max²]}: 78
//│ [Pair [N] m³³]: 805 --->
//│ 	case ((filterMax₁₃ t¹⁶) m³²) of {Pair ys³³ max³³ => [Pair [C h¹⁶ ys³³] max³³]}: 794
//│ 	case ((filterMax₁₃ t⁵) m¹⁰) of {Pair ys¹¹ max¹¹ => [Pair [C h⁵ ys¹¹] max¹¹]}: 277
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [N] m¹⁷]: 429 --->
//│ 	case ((filterMax₁₄ t¹⁶) h¹⁶) of {Pair ys³² max³² => [Pair [C h¹⁶ ys³²] max³²]}: 783
//│ 	case ((filterMax₁₄ t⁸) h⁸) of {Pair ys¹⁶ max¹⁶ => [Pair [C h⁸ ys¹⁶] max¹⁶]}: 407
//│ 	case ((filterMax₁₄ t⁸) m¹⁶) of {Pair ys¹⁷ max¹⁷ => [Pair [C h⁸ ys¹⁷] max¹⁷]}: 418
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [N] m³⁹]: 946 --->
//│ 	case ((filterMax₁₂ t¹⁹) h¹⁹) of {Pair ys³⁸ max³⁸ => [Pair [C h¹⁹ ys³⁸] max³⁸]}: 924
//│ 	case ((filterMax₁₂ t⁵) h⁵) of {Pair ys¹⁰ max¹⁰ => [Pair [C h⁵ ys¹⁰] max¹⁰]}: 266
//│ 	case ((filterMax₁₂ t¹⁹) m³⁸) of {Pair ys³⁹ max³⁹ => [Pair [C h¹⁹ ys³⁹] max³⁹]}: 935
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [N] m²³]: 570 --->
//│ 	case ((filterMax₁ t¹) h¹) of {Pair ys² max² => [Pair [C h¹ ys²] max²]}: 78
//│ 	case ((filterMax₄ t¹¹) h¹¹) of {Pair ys²² max²² => [Pair [C h¹¹ ys²²] max²²]}: 548
//│ 	case ((filterMax₄ t¹¹) m²²) of {Pair ys²³ max²³ => [Pair [C h¹¹ ys²³] max²³]}: 559
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [N] m⁷]: 194 --->
//│ 	case ((filterMax₁₇ t³) m⁶) of {Pair ys⁷ max⁷ => [Pair [C h³ ys⁷] max⁷]}: 183
//│ 	case ((filterMax₁₇ t²) m⁴) of {Pair ys⁵ max⁵ => [Pair [C h² ys⁵] max⁵]}: 136
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [N] m²⁹]: 711 --->
//│ 	case ((filterMax₁₈ t¹⁴) h¹⁴) of {Pair ys²⁸ max²⁸ => [Pair [C h¹⁴ ys²⁸] max²⁸]}: 689
//│ 	case ((filterMax₁₈ t³) h³) of {Pair ys⁶ max⁶ => [Pair [C h³ ys⁶] max⁶]}: 172
//│ 	case ((filterMax₁₈ t¹⁴) m²⁸) of {Pair ys²⁹ max²⁹ => [Pair [C h¹⁴ ys²⁹] max²⁹]}: 700
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [N] m¹³]: 335 --->
//│ 	case ((filterMax₅ t¹) m²) of {Pair ys³ max³ => [Pair [C h¹ ys³] max³]}: 89
//│ [Pair [N] m³⁵]: 852 --->
//│ 	case ((filterMax₃ t¹⁷) h¹⁷) of {Pair ys³⁴ max³⁴ => [Pair [C h¹⁷ ys³⁴] max³⁴]}: 830
//│ 	case ((filterMax₃ t¹⁷) m³⁴) of {Pair ys³⁵ max³⁵ => [Pair [C h¹⁷ ys³⁵] max³⁵]}: 841
//│ 	case ((filterMax₃ t¹³) m²⁶) of {Pair ys²⁷ max²⁷ => [Pair [C h¹³ ys²⁷] max²⁷]}: 653
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [N] m¹⁹]: 476 --->
//│ 	case ((filterMax₁₀ t⁹) h⁹) of {Pair ys¹⁸ max¹⁸ => [Pair [C h⁹ ys¹⁸] max¹⁸]}: 454
//│ 	case ((filterMax₁₀ t⁷) h⁷) of {Pair ys¹⁴ max¹⁴ => [Pair [C h⁷ ys¹⁴] max¹⁴]}: 360
//│ 	case ((filterMax₁₀ t⁹) m¹⁸) of {Pair ys¹⁹ max¹⁹ => [Pair [C h⁹ ys¹⁹] max¹⁹]}: 465
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [N] m²⁵]: 617 --->
//│ 	case ((filterMax₇ t¹²) m²⁴) of {Pair ys²⁵ max²⁵ => [Pair [C h¹² ys²⁵] max²⁵]}: 606
//│ 	case ((filterMax₇ t⁶) m¹²) of {Pair ys¹³ max¹³ => [Pair [C h⁶ ys¹³] max¹³]}: 324
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [N] m⁹]: 241 --->
//│ 	case ((filterMax₁₆ t⁴) h⁴) of {Pair ys⁸ max⁸ => [Pair [C h⁴ ys⁸] max⁸]}: 219
//│ 	case ((filterMax₁₆ t²) h²) of {Pair ys⁴ max⁴ => [Pair [C h² ys⁴] max⁴]}: 125
//│ 	case ((filterMax₁₆ t⁴) m⁸) of {Pair ys⁹ max⁹ => [Pair [C h⁴ ys⁹] max⁹]}: 230
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [N] m³¹]: 758 --->
//│ 	case ((filterMax₂ t¹⁵) h¹⁵) of {Pair ys³⁰ max³⁰ => [Pair [C h¹⁵ ys³⁰] max³⁰]}: 736
//│ 	case ((filterMax₂ t¹³) h¹³) of {Pair ys²⁶ max²⁶ => [Pair [C h¹³ ys²⁶] max²⁶]}: 642
//│ 	case ((filterMax₂ t¹⁵) m³⁰) of {Pair ys³¹ max³¹ => [Pair [C h¹⁵ ys³¹] max³¹]}: 747
//│ 	 MORE THAN ONE MATCH EXPR
//│ [Pair [N] m¹⁵]: 382 --->
//│ 	case ((filterMax₅ t¹) m²) of {Pair ys³ max³ => [Pair [C h¹ ys³] max³]}: 89
//│ 	case ((filterMax₉ t⁷) m¹⁴) of {Pair ys¹⁵ max¹⁵ => [Pair [C h⁷ ys¹⁵] max¹⁵]}: 371
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ !!!!!!ERROR!!!!!!
//│ java.lang.StackOverflowError
//│ !!!!!!ERROR!!!!!!


 
// WRONG: explode on branch
_LUMBERHACK_ERROR
fun max(ms) = if ms is
  C(h, t) then m => if h > m is
   True then max(t)(h)
   False then max(t)(m)
  N then m => m
max(C(1, C(3, C(2, N))))(0)
//│ | |↵|/* WRONG: explode on branch*/|↵|_LUMBERHACK_ERROR|↵|#fun| |max|(|ms|)| |#=| |#if| |ms| |is|→|C|(|h|,| |t|)| |#then| |m| |=>| |#if| |h| |>| |m| |is|→|True| |#then| |max|(|t|)|(|h|)|↵|False| |#then| |max|(|t|)|(|m|)|←|↵|N| |#then| |m| |=>| |m|←|↵|max|(|C|(|1|,| |C|(|3|,| |C|(|2|,| |N|)|)|)|)|(|0|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun max = ms, => if ms is ‹(C (h, t,)) then m, => if > (h,) (m,) is ‹(True) then max (t,) (h,); (False) then max (t,) (m,)›; (N) then m, => m›; max (C (1, C (3, C (2, N,),),),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((max^23 [C 1 [C 3 [C 2 [N]]]]) 0)
//│ def max = (fun ms⁰ -> case ms⁰ of {
//│ 	C h⁰ t⁰ => (fun m⁰ -> case (h⁰ > m⁰) of {
//│ 		True => ((max^7 t⁰) h⁰)
//│ 		| False => ((max^12 t⁰) m⁰)})
//│ 	| N => (fun m¹ -> m¹)})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [max^23]
//│ 	[max^23 · max^12]
//│ 		[max^23 · max^12 · max^12]
//│ 			[max^23 · max^12 · max^12 · max^12]
//│ 				[max^23 · max^12 · max^12 · max^12 · max^12] ---> [max^23 · max^12 · max^12 · max^12] (only one)
//│ 				[max^23 · max^12 · max^12 · max^12 · max^7]
//│ 					[max^23 · max^12 · max^12 · max^12 · max^7 · max^12] ---> [max^23 · max^12 · max^12 · max^12 · max^7] (only one)
//│ 					[max^23 · max^12 · max^12 · max^12 · max^7 · max^7] ---> [max^23 · max^12 · max^12 · max^12 · max^7] (only one)
//│ 			[max^23 · max^12 · max^12 · max^7]
//│ 				[max^23 · max^12 · max^12 · max^7 · max^12] ---> [max^23 · max^12 · max^12 · max^7] (only one)
//│ 				[max^23 · max^12 · max^12 · max^7 · max^7] ---> [max^23 · max^12 · max^12 · max^7] (only one)
//│ 		[max^23 · max^12 · max^7]
//│ 			[max^23 · max^12 · max^7 · max^12]
//│ 				[max^23 · max^12 · max^7 · max^12 · max^12] ---> [max^23 · max^12 · max^7 · max^12] (only one)
//│ 				[max^23 · max^12 · max^7 · max^12 · max^7] ---> [max^23 · max^12 · max^7 · max^12] (only one)
//│ 			[max^23 · max^12 · max^7 · max^7]
//│ 				[max^23 · max^12 · max^7 · max^7 · max^12] ---> [max^23 · max^12 · max^7 · max^7] (only one)
//│ 				[max^23 · max^12 · max^7 · max^7 · max^7] ---> [max^23 · max^12 · max^7 · max^7] (only one)
//│ 	[max^23 · max^7]
//│ 		[max^23 · max^7 · max^12]
//│ 			[max^23 · max^7 · max^12 · max^12]
//│ 				[max^23 · max^7 · max^12 · max^12 · max^12] ---> [max^23 · max^7 · max^12 · max^12] (only one)
//│ 				[max^23 · max^7 · max^12 · max^12 · max^7] ---> [max^23 · max^7 · max^12 · max^12] (only one)
//│ 			[max^23 · max^7 · max^12 · max^7]
//│ 				[max^23 · max^7 · max^12 · max^7 · max^12] ---> [max^23 · max^7 · max^12 · max^7] (only one)
//│ 				[max^23 · max^7 · max^12 · max^7 · max^7] ---> [max^23 · max^7 · max^12 · max^7] (only one)
//│ 		[max^23 · max^7 · max^7]
//│ 			[max^23 · max^7 · max^7 · max^12]
//│ 				[max^23 · max^7 · max^7 · max^12 · max^12] ---> [max^23 · max^7 · max^7 · max^12] (only one)
//│ 				[max^23 · max^7 · max^7 · max^12 · max^7] ---> [max^23 · max^7 · max^7 · max^12] (only one)
//│ 			[max^23 · max^7 · max^7 · max^7]
//│ 				[max^23 · max^7 · max^7 · max^7 · max^12] ---> [max^23 · max^7 · max^7 · max^7] (only one)
//│ 				[max^23 · max^7 · max^7 · max^7 · max^7] ---> [max^23 · max^7 · max^7 · max^7] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((max₀ [C 1 [C 3 [C 2 [N]]]]) 0)
//│ def max₀ = 
//│ 	(fun ms⁷ -> case ms⁷ of {
//│ 		C h⁷ t⁷ => (fun m¹⁴ -> case (h⁷ > m¹⁴) of {
//│ 			True => ((max₉ t⁷) h⁷)
//│ 			| False => ((max₁ t⁷) m¹⁴)})
//│ 		| N => (fun m¹⁵ -> m¹⁵)})
//│ 	where
//│ 	def max₁ = 
//│ 		(fun ms¹⁶ -> case ms¹⁶ of {
//│ 			C h¹⁶ t¹⁶ => (fun m³² -> case (h¹⁶ > m³²) of {
//│ 				True => ((max₆ t¹⁶) h¹⁶)
//│ 				| False => ((max₂ t¹⁶) m³²)})
//│ 			| N => (fun m³³ -> m³³)})
//│ 		where
//│ 		def max₂ = 
//│ 			(fun ms⁹ -> case ms⁹ of {
//│ 				C h⁹ t⁹ => (fun m¹⁸ -> case (h⁹ > m¹⁸) of {
//│ 					True => ((max₅ t⁹) h⁹)
//│ 					| False => ((max₃ t⁹) m¹⁸)})
//│ 				| N => (fun m¹⁹ -> m¹⁹)})
//│ 			where
//│ 			def max₃ = 
//│ 				(fun ms¹⁴ -> case ms¹⁴ of {
//│ 					C h¹⁴ t¹⁴ => (fun m²⁸ -> case (h¹⁴ > m²⁸) of {
//│ 						True => ((max₄ t¹⁴) h¹⁴)
//│ 						| False => ((max₃ t¹⁴) m²⁸)})
//│ 					| N => (fun m²⁹ -> m²⁹)})
//│ 				where
//│ 				def max₄ = 
//│ 					(fun ms² -> case ms² of {
//│ 						C h² t² => (fun m⁴ -> case (h² > m⁴) of {
//│ 							True => ((max₄ t²) h²)
//│ 							| False => ((max₄ t²) m⁴)})
//│ 						| N => (fun m⁵ -> m⁵)})
//│ 			def max₅ = 
//│ 				(fun ms⁵ -> case ms⁵ of {
//│ 					C h⁵ t⁵ => (fun m¹⁰ -> case (h⁵ > m¹⁰) of {
//│ 						True => ((max₅ t⁵) h⁵)
//│ 						| False => ((max₅ t⁵) m¹⁰)})
//│ 					| N => (fun m¹¹ -> m¹¹)})
//│ 		def max₆ = 
//│ 			(fun ms¹ -> case ms¹ of {
//│ 				C h¹ t¹ => (fun m² -> case (h¹ > m²) of {
//│ 					True => ((max₈ t¹) h¹)
//│ 					| False => ((max₇ t¹) m²)})
//│ 				| N => (fun m³ -> m³)})
//│ 			where
//│ 			def max₇ = 
//│ 				(fun ms¹¹ -> case ms¹¹ of {
//│ 					C h¹¹ t¹¹ => (fun m²² -> case (h¹¹ > m²²) of {
//│ 						True => ((max₇ t¹¹) h¹¹)
//│ 						| False => ((max₇ t¹¹) m²²)})
//│ 					| N => (fun m²³ -> m²³)})
//│ 			def max₈ = 
//│ 				(fun ms³ -> case ms³ of {
//│ 					C h³ t³ => (fun m⁶ -> case (h³ > m⁶) of {
//│ 						True => ((max₈ t³) h³)
//│ 						| False => ((max₈ t³) m⁶)})
//│ 					| N => (fun m⁷ -> m⁷)})
//│ 	def max₉ = 
//│ 		(fun ms¹² -> case ms¹² of {
//│ 			C h¹² t¹² => (fun m²⁴ -> case (h¹² > m²⁴) of {
//│ 				True => ((max₁₃ t¹²) h¹²)
//│ 				| False => ((max₁₀ t¹²) m²⁴)})
//│ 			| N => (fun m²⁵ -> m²⁵)})
//│ 		where
//│ 		def max₁₀ = 
//│ 			(fun ms⁴ -> case ms⁴ of {
//│ 				C h⁴ t⁴ => (fun m⁸ -> case (h⁴ > m⁸) of {
//│ 					True => ((max₁₂ t⁴) h⁴)
//│ 					| False => ((max₁₁ t⁴) m⁸)})
//│ 				| N => (fun m⁹ -> m⁹)})
//│ 			where
//│ 			def max₁₁ = 
//│ 				(fun ms¹⁰ -> case ms¹⁰ of {
//│ 					C h¹⁰ t¹⁰ => (fun m²⁰ -> case (h¹⁰ > m²⁰) of {
//│ 						True => ((max₁₁ t¹⁰) h¹⁰)
//│ 						| False => ((max₁₁ t¹⁰) m²⁰)})
//│ 					| N => (fun m²¹ -> m²¹)})
//│ 			def max₁₂ = 
//│ 				(fun ms⁶ -> case ms⁶ of {
//│ 					C h⁶ t⁶ => (fun m¹² -> case (h⁶ > m¹²) of {
//│ 						True => ((max₁₂ t⁶) h⁶)
//│ 						| False => ((max₁₂ t⁶) m¹²)})
//│ 					| N => (fun m¹³ -> m¹³)})
//│ 		def max₁₃ = 
//│ 			(fun ms⁸ -> case ms⁸ of {
//│ 				C h⁸ t⁸ => (fun m¹⁶ -> case (h⁸ > m¹⁶) of {
//│ 					True => ((max₁₅ t⁸) h⁸)
//│ 					| False => ((max₁₄ t⁸) m¹⁶)})
//│ 				| N => (fun m¹⁷ -> m¹⁷)})
//│ 			where
//│ 			def max₁₄ = 
//│ 				(fun ms¹⁵ -> case ms¹⁵ of {
//│ 					C h¹⁵ t¹⁵ => (fun m³⁰ -> case (h¹⁵ > m³⁰) of {
//│ 						True => ((max₁₄ t¹⁵) h¹⁵)
//│ 						| False => ((max₁₄ t¹⁵) m³⁰)})
//│ 					| N => (fun m³¹ -> m³¹)})
//│ 			def max₁₅ = 
//│ 				(fun ms¹³ -> case ms¹³ of {
//│ 					C h¹³ t¹³ => (fun m²⁶ -> case (h¹³ > m²⁶) of {
//│ 						True => ((max₁₅ t¹³) h¹³)
//│ 						| False => ((max₁₅ t¹³) m²⁶)})
//│ 					| N => (fun m²⁷ -> m²⁷)})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 1 [C 3 [C 2 [N]]]]: 393 --->
//│ 	case ms⁷ of {C h⁷ t⁷ => (fun m¹⁴ -> case (h⁷ > m¹⁴) of {True => ((max₉ t⁷) h⁷) | False => ((max₁ t⁷) m¹⁴)}) | N => (fun m¹⁵ -> m¹⁵)}: 186
//│ [C 2 [N]]: 391 --->
//│ 	case ms⁴ of {C h⁴ t⁴ => (fun m⁸ -> case (h⁴ > m⁸) of {True => ((max₁₂ t⁴) h⁴) | False => ((max₁₁ t⁴) m⁸)}) | N => (fun m⁹ -> m⁹)}: 120
//│ 	case ms⁸ of {C h⁸ t⁸ => (fun m¹⁶ -> case (h⁸ > m¹⁶) of {True => ((max₁₅ t⁸) h⁸) | False => ((max₁₄ t⁸) m¹⁶)}) | N => (fun m¹⁷ -> m¹⁷)}: 208
//│ 	case ms⁹ of {C h⁹ t⁹ => (fun m¹⁸ -> case (h⁹ > m¹⁸) of {True => ((max₅ t⁹) h⁹) | False => ((max₃ t⁹) m¹⁸)}) | N => (fun m¹⁹ -> m¹⁹)}: 230
//│ 	case ms¹ of {C h¹ t¹ => (fun m² -> case (h¹ > m²) of {True => ((max₈ t¹) h¹) | False => ((max₇ t¹) m²)}) | N => (fun m³ -> m³)}: 54
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C 3 [C 2 [N]]]: 392 --->
//│ 	case ms¹² of {C h¹² t¹² => (fun m²⁴ -> case (h¹² > m²⁴) of {True => ((max₁₃ t¹²) h¹²) | False => ((max₁₀ t¹²) m²⁴)}) | N => (fun m²⁵ -> m²⁵)}: 296
//│ 	case ms¹⁶ of {C h¹⁶ t¹⁶ => (fun m³² -> case (h¹⁶ > m³²) of {True => ((max₆ t¹⁶) h¹⁶) | False => ((max₂ t¹⁶) m³²)}) | N => (fun m³³ -> m³³)}: 384
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N]: 390 --->
//│ 	case ms¹⁰ of {C h¹⁰ t¹⁰ => (fun m²⁰ -> case (h¹⁰ > m²⁰) of {True => ((max₁₁ t¹⁰) h¹⁰) | False => ((max₁₁ t¹⁰) m²⁰)}) | N => (fun m²¹ -> m²¹)}: 252
//│ 	case ms⁶ of {C h⁶ t⁶ => (fun m¹² -> case (h⁶ > m¹²) of {True => ((max₁₂ t⁶) h⁶) | False => ((max₁₂ t⁶) m¹²)}) | N => (fun m¹³ -> m¹³)}: 164
//│ 	case ms¹⁵ of {C h¹⁵ t¹⁵ => (fun m³⁰ -> case (h¹⁵ > m³⁰) of {True => ((max₁₄ t¹⁵) h¹⁵) | False => ((max₁₄ t¹⁵) m³⁰)}) | N => (fun m³¹ -> m³¹)}: 362
//│ 	case ms¹³ of {C h¹³ t¹³ => (fun m²⁶ -> case (h¹³ > m²⁶) of {True => ((max₁₅ t¹³) h¹³) | False => ((max₁₅ t¹³) m²⁶)}) | N => (fun m²⁷ -> m²⁷)}: 318
//│ 	case ms¹⁴ of {C h¹⁴ t¹⁴ => (fun m²⁸ -> case (h¹⁴ > m²⁸) of {True => ((max₄ t¹⁴) h¹⁴) | False => ((max₃ t¹⁴) m²⁸)}) | N => (fun m²⁹ -> m²⁹)}: 340
//│ 	case ms⁵ of {C h⁵ t⁵ => (fun m¹⁰ -> case (h⁵ > m¹⁰) of {True => ((max₅ t⁵) h⁵) | False => ((max₅ t⁵) m¹⁰)}) | N => (fun m¹¹ -> m¹¹)}: 142
//│ 	case ms¹¹ of {C h¹¹ t¹¹ => (fun m²² -> case (h¹¹ > m²²) of {True => ((max₇ t¹¹) h¹¹) | False => ((max₇ t¹¹) m²²)}) | N => (fun m²³ -> m²³)}: 274
//│ 	case ms³ of {C h³ t³ => (fun m⁶ -> case (h³ > m⁶) of {True => ((max₈ t³) h³) | False => ((max₈ t³) m⁶)}) | N => (fun m⁷ -> m⁷)}: 98
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((max₀ 
//│ 	let h⁷ = 1
//│ 	in let t⁷ = 	
//│ 		let h¹² = 3
//│ 		in let t¹² = 	
//│ 			let h⁴ = 2
//│ 			in let t⁴ = (fun m¹³ -> m¹³)
//│ 			in (fun m⁸ -> case (h⁴ > m⁸) of {
//│ 				True => ((max₁₂ t⁴) h⁴)
//│ 				| False => ((max₁₁ t⁴) m⁸)})
//│ 		in (fun m²⁴ -> case (h¹² > m²⁴) of {
//│ 			True => ((max₁₃ t¹²) h¹²)
//│ 			| False => ((max₁₀ t¹²) m²⁴)})
//│ 	in (fun m¹⁴ -> case (h⁷ > m¹⁴) of {
//│ 		True => ((max₉ t⁷) h⁷)
//│ 		| False => ((max₁ t⁷) m¹⁴)})) 0)
//│ def max₀ = 
//│ 	(fun ms⁷ -> ms⁷)
//│ 	where
//│ 	def max₁ = 
//│ 		(fun ms¹⁶ -> case ms¹⁶ of {
//│ 			C h¹⁶ t¹⁶ => (fun m³² -> case (h¹⁶ > m³²) of {
//│ 				True => ((max₆ t¹⁶) h¹⁶)
//│ 				| False => ((max₂ t¹⁶) m³²)})
//│ 			| N => (fun m³³ -> m³³)})
//│ 		where
//│ 		def max₂ = 
//│ 			(fun ms⁹ -> case ms⁹ of {
//│ 				C h⁹ t⁹ => (fun m¹⁸ -> case (h⁹ > m¹⁸) of {
//│ 					True => ((max₅ t⁹) h⁹)
//│ 					| False => ((max₃ t⁹) m¹⁸)})
//│ 				| N => (fun m¹⁹ -> m¹⁹)})
//│ 			where
//│ 			def max₃ = 
//│ 				(fun ms¹⁴ -> case ms¹⁴ of {
//│ 					C h¹⁴ t¹⁴ => (fun m²⁸ -> case (h¹⁴ > m²⁸) of {
//│ 						True => ((max₄ t¹⁴) h¹⁴)
//│ 						| False => ((max₃ t¹⁴) m²⁸)})
//│ 					| N => (fun m²⁹ -> m²⁹)})
//│ 				where
//│ 				def max₄ = 
//│ 					(fun ms² -> case ms² of {
//│ 						C h² t² => (fun m⁴ -> case (h² > m⁴) of {
//│ 							True => ((max₄ t²) h²)
//│ 							| False => ((max₄ t²) m⁴)})
//│ 						| N => (fun m⁵ -> m⁵)})
//│ 			def max₅ = 
//│ 				(fun ms⁵ -> case ms⁵ of {
//│ 					C h⁵ t⁵ => (fun m¹⁰ -> case (h⁵ > m¹⁰) of {
//│ 						True => ((max₅ t⁵) h⁵)
//│ 						| False => ((max₅ t⁵) m¹⁰)})
//│ 					| N => (fun m¹¹ -> m¹¹)})
//│ 		def max₆ = 
//│ 			(fun ms¹ -> case ms¹ of {
//│ 				C h¹ t¹ => (fun m² -> case (h¹ > m²) of {
//│ 					True => ((max₈ t¹) h¹)
//│ 					| False => ((max₇ t¹) m²)})
//│ 				| N => (fun m³ -> m³)})
//│ 			where
//│ 			def max₇ = 
//│ 				(fun ms¹¹ -> case ms¹¹ of {
//│ 					C h¹¹ t¹¹ => (fun m²² -> case (h¹¹ > m²²) of {
//│ 						True => ((max₇ t¹¹) h¹¹)
//│ 						| False => ((max₇ t¹¹) m²²)})
//│ 					| N => (fun m²³ -> m²³)})
//│ 			def max₈ = 
//│ 				(fun ms³ -> case ms³ of {
//│ 					C h³ t³ => (fun m⁶ -> case (h³ > m⁶) of {
//│ 						True => ((max₈ t³) h³)
//│ 						| False => ((max₈ t³) m⁶)})
//│ 					| N => (fun m⁷ -> m⁷)})
//│ 	def max₉ = 
//│ 		(fun ms¹² -> ms¹²)
//│ 		where
//│ 		def max₁₀ = 
//│ 			(fun ms⁴ -> ms⁴)
//│ 			where
//│ 			def max₁₁ = 
//│ 				(fun ms¹⁰ -> case ms¹⁰ of {
//│ 					C h¹⁰ t¹⁰ => (fun m²⁰ -> case (h¹⁰ > m²⁰) of {
//│ 						True => ((max₁₁ t¹⁰) h¹⁰)
//│ 						| False => ((max₁₁ t¹⁰) m²⁰)})
//│ 					| N => (fun m²¹ -> m²¹)})
//│ 			def max₁₂ = 
//│ 				(fun ms⁶ -> ms⁶)
//│ 		def max₁₃ = 
//│ 			(fun ms⁸ -> case ms⁸ of {
//│ 				C h⁸ t⁸ => (fun m¹⁶ -> case (h⁸ > m¹⁶) of {
//│ 					True => ((max₁₅ t⁸) h⁸)
//│ 					| False => ((max₁₄ t⁸) m¹⁶)})
//│ 				| N => (fun m¹⁷ -> m¹⁷)})
//│ 			where
//│ 			def max₁₄ = 
//│ 				(fun ms¹⁵ -> case ms¹⁵ of {
//│ 					C h¹⁵ t¹⁵ => (fun m³⁰ -> case (h¹⁵ > m³⁰) of {
//│ 						True => ((max₁₄ t¹⁵) h¹⁵)
//│ 						| False => ((max₁₄ t¹⁵) m³⁰)})
//│ 					| N => (fun m³¹ -> m³¹)})
//│ 			def max₁₅ = 
//│ 				(fun ms¹³ -> case ms¹³ of {
//│ 					C h¹³ t¹³ => (fun m²⁶ -> case (h¹³ > m²⁶) of {
//│ 						True => ((max₁₅ t¹³) h¹³)
//│ 						| False => ((max₁₅ t¹³) m²⁶)})
//│ 					| N => (fun m²⁷ -> m²⁷)})
//│ <<<<<<< after fusion <<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error 'm²⁴ => '430_matchres <: Destruct(C('h¹⁶, 't¹⁶), N)
//│ !!!!!!ERROR!!!!!!

// WRONG: multiple match
_LUMBERHACK_ERROR
fun last(ls) = if ls is
  C(h, t) then if t is
    N then Some(h)
    C(hh, tt) then last(t)
  N then None
last(C(1, C(2, C(3, N))))
//│ |_LUMBERHACK_ERROR|↵|#fun| |last|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |#if| |t| |is|→|N| |#then| |Some|(|h|)|↵|C|(|hh|,| |tt|)| |#then| |last|(|t|)|←|↵|N| |#then| |None|←|↵|last|(|C|(|1|,| |C|(|2|,| |C|(|3|,| |N|)|)|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun last = ls, => if ls is ‹(C (h, t,)) then if t is ‹(N) then Some (h,); (C (hh, tt,)) then last (t,)›; (N) then None›; last (C (1, C (2, C (3, N,),),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (last^12 [C 1 [C 2 [C 3 [N]]]])
//│ def last = (fun ls⁰ -> case ls⁰ of {
//│ 	C h⁰ t⁰ => case t⁰ of {
//│ 		N => [Some h⁰]
//│ 		| C hh⁰ tt⁰ => (last^5 t⁰)}
//│ 	| N => [None]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [last^12]
//│ 	[last^12 · last^5]
//│ 		[last^12 · last^5 · last^5]
//│ 			[last^12 · last^5 · last^5 · last^5]
//│ 				[last^12 · last^5 · last^5 · last^5 · last^5] ---> [last^12 · last^5 · last^5 · last^5] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (last₀ [C 1 [C 2 [C 3 [N]]]])
//│ def last₀ = 
//│ 	(fun ls⁴ -> case ls⁴ of {
//│ 		C h⁴ t⁴ => case t⁴ of {
//│ 			N => [Some h⁴]
//│ 			| C hh⁴ tt⁴ => (last₁ t⁴)}
//│ 		| N => [None]})
//│ 	where
//│ 	def last₁ = 
//│ 		(fun ls³ -> case ls³ of {
//│ 			C h³ t³ => case t³ of {
//│ 				N => [Some h³]
//│ 				| C hh³ tt³ => (last₂ t³)}
//│ 			| N => [None]})
//│ 		where
//│ 		def last₂ = 
//│ 			(fun ls² -> case ls² of {
//│ 				C h² t² => case t² of {
//│ 					N => [Some h²]
//│ 					| C hh² tt² => (last₃ t²)}
//│ 				| N => [None]})
//│ 			where
//│ 			def last₃ = 
//│ 				(fun ls¹ -> case ls¹ of {
//│ 					C h¹ t¹ => case t¹ of {
//│ 						N => [Some h¹]
//│ 						| C hh¹ tt¹ => (last₃ t¹)}
//│ 					| N => [None]})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 1 [C 2 [C 3 [N]]]]: 72 --->
//│ 	case ls⁴ of {C h⁴ t⁴ => case t⁴ of {N => [Some h⁴] | C hh⁴ tt⁴ => (last₁ t⁴)} | N => [None]}: 63
//│ [C 2 [C 3 [N]]]: 71 --->
//│ 	case ls³ of {C h³ t³ => case t³ of {N => [Some h³] | C hh³ tt³ => (last₂ t³)} | N => [None]}: 52
//│ 	case t⁴ of {N => [Some h⁴] | C hh⁴ tt⁴ => (last₁ t⁴)}: 61
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C 3 [N]]: 70 --->
//│ 	case ls² of {C h² t² => case t² of {N => [Some h²] | C hh² tt² => (last₃ t²)} | N => [None]}: 41
//│ 	case t³ of {N => [Some h³] | C hh³ tt³ => (last₂ t³)}: 50
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N]: 69 --->
//│ 	case ls¹ of {C h¹ t¹ => case t¹ of {N => [Some h¹] | C hh¹ tt¹ => (last₃ t¹)} | N => [None]}: 30
//│ 	case t² of {N => [Some h²] | C hh² tt² => (last₃ t²)}: 39
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (last₀ 
//│ 	let h⁴ = 1
//│ 	in let t⁴ = 	
//│ 		let h³ = 2
//│ 		in let t³ = 	
//│ 			let h² = 3
//│ 			in let t² = [None]
//│ 			in case t² of {
//│ 				N => [Some h²]
//│ 				| C hh² tt² => (last₃ t²)}
//│ 		in case t³ of {
//│ 			N => [Some h³]
//│ 			| C hh³ tt³ => (last₂ t³)}
//│ 	in case t⁴ of {
//│ 		N => [Some h⁴]
//│ 		| C hh⁴ tt⁴ => (last₁ t⁴)})
//│ def last₀ = 
//│ 	(fun ls⁴ -> ls⁴)
//│ 	where
//│ 	def last₁ = 
//│ 		(fun ls³ -> ls³)
//│ 		where
//│ 		def last₂ = 
//│ 			(fun ls² -> ls²)
//│ 			where
//│ 			def last₃ = 
//│ 				(fun ls¹ -> ls¹)
//│ <<<<<<< after fusion <<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error Some('h³) <: Destruct(N, C('hh⁴, 'tt⁴))
//│ !!!!!!ERROR!!!!!!


// WRONG: recursive strategy
_LUMBERHACK_ERROR
fun concat(xs) = if xs is
  N then ys => ys
  C(h, t) then ys => C(h, concat(t, ys))
fun rev(ls) = if ls is
  C(h, t) then concat(rev(t), C(h, N))
  N then N
rev(primitive)
//│ |_LUMBERHACK_ERROR|↵|#fun| |concat|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |concat|(|t|,| |ys|)|)|←|↵|#fun| |rev|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |concat|(|rev|(|t|)|,| |C|(|h|,| |N|)|)|↵|N| |#then| |N|←|↵|rev|(|primitive|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun concat = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, concat (t, ys,),)›; fun rev = ls, => if ls is ‹(C (h, t,)) then concat (rev (t,), C (h, N,),); (N) then N›; rev (primitive,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (rev^27 primitive⁰)
//│ def concat = (fun xs⁰ -> case xs⁰ of {
//│ 	N => (fun ys⁰ -> ys⁰)
//│ 	| C h⁰ t⁰ => (fun ys¹ -> [C h⁰ ((concat^5 t⁰) ys¹)])})
//│ def rev = (fun ls⁰ -> case ls⁰ of {
//│ 	C h¹ t¹ => ((concat^15 (rev^16 t¹)) [C h¹ [N]])
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [rev^27]
//│ 	[rev^27 · concat^15] (hopeless to continue)
//│ 		[rev^27 · concat^15 · concat^5] ---> [rev^27 · concat^15] (using original def)
//│ 	[rev^27 · rev^16]
//│ 		[rev^27 · rev^16 · concat^15] (hopeless to continue)
//│ 			[rev^27 · rev^16 · concat^15 · concat^5] ---> [rev^27 · rev^16 · concat^15] (using original def)
//│ 		[rev^27 · rev^16 · rev^16] ---> [rev^27 · rev^16] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (rev₀ primitive⁰)
//│ def rev₀ = 
//│ 	(fun ls¹ -> case ls¹ of {
//│ 		C h² t² => ((concat₀ (rev₁ t²)) [C h² [N]])
//│ 		| N => [N]})
//│ 	where
//│ 	def concat₀ = 
//│ 		(fun xs² -> case xs² of {
//│ 			N => (fun ys⁴ -> ys⁴)
//│ 			| C h⁵ t⁵ => (fun ys⁵ -> [C h⁵ ((concat₀ t⁵) ys⁵)])})
//│ 	def rev₁ = 
//│ 		(fun ls² -> case ls² of {
//│ 			C h³ t³ => ((concat₁ (rev₁ t³)) [C h³ [N]])
//│ 			| N => [N]})
//│ 		where
//│ 		def concat₁ = 
//│ 			(fun xs¹ -> case xs¹ of {
//│ 				N => (fun ys² -> ys²)
//│ 				| C h⁴ t⁴ => (fun ys³ -> [C h⁴ ((concat₁ t⁴) ys³)])})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h⁴ ((concat₁ t⁴) ys³)]: 65 --->
//│ 	case xs² of {N => (fun ys⁴ -> ys⁴) | C h⁵ t⁵ => (fun ys⁵ -> [C h⁵ ((concat₀ t⁵) ys⁵)])}: 80
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h⁴ t⁴ => (fun ys³ -> [C h⁴ ((concat₁ t⁴) ys³)])}: 67
//│ 	 MORE THAN ONE MATCH EXPR
//│ [C h³ [N]]: 51 --->
//│ 	case xs² of {N => (fun ys⁴ -> ys⁴) | C h⁵ t⁵ => (fun ys⁵ -> [C h⁵ ((concat₀ t⁵) ys⁵)])}: 80
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h⁴ t⁴ => (fun ys³ -> [C h⁴ ((concat₁ t⁴) ys³)])}: 67
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N]: 50 --->
//│ 	case xs² of {N => (fun ys⁴ -> ys⁴) | C h⁵ t⁵ => (fun ys⁵ -> [C h⁵ ((concat₀ t⁵) ys⁵)])}: 80
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h⁴ t⁴ => (fun ys³ -> [C h⁴ ((concat₁ t⁴) ys³)])}: 67
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N]: 53 --->
//│ 	case xs² of {N => (fun ys⁴ -> ys⁴) | C h⁵ t⁵ => (fun ys⁵ -> [C h⁵ ((concat₀ t⁵) ys⁵)])}: 80
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h⁴ t⁴ => (fun ys³ -> [C h⁴ ((concat₁ t⁴) ys³)])}: 67
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ !!!!!!ERROR!!!!!!
//│ java.lang.StackOverflowError
//│ !!!!!!ERROR!!!!!!
