:NewParser
:ParseOnly

:ns
// the `p · p` is never touched (checked) by the typer, so no path leads to it, and no recusive map from it
let p = C(p)
fun c(x) = if C(x) is
    C(a) then c(a)
c(p)
//│ |#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |C|(|x|)| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|c|(|p|)|
//│ Parsed: {let p = C (p,); fun c = x, => if C (x,) is ‹(C (a,)) then c (a,)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:7^10 p:6^11)
//│ def c:7 = (fun x:8 -> case [C x:8^3] of {
//│ 	C a:9 => (c:7^5 a:9^6)})
//│ def p:6 = [C p:6^1]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:7^10] ---> [c:7^10] (hopeless to continue)
//│ [p:6^11] ---> [p:6^11] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (c:7^13 p:6^14)
//│ def c:7 = (fun x:8 -> case [C x:8^6] of {
//│ 	C a:9 => (c:7^8 a:9^9)})
//│ def p:6 = [C p:6^4]
//│ <<<<<<< expanded program <<<<<<<

// the `p · p` is never touched (checked) by the typer, so no path leads to it, and no recusive map from it
:ns
let rec p = C(p)
fun c(x) = if x is
    C(a) then a
fun main(y) = c(p)
main(0)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |a|←|↵|#fun| |main|(|y|)| |#=| |c|(|p|)|↵|main|(|0|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then a›; fun main = y, => c (p,); main (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (main:8^11 0)
//│ def c:7 = (fun x:9 -> case x:9^3 of {
//│ 	C a:10 => a:10^4})
//│ def main:8 = (fun y:11 -> (c:7^7 p:6^8))
//│ def p:6 = [C p:6^1]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [main:8^11] ---> [main:8^11] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (main:8^14 0)
//│ def c:7 = (fun x:9 -> case x:9^6 of {
//│ 	C a:10 => a:10^7})
//│ def main:8 = (fun y:11 -> (c:7^10 p:6^11))
//│ def p:6 = [C p:6^4]
//│ <<<<<<< expanded program <<<<<<<



// NOTE: push in problem
:ns
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
let l = C(K, l)
fun ff(x) = if x is
    K then T
map(ff, l)
//│ |#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |l|)|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|←|↵|map|(|ff|,| |l|)|
//│ Parsed: {fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; let l = C (K, l,); fun ff = x, => if x is ‹(K) then T›; map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((map:6^22 ff:8^23) l:7^25)
//│ def ff:8 = (fun x:13 -> case x:13^18 of {
//│ 	K => [T]})
//│ def l:7 = [C [K] l:7^16]
//│ def map:6 = (fun f:9 -> (fun ls:10 -> case ls:10^1 of {
//│ 	C h:11 t:12 => [C (f:9^2 h:11^3) ((map:6^5 f:9^6) t:12^8)]
//│ 	| N => [N]}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(K, 1'l_7^16) <: 4'ls
//│ 	[-l:7^16 · -l:7^16 · -l:7^25 · +map:6^22 · +map:6^5 · +map:6^5]  --->  [-l:7^16 · -l:7^25 · +map:6^22 · +map:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [l:7^25 · l:7^16 · l:7^16] --> [l:7^25 · l:7^16]
//│ [map:6^22 · map:6^5 · map:6^5] --> [map:6^22 · map:6^5]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [ff:8^23] ---> [ff:8^23] (hopeless to continue)
//│ [map:6^22]
//│ 	[map:6^22 · map:6^5]
//│ 		[map:6^22 · map:6^5 · map:6^5] ---> [map:6^22 · map:6^5] (only one)
//│ [l:7^25]
//│ 	[l:7^25 · l:7^16]
//│ 		[l:7^25 · l:7^16 · l:7^16] ---> [l:7^25 · l:7^16] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([map:6^22]:14^61 ff:8^62) [l:7^25]:16^64)
//│ def [l:7^25 · l:7^16]:17 = [C [K] [l:7^25 · l:7^16]:17^45]
//│ def [l:7^25]:16 = [C [K] [l:7^25 · l:7^16]:17^28]
//│ def [map:6^22 · map:6^5]:15 = (fun f:28 -> (fun ls:29 -> case ls:29^47 of {
//│ 	C h:30 t:31 => [C (f:28^48 h:30^49) (([map:6^22 · map:6^5]:15^51 f:28^52) t:31^54)]
//│ 	| N => [N]}))
//│ def [map:6^22]:14 = (fun f:24 -> (fun ls:25 -> case ls:25^30 of {
//│ 	C h:26 t:27 => [C (f:24^31 h:26^32) (([map:6^22 · map:6^5]:15^34 f:24^35) t:27^37)]
//│ 	| N => [N]}))
//│ def ff:8 = (fun x:13 -> case x:13^23 of {
//│ 	K => [T]})
//│ def l:7 = [C [K] l:7^21]
//│ def map:6 = (fun f:9 -> (fun ls:10 -> case ls:10^6 of {
//│ 	C h:11 t:12 => [C (f:9^7 h:11^8) ((map:6^10 f:9^11) t:12^13)]
//│ 	| N => [N]}))
//│ <<<<<<< expanded program <<<<<<<

// NOTE: only first two is handled
:ns
_LUMBERHACK_ERROR
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
fun ff(x) = if x is
    K then T
    KK then TT
    KKKK then TTTT
let l = C(K, C(KK, C(KKKK, N)))
map(ff, l)
//│ |_LUMBERHACK_ERROR|↵|#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|ff|,| |l|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; let l = C (K, C (KK, C (KKKK, N,),),); map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((map:6^28 ff:7^29) l:8^31)
//│ def ff:7 = (fun x:13 -> case x:13^15 of {
//│ 	K => [T]
//│ 	| KK => [TT]
//│ 	| KKKK => [TTTT]})
//│ def l:8 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map:6 = (fun f:9 -> (fun ls:10 -> case ls:10^1 of {
//│ 	C h:11 t:12 => [C (f:9^2 h:11^3) ((map:6^5 f:9^6) t:12^8)]
//│ 	| N => [N]}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 6't
//│ 	[-l:8^31 · +map:6^28 · +map:6^5 · +map:6^5 · +map:6^5 · +map:6^5]  --->  [-l:8^31 · +map:6^28 · +map:6^5 · +map:6^5 · +map:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [l:8^31] --> [l:8^31]
//│ [map:6^28 · map:6^5 · map:6^5 · map:6^5 · map:6^5] --> [map:6^28 · map:6^5 · map:6^5 · map:6^5]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [ff:7^29] ---> [ff:7^29] (hopeless to continue)
//│ [map:6^28]
//│ 	[map:6^28 · map:6^5]
//│ 		[map:6^28 · map:6^5 · map:6^5]
//│ 			[map:6^28 · map:6^5 · map:6^5 · map:6^5]
//│ 				[map:6^28 · map:6^5 · map:6^5 · map:6^5 · map:6^5] ---> [map:6^28 · map:6^5 · map:6^5 · map:6^5] (only one)
//│ [l:8^31]
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([map:6^28]:14^96 ff:7^97) [l:8^31]:18^99)
//│ def [l:8^31]:18 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def [map:6^28 · map:6^5 · map:6^5 · map:6^5]:17 = (fun f:37 -> (fun ls:38 -> case ls:38^82 of {
//│ 	C h:39 t:40 => [C (f:37^83 h:39^84) (([map:6^28 · map:6^5 · map:6^5 · map:6^5]:17^86 f:37^87) t:40^89)]
//│ 	| N => [N]}))
//│ def [map:6^28 · map:6^5 · map:6^5]:16 = (fun f:29 -> (fun ls:30 -> case ls:30^47 of {
//│ 	C h:31 t:32 => [C (f:29^48 h:31^49) (([map:6^28 · map:6^5 · map:6^5 · map:6^5]:17^51 f:29^52) t:32^54)]
//│ 	| N => [N]}))
//│ def [map:6^28 · map:6^5]:15 = (fun f:25 -> (fun ls:26 -> case ls:26^33 of {
//│ 	C h:27 t:28 => [C (f:25^34 h:27^35) (([map:6^28 · map:6^5 · map:6^5]:16^37 f:25^38) t:28^40)]
//│ 	| N => [N]}))
//│ def [map:6^28]:14 = (fun f:33 -> (fun ls:34 -> case ls:34^61 of {
//│ 	C h:35 t:36 => [C (f:33^62 h:35^63) (([map:6^28 · map:6^5]:15^65 f:33^66) t:36^68)]
//│ 	| N => [N]}))
//│ def ff:7 = (fun x:13 -> case x:13^20 of {
//│ 	K => [T]
//│ 	| KK => [TT]
//│ 	| KKKK => [TTTT]})
//│ def l:8 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map:6 = (fun f:9 -> (fun ls:10 -> case ls:10^6 of {
//│ 	C h:11 t:12 => [C (f:9^7 h:11^8) ((map:6^10 f:9^11) t:12^13)]
//│ 	| N => [N]}))
//│ <<<<<<< expanded program <<<<<<<

:ns
_LUMBERHACK_ERROR
fun rev(l1, l2) = if l1 is
    C(h, t) then rev(t, C(h, l2))
    N then l2
fun rev1(l11, l22) = if l11 is
    C(h1, t1) then rev1(t1, C(h1, l22))
    N then l22
let p = C(K, N)
rev(rev1(p, N), N)
//│ |_LUMBERHACK_ERROR|↵|#fun| |rev|(|l1|,| |l2|)| |#=| |#if| |l1| |is|→|C|(|h|,| |t|)| |#then| |rev|(|t|,| |C|(|h|,| |l2|)|)|↵|N| |#then| |l2|←|↵|#fun| |rev1|(|l11|,| |l22|)| |#=| |#if| |l11| |is|→|C|(|h1|,| |t1|)| |#then| |rev1|(|t1|,| |C|(|h1|,| |l22|)|)|↵|N| |#then| |l22|←|↵|#let| |p| |#=| |C|(|K|,| |N|)|↵|rev|(|rev1|(|p|,| |N|)|,| |N|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun rev = l1, l2, => if l1 is ‹(C (h, t,)) then rev (t, C (h, l2,),); (N) then l2›; fun rev1 = l11, l22, => if l11 is ‹(C (h1, t1,)) then rev1 (t1, C (h1, l22,),); (N) then l22›; let p = C (K, N,); rev (rev1 (p, N,), N,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((rev:6^28 ((rev1:7^29 p:8^30) [N])) [N])
//│ def p:8 = [C [K] [N]]
//│ def rev:6 = (fun l1:9 -> (fun l2:10 -> case l1:9^1 of {
//│ 	C h:11 t:12 => ((rev:6^2 t:12^3) [C h:11^5 l2:10^6])
//│ 	| N => l2:10^9}))
//│ def rev1:7 = (fun l11:13 -> (fun l22:14 -> case l11:13^13 of {
//│ 	C h1:15 t1:16 => ((rev1:7^14 t1:16^15) [C h1:15^17 l22:14^18])
//│ 	| N => l22:14^21}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(12'h1, 11'l22) <: 3'l1
//│ 	[+rev1:7^14 · +rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]
//│ 	[+rev1:7^14 · +rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]
//│ NoProd <: 3'l1
//│ 	[+rev1:7^29 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^29 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]
//│ 	[+rev1:7^29 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^29 · -rev1:7^29 · +rev:6^28 · +rev:6^2]
//│ NoProd <: 13't1
//│ 	[-p:8^30 · +rev1:7^29 · +rev1:7^14 · +rev1:7^14]  --->  [-p:8^30 · +rev1:7^29 · +rev1:7^14]
//│ NoProd <: 6't
//│ 	[+rev1:7^29 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^29 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]
//│ 	[+rev1:7^29 · +rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^29 · +rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]
//│ 	[+rev1:7^29 · +rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^29 · +rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]
//│ 	[+rev1:7^29 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^29 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [p:8^30] --> [p:8^30]
//│ [rev1:7^29 · rev1:7^14 · rev1:7^14] --> [rev1:7^29 · rev1:7^14]
//│ [rev1:7^29] --> [rev1:7^29]
//│ [rev1:7^29 · rev1:7^14] --> [rev1:7^29 · rev1:7^14]
//│ [rev:6^28 · rev:6^2 · rev:6^2] --> [rev:6^28 · rev:6^2]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [rev:6^28]
//│ 	[rev:6^28 · rev:6^2]
//│ 		[rev:6^28 · rev:6^2 · rev:6^2] ---> [rev:6^28 · rev:6^2] (only one)
//│ [p:8^30]
//│ 
//│ [rev1:7^29]
//│ 	[rev1:7^29 · rev1:7^14]
//│ 		[rev1:7^29 · rev1:7^14 · rev1:7^14] ---> [rev1:7^29 · rev1:7^14] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([rev:6^28]:17^88 (([rev1:7^29]:20^89 [p:8^30]:19^90) [N])) [N])
//│ def [p:8^30]:19 = [C [K] [N]]
//│ def [rev1:7^29 · rev1:7^14]:21 = (fun l11:36 -> (fun l22:37 -> case l11:36^64 of {
//│ 	C h1:38 t1:39 => (([rev1:7^29 · rev1:7^14]:21^65 t1:39^66) [C h1:38^68 l22:37^69])
//│ 	| N => l22:37^72}))
//│ def [rev1:7^29]:20 = (fun l11:40 -> (fun l22:41 -> case l11:40^76 of {
//│ 	C h1:42 t1:43 => (([rev1:7^29 · rev1:7^14]:21^77 t1:43^78) [C h1:42^80 l22:41^81])
//│ 	| N => l22:41^84}))
//│ def [rev:6^28 · rev:6^2]:18 = (fun l1:28 -> (fun l2:29 -> case l1:28^37 of {
//│ 	C h:30 t:31 => (([rev:6^28 · rev:6^2]:18^38 t:31^39) [C h:30^41 l2:29^42])
//│ 	| N => l2:29^45}))
//│ def [rev:6^28]:17 = (fun l1:32 -> (fun l2:33 -> case l1:32^52 of {
//│ 	C h:34 t:35 => (([rev:6^28 · rev:6^2]:18^53 t:35^54) [C h:34^56 l2:33^57])
//│ 	| N => l2:33^60}))
//│ def p:8 = [C [K] [N]]
//│ def rev:6 = (fun l1:9 -> (fun l2:10 -> case l1:9^10 of {
//│ 	C h:11 t:12 => ((rev:6^11 t:12^12) [C h:11^14 l2:10^15])
//│ 	| N => l2:10^18}))
//│ def rev1:7 = (fun l11:13 -> (fun l22:14 -> case l11:13^22 of {
//│ 	C h1:15 t1:16 => ((rev1:7^23 t1:16^24) [C h1:15^26 l22:14^27])
//│ 	| N => l22:14^30}))
//│ <<<<<<< expanded program <<<<<<<


// `id2` used twice
:ns
let p = C(C(C(id2(p))))
fun c(x) = if x is
    C(a) then if a is
        C(a) then c(a)
fun id2(yy) = yy
fun id(y) = id2(y)
c(id(p))
//│ |#let| |p| |#=| |C|(|C|(|C|(|id2|(|p|)|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|a|)| |#then| |c|(|a|)|←|←|↵|#fun| |id2|(|yy|)| |#=| |yy|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|c|(|id|(|p|)|)|
//│ Parsed: {let p = C (C (C (id2 (p,),),),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (a,)) then c (a,)››; fun id2 = yy, => yy; fun id = y, => id2 (y,); c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:7^21 (id:9^22 p:6^23))
//│ def c:7 = (fun x:10 -> case x:10^7 of {
//│ 	C a:11 => case a:11^8 of {
//│ 		C a:12 => (c:7^9 a:12^10)}})
//│ def id:9 = (fun y:14 -> (id2:8^17 y:14^18))
//│ def id2:8 = (fun yy:13 -> yy:13^15)
//│ def p:6 = [C [C [C (id2:8^1 p:6^2)]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(C(4'3_callres))) <: 7'a
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ C(C(C(4'3_callres))) <: 6'a
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [c:7^21 · c:7^9 · c:7^9 · c:7^9 · c:7^9] --> [c:7^21 · c:7^9]
//│ [p:6^23 · p:6^2 · p:6^2 · p:6^2] --> [p:6^23 · p:6^2]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [id:9^22]
//│ 	[id:9^22 · id2:8^17]
//│ 
//│ [p:6^23]
//│ 	[p:6^23 · id2:8^1]
//│ 
//│ 	[p:6^23 · p:6^2] ---> [p:6^23] (only one)
//│ [c:7^21]
//│ 	[c:7^21 · c:7^9]
//│ 		[c:7^21 · c:7^9 · c:7^9]
//│ 			[c:7^21 · c:7^9 · c:7^9 · c:7^9]
//│ 				[c:7^21 · c:7^9 · c:7^9 · c:7^9 · c:7^9] ---> [c:7^21 · c:7^9] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([c:7^21]:19^72 ([id:9^22]:15^73 [p:6^23]:17^74))
//│ def [c:7^21 · c:7^9 · c:7^9 · c:7^9]:22 = (fun x:29 -> case x:29^26 of {
//│ 	C a:30 => case a:30^27 of {
//│ 		C a:31 => ([c:7^21 · c:7^9]:20^28 a:31^29)}})
//│ def [c:7^21 · c:7^9 · c:7^9]:21 = (fun x:41 -> case x:41^64 of {
//│ 	C a:42 => case a:42^65 of {
//│ 		C a:43 => ([c:7^21 · c:7^9 · c:7^9 · c:7^9]:22^66 a:43^67)}})
//│ def [c:7^21 · c:7^9]:20 = (fun x:34 -> case x:34^46 of {
//│ 	C a:35 => case a:35^47 of {
//│ 		C a:36 => ([c:7^21 · c:7^9 · c:7^9]:21^48 a:36^49)}})
//│ def [c:7^21]:19 = (fun x:37 -> case x:37^54 of {
//│ 	C a:38 => case a:38^55 of {
//│ 		C a:39 => ([c:7^21 · c:7^9]:20^56 a:39^57)}})
//│ def [id:9^22 · id2:8^17]:16 = (fun yy:40 -> yy:40^62)
//│ def [id:9^22]:15 = (fun y:32 -> ([id:9^22 · id2:8^17]:16^34 y:32^35))
//│ def [p:6^23 · id2:8^1]:18 = (fun yy:33 -> yy:33^38)
//│ def [p:6^23]:17 = [C [C [C ([p:6^23 · id2:8^1]:18^40 [p:6^23]:17^41)]]]
//│ def c:7 = (fun x:10 -> case x:10^12 of {
//│ 	C a:11 => case a:11^13 of {
//│ 		C a:12 => (c:7^14 a:12^15)}})
//│ def id:9 = (fun y:14 -> (id2:8^22 y:14^23))
//│ def id2:8 = (fun yy:13 -> yy:13^20)
//│ def p:6 = [C [C [C (id2:8^6 p:6^7)]]]
//│ <<<<<<< expanded program <<<<<<<


// no polymorphism
:ns
_LUMBERHACK_ERROR
fun id(x) = x
let rec p1 = C(p1)
fun c1(a) = if a is
    C(i) then c1(i)
id(c1)(id(p1))
//│ |_LUMBERHACK_ERROR|↵|#fun| |id|(|x|)| |#=| |x|↵|#let| |#rec| |p1| |#=| |C|(|p1|)|↵|#fun| |c1|(|a|)| |#=| |#if| |a| |is|→|C|(|i|)| |#then| |c1|(|i|)|←|↵|id|(|c1|)|(|id|(|p1|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun id = x, => x; let rec p1 = C (p1,); fun c1 = a, => if a is ‹(C (i,)) then c1 (i,)›; id (c1,) (id (p1,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((id:6^11 c1:8^12) (id:6^14 p1:7^15))
//│ def c1:8 = (fun a:10 -> case a:10^5 of {
//│ 	C i:11 => (c1:8^6 i:11^7)})
//│ def id:6 = (fun x:9 -> x:9^1)
//│ def p1:7 = [C p1:7^3]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error C(1'p1_7^3) <: 9'16_callres => 10'17_callres
//│ !!!!!!ERROR!!!!!!

:ns
_LUMBERHACK_ERROR
fun map(ls) = if ls is
    C(hh, tt) then C(
        (if hh is
            A then B
            AA then BB
        ),
        map(tt)
    )
    N then N
fun rev(a, lss) = if lss is
    C(h, t) then rev(C(h, a), t)
    N then a
// map(rev(N, C(A, C(AA, N))))
map(rev(N, primitive))
//│ |_LUMBERHACK_ERROR|↵|#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|hh|,| |tt|)| |#then| |C|(|→|(|#if| |hh| |is|→|A| |#then| |B|↵|AA| |#then| |BB|←|↵|)|,|↵|map|(|tt|)|←|↵|)|↵|N| |#then| |N|←|↵|#fun| |rev|(|a|,| |lss|)| |#=| |#if| |lss| |is|→|C|(|h|,| |t|)| |#then| |rev|(|C|(|h|,| |a|)|,| |t|)|↵|N| |#then| |a|←|↵|/* map(rev(N, C(A, C(AA, N))))*/|↵|map|(|rev|(|N|,| |primitive|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun map = ls, => if ls is ‹(C (hh, tt,)) then C ('(' if hh is ‹(A) then B; (AA) then BB›, ')', map (tt,),); (N) then N›; fun rev = a, lss, => if lss is ‹(C (h, t,)) then rev (C (h, a,), t,); (N) then a›; map (rev (N, primitive,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (map:6^25 ((rev:7^26 [N]) primitive:3^29))
//│ def map:6 = (fun ls:8 -> case ls:8^1 of {
//│ 	C hh:9 tt:10 => [C case hh:9^2 of {
//│ 		A => [B]
//│ 		| AA => [BB]} (map:6^6 tt:10^7)]
//│ 	| N => [N]})
//│ def rev:7 = (fun a:11 -> (fun lss:12 -> case lss:12^13 of {
//│ 	C h:13 t:14 => ((rev:7^14 [C h:13^15 a:11^16]) t:14^19)
//│ 	| N => a:11^21}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 2'ls
//│ 	[+rev:7^26 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]  --->  [+rev:7^26 · -rev:7^26 · +map:6^25 · +map:6^6]
//│ 	[+rev:7^26 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]  --->  [+rev:7^26 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]
//│ NoProd <: 4'tt
//│ 	[+rev:7^26 · +rev:7^14 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6 · +map:6^6]  --->  [+rev:7^26 · +rev:7^14 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]
//│ 	[+rev:7^26 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]  --->  [+rev:7^26 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]
//│ 	[+rev:7^26 · +rev:7^14 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6 · +map:6^6]  --->  [+rev:7^26 · +rev:7^14 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]
//│ 	[+rev:7^26 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]  --->  [+rev:7^26 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]
//│ NoProd <: 9'lss
//│ 	[+rev:7^26 · +rev:7^14 · +rev:7^14]  --->  [+rev:7^26 · +rev:7^14]
//│ C(10'h, 8'a) <: 2'ls
//│ 	[+rev:7^14 · +rev:7^14 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]  --->  [+rev:7^14 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]
//│ 	[+rev:7^14 · +rev:7^14 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]  --->  [+rev:7^14 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [rev:7^26 · rev:7^14] --> [rev:7^26 · rev:7^14]
//│ [map:6^25 · map:6^6 · map:6^6] --> [map:6^25 · map:6^6]
//│ [rev:7^26] --> [rev:7^26]
//│ [rev:7^26 · rev:7^14 · rev:7^14] --> [rev:7^26 · rev:7^14]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [rev:7^26]
//│ 	[rev:7^26 · rev:7^14]
//│ 		[rev:7^26 · rev:7^14 · rev:7^14] ---> [rev:7^26 · rev:7^14] (only one)
//│ [map:6^25]
//│ 	[map:6^25 · map:6^6]
//│ 		[map:6^25 · map:6^6 · map:6^6] ---> [map:6^25 · map:6^6] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([map:6^25]:17^80 (([rev:7^26]:15^81 [N]) primitive:22^84))
//│ def [map:6^25 · map:6^6]:18 = (fun ls:25 -> case ls:25^32 of {
//│ 	C hh:26 tt:27 => [C case hh:26^33 of {
//│ 		A => [B]
//│ 		| AA => [BB]} ([map:6^25 · map:6^6]:18^37 tt:27^38)]
//│ 	| N => [N]})
//│ def [map:6^25]:17 = (fun ls:36 -> case ls:36^68 of {
//│ 	C hh:37 tt:38 => [C case hh:37^69 of {
//│ 		A => [B]
//│ 		| AA => [BB]} ([map:6^25 · map:6^6]:18^73 tt:38^74)]
//│ 	| N => [N]})
//│ def [rev:7^26 · rev:7^14]:16 = (fun a:32 -> (fun lss:33 -> case lss:33^56 of {
//│ 	C h:34 t:35 => (([rev:7^26 · rev:7^14]:16^57 [C h:34^58 a:32^59]) t:35^62)
//│ 	| N => a:32^64}))
//│ def [rev:7^26]:15 = (fun a:28 -> (fun lss:29 -> case lss:29^44 of {
//│ 	C h:30 t:31 => (([rev:7^26 · rev:7^14]:16^45 [C h:30^46 a:28^47]) t:31^50)
//│ 	| N => a:28^52}))
//│ def map:6 = (fun ls:8 -> case ls:8^8 of {
//│ 	C hh:9 tt:10 => [C case hh:9^9 of {
//│ 		A => [B]
//│ 		| AA => [BB]} (map:6^13 tt:10^14)]
//│ 	| N => [N]})
//│ def rev:7 = (fun a:11 -> (fun lss:12 -> case lss:12^20 of {
//│ 	C h:13 t:14 => ((rev:7^21 [C h:13^22 a:11^23]) t:14^26)
//│ 	| N => a:11^28}))
//│ <<<<<<< expanded program <<<<<<<

:ns
_LUMBERHACK_ERROR
let p = Pair(A, B)
fun c(x) = if x is
    Pair(a, b) then c(Pair(b, a))
c(p)
//│ |_LUMBERHACK_ERROR|↵|#let| |p| |#=| |Pair|(|A|,| |B|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|Pair|(|a|,| |b|)| |#then| |c|(|Pair|(|b|,| |a|)|)|←|↵|c|(|p|)|
//│ Parsed: {_LUMBERHACK_ERROR; let p = Pair (A, B,); fun c = x, => if x is ‹(Pair (a, b,)) then c (Pair (b, a,),)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:7^12 p:6^13)
//│ def c:7 = (fun x:8 -> case x:8^4 of {
//│ 	Pair a:9 b:10 => (c:7^5 [Pair b:10^6 a:9^7])})
//│ def p:6 = [Pair [A] [B]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:7^12] ---> [c:7^12] (hopeless to continue)
//│ [p:6^13] ---> [p:6^13] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (c:7^15 p:6^16)
//│ def c:7 = (fun x:8 -> case x:8^7 of {
//│ 	Pair a:9 b:10 => (c:7^8 [Pair b:10^9 a:9^10])})
//│ def p:6 = [Pair [A] [B]]
//│ <<<<<<< expanded program <<<<<<<


// pushing in of auxiliary parameters
// FIXME: weird recursive
:ns
fun last(x, ys) = if ys is
    N then x
    C(h, t) then last(h, t)
fun lastDrive(xs) = if xs is
    N then None
    C(hh, tt) then Some(last(hh, tt))
lastDrive(C(1, C(2, N)))
//│ |#fun| |last|(|x|,| |ys|)| |#=| |#if| |ys| |is|→|N| |#then| |x|↵|C|(|h|,| |t|)| |#then| |last|(|h|,| |t|)|←|↵|#fun| |lastDrive|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |None|↵|C|(|hh|,| |tt|)| |#then| |Some|(|last|(|hh|,| |tt|)|)|←|↵|lastDrive|(|C|(|1|,| |C|(|2|,| |N|)|)|)|
//│ Parsed: {fun last = x, ys, => if ys is ‹(N) then x; (C (h, t,)) then last (h, t,)›; fun lastDrive = xs, => if xs is ‹(N) then None; (C (hh, tt,)) then Some (last (hh, tt,),)›; lastDrive (C (1, C (2, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (lastDrive:7^21 [C 1 [C 2 [N]]])
//│ def last:6 = (fun x:8 -> (fun ys:9 -> case ys:9^1 of {
//│ 	N => x:8^2
//│ 	| C h:10 t:11 => ((last:6^3 h:10^4) t:11^6)}))
//│ def lastDrive:7 = (fun xs:12 -> case xs:12^11 of {
//│ 	N => [None]
//│ 	| C hh:13 tt:14 => [Some ((last:6^13 hh:13^14) tt:14^16)]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 5't
//│ 	[+lastDrive:7^21 · +last:6^13 · +last:6^3 · +last:6^3]  --->  [+lastDrive:7^21 · +last:6^13 · +last:6^3]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [lastDrive:7^21 · last:6^13 · last:6^3 · last:6^3] --> [lastDrive:7^21 · last:6^13 · last:6^3]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [lastDrive:7^21]
//│ 	[lastDrive:7^21 · last:6^13]
//│ 		[lastDrive:7^21 · last:6^13 · last:6^3]
//│ 			[lastDrive:7^21 · last:6^13 · last:6^3 · last:6^3] ---> [lastDrive:7^21 · last:6^13 · last:6^3] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([lastDrive:7^21]:15^58 [C 1 [C 2 [N]]])
//│ def [lastDrive:7^21 · last:6^13 · last:6^3]:17 = (fun x:31 -> (fun ys:32 -> case ys:32^48 of {
//│ 	N => x:31^49
//│ 	| C h:33 t:34 => (([lastDrive:7^21 · last:6^13 · last:6^3]:17^50 h:33^51) t:34^53)}))
//│ def [lastDrive:7^21 · last:6^13]:16 = (fun x:24 -> (fun ys:25 -> case ys:25^28 of {
//│ 	N => x:24^29
//│ 	| C h:26 t:27 => (([lastDrive:7^21 · last:6^13 · last:6^3]:17^30 h:26^31) t:27^33)}))
//│ def [lastDrive:7^21]:15 = (fun xs:28 -> case xs:28^38 of {
//│ 	N => [None]
//│ 	| C hh:29 tt:30 => [Some (([lastDrive:7^21 · last:6^13]:16^40 hh:29^41) tt:30^43)]})
//│ def last:6 = (fun x:8 -> (fun ys:9 -> case ys:9^8 of {
//│ 	N => x:8^9
//│ 	| C h:10 t:11 => ((last:6^10 h:10^11) t:11^13)}))
//│ def lastDrive:7 = (fun xs:12 -> case xs:12^18 of {
//│ 	N => [None]
//│ 	| C hh:13 tt:14 => [Some ((last:6^20 hh:13^21) tt:14^23)]})
//│ <<<<<<< expanded program <<<<<<<

:ns
fun inter(xs, ys) = if xs is
    N then ys
    C(h, t) then C(h, inter(ys, t))
inter(C(1, C(2, C(3, N))), C(9, C(8, C(7, N))))
//│ |#fun| |inter|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|N| |#then| |ys|↵|C|(|h|,| |t|)| |#then| |C|(|h|,| |inter|(|ys|,| |t|)|)|←|↵|inter|(|C|(|1|,| |C|(|2|,| |C|(|3|,| |N|)|)|)|,| |C|(|9|,| |C|(|8|,| |C|(|7|,| |N|)|)|)|)|
//│ Parsed: {fun inter = xs, ys, => if xs is ‹(N) then ys; (C (h, t,)) then C (h, inter (ys, t,),)›; inter (C (1, C (2, C (3, N,),),), C (9, C (8, C (7, N,),),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((inter:6^13 [C 1 [C 2 [C 3 [N]]]]) [C 9 [C 8 [C 7 [N]]]])
//│ def inter:6 = (fun xs:7 -> (fun ys:8 -> case xs:7^1 of {
//│ 	N => ys:8^2
//│ 	| C h:9 t:10 => [C h:9^3 ((inter:6^4 ys:8^5) t:10^7)]}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 4't
//│ 	[+inter:6^13 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4]  --->  [+inter:6^13 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4]
//│ 	[+inter:6^13 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4]  --->  [+inter:6^13 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4] --> [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]
//│ [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4] --> [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter:6^13]
//│ 	[inter:6^13 · inter:6^4]
//│ 		[inter:6^13 · inter:6^4 · inter:6^4]
//│ 			[inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4]
//│ 				[inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]
//│ 					[inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]
//│ 						[inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]
//│ 							[inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]
//│ 								[inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4] ---> [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([inter:6^13]:11^126 [C 1 [C 2 [C 3 [N]]]]) [C 9 [C 8 [C 7 [N]]]])
//│ def [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:18 = (fun xs:49 -> (fun ys:50 -> case xs:49^102 of {
//│ 	N => ys:50^103
//│ 	| C h:51 t:52 => [C h:51^104 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:17^105 ys:50^106) t:52^108)]}))
//│ def [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:17 = (fun xs:25 -> (fun ys:26 -> case xs:25^30 of {
//│ 	N => ys:26^31
//│ 	| C h:27 t:28 => [C h:27^32 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:18^33 ys:26^34) t:28^36)]}))
//│ def [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:16 = (fun xs:33 -> (fun ys:34 -> case xs:33^54 of {
//│ 	N => ys:34^55
//│ 	| C h:35 t:36 => [C h:35^56 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:17^57 ys:34^58) t:36^60)]}))
//│ def [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:15 = (fun xs:29 -> (fun ys:30 -> case xs:29^42 of {
//│ 	N => ys:30^43
//│ 	| C h:31 t:32 => [C h:31^44 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:16^45 ys:30^46) t:32^48)]}))
//│ def [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4]:14 = (fun xs:37 -> (fun ys:38 -> case xs:37^66 of {
//│ 	N => ys:38^67
//│ 	| C h:39 t:40 => [C h:39^68 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:15^69 ys:38^70) t:40^72)]}))
//│ def [inter:6^13 · inter:6^4 · inter:6^4]:13 = (fun xs:53 -> (fun ys:54 -> case xs:53^114 of {
//│ 	N => ys:54^115
//│ 	| C h:55 t:56 => [C h:55^116 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4]:14^117 ys:54^118) t:56^120)]}))
//│ def [inter:6^13 · inter:6^4]:12 = (fun xs:41 -> (fun ys:42 -> case xs:41^78 of {
//│ 	N => ys:42^79
//│ 	| C h:43 t:44 => [C h:43^80 (([inter:6^13 · inter:6^4 · inter:6^4]:13^81 ys:42^82) t:44^84)]}))
//│ def [inter:6^13]:11 = (fun xs:45 -> (fun ys:46 -> case xs:45^90 of {
//│ 	N => ys:46^91
//│ 	| C h:47 t:48 => [C h:47^92 (([inter:6^13 · inter:6^4]:12^93 ys:46^94) t:48^96)]}))
//│ def inter:6 = (fun xs:7 -> (fun ys:8 -> case xs:7^18 of {
//│ 	N => ys:8^19
//│ 	| C h:9 t:10 => [C h:9^20 ((inter:6^21 ys:8^22) t:10^24)]}))
//│ <<<<<<< expanded program <<<<<<<

:ns
_LUMBERHACK_ERROR
let add = primitive
fun idxSum(ls) = if ls is
    N then acc => 0
    C(h, t) then acc => add(acc, idxSum(t)(add(acc, 1)))
fun rev(lss, a) = if lss is
    N then a
    C(hh, tt) then rev(tt, C(hh, a))
idxSum(rev(primitive, N))(0)
//│ |_LUMBERHACK_ERROR|↵|#let| |add| |#=| |primitive|↵|#fun| |idxSum|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |acc| |=>| |0|↵|C|(|h|,| |t|)| |#then| |acc| |=>| |add|(|acc|,| |idxSum|(|t|)|(|add|(|acc|,| |1|)|)|)|←|↵|#fun| |rev|(|lss|,| |a|)| |#=| |#if| |lss| |is|→|N| |#then| |a|↵|C|(|hh|,| |tt|)| |#then| |rev|(|tt|,| |C|(|hh|,| |a|)|)|←|↵|idxSum|(|rev|(|primitive|,| |N|)|)|(|0|)|
//│ Parsed: {_LUMBERHACK_ERROR; let add = primitive; fun idxSum = ls, => if ls is ‹(N) then acc, => 0; (C (h, t,)) then acc, => add (acc, idxSum (t,) (add (acc, 1,),),)›; fun rev = lss, a, => if lss is ‹(N) then a; (C (hh, tt,)) then rev (tt, C (hh, a,),)›; idxSum (rev (primitive, N,),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((idxSum:7^33 ((rev:8^34 primitive:3^35) [N])) 0)
//│ def add:4 = primitive:3^1
//│ def idxSum:7 = (fun ls:9 -> case ls:9^2 of {
//│ 	N => (fun acc:10 -> 0)
//│ 	| C h:11 t:12 => (fun acc:13 -> ((add:4^5 acc:13^6) ((idxSum:7^8 t:12^9) ((add:4^11 acc:13^12) 1))))})
//│ def rev:8 = (fun lss:14 -> (fun a:15 -> case lss:14^21 of {
//│ 	N => a:15^22
//│ 	| C hh:16 tt:17 => ((rev:8^23 tt:17^24) [C hh:16^26 a:15^27])}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 15'lss
//│ 	[+rev:8^34 · +rev:8^23 · +rev:8^23]  --->  [+rev:8^34 · +rev:8^23]
//│ NoProd <: 3'ls
//│ 	[+rev:8^34 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^34 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ 	[+rev:8^34 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^34 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ C(17'hh, 16'a) <: 3'ls
//│ 	[+rev:8^23 · +rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ 	[+rev:8^23 · +rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ NoProd <: 6't
//│ 	[+rev:8^34 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^34 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ 	[+rev:8^34 · +rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^34 · +rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]
//│ 	[+rev:8^34 · +rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^34 · +rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]
//│ 	[+rev:8^34 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^34 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [] --> []
//│ [idxSum:7^33 · idxSum:7^8 · idxSum:7^8] --> [idxSum:7^33 · idxSum:7^8]
//│ [rev:8^34 · rev:8^23] --> [rev:8^34 · rev:8^23]
//│ [rev:8^34 · rev:8^23 · rev:8^23] --> [rev:8^34 · rev:8^23]
//│ [rev:8^34] --> [rev:8^34]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [idxSum:7^33]
//│ 	[idxSum:7^33 · idxSum:7^8]
//│ 		[idxSum:7^33 · idxSum:7^8 · idxSum:7^8] ---> [idxSum:7^33 · idxSum:7^8] (only one)
//│ [rev:8^34]
//│ 	[rev:8^34 · rev:8^23]
//│ 		[rev:8^34 · rev:8^23 · rev:8^23] ---> [rev:8^34 · rev:8^23] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([idxSum:7^33]:18^104 (([rev:8^34]:20^105 primitive:25^106) [N])) 0)
//│ def [idxSum:7^33 · idxSum:7^8]:19 = (fun ls:32 -> case ls:32^54 of {
//│ 	N => (fun acc:33 -> 0)
//│ 	| C h:34 t:35 => (fun acc:36 -> ((add:26^57 acc:36^58) (([idxSum:7^33 · idxSum:7^8]:19^60 t:35^61) ((add:26^63 acc:36^64) 1))))})
//│ def [idxSum:7^33]:18 = (fun ls:37 -> case ls:37^73 of {
//│ 	N => (fun acc:38 -> 0)
//│ 	| C h:39 t:40 => (fun acc:41 -> ((add:26^76 acc:41^77) (([idxSum:7^33 · idxSum:7^8]:19^79 t:40^80) ((add:26^82 acc:41^83) 1))))})
//│ def [rev:8^34 · rev:8^23]:21 = (fun lss:42 -> (fun a:43 -> case lss:42^92 of {
//│ 	N => a:43^93
//│ 	| C hh:44 tt:45 => (([rev:8^34 · rev:8^23]:21^94 tt:45^95) [C hh:44^97 a:43^98])}))
//│ def [rev:8^34]:20 = (fun lss:28 -> (fun a:29 -> case lss:28^42 of {
//│ 	N => a:29^43
//│ 	| C hh:30 tt:31 => (([rev:8^34 · rev:8^23]:21^44 tt:31^45) [C hh:30^47 a:29^48])}))
//│ def add:4 = primitive:3^10
//│ def idxSum:7 = (fun ls:9 -> case ls:9^11 of {
//│ 	N => (fun acc:10 -> 0)
//│ 	| C h:11 t:12 => (fun acc:13 -> ((add:4^14 acc:13^15) ((idxSum:7^17 t:12^18) ((add:4^20 acc:13^21) 1))))})
//│ def rev:8 = (fun lss:14 -> (fun a:15 -> case lss:14^30 of {
//│ 	N => a:15^31
//│ 	| C hh:16 tt:17 => ((rev:8^32 tt:17^33) [C hh:16^35 a:15^36])}))
//│ <<<<<<< expanded program <<<<<<<


// scope extrusion
:ns
fun inter(xs) = if xs is
    N then ys => ys
    C(h0, t0) then ys => if ys is
        N then N2
        C(h1, t1) then C2(add(h0,h1), inter(t0, t1))
let l1 = C(1, C(2, C(1, C(2, N))))
// let rec l2 = N
let rec l2 = C(11, N)
inter(l1, l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h0|,| |t0|)| |#then| |ys| |=>| |#if| |ys| |is|→|N| |#then| |N2|↵|C|(|h1|,| |t1|)| |#then| |C2|(|add|(|h0|,|h1|)|,| |inter|(|t0|,| |t1|)|)|←|←|↵|#let| |l1| |#=| |C|(|1|,| |C|(|2|,| |C|(|1|,| |C|(|2|,| |N|)|)|)|)|↵|/* let rec l2 = N*/|↵|#let| |#rec| |l2| |#=| |C|(|11|,| |N|)|↵|inter|(|l1|,| |l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h0, t0,)) then ys, => if ys is ‹(N) then N2; (C (h1, t1,)) then C2 (add (h0, h1,), inter (t0, t1,),)››; let l1 = C (1, C (2, C (1, C (2, N,),),),); let rec l2 = C (11, N,); inter (l1, l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((inter:6^33 l1:7^34) l2:8^36)
//│ def inter:6 = (fun xs:9 -> case xs:9^1 of {
//│ 	N => (fun ys:10 -> ys:10^2)
//│ 	| C h0:11 t0:12 => (fun ys:13 -> case ys:13^4 of {
//│ 		N => [N2]
//│ 		| C h1:14 t1:15 => [C2 ((add:4^6 h0:11^7) h1:14^9) ((inter:6^11 t0:12^12) t1:15^14)]})})
//│ def l1:7 = [C 1 [C 2 [C 1 [C 2 [N]]]]]
//│ def l2:8 = [C 11 [N]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 9't1
//│ 	[-l2:8^36 · +inter:6^33 · +inter:6^11 · +inter:6^11]  --->  [-l2:8^36 · +inter:6^33 · +inter:6^11]
//│ NoProd <: 6't0
//│ 	[-l1:7^34 · +inter:6^33 · +inter:6^11 · +inter:6^11 · +inter:6^11 · +inter:6^11 · +inter:6^11]  --->  [-l1:7^34 · +inter:6^33 · +inter:6^11 · +inter:6^11 · +inter:6^11 · +inter:6^11]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [inter:6^33 · inter:6^11 · inter:6^11] --> [inter:6^33 · inter:6^11]
//│ [inter:6^33 · inter:6^11 · inter:6^11 · inter:6^11 · inter:6^11 · inter:6^11] --> [inter:6^33 · inter:6^11 · inter:6^11 · inter:6^11 · inter:6^11]
//│ [l1:7^34] --> [l1:7^34]
//│ [l2:8^36] --> [l2:8^36]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [l1:7^34]
//│ 
//│ [inter:6^33]
//│ 	[inter:6^33 · inter:6^11]
//│ 		[inter:6^33 · inter:6^11 · inter:6^11] ---> [inter:6^33 · inter:6^11] (only one)
//│ [l2:8^36]
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([inter:6^33]:17^90 [l1:7^34]:16^91) [l2:8^36]:19^93)
//│ def [inter:6^33 · inter:6^11]:18 = (fun xs:33 -> case xs:33^70 of {
//│ 	N => (fun ys:34 -> ys:34^71)
//│ 	| C h0:35 t0:36 => (fun ys:37 -> case ys:37^73 of {
//│ 		N => [N2]
//│ 		| C h1:38 t1:39 => [C2 ((add:24^75 h0:35^76) h1:38^78) (([inter:6^33 · inter:6^11]:18^80 t0:36^81) t1:39^83)]})})
//│ def [inter:6^33]:17 = (fun xs:26 -> case xs:26^38 of {
//│ 	N => (fun ys:27 -> ys:27^39)
//│ 	| C h0:28 t0:29 => (fun ys:30 -> case ys:30^41 of {
//│ 		N => [N2]
//│ 		| C h1:31 t1:32 => [C2 ((add:24^43 h0:28^44) h1:31^46) (([inter:6^33 · inter:6^11]:18^48 t0:29^49) t1:32^51)]})})
//│ def [l1:7^34]:16 = [C 1 [C 2 [C 1 [C 2 [N]]]]]
//│ def [l2:8^36]:19 = [C 11 [N]]
//│ def inter:6 = (fun xs:9 -> case xs:9^6 of {
//│ 	N => (fun ys:10 -> ys:10^7)
//│ 	| C h0:11 t0:12 => (fun ys:13 -> case ys:13^9 of {
//│ 		N => [N2]
//│ 		| C h1:14 t1:15 => [C2 ((add:4^11 h0:11^12) h1:14^14) ((inter:6^16 t0:12^17) t1:15^19)]})})
//│ def l1:7 = [C 1 [C 2 [C 1 [C 2 [N]]]]]
//│ def l2:8 = [C 11 [N]]
//│ <<<<<<< expanded program <<<<<<<


:ns
let rec p = C(C(C(id(p))))
fun c(x) = if x is
    C(a) then if a is
        C(b) then c(b)
fun id2(z) = z
fun id(y) = id2(y)
fun id3(d) = d
c(id3(p))
//│ |#let| |#rec| |p| |#=| |C|(|C|(|C|(|id|(|p|)|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|b|)| |#then| |c|(|b|)|←|←|↵|#fun| |id2|(|z|)| |#=| |z|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|#fun| |id3|(|d|)| |#=| |d|↵|c|(|id3|(|p|)|)|
//│ Parsed: {let rec p = C (C (C (id (p,),),),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (b,)) then c (b,)››; fun id2 = z, => z; fun id = y, => id2 (y,); fun id3 = d, => d; c (id3 (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:7^23 (id3:10^24 p:6^25))
//│ def c:7 = (fun x:11 -> case x:11^7 of {
//│ 	C a:12 => case a:12^8 of {
//│ 		C b:13 => (c:7^9 b:13^10)}})
//│ def id:9 = (fun y:15 -> (id2:8^17 y:15^18))
//│ def id2:8 = (fun z:14 -> z:14^15)
//│ def id3:10 = (fun d:16 -> d:16^21)
//│ def p:6 = [C [C [C (id:9^1 p:6^2)]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(C(5'3_callres))) <: 7'a
//│ 	[-p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^25 · +id3:10^24 · -id3:10^24 · +c:7^23 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^25 · +id3:10^24 · -id3:10^24 · +c:7^23 · +c:7^9]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [c:7^23 · c:7^9 · c:7^9 · c:7^9 · c:7^9] --> [c:7^23 · c:7^9]
//│ [p:6^25 · p:6^2 · p:6^2 · p:6^2] --> [p:6^25 · p:6^2]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:7^23]
//│ 	[c:7^23 · c:7^9]
//│ 		[c:7^23 · c:7^9 · c:7^9]
//│ 			[c:7^23 · c:7^9 · c:7^9 · c:7^9]
//│ 				[c:7^23 · c:7^9 · c:7^9 · c:7^9 · c:7^9] ---> [c:7^23 · c:7^9] (only one)
//│ [id3:10^24] ---> [id3:10^24] (hopeless to continue)
//│ [p:6^25]
//│ 	[p:6^25 · id:9^1] ---> [id:9^1] (hopeless to continue)
//│ 	[p:6^25 · p:6^2]
//│ 		[p:6^25 · p:6^2 · id:9^1] ---> [id:9^1] (hopeless to continue)
//│ 		[p:6^25 · p:6^2 · p:6^2]
//│ 			[p:6^25 · p:6^2 · p:6^2 · id:9^1] ---> [id:9^1] (hopeless to continue)
//│ 			[p:6^25 · p:6^2 · p:6^2 · p:6^2] ---> [p:6^25 · p:6^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([c:7^23]:17^78 (id3:6^79 [p:6^25]:21^80))
//│ def [c:7^23 · c:7^9 · c:7^9 · c:7^9]:20 = (fun x:39 -> case x:39^64 of {
//│ 	C a:40 => case a:40^65 of {
//│ 		C b:41 => ([c:7^23 · c:7^9]:18^66 b:41^67)}})
//│ def [c:7^23 · c:7^9 · c:7^9]:19 = (fun x:36 -> case x:36^56 of {
//│ 	C a:37 => case a:37^57 of {
//│ 		C b:38 => ([c:7^23 · c:7^9 · c:7^9 · c:7^9]:20^58 b:38^59)}})
//│ def [c:7^23 · c:7^9]:18 = (fun x:33 -> case x:33^48 of {
//│ 	C a:34 => case a:34^49 of {
//│ 		C b:35 => ([c:7^23 · c:7^9 · c:7^9]:19^50 b:35^51)}})
//│ def [c:7^23]:17 = (fun x:30 -> case x:30^34 of {
//│ 	C a:31 => case a:31^35 of {
//│ 		C b:32 => ([c:7^23 · c:7^9]:18^36 b:32^37)}})
//│ def [p:6^25 · p:6^2 · p:6^2]:23 = [C [C [C (id:8^72 [p:6^25 · p:6^2]:22^73)]]]
//│ def [p:6^25 · p:6^2]:22 = [C [C [C (id:8^28 [p:6^25 · p:6^2 · p:6^2]:23^29)]]]
//│ def [p:6^25]:21 = [C [C [C (id:8^42 [p:6^25 · p:6^2]:22^43)]]]
//│ def c:10 = (fun x:14 -> case x:14^20 of {
//│ 	C a:15 => case a:15^21 of {
//│ 		C b:16 => (c:10^22 b:16^23)}})
//│ def id:8 = (fun y:13 -> (id2:7^10 y:13^11))
//│ def id2:7 = (fun z:12 -> z:12^8)
//│ def id3:6 = (fun d:11 -> d:11^6)
//│ def p:9 = [C [C [C (id:8^14 p:9^15)]]]
//│ <<<<<<< expanded program <<<<<<<

:ns
fun id(k) = k
fun id1(x) = id(x)
fun id2(y) = y
fun id3(z) = z
let rec p = C(C(C(id7(C(C(id1(p)))))))
fun c(xx) = if xx is
    C(a) then c(a)
fun id4(k) = k
fun id5(j) = j
fun id6(l) = l
fun id7(i) = i
id6(id4)(c)(id5(id2)(id3(p)))
//│ |#fun| |id|(|k|)| |#=| |k|↵|#fun| |id1|(|x|)| |#=| |id|(|x|)|↵|#fun| |id2|(|y|)| |#=| |y|↵|#fun| |id3|(|z|)| |#=| |z|↵|#let| |#rec| |p| |#=| |C|(|C|(|C|(|id7|(|C|(|C|(|id1|(|p|)|)|)|)|)|)|)|↵|#fun| |c|(|xx|)| |#=| |#if| |xx| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |id4|(|k|)| |#=| |k|↵|#fun| |id5|(|j|)| |#=| |j|↵|#fun| |id6|(|l|)| |#=| |l|↵|#fun| |id7|(|i|)| |#=| |i|↵|id6|(|id4|)|(|c|)|(|id5|(|id2|)|(|id3|(|p|)|)|)|
//│ Parsed: {fun id = k, => k; fun id1 = x, => id (x,); fun id2 = y, => y; fun id3 = z, => z; let rec p = C (C (C (id7 (C (C (id1 (p,),),),),),),); fun c = xx, => if xx is ‹(C (a,)) then c (a,)›; fun id4 = k, => k; fun id5 = j, => j; fun id6 = l, => l; fun id7 = i, => i; id6 (id4,) (c,) (id5 (id2,) (id3 (p,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (((id6:14^35 id4:12^36) c:11^38) ((id5:13^40 id2:8^41) (id3:9^43 p:10^44)))
//│ def c:11 = (fun xx:20 -> case xx:20^21 of {
//│ 	C a:21 => (c:11^22 a:21^23)})
//│ def id:6 = (fun k:16 -> k:16^1)
//│ def id1:7 = (fun x:17 -> (id:6^3 x:17^4))
//│ def id2:8 = (fun y:18 -> y:18^7)
//│ def id3:9 = (fun z:19 -> z:19^9)
//│ def id4:12 = (fun k:22 -> k:22^27)
//│ def id5:13 = (fun j:23 -> j:23^29)
//│ def id6:14 = (fun l:24 -> l:24^31)
//│ def id7:15 = (fun i:25 -> i:25^33)
//│ def p:10 = [C [C [C (id7:15^11 [C [C (id1:7^12 p:10^13)]])]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(C(16'17_callres))) <: 18'a
//│ 	[-p:10^13 · +id1:7^12 · +id:6^3 · -id:6^3 · -id1:7^12 · +id7:15^11 · -id7:15^11 · -p:10^13 · +id1:7^12 · +id:6^3 · -id:6^3 · -id1:7^12 · +id7:15^11 · -id7:15^11 · -p:10^44 · +id3:9^43 · -id3:9^43 · +id5:13^40 · -id5:13^40 · +id2:8^41 · -id2:8^41 · +id5:13^40 · -id5:13^40 · +id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22]  --->  [-p:10^13 · +id1:7^12 · +id:6^3 · -id:6^3 · -id1:7^12 · +id7:15^11 · -id7:15^11 · -p:10^44 · +id3:9^43 · -id3:9^43 · +id5:13^40 · -id5:13^40 · +id2:8^41 · -id2:8^41 · +id5:13^40 · -id5:13^40 · +id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [p:10^44 · p:10^13 · p:10^13] --> [p:10^44 · p:10^13]
//│ [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22] --> [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [id3:9^43] ---> [id3:9^43] (hopeless to continue)
//│ [id2:8^41] ---> [id2:8^41] (hopeless to continue)
//│ [c:11^38]
//│ 	[c:11^38 · c:11^22]
//│ 		[c:11^38 · c:11^22 · c:11^22]
//│ 			[c:11^38 · c:11^22 · c:11^22 · c:11^22]
//│ 				[c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]
//│ 					[c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]
//│ 						[c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]
//│ 							[c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]
//│ 								[c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]
//│ 									[c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22] ---> [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22] (only one)
//│ [p:10^44]
//│ 	[p:10^44 · p:10^13]
//│ 		[p:10^44 · p:10^13 · p:10^13] ---> [p:10^44 · p:10^13] (only one)
//│ 		[p:10^44 · p:10^13 · id7:15^11] ---> [id7:15^11] (hopeless to continue)
//│ 		[p:10^44 · p:10^13 · id1:7^12] ---> [id1:7^12] (hopeless to continue)
//│ 	[p:10^44 · id7:15^11] ---> [id7:15^11] (hopeless to continue)
//│ 	[p:10^44 · id1:7^12] ---> [id1:7^12] (hopeless to continue)
//│ [id5:13^40] ---> [id5:13^40] (hopeless to continue)
//│ [id6:14^35] ---> [id6:14^35] (hopeless to continue)
//│ [id4:12^36] ---> [id4:12^36] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (((id6:6^122 id4:12^123) [c:11^38]:26^125) ((id5:15^127 id2:14^128) (id3:9^130 [p:10^44]:35^131)))
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:34 = (fun xx:59 -> case xx:59^116 of {
//│ 	C a:60 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:30^117 a:60^118)})
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:33 = (fun xx:49 -> case xx:49^76 of {
//│ 	C a:50 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:34^77 a:50^78)})
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:32 = (fun xx:43 -> case xx:43^48 of {
//│ 	C a:44 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:33^49 a:44^50)})
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:31 = (fun xx:57 -> case xx:57^110 of {
//│ 	C a:58 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:32^111 a:58^112)})
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:30 = (fun xx:45 -> case xx:45^54 of {
//│ 	C a:46 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:31^55 a:46^56)})
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22]:29 = (fun xx:47 -> case xx:47^60 of {
//│ 	C a:48 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:30^61 a:48^62)})
//│ def [c:11^38 · c:11^22 · c:11^22]:28 = (fun xx:53 -> case xx:53^88 of {
//│ 	C a:54 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22]:29^89 a:54^90)})
//│ def [c:11^38 · c:11^22]:27 = (fun xx:55 -> case xx:55^104 of {
//│ 	C a:56 => ([c:11^38 · c:11^22 · c:11^22]:28^105 a:56^106)})
//│ def [c:11^38]:26 = (fun xx:51 -> case xx:51^82 of {
//│ 	C a:52 => ([c:11^38 · c:11^22]:27^83 a:52^84)})
//│ def [p:10^44 · p:10^13]:36 = [C [C [C (id7:8^66 [C [C (id1:7^67 [p:10^44 · p:10^13]:36^68)]])]]]
//│ def [p:10^44]:35 = [C [C [C (id7:8^94 [C [C (id1:7^95 [p:10^44 · p:10^13]:36^96)]])]]]
//│ def c:10 = (fun xx:20 -> case xx:20^24 of {
//│ 	C a:21 => (c:10^25 a:21^26)})
//│ def id:13 = (fun k:23 -> k:23^42)
//│ def id1:7 = (fun x:17 -> (id:13^16 x:17^17))
//│ def id2:14 = (fun y:24 -> y:24^44)
//│ def id3:9 = (fun z:19 -> z:19^22)
//│ def id4:12 = (fun k:22 -> k:22^40)
//│ def id5:15 = (fun j:25 -> j:25^46)
//│ def id6:6 = (fun l:16 -> l:16^14)
//│ def id7:8 = (fun i:18 -> i:18^20)
//│ def p:11 = [C [C [C (id7:8^30 [C [C (id1:7^31 p:11^32)]])]]]
//│ <<<<<<< expanded program <<<<<<<

_LUMBERHACK_ERROR
fun id(x) = if x is
    ID(b) then b
    C(a) then id(ID(x))
let p = C(p)
fun c(y) = if y is
    C(aa) then c(aa)
c(id(p))
//│ |_LUMBERHACK_ERROR|↵|#fun| |id|(|x|)| |#=| |#if| |x| |is|→|ID|(|b|)| |#then| |b|↵|C|(|a|)| |#then| |id|(|ID|(|x|)|)|←|↵|#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|y|)| |#=| |#if| |y| |is|→|C|(|aa|)| |#then| |c|(|aa|)|←|↵|c|(|id|(|p|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun id = x, => if x is ‹(ID (b,)) then b; (C (a,)) then id (ID (x,),)›; let p = C (p,); fun c = y, => if y is ‹(C (aa,)) then c (aa,)›; c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:8^17 (id:6^18 p:7^19))
//│ def c:8 = (fun y:12 -> case y:12^11 of {
//│ 	C aa:13 => (c:8^12 aa:13^13)})
//│ def id:6 = (fun x:9 -> case x:9^1 of {
//│ 	ID b:10 => b:10^2
//│ 	| C a:11 => (id:6^3 [ID x:9^4])})
//│ def p:7 = [C p:7^9]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error ID(3'x) <: Destruct(C(9'aa))
//│ !!!!!!ERROR!!!!!!
