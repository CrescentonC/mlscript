:NewParser
:ParseOnly

// FIXME: wrong output: recursive calls should not only replace the identifier,
// but also the strategy (on more than one use scenarios)
// at this example the `recursive` map stores the actual type (which should have the concrete exprid), so
// to fix the rewrite for this example should be simple ------ but what about if the producer is not concrete,
// but another type variable?
let t = T(K, T(N, L, L), T(N, L, L))
fun c(x) = if x is
    T(n, l, r) then T(
        (if n is
            K then KK
            N then NN
        ),
        c(l),
        c(r)
    )
    L then LL
c(t)
//│ |#let| |t| |#=| |T|(|K|,| |T|(|N|,| |L|,| |L|)|,| |T|(|N|,| |L|,| |L|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|T|(|n|,| |l|,| |r|)| |#then| |T|(|→|(|#if| |n| |is|→|K| |#then| |KK|↵|N| |#then| |NN|←|↵|)|,|↵|c|(|l|)|,|↵|c|(|r|)|←|↵|)|↵|L| |#then| |LL|←|↵|c|(|t|)|
//│ Parsed: {let t = T (K, T (N, L, L,), T (N, L, L,),); fun c = x, => if x is ‹(T (n, l, r,)) then T ('(' if n is ‹(K) then KK; (N) then NN›, ')', c (l,), c (r,),); (L) then LL›; c (t,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def t:1 = 10: [T 1: [K] 5: [T 2: [N] 3: [L] 4: [L]] 9: [T 6: [N] 7: [L] 8: [L]]]
//│ def c:2 = 25: fun x:3 -> 24: case 11: x:3 of {T n:4 l:5 r:6 -> 22: [T 15: case 12: n:4 of {K -> 13: [KK] | N -> 14: [NN]} 18: (16: c:2 17: l:5) 21: (19: c:2 20: r:6)] | L -> 23: [LL]}
//│ 28: (26: c:2 27: t:1)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ------- defInstance -------
//│ t:1^27 ⋅ ɛ ==> c:2^26 ⋅ c:2^19 ⋅ c:2^16 ⋅ ɛ:
//│ 	7: [L]  <-->  24: case x:3 of {T n:4 l:5 r:6 -> [T case n:4 of {K -> [KK] | N -> [NN]} (c:2 l:5) (c:2 r:6)] | L -> [LL]}
//│ t:1^27 ⋅ ɛ ==> c:2^26 ⋅ c:2^16 ⋅ c:2^16 ⋅ ɛ:
//│ 	3: [L]  <-->  24: case x:3 of {T n:4 l:5 r:6 -> [T case n:4 of {K -> [KK] | N -> [NN]} (c:2 l:5) (c:2 r:6)] | L -> [LL]}
//│ t:1^27 ⋅ ɛ ==> c:2^26 ⋅ c:2^16 ⋅ ɛ:
//│ 	2: [N]  <-->  15: case n:4 of {K -> [KK] | N -> [NN]}
//│ 	5: [T [N] [L] [L]]  <-->  24: case x:3 of {T n:4 l:5 r:6 -> [T case n:4 of {K -> [KK] | N -> [NN]} (c:2 l:5) (c:2 r:6)] | L -> [LL]}
//│ t:1^27 ⋅ ɛ ==> c:2^26 ⋅ c:2^19 ⋅ c:2^19 ⋅ ɛ:
//│ 	8: [L]  <-->  24: case x:3 of {T n:4 l:5 r:6 -> [T case n:4 of {K -> [KK] | N -> [NN]} (c:2 l:5) (c:2 r:6)] | L -> [LL]}
//│ t:1^27 ⋅ ɛ ==> c:2^26 ⋅ c:2^16 ⋅ c:2^19 ⋅ ɛ:
//│ 	4: [L]  <-->  24: case x:3 of {T n:4 l:5 r:6 -> [T case n:4 of {K -> [KK] | N -> [NN]} (c:2 l:5) (c:2 r:6)] | L -> [LL]}
//│ t:1^27 ⋅ ɛ ==> c:2^26 ⋅ c:2^19 ⋅ ɛ:
//│ 	6: [N]  <-->  15: case n:4 of {K -> [KK] | N -> [NN]}
//│ 	9: [T [N] [L] [L]]  <-->  24: case x:3 of {T n:4 l:5 r:6 -> [T case n:4 of {K -> [KK] | N -> [NN]} (c:2 l:5) (c:2 r:6)] | L -> [LL]}
//│ t:1^27 ⋅ ɛ ==> c:2^26 ⋅ ɛ:
//│ 	10: [T [K] [T [N] [L] [L]] [T [N] [L] [L]]]  <-->  24: case x:3 of {T n:4 l:5 r:6 -> [T case n:4 of {K -> [KK] | N -> [NN]} (c:2 l:5) (c:2 r:6)] | L -> [LL]}
//│ 	1: [K]  <-->  15: case n:4 of {K -> [KK] | N -> [NN]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def t:1 = [T [K] [T [N] [L] [L]] [T [N] [L] [L]]]
//│ def c:2 = fun x:3 -> case x:3 of {T n:4 l:5 r:6 -> [T case n:4 of {K -> [KK] | N -> [NN]} (c:2 l:5) (c:2 r:6)] | L -> [LL]}
//│ def c'2'26:7 = fun x:3 -> x:3
//│ def c'2'26_c'2'16:9 = fun x:3 -> x:3
//│ def c'2'26_c'2'19_c'2'19:12 = fun x:3 -> x:3
//│ def c'2'26_c'2'16_c'2'19:14 = fun x:3 -> x:3
//│ def c'2'26_c'2'16_c'2'16:13 = fun x:3 -> x:3
//│ def c'2'26_c'2'19_c'2'16:11 = fun x:3 -> x:3
//│ def t'1'27:8 = 
//│ 	let n:4 = [KK] in 
//│ 	let l:5 = 
//│ 		let n:4 = [NN] in 
//│ 		let l:5 = [LL] in 
//│ 		let r:6 = [LL] in [T n:4 (c'2'26_c'2'16_c'2'16:13 l:5) (c'2'26_c'2'16_c'2'19:14 r:6)] 
//│ 	in 
//│ 	let r:6 = 
//│ 		let n:4 = [NN] in 
//│ 		let l:5 = [LL] in 
//│ 		let r:6 = [LL] in [T n:4 (c'2'26_c'2'19_c'2'16:11 l:5) (c'2'26_c'2'19_c'2'19:12 r:6)] 
//│ 	in [T n:4 (c'2'26_c'2'16:9 l:5) (c'2'26_c'2'19:10 r:6)]
//│ def c'2'26_c'2'19:10 = fun x:3 -> x:3
//│ (c'2'26:7 t'1'27:8)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


// similar as above
let aa = T(N, L, L)
let bb = T(N, L, L)
let t = T(K, aa, bb)
fun c(x) = if x is
    T(n, l, r) then T(
        (if n is
            K then KK
            N then NN
        ),
        c(l),
        c(r)
    )
    L then LL
c(t)
//│ |#let| |aa| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |bb| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |t| |#=| |T|(|K|,| |aa|,| |bb|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|T|(|n|,| |l|,| |r|)| |#then| |T|(|→|(|#if| |n| |is|→|K| |#then| |KK|↵|N| |#then| |NN|←|↵|)|,|↵|c|(|l|)|,|↵|c|(|r|)|←|↵|)|↵|L| |#then| |LL|←|↵|c|(|t|)|
//│ Parsed: {let aa = T (N, L, L,); let bb = T (N, L, L,); let t = T (K, aa, bb,); fun c = x, => if x is ‹(T (n, l, r,)) then T ('(' if n is ‹(K) then KK; (N) then NN›, ')', c (l,), c (r,),); (L) then LL›; c (t,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def aa:1 = 4: [T 1: [N] 2: [L] 3: [L]]
//│ def bb:2 = 8: [T 5: [N] 6: [L] 7: [L]]
//│ def t:3 = 12: [T 9: [K] 10: aa:1 11: bb:2]
//│ def c:4 = 27: fun x:5 -> 26: case 13: x:5 of {T n:6 l:7 r:8 -> 24: [T 17: case 14: n:6 of {K -> 15: [KK] | N -> 16: [NN]} 20: (18: c:4 19: l:7) 23: (21: c:4 22: r:8)] | L -> 25: [LL]}
//│ 30: (28: c:4 29: t:3)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ------- defInstance -------
//│ t:3^29 ⋅ ɛ ==> c:4^28 ⋅ ɛ:
//│ 	12: [T [K] aa:1 bb:2]  <-->  26: case x:5 of {T n:6 l:7 r:8 -> [T case n:6 of {K -> [KK] | N -> [NN]} (c:4 l:7) (c:4 r:8)] | L -> [LL]}
//│ 	9: [K]  <-->  17: case n:6 of {K -> [KK] | N -> [NN]}
//│ t:3^29 ⋅ aa:1^10 ⋅ ɛ ==> c:4^28 ⋅ c:4^18 ⋅ c:4^21 ⋅ ɛ:
//│ 	3: [L]  <-->  26: case x:5 of {T n:6 l:7 r:8 -> [T case n:6 of {K -> [KK] | N -> [NN]} (c:4 l:7) (c:4 r:8)] | L -> [LL]}
//│ t:3^29 ⋅ bb:2^11 ⋅ ɛ ==> c:4^28 ⋅ c:4^21 ⋅ c:4^18 ⋅ ɛ:
//│ 	6: [L]  <-->  26: case x:5 of {T n:6 l:7 r:8 -> [T case n:6 of {K -> [KK] | N -> [NN]} (c:4 l:7) (c:4 r:8)] | L -> [LL]}
//│ t:3^29 ⋅ bb:2^11 ⋅ ɛ ==> c:4^28 ⋅ c:4^21 ⋅ ɛ:
//│ 	5: [N]  <-->  17: case n:6 of {K -> [KK] | N -> [NN]}
//│ 	8: [T [N] [L] [L]]  <-->  26: case x:5 of {T n:6 l:7 r:8 -> [T case n:6 of {K -> [KK] | N -> [NN]} (c:4 l:7) (c:4 r:8)] | L -> [LL]}
//│ t:3^29 ⋅ aa:1^10 ⋅ ɛ ==> c:4^28 ⋅ c:4^18 ⋅ ɛ:
//│ 	1: [N]  <-->  17: case n:6 of {K -> [KK] | N -> [NN]}
//│ 	4: [T [N] [L] [L]]  <-->  26: case x:5 of {T n:6 l:7 r:8 -> [T case n:6 of {K -> [KK] | N -> [NN]} (c:4 l:7) (c:4 r:8)] | L -> [LL]}
//│ t:3^29 ⋅ aa:1^10 ⋅ ɛ ==> c:4^28 ⋅ c:4^18 ⋅ c:4^18 ⋅ ɛ:
//│ 	2: [L]  <-->  26: case x:5 of {T n:6 l:7 r:8 -> [T case n:6 of {K -> [KK] | N -> [NN]} (c:4 l:7) (c:4 r:8)] | L -> [LL]}
//│ t:3^29 ⋅ bb:2^11 ⋅ ɛ ==> c:4^28 ⋅ c:4^21 ⋅ c:4^21 ⋅ ɛ:
//│ 	7: [L]  <-->  26: case x:5 of {T n:6 l:7 r:8 -> [T case n:6 of {K -> [KK] | N -> [NN]} (c:4 l:7) (c:4 r:8)] | L -> [LL]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def aa:1 = [T [N] [L] [L]]
//│ def bb:2 = [T [N] [L] [L]]
//│ def t:3 = [T [K] aa:1 bb:2]
//│ def c:4 = fun x:5 -> case x:5 of {T n:6 l:7 r:8 -> [T case n:6 of {K -> [KK] | N -> [NN]} (c:4 l:7) (c:4 r:8)] | L -> [LL]}
//│ def c'4'28_c'4'18:11 = fun x:5 -> x:5
//│ def c'4'28_c'4'21_c'4'18:14 = fun x:5 -> x:5
//│ def c'4'28_c'4'21_c'4'21:15 = fun x:5 -> x:5
//│ def c'4'28:9 = fun x:5 -> x:5
//│ def t'3'29_aa'1'10:16 = 
//│ 	let n:6 = [NN] in 
//│ 	let l:7 = [LL] in 
//│ 	let r:8 = [LL] in [T n:6 (c'4'28_c'4'18_c'4'18:17 l:7) (c'4'28_c'4'18_c'4'21:18 r:8)]
//│ def c'4'28_c'4'18_c'4'21:18 = fun x:5 -> x:5
//│ def c'4'28_c'4'18_c'4'18:17 = fun x:5 -> x:5
//│ def t'3'29:10 = 
//│ 	let n:6 = [KK] in 
//│ 	let l:7 = t'3'29_aa'1'10:16 in 
//│ 	let r:8 = t'3'29_bb'2'11:13 in [T n:6 (c'4'28_c'4'18:11 l:7) (c'4'28_c'4'21:12 r:8)]
//│ def c'4'28_c'4'21:12 = fun x:5 -> x:5
//│ def t'3'29_bb'2'11:13 = 
//│ 	let n:6 = [NN] in 
//│ 	let l:7 = [LL] in 
//│ 	let r:8 = [LL] in [T n:6 (c'4'28_c'4'21_c'4'18:14 l:7) (c'4'28_c'4'21_c'4'21:15 r:8)]
//│ (c'4'28:9 t'3'29:10)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<



// the `p · p` is never touched (checked) by the typer, so no path leads to it, and no recusive map from it
let p = C(p)
fun c(x) = if C(x) is
    C(a) then c(a)
c(p)
//│ |#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |C|(|x|)| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|c|(|p|)|
//│ Parsed: {let p = C (p,); fun c = x, => if C (x,) is ‹(C (a,)) then c (a,)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:1 = 2: [C 1: p:1]
//│ def c:2 = 9: fun x:3 -> 8: case 4: [C 3: x:3] of {C a:4 -> 7: (5: c:2 6: a:4)}
//│ 12: (10: c:2 11: p:1)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((p:1^11 ⋅ ɛ, C((p:1^1 ⋅ ɛ, 0'p))), (c:2^10 ⋅ c:2^5 ⋅ ɛ, 2'x)) :::: ((p:1^11 ⋅ ɛ, C((p:1^1 ⋅ ɛ, 0'p))), (c:2^10 ⋅ ɛ, 2'x))
//│ ------- defInstance -------
//│ ɛ ==> ɛ:
//│ 	4: [C x:3]  <-->  8: case [C x:3] of {C a:4 -> (c:2 a:4)}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:1 = [C p:1]
//│ def c:2 = fun x:3 -> case [C x:3] of {C a:4 -> (c:2 a:4)}
//│ def p'1'11:7 = [C p'1'11_p'1'1:8]
//│ def p'1'11_p'1'1:8 = [C p'1'11_p'1'1_p'1'1:9]
//│ def p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:15 = [C p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:16]
//│ def p'1'11_p'1'1_p'1'1_p'1'1:10 = [C p'1'11_p'1'1_p'1'1_p'1'1_p'1'1:11]
//│ def c'2'10_c'2'5:6 = fun x:3 -> 
//│ 	let a:4 = x:3 in (c'2'10_c'2'5:6 a:4)
//│ def p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:12 = [C p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:13]
//│ def p'1'11_p'1'1_p'1'1_p'1'1_p'1'1:11 = [C p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:12]
//│ def p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:14 = [C p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:15]
//│ def p'1'11_p'1'1_p'1'1:9 = [C p'1'11_p'1'1_p'1'1_p'1'1:10]
//│ def p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:18 = "RECURSE_TOO_LONG"
//│ def p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:13 = [C p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:14]
//│ def p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:16 = [C p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:17]
//│ def p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:17 = [C p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:18]
//│ def c'2'10:5 = fun x:3 -> 
//│ 	let a:4 = x:3 in (c'2'10_c'2'5:6 a:4)
//│ (c'2'10:5 p'1'11:7)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<

// the `p · p` is never touched (checked) by the typer, so no path leads to it, and no recusive map from it
let rec p = C(p)
fun c(x) = if x is
    C(a) then a
fun main(y) = c(p)
main(0)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |a|←|↵|#fun| |main|(|y|)| |#=| |c|(|p|)|↵|main|(|0|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then a›; fun main = y, => c (p,); main (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:1 = 2: [C 1: p:1]
//│ def c:2 = 6: fun x:4 -> 5: case 3: x:4 of {C a:5 -> 4: a:5}
//│ def main:3 = 10: fun y:6 -> 9: (7: c:2 8: p:1)
//│ 13: (11: main:3 12: 0)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ------- defInstance -------
//│ p:1^8 ⋅ ɛ ==> c:2^7 ⋅ ɛ:
//│ 	2: [C p:1]  <-->  5: case x:4 of {C a:5 -> a:5}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:1 = [C p:1]
//│ def c:2 = fun x:4 -> case x:4 of {C a:5 -> a:5}
//│ def main:3 = fun y:6 -> (c:2 p:1)
//│ def main'3'11_c'2'7:8 = fun x:4 -> x:4
//│ def main'3'11_p'1'8_p'1'1_p'1'1:11 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1:12]
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:16 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:17]
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1:13 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:14]
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:20 = "RECURSE_TOO_LONG"
//│ def main'3'11_p'1'8_p'1'1:10 = [C main'3'11_p'1'8_p'1'1_p'1'1:11]
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:18 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:19]
//│ def main'3'11_p'1'8:9 = 
//│ 	let a:5 = main'3'11_p'1'8_p'1'1:10 in a:5
//│ def main'3'11:7 = fun y:6 -> (main'3'11_c'2'7:8 main'3'11_p'1'8:9)
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1:12 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1:13]
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:15 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:16]
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:17 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:18]
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:19 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:20]
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:14 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:15]
//│ (main'3'11:7 0)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<



// NOTE: push in problem
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
let l = C(K, l)
fun ff(x) = if x is
    K then T
map(ff, l)
//│ |#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |l|)|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|←|↵|map|(|ff|,| |l|)|
//│ Parsed: {fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; let l = C (K, l,); fun ff = x, => if x is ‹(K) then T›; map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:1 = 14: fun f:4 -> 13: fun ls:5 -> 12: case 1: ls:5 of {C h:6 t:7 -> 10: [C 4: (2: f:4 3: h:6) 9: (7: (5: map:1 6: f:4) 8: t:7)] | N -> 11: [N]}
//│ def l:2 = 17: [C 15: [K] 16: l:2]
//│ def ff:3 = 21: fun x:8 -> 20: case 18: x:8 of {K -> 19: [T]}
//│ 26: (24: (22: map:1 23: ff:3) 25: l:2)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (
//│   (l:2^25 ⋅ l:2^16 ⋅ l:2^16 ⋅ ɛ, C((ɛ, K()), (l:2^16 ⋅ ɛ, 1'l))),
//│   (map:1^22 ⋅ map:1^5 ⋅ map:1^5 ⋅ ɛ, 4'ls)
//│ ) :::: ((l:2^25 ⋅ l:2^16 ⋅ ɛ, C((ɛ, K()), (l:2^16 ⋅ ɛ, 1'l))), (map:1^22 ⋅ map:1^5 ⋅ ɛ, 4'ls))
//│ ((ff:3^23 ⋅ ɛ, (ɛ, 11'x) => ((ɛ, 12'20_matchres))), (map:1^22 ⋅ map:1^5 ⋅ map:1^5 ⋅ ɛ, 3'f)) :::: ((ff:3^23 ⋅ ɛ, (ɛ, 11'x) => ((ɛ, 12'20_matchres))), (map:1^22 ⋅ map:1^5 ⋅ ɛ, 3'f))
//│ ------- defInstance -------
//│ l:2^25 ⋅ l:2^16 ⋅ ɛ ==> map:1^22 ⋅ map:1^5 ⋅ ɛ:
//│ 	17: [C [K] l:2]  <-->  12: case ls:5 of {C h:6 t:7 -> [C (f:4 h:6) ((map:1 f:4) t:7)] | N -> [N]}
//│ l:2^25 ⋅ ɛ ==> ff:3^23 ⋅ ɛ:
//│ 	15: [K]  <-->  20: case x:8 of {K -> [T]}
//│ l:2^25 ⋅ l:2^16 ⋅ ɛ ==> ff:3^23 ⋅ ɛ:
//│ 	15: [K]  <-->  20: case x:8 of {K -> [T]}
//│ l:2^25 ⋅ ɛ ==> map:1^22 ⋅ ɛ:
//│ 	17: [C [K] l:2]  <-->  12: case ls:5 of {C h:6 t:7 -> [C (f:4 h:6) ((map:1 f:4) t:7)] | N -> [N]}
//│ map:1^22 ⋅ map:1^5 ⋅ l:2^25 ⋅ ɛ ==> map:1^22 ⋅ ff:3^23 ⋅ ɛ:
//│ 	15: [K]  <-->  20: case x:8 of {K -> [T]}
//│ map:1^22 ⋅ l:2^25 ⋅ l:2^16 ⋅ ɛ ==> map:1^22 ⋅ map:1^5 ⋅ ff:3^23 ⋅ ɛ:
//│ 	15: [K]  <-->  20: case x:8 of {K -> [T]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def map:1 = fun f:4 -> fun ls:5 -> case ls:5 of {C h:6 t:7 -> [C (f:4 h:6) ((map:1 f:4) t:7)] | N -> [N]}
//│ def l:2 = [C [K] l:2]
//│ def ff:3 = fun x:8 -> case x:8 of {K -> [T]}
//│ def map'1'22_map'1'5:12 = fun f:4 -> fun ls:5 -> ls:5
//│ def map'1'22:9 = fun f:4 -> fun ls:5 -> ls:5
//│ def l'2'25_l'2'16:13 = 
//│ 	let h:6 = [T] in 
//│ 	let t:7 = l'2'25_l'2'16:13 in [C (f:4 h:6) ((map'1'22_map'1'5:12 f:4) t:7)]
//│ def l'2'25:11 = 
//│ 	let h:6 = [T] in 
//│ 	let t:7 = l'2'25_l'2'16:13 in [C (f:4 h:6) ((map'1'22_map'1'5:12 f:4) t:7)]
//│ def ff'3'23:10 = fun x:8 -> x:8
//│ ((map'1'22:9 ff'3'23:10) l'2'25:11)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<

// NOTE: only first head is handled
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
fun ff(x) = if x is
    K then T
    KK then TT
    KKKK then TTTT
let l = C(K, C(KK, C(KKKK, N)))
map(ff, l)
//│ |#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|ff|,| |l|)|
//│ Parsed: {fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; let l = C (K, C (KK, C (KKKK, N,),),); map (ff, l,)}
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: 23 19 (map:1^28 ⋅ l:3^31 ⋅ ɛ, 23) already has (
//│   map:1^28 ⋅ map:1^5 ⋅ map:1^5 ⋅ ff:2^29 ⋅ ɛ,
//│   Match(
//│     scrut = x:8^15,
//│     arms = (K, ɛ, Ctor(name = T, args = ɛ)) ⋅ (KK, ɛ, Ctor(name = TT, args = ɛ)) ⋅ (KKKK, ɛ, Ctor(name = TTTT, args = ɛ)) ⋅ ɛ
//│   )
//│ ) 
//│ 	at: mlscript.utils.package$.lastWords(package.scala:183)
//│ 	at: mlscript.lumberhack.Rewrite$.$anonfun$2$$anonfun$1$$anonfun$1(Rewrite.scala:82)
//│ 	at: scala.collection.mutable.HashMap.updateWith(HashMap.scala:154)
//│ 	at: mlscript.lumberhack.Rewrite$.$anonfun$2$$anonfun$1(Rewrite.scala:84)
//│ 	at: scala.collection.immutable.Set$Set2.foreach(Set.scala:201)
//│ 	at: mlscript.lumberhack.Rewrite$.$anonfun$2(Rewrite.scala:84)
//│ 	at: scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
//│ 	at: scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
//│ 	at: scala.collection.immutable.HashMap.foreach(HashMap.scala:1076)
//│ 	at: mlscript.lumberhack.Rewrite$.rewrite(Rewrite.scala:85)


fun rev(l1, l2) = if l1 is
    C(h, t) then rev(t, C(h, l2))
    N then l2
fun rev1(l11, l22) = if l11 is
    C(h1, t1) then rev1(t1, C(h1, l22))
    N then l22
let p = C(K, N)
rev(rev1(p, N), N)
//│ |#fun| |rev|(|l1|,| |l2|)| |#=| |#if| |l1| |is|→|C|(|h|,| |t|)| |#then| |rev|(|t|,| |C|(|h|,| |l2|)|)|↵|N| |#then| |l2|←|↵|#fun| |rev1|(|l11|,| |l22|)| |#=| |#if| |l11| |is|→|C|(|h1|,| |t1|)| |#then| |rev1|(|t1|,| |C|(|h1|,| |l22|)|)|↵|N| |#then| |l22|←|↵|#let| |p| |#=| |C|(|K|,| |N|)|↵|rev|(|rev1|(|p|,| |N|)|,| |N|)|
//│ Parsed: {fun rev = l1, l2, => if l1 is ‹(C (h, t,)) then rev (t, C (h, l2,),); (N) then l2›; fun rev1 = l11, l22, => if l11 is ‹(C (h1, t1,)) then rev1 (t1, C (h1, l22,),); (N) then l22›; let p = C (K, N,); rev (rev1 (p, N,), N,)}
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: 19 10 (rev1:2^29 ⋅ ɛ, 19) already has (
//│   rev1:2^14 ⋅ rev1:2^14 ⋅ rev:1^28 ⋅ rev:1^2 ⋅ ɛ,
//│   Match(
//│     scrut = l1:4^1,
//│     arms = (
//│       C,
//│       h:6 ⋅ t:7 ⋅ ɛ,
//│       Call(lhs = Call(lhs = rev:1^2, rhs = t:7^3), rhs = Ctor(name = C, args = h:6^5 ⋅ l2:5^6 ⋅ ɛ))
//│     ) ⋅ (N, ɛ, l2:5^9) ⋅ ɛ
//│   )
//│ ) 
//│ 	at: mlscript.utils.package$.lastWords(package.scala:183)
//│ 	at: mlscript.lumberhack.Rewrite$.$anonfun$2$$anonfun$1$$anonfun$1(Rewrite.scala:82)
//│ 	at: scala.collection.mutable.HashMap.updateWith(HashMap.scala:154)
//│ 	at: mlscript.lumberhack.Rewrite$.$anonfun$2$$anonfun$1(Rewrite.scala:84)
//│ 	at: scala.collection.immutable.Set$Set1.foreach(Set.scala:168)
//│ 	at: mlscript.lumberhack.Rewrite$.$anonfun$2(Rewrite.scala:84)
//│ 	at: scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
//│ 	at: scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
//│ 	at: scala.collection.immutable.HashMap.foreach(HashMap.scala:1076)
//│ 	at: mlscript.lumberhack.Rewrite$.rewrite(Rewrite.scala:85)


// `id2` used twice
let p = C(C(C(id2(p))))
fun c(x) = if x is
    C(a) then if a is
        C(a) then c(a)
fun id2(yy) = yy
fun id(y) = id2(y)
c(id(p))
//│ |#let| |p| |#=| |C|(|C|(|C|(|id2|(|p|)|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|a|)| |#then| |c|(|a|)|←|←|↵|#fun| |id2|(|yy|)| |#=| |yy|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|c|(|id|(|p|)|)|
//│ Parsed: {let p = C (C (C (id2 (p,),),),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (a,)) then c (a,)››; fun id2 = yy, => yy; fun id = y, => id2 (y,); c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:1 = 6: [C 5: [C 4: [C 3: (1: id2:3 2: p:1)]]]
//│ def c:2 = 14: fun x:5 -> 13: case 7: x:5 of {C a:6 -> 12: case 8: a:6 of {C a:7 -> 11: (9: c:2 10: a:7)}}
//│ def id2:3 = 16: fun yy:8 -> 15: yy:8
//│ def id:4 = 20: fun y:9 -> 19: (17: id2:3 18: y:9)
//│ 25: (21: c:2 24: (22: id:4 23: p:1))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (
//│   (
//│     p:1^23 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ,
//│     C((ɛ, C((ɛ, C((ɛ, 4'3_callres))))))
//│   ),
//│   (
//│     id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ,
//│     7'a
//│   )
//│ ) :::: (
//│   (id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ, C((ɛ, C((ɛ, C((ɛ, 4'3_callres))))))),
//│   (id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ, 7'a)
//│ )
//│ (
//│   (id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ ɛ, C((ɛ, C((ɛ, C((ɛ, 4'3_callres))))))),
//│   (id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ, 6'a)
//│ ) :::: (
//│   (p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ, C((ɛ, C((ɛ, C((ɛ, 4'3_callres))))))),
//│   (id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ ɛ, 6'a)
//│ )
//│ ------- defInstance -------
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ ɛ ==> id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ ɛ ==> id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ p:1^23 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ p:1^2 ⋅ ɛ ==> c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ p:1^2 ⋅ ɛ ==> c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ ɛ ==> c:2^21 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ ɛ ==> id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ ɛ ==> id2:3^1 ⋅ c:2^21 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> c:2^21 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ ɛ ==> id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ p:1^23 ⋅ ɛ ==> c:2^21 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ ɛ ==> id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ p:1^23 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:1 = [C [C [C (id2:3 p:1)]]]
//│ def c:2 = fun x:5 -> case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ def id2:3 = fun yy:8 -> yy:8
//│ def id:4 = fun y:9 -> (id2:3 y:9)
//│ def c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:25 = fun x:5 -> case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:26 a:7)}}
//│ def c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:23 = fun x:5 -> case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:24 a:7)}}
//│ def c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:26 = fun x:5 -> case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:27 a:7)}}
//│ def p'1'23_p'1'2_id2'3'1:19 = fun yy:8 -> yy:8
//│ def p'1'23_p'1'2_p'1'2_id2'3'1:28 = fun yy:8 -> yy:8
//│ def c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:22 = fun x:5 -> case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:23 a:7)}}
//│ def c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:24 = fun x:5 -> case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:25 a:7)}}
//│ def c'2'21_c'2'9_c'2'9_c'2'9:18 = fun x:5 -> x:5
//│ def c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:21 = fun x:5 -> case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:22 a:7)}}
//│ def p'1'23:13 = 
//│ 	let a:6 = 
//│ 		let a:7 = 
//│ 			let a:6 = (p'1'23_id2'3'1:15 p'1'23_p'1'2:16) in a:6 
//│ 		in (c'2'21_c'2'9:14 a:7) 
//│ 	in a:6
//│ def p'1'23_p'1'2:16 = 
//│ 	let a:7 = 
//│ 		let a:6 = 
//│ 			let a:7 = (p'1'23_p'1'2_id2'3'1:19 p'1'23_p'1'2_p'1'2:20) in (c'2'21_c'2'9_c'2'9_c'2'9:18 a:7) 
//│ 		in a:6 
//│ 	in (c'2'21_c'2'9_c'2'9:17 a:7)
//│ def c'2'21_c'2'9_c'2'9:17 = fun x:5 -> x:5
//│ def p'1'23_p'1'2_p'1'2:20 = 
//│ 	let a:6 = 
//│ 		let a:7 = 
//│ 			let a:6 = (p'1'23_p'1'2_p'1'2_id2'3'1:28 p'1'23_p'1'2:16) in case a:6 of {C a:7 -> (c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:21 a:7)} 
//│ 		in (c'2'21_c'2'9:14 a:7) 
//│ 	in a:6
//│ def c'2'21:10 = fun x:5 -> x:5
//│ def p'1'23_id2'3'1:15 = fun yy:8 -> yy:8
//│ def id'4'22:11 = fun y:9 -> (id'4'22_id2'3'17:12 y:9)
//│ def c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:27 = "RECURSE_TOO_LONG"
//│ def id'4'22_id2'3'17:12 = fun yy:8 -> yy:8
//│ def c'2'21_c'2'9:14 = fun x:5 -> x:5
//│ (c'2'21:10 (id'4'22:11 p'1'23:13))
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


// no polymorphism
_LUMBERHACK_ERROR
fun id(x) = x
let rec p1 = C(p1)
fun c1(a) = if a is
    C(i) then c1(i)
id(c1)(id(p1))
//│ |_LUMBERHACK_ERROR|↵|#fun| |id|(|x|)| |#=| |x|↵|#let| |#rec| |p1| |#=| |C|(|p1|)|↵|#fun| |c1|(|a|)| |#=| |#if| |a| |is|→|C|(|i|)| |#then| |c1|(|i|)|←|↵|id|(|c1|)|(|id|(|p1|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun id = x, => x; let rec p1 = C (p1,); fun c1 = a, => if a is ‹(C (i,)) then c1 (i,)›; id (c1,) (id (p1,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def id:1 = 2: fun x:4 -> 1: x:4
//│ def p1:2 = 4: [C 3: p1:2]
//│ def c1:3 = 10: fun a:5 -> 9: case 5: a:5 of {C i:6 -> 8: (6: c1:3 7: i:6)}
//│ 17: (13: (11: id:1 12: c1:3) 16: (14: id:1 15: p1:2))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: type error
//│ mlscript.lumberhack.Deforest$package$.error(Deforest.scala:9)
//│ mlscript.lumberhack.Deforest.thunk$1$1(Deforest.scala:232)
//│ mlscript.lumberhack.Deforest.handle$1$$anonfun$1(Deforest.scala:169)
//│ mlscript.lumberhack.Deforest.handle$1$$anonfun$adapted$1(Deforest.scala:169)
//│ mlscript.lumberhack.Deforest.trace(Deforest.scala:73)
//│ mlscript.lumberhack.Deforest.handle$1(Deforest.scala:169)
//│ mlscript.lumberhack.Deforest.thunk$1$1$$anonfun$2(Deforest.scala:212)
//│ scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
//│ scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
//│ scala.collection.immutable.List.foreach(List.scala:333)
//│ !!!!!!ERROR!!!!!!


fun map(ls) = if ls is
    C(hh, tt) then C(
        (if hh is
            A then B
            AA then BB
        ),
        map(tt)
    )
    N then N
fun rev(a, lss) = if lss is
    C(h, t) then rev(C(h, a), t)
    N then a
// map(rev(N, C(A, C(AA, N))))
map(rev(N, primitive))
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|hh|,| |tt|)| |#then| |C|(|→|(|#if| |hh| |is|→|A| |#then| |B|↵|AA| |#then| |BB|←|↵|)|,|↵|map|(|tt|)|←|↵|)|↵|N| |#then| |N|←|↵|#fun| |rev|(|a|,| |lss|)| |#=| |#if| |lss| |is|→|C|(|h|,| |t|)| |#then| |rev|(|C|(|h|,| |a|)|,| |t|)|↵|N| |#then| |a|←|↵|/* map(rev(N, C(A, C(AA, N))))*/|↵|map|(|rev|(|N|,| |primitive|)|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (hh, tt,)) then C ('(' if hh is ‹(A) then B; (AA) then BB›, ')', map (tt,),); (N) then N›; fun rev = a, lss, => if lss is ‹(C (h, t,)) then rev (C (h, a,), t,); (N) then a›; map (rev (N, primitive,),)}
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: 17 11 (rev:2^26 ⋅ ɛ, 17) already has (
//│   rev:2^14 ⋅ rev:2^14 ⋅ map:1^25 ⋅ map:1^6 ⋅ ɛ,
//│   Match(
//│     scrut = ls:3^1,
//│     arms = (
//│       C,
//│       hh:4 ⋅ tt:5 ⋅ ɛ,
//│       Ctor(
//│         name = C,
//│         args = Match(
//│           scrut = hh:4^2,
//│           arms = (A, ɛ, Ctor(name = B, args = ɛ)) ⋅ (AA, ɛ, Ctor(name = BB, args = ɛ)) ⋅ ɛ
//│         ) ⋅ Call(lhs = map:1^6, rhs = tt:5^7) ⋅ ɛ
//│       )
//│     ) ⋅ (N, ɛ, Ctor(name = N, args = ɛ)) ⋅ ɛ
//│   )
//│ ) 
//│ 	at: mlscript.utils.package$.lastWords(package.scala:183)
//│ 	at: mlscript.lumberhack.Rewrite$.$anonfun$2$$anonfun$1$$anonfun$1(Rewrite.scala:82)
//│ 	at: scala.collection.mutable.HashMap.updateWith(HashMap.scala:154)
//│ 	at: mlscript.lumberhack.Rewrite$.$anonfun$2$$anonfun$1(Rewrite.scala:84)
//│ 	at: scala.collection.immutable.Set$Set1.foreach(Set.scala:168)
//│ 	at: mlscript.lumberhack.Rewrite$.$anonfun$2(Rewrite.scala:84)
//│ 	at: scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
//│ 	at: scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
//│ 	at: scala.collection.immutable.HashMap.foreach(HashMap.scala:1076)
//│ 	at: mlscript.lumberhack.Rewrite$.rewrite(Rewrite.scala:85)


_LUMBERHACK_ERROR
let p = Pair(A, B)
fun c(x) = if x is
    Pair(a, b) then c(Pair(b, a))
c(p)
//│ |_LUMBERHACK_ERROR|↵|#let| |p| |#=| |Pair|(|A|,| |B|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|Pair|(|a|,| |b|)| |#then| |c|(|Pair|(|b|,| |a|)|)|←|↵|c|(|p|)|
//│ Parsed: {_LUMBERHACK_ERROR; let p = Pair (A, B,); fun c = x, => if x is ‹(Pair (a, b,)) then c (Pair (b, a,),)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:1 = 3: [Pair 1: [A] 2: [B]]
//│ def c:2 = 11: fun x:3 -> 10: case 4: x:3 of {Pair a:4 b:5 -> 9: (5: c:2 8: [Pair 6: b:5 7: a:4])}
//│ 14: (12: c:2 13: p:1)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((p:1^13 ⋅ ɛ, B()), (c:2^12 ⋅ c:2^5 ⋅ c:2^5 ⋅ ɛ, 4'b)) :::: ((p:1^13 ⋅ ɛ, B()), (c:2^12 ⋅ ɛ, 4'b))
//│ ((p:1^13 ⋅ ɛ, A()), (c:2^12 ⋅ c:2^5 ⋅ c:2^5 ⋅ ɛ, 3'a)) :::: ((p:1^13 ⋅ ɛ, A()), (c:2^12 ⋅ ɛ, 3'a))
//│ ------- defInstance -------
//│ p:1^13 ⋅ ɛ ==> c:2^12 ⋅ ɛ:
//│ 	3: [Pair [A] [B]]  <-->  10: case x:3 of {Pair a:4 b:5 -> (c:2 [Pair b:5 a:4])}
//│ ɛ ==> c:2^5 ⋅ ɛ:
//│ 	8: [Pair b:5 a:4]  <-->  10: case x:3 of {Pair a:4 b:5 -> (c:2 [Pair b:5 a:4])}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ !!!!!!ERROR!!!!!!
//│ java.lang.StackOverflowError
//│ scala.runtime.Statics.anyHash(Statics.java:127)
//│ scala.collection.mutable.HashMap.get(HashMap.scala:78)
//│ mlscript.lumberhack.Rewrite$.writeInstance$1(Rewrite.scala:108)
//│ mlscript.lumberhack.Rewrite$.mlscript$lumberhack$Rewrite$$$_$rewriteExpr$1(Rewrite.scala:181)
//│ mlscript.lumberhack.Rewrite$.mlscript$lumberhack$Rewrite$$$_$rewriteExpr$1(Rewrite.scala:185)
//│ mlscript.lumberhack.Rewrite$.mlscript$lumberhack$Rewrite$$$_$rewriteExpr$1(Rewrite.scala:159)
//│ mlscript.lumberhack.Rewrite$.mlscript$lumberhack$Rewrite$$$_$rewriteExpr$1(Rewrite.scala:185)
//│ mlscript.lumberhack.Rewrite$.mlscript$lumberhack$Rewrite$$$_$rewriteExpr$1(Rewrite.scala:159)
//│ mlscript.lumberhack.Rewrite$.mlscript$lumberhack$Rewrite$$$_$rewriteExpr$1(Rewrite.scala:185)
//│ mlscript.lumberhack.Rewrite$.mlscript$lumberhack$Rewrite$$$_$rewriteExpr$1(Rewrite.scala:159)
//│ !!!!!!ERROR!!!!!!
