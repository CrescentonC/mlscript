:NewParser
:ParseOnly

:ns
// the `p · p` is never touched (checked) by the typer, so no path leads to it, and no recusive map from it
let p = C(p)
fun c(x) = if C(x) is
    C(a) then c(a)
c(p)
//│ |#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |C|(|x|)| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|c|(|p|)|
//│ Parsed: {let p = C (p,); fun c = x, => if C (x,) is ‹(C (a,)) then c (a,)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 2: [C 1: p:6]
//│ def c:7 = 9: (fun x:8 -> 8: case 4: [C 3: x:8] of {C a:9 -> 7: (5: c:7 6: a:9)})
//│ 12: (10: c:7 11: p:6)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ C((Path(p = Normal(name = p:6^1, uid = 1) ⋅ ɛ), 0'p)) <: 2'x
//│ 	[Path(p = Normal(name = p:6^11, uid = 11) ⋅ Normal(name = c:7^10, uid = 10) ⋅ ɛ)]  <--->  [Path(
//│   p = Normal(name = p:6^11, uid = 11) ⋅ Normal(name = c:7^10, uid = 10) ⋅ Normal(name = c:7^5, uid = 5) ⋅ ɛ
//│ )]

// the `p · p` is never touched (checked) by the typer, so no path leads to it, and no recusive map from it
:ns
let rec p = C(p)
fun c(x) = if x is
    C(a) then a
fun main(y) = c(p)
main(0)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |a|←|↵|#fun| |main|(|y|)| |#=| |c|(|p|)|↵|main|(|0|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then a›; fun main = y, => c (p,); main (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 2: [C 1: p:6]
//│ def c:7 = 6: (fun x:9 -> 5: case 3: x:9 of {C a:10 -> 4: a:10})
//│ def main:8 = 10: (fun y:11 -> 9: (7: c:7 8: p:6))
//│ 13: (11: main:8 12: 0)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------



// NOTE: push in problem
:ns
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
let l = C(K, l)
fun ff(x) = if x is
    K then T
map(ff, l)
//│ |#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |l|)|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|←|↵|map|(|ff|,| |l|)|
//│ Parsed: {fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; let l = C (K, l,); fun ff = x, => if x is ‹(K) then T›; map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = 14: (fun f:9 -> 13: (fun ls:10 -> 12: case 1: ls:10 of {C h:11 t:12 -> 10: [C 4: (2: f:9 3: h:11) 9: (7: (5: map:6 6: f:9) 8: t:12)] | N -> 11: [N]}))
//│ def l:7 = 17: [C 15: [K] 16: l:7]
//│ def ff:8 = 21: (fun x:13 -> 20: case 18: x:13 of {K -> 19: [T]})
//│ 26: (24: (22: map:6 23: ff:8) 25: l:7)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ C((Path(p = ɛ), K), (Path(p = Normal(name = l:7^16, uid = 16) ⋅ ɛ), 1'l)) <: 4'ls
//│ 	[Path(
//│   p = Normal(name = l:7^16, uid = 16) ⋅ Normal(name = l:7^25, uid = 25) ⋅ Normal(name = map:6^22, uid = 22) ⋅ Normal(name = map:6^5, uid = 5) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = l:7^16, uid = 16) ⋅ Normal(name = l:7^16, uid = 16) ⋅ Normal(name = l:7^25, uid = 25) ⋅ Normal(name = map:6^22, uid = 22) ⋅ Normal(name = map:6^5, uid = 5) ⋅ Normal(name = map:6^5, uid = 5) ⋅ ɛ
//│ )]
//│ (Path(p = ɛ), 11'x) => ((Path(p = ɛ), 12'20_matchres)) <: 3'f
//│ 	[Path(
//│   p = Normal(name = ff:8^23, uid = 23) ⋅ Normal(name = map:6^22, uid = 22) ⋅ Normal(name = map:6^5, uid = 5) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = ff:8^23, uid = 23) ⋅ Normal(name = map:6^22, uid = 22) ⋅ Normal(name = map:6^5, uid = 5) ⋅ Normal(name = map:6^5, uid = 5) ⋅ ɛ
//│ )]

// NOTE: only first two is handled
:ns
_LUMBERHACK_ERROR
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
fun ff(x) = if x is
    K then T
    KK then TT
    KKKK then TTTT
let l = C(K, C(KK, C(KKKK, N)))
map(ff, l)
//│ |_LUMBERHACK_ERROR|↵|#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|ff|,| |l|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; let l = C (K, C (KK, C (KKKK, N,),),); map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = 14: (fun f:9 -> 13: (fun ls:10 -> 12: case 1: ls:10 of {C h:11 t:12 -> 10: [C 4: (2: f:9 3: h:11) 9: (7: (5: map:6 6: f:9) 8: t:12)] | N -> 11: [N]}))
//│ def ff:7 = 20: (fun x:13 -> 19: case 15: x:13 of {K -> 16: [T] | KK -> 17: [TT] | KKKK -> 18: [TTTT]})
//│ def l:8 = 27: [C 21: [K] 26: [C 22: [KK] 25: [C 23: [KKKK] 24: [N]]]]
//│ 32: (30: (28: map:6 29: ff:7) 31: l:8)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (Path(p = ɛ), 11'x) => ((Path(p = ɛ), 12'19_matchres)) <: 3'f
//│ 	[Path(
//│   p = Normal(name = ff:7^29, uid = 29) ⋅ Normal(name = map:6^28, uid = 28) ⋅ Normal(name = map:6^5, uid = 5) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = ff:7^29, uid = 29) ⋅ Normal(name = map:6^28, uid = 28) ⋅ Normal(name = map:6^5, uid = 5) ⋅ Normal(name = map:6^5, uid = 5) ⋅ ɛ
//│ )]

:ns
_LUMBERHACK_ERROR
fun rev(l1, l2) = if l1 is
    C(h, t) then rev(t, C(h, l2))
    N then l2
fun rev1(l11, l22) = if l11 is
    C(h1, t1) then rev1(t1, C(h1, l22))
    N then l22
let p = C(K, N)
rev(rev1(p, N), N)
//│ |_LUMBERHACK_ERROR|↵|#fun| |rev|(|l1|,| |l2|)| |#=| |#if| |l1| |is|→|C|(|h|,| |t|)| |#then| |rev|(|t|,| |C|(|h|,| |l2|)|)|↵|N| |#then| |l2|←|↵|#fun| |rev1|(|l11|,| |l22|)| |#=| |#if| |l11| |is|→|C|(|h1|,| |t1|)| |#then| |rev1|(|t1|,| |C|(|h1|,| |l22|)|)|↵|N| |#then| |l22|←|↵|#let| |p| |#=| |C|(|K|,| |N|)|↵|rev|(|rev1|(|p|,| |N|)|,| |N|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun rev = l1, l2, => if l1 is ‹(C (h, t,)) then rev (t, C (h, l2,),); (N) then l2›; fun rev1 = l11, l22, => if l11 is ‹(C (h1, t1,)) then rev1 (t1, C (h1, l22,),); (N) then l22›; let p = C (K, N,); rev (rev1 (p, N,), N,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def rev:6 = 12: (fun l1:9 -> 11: (fun l2:10 -> 10: case 1: l1:9 of {C h:11 t:12 -> 8: (4: (2: rev:6 3: t:12) 7: [C 5: h:11 6: l2:10]) | N -> 9: l2:10}))
//│ def rev1:7 = 24: (fun l11:13 -> 23: (fun l22:14 -> 22: case 13: l11:13 of {C h1:15 t1:16 -> 20: (16: (14: rev1:7 15: t1:16) 19: [C 17: h1:15 18: l22:14]) | N -> 21: l22:14}))
//│ def p:8 = 27: [C 25: [K] 26: [N]]
//│ 36: (34: (28: rev:6 33: (31: (29: rev1:7 30: p:8) 32: [N])) 35: [N])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ N <: 15'20_callres
//│ 	[Path(p = Normal(name = rev1:7^29, uid = 29) ⋅ Normal(name = rev1:7^14, uid = 14) ⋅ ɛ)]  <--->  [Path(
//│   p = Normal(name = rev1:7^29, uid = 29) ⋅ Normal(name = rev1:7^14, uid = 14) ⋅ Normal(name = rev1:7^14, uid = 14) ⋅ ɛ
//│ )]
//│ C((Path(p = ɛ), 12'h1), (Path(p = ɛ), 11'l22)) <: 3'l1
//│ 	[Path(
//│   p = Normal(name = rev1:7^14, uid = 14) ⋅ Normal(name = rev1:7^14, uid = 14) ⋅ Normal(name = rev1:7^29, uid = 29) ⋅ Normal(name = rev:6^28, uid = 28) ⋅ Normal(name = rev:6^2, uid = 2) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = rev1:7^14, uid = 14) ⋅ Normal(name = rev1:7^14, uid = 14) ⋅ Normal(name = rev1:7^14, uid = 14) ⋅ Normal(name = rev1:7^29, uid = 29) ⋅ Normal(name = rev:6^28, uid = 28) ⋅ Normal(name = rev:6^2, uid = 2) ⋅ Normal(name = rev:6^2, uid = 2) ⋅ ɛ
//│ )]
//│ 	[Path(
//│   p = Normal(name = rev1:7^14, uid = 14) ⋅ Normal(name = rev1:7^14, uid = 14) ⋅ Normal(name = rev1:7^14, uid = 14) ⋅ Normal(name = rev1:7^29, uid = 29) ⋅ Normal(name = rev:6^28, uid = 28) ⋅ Normal(name = rev:6^2, uid = 2) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = rev1:7^14, uid = 14) ⋅ Normal(name = rev1:7^14, uid = 14) ⋅ Normal(name = rev1:7^14, uid = 14) ⋅ Normal(name = rev1:7^14, uid = 14) ⋅ Normal(name = rev1:7^29, uid = 29) ⋅ Normal(name = rev:6^28, uid = 28) ⋅ Normal(name = rev:6^2, uid = 2) ⋅ Normal(name = rev:6^2, uid = 2) ⋅ ɛ
//│ )]
//│ C((Path(p = ɛ), 12'h1), (Path(p = ɛ), 11'l22)) <: 15'20_callres
//│ 	[Path(p = Normal(name = rev1:7^14, uid = 14) ⋅ Normal(name = rev1:7^14, uid = 14) ⋅ ɛ)]  <--->  [Path(
//│   p = Normal(name = rev1:7^14, uid = 14) ⋅ Normal(name = rev1:7^14, uid = 14) ⋅ Normal(name = rev1:7^14, uid = 14) ⋅ ɛ
//│ )]
//│ N <: 8'8_callres
//│ 	[Path(p = Normal(name = rev:6^28, uid = 28) ⋅ Normal(name = rev:6^2, uid = 2) ⋅ ɛ)]  <--->  [Path(
//│   p = Normal(name = rev:6^28, uid = 28) ⋅ Normal(name = rev:6^2, uid = 2) ⋅ Normal(name = rev:6^2, uid = 2) ⋅ ɛ
//│ )]
//│ C((Path(p = ɛ), 5'h), (Path(p = ɛ), 4'l2)) <: 8'8_callres
//│ 	[Path(p = Normal(name = rev:6^2, uid = 2) ⋅ Normal(name = rev:6^2, uid = 2) ⋅ ɛ)]  <--->  [Path(
//│   p = Normal(name = rev:6^2, uid = 2) ⋅ Normal(name = rev:6^2, uid = 2) ⋅ Normal(name = rev:6^2, uid = 2) ⋅ ɛ
//│ )]


// `id2` used twice
:ns
let p = C(C(C(id2(p))))
fun c(x) = if x is
    C(a) then if a is
        C(a) then c(a)
fun id2(yy) = yy
fun id(y) = id2(y)
c(id(p))
//│ |#let| |p| |#=| |C|(|C|(|C|(|id2|(|p|)|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|a|)| |#then| |c|(|a|)|←|←|↵|#fun| |id2|(|yy|)| |#=| |yy|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|c|(|id|(|p|)|)|
//│ Parsed: {let p = C (C (C (id2 (p,),),),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (a,)) then c (a,)››; fun id2 = yy, => yy; fun id = y, => id2 (y,); c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 6: [C 5: [C 4: [C 3: (1: id2:8 2: p:6)]]]
//│ def c:7 = 14: (fun x:10 -> 13: case 7: x:10 of {C a:11 -> 12: case 8: a:11 of {C a:12 -> 11: (9: c:7 10: a:12)}})
//│ def id2:8 = 16: (fun yy:13 -> 15: yy:13)
//│ def id:9 = 20: (fun y:14 -> 19: (17: id2:8 18: y:14))
//│ 25: (21: c:7 24: (22: id:9 23: p:6))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ C((Path(p = ɛ), C((Path(p = ɛ), C((Path(p = ɛ), 4'3_callres)))))) <: 7'a
//│ 	[Path(
//│   p = Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = c:7^21, uid = 21) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = c:7^21, uid = 21) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]
//│ 	[Path(
//│   p = Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = c:7^21, uid = 21) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = c:7^21, uid = 21) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]
//│ C((Path(p = ɛ), C((Path(p = ɛ), C((Path(p = ɛ), 4'3_callres)))))) <: 6'a
//│ 	[Path(
//│   p = Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = c:7^21, uid = 21) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = c:7^21, uid = 21) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]
//│ 	[Path(
//│   p = Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = c:7^21, uid = 21) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = c:7^21, uid = 21) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]
//│ 	[Path(
//│   p = Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = c:7^21, uid = 21) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = c:7^21, uid = 21) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]
//│ 	[Path(
//│   p = Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = c:7^21, uid = 21) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = c:7^21, uid = 21) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]
//│ 	[Path(
//│   p = Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = c:7^21, uid = 21) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^23, uid = 23) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = c:7^21, uid = 21) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]
//│ 	[Path(
//│   p = Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = c:7^21, uid = 21) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id2:8^1, uid = 1) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^22, uid = 22) ⋅ Normal(name = c:7^21, uid = 21) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]


// no polymorphism
:ns
_LUMBERHACK_ERROR
fun id(x) = x
let rec p1 = C(p1)
fun c1(a) = if a is
    C(i) then c1(i)
id(c1)(id(p1))
//│ |_LUMBERHACK_ERROR|↵|#fun| |id|(|x|)| |#=| |x|↵|#let| |#rec| |p1| |#=| |C|(|p1|)|↵|#fun| |c1|(|a|)| |#=| |#if| |a| |is|→|C|(|i|)| |#then| |c1|(|i|)|←|↵|id|(|c1|)|(|id|(|p1|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun id = x, => x; let rec p1 = C (p1,); fun c1 = a, => if a is ‹(C (i,)) then c1 (i,)›; id (c1,) (id (p1,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def id:6 = 2: (fun x:9 -> 1: x:9)
//│ def p1:7 = 4: [C 3: p1:7]
//│ def c1:8 = 10: (fun a:10 -> 9: case 5: a:10 of {C i:11 -> 8: (6: c1:8 7: i:11)})
//│ 17: (13: (11: id:6 12: c1:8) 16: (14: id:6 15: p1:7))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error
//│ !!!!!!ERROR!!!!!!

:ns
_LUMBERHACK_ERROR
fun map(ls) = if ls is
    C(hh, tt) then C(
        (if hh is
            A then B
            AA then BB
        ),
        map(tt)
    )
    N then N
fun rev(a, lss) = if lss is
    C(h, t) then rev(C(h, a), t)
    N then a
// map(rev(N, C(A, C(AA, N))))
map(rev(N, primitive))
//│ |_LUMBERHACK_ERROR|↵|#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|hh|,| |tt|)| |#then| |C|(|→|(|#if| |hh| |is|→|A| |#then| |B|↵|AA| |#then| |BB|←|↵|)|,|↵|map|(|tt|)|←|↵|)|↵|N| |#then| |N|←|↵|#fun| |rev|(|a|,| |lss|)| |#=| |#if| |lss| |is|→|C|(|h|,| |t|)| |#then| |rev|(|C|(|h|,| |a|)|,| |t|)|↵|N| |#then| |a|←|↵|/* map(rev(N, C(A, C(AA, N))))*/|↵|map|(|rev|(|N|,| |primitive|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun map = ls, => if ls is ‹(C (hh, tt,)) then C ('(' if hh is ‹(A) then B; (AA) then BB›, ')', map (tt,),); (N) then N›; fun rev = a, lss, => if lss is ‹(C (h, t,)) then rev (C (h, a,), t,); (N) then a›; map (rev (N, primitive,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = 12: (fun ls:8 -> 11: case 1: ls:8 of {C hh:9 tt:10 -> 9: [C 5: case 2: hh:9 of {A -> 3: [B] | AA -> 4: [BB]} 8: (6: map:6 7: tt:10)] | N -> 10: [N]})
//│ def rev:7 = 24: (fun a:11 -> 23: (fun lss:12 -> 22: case 13: lss:12 of {C h:13 t:14 -> 20: (18: (14: rev:7 17: [C 15: h:13 16: a:11]) 19: t:14) | N -> 21: a:11}))
//│ 31: (25: map:6 30: (28: (26: rev:7 27: [N]) 29: primitive:3))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ N <: 13'20_callres
//│ 	[Path(p = Normal(name = rev:7^26, uid = 26) ⋅ Normal(name = rev:7^14, uid = 14) ⋅ ɛ)]  <--->  [Path(
//│   p = Normal(name = rev:7^26, uid = 26) ⋅ Normal(name = rev:7^14, uid = 14) ⋅ Normal(name = rev:7^14, uid = 14) ⋅ ɛ
//│ )]
//│ C((Path(p = ɛ), 10'h), (Path(p = ɛ), 8'a)) <: 13'20_callres
//│ 	[Path(p = Normal(name = rev:7^14, uid = 14) ⋅ Normal(name = rev:7^14, uid = 14) ⋅ ɛ)]  <--->  [Path(
//│   p = Normal(name = rev:7^14, uid = 14) ⋅ Normal(name = rev:7^14, uid = 14) ⋅ Normal(name = rev:7^14, uid = 14) ⋅ ɛ
//│ )]
//│ C((Path(p = ɛ), 10'h), (Path(p = ɛ), 8'a)) <: 2'ls
//│ 	[Path(
//│   p = Normal(name = rev:7^14, uid = 14) ⋅ Normal(name = rev:7^14, uid = 14) ⋅ Normal(name = rev:7^14, uid = 14) ⋅ Normal(name = rev:7^26, uid = 26) ⋅ Normal(name = map:6^25, uid = 25) ⋅ Normal(name = map:6^6, uid = 6) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = rev:7^14, uid = 14) ⋅ Normal(name = rev:7^14, uid = 14) ⋅ Normal(name = rev:7^14, uid = 14) ⋅ Normal(name = rev:7^14, uid = 14) ⋅ Normal(name = rev:7^26, uid = 26) ⋅ Normal(name = map:6^25, uid = 25) ⋅ Normal(name = map:6^6, uid = 6) ⋅ Normal(name = map:6^6, uid = 6) ⋅ ɛ
//│ )]
//│ 	[Path(
//│   p = Normal(name = rev:7^14, uid = 14) ⋅ Normal(name = rev:7^14, uid = 14) ⋅ Normal(name = rev:7^26, uid = 26) ⋅ Normal(name = map:6^25, uid = 25) ⋅ Normal(name = map:6^6, uid = 6) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = rev:7^14, uid = 14) ⋅ Normal(name = rev:7^14, uid = 14) ⋅ Normal(name = rev:7^14, uid = 14) ⋅ Normal(name = rev:7^26, uid = 26) ⋅ Normal(name = map:6^25, uid = 25) ⋅ Normal(name = map:6^6, uid = 6) ⋅ Normal(name = map:6^6, uid = 6) ⋅ ɛ
//│ )]

:ns
_LUMBERHACK_ERROR
let p = Pair(A, B)
fun c(x) = if x is
    Pair(a, b) then c(Pair(b, a))
c(p)
//│ |_LUMBERHACK_ERROR|↵|#let| |p| |#=| |Pair|(|A|,| |B|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|Pair|(|a|,| |b|)| |#then| |c|(|Pair|(|b|,| |a|)|)|←|↵|c|(|p|)|
//│ Parsed: {_LUMBERHACK_ERROR; let p = Pair (A, B,); fun c = x, => if x is ‹(Pair (a, b,)) then c (Pair (b, a,),)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 3: [Pair 1: [A] 2: [B]]
//│ def c:7 = 11: (fun x:8 -> 10: case 4: x:8 of {Pair a:9 b:10 -> 9: (5: c:7 8: [Pair 6: b:10 7: a:9])})
//│ 14: (12: c:7 13: p:6)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ B <: 4'b
//│ 	[Path(p = Normal(name = p:6^13, uid = 13) ⋅ Normal(name = c:7^12, uid = 12) ⋅ ɛ)]  <--->  [Path(
//│   p = Normal(name = p:6^13, uid = 13) ⋅ Normal(name = c:7^12, uid = 12) ⋅ Normal(name = c:7^5, uid = 5) ⋅ Normal(name = c:7^5, uid = 5) ⋅ ɛ
//│ )]
//│ A <: 3'a
//│ 	[Path(p = Normal(name = p:6^13, uid = 13) ⋅ Normal(name = c:7^12, uid = 12) ⋅ ɛ)]  <--->  [Path(
//│   p = Normal(name = p:6^13, uid = 13) ⋅ Normal(name = c:7^12, uid = 12) ⋅ Normal(name = c:7^5, uid = 5) ⋅ Normal(name = c:7^5, uid = 5) ⋅ ɛ
//│ )]


// pushing in of auxiliary parameters
// FIXME: weird recursive
:ns
fun last(x, ys) = if ys is
    N then x
    C(h, t) then last(h, t)
fun lastDrive(xs) = if xs is
    N then None
    C(hh, tt) then Some(last(hh, tt))
lastDrive(C(1, C(2, N)))
//│ |#fun| |last|(|x|,| |ys|)| |#=| |#if| |ys| |is|→|N| |#then| |x|↵|C|(|h|,| |t|)| |#then| |last|(|h|,| |t|)|←|↵|#fun| |lastDrive|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |None|↵|C|(|hh|,| |tt|)| |#then| |Some|(|last|(|hh|,| |tt|)|)|←|↵|lastDrive|(|C|(|1|,| |C|(|2|,| |N|)|)|)|
//│ Parsed: {fun last = x, ys, => if ys is ‹(N) then x; (C (h, t,)) then last (h, t,)›; fun lastDrive = xs, => if xs is ‹(N) then None; (C (hh, tt,)) then Some (last (hh, tt,),)›; lastDrive (C (1, C (2, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def last:6 = 10: (fun x:8 -> 9: (fun ys:9 -> 8: case 1: ys:9 of {N -> 2: x:8 | C h:10 t:11 -> 7: (5: (3: last:6 4: h:10) 6: t:11)}))
//│ def lastDrive:7 = 20: (fun xs:12 -> 19: case 11: xs:12 of {N -> 12: [None] | C hh:13 tt:14 -> 18: [Some 17: (15: (13: last:6 14: hh:13) 16: tt:14)]})
//│ 27: (21: lastDrive:7 26: [C 22: 1 25: [C 23: 2 24: [N]]])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ Int <: 7'7_callres
//│ 	[Path(
//│   p = Normal(name = lastDrive:7^21, uid = 21) ⋅ Normal(name = last:6^13, uid = 13) ⋅ Normal(name = last:6^3, uid = 3) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = lastDrive:7^21, uid = 21) ⋅ Normal(name = last:6^13, uid = 13) ⋅ Normal(name = last:6^3, uid = 3) ⋅ Normal(name = last:6^3, uid = 3) ⋅ ɛ
//│ )]
//│ 	[Path(
//│   p = Normal(name = lastDrive:7^21, uid = 21) ⋅ Normal(name = last:6^13, uid = 13) ⋅ Normal(name = last:6^3, uid = 3) ⋅ Normal(name = last:6^3, uid = 3) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = lastDrive:7^21, uid = 21) ⋅ Normal(name = last:6^13, uid = 13) ⋅ Normal(name = last:6^3, uid = 3) ⋅ Normal(name = last:6^3, uid = 3) ⋅ Normal(name = last:6^3, uid = 3) ⋅ ɛ
//│ )]

:ns
fun inter(xs, ys) = if xs is
    N then ys
    C(h, t) then C(h, inter(ys, t))
inter(C(1, C(2, C(3, N))), C(9, C(8, C(7, N))))
//│ |#fun| |inter|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|N| |#then| |ys|↵|C|(|h|,| |t|)| |#then| |C|(|h|,| |inter|(|ys|,| |t|)|)|←|↵|inter|(|C|(|1|,| |C|(|2|,| |C|(|3|,| |N|)|)|)|,| |C|(|9|,| |C|(|8|,| |C|(|7|,| |N|)|)|)|)|
//│ Parsed: {fun inter = xs, ys, => if xs is ‹(N) then ys; (C (h, t,)) then C (h, inter (ys, t,),)›; inter (C (1, C (2, C (3, N,),),), C (9, C (8, C (7, N,),),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def inter:6 = 12: (fun xs:7 -> 11: (fun ys:8 -> 10: case 1: xs:7 of {N -> 2: ys:8 | C h:9 t:10 -> 9: [C 3: h:9 8: (6: (4: inter:6 5: ys:8) 7: t:10)]}))
//│ 29: (21: (13: inter:6 20: [C 14: 1 19: [C 15: 2 18: [C 16: 3 17: [N]]]]) 28: [C 22: 9 27: [C 23: 8 26: [C 24: 7 25: [N]]]])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------

:ns
_LUMBERHACK_ERROR
let add = primitive
fun idxSum(ls) = if ls is
    N then acc => 0
    C(h, t) then acc => add(acc, idxSum(t)(add(acc, 1)))
fun rev(lss, a) = if lss is
    N then a
    C(hh, tt) then rev(tt, C(hh, a))
idxSum(rev(primitive, N))(0)
//│ |_LUMBERHACK_ERROR|↵|#let| |add| |#=| |primitive|↵|#fun| |idxSum|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |acc| |=>| |0|↵|C|(|h|,| |t|)| |#then| |acc| |=>| |add|(|acc|,| |idxSum|(|t|)|(|add|(|acc|,| |1|)|)|)|←|↵|#fun| |rev|(|lss|,| |a|)| |#=| |#if| |lss| |is|→|N| |#then| |a|↵|C|(|hh|,| |tt|)| |#then| |rev|(|tt|,| |C|(|hh|,| |a|)|)|←|↵|idxSum|(|rev|(|primitive|,| |N|)|)|(|0|)|
//│ Parsed: {_LUMBERHACK_ERROR; let add = primitive; fun idxSum = ls, => if ls is ‹(N) then acc, => 0; (C (h, t,)) then acc, => add (acc, idxSum (t,) (add (acc, 1,),),)›; fun rev = lss, a, => if lss is ‹(N) then a; (C (hh, tt,)) then rev (tt, C (hh, a,),)›; idxSum (rev (primitive, N,),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def add:4 = 1: primitive:3
//│ def idxSum:7 = 20: (fun ls:9 -> 19: case 2: ls:9 of {N -> 4: (fun acc:10 -> 3: 0) | C h:11 t:12 -> 18: (fun acc:13 -> 17: (7: (5: add:4 6: acc:13) 16: (10: (8: idxSum:7 9: t:12) 15: (13: (11: add:4 12: acc:13) 14: 1))))})
//│ def rev:8 = 32: (fun lss:14 -> 31: (fun a:15 -> 30: case 21: lss:14 of {N -> 22: a:15 | C hh:16 tt:17 -> 29: (25: (23: rev:8 24: tt:17) 28: [C 26: hh:16 27: a:15])}))
//│ 41: (39: (33: idxSum:7 38: (36: (34: rev:8 35: primitive:3) 37: [N])) 40: 0)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ N <: 20'29_callres
//│ 	[Path(p = Normal(name = rev:8^34, uid = 34) ⋅ Normal(name = rev:8^23, uid = 23) ⋅ ɛ)]  <--->  [Path(
//│   p = Normal(name = rev:8^34, uid = 34) ⋅ Normal(name = rev:8^23, uid = 23) ⋅ Normal(name = rev:8^23, uid = 23) ⋅ ɛ
//│ )]
//│ C((Path(p = ɛ), 17'hh), (Path(p = ɛ), 16'a)) <: 20'29_callres
//│ 	[Path(p = Normal(name = rev:8^23, uid = 23) ⋅ Normal(name = rev:8^23, uid = 23) ⋅ ɛ)]  <--->  [Path(
//│   p = Normal(name = rev:8^23, uid = 23) ⋅ Normal(name = rev:8^23, uid = 23) ⋅ Normal(name = rev:8^23, uid = 23) ⋅ ɛ
//│ )]
//│ C((Path(p = ɛ), 17'hh), (Path(p = ɛ), 16'a)) <: 3'ls
//│ 	[Path(
//│   p = Normal(name = rev:8^23, uid = 23) ⋅ Normal(name = rev:8^23, uid = 23) ⋅ Normal(name = rev:8^34, uid = 34) ⋅ Normal(name = idxSum:7^33, uid = 33) ⋅ Normal(name = idxSum:7^8, uid = 8) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = rev:8^23, uid = 23) ⋅ Normal(name = rev:8^23, uid = 23) ⋅ Normal(name = rev:8^23, uid = 23) ⋅ Normal(name = rev:8^34, uid = 34) ⋅ Normal(name = idxSum:7^33, uid = 33) ⋅ Normal(name = idxSum:7^8, uid = 8) ⋅ Normal(name = idxSum:7^8, uid = 8) ⋅ ɛ
//│ )]
//│ 	[Path(
//│   p = Normal(name = rev:8^23, uid = 23) ⋅ Normal(name = rev:8^23, uid = 23) ⋅ Normal(name = rev:8^23, uid = 23) ⋅ Normal(name = rev:8^34, uid = 34) ⋅ Normal(name = idxSum:7^33, uid = 33) ⋅ Normal(name = idxSum:7^8, uid = 8) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = rev:8^23, uid = 23) ⋅ Normal(name = rev:8^23, uid = 23) ⋅ Normal(name = rev:8^23, uid = 23) ⋅ Normal(name = rev:8^23, uid = 23) ⋅ Normal(name = rev:8^34, uid = 34) ⋅ Normal(name = idxSum:7^33, uid = 33) ⋅ Normal(name = idxSum:7^8, uid = 8) ⋅ Normal(name = idxSum:7^8, uid = 8) ⋅ ɛ
//│ )]


// scope extrusion
:ns
fun inter(xs) = if xs is
    N then ys => ys
    C(h0, t0) then ys => if ys is
        N then N2
        C(h1, t1) then C2(add(h0,h1), inter(t0, t1))
let l1 = C(1, C(2, C(1, C(2, N))))
// let rec l2 = N
let rec l2 = C(11, N)
inter(l1, l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h0|,| |t0|)| |#then| |ys| |=>| |#if| |ys| |is|→|N| |#then| |N2|↵|C|(|h1|,| |t1|)| |#then| |C2|(|add|(|h0|,|h1|)|,| |inter|(|t0|,| |t1|)|)|←|←|↵|#let| |l1| |#=| |C|(|1|,| |C|(|2|,| |C|(|1|,| |C|(|2|,| |N|)|)|)|)|↵|/* let rec l2 = N*/|↵|#let| |#rec| |l2| |#=| |C|(|11|,| |N|)|↵|inter|(|l1|,| |l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h0, t0,)) then ys, => if ys is ‹(N) then N2; (C (h1, t1,)) then C2 (add (h0, h1,), inter (t0, t1,),)››; let l1 = C (1, C (2, C (1, C (2, N,),),),); let rec l2 = C (11, N,); inter (l1, l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def inter:6 = 20: (fun xs:9 -> 19: case 1: xs:9 of {N -> 3: (fun ys:10 -> 2: ys:10) | C h0:11 t0:12 -> 18: (fun ys:13 -> 17: case 4: ys:13 of {N -> 5: [N2] | C h1:14 t1:15 -> 16: [C2 10: (8: (6: add:4 7: h0:11) 9: h1:14) 15: (13: (11: inter:6 12: t0:12) 14: t1:15)]})})
//│ def l1:7 = 29: [C 21: 1 28: [C 22: 2 27: [C 23: 1 26: [C 24: 2 25: [N]]]]]
//│ def l2:8 = 32: [C 30: 11 31: [N]]
//│ 37: (35: (33: inter:6 34: l1:7) 36: l2:8)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------


:ns
let rec p = C(C(C(id(p))))
fun c(x) = if x is
    C(a) then if a is
        C(b) then c(b)
fun id2(z) = z
fun id(y) = id2(y)
fun id3(d) = d
c(id3(p))
//│ |#let| |#rec| |p| |#=| |C|(|C|(|C|(|id|(|p|)|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|b|)| |#then| |c|(|b|)|←|←|↵|#fun| |id2|(|z|)| |#=| |z|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|#fun| |id3|(|d|)| |#=| |d|↵|c|(|id3|(|p|)|)|
//│ Parsed: {let rec p = C (C (C (id (p,),),),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (b,)) then c (b,)››; fun id2 = z, => z; fun id = y, => id2 (y,); fun id3 = d, => d; c (id3 (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 6: [C 5: [C 4: [C 3: (1: id:9 2: p:6)]]]
//│ def c:7 = 14: (fun x:11 -> 13: case 7: x:11 of {C a:12 -> 12: case 8: a:12 of {C b:13 -> 11: (9: c:7 10: b:13)}})
//│ def id2:8 = 16: (fun z:14 -> 15: z:14)
//│ def id:9 = 20: (fun y:15 -> 19: (17: id2:8 18: y:15))
//│ def id3:10 = 22: (fun d:16 -> 21: d:16)
//│ 27: (23: c:7 26: (24: id3:10 25: p:6))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ C((Path(p = ɛ), C((Path(p = ɛ), C((Path(p = ɛ), 5'3_callres)))))) <: 7'a
//│ 	[Path(
//│   p = Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id:9^1, uid = 1) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^1, uid = 1) ⋅ Normal(name = p:6^25, uid = 25) ⋅ Normal(name = id3:10^24, uid = 24) ⋅ Normal(name = id3:10^24, uid = 24) ⋅ Normal(name = c:7^23, uid = 23) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id:9^1, uid = 1) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id:9^1, uid = 1) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^1, uid = 1) ⋅ Normal(name = p:6^2, uid = 2) ⋅ Normal(name = id:9^1, uid = 1) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id2:8^17, uid = 17) ⋅ Normal(name = id:9^1, uid = 1) ⋅ Normal(name = p:6^25, uid = 25) ⋅ Normal(name = id3:10^24, uid = 24) ⋅ Normal(name = id3:10^24, uid = 24) ⋅ Normal(name = c:7^23, uid = 23) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ Normal(name = c:7^9, uid = 9) ⋅ ɛ
//│ )]

:ns
fun id(k) = k
fun id1(x) = id(x)
fun id2(y) = y
fun id3(z) = z
let rec p = C(C(C(id7(C(C(id1(p)))))))
fun c(xx) = if xx is
    C(a) then c(a)
fun id4(k) = k
fun id5(j) = j
fun id6(l) = l
fun id7(i) = i
id6(id4)(c)(id5(id2)(id3(p)))
//│ |#fun| |id|(|k|)| |#=| |k|↵|#fun| |id1|(|x|)| |#=| |id|(|x|)|↵|#fun| |id2|(|y|)| |#=| |y|↵|#fun| |id3|(|z|)| |#=| |z|↵|#let| |#rec| |p| |#=| |C|(|C|(|C|(|id7|(|C|(|C|(|id1|(|p|)|)|)|)|)|)|)|↵|#fun| |c|(|xx|)| |#=| |#if| |xx| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |id4|(|k|)| |#=| |k|↵|#fun| |id5|(|j|)| |#=| |j|↵|#fun| |id6|(|l|)| |#=| |l|↵|#fun| |id7|(|i|)| |#=| |i|↵|id6|(|id4|)|(|c|)|(|id5|(|id2|)|(|id3|(|p|)|)|)|
//│ Parsed: {fun id = k, => k; fun id1 = x, => id (x,); fun id2 = y, => y; fun id3 = z, => z; let rec p = C (C (C (id7 (C (C (id1 (p,),),),),),),); fun c = xx, => if xx is ‹(C (a,)) then c (a,)›; fun id4 = k, => k; fun id5 = j, => j; fun id6 = l, => l; fun id7 = i, => i; id6 (id4,) (c,) (id5 (id2,) (id3 (p,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def id:6 = 2: (fun k:16 -> 1: k:16)
//│ def id1:7 = 6: (fun x:17 -> 5: (3: id:6 4: x:17))
//│ def id2:8 = 8: (fun y:18 -> 7: y:18)
//│ def id3:9 = 10: (fun z:19 -> 9: z:19)
//│ def p:10 = 20: [C 19: [C 18: [C 17: (11: id7:15 16: [C 15: [C 14: (12: id1:7 13: p:10)]])]]]
//│ def c:11 = 26: (fun xx:20 -> 25: case 21: xx:20 of {C a:21 -> 24: (22: c:11 23: a:21)})
//│ def id4:12 = 28: (fun k:22 -> 27: k:22)
//│ def id5:13 = 30: (fun j:23 -> 29: j:23)
//│ def id6:14 = 32: (fun l:24 -> 31: l:24)
//│ def id7:15 = 34: (fun i:25 -> 33: i:25)
//│ 47: (39: (37: (35: id6:14 36: id4:12) 38: c:11) 46: (42: (40: id5:13 41: id2:8) 45: (43: id3:9 44: p:10)))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ C((Path(p = ɛ), C((Path(p = ɛ), C((Path(p = ɛ), 16'17_callres)))))) <: 18'a
//│ 	[Path(
//│   p = Normal(name = p:10^13, uid = 13) ⋅ Normal(name = id1:7^12, uid = 12) ⋅ Normal(name = id:6^3, uid = 3) ⋅ Normal(name = id:6^3, uid = 3) ⋅ Normal(name = id1:7^12, uid = 12) ⋅ Normal(name = id7:15^11, uid = 11) ⋅ Normal(name = id7:15^11, uid = 11) ⋅ Normal(name = p:10^44, uid = 44) ⋅ Normal(name = id3:9^43, uid = 43) ⋅ Normal(name = id3:9^43, uid = 43) ⋅ Normal(name = id5:13^40, uid = 40) ⋅ Normal(name = id5:13^40, uid = 40) ⋅ Normal(name = id2:8^41, uid = 41) ⋅ Normal(name = id2:8^41, uid = 41) ⋅ Normal(name = id5:13^40, uid = 40) ⋅ Normal(name = id5:13^40, uid = 40) ⋅ Normal(name = id6:14^35, uid = 35) ⋅ Normal(name = id6:14^35, uid = 35) ⋅ Normal(name = id4:12^36, uid = 36) ⋅ Normal(name = id4:12^36, uid = 36) ⋅ Normal(name = id6:14^35, uid = 35) ⋅ Normal(name = id6:14^35, uid = 35) ⋅ Normal(name = c:11^38, uid = 38) ⋅ Normal(name = c:11^22, uid = 22) ⋅ Normal(name = c:11^22, uid = 22) ⋅ Normal(name = c:11^22, uid = 22) ⋅ Normal(name = c:11^22, uid = 22) ⋅ ɛ
//│ )]  <--->  [Path(
//│   p = Normal(name = p:10^13, uid = 13) ⋅ Normal(name = id1:7^12, uid = 12) ⋅ Normal(name = id:6^3, uid = 3) ⋅ Normal(name = id:6^3, uid = 3) ⋅ Normal(name = id1:7^12, uid = 12) ⋅ Normal(name = id7:15^11, uid = 11) ⋅ Normal(name = id7:15^11, uid = 11) ⋅ Normal(name = p:10^13, uid = 13) ⋅ Normal(name = id1:7^12, uid = 12) ⋅ Normal(name = id:6^3, uid = 3) ⋅ Normal(name = id:6^3, uid = 3) ⋅ Normal(name = id1:7^12, uid = 12) ⋅ Normal(name = id7:15^11, uid = 11) ⋅ Normal(name = id7:15^11, uid = 11) ⋅ Normal(name = p:10^44, uid = 44) ⋅ Normal(name = id3:9^43, uid = 43) ⋅ Normal(name = id3:9^43, uid = 43) ⋅ Normal(name = id5:13^40, uid = 40) ⋅ Normal(name = id5:13^40, uid = 40) ⋅ Normal(name = id2:8^41, uid = 41) ⋅ Normal(name = id2:8^41, uid = 41) ⋅ Normal(name = id5:13^40, uid = 40) ⋅ Normal(name = id5:13^40, uid = 40) ⋅ Normal(name = id6:14^35, uid = 35) ⋅ Normal(name = id6:14^35, uid = 35) ⋅ Normal(name = id4:12^36, uid = 36) ⋅ Normal(name = id4:12^36, uid = 36) ⋅ Normal(name = id6:14^35, uid = 35) ⋅ Normal(name = id6:14^35, uid = 35) ⋅ Normal(name = c:11^38, uid = 38) ⋅ Normal(name = c:11^22, uid = 22) ⋅ Normal(name = c:11^22, uid = 22) ⋅ Normal(name = c:11^22, uid = 22) ⋅ Normal(name = c:11^22, uid = 22) ⋅ Normal(name = c:11^22, uid = 22) ⋅ Normal(name = c:11^22, uid = 22) ⋅ Normal(name = c:11^22, uid = 22) ⋅ Normal(name = c:11^22, uid = 22) ⋅ Normal(name = c:11^22, uid = 22) ⋅ ɛ
//│ )]
