:NewParser
:ParseOnly

:ns
// the `p · p` is never touched (checked) by the typer, so no path leads to it, and no recusive map from it
let p = C(p)
fun c(x) = if C(x) is
    C(a) then c(a)
c(p)
//│ |#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |C|(|x|)| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|c|(|p|)|
//│ Parsed: {let p = C (p,); fun c = x, => if C (x,) is ‹(C (a,)) then c (a,)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:7^10 p:6^11)
//│ def c:7 = (fun x:8 -> case [C x:8^3] of {
//│ 	C a:9 => (c:7^5 a:9^6)})
//│ def p:6 = [C p:6^1]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:7^10] ---> [c:7^10] (hopeless to continue)
//│ [p:6^11] ---> [p:6^11] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (c:7^13 p:6^14)
//│ def c:7 = (fun x:8 -> case [C x:8^6] of {
//│ 	C a:9 => (c:7^8 a:9^9)})
//│ def p:6 = [C p:6^4]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 7: [C 6: x:8^6]
//│ [C x:8^6] --->
//│ 	case [C x:8^6] of {C a:9 => (c:7^8 a:9^9)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c:7^16 p:6^17)
//│ def c:7 = (fun x:8 -> let a:9 = x:8^24
//│ in (c:7^21 a:9^22))
//│ def p:6 = [C p:6^19]
//│ <<<<<<< after fusion <<<<<<<

// the `p · p` is never touched (checked) by the typer, so no path leads to it, and no recusive map from it
:ns
let rec p = C(p)
fun c(x) = if x is
    C(a) then a
fun main(y) = c(p)
main(0)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |a|←|↵|#fun| |main|(|y|)| |#=| |c|(|p|)|↵|main|(|0|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then a›; fun main = y, => c (p,); main (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (main:8^11 0)
//│ def c:7 = (fun x:9 -> case x:9^3 of {
//│ 	C a:10 => a:10^4})
//│ def main:8 = (fun y:11 -> (c:7^7 p:6^8))
//│ def p:6 = [C p:6^1]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [main:8^11] ---> [main:8^11] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (main:8^14 0)
//│ def c:7 = (fun x:9 -> case x:9^6 of {
//│ 	C a:10 => a:10^7})
//│ def main:8 = (fun y:11 -> (c:7^10 p:6^11))
//│ def p:6 = [C p:6^4]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 5: [C 4: p:6^4]
//│ [C p:6^4] --->
//│ 	case x:9^6 of {C a:10 => a:10^7}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (main:8^17 0)
//│ def c:7 = (fun x:9 -> x:9^23)
//│ def main:8 = (fun y:11 -> (c:7^25 p:6^26))
//│ def p:6 = let a:10 = p:6^21
//│ in a:10^20
//│ <<<<<<< after fusion <<<<<<<



// NOTE: push in problem
:ns
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
let l = C(K, l)
fun ff(x) = if x is
    K then T
map(ff, l)
//│ |#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |l|)|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|←|↵|map|(|ff|,| |l|)|
//│ Parsed: {fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; let l = C (K, l,); fun ff = x, => if x is ‹(K) then T›; map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((map:6^22 ff:8^23) l:7^25)
//│ def ff:8 = (fun x:13 -> case x:13^18 of {
//│ 	K => [T]})
//│ def l:7 = [C [K] l:7^16]
//│ def map:6 = (fun f:9 -> (fun ls:10 -> case ls:10^1 of {
//│ 	C h:11 t:12 => [C (f:9^2 h:11^3) ((map:6^5 f:9^6) t:12^8)]
//│ 	| N => [N]}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(K, 1'l_7^16) <: 4'ls
//│ 	[-l:7^16 · -l:7^16 · -l:7^25 · +map:6^22 · +map:6^5 · +map:6^5]  --->  [-l:7^16 · -l:7^25 · +map:6^22 · +map:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [map:6^22 · map:6^5 · map:6^5] --> [map:6^22 · map:6^5]
//│ [l:7^25 · l:7^16 · l:7^16] --> [l:7^25 · l:7^16]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [ff:8^23] ---> [ff:8^23] (hopeless to continue)
//│ [l:7^25]
//│ 	[l:7^25 · l:7^16]
//│ 		[l:7^25 · l:7^16 · l:7^16] ---> [l:7^25 · l:7^16] (only one)
//│ [map:6^22]
//│ 	[map:6^22 · map:6^5]
//│ 		[map:6^22 · map:6^5 · map:6^5] ---> [map:6^22 · map:6^5] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([map:6^22]:14^61 ff:8^62) [l:7^25]:16^64)
//│ def [l:7^25 · l:7^16]:17 = [C [K] [l:7^25 · l:7^16]:17^28]
//│ def [l:7^25]:16 = [C [K] [l:7^25 · l:7^16]:17^45]
//│ def [map:6^22 · map:6^5]:15 = (fun f:22 -> (fun ls:23 -> case ls:23^47 of {
//│ 	C h:24 t:25 => [C (f:22^48 h:24^49) (([map:6^22 · map:6^5]:15^51 f:22^52) t:25^54)]
//│ 	| N => [N]}))
//│ def [map:6^22]:14 = (fun f:18 -> (fun ls:19 -> case ls:19^30 of {
//│ 	C h:20 t:21 => [C (f:18^31 h:20^32) (([map:6^22 · map:6^5]:15^34 f:18^35) t:21^37)]
//│ 	| N => [N]}))
//│ def ff:8 = (fun x:13 -> case x:13^23 of {
//│ 	K => [T]})
//│ def l:7 = [C [K] l:7^21]
//│ def map:6 = (fun f:9 -> (fun ls:10 -> case ls:10^6 of {
//│ 	C h:11 t:12 => [C (f:9^7 h:11^8) ((map:6^10 f:9^11) t:12^13)]
//│ 	| N => [N]}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 27: [K]
//│ [K] --->
//│ 	case x:13^23 of {K => [T]}
//│ 29: [C 27: [K] 28: [l:7^25 · l:7^16]:17^28]
//│ [C [K] [l:7^25 · l:7^16]:17^28] --->
//│ 	case ls:23^47 of {C h:24 t:25 => [C (f:22^48 h:24^49) (([map:6^22 · map:6^5]:15^51 f:22^52) t:25^54)] | N => [N]}
//│ 44: [K]
//│ [K] --->
//│ 	case x:13^23 of {K => [T]}
//│ 46: [C 44: [K] 45: [l:7^25 · l:7^16]:17^45]
//│ [C [K] [l:7^25 · l:7^16]:17^45] --->
//│ 	case ls:19^30 of {C h:20 t:21 => [C (f:18^31 h:20^32) (([map:6^22 · map:6^5]:15^34 f:18^35) t:21^37)] | N => [N]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (([map:6^22]:14^66 ff:8^67) [l:7^25]:16^69)
//│ def [l:7^25 · l:7^16]:17 = let h:24 = [T]
//│ in let t:25 = [l:7^25 · l:7^16]:17^115
//│ in [C (f:22^106 h:24^107) (([map:6^22 · map:6^5]:15^109 f:22^110) t:25^112)]
//│ def [l:7^25]:16 = let h:20 = [T]
//│ in let t:21 = [l:7^25 · l:7^16]:17^99
//│ in [C (f:18^90 h:20^91) (([map:6^22 · map:6^5]:15^93 f:18^94) t:21^96)]
//│ def [map:6^22 · map:6^5]:15 = (fun f:22 -> (fun ls:23 -> ls:23^119))
//│ def [map:6^22]:14 = (fun f:18 -> (fun ls:19 -> ls:19^103))
//│ def ff:8 = (fun x:13 -> x:13^71)
//│ def l:7 = [C [K] l:7^74]
//│ def map:6 = (fun f:9 -> (fun ls:10 -> case ls:10^76 of {
//│ 	C h:11 t:12 => [C (f:9^77 h:11^78) ((map:6^80 f:9^81) t:12^83)]
//│ 	| N => [N]}))
//│ <<<<<<< after fusion <<<<<<<

// NOTE: only first two is handled
:ns
_LUMBERHACK_ERROR
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
fun ff(x) = if x is
    K then T
    KK then TT
    KKKK then TTTT
let l = C(K, C(KK, C(KKKK, N)))
map(ff, l)
//│ |_LUMBERHACK_ERROR|↵|#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|ff|,| |l|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; let l = C (K, C (KK, C (KKKK, N,),),); map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((map:6^28 ff:7^29) l:8^31)
//│ def ff:7 = (fun x:13 -> case x:13^15 of {
//│ 	K => [T]
//│ 	| KK => [TT]
//│ 	| KKKK => [TTTT]})
//│ def l:8 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map:6 = (fun f:9 -> (fun ls:10 -> case ls:10^1 of {
//│ 	C h:11 t:12 => [C (f:9^2 h:11^3) ((map:6^5 f:9^6) t:12^8)]
//│ 	| N => [N]}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 6't
//│ 	[-l:8^31 · +map:6^28 · +map:6^5 · +map:6^5 · +map:6^5 · +map:6^5]  --->  [-l:8^31 · +map:6^28 · +map:6^5 · +map:6^5 · +map:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [map:6^28 · map:6^5 · map:6^5 · map:6^5 · map:6^5] --> [map:6^28 · map:6^5 · map:6^5 · map:6^5]
//│ [l:8^31] --> [l:8^31]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [ff:7^29] ---> [ff:7^29] (hopeless to continue)
//│ [l:8^31]
//│ 
//│ [map:6^28]
//│ 	[map:6^28 · map:6^5]
//│ 		[map:6^28 · map:6^5 · map:6^5]
//│ 			[map:6^28 · map:6^5 · map:6^5 · map:6^5]
//│ 				[map:6^28 · map:6^5 · map:6^5 · map:6^5 · map:6^5] ---> [map:6^28 · map:6^5 · map:6^5 · map:6^5] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([map:6^28]:14^96 ff:7^97) [l:8^31]:18^99)
//│ def [l:8^31]:18 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def [map:6^28 · map:6^5 · map:6^5 · map:6^5]:17 = (fun f:19 -> (fun ls:20 -> case ls:20^33 of {
//│ 	C h:21 t:22 => [C (f:19^34 h:21^35) (([map:6^28 · map:6^5 · map:6^5 · map:6^5]:17^37 f:19^38) t:22^40)]
//│ 	| N => [N]}))
//│ def [map:6^28 · map:6^5 · map:6^5]:16 = (fun f:23 -> (fun ls:24 -> case ls:24^47 of {
//│ 	C h:25 t:26 => [C (f:23^48 h:25^49) (([map:6^28 · map:6^5 · map:6^5 · map:6^5]:17^51 f:23^52) t:26^54)]
//│ 	| N => [N]}))
//│ def [map:6^28 · map:6^5]:15 = (fun f:31 -> (fun ls:32 -> case ls:32^82 of {
//│ 	C h:33 t:34 => [C (f:31^83 h:33^84) (([map:6^28 · map:6^5 · map:6^5]:16^86 f:31^87) t:34^89)]
//│ 	| N => [N]}))
//│ def [map:6^28]:14 = (fun f:27 -> (fun ls:28 -> case ls:28^61 of {
//│ 	C h:29 t:30 => [C (f:27^62 h:29^63) (([map:6^28 · map:6^5]:15^65 f:27^66) t:30^68)]
//│ 	| N => [N]}))
//│ def ff:7 = (fun x:13 -> case x:13^20 of {
//│ 	K => [T]
//│ 	| KK => [TT]
//│ 	| KKKK => [TTTT]})
//│ def l:8 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map:6 = (fun f:9 -> (fun ls:10 -> case ls:10^6 of {
//│ 	C h:11 t:12 => [C (f:9^7 h:11^8) ((map:6^10 f:9^11) t:12^13)]
//│ 	| N => [N]}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 75: [K]
//│ [K] --->
//│ 	case x:13^20 of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ 76: [KK]
//│ [KK] --->
//│ 	case x:13^20 of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ 77: [KKKK]
//│ [KKKK] --->
//│ 	case x:13^20 of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ 78: [N]
//│ [N] --->
//│ 	case ls:20^33 of {C h:21 t:22 => [C (f:19^34 h:21^35) (([map:6^28 · map:6^5 · map:6^5 · map:6^5]:17^37 f:19^38) t:22^40)] | N => [N]}
//│ 79: [C 77: [KKKK] 78: [N]]
//│ [C [KKKK] [N]] --->
//│ 	case ls:24^47 of {C h:25 t:26 => [C (f:23^48 h:25^49) (([map:6^28 · map:6^5 · map:6^5 · map:6^5]:17^51 f:23^52) t:26^54)] | N => [N]}
//│ 80: [C 76: [KK] 79: [C 77: [KKKK] 78: [N]]]
//│ [C [KK] [C [KKKK] [N]]] --->
//│ 	case ls:32^82 of {C h:33 t:34 => [C (f:31^83 h:33^84) (([map:6^28 · map:6^5 · map:6^5]:16^86 f:31^87) t:34^89)] | N => [N]}
//│ 81: [C 75: [K] 80: [C 76: [KK] 79: [C 77: [KKKK] 78: [N]]]]
//│ [C [K] [C [KK] [C [KKKK] [N]]]] --->
//│ 	case ls:28^61 of {C h:29 t:30 => [C (f:27^62 h:29^63) (([map:6^28 · map:6^5]:15^65 f:27^66) t:30^68)] | N => [N]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (([map:6^28]:14^101 ff:7^102) [l:8^31]:18^104)
//│ def [l:8^31]:18 = let h:29 = [T]
//│ in let t:30 = 
//│ 	let h:33 = [TT]
//│ 	in let t:34 = 
//│ 		let h:25 = [TTTT]
//│ 		in let t:26 = [N]
//│ 		in [C (f:23^143 h:25^144) (([map:6^28 · map:6^5 · map:6^5 · map:6^5]:17^146 f:23^147) t:26^149)]
//│ 	in [C (f:31^134 h:33^135) (([map:6^28 · map:6^5 · map:6^5]:16^137 f:31^138) t:34^140)]
//│ in [C (f:27^125 h:29^126) (([map:6^28 · map:6^5]:15^128 f:27^129) t:30^131)]
//│ def [map:6^28 · map:6^5 · map:6^5 · map:6^5]:17 = (fun f:19 -> (fun ls:20 -> ls:20^162))
//│ def [map:6^28 · map:6^5 · map:6^5]:16 = (fun f:23 -> (fun ls:24 -> ls:24^172))
//│ def [map:6^28 · map:6^5]:15 = (fun f:31 -> (fun ls:32 -> ls:32^175))
//│ def [map:6^28]:14 = (fun f:27 -> (fun ls:28 -> ls:28^106))
//│ def ff:7 = (fun x:13 -> x:13^123)
//│ def l:8 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map:6 = (fun f:9 -> (fun ls:10 -> case ls:10^109 of {
//│ 	C h:11 t:12 => [C (f:9^110 h:11^111) ((map:6^113 f:9^114) t:12^116)]
//│ 	| N => [N]}))
//│ <<<<<<< after fusion <<<<<<<

:ns
_LUMBERHACK_ERROR
fun rev(l1, l2) = if l1 is
    C(h, t) then rev(t, C(h, l2))
    N then l2
fun rev1(l11, l22) = if l11 is
    C(h1, t1) then rev1(t1, C(h1, l22))
    N then l22
let p = C(K, N)
rev(rev1(p, N), N)
//│ |_LUMBERHACK_ERROR|↵|#fun| |rev|(|l1|,| |l2|)| |#=| |#if| |l1| |is|→|C|(|h|,| |t|)| |#then| |rev|(|t|,| |C|(|h|,| |l2|)|)|↵|N| |#then| |l2|←|↵|#fun| |rev1|(|l11|,| |l22|)| |#=| |#if| |l11| |is|→|C|(|h1|,| |t1|)| |#then| |rev1|(|t1|,| |C|(|h1|,| |l22|)|)|↵|N| |#then| |l22|←|↵|#let| |p| |#=| |C|(|K|,| |N|)|↵|rev|(|rev1|(|p|,| |N|)|,| |N|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun rev = l1, l2, => if l1 is ‹(C (h, t,)) then rev (t, C (h, l2,),); (N) then l2›; fun rev1 = l11, l22, => if l11 is ‹(C (h1, t1,)) then rev1 (t1, C (h1, l22,),); (N) then l22›; let p = C (K, N,); rev (rev1 (p, N,), N,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((rev:6^28 ((rev1:7^29 p:8^30) [N])) [N])
//│ def p:8 = [C [K] [N]]
//│ def rev:6 = (fun l1:9 -> (fun l2:10 -> case l1:9^1 of {
//│ 	C h:11 t:12 => ((rev:6^2 t:12^3) [C h:11^5 l2:10^6])
//│ 	| N => l2:10^9}))
//│ def rev1:7 = (fun l11:13 -> (fun l22:14 -> case l11:13^13 of {
//│ 	C h1:15 t1:16 => ((rev1:7^14 t1:16^15) [C h1:15^17 l22:14^18])
//│ 	| N => l22:14^21}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(12'h1, 11'l22) <: 3'l1
//│ 	[+rev1:7^14 · +rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]
//│ 	[+rev1:7^14 · +rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]
//│ NoProd <: 3'l1
//│ 	[+rev1:7^29 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^29 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]
//│ 	[+rev1:7^29 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^29 · -rev1:7^29 · +rev:6^28 · +rev:6^2]
//│ NoProd <: 13't1
//│ 	[-p:8^30 · +rev1:7^29 · +rev1:7^14 · +rev1:7^14]  --->  [-p:8^30 · +rev1:7^29 · +rev1:7^14]
//│ NoProd <: 6't
//│ 	[+rev1:7^29 · +rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^29 · +rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]
//│ 	[+rev1:7^29 · +rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^29 · +rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]
//│ 	[+rev1:7^29 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^29 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]
//│ 	[+rev1:7^29 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^29 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [rev1:7^29 · rev1:7^14 · rev1:7^14] --> [rev1:7^29 · rev1:7^14]
//│ [rev:6^28 · rev:6^2 · rev:6^2] --> [rev:6^28 · rev:6^2]
//│ [p:8^30] --> [p:8^30]
//│ [rev1:7^29 · rev1:7^14] --> [rev1:7^29 · rev1:7^14]
//│ [rev1:7^29] --> [rev1:7^29]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [p:8^30]
//│ 
//│ [rev1:7^29]
//│ 	[rev1:7^29 · rev1:7^14]
//│ 		[rev1:7^29 · rev1:7^14 · rev1:7^14] ---> [rev1:7^29 · rev1:7^14] (only one)
//│ [rev:6^28]
//│ 	[rev:6^28 · rev:6^2]
//│ 		[rev:6^28 · rev:6^2 · rev:6^2] ---> [rev:6^28 · rev:6^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([rev:6^28]:18^88 (([rev1:7^29]:20^89 [p:8^30]:17^90) [N])) [N])
//│ def [p:8^30]:17 = [C [K] [N]]
//│ def [rev1:7^29 · rev1:7^14]:21 = (fun l11:34 -> (fun l22:35 -> case l11:34^76 of {
//│ 	C h1:36 t1:37 => (([rev1:7^29 · rev1:7^14]:21^77 t1:37^78) [C h1:36^80 l22:35^81])
//│ 	| N => l22:35^84}))
//│ def [rev1:7^29]:20 = (fun l11:30 -> (fun l22:31 -> case l11:30^64 of {
//│ 	C h1:32 t1:33 => (([rev1:7^29 · rev1:7^14]:21^65 t1:33^66) [C h1:32^68 l22:31^69])
//│ 	| N => l22:31^72}))
//│ def [rev:6^28 · rev:6^2]:19 = (fun l1:26 -> (fun l2:27 -> case l1:26^52 of {
//│ 	C h:28 t:29 => (([rev:6^28 · rev:6^2]:19^53 t:29^54) [C h:28^56 l2:27^57])
//│ 	| N => l2:27^60}))
//│ def [rev:6^28]:18 = (fun l1:22 -> (fun l2:23 -> case l1:22^40 of {
//│ 	C h:24 t:25 => (([rev:6^28 · rev:6^2]:19^41 t:25^42) [C h:24^44 l2:23^45])
//│ 	| N => l2:23^48}))
//│ def p:8 = [C [K] [N]]
//│ def rev:6 = (fun l1:9 -> (fun l2:10 -> case l1:9^10 of {
//│ 	C h:11 t:12 => ((rev:6^11 t:12^12) [C h:11^14 l2:10^15])
//│ 	| N => l2:10^18}))
//│ def rev1:7 = (fun l11:13 -> (fun l22:14 -> case l11:13^22 of {
//│ 	C h1:15 t1:16 => ((rev1:7^23 t1:16^24) [C h1:15^26 l22:14^27])
//│ 	| N => l22:14^30}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 38: [N]
//│ [N] --->
//│ 	case l11:34^76 of {C h1:36 t1:37 => (([rev1:7^29 · rev1:7^14]:21^77 t1:37^78) [C h1:36^80 l22:35^81]) | N => l22:35^84}
//│ 39: [C 37: [K] 38: [N]]
//│ [C [K] [N]] --->
//│ 	case l11:30^64 of {C h1:32 t1:33 => (([rev1:7^29 · rev1:7^14]:21^65 t1:33^66) [C h1:32^68 l22:31^69]) | N => l22:31^72}
//│ 70: [C 68: h1:32^68 69: l22:31^69]
//│ [C h1:32^68 l22:31^69] --->
//│ 	case l1:22^40 of {C h:24 t:25 => (([rev:6^28 · rev:6^2]:19^41 t:25^42) [C h:24^44 l2:23^45]) | N => l2:23^48}
//│ 	case l1:26^52 of {C h:28 t:29 => (([rev:6^28 · rev:6^2]:19^53 t:29^54) [C h:28^56 l2:27^57]) | N => l2:27^60}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 82: [C 80: h1:36^80 81: l22:35^81]
//│ [C h1:36^80 l22:35^81] --->
//│ 	case l1:22^40 of {C h:24 t:25 => (([rev:6^28 · rev:6^2]:19^41 t:25^42) [C h:24^44 l2:23^45]) | N => l2:23^48}
//│ 	case l1:26^52 of {C h:28 t:29 => (([rev:6^28 · rev:6^2]:19^53 t:29^54) [C h:28^56 l2:27^57]) | N => l2:27^60}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 92: [N]
//│ [N] --->
//│ 	case l1:22^40 of {C h:24 t:25 => (([rev:6^28 · rev:6^2]:19^41 t:25^42) [C h:24^44 l2:23^45]) | N => l2:23^48}
//│ 	case l1:26^52 of {C h:28 t:29 => (([rev:6^28 · rev:6^2]:19^53 t:29^54) [C h:28^56 l2:27^57]) | N => l2:27^60}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (([rev:6^28]:18^97 (([rev1:7^29]:20^98 [p:8^30]:17^99) l2:23^101)) [N])
//│ def [p:8^30]:17 = let h1:32 = [K]
//│ in let t1:33 = l22:35^142
//│ in (([rev1:7^29 · rev1:7^14]:21^127 t1:33^128) let h:28 = h1:32^139
//│ in let t:29 = l22:31^137
//│ in (([rev:6^28 · rev:6^2]:19^130 t:29^131) [C h:28^133 l2:27^134]))
//│ def [rev1:7^29 · rev1:7^14]:21 = (fun l11:34 -> (fun l22:35 -> l11:34^124))
//│ def [rev1:7^29]:20 = (fun l11:30 -> (fun l22:31 -> l11:30^106))
//│ def [rev:6^28 · rev:6^2]:19 = (fun l1:26 -> (fun l2:27 -> l1:26^146))
//│ def [rev:6^28]:18 = (fun l1:22 -> (fun l2:23 -> l1:22^161))
//│ def p:8 = [C [K] [N]]
//│ def rev:6 = (fun l1:9 -> (fun l2:10 -> case l1:9^109 of {
//│ 	C h:11 t:12 => ((rev:6^110 t:12^111) [C h:11^113 l2:10^114])
//│ 	| N => l2:10^117}))
//│ def rev1:7 = (fun l11:13 -> (fun l22:14 -> case l11:13^149 of {
//│ 	C h1:15 t1:16 => ((rev1:7^150 t1:16^151) [C h1:15^153 l22:14^154])
//│ 	| N => l22:14^157}))
//│ <<<<<<< after fusion <<<<<<<


// `id2` used twice
:ns
let p = C(C(C(id2(p))))
fun c(x) = if x is
    C(a) then if a is
        C(a) then c(a)
fun id2(yy) = yy
fun id(y) = id2(y)
c(id(p))
//│ |#let| |p| |#=| |C|(|C|(|C|(|id2|(|p|)|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|a|)| |#then| |c|(|a|)|←|←|↵|#fun| |id2|(|yy|)| |#=| |yy|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|c|(|id|(|p|)|)|
//│ Parsed: {let p = C (C (C (id2 (p,),),),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (a,)) then c (a,)››; fun id2 = yy, => yy; fun id = y, => id2 (y,); c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:7^21 (id:9^22 p:6^23))
//│ def c:7 = (fun x:10 -> case x:10^7 of {
//│ 	C a:11 => case a:11^8 of {
//│ 		C a:12 => (c:7^9 a:12^10)}})
//│ def id:9 = (fun y:14 -> (id2:8^17 y:14^18))
//│ def id2:8 = (fun yy:13 -> yy:13^15)
//│ def p:6 = [C [C [C (id2:8^1 p:6^2)]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(C(4'3_callres))) <: 7'a
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ C(C(C(4'3_callres))) <: 6'a
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [c:7^21 · c:7^9 · c:7^9 · c:7^9 · c:7^9] --> [c:7^21 · c:7^9]
//│ [p:6^23 · p:6^2 · p:6^2 · p:6^2] --> [p:6^23 · p:6^2]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:7^21]
//│ 	[c:7^21 · c:7^9]
//│ 		[c:7^21 · c:7^9 · c:7^9]
//│ 			[c:7^21 · c:7^9 · c:7^9 · c:7^9]
//│ 				[c:7^21 · c:7^9 · c:7^9 · c:7^9 · c:7^9] ---> [c:7^21 · c:7^9] (only one)
//│ [id:9^22] ---> [id:9^22] (hopeless to continue)
//│ [p:6^23]
//│ 	[p:6^23 · p:6^2]
//│ 		[p:6^23 · p:6^2 · p:6^2]
//│ 			[p:6^23 · p:6^2 · p:6^2 · p:6^2] ---> [p:6^23 · p:6^2] (only one)
//│ 			[p:6^23 · p:6^2 · p:6^2 · id2:8^1] ---> [id2:8^1] (hopeless to continue)
//│ 		[p:6^23 · p:6^2 · id2:8^1] ---> [id2:8^1] (hopeless to continue)
//│ 	[p:6^23 · id2:8^1] ---> [id2:8^1] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([c:7^21]:15^76 (id:9^77 [p:6^23]:19^78))
//│ def [c:7^21 · c:7^9 · c:7^9 · c:7^9]:18 = (fun x:25 -> case x:25^46 of {
//│ 	C a:26 => case a:26^47 of {
//│ 		C a:27 => ([c:7^21 · c:7^9]:16^48 a:27^49)}})
//│ def [c:7^21 · c:7^9 · c:7^9]:17 = (fun x:31 -> case x:31^68 of {
//│ 	C a:32 => case a:32^69 of {
//│ 		C a:33 => ([c:7^21 · c:7^9 · c:7^9 · c:7^9]:18^70 a:33^71)}})
//│ def [c:7^21 · c:7^9]:16 = (fun x:28 -> case x:28^60 of {
//│ 	C a:29 => case a:29^61 of {
//│ 		C a:30 => ([c:7^21 · c:7^9 · c:7^9]:17^62 a:30^63)}})
//│ def [c:7^21]:15 = (fun x:22 -> case x:22^32 of {
//│ 	C a:23 => case a:23^33 of {
//│ 		C a:24 => ([c:7^21 · c:7^9]:16^34 a:24^35)}})
//│ def [p:6^23 · p:6^2 · p:6^2]:21 = [C [C [C (id2:8^54 [p:6^23 · p:6^2]:20^55)]]]
//│ def [p:6^23 · p:6^2]:20 = [C [C [C (id2:8^26 [p:6^23 · p:6^2 · p:6^2]:21^27)]]]
//│ def [p:6^23]:19 = [C [C [C (id2:8^40 [p:6^23 · p:6^2]:20^41)]]]
//│ def c:7 = (fun x:10 -> case x:10^12 of {
//│ 	C a:11 => case a:11^13 of {
//│ 		C a:12 => (c:7^14 a:12^15)}})
//│ def id:9 = (fun y:14 -> (id2:8^22 y:14^23))
//│ def id2:8 = (fun yy:13 -> yy:13^20)
//│ def p:6 = [C [C [C (id2:8^6 p:6^7)]]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 10: [C 9: [C 8: (6: id2:8^6 7: p:6^7)]]
//│ [C [C (id2:8^6 p:6^7)]] --->
//│ 	case a:23^33 of {C a:24 => ([c:7^21 · c:7^9]:16^34 a:24^35)}
//│ 	case a:26^47 of {C a:27 => ([c:7^21 · c:7^9]:16^48 a:27^49)}
//│ 	case x:31^68 of {C a:32 => case a:32^69 of {C a:33 => ([c:7^21 · c:7^9 · c:7^9 · c:7^9]:18^70 a:33^71)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 11: [C 10: [C 9: [C 8: (6: id2:8^6 7: p:6^7)]]]
//│ [C [C [C (id2:8^6 p:6^7)]]] --->
//│ 	case a:29^61 of {C a:30 => ([c:7^21 · c:7^9 · c:7^9]:17^62 a:30^63)}
//│ 	case x:22^32 of {C a:23 => case a:23^33 of {C a:24 => ([c:7^21 · c:7^9]:16^34 a:24^35)}}
//│ 	case x:25^46 of {C a:26 => case a:26^47 of {C a:27 => ([c:7^21 · c:7^9]:16^48 a:27^49)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 29: [C 28: (26: id2:8^26 27: [p:6^23 · p:6^2 · p:6^2]:21^27)]
//│ [C (id2:8^26 [p:6^23 · p:6^2 · p:6^2]:21^27)] --->
//│ 	case a:32^69 of {C a:33 => ([c:7^21 · c:7^9 · c:7^9 · c:7^9]:18^70 a:33^71)}
//│ 	case x:28^60 of {C a:29 => case a:29^61 of {C a:30 => ([c:7^21 · c:7^9 · c:7^9]:17^62 a:30^63)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 30: [C 29: [C 28: (26: id2:8^26 27: [p:6^23 · p:6^2 · p:6^2]:21^27)]]
//│ [C [C (id2:8^26 [p:6^23 · p:6^2 · p:6^2]:21^27)]] --->
//│ 	case a:23^33 of {C a:24 => ([c:7^21 · c:7^9]:16^34 a:24^35)}
//│ 	case a:26^47 of {C a:27 => ([c:7^21 · c:7^9]:16^48 a:27^49)}
//│ 	case x:31^68 of {C a:32 => case a:32^69 of {C a:33 => ([c:7^21 · c:7^9 · c:7^9 · c:7^9]:18^70 a:33^71)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 31: [C 30: [C 29: [C 28: (26: id2:8^26 27: [p:6^23 · p:6^2 · p:6^2]:21^27)]]]
//│ [C [C [C (id2:8^26 [p:6^23 · p:6^2 · p:6^2]:21^27)]]] --->
//│ 	case a:29^61 of {C a:30 => ([c:7^21 · c:7^9 · c:7^9]:17^62 a:30^63)}
//│ 	case x:22^32 of {C a:23 => case a:23^33 of {C a:24 => ([c:7^21 · c:7^9]:16^34 a:24^35)}}
//│ 	case x:25^46 of {C a:26 => case a:26^47 of {C a:27 => ([c:7^21 · c:7^9]:16^48 a:27^49)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 43: [C 42: (40: id2:8^40 41: [p:6^23 · p:6^2]:20^41)]
//│ [C (id2:8^40 [p:6^23 · p:6^2]:20^41)] --->
//│ 	case a:32^69 of {C a:33 => ([c:7^21 · c:7^9 · c:7^9 · c:7^9]:18^70 a:33^71)}
//│ 	case x:28^60 of {C a:29 => case a:29^61 of {C a:30 => ([c:7^21 · c:7^9 · c:7^9]:17^62 a:30^63)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 44: [C 43: [C 42: (40: id2:8^40 41: [p:6^23 · p:6^2]:20^41)]]
//│ [C [C (id2:8^40 [p:6^23 · p:6^2]:20^41)]] --->
//│ 	case a:23^33 of {C a:24 => ([c:7^21 · c:7^9]:16^34 a:24^35)}
//│ 	case a:26^47 of {C a:27 => ([c:7^21 · c:7^9]:16^48 a:27^49)}
//│ 	case x:31^68 of {C a:32 => case a:32^69 of {C a:33 => ([c:7^21 · c:7^9 · c:7^9 · c:7^9]:18^70 a:33^71)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 45: [C 44: [C 43: [C 42: (40: id2:8^40 41: [p:6^23 · p:6^2]:20^41)]]]
//│ [C [C [C (id2:8^40 [p:6^23 · p:6^2]:20^41)]]] --->
//│ 	case a:29^61 of {C a:30 => ([c:7^21 · c:7^9 · c:7^9]:17^62 a:30^63)}
//│ 	case x:22^32 of {C a:23 => case a:23^33 of {C a:24 => ([c:7^21 · c:7^9]:16^34 a:24^35)}}
//│ 	case x:25^46 of {C a:26 => case a:26^47 of {C a:27 => ([c:7^21 · c:7^9]:16^48 a:27^49)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 57: [C 56: (54: id2:8^54 55: [p:6^23 · p:6^2]:20^55)]
//│ [C (id2:8^54 [p:6^23 · p:6^2]:20^55)] --->
//│ 	case a:32^69 of {C a:33 => ([c:7^21 · c:7^9 · c:7^9 · c:7^9]:18^70 a:33^71)}
//│ 	case x:28^60 of {C a:29 => case a:29^61 of {C a:30 => ([c:7^21 · c:7^9 · c:7^9]:17^62 a:30^63)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 58: [C 57: [C 56: (54: id2:8^54 55: [p:6^23 · p:6^2]:20^55)]]
//│ [C [C (id2:8^54 [p:6^23 · p:6^2]:20^55)]] --->
//│ 	case a:23^33 of {C a:24 => ([c:7^21 · c:7^9]:16^34 a:24^35)}
//│ 	case a:26^47 of {C a:27 => ([c:7^21 · c:7^9]:16^48 a:27^49)}
//│ 	case x:31^68 of {C a:32 => case a:32^69 of {C a:33 => ([c:7^21 · c:7^9 · c:7^9 · c:7^9]:18^70 a:33^71)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 59: [C 58: [C 57: [C 56: (54: id2:8^54 55: [p:6^23 · p:6^2]:20^55)]]]
//│ [C [C [C (id2:8^54 [p:6^23 · p:6^2]:20^55)]]] --->
//│ 	case a:29^61 of {C a:30 => ([c:7^21 · c:7^9 · c:7^9]:17^62 a:30^63)}
//│ 	case x:22^32 of {C a:23 => case a:23^33 of {C a:24 => ([c:7^21 · c:7^9]:16^34 a:24^35)}}
//│ 	case x:25^46 of {C a:26 => case a:26^47 of {C a:27 => ([c:7^21 · c:7^9]:16^48 a:27^49)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 9: [C 8: (6: id2:8^6 7: p:6^7)]
//│ [C (id2:8^6 p:6^7)] --->
//│ 	case a:32^69 of {C a:33 => ([c:7^21 · c:7^9 · c:7^9 · c:7^9]:18^70 a:33^71)}
//│ 	case x:28^60 of {C a:29 => case a:29^61 of {C a:30 => ([c:7^21 · c:7^9 · c:7^9]:17^62 a:30^63)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([c:7^21]:15^81 (id:9^82 [p:6^23]:19^83))
//│ def [c:7^21 · c:7^9 · c:7^9 · c:7^9]:18 = (fun x:25 -> x:25^121)
//│ def [c:7^21 · c:7^9 · c:7^9]:17 = (fun x:31 -> x:31^133)
//│ def [c:7^21 · c:7^9]:16 = (fun x:28 -> x:28^125)
//│ def [c:7^21]:15 = (fun x:22 -> x:22^131)
//│ def [p:6^23 · p:6^2 · p:6^2]:21 = let a:30 = 
//│ 	let a:32 = 
//│ 		let a:33 = (id2:8^93 [p:6^23 · p:6^2]:20^94)
//│ 		in ([c:7^21 · c:7^9 · c:7^9 · c:7^9]:18^90 a:33^91)
//│ 	in a:32^89
//│ in ([c:7^21 · c:7^9 · c:7^9]:17^86 a:30^87)
//│ def [p:6^23 · p:6^2]:20 = let a:26 = 
//│ 	let a:27 = 
//│ 		let a:29 = (id2:8^115 [p:6^23 · p:6^2 · p:6^2]:21^116)
//│ 		in a:29^114
//│ 	in ([c:7^21 · c:7^9]:16^111 a:27^112)
//│ in a:26^110
//│ def [p:6^23]:19 = let a:23 = 
//│ 	let a:24 = 
//│ 		let a:29 = (id2:8^104 [p:6^23 · p:6^2]:20^105)
//│ 		in a:29^103
//│ 	in ([c:7^21 · c:7^9]:16^100 a:24^101)
//│ in a:23^99
//│ def c:7 = (fun x:10 -> case x:10^146 of {
//│ 	C a:11 => case a:11^147 of {
//│ 		C a:12 => (c:7^148 a:12^149)}})
//│ def id:9 = (fun y:14 -> (id2:8^127 y:14^128))
//│ def id2:8 = (fun yy:13 -> yy:13^123)
//│ def p:6 = let a:26 = 
//│ 	let a:27 = 
//│ 		let a:29 = (id2:8^140 p:6^141)
//│ 		in a:29^139
//│ 	in ([c:7^21 · c:7^9]:16^136 a:27^137)
//│ in a:26^135
//│ <<<<<<< after fusion <<<<<<<


// no polymorphism
:ns
_LUMBERHACK_ERROR
fun id(x) = x
let rec p1 = C(p1)
fun c1(a) = if a is
    C(i) then c1(i)
id(c1)(id(p1))
//│ |_LUMBERHACK_ERROR|↵|#fun| |id|(|x|)| |#=| |x|↵|#let| |#rec| |p1| |#=| |C|(|p1|)|↵|#fun| |c1|(|a|)| |#=| |#if| |a| |is|→|C|(|i|)| |#then| |c1|(|i|)|←|↵|id|(|c1|)|(|id|(|p1|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun id = x, => x; let rec p1 = C (p1,); fun c1 = a, => if a is ‹(C (i,)) then c1 (i,)›; id (c1,) (id (p1,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((id:6^11 c1:8^12) (id:6^14 p1:7^15))
//│ def c1:8 = (fun a:10 -> case a:10^5 of {
//│ 	C i:11 => (c1:8^6 i:11^7)})
//│ def id:6 = (fun x:9 -> x:9^1)
//│ def p1:7 = [C p1:7^3]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error C(1'p1_7^3) <: 9'16_callres => 10'17_callres
//│ !!!!!!ERROR!!!!!!

:ns
_LUMBERHACK_ERROR
fun map(ls) = if ls is
    C(hh, tt) then C(
        (if hh is
            A then B
            AA then BB
        ),
        map(tt)
    )
    N then N
fun rev(a, lss) = if lss is
    C(h, t) then rev(C(h, a), t)
    N then a
// map(rev(N, C(A, C(AA, N))))
map(rev(N, primitive))
//│ |_LUMBERHACK_ERROR|↵|#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|hh|,| |tt|)| |#then| |C|(|→|(|#if| |hh| |is|→|A| |#then| |B|↵|AA| |#then| |BB|←|↵|)|,|↵|map|(|tt|)|←|↵|)|↵|N| |#then| |N|←|↵|#fun| |rev|(|a|,| |lss|)| |#=| |#if| |lss| |is|→|C|(|h|,| |t|)| |#then| |rev|(|C|(|h|,| |a|)|,| |t|)|↵|N| |#then| |a|←|↵|/* map(rev(N, C(A, C(AA, N))))*/|↵|map|(|rev|(|N|,| |primitive|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun map = ls, => if ls is ‹(C (hh, tt,)) then C ('(' if hh is ‹(A) then B; (AA) then BB›, ')', map (tt,),); (N) then N›; fun rev = a, lss, => if lss is ‹(C (h, t,)) then rev (C (h, a,), t,); (N) then a›; map (rev (N, primitive,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (map:6^25 ((rev:7^26 [N]) primitive:3^29))
//│ def map:6 = (fun ls:8 -> case ls:8^1 of {
//│ 	C hh:9 tt:10 => [C case hh:9^2 of {
//│ 		A => [B]
//│ 		| AA => [BB]} (map:6^6 tt:10^7)]
//│ 	| N => [N]})
//│ def rev:7 = (fun a:11 -> (fun lss:12 -> case lss:12^13 of {
//│ 	C h:13 t:14 => ((rev:7^14 [C h:13^15 a:11^16]) t:14^19)
//│ 	| N => a:11^21}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(10'h, 8'a) <: 2'ls
//│ 	[+rev:7^14 · +rev:7^14 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]  --->  [+rev:7^14 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]
//│ 	[+rev:7^14 · +rev:7^14 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]  --->  [+rev:7^14 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]
//│ NoProd <: 2'ls
//│ 	[+rev:7^26 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]  --->  [+rev:7^26 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]
//│ 	[+rev:7^26 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]  --->  [+rev:7^26 · -rev:7^26 · +map:6^25 · +map:6^6]
//│ NoProd <: 4'tt
//│ 	[+rev:7^26 · +rev:7^14 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6 · +map:6^6]  --->  [+rev:7^26 · +rev:7^14 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]
//│ 	[+rev:7^26 · +rev:7^14 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6 · +map:6^6]  --->  [+rev:7^26 · +rev:7^14 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]
//│ 	[+rev:7^26 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]  --->  [+rev:7^26 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]
//│ 	[+rev:7^26 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]  --->  [+rev:7^26 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]
//│ NoProd <: 9'lss
//│ 	[+rev:7^26 · +rev:7^14 · +rev:7^14]  --->  [+rev:7^26 · +rev:7^14]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [map:6^25 · map:6^6 · map:6^6] --> [map:6^25 · map:6^6]
//│ [rev:7^26 · rev:7^14 · rev:7^14] --> [rev:7^26 · rev:7^14]
//│ [rev:7^26 · rev:7^14] --> [rev:7^26 · rev:7^14]
//│ [rev:7^26] --> [rev:7^26]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [map:6^25]
//│ 	[map:6^25 · map:6^6]
//│ 		[map:6^25 · map:6^6 · map:6^6] ---> [map:6^25 · map:6^6] (only one)
//│ [rev:7^26]
//│ 	[rev:7^26 · rev:7^14]
//│ 		[rev:7^26 · rev:7^14 · rev:7^14] ---> [rev:7^26 · rev:7^14] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([map:6^25]:15^80 (([rev:7^26]:17^81 [N]) primitive:3^84))
//│ def [map:6^25 · map:6^6]:16 = (fun ls:22 -> case ls:22^44 of {
//│ 	C hh:23 tt:24 => [C case hh:23^45 of {
//│ 		A => [B]
//│ 		| AA => [BB]} ([map:6^25 · map:6^6]:16^49 tt:24^50)]
//│ 	| N => [N]})
//│ def [map:6^25]:15 = (fun ls:19 -> case ls:19^32 of {
//│ 	C hh:20 tt:21 => [C case hh:20^33 of {
//│ 		A => [B]
//│ 		| AA => [BB]} ([map:6^25 · map:6^6]:16^37 tt:21^38)]
//│ 	| N => [N]})
//│ def [rev:7^26 · rev:7^14]:18 = (fun a:25 -> (fun lss:26 -> case lss:26^56 of {
//│ 	C h:27 t:28 => (([rev:7^26 · rev:7^14]:18^57 [C h:27^58 a:25^59]) t:28^62)
//│ 	| N => a:25^64}))
//│ def [rev:7^26]:17 = (fun a:29 -> (fun lss:30 -> case lss:30^68 of {
//│ 	C h:31 t:32 => (([rev:7^26 · rev:7^14]:18^69 [C h:31^70 a:29^71]) t:32^74)
//│ 	| N => a:29^76}))
//│ def map:6 = (fun ls:8 -> case ls:8^8 of {
//│ 	C hh:9 tt:10 => [C case hh:9^9 of {
//│ 		A => [B]
//│ 		| AA => [BB]} (map:6^13 tt:10^14)]
//│ 	| N => [N]})
//│ def rev:7 = (fun a:11 -> (fun lss:12 -> case lss:12^20 of {
//│ 	C h:13 t:14 => ((rev:7^21 [C h:13^22 a:11^23]) t:14^26)
//│ 	| N => a:11^28}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 60: [C 58: h:27^58 59: a:25^59]
//│ [C h:27^58 a:25^59] --->
//│ 	case ls:19^32 of {C hh:20 tt:21 => [C case hh:20^33 of {A => [B] | AA => [BB]} ([map:6^25 · map:6^6]:16^37 tt:21^38)] | N => [N]}
//│ 	case ls:22^44 of {C hh:23 tt:24 => [C case hh:23^45 of {A => [B] | AA => [BB]} ([map:6^25 · map:6^6]:16^49 tt:24^50)] | N => [N]}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 72: [C 70: h:31^70 71: a:29^71]
//│ [C h:31^70 a:29^71] --->
//│ 	case ls:19^32 of {C hh:20 tt:21 => [C case hh:20^33 of {A => [B] | AA => [BB]} ([map:6^25 · map:6^6]:16^37 tt:21^38)] | N => [N]}
//│ 	case ls:22^44 of {C hh:23 tt:24 => [C case hh:23^45 of {A => [B] | AA => [BB]} ([map:6^25 · map:6^6]:16^49 tt:24^50)] | N => [N]}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 82: [N]
//│ [N] --->
//│ 	case ls:19^32 of {C hh:20 tt:21 => [C case hh:20^33 of {A => [B] | AA => [BB]} ([map:6^25 · map:6^6]:16^37 tt:21^38)] | N => [N]}
//│ 	case ls:22^44 of {C hh:23 tt:24 => [C case hh:23^45 of {A => [B] | AA => [BB]} ([map:6^25 · map:6^6]:16^49 tt:24^50)] | N => [N]}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([map:6^25]:15^87 (([rev:7^26]:17^88 [N]) primitive:3^91))
//│ def [map:6^25 · map:6^6]:16 = (fun ls:22 -> case ls:22^94 of {
//│ 	C hh:23 tt:24 => [C case hh:23^95 of {
//│ 		A => [B]
//│ 		| AA => [BB]} ([map:6^25 · map:6^6]:16^99 tt:24^100)]
//│ 	| N => [N]})
//│ def [map:6^25]:15 = (fun ls:19 -> ls:19^172)
//│ def [rev:7^26 · rev:7^14]:18 = (fun a:25 -> (fun lss:26 -> case lss:26^106 of {
//│ 	C h:27 t:28 => (([rev:7^26 · rev:7^14]:18^107 let hh:20 = h:27^118
//│ 	in let tt:21 = a:25^116
//│ 	in [C case hh:20^108 of {
//│ 		A => [B]
//│ 		| AA => [BB]} ([map:6^25 · map:6^6]:16^112 tt:21^113)]) t:28^121)
//│ 	| N => a:25^123}))
//│ def [rev:7^26]:17 = (fun a:29 -> (fun lss:30 -> case lss:30^127 of {
//│ 	C h:31 t:32 => (([rev:7^26 · rev:7^14]:18^128 let hh:20 = h:31^139
//│ 	in let tt:21 = a:29^137
//│ 	in [C case hh:20^129 of {
//│ 		A => [B]
//│ 		| AA => [BB]} ([map:6^25 · map:6^6]:16^133 tt:21^134)]) t:32^142)
//│ 	| N => a:29^144}))
//│ def map:6 = (fun ls:8 -> case ls:8^148 of {
//│ 	C hh:9 tt:10 => [C case hh:9^149 of {
//│ 		A => [B]
//│ 		| AA => [BB]} (map:6^153 tt:10^154)]
//│ 	| N => [N]})
//│ def rev:7 = (fun a:11 -> (fun lss:12 -> case lss:12^160 of {
//│ 	C h:13 t:14 => ((rev:7^161 [C h:13^162 a:11^163]) t:14^166)
//│ 	| N => a:11^168}))
//│ <<<<<<< after fusion <<<<<<<

:ns
_LUMBERHACK_ERROR
let p = Pair(A, B)
fun c(x) = if x is
    Pair(a, b) then c(Pair(b, a))
c(p)
//│ |_LUMBERHACK_ERROR|↵|#let| |p| |#=| |Pair|(|A|,| |B|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|Pair|(|a|,| |b|)| |#then| |c|(|Pair|(|b|,| |a|)|)|←|↵|c|(|p|)|
//│ Parsed: {_LUMBERHACK_ERROR; let p = Pair (A, B,); fun c = x, => if x is ‹(Pair (a, b,)) then c (Pair (b, a,),)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:7^12 p:6^13)
//│ def c:7 = (fun x:8 -> case x:8^4 of {
//│ 	Pair a:9 b:10 => (c:7^5 [Pair b:10^6 a:9^7])})
//│ def p:6 = [Pair [A] [B]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:7^12] ---> [c:7^12] (hopeless to continue)
//│ [p:6^13] ---> [p:6^13] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (c:7^15 p:6^16)
//│ def c:7 = (fun x:8 -> case x:8^7 of {
//│ 	Pair a:9 b:10 => (c:7^8 [Pair b:10^9 a:9^10])})
//│ def p:6 = [Pair [A] [B]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 11: [Pair 9: b:10^9 10: a:9^10]
//│ [Pair b:10^9 a:9^10] --->
//│ 	case x:8^7 of {Pair a:9 b:10 => (c:7^8 [Pair b:10^9 a:9^10])}
//│ 6: [Pair 4: [A] 5: [B]]
//│ [Pair [A] [B]] --->
//│ 	case x:8^7 of {Pair a:9 b:10 => (c:7^8 [Pair b:10^9 a:9^10])}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ !!!!!!ERROR!!!!!!
//│ java.lang.StackOverflowError
//│ !!!!!!ERROR!!!!!!


// pushing in of auxiliary parameters
// FIXME: weird recursive
:ns
fun last(x, ys) = if ys is
    N then x
    C(h, t) then last(h, t)
fun lastDrive(xs) = if xs is
    N then None
    C(hh, tt) then Some(last(hh, tt))
lastDrive(C(1, C(2, N)))
//│ |#fun| |last|(|x|,| |ys|)| |#=| |#if| |ys| |is|→|N| |#then| |x|↵|C|(|h|,| |t|)| |#then| |last|(|h|,| |t|)|←|↵|#fun| |lastDrive|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |None|↵|C|(|hh|,| |tt|)| |#then| |Some|(|last|(|hh|,| |tt|)|)|←|↵|lastDrive|(|C|(|1|,| |C|(|2|,| |N|)|)|)|
//│ Parsed: {fun last = x, ys, => if ys is ‹(N) then x; (C (h, t,)) then last (h, t,)›; fun lastDrive = xs, => if xs is ‹(N) then None; (C (hh, tt,)) then Some (last (hh, tt,),)›; lastDrive (C (1, C (2, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (lastDrive:7^21 [C 1 [C 2 [N]]])
//│ def last:6 = (fun x:8 -> (fun ys:9 -> case ys:9^1 of {
//│ 	N => x:8^2
//│ 	| C h:10 t:11 => ((last:6^3 h:10^4) t:11^6)}))
//│ def lastDrive:7 = (fun xs:12 -> case xs:12^11 of {
//│ 	N => [None]
//│ 	| C hh:13 tt:14 => [Some ((last:6^13 hh:13^14) tt:14^16)]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 5't
//│ 	[+lastDrive:7^21 · +last:6^13 · +last:6^3 · +last:6^3]  --->  [+lastDrive:7^21 · +last:6^13 · +last:6^3]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [lastDrive:7^21 · last:6^13 · last:6^3 · last:6^3] --> [lastDrive:7^21 · last:6^13 · last:6^3]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [lastDrive:7^21]
//│ 	[lastDrive:7^21 · last:6^13]
//│ 		[lastDrive:7^21 · last:6^13 · last:6^3]
//│ 			[lastDrive:7^21 · last:6^13 · last:6^3 · last:6^3] ---> [lastDrive:7^21 · last:6^13 · last:6^3] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([lastDrive:7^21]:15^58 [C 1 [C 2 [N]]])
//│ def [lastDrive:7^21 · last:6^13 · last:6^3]:17 = (fun x:18 -> (fun ys:19 -> case ys:19^28 of {
//│ 	N => x:18^29
//│ 	| C h:20 t:21 => (([lastDrive:7^21 · last:6^13 · last:6^3]:17^30 h:20^31) t:21^33)}))
//│ def [lastDrive:7^21 · last:6^13]:16 = (fun x:25 -> (fun ys:26 -> case ys:26^48 of {
//│ 	N => x:25^49
//│ 	| C h:27 t:28 => (([lastDrive:7^21 · last:6^13 · last:6^3]:17^50 h:27^51) t:28^53)}))
//│ def [lastDrive:7^21]:15 = (fun xs:22 -> case xs:22^38 of {
//│ 	N => [None]
//│ 	| C hh:23 tt:24 => [Some (([lastDrive:7^21 · last:6^13]:16^40 hh:23^41) tt:24^43)]})
//│ def last:6 = (fun x:8 -> (fun ys:9 -> case ys:9^8 of {
//│ 	N => x:8^9
//│ 	| C h:10 t:11 => ((last:6^10 h:10^11) t:11^13)}))
//│ def lastDrive:7 = (fun xs:12 -> case xs:12^18 of {
//│ 	N => [None]
//│ 	| C hh:13 tt:14 => [Some ((last:6^20 hh:13^21) tt:14^23)]})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 61: [N]
//│ [N] --->
//│ 	case ys:19^28 of {N => x:18^29 | C h:20 t:21 => (([lastDrive:7^21 · last:6^13 · last:6^3]:17^30 h:20^31) t:21^33)}
//│ 62: [C 60: 2 61: [N]]
//│ [C 2 [N]] --->
//│ 	case ys:26^48 of {N => x:25^49 | C h:27 t:28 => (([lastDrive:7^21 · last:6^13 · last:6^3]:17^50 h:27^51) t:28^53)}
//│ 63: [C 59: 1 62: [C 60: 2 61: [N]]]
//│ [C 1 [C 2 [N]]] --->
//│ 	case xs:22^38 of {N => [None] | C hh:23 tt:24 => [Some (([lastDrive:7^21 · last:6^13]:16^40 hh:23^41) tt:24^43)]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([lastDrive:7^21]:15^65 let hh:23 = 1
//│ in let tt:24 = 
//│ 	let h:27 = 2
//│ 	in let t:28 = x:18^77
//│ 	in (([lastDrive:7^21 · last:6^13 · last:6^3]:17^72 h:27^73) t:28^75)
//│ in [Some (([lastDrive:7^21 · last:6^13]:16^66 hh:23^67) tt:24^69)])
//│ def [lastDrive:7^21 · last:6^13 · last:6^3]:17 = (fun x:18 -> (fun ys:19 -> ys:19^87))
//│ def [lastDrive:7^21 · last:6^13]:16 = (fun x:25 -> (fun ys:26 -> ys:26^100))
//│ def [lastDrive:7^21]:15 = (fun xs:22 -> xs:22^85)
//│ def last:6 = (fun x:8 -> (fun ys:9 -> case ys:9^90 of {
//│ 	N => x:8^91
//│ 	| C h:10 t:11 => ((last:6^92 h:10^93) t:11^95)}))
//│ def lastDrive:7 = (fun xs:12 -> case xs:12^103 of {
//│ 	N => [None]
//│ 	| C hh:13 tt:14 => [Some ((last:6^105 hh:13^106) tt:14^108)]})
//│ <<<<<<< after fusion <<<<<<<

:ns
fun inter(xs, ys) = if xs is
    N then ys
    C(h, t) then C(h, inter(ys, t))
inter(C(1, C(2, C(3, N))), C(9, C(8, C(7, N))))
//│ |#fun| |inter|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|N| |#then| |ys|↵|C|(|h|,| |t|)| |#then| |C|(|h|,| |inter|(|ys|,| |t|)|)|←|↵|inter|(|C|(|1|,| |C|(|2|,| |C|(|3|,| |N|)|)|)|,| |C|(|9|,| |C|(|8|,| |C|(|7|,| |N|)|)|)|)|
//│ Parsed: {fun inter = xs, ys, => if xs is ‹(N) then ys; (C (h, t,)) then C (h, inter (ys, t,),)›; inter (C (1, C (2, C (3, N,),),), C (9, C (8, C (7, N,),),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((inter:6^13 [C 1 [C 2 [C 3 [N]]]]) [C 9 [C 8 [C 7 [N]]]])
//│ def inter:6 = (fun xs:7 -> (fun ys:8 -> case xs:7^1 of {
//│ 	N => ys:8^2
//│ 	| C h:9 t:10 => [C h:9^3 ((inter:6^4 ys:8^5) t:10^7)]}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 4't
//│ 	[+inter:6^13 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4]  --->  [+inter:6^13 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4]
//│ 	[+inter:6^13 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4]  --->  [+inter:6^13 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4 · +inter:6^4]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4] --> [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]
//│ [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4] --> [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter:6^13]
//│ 	[inter:6^13 · inter:6^4]
//│ 		[inter:6^13 · inter:6^4 · inter:6^4]
//│ 			[inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4]
//│ 				[inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]
//│ 					[inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]
//│ 						[inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]
//│ 							[inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]
//│ 								[inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4] ---> [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([inter:6^13]:11^126 [C 1 [C 2 [C 3 [N]]]]) [C 9 [C 8 [C 7 [N]]]])
//│ def [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:18 = (fun xs:31 -> (fun ys:32 -> case xs:31^66 of {
//│ 	N => ys:32^67
//│ 	| C h:33 t:34 => [C h:33^68 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:17^69 ys:32^70) t:34^72)]}))
//│ def [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:17 = (fun xs:47 -> (fun ys:48 -> case xs:47^114 of {
//│ 	N => ys:48^115
//│ 	| C h:49 t:50 => [C h:49^116 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:18^117 ys:48^118) t:50^120)]}))
//│ def [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:16 = (fun xs:23 -> (fun ys:24 -> case xs:23^42 of {
//│ 	N => ys:24^43
//│ 	| C h:25 t:26 => [C h:25^44 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:17^45 ys:24^46) t:26^48)]}))
//│ def [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:15 = (fun xs:43 -> (fun ys:44 -> case xs:43^102 of {
//│ 	N => ys:44^103
//│ 	| C h:45 t:46 => [C h:45^104 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:16^105 ys:44^106) t:46^108)]}))
//│ def [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4]:14 = (fun xs:39 -> (fun ys:40 -> case xs:39^90 of {
//│ 	N => ys:40^91
//│ 	| C h:41 t:42 => [C h:41^92 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:15^93 ys:40^94) t:42^96)]}))
//│ def [inter:6^13 · inter:6^4 · inter:6^4]:13 = (fun xs:35 -> (fun ys:36 -> case xs:35^78 of {
//│ 	N => ys:36^79
//│ 	| C h:37 t:38 => [C h:37^80 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4]:14^81 ys:36^82) t:38^84)]}))
//│ def [inter:6^13 · inter:6^4]:12 = (fun xs:27 -> (fun ys:28 -> case xs:27^54 of {
//│ 	N => ys:28^55
//│ 	| C h:29 t:30 => [C h:29^56 (([inter:6^13 · inter:6^4 · inter:6^4]:13^57 ys:28^58) t:30^60)]}))
//│ def [inter:6^13]:11 = (fun xs:19 -> (fun ys:20 -> case xs:19^30 of {
//│ 	N => ys:20^31
//│ 	| C h:21 t:22 => [C h:21^32 (([inter:6^13 · inter:6^4]:12^33 ys:20^34) t:22^36)]}))
//│ def inter:6 = (fun xs:7 -> (fun ys:8 -> case xs:7^18 of {
//│ 	N => ys:8^19
//│ 	| C h:9 t:10 => [C h:9^20 ((inter:6^21 ys:8^22) t:10^24)]}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 130: [N]
//│ [N] --->
//│ 	case xs:47^114 of {N => ys:48^115 | C h:49 t:50 => [C h:49^116 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:18^117 ys:48^118) t:50^120)]}
//│ 131: [C 129: 3 130: [N]]
//│ [C 3 [N]] --->
//│ 	case xs:43^102 of {N => ys:44^103 | C h:45 t:46 => [C h:45^104 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:16^105 ys:44^106) t:46^108)]}
//│ 132: [C 128: 2 131: [C 129: 3 130: [N]]]
//│ [C 2 [C 3 [N]]] --->
//│ 	case xs:35^78 of {N => ys:36^79 | C h:37 t:38 => [C h:37^80 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4]:14^81 ys:36^82) t:38^84)]}
//│ 133: [C 127: 1 132: [C 128: 2 131: [C 129: 3 130: [N]]]]
//│ [C 1 [C 2 [C 3 [N]]]] --->
//│ 	case xs:19^30 of {N => ys:20^31 | C h:21 t:22 => [C h:21^32 (([inter:6^13 · inter:6^4]:12^33 ys:20^34) t:22^36)]}
//│ 138: [N]
//│ [N] --->
//│ 	case xs:31^66 of {N => ys:32^67 | C h:33 t:34 => [C h:33^68 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:17^69 ys:32^70) t:34^72)]}
//│ 139: [C 137: 7 138: [N]]
//│ [C 7 [N]] --->
//│ 	case xs:23^42 of {N => ys:24^43 | C h:25 t:26 => [C h:25^44 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:17^45 ys:24^46) t:26^48)]}
//│ 140: [C 136: 8 139: [C 137: 7 138: [N]]]
//│ [C 8 [C 7 [N]]] --->
//│ 	case xs:39^90 of {N => ys:40^91 | C h:41 t:42 => [C h:41^92 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:15^93 ys:40^94) t:42^96)]}
//│ 141: [C 135: 9 140: [C 136: 8 139: [C 137: 7 138: [N]]]]
//│ [C 9 [C 8 [C 7 [N]]]] --->
//│ 	case xs:27^54 of {N => ys:28^55 | C h:29 t:30 => [C h:29^56 (([inter:6^13 · inter:6^4 · inter:6^4]:13^57 ys:28^58) t:30^60)]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (([inter:6^13]:11^143 let h:21 = 1
//│ in let t:22 = 
//│ 	let h:37 = 2
//│ 	in let t:38 = 
//│ 		let h:45 = 3
//│ 		in let t:46 = ys:48^165
//│ 		in [C h:45^158 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:16^159 ys:44^160) t:46^162)]
//│ 	in [C h:37^151 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4]:14^152 ys:36^153) t:38^155)]
//│ in [C h:21^144 (([inter:6^13 · inter:6^4]:12^145 ys:20^146) t:22^148)]) let h:29 = 9
//│ in let t:30 = 
//│ 	let h:41 = 8
//│ 	in let t:42 = 
//│ 		let h:25 = 7
//│ 		in let t:26 = ys:32^197
//│ 		in [C h:25^190 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:17^191 ys:24^192) t:26^194)]
//│ 	in [C h:41^183 (([inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:15^184 ys:40^185) t:42^187)]
//│ in [C h:29^176 (([inter:6^13 · inter:6^4 · inter:6^4]:13^177 ys:28^178) t:30^180)])
//│ def [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:18 = (fun xs:31 -> (fun ys:32 -> xs:31^223))
//│ def [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:17 = (fun xs:47 -> (fun ys:48 -> xs:47^208))
//│ def [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:16 = (fun xs:23 -> (fun ys:24 -> xs:23^229))
//│ def [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4 · inter:6^4]:15 = (fun xs:43 -> (fun ys:44 -> xs:43^226))
//│ def [inter:6^13 · inter:6^4 · inter:6^4 · inter:6^4]:14 = (fun xs:39 -> (fun ys:40 -> xs:39^232))
//│ def [inter:6^13 · inter:6^4 · inter:6^4]:13 = (fun xs:35 -> (fun ys:36 -> xs:35^241))
//│ def [inter:6^13 · inter:6^4]:12 = (fun xs:27 -> (fun ys:28 -> xs:27^238))
//│ def [inter:6^13]:11 = (fun xs:19 -> (fun ys:20 -> xs:19^235))
//│ def inter:6 = (fun xs:7 -> (fun ys:8 -> case xs:7^211 of {
//│ 	N => ys:8^212
//│ 	| C h:9 t:10 => [C h:9^213 ((inter:6^214 ys:8^215) t:10^217)]}))
//│ <<<<<<< after fusion <<<<<<<

:ns
_LUMBERHACK_ERROR
let add = primitive
fun idxSum(ls) = if ls is
    N then acc => 0
    C(h, t) then acc => add(acc, idxSum(t)(add(acc, 1)))
fun rev(lss, a) = if lss is
    N then a
    C(hh, tt) then rev(tt, C(hh, a))
idxSum(rev(primitive, N))(0)
//│ |_LUMBERHACK_ERROR|↵|#let| |add| |#=| |primitive|↵|#fun| |idxSum|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |acc| |=>| |0|↵|C|(|h|,| |t|)| |#then| |acc| |=>| |add|(|acc|,| |idxSum|(|t|)|(|add|(|acc|,| |1|)|)|)|←|↵|#fun| |rev|(|lss|,| |a|)| |#=| |#if| |lss| |is|→|N| |#then| |a|↵|C|(|hh|,| |tt|)| |#then| |rev|(|tt|,| |C|(|hh|,| |a|)|)|←|↵|idxSum|(|rev|(|primitive|,| |N|)|)|(|0|)|
//│ Parsed: {_LUMBERHACK_ERROR; let add = primitive; fun idxSum = ls, => if ls is ‹(N) then acc, => 0; (C (h, t,)) then acc, => add (acc, idxSum (t,) (add (acc, 1,),),)›; fun rev = lss, a, => if lss is ‹(N) then a; (C (hh, tt,)) then rev (tt, C (hh, a,),)›; idxSum (rev (primitive, N,),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((idxSum:7^33 ((rev:8^34 primitive:3^35) [N])) 0)
//│ def add:4 = primitive:3^1
//│ def idxSum:7 = (fun ls:9 -> case ls:9^2 of {
//│ 	N => (fun acc:10 -> 0)
//│ 	| C h:11 t:12 => (fun acc:13 -> ((add:4^5 acc:13^6) ((idxSum:7^8 t:12^9) ((add:4^11 acc:13^12) 1))))})
//│ def rev:8 = (fun lss:14 -> (fun a:15 -> case lss:14^21 of {
//│ 	N => a:15^22
//│ 	| C hh:16 tt:17 => ((rev:8^23 tt:17^24) [C hh:16^26 a:15^27])}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(17'hh, 16'a) <: 3'ls
//│ 	[+rev:8^23 · +rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ 	[+rev:8^23 · +rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ NoProd <: 15'lss
//│ 	[+rev:8^34 · +rev:8^23 · +rev:8^23]  --->  [+rev:8^34 · +rev:8^23]
//│ NoProd <: 3'ls
//│ 	[+rev:8^34 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^34 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ 	[+rev:8^34 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^34 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ NoProd <: 6't
//│ 	[+rev:8^34 · +rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^34 · +rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]
//│ 	[+rev:8^34 · +rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^34 · +rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]
//│ 	[+rev:8^34 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^34 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ 	[+rev:8^34 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^34 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [idxSum:7^33 · idxSum:7^8 · idxSum:7^8] --> [idxSum:7^33 · idxSum:7^8]
//│ [rev:8^34 · rev:8^23 · rev:8^23] --> [rev:8^34 · rev:8^23]
//│ [rev:8^34 · rev:8^23] --> [rev:8^34 · rev:8^23]
//│ [rev:8^34] --> [rev:8^34]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [idxSum:7^33]
//│ 	[idxSum:7^33 · idxSum:7^8]
//│ 		[idxSum:7^33 · idxSum:7^8 · idxSum:7^8] ---> [idxSum:7^33 · idxSum:7^8] (only one)
//│ [rev:8^34]
//│ 	[rev:8^34 · rev:8^23]
//│ 		[rev:8^34 · rev:8^23 · rev:8^23] ---> [rev:8^34 · rev:8^23] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([idxSum:7^33]:20^104 (([rev:8^34]:18^105 primitive:3^106) [N])) 0)
//│ def [idxSum:7^33 · idxSum:7^8]:21 = (fun ls:26 -> case ls:26^54 of {
//│ 	N => (fun acc:27 -> 0)
//│ 	| C h:28 t:29 => (fun acc:30 -> ((add:4^57 acc:30^58) (([idxSum:7^33 · idxSum:7^8]:21^60 t:29^61) ((add:4^63 acc:30^64) 1))))})
//│ def [idxSum:7^33]:20 = (fun ls:31 -> case ls:31^73 of {
//│ 	N => (fun acc:32 -> 0)
//│ 	| C h:33 t:34 => (fun acc:35 -> ((add:4^76 acc:35^77) (([idxSum:7^33 · idxSum:7^8]:21^79 t:34^80) ((add:4^82 acc:35^83) 1))))})
//│ def [rev:8^34 · rev:8^23]:19 = (fun lss:22 -> (fun a:23 -> case lss:22^42 of {
//│ 	N => a:23^43
//│ 	| C hh:24 tt:25 => (([rev:8^34 · rev:8^23]:19^44 tt:25^45) [C hh:24^47 a:23^48])}))
//│ def [rev:8^34]:18 = (fun lss:36 -> (fun a:37 -> case lss:36^92 of {
//│ 	N => a:37^93
//│ 	| C hh:38 tt:39 => (([rev:8^34 · rev:8^23]:19^94 tt:39^95) [C hh:38^97 a:37^98])}))
//│ def add:4 = primitive:3^10
//│ def idxSum:7 = (fun ls:9 -> case ls:9^11 of {
//│ 	N => (fun acc:10 -> 0)
//│ 	| C h:11 t:12 => (fun acc:13 -> ((add:4^14 acc:13^15) ((idxSum:7^17 t:12^18) ((add:4^20 acc:13^21) 1))))})
//│ def rev:8 = (fun lss:14 -> (fun a:15 -> case lss:14^30 of {
//│ 	N => a:15^31
//│ 	| C hh:16 tt:17 => ((rev:8^32 tt:17^33) [C hh:16^35 a:15^36])}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 108: [N]
//│ [N] --->
//│ 	case ls:26^54 of {N => (fun acc:27 -> 0) | C h:28 t:29 => (fun acc:30 -> ((add:4^57 acc:30^58) (([idxSum:7^33 · idxSum:7^8]:21^60 t:29^61) ((add:4^63 acc:30^64) 1))))}
//│ 	case ls:31^73 of {N => (fun acc:32 -> 0) | C h:33 t:34 => (fun acc:35 -> ((add:4^76 acc:35^77) (([idxSum:7^33 · idxSum:7^8]:21^79 t:34^80) ((add:4^82 acc:35^83) 1))))}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 49: [C 47: hh:24^47 48: a:23^48]
//│ [C hh:24^47 a:23^48] --->
//│ 	case ls:26^54 of {N => (fun acc:27 -> 0) | C h:28 t:29 => (fun acc:30 -> ((add:4^57 acc:30^58) (([idxSum:7^33 · idxSum:7^8]:21^60 t:29^61) ((add:4^63 acc:30^64) 1))))}
//│ 	case ls:31^73 of {N => (fun acc:32 -> 0) | C h:33 t:34 => (fun acc:35 -> ((add:4^76 acc:35^77) (([idxSum:7^33 · idxSum:7^8]:21^79 t:34^80) ((add:4^82 acc:35^83) 1))))}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 99: [C 97: hh:38^97 98: a:37^98]
//│ [C hh:38^97 a:37^98] --->
//│ 	case ls:26^54 of {N => (fun acc:27 -> 0) | C h:28 t:29 => (fun acc:30 -> ((add:4^57 acc:30^58) (([idxSum:7^33 · idxSum:7^8]:21^60 t:29^61) ((add:4^63 acc:30^64) 1))))}
//│ 	case ls:31^73 of {N => (fun acc:32 -> 0) | C h:33 t:34 => (fun acc:35 -> ((add:4^76 acc:35^77) (([idxSum:7^33 · idxSum:7^8]:21^79 t:34^80) ((add:4^82 acc:35^83) 1))))}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (([idxSum:7^33]:20^113 (([rev:8^34]:18^114 primitive:3^115) (fun acc:32 -> 0))) 0)
//│ def [idxSum:7^33 · idxSum:7^8]:21 = (fun ls:26 -> case ls:26^123 of {
//│ 	N => (fun acc:27 -> 0)
//│ 	| C h:28 t:29 => (fun acc:30 -> ((add:4^126 acc:30^127) (([idxSum:7^33 · idxSum:7^8]:21^129 t:29^130) ((add:4^132 acc:30^133) 1))))})
//│ def [idxSum:7^33]:20 = (fun ls:31 -> ls:31^228)
//│ def [rev:8^34 · rev:8^23]:19 = (fun lss:22 -> (fun a:23 -> case lss:22^201 of {
//│ 	N => a:23^202
//│ 	| C hh:24 tt:25 => (([rev:8^34 · rev:8^23]:19^203 tt:25^204) let h:33 = hh:24^222
//│ 	in let t:34 = a:23^220
//│ 	in (fun acc:35 -> ((add:4^206 acc:35^207) (([idxSum:7^33 · idxSum:7^8]:21^209 t:34^210) ((add:4^212 acc:35^213) 1)))))}))
//│ def [rev:8^34]:18 = (fun lss:36 -> (fun a:37 -> case lss:36^142 of {
//│ 	N => a:37^143
//│ 	| C hh:38 tt:39 => (([rev:8^34 · rev:8^23]:19^144 tt:39^145) let h:33 = hh:38^163
//│ 	in let t:34 = a:37^161
//│ 	in (fun acc:35 -> ((add:4^147 acc:35^148) (([idxSum:7^33 · idxSum:7^8]:21^150 t:34^151) ((add:4^153 acc:35^154) 1)))))}))
//│ def add:4 = primitive:3^181
//│ def idxSum:7 = (fun ls:9 -> case ls:9^182 of {
//│ 	N => (fun acc:10 -> 0)
//│ 	| C h:11 t:12 => (fun acc:13 -> ((add:4^185 acc:13^186) ((idxSum:7^188 t:12^189) ((add:4^191 acc:13^192) 1))))})
//│ def rev:8 = (fun lss:14 -> (fun a:15 -> case lss:14^169 of {
//│ 	N => a:15^170
//│ 	| C hh:16 tt:17 => ((rev:8^171 tt:17^172) [C hh:16^174 a:15^175])}))
//│ <<<<<<< after fusion <<<<<<<


// scope extrusion
:ns
fun inter(xs) = if xs is
    N then ys => ys
    C(h0, t0) then ys => if ys is
        N then N2
        C(h1, t1) then C2(add(h0,h1), inter(t0, t1))
let l1 = C(1, C(2, C(1, C(2, N))))
// let rec l2 = N
let rec l2 = C(11, N)
inter(l1, l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h0|,| |t0|)| |#then| |ys| |=>| |#if| |ys| |is|→|N| |#then| |N2|↵|C|(|h1|,| |t1|)| |#then| |C2|(|add|(|h0|,|h1|)|,| |inter|(|t0|,| |t1|)|)|←|←|↵|#let| |l1| |#=| |C|(|1|,| |C|(|2|,| |C|(|1|,| |C|(|2|,| |N|)|)|)|)|↵|/* let rec l2 = N*/|↵|#let| |#rec| |l2| |#=| |C|(|11|,| |N|)|↵|inter|(|l1|,| |l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h0, t0,)) then ys, => if ys is ‹(N) then N2; (C (h1, t1,)) then C2 (add (h0, h1,), inter (t0, t1,),)››; let l1 = C (1, C (2, C (1, C (2, N,),),),); let rec l2 = C (11, N,); inter (l1, l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((inter:6^33 l1:7^34) l2:8^36)
//│ def inter:6 = (fun xs:9 -> case xs:9^1 of {
//│ 	N => (fun ys:10 -> ys:10^2)
//│ 	| C h0:11 t0:12 => (fun ys:13 -> case ys:13^4 of {
//│ 		N => [N2]
//│ 		| C h1:14 t1:15 => [C2 ((add:4^6 h0:11^7) h1:14^9) ((inter:6^11 t0:12^12) t1:15^14)]})})
//│ def l1:7 = [C 1 [C 2 [C 1 [C 2 [N]]]]]
//│ def l2:8 = [C 11 [N]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 9't1
//│ 	[-l2:8^36 · +inter:6^33 · +inter:6^11 · +inter:6^11]  --->  [-l2:8^36 · +inter:6^33 · +inter:6^11]
//│ NoProd <: 6't0
//│ 	[-l1:7^34 · +inter:6^33 · +inter:6^11 · +inter:6^11 · +inter:6^11 · +inter:6^11 · +inter:6^11]  --->  [-l1:7^34 · +inter:6^33 · +inter:6^11 · +inter:6^11 · +inter:6^11 · +inter:6^11]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [inter:6^33 · inter:6^11 · inter:6^11 · inter:6^11 · inter:6^11 · inter:6^11] --> [inter:6^33 · inter:6^11 · inter:6^11 · inter:6^11 · inter:6^11]
//│ [inter:6^33 · inter:6^11 · inter:6^11] --> [inter:6^33 · inter:6^11]
//│ [l1:7^34] --> [l1:7^34]
//│ [l2:8^36] --> [l2:8^36]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter:6^33]
//│ 	[inter:6^33 · inter:6^11]
//│ 		[inter:6^33 · inter:6^11 · inter:6^11] ---> [inter:6^33 · inter:6^11] (only one)
//│ [l1:7^34]
//│ 
//│ [l2:8^36]
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([inter:6^33]:17^90 [l1:7^34]:19^91) [l2:8^36]:16^93)
//│ def [inter:6^33 · inter:6^11]:18 = (fun xs:27 -> case xs:27^58 of {
//│ 	N => (fun ys:28 -> ys:28^59)
//│ 	| C h0:29 t0:30 => (fun ys:31 -> case ys:31^61 of {
//│ 		N => [N2]
//│ 		| C h1:32 t1:33 => [C2 ((add:4^63 h0:29^64) h1:32^66) (([inter:6^33 · inter:6^11]:18^68 t0:30^69) t1:33^71)]})})
//│ def [inter:6^33]:17 = (fun xs:20 -> case xs:20^38 of {
//│ 	N => (fun ys:21 -> ys:21^39)
//│ 	| C h0:22 t0:23 => (fun ys:24 -> case ys:24^41 of {
//│ 		N => [N2]
//│ 		| C h1:25 t1:26 => [C2 ((add:4^43 h0:22^44) h1:25^46) (([inter:6^33 · inter:6^11]:18^48 t0:23^49) t1:26^51)]})})
//│ def [l1:7^34]:19 = [C 1 [C 2 [C 1 [C 2 [N]]]]]
//│ def [l2:8^36]:16 = [C 11 [N]]
//│ def inter:6 = (fun xs:9 -> case xs:9^6 of {
//│ 	N => (fun ys:10 -> ys:10^7)
//│ 	| C h0:11 t0:12 => (fun ys:13 -> case ys:13^9 of {
//│ 		N => [N2]
//│ 		| C h1:14 t1:15 => [C2 ((add:4^11 h0:11^12) h1:14^14) ((inter:6^16 t0:12^17) t1:15^19)]})})
//│ def l1:7 = [C 1 [C 2 [C 1 [C 2 [N]]]]]
//│ def l2:8 = [C 11 [N]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 82: [N]
//│ [N] --->
//│ 	case xs:27^58 of {N => (fun ys:28 -> ys:28^59) | C h0:29 t0:30 => (fun ys:31 -> case ys:31^61 of {N => [N2] | C h1:32 t1:33 => [C2 ((add:4^63 h0:29^64) h1:32^66) (([inter:6^33 · inter:6^11]:18^68 t0:30^69) t1:33^71)]})}
//│ 83: [C 81: 2 82: [N]]
//│ [C 2 [N]] --->
//│ 	case xs:27^58 of {N => (fun ys:28 -> ys:28^59) | C h0:29 t0:30 => (fun ys:31 -> case ys:31^61 of {N => [N2] | C h1:32 t1:33 => [C2 ((add:4^63 h0:29^64) h1:32^66) (([inter:6^33 · inter:6^11]:18^68 t0:30^69) t1:33^71)]})}
//│ 84: [C 80: 1 83: [C 81: 2 82: [N]]]
//│ [C 1 [C 2 [N]]] --->
//│ 	case xs:27^58 of {N => (fun ys:28 -> ys:28^59) | C h0:29 t0:30 => (fun ys:31 -> case ys:31^61 of {N => [N2] | C h1:32 t1:33 => [C2 ((add:4^63 h0:29^64) h1:32^66) (([inter:6^33 · inter:6^11]:18^68 t0:30^69) t1:33^71)]})}
//│ 85: [C 79: 2 84: [C 80: 1 83: [C 81: 2 82: [N]]]]
//│ [C 2 [C 1 [C 2 [N]]]] --->
//│ 	case xs:27^58 of {N => (fun ys:28 -> ys:28^59) | C h0:29 t0:30 => (fun ys:31 -> case ys:31^61 of {N => [N2] | C h1:32 t1:33 => [C2 ((add:4^63 h0:29^64) h1:32^66) (([inter:6^33 · inter:6^11]:18^68 t0:30^69) t1:33^71)]})}
//│ 86: [C 78: 1 85: [C 79: 2 84: [C 80: 1 83: [C 81: 2 82: [N]]]]]
//│ [C 1 [C 2 [C 1 [C 2 [N]]]]] --->
//│ 	case xs:20^38 of {N => (fun ys:21 -> ys:21^39) | C h0:22 t0:23 => (fun ys:24 -> case ys:24^41 of {N => [N2] | C h1:25 t1:26 => [C2 ((add:4^43 h0:22^44) h1:25^46) (([inter:6^33 · inter:6^11]:18^48 t0:23^49) t1:26^51)]})}
//│ 88: [N]
//│ [N] --->
//│ 	case ys:31^61 of {N => [N2] | C h1:32 t1:33 => [C2 ((add:4^63 h0:29^64) h1:32^66) (([inter:6^33 · inter:6^11]:18^68 t0:30^69) t1:33^71)]}
//│ 89: [C 87: 11 88: [N]]
//│ [C 11 [N]] --->
//│ 	case ys:24^41 of {N => [N2] | C h1:25 t1:26 => [C2 ((add:4^43 h0:22^44) h1:25^46) (([inter:6^33 · inter:6^11]:18^48 t0:23^49) t1:26^51)]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (([inter:6^33]:17^95 [l1:7^34]:19^96) [l2:8^36]:16^98)
//│ def [inter:6^33 · inter:6^11]:18 = (fun xs:27 -> xs:27^169)
//│ def [inter:6^33]:17 = (fun xs:20 -> xs:20^171)
//│ def [l1:7^34]:19 = let h0:22 = 1
//│ in let t0:23 = 
//│ 	let h0:29 = 2
//│ 	in let t0:30 = 
//│ 		let h0:29 = 1
//│ 		in let t0:30 = 
//│ 			let h0:29 = 2
//│ 			in let t0:30 = (fun ys:28 -> ys:28^131)
//│ 			in (fun ys:31 -> ys:31^129)
//│ 		in (fun ys:31 -> ys:31^127)
//│ 	in (fun ys:31 -> ys:31^125)
//│ in (fun ys:24 -> ys:24^123)
//│ def [l2:8^36]:16 = let h1:25 = 11
//│ in let t1:26 = [N2]
//│ in [C2 ((add:4^145 h0:22^146) h1:25^148) (([inter:6^33 · inter:6^11]:18^150 t0:23^151) t1:26^153)]
//│ def inter:6 = (fun xs:9 -> case xs:9^100 of {
//│ 	N => (fun ys:10 -> ys:10^101)
//│ 	| C h0:11 t0:12 => (fun ys:13 -> case ys:13^103 of {
//│ 		N => [N2]
//│ 		| C h1:14 t1:15 => [C2 ((add:4^105 h0:11^106) h1:14^108) ((inter:6^110 t0:12^111) t1:15^113)]})})
//│ def l1:7 = [C 1 [C 2 [C 1 [C 2 [N]]]]]
//│ def l2:8 = [C 11 [N]]
//│ <<<<<<< after fusion <<<<<<<


:ns
let rec p = C(C(C(id(p))))
fun c(x) = if x is
    C(a) then if a is
        C(b) then c(b)
fun id2(z) = z
fun id(y) = id2(y)
fun id3(d) = d
c(id3(p))
//│ |#let| |#rec| |p| |#=| |C|(|C|(|C|(|id|(|p|)|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|b|)| |#then| |c|(|b|)|←|←|↵|#fun| |id2|(|z|)| |#=| |z|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|#fun| |id3|(|d|)| |#=| |d|↵|c|(|id3|(|p|)|)|
//│ Parsed: {let rec p = C (C (C (id (p,),),),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (b,)) then c (b,)››; fun id2 = z, => z; fun id = y, => id2 (y,); fun id3 = d, => d; c (id3 (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:7^23 (id3:10^24 p:6^25))
//│ def c:7 = (fun x:11 -> case x:11^7 of {
//│ 	C a:12 => case a:12^8 of {
//│ 		C b:13 => (c:7^9 b:13^10)}})
//│ def id:9 = (fun y:15 -> (id2:8^17 y:15^18))
//│ def id2:8 = (fun z:14 -> z:14^15)
//│ def id3:10 = (fun d:16 -> d:16^21)
//│ def p:6 = [C [C [C (id:9^1 p:6^2)]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(C(5'3_callres))) <: 7'a
//│ 	[-p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^25 · +id3:10^24 · -id3:10^24 · +c:7^23 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^25 · +id3:10^24 · -id3:10^24 · +c:7^23 · +c:7^9]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [c:7^23 · c:7^9 · c:7^9 · c:7^9 · c:7^9] --> [c:7^23 · c:7^9]
//│ [p:6^25 · p:6^2 · p:6^2 · p:6^2] --> [p:6^25 · p:6^2]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:7^23]
//│ 	[c:7^23 · c:7^9]
//│ 		[c:7^23 · c:7^9 · c:7^9]
//│ 			[c:7^23 · c:7^9 · c:7^9 · c:7^9]
//│ 				[c:7^23 · c:7^9 · c:7^9 · c:7^9 · c:7^9] ---> [c:7^23 · c:7^9] (only one)
//│ [id3:10^24] ---> [id3:10^24] (hopeless to continue)
//│ [p:6^25]
//│ 	[p:6^25 · p:6^2]
//│ 		[p:6^25 · p:6^2 · p:6^2]
//│ 			[p:6^25 · p:6^2 · p:6^2 · p:6^2] ---> [p:6^25 · p:6^2] (only one)
//│ 			[p:6^25 · p:6^2 · p:6^2 · id:9^1] ---> [id:9^1] (hopeless to continue)
//│ 		[p:6^25 · p:6^2 · id:9^1] ---> [id:9^1] (hopeless to continue)
//│ 	[p:6^25 · id:9^1] ---> [id:9^1] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([c:7^23]:17^78 (id3:6^79 [p:6^25]:21^80))
//│ def [c:7^23 · c:7^9 · c:7^9 · c:7^9]:20 = (fun x:27 -> case x:27^42 of {
//│ 	C a:28 => case a:28^43 of {
//│ 		C b:29 => ([c:7^23 · c:7^9]:18^44 b:29^45)}})
//│ def [c:7^23 · c:7^9 · c:7^9]:19 = (fun x:33 -> case x:33^64 of {
//│ 	C a:34 => case a:34^65 of {
//│ 		C b:35 => ([c:7^23 · c:7^9 · c:7^9 · c:7^9]:20^66 b:35^67)}})
//│ def [c:7^23 · c:7^9]:18 = (fun x:24 -> case x:24^34 of {
//│ 	C a:25 => case a:25^35 of {
//│ 		C b:26 => ([c:7^23 · c:7^9 · c:7^9]:19^36 b:26^37)}})
//│ def [c:7^23]:17 = (fun x:30 -> case x:30^56 of {
//│ 	C a:31 => case a:31^57 of {
//│ 		C b:32 => ([c:7^23 · c:7^9]:18^58 b:32^59)}})
//│ def [p:6^25 · p:6^2 · p:6^2]:23 = [C [C [C (id:8^28 [p:6^25 · p:6^2]:22^29)]]]
//│ def [p:6^25 · p:6^2]:22 = [C [C [C (id:8^50 [p:6^25 · p:6^2 · p:6^2]:23^51)]]]
//│ def [p:6^25]:21 = [C [C [C (id:8^72 [p:6^25 · p:6^2]:22^73)]]]
//│ def c:10 = (fun x:14 -> case x:14^20 of {
//│ 	C a:15 => case a:15^21 of {
//│ 		C b:16 => (c:10^22 b:16^23)}})
//│ def id:8 = (fun y:13 -> (id2:7^10 y:13^11))
//│ def id2:7 = (fun z:12 -> z:12^8)
//│ def id3:6 = (fun d:11 -> d:11^6)
//│ def p:9 = [C [C [C (id:8^14 p:9^15)]]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 17: [C 16: (14: id:8^14 15: p:9^15)]
//│ [C (id:8^14 p:9^15)] --->
//│ 	case a:34^65 of {C b:35 => ([c:7^23 · c:7^9 · c:7^9 · c:7^9]:20^66 b:35^67)}
//│ 	case x:24^34 of {C a:25 => case a:25^35 of {C b:26 => ([c:7^23 · c:7^9 · c:7^9]:19^36 b:26^37)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 18: [C 17: [C 16: (14: id:8^14 15: p:9^15)]]
//│ [C [C (id:8^14 p:9^15)]] --->
//│ 	case a:28^43 of {C b:29 => ([c:7^23 · c:7^9]:18^44 b:29^45)}
//│ 	case x:33^64 of {C a:34 => case a:34^65 of {C b:35 => ([c:7^23 · c:7^9 · c:7^9 · c:7^9]:20^66 b:35^67)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 19: [C 18: [C 17: [C 16: (14: id:8^14 15: p:9^15)]]]
//│ [C [C [C (id:8^14 p:9^15)]]] --->
//│ 	case a:25^35 of {C b:26 => ([c:7^23 · c:7^9 · c:7^9]:19^36 b:26^37)}
//│ 	case x:27^42 of {C a:28 => case a:28^43 of {C b:29 => ([c:7^23 · c:7^9]:18^44 b:29^45)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 31: [C 30: (28: id:8^28 29: [p:6^25 · p:6^2]:22^29)]
//│ [C (id:8^28 [p:6^25 · p:6^2]:22^29)] --->
//│ 	case a:34^65 of {C b:35 => ([c:7^23 · c:7^9 · c:7^9 · c:7^9]:20^66 b:35^67)}
//│ 	case x:24^34 of {C a:25 => case a:25^35 of {C b:26 => ([c:7^23 · c:7^9 · c:7^9]:19^36 b:26^37)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 32: [C 31: [C 30: (28: id:8^28 29: [p:6^25 · p:6^2]:22^29)]]
//│ [C [C (id:8^28 [p:6^25 · p:6^2]:22^29)]] --->
//│ 	case a:28^43 of {C b:29 => ([c:7^23 · c:7^9]:18^44 b:29^45)}
//│ 	case x:33^64 of {C a:34 => case a:34^65 of {C b:35 => ([c:7^23 · c:7^9 · c:7^9 · c:7^9]:20^66 b:35^67)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 33: [C 32: [C 31: [C 30: (28: id:8^28 29: [p:6^25 · p:6^2]:22^29)]]]
//│ [C [C [C (id:8^28 [p:6^25 · p:6^2]:22^29)]]] --->
//│ 	case a:25^35 of {C b:26 => ([c:7^23 · c:7^9 · c:7^9]:19^36 b:26^37)}
//│ 	case x:27^42 of {C a:28 => case a:28^43 of {C b:29 => ([c:7^23 · c:7^9]:18^44 b:29^45)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 53: [C 52: (50: id:8^50 51: [p:6^25 · p:6^2 · p:6^2]:23^51)]
//│ [C (id:8^50 [p:6^25 · p:6^2 · p:6^2]:23^51)] --->
//│ 	case a:34^65 of {C b:35 => ([c:7^23 · c:7^9 · c:7^9 · c:7^9]:20^66 b:35^67)}
//│ 	case x:24^34 of {C a:25 => case a:25^35 of {C b:26 => ([c:7^23 · c:7^9 · c:7^9]:19^36 b:26^37)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 54: [C 53: [C 52: (50: id:8^50 51: [p:6^25 · p:6^2 · p:6^2]:23^51)]]
//│ [C [C (id:8^50 [p:6^25 · p:6^2 · p:6^2]:23^51)]] --->
//│ 	case a:28^43 of {C b:29 => ([c:7^23 · c:7^9]:18^44 b:29^45)}
//│ 	case x:33^64 of {C a:34 => case a:34^65 of {C b:35 => ([c:7^23 · c:7^9 · c:7^9 · c:7^9]:20^66 b:35^67)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 55: [C 54: [C 53: [C 52: (50: id:8^50 51: [p:6^25 · p:6^2 · p:6^2]:23^51)]]]
//│ [C [C [C (id:8^50 [p:6^25 · p:6^2 · p:6^2]:23^51)]]] --->
//│ 	case a:25^35 of {C b:26 => ([c:7^23 · c:7^9 · c:7^9]:19^36 b:26^37)}
//│ 	case x:27^42 of {C a:28 => case a:28^43 of {C b:29 => ([c:7^23 · c:7^9]:18^44 b:29^45)}}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 75: [C 74: (72: id:8^72 73: [p:6^25 · p:6^2]:22^73)]
//│ [C (id:8^72 [p:6^25 · p:6^2]:22^73)] --->
//│ 	case x:24^34 of {C a:25 => case a:25^35 of {C b:26 => ([c:7^23 · c:7^9 · c:7^9]:19^36 b:26^37)}}
//│ 76: [C 75: [C 74: (72: id:8^72 73: [p:6^25 · p:6^2]:22^73)]]
//│ [C [C (id:8^72 [p:6^25 · p:6^2]:22^73)]] --->
//│ 	case a:31^57 of {C b:32 => ([c:7^23 · c:7^9]:18^58 b:32^59)}
//│ 77: [C 76: [C 75: [C 74: (72: id:8^72 73: [p:6^25 · p:6^2]:22^73)]]]
//│ [C [C [C (id:8^72 [p:6^25 · p:6^2]:22^73)]]] --->
//│ 	case x:30^56 of {C a:31 => case a:31^57 of {C b:32 => ([c:7^23 · c:7^9]:18^58 b:32^59)}}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([c:7^23]:17^83 (id3:6^84 [p:6^25]:21^85))
//│ def [c:7^23 · c:7^9 · c:7^9 · c:7^9]:20 = (fun x:27 -> x:27^120)
//│ def [c:7^23 · c:7^9 · c:7^9]:19 = (fun x:33 -> x:33^116)
//│ def [c:7^23 · c:7^9]:18 = (fun x:24 -> x:24^101)
//│ def [c:7^23]:17 = (fun x:30 -> x:30^118)
//│ def [p:6^25 · p:6^2 · p:6^2]:23 = let b:26 = 
//│ 	let a:34 = 
//│ 		let b:35 = (id:8^95 [p:6^25 · p:6^2]:22^96)
//│ 		in ([c:7^23 · c:7^9 · c:7^9 · c:7^9]:20^92 b:35^93)
//│ 	in a:34^91
//│ in ([c:7^23 · c:7^9 · c:7^9]:19^88 b:26^89)
//│ def [p:6^25 · p:6^2]:22 = let a:28 = 
//│ 	let b:29 = 
//│ 		let a:25 = (id:8^146 [p:6^25 · p:6^2 · p:6^2]:23^147)
//│ 		in a:25^145
//│ 	in ([c:7^23 · c:7^9]:18^142 b:29^143)
//│ in a:28^141
//│ def [p:6^25]:21 = let a:31 = 
//│ 	let b:32 = 
//│ 		let a:25 = (id:8^108 [p:6^25 · p:6^2]:22^109)
//│ 		in a:25^107
//│ 	in ([c:7^23 · c:7^9]:18^104 b:32^105)
//│ in a:31^103
//│ def c:10 = (fun x:14 -> case x:14^152 of {
//│ 	C a:15 => case a:15^153 of {
//│ 		C b:16 => (c:10^154 b:16^155)}})
//│ def id:8 = (fun y:13 -> (id2:7^137 y:13^138))
//│ def id2:7 = (fun z:12 -> z:12^135)
//│ def id3:6 = (fun d:11 -> d:11^114)
//│ def p:9 = let b:26 = 
//│ 	let a:34 = 
//│ 		let b:35 = (id:8^129 p:9^130)
//│ 		in ([c:7^23 · c:7^9 · c:7^9 · c:7^9]:20^126 b:35^127)
//│ 	in a:34^125
//│ in ([c:7^23 · c:7^9 · c:7^9]:19^122 b:26^123)
//│ <<<<<<< after fusion <<<<<<<

:ns
fun id(k) = k
fun id1(x) = id(x)
fun id2(y) = y
fun id3(z) = z
let rec p = C(C(C(id7(C(C(id1(p)))))))
fun c(xx) = if xx is
    C(a) then c(a)
fun id4(k) = k
fun id5(j) = j
fun id6(l) = l
fun id7(i) = i
id6(id4)(c)(id5(id2)(id3(p)))
//│ |#fun| |id|(|k|)| |#=| |k|↵|#fun| |id1|(|x|)| |#=| |id|(|x|)|↵|#fun| |id2|(|y|)| |#=| |y|↵|#fun| |id3|(|z|)| |#=| |z|↵|#let| |#rec| |p| |#=| |C|(|C|(|C|(|id7|(|C|(|C|(|id1|(|p|)|)|)|)|)|)|)|↵|#fun| |c|(|xx|)| |#=| |#if| |xx| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |id4|(|k|)| |#=| |k|↵|#fun| |id5|(|j|)| |#=| |j|↵|#fun| |id6|(|l|)| |#=| |l|↵|#fun| |id7|(|i|)| |#=| |i|↵|id6|(|id4|)|(|c|)|(|id5|(|id2|)|(|id3|(|p|)|)|)|
//│ Parsed: {fun id = k, => k; fun id1 = x, => id (x,); fun id2 = y, => y; fun id3 = z, => z; let rec p = C (C (C (id7 (C (C (id1 (p,),),),),),),); fun c = xx, => if xx is ‹(C (a,)) then c (a,)›; fun id4 = k, => k; fun id5 = j, => j; fun id6 = l, => l; fun id7 = i, => i; id6 (id4,) (c,) (id5 (id2,) (id3 (p,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (((id6:14^35 id4:12^36) c:11^38) ((id5:13^40 id2:8^41) (id3:9^43 p:10^44)))
//│ def c:11 = (fun xx:20 -> case xx:20^21 of {
//│ 	C a:21 => (c:11^22 a:21^23)})
//│ def id:6 = (fun k:16 -> k:16^1)
//│ def id1:7 = (fun x:17 -> (id:6^3 x:17^4))
//│ def id2:8 = (fun y:18 -> y:18^7)
//│ def id3:9 = (fun z:19 -> z:19^9)
//│ def id4:12 = (fun k:22 -> k:22^27)
//│ def id5:13 = (fun j:23 -> j:23^29)
//│ def id6:14 = (fun l:24 -> l:24^31)
//│ def id7:15 = (fun i:25 -> i:25^33)
//│ def p:10 = [C [C [C (id7:15^11 [C [C (id1:7^12 p:10^13)]])]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(C(16'17_callres))) <: 18'a
//│ 	[-p:10^13 · +id1:7^12 · +id:6^3 · -id:6^3 · -id1:7^12 · +id7:15^11 · -id7:15^11 · -p:10^13 · +id1:7^12 · +id:6^3 · -id:6^3 · -id1:7^12 · +id7:15^11 · -id7:15^11 · -p:10^44 · +id3:9^43 · -id3:9^43 · +id5:13^40 · -id5:13^40 · +id2:8^41 · -id2:8^41 · +id5:13^40 · -id5:13^40 · +id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22]  --->  [-p:10^13 · +id1:7^12 · +id:6^3 · -id:6^3 · -id1:7^12 · +id7:15^11 · -id7:15^11 · -p:10^44 · +id3:9^43 · -id3:9^43 · +id5:13^40 · -id5:13^40 · +id2:8^41 · -id2:8^41 · +id5:13^40 · -id5:13^40 · +id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22] --> [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]
//│ [p:10^44 · p:10^13 · p:10^13] --> [p:10^44 · p:10^13]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:11^38]
//│ 	[c:11^38 · c:11^22]
//│ 		[c:11^38 · c:11^22 · c:11^22]
//│ 			[c:11^38 · c:11^22 · c:11^22 · c:11^22]
//│ 				[c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]
//│ 					[c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]
//│ 						[c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]
//│ 							[c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]
//│ 								[c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]
//│ 									[c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22] ---> [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22] (only one)
//│ [id2:8^41] ---> [id2:8^41] (hopeless to continue)
//│ [id3:9^43] ---> [id3:9^43] (hopeless to continue)
//│ [id4:12^36] ---> [id4:12^36] (hopeless to continue)
//│ [id5:13^40] ---> [id5:13^40] (hopeless to continue)
//│ [id6:14^35] ---> [id6:14^35] (hopeless to continue)
//│ [p:10^44]
//│ 	[p:10^44 · id1:7^12] ---> [id1:7^12] (hopeless to continue)
//│ 	[p:10^44 · id7:15^11] ---> [id7:15^11] (hopeless to continue)
//│ 	[p:10^44 · p:10^13]
//│ 		[p:10^44 · p:10^13 · id1:7^12] ---> [id1:7^12] (hopeless to continue)
//│ 		[p:10^44 · p:10^13 · id7:15^11] ---> [id7:15^11] (hopeless to continue)
//│ 		[p:10^44 · p:10^13 · p:10^13] ---> [p:10^44 · p:10^13] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (((id6:6^122 id4:12^123) [c:11^38]:26^125) ((id5:15^127 id2:14^128) (id3:9^130 [p:10^44]:35^131)))
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:34 = (fun xx:49 -> case xx:49^104 of {
//│ 	C a:50 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:30^105 a:50^106)})
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:33 = (fun xx:43 -> case xx:43^66 of {
//│ 	C a:44 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:34^67 a:44^68)})
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:32 = (fun xx:51 -> case xx:51^110 of {
//│ 	C a:52 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:33^111 a:52^112)})
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:31 = (fun xx:53 -> case xx:53^116 of {
//│ 	C a:54 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:32^117 a:54^118)})
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:30 = (fun xx:45 -> case xx:45^72 of {
//│ 	C a:46 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:31^73 a:46^74)})
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22]:29 = (fun xx:41 -> case xx:41^60 of {
//│ 	C a:42 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:30^61 a:42^62)})
//│ def [c:11^38 · c:11^22 · c:11^22]:28 = (fun xx:47 -> case xx:47^88 of {
//│ 	C a:48 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22]:29^89 a:48^90)})
//│ def [c:11^38 · c:11^22]:27 = (fun xx:37 -> case xx:37^48 of {
//│ 	C a:38 => ([c:11^38 · c:11^22 · c:11^22]:28^49 a:38^50)})
//│ def [c:11^38]:26 = (fun xx:39 -> case xx:39^54 of {
//│ 	C a:40 => ([c:11^38 · c:11^22]:27^55 a:40^56)})
//│ def [p:10^44 · p:10^13]:36 = [C [C [C (id7:8^78 [C [C (id1:7^79 [p:10^44 · p:10^13]:36^80)]])]]]
//│ def [p:10^44]:35 = [C [C [C (id7:8^94 [C [C (id1:7^95 [p:10^44 · p:10^13]:36^96)]])]]]
//│ def c:10 = (fun xx:20 -> case xx:20^24 of {
//│ 	C a:21 => (c:10^25 a:21^26)})
//│ def id:13 = (fun k:23 -> k:23^42)
//│ def id1:7 = (fun x:17 -> (id:13^16 x:17^17))
//│ def id2:14 = (fun y:24 -> y:24^44)
//│ def id3:9 = (fun z:19 -> z:19^22)
//│ def id4:12 = (fun k:22 -> k:22^40)
//│ def id5:15 = (fun j:25 -> j:25^46)
//│ def id6:6 = (fun l:16 -> l:16^14)
//│ def id7:8 = (fun i:18 -> i:18^20)
//│ def p:11 = [C [C [C (id7:8^30 [C [C (id1:7^31 p:11^32)]])]]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 101: [C 100: (94: id7:8^94 99: [C 98: [C 97: (95: id1:7^95 96: [p:10^44 · p:10^13]:36^96)]])]
//│ [C (id7:8^94 [C [C (id1:7^95 [p:10^44 · p:10^13]:36^96)]])] --->
//│ 	case xx:47^88 of {C a:48 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22]:29^89 a:48^90)}
//│ 102: [C 101: [C 100: (94: id7:8^94 99: [C 98: [C 97: (95: id1:7^95 96: [p:10^44 · p:10^13]:36^96)]])]]
//│ [C [C (id7:8^94 [C [C (id1:7^95 [p:10^44 · p:10^13]:36^96)]])]] --->
//│ 	case xx:37^48 of {C a:38 => ([c:11^38 · c:11^22 · c:11^22]:28^49 a:38^50)}
//│ 103: [C 102: [C 101: [C 100: (94: id7:8^94 99: [C 98: [C 97: (95: id1:7^95 96: [p:10^44 · p:10^13]:36^96)]])]]]
//│ [C [C [C (id7:8^94 [C [C (id1:7^95 [p:10^44 · p:10^13]:36^96)]])]]] --->
//│ 	case xx:39^54 of {C a:40 => ([c:11^38 · c:11^22]:27^55 a:40^56)}
//│ 34: [C 33: (31: id1:7^31 32: p:11^32)]
//│ [C (id1:7^31 p:11^32)] --->
//│ 	case xx:45^72 of {C a:46 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:31^73 a:46^74)}
//│ 35: [C 34: [C 33: (31: id1:7^31 32: p:11^32)]]
//│ [C [C (id1:7^31 p:11^32)]] --->
//│ 	case xx:41^60 of {C a:42 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:30^61 a:42^62)}
//│ 	case xx:49^104 of {C a:50 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:30^105 a:50^106)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 37: [C 36: (30: id7:8^30 35: [C 34: [C 33: (31: id1:7^31 32: p:11^32)]])]
//│ [C (id7:8^30 [C [C (id1:7^31 p:11^32)]])] --->
//│ 	case xx:43^66 of {C a:44 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:34^67 a:44^68)}
//│ 38: [C 37: [C 36: (30: id7:8^30 35: [C 34: [C 33: (31: id1:7^31 32: p:11^32)]])]]
//│ [C [C (id7:8^30 [C [C (id1:7^31 p:11^32)]])]] --->
//│ 	case xx:51^110 of {C a:52 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:33^111 a:52^112)}
//│ 39: [C 38: [C 37: [C 36: (30: id7:8^30 35: [C 34: [C 33: (31: id1:7^31 32: p:11^32)]])]]]
//│ [C [C [C (id7:8^30 [C [C (id1:7^31 p:11^32)]])]]] --->
//│ 	case xx:53^116 of {C a:54 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:32^117 a:54^118)}
//│ 82: [C 81: (79: id1:7^79 80: [p:10^44 · p:10^13]:36^80)]
//│ [C (id1:7^79 [p:10^44 · p:10^13]:36^80)] --->
//│ 	case xx:45^72 of {C a:46 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:31^73 a:46^74)}
//│ 83: [C 82: [C 81: (79: id1:7^79 80: [p:10^44 · p:10^13]:36^80)]]
//│ [C [C (id1:7^79 [p:10^44 · p:10^13]:36^80)]] --->
//│ 	case xx:41^60 of {C a:42 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:30^61 a:42^62)}
//│ 	case xx:49^104 of {C a:50 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:30^105 a:50^106)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 85: [C 84: (78: id7:8^78 83: [C 82: [C 81: (79: id1:7^79 80: [p:10^44 · p:10^13]:36^80)]])]
//│ [C (id7:8^78 [C [C (id1:7^79 [p:10^44 · p:10^13]:36^80)]])] --->
//│ 	case xx:43^66 of {C a:44 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:34^67 a:44^68)}
//│ 86: [C 85: [C 84: (78: id7:8^78 83: [C 82: [C 81: (79: id1:7^79 80: [p:10^44 · p:10^13]:36^80)]])]]
//│ [C [C (id7:8^78 [C [C (id1:7^79 [p:10^44 · p:10^13]:36^80)]])]] --->
//│ 	case xx:51^110 of {C a:52 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:33^111 a:52^112)}
//│ 87: [C 86: [C 85: [C 84: (78: id7:8^78 83: [C 82: [C 81: (79: id1:7^79 80: [p:10^44 · p:10^13]:36^80)]])]]]
//│ [C [C [C (id7:8^78 [C [C (id1:7^79 [p:10^44 · p:10^13]:36^80)]])]]] --->
//│ 	case xx:53^116 of {C a:54 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:32^117 a:54^118)}
//│ 98: [C 97: (95: id1:7^95 96: [p:10^44 · p:10^13]:36^96)]
//│ [C (id1:7^95 [p:10^44 · p:10^13]:36^96)] --->
//│ 	case xx:45^72 of {C a:46 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:31^73 a:46^74)}
//│ 99: [C 98: [C 97: (95: id1:7^95 96: [p:10^44 · p:10^13]:36^96)]]
//│ [C [C (id1:7^95 [p:10^44 · p:10^13]:36^96)]] --->
//│ 	case xx:41^60 of {C a:42 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:30^61 a:42^62)}
//│ 	case xx:49^104 of {C a:50 => ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:30^105 a:50^106)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (((id6:6^135 id4:12^136) [c:11^38]:26^138) ((id5:15^140 id2:14^141) (id3:9^143 [p:10^44]:35^144)))
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:34 = (fun xx:49 -> xx:49^152)
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:33 = (fun xx:43 -> xx:43^160)
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:32 = (fun xx:51 -> xx:51^154)
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:31 = (fun xx:53 -> xx:53^236)
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:30 = (fun xx:45 -> xx:45^158)
//│ def [c:11^38 · c:11^22 · c:11^22 · c:11^22]:29 = (fun xx:41 -> xx:41^156)
//│ def [c:11^38 · c:11^22 · c:11^22]:28 = (fun xx:47 -> xx:47^201)
//│ def [c:11^38 · c:11^22]:27 = (fun xx:37 -> xx:37^174)
//│ def [c:11^38]:26 = (fun xx:39 -> xx:39^170)
//│ def [p:10^44 · p:10^13]:36 = let a:54 = 
//│ 	let a:52 = 
//│ 		let a:44 = (id7:8^218 let a:50 = 
//│ 			let a:46 = (id1:7^225 [p:10^44 · p:10^13]:36^226)
//│ 			in ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:31^222 a:46^223)
//│ 		in ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:30^219 a:50^220))
//│ 		in ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:34^215 a:44^216)
//│ 	in ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:33^212 a:52^213)
//│ in ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:32^209 a:54^210)
//│ def [p:10^44]:35 = let a:40 = 
//│ 	let a:38 = 
//│ 		let a:48 = (id7:8^185 let a:50 = 
//│ 			let a:46 = (id1:7^192 [p:10^44 · p:10^13]:36^193)
//│ 			in ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:31^189 a:46^190)
//│ 		in ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:30^186 a:50^187))
//│ 		in ([c:11^38 · c:11^22 · c:11^22 · c:11^22]:29^182 a:48^183)
//│ 	in ([c:11^38 · c:11^22 · c:11^22]:28^179 a:38^180)
//│ in ([c:11^38 · c:11^22]:27^176 a:40^177)
//│ def c:10 = (fun xx:20 -> case xx:20^162 of {
//│ 	C a:21 => (c:10^163 a:21^164)})
//│ def id:13 = (fun k:23 -> k:23^234)
//│ def id1:7 = (fun x:17 -> (id:13^205 x:17^206))
//│ def id2:14 = (fun y:24 -> y:24^263)
//│ def id3:9 = (fun z:19 -> z:19^168)
//│ def id4:12 = (fun k:22 -> k:22^172)
//│ def id5:15 = (fun j:25 -> j:25^150)
//│ def id6:6 = (fun l:16 -> l:16^148)
//│ def id7:8 = (fun i:18 -> i:18^203)
//│ def p:11 = let a:54 = 
//│ 	let a:52 = 
//│ 		let a:44 = (id7:8^247 let a:42 = 
//│ 			let a:46 = (id1:7^254 p:11^255)
//│ 			in ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:31^251 a:46^252)
//│ 		in ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:30^248 a:42^249))
//│ 		in ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:34^244 a:44^245)
//│ 	in ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:33^241 a:52^242)
//│ in ([c:11^38 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22 · c:11^22]:32^238 a:54^239)
//│ <<<<<<< after fusion <<<<<<<

_LUMBERHACK_ERROR
fun id(x) = if x is
    ID(b) then b
    C(a) then id(ID(x))
let p = C(p)
fun c(y) = if y is
    C(aa) then c(aa)
c(id(p))
//│ |_LUMBERHACK_ERROR|↵|#fun| |id|(|x|)| |#=| |#if| |x| |is|→|ID|(|b|)| |#then| |b|↵|C|(|a|)| |#then| |id|(|ID|(|x|)|)|←|↵|#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|y|)| |#=| |#if| |y| |is|→|C|(|aa|)| |#then| |c|(|aa|)|←|↵|c|(|id|(|p|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun id = x, => if x is ‹(ID (b,)) then b; (C (a,)) then id (ID (x,),)›; let p = C (p,); fun c = y, => if y is ‹(C (aa,)) then c (aa,)›; c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:8^17 (id:6^18 p:7^19))
//│ def c:8 = (fun y:12 -> case y:12^11 of {
//│ 	C aa:13 => (c:8^12 aa:13^13)})
//│ def id:6 = (fun x:9 -> case x:9^1 of {
//│ 	ID b:10 => b:10^2
//│ 	| C a:11 => (id:6^3 [ID x:9^4])})
//│ def p:7 = [C p:7^9]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error ID(3'x) <: Destruct(C(9'aa))
//│ !!!!!!ERROR!!!!!!
