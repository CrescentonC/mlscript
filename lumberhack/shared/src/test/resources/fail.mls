:NewParser
:ParseOnly

// WRONG: no push in, but all the elements can be handled
// _LUMBERHACK_ERROR
fun map(f, ls) = if ls is
  C(h, t) then C(f(h), map(f, t))
  N then N
fun ff(x) = if x is
  K then T
  KK then TT
  KKKK then TTTT
let l = C(K, C(KK, C(KKKK, N)))
map(ff, l)
//│ |#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|ff|,| |l|)|
//│ Parsed: {fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; let l = C (K, C (KK, C (KKKK, N,),),); map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ map^28(ff^29, l^31)
//│ def ff(x⁰) = case x⁰ of {
//│ 	K  => [T]
//│ 	| KK  => [TT]
//│ 	| KKKK  => [TTTT]}
//│ def l = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map(f⁰, ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map^5(f⁰, t⁰)]
//│ 	| N  => [N]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [ff^29] (hopeless to continue)
//│ [l^31] (hopeless to continue)
//│ [map^28] (hopeless to continue)
//│ 	[map^28 · map^5] ---> [map^28] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ map_₀(ff_₀, l_₀)
//│ def ff_₀(x¹) = 
//│ 	case x¹ of {
//│ 		K  => [T]
//│ 		| KK  => [TT]
//│ 		| KKKK  => [TTTT]}
//│ def l_₀ = 
//│ 	[C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map_₀(f¹, ls¹) = 
//│ 	case ls¹ of {
//│ 		C h¹ t¹ => [C f¹(h¹) map_₀(f¹, t¹)]
//│ 		| N  => [N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [K]: 53 --->
//│ 	case x¹ of {K  => [T] | KK  => [TT] | KKKK  => [TTTT]}: 37
//│ [KK]: 54 --->
//│ 	case x¹ of {K  => [T] | KK  => [TT] | KKKK  => [TTTT]}: 37
//│ [KKKK]: 55 --->
//│ 	case x¹ of {K  => [T] | KK  => [TT] | KKKK  => [TTTT]}: 37
//│ [N]: 56 --->
//│ 	case ls¹ of {C h¹ t¹ => [C f¹(h¹) map_₀(f¹, t¹)] | N  => [N]}: 50
//│ [C [KKKK] [N]]: 57 --->
//│ 	case ls¹ of {C h¹ t¹ => [C f¹(h¹) map_₀(f¹, t¹)] | N  => [N]}: 50
//│ [C [KK] [C [KKKK] [N]]]: 58 --->
//│ 	case ls¹ of {C h¹ t¹ => [C f¹(h¹) map_₀(f¹, t¹)] | N  => [N]}: 50
//│ [C [K] [C [KK] [C [KKKK] [N]]]]: 59 --->
//│ 	case ls¹ of {C h¹ t¹ => [C f¹(h¹) map_₀(f¹, t¹)] | N  => [N]}: 50
//│ ------------------
//│ case x¹ of {K  => [T] | KK  => [TT] | KKKK  => [TTTT]}: 37 --->
//│ 	[K]: 53
//│ 	[KK]: 54
//│ 	[KKKK]: 55
//│ case ls¹ of {C h¹ t¹ => [C f¹(h¹) map_₀(f¹, t¹)] | N  => [N]}: 50 --->
//│ 	[N]: 56
//│ 	[C [KKKK] [N]]: 57
//│ 	[C [KK] [C [KKKK] [N]]]: 58
//│ 	[C [K] [C [KK] [C [KKKK] [N]]]]: 59
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [K]: 53 --->
//│ 	case x¹ of {K  => [T] | KK  => [TT] | KKKK  => [TTTT]}: 37
//│ [KK]: 54 --->
//│ 	case x¹ of {K  => [T] | KK  => [TT] | KKKK  => [TTTT]}: 37
//│ [KKKK]: 55 --->
//│ 	case x¹ of {K  => [T] | KK  => [TT] | KKKK  => [TTTT]}: 37
//│ [N]: 56 --->
//│ 	case ls¹ of {C h¹ t¹ => [C f¹(h¹) map_₀(f¹, t¹)] | N  => [N]}: 50
//│ [C [KKKK] [N]]: 57 --->
//│ 	case ls¹ of {C h¹ t¹ => [C f¹(h¹) map_₀(f¹, t¹)] | N  => [N]}: 50
//│ [C [KK] [C [KKKK] [N]]]: 58 --->
//│ 	case ls¹ of {C h¹ t¹ => [C f¹(h¹) map_₀(f¹, t¹)] | N  => [N]}: 50
//│ [C [K] [C [KK] [C [KKKK] [N]]]]: 59 --->
//│ 	case ls¹ of {C h¹ t¹ => [C f¹(h¹) map_₀(f¹, t¹)] | N  => [N]}: 50
//│ ------------------
//│ case x¹ of {K  => [T] | KK  => [TT] | KKKK  => [TTTT]}: 37 --->
//│ 	[K]: 53
//│ 	[KK]: 54
//│ 	[KKKK]: 55
//│ case ls¹ of {C h¹ t¹ => [C f¹(h¹) map_₀(f¹, t¹)] | N  => [N]}: 50 --->
//│ 	[N]: 56
//│ 	[C [KKKK] [N]]: 57
//│ 	[C [KK] [C [KKKK] [N]]]: 58
//│ 	[C [K] [C [KK] [C [KKKK] [N]]]]: 59
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ map_₀(ff_₀, l_₀)
//│ def ff_₀(x²) = 
//│ 	x²
//│ def l_₀ = 
//│ 	let t² = 	
//│ 		let t³ = 	
//│ 			let t⁴ = (fun f⁶ -> [N])
//│ 			in let h⁴ = [TTTT]
//│ 			in (fun f⁵ -> [C f⁵(h⁴) map_₀(f⁵, t⁴)])
//│ 		in let h³ = [TT]
//│ 		in (fun f⁴ -> [C f⁴(h³) map_₀(f⁴, t³)])
//│ 	in let h² = [T]
//│ 	in (fun f³ -> [C f³(h²) map_₀(f³, t²)])
//│ def map_₀(f², ls²) = 
//│ 	ls²(f²)
//│ <<<<<<< after fusion <<<<<<<

// NOTE: this way of doing param pushing in is a local change
_LUMBERHACK_EVAL
fun map(f, ls) = (if ls is
  C(h, t) then f => C(f(h), map(f, t))
  N then f => N
)(f)
fun ff(x) = if x is
  K then T
  KK then TT
  KKKK then TTTT
let l = C(K, C(KK, C(KKKK, N)))
map(ff, l)
//│ |_LUMBERHACK_EVAL|↵|#fun| |map|(|f|,| |ls|)| |#=| |(|#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |f| |=>| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |f| |=>| |N|←|↵|)|(|f|)|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|ff|,| |l|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun map = f, ls, => '(' if ls is ‹(C (h, t,)) then f, => C (f (h,), map (f, t,),); (N) then f, => N›, ')' (f,); fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; let l = C (K, C (KK, C (KKKK, N,),),); map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ map^32(ff^33, l^35)
//│ def ff(x⁰) = case x⁰ of {
//│ 	K  => [T]
//│ 	| KK  => [TT]
//│ 	| KKKK  => [TTTT]}
//│ def l = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map(f⁰, ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => (fun f¹ -> [C f¹(h⁰) map^5(f¹, t⁰)])
//│ 	| N  => (fun f² -> [N])}(f⁰)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [C [T] [C [TT] [C [TTTT] [N]]]]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [ff^33] (hopeless to continue)
//│ [l^35] (hopeless to continue)
//│ [map^32] (hopeless to continue)
//│ 	[map^32 · map^5] ---> [map^32] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ map_₀(ff_₀, l_₀)
//│ def ff_₀(x¹) = 
//│ 	case x¹ of {
//│ 		K  => [T]
//│ 		| KK  => [TT]
//│ 		| KKKK  => [TTTT]}
//│ def l_₀ = 
//│ 	[C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map_₀(f³, ls¹) = 
//│ 	case ls¹ of {
//│ 		C h¹ t¹ => (fun f⁴ -> [C f⁴(h¹) map_₀(f⁴, t¹)])
//│ 		| N  => (fun f⁵ -> [N])}(f³)
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [K]: 55 --->
//│ 	case x¹ of {K  => [T] | KK  => [TT] | KKKK  => [TTTT]}: 66
//│ [KK]: 56 --->
//│ 	case x¹ of {K  => [T] | KK  => [TT] | KKKK  => [TTTT]}: 66
//│ [KKKK]: 57 --->
//│ 	case x¹ of {K  => [T] | KK  => [TT] | KKKK  => [TTTT]}: 66
//│ [N]: 58 --->
//│ 	case ls¹ of {C h¹ t¹ => (fun f⁴ -> [C f⁴(h¹) map_₀(f⁴, t¹)]) | N  => (fun f⁵ -> [N])}: 50
//│ [C [KKKK] [N]]: 59 --->
//│ 	case ls¹ of {C h¹ t¹ => (fun f⁴ -> [C f⁴(h¹) map_₀(f⁴, t¹)]) | N  => (fun f⁵ -> [N])}: 50
//│ [C [KK] [C [KKKK] [N]]]: 60 --->
//│ 	case ls¹ of {C h¹ t¹ => (fun f⁴ -> [C f⁴(h¹) map_₀(f⁴, t¹)]) | N  => (fun f⁵ -> [N])}: 50
//│ [C [K] [C [KK] [C [KKKK] [N]]]]: 61 --->
//│ 	case ls¹ of {C h¹ t¹ => (fun f⁴ -> [C f⁴(h¹) map_₀(f⁴, t¹)]) | N  => (fun f⁵ -> [N])}: 50
//│ ------------------
//│ case ls¹ of {C h¹ t¹ => (fun f⁴ -> [C f⁴(h¹) map_₀(f⁴, t¹)]) | N  => (fun f⁵ -> [N])}: 50 --->
//│ 	[N]: 58
//│ 	[C [KKKK] [N]]: 59
//│ 	[C [KK] [C [KKKK] [N]]]: 60
//│ 	[C [K] [C [KK] [C [KKKK] [N]]]]: 61
//│ case x¹ of {K  => [T] | KK  => [TT] | KKKK  => [TTTT]}: 66 --->
//│ 	DeadCodeProd
//│ 	[K]: 55
//│ 	[KK]: 56
//│ 	[KKKK]: 57
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 58 --->
//│ 	case ls¹ of {C h¹ t¹ => (fun f⁴ -> [C f⁴(h¹) map_₀(f⁴, t¹)]) | N  => (fun f⁵ -> [N])}: 50
//│ [C [KKKK] [N]]: 59 --->
//│ 	case ls¹ of {C h¹ t¹ => (fun f⁴ -> [C f⁴(h¹) map_₀(f⁴, t¹)]) | N  => (fun f⁵ -> [N])}: 50
//│ [C [KK] [C [KKKK] [N]]]: 60 --->
//│ 	case ls¹ of {C h¹ t¹ => (fun f⁴ -> [C f⁴(h¹) map_₀(f⁴, t¹)]) | N  => (fun f⁵ -> [N])}: 50
//│ [C [K] [C [KK] [C [KKKK] [N]]]]: 61 --->
//│ 	case ls¹ of {C h¹ t¹ => (fun f⁴ -> [C f⁴(h¹) map_₀(f⁴, t¹)]) | N  => (fun f⁵ -> [N])}: 50
//│ ------------------
//│ case ls¹ of {C h¹ t¹ => (fun f⁴ -> [C f⁴(h¹) map_₀(f⁴, t¹)]) | N  => (fun f⁵ -> [N])}: 50 --->
//│ 	[N]: 58
//│ 	[C [KKKK] [N]]: 59
//│ 	[C [KK] [C [KKKK] [N]]]: 60
//│ 	[C [K] [C [KK] [C [KKKK] [N]]]]: 61
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ map_₀(ff_₀, l_₀)
//│ def ff_₀(x²) = 
//│ 	case x² of {
//│ 		K  => [T]
//│ 		| KK  => [TT]
//│ 		| KKKK  => [TTTT]}
//│ def l_₀ = 
//│ 	let t² = 	
//│ 		let t³ = 	
//│ 			let t⁴ = (fun f¹⁰ -> [N])
//│ 			in let h⁴ = [KKKK]
//│ 			in (fun f⁹ -> [C f⁹(h⁴) map_₀(f⁹, t⁴)])
//│ 		in let h³ = [KK]
//│ 		in (fun f⁸ -> [C f⁸(h³) map_₀(f⁸, t³)])
//│ 	in let h² = [K]
//│ 	in (fun f⁷ -> [C f⁷(h²) map_₀(f⁷, t²)])
//│ def map_₀(f⁶, ls²) = 
//│ 	ls²(f⁶)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C [T] [C [TT] [C [TTTT] [N]]]]
//│ <<<<<<< evaluate <<<<<<<



// WRONG: recursive length wrong: p should unrolled once and c should be unrolled to length 6 (unrol for 2 more times)!
// `id2` used twice
let p = C(C(C(id2(p))))
fun c(x) = if x is
  C(a) then if a is
    C(b) then c(b)
fun id2(yy) = yy
fun id(y) = id2(y)
c(id(p))
//│ |#let| |p| |#=| |C|(|C|(|C|(|id2|(|p|)|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|b|)| |#then| |c|(|b|)|←|←|↵|#fun| |id2|(|yy|)| |#=| |yy|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|c|(|id|(|p|)|)|
//│ Parsed: {let p = C (C (C (id2 (p,),),),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (b,)) then c (b,)››; fun id2 = yy, => yy; fun id = y, => id2 (y,); c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ c^21(id^22(p^23))
//│ def c(x⁰) = case x⁰ of {
//│ 	C a⁰ => case a⁰ of {
//│ 		C b⁰ => c^9(b⁰)}}
//│ def id(y⁰) = id2^17(y⁰)
//│ def id2(yy⁰) = yy⁰
//│ def p = [C [C [C id2^1(p^2)]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^21] (hopeless to continue)
//│ 	[c^21 · c^9] ---> [c^21] (using original def)
//│ [id^22] (hopeless to continue)
//│ 	[id^22 · id2^17] (using original def)
//│ [p^23] (hopeless to continue)
//│ 	[p^23 · id2^1] (using original def)
//│ 	[p^23 · p^2] ---> [p^23] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ c_₀(id_₀(p_₀))
//│ def c_₀(x¹) = 
//│ 	case x¹ of {
//│ 		C a¹ => case a¹ of {
//│ 			C b¹ => c_₀(b¹)}}
//│ def id_₀(y¹) = 
//│ 	id2_₀(y¹)
//│ 	where
//│ 	def id2_₀(yy¹) = 
//│ 		yy¹
//│ def p_₀ = 
//│ 	[C [C [C id2_₁(p_₀)]]]
//│ 	where
//│ 	def id2_₁(yy²) = 
//│ 		yy²
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C id2_₁(p_₀)]: 45 --->
//│ 	case a¹ of {C b¹ => c_₀(b¹)}: 33
//│ 	case x¹ of {C a¹ => case a¹ of {C b¹ => c_₀(b¹)}}: 34
//│ [C [C id2_₁(p_₀)]]: 46 --->
//│ 	case a¹ of {C b¹ => c_₀(b¹)}: 33
//│ 	case x¹ of {C a¹ => case a¹ of {C b¹ => c_₀(b¹)}}: 34
//│ [C [C [C id2_₁(p_₀)]]]: 47 --->
//│ 	case a¹ of {C b¹ => c_₀(b¹)}: 33
//│ 	case x¹ of {C a¹ => case a¹ of {C b¹ => c_₀(b¹)}}: 34
//│ ------------------
//│ case a¹ of {C b¹ => c_₀(b¹)}: 33 --->
//│ 	[C id2_₁(p_₀)]: 45
//│ 	[C [C id2_₁(p_₀)]]: 46
//│ 	[C [C [C id2_₁(p_₀)]]]: 47
//│ case x¹ of {C a¹ => case a¹ of {C b¹ => c_₀(b¹)}}: 34 --->
//│ 	[C id2_₁(p_₀)]: 45
//│ 	[C [C id2_₁(p_₀)]]: 46
//│ 	[C [C [C id2_₁(p_₀)]]]: 47
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ c_₀(id_₀(p_₀))
//│ def c_₀(x²) = 
//│ 	case x² of {
//│ 		C a¹ => case a¹ of {
//│ 			C b¹ => c_₀(b¹)}}
//│ def id_₀(y²) = 
//│ 	id2_₀(y²)
//│ 	where
//│ 	def id2_₀(yy⁴) = 
//│ 		yy⁴
//│ def p_₀ = 
//│ 	[C [C [C id2_₁(p_₀)]]]
//│ 	where
//│ 	def id2_₁(yy³) = 
//│ 		yy³
//│ <<<<<<< after fusion <<<<<<<


// WRONG: no polymorphism
_LUMBERHACK_ERROR
fun id(x) = x
let p = C(p)
fun c(a) = if a is
  C(i) then c(i)
id(c)(id(p))
//│ |_LUMBERHACK_ERROR|↵|#fun| |id|(|x|)| |#=| |x|↵|#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|a|)| |#=| |#if| |a| |is|→|C|(|i|)| |#then| |c|(|i|)|←|↵|id|(|c|)|(|id|(|p|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun id = x, => x; let p = C (p,); fun c = a, => if a is ‹(C (i,)) then c (i,)›; id (c,) (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ id^11(c^12, id^14(p^15))
//│ def c(a⁰) = case a⁰ of {
//│ 	C i⁰ => c^6(i⁰)}
//│ def id(x⁰) = x⁰
//│ def p = [C p^3]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^12] (hopeless to continue)
//│ 	[c^12 · c^6] ---> [c^12] (using original def)
//│ [id^11] (hopeless to continue)
//│ [id^14] (hopeless to continue)
//│ [p^15] (hopeless to continue)
//│ 	[p^15 · p^3] ---> [p^15] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ id_₀(c_₀, id_₁(p_₀))
//│ def c_₀(a¹) = 
//│ 	case a¹ of {
//│ 		C i¹ => c_₀(i¹)}
//│ def id_₀(x²) = 
//│ 	x²
//│ def id_₁(x¹) = 
//│ 	x¹
//│ def p_₀ = 
//│ 	[C p_₀]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C p_₀]: 19 --->
//│ 	case a¹ of {C i¹ => c_₀(i¹)}: 24
//│ ------------------
//│ case a¹ of {C i¹ => c_₀(i¹)}: 24 --->
//│ 	[C p_₀]: 19
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C p_₀]: 19 --->
//│ 	case a¹ of {C i¹ => c_₀(i¹)}: 24
//│ ------------------
//│ case a¹ of {C i¹ => c_₀(i¹)}: 24 --->
//│ 	[C p_₀]: 19
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ id_₀(c_₀, id_₁(p_₀))
//│ def c_₀(a²) = 
//│ 	a²(99)
//│ def id_₀(x⁴) = 
//│ 	x⁴
//│ def id_₁(x³) = 
//│ 	x³
//│ def p_₀ = 
//│ 	let i² = p_₀
//│ 	in (fun _lh_dummy⁰ -> c_₀(i²))
//│ <<<<<<< after fusion <<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: expect to fail but pass
//│ !!!!!!ERROR!!!!!!



// WRONG: recursive fusion strategies
let p = Pair(A, B)
fun c(x) = if x is
  Pair(a, b) then c(Pair(b, a))
c(p)
//│ |#let| |p| |#=| |Pair|(|A|,| |B|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|Pair|(|a|,| |b|)| |#then| |c|(|Pair|(|b|,| |a|)|)|←|↵|c|(|p|)|
//│ Parsed: {let p = Pair (A, B,); fun c = x, => if x is ‹(Pair (a, b,)) then c (Pair (b, a,),)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ c^12(p^13)
//│ def c(x⁰) = case x⁰ of {
//│ 	Pair a⁰ b⁰ => c^5([Pair b⁰ a⁰])}
//│ def p = [Pair [A] [B]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^12] (hopeless to continue)
//│ 	[c^12 · c^5] ---> [c^12] (using original def)
//│ [p^13] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ c_₀(p_₀)
//│ def c_₀(x¹) = 
//│ 	case x¹ of {
//│ 		Pair a¹ b¹ => c_₀([Pair b¹ a¹])}
//│ def p_₀ = 
//│ 	[Pair [A] [B]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [Pair b¹ a¹]: 19 --->
//│ 	case x¹ of {Pair a¹ b¹ => c_₀([Pair b¹ a¹])}: 21
//│ [Pair [A] [B]]: 25 --->
//│ 	case x¹ of {Pair a¹ b¹ => c_₀([Pair b¹ a¹])}: 21
//│ ------------------
//│ case x¹ of {Pair a¹ b¹ => c_₀([Pair b¹ a¹])}: 21 --->
//│ 	[Pair b¹ a¹]: 19
//│ 	[Pair [A] [B]]: 25
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ c_₀(p_₀)
//│ def c_₀(x²) = 
//│ 	case x² of {
//│ 		Pair a¹ b¹ => c_₀([Pair b¹ a¹])}
//│ def p_₀ = 
//│ 	[Pair [A] [B]]
//│ <<<<<<< after fusion <<<<<<<

// WRONG: before the filter of strategies, 
// it returns something like: C(1, C(9, C(2, ys => ys)))
// NOTE: after filtering of strategies, maybe we could have still got more fusion done in this case
_LUMBERHACK_EVAL
fun inter(xs) = if xs is
  N then ys => ys
  C(h, t) then ys => C(h, inter(ys)(t))
inter(C(1, C(2, N)))(C(9, N))
//│ |_LUMBERHACK_EVAL|↵|#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|inter|(|C|(|1|,| |C|(|2|,| |N|)|)|)|(|C|(|9|,| |N|)|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; inter (C (1, C (2, N,),),) (C (9, N,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ inter^14([C 1 [C 2 [N]]], [C 9 [N]])
//│ def inter(xs⁰) = case xs⁰ of {
//│ 	N  => (fun ys⁰ -> ys⁰)
//│ 	| C h⁰ t⁰ => (fun ys¹ -> [C h⁰ inter^5(ys¹, t⁰)])}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [C 1 [C 9 [C 2 [N]]]]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter^14] (hopeless to continue)
//│ 	[inter^14 · inter^5] ---> [inter^14] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ inter_₀([C 1 [C 2 [N]]], [C 9 [N]])
//│ def inter_₀(xs¹) = 
//│ 	case xs¹ of {
//│ 		N  => (fun ys² -> ys²)
//│ 		| C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 41 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 36
//│ [C 2 [N]]: 42 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 36
//│ [C 1 [C 2 [N]]]: 43 --->
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 36
//│ [N]: 46 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 36
//│ [C 9 [N]]: 47 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 36
//│ ------------------
//│ case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 36 --->
//│ 	[N]: 41
//│ 	[C 2 [N]]: 42
//│ 	[C 1 [C 2 [N]]]: 43
//│ 	[N]: 46
//│ 	[C 9 [N]]: 47
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ inter_₀([C 1 [C 2 [N]]], [C 9 [N]])
//│ def inter_₀(xs²) = 
//│ 	case xs² of {
//│ 		N  => (fun ys⁴ -> ys⁴)
//│ 		| C h¹ t¹ => (fun ys⁵ -> [C h¹ inter_₀(ys⁵, t¹)])}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C 1 [C 9 [C 2 [N]]]]
//│ <<<<<<< evaluate <<<<<<<


// WRONG:
_LUMBERHACK_EVAL
fun inter(xs) = if xs is
  N then ys => ys
  C(h, t) then ys => C(h, inter(ys)(t))
fun typeCheck(ls) = if ls is
  C(a, b) then typeCheck(b)
  N then OK
typeCheck(inter(C(1, C(2, N)))(C(9, N)))
//│ |_LUMBERHACK_EVAL|↵|#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|#fun| |typeCheck|(|ls|)| |#=| |#if| |ls| |is|→|C|(|a|,| |b|)| |#then| |typeCheck|(|b|)|↵|N| |#then| |OK|←|↵|typeCheck|(|inter|(|C|(|1|,| |C|(|2|,| |N|)|)|)|(|C|(|9|,| |N|)|)|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; fun typeCheck = ls, => if ls is ‹(C (a, b,)) then typeCheck (b,); (N) then OK›; typeCheck (inter (C (1, C (2, N,),),) (C (9, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ typeCheck^21(inter^22([C 1 [C 2 [N]]], [C 9 [N]]))
//│ def inter(xs⁰) = case xs⁰ of {
//│ 	N  => (fun ys⁰ -> ys⁰)
//│ 	| C h⁰ t⁰ => (fun ys¹ -> [C h⁰ inter^5(ys¹, t⁰)])}
//│ def typeCheck(ls⁰) = case ls⁰ of {
//│ 	C a⁰ b⁰ => typeCheck^15(b⁰)
//│ 	| N  => [OK]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [OK]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter^22] (hopeless to continue)
//│ 	[inter^22 · inter^5] ---> [inter^22] (using original def)
//│ [typeCheck^21] (hopeless to continue)
//│ 	[typeCheck^21 · typeCheck^15] ---> [typeCheck^21] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ typeCheck_₀(inter_₀([C 1 [C 2 [N]]], [C 9 [N]]))
//│ def inter_₀(xs¹) = 
//│ 	case xs¹ of {
//│ 		N  => (fun ys² -> ys²)
//│ 		| C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}
//│ def typeCheck_₀(ls¹) = 
//│ 	case ls¹ of {
//│ 		C a¹ b¹ => typeCheck_₀(b¹)
//│ 		| N  => [OK]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h¹ inter_₀(ys³, t¹)]: 50 --->
//│ 	case ls¹ of {C a¹ b¹ => typeCheck_₀(b¹) | N  => [OK]}: 39
//│ [N]: 58 --->
//│ 	case ls¹ of {C a¹ b¹ => typeCheck_₀(b¹) | N  => [OK]}: 39
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 52
//│ [C 2 [N]]: 59 --->
//│ 	case ls¹ of {C a¹ b¹ => typeCheck_₀(b¹) | N  => [OK]}: 39
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 52
//│ [C 1 [C 2 [N]]]: 60 --->
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 52
//│ [N]: 63 --->
//│ 	case ls¹ of {C a¹ b¹ => typeCheck_₀(b¹) | N  => [OK]}: 39
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 52
//│ [C 9 [N]]: 64 --->
//│ 	case ls¹ of {C a¹ b¹ => typeCheck_₀(b¹) | N  => [OK]}: 39
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 52
//│ ------------------
//│ case ls¹ of {C a¹ b¹ => typeCheck_₀(b¹) | N  => [OK]}: 39 --->
//│ 	[C h¹ inter_₀(ys³, t¹)]: 50
//│ 	[N]: 58
//│ 	[C 2 [N]]: 59
//│ 	[N]: 63
//│ 	[C 9 [N]]: 64
//│ case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 52 --->
//│ 	[N]: 58
//│ 	[C 2 [N]]: 59
//│ 	[C 1 [C 2 [N]]]: 60
//│ 	[N]: 63
//│ 	[C 9 [N]]: 64
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ typeCheck_₀(inter_₀([C 1 [C 2 [N]]], [C 9 [N]]))
//│ def inter_₀(xs²) = 
//│ 	case xs² of {
//│ 		N  => (fun ys⁴ -> ys⁴)
//│ 		| C h¹ t¹ => (fun ys⁵ -> [C h¹ inter_₀(ys⁵, t¹)])}
//│ def typeCheck_₀(ls²) = 
//│ 	case ls² of {
//│ 		C a¹ b¹ => typeCheck_₀(b¹)
//│ 		| N  => [OK]}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [OK]
//│ <<<<<<< evaluate <<<<<<<

// TODO: seems to be correct
_LUMBERHACK_EVAL
fun idxSum(ls) = if ls is
  N then acc => 0
  C(h, t) then acc => acc + idxSum(t)(acc + 1)
fun rev(lss) = if lss is
  N then a => a
  C(hh, tt) then a => rev(tt)(C(hh, a))
idxSum(rev(C(A, C(B, C(C, N))), N))(0)
//│ |_LUMBERHACK_EVAL|↵|#fun| |idxSum|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |acc| |=>| |0|↵|C|(|h|,| |t|)| |#then| |acc| |=>| |acc| |+| |idxSum|(|t|)|(|acc| |+| |1|)|←|↵|#fun| |rev|(|lss|)| |#=| |#if| |lss| |is|→|N| |#then| |a| |=>| |a|↵|C|(|hh|,| |tt|)| |#then| |a| |=>| |rev|(|tt|)|(|C|(|hh|,| |a|)|)|←|↵|idxSum|(|rev|(|C|(|A|,| |C|(|B|,| |C|(|C|,| |N|)|)|)|,| |N|)|)|(|0|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun idxSum = ls, => if ls is ‹(N) then acc, => 0; (C (h, t,)) then acc, => + (acc,) (idxSum (t,) (+ (acc,) (1,),),)›; fun rev = lss, => if lss is ‹(N) then a, => a; (C (hh, tt,)) then a, => rev (tt,) (C (hh, a,),)›; idxSum (rev (C (A, C (B, C (C, N,),),), N,),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ idxSum^33(rev^34([C [A] [C [B] [C [C] [N]]]], [N]), 0)
//│ def idxSum(ls⁰) = case ls⁰ of {
//│ 	N  => (fun acc⁰ -> 0)
//│ 	| C h⁰ t⁰ => (fun acc¹ -> (acc¹ + idxSum^7(t⁰, (acc¹ + 1))))}
//│ def rev(lss⁰) = case lss⁰ of {
//│ 	N  => (fun a⁰ -> a⁰)
//│ 	| C hh⁰ tt⁰ => (fun a¹ -> rev^23(tt⁰, [C hh⁰ a¹]))}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ 3
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [idxSum^33] (hopeless to continue)
//│ 	[idxSum^33 · idxSum^7] ---> [idxSum^33] (using original def)
//│ [rev^34] (hopeless to continue)
//│ 	[rev^34 · rev^23] ---> [rev^34] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ idxSum_₀(rev_₀([C [A] [C [B] [C [C] [N]]]], [N]), 0)
//│ def idxSum_₀(ls¹) = 
//│ 	case ls¹ of {
//│ 		N  => (fun acc² -> 0)
//│ 		| C h¹ t¹ => (fun acc³ -> (acc³ + idxSum_₀(t¹, (acc³ + 1))))}
//│ def rev_₀(lss¹) = 
//│ 	case lss¹ of {
//│ 		N  => (fun a² -> a²)
//│ 		| C hh¹ tt¹ => (fun a³ -> rev_₀(tt¹, [C hh¹ a³]))}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C hh¹ a³]: 56 --->
//│ 	case ls¹ of {N  => (fun acc² -> 0) | C h¹ t¹ => (fun acc³ -> (acc³ + idxSum_₀(t¹, (acc³ + 1))))}: 78
//│ [N]: 85 --->
//│ 	case lss¹ of {N  => (fun a² -> a²) | C hh¹ tt¹ => (fun a³ -> rev_₀(tt¹, [C hh¹ a³]))}: 59
//│ [C [C] [N]]: 86 --->
//│ 	case lss¹ of {N  => (fun a² -> a²) | C hh¹ tt¹ => (fun a³ -> rev_₀(tt¹, [C hh¹ a³]))}: 59
//│ [C [B] [C [C] [N]]]: 87 --->
//│ 	case lss¹ of {N  => (fun a² -> a²) | C hh¹ tt¹ => (fun a³ -> rev_₀(tt¹, [C hh¹ a³]))}: 59
//│ [C [A] [C [B] [C [C] [N]]]]: 88 --->
//│ 	case lss¹ of {N  => (fun a² -> a²) | C hh¹ tt¹ => (fun a³ -> rev_₀(tt¹, [C hh¹ a³]))}: 59
//│ [N]: 90 --->
//│ 	case ls¹ of {N  => (fun acc² -> 0) | C h¹ t¹ => (fun acc³ -> (acc³ + idxSum_₀(t¹, (acc³ + 1))))}: 78
//│ ------------------
//│ case lss¹ of {N  => (fun a² -> a²) | C hh¹ tt¹ => (fun a³ -> rev_₀(tt¹, [C hh¹ a³]))}: 59 --->
//│ 	[N]: 85
//│ 	[C [C] [N]]: 86
//│ 	[C [B] [C [C] [N]]]: 87
//│ 	[C [A] [C [B] [C [C] [N]]]]: 88
//│ case ls¹ of {N  => (fun acc² -> 0) | C h¹ t¹ => (fun acc³ -> (acc³ + idxSum_₀(t¹, (acc³ + 1))))}: 78 --->
//│ 	[C hh¹ a³]: 56
//│ 	[N]: 90
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C hh¹ a³]: 56 --->
//│ 	case ls¹ of {N  => (fun acc² -> 0) | C h¹ t¹ => (fun acc³ -> (acc³ + idxSum_₀(t¹, (acc³ + 1))))}: 78
//│ [N]: 85 --->
//│ 	case lss¹ of {N  => (fun a² -> a²) | C hh¹ tt¹ => (fun a³ -> rev_₀(tt¹, [C hh¹ a³]))}: 59
//│ [C [C] [N]]: 86 --->
//│ 	case lss¹ of {N  => (fun a² -> a²) | C hh¹ tt¹ => (fun a³ -> rev_₀(tt¹, [C hh¹ a³]))}: 59
//│ [C [B] [C [C] [N]]]: 87 --->
//│ 	case lss¹ of {N  => (fun a² -> a²) | C hh¹ tt¹ => (fun a³ -> rev_₀(tt¹, [C hh¹ a³]))}: 59
//│ [C [A] [C [B] [C [C] [N]]]]: 88 --->
//│ 	case lss¹ of {N  => (fun a² -> a²) | C hh¹ tt¹ => (fun a³ -> rev_₀(tt¹, [C hh¹ a³]))}: 59
//│ [N]: 90 --->
//│ 	case ls¹ of {N  => (fun acc² -> 0) | C h¹ t¹ => (fun acc³ -> (acc³ + idxSum_₀(t¹, (acc³ + 1))))}: 78
//│ ------------------
//│ case lss¹ of {N  => (fun a² -> a²) | C hh¹ tt¹ => (fun a³ -> rev_₀(tt¹, [C hh¹ a³]))}: 59 --->
//│ 	[N]: 85
//│ 	[C [C] [N]]: 86
//│ 	[C [B] [C [C] [N]]]: 87
//│ 	[C [A] [C [B] [C [C] [N]]]]: 88
//│ case ls¹ of {N  => (fun acc² -> 0) | C h¹ t¹ => (fun acc³ -> (acc³ + idxSum_₀(t¹, (acc³ + 1))))}: 78 --->
//│ 	[C hh¹ a³]: 56
//│ 	[N]: 90
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ idxSum_₀(rev_₀(
//│ 	let tt² = 	
//│ 		let tt³ = 	
//│ 			let tt⁴ = (fun a⁷ -> a⁷)
//│ 			in let hh⁴ = [C]
//│ 			in (fun a⁶ -> rev_₀(tt⁴, 
//│ 				let t⁴ = a⁶
//│ 				in (fun acc⁶ -> (acc⁶ + idxSum_₀(t⁴, (acc⁶ + 1))))))
//│ 		in let hh³ = [B]
//│ 		in (fun a⁵ -> rev_₀(tt³, 
//│ 			let t³ = a⁵
//│ 			in (fun acc⁵ -> (acc⁵ + idxSum_₀(t³, (acc⁵ + 1))))))
//│ 	in let hh² = [A]
//│ 	in (fun a⁴ -> rev_₀(tt², 
//│ 		let t² = a⁴
//│ 		in (fun acc⁴ -> (acc⁴ + idxSum_₀(t², (acc⁴ + 1)))))), (fun acc⁷ -> 0)), 0)
//│ def idxSum_₀(ls²) = 
//│ 	ls²
//│ def rev_₀(lss²) = 
//│ 	lss²
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ 3
//│ <<<<<<< evaluate <<<<<<<


// WRONG: type
_LUMBERHACK_ERROR
fun id(x) = if x is
  ID(b) then b
  _ then id(ID(x))
let p = C(p)
fun c(y) = if y is
  C(aa) then c(aa)
c(id(p))
//│ |_LUMBERHACK_ERROR|↵|#fun| |id|(|x|)| |#=| |#if| |x| |is|→|ID|(|b|)| |#then| |b|↵|_| |#then| |id|(|ID|(|x|)|)|←|↵|#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|y|)| |#=| |#if| |y| |is|→|C|(|aa|)| |#then| |c|(|aa|)|←|↵|c|(|id|(|p|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun id = x, => if x is ‹(ID (b,)) then b; (_) then id (ID (x,),)›; let p = C (p,); fun c = y, => if y is ‹(C (aa,)) then c (aa,)›; c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ c^17(id^18(p^19))
//│ def c(y⁰) = case y⁰ of {
//│ 	C aa⁰ => c^12(aa⁰)}
//│ def id(x⁰) = case x⁰ of {
//│ 	ID b⁰ => b⁰
//│ 	| _  => id^3([ID x⁰])}
//│ def p = [C p^9]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^17] (hopeless to continue)
//│ 	[c^17 · c^12] ---> [c^17] (using original def)
//│ [id^18] (hopeless to continue)
//│ 	[id^18 · id^3] ---> [id^18] (using original def)
//│ [p^19] (hopeless to continue)
//│ 	[p^19 · p^9] ---> [p^19] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ c_₀(id_₀(p_₀))
//│ def c_₀(y¹) = 
//│ 	case y¹ of {
//│ 		C aa¹ => c_₀(aa¹)}
//│ def id_₀(x¹) = 
//│ 	case x¹ of {
//│ 		ID b¹ => b¹
//│ 		| _  => id_₀([ID x¹])}
//│ def p_₀ = 
//│ 	[C p_₀]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C p_₀]: 23 --->
//│ 	case y¹ of {C aa¹ => c_₀(aa¹)}: 28
//│ 	case x¹ of {ID b¹ => b¹ | _  => id_₀([ID x¹])}: 36
//│ [ID x¹]: 34 --->
//│ 	case x¹ of {ID b¹ => b¹ | _  => id_₀([ID x¹])}: 36
//│ ------------------
//│ case y¹ of {C aa¹ => c_₀(aa¹)}: 28 --->
//│ 	[C p_₀]: 23
//│ case x¹ of {ID b¹ => b¹ | _  => id_₀([ID x¹])}: 36 --->
//│ 	[C p_₀]: 23
//│ 	[ID x¹]: 34
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ c_₀(id_₀(p_₀))
//│ def c_₀(y²) = 
//│ 	case y² of {
//│ 		C aa¹ => c_₀(aa¹)}
//│ def id_₀(x²) = 
//│ 	case x² of {
//│ 		ID b¹ => b¹
//│ 		| _  => id_₀([ID x²])}
//│ def p_₀ = 
//│ 	[C p_₀]
//│ <<<<<<< after fusion <<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: expect to fail but pass
//│ !!!!!!ERROR!!!!!!



// WRONG:
fun inter(xs) = if xs is
  N then ys => ys
  C(h, t) then ys => C(h, inter(ys)(t))
fun l1(x) = C(1, C(2, l1(add(x, 1))))
let rec l2 = C(9, C(8, l2))
inter(l1(0))(l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|#fun| |l1|(|x|)| |#=| |C|(|1|,| |C|(|2|,| |l1|(|add|(|x|,| |1|)|)|)|)|↵|#let| |#rec| |l2| |#=| |C|(|9|,| |C|(|8|,| |l2|)|)|↵|inter|(|l1|(|0|)|)|(|l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; fun l1 = x, => C (1, C (2, l1 (add (x, 1,),),),); let rec l2 = C (9, C (8, l2,),); inter (l1 (0,),) (l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ inter^31(l1^32(0), l2^36)
//│ def inter(xs⁰) = case xs⁰ of {
//│ 	N  => (fun ys⁰ -> ys⁰)
//│ 	| C h⁰ t⁰ => (fun ys¹ -> [C h⁰ inter^5(ys¹, t⁰)])}
//│ def l1(x⁰) = [C 1 [C 2 l1^16(add⁰(x⁰, 1))]]
//│ def l2 = [C 9 [C 8 l2^28]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter^31] (hopeless to continue)
//│ 	[inter^31 · inter^5] ---> [inter^31] (using original def)
//│ [l1^32] (hopeless to continue)
//│ 	[l1^32 · l1^16] ---> [l1^32] (using original def)
//│ [l2^36] (hopeless to continue)
//│ 	[l2^36 · l2^28] ---> [l2^36] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ inter_₀(l1_₀(0), l2_₀)
//│ def inter_₀(xs¹) = 
//│ 	case xs¹ of {
//│ 		N  => (fun ys² -> ys²)
//│ 		| C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}
//│ def l1_₀(x¹) = 
//│ 	[C 1 [C 2 l1_₀(add⁰(x¹, 1))]]
//│ def l2_₀ = 
//│ 	[C 9 [C 8 l2_₀]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 8 l2_₀]: 41 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 54
//│ [C 9 [C 8 l2_₀]]: 42 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 54
//│ [C 2 l1_₀(add⁰(x¹, 1))]: 65 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 54
//│ [C 1 [C 2 l1_₀(add⁰(x¹, 1))]]: 66 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 54
//│ ------------------
//│ case xs¹ of {N  => (fun ys² -> ys²) | C h¹ t¹ => (fun ys³ -> [C h¹ inter_₀(ys³, t¹)])}: 54 --->
//│ 	[C 8 l2_₀]: 41
//│ 	[C 9 [C 8 l2_₀]]: 42
//│ 	[C 2 l1_₀(add⁰(x¹, 1))]: 65
//│ 	[C 1 [C 2 l1_₀(add⁰(x¹, 1))]]: 66
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ inter_₀(l1_₀(0), l2_₀)
//│ def inter_₀(xs²) = 
//│ 	case xs² of {
//│ 		N  => (fun ys⁴ -> ys⁴)
//│ 		| C h¹ t¹ => (fun ys⁵ -> [C h¹ inter_₀(ys⁵, t¹)])}
//│ def l1_₀(x²) = 
//│ 	[C 1 [C 2 l1_₀(add⁰(x², 1))]]
//│ def l2_₀ = 
//│ 	[C 9 [C 8 l2_₀]]
//│ <<<<<<< after fusion <<<<<<<


// WRONG: explosion on branch and recursive strategies, and timeout
// NOTE: need return pattern specilization for recursive strategies
// _LUMBERHACK_ERROR
// fun filterMax(ls) = if ls is
//   C(h, t) then m => if h > 0 is
//     True then if h > m is
//       True then if filterMax(t)(h) is
//         Pair(ys, max) then Pair(C(h, ys), max)
//       False then if filterMax(t)(m) is
//         Pair(ys, max) then Pair(C(h, ys), max)
//     False then filterMax(t)(m)
//   N then m => Pair(N, m)
// filterMax(C(1, C(2, N)))(0)


 
// WRONG: explode on branch
fun max(ms) = if ms is
  C(h, t) then m => if h > m is
   True then max(t)(h)
   False then max(t)(m)
  N then m => m
max(C(1, C(3, C(2, N))))(0)
//│ | |↵|/* WRONG: explode on branch*/|↵|#fun| |max|(|ms|)| |#=| |#if| |ms| |is|→|C|(|h|,| |t|)| |#then| |m| |=>| |#if| |h| |>| |m| |is|→|True| |#then| |max|(|t|)|(|h|)|↵|False| |#then| |max|(|t|)|(|m|)|←|↵|N| |#then| |m| |=>| |m|←|↵|max|(|C|(|1|,| |C|(|3|,| |C|(|2|,| |N|)|)|)|)|(|0|)|
//│ Parsed: {fun max = ms, => if ms is ‹(C (h, t,)) then m, => if > (h,) (m,) is ‹(True) then max (t,) (h,); (False) then max (t,) (m,)›; (N) then m, => m›; max (C (1, C (3, C (2, N,),),),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ max^23([C 1 [C 3 [C 2 [N]]]], 0)
//│ def max(ms⁰) = case ms⁰ of {
//│ 	C h⁰ t⁰ => (fun m⁰ -> case (h⁰ > m⁰) of {
//│ 		True  => max^7(t⁰, h⁰)
//│ 		| False  => max^12(t⁰, m⁰)})
//│ 	| N  => (fun m¹ -> m¹)}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [max^23] (hopeless to continue)
//│ 	[max^23 · max^12] ---> [max^23] (using original def)
//│ 	[max^23 · max^7] ---> [max^23] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ max_₀([C 1 [C 3 [C 2 [N]]]], 0)
//│ def max_₀(ms¹) = 
//│ 	case ms¹ of {
//│ 		C h¹ t¹ => (fun m² -> case (h¹ > m²) of {
//│ 			True  => max_₀(t¹, h¹)
//│ 			| False  => max_₀(t¹, m²)})
//│ 		| N  => (fun m³ -> m³)}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 60 --->
//│ 	case ms¹ of {C h¹ t¹ => (fun m² -> case (h¹ > m²) of {True  => max_₀(t¹, h¹) | False  => max_₀(t¹, m²)}) | N  => (fun m³ -> m³)}: 54
//│ [C 2 [N]]: 61 --->
//│ 	case ms¹ of {C h¹ t¹ => (fun m² -> case (h¹ > m²) of {True  => max_₀(t¹, h¹) | False  => max_₀(t¹, m²)}) | N  => (fun m³ -> m³)}: 54
//│ [C 3 [C 2 [N]]]: 62 --->
//│ 	case ms¹ of {C h¹ t¹ => (fun m² -> case (h¹ > m²) of {True  => max_₀(t¹, h¹) | False  => max_₀(t¹, m²)}) | N  => (fun m³ -> m³)}: 54
//│ [C 1 [C 3 [C 2 [N]]]]: 63 --->
//│ 	case ms¹ of {C h¹ t¹ => (fun m² -> case (h¹ > m²) of {True  => max_₀(t¹, h¹) | False  => max_₀(t¹, m²)}) | N  => (fun m³ -> m³)}: 54
//│ ------------------
//│ case ms¹ of {C h¹ t¹ => (fun m² -> case (h¹ > m²) of {True  => max_₀(t¹, h¹) | False  => max_₀(t¹, m²)}) | N  => (fun m³ -> m³)}: 54 --->
//│ 	[N]: 60
//│ 	[C 2 [N]]: 61
//│ 	[C 3 [C 2 [N]]]: 62
//│ 	[C 1 [C 3 [C 2 [N]]]]: 63
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 60 --->
//│ 	case ms¹ of {C h¹ t¹ => (fun m² -> case (h¹ > m²) of {True  => max_₀(t¹, h¹) | False  => max_₀(t¹, m²)}) | N  => (fun m³ -> m³)}: 54
//│ [C 2 [N]]: 61 --->
//│ 	case ms¹ of {C h¹ t¹ => (fun m² -> case (h¹ > m²) of {True  => max_₀(t¹, h¹) | False  => max_₀(t¹, m²)}) | N  => (fun m³ -> m³)}: 54
//│ [C 3 [C 2 [N]]]: 62 --->
//│ 	case ms¹ of {C h¹ t¹ => (fun m² -> case (h¹ > m²) of {True  => max_₀(t¹, h¹) | False  => max_₀(t¹, m²)}) | N  => (fun m³ -> m³)}: 54
//│ [C 1 [C 3 [C 2 [N]]]]: 63 --->
//│ 	case ms¹ of {C h¹ t¹ => (fun m² -> case (h¹ > m²) of {True  => max_₀(t¹, h¹) | False  => max_₀(t¹, m²)}) | N  => (fun m³ -> m³)}: 54
//│ ------------------
//│ case ms¹ of {C h¹ t¹ => (fun m² -> case (h¹ > m²) of {True  => max_₀(t¹, h¹) | False  => max_₀(t¹, m²)}) | N  => (fun m³ -> m³)}: 54 --->
//│ 	[N]: 60
//│ 	[C 2 [N]]: 61
//│ 	[C 3 [C 2 [N]]]: 62
//│ 	[C 1 [C 3 [C 2 [N]]]]: 63
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ max_₀(
//│ 	let t² = 	
//│ 		let t³ = 	
//│ 			let t⁴ = (fun m⁷ -> m⁷)
//│ 			in let h⁴ = 2
//│ 			in (fun m⁶ -> case (h⁴ > m⁶) of {
//│ 				True  => max_₀(t⁴, h⁴)
//│ 				| False  => max_₀(t⁴, m⁶)})
//│ 		in let h³ = 3
//│ 		in (fun m⁵ -> case (h³ > m⁵) of {
//│ 			True  => max_₀(t³, h³)
//│ 			| False  => max_₀(t³, m⁵)})
//│ 	in let h² = 1
//│ 	in (fun m⁴ -> case (h² > m⁴) of {
//│ 		True  => max_₀(t², h²)
//│ 		| False  => max_₀(t², m⁴)}), 0)
//│ def max_₀(ms²) = 
//│ 	ms²
//│ <<<<<<< after fusion <<<<<<<

// WRONG: multiple match
fun last(ls) = if ls is
  C(h, t) then if t is
    N then Some(h)
    C(hh, tt) then last(t)
  N then None
last(C(1, C(2, C(3, N))))
//│ |#fun| |last|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |#if| |t| |is|→|N| |#then| |Some|(|h|)|↵|C|(|hh|,| |tt|)| |#then| |last|(|t|)|←|↵|N| |#then| |None|←|↵|last|(|C|(|1|,| |C|(|2|,| |C|(|3|,| |N|)|)|)|)|
//│ Parsed: {fun last = ls, => if ls is ‹(C (h, t,)) then if t is ‹(N) then Some (h,); (C (hh, tt,)) then last (t,)›; (N) then None›; last (C (1, C (2, C (3, N,),),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ last^12([C 1 [C 2 [C 3 [N]]]])
//│ def last(ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => case t⁰ of {
//│ 		N  => [Some h⁰]
//│ 		| C hh⁰ tt⁰ => last^5(t⁰)}
//│ 	| N  => [None]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [last^12] (hopeless to continue)
//│ 	[last^12 · last^5] ---> [last^12] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ last_₀([C 1 [C 2 [C 3 [N]]]])
//│ def last_₀(ls¹) = 
//│ 	case ls¹ of {
//│ 		C h¹ t¹ => case t¹ of {
//│ 			N  => [Some h¹]
//│ 			| C hh¹ tt¹ => last_₀(t¹)}
//│ 		| N  => [None]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 36 --->
//│ 	DeadCodeCons
//│ 	case t¹ of {N  => [Some h¹] | C hh¹ tt¹ => last_₀(t¹)}: 28
//│ 	case ls¹ of {C h¹ t¹ => case t¹ of {N  => [Some h¹] | C hh¹ tt¹ => last_₀(t¹)} | N  => [None]}: 30
//│ [C 3 [N]]: 37 --->
//│ 	DeadCodeCons
//│ 	case t¹ of {N  => [Some h¹] | C hh¹ tt¹ => last_₀(t¹)}: 28
//│ 	case ls¹ of {C h¹ t¹ => case t¹ of {N  => [Some h¹] | C hh¹ tt¹ => last_₀(t¹)} | N  => [None]}: 30
//│ [C 2 [C 3 [N]]]: 38 --->
//│ 	case t¹ of {N  => [Some h¹] | C hh¹ tt¹ => last_₀(t¹)}: 28
//│ 	case ls¹ of {C h¹ t¹ => case t¹ of {N  => [Some h¹] | C hh¹ tt¹ => last_₀(t¹)} | N  => [None]}: 30
//│ [C 1 [C 2 [C 3 [N]]]]: 39 --->
//│ 	case ls¹ of {C h¹ t¹ => case t¹ of {N  => [Some h¹] | C hh¹ tt¹ => last_₀(t¹)} | N  => [None]}: 30
//│ ------------------
//│ case t¹ of {N  => [Some h¹] | C hh¹ tt¹ => last_₀(t¹)}: 28 --->
//│ 	[N]: 36
//│ 	[C 3 [N]]: 37
//│ 	[C 2 [C 3 [N]]]: 38
//│ case ls¹ of {C h¹ t¹ => case t¹ of {N  => [Some h¹] | C hh¹ tt¹ => last_₀(t¹)} | N  => [None]}: 30 --->
//│ 	[N]: 36
//│ 	[C 3 [N]]: 37
//│ 	[C 2 [C 3 [N]]]: 38
//│ 	[C 1 [C 2 [C 3 [N]]]]: 39
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ last_₀([C 1 [C 2 [C 3 [N]]]])
//│ def last_₀(ls²) = 
//│ 	case ls² of {
//│ 		C h¹ t¹ => case t¹ of {
//│ 			N  => [Some h¹]
//│ 			| C hh¹ tt¹ => last_₀(t¹)}
//│ 		| N  => [None]}
//│ <<<<<<< after fusion <<<<<<<

// cannot have asymptotic complexity improvement, but which is a non-goal
_LUMBERHACK_EVAL
fun concat(xs) = if xs is
  N then ys => ys
  C(h, t) then ys => C(h, concat(t, ys))
fun rev(ls) = if ls is
  C(h, t) then concat(rev(t), C(h, N))
  N then N
rev(C(1, C(2, C(3, N))))
//│ |_LUMBERHACK_EVAL|↵|#fun| |concat|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |concat|(|t|,| |ys|)|)|←|↵|#fun| |rev|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |concat|(|rev|(|t|)|,| |C|(|h|,| |N|)|)|↵|N| |#then| |N|←|↵|rev|(|C|(|1|,| |C|(|2|,| |C|(|3|,| |N|)|)|)|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun concat = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, concat (t, ys,),)›; fun rev = ls, => if ls is ‹(C (h, t,)) then concat (rev (t,), C (h, N,),); (N) then N›; rev (C (1, C (2, C (3, N,),),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ rev^27([C 1 [C 2 [C 3 [N]]]])
//│ def concat(xs⁰) = case xs⁰ of {
//│ 	N  => (fun ys⁰ -> ys⁰)
//│ 	| C h⁰ t⁰ => (fun ys¹ -> [C h⁰ concat^5(t⁰, ys¹)])}
//│ def rev(ls⁰) = case ls⁰ of {
//│ 	C h¹ t¹ => concat^15(rev^16(t¹), [C h¹ [N]])
//│ 	| N  => [N]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [C 3 [C 2 [C 1 [N]]]]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [rev^27] (hopeless to continue)
//│ 	[rev^27 · concat^15] (using original def)
//│ 		[rev^27 · concat^15 · concat^5] ---> [rev^27 · concat^15] (using original def)
//│ 	[rev^27 · rev^16] ---> [rev^27] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ rev_₀([C 1 [C 2 [C 3 [N]]]])
//│ def rev_₀(ls¹) = 
//│ 	case ls¹ of {
//│ 		C h³ t³ => concat_₀(rev_₀(t³), [C h³ [N]])
//│ 		| N  => [N]}
//│ 	where
//│ 	def concat_₀(xs¹) = 
//│ 		case xs¹ of {
//│ 			N  => (fun ys² -> ys²)
//│ 			| C h² t² => (fun ys³ -> [C h² concat_₀(t², ys³)])}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h² concat_₀(t², ys³)]: 45 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h² t² => (fun ys³ -> [C h² concat_₀(t², ys³)])}: 47
//│ [N]: 56 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h² t² => (fun ys³ -> [C h² concat_₀(t², ys³)])}: 47
//│ [C h³ [N]]: 57 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h² t² => (fun ys³ -> [C h² concat_₀(t², ys³)])}: 47
//│ [N]: 59 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h² t² => (fun ys³ -> [C h² concat_₀(t², ys³)])}: 47
//│ [N]: 66 --->
//│ 	case ls¹ of {C h³ t³ => concat_₀(rev_₀(t³), [C h³ [N]]) | N  => [N]}: 60
//│ [C 3 [N]]: 67 --->
//│ 	case ls¹ of {C h³ t³ => concat_₀(rev_₀(t³), [C h³ [N]]) | N  => [N]}: 60
//│ [C 2 [C 3 [N]]]: 68 --->
//│ 	case ls¹ of {C h³ t³ => concat_₀(rev_₀(t³), [C h³ [N]]) | N  => [N]}: 60
//│ [C 1 [C 2 [C 3 [N]]]]: 69 --->
//│ 	case ls¹ of {C h³ t³ => concat_₀(rev_₀(t³), [C h³ [N]]) | N  => [N]}: 60
//│ ------------------
//│ case xs¹ of {N  => (fun ys² -> ys²) | C h² t² => (fun ys³ -> [C h² concat_₀(t², ys³)])}: 47 --->
//│ 	[C h² concat_₀(t², ys³)]: 45
//│ 	[N]: 56
//│ 	[C h³ [N]]: 57
//│ 	[N]: 59
//│ case ls¹ of {C h³ t³ => concat_₀(rev_₀(t³), [C h³ [N]]) | N  => [N]}: 60 --->
//│ 	[N]: 66
//│ 	[C 3 [N]]: 67
//│ 	[C 2 [C 3 [N]]]: 68
//│ 	[C 1 [C 2 [C 3 [N]]]]: 69
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 66 --->
//│ 	case ls¹ of {C h³ t³ => concat_₀(rev_₀(t³), [C h³ [N]]) | N  => [N]}: 60
//│ [C 3 [N]]: 67 --->
//│ 	case ls¹ of {C h³ t³ => concat_₀(rev_₀(t³), [C h³ [N]]) | N  => [N]}: 60
//│ [C 2 [C 3 [N]]]: 68 --->
//│ 	case ls¹ of {C h³ t³ => concat_₀(rev_₀(t³), [C h³ [N]]) | N  => [N]}: 60
//│ [C 1 [C 2 [C 3 [N]]]]: 69 --->
//│ 	case ls¹ of {C h³ t³ => concat_₀(rev_₀(t³), [C h³ [N]]) | N  => [N]}: 60
//│ ------------------
//│ case ls¹ of {C h³ t³ => concat_₀(rev_₀(t³), [C h³ [N]]) | N  => [N]}: 60 --->
//│ 	[N]: 66
//│ 	[C 3 [N]]: 67
//│ 	[C 2 [C 3 [N]]]: 68
//│ 	[C 1 [C 2 [C 3 [N]]]]: 69
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ rev_₀(
//│ 	let t⁴ = 	
//│ 		let t⁵ = 	
//│ 			let t⁶ = (fun _lh_dummy³ -> [N])
//│ 			in let h⁶ = 3
//│ 			in (fun _lh_dummy² -> concat_₀(rev_₀(t⁶), [C h⁶ [N]]))
//│ 		in let h⁵ = 2
//│ 		in (fun _lh_dummy¹ -> concat_₀(rev_₀(t⁵), [C h⁵ [N]]))
//│ 	in let h⁴ = 1
//│ 	in (fun _lh_dummy⁰ -> concat_₀(rev_₀(t⁴), [C h⁴ [N]])))
//│ def rev_₀(ls²) = 
//│ 	ls²(99)
//│ 	where
//│ 	def concat_₀(xs²) = 
//│ 		case xs² of {
//│ 			N  => (fun ys⁴ -> ys⁴)
//│ 			| C h² t² => (fun ys⁵ -> [C h² concat_₀(t², ys⁵)])}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C 3 [C 2 [C 1 [N]]]]
//│ <<<<<<< evaluate <<<<<<<
//│ 
//│ ~~~~~~~~~~~~~~~~~~~~~~~ NEXT ITERATION ~~~~~~~~~~~~~~~~~~~~~~~
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [concat_₀^18] (hopeless to continue)
//│ 	[concat_₀^18 · concat_₀^48] ---> [concat_₀^18] (using original def)
//│ [concat_₀^31] (hopeless to continue)
//│ 	[concat_₀^31 · concat_₀^48] ---> [concat_₀^31] (using original def)
//│ [concat_₀^5] (hopeless to continue)
//│ 	[concat_₀^5 · concat_₀^48] ---> [concat_₀^5] (using original def)
//│ [rev_₀^19] (hopeless to continue)
//│ [rev_₀^1] (hopeless to continue)
//│ [rev_₀^32] (hopeless to continue)
//│ [rev_₀^6] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ rev_₀_₁(
//│ 	let t⁷ = 	
//│ 		let t⁸ = 	
//│ 			let t⁹ = (fun _lh_dummy⁴ -> [N])
//│ 			in let h⁷ = 3
//│ 			in (fun _lh_dummy⁵ -> concat_₀_₂(rev_₀_₃(t⁹), [C h⁷ [N]]))
//│ 		in let h⁸ = 2
//│ 		in (fun _lh_dummy⁶ -> concat_₀_₀(rev_₀_₀(t⁸), [C h⁸ [N]]))
//│ 	in let h⁹ = 1
//│ 	in (fun _lh_dummy⁷ -> concat_₀_₁(rev_₀_₂(t⁷), [C h⁹ [N]])))
//│ def concat_₀_₀(xs¹) = 
//│ 	case xs¹ of {
//│ 		N  => (fun ys² -> ys²)
//│ 		| C h⁴ t⁴ => (fun ys³ -> [C h⁴ concat_₀_₀(t⁴, ys³)])}
//│ def concat_₀_₁(xs³) = 
//│ 	case xs³ of {
//│ 		N  => (fun ys⁶ -> ys⁶)
//│ 		| C h⁶ t⁶ => (fun ys⁷ -> [C h⁶ concat_₀_₁(t⁶, ys⁷)])}
//│ def concat_₀_₂(xs²) = 
//│ 	case xs² of {
//│ 		N  => (fun ys⁴ -> ys⁴)
//│ 		| C h⁵ t⁵ => (fun ys⁵ -> [C h⁵ concat_₀_₂(t⁵, ys⁵)])}
//│ def rev_₀_₀(ls²) = 
//│ 	ls²(99)
//│ def rev_₀_₁(ls³) = 
//│ 	ls³(99)
//│ def rev_₀_₂(ls¹) = 
//│ 	ls¹(99)
//│ def rev_₀_₃(ls⁴) = 
//│ 	ls⁴(99)
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h⁴ concat_₀_₀(t⁴, ys³)]: 70 --->
//│ 	case xs³ of {N  => (fun ys⁶ -> ys⁶) | C h⁶ t⁶ => (fun ys⁷ -> [C h⁶ concat_₀_₁(t⁶, ys⁷)])}: 110
//│ [C h⁵ concat_₀_₂(t⁵, ys⁵)]: 87 --->
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h⁴ t⁴ => (fun ys³ -> [C h⁴ concat_₀_₀(t⁴, ys³)])}: 72
//│ [N]: 117 --->
//│ 	case xs² of {N  => (fun ys⁴ -> ys⁴) | C h⁵ t⁵ => (fun ys⁵ -> [C h⁵ concat_₀_₂(t⁵, ys⁵)])}: 89
//│ [N]: 126 --->
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h⁴ t⁴ => (fun ys³ -> [C h⁴ concat_₀_₀(t⁴, ys³)])}: 72
//│ [C h⁷ [N]]: 127 --->
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h⁴ t⁴ => (fun ys³ -> [C h⁴ concat_₀_₀(t⁴, ys³)])}: 72
//│ [N]: 139 --->
//│ 	case xs³ of {N  => (fun ys⁶ -> ys⁶) | C h⁶ t⁶ => (fun ys⁷ -> [C h⁶ concat_₀_₁(t⁶, ys⁷)])}: 110
//│ [C h⁸ [N]]: 140 --->
//│ 	case xs³ of {N  => (fun ys⁶ -> ys⁶) | C h⁶ t⁶ => (fun ys⁷ -> [C h⁶ concat_₀_₁(t⁶, ys⁷)])}: 110
//│ ------------------
//│ case xs¹ of {N  => (fun ys² -> ys²) | C h⁴ t⁴ => (fun ys³ -> [C h⁴ concat_₀_₀(t⁴, ys³)])}: 72 --->
//│ 	[C h⁵ concat_₀_₂(t⁵, ys⁵)]: 87
//│ 	[N]: 126
//│ 	[C h⁷ [N]]: 127
//│ case xs² of {N  => (fun ys⁴ -> ys⁴) | C h⁵ t⁵ => (fun ys⁵ -> [C h⁵ concat_₀_₂(t⁵, ys⁵)])}: 89 --->
//│ 	DeadCodeProd
//│ 	[N]: 117
//│ case xs³ of {N  => (fun ys⁶ -> ys⁶) | C h⁶ t⁶ => (fun ys⁷ -> [C h⁶ concat_₀_₁(t⁶, ys⁷)])}: 110 --->
//│ 	[C h⁴ concat_₀_₀(t⁴, ys³)]: 70
//│ 	[N]: 139
//│ 	[C h⁸ [N]]: 140
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C h⁴ concat_₀_₀(t⁴, ys³)]: 70 --->
//│ 	case xs³ of {N  => (fun ys⁶ -> ys⁶) | C h⁶ t⁶ => (fun ys⁷ -> [C h⁶ concat_₀_₁(t⁶, ys⁷)])}: 110
//│ [C h⁵ concat_₀_₂(t⁵, ys⁵)]: 87 --->
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h⁴ t⁴ => (fun ys³ -> [C h⁴ concat_₀_₀(t⁴, ys³)])}: 72
//│ [N]: 126 --->
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h⁴ t⁴ => (fun ys³ -> [C h⁴ concat_₀_₀(t⁴, ys³)])}: 72
//│ [C h⁷ [N]]: 127 --->
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h⁴ t⁴ => (fun ys³ -> [C h⁴ concat_₀_₀(t⁴, ys³)])}: 72
//│ [N]: 139 --->
//│ 	case xs³ of {N  => (fun ys⁶ -> ys⁶) | C h⁶ t⁶ => (fun ys⁷ -> [C h⁶ concat_₀_₁(t⁶, ys⁷)])}: 110
//│ [C h⁸ [N]]: 140 --->
//│ 	case xs³ of {N  => (fun ys⁶ -> ys⁶) | C h⁶ t⁶ => (fun ys⁷ -> [C h⁶ concat_₀_₁(t⁶, ys⁷)])}: 110
//│ ------------------
//│ case xs¹ of {N  => (fun ys² -> ys²) | C h⁴ t⁴ => (fun ys³ -> [C h⁴ concat_₀_₀(t⁴, ys³)])}: 72 --->
//│ 	[C h⁵ concat_₀_₂(t⁵, ys⁵)]: 87
//│ 	[N]: 126
//│ 	[C h⁷ [N]]: 127
//│ case xs³ of {N  => (fun ys⁶ -> ys⁶) | C h⁶ t⁶ => (fun ys⁷ -> [C h⁶ concat_₀_₁(t⁶, ys⁷)])}: 110 --->
//│ 	[C h⁴ concat_₀_₀(t⁴, ys³)]: 70
//│ 	[N]: 139
//│ 	[C h⁸ [N]]: 140
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ rev_₀_₁(
//│ 	let t¹⁰ = 	
//│ 		let t¹¹ = 	
//│ 			let t¹² = (fun _lh_dummy⁸ -> [N])
//│ 			in let h¹⁰ = 3
//│ 			in (fun _lh_dummy⁹ -> concat_₀_₂(rev_₀_₃(t¹²), 
//│ 				let t¹³ = (fun ys¹⁰ -> ys¹⁰)
//│ 				in let h¹¹ = h¹⁰
//│ 				in (fun ys⁸ -> 
//│ 					let t¹⁴ = concat_₀_₀(t¹³, ys⁸)
//│ 					in let h¹² = h¹¹
//│ 					in (fun ys⁹ -> [C h¹² concat_₀_₁(t¹⁴, ys⁹)]))))
//│ 		in let h¹³ = 2
//│ 		in (fun _lh_dummy¹⁰ -> concat_₀_₀(rev_₀_₀(t¹¹), 
//│ 			let t¹⁵ = (fun ys¹² -> ys¹²)
//│ 			in let h¹⁴ = h¹³
//│ 			in (fun ys¹¹ -> [C h¹⁴ concat_₀_₁(t¹⁵, ys¹¹)])))
//│ 	in let h¹⁵ = 1
//│ 	in (fun _lh_dummy¹¹ -> concat_₀_₁(rev_₀_₂(t¹⁰), [C h¹⁵ [N]])))
//│ def concat_₀_₀(xs⁵) = 
//│ 	xs⁵
//│ def concat_₀_₁(xs⁴) = 
//│ 	xs⁴
//│ def concat_₀_₂(xs⁶) = 
//│ 	case xs⁶ of {
//│ 		N  => (fun ys¹³ -> ys¹³)
//│ 		| C h⁵ t⁵ => (fun ys¹⁴ -> 
//│ 			let t¹⁶ = concat_₀_₂(t⁵, ys¹⁴)
//│ 			in let h¹⁶ = h⁵
//│ 			in (fun ys¹⁵ -> 
//│ 				let t¹⁷ = concat_₀_₀(t¹⁶, ys¹⁵)
//│ 				in let h¹⁷ = h¹⁶
//│ 				in (fun ys¹⁶ -> [C h¹⁷ concat_₀_₁(t¹⁷, ys¹⁶)])))}
//│ def rev_₀_₀(ls⁵) = 
//│ 	ls⁵(99)
//│ def rev_₀_₁(ls⁶) = 
//│ 	ls⁶(99)
//│ def rev_₀_₂(ls⁸) = 
//│ 	ls⁸(99)
//│ def rev_₀_₃(ls⁷) = 
//│ 	ls⁷(99)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C 3 [C 2 [C 1 [N]]]]
//│ <<<<<<< evaluate <<<<<<<



fun concat(xs) = if xs is
  N then ys => ys
  C(h, t) then ys => C(h, concat(t, ys))
fun rev(ls) = if ls is
  C(h, t) then concat(rev(t), C(h, N))
  N then N
rev(primitive)
//│ |#fun| |concat|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |concat|(|t|,| |ys|)|)|←|↵|#fun| |rev|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |concat|(|rev|(|t|)|,| |C|(|h|,| |N|)|)|↵|N| |#then| |N|←|↵|rev|(|primitive|)|
//│ Parsed: {fun concat = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, concat (t, ys,),)›; fun rev = ls, => if ls is ‹(C (h, t,)) then concat (rev (t,), C (h, N,),); (N) then N›; rev (primitive,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ rev^27(primitive⁰)
//│ def concat(xs⁰) = case xs⁰ of {
//│ 	N  => (fun ys⁰ -> ys⁰)
//│ 	| C h⁰ t⁰ => (fun ys¹ -> [C h⁰ concat^5(t⁰, ys¹)])}
//│ def rev(ls⁰) = case ls⁰ of {
//│ 	C h¹ t¹ => concat^15(rev^16(t¹), [C h¹ [N]])
//│ 	| N  => [N]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [rev^27] (hopeless to continue)
//│ 	[rev^27 · concat^15] (using original def)
//│ 		[rev^27 · concat^15 · concat^5] ---> [rev^27 · concat^15] (using original def)
//│ 	[rev^27 · rev^16] ---> [rev^27] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ rev_₀(primitive⁰)
//│ def rev_₀(ls¹) = 
//│ 	case ls¹ of {
//│ 		C h³ t³ => concat_₀(rev_₀(t³), [C h³ [N]])
//│ 		| N  => [N]}
//│ 	where
//│ 	def concat_₀(xs¹) = 
//│ 		case xs¹ of {
//│ 			N  => (fun ys² -> ys²)
//│ 			| C h² t² => (fun ys³ -> [C h² concat_₀(t², ys³)])}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h² concat_₀(t², ys³)]: 39 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h² t² => (fun ys³ -> [C h² concat_₀(t², ys³)])}: 41
//│ [N]: 50 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h² t² => (fun ys³ -> [C h² concat_₀(t², ys³)])}: 41
//│ [C h³ [N]]: 51 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h² t² => (fun ys³ -> [C h² concat_₀(t², ys³)])}: 41
//│ [N]: 53 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => (fun ys² -> ys²) | C h² t² => (fun ys³ -> [C h² concat_₀(t², ys³)])}: 41
//│ ------------------
//│ case xs¹ of {N  => (fun ys² -> ys²) | C h² t² => (fun ys³ -> [C h² concat_₀(t², ys³)])}: 41 --->
//│ 	[C h² concat_₀(t², ys³)]: 39
//│ 	[N]: 50
//│ 	[C h³ [N]]: 51
//│ 	[N]: 53
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ rev_₀(primitive⁰)
//│ def rev_₀(ls²) = 
//│ 	case ls² of {
//│ 		C h³ t³ => concat_₀(rev_₀(t³), [C h³ [N]])
//│ 		| N  => [N]}
//│ 	where
//│ 	def concat_₀(xs²) = 
//│ 		case xs² of {
//│ 			N  => (fun ys⁴ -> ys⁴)
//│ 			| C h² t² => (fun ys⁵ -> [C h² concat_₀(t², ys⁵)])}
//│ <<<<<<< after fusion <<<<<<<


// WRONG: we can do the fusion, despite that `p` here will be consumed by toplevelResult
let rec p = C(p)
fun c(x) = if x is
  C(a) then a
fun main(y) = c(p)
main(0)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |a|←|↵|#fun| |main|(|y|)| |#=| |c|(|p|)|↵|main|(|0|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then a›; fun main = y, => c (p,); main (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ main^11(0)
//│ def c(x⁰) = case x⁰ of {
//│ 	C a⁰ => a⁰}
//│ def main(y⁰) = c^7(p^8)
//│ def p = [C p^1]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [main^11] (hopeless to continue)
//│ 	[main^11 · c^7] (using original def)
//│ 	[main^11 · p^8] (using original def)
//│ 		[main^11 · p^8 · p^1] ---> [main^11 · p^8] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ main_₀(0)
//│ def main_₀(y¹) = 
//│ 	c_₀(p_₀)
//│ 	where
//│ 	def c_₀(x¹) = 
//│ 		case x¹ of {
//│ 			C a¹ => a¹}
//│ 	def p_₀ = 
//│ 		[C p_₀]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C p_₀]: 23 --->
//│ 	NoCons
//│ 	case x¹ of {C a¹ => a¹}: 20
//│ ------------------
//│ case x¹ of {C a¹ => a¹}: 20 --->
//│ 	[C p_₀]: 23
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ main_₀(0)
//│ def main_₀(y²) = 
//│ 	c_₀(p_₀)
//│ 	where
//│ 	def c_₀(x²) = 
//│ 		case x² of {
//│ 			C a¹ => a¹}
//│ 	def p_₀ = 
//│ 		[C p_₀]
//│ <<<<<<< after fusion <<<<<<<

// CORRECT: as long as the top level result is consumed
fun f(a) = if primitive then B else a
fun g(x) = if x is
  B then C
  D then E
fun k(a) = g(f(a))
k
//│ |#fun| |f|(|a|)| |#=| |#if| |primitive| |#then| |B| |#else| |a|↵|#fun| |g|(|x|)| |#=| |#if| |x| |is|→|B| |#then| |C|↵|D| |#then| |E|←|↵|#fun| |k|(|a|)| |#=| |g|(|f|(|a|)|)|↵|k|
//│ Parsed: {fun f = a, => if (primitive) then B else a; fun g = x, => if x is ‹(B) then C; (D) then E›; fun k = a, => g (f (a,),); k}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ k^17
//│ def f(a⁰) = if primitive⁰ then [B] else a⁰
//│ def g(x⁰) = case x⁰ of {
//│ 	B  => [C]
//│ 	| D  => [E]}
//│ def k(a¹) = g^11(f^12(a¹))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [k^17] (hopeless to continue)
//│ 	[k^17 · f^12] (using original def)
//│ 	[k^17 · g^11] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ k_₀
//│ def k_₀(a²) = 
//│ 	g_₀(f_₀(a²))
//│ 	where
//│ 	def f_₀(a³) = 
//│ 		if primitive⁰ then [B] else a³
//│ 	def g_₀(x¹) = 
//│ 		case x¹ of {
//│ 			B  => [C]
//│ 			| D  => [E]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [B]: 30 --->
//│ 	case x¹ of {B  => [C] | D  => [E]}: 27
//│ ------------------
//│ case x¹ of {B  => [C] | D  => [E]}: 27 --->
//│ 	NoProd
//│ 	[B]: 30
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ k_₀
//│ def k_₀(a⁴) = 
//│ 	g_₀(f_₀(a⁴))
//│ 	where
//│ 	def f_₀(a⁵) = 
//│ 		if primitive⁰ then [B] else a⁵
//│ 	def g_₀(x²) = 
//│ 		case x² of {
//│ 			B  => [C]
//│ 			| D  => [E]}
//│ <<<<<<< after fusion <<<<<<<
