:NewParser
:ParseOnly

:ns
// the `p · p` is never touched (checked) by the typer, so no path leads to it, and no recusive map from it
let p = C(p)
fun c(x) = if C(x) is
    C(a) then c(a)
c(p)
//│ |#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |C|(|x|)| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|c|(|p|)|
//│ Parsed: {let p = C (p,); fun c = x, => if C (x,) is ‹(C (a,)) then c (a,)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C p:6^1]
//│ def c:7 = (fun x:8 -> case [C x:8^3] of {
//│ 	C a:9 => (c:7^5 a:9^6)})
//│ (c:7^10 p:6^11)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- knots -------
//│ C(0'p) <: 2'x
//│ 	[-p:6^11 · +c:7^10 · +c:7^5]  --->  [-p:6^11 · +c:7^10]

// the `p · p` is never touched (checked) by the typer, so no path leads to it, and no recusive map from it
:ns
let rec p = C(p)
fun c(x) = if x is
    C(a) then a
fun main(y) = c(p)
main(0)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |a|←|↵|#fun| |main|(|y|)| |#=| |c|(|p|)|↵|main|(|0|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then a›; fun main = y, => c (p,); main (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C p:6^1]
//│ def c:7 = (fun x:9 -> case x:9^3 of {
//│ 	C a:10 => a:10^4})
//│ def main:8 = (fun y:11 -> (c:7^7 p:6^8))
//│ (main:8^11 0)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- knots -------



// NOTE: push in problem
:ns
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
let l = C(K, l)
fun ff(x) = if x is
    K then T
map(ff, l)
//│ |#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |l|)|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|←|↵|map|(|ff|,| |l|)|
//│ Parsed: {fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; let l = C (K, l,); fun ff = x, => if x is ‹(K) then T›; map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = (fun f:9 -> (fun ls:10 -> case ls:10^1 of {
//│ 	C h:11 t:12 => [C (f:9^2 h:11^3) ((map:6^5 f:9^6) t:12^8)]
//│ 	| N => [N]}))
//│ def l:7 = [C [K] l:7^16]
//│ def ff:8 = (fun x:13 -> case x:13^18 of {
//│ 	K => [T]})
//│ ((map:6^22 ff:8^23) l:7^25)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- knots -------
//│ C(K, 1'l) <: 4'ls
//│ 	[-l:7^16 · -l:7^16 · -l:7^25 · +map:6^22 · +map:6^5 · +map:6^5]  --->  [-l:7^16 · -l:7^25 · +map:6^22 · +map:6^5]
//│ 11'x => 12'20_matchres <: 3'f
//│ 	[-ff:8^23 · +map:6^22 · +map:6^5 · +map:6^5]  --->  [-ff:8^23 · +map:6^22 · +map:6^5]

// NOTE: only first two is handled
:ns
_LUMBERHACK_ERROR
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
fun ff(x) = if x is
    K then T
    KK then TT
    KKKK then TTTT
let l = C(K, C(KK, C(KKKK, N)))
map(ff, l)
//│ |_LUMBERHACK_ERROR|↵|#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|ff|,| |l|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; let l = C (K, C (KK, C (KKKK, N,),),); map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = (fun f:9 -> (fun ls:10 -> case ls:10^1 of {
//│ 	C h:11 t:12 => [C (f:9^2 h:11^3) ((map:6^5 f:9^6) t:12^8)]
//│ 	| N => [N]}))
//│ def ff:7 = (fun x:13 -> case x:13^15 of {
//│ 	K => [T]
//│ 	| KK => [TT]
//│ 	| KKKK => [TTTT]})
//│ def l:8 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ ((map:6^28 ff:7^29) l:8^31)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- knots -------
//│ 11'x => 12'19_matchres <: 3'f
//│ 	[-ff:7^29 · +map:6^28 · +map:6^5 · +map:6^5]  --->  [-ff:7^29 · +map:6^28 · +map:6^5]

:ns
_LUMBERHACK_ERROR
fun rev(l1, l2) = if l1 is
    C(h, t) then rev(t, C(h, l2))
    N then l2
fun rev1(l11, l22) = if l11 is
    C(h1, t1) then rev1(t1, C(h1, l22))
    N then l22
let p = C(K, N)
rev(rev1(p, N), N)
//│ |_LUMBERHACK_ERROR|↵|#fun| |rev|(|l1|,| |l2|)| |#=| |#if| |l1| |is|→|C|(|h|,| |t|)| |#then| |rev|(|t|,| |C|(|h|,| |l2|)|)|↵|N| |#then| |l2|←|↵|#fun| |rev1|(|l11|,| |l22|)| |#=| |#if| |l11| |is|→|C|(|h1|,| |t1|)| |#then| |rev1|(|t1|,| |C|(|h1|,| |l22|)|)|↵|N| |#then| |l22|←|↵|#let| |p| |#=| |C|(|K|,| |N|)|↵|rev|(|rev1|(|p|,| |N|)|,| |N|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun rev = l1, l2, => if l1 is ‹(C (h, t,)) then rev (t, C (h, l2,),); (N) then l2›; fun rev1 = l11, l22, => if l11 is ‹(C (h1, t1,)) then rev1 (t1, C (h1, l22,),); (N) then l22›; let p = C (K, N,); rev (rev1 (p, N,), N,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def rev:6 = (fun l1:9 -> (fun l2:10 -> case l1:9^1 of {
//│ 	C h:11 t:12 => ((rev:6^2 t:12^3) [C h:11^5 l2:10^6])
//│ 	| N => l2:10^9}))
//│ def rev1:7 = (fun l11:13 -> (fun l22:14 -> case l11:13^13 of {
//│ 	C h1:15 t1:16 => ((rev1:7^14 t1:16^15) [C h1:15^17 l22:14^18])
//│ 	| N => l22:14^21}))
//│ def p:8 = [C [K] [N]]
//│ ((rev:6^28 ((rev1:7^29 p:8^30) [N])) [N])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- knots -------
//│ N <: 15'20_callres
//│ 	[+rev1:7^29 · -rev1:7^14 · -rev1:7^14]  --->  [+rev1:7^29 · -rev1:7^14]
//│ C(12'h1, 11'l22) <: 3'l1
//│ 	[+rev1:7^14 · +rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^14 · +rev1:7^14 · -rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]
//│ 	[+rev1:7^14 · +rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2 · +rev:6^2]  --->  [+rev1:7^14 · +rev1:7^14 · -rev1:7^29 · +rev:6^28 · +rev:6^2]
//│ C(12'h1, 11'l22) <: 15'20_callres
//│ 	[+rev1:7^14 · -rev1:7^14 · -rev1:7^14]  --->  [+rev1:7^14 · -rev1:7^14]
//│ N <: 8'8_callres
//│ 	[+rev:6^28 · -rev:6^2 · -rev:6^2]  --->  [+rev:6^28 · -rev:6^2]
//│ C(5'h, 4'l2) <: 8'8_callres
//│ 	[+rev:6^2 · -rev:6^2 · -rev:6^2]  --->  [+rev:6^2 · -rev:6^2]


// `id2` used twice
:ns
let p = C(C(C(id2(p))))
fun c(x) = if x is
    C(a) then if a is
        C(a) then c(a)
fun id2(yy) = yy
fun id(y) = id2(y)
c(id(p))
//│ |#let| |p| |#=| |C|(|C|(|C|(|id2|(|p|)|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|a|)| |#then| |c|(|a|)|←|←|↵|#fun| |id2|(|yy|)| |#=| |yy|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|c|(|id|(|p|)|)|
//│ Parsed: {let p = C (C (C (id2 (p,),),),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (a,)) then c (a,)››; fun id2 = yy, => yy; fun id = y, => id2 (y,); c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C [C [C (id2:8^1 p:6^2)]]]
//│ def c:7 = (fun x:10 -> case x:10^7 of {
//│ 	C a:11 => case a:11^8 of {
//│ 		C a:12 => (c:7^9 a:12^10)}})
//│ def id2:8 = (fun yy:13 -> yy:13^15)
//│ def id:9 = (fun y:14 -> (id2:8^17 y:14^18))
//│ (c:7^21 (id:9^22 p:6^23))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- knots -------
//│ C(C(C(4'3_callres))) <: 7'a
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9]
//│ C(C(C(4'3_callres))) <: 6'a
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]
//│ 	[-p:6^2 · +id2:8^1 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^23 · +id:9^22 · +id2:8^17 · -id2:8^1 · -p:6^2 · +id2:8^1 · -id2:8^17 · -id:9^22 · +c:7^21 · +c:7^9]


// no polymorphism
:ns
_LUMBERHACK_ERROR
fun id(x) = x
let rec p1 = C(p1)
fun c1(a) = if a is
    C(i) then c1(i)
id(c1)(id(p1))
//│ |_LUMBERHACK_ERROR|↵|#fun| |id|(|x|)| |#=| |x|↵|#let| |#rec| |p1| |#=| |C|(|p1|)|↵|#fun| |c1|(|a|)| |#=| |#if| |a| |is|→|C|(|i|)| |#then| |c1|(|i|)|←|↵|id|(|c1|)|(|id|(|p1|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun id = x, => x; let rec p1 = C (p1,); fun c1 = a, => if a is ‹(C (i,)) then c1 (i,)›; id (c1,) (id (p1,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def id:6 = (fun x:9 -> x:9^1)
//│ def p1:7 = [C p1:7^3]
//│ def c1:8 = (fun a:10 -> case a:10^5 of {
//│ 	C i:11 => (c1:8^6 i:11^7)})
//│ ((id:6^11 c1:8^12) (id:6^14 p1:7^15))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error
//│ !!!!!!ERROR!!!!!!

:ns
_LUMBERHACK_ERROR
fun map(ls) = if ls is
    C(hh, tt) then C(
        (if hh is
            A then B
            AA then BB
        ),
        map(tt)
    )
    N then N
fun rev(a, lss) = if lss is
    C(h, t) then rev(C(h, a), t)
    N then a
// map(rev(N, C(A, C(AA, N))))
map(rev(N, primitive))
//│ |_LUMBERHACK_ERROR|↵|#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|hh|,| |tt|)| |#then| |C|(|→|(|#if| |hh| |is|→|A| |#then| |B|↵|AA| |#then| |BB|←|↵|)|,|↵|map|(|tt|)|←|↵|)|↵|N| |#then| |N|←|↵|#fun| |rev|(|a|,| |lss|)| |#=| |#if| |lss| |is|→|C|(|h|,| |t|)| |#then| |rev|(|C|(|h|,| |a|)|,| |t|)|↵|N| |#then| |a|←|↵|/* map(rev(N, C(A, C(AA, N))))*/|↵|map|(|rev|(|N|,| |primitive|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun map = ls, => if ls is ‹(C (hh, tt,)) then C ('(' if hh is ‹(A) then B; (AA) then BB›, ')', map (tt,),); (N) then N›; fun rev = a, lss, => if lss is ‹(C (h, t,)) then rev (C (h, a,), t,); (N) then a›; map (rev (N, primitive,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = (fun ls:8 -> case ls:8^1 of {
//│ 	C hh:9 tt:10 => [C case hh:9^2 of {
//│ 		A => [B]
//│ 		| AA => [BB]} (map:6^6 tt:10^7)]
//│ 	| N => [N]})
//│ def rev:7 = (fun a:11 -> (fun lss:12 -> case lss:12^13 of {
//│ 	C h:13 t:14 => ((rev:7^14 [C h:13^15 a:11^16]) t:14^19)
//│ 	| N => a:11^21}))
//│ (map:6^25 ((rev:7^26 [N]) primitive:3^29))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- knots -------
//│ N <: 13'20_callres
//│ 	[+rev:7^26 · -rev:7^14 · -rev:7^14]  --->  [+rev:7^26 · -rev:7^14]
//│ C(10'h, 8'a) <: 13'20_callres
//│ 	[+rev:7^14 · -rev:7^14 · -rev:7^14]  --->  [+rev:7^14 · -rev:7^14]
//│ C(10'h, 8'a) <: 2'ls
//│ 	[+rev:7^14 · +rev:7^14 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]  --->  [+rev:7^14 · +rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]
//│ 	[+rev:7^14 · +rev:7^14 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6 · +map:6^6]  --->  [+rev:7^14 · +rev:7^14 · -rev:7^14 · -rev:7^26 · +map:6^25 · +map:6^6]

:ns
_LUMBERHACK_ERROR
let p = Pair(A, B)
fun c(x) = if x is
    Pair(a, b) then c(Pair(b, a))
c(p)
//│ |_LUMBERHACK_ERROR|↵|#let| |p| |#=| |Pair|(|A|,| |B|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|Pair|(|a|,| |b|)| |#then| |c|(|Pair|(|b|,| |a|)|)|←|↵|c|(|p|)|
//│ Parsed: {_LUMBERHACK_ERROR; let p = Pair (A, B,); fun c = x, => if x is ‹(Pair (a, b,)) then c (Pair (b, a,),)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [Pair [A] [B]]
//│ def c:7 = (fun x:8 -> case x:8^4 of {
//│ 	Pair a:9 b:10 => (c:7^5 [Pair b:10^6 a:9^7])})
//│ (c:7^12 p:6^13)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- knots -------
//│ B <: 4'b
//│ 	[-p:6^13 · +c:7^12 · +c:7^5 · +c:7^5]  --->  [-p:6^13 · +c:7^12]
//│ A <: 3'a
//│ 	[-p:6^13 · +c:7^12 · +c:7^5 · +c:7^5]  --->  [-p:6^13 · +c:7^12]


// pushing in of auxiliary parameters
// FIXME: weird recursive
:ns
fun last(x, ys) = if ys is
    N then x
    C(h, t) then last(h, t)
fun lastDrive(xs) = if xs is
    N then None
    C(hh, tt) then Some(last(hh, tt))
lastDrive(C(1, C(2, N)))
//│ |#fun| |last|(|x|,| |ys|)| |#=| |#if| |ys| |is|→|N| |#then| |x|↵|C|(|h|,| |t|)| |#then| |last|(|h|,| |t|)|←|↵|#fun| |lastDrive|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |None|↵|C|(|hh|,| |tt|)| |#then| |Some|(|last|(|hh|,| |tt|)|)|←|↵|lastDrive|(|C|(|1|,| |C|(|2|,| |N|)|)|)|
//│ Parsed: {fun last = x, ys, => if ys is ‹(N) then x; (C (h, t,)) then last (h, t,)›; fun lastDrive = xs, => if xs is ‹(N) then None; (C (hh, tt,)) then Some (last (hh, tt,),)›; lastDrive (C (1, C (2, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def last:6 = (fun x:8 -> (fun ys:9 -> case ys:9^1 of {
//│ 	N => x:8^2
//│ 	| C h:10 t:11 => ((last:6^3 h:10^4) t:11^6)}))
//│ def lastDrive:7 = (fun xs:12 -> case xs:12^11 of {
//│ 	N => [None]
//│ 	| C hh:13 tt:14 => [Some ((last:6^13 hh:13^14) tt:14^16)]})
//│ (lastDrive:7^21 [C 1 [C 2 [N]]])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- knots -------
//│ Int <: 7'7_callres
//│ 	[+lastDrive:7^21 · +last:6^13 · +last:6^3 · -last:6^3 · -last:6^3]  --->  [+lastDrive:7^21 · +last:6^13 · +last:6^3 · -last:6^3]
//│ 	[+lastDrive:7^21 · +last:6^13 · -last:6^3 · -last:6^3]  --->  [+lastDrive:7^21 · +last:6^13 · -last:6^3]

:ns
fun inter(xs, ys) = if xs is
    N then ys
    C(h, t) then C(h, inter(ys, t))
inter(C(1, C(2, C(3, N))), C(9, C(8, C(7, N))))
//│ |#fun| |inter|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|N| |#then| |ys|↵|C|(|h|,| |t|)| |#then| |C|(|h|,| |inter|(|ys|,| |t|)|)|←|↵|inter|(|C|(|1|,| |C|(|2|,| |C|(|3|,| |N|)|)|)|,| |C|(|9|,| |C|(|8|,| |C|(|7|,| |N|)|)|)|)|
//│ Parsed: {fun inter = xs, ys, => if xs is ‹(N) then ys; (C (h, t,)) then C (h, inter (ys, t,),)›; inter (C (1, C (2, C (3, N,),),), C (9, C (8, C (7, N,),),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def inter:6 = (fun xs:7 -> (fun ys:8 -> case xs:7^1 of {
//│ 	N => ys:8^2
//│ 	| C h:9 t:10 => [C h:9^3 ((inter:6^4 ys:8^5) t:10^7)]}))
//│ ((inter:6^13 [C 1 [C 2 [C 3 [N]]]]) [C 9 [C 8 [C 7 [N]]]])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- knots -------

:ns
_LUMBERHACK_ERROR
let add = primitive
fun idxSum(ls) = if ls is
    N then acc => 0
    C(h, t) then acc => add(acc, idxSum(t)(add(acc, 1)))
fun rev(lss, a) = if lss is
    N then a
    C(hh, tt) then rev(tt, C(hh, a))
idxSum(rev(primitive, N))(0)
//│ |_LUMBERHACK_ERROR|↵|#let| |add| |#=| |primitive|↵|#fun| |idxSum|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |acc| |=>| |0|↵|C|(|h|,| |t|)| |#then| |acc| |=>| |add|(|acc|,| |idxSum|(|t|)|(|add|(|acc|,| |1|)|)|)|←|↵|#fun| |rev|(|lss|,| |a|)| |#=| |#if| |lss| |is|→|N| |#then| |a|↵|C|(|hh|,| |tt|)| |#then| |rev|(|tt|,| |C|(|hh|,| |a|)|)|←|↵|idxSum|(|rev|(|primitive|,| |N|)|)|(|0|)|
//│ Parsed: {_LUMBERHACK_ERROR; let add = primitive; fun idxSum = ls, => if ls is ‹(N) then acc, => 0; (C (h, t,)) then acc, => add (acc, idxSum (t,) (add (acc, 1,),),)›; fun rev = lss, a, => if lss is ‹(N) then a; (C (hh, tt,)) then rev (tt, C (hh, a,),)›; idxSum (rev (primitive, N,),) (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def add:4 = primitive:3^1
//│ def idxSum:7 = (fun ls:9 -> case ls:9^2 of {
//│ 	N => (fun acc:10 -> 0)
//│ 	| C h:11 t:12 => (fun acc:13 -> ((add:4^5 acc:13^6) ((idxSum:7^8 t:12^9) ((add:4^11 acc:13^12) 1))))})
//│ def rev:8 = (fun lss:14 -> (fun a:15 -> case lss:14^21 of {
//│ 	N => a:15^22
//│ 	| C hh:16 tt:17 => ((rev:8^23 tt:17^24) [C hh:16^26 a:15^27])}))
//│ ((idxSum:7^33 ((rev:8^34 primitive:3^35) [N])) 0)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- knots -------
//│ N <: 20'29_callres
//│ 	[+rev:8^34 · -rev:8^23 · -rev:8^23]  --->  [+rev:8^34 · -rev:8^23]
//│ C(17'hh, 16'a) <: 20'29_callres
//│ 	[+rev:8^23 · -rev:8^23 · -rev:8^23]  --->  [+rev:8^23 · -rev:8^23]
//│ C(17'hh, 16'a) <: 3'ls
//│ 	[+rev:8^23 · +rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^23 · +rev:8^23 · -rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]
//│ 	[+rev:8^23 · +rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8 · +idxSum:7^8]  --->  [+rev:8^23 · +rev:8^23 · -rev:8^34 · +idxSum:7^33 · +idxSum:7^8]


// scope extrusion
:ns
fun inter(xs) = if xs is
    N then ys => ys
    C(h0, t0) then ys => if ys is
        N then N2
        C(h1, t1) then C2(add(h0,h1), inter(t0, t1))
let l1 = C(1, C(2, C(1, C(2, N))))
// let rec l2 = N
let rec l2 = C(11, N)
inter(l1, l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h0|,| |t0|)| |#then| |ys| |=>| |#if| |ys| |is|→|N| |#then| |N2|↵|C|(|h1|,| |t1|)| |#then| |C2|(|add|(|h0|,|h1|)|,| |inter|(|t0|,| |t1|)|)|←|←|↵|#let| |l1| |#=| |C|(|1|,| |C|(|2|,| |C|(|1|,| |C|(|2|,| |N|)|)|)|)|↵|/* let rec l2 = N*/|↵|#let| |#rec| |l2| |#=| |C|(|11|,| |N|)|↵|inter|(|l1|,| |l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h0, t0,)) then ys, => if ys is ‹(N) then N2; (C (h1, t1,)) then C2 (add (h0, h1,), inter (t0, t1,),)››; let l1 = C (1, C (2, C (1, C (2, N,),),),); let rec l2 = C (11, N,); inter (l1, l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def inter:6 = (fun xs:9 -> case xs:9^1 of {
//│ 	N => (fun ys:10 -> ys:10^2)
//│ 	| C h0:11 t0:12 => (fun ys:13 -> case ys:13^4 of {
//│ 		N => [N2]
//│ 		| C h1:14 t1:15 => [C2 ((add:4^6 h0:11^7) h1:14^9) ((inter:6^11 t0:12^12) t1:15^14)]})})
//│ def l1:7 = [C 1 [C 2 [C 1 [C 2 [N]]]]]
//│ def l2:8 = [C 11 [N]]
//│ ((inter:6^33 l1:7^34) l2:8^36)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- knots -------


:ns
let rec p = C(C(C(id(p))))
fun c(x) = if x is
    C(a) then if a is
        C(b) then c(b)
fun id2(z) = z
fun id(y) = id2(y)
fun id3(d) = d
c(id3(p))
//│ |#let| |#rec| |p| |#=| |C|(|C|(|C|(|id|(|p|)|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|b|)| |#then| |c|(|b|)|←|←|↵|#fun| |id2|(|z|)| |#=| |z|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|#fun| |id3|(|d|)| |#=| |d|↵|c|(|id3|(|p|)|)|
//│ Parsed: {let rec p = C (C (C (id (p,),),),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (b,)) then c (b,)››; fun id2 = z, => z; fun id = y, => id2 (y,); fun id3 = d, => d; c (id3 (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C [C [C (id:9^1 p:6^2)]]]
//│ def c:7 = (fun x:11 -> case x:11^7 of {
//│ 	C a:12 => case a:12^8 of {
//│ 		C b:13 => (c:7^9 b:13^10)}})
//│ def id2:8 = (fun z:14 -> z:14^15)
//│ def id:9 = (fun y:15 -> (id2:8^17 y:15^18))
//│ def id3:10 = (fun d:16 -> d:16^21)
//│ (c:7^23 (id3:10^24 p:6^25))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- knots -------
//│ C(C(C(5'3_callres))) <: 7'a
//│ 	[-p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^25 · +id3:10^24 · -id3:10^24 · +c:7^23 · +c:7^9 · +c:7^9 · +c:7^9 · +c:7^9]  --->  [-p:6^2 · +id:9^1 · +id2:8^17 · -id2:8^17 · -id:9^1 · -p:6^25 · +id3:10^24 · -id3:10^24 · +c:7^23 · +c:7^9]

:ns
fun id(k) = k
fun id1(x) = id(x)
fun id2(y) = y
fun id3(z) = z
let rec p = C(C(C(id7(C(C(id1(p)))))))
fun c(xx) = if xx is
    C(a) then c(a)
fun id4(k) = k
fun id5(j) = j
fun id6(l) = l
fun id7(i) = i
id6(id4)(c)(id5(id2)(id3(p)))
//│ |#fun| |id|(|k|)| |#=| |k|↵|#fun| |id1|(|x|)| |#=| |id|(|x|)|↵|#fun| |id2|(|y|)| |#=| |y|↵|#fun| |id3|(|z|)| |#=| |z|↵|#let| |#rec| |p| |#=| |C|(|C|(|C|(|id7|(|C|(|C|(|id1|(|p|)|)|)|)|)|)|)|↵|#fun| |c|(|xx|)| |#=| |#if| |xx| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |id4|(|k|)| |#=| |k|↵|#fun| |id5|(|j|)| |#=| |j|↵|#fun| |id6|(|l|)| |#=| |l|↵|#fun| |id7|(|i|)| |#=| |i|↵|id6|(|id4|)|(|c|)|(|id5|(|id2|)|(|id3|(|p|)|)|)|
//│ Parsed: {fun id = k, => k; fun id1 = x, => id (x,); fun id2 = y, => y; fun id3 = z, => z; let rec p = C (C (C (id7 (C (C (id1 (p,),),),),),),); fun c = xx, => if xx is ‹(C (a,)) then c (a,)›; fun id4 = k, => k; fun id5 = j, => j; fun id6 = l, => l; fun id7 = i, => i; id6 (id4,) (c,) (id5 (id2,) (id3 (p,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def id:6 = (fun k:16 -> k:16^1)
//│ def id1:7 = (fun x:17 -> (id:6^3 x:17^4))
//│ def id2:8 = (fun y:18 -> y:18^7)
//│ def id3:9 = (fun z:19 -> z:19^9)
//│ def p:10 = [C [C [C (id7:15^11 [C [C (id1:7^12 p:10^13)]])]]]
//│ def c:11 = (fun xx:20 -> case xx:20^21 of {
//│ 	C a:21 => (c:11^22 a:21^23)})
//│ def id4:12 = (fun k:22 -> k:22^27)
//│ def id5:13 = (fun j:23 -> j:23^29)
//│ def id6:14 = (fun l:24 -> l:24^31)
//│ def id7:15 = (fun i:25 -> i:25^33)
//│ (((id6:14^35 id4:12^36) c:11^38) ((id5:13^40 id2:8^41) (id3:9^43 p:10^44)))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- knots -------
//│ C(C(C(16'17_callres))) <: 18'a
//│ 	[-p:10^13 · +id1:7^12 · +id:6^3 · -id:6^3 · -id1:7^12 · +id7:15^11 · -id7:15^11 · -p:10^13 · +id1:7^12 · +id:6^3 · -id:6^3 · -id1:7^12 · +id7:15^11 · -id7:15^11 · -p:10^44 · +id3:9^43 · -id3:9^43 · +id5:13^40 · -id5:13^40 · +id2:8^41 · -id2:8^41 · +id5:13^40 · -id5:13^40 · +id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22]  --->  [-p:10^13 · +id1:7^12 · +id:6^3 · -id:6^3 · -id1:7^12 · +id7:15^11 · -id7:15^11 · -p:10^44 · +id3:9^43 · -id3:9^43 · +id5:13^40 · -id5:13^40 · +id2:8^41 · -id2:8^41 · +id5:13^40 · -id5:13^40 · +id6:14^35 · -id6:14^35 · +id4:12^36 · -id4:12^36 · +id6:14^35 · -id6:14^35 · +c:11^38 · +c:11^22 · +c:11^22 · +c:11^22 · +c:11^22]
