:NewParser
:ParseOnly

// the `p · p` is never touched (checked) by the typer, so no path leads to it, and no recusive map from it
let p = C(p)
fun c(x) = if C(x) is
    C(a) then c(a)
c(p)
//│ |#let| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |C|(|x|)| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|c|(|p|)|
//│ Parsed: {let p = C (p,); fun c = x, => if C (x,) is ‹(C (a,)) then c (a,)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:1 = 2: [C 1: p:1]
//│ def c:2 = 9: fun x:3 -> 8: case 4: [C 3: x:3] of {C a:4 -> 7: (5: c:2 6: a:4)}
//│ 12: (10: c:2 11: p:1)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((p:1^11 ⋅ ɛ, C((p:1^1 ⋅ ɛ, 0'p))), (c:2^10 ⋅ c:2^5 ⋅ ɛ, 2'x)) :::: ((p:1^11 ⋅ ɛ, C((p:1^1 ⋅ ɛ, 0'p))), (c:2^10 ⋅ ɛ, 2'x))
//│ ------- defInstance -------
//│ ɛ ==> ɛ:
//│ 	4: [C x:3]  <-->  8: case [C x:3] of {C a:4 -> (c:2 a:4)}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:1 = [C p:1]
//│ def c:2 = fun x:3 -> case [C x:3] of {C a:4 -> (c:2 a:4)}
//│ def p'1'11:7 = [C p'1'11_p'1'1:8]
//│ def p'1'11_p'1'1:8 = [C p'1'11_p'1'1_p'1'1:9]
//│ def p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:15 = [C p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:16]
//│ def p'1'11_p'1'1_p'1'1_p'1'1:10 = [C p'1'11_p'1'1_p'1'1_p'1'1_p'1'1:11]
//│ def c'2'10_c'2'5:6 = fun x:3 -> 
//│ 	let a:4 = x:3 in (c'2'10_c'2'5:6 a:4)
//│ def p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:12 = [C p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:13]
//│ def p'1'11_p'1'1_p'1'1_p'1'1_p'1'1:11 = [C p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:12]
//│ def p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:14 = [C p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:15]
//│ def p'1'11_p'1'1_p'1'1:9 = [C p'1'11_p'1'1_p'1'1_p'1'1:10]
//│ def p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:18 = "RECURSE_TOO_LONG"
//│ def p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:13 = [C p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:14]
//│ def p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:16 = [C p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:17]
//│ def p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:17 = [C p'1'11_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:18]
//│ def c'2'10:5 = fun x:3 -> 
//│ 	let a:4 = x:3 in (c'2'10_c'2'5:6 a:4)
//│ (c'2'10:5 p'1'11:7)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<

// the `p · p` is never touched (checked) by the typer, so no path leads to it, and no recusive map from it
let rec p = C(p)
fun c(x) = if x is
    C(a) then a
fun main(y) = c(p)
main(0)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |a|←|↵|#fun| |main|(|y|)| |#=| |c|(|p|)|↵|main|(|0|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then a›; fun main = y, => c (p,); main (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:1 = 2: [C 1: p:1]
//│ def c:2 = 6: fun x:4 -> 5: case 3: x:4 of {C a:5 -> 4: a:5}
//│ def main:3 = 10: fun y:6 -> 9: (7: c:2 8: p:1)
//│ 13: (11: main:3 12: 0)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ------- defInstance -------
//│ p:1^8 ⋅ ɛ ==> c:2^7 ⋅ ɛ:
//│ 	2: [C p:1]  <-->  5: case x:4 of {C a:5 -> a:5}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:1 = [C p:1]
//│ def c:2 = fun x:4 -> case x:4 of {C a:5 -> a:5}
//│ def main:3 = fun y:6 -> (c:2 p:1)
//│ def main'3'11_c'2'7:8 = fun x:4 -> x:4
//│ def main'3'11_p'1'8_p'1'1_p'1'1:11 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1:12]
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:16 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:17]
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1:13 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:14]
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:20 = "RECURSE_TOO_LONG"
//│ def main'3'11_p'1'8_p'1'1:10 = [C main'3'11_p'1'8_p'1'1_p'1'1:11]
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:18 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:19]
//│ def main'3'11_p'1'8:9 = 
//│ 	let a:5 = main'3'11_p'1'8_p'1'1:10 in a:5
//│ def main'3'11:7 = fun y:6 -> (main'3'11_c'2'7:8 main'3'11_p'1'8:9)
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1:12 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1:13]
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:15 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:16]
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:17 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:18]
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:19 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:20]
//│ def main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:14 = [C main'3'11_p'1'8_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1_p'1'1:15]
//│ (main'3'11:7 0)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<



// NOTE: push in problem
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
let l = C(K, l)
fun ff(x) = if x is
    K then T
map(ff, l)
//│ |#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |l|)|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|←|↵|map|(|ff|,| |l|)|
//│ Parsed: {fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; let l = C (K, l,); fun ff = x, => if x is ‹(K) then T›; map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:1 = 14: fun f:4 -> 13: fun ls:5 -> 12: case 1: ls:5 of {C h:6 t:7 -> 10: [C 4: (2: f:4 3: h:6) 9: (7: (5: map:1 6: f:4) 8: t:7)] | N -> 11: [N]}
//│ def l:2 = 17: [C 15: [K] 16: l:2]
//│ def ff:3 = 21: fun x:8 -> 20: case 18: x:8 of {K -> 19: [T]}
//│ 26: (24: (22: map:1 23: ff:3) 25: l:2)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (
//│   (l:2^25 ⋅ l:2^16 ⋅ l:2^16 ⋅ ɛ, C((ɛ, K()), (l:2^16 ⋅ ɛ, 1'l))),
//│   (map:1^22 ⋅ map:1^5 ⋅ map:1^5 ⋅ ɛ, 4'ls)
//│ ) :::: ((l:2^25 ⋅ l:2^16 ⋅ ɛ, C((ɛ, K()), (l:2^16 ⋅ ɛ, 1'l))), (map:1^22 ⋅ map:1^5 ⋅ ɛ, 4'ls))
//│ ((ff:3^23 ⋅ ɛ, (ɛ, 11'x) => ((ɛ, 12'20_matchres))), (map:1^22 ⋅ map:1^5 ⋅ map:1^5 ⋅ ɛ, 3'f)) :::: ((ff:3^23 ⋅ ɛ, (ɛ, 11'x) => ((ɛ, 12'20_matchres))), (map:1^22 ⋅ map:1^5 ⋅ ɛ, 3'f))
//│ ------- defInstance -------
//│ l:2^25 ⋅ l:2^16 ⋅ ɛ ==> map:1^22 ⋅ map:1^5 ⋅ ɛ:
//│ 	17: [C [K] l:2]  <-->  12: case ls:5 of {C h:6 t:7 -> [C (f:4 h:6) ((map:1 f:4) t:7)] | N -> [N]}
//│ l:2^25 ⋅ ɛ ==> ff:3^23 ⋅ ɛ:
//│ 	15: [K]  <-->  20: case x:8 of {K -> [T]}
//│ l:2^25 ⋅ l:2^16 ⋅ ɛ ==> ff:3^23 ⋅ ɛ:
//│ 	15: [K]  <-->  20: case x:8 of {K -> [T]}
//│ l:2^25 ⋅ ɛ ==> map:1^22 ⋅ ɛ:
//│ 	17: [C [K] l:2]  <-->  12: case ls:5 of {C h:6 t:7 -> [C (f:4 h:6) ((map:1 f:4) t:7)] | N -> [N]}
//│ map:1^22 ⋅ map:1^5 ⋅ l:2^25 ⋅ ɛ ==> map:1^22 ⋅ ff:3^23 ⋅ ɛ:
//│ 	15: [K]  <-->  20: case x:8 of {K -> [T]}
//│ map:1^22 ⋅ l:2^25 ⋅ l:2^16 ⋅ ɛ ==> map:1^22 ⋅ map:1^5 ⋅ ff:3^23 ⋅ ɛ:
//│ 	15: [K]  <-->  20: case x:8 of {K -> [T]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def map:1 = fun f:4 -> fun ls:5 -> case ls:5 of {C h:6 t:7 -> [C (f:4 h:6) ((map:1 f:4) t:7)] | N -> [N]}
//│ def l:2 = [C [K] l:2]
//│ def ff:3 = fun x:8 -> case x:8 of {K -> [T]}
//│ def map'1'22_map'1'5:12 = fun f:4 -> fun ls:5 -> ls:5
//│ def map'1'22:9 = fun f:4 -> fun ls:5 -> ls:5
//│ def l'2'25_l'2'16:13 = 
//│ 	let h:6 = [T] in 
//│ 	let t:7 = l'2'25_l'2'16:13 in [C (f:4 h:6) ((map'1'22_map'1'5:12 f:4) t:7)]
//│ def l'2'25:11 = 
//│ 	let h:6 = [T] in 
//│ 	let t:7 = l'2'25_l'2'16:13 in [C (f:4 h:6) ((map'1'22_map'1'5:12 f:4) t:7)]
//│ def ff'3'23:10 = fun x:8 -> x:8
//│ ((map'1'22:9 ff'3'23:10) l'2'25:11)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<

// NOTE: only first head is handled
_LUMBERHACK_ERROR
fun map(f, ls) = if ls is
    C(h, t) then C(f(h), map(f, t))
    N then N
fun ff(x) = if x is
    K then T
    KK then TT
    KKKK then TTTT
let l = C(K, C(KK, C(KKKK, N)))
map(ff, l)
//│ |_LUMBERHACK_ERROR|↵|#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|ff|,| |l|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; let l = C (K, C (KK, C (KKKK, N,),),); map (ff, l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:1 = 14: fun f:4 -> 13: fun ls:5 -> 12: case 1: ls:5 of {C h:6 t:7 -> 10: [C 4: (2: f:4 3: h:6) 9: (7: (5: map:1 6: f:4) 8: t:7)] | N -> 11: [N]}
//│ def ff:2 = 20: fun x:8 -> 19: case 15: x:8 of {K -> 16: [T] | KK -> 17: [TT] | KKKK -> 18: [TTTT]}
//│ def l:3 = 27: [C 21: [K] 26: [C 22: [KK] 25: [C 23: [KKKK] 24: [N]]]]
//│ 32: (30: (28: map:1 29: ff:2) 31: l:3)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((ff:2^29 ⋅ ɛ, (ɛ, 11'x) => ((ɛ, 12'19_matchres))), (map:1^28 ⋅ map:1^5 ⋅ map:1^5 ⋅ ɛ, 3'f)) :::: ((ff:2^29 ⋅ ɛ, (ɛ, 11'x) => ((ɛ, 12'19_matchres))), (map:1^28 ⋅ map:1^5 ⋅ ɛ, 3'f))
//│ ------- defInstance -------
//│ l:3^31 ⋅ ɛ ==> ff:2^29 ⋅ ɛ:
//│ 	21: [K]  <-->  19: case x:8 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}
//│ 	22: [KK]  <-->  19: case x:8 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}
//│ map:1^28 ⋅ l:3^31 ⋅ ɛ ==> map:1^28 ⋅ map:1^5 ⋅ map:1^5 ⋅ ff:2^29 ⋅ ɛ:
//│ 	23: [KKKK]  <-->  19: case x:8 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}
//│ map:1^28 ⋅ map:1^5 ⋅ l:3^31 ⋅ ɛ ==> map:1^28 ⋅ ff:2^29 ⋅ ɛ:
//│ 	21: [K]  <-->  19: case x:8 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}
//│ l:3^31 ⋅ ɛ ==> map:1^28 ⋅ ɛ:
//│ 	27: [C [K] [C [KK] [C [KKKK] [N]]]]  <-->  12: case ls:5 of {C h:6 t:7 -> [C (f:4 h:6) ((map:1 f:4) t:7)] | N -> [N]}
//│ l:3^31 ⋅ ɛ ==> map:1^28 ⋅ map:1^5 ⋅ map:1^5 ⋅ ɛ:
//│ 	25: [C [KKKK] [N]]  <-->  12: case ls:5 of {C h:6 t:7 -> [C (f:4 h:6) ((map:1 f:4) t:7)] | N -> [N]}
//│ map:1^28 ⋅ l:3^31 ⋅ ɛ ==> map:1^28 ⋅ map:1^5 ⋅ ff:2^29 ⋅ ɛ:
//│ 	22: [KK]  <-->  19: case x:8 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}
//│ 	23: [KKKK]  <-->  19: case x:8 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}
//│ l:3^31 ⋅ ɛ ==> map:1^28 ⋅ map:1^5 ⋅ map:1^5 ⋅ map:1^5 ⋅ ɛ:
//│ 	24: [N]  <-->  12: case ls:5 of {C h:6 t:7 -> [C (f:4 h:6) ((map:1 f:4) t:7)] | N -> [N]}
//│ l:3^31 ⋅ ɛ ==> map:1^28 ⋅ map:1^5 ⋅ ɛ:
//│ 	26: [C [KK] [C [KKKK] [N]]]  <-->  12: case ls:5 of {C h:6 t:7 -> [C (f:4 h:6) ((map:1 f:4) t:7)] | N -> [N]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: 
//│ map:1^28 ⋅ l:3^31 ⋅ ɛ to `[KKKK]` 
//│ 	already has map:1^28 ⋅ map:1^5 ⋅ map:1^5 ⋅ ff:2^29 ⋅ ɛ to `case x:8 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}` 
//│ 	but here comes another match map:1^28 ⋅ map:1^5 ⋅ ff:2^29 ⋅ ɛ to `case x:8 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}` 
//│ !!!!!!ERROR!!!!!!

_LUMBERHACK_ERROR
fun rev(l1, l2) = if l1 is
    C(h, t) then rev(t, C(h, l2))
    N then l2
fun rev1(l11, l22) = if l11 is
    C(h1, t1) then rev1(t1, C(h1, l22))
    N then l22
let p = C(K, N)
rev(rev1(p, N), N)
//│ |_LUMBERHACK_ERROR|↵|#fun| |rev|(|l1|,| |l2|)| |#=| |#if| |l1| |is|→|C|(|h|,| |t|)| |#then| |rev|(|t|,| |C|(|h|,| |l2|)|)|↵|N| |#then| |l2|←|↵|#fun| |rev1|(|l11|,| |l22|)| |#=| |#if| |l11| |is|→|C|(|h1|,| |t1|)| |#then| |rev1|(|t1|,| |C|(|h1|,| |l22|)|)|↵|N| |#then| |l22|←|↵|#let| |p| |#=| |C|(|K|,| |N|)|↵|rev|(|rev1|(|p|,| |N|)|,| |N|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun rev = l1, l2, => if l1 is ‹(C (h, t,)) then rev (t, C (h, l2,),); (N) then l2›; fun rev1 = l11, l22, => if l11 is ‹(C (h1, t1,)) then rev1 (t1, C (h1, l22,),); (N) then l22›; let p = C (K, N,); rev (rev1 (p, N,), N,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def rev:1 = 12: fun l1:4 -> 11: fun l2:5 -> 10: case 1: l1:4 of {C h:6 t:7 -> 8: (4: (2: rev:1 3: t:7) 7: [C 5: h:6 6: l2:5]) | N -> 9: l2:5}
//│ def rev1:2 = 24: fun l11:8 -> 23: fun l22:9 -> 22: case 13: l11:8 of {C h1:10 t1:11 -> 20: (16: (14: rev1:2 15: t1:11) 19: [C 17: h1:10 18: l22:9]) | N -> 21: l22:9}
//│ def p:3 = 27: [C 25: [K] 26: [N]]
//│ 36: (34: (28: rev:1 33: (31: (29: rev1:2 30: p:3) 32: [N])) 35: [N])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((rev1:2^14 ⋅ rev1:2^14 ⋅ ɛ, N()), (rev1:2^29 ⋅ ɛ, 15'20_callres)) :::: ((rev1:2^14 ⋅ ɛ, N()), (rev1:2^29 ⋅ ɛ, 15'20_callres))
//│ (
//│   (rev1:2^29 ⋅ ɛ, C((ɛ, 12'h1), (ɛ, 11'l22))),
//│   (rev1:2^14 ⋅ rev1:2^14 ⋅ rev:1^28 ⋅ rev:1^2 ⋅ rev:1^2 ⋅ ɛ, 3'l1)
//│ ) :::: (
//│   (rev1:2^29 ⋅ ɛ, C((ɛ, 12'h1), (ɛ, 11'l22))),
//│   (rev1:2^14 ⋅ rev1:2^14 ⋅ rev:1^28 ⋅ rev:1^2 ⋅ ɛ, 3'l1)
//│ )
//│ ((rev1:2^14 ⋅ ɛ, C((ɛ, 12'h1), (ɛ, 11'l22))), (ɛ, 15'20_callres)) :::: ((ɛ, C((ɛ, 12'h1), (ɛ, 11'l22))), (ɛ, 15'20_callres))
//│ ((rev:1^2 ⋅ rev:1^2 ⋅ ɛ, N()), (rev:1^28 ⋅ ɛ, 8'8_callres)) :::: ((rev:1^2 ⋅ ɛ, N()), (rev:1^28 ⋅ ɛ, 8'8_callres))
//│ ((rev:1^2 ⋅ ɛ, C((ɛ, 5'h), (ɛ, 4'l2))), (ɛ, 8'8_callres)) :::: ((ɛ, C((ɛ, 5'h), (ɛ, 4'l2))), (ɛ, 8'8_callres))
//│ ------- defInstance -------
//│ ɛ ==> rev1:2^14 ⋅ rev1:2^14 ⋅ rev:1^28 ⋅ rev:1^2 ⋅ rev:1^2 ⋅ ɛ:
//│ 	32: [N]  <-->  10: case l1:4 of {C h:6 t:7 -> ((rev:1 t:7) [C h:6 l2:5]) | N -> l2:5}
//│ rev1:2^29 ⋅ ɛ ==> rev1:2^14 ⋅ rev:1^28 ⋅ rev:1^2 ⋅ ɛ:
//│ 	19: [C h1:10 l22:9]  <-->  10: case l1:4 of {C h:6 t:7 -> ((rev:1 t:7) [C h:6 l2:5]) | N -> l2:5}
//│ rev1:2^29 ⋅ ɛ ==> rev1:2^14 ⋅ rev:1^28 ⋅ ɛ:
//│ 	19: [C h1:10 l22:9]  <-->  10: case l1:4 of {C h:6 t:7 -> ((rev:1 t:7) [C h:6 l2:5]) | N -> l2:5}
//│ rev1:2^29 ⋅ ɛ ==> rev1:2^14 ⋅ rev1:2^14 ⋅ rev:1^28 ⋅ rev:1^2 ⋅ ɛ:
//│ 	19: [C h1:10 l22:9]  <-->  10: case l1:4 of {C h:6 t:7 -> ((rev:1 t:7) [C h:6 l2:5]) | N -> l2:5}
//│ p:3^30 ⋅ ɛ ==> rev1:2^29 ⋅ rev1:2^14 ⋅ ɛ:
//│ 	26: [N]  <-->  22: case l11:8 of {C h1:10 t1:11 -> ((rev1:2 t1:11) [C h1:10 l22:9]) | N -> l22:9}
//│ rev1:2^14 ⋅ ɛ ==> rev:1^28 ⋅ ɛ:
//│ 	32: [N]  <-->  10: case l1:4 of {C h:6 t:7 -> ((rev:1 t:7) [C h:6 l2:5]) | N -> l2:5}
//│ ɛ ==> rev:1^28 ⋅ rev:1^2 ⋅ ɛ:
//│ 	32: [N]  <-->  10: case l1:4 of {C h:6 t:7 -> ((rev:1 t:7) [C h:6 l2:5]) | N -> l2:5}
//│ rev1:2^29 ⋅ ɛ ==> rev:1^28 ⋅ ɛ:
//│ 	19: [C h1:10 l22:9]  <-->  10: case l1:4 of {C h:6 t:7 -> ((rev:1 t:7) [C h:6 l2:5]) | N -> l2:5}
//│ ɛ ==> rev:1^28 ⋅ ɛ:
//│ 	32: [N]  <-->  10: case l1:4 of {C h:6 t:7 -> ((rev:1 t:7) [C h:6 l2:5]) | N -> l2:5}
//│ p:3^30 ⋅ ɛ ==> rev1:2^29 ⋅ ɛ:
//│ 	27: [C [K] [N]]  <-->  22: case l11:8 of {C h1:10 t1:11 -> ((rev1:2 t1:11) [C h1:10 l22:9]) | N -> l22:9}
//│ ɛ ==> rev1:2^14 ⋅ rev:1^28 ⋅ rev:1^2 ⋅ ɛ:
//│ 	32: [N]  <-->  10: case l1:4 of {C h:6 t:7 -> ((rev:1 t:7) [C h:6 l2:5]) | N -> l2:5}
//│ ɛ ==> rev1:2^14 ⋅ rev:1^28 ⋅ rev:1^2 ⋅ rev:1^2 ⋅ ɛ:
//│ 	32: [N]  <-->  10: case l1:4 of {C h:6 t:7 -> ((rev:1 t:7) [C h:6 l2:5]) | N -> l2:5}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: 
//│ rev1:2^29 ⋅ ɛ to `[C h1:10 l22:9]` 
//│ 	already has rev1:2^14 ⋅ rev1:2^14 ⋅ rev:1^28 ⋅ rev:1^2 ⋅ ɛ to `case l1:4 of {C h:6 t:7 -> ((rev:1 t:7) [C h:6 l2:5]) | N -> l2:5}` 
//│ 	but here comes another match rev:1^28 ⋅ ɛ to `case l1:4 of {C h:6 t:7 -> ((rev:1 t:7) [C h:6 l2:5]) | N -> l2:5}` 
//│ !!!!!!ERROR!!!!!!


// `id2` used twice
let p = C(C(C(id2(p))))
fun c(x) = if x is
    C(a) then if a is
        C(a) then c(a)
fun id2(yy) = yy
fun id(y) = id2(y)
c(id(p))
//│ |#let| |p| |#=| |C|(|C|(|C|(|id2|(|p|)|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|a|)| |#then| |c|(|a|)|←|←|↵|#fun| |id2|(|yy|)| |#=| |yy|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|c|(|id|(|p|)|)|
//│ Parsed: {let p = C (C (C (id2 (p,),),),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (a,)) then c (a,)››; fun id2 = yy, => yy; fun id = y, => id2 (y,); c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:1 = 6: [C 5: [C 4: [C 3: (1: id2:3 2: p:1)]]]
//│ def c:2 = 14: fun x:5 -> 13: case 7: x:5 of {C a:6 -> 12: case 8: a:6 of {C a:7 -> 11: (9: c:2 10: a:7)}}
//│ def id2:3 = 16: fun yy:8 -> 15: yy:8
//│ def id:4 = 20: fun y:9 -> 19: (17: id2:3 18: y:9)
//│ 25: (21: c:2 24: (22: id:4 23: p:1))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (
//│   (
//│     p:1^23 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ,
//│     C((ɛ, C((ɛ, C((ɛ, 4'3_callres))))))
//│   ),
//│   (
//│     id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ,
//│     7'a
//│   )
//│ ) :::: (
//│   (id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ, C((ɛ, C((ɛ, C((ɛ, 4'3_callres))))))),
//│   (id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ, 7'a)
//│ )
//│ (
//│   (id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ ɛ, C((ɛ, C((ɛ, C((ɛ, 4'3_callres))))))),
//│   (id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ, 6'a)
//│ ) :::: (
//│   (p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ, C((ɛ, C((ɛ, C((ɛ, 4'3_callres))))))),
//│   (id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ ɛ, 6'a)
//│ )
//│ ------- defInstance -------
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ ɛ ==> id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ ɛ ==> id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ p:1^23 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ p:1^2 ⋅ ɛ ==> c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ p:1^2 ⋅ ɛ ==> c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ ɛ ==> c:2^21 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ ɛ ==> id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ ɛ ==> id2:3^1 ⋅ c:2^21 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> c:2^21 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ ɛ ==> id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ p:1^23 ⋅ ɛ ==> c:2^21 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ ɛ ==> id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ p:1^23 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ id:4^22 ⋅ id2:3^17 ⋅ p:1^2 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ id2:3^1 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	5: [C [C (id2:3 p:1)]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ p:1^2 ⋅ id2:3^1 ⋅ p:1^23 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	4: [C (id2:3 p:1)]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ p:1^23 ⋅ id2:3^1 ⋅ p:1^23 ⋅ p:1^2 ⋅ ɛ ==> id:4^22 ⋅ id2:3^17 ⋅ c:2^21 ⋅ c:2^9 ⋅ c:2^9 ⋅ c:2^9 ⋅ ɛ:
//│ 	5: [C [C (id2:3 p:1)]]  <-->  12: case a:6 of {C a:7 -> (c:2 a:7)}
//│ 	6: [C [C [C (id2:3 p:1)]]]  <-->  13: case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:1 = [C [C [C (id2:3 p:1)]]]
//│ def c:2 = fun x:5 -> case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c:2 a:7)}}
//│ def id2:3 = fun yy:8 -> yy:8
//│ def id:4 = fun y:9 -> (id2:3 y:9)
//│ def c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:25 = fun x:5 -> case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:26 a:7)}}
//│ def c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:23 = fun x:5 -> case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:24 a:7)}}
//│ def c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:26 = fun x:5 -> case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:27 a:7)}}
//│ def p'1'23_p'1'2_id2'3'1:19 = fun yy:8 -> yy:8
//│ def p'1'23_p'1'2_p'1'2_id2'3'1:28 = fun yy:8 -> yy:8
//│ def c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:22 = fun x:5 -> case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:23 a:7)}}
//│ def c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:24 = fun x:5 -> case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:25 a:7)}}
//│ def c'2'21_c'2'9_c'2'9_c'2'9:18 = fun x:5 -> x:5
//│ def c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:21 = fun x:5 -> case x:5 of {C a:6 -> case a:6 of {C a:7 -> (c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:22 a:7)}}
//│ def p'1'23:13 = 
//│ 	let a:6 = 
//│ 		let a:7 = 
//│ 			let a:6 = (p'1'23_id2'3'1:15 p'1'23_p'1'2:16) in a:6 
//│ 		in (c'2'21_c'2'9:14 a:7) 
//│ 	in a:6
//│ def p'1'23_p'1'2:16 = 
//│ 	let a:7 = 
//│ 		let a:6 = 
//│ 			let a:7 = (p'1'23_p'1'2_id2'3'1:19 p'1'23_p'1'2_p'1'2:20) in (c'2'21_c'2'9_c'2'9_c'2'9:18 a:7) 
//│ 		in a:6 
//│ 	in (c'2'21_c'2'9_c'2'9:17 a:7)
//│ def c'2'21_c'2'9_c'2'9:17 = fun x:5 -> x:5
//│ def p'1'23_p'1'2_p'1'2:20 = 
//│ 	let a:6 = 
//│ 		let a:7 = 
//│ 			let a:6 = (p'1'23_p'1'2_p'1'2_id2'3'1:28 p'1'23_p'1'2:16) in case a:6 of {C a:7 -> (c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:21 a:7)} 
//│ 		in (c'2'21_c'2'9:14 a:7) 
//│ 	in a:6
//│ def c'2'21:10 = fun x:5 -> x:5
//│ def p'1'23_id2'3'1:15 = fun yy:8 -> yy:8
//│ def id'4'22:11 = fun y:9 -> (id'4'22_id2'3'17:12 y:9)
//│ def c'2'21_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9_c'2'9:27 = "RECURSE_TOO_LONG"
//│ def id'4'22_id2'3'17:12 = fun yy:8 -> yy:8
//│ def c'2'21_c'2'9:14 = fun x:5 -> x:5
//│ (c'2'21:10 (id'4'22:11 p'1'23:13))
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


// no polymorphism
_LUMBERHACK_ERROR
fun id(x) = x
let rec p1 = C(p1)
fun c1(a) = if a is
    C(i) then c1(i)
id(c1)(id(p1))
//│ |_LUMBERHACK_ERROR|↵|#fun| |id|(|x|)| |#=| |x|↵|#let| |#rec| |p1| |#=| |C|(|p1|)|↵|#fun| |c1|(|a|)| |#=| |#if| |a| |is|→|C|(|i|)| |#then| |c1|(|i|)|←|↵|id|(|c1|)|(|id|(|p1|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun id = x, => x; let rec p1 = C (p1,); fun c1 = a, => if a is ‹(C (i,)) then c1 (i,)›; id (c1,) (id (p1,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def id:1 = 2: fun x:4 -> 1: x:4
//│ def p1:2 = 4: [C 3: p1:2]
//│ def c1:3 = 10: fun a:5 -> 9: case 5: a:5 of {C i:6 -> 8: (6: c1:3 7: i:6)}
//│ 17: (13: (11: id:1 12: c1:3) 16: (14: id:1 15: p1:2))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: type error
//│ !!!!!!ERROR!!!!!!

_LUMBERHACK_ERROR
fun map(ls) = if ls is
    C(hh, tt) then C(
        (if hh is
            A then B
            AA then BB
        ),
        map(tt)
    )
    N then N
fun rev(a, lss) = if lss is
    C(h, t) then rev(C(h, a), t)
    N then a
// map(rev(N, C(A, C(AA, N))))
map(rev(N, primitive))
//│ |_LUMBERHACK_ERROR|↵|#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|hh|,| |tt|)| |#then| |C|(|→|(|#if| |hh| |is|→|A| |#then| |B|↵|AA| |#then| |BB|←|↵|)|,|↵|map|(|tt|)|←|↵|)|↵|N| |#then| |N|←|↵|#fun| |rev|(|a|,| |lss|)| |#=| |#if| |lss| |is|→|C|(|h|,| |t|)| |#then| |rev|(|C|(|h|,| |a|)|,| |t|)|↵|N| |#then| |a|←|↵|/* map(rev(N, C(A, C(AA, N))))*/|↵|map|(|rev|(|N|,| |primitive|)|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun map = ls, => if ls is ‹(C (hh, tt,)) then C ('(' if hh is ‹(A) then B; (AA) then BB›, ')', map (tt,),); (N) then N›; fun rev = a, lss, => if lss is ‹(C (h, t,)) then rev (C (h, a,), t,); (N) then a›; map (rev (N, primitive,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:1 = 12: fun ls:3 -> 11: case 1: ls:3 of {C hh:4 tt:5 -> 9: [C 5: case 2: hh:4 of {A -> 3: [B] | AA -> 4: [BB]} 8: (6: map:1 7: tt:5)] | N -> 10: [N]}
//│ def rev:2 = 24: fun a:6 -> 23: fun lss:7 -> 22: case 13: lss:7 of {C h:8 t:9 -> 20: (18: (14: rev:2 17: [C 15: h:8 16: a:6]) 19: t:9) | N -> 21: a:6}
//│ 31: (25: map:1 30: (28: (26: rev:2 27: [N]) 29: primitive:0))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((rev:2^14 ⋅ rev:2^14 ⋅ ɛ, N()), (rev:2^26 ⋅ ɛ, 13'20_callres)) :::: ((rev:2^14 ⋅ ɛ, N()), (rev:2^26 ⋅ ɛ, 13'20_callres))
//│ ((rev:2^14 ⋅ ɛ, C((ɛ, 10'h), (ɛ, 8'a))), (ɛ, 13'20_callres)) :::: ((ɛ, C((ɛ, 10'h), (ɛ, 8'a))), (ɛ, 13'20_callres))
//│ (
//│   (rev:2^26 ⋅ ɛ, C((ɛ, 10'h), (ɛ, 8'a))),
//│   (rev:2^14 ⋅ rev:2^14 ⋅ map:1^25 ⋅ map:1^6 ⋅ map:1^6 ⋅ ɛ, 2'ls)
//│ ) :::: ((rev:2^26 ⋅ ɛ, C((ɛ, 10'h), (ɛ, 8'a))), (rev:2^14 ⋅ rev:2^14 ⋅ map:1^25 ⋅ map:1^6 ⋅ ɛ, 2'ls))
//│ ------- defInstance -------
//│ ɛ ==> rev:2^14 ⋅ rev:2^14 ⋅ map:1^25 ⋅ map:1^6 ⋅ map:1^6 ⋅ ɛ:
//│ 	27: [N]  <-->  11: case ls:3 of {C hh:4 tt:5 -> [C case hh:4 of {A -> [B] | AA -> [BB]} (map:1 tt:5)] | N -> [N]}
//│ rev:2^26 ⋅ ɛ ==> map:1^25 ⋅ ɛ:
//│ 	17: [C h:8 a:6]  <-->  11: case ls:3 of {C hh:4 tt:5 -> [C case hh:4 of {A -> [B] | AA -> [BB]} (map:1 tt:5)] | N -> [N]}
//│ rev:2^26 ⋅ ɛ ==> rev:2^14 ⋅ map:1^25 ⋅ map:1^6 ⋅ ɛ:
//│ 	17: [C h:8 a:6]  <-->  11: case ls:3 of {C hh:4 tt:5 -> [C case hh:4 of {A -> [B] | AA -> [BB]} (map:1 tt:5)] | N -> [N]}
//│ ɛ ==> rev:2^14 ⋅ map:1^25 ⋅ map:1^6 ⋅ ɛ:
//│ 	27: [N]  <-->  11: case ls:3 of {C hh:4 tt:5 -> [C case hh:4 of {A -> [B] | AA -> [BB]} (map:1 tt:5)] | N -> [N]}
//│ ɛ ==> map:1^25 ⋅ ɛ:
//│ 	27: [N]  <-->  11: case ls:3 of {C hh:4 tt:5 -> [C case hh:4 of {A -> [B] | AA -> [BB]} (map:1 tt:5)] | N -> [N]}
//│ ɛ ==> map:1^25 ⋅ map:1^6 ⋅ ɛ:
//│ 	27: [N]  <-->  11: case ls:3 of {C hh:4 tt:5 -> [C case hh:4 of {A -> [B] | AA -> [BB]} (map:1 tt:5)] | N -> [N]}
//│ rev:2^26 ⋅ ɛ ==> rev:2^14 ⋅ map:1^25 ⋅ ɛ:
//│ 	17: [C h:8 a:6]  <-->  11: case ls:3 of {C hh:4 tt:5 -> [C case hh:4 of {A -> [B] | AA -> [BB]} (map:1 tt:5)] | N -> [N]}
//│ ɛ ==> rev:2^14 ⋅ map:1^25 ⋅ map:1^6 ⋅ map:1^6 ⋅ ɛ:
//│ 	27: [N]  <-->  11: case ls:3 of {C hh:4 tt:5 -> [C case hh:4 of {A -> [B] | AA -> [BB]} (map:1 tt:5)] | N -> [N]}
//│ rev:2^14 ⋅ ɛ ==> map:1^25 ⋅ ɛ:
//│ 	27: [N]  <-->  11: case ls:3 of {C hh:4 tt:5 -> [C case hh:4 of {A -> [B] | AA -> [BB]} (map:1 tt:5)] | N -> [N]}
//│ rev:2^26 ⋅ ɛ ==> rev:2^14 ⋅ rev:2^14 ⋅ map:1^25 ⋅ map:1^6 ⋅ ɛ:
//│ 	17: [C h:8 a:6]  <-->  11: case ls:3 of {C hh:4 tt:5 -> [C case hh:4 of {A -> [B] | AA -> [BB]} (map:1 tt:5)] | N -> [N]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: 
//│ rev:2^26 ⋅ ɛ to `[C h:8 a:6]` 
//│ 	already has rev:2^14 ⋅ rev:2^14 ⋅ map:1^25 ⋅ map:1^6 ⋅ ɛ to `case ls:3 of {C hh:4 tt:5 -> [C case hh:4 of {A -> [B] | AA -> [BB]} (map:1 tt:5)] | N -> [N]}` 
//│ 	but here comes another match rev:2^14 ⋅ map:1^25 ⋅ map:1^6 ⋅ ɛ to `case ls:3 of {C hh:4 tt:5 -> [C case hh:4 of {A -> [B] | AA -> [BB]} (map:1 tt:5)] | N -> [N]}` 
//│ !!!!!!ERROR!!!!!!


_LUMBERHACK_ERROR
let p = Pair(A, B)
fun c(x) = if x is
    Pair(a, b) then c(Pair(b, a))
c(p)
//│ |_LUMBERHACK_ERROR|↵|#let| |p| |#=| |Pair|(|A|,| |B|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|Pair|(|a|,| |b|)| |#then| |c|(|Pair|(|b|,| |a|)|)|←|↵|c|(|p|)|
//│ Parsed: {_LUMBERHACK_ERROR; let p = Pair (A, B,); fun c = x, => if x is ‹(Pair (a, b,)) then c (Pair (b, a,),)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:1 = 3: [Pair 1: [A] 2: [B]]
//│ def c:2 = 11: fun x:3 -> 10: case 4: x:3 of {Pair a:4 b:5 -> 9: (5: c:2 8: [Pair 6: b:5 7: a:4])}
//│ 14: (12: c:2 13: p:1)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((p:1^13 ⋅ ɛ, B()), (c:2^12 ⋅ c:2^5 ⋅ c:2^5 ⋅ ɛ, 4'b)) :::: ((p:1^13 ⋅ ɛ, B()), (c:2^12 ⋅ ɛ, 4'b))
//│ ((p:1^13 ⋅ ɛ, A()), (c:2^12 ⋅ c:2^5 ⋅ c:2^5 ⋅ ɛ, 3'a)) :::: ((p:1^13 ⋅ ɛ, A()), (c:2^12 ⋅ ɛ, 3'a))
//│ ------- defInstance -------
//│ p:1^13 ⋅ ɛ ==> c:2^12 ⋅ ɛ:
//│ 	3: [Pair [A] [B]]  <-->  10: case x:3 of {Pair a:4 b:5 -> (c:2 [Pair b:5 a:4])}
//│ ɛ ==> c:2^5 ⋅ ɛ:
//│ 	8: [Pair b:5 a:4]  <-->  10: case x:3 of {Pair a:4 b:5 -> (c:2 [Pair b:5 a:4])}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ !!!!!!ERROR!!!!!!
//│ java.lang.StackOverflowError
//│ !!!!!!ERROR!!!!!!


// pushing in of auxiliary parameters
fun last(x, ys) = if ys is
    N then x
    C(h, t) then last(h, t)
fun lastDrive(xs) = if xs is
    N then None
    C(hh, tt) then Some(last(hh, tt))
lastDrive(C(1, C(2, N)))
//│ |#fun| |last|(|x|,| |ys|)| |#=| |#if| |ys| |is|→|N| |#then| |x|↵|C|(|h|,| |t|)| |#then| |last|(|h|,| |t|)|←|↵|#fun| |lastDrive|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |None|↵|C|(|hh|,| |tt|)| |#then| |Some|(|last|(|hh|,| |tt|)|)|←|↵|lastDrive|(|C|(|1|,| |C|(|2|,| |N|)|)|)|
//│ Parsed: {fun last = x, ys, => if ys is ‹(N) then x; (C (h, t,)) then last (h, t,)›; fun lastDrive = xs, => if xs is ‹(N) then None; (C (hh, tt,)) then Some (last (hh, tt,),)›; lastDrive (C (1, C (2, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def last:1 = 10: fun x:3 -> 9: fun ys:4 -> 8: case 1: ys:4 of {N -> 2: x:3 | C h:5 t:6 -> 7: (5: (3: last:1 4: h:5) 6: t:6)}
//│ def lastDrive:2 = 20: fun xs:7 -> 19: case 11: xs:7 of {N -> 12: [None] | C hh:8 tt:9 -> 18: [Some 17: (15: (13: last:1 14: hh:8) 16: tt:9)]}
//│ 27: (21: lastDrive:2 26: [C 22: 1 25: [C 23: 2 24: [N]]])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ------- defInstance -------
//│ ɛ ==> lastDrive:2^21 ⋅ last:1^13 ⋅ ɛ:
//│ 	25: [C 2 [N]]  <-->  8: case ys:4 of {N -> x:3 | C h:5 t:6 -> ((last:1 h:5) t:6)}
//│ ɛ ==> lastDrive:2^21 ⋅ last:1^13 ⋅ last:1^3 ⋅ ɛ:
//│ 	24: [N]  <-->  8: case ys:4 of {N -> x:3 | C h:5 t:6 -> ((last:1 h:5) t:6)}
//│ ɛ ==> lastDrive:2^21 ⋅ ɛ:
//│ 	26: [C 1 [C 2 [N]]]  <-->  19: case xs:7 of {N -> [None] | C hh:8 tt:9 -> [Some ((last:1 hh:8) tt:9)]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def last:1 = fun x:3 -> fun ys:4 -> case ys:4 of {N -> x:3 | C h:5 t:6 -> ((last:1 h:5) t:6)}
//│ def lastDrive:2 = fun xs:7 -> case xs:7 of {N -> [None] | C hh:8 tt:9 -> [Some ((last:1 hh:8) tt:9)]}
//│ def lastDrive'2'21:10 = fun xs:7 -> xs:7
//│ def lastDrive'2'21_last'1'13_last'1'3:12 = fun x:3 -> fun ys:4 -> ys:4
//│ def lastDrive'2'21_last'1'13:11 = fun x:3 -> fun ys:4 -> ys:4
//│ (lastDrive'2'21:10 
//│ 	let hh:8 = 1 in 
//│ 	let tt:9 = 
//│ 		let h:5 = 2 in 
//│ 		let t:6 = x:3 in ((lastDrive'2'21_last'1'13_last'1'3:12 h:5) t:6) 
//│ 	in [Some ((lastDrive'2'21_last'1'13:11 hh:8) tt:9)])
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


fun inter(xs, ys) = if xs is
    N then ys
    C(h, t) then C(h, inter(ys, t))
inter(C(1, C(2, C(3, N))), C(9, C(8, C(7, N))))
//│ |#fun| |inter|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|N| |#then| |ys|↵|C|(|h|,| |t|)| |#then| |C|(|h|,| |inter|(|ys|,| |t|)|)|←|↵|inter|(|C|(|1|,| |C|(|2|,| |C|(|3|,| |N|)|)|)|,| |C|(|9|,| |C|(|8|,| |C|(|7|,| |N|)|)|)|)|
//│ Parsed: {fun inter = xs, ys, => if xs is ‹(N) then ys; (C (h, t,)) then C (h, inter (ys, t,),)›; inter (C (1, C (2, C (3, N,),),), C (9, C (8, C (7, N,),),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def inter:1 = 12: fun xs:2 -> 11: fun ys:3 -> 10: case 1: xs:2 of {N -> 2: ys:3 | C h:4 t:5 -> 9: [C 3: h:4 8: (6: (4: inter:1 5: ys:3) 7: t:5)]}
//│ 29: (21: (13: inter:1 20: [C 14: 1 19: [C 15: 2 18: [C 16: 3 17: [N]]]]) 28: [C 22: 9 27: [C 23: 8 26: [C 24: 7 25: [N]]]])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ------- defInstance -------
//│ ɛ ==> inter:1^13 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ ɛ:
//│ 	17: [N]  <-->  10: case xs:2 of {N -> ys:3 | C h:4 t:5 -> [C h:4 ((inter:1 ys:3) t:5)]}
//│ ɛ ==> inter:1^13 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ ɛ:
//│ 	18: [C 3 [N]]  <-->  10: case xs:2 of {N -> ys:3 | C h:4 t:5 -> [C h:4 ((inter:1 ys:3) t:5)]}
//│ ɛ ==> inter:1^13 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ ɛ:
//│ 	19: [C 2 [C 3 [N]]]  <-->  10: case xs:2 of {N -> ys:3 | C h:4 t:5 -> [C h:4 ((inter:1 ys:3) t:5)]}
//│ ɛ ==> inter:1^13 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ ɛ:
//│ 	26: [C 7 [N]]  <-->  10: case xs:2 of {N -> ys:3 | C h:4 t:5 -> [C h:4 ((inter:1 ys:3) t:5)]}
//│ ɛ ==> inter:1^13 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ ɛ:
//│ 	25: [N]  <-->  10: case xs:2 of {N -> ys:3 | C h:4 t:5 -> [C h:4 ((inter:1 ys:3) t:5)]}
//│ ɛ ==> inter:1^13 ⋅ inter:1^4 ⋅ ɛ:
//│ 	28: [C 9 [C 8 [C 7 [N]]]]  <-->  10: case xs:2 of {N -> ys:3 | C h:4 t:5 -> [C h:4 ((inter:1 ys:3) t:5)]}
//│ ɛ ==> inter:1^13 ⋅ ɛ:
//│ 	20: [C 1 [C 2 [C 3 [N]]]]  <-->  10: case xs:2 of {N -> ys:3 | C h:4 t:5 -> [C h:4 ((inter:1 ys:3) t:5)]}
//│ ɛ ==> inter:1^13 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ inter:1^4 ⋅ ɛ:
//│ 	27: [C 8 [C 7 [N]]]  <-->  10: case xs:2 of {N -> ys:3 | C h:4 t:5 -> [C h:4 ((inter:1 ys:3) t:5)]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def inter:1 = fun xs:2 -> fun ys:3 -> case xs:2 of {N -> ys:3 | C h:4 t:5 -> [C h:4 ((inter:1 ys:3) t:5)]}
//│ def inter'1'13_inter'1'4_inter'1'4_inter'1'4_inter'1'4:11 = fun xs:2 -> fun ys:3 -> xs:2
//│ def inter'1'13_inter'1'4_inter'1'4:10 = fun xs:2 -> fun ys:3 -> xs:2
//│ def inter'1'13_inter'1'4:7 = fun xs:2 -> fun ys:3 -> xs:2
//│ def inter'1'13_inter'1'4_inter'1'4_inter'1'4:8 = fun xs:2 -> fun ys:3 -> xs:2
//│ def inter'1'13:6 = fun xs:2 -> fun ys:3 -> xs:2
//│ def inter'1'13_inter'1'4_inter'1'4_inter'1'4_inter'1'4_inter'1'4_inter'1'4:12 = fun xs:2 -> fun ys:3 -> xs:2
//│ def inter'1'13_inter'1'4_inter'1'4_inter'1'4_inter'1'4_inter'1'4:9 = fun xs:2 -> fun ys:3 -> xs:2
//│ ((inter'1'13:6 
//│ 	let h:4 = 1 in 
//│ 	let t:5 = 
//│ 		let h:4 = 2 in 
//│ 		let t:5 = 
//│ 			let h:4 = 3 in 
//│ 			let t:5 = ys:3 in [C h:4 ((inter'1'13_inter'1'4_inter'1'4_inter'1'4_inter'1'4_inter'1'4:9 ys:3) t:5)] 
//│ 		in [C h:4 ((inter'1'13_inter'1'4_inter'1'4_inter'1'4:8 ys:3) t:5)] 
//│ 	in [C h:4 ((inter'1'13_inter'1'4:7 ys:3) t:5)]) 
//│ 	let h:4 = 9 in 
//│ 	let t:5 = 
//│ 		let h:4 = 8 in 
//│ 		let t:5 = 
//│ 			let h:4 = 7 in 
//│ 			let t:5 = ys:3 in [C h:4 ((inter'1'13_inter'1'4_inter'1'4_inter'1'4_inter'1'4_inter'1'4_inter'1'4:12 ys:3) t:5)] 
//│ 		in [C h:4 ((inter'1'13_inter'1'4_inter'1'4_inter'1'4_inter'1'4:11 ys:3) t:5)] 
//│ 	in [C h:4 ((inter'1'13_inter'1'4_inter'1'4:10 ys:3) t:5)])
//│ <<<<<<<<<< Rewritten <<<<<<<<<<

