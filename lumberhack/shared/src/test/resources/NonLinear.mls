:NewParser
:ParseOnly


fun seq(a, b) = b
fun p(x) =
  if primitive(x) then N
  else
    if primitive(x) then C(p(add(x, 1)))
    else let temp = C(p(minus(x, 1))) in seq(f(temp), temp)
fun f(z) = if z is
    C(b) then b
    N then 1
fun c(xx) = if xx is
    C(aa) then primitive(aa)
    N then N
c(p(0))
//│ |#fun| |seq|(|a|,| |b|)| |#=| |b|↵|#fun| |p|(|x|)| |#=|→|#if| |primitive|(|x|)| |#then| |N|↵|#else|→|#if| |primitive|(|x|)| |#then| |C|(|p|(|add|(|x|,| |1|)|)|)|↵|#else| |#let| |temp| |#=| |C|(|p|(|minus|(|x|,| |1|)|)|)| |#in| |seq|(|f|(|temp|)|,| |temp|)|←|←|↵|#fun| |f|(|z|)| |#=| |#if| |z| |is|→|C|(|b|)| |#then| |b|↵|N| |#then| |1|←|↵|#fun| |c|(|xx|)| |#=| |#if| |xx| |is|→|C|(|aa|)| |#then| |primitive|(|aa|)|↵|N| |#then| |N|←|↵|c|(|p|(|0|)|)|
//│ Parsed: {fun seq = a, b, => b; fun p = x, => {if (primitive (x,)) then N else {if (primitive (x,)) then C (p (add (x, 1,),),) else let temp = C (p (minus (x, 1,),),) in seq (f (temp,), temp,)}}; fun f = z, => if z is ‹(C (b,)) then b; (N) then 1›; fun c = xx, => if xx is ‹(C (aa,)) then primitive (aa,); (N) then N›; c (p (0,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^50 (p^51 0))
//│ def c = (fun xx:21 -> case xx:21 of {
//│ 	C aa:22 => (primitive:4 aa:22)
//│ 	| N => [N]})
//│ def f = (fun z:19 -> case z:19 of {
//│ 	C b:20 => b:20
//│ 	| N => 1})
//│ def p = (fun x:17 -> if (primitive:4 x:17) then [N] else if (primitive:4 x:17) then [C (p^11 ((add:6 x:17) 1))] else 
//│ 	let temp:18 = [C (p^19 ((minus:1 x:17) 1))]
//│ 	in ((seq^27 (f^28 temp:18)) temp:18))
//│ def seq = (fun a:15 -> (fun b:16 -> b:16))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^50] (hopeless to continue)
//│ [p^51] (hopeless to continue)
//│ 	[p^51 · f^28] (using original def)
//│ 	[p^51 · p^11] ---> [p^51] (using original def)
//│ 	[p^51 · p^19] ---> [p^51] (using original def)
//│ 	[p^51 · seq^27] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C (p ((minus x) 1))] --->
//│ 	case z of {C b => b | N => 1}
//│ [C (p₀ ((add x) 1))] --->
//│ 	case xx of {C aa => (primitive aa) | N => [N]}
//│ [C (p₀ ((minus x) 1))] --->
//│ 	case xx of {C aa => (primitive aa) | N => [N]}
//│ 	case z of {C b => b | N => 1}
//│ 	 MORE THAN ONE MATCH EXPR
//│ [N] --->
//│ 	case xx of {C aa => (primitive aa) | N => [N]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c₀ (p₀ 0))
//│ def c₀ = 
//│ 	(fun xx -> xx)
//│ def p₀ = 
//│ 	(fun x -> if (primitive x) then [N] else if (primitive x) then 
//│ 		let aa = (p₀ ((add x) 1))
//│ 		in (primitive aa) else 
//│ 		let temp = 	
//│ 			let b = (p₀ ((minus x) 1))
//│ 			in b
//│ 		in ((seq₀ (f₀ temp)) temp))
//│ 	where
//│ 	def f₀ = 
//│ 		(fun z -> z)
//│ 	def seq₀ = 
//│ 		(fun a -> (fun b -> b))
//│ <<<<<<< after fusion <<<<<<<




let a =
    let d = 4
    d
    123
//│ |#let| |a| |#=|→|#let| |d| |#=| |4|↵|d|↵|123|←|
//│ Parsed: {let a = {let d = 4; d; 123}}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def a = 
//│ 	let d:12 = 4
//│ 	in d:12
//│ 	123
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ 
//│ 
//│ <<<<<<< after fusion <<<<<<<


