:NewParser
:ParseOnly

_LUMBERHACK_EVAL
fun concat(xs, ys) = if xs is
  N then ys
  C(h, t) then C(h, concat(t, ys))
fun rev(ls) = if ls is
  C(h, t) then concat(rev(t), C(h, N))
  N then N
rev(C(1, C(2, C(3, N))))
//│ |_LUMBERHACK_EVAL|↵|#fun| |concat|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|N| |#then| |ys|↵|C|(|h|,| |t|)| |#then| |C|(|h|,| |concat|(|t|,| |ys|)|)|←|↵|#fun| |rev|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |concat|(|rev|(|t|)|,| |C|(|h|,| |N|)|)|↵|N| |#then| |N|←|↵|rev|(|C|(|1|,| |C|(|2|,| |C|(|3|,| |N|)|)|)|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun concat = xs, ys, => if xs is ‹(N) then ys; (C (h, t,)) then C (h, concat (t, ys,),)›; fun rev = ls, => if ls is ‹(C (h, t,)) then concat (rev (t,), C (h, N,),); (N) then N›; rev (C (1, C (2, C (3, N,),),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (rev^26 [C 1 [C 2 [C 3 [N]]]])
//│ def concat = (fun xs⁰ -> (fun ys⁰ -> case xs⁰ of {
//│ 	N => ys⁰
//│ 	| C h⁰ t⁰ => [C h⁰ ((concat^4 t⁰) ys⁰)]}))
//│ def rev = (fun ls⁰ -> case ls⁰ of {
//│ 	C h¹ t¹ => ((concat^14 (rev^15 t¹)) [C h¹ [N]])
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [C 3 [C 2 [C 1 [N]]]]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [rev^26]
//│ 	[rev^26 · concat^14]
//│ 		[rev^26 · concat^14 · concat^4] ---> [rev^26 · concat^14] (only one)
//│ 	[rev^26 · rev^15] ---> [rev^26] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (rev₀ [C 1 [C 2 [C 3 [N]]]])
//│ def rev₀ = 
//│ 	(fun ls¹ -> case ls¹ of {
//│ 		C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]])
//│ 		| N => [N]})
//│ 	where
//│ 	def concat₀ = 
//│ 		(fun xs¹ -> (fun ys¹ -> case xs¹ of {
//│ 			N => ys¹
//│ 			| C h² t² => [C h² ((concat₀ t²) ys¹)]}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h² ((concat₀ t²) ys¹)]: 43 --->
//│ 	NoCons
//│ 	case xs¹ of {N => ys¹ | C h² t² => [C h² ((concat₀ t²) ys¹)]}: 44
//│ [N]: 54 --->
//│ 	NoCons
//│ 	case xs¹ of {N => ys¹ | C h² t² => [C h² ((concat₀ t²) ys¹)]}: 44
//│ [C h³ [N]]: 55 --->
//│ 	NoCons
//│ 	case xs¹ of {N => ys¹ | C h² t² => [C h² ((concat₀ t²) ys¹)]}: 44
//│ [N]: 57 --->
//│ 	NoCons
//│ 	case xs¹ of {N => ys¹ | C h² t² => [C h² ((concat₀ t²) ys¹)]}: 44
//│ [N]: 64 --->
//│ 	case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 58
//│ [C 3 [N]]: 65 --->
//│ 	case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 58
//│ [C 2 [C 3 [N]]]: 66 --->
//│ 	case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 58
//│ [C 1 [C 2 [C 3 [N]]]]: 67 --->
//│ 	case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 58
//│ ------------------
//│ case xs¹ of {N => ys¹ | C h² t² => [C h² ((concat₀ t²) ys¹)]}: 44 --->
//│ 	[C h² ((concat₀ t²) ys¹)]: 43
//│ 	[N]: 54
//│ 	[C h³ [N]]: 55
//│ 	[N]: 57
//│ case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 58 --->
//│ 	[N]: 64
//│ 	[C 3 [N]]: 65
//│ 	[C 2 [C 3 [N]]]: 66
//│ 	[C 1 [C 2 [C 3 [N]]]]: 67
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 64 --->
//│ 	case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 58
//│ [C 3 [N]]: 65 --->
//│ 	case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 58
//│ [C 2 [C 3 [N]]]: 66 --->
//│ 	case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 58
//│ [C 1 [C 2 [C 3 [N]]]]: 67 --->
//│ 	case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 58
//│ ------------------
//│ case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 58 --->
//│ 	[N]: 64
//│ 	[C 3 [N]]: 65
//│ 	[C 2 [C 3 [N]]]: 66
//│ 	[C 1 [C 2 [C 3 [N]]]]: 67
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (rev₀ 
//│ 	let h⁴ = 1
//│ 	in let t⁴ = 	
//│ 		let h⁵ = 2
//│ 		in let t⁵ = 	
//│ 			let h⁶ = 3
//│ 			in let t⁶ = [N]
//│ 			in ((concat₀ (rev₀ t⁶)) [C h⁶ [N]])
//│ 		in ((concat₀ (rev₀ t⁵)) [C h⁵ [N]])
//│ 	in ((concat₀ (rev₀ t⁴)) [C h⁴ [N]]))
//│ def rev₀ = 
//│ 	(fun ls² -> ls²)
//│ 	where
//│ 	def concat₀ = 
//│ 		(fun xs² -> (fun ys² -> case xs² of {
//│ 			N => ys²
//│ 			| C h² t² => [C h² ((concat₀ t²) ys²)]}))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C 3 [C 2 [C 1 [N]]]]
//│ <<<<<<< evaluate <<<<<<<
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: type error 'ys⁴ => C('h⁵, '66_callres) <: Destruct(N, C('h⁴, 't⁴))
//│ 	at: mlscript.utils.package$.lastWords(package.scala:186)
//│ 	at: mlscript.lumberhack.Deforest.thunk$1$1(Deforest.scala:496)
//│ 	at: mlscript.lumberhack.Deforest.handle$1$$anonfun$1(Deforest.scala:384)
//│ 	at: mlscript.lumberhack.Deforest.handle$1$$anonfun$adapted$1(Deforest.scala:384)
//│ 	at: mlscript.lumberhack.Deforest$Trace$.trace(Deforest.scala:236)
//│ 	at: mlscript.lumberhack.Deforest.handle$1(Deforest.scala:384)
//│ 	at: mlscript.lumberhack.Deforest.thunk$1$1$$anonfun$7(Deforest.scala:457)
//│ 	at: scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
//│ 	at: scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)

// NOTE: global way to push in variables
_LUMBERHACK_EVAL
fun concat(xs) = if xs is
  N then ys => ys
  C(h, t) then ys => C(h, concat(t, ys))
fun rev(ls) = if ls is
  C(h, t) then concat(rev(t), C(h, N))
  N then N
rev(C(1, C(2, C(3, N))))
//│ |_LUMBERHACK_EVAL|↵|#fun| |concat|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |concat|(|t|,| |ys|)|)|←|↵|#fun| |rev|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |concat|(|rev|(|t|)|,| |C|(|h|,| |N|)|)|↵|N| |#then| |N|←|↵|rev|(|C|(|1|,| |C|(|2|,| |C|(|3|,| |N|)|)|)|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun concat = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, concat (t, ys,),)›; fun rev = ls, => if ls is ‹(C (h, t,)) then concat (rev (t,), C (h, N,),); (N) then N›; rev (C (1, C (2, C (3, N,),),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (rev^27 [C 1 [C 2 [C 3 [N]]]])
//│ def concat = (fun xs⁰ -> case xs⁰ of {
//│ 	N => (fun ys⁰ -> ys⁰)
//│ 	| C h⁰ t⁰ => (fun ys¹ -> [C h⁰ ((concat^5 t⁰) ys¹)])})
//│ def rev = (fun ls⁰ -> case ls⁰ of {
//│ 	C h¹ t¹ => ((concat^15 (rev^16 t¹)) [C h¹ [N]])
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [C 3 [C 2 [C 1 [N]]]]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [rev^27]
//│ 	[rev^27 · concat^15]
//│ 		[rev^27 · concat^15 · concat^5] ---> [rev^27 · concat^15] (only one)
//│ 	[rev^27 · rev^16] ---> [rev^27] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (rev₀ [C 1 [C 2 [C 3 [N]]]])
//│ def rev₀ = 
//│ 	(fun ls¹ -> case ls¹ of {
//│ 		C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]])
//│ 		| N => [N]})
//│ 	where
//│ 	def concat₀ = 
//│ 		(fun xs¹ -> case xs¹ of {
//│ 			N => (fun ys² -> ys²)
//│ 			| C h² t² => (fun ys³ -> [C h² ((concat₀ t²) ys³)])})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h² ((concat₀ t²) ys³)]: 45 --->
//│ 	NoCons
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h² t² => (fun ys³ -> [C h² ((concat₀ t²) ys³)])}: 47
//│ [N]: 56 --->
//│ 	NoCons
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h² t² => (fun ys³ -> [C h² ((concat₀ t²) ys³)])}: 47
//│ [C h³ [N]]: 57 --->
//│ 	NoCons
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h² t² => (fun ys³ -> [C h² ((concat₀ t²) ys³)])}: 47
//│ [N]: 59 --->
//│ 	NoCons
//│ 	case xs¹ of {N => (fun ys² -> ys²) | C h² t² => (fun ys³ -> [C h² ((concat₀ t²) ys³)])}: 47
//│ [N]: 66 --->
//│ 	case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 60
//│ [C 3 [N]]: 67 --->
//│ 	case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 60
//│ [C 2 [C 3 [N]]]: 68 --->
//│ 	case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 60
//│ [C 1 [C 2 [C 3 [N]]]]: 69 --->
//│ 	case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 60
//│ ------------------
//│ case xs¹ of {N => (fun ys² -> ys²) | C h² t² => (fun ys³ -> [C h² ((concat₀ t²) ys³)])}: 47 --->
//│ 	[C h² ((concat₀ t²) ys³)]: 45
//│ 	[N]: 56
//│ 	[C h³ [N]]: 57
//│ 	[N]: 59
//│ case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 60 --->
//│ 	[N]: 66
//│ 	[C 3 [N]]: 67
//│ 	[C 2 [C 3 [N]]]: 68
//│ 	[C 1 [C 2 [C 3 [N]]]]: 69
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 66 --->
//│ 	case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 60
//│ [C 3 [N]]: 67 --->
//│ 	case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 60
//│ [C 2 [C 3 [N]]]: 68 --->
//│ 	case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 60
//│ [C 1 [C 2 [C 3 [N]]]]: 69 --->
//│ 	case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 60
//│ ------------------
//│ case ls¹ of {C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]]) | N => [N]}: 60 --->
//│ 	[N]: 66
//│ 	[C 3 [N]]: 67
//│ 	[C 2 [C 3 [N]]]: 68
//│ 	[C 1 [C 2 [C 3 [N]]]]: 69
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (rev₀ 
//│ 	let h⁴ = 1
//│ 	in let t⁴ = 	
//│ 		let h⁵ = 2
//│ 		in let t⁵ = 	
//│ 			let h⁶ = 3
//│ 			in let t⁶ = [N]
//│ 			in ((concat₀ (rev₀ t⁶)) [C h⁶ [N]])
//│ 		in ((concat₀ (rev₀ t⁵)) [C h⁵ [N]])
//│ 	in ((concat₀ (rev₀ t⁴)) [C h⁴ [N]]))
//│ def rev₀ = 
//│ 	(fun ls² -> ls²)
//│ 	where
//│ 	def concat₀ = 
//│ 		(fun xs² -> case xs² of {
//│ 			N => (fun ys⁴ -> ys⁴)
//│ 			| C h² t² => (fun ys⁵ -> [C h² ((concat₀ t²) ys⁵)])})
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C 3 [C 2 [C 1 [N]]]]
//│ <<<<<<< evaluate <<<<<<<


// NOTE: if there is no concrete list provided as input, no fusion will be done
_LUMBERHACK_EVAL
fun concat(xs, ys) = if xs is
  N then ys
  C(h, t) then C(h, concat(t, ys))
fun rev(ls) = if ls is
  C(h, t) then concat(rev(t), C(h, N))
  N then N
rev(primitive)
//│ |_LUMBERHACK_EVAL|↵|#fun| |concat|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|N| |#then| |ys|↵|C|(|h|,| |t|)| |#then| |C|(|h|,| |concat|(|t|,| |ys|)|)|←|↵|#fun| |rev|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |concat|(|rev|(|t|)|,| |C|(|h|,| |N|)|)|↵|N| |#then| |N|←|↵|rev|(|primitive|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun concat = xs, ys, => if xs is ‹(N) then ys; (C (h, t,)) then C (h, concat (t, ys,),)›; fun rev = ls, => if ls is ‹(C (h, t,)) then concat (rev (t,), C (h, N,),); (N) then N›; rev (primitive,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (rev^26 primitive⁰)
//│ def concat = (fun xs⁰ -> (fun ys⁰ -> case xs⁰ of {
//│ 	N => ys⁰
//│ 	| C h⁰ t⁰ => [C h⁰ ((concat^4 t⁰) ys⁰)]}))
//│ def rev = (fun ls⁰ -> case ls⁰ of {
//│ 	C h¹ t¹ => ((concat^14 (rev^15 t¹)) [C h¹ [N]])
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ case primitive⁰ of {
//│ 	C h¹ t¹ => ((concat (rev t¹)) [C h¹ [N]])
//│ 	| N => [N]}
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [rev^26]
//│ 	[rev^26 · concat^14]
//│ 		[rev^26 · concat^14 · concat^4] ---> [rev^26 · concat^14] (only one)
//│ 	[rev^26 · rev^15] ---> [rev^26] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (rev₀ primitive⁰)
//│ def rev₀ = 
//│ 	(fun ls¹ -> case ls¹ of {
//│ 		C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]])
//│ 		| N => [N]})
//│ 	where
//│ 	def concat₀ = 
//│ 		(fun xs¹ -> (fun ys¹ -> case xs¹ of {
//│ 			N => ys¹
//│ 			| C h² t² => [C h² ((concat₀ t²) ys¹)]}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h² ((concat₀ t²) ys¹)]: 37 --->
//│ 	NoCons
//│ 	case xs¹ of {N => ys¹ | C h² t² => [C h² ((concat₀ t²) ys¹)]}: 38
//│ [N]: 48 --->
//│ 	NoCons
//│ 	case xs¹ of {N => ys¹ | C h² t² => [C h² ((concat₀ t²) ys¹)]}: 38
//│ [C h³ [N]]: 49 --->
//│ 	NoCons
//│ 	case xs¹ of {N => ys¹ | C h² t² => [C h² ((concat₀ t²) ys¹)]}: 38
//│ [N]: 51 --->
//│ 	NoCons
//│ 	case xs¹ of {N => ys¹ | C h² t² => [C h² ((concat₀ t²) ys¹)]}: 38
//│ ------------------
//│ case xs¹ of {N => ys¹ | C h² t² => [C h² ((concat₀ t²) ys¹)]}: 38 --->
//│ 	[C h² ((concat₀ t²) ys¹)]: 37
//│ 	[N]: 48
//│ 	[C h³ [N]]: 49
//│ 	[N]: 51
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (rev₀ primitive⁰)
//│ def rev₀ = 
//│ 	(fun ls² -> case ls² of {
//│ 		C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]])
//│ 		| N => [N]})
//│ 	where
//│ 	def concat₀ = 
//│ 		(fun xs² -> (fun ys² -> case xs² of {
//│ 			N => ys²
//│ 			| C h² t² => [C h² ((concat₀ t²) ys²)]}))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ case primitive⁰ of {
//│ 	C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]])
//│ 	| N => [N]}
//│ <<<<<<< evaluate <<<<<<<


// NOTE: if there is no concrete list provided as input, no fusion will be done
_LUMBERHACK_EVAL
fun concat(xs, ys) = if xs is
  N then ys
  C(h, t) then C(h, concat(t, ys))
fun rev(ls) = if ls is
  C(h, t) then concat(rev(t), C(h, N))
  N then N
rev
//│ |_LUMBERHACK_EVAL|↵|#fun| |concat|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|N| |#then| |ys|↵|C|(|h|,| |t|)| |#then| |C|(|h|,| |concat|(|t|,| |ys|)|)|←|↵|#fun| |rev|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |concat|(|rev|(|t|)|,| |C|(|h|,| |N|)|)|↵|N| |#then| |N|←|↵|rev|
//│ Parsed: {_LUMBERHACK_EVAL; fun concat = xs, ys, => if xs is ‹(N) then ys; (C (h, t,)) then C (h, concat (t, ys,),)›; fun rev = ls, => if ls is ‹(C (h, t,)) then concat (rev (t,), C (h, N,),); (N) then N›; rev}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ rev^26
//│ def concat = (fun xs⁰ -> (fun ys⁰ -> case xs⁰ of {
//│ 	N => ys⁰
//│ 	| C h⁰ t⁰ => [C h⁰ ((concat^4 t⁰) ys⁰)]}))
//│ def rev = (fun ls⁰ -> case ls⁰ of {
//│ 	C h¹ t¹ => ((concat^14 (rev^15 t¹)) [C h¹ [N]])
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ (fun ls⁰ -> case ls⁰ of {
//│ 	C h¹ t¹ => ((concat (rev t¹)) [C h¹ [N]])
//│ 	| N => [N]})
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [rev^26]
//│ 	[rev^26 · concat^14]
//│ 		[rev^26 · concat^14 · concat^4] ---> [rev^26 · concat^14] (only one)
//│ 	[rev^26 · rev^15] ---> [rev^26] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ rev₀
//│ def rev₀ = 
//│ 	(fun ls¹ -> case ls¹ of {
//│ 		C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]])
//│ 		| N => [N]})
//│ 	where
//│ 	def concat₀ = 
//│ 		(fun xs¹ -> (fun ys¹ -> case xs¹ of {
//│ 			N => ys¹
//│ 			| C h² t² => [C h² ((concat₀ t²) ys¹)]}))
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h² ((concat₀ t²) ys¹)]: 35 --->
//│ 	NoCons
//│ 	case xs¹ of {N => ys¹ | C h² t² => [C h² ((concat₀ t²) ys¹)]}: 36
//│ [N]: 46 --->
//│ 	NoCons
//│ 	case xs¹ of {N => ys¹ | C h² t² => [C h² ((concat₀ t²) ys¹)]}: 36
//│ [C h³ [N]]: 47 --->
//│ 	NoCons
//│ 	case xs¹ of {N => ys¹ | C h² t² => [C h² ((concat₀ t²) ys¹)]}: 36
//│ [N]: 49 --->
//│ 	NoCons
//│ 	case xs¹ of {N => ys¹ | C h² t² => [C h² ((concat₀ t²) ys¹)]}: 36
//│ ------------------
//│ case xs¹ of {N => ys¹ | C h² t² => [C h² ((concat₀ t²) ys¹)]}: 36 --->
//│ 	[C h² ((concat₀ t²) ys¹)]: 35
//│ 	[N]: 46
//│ 	[C h³ [N]]: 47
//│ 	[N]: 49
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ rev₀
//│ def rev₀ = 
//│ 	(fun ls² -> case ls² of {
//│ 		C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]])
//│ 		| N => [N]})
//│ 	where
//│ 	def concat₀ = 
//│ 		(fun xs² -> (fun ys² -> case xs² of {
//│ 			N => ys²
//│ 			| C h² t² => [C h² ((concat₀ t²) ys²)]}))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ (fun ls² -> case ls² of {
//│ 	C h³ t³ => ((concat₀ (rev₀ t³)) [C h³ [N]])
//│ 	| N => [N]})
//│ <<<<<<< evaluate <<<<<<<
