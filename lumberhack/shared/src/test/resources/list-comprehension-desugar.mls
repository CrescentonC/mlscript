:ParseOnly
:NewParser


// [(a, c) | (a, b) <- [(5, 10)], (c, d) <- [(1, 3), (2, 3), (a, b)]]
// a less efficient desugaring of list comprehension
_LUMBERHACK_EVAL
fun append(xs, ys) = if xs is
  C(h, t) then C(h, append(t, ys))
  N then ys
fun concatMap(f, ls) = if ls is
  C(h, t) then append(f(h), concatMap(f, t))
  N then N
let ok1 = arg1 => if arg1 is
  P2(a, b) then
    let ok2 = arg2 => if arg2 is
      P2(c, b) then C(P2(a, c), N)
      _ then N
    concatMap(ok2, C(P2(1, 3), C(P2(2, 3), C(P2(a, b), N))))
  _ then N
concatMap(ok1, C(P2(5, 10), N))
//│ |_LUMBERHACK_EVAL|↵|#fun| |append|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |C|(|h|,| |append|(|t|,| |ys|)|)|↵|N| |#then| |ys|←|↵|#fun| |concatMap|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |append|(|f|(|h|)|,| |concatMap|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#let| |ok1| |#=| |arg1| |=>| |#if| |arg1| |is|→|P2|(|a|,| |b|)| |#then|→|#let| |ok2| |#=| |arg2| |=>| |#if| |arg2| |is|→|P2|(|c|,| |b|)| |#then| |C|(|P2|(|a|,| |c|)|,| |N|)|↵|_| |#then| |N|←|↵|concatMap|(|ok2|,| |C|(|P2|(|1|,| |3|)|,| |C|(|P2|(|2|,| |3|)|,| |C|(|P2|(|a|,| |b|)|,| |N|)|)|)|)|←|↵|_| |#then| |N|←|↵|concatMap|(|ok1|,| |C|(|P2|(|5|,| |10|)|,| |N|)|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun append = xs, ys, => if xs is ‹(C (h, t,)) then C (h, append (t, ys,),); (N) then ys›; fun concatMap = f, ls, => if ls is ‹(C (h, t,)) then append (f (h,), concatMap (f, t,),); (N) then N›; let ok1 = arg1, => if arg1 is ‹(P2 (a, b,)) then {let ok2 = arg2, => if arg2 is ‹(P2 (c, b,)) then C (P2 (a, c,), N,); (_) then N›; concatMap (ok2, C (P2 (1, 3,), C (P2 (2, 3,), C (P2 (a, b,), N,),),),)}; (_) then N›; concatMap (ok1, C (P2 (5, 10,), N,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ concatMap^60(ok1^61, [C [P2 5 10] [N]])
//│ def append(xs⁰, ys⁰) = case xs⁰ of {
//│ 	C h⁰ t⁰ => [C h⁰ append^3(t⁰, ys⁰)]
//│ 	| N  => ys⁰}
//│ def concatMap(f⁰, ls⁰) = case ls⁰ of {
//│ 	C h¹ t¹ => append^14(f⁰(h¹), concatMap^19(f⁰, t¹))
//│ 	| N  => [N]}
//│ def ok1(arg1⁰) = case arg1⁰ of {
//│ 	P2 a⁰ b⁰ => 
//│ 		let ok2⁰ = (fun arg2⁰ -> case arg2⁰ of {
//│ 			P2 c⁰ b¹ => [C [P2 a⁰ c⁰] [N]]
//│ 			| _  => [N]})
//│ 		in concatMap^39(ok2⁰, [C [P2 1 3] [C [P2 2 3] [C [P2 a⁰ b⁰] [N]]]])
//│ 	| _  => [N]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [C [P2 5 1] [C [P2 5 2] [C [P2 5 5] [N]]]]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [concatMap^60]
//│ 	[concatMap^60 · append^14]
//│ 		[concatMap^60 · append^14 · append^3] ---> [concatMap^60 · append^14] (only one)
//│ 	[concatMap^60 · concatMap^19] (hopeless to continue)
//│ 		[concatMap^60 · concatMap^19 · append^14] (using original def)
//│ 			[concatMap^60 · concatMap^19 · append^14 · append^3] ---> [concatMap^60 · concatMap^19 · append^14] (using original def)
//│ 		[concatMap^60 · concatMap^19 · concatMap^19] ---> [concatMap^60 · concatMap^19] (using original def)
//│ [ok1^61]
//│ 	[ok1^61 · concatMap^39]
//│ 		[ok1^61 · concatMap^39 · append^14]
//│ 			[ok1^61 · concatMap^39 · append^14 · append^3] ---> [ok1^61 · concatMap^39 · append^14] (only one)
//│ 		[ok1^61 · concatMap^39 · concatMap^19] (hopeless to continue)
//│ 			[ok1^61 · concatMap^39 · concatMap^19 · append^14] (using original def)
//│ 				[ok1^61 · concatMap^39 · concatMap^19 · append^14 · append^3] ---> [ok1^61 · concatMap^39 · concatMap^19 · append^14] (using original def)
//│ 			[ok1^61 · concatMap^39 · concatMap^19 · concatMap^19] ---> [ok1^61 · concatMap^39 · concatMap^19] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ concatMap₀(ok1₀, [C [P2 5 10] [N]])
//│ def concatMap₀(f², ls²) = 
//│ 	case ls² of {
//│ 		C h⁵ t⁵ => append₀(f²(h⁵), concatMap₁(f², t⁵))
//│ 		| N  => [N]}
//│ 	where
//│ 	def append₀(xs¹, ys¹) = 
//│ 		case xs¹ of {
//│ 			C h³ t³ => [C h³ append₀(t³, ys¹)]
//│ 			| N  => ys¹}
//│ 	def concatMap₁(f⁴, ls⁴) = 
//│ 		case ls⁴ of {
//│ 			C h⁸ t⁸ => append₁(f⁴(h⁸), concatMap₁(f⁴, t⁸))
//│ 			| N  => [N]}
//│ 		where
//│ 		def append₁(xs⁴, ys⁴) = 
//│ 			case xs⁴ of {
//│ 				C h⁹ t⁹ => [C h⁹ append₁(t⁹, ys⁴)]
//│ 				| N  => ys⁴}
//│ def ok1₀(arg1¹) = 
//│ 	case arg1¹ of {
//│ 		P2 a¹ b² => 
//│ 			let ok2¹ = (fun arg2¹ -> case arg2¹ of {
//│ 				P2 c¹ b³ => [C [P2 a¹ c¹] [N]]
//│ 				| _  => [N]})
//│ 			in concatMap₂(ok2¹, [C [P2 1 3] [C [P2 2 3] [C [P2 a¹ b²] [N]]]])
//│ 		| _  => [N]}
//│ 	where
//│ 	def concatMap₂(f³, ls³) = 
//│ 		case ls³ of {
//│ 			C h⁷ t⁷ => append₂(f³(h⁷), concatMap₃(f³, t⁷))
//│ 			| N  => [N]}
//│ 		where
//│ 		def append₂(xs³, ys³) = 
//│ 			case xs³ of {
//│ 				C h⁶ t⁶ => [C h⁶ append₂(t⁶, ys³)]
//│ 				| N  => ys³}
//│ 		def concatMap₃(f¹, ls¹) = 
//│ 			case ls¹ of {
//│ 				C h² t² => append₃(f¹(h²), concatMap₃(f¹, t²))
//│ 				| N  => [N]}
//│ 			where
//│ 			def append₃(xs², ys²) = 
//│ 				case xs² of {
//│ 					C h⁴ t⁴ => [C h⁴ append₃(t⁴, ys²)]
//│ 					| N  => ys²}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 81 --->
//│ 	case xs¹ of {C h³ t³ => [C h³ append₀(t³, ys¹)] | N  => ys¹}: 94
//│ 	case xs⁴ of {C h⁹ t⁹ => [C h⁹ append₁(t⁹, ys⁴)] | N  => ys⁴}: 209
//│ [C h⁴ append₃(t⁴, ys²)]: 104 --->
//│ 	case xs¹ of {C h³ t³ => [C h³ append₀(t³, ys¹)] | N  => ys¹}: 94
//│ 	case xs⁴ of {C h⁹ t⁹ => [C h⁹ append₁(t⁹, ys⁴)] | N  => ys⁴}: 209
//│ [N]: 114 --->
//│ 	case xs² of {C h⁴ t⁴ => [C h⁴ append₃(t⁴, ys²)] | N  => ys²}: 106
//│ 	case xs³ of {C h⁶ t⁶ => [C h⁶ append₂(t⁶, ys³)] | N  => ys³}: 165
//│ [C [P2 a¹ c¹] [N]]: 115 --->
//│ 	case xs² of {C h⁴ t⁴ => [C h⁴ append₃(t⁴, ys²)] | N  => ys²}: 106
//│ 	case xs³ of {C h⁶ t⁶ => [C h⁶ append₂(t⁶, ys³)] | N  => ys³}: 165
//│ [N]: 116 --->
//│ 	case xs² of {C h⁴ t⁴ => [C h⁴ append₃(t⁴, ys²)] | N  => ys²}: 106
//│ 	case xs³ of {C h⁶ t⁶ => [C h⁶ append₂(t⁶, ys³)] | N  => ys³}: 165
//│ [P2 1 3]: 124 --->
//│ 	case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]}: 117
//│ [P2 2 3]: 127 --->
//│ 	case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]}: 117
//│ [P2 a¹ b²]: 130 --->
//│ 	case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]}: 117
//│ [N]: 131 --->
//│ 	case ls¹ of {C h² t² => append₃(f¹(h²), concatMap₃(f¹, t²)) | N  => [N]}: 82
//│ [C [P2 a¹ b²] [N]]: 132 --->
//│ 	case ls¹ of {C h² t² => append₃(f¹(h²), concatMap₃(f¹, t²)) | N  => [N]}: 82
//│ [C [P2 2 3] [C [P2 a¹ b²] [N]]]: 133 --->
//│ 	case ls¹ of {C h² t² => append₃(f¹(h²), concatMap₃(f¹, t²)) | N  => [N]}: 82
//│ [C [P2 1 3] [C [P2 2 3] [C [P2 a¹ b²] [N]]]]: 134 --->
//│ 	case ls³ of {C h⁷ t⁷ => append₂(f³(h⁷), concatMap₃(f³, t⁷)) | N  => [N]}: 181
//│ [N]: 137 --->
//│ 	case xs¹ of {C h³ t³ => [C h³ append₀(t³, ys¹)] | N  => ys¹}: 94
//│ 	case xs⁴ of {C h⁹ t⁹ => [C h⁹ append₁(t⁹, ys⁴)] | N  => ys⁴}: 209
//│ [C h⁶ append₂(t⁶, ys³)]: 163 --->
//│ 	case xs¹ of {C h³ t³ => [C h³ append₀(t³, ys¹)] | N  => ys¹}: 94
//│ 	case xs⁴ of {C h⁹ t⁹ => [C h⁹ append₁(t⁹, ys⁴)] | N  => ys⁴}: 209
//│ [N]: 180 --->
//│ 	case xs¹ of {C h³ t³ => [C h³ append₀(t³, ys¹)] | N  => ys¹}: 94
//│ 	case xs⁴ of {C h⁹ t⁹ => [C h⁹ append₁(t⁹, ys⁴)] | N  => ys⁴}: 209
//│ [P2 5 10]: 217 --->
//│ 	case arg1¹ of {P2 a¹ b² => let ok2¹ = (fun arg2¹ -> case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]})
//│ in concatMap₂(ok2¹, [C [P2 1 3] [C [P2 2 3] [C [P2 a¹ b²] [N]]]]) | _  => [N]}: 138
//│ [N]: 218 --->
//│ 	case ls⁴ of {C h⁸ t⁸ => append₁(f⁴(h⁸), concatMap₁(f⁴, t⁸)) | N  => [N]}: 197
//│ [C [P2 5 10] [N]]: 219 --->
//│ 	case ls² of {C h⁵ t⁵ => append₀(f²(h⁵), concatMap₁(f², t⁵)) | N  => [N]}: 153
//│ ------------------
//│ case ls¹ of {C h² t² => append₃(f¹(h²), concatMap₃(f¹, t²)) | N  => [N]}: 82 --->
//│ 	[N]: 131
//│ 	[C [P2 a¹ b²] [N]]: 132
//│ 	[C [P2 2 3] [C [P2 a¹ b²] [N]]]: 133
//│ case xs¹ of {C h³ t³ => [C h³ append₀(t³, ys¹)] | N  => ys¹}: 94 --->
//│ 	[N]: 81
//│ 	[C h⁴ append₃(t⁴, ys²)]: 104
//│ 	[N]: 137
//│ 	[C h⁶ append₂(t⁶, ys³)]: 163
//│ 	[N]: 180
//│ case xs² of {C h⁴ t⁴ => [C h⁴ append₃(t⁴, ys²)] | N  => ys²}: 106 --->
//│ 	[N]: 114
//│ 	[C [P2 a¹ c¹] [N]]: 115
//│ 	[N]: 116
//│ case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]}: 117 --->
//│ 	[P2 1 3]: 124
//│ 	[P2 2 3]: 127
//│ 	[P2 a¹ b²]: 130
//│ case arg1¹ of {P2 a¹ b² => let ok2¹ = (fun arg2¹ -> case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]})
//│ in concatMap₂(ok2¹, [C [P2 1 3] [C [P2 2 3] [C [P2 a¹ b²] [N]]]]) | _  => [N]}: 138 --->
//│ 	[P2 5 10]: 217
//│ case ls² of {C h⁵ t⁵ => append₀(f²(h⁵), concatMap₁(f², t⁵)) | N  => [N]}: 153 --->
//│ 	[C [P2 5 10] [N]]: 219
//│ case xs³ of {C h⁶ t⁶ => [C h⁶ append₂(t⁶, ys³)] | N  => ys³}: 165 --->
//│ 	[N]: 114
//│ 	[C [P2 a¹ c¹] [N]]: 115
//│ 	[N]: 116
//│ case ls³ of {C h⁷ t⁷ => append₂(f³(h⁷), concatMap₃(f³, t⁷)) | N  => [N]}: 181 --->
//│ 	[C [P2 1 3] [C [P2 2 3] [C [P2 a¹ b²] [N]]]]: 134
//│ case ls⁴ of {C h⁸ t⁸ => append₁(f⁴(h⁸), concatMap₁(f⁴, t⁸)) | N  => [N]}: 197 --->
//│ 	[N]: 218
//│ case xs⁴ of {C h⁹ t⁹ => [C h⁹ append₁(t⁹, ys⁴)] | N  => ys⁴}: 209 --->
//│ 	[N]: 81
//│ 	[C h⁴ append₃(t⁴, ys²)]: 104
//│ 	[N]: 137
//│ 	[C h⁶ append₂(t⁶, ys³)]: 163
//│ 	[N]: 180
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [P2 1 3]: 124 --->
//│ 	case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]}: 117
//│ [P2 2 3]: 127 --->
//│ 	case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]}: 117
//│ [P2 a¹ b²]: 130 --->
//│ 	case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]}: 117
//│ [N]: 131 --->
//│ 	case ls¹ of {C h² t² => append₃(f¹(h²), concatMap₃(f¹, t²)) | N  => [N]}: 82
//│ [C [P2 a¹ b²] [N]]: 132 --->
//│ 	case ls¹ of {C h² t² => append₃(f¹(h²), concatMap₃(f¹, t²)) | N  => [N]}: 82
//│ [C [P2 2 3] [C [P2 a¹ b²] [N]]]: 133 --->
//│ 	case ls¹ of {C h² t² => append₃(f¹(h²), concatMap₃(f¹, t²)) | N  => [N]}: 82
//│ [C [P2 1 3] [C [P2 2 3] [C [P2 a¹ b²] [N]]]]: 134 --->
//│ 	case ls³ of {C h⁷ t⁷ => append₂(f³(h⁷), concatMap₃(f³, t⁷)) | N  => [N]}: 181
//│ [P2 5 10]: 217 --->
//│ 	case arg1¹ of {P2 a¹ b² => let ok2¹ = (fun arg2¹ -> case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]})
//│ in concatMap₂(ok2¹, [C [P2 1 3] [C [P2 2 3] [C [P2 a¹ b²] [N]]]]) | _  => [N]}: 138
//│ [N]: 218 --->
//│ 	case ls⁴ of {C h⁸ t⁸ => append₁(f⁴(h⁸), concatMap₁(f⁴, t⁸)) | N  => [N]}: 197
//│ [C [P2 5 10] [N]]: 219 --->
//│ 	case ls² of {C h⁵ t⁵ => append₀(f²(h⁵), concatMap₁(f², t⁵)) | N  => [N]}: 153
//│ ------------------
//│ case ls¹ of {C h² t² => append₃(f¹(h²), concatMap₃(f¹, t²)) | N  => [N]}: 82 --->
//│ 	[N]: 131
//│ 	[C [P2 a¹ b²] [N]]: 132
//│ 	[C [P2 2 3] [C [P2 a¹ b²] [N]]]: 133
//│ case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]}: 117 --->
//│ 	[P2 1 3]: 124
//│ 	[P2 2 3]: 127
//│ 	[P2 a¹ b²]: 130
//│ case arg1¹ of {P2 a¹ b² => let ok2¹ = (fun arg2¹ -> case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]})
//│ in concatMap₂(ok2¹, [C [P2 1 3] [C [P2 2 3] [C [P2 a¹ b²] [N]]]]) | _  => [N]}: 138 --->
//│ 	[P2 5 10]: 217
//│ case ls² of {C h⁵ t⁵ => append₀(f²(h⁵), concatMap₁(f², t⁵)) | N  => [N]}: 153 --->
//│ 	[C [P2 5 10] [N]]: 219
//│ case ls³ of {C h⁷ t⁷ => append₂(f³(h⁷), concatMap₃(f³, t⁷)) | N  => [N]}: 181 --->
//│ 	[C [P2 1 3] [C [P2 2 3] [C [P2 a¹ b²] [N]]]]: 134
//│ case ls⁴ of {C h⁸ t⁸ => append₁(f⁴(h⁸), concatMap₁(f⁴, t⁸)) | N  => [N]}: 197 --->
//│ 	[N]: 218
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ concatMap₀(ok1₀, 
//│ 	let h¹⁰ = 	
//│ 		let a² = 5
//│ 		in let b⁴ = 10
//│ 		in let ok2² = (fun arg2² -> arg2²(a²))
//│ 		in concatMap₂(ok2², 
//│ 			let h¹¹ = 	
//│ 				let c⁴ = 1
//│ 				in (fun a⁵ -> [C [P2 a⁵ c⁴] [N]])
//│ 			in let t¹¹ = 	
//│ 				let h¹² = 	
//│ 					let c³ = 2
//│ 					in (fun a⁴ -> [C [P2 a⁴ c³] [N]])
//│ 				in let t¹² = 	
//│ 					let h¹³ = 	
//│ 						let c² = a²
//│ 						in (fun a³ -> [C [P2 a³ c²] [N]])
//│ 					in let t¹³ = (fun f¹⁰ -> [N])
//│ 					in (fun f⁹ -> append₃(f⁹(h¹³), concatMap₃(f⁹, t¹³)))
//│ 				in (fun f⁸ -> append₃(f⁸(h¹²), concatMap₃(f⁸, t¹²)))
//│ 			in (fun f⁷ -> append₂(f⁷(h¹¹), concatMap₃(f⁷, t¹¹))))
//│ 	in let t¹⁰ = (fun f⁶ -> [N])
//│ 	in (fun f⁵ -> append₀(f⁵(h¹⁰), concatMap₁(f⁵, t¹⁰))))
//│ def concatMap₀(f¹⁴, ls⁸) = 
//│ 	ls⁸(f¹⁴)
//│ 	where
//│ 	def append₀(xs⁸, ys⁸) = 
//│ 		case xs⁸ of {
//│ 			C h³ t³ => [C h³ append₀(t³, ys⁸)]
//│ 			| N  => ys⁸}
//│ 	def concatMap₁(f¹³, ls⁷) = 
//│ 		ls⁷(f¹³)
//│ 		where
//│ 		def append₁(xs⁶, ys⁶) = 
//│ 			case xs⁶ of {
//│ 				C h⁹ t⁹ => [C h⁹ append₁(t⁹, ys⁶)]
//│ 				| N  => ys⁶}
//│ def ok1₀(arg1²) = 
//│ 	arg1²
//│ 	where
//│ 	def concatMap₂(f¹², ls⁶) = 
//│ 		ls⁶(f¹²)
//│ 		where
//│ 		def append₂(xs⁷, ys⁷) = 
//│ 			case xs⁷ of {
//│ 				C h⁶ t⁶ => [C h⁶ append₂(t⁶, ys⁷)]
//│ 				| N  => ys⁷}
//│ 		def concatMap₃(f¹¹, ls⁵) = 
//│ 			ls⁵(f¹¹)
//│ 			where
//│ 			def append₃(xs⁵, ys⁵) = 
//│ 				case xs⁵ of {
//│ 					C h⁴ t⁴ => [C h⁴ append₃(t⁴, ys⁵)]
//│ 					| N  => ys⁵}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C [P2 5 1] [C [P2 5 2] [C [P2 5 5] [N]]]]
//│ <<<<<<< evaluate <<<<<<<
//│ 
//│ ~~~~~~~~~~~~~~~~~~~~~~~ NEXT ITERATION ~~~~~~~~~~~~~~~~~~~~~~~
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [append₀^87]
//│ 	[append₀^87 · append₀^162] ---> [append₀^87] (only one)
//│ [append₂^67]
//│ 	[append₂^67 · append₂^135] ---> [append₂^67] (only one)
//│ [append₃^39] (hopeless to continue)
//│ 	[append₃^39 · append₃^111] ---> [append₃^39] (using original def)
//│ [append₃^53] (hopeless to continue)
//│ 	[append₃^53 · append₃^111] ---> [append₃^53] (using original def)
//│ [concatMap₀^1] (hopeless to continue)
//│ [concatMap₁^92] (hopeless to continue)
//│ [concatMap₂^10] (hopeless to continue)
//│ [concatMap₃^44] (hopeless to continue)
//│ [concatMap₃^58] (hopeless to continue)
//│ [concatMap₃^72] (hopeless to continue)
//│ [ok1₀^2] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ concatMap₀₀(ok1₀₀, 
//│ 	let h¹² = 	
//│ 		let a⁴ = 5
//│ 		in let b¹ = 10
//│ 		in let ok2¹ = (fun arg2¹ -> arg2¹(a⁴))
//│ 		in concatMap₂₀(ok2¹, 
//│ 			let h¹³ = 	
//│ 				let c³ = 1
//│ 				in (fun a⁵ -> [C [P2 a⁵ c³] [N]])
//│ 			in let t¹² = 	
//│ 				let h¹⁴ = 	
//│ 					let c⁴ = 2
//│ 					in (fun a⁶ -> [C [P2 a⁶ c⁴] [N]])
//│ 				in let t¹³ = 	
//│ 					let h¹⁵ = 	
//│ 						let c⁵ = a⁴
//│ 						in (fun a⁷ -> [C [P2 a⁷ c⁵] [N]])
//│ 					in let t¹⁴ = (fun f¹⁶ -> [N])
//│ 					in (fun f¹⁷ -> append₃₀(f¹⁷(h¹⁵), concatMap₃₀(f¹⁷, t¹⁴)))
//│ 				in (fun f¹⁸ -> append₃₁(f¹⁸(h¹⁴), concatMap₃₁(f¹⁸, t¹³)))
//│ 			in (fun f¹⁹ -> append₂₀(f¹⁹(h¹³), concatMap₃₂(f¹⁹, t¹²))))
//│ 	in let t¹⁵ = (fun f²⁰ -> [N])
//│ 	in (fun f²¹ -> append₀₀(f²¹(h¹²), concatMap₁₀(f²¹, t¹⁵))))
//│ def append₀₀(xs⁴, ys⁴) = 
//│ 	case xs⁴ of {
//│ 		C h⁸ t⁸ => [C h⁸ append₀₀(t⁸, ys⁴)]
//│ 		| N  => ys⁴}
//│ def append₂₀(xs⁶, ys⁶) = 
//│ 	case xs⁶ of {
//│ 		C h¹⁰ t¹⁰ => [C h¹⁰ append₂₀(t¹⁰, ys⁶)]
//│ 		| N  => ys⁶}
//│ def append₃₀(xs⁷, ys⁷) = 
//│ 	case xs⁷ of {
//│ 		C h¹¹ t¹¹ => [C h¹¹ append₃₀(t¹¹, ys⁷)]
//│ 		| N  => ys⁷}
//│ def append₃₁(xs⁵, ys⁵) = 
//│ 	case xs⁵ of {
//│ 		C h⁹ t⁹ => [C h⁹ append₃₁(t⁹, ys⁵)]
//│ 		| N  => ys⁵}
//│ def concatMap₀₀(f¹³, ls⁷) = 
//│ 	ls⁷(f¹³)
//│ def concatMap₁₀(f¹⁴, ls⁸) = 
//│ 	ls⁸(f¹⁴)
//│ def concatMap₂₀(f¹¹, ls⁵) = 
//│ 	ls⁵(f¹¹)
//│ def concatMap₃₀(f¹², ls⁶) = 
//│ 	ls⁶(f¹²)
//│ def concatMap₃₁(f¹⁰, ls⁴) = 
//│ 	ls⁴(f¹⁰)
//│ def concatMap₃₂(f¹⁵, ls⁹) = 
//│ 	ls⁹(f¹⁵)
//│ def ok1₀₀(arg1¹) = 
//│ 	arg1¹
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h⁹ append₃₁(t⁹, ys⁵)]: 206 --->
//│ 	case xs⁴ of {C h⁸ t⁸ => [C h⁸ append₀₀(t⁸, ys⁴)] | N  => ys⁴}: 181
//│ [C h¹⁰ append₂₀(t¹⁰, ys⁶)]: 230 --->
//│ 	case xs⁴ of {C h⁸ t⁸ => [C h⁸ append₀₀(t⁸, ys⁴)] | N  => ys⁴}: 181
//│ [C h¹¹ append₃₀(t¹¹, ys⁷)]: 247 --->
//│ 	case xs⁴ of {C h⁸ t⁸ => [C h⁸ append₀₀(t⁸, ys⁴)] | N  => ys⁴}: 181
//│ [N]: 268 --->
//│ 	case xs⁵ of {C h⁹ t⁹ => [C h⁹ append₃₁(t⁹, ys⁵)] | N  => ys⁵}: 208
//│ 	case xs⁶ of {C h¹⁰ t¹⁰ => [C h¹⁰ append₂₀(t¹⁰, ys⁶)] | N  => ys⁶}: 232
//│ 	case xs⁷ of {C h¹¹ t¹¹ => [C h¹¹ append₃₀(t¹¹, ys⁷)] | N  => ys⁷}: 249
//│ [C [P2 a⁵ c³] [N]]: 269 --->
//│ 	case xs⁵ of {C h⁹ t⁹ => [C h⁹ append₃₁(t⁹, ys⁵)] | N  => ys⁵}: 208
//│ 	case xs⁶ of {C h¹⁰ t¹⁰ => [C h¹⁰ append₂₀(t¹⁰, ys⁶)] | N  => ys⁶}: 232
//│ 	case xs⁷ of {C h¹¹ t¹¹ => [C h¹¹ append₃₀(t¹¹, ys⁷)] | N  => ys⁷}: 249
//│ [N]: 276 --->
//│ 	case xs⁵ of {C h⁹ t⁹ => [C h⁹ append₃₁(t⁹, ys⁵)] | N  => ys⁵}: 208
//│ 	case xs⁶ of {C h¹⁰ t¹⁰ => [C h¹⁰ append₂₀(t¹⁰, ys⁶)] | N  => ys⁶}: 232
//│ 	case xs⁷ of {C h¹¹ t¹¹ => [C h¹¹ append₃₀(t¹¹, ys⁷)] | N  => ys⁷}: 249
//│ [C [P2 a⁶ c⁴] [N]]: 277 --->
//│ 	case xs⁵ of {C h⁹ t⁹ => [C h⁹ append₃₁(t⁹, ys⁵)] | N  => ys⁵}: 208
//│ 	case xs⁶ of {C h¹⁰ t¹⁰ => [C h¹⁰ append₂₀(t¹⁰, ys⁶)] | N  => ys⁶}: 232
//│ 	case xs⁷ of {C h¹¹ t¹¹ => [C h¹¹ append₃₀(t¹¹, ys⁷)] | N  => ys⁷}: 249
//│ [N]: 284 --->
//│ 	case xs⁵ of {C h⁹ t⁹ => [C h⁹ append₃₁(t⁹, ys⁵)] | N  => ys⁵}: 208
//│ 	case xs⁶ of {C h¹⁰ t¹⁰ => [C h¹⁰ append₂₀(t¹⁰, ys⁶)] | N  => ys⁶}: 232
//│ 	case xs⁷ of {C h¹¹ t¹¹ => [C h¹¹ append₃₀(t¹¹, ys⁷)] | N  => ys⁷}: 249
//│ [C [P2 a⁷ c⁵] [N]]: 285 --->
//│ 	case xs⁵ of {C h⁹ t⁹ => [C h⁹ append₃₁(t⁹, ys⁵)] | N  => ys⁵}: 208
//│ 	case xs⁶ of {C h¹⁰ t¹⁰ => [C h¹⁰ append₂₀(t¹⁰, ys⁶)] | N  => ys⁶}: 232
//│ 	case xs⁷ of {C h¹¹ t¹¹ => [C h¹¹ append₃₀(t¹¹, ys⁷)] | N  => ys⁷}: 249
//│ [N]: 288 --->
//│ 	case xs⁴ of {C h⁸ t⁸ => [C h⁸ append₀₀(t⁸, ys⁴)] | N  => ys⁴}: 181
//│ ------------------
//│ case xs⁴ of {C h⁸ t⁸ => [C h⁸ append₀₀(t⁸, ys⁴)] | N  => ys⁴}: 181 --->
//│ 	[C h⁹ append₃₁(t⁹, ys⁵)]: 206
//│ 	[C h¹⁰ append₂₀(t¹⁰, ys⁶)]: 230
//│ 	[C h¹¹ append₃₀(t¹¹, ys⁷)]: 247
//│ 	[N]: 288
//│ case xs⁵ of {C h⁹ t⁹ => [C h⁹ append₃₁(t⁹, ys⁵)] | N  => ys⁵}: 208 --->
//│ 	[N]: 268
//│ 	[C [P2 a⁵ c³] [N]]: 269
//│ 	[N]: 276
//│ 	[C [P2 a⁶ c⁴] [N]]: 277
//│ 	[N]: 284
//│ 	[C [P2 a⁷ c⁵] [N]]: 285
//│ case xs⁶ of {C h¹⁰ t¹⁰ => [C h¹⁰ append₂₀(t¹⁰, ys⁶)] | N  => ys⁶}: 232 --->
//│ 	[N]: 268
//│ 	[C [P2 a⁵ c³] [N]]: 269
//│ 	[N]: 276
//│ 	[C [P2 a⁶ c⁴] [N]]: 277
//│ 	[N]: 284
//│ 	[C [P2 a⁷ c⁵] [N]]: 285
//│ case xs⁷ of {C h¹¹ t¹¹ => [C h¹¹ append₃₀(t¹¹, ys⁷)] | N  => ys⁷}: 249 --->
//│ 	[N]: 268
//│ 	[C [P2 a⁵ c³] [N]]: 269
//│ 	[N]: 276
//│ 	[C [P2 a⁶ c⁴] [N]]: 277
//│ 	[N]: 284
//│ 	[C [P2 a⁷ c⁵] [N]]: 285
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C h⁹ append₃₁(t⁹, ys⁵)]: 206 --->
//│ 	case xs⁴ of {C h⁸ t⁸ => [C h⁸ append₀₀(t⁸, ys⁴)] | N  => ys⁴}: 181
//│ [C h¹⁰ append₂₀(t¹⁰, ys⁶)]: 230 --->
//│ 	case xs⁴ of {C h⁸ t⁸ => [C h⁸ append₀₀(t⁸, ys⁴)] | N  => ys⁴}: 181
//│ [C h¹¹ append₃₀(t¹¹, ys⁷)]: 247 --->
//│ 	case xs⁴ of {C h⁸ t⁸ => [C h⁸ append₀₀(t⁸, ys⁴)] | N  => ys⁴}: 181
//│ [N]: 288 --->
//│ 	case xs⁴ of {C h⁸ t⁸ => [C h⁸ append₀₀(t⁸, ys⁴)] | N  => ys⁴}: 181
//│ ------------------
//│ case xs⁴ of {C h⁸ t⁸ => [C h⁸ append₀₀(t⁸, ys⁴)] | N  => ys⁴}: 181 --->
//│ 	[C h⁹ append₃₁(t⁹, ys⁵)]: 206
//│ 	[C h¹⁰ append₂₀(t¹⁰, ys⁶)]: 230
//│ 	[C h¹¹ append₃₀(t¹¹, ys⁷)]: 247
//│ 	[N]: 288
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ concatMap₀₀(ok1₀₀, 
//│ 	let h¹⁶ = 	
//│ 		let a⁸ = 5
//│ 		in let b² = 10
//│ 		in let ok2² = (fun arg2² -> arg2²(a⁸))
//│ 		in concatMap₂₀(ok2², 
//│ 			let h¹⁷ = 	
//│ 				let c⁶ = 1
//│ 				in (fun a⁹ -> [C [P2 a⁹ c⁶] [N]])
//│ 			in let t¹⁶ = 	
//│ 				let h¹⁸ = 	
//│ 					let c⁷ = 2
//│ 					in (fun a¹⁰ -> [C [P2 a¹⁰ c⁷] [N]])
//│ 				in let t¹⁷ = 	
//│ 					let h¹⁹ = 	
//│ 						let c⁸ = a⁸
//│ 						in (fun a¹¹ -> [C [P2 a¹¹ c⁸] [N]])
//│ 					in let t¹⁸ = (fun f²² -> (fun ys⁸ -> ys⁸))
//│ 					in (fun f²³ -> append₃₀(f²³(h¹⁹), concatMap₃₀(f²³, t¹⁸)))
//│ 				in (fun f²⁴ -> append₃₁(f²⁴(h¹⁸), concatMap₃₁(f²⁴, t¹⁷)))
//│ 			in (fun f²⁵ -> append₂₀(f²⁵(h¹⁷), concatMap₃₂(f²⁵, t¹⁶))))
//│ 	in let t¹⁹ = (fun f²⁶ -> [N])
//│ 	in (fun f²⁷ -> append₀₀(f²⁷(h¹⁶), concatMap₁₀(f²⁷, t¹⁹))))
//│ def append₀₀(xs⁹, ys¹¹) = 
//│ 	xs⁹(ys¹¹)
//│ def append₂₀(xs¹¹, ys¹⁴) = 
//│ 	case xs¹¹ of {
//│ 		C h¹⁰ t¹⁰ => 
//│ 			let h²² = h¹⁰
//│ 			in let t²² = append₂₀(t¹⁰, ys¹⁴)
//│ 			in (fun ys¹⁵ -> [C h²² append₀₀(t²², ys¹⁵)])
//│ 		| N  => ys¹⁴}
//│ def append₃₀(xs¹⁰, ys¹²) = 
//│ 	case xs¹⁰ of {
//│ 		C h¹¹ t¹¹ => 
//│ 			let h²¹ = h¹¹
//│ 			in let t²¹ = append₃₀(t¹¹, ys¹²)
//│ 			in (fun ys¹³ -> [C h²¹ append₀₀(t²¹, ys¹³)])
//│ 		| N  => ys¹²}
//│ def append₃₁(xs⁸, ys⁹) = 
//│ 	case xs⁸ of {
//│ 		C h⁹ t⁹ => 
//│ 			let h²⁰ = h⁹
//│ 			in let t²⁰ = append₃₁(t⁹, ys⁹)
//│ 			in (fun ys¹⁰ -> [C h²⁰ append₀₀(t²⁰, ys¹⁰)])
//│ 		| N  => ys⁹}
//│ def concatMap₀₀(f²⁸, ls¹⁰) = 
//│ 	ls¹⁰(f²⁸)
//│ def concatMap₁₀(f²⁹, ls¹¹) = 
//│ 	ls¹¹(f²⁹)
//│ def concatMap₂₀(f³², ls¹⁴) = 
//│ 	ls¹⁴(f³²)
//│ def concatMap₃₀(f³¹, ls¹³) = 
//│ 	ls¹³(f³¹)
//│ def concatMap₃₁(f³³, ls¹⁵) = 
//│ 	ls¹⁵(f³³)
//│ def concatMap₃₂(f³⁰, ls¹²) = 
//│ 	ls¹²(f³⁰)
//│ def ok1₀₀(arg1²) = 
//│ 	arg1²
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C [P2 5 1] [C [P2 5 2] [C [P2 5 5] [N]]]]
//│ <<<<<<< evaluate <<<<<<<


// [(x, z) | (x, y1) <- zip [1 .. 3] [2 .. 4], (y2, z) <- zip [x .. x + 2] [y1 .. y1 + 1] , y1 == y2]
// more efficient desugaring, but requires recursive local let binding
_LUMBERHACK_EVAL
fun zip(xs, ys) = if xs is
  C(h, t) then if ys is
    C(h2, t2) then C(P2(h, h2), zip(t, t2))
    N then N
  N then N
fun fromTo(a, b) = if a < (b + 1) then C(a, fromTo(a + 1, b)) else N
let ok1 = ls1 => if ls1 is
  C(h, t) then if h is
    P2(x, y1) then
      let ok2 = ls2 => if ls2 is
        C(h2, t2) then if h2 is
          P2(y2, z) then if y1 == y2 then C(P2(x, z), ok2(t2)) else ok2(t2)
          _ then ok2(t2)
        N then ok1(t)
      ok2(zip(fromTo(x, x + 2), fromTo(y1, y1 + 1)))
    _ then ok1(t)
  N then N
ok1(zip(fromTo(1,3), fromTo(2,4)))
//│ |_LUMBERHACK_EVAL|↵|#fun| |zip|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |#if| |ys| |is|→|C|(|h2|,| |t2|)| |#then| |C|(|P2|(|h|,| |h2|)|,| |zip|(|t|,| |t2|)|)|↵|N| |#then| |N|←|↵|N| |#then| |N|←|↵|#fun| |fromTo|(|a|,| |b|)| |#=| |#if| |a| |<| |(|b| |+| |1|)| |#then| |C|(|a|,| |fromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#let| |ok1| |#=| |ls1| |=>| |#if| |ls1| |is|→|C|(|h|,| |t|)| |#then| |#if| |h| |is|→|P2|(|x|,| |y1|)| |#then|→|#let| |ok2| |#=| |ls2| |=>| |#if| |ls2| |is|→|C|(|h2|,| |t2|)| |#then| |#if| |h2| |is|→|P2|(|y2|,| |z|)| |#then| |#if| |y1| |==| |y2| |#then| |C|(|P2|(|x|,| |z|)|,| |ok2|(|t2|)|)| |#else| |ok2|(|t2|)|↵|_| |#then| |ok2|(|t2|)|←|↵|N| |#then| |ok1|(|t|)|←|↵|ok2|(|zip|(|fromTo|(|x|,| |x| |+| |2|)|,| |fromTo|(|y1|,| |y1| |+| |1|)|)|)|←|↵|_| |#then| |ok1|(|t|)|←|↵|N| |#then| |N|←|↵|ok1|(|zip|(|fromTo|(|1|,|3|)|,| |fromTo|(|2|,|4|)|)|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun zip = xs, ys, => if xs is ‹(C (h, t,)) then if ys is ‹(C (h2, t2,)) then C (P2 (h, h2,), zip (t, t2,),); (N) then N›; (N) then N›; fun fromTo = a, b, => if (< (a,) (+ (b,) (1,),)) then C (a, fromTo (+ (a,) (1,), b,),) else N; let ok1 = ls1, => if ls1 is ‹(C (h, t,)) then if h is ‹(P2 (x, y1,)) then {let ok2 = ls2, => if ls2 is ‹(C (h2, t2,)) then if h2 is ‹(P2 (y2, z,)) then if (== (y1,) (y2,)) then C (P2 (x, z,), ok2 (t2,),) else ok2 (t2,); (_) then ok2 (t2,)›; (N) then ok1 (t,)›; ok2 (zip (fromTo (x, + (x,) (2,),), fromTo (y1, + (y1,) (1,),),),)}; (_) then ok1 (t,)›; (N) then N›; ok1 (zip (fromTo (1, 3,), fromTo (2, 4,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ok1^102(zip^103(fromTo^104(1, 3), fromTo^110(2, 4)))
//│ def fromTo(a⁰, b⁰) = if (a⁰ < (b⁰ + 1)) then [C a⁰ fromTo^28((a⁰ + 1), b⁰)] else [N]
//│ def ok1(ls1⁰) = case ls1⁰ of {
//│ 	C h¹ t¹ => case h¹ of {
//│ 		P2 x⁰ y1⁰ => 
//│ 			let ok2⁰ = (fun ls2⁰ -> case ls2⁰ of {
//│ 				C h2¹ t2¹ => case h2¹ of {
//│ 					P2 y2⁰ z⁰ => if (y1⁰ == y2⁰) then [C [P2 x⁰ z⁰] ok2⁰(t2¹)] else ok2⁰(t2¹)
//│ 					| _  => ok2⁰(t2¹)}
//│ 				| N  => ok1^66(t¹)})
//│ 			in ok2⁰(zip^72(fromTo^73(x⁰, (x⁰ + 2)), fromTo^83(y1⁰, (y1⁰ + 1))))
//│ 		| _  => ok1^95(t¹)}
//│ 	| N  => [N]}
//│ def zip(xs⁰, ys⁰) = case xs⁰ of {
//│ 	C h⁰ t⁰ => case ys⁰ of {
//│ 		C h2⁰ t2⁰ => [C [P2 h⁰ h2⁰] zip^6(t⁰, t2⁰)]
//│ 		| N  => [N]}
//│ 	| N  => [N]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [C [P2 1 3] [C [P2 2 4] [C [P2 3 5] [N]]]]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [fromTo^104] (hopeless to continue)
//│ 	[fromTo^104 · fromTo^28] ---> [fromTo^104] (using original def)
//│ [fromTo^110] (hopeless to continue)
//│ 	[fromTo^110 · fromTo^28] ---> [fromTo^110] (using original def)
//│ [ok1^102]
//│ 	[ok1^102 · fromTo^73] (hopeless to continue)
//│ 		[ok1^102 · fromTo^73 · fromTo^28] ---> [ok1^102 · fromTo^73] (using original def)
//│ 	[ok1^102 · fromTo^83] (hopeless to continue)
//│ 		[ok1^102 · fromTo^83 · fromTo^28] ---> [ok1^102 · fromTo^83] (using original def)
//│ 	[ok1^102 · ok1^66] (hopeless to continue)
//│ 		[ok1^102 · ok1^66 · fromTo^73] (using original def)
//│ 			[ok1^102 · ok1^66 · fromTo^73 · fromTo^28] ---> [ok1^102 · ok1^66 · fromTo^73] (using original def)
//│ 		[ok1^102 · ok1^66 · fromTo^83] (using original def)
//│ 			[ok1^102 · ok1^66 · fromTo^83 · fromTo^28] ---> [ok1^102 · ok1^66 · fromTo^83] (using original def)
//│ 		[ok1^102 · ok1^66 · ok1^66] ---> [ok1^102 · ok1^66] (using original def)
//│ 		[ok1^102 · ok1^66 · ok1^95] ---> [ok1^102 · ok1^66] (using original def)
//│ 		[ok1^102 · ok1^66 · zip^72] (using original def)
//│ 			[ok1^102 · ok1^66 · zip^72 · zip^6] ---> [ok1^102 · ok1^66 · zip^72] (using original def)
//│ 	[ok1^102 · ok1^95] ---> [ok1^102] (only one)
//│ 	[ok1^102 · zip^72] (hopeless to continue)
//│ 		[ok1^102 · zip^72 · zip^6] ---> [ok1^102 · zip^72] (using original def)
//│ [zip^103]
//│ 	[zip^103 · zip^6] ---> [zip^103] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ok1₀(zip₂(fromTo₀(1, 3), fromTo₁(2, 4)))
//│ def fromTo₀(a³, b³) = 
//│ 	if (a³ < (b³ + 1)) then [C a³ fromTo₀((a³ + 1), b³)] else [N]
//│ def fromTo₁(a², b²) = 
//│ 	if (a² < (b² + 1)) then [C a² fromTo₁((a² + 1), b²)] else [N]
//│ def ok1₀(ls1²) = 
//│ 	case ls1² of {
//│ 		C h⁴ t⁴ => case h⁴ of {
//│ 			P2 x² y1² => 
//│ 				let ok2² = (fun ls2² -> case ls2² of {
//│ 					C h2⁴ t2⁴ => case h2⁴ of {
//│ 						P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴)
//│ 						| _  => ok2²(t2⁴)}
//│ 					| N  => ok1₁(t⁴)})
//│ 				in ok2²(zip₁(fromTo₂(x², (x² + 2)), fromTo₃(y1², (y1² + 1))))
//│ 			| _  => ok1₀(t⁴)}
//│ 		| N  => [N]}
//│ 	where
//│ 	def fromTo₂(a¹, b¹) = 
//│ 		if (a¹ < (b¹ + 1)) then [C a¹ fromTo₂((a¹ + 1), b¹)] else [N]
//│ 	def fromTo₃(a⁵, b⁵) = 
//│ 		if (a⁵ < (b⁵ + 1)) then [C a⁵ fromTo₃((a⁵ + 1), b⁵)] else [N]
//│ 	def ok1₁(ls1¹) = 
//│ 		case ls1¹ of {
//│ 			C h² t² => case h² of {
//│ 				P2 x¹ y1¹ => 
//│ 					let ok2¹ = (fun ls2¹ -> case ls2¹ of {
//│ 						C h2² t2² => case h2² of {
//│ 							P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²)
//│ 							| _  => ok2¹(t2²)}
//│ 						| N  => ok1₁(t²)})
//│ 					in ok2¹(zip₀(fromTo₄(x¹, (x¹ + 2)), fromTo₅(y1¹, (y1¹ + 1))))
//│ 				| _  => ok1₁(t²)}
//│ 			| N  => [N]}
//│ 		where
//│ 		def fromTo₄(a⁶, b⁶) = 
//│ 			if (a⁶ < (b⁶ + 1)) then [C a⁶ fromTo₄((a⁶ + 1), b⁶)] else [N]
//│ 		def fromTo₅(a⁴, b⁴) = 
//│ 			if (a⁴ < (b⁴ + 1)) then [C a⁴ fromTo₅((a⁴ + 1), b⁴)] else [N]
//│ 		def zip₀(xs³, ys³) = 
//│ 			case xs³ of {
//│ 				C h⁶ t⁶ => case ys³ of {
//│ 					C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)]
//│ 					| N  => [N]}
//│ 				| N  => [N]}
//│ 	def zip₁(xs¹, ys¹) = 
//│ 		case xs¹ of {
//│ 			C h³ t³ => case ys¹ of {
//│ 				C h2³ t2³ => [C [P2 h³ h2³] zip₁(t³, t2³)]
//│ 				| N  => [N]}
//│ 			| N  => [N]}
//│ def zip₂(xs², ys²) = 
//│ 	case xs² of {
//│ 		C h⁵ t⁵ => case ys² of {
//│ 			C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip₂(t⁵, t2⁵)]
//│ 			| N  => [N]}
//│ 		| N  => [N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C a¹ fromTo₂((a¹ + 1), b¹)]: 136 --->
//│ 	case xs¹ of {C h³ t³ => case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip₁(t³, t2³)] | N  => [N]} | N  => [N]}: 239
//│ [N]: 137 --->
//│ 	case xs¹ of {C h³ t³ => case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip₁(t³, t2³)] | N  => [N]} | N  => [N]}: 239
//│ [C a² fromTo₁((a² + 1), b²)]: 160 --->
//│ 	case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip₂(t⁵, t2⁵)] | N  => [N]}: 362
//│ [N]: 161 --->
//│ 	case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip₂(t⁵, t2⁵)] | N  => [N]}: 362
//│ [P2 h³ h2³]: 229 --->
//│ 	case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)}: 313
//│ [C [P2 h³ h2³] zip₁(t³, t2³)]: 235 --->
//│ 	case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1₁(t⁴)}: 317
//│ [N]: 236 --->
//│ 	case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1₁(t⁴)}: 317
//│ [N]: 238 --->
//│ 	case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1₁(t⁴)}: 317
//│ [C a³ fromTo₀((a³ + 1), b³)]: 261 --->
//│ 	case xs² of {C h⁵ t⁵ => case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip₂(t⁵, t2⁵)] | N  => [N]} | N  => [N]}: 364
//│ [N]: 262 --->
//│ 	case xs² of {C h⁵ t⁵ => case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip₂(t⁵, t2⁵)] | N  => [N]} | N  => [N]}: 364
//│ [C a⁴ fromTo₅((a⁴ + 1), b⁴)]: 285 --->
//│ 	case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)] | N  => [N]}: 427
//│ [N]: 286 --->
//│ 	case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)] | N  => [N]}: 427
//│ [P2 h⁵ h2⁵]: 354 --->
//│ 	case h² of {P2 x¹ y1¹ => let ok2¹ = (fun ls2¹ -> case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1₁(t²)})
//│ in ok2¹(zip₀(fromTo₄(x¹, (x¹ + 2)), fromTo₅(y1¹, (y1¹ + 1)))) | _  => ok1₁(t²)}: 221
//│ 	case h⁴ of {P2 x² y1² => let ok2² = (fun ls2² -> case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1₁(t⁴)})
//│ in ok2²(zip₁(fromTo₂(x², (x² + 2)), fromTo₃(y1², (y1² + 1)))) | _  => ok1₀(t⁴)}: 346
//│ [C [P2 h⁵ h2⁵] zip₂(t⁵, t2⁵)]: 360 --->
//│ 	case ls1¹ of {C h² t² => case h² of {P2 x¹ y1¹ => let ok2¹ = (fun ls2¹ -> case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1₁(t²)})
//│ in ok2¹(zip₀(fromTo₄(x¹, (x¹ + 2)), fromTo₅(y1¹, (y1¹ + 1)))) | _  => ok1₁(t²)} | N  => [N]}: 223
//│ 	case ls1² of {C h⁴ t⁴ => case h⁴ of {P2 x² y1² => let ok2² = (fun ls2² -> case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1₁(t⁴)})
//│ in ok2²(zip₁(fromTo₂(x², (x² + 2)), fromTo₃(y1², (y1² + 1)))) | _  => ok1₀(t⁴)} | N  => [N]}: 348
//│ [N]: 361 --->
//│ 	case ls1¹ of {C h² t² => case h² of {P2 x¹ y1¹ => let ok2¹ = (fun ls2¹ -> case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1₁(t²)})
//│ in ok2¹(zip₀(fromTo₄(x¹, (x¹ + 2)), fromTo₅(y1¹, (y1¹ + 1)))) | _  => ok1₁(t²)} | N  => [N]}: 223
//│ 	case ls1² of {C h⁴ t⁴ => case h⁴ of {P2 x² y1² => let ok2² = (fun ls2² -> case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1₁(t⁴)})
//│ in ok2²(zip₁(fromTo₂(x², (x² + 2)), fromTo₃(y1², (y1² + 1)))) | _  => ok1₀(t⁴)} | N  => [N]}: 348
//│ [N]: 363 --->
//│ 	case ls1¹ of {C h² t² => case h² of {P2 x¹ y1¹ => let ok2¹ = (fun ls2¹ -> case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1₁(t²)})
//│ in ok2¹(zip₀(fromTo₄(x¹, (x¹ + 2)), fromTo₅(y1¹, (y1¹ + 1)))) | _  => ok1₁(t²)} | N  => [N]}: 223
//│ 	case ls1² of {C h⁴ t⁴ => case h⁴ of {P2 x² y1² => let ok2² = (fun ls2² -> case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1₁(t⁴)})
//│ in ok2²(zip₁(fromTo₂(x², (x² + 2)), fromTo₃(y1², (y1² + 1)))) | _  => ok1₀(t⁴)} | N  => [N]}: 348
//│ [C a⁵ fromTo₃((a⁵ + 1), b⁵)]: 386 --->
//│ 	case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip₁(t³, t2³)] | N  => [N]}: 237
//│ [N]: 387 --->
//│ 	case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip₁(t³, t2³)] | N  => [N]}: 237
//│ [C a⁶ fromTo₄((a⁶ + 1), b⁶)]: 410 --->
//│ 	case xs³ of {C h⁶ t⁶ => case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)] | N  => [N]} | N  => [N]}: 429
//│ [N]: 411 --->
//│ 	case xs³ of {C h⁶ t⁶ => case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)] | N  => [N]} | N  => [N]}: 429
//│ [P2 h⁶ h2⁶]: 419 --->
//│ 	case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)}: 188
//│ [C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)]: 425 --->
//│ 	case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1₁(t²)}: 192
//│ [N]: 426 --->
//│ 	case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1₁(t²)}: 192
//│ [N]: 428 --->
//│ 	case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1₁(t²)}: 192
//│ ------------------
//│ case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)}: 188 --->
//│ 	[P2 h⁶ h2⁶]: 419
//│ case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1₁(t²)}: 192 --->
//│ 	[C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)]: 425
//│ 	[N]: 426
//│ 	[N]: 428
//│ case h² of {P2 x¹ y1¹ => let ok2¹ = (fun ls2¹ -> case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1₁(t²)})
//│ in ok2¹(zip₀(fromTo₄(x¹, (x¹ + 2)), fromTo₅(y1¹, (y1¹ + 1)))) | _  => ok1₁(t²)}: 221 --->
//│ 	[P2 h⁵ h2⁵]: 354
//│ case ls1¹ of {C h² t² => case h² of {P2 x¹ y1¹ => let ok2¹ = (fun ls2¹ -> case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1₁(t²)})
//│ in ok2¹(zip₀(fromTo₄(x¹, (x¹ + 2)), fromTo₅(y1¹, (y1¹ + 1)))) | _  => ok1₁(t²)} | N  => [N]}: 223 --->
//│ 	[C [P2 h⁵ h2⁵] zip₂(t⁵, t2⁵)]: 360
//│ 	[N]: 361
//│ 	[N]: 363
//│ case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip₁(t³, t2³)] | N  => [N]}: 237 --->
//│ 	[C a⁵ fromTo₃((a⁵ + 1), b⁵)]: 386
//│ 	[N]: 387
//│ case xs¹ of {C h³ t³ => case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip₁(t³, t2³)] | N  => [N]} | N  => [N]}: 239 --->
//│ 	[C a¹ fromTo₂((a¹ + 1), b¹)]: 136
//│ 	[N]: 137
//│ case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)}: 313 --->
//│ 	[P2 h³ h2³]: 229
//│ case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1₁(t⁴)}: 317 --->
//│ 	[C [P2 h³ h2³] zip₁(t³, t2³)]: 235
//│ 	[N]: 236
//│ 	[N]: 238
//│ case h⁴ of {P2 x² y1² => let ok2² = (fun ls2² -> case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1₁(t⁴)})
//│ in ok2²(zip₁(fromTo₂(x², (x² + 2)), fromTo₃(y1², (y1² + 1)))) | _  => ok1₀(t⁴)}: 346 --->
//│ 	[P2 h⁵ h2⁵]: 354
//│ case ls1² of {C h⁴ t⁴ => case h⁴ of {P2 x² y1² => let ok2² = (fun ls2² -> case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1₁(t⁴)})
//│ in ok2²(zip₁(fromTo₂(x², (x² + 2)), fromTo₃(y1², (y1² + 1)))) | _  => ok1₀(t⁴)} | N  => [N]}: 348 --->
//│ 	[C [P2 h⁵ h2⁵] zip₂(t⁵, t2⁵)]: 360
//│ 	[N]: 361
//│ 	[N]: 363
//│ case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip₂(t⁵, t2⁵)] | N  => [N]}: 362 --->
//│ 	[C a² fromTo₁((a² + 1), b²)]: 160
//│ 	[N]: 161
//│ case xs² of {C h⁵ t⁵ => case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip₂(t⁵, t2⁵)] | N  => [N]} | N  => [N]}: 364 --->
//│ 	[C a³ fromTo₀((a³ + 1), b³)]: 261
//│ 	[N]: 262
//│ case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)] | N  => [N]}: 427 --->
//│ 	[C a⁴ fromTo₅((a⁴ + 1), b⁴)]: 285
//│ 	[N]: 286
//│ case xs³ of {C h⁶ t⁶ => case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)] | N  => [N]} | N  => [N]}: 429 --->
//│ 	[C a⁶ fromTo₄((a⁶ + 1), b⁶)]: 410
//│ 	[N]: 411
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C a¹ fromTo₂((a¹ + 1), b¹)]: 136 --->
//│ 	case xs¹ of {C h³ t³ => case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip₁(t³, t2³)] | N  => [N]} | N  => [N]}: 239
//│ [N]: 137 --->
//│ 	case xs¹ of {C h³ t³ => case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip₁(t³, t2³)] | N  => [N]} | N  => [N]}: 239
//│ [C a² fromTo₁((a² + 1), b²)]: 160 --->
//│ 	case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip₂(t⁵, t2⁵)] | N  => [N]}: 362
//│ [N]: 161 --->
//│ 	case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip₂(t⁵, t2⁵)] | N  => [N]}: 362
//│ [P2 h³ h2³]: 229 --->
//│ 	case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)}: 313
//│ [C [P2 h³ h2³] zip₁(t³, t2³)]: 235 --->
//│ 	case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1₁(t⁴)}: 317
//│ [N]: 236 --->
//│ 	case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1₁(t⁴)}: 317
//│ [N]: 238 --->
//│ 	case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1₁(t⁴)}: 317
//│ [C a³ fromTo₀((a³ + 1), b³)]: 261 --->
//│ 	case xs² of {C h⁵ t⁵ => case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip₂(t⁵, t2⁵)] | N  => [N]} | N  => [N]}: 364
//│ [N]: 262 --->
//│ 	case xs² of {C h⁵ t⁵ => case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip₂(t⁵, t2⁵)] | N  => [N]} | N  => [N]}: 364
//│ [C a⁴ fromTo₅((a⁴ + 1), b⁴)]: 285 --->
//│ 	case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)] | N  => [N]}: 427
//│ [N]: 286 --->
//│ 	case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)] | N  => [N]}: 427
//│ [C a⁵ fromTo₃((a⁵ + 1), b⁵)]: 386 --->
//│ 	case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip₁(t³, t2³)] | N  => [N]}: 237
//│ [N]: 387 --->
//│ 	case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip₁(t³, t2³)] | N  => [N]}: 237
//│ [C a⁶ fromTo₄((a⁶ + 1), b⁶)]: 410 --->
//│ 	case xs³ of {C h⁶ t⁶ => case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)] | N  => [N]} | N  => [N]}: 429
//│ [N]: 411 --->
//│ 	case xs³ of {C h⁶ t⁶ => case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)] | N  => [N]} | N  => [N]}: 429
//│ [P2 h⁶ h2⁶]: 419 --->
//│ 	case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)}: 188
//│ [C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)]: 425 --->
//│ 	case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1₁(t²)}: 192
//│ [N]: 426 --->
//│ 	case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1₁(t²)}: 192
//│ [N]: 428 --->
//│ 	case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1₁(t²)}: 192
//│ ------------------
//│ case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)}: 188 --->
//│ 	[P2 h⁶ h2⁶]: 419
//│ case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1₁(t²)}: 192 --->
//│ 	[C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)]: 425
//│ 	[N]: 426
//│ 	[N]: 428
//│ case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip₁(t³, t2³)] | N  => [N]}: 237 --->
//│ 	[C a⁵ fromTo₃((a⁵ + 1), b⁵)]: 386
//│ 	[N]: 387
//│ case xs¹ of {C h³ t³ => case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip₁(t³, t2³)] | N  => [N]} | N  => [N]}: 239 --->
//│ 	[C a¹ fromTo₂((a¹ + 1), b¹)]: 136
//│ 	[N]: 137
//│ case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)}: 313 --->
//│ 	[P2 h³ h2³]: 229
//│ case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1₁(t⁴)}: 317 --->
//│ 	[C [P2 h³ h2³] zip₁(t³, t2³)]: 235
//│ 	[N]: 236
//│ 	[N]: 238
//│ case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip₂(t⁵, t2⁵)] | N  => [N]}: 362 --->
//│ 	[C a² fromTo₁((a² + 1), b²)]: 160
//│ 	[N]: 161
//│ case xs² of {C h⁵ t⁵ => case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip₂(t⁵, t2⁵)] | N  => [N]} | N  => [N]}: 364 --->
//│ 	[C a³ fromTo₀((a³ + 1), b³)]: 261
//│ 	[N]: 262
//│ case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)] | N  => [N]}: 427 --->
//│ 	[C a⁴ fromTo₅((a⁴ + 1), b⁴)]: 285
//│ 	[N]: 286
//│ case xs³ of {C h⁶ t⁶ => case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip₀(t⁶, t2⁶)] | N  => [N]} | N  => [N]}: 429 --->
//│ 	[C a⁶ fromTo₄((a⁶ + 1), b⁶)]: 410
//│ 	[N]: 411
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ok1₀(zip₂(fromTo₀(1, 3), fromTo₁(2, 4)))
//│ def fromTo₀(a¹¹, b¹¹) = 
//│ 	if (a¹¹ < (b¹¹ + 1)) then 
//│ 		let h¹⁴ = a¹¹
//│ 		in let t¹⁹ = fromTo₀((a¹¹ + 1), b¹¹)
//│ 		in (fun ys⁷ -> ys⁷(h¹⁴, t¹⁹)) else (fun ys⁸ -> [N])
//│ def fromTo₁(a¹⁰, b¹⁰) = 
//│ 	if (a¹⁰ < (b¹⁰ + 1)) then 
//│ 		let h2¹¹ = a¹⁰
//│ 		in let t2¹³ = fromTo₁((a¹⁰ + 1), b¹⁰)
//│ 		in (fun h¹² -> (fun t¹⁷ -> [C [P2 h¹² h2¹¹] zip₂(t¹⁷, t2¹³)])) else (fun h¹³ -> (fun t¹⁸ -> [N]))
//│ def ok1₀(ls1³) = 
//│ 	case ls1³ of {
//│ 		C h⁴ t⁴ => case h⁴ of {
//│ 			P2 x² y1² => 
//│ 				let ok2³ = (fun ls2³ -> ls2³(ok2³, x², y1², t⁴))
//│ 				in ok2³(zip₁(fromTo₂(x², (x² + 2)), fromTo₃(y1², (y1² + 1))))
//│ 			| _  => ok1₀(t⁴)}
//│ 		| N  => [N]}
//│ 	where
//│ 	def fromTo₂(a¹², b¹²) = 
//│ 		if (a¹² < (b¹² + 1)) then 
//│ 			let h¹⁵ = a¹²
//│ 			in let t²⁰ = fromTo₂((a¹² + 1), b¹²)
//│ 			in (fun ys¹⁰ -> ys¹⁰(h¹⁵, t²⁰)) else (fun ys¹¹ -> (fun ok2¹² -> (fun x¹⁰ -> (fun y1¹⁰ -> (fun t²¹ -> ok1₁(t²¹))))))
//│ 	def fromTo₃(a⁷, b⁷) = 
//│ 		if (a⁷ < (b⁷ + 1)) then 
//│ 			let h2⁷ = a⁷
//│ 			in let t2⁷ = fromTo₃((a⁷ + 1), b⁷)
//│ 			in (fun h⁷ -> (fun t⁷ -> 
//│ 				let h2⁸ = 	
//│ 					let y2³ = h⁷
//│ 					in let z³ = h2⁷
//│ 					in (fun ok2⁵ -> (fun t2⁹ -> (fun x⁴ -> (fun y1⁴ -> if (y1⁴ == y2³) then [C [P2 x⁴ z³] ok2⁵(t2⁹)] else ok2⁵(t2⁹)))))
//│ 				in let t2⁸ = zip₁(t⁷, t2⁷)
//│ 				in (fun ok2⁴ -> (fun x³ -> (fun y1³ -> (fun t⁸ -> h2⁸(ok2⁴, t2⁸, x³, y1³))))))) else (fun h⁸ -> (fun t⁹ -> (fun ok2⁶ -> (fun x⁵ -> (fun y1⁵ -> (fun t¹⁰ -> ok1₁(t¹⁰)))))))
//│ 	def ok1₁(ls1⁴) = 
//│ 		case ls1⁴ of {
//│ 			C h² t² => case h² of {
//│ 				P2 x¹ y1¹ => 
//│ 					let ok2¹¹ = (fun ls2⁴ -> ls2⁴(ok2¹¹, x¹, y1¹, t²))
//│ 					in ok2¹¹(zip₀(fromTo₄(x¹, (x¹ + 2)), fromTo₅(y1¹, (y1¹ + 1))))
//│ 				| _  => ok1₁(t²)}
//│ 			| N  => [N]}
//│ 		where
//│ 		def fromTo₄(a⁹, b⁹) = 
//│ 			if (a⁹ < (b⁹ + 1)) then 
//│ 				let h¹¹ = a⁹
//│ 				in let t¹⁵ = fromTo₄((a⁹ + 1), b⁹)
//│ 				in (fun ys⁵ -> ys⁵(h¹¹, t¹⁵)) else (fun ys⁶ -> (fun ok2¹⁰ -> (fun x⁹ -> (fun y1⁹ -> (fun t¹⁶ -> ok1₁(t¹⁶))))))
//│ 		def fromTo₅(a⁸, b⁸) = 
//│ 			if (a⁸ < (b⁸ + 1)) then 
//│ 				let h2⁹ = a⁸
//│ 				in let t2¹⁰ = fromTo₅((a⁸ + 1), b⁸)
//│ 				in (fun h⁹ -> (fun t¹¹ -> 
//│ 					let h2¹⁰ = 	
//│ 						let y2⁴ = h⁹
//│ 						in let z⁴ = h2⁹
//│ 						in (fun ok2⁸ -> (fun t2¹² -> (fun x⁷ -> (fun y1⁷ -> if (y1⁷ == y2⁴) then [C [P2 x⁷ z⁴] ok2⁸(t2¹²)] else ok2⁸(t2¹²)))))
//│ 					in let t2¹¹ = zip₀(t¹¹, t2¹⁰)
//│ 					in (fun ok2⁷ -> (fun x⁶ -> (fun y1⁶ -> (fun t¹² -> h2¹⁰(ok2⁷, t2¹¹, x⁶, y1⁶))))))) else (fun h¹⁰ -> (fun t¹³ -> (fun ok2⁹ -> (fun x⁸ -> (fun y1⁸ -> (fun t¹⁴ -> ok1₁(t¹⁴)))))))
//│ 		def zip₀(xs⁴, ys⁴) = 
//│ 			xs⁴(ys⁴)
//│ 	def zip₁(xs⁶, ys¹²) = 
//│ 		xs⁶(ys¹²)
//│ def zip₂(xs⁵, ys⁹) = 
//│ 	xs⁵(ys⁹)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C [P2 1 3] [C [P2 2 4] [C [P2 3 5] [N]]]]
//│ <<<<<<< evaluate <<<<<<<


// NOTE: what if we lift the inner mutual recursive lambdas out?
// [(x, y) | x <- [1..2], y <- [3..4]]
_LUMBERHACK_EVAL
fun go1(ls1, ls2) = if ls1 is
  C(h1, t1) then go2(ls2, h1, t1)
  N then N
fun go2(ls2, h1, t1) = if ls2 is
  C(h2, t2) then C(P2(h1, h2), go2(t2, h1, t1))
  N then go1(t1, ls2)
go1(C(1, C(2, N)), C(3, C(4, N)))
//│ |_LUMBERHACK_EVAL|↵|#fun| |go1|(|ls1|,| |ls2|)| |#=| |#if| |ls1| |is|→|C|(|h1|,| |t1|)| |#then| |go2|(|ls2|,| |h1|,| |t1|)|↵|N| |#then| |N|←|↵|#fun| |go2|(|ls2|,| |h1|,| |t1|)| |#=| |#if| |ls2| |is|→|C|(|h2|,| |t2|)| |#then| |C|(|P2|(|h1|,| |h2|)|,| |go2|(|t2|,| |h1|,| |t1|)|)|↵|N| |#then| |go1|(|t1|,| |ls2|)|←|↵|go1|(|C|(|1|,| |C|(|2|,| |N|)|)|,| |C|(|3|,| |C|(|4|,| |N|)|)|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun go1 = ls1, ls2, => if ls1 is ‹(C (h1, t1,)) then go2 (ls2, h1, t1,); (N) then N›; fun go2 = ls2, h1, t1, => if ls2 is ‹(C (h2, t2,)) then C (P2 (h1, h2,), go2 (t2, h1, t1,),); (N) then go1 (t1, ls2,)›; go1 (C (1, C (2, N,),), C (3, C (4, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ go1^34([C 1 [C 2 [N]]], [C 3 [C 4 [N]]])
//│ def go1(ls1⁰, ls2⁰) = case ls1⁰ of {
//│ 	C h1⁰ t1⁰ => go2^2(ls2⁰, h1⁰, t1⁰)
//│ 	| N  => [N]}
//│ def go2(ls2¹, h1¹, t1¹) = case ls2¹ of {
//│ 	C h2⁰ t2⁰ => [C [P2 h1¹ h2⁰] go2^17(t2⁰, h1¹, t1¹)]
//│ 	| N  => go1^25(t1¹, ls2¹)}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [C [P2 1 3] [C [P2 1 4] [N]]]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [go1^34]
//│ 	[go1^34 · go2^2]
//│ 		[go1^34 · go2^2 · go1^25] ---> [go1^34] (only one)
//│ 		[go1^34 · go2^2 · go2^17] ---> [go1^34 · go2^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ go1₀([C 1 [C 2 [N]]], [C 3 [C 4 [N]]])
//│ def go1₀(ls1¹, ls2³) = 
//│ 	case ls1¹ of {
//│ 		C h1³ t1³ => go2₀(ls2³, h1³, t1³)
//│ 		| N  => [N]}
//│ 	where
//│ 	def go2₀(ls2², h1², t1²) = 
//│ 		case ls2² of {
//│ 			C h2¹ t2¹ => [C [P2 h1² h2¹] go2₀(t2¹, h1², t1²)]
//│ 			| N  => go1₀(t1², ls2²)}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 83 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [C 2 [N]]: 84 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [C 1 [C 2 [N]]]: 85 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [N]: 89 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2₀(t2¹, h1², t1²)] | N  => go1₀(t1², ls2²)}: 64
//│ [C 4 [N]]: 90 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2₀(t2¹, h1², t1²)] | N  => go1₀(t1², ls2²)}: 64
//│ [C 3 [C 4 [N]]]: 91 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2₀(t2¹, h1², t1²)] | N  => go1₀(t1², ls2²)}: 64
//│ ------------------
//│ case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2₀(t2¹, h1², t1²)] | N  => go1₀(t1², ls2²)}: 64 --->
//│ 	[N]: 89
//│ 	[C 4 [N]]: 90
//│ 	[C 3 [C 4 [N]]]: 91
//│ case ls1¹ of {C h1³ t1³ => go2₀(ls2³, h1³, t1³) | N  => [N]}: 77 --->
//│ 	[N]: 83
//│ 	[C 2 [N]]: 84
//│ 	[C 1 [C 2 [N]]]: 85
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 83 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [C 2 [N]]: 84 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [C 1 [C 2 [N]]]: 85 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [N]: 89 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2₀(t2¹, h1², t1²)] | N  => go1₀(t1², ls2²)}: 64
//│ [C 4 [N]]: 90 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2₀(t2¹, h1², t1²)] | N  => go1₀(t1², ls2²)}: 64
//│ [C 3 [C 4 [N]]]: 91 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2₀(t2¹, h1², t1²)] | N  => go1₀(t1², ls2²)}: 64
//│ ------------------
//│ case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2₀(t2¹, h1², t1²)] | N  => go1₀(t1², ls2²)}: 64 --->
//│ 	[N]: 89
//│ 	[C 4 [N]]: 90
//│ 	[C 3 [C 4 [N]]]: 91
//│ case ls1¹ of {C h1³ t1³ => go2₀(ls2³, h1³, t1³) | N  => [N]}: 77 --->
//│ 	[N]: 83
//│ 	[C 2 [N]]: 84
//│ 	[C 1 [C 2 [N]]]: 85
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ go1₀(
//│ 	let h1⁴ = 1
//│ 	in let t1⁴ = 	
//│ 		let h1⁵ = 2
//│ 		in let t1⁵ = (fun ls2⁶ -> [N])
//│ 		in (fun ls2⁵ -> go2₀(ls2⁵, h1⁵, t1⁵))
//│ 	in (fun ls2⁴ -> go2₀(ls2⁴, h1⁴, t1⁴)), 
//│ 	let h2² = 3
//│ 	in let t2² = 	
//│ 		let h2³ = 4
//│ 		in let t2³ = (fun h1⁸ -> (fun t1⁸ -> (fun ls2⁹ -> go1₀(t1⁸, ls2⁹))))
//│ 		in (fun h1⁷ -> (fun t1⁷ -> (fun ls2⁸ -> [C [P2 h1⁷ h2³] go2₀(t2³, h1⁷, t1⁷)])))
//│ 	in (fun h1⁶ -> (fun t1⁶ -> (fun ls2⁷ -> [C [P2 h1⁶ h2²] go2₀(t2², h1⁶, t1⁶)]))))
//│ def go1₀(ls1², ls2¹¹) = 
//│ 	ls1²(ls2¹¹)
//│ 	where
//│ 	def go2₀(ls2¹⁰, h1⁹, t1⁹) = 
//│ 		ls2¹⁰(h1⁹, t1⁹, ls2¹⁰)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C [P2 1 3] [C [P2 1 4] [N]]]
//│ <<<<<<< evaluate <<<<<<<


// [(x, y) | x <- [1, 2], y <- [3, 4]]
// NOTE: change `ls2` to `N` and we need two iteration to fully fuse
_LUMBERHACK_EVAL
fun go1(ls1, ls2) = if ls1 is
  C(h1, t1) then go2(ls2, h1, t1)
  N then N
fun go2(ls2, h1, t1) = if ls2 is
  C(h2, t2) then C(P2(h1, h2), go2(t2, h1, t1))
  N then go1(t1, N)
go1(C(1, C(2, N)), C(3, C(4, N)))
//│ |_LUMBERHACK_EVAL|↵|#fun| |go1|(|ls1|,| |ls2|)| |#=| |#if| |ls1| |is|→|C|(|h1|,| |t1|)| |#then| |go2|(|ls2|,| |h1|,| |t1|)|↵|N| |#then| |N|←|↵|#fun| |go2|(|ls2|,| |h1|,| |t1|)| |#=| |#if| |ls2| |is|→|C|(|h2|,| |t2|)| |#then| |C|(|P2|(|h1|,| |h2|)|,| |go2|(|t2|,| |h1|,| |t1|)|)|↵|N| |#then| |go1|(|t1|,| |N|)|←|↵|go1|(|C|(|1|,| |C|(|2|,| |N|)|)|,| |C|(|3|,| |C|(|4|,| |N|)|)|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun go1 = ls1, ls2, => if ls1 is ‹(C (h1, t1,)) then go2 (ls2, h1, t1,); (N) then N›; fun go2 = ls2, h1, t1, => if ls2 is ‹(C (h2, t2,)) then C (P2 (h1, h2,), go2 (t2, h1, t1,),); (N) then go1 (t1, N,)›; go1 (C (1, C (2, N,),), C (3, C (4, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ go1^34([C 1 [C 2 [N]]], [C 3 [C 4 [N]]])
//│ def go1(ls1⁰, ls2⁰) = case ls1⁰ of {
//│ 	C h1⁰ t1⁰ => go2^2(ls2⁰, h1⁰, t1⁰)
//│ 	| N  => [N]}
//│ def go2(ls2¹, h1¹, t1¹) = case ls2¹ of {
//│ 	C h2⁰ t2⁰ => [C [P2 h1¹ h2⁰] go2^17(t2⁰, h1¹, t1¹)]
//│ 	| N  => go1^25(t1¹, [N])}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [C [P2 1 3] [C [P2 1 4] [N]]]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [go1^34]
//│ 	[go1^34 · go2^2]
//│ 		[go1^34 · go2^2 · go1^25] ---> [go1^34] (only one)
//│ 		[go1^34 · go2^2 · go2^17] ---> [go1^34 · go2^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ go1₀([C 1 [C 2 [N]]], [C 3 [C 4 [N]]])
//│ def go1₀(ls1¹, ls2³) = 
//│ 	case ls1¹ of {
//│ 		C h1³ t1³ => go2₀(ls2³, h1³, t1³)
//│ 		| N  => [N]}
//│ 	where
//│ 	def go2₀(ls2², h1², t1²) = 
//│ 		case ls2² of {
//│ 			C h2¹ t2¹ => [C [P2 h1² h2¹] go2₀(t2¹, h1², t1²)]
//│ 			| N  => go1₀(t1², [N])}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 62 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2₀(t2¹, h1², t1²)] | N  => go1₀(t1², [N])}: 64
//│ [N]: 83 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [C 2 [N]]: 84 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [C 1 [C 2 [N]]]: 85 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [N]: 89 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2₀(t2¹, h1², t1²)] | N  => go1₀(t1², [N])}: 64
//│ [C 4 [N]]: 90 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2₀(t2¹, h1², t1²)] | N  => go1₀(t1², [N])}: 64
//│ [C 3 [C 4 [N]]]: 91 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2₀(t2¹, h1², t1²)] | N  => go1₀(t1², [N])}: 64
//│ ------------------
//│ case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2₀(t2¹, h1², t1²)] | N  => go1₀(t1², [N])}: 64 --->
//│ 	[N]: 62
//│ 	[N]: 89
//│ 	[C 4 [N]]: 90
//│ 	[C 3 [C 4 [N]]]: 91
//│ case ls1¹ of {C h1³ t1³ => go2₀(ls2³, h1³, t1³) | N  => [N]}: 77 --->
//│ 	[N]: 83
//│ 	[C 2 [N]]: 84
//│ 	[C 1 [C 2 [N]]]: 85
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 83 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [C 2 [N]]: 84 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [C 1 [C 2 [N]]]: 85 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ ------------------
//│ case ls1¹ of {C h1³ t1³ => go2₀(ls2³, h1³, t1³) | N  => [N]}: 77 --->
//│ 	[N]: 83
//│ 	[C 2 [N]]: 84
//│ 	[C 1 [C 2 [N]]]: 85
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ go1₀(
//│ 	let h1⁴ = 1
//│ 	in let t1⁴ = 	
//│ 		let h1⁵ = 2
//│ 		in let t1⁵ = (fun ls2⁶ -> [N])
//│ 		in (fun ls2⁵ -> go2₀(ls2⁵, h1⁵, t1⁵))
//│ 	in (fun ls2⁴ -> go2₀(ls2⁴, h1⁴, t1⁴)), [C 3 [C 4 [N]]])
//│ def go1₀(ls1², ls2⁸) = 
//│ 	ls1²(ls2⁸)
//│ 	where
//│ 	def go2₀(ls2⁷, h1⁶, t1⁶) = 
//│ 		case ls2⁷ of {
//│ 			C h2¹ t2¹ => [C [P2 h1⁶ h2¹] go2₀(t2¹, h1⁶, t1⁶)]
//│ 			| N  => go1₀(t1⁶, [N])}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C [P2 1 3] [C [P2 1 4] [N]]]
//│ <<<<<<< evaluate <<<<<<<
//│ 
//│ ~~~~~~~~~~~~~~~~~~~~~~~ NEXT ITERATION ~~~~~~~~~~~~~~~~~~~~~~~
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [go1₀^1] (hopeless to continue)
//│ [go2₀^16]
//│ 	[go2₀^16 · go1₀^45] (hopeless to continue)
//│ 	[go2₀^16 · go2₀^37] ---> [go2₀^16] (only one)
//│ [go2₀^6] (hopeless to continue)
//│ 	[go2₀^6 · go1₀^45] (using original def)
//│ 	[go2₀^6 · go2₀^37] ---> [go2₀^6] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ go1₀₀(
//│ 	let h1⁵ = 1
//│ 	in let t1⁵ = 	
//│ 		let h1⁶ = 2
//│ 		in let t1⁶ = (fun ls2¹⁰ -> [N])
//│ 		in (fun ls2¹¹ -> go2₀₁(ls2¹¹, h1⁶, t1⁶))
//│ 	in (fun ls2¹² -> go2₀₀(ls2¹², h1⁵, t1⁵)), [C 3 [C 4 [N]]])
//│ def go1₀₀(ls1¹, ls2⁷) = 
//│ 	ls1¹(ls2⁷)
//│ def go2₀₀(ls2⁶, h1⁴, t1⁴) = 
//│ 	case ls2⁶ of {
//│ 		C h2² t2² => [C [P2 h1⁴ h2²] go2₀₀(t2², h1⁴, t1⁴)]
//│ 		| N  => go1₀₁(t1⁴, [N])}
//│ 	where
//│ 	def go1₀₁(ls1², ls2⁸) = 
//│ 		ls1²(ls2⁸)
//│ def go2₀₁(ls2⁵, h1³, t1³) = 
//│ 	case ls2⁵ of {
//│ 		C h2¹ t2¹ => [C [P2 h1³ h2¹] go2₀₁(t2¹, h1³, t1³)]
//│ 		| N  => go1₀₂(t1³, [N])}
//│ 	where
//│ 	def go1₀₂(ls1³, ls2⁹) = 
//│ 		ls1³(ls2⁹)
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 95 --->
//│ 	case ls2⁵ of {C h2¹ t2¹ => [C [P2 h1³ h2¹] go2₀₁(t2¹, h1³, t1³)] | N  => go1₀₂(t1³, [N])}: 76
//│ [N]: 144 --->
//│ 	case ls2⁶ of {C h2² t2² => [C [P2 h1⁴ h2²] go2₀₀(t2², h1⁴, t1⁴)] | N  => go1₀₁(t1⁴, [N])}: 97
//│ [C 4 [N]]: 145 --->
//│ 	case ls2⁶ of {C h2² t2² => [C [P2 h1⁴ h2²] go2₀₀(t2², h1⁴, t1⁴)] | N  => go1₀₁(t1⁴, [N])}: 97
//│ [C 3 [C 4 [N]]]: 146 --->
//│ 	case ls2⁶ of {C h2² t2² => [C [P2 h1⁴ h2²] go2₀₀(t2², h1⁴, t1⁴)] | N  => go1₀₁(t1⁴, [N])}: 97
//│ ------------------
//│ case ls2⁵ of {C h2¹ t2¹ => [C [P2 h1³ h2¹] go2₀₁(t2¹, h1³, t1³)] | N  => go1₀₂(t1³, [N])}: 76 --->
//│ 	[N]: 95
//│ case ls2⁶ of {C h2² t2² => [C [P2 h1⁴ h2²] go2₀₀(t2², h1⁴, t1⁴)] | N  => go1₀₁(t1⁴, [N])}: 97 --->
//│ 	[N]: 144
//│ 	[C 4 [N]]: 145
//│ 	[C 3 [C 4 [N]]]: 146
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 95 --->
//│ 	case ls2⁵ of {C h2¹ t2¹ => [C [P2 h1³ h2¹] go2₀₁(t2¹, h1³, t1³)] | N  => go1₀₂(t1³, [N])}: 76
//│ [N]: 144 --->
//│ 	case ls2⁶ of {C h2² t2² => [C [P2 h1⁴ h2²] go2₀₀(t2², h1⁴, t1⁴)] | N  => go1₀₁(t1⁴, [N])}: 97
//│ [C 4 [N]]: 145 --->
//│ 	case ls2⁶ of {C h2² t2² => [C [P2 h1⁴ h2²] go2₀₀(t2², h1⁴, t1⁴)] | N  => go1₀₁(t1⁴, [N])}: 97
//│ [C 3 [C 4 [N]]]: 146 --->
//│ 	case ls2⁶ of {C h2² t2² => [C [P2 h1⁴ h2²] go2₀₀(t2², h1⁴, t1⁴)] | N  => go1₀₁(t1⁴, [N])}: 97
//│ ------------------
//│ case ls2⁵ of {C h2¹ t2¹ => [C [P2 h1³ h2¹] go2₀₁(t2¹, h1³, t1³)] | N  => go1₀₂(t1³, [N])}: 76 --->
//│ 	[N]: 95
//│ case ls2⁶ of {C h2² t2² => [C [P2 h1⁴ h2²] go2₀₀(t2², h1⁴, t1⁴)] | N  => go1₀₁(t1⁴, [N])}: 97 --->
//│ 	[N]: 144
//│ 	[C 4 [N]]: 145
//│ 	[C 3 [C 4 [N]]]: 146
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ go1₀₀(
//│ 	let h1⁷ = 1
//│ 	in let t1⁷ = 	
//│ 		let h1⁸ = 2
//│ 		in let t1⁸ = (fun ls2¹³ -> [N])
//│ 		in (fun ls2¹⁴ -> go2₀₁(ls2¹⁴, h1⁸, t1⁸))
//│ 	in (fun ls2¹⁵ -> go2₀₀(ls2¹⁵, h1⁷, t1⁷)), 
//│ 	let h2³ = 3
//│ 	in let t2³ = 	
//│ 		let h2⁴ = 4
//│ 		in let t2⁴ = (fun h1¹¹ -> (fun t1¹¹ -> go1₀₁(t1¹¹, (fun h1¹² -> (fun t1¹² -> go1₀₂(t1¹², [N]))))))
//│ 		in (fun h1¹⁰ -> (fun t1¹⁰ -> [C [P2 h1¹⁰ h2⁴] go2₀₀(t2⁴, h1¹⁰, t1¹⁰)]))
//│ 	in (fun h1⁹ -> (fun t1⁹ -> [C [P2 h1⁹ h2³] go2₀₀(t2³, h1⁹, t1⁹)])))
//│ def go1₀₀(ls1⁶, ls2¹⁸) = 
//│ 	ls1⁶(ls2¹⁸)
//│ def go2₀₀(ls2¹⁹, h1¹³, t1¹³) = 
//│ 	ls2¹⁹(h1¹³, t1¹³)
//│ 	where
//│ 	def go1₀₁(ls1⁵, ls2¹⁷) = 
//│ 		ls1⁵(ls2¹⁷)
//│ def go2₀₁(ls2²⁰, h1¹⁴, t1¹⁴) = 
//│ 	ls2²⁰(h1¹⁴, t1¹⁴)
//│ 	where
//│ 	def go1₀₂(ls1⁴, ls2¹⁶) = 
//│ 		ls1⁴(ls2¹⁶)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C [P2 1 3] [C [P2 1 4] [N]]]
//│ <<<<<<< evaluate <<<<<<<
