:ParseOnly
:NewParser


// [(a, c) | (a, b) <- [(5, 10)], (c, d) <- [(1, 3), (2, 3), (a, b)]]
// a less efficient desugaring of list comprehension
_LUMBERHACK_EVAL
fun append(xs, ys) = if xs is
  C(h, t) then C(h, append(t, ys))
  N then ys
fun concatMap(f, ls) = if ls is
  C(h, t) then append(f(h), concatMap(f, t))
  N then N
let ok1 = arg1 => if arg1 is
  P2(a, b) then
    let ok2 = arg2 => if arg2 is
      P2(c, b) then C(P2(a, c), N)
      _ then N
    concatMap(ok2, C(P2(1, 3), C(P2(2, 3), C(P2(a, b), N))))
  _ then N
concatMap(ok1, C(P2(5, 10), N))
//│ |_LUMBERHACK_EVAL|↵|#fun| |append|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |C|(|h|,| |append|(|t|,| |ys|)|)|↵|N| |#then| |ys|←|↵|#fun| |concatMap|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |append|(|f|(|h|)|,| |concatMap|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#let| |ok1| |#=| |arg1| |=>| |#if| |arg1| |is|→|P2|(|a|,| |b|)| |#then|→|#let| |ok2| |#=| |arg2| |=>| |#if| |arg2| |is|→|P2|(|c|,| |b|)| |#then| |C|(|P2|(|a|,| |c|)|,| |N|)|↵|_| |#then| |N|←|↵|concatMap|(|ok2|,| |C|(|P2|(|1|,| |3|)|,| |C|(|P2|(|2|,| |3|)|,| |C|(|P2|(|a|,| |b|)|,| |N|)|)|)|)|←|↵|_| |#then| |N|←|↵|concatMap|(|ok1|,| |C|(|P2|(|5|,| |10|)|,| |N|)|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun append = xs, ys, => if xs is ‹(C (h, t,)) then C (h, append (t, ys,),); (N) then ys›; fun concatMap = f, ls, => if ls is ‹(C (h, t,)) then append (f (h,), concatMap (f, t,),); (N) then N›; let ok1 = arg1, => if arg1 is ‹(P2 (a, b,)) then {let ok2 = arg2, => if arg2 is ‹(P2 (c, b,)) then C (P2 (a, c,), N,); (_) then N›; concatMap (ok2, C (P2 (1, 3,), C (P2 (2, 3,), C (P2 (a, b,), N,),),),)}; (_) then N›; concatMap (ok1, C (P2 (5, 10,), N,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ concatMap^60(ok1^61, [C [P2 5 10] [N]])
//│ def append(xs⁰, ys⁰) = case xs⁰ of {
//│ 	C h⁰ t⁰ => [C h⁰ append^3(t⁰, ys⁰)]
//│ 	| N  => ys⁰}
//│ def concatMap(f⁰, ls⁰) = case ls⁰ of {
//│ 	C h¹ t¹ => append^14(f⁰(h¹), concatMap^19(f⁰, t¹))
//│ 	| N  => [N]}
//│ def ok1(arg1⁰) = case arg1⁰ of {
//│ 	P2 a⁰ b⁰ => 
//│ 		let ok2⁰ = (fun arg2⁰ -> case arg2⁰ of {
//│ 			P2 c⁰ b¹ => [C [P2 a⁰ c⁰] [N]]
//│ 			| _  => [N]})
//│ 		in concatMap^39(ok2⁰, [C [P2 1 3] [C [P2 2 3] [C [P2 a⁰ b⁰] [N]]]])
//│ 	| _  => [N]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [C [P2 5 1] [C [P2 5 2] [C [P2 5 5] [N]]]]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [concatMap^60]
//│ 	[concatMap^60 · append^14]
//│ 		[concatMap^60 · append^14 · append^3] ---> [concatMap^60 · append^14] (only one)
//│ 	[concatMap^60 · concatMap^19] (hopeless to continue)
//│ 		[concatMap^60 · concatMap^19 · append^14] (using original def)
//│ 			[concatMap^60 · concatMap^19 · append^14 · append^3] ---> [concatMap^60 · concatMap^19 · append^14] (using original def)
//│ 		[concatMap^60 · concatMap^19 · concatMap^19] ---> [concatMap^60 · concatMap^19] (using original def)
//│ [ok1^61]
//│ 	[ok1^61 · concatMap^39]
//│ 		[ok1^61 · concatMap^39 · append^14]
//│ 			[ok1^61 · concatMap^39 · append^14 · append^3] ---> [ok1^61 · concatMap^39 · append^14] (only one)
//│ 		[ok1^61 · concatMap^39 · concatMap^19] (hopeless to continue)
//│ 			[ok1^61 · concatMap^39 · concatMap^19 · append^14] (using original def)
//│ 				[ok1^61 · concatMap^39 · concatMap^19 · append^14 · append^3] ---> [ok1^61 · concatMap^39 · concatMap^19 · append^14] (using original def)
//│ 			[ok1^61 · concatMap^39 · concatMap^19 · concatMap^19] ---> [ok1^61 · concatMap^39 · concatMap^19] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ concatMap_₀(ok1_₀, [C [P2 5 10] [N]])
//│ def concatMap_₀(f², ls²) = 
//│ 	case ls² of {
//│ 		C h⁵ t⁵ => append_₀(f²(h⁵), concatMap_₁(f², t⁵))
//│ 		| N  => [N]}
//│ 	where
//│ 	def append_₀(xs¹, ys¹) = 
//│ 		case xs¹ of {
//│ 			C h³ t³ => [C h³ append_₀(t³, ys¹)]
//│ 			| N  => ys¹}
//│ 	def concatMap_₁(f⁴, ls⁴) = 
//│ 		case ls⁴ of {
//│ 			C h⁸ t⁸ => append_₁(f⁴(h⁸), concatMap_₁(f⁴, t⁸))
//│ 			| N  => [N]}
//│ 		where
//│ 		def append_₁(xs⁴, ys⁴) = 
//│ 			case xs⁴ of {
//│ 				C h⁹ t⁹ => [C h⁹ append_₁(t⁹, ys⁴)]
//│ 				| N  => ys⁴}
//│ def ok1_₀(arg1¹) = 
//│ 	case arg1¹ of {
//│ 		P2 a¹ b² => 
//│ 			let ok2¹ = (fun arg2¹ -> case arg2¹ of {
//│ 				P2 c¹ b³ => [C [P2 a¹ c¹] [N]]
//│ 				| _  => [N]})
//│ 			in concatMap_₂(ok2¹, [C [P2 1 3] [C [P2 2 3] [C [P2 a¹ b²] [N]]]])
//│ 		| _  => [N]}
//│ 	where
//│ 	def concatMap_₂(f³, ls³) = 
//│ 		case ls³ of {
//│ 			C h⁷ t⁷ => append_₂(f³(h⁷), concatMap_₃(f³, t⁷))
//│ 			| N  => [N]}
//│ 		where
//│ 		def append_₂(xs³, ys³) = 
//│ 			case xs³ of {
//│ 				C h⁶ t⁶ => [C h⁶ append_₂(t⁶, ys³)]
//│ 				| N  => ys³}
//│ 		def concatMap_₃(f¹, ls¹) = 
//│ 			case ls¹ of {
//│ 				C h² t² => append_₃(f¹(h²), concatMap_₃(f¹, t²))
//│ 				| N  => [N]}
//│ 			where
//│ 			def append_₃(xs², ys²) = 
//│ 				case xs² of {
//│ 					C h⁴ t⁴ => [C h⁴ append_₃(t⁴, ys²)]
//│ 					| N  => ys²}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 81 --->
//│ 	case xs¹ of {C h³ t³ => [C h³ append_₀(t³, ys¹)] | N  => ys¹}: 94
//│ 	case xs⁴ of {C h⁹ t⁹ => [C h⁹ append_₁(t⁹, ys⁴)] | N  => ys⁴}: 209
//│ [C h⁴ append_₃(t⁴, ys²)]: 104 --->
//│ 	case xs¹ of {C h³ t³ => [C h³ append_₀(t³, ys¹)] | N  => ys¹}: 94
//│ 	case xs⁴ of {C h⁹ t⁹ => [C h⁹ append_₁(t⁹, ys⁴)] | N  => ys⁴}: 209
//│ [N]: 114 --->
//│ 	case xs² of {C h⁴ t⁴ => [C h⁴ append_₃(t⁴, ys²)] | N  => ys²}: 106
//│ 	case xs³ of {C h⁶ t⁶ => [C h⁶ append_₂(t⁶, ys³)] | N  => ys³}: 165
//│ [C [P2 a¹ c¹] [N]]: 115 --->
//│ 	case xs² of {C h⁴ t⁴ => [C h⁴ append_₃(t⁴, ys²)] | N  => ys²}: 106
//│ 	case xs³ of {C h⁶ t⁶ => [C h⁶ append_₂(t⁶, ys³)] | N  => ys³}: 165
//│ [N]: 116 --->
//│ 	case xs² of {C h⁴ t⁴ => [C h⁴ append_₃(t⁴, ys²)] | N  => ys²}: 106
//│ 	case xs³ of {C h⁶ t⁶ => [C h⁶ append_₂(t⁶, ys³)] | N  => ys³}: 165
//│ [P2 1 3]: 124 --->
//│ 	case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]}: 117
//│ [P2 2 3]: 127 --->
//│ 	case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]}: 117
//│ [P2 a¹ b²]: 130 --->
//│ 	case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]}: 117
//│ [N]: 131 --->
//│ 	case ls¹ of {C h² t² => append_₃(f¹(h²), concatMap_₃(f¹, t²)) | N  => [N]}: 82
//│ [C [P2 a¹ b²] [N]]: 132 --->
//│ 	case ls¹ of {C h² t² => append_₃(f¹(h²), concatMap_₃(f¹, t²)) | N  => [N]}: 82
//│ [C [P2 2 3] [C [P2 a¹ b²] [N]]]: 133 --->
//│ 	case ls¹ of {C h² t² => append_₃(f¹(h²), concatMap_₃(f¹, t²)) | N  => [N]}: 82
//│ [C [P2 1 3] [C [P2 2 3] [C [P2 a¹ b²] [N]]]]: 134 --->
//│ 	case ls³ of {C h⁷ t⁷ => append_₂(f³(h⁷), concatMap_₃(f³, t⁷)) | N  => [N]}: 181
//│ [N]: 137 --->
//│ 	case xs¹ of {C h³ t³ => [C h³ append_₀(t³, ys¹)] | N  => ys¹}: 94
//│ 	case xs⁴ of {C h⁹ t⁹ => [C h⁹ append_₁(t⁹, ys⁴)] | N  => ys⁴}: 209
//│ [C h⁶ append_₂(t⁶, ys³)]: 163 --->
//│ 	case xs¹ of {C h³ t³ => [C h³ append_₀(t³, ys¹)] | N  => ys¹}: 94
//│ 	case xs⁴ of {C h⁹ t⁹ => [C h⁹ append_₁(t⁹, ys⁴)] | N  => ys⁴}: 209
//│ [N]: 180 --->
//│ 	case xs¹ of {C h³ t³ => [C h³ append_₀(t³, ys¹)] | N  => ys¹}: 94
//│ 	case xs⁴ of {C h⁹ t⁹ => [C h⁹ append_₁(t⁹, ys⁴)] | N  => ys⁴}: 209
//│ [P2 5 10]: 217 --->
//│ 	case arg1¹ of {P2 a¹ b² => let ok2¹ = (fun arg2¹ -> case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]})
//│ in concatMap_₂(ok2¹, [C [P2 1 3] [C [P2 2 3] [C [P2 a¹ b²] [N]]]]) | _  => [N]}: 138
//│ [N]: 218 --->
//│ 	case ls⁴ of {C h⁸ t⁸ => append_₁(f⁴(h⁸), concatMap_₁(f⁴, t⁸)) | N  => [N]}: 197
//│ [C [P2 5 10] [N]]: 219 --->
//│ 	case ls² of {C h⁵ t⁵ => append_₀(f²(h⁵), concatMap_₁(f², t⁵)) | N  => [N]}: 153
//│ ------------------
//│ case ls¹ of {C h² t² => append_₃(f¹(h²), concatMap_₃(f¹, t²)) | N  => [N]}: 82 --->
//│ 	[N]: 131
//│ 	[C [P2 a¹ b²] [N]]: 132
//│ 	[C [P2 2 3] [C [P2 a¹ b²] [N]]]: 133
//│ case xs¹ of {C h³ t³ => [C h³ append_₀(t³, ys¹)] | N  => ys¹}: 94 --->
//│ 	[N]: 81
//│ 	[C h⁴ append_₃(t⁴, ys²)]: 104
//│ 	[N]: 137
//│ 	[C h⁶ append_₂(t⁶, ys³)]: 163
//│ 	[N]: 180
//│ case xs² of {C h⁴ t⁴ => [C h⁴ append_₃(t⁴, ys²)] | N  => ys²}: 106 --->
//│ 	[N]: 114
//│ 	[C [P2 a¹ c¹] [N]]: 115
//│ 	[N]: 116
//│ case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]}: 117 --->
//│ 	[P2 1 3]: 124
//│ 	[P2 2 3]: 127
//│ 	[P2 a¹ b²]: 130
//│ case arg1¹ of {P2 a¹ b² => let ok2¹ = (fun arg2¹ -> case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]})
//│ in concatMap_₂(ok2¹, [C [P2 1 3] [C [P2 2 3] [C [P2 a¹ b²] [N]]]]) | _  => [N]}: 138 --->
//│ 	DeadCodeProd
//│ 	[P2 5 10]: 217
//│ case ls² of {C h⁵ t⁵ => append_₀(f²(h⁵), concatMap_₁(f², t⁵)) | N  => [N]}: 153 --->
//│ 	[C [P2 5 10] [N]]: 219
//│ case xs³ of {C h⁶ t⁶ => [C h⁶ append_₂(t⁶, ys³)] | N  => ys³}: 165 --->
//│ 	[N]: 114
//│ 	[C [P2 a¹ c¹] [N]]: 115
//│ 	[N]: 116
//│ case ls³ of {C h⁷ t⁷ => append_₂(f³(h⁷), concatMap_₃(f³, t⁷)) | N  => [N]}: 181 --->
//│ 	[C [P2 1 3] [C [P2 2 3] [C [P2 a¹ b²] [N]]]]: 134
//│ case ls⁴ of {C h⁸ t⁸ => append_₁(f⁴(h⁸), concatMap_₁(f⁴, t⁸)) | N  => [N]}: 197 --->
//│ 	DeadCodeProd
//│ 	[N]: 218
//│ case xs⁴ of {C h⁹ t⁹ => [C h⁹ append_₁(t⁹, ys⁴)] | N  => ys⁴}: 209 --->
//│ 	[N]: 81
//│ 	[C h⁴ append_₃(t⁴, ys²)]: 104
//│ 	[N]: 137
//│ 	[C h⁶ append_₂(t⁶, ys³)]: 163
//│ 	[N]: 180
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [P2 1 3]: 124 --->
//│ 	case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]}: 117
//│ [P2 2 3]: 127 --->
//│ 	case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]}: 117
//│ [P2 a¹ b²]: 130 --->
//│ 	case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]}: 117
//│ [N]: 131 --->
//│ 	case ls¹ of {C h² t² => append_₃(f¹(h²), concatMap_₃(f¹, t²)) | N  => [N]}: 82
//│ [C [P2 a¹ b²] [N]]: 132 --->
//│ 	case ls¹ of {C h² t² => append_₃(f¹(h²), concatMap_₃(f¹, t²)) | N  => [N]}: 82
//│ [C [P2 2 3] [C [P2 a¹ b²] [N]]]: 133 --->
//│ 	case ls¹ of {C h² t² => append_₃(f¹(h²), concatMap_₃(f¹, t²)) | N  => [N]}: 82
//│ [C [P2 1 3] [C [P2 2 3] [C [P2 a¹ b²] [N]]]]: 134 --->
//│ 	case ls³ of {C h⁷ t⁷ => append_₂(f³(h⁷), concatMap_₃(f³, t⁷)) | N  => [N]}: 181
//│ [C [P2 5 10] [N]]: 219 --->
//│ 	case ls² of {C h⁵ t⁵ => append_₀(f²(h⁵), concatMap_₁(f², t⁵)) | N  => [N]}: 153
//│ ------------------
//│ case ls¹ of {C h² t² => append_₃(f¹(h²), concatMap_₃(f¹, t²)) | N  => [N]}: 82 --->
//│ 	[N]: 131
//│ 	[C [P2 a¹ b²] [N]]: 132
//│ 	[C [P2 2 3] [C [P2 a¹ b²] [N]]]: 133
//│ case arg2¹ of {P2 c¹ b³ => [C [P2 a¹ c¹] [N]] | _  => [N]}: 117 --->
//│ 	[P2 1 3]: 124
//│ 	[P2 2 3]: 127
//│ 	[P2 a¹ b²]: 130
//│ case ls² of {C h⁵ t⁵ => append_₀(f²(h⁵), concatMap_₁(f², t⁵)) | N  => [N]}: 153 --->
//│ 	[C [P2 5 10] [N]]: 219
//│ case ls³ of {C h⁷ t⁷ => append_₂(f³(h⁷), concatMap_₃(f³, t⁷)) | N  => [N]}: 181 --->
//│ 	[C [P2 1 3] [C [P2 2 3] [C [P2 a¹ b²] [N]]]]: 134
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ concatMap_₀(ok1_₀, 
//│ 	let t¹⁰ = [N]
//│ 	in let h¹⁰ = [P2 5 10]
//│ 	in (fun f⁵ -> append_₀(f⁵(h¹⁰), concatMap_₁(f⁵, t¹⁰))))
//│ def concatMap_₀(f⁶, ls⁵) = 
//│ 	ls⁵(f⁶)
//│ 	where
//│ 	def append_₀(xs⁵, ys⁵) = 
//│ 		case xs⁵ of {
//│ 			C h³ t³ => [C h³ append_₀(t³, ys⁵)]
//│ 			| N  => ys⁵}
//│ 	def concatMap_₁(f⁷, ls⁶) = 
//│ 		case ls⁶ of {
//│ 			C h⁸ t⁸ => append_₁(f⁷(h⁸), concatMap_₁(f⁷, t⁸))
//│ 			| N  => [N]}
//│ 		where
//│ 		def append_₁(xs⁸, ys⁸) = 
//│ 			case xs⁸ of {
//│ 				C h⁹ t⁹ => [C h⁹ append_₁(t⁹, ys⁸)]
//│ 				| N  => ys⁸}
//│ def ok1_₀(arg1²) = 
//│ 	case arg1² of {
//│ 		P2 a¹ b² => 
//│ 			let ok2² = (fun arg2² -> arg2²(a¹))
//│ 			in concatMap_₂(ok2², 
//│ 				let t¹¹ = 	
//│ 					let t¹² = 	
//│ 						let t¹³ = (fun f¹² -> [N])
//│ 						in let h¹³ = 	
//│ 							let c⁴ = a¹
//│ 							in (fun a⁴ -> [C [P2 a⁴ c⁴] [N]])
//│ 						in (fun f¹¹ -> append_₃(f¹¹(h¹³), concatMap_₃(f¹¹, t¹³)))
//│ 					in let h¹² = 	
//│ 						let c³ = 2
//│ 						in (fun a³ -> [C [P2 a³ c³] [N]])
//│ 					in (fun f¹⁰ -> append_₃(f¹⁰(h¹²), concatMap_₃(f¹⁰, t¹²)))
//│ 				in let h¹¹ = 	
//│ 					let c² = 1
//│ 					in (fun a² -> [C [P2 a² c²] [N]])
//│ 				in (fun f⁹ -> append_₂(f⁹(h¹¹), concatMap_₃(f⁹, t¹¹))))
//│ 		| _  => [N]}
//│ 	where
//│ 	def concatMap_₂(f¹³, ls⁸) = 
//│ 		ls⁸(f¹³)
//│ 		where
//│ 		def append_₂(xs⁶, ys⁶) = 
//│ 			case xs⁶ of {
//│ 				C h⁶ t⁶ => [C h⁶ append_₂(t⁶, ys⁶)]
//│ 				| N  => ys⁶}
//│ 		def concatMap_₃(f⁸, ls⁷) = 
//│ 			ls⁷(f⁸)
//│ 			where
//│ 			def append_₃(xs⁷, ys⁷) = 
//│ 				case xs⁷ of {
//│ 					C h⁴ t⁴ => [C h⁴ append_₃(t⁴, ys⁷)]
//│ 					| N  => ys⁷}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C [P2 5 1] [C [P2 5 2] [C [P2 5 5] [N]]]]
//│ <<<<<<< evaluate <<<<<<<
//│ 
//│ ~~~~~~~~~~~~~~~~~~~~~~~ NEXT ITERATION ~~~~~~~~~~~~~~~~~~~~~~~
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [append_₀^8]
//│ 	[append_₀^8 · append_₀^30] ---> [append_₀^8] (only one)
//│ [concatMap_₀^1] (hopeless to continue)
//│ [concatMap_₁^13]
//│ 	[concatMap_₁^13 · append_₁^41]
//│ 		[concatMap_₁^13 · append_₁^41 · append_₁^173] ---> [concatMap_₁^13 · append_₁^41] (only one)
//│ 	[concatMap_₁^13 · concatMap_₁^46] (hopeless to continue)
//│ 		[concatMap_₁^13 · concatMap_₁^46 · append_₁^41] (using original def)
//│ 			[concatMap_₁^13 · concatMap_₁^46 · append_₁^41 · append_₁^173] ---> [concatMap_₁^13 · concatMap_₁^46 · append_₁^41] (using original def)
//│ 		[concatMap_₁^13 · concatMap_₁^46 · concatMap_₁^46] ---> [concatMap_₁^13 · concatMap_₁^46] (using original def)
//│ [ok1_₀^2]
//│ 	[ok1_₀^2 · append_₂^135]
//│ 		[ok1_₀^2 · append_₂^135 · append_₂^58] ---> [ok1_₀^2 · append_₂^135] (only one)
//│ 	[ok1_₀^2 · append_₃^113] (hopeless to continue)
//│ 		[ok1_₀^2 · append_₃^113 · append_₃^156] ---> [ok1_₀^2 · append_₃^113] (using original def)
//│ 	[ok1_₀^2 · append_₃^91] (hopeless to continue)
//│ 		[ok1_₀^2 · append_₃^91 · append_₃^156] ---> [ok1_₀^2 · append_₃^91] (using original def)
//│ 	[ok1_₀^2 · concatMap_₂^78] (hopeless to continue)
//│ 	[ok1_₀^2 · concatMap_₃^118] (hopeless to continue)
//│ 	[ok1_₀^2 · concatMap_₃^140] (hopeless to continue)
//│ 	[ok1_₀^2 · concatMap_₃^96] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ concatMap_₀_₀(ok1_₀_₀, 
//│ 	let t²⁰ = [N]
//│ 	in let h²⁰ = [P2 5 10]
//│ 	in (fun f²⁰ -> append_₀_₀(f²⁰(h²⁰), concatMap_₁_₀(f²⁰, t²⁰))))
//│ def append_₀_₀(xs⁵, ys⁵) = 
//│ 	case xs⁵ of {
//│ 		C h¹⁰ t¹⁰ => [C h¹⁰ append_₀_₀(t¹⁰, ys⁵)]
//│ 		| N  => ys⁵}
//│ def concatMap_₀_₀(f¹¹, ls⁶) = 
//│ 	ls⁶(f¹¹)
//│ def concatMap_₁_₀(f¹², ls⁷) = 
//│ 	case ls⁷ of {
//│ 		C h¹³ t¹³ => append_₁_₀(f¹²(h¹³), concatMap_₁_₁(f¹², t¹³))
//│ 		| N  => [N]}
//│ 	where
//│ 	def append_₁_₀(xs⁶, ys⁶) = 
//│ 		case xs⁶ of {
//│ 			C h¹² t¹² => [C h¹² append_₁_₀(t¹², ys⁶)]
//│ 			| N  => ys⁶}
//│ 	def concatMap_₁_₁(f¹⁰, ls⁵) = 
//│ 		case ls⁵ of {
//│ 			C h¹¹ t¹¹ => append_₁_₁(f¹⁰(h¹¹), concatMap_₁_₁(f¹⁰, t¹¹))
//│ 			| N  => [N]}
//│ 		where
//│ 		def append_₁_₁(xs⁹, ys⁹) = 
//│ 			case xs⁹ of {
//│ 				C h¹⁹ t¹⁹ => [C h¹⁹ append_₁_₁(t¹⁹, ys⁹)]
//│ 				| N  => ys⁹}
//│ def ok1_₀_₀(arg1¹) = 
//│ 	case arg1¹ of {
//│ 		P2 a⁴ b¹ => 
//│ 			let ok2¹ = (fun arg2¹ -> arg2¹(a⁴))
//│ 			in concatMap_₂_₀(ok2¹, 
//│ 				let t¹⁴ = 	
//│ 					let t¹⁵ = 	
//│ 						let t¹⁶ = (fun f¹⁴ -> [N])
//│ 						in let h¹⁴ = 	
//│ 							let c³ = a⁴
//│ 							in (fun a⁵ -> [C [P2 a⁵ c³] [N]])
//│ 						in (fun f¹⁵ -> append_₃_₁(f¹⁵(h¹⁴), concatMap_₃_₂(f¹⁵, t¹⁶)))
//│ 					in let h¹⁵ = 	
//│ 						let c⁴ = 2
//│ 						in (fun a⁶ -> [C [P2 a⁶ c⁴] [N]])
//│ 					in (fun f¹⁶ -> append_₃_₀(f¹⁶(h¹⁵), concatMap_₃_₀(f¹⁶, t¹⁵)))
//│ 				in let h¹⁶ = 	
//│ 					let c⁵ = 1
//│ 					in (fun a⁷ -> [C [P2 a⁷ c⁵] [N]])
//│ 				in (fun f¹⁷ -> append_₂_₀(f¹⁷(h¹⁶), concatMap_₃_₁(f¹⁷, t¹⁴))))
//│ 		| _  => [N]}
//│ 	where
//│ 	def append_₂_₀(xs⁴, ys⁴) = 
//│ 		case xs⁴ of {
//│ 			C h⁹ t⁹ => [C h⁹ append_₂_₀(t⁹, ys⁴)]
//│ 			| N  => ys⁴}
//│ 	def append_₃_₀(xs⁷, ys⁷) = 
//│ 		case xs⁷ of {
//│ 			C h¹⁷ t¹⁷ => [C h¹⁷ append_₃_₀(t¹⁷, ys⁷)]
//│ 			| N  => ys⁷}
//│ 	def append_₃_₁(xs⁸, ys⁸) = 
//│ 		case xs⁸ of {
//│ 			C h¹⁸ t¹⁸ => [C h¹⁸ append_₃_₁(t¹⁸, ys⁸)]
//│ 			| N  => ys⁸}
//│ 	def concatMap_₂_₀(f¹⁹, ls¹⁰) = 
//│ 		ls¹⁰(f¹⁹)
//│ 	def concatMap_₃_₀(f⁹, ls⁴) = 
//│ 		ls⁴(f⁹)
//│ 	def concatMap_₃_₁(f¹³, ls⁸) = 
//│ 		ls⁸(f¹³)
//│ 	def concatMap_₃_₂(f¹⁸, ls⁹) = 
//│ 		ls⁹(f¹⁸)
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h⁹ append_₂_₀(t⁹, ys⁴)]: 190 --->
//│ 	case xs⁵ of {C h¹⁰ t¹⁰ => [C h¹⁰ append_₀_₀(t¹⁰, ys⁵)] | N  => ys⁵}: 209
//│ 	case xs⁶ of {C h¹² t¹² => [C h¹² append_₁_₀(t¹², ys⁶)] | N  => ys⁶}: 237
//│ 	case xs⁹ of {C h¹⁹ t¹⁹ => [C h¹⁹ append_₁_₁(t¹⁹, ys⁹)] | N  => ys⁹}: 390
//│ [N]: 274 --->
//│ 	case xs⁵ of {C h¹⁰ t¹⁰ => [C h¹⁰ append_₀_₀(t¹⁰, ys⁵)] | N  => ys⁵}: 209
//│ 	case xs⁶ of {C h¹² t¹² => [C h¹² append_₁_₀(t¹², ys⁶)] | N  => ys⁶}: 237
//│ 	case xs⁹ of {C h¹⁹ t¹⁹ => [C h¹⁹ append_₁_₁(t¹⁹, ys⁹)] | N  => ys⁹}: 390
//│ [N]: 280 --->
//│ 	DeadCodeCons
//│ 	case xs⁴ of {C h⁹ t⁹ => [C h⁹ append_₂_₀(t⁹, ys⁴)] | N  => ys⁴}: 192
//│ 	case xs⁷ of {C h¹⁷ t¹⁷ => [C h¹⁷ append_₃_₀(t¹⁷, ys⁷)] | N  => ys⁷}: 361
//│ 	case xs⁸ of {C h¹⁸ t¹⁸ => [C h¹⁸ append_₃_₁(t¹⁸, ys⁸)] | N  => ys⁸}: 378
//│ [C [P2 a⁵ c³] [N]]: 281 --->
//│ 	DeadCodeCons
//│ 	case xs⁴ of {C h⁹ t⁹ => [C h⁹ append_₂_₀(t⁹, ys⁴)] | N  => ys⁴}: 192
//│ 	case xs⁷ of {C h¹⁷ t¹⁷ => [C h¹⁷ append_₃_₀(t¹⁷, ys⁷)] | N  => ys⁷}: 361
//│ 	case xs⁸ of {C h¹⁸ t¹⁸ => [C h¹⁸ append_₃_₁(t¹⁸, ys⁸)] | N  => ys⁸}: 378
//│ [N]: 302 --->
//│ 	DeadCodeCons
//│ 	case xs⁴ of {C h⁹ t⁹ => [C h⁹ append_₂_₀(t⁹, ys⁴)] | N  => ys⁴}: 192
//│ 	case xs⁷ of {C h¹⁷ t¹⁷ => [C h¹⁷ append_₃_₀(t¹⁷, ys⁷)] | N  => ys⁷}: 361
//│ 	case xs⁸ of {C h¹⁸ t¹⁸ => [C h¹⁸ append_₃_₁(t¹⁸, ys⁸)] | N  => ys⁸}: 378
//│ [C [P2 a⁶ c⁴] [N]]: 303 --->
//│ 	DeadCodeCons
//│ 	case xs⁴ of {C h⁹ t⁹ => [C h⁹ append_₂_₀(t⁹, ys⁴)] | N  => ys⁴}: 192
//│ 	case xs⁷ of {C h¹⁷ t¹⁷ => [C h¹⁷ append_₃_₀(t¹⁷, ys⁷)] | N  => ys⁷}: 361
//│ 	case xs⁸ of {C h¹⁸ t¹⁸ => [C h¹⁸ append_₃_₁(t¹⁸, ys⁸)] | N  => ys⁸}: 378
//│ [N]: 324 --->
//│ 	DeadCodeCons
//│ 	case xs⁴ of {C h⁹ t⁹ => [C h⁹ append_₂_₀(t⁹, ys⁴)] | N  => ys⁴}: 192
//│ 	case xs⁷ of {C h¹⁷ t¹⁷ => [C h¹⁷ append_₃_₀(t¹⁷, ys⁷)] | N  => ys⁷}: 361
//│ 	case xs⁸ of {C h¹⁸ t¹⁸ => [C h¹⁸ append_₃_₁(t¹⁸, ys⁸)] | N  => ys⁸}: 378
//│ [C [P2 a⁷ c⁵] [N]]: 325 --->
//│ 	DeadCodeCons
//│ 	case xs⁴ of {C h⁹ t⁹ => [C h⁹ append_₂_₀(t⁹, ys⁴)] | N  => ys⁴}: 192
//│ 	case xs⁷ of {C h¹⁷ t¹⁷ => [C h¹⁷ append_₃_₀(t¹⁷, ys⁷)] | N  => ys⁷}: 361
//│ 	case xs⁸ of {C h¹⁸ t¹⁸ => [C h¹⁸ append_₃_₁(t¹⁸, ys⁸)] | N  => ys⁸}: 378
//│ [N]: 344 --->
//│ 	case xs⁵ of {C h¹⁰ t¹⁰ => [C h¹⁰ append_₀_₀(t¹⁰, ys⁵)] | N  => ys⁵}: 209
//│ 	case xs⁶ of {C h¹² t¹² => [C h¹² append_₁_₀(t¹², ys⁶)] | N  => ys⁶}: 237
//│ 	case xs⁹ of {C h¹⁹ t¹⁹ => [C h¹⁹ append_₁_₁(t¹⁹, ys⁹)] | N  => ys⁹}: 390
//│ [C h¹⁷ append_₃_₀(t¹⁷, ys⁷)]: 359 --->
//│ 	case xs⁵ of {C h¹⁰ t¹⁰ => [C h¹⁰ append_₀_₀(t¹⁰, ys⁵)] | N  => ys⁵}: 209
//│ 	case xs⁶ of {C h¹² t¹² => [C h¹² append_₁_₀(t¹², ys⁶)] | N  => ys⁶}: 237
//│ 	case xs⁹ of {C h¹⁹ t¹⁹ => [C h¹⁹ append_₁_₁(t¹⁹, ys⁹)] | N  => ys⁹}: 390
//│ [C h¹⁸ append_₃_₁(t¹⁸, ys⁸)]: 376 --->
//│ 	case xs⁵ of {C h¹⁰ t¹⁰ => [C h¹⁰ append_₀_₀(t¹⁰, ys⁵)] | N  => ys⁵}: 209
//│ 	case xs⁶ of {C h¹² t¹² => [C h¹² append_₁_₀(t¹², ys⁶)] | N  => ys⁶}: 237
//│ 	case xs⁹ of {C h¹⁹ t¹⁹ => [C h¹⁹ append_₁_₁(t¹⁹, ys⁹)] | N  => ys⁹}: 390
//│ [N]: 396 --->
//│ 	case ls⁷ of {C h¹³ t¹³ => append_₁_₀(f¹²(h¹³), concatMap_₁_₁(f¹², t¹³)) | N  => [N]}: 258
//│ [P2 5 10]: 399 --->
//│ 	case arg1¹ of {P2 a⁴ b¹ => let ok2¹ = (fun arg2¹ -> arg2¹(a⁴))
//│ in concatMap_₂_₀(ok2¹, let t¹⁴ = let t¹⁵ = let t¹⁶ = (fun f¹⁴ -> [N])
//│ in let h¹⁴ = let c³ = a⁴
//│ in (fun a⁵ -> [C [P2 a⁵ c³] [N]])
//│ in (fun f¹⁵ -> append_₃_₁(f¹⁵(h¹⁴), concatMap_₃_₂(f¹⁵, t¹⁶)))
//│ in let h¹⁵ = let c⁴ = 2
//│ in (fun a⁶ -> [C [P2 a⁶ c⁴] [N]])
//│ in (fun f¹⁶ -> append_₃_₀(f¹⁶(h¹⁵), concatMap_₃_₀(f¹⁶, t¹⁵)))
//│ in let h¹⁶ = let c⁵ = 1
//│ in (fun a⁷ -> [C [P2 a⁷ c⁵] [N]])
//│ in (fun f¹⁷ -> append_₂_₀(f¹⁷(h¹⁶), concatMap_₃_₁(f¹⁷, t¹⁴)))) | _  => [N]}: 345
//│ ------------------
//│ case xs⁴ of {C h⁹ t⁹ => [C h⁹ append_₂_₀(t⁹, ys⁴)] | N  => ys⁴}: 192 --->
//│ 	DeadCodeProd
//│ 	[N]: 280
//│ 	[C [P2 a⁵ c³] [N]]: 281
//│ 	[N]: 302
//│ 	[C [P2 a⁶ c⁴] [N]]: 303
//│ 	[N]: 324
//│ 	[C [P2 a⁷ c⁵] [N]]: 325
//│ case xs⁵ of {C h¹⁰ t¹⁰ => [C h¹⁰ append_₀_₀(t¹⁰, ys⁵)] | N  => ys⁵}: 209 --->
//│ 	[C h⁹ append_₂_₀(t⁹, ys⁴)]: 190
//│ 	[N]: 274
//│ 	[N]: 344
//│ 	[C h¹⁷ append_₃_₀(t¹⁷, ys⁷)]: 359
//│ 	[C h¹⁸ append_₃_₁(t¹⁸, ys⁸)]: 376
//│ case xs⁶ of {C h¹² t¹² => [C h¹² append_₁_₀(t¹², ys⁶)] | N  => ys⁶}: 237 --->
//│ 	[C h⁹ append_₂_₀(t⁹, ys⁴)]: 190
//│ 	[N]: 274
//│ 	[N]: 344
//│ 	[C h¹⁷ append_₃_₀(t¹⁷, ys⁷)]: 359
//│ 	[C h¹⁸ append_₃_₁(t¹⁸, ys⁸)]: 376
//│ case ls⁷ of {C h¹³ t¹³ => append_₁_₀(f¹²(h¹³), concatMap_₁_₁(f¹², t¹³)) | N  => [N]}: 258 --->
//│ 	[N]: 396
//│ case arg1¹ of {P2 a⁴ b¹ => let ok2¹ = (fun arg2¹ -> arg2¹(a⁴))
//│ in concatMap_₂_₀(ok2¹, let t¹⁴ = let t¹⁵ = let t¹⁶ = (fun f¹⁴ -> [N])
//│ in let h¹⁴ = let c³ = a⁴
//│ in (fun a⁵ -> [C [P2 a⁵ c³] [N]])
//│ in (fun f¹⁵ -> append_₃_₁(f¹⁵(h¹⁴), concatMap_₃_₂(f¹⁵, t¹⁶)))
//│ in let h¹⁵ = let c⁴ = 2
//│ in (fun a⁶ -> [C [P2 a⁶ c⁴] [N]])
//│ in (fun f¹⁶ -> append_₃_₀(f¹⁶(h¹⁵), concatMap_₃_₀(f¹⁶, t¹⁵)))
//│ in let h¹⁶ = let c⁵ = 1
//│ in (fun a⁷ -> [C [P2 a⁷ c⁵] [N]])
//│ in (fun f¹⁷ -> append_₂_₀(f¹⁷(h¹⁶), concatMap_₃_₁(f¹⁷, t¹⁴)))) | _  => [N]}: 345 --->
//│ 	DeadCodeProd
//│ 	[P2 5 10]: 399
//│ case xs⁷ of {C h¹⁷ t¹⁷ => [C h¹⁷ append_₃_₀(t¹⁷, ys⁷)] | N  => ys⁷}: 361 --->
//│ 	DeadCodeProd
//│ 	[N]: 280
//│ 	[C [P2 a⁵ c³] [N]]: 281
//│ 	[N]: 302
//│ 	[C [P2 a⁶ c⁴] [N]]: 303
//│ 	[N]: 324
//│ 	[C [P2 a⁷ c⁵] [N]]: 325
//│ case xs⁸ of {C h¹⁸ t¹⁸ => [C h¹⁸ append_₃_₁(t¹⁸, ys⁸)] | N  => ys⁸}: 378 --->
//│ 	DeadCodeProd
//│ 	[N]: 280
//│ 	[C [P2 a⁵ c³] [N]]: 281
//│ 	[N]: 302
//│ 	[C [P2 a⁶ c⁴] [N]]: 303
//│ 	[N]: 324
//│ 	[C [P2 a⁷ c⁵] [N]]: 325
//│ case xs⁹ of {C h¹⁹ t¹⁹ => [C h¹⁹ append_₁_₁(t¹⁹, ys⁹)] | N  => ys⁹}: 390 --->
//│ 	[C h⁹ append_₂_₀(t⁹, ys⁴)]: 190
//│ 	[N]: 274
//│ 	[N]: 344
//│ 	[C h¹⁷ append_₃_₀(t¹⁷, ys⁷)]: 359
//│ 	[C h¹⁸ append_₃_₁(t¹⁸, ys⁸)]: 376
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 396 --->
//│ 	case ls⁷ of {C h¹³ t¹³ => append_₁_₀(f¹²(h¹³), concatMap_₁_₁(f¹², t¹³)) | N  => [N]}: 258
//│ ------------------
//│ case ls⁷ of {C h¹³ t¹³ => append_₁_₀(f¹²(h¹³), concatMap_₁_₁(f¹², t¹³)) | N  => [N]}: 258 --->
//│ 	[N]: 396
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ concatMap_₀_₀(ok1_₀_₀, 
//│ 	let t²¹ = (fun f²¹ -> [N])
//│ 	in let h²¹ = [P2 5 10]
//│ 	in (fun f²² -> append_₀_₀(f²²(h²¹), concatMap_₁_₀(f²², t²¹))))
//│ def append_₀_₀(xs¹⁴, ys¹⁴) = 
//│ 	case xs¹⁴ of {
//│ 		C h¹⁰ t¹⁰ => [C h¹⁰ append_₀_₀(t¹⁰, ys¹⁴)]
//│ 		| N  => ys¹⁴}
//│ def concatMap_₀_₀(f³¹, ls¹⁵) = 
//│ 	ls¹⁵(f³¹)
//│ def concatMap_₁_₀(f³², ls¹⁶) = 
//│ 	ls¹⁶(f³²)
//│ 	where
//│ 	def append_₁_₀(xs¹⁰, ys¹⁰) = 
//│ 		case xs¹⁰ of {
//│ 			C h¹² t¹² => [C h¹² append_₁_₀(t¹², ys¹⁰)]
//│ 			| N  => ys¹⁰}
//│ 	def concatMap_₁_₁(f²⁴, ls¹²) = 
//│ 		case ls¹² of {
//│ 			C h¹¹ t¹¹ => append_₁_₁(f²⁴(h¹¹), concatMap_₁_₁(f²⁴, t¹¹))
//│ 			| N  => [N]}
//│ 		where
//│ 		def append_₁_₁(xs¹³, ys¹³) = 
//│ 			case xs¹³ of {
//│ 				C h¹⁹ t¹⁹ => [C h¹⁹ append_₁_₁(t¹⁹, ys¹³)]
//│ 				| N  => ys¹³}
//│ def ok1_₀_₀(arg1²) = 
//│ 	case arg1² of {
//│ 		P2 a⁴ b¹ => 
//│ 			let ok2² = (fun arg2² -> arg2²(a⁴))
//│ 			in concatMap_₂_₀(ok2², 
//│ 				let t²² = 	
//│ 					let t²³ = 	
//│ 						let t²⁴ = (fun f²⁶ -> [N])
//│ 						in let h²² = 	
//│ 							let c⁶ = a⁴
//│ 							in (fun a⁸ -> [C [P2 a⁸ c⁶] [N]])
//│ 						in (fun f²⁷ -> append_₃_₁(f²⁷(h²²), concatMap_₃_₂(f²⁷, t²⁴)))
//│ 					in let h²³ = 	
//│ 						let c⁷ = 2
//│ 						in (fun a⁹ -> [C [P2 a⁹ c⁷] [N]])
//│ 					in (fun f²⁸ -> append_₃_₀(f²⁸(h²³), concatMap_₃_₀(f²⁸, t²³)))
//│ 				in let h²⁴ = 	
//│ 					let c⁸ = 1
//│ 					in (fun a¹⁰ -> [C [P2 a¹⁰ c⁸] [N]])
//│ 				in (fun f²⁹ -> append_₂_₀(f²⁹(h²⁴), concatMap_₃_₁(f²⁹, t²²))))
//│ 		| _  => [N]}
//│ 	where
//│ 	def append_₂_₀(xs¹⁵, ys¹⁵) = 
//│ 		case xs¹⁵ of {
//│ 			C h⁹ t⁹ => [C h⁹ append_₂_₀(t⁹, ys¹⁵)]
//│ 			| N  => ys¹⁵}
//│ 	def append_₃_₀(xs¹², ys¹²) = 
//│ 		case xs¹² of {
//│ 			C h¹⁷ t¹⁷ => [C h¹⁷ append_₃_₀(t¹⁷, ys¹²)]
//│ 			| N  => ys¹²}
//│ 	def append_₃_₁(xs¹¹, ys¹¹) = 
//│ 		case xs¹¹ of {
//│ 			C h¹⁸ t¹⁸ => [C h¹⁸ append_₃_₁(t¹⁸, ys¹¹)]
//│ 			| N  => ys¹¹}
//│ 	def concatMap_₂_₀(f³³, ls¹⁷) = 
//│ 		ls¹⁷(f³³)
//│ 	def concatMap_₃_₀(f²⁵, ls¹³) = 
//│ 		ls¹³(f²⁵)
//│ 	def concatMap_₃_₁(f³⁰, ls¹⁴) = 
//│ 		ls¹⁴(f³⁰)
//│ 	def concatMap_₃_₂(f²³, ls¹¹) = 
//│ 		ls¹¹(f²³)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C [P2 5 1] [C [P2 5 2] [C [P2 5 5] [N]]]]
//│ <<<<<<< evaluate <<<<<<<


// [(x, z) | (x, y1) <- zip [1 .. 3] [2 .. 4], (y2, z) <- zip [x .. x + 2] [y1 .. y1 + 1] , y1 == y2]
// more efficient desugaring, but requires recursive local let binding
_LUMBERHACK_EVAL
fun zip(xs, ys) = if xs is
  C(h, t) then if ys is
    C(h2, t2) then C(P2(h, h2), zip(t, t2))
    N then N
  N then N
fun fromTo(a, b) = if a < (b + 1) then C(a, fromTo(a + 1, b)) else N
let ok1 = ls1 => if ls1 is
  C(h, t) then if h is
    P2(x, y1) then
      let ok2 = ls2 => if ls2 is
        C(h2, t2) then if h2 is
          P2(y2, z) then if y1 == y2 then C(P2(x, z), ok2(t2)) else ok2(t2)
          _ then ok2(t2)
        N then ok1(t)
      ok2(zip(fromTo(x, x + 2), fromTo(y1, y1 + 1)))
    _ then ok1(t)
  N then N
ok1(zip(fromTo(1,3), fromTo(2,4)))
//│ |_LUMBERHACK_EVAL|↵|#fun| |zip|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |#if| |ys| |is|→|C|(|h2|,| |t2|)| |#then| |C|(|P2|(|h|,| |h2|)|,| |zip|(|t|,| |t2|)|)|↵|N| |#then| |N|←|↵|N| |#then| |N|←|↵|#fun| |fromTo|(|a|,| |b|)| |#=| |#if| |a| |<| |(|b| |+| |1|)| |#then| |C|(|a|,| |fromTo|(|a| |+| |1|,| |b|)|)| |#else| |N|↵|#let| |ok1| |#=| |ls1| |=>| |#if| |ls1| |is|→|C|(|h|,| |t|)| |#then| |#if| |h| |is|→|P2|(|x|,| |y1|)| |#then|→|#let| |ok2| |#=| |ls2| |=>| |#if| |ls2| |is|→|C|(|h2|,| |t2|)| |#then| |#if| |h2| |is|→|P2|(|y2|,| |z|)| |#then| |#if| |y1| |==| |y2| |#then| |C|(|P2|(|x|,| |z|)|,| |ok2|(|t2|)|)| |#else| |ok2|(|t2|)|↵|_| |#then| |ok2|(|t2|)|←|↵|N| |#then| |ok1|(|t|)|←|↵|ok2|(|zip|(|fromTo|(|x|,| |x| |+| |2|)|,| |fromTo|(|y1|,| |y1| |+| |1|)|)|)|←|↵|_| |#then| |ok1|(|t|)|←|↵|N| |#then| |N|←|↵|ok1|(|zip|(|fromTo|(|1|,|3|)|,| |fromTo|(|2|,|4|)|)|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun zip = xs, ys, => if xs is ‹(C (h, t,)) then if ys is ‹(C (h2, t2,)) then C (P2 (h, h2,), zip (t, t2,),); (N) then N›; (N) then N›; fun fromTo = a, b, => if (< (a,) (+ (b,) (1,),)) then C (a, fromTo (+ (a,) (1,), b,),) else N; let ok1 = ls1, => if ls1 is ‹(C (h, t,)) then if h is ‹(P2 (x, y1,)) then {let ok2 = ls2, => if ls2 is ‹(C (h2, t2,)) then if h2 is ‹(P2 (y2, z,)) then if (== (y1,) (y2,)) then C (P2 (x, z,), ok2 (t2,),) else ok2 (t2,); (_) then ok2 (t2,)›; (N) then ok1 (t,)›; ok2 (zip (fromTo (x, + (x,) (2,),), fromTo (y1, + (y1,) (1,),),),)}; (_) then ok1 (t,)›; (N) then N›; ok1 (zip (fromTo (1, 3,), fromTo (2, 4,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ok1^102(zip^103(fromTo^104(1, 3), fromTo^110(2, 4)))
//│ def fromTo(a⁰, b⁰) = if (a⁰ < (b⁰ + 1)) then [C a⁰ fromTo^28((a⁰ + 1), b⁰)] else [N]
//│ def ok1(ls1⁰) = case ls1⁰ of {
//│ 	C h¹ t¹ => case h¹ of {
//│ 		P2 x⁰ y1⁰ => 
//│ 			let ok2⁰ = (fun ls2⁰ -> case ls2⁰ of {
//│ 				C h2¹ t2¹ => case h2¹ of {
//│ 					P2 y2⁰ z⁰ => if (y1⁰ == y2⁰) then [C [P2 x⁰ z⁰] ok2⁰(t2¹)] else ok2⁰(t2¹)
//│ 					| _  => ok2⁰(t2¹)}
//│ 				| N  => ok1^66(t¹)})
//│ 			in ok2⁰(zip^72(fromTo^73(x⁰, (x⁰ + 2)), fromTo^83(y1⁰, (y1⁰ + 1))))
//│ 		| _  => ok1^95(t¹)}
//│ 	| N  => [N]}
//│ def zip(xs⁰, ys⁰) = case xs⁰ of {
//│ 	C h⁰ t⁰ => case ys⁰ of {
//│ 		C h2⁰ t2⁰ => [C [P2 h⁰ h2⁰] zip^6(t⁰, t2⁰)]
//│ 		| N  => [N]}
//│ 	| N  => [N]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [C [P2 1 3] [C [P2 2 4] [C [P2 3 5] [N]]]]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [fromTo^104] (hopeless to continue)
//│ 	[fromTo^104 · fromTo^28] ---> [fromTo^104] (using original def)
//│ [fromTo^110] (hopeless to continue)
//│ 	[fromTo^110 · fromTo^28] ---> [fromTo^110] (using original def)
//│ [ok1^102]
//│ 	[ok1^102 · fromTo^73] (hopeless to continue)
//│ 		[ok1^102 · fromTo^73 · fromTo^28] ---> [ok1^102 · fromTo^73] (using original def)
//│ 	[ok1^102 · fromTo^83] (hopeless to continue)
//│ 		[ok1^102 · fromTo^83 · fromTo^28] ---> [ok1^102 · fromTo^83] (using original def)
//│ 	[ok1^102 · ok1^66] (hopeless to continue)
//│ 		[ok1^102 · ok1^66 · fromTo^73] (using original def)
//│ 			[ok1^102 · ok1^66 · fromTo^73 · fromTo^28] ---> [ok1^102 · ok1^66 · fromTo^73] (using original def)
//│ 		[ok1^102 · ok1^66 · fromTo^83] (using original def)
//│ 			[ok1^102 · ok1^66 · fromTo^83 · fromTo^28] ---> [ok1^102 · ok1^66 · fromTo^83] (using original def)
//│ 		[ok1^102 · ok1^66 · ok1^66] ---> [ok1^102 · ok1^66] (using original def)
//│ 		[ok1^102 · ok1^66 · ok1^95] ---> [ok1^102 · ok1^66] (using original def)
//│ 		[ok1^102 · ok1^66 · zip^72] (using original def)
//│ 			[ok1^102 · ok1^66 · zip^72 · zip^6] ---> [ok1^102 · ok1^66 · zip^72] (using original def)
//│ 	[ok1^102 · ok1^95] ---> [ok1^102] (only one)
//│ 	[ok1^102 · zip^72] (hopeless to continue)
//│ 		[ok1^102 · zip^72 · zip^6] ---> [ok1^102 · zip^72] (using original def)
//│ [zip^103]
//│ 	[zip^103 · zip^6] ---> [zip^103] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ok1_₀(zip_₂(fromTo_₀(1, 3), fromTo_₁(2, 4)))
//│ def fromTo_₀(a³, b³) = 
//│ 	if (a³ < (b³ + 1)) then [C a³ fromTo_₀((a³ + 1), b³)] else [N]
//│ def fromTo_₁(a², b²) = 
//│ 	if (a² < (b² + 1)) then [C a² fromTo_₁((a² + 1), b²)] else [N]
//│ def ok1_₀(ls1²) = 
//│ 	case ls1² of {
//│ 		C h⁴ t⁴ => case h⁴ of {
//│ 			P2 x² y1² => 
//│ 				let ok2² = (fun ls2² -> case ls2² of {
//│ 					C h2⁴ t2⁴ => case h2⁴ of {
//│ 						P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴)
//│ 						| _  => ok2²(t2⁴)}
//│ 					| N  => ok1_₁(t⁴)})
//│ 				in ok2²(zip_₁(fromTo_₂(x², (x² + 2)), fromTo_₃(y1², (y1² + 1))))
//│ 			| _  => ok1_₀(t⁴)}
//│ 		| N  => [N]}
//│ 	where
//│ 	def fromTo_₂(a¹, b¹) = 
//│ 		if (a¹ < (b¹ + 1)) then [C a¹ fromTo_₂((a¹ + 1), b¹)] else [N]
//│ 	def fromTo_₃(a⁵, b⁵) = 
//│ 		if (a⁵ < (b⁵ + 1)) then [C a⁵ fromTo_₃((a⁵ + 1), b⁵)] else [N]
//│ 	def ok1_₁(ls1¹) = 
//│ 		case ls1¹ of {
//│ 			C h² t² => case h² of {
//│ 				P2 x¹ y1¹ => 
//│ 					let ok2¹ = (fun ls2¹ -> case ls2¹ of {
//│ 						C h2² t2² => case h2² of {
//│ 							P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²)
//│ 							| _  => ok2¹(t2²)}
//│ 						| N  => ok1_₁(t²)})
//│ 					in ok2¹(zip_₀(fromTo_₄(x¹, (x¹ + 2)), fromTo_₅(y1¹, (y1¹ + 1))))
//│ 				| _  => ok1_₁(t²)}
//│ 			| N  => [N]}
//│ 		where
//│ 		def fromTo_₄(a⁶, b⁶) = 
//│ 			if (a⁶ < (b⁶ + 1)) then [C a⁶ fromTo_₄((a⁶ + 1), b⁶)] else [N]
//│ 		def fromTo_₅(a⁴, b⁴) = 
//│ 			if (a⁴ < (b⁴ + 1)) then [C a⁴ fromTo_₅((a⁴ + 1), b⁴)] else [N]
//│ 		def zip_₀(xs³, ys³) = 
//│ 			case xs³ of {
//│ 				C h⁶ t⁶ => case ys³ of {
//│ 					C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)]
//│ 					| N  => [N]}
//│ 				| N  => [N]}
//│ 	def zip_₁(xs¹, ys¹) = 
//│ 		case xs¹ of {
//│ 			C h³ t³ => case ys¹ of {
//│ 				C h2³ t2³ => [C [P2 h³ h2³] zip_₁(t³, t2³)]
//│ 				| N  => [N]}
//│ 			| N  => [N]}
//│ def zip_₂(xs², ys²) = 
//│ 	case xs² of {
//│ 		C h⁵ t⁵ => case ys² of {
//│ 			C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip_₂(t⁵, t2⁵)]
//│ 			| N  => [N]}
//│ 		| N  => [N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C a¹ fromTo_₂((a¹ + 1), b¹)]: 136 --->
//│ 	case xs¹ of {C h³ t³ => case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip_₁(t³, t2³)] | N  => [N]} | N  => [N]}: 239
//│ [N]: 137 --->
//│ 	case xs¹ of {C h³ t³ => case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip_₁(t³, t2³)] | N  => [N]} | N  => [N]}: 239
//│ [C a² fromTo_₁((a² + 1), b²)]: 160 --->
//│ 	case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip_₂(t⁵, t2⁵)] | N  => [N]}: 362
//│ [N]: 161 --->
//│ 	case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip_₂(t⁵, t2⁵)] | N  => [N]}: 362
//│ [P2 h³ h2³]: 229 --->
//│ 	case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)}: 313
//│ [C [P2 h³ h2³] zip_₁(t³, t2³)]: 235 --->
//│ 	case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1_₁(t⁴)}: 317
//│ [N]: 236 --->
//│ 	case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1_₁(t⁴)}: 317
//│ [N]: 238 --->
//│ 	case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1_₁(t⁴)}: 317
//│ [C a³ fromTo_₀((a³ + 1), b³)]: 261 --->
//│ 	case xs² of {C h⁵ t⁵ => case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip_₂(t⁵, t2⁵)] | N  => [N]} | N  => [N]}: 364
//│ [N]: 262 --->
//│ 	case xs² of {C h⁵ t⁵ => case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip_₂(t⁵, t2⁵)] | N  => [N]} | N  => [N]}: 364
//│ [C a⁴ fromTo_₅((a⁴ + 1), b⁴)]: 285 --->
//│ 	case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)] | N  => [N]}: 427
//│ [N]: 286 --->
//│ 	case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)] | N  => [N]}: 427
//│ [P2 h⁵ h2⁵]: 354 --->
//│ 	case h² of {P2 x¹ y1¹ => let ok2¹ = (fun ls2¹ -> case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1_₁(t²)})
//│ in ok2¹(zip_₀(fromTo_₄(x¹, (x¹ + 2)), fromTo_₅(y1¹, (y1¹ + 1)))) | _  => ok1_₁(t²)}: 221
//│ 	case h⁴ of {P2 x² y1² => let ok2² = (fun ls2² -> case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1_₁(t⁴)})
//│ in ok2²(zip_₁(fromTo_₂(x², (x² + 2)), fromTo_₃(y1², (y1² + 1)))) | _  => ok1_₀(t⁴)}: 346
//│ [C [P2 h⁵ h2⁵] zip_₂(t⁵, t2⁵)]: 360 --->
//│ 	case ls1¹ of {C h² t² => case h² of {P2 x¹ y1¹ => let ok2¹ = (fun ls2¹ -> case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1_₁(t²)})
//│ in ok2¹(zip_₀(fromTo_₄(x¹, (x¹ + 2)), fromTo_₅(y1¹, (y1¹ + 1)))) | _  => ok1_₁(t²)} | N  => [N]}: 223
//│ 	case ls1² of {C h⁴ t⁴ => case h⁴ of {P2 x² y1² => let ok2² = (fun ls2² -> case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1_₁(t⁴)})
//│ in ok2²(zip_₁(fromTo_₂(x², (x² + 2)), fromTo_₃(y1², (y1² + 1)))) | _  => ok1_₀(t⁴)} | N  => [N]}: 348
//│ [N]: 361 --->
//│ 	case ls1¹ of {C h² t² => case h² of {P2 x¹ y1¹ => let ok2¹ = (fun ls2¹ -> case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1_₁(t²)})
//│ in ok2¹(zip_₀(fromTo_₄(x¹, (x¹ + 2)), fromTo_₅(y1¹, (y1¹ + 1)))) | _  => ok1_₁(t²)} | N  => [N]}: 223
//│ 	case ls1² of {C h⁴ t⁴ => case h⁴ of {P2 x² y1² => let ok2² = (fun ls2² -> case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1_₁(t⁴)})
//│ in ok2²(zip_₁(fromTo_₂(x², (x² + 2)), fromTo_₃(y1², (y1² + 1)))) | _  => ok1_₀(t⁴)} | N  => [N]}: 348
//│ [N]: 363 --->
//│ 	case ls1¹ of {C h² t² => case h² of {P2 x¹ y1¹ => let ok2¹ = (fun ls2¹ -> case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1_₁(t²)})
//│ in ok2¹(zip_₀(fromTo_₄(x¹, (x¹ + 2)), fromTo_₅(y1¹, (y1¹ + 1)))) | _  => ok1_₁(t²)} | N  => [N]}: 223
//│ 	case ls1² of {C h⁴ t⁴ => case h⁴ of {P2 x² y1² => let ok2² = (fun ls2² -> case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1_₁(t⁴)})
//│ in ok2²(zip_₁(fromTo_₂(x², (x² + 2)), fromTo_₃(y1², (y1² + 1)))) | _  => ok1_₀(t⁴)} | N  => [N]}: 348
//│ [C a⁵ fromTo_₃((a⁵ + 1), b⁵)]: 386 --->
//│ 	case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip_₁(t³, t2³)] | N  => [N]}: 237
//│ [N]: 387 --->
//│ 	case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip_₁(t³, t2³)] | N  => [N]}: 237
//│ [C a⁶ fromTo_₄((a⁶ + 1), b⁶)]: 410 --->
//│ 	case xs³ of {C h⁶ t⁶ => case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)] | N  => [N]} | N  => [N]}: 429
//│ [N]: 411 --->
//│ 	case xs³ of {C h⁶ t⁶ => case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)] | N  => [N]} | N  => [N]}: 429
//│ [P2 h⁶ h2⁶]: 419 --->
//│ 	case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)}: 188
//│ [C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)]: 425 --->
//│ 	case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1_₁(t²)}: 192
//│ [N]: 426 --->
//│ 	case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1_₁(t²)}: 192
//│ [N]: 428 --->
//│ 	case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1_₁(t²)}: 192
//│ ------------------
//│ case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)}: 188 --->
//│ 	[P2 h⁶ h2⁶]: 419
//│ case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1_₁(t²)}: 192 --->
//│ 	[C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)]: 425
//│ 	[N]: 426
//│ 	[N]: 428
//│ case h² of {P2 x¹ y1¹ => let ok2¹ = (fun ls2¹ -> case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1_₁(t²)})
//│ in ok2¹(zip_₀(fromTo_₄(x¹, (x¹ + 2)), fromTo_₅(y1¹, (y1¹ + 1)))) | _  => ok1_₁(t²)}: 221 --->
//│ 	[P2 h⁵ h2⁵]: 354
//│ case ls1¹ of {C h² t² => case h² of {P2 x¹ y1¹ => let ok2¹ = (fun ls2¹ -> case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1_₁(t²)})
//│ in ok2¹(zip_₀(fromTo_₄(x¹, (x¹ + 2)), fromTo_₅(y1¹, (y1¹ + 1)))) | _  => ok1_₁(t²)} | N  => [N]}: 223 --->
//│ 	[C [P2 h⁵ h2⁵] zip_₂(t⁵, t2⁵)]: 360
//│ 	[N]: 361
//│ 	[N]: 363
//│ case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip_₁(t³, t2³)] | N  => [N]}: 237 --->
//│ 	[C a⁵ fromTo_₃((a⁵ + 1), b⁵)]: 386
//│ 	[N]: 387
//│ case xs¹ of {C h³ t³ => case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip_₁(t³, t2³)] | N  => [N]} | N  => [N]}: 239 --->
//│ 	[C a¹ fromTo_₂((a¹ + 1), b¹)]: 136
//│ 	[N]: 137
//│ case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)}: 313 --->
//│ 	[P2 h³ h2³]: 229
//│ case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1_₁(t⁴)}: 317 --->
//│ 	[C [P2 h³ h2³] zip_₁(t³, t2³)]: 235
//│ 	[N]: 236
//│ 	[N]: 238
//│ case h⁴ of {P2 x² y1² => let ok2² = (fun ls2² -> case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1_₁(t⁴)})
//│ in ok2²(zip_₁(fromTo_₂(x², (x² + 2)), fromTo_₃(y1², (y1² + 1)))) | _  => ok1_₀(t⁴)}: 346 --->
//│ 	[P2 h⁵ h2⁵]: 354
//│ case ls1² of {C h⁴ t⁴ => case h⁴ of {P2 x² y1² => let ok2² = (fun ls2² -> case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1_₁(t⁴)})
//│ in ok2²(zip_₁(fromTo_₂(x², (x² + 2)), fromTo_₃(y1², (y1² + 1)))) | _  => ok1_₀(t⁴)} | N  => [N]}: 348 --->
//│ 	[C [P2 h⁵ h2⁵] zip_₂(t⁵, t2⁵)]: 360
//│ 	[N]: 361
//│ 	[N]: 363
//│ case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip_₂(t⁵, t2⁵)] | N  => [N]}: 362 --->
//│ 	[C a² fromTo_₁((a² + 1), b²)]: 160
//│ 	[N]: 161
//│ case xs² of {C h⁵ t⁵ => case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip_₂(t⁵, t2⁵)] | N  => [N]} | N  => [N]}: 364 --->
//│ 	[C a³ fromTo_₀((a³ + 1), b³)]: 261
//│ 	[N]: 262
//│ case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)] | N  => [N]}: 427 --->
//│ 	[C a⁴ fromTo_₅((a⁴ + 1), b⁴)]: 285
//│ 	[N]: 286
//│ case xs³ of {C h⁶ t⁶ => case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)] | N  => [N]} | N  => [N]}: 429 --->
//│ 	[C a⁶ fromTo_₄((a⁶ + 1), b⁶)]: 410
//│ 	[N]: 411
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C a¹ fromTo_₂((a¹ + 1), b¹)]: 136 --->
//│ 	case xs¹ of {C h³ t³ => case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip_₁(t³, t2³)] | N  => [N]} | N  => [N]}: 239
//│ [N]: 137 --->
//│ 	case xs¹ of {C h³ t³ => case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip_₁(t³, t2³)] | N  => [N]} | N  => [N]}: 239
//│ [C a² fromTo_₁((a² + 1), b²)]: 160 --->
//│ 	case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip_₂(t⁵, t2⁵)] | N  => [N]}: 362
//│ [N]: 161 --->
//│ 	case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip_₂(t⁵, t2⁵)] | N  => [N]}: 362
//│ [P2 h³ h2³]: 229 --->
//│ 	case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)}: 313
//│ [C [P2 h³ h2³] zip_₁(t³, t2³)]: 235 --->
//│ 	case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1_₁(t⁴)}: 317
//│ [N]: 236 --->
//│ 	case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1_₁(t⁴)}: 317
//│ [N]: 238 --->
//│ 	case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1_₁(t⁴)}: 317
//│ [C a³ fromTo_₀((a³ + 1), b³)]: 261 --->
//│ 	case xs² of {C h⁵ t⁵ => case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip_₂(t⁵, t2⁵)] | N  => [N]} | N  => [N]}: 364
//│ [N]: 262 --->
//│ 	case xs² of {C h⁵ t⁵ => case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip_₂(t⁵, t2⁵)] | N  => [N]} | N  => [N]}: 364
//│ [C a⁴ fromTo_₅((a⁴ + 1), b⁴)]: 285 --->
//│ 	case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)] | N  => [N]}: 427
//│ [N]: 286 --->
//│ 	case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)] | N  => [N]}: 427
//│ [C a⁵ fromTo_₃((a⁵ + 1), b⁵)]: 386 --->
//│ 	case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip_₁(t³, t2³)] | N  => [N]}: 237
//│ [N]: 387 --->
//│ 	case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip_₁(t³, t2³)] | N  => [N]}: 237
//│ [C a⁶ fromTo_₄((a⁶ + 1), b⁶)]: 410 --->
//│ 	case xs³ of {C h⁶ t⁶ => case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)] | N  => [N]} | N  => [N]}: 429
//│ [N]: 411 --->
//│ 	case xs³ of {C h⁶ t⁶ => case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)] | N  => [N]} | N  => [N]}: 429
//│ [P2 h⁶ h2⁶]: 419 --->
//│ 	case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)}: 188
//│ [C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)]: 425 --->
//│ 	case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1_₁(t²)}: 192
//│ [N]: 426 --->
//│ 	case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1_₁(t²)}: 192
//│ [N]: 428 --->
//│ 	case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1_₁(t²)}: 192
//│ ------------------
//│ case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)}: 188 --->
//│ 	[P2 h⁶ h2⁶]: 419
//│ case ls2¹ of {C h2² t2² => case h2² of {P2 y2¹ z¹ => if (y1¹ == y2¹) then [C [P2 x¹ z¹] ok2¹(t2²)] else ok2¹(t2²) | _  => ok2¹(t2²)} | N  => ok1_₁(t²)}: 192 --->
//│ 	[C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)]: 425
//│ 	[N]: 426
//│ 	[N]: 428
//│ case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip_₁(t³, t2³)] | N  => [N]}: 237 --->
//│ 	[C a⁵ fromTo_₃((a⁵ + 1), b⁵)]: 386
//│ 	[N]: 387
//│ case xs¹ of {C h³ t³ => case ys¹ of {C h2³ t2³ => [C [P2 h³ h2³] zip_₁(t³, t2³)] | N  => [N]} | N  => [N]}: 239 --->
//│ 	[C a¹ fromTo_₂((a¹ + 1), b¹)]: 136
//│ 	[N]: 137
//│ case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)}: 313 --->
//│ 	[P2 h³ h2³]: 229
//│ case ls2² of {C h2⁴ t2⁴ => case h2⁴ of {P2 y2² z² => if (y1² == y2²) then [C [P2 x² z²] ok2²(t2⁴)] else ok2²(t2⁴) | _  => ok2²(t2⁴)} | N  => ok1_₁(t⁴)}: 317 --->
//│ 	[C [P2 h³ h2³] zip_₁(t³, t2³)]: 235
//│ 	[N]: 236
//│ 	[N]: 238
//│ case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip_₂(t⁵, t2⁵)] | N  => [N]}: 362 --->
//│ 	[C a² fromTo_₁((a² + 1), b²)]: 160
//│ 	[N]: 161
//│ case xs² of {C h⁵ t⁵ => case ys² of {C h2⁵ t2⁵ => [C [P2 h⁵ h2⁵] zip_₂(t⁵, t2⁵)] | N  => [N]} | N  => [N]}: 364 --->
//│ 	[C a³ fromTo_₀((a³ + 1), b³)]: 261
//│ 	[N]: 262
//│ case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)] | N  => [N]}: 427 --->
//│ 	[C a⁴ fromTo_₅((a⁴ + 1), b⁴)]: 285
//│ 	[N]: 286
//│ case xs³ of {C h⁶ t⁶ => case ys³ of {C h2⁶ t2⁶ => [C [P2 h⁶ h2⁶] zip_₀(t⁶, t2⁶)] | N  => [N]} | N  => [N]}: 429 --->
//│ 	[C a⁶ fromTo_₄((a⁶ + 1), b⁶)]: 410
//│ 	[N]: 411
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ok1_₀(zip_₂(fromTo_₀(1, 3), fromTo_₁(2, 4)))
//│ def fromTo_₀(a⁹, b⁹) = 
//│ 	if (a⁹ < (b⁹ + 1)) then 
//│ 		let t¹¹ = fromTo_₀((a⁹ + 1), b⁹)
//│ 		in let h¹⁰ = a⁹
//│ 		in (fun ys⁷ -> ys⁷(h¹⁰, t¹¹)) else (fun ys⁸ -> [N])
//│ def fromTo_₁(a⁸, b⁸) = 
//│ 	if (a⁸ < (b⁸ + 1)) then 
//│ 		let t2⁷ = fromTo_₁((a⁸ + 1), b⁸)
//│ 		in let h2⁷ = a⁸
//│ 		in (fun h⁸ -> (fun t⁹ -> [C [P2 h⁸ h2⁷] zip_₂(t⁹, t2⁷)])) else (fun h⁹ -> (fun t¹⁰ -> [N]))
//│ def ok1_₀(ls1⁴) = 
//│ 	case ls1⁴ of {
//│ 		C h⁴ t⁴ => case h⁴ of {
//│ 			P2 x² y1² => 
//│ 				let ok2⁵ = (fun ls2⁴ -> ls2⁴(ok2⁵, x², y1², t⁴))
//│ 				in ok2⁵(zip_₁(fromTo_₂(x², (x² + 2)), fromTo_₃(y1², (y1² + 1))))
//│ 			| _  => ok1_₀(t⁴)}
//│ 		| N  => [N]}
//│ 	where
//│ 	def fromTo_₂(a¹⁰, b¹⁰) = 
//│ 		if (a¹⁰ < (b¹⁰ + 1)) then 
//│ 			let t¹² = fromTo_₂((a¹⁰ + 1), b¹⁰)
//│ 			in let h¹¹ = a¹⁰
//│ 			in (fun ys¹¹ -> ys¹¹(h¹¹, t¹²)) else (fun ys¹² -> (fun ok2⁶ -> (fun x⁴ -> (fun y1⁴ -> (fun t¹³ -> ok1_₁(t¹³))))))
//│ 	def fromTo_₃(a¹², b¹²) = 
//│ 		if (a¹² < (b¹² + 1)) then 
//│ 			let t2¹¹ = fromTo_₃((a¹² + 1), b¹²)
//│ 			in let h2¹⁰ = a¹²
//│ 			in (fun h¹⁴ -> (fun t¹⁸ -> 
//│ 				let t2¹² = zip_₁(t¹⁸, t2¹¹)
//│ 				in let h2¹¹ = 	
//│ 					let z⁴ = h2¹⁰
//│ 					in let y2⁴ = h¹⁴
//│ 					in (fun ok2¹¹ -> (fun t2¹³ -> (fun x⁹ -> (fun y1⁹ -> if (y1⁹ == y2⁴) then [C [P2 x⁹ z⁴] ok2¹¹(t2¹³)] else ok2¹¹(t2¹³)))))
//│ 				in (fun ok2¹⁰ -> (fun x⁸ -> (fun y1⁸ -> (fun t¹⁹ -> h2¹¹(ok2¹⁰, t2¹², x⁸, y1⁸))))))) else (fun h¹⁵ -> (fun t²⁰ -> (fun ok2¹² -> (fun x¹⁰ -> (fun y1¹⁰ -> (fun t²¹ -> ok1_₁(t²¹)))))))
//│ 	def ok1_₁(ls1³) = 
//│ 		case ls1³ of {
//│ 			C h² t² => case h² of {
//│ 				P2 x¹ y1¹ => 
//│ 					let ok2³ = (fun ls2³ -> ls2³(ok2³, x¹, y1¹, t²))
//│ 					in ok2³(zip_₀(fromTo_₄(x¹, (x¹ + 2)), fromTo_₅(y1¹, (y1¹ + 1))))
//│ 				| _  => ok1_₁(t²)}
//│ 			| N  => [N]}
//│ 		where
//│ 		def fromTo_₄(a⁷, b⁷) = 
//│ 			if (a⁷ < (b⁷ + 1)) then 
//│ 				let t⁷ = fromTo_₄((a⁷ + 1), b⁷)
//│ 				in let h⁷ = a⁷
//│ 				in (fun ys⁵ -> ys⁵(h⁷, t⁷)) else (fun ys⁶ -> (fun ok2⁴ -> (fun x³ -> (fun y1³ -> (fun t⁸ -> ok1_₁(t⁸))))))
//│ 		def fromTo_₅(a¹¹, b¹¹) = 
//│ 			if (a¹¹ < (b¹¹ + 1)) then 
//│ 				let t2⁸ = fromTo_₅((a¹¹ + 1), b¹¹)
//│ 				in let h2⁸ = a¹¹
//│ 				in (fun h¹² -> (fun t¹⁴ -> 
//│ 					let t2⁹ = zip_₀(t¹⁴, t2⁸)
//│ 					in let h2⁹ = 	
//│ 						let z³ = h2⁸
//│ 						in let y2³ = h¹²
//│ 						in (fun ok2⁸ -> (fun t2¹⁰ -> (fun x⁶ -> (fun y1⁶ -> if (y1⁶ == y2³) then [C [P2 x⁶ z³] ok2⁸(t2¹⁰)] else ok2⁸(t2¹⁰)))))
//│ 					in (fun ok2⁷ -> (fun x⁵ -> (fun y1⁵ -> (fun t¹⁵ -> h2⁹(ok2⁷, t2⁹, x⁵, y1⁵))))))) else (fun h¹³ -> (fun t¹⁶ -> (fun ok2⁹ -> (fun x⁷ -> (fun y1⁷ -> (fun t¹⁷ -> ok1_₁(t¹⁷)))))))
//│ 		def zip_₀(xs⁶, ys¹⁰) = 
//│ 			xs⁶(ys¹⁰)
//│ 	def zip_₁(xs⁴, ys⁴) = 
//│ 		xs⁴(ys⁴)
//│ def zip_₂(xs⁵, ys⁹) = 
//│ 	xs⁵(ys⁹)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C [P2 1 3] [C [P2 2 4] [C [P2 3 5] [N]]]]
//│ <<<<<<< evaluate <<<<<<<


// NOTE: what if we lift the inner mutual recursive lambdas out?
// [(x, y) | x <- [1..2], y <- [3..4]]
_LUMBERHACK_EVAL
fun go1(ls1, ls2) = if ls1 is
  C(h1, t1) then go2(ls2, h1, t1)
  N then N
fun go2(ls2, h1, t1) = if ls2 is
  C(h2, t2) then C(P2(h1, h2), go2(t2, h1, t1))
  N then go1(t1, ls2)
go1(C(1, C(2, N)), C(3, C(4, N)))
//│ |_LUMBERHACK_EVAL|↵|#fun| |go1|(|ls1|,| |ls2|)| |#=| |#if| |ls1| |is|→|C|(|h1|,| |t1|)| |#then| |go2|(|ls2|,| |h1|,| |t1|)|↵|N| |#then| |N|←|↵|#fun| |go2|(|ls2|,| |h1|,| |t1|)| |#=| |#if| |ls2| |is|→|C|(|h2|,| |t2|)| |#then| |C|(|P2|(|h1|,| |h2|)|,| |go2|(|t2|,| |h1|,| |t1|)|)|↵|N| |#then| |go1|(|t1|,| |ls2|)|←|↵|go1|(|C|(|1|,| |C|(|2|,| |N|)|)|,| |C|(|3|,| |C|(|4|,| |N|)|)|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun go1 = ls1, ls2, => if ls1 is ‹(C (h1, t1,)) then go2 (ls2, h1, t1,); (N) then N›; fun go2 = ls2, h1, t1, => if ls2 is ‹(C (h2, t2,)) then C (P2 (h1, h2,), go2 (t2, h1, t1,),); (N) then go1 (t1, ls2,)›; go1 (C (1, C (2, N,),), C (3, C (4, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ go1^34([C 1 [C 2 [N]]], [C 3 [C 4 [N]]])
//│ def go1(ls1⁰, ls2⁰) = case ls1⁰ of {
//│ 	C h1⁰ t1⁰ => go2^2(ls2⁰, h1⁰, t1⁰)
//│ 	| N  => [N]}
//│ def go2(ls2¹, h1¹, t1¹) = case ls2¹ of {
//│ 	C h2⁰ t2⁰ => [C [P2 h1¹ h2⁰] go2^17(t2⁰, h1¹, t1¹)]
//│ 	| N  => go1^25(t1¹, ls2¹)}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [C [P2 1 3] [C [P2 1 4] [N]]]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [go1^34]
//│ 	[go1^34 · go2^2]
//│ 		[go1^34 · go2^2 · go1^25] ---> [go1^34] (only one)
//│ 		[go1^34 · go2^2 · go2^17] ---> [go1^34 · go2^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ go1_₀([C 1 [C 2 [N]]], [C 3 [C 4 [N]]])
//│ def go1_₀(ls1¹, ls2³) = 
//│ 	case ls1¹ of {
//│ 		C h1³ t1³ => go2_₀(ls2³, h1³, t1³)
//│ 		| N  => [N]}
//│ 	where
//│ 	def go2_₀(ls2², h1², t1²) = 
//│ 		case ls2² of {
//│ 			C h2¹ t2¹ => [C [P2 h1² h2¹] go2_₀(t2¹, h1², t1²)]
//│ 			| N  => go1_₀(t1², ls2²)}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 83 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2_₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [C 2 [N]]: 84 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2_₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [C 1 [C 2 [N]]]: 85 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2_₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [N]: 89 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2_₀(t2¹, h1², t1²)] | N  => go1_₀(t1², ls2²)}: 64
//│ [C 4 [N]]: 90 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2_₀(t2¹, h1², t1²)] | N  => go1_₀(t1², ls2²)}: 64
//│ [C 3 [C 4 [N]]]: 91 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2_₀(t2¹, h1², t1²)] | N  => go1_₀(t1², ls2²)}: 64
//│ ------------------
//│ case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2_₀(t2¹, h1², t1²)] | N  => go1_₀(t1², ls2²)}: 64 --->
//│ 	[N]: 89
//│ 	[C 4 [N]]: 90
//│ 	[C 3 [C 4 [N]]]: 91
//│ case ls1¹ of {C h1³ t1³ => go2_₀(ls2³, h1³, t1³) | N  => [N]}: 77 --->
//│ 	[N]: 83
//│ 	[C 2 [N]]: 84
//│ 	[C 1 [C 2 [N]]]: 85
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 83 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2_₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [C 2 [N]]: 84 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2_₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [C 1 [C 2 [N]]]: 85 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2_₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [N]: 89 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2_₀(t2¹, h1², t1²)] | N  => go1_₀(t1², ls2²)}: 64
//│ [C 4 [N]]: 90 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2_₀(t2¹, h1², t1²)] | N  => go1_₀(t1², ls2²)}: 64
//│ [C 3 [C 4 [N]]]: 91 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2_₀(t2¹, h1², t1²)] | N  => go1_₀(t1², ls2²)}: 64
//│ ------------------
//│ case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2_₀(t2¹, h1², t1²)] | N  => go1_₀(t1², ls2²)}: 64 --->
//│ 	[N]: 89
//│ 	[C 4 [N]]: 90
//│ 	[C 3 [C 4 [N]]]: 91
//│ case ls1¹ of {C h1³ t1³ => go2_₀(ls2³, h1³, t1³) | N  => [N]}: 77 --->
//│ 	[N]: 83
//│ 	[C 2 [N]]: 84
//│ 	[C 1 [C 2 [N]]]: 85
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ go1_₀(
//│ 	let t1⁴ = 	
//│ 		let t1⁵ = (fun ls2⁶ -> [N])
//│ 		in let h1⁵ = 2
//│ 		in (fun ls2⁵ -> go2_₀(ls2⁵, h1⁵, t1⁵))
//│ 	in let h1⁴ = 1
//│ 	in (fun ls2⁴ -> go2_₀(ls2⁴, h1⁴, t1⁴)), 
//│ 	let t2² = 	
//│ 		let t2³ = (fun h1⁸ -> (fun t1⁸ -> (fun ls2⁹ -> go1_₀(t1⁸, ls2⁹))))
//│ 		in let h2³ = 4
//│ 		in (fun h1⁷ -> (fun t1⁷ -> (fun ls2⁸ -> [C [P2 h1⁷ h2³] go2_₀(t2³, h1⁷, t1⁷)])))
//│ 	in let h2² = 3
//│ 	in (fun h1⁶ -> (fun t1⁶ -> (fun ls2⁷ -> [C [P2 h1⁶ h2²] go2_₀(t2², h1⁶, t1⁶)]))))
//│ def go1_₀(ls1², ls2¹¹) = 
//│ 	ls1²(ls2¹¹)
//│ 	where
//│ 	def go2_₀(ls2¹⁰, h1⁹, t1⁹) = 
//│ 		ls2¹⁰(h1⁹, t1⁹, ls2¹⁰)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C [P2 1 3] [C [P2 1 4] [N]]]
//│ <<<<<<< evaluate <<<<<<<


// [(x, y) | x <- [1, 2], y <- [3, 4]]
// NOTE: change `ls2` to `N` and we need two iteration to fully fuse
_LUMBERHACK_EVAL
fun go1(ls1, ls2) = if ls1 is
  C(h1, t1) then go2(ls2, h1, t1)
  N then N
fun go2(ls2, h1, t1) = if ls2 is
  C(h2, t2) then C(P2(h1, h2), go2(t2, h1, t1))
  N then go1(t1, N)
go1(C(1, C(2, N)), C(3, C(4, N)))
//│ |_LUMBERHACK_EVAL|↵|#fun| |go1|(|ls1|,| |ls2|)| |#=| |#if| |ls1| |is|→|C|(|h1|,| |t1|)| |#then| |go2|(|ls2|,| |h1|,| |t1|)|↵|N| |#then| |N|←|↵|#fun| |go2|(|ls2|,| |h1|,| |t1|)| |#=| |#if| |ls2| |is|→|C|(|h2|,| |t2|)| |#then| |C|(|P2|(|h1|,| |h2|)|,| |go2|(|t2|,| |h1|,| |t1|)|)|↵|N| |#then| |go1|(|t1|,| |N|)|←|↵|go1|(|C|(|1|,| |C|(|2|,| |N|)|)|,| |C|(|3|,| |C|(|4|,| |N|)|)|)|
//│ Parsed: {_LUMBERHACK_EVAL; fun go1 = ls1, ls2, => if ls1 is ‹(C (h1, t1,)) then go2 (ls2, h1, t1,); (N) then N›; fun go2 = ls2, h1, t1, => if ls2 is ‹(C (h2, t2,)) then C (P2 (h1, h2,), go2 (t2, h1, t1,),); (N) then go1 (t1, N,)›; go1 (C (1, C (2, N,),), C (3, C (4, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ go1^34([C 1 [C 2 [N]]], [C 3 [C 4 [N]]])
//│ def go1(ls1⁰, ls2⁰) = case ls1⁰ of {
//│ 	C h1⁰ t1⁰ => go2^2(ls2⁰, h1⁰, t1⁰)
//│ 	| N  => [N]}
//│ def go2(ls2¹, h1¹, t1¹) = case ls2¹ of {
//│ 	C h2⁰ t2⁰ => [C [P2 h1¹ h2⁰] go2^17(t2⁰, h1¹, t1¹)]
//│ 	| N  => go1^25(t1¹, [N])}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ [C [P2 1 3] [C [P2 1 4] [N]]]
//│ <<<<<<<<<< Original Eval Res <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [go1^34]
//│ 	[go1^34 · go2^2]
//│ 		[go1^34 · go2^2 · go1^25] ---> [go1^34] (only one)
//│ 		[go1^34 · go2^2 · go2^17] ---> [go1^34 · go2^2] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ go1_₀([C 1 [C 2 [N]]], [C 3 [C 4 [N]]])
//│ def go1_₀(ls1¹, ls2³) = 
//│ 	case ls1¹ of {
//│ 		C h1³ t1³ => go2_₀(ls2³, h1³, t1³)
//│ 		| N  => [N]}
//│ 	where
//│ 	def go2_₀(ls2², h1², t1²) = 
//│ 		case ls2² of {
//│ 			C h2¹ t2¹ => [C [P2 h1² h2¹] go2_₀(t2¹, h1², t1²)]
//│ 			| N  => go1_₀(t1², [N])}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 62 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2_₀(t2¹, h1², t1²)] | N  => go1_₀(t1², [N])}: 64
//│ [N]: 83 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2_₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [C 2 [N]]: 84 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2_₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [C 1 [C 2 [N]]]: 85 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2_₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [N]: 89 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2_₀(t2¹, h1², t1²)] | N  => go1_₀(t1², [N])}: 64
//│ [C 4 [N]]: 90 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2_₀(t2¹, h1², t1²)] | N  => go1_₀(t1², [N])}: 64
//│ [C 3 [C 4 [N]]]: 91 --->
//│ 	case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2_₀(t2¹, h1², t1²)] | N  => go1_₀(t1², [N])}: 64
//│ ------------------
//│ case ls2² of {C h2¹ t2¹ => [C [P2 h1² h2¹] go2_₀(t2¹, h1², t1²)] | N  => go1_₀(t1², [N])}: 64 --->
//│ 	[N]: 62
//│ 	[N]: 89
//│ 	[C 4 [N]]: 90
//│ 	[C 3 [C 4 [N]]]: 91
//│ case ls1¹ of {C h1³ t1³ => go2_₀(ls2³, h1³, t1³) | N  => [N]}: 77 --->
//│ 	[N]: 83
//│ 	[C 2 [N]]: 84
//│ 	[C 1 [C 2 [N]]]: 85
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 83 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2_₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [C 2 [N]]: 84 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2_₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ [C 1 [C 2 [N]]]: 85 --->
//│ 	case ls1¹ of {C h1³ t1³ => go2_₀(ls2³, h1³, t1³) | N  => [N]}: 77
//│ ------------------
//│ case ls1¹ of {C h1³ t1³ => go2_₀(ls2³, h1³, t1³) | N  => [N]}: 77 --->
//│ 	[N]: 83
//│ 	[C 2 [N]]: 84
//│ 	[C 1 [C 2 [N]]]: 85
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ go1_₀(
//│ 	let t1⁴ = 	
//│ 		let t1⁵ = (fun ls2⁶ -> [N])
//│ 		in let h1⁵ = 2
//│ 		in (fun ls2⁵ -> go2_₀(ls2⁵, h1⁵, t1⁵))
//│ 	in let h1⁴ = 1
//│ 	in (fun ls2⁴ -> go2_₀(ls2⁴, h1⁴, t1⁴)), [C 3 [C 4 [N]]])
//│ def go1_₀(ls1², ls2⁸) = 
//│ 	ls1²(ls2⁸)
//│ 	where
//│ 	def go2_₀(ls2⁷, h1⁶, t1⁶) = 
//│ 		case ls2⁷ of {
//│ 			C h2¹ t2¹ => [C [P2 h1⁶ h2¹] go2_₀(t2¹, h1⁶, t1⁶)]
//│ 			| N  => go1_₀(t1⁶, [N])}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C [P2 1 3] [C [P2 1 4] [N]]]
//│ <<<<<<< evaluate <<<<<<<
//│ 
//│ ~~~~~~~~~~~~~~~~~~~~~~~ NEXT ITERATION ~~~~~~~~~~~~~~~~~~~~~~~
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [go1_₀^1] (hopeless to continue)
//│ [go2_₀^16]
//│ 	[go2_₀^16 · go1_₀^45] (hopeless to continue)
//│ 	[go2_₀^16 · go2_₀^37] ---> [go2_₀^16] (only one)
//│ [go2_₀^5] (hopeless to continue)
//│ 	[go2_₀^5 · go1_₀^45] (using original def)
//│ 	[go2_₀^5 · go2_₀^37] ---> [go2_₀^5] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ go1_₀_₀(
//│ 	let t1⁵ = 	
//│ 		let t1⁶ = (fun ls2¹⁰ -> [N])
//│ 		in let h1⁵ = 2
//│ 		in (fun ls2¹¹ -> go2_₀_₁(ls2¹¹, h1⁵, t1⁶))
//│ 	in let h1⁶ = 1
//│ 	in (fun ls2¹² -> go2_₀_₀(ls2¹², h1⁶, t1⁵)), [C 3 [C 4 [N]]])
//│ def go1_₀_₀(ls1¹, ls2⁶) = 
//│ 	ls1¹(ls2⁶)
//│ def go2_₀_₀(ls2⁹, h1⁴, t1⁴) = 
//│ 	case ls2⁹ of {
//│ 		C h2² t2² => [C [P2 h1⁴ h2²] go2_₀_₀(t2², h1⁴, t1⁴)]
//│ 		| N  => go1_₀_₁(t1⁴, [N])}
//│ 	where
//│ 	def go1_₀_₁(ls1³, ls2⁸) = 
//│ 		ls1³(ls2⁸)
//│ def go2_₀_₁(ls2⁵, h1³, t1³) = 
//│ 	case ls2⁵ of {
//│ 		C h2¹ t2¹ => [C [P2 h1³ h2¹] go2_₀_₁(t2¹, h1³, t1³)]
//│ 		| N  => go1_₀_₂(t1³, [N])}
//│ 	where
//│ 	def go1_₀_₂(ls1², ls2⁷) = 
//│ 		ls1²(ls2⁷)
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 110 --->
//│ 	case ls2⁵ of {C h2¹ t2¹ => [C [P2 h1³ h2¹] go2_₀_₁(t2¹, h1³, t1³)] | N  => go1_₀_₂(t1³, [N])}: 76
//│ [N]: 144 --->
//│ 	case ls2⁹ of {C h2² t2² => [C [P2 h1⁴ h2²] go2_₀_₀(t2², h1⁴, t1⁴)] | N  => go1_₀_₁(t1⁴, [N])}: 112
//│ [C 4 [N]]: 145 --->
//│ 	case ls2⁹ of {C h2² t2² => [C [P2 h1⁴ h2²] go2_₀_₀(t2², h1⁴, t1⁴)] | N  => go1_₀_₁(t1⁴, [N])}: 112
//│ [C 3 [C 4 [N]]]: 146 --->
//│ 	case ls2⁹ of {C h2² t2² => [C [P2 h1⁴ h2²] go2_₀_₀(t2², h1⁴, t1⁴)] | N  => go1_₀_₁(t1⁴, [N])}: 112
//│ ------------------
//│ case ls2⁵ of {C h2¹ t2¹ => [C [P2 h1³ h2¹] go2_₀_₁(t2¹, h1³, t1³)] | N  => go1_₀_₂(t1³, [N])}: 76 --->
//│ 	DeadCodeProd
//│ 	[N]: 110
//│ case ls2⁹ of {C h2² t2² => [C [P2 h1⁴ h2²] go2_₀_₀(t2², h1⁴, t1⁴)] | N  => go1_₀_₁(t1⁴, [N])}: 112 --->
//│ 	[N]: 144
//│ 	[C 4 [N]]: 145
//│ 	[C 3 [C 4 [N]]]: 146
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 144 --->
//│ 	case ls2⁹ of {C h2² t2² => [C [P2 h1⁴ h2²] go2_₀_₀(t2², h1⁴, t1⁴)] | N  => go1_₀_₁(t1⁴, [N])}: 112
//│ [C 4 [N]]: 145 --->
//│ 	case ls2⁹ of {C h2² t2² => [C [P2 h1⁴ h2²] go2_₀_₀(t2², h1⁴, t1⁴)] | N  => go1_₀_₁(t1⁴, [N])}: 112
//│ [C 3 [C 4 [N]]]: 146 --->
//│ 	case ls2⁹ of {C h2² t2² => [C [P2 h1⁴ h2²] go2_₀_₀(t2², h1⁴, t1⁴)] | N  => go1_₀_₁(t1⁴, [N])}: 112
//│ ------------------
//│ case ls2⁹ of {C h2² t2² => [C [P2 h1⁴ h2²] go2_₀_₀(t2², h1⁴, t1⁴)] | N  => go1_₀_₁(t1⁴, [N])}: 112 --->
//│ 	[N]: 144
//│ 	[C 4 [N]]: 145
//│ 	[C 3 [C 4 [N]]]: 146
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ go1_₀_₀(
//│ 	let t1⁷ = 	
//│ 		let t1⁸ = (fun ls2¹³ -> [N])
//│ 		in let h1⁷ = 2
//│ 		in (fun ls2¹⁴ -> go2_₀_₁(ls2¹⁴, h1⁷, t1⁸))
//│ 	in let h1⁸ = 1
//│ 	in (fun ls2¹⁵ -> go2_₀_₀(ls2¹⁵, h1⁸, t1⁷)), 
//│ 	let t2³ = 	
//│ 		let t2⁴ = (fun h1¹¹ -> (fun t1¹¹ -> go1_₀_₁(t1¹¹, [N])))
//│ 		in let h2⁴ = 4
//│ 		in (fun h1¹⁰ -> (fun t1¹⁰ -> [C [P2 h1¹⁰ h2⁴] go2_₀_₀(t2⁴, h1¹⁰, t1¹⁰)]))
//│ 	in let h2³ = 3
//│ 	in (fun h1⁹ -> (fun t1⁹ -> [C [P2 h1⁹ h2³] go2_₀_₀(t2³, h1⁹, t1⁹)])))
//│ def go1_₀_₀(ls1⁶, ls2¹⁹) = 
//│ 	ls1⁶(ls2¹⁹)
//│ def go2_₀_₀(ls2²⁰, h1¹³, t1¹³) = 
//│ 	ls2²⁰(h1¹³, t1¹³)
//│ 	where
//│ 	def go1_₀_₁(ls1⁵, ls2¹⁸) = 
//│ 		ls1⁵(ls2¹⁸)
//│ def go2_₀_₁(ls2¹⁶, h1¹², t1¹²) = 
//│ 	case ls2¹⁶ of {
//│ 		C h2¹ t2¹ => [C [P2 h1¹² h2¹] go2_₀_₁(t2¹, h1¹², t1¹²)]
//│ 		| N  => go1_₀_₂(t1¹², [N])}
//│ 	where
//│ 	def go1_₀_₂(ls1⁴, ls2¹⁷) = 
//│ 		ls1⁴(ls2¹⁷)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> evaluate >>>>>>>
//│ [C [P2 1 3] [C [P2 1 4] [N]]]
//│ <<<<<<< evaluate <<<<<<<
