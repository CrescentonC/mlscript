:NewParser
:ParseOnly

let rec p = C(p)
fun c(x) = if x is
    C(a) then c(a)
c(p)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|c|(|p|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then c (a,)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^9 p^10)
//│ def c = (fun x:13 -> case x:13 of {
//│ 	C a:14 => (c^4 a:14)})
//│ def p = [C p^1]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^9]
//│ 	[c^9 · c^4] ---> [c^9] (only one)
//│ [p^10]
//│ 	[p^10 · p^1] ---> [p^10] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C p₀] --->
//│ 	case x of {C a => (c₀ a)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c₀ p₀)
//│ def c₀ = 
//│ 	(fun x -> x)
//│ def p₀ = 
//│ 	let a = p₀
//│ 	in (c₀ a)
//│ <<<<<<< after fusion <<<<<<<



let p = C(1, C(2, N))
fun e(z) = if z is
    C(aaa, bbb) then bbb
    N then 7
fun d(y) = if y is
    C(aa, bb) then e(bb)
    N then 5
fun c(x) = if x is
    C(a, b) then d(b)
    N then 3
c(p)
//│ |#let| |p| |#=| |C|(|1|,| |C|(|2|,| |N|)|)|↵|#fun| |e|(|z|)| |#=| |#if| |z| |is|→|C|(|aaa|,| |bbb|)| |#then| |bbb|↵|N| |#then| |7|←|↵|#fun| |d|(|y|)| |#=| |#if| |y| |is|→|C|(|aa|,| |bb|)| |#then| |e|(|bb|)|↵|N| |#then| |5|←|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|,| |b|)| |#then| |d|(|b|)|↵|N| |#then| |3|←|↵|c|(|p|)|
//│ Parsed: {let p = C (1, C (2, N,),); fun e = z, => if z is ‹(C (aaa, bbb,)) then bbb; (N) then 7›; fun d = y, => if y is ‹(C (aa, bb,)) then e (bb,); (N) then 5›; fun c = x, => if x is ‹(C (a, b,)) then d (b,); (N) then 3›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^25 p^26)
//│ def c = (fun x:21 -> case x:21 of {
//│ 	C a:22 b:23 => (d^19 b:23)
//│ 	| N => 3})
//│ def d = (fun y:18 -> case y:18 of {
//│ 	C aa:19 bb:20 => (e^12 bb:20)
//│ 	| N => 5})
//│ def e = (fun z:15 -> case z:15 of {
//│ 	C aaa:16 bbb:17 => bbb:17
//│ 	| N => 7})
//│ def p = [C 1 [C 2 [N]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^25] (hopeless to continue)
//│ 	[c^25 · d^19] (using original def)
//│ 		[c^25 · d^19 · e^12] (using original def)
//│ [p^26] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N] --->
//│ 	case z of {C aaa bbb => bbb | N => 7}
//│ [C 2 [N]] --->
//│ 	case y of {C aa bb => (e₀ bb) | N => 5}
//│ [C 1 [C 2 [N]]] --->
//│ 	case x of {C a b => (d₀ b) | N => 3}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c₀ p₀)
//│ def c₀ = 
//│ 	(fun x -> x)
//│ 	where
//│ 	def d₀ = 
//│ 		(fun y -> y)
//│ 		where
//│ 		def e₀ = 
//│ 			(fun z -> z)
//│ def p₀ = 
//│ 	let a = 1
//│ 	in let b = 	
//│ 		let aa = 2
//│ 		in let bb = 7
//│ 		in (e₀ bb)
//│ 	in (d₀ b)
//│ <<<<<<< after fusion <<<<<<<


let rec p = C(C(p))
fun c(x) = if x is
    C(a) then if a is
        C(b) then if b is
            C(y) then c(y)
c(p)
//│ |#let| |#rec| |p| |#=| |C|(|C|(|p|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|b|)| |#then| |#if| |b| |is|→|C|(|y|)| |#then| |c|(|y|)|←|←|←|↵|c|(|p|)|
//│ Parsed: {let rec p = C (C (p,),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (b,)) then if b is ‹(C (y,)) then c (y,)›››; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^14 p^15)
//│ def c = (fun x:13 -> case x:13 of {
//│ 	C a:14 => case a:14 of {
//│ 		C b:15 => case b:15 of {
//│ 			C y:16 => (c^7 y:16)}}})
//│ def p = [C [C p^1]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^14]
//│ 	[c^14 · c^7]
//│ 		[c^14 · c^7 · c^7] ---> [c^14] (only one)
//│ [p^15]
//│ 	[p^15 · p^1]
//│ 		[p^15 · p^1 · p^1]
//│ 			[p^15 · p^1 · p^1 · p^1] ---> [p^15] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C p₁] --->
//│ 	case a of {C b => case b of {C y => (c₁ y)}}
//│ [C [C p₁]] --->
//│ 	case x of {C a => case a of {C b => case b of {C y => (c₁ y)}}}
//│ [C p₂] --->
//│ 	case x of {C a => case a of {C b => case b of {C y => (c₀ y)}}}
//│ [C [C p₂]] --->
//│ 	case b of {C y => (c₁ y)}
//│ [C p₀] --->
//│ 	case b of {C y => (c₀ y)}
//│ [C [C p₀]] --->
//│ 	case a of {C b => case b of {C y => (c₀ y)}}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c₀ p₀)
//│ def c₀ = 
//│ 	(fun x -> x)
//│ 	where
//│ 	def c₁ = 
//│ 		(fun x -> x)
//│ def p₀ = 
//│ 	let a = 	
//│ 		let b = p₁
//│ 		in b
//│ 	in a
//│ 	where
//│ 	def p₁ = 
//│ 		let y = 	
//│ 			let a = p₂
//│ 			in a
//│ 		in (c₁ y)
//│ 		where
//│ 		def p₂ = 
//│ 			let b = 	
//│ 				let y = p₀
//│ 				in (c₀ y)
//│ 			in b
//│ <<<<<<< after fusion <<<<<<<




let rec p = C(C(p))
fun c(x) = if x is
    C(a) then c(a)
fun id2(yy) = yy
fun id(y) = id2(y)
c(id(p))
//│ |#let| |#rec| |p| |#=| |C|(|C|(|p|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |id2|(|yy|)| |#=| |yy|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|c|(|id|(|p|)|)|
//│ Parsed: {let rec p = C (C (p,),); fun c = x, => if x is ‹(C (a,)) then c (a,)›; fun id2 = yy, => yy; fun id = y, => id2 (y,); c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^16 (id^17 p^18))
//│ def c = (fun x:15 -> case x:15 of {
//│ 	C a:16 => (c^5 a:16)})
//│ def id = (fun y:18 -> (id2^12 y:18))
//│ def id2 = (fun yy:17 -> yy:17)
//│ def p = [C [C p^1]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^16]
//│ 	[c^16 · c^5]
//│ 		[c^16 · c^5 · c^5] ---> [c^16] (only one)
//│ [id^17] (hopeless to continue)
//│ 	[id^17 · id2^12] (using original def)
//│ [p^18]
//│ 	[p^18 · p^1] ---> [p^18] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C p₀] --->
//│ 	case x of {C a => (c₀ a)}
//│ [C [C p₀]] --->
//│ 	case x of {C a => (c₁ a)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c₀ (id₀ p₀))
//│ def c₀ = 
//│ 	(fun x -> x)
//│ 	where
//│ 	def c₁ = 
//│ 		(fun x -> x)
//│ def id₀ = 
//│ 	(fun y -> (id2₀ y))
//│ 	where
//│ 	def id2₀ = 
//│ 		(fun yy -> yy)
//│ def p₀ = 
//│ 	let a = 	
//│ 		let a = p₀
//│ 		in (c₀ a)
//│ 	in (c₁ a)
//│ <<<<<<< after fusion <<<<<<<

fun sum(ls) = if ls is
    C(h, t) then S(N, sum(t))
fun mapa(lsa) = if lsa is
    C(ha, ta) then C(primitive(ha), mapa(ta))
fun mapb(lsb) = if lsb is
    C(hb, tb) then C(primitive(hb), mapb(tb))
sum(mapa(mapb(primitive)))
//│ |#fun| |sum|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |S|(|N|,| |sum|(|t|)|)|←|↵|#fun| |mapa|(|lsa|)| |#=| |#if| |lsa| |is|→|C|(|ha|,| |ta|)| |#then| |C|(|primitive|(|ha|)|,| |mapa|(|ta|)|)|←|↵|#fun| |mapb|(|lsb|)| |#=| |#if| |lsb| |is|→|C|(|hb|,| |tb|)| |#then| |C|(|primitive|(|hb|)|,| |mapb|(|tb|)|)|←|↵|sum|(|mapa|(|mapb|(|primitive|)|)|)|
//│ Parsed: {fun sum = ls, => if ls is ‹(C (h, t,)) then S (N, sum (t,),)›; fun mapa = lsa, => if lsa is ‹(C (ha, ta,)) then C (primitive (ha,), mapa (ta,),)›; fun mapb = lsb, => if lsb is ‹(C (hb, tb,)) then C (primitive (hb,), mapb (tb,),)›; sum (mapa (mapb (primitive,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (sum^29 (mapa^30 (mapb^31 primitive:4)))
//│ def mapa = (fun lsa:17 -> case lsa:17 of {
//│ 	C ha:18 ta:19 => [C (primitive:4 ha:18) (mapa^13 ta:19)]})
//│ def mapb = (fun lsb:20 -> case lsb:20 of {
//│ 	C hb:21 tb:22 => [C (primitive:4 hb:21) (mapb^23 tb:22)]})
//│ def sum = (fun ls:14 -> case ls:14 of {
//│ 	C h:15 t:16 => [S [N] (sum^3 t:16)]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [mapa^30]
//│ 	[mapa^30 · mapa^13]
//│ 		[mapa^30 · mapa^13 · mapa^13] ---> [mapa^30 · mapa^13] (only one)
//│ [mapb^31]
//│ 	[mapb^31 · mapb^23]
//│ 		[mapb^31 · mapb^23 · mapb^23] ---> [mapb^31 · mapb^23] (only one)
//│ [sum^29]
//│ 	[sum^29 · sum^3]
//│ 		[sum^29 · sum^3 · sum^3] ---> [sum^29 · sum^3] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C (primitive ha) (mapa₁ ta)] --->
//│ 	case ls of {C h t => [S [N] (sum₁ t)]}
//│ [C (primitive ha) (mapa₁ ta)] --->
//│ 	case ls of {C h t => [S [N] (sum₁ t)]}
//│ [C (primitive hb) (mapb₁ tb)] --->
//│ 	case lsa of {C ha ta => [C (primitive ha) (mapa₁ ta)]}
//│ [C (primitive hb) (mapb₁ tb)] --->
//│ 	case lsa of {C ha ta => [C (primitive ha) (mapa₁ ta)]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (sum₀ (mapa₀ (mapb₀ primitive)))
//│ def mapa₀ = 
//│ 	(fun lsa -> lsa)
//│ 	where
//│ 	def mapa₁ = 
//│ 		(fun lsa -> lsa)
//│ def mapb₀ = 
//│ 	(fun lsb -> case lsb of {
//│ 		C hb tb => 
//│ 			let ha = (primitive hb)
//│ 			in let ta = (mapb₁ tb)
//│ 			in let h = (primitive ha)
//│ 			in let t = (mapa₁ ta)
//│ 			in [S [N] (sum₁ t)]})
//│ 	where
//│ 	def mapb₁ = 
//│ 		(fun lsb -> case lsb of {
//│ 			C hb tb => 
//│ 				let ha = (primitive hb)
//│ 				in let ta = (mapb₁ tb)
//│ 				in let h = (primitive ha)
//│ 				in let t = (mapa₁ ta)
//│ 				in [S [N] (sum₁ t)]})
//│ def sum₀ = 
//│ 	(fun ls -> ls)
//│ 	where
//│ 	def sum₁ = 
//│ 		(fun ls -> ls)
//│ <<<<<<< after fusion <<<<<<<


if C(A, B(C)) is
    C(a, b) then D(b)
//│ |#if| |C|(|A|,| |B|(|C|)|)| |is|→|C|(|a|,| |b|)| |#then| |D|(|b|)|←|
//│ Parsed: {if C (A, B (C,),) is ‹(C (a, b,)) then D (b,)›}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ case [C [A] [B [C]]] of {
//│ 	C a:11 b:12 => [D b:12]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C [A] [B [C]]] --->
//│ 	case [C [A] [B [C]]] of {C a b => [D b]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ 
//│ 	let a = [A]
//│ 	in let b = [B [C]]
//│ 	in [D b]
//│ 
//│ <<<<<<< after fusion <<<<<<<
//│



let rec p = C(C(C(p)))
fun ca(x) = if x is
    C(a) then cb(a)
fun cb(x) = if x is
    C(b) then ca(b)
ca(p)
//│ |#let| |#rec| |p| |#=| |C|(|C|(|C|(|p|)|)|)|↵|#fun| |ca|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |cb|(|a|)|←|↵|#fun| |cb|(|x|)| |#=| |#if| |x| |is|→|C|(|b|)| |#then| |ca|(|b|)|←|↵|ca|(|p|)|
//│ Parsed: {let rec p = C (C (C (p,),),); fun ca = x, => if x is ‹(C (a,)) then cb (a,)›; fun cb = x, => if x is ‹(C (b,)) then ca (b,)›; ca (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (ca^17 p^18)
//│ def ca = (fun x:14 -> case x:14 of {
//│ 	C a:15 => (cb^6 a:15)})
//│ def cb = (fun x:16 -> case x:16 of {
//│ 	C b:17 => (ca^12 b:17)})
//│ def p = [C [C [C p^1]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [ca^17]
//│ 	[ca^17 · cb^6]
//│ 		[ca^17 · cb^6 · ca^12]
//│ 			[ca^17 · cb^6 · ca^12 · cb^6]
//│ 				[ca^17 · cb^6 · ca^12 · cb^6 · ca^12]
//│ 					[ca^17 · cb^6 · ca^12 · cb^6 · ca^12 · cb^6]
//│ 						[ca^17 · cb^6 · ca^12 · cb^6 · ca^12 · cb^6 · ca^12] ---> [ca^17] (only one)
//│ [p^18]
//│ 	[p^18 · p^1]
//│ 		[p^18 · p^1 · p^1] ---> [p^18] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C p₀] --->
//│ 	case x of {C b => (ca₀ b)}
//│ [C [C p₀]] --->
//│ 	case x of {C a => (cb₂ a)}
//│ [C [C [C p₀]]] --->
//│ 	case x of {C b => (ca₂ b)}
//│ [C p₁] --->
//│ 	case x of {C a => (cb₁ a)}
//│ [C [C p₁]] --->
//│ 	case x of {C b => (ca₁ b)}
//│ [C [C [C p₁]]] --->
//│ 	case x of {C a => (cb₀ a)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (ca₀ p₀)
//│ def ca₀ = 
//│ 	(fun x -> x)
//│ 	where
//│ 	def cb₀ = 
//│ 		(fun x -> x)
//│ 		where
//│ 		def ca₁ = 
//│ 			(fun x -> x)
//│ 			where
//│ 			def cb₁ = 
//│ 				(fun x -> x)
//│ 				where
//│ 				def ca₂ = 
//│ 					(fun x -> x)
//│ 					where
//│ 					def cb₂ = 
//│ 						(fun x -> x)
//│ def p₀ = 
//│ 	let a = 	
//│ 		let b = 	
//│ 			let a = p₁
//│ 			in (cb₁ a)
//│ 		in (ca₁ b)
//│ 	in (cb₀ a)
//│ 	where
//│ 	def p₁ = 
//│ 		let b = 	
//│ 			let a = 	
//│ 				let b = p₀
//│ 				in (ca₀ b)
//│ 			in (cb₂ a)
//│ 		in (ca₂ b)
//│ <<<<<<< after fusion <<<<<<<


// def p:6^18 =
//      ... p:6^1 ~> p:6^18.p:6^1 ...

// def p:6^18.p:6^1 =
//      ... p:6^1 ~> p:6^18 ...

// def ca:7^17
//      ... 



fun c1(x1) = if x1 is
    C(a) then c2(a)
fun c2(x2) = if x2 is
    C(b) then c1(b)
let p1 = C(C(C(p2)))
let p2 = C(p1)
c1(p1)
//│ |#fun| |c1|(|x1|)| |#=| |#if| |x1| |is|→|C|(|a|)| |#then| |c2|(|a|)|←|↵|#fun| |c2|(|x2|)| |#=| |#if| |x2| |is|→|C|(|b|)| |#then| |c1|(|b|)|←|↵|#let| |p1| |#=| |C|(|C|(|C|(|p2|)|)|)|↵|#let| |p2| |#=| |C|(|p1|)|↵|c1|(|p1|)|
//│ Parsed: {fun c1 = x1, => if x1 is ‹(C (a,)) then c2 (a,)›; fun c2 = x2, => if x2 is ‹(C (b,)) then c1 (b,)›; let p1 = C (C (C (p2,),),); let p2 = C (p1,); c1 (p1,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c1^19 p1^20)
//│ def c1 = (fun x1:15 -> case x1:15 of {
//│ 	C a:16 => (c2^2 a:16)})
//│ def c2 = (fun x2:17 -> case x2:17 of {
//│ 	C b:18 => (c1^8 b:18)})
//│ def p1 = [C [C [C p2^13]]]
//│ def p2 = [C p1^17]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c1^19]
//│ 	[c1^19 · c2^2]
//│ 		[c1^19 · c2^2 · c1^8]
//│ 			[c1^19 · c2^2 · c1^8 · c2^2]
//│ 				[c1^19 · c2^2 · c1^8 · c2^2 · c1^8]
//│ 					[c1^19 · c2^2 · c1^8 · c2^2 · c1^8 · c2^2] ---> [c1^19 · c2^2] (only one)
//│ [p1^20]
//│ 	[p1^20 · p2^13]
//│ 		[p1^20 · p2^13 · p1^17] ---> [p1^20] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C p1₀] --->
//│ 	case x2 of {C b => (c1₂ b)}
//│ [C p2₀] --->
//│ 	case x1 of {C a => (c2₁ a)}
//│ [C [C p2₀]] --->
//│ 	case x2 of {C b => (c1₁ b)}
//│ [C [C [C p2₀]]] --->
//│ 	case x1 of {C a => (c2₀ a)}
//│ 	case x1 of {C a => (c2₀ a)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c1₀ p1₀)
//│ def c1₀ = 
//│ 	(fun x1 -> x1)
//│ 	where
//│ 	def c2₀ = 
//│ 		(fun x2 -> x2)
//│ 		where
//│ 		def c1₁ = 
//│ 			(fun x1 -> x1)
//│ 			where
//│ 			def c2₁ = 
//│ 				(fun x2 -> x2)
//│ 				where
//│ 				def c1₂ = 
//│ 					(fun x1 -> case x1 of {
//│ 						C a => (c2₀ a)})
//│ def p1₀ = 
//│ 	let a = 	
//│ 		let b = 	
//│ 			let a = p2₀
//│ 			in (c2₁ a)
//│ 		in (c1₁ b)
//│ 	in (c2₀ a)
//│ 	where
//│ 	def p2₀ = 
//│ 		let b = p1₀
//│ 		in (c1₂ b)
//│ <<<<<<< after fusion <<<<<<<


fun ff(x) = if x is
    K then T
    KK then TT
    KKKK then TTTT
fun map(ls) = if ls is
    C(h, t) then C(ff(h), map(t))
    N then N
let l = C(K, C(KK, C(KKKK, N)))
map(l)
//│ |#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|ff|(|h|)|,| |map|(|t|)|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|l|)|
//│ Parsed: {fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; fun map = ls, => if ls is ‹(C (h, t,)) then C (ff (h,), map (t,),); (N) then N›; let l = C (K, C (KK, C (KKKK, N,),),); map (l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (map^25 l^26)
//│ def ff = (fun x:14 -> case x:14 of {
//│ 	K => [T]
//│ 	| KK => [TT]
//│ 	| KKKK => [TTTT]})
//│ def l = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map = (fun ls:15 -> case ls:15 of {
//│ 	C h:16 t:17 => [C (ff^8 h:16) (map^11 t:17)]
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [l^26]
//│ [map^25]
//│ 	[map^25 · ff^8] (hopeless to continue)
//│ 	[map^25 · map^11]
//│ 		[map^25 · map^11 · ff^8] (hopeless to continue)
//│ 		[map^25 · map^11 · map^11]
//│ 			[map^25 · map^11 · map^11 · ff^8] (hopeless to continue)
//│ 			[map^25 · map^11 · map^11 · map^11]
//│ 				[map^25 · map^11 · map^11 · map^11 · ff^8] (hopeless to continue)
//│ 				[map^25 · map^11 · map^11 · map^11 · map^11] ---> [map^25 · map^11 · map^11 · map^11] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [K] --->
//│ 	case x of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ [KK] --->
//│ 	case x of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ [KKKK] --->
//│ 	case x of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ [N] --->
//│ 	case ls of {C h t => [C (ff₃ h) (map₃ t)] | N => [N]}
//│ [C [KKKK] [N]] --->
//│ 	case ls of {C h t => [C (ff₂ h) (map₃ t)] | N => [N]}
//│ [C [KK] [C [KKKK] [N]]] --->
//│ 	case ls of {C h t => [C (ff₁ h) (map₂ t)] | N => [N]}
//│ [C [K] [C [KK] [C [KKKK] [N]]]] --->
//│ 	case ls of {C h t => [C (ff₀ h) (map₁ t)] | N => [N]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (map₀ l₀)
//│ def l₀ = 
//│ 	let h = [T]
//│ 	in let t = 	
//│ 		let h = [TT]
//│ 		in let t = 	
//│ 			let h = [TTTT]
//│ 			in let t = [N]
//│ 			in [C (ff₂ h) (map₃ t)]
//│ 		in [C (ff₁ h) (map₂ t)]
//│ 	in [C (ff₀ h) (map₁ t)]
//│ def map₀ = 
//│ 	(fun ls -> ls)
//│ 	where
//│ 	def ff₀ = 
//│ 		(fun x -> x)
//│ 	def map₁ = 
//│ 		(fun ls -> ls)
//│ 		where
//│ 		def ff₁ = 
//│ 			(fun x -> x)
//│ 		def map₂ = 
//│ 			(fun ls -> ls)
//│ 			where
//│ 			def ff₂ = 
//│ 				(fun x -> x)
//│ 			def map₃ = 
//│ 				(fun ls -> ls)
//│ 				where
//│ 				def ff₃ = 
//│ 					(fun x -> case x of {
//│ 						K => [T]
//│ 						| KK => [TT]
//│ 						| KKKK => [TTTT]})
//│ <<<<<<< after fusion <<<<<<<


fun map(ls) = if ls is
    C(h, t) then C(
        (if h is
            K then T
            KK then TT
            KKKK then TTTT
        ),
        map(t)
    )
    N then N
let l = C(K, C(KK, C(KKKK, N)))
map(l)
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|→|(|#if| |h| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|)|,|↵|map|(|t|)|←|↵|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|l|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (h, t,)) then C ('(' if h is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›, ')', map (t,),); (N) then N›; let l = C (K, C (KK, C (KKKK, N,),),); map (l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (map^21 l^22)
//│ def l = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map = (fun ls:13 -> case ls:13 of {
//│ 	C h:14 t:15 => [C case h:14 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} (map^7 t:15)]
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [l^22]
//│ [map^21]
//│ 	[map^21 · map^7]
//│ 		[map^21 · map^7 · map^7]
//│ 			[map^21 · map^7 · map^7 · map^7]
//│ 				[map^21 · map^7 · map^7 · map^7 · map^7] ---> [map^21 · map^7 · map^7 · map^7] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [K] --->
//│ 	case h of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ [KK] --->
//│ 	case h of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ [KKKK] --->
//│ 	case h of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ [N] --->
//│ 	case ls of {C h t => [C case h of {K => [T] | KK => [TT] | KKKK => [TTTT]} (map₃ t)] | N => [N]}
//│ [C [KKKK] [N]] --->
//│ 	case ls of {C h t => [C case h of {K => [T] | KK => [TT] | KKKK => [TTTT]} (map₃ t)] | N => [N]}
//│ [C [KK] [C [KKKK] [N]]] --->
//│ 	case ls of {C h t => [C case h of {K => [T] | KK => [TT] | KKKK => [TTTT]} (map₂ t)] | N => [N]}
//│ [C [K] [C [KK] [C [KKKK] [N]]]] --->
//│ 	case ls of {C h t => [C case h of {K => [T] | KK => [TT] | KKKK => [TTTT]} (map₁ t)] | N => [N]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (map₀ l₀)
//│ def l₀ = 
//│ 	let h = [T]
//│ 	in let t = 	
//│ 		let h = [TT]
//│ 		in let t = 	
//│ 			let h = [TTTT]
//│ 			in let t = [N]
//│ 			in [C h (map₃ t)]
//│ 		in [C h (map₂ t)]
//│ 	in [C h (map₁ t)]
//│ def map₀ = 
//│ 	(fun ls -> ls)
//│ 	where
//│ 	def map₁ = 
//│ 		(fun ls -> ls)
//│ 		where
//│ 		def map₂ = 
//│ 			(fun ls -> ls)
//│ 			where
//│ 			def map₃ = 
//│ 				(fun ls -> ls)
//│ <<<<<<< after fusion <<<<<<<


fun sum(ls) = if ls is
    C(h, t) then S(N, sum(t))
    N then N
fun mapa(lsa) = if lsa is
    C(ha, ta) then C(primitive(ha), mapa(ta))
    N then N
fun mapb(lsb) = if lsb is
    C(hb, tb) then C(primitive(hb), mapb(tb))
    N then N
sum(mapa(mapb(primitive)))
//│ |#fun| |sum|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |S|(|N|,| |sum|(|t|)|)|↵|N| |#then| |N|←|↵|#fun| |mapa|(|lsa|)| |#=| |#if| |lsa| |is|→|C|(|ha|,| |ta|)| |#then| |C|(|primitive|(|ha|)|,| |mapa|(|ta|)|)|↵|N| |#then| |N|←|↵|#fun| |mapb|(|lsb|)| |#=| |#if| |lsb| |is|→|C|(|hb|,| |tb|)| |#then| |C|(|primitive|(|hb|)|,| |mapb|(|tb|)|)|↵|N| |#then| |N|←|↵|sum|(|mapa|(|mapb|(|primitive|)|)|)|
//│ Parsed: {fun sum = ls, => if ls is ‹(C (h, t,)) then S (N, sum (t,),); (N) then N›; fun mapa = lsa, => if lsa is ‹(C (ha, ta,)) then C (primitive (ha,), mapa (ta,),); (N) then N›; fun mapb = lsb, => if lsb is ‹(C (hb, tb,)) then C (primitive (hb,), mapb (tb,),); (N) then N›; sum (mapa (mapb (primitive,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (sum^32 (mapa^33 (mapb^34 primitive:4)))
//│ def mapa = (fun lsa:17 -> case lsa:17 of {
//│ 	C ha:18 ta:19 => [C (primitive:4 ha:18) (mapa^14 ta:19)]
//│ 	| N => [N]})
//│ def mapb = (fun lsb:20 -> case lsb:20 of {
//│ 	C hb:21 tb:22 => [C (primitive:4 hb:21) (mapb^25 tb:22)]
//│ 	| N => [N]})
//│ def sum = (fun ls:14 -> case ls:14 of {
//│ 	C h:15 t:16 => [S [N] (sum^3 t:16)]
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [mapa^33]
//│ 	[mapa^33 · mapa^14]
//│ 		[mapa^33 · mapa^14 · mapa^14] ---> [mapa^33 · mapa^14] (only one)
//│ [mapb^34]
//│ 	[mapb^34 · mapb^25]
//│ 		[mapb^34 · mapb^25 · mapb^25] ---> [mapb^34 · mapb^25] (only one)
//│ [sum^32]
//│ 	[sum^32 · sum^3]
//│ 		[sum^32 · sum^3 · sum^3] ---> [sum^32 · sum^3] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C (primitive hb) (mapb₁ tb)] --->
//│ 	case lsa of {C ha ta => [C (primitive ha) (mapa₁ ta)] | N => [N]}
//│ [N] --->
//│ 	case lsa of {C ha ta => [C (primitive ha) (mapa₁ ta)] | N => [N]}
//│ [C (primitive ha) (mapa₁ ta)] --->
//│ 	case ls of {C h t => [S [N] (sum₁ t)] | N => [N]}
//│ [N] --->
//│ 	case ls of {C h t => [S [N] (sum₁ t)] | N => [N]}
//│ [C (primitive hb) (mapb₁ tb)] --->
//│ 	case lsa of {C ha ta => [C (primitive ha) (mapa₁ ta)] | N => [N]}
//│ [N] --->
//│ 	case lsa of {C ha ta => [C (primitive ha) (mapa₁ ta)] | N => [N]}
//│ [C (primitive ha) (mapa₁ ta)] --->
//│ 	case ls of {C h t => [S [N] (sum₁ t)] | N => [N]}
//│ [N] --->
//│ 	case ls of {C h t => [S [N] (sum₁ t)] | N => [N]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (sum₀ (mapa₀ (mapb₀ primitive)))
//│ def mapa₀ = 
//│ 	(fun lsa -> lsa)
//│ 	where
//│ 	def mapa₁ = 
//│ 		(fun lsa -> lsa)
//│ def mapb₀ = 
//│ 	(fun lsb -> case lsb of {
//│ 		C hb tb => 
//│ 			let ha = (primitive hb)
//│ 			in let ta = (mapb₁ tb)
//│ 			in let h = (primitive ha)
//│ 			in let t = (mapa₁ ta)
//│ 			in [S [N] (sum₁ t)]
//│ 		| N => [N]})
//│ 	where
//│ 	def mapb₁ = 
//│ 		(fun lsb -> case lsb of {
//│ 			C hb tb => 
//│ 				let ha = (primitive hb)
//│ 				in let ta = (mapb₁ tb)
//│ 				in let h = (primitive ha)
//│ 				in let t = (mapa₁ ta)
//│ 				in [S [N] (sum₁ t)]
//│ 			| N => [N]})
//│ def sum₀ = 
//│ 	(fun ls -> ls)
//│ 	where
//│ 	def sum₁ = 
//│ 		(fun ls -> ls)
//│ <<<<<<< after fusion <<<<<<<



let rec p = C(p)
fun c(x) = if x is
    C(a) then c(a)
fun main(cc) = cc(p)
main(c)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |main|(|cc|)| |#=| |cc|(|p|)|↵|main|(|c|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then c (a,)›; fun main = cc, => cc (p,); main (c,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (main^13 c^14)
//│ def c = (fun x:14 -> case x:14 of {
//│ 	C a:15 => (c^4 a:15)})
//│ def main = (fun cc:16 -> (cc:16 p^10))
//│ def p = [C p^1]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^14]
//│ 	[c^14 · c^4] ---> [c^14] (only one)
//│ [main^13]
//│ 	[main^13 · p^10]
//│ 		[main^13 · p^10 · p^1] ---> [main^13 · p^10] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C p₀] --->
//│ 	case x of {C a => (c₀ a)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (main₀ c₀)
//│ def c₀ = 
//│ 	(fun x -> x)
//│ def main₀ = 
//│ 	(fun cc -> (cc p₀))
//│ 	where
//│ 	def p₀ = 
//│ 		let a = p₀
//│ 		in (c₀ a)
//│ <<<<<<< after fusion <<<<<<<


// this path seems also to be sensible
let rec p = C(p)
fun c(x) = if x is
    C(a) then c(a)
fun main(pp) = if pp is
    C(b) then if b is
        C(d) then c(d)
main(p)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |main|(|pp|)| |#=| |#if| |pp| |is|→|C|(|b|)| |#then| |#if| |b| |is|→|C|(|d|)| |#then| |c|(|d|)|←|←|↵|main|(|p|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then c (a,)›; fun main = pp, => if pp is ‹(C (b,)) then if b is ‹(C (d,)) then c (d,)››; main (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (main^17 p^18)
//│ def c = (fun x:14 -> case x:14 of {
//│ 	C a:15 => (c^4 a:15)})
//│ def main = (fun pp:16 -> case pp:16 of {
//│ 	C b:17 => case b:17 of {
//│ 		C d:18 => (c^11 d:18)}})
//│ def p = [C p^1]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [main^17]
//│ 	[main^17 · c^11]
//│ 		[main^17 · c^11 · c^4] ---> [main^17 · c^11] (only one)
//│ [p^18]
//│ 	[p^18 · p^1]
//│ 		[p^18 · p^1 · p^1]
//│ 			[p^18 · p^1 · p^1 · p^1] ---> [p^18 · p^1 · p^1] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C p₂] --->
//│ 	case b of {C d => (c₀ d)}
//│ [C p₂] --->
//│ 	case x of {C a => (c₀ a)}
//│ [C p₁] --->
//│ 	case pp of {C b => case b of {C d => (c₀ d)}}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (main₀ p₀)
//│ def main₀ = 
//│ 	(fun pp -> pp)
//│ 	where
//│ 	def c₀ = 
//│ 		(fun x -> x)
//│ def p₀ = 
//│ 	let b = p₁
//│ 	in b
//│ 	where
//│ 	def p₁ = 
//│ 		let d = p₂
//│ 		in (c₀ d)
//│ 		where
//│ 		def p₂ = 
//│ 			let a = p₂
//│ 			in (c₀ a)
//│ <<<<<<< after fusion <<<<<<<


let rec p = C(p)
let c(x) = if x is
    C(a) then c(a)
fun main(cc, pp) = cc(pp)
main(c, p)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#let| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |main|(|cc|,| |pp|)| |#=| |cc|(|pp|)|↵|main|(|c|,| |p|)|
//│ Parsed: {let rec p = C (p,); let c = x, => if x is ‹(C (a,)) then c (a,)›; fun main = cc, pp, => cc (pp,); main (c, p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((main^14 c^15) p^17)
//│ def c = (fun x:14 -> case x:14 of {
//│ 	C a:15 => (c^4 a:15)})
//│ def main = (fun cc:16 -> (fun pp:17 -> (cc:16 pp:17)))
//│ def p = [C p^1]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^15]
//│ 	[c^15 · c^4] ---> [c^15] (only one)
//│ [main^14] (hopeless to continue)
//│ [p^17]
//│ 	[p^17 · p^1] ---> [p^17] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C p₀] --->
//│ 	case x of {C a => (c₀ a)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((main₀ c₀) p₀)
//│ def c₀ = 
//│ 	(fun x -> x)
//│ def main₀ = 
//│ 	(fun cc -> (fun pp -> (cc pp)))
//│ def p₀ = 
//│ 	let a = p₀
//│ 	in (c₀ a)
//│ <<<<<<< after fusion <<<<<<<


fun cons(y) = if y is
    C(aa) then cons(aa)
fun a(x) = b(x)
fun b(x) = c(x)
fun c(x) = d(cons, x)
fun d(cc, x) = cc(x)
let p = C(p)
a(p)
//│ |#fun| |cons|(|y|)| |#=| |#if| |y| |is|→|C|(|aa|)| |#then| |cons|(|aa|)|←|↵|#fun| |a|(|x|)| |#=| |b|(|x|)|↵|#fun| |b|(|x|)| |#=| |c|(|x|)|↵|#fun| |c|(|x|)| |#=| |d|(|cons|,| |x|)|↵|#fun| |d|(|cc|,| |x|)| |#=| |cc|(|x|)|↵|#let| |p| |#=| |C|(|p|)|↵|a|(|p|)|
//│ Parsed: {fun cons = y, => if y is ‹(C (aa,)) then cons (aa,)›; fun a = x, => b (x,); fun b = x, => c (x,); fun c = x, => d (cons, x,); fun d = cc, x, => cc (x,); let p = C (p,); a (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (a^28 p^29)
//│ def a = (fun x:19 -> (b^7 x:19))
//│ def b = (fun x:20 -> (c^11 x:20))
//│ def c = (fun x:21 -> ((d^15 cons^16) x:21))
//│ def cons = (fun y:17 -> case y:17 of {
//│ 	C aa:18 => (cons^2 aa:18)})
//│ def d = (fun cc:22 -> (fun x:23 -> (cc:22 x:23)))
//│ def p = [C p^26]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [a^28]
//│ 	[a^28 · b^7]
//│ 		[a^28 · b^7 · c^11]
//│ 			[a^28 · b^7 · c^11 · cons^16]
//│ 				[a^28 · b^7 · c^11 · cons^16 · cons^2]
//│ 					[a^28 · b^7 · c^11 · cons^16 · cons^2 · cons^2] ---> [a^28 · b^7 · c^11 · cons^16 · cons^2] (only one)
//│ 			[a^28 · b^7 · c^11 · d^15] (hopeless to continue)
//│ [p^29]
//│ 	[p^29 · p^26]
//│ 		[p^29 · p^26 · p^26] ---> [p^29 · p^26] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C p₁] --->
//│ 	case y of {C aa => (cons₁ aa)}
//│ [C p₁] --->
//│ 	case y of {C aa => (cons₁ aa)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (a₀ p₀)
//│ def a₀ = 
//│ 	(fun x -> (b₀ x))
//│ 	where
//│ 	def b₀ = 
//│ 		(fun x -> (c₀ x))
//│ 		where
//│ 		def c₀ = 
//│ 			(fun x -> ((d₀ cons₀) x))
//│ 			where
//│ 			def cons₀ = 
//│ 				(fun y -> y)
//│ 				where
//│ 				def cons₁ = 
//│ 					(fun y -> y)
//│ 			def d₀ = 
//│ 				(fun cc -> (fun x -> (cc x)))
//│ def p₀ = 
//│ 	let aa = p₁
//│ 	in (cons₁ aa)
//│ 	where
//│ 	def p₁ = 
//│ 		let aa = p₁
//│ 		in (cons₁ aa)
//│ <<<<<<< after fusion <<<<<<<


let p = C(N)
fun c(x) = if C(x) is
    C(a) then c(a)
c(p)
//│ |#let| |p| |#=| |C|(|N|)|↵|#fun| |c|(|x|)| |#=| |#if| |C|(|x|)| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|c|(|p|)|
//│ Parsed: {let p = C (N,); fun c = x, => if C (x,) is ‹(C (a,)) then c (a,)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^10 p^11)
//│ def c = (fun x:13 -> case [C x:13] of {
//│ 	C a:14 => (c^5 a:14)})
//│ def p = [C [N]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^10] (hopeless to continue)
//│ 	[c^10 · c^5] ---> [c^10] (using original def)
//│ [p^11] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C x] --->
//│ 	case [C x] of {C a => (c₀ a)}
//│ [C x] --->
//│ 	case [C x] of {C a => (c a)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c₀ p₀)
//│ def c₀ = 
//│ 	(fun x -> 
//│ 		let a = x
//│ 		in (c₀ a))
//│ def p₀ = 
//│ 	[C [N]]
//│ <<<<<<< after fusion <<<<<<<


// let rec p = C(p)
// let q = p
// fun c(x) = if x is
//     C(a) then a
// fun c2(z) = if z is
//     C(b) then c2(b)
// let main = c(q)
// c2(main)


let rec p = C(p)
fun c(x) = if x is
    C(a) then a
fun c1(xx) = if xx is
    C(aa) then aa
fun c2(z) = if z is
    C(b) then c2(b)
let main = c(p)
fun id(y) = c1(C(y))
c2(id(main))
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |a|←|↵|#fun| |c1|(|xx|)| |#=| |#if| |xx| |is|→|C|(|aa|)| |#then| |aa|←|↵|#fun| |c2|(|z|)| |#=| |#if| |z| |is|→|C|(|b|)| |#then| |c2|(|b|)|←|↵|#let| |main| |#=| |c|(|p|)|↵|#fun| |id|(|y|)| |#=| |c1|(|C|(|y|)|)|↵|c2|(|id|(|main|)|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then a›; fun c1 = xx, => if xx is ‹(C (aa,)) then aa›; fun c2 = z, => if z is ‹(C (b,)) then c2 (b,)›; let main = c (p,); fun id = y, => c1 (C (y,),); c2 (id (main,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c2^25 (id^26 main^27))
//│ def c = (fun x:17 -> case x:17 of {
//│ 	C a:18 => a:18})
//│ def c1 = (fun xx:19 -> case xx:19 of {
//│ 	C aa:20 => aa:20})
//│ def c2 = (fun z:21 -> case z:21 of {
//│ 	C b:22 => (c2^12 b:22)})
//│ def id = (fun y:23 -> (c1^20 [C y:23]))
//│ def main = (c^17 p^18)
//│ def p = [C p^1]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c2^25]
//│ 	[c2^25 · c2^12] ---> [c2^25] (only one)
//│ [id^26] (hopeless to continue)
//│ 	[id^26 · c1^20] (using original def)
//│ [main^27]
//│ 	[main^27 · c^17] (hopeless to continue)
//│ 	[main^27 · p^18]
//│ 		[main^27 · p^18 · p^1]
//│ 			[main^27 · p^18 · p^1 · p^1] ---> [main^27 · p^18 · p^1] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C p] --->
//│ 	case x of {C a => a}
//│ [C y] --->
//│ 	case xx of {C aa => aa}
//│ [C p₁] --->
//│ 	case z of {C b => (c2₀ b)}
//│ [C y] --->
//│ 	case xx of {C aa => aa}
//│ [C p₁] --->
//│ 	case x of {C a => a}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c2₀ (id₀ main₀))
//│ def c2₀ = 
//│ 	(fun z -> z)
//│ def id₀ = 
//│ 	(fun y -> (c1₀ 
//│ 		let aa = y
//│ 		in aa))
//│ 	where
//│ 	def c1₀ = 
//│ 		(fun xx -> xx)
//│ def main₀ = 
//│ 	(c₀ p₀)
//│ 	where
//│ 	def c₀ = 
//│ 		(fun x -> x)
//│ 	def p₀ = 
//│ 		let a = p₁
//│ 		in a
//│ 		where
//│ 		def p₁ = 
//│ 			let b = p₁
//│ 			in (c2₀ b)
//│ <<<<<<< after fusion <<<<<<<


let t = T(K, T(N, L, L), T(N, L, L))
fun c(x) = if x is
    T(n, l, r) then T(
        (if n is
            K then KK
            N then NN
        ),
        c(l),
        c(r)
    )
    L then LL
c(t)
//│ |#let| |t| |#=| |T|(|K|,| |T|(|N|,| |L|,| |L|)|,| |T|(|N|,| |L|,| |L|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|T|(|n|,| |l|,| |r|)| |#then| |T|(|→|(|#if| |n| |is|→|K| |#then| |KK|↵|N| |#then| |NN|←|↵|)|,|↵|c|(|l|)|,|↵|c|(|r|)|←|↵|)|↵|L| |#then| |LL|←|↵|c|(|t|)|
//│ Parsed: {let t = T (K, T (N, L, L,), T (N, L, L,),); fun c = x, => if x is ‹(T (n, l, r,)) then T ('(' if n is ‹(K) then KK; (N) then NN›, ')', c (l,), c (r,),); (L) then LL›; c (t,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^26 t^27)
//│ def c = (fun x:13 -> case x:13 of {
//│ 	T n:14 l:15 r:16 => [T case n:14 of {
//│ 		K => [KK]
//│ 		| N => [NN]} (c^16 l:15) (c^19 r:16)]
//│ 	| L => [LL]})
//│ def t = [T [K] [T [N] [L] [L]] [T [N] [L] [L]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^26]
//│ 	[c^26 · c^16]
//│ 		[c^26 · c^16 · c^16]
//│ 			[c^26 · c^16 · c^16 · c^16] ---> [c^26 · c^16 · c^16] (only one)
//│ 			[c^26 · c^16 · c^16 · c^19] ---> [c^26 · c^16 · c^16] (only one)
//│ 		[c^26 · c^16 · c^19]
//│ 			[c^26 · c^16 · c^19 · c^16] ---> [c^26 · c^16 · c^19] (only one)
//│ 			[c^26 · c^16 · c^19 · c^19] ---> [c^26 · c^16 · c^19] (only one)
//│ 	[c^26 · c^19]
//│ 		[c^26 · c^19 · c^16]
//│ 			[c^26 · c^19 · c^16 · c^16] ---> [c^26 · c^19 · c^16] (only one)
//│ 			[c^26 · c^19 · c^16 · c^19] ---> [c^26 · c^19 · c^16] (only one)
//│ 		[c^26 · c^19 · c^19]
//│ 			[c^26 · c^19 · c^19 · c^16] ---> [c^26 · c^19 · c^19] (only one)
//│ 			[c^26 · c^19 · c^19 · c^19] ---> [c^26 · c^19 · c^19] (only one)
//│ [t^27]
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [K] --->
//│ 	case n of {K => [KK] | N => [NN]}
//│ [N] --->
//│ 	case n of {K => [KK] | N => [NN]}
//│ [L] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₂ l) (c₂ r)] | L => [LL]}
//│ [L] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₃ l) (c₃ r)] | L => [LL]}
//│ [T [N] [L] [L]] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₂ l) (c₃ r)] | L => [LL]}
//│ [N] --->
//│ 	case n of {K => [KK] | N => [NN]}
//│ [L] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₅ l) (c₅ r)] | L => [LL]}
//│ [L] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₆ l) (c₆ r)] | L => [LL]}
//│ [T [N] [L] [L]] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₅ l) (c₆ r)] | L => [LL]}
//│ [T [K] [T [N] [L] [L]] [T [N] [L] [L]]] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₁ l) (c₄ r)] | L => [LL]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c₀ t₀)
//│ def c₀ = 
//│ 	(fun x -> x)
//│ 	where
//│ 	def c₁ = 
//│ 		(fun x -> x)
//│ 		where
//│ 		def c₂ = 
//│ 			(fun x -> x)
//│ 		def c₃ = 
//│ 			(fun x -> x)
//│ 	def c₄ = 
//│ 		(fun x -> x)
//│ 		where
//│ 		def c₅ = 
//│ 			(fun x -> x)
//│ 		def c₆ = 
//│ 			(fun x -> x)
//│ def t₀ = 
//│ 	let n = [KK]
//│ 	in let l = 	
//│ 		let n = [NN]
//│ 		in let l = [LL]
//│ 		in let r = [LL]
//│ 		in [T n (c₂ l) (c₃ r)]
//│ 	in let r = 	
//│ 		let n = [NN]
//│ 		in let l = [LL]
//│ 		in let r = [LL]
//│ 		in [T n (c₅ l) (c₆ r)]
//│ 	in [T n (c₁ l) (c₄ r)]
//│ <<<<<<< after fusion <<<<<<<


let aa = T(N, L, L)
let bb = T(N, L, L)
let t = T(K, aa, bb)
fun c(x) = if x is
    T(n, l, r) then T(
        (if n is
            K then KK
            N then NN
        ),
        c(l),
        c(r)
    )
    L then LL
c(t)
//│ |#let| |aa| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |bb| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |t| |#=| |T|(|K|,| |aa|,| |bb|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|T|(|n|,| |l|,| |r|)| |#then| |T|(|→|(|#if| |n| |is|→|K| |#then| |KK|↵|N| |#then| |NN|←|↵|)|,|↵|c|(|l|)|,|↵|c|(|r|)|←|↵|)|↵|L| |#then| |LL|←|↵|c|(|t|)|
//│ Parsed: {let aa = T (N, L, L,); let bb = T (N, L, L,); let t = T (K, aa, bb,); fun c = x, => if x is ‹(T (n, l, r,)) then T ('(' if n is ‹(K) then KK; (N) then NN›, ')', c (l,), c (r,),); (L) then LL›; c (t,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^28 t^29)
//│ def aa = [T [N] [L] [L]]
//│ def bb = [T [N] [L] [L]]
//│ def c = (fun x:15 -> case x:15 of {
//│ 	T n:16 l:17 r:18 => [T case n:16 of {
//│ 		K => [KK]
//│ 		| N => [NN]} (c^18 l:17) (c^21 r:18)]
//│ 	| L => [LL]})
//│ def t = [T [K] aa^10 bb^11]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^28]
//│ 	[c^28 · c^18]
//│ 		[c^28 · c^18 · c^18]
//│ 			[c^28 · c^18 · c^18 · c^18] ---> [c^28 · c^18 · c^18] (only one)
//│ 			[c^28 · c^18 · c^18 · c^21] ---> [c^28 · c^18 · c^18] (only one)
//│ 		[c^28 · c^18 · c^21]
//│ 			[c^28 · c^18 · c^21 · c^18] ---> [c^28 · c^18 · c^21] (only one)
//│ 			[c^28 · c^18 · c^21 · c^21] ---> [c^28 · c^18 · c^21] (only one)
//│ 	[c^28 · c^21]
//│ 		[c^28 · c^21 · c^18]
//│ 			[c^28 · c^21 · c^18 · c^18] ---> [c^28 · c^21 · c^18] (only one)
//│ 			[c^28 · c^21 · c^18 · c^21] ---> [c^28 · c^21 · c^18] (only one)
//│ 		[c^28 · c^21 · c^21]
//│ 			[c^28 · c^21 · c^21 · c^18] ---> [c^28 · c^21 · c^21] (only one)
//│ 			[c^28 · c^21 · c^21 · c^21] ---> [c^28 · c^21 · c^21] (only one)
//│ [t^29]
//│ 	[t^29 · aa^10]
//│ 	[t^29 · bb^11]
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N] --->
//│ 	case n of {K => [KK] | N => [NN]}
//│ [L] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₅ l) (c₅ r)] | L => [LL]}
//│ [L] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₆ l) (c₆ r)] | L => [LL]}
//│ [T [N] [L] [L]] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₅ l) (c₆ r)] | L => [LL]}
//│ [K] --->
//│ 	case n of {K => [KK] | N => [NN]}
//│ [T [K] aa₀ bb₀] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₁ l) (c₄ r)] | L => [LL]}
//│ [N] --->
//│ 	case n of {K => [KK] | N => [NN]}
//│ [L] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₂ l) (c₂ r)] | L => [LL]}
//│ [L] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₃ l) (c₃ r)] | L => [LL]}
//│ [T [N] [L] [L]] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₂ l) (c₃ r)] | L => [LL]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c₀ t₀)
//│ def c₀ = 
//│ 	(fun x -> x)
//│ 	where
//│ 	def c₁ = 
//│ 		(fun x -> x)
//│ 		where
//│ 		def c₂ = 
//│ 			(fun x -> x)
//│ 		def c₃ = 
//│ 			(fun x -> x)
//│ 	def c₄ = 
//│ 		(fun x -> x)
//│ 		where
//│ 		def c₅ = 
//│ 			(fun x -> x)
//│ 		def c₆ = 
//│ 			(fun x -> x)
//│ def t₀ = 
//│ 	let n = [KK]
//│ 	in let l = aa₀
//│ 	in let r = bb₀
//│ 	in [T n (c₁ l) (c₄ r)]
//│ 	where
//│ 	def aa₀ = 
//│ 		let n = [NN]
//│ 		in let l = [LL]
//│ 		in let r = [LL]
//│ 		in [T n (c₂ l) (c₃ r)]
//│ 	def bb₀ = 
//│ 		let n = [NN]
//│ 		in let l = [LL]
//│ 		in let r = [LL]
//│ 		in [T n (c₅ l) (c₆ r)]
//│ <<<<<<< after fusion <<<<<<<


fun map(ls) = if ls is
    C(h, t) then f => C(f(h), map(t)(f))
    N then f => N
let l = C(K, N)
map(l)(
    x => if x is
        K then T
)
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |f| |=>| |C|(|f|(|h|)|,| |map|(|t|)|(|f|)|)|↵|N| |#then| |f| |=>| |N|←|↵|#let| |l| |#=| |C|(|K|,| |N|)|↵|map|(|l|)|(|→|x| |=>| |#if| |x| |is|→|K| |#then| |T|←|←|↵|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (h, t,)) then f, => C (f (h,), map (t,) (f,),); (N) then f, => N›; let l = C (K, N,); map (l,) (x, => if x is ‹(K) then T›,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((map^19 l^20) (fun x:18 -> case x:18 of {
//│ 	K => [T]}))
//│ def l = [C [K] [N]]
//│ def map = (fun ls:13 -> case ls:13 of {
//│ 	C h:14 t:15 => (fun f:16 -> [C (f:16 h:14) ((map^5 t:15) f:16)])
//│ 	| N => (fun f:17 -> [N])})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [l^20]
//│ [map^19]
//│ 	[map^19 · map^5]
//│ 		[map^19 · map^5 · map^5] ---> [map^19 · map^5] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [K] --->
//│ 	case x of {K => [T]}
//│ [N] --->
//│ 	case ls of {C h t => (fun f -> [C (f h) ((map₁ t) f)]) | N => (fun f -> [N])}
//│ [C [K] [N]] --->
//│ 	case ls of {C h t => (fun f -> [C (f h) ((map₁ t) f)]) | N => (fun f -> [N])}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((map₀ l₀) (fun x -> x))
//│ def l₀ = 
//│ 	let h = [T]
//│ 	in let t = (fun f -> [N])
//│ 	in (fun f -> [C (f h) ((map₁ t) f)])
//│ def map₀ = 
//│ 	(fun ls -> ls)
//│ 	where
//│ 	def map₁ = 
//│ 		(fun ls -> ls)
//│ <<<<<<< after fusion <<<<<<<


fun inter(xs) = if xs is
    N then ys => ys
    C(h, t) then ys => C(h, inter(ys)(t))
let rec l1 = C(1, C(2, l1))
let rec l2 = C(9, C(8, l2))
inter(l1)(l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|#let| |#rec| |l1| |#=| |C|(|1|,| |C|(|2|,| |l1|)|)|↵|#let| |#rec| |l2| |#=| |C|(|9|,| |C|(|8|,| |l2|)|)|↵|inter|(|l1|)|(|l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; let rec l1 = C (1, C (2, l1,),); let rec l2 = C (9, C (8, l2,),); inter (l1,) (l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((inter^24 l1^25) l2^27)
//│ def inter = (fun xs:14 -> case xs:14 of {
//│ 	N => (fun ys:15 -> ys:15)
//│ 	| C h:16 t:17 => (fun ys:18 -> [C h:16 ((inter^5 ys:18) t:17)])})
//│ def l1 = [C 1 [C 2 l1^16]]
//│ def l2 = [C 9 [C 8 l2^21]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter^24]
//│ 	[inter^24 · inter^5]
//│ 		[inter^24 · inter^5 · inter^5]
//│ 			[inter^24 · inter^5 · inter^5 · inter^5]
//│ 				[inter^24 · inter^5 · inter^5 · inter^5 · inter^5]
//│ 					[inter^24 · inter^5 · inter^5 · inter^5 · inter^5 · inter^5] ---> [inter^24 · inter^5] (only one)
//│ [l1^25]
//│ 	[l1^25 · l1^16] ---> [l1^25] (only one)
//│ [l2^27]
//│ 	[l2^27 · l2^21] ---> [l2^27] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 8 l2₀] --->
//│ 	case xs of {N => (fun ys -> ys) | C h t => (fun ys -> [C h ((inter₄ ys) t)])}
//│ [C 9 [C 8 l2₀]] --->
//│ 	case xs of {N => (fun ys -> ys) | C h t => (fun ys -> [C h ((inter₂ ys) t)])}
//│ [C 2 l1₀] --->
//│ 	case xs of {N => (fun ys -> ys) | C h t => (fun ys -> [C h ((inter₃ ys) t)])}
//│ [C 1 [C 2 l1₀]] --->
//│ 	case xs of {N => (fun ys -> ys) | C h t => (fun ys -> [C h ((inter₁ ys) t)])}
//│ 	case xs of {N => (fun ys -> ys) | C h t => (fun ys -> [C h ((inter₁ ys) t)])}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((inter₀ l1₀) l2₀)
//│ def inter₀ = 
//│ 	(fun xs -> xs)
//│ 	where
//│ 	def inter₁ = 
//│ 		(fun xs -> xs)
//│ 		where
//│ 		def inter₂ = 
//│ 			(fun xs -> xs)
//│ 			where
//│ 			def inter₃ = 
//│ 				(fun xs -> xs)
//│ 				where
//│ 				def inter₄ = 
//│ 					(fun xs -> case xs of {
//│ 						N => (fun ys -> ys)
//│ 						| C h t => (fun ys -> [C h ((inter₁ ys) t)])})
//│ def l1₀ = 
//│ 	let h = 1
//│ 	in let t = 	
//│ 		let h = 2
//│ 		in let t = l1₀
//│ 		in (fun ys -> [C h ((inter₃ ys) t)])
//│ 	in (fun ys -> [C h ((inter₁ ys) t)])
//│ def l2₀ = 
//│ 	let h = 9
//│ 	in let t = 	
//│ 		let h = 8
//│ 		in let t = l2₀
//│ 		in (fun ys -> [C h ((inter₄ ys) t)])
//│ 	in (fun ys -> [C h ((inter₂ ys) t)])
//│ <<<<<<< after fusion <<<<<<<


fun last(ys) = if ys is
    N then x => x
    C(h, t) then x => last(t)(h)
fun lastDrive(xs) = if xs is
    N then None
    C(hh, tt) then Some(last(tt)(hh))
lastDrive(C(1, C(2, N)))
//│ |#fun| |last|(|ys|)| |#=| |#if| |ys| |is|→|N| |#then| |x| |=>| |x|↵|C|(|h|,| |t|)| |#then| |x| |=>| |last|(|t|)|(|h|)|←|↵|#fun| |lastDrive|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |None|↵|C|(|hh|,| |tt|)| |#then| |Some|(|last|(|tt|)|(|hh|)|)|←|↵|lastDrive|(|C|(|1|,| |C|(|2|,| |N|)|)|)|
//│ Parsed: {fun last = ys, => if ys is ‹(N) then x, => x; (C (h, t,)) then x, => last (t,) (h,)›; fun lastDrive = xs, => if xs is ‹(N) then None; (C (hh, tt,)) then Some (last (tt,) (hh,),)›; lastDrive (C (1, C (2, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (lastDrive^22 [C 1 [C 2 [N]]])
//│ def last = (fun ys:13 -> case ys:13 of {
//│ 	N => (fun x:14 -> x:14)
//│ 	| C h:15 t:16 => (fun x:17 -> ((last^4 t:16) h:15))})
//│ def lastDrive = (fun xs:18 -> case xs:18 of {
//│ 	N => [None]
//│ 	| C hh:19 tt:20 => [Some ((last^14 tt:20) hh:19)]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [lastDrive^22]
//│ 	[lastDrive^22 · last^14]
//│ 		[lastDrive^22 · last^14 · last^4]
//│ 			[lastDrive^22 · last^14 · last^4 · last^4] ---> [lastDrive^22 · last^14 · last^4] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N] --->
//│ 	case ys of {N => (fun x -> x) | C h t => (fun x -> ((last₁ t) h))}
//│ [C 2 [N]] --->
//│ 	case ys of {N => (fun x -> x) | C h t => (fun x -> ((last₁ t) h))}
//│ [C 1 [C 2 [N]]] --->
//│ 	case xs of {N => [None] | C hh tt => [Some ((last₀ tt) hh)]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (lastDrive₀ 
//│ 	let hh = 1
//│ 	in let tt = 	
//│ 		let h = 2
//│ 		in let t = (fun x -> x)
//│ 		in (fun x -> ((last₁ t) h))
//│ 	in [Some ((last₀ tt) hh)])
//│ def lastDrive₀ = 
//│ 	(fun xs -> xs)
//│ 	where
//│ 	def last₀ = 
//│ 		(fun ys -> ys)
//│ 		where
//│ 		def last₁ = 
//│ 			(fun ys -> ys)
//│ <<<<<<< after fusion <<<<<<<
