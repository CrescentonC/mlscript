:NewParser
:ParseOnly

let rec p = C(p)
fun c(x) = if x is
    C(a) then c(a)
c(p)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|c|(|p|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then c (a,)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C p:6^1]
//│ def c:7 = (fun x:8 -> case x:8^3 of {
//│ 	C a:9 => (c:7^4 a:9^5)})
//│ (c:7^9 p:6^10)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([c:7^9]: 1'c) <: ([]: ([p:6^10]: 0'p) => ([]: 6'11_callres))
//│ ([]: ([]: 2'x) => ([]: 5'7_matchres)) <: ([]: 1'c)
//│ ([]: 4'6_callres) <: ([]: 5'7_matchres)
//│ ([]: 2'x) <: ([]: Destruct(C(3'a)))
//│ ([c:7^4]: 1'c) <: ([]: ([]: 3'a) => ([]: 4'6_callres))
//│ ([]: C(([p:6^1]: 0'p))) <: ([]: 0'p)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(0'p) <: 2'x
//│ 	[-p:6^1 · -p:6^10 · +c:7^9 · +c:7^4]  --->  [-p:6^10 · +c:7^9]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'p:
//│ 	0'p[-p:6^1 · -p:6^10 · +c:7^9] < ([]: 3'a)
//│ 	0'p[-p:6^10 · +c:7^9] < ([]: 2'x)
//│ 	([]: C(([p:6^1]: 0'p))) < []0'p
//│ --------------
//│ 5'7_matchres:
//│ 	5'7_matchres[] < ([-c:7^4]: 4'6_callres)
//│ 	5'7_matchres[] < ([-c:7^9]: 6'11_callres)
//│ --------------
//│ 1'c:
//│ 	1'c[-c:7^4] < ([]: ([]: 3'a) => ([]: 4'6_callres))
//│ 	1'c[-c:7^9] < ([]: ([p:6^10]: 0'p) => ([]: 6'11_callres))
//│ 	([]: ([]: 2'x) => ([]: 5'7_matchres)) < []1'c
//│ --------------
//│ 2'x:
//│ 	2'x[] < ([]: Destruct(C(3'a)))
//│ 	([]: C(([p:6^1]: 0'p))) < [-p:6^10 · +c:7^9]2'x
//│ --------------
//│ 3'a:
//│ 	3'a[+c:7^4] < ([]: 2'x)
//│ 	([]: C(([p:6^1]: 0'p))) < [-p:6^1 · -p:6^10 · +c:7^9]3'a
//│ --------------
//│ 4'6_callres:
//│ 	4'6_callres[] < ([]: 5'7_matchres)
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<



let p = C(1, C(2, N))
fun e(z) = if z is
    C(aaa, bbb) then bbb
    N then 7
fun d(y) = if y is
    C(aa, bb) then e(bb)
    N then 5
fun c(x) = if x is
    C(a, b) then d(b)
    N then 3
c(p)
//│ |#let| |p| |#=| |C|(|1|,| |C|(|2|,| |N|)|)|↵|#fun| |e|(|z|)| |#=| |#if| |z| |is|→|C|(|aaa|,| |bbb|)| |#then| |bbb|↵|N| |#then| |7|←|↵|#fun| |d|(|y|)| |#=| |#if| |y| |is|→|C|(|aa|,| |bb|)| |#then| |e|(|bb|)|↵|N| |#then| |5|←|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|,| |b|)| |#then| |d|(|b|)|↵|N| |#then| |3|←|↵|c|(|p|)|
//│ Parsed: {let p = C (1, C (2, N,),); fun e = z, => if z is ‹(C (aaa, bbb,)) then bbb; (N) then 7›; fun d = y, => if y is ‹(C (aa, bb,)) then e (bb,); (N) then 5›; fun c = x, => if x is ‹(C (a, b,)) then d (b,); (N) then 3›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C 1 [C 2 [N]]]
//│ def e:7 = (fun z:10 -> case z:10^6 of {
//│ 	C aaa:11 bbb:12 => bbb:12^7
//│ 	| N => 7})
//│ def d:8 = (fun y:13 -> case y:13^11 of {
//│ 	C aa:14 bb:15 => (e:7^12 bb:15^13)
//│ 	| N => 5})
//│ def c:9 = (fun x:16 -> case x:16^18 of {
//│ 	C a:17 b:18 => (d:8^19 b:18^20)
//│ 	| N => 3})
//│ (c:9^25 p:6^26)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([c:9^25]: 3'c) <: ([]: ([p:6^26]: 0'p) => ([]: 18'27_callres))
//│ ([]: ([]: 13'x) => ([]: 17'23_matchres)) <: ([]: 3'c)
//│ ([]: Int) <: ([]: 17'23_matchres)
//│ ([]: 16'21_callres) <: ([]: 17'23_matchres)
//│ ([]: 13'x) <: ([]: Destruct(C(14'a, 15'b), N))
//│ ([d:8^19]: 2'd) <: ([]: ([]: 15'b) => ([]: 16'21_callres))
//│ ([]: ([]: 8'y) => ([]: 12'16_matchres)) <: ([]: 2'd)
//│ ([]: Int) <: ([]: 12'16_matchres)
//│ ([]: 11'14_callres) <: ([]: 12'16_matchres)
//│ ([]: 8'y) <: ([]: Destruct(C(9'aa, 10'bb), N))
//│ ([e:7^12]: 1'e) <: ([]: ([]: 10'bb) => ([]: 11'14_callres))
//│ ([]: ([]: 4'z) => ([]: 7'9_matchres)) <: ([]: 1'e)
//│ ([]: Int) <: ([]: 7'9_matchres)
//│ ([]: 6'bbb) <: ([]: 7'9_matchres)
//│ ([]: 4'z) <: ([]: Destruct(C(5'aaa, 6'bbb), N))
//│ ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) <: ([]: 0'p)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'p:
//│ 	0'p[-p:6^26 · +c:9^25] < ([]: 13'x)
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < []0'p
//│ --------------
//│ 10'bb:
//│ 	10'bb[+e:7^12] < ([]: 4'z)
//│ 	([+d:8^19 · +c:9^25 · -p:6^26]: N) < []10'bb
//│ --------------
//│ 14'a:
//│ 	([+c:9^25 · -p:6^26]: Int) < []14'a
//│ --------------
//│ 1'e:
//│ 	1'e[-e:7^12] < ([]: ([]: 10'bb) => ([]: 11'14_callres))
//│ 	([]: ([]: 4'z) => ([]: 7'9_matchres)) < []1'e
//│ --------------
//│ 6'bbb:
//│ 	6'bbb[] < ([]: 7'9_matchres)
//│ --------------
//│ 9'aa:
//│ 	([+d:8^19 · +c:9^25 · -p:6^26]: Int) < []9'aa
//│ --------------
//│ 13'x:
//│ 	13'x[] < ([]: Destruct(C(14'a, 15'b), N))
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < [-p:6^26 · +c:9^25]13'x
//│ --------------
//│ 2'd:
//│ 	2'd[-d:8^19] < ([]: ([]: 15'b) => ([]: 16'21_callres))
//│ 	([]: ([]: 8'y) => ([]: 12'16_matchres)) < []2'd
//│ --------------
//│ 17'23_matchres:
//│ 	17'23_matchres[] < ([-c:9^25]: 18'27_callres)
//│ 	([-d:8^19 · -e:7^12]: Int) < []17'23_matchres
//│ 	([-d:8^19]: Int) < []17'23_matchres
//│ 	([]: Int) < []17'23_matchres
//│ --------------
//│ 12'16_matchres:
//│ 	12'16_matchres[] < ([-d:8^19]: 16'21_callres)
//│ 	([-e:7^12]: Int) < []12'16_matchres
//│ 	([]: Int) < []12'16_matchres
//│ --------------
//│ 7'9_matchres:
//│ 	7'9_matchres[] < ([-e:7^12]: 11'14_callres)
//│ 	([]: Int) < []7'9_matchres
//│ --------------
//│ 3'c:
//│ 	3'c[-c:9^25] < ([]: ([p:6^26]: 0'p) => ([]: 18'27_callres))
//│ 	([]: ([]: 13'x) => ([]: 17'23_matchres)) < []3'c
//│ --------------
//│ 18'27_callres:
//│ 	([-d:8^19 · -e:7^12]: Int) < [-c:9^25]18'27_callres
//│ 	([-d:8^19]: Int) < [-c:9^25]18'27_callres
//│ 	([]: Int) < [-c:9^25]18'27_callres
//│ --------------
//│ 16'21_callres:
//│ 	16'21_callres[] < ([]: 17'23_matchres)
//│ 	([-e:7^12]: Int) < [-d:8^19]16'21_callres
//│ 	([]: Int) < [-d:8^19]16'21_callres
//│ --------------
//│ 11'14_callres:
//│ 	11'14_callres[] < ([]: 12'16_matchres)
//│ 	([]: Int) < [-e:7^12]11'14_callres
//│ --------------
//│ 8'y:
//│ 	8'y[] < ([]: Destruct(C(9'aa, 10'bb), N))
//│ 	([+c:9^25 · -p:6^26]: C(([]: Int), ([]: N))) < [+d:8^19]8'y
//│ --------------
//│ 4'z:
//│ 	4'z[] < ([]: Destruct(C(5'aaa, 6'bbb), N))
//│ 	([+d:8^19 · +c:9^25 · -p:6^26]: N) < [+e:7^12]4'z
//│ --------------
//│ 15'b:
//│ 	15'b[+d:8^19] < ([]: 8'y)
//│ 	([+c:9^25 · -p:6^26]: C(([]: Int), ([]: N))) < []15'b
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


let rec p = C(C(p))
fun c(x) = if x is
    C(a) then if a is
        C(b) then if b is
            C(y) then c(y)
c(p)
//│ |#let| |#rec| |p| |#=| |C|(|C|(|p|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|b|)| |#then| |#if| |b| |is|→|C|(|y|)| |#then| |c|(|y|)|←|←|←|↵|c|(|p|)|
//│ Parsed: {let rec p = C (C (p,),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (b,)) then if b is ‹(C (y,)) then c (y,)›››; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C [C p:6^1]]
//│ def c:7 = (fun x:8 -> case x:8^4 of {
//│ 	C a:9 => case a:9^5 of {
//│ 		C b:10 => case b:10^6 of {
//│ 			C y:11 => (c:7^7 y:11^8)}}})
//│ (c:7^14 p:6^15)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([c:7^14]: 1'c) <: ([]: ([p:6^15]: 0'p) => ([]: 10'16_callres))
//│ ([]: ([]: 2'x) => ([]: 9'12_matchres)) <: ([]: 1'c)
//│ ([]: 8'11_matchres) <: ([]: 9'12_matchres)
//│ ([]: 2'x) <: ([]: Destruct(C(3'a)))
//│ ([]: 7'10_matchres) <: ([]: 8'11_matchres)
//│ ([]: 3'a) <: ([]: Destruct(C(4'b)))
//│ ([]: 6'9_callres) <: ([]: 7'10_matchres)
//│ ([]: 4'b) <: ([]: Destruct(C(5'y)))
//│ ([c:7^7]: 1'c) <: ([]: ([]: 5'y) => ([]: 6'9_callres))
//│ ([]: C(([]: C(([p:6^1]: 0'p))))) <: ([]: 0'p)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(0'p)) <: 2'x
//│ 	[-p:6^1 · -p:6^1 · -p:6^1 · -p:6^15 · +c:7^14 · +c:7^7 · +c:7^7]  --->  [-p:6^15 · +c:7^14]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'p:
//│ 	0'p[-p:6^1 · -p:6^1 · -p:6^1 · -p:6^15 · +c:7^14 · +c:7^7] < ([]: 5'y)
//│ 	0'p[-p:6^1 · -p:6^1 · -p:6^15 · +c:7^14 · +c:7^7] < ([]: 3'a)
//│ 	0'p[-p:6^1 · -p:6^15 · +c:7^14] < ([]: 4'b)
//│ 	0'p[-p:6^15 · +c:7^14] < ([]: 2'x)
//│ 	([]: C(([]: C(([p:6^1]: 0'p))))) < []0'p
//│ --------------
//│ 5'y:
//│ 	5'y[+c:7^7] < ([]: 2'x)
//│ 	([]: C(([]: C(([p:6^1]: 0'p))))) < [-p:6^1 · -p:6^1 · -p:6^1 · -p:6^15 · +c:7^14 · +c:7^7]5'y
//│ 	([+c:7^14 · -p:6^15 · -p:6^1]: C(([p:6^1]: 0'p))) < []5'y
//│ --------------
//│ 1'c:
//│ 	1'c[-c:7^7] < ([]: ([]: 5'y) => ([]: 6'9_callres))
//│ 	1'c[-c:7^14] < ([]: ([p:6^15]: 0'p) => ([]: 10'16_callres))
//│ 	([]: ([]: 2'x) => ([]: 9'12_matchres)) < []1'c
//│ --------------
//│ 6'9_callres:
//│ 	6'9_callres[] < ([]: 7'10_matchres)
//│ --------------
//│ 9'12_matchres:
//│ 	9'12_matchres[] < ([-c:7^7]: 6'9_callres)
//│ 	9'12_matchres[] < ([-c:7^14]: 10'16_callres)
//│ --------------
//│ 2'x:
//│ 	2'x[] < ([]: Destruct(C(3'a)))
//│ 	([+c:7^14 · -p:6^15 · -p:6^1]: C(([p:6^1]: 0'p))) < [+c:7^7]2'x
//│ 	([]: C(([]: C(([p:6^1]: 0'p))))) < [-p:6^15 · +c:7^14]2'x
//│ --------------
//│ 7'10_matchres:
//│ 	7'10_matchres[] < ([]: 8'11_matchres)
//│ --------------
//│ 3'a:
//│ 	3'a[] < ([]: Destruct(C(4'b)))
//│ 	([]: C(([]: C(([p:6^1]: 0'p))))) < [-p:6^1 · -p:6^1 · -p:6^15 · +c:7^14 · +c:7^7]3'a
//│ 	([+c:7^14 · -p:6^15]: C(([p:6^1]: 0'p))) < []3'a
//│ --------------
//│ 8'11_matchres:
//│ 	8'11_matchres[] < ([]: 9'12_matchres)
//│ --------------
//│ 4'b:
//│ 	4'b[] < ([]: Destruct(C(5'y)))
//│ 	([+c:7^7 · +c:7^14 · -p:6^15 · -p:6^1 · -p:6^1]: C(([p:6^1]: 0'p))) < []4'b
//│ 	([]: C(([]: C(([p:6^1]: 0'p))))) < [-p:6^1 · -p:6^15 · +c:7^14]4'b
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<




let rec p = C(C(p))
fun c(x) = if x is
    C(a) then c(a)
fun id2(yy) = yy
fun id(y) = id2(y)
c(id(p))
//│ |#let| |#rec| |p| |#=| |C|(|C|(|p|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |id2|(|yy|)| |#=| |yy|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|c|(|id|(|p|)|)|
//│ Parsed: {let rec p = C (C (p,),); fun c = x, => if x is ‹(C (a,)) then c (a,)›; fun id2 = yy, => yy; fun id = y, => id2 (y,); c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C [C p:6^1]]
//│ def c:7 = (fun x:10 -> case x:10^4 of {
//│ 	C a:11 => (c:7^5 a:11^6)})
//│ def id2:8 = (fun yy:12 -> yy:12^10)
//│ def id:9 = (fun y:13 -> (id2:8^12 y:13^13))
//│ (c:7^16 (id:9^17 p:6^18))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([c:7^16]: 1'c) <: ([]: ([]: 11'19_callres) => ([]: 12'20_callres))
//│ ([id:9^17]: 3'id) <: ([]: ([p:6^18]: 0'p) => ([]: 11'19_callres))
//│ ([]: ([]: 9'y) => ([]: 10'14_callres)) <: ([]: 3'id)
//│ ([id2:8^12]: 2'id2) <: ([]: ([]: 9'y) => ([]: 10'14_callres))
//│ ([]: ([]: 8'yy) => ([]: 8'yy)) <: ([]: 2'id2)
//│ ([]: ([]: 4'x) => ([]: 7'8_matchres)) <: ([]: 1'c)
//│ ([]: 6'7_callres) <: ([]: 7'8_matchres)
//│ ([]: 4'x) <: ([]: Destruct(C(5'a)))
//│ ([c:7^5]: 1'c) <: ([]: ([]: 5'a) => ([]: 6'7_callres))
//│ ([]: C(([]: C(([p:6^1]: 0'p))))) <: ([]: 0'p)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(0'p)) <: 4'x
//│ 	[-p:6^1 · -p:6^18 · +id:9^17 · +id2:8^12 · -id2:8^12 · -id:9^17 · +c:7^16 · +c:7^5 · +c:7^5]  --->  [-p:6^18 · +id:9^17 · +id2:8^12 · -id2:8^12 · -id:9^17 · +c:7^16]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'p:
//│ 	0'p[-p:6^1 · -p:6^18 · +id:9^17 · +id2:8^12 · -id2:8^12 · -id:9^17 · +c:7^16 · +c:7^5] < ([]: 5'a)
//│ 	0'p[-p:6^18 · +id:9^17] < ([]: 9'y)
//│ 	([]: C(([]: C(([p:6^1]: 0'p))))) < []0'p
//│ --------------
//│ 5'a:
//│ 	5'a[+c:7^5] < ([]: 4'x)
//│ 	([]: C(([]: C(([p:6^1]: 0'p))))) < [-p:6^1 · -p:6^18 · +id:9^17 · +id2:8^12 · -id2:8^12 · -id:9^17 · +c:7^16 · +c:7^5]5'a
//│ 	([+c:7^16 · -id:9^17 · -id2:8^12 · +id2:8^12 · +id:9^17 · -p:6^18]: C(([p:6^1]: 0'p))) < []5'a
//│ --------------
//│ 10'14_callres:
//│ 	10'14_callres[] < ([-id:9^17]: 11'19_callres)
//│ 	([+id2:8^12 · +id:9^17 · -p:6^18]: C(([]: C(([p:6^1]: 0'p))))) < [-id2:8^12]10'14_callres
//│ --------------
//│ 1'c:
//│ 	1'c[-c:7^5] < ([]: ([]: 5'a) => ([]: 6'7_callres))
//│ 	1'c[-c:7^16] < ([]: ([]: 11'19_callres) => ([]: 12'20_callres))
//│ 	([]: ([]: 4'x) => ([]: 7'8_matchres)) < []1'c
//│ --------------
//│ 6'7_callres:
//│ 	6'7_callres[] < ([]: 7'8_matchres)
//│ --------------
//│ 9'y:
//│ 	9'y[+id2:8^12] < ([]: 8'yy)
//│ 	([]: C(([]: C(([p:6^1]: 0'p))))) < [-p:6^18 · +id:9^17]9'y
//│ --------------
//│ 2'id2:
//│ 	2'id2[-id2:8^12] < ([]: ([]: 9'y) => ([]: 10'14_callres))
//│ 	([]: ([]: 8'yy) => ([]: 8'yy)) < []2'id2
//│ --------------
//│ 7'8_matchres:
//│ 	7'8_matchres[] < ([-c:7^5]: 6'7_callres)
//│ 	7'8_matchres[] < ([-c:7^16]: 12'20_callres)
//│ --------------
//│ 3'id:
//│ 	3'id[-id:9^17] < ([]: ([p:6^18]: 0'p) => ([]: 11'19_callres))
//│ 	([]: ([]: 9'y) => ([]: 10'14_callres)) < []3'id
//│ --------------
//│ 11'19_callres:
//│ 	11'19_callres[+c:7^16] < ([]: 4'x)
//│ 	([-id2:8^12 · +id2:8^12 · +id:9^17 · -p:6^18]: C(([]: C(([p:6^1]: 0'p))))) < [-id:9^17]11'19_callres
//│ --------------
//│ 8'yy:
//│ 	8'yy[] < ([-id2:8^12]: 10'14_callres)
//│ 	([+id:9^17 · -p:6^18]: C(([]: C(([p:6^1]: 0'p))))) < [+id2:8^12]8'yy
//│ --------------
//│ 4'x:
//│ 	4'x[] < ([]: Destruct(C(5'a)))
//│ 	([+c:7^16 · -id:9^17 · -id2:8^12 · +id2:8^12 · +id:9^17 · -p:6^18]: C(([p:6^1]: 0'p))) < [+c:7^5]4'x
//│ 	([-id:9^17 · -id2:8^12 · +id2:8^12 · +id:9^17 · -p:6^18]: C(([]: C(([p:6^1]: 0'p))))) < [+c:7^16]4'x
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<

fun sum(ls) = if ls is
    C(h, t) then S(N, sum(t))
fun mapa(lsa) = if lsa is
    C(ha, ta) then C(primitive(ha), mapa(ta))
fun mapb(lsb) = if lsb is
    C(hb, tb) then C(primitive(hb), mapb(tb))
sum(mapa(mapb(primitive)))
//│ |#fun| |sum|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |S|(|N|,| |sum|(|t|)|)|←|↵|#fun| |mapa|(|lsa|)| |#=| |#if| |lsa| |is|→|C|(|ha|,| |ta|)| |#then| |C|(|primitive|(|ha|)|,| |mapa|(|ta|)|)|←|↵|#fun| |mapb|(|lsb|)| |#=| |#if| |lsb| |is|→|C|(|hb|,| |tb|)| |#then| |C|(|primitive|(|hb|)|,| |mapb|(|tb|)|)|←|↵|sum|(|mapa|(|mapb|(|primitive|)|)|)|
//│ Parsed: {fun sum = ls, => if ls is ‹(C (h, t,)) then S (N, sum (t,),)›; fun mapa = lsa, => if lsa is ‹(C (ha, ta,)) then C (primitive (ha,), mapa (ta,),)›; fun mapb = lsb, => if lsb is ‹(C (hb, tb,)) then C (primitive (hb,), mapb (tb,),)›; sum (mapa (mapb (primitive,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def sum:6 = (fun ls:9 -> case ls:9^1 of {
//│ 	C h:10 t:11 => [S [N] (sum:6^3 t:11^4)]})
//│ def mapa:7 = (fun lsa:12 -> case lsa:12^9 of {
//│ 	C ha:13 ta:14 => [C (primitive:3^10 ha:13^11) (mapa:7^13 ta:14^14)]})
//│ def mapb:8 = (fun lsb:15 -> case lsb:15^19 of {
//│ 	C hb:16 tb:17 => [C (primitive:3^20 hb:16^21) (mapb:8^23 tb:17^24)]})
//│ (sum:6^29 (mapa:7^30 (mapb:8^31 primitive:3^32)))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([sum:6^29]: 0'sum) <: ([]: ([]: 21'34_callres) => ([]: 22'35_callres))
//│ ([mapa:7^30]: 1'mapa) <: ([]: ([]: 20'33_callres) => ([]: 21'34_callres))
//│ ([mapb:8^31]: 2'mapb) <: ([]: ([]: NoProd) => ([]: 20'33_callres))
//│ ([]: ([]: 14'lsb) => ([]: 19'27_matchres)) <: ([]: 2'mapb)
//│ ([]: C(([]: 17'22_callres), ([]: 18'25_callres))) <: ([]: 19'27_matchres)
//│ ([]: 14'lsb) <: ([]: Destruct(C(15'hb, 16'tb)))
//│ ([mapb:8^23]: 2'mapb) <: ([]: ([]: 16'tb) => ([]: 18'25_callres))
//│ ([]: ([]: 8'lsa) => ([]: 13'17_matchres)) <: ([]: 1'mapa)
//│ ([]: C(([]: 11'12_callres), ([]: 12'15_callres))) <: ([]: 13'17_matchres)
//│ ([]: 8'lsa) <: ([]: Destruct(C(9'ha, 10'ta)))
//│ ([mapa:7^13]: 1'mapa) <: ([]: ([]: 10'ta) => ([]: 12'15_callres))
//│ ([]: ([]: 3'ls) => ([]: 7'7_matchres)) <: ([]: 0'sum)
//│ ([]: S(([]: N), ([]: 6'5_callres))) <: ([]: 7'7_matchres)
//│ ([]: 3'ls) <: ([]: Destruct(C(4'h, 5't)))
//│ ([sum:6^3]: 0'sum) <: ([]: ([]: 5't) => ([]: 6'5_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(11'12_callres, 12'15_callres) <: 3'ls
//│ 	[-mapa:7^13 · -mapa:7^13 · -mapa:7^30 · +sum:6^29 · +sum:6^3 · +sum:6^3]  --->  [-mapa:7^13 · -mapa:7^30 · +sum:6^29 · +sum:6^3]
//│ C(17'22_callres, 18'25_callres) <: 8'lsa
//│ 	[-mapb:8^23 · -mapb:8^23 · -mapb:8^31 · +mapa:7^30 · +mapa:7^13 · +mapa:7^13]  --->  [-mapb:8^23 · -mapb:8^31 · +mapa:7^30 · +mapa:7^13]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'sum:
//│ 	0'sum[-sum:6^3] < ([]: ([]: 5't) => ([]: 6'5_callres))
//│ 	0'sum[-sum:6^29] < ([]: ([]: 21'34_callres) => ([]: 22'35_callres))
//│ 	([]: ([]: 3'ls) => ([]: 7'7_matchres)) < []0'sum
//│ --------------
//│ 5't:
//│ 	5't[+sum:6^3] < ([]: 3'ls)
//│ 	([-mapa:7^13]: C(([]: 11'12_callres), ([]: 12'15_callres))) < [-mapa:7^13 · -mapa:7^30 · +sum:6^29 · +sum:6^3]5't
//│ 	([-mapa:7^13]: C(([]: 11'12_callres), ([]: 12'15_callres))) < [-mapa:7^30 · +sum:6^29]5't
//│ --------------
//│ 10'ta:
//│ 	10'ta[+mapa:7^13] < ([]: 8'lsa)
//│ 	([-mapb:8^23]: C(([]: 17'22_callres), ([]: 18'25_callres))) < [-mapb:8^23 · -mapb:8^31 · +mapa:7^30 · +mapa:7^13]10'ta
//│ 	([-mapb:8^23]: C(([]: 17'22_callres), ([]: 18'25_callres))) < [-mapb:8^31 · +mapa:7^30]10'ta
//│ --------------
//│ 14'lsb:
//│ 	14'lsb[] < ([]: Destruct(C(15'hb, 16'tb)))
//│ --------------
//│ 20'33_callres:
//│ 	20'33_callres[+mapa:7^30] < ([]: 8'lsa)
//│ 	([]: C(([]: 17'22_callres), ([]: 18'25_callres))) < [-mapb:8^31]20'33_callres
//│ --------------
//│ 1'mapa:
//│ 	1'mapa[-mapa:7^13] < ([]: ([]: 10'ta) => ([]: 12'15_callres))
//│ 	1'mapa[-mapa:7^30] < ([]: ([]: 20'33_callres) => ([]: 21'34_callres))
//│ 	([]: ([]: 8'lsa) => ([]: 13'17_matchres)) < []1'mapa
//│ --------------
//│ 6'5_callres:
//│ 	([]: S(([]: N), ([]: 6'5_callres))) < [-sum:6^3]6'5_callres
//│ --------------
//│ 21'34_callres:
//│ 	21'34_callres[+sum:6^29] < ([]: 3'ls)
//│ 	([]: C(([]: 11'12_callres), ([]: 12'15_callres))) < [-mapa:7^30]21'34_callres
//│ --------------
//│ 13'17_matchres:
//│ 	13'17_matchres[] < ([-mapa:7^13]: 12'15_callres)
//│ 	13'17_matchres[] < ([-mapa:7^30]: 21'34_callres)
//│ 	([]: C(([]: 11'12_callres), ([]: 12'15_callres))) < []13'17_matchres
//│ --------------
//│ 2'mapb:
//│ 	2'mapb[-mapb:8^23] < ([]: ([]: 16'tb) => ([]: 18'25_callres))
//│ 	2'mapb[-mapb:8^31] < ([]: ([]: NoProd) => ([]: 20'33_callres))
//│ 	([]: ([]: 14'lsb) => ([]: 19'27_matchres)) < []2'mapb
//│ --------------
//│ 17'22_callres:
//│ 	17'22_callres[-mapb:8^23 · -mapb:8^31 · +mapa:7^30 · +mapa:7^13] < ([]: 9'ha)
//│ 	17'22_callres[-mapb:8^31 · +mapa:7^30] < ([]: 9'ha)
//│ --------------
//│ 22'35_callres:
//│ 	([]: S(([]: N), ([]: 6'5_callres))) < [-sum:6^29]22'35_callres
//│ --------------
//│ 12'15_callres:
//│ 	12'15_callres[-mapa:7^13 · -mapa:7^30 · +sum:6^29 · +sum:6^3] < ([]: 5't)
//│ 	12'15_callres[-mapa:7^30 · +sum:6^29] < ([]: 5't)
//│ 	([]: C(([]: 11'12_callres), ([]: 12'15_callres))) < [-mapa:7^13]12'15_callres
//│ --------------
//│ 7'7_matchres:
//│ 	7'7_matchres[] < ([-sum:6^3]: 6'5_callres)
//│ 	7'7_matchres[] < ([-sum:6^29]: 22'35_callres)
//│ 	([]: S(([]: N), ([]: 6'5_callres))) < []7'7_matchres
//│ --------------
//│ 3'ls:
//│ 	3'ls[] < ([]: Destruct(C(4'h, 5't)))
//│ 	([+sum:6^29 · -mapa:7^30 · -mapa:7^13]: C(([]: 11'12_callres), ([]: 12'15_callres))) < [+sum:6^3]3'ls
//│ 	([-mapa:7^30]: C(([]: 11'12_callres), ([]: 12'15_callres))) < [+sum:6^29]3'ls
//│ --------------
//│ 18'25_callres:
//│ 	18'25_callres[-mapb:8^23 · -mapb:8^31 · +mapa:7^30 · +mapa:7^13] < ([]: 10'ta)
//│ 	18'25_callres[-mapb:8^31 · +mapa:7^30] < ([]: 10'ta)
//│ 	([]: C(([]: 17'22_callres), ([]: 18'25_callres))) < [-mapb:8^23]18'25_callres
//│ --------------
//│ 16'tb:
//│ 	16'tb[+mapb:8^23] < ([]: 14'lsb)
//│ --------------
//│ 11'12_callres:
//│ 	11'12_callres[-mapa:7^13 · -mapa:7^30 · +sum:6^29 · +sum:6^3] < ([]: 4'h)
//│ 	11'12_callres[-mapa:7^30 · +sum:6^29] < ([]: 4'h)
//│ --------------
//│ 8'lsa:
//│ 	8'lsa[] < ([]: Destruct(C(9'ha, 10'ta)))
//│ 	([+mapa:7^30 · -mapb:8^31 · -mapb:8^23]: C(([]: 17'22_callres), ([]: 18'25_callres))) < [+mapa:7^13]8'lsa
//│ 	([-mapb:8^31]: C(([]: 17'22_callres), ([]: 18'25_callres))) < [+mapa:7^30]8'lsa
//│ --------------
//│ 19'27_matchres:
//│ 	19'27_matchres[] < ([-mapb:8^23]: 18'25_callres)
//│ 	19'27_matchres[] < ([-mapb:8^31]: 20'33_callres)
//│ 	([]: C(([]: 17'22_callres), ([]: 18'25_callres))) < []19'27_matchres
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


if C(A, B(C)) is
    C(a, b) then D(b)
//│ |#if| |C|(|A|,| |B|(|C|)|)| |is|→|C|(|a|,| |b|)| |#then| |D|(|b|)|←|
//│ Parsed: {if C (A, B (C,),) is ‹(C (a, b,)) then D (b,)›}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ case [C [A] [B [C]]] of {
//│ 	C a:6 b:7 => [D b:7^5]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: D(([]: 1'b))) <: ([]: 2'7_matchres)
//│ ([]: C(([]: A), ([]: B(([]: C))))) <: ([]: Destruct(C(0'a, 1'b)))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'a:
//│ 	([]: A) < []0'a
//│ --------------
//│ 1'b:
//│ 	([]: B(([]: C))) < []1'b
//│ --------------
//│ 2'7_matchres:
//│ 	([]: D(([]: 1'b))) < []2'7_matchres
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<
//│



let rec p = C(C(C(p)))
fun ca(x) = if x is
    C(a) then cb(a)
fun cb(x) = if x is
    C(b) then ca(b)
ca(p)
//│ |#let| |#rec| |p| |#=| |C|(|C|(|C|(|p|)|)|)|↵|#fun| |ca|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |cb|(|a|)|←|↵|#fun| |cb|(|x|)| |#=| |#if| |x| |is|→|C|(|b|)| |#then| |ca|(|b|)|←|↵|ca|(|p|)|
//│ Parsed: {let rec p = C (C (C (p,),),); fun ca = x, => if x is ‹(C (a,)) then cb (a,)›; fun cb = x, => if x is ‹(C (b,)) then ca (b,)›; ca (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C [C [C p:6^1]]]
//│ def ca:7 = (fun x:9 -> case x:9^5 of {
//│ 	C a:10 => (cb:8^6 a:10^7)})
//│ def cb:8 = (fun x:11 -> case x:11^11 of {
//│ 	C b:12 => (ca:7^12 b:12^13)})
//│ (ca:7^17 p:6^18)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([ca:7^17]: 1'ca) <: ([]: ([p:6^18]: 0'p) => ([]: 11'19_callres))
//│ ([]: ([]: 7'x) => ([]: 10'15_matchres)) <: ([]: 2'cb)
//│ ([]: 9'14_callres) <: ([]: 10'15_matchres)
//│ ([]: 7'x) <: ([]: Destruct(C(8'b)))
//│ ([ca:7^12]: 1'ca) <: ([]: ([]: 8'b) => ([]: 9'14_callres))
//│ ([]: ([]: 3'x) => ([]: 6'9_matchres)) <: ([]: 1'ca)
//│ ([]: 5'8_callres) <: ([]: 6'9_matchres)
//│ ([]: 3'x) <: ([]: Destruct(C(4'a)))
//│ ([cb:8^6]: 2'cb) <: ([]: ([]: 4'a) => ([]: 5'8_callres))
//│ ([]: C(([]: C(([]: C(([p:6^1]: 0'p))))))) <: ([]: 0'p)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(C(0'p))) <: 3'x
//│ 	[-p:6^1 · -p:6^1 · -p:6^18 · +ca:7^17 · +cb:8^6 · +ca:7^12 · +cb:8^6 · +ca:7^12 · +cb:8^6 · +ca:7^12]  --->  [-p:6^18 · +ca:7^17]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'p:
//│ 	0'p[-p:6^1 · -p:6^1 · -p:6^18 · +ca:7^17 · +cb:8^6 · +ca:7^12 · +cb:8^6 · +ca:7^12 · +cb:8^6] < ([]: 8'b)
//│ 	0'p[-p:6^1 · -p:6^18 · +ca:7^17 · +cb:8^6 · +ca:7^12] < ([]: 4'a)
//│ 	0'p[-p:6^18 · +ca:7^17] < ([]: 3'x)
//│ 	([]: C(([]: C(([]: C(([p:6^1]: 0'p))))))) < []0'p
//│ --------------
//│ 5'8_callres:
//│ 	5'8_callres[] < ([]: 6'9_matchres)
//│ --------------
//│ 10'15_matchres:
//│ 	10'15_matchres[] < ([-cb:8^6]: 5'8_callres)
//│ --------------
//│ 1'ca:
//│ 	1'ca[-ca:7^12] < ([]: ([]: 8'b) => ([]: 9'14_callres))
//│ 	1'ca[-ca:7^17] < ([]: ([p:6^18]: 0'p) => ([]: 11'19_callres))
//│ 	([]: ([]: 3'x) => ([]: 6'9_matchres)) < []1'ca
//│ --------------
//│ 6'9_matchres:
//│ 	6'9_matchres[] < ([-ca:7^17]: 11'19_callres)
//│ 	6'9_matchres[] < ([-ca:7^12]: 9'14_callres)
//│ --------------
//│ 9'14_callres:
//│ 	9'14_callres[] < ([]: 10'15_matchres)
//│ --------------
//│ 2'cb:
//│ 	2'cb[-cb:8^6] < ([]: ([]: 4'a) => ([]: 5'8_callres))
//│ 	([]: ([]: 7'x) => ([]: 10'15_matchres)) < []2'cb
//│ --------------
//│ 7'x:
//│ 	7'x[] < ([]: Destruct(C(8'b)))
//│ 	([+ca:7^12 · +cb:8^6 · +ca:7^12 · +cb:8^6 · +ca:7^17 · -p:6^18 · -p:6^1]: C(([p:6^1]: 0'p))) < [+cb:8^6]7'x
//│ 	([+ca:7^12 · +cb:8^6 · +ca:7^17 · -p:6^18 · -p:6^1]: C(([]: C(([]: C(([p:6^1]: 0'p))))))) < [+cb:8^6]7'x
//│ 	([+ca:7^17 · -p:6^18]: C(([]: C(([p:6^1]: 0'p))))) < [+cb:8^6]7'x
//│ --------------
//│ 3'x:
//│ 	3'x[] < ([]: Destruct(C(4'a)))
//│ 	([+cb:8^6 · +ca:7^12 · +cb:8^6 · +ca:7^17 · -p:6^18 · -p:6^1]: C(([]: C(([p:6^1]: 0'p))))) < [+ca:7^12]3'x
//│ 	([+cb:8^6 · +ca:7^17 · -p:6^18]: C(([p:6^1]: 0'p))) < [+ca:7^12]3'x
//│ 	([]: C(([]: C(([]: C(([p:6^1]: 0'p))))))) < [-p:6^18 · +ca:7^17]3'x
//│ --------------
//│ 8'b:
//│ 	8'b[+ca:7^12] < ([]: 3'x)
//│ 	([]: C(([]: C(([]: C(([p:6^1]: 0'p))))))) < [-p:6^1 · -p:6^1 · -p:6^18 · +ca:7^17 · +cb:8^6 · +ca:7^12 · +cb:8^6 · +ca:7^12 · +cb:8^6]8'b
//│ 	([+cb:8^6 · +ca:7^12 · +cb:8^6 · +ca:7^17 · -p:6^18 · -p:6^1]: C(([]: C(([p:6^1]: 0'p))))) < []8'b
//│ 	([+cb:8^6 · +ca:7^17 · -p:6^18]: C(([p:6^1]: 0'p))) < []8'b
//│ --------------
//│ 4'a:
//│ 	4'a[+cb:8^6] < ([]: 7'x)
//│ 	([+ca:7^12 · +cb:8^6 · +ca:7^12 · +cb:8^6 · +ca:7^17 · -p:6^18 · -p:6^1]: C(([p:6^1]: 0'p))) < []4'a
//│ 	([]: C(([]: C(([]: C(([p:6^1]: 0'p))))))) < [-p:6^1 · -p:6^18 · +ca:7^17 · +cb:8^6 · +ca:7^12]4'a
//│ 	([+ca:7^17 · -p:6^18]: C(([]: C(([p:6^1]: 0'p))))) < []4'a
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


// def p:6^18 =
//      ... p:6^1 ~> p:6^18.p:6^1 ...

// def p:6^18.p:6^1 =
//      ... p:6^1 ~> p:6^18 ...

// def ca:7^17
//      ... 



fun c1(x1) = if x1 is
    C(a) then c2(a)
fun c2(x2) = if x2 is
    C(b) then c1(b)
let p1 = C(C(C(p2)))
let p2 = C(p1)
c1(p1)
//│ |#fun| |c1|(|x1|)| |#=| |#if| |x1| |is|→|C|(|a|)| |#then| |c2|(|a|)|←|↵|#fun| |c2|(|x2|)| |#=| |#if| |x2| |is|→|C|(|b|)| |#then| |c1|(|b|)|←|↵|#let| |p1| |#=| |C|(|C|(|C|(|p2|)|)|)|↵|#let| |p2| |#=| |C|(|p1|)|↵|c1|(|p1|)|
//│ Parsed: {fun c1 = x1, => if x1 is ‹(C (a,)) then c2 (a,)›; fun c2 = x2, => if x2 is ‹(C (b,)) then c1 (b,)›; let p1 = C (C (C (p2,),),); let p2 = C (p1,); c1 (p1,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def c1:6 = (fun x1:10 -> case x1:10^1 of {
//│ 	C a:11 => (c2:7^2 a:11^3)})
//│ def c2:7 = (fun x2:12 -> case x2:12^7 of {
//│ 	C b:13 => (c1:6^8 b:13^9)})
//│ def p1:8 = [C [C [C p2:9^13]]]
//│ def p2:9 = [C p1:8^17]
//│ (c1:6^19 p1:8^20)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([c1:6^19]: 0'c1) <: ([]: ([p1:8^20]: 2'p1) => ([]: 12'21_callres))
//│ ([]: C(([p1:8^17]: 2'p1))) <: ([]: 3'p2)
//│ ([]: C(([]: C(([]: C(([p2:9^13]: 3'p2))))))) <: ([]: 2'p1)
//│ ([]: ([]: 8'x2) => ([]: 11'11_matchres)) <: ([]: 1'c2)
//│ ([]: 10'10_callres) <: ([]: 11'11_matchres)
//│ ([]: 8'x2) <: ([]: Destruct(C(9'b)))
//│ ([c1:6^8]: 0'c1) <: ([]: ([]: 9'b) => ([]: 10'10_callres))
//│ ([]: ([]: 4'x1) => ([]: 7'5_matchres)) <: ([]: 0'c1)
//│ ([]: 6'4_callres) <: ([]: 7'5_matchres)
//│ ([]: 4'x1) <: ([]: Destruct(C(5'a)))
//│ ([c2:7^2]: 1'c2) <: ([]: ([]: 5'a) => ([]: 6'4_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(3'p2)) <: 8'x2
//│ 	[-p1:8^17 · -p2:9^13 · -p1:8^20 · +c1:6^19 · +c2:7^2 · +c1:6^8 · +c2:7^2 · +c1:6^8 · +c2:7^2]  --->  [-p1:8^20 · +c1:6^19 · +c2:7^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'c1:
//│ 	0'c1[-c1:6^8] < ([]: ([]: 9'b) => ([]: 10'10_callres))
//│ 	0'c1[-c1:6^19] < ([]: ([p1:8^20]: 2'p1) => ([]: 12'21_callres))
//│ 	([]: ([]: 4'x1) => ([]: 7'5_matchres)) < []0'c1
//│ --------------
//│ 5'a:
//│ 	5'a[+c2:7^2] < ([]: 8'x2)
//│ 	([+c1:6^8 · +c2:7^2 · +c1:6^8 · +c2:7^2 · +c1:6^19 · -p1:8^20 · -p2:9^13 · -p1:8^17]: C(([]: C(([p2:9^13]: 3'p2))))) < []5'a
//│ 	([]: C(([p1:8^17]: 2'p1))) < [-p2:9^13 · -p1:8^20 · +c1:6^19 · +c2:7^2 · +c1:6^8]5'a
//│ 	([+c1:6^19 · -p1:8^20]: C(([]: C(([p2:9^13]: 3'p2))))) < []5'a
//│ --------------
//│ 10'10_callres:
//│ 	10'10_callres[] < ([]: 11'11_matchres)
//│ --------------
//│ 1'c2:
//│ 	1'c2[-c2:7^2] < ([]: ([]: 5'a) => ([]: 6'4_callres))
//│ 	([]: ([]: 8'x2) => ([]: 11'11_matchres)) < []1'c2
//│ --------------
//│ 6'4_callres:
//│ 	6'4_callres[] < ([]: 7'5_matchres)
//│ --------------
//│ 9'b:
//│ 	9'b[+c1:6^8] < ([]: 4'x1)
//│ 	([]: C(([]: C(([]: C(([p2:9^13]: 3'p2))))))) < [-p1:8^17 · -p2:9^13 · -p1:8^20 · +c1:6^19 · +c2:7^2 · +c1:6^8 · +c2:7^2]9'b
//│ 	([+c2:7^2 · +c1:6^19 · -p1:8^20]: C(([p2:9^13]: 3'p2))) < []9'b
//│ --------------
//│ 2'p1:
//│ 	2'p1[-p1:8^17 · -p2:9^13 · -p1:8^20 · +c1:6^19 · +c2:7^2 · +c1:6^8 · +c2:7^2] < ([]: 9'b)
//│ 	2'p1[-p1:8^20 · +c1:6^19] < ([]: 4'x1)
//│ 	([]: C(([]: C(([]: C(([p2:9^13]: 3'p2))))))) < []2'p1
//│ --------------
//│ 7'5_matchres:
//│ 	7'5_matchres[] < ([-c1:6^19]: 12'21_callres)
//│ 	7'5_matchres[] < ([-c1:6^8]: 10'10_callres)
//│ --------------
//│ 3'p2:
//│ 	3'p2[-p2:9^13 · -p1:8^20 · +c1:6^19 · +c2:7^2 · +c1:6^8] < ([]: 5'a)
//│ 	([]: C(([p1:8^17]: 2'p1))) < []3'p2
//│ --------------
//│ 11'11_matchres:
//│ 	11'11_matchres[] < ([-c2:7^2]: 6'4_callres)
//│ --------------
//│ 8'x2:
//│ 	8'x2[] < ([]: Destruct(C(9'b)))
//│ 	([+c1:6^8 · +c2:7^2 · +c1:6^19 · -p1:8^20 · -p2:9^13]: C(([p1:8^17]: 2'p1))) < [+c2:7^2]8'x2
//│ 	([+c1:6^19 · -p1:8^20]: C(([]: C(([p2:9^13]: 3'p2))))) < [+c2:7^2]8'x2
//│ --------------
//│ 4'x1:
//│ 	4'x1[] < ([]: Destruct(C(5'a)))
//│ 	([+c2:7^2 · +c1:6^8 · +c2:7^2 · +c1:6^19 · -p1:8^20 · -p2:9^13 · -p1:8^17]: C(([]: C(([]: C(([p2:9^13]: 3'p2))))))) < [+c1:6^8]4'x1
//│ 	([+c2:7^2 · +c1:6^19 · -p1:8^20]: C(([p2:9^13]: 3'p2))) < [+c1:6^8]4'x1
//│ 	([]: C(([]: C(([]: C(([p2:9^13]: 3'p2))))))) < [-p1:8^20 · +c1:6^19]4'x1
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


fun ff(x) = if x is
    K then T
    KK then TT
    KKKK then TTTT
fun map(ls) = if ls is
    C(h, t) then C(ff(h), map(t))
    N then N
let l = C(K, C(KK, C(KKKK, N)))
map(l)
//│ |#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|ff|(|h|)|,| |map|(|t|)|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|l|)|
//│ Parsed: {fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; fun map = ls, => if ls is ‹(C (h, t,)) then C (ff (h,), map (t,),); (N) then N›; let l = C (K, C (KK, C (KKKK, N,),),); map (l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def ff:6 = (fun x:9 -> case x:9^1 of {
//│ 	K => [T]
//│ 	| KK => [TT]
//│ 	| KKKK => [TTTT]})
//│ def map:7 = (fun ls:10 -> case ls:10^7 of {
//│ 	C h:11 t:12 => [C (ff:6^8 h:11^9) (map:7^11 t:12^12)]
//│ 	| N => [N]})
//│ def l:8 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ (map:7^25 l:8^26)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([map:7^25]: 1'map) <: ([]: ([l:8^26]: 2'l) => ([]: 11'27_callres))
//│ ([]: C(([]: K), ([]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))))) <: ([]: 2'l)
//│ ([]: ([]: 5'ls) => ([]: 10'16_matchres)) <: ([]: 1'map)
//│ ([]: N) <: ([]: 10'16_matchres)
//│ ([]: C(([]: 8'10_callres), ([]: 9'13_callres))) <: ([]: 10'16_matchres)
//│ ([]: 5'ls) <: ([]: Destruct(C(6'h, 7't), N))
//│ ([map:7^11]: 1'map) <: ([]: ([]: 7't) => ([]: 9'13_callres))
//│ ([ff:6^8]: 0'ff) <: ([]: ([]: 6'h) => ([]: 8'10_callres))
//│ ([]: ([]: 3'x) => ([]: 4'5_matchres)) <: ([]: 0'ff)
//│ ([]: TTTT) <: ([]: 4'5_matchres)
//│ ([]: TT) <: ([]: 4'5_matchres)
//│ ([]: T) <: ([]: 4'5_matchres)
//│ ([]: 3'x) <: ([]: Destruct(K, KK, KKKK))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'ff:
//│ 	0'ff[-ff:6^8] < ([]: ([]: 6'h) => ([]: 8'10_callres))
//│ 	([]: ([]: 3'x) => ([]: 4'5_matchres)) < []0'ff
//│ --------------
//│ 5'ls:
//│ 	5'ls[] < ([]: Destruct(C(6'h, 7't), N))
//│ 	([+map:7^11 · +map:7^11 · +map:7^25 · -l:8^26]: N) < [+map:7^11]5'ls
//│ 	([+map:7^11 · +map:7^25 · -l:8^26]: C(([]: KKKK), ([]: N))) < [+map:7^11]5'ls
//│ 	([+map:7^25 · -l:8^26]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))) < [+map:7^11]5'ls
//│ 	([]: C(([]: K), ([]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))))) < [-l:8^26 · +map:7^25]5'ls
//│ --------------
//│ 10'16_matchres:
//│ 	10'16_matchres[] < ([-map:7^11]: 9'13_callres)
//│ 	10'16_matchres[] < ([-map:7^25]: 11'27_callres)
//│ 	([]: C(([]: 8'10_callres), ([]: 9'13_callres))) < []10'16_matchres
//│ 	([]: N) < []10'16_matchres
//│ --------------
//│ 1'map:
//│ 	1'map[-map:7^11] < ([]: ([]: 7't) => ([]: 9'13_callres))
//│ 	1'map[-map:7^25] < ([]: ([l:8^26]: 2'l) => ([]: 11'27_callres))
//│ 	([]: ([]: 5'ls) => ([]: 10'16_matchres)) < []1'map
//│ --------------
//│ 6'h:
//│ 	6'h[+ff:6^8] < ([]: 3'x)
//│ 	([+map:7^11 · +map:7^11 · +map:7^25 · -l:8^26]: KKKK) < []6'h
//│ 	([+map:7^11 · +map:7^25 · -l:8^26]: KK) < []6'h
//│ 	([+map:7^25 · -l:8^26]: K) < []6'h
//│ --------------
//│ 9'13_callres:
//│ 	([]: N) < [-map:7^11]9'13_callres
//│ 	([]: C(([]: 8'10_callres), ([]: 9'13_callres))) < [-map:7^11]9'13_callres
//│ --------------
//│ 2'l:
//│ 	2'l[-l:8^26 · +map:7^25] < ([]: 5'ls)
//│ 	([]: C(([]: K), ([]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))))) < []2'l
//│ --------------
//│ 7't:
//│ 	7't[+map:7^11] < ([]: 5'ls)
//│ 	([+map:7^11 · +map:7^11 · +map:7^25 · -l:8^26]: N) < []7't
//│ 	([+map:7^11 · +map:7^25 · -l:8^26]: C(([]: KKKK), ([]: N))) < []7't
//│ 	([+map:7^25 · -l:8^26]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))) < []7't
//│ --------------
//│ 3'x:
//│ 	3'x[] < ([]: Destruct(K, KK, KKKK))
//│ 	([+map:7^25 · -l:8^26]: K) < [+ff:6^8]3'x
//│ 	([+map:7^11 · +map:7^25 · -l:8^26]: KK) < [+ff:6^8]3'x
//│ 	([+map:7^11 · +map:7^11 · +map:7^25 · -l:8^26]: KKKK) < [+ff:6^8]3'x
//│ --------------
//│ 11'27_callres:
//│ 	([]: C(([]: 8'10_callres), ([]: 9'13_callres))) < [-map:7^25]11'27_callres
//│ 	([]: N) < [-map:7^25]11'27_callres
//│ --------------
//│ 8'10_callres:
//│ 	([]: T) < [-ff:6^8]8'10_callres
//│ 	([]: TT) < [-ff:6^8]8'10_callres
//│ 	([]: TTTT) < [-ff:6^8]8'10_callres
//│ --------------
//│ 4'5_matchres:
//│ 	4'5_matchres[] < ([-ff:6^8]: 8'10_callres)
//│ 	([]: T) < []4'5_matchres
//│ 	([]: TT) < []4'5_matchres
//│ 	([]: TTTT) < []4'5_matchres
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


fun map(ls) = if ls is
    C(h, t) then C(
        (if h is
            K then T
            KK then TT
            KKKK then TTTT
        ),
        map(t)
    )
    N then N
let l = C(K, C(KK, C(KKKK, N)))
map(l)
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|→|(|#if| |h| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|)|,|↵|map|(|t|)|←|↵|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|l|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (h, t,)) then C ('(' if h is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›, ')', map (t,),); (N) then N›; let l = C (K, C (KK, C (KKKK, N,),),); map (l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = (fun ls:8 -> case ls:8^1 of {
//│ 	C h:9 t:10 => [C case h:9^2 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} (map:6^7 t:10^8)]
//│ 	| N => [N]})
//│ def l:7 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ (map:6^21 l:7^22)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([map:6^21]: 0'map) <: ([]: ([l:7^22]: 1'l) => ([]: 8'23_callres))
//│ ([]: C(([]: K), ([]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))))) <: ([]: 1'l)
//│ ([]: ([]: 2'ls) => ([]: 7'12_matchres)) <: ([]: 0'map)
//│ ([]: N) <: ([]: 7'12_matchres)
//│ ([]: C(([]: 5'6_matchres), ([]: 6'9_callres))) <: ([]: 7'12_matchres)
//│ ([]: 2'ls) <: ([]: Destruct(C(3'h, 4't), N))
//│ ([map:6^7]: 0'map) <: ([]: ([]: 4't) => ([]: 6'9_callres))
//│ ([]: TTTT) <: ([]: 5'6_matchres)
//│ ([]: TT) <: ([]: 5'6_matchres)
//│ ([]: T) <: ([]: 5'6_matchres)
//│ ([]: 3'h) <: ([]: Destruct(K, KK, KKKK))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'map:
//│ 	0'map[-map:6^7] < ([]: ([]: 4't) => ([]: 6'9_callres))
//│ 	0'map[-map:6^21] < ([]: ([l:7^22]: 1'l) => ([]: 8'23_callres))
//│ 	([]: ([]: 2'ls) => ([]: 7'12_matchres)) < []0'map
//│ --------------
//│ 5'6_matchres:
//│ 	([]: T) < []5'6_matchres
//│ 	([]: TT) < []5'6_matchres
//│ 	([]: TTTT) < []5'6_matchres
//│ --------------
//│ 1'l:
//│ 	1'l[-l:7^22 · +map:6^21] < ([]: 2'ls)
//│ 	([]: C(([]: K), ([]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))))) < []1'l
//│ --------------
//│ 6'9_callres:
//│ 	([]: N) < [-map:6^7]6'9_callres
//│ 	([]: C(([]: 5'6_matchres), ([]: 6'9_callres))) < [-map:6^7]6'9_callres
//│ --------------
//│ 2'ls:
//│ 	2'ls[] < ([]: Destruct(C(3'h, 4't), N))
//│ 	([+map:6^7 · +map:6^7 · +map:6^21 · -l:7^22]: N) < [+map:6^7]2'ls
//│ 	([+map:6^7 · +map:6^21 · -l:7^22]: C(([]: KKKK), ([]: N))) < [+map:6^7]2'ls
//│ 	([+map:6^21 · -l:7^22]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))) < [+map:6^7]2'ls
//│ 	([]: C(([]: K), ([]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))))) < [-l:7^22 · +map:6^21]2'ls
//│ --------------
//│ 7'12_matchres:
//│ 	7'12_matchres[] < ([-map:6^7]: 6'9_callres)
//│ 	7'12_matchres[] < ([-map:6^21]: 8'23_callres)
//│ 	([]: C(([]: 5'6_matchres), ([]: 6'9_callres))) < []7'12_matchres
//│ 	([]: N) < []7'12_matchres
//│ --------------
//│ 3'h:
//│ 	3'h[] < ([]: Destruct(K, KK, KKKK))
//│ 	([+map:6^7 · +map:6^7 · +map:6^21 · -l:7^22]: KKKK) < []3'h
//│ 	([+map:6^7 · +map:6^21 · -l:7^22]: KK) < []3'h
//│ 	([+map:6^21 · -l:7^22]: K) < []3'h
//│ --------------
//│ 8'23_callres:
//│ 	([]: C(([]: 5'6_matchres), ([]: 6'9_callres))) < [-map:6^21]8'23_callres
//│ 	([]: N) < [-map:6^21]8'23_callres
//│ --------------
//│ 4't:
//│ 	4't[+map:6^7] < ([]: 2'ls)
//│ 	([+map:6^7 · +map:6^7 · +map:6^21 · -l:7^22]: N) < []4't
//│ 	([+map:6^7 · +map:6^21 · -l:7^22]: C(([]: KKKK), ([]: N))) < []4't
//│ 	([+map:6^21 · -l:7^22]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))) < []4't
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


fun sum(ls) = if ls is
    C(h, t) then S(N, sum(t))
    N then N
fun mapa(lsa) = if lsa is
    C(ha, ta) then C(primitive(ha), mapa(ta))
    N then N
fun mapb(lsb) = if lsb is
    C(hb, tb) then C(primitive(hb), mapb(tb))
    N then N
sum(mapa(mapb(primitive)))
//│ |#fun| |sum|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |S|(|N|,| |sum|(|t|)|)|↵|N| |#then| |N|←|↵|#fun| |mapa|(|lsa|)| |#=| |#if| |lsa| |is|→|C|(|ha|,| |ta|)| |#then| |C|(|primitive|(|ha|)|,| |mapa|(|ta|)|)|↵|N| |#then| |N|←|↵|#fun| |mapb|(|lsb|)| |#=| |#if| |lsb| |is|→|C|(|hb|,| |tb|)| |#then| |C|(|primitive|(|hb|)|,| |mapb|(|tb|)|)|↵|N| |#then| |N|←|↵|sum|(|mapa|(|mapb|(|primitive|)|)|)|
//│ Parsed: {fun sum = ls, => if ls is ‹(C (h, t,)) then S (N, sum (t,),); (N) then N›; fun mapa = lsa, => if lsa is ‹(C (ha, ta,)) then C (primitive (ha,), mapa (ta,),); (N) then N›; fun mapb = lsb, => if lsb is ‹(C (hb, tb,)) then C (primitive (hb,), mapb (tb,),); (N) then N›; sum (mapa (mapb (primitive,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def sum:6 = (fun ls:9 -> case ls:9^1 of {
//│ 	C h:10 t:11 => [S [N] (sum:6^3 t:11^4)]
//│ 	| N => [N]})
//│ def mapa:7 = (fun lsa:12 -> case lsa:12^10 of {
//│ 	C ha:13 ta:14 => [C (primitive:3^11 ha:13^12) (mapa:7^14 ta:14^15)]
//│ 	| N => [N]})
//│ def mapb:8 = (fun lsb:15 -> case lsb:15^21 of {
//│ 	C hb:16 tb:17 => [C (primitive:3^22 hb:16^23) (mapb:8^25 tb:17^26)]
//│ 	| N => [N]})
//│ (sum:6^32 (mapa:7^33 (mapb:8^34 primitive:3^35)))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([sum:6^32]: 0'sum) <: ([]: ([]: 21'37_callres) => ([]: 22'38_callres))
//│ ([mapa:7^33]: 1'mapa) <: ([]: ([]: 20'36_callres) => ([]: 21'37_callres))
//│ ([mapb:8^34]: 2'mapb) <: ([]: ([]: NoProd) => ([]: 20'36_callres))
//│ ([]: ([]: 14'lsb) => ([]: 19'30_matchres)) <: ([]: 2'mapb)
//│ ([]: N) <: ([]: 19'30_matchres)
//│ ([]: C(([]: 17'24_callres), ([]: 18'27_callres))) <: ([]: 19'30_matchres)
//│ ([]: 14'lsb) <: ([]: Destruct(C(15'hb, 16'tb), N))
//│ ([mapb:8^25]: 2'mapb) <: ([]: ([]: 16'tb) => ([]: 18'27_callres))
//│ ([]: ([]: 8'lsa) => ([]: 13'19_matchres)) <: ([]: 1'mapa)
//│ ([]: N) <: ([]: 13'19_matchres)
//│ ([]: C(([]: 11'13_callres), ([]: 12'16_callres))) <: ([]: 13'19_matchres)
//│ ([]: 8'lsa) <: ([]: Destruct(C(9'ha, 10'ta), N))
//│ ([mapa:7^14]: 1'mapa) <: ([]: ([]: 10'ta) => ([]: 12'16_callres))
//│ ([]: ([]: 3'ls) => ([]: 7'8_matchres)) <: ([]: 0'sum)
//│ ([]: N) <: ([]: 7'8_matchres)
//│ ([]: S(([]: N), ([]: 6'5_callres))) <: ([]: 7'8_matchres)
//│ ([]: 3'ls) <: ([]: Destruct(C(4'h, 5't), N))
//│ ([sum:6^3]: 0'sum) <: ([]: ([]: 5't) => ([]: 6'5_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(11'13_callres, 12'16_callres) <: 3'ls
//│ 	[-mapa:7^14 · -mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3 · +sum:6^3]  --->  [-mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3]
//│ C(17'24_callres, 18'27_callres) <: 8'lsa
//│ 	[-mapb:8^25 · -mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14 · +mapa:7^14]  --->  [-mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'sum:
//│ 	0'sum[-sum:6^3] < ([]: ([]: 5't) => ([]: 6'5_callres))
//│ 	0'sum[-sum:6^32] < ([]: ([]: 21'37_callres) => ([]: 22'38_callres))
//│ 	([]: ([]: 3'ls) => ([]: 7'8_matchres)) < []0'sum
//│ --------------
//│ 5't:
//│ 	5't[+sum:6^3] < ([]: 3'ls)
//│ 	([-mapa:7^14]: C(([]: 11'13_callres), ([]: 12'16_callres))) < [-mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3]5't
//│ 	([-mapa:7^14]: N) < [-mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3]5't
//│ 	([-mapa:7^14]: C(([]: 11'13_callres), ([]: 12'16_callres))) < [-mapa:7^33 · +sum:6^32]5't
//│ 	([-mapa:7^14]: N) < [-mapa:7^33 · +sum:6^32]5't
//│ --------------
//│ 10'ta:
//│ 	10'ta[+mapa:7^14] < ([]: 8'lsa)
//│ 	([-mapb:8^25]: C(([]: 17'24_callres), ([]: 18'27_callres))) < [-mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14]10'ta
//│ 	([-mapb:8^25]: N) < [-mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14]10'ta
//│ 	([-mapb:8^25]: C(([]: 17'24_callres), ([]: 18'27_callres))) < [-mapb:8^34 · +mapa:7^33]10'ta
//│ 	([-mapb:8^25]: N) < [-mapb:8^34 · +mapa:7^33]10'ta
//│ --------------
//│ 14'lsb:
//│ 	14'lsb[] < ([]: Destruct(C(15'hb, 16'tb), N))
//│ --------------
//│ 20'36_callres:
//│ 	20'36_callres[+mapa:7^33] < ([]: 8'lsa)
//│ 	([]: C(([]: 17'24_callres), ([]: 18'27_callres))) < [-mapb:8^34]20'36_callres
//│ 	([]: N) < [-mapb:8^34]20'36_callres
//│ --------------
//│ 1'mapa:
//│ 	1'mapa[-mapa:7^14] < ([]: ([]: 10'ta) => ([]: 12'16_callres))
//│ 	1'mapa[-mapa:7^33] < ([]: ([]: 20'36_callres) => ([]: 21'37_callres))
//│ 	([]: ([]: 8'lsa) => ([]: 13'19_matchres)) < []1'mapa
//│ --------------
//│ 6'5_callres:
//│ 	([]: N) < [-sum:6^3]6'5_callres
//│ 	([]: S(([]: N), ([]: 6'5_callres))) < [-sum:6^3]6'5_callres
//│ --------------
//│ 21'37_callres:
//│ 	21'37_callres[+sum:6^32] < ([]: 3'ls)
//│ 	([]: C(([]: 11'13_callres), ([]: 12'16_callres))) < [-mapa:7^33]21'37_callres
//│ 	([]: N) < [-mapa:7^33]21'37_callres
//│ --------------
//│ 13'19_matchres:
//│ 	13'19_matchres[] < ([-mapa:7^14]: 12'16_callres)
//│ 	13'19_matchres[] < ([-mapa:7^33]: 21'37_callres)
//│ 	([]: C(([]: 11'13_callres), ([]: 12'16_callres))) < []13'19_matchres
//│ 	([]: N) < []13'19_matchres
//│ --------------
//│ 2'mapb:
//│ 	2'mapb[-mapb:8^25] < ([]: ([]: 16'tb) => ([]: 18'27_callres))
//│ 	2'mapb[-mapb:8^34] < ([]: ([]: NoProd) => ([]: 20'36_callres))
//│ 	([]: ([]: 14'lsb) => ([]: 19'30_matchres)) < []2'mapb
//│ --------------
//│ 17'24_callres:
//│ 	17'24_callres[-mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14] < ([]: 9'ha)
//│ 	17'24_callres[-mapb:8^34 · +mapa:7^33] < ([]: 9'ha)
//│ --------------
//│ 22'38_callres:
//│ 	([]: S(([]: N), ([]: 6'5_callres))) < [-sum:6^32]22'38_callres
//│ 	([]: N) < [-sum:6^32]22'38_callres
//│ --------------
//│ 12'16_callres:
//│ 	12'16_callres[-mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3] < ([]: 5't)
//│ 	12'16_callres[-mapa:7^33 · +sum:6^32] < ([]: 5't)
//│ 	([]: N) < [-mapa:7^14]12'16_callres
//│ 	([]: C(([]: 11'13_callres), ([]: 12'16_callres))) < [-mapa:7^14]12'16_callres
//│ --------------
//│ 7'8_matchres:
//│ 	7'8_matchres[] < ([-sum:6^3]: 6'5_callres)
//│ 	7'8_matchres[] < ([-sum:6^32]: 22'38_callres)
//│ 	([]: S(([]: N), ([]: 6'5_callres))) < []7'8_matchres
//│ 	([]: N) < []7'8_matchres
//│ --------------
//│ 3'ls:
//│ 	3'ls[] < ([]: Destruct(C(4'h, 5't), N))
//│ 	([+sum:6^32 · -mapa:7^33 · -mapa:7^14]: N) < [+sum:6^3]3'ls
//│ 	([+sum:6^3 · +sum:6^32 · -mapa:7^33 · -mapa:7^14 · -mapa:7^14]: N) < [+sum:6^3]3'ls
//│ 	([+sum:6^32 · -mapa:7^33 · -mapa:7^14]: C(([]: 11'13_callres), ([]: 12'16_callres))) < [+sum:6^3]3'ls
//│ 	([-mapa:7^33]: N) < [+sum:6^32]3'ls
//│ 	([-mapa:7^33]: C(([]: 11'13_callres), ([]: 12'16_callres))) < [+sum:6^32]3'ls
//│ --------------
//│ 18'27_callres:
//│ 	18'27_callres[-mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14] < ([]: 10'ta)
//│ 	18'27_callres[-mapb:8^34 · +mapa:7^33] < ([]: 10'ta)
//│ 	([]: N) < [-mapb:8^25]18'27_callres
//│ 	([]: C(([]: 17'24_callres), ([]: 18'27_callres))) < [-mapb:8^25]18'27_callres
//│ --------------
//│ 16'tb:
//│ 	16'tb[+mapb:8^25] < ([]: 14'lsb)
//│ --------------
//│ 11'13_callres:
//│ 	11'13_callres[-mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3] < ([]: 4'h)
//│ 	11'13_callres[-mapa:7^33 · +sum:6^32] < ([]: 4'h)
//│ --------------
//│ 8'lsa:
//│ 	8'lsa[] < ([]: Destruct(C(9'ha, 10'ta), N))
//│ 	([+mapa:7^33 · -mapb:8^34 · -mapb:8^25]: N) < [+mapa:7^14]8'lsa
//│ 	([+mapa:7^14 · +mapa:7^33 · -mapb:8^34 · -mapb:8^25 · -mapb:8^25]: N) < [+mapa:7^14]8'lsa
//│ 	([+mapa:7^33 · -mapb:8^34 · -mapb:8^25]: C(([]: 17'24_callres), ([]: 18'27_callres))) < [+mapa:7^14]8'lsa
//│ 	([-mapb:8^34]: N) < [+mapa:7^33]8'lsa
//│ 	([-mapb:8^34]: C(([]: 17'24_callres), ([]: 18'27_callres))) < [+mapa:7^33]8'lsa
//│ --------------
//│ 19'30_matchres:
//│ 	19'30_matchres[] < ([-mapb:8^25]: 18'27_callres)
//│ 	19'30_matchres[] < ([-mapb:8^34]: 20'36_callres)
//│ 	([]: C(([]: 17'24_callres), ([]: 18'27_callres))) < []19'30_matchres
//│ 	([]: N) < []19'30_matchres
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<



let rec p = C(p)
fun c(x) = if x is
    C(a) then c(a)
fun main(cc) = cc(p)
main(c)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |main|(|cc|)| |#=| |cc|(|p|)|↵|main|(|c|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then c (a,)›; fun main = cc, => cc (p,); main (c,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C p:6^1]
//│ def c:7 = (fun x:9 -> case x:9^3 of {
//│ 	C a:10 => (c:7^4 a:10^5)})
//│ def main:8 = (fun cc:11 -> (cc:11^9 p:6^10))
//│ (main:8^13 c:7^14)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([main:8^13]: 2'main) <: ([]: ([c:7^14]: 1'c) => ([]: 9'15_callres))
//│ ([]: ([]: 7'cc) => ([]: 8'11_callres)) <: ([]: 2'main)
//│ ([]: 7'cc) <: ([]: ([p:6^10]: 0'p) => ([]: 8'11_callres))
//│ ([]: ([]: 3'x) => ([]: 6'7_matchres)) <: ([]: 1'c)
//│ ([]: 5'6_callres) <: ([]: 6'7_matchres)
//│ ([]: 3'x) <: ([]: Destruct(C(4'a)))
//│ ([c:7^4]: 1'c) <: ([]: ([]: 4'a) => ([]: 5'6_callres))
//│ ([]: C(([p:6^1]: 0'p))) <: ([]: 0'p)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(0'p) <: 3'x
//│ 	[-p:6^1 · -p:6^10 · -main:8^13 · +c:7^14 · +c:7^4]  --->  [-p:6^10 · -main:8^13 · +c:7^14]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'p:
//│ 	0'p[-p:6^1 · -p:6^10 · -main:8^13 · +c:7^14] < ([]: 4'a)
//│ 	0'p[-p:6^10] < ([-main:8^13 · +c:7^14]: 3'x)
//│ 	([]: C(([p:6^1]: 0'p))) < []0'p
//│ --------------
//│ 5'6_callres:
//│ 	5'6_callres[] < ([]: 6'7_matchres)
//│ --------------
//│ 1'c:
//│ 	1'c[-c:7^4] < ([]: ([]: 4'a) => ([]: 5'6_callres))
//│ 	1'c[-c:7^14 · +main:8^13] < ([]: 7'cc)
//│ 	([]: ([]: 3'x) => ([]: 6'7_matchres)) < []1'c
//│ --------------
//│ 6'7_matchres:
//│ 	6'7_matchres[] < ([-c:7^4]: 5'6_callres)
//│ 	6'7_matchres[-c:7^14 · +main:8^13] < ([]: 8'11_callres)
//│ --------------
//│ 2'main:
//│ 	2'main[-main:8^13] < ([]: ([c:7^14]: 1'c) => ([]: 9'15_callres))
//│ 	([]: ([]: 7'cc) => ([]: 8'11_callres)) < []2'main
//│ --------------
//│ 7'cc:
//│ 	7'cc[] < ([]: ([p:6^10]: 0'p) => ([]: 8'11_callres))
//│ 	([]: ([]: 3'x) => ([]: 6'7_matchres)) < [-c:7^14 · +main:8^13]7'cc
//│ --------------
//│ 3'x:
//│ 	3'x[] < ([]: Destruct(C(4'a)))
//│ 	([]: C(([p:6^1]: 0'p))) < [-p:6^10 · -main:8^13 · +c:7^14]3'x
//│ --------------
//│ 8'11_callres:
//│ 	8'11_callres[] < ([-main:8^13]: 9'15_callres)
//│ --------------
//│ 4'a:
//│ 	4'a[+c:7^4] < ([]: 3'x)
//│ 	([]: C(([p:6^1]: 0'p))) < [-p:6^1 · -p:6^10 · -main:8^13 · +c:7^14]4'a
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


// this path seems also to be sensible
let rec p = C(p)
fun c(x) = if x is
    C(a) then c(a)
fun main(pp) = if pp is
    C(b) then if b is
        C(d) then c(d)
main(p)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |main|(|pp|)| |#=| |#if| |pp| |is|→|C|(|b|)| |#then| |#if| |b| |is|→|C|(|d|)| |#then| |c|(|d|)|←|←|↵|main|(|p|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then c (a,)›; fun main = pp, => if pp is ‹(C (b,)) then if b is ‹(C (d,)) then c (d,)››; main (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C p:6^1]
//│ def c:7 = (fun x:9 -> case x:9^3 of {
//│ 	C a:10 => (c:7^4 a:10^5)})
//│ def main:8 = (fun pp:11 -> case pp:11^9 of {
//│ 	C b:12 => case b:12^10 of {
//│ 		C d:13 => (c:7^11 d:13^12)}})
//│ (main:8^17 p:6^18)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([main:8^17]: 2'main) <: ([]: ([p:6^18]: 0'p) => ([]: 13'19_callres))
//│ ([]: ([]: 7'pp) => ([]: 12'15_matchres)) <: ([]: 2'main)
//│ ([]: 11'14_matchres) <: ([]: 12'15_matchres)
//│ ([]: 7'pp) <: ([]: Destruct(C(8'b)))
//│ ([]: 10'13_callres) <: ([]: 11'14_matchres)
//│ ([]: 8'b) <: ([]: Destruct(C(9'd)))
//│ ([c:7^11]: 1'c) <: ([]: ([]: 9'd) => ([]: 10'13_callres))
//│ ([]: ([]: 3'x) => ([]: 6'7_matchres)) <: ([]: 1'c)
//│ ([]: 5'6_callres) <: ([]: 6'7_matchres)
//│ ([]: 3'x) <: ([]: Destruct(C(4'a)))
//│ ([c:7^4]: 1'c) <: ([]: ([]: 4'a) => ([]: 5'6_callres))
//│ ([]: C(([p:6^1]: 0'p))) <: ([]: 0'p)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(0'p) <: 3'x
//│ 	[-p:6^1 · -p:6^1 · -p:6^1 · -p:6^18 · +main:8^17 · +c:7^11 · +c:7^4]  --->  [-p:6^1 · -p:6^1 · -p:6^18 · +main:8^17 · +c:7^11]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'p:
//│ 	0'p[-p:6^1 · -p:6^1 · -p:6^1 · -p:6^18 · +main:8^17 · +c:7^11] < ([]: 4'a)
//│ 	0'p[-p:6^1 · -p:6^1 · -p:6^18 · +main:8^17] < ([]: 9'd)
//│ 	0'p[-p:6^1 · -p:6^18 · +main:8^17] < ([]: 8'b)
//│ 	0'p[-p:6^18 · +main:8^17] < ([]: 7'pp)
//│ 	([]: C(([p:6^1]: 0'p))) < []0'p
//│ --------------
//│ 5'6_callres:
//│ 	5'6_callres[] < ([]: 6'7_matchres)
//│ --------------
//│ 10'13_callres:
//│ 	10'13_callres[] < ([]: 11'14_matchres)
//│ --------------
//│ 1'c:
//│ 	1'c[-c:7^4] < ([]: ([]: 4'a) => ([]: 5'6_callres))
//│ 	1'c[-c:7^11] < ([]: ([]: 9'd) => ([]: 10'13_callres))
//│ 	([]: ([]: 3'x) => ([]: 6'7_matchres)) < []1'c
//│ --------------
//│ 6'7_matchres:
//│ 	6'7_matchres[] < ([-c:7^4]: 5'6_callres)
//│ 	6'7_matchres[] < ([-c:7^11]: 10'13_callres)
//│ --------------
//│ 9'd:
//│ 	9'd[+c:7^11] < ([]: 3'x)
//│ 	([]: C(([p:6^1]: 0'p))) < [-p:6^1 · -p:6^1 · -p:6^18 · +main:8^17]9'd
//│ --------------
//│ 2'main:
//│ 	2'main[-main:8^17] < ([]: ([p:6^18]: 0'p) => ([]: 13'19_callres))
//│ 	([]: ([]: 7'pp) => ([]: 12'15_matchres)) < []2'main
//│ --------------
//│ 12'15_matchres:
//│ 	12'15_matchres[] < ([-main:8^17]: 13'19_callres)
//│ --------------
//│ 7'pp:
//│ 	7'pp[] < ([]: Destruct(C(8'b)))
//│ 	([]: C(([p:6^1]: 0'p))) < [-p:6^18 · +main:8^17]7'pp
//│ --------------
//│ 3'x:
//│ 	3'x[] < ([]: Destruct(C(4'a)))
//│ 	([+main:8^17 · -p:6^18 · -p:6^1 · -p:6^1]: C(([p:6^1]: 0'p))) < [+c:7^11]3'x
//│ --------------
//│ 11'14_matchres:
//│ 	11'14_matchres[] < ([]: 12'15_matchres)
//│ --------------
//│ 8'b:
//│ 	8'b[] < ([]: Destruct(C(9'd)))
//│ 	([]: C(([p:6^1]: 0'p))) < [-p:6^1 · -p:6^18 · +main:8^17]8'b
//│ --------------
//│ 4'a:
//│ 	4'a[+c:7^4] < ([]: 3'x)
//│ 	([]: C(([p:6^1]: 0'p))) < [-p:6^1 · -p:6^1 · -p:6^1 · -p:6^18 · +main:8^17 · +c:7^11]4'a
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


let rec p = C(p)
let c(x) = if x is
    C(a) then c(a)
fun main(cc, pp) = cc(pp)
main(c, p)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#let| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |main|(|cc|,| |pp|)| |#=| |cc|(|pp|)|↵|main|(|c|,| |p|)|
//│ Parsed: {let rec p = C (p,); let c = x, => if x is ‹(C (a,)) then c (a,)›; fun main = cc, pp, => cc (pp,); main (c, p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C p:6^1]
//│ def c:7 = (fun x:9 -> case x:9^3 of {
//│ 	C a:10 => (c:7^4 a:10^5)})
//│ def main:8 = (fun cc:11 -> (fun pp:12 -> (cc:11^9 pp:12^10)))
//│ ((main:8^14 c:7^15) p:6^17)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 10'16_callres) <: ([]: ([p:6^17]: 0'p) => ([]: 11'18_callres))
//│ ([main:8^14]: 2'main) <: ([]: ([c:7^15]: 1'c) => ([]: 10'16_callres))
//│ ([]: ([]: 7'cc) => ([]: ([]: 8'pp) => ([]: 9'11_callres))) <: ([]: 2'main)
//│ ([]: 7'cc) <: ([]: ([]: 8'pp) => ([]: 9'11_callres))
//│ ([]: ([]: 3'x) => ([]: 6'7_matchres)) <: ([]: 1'c)
//│ ([]: 5'6_callres) <: ([]: 6'7_matchres)
//│ ([]: 3'x) <: ([]: Destruct(C(4'a)))
//│ ([c:7^4]: 1'c) <: ([]: ([]: 4'a) => ([]: 5'6_callres))
//│ ([]: C(([p:6^1]: 0'p))) <: ([]: 0'p)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(0'p) <: 3'x
//│ 	[-p:6^1 · -p:6^17 · +main:8^14 · -main:8^14 · +c:7^15 · +c:7^4]  --->  [-p:6^17 · +main:8^14 · -main:8^14 · +c:7^15]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'p:
//│ 	0'p[-p:6^1 · -p:6^17 · +main:8^14 · -main:8^14 · +c:7^15] < ([]: 4'a)
//│ 	0'p[-p:6^17] < ([+main:8^14]: 8'pp)
//│ 	([]: C(([p:6^1]: 0'p))) < []0'p
//│ --------------
//│ 5'6_callres:
//│ 	5'6_callres[] < ([]: 6'7_matchres)
//│ --------------
//│ 10'16_callres:
//│ 	10'16_callres[] < ([]: ([p:6^17]: 0'p) => ([]: 11'18_callres))
//│ 	([]: ([]: 8'pp) => ([]: 9'11_callres)) < [-main:8^14]10'16_callres
//│ --------------
//│ 1'c:
//│ 	1'c[-c:7^4] < ([]: ([]: 4'a) => ([]: 5'6_callres))
//│ 	1'c[-c:7^15 · +main:8^14] < ([]: 7'cc)
//│ 	([]: ([]: 3'x) => ([]: 6'7_matchres)) < []1'c
//│ --------------
//│ 6'7_matchres:
//│ 	6'7_matchres[] < ([-c:7^4]: 5'6_callres)
//│ 	6'7_matchres[-c:7^15 · +main:8^14] < ([]: 9'11_callres)
//│ --------------
//│ 9'11_callres:
//│ 	9'11_callres[-main:8^14] < ([]: 11'18_callres)
//│ --------------
//│ 2'main:
//│ 	2'main[-main:8^14] < ([]: ([c:7^15]: 1'c) => ([]: 10'16_callres))
//│ 	([]: ([]: 7'cc) => ([]: ([]: 8'pp) => ([]: 9'11_callres))) < []2'main
//│ --------------
//│ 7'cc:
//│ 	7'cc[] < ([]: ([]: 8'pp) => ([]: 9'11_callres))
//│ 	([]: ([]: 3'x) => ([]: 6'7_matchres)) < [-c:7^15 · +main:8^14]7'cc
//│ --------------
//│ 3'x:
//│ 	3'x[] < ([]: Destruct(C(4'a)))
//│ 	([+main:8^14 · -p:6^17]: C(([p:6^1]: 0'p))) < [-main:8^14 · +c:7^15]3'x
//│ --------------
//│ 8'pp:
//│ 	8'pp[] < ([-main:8^14 · +c:7^15]: 3'x)
//│ 	([]: C(([p:6^1]: 0'p))) < [-p:6^17 · +main:8^14]8'pp
//│ --------------
//│ 4'a:
//│ 	4'a[+c:7^4] < ([]: 3'x)
//│ 	([]: C(([p:6^1]: 0'p))) < [-p:6^1 · -p:6^17 · +main:8^14 · -main:8^14 · +c:7^15]4'a
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


fun cons(y) = if y is
    C(aa) then cons(aa)
fun a(x) = b(x)
fun b(x) = c(x)
fun c(x) = d(cons, x)
fun d(cc, x) = cc(x)
let p = C(p)
a(p)
//│ |#fun| |cons|(|y|)| |#=| |#if| |y| |is|→|C|(|aa|)| |#then| |cons|(|aa|)|←|↵|#fun| |a|(|x|)| |#=| |b|(|x|)|↵|#fun| |b|(|x|)| |#=| |c|(|x|)|↵|#fun| |c|(|x|)| |#=| |d|(|cons|,| |x|)|↵|#fun| |d|(|cc|,| |x|)| |#=| |cc|(|x|)|↵|#let| |p| |#=| |C|(|p|)|↵|a|(|p|)|
//│ Parsed: {fun cons = y, => if y is ‹(C (aa,)) then cons (aa,)›; fun a = x, => b (x,); fun b = x, => c (x,); fun c = x, => d (cons, x,); fun d = cc, x, => cc (x,); let p = C (p,); a (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def cons:6 = (fun y:12 -> case y:12^1 of {
//│ 	C aa:13 => (cons:6^2 aa:13^3)})
//│ def a:7 = (fun x:14 -> (b:8^7 x:14^8))
//│ def b:8 = (fun x:15 -> (c:9^11 x:15^12))
//│ def c:9 = (fun x:16 -> ((d:10^15 cons:6^16) x:16^18))
//│ def d:10 = (fun cc:17 -> (fun x:18 -> (cc:17^21 x:18^22)))
//│ def p:11 = [C p:11^26]
//│ (a:7^28 p:11^29)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([a:7^28]: 1'a) <: ([]: ([p:11^29]: 5'p) => ([]: 20'30_callres))
//│ ([]: C(([p:11^26]: 5'p))) <: ([]: 5'p)
//│ ([]: ([]: 17'cc) => ([]: ([]: 18'x) => ([]: 19'23_callres))) <: ([]: 4'd)
//│ ([]: 17'cc) <: ([]: ([]: 18'x) => ([]: 19'23_callres))
//│ ([]: ([]: 14'x) => ([]: 16'19_callres)) <: ([]: 3'c)
//│ ([]: 15'17_callres) <: ([]: ([]: 14'x) => ([]: 16'19_callres))
//│ ([d:10^15]: 4'd) <: ([]: ([cons:6^16]: 0'cons) => ([]: 15'17_callres))
//│ ([]: ([]: 12'x) => ([]: 13'13_callres)) <: ([]: 2'b)
//│ ([c:9^11]: 3'c) <: ([]: ([]: 12'x) => ([]: 13'13_callres))
//│ ([]: ([]: 10'x) => ([]: 11'9_callres)) <: ([]: 1'a)
//│ ([b:8^7]: 2'b) <: ([]: ([]: 10'x) => ([]: 11'9_callres))
//│ ([]: ([]: 6'y) => ([]: 9'5_matchres)) <: ([]: 0'cons)
//│ ([]: 8'4_callres) <: ([]: 9'5_matchres)
//│ ([]: 6'y) <: ([]: Destruct(C(7'aa)))
//│ ([cons:6^2]: 0'cons) <: ([]: ([]: 7'aa) => ([]: 8'4_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(5'p) <: 6'y
//│ 	[-p:11^26 · -p:11^26 · -p:11^29 · +a:7^28 · +b:8^7 · +c:9^11 · +d:10^15 · -d:10^15 · +cons:6^16 · +cons:6^2 · +cons:6^2]  --->  [-p:11^26 · -p:11^29 · +a:7^28 · +b:8^7 · +c:9^11 · +d:10^15 · -d:10^15 · +cons:6^16 · +cons:6^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'cons:
//│ 	0'cons[-cons:6^2] < ([]: ([]: 7'aa) => ([]: 8'4_callres))
//│ 	0'cons[-cons:6^16 · +d:10^15] < ([]: 17'cc)
//│ 	([]: ([]: 6'y) => ([]: 9'5_matchres)) < []0'cons
//│ --------------
//│ 5'p:
//│ 	5'p[-p:11^26 · -p:11^26 · -p:11^29 · +a:7^28 · +b:8^7 · +c:9^11 · +d:10^15 · -d:10^15 · +cons:6^16 · +cons:6^2] < ([]: 7'aa)
//│ 	5'p[-p:11^26 · -p:11^29 · +a:7^28 · +b:8^7 · +c:9^11 · +d:10^15 · -d:10^15 · +cons:6^16] < ([]: 7'aa)
//│ 	5'p[-p:11^29 · +a:7^28] < ([]: 10'x)
//│ 	([]: C(([p:11^26]: 5'p))) < []5'p
//│ --------------
//│ 10'x:
//│ 	10'x[+b:8^7] < ([]: 12'x)
//│ 	([]: C(([p:11^26]: 5'p))) < [-p:11^29 · +a:7^28]10'x
//│ --------------
//│ 14'x:
//│ 	14'x[] < ([+d:10^15]: 18'x)
//│ 	([+b:8^7 · +a:7^28 · -p:11^29]: C(([p:11^26]: 5'p))) < [+c:9^11]14'x
//│ --------------
//│ 1'a:
//│ 	1'a[-a:7^28] < ([]: ([p:11^29]: 5'p) => ([]: 20'30_callres))
//│ 	([]: ([]: 10'x) => ([]: 11'9_callres)) < []1'a
//│ --------------
//│ 6'y:
//│ 	6'y[] < ([]: Destruct(C(7'aa)))
//│ 	([+cons:6^16 · -d:10^15 · +d:10^15 · +c:9^11 · +b:8^7 · +a:7^28 · -p:11^29 · -p:11^26]: C(([p:11^26]: 5'p))) < [+cons:6^2]6'y
//│ 	([+d:10^15 · +c:9^11 · +b:8^7 · +a:7^28 · -p:11^29]: C(([p:11^26]: 5'p))) < [-d:10^15 · +cons:6^16]6'y
//│ --------------
//│ 9'5_matchres:
//│ 	9'5_matchres[] < ([-cons:6^2]: 8'4_callres)
//│ 	9'5_matchres[-cons:6^16 · +d:10^15] < ([]: 19'23_callres)
//│ --------------
//│ 13'13_callres:
//│ 	13'13_callres[] < ([-b:8^7]: 11'9_callres)
//│ --------------
//│ 2'b:
//│ 	2'b[-b:8^7] < ([]: ([]: 10'x) => ([]: 11'9_callres))
//│ 	([]: ([]: 12'x) => ([]: 13'13_callres)) < []2'b
//│ --------------
//│ 17'cc:
//│ 	17'cc[] < ([]: ([]: 18'x) => ([]: 19'23_callres))
//│ 	([]: ([]: 6'y) => ([]: 9'5_matchres)) < [-cons:6^16 · +d:10^15]17'cc
//│ --------------
//│ 12'x:
//│ 	12'x[+c:9^11] < ([]: 14'x)
//│ 	([+a:7^28 · -p:11^29]: C(([p:11^26]: 5'p))) < [+b:8^7]12'x
//│ --------------
//│ 7'aa:
//│ 	7'aa[+cons:6^2] < ([]: 6'y)
//│ 	([]: C(([p:11^26]: 5'p))) < [-p:11^26 · -p:11^26 · -p:11^29 · +a:7^28 · +b:8^7 · +c:9^11 · +d:10^15 · -d:10^15 · +cons:6^16 · +cons:6^2]7'aa
//│ 	([]: C(([p:11^26]: 5'p))) < [-p:11^26 · -p:11^29 · +a:7^28 · +b:8^7 · +c:9^11 · +d:10^15 · -d:10^15 · +cons:6^16]7'aa
//│ --------------
//│ 3'c:
//│ 	3'c[-c:9^11] < ([]: ([]: 12'x) => ([]: 13'13_callres))
//│ 	([]: ([]: 14'x) => ([]: 16'19_callres)) < []3'c
//│ --------------
//│ 18'x:
//│ 	18'x[] < ([-d:10^15 · +cons:6^16]: 6'y)
//│ 	([+c:9^11 · +b:8^7 · +a:7^28 · -p:11^29]: C(([p:11^26]: 5'p))) < [+d:10^15]18'x
//│ --------------
//│ 16'19_callres:
//│ 	16'19_callres[] < ([-c:9^11]: 13'13_callres)
//│ --------------
//│ 11'9_callres:
//│ 	11'9_callres[] < ([-a:7^28]: 20'30_callres)
//│ --------------
//│ 8'4_callres:
//│ 	8'4_callres[] < ([]: 9'5_matchres)
//│ --------------
//│ 19'23_callres:
//│ 	19'23_callres[-d:10^15] < ([]: 16'19_callres)
//│ --------------
//│ 4'd:
//│ 	4'd[-d:10^15] < ([]: ([cons:6^16]: 0'cons) => ([]: 15'17_callres))
//│ 	([]: ([]: 17'cc) => ([]: ([]: 18'x) => ([]: 19'23_callres))) < []4'd
//│ --------------
//│ 15'17_callres:
//│ 	15'17_callres[] < ([]: ([]: 14'x) => ([]: 16'19_callres))
//│ 	([]: ([]: 18'x) => ([]: 19'23_callres)) < [-d:10^15]15'17_callres
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


let p = C(N)
fun c(x) = if C(x) is
    C(a) then c(a)
c(p)
//│ |#let| |p| |#=| |C|(|N|)|↵|#fun| |c|(|x|)| |#=| |#if| |C|(|x|)| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|c|(|p|)|
//│ Parsed: {let p = C (N,); fun c = x, => if C (x,) is ‹(C (a,)) then c (a,)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C [N]]
//│ def c:7 = (fun x:8 -> case [C x:8^3] of {
//│ 	C a:9 => (c:7^5 a:9^6)})
//│ (c:7^10 p:6^11)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([c:7^10]: 1'c) <: ([]: ([p:6^11]: 0'p) => ([]: 6'12_callres))
//│ ([]: ([]: 2'x) => ([]: 5'8_matchres)) <: ([]: 1'c)
//│ ([]: 4'7_callres) <: ([]: 5'8_matchres)
//│ ([]: C(([]: 2'x))) <: ([]: Destruct(C(3'a)))
//│ ([c:7^5]: 1'c) <: ([]: ([]: 3'a) => ([]: 4'7_callres))
//│ ([]: C(([]: N))) <: ([]: 0'p)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(N) <: 2'x
//│ 	[-p:6^11 · +c:7^10 · +c:7^5]  --->  [-p:6^11 · +c:7^10]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'p:
//│ 	0'p[-p:6^11 · +c:7^10] < ([]: 2'x)
//│ 	([]: C(([]: N))) < []0'p
//│ --------------
//│ 5'8_matchres:
//│ 	5'8_matchres[] < ([-c:7^5]: 4'7_callres)
//│ 	5'8_matchres[] < ([-c:7^10]: 6'12_callres)
//│ --------------
//│ 1'c:
//│ 	1'c[-c:7^5] < ([]: ([]: 3'a) => ([]: 4'7_callres))
//│ 	1'c[-c:7^10] < ([]: ([p:6^11]: 0'p) => ([]: 6'12_callres))
//│ 	([]: ([]: 2'x) => ([]: 5'8_matchres)) < []1'c
//│ --------------
//│ 2'x:
//│ 	2'x[] < ([]: 3'a)
//│ 	([]: C(([]: N))) < [-p:6^11 · +c:7^10]2'x
//│ --------------
//│ 3'a:
//│ 	3'a[+c:7^5] < ([]: 2'x)
//│ 	([+c:7^10 · -p:6^11]: C(([]: N))) < []3'a
//│ --------------
//│ 4'7_callres:
//│ 	4'7_callres[] < ([]: 5'8_matchres)
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


// let rec p = C(p)
// let q = p
// fun c(x) = if x is
//     C(a) then a
// fun c2(z) = if z is
//     C(b) then c2(b)
// let main = c(q)
// c2(main)


let rec p = C(p)
fun c(x) = if x is
    C(a) then a
fun c1(xx) = if xx is
    C(aa) then aa
fun c2(z) = if z is
    C(b) then c2(b)
let main = c(p)
fun id(y) = c1(C(y))
c2(id(main))
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |a|←|↵|#fun| |c1|(|xx|)| |#=| |#if| |xx| |is|→|C|(|aa|)| |#then| |aa|←|↵|#fun| |c2|(|z|)| |#=| |#if| |z| |is|→|C|(|b|)| |#then| |c2|(|b|)|←|↵|#let| |main| |#=| |c|(|p|)|↵|#fun| |id|(|y|)| |#=| |c1|(|C|(|y|)|)|↵|c2|(|id|(|main|)|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then a›; fun c1 = xx, => if xx is ‹(C (aa,)) then aa›; fun c2 = z, => if z is ‹(C (b,)) then c2 (b,)›; let main = c (p,); fun id = y, => c1 (C (y,),); c2 (id (main,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = [C p:6^1]
//│ def c:7 = (fun x:12 -> case x:12^3 of {
//│ 	C a:13 => a:13^4})
//│ def c1:8 = (fun xx:14 -> case xx:14^7 of {
//│ 	C aa:15 => aa:15^8})
//│ def c2:9 = (fun z:16 -> case z:16^11 of {
//│ 	C b:17 => (c2:9^12 b:17^13)})
//│ def main:10 = (c:7^17 p:6^18)
//│ def id:11 = (fun y:18 -> (c1:8^20 [C y:18^21]))
//│ (c2:9^25 (id:11^26 main:10^27))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([c2:9^25]: 3'c2) <: ([]: ([]: 19'28_callres) => ([]: 20'29_callres))
//│ ([id:11^26]: 5'id) <: ([]: ([main:10^27]: 4'main) => ([]: 19'28_callres))
//│ ([]: ([]: 17'y) => ([]: 18'23_callres)) <: ([]: 5'id)
//│ ([c1:8^20]: 2'c1) <: ([]: ([]: C(([]: 17'y))) => ([]: 18'23_callres))
//│ ([]: 16'19_callres) <: ([]: 4'main)
//│ ([c:7^17]: 1'c) <: ([]: ([p:6^18]: 0'p) => ([]: 16'19_callres))
//│ ([]: ([]: 12'z) => ([]: 15'15_matchres)) <: ([]: 3'c2)
//│ ([]: 14'14_callres) <: ([]: 15'15_matchres)
//│ ([]: 12'z) <: ([]: Destruct(C(13'b)))
//│ ([c2:9^12]: 3'c2) <: ([]: ([]: 13'b) => ([]: 14'14_callres))
//│ ([]: ([]: 9'xx) => ([]: 11'9_matchres)) <: ([]: 2'c1)
//│ ([]: 10'aa) <: ([]: 11'9_matchres)
//│ ([]: 9'xx) <: ([]: Destruct(C(10'aa)))
//│ ([]: ([]: 6'x) => ([]: 8'5_matchres)) <: ([]: 1'c)
//│ ([]: 7'a) <: ([]: 8'5_matchres)
//│ ([]: 6'x) <: ([]: Destruct(C(7'a)))
//│ ([]: C(([p:6^1]: 0'p))) <: ([]: 0'p)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(0'p) <: 12'z
//│ 	[-p:6^1 · -p:6^1 · -p:6^18 · +c:7^17 · -c:7^17 · -main:10^27 · +id:11^26 · +c1:8^20 · -c1:8^20 · -id:11^26 · +c2:9^25 · +c2:9^12]  --->  [-p:6^1 · -p:6^18 · +c:7^17 · -c:7^17 · -main:10^27 · +id:11^26 · +c1:8^20 · -c1:8^20 · -id:11^26 · +c2:9^25]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'p:
//│ 	0'p[-p:6^1 · -p:6^1 · -p:6^18 · +c:7^17 · -c:7^17 · -main:10^27 · +id:11^26 · +c1:8^20 · -c1:8^20 · -id:11^26 · +c2:9^25] < ([]: 13'b)
//│ 	0'p[-p:6^1 · -p:6^18 · +c:7^17] < ([]: 7'a)
//│ 	0'p[-p:6^18 · +c:7^17] < ([]: 6'x)
//│ 	([]: C(([p:6^1]: 0'p))) < []0'p
//│ --------------
//│ 5'id:
//│ 	5'id[-id:11^26] < ([]: ([main:10^27]: 4'main) => ([]: 19'28_callres))
//│ 	([]: ([]: 17'y) => ([]: 18'23_callres)) < []5'id
//│ --------------
//│ 10'aa:
//│ 	10'aa[] < ([]: 11'9_matchres)
//│ 	([+id:11^26 · -main:10^27 · -c:7^17 · +c:7^17 · -p:6^18 · -p:6^1]: C(([p:6^1]: 0'p))) < [+c1:8^20]10'aa
//│ --------------
//│ 14'14_callres:
//│ 	14'14_callres[] < ([]: 15'15_matchres)
//│ --------------
//│ 1'c:
//│ 	1'c[-c:7^17] < ([]: ([p:6^18]: 0'p) => ([]: 16'19_callres))
//│ 	([]: ([]: 6'x) => ([]: 8'5_matchres)) < []1'c
//│ --------------
//│ 6'x:
//│ 	6'x[] < ([]: Destruct(C(7'a)))
//│ 	([]: C(([p:6^1]: 0'p))) < [-p:6^18 · +c:7^17]6'x
//│ --------------
//│ 9'xx:
//│ 	9'xx[] < ([]: Destruct(C(10'aa)))
//│ 	([+c1:8^20]: C(([]: 17'y))) < []9'xx
//│ --------------
//│ 13'b:
//│ 	13'b[+c2:9^12] < ([]: 12'z)
//│ 	([]: C(([p:6^1]: 0'p))) < [-p:6^1 · -p:6^1 · -p:6^18 · +c:7^17 · -c:7^17 · -main:10^27 · +id:11^26 · +c1:8^20 · -c1:8^20 · -id:11^26 · +c2:9^25]13'b
//│ --------------
//│ 2'c1:
//│ 	2'c1[-c1:8^20] < ([]: ([]: C(([]: 17'y))) => ([]: 18'23_callres))
//│ 	([]: ([]: 9'xx) => ([]: 11'9_matchres)) < []2'c1
//│ --------------
//│ 17'y:
//│ 	17'y[+c1:8^20] < ([]: 10'aa)
//│ 	([-c:7^17 · +c:7^17 · -p:6^18 · -p:6^1]: C(([p:6^1]: 0'p))) < [-main:10^27 · +id:11^26]17'y
//│ --------------
//│ 12'z:
//│ 	12'z[] < ([]: Destruct(C(13'b)))
//│ 	([-id:11^26 · -c1:8^20 · +c1:8^20 · +id:11^26 · -main:10^27 · -c:7^17 · +c:7^17 · -p:6^18 · -p:6^1]: C(([p:6^1]: 0'p))) < [+c2:9^25]12'z
//│ --------------
//│ 7'a:
//│ 	7'a[] < ([]: 8'5_matchres)
//│ 	([]: C(([p:6^1]: 0'p))) < [-p:6^1 · -p:6^18 · +c:7^17]7'a
//│ --------------
//│ 3'c2:
//│ 	3'c2[-c2:9^12] < ([]: ([]: 13'b) => ([]: 14'14_callres))
//│ 	3'c2[-c2:9^25] < ([]: ([]: 19'28_callres) => ([]: 20'29_callres))
//│ 	([]: ([]: 12'z) => ([]: 15'15_matchres)) < []3'c2
//│ --------------
//│ 18'23_callres:
//│ 	18'23_callres[] < ([-id:11^26]: 19'28_callres)
//│ 	([+c1:8^20 · +id:11^26 · -main:10^27 · -c:7^17 · +c:7^17 · -p:6^18 · -p:6^1]: C(([p:6^1]: 0'p))) < [-c1:8^20]18'23_callres
//│ --------------
//│ 16'19_callres:
//│ 	16'19_callres[] < ([]: 4'main)
//│ 	([+c:7^17 · -p:6^18 · -p:6^1]: C(([p:6^1]: 0'p))) < [-c:7^17]16'19_callres
//│ --------------
//│ 11'9_matchres:
//│ 	11'9_matchres[] < ([-c1:8^20]: 18'23_callres)
//│ 	([+c1:8^20 · +id:11^26 · -main:10^27 · -c:7^17 · +c:7^17 · -p:6^18 · -p:6^1]: C(([p:6^1]: 0'p))) < []11'9_matchres
//│ --------------
//│ 8'5_matchres:
//│ 	8'5_matchres[] < ([-c:7^17]: 16'19_callres)
//│ 	([+c:7^17 · -p:6^18 · -p:6^1]: C(([p:6^1]: 0'p))) < []8'5_matchres
//│ --------------
//│ 19'28_callres:
//│ 	19'28_callres[+c2:9^25] < ([]: 12'z)
//│ 	([-c1:8^20 · +c1:8^20 · +id:11^26 · -main:10^27 · -c:7^17 · +c:7^17 · -p:6^18 · -p:6^1]: C(([p:6^1]: 0'p))) < [-id:11^26]19'28_callres
//│ --------------
//│ 4'main:
//│ 	4'main[-main:10^27 · +id:11^26] < ([]: 17'y)
//│ 	([-c:7^17 · +c:7^17 · -p:6^18 · -p:6^1]: C(([p:6^1]: 0'p))) < []4'main
//│ --------------
//│ 15'15_matchres:
//│ 	15'15_matchres[] < ([-c2:9^12]: 14'14_callres)
//│ 	15'15_matchres[] < ([-c2:9^25]: 20'29_callres)
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


let t = T(K, T(N, L, L), T(N, L, L))
fun c(x) = if x is
    T(n, l, r) then T(
        (if n is
            K then KK
            N then NN
        ),
        c(l),
        c(r)
    )
    L then LL
c(t)
//│ |#let| |t| |#=| |T|(|K|,| |T|(|N|,| |L|,| |L|)|,| |T|(|N|,| |L|,| |L|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|T|(|n|,| |l|,| |r|)| |#then| |T|(|→|(|#if| |n| |is|→|K| |#then| |KK|↵|N| |#then| |NN|←|↵|)|,|↵|c|(|l|)|,|↵|c|(|r|)|←|↵|)|↵|L| |#then| |LL|←|↵|c|(|t|)|
//│ Parsed: {let t = T (K, T (N, L, L,), T (N, L, L,),); fun c = x, => if x is ‹(T (n, l, r,)) then T ('(' if n is ‹(K) then KK; (N) then NN›, ')', c (l,), c (r,),); (L) then LL›; c (t,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def t:6 = [T [K] [T [N] [L] [L]] [T [N] [L] [L]]]
//│ def c:7 = (fun x:8 -> case x:8^11 of {
//│ 	T n:9 l:10 r:11 => [T case n:9^12 of {
//│ 		K => [KK]
//│ 		| N => [NN]} (c:7^16 l:10^17) (c:7^19 r:11^20)]
//│ 	| L => [LL]})
//│ (c:7^26 t:6^27)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([c:7^26]: 1'c) <: ([]: ([t:6^27]: 0't) => ([]: 10'28_callres))
//│ ([]: ([]: 2'x) => ([]: 9'24_matchres)) <: ([]: 1'c)
//│ ([]: LL) <: ([]: 9'24_matchres)
//│ ([]: T(([]: 6'15_matchres), ([]: 7'18_callres), ([]: 8'21_callres))) <: ([]: 9'24_matchres)
//│ ([]: 2'x) <: ([]: Destruct(T(3'n, 4'l, 5'r), L))
//│ ([c:7^19]: 1'c) <: ([]: ([]: 5'r) => ([]: 8'21_callres))
//│ ([c:7^16]: 1'c) <: ([]: ([]: 4'l) => ([]: 7'18_callres))
//│ ([]: NN) <: ([]: 6'15_matchres)
//│ ([]: KK) <: ([]: 6'15_matchres)
//│ ([]: 3'n) <: ([]: Destruct(K, N))
//│ ([]: T(([]: K), ([]: T(([]: N), ([]: L), ([]: L))), ([]: T(([]: N), ([]: L), ([]: L))))) <: ([]: 0't)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0't:
//│ 	0't[-t:6^27 · +c:7^26] < ([]: 2'x)
//│ 	([]: T(([]: K), ([]: T(([]: N), ([]: L), ([]: L))), ([]: T(([]: N), ([]: L), ([]: L))))) < []0't
//│ --------------
//│ 5'r:
//│ 	5'r[+c:7^19] < ([]: 2'x)
//│ 	([+c:7^19 · +c:7^26 · -t:6^27]: L) < []5'r
//│ 	([+c:7^26 · -t:6^27]: T(([]: N), ([]: L), ([]: L))) < []5'r
//│ 	([+c:7^16 · +c:7^26 · -t:6^27]: L) < []5'r
//│ --------------
//│ 10'28_callres:
//│ 	([]: T(([]: 6'15_matchres), ([]: 7'18_callres), ([]: 8'21_callres))) < [-c:7^26]10'28_callres
//│ 	([]: LL) < [-c:7^26]10'28_callres
//│ --------------
//│ 1'c:
//│ 	1'c[-c:7^16] < ([]: ([]: 4'l) => ([]: 7'18_callres))
//│ 	1'c[-c:7^19] < ([]: ([]: 5'r) => ([]: 8'21_callres))
//│ 	1'c[-c:7^26] < ([]: ([t:6^27]: 0't) => ([]: 10'28_callres))
//│ 	([]: ([]: 2'x) => ([]: 9'24_matchres)) < []1'c
//│ --------------
//│ 6'15_matchres:
//│ 	([]: KK) < []6'15_matchres
//│ 	([]: NN) < []6'15_matchres
//│ --------------
//│ 9'24_matchres:
//│ 	9'24_matchres[] < ([-c:7^16]: 7'18_callres)
//│ 	9'24_matchres[] < ([-c:7^19]: 8'21_callres)
//│ 	9'24_matchres[] < ([-c:7^26]: 10'28_callres)
//│ 	([]: T(([]: 6'15_matchres), ([]: 7'18_callres), ([]: 8'21_callres))) < []9'24_matchres
//│ 	([]: LL) < []9'24_matchres
//│ --------------
//│ 2'x:
//│ 	2'x[] < ([]: Destruct(T(3'n, 4'l, 5'r), L))
//│ 	([+c:7^19 · +c:7^26 · -t:6^27]: L) < [+c:7^19]2'x
//│ 	([+c:7^19 · +c:7^26 · -t:6^27]: L) < [+c:7^16]2'x
//│ 	([+c:7^26 · -t:6^27]: T(([]: N), ([]: L), ([]: L))) < [+c:7^19]2'x
//│ 	([+c:7^16 · +c:7^26 · -t:6^27]: L) < [+c:7^19]2'x
//│ 	([+c:7^16 · +c:7^26 · -t:6^27]: L) < [+c:7^16]2'x
//│ 	([+c:7^26 · -t:6^27]: T(([]: N), ([]: L), ([]: L))) < [+c:7^16]2'x
//│ 	([]: T(([]: K), ([]: T(([]: N), ([]: L), ([]: L))), ([]: T(([]: N), ([]: L), ([]: L))))) < [-t:6^27 · +c:7^26]2'x
//│ --------------
//│ 7'18_callres:
//│ 	([]: LL) < [-c:7^16]7'18_callres
//│ 	([]: T(([]: 6'15_matchres), ([]: 7'18_callres), ([]: 8'21_callres))) < [-c:7^16]7'18_callres
//│ --------------
//│ 3'n:
//│ 	3'n[] < ([]: Destruct(K, N))
//│ 	([+c:7^19 · +c:7^26 · -t:6^27]: N) < []3'n
//│ 	([+c:7^16 · +c:7^26 · -t:6^27]: N) < []3'n
//│ 	([+c:7^26 · -t:6^27]: K) < []3'n
//│ --------------
//│ 8'21_callres:
//│ 	([]: LL) < [-c:7^19]8'21_callres
//│ 	([]: T(([]: 6'15_matchres), ([]: 7'18_callres), ([]: 8'21_callres))) < [-c:7^19]8'21_callres
//│ --------------
//│ 4'l:
//│ 	4'l[+c:7^16] < ([]: 2'x)
//│ 	([+c:7^19 · +c:7^26 · -t:6^27]: L) < []4'l
//│ 	([+c:7^16 · +c:7^26 · -t:6^27]: L) < []4'l
//│ 	([+c:7^26 · -t:6^27]: T(([]: N), ([]: L), ([]: L))) < []4'l
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


let aa = T(N, L, L)
let bb = T(N, L, L)
let t = T(K, aa, bb)
fun c(x) = if x is
    T(n, l, r) then T(
        (if n is
            K then KK
            N then NN
        ),
        c(l),
        c(r)
    )
    L then LL
c(t)
//│ |#let| |aa| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |bb| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |t| |#=| |T|(|K|,| |aa|,| |bb|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|T|(|n|,| |l|,| |r|)| |#then| |T|(|→|(|#if| |n| |is|→|K| |#then| |KK|↵|N| |#then| |NN|←|↵|)|,|↵|c|(|l|)|,|↵|c|(|r|)|←|↵|)|↵|L| |#then| |LL|←|↵|c|(|t|)|
//│ Parsed: {let aa = T (N, L, L,); let bb = T (N, L, L,); let t = T (K, aa, bb,); fun c = x, => if x is ‹(T (n, l, r,)) then T ('(' if n is ‹(K) then KK; (N) then NN›, ')', c (l,), c (r,),); (L) then LL›; c (t,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def aa:6 = [T [N] [L] [L]]
//│ def bb:7 = [T [N] [L] [L]]
//│ def t:8 = [T [K] aa:6^10 bb:7^11]
//│ def c:9 = (fun x:10 -> case x:10^13 of {
//│ 	T n:11 l:12 r:13 => [T case n:11^14 of {
//│ 		K => [KK]
//│ 		| N => [NN]} (c:9^18 l:12^19) (c:9^21 r:13^22)]
//│ 	| L => [LL]})
//│ (c:9^28 t:8^29)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([c:9^28]: 3'c) <: ([]: ([t:8^29]: 2't) => ([]: 12'30_callres))
//│ ([]: ([]: 4'x) => ([]: 11'26_matchres)) <: ([]: 3'c)
//│ ([]: LL) <: ([]: 11'26_matchres)
//│ ([]: T(([]: 8'17_matchres), ([]: 9'20_callres), ([]: 10'23_callres))) <: ([]: 11'26_matchres)
//│ ([]: 4'x) <: ([]: Destruct(T(5'n, 6'l, 7'r), L))
//│ ([c:9^21]: 3'c) <: ([]: ([]: 7'r) => ([]: 10'23_callres))
//│ ([c:9^18]: 3'c) <: ([]: ([]: 6'l) => ([]: 9'20_callres))
//│ ([]: NN) <: ([]: 8'17_matchres)
//│ ([]: KK) <: ([]: 8'17_matchres)
//│ ([]: 5'n) <: ([]: Destruct(K, N))
//│ ([]: T(([]: K), ([aa:6^10]: 0'aa), ([bb:7^11]: 1'bb))) <: ([]: 2't)
//│ ([]: T(([]: N), ([]: L), ([]: L))) <: ([]: 1'bb)
//│ ([]: T(([]: N), ([]: L), ([]: L))) <: ([]: 0'aa)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'aa:
//│ 	0'aa[-aa:6^10 · -t:8^29 · +c:9^28] < ([]: 6'l)
//│ 	([]: T(([]: N), ([]: L), ([]: L))) < []0'aa
//│ --------------
//│ 5'n:
//│ 	5'n[] < ([]: Destruct(K, N))
//│ 	([+c:9^18 · +c:9^28 · -t:8^29 · -aa:6^10]: N) < []5'n
//│ 	([+c:9^21 · +c:9^28 · -t:8^29 · -bb:7^11]: N) < []5'n
//│ 	([+c:9^28 · -t:8^29]: K) < []5'n
//│ --------------
//│ 10'23_callres:
//│ 	([]: LL) < [-c:9^21]10'23_callres
//│ 	([]: T(([]: 8'17_matchres), ([]: 9'20_callres), ([]: 10'23_callres))) < [-c:9^21]10'23_callres
//│ --------------
//│ 1'bb:
//│ 	1'bb[-bb:7^11 · -t:8^29 · +c:9^28] < ([]: 7'r)
//│ 	([]: T(([]: N), ([]: L), ([]: L))) < []1'bb
//│ --------------
//│ 6'l:
//│ 	6'l[+c:9^18] < ([]: 4'x)
//│ 	([+c:9^18 · +c:9^28 · -t:8^29 · -aa:6^10]: L) < []6'l
//│ 	([]: T(([]: N), ([]: L), ([]: L))) < [-aa:6^10 · -t:8^29 · +c:9^28]6'l
//│ 	([+c:9^21 · +c:9^28 · -t:8^29 · -bb:7^11]: L) < []6'l
//│ --------------
//│ 9'20_callres:
//│ 	([]: LL) < [-c:9^18]9'20_callres
//│ 	([]: T(([]: 8'17_matchres), ([]: 9'20_callres), ([]: 10'23_callres))) < [-c:9^18]9'20_callres
//│ --------------
//│ 2't:
//│ 	2't[-t:8^29 · +c:9^28] < ([]: 4'x)
//│ 	([]: T(([]: K), ([aa:6^10]: 0'aa), ([bb:7^11]: 1'bb))) < []2't
//│ --------------
//│ 12'30_callres:
//│ 	([]: T(([]: 8'17_matchres), ([]: 9'20_callres), ([]: 10'23_callres))) < [-c:9^28]12'30_callres
//│ 	([]: LL) < [-c:9^28]12'30_callres
//│ --------------
//│ 7'r:
//│ 	7'r[+c:9^21] < ([]: 4'x)
//│ 	([+c:9^18 · +c:9^28 · -t:8^29 · -aa:6^10]: L) < []7'r
//│ 	([+c:9^21 · +c:9^28 · -t:8^29 · -bb:7^11]: L) < []7'r
//│ 	([]: T(([]: N), ([]: L), ([]: L))) < [-bb:7^11 · -t:8^29 · +c:9^28]7'r
//│ --------------
//│ 3'c:
//│ 	3'c[-c:9^18] < ([]: ([]: 6'l) => ([]: 9'20_callres))
//│ 	3'c[-c:9^21] < ([]: ([]: 7'r) => ([]: 10'23_callres))
//│ 	3'c[-c:9^28] < ([]: ([t:8^29]: 2't) => ([]: 12'30_callres))
//│ 	([]: ([]: 4'x) => ([]: 11'26_matchres)) < []3'c
//│ --------------
//│ 11'26_matchres:
//│ 	11'26_matchres[] < ([-c:9^18]: 9'20_callres)
//│ 	11'26_matchres[] < ([-c:9^21]: 10'23_callres)
//│ 	11'26_matchres[] < ([-c:9^28]: 12'30_callres)
//│ 	([]: T(([]: 8'17_matchres), ([]: 9'20_callres), ([]: 10'23_callres))) < []11'26_matchres
//│ 	([]: LL) < []11'26_matchres
//│ --------------
//│ 8'17_matchres:
//│ 	([]: KK) < []8'17_matchres
//│ 	([]: NN) < []8'17_matchres
//│ --------------
//│ 4'x:
//│ 	4'x[] < ([]: Destruct(T(5'n, 6'l, 7'r), L))
//│ 	([+c:9^18 · +c:9^28 · -t:8^29 · -aa:6^10]: L) < [+c:9^21]4'x
//│ 	([+c:9^18 · +c:9^28 · -t:8^29 · -aa:6^10]: L) < [+c:9^18]4'x
//│ 	([+c:9^28 · -t:8^29 · -aa:6^10]: T(([]: N), ([]: L), ([]: L))) < [+c:9^18]4'x
//│ 	([+c:9^21 · +c:9^28 · -t:8^29 · -bb:7^11]: L) < [+c:9^21]4'x
//│ 	([+c:9^21 · +c:9^28 · -t:8^29 · -bb:7^11]: L) < [+c:9^18]4'x
//│ 	([+c:9^28 · -t:8^29 · -bb:7^11]: T(([]: N), ([]: L), ([]: L))) < [+c:9^21]4'x
//│ 	([]: T(([]: K), ([aa:6^10]: 0'aa), ([bb:7^11]: 1'bb))) < [-t:8^29 · +c:9^28]4'x
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


fun map(ls) = if ls is
    C(h, t) then f => C(f(h), map(t)(f))
    N then f => N
let l = C(K, N)
map(l)(
    x => if x is
        K then T
)
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |f| |=>| |C|(|f|(|h|)|,| |map|(|t|)|(|f|)|)|↵|N| |#then| |f| |=>| |N|←|↵|#let| |l| |#=| |C|(|K|,| |N|)|↵|map|(|l|)|(|→|x| |=>| |#if| |x| |is|→|K| |#then| |T|←|←|↵|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (h, t,)) then f, => C (f (h,), map (t,) (f,),); (N) then f, => N›; let l = C (K, N,); map (l,) (x, => if x is ‹(K) then T›,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = (fun ls:8 -> case ls:8^1 of {
//│ 	C h:9 t:10 => (fun f:11 -> [C (f:11^2 h:9^3) ((map:6^5 t:10^6) f:11^8)])
//│ 	| N => (fun f:12 -> [N])})
//│ def l:7 = [C [K] [N]]
//│ ((map:6^19 l:7^20) (fun x:13 -> case x:13^22 of {
//│ 	K => [T]}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 11'21_callres) <: ([]: ([]: ([]: 12'x) => ([]: 13'24_matchres)) => ([]: 14'26_callres))
//│ ([]: T) <: ([]: 13'24_matchres)
//│ ([]: 12'x) <: ([]: Destruct(K))
//│ ([map:6^19]: 0'map) <: ([]: ([l:7^20]: 1'l) => ([]: 11'21_callres))
//│ ([]: C(([]: K), ([]: N))) <: ([]: 1'l)
//│ ([]: ([]: 2'ls) => ([]: 10'14_matchres)) <: ([]: 0'map)
//│ ([]: ([]: 9'f) => ([]: N)) <: ([]: 10'14_matchres)
//│ ([]: ([]: 5'f) => ([]: C(([]: 6'4_callres), ([]: 8'9_callres)))) <: ([]: 10'14_matchres)
//│ ([]: 2'ls) <: ([]: Destruct(C(3'h, 4't), N))
//│ ([]: 7'7_callres) <: ([]: ([]: 5'f) => ([]: 8'9_callres))
//│ ([map:6^5]: 0'map) <: ([]: ([]: 4't) => ([]: 7'7_callres))
//│ ([]: 5'f) <: ([]: ([]: 3'h) => ([]: 6'4_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ 12'x => 13'24_matchres <: 5'f
//│ 	[+map:6^19 · +map:6^5 · +map:6^5]  --->  [+map:6^19 · +map:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'map:
//│ 	0'map[-map:6^5] < ([]: ([]: 4't) => ([]: 7'7_callres))
//│ 	0'map[-map:6^19] < ([]: ([l:7^20]: 1'l) => ([]: 11'21_callres))
//│ 	([]: ([]: 2'ls) => ([]: 10'14_matchres)) < []0'map
//│ --------------
//│ 5'f:
//│ 	5'f[] < ([]: ([]: 3'h) => ([]: 6'4_callres))
//│ 	5'f[] < ([+map:6^5]: 9'f)
//│ 	5'f[] < ([+map:6^5]: 5'f)
//│ 	([+map:6^19]: ([]: 12'x) => ([]: 13'24_matchres)) < [+map:6^5]5'f
//│ 	([]: ([]: 12'x) => ([]: 13'24_matchres)) < [+map:6^19]5'f
//│ --------------
//│ 10'14_matchres:
//│ 	10'14_matchres[] < ([-map:6^5]: 7'7_callres)
//│ 	10'14_matchres[] < ([-map:6^19]: 11'21_callres)
//│ 	([]: ([]: 5'f) => ([]: C(([]: 6'4_callres), ([]: 8'9_callres)))) < []10'14_matchres
//│ 	([]: ([]: 9'f) => ([]: N)) < []10'14_matchres
//│ --------------
//│ 14'26_callres:
//│ 	([-map:6^19]: C(([]: 6'4_callres), ([]: 8'9_callres))) < []14'26_callres
//│ 	([-map:6^19]: N) < []14'26_callres
//│ --------------
//│ 1'l:
//│ 	1'l[-l:7^20 · +map:6^19] < ([]: 2'ls)
//│ 	([]: C(([]: K), ([]: N))) < []1'l
//│ --------------
//│ 6'4_callres:
//│ 	([]: T) < [+map:6^19]6'4_callres
//│ 	([]: T) < [+map:6^19 · +map:6^5]6'4_callres
//│ --------------
//│ 9'f:
//│ 	([+map:6^19]: ([]: 12'x) => ([]: 13'24_matchres)) < [+map:6^5]9'f
//│ 	([+map:6^5 · +map:6^19]: ([]: 12'x) => ([]: 13'24_matchres)) < [+map:6^5]9'f
//│ 	([]: ([]: 12'x) => ([]: 13'24_matchres)) < [+map:6^19]9'f
//│ --------------
//│ 13'24_matchres:
//│ 	13'24_matchres[+map:6^19] < ([]: 6'4_callres)
//│ 	13'24_matchres[+map:6^19 · +map:6^5] < ([]: 6'4_callres)
//│ 	([]: T) < []13'24_matchres
//│ --------------
//│ 2'ls:
//│ 	2'ls[] < ([]: Destruct(C(3'h, 4't), N))
//│ 	([+map:6^19 · -l:7^20]: N) < [+map:6^5]2'ls
//│ 	([]: C(([]: K), ([]: N))) < [-l:7^20 · +map:6^19]2'ls
//│ --------------
//│ 12'x:
//│ 	12'x[] < ([]: Destruct(K))
//│ 	([+map:6^19 · -l:7^20]: K) < [-map:6^19]12'x
//│ 	([+map:6^19 · -l:7^20]: K) < [-map:6^5 · -map:6^19]12'x
//│ --------------
//│ 7'7_callres:
//│ 	7'7_callres[] < ([]: ([]: 5'f) => ([]: 8'9_callres))
//│ 	([]: ([]: 9'f) => ([]: N)) < [-map:6^5]7'7_callres
//│ 	([]: ([]: 5'f) => ([]: C(([]: 6'4_callres), ([]: 8'9_callres)))) < [-map:6^5]7'7_callres
//│ --------------
//│ 3'h:
//│ 	3'h[] < ([-map:6^19]: 12'x)
//│ 	3'h[] < ([-map:6^5 · -map:6^19]: 12'x)
//│ 	([+map:6^19 · -l:7^20]: K) < []3'h
//│ --------------
//│ 11'21_callres:
//│ 	11'21_callres[] < ([]: ([]: ([]: 12'x) => ([]: 13'24_matchres)) => ([]: 14'26_callres))
//│ 	([]: ([]: 5'f) => ([]: C(([]: 6'4_callres), ([]: 8'9_callres)))) < [-map:6^19]11'21_callres
//│ 	([]: ([]: 9'f) => ([]: N)) < [-map:6^19]11'21_callres
//│ --------------
//│ 8'9_callres:
//│ 	([-map:6^5]: N) < []8'9_callres
//│ 	([-map:6^5]: C(([]: 6'4_callres), ([]: 8'9_callres))) < []8'9_callres
//│ --------------
//│ 4't:
//│ 	4't[+map:6^5] < ([]: 2'ls)
//│ 	([+map:6^19 · -l:7^20]: N) < []4't
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


fun inter(xs) = if xs is
    N then ys => ys
    C(h, t) then ys => C(h, inter(ys)(t))
let rec l1 = C(1, C(2, l1))
let rec l2 = C(9, C(8, l2))
inter(l1)(l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|#let| |#rec| |l1| |#=| |C|(|1|,| |C|(|2|,| |l1|)|)|↵|#let| |#rec| |l2| |#=| |C|(|9|,| |C|(|8|,| |l2|)|)|↵|inter|(|l1|)|(|l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; let rec l1 = C (1, C (2, l1,),); let rec l2 = C (9, C (8, l2,),); inter (l1,) (l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def inter:6 = (fun xs:9 -> case xs:9^1 of {
//│ 	N => (fun ys:10 -> ys:10^2)
//│ 	| C h:11 t:12 => (fun ys:13 -> [C h:11^4 ((inter:6^5 ys:13^6) t:12^8)])})
//│ def l1:7 = [C 1 [C 2 l1:7^16]]
//│ def l2:8 = [C 9 [C 8 l2:8^21]]
//│ ((inter:6^24 l1:7^25) l2:8^27)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 11'26_callres) <: ([]: ([l2:8^27]: 2'l2) => ([]: 12'28_callres))
//│ ([inter:6^24]: 0'inter) <: ([]: ([l1:7^25]: 1'l1) => ([]: 11'26_callres))
//│ ([]: C(([]: Int), ([]: C(([]: Int), ([l2:8^21]: 2'l2))))) <: ([]: 2'l2)
//│ ([]: C(([]: Int), ([]: C(([]: Int), ([l1:7^16]: 1'l1))))) <: ([]: 1'l1)
//│ ([]: ([]: 3'xs) => ([]: 10'12_matchres)) <: ([]: 0'inter)
//│ ([]: ([]: 7'ys) => ([]: C(([]: 5'h), ([]: 9'9_callres)))) <: ([]: 10'12_matchres)
//│ ([]: ([]: 4'ys) => ([]: 4'ys)) <: ([]: 10'12_matchres)
//│ ([]: 3'xs) <: ([]: Destruct(N, C(5'h, 6't)))
//│ ([]: 8'7_callres) <: ([]: ([]: 6't) => ([]: 9'9_callres))
//│ ([inter:6^5]: 0'inter) <: ([]: ([]: 7'ys) => ([]: 8'7_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(Int, 1'l1) <: 7'ys
//│ 	[-l1:7^16 · -l1:7^25 · +inter:6^24 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5]  --->  [-l1:7^25 · +inter:6^24 · +inter:6^5]
//│ C(Int, 2'l2) <: 7'ys
//│ 	[-l2:8^21 · -l2:8^27 · +inter:6^24 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5]  --->  [-l2:8^27 · +inter:6^24 · +inter:6^5 · +inter:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'inter:
//│ 	0'inter[-inter:6^5] < ([]: ([]: 7'ys) => ([]: 8'7_callres))
//│ 	0'inter[-inter:6^24] < ([]: ([l1:7^25]: 1'l1) => ([]: 11'26_callres))
//│ 	([]: ([]: 3'xs) => ([]: 10'12_matchres)) < []0'inter
//│ --------------
//│ 5'h:
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l1:7^25 · -l1:7^16]: Int) < []5'h
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^24 · -l1:7^25]: Int) < []5'h
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l2:8^27 · -l2:8^21]: Int) < []5'h
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l2:8^27]: Int) < []5'h
//│ 	([+inter:6^5 · +inter:6^24 · -l2:8^27]: Int) < []5'h
//│ 	([+inter:6^24 · -l1:7^25]: Int) < []5'h
//│ --------------
//│ 10'12_matchres:
//│ 	10'12_matchres[] < ([-inter:6^5]: 8'7_callres)
//│ 	10'12_matchres[] < ([-inter:6^24]: 11'26_callres)
//│ 	([]: ([]: 4'ys) => ([]: 4'ys)) < []10'12_matchres
//│ 	([]: ([]: 7'ys) => ([]: C(([]: 5'h), ([]: 9'9_callres)))) < []10'12_matchres
//│ --------------
//│ 1'l1:
//│ 	1'l1[-l1:7^16 · -l1:7^25 · +inter:6^24 · +inter:6^5 · +inter:6^5] < ([]: 6't)
//│ 	1'l1[-l1:7^25 · +inter:6^24] < ([]: 3'xs)
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([l1:7^16]: 1'l1))))) < []1'l1
//│ --------------
//│ 6't:
//│ 	6't[] < ([+inter:6^5]: 7'ys)
//│ 	6't[] < ([+inter:6^5]: 4'ys)
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l1:7^25 · -l1:7^16]: C(([]: Int), ([l1:7^16]: 1'l1))) < []6't
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([l1:7^16]: 1'l1))))) < [-l1:7^16 · -l1:7^25 · +inter:6^24 · +inter:6^5 · +inter:6^5]6't
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l2:8^27 · -l2:8^21]: C(([]: Int), ([l2:8^21]: 2'l2))) < []6't
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([l2:8^21]: 2'l2))))) < [-l2:8^21 · -l2:8^27 · +inter:6^24 · +inter:6^5 · +inter:6^5 · +inter:6^5]6't
//│ 	([+inter:6^5 · +inter:6^24 · -l2:8^27]: C(([]: Int), ([l2:8^21]: 2'l2))) < []6't
//│ 	([+inter:6^24 · -l1:7^25]: C(([]: Int), ([l1:7^16]: 1'l1))) < []6't
//│ --------------
//│ 9'9_callres:
//│ 	([-inter:6^5]: C(([]: 5'h), ([]: 9'9_callres))) < []9'9_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l1:7^25 · -l1:7^16]: C(([]: Int), ([]: C(([]: Int), ([l1:7^16]: 1'l1))))) < [-inter:6^5]9'9_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l1:7^25 · -l1:7^16]: C(([]: Int), ([l1:7^16]: 1'l1))) < [-inter:6^5]9'9_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l2:8^27 · -l2:8^21]: C(([]: Int), ([]: C(([]: Int), ([l2:8^21]: 2'l2))))) < [-inter:6^5]9'9_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l2:8^27 · -l2:8^21]: C(([]: Int), ([l2:8^21]: 2'l2))) < [-inter:6^5]9'9_callres
//│ 	([+inter:6^24 · -l2:8^27]: C(([]: Int), ([]: C(([]: Int), ([l2:8^21]: 2'l2))))) < [-inter:6^5]9'9_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^24 · -l2:8^27]: C(([]: Int), ([l2:8^21]: 2'l2))) < [-inter:6^5]9'9_callres
//│ 	([+inter:6^5 · +inter:6^24 · -l1:7^25]: C(([]: Int), ([l1:7^16]: 1'l1))) < [-inter:6^5]9'9_callres
//│ --------------
//│ 2'l2:
//│ 	2'l2[-l2:8^21 · -l2:8^27 · +inter:6^24 · +inter:6^5 · +inter:6^5 · +inter:6^5] < ([]: 6't)
//│ 	2'l2[-l2:8^27] < ([+inter:6^24]: 4'ys)
//│ 	2'l2[-l2:8^27] < ([+inter:6^24]: 7'ys)
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([l2:8^21]: 2'l2))))) < []2'l2
//│ --------------
//│ 12'28_callres:
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l1:7^25 · -l1:7^16]: C(([]: Int), ([]: C(([]: Int), ([l1:7^16]: 1'l1))))) < [-inter:6^24]12'28_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l1:7^25 · -l1:7^16]: C(([]: Int), ([l1:7^16]: 1'l1))) < [-inter:6^24]12'28_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l2:8^27 · -l2:8^21]: C(([]: Int), ([]: C(([]: Int), ([l2:8^21]: 2'l2))))) < [-inter:6^24]12'28_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l2:8^27 · -l2:8^21]: C(([]: Int), ([l2:8^21]: 2'l2))) < [-inter:6^24]12'28_callres
//│ 	([+inter:6^5 · +inter:6^24 · -l1:7^25]: C(([]: Int), ([l1:7^16]: 1'l1))) < [-inter:6^24]12'28_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^24 · -l2:8^27]: C(([]: Int), ([l2:8^21]: 2'l2))) < [-inter:6^24]12'28_callres
//│ 	([+inter:6^24 · -l2:8^27]: C(([]: Int), ([]: C(([]: Int), ([l2:8^21]: 2'l2))))) < [-inter:6^24]12'28_callres
//│ 	([-inter:6^24]: C(([]: 5'h), ([]: 9'9_callres))) < []12'28_callres
//│ --------------
//│ 7'ys:
//│ 	7'ys[+inter:6^5] < ([]: 3'xs)
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^24 · -l1:7^25 · -l1:7^16]: C(([]: Int), ([]: C(([]: Int), ([l1:7^16]: 1'l1))))) < [+inter:6^5]7'ys
//│ 	([+inter:6^24 · -l1:7^25]: C(([]: Int), ([l1:7^16]: 1'l1))) < [+inter:6^5]7'ys
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l2:8^27 · -l2:8^21]: C(([]: Int), ([]: C(([]: Int), ([l2:8^21]: 2'l2))))) < [+inter:6^5]7'ys
//│ 	([+inter:6^5 · +inter:6^24 · -l2:8^27]: C(([]: Int), ([l2:8^21]: 2'l2))) < [+inter:6^5]7'ys
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([l2:8^21]: 2'l2))))) < [-l2:8^27 · +inter:6^24]7'ys
//│ --------------
//│ 3'xs:
//│ 	3'xs[] < ([]: Destruct(N, C(5'h, 6't)))
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l1:7^25 · -l1:7^16]: C(([]: Int), ([]: C(([]: Int), ([l1:7^16]: 1'l1))))) < [+inter:6^5]3'xs
//│ 	([+inter:6^5 · +inter:6^24 · -l1:7^25]: C(([]: Int), ([l1:7^16]: 1'l1))) < [+inter:6^5]3'xs
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l2:8^27 · -l2:8^21]: C(([]: Int), ([]: C(([]: Int), ([l2:8^21]: 2'l2))))) < [+inter:6^5]3'xs
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^24 · -l2:8^27]: C(([]: Int), ([l2:8^21]: 2'l2))) < [+inter:6^5]3'xs
//│ 	([+inter:6^24 · -l2:8^27]: C(([]: Int), ([]: C(([]: Int), ([l2:8^21]: 2'l2))))) < [+inter:6^5]3'xs
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([l1:7^16]: 1'l1))))) < [-l1:7^25 · +inter:6^24]3'xs
//│ --------------
//│ 11'26_callres:
//│ 	11'26_callres[] < ([]: ([l2:8^27]: 2'l2) => ([]: 12'28_callres))
//│ 	([]: ([]: 4'ys) => ([]: 4'ys)) < [-inter:6^24]11'26_callres
//│ 	([]: ([]: 7'ys) => ([]: C(([]: 5'h), ([]: 9'9_callres)))) < [-inter:6^24]11'26_callres
//│ --------------
//│ 8'7_callres:
//│ 	8'7_callres[] < ([]: ([]: 6't) => ([]: 9'9_callres))
//│ 	([]: ([]: 7'ys) => ([]: C(([]: 5'h), ([]: 9'9_callres)))) < [-inter:6^5]8'7_callres
//│ 	([]: ([]: 4'ys) => ([]: 4'ys)) < [-inter:6^5]8'7_callres
//│ --------------
//│ 4'ys:
//│ 	4'ys[-inter:6^5] < ([]: 9'9_callres)
//│ 	4'ys[-inter:6^24] < ([]: 12'28_callres)
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^24 · -l1:7^25 · -l1:7^16]: C(([]: Int), ([]: C(([]: Int), ([l1:7^16]: 1'l1))))) < [+inter:6^5]4'ys
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l1:7^25 · -l1:7^16]: C(([]: Int), ([l1:7^16]: 1'l1))) < [+inter:6^5]4'ys
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l2:8^27 · -l2:8^21]: C(([]: Int), ([]: C(([]: Int), ([l2:8^21]: 2'l2))))) < [+inter:6^5]4'ys
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^24 · -l2:8^27 · -l2:8^21]: C(([]: Int), ([l2:8^21]: 2'l2))) < [+inter:6^5]4'ys
//│ 	([+inter:6^24 · -l1:7^25]: C(([]: Int), ([l1:7^16]: 1'l1))) < [+inter:6^5]4'ys
//│ 	([+inter:6^5 · +inter:6^24 · -l2:8^27]: C(([]: Int), ([l2:8^21]: 2'l2))) < [+inter:6^5]4'ys
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([l2:8^21]: 2'l2))))) < [-l2:8^27 · +inter:6^24]4'ys
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


fun last(ys) = if ys is
    N then x => x
    C(h, t) then x => last(t)(h)
fun lastDrive(xs) = if xs is
    N then None
    C(hh, tt) then Some(last(tt)(hh))
lastDrive(C(1, C(2, N)))
//│ |#fun| |last|(|ys|)| |#=| |#if| |ys| |is|→|N| |#then| |x| |=>| |x|↵|C|(|h|,| |t|)| |#then| |x| |=>| |last|(|t|)|(|h|)|←|↵|#fun| |lastDrive|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |None|↵|C|(|hh|,| |tt|)| |#then| |Some|(|last|(|tt|)|(|hh|)|)|←|↵|lastDrive|(|C|(|1|,| |C|(|2|,| |N|)|)|)|
//│ Parsed: {fun last = ys, => if ys is ‹(N) then x, => x; (C (h, t,)) then x, => last (t,) (h,)›; fun lastDrive = xs, => if xs is ‹(N) then None; (C (hh, tt,)) then Some (last (tt,) (hh,),)›; lastDrive (C (1, C (2, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def last:6 = (fun ys:8 -> case ys:8^1 of {
//│ 	N => (fun x:9 -> x:9^2)
//│ 	| C h:10 t:11 => (fun x:12 -> ((last:6^4 t:11^5) h:10^7))})
//│ def lastDrive:7 = (fun xs:13 -> case xs:13^12 of {
//│ 	N => [None]
//│ 	| C hh:14 tt:15 => [Some ((last:6^14 tt:15^15) hh:14^17)]})
//│ (lastDrive:7^22 [C 1 [C 2 [N]]])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([lastDrive:7^22]: 1'lastDrive) <: ([]: ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) => ([]: 16'28_callres))
//│ ([]: ([]: 10'xs) => ([]: 15'20_matchres)) <: ([]: 1'lastDrive)
//│ ([]: Some(([]: 14'18_callres))) <: ([]: 15'20_matchres)
//│ ([]: None) <: ([]: 15'20_matchres)
//│ ([]: 10'xs) <: ([]: Destruct(N, C(11'hh, 12'tt)))
//│ ([]: 13'16_callres) <: ([]: ([]: 11'hh) => ([]: 14'18_callres))
//│ ([last:6^14]: 0'last) <: ([]: ([]: 12'tt) => ([]: 13'16_callres))
//│ ([]: ([]: 2'ys) => ([]: 9'10_matchres)) <: ([]: 0'last)
//│ ([]: ([]: 6'x) => ([]: 8'8_callres)) <: ([]: 9'10_matchres)
//│ ([]: ([]: 3'x) => ([]: 3'x)) <: ([]: 9'10_matchres)
//│ ([]: 2'ys) <: ([]: Destruct(N, C(4'h, 5't)))
//│ ([]: 7'6_callres) <: ([]: ([]: 4'h) => ([]: 8'8_callres))
//│ ([last:6^4]: 0'last) <: ([]: ([]: 5't) => ([]: 7'6_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ Int <: 8'8_callres
//│ 	[+lastDrive:7^22 · +last:6^14 · -last:6^4 · -last:6^4 · -last:6^4]  --->  [+lastDrive:7^22 · +last:6^14 · -last:6^4 · -last:6^4]
//│ 	[+lastDrive:7^22 · +last:6^14 · +last:6^4 · -last:6^4 · -last:6^4 · -last:6^4]  --->  [+lastDrive:7^22 · +last:6^14 · +last:6^4 · -last:6^4 · -last:6^4]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'last:
//│ 	0'last[-last:6^4] < ([]: ([]: 5't) => ([]: 7'6_callres))
//│ 	0'last[-last:6^14] < ([]: ([]: 12'tt) => ([]: 13'16_callres))
//│ 	([]: ([]: 2'ys) => ([]: 9'10_matchres)) < []0'last
//│ --------------
//│ 5't:
//│ 	5't[+last:6^4] < ([]: 2'ys)
//│ 	([+last:6^14 · +lastDrive:7^22]: N) < []5't
//│ --------------
//│ 10'xs:
//│ 	10'xs[] < ([]: Destruct(N, C(11'hh, 12'tt)))
//│ 	([+lastDrive:7^22]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < []10'xs
//│ --------------
//│ 14'18_callres:
//│ 	([-last:6^4 · -last:6^4 · +last:6^4 · +last:6^14 · +lastDrive:7^22]: Int) < [-last:6^14]14'18_callres
//│ 	([-last:6^4 · -last:6^4 · +last:6^14 · +lastDrive:7^22]: Int) < [-last:6^14]14'18_callres
//│ 	([-last:6^4 · +last:6^14 · +lastDrive:7^22]: Int) < [-last:6^14]14'18_callres
//│ 	([-last:6^4 · +last:6^4 · +last:6^14 · +lastDrive:7^22]: Int) < [-last:6^14]14'18_callres
//│ 	([+last:6^4 · +last:6^14 · +lastDrive:7^22]: Int) < [-last:6^14]14'18_callres
//│ 	([+last:6^14 · +lastDrive:7^22]: Int) < [-last:6^14]14'18_callres
//│ --------------
//│ 1'lastDrive:
//│ 	1'lastDrive[-lastDrive:7^22] < ([]: ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) => ([]: 16'28_callres))
//│ 	([]: ([]: 10'xs) => ([]: 15'20_matchres)) < []1'lastDrive
//│ --------------
//│ 6'x:
//│ 	([+last:6^14 · +lastDrive:7^22]: Int) < [+last:6^4]6'x
//│ 	([+lastDrive:7^22]: Int) < [+last:6^14]6'x
//│ --------------
//│ 9'10_matchres:
//│ 	9'10_matchres[] < ([-last:6^4]: 7'6_callres)
//│ 	9'10_matchres[] < ([-last:6^14]: 13'16_callres)
//│ 	([]: ([]: 3'x) => ([]: 3'x)) < []9'10_matchres
//│ 	([]: ([]: 6'x) => ([]: 8'8_callres)) < []9'10_matchres
//│ --------------
//│ 13'16_callres:
//│ 	13'16_callres[] < ([]: ([]: 11'hh) => ([]: 14'18_callres))
//│ 	([]: ([]: 3'x) => ([]: 3'x)) < [-last:6^14]13'16_callres
//│ 	([]: ([]: 6'x) => ([]: 8'8_callres)) < [-last:6^14]13'16_callres
//│ --------------
//│ 2'ys:
//│ 	2'ys[] < ([]: Destruct(N, C(4'h, 5't)))
//│ 	([+last:6^14 · +lastDrive:7^22]: N) < [+last:6^4]2'ys
//│ 	([+lastDrive:7^22]: C(([]: Int), ([]: N))) < [+last:6^14]2'ys
//│ --------------
//│ 12'tt:
//│ 	12'tt[+last:6^14] < ([]: 2'ys)
//│ 	([+lastDrive:7^22]: C(([]: Int), ([]: N))) < []12'tt
//│ --------------
//│ 7'6_callres:
//│ 	7'6_callres[] < ([]: ([]: 4'h) => ([]: 8'8_callres))
//│ 	([]: ([]: 6'x) => ([]: 8'8_callres)) < [-last:6^4]7'6_callres
//│ 	([]: ([]: 3'x) => ([]: 3'x)) < [-last:6^4]7'6_callres
//│ --------------
//│ 3'x:
//│ 	3'x[-last:6^4] < ([]: 8'8_callres)
//│ 	3'x[-last:6^14] < ([]: 14'18_callres)
//│ 	([+last:6^14 · +lastDrive:7^22]: Int) < [+last:6^4]3'x
//│ 	([+lastDrive:7^22]: Int) < [+last:6^14]3'x
//│ --------------
//│ 16'28_callres:
//│ 	([]: None) < [-lastDrive:7^22]16'28_callres
//│ 	([]: Some(([]: 14'18_callres))) < [-lastDrive:7^22]16'28_callres
//│ --------------
//│ 11'hh:
//│ 	11'hh[] < ([+last:6^14]: 3'x)
//│ 	11'hh[] < ([+last:6^14]: 6'x)
//│ 	([+lastDrive:7^22]: Int) < []11'hh
//│ --------------
//│ 8'8_callres:
//│ 	8'8_callres[-last:6^4] < ([]: 8'8_callres)
//│ 	8'8_callres[-last:6^14] < ([]: 14'18_callres)
//│ 	([-last:6^4 · +last:6^4 · +last:6^14 · +lastDrive:7^22]: Int) < [-last:6^4]8'8_callres
//│ 	([-last:6^4 · +last:6^14 · +lastDrive:7^22]: Int) < [-last:6^4]8'8_callres
//│ 	([+last:6^14 · +lastDrive:7^22]: Int) < [-last:6^4]8'8_callres
//│ 	([+last:6^4 · +last:6^14 · +lastDrive:7^22]: Int) < [-last:6^4]8'8_callres
//│ --------------
//│ 4'h:
//│ 	4'h[] < ([+last:6^4]: 6'x)
//│ 	4'h[] < ([+last:6^4]: 3'x)
//│ 	([+last:6^14 · +lastDrive:7^22]: Int) < []4'h
//│ --------------
//│ 15'20_matchres:
//│ 	15'20_matchres[] < ([-lastDrive:7^22]: 16'28_callres)
//│ 	([]: None) < []15'20_matchres
//│ 	([]: Some(([]: 14'18_callres))) < []15'20_matchres
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<
