:NewParser
:ParseOnly

let rec p = C(p)
fun c(x) = if x is
    C(a) then c(a)
c(p)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|c|(|p|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then c (a,)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:7^9 p:6^10)
//│ def c:7 = (fun x:8 -> case x:8^3 of {
//│ 	C a:9 => (c:7^4 a:9^5)})
//│ def p:6 = [C p:6^1]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(0'p_6^1) <: 2'x
//│ 	[-p:6^1 · -p:6^10 · +c:7^9 · +c:7^4]  --->  [-p:6^10 · +c:7^9]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [c:7^9 · c:7^4] --> [c:7^9]
//│ [p:6^10 · p:6^1] --> [p:6^10]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:7^9]
//│ 	[c:7^9 · c:7^4] ---> [c:7^9] (only one)
//│ [p:6^10]
//│ 	[p:6^10 · p:6^1] ---> [p:6^10] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([c:7^9]:11^20 [p:6^10]:10^21)
//│ def [c:7^9]:11 = (fun x:12 -> case x:12^12 of {
//│ 	C a:13 => ([c:7^9]:11^13 a:13^14)})
//│ def [p:6^10]:10 = [C [p:6^10]:10^18]
//│ def c:7 = (fun x:8 -> case x:8^6 of {
//│ 	C a:9 => (c:7^7 a:9^8)})
//│ def p:6 = [C p:6^4]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 19: [C 18: [p:6^10]:10^18]
//│ [C [p:6^10]:10^18] --->
//│ 	case x:12^12 of {C a:13 => ([c:7^9]:11^13 a:13^14)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([c:7^9]:11^23 [p:6^10]:10^24)
//│ def [c:7^9]:11 = (fun x:12 -> x:12^34)
//│ def [p:6^10]:10 = let a:13 = [p:6^10]:10^39
//│ in ([c:7^9]:11^36 a:13^37)
//│ def c:7 = (fun x:8 -> case x:8^28 of {
//│ 	C a:9 => (c:7^29 a:9^30)})
//│ def p:6 = [C p:6^26]
//│ <<<<<<< after fusion <<<<<<<



let p = C(1, C(2, N))
fun e(z) = if z is
    C(aaa, bbb) then bbb
    N then 7
fun d(y) = if y is
    C(aa, bb) then e(bb)
    N then 5
fun c(x) = if x is
    C(a, b) then d(b)
    N then 3
c(p)
//│ |#let| |p| |#=| |C|(|1|,| |C|(|2|,| |N|)|)|↵|#fun| |e|(|z|)| |#=| |#if| |z| |is|→|C|(|aaa|,| |bbb|)| |#then| |bbb|↵|N| |#then| |7|←|↵|#fun| |d|(|y|)| |#=| |#if| |y| |is|→|C|(|aa|,| |bb|)| |#then| |e|(|bb|)|↵|N| |#then| |5|←|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|,| |b|)| |#then| |d|(|b|)|↵|N| |#then| |3|←|↵|c|(|p|)|
//│ Parsed: {let p = C (1, C (2, N,),); fun e = z, => if z is ‹(C (aaa, bbb,)) then bbb; (N) then 7›; fun d = y, => if y is ‹(C (aa, bb,)) then e (bb,); (N) then 5›; fun c = x, => if x is ‹(C (a, b,)) then d (b,); (N) then 3›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:9^25 p:6^26)
//│ def c:9 = (fun x:16 -> case x:16^18 of {
//│ 	C a:17 b:18 => (d:8^19 b:18^20)
//│ 	| N => 3})
//│ def d:8 = (fun y:13 -> case y:13^11 of {
//│ 	C aa:14 bb:15 => (e:7^12 bb:15^13)
//│ 	| N => 5})
//│ def e:7 = (fun z:10 -> case z:10^6 of {
//│ 	C aaa:11 bbb:12 => bbb:12^7
//│ 	| N => 7})
//│ def p:6 = [C 1 [C 2 [N]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:9^25] ---> [c:9^25] (hopeless to continue)
//│ [p:6^26] ---> [p:6^26] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (c:9^28 p:6^29)
//│ def c:9 = (fun x:16 -> case x:16^21 of {
//│ 	C a:17 b:18 => (d:8^22 b:18^23)
//│ 	| N => 3})
//│ def d:8 = (fun y:13 -> case y:13^14 of {
//│ 	C aa:14 bb:15 => (e:7^15 bb:15^16)
//│ 	| N => 5})
//│ def e:7 = (fun z:10 -> case z:10^9 of {
//│ 	C aaa:11 bbb:12 => bbb:12^10
//│ 	| N => 7})
//│ def p:6 = [C 1 [C 2 [N]]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 6: [N]
//│ [N] --->
//│ 	case z:10^9 of {C aaa:11 bbb:12 => bbb:12^10 | N => 7}
//│ 7: [C 5: 2 6: [N]]
//│ [C 2 [N]] --->
//│ 	case y:13^14 of {C aa:14 bb:15 => (e:7^15 bb:15^16) | N => 5}
//│ 8: [C 4: 1 7: [C 5: 2 6: [N]]]
//│ [C 1 [C 2 [N]]] --->
//│ 	case x:16^21 of {C a:17 b:18 => (d:8^22 b:18^23) | N => 3}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c:9^31 p:6^32)
//│ def c:9 = (fun x:16 -> x:16^51)
//│ def d:8 = (fun y:13 -> y:13^49)
//│ def e:7 = (fun z:10 -> z:10^47)
//│ def p:6 = let a:17 = 1
//│ in let b:18 = 
//│ 	let aa:14 = 2
//│ 	in let bb:15 = 7
//│ 	in (e:7^37 bb:15^38)
//│ in (d:8^34 b:18^35)
//│ <<<<<<< after fusion <<<<<<<


let rec p = C(C(p))
fun c(x) = if x is
    C(a) then if a is
        C(b) then if b is
            C(y) then c(y)
c(p)
//│ |#let| |#rec| |p| |#=| |C|(|C|(|p|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|b|)| |#then| |#if| |b| |is|→|C|(|y|)| |#then| |c|(|y|)|←|←|←|↵|c|(|p|)|
//│ Parsed: {let rec p = C (C (p,),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (b,)) then if b is ‹(C (y,)) then c (y,)›››; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:7^14 p:6^15)
//│ def c:7 = (fun x:8 -> case x:8^4 of {
//│ 	C a:9 => case a:9^5 of {
//│ 		C b:10 => case b:10^6 of {
//│ 			C y:11 => (c:7^7 y:11^8)}}})
//│ def p:6 = [C [C p:6^1]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(0'p_6^1)) <: 2'x
//│ 	[-p:6^1 · -p:6^1 · -p:6^1 · -p:6^15 · +c:7^14 · +c:7^7 · +c:7^7]  --->  [-p:6^15 · +c:7^14]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [c:7^14 · c:7^7 · c:7^7] --> [c:7^14]
//│ [p:6^15 · p:6^1 · p:6^1 · p:6^1] --> [p:6^15]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:7^14]
//│ 	[c:7^14 · c:7^7]
//│ 		[c:7^14 · c:7^7 · c:7^7] ---> [c:7^14] (only one)
//│ [p:6^15]
//│ 	[p:6^15 · p:6^1]
//│ 		[p:6^15 · p:6^1 · p:6^1]
//│ 			[p:6^15 · p:6^1 · p:6^1 · p:6^1] ---> [p:6^15] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([c:7^14]:12^46 [p:6^15]:14^47)
//│ def [c:7^14 · c:7^7]:13 = (fun x:21 -> case x:21^27 of {
//│ 	C a:22 => case a:22^28 of {
//│ 		C b:23 => case b:23^29 of {
//│ 			C y:24 => ([c:7^14]:12^30 y:24^31)}}})
//│ def [c:7^14]:12 = (fun x:17 -> case x:17^17 of {
//│ 	C a:18 => case a:18^18 of {
//│ 		C b:19 => case b:19^19 of {
//│ 			C y:20 => ([c:7^14 · c:7^7]:13^20 y:20^21)}}})
//│ def [p:6^15 · p:6^1 · p:6^1]:16 = [C [C [p:6^15]:14^37]]
//│ def [p:6^15 · p:6^1]:15 = [C [C [p:6^15 · p:6^1 · p:6^1]:16^40]]
//│ def [p:6^15]:14 = [C [C [p:6^15 · p:6^1]:15^43]]
//│ def c:7 = (fun x:8 -> case x:8^7 of {
//│ 	C a:9 => case a:9^8 of {
//│ 		C b:10 => case b:10^9 of {
//│ 			C y:11 => (c:7^10 y:11^11)}}})
//│ def p:6 = [C [C p:6^4]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 38: [C 37: [p:6^15]:14^37]
//│ [C [p:6^15]:14^37] --->
//│ 	case b:23^29 of {C y:24 => ([c:7^14]:12^30 y:24^31)}
//│ 39: [C 38: [C 37: [p:6^15]:14^37]]
//│ [C [C [p:6^15]:14^37]] --->
//│ 	case a:22^28 of {C b:23 => case b:23^29 of {C y:24 => ([c:7^14]:12^30 y:24^31)}}
//│ 41: [C 40: [p:6^15 · p:6^1 · p:6^1]:16^40]
//│ [C [p:6^15 · p:6^1 · p:6^1]:16^40] --->
//│ 	case x:21^27 of {C a:22 => case a:22^28 of {C b:23 => case b:23^29 of {C y:24 => ([c:7^14]:12^30 y:24^31)}}}
//│ 42: [C 41: [C 40: [p:6^15 · p:6^1 · p:6^1]:16^40]]
//│ [C [C [p:6^15 · p:6^1 · p:6^1]:16^40]] --->
//│ 	case b:19^19 of {C y:20 => ([c:7^14 · c:7^7]:13^20 y:20^21)}
//│ 44: [C 43: [p:6^15 · p:6^1]:15^43]
//│ [C [p:6^15 · p:6^1]:15^43] --->
//│ 	case a:18^18 of {C b:19 => case b:19^19 of {C y:20 => ([c:7^14 · c:7^7]:13^20 y:20^21)}}
//│ 45: [C 44: [C 43: [p:6^15 · p:6^1]:15^43]]
//│ [C [C [p:6^15 · p:6^1]:15^43]] --->
//│ 	case x:17^17 of {C a:18 => case a:18^18 of {C b:19 => case b:19^19 of {C y:20 => ([c:7^14 · c:7^7]:13^20 y:20^21)}}}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([c:7^14]:12^49 [p:6^15]:14^50)
//│ def [c:7^14 · c:7^7]:13 = (fun x:21 -> x:21^64)
//│ def [c:7^14]:12 = (fun x:17 -> x:17^66)
//│ def [p:6^15 · p:6^1 · p:6^1]:16 = let b:23 = 
//│ 	let y:24 = [p:6^15]:14^72
//│ 	in ([c:7^14]:12^69 y:24^70)
//│ in b:23^68
//│ def [p:6^15 · p:6^1]:15 = let y:20 = 
//│ 	let a:22 = [p:6^15 · p:6^1 · p:6^1]:16^56
//│ 	in a:22^55
//│ in ([c:7^14 · c:7^7]:13^52 y:20^53)
//│ def [p:6^15]:14 = let a:18 = 
//│ 	let b:19 = [p:6^15 · p:6^1]:15^61
//│ 	in b:19^60
//│ in a:18^59
//│ def c:7 = (fun x:8 -> case x:8^78 of {
//│ 	C a:9 => case a:9^79 of {
//│ 		C b:10 => case b:10^80 of {
//│ 			C y:11 => (c:7^81 y:11^82)}}})
//│ def p:6 = [C [C p:6^75]]
//│ <<<<<<< after fusion <<<<<<<




let rec p = C(C(p))
fun c(x) = if x is
    C(a) then c(a)
fun id2(yy) = yy
fun id(y) = id2(y)
c(id(p))
//│ |#let| |#rec| |p| |#=| |C|(|C|(|p|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |id2|(|yy|)| |#=| |yy|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|c|(|id|(|p|)|)|
//│ Parsed: {let rec p = C (C (p,),); fun c = x, => if x is ‹(C (a,)) then c (a,)›; fun id2 = yy, => yy; fun id = y, => id2 (y,); c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:7^16 (id:9^17 p:6^18))
//│ def c:7 = (fun x:10 -> case x:10^4 of {
//│ 	C a:11 => (c:7^5 a:11^6)})
//│ def id:9 = (fun y:13 -> (id2:8^12 y:13^13))
//│ def id2:8 = (fun yy:12 -> yy:12^10)
//│ def p:6 = [C [C p:6^1]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(0'p_6^1)) <: 4'x
//│ 	[-p:6^1 · -p:6^18 · +id:9^17 · +id2:8^12 · -id2:8^12 · -id:9^17 · +c:7^16 · +c:7^5 · +c:7^5]  --->  [-p:6^18 · +id:9^17 · +id2:8^12 · -id2:8^12 · -id:9^17 · +c:7^16]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [c:7^16 · c:7^5 · c:7^5] --> [c:7^16]
//│ [p:6^18 · p:6^1] --> [p:6^18]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:7^16]
//│ 	[c:7^16 · c:7^5]
//│ 		[c:7^16 · c:7^5 · c:7^5] ---> [c:7^16] (only one)
//│ [id:9^17] ---> [id:9^17] (hopeless to continue)
//│ [p:6^18]
//│ 	[p:6^18 · p:6^1] ---> [p:6^18] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([c:7^16]:15^36 (id:9^37 [p:6^18]:14^38))
//│ def [c:7^16 · c:7^5]:16 = (fun x:17 -> case x:17^24 of {
//│ 	C a:18 => ([c:7^16]:15^25 a:18^26)})
//│ def [c:7^16]:15 = (fun x:19 -> case x:19^30 of {
//│ 	C a:20 => ([c:7^16 · c:7^5]:16^31 a:20^32)})
//│ def [p:6^18]:14 = [C [C [p:6^18]:14^21]]
//│ def c:7 = (fun x:10 -> case x:10^9 of {
//│ 	C a:11 => (c:7^10 a:11^11)})
//│ def id:9 = (fun y:13 -> (id2:8^17 y:13^18))
//│ def id2:8 = (fun yy:12 -> yy:12^15)
//│ def p:6 = [C [C p:6^6]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 22: [C 21: [p:6^18]:14^21]
//│ [C [p:6^18]:14^21] --->
//│ 	case x:17^24 of {C a:18 => ([c:7^16]:15^25 a:18^26)}
//│ 23: [C 22: [C 21: [p:6^18]:14^21]]
//│ [C [C [p:6^18]:14^21]] --->
//│ 	case x:19^30 of {C a:20 => ([c:7^16 · c:7^5]:16^31 a:20^32)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([c:7^16]:15^41 (id:9^42 [p:6^18]:14^43))
//│ def [c:7^16 · c:7^5]:16 = (fun x:17 -> x:17^48)
//│ def [c:7^16]:15 = (fun x:19 -> x:19^46)
//│ def [p:6^18]:14 = let a:20 = 
//│ 	let a:18 = [p:6^18]:14^62
//│ 	in ([c:7^16]:15^59 a:18^60)
//│ in ([c:7^16 · c:7^5]:16^56 a:20^57)
//│ def c:7 = (fun x:10 -> case x:10^68 of {
//│ 	C a:11 => (c:7^69 a:11^70)})
//│ def id:9 = (fun y:13 -> (id2:8^52 y:13^53))
//│ def id2:8 = (fun yy:12 -> yy:12^50)
//│ def p:6 = [C [C p:6^65]]
//│ <<<<<<< after fusion <<<<<<<

fun sum(ls) = if ls is
    C(h, t) then S(N, sum(t))
fun mapa(lsa) = if lsa is
    C(ha, ta) then C(primitive(ha), mapa(ta))
fun mapb(lsb) = if lsb is
    C(hb, tb) then C(primitive(hb), mapb(tb))
sum(mapa(mapb(primitive)))
//│ |#fun| |sum|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |S|(|N|,| |sum|(|t|)|)|←|↵|#fun| |mapa|(|lsa|)| |#=| |#if| |lsa| |is|→|C|(|ha|,| |ta|)| |#then| |C|(|primitive|(|ha|)|,| |mapa|(|ta|)|)|←|↵|#fun| |mapb|(|lsb|)| |#=| |#if| |lsb| |is|→|C|(|hb|,| |tb|)| |#then| |C|(|primitive|(|hb|)|,| |mapb|(|tb|)|)|←|↵|sum|(|mapa|(|mapb|(|primitive|)|)|)|
//│ Parsed: {fun sum = ls, => if ls is ‹(C (h, t,)) then S (N, sum (t,),)›; fun mapa = lsa, => if lsa is ‹(C (ha, ta,)) then C (primitive (ha,), mapa (ta,),)›; fun mapb = lsb, => if lsb is ‹(C (hb, tb,)) then C (primitive (hb,), mapb (tb,),)›; sum (mapa (mapb (primitive,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (sum:6^29 (mapa:7^30 (mapb:8^31 primitive:3^32)))
//│ def mapa:7 = (fun lsa:12 -> case lsa:12^9 of {
//│ 	C ha:13 ta:14 => [C (primitive:3^10 ha:13^11) (mapa:7^13 ta:14^14)]})
//│ def mapb:8 = (fun lsb:15 -> case lsb:15^19 of {
//│ 	C hb:16 tb:17 => [C (primitive:3^20 hb:16^21) (mapb:8^23 tb:17^24)]})
//│ def sum:6 = (fun ls:9 -> case ls:9^1 of {
//│ 	C h:10 t:11 => [S [N] (sum:6^3 t:11^4)]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(11'12_callres, 12'15_callres) <: 3'ls
//│ 	[-mapa:7^13 · -mapa:7^13 · -mapa:7^30 · +sum:6^29 · +sum:6^3 · +sum:6^3]  --->  [-mapa:7^13 · -mapa:7^30 · +sum:6^29 · +sum:6^3]
//│ C(17'22_callres, 18'25_callres) <: 8'lsa
//│ 	[-mapb:8^23 · -mapb:8^23 · -mapb:8^31 · +mapa:7^30 · +mapa:7^13 · +mapa:7^13]  --->  [-mapb:8^23 · -mapb:8^31 · +mapa:7^30 · +mapa:7^13]
//│ NoProd <: 14'lsb
//│ 	[+mapb:8^31 · +mapb:8^23 · +mapb:8^23]  --->  [+mapb:8^31 · +mapb:8^23]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [mapb:8^31 · mapb:8^23 · mapb:8^23] --> [mapb:8^31 · mapb:8^23]
//│ [sum:6^29 · sum:6^3 · sum:6^3] --> [sum:6^29 · sum:6^3]
//│ [mapa:7^30 · mapa:7^13 · mapa:7^13] --> [mapa:7^30 · mapa:7^13]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [mapa:7^30]
//│ 	[mapa:7^30 · mapa:7^13]
//│ 		[mapa:7^30 · mapa:7^13 · mapa:7^13] ---> [mapa:7^30 · mapa:7^13] (only one)
//│ [mapb:8^31]
//│ 	[mapb:8^31 · mapb:8^23]
//│ 		[mapb:8^31 · mapb:8^23 · mapb:8^23] ---> [mapb:8^31 · mapb:8^23] (only one)
//│ [sum:6^29]
//│ 	[sum:6^29 · sum:6^3]
//│ 		[sum:6^29 · sum:6^3 · sum:6^3] ---> [sum:6^29 · sum:6^3] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([sum:6^29]:20^92 ([mapa:7^30]:18^93 ([mapb:8^31]:22^94 primitive:3^95)))
//│ def [mapa:7^30 · mapa:7^13]:19 = (fun lsa:36 -> case lsa:36^74 of {
//│ 	C ha:37 ta:38 => [C (primitive:3^75 ha:37^76) ([mapa:7^30 · mapa:7^13]:19^78 ta:38^79)]})
//│ def [mapa:7^30]:18 = (fun lsa:30 -> case lsa:30^56 of {
//│ 	C ha:31 ta:32 => [C (primitive:3^57 ha:31^58) ([mapa:7^30 · mapa:7^13]:19^60 ta:32^61)]})
//│ def [mapb:8^31 · mapb:8^23]:23 = (fun lsb:27 -> case lsb:27^46 of {
//│ 	C hb:28 tb:29 => [C (primitive:3^47 hb:28^48) ([mapb:8^31 · mapb:8^23]:23^50 tb:29^51)]})
//│ def [mapb:8^31]:22 = (fun lsb:24 -> case lsb:24^36 of {
//│ 	C hb:25 tb:26 => [C (primitive:3^37 hb:25^38) ([mapb:8^31 · mapb:8^23]:23^40 tb:26^41)]})
//│ def [sum:6^29 · sum:6^3]:21 = (fun ls:33 -> case ls:33^66 of {
//│ 	C h:34 t:35 => [S [N] ([sum:6^29 · sum:6^3]:21^68 t:35^69)]})
//│ def [sum:6^29]:20 = (fun ls:39 -> case ls:39^84 of {
//│ 	C h:40 t:41 => [S [N] ([sum:6^29 · sum:6^3]:21^86 t:41^87)]})
//│ def mapa:7 = (fun lsa:12 -> case lsa:12^16 of {
//│ 	C ha:13 ta:14 => [C (primitive:3^17 ha:13^18) (mapa:7^20 ta:14^21)]})
//│ def mapb:8 = (fun lsb:15 -> case lsb:15^26 of {
//│ 	C hb:16 tb:17 => [C (primitive:3^27 hb:16^28) (mapb:8^30 tb:17^31)]})
//│ def sum:6 = (fun ls:9 -> case ls:9^8 of {
//│ 	C h:10 t:11 => [S [N] (sum:6^10 t:11^11)]})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 43: [C 39: (37: primitive:3^37 38: hb:25^38) 42: (40: [mapb:8^31 · mapb:8^23]:23^40 41: tb:26^41)]
//│ [C (primitive:3^37 hb:25^38) ([mapb:8^31 · mapb:8^23]:23^40 tb:26^41)] --->
//│ 	case lsa:30^56 of {C ha:31 ta:32 => [C (primitive:3^57 ha:31^58) ([mapa:7^30 · mapa:7^13]:19^60 ta:32^61)]}
//│ 53: [C 49: (47: primitive:3^47 48: hb:28^48) 52: (50: [mapb:8^31 · mapb:8^23]:23^50 51: tb:29^51)]
//│ [C (primitive:3^47 hb:28^48) ([mapb:8^31 · mapb:8^23]:23^50 tb:29^51)] --->
//│ 	case lsa:36^74 of {C ha:37 ta:38 => [C (primitive:3^75 ha:37^76) ([mapa:7^30 · mapa:7^13]:19^78 ta:38^79)]}
//│ 63: [C 59: (57: primitive:3^57 58: ha:31^58) 62: (60: [mapa:7^30 · mapa:7^13]:19^60 61: ta:32^61)]
//│ [C (primitive:3^57 ha:31^58) ([mapa:7^30 · mapa:7^13]:19^60 ta:32^61)] --->
//│ 	case ls:39^84 of {C h:40 t:41 => [S [N] ([sum:6^29 · sum:6^3]:21^86 t:41^87)]}
//│ 81: [C 77: (75: primitive:3^75 76: ha:37^76) 80: (78: [mapa:7^30 · mapa:7^13]:19^78 79: ta:38^79)]
//│ [C (primitive:3^75 ha:37^76) ([mapa:7^30 · mapa:7^13]:19^78 ta:38^79)] --->
//│ 	case ls:33^66 of {C h:34 t:35 => [S [N] ([sum:6^29 · sum:6^3]:21^68 t:35^69)]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([sum:6^29]:20^99 ([mapa:7^30]:18^100 ([mapb:8^31]:22^101 primitive:3^102)))
//│ def [mapa:7^30 · mapa:7^13]:19 = (fun lsa:36 -> lsa:36^158)
//│ def [mapa:7^30]:18 = (fun lsa:30 -> lsa:30^164)
//│ def [mapb:8^31 · mapb:8^23]:23 = (fun lsb:27 -> case lsb:27^116 of {
//│ 	C hb:28 tb:29 => let ha:37 = (primitive:3^134 hb:28^135)
//│ 	in let ta:38 = ([mapb:8^31 · mapb:8^23]:23^130 tb:29^131)
//│ 	in let h:34 = (primitive:3^126 ha:37^127)
//│ 	in let t:35 = ([mapa:7^30 · mapa:7^13]:19^122 ta:38^123)
//│ 	in [S [N] ([sum:6^29 · sum:6^3]:21^118 t:35^119)]})
//│ def [mapb:8^31]:22 = (fun lsb:24 -> case lsb:24^166 of {
//│ 	C hb:25 tb:26 => let ha:31 = (primitive:3^184 hb:25^185)
//│ 	in let ta:32 = ([mapb:8^31 · mapb:8^23]:23^180 tb:26^181)
//│ 	in let h:40 = (primitive:3^176 ha:31^177)
//│ 	in let t:41 = ([mapa:7^30 · mapa:7^13]:19^172 ta:32^173)
//│ 	in [S [N] ([sum:6^29 · sum:6^3]:21^168 t:41^169)]})
//│ def [sum:6^29 · sum:6^3]:21 = (fun ls:33 -> ls:33^160)
//│ def [sum:6^29]:20 = (fun ls:39 -> ls:39^162)
//│ def mapa:7 = (fun lsa:12 -> case lsa:12^106 of {
//│ 	C ha:13 ta:14 => [C (primitive:3^107 ha:13^108) (mapa:7^110 ta:14^111)]})
//│ def mapb:8 = (fun lsb:15 -> case lsb:15^140 of {
//│ 	C hb:16 tb:17 => [C (primitive:3^141 hb:16^142) (mapb:8^144 tb:17^145)]})
//│ def sum:6 = (fun ls:9 -> case ls:9^150 of {
//│ 	C h:10 t:11 => [S [N] (sum:6^152 t:11^153)]})
//│ <<<<<<< after fusion <<<<<<<


if C(A, B(C)) is
    C(a, b) then D(b)
//│ |#if| |C|(|A|,| |B|(|C|)|)| |is|→|C|(|a|,| |b|)| |#then| |D|(|b|)|←|
//│ Parsed: {if C (A, B (C,),) is ‹(C (a, b,)) then D (b,)›}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ case [C [A] [B [C]]] of {
//│ 	C a:6 b:7 => [D b:7^5]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ case [C [A] [B [C]]] of {
//│ 	C a:8 b:9 => [D b:9^12]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 11: [C 8: [A] 10: [B 9: [C]]]
//│ [C [A] [B [C]]] --->
//│ 	case [C [A] [B [C]]] of {C a:8 b:9 => [D b:9^12]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ let a:8 = [A]
//│ in let b:9 = [B [C]]
//│ in [D b:9^15]
//│ <<<<<<< after fusion <<<<<<<
//│



let rec p = C(C(C(p)))
fun ca(x) = if x is
    C(a) then cb(a)
fun cb(x) = if x is
    C(b) then ca(b)
ca(p)
//│ |#let| |#rec| |p| |#=| |C|(|C|(|C|(|p|)|)|)|↵|#fun| |ca|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |cb|(|a|)|←|↵|#fun| |cb|(|x|)| |#=| |#if| |x| |is|→|C|(|b|)| |#then| |ca|(|b|)|←|↵|ca|(|p|)|
//│ Parsed: {let rec p = C (C (C (p,),),); fun ca = x, => if x is ‹(C (a,)) then cb (a,)›; fun cb = x, => if x is ‹(C (b,)) then ca (b,)›; ca (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (ca:7^17 p:6^18)
//│ def ca:7 = (fun x:9 -> case x:9^5 of {
//│ 	C a:10 => (cb:8^6 a:10^7)})
//│ def cb:8 = (fun x:11 -> case x:11^11 of {
//│ 	C b:12 => (ca:7^12 b:12^13)})
//│ def p:6 = [C [C [C p:6^1]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(C(0'p_6^1))) <: 3'x
//│ 	[-p:6^1 · -p:6^1 · -p:6^18 · +ca:7^17 · +cb:8^6 · +ca:7^12 · +cb:8^6 · +ca:7^12 · +cb:8^6 · +ca:7^12]  --->  [-p:6^18 · +ca:7^17]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6 · ca:7^12 · cb:8^6 · ca:7^12] --> [ca:7^17]
//│ [p:6^18 · p:6^1 · p:6^1] --> [p:6^18]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [ca:7^17]
//│ 	[ca:7^17 · cb:8^6]
//│ 		[ca:7^17 · cb:8^6 · ca:7^12]
//│ 			[ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6]
//│ 				[ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6 · ca:7^12]
//│ 					[ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6 · ca:7^12 · cb:8^6]
//│ 						[ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6 · ca:7^12 · cb:8^6 · ca:7^12] ---> [ca:7^17] (only one)
//│ [p:6^18]
//│ 	[p:6^18 · p:6^1]
//│ 		[p:6^18 · p:6^1 · p:6^1] ---> [p:6^18] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([ca:7^17]:13^64 [p:6^18]:19^65)
//│ def [ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6 · ca:7^12 · cb:8^6]:18 = (fun x:21 -> case x:21^20 of {
//│ 	C b:22 => ([ca:7^17]:13^21 b:22^22)})
//│ def [ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6 · ca:7^12]:17 = (fun x:27 -> case x:27^46 of {
//│ 	C a:28 => ([ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6 · ca:7^12 · cb:8^6]:18^47 a:28^48)})
//│ def [ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6]:16 = (fun x:23 -> case x:23^26 of {
//│ 	C b:24 => ([ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6 · ca:7^12]:17^27 b:24^28)})
//│ def [ca:7^17 · cb:8^6 · ca:7^12]:15 = (fun x:29 -> case x:29^52 of {
//│ 	C a:30 => ([ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6]:16^53 a:30^54)})
//│ def [ca:7^17 · cb:8^6]:14 = (fun x:25 -> case x:25^40 of {
//│ 	C b:26 => ([ca:7^17 · cb:8^6 · ca:7^12]:15^41 b:26^42)})
//│ def [ca:7^17]:13 = (fun x:31 -> case x:31^58 of {
//│ 	C a:32 => ([ca:7^17 · cb:8^6]:14^59 a:32^60)})
//│ def [p:6^18 · p:6^1]:20 = [C [C [C [p:6^18]:19^32]]]
//│ def [p:6^18]:19 = [C [C [C [p:6^18 · p:6^1]:20^36]]]
//│ def ca:7 = (fun x:9 -> case x:9^8 of {
//│ 	C a:10 => (cb:8^9 a:10^10)})
//│ def cb:8 = (fun x:11 -> case x:11^14 of {
//│ 	C b:12 => (ca:7^15 b:12^16)})
//│ def p:6 = [C [C [C p:6^4]]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 33: [C 32: [p:6^18]:19^32]
//│ [C [p:6^18]:19^32] --->
//│ 	case x:21^20 of {C b:22 => ([ca:7^17]:13^21 b:22^22)}
//│ 34: [C 33: [C 32: [p:6^18]:19^32]]
//│ [C [C [p:6^18]:19^32]] --->
//│ 	case x:27^46 of {C a:28 => ([ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6 · ca:7^12 · cb:8^6]:18^47 a:28^48)}
//│ 35: [C 34: [C 33: [C 32: [p:6^18]:19^32]]]
//│ [C [C [C [p:6^18]:19^32]]] --->
//│ 	case x:23^26 of {C b:24 => ([ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6 · ca:7^12]:17^27 b:24^28)}
//│ 37: [C 36: [p:6^18 · p:6^1]:20^36]
//│ [C [p:6^18 · p:6^1]:20^36] --->
//│ 	case x:29^52 of {C a:30 => ([ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6]:16^53 a:30^54)}
//│ 38: [C 37: [C 36: [p:6^18 · p:6^1]:20^36]]
//│ [C [C [p:6^18 · p:6^1]:20^36]] --->
//│ 	case x:25^40 of {C b:26 => ([ca:7^17 · cb:8^6 · ca:7^12]:15^41 b:26^42)}
//│ 39: [C 38: [C 37: [C 36: [p:6^18 · p:6^1]:20^36]]]
//│ [C [C [C [p:6^18 · p:6^1]:20^36]]] --->
//│ 	case x:31^58 of {C a:32 => ([ca:7^17 · cb:8^6]:14^59 a:32^60)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([ca:7^17]:13^67 [p:6^18]:19^68)
//│ def [ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6 · ca:7^12 · cb:8^6]:18 = (fun x:21 -> x:21^89)
//│ def [ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6 · ca:7^12]:17 = (fun x:27 -> x:27^70)
//│ def [ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6]:16 = (fun x:23 -> x:23^103)
//│ def [ca:7^17 · cb:8^6 · ca:7^12]:15 = (fun x:29 -> x:29^87)
//│ def [ca:7^17 · cb:8^6]:14 = (fun x:25 -> x:25^109)
//│ def [ca:7^17]:13 = (fun x:31 -> x:31^72)
//│ def [p:6^18 · p:6^1]:20 = let b:24 = 
//│ 	let a:28 = 
//│ 		let b:22 = [p:6^18]:19^120
//│ 		in ([ca:7^17]:13^117 b:22^118)
//│ 	in ([ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6 · ca:7^12 · cb:8^6]:18^114 a:28^115)
//│ in ([ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6 · ca:7^12]:17^111 b:24^112)
//│ def [p:6^18]:19 = let a:32 = 
//│ 	let b:26 = 
//│ 		let a:30 = [p:6^18 · p:6^1]:20^83
//│ 		in ([ca:7^17 · cb:8^6 · ca:7^12 · cb:8^6]:16^80 a:30^81)
//│ 	in ([ca:7^17 · cb:8^6 · ca:7^12]:15^77 b:26^78)
//│ in ([ca:7^17 · cb:8^6]:14^74 a:32^75)
//│ def ca:7 = (fun x:9 -> case x:9^97 of {
//│ 	C a:10 => (cb:8^98 a:10^99)})
//│ def cb:8 = (fun x:11 -> case x:11^91 of {
//│ 	C b:12 => (ca:7^92 b:12^93)})
//│ def p:6 = [C [C [C p:6^105]]]
//│ <<<<<<< after fusion <<<<<<<


// def p:6^18 =
//      ... p:6^1 ~> p:6^18.p:6^1 ...

// def p:6^18.p:6^1 =
//      ... p:6^1 ~> p:6^18 ...

// def ca:7^17
//      ... 



fun c1(x1) = if x1 is
    C(a) then c2(a)
fun c2(x2) = if x2 is
    C(b) then c1(b)
let p1 = C(C(C(p2)))
let p2 = C(p1)
c1(p1)
//│ |#fun| |c1|(|x1|)| |#=| |#if| |x1| |is|→|C|(|a|)| |#then| |c2|(|a|)|←|↵|#fun| |c2|(|x2|)| |#=| |#if| |x2| |is|→|C|(|b|)| |#then| |c1|(|b|)|←|↵|#let| |p1| |#=| |C|(|C|(|C|(|p2|)|)|)|↵|#let| |p2| |#=| |C|(|p1|)|↵|c1|(|p1|)|
//│ Parsed: {fun c1 = x1, => if x1 is ‹(C (a,)) then c2 (a,)›; fun c2 = x2, => if x2 is ‹(C (b,)) then c1 (b,)›; let p1 = C (C (C (p2,),),); let p2 = C (p1,); c1 (p1,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c1:6^19 p1:8^20)
//│ def c1:6 = (fun x1:10 -> case x1:10^1 of {
//│ 	C a:11 => (c2:7^2 a:11^3)})
//│ def c2:7 = (fun x2:12 -> case x2:12^7 of {
//│ 	C b:13 => (c1:6^8 b:13^9)})
//│ def p1:8 = [C [C [C p2:9^13]]]
//│ def p2:9 = [C p1:8^17]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(C(3'p2_9^13)) <: 8'x2
//│ 	[-p1:8^17 · -p2:9^13 · -p1:8^20 · +c1:6^19 · +c2:7^2 · +c1:6^8 · +c2:7^2 · +c1:6^8 · +c2:7^2]  --->  [-p1:8^20 · +c1:6^19 · +c2:7^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [c1:6^19 · c2:7^2 · c1:6^8 · c2:7^2 · c1:6^8 · c2:7^2] --> [c1:6^19 · c2:7^2]
//│ [p1:8^20 · p2:9^13 · p1:8^17] --> [p1:8^20]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c1:6^19]
//│ 	[c1:6^19 · c2:7^2]
//│ 		[c1:6^19 · c2:7^2 · c1:6^8]
//│ 			[c1:6^19 · c2:7^2 · c1:6^8 · c2:7^2]
//│ 				[c1:6^19 · c2:7^2 · c1:6^8 · c2:7^2 · c1:6^8]
//│ 					[c1:6^19 · c2:7^2 · c1:6^8 · c2:7^2 · c1:6^8 · c2:7^2] ---> [c1:6^19 · c2:7^2] (only one)
//│ [p1:8^20]
//│ 	[p1:8^20 · p2:9^13]
//│ 		[p1:8^20 · p2:9^13 · p1:8^17] ---> [p1:8^20] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([c1:6^19]:14^58 [p1:8^20]:19^59)
//│ def [c1:6^19 · c2:7^2 · c1:6^8 · c2:7^2 · c1:6^8]:18 = (fun x1:29 -> case x1:29^52 of {
//│ 	C a:30 => ([c1:6^19 · c2:7^2]:15^53 a:30^54)})
//│ def [c1:6^19 · c2:7^2 · c1:6^8 · c2:7^2]:17 = (fun x2:25 -> case x2:25^40 of {
//│ 	C b:26 => ([c1:6^19 · c2:7^2 · c1:6^8 · c2:7^2 · c1:6^8]:18^41 b:26^42)})
//│ def [c1:6^19 · c2:7^2 · c1:6^8]:16 = (fun x1:27 -> case x1:27^46 of {
//│ 	C a:28 => ([c1:6^19 · c2:7^2 · c1:6^8 · c2:7^2]:17^47 a:28^48)})
//│ def [c1:6^19 · c2:7^2]:15 = (fun x2:21 -> case x2:21^22 of {
//│ 	C b:22 => ([c1:6^19 · c2:7^2 · c1:6^8]:16^23 b:22^24)})
//│ def [c1:6^19]:14 = (fun x1:23 -> case x1:23^34 of {
//│ 	C a:24 => ([c1:6^19 · c2:7^2]:15^35 a:24^36)})
//│ def [p1:8^20 · p2:9^13]:20 = [C [p1:8^20]:19^32]
//│ def [p1:8^20]:19 = [C [C [C [p1:8^20 · p2:9^13]:20^28]]]
//│ def c1:6 = (fun x1:10 -> case x1:10^4 of {
//│ 	C a:11 => (c2:7^5 a:11^6)})
//│ def c2:7 = (fun x2:12 -> case x2:12^10 of {
//│ 	C b:13 => (c1:6^11 b:13^12)})
//│ def p1:8 = [C [C [C p2:9^16]]]
//│ def p2:9 = [C p1:8^20]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 29: [C 28: [p1:8^20 · p2:9^13]:20^28]
//│ [C [p1:8^20 · p2:9^13]:20^28] --->
//│ 	case x1:27^46 of {C a:28 => ([c1:6^19 · c2:7^2 · c1:6^8 · c2:7^2]:17^47 a:28^48)}
//│ 30: [C 29: [C 28: [p1:8^20 · p2:9^13]:20^28]]
//│ [C [C [p1:8^20 · p2:9^13]:20^28]] --->
//│ 	case x2:21^22 of {C b:22 => ([c1:6^19 · c2:7^2 · c1:6^8]:16^23 b:22^24)}
//│ 31: [C 30: [C 29: [C 28: [p1:8^20 · p2:9^13]:20^28]]]
//│ [C [C [C [p1:8^20 · p2:9^13]:20^28]]] --->
//│ 	case x1:23^34 of {C a:24 => ([c1:6^19 · c2:7^2]:15^35 a:24^36)}
//│ 	case x1:29^52 of {C a:30 => ([c1:6^19 · c2:7^2]:15^53 a:30^54)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 33: [C 32: [p1:8^20]:19^32]
//│ [C [p1:8^20]:19^32] --->
//│ 	case x2:25^40 of {C b:26 => ([c1:6^19 · c2:7^2 · c1:6^8 · c2:7^2 · c1:6^8]:18^41 b:26^42)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([c1:6^19]:14^61 [p1:8^20]:19^62)
//│ def [c1:6^19 · c2:7^2 · c1:6^8 · c2:7^2 · c1:6^8]:18 = (fun x1:29 -> case x1:29^104 of {
//│ 	C a:30 => ([c1:6^19 · c2:7^2]:15^105 a:30^106)})
//│ def [c1:6^19 · c2:7^2 · c1:6^8 · c2:7^2]:17 = (fun x2:25 -> x2:25^110)
//│ def [c1:6^19 · c2:7^2 · c1:6^8]:16 = (fun x1:27 -> x1:27^96)
//│ def [c1:6^19 · c2:7^2]:15 = (fun x2:21 -> x2:21^112)
//│ def [c1:6^19]:14 = (fun x1:23 -> x1:23^90)
//│ def [p1:8^20 · p2:9^13]:20 = let b:26 = [p1:8^20]:19^73
//│ in ([c1:6^19 · c2:7^2 · c1:6^8 · c2:7^2 · c1:6^8]:18^70 b:26^71)
//│ def [p1:8^20]:19 = let a:24 = 
//│ 	let b:22 = 
//│ 		let a:28 = [p1:8^20 · p2:9^13]:20^84
//│ 		in ([c1:6^19 · c2:7^2 · c1:6^8 · c2:7^2]:17^81 a:28^82)
//│ 	in ([c1:6^19 · c2:7^2 · c1:6^8]:16^78 b:22^79)
//│ in ([c1:6^19 · c2:7^2]:15^75 a:24^76)
//│ def c1:6 = (fun x1:10 -> case x1:10^98 of {
//│ 	C a:11 => (c2:7^99 a:11^100)})
//│ def c2:7 = (fun x2:12 -> case x2:12^64 of {
//│ 	C b:13 => (c1:6^65 b:13^66)})
//│ def p1:8 = [C [C [C p2:9^92]]]
//│ def p2:9 = [C p1:8^88]
//│ <<<<<<< after fusion <<<<<<<


fun ff(x) = if x is
    K then T
    KK then TT
    KKKK then TTTT
fun map(ls) = if ls is
    C(h, t) then C(ff(h), map(t))
    N then N
let l = C(K, C(KK, C(KKKK, N)))
map(l)
//│ |#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|ff|(|h|)|,| |map|(|t|)|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|l|)|
//│ Parsed: {fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; fun map = ls, => if ls is ‹(C (h, t,)) then C (ff (h,), map (t,),); (N) then N›; let l = C (K, C (KK, C (KKKK, N,),),); map (l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (map:7^25 l:8^26)
//│ def ff:6 = (fun x:9 -> case x:9^1 of {
//│ 	K => [T]
//│ 	| KK => [TT]
//│ 	| KKKK => [TTTT]})
//│ def l:8 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map:7 = (fun ls:10 -> case ls:10^7 of {
//│ 	C h:11 t:12 => [C (ff:6^8 h:11^9) (map:7^11 t:12^12)]
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 7't
//│ 	[-l:8^26 · +map:7^25 · +map:7^11 · +map:7^11 · +map:7^11 · +map:7^11]  --->  [-l:8^26 · +map:7^25 · +map:7^11 · +map:7^11 · +map:7^11]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [map:7^25 · map:7^11 · map:7^11 · map:7^11 · map:7^11] --> [map:7^25 · map:7^11 · map:7^11 · map:7^11]
//│ [l:8^26] --> [l:8^26]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [l:8^26]
//│ 
//│ [map:7^25]
//│ 	[map:7^25 · map:7^11]
//│ 		[map:7^25 · map:7^11 · map:7^11]
//│ 			[map:7^25 · map:7^11 · map:7^11 · map:7^11]
//│ 				[map:7^25 · map:7^11 · map:7^11 · map:7^11 · map:7^11] ---> [map:7^25 · map:7^11 · map:7^11 · map:7^11] (only one)
//│ 				[map:7^25 · map:7^11 · map:7^11 · map:7^11 · ff:6^8] ---> [ff:6^8] (hopeless to continue)
//│ 			[map:7^25 · map:7^11 · map:7^11 · ff:6^8] ---> [ff:6^8] (hopeless to continue)
//│ 		[map:7^25 · map:7^11 · ff:6^8] ---> [ff:6^8] (hopeless to continue)
//│ 	[map:7^25 · ff:6^8] ---> [ff:6^8] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([map:7^25]:13^79 [l:8^26]:17^80)
//│ def [l:8^26]:17 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def [map:7^25 · map:7^11 · map:7^11 · map:7^11]:16 = (fun ls:27 -> case ls:27^68 of {
//│ 	C h:28 t:29 => [C (ff:6^69 h:28^70) ([map:7^25 · map:7^11 · map:7^11 · map:7^11]:16^72 t:29^73)]
//│ 	| N => [N]})
//│ def [map:7^25 · map:7^11 · map:7^11]:15 = (fun ls:24 -> case ls:24^57 of {
//│ 	C h:25 t:26 => [C (ff:6^58 h:25^59) ([map:7^25 · map:7^11 · map:7^11 · map:7^11]:16^61 t:26^62)]
//│ 	| N => [N]})
//│ def [map:7^25 · map:7^11]:14 = (fun ls:21 -> case ls:21^46 of {
//│ 	C h:22 t:23 => [C (ff:6^47 h:22^48) ([map:7^25 · map:7^11 · map:7^11]:15^50 t:23^51)]
//│ 	| N => [N]})
//│ def [map:7^25]:13 = (fun ls:18 -> case ls:18^28 of {
//│ 	C h:19 t:20 => [C (ff:6^29 h:19^30) ([map:7^25 · map:7^11]:14^32 t:20^33)]
//│ 	| N => [N]})
//│ def ff:6 = (fun x:9 -> case x:9^4 of {
//│ 	K => [T]
//│ 	| KK => [TT]
//│ 	| KKKK => [TTTT]})
//│ def l:8 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map:7 = (fun ls:10 -> case ls:10^10 of {
//│ 	C h:11 t:12 => [C (ff:6^11 h:11^12) (map:7^14 t:12^15)]
//│ 	| N => [N]})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 39: [K]
//│ [K] --->
//│ 	case x:9^4 of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ 40: [KK]
//│ [KK] --->
//│ 	case x:9^4 of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ 41: [KKKK]
//│ [KKKK] --->
//│ 	case x:9^4 of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ 42: [N]
//│ [N] --->
//│ 	case ls:27^68 of {C h:28 t:29 => [C (ff:6^69 h:28^70) ([map:7^25 · map:7^11 · map:7^11 · map:7^11]:16^72 t:29^73)] | N => [N]}
//│ 43: [C 41: [KKKK] 42: [N]]
//│ [C [KKKK] [N]] --->
//│ 	case ls:24^57 of {C h:25 t:26 => [C (ff:6^58 h:25^59) ([map:7^25 · map:7^11 · map:7^11 · map:7^11]:16^61 t:26^62)] | N => [N]}
//│ 44: [C 40: [KK] 43: [C 41: [KKKK] 42: [N]]]
//│ [C [KK] [C [KKKK] [N]]] --->
//│ 	case ls:21^46 of {C h:22 t:23 => [C (ff:6^47 h:22^48) ([map:7^25 · map:7^11 · map:7^11]:15^50 t:23^51)] | N => [N]}
//│ 45: [C 39: [K] 44: [C 40: [KK] 43: [C 41: [KKKK] 42: [N]]]]
//│ [C [K] [C [KK] [C [KKKK] [N]]]] --->
//│ 	case ls:18^28 of {C h:19 t:20 => [C (ff:6^29 h:19^30) ([map:7^25 · map:7^11]:14^32 t:20^33)] | N => [N]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([map:7^25]:13^82 [l:8^26]:17^83)
//│ def [l:8^26]:17 = let h:19 = [T]
//│ in let t:20 = 
//│ 	let h:22 = [TT]
//│ 	in let t:23 = 
//│ 		let h:25 = [TTTT]
//│ 		in let t:26 = [N]
//│ 		in [C (ff:6^114 h:25^115) ([map:7^25 · map:7^11 · map:7^11 · map:7^11]:16^117 t:26^118)]
//│ 	in [C (ff:6^107 h:22^108) ([map:7^25 · map:7^11 · map:7^11]:15^110 t:23^111)]
//│ in [C (ff:6^100 h:19^101) ([map:7^25 · map:7^11]:14^103 t:20^104)]
//│ def [map:7^25 · map:7^11 · map:7^11 · map:7^11]:16 = (fun ls:27 -> ls:27^142)
//│ def [map:7^25 · map:7^11 · map:7^11]:15 = (fun ls:24 -> ls:24^98)
//│ def [map:7^25 · map:7^11]:14 = (fun ls:21 -> ls:21^85)
//│ def [map:7^25]:13 = (fun ls:18 -> ls:18^138)
//│ def ff:6 = (fun x:9 -> x:9^140)
//│ def l:8 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map:7 = (fun ls:10 -> case ls:10^87 of {
//│ 	C h:11 t:12 => [C (ff:6^88 h:11^89) (map:7^91 t:12^92)]
//│ 	| N => [N]})
//│ <<<<<<< after fusion <<<<<<<


fun map(ls) = if ls is
    C(h, t) then C(
        (if h is
            K then T
            KK then TT
            KKKK then TTTT
        ),
        map(t)
    )
    N then N
let l = C(K, C(KK, C(KKKK, N)))
map(l)
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|→|(|#if| |h| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|)|,|↵|map|(|t|)|←|↵|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|l|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (h, t,)) then C ('(' if h is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›, ')', map (t,),); (N) then N›; let l = C (K, C (KK, C (KKKK, N,),),); map (l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (map:6^21 l:7^22)
//│ def l:7 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map:6 = (fun ls:8 -> case ls:8^1 of {
//│ 	C h:9 t:10 => [C case h:9^2 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} (map:6^7 t:10^8)]
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 4't
//│ 	[-l:7^22 · +map:6^21 · +map:6^7 · +map:6^7 · +map:6^7 · +map:6^7]  --->  [-l:7^22 · +map:6^21 · +map:6^7 · +map:6^7 · +map:6^7]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [map:6^21 · map:6^7 · map:6^7 · map:6^7 · map:6^7] --> [map:6^21 · map:6^7 · map:6^7 · map:6^7]
//│ [l:7^22] --> [l:7^22]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [l:7^22]
//│ 
//│ [map:6^21]
//│ 	[map:6^21 · map:6^7]
//│ 		[map:6^21 · map:6^7 · map:6^7]
//│ 			[map:6^21 · map:6^7 · map:6^7 · map:6^7]
//│ 				[map:6^21 · map:6^7 · map:6^7 · map:6^7 · map:6^7] ---> [map:6^21 · map:6^7 · map:6^7 · map:6^7] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([map:6^21]:12^83 [l:7^22]:11^84)
//│ def [l:7^22]:11 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def [map:6^21 · map:6^7 · map:6^7 · map:6^7]:15 = (fun ls:16 -> case ls:16^24 of {
//│ 	C h:17 t:18 => [C case h:17^25 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} ([map:6^21 · map:6^7 · map:6^7 · map:6^7]:15^30 t:18^31)]
//│ 	| N => [N]})
//│ def [map:6^21 · map:6^7 · map:6^7]:14 = (fun ls:25 -> case ls:25^63 of {
//│ 	C h:26 t:27 => [C case h:26^64 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} ([map:6^21 · map:6^7 · map:6^7 · map:6^7]:15^69 t:27^70)]
//│ 	| N => [N]})
//│ def [map:6^21 · map:6^7]:13 = (fun ls:19 -> case ls:19^37 of {
//│ 	C h:20 t:21 => [C case h:20^38 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} ([map:6^21 · map:6^7 · map:6^7]:14^43 t:21^44)]
//│ 	| N => [N]})
//│ def [map:6^21]:12 = (fun ls:22 -> case ls:22^50 of {
//│ 	C h:23 t:24 => [C case h:23^51 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} ([map:6^21 · map:6^7]:13^56 t:24^57)]
//│ 	| N => [N]})
//│ def l:7 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map:6 = (fun ls:8 -> case ls:8^4 of {
//│ 	C h:9 t:10 => [C case h:9^5 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} (map:6^10 t:10^11)]
//│ 	| N => [N]})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 76: [K]
//│ [K] --->
//│ 	case h:23^51 of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ 77: [KK]
//│ [KK] --->
//│ 	case h:20^38 of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ 78: [KKKK]
//│ [KKKK] --->
//│ 	case h:26^64 of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ 79: [N]
//│ [N] --->
//│ 	case ls:16^24 of {C h:17 t:18 => [C case h:17^25 of {K => [T] | KK => [TT] | KKKK => [TTTT]} ([map:6^21 · map:6^7 · map:6^7 · map:6^7]:15^30 t:18^31)] | N => [N]}
//│ 80: [C 78: [KKKK] 79: [N]]
//│ [C [KKKK] [N]] --->
//│ 	case ls:25^63 of {C h:26 t:27 => [C case h:26^64 of {K => [T] | KK => [TT] | KKKK => [TTTT]} ([map:6^21 · map:6^7 · map:6^7 · map:6^7]:15^69 t:27^70)] | N => [N]}
//│ 81: [C 77: [KK] 80: [C 78: [KKKK] 79: [N]]]
//│ [C [KK] [C [KKKK] [N]]] --->
//│ 	case ls:19^37 of {C h:20 t:21 => [C case h:20^38 of {K => [T] | KK => [TT] | KKKK => [TTTT]} ([map:6^21 · map:6^7 · map:6^7]:14^43 t:21^44)] | N => [N]}
//│ 82: [C 76: [K] 81: [C 77: [KK] 80: [C 78: [KKKK] 79: [N]]]]
//│ [C [K] [C [KK] [C [KKKK] [N]]]] --->
//│ 	case ls:22^50 of {C h:23 t:24 => [C case h:23^51 of {K => [T] | KK => [TT] | KKKK => [TTTT]} ([map:6^21 · map:6^7]:13^56 t:24^57)] | N => [N]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([map:6^21]:12^86 [l:7^22]:11^87)
//│ def [l:7^22]:11 = let h:23 = [T]
//│ in let t:24 = 
//│ 	let h:20 = [TT]
//│ 	in let t:21 = 
//│ 		let h:26 = [TTTT]
//│ 		in let t:27 = [N]
//│ 		in [C h:26^125 ([map:6^21 · map:6^7 · map:6^7 · map:6^7]:15^126 t:27^127)]
//│ 	in [C h:20^120 ([map:6^21 · map:6^7 · map:6^7]:14^121 t:21^122)]
//│ in [C h:23^115 ([map:6^21 · map:6^7]:13^116 t:24^117)]
//│ def [map:6^21 · map:6^7 · map:6^7 · map:6^7]:15 = (fun ls:16 -> ls:16^140)
//│ def [map:6^21 · map:6^7 · map:6^7]:14 = (fun ls:25 -> ls:25^89)
//│ def [map:6^21 · map:6^7]:13 = (fun ls:19 -> ls:19^111)
//│ def [map:6^21]:12 = (fun ls:22 -> ls:22^113)
//│ def l:7 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map:6 = (fun ls:8 -> case ls:8^98 of {
//│ 	C h:9 t:10 => [C case h:9^99 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} (map:6^104 t:10^105)]
//│ 	| N => [N]})
//│ <<<<<<< after fusion <<<<<<<


fun sum(ls) = if ls is
    C(h, t) then S(N, sum(t))
    N then N
fun mapa(lsa) = if lsa is
    C(ha, ta) then C(primitive(ha), mapa(ta))
    N then N
fun mapb(lsb) = if lsb is
    C(hb, tb) then C(primitive(hb), mapb(tb))
    N then N
sum(mapa(mapb(primitive)))
//│ |#fun| |sum|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |S|(|N|,| |sum|(|t|)|)|↵|N| |#then| |N|←|↵|#fun| |mapa|(|lsa|)| |#=| |#if| |lsa| |is|→|C|(|ha|,| |ta|)| |#then| |C|(|primitive|(|ha|)|,| |mapa|(|ta|)|)|↵|N| |#then| |N|←|↵|#fun| |mapb|(|lsb|)| |#=| |#if| |lsb| |is|→|C|(|hb|,| |tb|)| |#then| |C|(|primitive|(|hb|)|,| |mapb|(|tb|)|)|↵|N| |#then| |N|←|↵|sum|(|mapa|(|mapb|(|primitive|)|)|)|
//│ Parsed: {fun sum = ls, => if ls is ‹(C (h, t,)) then S (N, sum (t,),); (N) then N›; fun mapa = lsa, => if lsa is ‹(C (ha, ta,)) then C (primitive (ha,), mapa (ta,),); (N) then N›; fun mapb = lsb, => if lsb is ‹(C (hb, tb,)) then C (primitive (hb,), mapb (tb,),); (N) then N›; sum (mapa (mapb (primitive,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (sum:6^32 (mapa:7^33 (mapb:8^34 primitive:3^35)))
//│ def mapa:7 = (fun lsa:12 -> case lsa:12^10 of {
//│ 	C ha:13 ta:14 => [C (primitive:3^11 ha:13^12) (mapa:7^14 ta:14^15)]
//│ 	| N => [N]})
//│ def mapb:8 = (fun lsb:15 -> case lsb:15^21 of {
//│ 	C hb:16 tb:17 => [C (primitive:3^22 hb:16^23) (mapb:8^25 tb:17^26)]
//│ 	| N => [N]})
//│ def sum:6 = (fun ls:9 -> case ls:9^1 of {
//│ 	C h:10 t:11 => [S [N] (sum:6^3 t:11^4)]
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(11'13_callres, 12'16_callres) <: 3'ls
//│ 	[-mapa:7^14 · -mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3 · +sum:6^3]  --->  [-mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3]
//│ C(17'24_callres, 18'27_callres) <: 8'lsa
//│ 	[-mapb:8^25 · -mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14 · +mapa:7^14]  --->  [-mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14]
//│ NoProd <: 14'lsb
//│ 	[+mapb:8^34 · +mapb:8^25 · +mapb:8^25]  --->  [+mapb:8^34 · +mapb:8^25]
//│ NoProd <: 8'lsa
//│ 	[-mapb:8^34 · +mapa:7^33 · +mapa:7^14 · +mapa:7^14]  --->  [-mapb:8^34 · +mapa:7^33 · +mapa:7^14]
//│ NoProd <: 3'ls
//│ 	[-mapa:7^33 · +sum:6^32 · +sum:6^3 · +sum:6^3]  --->  [-mapa:7^33 · +sum:6^32 · +sum:6^3]
//│ NoProd <: 10'ta
//│ 	[-mapb:8^25 · -mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14 · +mapa:7^14 · +mapa:7^14]  --->  [-mapb:8^25 · -mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14 · +mapa:7^14]
//│ 	[-mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14 · +mapa:7^14]  --->  [-mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14]
//│ NoProd <: 5't
//│ 	[-mapa:7^14 · -mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3 · +sum:6^3 · +sum:6^3]  --->  [-mapa:7^14 · -mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3 · +sum:6^3]
//│ 	[-mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3 · +sum:6^3]  --->  [-mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [mapa:7^33 · mapa:7^14 · mapa:7^14 · mapa:7^14] --> [mapa:7^33 · mapa:7^14 · mapa:7^14]
//│ [mapa:7^33 · mapa:7^14 · mapa:7^14] --> [mapa:7^33 · mapa:7^14]
//│ 	[mapa:7^33 · mapa:7^14 · mapa:7^14]
//│ 	!!MORE THAN ONE MATCH
//│ [sum:6^32 · sum:6^3 · sum:6^3 · sum:6^3] --> [sum:6^32 · sum:6^3 · sum:6^3]
//│ [sum:6^32 · sum:6^3 · sum:6^3] --> [sum:6^32 · sum:6^3]
//│ [mapa:7^33 · mapa:7^14] --> [mapa:7^33 · mapa:7^14]
//│ [mapa:7^33] --> [mapa:7^33]
//│ [mapb:8^34 · mapb:8^25 · mapb:8^25] --> [mapb:8^34 · mapb:8^25 · mapb:8^25]
//│ 	[mapb:8^34 · mapb:8^25]
//│ 	!!MORE THAN ONE MATCH
//│ [mapb:8^34 · mapb:8^25] --> [mapb:8^34 · mapb:8^25]
//│ [mapb:8^34] --> [mapb:8^34]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [mapa:7^33]
//│ 	[mapa:7^33 · mapa:7^14]
//│ 		[mapa:7^33 · mapa:7^14 · mapa:7^14] ---> [mapa:7^33 · mapa:7^14] (only one)
//│ [mapb:8^34]
//│ 	[mapb:8^34 · mapb:8^25]
//│ 		[mapb:8^34 · mapb:8^25 · mapb:8^25] ---> [mapb:8^34 · mapb:8^25] (only one)
//│ [sum:6^32]
//│ 	[sum:6^32 · sum:6^3]
//│ 		[sum:6^32 · sum:6^3 · sum:6^3] ---> [sum:6^32 · sum:6^3] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([sum:6^32]:20^101 ([mapa:7^33]:18^102 ([mapb:8^34]:22^103 primitive:3^104)))
//│ def [mapa:7^33 · mapa:7^14]:19 = (fun lsa:24 -> case lsa:24^39 of {
//│ 	C ha:25 ta:26 => [C (primitive:3^40 ha:25^41) ([mapa:7^33 · mapa:7^14]:19^43 ta:26^44)]
//│ 	| N => [N]})
//│ def [mapa:7^33]:18 = (fun lsa:36 -> case lsa:36^81 of {
//│ 	C ha:37 ta:38 => [C (primitive:3^82 ha:37^83) ([mapa:7^33 · mapa:7^14]:19^85 ta:38^86)]
//│ 	| N => [N]})
//│ def [mapb:8^34 · mapb:8^25]:23 = (fun lsb:33 -> case lsb:33^70 of {
//│ 	C hb:34 tb:35 => [C (primitive:3^71 hb:34^72) ([mapb:8^34 · mapb:8^25]:23^74 tb:35^75)]
//│ 	| N => [N]})
//│ def [mapb:8^34]:22 = (fun lsb:27 -> case lsb:27^50 of {
//│ 	C hb:28 tb:29 => [C (primitive:3^51 hb:28^52) ([mapb:8^34 · mapb:8^25]:23^54 tb:29^55)]
//│ 	| N => [N]})
//│ def [sum:6^32 · sum:6^3]:21 = (fun ls:30 -> case ls:30^61 of {
//│ 	C h:31 t:32 => [S [N] ([sum:6^32 · sum:6^3]:21^63 t:32^64)]
//│ 	| N => [N]})
//│ def [sum:6^32]:20 = (fun ls:39 -> case ls:39^92 of {
//│ 	C h:40 t:41 => [S [N] ([sum:6^32 · sum:6^3]:21^94 t:41^95)]
//│ 	| N => [N]})
//│ def mapa:7 = (fun lsa:12 -> case lsa:12^17 of {
//│ 	C ha:13 ta:14 => [C (primitive:3^18 ha:13^19) (mapa:7^21 ta:14^22)]
//│ 	| N => [N]})
//│ def mapb:8 = (fun lsb:15 -> case lsb:15^28 of {
//│ 	C hb:16 tb:17 => [C (primitive:3^29 hb:16^30) (mapb:8^32 tb:17^33)]
//│ 	| N => [N]})
//│ def sum:6 = (fun ls:9 -> case ls:9^8 of {
//│ 	C h:10 t:11 => [S [N] (sum:6^10 t:11^11)]
//│ 	| N => [N]})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 46: [C 42: (40: primitive:3^40 41: ha:25^41) 45: (43: [mapa:7^33 · mapa:7^14]:19^43 44: ta:26^44)]
//│ [C (primitive:3^40 ha:25^41) ([mapa:7^33 · mapa:7^14]:19^43 ta:26^44)] --->
//│ 	case ls:30^61 of {C h:31 t:32 => [S [N] ([sum:6^32 · sum:6^3]:21^63 t:32^64)] | N => [N]}
//│ 47: [N]
//│ [N] --->
//│ 	case ls:30^61 of {C h:31 t:32 => [S [N] ([sum:6^32 · sum:6^3]:21^63 t:32^64)] | N => [N]}
//│ 57: [C 53: (51: primitive:3^51 52: hb:28^52) 56: (54: [mapb:8^34 · mapb:8^25]:23^54 55: tb:29^55)]
//│ [C (primitive:3^51 hb:28^52) ([mapb:8^34 · mapb:8^25]:23^54 tb:29^55)] --->
//│ 	case lsa:36^81 of {C ha:37 ta:38 => [C (primitive:3^82 ha:37^83) ([mapa:7^33 · mapa:7^14]:19^85 ta:38^86)] | N => [N]}
//│ 58: [N]
//│ [N] --->
//│ 	case lsa:36^81 of {C ha:37 ta:38 => [C (primitive:3^82 ha:37^83) ([mapa:7^33 · mapa:7^14]:19^85 ta:38^86)] | N => [N]}
//│ 77: [C 73: (71: primitive:3^71 72: hb:34^72) 76: (74: [mapb:8^34 · mapb:8^25]:23^74 75: tb:35^75)]
//│ [C (primitive:3^71 hb:34^72) ([mapb:8^34 · mapb:8^25]:23^74 tb:35^75)] --->
//│ 	case lsa:24^39 of {C ha:25 ta:26 => [C (primitive:3^40 ha:25^41) ([mapa:7^33 · mapa:7^14]:19^43 ta:26^44)] | N => [N]}
//│ 78: [N]
//│ [N] --->
//│ 	case lsa:24^39 of {C ha:25 ta:26 => [C (primitive:3^40 ha:25^41) ([mapa:7^33 · mapa:7^14]:19^43 ta:26^44)] | N => [N]}
//│ 88: [C 84: (82: primitive:3^82 83: ha:37^83) 87: (85: [mapa:7^33 · mapa:7^14]:19^85 86: ta:38^86)]
//│ [C (primitive:3^82 ha:37^83) ([mapa:7^33 · mapa:7^14]:19^85 ta:38^86)] --->
//│ 	case ls:39^92 of {C h:40 t:41 => [S [N] ([sum:6^32 · sum:6^3]:21^94 t:41^95)] | N => [N]}
//│ 89: [N]
//│ [N] --->
//│ 	case ls:39^92 of {C h:40 t:41 => [S [N] ([sum:6^32 · sum:6^3]:21^94 t:41^95)] | N => [N]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([sum:6^32]:20^108 ([mapa:7^33]:18^109 ([mapb:8^34]:22^110 primitive:3^111)))
//│ def [mapa:7^33 · mapa:7^14]:19 = (fun lsa:24 -> lsa:24^117)
//│ def [mapa:7^33]:18 = (fun lsa:36 -> lsa:36^189)
//│ def [mapb:8^34 · mapb:8^25]:23 = (fun lsb:33 -> case lsb:33^144 of {
//│ 	C hb:34 tb:35 => let ha:25 = (primitive:3^162 hb:34^163)
//│ 	in let ta:26 = ([mapb:8^34 · mapb:8^25]:23^158 tb:35^159)
//│ 	in let h:31 = (primitive:3^154 ha:25^155)
//│ 	in let t:32 = ([mapa:7^33 · mapa:7^14]:19^150 ta:26^151)
//│ 	in [S [N] ([sum:6^32 · sum:6^3]:21^146 t:32^147)]
//│ 	| N => [N]})
//│ def [mapb:8^34]:22 = (fun lsb:27 -> case lsb:27^119 of {
//│ 	C hb:28 tb:29 => let ha:37 = (primitive:3^137 hb:28^138)
//│ 	in let ta:38 = ([mapb:8^34 · mapb:8^25]:23^133 tb:29^134)
//│ 	in let h:40 = (primitive:3^129 ha:37^130)
//│ 	in let t:41 = ([mapa:7^33 · mapa:7^14]:19^125 ta:38^126)
//│ 	in [S [N] ([sum:6^32 · sum:6^3]:21^121 t:41^122)]
//│ 	| N => [N]})
//│ def [sum:6^32 · sum:6^3]:21 = (fun ls:30 -> ls:30^202)
//│ def [sum:6^32]:20 = (fun ls:39 -> ls:39^115)
//│ def mapa:7 = (fun lsa:12 -> case lsa:12^169 of {
//│ 	C ha:13 ta:14 => [C (primitive:3^170 ha:13^171) (mapa:7^173 ta:14^174)]
//│ 	| N => [N]})
//│ def mapb:8 = (fun lsb:15 -> case lsb:15^191 of {
//│ 	C hb:16 tb:17 => [C (primitive:3^192 hb:16^193) (mapb:8^195 tb:17^196)]
//│ 	| N => [N]})
//│ def sum:6 = (fun ls:9 -> case ls:9^180 of {
//│ 	C h:10 t:11 => [S [N] (sum:6^182 t:11^183)]
//│ 	| N => [N]})
//│ <<<<<<< after fusion <<<<<<<



let rec p = C(p)
fun c(x) = if x is
    C(a) then c(a)
fun main(cc) = cc(p)
main(c)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |main|(|cc|)| |#=| |cc|(|p|)|↵|main|(|c|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then c (a,)›; fun main = cc, => cc (p,); main (c,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (main:8^13 c:7^14)
//│ def c:7 = (fun x:9 -> case x:9^3 of {
//│ 	C a:10 => (c:7^4 a:10^5)})
//│ def main:8 = (fun cc:11 -> (cc:11^9 p:6^10))
//│ def p:6 = [C p:6^1]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(0'p_6^1) <: 3'x
//│ 	[-p:6^1 · -p:6^10 · -main:8^13 · +c:7^14 · +c:7^4]  --->  [-p:6^10 · -main:8^13 · +c:7^14]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [c:7^14 · c:7^4] --> [c:7^14]
//│ [main:8^13 · p:6^10 · p:6^1] --> [main:8^13 · p:6^10]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:7^14]
//│ 	[c:7^14 · c:7^4] ---> [c:7^14] (only one)
//│ [main:8^13]
//│ 	[main:8^13 · p:6^10]
//│ 		[main:8^13 · p:6^10 · p:6^1] ---> [main:8^13 · p:6^10] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([main:8^13]:12^28 [c:7^14]:14^29)
//│ def [c:7^14]:14 = (fun x:15 -> case x:15^18 of {
//│ 	C a:16 => ([c:7^14]:14^19 a:16^20)})
//│ def [main:8^13 · p:6^10]:13 = [C [main:8^13 · p:6^10]:13^16]
//│ def [main:8^13]:12 = (fun cc:17 -> (cc:17^24 [main:8^13 · p:6^10]:13^25))
//│ def c:7 = (fun x:9 -> case x:9^6 of {
//│ 	C a:10 => (c:7^7 a:10^8)})
//│ def main:8 = (fun cc:11 -> (cc:11^12 p:6^13))
//│ def p:6 = [C p:6^4]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 17: [C 16: [main:8^13 · p:6^10]:13^16]
//│ [C [main:8^13 · p:6^10]:13^16] --->
//│ 	case x:15^18 of {C a:16 => ([c:7^14]:14^19 a:16^20)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([main:8^13]:12^31 [c:7^14]:14^32)
//│ def [c:7^14]:14 = (fun x:15 -> x:15^47)
//│ def [main:8^13 · p:6^10]:13 = let a:16 = [main:8^13 · p:6^10]:13^41
//│ in ([c:7^14]:14^38 a:16^39)
//│ def [main:8^13]:12 = (fun cc:17 -> (cc:17^34 [main:8^13 · p:6^10]:13^35))
//│ def c:7 = (fun x:9 -> case x:9^51 of {
//│ 	C a:10 => (c:7^52 a:10^53)})
//│ def main:8 = (fun cc:11 -> (cc:11^43 p:6^44))
//│ def p:6 = [C p:6^49]
//│ <<<<<<< after fusion <<<<<<<


// this path seems also to be sensible
let rec p = C(p)
fun c(x) = if x is
    C(a) then c(a)
fun main(pp) = if pp is
    C(b) then if b is
        C(d) then c(d)
main(p)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |main|(|pp|)| |#=| |#if| |pp| |is|→|C|(|b|)| |#then| |#if| |b| |is|→|C|(|d|)| |#then| |c|(|d|)|←|←|↵|main|(|p|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then c (a,)›; fun main = pp, => if pp is ‹(C (b,)) then if b is ‹(C (d,)) then c (d,)››; main (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (main:8^17 p:6^18)
//│ def c:7 = (fun x:9 -> case x:9^3 of {
//│ 	C a:10 => (c:7^4 a:10^5)})
//│ def main:8 = (fun pp:11 -> case pp:11^9 of {
//│ 	C b:12 => case b:12^10 of {
//│ 		C d:13 => (c:7^11 d:13^12)}})
//│ def p:6 = [C p:6^1]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(0'p_6^1) <: 3'x
//│ 	[-p:6^1 · -p:6^1 · -p:6^1 · -p:6^18 · +main:8^17 · +c:7^11 · +c:7^4]  --->  [-p:6^1 · -p:6^1 · -p:6^18 · +main:8^17 · +c:7^11]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [main:8^17 · c:7^11 · c:7^4] --> [main:8^17 · c:7^11]
//│ [p:6^18 · p:6^1 · p:6^1 · p:6^1] --> [p:6^18 · p:6^1 · p:6^1]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [main:8^17]
//│ 	[main:8^17 · c:7^11]
//│ 		[main:8^17 · c:7^11 · c:7^4] ---> [main:8^17 · c:7^11] (only one)
//│ [p:6^18]
//│ 	[p:6^18 · p:6^1]
//│ 		[p:6^18 · p:6^1 · p:6^1]
//│ 			[p:6^18 · p:6^1 · p:6^1 · p:6^1] ---> [p:6^18 · p:6^1 · p:6^1] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([main:8^17]:17^40 [p:6^18]:14^41)
//│ def [main:8^17 · c:7^11]:18 = (fun x:22 -> case x:22^34 of {
//│ 	C a:23 => ([main:8^17 · c:7^11]:18^35 a:23^36)})
//│ def [main:8^17]:17 = (fun pp:19 -> case pp:19^24 of {
//│ 	C b:20 => case b:20^25 of {
//│ 		C d:21 => ([main:8^17 · c:7^11]:18^26 d:21^27)}})
//│ def [p:6^18 · p:6^1 · p:6^1]:16 = [C [p:6^18 · p:6^1 · p:6^1]:16^32]
//│ def [p:6^18 · p:6^1]:15 = [C [p:6^18 · p:6^1 · p:6^1]:16^20]
//│ def [p:6^18]:14 = [C [p:6^18 · p:6^1]:15^22]
//│ def c:7 = (fun x:9 -> case x:9^6 of {
//│ 	C a:10 => (c:7^7 a:10^8)})
//│ def main:8 = (fun pp:11 -> case pp:11^12 of {
//│ 	C b:12 => case b:12^13 of {
//│ 		C d:13 => (c:7^14 d:13^15)}})
//│ def p:6 = [C p:6^4]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 21: [C 20: [p:6^18 · p:6^1 · p:6^1]:16^20]
//│ [C [p:6^18 · p:6^1 · p:6^1]:16^20] --->
//│ 	case b:20^25 of {C d:21 => ([main:8^17 · c:7^11]:18^26 d:21^27)}
//│ 23: [C 22: [p:6^18 · p:6^1]:15^22]
//│ [C [p:6^18 · p:6^1]:15^22] --->
//│ 	case pp:19^24 of {C b:20 => case b:20^25 of {C d:21 => ([main:8^17 · c:7^11]:18^26 d:21^27)}}
//│ 33: [C 32: [p:6^18 · p:6^1 · p:6^1]:16^32]
//│ [C [p:6^18 · p:6^1 · p:6^1]:16^32] --->
//│ 	case x:22^34 of {C a:23 => ([main:8^17 · c:7^11]:18^35 a:23^36)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([main:8^17]:17^43 [p:6^18]:14^44)
//│ def [main:8^17 · c:7^11]:18 = (fun x:22 -> x:22^48)
//│ def [main:8^17]:17 = (fun pp:19 -> pp:19^46)
//│ def [p:6^18 · p:6^1 · p:6^1]:16 = let a:23 = [p:6^18 · p:6^1 · p:6^1]:16^53
//│ in ([main:8^17 · c:7^11]:18^50 a:23^51)
//│ def [p:6^18 · p:6^1]:15 = let d:21 = [p:6^18 · p:6^1 · p:6^1]:16^69
//│ in ([main:8^17 · c:7^11]:18^66 d:21^67)
//│ def [p:6^18]:14 = let b:20 = [p:6^18 · p:6^1]:15^56
//│ in b:20^55
//│ def c:7 = (fun x:9 -> case x:9^73 of {
//│ 	C a:10 => (c:7^74 a:10^75)})
//│ def main:8 = (fun pp:11 -> case pp:11^58 of {
//│ 	C b:12 => case b:12^59 of {
//│ 		C d:13 => (c:7^60 d:13^61)}})
//│ def p:6 = [C p:6^71]
//│ <<<<<<< after fusion <<<<<<<


let rec p = C(p)
let c(x) = if x is
    C(a) then c(a)
fun main(cc, pp) = cc(pp)
main(c, p)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#let| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |main|(|cc|,| |pp|)| |#=| |cc|(|pp|)|↵|main|(|c|,| |p|)|
//│ Parsed: {let rec p = C (p,); let c = x, => if x is ‹(C (a,)) then c (a,)›; fun main = cc, pp, => cc (pp,); main (c, p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((main:8^14 c:7^15) p:6^17)
//│ def c:7 = (fun x:9 -> case x:9^3 of {
//│ 	C a:10 => (c:7^4 a:10^5)})
//│ def main:8 = (fun cc:11 -> (fun pp:12 -> (cc:11^9 pp:12^10)))
//│ def p:6 = [C p:6^1]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(0'p_6^1) <: 3'x
//│ 	[-p:6^1 · -p:6^17 · +main:8^14 · -main:8^14 · +c:7^15 · +c:7^4]  --->  [-p:6^17 · +main:8^14 · -main:8^14 · +c:7^15]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [c:7^15 · c:7^4] --> [c:7^15]
//│ [p:6^17 · p:6^1] --> [p:6^17]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:7^15]
//│ 	[c:7^15 · c:7^4] ---> [c:7^15] (only one)
//│ [main:8^14] ---> [main:8^14] (hopeless to continue)
//│ [p:6^17]
//│ 	[p:6^17 · p:6^1] ---> [p:6^17] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ((main:8^27 [c:7^15]:14^28) [p:6^17]:13^30)
//│ def [c:7^15]:14 = (fun x:15 -> case x:15^19 of {
//│ 	C a:16 => ([c:7^15]:14^20 a:16^21)})
//│ def [p:6^17]:13 = [C [p:6^17]:13^25]
//│ def c:7 = (fun x:9 -> case x:9^8 of {
//│ 	C a:10 => (c:7^9 a:10^10)})
//│ def main:8 = (fun cc:11 -> (fun pp:12 -> (cc:11^14 pp:12^15)))
//│ def p:6 = [C p:6^6]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 26: [C 25: [p:6^17]:13^25]
//│ [C [p:6^17]:13^25] --->
//│ 	case x:15^19 of {C a:16 => ([c:7^15]:14^20 a:16^21)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((main:8^32 [c:7^15]:14^33) [p:6^17]:13^35)
//│ def [c:7^15]:14 = (fun x:15 -> x:15^47)
//│ def [p:6^17]:13 = let a:16 = [p:6^17]:13^45
//│ in ([c:7^15]:14^42 a:16^43)
//│ def c:7 = (fun x:9 -> case x:9^51 of {
//│ 	C a:10 => (c:7^52 a:10^53)})
//│ def main:8 = (fun cc:11 -> (fun pp:12 -> (cc:11^37 pp:12^38)))
//│ def p:6 = [C p:6^49]
//│ <<<<<<< after fusion <<<<<<<


fun cons(y) = if y is
    C(aa) then cons(aa)
fun a(x) = b(x)
fun b(x) = c(x)
fun c(x) = d(cons, x)
fun d(cc, x) = cc(x)
let p = C(p)
a(p)
//│ |#fun| |cons|(|y|)| |#=| |#if| |y| |is|→|C|(|aa|)| |#then| |cons|(|aa|)|←|↵|#fun| |a|(|x|)| |#=| |b|(|x|)|↵|#fun| |b|(|x|)| |#=| |c|(|x|)|↵|#fun| |c|(|x|)| |#=| |d|(|cons|,| |x|)|↵|#fun| |d|(|cc|,| |x|)| |#=| |cc|(|x|)|↵|#let| |p| |#=| |C|(|p|)|↵|a|(|p|)|
//│ Parsed: {fun cons = y, => if y is ‹(C (aa,)) then cons (aa,)›; fun a = x, => b (x,); fun b = x, => c (x,); fun c = x, => d (cons, x,); fun d = cc, x, => cc (x,); let p = C (p,); a (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (a:7^28 p:11^29)
//│ def a:7 = (fun x:14 -> (b:8^7 x:14^8))
//│ def b:8 = (fun x:15 -> (c:9^11 x:15^12))
//│ def c:9 = (fun x:16 -> ((d:10^15 cons:6^16) x:16^18))
//│ def cons:6 = (fun y:12 -> case y:12^1 of {
//│ 	C aa:13 => (cons:6^2 aa:13^3)})
//│ def d:10 = (fun cc:17 -> (fun x:18 -> (cc:17^21 x:18^22)))
//│ def p:11 = [C p:11^26]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(5'p_11^26) <: 6'y
//│ 	[-p:11^26 · -p:11^26 · -p:11^29 · +a:7^28 · +b:8^7 · +c:9^11 · +d:10^15 · -d:10^15 · +cons:6^16 · +cons:6^2 · +cons:6^2]  --->  [-p:11^26 · -p:11^29 · +a:7^28 · +b:8^7 · +c:9^11 · +d:10^15 · -d:10^15 · +cons:6^16 · +cons:6^2]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [a:7^28 · b:8^7 · c:9^11 · cons:6^16 · cons:6^2 · cons:6^2] --> [a:7^28 · b:8^7 · c:9^11 · cons:6^16 · cons:6^2]
//│ [p:11^29 · p:11^26 · p:11^26] --> [p:11^29 · p:11^26]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [a:7^28]
//│ 	[a:7^28 · b:8^7]
//│ 		[a:7^28 · b:8^7 · c:9^11]
//│ 			[a:7^28 · b:8^7 · c:9^11 · cons:6^16]
//│ 				[a:7^28 · b:8^7 · c:9^11 · cons:6^16 · cons:6^2]
//│ 					[a:7^28 · b:8^7 · c:9^11 · cons:6^16 · cons:6^2 · cons:6^2] ---> [a:7^28 · b:8^7 · c:9^11 · cons:6^16 · cons:6^2] (only one)
//│ 			[a:7^28 · b:8^7 · c:9^11 · d:10^15] ---> [d:10^15] (hopeless to continue)
//│ [p:11^29]
//│ 	[p:11^29 · p:11^26]
//│ 		[p:11^29 · p:11^26 · p:11^26] ---> [p:11^29 · p:11^26] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([a:7^28]:19^61 [p:11^29]:24^62)
//│ def [a:7^28 · b:8^7 · c:9^11 · cons:6^16 · cons:6^2]:23 = (fun y:28 -> case y:28^41 of {
//│ 	C aa:29 => ([a:7^28 · b:8^7 · c:9^11 · cons:6^16 · cons:6^2]:23^42 aa:29^43)})
//│ def [a:7^28 · b:8^7 · c:9^11 · cons:6^16]:22 = (fun y:30 -> case y:30^47 of {
//│ 	C aa:31 => ([a:7^28 · b:8^7 · c:9^11 · cons:6^16 · cons:6^2]:23^48 aa:31^49)})
//│ def [a:7^28 · b:8^7 · c:9^11]:21 = (fun x:26 -> ((d:10^31 [a:7^28 · b:8^7 · c:9^11 · cons:6^16]:22^32) x:26^34))
//│ def [a:7^28 · b:8^7]:20 = (fun x:27 -> ([a:7^28 · b:8^7 · c:9^11]:21^37 x:27^38))
//│ def [a:7^28]:19 = (fun x:32 -> ([a:7^28 · b:8^7]:20^57 x:32^58))
//│ def [p:11^29 · p:11^26]:25 = [C [p:11^29 · p:11^26]:25^55]
//│ def [p:11^29]:24 = [C [p:11^29 · p:11^26]:25^53]
//│ def a:6 = (fun x:12 -> (b:8^4 x:12^5))
//│ def b:8 = (fun x:15 -> (c:9^14 x:15^15))
//│ def c:9 = (fun x:16 -> ((d:10^18 cons:7^19) x:16^21))
//│ def cons:7 = (fun y:13 -> case y:13^8 of {
//│ 	C aa:14 => (cons:7^9 aa:14^10)})
//│ def d:10 = (fun cc:17 -> (fun x:18 -> (cc:17^24 x:18^25)))
//│ def p:11 = [C p:11^29]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 54: [C 53: [p:11^29 · p:11^26]:25^53]
//│ [C [p:11^29 · p:11^26]:25^53] --->
//│ 	case y:13^8 of {C aa:14 => (cons:7^9 aa:14^10)}
//│ 	case y:30^47 of {C aa:31 => ([a:7^28 · b:8^7 · c:9^11 · cons:6^16 · cons:6^2]:23^48 aa:31^49)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 56: [C 55: [p:11^29 · p:11^26]:25^55]
//│ [C [p:11^29 · p:11^26]:25^55] --->
//│ 	case y:28^41 of {C aa:29 => ([a:7^28 · b:8^7 · c:9^11 · cons:6^16 · cons:6^2]:23^42 aa:29^43)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([a:7^28]:19^64 [p:11^29]:24^65)
//│ def [a:7^28 · b:8^7 · c:9^11 · cons:6^16 · cons:6^2]:23 = (fun y:28 -> y:28^118)
//│ def [a:7^28 · b:8^7 · c:9^11 · cons:6^16]:22 = (fun y:30 -> case y:30^99 of {
//│ 	C aa:31 => ([a:7^28 · b:8^7 · c:9^11 · cons:6^16 · cons:6^2]:23^100 aa:31^101)})
//│ def [a:7^28 · b:8^7 · c:9^11]:21 = (fun x:26 -> ((d:10^67 [a:7^28 · b:8^7 · c:9^11 · cons:6^16]:22^68) x:26^70))
//│ def [a:7^28 · b:8^7]:20 = (fun x:27 -> ([a:7^28 · b:8^7 · c:9^11]:21^82 x:27^83))
//│ def [a:7^28]:19 = (fun x:32 -> ([a:7^28 · b:8^7]:20^78 x:32^79))
//│ def [p:11^29 · p:11^26]:25 = let aa:29 = [p:11^29 · p:11^26]:25^93
//│ in ([a:7^28 · b:8^7 · c:9^11 · cons:6^16 · cons:6^2]:23^90 aa:29^91)
//│ def [p:11^29]:24 = let aa:14 = [p:11^29 · p:11^26]:25^76
//│ in (cons:7^73 aa:14^74)
//│ def a:6 = (fun x:12 -> (b:8^95 x:12^96))
//│ def b:8 = (fun x:15 -> (c:9^86 x:15^87))
//│ def c:9 = (fun x:16 -> ((d:10^105 cons:7^106) x:16^108))
//│ def cons:7 = (fun y:13 -> y:13^120)
//│ def d:10 = (fun cc:17 -> (fun x:18 -> (cc:17^111 x:18^112)))
//│ def p:11 = [C p:11^116]
//│ <<<<<<< after fusion <<<<<<<


let p = C(N)
fun c(x) = if C(x) is
    C(a) then c(a)
c(p)
//│ |#let| |p| |#=| |C|(|N|)|↵|#fun| |c|(|x|)| |#=| |#if| |C|(|x|)| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|c|(|p|)|
//│ Parsed: {let p = C (N,); fun c = x, => if C (x,) is ‹(C (a,)) then c (a,)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:7^10 p:6^11)
//│ def c:7 = (fun x:8 -> case [C x:8^3] of {
//│ 	C a:9 => (c:7^5 a:9^6)})
//│ def p:6 = [C [N]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:7^10] ---> [c:7^10] (hopeless to continue)
//│ [p:6^11] ---> [p:6^11] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (c:7^13 p:6^14)
//│ def c:7 = (fun x:8 -> case [C x:8^6] of {
//│ 	C a:9 => (c:7^8 a:9^9)})
//│ def p:6 = [C [N]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 7: [C 6: x:8^6]
//│ [C x:8^6] --->
//│ 	case [C x:8^6] of {C a:9 => (c:7^8 a:9^9)}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c:7^16 p:6^17)
//│ def c:7 = (fun x:8 -> let a:9 = x:8^24
//│ in (c:7^21 a:9^22))
//│ def p:6 = [C [N]]
//│ <<<<<<< after fusion <<<<<<<


// let rec p = C(p)
// let q = p
// fun c(x) = if x is
//     C(a) then a
// fun c2(z) = if z is
//     C(b) then c2(b)
// let main = c(q)
// c2(main)


let rec p = C(p)
fun c(x) = if x is
    C(a) then a
fun c1(xx) = if xx is
    C(aa) then aa
fun c2(z) = if z is
    C(b) then c2(b)
let main = c(p)
fun id(y) = c1(C(y))
c2(id(main))
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |a|←|↵|#fun| |c1|(|xx|)| |#=| |#if| |xx| |is|→|C|(|aa|)| |#then| |aa|←|↵|#fun| |c2|(|z|)| |#=| |#if| |z| |is|→|C|(|b|)| |#then| |c2|(|b|)|←|↵|#let| |main| |#=| |c|(|p|)|↵|#fun| |id|(|y|)| |#=| |c1|(|C|(|y|)|)|↵|c2|(|id|(|main|)|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then a›; fun c1 = xx, => if xx is ‹(C (aa,)) then aa›; fun c2 = z, => if z is ‹(C (b,)) then c2 (b,)›; let main = c (p,); fun id = y, => c1 (C (y,),); c2 (id (main,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c2:9^25 (id:11^26 main:10^27))
//│ def c:7 = (fun x:12 -> case x:12^3 of {
//│ 	C a:13 => a:13^4})
//│ def c1:8 = (fun xx:14 -> case xx:14^7 of {
//│ 	C aa:15 => aa:15^8})
//│ def c2:9 = (fun z:16 -> case z:16^11 of {
//│ 	C b:17 => (c2:9^12 b:17^13)})
//│ def id:11 = (fun y:18 -> (c1:8^20 [C y:18^21]))
//│ def main:10 = (c:7^17 p:6^18)
//│ def p:6 = [C p:6^1]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(0'p_6^1) <: 12'z
//│ 	[-p:6^1 · -p:6^1 · -p:6^18 · +c:7^17 · -c:7^17 · -main:10^27 · +id:11^26 · +c1:8^20 · -c1:8^20 · -id:11^26 · +c2:9^25 · +c2:9^12]  --->  [-p:6^1 · -p:6^18 · +c:7^17 · -c:7^17 · -main:10^27 · +id:11^26 · +c1:8^20 · -c1:8^20 · -id:11^26 · +c2:9^25]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [c2:9^25 · c2:9^12] --> [c2:9^25]
//│ [main:10^27 · p:6^18 · p:6^1 · p:6^1] --> [main:10^27 · p:6^18 · p:6^1]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c2:9^25]
//│ 	[c2:9^25 · c2:9^12] ---> [c2:9^25] (only one)
//│ [id:11^26] ---> [id:11^26] (hopeless to continue)
//│ [main:10^27]
//│ 	[main:10^27 · c:7^17] ---> [c:7^17] (hopeless to continue)
//│ 	[main:10^27 · p:6^18]
//│ 		[main:10^27 · p:6^18 · p:6^1]
//│ 			[main:10^27 · p:6^18 · p:6^1 · p:6^1] ---> [main:10^27 · p:6^18 · p:6^1] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([c2:9^25]:19^43 (id:6^44 [main:10^27]:20^45))
//│ def [c2:9^25]:19 = (fun z:23 -> case z:23^30 of {
//│ 	C b:24 => ([c2:9^25]:19^31 b:24^32)})
//│ def [main:10^27 · p:6^18 · p:6^1]:22 = [C [main:10^27 · p:6^18 · p:6^1]:22^41]
//│ def [main:10^27 · p:6^18]:21 = [C [main:10^27 · p:6^18 · p:6^1]:22^36]
//│ def [main:10^27]:20 = (c:11^38 [main:10^27 · p:6^18]:21^39)
//│ def c:11 = (fun x:17 -> case x:17^26 of {
//│ 	C a:18 => a:18^27})
//│ def c1:7 = (fun xx:13 -> case xx:13^11 of {
//│ 	C aa:14 => aa:14^12})
//│ def c2:9 = (fun z:15 -> case z:15^18 of {
//│ 	C b:16 => (c2:9^19 b:16^20)})
//│ def id:6 = (fun y:12 -> (c1:7^6 [C y:12^7]))
//│ def main:8 = (c:11^15 p:10^16)
//│ def p:10 = [C p:10^24]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 25: [C 24: p:10^24]
//│ [C p:10^24] --->
//│ 	case x:17^26 of {C a:18 => a:18^27}
//│ 	case z:23^30 of {C b:24 => ([c2:9^25]:19^31 b:24^32)}
//│ 	 MORE THAN ONE MATCH EXPR
//│ 37: [C 36: [main:10^27 · p:6^18 · p:6^1]:22^36]
//│ [C [main:10^27 · p:6^18 · p:6^1]:22^36] --->
//│ 	case x:17^26 of {C a:18 => a:18^27}
//│ 42: [C 41: [main:10^27 · p:6^18 · p:6^1]:22^41]
//│ [C [main:10^27 · p:6^18 · p:6^1]:22^41] --->
//│ 	case z:23^30 of {C b:24 => ([c2:9^25]:19^31 b:24^32)}
//│ 8: [C 7: y:12^7]
//│ [C y:12^7] --->
//│ 	case xx:13^11 of {C aa:14 => aa:14^12}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([c2:9^25]:19^48 (id:6^49 [main:10^27]:20^50))
//│ def [c2:9^25]:19 = (fun z:23 -> z:23^59)
//│ def [main:10^27 · p:6^18 · p:6^1]:22 = let b:24 = [main:10^27 · p:6^18 · p:6^1]:22^64
//│ in ([c2:9^25]:19^61 b:24^62)
//│ def [main:10^27 · p:6^18]:21 = let a:18 = [main:10^27 · p:6^18 · p:6^1]:22^67
//│ in a:18^66
//│ def [main:10^27]:20 = (c:11^82 [main:10^27 · p:6^18]:21^83)
//│ def c:11 = (fun x:17 -> x:17^77)
//│ def c1:7 = (fun xx:13 -> xx:13^75)
//│ def c2:9 = (fun z:15 -> case z:15^69 of {
//│ 	C b:16 => (c2:9^70 b:16^71)})
//│ def id:6 = (fun y:12 -> (c1:7^53 let aa:14 = y:12^55
//│ in aa:14^54))
//│ def main:8 = (c:11^85 p:10^86)
//│ def p:10 = let a:18 = p:10^80
//│ in a:18^79
//│ <<<<<<< after fusion <<<<<<<


let t = T(K, T(N, L, L), T(N, L, L))
fun c(x) = if x is
    T(n, l, r) then T(
        (if n is
            K then KK
            N then NN
        ),
        c(l),
        c(r)
    )
    L then LL
c(t)
//│ |#let| |t| |#=| |T|(|K|,| |T|(|N|,| |L|,| |L|)|,| |T|(|N|,| |L|,| |L|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|T|(|n|,| |l|,| |r|)| |#then| |T|(|→|(|#if| |n| |is|→|K| |#then| |KK|↵|N| |#then| |NN|←|↵|)|,|↵|c|(|l|)|,|↵|c|(|r|)|←|↵|)|↵|L| |#then| |LL|←|↵|c|(|t|)|
//│ Parsed: {let t = T (K, T (N, L, L,), T (N, L, L,),); fun c = x, => if x is ‹(T (n, l, r,)) then T ('(' if n is ‹(K) then KK; (N) then NN›, ')', c (l,), c (r,),); (L) then LL›; c (t,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:7^26 t:6^27)
//│ def c:7 = (fun x:8 -> case x:8^11 of {
//│ 	T n:9 l:10 r:11 => [T case n:9^12 of {
//│ 		K => [KK]
//│ 		| N => [NN]} (c:7^16 l:10^17) (c:7^19 r:11^20)]
//│ 	| L => [LL]})
//│ def t:6 = [T [K] [T [N] [L] [L]] [T [N] [L] [L]]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 2'x
//│ 	[-t:6^27 · +c:7^26 · +c:7^16 · +c:7^16 · +c:7^16 · +c:7^19]  --->  [-t:6^27 · +c:7^26 · +c:7^16 · +c:7^16 · +c:7^16]
//│ 	[-t:6^27 · +c:7^26 · +c:7^16 · +c:7^16 · +c:7^19 · +c:7^16]  --->  [-t:6^27 · +c:7^26 · +c:7^16 · +c:7^16 · +c:7^19]
//│ 	[-t:6^27 · +c:7^26 · +c:7^16 · +c:7^19 · +c:7^16 · +c:7^19]  --->  [-t:6^27 · +c:7^26 · +c:7^16 · +c:7^19 · +c:7^16]
//│ 	[-t:6^27 · +c:7^26 · +c:7^16 · +c:7^19 · +c:7^19 · +c:7^16]  --->  [-t:6^27 · +c:7^26 · +c:7^16 · +c:7^19 · +c:7^19]
//│ 	[-t:6^27 · +c:7^26 · +c:7^19 · +c:7^16 · +c:7^16 · +c:7^19]  --->  [-t:6^27 · +c:7^26 · +c:7^19 · +c:7^16 · +c:7^16]
//│ 	[-t:6^27 · +c:7^26 · +c:7^19 · +c:7^16 · +c:7^19 · +c:7^16]  --->  [-t:6^27 · +c:7^26 · +c:7^19 · +c:7^16 · +c:7^19]
//│ 	[-t:6^27 · +c:7^26 · +c:7^19 · +c:7^19 · +c:7^16 · +c:7^19]  --->  [-t:6^27 · +c:7^26 · +c:7^19 · +c:7^19 · +c:7^16]
//│ 	[-t:6^27 · +c:7^26 · +c:7^19 · +c:7^19 · +c:7^19 · +c:7^16]  --->  [-t:6^27 · +c:7^26 · +c:7^19 · +c:7^19 · +c:7^19]
//│ NoProd <: 4'l
//│ 	[-t:6^27 · +c:7^26 · +c:7^16 · +c:7^16 · +c:7^16]  --->  [-t:6^27 · +c:7^26 · +c:7^16 · +c:7^16]
//│ 	[-t:6^27 · +c:7^26 · +c:7^16 · +c:7^19 · +c:7^16]  --->  [-t:6^27 · +c:7^26 · +c:7^16 · +c:7^19]
//│ 	[-t:6^27 · +c:7^26 · +c:7^19 · +c:7^16 · +c:7^16]  --->  [-t:6^27 · +c:7^26 · +c:7^19 · +c:7^16]
//│ 	[-t:6^27 · +c:7^26 · +c:7^19 · +c:7^19 · +c:7^16]  --->  [-t:6^27 · +c:7^26 · +c:7^19 · +c:7^19]
//│ NoProd <: 5'r
//│ 	[-t:6^27 · +c:7^26 · +c:7^16 · +c:7^16 · +c:7^19]  --->  [-t:6^27 · +c:7^26 · +c:7^16 · +c:7^16]
//│ 	[-t:6^27 · +c:7^26 · +c:7^16 · +c:7^19 · +c:7^19]  --->  [-t:6^27 · +c:7^26 · +c:7^16 · +c:7^19]
//│ 	[-t:6^27 · +c:7^26 · +c:7^19 · +c:7^16 · +c:7^19]  --->  [-t:6^27 · +c:7^26 · +c:7^19 · +c:7^16]
//│ 	[-t:6^27 · +c:7^26 · +c:7^19 · +c:7^19 · +c:7^19]  --->  [-t:6^27 · +c:7^26 · +c:7^19 · +c:7^19]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [c:7^26 · c:7^16 · c:7^16 · c:7^16 · c:7^19] --> [c:7^26 · c:7^16 · c:7^16 · c:7^16]
//│ [c:7^26 · c:7^16 · c:7^16 · c:7^16] --> [c:7^26 · c:7^16 · c:7^16]
//│ [c:7^26 · c:7^16 · c:7^16 · c:7^19 · c:7^16] --> [c:7^26 · c:7^16 · c:7^16 · c:7^19]
//│ [c:7^26 · c:7^16 · c:7^16 · c:7^19] --> [c:7^26 · c:7^16 · c:7^16]
//│ [c:7^26 · c:7^16 · c:7^19 · c:7^16 · c:7^19] --> [c:7^26 · c:7^16 · c:7^19 · c:7^16]
//│ [c:7^26 · c:7^16 · c:7^19 · c:7^16] --> [c:7^26 · c:7^16 · c:7^19]
//│ [c:7^26 · c:7^16 · c:7^19 · c:7^19 · c:7^16] --> [c:7^26 · c:7^16 · c:7^19 · c:7^19]
//│ [c:7^26 · c:7^16 · c:7^19 · c:7^19] --> [c:7^26 · c:7^16 · c:7^19]
//│ [c:7^26 · c:7^19 · c:7^16 · c:7^16 · c:7^19] --> [c:7^26 · c:7^19 · c:7^16 · c:7^16]
//│ [c:7^26 · c:7^19 · c:7^16 · c:7^16] --> [c:7^26 · c:7^19 · c:7^16]
//│ [c:7^26 · c:7^19 · c:7^16 · c:7^19 · c:7^16] --> [c:7^26 · c:7^19 · c:7^16 · c:7^19]
//│ [c:7^26 · c:7^19 · c:7^16 · c:7^19] --> [c:7^26 · c:7^19 · c:7^16]
//│ [c:7^26 · c:7^19 · c:7^19 · c:7^16 · c:7^19] --> [c:7^26 · c:7^19 · c:7^19 · c:7^16]
//│ [c:7^26 · c:7^19 · c:7^19 · c:7^16] --> [c:7^26 · c:7^19 · c:7^19]
//│ [c:7^26 · c:7^19 · c:7^19 · c:7^19 · c:7^16] --> [c:7^26 · c:7^19 · c:7^19 · c:7^19]
//│ [c:7^26 · c:7^19 · c:7^19 · c:7^19] --> [c:7^26 · c:7^19 · c:7^19]
//│ [t:6^27] --> [t:6^27]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:7^26]
//│ 	[c:7^26 · c:7^16]
//│ 		[c:7^26 · c:7^16 · c:7^16]
//│ 			[c:7^26 · c:7^16 · c:7^16 · c:7^16] ---> [c:7^26 · c:7^16 · c:7^16] (only one)
//│ 			[c:7^26 · c:7^16 · c:7^16 · c:7^19] ---> [c:7^26 · c:7^16 · c:7^16] (only one)
//│ 		[c:7^26 · c:7^16 · c:7^19]
//│ 			[c:7^26 · c:7^16 · c:7^19 · c:7^16] ---> [c:7^26 · c:7^16 · c:7^19] (only one)
//│ 			[c:7^26 · c:7^16 · c:7^19 · c:7^19] ---> [c:7^26 · c:7^16 · c:7^19] (only one)
//│ 	[c:7^26 · c:7^19]
//│ 		[c:7^26 · c:7^19 · c:7^16]
//│ 			[c:7^26 · c:7^19 · c:7^16 · c:7^16] ---> [c:7^26 · c:7^19 · c:7^16] (only one)
//│ 			[c:7^26 · c:7^19 · c:7^16 · c:7^19] ---> [c:7^26 · c:7^19 · c:7^16] (only one)
//│ 		[c:7^26 · c:7^19 · c:7^19]
//│ 			[c:7^26 · c:7^19 · c:7^19 · c:7^16] ---> [c:7^26 · c:7^19 · c:7^19] (only one)
//│ 			[c:7^26 · c:7^19 · c:7^19 · c:7^19] ---> [c:7^26 · c:7^19 · c:7^19] (only one)
//│ [t:6^27]
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([c:7^26]:12^144 [t:6^27]:19^145)
//│ def [c:7^26 · c:7^16 · c:7^16]:14 = (fun x:28 -> case x:28^69 of {
//│ 	T n:29 l:30 r:31 => [T case n:29^70 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:7^26 · c:7^16 · c:7^16]:14^74 l:30^75) ([c:7^26 · c:7^16 · c:7^16]:14^77 r:31^78)]
//│ 	| L => [LL]})
//│ def [c:7^26 · c:7^16 · c:7^19]:15 = (fun x:40 -> case x:40^114 of {
//│ 	T n:41 l:42 r:43 => [T case n:41^115 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:7^26 · c:7^16 · c:7^19]:15^119 l:42^120) ([c:7^26 · c:7^16 · c:7^19]:15^122 r:43^123)]
//│ 	| L => [LL]})
//│ def [c:7^26 · c:7^16]:13 = (fun x:32 -> case x:32^84 of {
//│ 	T n:33 l:34 r:35 => [T case n:33^85 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:7^26 · c:7^16 · c:7^16]:14^89 l:34^90) ([c:7^26 · c:7^16 · c:7^19]:15^92 r:35^93)]
//│ 	| L => [LL]})
//│ def [c:7^26 · c:7^19 · c:7^16]:17 = (fun x:24 -> case x:24^44 of {
//│ 	T n:25 l:26 r:27 => [T case n:25^45 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:7^26 · c:7^19 · c:7^16]:17^49 l:26^50) ([c:7^26 · c:7^19 · c:7^16]:17^52 r:27^53)]
//│ 	| L => [LL]})
//│ def [c:7^26 · c:7^19 · c:7^19]:18 = (fun x:44 -> case x:44^129 of {
//│ 	T n:45 l:46 r:47 => [T case n:45^130 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:7^26 · c:7^19 · c:7^19]:18^134 l:46^135) ([c:7^26 · c:7^19 · c:7^19]:18^137 r:47^138)]
//│ 	| L => [LL]})
//│ def [c:7^26 · c:7^19]:16 = (fun x:36 -> case x:36^99 of {
//│ 	T n:37 l:38 r:39 => [T case n:37^100 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:7^26 · c:7^19 · c:7^16]:17^104 l:38^105) ([c:7^26 · c:7^19 · c:7^19]:18^107 r:39^108)]
//│ 	| L => [LL]})
//│ def [c:7^26]:12 = (fun x:20 -> case x:20^29 of {
//│ 	T n:21 l:22 r:23 => [T case n:21^30 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:7^26 · c:7^16]:13^34 l:22^35) ([c:7^26 · c:7^19]:16^37 r:23^38)]
//│ 	| L => [LL]})
//│ def [t:6^27]:19 = [T [K] [T [N] [L] [L]] [T [N] [L] [L]]]
//│ def c:7 = (fun x:8 -> case x:8^14 of {
//│ 	T n:9 l:10 r:11 => [T case n:9^15 of {
//│ 		K => [KK]
//│ 		| N => [NN]} (c:7^19 l:10^20) (c:7^22 r:11^23)]
//│ 	| L => [LL]})
//│ def t:6 = [T [K] [T [N] [L] [L]] [T [N] [L] [L]]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 59: [K]
//│ [K] --->
//│ 	case n:21^30 of {K => [KK] | N => [NN]}
//│ 60: [N]
//│ [N] --->
//│ 	case n:33^85 of {K => [KK] | N => [NN]}
//│ 61: [L]
//│ [L] --->
//│ 	case x:28^69 of {T n:29 l:30 r:31 => [T case n:29^70 of {K => [KK] | N => [NN]} ([c:7^26 · c:7^16 · c:7^16]:14^74 l:30^75) ([c:7^26 · c:7^16 · c:7^16]:14^77 r:31^78)] | L => [LL]}
//│ 62: [L]
//│ [L] --->
//│ 	case x:40^114 of {T n:41 l:42 r:43 => [T case n:41^115 of {K => [KK] | N => [NN]} ([c:7^26 · c:7^16 · c:7^19]:15^119 l:42^120) ([c:7^26 · c:7^16 · c:7^19]:15^122 r:43^123)] | L => [LL]}
//│ 63: [T 60: [N] 61: [L] 62: [L]]
//│ [T [N] [L] [L]] --->
//│ 	case x:32^84 of {T n:33 l:34 r:35 => [T case n:33^85 of {K => [KK] | N => [NN]} ([c:7^26 · c:7^16 · c:7^16]:14^89 l:34^90) ([c:7^26 · c:7^16 · c:7^19]:15^92 r:35^93)] | L => [LL]}
//│ 64: [N]
//│ [N] --->
//│ 	case n:37^100 of {K => [KK] | N => [NN]}
//│ 65: [L]
//│ [L] --->
//│ 	case x:24^44 of {T n:25 l:26 r:27 => [T case n:25^45 of {K => [KK] | N => [NN]} ([c:7^26 · c:7^19 · c:7^16]:17^49 l:26^50) ([c:7^26 · c:7^19 · c:7^16]:17^52 r:27^53)] | L => [LL]}
//│ 66: [L]
//│ [L] --->
//│ 	case x:44^129 of {T n:45 l:46 r:47 => [T case n:45^130 of {K => [KK] | N => [NN]} ([c:7^26 · c:7^19 · c:7^19]:18^134 l:46^135) ([c:7^26 · c:7^19 · c:7^19]:18^137 r:47^138)] | L => [LL]}
//│ 67: [T 64: [N] 65: [L] 66: [L]]
//│ [T [N] [L] [L]] --->
//│ 	case x:36^99 of {T n:37 l:38 r:39 => [T case n:37^100 of {K => [KK] | N => [NN]} ([c:7^26 · c:7^19 · c:7^16]:17^104 l:38^105) ([c:7^26 · c:7^19 · c:7^19]:18^107 r:39^108)] | L => [LL]}
//│ 68: [T 59: [K] 63: [T 60: [N] 61: [L] 62: [L]] 67: [T 64: [N] 65: [L] 66: [L]]]
//│ [T [K] [T [N] [L] [L]] [T [N] [L] [L]]] --->
//│ 	case x:20^29 of {T n:21 l:22 r:23 => [T case n:21^30 of {K => [KK] | N => [NN]} ([c:7^26 · c:7^16]:13^34 l:22^35) ([c:7^26 · c:7^19]:16^37 r:23^38)] | L => [LL]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([c:7^26]:12^147 [t:6^27]:19^148)
//│ def [c:7^26 · c:7^16 · c:7^16]:14 = (fun x:28 -> x:28^152)
//│ def [c:7^26 · c:7^16 · c:7^19]:15 = (fun x:40 -> x:40^227)
//│ def [c:7^26 · c:7^16]:13 = (fun x:32 -> x:32^225)
//│ def [c:7^26 · c:7^19 · c:7^16]:17 = (fun x:24 -> x:24^150)
//│ def [c:7^26 · c:7^19 · c:7^19]:18 = (fun x:44 -> x:44^154)
//│ def [c:7^26 · c:7^19]:16 = (fun x:36 -> x:36^156)
//│ def [c:7^26]:12 = (fun x:20 -> x:20^208)
//│ def [t:6^27]:19 = let n:21 = [KK]
//│ in let l:22 = 
//│ 	let n:33 = [NN]
//│ 	in let l:34 = [LL]
//│ 	in let r:35 = [LL]
//│ 	in [T n:33^191 ([c:7^26 · c:7^16 · c:7^16]:14^192 l:34^193) ([c:7^26 · c:7^16 · c:7^19]:15^195 r:35^196)]
//│ in let r:23 = 
//│ 	let n:37 = [NN]
//│ 	in let l:38 = [LL]
//│ 	in let r:39 = [LL]
//│ 	in [T n:37^176 ([c:7^26 · c:7^19 · c:7^16]:17^177 l:38^178) ([c:7^26 · c:7^19 · c:7^19]:18^180 r:39^181)]
//│ in [T n:21^168 ([c:7^26 · c:7^16]:13^169 l:22^170) ([c:7^26 · c:7^19]:16^172 r:23^173)]
//│ def c:7 = (fun x:8 -> case x:8^210 of {
//│ 	T n:9 l:10 r:11 => [T case n:9^211 of {
//│ 		K => [KK]
//│ 		| N => [NN]} (c:7^215 l:10^216) (c:7^218 r:11^219)]
//│ 	| L => [LL]})
//│ def t:6 = [T [K] [T [N] [L] [L]] [T [N] [L] [L]]]
//│ <<<<<<< after fusion <<<<<<<


let aa = T(N, L, L)
let bb = T(N, L, L)
let t = T(K, aa, bb)
fun c(x) = if x is
    T(n, l, r) then T(
        (if n is
            K then KK
            N then NN
        ),
        c(l),
        c(r)
    )
    L then LL
c(t)
//│ |#let| |aa| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |bb| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |t| |#=| |T|(|K|,| |aa|,| |bb|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|T|(|n|,| |l|,| |r|)| |#then| |T|(|→|(|#if| |n| |is|→|K| |#then| |KK|↵|N| |#then| |NN|←|↵|)|,|↵|c|(|l|)|,|↵|c|(|r|)|←|↵|)|↵|L| |#then| |LL|←|↵|c|(|t|)|
//│ Parsed: {let aa = T (N, L, L,); let bb = T (N, L, L,); let t = T (K, aa, bb,); fun c = x, => if x is ‹(T (n, l, r,)) then T ('(' if n is ‹(K) then KK; (N) then NN›, ')', c (l,), c (r,),); (L) then LL›; c (t,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:9^28 t:8^29)
//│ def aa:6 = [T [N] [L] [L]]
//│ def bb:7 = [T [N] [L] [L]]
//│ def c:9 = (fun x:10 -> case x:10^13 of {
//│ 	T n:11 l:12 r:13 => [T case n:11^14 of {
//│ 		K => [KK]
//│ 		| N => [NN]} (c:9^18 l:12^19) (c:9^21 r:13^22)]
//│ 	| L => [LL]})
//│ def t:8 = [T [K] aa:6^10 bb:7^11]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 7'r
//│ 	[-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^18 · +c:9^21]  --->  [-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^18]
//│ 	[-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^21 · +c:9^21]  --->  [-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^21]
//│ 	[-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^18 · +c:9^21]  --->  [-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^18]
//│ 	[-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^21 · +c:9^21]  --->  [-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^21]
//│ NoProd <: 6'l
//│ 	[-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^18 · +c:9^18]  --->  [-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^18]
//│ 	[-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^21 · +c:9^18]  --->  [-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^21]
//│ 	[-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^18 · +c:9^18]  --->  [-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^18]
//│ 	[-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^21 · +c:9^18]  --->  [-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^21]
//│ NoProd <: 4'x
//│ 	[-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^18 · +c:9^18 · +c:9^21]  --->  [-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^18 · +c:9^18]
//│ 	[-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^18 · +c:9^21 · +c:9^18]  --->  [-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^18 · +c:9^21]
//│ 	[-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^21 · +c:9^18 · +c:9^21]  --->  [-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^21 · +c:9^18]
//│ 	[-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^21 · +c:9^21 · +c:9^18]  --->  [-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^21 · +c:9^21]
//│ 	[-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^18 · +c:9^18 · +c:9^21]  --->  [-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^18 · +c:9^18]
//│ 	[-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^18 · +c:9^21 · +c:9^18]  --->  [-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^18 · +c:9^21]
//│ 	[-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^21 · +c:9^18 · +c:9^21]  --->  [-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^21 · +c:9^18]
//│ 	[-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^21 · +c:9^21 · +c:9^18]  --->  [-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^21 · +c:9^21]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [c:9^28 · c:9^18 · c:9^18 · c:9^18 · c:9^21] --> [c:9^28 · c:9^18 · c:9^18 · c:9^18]
//│ [c:9^28 · c:9^18 · c:9^18 · c:9^18] --> [c:9^28 · c:9^18 · c:9^18]
//│ [c:9^28 · c:9^18 · c:9^18 · c:9^21 · c:9^18] --> [c:9^28 · c:9^18 · c:9^18 · c:9^21]
//│ [c:9^28 · c:9^18 · c:9^18 · c:9^21] --> [c:9^28 · c:9^18 · c:9^18]
//│ [c:9^28 · c:9^18 · c:9^21 · c:9^18 · c:9^21] --> [c:9^28 · c:9^18 · c:9^21 · c:9^18]
//│ [c:9^28 · c:9^18 · c:9^21 · c:9^18] --> [c:9^28 · c:9^18 · c:9^21]
//│ [c:9^28 · c:9^18 · c:9^21 · c:9^21 · c:9^18] --> [c:9^28 · c:9^18 · c:9^21 · c:9^21]
//│ [c:9^28 · c:9^18 · c:9^21 · c:9^21] --> [c:9^28 · c:9^18 · c:9^21]
//│ [c:9^28 · c:9^21 · c:9^18 · c:9^18 · c:9^21] --> [c:9^28 · c:9^21 · c:9^18 · c:9^18]
//│ [c:9^28 · c:9^21 · c:9^18 · c:9^18] --> [c:9^28 · c:9^21 · c:9^18]
//│ [c:9^28 · c:9^21 · c:9^18 · c:9^21 · c:9^18] --> [c:9^28 · c:9^21 · c:9^18 · c:9^21]
//│ [c:9^28 · c:9^21 · c:9^18 · c:9^21] --> [c:9^28 · c:9^21 · c:9^18]
//│ [c:9^28 · c:9^21 · c:9^21 · c:9^18 · c:9^21] --> [c:9^28 · c:9^21 · c:9^21 · c:9^18]
//│ [c:9^28 · c:9^21 · c:9^21 · c:9^18] --> [c:9^28 · c:9^21 · c:9^21]
//│ [c:9^28 · c:9^21 · c:9^21 · c:9^21 · c:9^18] --> [c:9^28 · c:9^21 · c:9^21 · c:9^21]
//│ [c:9^28 · c:9^21 · c:9^21 · c:9^21] --> [c:9^28 · c:9^21 · c:9^21]
//│ [t:8^29 · aa:6^10] --> [t:8^29 · aa:6^10]
//│ [t:8^29 · bb:7^11] --> [t:8^29 · bb:7^11]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:9^28]
//│ 	[c:9^28 · c:9^21]
//│ 		[c:9^28 · c:9^21 · c:9^21]
//│ 			[c:9^28 · c:9^21 · c:9^21 · c:9^21] ---> [c:9^28 · c:9^21 · c:9^21] (only one)
//│ 			[c:9^28 · c:9^21 · c:9^21 · c:9^18] ---> [c:9^28 · c:9^21 · c:9^21] (only one)
//│ 		[c:9^28 · c:9^21 · c:9^18]
//│ 			[c:9^28 · c:9^21 · c:9^18 · c:9^21] ---> [c:9^28 · c:9^21 · c:9^18] (only one)
//│ 			[c:9^28 · c:9^21 · c:9^18 · c:9^18] ---> [c:9^28 · c:9^21 · c:9^18] (only one)
//│ 	[c:9^28 · c:9^18]
//│ 		[c:9^28 · c:9^18 · c:9^21]
//│ 			[c:9^28 · c:9^18 · c:9^21 · c:9^21] ---> [c:9^28 · c:9^18 · c:9^21] (only one)
//│ 			[c:9^28 · c:9^18 · c:9^21 · c:9^18] ---> [c:9^28 · c:9^18 · c:9^21] (only one)
//│ 		[c:9^28 · c:9^18 · c:9^18]
//│ 			[c:9^28 · c:9^18 · c:9^18 · c:9^21] ---> [c:9^28 · c:9^18 · c:9^18] (only one)
//│ 			[c:9^28 · c:9^18 · c:9^18 · c:9^18] ---> [c:9^28 · c:9^18 · c:9^18] (only one)
//│ [t:8^29]
//│ 	[t:8^29 · bb:7^11]
//│ 
//│ 	[t:8^29 · aa:6^10]
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([c:9^28]:17^148 [t:8^29]:14^149)
//│ def [c:9^28 · c:9^18 · c:9^18]:23 = (fun x:24 -> case x:24^31 of {
//│ 	T n:25 l:26 r:27 => [T case n:25^32 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:9^28 · c:9^18 · c:9^18]:23^36 l:26^37) ([c:9^28 · c:9^18 · c:9^18]:23^39 r:27^40)]
//│ 	| L => [LL]})
//│ def [c:9^28 · c:9^18 · c:9^21]:22 = (fun x:44 -> case x:44^118 of {
//│ 	T n:45 l:46 r:47 => [T case n:45^119 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:9^28 · c:9^18 · c:9^21]:22^123 l:46^124) ([c:9^28 · c:9^18 · c:9^21]:22^126 r:47^127)]
//│ 	| L => [LL]})
//│ def [c:9^28 · c:9^18]:21 = (fun x:48 -> case x:48^133 of {
//│ 	T n:49 l:50 r:51 => [T case n:49^134 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:9^28 · c:9^18 · c:9^18]:23^138 l:50^139) ([c:9^28 · c:9^18 · c:9^21]:22^141 r:51^142)]
//│ 	| L => [LL]})
//│ def [c:9^28 · c:9^21 · c:9^18]:20 = (fun x:28 -> case x:28^54 of {
//│ 	T n:29 l:30 r:31 => [T case n:29^55 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:9^28 · c:9^21 · c:9^18]:20^59 l:30^60) ([c:9^28 · c:9^21 · c:9^18]:20^62 r:31^63)]
//│ 	| L => [LL]})
//│ def [c:9^28 · c:9^21 · c:9^21]:19 = (fun x:32 -> case x:32^69 of {
//│ 	T n:33 l:34 r:35 => [T case n:33^70 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:9^28 · c:9^21 · c:9^21]:19^74 l:34^75) ([c:9^28 · c:9^21 · c:9^21]:19^77 r:35^78)]
//│ 	| L => [LL]})
//│ def [c:9^28 · c:9^21]:18 = (fun x:36 -> case x:36^88 of {
//│ 	T n:37 l:38 r:39 => [T case n:37^89 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:9^28 · c:9^21 · c:9^18]:20^93 l:38^94) ([c:9^28 · c:9^21 · c:9^21]:19^96 r:39^97)]
//│ 	| L => [LL]})
//│ def [c:9^28]:17 = (fun x:40 -> case x:40^103 of {
//│ 	T n:41 l:42 r:43 => [T case n:41^104 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:9^28 · c:9^18]:21^108 l:42^109) ([c:9^28 · c:9^21]:18^111 r:43^112)]
//│ 	| L => [LL]})
//│ def [t:8^29 · aa:6^10]:16 = [T [N] [L] [L]]
//│ def [t:8^29 · bb:7^11]:15 = [T [N] [L] [L]]
//│ def [t:8^29]:14 = [T [K] [t:8^29 · aa:6^10]:16^47 [t:8^29 · bb:7^11]:15^48]
//│ def aa:6 = [T [N] [L] [L]]
//│ def bb:7 = [T [N] [L] [L]]
//│ def c:9 = (fun x:10 -> case x:10^16 of {
//│ 	T n:11 l:12 r:13 => [T case n:11^17 of {
//│ 		K => [KK]
//│ 		| N => [NN]} (c:9^21 l:12^22) (c:9^24 r:13^25)]
//│ 	| L => [LL]})
//│ def t:8 = [T [K] aa:6^13 bb:7^14]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 46: [K]
//│ [K] --->
//│ 	case n:41^104 of {K => [KK] | N => [NN]}
//│ 49: [T 46: [K] 47: [t:8^29 · aa:6^10]:16^47 48: [t:8^29 · bb:7^11]:15^48]
//│ [T [K] [t:8^29 · aa:6^10]:16^47 [t:8^29 · bb:7^11]:15^48] --->
//│ 	case x:40^103 of {T n:41 l:42 r:43 => [T case n:41^104 of {K => [KK] | N => [NN]} ([c:9^28 · c:9^18]:21^108 l:42^109) ([c:9^28 · c:9^21]:18^111 r:43^112)] | L => [LL]}
//│ 50: [N]
//│ [N] --->
//│ 	case n:37^89 of {K => [KK] | N => [NN]}
//│ 51: [L]
//│ [L] --->
//│ 	case x:28^54 of {T n:29 l:30 r:31 => [T case n:29^55 of {K => [KK] | N => [NN]} ([c:9^28 · c:9^21 · c:9^18]:20^59 l:30^60) ([c:9^28 · c:9^21 · c:9^18]:20^62 r:31^63)] | L => [LL]}
//│ 52: [L]
//│ [L] --->
//│ 	case x:32^69 of {T n:33 l:34 r:35 => [T case n:33^70 of {K => [KK] | N => [NN]} ([c:9^28 · c:9^21 · c:9^21]:19^74 l:34^75) ([c:9^28 · c:9^21 · c:9^21]:19^77 r:35^78)] | L => [LL]}
//│ 53: [T 50: [N] 51: [L] 52: [L]]
//│ [T [N] [L] [L]] --->
//│ 	case x:36^88 of {T n:37 l:38 r:39 => [T case n:37^89 of {K => [KK] | N => [NN]} ([c:9^28 · c:9^21 · c:9^18]:20^93 l:38^94) ([c:9^28 · c:9^21 · c:9^21]:19^96 r:39^97)] | L => [LL]}
//│ 84: [N]
//│ [N] --->
//│ 	case n:49^134 of {K => [KK] | N => [NN]}
//│ 85: [L]
//│ [L] --->
//│ 	case x:24^31 of {T n:25 l:26 r:27 => [T case n:25^32 of {K => [KK] | N => [NN]} ([c:9^28 · c:9^18 · c:9^18]:23^36 l:26^37) ([c:9^28 · c:9^18 · c:9^18]:23^39 r:27^40)] | L => [LL]}
//│ 86: [L]
//│ [L] --->
//│ 	case x:44^118 of {T n:45 l:46 r:47 => [T case n:45^119 of {K => [KK] | N => [NN]} ([c:9^28 · c:9^18 · c:9^21]:22^123 l:46^124) ([c:9^28 · c:9^18 · c:9^21]:22^126 r:47^127)] | L => [LL]}
//│ 87: [T 84: [N] 85: [L] 86: [L]]
//│ [T [N] [L] [L]] --->
//│ 	case x:48^133 of {T n:49 l:50 r:51 => [T case n:49^134 of {K => [KK] | N => [NN]} ([c:9^28 · c:9^18 · c:9^18]:23^138 l:50^139) ([c:9^28 · c:9^18 · c:9^21]:22^141 r:51^142)] | L => [LL]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([c:9^28]:17^151 [t:8^29]:14^152)
//│ def [c:9^28 · c:9^18 · c:9^18]:23 = (fun x:24 -> x:24^209)
//│ def [c:9^28 · c:9^18 · c:9^21]:22 = (fun x:44 -> x:44^207)
//│ def [c:9^28 · c:9^18]:21 = (fun x:48 -> x:48^235)
//│ def [c:9^28 · c:9^21 · c:9^18]:20 = (fun x:28 -> x:28^154)
//│ def [c:9^28 · c:9^21 · c:9^21]:19 = (fun x:32 -> x:32^156)
//│ def [c:9^28 · c:9^21]:18 = (fun x:36 -> x:36^158)
//│ def [c:9^28]:17 = (fun x:40 -> x:40^233)
//│ def [t:8^29 · aa:6^10]:16 = let n:49 = [NN]
//│ in let l:50 = [LL]
//│ in let r:51 = [LL]
//│ in [T n:49^193 ([c:9^28 · c:9^18 · c:9^18]:23^194 l:50^195) ([c:9^28 · c:9^18 · c:9^21]:22^197 r:51^198)]
//│ def [t:8^29 · bb:7^11]:15 = let n:37 = [NN]
//│ in let l:38 = [LL]
//│ in let r:39 = [LL]
//│ in [T n:37^211 ([c:9^28 · c:9^21 · c:9^18]:20^212 l:38^213) ([c:9^28 · c:9^21 · c:9^21]:19^215 r:39^216)]
//│ def [t:8^29]:14 = let n:41 = [KK]
//│ in let l:42 = [t:8^29 · aa:6^10]:16^170
//│ in let r:43 = [t:8^29 · bb:7^11]:15^168
//│ in [T n:41^160 ([c:9^28 · c:9^18]:21^161 l:42^162) ([c:9^28 · c:9^21]:18^164 r:43^165)]
//│ def aa:6 = [T [N] [L] [L]]
//│ def bb:7 = [T [N] [L] [L]]
//│ def c:9 = (fun x:10 -> case x:10^178 of {
//│ 	T n:11 l:12 r:13 => [T case n:11^179 of {
//│ 		K => [KK]
//│ 		| N => [NN]} (c:9^183 l:12^184) (c:9^186 r:13^187)]
//│ 	| L => [LL]})
//│ def t:8 = [T [K] aa:6^226 bb:7^227]
//│ <<<<<<< after fusion <<<<<<<


fun map(ls) = if ls is
    C(h, t) then f => C(f(h), map(t)(f))
    N then f => N
let l = C(K, N)
map(l)(
    x => if x is
        K then T
)
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |f| |=>| |C|(|f|(|h|)|,| |map|(|t|)|(|f|)|)|↵|N| |#then| |f| |=>| |N|←|↵|#let| |l| |#=| |C|(|K|,| |N|)|↵|map|(|l|)|(|→|x| |=>| |#if| |x| |is|→|K| |#then| |T|←|←|↵|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (h, t,)) then f, => C (f (h,), map (t,) (f,),); (N) then f, => N›; let l = C (K, N,); map (l,) (x, => if x is ‹(K) then T›,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((map:6^19 l:7^20) (fun x:13 -> case x:13^22 of {
//│ 	K => [T]}))
//│ def l:7 = [C [K] [N]]
//│ def map:6 = (fun ls:8 -> case ls:8^1 of {
//│ 	C h:9 t:10 => (fun f:11 -> [C (f:11^2 h:9^3) ((map:6^5 t:10^6) f:11^8)])
//│ 	| N => (fun f:12 -> [N])})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 4't
//│ 	[-l:7^20 · +map:6^19 · +map:6^5 · +map:6^5]  --->  [-l:7^20 · +map:6^19 · +map:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [map:6^19 · map:6^5 · map:6^5] --> [map:6^19 · map:6^5]
//│ [l:7^20] --> [l:7^20]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [l:7^20]
//│ 
//│ [map:6^19]
//│ 	[map:6^19 · map:6^5]
//│ 		[map:6^19 · map:6^5 · map:6^5] ---> [map:6^19 · map:6^5] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([map:6^19]:15^60 [l:7^20]:14^61) (fun x:27 -> case x:27^63 of {
//│ 	K => [T]}))
//│ def [l:7^20]:14 = [C [K] [N]]
//│ def [map:6^19 · map:6^5]:16 = (fun ls:22 -> case ls:22^45 of {
//│ 	C h:23 t:24 => (fun f:25 -> [C (f:25^46 h:23^47) (([map:6^19 · map:6^5]:16^49 t:24^50) f:25^52)])
//│ 	| N => (fun f:26 -> [N])})
//│ def [map:6^19]:15 = (fun ls:17 -> case ls:17^27 of {
//│ 	C h:18 t:19 => (fun f:20 -> [C (f:20^28 h:18^29) (([map:6^19 · map:6^5]:16^31 t:19^32) f:20^34)])
//│ 	| N => (fun f:21 -> [N])})
//│ def l:7 = [C [K] [N]]
//│ def map:6 = (fun ls:9 -> case ls:9^9 of {
//│ 	C h:10 t:11 => (fun f:12 -> [C (f:12^10 h:10^11) ((map:6^13 t:11^14) f:12^16)])
//│ 	| N => (fun f:13 -> [N])})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 42: [K]
//│ [K] --->
//│ 	case x:27^63 of {K => [T]}
//│ 43: [N]
//│ [N] --->
//│ 	case ls:22^45 of {C h:23 t:24 => (fun f:25 -> [C (f:25^46 h:23^47) (([map:6^19 · map:6^5]:16^49 t:24^50) f:25^52)]) | N => (fun f:26 -> [N])}
//│ 44: [C 42: [K] 43: [N]]
//│ [C [K] [N]] --->
//│ 	case ls:17^27 of {C h:18 t:19 => (fun f:20 -> [C (f:20^28 h:18^29) (([map:6^19 · map:6^5]:16^31 t:19^32) f:20^34)]) | N => (fun f:21 -> [N])}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (([map:6^19]:15^68 [l:7^20]:14^69) (fun x:27 -> x:27^71))
//│ def [l:7^20]:14 = let h:18 = [T]
//│ in let t:19 = (fun f:26 -> [N])
//│ in (fun f:20 -> [C (f:20^74 h:18^75) (([map:6^19 · map:6^5]:16^77 t:19^78) f:20^80)])
//│ def [map:6^19 · map:6^5]:16 = (fun ls:22 -> ls:22^109)
//│ def [map:6^19]:15 = (fun ls:17 -> ls:17^92)
//│ def l:7 = [C [K] [N]]
//│ def map:6 = (fun ls:9 -> case ls:9^94 of {
//│ 	C h:10 t:11 => (fun f:12 -> [C (f:12^95 h:10^96) ((map:6^98 t:11^99) f:12^101)])
//│ 	| N => (fun f:13 -> [N])})
//│ <<<<<<< after fusion <<<<<<<


fun inter(xs) = if xs is
    N then ys => ys
    C(h, t) then ys => C(h, inter(ys)(t))
let rec l1 = C(1, C(2, l1))
let rec l2 = C(9, C(8, l2))
inter(l1)(l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|#let| |#rec| |l1| |#=| |C|(|1|,| |C|(|2|,| |l1|)|)|↵|#let| |#rec| |l2| |#=| |C|(|9|,| |C|(|8|,| |l2|)|)|↵|inter|(|l1|)|(|l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; let rec l1 = C (1, C (2, l1,),); let rec l2 = C (9, C (8, l2,),); inter (l1,) (l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((inter:6^24 l1:7^25) l2:8^27)
//│ def inter:6 = (fun xs:9 -> case xs:9^1 of {
//│ 	N => (fun ys:10 -> ys:10^2)
//│ 	| C h:11 t:12 => (fun ys:13 -> [C h:11^4 ((inter:6^5 ys:13^6) t:12^8)])})
//│ def l1:7 = [C 1 [C 2 l1:7^16]]
//│ def l2:8 = [C 9 [C 8 l2:8^21]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(Int, 1'l1_7^16) <: 7'ys
//│ 	[-l1:7^16 · -l1:7^25 · +inter:6^24 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5]  --->  [-l1:7^25 · +inter:6^24 · +inter:6^5]
//│ C(Int, 2'l2_8^21) <: 7'ys
//│ 	[-l2:8^21 · -l2:8^27 · +inter:6^24 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5]  --->  [-l2:8^27 · +inter:6^24 · +inter:6^5 · +inter:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [inter:6^24 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5] --> [inter:6^24 · inter:6^5 · inter:6^5]
//│ [inter:6^24 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5] --> [inter:6^24 · inter:6^5]
//│ [l1:7^25 · l1:7^16] --> [l1:7^25]
//│ [l2:8^27 · l2:8^21] --> [l2:8^27]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter:6^24]
//│ 	[inter:6^24 · inter:6^5]
//│ 		[inter:6^24 · inter:6^5 · inter:6^5]
//│ 			[inter:6^24 · inter:6^5 · inter:6^5 · inter:6^5]
//│ 				[inter:6^24 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5]
//│ 					[inter:6^24 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5] ---> [inter:6^24 · inter:6^5] (only one)
//│ [l1:7^25]
//│ 	[l1:7^25 · l1:7^16] ---> [l1:7^25] (only one)
//│ [l2:8^27]
//│ 	[l2:8^27 · l2:8^21] ---> [l2:8^27] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([inter:6^24]:16^104 [l1:7^25]:15^105) [l2:8^27]:14^107)
//│ def [inter:6^24 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5]:20 = (fun xs:31 -> case xs:31^60 of {
//│ 	N => (fun ys:32 -> ys:32^61)
//│ 	| C h:33 t:34 => (fun ys:35 -> [C h:33^63 (([inter:6^24 · inter:6^5]:17^64 ys:35^65) t:34^67)])})
//│ def [inter:6^24 · inter:6^5 · inter:6^5 · inter:6^5]:19 = (fun xs:26 -> case xs:26^47 of {
//│ 	N => (fun ys:27 -> ys:27^48)
//│ 	| C h:28 t:29 => (fun ys:30 -> [C h:28^50 (([inter:6^24 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5]:20^51 ys:30^52) t:29^54)])})
//│ def [inter:6^24 · inter:6^5 · inter:6^5]:18 = (fun xs:41 -> case xs:41^91 of {
//│ 	N => (fun ys:42 -> ys:42^92)
//│ 	| C h:43 t:44 => (fun ys:45 -> [C h:43^94 (([inter:6^24 · inter:6^5 · inter:6^5 · inter:6^5]:19^95 ys:45^96) t:44^98)])})
//│ def [inter:6^24 · inter:6^5]:17 = (fun xs:36 -> case xs:36^73 of {
//│ 	N => (fun ys:37 -> ys:37^74)
//│ 	| C h:38 t:39 => (fun ys:40 -> [C h:38^76 (([inter:6^24 · inter:6^5 · inter:6^5]:18^77 ys:40^78) t:39^80)])})
//│ def [inter:6^24]:16 = (fun xs:21 -> case xs:21^29 of {
//│ 	N => (fun ys:22 -> ys:22^30)
//│ 	| C h:23 t:24 => (fun ys:25 -> [C h:23^32 (([inter:6^24 · inter:6^5]:17^33 ys:25^34) t:24^36)])})
//│ def [l1:7^25]:15 = [C 1 [C 2 [l1:7^25]:15^88]]
//│ def [l2:8^27]:14 = [C 9 [C 8 [l2:8^27]:14^44]]
//│ def inter:6 = (fun xs:9 -> case xs:9^6 of {
//│ 	N => (fun ys:10 -> ys:10^7)
//│ 	| C h:11 t:12 => (fun ys:13 -> [C h:11^9 ((inter:6^10 ys:13^11) t:12^13)])})
//│ def l1:7 = [C 1 [C 2 l1:7^21]]
//│ def l2:8 = [C 9 [C 8 l2:8^26]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 45: [C 43: 8 44: [l2:8^27]:14^44]
//│ [C 8 [l2:8^27]:14^44] --->
//│ 	case xs:26^47 of {N => (fun ys:27 -> ys:27^48) | C h:28 t:29 => (fun ys:30 -> [C h:28^50 (([inter:6^24 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5]:20^51 ys:30^52) t:29^54)])}
//│ 46: [C 42: 9 45: [C 43: 8 44: [l2:8^27]:14^44]]
//│ [C 9 [C 8 [l2:8^27]:14^44]] --->
//│ 	case xs:36^73 of {N => (fun ys:37 -> ys:37^74) | C h:38 t:39 => (fun ys:40 -> [C h:38^76 (([inter:6^24 · inter:6^5 · inter:6^5]:18^77 ys:40^78) t:39^80)])}
//│ 89: [C 87: 2 88: [l1:7^25]:15^88]
//│ [C 2 [l1:7^25]:15^88] --->
//│ 	case xs:41^91 of {N => (fun ys:42 -> ys:42^92) | C h:43 t:44 => (fun ys:45 -> [C h:43^94 (([inter:6^24 · inter:6^5 · inter:6^5 · inter:6^5]:19^95 ys:45^96) t:44^98)])}
//│ 90: [C 86: 1 89: [C 87: 2 88: [l1:7^25]:15^88]]
//│ [C 1 [C 2 [l1:7^25]:15^88]] --->
//│ 	case xs:21^29 of {N => (fun ys:22 -> ys:22^30) | C h:23 t:24 => (fun ys:25 -> [C h:23^32 (([inter:6^24 · inter:6^5]:17^33 ys:25^34) t:24^36)])}
//│ 	case xs:31^60 of {N => (fun ys:32 -> ys:32^61) | C h:33 t:34 => (fun ys:35 -> [C h:33^63 (([inter:6^24 · inter:6^5]:17^64 ys:35^65) t:34^67)])}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (([inter:6^24]:16^109 [l1:7^25]:15^110) [l2:8^27]:14^112)
//│ def [inter:6^24 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5]:20 = (fun xs:31 -> case xs:31^189 of {
//│ 	N => (fun ys:32 -> ys:32^190)
//│ 	| C h:33 t:34 => (fun ys:35 -> [C h:33^192 (([inter:6^24 · inter:6^5]:17^193 ys:35^194) t:34^196)])})
//│ def [inter:6^24 · inter:6^5 · inter:6^5 · inter:6^5]:19 = (fun xs:26 -> xs:26^182)
//│ def [inter:6^24 · inter:6^5 · inter:6^5]:18 = (fun xs:41 -> xs:41^114)
//│ def [inter:6^24 · inter:6^5]:17 = (fun xs:36 -> xs:36^134)
//│ def [inter:6^24]:16 = (fun xs:21 -> xs:21^202)
//│ def [l1:7^25]:15 = let h:23 = 1
//│ in let t:24 = 
//│ 	let h:43 = 2
//│ 	in let t:44 = [l1:7^25]:15^175
//│ 	in (fun ys:45 -> [C h:43^167 (([inter:6^24 · inter:6^5 · inter:6^5 · inter:6^5]:19^168 ys:45^169) t:44^171)])
//│ in (fun ys:25 -> [C h:23^159 (([inter:6^24 · inter:6^5]:17^160 ys:25^161) t:24^163)])
//│ def [l2:8^27]:14 = let h:38 = 9
//│ in let t:39 = 
//│ 	let h:28 = 8
//│ 	in let t:29 = [l2:8^27]:14^152
//│ 	in (fun ys:30 -> [C h:28^144 (([inter:6^24 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5]:20^145 ys:30^146) t:29^148)])
//│ in (fun ys:40 -> [C h:38^136 (([inter:6^24 · inter:6^5 · inter:6^5]:18^137 ys:40^138) t:39^140)])
//│ def inter:6 = (fun xs:9 -> case xs:9^116 of {
//│ 	N => (fun ys:10 -> ys:10^117)
//│ 	| C h:11 t:12 => (fun ys:13 -> [C h:11^119 ((inter:6^120 ys:13^121) t:12^123)])})
//│ def l1:7 = [C 1 [C 2 l1:7^186]]
//│ def l2:8 = [C 9 [C 8 l2:8^131]]
//│ <<<<<<< after fusion <<<<<<<


fun last(ys) = if ys is
    N then x => x
    C(h, t) then x => last(t)(h)
fun lastDrive(xs) = if xs is
    N then None
    C(hh, tt) then Some(last(tt)(hh))
lastDrive(C(1, C(2, N)))
//│ |#fun| |last|(|ys|)| |#=| |#if| |ys| |is|→|N| |#then| |x| |=>| |x|↵|C|(|h|,| |t|)| |#then| |x| |=>| |last|(|t|)|(|h|)|←|↵|#fun| |lastDrive|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |None|↵|C|(|hh|,| |tt|)| |#then| |Some|(|last|(|tt|)|(|hh|)|)|←|↵|lastDrive|(|C|(|1|,| |C|(|2|,| |N|)|)|)|
//│ Parsed: {fun last = ys, => if ys is ‹(N) then x, => x; (C (h, t,)) then x, => last (t,) (h,)›; fun lastDrive = xs, => if xs is ‹(N) then None; (C (hh, tt,)) then Some (last (tt,) (hh,),)›; lastDrive (C (1, C (2, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (lastDrive:7^22 [C 1 [C 2 [N]]])
//│ def last:6 = (fun ys:8 -> case ys:8^1 of {
//│ 	N => (fun x:9 -> x:9^2)
//│ 	| C h:10 t:11 => (fun x:12 -> ((last:6^4 t:11^5) h:10^7))})
//│ def lastDrive:7 = (fun xs:13 -> case xs:13^12 of {
//│ 	N => [None]
//│ 	| C hh:14 tt:15 => [Some ((last:6^14 tt:15^15) hh:14^17)]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 5't
//│ 	[+lastDrive:7^22 · +last:6^14 · +last:6^4 · +last:6^4]  --->  [+lastDrive:7^22 · +last:6^14 · +last:6^4]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [lastDrive:7^22 · last:6^14 · last:6^4 · last:6^4] --> [lastDrive:7^22 · last:6^14 · last:6^4]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [lastDrive:7^22]
//│ 	[lastDrive:7^22 · last:6^14]
//│ 		[lastDrive:7^22 · last:6^14 · last:6^4]
//│ 			[lastDrive:7^22 · last:6^14 · last:6^4 · last:6^4] ---> [lastDrive:7^22 · last:6^14 · last:6^4] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([lastDrive:7^22]:16^61 [C 1 [C 2 [N]]])
//│ def [lastDrive:7^22 · last:6^14 · last:6^4]:18 = (fun ys:27 -> case ys:27^50 of {
//│ 	N => (fun x:28 -> x:28^51)
//│ 	| C h:29 t:30 => (fun x:31 -> (([lastDrive:7^22 · last:6^14 · last:6^4]:18^53 t:30^54) h:29^56))})
//│ def [lastDrive:7^22 · last:6^14]:17 = (fun ys:22 -> case ys:22^39 of {
//│ 	N => (fun x:23 -> x:23^40)
//│ 	| C h:24 t:25 => (fun x:26 -> (([lastDrive:7^22 · last:6^14 · last:6^4]:18^42 t:25^43) h:24^45))})
//│ def [lastDrive:7^22]:16 = (fun xs:19 -> case xs:19^29 of {
//│ 	N => [None]
//│ 	| C hh:20 tt:21 => [Some (([lastDrive:7^22 · last:6^14]:17^31 tt:21^32) hh:20^34)]})
//│ def last:6 = (fun ys:8 -> case ys:8^8 of {
//│ 	N => (fun x:9 -> x:9^9)
//│ 	| C h:10 t:11 => (fun x:12 -> ((last:6^11 t:11^12) h:10^14))})
//│ def lastDrive:7 = (fun xs:13 -> case xs:13^19 of {
//│ 	N => [None]
//│ 	| C hh:14 tt:15 => [Some ((last:6^21 tt:15^22) hh:14^24)]})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 64: [N]
//│ [N] --->
//│ 	case ys:27^50 of {N => (fun x:28 -> x:28^51) | C h:29 t:30 => (fun x:31 -> (([lastDrive:7^22 · last:6^14 · last:6^4]:18^53 t:30^54) h:29^56))}
//│ 65: [C 63: 2 64: [N]]
//│ [C 2 [N]] --->
//│ 	case ys:22^39 of {N => (fun x:23 -> x:23^40) | C h:24 t:25 => (fun x:26 -> (([lastDrive:7^22 · last:6^14 · last:6^4]:18^42 t:25^43) h:24^45))}
//│ 66: [C 62: 1 65: [C 63: 2 64: [N]]]
//│ [C 1 [C 2 [N]]] --->
//│ 	case xs:19^29 of {N => [None] | C hh:20 tt:21 => [Some (([lastDrive:7^22 · last:6^14]:17^31 tt:21^32) hh:20^34)]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([lastDrive:7^22]:16^68 let hh:20 = 1
//│ in let tt:21 = 
//│ 	let h:24 = 2
//│ 	in let t:25 = (fun x:28 -> x:28^81)
//│ 	in (fun x:26 -> (([lastDrive:7^22 · last:6^14 · last:6^4]:18^75 t:25^76) h:24^78))
//│ in [Some (([lastDrive:7^22 · last:6^14]:17^69 tt:21^70) hh:20^72)])
//│ def [lastDrive:7^22 · last:6^14 · last:6^4]:18 = (fun ys:27 -> ys:27^90)
//│ def [lastDrive:7^22 · last:6^14]:17 = (fun ys:22 -> ys:22^105)
//│ def [lastDrive:7^22]:16 = (fun xs:19 -> xs:19^92)
//│ def last:6 = (fun ys:8 -> case ys:8^94 of {
//│ 	N => (fun x:9 -> x:9^95)
//│ 	| C h:10 t:11 => (fun x:12 -> ((last:6^97 t:11^98) h:10^100))})
//│ def lastDrive:7 = (fun xs:13 -> case xs:13^107 of {
//│ 	N => [None]
//│ 	| C hh:14 tt:15 => [Some ((last:6^109 tt:15^110) hh:14^112)]})
//│ <<<<<<< after fusion <<<<<<<
