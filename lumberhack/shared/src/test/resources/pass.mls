:NewParser
:ParseOnly

let rec p = C(p)
fun c(x) = if x is
    C(a) then c(a)
c(p)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|c|(|p|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then c (a,)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 2: [C 1: p:6]
//│ def c:7 = 8: (fun x:8 -> 7: case 3: x:8 of {C a:9 -> 6: (4: c:7 5: a:9)})
//│ 11: (9: c:7 10: p:6)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((p:6^10 ⋅ p:6^1 ⋅ ɛ, C((p:6^1 ⋅ ɛ, 0'p))), (c:7^9 ⋅ c:7^4 ⋅ ɛ, 2'x)) :::: ((p:6^10 ⋅ ɛ, C((p:6^1 ⋅ ɛ, 0'p))), (c:7^9 ⋅ ɛ, 2'x))
//│ ------- defInstance -------
//│ p:6^10 ⋅ ɛ ==> c:7^9 ⋅ ɛ:
//│ 	2: [C p:6]  <-->  7: case x:8 of {C a:9 -> (c:7 a:9)}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:6 = [C p:6]
//│ def c:7 = (fun x:8 -> case x:8 of {C a:9 -> (c:7 a:9)})
//│ def c'7'9:10 = (fun x:8 -> x:8)
//│ def p'6'10:11 = 
//│ 	let a:9 = p'6'10:11 in (c'7'9:10 a:9)
//│ (c'7'9:10 p'6'10:11)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<



let p = C(1, C(2, N))
fun e(z) = if z is
    C(aaa, bbb) then bbb
    N then 7
fun d(y) = if y is
    C(aa, bb) then e(bb)
    N then 5
fun c(x) = if x is
    C(a, b) then d(b)
    N then 3
c(p)
//│ |#let| |p| |#=| |C|(|1|,| |C|(|2|,| |N|)|)|↵|#fun| |e|(|z|)| |#=| |#if| |z| |is|→|C|(|aaa|,| |bbb|)| |#then| |bbb|↵|N| |#then| |7|←|↵|#fun| |d|(|y|)| |#=| |#if| |y| |is|→|C|(|aa|,| |bb|)| |#then| |e|(|bb|)|↵|N| |#then| |5|←|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|,| |b|)| |#then| |d|(|b|)|↵|N| |#then| |3|←|↵|c|(|p|)|
//│ Parsed: {let p = C (1, C (2, N,),); fun e = z, => if z is ‹(C (aaa, bbb,)) then bbb; (N) then 7›; fun d = y, => if y is ‹(C (aa, bb,)) then e (bb,); (N) then 5›; fun c = x, => if x is ‹(C (a, b,)) then d (b,); (N) then 3›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 5: [C 1: 1 4: [C 2: 2 3: [N]]]
//│ def e:7 = 10: (fun z:10 -> 9: case 6: z:10 of {C aaa:11 bbb:12 -> 7: bbb:12 | N -> 8: 7})
//│ def d:8 = 17: (fun y:13 -> 16: case 11: y:13 of {C aa:14 bb:15 -> 14: (12: e:7 13: bb:15) | N -> 15: 5})
//│ def c:9 = 24: (fun x:16 -> 23: case 18: x:16 of {C a:17 b:18 -> 21: (19: d:8 20: b:18) | N -> 22: 3})
//│ 27: (25: c:9 26: p:6)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ------- defInstance -------
//│ p:6^26 ⋅ ɛ ==> c:9^25 ⋅ ɛ:
//│ 	5: [C 1 [C 2 [N]]]  <-->  23: case x:16 of {C a:17 b:18 -> (d:8 b:18) | N -> 3}
//│ p:6^26 ⋅ ɛ ==> c:9^25 ⋅ d:8^19 ⋅ ɛ:
//│ 	4: [C 2 [N]]  <-->  16: case y:13 of {C aa:14 bb:15 -> (e:7 bb:15) | N -> 5}
//│ p:6^26 ⋅ ɛ ==> c:9^25 ⋅ d:8^19 ⋅ e:7^12 ⋅ ɛ:
//│ 	3: [N]  <-->  9: case z:10 of {C aaa:11 bbb:12 -> bbb:12 | N -> 7}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:6 = [C 1 [C 2 [N]]]
//│ def e:7 = (fun z:10 -> case z:10 of {C aaa:11 bbb:12 -> bbb:12 | N -> 7})
//│ def d:8 = (fun y:13 -> case y:13 of {C aa:14 bb:15 -> (e:7 bb:15) | N -> 5})
//│ def c:9 = (fun x:16 -> case x:16 of {C a:17 b:18 -> (d:8 b:18) | N -> 3})
//│ def p'6'26:20 = 
//│ 	let a:17 = 1 in 
//│ 	let b:18 = 
//│ 		let aa:14 = 2 in 
//│ 		let bb:15 = 7 in (c'9'25_d'8'19_e'7'12:22 bb:15) 
//│ 	in (c'9'25_d'8'19:21 b:18)
//│ def c'9'25_d'8'19_e'7'12:22 = (fun z:10 -> z:10)
//│ def c'9'25:19 = (fun x:16 -> x:16)
//│ def c'9'25_d'8'19:21 = (fun y:13 -> y:13)
//│ (c'9'25:19 p'6'26:20)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


let rec p = C(C(p))
fun c(x) = if x is
    C(a) then if a is
        C(b) then if b is
            C(y) then c(y)
c(p)
//│ |#let| |#rec| |p| |#=| |C|(|C|(|p|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|b|)| |#then| |#if| |b| |is|→|C|(|y|)| |#then| |c|(|y|)|←|←|←|↵|c|(|p|)|
//│ Parsed: {let rec p = C (C (p,),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (b,)) then if b is ‹(C (y,)) then c (y,)›››; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 3: [C 2: [C 1: p:6]]
//│ def c:7 = 13: (fun x:8 -> 12: case 4: x:8 of {C a:9 -> 11: case 5: a:9 of {C b:10 -> 10: case 6: b:10 of {C y:11 -> 9: (7: c:7 8: y:11)}}})
//│ 16: (14: c:7 15: p:6)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (
//│   (p:6^15 ⋅ p:6^1 ⋅ p:6^1 ⋅ p:6^1 ⋅ ɛ, C((ɛ, C((p:6^1 ⋅ ɛ, 0'p))))),
//│   (c:7^14 ⋅ c:7^7 ⋅ c:7^7 ⋅ ɛ, 2'x)
//│ ) :::: ((p:6^15 ⋅ ɛ, C((ɛ, C((p:6^1 ⋅ ɛ, 0'p))))), (c:7^14 ⋅ ɛ, 2'x))
//│ ------- defInstance -------
//│ p:6^15 ⋅ ɛ ==> c:7^14 ⋅ ɛ:
//│ 	2: [C p:6]  <-->  11: case a:9 of {C b:10 -> case b:10 of {C y:11 -> (c:7 y:11)}}
//│ 	3: [C [C p:6]]  <-->  12: case x:8 of {C a:9 -> case a:9 of {C b:10 -> case b:10 of {C y:11 -> (c:7 y:11)}}}
//│ p:6^15 ⋅ p:6^1 ⋅ ɛ ==> c:7^14 ⋅ ɛ:
//│ 	3: [C [C p:6]]  <-->  10: case b:10 of {C y:11 -> (c:7 y:11)}
//│ p:6^15 ⋅ p:6^1 ⋅ ɛ ==> c:7^14 ⋅ c:7^7 ⋅ ɛ:
//│ 	2: [C p:6]  <-->  12: case x:8 of {C a:9 -> case a:9 of {C b:10 -> case b:10 of {C y:11 -> (c:7 y:11)}}}
//│ p:6^15 ⋅ p:6^1 ⋅ p:6^1 ⋅ ɛ ==> c:7^14 ⋅ c:7^7 ⋅ ɛ:
//│ 	2: [C p:6]  <-->  10: case b:10 of {C y:11 -> (c:7 y:11)}
//│ 	3: [C [C p:6]]  <-->  11: case a:9 of {C b:10 -> case b:10 of {C y:11 -> (c:7 y:11)}}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:6 = [C [C p:6]]
//│ def c:7 = (fun x:8 -> case x:8 of {C a:9 -> case a:9 of {C b:10 -> case b:10 of {C y:11 -> (c:7 y:11)}}})
//│ def c'7'14_c'7'7:15 = (fun x:8 -> x:8)
//│ def p'6'15_p'6'1:14 = 
//│ 	let y:11 = 
//│ 		let a:9 = p'6'15_p'6'1_p'6'1:16 in a:9 
//│ 	in (c'7'14_c'7'7:15 y:11)
//│ def p'6'15_p'6'1_p'6'1:16 = 
//│ 	let b:10 = 
//│ 		let y:11 = p'6'15:13 in (c'7'14:12 y:11) 
//│ 	in b:10
//│ def p'6'15:13 = 
//│ 	let a:9 = 
//│ 		let b:10 = p'6'15_p'6'1:14 in b:10 
//│ 	in a:9
//│ def c'7'14:12 = (fun x:8 -> x:8)
//│ (c'7'14:12 p'6'15:13)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<



let rec p = C(C(C(id(p))))
fun c(x) = if x is
    C(a) then if a is
        C(b) then c(b)
fun id2(z) = z
fun id(y) = id2(y)
fun id3(d) = d
c(id3(p))
//│ |#let| |#rec| |p| |#=| |C|(|C|(|C|(|id|(|p|)|)|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |#if| |a| |is|→|C|(|b|)| |#then| |c|(|b|)|←|←|↵|#fun| |id2|(|z|)| |#=| |z|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|#fun| |id3|(|d|)| |#=| |d|↵|c|(|id3|(|p|)|)|
//│ Parsed: {let rec p = C (C (C (id (p,),),),); fun c = x, => if x is ‹(C (a,)) then if a is ‹(C (b,)) then c (b,)››; fun id2 = z, => z; fun id = y, => id2 (y,); fun id3 = d, => d; c (id3 (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 6: [C 5: [C 4: [C 3: (1: id:9 2: p:6)]]]
//│ def c:7 = 14: (fun x:11 -> 13: case 7: x:11 of {C a:12 -> 12: case 8: a:12 of {C b:13 -> 11: (9: c:7 10: b:13)}})
//│ def id2:8 = 16: (fun z:14 -> 15: z:14)
//│ def id:9 = 20: (fun y:15 -> 19: (17: id2:8 18: y:15))
//│ def id3:10 = 22: (fun d:16 -> 21: d:16)
//│ 27: (23: c:7 26: (24: id3:10 25: p:6))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (
//│   (p:6^25 ⋅ p:6^2 ⋅ p:6^2 ⋅ p:6^2 ⋅ ɛ, C((ɛ, C((ɛ, C((ɛ, 5'3_callres))))))),
//│   (c:7^23 ⋅ c:7^9 ⋅ c:7^9 ⋅ c:7^9 ⋅ c:7^9 ⋅ ɛ, 7'a)
//│ ) :::: ((p:6^25 ⋅ p:6^2 ⋅ ɛ, C((ɛ, C((ɛ, C((ɛ, 5'3_callres))))))), (c:7^23 ⋅ c:7^9 ⋅ ɛ, 7'a))
//│ ------- defInstance -------
//│ p:6^25 ⋅ p:6^2 ⋅ ɛ ==> c:7^23 ⋅ c:7^9 ⋅ ɛ:
//│ 	6: [C [C [C (id:9 p:6)]]]  <-->  12: case a:12 of {C b:13 -> (c:7 b:13)}
//│ p:6^25 ⋅ ɛ ==> c:7^23 ⋅ c:7^9 ⋅ ɛ:
//│ 	4: [C (id:9 p:6)]  <-->  13: case x:11 of {C a:12 -> case a:12 of {C b:13 -> (c:7 b:13)}}
//│ p:6^25 ⋅ p:6^2 ⋅ ɛ ==> c:7^23 ⋅ c:7^9 ⋅ c:7^9 ⋅ ɛ:
//│ 	4: [C (id:9 p:6)]  <-->  12: case a:12 of {C b:13 -> (c:7 b:13)}
//│ 	5: [C [C (id:9 p:6)]]  <-->  13: case x:11 of {C a:12 -> case a:12 of {C b:13 -> (c:7 b:13)}}
//│ p:6^25 ⋅ ɛ ==> c:7^23 ⋅ ɛ:
//│ 	5: [C [C (id:9 p:6)]]  <-->  12: case a:12 of {C b:13 -> (c:7 b:13)}
//│ 	6: [C [C [C (id:9 p:6)]]]  <-->  13: case x:11 of {C a:12 -> case a:12 of {C b:13 -> (c:7 b:13)}}
//│ p:6^25 ⋅ p:6^2 ⋅ p:6^2 ⋅ ɛ ==> c:7^23 ⋅ c:7^9 ⋅ c:7^9 ⋅ c:7^9 ⋅ ɛ:
//│ 	5: [C [C (id:9 p:6)]]  <-->  12: case a:12 of {C b:13 -> (c:7 b:13)}
//│ 	6: [C [C [C (id:9 p:6)]]]  <-->  13: case x:11 of {C a:12 -> case a:12 of {C b:13 -> (c:7 b:13)}}
//│ p:6^25 ⋅ p:6^2 ⋅ p:6^2 ⋅ ɛ ==> c:7^23 ⋅ c:7^9 ⋅ c:7^9 ⋅ c:7^9 ⋅ c:7^9 ⋅ ɛ:
//│ 	4: [C (id:9 p:6)]  <-->  13: case x:11 of {C a:12 -> case a:12 of {C b:13 -> (c:7 b:13)}}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:6 = [C [C [C (id:9 p:6)]]]
//│ def c:7 = (fun x:11 -> case x:11 of {C a:12 -> case a:12 of {C b:13 -> (c:7 b:13)}})
//│ def id2:8 = (fun z:14 -> z:14)
//│ def id:9 = (fun y:15 -> (id2:8 y:15))
//│ def id3:10 = (fun d:16 -> d:16)
//│ def c'7'23_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9:35 = "RECURSE_TOO_LONG"
//│ def c'7'23_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9:33 = (fun x:11 -> case x:11 of {C a:12 -> case a:12 of {C b:13 -> (c'7'23_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9:34 b:13)}})
//│ def p'6'25_id'9'1:21 = (fun y:15 -> (p'6'25_id'9'1_id2'8'17:22 y:15))
//│ def c'7'23_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9:34 = (fun x:11 -> case x:11 of {C a:12 -> case a:12 of {C b:13 -> (c'7'23_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9:35 b:13)}})
//│ def p'6'25_p'6'2_id'9'1:26 = (fun y:15 -> (p'6'25_p'6'2_id'9'1_id2'8'17:27 y:15))
//│ def p'6'25_p'6'2_p'6'2_id'9'1:36 = (fun y:15 -> (p'6'25_p'6'2_p'6'2_id'9'1_id2'8'17:37 y:15))
//│ def p'6'25_p'6'2_p'6'2:28 = 
//│ 	let a:12 = 
//│ 		let b:13 = 
//│ 			let a:12 = (p'6'25_p'6'2_p'6'2_id'9'1:36 p'6'25_p'6'2:23) in case a:12 of {C b:13 -> (c'7'23_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9:29 b:13)} 
//│ 		in (c'7'23_c'7'9:20 b:13) 
//│ 	in a:12
//│ def c'7'23_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9:31 = (fun x:11 -> case x:11 of {C a:12 -> case a:12 of {C b:13 -> (c'7'23_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9:32 b:13)}})
//│ def c'7'23_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9:32 = (fun x:11 -> case x:11 of {C a:12 -> case a:12 of {C b:13 -> (c'7'23_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9:33 b:13)}})
//│ def p'6'25_id'9'1_id2'8'17:22 = (fun z:14 -> z:14)
//│ def id3'10'24:18 = (fun d:16 -> d:16)
//│ def c'7'23_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9:30 = (fun x:11 -> case x:11 of {C a:12 -> case a:12 of {C b:13 -> (c'7'23_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9:31 b:13)}})
//│ def c'7'23_c'7'9_c'7'9:24 = (fun x:11 -> x:11)
//│ def c'7'23_c'7'9_c'7'9_c'7'9:25 = (fun x:11 -> x:11)
//│ def c'7'23:17 = (fun x:11 -> x:11)
//│ def c'7'23_c'7'9:20 = (fun x:11 -> x:11)
//│ def p'6'25_p'6'2:23 = 
//│ 	let b:13 = 
//│ 		let a:12 = 
//│ 			let b:13 = (p'6'25_p'6'2_id'9'1:26 p'6'25_p'6'2_p'6'2:28) in (c'7'23_c'7'9_c'7'9_c'7'9:25 b:13) 
//│ 		in a:12 
//│ 	in (c'7'23_c'7'9_c'7'9:24 b:13)
//│ def c'7'23_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9:29 = (fun x:11 -> case x:11 of {C a:12 -> case a:12 of {C b:13 -> (c'7'23_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9_c'7'9:30 b:13)}})
//│ def p'6'25_p'6'2_id'9'1_id2'8'17:27 = (fun z:14 -> z:14)
//│ def p'6'25_p'6'2_p'6'2_id'9'1_id2'8'17:37 = (fun z:14 -> z:14)
//│ def p'6'25:19 = 
//│ 	let a:12 = 
//│ 		let b:13 = 
//│ 			let a:12 = (p'6'25_id'9'1:21 p'6'25_p'6'2:23) in a:12 
//│ 		in (c'7'23_c'7'9:20 b:13) 
//│ 	in a:12
//│ (c'7'23:17 (id3'10'24:18 p'6'25:19))
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


let rec p = C(C(p))
fun c(x) = if x is
    C(a) then c(a)
fun id2(yy) = yy
fun id(y) = id2(y)
c(id(p))
//│ |#let| |#rec| |p| |#=| |C|(|C|(|p|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |id2|(|yy|)| |#=| |yy|↵|#fun| |id|(|y|)| |#=| |id2|(|y|)|↵|c|(|id|(|p|)|)|
//│ Parsed: {let rec p = C (C (p,),); fun c = x, => if x is ‹(C (a,)) then c (a,)›; fun id2 = yy, => yy; fun id = y, => id2 (y,); c (id (p,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 3: [C 2: [C 1: p:6]]
//│ def c:7 = 9: (fun x:10 -> 8: case 4: x:10 of {C a:11 -> 7: (5: c:7 6: a:11)})
//│ def id2:8 = 11: (fun yy:12 -> 10: yy:12)
//│ def id:9 = 15: (fun y:13 -> 14: (12: id2:8 13: y:13))
//│ 20: (16: c:7 19: (17: id:9 18: p:6))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((p:6^18 ⋅ p:6^1 ⋅ ɛ, C((ɛ, C((p:6^1 ⋅ ɛ, 0'p))))), (c:7^16 ⋅ c:7^5 ⋅ c:7^5 ⋅ ɛ, 4'x)) :::: ((p:6^18 ⋅ ɛ, C((ɛ, C((p:6^1 ⋅ ɛ, 0'p))))), (c:7^16 ⋅ ɛ, 4'x))
//│ ------- defInstance -------
//│ p:6^18 ⋅ ɛ ==> c:7^16 ⋅ ɛ:
//│ 	3: [C [C p:6]]  <-->  8: case x:10 of {C a:11 -> (c:7 a:11)}
//│ p:6^18 ⋅ ɛ ==> c:7^16 ⋅ c:7^5 ⋅ ɛ:
//│ 	2: [C p:6]  <-->  8: case x:10 of {C a:11 -> (c:7 a:11)}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:6 = [C [C p:6]]
//│ def c:7 = (fun x:10 -> case x:10 of {C a:11 -> (c:7 a:11)})
//│ def id2:8 = (fun yy:12 -> yy:12)
//│ def id:9 = (fun y:13 -> (id2:8 y:13))
//│ def c'7'16_c'7'5:18 = (fun x:10 -> x:10)
//│ def id'9'17:15 = (fun y:13 -> (id'9'17_id2'8'12:16 y:13))
//│ def p'6'18:17 = 
//│ 	let a:11 = 
//│ 		let a:11 = p'6'18:17 in (c'7'16:14 a:11) 
//│ 	in (c'7'16_c'7'5:18 a:11)
//│ def c'7'16:14 = (fun x:10 -> x:10)
//│ def id'9'17_id2'8'12:16 = (fun yy:12 -> yy:12)
//│ (c'7'16:14 (id'9'17:15 p'6'18:17))
//│ <<<<<<<<<< Rewritten <<<<<<<<<<

fun sum(ls) = if ls is
    C(h, t) then S(N, sum(t))
fun mapa(lsa) = if lsa is
    C(ha, ta) then C(primitive(ha), mapa(ta))
fun mapb(lsb) = if lsb is
    C(hb, tb) then C(primitive(hb), mapb(tb))
sum(mapa(mapb(primitive)))
//│ |#fun| |sum|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |S|(|N|,| |sum|(|t|)|)|←|↵|#fun| |mapa|(|lsa|)| |#=| |#if| |lsa| |is|→|C|(|ha|,| |ta|)| |#then| |C|(|primitive|(|ha|)|,| |mapa|(|ta|)|)|←|↵|#fun| |mapb|(|lsb|)| |#=| |#if| |lsb| |is|→|C|(|hb|,| |tb|)| |#then| |C|(|primitive|(|hb|)|,| |mapb|(|tb|)|)|←|↵|sum|(|mapa|(|mapb|(|primitive|)|)|)|
//│ Parsed: {fun sum = ls, => if ls is ‹(C (h, t,)) then S (N, sum (t,),)›; fun mapa = lsa, => if lsa is ‹(C (ha, ta,)) then C (primitive (ha,), mapa (ta,),)›; fun mapb = lsb, => if lsb is ‹(C (hb, tb,)) then C (primitive (hb,), mapb (tb,),)›; sum (mapa (mapb (primitive,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def sum:6 = 8: (fun ls:9 -> 7: case 1: ls:9 of {C h:10 t:11 -> 6: [S 2: [N] 5: (3: sum:6 4: t:11)]})
//│ def mapa:7 = 18: (fun lsa:12 -> 17: case 9: lsa:12 of {C ha:13 ta:14 -> 16: [C 12: (10: primitive:3 11: ha:13) 15: (13: mapa:7 14: ta:14)]})
//│ def mapb:8 = 28: (fun lsb:15 -> 27: case 19: lsb:15 of {C hb:16 tb:17 -> 26: [C 22: (20: primitive:3 21: hb:16) 25: (23: mapb:8 24: tb:17)]})
//│ 35: (29: sum:6 34: (30: mapa:7 33: (31: mapb:8 32: primitive:3)))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (
//│   (mapa:7^30 ⋅ mapa:7^13 ⋅ mapa:7^13 ⋅ ɛ, C((ɛ, 11'12_callres), (ɛ, 12'15_callres))),
//│   (sum:6^29 ⋅ sum:6^3 ⋅ sum:6^3 ⋅ ɛ, 3'ls)
//│ ) :::: (
//│   (mapa:7^30 ⋅ mapa:7^13 ⋅ ɛ, C((ɛ, 11'12_callres), (ɛ, 12'15_callres))),
//│   (sum:6^29 ⋅ sum:6^3 ⋅ ɛ, 3'ls)
//│ )
//│ (
//│   (mapb:8^31 ⋅ mapb:8^23 ⋅ mapb:8^23 ⋅ ɛ, C((ɛ, 17'22_callres), (ɛ, 18'25_callres))),
//│   (mapa:7^30 ⋅ mapa:7^13 ⋅ mapa:7^13 ⋅ ɛ, 8'lsa)
//│ ) :::: (
//│   (mapb:8^31 ⋅ mapb:8^23 ⋅ ɛ, C((ɛ, 17'22_callres), (ɛ, 18'25_callres))),
//│   (mapa:7^30 ⋅ mapa:7^13 ⋅ ɛ, 8'lsa)
//│ )
//│ ------- defInstance -------
//│ mapa:7^30 ⋅ mapa:7^13 ⋅ ɛ ==> sum:6^29 ⋅ sum:6^3 ⋅ ɛ:
//│ 	16: [C (primitive:3 ha:13) (mapa:7 ta:14)]  <-->  7: case ls:9 of {C h:10 t:11 -> [S [N] (sum:6 t:11)]}
//│ mapa:7^30 ⋅ ɛ ==> sum:6^29 ⋅ ɛ:
//│ 	16: [C (primitive:3 ha:13) (mapa:7 ta:14)]  <-->  7: case ls:9 of {C h:10 t:11 -> [S [N] (sum:6 t:11)]}
//│ mapb:8^31 ⋅ ɛ ==> mapa:7^30 ⋅ ɛ:
//│ 	26: [C (primitive:3 hb:16) (mapb:8 tb:17)]  <-->  17: case lsa:12 of {C ha:13 ta:14 -> [C (primitive:3 ha:13) (mapa:7 ta:14)]}
//│ mapb:8^31 ⋅ mapb:8^23 ⋅ ɛ ==> mapa:7^30 ⋅ mapa:7^13 ⋅ ɛ:
//│ 	26: [C (primitive:3 hb:16) (mapb:8 tb:17)]  <-->  17: case lsa:12 of {C ha:13 ta:14 -> [C (primitive:3 ha:13) (mapa:7 ta:14)]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def sum:6 = (fun ls:9 -> case ls:9 of {C h:10 t:11 -> [S [N] (sum:6 t:11)]})
//│ def mapa:7 = (fun lsa:12 -> case lsa:12 of {C ha:13 ta:14 -> [C (primitive:3 ha:13) (mapa:7 ta:14)]})
//│ def mapb:8 = (fun lsb:15 -> case lsb:15 of {C hb:16 tb:17 -> [C (primitive:3 hb:16) (mapb:8 tb:17)]})
//│ def mapa'7'30_mapa'7'13:22 = (fun lsa:12 -> lsa:12)
//│ def mapa'7'30:19 = (fun lsa:12 -> lsa:12)
//│ def mapb'8'31:20 = (fun lsb:15 -> case lsb:15 of {C hb:16 tb:17 -> 
//│ 	let ha:13 = (primitive:3 hb:16) in 
//│ 	let ta:14 = (mapb'8'31_mapb'8'23:23 tb:17) in 
//│ 	let h:10 = (primitive:3 ha:13) in 
//│ 	let t:11 = (mapa'7'30_mapa'7'13:22 ta:14) in [S [N] (sum'6'29_sum'6'3:21 t:11)]})
//│ def mapb'8'31_mapb'8'23:23 = (fun lsb:15 -> case lsb:15 of {C hb:16 tb:17 -> 
//│ 	let ha:13 = (primitive:3 hb:16) in 
//│ 	let ta:14 = (mapb'8'31_mapb'8'23:23 tb:17) in 
//│ 	let h:10 = (primitive:3 ha:13) in 
//│ 	let t:11 = (mapa'7'30_mapa'7'13:22 ta:14) in [S [N] (sum'6'29_sum'6'3:21 t:11)]})
//│ def sum'6'29_sum'6'3:21 = (fun ls:9 -> ls:9)
//│ def sum'6'29:18 = (fun ls:9 -> ls:9)
//│ (sum'6'29:18 (mapa'7'30:19 (mapb'8'31:20 primitive:3)))
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


if C(A, B(C)) is
    C(a, b) then D(b)
//│ |#if| |C|(|A|,| |B|(|C|)|)| |is|→|C|(|a|,| |b|)| |#then| |D|(|b|)|←|
//│ Parsed: {if C (A, B (C,),) is ‹(C (a, b,)) then D (b,)›}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ 7: case 4: [C 1: [A] 3: [B 2: [C]]] of {C a:6 b:7 -> 6: [D 5: b:7]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ------- defInstance -------
//│ ɛ ==> ɛ:
//│ 	4: [C [A] [B [C]]]  <-->  7: case [C [A] [B [C]]] of {C a:6 b:7 -> [D b:7]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ 
//│ 	let a:6 = [A] in 
//│ 	let b:7 = [B [C]] in [D b:7]
//│ <<<<<<<<<< Rewritten <<<<<<<<<<
//│


fun id(k) = k
fun id1(x) = id(x)
fun id2(y) = y
fun id3(z) = z
let rec p = C(C(C(id7(C(C(id1(p)))))))
fun c(xx) = if xx is
    C(a) then c(a)
fun id4(k) = k
fun id5(j) = j
fun id6(l) = l
fun id7(i) = i
id6(id4)(c)(id5(id2)(id3(p)))
//│ |#fun| |id|(|k|)| |#=| |k|↵|#fun| |id1|(|x|)| |#=| |id|(|x|)|↵|#fun| |id2|(|y|)| |#=| |y|↵|#fun| |id3|(|z|)| |#=| |z|↵|#let| |#rec| |p| |#=| |C|(|C|(|C|(|id7|(|C|(|C|(|id1|(|p|)|)|)|)|)|)|)|↵|#fun| |c|(|xx|)| |#=| |#if| |xx| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |id4|(|k|)| |#=| |k|↵|#fun| |id5|(|j|)| |#=| |j|↵|#fun| |id6|(|l|)| |#=| |l|↵|#fun| |id7|(|i|)| |#=| |i|↵|id6|(|id4|)|(|c|)|(|id5|(|id2|)|(|id3|(|p|)|)|)|
//│ Parsed: {fun id = k, => k; fun id1 = x, => id (x,); fun id2 = y, => y; fun id3 = z, => z; let rec p = C (C (C (id7 (C (C (id1 (p,),),),),),),); fun c = xx, => if xx is ‹(C (a,)) then c (a,)›; fun id4 = k, => k; fun id5 = j, => j; fun id6 = l, => l; fun id7 = i, => i; id6 (id4,) (c,) (id5 (id2,) (id3 (p,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def id:6 = 2: (fun k:16 -> 1: k:16)
//│ def id1:7 = 6: (fun x:17 -> 5: (3: id:6 4: x:17))
//│ def id2:8 = 8: (fun y:18 -> 7: y:18)
//│ def id3:9 = 10: (fun z:19 -> 9: z:19)
//│ def p:10 = 20: [C 19: [C 18: [C 17: (11: id7:15 16: [C 15: [C 14: (12: id1:7 13: p:10)]])]]]
//│ def c:11 = 26: (fun xx:20 -> 25: case 21: xx:20 of {C a:21 -> 24: (22: c:11 23: a:21)})
//│ def id4:12 = 28: (fun k:22 -> 27: k:22)
//│ def id5:13 = 30: (fun j:23 -> 29: j:23)
//│ def id6:14 = 32: (fun l:24 -> 31: l:24)
//│ def id7:15 = 34: (fun i:25 -> 33: i:25)
//│ 47: (39: (37: (35: id6:14 36: id4:12) 38: c:11) 46: (42: (40: id5:13 41: id2:8) 45: (43: id3:9 44: p:10)))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (
//│   (p:10^44 ⋅ p:10^13 ⋅ p:10^13 ⋅ ɛ, C((ɛ, C((ɛ, C((ɛ, 16'17_callres))))))),
//│   (
//│     c:11^38 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ ɛ,
//│     18'a
//│   )
//│ ) :::: (
//│   (p:10^44 ⋅ p:10^13 ⋅ ɛ, C((ɛ, C((ɛ, C((ɛ, 16'17_callres))))))),
//│   (c:11^38 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ ɛ, 18'a)
//│ )
//│ ------- defInstance -------
//│ p:10^44 ⋅ p:10^13 ⋅ ɛ ==> c:11^38 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ ɛ:
//│ 	15: [C (id1:7 p:10)]  <-->  25: case xx:20 of {C a:21 -> (c:11 a:21)}
//│ p:10^44 ⋅ p:10^13 ⋅ ɛ ==> c:11^38 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ ɛ:
//│ 	20: [C [C [C (id7:15 [C [C (id1:7 p:10)]])]]]  <-->  25: case xx:20 of {C a:21 -> (c:11 a:21)}
//│ p:10^44 ⋅ ɛ ==> c:11^38 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ ɛ:
//│ 	16: [C [C (id1:7 p:10)]]  <-->  25: case xx:20 of {C a:21 -> (c:11 a:21)}
//│ p:10^44 ⋅ p:10^13 ⋅ ɛ ==> c:11^38 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ ɛ:
//│ 	18: [C (id7:15 [C [C (id1:7 p:10)]])]  <-->  25: case xx:20 of {C a:21 -> (c:11 a:21)}
//│ p:10^44 ⋅ p:10^13 ⋅ ɛ ==> c:11^38 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ ɛ:
//│ 	19: [C [C (id7:15 [C [C (id1:7 p:10)]])]]  <-->  25: case xx:20 of {C a:21 -> (c:11 a:21)}
//│ p:10^44 ⋅ ɛ ==> c:11^38 ⋅ ɛ:
//│ 	20: [C [C [C (id7:15 [C [C (id1:7 p:10)]])]]]  <-->  25: case xx:20 of {C a:21 -> (c:11 a:21)}
//│ p:10^44 ⋅ ɛ ==> c:11^38 ⋅ c:11^22 ⋅ c:11^22 ⋅ ɛ:
//│ 	18: [C (id7:15 [C [C (id1:7 p:10)]])]  <-->  25: case xx:20 of {C a:21 -> (c:11 a:21)}
//│ p:10^44 ⋅ p:10^13 ⋅ ɛ ==> c:11^38 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ ɛ:
//│ 	16: [C [C (id1:7 p:10)]]  <-->  25: case xx:20 of {C a:21 -> (c:11 a:21)}
//│ p:10^44 ⋅ ɛ ==> c:11^38 ⋅ c:11^22 ⋅ ɛ:
//│ 	19: [C [C (id7:15 [C [C (id1:7 p:10)]])]]  <-->  25: case xx:20 of {C a:21 -> (c:11 a:21)}
//│ p:10^44 ⋅ ɛ ==> c:11^38 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ c:11^22 ⋅ ɛ:
//│ 	15: [C (id1:7 p:10)]  <-->  25: case xx:20 of {C a:21 -> (c:11 a:21)}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def id:6 = (fun k:16 -> k:16)
//│ def id1:7 = (fun x:17 -> (id:6 x:17))
//│ def id2:8 = (fun y:18 -> y:18)
//│ def id3:9 = (fun z:19 -> z:19)
//│ def p:10 = [C [C [C (id7:15 [C [C (id1:7 p:10)]])]]]
//│ def c:11 = (fun xx:20 -> case xx:20 of {C a:21 -> (c:11 a:21)})
//│ def id4:12 = (fun k:22 -> k:22)
//│ def id5:13 = (fun j:23 -> j:23)
//│ def id6:14 = (fun l:24 -> l:24)
//│ def id7:15 = (fun i:25 -> i:25)
//│ def p'10'44_id1'7'12_id'6'3:40 = (fun k:16 -> k:16)
//│ def id5'13'40:29 = (fun j:23 -> j:23)
//│ def c'11'38_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22:42 = (fun xx:20 -> xx:20)
//│ def id4'12'36:27 = (fun k:22 -> k:22)
//│ def c'11'38_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22:44 = (fun xx:20 -> xx:20)
//│ def c'11'38_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22:43 = (fun xx:20 -> xx:20)
//│ def p'10'44_p'10'13_id1'7'12_id'6'3:49 = (fun k:16 -> k:16)
//│ def p'10'44:32 = 
//│ 	let a:21 = 
//│ 		let a:21 = 
//│ 			let a:21 = (p'10'44_id7'15'11:36 
//│ 				let a:21 = 
//│ 					let a:21 = (p'10'44_id1'7'12:39 p'10'44_p'10'13:41) in (c'11'38_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22:38 a:21) 
//│ 				in (c'11'38_c'11'22_c'11'22_c'11'22_c'11'22:37 a:21)) 
//│ 			in (c'11'38_c'11'22_c'11'22_c'11'22:35 a:21) 
//│ 		in (c'11'38_c'11'22_c'11'22:34 a:21) 
//│ 	in (c'11'38_c'11'22:33 a:21)
//│ def p'10'44_p'10'13_id7'15'11:45 = (fun i:25 -> i:25)
//│ def c'11'38_c'11'22_c'11'22:34 = (fun xx:20 -> xx:20)
//│ def p'10'44_p'10'13_id1'7'12:48 = (fun x:17 -> (p'10'44_p'10'13_id1'7'12_id'6'3:49 x:17))
//│ def id2'8'41:30 = (fun y:18 -> y:18)
//│ def p'10'44_id7'15'11:36 = (fun i:25 -> i:25)
//│ def c'11'38:28 = (fun xx:20 -> xx:20)
//│ def p'10'44_p'10'13:41 = 
//│ 	let a:21 = 
//│ 		let a:21 = 
//│ 			let a:21 = (p'10'44_p'10'13_id7'15'11:45 
//│ 				let a:21 = 
//│ 					let a:21 = (p'10'44_p'10'13_id1'7'12:48 p'10'44_p'10'13:41) in (c'11'38_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22:46 a:21) 
//│ 				in (c'11'38_c'11'22_c'11'22_c'11'22_c'11'22:37 a:21)) 
//│ 			in (c'11'38_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22:44 a:21) 
//│ 		in (c'11'38_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22:43 a:21) 
//│ 	in (c'11'38_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22:42 a:21)
//│ def c'11'38_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22:38 = (fun xx:20 -> xx:20)
//│ def c'11'38_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22:47 = "RECURSE_TOO_LONG"
//│ def p'10'44_id1'7'12:39 = (fun x:17 -> (p'10'44_id1'7'12_id'6'3:40 x:17))
//│ def id6'14'35:26 = (fun l:24 -> l:24)
//│ def c'11'38_c'11'22_c'11'22_c'11'22:35 = (fun xx:20 -> xx:20)
//│ def id3'9'43:31 = (fun z:19 -> z:19)
//│ def c'11'38_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22:46 = (fun xx:20 -> case xx:20 of {C a:21 -> (c'11'38_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22_c'11'22:47 a:21)})
//│ def c'11'38_c'11'22:33 = (fun xx:20 -> xx:20)
//│ def c'11'38_c'11'22_c'11'22_c'11'22_c'11'22:37 = (fun xx:20 -> xx:20)
//│ (((id6'14'35:26 id4'12'36:27) c'11'38:28) ((id5'13'40:29 id2'8'41:30) (id3'9'43:31 p'10'44:32)))
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


let rec p = C(C(C(p)))
fun ca(x) = if x is
    C(a) then cb(a)
fun cb(x) = if x is
    C(b) then ca(b)
ca(p)
//│ |#let| |#rec| |p| |#=| |C|(|C|(|C|(|p|)|)|)|↵|#fun| |ca|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |cb|(|a|)|←|↵|#fun| |cb|(|x|)| |#=| |#if| |x| |is|→|C|(|b|)| |#then| |ca|(|b|)|←|↵|ca|(|p|)|
//│ Parsed: {let rec p = C (C (C (p,),),); fun ca = x, => if x is ‹(C (a,)) then cb (a,)›; fun cb = x, => if x is ‹(C (b,)) then ca (b,)›; ca (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 4: [C 3: [C 2: [C 1: p:6]]]
//│ def ca:7 = 10: (fun x:9 -> 9: case 5: x:9 of {C a:10 -> 8: (6: cb:8 7: a:10)})
//│ def cb:8 = 16: (fun x:11 -> 15: case 11: x:11 of {C b:12 -> 14: (12: ca:7 13: b:12)})
//│ 19: (17: ca:7 18: p:6)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (
//│   (p:6^18 ⋅ p:6^1 ⋅ p:6^1 ⋅ ɛ, C((ɛ, C((ɛ, C((p:6^1 ⋅ ɛ, 0'p))))))),
//│   (ca:7^17 ⋅ cb:8^6 ⋅ ca:7^12 ⋅ cb:8^6 ⋅ ca:7^12 ⋅ cb:8^6 ⋅ ca:7^12 ⋅ ɛ, 3'x)
//│ ) :::: ((p:6^18 ⋅ ɛ, C((ɛ, C((ɛ, C((p:6^1 ⋅ ɛ, 0'p))))))), (ca:7^17 ⋅ ɛ, 3'x))
//│ ------- defInstance -------
//│ p:6^18 ⋅ ɛ ==> ca:7^17 ⋅ ɛ:
//│ 	4: [C [C [C p:6]]]  <-->  9: case x:9 of {C a:10 -> (cb:8 a:10)}
//│ p:6^18 ⋅ p:6^1 ⋅ ɛ ==> ca:7^17 ⋅ cb:8^6 ⋅ ca:7^12 ⋅ cb:8^6 ⋅ ca:7^12 ⋅ cb:8^6 ⋅ ɛ:
//│ 	2: [C p:6]  <-->  15: case x:11 of {C b:12 -> (ca:7 b:12)}
//│ p:6^18 ⋅ p:6^1 ⋅ ɛ ==> ca:7^17 ⋅ cb:8^6 ⋅ ca:7^12 ⋅ cb:8^6 ⋅ ca:7^12 ⋅ ɛ:
//│ 	3: [C [C p:6]]  <-->  9: case x:9 of {C a:10 -> (cb:8 a:10)}
//│ p:6^18 ⋅ p:6^1 ⋅ ɛ ==> ca:7^17 ⋅ cb:8^6 ⋅ ca:7^12 ⋅ cb:8^6 ⋅ ɛ:
//│ 	4: [C [C [C p:6]]]  <-->  15: case x:11 of {C b:12 -> (ca:7 b:12)}
//│ p:6^18 ⋅ ɛ ==> ca:7^17 ⋅ cb:8^6 ⋅ ca:7^12 ⋅ ɛ:
//│ 	2: [C p:6]  <-->  9: case x:9 of {C a:10 -> (cb:8 a:10)}
//│ p:6^18 ⋅ ɛ ==> ca:7^17 ⋅ cb:8^6 ⋅ ɛ:
//│ 	3: [C [C p:6]]  <-->  15: case x:11 of {C b:12 -> (ca:7 b:12)}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:6 = [C [C [C p:6]]]
//│ def ca:7 = (fun x:9 -> case x:9 of {C a:10 -> (cb:8 a:10)})
//│ def cb:8 = (fun x:11 -> case x:11 of {C b:12 -> (ca:7 b:12)})
//│ def p'6'18_p'6'1:18 = 
//│ 	let b:12 = 
//│ 		let a:10 = 
//│ 			let b:12 = p'6'18:14 in (ca'7'17:13 b:12) 
//│ 		in (ca'7'17_cb'8'6_ca'7'12_cb'8'6_ca'7'12_cb'8'6:20 a:10) 
//│ 	in (ca'7'17_cb'8'6_ca'7'12_cb'8'6_ca'7'12:19 b:12)
//│ def p'6'18:14 = 
//│ 	let a:10 = 
//│ 		let b:12 = 
//│ 			let a:10 = p'6'18_p'6'1:18 in (ca'7'17_cb'8'6_ca'7'12_cb'8'6:17 a:10) 
//│ 		in (ca'7'17_cb'8'6_ca'7'12:16 b:12) 
//│ 	in (ca'7'17_cb'8'6:15 a:10)
//│ def ca'7'17_cb'8'6_ca'7'12_cb'8'6:17 = (fun x:11 -> x:11)
//│ def ca'7'17_cb'8'6_ca'7'12:16 = (fun x:9 -> x:9)
//│ def ca'7'17_cb'8'6_ca'7'12_cb'8'6_ca'7'12:19 = (fun x:9 -> x:9)
//│ def ca'7'17:13 = (fun x:9 -> x:9)
//│ def ca'7'17_cb'8'6_ca'7'12_cb'8'6_ca'7'12_cb'8'6:20 = (fun x:11 -> x:11)
//│ def ca'7'17_cb'8'6:15 = (fun x:11 -> x:11)
//│ (ca'7'17:13 p'6'18:14)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


fun c1(x1) = if x1 is
    C(a) then c2(a)
fun c2(x2) = if x2 is
    C(b) then c1(b)
let p1 = C(C(C(p2)))
let p2 = C(p1)
c1(p1)
//│ |#fun| |c1|(|x1|)| |#=| |#if| |x1| |is|→|C|(|a|)| |#then| |c2|(|a|)|←|↵|#fun| |c2|(|x2|)| |#=| |#if| |x2| |is|→|C|(|b|)| |#then| |c1|(|b|)|←|↵|#let| |p1| |#=| |C|(|C|(|C|(|p2|)|)|)|↵|#let| |p2| |#=| |C|(|p1|)|↵|c1|(|p1|)|
//│ Parsed: {fun c1 = x1, => if x1 is ‹(C (a,)) then c2 (a,)›; fun c2 = x2, => if x2 is ‹(C (b,)) then c1 (b,)›; let p1 = C (C (C (p2,),),); let p2 = C (p1,); c1 (p1,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def c1:6 = 6: (fun x1:10 -> 5: case 1: x1:10 of {C a:11 -> 4: (2: c2:7 3: a:11)})
//│ def c2:7 = 12: (fun x2:12 -> 11: case 7: x2:12 of {C b:13 -> 10: (8: c1:6 9: b:13)})
//│ def p1:8 = 16: [C 15: [C 14: [C 13: p2:9]]]
//│ def p2:9 = 18: [C 17: p1:8]
//│ 21: (19: c1:6 20: p1:8)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (
//│   (p1:8^20 ⋅ p2:9^13 ⋅ p1:8^17 ⋅ ɛ, C((ɛ, C((p2:9^13 ⋅ ɛ, 3'p2))))),
//│   (c1:6^19 ⋅ c2:7^2 ⋅ c1:6^8 ⋅ c2:7^2 ⋅ c1:6^8 ⋅ c2:7^2 ⋅ ɛ, 8'x2)
//│ ) :::: ((p1:8^20 ⋅ ɛ, C((ɛ, C((p2:9^13 ⋅ ɛ, 3'p2))))), (c1:6^19 ⋅ c2:7^2 ⋅ ɛ, 8'x2))
//│ ------- defInstance -------
//│ p1:8^20 ⋅ p2:9^13 ⋅ p1:8^17 ⋅ ɛ ==> c1:6^19 ⋅ c2:7^2 ⋅ c1:6^8 ⋅ c2:7^2 ⋅ c1:6^8 ⋅ ɛ:
//│ 	16: [C [C [C p2:9]]]  <-->  5: case x1:10 of {C a:11 -> (c2:7 a:11)}
//│ p1:8^20 ⋅ ɛ ==> c1:6^19 ⋅ ɛ:
//│ 	16: [C [C [C p2:9]]]  <-->  5: case x1:10 of {C a:11 -> (c2:7 a:11)}
//│ p1:8^20 ⋅ ɛ ==> c1:6^19 ⋅ c2:7^2 ⋅ ɛ:
//│ 	15: [C [C p2:9]]  <-->  11: case x2:12 of {C b:13 -> (c1:6 b:13)}
//│ p1:8^20 ⋅ p2:9^13 ⋅ ɛ ==> c1:6^19 ⋅ c2:7^2 ⋅ c1:6^8 ⋅ c2:7^2 ⋅ ɛ:
//│ 	18: [C p1:8]  <-->  11: case x2:12 of {C b:13 -> (c1:6 b:13)}
//│ p1:8^20 ⋅ ɛ ==> c1:6^19 ⋅ c2:7^2 ⋅ c1:6^8 ⋅ ɛ:
//│ 	14: [C p2:9]  <-->  5: case x1:10 of {C a:11 -> (c2:7 a:11)}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def c1:6 = (fun x1:10 -> case x1:10 of {C a:11 -> (c2:7 a:11)})
//│ def c2:7 = (fun x2:12 -> case x2:12 of {C b:13 -> (c1:6 b:13)})
//│ def p1:8 = [C [C [C p2:9]]]
//│ def p2:9 = [C p1:8]
//│ def c1'6'19:14 = (fun x1:10 -> x1:10)
//│ def c1'6'19_c2'7'2:16 = (fun x2:12 -> x2:12)
//│ def c1'6'19_c2'7'2_c1'6'8:17 = (fun x1:10 -> x1:10)
//│ def c1'6'19_c2'7'2_c1'6'8_c2'7'2_c1'6'8:20 = (fun x1:10 -> x1:10)
//│ def c1'6'19_c2'7'2_c1'6'8_c2'7'2:18 = (fun x2:12 -> x2:12)
//│ def p1'8'20:15 = 
//│ 	let a:11 = 
//│ 		let b:13 = 
//│ 			let a:11 = p1'8'20_p2'9'13:19 in (c1'6'19_c2'7'2_c1'6'8_c2'7'2:18 a:11) 
//│ 		in (c1'6'19_c2'7'2_c1'6'8:17 b:13) 
//│ 	in (c1'6'19_c2'7'2:16 a:11)
//│ def p1'8'20_p2'9'13:19 = 
//│ 	let b:13 = p1'8'20:15 in (c1'6'19_c2'7'2_c1'6'8_c2'7'2_c1'6'8:20 b:13)
//│ (c1'6'19:14 p1'8'20:15)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


fun ff(x) = if x is
    K then T
    KK then TT
    KKKK then TTTT
fun map(ls) = if ls is
    C(h, t) then C(ff(h), map(t))
    N then N
let l = C(K, C(KK, C(KKKK, N)))
map(l)
//│ |#fun| |ff|(|x|)| |#=| |#if| |x| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|ff|(|h|)|,| |map|(|t|)|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|l|)|
//│ Parsed: {fun ff = x, => if x is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›; fun map = ls, => if ls is ‹(C (h, t,)) then C (ff (h,), map (t,),); (N) then N›; let l = C (K, C (KK, C (KKKK, N,),),); map (l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def ff:6 = 6: (fun x:9 -> 5: case 1: x:9 of {K -> 2: [T] | KK -> 3: [TT] | KKKK -> 4: [TTTT]})
//│ def map:7 = 17: (fun ls:10 -> 16: case 7: ls:10 of {C h:11 t:12 -> 14: [C 10: (8: ff:6 9: h:11) 13: (11: map:7 12: t:12)] | N -> 15: [N]})
//│ def l:8 = 24: [C 18: [K] 23: [C 19: [KK] 22: [C 20: [KKKK] 21: [N]]]]
//│ 27: (25: map:7 26: l:8)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ------- defInstance -------
//│ l:8^26 ⋅ ɛ ==> map:7^25 ⋅ map:7^11 ⋅ map:7^11 ⋅ ɛ:
//│ 	22: [C [KKKK] [N]]  <-->  16: case ls:10 of {C h:11 t:12 -> [C (ff:6 h:11) (map:7 t:12)] | N -> [N]}
//│ l:8^26 ⋅ ɛ ==> map:7^25 ⋅ map:7^11 ⋅ map:7^11 ⋅ ff:6^8 ⋅ ɛ:
//│ 	20: [KKKK]  <-->  5: case x:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}
//│ l:8^26 ⋅ ɛ ==> map:7^25 ⋅ map:7^11 ⋅ ɛ:
//│ 	23: [C [KK] [C [KKKK] [N]]]  <-->  16: case ls:10 of {C h:11 t:12 -> [C (ff:6 h:11) (map:7 t:12)] | N -> [N]}
//│ l:8^26 ⋅ ɛ ==> map:7^25 ⋅ ff:6^8 ⋅ ɛ:
//│ 	18: [K]  <-->  5: case x:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}
//│ l:8^26 ⋅ ɛ ==> map:7^25 ⋅ map:7^11 ⋅ map:7^11 ⋅ map:7^11 ⋅ ɛ:
//│ 	21: [N]  <-->  16: case ls:10 of {C h:11 t:12 -> [C (ff:6 h:11) (map:7 t:12)] | N -> [N]}
//│ l:8^26 ⋅ ɛ ==> map:7^25 ⋅ ɛ:
//│ 	24: [C [K] [C [KK] [C [KKKK] [N]]]]  <-->  16: case ls:10 of {C h:11 t:12 -> [C (ff:6 h:11) (map:7 t:12)] | N -> [N]}
//│ l:8^26 ⋅ ɛ ==> map:7^25 ⋅ map:7^11 ⋅ ff:6^8 ⋅ ɛ:
//│ 	19: [KK]  <-->  5: case x:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def ff:6 = (fun x:9 -> case x:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]})
//│ def map:7 = (fun ls:10 -> case ls:10 of {C h:11 t:12 -> [C (ff:6 h:11) (map:7 t:12)] | N -> [N]})
//│ def l:8 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map'7'25_ff'6'8:15 = (fun x:9 -> x:9)
//│ def map'7'25_map'7'11_ff'6'8:17 = (fun x:9 -> x:9)
//│ def map'7'25_map'7'11_map'7'11:18 = (fun ls:10 -> ls:10)
//│ def map'7'25:13 = (fun ls:10 -> ls:10)
//│ def map'7'25_map'7'11_map'7'11_map'7'11:20 = (fun ls:10 -> ls:10)
//│ def map'7'25_map'7'11_map'7'11_ff'6'8:19 = (fun x:9 -> x:9)
//│ def map'7'25_map'7'11:16 = (fun ls:10 -> ls:10)
//│ def l'8'26:14 = 
//│ 	let h:11 = [T] in 
//│ 	let t:12 = 
//│ 		let h:11 = [TT] in 
//│ 		let t:12 = 
//│ 			let h:11 = [TTTT] in 
//│ 			let t:12 = [N] in [C (map'7'25_map'7'11_map'7'11_ff'6'8:19 h:11) (map'7'25_map'7'11_map'7'11_map'7'11:20 t:12)] 
//│ 		in [C (map'7'25_map'7'11_ff'6'8:17 h:11) (map'7'25_map'7'11_map'7'11:18 t:12)] 
//│ 	in [C (map'7'25_ff'6'8:15 h:11) (map'7'25_map'7'11:16 t:12)]
//│ (map'7'25:13 l'8'26:14)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


fun map(ls) = if ls is
    C(h, t) then C(
        (if h is
            K then T
            KK then TT
            KKKK then TTTT
        ),
        map(t)
    )
    N then N
let l = C(K, C(KK, C(KKKK, N)))
map(l)
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|→|(|#if| |h| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|)|,|↵|map|(|t|)|←|↵|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|l|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (h, t,)) then C ('(' if h is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›, ')', map (t,),); (N) then N›; let l = C (K, C (KK, C (KKKK, N,),),); map (l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = 13: (fun ls:8 -> 12: case 1: ls:8 of {C h:9 t:10 -> 10: [C 6: case 2: h:9 of {K -> 3: [T] | KK -> 4: [TT] | KKKK -> 5: [TTTT]} 9: (7: map:6 8: t:10)] | N -> 11: [N]})
//│ def l:7 = 20: [C 14: [K] 19: [C 15: [KK] 18: [C 16: [KKKK] 17: [N]]]]
//│ 23: (21: map:6 22: l:7)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ------- defInstance -------
//│ l:7^22 ⋅ ɛ ==> map:6^21 ⋅ map:6^7 ⋅ map:6^7 ⋅ map:6^7 ⋅ ɛ:
//│ 	17: [N]  <-->  12: case ls:8 of {C h:9 t:10 -> [C case h:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]} (map:6 t:10)] | N -> [N]}
//│ l:7^22 ⋅ ɛ ==> map:6^21 ⋅ map:6^7 ⋅ ɛ:
//│ 	15: [KK]  <-->  6: case h:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}
//│ 	19: [C [KK] [C [KKKK] [N]]]  <-->  12: case ls:8 of {C h:9 t:10 -> [C case h:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]} (map:6 t:10)] | N -> [N]}
//│ l:7^22 ⋅ ɛ ==> map:6^21 ⋅ map:6^7 ⋅ map:6^7 ⋅ ɛ:
//│ 	16: [KKKK]  <-->  6: case h:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}
//│ 	18: [C [KKKK] [N]]  <-->  12: case ls:8 of {C h:9 t:10 -> [C case h:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]} (map:6 t:10)] | N -> [N]}
//│ l:7^22 ⋅ ɛ ==> map:6^21 ⋅ ɛ:
//│ 	14: [K]  <-->  6: case h:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}
//│ 	20: [C [K] [C [KK] [C [KKKK] [N]]]]  <-->  12: case ls:8 of {C h:9 t:10 -> [C case h:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]} (map:6 t:10)] | N -> [N]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def map:6 = (fun ls:8 -> case ls:8 of {C h:9 t:10 -> [C case h:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]} (map:6 t:10)] | N -> [N]})
//│ def l:7 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def l'7'22:12 = 
//│ 	let h:9 = [T] in 
//│ 	let t:10 = 
//│ 		let h:9 = [TT] in 
//│ 		let t:10 = 
//│ 			let h:9 = [TTTT] in 
//│ 			let t:10 = [N] in [C h:9 (map'6'21_map'6'7_map'6'7_map'6'7:15 t:10)] 
//│ 		in [C h:9 (map'6'21_map'6'7_map'6'7:14 t:10)] 
//│ 	in [C h:9 (map'6'21_map'6'7:13 t:10)]
//│ def map'6'21_map'6'7_map'6'7_map'6'7:15 = (fun ls:8 -> ls:8)
//│ def map'6'21_map'6'7_map'6'7:14 = (fun ls:8 -> ls:8)
//│ def map'6'21_map'6'7:13 = (fun ls:8 -> ls:8)
//│ def map'6'21:11 = (fun ls:8 -> ls:8)
//│ (map'6'21:11 l'7'22:12)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


fun sum(ls) = if ls is
    C(h, t) then S(N, sum(t))
    N then N
fun mapa(lsa) = if lsa is
    C(ha, ta) then C(primitive(ha), mapa(ta))
    N then N
fun mapb(lsb) = if lsb is
    C(hb, tb) then C(primitive(hb), mapb(tb))
    N then N
sum(mapa(mapb(primitive)))
//│ |#fun| |sum|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |S|(|N|,| |sum|(|t|)|)|↵|N| |#then| |N|←|↵|#fun| |mapa|(|lsa|)| |#=| |#if| |lsa| |is|→|C|(|ha|,| |ta|)| |#then| |C|(|primitive|(|ha|)|,| |mapa|(|ta|)|)|↵|N| |#then| |N|←|↵|#fun| |mapb|(|lsb|)| |#=| |#if| |lsb| |is|→|C|(|hb|,| |tb|)| |#then| |C|(|primitive|(|hb|)|,| |mapb|(|tb|)|)|↵|N| |#then| |N|←|↵|sum|(|mapa|(|mapb|(|primitive|)|)|)|
//│ Parsed: {fun sum = ls, => if ls is ‹(C (h, t,)) then S (N, sum (t,),); (N) then N›; fun mapa = lsa, => if lsa is ‹(C (ha, ta,)) then C (primitive (ha,), mapa (ta,),); (N) then N›; fun mapb = lsb, => if lsb is ‹(C (hb, tb,)) then C (primitive (hb,), mapb (tb,),); (N) then N›; sum (mapa (mapb (primitive,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def sum:6 = 9: (fun ls:9 -> 8: case 1: ls:9 of {C h:10 t:11 -> 6: [S 2: [N] 5: (3: sum:6 4: t:11)] | N -> 7: [N]})
//│ def mapa:7 = 20: (fun lsa:12 -> 19: case 10: lsa:12 of {C ha:13 ta:14 -> 17: [C 13: (11: primitive:3 12: ha:13) 16: (14: mapa:7 15: ta:14)] | N -> 18: [N]})
//│ def mapb:8 = 31: (fun lsb:15 -> 30: case 21: lsb:15 of {C hb:16 tb:17 -> 28: [C 24: (22: primitive:3 23: hb:16) 27: (25: mapb:8 26: tb:17)] | N -> 29: [N]})
//│ 38: (32: sum:6 37: (33: mapa:7 36: (34: mapb:8 35: primitive:3)))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (
//│   (mapa:7^33 ⋅ mapa:7^14 ⋅ mapa:7^14 ⋅ ɛ, C((ɛ, 11'13_callres), (ɛ, 12'16_callres))),
//│   (sum:6^32 ⋅ sum:6^3 ⋅ sum:6^3 ⋅ ɛ, 3'ls)
//│ ) :::: (
//│   (mapa:7^33 ⋅ mapa:7^14 ⋅ ɛ, C((ɛ, 11'13_callres), (ɛ, 12'16_callres))),
//│   (sum:6^32 ⋅ sum:6^3 ⋅ ɛ, 3'ls)
//│ )
//│ (
//│   (mapb:8^34 ⋅ mapb:8^25 ⋅ mapb:8^25 ⋅ ɛ, C((ɛ, 17'24_callres), (ɛ, 18'27_callres))),
//│   (mapa:7^33 ⋅ mapa:7^14 ⋅ mapa:7^14 ⋅ ɛ, 8'lsa)
//│ ) :::: (
//│   (mapb:8^34 ⋅ mapb:8^25 ⋅ ɛ, C((ɛ, 17'24_callres), (ɛ, 18'27_callres))),
//│   (mapa:7^33 ⋅ mapa:7^14 ⋅ ɛ, 8'lsa)
//│ )
//│ ------- defInstance -------
//│ mapb:8^34 ⋅ mapb:8^25 ⋅ mapb:8^25 ⋅ ɛ ==> mapa:7^33 ⋅ mapa:7^14 ⋅ mapa:7^14 ⋅ ɛ:
//│ 	29: [N]  <-->  19: case lsa:12 of {C ha:13 ta:14 -> [C (primitive:3 ha:13) (mapa:7 ta:14)] | N -> [N]}
//│ mapb:8^34 ⋅ mapb:8^25 ⋅ ɛ ==> mapa:7^33 ⋅ mapa:7^14 ⋅ ɛ:
//│ 	28: [C (primitive:3 hb:16) (mapb:8 tb:17)]  <-->  19: case lsa:12 of {C ha:13 ta:14 -> [C (primitive:3 ha:13) (mapa:7 ta:14)] | N -> [N]}
//│ 	29: [N]  <-->  19: case lsa:12 of {C ha:13 ta:14 -> [C (primitive:3 ha:13) (mapa:7 ta:14)] | N -> [N]}
//│ mapa:7^33 ⋅ ɛ ==> sum:6^32 ⋅ ɛ:
//│ 	17: [C (primitive:3 ha:13) (mapa:7 ta:14)]  <-->  8: case ls:9 of {C h:10 t:11 -> [S [N] (sum:6 t:11)] | N -> [N]}
//│ 	18: [N]  <-->  8: case ls:9 of {C h:10 t:11 -> [S [N] (sum:6 t:11)] | N -> [N]}
//│ mapa:7^33 ⋅ mapa:7^14 ⋅ ɛ ==> sum:6^32 ⋅ sum:6^3 ⋅ ɛ:
//│ 	17: [C (primitive:3 ha:13) (mapa:7 ta:14)]  <-->  8: case ls:9 of {C h:10 t:11 -> [S [N] (sum:6 t:11)] | N -> [N]}
//│ 	18: [N]  <-->  8: case ls:9 of {C h:10 t:11 -> [S [N] (sum:6 t:11)] | N -> [N]}
//│ mapb:8^34 ⋅ ɛ ==> mapa:7^33 ⋅ ɛ:
//│ 	28: [C (primitive:3 hb:16) (mapb:8 tb:17)]  <-->  19: case lsa:12 of {C ha:13 ta:14 -> [C (primitive:3 ha:13) (mapa:7 ta:14)] | N -> [N]}
//│ 	29: [N]  <-->  19: case lsa:12 of {C ha:13 ta:14 -> [C (primitive:3 ha:13) (mapa:7 ta:14)] | N -> [N]}
//│ mapa:7^33 ⋅ mapa:7^14 ⋅ mapa:7^14 ⋅ ɛ ==> sum:6^32 ⋅ sum:6^3 ⋅ sum:6^3 ⋅ ɛ:
//│ 	18: [N]  <-->  8: case ls:9 of {C h:10 t:11 -> [S [N] (sum:6 t:11)] | N -> [N]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def sum:6 = (fun ls:9 -> case ls:9 of {C h:10 t:11 -> [S [N] (sum:6 t:11)] | N -> [N]})
//│ def mapa:7 = (fun lsa:12 -> case lsa:12 of {C ha:13 ta:14 -> [C (primitive:3 ha:13) (mapa:7 ta:14)] | N -> [N]})
//│ def mapb:8 = (fun lsb:15 -> case lsb:15 of {C hb:16 tb:17 -> [C (primitive:3 hb:16) (mapb:8 tb:17)] | N -> [N]})
//│ def mapb'8'34_mapb'8'25:23 = (fun lsb:15 -> case lsb:15 of {C hb:16 tb:17 -> 
//│ 	let ha:13 = (primitive:3 hb:16) in 
//│ 	let ta:14 = (mapb'8'34_mapb'8'25:23 tb:17) in 
//│ 	let h:10 = (primitive:3 ha:13) in 
//│ 	let t:11 = (mapa'7'33_mapa'7'14:22 ta:14) in [S [N] (sum'6'32_sum'6'3:21 t:11)] | N -> [N]})
//│ def mapa'7'33_mapa'7'14:22 = (fun lsa:12 -> lsa:12)
//│ def sum'6'32_sum'6'3:21 = (fun ls:9 -> ls:9)
//│ def sum'6'32:18 = (fun ls:9 -> ls:9)
//│ def mapa'7'33:19 = (fun lsa:12 -> lsa:12)
//│ def mapb'8'34:20 = (fun lsb:15 -> case lsb:15 of {C hb:16 tb:17 -> 
//│ 	let ha:13 = (primitive:3 hb:16) in 
//│ 	let ta:14 = (mapb'8'34_mapb'8'25:23 tb:17) in 
//│ 	let h:10 = (primitive:3 ha:13) in 
//│ 	let t:11 = (mapa'7'33_mapa'7'14:22 ta:14) in [S [N] (sum'6'32_sum'6'3:21 t:11)] | N -> [N]})
//│ (sum'6'32:18 (mapa'7'33:19 (mapb'8'34:20 primitive:3)))
//│ <<<<<<<<<< Rewritten <<<<<<<<<<



let rec p = C(p)
fun c(x) = if x is
    C(a) then c(a)
fun main(cc) = cc(p)
main(c)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |main|(|cc|)| |#=| |cc|(|p|)|↵|main|(|c|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then c (a,)›; fun main = cc, => cc (p,); main (c,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 2: [C 1: p:6]
//│ def c:7 = 8: (fun x:9 -> 7: case 3: x:9 of {C a:10 -> 6: (4: c:7 5: a:10)})
//│ def main:8 = 12: (fun cc:11 -> 11: (9: cc:11 10: p:6))
//│ 15: (13: main:8 14: c:7)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((main:8^13 ⋅ p:6^10 ⋅ p:6^1 ⋅ ɛ, C((p:6^1 ⋅ ɛ, 0'p))), (c:7^14 ⋅ c:7^4 ⋅ ɛ, 3'x)) :::: ((main:8^13 ⋅ p:6^10 ⋅ ɛ, C((p:6^1 ⋅ ɛ, 0'p))), (c:7^14 ⋅ ɛ, 3'x))
//│ ------- defInstance -------
//│ main:8^13 ⋅ p:6^10 ⋅ ɛ ==> c:7^14 ⋅ ɛ:
//│ 	2: [C p:6]  <-->  7: case x:9 of {C a:10 -> (c:7 a:10)}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:6 = [C p:6]
//│ def c:7 = (fun x:9 -> case x:9 of {C a:10 -> (c:7 a:10)})
//│ def main:8 = (fun cc:11 -> (cc:11 p:6))
//│ def main'8'13:12 = (fun cc:11 -> (cc:11 main'8'13_p'6'10:13))
//│ def main'8'13_p'6'10:13 = 
//│ 	let a:10 = main'8'13_p'6'10:13 in (c'7'14:14 a:10)
//│ def c'7'14:14 = (fun x:9 -> x:9)
//│ (main'8'13:12 c'7'14:14)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


// this path seems also to be sensible
let rec p = C(p)
fun c(x) = if x is
    C(a) then c(a)
fun main(pp) = if pp is
    C(b) then if b is
        C(d) then c(d)
main(p)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |main|(|pp|)| |#=| |#if| |pp| |is|→|C|(|b|)| |#then| |#if| |b| |is|→|C|(|d|)| |#then| |c|(|d|)|←|←|↵|main|(|p|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then c (a,)›; fun main = pp, => if pp is ‹(C (b,)) then if b is ‹(C (d,)) then c (d,)››; main (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 2: [C 1: p:6]
//│ def c:7 = 8: (fun x:9 -> 7: case 3: x:9 of {C a:10 -> 6: (4: c:7 5: a:10)})
//│ def main:8 = 16: (fun pp:11 -> 15: case 9: pp:11 of {C b:12 -> 14: case 10: b:12 of {C d:13 -> 13: (11: c:7 12: d:13)}})
//│ 19: (17: main:8 18: p:6)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((p:6^18 ⋅ p:6^1 ⋅ p:6^1 ⋅ p:6^1 ⋅ ɛ, C((p:6^1 ⋅ ɛ, 0'p))), (main:8^17 ⋅ c:7^11 ⋅ c:7^4 ⋅ ɛ, 3'x)) :::: ((p:6^18 ⋅ p:6^1 ⋅ p:6^1 ⋅ ɛ, C((p:6^1 ⋅ ɛ, 0'p))), (main:8^17 ⋅ c:7^11 ⋅ ɛ, 3'x))
//│ ------- defInstance -------
//│ p:6^18 ⋅ p:6^1 ⋅ ɛ ==> main:8^17 ⋅ ɛ:
//│ 	2: [C p:6]  <-->  14: case b:12 of {C d:13 -> (c:7 d:13)}
//│ p:6^18 ⋅ p:6^1 ⋅ p:6^1 ⋅ ɛ ==> main:8^17 ⋅ c:7^11 ⋅ ɛ:
//│ 	2: [C p:6]  <-->  7: case x:9 of {C a:10 -> (c:7 a:10)}
//│ p:6^18 ⋅ ɛ ==> main:8^17 ⋅ ɛ:
//│ 	2: [C p:6]  <-->  15: case pp:11 of {C b:12 -> case b:12 of {C d:13 -> (c:7 d:13)}}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:6 = [C p:6]
//│ def c:7 = (fun x:9 -> case x:9 of {C a:10 -> (c:7 a:10)})
//│ def main:8 = (fun pp:11 -> case pp:11 of {C b:12 -> case b:12 of {C d:13 -> (c:7 d:13)}})
//│ def p'6'18_p'6'1:16 = 
//│ 	let d:13 = p'6'18_p'6'1_p'6'1:18 in (main'8'17_c'7'11:17 d:13)
//│ def p'6'18_p'6'1_p'6'1:18 = 
//│ 	let a:10 = p'6'18_p'6'1_p'6'1:18 in (main'8'17_c'7'11:17 a:10)
//│ def p'6'18:15 = 
//│ 	let b:12 = p'6'18_p'6'1:16 in b:12
//│ def main'8'17:14 = (fun pp:11 -> pp:11)
//│ def main'8'17_c'7'11:17 = (fun x:9 -> x:9)
//│ (main'8'17:14 p'6'18:15)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


let rec p = C(p)
let c(x) = if x is
    C(a) then c(a)
fun main(cc, pp) = cc(pp)
main(c, p)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#let| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|#fun| |main|(|cc|,| |pp|)| |#=| |cc|(|pp|)|↵|main|(|c|,| |p|)|
//│ Parsed: {let rec p = C (p,); let c = x, => if x is ‹(C (a,)) then c (a,)›; fun main = cc, pp, => cc (pp,); main (c, p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 2: [C 1: p:6]
//│ def c:7 = 8: (fun x:9 -> 7: case 3: x:9 of {C a:10 -> 6: (4: c:7 5: a:10)})
//│ def main:8 = 13: (fun cc:11 -> 12: (fun pp:12 -> 11: (9: cc:11 10: pp:12)))
//│ 18: (16: (14: main:8 15: c:7) 17: p:6)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((p:6^17 ⋅ p:6^1 ⋅ ɛ, C((p:6^1 ⋅ ɛ, 0'p))), (c:7^15 ⋅ c:7^4 ⋅ ɛ, 3'x)) :::: ((p:6^17 ⋅ ɛ, C((p:6^1 ⋅ ɛ, 0'p))), (c:7^15 ⋅ ɛ, 3'x))
//│ ------- defInstance -------
//│ p:6^17 ⋅ ɛ ==> c:7^15 ⋅ ɛ:
//│ 	2: [C p:6]  <-->  7: case x:9 of {C a:10 -> (c:7 a:10)}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:6 = [C p:6]
//│ def c:7 = (fun x:9 -> case x:9 of {C a:10 -> (c:7 a:10)})
//│ def main:8 = (fun cc:11 -> (fun pp:12 -> (cc:11 pp:12)))
//│ def c'7'15:14 = (fun x:9 -> x:9)
//│ def p'6'17:15 = 
//│ 	let a:10 = p'6'17:15 in (c'7'15:14 a:10)
//│ def main'8'14:13 = (fun cc:11 -> (fun pp:12 -> (cc:11 pp:12)))
//│ ((main'8'14:13 c'7'15:14) p'6'17:15)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


fun cons(y) = if y is
    C(aa) then cons(aa)
fun a(x) = b(x)
fun b(x) = c(x)
fun c(x) = d(cons, x)
fun d(cc, x) = cc(x)
let p = C(p)
a(p)
//│ |#fun| |cons|(|y|)| |#=| |#if| |y| |is|→|C|(|aa|)| |#then| |cons|(|aa|)|←|↵|#fun| |a|(|x|)| |#=| |b|(|x|)|↵|#fun| |b|(|x|)| |#=| |c|(|x|)|↵|#fun| |c|(|x|)| |#=| |d|(|cons|,| |x|)|↵|#fun| |d|(|cc|,| |x|)| |#=| |cc|(|x|)|↵|#let| |p| |#=| |C|(|p|)|↵|a|(|p|)|
//│ Parsed: {fun cons = y, => if y is ‹(C (aa,)) then cons (aa,)›; fun a = x, => b (x,); fun b = x, => c (x,); fun c = x, => d (cons, x,); fun d = cc, x, => cc (x,); let p = C (p,); a (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def cons:6 = 6: (fun y:12 -> 5: case 1: y:12 of {C aa:13 -> 4: (2: cons:6 3: aa:13)})
//│ def a:7 = 10: (fun x:14 -> 9: (7: b:8 8: x:14))
//│ def b:8 = 14: (fun x:15 -> 13: (11: c:9 12: x:15))
//│ def c:9 = 20: (fun x:16 -> 19: (17: (15: d:10 16: cons:6) 18: x:16))
//│ def d:10 = 25: (fun cc:17 -> 24: (fun x:18 -> 23: (21: cc:17 22: x:18)))
//│ def p:11 = 27: [C 26: p:11]
//│ 30: (28: a:7 29: p:11)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (
//│   (p:11^29 ⋅ p:11^26 ⋅ p:11^26 ⋅ ɛ, C((p:11^26 ⋅ ɛ, 5'p))),
//│   (a:7^28 ⋅ b:8^7 ⋅ c:9^11 ⋅ cons:6^16 ⋅ cons:6^2 ⋅ cons:6^2 ⋅ ɛ, 6'y)
//│ ) :::: (
//│   (p:11^29 ⋅ p:11^26 ⋅ ɛ, C((p:11^26 ⋅ ɛ, 5'p))),
//│   (a:7^28 ⋅ b:8^7 ⋅ c:9^11 ⋅ cons:6^16 ⋅ cons:6^2 ⋅ ɛ, 6'y)
//│ )
//│ ------- defInstance -------
//│ p:11^29 ⋅ p:11^26 ⋅ ɛ ==> a:7^28 ⋅ b:8^7 ⋅ c:9^11 ⋅ cons:6^16 ⋅ cons:6^2 ⋅ ɛ:
//│ 	27: [C p:11]  <-->  5: case y:12 of {C aa:13 -> (cons:6 aa:13)}
//│ p:11^29 ⋅ ɛ ==> a:7^28 ⋅ b:8^7 ⋅ c:9^11 ⋅ cons:6^16 ⋅ ɛ:
//│ 	27: [C p:11]  <-->  5: case y:12 of {C aa:13 -> (cons:6 aa:13)}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def cons:6 = (fun y:12 -> case y:12 of {C aa:13 -> (cons:6 aa:13)})
//│ def a:7 = (fun x:14 -> (b:8 x:14))
//│ def b:8 = (fun x:15 -> (c:9 x:15))
//│ def c:9 = (fun x:16 -> ((d:10 cons:6) x:16))
//│ def d:10 = (fun cc:17 -> (fun x:18 -> (cc:17 x:18)))
//│ def p:11 = [C p:11]
//│ def a'7'28_b'8'7_c'9'11:21 = (fun x:16 -> ((a'7'28_b'8'7_c'9'11_d'10'15:22 a'7'28_b'8'7_c'9'11_cons'6'16:23) x:16))
//│ def a'7'28_b'8'7_c'9'11_cons'6'16_cons'6'2:25 = (fun y:12 -> y:12)
//│ def p'11'29:24 = 
//│ 	let aa:13 = p'11'29_p'11'26:26 in (a'7'28_b'8'7_c'9'11_cons'6'16_cons'6'2:25 aa:13)
//│ def a'7'28_b'8'7_c'9'11_d'10'15:22 = (fun cc:17 -> (fun x:18 -> (cc:17 x:18)))
//│ def a'7'28_b'8'7_c'9'11_cons'6'16:23 = (fun y:12 -> y:12)
//│ def a'7'28_b'8'7:20 = (fun x:15 -> (a'7'28_b'8'7_c'9'11:21 x:15))
//│ def p'11'29_p'11'26:26 = 
//│ 	let aa:13 = p'11'29_p'11'26:26 in (a'7'28_b'8'7_c'9'11_cons'6'16_cons'6'2:25 aa:13)
//│ def a'7'28:19 = (fun x:14 -> (a'7'28_b'8'7:20 x:14))
//│ (a'7'28:19 p'11'29:24)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


let p = C(N)
fun c(x) = if C(x) is
    C(a) then c(a)
c(p)
//│ |#let| |p| |#=| |C|(|N|)|↵|#fun| |c|(|x|)| |#=| |#if| |C|(|x|)| |is|→|C|(|a|)| |#then| |c|(|a|)|←|↵|c|(|p|)|
//│ Parsed: {let p = C (N,); fun c = x, => if C (x,) is ‹(C (a,)) then c (a,)›; c (p,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 2: [C 1: [N]]
//│ def c:7 = 9: (fun x:8 -> 8: case 4: [C 3: x:8] of {C a:9 -> 7: (5: c:7 6: a:9)})
//│ 12: (10: c:7 11: p:6)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((p:6^11 ⋅ ɛ, C((ɛ, N))), (c:7^10 ⋅ c:7^5 ⋅ ɛ, 2'x)) :::: ((p:6^11 ⋅ ɛ, C((ɛ, N))), (c:7^10 ⋅ ɛ, 2'x))
//│ ------- defInstance -------
//│ ɛ ==> ɛ:
//│ 	4: [C x:8]  <-->  8: case [C x:8] of {C a:9 -> (c:7 a:9)}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:6 = [C [N]]
//│ def c:7 = (fun x:8 -> case [C x:8] of {C a:9 -> (c:7 a:9)})
//│ def p'6'11:12 = [C [N]]
//│ def c'7'10_c'7'5:11 = (fun x:8 -> 
//│ 	let a:9 = x:8 in (c'7'10_c'7'5:11 a:9))
//│ def c'7'10:10 = (fun x:8 -> 
//│ 	let a:9 = x:8 in (c'7'10_c'7'5:11 a:9))
//│ (c'7'10:10 p'6'11:12)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


let rec p = C(p)
let q = p
fun c(x) = if x is
    C(a) then a
fun c2(z) = if z is
    C(b) then c2(b)
let main = c(q)
c2(main)
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#let| |q| |#=| |p|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |a|←|↵|#fun| |c2|(|z|)| |#=| |#if| |z| |is|→|C|(|b|)| |#then| |c2|(|b|)|←|↵|#let| |main| |#=| |c|(|q|)|↵|c2|(|main|)|
//│ Parsed: {let rec p = C (p,); let q = p; fun c = x, => if x is ‹(C (a,)) then a›; fun c2 = z, => if z is ‹(C (b,)) then c2 (b,)›; let main = c (q,); c2 (main,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 2: [C 1: p:6]
//│ def q:7 = 3: p:6
//│ def c:8 = 7: (fun x:11 -> 6: case 4: x:11 of {C a:12 -> 5: a:12})
//│ def c2:9 = 13: (fun z:13 -> 12: case 8: z:13 of {C b:14 -> 11: (9: c2:9 10: b:14)})
//│ def main:10 = 16: (14: c:8 15: q:7)
//│ 19: (17: c2:9 18: main:10)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (
//│   (main:10^18 ⋅ q:7^15 ⋅ p:6^3 ⋅ p:6^1 ⋅ p:6^1 ⋅ ɛ, C((p:6^1 ⋅ ɛ, 0'p))),
//│   (c2:9^17 ⋅ c2:9^9 ⋅ ɛ, 8'z)
//│ ) :::: ((main:10^18 ⋅ q:7^15 ⋅ p:6^3 ⋅ p:6^1 ⋅ ɛ, C((p:6^1 ⋅ ɛ, 0'p))), (c2:9^17 ⋅ ɛ, 8'z))
//│ ------- defInstance -------
//│ q:7^15 ⋅ p:6^3 ⋅ ɛ ==> c:8^14 ⋅ ɛ:
//│ 	2: [C p:6]  <-->  6: case x:11 of {C a:12 -> a:12}
//│ main:10^18 ⋅ q:7^15 ⋅ p:6^3 ⋅ p:6^1 ⋅ ɛ ==> c2:9^17 ⋅ ɛ:
//│ 	2: [C p:6]  <-->  12: case z:13 of {C b:14 -> (c2:9 b:14)}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:6 = [C p:6]
//│ def q:7 = p:6
//│ def c:8 = (fun x:11 -> case x:11 of {C a:12 -> a:12})
//│ def c2:9 = (fun z:13 -> case z:13 of {C b:14 -> (c2:9 b:14)})
//│ def main:10 = (c:8 q:7)
//│ def main'10'18_q'7'15_p'6'3:19 = 
//│ 	let a:12 = main'10'18_q'7'15_p'6'3_p'6'1:20 in a:12
//│ def main'10'18_q'7'15:18 = main'10'18_q'7'15_p'6'3:19
//│ def main'10'18_c'8'14:17 = (fun x:11 -> x:11)
//│ def main'10'18:16 = (main'10'18_c'8'14:17 main'10'18_q'7'15:18)
//│ def main'10'18_q'7'15_p'6'3_p'6'1:20 = 
//│ 	let b:14 = main'10'18_q'7'15_p'6'3_p'6'1:20 in (c2'9'17:15 b:14)
//│ def c2'9'17:15 = (fun z:13 -> z:13)
//│ (c2'9'17:15 main'10'18:16)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


let rec p = C(p)
fun c(x) = if x is
    C(a) then a
fun c1(xx) = if xx is
    C(aa) then aa
fun c2(z) = if z is
    C(b) then c2(b)
let main = c(p)
fun id(y) = c1(C(y))
c2(id(main))
//│ |#let| |#rec| |p| |#=| |C|(|p|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|C|(|a|)| |#then| |a|←|↵|#fun| |c1|(|xx|)| |#=| |#if| |xx| |is|→|C|(|aa|)| |#then| |aa|←|↵|#fun| |c2|(|z|)| |#=| |#if| |z| |is|→|C|(|b|)| |#then| |c2|(|b|)|←|↵|#let| |main| |#=| |c|(|p|)|↵|#fun| |id|(|y|)| |#=| |c1|(|C|(|y|)|)|↵|c2|(|id|(|main|)|)|
//│ Parsed: {let rec p = C (p,); fun c = x, => if x is ‹(C (a,)) then a›; fun c1 = xx, => if xx is ‹(C (aa,)) then aa›; fun c2 = z, => if z is ‹(C (b,)) then c2 (b,)›; let main = c (p,); fun id = y, => c1 (C (y,),); c2 (id (main,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def p:6 = 2: [C 1: p:6]
//│ def c:7 = 6: (fun x:12 -> 5: case 3: x:12 of {C a:13 -> 4: a:13})
//│ def c1:8 = 10: (fun xx:14 -> 9: case 7: xx:14 of {C aa:15 -> 8: aa:15})
//│ def c2:9 = 16: (fun z:16 -> 15: case 11: z:16 of {C b:17 -> 14: (12: c2:9 13: b:17)})
//│ def main:10 = 19: (17: c:7 18: p:6)
//│ def id:11 = 24: (fun y:18 -> 23: (20: c1:8 22: [C 21: y:18]))
//│ 29: (25: c2:9 28: (26: id:11 27: main:10))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((main:10^27 ⋅ p:6^18 ⋅ p:6^1 ⋅ p:6^1 ⋅ ɛ, C((p:6^1 ⋅ ɛ, 0'p))), (c2:9^25 ⋅ c2:9^12 ⋅ ɛ, 12'z)) :::: ((main:10^27 ⋅ p:6^18 ⋅ p:6^1 ⋅ ɛ, C((p:6^1 ⋅ ɛ, 0'p))), (c2:9^25 ⋅ ɛ, 12'z))
//│ ------- defInstance -------
//│ main:10^27 ⋅ p:6^18 ⋅ p:6^1 ⋅ ɛ ==> c2:9^25 ⋅ ɛ:
//│ 	2: [C p:6]  <-->  15: case z:16 of {C b:17 -> (c2:9 b:17)}
//│ ɛ ==> c1:8^20 ⋅ ɛ:
//│ 	22: [C y:18]  <-->  9: case xx:14 of {C aa:15 -> aa:15}
//│ p:6^18 ⋅ ɛ ==> c:7^17 ⋅ ɛ:
//│ 	2: [C p:6]  <-->  5: case x:12 of {C a:13 -> a:13}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def p:6 = [C p:6]
//│ def c:7 = (fun x:12 -> case x:12 of {C a:13 -> a:13})
//│ def c1:8 = (fun xx:14 -> case xx:14 of {C aa:15 -> aa:15})
//│ def c2:9 = (fun z:16 -> case z:16 of {C b:17 -> (c2:9 b:17)})
//│ def main:10 = (c:7 p:6)
//│ def id:11 = (fun y:18 -> (c1:8 [C y:18]))
//│ def main'10'27_c'7'17:23 = (fun x:12 -> x:12)
//│ def main'10'27_p'6'18:24 = 
//│ 	let a:13 = main'10'27_p'6'18_p'6'1:25 in a:13
//│ def id'11'26:20 = (fun y:18 -> (id'11'26_c1'8'20:21 
//│ 	let aa:15 = y:18 in aa:15))
//│ def main'10'27_p'6'18_p'6'1:25 = 
//│ 	let b:17 = main'10'27_p'6'18_p'6'1:25 in (c2'9'25:19 b:17)
//│ def id'11'26_c1'8'20:21 = (fun xx:14 -> xx:14)
//│ def c2'9'25:19 = (fun z:16 -> z:16)
//│ def main'10'27:22 = (main'10'27_c'7'17:23 main'10'27_p'6'18:24)
//│ (c2'9'25:19 (id'11'26:20 main'10'27:22))
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


let t = T(K, T(N, L, L), T(N, L, L))
fun c(x) = if x is
    T(n, l, r) then T(
        (if n is
            K then KK
            N then NN
        ),
        c(l),
        c(r)
    )
    L then LL
c(t)
//│ |#let| |t| |#=| |T|(|K|,| |T|(|N|,| |L|,| |L|)|,| |T|(|N|,| |L|,| |L|)|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|T|(|n|,| |l|,| |r|)| |#then| |T|(|→|(|#if| |n| |is|→|K| |#then| |KK|↵|N| |#then| |NN|←|↵|)|,|↵|c|(|l|)|,|↵|c|(|r|)|←|↵|)|↵|L| |#then| |LL|←|↵|c|(|t|)|
//│ Parsed: {let t = T (K, T (N, L, L,), T (N, L, L,),); fun c = x, => if x is ‹(T (n, l, r,)) then T ('(' if n is ‹(K) then KK; (N) then NN›, ')', c (l,), c (r,),); (L) then LL›; c (t,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def t:6 = 10: [T 1: [K] 5: [T 2: [N] 3: [L] 4: [L]] 9: [T 6: [N] 7: [L] 8: [L]]]
//│ def c:7 = 25: (fun x:8 -> 24: case 11: x:8 of {T n:9 l:10 r:11 -> 22: [T 15: case 12: n:9 of {K -> 13: [KK] | N -> 14: [NN]} 18: (16: c:7 17: l:10) 21: (19: c:7 20: r:11)] | L -> 23: [LL]})
//│ 28: (26: c:7 27: t:6)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ------- defInstance -------
//│ t:6^27 ⋅ ɛ ==> c:7^26 ⋅ ɛ:
//│ 	10: [T [K] [T [N] [L] [L]] [T [N] [L] [L]]]  <-->  24: case x:8 of {T n:9 l:10 r:11 -> [T case n:9 of {K -> [KK] | N -> [NN]} (c:7 l:10) (c:7 r:11)] | L -> [LL]}
//│ 	1: [K]  <-->  15: case n:9 of {K -> [KK] | N -> [NN]}
//│ t:6^27 ⋅ ɛ ==> c:7^26 ⋅ c:7^19 ⋅ ɛ:
//│ 	6: [N]  <-->  15: case n:9 of {K -> [KK] | N -> [NN]}
//│ 	9: [T [N] [L] [L]]  <-->  24: case x:8 of {T n:9 l:10 r:11 -> [T case n:9 of {K -> [KK] | N -> [NN]} (c:7 l:10) (c:7 r:11)] | L -> [LL]}
//│ t:6^27 ⋅ ɛ ==> c:7^26 ⋅ c:7^16 ⋅ c:7^19 ⋅ ɛ:
//│ 	4: [L]  <-->  24: case x:8 of {T n:9 l:10 r:11 -> [T case n:9 of {K -> [KK] | N -> [NN]} (c:7 l:10) (c:7 r:11)] | L -> [LL]}
//│ t:6^27 ⋅ ɛ ==> c:7^26 ⋅ c:7^19 ⋅ c:7^16 ⋅ ɛ:
//│ 	7: [L]  <-->  24: case x:8 of {T n:9 l:10 r:11 -> [T case n:9 of {K -> [KK] | N -> [NN]} (c:7 l:10) (c:7 r:11)] | L -> [LL]}
//│ t:6^27 ⋅ ɛ ==> c:7^26 ⋅ c:7^19 ⋅ c:7^19 ⋅ ɛ:
//│ 	8: [L]  <-->  24: case x:8 of {T n:9 l:10 r:11 -> [T case n:9 of {K -> [KK] | N -> [NN]} (c:7 l:10) (c:7 r:11)] | L -> [LL]}
//│ t:6^27 ⋅ ɛ ==> c:7^26 ⋅ c:7^16 ⋅ c:7^16 ⋅ ɛ:
//│ 	3: [L]  <-->  24: case x:8 of {T n:9 l:10 r:11 -> [T case n:9 of {K -> [KK] | N -> [NN]} (c:7 l:10) (c:7 r:11)] | L -> [LL]}
//│ t:6^27 ⋅ ɛ ==> c:7^26 ⋅ c:7^16 ⋅ ɛ:
//│ 	2: [N]  <-->  15: case n:9 of {K -> [KK] | N -> [NN]}
//│ 	5: [T [N] [L] [L]]  <-->  24: case x:8 of {T n:9 l:10 r:11 -> [T case n:9 of {K -> [KK] | N -> [NN]} (c:7 l:10) (c:7 r:11)] | L -> [LL]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def t:6 = [T [K] [T [N] [L] [L]] [T [N] [L] [L]]]
//│ def c:7 = (fun x:8 -> case x:8 of {T n:9 l:10 r:11 -> [T case n:9 of {K -> [KK] | N -> [NN]} (c:7 l:10) (c:7 r:11)] | L -> [LL]})
//│ def c'7'26_c'7'16:14 = (fun x:8 -> x:8)
//│ def c'7'26_c'7'19_c'7'16:16 = (fun x:8 -> x:8)
//│ def c'7'26_c'7'19_c'7'19:17 = (fun x:8 -> x:8)
//│ def t'6'27:13 = 
//│ 	let n:9 = [KK] in 
//│ 	let l:10 = 
//│ 		let n:9 = [NN] in 
//│ 		let l:10 = [LL] in 
//│ 		let r:11 = [LL] in [T n:9 (c'7'26_c'7'16_c'7'16:18 l:10) (c'7'26_c'7'16_c'7'19:19 r:11)] 
//│ 	in 
//│ 	let r:11 = 
//│ 		let n:9 = [NN] in 
//│ 		let l:10 = [LL] in 
//│ 		let r:11 = [LL] in [T n:9 (c'7'26_c'7'19_c'7'16:16 l:10) (c'7'26_c'7'19_c'7'19:17 r:11)] 
//│ 	in [T n:9 (c'7'26_c'7'16:14 l:10) (c'7'26_c'7'19:15 r:11)]
//│ def c'7'26_c'7'19:15 = (fun x:8 -> x:8)
//│ def c'7'26:12 = (fun x:8 -> x:8)
//│ def c'7'26_c'7'16_c'7'16:18 = (fun x:8 -> x:8)
//│ def c'7'26_c'7'16_c'7'19:19 = (fun x:8 -> x:8)
//│ (c'7'26:12 t'6'27:13)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


let aa = T(N, L, L)
let bb = T(N, L, L)
let t = T(K, aa, bb)
fun c(x) = if x is
    T(n, l, r) then T(
        (if n is
            K then KK
            N then NN
        ),
        c(l),
        c(r)
    )
    L then LL
c(t)
//│ |#let| |aa| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |bb| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |t| |#=| |T|(|K|,| |aa|,| |bb|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|T|(|n|,| |l|,| |r|)| |#then| |T|(|→|(|#if| |n| |is|→|K| |#then| |KK|↵|N| |#then| |NN|←|↵|)|,|↵|c|(|l|)|,|↵|c|(|r|)|←|↵|)|↵|L| |#then| |LL|←|↵|c|(|t|)|
//│ Parsed: {let aa = T (N, L, L,); let bb = T (N, L, L,); let t = T (K, aa, bb,); fun c = x, => if x is ‹(T (n, l, r,)) then T ('(' if n is ‹(K) then KK; (N) then NN›, ')', c (l,), c (r,),); (L) then LL›; c (t,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def aa:6 = 4: [T 1: [N] 2: [L] 3: [L]]
//│ def bb:7 = 8: [T 5: [N] 6: [L] 7: [L]]
//│ def t:8 = 12: [T 9: [K] 10: aa:6 11: bb:7]
//│ def c:9 = 27: (fun x:10 -> 26: case 13: x:10 of {T n:11 l:12 r:13 -> 24: [T 17: case 14: n:11 of {K -> 15: [KK] | N -> 16: [NN]} 20: (18: c:9 19: l:12) 23: (21: c:9 22: r:13)] | L -> 25: [LL]})
//│ 30: (28: c:9 29: t:8)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ------- defInstance -------
//│ t:8^29 ⋅ bb:7^11 ⋅ ɛ ==> c:9^28 ⋅ c:9^21 ⋅ c:9^21 ⋅ ɛ:
//│ 	7: [L]  <-->  26: case x:10 of {T n:11 l:12 r:13 -> [T case n:11 of {K -> [KK] | N -> [NN]} (c:9 l:12) (c:9 r:13)] | L -> [LL]}
//│ t:8^29 ⋅ ɛ ==> c:9^28 ⋅ ɛ:
//│ 	12: [T [K] aa:6 bb:7]  <-->  26: case x:10 of {T n:11 l:12 r:13 -> [T case n:11 of {K -> [KK] | N -> [NN]} (c:9 l:12) (c:9 r:13)] | L -> [LL]}
//│ 	9: [K]  <-->  17: case n:11 of {K -> [KK] | N -> [NN]}
//│ t:8^29 ⋅ bb:7^11 ⋅ ɛ ==> c:9^28 ⋅ c:9^21 ⋅ c:9^18 ⋅ ɛ:
//│ 	6: [L]  <-->  26: case x:10 of {T n:11 l:12 r:13 -> [T case n:11 of {K -> [KK] | N -> [NN]} (c:9 l:12) (c:9 r:13)] | L -> [LL]}
//│ t:8^29 ⋅ aa:6^10 ⋅ ɛ ==> c:9^28 ⋅ c:9^18 ⋅ c:9^21 ⋅ ɛ:
//│ 	3: [L]  <-->  26: case x:10 of {T n:11 l:12 r:13 -> [T case n:11 of {K -> [KK] | N -> [NN]} (c:9 l:12) (c:9 r:13)] | L -> [LL]}
//│ t:8^29 ⋅ aa:6^10 ⋅ ɛ ==> c:9^28 ⋅ c:9^18 ⋅ c:9^18 ⋅ ɛ:
//│ 	2: [L]  <-->  26: case x:10 of {T n:11 l:12 r:13 -> [T case n:11 of {K -> [KK] | N -> [NN]} (c:9 l:12) (c:9 r:13)] | L -> [LL]}
//│ t:8^29 ⋅ bb:7^11 ⋅ ɛ ==> c:9^28 ⋅ c:9^21 ⋅ ɛ:
//│ 	5: [N]  <-->  17: case n:11 of {K -> [KK] | N -> [NN]}
//│ 	8: [T [N] [L] [L]]  <-->  26: case x:10 of {T n:11 l:12 r:13 -> [T case n:11 of {K -> [KK] | N -> [NN]} (c:9 l:12) (c:9 r:13)] | L -> [LL]}
//│ t:8^29 ⋅ aa:6^10 ⋅ ɛ ==> c:9^28 ⋅ c:9^18 ⋅ ɛ:
//│ 	1: [N]  <-->  17: case n:11 of {K -> [KK] | N -> [NN]}
//│ 	4: [T [N] [L] [L]]  <-->  26: case x:10 of {T n:11 l:12 r:13 -> [T case n:11 of {K -> [KK] | N -> [NN]} (c:9 l:12) (c:9 r:13)] | L -> [LL]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def aa:6 = [T [N] [L] [L]]
//│ def bb:7 = [T [N] [L] [L]]
//│ def t:8 = [T [K] aa:6 bb:7]
//│ def c:9 = (fun x:10 -> case x:10 of {T n:11 l:12 r:13 -> [T case n:11 of {K -> [KK] | N -> [NN]} (c:9 l:12) (c:9 r:13)] | L -> [LL]})
//│ def t'8'29_aa'6'10:21 = 
//│ 	let n:11 = [NN] in 
//│ 	let l:12 = [LL] in 
//│ 	let r:13 = [LL] in [T n:11 (c'9'28_c'9'18_c'9'18:22 l:12) (c'9'28_c'9'18_c'9'21:23 r:13)]
//│ def c'9'28_c'9'18_c'9'21:23 = (fun x:10 -> x:10)
//│ def c'9'28_c'9'21:17 = (fun x:10 -> x:10)
//│ def t'8'29_bb'7'11:18 = 
//│ 	let n:11 = [NN] in 
//│ 	let l:12 = [LL] in 
//│ 	let r:13 = [LL] in [T n:11 (c'9'28_c'9'21_c'9'18:19 l:12) (c'9'28_c'9'21_c'9'21:20 r:13)]
//│ def c'9'28_c'9'18_c'9'18:22 = (fun x:10 -> x:10)
//│ def c'9'28_c'9'21_c'9'18:19 = (fun x:10 -> x:10)
//│ def t'8'29:15 = 
//│ 	let n:11 = [KK] in 
//│ 	let l:12 = t'8'29_aa'6'10:21 in 
//│ 	let r:13 = t'8'29_bb'7'11:18 in [T n:11 (c'9'28_c'9'18:16 l:12) (c'9'28_c'9'21:17 r:13)]
//│ def c'9'28_c'9'18:16 = (fun x:10 -> x:10)
//│ def c'9'28:14 = (fun x:10 -> x:10)
//│ def c'9'28_c'9'21_c'9'21:20 = (fun x:10 -> x:10)
//│ (c'9'28:14 t'8'29:15)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


fun map(ls) = if ls is
    C(h, t) then f => C(f(h), map(t)(f))
    N then f => N
let l = C(K, N)
map(l)(
    x => if x is
        K then T
)
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |f| |=>| |C|(|f|(|h|)|,| |map|(|t|)|(|f|)|)|↵|N| |#then| |f| |=>| |N|←|↵|#let| |l| |#=| |C|(|K|,| |N|)|↵|map|(|l|)|(|→|x| |=>| |#if| |x| |is|→|K| |#then| |T|←|←|↵|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (h, t,)) then f, => C (f (h,), map (t,) (f,),); (N) then f, => N›; let l = C (K, N,); map (l,) (x, => if x is ‹(K) then T›,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = 15: (fun ls:8 -> 14: case 1: ls:8 of {C h:9 t:10 -> 11: (fun f:11 -> 10: [C 4: (2: f:11 3: h:9) 9: (7: (5: map:6 6: t:10) 8: f:11)]) | N -> 13: (fun f:12 -> 12: [N])})
//│ def l:7 = 18: [C 16: [K] 17: [N]]
//│ 26: (21: (19: map:6 20: l:7) 25: (fun x:13 -> 24: case 22: x:13 of {K -> 23: [T]}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((ɛ, (ɛ, 12'x) => ((ɛ, 13'24_matchres))), (map:6^19 ⋅ map:6^5 ⋅ map:6^5 ⋅ ɛ, 5'f)) :::: ((ɛ, (ɛ, 12'x) => ((ɛ, 13'24_matchres))), (map:6^19 ⋅ map:6^5 ⋅ ɛ, 5'f))
//│ ------- defInstance -------
//│ map:6^19 ⋅ map:6^5 ⋅ l:7^20 ⋅ ɛ ==> map:6^19 ⋅ ɛ:
//│ 	16: [K]  <-->  24: case x:13 of {K -> [T]}
//│ l:7^20 ⋅ ɛ ==> map:6^19 ⋅ ɛ:
//│ 	18: [C [K] [N]]  <-->  14: case ls:8 of {C h:9 t:10 -> (fun f:11 -> [C (f:11 h:9) ((map:6 t:10) f:11)]) | N -> (fun f:12 -> [N])}
//│ l:7^20 ⋅ ɛ ==> map:6^19 ⋅ map:6^5 ⋅ ɛ:
//│ 	17: [N]  <-->  14: case ls:8 of {C h:9 t:10 -> (fun f:11 -> [C (f:11 h:9) ((map:6 t:10) f:11)]) | N -> (fun f:12 -> [N])}
//│ l:7^20 ⋅ ɛ ==> ɛ:
//│ 	16: [K]  <-->  24: case x:13 of {K -> [T]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def map:6 = (fun ls:8 -> case ls:8 of {C h:9 t:10 -> (fun f:11 -> [C (f:11 h:9) ((map:6 t:10) f:11)]) | N -> (fun f:12 -> [N])})
//│ def l:7 = [C [K] [N]]
//│ def map'6'19:14 = (fun ls:8 -> ls:8)
//│ def map'6'19_map'6'5:16 = (fun ls:8 -> ls:8)
//│ def l'7'20:15 = 
//│ 	let h:9 = [T] in 
//│ 	let t:10 = (fun f:12 -> [N]) in (fun f:11 -> [C (f:11 h:9) ((map'6'19_map'6'5:16 t:10) f:11)])
//│ ((map'6'19:14 l'7'20:15) (fun x:13 -> x:13))
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


fun inter(xs) = if xs is
    N then ys => ys
    C(h, t) then ys => C(h, inter(ys)(t))
let rec l1 = C(1, C(2, l1))
let rec l2 = C(9, C(8, l2))
inter(l1)(l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|#let| |#rec| |l1| |#=| |C|(|1|,| |C|(|2|,| |l1|)|)|↵|#let| |#rec| |l2| |#=| |C|(|9|,| |C|(|8|,| |l2|)|)|↵|inter|(|l1|)|(|l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; let rec l1 = C (1, C (2, l1,),); let rec l2 = C (9, C (8, l2,),); inter (l1,) (l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def inter:6 = 13: (fun xs:9 -> 12: case 1: xs:9 of {N -> 3: (fun ys:10 -> 2: ys:10) | C h:11 t:12 -> 11: (fun ys:13 -> 10: [C 4: h:11 9: (7: (5: inter:6 6: ys:13) 8: t:12)])})
//│ def l1:7 = 18: [C 14: 1 17: [C 15: 2 16: l1:7]]
//│ def l2:8 = 23: [C 19: 9 22: [C 20: 8 21: l2:8]]
//│ 28: (26: (24: inter:6 25: l1:7) 27: l2:8)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (
//│   (l1:7^25 ⋅ l1:7^16 ⋅ ɛ, C((ɛ, Int), (l1:7^16 ⋅ ɛ, 1'l1))),
//│   (inter:6^24 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ ɛ, 7'ys)
//│ ) :::: ((l1:7^25 ⋅ ɛ, C((ɛ, Int), (l1:7^16 ⋅ ɛ, 1'l1))), (inter:6^24 ⋅ inter:6^5 ⋅ ɛ, 7'ys))
//│ (
//│   (l2:8^27 ⋅ l2:8^21 ⋅ ɛ, C((ɛ, Int), (l2:8^21 ⋅ ɛ, 2'l2))),
//│   (inter:6^24 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ ɛ, 7'ys)
//│ ) :::: ((l2:8^27 ⋅ ɛ, C((ɛ, Int), (l2:8^21 ⋅ ɛ, 2'l2))), (inter:6^24 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ ɛ, 7'ys))
//│ ------- defInstance -------
//│ l2:8^27 ⋅ l2:8^21 ⋅ ɛ ==> inter:6^24 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ ɛ:
//│ 	23: [C 9 [C 8 l2:8]]  <-->  12: case xs:9 of {N -> (fun ys:10 -> ys:10) | C h:11 t:12 -> (fun ys:13 -> [C h:11 ((inter:6 ys:13) t:12)])}
//│ l1:7^25 ⋅ ɛ ==> inter:6^24 ⋅ ɛ:
//│ 	18: [C 1 [C 2 l1:7]]  <-->  12: case xs:9 of {N -> (fun ys:10 -> ys:10) | C h:11 t:12 -> (fun ys:13 -> [C h:11 ((inter:6 ys:13) t:12)])}
//│ l2:8^27 ⋅ ɛ ==> inter:6^24 ⋅ inter:6^5 ⋅ ɛ:
//│ 	23: [C 9 [C 8 l2:8]]  <-->  12: case xs:9 of {N -> (fun ys:10 -> ys:10) | C h:11 t:12 -> (fun ys:13 -> [C h:11 ((inter:6 ys:13) t:12)])}
//│ l1:7^25 ⋅ l1:7^16 ⋅ ɛ ==> inter:6^24 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ ɛ:
//│ 	18: [C 1 [C 2 l1:7]]  <-->  12: case xs:9 of {N -> (fun ys:10 -> ys:10) | C h:11 t:12 -> (fun ys:13 -> [C h:11 ((inter:6 ys:13) t:12)])}
//│ l2:8^27 ⋅ ɛ ==> inter:6^24 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ ɛ:
//│ 	22: [C 8 l2:8]  <-->  12: case xs:9 of {N -> (fun ys:10 -> ys:10) | C h:11 t:12 -> (fun ys:13 -> [C h:11 ((inter:6 ys:13) t:12)])}
//│ l1:7^25 ⋅ ɛ ==> inter:6^24 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ ɛ:
//│ 	17: [C 2 l1:7]  <-->  12: case xs:9 of {N -> (fun ys:10 -> ys:10) | C h:11 t:12 -> (fun ys:13 -> [C h:11 ((inter:6 ys:13) t:12)])}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def inter:6 = (fun xs:9 -> case xs:9 of {N -> (fun ys:10 -> ys:10) | C h:11 t:12 -> (fun ys:13 -> [C h:11 ((inter:6 ys:13) t:12)])})
//│ def l1:7 = [C 1 [C 2 l1:7]]
//│ def l2:8 = [C 9 [C 8 l2:8]]
//│ def inter'6'24_inter'6'5_inter'6'5_inter'6'5:17 = (fun xs:9 -> xs:9)
//│ def l1'7'25:15 = 
//│ 	let h:11 = 1 in 
//│ 	let t:12 = 
//│ 		let h:11 = 2 in 
//│ 		let t:12 = l1'7'25:15 in (fun ys:13 -> [C h:11 ((inter'6'24_inter'6'5_inter'6'5_inter'6'5:17 ys:13) t:12)]) 
//│ 	in (fun ys:13 -> [C h:11 ((inter'6'24_inter'6'5:16 ys:13) t:12)])
//│ def inter'6'24_inter'6'5_inter'6'5_inter'6'5_inter'6'5:20 = (fun xs:9 -> xs:9)
//│ def inter'6'24_inter'6'5:16 = (fun xs:9 -> xs:9)
//│ def inter'6'24:14 = (fun xs:9 -> xs:9)
//│ def l2'8'27:18 = 
//│ 	let h:11 = 9 in 
//│ 	let t:12 = 
//│ 		let h:11 = 8 in 
//│ 		let t:12 = l2'8'27:18 in (fun ys:13 -> [C h:11 ((inter'6'24_inter'6'5_inter'6'5_inter'6'5_inter'6'5:20 ys:13) t:12)]) 
//│ 	in (fun ys:13 -> [C h:11 ((inter'6'24_inter'6'5_inter'6'5:19 ys:13) t:12)])
//│ def inter'6'24_inter'6'5_inter'6'5:19 = (fun xs:9 -> xs:9)
//│ ((inter'6'24:14 l1'7'25:15) l2'8'27:18)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


fun last(ys) = if ys is
    N then x => x
    C(h, t) then x => last(t)(h)
fun lastDrive(xs) = if xs is
    N then None
    C(hh, tt) then Some(last(tt)(hh))
lastDrive(C(1, C(2, N)))
//│ |#fun| |last|(|ys|)| |#=| |#if| |ys| |is|→|N| |#then| |x| |=>| |x|↵|C|(|h|,| |t|)| |#then| |x| |=>| |last|(|t|)|(|h|)|←|↵|#fun| |lastDrive|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |None|↵|C|(|hh|,| |tt|)| |#then| |Some|(|last|(|tt|)|(|hh|)|)|←|↵|lastDrive|(|C|(|1|,| |C|(|2|,| |N|)|)|)|
//│ Parsed: {fun last = ys, => if ys is ‹(N) then x, => x; (C (h, t,)) then x, => last (t,) (h,)›; fun lastDrive = xs, => if xs is ‹(N) then None; (C (hh, tt,)) then Some (last (tt,) (hh,),)›; lastDrive (C (1, C (2, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def last:6 = 11: (fun ys:8 -> 10: case 1: ys:8 of {N -> 3: (fun x:9 -> 2: x:9) | C h:10 t:11 -> 9: (fun x:12 -> 8: (6: (4: last:6 5: t:11) 7: h:10))})
//│ def lastDrive:7 = 21: (fun xs:13 -> 20: case 12: xs:13 of {N -> 13: [None] | C hh:14 tt:15 -> 19: [Some 18: (16: (14: last:6 15: tt:15) 17: hh:14)]})
//│ 28: (22: lastDrive:7 27: [C 23: 1 26: [C 24: 2 25: [N]]])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((last:6^4 ⋅ last:6^4 ⋅ last:6^4 ⋅ ɛ, Int), (lastDrive:7^22 ⋅ last:6^14 ⋅ ɛ, 8'8_callres)) :::: ((last:6^4 ⋅ ɛ, Int), (lastDrive:7^22 ⋅ last:6^14 ⋅ ɛ, 8'8_callres))
//│ ------- defInstance -------
//│ ɛ ==> lastDrive:7^22 ⋅ ɛ:
//│ 	27: [C 1 [C 2 [N]]]  <-->  20: case xs:13 of {N -> [None] | C hh:14 tt:15 -> [Some ((last:6 tt:15) hh:14)]}
//│ ɛ ==> lastDrive:7^22 ⋅ last:6^14 ⋅ ɛ:
//│ 	26: [C 2 [N]]  <-->  10: case ys:8 of {N -> (fun x:9 -> x:9) | C h:10 t:11 -> (fun x:12 -> ((last:6 t:11) h:10))}
//│ ɛ ==> lastDrive:7^22 ⋅ last:6^14 ⋅ last:6^4 ⋅ ɛ:
//│ 	25: [N]  <-->  10: case ys:8 of {N -> (fun x:9 -> x:9) | C h:10 t:11 -> (fun x:12 -> ((last:6 t:11) h:10))}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def last:6 = (fun ys:8 -> case ys:8 of {N -> (fun x:9 -> x:9) | C h:10 t:11 -> (fun x:12 -> ((last:6 t:11) h:10))})
//│ def lastDrive:7 = (fun xs:13 -> case xs:13 of {N -> [None] | C hh:14 tt:15 -> [Some ((last:6 tt:15) hh:14)]})
//│ def lastDrive'7'22_last'6'14:17 = (fun ys:8 -> ys:8)
//│ def lastDrive'7'22_last'6'14_last'6'4:18 = (fun ys:8 -> ys:8)
//│ def lastDrive'7'22:16 = (fun xs:13 -> xs:13)
//│ (lastDrive'7'22:16 
//│ 	let hh:14 = 1 in 
//│ 	let tt:15 = 
//│ 		let h:10 = 2 in 
//│ 		let t:11 = (fun x:9 -> x:9) in (fun x:12 -> ((lastDrive'7'22_last'6'14_last'6'4:18 t:11) h:10)) 
//│ 	in [Some ((lastDrive'7'22_last'6'14:17 tt:15) hh:14)])
//│ <<<<<<<<<< Rewritten <<<<<<<<<<
