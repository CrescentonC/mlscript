:NewParser
:ParseOnly


fun inter(xs) = if xs is
    N then ys => ys
    C(h, t) then ys => C(h, inter(ys)(t))
let l1 = C(1, C(2, N))
let rec l2 = N
inter(l1, l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|#let| |l1| |#=| |C|(|1|,| |C|(|2|,| |N|)|)|↵|#let| |#rec| |l2| |#=| |N|↵|inter|(|l1|,| |l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; let l1 = C (1, C (2, N,),); let rec l2 = N; inter (l1, l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((inter:6^20 l1:7^21) l2:8^23)
//│ def inter:6 = (fun xs:9 -> case xs:9^1 of {
//│ 	N => (fun ys:10 -> ys:10^2)
//│ 	| C h:11 t:12 => (fun ys:13 -> [C h:11^4 ((inter:6^5 ys:13^6) t:12^8)])})
//│ def l1:7 = [C 1 [C 2 [N]]]
//│ def l2:8 = [N]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 7'ys
//│ 	[-l2:8^23 · +inter:6^20 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5]  --->  [-l2:8^23 · +inter:6^20 · +inter:6^5 · +inter:6^5]
//│ NoProd <: 6't
//│ 	[-l1:7^21 · +inter:6^20 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5]  --->  [-l1:7^21 · +inter:6^20 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [inter:6^20 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5] --> [inter:6^20 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5]
//│ [inter:6^20 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5] --> [inter:6^20 · inter:6^5 · inter:6^5]
//│ [l1:7^21] --> [l1:7^21]
//│ [l2:8^23] --> [l2:8^23]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter:6^20]
//│ 	[inter:6^20 · inter:6^5]
//│ 		[inter:6^20 · inter:6^5 · inter:6^5]
//│ 			[inter:6^20 · inter:6^5 · inter:6^5 · inter:6^5]
//│ 				[inter:6^20 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5] ---> [inter:6^20 · inter:6^5 · inter:6^5] (only one)
//│ [l1:7^21]
//│ 
//│ [l2:8^23]
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([inter:6^20]:14^83 [l1:7^21]:19^84) [l2:8^23]:18^86)
//│ def [inter:6^20 · inter:6^5 · inter:6^5 · inter:6^5]:17 = (fun xs:31 -> case xs:31^38 of {
//│ 	N => (fun ys:32 -> ys:32^39)
//│ 	| C h:33 t:34 => (fun ys:35 -> [C h:33^41 (([inter:6^20 · inter:6^5 · inter:6^5]:16^42 ys:35^43) t:34^45)])})
//│ def [inter:6^20 · inter:6^5 · inter:6^5]:16 = (fun xs:26 -> case xs:26^25 of {
//│ 	N => (fun ys:27 -> ys:27^26)
//│ 	| C h:28 t:29 => (fun ys:30 -> [C h:28^28 (([inter:6^20 · inter:6^5 · inter:6^5 · inter:6^5]:17^29 ys:30^30) t:29^32)])})
//│ def [inter:6^20 · inter:6^5]:15 = (fun xs:41 -> case xs:41^64 of {
//│ 	N => (fun ys:42 -> ys:42^65)
//│ 	| C h:43 t:44 => (fun ys:45 -> [C h:43^67 (([inter:6^20 · inter:6^5 · inter:6^5]:16^68 ys:45^69) t:44^71)])})
//│ def [inter:6^20]:14 = (fun xs:36 -> case xs:36^51 of {
//│ 	N => (fun ys:37 -> ys:37^52)
//│ 	| C h:38 t:39 => (fun ys:40 -> [C h:38^54 (([inter:6^20 · inter:6^5]:15^55 ys:40^56) t:39^58)])})
//│ def [l1:7^21]:19 = [C 1 [C 2 [N]]]
//│ def [l2:8^23]:18 = [N]
//│ def inter:6 = (fun xs:9 -> case xs:9^6 of {
//│ 	N => (fun ys:10 -> ys:10^7)
//│ 	| C h:11 t:12 => (fun ys:13 -> [C h:11^9 ((inter:6^10 ys:13^11) t:12^13)])})
//│ def l1:7 = [C 1 [C 2 [N]]]
//│ def l2:8 = [N]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 79: [N]
//│ [N] --->
//│ 	case xs:26^25 of {N => (fun ys:27 -> ys:27^26) | C h:28 t:29 => (fun ys:30 -> [C h:28^28 (([inter:6^20 · inter:6^5 · inter:6^5 · inter:6^5]:17^29 ys:30^30) t:29^32)])}
//│ 80: [C 78: 2 79: [N]]
//│ [C 2 [N]] --->
//│ 	case xs:26^25 of {N => (fun ys:27 -> ys:27^26) | C h:28 t:29 => (fun ys:30 -> [C h:28^28 (([inter:6^20 · inter:6^5 · inter:6^5 · inter:6^5]:17^29 ys:30^30) t:29^32)])}
//│ 81: [C 77: 1 80: [C 78: 2 79: [N]]]
//│ [C 1 [C 2 [N]]] --->
//│ 	case xs:36^51 of {N => (fun ys:37 -> ys:37^52) | C h:38 t:39 => (fun ys:40 -> [C h:38^54 (([inter:6^20 · inter:6^5]:15^55 ys:40^56) t:39^58)])}
//│ 82: [N]
//│ [N] --->
//│ 	case xs:41^64 of {N => (fun ys:42 -> ys:42^65) | C h:43 t:44 => (fun ys:45 -> [C h:43^67 (([inter:6^20 · inter:6^5 · inter:6^5]:16^68 ys:45^69) t:44^71)])}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (([inter:6^20]:14^88 [l1:7^21]:19^89) [l2:8^23]:18^91)
//│ def [inter:6^20 · inter:6^5 · inter:6^5 · inter:6^5]:17 = (fun xs:31 -> case xs:31^115 of {
//│ 	N => (fun ys:32 -> ys:32^116)
//│ 	| C h:33 t:34 => (fun ys:35 -> [C h:33^118 (([inter:6^20 · inter:6^5 · inter:6^5]:16^119 ys:35^120) t:34^122)])})
//│ def [inter:6^20 · inter:6^5 · inter:6^5]:16 = (fun xs:26 -> xs:26^93)
//│ def [inter:6^20 · inter:6^5]:15 = (fun xs:41 -> xs:41^113)
//│ def [inter:6^20]:14 = (fun xs:36 -> xs:36^95)
//│ def [l1:7^21]:19 = let h:38 = 1
//│ in let t:39 = 
//│ 	let h:28 = 2
//│ 	in let t:29 = (fun ys:27 -> ys:27^144)
//│ 	in (fun ys:30 -> [C h:28^136 (([inter:6^20 · inter:6^5 · inter:6^5 · inter:6^5]:17^137 ys:30^138) t:29^140)])
//│ in (fun ys:40 -> [C h:38^128 (([inter:6^20 · inter:6^5]:15^129 ys:40^130) t:39^132)])
//│ def [l2:8^23]:18 = (fun ys:42 -> ys:42^111)
//│ def inter:6 = (fun xs:9 -> case xs:9^97 of {
//│ 	N => (fun ys:10 -> ys:10^98)
//│ 	| C h:11 t:12 => (fun ys:13 -> [C h:11^100 ((inter:6^101 ys:13^102) t:12^104)])})
//│ def l1:7 = [C 1 [C 2 [N]]]
//│ def l2:8 = [N]
//│ <<<<<<< after fusion <<<<<<<


fun inter(xs) = if xs is
    N then ys => ys
    C(h, t) then ys => C(h, inter(ys)(t))
fun l1(x) = C(1, C(2, l1(add(x, 1))))
let rec l2 = C(9, C(8, l2))
inter(l1(0))(l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|#fun| |l1|(|x|)| |#=| |C|(|1|,| |C|(|2|,| |l1|(|add|(|x|,| |1|)|)|)|)|↵|#let| |#rec| |l2| |#=| |C|(|9|,| |C|(|8|,| |l2|)|)|↵|inter|(|l1|(|0|)|)|(|l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; fun l1 = x, => C (1, C (2, l1 (add (x, 1,),),),); let rec l2 = C (9, C (8, l2,),); inter (l1 (0,),) (l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((inter:6^31 (l1:7^32 0)) l2:8^36)
//│ def inter:6 = (fun xs:9 -> case xs:9^1 of {
//│ 	N => (fun ys:10 -> ys:10^2)
//│ 	| C h:11 t:12 => (fun ys:13 -> [C h:11^4 ((inter:6^5 ys:13^6) t:12^8)])})
//│ def l1:7 = (fun x:14 -> [C 1 [C 2 (l1:7^16 ((add:4^17 x:14^18) 1))]])
//│ def l2:8 = [C 9 [C 8 l2:8^28]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(Int, 14'22_callres) <: 7'ys
//│ 	[-l1:7^16 · -l1:7^32 · +inter:6^31 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5]  --->  [-l1:7^32 · +inter:6^31 · +inter:6^5]
//│ C(Int, 2'l2_8^28) <: 7'ys
//│ 	[-l2:8^28 · -l2:8^36 · +inter:6^31 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5]  --->  [-l2:8^36 · +inter:6^31 · +inter:6^5 · +inter:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [inter:6^31 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5] --> [inter:6^31 · inter:6^5 · inter:6^5]
//│ [inter:6^31 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5] --> [inter:6^31 · inter:6^5]
//│ [l1:7^32 · l1:7^16] --> [l1:7^32]
//│ [l2:8^36 · l2:8^28] --> [l2:8^36]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter:6^31]
//│ 	[inter:6^31 · inter:6^5]
//│ 		[inter:6^31 · inter:6^5 · inter:6^5]
//│ 			[inter:6^31 · inter:6^5 · inter:6^5 · inter:6^5]
//│ 				[inter:6^31 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5]
//│ 					[inter:6^31 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5] ---> [inter:6^31 · inter:6^5] (only one)
//│ [l1:7^32]
//│ 	[l1:7^32 · l1:7^16] ---> [l1:7^32] (only one)
//│ [l2:8^36]
//│ 	[l2:8^36 · l2:8^28] ---> [l2:8^36] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([inter:6^31]:17^120 ([l1:7^32]:16^121 0)) [l2:8^36]:15^125)
//│ def [inter:6^31 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5]:21 = (fun xs:39 -> case xs:39^76 of {
//│ 	N => (fun ys:40 -> ys:40^77)
//│ 	| C h:41 t:42 => (fun ys:43 -> [C h:41^79 (([inter:6^31 · inter:6^5]:18^80 ys:43^81) t:42^83)])})
//│ def [inter:6^31 · inter:6^5 · inter:6^5 · inter:6^5]:20 = (fun xs:44 -> case xs:44^89 of {
//│ 	N => (fun ys:45 -> ys:45^90)
//│ 	| C h:46 t:47 => (fun ys:48 -> [C h:46^92 (([inter:6^31 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5]:21^93 ys:48^94) t:47^96)])})
//│ def [inter:6^31 · inter:6^5 · inter:6^5]:19 = (fun xs:34 -> case xs:34^63 of {
//│ 	N => (fun ys:35 -> ys:35^64)
//│ 	| C h:36 t:37 => (fun ys:38 -> [C h:36^66 (([inter:6^31 · inter:6^5 · inter:6^5 · inter:6^5]:20^67 ys:38^68) t:37^70)])})
//│ def [inter:6^31 · inter:6^5]:18 = (fun xs:29 -> case xs:29^50 of {
//│ 	N => (fun ys:30 -> ys:30^51)
//│ 	| C h:31 t:32 => (fun ys:33 -> [C h:31^53 (([inter:6^31 · inter:6^5 · inter:6^5]:19^54 ys:33^55) t:32^57)])})
//│ def [inter:6^31]:17 = (fun xs:49 -> case xs:49^102 of {
//│ 	N => (fun ys:50 -> ys:50^103)
//│ 	| C h:51 t:52 => (fun ys:53 -> [C h:51^105 (([inter:6^31 · inter:6^5]:18^106 ys:53^107) t:52^109)])})
//│ def [l1:7^32]:16 = (fun x:28 -> [C 1 [C 2 ([l1:7^32]:16^40 ((add:26^41 x:28^42) 1))]])
//│ def [l2:8^36]:15 = [C 9 [C 8 [l2:8^36]:15^117]]
//│ def inter:6 = (fun xs:9 -> case xs:9^8 of {
//│ 	N => (fun ys:10 -> ys:10^9)
//│ 	| C h:11 t:12 => (fun ys:13 -> [C h:11^11 ((inter:6^12 ys:13^13) t:12^15)])})
//│ def l1:7 = (fun x:14 -> [C 1 [C 2 (l1:7^23 ((add:4^24 x:14^25) 1))]])
//│ def l2:8 = [C 9 [C 8 l2:8^35]]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 118: [C 116: 8 117: [l2:8^36]:15^117]
//│ [C 8 [l2:8^36]:15^117] --->
//│ 	case xs:44^89 of {N => (fun ys:45 -> ys:45^90) | C h:46 t:47 => (fun ys:48 -> [C h:46^92 (([inter:6^31 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5]:21^93 ys:48^94) t:47^96)])}
//│ 119: [C 115: 9 118: [C 116: 8 117: [l2:8^36]:15^117]]
//│ [C 9 [C 8 [l2:8^36]:15^117]] --->
//│ 	case xs:29^50 of {N => (fun ys:30 -> ys:30^51) | C h:31 t:32 => (fun ys:33 -> [C h:31^53 (([inter:6^31 · inter:6^5 · inter:6^5]:19^54 ys:33^55) t:32^57)])}
//│ 47: [C 39: 2 46: (40: [l1:7^32]:16^40 45: (43: (41: add:26^41 42: x:28^42) 44: 1))]
//│ [C 2 ([l1:7^32]:16^40 ((add:26^41 x:28^42) 1))] --->
//│ 	case xs:34^63 of {N => (fun ys:35 -> ys:35^64) | C h:36 t:37 => (fun ys:38 -> [C h:36^66 (([inter:6^31 · inter:6^5 · inter:6^5 · inter:6^5]:20^67 ys:38^68) t:37^70)])}
//│ 48: [C 38: 1 47: [C 39: 2 46: (40: [l1:7^32]:16^40 45: (43: (41: add:26^41 42: x:28^42) 44: 1))]]
//│ [C 1 [C 2 ([l1:7^32]:16^40 ((add:26^41 x:28^42) 1))]] --->
//│ 	case xs:39^76 of {N => (fun ys:40 -> ys:40^77) | C h:41 t:42 => (fun ys:43 -> [C h:41^79 (([inter:6^31 · inter:6^5]:18^80 ys:43^81) t:42^83)])}
//│ 	case xs:49^102 of {N => (fun ys:50 -> ys:50^103) | C h:51 t:52 => (fun ys:53 -> [C h:51^105 (([inter:6^31 · inter:6^5]:18^106 ys:53^107) t:52^109)])}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (([inter:6^31]:17^127 ([l1:7^32]:16^128 0)) [l2:8^36]:15^132)
//│ def [inter:6^31 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5]:21 = (fun xs:39 -> case xs:39^181 of {
//│ 	N => (fun ys:40 -> ys:40^182)
//│ 	| C h:41 t:42 => (fun ys:43 -> [C h:41^184 (([inter:6^31 · inter:6^5]:18^185 ys:43^186) t:42^188)])})
//│ def [inter:6^31 · inter:6^5 · inter:6^5 · inter:6^5]:20 = (fun xs:44 -> xs:44^177)
//│ def [inter:6^31 · inter:6^5 · inter:6^5]:19 = (fun xs:34 -> xs:34^179)
//│ def [inter:6^31 · inter:6^5]:18 = (fun xs:29 -> xs:29^175)
//│ def [inter:6^31]:17 = (fun xs:49 -> xs:49^236)
//│ def [l1:7^32]:16 = (fun x:28 -> let h:51 = 1
//│ in let t:52 = 
//│ 	let h:36 = 2
//│ 	in let t:37 = ([l1:7^32]:16^222 ((add:26^223 x:28^224) 1))
//│ 	in (fun ys:38 -> [C h:36^214 (([inter:6^31 · inter:6^5 · inter:6^5 · inter:6^5]:20^215 ys:38^216) t:37^218)])
//│ in (fun ys:53 -> [C h:51^206 (([inter:6^31 · inter:6^5]:18^207 ys:53^208) t:52^210)]))
//│ def [l2:8^36]:15 = let h:31 = 9
//│ in let t:32 = 
//│ 	let h:46 = 8
//│ 	in let t:47 = [l2:8^36]:15^168
//│ 	in (fun ys:48 -> [C h:46^160 (([inter:6^31 · inter:6^5 · inter:6^5 · inter:6^5 · inter:6^5]:21^161 ys:48^162) t:47^164)])
//│ in (fun ys:33 -> [C h:31^152 (([inter:6^31 · inter:6^5 · inter:6^5]:19^153 ys:33^154) t:32^156)])
//│ def inter:6 = (fun xs:9 -> case xs:9^134 of {
//│ 	N => (fun ys:10 -> ys:10^135)
//│ 	| C h:11 t:12 => (fun ys:13 -> [C h:11^137 ((inter:6^138 ys:13^139) t:12^141)])})
//│ def l1:7 = (fun x:14 -> [C 1 [C 2 (l1:7^196 ((add:4^197 x:14^198) 1))]])
//│ def l2:8 = [C 9 [C 8 l2:8^149]]
//│ <<<<<<< after fusion <<<<<<<




// NOTE: only head is handled
fun map(ls) = if ls is
    C(h, t) then f => C(f(h), map(t)(f))
    N then f => N
let l = C(K, N)
map(l)(
    x => if x is
        K then T
)
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |f| |=>| |C|(|f|(|h|)|,| |map|(|t|)|(|f|)|)|↵|N| |#then| |f| |=>| |N|←|↵|#let| |l| |#=| |C|(|K|,| |N|)|↵|map|(|l|)|(|→|x| |=>| |#if| |x| |is|→|K| |#then| |T|←|←|↵|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (h, t,)) then f, => C (f (h,), map (t,) (f,),); (N) then f, => N›; let l = C (K, N,); map (l,) (x, => if x is ‹(K) then T›,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((map:6^19 l:7^20) (fun x:13 -> case x:13^22 of {
//│ 	K => [T]}))
//│ def l:7 = [C [K] [N]]
//│ def map:6 = (fun ls:8 -> case ls:8^1 of {
//│ 	C h:9 t:10 => (fun f:11 -> [C (f:11^2 h:9^3) ((map:6^5 t:10^6) f:11^8)])
//│ 	| N => (fun f:12 -> [N])})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 4't
//│ 	[-l:7^20 · +map:6^19 · +map:6^5 · +map:6^5]  --->  [-l:7^20 · +map:6^19 · +map:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [map:6^19 · map:6^5 · map:6^5] --> [map:6^19 · map:6^5]
//│ [l:7^20] --> [l:7^20]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [l:7^20]
//│ 
//│ [map:6^19]
//│ 	[map:6^19 · map:6^5]
//│ 		[map:6^19 · map:6^5 · map:6^5] ---> [map:6^19 · map:6^5] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ (([map:6^19]:15^60 [l:7^20]:14^61) (fun x:33 -> case x:33^63 of {
//│ 	K => [T]}))
//│ def [l:7^20]:14 = [C [K] [N]]
//│ def [map:6^19 · map:6^5]:16 = (fun ls:28 -> case ls:28^45 of {
//│ 	C h:29 t:30 => (fun f:31 -> [C (f:31^46 h:29^47) (([map:6^19 · map:6^5]:16^49 t:30^50) f:31^52)])
//│ 	| N => (fun f:32 -> [N])})
//│ def [map:6^19]:15 = (fun ls:23 -> case ls:23^27 of {
//│ 	C h:24 t:25 => (fun f:26 -> [C (f:26^28 h:24^29) (([map:6^19 · map:6^5]:16^31 t:25^32) f:26^34)])
//│ 	| N => (fun f:27 -> [N])})
//│ def l:7 = [C [K] [N]]
//│ def map:6 = (fun ls:9 -> case ls:9^9 of {
//│ 	C h:10 t:11 => (fun f:12 -> [C (f:12^10 h:10^11) ((map:6^13 t:11^14) f:12^16)])
//│ 	| N => (fun f:13 -> [N])})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 42: [K]
//│ [K] --->
//│ 	case x:33^63 of {K => [T]}
//│ 43: [N]
//│ [N] --->
//│ 	case ls:28^45 of {C h:29 t:30 => (fun f:31 -> [C (f:31^46 h:29^47) (([map:6^19 · map:6^5]:16^49 t:30^50) f:31^52)]) | N => (fun f:32 -> [N])}
//│ 44: [C 42: [K] 43: [N]]
//│ [C [K] [N]] --->
//│ 	case ls:23^27 of {C h:24 t:25 => (fun f:26 -> [C (f:26^28 h:24^29) (([map:6^19 · map:6^5]:16^31 t:25^32) f:26^34)]) | N => (fun f:27 -> [N])}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (([map:6^19]:15^68 [l:7^20]:14^69) (fun x:33 -> x:33^71))
//│ def [l:7^20]:14 = let h:24 = [T]
//│ in let t:25 = (fun f:32 -> [N])
//│ in (fun f:26 -> [C (f:26^74 h:24^75) (([map:6^19 · map:6^5]:16^77 t:25^78) f:26^80)])
//│ def [map:6^19 · map:6^5]:16 = (fun ls:28 -> ls:28^109)
//│ def [map:6^19]:15 = (fun ls:23 -> ls:23^92)
//│ def l:7 = [C [K] [N]]
//│ def map:6 = (fun ls:9 -> case ls:9^94 of {
//│ 	C h:10 t:11 => (fun f:12 -> [C (f:12^95 h:10^96) ((map:6^98 t:11^99) f:12^101)])
//│ 	| N => (fun f:13 -> [N])})
//│ <<<<<<< after fusion <<<<<<<



fun map(ls) = if ls is
    C(h, t) then C(
        (if h is
            K then T
            KK then TT
            KKKK then TTTT
        ),
        map(t)
    )
    N then N
let l = C(K, C(KK, C(KKKK, N)))
map(l)
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|→|(|#if| |h| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|)|,|↵|map|(|t|)|←|↵|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|l|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (h, t,)) then C ('(' if h is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›, ')', map (t,),); (N) then N›; let l = C (K, C (KK, C (KKKK, N,),),); map (l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (map:6^21 l:7^22)
//│ def l:7 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map:6 = (fun ls:8 -> case ls:8^1 of {
//│ 	C h:9 t:10 => [C case h:9^2 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} (map:6^7 t:10^8)]
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 4't
//│ 	[-l:7^22 · +map:6^21 · +map:6^7 · +map:6^7 · +map:6^7 · +map:6^7]  --->  [-l:7^22 · +map:6^21 · +map:6^7 · +map:6^7 · +map:6^7]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [map:6^21 · map:6^7 · map:6^7 · map:6^7 · map:6^7] --> [map:6^21 · map:6^7 · map:6^7 · map:6^7]
//│ [l:7^22] --> [l:7^22]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [l:7^22]
//│ 
//│ [map:6^21]
//│ 	[map:6^21 · map:6^7]
//│ 		[map:6^21 · map:6^7 · map:6^7]
//│ 			[map:6^21 · map:6^7 · map:6^7 · map:6^7]
//│ 				[map:6^21 · map:6^7 · map:6^7 · map:6^7 · map:6^7] ---> [map:6^21 · map:6^7 · map:6^7 · map:6^7] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([map:6^21]:12^83 [l:7^22]:11^84)
//│ def [l:7^22]:11 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def [map:6^21 · map:6^7 · map:6^7 · map:6^7]:15 = (fun ls:22 -> case ls:22^24 of {
//│ 	C h:23 t:24 => [C case h:23^25 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} ([map:6^21 · map:6^7 · map:6^7 · map:6^7]:15^30 t:24^31)]
//│ 	| N => [N]})
//│ def [map:6^21 · map:6^7 · map:6^7]:14 = (fun ls:31 -> case ls:31^63 of {
//│ 	C h:32 t:33 => [C case h:32^64 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} ([map:6^21 · map:6^7 · map:6^7 · map:6^7]:15^69 t:33^70)]
//│ 	| N => [N]})
//│ def [map:6^21 · map:6^7]:13 = (fun ls:25 -> case ls:25^37 of {
//│ 	C h:26 t:27 => [C case h:26^38 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} ([map:6^21 · map:6^7 · map:6^7]:14^43 t:27^44)]
//│ 	| N => [N]})
//│ def [map:6^21]:12 = (fun ls:28 -> case ls:28^50 of {
//│ 	C h:29 t:30 => [C case h:29^51 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} ([map:6^21 · map:6^7]:13^56 t:30^57)]
//│ 	| N => [N]})
//│ def l:7 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map:6 = (fun ls:8 -> case ls:8^4 of {
//│ 	C h:9 t:10 => [C case h:9^5 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} (map:6^10 t:10^11)]
//│ 	| N => [N]})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 76: [K]
//│ [K] --->
//│ 	case h:29^51 of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ 77: [KK]
//│ [KK] --->
//│ 	case h:26^38 of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ 78: [KKKK]
//│ [KKKK] --->
//│ 	case h:32^64 of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ 79: [N]
//│ [N] --->
//│ 	case ls:22^24 of {C h:23 t:24 => [C case h:23^25 of {K => [T] | KK => [TT] | KKKK => [TTTT]} ([map:6^21 · map:6^7 · map:6^7 · map:6^7]:15^30 t:24^31)] | N => [N]}
//│ 80: [C 78: [KKKK] 79: [N]]
//│ [C [KKKK] [N]] --->
//│ 	case ls:31^63 of {C h:32 t:33 => [C case h:32^64 of {K => [T] | KK => [TT] | KKKK => [TTTT]} ([map:6^21 · map:6^7 · map:6^7 · map:6^7]:15^69 t:33^70)] | N => [N]}
//│ 81: [C 77: [KK] 80: [C 78: [KKKK] 79: [N]]]
//│ [C [KK] [C [KKKK] [N]]] --->
//│ 	case ls:25^37 of {C h:26 t:27 => [C case h:26^38 of {K => [T] | KK => [TT] | KKKK => [TTTT]} ([map:6^21 · map:6^7 · map:6^7]:14^43 t:27^44)] | N => [N]}
//│ 82: [C 76: [K] 81: [C 77: [KK] 80: [C 78: [KKKK] 79: [N]]]]
//│ [C [K] [C [KK] [C [KKKK] [N]]]] --->
//│ 	case ls:28^50 of {C h:29 t:30 => [C case h:29^51 of {K => [T] | KK => [TT] | KKKK => [TTTT]} ([map:6^21 · map:6^7]:13^56 t:30^57)] | N => [N]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([map:6^21]:12^86 [l:7^22]:11^87)
//│ def [l:7^22]:11 = let h:29 = [T]
//│ in let t:30 = 
//│ 	let h:26 = [TT]
//│ 	in let t:27 = 
//│ 		let h:32 = [TTTT]
//│ 		in let t:33 = [N]
//│ 		in [C h:32^125 ([map:6^21 · map:6^7 · map:6^7 · map:6^7]:15^126 t:33^127)]
//│ 	in [C h:26^120 ([map:6^21 · map:6^7 · map:6^7]:14^121 t:27^122)]
//│ in [C h:29^115 ([map:6^21 · map:6^7]:13^116 t:30^117)]
//│ def [map:6^21 · map:6^7 · map:6^7 · map:6^7]:15 = (fun ls:22 -> ls:22^140)
//│ def [map:6^21 · map:6^7 · map:6^7]:14 = (fun ls:31 -> ls:31^89)
//│ def [map:6^21 · map:6^7]:13 = (fun ls:25 -> ls:25^111)
//│ def [map:6^21]:12 = (fun ls:28 -> ls:28^113)
//│ def l:7 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map:6 = (fun ls:8 -> case ls:8^98 of {
//│ 	C h:9 t:10 => [C case h:9^99 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} (map:6^104 t:10^105)]
//│ 	| N => [N]})
//│ <<<<<<< after fusion <<<<<<<



// NOTE: consumer `c` is used twice in its body, but it fine here
let aa = T(N, L, L)
let bb = T(N, L, L)
let t = T(K, aa, bb)
fun c(x) = if x is
    T(n, l, r) then T(
        (if n is
            K then KK
            N then NN
        ),
        c(l),
        c(r)
    )
    L then LL
c(t)
//│ |#let| |aa| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |bb| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |t| |#=| |T|(|K|,| |aa|,| |bb|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|T|(|n|,| |l|,| |r|)| |#then| |T|(|→|(|#if| |n| |is|→|K| |#then| |KK|↵|N| |#then| |NN|←|↵|)|,|↵|c|(|l|)|,|↵|c|(|r|)|←|↵|)|↵|L| |#then| |LL|←|↵|c|(|t|)|
//│ Parsed: {let aa = T (N, L, L,); let bb = T (N, L, L,); let t = T (K, aa, bb,); fun c = x, => if x is ‹(T (n, l, r,)) then T ('(' if n is ‹(K) then KK; (N) then NN›, ')', c (l,), c (r,),); (L) then LL›; c (t,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c:9^28 t:8^29)
//│ def aa:6 = [T [N] [L] [L]]
//│ def bb:7 = [T [N] [L] [L]]
//│ def c:9 = (fun x:10 -> case x:10^13 of {
//│ 	T n:11 l:12 r:13 => [T case n:11^14 of {
//│ 		K => [KK]
//│ 		| N => [NN]} (c:9^18 l:12^19) (c:9^21 r:13^22)]
//│ 	| L => [LL]})
//│ def t:8 = [T [K] aa:6^10 bb:7^11]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 7'r
//│ 	[-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^18 · +c:9^21]  --->  [-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^18]
//│ 	[-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^21 · +c:9^21]  --->  [-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^21]
//│ 	[-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^18 · +c:9^21]  --->  [-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^18]
//│ 	[-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^21 · +c:9^21]  --->  [-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^21]
//│ NoProd <: 6'l
//│ 	[-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^18 · +c:9^18]  --->  [-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^18]
//│ 	[-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^21 · +c:9^18]  --->  [-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^21]
//│ 	[-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^18 · +c:9^18]  --->  [-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^18]
//│ 	[-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^21 · +c:9^18]  --->  [-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^21]
//│ NoProd <: 4'x
//│ 	[-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^18 · +c:9^18 · +c:9^21]  --->  [-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^18 · +c:9^18]
//│ 	[-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^18 · +c:9^21 · +c:9^18]  --->  [-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^18 · +c:9^21]
//│ 	[-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^21 · +c:9^18 · +c:9^21]  --->  [-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^21 · +c:9^18]
//│ 	[-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^21 · +c:9^21 · +c:9^18]  --->  [-aa:6^10 · -t:8^29 · +c:9^28 · +c:9^18 · +c:9^21 · +c:9^21]
//│ 	[-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^18 · +c:9^18 · +c:9^21]  --->  [-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^18 · +c:9^18]
//│ 	[-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^18 · +c:9^21 · +c:9^18]  --->  [-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^18 · +c:9^21]
//│ 	[-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^21 · +c:9^18 · +c:9^21]  --->  [-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^21 · +c:9^18]
//│ 	[-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^21 · +c:9^21 · +c:9^18]  --->  [-bb:7^11 · -t:8^29 · +c:9^28 · +c:9^21 · +c:9^21 · +c:9^21]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [c:9^28 · c:9^18 · c:9^18 · c:9^18 · c:9^21] --> [c:9^28 · c:9^18 · c:9^18 · c:9^18]
//│ [c:9^28 · c:9^18 · c:9^18 · c:9^18] --> [c:9^28 · c:9^18 · c:9^18]
//│ [c:9^28 · c:9^18 · c:9^18 · c:9^21 · c:9^18] --> [c:9^28 · c:9^18 · c:9^18 · c:9^21]
//│ [c:9^28 · c:9^18 · c:9^18 · c:9^21] --> [c:9^28 · c:9^18 · c:9^18]
//│ [c:9^28 · c:9^18 · c:9^21 · c:9^18 · c:9^21] --> [c:9^28 · c:9^18 · c:9^21 · c:9^18]
//│ [c:9^28 · c:9^18 · c:9^21 · c:9^18] --> [c:9^28 · c:9^18 · c:9^21]
//│ [c:9^28 · c:9^18 · c:9^21 · c:9^21 · c:9^18] --> [c:9^28 · c:9^18 · c:9^21 · c:9^21]
//│ [c:9^28 · c:9^18 · c:9^21 · c:9^21] --> [c:9^28 · c:9^18 · c:9^21]
//│ [c:9^28 · c:9^21 · c:9^18 · c:9^18 · c:9^21] --> [c:9^28 · c:9^21 · c:9^18 · c:9^18]
//│ [c:9^28 · c:9^21 · c:9^18 · c:9^18] --> [c:9^28 · c:9^21 · c:9^18]
//│ [c:9^28 · c:9^21 · c:9^18 · c:9^21 · c:9^18] --> [c:9^28 · c:9^21 · c:9^18 · c:9^21]
//│ [c:9^28 · c:9^21 · c:9^18 · c:9^21] --> [c:9^28 · c:9^21 · c:9^18]
//│ [c:9^28 · c:9^21 · c:9^21 · c:9^18 · c:9^21] --> [c:9^28 · c:9^21 · c:9^21 · c:9^18]
//│ [c:9^28 · c:9^21 · c:9^21 · c:9^18] --> [c:9^28 · c:9^21 · c:9^21]
//│ [c:9^28 · c:9^21 · c:9^21 · c:9^21 · c:9^18] --> [c:9^28 · c:9^21 · c:9^21 · c:9^21]
//│ [c:9^28 · c:9^21 · c:9^21 · c:9^21] --> [c:9^28 · c:9^21 · c:9^21]
//│ [t:8^29 · aa:6^10] --> [t:8^29 · aa:6^10]
//│ [t:8^29 · bb:7^11] --> [t:8^29 · bb:7^11]
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c:9^28]
//│ 	[c:9^28 · c:9^21]
//│ 		[c:9^28 · c:9^21 · c:9^21]
//│ 			[c:9^28 · c:9^21 · c:9^21 · c:9^21] ---> [c:9^28 · c:9^21 · c:9^21] (only one)
//│ 			[c:9^28 · c:9^21 · c:9^21 · c:9^18] ---> [c:9^28 · c:9^21 · c:9^21] (only one)
//│ 		[c:9^28 · c:9^21 · c:9^18]
//│ 			[c:9^28 · c:9^21 · c:9^18 · c:9^21] ---> [c:9^28 · c:9^21 · c:9^18] (only one)
//│ 			[c:9^28 · c:9^21 · c:9^18 · c:9^18] ---> [c:9^28 · c:9^21 · c:9^18] (only one)
//│ 	[c:9^28 · c:9^18]
//│ 		[c:9^28 · c:9^18 · c:9^21]
//│ 			[c:9^28 · c:9^18 · c:9^21 · c:9^21] ---> [c:9^28 · c:9^18 · c:9^21] (only one)
//│ 			[c:9^28 · c:9^18 · c:9^21 · c:9^18] ---> [c:9^28 · c:9^18 · c:9^21] (only one)
//│ 		[c:9^28 · c:9^18 · c:9^18]
//│ 			[c:9^28 · c:9^18 · c:9^18 · c:9^21] ---> [c:9^28 · c:9^18 · c:9^18] (only one)
//│ 			[c:9^28 · c:9^18 · c:9^18 · c:9^18] ---> [c:9^28 · c:9^18 · c:9^18] (only one)
//│ [t:8^29]
//│ 	[t:8^29 · bb:7^11]
//│ 
//│ 	[t:8^29 · aa:6^10]
//│ 
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([c:9^28]:17^148 [t:8^29]:14^149)
//│ def [c:9^28 · c:9^18 · c:9^18]:23 = (fun x:30 -> case x:30^31 of {
//│ 	T n:31 l:32 r:33 => [T case n:31^32 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:9^28 · c:9^18 · c:9^18]:23^36 l:32^37) ([c:9^28 · c:9^18 · c:9^18]:23^39 r:33^40)]
//│ 	| L => [LL]})
//│ def [c:9^28 · c:9^18 · c:9^21]:22 = (fun x:50 -> case x:50^118 of {
//│ 	T n:51 l:52 r:53 => [T case n:51^119 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:9^28 · c:9^18 · c:9^21]:22^123 l:52^124) ([c:9^28 · c:9^18 · c:9^21]:22^126 r:53^127)]
//│ 	| L => [LL]})
//│ def [c:9^28 · c:9^18]:21 = (fun x:54 -> case x:54^133 of {
//│ 	T n:55 l:56 r:57 => [T case n:55^134 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:9^28 · c:9^18 · c:9^18]:23^138 l:56^139) ([c:9^28 · c:9^18 · c:9^21]:22^141 r:57^142)]
//│ 	| L => [LL]})
//│ def [c:9^28 · c:9^21 · c:9^18]:20 = (fun x:34 -> case x:34^54 of {
//│ 	T n:35 l:36 r:37 => [T case n:35^55 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:9^28 · c:9^21 · c:9^18]:20^59 l:36^60) ([c:9^28 · c:9^21 · c:9^18]:20^62 r:37^63)]
//│ 	| L => [LL]})
//│ def [c:9^28 · c:9^21 · c:9^21]:19 = (fun x:38 -> case x:38^69 of {
//│ 	T n:39 l:40 r:41 => [T case n:39^70 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:9^28 · c:9^21 · c:9^21]:19^74 l:40^75) ([c:9^28 · c:9^21 · c:9^21]:19^77 r:41^78)]
//│ 	| L => [LL]})
//│ def [c:9^28 · c:9^21]:18 = (fun x:42 -> case x:42^88 of {
//│ 	T n:43 l:44 r:45 => [T case n:43^89 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:9^28 · c:9^21 · c:9^18]:20^93 l:44^94) ([c:9^28 · c:9^21 · c:9^21]:19^96 r:45^97)]
//│ 	| L => [LL]})
//│ def [c:9^28]:17 = (fun x:46 -> case x:46^103 of {
//│ 	T n:47 l:48 r:49 => [T case n:47^104 of {
//│ 		K => [KK]
//│ 		| N => [NN]} ([c:9^28 · c:9^18]:21^108 l:48^109) ([c:9^28 · c:9^21]:18^111 r:49^112)]
//│ 	| L => [LL]})
//│ def [t:8^29 · aa:6^10]:16 = [T [N] [L] [L]]
//│ def [t:8^29 · bb:7^11]:15 = [T [N] [L] [L]]
//│ def [t:8^29]:14 = [T [K] [t:8^29 · aa:6^10]:16^47 [t:8^29 · bb:7^11]:15^48]
//│ def aa:6 = [T [N] [L] [L]]
//│ def bb:7 = [T [N] [L] [L]]
//│ def c:9 = (fun x:10 -> case x:10^16 of {
//│ 	T n:11 l:12 r:13 => [T case n:11^17 of {
//│ 		K => [KK]
//│ 		| N => [NN]} (c:9^21 l:12^22) (c:9^24 r:13^25)]
//│ 	| L => [LL]})
//│ def t:8 = [T [K] aa:6^13 bb:7^14]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 46: [K]
//│ [K] --->
//│ 	case n:47^104 of {K => [KK] | N => [NN]}
//│ 49: [T 46: [K] 47: [t:8^29 · aa:6^10]:16^47 48: [t:8^29 · bb:7^11]:15^48]
//│ [T [K] [t:8^29 · aa:6^10]:16^47 [t:8^29 · bb:7^11]:15^48] --->
//│ 	case x:46^103 of {T n:47 l:48 r:49 => [T case n:47^104 of {K => [KK] | N => [NN]} ([c:9^28 · c:9^18]:21^108 l:48^109) ([c:9^28 · c:9^21]:18^111 r:49^112)] | L => [LL]}
//│ 50: [N]
//│ [N] --->
//│ 	case n:43^89 of {K => [KK] | N => [NN]}
//│ 51: [L]
//│ [L] --->
//│ 	case x:34^54 of {T n:35 l:36 r:37 => [T case n:35^55 of {K => [KK] | N => [NN]} ([c:9^28 · c:9^21 · c:9^18]:20^59 l:36^60) ([c:9^28 · c:9^21 · c:9^18]:20^62 r:37^63)] | L => [LL]}
//│ 52: [L]
//│ [L] --->
//│ 	case x:38^69 of {T n:39 l:40 r:41 => [T case n:39^70 of {K => [KK] | N => [NN]} ([c:9^28 · c:9^21 · c:9^21]:19^74 l:40^75) ([c:9^28 · c:9^21 · c:9^21]:19^77 r:41^78)] | L => [LL]}
//│ 53: [T 50: [N] 51: [L] 52: [L]]
//│ [T [N] [L] [L]] --->
//│ 	case x:42^88 of {T n:43 l:44 r:45 => [T case n:43^89 of {K => [KK] | N => [NN]} ([c:9^28 · c:9^21 · c:9^18]:20^93 l:44^94) ([c:9^28 · c:9^21 · c:9^21]:19^96 r:45^97)] | L => [LL]}
//│ 84: [N]
//│ [N] --->
//│ 	case n:55^134 of {K => [KK] | N => [NN]}
//│ 85: [L]
//│ [L] --->
//│ 	case x:30^31 of {T n:31 l:32 r:33 => [T case n:31^32 of {K => [KK] | N => [NN]} ([c:9^28 · c:9^18 · c:9^18]:23^36 l:32^37) ([c:9^28 · c:9^18 · c:9^18]:23^39 r:33^40)] | L => [LL]}
//│ 86: [L]
//│ [L] --->
//│ 	case x:50^118 of {T n:51 l:52 r:53 => [T case n:51^119 of {K => [KK] | N => [NN]} ([c:9^28 · c:9^18 · c:9^21]:22^123 l:52^124) ([c:9^28 · c:9^18 · c:9^21]:22^126 r:53^127)] | L => [LL]}
//│ 87: [T 84: [N] 85: [L] 86: [L]]
//│ [T [N] [L] [L]] --->
//│ 	case x:54^133 of {T n:55 l:56 r:57 => [T case n:55^134 of {K => [KK] | N => [NN]} ([c:9^28 · c:9^18 · c:9^18]:23^138 l:56^139) ([c:9^28 · c:9^18 · c:9^21]:22^141 r:57^142)] | L => [LL]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([c:9^28]:17^151 [t:8^29]:14^152)
//│ def [c:9^28 · c:9^18 · c:9^18]:23 = (fun x:30 -> x:30^209)
//│ def [c:9^28 · c:9^18 · c:9^21]:22 = (fun x:50 -> x:50^207)
//│ def [c:9^28 · c:9^18]:21 = (fun x:54 -> x:54^235)
//│ def [c:9^28 · c:9^21 · c:9^18]:20 = (fun x:34 -> x:34^154)
//│ def [c:9^28 · c:9^21 · c:9^21]:19 = (fun x:38 -> x:38^156)
//│ def [c:9^28 · c:9^21]:18 = (fun x:42 -> x:42^158)
//│ def [c:9^28]:17 = (fun x:46 -> x:46^233)
//│ def [t:8^29 · aa:6^10]:16 = let n:55 = [NN]
//│ in let l:56 = [LL]
//│ in let r:57 = [LL]
//│ in [T n:55^193 ([c:9^28 · c:9^18 · c:9^18]:23^194 l:56^195) ([c:9^28 · c:9^18 · c:9^21]:22^197 r:57^198)]
//│ def [t:8^29 · bb:7^11]:15 = let n:43 = [NN]
//│ in let l:44 = [LL]
//│ in let r:45 = [LL]
//│ in [T n:43^211 ([c:9^28 · c:9^21 · c:9^18]:20^212 l:44^213) ([c:9^28 · c:9^21 · c:9^21]:19^215 r:45^216)]
//│ def [t:8^29]:14 = let n:47 = [KK]
//│ in let l:48 = [t:8^29 · aa:6^10]:16^170
//│ in let r:49 = [t:8^29 · bb:7^11]:15^168
//│ in [T n:47^160 ([c:9^28 · c:9^18]:21^161 l:48^162) ([c:9^28 · c:9^21]:18^164 r:49^165)]
//│ def aa:6 = [T [N] [L] [L]]
//│ def bb:7 = [T [N] [L] [L]]
//│ def c:9 = (fun x:10 -> case x:10^178 of {
//│ 	T n:11 l:12 r:13 => [T case n:11^179 of {
//│ 		K => [KK]
//│ 		| N => [NN]} (c:9^183 l:12^184) (c:9^186 r:13^187)]
//│ 	| L => [LL]})
//│ def t:8 = [T [K] aa:6^226 bb:7^227]
//│ <<<<<<< after fusion <<<<<<<




fun sum(ls) = if ls is
    C(h, t) then S(N, sum(t))
    N then N
fun mapa(lsa) = if lsa is
    C(ha, ta) then C(primitive(ha), mapa(ta))
    N then N
fun mapb(lsb) = if lsb is
    C(hb, tb) then C(primitive(hb), mapb(tb))
    N then N
sum(mapa(mapb(primitive)))
//│ |#fun| |sum|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |S|(|N|,| |sum|(|t|)|)|↵|N| |#then| |N|←|↵|#fun| |mapa|(|lsa|)| |#=| |#if| |lsa| |is|→|C|(|ha|,| |ta|)| |#then| |C|(|primitive|(|ha|)|,| |mapa|(|ta|)|)|↵|N| |#then| |N|←|↵|#fun| |mapb|(|lsb|)| |#=| |#if| |lsb| |is|→|C|(|hb|,| |tb|)| |#then| |C|(|primitive|(|hb|)|,| |mapb|(|tb|)|)|↵|N| |#then| |N|←|↵|sum|(|mapa|(|mapb|(|primitive|)|)|)|
//│ Parsed: {fun sum = ls, => if ls is ‹(C (h, t,)) then S (N, sum (t,),); (N) then N›; fun mapa = lsa, => if lsa is ‹(C (ha, ta,)) then C (primitive (ha,), mapa (ta,),); (N) then N›; fun mapb = lsb, => if lsb is ‹(C (hb, tb,)) then C (primitive (hb,), mapb (tb,),); (N) then N›; sum (mapa (mapb (primitive,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (sum:6^32 (mapa:7^33 (mapb:8^34 primitive:3^35)))
//│ def mapa:7 = (fun lsa:12 -> case lsa:12^10 of {
//│ 	C ha:13 ta:14 => [C (primitive:3^11 ha:13^12) (mapa:7^14 ta:14^15)]
//│ 	| N => [N]})
//│ def mapb:8 = (fun lsb:15 -> case lsb:15^21 of {
//│ 	C hb:16 tb:17 => [C (primitive:3^22 hb:16^23) (mapb:8^25 tb:17^26)]
//│ 	| N => [N]})
//│ def sum:6 = (fun ls:9 -> case ls:9^1 of {
//│ 	C h:10 t:11 => [S [N] (sum:6^3 t:11^4)]
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(11'13_callres, 12'16_callres) <: 3'ls
//│ 	[-mapa:7^14 · -mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3 · +sum:6^3]  --->  [-mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3]
//│ C(17'24_callres, 18'27_callres) <: 8'lsa
//│ 	[-mapb:8^25 · -mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14 · +mapa:7^14]  --->  [-mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14]
//│ NoProd <: 14'lsb
//│ 	[+mapb:8^34 · +mapb:8^25 · +mapb:8^25]  --->  [+mapb:8^34 · +mapb:8^25]
//│ NoProd <: 8'lsa
//│ 	[-mapb:8^34 · +mapa:7^33 · +mapa:7^14 · +mapa:7^14]  --->  [-mapb:8^34 · +mapa:7^33 · +mapa:7^14]
//│ NoProd <: 3'ls
//│ 	[-mapa:7^33 · +sum:6^32 · +sum:6^3 · +sum:6^3]  --->  [-mapa:7^33 · +sum:6^32 · +sum:6^3]
//│ NoProd <: 10'ta
//│ 	[-mapb:8^25 · -mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14 · +mapa:7^14 · +mapa:7^14]  --->  [-mapb:8^25 · -mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14 · +mapa:7^14]
//│ 	[-mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14 · +mapa:7^14]  --->  [-mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14]
//│ NoProd <: 5't
//│ 	[-mapa:7^14 · -mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3 · +sum:6^3 · +sum:6^3]  --->  [-mapa:7^14 · -mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3 · +sum:6^3]
//│ 	[-mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3 · +sum:6^3]  --->  [-mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [mapa:7^33 · mapa:7^14 · mapa:7^14 · mapa:7^14] --> [mapa:7^33 · mapa:7^14 · mapa:7^14]
//│ [mapa:7^33 · mapa:7^14 · mapa:7^14] --> [mapa:7^33 · mapa:7^14]
//│ 	[mapa:7^33 · mapa:7^14 · mapa:7^14]
//│ 	!!MORE THAN ONE MATCH
//│ [sum:6^32 · sum:6^3 · sum:6^3 · sum:6^3] --> [sum:6^32 · sum:6^3 · sum:6^3]
//│ [sum:6^32 · sum:6^3 · sum:6^3] --> [sum:6^32 · sum:6^3]
//│ [mapa:7^33 · mapa:7^14] --> [mapa:7^33 · mapa:7^14]
//│ [mapa:7^33] --> [mapa:7^33]
//│ [mapb:8^34 · mapb:8^25 · mapb:8^25] --> [mapb:8^34 · mapb:8^25 · mapb:8^25]
//│ 	[mapb:8^34 · mapb:8^25]
//│ 	!!MORE THAN ONE MATCH
//│ [mapb:8^34 · mapb:8^25] --> [mapb:8^34 · mapb:8^25]
//│ [mapb:8^34] --> [mapb:8^34]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [mapa:7^33]
//│ 	[mapa:7^33 · mapa:7^14]
//│ 		[mapa:7^33 · mapa:7^14 · mapa:7^14] ---> [mapa:7^33 · mapa:7^14] (only one)
//│ [mapb:8^34]
//│ 	[mapb:8^34 · mapb:8^25]
//│ 		[mapb:8^34 · mapb:8^25 · mapb:8^25] ---> [mapb:8^34 · mapb:8^25] (only one)
//│ [sum:6^32]
//│ 	[sum:6^32 · sum:6^3]
//│ 		[sum:6^32 · sum:6^3 · sum:6^3] ---> [sum:6^32 · sum:6^3] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([sum:6^32]:20^101 ([mapa:7^33]:18^102 ([mapb:8^34]:22^103 primitive:27^104)))
//│ def [mapa:7^33 · mapa:7^14]:19 = (fun lsa:30 -> case lsa:30^39 of {
//│ 	C ha:31 ta:32 => [C (primitive:27^40 ha:31^41) ([mapa:7^33 · mapa:7^14]:19^43 ta:32^44)]
//│ 	| N => [N]})
//│ def [mapa:7^33]:18 = (fun lsa:42 -> case lsa:42^81 of {
//│ 	C ha:43 ta:44 => [C (primitive:27^82 ha:43^83) ([mapa:7^33 · mapa:7^14]:19^85 ta:44^86)]
//│ 	| N => [N]})
//│ def [mapb:8^34 · mapb:8^25]:23 = (fun lsb:39 -> case lsb:39^70 of {
//│ 	C hb:40 tb:41 => [C (primitive:27^71 hb:40^72) ([mapb:8^34 · mapb:8^25]:23^74 tb:41^75)]
//│ 	| N => [N]})
//│ def [mapb:8^34]:22 = (fun lsb:33 -> case lsb:33^50 of {
//│ 	C hb:34 tb:35 => [C (primitive:27^51 hb:34^52) ([mapb:8^34 · mapb:8^25]:23^54 tb:35^55)]
//│ 	| N => [N]})
//│ def [sum:6^32 · sum:6^3]:21 = (fun ls:36 -> case ls:36^61 of {
//│ 	C h:37 t:38 => [S [N] ([sum:6^32 · sum:6^3]:21^63 t:38^64)]
//│ 	| N => [N]})
//│ def [sum:6^32]:20 = (fun ls:45 -> case ls:45^92 of {
//│ 	C h:46 t:47 => [S [N] ([sum:6^32 · sum:6^3]:21^94 t:47^95)]
//│ 	| N => [N]})
//│ def mapa:7 = (fun lsa:12 -> case lsa:12^17 of {
//│ 	C ha:13 ta:14 => [C (primitive:3^18 ha:13^19) (mapa:7^21 ta:14^22)]
//│ 	| N => [N]})
//│ def mapb:8 = (fun lsb:15 -> case lsb:15^28 of {
//│ 	C hb:16 tb:17 => [C (primitive:3^29 hb:16^30) (mapb:8^32 tb:17^33)]
//│ 	| N => [N]})
//│ def sum:6 = (fun ls:9 -> case ls:9^8 of {
//│ 	C h:10 t:11 => [S [N] (sum:6^10 t:11^11)]
//│ 	| N => [N]})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 46: [C 42: (40: primitive:27^40 41: ha:31^41) 45: (43: [mapa:7^33 · mapa:7^14]:19^43 44: ta:32^44)]
//│ [C (primitive:27^40 ha:31^41) ([mapa:7^33 · mapa:7^14]:19^43 ta:32^44)] --->
//│ 	case ls:36^61 of {C h:37 t:38 => [S [N] ([sum:6^32 · sum:6^3]:21^63 t:38^64)] | N => [N]}
//│ 47: [N]
//│ [N] --->
//│ 	case ls:36^61 of {C h:37 t:38 => [S [N] ([sum:6^32 · sum:6^3]:21^63 t:38^64)] | N => [N]}
//│ 57: [C 53: (51: primitive:27^51 52: hb:34^52) 56: (54: [mapb:8^34 · mapb:8^25]:23^54 55: tb:35^55)]
//│ [C (primitive:27^51 hb:34^52) ([mapb:8^34 · mapb:8^25]:23^54 tb:35^55)] --->
//│ 	case lsa:42^81 of {C ha:43 ta:44 => [C (primitive:27^82 ha:43^83) ([mapa:7^33 · mapa:7^14]:19^85 ta:44^86)] | N => [N]}
//│ 58: [N]
//│ [N] --->
//│ 	case lsa:42^81 of {C ha:43 ta:44 => [C (primitive:27^82 ha:43^83) ([mapa:7^33 · mapa:7^14]:19^85 ta:44^86)] | N => [N]}
//│ 77: [C 73: (71: primitive:27^71 72: hb:40^72) 76: (74: [mapb:8^34 · mapb:8^25]:23^74 75: tb:41^75)]
//│ [C (primitive:27^71 hb:40^72) ([mapb:8^34 · mapb:8^25]:23^74 tb:41^75)] --->
//│ 	case lsa:30^39 of {C ha:31 ta:32 => [C (primitive:27^40 ha:31^41) ([mapa:7^33 · mapa:7^14]:19^43 ta:32^44)] | N => [N]}
//│ 78: [N]
//│ [N] --->
//│ 	case lsa:30^39 of {C ha:31 ta:32 => [C (primitive:27^40 ha:31^41) ([mapa:7^33 · mapa:7^14]:19^43 ta:32^44)] | N => [N]}
//│ 88: [C 84: (82: primitive:27^82 83: ha:43^83) 87: (85: [mapa:7^33 · mapa:7^14]:19^85 86: ta:44^86)]
//│ [C (primitive:27^82 ha:43^83) ([mapa:7^33 · mapa:7^14]:19^85 ta:44^86)] --->
//│ 	case ls:45^92 of {C h:46 t:47 => [S [N] ([sum:6^32 · sum:6^3]:21^94 t:47^95)] | N => [N]}
//│ 89: [N]
//│ [N] --->
//│ 	case ls:45^92 of {C h:46 t:47 => [S [N] ([sum:6^32 · sum:6^3]:21^94 t:47^95)] | N => [N]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([sum:6^32]:20^108 ([mapa:7^33]:18^109 ([mapb:8^34]:22^110 primitive:27^111)))
//│ def [mapa:7^33 · mapa:7^14]:19 = (fun lsa:30 -> lsa:30^117)
//│ def [mapa:7^33]:18 = (fun lsa:42 -> lsa:42^189)
//│ def [mapb:8^34 · mapb:8^25]:23 = (fun lsb:39 -> case lsb:39^144 of {
//│ 	C hb:40 tb:41 => let ha:31 = (primitive:27^162 hb:40^163)
//│ 	in let ta:32 = ([mapb:8^34 · mapb:8^25]:23^158 tb:41^159)
//│ 	in let h:37 = (primitive:27^154 ha:31^155)
//│ 	in let t:38 = ([mapa:7^33 · mapa:7^14]:19^150 ta:32^151)
//│ 	in [S [N] ([sum:6^32 · sum:6^3]:21^146 t:38^147)]
//│ 	| N => [N]})
//│ def [mapb:8^34]:22 = (fun lsb:33 -> case lsb:33^119 of {
//│ 	C hb:34 tb:35 => let ha:43 = (primitive:27^137 hb:34^138)
//│ 	in let ta:44 = ([mapb:8^34 · mapb:8^25]:23^133 tb:35^134)
//│ 	in let h:46 = (primitive:27^129 ha:43^130)
//│ 	in let t:47 = ([mapa:7^33 · mapa:7^14]:19^125 ta:44^126)
//│ 	in [S [N] ([sum:6^32 · sum:6^3]:21^121 t:47^122)]
//│ 	| N => [N]})
//│ def [sum:6^32 · sum:6^3]:21 = (fun ls:36 -> ls:36^202)
//│ def [sum:6^32]:20 = (fun ls:45 -> ls:45^115)
//│ def mapa:7 = (fun lsa:12 -> case lsa:12^169 of {
//│ 	C ha:13 ta:14 => [C (primitive:3^170 ha:13^171) (mapa:7^173 ta:14^174)]
//│ 	| N => [N]})
//│ def mapb:8 = (fun lsb:15 -> case lsb:15^191 of {
//│ 	C hb:16 tb:17 => [C (primitive:3^192 hb:16^193) (mapb:8^195 tb:17^196)]
//│ 	| N => [N]})
//│ def sum:6 = (fun ls:9 -> case ls:9^180 of {
//│ 	C h:10 t:11 => [S [N] (sum:6^182 t:11^183)]
//│ 	| N => [N]})
//│ <<<<<<< after fusion <<<<<<<

fun map(ls) = if ls is
    N then N
    C(hhh, ttt) then C((
        head => if head is 
            T then K
            TT then KK
    )(hhh), map(ttt))
fun last(ys) = if ys is
    N then x => x
    C(h, t) then x => last(t)(h)
fun lastDrive(xs) = if xs is
    N then None
    C(hh, tt) then Some(last(tt)(hh))
lastDrive(map(C(T, C(TT, N))))
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |N|↵|C|(|hhh|,| |ttt|)| |#then| |C|(|(|→|head| |=>| |#if| |head| |is| |→|T| |#then| |K|↵|TT| |#then| |KK|←|←|↵|)|(|hhh|)|,| |map|(|ttt|)|)|←|↵|#fun| |last|(|ys|)| |#=| |#if| |ys| |is|→|N| |#then| |x| |=>| |x|↵|C|(|h|,| |t|)| |#then| |x| |=>| |last|(|t|)|(|h|)|←|↵|#fun| |lastDrive|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |None|↵|C|(|hh|,| |tt|)| |#then| |Some|(|last|(|tt|)|(|hh|)|)|←|↵|lastDrive|(|map|(|C|(|T|,| |C|(|TT|,| |N|)|)|)|)|
//│ Parsed: {fun map = ls, => if ls is ‹(N) then N; (C (hhh, ttt,)) then C ('(' head, => if head is ‹(T) then K; (TT) then KK›, ')' (hhh,), map (ttt,),)›; fun last = ys, => if ys is ‹(N) then x, => x; (C (h, t,)) then x, => last (t,) (h,)›; fun lastDrive = xs, => if xs is ‹(N) then None; (C (hh, tt,)) then Some (last (tt,) (hh,),)›; lastDrive (map (C (T, C (TT, N,),),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (lastDrive:8^37 (map:6^38 [C [T] [C [TT] [N]]]))
//│ def last:7 = (fun ys:13 -> case ys:13^16 of {
//│ 	N => (fun x:14 -> x:14^17)
//│ 	| C h:15 t:16 => (fun x:17 -> ((last:7^19 t:16^20) h:15^22))})
//│ def lastDrive:8 = (fun xs:18 -> case xs:18^27 of {
//│ 	N => [None]
//│ 	| C hh:19 tt:20 => [Some ((last:7^29 tt:20^30) hh:19^32)]})
//│ def map:6 = (fun ls:9 -> case ls:9^1 of {
//│ 	N => [N]
//│ 	| C hhh:10 ttt:11 => [C ((fun head:12 -> case head:12^3 of {
//│ 		T => [K]
//│ 		| TT => [KK]}) hhh:10^8) (map:6^10 ttt:11^11)]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(8'9_callres, 9'12_callres) <: 11'ys
//│ 	[-map:6^10 · -map:6^10 · -map:6^38 · +lastDrive:8^37 · +last:7^29 · +last:7^19]  --->  [-map:6^10 · -map:6^38 · +lastDrive:8^37 · +last:7^29]
//│ NoProd <: 5'ttt
//│ 	[+map:6^38 · +map:6^10 · +map:6^10 · +map:6^10]  --->  [+map:6^38 · +map:6^10 · +map:6^10]
//│ NoProd <: 14't
//│ 	[-map:6^10 · -map:6^10 · -map:6^38 · +lastDrive:8^37 · +last:7^29 · +last:7^19 · +last:7^19]  --->  [-map:6^10 · -map:6^10 · -map:6^38 · +lastDrive:8^37 · +last:7^29 · +last:7^19]
//│ 	[-map:6^10 · -map:6^38 · +lastDrive:8^37 · +last:7^29 · +last:7^19]  --->  [-map:6^10 · -map:6^38 · +lastDrive:8^37 · +last:7^29]
//│ NoProd <: 11'ys
//│ 	[-map:6^38 · +lastDrive:8^37 · +last:7^29 · +last:7^19]  --->  [-map:6^38 · +lastDrive:8^37 · +last:7^29]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> splitted knots >>>>>>>
//│ [lastDrive:8^37 · last:7^29 · last:7^19 · last:7^19] --> [lastDrive:8^37 · last:7^29 · last:7^19]
//│ [lastDrive:8^37 · last:7^29 · last:7^19] --> [lastDrive:8^37 · last:7^29]
//│ [map:6^38 · map:6^10 · map:6^10 · map:6^10] --> [map:6^38 · map:6^10 · map:6^10]
//│ [map:6^38 · map:6^10 · map:6^10] --> [map:6^38 · map:6^10 · map:6^10]
//│ 	[map:6^38 · map:6^10]
//│ 	!!MORE THAN ONE MATCH
//│ [map:6^38 · map:6^10] --> [map:6^38 · map:6^10]
//│ [map:6^38] --> [map:6^38]
//│ [] --> []
//│ <<<<<<< splitted knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [lastDrive:8^37]
//│ 	[lastDrive:8^37 · last:7^29]
//│ 		[lastDrive:8^37 · last:7^29 · last:7^19] ---> [lastDrive:8^37 · last:7^29] (only one)
//│ [map:6^38]
//│ 	[map:6^38 · map:6^10]
//│ 		[map:6^38 · map:6^10 · map:6^10] ---> [map:6^38 · map:6^10] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ([lastDrive:8^37]:23^97 ([map:6^38]:21^98 [C [T] [C [TT] [N]]]))
//│ def [lastDrive:8^37 · last:7^29]:24 = (fun ys:42 -> case ys:42^86 of {
//│ 	N => (fun x:43 -> x:43^87)
//│ 	| C h:44 t:45 => (fun x:46 -> (([lastDrive:8^37 · last:7^29]:24^89 t:45^90) h:44^92))})
//│ def [lastDrive:8^37]:23 = (fun xs:39 -> case xs:39^76 of {
//│ 	N => [None]
//│ 	| C hh:40 tt:41 => [Some (([lastDrive:8^37 · last:7^29]:24^78 tt:41^79) hh:40^81)]})
//│ def [map:6^38 · map:6^10]:22 = (fun ls:35 -> case ls:35^61 of {
//│ 	N => [N]
//│ 	| C hhh:36 ttt:37 => [C ((fun head:38 -> case head:38^63 of {
//│ 		T => [K]
//│ 		| TT => [KK]}) hhh:36^68) ([map:6^38 · map:6^10]:22^70 ttt:37^71)]})
//│ def [map:6^38]:21 = (fun ls:31 -> case ls:31^46 of {
//│ 	N => [N]
//│ 	| C hhh:32 ttt:33 => [C ((fun head:34 -> case head:34^48 of {
//│ 		T => [K]
//│ 		| TT => [KK]}) hhh:32^53) ([map:6^38 · map:6^10]:22^55 ttt:33^56)]})
//│ def last:7 = (fun ys:13 -> case ys:13^25 of {
//│ 	N => (fun x:14 -> x:14^26)
//│ 	| C h:15 t:16 => (fun x:17 -> ((last:7^28 t:16^29) h:15^31))})
//│ def lastDrive:8 = (fun xs:18 -> case xs:18^36 of {
//│ 	N => [None]
//│ 	| C hh:19 tt:20 => [Some ((last:7^38 tt:20^39) hh:19^41)]})
//│ def map:6 = (fun ls:9 -> case ls:9^10 of {
//│ 	N => [N]
//│ 	| C hhh:10 ttt:11 => [C ((fun head:12 -> case head:12^12 of {
//│ 		T => [K]
//│ 		| TT => [KK]}) hhh:10^17) (map:6^19 ttt:11^20)]})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 100: [TT]
//│ [TT] --->
//│ 	case head:38^63 of {T => [K] | TT => [KK]}
//│ 101: [N]
//│ [N] --->
//│ 	case ls:35^61 of {N => [N] | C hhh:36 ttt:37 => [C ((fun head:38 -> case head:38^63 of {T => [K] | TT => [KK]}) hhh:36^68) ([map:6^38 · map:6^10]:22^70 ttt:37^71)]}
//│ 102: [C 100: [TT] 101: [N]]
//│ [C [TT] [N]] --->
//│ 	case ls:35^61 of {N => [N] | C hhh:36 ttt:37 => [C ((fun head:38 -> case head:38^63 of {T => [K] | TT => [KK]}) hhh:36^68) ([map:6^38 · map:6^10]:22^70 ttt:37^71)]}
//│ 103: [C 99: [T] 102: [C 100: [TT] 101: [N]]]
//│ [C [T] [C [TT] [N]]] --->
//│ 	case ls:31^46 of {N => [N] | C hhh:32 ttt:33 => [C ((fun head:34 -> case head:34^48 of {T => [K] | TT => [KK]}) hhh:32^53) ([map:6^38 · map:6^10]:22^55 ttt:33^56)]}
//│ 47: [N]
//│ [N] --->
//│ 	case xs:39^76 of {N => [None] | C hh:40 tt:41 => [Some (([lastDrive:8^37 · last:7^29]:24^78 tt:41^79) hh:40^81)]}
//│ 58: [C 54: (52: (fun head:34 -> 51: case 48: head:34^48 of {T => 49: [K] | TT => 50: [KK]}) 53: hhh:32^53) 57: (55: [map:6^38 · map:6^10]:22^55 56: ttt:33^56)]
//│ [C ((fun head:34 -> case head:34^48 of {T => [K] | TT => [KK]}) hhh:32^53) ([map:6^38 · map:6^10]:22^55 ttt:33^56)] --->
//│ 	case xs:39^76 of {N => [None] | C hh:40 tt:41 => [Some (([lastDrive:8^37 · last:7^29]:24^78 tt:41^79) hh:40^81)]}
//│ 62: [N]
//│ [N] --->
//│ 	case ys:42^86 of {N => (fun x:43 -> x:43^87) | C h:44 t:45 => (fun x:46 -> (([lastDrive:8^37 · last:7^29]:24^89 t:45^90) h:44^92))}
//│ 73: [C 69: (67: (fun head:38 -> 66: case 63: head:38^63 of {T => 64: [K] | TT => 65: [KK]}) 68: hhh:36^68) 72: (70: [map:6^38 · map:6^10]:22^70 71: ttt:37^71)]
//│ [C ((fun head:38 -> case head:38^63 of {T => [K] | TT => [KK]}) hhh:36^68) ([map:6^38 · map:6^10]:22^70 ttt:37^71)] --->
//│ 	case ys:42^86 of {N => (fun x:43 -> x:43^87) | C h:44 t:45 => (fun x:46 -> (([lastDrive:8^37 · last:7^29]:24^89 t:45^90) h:44^92))}
//│ 99: [T]
//│ [T] --->
//│ 	case head:34^48 of {T => [K] | TT => [KK]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ([lastDrive:8^37]:23^106 ([map:6^38]:21^107 let hhh:32 = [K]
//│ in let ttt:33 = 
//│ 	let hhh:36 = [KK]
//│ 	in let ttt:37 = (fun x:43 -> x:43^138)
//│ 	in let h:44 = ((fun head:38 -> head:38^133) hhh:36^135)
//│ 	in let t:45 = ([map:6^38 · map:6^10]:22^129 ttt:37^130)
//│ 	in (fun x:46 -> (([lastDrive:8^37 · last:7^29]:24^123 t:45^124) h:44^126))
//│ in let hh:40 = ((fun head:34 -> head:34^118) hhh:32^120)
//│ in let tt:41 = ([map:6^38 · map:6^10]:22^114 ttt:33^115)
//│ in [Some (([lastDrive:8^37 · last:7^29]:24^108 tt:41^109) hh:40^111)]))
//│ def [lastDrive:8^37 · last:7^29]:24 = (fun ys:42 -> ys:42^165)
//│ def [lastDrive:8^37]:23 = (fun xs:39 -> xs:39^167)
//│ def [map:6^38 · map:6^10]:22 = (fun ls:35 -> ls:35^148)
//│ def [map:6^38]:21 = (fun ls:31 -> ls:31^180)
//│ def last:7 = (fun ys:13 -> case ys:13^169 of {
//│ 	N => (fun x:14 -> x:14^170)
//│ 	| C h:15 t:16 => (fun x:17 -> ((last:7^172 t:16^173) h:15^175))})
//│ def lastDrive:8 = (fun xs:18 -> case xs:18^182 of {
//│ 	N => [None]
//│ 	| C hh:19 tt:20 => [Some ((last:7^184 tt:20^185) hh:19^187)]})
//│ def map:6 = (fun ls:9 -> case ls:9^150 of {
//│ 	N => [N]
//│ 	| C hhh:10 ttt:11 => [C ((fun head:12 -> case head:12^152 of {
//│ 		T => [K]
//│ 		| TT => [KK]}) hhh:10^157) (map:6^159 ttt:11^160)]})
//│ <<<<<<< after fusion <<<<<<<
