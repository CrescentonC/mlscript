:NewParser
:ParseOnly


fun inter(xs) = if xs is
    N then ys => ys
    C(h, t) then ys => C(h, inter(ys)(t))
let rec l1 = C(1, C(2, l1))
let rec l2 = C(9, C(8, l2))
inter(l1)(l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|#let| |#rec| |l1| |#=| |C|(|1|,| |C|(|2|,| |l1|)|)|↵|#let| |#rec| |l2| |#=| |C|(|9|,| |C|(|8|,| |l2|)|)|↵|inter|(|l1|)|(|l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; let rec l1 = C (1, C (2, l1,),); let rec l2 = C (9, C (8, l2,),); inter (l1,) (l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def inter:6 = 13: (fun xs:9 -> 12: case 1: xs:9 of {N -> 3: (fun ys:10 -> 2: ys:10) | C h:11 t:12 -> 11: (fun ys:13 -> 10: [C 4: h:11 9: (7: (5: inter:6 6: ys:13) 8: t:12)])})
//│ def l1:7 = 18: [C 14: 1 17: [C 15: 2 16: l1:7]]
//│ def l2:8 = 23: [C 19: 9 22: [C 20: 8 21: l2:8]]
//│ 28: (26: (24: inter:6 25: l1:7) 27: l2:8)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (
//│   (l2:8^27 ⋅ l2:8^21 ⋅ ɛ, C((ɛ, NoProd()), (l2:8^21 ⋅ ɛ, 2'l2))),
//│   (inter:6^24 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ ɛ, 7'ys)
//│ ) :::: (
//│   (l2:8^27 ⋅ ɛ, C((ɛ, NoProd()), (l2:8^21 ⋅ ɛ, 2'l2))),
//│   (inter:6^24 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ ɛ, 7'ys)
//│ )
//│ (
//│   (l1:7^25 ⋅ l1:7^16 ⋅ ɛ, C((ɛ, NoProd()), (l1:7^16 ⋅ ɛ, 1'l1))),
//│   (inter:6^24 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ ɛ, 7'ys)
//│ ) :::: ((l1:7^25 ⋅ ɛ, C((ɛ, NoProd()), (l1:7^16 ⋅ ɛ, 1'l1))), (inter:6^24 ⋅ inter:6^5 ⋅ ɛ, 7'ys))
//│ ------- defInstance -------
//│ l2:8^27 ⋅ l2:8^21 ⋅ ɛ ==> inter:6^24 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ ɛ:
//│ 	23: [C 9 [C 8 l2:8]]  <-->  12: case xs:9 of {N -> (fun ys:10 -> ys:10) | C h:11 t:12 -> (fun ys:13 -> [C h:11 ((inter:6 ys:13) t:12)])}
//│ l1:7^25 ⋅ ɛ ==> inter:6^24 ⋅ ɛ:
//│ 	18: [C 1 [C 2 l1:7]]  <-->  12: case xs:9 of {N -> (fun ys:10 -> ys:10) | C h:11 t:12 -> (fun ys:13 -> [C h:11 ((inter:6 ys:13) t:12)])}
//│ l2:8^27 ⋅ ɛ ==> inter:6^24 ⋅ inter:6^5 ⋅ ɛ:
//│ 	23: [C 9 [C 8 l2:8]]  <-->  12: case xs:9 of {N -> (fun ys:10 -> ys:10) | C h:11 t:12 -> (fun ys:13 -> [C h:11 ((inter:6 ys:13) t:12)])}
//│ l1:7^25 ⋅ l1:7^16 ⋅ ɛ ==> inter:6^24 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ ɛ:
//│ 	18: [C 1 [C 2 l1:7]]  <-->  12: case xs:9 of {N -> (fun ys:10 -> ys:10) | C h:11 t:12 -> (fun ys:13 -> [C h:11 ((inter:6 ys:13) t:12)])}
//│ l2:8^27 ⋅ ɛ ==> inter:6^24 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ ɛ:
//│ 	22: [C 8 l2:8]  <-->  12: case xs:9 of {N -> (fun ys:10 -> ys:10) | C h:11 t:12 -> (fun ys:13 -> [C h:11 ((inter:6 ys:13) t:12)])}
//│ l1:7^25 ⋅ ɛ ==> inter:6^24 ⋅ inter:6^5 ⋅ inter:6^5 ⋅ ɛ:
//│ 	17: [C 2 l1:7]  <-->  12: case xs:9 of {N -> (fun ys:10 -> ys:10) | C h:11 t:12 -> (fun ys:13 -> [C h:11 ((inter:6 ys:13) t:12)])}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def inter:6 = (fun xs:9 -> case xs:9 of {N -> (fun ys:10 -> ys:10) | C h:11 t:12 -> (fun ys:13 -> [C h:11 ((inter:6 ys:13) t:12)])})
//│ def l1:7 = [C 1 [C 2 l1:7]]
//│ def l2:8 = [C 9 [C 8 l2:8]]
//│ def inter'6'24_inter'6'5_inter'6'5_inter'6'5:17 = (fun xs:9 -> xs:9)
//│ def l1'7'25:15 = 
//│ 	let h:11 = 1 in 
//│ 	let t:12 = 
//│ 		let h:11 = 2 in 
//│ 		let t:12 = l1'7'25:15 in (fun ys:13 -> [C h:11 ((inter'6'24_inter'6'5_inter'6'5_inter'6'5:17 ys:13) t:12)]) 
//│ 	in (fun ys:13 -> [C h:11 ((inter'6'24_inter'6'5:16 ys:13) t:12)])
//│ def inter'6'24_inter'6'5_inter'6'5_inter'6'5_inter'6'5:20 = (fun xs:9 -> xs:9)
//│ def inter'6'24_inter'6'5:16 = (fun xs:9 -> xs:9)
//│ def inter'6'24:14 = (fun xs:9 -> xs:9)
//│ def l2'8'27:18 = 
//│ 	let h:11 = 9 in 
//│ 	let t:12 = 
//│ 		let h:11 = 8 in 
//│ 		let t:12 = l2'8'27:18 in (fun ys:13 -> [C h:11 ((inter'6'24_inter'6'5_inter'6'5_inter'6'5_inter'6'5:20 ys:13) t:12)]) 
//│ 	in (fun ys:13 -> [C h:11 ((inter'6'24_inter'6'5_inter'6'5:19 ys:13) t:12)])
//│ def inter'6'24_inter'6'5_inter'6'5:19 = (fun xs:9 -> xs:9)
//│ ((inter'6'24:14 l1'7'25:15) l2'8'27:18)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<




// NOTE: only head is handled
fun map(ls) = if ls is
    C(h, t) then f => C(f(h), map(t)(f))
    N then f => N
let l = C(K, N)
map(l)(
    x => if x is
        K then T
)
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |f| |=>| |C|(|f|(|h|)|,| |map|(|t|)|(|f|)|)|↵|N| |#then| |f| |=>| |N|←|↵|#let| |l| |#=| |C|(|K|,| |N|)|↵|map|(|l|)|(|→|x| |=>| |#if| |x| |is|→|K| |#then| |T|←|←|↵|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (h, t,)) then f, => C (f (h,), map (t,) (f,),); (N) then f, => N›; let l = C (K, N,); map (l,) (x, => if x is ‹(K) then T›,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = 15: (fun ls:8 -> 14: case 1: ls:8 of {C h:9 t:10 -> 11: (fun f:11 -> 10: [C 4: (2: f:11 3: h:9) 9: (7: (5: map:6 6: t:10) 8: f:11)]) | N -> 13: (fun f:12 -> 12: [N])})
//│ def l:7 = 18: [C 16: [K] 17: [N]]
//│ 26: (21: (19: map:6 20: l:7) 25: (fun x:13 -> 24: case 22: x:13 of {K -> 23: [T]}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ((ɛ, (ɛ, 12'x) => ((ɛ, 13'24_matchres))), (map:6^19 ⋅ map:6^5 ⋅ map:6^5 ⋅ ɛ, 5'f)) :::: ((ɛ, (ɛ, 12'x) => ((ɛ, 13'24_matchres))), (map:6^19 ⋅ map:6^5 ⋅ ɛ, 5'f))
//│ ------- defInstance -------
//│ map:6^19 ⋅ map:6^5 ⋅ l:7^20 ⋅ ɛ ==> map:6^19 ⋅ ɛ:
//│ 	16: [K]  <-->  24: case x:13 of {K -> [T]}
//│ l:7^20 ⋅ ɛ ==> map:6^19 ⋅ ɛ:
//│ 	18: [C [K] [N]]  <-->  14: case ls:8 of {C h:9 t:10 -> (fun f:11 -> [C (f:11 h:9) ((map:6 t:10) f:11)]) | N -> (fun f:12 -> [N])}
//│ l:7^20 ⋅ ɛ ==> map:6^19 ⋅ map:6^5 ⋅ ɛ:
//│ 	17: [N]  <-->  14: case ls:8 of {C h:9 t:10 -> (fun f:11 -> [C (f:11 h:9) ((map:6 t:10) f:11)]) | N -> (fun f:12 -> [N])}
//│ l:7^20 ⋅ ɛ ==> ɛ:
//│ 	16: [K]  <-->  24: case x:13 of {K -> [T]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def map:6 = (fun ls:8 -> case ls:8 of {C h:9 t:10 -> (fun f:11 -> [C (f:11 h:9) ((map:6 t:10) f:11)]) | N -> (fun f:12 -> [N])})
//│ def l:7 = [C [K] [N]]
//│ def map'6'19:14 = (fun ls:8 -> ls:8)
//│ def map'6'19_map'6'5:16 = (fun ls:8 -> ls:8)
//│ def l'7'20:15 = 
//│ 	let h:9 = [T] in 
//│ 	let t:10 = (fun f:12 -> [N]) in (fun f:11 -> [C (f:11 h:9) ((map'6'19_map'6'5:16 t:10) f:11)])
//│ ((map'6'19:14 l'7'20:15) (fun x:13 -> x:13))
//│ <<<<<<<<<< Rewritten <<<<<<<<<<



fun map(ls) = if ls is
    C(h, t) then C(
        (if h is
            K then T
            KK then TT
            KKKK then TTTT
        ),
        map(t)
    )
    N then N
let l = C(K, C(KK, C(KKKK, N)))
map(l)
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|→|(|#if| |h| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|)|,|↵|map|(|t|)|←|↵|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|l|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (h, t,)) then C ('(' if h is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›, ')', map (t,),); (N) then N›; let l = C (K, C (KK, C (KKKK, N,),),); map (l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = 13: (fun ls:8 -> 12: case 1: ls:8 of {C h:9 t:10 -> 10: [C 6: case 2: h:9 of {K -> 3: [T] | KK -> 4: [TT] | KKKK -> 5: [TTTT]} 9: (7: map:6 8: t:10)] | N -> 11: [N]})
//│ def l:7 = 20: [C 14: [K] 19: [C 15: [KK] 18: [C 16: [KKKK] 17: [N]]]]
//│ 23: (21: map:6 22: l:7)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ------- defInstance -------
//│ l:7^22 ⋅ ɛ ==> map:6^21 ⋅ map:6^7 ⋅ map:6^7 ⋅ map:6^7 ⋅ ɛ:
//│ 	17: [N]  <-->  12: case ls:8 of {C h:9 t:10 -> [C case h:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]} (map:6 t:10)] | N -> [N]}
//│ l:7^22 ⋅ ɛ ==> map:6^21 ⋅ map:6^7 ⋅ ɛ:
//│ 	15: [KK]  <-->  6: case h:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}
//│ 	19: [C [KK] [C [KKKK] [N]]]  <-->  12: case ls:8 of {C h:9 t:10 -> [C case h:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]} (map:6 t:10)] | N -> [N]}
//│ l:7^22 ⋅ ɛ ==> map:6^21 ⋅ map:6^7 ⋅ map:6^7 ⋅ ɛ:
//│ 	16: [KKKK]  <-->  6: case h:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}
//│ 	18: [C [KKKK] [N]]  <-->  12: case ls:8 of {C h:9 t:10 -> [C case h:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]} (map:6 t:10)] | N -> [N]}
//│ l:7^22 ⋅ ɛ ==> map:6^21 ⋅ ɛ:
//│ 	14: [K]  <-->  6: case h:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]}
//│ 	20: [C [K] [C [KK] [C [KKKK] [N]]]]  <-->  12: case ls:8 of {C h:9 t:10 -> [C case h:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]} (map:6 t:10)] | N -> [N]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def map:6 = (fun ls:8 -> case ls:8 of {C h:9 t:10 -> [C case h:9 of {K -> [T] | KK -> [TT] | KKKK -> [TTTT]} (map:6 t:10)] | N -> [N]})
//│ def l:7 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def l'7'22:12 = 
//│ 	let h:9 = [T] in 
//│ 	let t:10 = 
//│ 		let h:9 = [TT] in 
//│ 		let t:10 = 
//│ 			let h:9 = [TTTT] in 
//│ 			let t:10 = [N] in [C h:9 (map'6'21_map'6'7_map'6'7_map'6'7:15 t:10)] 
//│ 		in [C h:9 (map'6'21_map'6'7_map'6'7:14 t:10)] 
//│ 	in [C h:9 (map'6'21_map'6'7:13 t:10)]
//│ def map'6'21_map'6'7_map'6'7_map'6'7:15 = (fun ls:8 -> ls:8)
//│ def map'6'21_map'6'7_map'6'7:14 = (fun ls:8 -> ls:8)
//│ def map'6'21_map'6'7:13 = (fun ls:8 -> ls:8)
//│ def map'6'21:11 = (fun ls:8 -> ls:8)
//│ (map'6'21:11 l'7'22:12)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<



// NOTE: consumer `c` is used twice in its body, but it fine here
let aa = T(N, L, L)
let bb = T(N, L, L)
let t = T(K, aa, bb)
fun c(x) = if x is
    T(n, l, r) then T(
        (if n is
            K then KK
            N then NN
        ),
        c(l),
        c(r)
    )
    L then LL
c(t)
//│ |#let| |aa| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |bb| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |t| |#=| |T|(|K|,| |aa|,| |bb|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|T|(|n|,| |l|,| |r|)| |#then| |T|(|→|(|#if| |n| |is|→|K| |#then| |KK|↵|N| |#then| |NN|←|↵|)|,|↵|c|(|l|)|,|↵|c|(|r|)|←|↵|)|↵|L| |#then| |LL|←|↵|c|(|t|)|
//│ Parsed: {let aa = T (N, L, L,); let bb = T (N, L, L,); let t = T (K, aa, bb,); fun c = x, => if x is ‹(T (n, l, r,)) then T ('(' if n is ‹(K) then KK; (N) then NN›, ')', c (l,), c (r,),); (L) then LL›; c (t,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def aa:6 = 4: [T 1: [N] 2: [L] 3: [L]]
//│ def bb:7 = 8: [T 5: [N] 6: [L] 7: [L]]
//│ def t:8 = 12: [T 9: [K] 10: aa:6 11: bb:7]
//│ def c:9 = 27: (fun x:10 -> 26: case 13: x:10 of {T n:11 l:12 r:13 -> 24: [T 17: case 14: n:11 of {K -> 15: [KK] | N -> 16: [NN]} 20: (18: c:9 19: l:12) 23: (21: c:9 22: r:13)] | L -> 25: [LL]})
//│ 30: (28: c:9 29: t:8)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ------- defInstance -------
//│ t:8^29 ⋅ bb:7^11 ⋅ ɛ ==> c:9^28 ⋅ c:9^21 ⋅ c:9^21 ⋅ ɛ:
//│ 	7: [L]  <-->  26: case x:10 of {T n:11 l:12 r:13 -> [T case n:11 of {K -> [KK] | N -> [NN]} (c:9 l:12) (c:9 r:13)] | L -> [LL]}
//│ t:8^29 ⋅ ɛ ==> c:9^28 ⋅ ɛ:
//│ 	12: [T [K] aa:6 bb:7]  <-->  26: case x:10 of {T n:11 l:12 r:13 -> [T case n:11 of {K -> [KK] | N -> [NN]} (c:9 l:12) (c:9 r:13)] | L -> [LL]}
//│ 	9: [K]  <-->  17: case n:11 of {K -> [KK] | N -> [NN]}
//│ t:8^29 ⋅ bb:7^11 ⋅ ɛ ==> c:9^28 ⋅ c:9^21 ⋅ c:9^18 ⋅ ɛ:
//│ 	6: [L]  <-->  26: case x:10 of {T n:11 l:12 r:13 -> [T case n:11 of {K -> [KK] | N -> [NN]} (c:9 l:12) (c:9 r:13)] | L -> [LL]}
//│ t:8^29 ⋅ aa:6^10 ⋅ ɛ ==> c:9^28 ⋅ c:9^18 ⋅ c:9^21 ⋅ ɛ:
//│ 	3: [L]  <-->  26: case x:10 of {T n:11 l:12 r:13 -> [T case n:11 of {K -> [KK] | N -> [NN]} (c:9 l:12) (c:9 r:13)] | L -> [LL]}
//│ t:8^29 ⋅ aa:6^10 ⋅ ɛ ==> c:9^28 ⋅ c:9^18 ⋅ c:9^18 ⋅ ɛ:
//│ 	2: [L]  <-->  26: case x:10 of {T n:11 l:12 r:13 -> [T case n:11 of {K -> [KK] | N -> [NN]} (c:9 l:12) (c:9 r:13)] | L -> [LL]}
//│ t:8^29 ⋅ bb:7^11 ⋅ ɛ ==> c:9^28 ⋅ c:9^21 ⋅ ɛ:
//│ 	5: [N]  <-->  17: case n:11 of {K -> [KK] | N -> [NN]}
//│ 	8: [T [N] [L] [L]]  <-->  26: case x:10 of {T n:11 l:12 r:13 -> [T case n:11 of {K -> [KK] | N -> [NN]} (c:9 l:12) (c:9 r:13)] | L -> [LL]}
//│ t:8^29 ⋅ aa:6^10 ⋅ ɛ ==> c:9^28 ⋅ c:9^18 ⋅ ɛ:
//│ 	1: [N]  <-->  17: case n:11 of {K -> [KK] | N -> [NN]}
//│ 	4: [T [N] [L] [L]]  <-->  26: case x:10 of {T n:11 l:12 r:13 -> [T case n:11 of {K -> [KK] | N -> [NN]} (c:9 l:12) (c:9 r:13)] | L -> [LL]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def aa:6 = [T [N] [L] [L]]
//│ def bb:7 = [T [N] [L] [L]]
//│ def t:8 = [T [K] aa:6 bb:7]
//│ def c:9 = (fun x:10 -> case x:10 of {T n:11 l:12 r:13 -> [T case n:11 of {K -> [KK] | N -> [NN]} (c:9 l:12) (c:9 r:13)] | L -> [LL]})
//│ def t'8'29_aa'6'10:21 = 
//│ 	let n:11 = [NN] in 
//│ 	let l:12 = [LL] in 
//│ 	let r:13 = [LL] in [T n:11 (c'9'28_c'9'18_c'9'18:22 l:12) (c'9'28_c'9'18_c'9'21:23 r:13)]
//│ def c'9'28_c'9'18_c'9'21:23 = (fun x:10 -> x:10)
//│ def c'9'28_c'9'21:17 = (fun x:10 -> x:10)
//│ def t'8'29_bb'7'11:18 = 
//│ 	let n:11 = [NN] in 
//│ 	let l:12 = [LL] in 
//│ 	let r:13 = [LL] in [T n:11 (c'9'28_c'9'21_c'9'18:19 l:12) (c'9'28_c'9'21_c'9'21:20 r:13)]
//│ def c'9'28_c'9'18_c'9'18:22 = (fun x:10 -> x:10)
//│ def c'9'28_c'9'21_c'9'18:19 = (fun x:10 -> x:10)
//│ def t'8'29:15 = 
//│ 	let n:11 = [KK] in 
//│ 	let l:12 = t'8'29_aa'6'10:21 in 
//│ 	let r:13 = t'8'29_bb'7'11:18 in [T n:11 (c'9'28_c'9'18:16 l:12) (c'9'28_c'9'21:17 r:13)]
//│ def c'9'28_c'9'18:16 = (fun x:10 -> x:10)
//│ def c'9'28:14 = (fun x:10 -> x:10)
//│ def c'9'28_c'9'21_c'9'21:20 = (fun x:10 -> x:10)
//│ (c'9'28:14 t'8'29:15)
//│ <<<<<<<<<< Rewritten <<<<<<<<<<




fun sum(ls) = if ls is
    C(h, t) then S(N, sum(t))
    N then N
fun mapa(lsa) = if lsa is
    C(ha, ta) then C(primitive(ha), mapa(ta))
    N then N
fun mapb(lsb) = if lsb is
    C(hb, tb) then C(primitive(hb), mapb(tb))
    N then N
sum(mapa(mapb(primitive)))
//│ |#fun| |sum|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |S|(|N|,| |sum|(|t|)|)|↵|N| |#then| |N|←|↵|#fun| |mapa|(|lsa|)| |#=| |#if| |lsa| |is|→|C|(|ha|,| |ta|)| |#then| |C|(|primitive|(|ha|)|,| |mapa|(|ta|)|)|↵|N| |#then| |N|←|↵|#fun| |mapb|(|lsb|)| |#=| |#if| |lsb| |is|→|C|(|hb|,| |tb|)| |#then| |C|(|primitive|(|hb|)|,| |mapb|(|tb|)|)|↵|N| |#then| |N|←|↵|sum|(|mapa|(|mapb|(|primitive|)|)|)|
//│ Parsed: {fun sum = ls, => if ls is ‹(C (h, t,)) then S (N, sum (t,),); (N) then N›; fun mapa = lsa, => if lsa is ‹(C (ha, ta,)) then C (primitive (ha,), mapa (ta,),); (N) then N›; fun mapb = lsb, => if lsb is ‹(C (hb, tb,)) then C (primitive (hb,), mapb (tb,),); (N) then N›; sum (mapa (mapb (primitive,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def sum:6 = 9: (fun ls:9 -> 8: case 1: ls:9 of {C h:10 t:11 -> 6: [S 2: [N] 5: (3: sum:6 4: t:11)] | N -> 7: [N]})
//│ def mapa:7 = 20: (fun lsa:12 -> 19: case 10: lsa:12 of {C ha:13 ta:14 -> 17: [C 13: (11: primitive:3 12: ha:13) 16: (14: mapa:7 15: ta:14)] | N -> 18: [N]})
//│ def mapb:8 = 31: (fun lsb:15 -> 30: case 21: lsb:15 of {C hb:16 tb:17 -> 28: [C 24: (22: primitive:3 23: hb:16) 27: (25: mapb:8 26: tb:17)] | N -> 29: [N]})
//│ 38: (32: sum:6 37: (33: mapa:7 36: (34: mapb:8 35: primitive:3)))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ (
//│   (mapa:7^33 ⋅ mapa:7^14 ⋅ mapa:7^14 ⋅ ɛ, C((ɛ, 11'13_callres), (ɛ, 12'16_callres))),
//│   (sum:6^32 ⋅ sum:6^3 ⋅ sum:6^3 ⋅ ɛ, 3'ls)
//│ ) :::: (
//│   (mapa:7^33 ⋅ mapa:7^14 ⋅ ɛ, C((ɛ, 11'13_callres), (ɛ, 12'16_callres))),
//│   (sum:6^32 ⋅ sum:6^3 ⋅ ɛ, 3'ls)
//│ )
//│ (
//│   (mapb:8^34 ⋅ mapb:8^25 ⋅ mapb:8^25 ⋅ ɛ, C((ɛ, 17'24_callres), (ɛ, 18'27_callres))),
//│   (mapa:7^33 ⋅ mapa:7^14 ⋅ mapa:7^14 ⋅ ɛ, 8'lsa)
//│ ) :::: (
//│   (mapb:8^34 ⋅ mapb:8^25 ⋅ ɛ, C((ɛ, 17'24_callres), (ɛ, 18'27_callres))),
//│   (mapa:7^33 ⋅ mapa:7^14 ⋅ ɛ, 8'lsa)
//│ )
//│ ------- defInstance -------
//│ mapb:8^34 ⋅ mapb:8^25 ⋅ mapb:8^25 ⋅ ɛ ==> mapa:7^33 ⋅ mapa:7^14 ⋅ mapa:7^14 ⋅ ɛ:
//│ 	29: [N]  <-->  19: case lsa:12 of {C ha:13 ta:14 -> [C (primitive:3 ha:13) (mapa:7 ta:14)] | N -> [N]}
//│ mapb:8^34 ⋅ mapb:8^25 ⋅ ɛ ==> mapa:7^33 ⋅ mapa:7^14 ⋅ ɛ:
//│ 	28: [C (primitive:3 hb:16) (mapb:8 tb:17)]  <-->  19: case lsa:12 of {C ha:13 ta:14 -> [C (primitive:3 ha:13) (mapa:7 ta:14)] | N -> [N]}
//│ 	29: [N]  <-->  19: case lsa:12 of {C ha:13 ta:14 -> [C (primitive:3 ha:13) (mapa:7 ta:14)] | N -> [N]}
//│ mapa:7^33 ⋅ ɛ ==> sum:6^32 ⋅ ɛ:
//│ 	17: [C (primitive:3 ha:13) (mapa:7 ta:14)]  <-->  8: case ls:9 of {C h:10 t:11 -> [S [N] (sum:6 t:11)] | N -> [N]}
//│ 	18: [N]  <-->  8: case ls:9 of {C h:10 t:11 -> [S [N] (sum:6 t:11)] | N -> [N]}
//│ mapa:7^33 ⋅ mapa:7^14 ⋅ ɛ ==> sum:6^32 ⋅ sum:6^3 ⋅ ɛ:
//│ 	17: [C (primitive:3 ha:13) (mapa:7 ta:14)]  <-->  8: case ls:9 of {C h:10 t:11 -> [S [N] (sum:6 t:11)] | N -> [N]}
//│ 	18: [N]  <-->  8: case ls:9 of {C h:10 t:11 -> [S [N] (sum:6 t:11)] | N -> [N]}
//│ mapb:8^34 ⋅ ɛ ==> mapa:7^33 ⋅ ɛ:
//│ 	28: [C (primitive:3 hb:16) (mapb:8 tb:17)]  <-->  19: case lsa:12 of {C ha:13 ta:14 -> [C (primitive:3 ha:13) (mapa:7 ta:14)] | N -> [N]}
//│ 	29: [N]  <-->  19: case lsa:12 of {C ha:13 ta:14 -> [C (primitive:3 ha:13) (mapa:7 ta:14)] | N -> [N]}
//│ mapa:7^33 ⋅ mapa:7^14 ⋅ mapa:7^14 ⋅ ɛ ==> sum:6^32 ⋅ sum:6^3 ⋅ sum:6^3 ⋅ ɛ:
//│ 	18: [N]  <-->  8: case ls:9 of {C h:10 t:11 -> [S [N] (sum:6 t:11)] | N -> [N]}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def sum:6 = (fun ls:9 -> case ls:9 of {C h:10 t:11 -> [S [N] (sum:6 t:11)] | N -> [N]})
//│ def mapa:7 = (fun lsa:12 -> case lsa:12 of {C ha:13 ta:14 -> [C (primitive:3 ha:13) (mapa:7 ta:14)] | N -> [N]})
//│ def mapb:8 = (fun lsb:15 -> case lsb:15 of {C hb:16 tb:17 -> [C (primitive:3 hb:16) (mapb:8 tb:17)] | N -> [N]})
//│ def mapb'8'34_mapb'8'25:23 = (fun lsb:15 -> case lsb:15 of {C hb:16 tb:17 -> 
//│ 	let ha:13 = (primitive:3 hb:16) in 
//│ 	let ta:14 = (mapb'8'34_mapb'8'25:23 tb:17) in 
//│ 	let h:10 = (primitive:3 ha:13) in 
//│ 	let t:11 = (mapa'7'33_mapa'7'14:22 ta:14) in [S [N] (sum'6'32_sum'6'3:21 t:11)] | N -> [N]})
//│ def mapa'7'33_mapa'7'14:22 = (fun lsa:12 -> lsa:12)
//│ def sum'6'32_sum'6'3:21 = (fun ls:9 -> ls:9)
//│ def sum'6'32:18 = (fun ls:9 -> ls:9)
//│ def mapa'7'33:19 = (fun lsa:12 -> lsa:12)
//│ def mapb'8'34:20 = (fun lsb:15 -> case lsb:15 of {C hb:16 tb:17 -> 
//│ 	let ha:13 = (primitive:3 hb:16) in 
//│ 	let ta:14 = (mapb'8'34_mapb'8'25:23 tb:17) in 
//│ 	let h:10 = (primitive:3 ha:13) in 
//│ 	let t:11 = (mapa'7'33_mapa'7'14:22 ta:14) in [S [N] (sum'6'32_sum'6'3:21 t:11)] | N -> [N]})
//│ (sum'6'32:18 (mapa'7'33:19 (mapb'8'34:20 primitive:3)))
//│ <<<<<<<<<< Rewritten <<<<<<<<<<


fun last(ys) = if ys is
    N then x => x
    C(h, t) then x => last(t)(h)
fun lastDrive(xs) = if xs is
    N then None
    C(hh, tt) then Some(last(tt)(hh))
lastDrive(C(1, C(2, N)))
//│ |#fun| |last|(|ys|)| |#=| |#if| |ys| |is|→|N| |#then| |x| |=>| |x|↵|C|(|h|,| |t|)| |#then| |x| |=>| |last|(|t|)|(|h|)|←|↵|#fun| |lastDrive|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |None|↵|C|(|hh|,| |tt|)| |#then| |Some|(|last|(|tt|)|(|hh|)|)|←|↵|lastDrive|(|C|(|1|,| |C|(|2|,| |N|)|)|)|
//│ Parsed: {fun last = ys, => if ys is ‹(N) then x, => x; (C (h, t,)) then x, => last (t,) (h,)›; fun lastDrive = xs, => if xs is ‹(N) then None; (C (hh, tt,)) then Some (last (tt,) (hh,),)›; lastDrive (C (1, C (2, N,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def last:6 = 11: (fun ys:8 -> 10: case 1: ys:8 of {N -> 3: (fun x:9 -> 2: x:9) | C h:10 t:11 -> 9: (fun x:12 -> 8: (6: (4: last:6 5: t:11) 7: h:10))})
//│ def lastDrive:7 = 21: (fun xs:13 -> 20: case 12: xs:13 of {N -> 13: [None] | C hh:14 tt:15 -> 19: [Some 18: (16: (14: last:6 15: tt:15) 17: hh:14)]})
//│ 28: (22: lastDrive:7 27: [C 23: 1 26: [C 24: 2 25: [N]]])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ ------- recursive -------
//│ ------- defInstance -------
//│ ɛ ==> lastDrive:7^22 ⋅ ɛ:
//│ 	27: [C 1 [C 2 [N]]]  <-->  20: case xs:13 of {N -> [None] | C hh:14 tt:15 -> [Some ((last:6 tt:15) hh:14)]}
//│ ɛ ==> lastDrive:7^22 ⋅ last:6^14 ⋅ ɛ:
//│ 	26: [C 2 [N]]  <-->  10: case ys:8 of {N -> (fun x:9 -> x:9) | C h:10 t:11 -> (fun x:12 -> ((last:6 t:11) h:10))}
//│ ɛ ==> lastDrive:7^22 ⋅ last:6^14 ⋅ last:6^4 ⋅ ɛ:
//│ 	25: [N]  <-->  10: case ys:8 of {N -> (fun x:9 -> x:9) | C h:10 t:11 -> (fun x:12 -> ((last:6 t:11) h:10))}
//│ 
//│ >>>>>>>>>> Rewritten >>>>>>>>>>
//│ def last:6 = (fun ys:8 -> case ys:8 of {N -> (fun x:9 -> x:9) | C h:10 t:11 -> (fun x:12 -> ((last:6 t:11) h:10))})
//│ def lastDrive:7 = (fun xs:13 -> case xs:13 of {N -> [None] | C hh:14 tt:15 -> [Some ((last:6 tt:15) hh:14)]})
//│ def lastDrive'7'22_last'6'14:17 = (fun ys:8 -> ys:8)
//│ def lastDrive'7'22_last'6'14_last'6'4:18 = (fun ys:8 -> ys:8)
//│ def lastDrive'7'22:16 = (fun xs:13 -> xs:13)
//│ (lastDrive'7'22:16 
//│ 	let hh:14 = 1 in 
//│ 	let tt:15 = 
//│ 		let h:10 = 2 in 
//│ 		let t:11 = (fun x:9 -> x:9) in (fun x:12 -> ((lastDrive'7'22_last'6'14_last'6'4:18 t:11) h:10)) 
//│ 	in [Some ((lastDrive'7'22_last'6'14:17 tt:15) hh:14)])
//│ <<<<<<<<<< Rewritten <<<<<<<<<<
