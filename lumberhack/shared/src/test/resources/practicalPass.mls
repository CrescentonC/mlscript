:NewParser
:ParseOnly


fun inter(xs) = if xs is
    N then ys => ys
    C(h, t) then ys => C(h, inter(ys)(t))
let l1 = C(1, C(2, N))
let rec l2 = N
inter(l1, l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|#let| |l1| |#=| |C|(|1|,| |C|(|2|,| |N|)|)|↵|#let| |#rec| |l2| |#=| |N|↵|inter|(|l1|,| |l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; let l1 = C (1, C (2, N,),); let rec l2 = N; inter (l1, l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((inter^20 l1^21) l2^23)
//│ def inter = (fun xs:9 -> case xs:9 of {
//│ 	N => (fun ys:10 -> ys:10)
//│ 	| C h:11 t:12 => (fun ys:13 -> [C h:11 ((inter^5 ys:13) t:12)])})
//│ def l1 = [C 1 [C 2 [N]]]
//│ def l2 = [N]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 't:12
//│ 	[-l1^21 · +inter^20 · +inter^5 · +inter^5 · +inter^5 · +inter^5 · +inter^5 · +inter^5]  --->  [-l1^21 · +inter^20 · +inter^5 · +inter^5 · +inter^5 · +inter^5]
//│ NoProd <: 'ys:13
//│ 	[-l2^23 · +inter^20 · +inter^5 · +inter^5 · +inter^5 · +inter^5]  --->  [-l2^23 · +inter^20 · +inter^5 · +inter^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter^20]
//│ 	[inter^20 · inter^5]
//│ 		[inter^20 · inter^5 · inter^5]
//│ 			[inter^20 · inter^5 · inter^5 · inter^5]
//│ 				[inter^20 · inter^5 · inter^5 · inter^5 · inter^5] ---> [inter^20 · inter^5 · inter^5] (only one)
//│ [l1^21]
//│ [l2^23]
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N] --->
//│ 	case xs of {N => (fun ys -> ys) | C h t => (fun ys -> [C h ((inter₃ ys) t)])}
//│ [C 2 [N]] --->
//│ 	case xs of {N => (fun ys -> ys) | C h t => (fun ys -> [C h ((inter₃ ys) t)])}
//│ [C 1 [C 2 [N]]] --->
//│ 	case xs of {N => (fun ys -> ys) | C h t => (fun ys -> [C h ((inter₁ ys) t)])}
//│ [N] --->
//│ 	case xs of {N => (fun ys -> ys) | C h t => (fun ys -> [C h ((inter₂ ys) t)])}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((inter₀ l1₀) l2₀)
//│ def inter₀ = 
//│ 	(fun xs -> xs)
//│ 	where
//│ 	def inter₁ = 
//│ 		(fun xs -> xs)
//│ 		where
//│ 		def inter₂ = 
//│ 			(fun xs -> xs)
//│ 			where
//│ 			def inter₃ = 
//│ 				(fun xs -> case xs of {
//│ 					N => (fun ys -> ys)
//│ 					| C h t => (fun ys -> [C h ((inter₂ ys) t)])})
//│ def l2₀ = 
//│ 	(fun ys -> ys)
//│ def l1₀ = 
//│ 	let h = 1
//│ 	in let t = 	
//│ 		let h = 2
//│ 		in let t = (fun ys -> ys)
//│ 		in (fun ys -> [C h ((inter₃ ys) t)])
//│ 	in (fun ys -> [C h ((inter₁ ys) t)])
//│ <<<<<<< after fusion <<<<<<<


fun inter(xs) = if xs is
    N then ys => ys
    C(h, t) then ys => C(h, inter(ys)(t))
fun l1(x) = C(1, C(2, l1(add(x, 1))))
let rec l2 = C(9, C(8, l2))
inter(l1(0))(l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|#fun| |l1|(|x|)| |#=| |C|(|1|,| |C|(|2|,| |l1|(|add|(|x|,| |1|)|)|)|)|↵|#let| |#rec| |l2| |#=| |C|(|9|,| |C|(|8|,| |l2|)|)|↵|inter|(|l1|(|0|)|)|(|l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; fun l1 = x, => C (1, C (2, l1 (add (x, 1,),),),); let rec l2 = C (9, C (8, l2,),); inter (l1 (0,),) (l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((inter^31 (l1^32 0)) l2^36)
//│ def inter = (fun xs:9 -> case xs:9 of {
//│ 	N => (fun ys:10 -> ys:10)
//│ 	| C h:11 t:12 => (fun ys:13 -> [C h:11 ((inter^5 ys:13) t:12)])})
//│ def l1 = (fun x:14 -> [C 1 [C 2 (l1^16 ((add:4 x:14) 1))]])
//│ def l2 = [C 9 [C 8 l2^28]]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(Int, '22_callres) <: 'ys:13
//│ 	[-l1^16 · -l1^32 · +inter^31 · +inter^5 · +inter^5 · +inter^5 · +inter^5 · +inter^5]  --->  [-l1^32 · +inter^31 · +inter^5]
//│ C(Int, 'l2:8) <: 'ys:13
//│ 	[-l2^28 · -l2^36 · +inter^31 · +inter^5 · +inter^5 · +inter^5 · +inter^5 · +inter^5 · +inter^5]  --->  [-l2^36 · +inter^31 · +inter^5 · +inter^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [inter^31]
//│ 	[inter^31 · inter^5]
//│ 		[inter^31 · inter^5 · inter^5]
//│ 			[inter^31 · inter^5 · inter^5 · inter^5]
//│ 				[inter^31 · inter^5 · inter^5 · inter^5 · inter^5]
//│ 					[inter^31 · inter^5 · inter^5 · inter^5 · inter^5 · inter^5] ---> [inter^31 · inter^5] (only one)
//│ [l1^32]
//│ 	[l1^32 · l1^16] ---> [l1^32] (only one)
//│ [l2^36]
//│ 	[l2^36 · l2^28] ---> [l2^36] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 8 l2₀] --->
//│ 	case xs of {N => (fun ys -> ys) | C h t => (fun ys -> [C h ((inter₄ ys) t)])}
//│ [C 9 [C 8 l2₀]] --->
//│ 	case xs of {N => (fun ys -> ys) | C h t => (fun ys -> [C h ((inter₂ ys) t)])}
//│ [C 2 (l1₀ ((add x) 1))] --->
//│ 	case xs of {N => (fun ys -> ys) | C h t => (fun ys -> [C h ((inter₃ ys) t)])}
//│ [C 1 [C 2 (l1₀ ((add x) 1))]] --->
//│ 	case xs of {N => (fun ys -> ys) | C h t => (fun ys -> [C h ((inter₁ ys) t)])}
//│ 	case xs of {N => (fun ys -> ys) | C h t => (fun ys -> [C h ((inter₁ ys) t)])}
//│ 	 MORE THAN ONE MATCH EXPR
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((inter₀ (l1₀ 0)) l2₀)
//│ def l2₀ = 
//│ 	let h = 9
//│ 	in let t = 	
//│ 		let h = 8
//│ 		in let t = l2₀
//│ 		in (fun ys -> [C h ((inter₄ ys) t)])
//│ 	in (fun ys -> [C h ((inter₂ ys) t)])
//│ def l1₀ = 
//│ 	(fun x -> 
//│ 		let h = 1
//│ 		in let t = 	
//│ 			let h = 2
//│ 			in let t = (l1₀ ((add x) 1))
//│ 			in (fun ys -> [C h ((inter₃ ys) t)])
//│ 		in (fun ys -> [C h ((inter₁ ys) t)]))
//│ def inter₀ = 
//│ 	(fun xs -> xs)
//│ 	where
//│ 	def inter₁ = 
//│ 		(fun xs -> xs)
//│ 		where
//│ 		def inter₂ = 
//│ 			(fun xs -> xs)
//│ 			where
//│ 			def inter₃ = 
//│ 				(fun xs -> xs)
//│ 				where
//│ 				def inter₄ = 
//│ 					(fun xs -> case xs of {
//│ 						N => (fun ys -> ys)
//│ 						| C h t => (fun ys -> [C h ((inter₁ ys) t)])})
//│ <<<<<<< after fusion <<<<<<<




// NOTE: only head is handled
fun map(ls) = if ls is
    C(h, t) then f => C(f(h), map(t)(f))
    N then f => N
let l = C(K, N)
map(l)(
    x => if x is
        K then T
)
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |f| |=>| |C|(|f|(|h|)|,| |map|(|t|)|(|f|)|)|↵|N| |#then| |f| |=>| |N|←|↵|#let| |l| |#=| |C|(|K|,| |N|)|↵|map|(|l|)|(|→|x| |=>| |#if| |x| |is|→|K| |#then| |T|←|←|↵|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (h, t,)) then f, => C (f (h,), map (t,) (f,),); (N) then f, => N›; let l = C (K, N,); map (l,) (x, => if x is ‹(K) then T›,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ((map^19 l^20) (fun x:13 -> case x:13 of {
//│ 	K => [T]}))
//│ def l = [C [K] [N]]
//│ def map = (fun ls:8 -> case ls:8 of {
//│ 	C h:9 t:10 => (fun f:11 -> [C (f:11 h:9) ((map^5 t:10) f:11)])
//│ 	| N => (fun f:12 -> [N])})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 't:10
//│ 	[-l^20 · +map^19 · +map^5 · +map^5]  --->  [-l^20 · +map^19 · +map^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [l^20]
//│ [map^19]
//│ 	[map^19 · map^5]
//│ 		[map^19 · map^5 · map^5] ---> [map^19 · map^5] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [K] --->
//│ 	case x of {K => [T]}
//│ [N] --->
//│ 	case ls of {C h t => (fun f -> [C (f h) ((map₁ t) f)]) | N => (fun f -> [N])}
//│ [C [K] [N]] --->
//│ 	case ls of {C h t => (fun f -> [C (f h) ((map₁ t) f)]) | N => (fun f -> [N])}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ((map₀ l₀) (fun x -> x))
//│ def l₀ = 
//│ 	let h = [T]
//│ 	in let t = (fun f -> [N])
//│ 	in (fun f -> [C (f h) ((map₁ t) f)])
//│ def map₀ = 
//│ 	(fun ls -> ls)
//│ 	where
//│ 	def map₁ = 
//│ 		(fun ls -> ls)
//│ <<<<<<< after fusion <<<<<<<



fun map(ls) = if ls is
    C(h, t) then C(
        (if h is
            K then T
            KK then TT
            KKKK then TTTT
        ),
        map(t)
    )
    N then N
let l = C(K, C(KK, C(KKKK, N)))
map(l)
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|→|(|#if| |h| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|)|,|↵|map|(|t|)|←|↵|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|l|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (h, t,)) then C ('(' if h is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›, ')', map (t,),); (N) then N›; let l = C (K, C (KK, C (KKKK, N,),),); map (l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (map^21 l^22)
//│ def l = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ def map = (fun ls:8 -> case ls:8 of {
//│ 	C h:9 t:10 => [C case h:9 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} (map^7 t:10)]
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 't:10
//│ 	[-l^22 · +map^21 · +map^7 · +map^7 · +map^7 · +map^7]  --->  [-l^22 · +map^21 · +map^7 · +map^7 · +map^7]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [l^22]
//│ [map^21]
//│ 	[map^21 · map^7]
//│ 		[map^21 · map^7 · map^7]
//│ 			[map^21 · map^7 · map^7 · map^7]
//│ 				[map^21 · map^7 · map^7 · map^7 · map^7] ---> [map^21 · map^7 · map^7 · map^7] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [K] --->
//│ 	case h of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ [KK] --->
//│ 	case h of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ [KKKK] --->
//│ 	case h of {K => [T] | KK => [TT] | KKKK => [TTTT]}
//│ [N] --->
//│ 	case ls of {C h t => [C case h of {K => [T] | KK => [TT] | KKKK => [TTTT]} (map₃ t)] | N => [N]}
//│ [C [KKKK] [N]] --->
//│ 	case ls of {C h t => [C case h of {K => [T] | KK => [TT] | KKKK => [TTTT]} (map₃ t)] | N => [N]}
//│ [C [KK] [C [KKKK] [N]]] --->
//│ 	case ls of {C h t => [C case h of {K => [T] | KK => [TT] | KKKK => [TTTT]} (map₂ t)] | N => [N]}
//│ [C [K] [C [KK] [C [KKKK] [N]]]] --->
//│ 	case ls of {C h t => [C case h of {K => [T] | KK => [TT] | KKKK => [TTTT]} (map₁ t)] | N => [N]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (map₀ l₀)
//│ def l₀ = 
//│ 	let h = [T]
//│ 	in let t = 	
//│ 		let h = [TT]
//│ 		in let t = 	
//│ 			let h = [TTTT]
//│ 			in let t = [N]
//│ 			in [C h (map₃ t)]
//│ 		in [C h (map₂ t)]
//│ 	in [C h (map₁ t)]
//│ def map₀ = 
//│ 	(fun ls -> ls)
//│ 	where
//│ 	def map₁ = 
//│ 		(fun ls -> ls)
//│ 		where
//│ 		def map₂ = 
//│ 			(fun ls -> ls)
//│ 			where
//│ 			def map₃ = 
//│ 				(fun ls -> ls)
//│ <<<<<<< after fusion <<<<<<<



// NOTE: consumer `c` is used twice in its body, but it fine here
let aa = T(N, L, L)
let bb = T(N, L, L)
let t = T(K, aa, bb)
fun c(x) = if x is
    T(n, l, r) then T(
        (if n is
            K then KK
            N then NN
        ),
        c(l),
        c(r)
    )
    L then LL
c(t)
//│ |#let| |aa| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |bb| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |t| |#=| |T|(|K|,| |aa|,| |bb|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|T|(|n|,| |l|,| |r|)| |#then| |T|(|→|(|#if| |n| |is|→|K| |#then| |KK|↵|N| |#then| |NN|←|↵|)|,|↵|c|(|l|)|,|↵|c|(|r|)|←|↵|)|↵|L| |#then| |LL|←|↵|c|(|t|)|
//│ Parsed: {let aa = T (N, L, L,); let bb = T (N, L, L,); let t = T (K, aa, bb,); fun c = x, => if x is ‹(T (n, l, r,)) then T ('(' if n is ‹(K) then KK; (N) then NN›, ')', c (l,), c (r,),); (L) then LL›; c (t,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (c^28 t^29)
//│ def aa = [T [N] [L] [L]]
//│ def bb = [T [N] [L] [L]]
//│ def c = (fun x:10 -> case x:10 of {
//│ 	T n:11 l:12 r:13 => [T case n:11 of {
//│ 		K => [KK]
//│ 		| N => [NN]} (c^18 l:12) (c^21 r:13)]
//│ 	| L => [LL]})
//│ def t = [T [K] aa^10 bb^11]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ NoProd <: 'l:12
//│ 	[-aa^10 · -t^29 · +c^28 · +c^18 · +c^18 · +c^18]  --->  [-aa^10 · -t^29 · +c^28 · +c^18 · +c^18]
//│ 	[-aa^10 · -t^29 · +c^28 · +c^18 · +c^21 · +c^18]  --->  [-aa^10 · -t^29 · +c^28 · +c^18 · +c^21]
//│ 	[-bb^11 · -t^29 · +c^28 · +c^21 · +c^21 · +c^18]  --->  [-bb^11 · -t^29 · +c^28 · +c^21 · +c^21]
//│ 	[-bb^11 · -t^29 · +c^28 · +c^21 · +c^18 · +c^18]  --->  [-bb^11 · -t^29 · +c^28 · +c^21 · +c^18]
//│ NoProd <: 'r:13
//│ 	[-aa^10 · -t^29 · +c^28 · +c^18 · +c^21 · +c^21]  --->  [-aa^10 · -t^29 · +c^28 · +c^18 · +c^21]
//│ 	[-aa^10 · -t^29 · +c^28 · +c^18 · +c^18 · +c^21]  --->  [-aa^10 · -t^29 · +c^28 · +c^18 · +c^18]
//│ 	[-bb^11 · -t^29 · +c^28 · +c^21 · +c^21 · +c^21]  --->  [-bb^11 · -t^29 · +c^28 · +c^21 · +c^21]
//│ 	[-bb^11 · -t^29 · +c^28 · +c^21 · +c^18 · +c^21]  --->  [-bb^11 · -t^29 · +c^28 · +c^21 · +c^18]
//│ NoProd <: 'x:10
//│ 	[-aa^10 · -t^29 · +c^28 · +c^18 · +c^21 · +c^21 · +c^18]  --->  [-aa^10 · -t^29 · +c^28 · +c^18 · +c^21 · +c^21]
//│ 	[-aa^10 · -t^29 · +c^28 · +c^18 · +c^18 · +c^18 · +c^21]  --->  [-aa^10 · -t^29 · +c^28 · +c^18 · +c^18 · +c^18]
//│ 	[-aa^10 · -t^29 · +c^28 · +c^18 · +c^21 · +c^18 · +c^21]  --->  [-aa^10 · -t^29 · +c^28 · +c^18 · +c^21 · +c^18]
//│ 	[-aa^10 · -t^29 · +c^28 · +c^18 · +c^18 · +c^21 · +c^18]  --->  [-aa^10 · -t^29 · +c^28 · +c^18 · +c^18 · +c^21]
//│ 	[-bb^11 · -t^29 · +c^28 · +c^21 · +c^18 · +c^18 · +c^21]  --->  [-bb^11 · -t^29 · +c^28 · +c^21 · +c^18 · +c^18]
//│ 	[-bb^11 · -t^29 · +c^28 · +c^21 · +c^21 · +c^21 · +c^18]  --->  [-bb^11 · -t^29 · +c^28 · +c^21 · +c^21 · +c^21]
//│ 	[-bb^11 · -t^29 · +c^28 · +c^21 · +c^21 · +c^18 · +c^21]  --->  [-bb^11 · -t^29 · +c^28 · +c^21 · +c^21 · +c^18]
//│ 	[-bb^11 · -t^29 · +c^28 · +c^21 · +c^18 · +c^21 · +c^18]  --->  [-bb^11 · -t^29 · +c^28 · +c^21 · +c^18 · +c^21]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [c^28]
//│ 	[c^28 · c^21]
//│ 		[c^28 · c^21 · c^21]
//│ 			[c^28 · c^21 · c^21 · c^21] ---> [c^28 · c^21 · c^21] (only one)
//│ 			[c^28 · c^21 · c^21 · c^18] ---> [c^28 · c^21 · c^21] (only one)
//│ 		[c^28 · c^21 · c^18]
//│ 			[c^28 · c^21 · c^18 · c^21] ---> [c^28 · c^21 · c^18] (only one)
//│ 			[c^28 · c^21 · c^18 · c^18] ---> [c^28 · c^21 · c^18] (only one)
//│ 	[c^28 · c^18]
//│ 		[c^28 · c^18 · c^21]
//│ 			[c^28 · c^18 · c^21 · c^21] ---> [c^28 · c^18 · c^21] (only one)
//│ 			[c^28 · c^18 · c^21 · c^18] ---> [c^28 · c^18 · c^21] (only one)
//│ 		[c^28 · c^18 · c^18]
//│ 			[c^28 · c^18 · c^18 · c^21] ---> [c^28 · c^18 · c^18] (only one)
//│ 			[c^28 · c^18 · c^18 · c^18] ---> [c^28 · c^18 · c^18] (only one)
//│ [t^29]
//│ 	[t^29 · bb^11]
//│ 	[t^29 · aa^10]
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [K] --->
//│ 	case n of {K => [KK] | N => [NN]}
//│ [T [K] aa₀ bb₀] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₄ l) (c₁ r)] | L => [LL]}
//│ [N] --->
//│ 	case n of {K => [KK] | N => [NN]}
//│ [L] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₃ l) (c₃ r)] | L => [LL]}
//│ [L] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₂ l) (c₂ r)] | L => [LL]}
//│ [T [N] [L] [L]] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₃ l) (c₂ r)] | L => [LL]}
//│ [N] --->
//│ 	case n of {K => [KK] | N => [NN]}
//│ [L] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₆ l) (c₆ r)] | L => [LL]}
//│ [L] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₅ l) (c₅ r)] | L => [LL]}
//│ [T [N] [L] [L]] --->
//│ 	case x of {T n l r => [T case n of {K => [KK] | N => [NN]} (c₆ l) (c₅ r)] | L => [LL]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (c₀ t₀)
//│ def t₀ = 
//│ 	let n = [KK]
//│ 	in let l = aa₀
//│ 	in let r = bb₀
//│ 	in [T n (c₄ l) (c₁ r)]
//│ 	where
//│ 	def bb₀ = 
//│ 		let n = [NN]
//│ 		in let l = [LL]
//│ 		in let r = [LL]
//│ 		in [T n (c₃ l) (c₂ r)]
//│ 	def aa₀ = 
//│ 		let n = [NN]
//│ 		in let l = [LL]
//│ 		in let r = [LL]
//│ 		in [T n (c₆ l) (c₅ r)]
//│ def c₀ = 
//│ 	(fun x -> x)
//│ 	where
//│ 	def c₁ = 
//│ 		(fun x -> x)
//│ 		where
//│ 		def c₂ = 
//│ 			(fun x -> x)
//│ 		def c₃ = 
//│ 			(fun x -> x)
//│ 	def c₄ = 
//│ 		(fun x -> x)
//│ 		where
//│ 		def c₅ = 
//│ 			(fun x -> x)
//│ 		def c₆ = 
//│ 			(fun x -> x)
//│ <<<<<<< after fusion <<<<<<<




fun sum(ls) = if ls is
    C(h, t) then S(N, sum(t))
    N then N
fun mapa(lsa) = if lsa is
    C(ha, ta) then C(primitive(ha), mapa(ta))
    N then N
fun mapb(lsb) = if lsb is
    C(hb, tb) then C(primitive(hb), mapb(tb))
    N then N
sum(mapa(mapb(primitive)))
//│ |#fun| |sum|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |S|(|N|,| |sum|(|t|)|)|↵|N| |#then| |N|←|↵|#fun| |mapa|(|lsa|)| |#=| |#if| |lsa| |is|→|C|(|ha|,| |ta|)| |#then| |C|(|primitive|(|ha|)|,| |mapa|(|ta|)|)|↵|N| |#then| |N|←|↵|#fun| |mapb|(|lsb|)| |#=| |#if| |lsb| |is|→|C|(|hb|,| |tb|)| |#then| |C|(|primitive|(|hb|)|,| |mapb|(|tb|)|)|↵|N| |#then| |N|←|↵|sum|(|mapa|(|mapb|(|primitive|)|)|)|
//│ Parsed: {fun sum = ls, => if ls is ‹(C (h, t,)) then S (N, sum (t,),); (N) then N›; fun mapa = lsa, => if lsa is ‹(C (ha, ta,)) then C (primitive (ha,), mapa (ta,),); (N) then N›; fun mapb = lsb, => if lsb is ‹(C (hb, tb,)) then C (primitive (hb,), mapb (tb,),); (N) then N›; sum (mapa (mapb (primitive,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (sum^32 (mapa^33 (mapb^34 primitive:3)))
//│ def mapa = (fun lsa:12 -> case lsa:12 of {
//│ 	C ha:13 ta:14 => [C (primitive:3 ha:13) (mapa^14 ta:14)]
//│ 	| N => [N]})
//│ def mapb = (fun lsb:15 -> case lsb:15 of {
//│ 	C hb:16 tb:17 => [C (primitive:3 hb:16) (mapb^25 tb:17)]
//│ 	| N => [N]})
//│ def sum = (fun ls:9 -> case ls:9 of {
//│ 	C h:10 t:11 => [S [N] (sum^3 t:11)]
//│ 	| N => [N]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C('13_callres, '16_callres) <: 'ls:9
//│ 	[-mapa^14 · -mapa^14 · -mapa^33 · +sum^32 · +sum^3 · +sum^3]  --->  [-mapa^14 · -mapa^33 · +sum^32 · +sum^3]
//│ C('24_callres, '27_callres) <: 'lsa:12
//│ 	[-mapb^25 · -mapb^25 · -mapb^34 · +mapa^33 · +mapa^14 · +mapa^14]  --->  [-mapb^25 · -mapb^34 · +mapa^33 · +mapa^14]
//│ NoProd <: 'ls:9
//│ 	[-mapa^33 · +sum^32 · +sum^3 · +sum^3]  --->  [-mapa^33 · +sum^32 · +sum^3]
//│ NoProd <: 't:11
//│ 	[-mapa^14 · -mapa^14 · -mapa^33 · +sum^32 · +sum^3 · +sum^3 · +sum^3]  --->  [-mapa^14 · -mapa^14 · -mapa^33 · +sum^32 · +sum^3 · +sum^3]
//│ 	[-mapa^14 · -mapa^33 · +sum^32 · +sum^3 · +sum^3]  --->  [-mapa^14 · -mapa^33 · +sum^32 · +sum^3]
//│ NoProd <: 'ta:14
//│ 	[-mapb^25 · -mapb^34 · +mapa^33 · +mapa^14 · +mapa^14]  --->  [-mapb^25 · -mapb^34 · +mapa^33 · +mapa^14]
//│ 	[-mapb^25 · -mapb^25 · -mapb^34 · +mapa^33 · +mapa^14 · +mapa^14 · +mapa^14]  --->  [-mapb^25 · -mapb^25 · -mapb^34 · +mapa^33 · +mapa^14 · +mapa^14]
//│ NoProd <: 'lsb:15
//│ 	[+mapb^34 · +mapb^25 · +mapb^25]  --->  [+mapb^34 · +mapb^25]
//│ NoProd <: 'lsa:12
//│ 	[-mapb^34 · +mapa^33 · +mapa^14 · +mapa^14]  --->  [-mapb^34 · +mapa^33 · +mapa^14]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [mapa^33]
//│ 	[mapa^33 · mapa^14]
//│ 		[mapa^33 · mapa^14 · mapa^14] ---> [mapa^33 · mapa^14] (only one)
//│ [mapb^34]
//│ 	[mapb^34 · mapb^25]
//│ 		[mapb^34 · mapb^25 · mapb^25] ---> [mapb^34 · mapb^25] (only one)
//│ [sum^32]
//│ 	[sum^32 · sum^3]
//│ 		[sum^32 · sum^3 · sum^3] ---> [sum^32 · sum^3] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C (primitive ha) (mapa₁ ta)] --->
//│ 	case ls of {C h t => [S [N] (sum₁ t)] | N => [N]}
//│ [N] --->
//│ 	case ls of {C h t => [S [N] (sum₁ t)] | N => [N]}
//│ [C (primitive hb) (mapb₁ tb)] --->
//│ 	case lsa of {C ha ta => [C (primitive ha) (mapa₁ ta)] | N => [N]}
//│ [N] --->
//│ 	case lsa of {C ha ta => [C (primitive ha) (mapa₁ ta)] | N => [N]}
//│ [C (primitive hb) (mapb₁ tb)] --->
//│ 	case lsa of {C ha ta => [C (primitive ha) (mapa₁ ta)] | N => [N]}
//│ [N] --->
//│ 	case lsa of {C ha ta => [C (primitive ha) (mapa₁ ta)] | N => [N]}
//│ [C (primitive ha) (mapa₁ ta)] --->
//│ 	case ls of {C h t => [S [N] (sum₁ t)] | N => [N]}
//│ [N] --->
//│ 	case ls of {C h t => [S [N] (sum₁ t)] | N => [N]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (sum₀ (mapa₀ (mapb₀ primitive)))
//│ def mapa₀ = 
//│ 	(fun lsa -> lsa)
//│ 	where
//│ 	def mapa₁ = 
//│ 		(fun lsa -> lsa)
//│ def sum₀ = 
//│ 	(fun ls -> ls)
//│ 	where
//│ 	def sum₁ = 
//│ 		(fun ls -> ls)
//│ def mapb₀ = 
//│ 	(fun lsb -> case lsb of {
//│ 		C hb tb => 
//│ 			let ha = (primitive hb)
//│ 			in let ta = (mapb₁ tb)
//│ 			in let h = (primitive ha)
//│ 			in let t = (mapa₁ ta)
//│ 			in [S [N] (sum₁ t)]
//│ 		| N => [N]})
//│ 	where
//│ 	def mapb₁ = 
//│ 		(fun lsb -> case lsb of {
//│ 			C hb tb => 
//│ 				let ha = (primitive hb)
//│ 				in let ta = (mapb₁ tb)
//│ 				in let h = (primitive ha)
//│ 				in let t = (mapa₁ ta)
//│ 				in [S [N] (sum₁ t)]
//│ 			| N => [N]})
//│ <<<<<<< after fusion <<<<<<<

fun map(ls) = if ls is
    N then N
    C(hhh, ttt) then C((
        head => if head is 
            T then K
            TT then KK
    )(hhh), map(ttt))
fun last(ys) = if ys is
    N then x => x
    C(h, t) then x => last(t)(h)
fun lastDrive(xs) = if xs is
    N then None
    C(hh, tt) then Some(last(tt)(hh))
lastDrive(map(C(T, C(TT, N))))
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |N|↵|C|(|hhh|,| |ttt|)| |#then| |C|(|(|→|head| |=>| |#if| |head| |is| |→|T| |#then| |K|↵|TT| |#then| |KK|←|←|↵|)|(|hhh|)|,| |map|(|ttt|)|)|←|↵|#fun| |last|(|ys|)| |#=| |#if| |ys| |is|→|N| |#then| |x| |=>| |x|↵|C|(|h|,| |t|)| |#then| |x| |=>| |last|(|t|)|(|h|)|←|↵|#fun| |lastDrive|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |None|↵|C|(|hh|,| |tt|)| |#then| |Some|(|last|(|tt|)|(|hh|)|)|←|↵|lastDrive|(|map|(|C|(|T|,| |C|(|TT|,| |N|)|)|)|)|
//│ Parsed: {fun map = ls, => if ls is ‹(N) then N; (C (hhh, ttt,)) then C ('(' head, => if head is ‹(T) then K; (TT) then KK›, ')' (hhh,), map (ttt,),)›; fun last = ys, => if ys is ‹(N) then x, => x; (C (h, t,)) then x, => last (t,) (h,)›; fun lastDrive = xs, => if xs is ‹(N) then None; (C (hh, tt,)) then Some (last (tt,) (hh,),)›; lastDrive (map (C (T, C (TT, N,),),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (lastDrive^37 (map^38 [C [T] [C [TT] [N]]]))
//│ def last = (fun ys:13 -> case ys:13 of {
//│ 	N => (fun x:14 -> x:14)
//│ 	| C h:15 t:16 => (fun x:17 -> ((last^19 t:16) h:15))})
//│ def lastDrive = (fun xs:18 -> case xs:18 of {
//│ 	N => [None]
//│ 	| C hh:19 tt:20 => [Some ((last^29 tt:20) hh:19)]})
//│ def map = (fun ls:9 -> case ls:9 of {
//│ 	N => [N]
//│ 	| C hhh:10 ttt:11 => [C ((fun head:12 -> case head:12 of {
//│ 		T => [K]
//│ 		| TT => [KK]}) hhh:10) (map^10 ttt:11)]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C('9_callres, '12_callres) <: 'ys:13
//│ 	[-map^10 · -map^10 · -map^38 · +lastDrive^37 · +last^29 · +last^19]  --->  [-map^10 · -map^38 · +lastDrive^37 · +last^29]
//│ NoProd <: 't:16
//│ 	[-map^10 · -map^38 · +lastDrive^37 · +last^29 · +last^19]  --->  [-map^10 · -map^38 · +lastDrive^37 · +last^29]
//│ 	[-map^10 · -map^10 · -map^38 · +lastDrive^37 · +last^29 · +last^19 · +last^19]  --->  [-map^10 · -map^10 · -map^38 · +lastDrive^37 · +last^29 · +last^19]
//│ NoProd <: 'ttt:11
//│ 	[+map^38 · +map^10 · +map^10 · +map^10]  --->  [+map^38 · +map^10 · +map^10]
//│ NoProd <: 'ys:13
//│ 	[-map^38 · +lastDrive^37 · +last^29 · +last^19]  --->  [-map^38 · +lastDrive^37 · +last^29]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [lastDrive^37]
//│ 	[lastDrive^37 · last^29]
//│ 		[lastDrive^37 · last^29 · last^19] ---> [lastDrive^37 · last^29] (only one)
//│ [map^38]
//│ 	[map^38 · map^10]
//│ 		[map^38 · map^10 · map^10] ---> [map^38 · map^10] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [TT] --->
//│ 	case head of {T => [K] | TT => [KK]}
//│ [N] --->
//│ 	case ls of {N => [N] | C hhh ttt => [C ((fun head -> case head of {T => [K] | TT => [KK]}) hhh) (map₁ ttt)]}
//│ [C [TT] [N]] --->
//│ 	case ls of {N => [N] | C hhh ttt => [C ((fun head -> case head of {T => [K] | TT => [KK]}) hhh) (map₁ ttt)]}
//│ [C [T] [C [TT] [N]]] --->
//│ 	case ls of {N => [N] | C hhh ttt => [C ((fun head -> case head of {T => [K] | TT => [KK]}) hhh) (map₁ ttt)]}
//│ [N] --->
//│ 	case xs of {N => [None] | C hh tt => [Some ((last₀ tt) hh)]}
//│ [C ((fun head -> case head of {T => [K] | TT => [KK]}) hhh) (map₁ ttt)] --->
//│ 	case xs of {N => [None] | C hh tt => [Some ((last₀ tt) hh)]}
//│ [N] --->
//│ 	case ys of {N => (fun x -> x) | C h t => (fun x -> ((last₀ t) h))}
//│ [C ((fun head -> case head of {T => [K] | TT => [KK]}) hhh) (map₁ ttt)] --->
//│ 	case ys of {N => (fun x -> x) | C h t => (fun x -> ((last₀ t) h))}
//│ [T] --->
//│ 	case head of {T => [K] | TT => [KK]}
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ (lastDrive₀ (map₀ 
//│ 	let hhh = [K]
//│ 	in let ttt = 	
//│ 		let hhh = [KK]
//│ 		in let ttt = (fun x -> x)
//│ 		in let h = ((fun head -> head) hhh)
//│ 		in let t = (map₁ ttt)
//│ 		in (fun x -> ((last₀ t) h))
//│ 	in let hh = ((fun head -> head) hhh)
//│ 	in let tt = (map₁ ttt)
//│ 	in [Some ((last₀ tt) hh)]))
//│ def map₀ = 
//│ 	(fun ls -> ls)
//│ 	where
//│ 	def map₁ = 
//│ 		(fun ls -> ls)
//│ def lastDrive₀ = 
//│ 	(fun xs -> xs)
//│ 	where
//│ 	def last₀ = 
//│ 		(fun ys -> ys)
//│ <<<<<<< after fusion <<<<<<<
