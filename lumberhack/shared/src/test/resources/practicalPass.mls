:NewParser
:ParseOnly


fun inter(xs) = if xs is
    N then ys => ys
    C(h, t) then ys => C(h, inter(ys)(t))
let l1 = C(1, C(2, N))
let rec l2 = N
inter(l1, l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|#let| |l1| |#=| |C|(|1|,| |C|(|2|,| |N|)|)|↵|#let| |#rec| |l2| |#=| |N|↵|inter|(|l1|,| |l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; let l1 = C (1, C (2, N,),); let rec l2 = N; inter (l1, l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def inter:6 = (fun xs:9 -> case xs:9^1 of {
//│ 	N => (fun ys:10 -> ys:10^2)
//│ 	| C h:11 t:12 => (fun ys:13 -> [C h:11^4 ((inter:6^5 ys:13^6) t:12^8)])})
//│ def l1:7 = [C 1 [C 2 [N]]]
//│ def l2:8 = [N]
//│ ((inter:6^20 l1:7^21) l2:8^23)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 11'22_callres) <: ([]: ([]: 2'l2_8^23) => ([]: 12'24_callres))
//│ ([]: 0'inter_6^20) <: ([]: ([]: 1'l1_7^21) => ([]: 11'22_callres))
//│ ([]: N) <: ([]: 2'l2)
//│ ([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) <: ([]: 1'l1)
//│ ([]: ([]: 3'xs) => ([]: 10'12_matchres)) <: ([]: 0'inter)
//│ ([]: ([]: 7'ys) => ([]: C(([]: 5'h), ([]: 9'9_callres)))) <: ([]: 10'12_matchres)
//│ ([]: ([]: 4'ys) => ([]: 4'ys)) <: ([]: 10'12_matchres)
//│ ([]: 3'xs) <: ([]: Destruct(N, C(5'h, 6't)))
//│ ([]: 8'7_callres) <: ([]: ([]: 6't) => ([]: 9'9_callres))
//│ ([]: 0'inter_6^5) <: ([]: ([]: 7'ys) => ([]: 8'7_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'inter:
//│ 	0'inter[-inter:6^5] < ([]: ([]: 7'ys) => ([]: 8'7_callres))
//│ 	0'inter[-inter:6^20] < ([]: ([]: 1'l1_7^21) => ([]: 11'22_callres))
//│ 	([]: ([]: 3'xs) => ([]: 10'12_matchres)) < []0'inter
//│ --------------
//│ 5'h:
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^20 · -l1:7^21]: Int) < []5'h
//│ 	([+inter:6^20 · -l1:7^21]: Int) < []5'h
//│ --------------
//│ 10'12_matchres:
//│ 	10'12_matchres[] < ([-inter:6^5]: 8'7_callres)
//│ 	10'12_matchres[] < ([-inter:6^20]: 11'22_callres)
//│ 	([]: ([]: 4'ys) => ([]: 4'ys)) < []10'12_matchres
//│ 	([]: ([]: 7'ys) => ([]: C(([]: 5'h), ([]: 9'9_callres)))) < []10'12_matchres
//│ --------------
//│ 1'l1:
//│ 	1'l1[-l1:7^21 · +inter:6^20] < ([]: 3'xs)
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < []1'l1
//│ --------------
//│ 6't:
//│ 	6't[] < ([+inter:6^5]: 7'ys)
//│ 	6't[] < ([+inter:6^5]: 4'ys)
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^20 · -l1:7^21]: N) < []6't
//│ 	([+inter:6^20 · -l1:7^21]: C(([]: Int), ([]: N))) < []6't
//│ --------------
//│ 9'9_callres:
//│ 	([-inter:6^5]: C(([]: 5'h), ([]: 9'9_callres))) < []9'9_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^20 · -l1:7^21]: N) < [-inter:6^5]9'9_callres
//│ 	([+inter:6^20 · -l2:8^23]: N) < [-inter:6^5]9'9_callres
//│ 	([+inter:6^5 · +inter:6^20 · -l1:7^21]: C(([]: Int), ([]: N))) < [-inter:6^5]9'9_callres
//│ --------------
//│ 2'l2:
//│ 	2'l2[-l2:8^23] < ([+inter:6^20]: 4'ys)
//│ 	2'l2[-l2:8^23] < ([+inter:6^20]: 7'ys)
//│ 	([]: N) < []2'l2
//│ --------------
//│ 12'24_callres:
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^20 · -l1:7^21]: N) < [-inter:6^20]12'24_callres
//│ 	([+inter:6^5 · +inter:6^20 · -l1:7^21]: C(([]: Int), ([]: N))) < [-inter:6^20]12'24_callres
//│ 	([+inter:6^20 · -l2:8^23]: N) < [-inter:6^20]12'24_callres
//│ 	([-inter:6^20]: C(([]: 5'h), ([]: 9'9_callres))) < []12'24_callres
//│ --------------
//│ 7'ys:
//│ 	7'ys[+inter:6^5] < ([]: 3'xs)
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^20 · -l1:7^21]: N) < [+inter:6^5]7'ys
//│ 	([+inter:6^20 · -l1:7^21]: C(([]: Int), ([]: N))) < [+inter:6^5]7'ys
//│ 	([]: N) < [-l2:8^23 · +inter:6^20]7'ys
//│ --------------
//│ 3'xs:
//│ 	3'xs[] < ([]: Destruct(N, C(5'h, 6't)))
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^20 · -l1:7^21]: N) < [+inter:6^5]3'xs
//│ 	([+inter:6^5 · +inter:6^20 · -l1:7^21]: C(([]: Int), ([]: N))) < [+inter:6^5]3'xs
//│ 	([+inter:6^20 · -l2:8^23]: N) < [+inter:6^5]3'xs
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([]: N))))) < [-l1:7^21 · +inter:6^20]3'xs
//│ --------------
//│ 11'22_callres:
//│ 	11'22_callres[] < ([]: ([]: 2'l2_8^23) => ([]: 12'24_callres))
//│ 	([]: ([]: 4'ys) => ([]: 4'ys)) < [-inter:6^20]11'22_callres
//│ 	([]: ([]: 7'ys) => ([]: C(([]: 5'h), ([]: 9'9_callres)))) < [-inter:6^20]11'22_callres
//│ --------------
//│ 8'7_callres:
//│ 	8'7_callres[] < ([]: ([]: 6't) => ([]: 9'9_callres))
//│ 	([]: ([]: 7'ys) => ([]: C(([]: 5'h), ([]: 9'9_callres)))) < [-inter:6^5]8'7_callres
//│ 	([]: ([]: 4'ys) => ([]: 4'ys)) < [-inter:6^5]8'7_callres
//│ --------------
//│ 4'ys:
//│ 	4'ys[-inter:6^5] < ([]: 9'9_callres)
//│ 	4'ys[-inter:6^20] < ([]: 12'24_callres)
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^20 · -l1:7^21]: N) < [+inter:6^5]4'ys
//│ 	([+inter:6^20 · -l1:7^21]: C(([]: Int), ([]: N))) < [+inter:6^5]4'ys
//│ 	([]: N) < [-l2:8^23 · +inter:6^20]4'ys
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<


fun inter(xs) = if xs is
    N then ys => ys
    C(h, t) then ys => C(h, inter(ys)(t))
fun l1(x) = C(1, C(2, l1(add(x, 1))))
let rec l2 = C(9, C(8, l2))
inter(l1(0))(l2)
//│ |#fun| |inter|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |ys| |=>| |ys|↵|C|(|h|,| |t|)| |#then| |ys| |=>| |C|(|h|,| |inter|(|ys|)|(|t|)|)|←|↵|#fun| |l1|(|x|)| |#=| |C|(|1|,| |C|(|2|,| |l1|(|add|(|x|,| |1|)|)|)|)|↵|#let| |#rec| |l2| |#=| |C|(|9|,| |C|(|8|,| |l2|)|)|↵|inter|(|l1|(|0|)|)|(|l2|)|
//│ Parsed: {fun inter = xs, => if xs is ‹(N) then ys, => ys; (C (h, t,)) then ys, => C (h, inter (ys,) (t,),)›; fun l1 = x, => C (1, C (2, l1 (add (x, 1,),),),); let rec l2 = C (9, C (8, l2,),); inter (l1 (0,),) (l2,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def inter:6 = (fun xs:9 -> case xs:9^1 of {
//│ 	N => (fun ys:10 -> ys:10^2)
//│ 	| C h:11 t:12 => (fun ys:13 -> [C h:11^4 ((inter:6^5 ys:13^6) t:12^8)])})
//│ def l1:7 = (fun x:14 -> [C 1 [C 2 (l1:7^16 ((add:4^17 x:14^18) 1))]])
//│ def l2:8 = [C 9 [C 8 l2:8^28]]
//│ ((inter:6^31 (l1:7^32 0)) l2:8^36)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 16'35_callres) <: ([]: ([]: 2'l2_8^36) => ([]: 17'37_callres))
//│ ([]: 0'inter_6^31) <: ([]: ([]: 15'34_callres) => ([]: 16'35_callres))
//│ ([]: 1'l1_7^32) <: ([]: ([]: Int) => ([]: 15'34_callres))
//│ ([]: C(([]: Int), ([]: C(([]: Int), ([]: 2'l2_8^28))))) <: ([]: 2'l2)
//│ ([]: ([]: 11'x) => ([]: C(([]: Int), ([]: C(([]: Int), ([]: 14'22_callres)))))) <: ([]: 1'l1)
//│ ([]: 1'l1_7^16) <: ([]: ([]: 13'21_callres) => ([]: 14'22_callres))
//│ ([]: 12'19_callres) <: ([]: ([]: Int) => ([]: 13'21_callres))
//│ ([]: ([]: Destruct(Int)) => ([]: ([]: Destruct(Int)) => ([]: Int))) <: ([]: ([]: 11'x) => ([]: 12'19_callres))
//│ ([]: ([]: 3'xs) => ([]: 10'12_matchres)) <: ([]: 0'inter)
//│ ([]: ([]: 7'ys) => ([]: C(([]: 5'h), ([]: 9'9_callres)))) <: ([]: 10'12_matchres)
//│ ([]: ([]: 4'ys) => ([]: 4'ys)) <: ([]: 10'12_matchres)
//│ ([]: 3'xs) <: ([]: Destruct(N, C(5'h, 6't)))
//│ ([]: 8'7_callres) <: ([]: ([]: 6't) => ([]: 9'9_callres))
//│ ([]: 0'inter_6^5) <: ([]: ([]: 7'ys) => ([]: 8'7_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(Int, 14'22_callres) <: 7'ys
//│ 	[-l1:7^16 · -l1:7^32 · +inter:6^31 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5]  --->  [-l1:7^32 · +inter:6^31 · +inter:6^5]
//│ C(Int, 2'l2_8^28) <: 7'ys
//│ 	[-l2:8^28 · -l2:8^36 · +inter:6^31 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5]  --->  [-l2:8^36 · +inter:6^31 · +inter:6^5 · +inter:6^5]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'inter:
//│ 	0'inter[-inter:6^5] < ([]: ([]: 7'ys) => ([]: 8'7_callres))
//│ 	0'inter[-inter:6^31] < ([]: ([]: 15'34_callres) => ([]: 16'35_callres))
//│ 	([]: ([]: 3'xs) => ([]: 10'12_matchres)) < []0'inter
//│ --------------
//│ 5'h:
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l1:7^32 · -l1:7^16]: Int) < []5'h
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^31 · -l1:7^32]: Int) < []5'h
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l2:8^36 · -l2:8^28]: Int) < []5'h
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l2:8^36]: Int) < []5'h
//│ 	([+inter:6^5 · +inter:6^31 · -l2:8^36]: Int) < []5'h
//│ 	([+inter:6^31 · -l1:7^32]: Int) < []5'h
//│ --------------
//│ 10'12_matchres:
//│ 	10'12_matchres[] < ([-inter:6^5]: 8'7_callres)
//│ 	10'12_matchres[] < ([-inter:6^31]: 16'35_callres)
//│ 	([]: ([]: 4'ys) => ([]: 4'ys)) < []10'12_matchres
//│ 	([]: ([]: 7'ys) => ([]: C(([]: 5'h), ([]: 9'9_callres)))) < []10'12_matchres
//│ --------------
//│ 14'22_callres:
//│ 	14'22_callres[-l1:7^32 · +inter:6^31 · +inter:6^5 · +inter:6^5] < ([]: 6't)
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([]: 14'22_callres))))) < [-l1:7^16]14'22_callres
//│ --------------
//│ 1'l1:
//│ 	1'l1[-l1:7^16] < ([]: ([]: 13'21_callres) => ([]: 14'22_callres))
//│ 	1'l1[-l1:7^32] < ([]: ([]: Int) => ([]: 15'34_callres))
//│ 	([]: ([]: 11'x) => ([]: C(([]: Int), ([]: C(([]: Int), ([]: 14'22_callres)))))) < []1'l1
//│ --------------
//│ 6't:
//│ 	6't[] < ([+inter:6^5]: 7'ys)
//│ 	6't[] < ([+inter:6^5]: 4'ys)
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l1:7^32 · -l1:7^16]: C(([]: Int), ([]: 14'22_callres))) < []6't
//│ 	([-l1:7^16]: C(([]: Int), ([]: C(([]: Int), ([]: 14'22_callres))))) < [-l1:7^32 · +inter:6^31 · +inter:6^5 · +inter:6^5]6't
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l2:8^36 · -l2:8^28]: C(([]: Int), ([]: 2'l2_8^28))) < []6't
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([]: 2'l2_8^28))))) < [-l2:8^28 · -l2:8^36 · +inter:6^31 · +inter:6^5 · +inter:6^5 · +inter:6^5]6't
//│ 	([+inter:6^5 · +inter:6^31 · -l2:8^36]: C(([]: Int), ([]: 2'l2_8^28))) < []6't
//│ 	([+inter:6^31 · -l1:7^32]: C(([]: Int), ([]: 14'22_callres))) < []6't
//│ --------------
//│ 9'9_callres:
//│ 	([-inter:6^5]: C(([]: 5'h), ([]: 9'9_callres))) < []9'9_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l1:7^32 · -l1:7^16]: C(([]: Int), ([]: C(([]: Int), ([]: 14'22_callres))))) < [-inter:6^5]9'9_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l1:7^32 · -l1:7^16]: C(([]: Int), ([]: 14'22_callres))) < [-inter:6^5]9'9_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l2:8^36 · -l2:8^28]: C(([]: Int), ([]: C(([]: Int), ([]: 2'l2_8^28))))) < [-inter:6^5]9'9_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l2:8^36 · -l2:8^28]: C(([]: Int), ([]: 2'l2_8^28))) < [-inter:6^5]9'9_callres
//│ 	([+inter:6^31 · -l2:8^36]: C(([]: Int), ([]: C(([]: Int), ([]: 2'l2_8^28))))) < [-inter:6^5]9'9_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^31 · -l2:8^36]: C(([]: Int), ([]: 2'l2_8^28))) < [-inter:6^5]9'9_callres
//│ 	([+inter:6^5 · +inter:6^31 · -l1:7^32]: C(([]: Int), ([]: 14'22_callres))) < [-inter:6^5]9'9_callres
//│ --------------
//│ 13'21_callres:
//│ 	13'21_callres[+l1:7^16] < ([]: 11'x)
//│ 	([]: Int) < []13'21_callres
//│ --------------
//│ 2'l2:
//│ 	2'l2[-l2:8^28 · -l2:8^36 · +inter:6^31 · +inter:6^5 · +inter:6^5 · +inter:6^5] < ([]: 6't)
//│ 	2'l2[-l2:8^36] < ([+inter:6^31]: 4'ys)
//│ 	2'l2[-l2:8^36] < ([+inter:6^31]: 7'ys)
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([]: 2'l2_8^28))))) < []2'l2
//│ --------------
//│ 17'37_callres:
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l1:7^32 · -l1:7^16]: C(([]: Int), ([]: C(([]: Int), ([]: 14'22_callres))))) < [-inter:6^31]17'37_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l1:7^32 · -l1:7^16]: C(([]: Int), ([]: 14'22_callres))) < [-inter:6^31]17'37_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l2:8^36 · -l2:8^28]: C(([]: Int), ([]: C(([]: Int), ([]: 2'l2_8^28))))) < [-inter:6^31]17'37_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l2:8^36 · -l2:8^28]: C(([]: Int), ([]: 2'l2_8^28))) < [-inter:6^31]17'37_callres
//│ 	([+inter:6^5 · +inter:6^31 · -l1:7^32]: C(([]: Int), ([]: 14'22_callres))) < [-inter:6^31]17'37_callres
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^31 · -l2:8^36]: C(([]: Int), ([]: 2'l2_8^28))) < [-inter:6^31]17'37_callres
//│ 	([+inter:6^31 · -l2:8^36]: C(([]: Int), ([]: C(([]: Int), ([]: 2'l2_8^28))))) < [-inter:6^31]17'37_callres
//│ 	([-inter:6^31]: C(([]: 5'h), ([]: 9'9_callres))) < []17'37_callres
//│ --------------
//│ 12'19_callres:
//│ 	12'19_callres[] < ([]: ([]: Int) => ([]: 13'21_callres))
//│ 	([]: ([]: Destruct(Int)) => ([]: Int)) < []12'19_callres
//│ --------------
//│ 7'ys:
//│ 	7'ys[+inter:6^5] < ([]: 3'xs)
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^31 · -l1:7^32 · -l1:7^16]: C(([]: Int), ([]: C(([]: Int), ([]: 14'22_callres))))) < [+inter:6^5]7'ys
//│ 	([+inter:6^31 · -l1:7^32]: C(([]: Int), ([]: 14'22_callres))) < [+inter:6^5]7'ys
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l2:8^36 · -l2:8^28]: C(([]: Int), ([]: C(([]: Int), ([]: 2'l2_8^28))))) < [+inter:6^5]7'ys
//│ 	([+inter:6^5 · +inter:6^31 · -l2:8^36]: C(([]: Int), ([]: 2'l2_8^28))) < [+inter:6^5]7'ys
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([]: 2'l2_8^28))))) < [-l2:8^36 · +inter:6^31]7'ys
//│ --------------
//│ 3'xs:
//│ 	3'xs[] < ([]: Destruct(N, C(5'h, 6't)))
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l1:7^32 · -l1:7^16]: C(([]: Int), ([]: C(([]: Int), ([]: 14'22_callres))))) < [+inter:6^5]3'xs
//│ 	([+inter:6^5 · +inter:6^31 · -l1:7^32]: C(([]: Int), ([]: 14'22_callres))) < [+inter:6^5]3'xs
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l2:8^36 · -l2:8^28]: C(([]: Int), ([]: C(([]: Int), ([]: 2'l2_8^28))))) < [+inter:6^5]3'xs
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^31 · -l2:8^36]: C(([]: Int), ([]: 2'l2_8^28))) < [+inter:6^5]3'xs
//│ 	([+inter:6^31 · -l2:8^36]: C(([]: Int), ([]: C(([]: Int), ([]: 2'l2_8^28))))) < [+inter:6^5]3'xs
//│ 	([-l1:7^32]: C(([]: Int), ([]: C(([]: Int), ([]: 14'22_callres))))) < [+inter:6^31]3'xs
//│ --------------
//│ 16'35_callres:
//│ 	16'35_callres[] < ([]: ([]: 2'l2_8^36) => ([]: 17'37_callres))
//│ 	([]: ([]: 4'ys) => ([]: 4'ys)) < [-inter:6^31]16'35_callres
//│ 	([]: ([]: 7'ys) => ([]: C(([]: 5'h), ([]: 9'9_callres)))) < [-inter:6^31]16'35_callres
//│ --------------
//│ 11'x:
//│ 	11'x[] < ([]: Destruct(Int))
//│ 	([]: Int) < [+l1:7^16]11'x
//│ 	([+l1:7^32]: Int) < []11'x
//│ --------------
//│ 8'7_callres:
//│ 	8'7_callres[] < ([]: ([]: 6't) => ([]: 9'9_callres))
//│ 	([]: ([]: 7'ys) => ([]: C(([]: 5'h), ([]: 9'9_callres)))) < [-inter:6^5]8'7_callres
//│ 	([]: ([]: 4'ys) => ([]: 4'ys)) < [-inter:6^5]8'7_callres
//│ --------------
//│ 4'ys:
//│ 	4'ys[-inter:6^5] < ([]: 9'9_callres)
//│ 	4'ys[-inter:6^31] < ([]: 17'37_callres)
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^31 · -l1:7^32 · -l1:7^16]: C(([]: Int), ([]: C(([]: Int), ([]: 14'22_callres))))) < [+inter:6^5]4'ys
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l1:7^32 · -l1:7^16]: C(([]: Int), ([]: 14'22_callres))) < [+inter:6^5]4'ys
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l2:8^36 · -l2:8^28]: C(([]: Int), ([]: C(([]: Int), ([]: 2'l2_8^28))))) < [+inter:6^5]4'ys
//│ 	([+inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^5 · +inter:6^31 · -l2:8^36 · -l2:8^28]: C(([]: Int), ([]: 2'l2_8^28))) < [+inter:6^5]4'ys
//│ 	([+inter:6^31 · -l1:7^32]: C(([]: Int), ([]: 14'22_callres))) < [+inter:6^5]4'ys
//│ 	([+inter:6^5 · +inter:6^31 · -l2:8^36]: C(([]: Int), ([]: 2'l2_8^28))) < [+inter:6^5]4'ys
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([]: 2'l2_8^28))))) < [-l2:8^36 · +inter:6^31]4'ys
//│ --------------
//│ 15'34_callres:
//│ 	15'34_callres[+inter:6^31] < ([]: 3'xs)
//│ 	([]: C(([]: Int), ([]: C(([]: Int), ([]: 14'22_callres))))) < [-l1:7^32]15'34_callres
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<




// NOTE: only head is handled
fun map(ls) = if ls is
    C(h, t) then f => C(f(h), map(t)(f))
    N then f => N
let l = C(K, N)
map(l)(
    x => if x is
        K then T
)
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |f| |=>| |C|(|f|(|h|)|,| |map|(|t|)|(|f|)|)|↵|N| |#then| |f| |=>| |N|←|↵|#let| |l| |#=| |C|(|K|,| |N|)|↵|map|(|l|)|(|→|x| |=>| |#if| |x| |is|→|K| |#then| |T|←|←|↵|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (h, t,)) then f, => C (f (h,), map (t,) (f,),); (N) then f, => N›; let l = C (K, N,); map (l,) (x, => if x is ‹(K) then T›,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = (fun ls:8 -> case ls:8^1 of {
//│ 	C h:9 t:10 => (fun f:11 -> [C (f:11^2 h:9^3) ((map:6^5 t:10^6) f:11^8)])
//│ 	| N => (fun f:12 -> [N])})
//│ def l:7 = [C [K] [N]]
//│ ((map:6^19 l:7^20) (fun x:13 -> case x:13^22 of {
//│ 	K => [T]}))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 11'21_callres) <: ([]: ([]: ([]: 12'x) => ([]: 13'24_matchres)) => ([]: 14'26_callres))
//│ ([]: T) <: ([]: 13'24_matchres)
//│ ([]: 12'x) <: ([]: Destruct(K))
//│ ([]: 0'map_6^19) <: ([]: ([]: 1'l_7^20) => ([]: 11'21_callres))
//│ ([]: C(([]: K), ([]: N))) <: ([]: 1'l)
//│ ([]: ([]: 2'ls) => ([]: 10'14_matchres)) <: ([]: 0'map)
//│ ([]: ([]: 9'f) => ([]: N)) <: ([]: 10'14_matchres)
//│ ([]: ([]: 5'f) => ([]: C(([]: 6'4_callres), ([]: 8'9_callres)))) <: ([]: 10'14_matchres)
//│ ([]: 2'ls) <: ([]: Destruct(C(3'h, 4't), N))
//│ ([]: 7'7_callres) <: ([]: ([]: 5'f) => ([]: 8'9_callres))
//│ ([]: 0'map_6^5) <: ([]: ([]: 4't) => ([]: 7'7_callres))
//│ ([]: 5'f) <: ([]: ([]: 3'h) => ([]: 6'4_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'map:
//│ 	0'map[-map:6^5] < ([]: ([]: 4't) => ([]: 7'7_callres))
//│ 	0'map[-map:6^19] < ([]: ([]: 1'l_7^20) => ([]: 11'21_callres))
//│ 	([]: ([]: 2'ls) => ([]: 10'14_matchres)) < []0'map
//│ --------------
//│ 5'f:
//│ 	5'f[] < ([]: ([]: 3'h) => ([]: 6'4_callres))
//│ 	5'f[] < ([+map:6^5]: 9'f)
//│ 	([]: ([]: 12'x) => ([]: 13'24_matchres)) < [+map:6^19]5'f
//│ --------------
//│ 10'14_matchres:
//│ 	10'14_matchres[] < ([-map:6^5]: 7'7_callres)
//│ 	10'14_matchres[] < ([-map:6^19]: 11'21_callres)
//│ 	([]: ([]: 5'f) => ([]: C(([]: 6'4_callres), ([]: 8'9_callres)))) < []10'14_matchres
//│ 	([]: ([]: 9'f) => ([]: N)) < []10'14_matchres
//│ --------------
//│ 14'26_callres:
//│ 	([-map:6^19]: C(([]: 6'4_callres), ([]: 8'9_callres))) < []14'26_callres
//│ 	([-map:6^19]: N) < []14'26_callres
//│ --------------
//│ 1'l:
//│ 	1'l[-l:7^20 · +map:6^19] < ([]: 2'ls)
//│ 	([]: C(([]: K), ([]: N))) < []1'l
//│ --------------
//│ 6'4_callres:
//│ 	([]: T) < [+map:6^19]6'4_callres
//│ --------------
//│ 9'f:
//│ 	([+map:6^19]: ([]: 12'x) => ([]: 13'24_matchres)) < [+map:6^5]9'f
//│ 	([]: ([]: 12'x) => ([]: 13'24_matchres)) < [+map:6^19]9'f
//│ --------------
//│ 13'24_matchres:
//│ 	13'24_matchres[+map:6^19] < ([]: 6'4_callres)
//│ 	([]: T) < []13'24_matchres
//│ --------------
//│ 2'ls:
//│ 	2'ls[] < ([]: Destruct(C(3'h, 4't), N))
//│ 	([+map:6^19 · -l:7^20]: N) < [+map:6^5]2'ls
//│ 	([]: C(([]: K), ([]: N))) < [-l:7^20 · +map:6^19]2'ls
//│ --------------
//│ 12'x:
//│ 	12'x[] < ([]: Destruct(K))
//│ 	([+map:6^19 · -l:7^20]: K) < [-map:6^19]12'x
//│ --------------
//│ 7'7_callres:
//│ 	7'7_callres[] < ([]: ([]: 5'f) => ([]: 8'9_callres))
//│ 	([]: ([]: 9'f) => ([]: N)) < [-map:6^5]7'7_callres
//│ 	([]: ([]: 5'f) => ([]: C(([]: 6'4_callres), ([]: 8'9_callres)))) < [-map:6^5]7'7_callres
//│ --------------
//│ 3'h:
//│ 	3'h[] < ([-map:6^19]: 12'x)
//│ 	([+map:6^19 · -l:7^20]: K) < []3'h
//│ --------------
//│ 11'21_callres:
//│ 	11'21_callres[] < ([]: ([]: ([]: 12'x) => ([]: 13'24_matchres)) => ([]: 14'26_callres))
//│ 	([]: ([]: 5'f) => ([]: C(([]: 6'4_callres), ([]: 8'9_callres)))) < [-map:6^19]11'21_callres
//│ 	([]: ([]: 9'f) => ([]: N)) < [-map:6^19]11'21_callres
//│ --------------
//│ 8'9_callres:
//│ 	([-map:6^5]: N) < []8'9_callres
//│ 	([-map:6^5]: C(([]: 6'4_callres), ([]: 8'9_callres))) < []8'9_callres
//│ --------------
//│ 4't:
//│ 	4't[+map:6^5] < ([]: 2'ls)
//│ 	([+map:6^19 · -l:7^20]: N) < []4't
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<



fun map(ls) = if ls is
    C(h, t) then C(
        (if h is
            K then T
            KK then TT
            KKKK then TTTT
        ),
        map(t)
    )
    N then N
let l = C(K, C(KK, C(KKKK, N)))
map(l)
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|→|(|#if| |h| |is|→|K| |#then| |T|↵|KK| |#then| |TT|↵|KKKK| |#then| |TTTT|←|↵|)|,|↵|map|(|t|)|←|↵|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|K|,| |C|(|KK|,| |C|(|KKKK|,| |N|)|)|)|↵|map|(|l|)|
//│ Parsed: {fun map = ls, => if ls is ‹(C (h, t,)) then C ('(' if h is ‹(K) then T; (KK) then TT; (KKKK) then TTTT›, ')', map (t,),); (N) then N›; let l = C (K, C (KK, C (KKKK, N,),),); map (l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = (fun ls:8 -> case ls:8^1 of {
//│ 	C h:9 t:10 => [C case h:9^2 of {
//│ 		K => [T]
//│ 		| KK => [TT]
//│ 		| KKKK => [TTTT]} (map:6^7 t:10^8)]
//│ 	| N => [N]})
//│ def l:7 = [C [K] [C [KK] [C [KKKK] [N]]]]
//│ (map:6^21 l:7^22)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 0'map_6^21) <: ([]: ([]: 1'l_7^22) => ([]: 8'23_callres))
//│ ([]: C(([]: K), ([]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))))) <: ([]: 1'l)
//│ ([]: ([]: 2'ls) => ([]: 7'12_matchres)) <: ([]: 0'map)
//│ ([]: N) <: ([]: 7'12_matchres)
//│ ([]: C(([]: 5'6_matchres), ([]: 6'9_callres))) <: ([]: 7'12_matchres)
//│ ([]: 2'ls) <: ([]: Destruct(C(3'h, 4't), N))
//│ ([]: 0'map_6^7) <: ([]: ([]: 4't) => ([]: 6'9_callres))
//│ ([]: TTTT) <: ([]: 5'6_matchres)
//│ ([]: TT) <: ([]: 5'6_matchres)
//│ ([]: T) <: ([]: 5'6_matchres)
//│ ([]: 3'h) <: ([]: Destruct(K, KK, KKKK))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'map:
//│ 	0'map[-map:6^7] < ([]: ([]: 4't) => ([]: 6'9_callres))
//│ 	0'map[-map:6^21] < ([]: ([]: 1'l_7^22) => ([]: 8'23_callres))
//│ 	([]: ([]: 2'ls) => ([]: 7'12_matchres)) < []0'map
//│ --------------
//│ 5'6_matchres:
//│ 	([]: T) < []5'6_matchres
//│ 	([]: TT) < []5'6_matchres
//│ 	([]: TTTT) < []5'6_matchres
//│ --------------
//│ 1'l:
//│ 	1'l[-l:7^22 · +map:6^21] < ([]: 2'ls)
//│ 	([]: C(([]: K), ([]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))))) < []1'l
//│ --------------
//│ 6'9_callres:
//│ 	([]: N) < [-map:6^7]6'9_callres
//│ 	([]: C(([]: 5'6_matchres), ([]: 6'9_callres))) < [-map:6^7]6'9_callres
//│ --------------
//│ 2'ls:
//│ 	2'ls[] < ([]: Destruct(C(3'h, 4't), N))
//│ 	([+map:6^7 · +map:6^7 · +map:6^21 · -l:7^22]: N) < [+map:6^7]2'ls
//│ 	([+map:6^7 · +map:6^21 · -l:7^22]: C(([]: KKKK), ([]: N))) < [+map:6^7]2'ls
//│ 	([+map:6^21 · -l:7^22]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))) < [+map:6^7]2'ls
//│ 	([]: C(([]: K), ([]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))))) < [-l:7^22 · +map:6^21]2'ls
//│ --------------
//│ 7'12_matchres:
//│ 	7'12_matchres[] < ([-map:6^7]: 6'9_callres)
//│ 	7'12_matchres[] < ([-map:6^21]: 8'23_callres)
//│ 	([]: C(([]: 5'6_matchres), ([]: 6'9_callres))) < []7'12_matchres
//│ 	([]: N) < []7'12_matchres
//│ --------------
//│ 3'h:
//│ 	3'h[] < ([]: Destruct(K, KK, KKKK))
//│ 	([+map:6^7 · +map:6^7 · +map:6^21 · -l:7^22]: KKKK) < []3'h
//│ 	([+map:6^7 · +map:6^21 · -l:7^22]: KK) < []3'h
//│ 	([+map:6^21 · -l:7^22]: K) < []3'h
//│ --------------
//│ 8'23_callres:
//│ 	([]: C(([]: 5'6_matchres), ([]: 6'9_callres))) < [-map:6^21]8'23_callres
//│ 	([]: N) < [-map:6^21]8'23_callres
//│ --------------
//│ 4't:
//│ 	4't[+map:6^7] < ([]: 2'ls)
//│ 	([+map:6^7 · +map:6^7 · +map:6^21 · -l:7^22]: N) < []4't
//│ 	([+map:6^7 · +map:6^21 · -l:7^22]: C(([]: KKKK), ([]: N))) < []4't
//│ 	([+map:6^21 · -l:7^22]: C(([]: KK), ([]: C(([]: KKKK), ([]: N))))) < []4't
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<



// NOTE: consumer `c` is used twice in its body, but it fine here
let aa = T(N, L, L)
let bb = T(N, L, L)
let t = T(K, aa, bb)
fun c(x) = if x is
    T(n, l, r) then T(
        (if n is
            K then KK
            N then NN
        ),
        c(l),
        c(r)
    )
    L then LL
c(t)
//│ |#let| |aa| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |bb| |#=| |T|(|N|,| |L|,| |L|)|↵|#let| |t| |#=| |T|(|K|,| |aa|,| |bb|)|↵|#fun| |c|(|x|)| |#=| |#if| |x| |is|→|T|(|n|,| |l|,| |r|)| |#then| |T|(|→|(|#if| |n| |is|→|K| |#then| |KK|↵|N| |#then| |NN|←|↵|)|,|↵|c|(|l|)|,|↵|c|(|r|)|←|↵|)|↵|L| |#then| |LL|←|↵|c|(|t|)|
//│ Parsed: {let aa = T (N, L, L,); let bb = T (N, L, L,); let t = T (K, aa, bb,); fun c = x, => if x is ‹(T (n, l, r,)) then T ('(' if n is ‹(K) then KK; (N) then NN›, ')', c (l,), c (r,),); (L) then LL›; c (t,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def aa:6 = [T [N] [L] [L]]
//│ def bb:7 = [T [N] [L] [L]]
//│ def t:8 = [T [K] aa:6^10 bb:7^11]
//│ def c:9 = (fun x:10 -> case x:10^13 of {
//│ 	T n:11 l:12 r:13 => [T case n:11^14 of {
//│ 		K => [KK]
//│ 		| N => [NN]} (c:9^18 l:12^19) (c:9^21 r:13^22)]
//│ 	| L => [LL]})
//│ (c:9^28 t:8^29)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 3'c_9^28) <: ([]: ([]: 2't_8^29) => ([]: 12'30_callres))
//│ ([]: ([]: 4'x) => ([]: 11'26_matchres)) <: ([]: 3'c)
//│ ([]: LL) <: ([]: 11'26_matchres)
//│ ([]: T(([]: 8'17_matchres), ([]: 9'20_callres), ([]: 10'23_callres))) <: ([]: 11'26_matchres)
//│ ([]: 4'x) <: ([]: Destruct(T(5'n, 6'l, 7'r), L))
//│ ([]: 3'c_9^21) <: ([]: ([]: 7'r) => ([]: 10'23_callres))
//│ ([]: 3'c_9^18) <: ([]: ([]: 6'l) => ([]: 9'20_callres))
//│ ([]: NN) <: ([]: 8'17_matchres)
//│ ([]: KK) <: ([]: 8'17_matchres)
//│ ([]: 5'n) <: ([]: Destruct(K, N))
//│ ([]: T(([]: K), ([]: 0'aa_6^10), ([]: 1'bb_7^11))) <: ([]: 2't)
//│ ([]: T(([]: N), ([]: L), ([]: L))) <: ([]: 1'bb)
//│ ([]: T(([]: N), ([]: L), ([]: L))) <: ([]: 0'aa)
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'aa:
//│ 	0'aa[-aa:6^10 · -t:8^29 · +c:9^28] < ([]: 6'l)
//│ 	([]: T(([]: N), ([]: L), ([]: L))) < []0'aa
//│ --------------
//│ 5'n:
//│ 	5'n[] < ([]: Destruct(K, N))
//│ 	([+c:9^18 · +c:9^28 · -t:8^29 · -aa:6^10]: N) < []5'n
//│ 	([+c:9^21 · +c:9^28 · -t:8^29 · -bb:7^11]: N) < []5'n
//│ 	([+c:9^28 · -t:8^29]: K) < []5'n
//│ --------------
//│ 10'23_callres:
//│ 	([]: LL) < [-c:9^21]10'23_callres
//│ 	([]: T(([]: 8'17_matchres), ([]: 9'20_callres), ([]: 10'23_callres))) < [-c:9^21]10'23_callres
//│ --------------
//│ 1'bb:
//│ 	1'bb[-bb:7^11 · -t:8^29 · +c:9^28] < ([]: 7'r)
//│ 	([]: T(([]: N), ([]: L), ([]: L))) < []1'bb
//│ --------------
//│ 6'l:
//│ 	6'l[+c:9^18] < ([]: 4'x)
//│ 	([+c:9^18 · +c:9^28 · -t:8^29 · -aa:6^10]: L) < []6'l
//│ 	([]: T(([]: N), ([]: L), ([]: L))) < [-aa:6^10 · -t:8^29 · +c:9^28]6'l
//│ 	([+c:9^21 · +c:9^28 · -t:8^29 · -bb:7^11]: L) < []6'l
//│ --------------
//│ 9'20_callres:
//│ 	([]: LL) < [-c:9^18]9'20_callres
//│ 	([]: T(([]: 8'17_matchres), ([]: 9'20_callres), ([]: 10'23_callres))) < [-c:9^18]9'20_callres
//│ --------------
//│ 2't:
//│ 	2't[-t:8^29 · +c:9^28] < ([]: 4'x)
//│ 	([]: T(([]: K), ([]: 0'aa_6^10), ([]: 1'bb_7^11))) < []2't
//│ --------------
//│ 12'30_callres:
//│ 	([]: T(([]: 8'17_matchres), ([]: 9'20_callres), ([]: 10'23_callres))) < [-c:9^28]12'30_callres
//│ 	([]: LL) < [-c:9^28]12'30_callres
//│ --------------
//│ 7'r:
//│ 	7'r[+c:9^21] < ([]: 4'x)
//│ 	([+c:9^18 · +c:9^28 · -t:8^29 · -aa:6^10]: L) < []7'r
//│ 	([+c:9^21 · +c:9^28 · -t:8^29 · -bb:7^11]: L) < []7'r
//│ 	([]: T(([]: N), ([]: L), ([]: L))) < [-bb:7^11 · -t:8^29 · +c:9^28]7'r
//│ --------------
//│ 3'c:
//│ 	3'c[-c:9^18] < ([]: ([]: 6'l) => ([]: 9'20_callres))
//│ 	3'c[-c:9^21] < ([]: ([]: 7'r) => ([]: 10'23_callres))
//│ 	3'c[-c:9^28] < ([]: ([]: 2't_8^29) => ([]: 12'30_callres))
//│ 	([]: ([]: 4'x) => ([]: 11'26_matchres)) < []3'c
//│ --------------
//│ 11'26_matchres:
//│ 	11'26_matchres[] < ([-c:9^18]: 9'20_callres)
//│ 	11'26_matchres[] < ([-c:9^21]: 10'23_callres)
//│ 	11'26_matchres[] < ([-c:9^28]: 12'30_callres)
//│ 	([]: T(([]: 8'17_matchres), ([]: 9'20_callres), ([]: 10'23_callres))) < []11'26_matchres
//│ 	([]: LL) < []11'26_matchres
//│ --------------
//│ 8'17_matchres:
//│ 	([]: KK) < []8'17_matchres
//│ 	([]: NN) < []8'17_matchres
//│ --------------
//│ 4'x:
//│ 	4'x[] < ([]: Destruct(T(5'n, 6'l, 7'r), L))
//│ 	([+c:9^18 · +c:9^28 · -t:8^29 · -aa:6^10]: L) < [+c:9^21]4'x
//│ 	([+c:9^18 · +c:9^28 · -t:8^29 · -aa:6^10]: L) < [+c:9^18]4'x
//│ 	([+c:9^28 · -t:8^29 · -aa:6^10]: T(([]: N), ([]: L), ([]: L))) < [+c:9^18]4'x
//│ 	([+c:9^21 · +c:9^28 · -t:8^29 · -bb:7^11]: L) < [+c:9^21]4'x
//│ 	([+c:9^21 · +c:9^28 · -t:8^29 · -bb:7^11]: L) < [+c:9^18]4'x
//│ 	([+c:9^28 · -t:8^29 · -bb:7^11]: T(([]: N), ([]: L), ([]: L))) < [+c:9^21]4'x
//│ 	([]: T(([]: K), ([]: 0'aa_6^10), ([]: 1'bb_7^11))) < [-t:8^29 · +c:9^28]4'x
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<




fun sum(ls) = if ls is
    C(h, t) then S(N, sum(t))
    N then N
fun mapa(lsa) = if lsa is
    C(ha, ta) then C(primitive(ha), mapa(ta))
    N then N
fun mapb(lsb) = if lsb is
    C(hb, tb) then C(primitive(hb), mapb(tb))
    N then N
sum(mapa(mapb(primitive)))
//│ |#fun| |sum|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |S|(|N|,| |sum|(|t|)|)|↵|N| |#then| |N|←|↵|#fun| |mapa|(|lsa|)| |#=| |#if| |lsa| |is|→|C|(|ha|,| |ta|)| |#then| |C|(|primitive|(|ha|)|,| |mapa|(|ta|)|)|↵|N| |#then| |N|←|↵|#fun| |mapb|(|lsb|)| |#=| |#if| |lsb| |is|→|C|(|hb|,| |tb|)| |#then| |C|(|primitive|(|hb|)|,| |mapb|(|tb|)|)|↵|N| |#then| |N|←|↵|sum|(|mapa|(|mapb|(|primitive|)|)|)|
//│ Parsed: {fun sum = ls, => if ls is ‹(C (h, t,)) then S (N, sum (t,),); (N) then N›; fun mapa = lsa, => if lsa is ‹(C (ha, ta,)) then C (primitive (ha,), mapa (ta,),); (N) then N›; fun mapb = lsb, => if lsb is ‹(C (hb, tb,)) then C (primitive (hb,), mapb (tb,),); (N) then N›; sum (mapa (mapb (primitive,),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def sum:6 = (fun ls:9 -> case ls:9^1 of {
//│ 	C h:10 t:11 => [S [N] (sum:6^3 t:11^4)]
//│ 	| N => [N]})
//│ def mapa:7 = (fun lsa:12 -> case lsa:12^10 of {
//│ 	C ha:13 ta:14 => [C (primitive:3^11 ha:13^12) (mapa:7^14 ta:14^15)]
//│ 	| N => [N]})
//│ def mapb:8 = (fun lsb:15 -> case lsb:15^21 of {
//│ 	C hb:16 tb:17 => [C (primitive:3^22 hb:16^23) (mapb:8^25 tb:17^26)]
//│ 	| N => [N]})
//│ (sum:6^32 (mapa:7^33 (mapb:8^34 primitive:3^35)))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 0'sum_6^32) <: ([]: ([]: 21'37_callres) => ([]: 22'38_callres))
//│ ([]: 1'mapa_7^33) <: ([]: ([]: 20'36_callres) => ([]: 21'37_callres))
//│ ([]: 2'mapb_8^34) <: ([]: ([]: NoProd) => ([]: 20'36_callres))
//│ ([]: ([]: 14'lsb) => ([]: 19'30_matchres)) <: ([]: 2'mapb)
//│ ([]: N) <: ([]: 19'30_matchres)
//│ ([]: C(([]: 17'24_callres), ([]: 18'27_callres))) <: ([]: 19'30_matchres)
//│ ([]: 14'lsb) <: ([]: Destruct(C(15'hb, 16'tb), N))
//│ ([]: 2'mapb_8^25) <: ([]: ([]: 16'tb) => ([]: 18'27_callres))
//│ ([]: ([]: 8'lsa) => ([]: 13'19_matchres)) <: ([]: 1'mapa)
//│ ([]: N) <: ([]: 13'19_matchres)
//│ ([]: C(([]: 11'13_callres), ([]: 12'16_callres))) <: ([]: 13'19_matchres)
//│ ([]: 8'lsa) <: ([]: Destruct(C(9'ha, 10'ta), N))
//│ ([]: 1'mapa_7^14) <: ([]: ([]: 10'ta) => ([]: 12'16_callres))
//│ ([]: ([]: 3'ls) => ([]: 7'8_matchres)) <: ([]: 0'sum)
//│ ([]: N) <: ([]: 7'8_matchres)
//│ ([]: S(([]: N), ([]: 6'5_callres))) <: ([]: 7'8_matchres)
//│ ([]: 3'ls) <: ([]: Destruct(C(4'h, 5't), N))
//│ ([]: 0'sum_6^3) <: ([]: ([]: 5't) => ([]: 6'5_callres))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(11'13_callres, 12'16_callres) <: 3'ls
//│ 	[-mapa:7^14 · -mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3 · +sum:6^3]  --->  [-mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3]
//│ C(17'24_callres, 18'27_callres) <: 8'lsa
//│ 	[-mapb:8^25 · -mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14 · +mapa:7^14]  --->  [-mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'sum:
//│ 	0'sum[-sum:6^3] < ([]: ([]: 5't) => ([]: 6'5_callres))
//│ 	0'sum[-sum:6^32] < ([]: ([]: 21'37_callres) => ([]: 22'38_callres))
//│ 	([]: ([]: 3'ls) => ([]: 7'8_matchres)) < []0'sum
//│ --------------
//│ 5't:
//│ 	5't[+sum:6^3] < ([]: 3'ls)
//│ 	([-mapa:7^14]: C(([]: 11'13_callres), ([]: 12'16_callres))) < [-mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3]5't
//│ 	([-mapa:7^14]: N) < [-mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3]5't
//│ 	([-mapa:7^14]: C(([]: 11'13_callres), ([]: 12'16_callres))) < [-mapa:7^33 · +sum:6^32]5't
//│ 	([-mapa:7^14]: N) < [-mapa:7^33 · +sum:6^32]5't
//│ --------------
//│ 10'ta:
//│ 	10'ta[+mapa:7^14] < ([]: 8'lsa)
//│ 	([-mapb:8^25]: C(([]: 17'24_callres), ([]: 18'27_callres))) < [-mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14]10'ta
//│ 	([-mapb:8^25]: N) < [-mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14]10'ta
//│ 	([-mapb:8^25]: C(([]: 17'24_callres), ([]: 18'27_callres))) < [-mapb:8^34 · +mapa:7^33]10'ta
//│ 	([-mapb:8^25]: N) < [-mapb:8^34 · +mapa:7^33]10'ta
//│ --------------
//│ 14'lsb:
//│ 	14'lsb[] < ([]: Destruct(C(15'hb, 16'tb), N))
//│ --------------
//│ 20'36_callres:
//│ 	20'36_callres[+mapa:7^33] < ([]: 8'lsa)
//│ 	([]: C(([]: 17'24_callres), ([]: 18'27_callres))) < [-mapb:8^34]20'36_callres
//│ 	([]: N) < [-mapb:8^34]20'36_callres
//│ --------------
//│ 1'mapa:
//│ 	1'mapa[-mapa:7^14] < ([]: ([]: 10'ta) => ([]: 12'16_callres))
//│ 	1'mapa[-mapa:7^33] < ([]: ([]: 20'36_callres) => ([]: 21'37_callres))
//│ 	([]: ([]: 8'lsa) => ([]: 13'19_matchres)) < []1'mapa
//│ --------------
//│ 6'5_callres:
//│ 	([]: N) < [-sum:6^3]6'5_callres
//│ 	([]: S(([]: N), ([]: 6'5_callres))) < [-sum:6^3]6'5_callres
//│ --------------
//│ 21'37_callres:
//│ 	21'37_callres[+sum:6^32] < ([]: 3'ls)
//│ 	([]: C(([]: 11'13_callres), ([]: 12'16_callres))) < [-mapa:7^33]21'37_callres
//│ 	([]: N) < [-mapa:7^33]21'37_callres
//│ --------------
//│ 13'19_matchres:
//│ 	13'19_matchres[] < ([-mapa:7^14]: 12'16_callres)
//│ 	13'19_matchres[] < ([-mapa:7^33]: 21'37_callres)
//│ 	([]: C(([]: 11'13_callres), ([]: 12'16_callres))) < []13'19_matchres
//│ 	([]: N) < []13'19_matchres
//│ --------------
//│ 2'mapb:
//│ 	2'mapb[-mapb:8^25] < ([]: ([]: 16'tb) => ([]: 18'27_callres))
//│ 	2'mapb[-mapb:8^34] < ([]: ([]: NoProd) => ([]: 20'36_callres))
//│ 	([]: ([]: 14'lsb) => ([]: 19'30_matchres)) < []2'mapb
//│ --------------
//│ 17'24_callres:
//│ 	17'24_callres[-mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14] < ([]: 9'ha)
//│ 	17'24_callres[-mapb:8^34 · +mapa:7^33] < ([]: 9'ha)
//│ --------------
//│ 22'38_callres:
//│ 	([]: S(([]: N), ([]: 6'5_callres))) < [-sum:6^32]22'38_callres
//│ 	([]: N) < [-sum:6^32]22'38_callres
//│ --------------
//│ 12'16_callres:
//│ 	12'16_callres[-mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3] < ([]: 5't)
//│ 	12'16_callres[-mapa:7^33 · +sum:6^32] < ([]: 5't)
//│ 	([]: N) < [-mapa:7^14]12'16_callres
//│ 	([]: C(([]: 11'13_callres), ([]: 12'16_callres))) < [-mapa:7^14]12'16_callres
//│ --------------
//│ 7'8_matchres:
//│ 	7'8_matchres[] < ([-sum:6^3]: 6'5_callres)
//│ 	7'8_matchres[] < ([-sum:6^32]: 22'38_callres)
//│ 	([]: S(([]: N), ([]: 6'5_callres))) < []7'8_matchres
//│ 	([]: N) < []7'8_matchres
//│ --------------
//│ 3'ls:
//│ 	3'ls[] < ([]: Destruct(C(4'h, 5't), N))
//│ 	([+sum:6^32 · -mapa:7^33 · -mapa:7^14]: N) < [+sum:6^3]3'ls
//│ 	([+sum:6^3 · +sum:6^32 · -mapa:7^33 · -mapa:7^14 · -mapa:7^14]: N) < [+sum:6^3]3'ls
//│ 	([+sum:6^32 · -mapa:7^33 · -mapa:7^14]: C(([]: 11'13_callres), ([]: 12'16_callres))) < [+sum:6^3]3'ls
//│ 	([-mapa:7^33]: N) < [+sum:6^32]3'ls
//│ 	([-mapa:7^33]: C(([]: 11'13_callres), ([]: 12'16_callres))) < [+sum:6^32]3'ls
//│ --------------
//│ 18'27_callres:
//│ 	18'27_callres[-mapb:8^25 · -mapb:8^34 · +mapa:7^33 · +mapa:7^14] < ([]: 10'ta)
//│ 	18'27_callres[-mapb:8^34 · +mapa:7^33] < ([]: 10'ta)
//│ 	([]: N) < [-mapb:8^25]18'27_callres
//│ 	([]: C(([]: 17'24_callres), ([]: 18'27_callres))) < [-mapb:8^25]18'27_callres
//│ --------------
//│ 16'tb:
//│ 	16'tb[+mapb:8^25] < ([]: 14'lsb)
//│ --------------
//│ 11'13_callres:
//│ 	11'13_callres[-mapa:7^14 · -mapa:7^33 · +sum:6^32 · +sum:6^3] < ([]: 4'h)
//│ 	11'13_callres[-mapa:7^33 · +sum:6^32] < ([]: 4'h)
//│ --------------
//│ 8'lsa:
//│ 	8'lsa[] < ([]: Destruct(C(9'ha, 10'ta), N))
//│ 	([+mapa:7^33 · -mapb:8^34 · -mapb:8^25]: N) < [+mapa:7^14]8'lsa
//│ 	([+mapa:7^14 · +mapa:7^33 · -mapb:8^34 · -mapb:8^25 · -mapb:8^25]: N) < [+mapa:7^14]8'lsa
//│ 	([+mapa:7^33 · -mapb:8^34 · -mapb:8^25]: C(([]: 17'24_callres), ([]: 18'27_callres))) < [+mapa:7^14]8'lsa
//│ 	([-mapb:8^34]: N) < [+mapa:7^33]8'lsa
//│ 	([-mapb:8^34]: C(([]: 17'24_callres), ([]: 18'27_callres))) < [+mapa:7^33]8'lsa
//│ --------------
//│ 19'30_matchres:
//│ 	19'30_matchres[] < ([-mapb:8^25]: 18'27_callres)
//│ 	19'30_matchres[] < ([-mapb:8^34]: 20'36_callres)
//│ 	([]: C(([]: 17'24_callres), ([]: 18'27_callres))) < []19'30_matchres
//│ 	([]: N) < []19'30_matchres
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<

fun map(ls) = if ls is
    N then N
    C(hhh, ttt) then C((
        head => if head is 
            T then K
            TT then KK
    )(hhh), map(ttt))
fun last(ys) = if ys is
    N then x => x
    C(h, t) then x => last(t)(h)
fun lastDrive(xs) = if xs is
    N then None
    C(hh, tt) then Some(last(tt)(hh))
lastDrive(map(C(T, C(TT, N))))
//│ |#fun| |map|(|ls|)| |#=| |#if| |ls| |is|→|N| |#then| |N|↵|C|(|hhh|,| |ttt|)| |#then| |C|(|(|→|head| |=>| |#if| |head| |is| |→|T| |#then| |K|↵|TT| |#then| |KK|←|←|↵|)|(|hhh|)|,| |map|(|ttt|)|)|←|↵|#fun| |last|(|ys|)| |#=| |#if| |ys| |is|→|N| |#then| |x| |=>| |x|↵|C|(|h|,| |t|)| |#then| |x| |=>| |last|(|t|)|(|h|)|←|↵|#fun| |lastDrive|(|xs|)| |#=| |#if| |xs| |is|→|N| |#then| |None|↵|C|(|hh|,| |tt|)| |#then| |Some|(|last|(|tt|)|(|hh|)|)|←|↵|lastDrive|(|map|(|C|(|T|,| |C|(|TT|,| |N|)|)|)|)|
//│ Parsed: {fun map = ls, => if ls is ‹(N) then N; (C (hhh, ttt,)) then C ('(' head, => if head is ‹(T) then K; (TT) then KK›, ')' (hhh,), map (ttt,),)›; fun last = ys, => if ys is ‹(N) then x, => x; (C (h, t,)) then x, => last (t,) (h,)›; fun lastDrive = xs, => if xs is ‹(N) then None; (C (hh, tt,)) then Some (last (tt,) (hh,),)›; lastDrive (map (C (T, C (TT, N,),),),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ def map:6 = (fun ls:9 -> case ls:9^1 of {
//│ 	N => [N]
//│ 	| C hhh:10 ttt:11 => [C ((fun head:12 -> case head:12^3 of {
//│ 		T => [K]
//│ 		| TT => [KK]}) hhh:10^8) (map:6^10 ttt:11^11)]})
//│ def last:7 = (fun ys:13 -> case ys:13^16 of {
//│ 	N => (fun x:14 -> x:14^17)
//│ 	| C h:15 t:16 => (fun x:17 -> ((last:7^19 t:16^20) h:15^22))})
//│ def lastDrive:8 = (fun xs:18 -> case xs:18^27 of {
//│ 	N => [None]
//│ 	| C hh:19 tt:20 => [Some ((last:7^29 tt:20^30) hh:19^32)]})
//│ (lastDrive:8^37 (map:6^38 [C [T] [C [TT] [N]]]))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> initial constraints >>>>>>>>>>
//│ ([]: 2'lastDrive_8^37) <: ([]: ([]: 25'44_callres) => ([]: 26'45_callres))
//│ ([]: 0'map_6^38) <: ([]: ([]: C(([]: T), ([]: C(([]: TT), ([]: N))))) => ([]: 25'44_callres))
//│ ([]: ([]: 19'xs) => ([]: 24'35_matchres)) <: ([]: 2'lastDrive)
//│ ([]: Some(([]: 23'33_callres))) <: ([]: 24'35_matchres)
//│ ([]: None) <: ([]: 24'35_matchres)
//│ ([]: 19'xs) <: ([]: Destruct(N, C(20'hh, 21'tt)))
//│ ([]: 22'31_callres) <: ([]: ([]: 20'hh) => ([]: 23'33_callres))
//│ ([]: 1'last_7^29) <: ([]: ([]: 21'tt) => ([]: 22'31_callres))
//│ ([]: ([]: 11'ys) => ([]: 18'25_matchres)) <: ([]: 1'last)
//│ ([]: ([]: 15'x) => ([]: 17'23_callres)) <: ([]: 18'25_matchres)
//│ ([]: ([]: 12'x) => ([]: 12'x)) <: ([]: 18'25_matchres)
//│ ([]: 11'ys) <: ([]: Destruct(N, C(13'h, 14't)))
//│ ([]: 16'21_callres) <: ([]: ([]: 13'h) => ([]: 17'23_callres))
//│ ([]: 1'last_7^19) <: ([]: ([]: 14't) => ([]: 16'21_callres))
//│ ([]: ([]: 3'ls) => ([]: 10'14_matchres)) <: ([]: 0'map)
//│ ([]: C(([]: 8'9_callres), ([]: 9'12_callres))) <: ([]: 10'14_matchres)
//│ ([]: N) <: ([]: 10'14_matchres)
//│ ([]: 3'ls) <: ([]: Destruct(N, C(4'hhh, 5'ttt)))
//│ ([]: 0'map_6^10) <: ([]: ([]: 5'ttt) => ([]: 9'12_callres))
//│ ([]: ([]: 6'head) => ([]: 7'6_matchres)) <: ([]: ([]: 4'hhh) => ([]: 8'9_callres))
//│ ([]: KK) <: ([]: 7'6_matchres)
//│ ([]: K) <: ([]: 7'6_matchres)
//│ ([]: 6'head) <: ([]: Destruct(T, TT))
//│ <<<<<<<<<< initial constraints <<<<<<<<<<
//│ 
//│ >>>>>>> knots >>>>>>>
//│ C(8'9_callres, 9'12_callres) <: 11'ys
//│ 	[-map:6^10 · -map:6^10 · -map:6^38 · +lastDrive:8^37 · +last:7^29 · +last:7^19]  --->  [-map:6^10 · -map:6^38 · +lastDrive:8^37 · +last:7^29]
//│ <<<<<<< knots <<<<<<<
//│ 
//│ >>>>>>> type variable bounds >>>>>>>
//│ 0'map:
//│ 	0'map[-map:6^10] < ([]: ([]: 5'ttt) => ([]: 9'12_callres))
//│ 	0'map[-map:6^38] < ([]: ([]: C(([]: T), ([]: C(([]: TT), ([]: N))))) => ([]: 25'44_callres))
//│ 	([]: ([]: 3'ls) => ([]: 10'14_matchres)) < []0'map
//│ --------------
//│ 5'ttt:
//│ 	5'ttt[+map:6^10] < ([]: 3'ls)
//│ 	([+map:6^10 · +map:6^38]: N) < []5'ttt
//│ 	([+map:6^38]: C(([]: TT), ([]: N))) < []5'ttt
//│ --------------
//│ 10'14_matchres:
//│ 	10'14_matchres[] < ([-map:6^10]: 9'12_callres)
//│ 	10'14_matchres[] < ([-map:6^38]: 25'44_callres)
//│ 	([]: N) < []10'14_matchres
//│ 	([]: C(([]: 8'9_callres), ([]: 9'12_callres))) < []10'14_matchres
//│ --------------
//│ 14't:
//│ 	14't[+last:7^19] < ([]: 11'ys)
//│ 	([-map:6^10]: N) < [-map:6^10 · -map:6^38 · +lastDrive:8^37 · +last:7^29]14't
//│ 	([-map:6^10]: C(([]: 8'9_callres), ([]: 9'12_callres))) < [-map:6^10 · -map:6^38 · +lastDrive:8^37 · +last:7^29]14't
//│ --------------
//│ 20'hh:
//│ 	20'hh[] < ([+last:7^29]: 12'x)
//│ 	20'hh[] < ([+last:7^29]: 15'x)
//│ 	([]: K) < [-map:6^38 · +lastDrive:8^37]20'hh
//│ 	([]: KK) < [-map:6^38 · +lastDrive:8^37]20'hh
//│ --------------
//│ 1'last:
//│ 	1'last[-last:7^19] < ([]: ([]: 14't) => ([]: 16'21_callres))
//│ 	1'last[-last:7^29] < ([]: ([]: 21'tt) => ([]: 22'31_callres))
//│ 	([]: ([]: 11'ys) => ([]: 18'25_matchres)) < []1'last
//│ --------------
//│ 6'head:
//│ 	6'head[] < ([]: Destruct(T, TT))
//│ 	([+map:6^38]: T) < []6'head
//│ 	([+map:6^10 · +map:6^38]: TT) < []6'head
//│ --------------
//│ 21'tt:
//│ 	21'tt[+last:7^29] < ([]: 11'ys)
//│ 	([-map:6^10]: C(([]: 8'9_callres), ([]: 9'12_callres))) < [-map:6^38 · +lastDrive:8^37]21'tt
//│ 	([-map:6^10]: N) < [-map:6^38 · +lastDrive:8^37]21'tt
//│ --------------
//│ 9'12_callres:
//│ 	9'12_callres[-map:6^10 · -map:6^38 · +lastDrive:8^37 · +last:7^29] < ([]: 14't)
//│ 	9'12_callres[-map:6^38 · +lastDrive:8^37] < ([]: 21'tt)
//│ 	([]: C(([]: 8'9_callres), ([]: 9'12_callres))) < [-map:6^10]9'12_callres
//│ 	([]: N) < [-map:6^10]9'12_callres
//│ --------------
//│ 13'h:
//│ 	13'h[] < ([+last:7^19]: 15'x)
//│ 	13'h[] < ([+last:7^19]: 12'x)
//│ 	([]: K) < [-map:6^10 · -map:6^38 · +lastDrive:8^37 · +last:7^29]13'h
//│ 	([]: KK) < [-map:6^10 · -map:6^38 · +lastDrive:8^37 · +last:7^29]13'h
//│ --------------
//│ 2'lastDrive:
//│ 	2'lastDrive[-lastDrive:8^37] < ([]: ([]: 25'44_callres) => ([]: 26'45_callres))
//│ 	([]: ([]: 19'xs) => ([]: 24'35_matchres)) < []2'lastDrive
//│ --------------
//│ 17'23_callres:
//│ 	17'23_callres[-last:7^29] < ([]: 23'33_callres)
//│ 	([+last:7^29 · +lastDrive:8^37 · -map:6^38]: K) < [-last:7^19]17'23_callres
//│ 	([+last:7^19 · +last:7^29 · +lastDrive:8^37 · -map:6^38 · -map:6^10]: K) < [-last:7^19]17'23_callres
//│ 	([+last:7^29 · +lastDrive:8^37 · -map:6^38]: KK) < [-last:7^19]17'23_callres
//│ 	([+last:7^19 · +last:7^29 · +lastDrive:8^37 · -map:6^38 · -map:6^10]: KK) < [-last:7^19]17'23_callres
//│ --------------
//│ 22'31_callres:
//│ 	22'31_callres[] < ([]: ([]: 20'hh) => ([]: 23'33_callres))
//│ 	([]: ([]: 12'x) => ([]: 12'x)) < [-last:7^29]22'31_callres
//│ 	([]: ([]: 15'x) => ([]: 17'23_callres)) < [-last:7^29]22'31_callres
//│ --------------
//│ 12'x:
//│ 	12'x[-last:7^19] < ([]: 17'23_callres)
//│ 	12'x[-last:7^29] < ([]: 23'33_callres)
//│ 	([+lastDrive:8^37 · -map:6^38]: K) < [+last:7^29]12'x
//│ 	([+last:7^29 · +lastDrive:8^37 · -map:6^38 · -map:6^10]: K) < [+last:7^19]12'x
//│ 	([+lastDrive:8^37 · -map:6^38]: KK) < [+last:7^29]12'x
//│ 	([+last:7^29 · +lastDrive:8^37 · -map:6^38 · -map:6^10]: KK) < [+last:7^19]12'x
//│ --------------
//│ 7'6_matchres:
//│ 	7'6_matchres[] < ([]: 8'9_callres)
//│ 	([]: K) < []7'6_matchres
//│ 	([]: KK) < []7'6_matchres
//│ --------------
//│ 3'ls:
//│ 	3'ls[] < ([]: Destruct(N, C(4'hhh, 5'ttt)))
//│ 	([+map:6^10 · +map:6^38]: N) < [+map:6^10]3'ls
//│ 	([+map:6^38]: C(([]: TT), ([]: N))) < [+map:6^10]3'ls
//│ 	([+map:6^38]: C(([]: T), ([]: C(([]: TT), ([]: N))))) < []3'ls
//│ --------------
//│ 18'25_matchres:
//│ 	18'25_matchres[] < ([-last:7^19]: 16'21_callres)
//│ 	18'25_matchres[] < ([-last:7^29]: 22'31_callres)
//│ 	([]: ([]: 12'x) => ([]: 12'x)) < []18'25_matchres
//│ 	([]: ([]: 15'x) => ([]: 17'23_callres)) < []18'25_matchres
//│ --------------
//│ 16'21_callres:
//│ 	16'21_callres[] < ([]: ([]: 13'h) => ([]: 17'23_callres))
//│ 	([]: ([]: 15'x) => ([]: 17'23_callres)) < [-last:7^19]16'21_callres
//│ 	([]: ([]: 12'x) => ([]: 12'x)) < [-last:7^19]16'21_callres
//│ --------------
//│ 11'ys:
//│ 	11'ys[] < ([]: Destruct(N, C(13'h, 14't)))
//│ 	([+last:7^29 · +lastDrive:8^37 · -map:6^38 · -map:6^10 · -map:6^10]: N) < [+last:7^19]11'ys
//│ 	([+lastDrive:8^37 · -map:6^38 · -map:6^10]: C(([]: 8'9_callres), ([]: 9'12_callres))) < [+last:7^29]11'ys
//│ 	([+lastDrive:8^37 · -map:6^38 · -map:6^10]: N) < [+last:7^29]11'ys
//│ --------------
//│ 8'9_callres:
//│ 	8'9_callres[-map:6^10 · -map:6^38 · +lastDrive:8^37 · +last:7^29] < ([]: 13'h)
//│ 	8'9_callres[-map:6^38 · +lastDrive:8^37] < ([]: 20'hh)
//│ 	([]: K) < []8'9_callres
//│ 	([]: KK) < []8'9_callres
//│ --------------
//│ 19'xs:
//│ 	19'xs[] < ([]: Destruct(N, C(20'hh, 21'tt)))
//│ 	([-map:6^38]: N) < [+lastDrive:8^37]19'xs
//│ 	([-map:6^38]: C(([]: 8'9_callres), ([]: 9'12_callres))) < [+lastDrive:8^37]19'xs
//│ --------------
//│ 4'hhh:
//│ 	4'hhh[] < ([]: 6'head)
//│ 	([+map:6^10 · +map:6^38]: TT) < []4'hhh
//│ 	([+map:6^38]: T) < []4'hhh
//│ --------------
//│ 15'x:
//│ 	([+lastDrive:8^37 · -map:6^38]: K) < [+last:7^29]15'x
//│ 	([+last:7^29 · +lastDrive:8^37 · -map:6^38 · -map:6^10]: K) < [+last:7^19]15'x
//│ 	([+lastDrive:8^37 · -map:6^38]: KK) < [+last:7^29]15'x
//│ 	([+last:7^29 · +lastDrive:8^37 · -map:6^38 · -map:6^10]: KK) < [+last:7^19]15'x
//│ --------------
//│ 24'35_matchres:
//│ 	24'35_matchres[] < ([-lastDrive:8^37]: 26'45_callres)
//│ 	([]: None) < []24'35_matchres
//│ 	([]: Some(([]: 23'33_callres))) < []24'35_matchres
//│ --------------
//│ 25'44_callres:
//│ 	25'44_callres[+lastDrive:8^37] < ([]: 19'xs)
//│ 	([]: N) < [-map:6^38]25'44_callres
//│ 	([]: C(([]: 8'9_callres), ([]: 9'12_callres))) < [-map:6^38]25'44_callres
//│ --------------
//│ 26'45_callres:
//│ 	([]: None) < [-lastDrive:8^37]26'45_callres
//│ 	([]: Some(([]: 23'33_callres))) < [-lastDrive:8^37]26'45_callres
//│ --------------
//│ 23'33_callres:
//│ 	([+last:7^29 · +lastDrive:8^37 · -map:6^38]: K) < [-last:7^29]23'33_callres
//│ 	([-last:7^19 · +last:7^29 · +lastDrive:8^37 · -map:6^38]: K) < [-last:7^29]23'33_callres
//│ 	([+last:7^19 · +last:7^29 · +lastDrive:8^37 · -map:6^38 · -map:6^10]: K) < [-last:7^29]23'33_callres
//│ 	([-last:7^19 · +last:7^19 · +last:7^29 · +lastDrive:8^37 · -map:6^38 · -map:6^10]: K) < [-last:7^29]23'33_callres
//│ 	([+last:7^29 · +lastDrive:8^37 · -map:6^38]: KK) < [-last:7^29]23'33_callres
//│ 	([-last:7^19 · +last:7^29 · +lastDrive:8^37 · -map:6^38]: KK) < [-last:7^29]23'33_callres
//│ 	([+last:7^19 · +last:7^29 · +lastDrive:8^37 · -map:6^38 · -map:6^10]: KK) < [-last:7^29]23'33_callres
//│ 	([-last:7^19 · +last:7^19 · +last:7^29 · +lastDrive:8^37 · -map:6^38 · -map:6^10]: KK) < [-last:7^29]23'33_callres
//│ --------------
//│ <<<<<<< type variable bounds <<<<<<<
