:NewParser
:ParseOnly

// NOTE: memory allocation negative numbers??
// -- powers = [[r^n | r<-[2..]] | n<-1..]
// powers :: [[Integer]]
// -- powers = [[(-1)^r * r^n | r<-[2..]] | n<-1..]
// neg_powers :: [[Integer]]
// pascal:: [[Integer]]
:lhInHaskell
:lhGenOCaml
powers = lazy ([2..] : (map_lz (\p -> zipWith_lz_lz (\a b -> a * b) (head_lz powers) p) powers))
neg_powers =
  lazy (map_lz (zipWith_lz_lz (\n x -> if n then x else (0-x)) (iterate not True)) powers)
pascal = lazy ([1,2,1] : map_lz (\line -> zipWith (\a b -> a + b) (mappend line [0]) (0:line)) pascal)
bernoulli 0 = 1
bernoulli 1 = 0 - (1 / 2)
bernoulli n =
  if ((n `mod` 2) == 1) then
    0
  else
    let powers = (atIndex_lz (n - 1) (force neg_powers)) in
      ((0-1)/2) + sum [ ((sum $ zipWith_lz_nl (\a b -> a * b) powers (tail $ tail combs)) - k) / (k+1) | (k,combs) <- zip_nl_lz [2..n] pascal ]
testBernoulli_nofib n = bernoulli n
testBernoulli_nofib $ primId 1500
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testBernoulli_nofib_lh_₁^498(primId⁰(1500))
//│ def atIndex_lz_lh_₁(n¹, ls⁸) = if (n¹ < 0) then error⁰ else case force⁰(ls⁸) of {
//│ 	LH_C h⁹ t⁹ => if (n¹ == 0) then h⁹ else atIndex_lz_lh_₁^373((n¹ - 1), t⁹)
//│ 	| LH_N  => error⁰}
//│ def bernoulli_lh_₁(_lh_bernoulli_arg1⁰) = case _lh_bernoulli_arg1⁰ of {
//│ 	0  => 1
//│ 	| 1  => (0 - (1 / 2))
//│ 	| _  => if ((_lh_bernoulli_arg1⁰ % 2) == 1) then 0 else 
//│ 		let powers⁰ = atIndex_lz_lh_₁^409((_lh_bernoulli_arg1⁰ - 1), force⁰(neg_powers_lh_₁^417))
//│ 		in (((0 - 1) / 2) + sum_lh_₂^431(
//│ 			let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 				LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {
//│ 					LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh_₁^436(zipWith_lz_nl_lh_₁^437((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂^448(tail_lh_₁^449(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 					| _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}
//│ 				| LH_N  => [LH_N]})
//│ 			in _lh_listcomp_fun⁰(zip_nl_lz_lh_₁^477(enumFromTo_lh_₁^478(2, _lh_bernoulli_arg1⁰), pascal_lh_₁^484))))}
//│ def enumFromTo_lh_₁(a³, b²) = if (a³ <= b²) then [LH_C a³ enumFromTo_lh_₁^339((a³ + 1), b²)] else [LH_N]
//│ def enumFrom_lh_₁(a⁰) = lazy⁰([LH_C a⁰ enumFrom_lh_₁^3((a⁰ + 1))])
//│ def head_lz_lh_₁(ls¹) = case force⁰(ls¹) of {
//│ 	LH_C h¹ t¹ => h¹
//│ 	| LH_N  => error⁰}
//│ def iterate_lh_₁(f³, x⁰) = lazy⁰([LH_C x⁰ iterate_lh_₁^112(f³, f³(x⁰))])
//│ def map_lz_lh_₁(f⁶, ls³) = lazy⁰(case force⁰(ls³) of {
//│ 	LH_C h⁴ t⁴ => [LH_C f⁶(h⁴) map_lz_lh_₁^192(f⁶, t⁴)]
//│ 	| LH_N  => [LH_N]})
//│ def map_lz_lh_₂(f², ls²) = lazy⁰(case force⁰(ls²) of {
//│ 	LH_C h² t² => [LH_C f²(h²) map_lz_lh_₂^99(f², t²)]
//│ 	| LH_N  => [LH_N]})
//│ def map_lz_lh_₃(f⁰, ls⁰) = lazy⁰(case force⁰(ls⁰) of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh_₃^20(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]})
//│ def mappend_lh_₁(xs³, ys³) = case xs³ of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh_₁^175(t³, ys³)]
//│ 	| LH_N  => ys³}
//│ def neg_powers_lh_₁ = lazy⁰(map_lz_lh_₂^215(zipWith_lz_lz_lh_₁^216((fun n⁰ -> (fun x¹ -> if n⁰ then x¹ else (0 - x¹))), iterate_lh_₁^228(not⁰, [True])), powers_lh_₁^235))
//│ def pascal_lh_₁ = lazy⁰([LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz_lh_₁^270((fun line⁰ -> zipWith_lh_₁^271((fun a² -> (fun b¹ -> (a² + b¹))), mappend_lh_₁^280(line⁰, [LH_C 0 [LH_N]]), [LH_C 0 line⁰])), pascal_lh_₁^294)])
//│ def powers_lh_₁ = lazy⁰([LH_C enumFrom_lh_₁^67(2) map_lz_lh_₃^70((fun p⁰ -> zipWith_lz_lz_lh_₂^71((fun a¹ -> (fun b⁰ -> (a¹ * b⁰))), head_lz_lh_₁^80(powers_lh_₁^81), p⁰)), powers_lh_₁^88)])
//│ def sum_lh_₁(ls⁵) = case ls⁵ of {
//│ 	LH_C h⁶ t⁶ => (h⁶ + sum_lh_₁^302(t⁶))
//│ 	| LH_N  => 0}
//│ def sum_lh_₂(ls⁴) = case ls⁴ of {
//│ 	LH_C h⁵ t⁵ => (h⁵ + sum_lh_₂^207(t⁵))
//│ 	| LH_N  => 0}
//│ def tail_lh_₁(ls⁷) = case ls⁷ of {
//│ 	LH_C h⁸ t⁸ => t⁸
//│ 	| LH_N  => error⁰}
//│ def tail_lh_₂(ls⁶) = case ls⁶ of {
//│ 	LH_C h⁷ t⁷ => t⁷
//│ 	| LH_N  => error⁰}
//│ def testBernoulli_nofib_lh_₁(_lh_testBernoulli_nofib_arg1⁰) = bernoulli_lh_₁^494(_lh_testBernoulli_nofib_arg1⁰)
//│ def zipWith_lh_₁(f⁵, xs², ys²) = case xs² of {
//│ 	LH_C hx² tx² => case ys² of {
//│ 		LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁^158(f⁵, tx², ty²)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lz_lz_lh_₁(f⁴, xs¹, ys¹) = lazy⁰(case force⁰(xs¹) of {
//│ 	LH_C hx¹ tx¹ => case force⁰(ys¹) of {
//│ 		LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₁^135(f⁴, tx¹, ty¹)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_lz_lh_₂(f¹, xs⁰, ys⁰) = lazy⁰(case force⁰(xs⁰) of {
//│ 	LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₂^50(f¹, tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_nl_lh_₁(f⁷, xs⁴, ys⁴) = case ys⁴ of {
//│ 	LH_C hy³ ty³ => case force⁰(xs⁴) of {
//│ 		LH_C hx³ tx³ => [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁^247(f⁷, tx³, ty³)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zip_nl_lz_lh_₁(xs⁵, ys⁵) = case xs⁵ of {
//│ 	LH_C hx⁴ tx⁴ => case force⁰(ys⁵) of {
//│ 		LH_C hy⁴ ty⁴ => [LH_C [LH_P2 hx⁴ hy⁴] zip_nl_lz_lh_₁^316(tx⁴, ty⁴)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec zip_nl_lz_lh__d1 xs_5 ys_5 =
//│ 		  (match xs_5 with
//│ 		    | `LH_C(hx_4, tx_4) -> 
//│ 		      (match (Lazy.force ys_5) with
//│ 		        | `LH_C(hy_4, ty_4) -> 
//│ 		          (`LH_C((`LH_P2(hx_4, hy_4)), ((zip_nl_lz_lh__d1 tx_4) ty_4)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec atIndex_lz_lh__d1 n_1 ls_8 =
//│ 		  (if (n_1 < 0) then
//│ 		    (failwith "error")
//│ 		  else
//│ 		    (match (Lazy.force ls_8) with
//│ 		      | `LH_C(h_9, t_9) -> 
//│ 		        (if (n_1 = 0) then
//│ 		          h_9
//│ 		        else
//│ 		          ((atIndex_lz_lh__d1 (n_1 - 1)) t_9))
//│ 		      | `LH_N -> 
//│ 		        (failwith "error")));;
//│ 		let rec sum_lh__d2 ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      (h_5 + (sum_lh__d2 t_5))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec tail_lh__d1 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      t_8
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec zipWith_lz_lz_lh__d2 f_1 xs_0 ys_0 =
//│ 		  (lazy (match (Lazy.force xs_0) with
//│ 		    | `LH_C(hx_0, tx_0) -> 
//│ 		      (match (Lazy.force ys_0) with
//│ 		        | `LH_C(hy_0, ty_0) -> 
//│ 		          (`LH_C(((f_1 hx_0) hy_0), (((zipWith_lz_lz_lh__d2 f_1) tx_0) ty_0)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec map_lz_lh__d3 f_0 ls_0 =
//│ 		  (lazy (match (Lazy.force ls_0) with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C((f_0 h_0), ((map_lz_lh__d3 f_0) t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec enumFrom_lh__d1 a_0 =
//│ 		  (lazy (`LH_C(a_0, (enumFrom_lh__d1 (a_0 + 1)))));;
//│ 		let rec head_lz_lh__d1 ls_1 =
//│ 		  (match (Lazy.force ls_1) with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      h_1
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec powers_lh__d1 =
//│ 		  (lazy (`LH_C((enumFrom_lh__d1 2), ((map_lz_lh__d3 (fun p_0 -> 
//│ 		    (((zipWith_lz_lz_lh__d2 (fun a_1 b_0 -> 
//│ 		      (a_1 * b_0))) (head_lz_lh__d1 powers_lh__d1)) p_0))) powers_lh__d1))));;
//│ 		let rec map_lz_lh__d2 f_2 ls_2 =
//│ 		  (lazy (match (Lazy.force ls_2) with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C((f_2 h_2), ((map_lz_lh__d2 f_2) t_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec iterate_lh__d1 f_3 x_0 =
//│ 		  (lazy (`LH_C(x_0, ((iterate_lh__d1 f_3) (f_3 x_0)))));;
//│ 		let rec zipWith_lz_lz_lh__d1 f_4 xs_1 ys_1 =
//│ 		  (lazy (match (Lazy.force xs_1) with
//│ 		    | `LH_C(hx_1, tx_1) -> 
//│ 		      (match (Lazy.force ys_1) with
//│ 		        | `LH_C(hy_1, ty_1) -> 
//│ 		          (`LH_C(((f_4 hx_1) hy_1), (((zipWith_lz_lz_lh__d1 f_4) tx_1) ty_1)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec neg_powers_lh__d1 =
//│ 		  (lazy ((map_lz_lh__d2 ((zipWith_lz_lz_lh__d1 (fun n_0 x_1 -> 
//│ 		    (if n_0 then
//│ 		      x_1
//│ 		    else
//│ 		      (0 - x_1)))) ((iterate_lh__d1 not) true))) powers_lh__d1));;
//│ 		let rec enumFromTo_lh__d1 a_3 b_2 =
//│ 		  (if (a_3 <= b_2) then
//│ 		    (`LH_C(a_3, ((enumFromTo_lh__d1 (a_3 + 1)) b_2)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec zipWith_lz_nl_lh__d1 f_7 xs_4 ys_4 =
//│ 		  (match ys_4 with
//│ 		    | `LH_C(hy_3, ty_3) -> 
//│ 		      (match (Lazy.force xs_4) with
//│ 		        | `LH_C(hx_3, tx_3) -> 
//│ 		          (`LH_C(((f_7 hx_3) hy_3), (((zipWith_lz_nl_lh__d1 f_7) tx_3) ty_3)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh__d1 xs_3 ys_3 =
//│ 		  (match xs_3 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      (`LH_C(h_3, ((mappend_lh__d1 t_3) ys_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_3);;
//│ 		let rec map_lz_lh__d1 f_6 ls_3 =
//│ 		  (lazy (match (Lazy.force ls_3) with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      (`LH_C((f_6 h_4), ((map_lz_lh__d1 f_6) t_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec zipWith_lh__d1 f_5 xs_2 ys_2 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(hx_2, tx_2) -> 
//│ 		      (match ys_2 with
//│ 		        | `LH_C(hy_2, ty_2) -> 
//│ 		          (`LH_C(((f_5 hx_2) hy_2), (((zipWith_lh__d1 f_5) tx_2) ty_2)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec pascal_lh__d1 =
//│ 		  (lazy (`LH_C((`LH_C(1, (`LH_C(2, (`LH_C(1, (`LH_N))))))), ((map_lz_lh__d1 (fun line_0 -> 
//│ 		    (((zipWith_lh__d1 (fun a_2 b_1 -> 
//│ 		      (a_2 + b_1))) ((mappend_lh__d1 line_0) (`LH_C(0, (`LH_N))))) (`LH_C(0, line_0))))) pascal_lh__d1))));;
//│ 		let rec tail_lh__d2 ls_6 =
//│ 		  (match ls_6 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      t_7
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec sum_lh__d1 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      (h_6 + (sum_lh__d1 t_6))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec bernoulli_lh__d1 _lh_bernoulli_arg1_0 =
//│ 		  (match _lh_bernoulli_arg1_0 with
//│ 		    | 0 -> 
//│ 		      1
//│ 		    | 1 -> 
//│ 		      (0 - (1 / 2))
//│ 		    | _ -> 
//│ 		      (if ((_lh_bernoulli_arg1_0 mod 2) = 1) then
//│ 		        0
//│ 		      else
//│ 		        (let rec powers_0 = ((atIndex_lz_lh__d1 (_lh_bernoulli_arg1_0 - 1)) (Lazy.force neg_powers_lh__d1)) in
//│ 		          (((0 - 1) / 2) + (sum_lh__d2 (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		            (match _lh_listcomp_fun_para_0 with
//│ 		              | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		                (match _lh_listcomp_fun_ls_h_0 with
//│ 		                  | `LH_P2(_lh_bernoulli_LH_P2_0_0, _lh_bernoulli_LH_P2_1_0) -> 
//│ 		                    (`LH_C((((sum_lh__d1 (((zipWith_lz_nl_lh__d1 (fun a_4 b_3 -> 
//│ 		                      (a_4 * b_3))) powers_0) (tail_lh__d2 (tail_lh__d1 _lh_bernoulli_LH_P2_1_0)))) - _lh_bernoulli_LH_P2_0_0) / (_lh_bernoulli_LH_P2_0_0 + 1)), (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		                  | _ -> 
//│ 		                    (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│ 		              | `LH_N -> 
//│ 		                (`LH_N))) in
//│ 		            (_lh_listcomp_fun_0 ((zip_nl_lz_lh__d1 ((enumFromTo_lh__d1 2) _lh_bernoulli_arg1_0)) pascal_lh__d1))))))));;
//│ 		let rec testBernoulli_nofib_lh__d1 _lh_testBernoulli_nofib_arg1_0 =
//│ 		  (bernoulli_lh__d1 _lh_testBernoulli_nofib_arg1_0);;
//│ 		(testBernoulli_nofib_lh__d1 1500)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C a⁰ enumFrom_lh_₁((a⁰ + 1))]: 10 --->
//│ 	case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₂(f¹, tx⁰, ty⁰)] | LH_N  => [LH_N]}: 59
//│ 	case force⁰(xs⁰) of {LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₂(f¹, tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 61
//│ 	case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₁(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]}: 144
//│ [LH_C f⁰(h⁰) map_lz_lh_₃(f⁰, t⁰)]: 25 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh_₃(f⁰, t⁰)] | LH_N  => [LH_N]}: 27
//│ 	case force⁰(ls²) of {LH_C h² t² => [LH_C f²(h²) map_lz_lh_₂(f², t²)] | LH_N  => [LH_N]}: 106
//│ [LH_N]: 26 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh_₃(f⁰, t⁰)] | LH_N  => [LH_N]}: 27
//│ 	case force⁰(ls²) of {LH_C h² t² => [LH_C f²(h²) map_lz_lh_₂(f², t²)] | LH_N  => [LH_N]}: 106
//│ [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₂(f¹, tx⁰, ty⁰)]: 57 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₂(f¹, tx⁰, ty⁰)] | LH_N  => [LH_N]}: 59
//│ 	case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₁(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]}: 144
//│ [LH_N]: 58 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₂(f¹, tx⁰, ty⁰)] | LH_N  => [LH_N]}: 59
//│ 	case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₁(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]}: 144
//│ [LH_N]: 60 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₂(f¹, tx⁰, ty⁰)] | LH_N  => [LH_N]}: 59
//│ 	case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₁(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]}: 144
//│ [LH_C enumFrom_lh_₁(2) map_lz_lh_₃((fun p⁰ -> zipWith_lz_lz_lh_₂((fun a¹ -> (fun b⁰ -> (a¹ * b⁰))), head_lz_lh_₁(powers_lh_₁), p⁰)), powers_lh_₁)]: 90 --->
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh_₃(f⁰, t⁰)] | LH_N  => [LH_N]}: 27
//│ 	case force⁰(ls¹) of {LH_C h¹ t¹ => h¹ | LH_N  => error⁰}: 36
//│ 	case force⁰(ls²) of {LH_C h² t² => [LH_C f²(h²) map_lz_lh_₂(f², t²)] | LH_N  => [LH_N]}: 106
//│ [LH_C f²(h²) map_lz_lh_₂(f², t²)]: 104 --->
//│ 	case force⁰(ls⁸) of {LH_C h⁹ t⁹ => if (n¹ == 0) then h⁹ else atIndex_lz_lh_₁((n¹ - 1), t⁹) | LH_N  => error⁰}: 384
//│ [LH_N]: 105 --->
//│ 	case force⁰(ls⁸) of {LH_C h⁹ t⁹ => if (n¹ == 0) then h⁹ else atIndex_lz_lh_₁((n¹ - 1), t⁹) | LH_N  => error⁰}: 384
//│ [LH_C x⁰ iterate_lh_₁(f³, f³(x⁰))]: 119 --->
//│ 	case force⁰(xs¹) of {LH_C hx¹ tx¹ => case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₁(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 146
//│ [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₁(f⁴, tx¹, ty¹)]: 142 --->
//│ 	case force⁰(xs⁴) of {LH_C hx³ tx³ => [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)] | LH_N  => [LH_N]}: 256
//│ [LH_N]: 143 --->
//│ 	case force⁰(xs⁴) of {LH_C hx³ tx³ => [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)] | LH_N  => [LH_N]}: 256
//│ [LH_N]: 145 --->
//│ 	case force⁰(xs⁴) of {LH_C hx³ tx³ => [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)] | LH_N  => [LH_N]}: 256
//│ [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)]: 165 --->
//│ 	case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]}: 167
//│ 	case xs³ of {LH_C h³ t³ => [LH_C h³ mappend_lh_₁(t³, ys³)] | LH_N  => ys³}: 182
//│ 	case ys⁴ of {LH_C hy³ ty³ => case force⁰(xs⁴) of {LH_C hx³ tx³ => [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 258
//│ 	case ls⁶ of {LH_C h⁷ t⁷ => t⁷ | LH_N  => error⁰}: 331
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => t⁸ | LH_N  => error⁰}: 356
//│ [LH_N]: 166 --->
//│ 	case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]}: 167
//│ 	case xs³ of {LH_C h³ t³ => [LH_C h³ mappend_lh_₁(t³, ys³)] | LH_N  => ys³}: 182
//│ 	case ys⁴ of {LH_C hy³ ty³ => case force⁰(xs⁴) of {LH_C hx³ tx³ => [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 258
//│ 	case ls⁶ of {LH_C h⁷ t⁷ => t⁷ | LH_N  => error⁰}: 331
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => t⁸ | LH_N  => error⁰}: 356
//│ [LH_N]: 168 --->
//│ 	case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]}: 167
//│ 	case xs³ of {LH_C h³ t³ => [LH_C h³ mappend_lh_₁(t³, ys³)] | LH_N  => ys³}: 182
//│ 	case ys⁴ of {LH_C hy³ ty³ => case force⁰(xs⁴) of {LH_C hx³ tx³ => [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 258
//│ 	case ls⁶ of {LH_C h⁷ t⁷ => t⁷ | LH_N  => error⁰}: 331
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => t⁸ | LH_N  => error⁰}: 356
//│ [LH_C h³ mappend_lh_₁(t³, ys³)]: 180 --->
//│ 	case xs² of {LH_C hx² tx² => case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 169
//│ [LH_C f⁶(h⁴) map_lz_lh_₁(f⁶, t⁴)]: 197 --->
//│ 	case force⁰(ls³) of {LH_C h⁴ t⁴ => [LH_C f⁶(h⁴) map_lz_lh_₁(f⁶, t⁴)] | LH_N  => [LH_N]}: 199
//│ 	case force⁰(ys⁵) of {LH_C hy⁴ ty⁴ => [LH_C [LH_P2 hx⁴ hy⁴] zip_nl_lz_lh_₁(tx⁴, ty⁴)] | LH_N  => [LH_N]}: 323
//│ [LH_N]: 198 --->
//│ 	case force⁰(ls³) of {LH_C h⁴ t⁴ => [LH_C f⁶(h⁴) map_lz_lh_₁(f⁶, t⁴)] | LH_N  => [LH_N]}: 199
//│ 	case force⁰(ys⁵) of {LH_C hy⁴ ty⁴ => [LH_C [LH_P2 hx⁴ hy⁴] zip_nl_lz_lh_₁(tx⁴, ty⁴)] | LH_N  => [LH_N]}: 323
//│ [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)]: 254 --->
//│ 	case ls⁵ of {LH_C h⁶ t⁶ => (h⁶ + sum_lh_₁(t⁶)) | LH_N  => 0}: 307
//│ [LH_N]: 255 --->
//│ 	case ls⁵ of {LH_C h⁶ t⁶ => (h⁶ + sum_lh_₁(t⁶)) | LH_N  => 0}: 307
//│ [LH_N]: 257 --->
//│ 	case ls⁵ of {LH_C h⁶ t⁶ => (h⁶ + sum_lh_₁(t⁶)) | LH_N  => 0}: 307
//│ [LH_N]: 266 --->
//│ 	case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]}: 167
//│ 	case xs³ of {LH_C h³ t³ => [LH_C h³ mappend_lh_₁(t³, ys³)] | LH_N  => ys³}: 182
//│ 	case ys⁴ of {LH_C hy³ ty³ => case force⁰(xs⁴) of {LH_C hx³ tx³ => [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 258
//│ [LH_C 1 [LH_N]]: 267 --->
//│ 	case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]}: 167
//│ 	case xs³ of {LH_C h³ t³ => [LH_C h³ mappend_lh_₁(t³, ys³)] | LH_N  => ys³}: 182
//│ 	case ys⁴ of {LH_C hy³ ty³ => case force⁰(xs⁴) of {LH_C hx³ tx³ => [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 258
//│ [LH_C 2 [LH_C 1 [LH_N]]]: 268 --->
//│ 	case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]}: 167
//│ 	case xs³ of {LH_C h³ t³ => [LH_C h³ mappend_lh_₁(t³, ys³)] | LH_N  => ys³}: 182
//│ 	case ls⁶ of {LH_C h⁷ t⁷ => t⁷ | LH_N  => error⁰}: 331
//│ [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 269 --->
//│ 	case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]}: 167
//│ 	case xs³ of {LH_C h³ t³ => [LH_C h³ mappend_lh_₁(t³, ys³)] | LH_N  => ys³}: 182
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => t⁸ | LH_N  => error⁰}: 356
//│ [LH_N]: 284 --->
//│ 	case xs² of {LH_C hx² tx² => case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 169
//│ [LH_C 0 [LH_N]]: 285 --->
//│ 	case xs² of {LH_C hx² tx² => case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 169
//│ [LH_C 0 line⁰]: 290 --->
//│ 	case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]}: 167
//│ [LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz_lh_₁((fun line⁰ -> zipWith_lh_₁((fun a² -> (fun b¹ -> (a² + b¹))), mappend_lh_₁(line⁰, [LH_C 0 [LH_N]]), [LH_C 0 line⁰])), pascal_lh_₁)]: 296 --->
//│ 	case force⁰(ls³) of {LH_C h⁴ t⁴ => [LH_C f⁶(h⁴) map_lz_lh_₁(f⁶, t⁴)] | LH_N  => [LH_N]}: 199
//│ 	case force⁰(ys⁵) of {LH_C hy⁴ ty⁴ => [LH_C [LH_P2 hx⁴ hy⁴] zip_nl_lz_lh_₁(tx⁴, ty⁴)] | LH_N  => [LH_N]}: 323
//│ [LH_P2 hx⁴ hy⁴]: 315 --->
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 472
//│ [LH_C [LH_P2 hx⁴ hy⁴] zip_nl_lz_lh_₁(tx⁴, ty⁴)]: 321 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 474
//│ [LH_N]: 322 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 474
//│ [LH_N]: 324 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 474
//│ [LH_C a³ enumFromTo_lh_₁((a³ + 1), b²)]: 348 --->
//│ 	case xs⁵ of {LH_C hx⁴ tx⁴ => case force⁰(ys⁵) of {LH_C hy⁴ ty⁴ => [LH_C [LH_P2 hx⁴ hy⁴] zip_nl_lz_lh_₁(tx⁴, ty⁴)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 325
//│ [LH_N]: 349 --->
//│ 	case xs⁵ of {LH_C hx⁴ tx⁴ => case force⁰(ys⁵) of {LH_C hy⁴ ty⁴ => [LH_C [LH_P2 hx⁴ hy⁴] zip_nl_lz_lh_₁(tx⁴, ty⁴)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 325
//│ [LH_C ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 468 --->
//│ 	case ls⁴ of {LH_C h⁵ t⁵ => (h⁵ + sum_lh_₂(t⁵)) | LH_N  => 0}: 212
//│ [LH_N]: 473 --->
//│ 	case ls⁴ of {LH_C h⁵ t⁵ => (h⁵ + sum_lh_₂(t⁵)) | LH_N  => 0}: 212
//│ ------------------
//│ case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh_₃(f⁰, t⁰)] | LH_N  => [LH_N]}: 27 --->
//│ 	[LH_C f⁰(h⁰) map_lz_lh_₃(f⁰, t⁰)]: 25
//│ 	[LH_N]: 26
//│ 	[LH_C enumFrom_lh_₁(2) map_lz_lh_₃((fun p⁰ -> zipWith_lz_lz_lh_₂((fun a¹ -> (fun b⁰ -> (a¹ * b⁰))), head_lz_lh_₁(powers_lh_₁), p⁰)), powers_lh_₁)]: 90
//│ case force⁰(ls¹) of {LH_C h¹ t¹ => h¹ | LH_N  => error⁰}: 36 --->
//│ 	[LH_C enumFrom_lh_₁(2) map_lz_lh_₃((fun p⁰ -> zipWith_lz_lz_lh_₂((fun a¹ -> (fun b⁰ -> (a¹ * b⁰))), head_lz_lh_₁(powers_lh_₁), p⁰)), powers_lh_₁)]: 90
//│ case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₂(f¹, tx⁰, ty⁰)] | LH_N  => [LH_N]}: 59 --->
//│ 	[LH_C a⁰ enumFrom_lh_₁((a⁰ + 1))]: 10
//│ 	[LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₂(f¹, tx⁰, ty⁰)]: 57
//│ 	[LH_N]: 58
//│ 	[LH_N]: 60
//│ case force⁰(xs⁰) of {LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₂(f¹, tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 61 --->
//│ 	[LH_C a⁰ enumFrom_lh_₁((a⁰ + 1))]: 10
//│ case force⁰(ls²) of {LH_C h² t² => [LH_C f²(h²) map_lz_lh_₂(f², t²)] | LH_N  => [LH_N]}: 106 --->
//│ 	[LH_C f⁰(h⁰) map_lz_lh_₃(f⁰, t⁰)]: 25
//│ 	[LH_N]: 26
//│ 	[LH_C enumFrom_lh_₁(2) map_lz_lh_₃((fun p⁰ -> zipWith_lz_lz_lh_₂((fun a¹ -> (fun b⁰ -> (a¹ * b⁰))), head_lz_lh_₁(powers_lh_₁), p⁰)), powers_lh_₁)]: 90
//│ case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₁(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]}: 144 --->
//│ 	[LH_C a⁰ enumFrom_lh_₁((a⁰ + 1))]: 10
//│ 	[LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₂(f¹, tx⁰, ty⁰)]: 57
//│ 	[LH_N]: 58
//│ 	[LH_N]: 60
//│ case force⁰(xs¹) of {LH_C hx¹ tx¹ => case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₁(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 146 --->
//│ 	[LH_C x⁰ iterate_lh_₁(f³, f³(x⁰))]: 119
//│ case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]}: 167 --->
//│ 	[LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)]: 165
//│ 	[LH_N]: 166
//│ 	[LH_N]: 168
//│ 	[LH_N]: 266
//│ 	[LH_C 1 [LH_N]]: 267
//│ 	[LH_C 2 [LH_C 1 [LH_N]]]: 268
//│ 	[LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 269
//│ 	[LH_C 0 line⁰]: 290
//│ case xs² of {LH_C hx² tx² => case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 169 --->
//│ 	[LH_C h³ mappend_lh_₁(t³, ys³)]: 180
//│ 	[LH_N]: 284
//│ 	[LH_C 0 [LH_N]]: 285
//│ case xs³ of {LH_C h³ t³ => [LH_C h³ mappend_lh_₁(t³, ys³)] | LH_N  => ys³}: 182 --->
//│ 	[LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)]: 165
//│ 	[LH_N]: 166
//│ 	[LH_N]: 168
//│ 	[LH_N]: 266
//│ 	[LH_C 1 [LH_N]]: 267
//│ 	[LH_C 2 [LH_C 1 [LH_N]]]: 268
//│ 	[LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 269
//│ case force⁰(ls³) of {LH_C h⁴ t⁴ => [LH_C f⁶(h⁴) map_lz_lh_₁(f⁶, t⁴)] | LH_N  => [LH_N]}: 199 --->
//│ 	[LH_C f⁶(h⁴) map_lz_lh_₁(f⁶, t⁴)]: 197
//│ 	[LH_N]: 198
//│ 	[LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz_lh_₁((fun line⁰ -> zipWith_lh_₁((fun a² -> (fun b¹ -> (a² + b¹))), mappend_lh_₁(line⁰, [LH_C 0 [LH_N]]), [LH_C 0 line⁰])), pascal_lh_₁)]: 296
//│ case ls⁴ of {LH_C h⁵ t⁵ => (h⁵ + sum_lh_₂(t⁵)) | LH_N  => 0}: 212 --->
//│ 	[LH_C ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 468
//│ 	[LH_N]: 473
//│ case force⁰(xs⁴) of {LH_C hx³ tx³ => [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)] | LH_N  => [LH_N]}: 256 --->
//│ 	[LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₁(f⁴, tx¹, ty¹)]: 142
//│ 	[LH_N]: 143
//│ 	[LH_N]: 145
//│ case ys⁴ of {LH_C hy³ ty³ => case force⁰(xs⁴) of {LH_C hx³ tx³ => [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 258 --->
//│ 	[LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)]: 165
//│ 	[LH_N]: 166
//│ 	[LH_N]: 168
//│ 	[LH_N]: 266
//│ 	[LH_C 1 [LH_N]]: 267
//│ case ls⁵ of {LH_C h⁶ t⁶ => (h⁶ + sum_lh_₁(t⁶)) | LH_N  => 0}: 307 --->
//│ 	[LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)]: 254
//│ 	[LH_N]: 255
//│ 	[LH_N]: 257
//│ case force⁰(ys⁵) of {LH_C hy⁴ ty⁴ => [LH_C [LH_P2 hx⁴ hy⁴] zip_nl_lz_lh_₁(tx⁴, ty⁴)] | LH_N  => [LH_N]}: 323 --->
//│ 	[LH_C f⁶(h⁴) map_lz_lh_₁(f⁶, t⁴)]: 197
//│ 	[LH_N]: 198
//│ 	[LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz_lh_₁((fun line⁰ -> zipWith_lh_₁((fun a² -> (fun b¹ -> (a² + b¹))), mappend_lh_₁(line⁰, [LH_C 0 [LH_N]]), [LH_C 0 line⁰])), pascal_lh_₁)]: 296
//│ case xs⁵ of {LH_C hx⁴ tx⁴ => case force⁰(ys⁵) of {LH_C hy⁴ ty⁴ => [LH_C [LH_P2 hx⁴ hy⁴] zip_nl_lz_lh_₁(tx⁴, ty⁴)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 325 --->
//│ 	[LH_C a³ enumFromTo_lh_₁((a³ + 1), b²)]: 348
//│ 	[LH_N]: 349
//│ case ls⁶ of {LH_C h⁷ t⁷ => t⁷ | LH_N  => error⁰}: 331 --->
//│ 	[LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)]: 165
//│ 	[LH_N]: 166
//│ 	[LH_N]: 168
//│ 	[LH_C 2 [LH_C 1 [LH_N]]]: 268
//│ case ls⁷ of {LH_C h⁸ t⁸ => t⁸ | LH_N  => error⁰}: 356 --->
//│ 	[LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)]: 165
//│ 	[LH_N]: 166
//│ 	[LH_N]: 168
//│ 	[LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 269
//│ case force⁰(ls⁸) of {LH_C h⁹ t⁹ => if (n¹ == 0) then h⁹ else atIndex_lz_lh_₁((n¹ - 1), t⁹) | LH_N  => error⁰}: 384 --->
//│ 	[LH_C f²(h²) map_lz_lh_₂(f², t²)]: 104
//│ 	[LH_N]: 105
//│ case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 472 --->
//│ 	[LH_P2 hx⁴ hy⁴]: 315
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 474 --->
//│ 	[LH_C [LH_P2 hx⁴ hy⁴] zip_nl_lz_lh_₁(tx⁴, ty⁴)]: 321
//│ 	[LH_N]: 322
//│ 	[LH_N]: 324
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C f²(h²) map_lz_lh_₂(f², t²)]: 104 --->
//│ 	case force⁰(ls⁸) of {LH_C h⁹ t⁹ => if (n¹ == 0) then h⁹ else atIndex_lz_lh_₁((n¹ - 1), t⁹) | LH_N  => error⁰}: 384
//│ [LH_N]: 105 --->
//│ 	case force⁰(ls⁸) of {LH_C h⁹ t⁹ => if (n¹ == 0) then h⁹ else atIndex_lz_lh_₁((n¹ - 1), t⁹) | LH_N  => error⁰}: 384
//│ [LH_C x⁰ iterate_lh_₁(f³, f³(x⁰))]: 119 --->
//│ 	case force⁰(xs¹) of {LH_C hx¹ tx¹ => case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₁(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 146
//│ [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₁(f⁴, tx¹, ty¹)]: 142 --->
//│ 	case force⁰(xs⁴) of {LH_C hx³ tx³ => [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)] | LH_N  => [LH_N]}: 256
//│ [LH_N]: 143 --->
//│ 	case force⁰(xs⁴) of {LH_C hx³ tx³ => [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)] | LH_N  => [LH_N]}: 256
//│ [LH_N]: 145 --->
//│ 	case force⁰(xs⁴) of {LH_C hx³ tx³ => [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)] | LH_N  => [LH_N]}: 256
//│ [LH_C h³ mappend_lh_₁(t³, ys³)]: 180 --->
//│ 	case xs² of {LH_C hx² tx² => case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 169
//│ [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)]: 254 --->
//│ 	case ls⁵ of {LH_C h⁶ t⁶ => (h⁶ + sum_lh_₁(t⁶)) | LH_N  => 0}: 307
//│ [LH_N]: 255 --->
//│ 	case ls⁵ of {LH_C h⁶ t⁶ => (h⁶ + sum_lh_₁(t⁶)) | LH_N  => 0}: 307
//│ [LH_N]: 257 --->
//│ 	case ls⁵ of {LH_C h⁶ t⁶ => (h⁶ + sum_lh_₁(t⁶)) | LH_N  => 0}: 307
//│ [LH_N]: 284 --->
//│ 	case xs² of {LH_C hx² tx² => case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 169
//│ [LH_C 0 [LH_N]]: 285 --->
//│ 	case xs² of {LH_C hx² tx² => case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 169
//│ [LH_P2 hx⁴ hy⁴]: 315 --->
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 472
//│ [LH_C [LH_P2 hx⁴ hy⁴] zip_nl_lz_lh_₁(tx⁴, ty⁴)]: 321 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 474
//│ [LH_N]: 322 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 474
//│ [LH_N]: 324 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 474
//│ [LH_C a³ enumFromTo_lh_₁((a³ + 1), b²)]: 348 --->
//│ 	case xs⁵ of {LH_C hx⁴ tx⁴ => case force⁰(ys⁵) of {LH_C hy⁴ ty⁴ => [LH_C [LH_P2 hx⁴ hy⁴] zip_nl_lz_lh_₁(tx⁴, ty⁴)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 325
//│ [LH_N]: 349 --->
//│ 	case xs⁵ of {LH_C hx⁴ tx⁴ => case force⁰(ys⁵) of {LH_C hy⁴ ty⁴ => [LH_C [LH_P2 hx⁴ hy⁴] zip_nl_lz_lh_₁(tx⁴, ty⁴)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 325
//│ [LH_C ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 468 --->
//│ 	case ls⁴ of {LH_C h⁵ t⁵ => (h⁵ + sum_lh_₂(t⁵)) | LH_N  => 0}: 212
//│ [LH_N]: 473 --->
//│ 	case ls⁴ of {LH_C h⁵ t⁵ => (h⁵ + sum_lh_₂(t⁵)) | LH_N  => 0}: 212
//│ ------------------
//│ case force⁰(xs¹) of {LH_C hx¹ tx¹ => case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₁(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 146 --->
//│ 	[LH_C x⁰ iterate_lh_₁(f³, f³(x⁰))]: 119
//│ case xs² of {LH_C hx² tx² => case ys² of {LH_C hy² ty² => [LH_C f⁵(hx², hy²) zipWith_lh_₁(f⁵, tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 169 --->
//│ 	[LH_C h³ mappend_lh_₁(t³, ys³)]: 180
//│ 	[LH_N]: 284
//│ 	[LH_C 0 [LH_N]]: 285
//│ case ls⁴ of {LH_C h⁵ t⁵ => (h⁵ + sum_lh_₂(t⁵)) | LH_N  => 0}: 212 --->
//│ 	[LH_C ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 468
//│ 	[LH_N]: 473
//│ case force⁰(xs⁴) of {LH_C hx³ tx³ => [LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)] | LH_N  => [LH_N]}: 256 --->
//│ 	[LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₁(f⁴, tx¹, ty¹)]: 142
//│ 	[LH_N]: 143
//│ 	[LH_N]: 145
//│ case ls⁵ of {LH_C h⁶ t⁶ => (h⁶ + sum_lh_₁(t⁶)) | LH_N  => 0}: 307 --->
//│ 	[LH_C f⁷(hx³, hy³) zipWith_lz_nl_lh_₁(f⁷, tx³, ty³)]: 254
//│ 	[LH_N]: 255
//│ 	[LH_N]: 257
//│ case xs⁵ of {LH_C hx⁴ tx⁴ => case force⁰(ys⁵) of {LH_C hy⁴ ty⁴ => [LH_C [LH_P2 hx⁴ hy⁴] zip_nl_lz_lh_₁(tx⁴, ty⁴)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 325 --->
//│ 	[LH_C a³ enumFromTo_lh_₁((a³ + 1), b²)]: 348
//│ 	[LH_N]: 349
//│ case force⁰(ls⁸) of {LH_C h⁹ t⁹ => if (n¹ == 0) then h⁹ else atIndex_lz_lh_₁((n¹ - 1), t⁹) | LH_N  => error⁰}: 384 --->
//│ 	[LH_C f²(h²) map_lz_lh_₂(f², t²)]: 104
//│ 	[LH_N]: 105
//│ case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 472 --->
//│ 	[LH_P2 hx⁴ hy⁴]: 315
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁴ -> (fun b³ -> (a⁴ * b³))), powers⁰, tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 474 --->
//│ 	[LH_C [LH_P2 hx⁴ hy⁴] zip_nl_lz_lh_₁(tx⁴, ty⁴)]: 321
//│ 	[LH_N]: 322
//│ 	[LH_N]: 324
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testBernoulli_nofib_lh_₁(primId⁰(1500))
//│ def atIndex_lz_lh_₁(n², ls⁹) = if (n² < 0) then error⁰ else force⁰(ls⁹, n²)
//│ def bernoulli_lh_₁(_lh_bernoulli_arg1¹) = case _lh_bernoulli_arg1¹ of {
//│ 	0  => 1
//│ 	| 1  => (0 - (1 / 2))
//│ 	| _  => if ((_lh_bernoulli_arg1¹ % 2) == 1) then 0 else 
//│ 		let powers⁵ = atIndex_lz_lh_₁((_lh_bernoulli_arg1¹ - 1), force⁰(neg_powers_lh_₁))
//│ 		in (((0 - 1) / 2) + sum_lh_₂(
//│ 			let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para¹ -> _lh_listcomp_fun_para¹(_lh_listcomp_fun⁵, powers⁵))
//│ 			in _lh_listcomp_fun⁵(zip_nl_lz_lh_₁(enumFromTo_lh_₁(2, _lh_bernoulli_arg1¹), pascal_lh_₁))))}
//│ def enumFromTo_lh_₁(a⁶, b⁵) = if (a⁶ <= b⁵) then 
//│ 	let tx⁵ = enumFromTo_lh_₁((a⁶ + 1), b⁵)
//│ 	in let hx⁵ = a⁶
//│ 	in (fun ys⁷ -> case force⁰(ys⁷) of {
//│ 		LH_C hy⁴ ty⁴ => 
//│ 			let _lh_listcomp_fun_ls_t¹ = zip_nl_lz_lh_₁(tx⁵, ty⁴)
//│ 			in let _lh_listcomp_fun_ls_h¹ = 	
//│ 				let _lh_bernoulli_LH_P2_1¹ = hy⁴
//│ 				in let _lh_bernoulli_LH_P2_0¹ = hx⁵
//│ 				in (fun _lh_listcomp_fun_ls_t² -> (fun _lh_listcomp_fun² -> (fun powers² -> 
//│ 					let t¹⁰ = _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)
//│ 					in let h¹⁰ = ((sum_lh_₁(zipWith_lz_nl_lh_₁((fun a⁷ -> (fun b⁶ -> (a⁷ * b⁶))), powers², tail_lh_₂(tail_lh_₁(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1))
//│ 					in (fun _lh_dummy⁰ -> (h¹⁰ + sum_lh_₂(t¹⁰))))))
//│ 			in (fun _lh_listcomp_fun¹ -> (fun powers¹ -> _lh_listcomp_fun_ls_h¹(_lh_listcomp_fun_ls_t¹, _lh_listcomp_fun¹, powers¹)))
//│ 		| LH_N  => (fun _lh_listcomp_fun³ -> (fun powers³ -> (fun _lh_dummy¹ -> 0)))}) else (fun ys⁸ -> (fun _lh_listcomp_fun⁴ -> (fun powers⁴ -> (fun _lh_dummy² -> 0))))
//│ def enumFrom_lh_₁(a⁹) = lazy⁰([LH_C a⁹ enumFrom_lh_₁((a⁹ + 1))])
//│ def head_lz_lh_₁(ls¹⁷) = case force⁰(ls¹⁷) of {
//│ 	LH_C h¹ t¹ => h¹
//│ 	| LH_N  => error⁰}
//│ def iterate_lh_₁(f¹⁸, x³) = lazy⁰(
//│ 	let tx⁸ = iterate_lh_₁(f¹⁸, f¹⁸(x³))
//│ 	in let hx⁸ = x³
//│ 	in (fun f¹⁹ -> (fun ys¹⁷ -> case force⁰(ys¹⁷) of {
//│ 		LH_C hy¹ ty¹ => 
//│ 			let tx⁹ = zipWith_lz_lz_lh_₁(f¹⁹, tx⁸, ty¹)
//│ 			in let hx⁹ = f¹⁹(hx⁸, hy¹)
//│ 			in (fun f²⁰ -> (fun hy⁵ -> (fun ty⁵ -> 
//│ 				let t¹² = zipWith_lz_nl_lh_₁(f²⁰, tx⁹, ty⁵)
//│ 				in let h¹² = f²⁰(hx⁹, hy⁵)
//│ 				in (fun _lh_dummy⁴ -> (h¹² + sum_lh_₁(t¹²))))))
//│ 		| LH_N  => (fun f²¹ -> (fun hy⁶ -> (fun ty⁶ -> (fun _lh_dummy⁵ -> 0))))})))
//│ def map_lz_lh_₁(f¹², ls¹³) = lazy⁰(case force⁰(ls¹³) of {
//│ 	LH_C h⁴ t⁴ => [LH_C f¹²(h⁴) map_lz_lh_₁(f¹², t⁴)]
//│ 	| LH_N  => [LH_N]})
//│ def map_lz_lh_₂(f¹¹, ls¹²) = lazy⁰(case force⁰(ls¹²) of {
//│ 	LH_C h² t² => 
//│ 		let t¹¹ = map_lz_lh_₂(f¹¹, t²)
//│ 		in let h¹¹ = f¹¹(h²)
//│ 		in (fun n⁴ -> if (n⁴ == 0) then h¹¹ else atIndex_lz_lh_₁((n⁴ - 1), t¹¹))
//│ 	| LH_N  => (fun n⁵ -> error⁰)})
//│ def map_lz_lh_₃(f⁹, ls¹¹) = lazy⁰(case force⁰(ls¹¹) of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁹(h⁰) map_lz_lh_₃(f⁹, t⁰)]
//│ 	| LH_N  => [LH_N]})
//│ def mappend_lh_₁(xs⁹, ys¹¹) = case xs⁹ of {
//│ 	LH_C h³ t³ => 
//│ 		let tx⁶ = mappend_lh_₁(t³, ys¹¹)
//│ 		in let hx⁶ = h³
//│ 		in (fun f¹³ -> (fun ys¹² -> case ys¹² of {
//│ 			LH_C hy² ty² => [LH_C f¹³(hx⁶, hy²) zipWith_lh_₁(f¹³, tx⁶, ty²)]
//│ 			| LH_N  => [LH_N]}))
//│ 	| LH_N  => ys¹¹}
//│ def neg_powers_lh_₁ = lazy⁰(map_lz_lh_₂(zipWith_lz_lz_lh_₁((fun n³ -> (fun x² -> if n³ then x² else (0 - x²))), iterate_lh_₁(not⁰, [True])), powers_lh_₁))
//│ def pascal_lh_₁ = lazy⁰([LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz_lh_₁((fun line¹ -> zipWith_lh_₁((fun a⁸ -> (fun b⁷ -> (a⁸ + b⁷))), mappend_lh_₁(line¹, 
//│ 	let tx⁷ = (fun f¹⁶ -> (fun ys¹⁵ -> [LH_N]))
//│ 	in let hx⁷ = 0
//│ 	in (fun f¹⁵ -> (fun ys¹⁴ -> case ys¹⁴ of {
//│ 		LH_C hy² ty² => [LH_C f¹⁵(hx⁷, hy²) zipWith_lh_₁(f¹⁵, tx⁷, ty²)]
//│ 		| LH_N  => [LH_N]}))), [LH_C 0 line¹])), pascal_lh_₁)])
//│ def powers_lh_₁ = lazy⁰([LH_C enumFrom_lh_₁(2) map_lz_lh_₃((fun p¹ -> zipWith_lz_lz_lh_₂((fun a⁵ -> (fun b⁴ -> (a⁵ * b⁴))), head_lz_lh_₁(powers_lh_₁), p¹)), powers_lh_₁)])
//│ def sum_lh_₁(ls¹⁵) = ls¹⁵(99)
//│ def sum_lh_₂(ls¹⁰) = ls¹⁰(99)
//│ def tail_lh_₁(ls¹⁶) = case ls¹⁶ of {
//│ 	LH_C h⁸ t⁸ => t⁸
//│ 	| LH_N  => error⁰}
//│ def tail_lh_₂(ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h⁷ t⁷ => t⁷
//│ 	| LH_N  => error⁰}
//│ def testBernoulli_nofib_lh_₁(_lh_testBernoulli_nofib_arg1¹) = bernoulli_lh_₁(_lh_testBernoulli_nofib_arg1¹)
//│ def zipWith_lh_₁(f¹⁰, xs⁷, ys⁹) = xs⁷(f¹⁰, ys⁹)
//│ def zipWith_lz_lz_lh_₁(f¹⁷, xs¹¹, ys¹⁶) = lazy⁰(force⁰(xs¹¹, f¹⁷, ys¹⁶))
//│ def zipWith_lz_lz_lh_₂(f⁸, xs⁶, ys⁶) = lazy⁰(case force⁰(xs⁶) of {
//│ 	LH_C hx⁰ tx⁰ => case force⁰(ys⁶) of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C f⁸(hx⁰, hy⁰) zipWith_lz_lz_lh_₂(f⁸, tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_nl_lh_₁(f¹⁴, xs¹⁰, ys¹³) = case ys¹³ of {
//│ 	LH_C hy³ ty³ => force⁰(xs¹⁰, f¹⁴, hy³, ty³)
//│ 	| LH_N  => (fun _lh_dummy³ -> 0)}
//│ def zip_nl_lz_lh_₁(xs⁸, ys¹⁰) = xs⁸(ys¹⁰)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

