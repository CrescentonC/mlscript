:NewParser
:ParseOnly

// NOTE: memory allocation negative numbers??
// -- powers = [[r^n | r<-[2..]] | n<-1..]
// powers :: [[Integer]]
// -- powers = [[(-1)^r * r^n | r<-[2..]] | n<-1..]
// neg_powers :: [[Integer]]
// pascal:: [[Integer]]
:lhInHaskell
:lhGenOCaml
powers = lazy ([2..] : (map_lz (zipWith_lz_lz (\a b -> a * b) [2..]) powers))
neg_powers =
  lazy (map_lz (zipWith_lz_lz (\n x -> if n then x else (0-x)) (iterate not True)) powers)
pascal = lazy ([1,2,1] : map_lz (\line -> zipWith (\a b -> a + b) (mappend line [0]) (0:line)) pascal)
bernoulli 0 = 1
bernoulli 1 = 0 - (1 / 2)
bernoulli n =
  if ((n `mod` 2) == 1) then
    0
  else
    let powers = (atIndex_lz (n - 1) (force neg_powers)) in
      ((0-1)/2) + sum [ ((sum $ zipWith_lz_nl (\a b -> a * b) powers (tail $ tail combs)) - k) / (k+1) | (k,combs) <- zip_nl_lz [2..n] pascal ]
testBernoulli n = bernoulli n
testBernoulli $ 1000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testBernoulli₀^1297(1000)
//│ def atIndex_lz₀(n⁶, ls²⁶) = if (n⁶ < 0) then error⁰ else case force⁰(ls²⁶) of {
//│ 	LH_C h²⁸ t³⁰ => if (n⁶ == 0) then h²⁸ else atIndex_lz₀^1282((n⁶ - 1), t³⁰)
//│ 	| LH_N  => error⁰}
//│ def bernoulli₀(_lh_bernoulli_arg1¹) = case _lh_bernoulli_arg1¹ of {
//│ 	0  => 1
//│ 	| 1  => (0 - (1 / 2))
//│ 	| _  => if ((_lh_bernoulli_arg1¹ % 2) == 1) then 0 else 
//│ 		let powers² = atIndex_lz₀^819((_lh_bernoulli_arg1¹ - 1), force⁰(neg_powers₀^827))
//│ 		in (((0 - 1) / 2) + sum₀^841(
//│ 			let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 				LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {
//│ 					LH_P2 _lh_bernoulli_LH_P2_0¹ _lh_bernoulli_LH_P2_1¹ => [LH_C ((sum₁^846(zipWith_lz_nl₀^847((fun a⁸ -> (fun b⁵ -> (a⁸ * b⁵))), powers², tail₀^858(tail₁^859(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 					| _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}
//│ 				| LH_N  => [LH_N]})
//│ 			in _lh_listcomp_fun¹(zip_nl_lz₀^887(enumFromTo₀^888(2, _lh_bernoulli_arg1¹), pascal₀^894))))}
//│ def enumFromTo₀(a⁹, b⁶) = if (a⁹ <= b⁶) then [LH_C a⁹ enumFromTo₀^955((a⁹ + 1), b⁶)] else [LH_N]
//│ def enumFrom₀(a¹¹) = lazy⁰([LH_C a¹¹ enumFrom₀^1057((a¹¹ + 1))])
//│ def enumFrom₁(a¹⁰) = lazy⁰([LH_C a¹⁰ enumFrom₁^1021((a¹⁰ + 1))])
//│ def iterate₀(f¹⁹, x⁴) = lazy⁰([LH_C x⁴ iterate₀^1233(f¹⁹, f¹⁹(x⁴))])
//│ def map_lz₀(f¹⁷, ls²²) = lazy⁰(case force⁰(ls²²) of {
//│ 	LH_C h²³ t²⁵ => [LH_C f¹⁷(h²³) map_lz₀^1098(f¹⁷, t²⁵)]
//│ 	| LH_N  => [LH_N]})
//│ def map_lz₁(f¹², ls¹⁹) = lazy⁰(case force⁰(ls¹⁹) of {
//│ 	LH_C h²⁰ t²² => [LH_C f¹²(h²⁰) map_lz₁^911(f¹², t²²)]
//│ 	| LH_N  => [LH_N]})
//│ def map_lz₂(f¹⁴, ls²¹) = lazy⁰(case force⁰(ls²¹) of {
//│ 	LH_C h²² t²⁴ => [LH_C f¹⁴(h²²) map_lz₂^976(f¹⁴, t²⁴)]
//│ 	| LH_N  => [LH_N]})
//│ def mappend₀(xs¹², ys¹²) = case xs¹² of {
//│ 	LH_C h²⁵ t²⁷ => [LH_C h²⁵ mappend₀^1116(t²⁷, ys¹²)]
//│ 	| LH_N  => ys¹²}
//│ def neg_powers₀ = lazy⁰(map_lz₀^1068(zipWith_lz_lz₁^1069((fun n⁵ -> (fun x³ -> if n⁵ then x³ else (0 - x³))), iterate₀^1081(not⁰, [True])), powers₀^1088))
//│ def pascal₀ = lazy⁰([LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz₂^1203((fun line¹ -> zipWith₀^1204((fun a¹² -> (fun b⁷ -> (a¹² + b⁷))), mappend₀^1213(line¹, [LH_C 0 [LH_N]]), [LH_C 0 line¹])), pascal₀^1227)])
//│ def powers₀ = lazy⁰([LH_C enumFrom₀^1245(2) map_lz₁^1248(zipWith_lz_lz₀^1249((fun a¹³ -> (fun b⁸ -> (a¹³ * b⁸))), enumFrom₁^1258(2)), powers₀^1263)])
//│ def sum₀(ls²⁴) = case ls²⁴ of {
//│ 	LH_C h²⁶ t²⁸ => (h²⁶ + sum₀^1177(t²⁸))
//│ 	| LH_N  => 0}
//│ def sum₁(ls²⁵) = case ls²⁵ of {
//│ 	LH_C h²⁷ t²⁹ => (h²⁷ + sum₁^1188(t²⁹))
//│ 	| LH_N  => 0}
//│ def tail₀(ls²⁰) = case ls²⁰ of {
//│ 	LH_C h²¹ t²³ => t²³
//│ 	| LH_N  => error⁰}
//│ def tail₁(ls²³) = case ls²³ of {
//│ 	LH_C h²⁴ t²⁶ => t²⁶
//│ 	| LH_N  => error⁰}
//│ def testBernoulli₀(_lh_testBernoulli_arg1¹) = bernoulli₀^987(_lh_testBernoulli_arg1¹)
//│ def zipWith_lz_lz₀(f¹⁸, xs¹³, ys¹³) = lazy⁰(case force⁰(xs¹³) of {
//│ 	LH_C hx¹¹ tx¹¹ => case force⁰(ys¹³) of {
//│ 		LH_C hy¹¹ ty¹¹ => [LH_C f¹⁸(hx¹¹, hy¹¹) zipWith_lz_lz₀^1138(f¹⁸, tx¹¹, ty¹¹)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_lz₁(f¹⁵, xs¹⁰, ys¹⁰) = lazy⁰(case force⁰(xs¹⁰) of {
//│ 	LH_C hx⁹ tx⁹ => case force⁰(ys¹⁰) of {
//│ 		LH_C hy⁹ ty⁹ => [LH_C f¹⁵(hx⁹, hy⁹) zipWith_lz_lz₁^1003(f¹⁵, tx⁹, ty⁹)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_nl₀(f¹⁶, xs¹¹, ys¹¹) = case ys¹¹ of {
//│ 	LH_C hy¹⁰ ty¹⁰ => case force⁰(xs¹¹) of {
//│ 		LH_C hx¹⁰ tx¹⁰ => [LH_C f¹⁶(hx¹⁰, hy¹⁰) zipWith_lz_nl₀^1040(f¹⁶, tx¹⁰, ty¹⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith₀(f¹³, xs⁹, ys⁹) = case xs⁹ of {
//│ 	LH_C hx⁸ tx⁸ => case ys⁹ of {
//│ 		LH_C hy⁸ ty⁸ => [LH_C f¹³(hx⁸, hy⁸) zipWith₀^929(f¹³, tx⁸, ty⁸)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zip_nl_lz₀(xs¹⁴, ys¹⁴) = case xs¹⁴ of {
//│ 	LH_C hx¹² tx¹² => case force⁰(ys¹⁴) of {
//│ 		LH_C hy¹² ty¹² => [LH_C [LH_P2 hx¹² hy¹²] zip_nl_lz₀^1161(tx¹², ty¹²)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec atIndex_lz_d0 n_6 ls_2_6 =
//│ 		  (if (n_6 < 0) then
//│ 		    (failwith "error")
//│ 		  else
//│ 		    (match (Lazy.force ls_2_6) with
//│ 		      | `LH_C(h_2_8, t_3_0) -> 
//│ 		        (if (n_6 = 0) then
//│ 		          h_2_8
//│ 		        else
//│ 		          ((atIndex_lz_d0 (n_6 - 1)) t_3_0))
//│ 		      | `LH_N -> 
//│ 		        (failwith "error")))
//│ 		and bernoulli_d0 _lh_bernoulli_arg1_1 =
//│ 		  (match _lh_bernoulli_arg1_1 with
//│ 		    | 0 -> 
//│ 		      1
//│ 		    | 1 -> 
//│ 		      (0 - (1 / 2))
//│ 		    | _ -> 
//│ 		      (if ((_lh_bernoulli_arg1_1 mod 2) = 1) then
//│ 		        0
//│ 		      else
//│ 		        (let rec powers_2 = ((atIndex_lz_d0 (_lh_bernoulli_arg1_1 - 1)) (Lazy.force neg_powers_d0)) in
//│ 		          (((0 - 1) / 2) + (sum_d0 (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		            (match _lh_listcomp_fun_para_1 with
//│ 		              | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		                (match _lh_listcomp_fun_ls_h_1 with
//│ 		                  | `LH_P2(_lh_bernoulli_LH_P2_0_1, _lh_bernoulli_LH_P2_1_1) -> 
//│ 		                    (`LH_C((((sum_d1 (((zipWith_lz_nl_d0 (fun a_8 b_5 -> 
//│ 		                      (a_8 * b_5))) powers_2) (tail_d0 (tail_d1 _lh_bernoulli_LH_P2_1_1)))) - _lh_bernoulli_LH_P2_0_1) / (_lh_bernoulli_LH_P2_0_1 + 1)), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		                  | _ -> 
//│ 		                    (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))
//│ 		              | `LH_N -> 
//│ 		                (`LH_N))) in
//│ 		            (_lh_listcomp_fun_1 ((zip_nl_lz_d0 ((enumFromTo_d0 2) _lh_bernoulli_arg1_1)) pascal_d0))))))))
//│ 		and enumFromTo_d0 a_9 b_6 =
//│ 		  (if (a_9 <= b_6) then
//│ 		    (`LH_C(a_9, ((enumFromTo_d0 (a_9 + 1)) b_6)))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and enumFrom_d0 a_1_1 =
//│ 		  (lazy (`LH_C(a_1_1, (enumFrom_d0 (a_1_1 + 1)))))
//│ 		and enumFrom_d1 a_1_0 =
//│ 		  (lazy (`LH_C(a_1_0, (enumFrom_d1 (a_1_0 + 1)))))
//│ 		and iterate_d0 f_1_9 x_4 =
//│ 		  (lazy (`LH_C(x_4, ((iterate_d0 f_1_9) (f_1_9 x_4)))))
//│ 		and map_lz_d0 f_1_7 ls_2_2 =
//│ 		  (lazy (match (Lazy.force ls_2_2) with
//│ 		    | `LH_C(h_2_3, t_2_5) -> 
//│ 		      (`LH_C((f_1_7 h_2_3), ((map_lz_d0 f_1_7) t_2_5)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)))
//│ 		and map_lz_d1 f_1_2 ls_1_9 =
//│ 		  (lazy (match (Lazy.force ls_1_9) with
//│ 		    | `LH_C(h_2_0, t_2_2) -> 
//│ 		      (`LH_C((f_1_2 h_2_0), ((map_lz_d1 f_1_2) t_2_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)))
//│ 		and map_lz_d2 f_1_4 ls_2_1 =
//│ 		  (lazy (match (Lazy.force ls_2_1) with
//│ 		    | `LH_C(h_2_2, t_2_4) -> 
//│ 		      (`LH_C((f_1_4 h_2_2), ((map_lz_d2 f_1_4) t_2_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)))
//│ 		and mappend_d0 xs_1_2 ys_1_2 =
//│ 		  (match xs_1_2 with
//│ 		    | `LH_C(h_2_5, t_2_7) -> 
//│ 		      (`LH_C(h_2_5, ((mappend_d0 t_2_7) ys_1_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_2)
//│ 		and neg_powers_d0 =
//│ 		  (lazy ((map_lz_d0 ((zipWith_lz_lz_d1 (fun n_5 x_3 -> 
//│ 		    (if n_5 then
//│ 		      x_3
//│ 		    else
//│ 		      (0 - x_3)))) ((iterate_d0 not) true))) powers_d0))
//│ 		and pascal_d0 =
//│ 		  (lazy (`LH_C((`LH_C(1, (`LH_C(2, (`LH_C(1, (`LH_N))))))), ((map_lz_d2 (fun line_1 -> 
//│ 		    (((zipWith_d0 (fun a_1_2 b_7 -> 
//│ 		      (a_1_2 + b_7))) ((mappend_d0 line_1) (`LH_C(0, (`LH_N))))) (`LH_C(0, line_1))))) pascal_d0))))
//│ 		and powers_d0 =
//│ 		  (lazy (`LH_C((enumFrom_d0 2), ((map_lz_d1 ((zipWith_lz_lz_d0 (fun a_1_3 b_8 -> 
//│ 		    (a_1_3 * b_8))) (enumFrom_d1 2))) powers_d0))))
//│ 		and sum_d0 ls_2_4 =
//│ 		  (match ls_2_4 with
//│ 		    | `LH_C(h_2_6, t_2_8) -> 
//│ 		      (h_2_6 + (sum_d0 t_2_8))
//│ 		    | `LH_N -> 
//│ 		      0)
//│ 		and sum_d1 ls_2_5 =
//│ 		  (match ls_2_5 with
//│ 		    | `LH_C(h_2_7, t_2_9) -> 
//│ 		      (h_2_7 + (sum_d1 t_2_9))
//│ 		    | `LH_N -> 
//│ 		      0)
//│ 		and tail_d0 ls_2_0 =
//│ 		  (match ls_2_0 with
//│ 		    | `LH_C(h_2_1, t_2_3) -> 
//│ 		      t_2_3
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"))
//│ 		and tail_d1 ls_2_3 =
//│ 		  (match ls_2_3 with
//│ 		    | `LH_C(h_2_4, t_2_6) -> 
//│ 		      t_2_6
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"))
//│ 		and testBernoulli_d0 _lh_testBernoulli_arg1_1 =
//│ 		  (bernoulli_d0 _lh_testBernoulli_arg1_1)
//│ 		and zipWith_lz_lz_d0 f_1_8 xs_1_3 ys_1_3 =
//│ 		  (lazy (match (Lazy.force xs_1_3) with
//│ 		    | `LH_C(hx_1_1, tx_1_1) -> 
//│ 		      (match (Lazy.force ys_1_3) with
//│ 		        | `LH_C(hy_1_1, ty_1_1) -> 
//│ 		          (`LH_C(((f_1_8 hx_1_1) hy_1_1), (((zipWith_lz_lz_d0 f_1_8) tx_1_1) ty_1_1)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)))
//│ 		and zipWith_lz_lz_d1 f_1_5 xs_1_0 ys_1_0 =
//│ 		  (lazy (match (Lazy.force xs_1_0) with
//│ 		    | `LH_C(hx_9, tx_9) -> 
//│ 		      (match (Lazy.force ys_1_0) with
//│ 		        | `LH_C(hy_9, ty_9) -> 
//│ 		          (`LH_C(((f_1_5 hx_9) hy_9), (((zipWith_lz_lz_d1 f_1_5) tx_9) ty_9)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)))
//│ 		and zipWith_lz_nl_d0 f_1_6 xs_1_1 ys_1_1 =
//│ 		  (match ys_1_1 with
//│ 		    | `LH_C(hy_1_0, ty_1_0) -> 
//│ 		      (match (Lazy.force xs_1_1) with
//│ 		        | `LH_C(hx_1_0, tx_1_0) -> 
//│ 		          (`LH_C(((f_1_6 hx_1_0) hy_1_0), (((zipWith_lz_nl_d0 f_1_6) tx_1_0) ty_1_0)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N))
//│ 		and zipWith_d0 f_1_3 xs_9 ys_9 =
//│ 		  (match xs_9 with
//│ 		    | `LH_C(hx_8, tx_8) -> 
//│ 		      (match ys_9 with
//│ 		        | `LH_C(hy_8, ty_8) -> 
//│ 		          (`LH_C(((f_1_3 hx_8) hy_8), (((zipWith_d0 f_1_3) tx_8) ty_8)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N))
//│ 		and zip_nl_lz_d0 xs_1_4 ys_1_4 =
//│ 		  (match xs_1_4 with
//│ 		    | `LH_C(hx_1_2, tx_1_2) -> 
//│ 		      (match (Lazy.force ys_1_4) with
//│ 		        | `LH_C(hy_1_2, ty_1_2) -> 
//│ 		          (`LH_C((`LH_P2(hx_1_2, hy_1_2)), ((zip_nl_lz_d0 tx_1_2) ty_1_2)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		(testBernoulli_d0 1000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testBernoulli₀^1297] (hopeless to continue)
//│ 	[testBernoulli₀^1297 · bernoulli₀^987] (using original def)
//│ 		[testBernoulli₀^1297 · bernoulli₀^987 · atIndex_lz₀^819] (using original def)
//│ 			[testBernoulli₀^1297 · bernoulli₀^987 · atIndex_lz₀^819 · atIndex_lz₀^1282] ---> [testBernoulli₀^1297 · bernoulli₀^987 · atIndex_lz₀^819] (using original def)
//│ 		[testBernoulli₀^1297 · bernoulli₀^987 · enumFromTo₀^888] (using original def)
//│ 			[testBernoulli₀^1297 · bernoulli₀^987 · enumFromTo₀^888 · enumFromTo₀^955] ---> [testBernoulli₀^1297 · bernoulli₀^987 · enumFromTo₀^888] (using original def)
//│ 		[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827] (using original def)
//│ 			[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · iterate₀^1081] (using original def)
//│ 				[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · iterate₀^1081 · iterate₀^1233] ---> [testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · iterate₀^1081] (using original def)
//│ 			[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · map_lz₀^1068] (using original def)
//│ 				[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · map_lz₀^1068 · map_lz₀^1098] ---> [testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · map_lz₀^1068] (using original def)
//│ 			[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · powers₀^1088] (using original def)
//│ 				[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · powers₀^1088 · enumFrom₀^1245] (using original def)
//│ 					[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · powers₀^1088 · enumFrom₀^1245 · enumFrom₀^1057] ---> [testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · powers₀^1088 · enumFrom₀^1245] (using original def)
//│ 				[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · powers₀^1088 · enumFrom₁^1258] (using original def)
//│ 					[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · powers₀^1088 · enumFrom₁^1258 · enumFrom₁^1021] ---> [testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · powers₀^1088 · enumFrom₁^1258] (using original def)
//│ 				[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · powers₀^1088 · map_lz₁^1248] (using original def)
//│ 					[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · powers₀^1088 · map_lz₁^1248 · map_lz₁^911] ---> [testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · powers₀^1088 · map_lz₁^1248] (using original def)
//│ 				[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · powers₀^1088 · powers₀^1263] ---> [testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · powers₀^1088] (using original def)
//│ 				[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · powers₀^1088 · zipWith_lz_lz₀^1249] (using original def)
//│ 					[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · powers₀^1088 · zipWith_lz_lz₀^1249 · zipWith_lz_lz₀^1138] ---> [testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · powers₀^1088 · zipWith_lz_lz₀^1249] (using original def)
//│ 			[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · zipWith_lz_lz₁^1069] (using original def)
//│ 				[testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · zipWith_lz_lz₁^1069 · zipWith_lz_lz₁^1003] ---> [testBernoulli₀^1297 · bernoulli₀^987 · neg_powers₀^827 · zipWith_lz_lz₁^1069] (using original def)
//│ 		[testBernoulli₀^1297 · bernoulli₀^987 · pascal₀^894] (using original def)
//│ 			[testBernoulli₀^1297 · bernoulli₀^987 · pascal₀^894 · map_lz₂^1203] (using original def)
//│ 				[testBernoulli₀^1297 · bernoulli₀^987 · pascal₀^894 · map_lz₂^1203 · map_lz₂^976] ---> [testBernoulli₀^1297 · bernoulli₀^987 · pascal₀^894 · map_lz₂^1203] (using original def)
//│ 			[testBernoulli₀^1297 · bernoulli₀^987 · pascal₀^894 · mappend₀^1213] (using original def)
//│ 				[testBernoulli₀^1297 · bernoulli₀^987 · pascal₀^894 · mappend₀^1213 · mappend₀^1116] ---> [testBernoulli₀^1297 · bernoulli₀^987 · pascal₀^894 · mappend₀^1213] (using original def)
//│ 			[testBernoulli₀^1297 · bernoulli₀^987 · pascal₀^894 · pascal₀^1227] ---> [testBernoulli₀^1297 · bernoulli₀^987 · pascal₀^894] (using original def)
//│ 			[testBernoulli₀^1297 · bernoulli₀^987 · pascal₀^894 · zipWith₀^1204] (using original def)
//│ 				[testBernoulli₀^1297 · bernoulli₀^987 · pascal₀^894 · zipWith₀^1204 · zipWith₀^929] ---> [testBernoulli₀^1297 · bernoulli₀^987 · pascal₀^894 · zipWith₀^1204] (using original def)
//│ 		[testBernoulli₀^1297 · bernoulli₀^987 · sum₀^841] (using original def)
//│ 			[testBernoulli₀^1297 · bernoulli₀^987 · sum₀^841 · sum₀^1177] ---> [testBernoulli₀^1297 · bernoulli₀^987 · sum₀^841] (using original def)
//│ 		[testBernoulli₀^1297 · bernoulli₀^987 · sum₁^846] (using original def)
//│ 			[testBernoulli₀^1297 · bernoulli₀^987 · sum₁^846 · sum₁^1188] ---> [testBernoulli₀^1297 · bernoulli₀^987 · sum₁^846] (using original def)
//│ 		[testBernoulli₀^1297 · bernoulli₀^987 · tail₀^858] (using original def)
//│ 		[testBernoulli₀^1297 · bernoulli₀^987 · tail₁^859] (using original def)
//│ 		[testBernoulli₀^1297 · bernoulli₀^987 · zipWith_lz_nl₀^847] (using original def)
//│ 			[testBernoulli₀^1297 · bernoulli₀^987 · zipWith_lz_nl₀^847 · zipWith_lz_nl₀^1040] ---> [testBernoulli₀^1297 · bernoulli₀^987 · zipWith_lz_nl₀^847] (using original def)
//│ 		[testBernoulli₀^1297 · bernoulli₀^987 · zip_nl_lz₀^887] (using original def)
//│ 			[testBernoulli₀^1297 · bernoulli₀^987 · zip_nl_lz₀^887 · zip_nl_lz₀^1161] ---> [testBernoulli₀^1297 · bernoulli₀^987 · zip_nl_lz₀^887] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testBernoulli₀₀(1000)
//│ def testBernoulli₀₀(_lh_testBernoulli_arg1¹) = 
//│ 	bernoulli₀₀(_lh_testBernoulli_arg1¹)
//│ 	where
//│ 	def bernoulli₀₀(_lh_bernoulli_arg1¹) = 
//│ 		case _lh_bernoulli_arg1¹ of {
//│ 			0  => 1
//│ 			| 1  => (0 - (1 / 2))
//│ 			| _  => if ((_lh_bernoulli_arg1¹ % 2) == 1) then 0 else 
//│ 				let powers¹ = atIndex_lz₀₀((_lh_bernoulli_arg1¹ - 1), force⁰(neg_powers₀₀))
//│ 				in (((0 - 1) / 2) + sum₀₀(
//│ 					let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 						LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {
//│ 							LH_P2 _lh_bernoulli_LH_P2_0¹ _lh_bernoulli_LH_P2_1¹ => [LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 							| _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun¹(zip_nl_lz₀₀(enumFromTo₀₀(2, _lh_bernoulli_arg1¹), pascal₀₀))))}
//│ 		where
//│ 		def atIndex_lz₀₀(n³, ls¹⁴) = 
//│ 			if (n³ < 0) then error⁰ else case force⁰(ls¹⁴) of {
//│ 				LH_C h¹⁶ t¹⁶ => if (n³ == 0) then h¹⁶ else atIndex_lz₀₀((n³ - 1), t¹⁶)
//│ 				| LH_N  => error⁰}
//│ 		def enumFromTo₀₀(a⁶, b⁴) = 
//│ 			if (a⁶ <= b⁴) then [LH_C a⁶ enumFromTo₀₀((a⁶ + 1), b⁴)] else [LH_N]
//│ 		def neg_powers₀₀ = 
//│ 			lazy⁰(map_lz₀₀(zipWith_lz_lz₁₀((fun n² -> (fun x² -> if n² then x² else (0 - x²))), iterate₀₀(not⁰, [True])), powers₀₀))
//│ 			where
//│ 			def iterate₀₀(f¹⁵, x³) = 
//│ 				lazy⁰([LH_C x³ iterate₀₀(f¹⁵, f¹⁵(x³))])
//│ 			def map_lz₀₀(f¹⁴, ls¹³) = 
//│ 				lazy⁰(case force⁰(ls¹³) of {
//│ 					LH_C h¹⁵ t¹⁵ => [LH_C f¹⁴(h¹⁵) map_lz₀₀(f¹⁴, t¹⁵)]
//│ 					| LH_N  => [LH_N]})
//│ 			def powers₀₀ = 
//│ 				lazy⁰([LH_C enumFrom₀₀(2) map_lz₁₀(zipWith_lz_lz₀₀((fun a¹¹ -> (fun b⁷ -> (a¹¹ * b⁷))), enumFrom₁₀(2)), powers₀₀)])
//│ 				where
//│ 				def enumFrom₀₀(a⁹) = 
//│ 					lazy⁰([LH_C a⁹ enumFrom₀₀((a⁹ + 1))])
//│ 				def enumFrom₁₀(a¹⁰) = 
//│ 					lazy⁰([LH_C a¹⁰ enumFrom₁₀((a¹⁰ + 1))])
//│ 				def map_lz₁₀(f⁹, ls⁹) = 
//│ 					lazy⁰(case force⁰(ls⁹) of {
//│ 						LH_C h¹⁰ t¹⁰ => [LH_C f⁹(h¹⁰) map_lz₁₀(f⁹, t¹⁰)]
//│ 						| LH_N  => [LH_N]})
//│ 				def zipWith_lz_lz₀₀(f⁸, xs⁷, ys⁷) = 
//│ 					lazy⁰(case force⁰(xs⁷) of {
//│ 						LH_C hx⁶ tx⁶ => case force⁰(ys⁷) of {
//│ 							LH_C hy⁶ ty⁶ => [LH_C f⁸(hx⁶, hy⁶) zipWith_lz_lz₀₀(f⁸, tx⁶, ty⁶)]
//│ 							| LH_N  => [LH_N]}
//│ 						| LH_N  => [LH_N]})
//│ 			def zipWith_lz_lz₁₀(f¹³, xs¹¹, ys¹¹) = 
//│ 				lazy⁰(case force⁰(xs¹¹) of {
//│ 					LH_C hx⁹ tx⁹ => case force⁰(ys¹¹) of {
//│ 						LH_C hy⁹ ty⁹ => [LH_C f¹³(hx⁹, hy⁹) zipWith_lz_lz₁₀(f¹³, tx⁹, ty⁹)]
//│ 						| LH_N  => [LH_N]}
//│ 					| LH_N  => [LH_N]})
//│ 		def pascal₀₀ = 
//│ 			lazy⁰([LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz₂₀((fun line¹ -> zipWith₀₀((fun a⁷ -> (fun b⁵ -> (a⁷ + b⁵))), mappend₀₀(line¹, [LH_C 0 [LH_N]]), [LH_C 0 line¹])), pascal₀₀)])
//│ 			where
//│ 			def map_lz₂₀(f¹², ls¹²) = 
//│ 				lazy⁰(case force⁰(ls¹²) of {
//│ 					LH_C h¹⁴ t¹⁴ => [LH_C f¹²(h¹⁴) map_lz₂₀(f¹², t¹⁴)]
//│ 					| LH_N  => [LH_N]})
//│ 			def mappend₀₀(xs⁹, ys⁹) = 
//│ 				case xs⁹ of {
//│ 					LH_C h¹³ t¹³ => [LH_C h¹³ mappend₀₀(t¹³, ys⁹)]
//│ 					| LH_N  => ys⁹}
//│ 			def zipWith₀₀(f¹⁰, xs⁸, ys⁸) = 
//│ 				case xs⁸ of {
//│ 					LH_C hx⁷ tx⁷ => case ys⁸ of {
//│ 						LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)]
//│ 						| LH_N  => [LH_N]}
//│ 					| LH_N  => [LH_N]}
//│ 		def sum₀₀(ls¹⁵) = 
//│ 			case ls¹⁵ of {
//│ 				LH_C h¹⁷ t¹⁷ => (h¹⁷ + sum₀₀(t¹⁷))
//│ 				| LH_N  => 0}
//│ 		def sum₁₀(ls¹⁰) = 
//│ 			case ls¹⁰ of {
//│ 				LH_C h¹¹ t¹¹ => (h¹¹ + sum₁₀(t¹¹))
//│ 				| LH_N  => 0}
//│ 		def tail₀₀(ls⁸) = 
//│ 			case ls⁸ of {
//│ 				LH_C h⁹ t⁹ => t⁹
//│ 				| LH_N  => error⁰}
//│ 		def tail₁₀(ls¹¹) = 
//│ 			case ls¹¹ of {
//│ 				LH_C h¹² t¹² => t¹²
//│ 				| LH_N  => error⁰}
//│ 		def zipWith_lz_nl₀₀(f¹¹, xs¹⁰, ys¹⁰) = 
//│ 			case ys¹⁰ of {
//│ 				LH_C hy⁸ ty⁸ => case force⁰(xs¹⁰) of {
//│ 					LH_C hx⁸ tx⁸ => [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)]
//│ 					| LH_N  => [LH_N]}
//│ 				| LH_N  => [LH_N]}
//│ 		def zip_nl_lz₀₀(xs⁶, ys⁶) = 
//│ 			case xs⁶ of {
//│ 				LH_C hx⁵ tx⁵ => case force⁰(ys⁶) of {
//│ 					LH_C hy⁵ ty⁵ => [LH_C [LH_P2 hx⁵ hy⁵] zip_nl_lz₀₀(tx⁵, ty⁵)]
//│ 					| LH_N  => [LH_N]}
//│ 				| LH_N  => [LH_N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_P2 hx⁵ hy⁵]: 509 --->
//│ 	case _lh_listcomp_fun_ls_h¹ of {LH_P2 _lh_bernoulli_LH_P2_0¹ _lh_bernoulli_LH_P2_1¹ => [LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 861
//│ [LH_C [LH_P2 hx⁵ hy⁵] zip_nl_lz₀₀(tx⁵, ty⁵)]: 515 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {LH_P2 _lh_bernoulli_LH_P2_0¹ _lh_bernoulli_LH_P2_1¹ => [LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => [LH_N]}: 863
//│ [LH_N]: 516 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {LH_P2 _lh_bernoulli_LH_P2_0¹ _lh_bernoulli_LH_P2_1¹ => [LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => [LH_N]}: 863
//│ [LH_N]: 518 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {LH_P2 _lh_bernoulli_LH_P2_0¹ _lh_bernoulli_LH_P2_1¹ => [LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => [LH_N]}: 863
//│ [LH_C f⁸(hx⁶, hy⁶) zipWith_lz_lz₀₀(f⁸, tx⁶, ty⁶)]: 546 --->
//│ 	case force⁰(ys⁷) of {LH_C hy⁶ ty⁶ => [LH_C f⁸(hx⁶, hy⁶) zipWith_lz_lz₀₀(f⁸, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 548
//│ 	case force⁰(ys¹¹) of {LH_C hy⁹ ty⁹ => [LH_C f¹³(hx⁹, hy⁹) zipWith_lz_lz₁₀(f¹³, tx⁹, ty⁹)] | LH_N  => [LH_N]}: 734
//│ [LH_N]: 547 --->
//│ 	case force⁰(ys⁷) of {LH_C hy⁶ ty⁶ => [LH_C f⁸(hx⁶, hy⁶) zipWith_lz_lz₀₀(f⁸, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 548
//│ 	case force⁰(ys¹¹) of {LH_C hy⁹ ty⁹ => [LH_C f¹³(hx⁹, hy⁹) zipWith_lz_lz₁₀(f¹³, tx⁹, ty⁹)] | LH_N  => [LH_N]}: 734
//│ [LH_N]: 549 --->
//│ 	case force⁰(ys⁷) of {LH_C hy⁶ ty⁶ => [LH_C f⁸(hx⁶, hy⁶) zipWith_lz_lz₀₀(f⁸, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 548
//│ 	case force⁰(ys¹¹) of {LH_C hy⁹ ty⁹ => [LH_C f¹³(hx⁹, hy⁹) zipWith_lz_lz₁₀(f¹³, tx⁹, ty⁹)] | LH_N  => [LH_N]}: 734
//│ [LH_C f⁹(h¹⁰) map_lz₁₀(f⁹, t¹⁰)]: 571 --->
//│ 	case force⁰(ls⁹) of {LH_C h¹⁰ t¹⁰ => [LH_C f⁹(h¹⁰) map_lz₁₀(f⁹, t¹⁰)] | LH_N  => [LH_N]}: 573
//│ 	case force⁰(ls¹³) of {LH_C h¹⁵ t¹⁵ => [LH_C f¹⁴(h¹⁵) map_lz₀₀(f¹⁴, t¹⁵)] | LH_N  => [LH_N]}: 897
//│ [LH_N]: 572 --->
//│ 	case force⁰(ls⁹) of {LH_C h¹⁰ t¹⁰ => [LH_C f⁹(h¹⁰) map_lz₁₀(f⁹, t¹⁰)] | LH_N  => [LH_N]}: 573
//│ 	case force⁰(ls¹³) of {LH_C h¹⁵ t¹⁵ => [LH_C f¹⁴(h¹⁵) map_lz₀₀(f¹⁴, t¹⁵)] | LH_N  => [LH_N]}: 897
//│ [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)]: 607 --->
//│ 	case ls⁸ of {LH_C h⁹ t⁹ => t⁹ | LH_N  => error⁰}: 525
//│ 	case ls¹¹ of {LH_C h¹² t¹² => t¹² | LH_N  => error⁰}: 591
//│ 	case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 609
//│ 	case xs⁹ of {LH_C h¹³ t¹³ => [LH_C h¹³ mappend₀₀(t¹³, ys⁹)] | LH_N  => ys⁹}: 624
//│ 	case ys¹⁰ of {LH_C hy⁸ ty⁸ => case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 647
//│ [LH_N]: 608 --->
//│ 	case ls⁸ of {LH_C h⁹ t⁹ => t⁹ | LH_N  => error⁰}: 525
//│ 	case ls¹¹ of {LH_C h¹² t¹² => t¹² | LH_N  => error⁰}: 591
//│ 	case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 609
//│ 	case xs⁹ of {LH_C h¹³ t¹³ => [LH_C h¹³ mappend₀₀(t¹³, ys⁹)] | LH_N  => ys⁹}: 624
//│ 	case ys¹⁰ of {LH_C hy⁸ ty⁸ => case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 647
//│ [LH_N]: 610 --->
//│ 	case ls⁸ of {LH_C h⁹ t⁹ => t⁹ | LH_N  => error⁰}: 525
//│ 	case ls¹¹ of {LH_C h¹² t¹² => t¹² | LH_N  => error⁰}: 591
//│ 	case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 609
//│ 	case xs⁹ of {LH_C h¹³ t¹³ => [LH_C h¹³ mappend₀₀(t¹³, ys⁹)] | LH_N  => ys⁹}: 624
//│ 	case ys¹⁰ of {LH_C hy⁸ ty⁸ => case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 647
//│ [LH_C h¹³ mappend₀₀(t¹³, ys⁹)]: 622 --->
//│ 	case xs⁸ of {LH_C hx⁷ tx⁷ => case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 611
//│ [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)]: 643 --->
//│ 	case ls¹⁰ of {LH_C h¹¹ t¹¹ => (h¹¹ + sum₁₀(t¹¹)) | LH_N  => 0}: 586
//│ [LH_N]: 644 --->
//│ 	case ls¹⁰ of {LH_C h¹¹ t¹¹ => (h¹¹ + sum₁₀(t¹¹)) | LH_N  => 0}: 586
//│ [LH_N]: 646 --->
//│ 	case ls¹⁰ of {LH_C h¹¹ t¹¹ => (h¹¹ + sum₁₀(t¹¹)) | LH_N  => 0}: 586
//│ [LH_C a⁶ enumFromTo₀₀((a⁶ + 1), b⁴)]: 666 --->
//│ 	case xs⁶ of {LH_C hx⁵ tx⁵ => case force⁰(ys⁶) of {LH_C hy⁵ ty⁵ => [LH_C [LH_P2 hx⁵ hy⁵] zip_nl_lz₀₀(tx⁵, ty⁵)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 519
//│ [LH_N]: 667 --->
//│ 	case xs⁶ of {LH_C hx⁵ tx⁵ => case force⁰(ys⁶) of {LH_C hy⁵ ty⁵ => [LH_C [LH_P2 hx⁵ hy⁵] zip_nl_lz₀₀(tx⁵, ty⁵)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 519
//│ [LH_C f¹²(h¹⁴) map_lz₂₀(f¹², t¹⁴)]: 683 --->
//│ 	case force⁰(ys⁶) of {LH_C hy⁵ ty⁵ => [LH_C [LH_P2 hx⁵ hy⁵] zip_nl_lz₀₀(tx⁵, ty⁵)] | LH_N  => [LH_N]}: 517
//│ 	case force⁰(ls¹²) of {LH_C h¹⁴ t¹⁴ => [LH_C f¹²(h¹⁴) map_lz₂₀(f¹², t¹⁴)] | LH_N  => [LH_N]}: 685
//│ [LH_N]: 684 --->
//│ 	case force⁰(ys⁶) of {LH_C hy⁵ ty⁵ => [LH_C [LH_P2 hx⁵ hy⁵] zip_nl_lz₀₀(tx⁵, ty⁵)] | LH_N  => [LH_N]}: 517
//│ 	case force⁰(ls¹²) of {LH_C h¹⁴ t¹⁴ => [LH_C f¹²(h¹⁴) map_lz₂₀(f¹², t¹⁴)] | LH_N  => [LH_N]}: 685
//│ [LH_C f¹³(hx⁹, hy⁹) zipWith_lz_lz₁₀(f¹³, tx⁹, ty⁹)]: 732 --->
//│ 	case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)] | LH_N  => [LH_N]}: 645
//│ [LH_N]: 733 --->
//│ 	case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)] | LH_N  => [LH_N]}: 645
//│ [LH_N]: 735 --->
//│ 	case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)] | LH_N  => [LH_N]}: 645
//│ [LH_N]: 745 --->
//│ 	case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 609
//│ 	case xs⁹ of {LH_C h¹³ t¹³ => [LH_C h¹³ mappend₀₀(t¹³, ys⁹)] | LH_N  => ys⁹}: 624
//│ 	case ys¹⁰ of {LH_C hy⁸ ty⁸ => case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 647
//│ [LH_C 1 [LH_N]]: 746 --->
//│ 	case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 609
//│ 	case xs⁹ of {LH_C h¹³ t¹³ => [LH_C h¹³ mappend₀₀(t¹³, ys⁹)] | LH_N  => ys⁹}: 624
//│ 	case ys¹⁰ of {LH_C hy⁸ ty⁸ => case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 647
//│ [LH_C 2 [LH_C 1 [LH_N]]]: 747 --->
//│ 	case ls⁸ of {LH_C h⁹ t⁹ => t⁹ | LH_N  => error⁰}: 525
//│ 	case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 609
//│ 	case xs⁹ of {LH_C h¹³ t¹³ => [LH_C h¹³ mappend₀₀(t¹³, ys⁹)] | LH_N  => ys⁹}: 624
//│ [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 748 --->
//│ 	case ls¹¹ of {LH_C h¹² t¹² => t¹² | LH_N  => error⁰}: 591
//│ 	case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 609
//│ 	case xs⁹ of {LH_C h¹³ t¹³ => [LH_C h¹³ mappend₀₀(t¹³, ys⁹)] | LH_N  => ys⁹}: 624
//│ [LH_N]: 763 --->
//│ 	case xs⁸ of {LH_C hx⁷ tx⁷ => case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 611
//│ [LH_C 0 [LH_N]]: 764 --->
//│ 	case xs⁸ of {LH_C hx⁷ tx⁷ => case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 611
//│ [LH_C 0 line¹]: 769 --->
//│ 	case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 609
//│ [LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz₂₀((fun line¹ -> zipWith₀₀((fun a⁷ -> (fun b⁵ -> (a⁷ + b⁵))), mappend₀₀(line¹, [LH_C 0 [LH_N]]), [LH_C 0 line¹])), pascal₀₀)]: 775 --->
//│ 	case force⁰(ys⁶) of {LH_C hy⁵ ty⁵ => [LH_C [LH_P2 hx⁵ hy⁵] zip_nl_lz₀₀(tx⁵, ty⁵)] | LH_N  => [LH_N]}: 517
//│ 	case force⁰(ls¹²) of {LH_C h¹⁴ t¹⁴ => [LH_C f¹²(h¹⁴) map_lz₂₀(f¹², t¹⁴)] | LH_N  => [LH_N]}: 685
//│ [LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 857 --->
//│ 	case ls¹⁵ of {LH_C h¹⁷ t¹⁷ => (h¹⁷ + sum₀₀(t¹⁷)) | LH_N  => 0}: 952
//│ [LH_N]: 862 --->
//│ 	case ls¹⁵ of {LH_C h¹⁷ t¹⁷ => (h¹⁷ + sum₀₀(t¹⁷)) | LH_N  => 0}: 952
//│ [LH_C f¹⁴(h¹⁵) map_lz₀₀(f¹⁴, t¹⁵)]: 895 --->
//│ 	case force⁰(ls¹⁴) of {LH_C h¹⁶ t¹⁶ => if (n³ == 0) then h¹⁶ else atIndex_lz₀₀((n³ - 1), t¹⁶) | LH_N  => error⁰}: 939
//│ [LH_N]: 896 --->
//│ 	case force⁰(ls¹⁴) of {LH_C h¹⁶ t¹⁶ => if (n³ == 0) then h¹⁶ else atIndex_lz₀₀((n³ - 1), t¹⁶) | LH_N  => error⁰}: 939
//│ [LH_C a⁹ enumFrom₀₀((a⁹ + 1))]: 910 --->
//│ 	case force⁰(ys⁷) of {LH_C hy⁶ ty⁶ => [LH_C f⁸(hx⁶, hy⁶) zipWith_lz_lz₀₀(f⁸, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 548
//│ 	case force⁰(ys¹¹) of {LH_C hy⁹ ty⁹ => [LH_C f¹³(hx⁹, hy⁹) zipWith_lz_lz₁₀(f¹³, tx⁹, ty⁹)] | LH_N  => [LH_N]}: 734
//│ [LH_C a¹⁰ enumFrom₁₀((a¹⁰ + 1))]: 963 --->
//│ 	case force⁰(xs⁷) of {LH_C hx⁶ tx⁶ => case force⁰(ys⁷) of {LH_C hy⁶ ty⁶ => [LH_C f⁸(hx⁶, hy⁶) zipWith_lz_lz₀₀(f⁸, tx⁶, ty⁶)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 550
//│ [LH_C x³ iterate₀₀(f¹⁵, f¹⁵(x³))]: 975 --->
//│ 	case force⁰(xs¹¹) of {LH_C hx⁹ tx⁹ => case force⁰(ys¹¹) of {LH_C hy⁹ ty⁹ => [LH_C f¹³(hx⁹, hy⁹) zipWith_lz_lz₁₀(f¹³, tx⁹, ty⁹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 736
//│ [LH_C enumFrom₀₀(2) map_lz₁₀(zipWith_lz_lz₀₀((fun a¹¹ -> (fun b⁷ -> (a¹¹ * b⁷))), enumFrom₁₀(2)), powers₀₀)]: 1000 --->
//│ 	case force⁰(ls⁹) of {LH_C h¹⁰ t¹⁰ => [LH_C f⁹(h¹⁰) map_lz₁₀(f⁹, t¹⁰)] | LH_N  => [LH_N]}: 573
//│ 	case force⁰(ls¹³) of {LH_C h¹⁵ t¹⁵ => [LH_C f¹⁴(h¹⁵) map_lz₀₀(f¹⁴, t¹⁵)] | LH_N  => [LH_N]}: 897
//│ ------------------
//│ case force⁰(ys⁶) of {LH_C hy⁵ ty⁵ => [LH_C [LH_P2 hx⁵ hy⁵] zip_nl_lz₀₀(tx⁵, ty⁵)] | LH_N  => [LH_N]}: 517 --->
//│ 	[LH_C f¹²(h¹⁴) map_lz₂₀(f¹², t¹⁴)]: 683
//│ 	[LH_N]: 684
//│ 	[LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz₂₀((fun line¹ -> zipWith₀₀((fun a⁷ -> (fun b⁵ -> (a⁷ + b⁵))), mappend₀₀(line¹, [LH_C 0 [LH_N]]), [LH_C 0 line¹])), pascal₀₀)]: 775
//│ case xs⁶ of {LH_C hx⁵ tx⁵ => case force⁰(ys⁶) of {LH_C hy⁵ ty⁵ => [LH_C [LH_P2 hx⁵ hy⁵] zip_nl_lz₀₀(tx⁵, ty⁵)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 519 --->
//│ 	[LH_C a⁶ enumFromTo₀₀((a⁶ + 1), b⁴)]: 666
//│ 	[LH_N]: 667
//│ case ls⁸ of {LH_C h⁹ t⁹ => t⁹ | LH_N  => error⁰}: 525 --->
//│ 	[LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)]: 607
//│ 	[LH_N]: 608
//│ 	[LH_N]: 610
//│ 	[LH_C 2 [LH_C 1 [LH_N]]]: 747
//│ case force⁰(ys⁷) of {LH_C hy⁶ ty⁶ => [LH_C f⁸(hx⁶, hy⁶) zipWith_lz_lz₀₀(f⁸, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 548 --->
//│ 	[LH_C f⁸(hx⁶, hy⁶) zipWith_lz_lz₀₀(f⁸, tx⁶, ty⁶)]: 546
//│ 	[LH_N]: 547
//│ 	[LH_N]: 549
//│ 	[LH_C a⁹ enumFrom₀₀((a⁹ + 1))]: 910
//│ case force⁰(xs⁷) of {LH_C hx⁶ tx⁶ => case force⁰(ys⁷) of {LH_C hy⁶ ty⁶ => [LH_C f⁸(hx⁶, hy⁶) zipWith_lz_lz₀₀(f⁸, tx⁶, ty⁶)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 550 --->
//│ 	[LH_C a¹⁰ enumFrom₁₀((a¹⁰ + 1))]: 963
//│ case force⁰(ls⁹) of {LH_C h¹⁰ t¹⁰ => [LH_C f⁹(h¹⁰) map_lz₁₀(f⁹, t¹⁰)] | LH_N  => [LH_N]}: 573 --->
//│ 	[LH_C f⁹(h¹⁰) map_lz₁₀(f⁹, t¹⁰)]: 571
//│ 	[LH_N]: 572
//│ 	[LH_C enumFrom₀₀(2) map_lz₁₀(zipWith_lz_lz₀₀((fun a¹¹ -> (fun b⁷ -> (a¹¹ * b⁷))), enumFrom₁₀(2)), powers₀₀)]: 1000
//│ case ls¹⁰ of {LH_C h¹¹ t¹¹ => (h¹¹ + sum₁₀(t¹¹)) | LH_N  => 0}: 586 --->
//│ 	[LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)]: 643
//│ 	[LH_N]: 644
//│ 	[LH_N]: 646
//│ case ls¹¹ of {LH_C h¹² t¹² => t¹² | LH_N  => error⁰}: 591 --->
//│ 	[LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)]: 607
//│ 	[LH_N]: 608
//│ 	[LH_N]: 610
//│ 	[LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 748
//│ case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 609 --->
//│ 	[LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)]: 607
//│ 	[LH_N]: 608
//│ 	[LH_N]: 610
//│ 	[LH_N]: 745
//│ 	[LH_C 1 [LH_N]]: 746
//│ 	[LH_C 2 [LH_C 1 [LH_N]]]: 747
//│ 	[LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 748
//│ 	[LH_C 0 line¹]: 769
//│ case xs⁸ of {LH_C hx⁷ tx⁷ => case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 611 --->
//│ 	[LH_C h¹³ mappend₀₀(t¹³, ys⁹)]: 622
//│ 	[LH_N]: 763
//│ 	[LH_C 0 [LH_N]]: 764
//│ case xs⁹ of {LH_C h¹³ t¹³ => [LH_C h¹³ mappend₀₀(t¹³, ys⁹)] | LH_N  => ys⁹}: 624 --->
//│ 	[LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)]: 607
//│ 	[LH_N]: 608
//│ 	[LH_N]: 610
//│ 	[LH_N]: 745
//│ 	[LH_C 1 [LH_N]]: 746
//│ 	[LH_C 2 [LH_C 1 [LH_N]]]: 747
//│ 	[LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 748
//│ case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)] | LH_N  => [LH_N]}: 645 --->
//│ 	[LH_C f¹³(hx⁹, hy⁹) zipWith_lz_lz₁₀(f¹³, tx⁹, ty⁹)]: 732
//│ 	[LH_N]: 733
//│ 	[LH_N]: 735
//│ case ys¹⁰ of {LH_C hy⁸ ty⁸ => case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 647 --->
//│ 	[LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)]: 607
//│ 	[LH_N]: 608
//│ 	[LH_N]: 610
//│ 	[LH_N]: 745
//│ 	[LH_C 1 [LH_N]]: 746
//│ case force⁰(ls¹²) of {LH_C h¹⁴ t¹⁴ => [LH_C f¹²(h¹⁴) map_lz₂₀(f¹², t¹⁴)] | LH_N  => [LH_N]}: 685 --->
//│ 	[LH_C f¹²(h¹⁴) map_lz₂₀(f¹², t¹⁴)]: 683
//│ 	[LH_N]: 684
//│ 	[LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz₂₀((fun line¹ -> zipWith₀₀((fun a⁷ -> (fun b⁵ -> (a⁷ + b⁵))), mappend₀₀(line¹, [LH_C 0 [LH_N]]), [LH_C 0 line¹])), pascal₀₀)]: 775
//│ case force⁰(ys¹¹) of {LH_C hy⁹ ty⁹ => [LH_C f¹³(hx⁹, hy⁹) zipWith_lz_lz₁₀(f¹³, tx⁹, ty⁹)] | LH_N  => [LH_N]}: 734 --->
//│ 	[LH_C f⁸(hx⁶, hy⁶) zipWith_lz_lz₀₀(f⁸, tx⁶, ty⁶)]: 546
//│ 	[LH_N]: 547
//│ 	[LH_N]: 549
//│ 	[LH_C a⁹ enumFrom₀₀((a⁹ + 1))]: 910
//│ case force⁰(xs¹¹) of {LH_C hx⁹ tx⁹ => case force⁰(ys¹¹) of {LH_C hy⁹ ty⁹ => [LH_C f¹³(hx⁹, hy⁹) zipWith_lz_lz₁₀(f¹³, tx⁹, ty⁹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 736 --->
//│ 	[LH_C x³ iterate₀₀(f¹⁵, f¹⁵(x³))]: 975
//│ case _lh_listcomp_fun_ls_h¹ of {LH_P2 _lh_bernoulli_LH_P2_0¹ _lh_bernoulli_LH_P2_1¹ => [LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 861 --->
//│ 	[LH_P2 hx⁵ hy⁵]: 509
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {LH_P2 _lh_bernoulli_LH_P2_0¹ _lh_bernoulli_LH_P2_1¹ => [LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => [LH_N]}: 863 --->
//│ 	[LH_C [LH_P2 hx⁵ hy⁵] zip_nl_lz₀₀(tx⁵, ty⁵)]: 515
//│ 	[LH_N]: 516
//│ 	[LH_N]: 518
//│ case force⁰(ls¹³) of {LH_C h¹⁵ t¹⁵ => [LH_C f¹⁴(h¹⁵) map_lz₀₀(f¹⁴, t¹⁵)] | LH_N  => [LH_N]}: 897 --->
//│ 	[LH_C f⁹(h¹⁰) map_lz₁₀(f⁹, t¹⁰)]: 571
//│ 	[LH_N]: 572
//│ 	[LH_C enumFrom₀₀(2) map_lz₁₀(zipWith_lz_lz₀₀((fun a¹¹ -> (fun b⁷ -> (a¹¹ * b⁷))), enumFrom₁₀(2)), powers₀₀)]: 1000
//│ case force⁰(ls¹⁴) of {LH_C h¹⁶ t¹⁶ => if (n³ == 0) then h¹⁶ else atIndex_lz₀₀((n³ - 1), t¹⁶) | LH_N  => error⁰}: 939 --->
//│ 	[LH_C f¹⁴(h¹⁵) map_lz₀₀(f¹⁴, t¹⁵)]: 895
//│ 	[LH_N]: 896
//│ case ls¹⁵ of {LH_C h¹⁷ t¹⁷ => (h¹⁷ + sum₀₀(t¹⁷)) | LH_N  => 0}: 952 --->
//│ 	[LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 857
//│ 	[LH_N]: 862
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_P2 hx⁵ hy⁵]: 509 --->
//│ 	case _lh_listcomp_fun_ls_h¹ of {LH_P2 _lh_bernoulli_LH_P2_0¹ _lh_bernoulli_LH_P2_1¹ => [LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 861
//│ [LH_C [LH_P2 hx⁵ hy⁵] zip_nl_lz₀₀(tx⁵, ty⁵)]: 515 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {LH_P2 _lh_bernoulli_LH_P2_0¹ _lh_bernoulli_LH_P2_1¹ => [LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => [LH_N]}: 863
//│ [LH_N]: 516 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {LH_P2 _lh_bernoulli_LH_P2_0¹ _lh_bernoulli_LH_P2_1¹ => [LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => [LH_N]}: 863
//│ [LH_N]: 518 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {LH_P2 _lh_bernoulli_LH_P2_0¹ _lh_bernoulli_LH_P2_1¹ => [LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => [LH_N]}: 863
//│ [LH_C h¹³ mappend₀₀(t¹³, ys⁹)]: 622 --->
//│ 	case xs⁸ of {LH_C hx⁷ tx⁷ => case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 611
//│ [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)]: 643 --->
//│ 	case ls¹⁰ of {LH_C h¹¹ t¹¹ => (h¹¹ + sum₁₀(t¹¹)) | LH_N  => 0}: 586
//│ [LH_N]: 644 --->
//│ 	case ls¹⁰ of {LH_C h¹¹ t¹¹ => (h¹¹ + sum₁₀(t¹¹)) | LH_N  => 0}: 586
//│ [LH_N]: 646 --->
//│ 	case ls¹⁰ of {LH_C h¹¹ t¹¹ => (h¹¹ + sum₁₀(t¹¹)) | LH_N  => 0}: 586
//│ [LH_C a⁶ enumFromTo₀₀((a⁶ + 1), b⁴)]: 666 --->
//│ 	case xs⁶ of {LH_C hx⁵ tx⁵ => case force⁰(ys⁶) of {LH_C hy⁵ ty⁵ => [LH_C [LH_P2 hx⁵ hy⁵] zip_nl_lz₀₀(tx⁵, ty⁵)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 519
//│ [LH_N]: 667 --->
//│ 	case xs⁶ of {LH_C hx⁵ tx⁵ => case force⁰(ys⁶) of {LH_C hy⁵ ty⁵ => [LH_C [LH_P2 hx⁵ hy⁵] zip_nl_lz₀₀(tx⁵, ty⁵)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 519
//│ [LH_C f¹³(hx⁹, hy⁹) zipWith_lz_lz₁₀(f¹³, tx⁹, ty⁹)]: 732 --->
//│ 	case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)] | LH_N  => [LH_N]}: 645
//│ [LH_N]: 733 --->
//│ 	case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)] | LH_N  => [LH_N]}: 645
//│ [LH_N]: 735 --->
//│ 	case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)] | LH_N  => [LH_N]}: 645
//│ [LH_N]: 763 --->
//│ 	case xs⁸ of {LH_C hx⁷ tx⁷ => case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 611
//│ [LH_C 0 [LH_N]]: 764 --->
//│ 	case xs⁸ of {LH_C hx⁷ tx⁷ => case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 611
//│ [LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 857 --->
//│ 	case ls¹⁵ of {LH_C h¹⁷ t¹⁷ => (h¹⁷ + sum₀₀(t¹⁷)) | LH_N  => 0}: 952
//│ [LH_N]: 862 --->
//│ 	case ls¹⁵ of {LH_C h¹⁷ t¹⁷ => (h¹⁷ + sum₀₀(t¹⁷)) | LH_N  => 0}: 952
//│ [LH_C f¹⁴(h¹⁵) map_lz₀₀(f¹⁴, t¹⁵)]: 895 --->
//│ 	case force⁰(ls¹⁴) of {LH_C h¹⁶ t¹⁶ => if (n³ == 0) then h¹⁶ else atIndex_lz₀₀((n³ - 1), t¹⁶) | LH_N  => error⁰}: 939
//│ [LH_N]: 896 --->
//│ 	case force⁰(ls¹⁴) of {LH_C h¹⁶ t¹⁶ => if (n³ == 0) then h¹⁶ else atIndex_lz₀₀((n³ - 1), t¹⁶) | LH_N  => error⁰}: 939
//│ [LH_C a¹⁰ enumFrom₁₀((a¹⁰ + 1))]: 963 --->
//│ 	case force⁰(xs⁷) of {LH_C hx⁶ tx⁶ => case force⁰(ys⁷) of {LH_C hy⁶ ty⁶ => [LH_C f⁸(hx⁶, hy⁶) zipWith_lz_lz₀₀(f⁸, tx⁶, ty⁶)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 550
//│ [LH_C x³ iterate₀₀(f¹⁵, f¹⁵(x³))]: 975 --->
//│ 	case force⁰(xs¹¹) of {LH_C hx⁹ tx⁹ => case force⁰(ys¹¹) of {LH_C hy⁹ ty⁹ => [LH_C f¹³(hx⁹, hy⁹) zipWith_lz_lz₁₀(f¹³, tx⁹, ty⁹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 736
//│ ------------------
//│ case xs⁶ of {LH_C hx⁵ tx⁵ => case force⁰(ys⁶) of {LH_C hy⁵ ty⁵ => [LH_C [LH_P2 hx⁵ hy⁵] zip_nl_lz₀₀(tx⁵, ty⁵)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 519 --->
//│ 	[LH_C a⁶ enumFromTo₀₀((a⁶ + 1), b⁴)]: 666
//│ 	[LH_N]: 667
//│ case force⁰(xs⁷) of {LH_C hx⁶ tx⁶ => case force⁰(ys⁷) of {LH_C hy⁶ ty⁶ => [LH_C f⁸(hx⁶, hy⁶) zipWith_lz_lz₀₀(f⁸, tx⁶, ty⁶)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 550 --->
//│ 	[LH_C a¹⁰ enumFrom₁₀((a¹⁰ + 1))]: 963
//│ case ls¹⁰ of {LH_C h¹¹ t¹¹ => (h¹¹ + sum₁₀(t¹¹)) | LH_N  => 0}: 586 --->
//│ 	[LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)]: 643
//│ 	[LH_N]: 644
//│ 	[LH_N]: 646
//│ case xs⁸ of {LH_C hx⁷ tx⁷ => case ys⁸ of {LH_C hy⁷ ty⁷ => [LH_C f¹⁰(hx⁷, hy⁷) zipWith₀₀(f¹⁰, tx⁷, ty⁷)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 611 --->
//│ 	[LH_C h¹³ mappend₀₀(t¹³, ys⁹)]: 622
//│ 	[LH_N]: 763
//│ 	[LH_C 0 [LH_N]]: 764
//│ case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => [LH_C f¹¹(hx⁸, hy⁸) zipWith_lz_nl₀₀(f¹¹, tx⁸, ty⁸)] | LH_N  => [LH_N]}: 645 --->
//│ 	[LH_C f¹³(hx⁹, hy⁹) zipWith_lz_lz₁₀(f¹³, tx⁹, ty⁹)]: 732
//│ 	[LH_N]: 733
//│ 	[LH_N]: 735
//│ case force⁰(xs¹¹) of {LH_C hx⁹ tx⁹ => case force⁰(ys¹¹) of {LH_C hy⁹ ty⁹ => [LH_C f¹³(hx⁹, hy⁹) zipWith_lz_lz₁₀(f¹³, tx⁹, ty⁹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 736 --->
//│ 	[LH_C x³ iterate₀₀(f¹⁵, f¹⁵(x³))]: 975
//│ case _lh_listcomp_fun_ls_h¹ of {LH_P2 _lh_bernoulli_LH_P2_0¹ _lh_bernoulli_LH_P2_1¹ => [LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 861 --->
//│ 	[LH_P2 hx⁵ hy⁵]: 509
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {LH_P2 _lh_bernoulli_LH_P2_0¹ _lh_bernoulli_LH_P2_1¹ => [LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => [LH_N]}: 863 --->
//│ 	[LH_C [LH_P2 hx⁵ hy⁵] zip_nl_lz₀₀(tx⁵, ty⁵)]: 515
//│ 	[LH_N]: 516
//│ 	[LH_N]: 518
//│ case force⁰(ls¹⁴) of {LH_C h¹⁶ t¹⁶ => if (n³ == 0) then h¹⁶ else atIndex_lz₀₀((n³ - 1), t¹⁶) | LH_N  => error⁰}: 939 --->
//│ 	[LH_C f¹⁴(h¹⁵) map_lz₀₀(f¹⁴, t¹⁵)]: 895
//│ 	[LH_N]: 896
//│ case ls¹⁵ of {LH_C h¹⁷ t¹⁷ => (h¹⁷ + sum₀₀(t¹⁷)) | LH_N  => 0}: 952 --->
//│ 	[LH_C ((sum₁₀(zipWith_lz_nl₀₀((fun a⁸ -> (fun b⁶ -> (a⁸ * b⁶))), powers¹, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 857
//│ 	[LH_N]: 862
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testBernoulli₀₀(1000)
//│ def testBernoulli₀₀(_lh_testBernoulli_arg1²) = 
//│ 	bernoulli₀₀(_lh_testBernoulli_arg1²)
//│ 	where
//│ 	def bernoulli₀₀(_lh_bernoulli_arg1²) = 
//│ 		case _lh_bernoulli_arg1² of {
//│ 			0  => 1
//│ 			| 1  => (0 - (1 / 2))
//│ 			| _  => if ((_lh_bernoulli_arg1² % 2) == 1) then 0 else 
//│ 				let powers⁶ = atIndex_lz₀₀((_lh_bernoulli_arg1² - 1), force⁰(neg_powers₀₀))
//│ 				in (((0 - 1) / 2) + sum₀₀(
//│ 					let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(powers⁶, _lh_listcomp_fun⁶))
//│ 					in _lh_listcomp_fun⁶(zip_nl_lz₀₀(enumFromTo₀₀(2, _lh_bernoulli_arg1²), pascal₀₀))))}
//│ 		where
//│ 		def atIndex_lz₀₀(n⁷, ls²³) = 
//│ 			if (n⁷ < 0) then error⁰ else force⁰(ls²³, n⁷)
//│ 		def enumFromTo₀₀(a¹³, b⁹) = 
//│ 			if (a¹³ <= b⁹) then 
//│ 				let hx¹¹ = a¹³
//│ 				in let tx¹¹ = enumFromTo₀₀((a¹³ + 1), b⁹)
//│ 				in (fun ys¹⁶ -> case force⁰(ys¹⁶) of {
//│ 					LH_C hy⁵ ty⁵ => 
//│ 						let _lh_listcomp_fun_ls_h² = 	
//│ 							let _lh_bernoulli_LH_P2_0² = hx¹¹
//│ 							in let _lh_bernoulli_LH_P2_1² = hy⁵
//│ 							in (fun powers³ -> (fun _lh_listcomp_fun³ -> (fun _lh_listcomp_fun_ls_t³ -> 
//│ 								let h¹⁸ = ((sum₁₀(zipWith_lz_nl₀₀((fun a¹⁴ -> (fun b¹⁰ -> (a¹⁴ * b¹⁰))), powers³, tail₀₀(tail₁₀(_lh_bernoulli_LH_P2_1²)))) - _lh_bernoulli_LH_P2_0²) / (_lh_bernoulli_LH_P2_0² + 1))
//│ 								in let t¹⁸ = _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 								in (h¹⁸ + sum₀₀(t¹⁸)))))
//│ 						in let _lh_listcomp_fun_ls_t² = zip_nl_lz₀₀(tx¹¹, ty⁵)
//│ 						in (fun powers² -> (fun _lh_listcomp_fun² -> _lh_listcomp_fun_ls_h²(powers², _lh_listcomp_fun², _lh_listcomp_fun_ls_t²)))
//│ 					| LH_N  => (fun powers⁴ -> (fun _lh_listcomp_fun⁴ -> 0))}) else (fun ys¹⁷ -> (fun powers⁵ -> (fun _lh_listcomp_fun⁵ -> 0)))
//│ 		def neg_powers₀₀ = 
//│ 			lazy⁰(map_lz₀₀(zipWith_lz_lz₁₀((fun n⁶ -> (fun x⁴ -> if n⁶ then x⁴ else (0 - x⁴))), iterate₀₀(not⁰, [True])), powers₀₀))
//│ 			where
//│ 			def iterate₀₀(f²⁷, x⁵) = 
//│ 				lazy⁰(
//│ 					let hx¹⁴ = x⁵
//│ 					in let tx¹⁴ = iterate₀₀(f²⁷, f²⁷(x⁵))
//│ 					in (fun ys²⁴ -> (fun f²⁸ -> case force⁰(ys²⁴) of {
//│ 						LH_C hy⁹ ty⁹ => 
//│ 							let hx¹⁵ = f²⁸(hx¹⁴, hy⁹)
//│ 							in let tx¹⁵ = zipWith_lz_lz₁₀(f²⁸, tx¹⁴, ty⁹)
//│ 							in (fun hy¹⁰ -> (fun ty¹⁰ -> (fun f²⁹ -> 
//│ 								let h²⁰ = f²⁹(hx¹⁵, hy¹⁰)
//│ 								in let t²⁰ = zipWith_lz_nl₀₀(f²⁹, tx¹⁵, ty¹⁰)
//│ 								in (h²⁰ + sum₁₀(t²⁰)))))
//│ 						| LH_N  => (fun hy¹¹ -> (fun ty¹¹ -> (fun f³⁰ -> 0)))})))
//│ 			def map_lz₀₀(f¹⁹, ls¹⁷) = 
//│ 				lazy⁰(case force⁰(ls¹⁷) of {
//│ 					LH_C h¹⁵ t¹⁵ => 
//│ 						let h¹⁹ = f¹⁹(h¹⁵)
//│ 						in let t¹⁹ = map_lz₀₀(f¹⁹, t¹⁵)
//│ 						in (fun n⁴ -> if (n⁴ == 0) then h¹⁹ else atIndex_lz₀₀((n⁴ - 1), t¹⁹))
//│ 					| LH_N  => (fun n⁵ -> error⁰)})
//│ 			def powers₀₀ = 
//│ 				lazy⁰([LH_C enumFrom₀₀(2) map_lz₁₀(zipWith_lz_lz₀₀((fun a¹⁷ -> (fun b¹¹ -> (a¹⁷ * b¹¹))), enumFrom₁₀(2)), powers₀₀)])
//│ 				where
//│ 				def enumFrom₀₀(a¹⁵) = 
//│ 					lazy⁰([LH_C a¹⁵ enumFrom₀₀((a¹⁵ + 1))])
//│ 				def enumFrom₁₀(a¹⁶) = 
//│ 					lazy⁰(
//│ 						let hx¹³ = a¹⁶
//│ 						in let tx¹³ = enumFrom₁₀((a¹⁶ + 1))
//│ 						in (fun ys²³ -> (fun f²⁶ -> case force⁰(ys²³) of {
//│ 							LH_C hy⁶ ty⁶ => [LH_C f²⁶(hx¹³, hy⁶) zipWith_lz_lz₀₀(f²⁶, tx¹³, ty⁶)]
//│ 							| LH_N  => [LH_N]})))
//│ 				def map_lz₁₀(f²⁰, ls¹⁸) = 
//│ 					lazy⁰(case force⁰(ls¹⁸) of {
//│ 						LH_C h¹⁰ t¹⁰ => [LH_C f²⁰(h¹⁰) map_lz₁₀(f²⁰, t¹⁰)]
//│ 						| LH_N  => [LH_N]})
//│ 				def zipWith_lz_lz₀₀(f²⁴, xs¹⁶, ys²⁰) = 
//│ 					lazy⁰(force⁰(xs¹⁶, ys²⁰, f²⁴))
//│ 			def zipWith_lz_lz₁₀(f²¹, xs¹⁴, ys¹⁸) = 
//│ 				lazy⁰(force⁰(xs¹⁴, ys¹⁸, f²¹))
//│ 		def pascal₀₀ = 
//│ 			lazy⁰([LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz₂₀((fun line² -> zipWith₀₀((fun a¹² -> (fun b⁸ -> (a¹² + b⁸))), mappend₀₀(line², 
//│ 				let hx¹⁰ = 0
//│ 				in let tx¹⁰ = (fun ys¹⁵ -> (fun f¹⁸ -> [LH_N]))
//│ 				in (fun ys¹⁴ -> (fun f¹⁷ -> case ys¹⁴ of {
//│ 					LH_C hy⁷ ty⁷ => [LH_C f¹⁷(hx¹⁰, hy⁷) zipWith₀₀(f¹⁷, tx¹⁰, ty⁷)]
//│ 					| LH_N  => [LH_N]}))), [LH_C 0 line²])), pascal₀₀)])
//│ 			where
//│ 			def map_lz₂₀(f²³, ls²¹) = 
//│ 				lazy⁰(case force⁰(ls²¹) of {
//│ 					LH_C h¹⁴ t¹⁴ => [LH_C f²³(h¹⁴) map_lz₂₀(f²³, t¹⁴)]
//│ 					| LH_N  => [LH_N]})
//│ 			def mappend₀₀(xs¹⁷, ys²¹) = 
//│ 				case xs¹⁷ of {
//│ 					LH_C h¹³ t¹³ => 
//│ 						let hx¹² = h¹³
//│ 						in let tx¹² = mappend₀₀(t¹³, ys²¹)
//│ 						in (fun ys²² -> (fun f²⁵ -> case ys²² of {
//│ 							LH_C hy⁷ ty⁷ => [LH_C f²⁵(hx¹², hy⁷) zipWith₀₀(f²⁵, tx¹², ty⁷)]
//│ 							| LH_N  => [LH_N]}))
//│ 					| LH_N  => ys²¹}
//│ 			def zipWith₀₀(f¹⁶, xs¹², ys¹²) = 
//│ 				xs¹²(ys¹², f¹⁶)
//│ 		def sum₀₀(ls¹⁹) = 
//│ 			ls¹⁹
//│ 		def sum₁₀(ls²⁰) = 
//│ 			ls²⁰
//│ 		def tail₀₀(ls²²) = 
//│ 			case ls²² of {
//│ 				LH_C h⁹ t⁹ => t⁹
//│ 				| LH_N  => error⁰}
//│ 		def tail₁₀(ls¹⁶) = 
//│ 			case ls¹⁶ of {
//│ 				LH_C h¹² t¹² => t¹²
//│ 				| LH_N  => error⁰}
//│ 		def zipWith_lz_nl₀₀(f²², xs¹⁵, ys¹⁹) = 
//│ 			case ys¹⁹ of {
//│ 				LH_C hy⁸ ty⁸ => force⁰(xs¹⁵, hy⁸, ty⁸, f²²)
//│ 				| LH_N  => 0}
//│ 		def zip_nl_lz₀₀(xs¹³, ys¹³) = 
//│ 			xs¹³(ys¹³)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ cannot generate benchmark files: Internal Error: benchmark requires a method of name `testxxx` calling a value wrapped in `primId`
//│  and if there are manually fused benchmarks, there should be a call to `testManual`with exact the same parameter following the `testxxx`
//│ 
//│ let rec atIndex_lz_d0_d0 n_3 ls_7 =
//│   (if (n_3 < 0) then
//│     (failwith "error")
//│   else
//│     ((Lazy.force ls_7) n_3))
//│ and bernoulli_d0_d0 _lh_bernoulli_arg1_0 =
//│   (match _lh_bernoulli_arg1_0 with
//│     | 0 -> 
//│       1
//│     | 1 -> 
//│       (0 - (1 / 2))
//│     | _ -> 
//│       (if ((_lh_bernoulli_arg1_0 mod 2) = 1) then
//│         0
//│       else
//│         (let rec powers_4 = ((atIndex_lz_d0_d0 (_lh_bernoulli_arg1_0 - 1)) (Lazy.force neg_powers_d0_d0)) in
//│           (((0 - 1) / 2) + (sum_d0_d0 (let rec _lh_listcomp_fun_4 = (fun _lh_listcomp_fun_para_0 -> 
//│             ((_lh_listcomp_fun_para_0 powers_4) _lh_listcomp_fun_4)) in
//│             (_lh_listcomp_fun_4 ((zip_nl_lz_d0_d0 ((enumFromTo_d0_d0 2) _lh_bernoulli_arg1_0)) pascal_d0_d0))))))))
//│ and enumFromTo_d0_d0 a_1 b_1 =
//│   (if (a_1 <= b_1) then
//│     (let rec hx_1 = a_1 in
//│       (let rec tx_1 = ((enumFromTo_d0_d0 (a_1 + 1)) b_1) in
//│         (fun ys_4 -> 
//│           (match (Lazy.force ys_4) with
//│             | `LH_C(hy_1, ty_1) -> 
//│               (let rec _lh_listcomp_fun_ls_h_0 = (let rec _lh_bernoulli_LH_P2_0_0 = hx_1 in
//│                 (let rec _lh_bernoulli_LH_P2_1_0 = hy_1 in
//│                   (fun powers_0 _lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0 -> 
//│                     (let rec h_1 = (((sum_d1_d0 (((zipWith_lz_nl_d0_d0 (fun a_2 b_2 -> 
//│                       (a_2 * b_2))) powers_0) (tail_d0_d0 (tail_d1_d0 _lh_bernoulli_LH_P2_1_0)))) - _lh_bernoulli_LH_P2_0_0) / (_lh_bernoulli_LH_P2_0_0 + 1)) in
//│                       (let rec t_1 = (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0) in
//│                         (h_1 + (sum_d0_d0 t_1))))))) in
//│                 (let rec _lh_listcomp_fun_ls_t_1 = ((zip_nl_lz_d0_d0 tx_1) ty_1) in
//│                   (fun powers_1 _lh_listcomp_fun_1 -> 
//│                     (((_lh_listcomp_fun_ls_h_0 powers_1) _lh_listcomp_fun_1) _lh_listcomp_fun_ls_t_1))))
//│             | `LH_N -> 
//│               (fun powers_2 _lh_listcomp_fun_2 -> 
//│                 0)))))
//│   else
//│     (fun ys_5 powers_3 _lh_listcomp_fun_3 -> 
//│       0))
//│ and enumFrom_d0_d0 a_3 =
//│   (lazy (`LH_C(a_3, (enumFrom_d0_d0 (a_3 + 1)))))
//│ and enumFrom_d1_d0 a_4 =
//│   (lazy (let rec hx_3 = a_4 in
//│     (let rec tx_3 = (enumFrom_d1_d0 (a_4 + 1)) in
//│       (fun ys_1_1 f_1_0 -> 
//│         (match (Lazy.force ys_1_1) with
//│           | `LH_C(hy_4, ty_4) -> 
//│             (`LH_C(((f_1_0 hx_3) hy_4), (((zipWith_lz_lz_d0_d0 f_1_0) tx_3) ty_4)))
//│           | `LH_N -> 
//│             (`LH_N))))))
//│ and iterate_d0_d0 f_1_1 x_1 =
//│   (lazy (let rec hx_4 = x_1 in
//│     (let rec tx_4 = ((iterate_d0_d0 f_1_1) (f_1_1 x_1)) in
//│       (fun ys_1_2 f_1_2 -> 
//│         (match (Lazy.force ys_1_2) with
//│           | `LH_C(hy_5, ty_5) -> 
//│             (let rec hx_5 = ((f_1_2 hx_4) hy_5) in
//│               (let rec tx_5 = (((zipWith_lz_lz_d1_d0 f_1_2) tx_4) ty_5) in
//│                 (fun hy_6 ty_6 f_1_3 -> 
//│                   (let rec h_8 = ((f_1_3 hx_5) hy_6) in
//│                     (let rec t_8 = (((zipWith_lz_nl_d0_d0 f_1_3) tx_5) ty_6) in
//│                       (h_8 + (sum_d1_d0 t_8)))))))
//│           | `LH_N -> 
//│             (fun hy_7 ty_7 f_1_4 -> 
//│               0))))))
//│ and map_lz_d0_d0 f_3 ls_1 =
//│   (lazy (match (Lazy.force ls_1) with
//│     | `LH_C(h_2, t_2) -> 
//│       (let rec h_3 = (f_3 h_2) in
//│         (let rec t_3 = ((map_lz_d0_d0 f_3) t_2) in
//│           (fun n_0 -> 
//│             (if (n_0 = 0) then
//│               h_3
//│             else
//│               ((atIndex_lz_d0_d0 (n_0 - 1)) t_3)))))
//│     | `LH_N -> 
//│       (fun n_1 -> 
//│         (failwith "error"))))
//│ and map_lz_d1_d0 f_4 ls_2 =
//│   (lazy (match (Lazy.force ls_2) with
//│     | `LH_C(h_4, t_4) -> 
//│       (`LH_C((f_4 h_4), ((map_lz_d1_d0 f_4) t_4)))
//│     | `LH_N -> 
//│       (`LH_N)))
//│ and map_lz_d2_d0 f_7 ls_5 =
//│   (lazy (match (Lazy.force ls_5) with
//│     | `LH_C(h_5, t_5) -> 
//│       (`LH_C((f_7 h_5), ((map_lz_d2_d0 f_7) t_5)))
//│     | `LH_N -> 
//│       (`LH_N)))
//│ and mappend_d0_d0 xs_5 ys_9 =
//│   (match xs_5 with
//│     | `LH_C(h_7, t_7) -> 
//│       (let rec hx_2 = h_7 in
//│         (let rec tx_2 = ((mappend_d0_d0 t_7) ys_9) in
//│           (fun ys_1_0 f_9 -> 
//│             (match ys_1_0 with
//│               | `LH_C(hy_3, ty_3) -> 
//│                 (`LH_C(((f_9 hx_2) hy_3), (((zipWith_d0_d0 f_9) tx_2) ty_3)))
//│               | `LH_N -> 
//│                 (`LH_N)))))
//│     | `LH_N -> 
//│       ys_9)
//│ and neg_powers_d0_d0 =
//│   (lazy ((map_lz_d0_d0 ((zipWith_lz_lz_d1_d0 (fun n_2 x_0 -> 
//│     (if n_2 then
//│       x_0
//│     else
//│       (0 - x_0)))) ((iterate_d0_d0 not) true))) powers_d0_d0))
//│ and pascal_d0_d0 =
//│   (lazy (`LH_C((`LH_C(1, (`LH_C(2, (`LH_C(1, (`LH_N))))))), ((map_lz_d2_d0 (fun line_0 -> 
//│     (((zipWith_d0_d0 (fun a_0 b_0 -> 
//│       (a_0 + b_0))) ((mappend_d0_d0 line_0) (let rec hx_0 = 0 in
//│       (let rec tx_0 = (fun ys_2 f_1 -> 
//│         (`LH_N)) in
//│         (fun ys_3 f_2 -> 
//│           (match ys_3 with
//│             | `LH_C(hy_0, ty_0) -> 
//│               (`LH_C(((f_2 hx_0) hy_0), (((zipWith_d0_d0 f_2) tx_0) ty_0)))
//│             | `LH_N -> 
//│               (`LH_N))))))) (`LH_C(0, line_0))))) pascal_d0_d0))))
//│ and powers_d0_d0 =
//│   (lazy (`LH_C((enumFrom_d0_d0 2), ((map_lz_d1_d0 ((zipWith_lz_lz_d0_d0 (fun a_5 b_3 -> 
//│     (a_5 * b_3))) (enumFrom_d1_d0 2))) powers_d0_d0))))
//│ and sum_d0_d0 ls_3 =
//│   ls_3
//│ and sum_d1_d0 ls_4 =
//│   ls_4
//│ and tail_d0_d0 ls_6 =
//│   (match ls_6 with
//│     | `LH_C(h_6, t_6) -> 
//│       t_6
//│     | `LH_N -> 
//│       (failwith "error"))
//│ and tail_d1_d0 ls_0 =
//│   (match ls_0 with
//│     | `LH_C(h_0, t_0) -> 
//│       t_0
//│     | `LH_N -> 
//│       (failwith "error"))
//│ and testBernoulli_d0_d0 _lh_testBernoulli_arg1_0 =
//│   (bernoulli_d0_d0 _lh_testBernoulli_arg1_0)
//│ and zipWith_lz_lz_d0_d0 f_8 xs_4 ys_8 =
//│   (lazy (((Lazy.force xs_4) ys_8) f_8))
//│ and zipWith_lz_lz_d1_d0 f_5 xs_2 ys_6 =
//│   (lazy (((Lazy.force xs_2) ys_6) f_5))
//│ and zipWith_lz_nl_d0_d0 f_6 xs_3 ys_7 =
//│   (match ys_7 with
//│     | `LH_C(hy_2, ty_2) -> 
//│       ((((Lazy.force xs_3) hy_2) ty_2) f_6)
//│     | `LH_N -> 
//│       0)
//│ and zipWith_d0_d0 f_0 xs_0 ys_0 =
//│   ((xs_0 ys_0) f_0)
//│ and zip_nl_lz_d0_d0 xs_1 ys_1 =
//│   (xs_1 ys_1);;
//│ (testBernoulli_d0_d0 1000)
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

