:NewParser
:ParseOnly

// NOTE: memory allocation negative numbers??
// -- powers = [[r^n | r<-[2..]] | n<-1..]
// powers :: [[Integer]]
// -- powers = [[(-1)^r * r^n | r<-[2..]] | n<-1..]
// neg_powers :: [[Integer]]
// pascal:: [[Integer]]
:lhInHaskell
:lhGenOCaml
powers = lazy ([2..] : (map_lz (\p -> zipWith_lz_lz (\a b -> a * b) (head_lz powers) p) powers))
neg_powers =
  lazy (map_lz (zipWith_lz_lz (\n x -> if n then x else (0-x)) (iterate not True)) powers)
pascal = lazy ([1,2,1] : map_lz (\line -> zipWith (\a b -> a + b) (mappend line [0]) (0:line)) pascal)
bernoulli 0 = 1
bernoulli 1 = 0 - (1 / 2)
bernoulli n =
  if ((n `mod` 2) == 1) then
    0
  else
    let powers = (atIndex_lz (n - 1) (force neg_powers)) in
      ((0-1)/2) + sum [ ((sum $ zipWith_lz_nl (\a b -> a * b) powers (tail $ tail combs)) - k) / (k+1) | (k,combs) <- zip_nl_lz [2..n] pascal ]
testBernoulli_nofib n = bernoulli n
testBernoulli_nofib $ primId 1500
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testBernoulli_nofib_lh^418(primId⁰(1500))
//│ def atIndex_lz_lh(n⁰, ls⁴) = if (n⁰ < 0) then error⁰ else case force⁰(ls⁴) of {
//│ 	LH_C h⁵ t⁵ => if (n⁰ == 0) then h⁵ else atIndex_lz_lh^207((n⁰ - 1), t⁵)
//│ 	| LH_N  => error⁰}
//│ def bernoulli_lh(_lh_bernoulli_arg1⁰) = case _lh_bernoulli_arg1⁰ of {
//│ 	0  => 1
//│ 	| 1  => (0 - (1 / 2))
//│ 	| _  => if ((_lh_bernoulli_arg1⁰ % 2) == 1) then 0 else 
//│ 		let powers⁰ = atIndex_lz_lh^279((_lh_bernoulli_arg1⁰ - 1), force⁰(neg_powers_lh^287))
//│ 		in (((0 - 1) / 2) + sum_lh^301(
//│ 			let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 				LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {
//│ 					LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh^306(zipWith_lz_nl_lh^307((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh^318(tail_lh^319(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 					| _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}
//│ 				| LH_N  => [LH_N]})
//│ 			in _lh_listcomp_fun⁰(zip_nl_lz_lh^347(enumFromTo_lh^348(2, _lh_bernoulli_arg1⁰), pascal_lh^354))))}
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^130((a⁰ + 1), b⁰)] else [LH_N]
//│ def enumFrom_lh(a¹) = lazy⁰([LH_C a¹ enumFrom_lh^146((a¹ + 1))])
//│ def head_lz_lh(ls¹) = case force⁰(ls¹) of {
//│ 	LH_C h¹ t¹ => h¹
//│ 	| LH_N  => error⁰}
//│ def iterate_lh(f⁴, x⁰) = lazy⁰([LH_C x⁰ iterate_lh^158(f⁴, f⁴(x⁰))])
//│ def map_lz_lh(f⁰, ls⁰) = lazy⁰(case force⁰(ls⁰) of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh^8(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]})
//│ def mappend_lh(xs⁴, ys⁴) = case xs⁴ of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh^171(t³, ys⁴)]
//│ 	| LH_N  => ys⁴}
//│ def neg_powers_lh = lazy⁰(map_lz_lh^395(zipWith_lz_lz_lh^396((fun n¹ -> (fun x¹ -> if n¹ then x¹ else (0 - x¹))), iterate_lh^408(not⁰, [True])), powers_lh^415))
//│ def pascal_lh = lazy⁰([LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz_lh^230((fun line⁰ -> zipWith_lh^231((fun a² -> (fun b¹ -> (a² + b¹))), mappend_lh^240(line⁰, [LH_C 0 [LH_N]]), [LH_C 0 line⁰])), pascal_lh^254)])
//│ def powers_lh = lazy⁰([LH_C enumFrom_lh^365(2) map_lz_lh^368((fun p⁰ -> zipWith_lz_lz_lh^369((fun a⁴ -> (fun b³ -> (a⁴ * b³))), head_lz_lh^378(powers_lh^379), p⁰)), powers_lh^386)])
//│ def sum_lh(ls³) = case ls³ of {
//│ 	LH_C h⁴ t⁴ => (h⁴ + sum_lh^185(t⁴))
//│ 	| LH_N  => 0}
//│ def tail_lh(ls²) = case ls² of {
//│ 	LH_C h² t² => t²
//│ 	| LH_N  => error⁰}
//│ def testBernoulli_nofib_lh(_lh_testBernoulli_nofib_arg1⁰) = bernoulli_lh^390(_lh_testBernoulli_nofib_arg1⁰)
//│ def zipWith_lh(f¹, xs¹, ys¹) = case xs¹ of {
//│ 	LH_C hx¹ tx¹ => case ys¹ of {
//│ 		LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh^45(f¹, tx¹, ty¹)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lz_lz_lh(f³, xs³, ys³) = lazy⁰(case force⁰(xs³) of {
//│ 	LH_C hx³ tx³ => case force⁰(ys³) of {
//│ 		LH_C hy³ ty³ => [LH_C f³(hx³, hy³) zipWith_lz_lz_lh^96(f³, tx³, ty³)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_nl_lh(f², xs², ys²) = case ys² of {
//│ 	LH_C hy² ty² => case force⁰(xs²) of {
//│ 		LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh^69(f², tx², ty²)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zip_nl_lz_lh(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_nl_lz_lh^26(tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec zipWith_lz_nl_lh f_2 xs_2 ys_2 =
//│ 		  (match ys_2 with
//│ 		    | `LH_C(hy_2, ty_2) -> 
//│ 		      (match (Lazy.force xs_2) with
//│ 		        | `LH_C(hx_2, tx_2) -> 
//│ 		          (`LH_C(((f_2 hx_2) hy_2), (((zipWith_lz_nl_lh f_2) tx_2) ty_2)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec enumFromTo_lh a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec map_lz_lh f_0 ls_0 =
//│ 		  (lazy (match (Lazy.force ls_0) with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C((f_0 h_0), ((map_lz_lh f_0) t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec mappend_lh xs_4 ys_4 =
//│ 		  (match xs_4 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      (`LH_C(h_3, ((mappend_lh t_3) ys_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_4);;
//│ 		let rec zipWith_lh f_1 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(hx_1, tx_1) -> 
//│ 		      (match ys_1 with
//│ 		        | `LH_C(hy_1, ty_1) -> 
//│ 		          (`LH_C(((f_1 hx_1) hy_1), (((zipWith_lh f_1) tx_1) ty_1)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec zipWith_lz_lz_lh f_3 xs_3 ys_3 =
//│ 		  (lazy (match (Lazy.force xs_3) with
//│ 		    | `LH_C(hx_3, tx_3) -> 
//│ 		      (match (Lazy.force ys_3) with
//│ 		        | `LH_C(hy_3, ty_3) -> 
//│ 		          (`LH_C(((f_3 hx_3) hy_3), (((zipWith_lz_lz_lh f_3) tx_3) ty_3)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec iterate_lh f_4 x_0 =
//│ 		  (lazy (`LH_C(x_0, ((iterate_lh f_4) (f_4 x_0)))));;
//│ 		let rec head_lz_lh ls_1 =
//│ 		  (match (Lazy.force ls_1) with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      h_1
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec enumFrom_lh a_1 =
//│ 		  (lazy (`LH_C(a_1, (enumFrom_lh (a_1 + 1)))));;
//│ 		let rec tail_lh ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      t_2
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec zip_nl_lz_lh xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(hx_0, tx_0) -> 
//│ 		      (match (Lazy.force ys_0) with
//│ 		        | `LH_C(hy_0, ty_0) -> 
//│ 		          (`LH_C((`LH_P2(hx_0, hy_0)), ((zip_nl_lz_lh tx_0) ty_0)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec atIndex_lz_lh n_0 ls_4 =
//│ 		  (if (n_0 < 0) then
//│ 		    (failwith "error")
//│ 		  else
//│ 		    (match (Lazy.force ls_4) with
//│ 		      | `LH_C(h_5, t_5) -> 
//│ 		        (if (n_0 = 0) then
//│ 		          h_5
//│ 		        else
//│ 		          ((atIndex_lz_lh (n_0 - 1)) t_5))
//│ 		      | `LH_N -> 
//│ 		        (failwith "error")));;
//│ 		let rec sum_lh ls_3 =
//│ 		  (match ls_3 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      (h_4 + (sum_lh t_4))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec pascal_lh =
//│ 		  (lazy (`LH_C((`LH_C(1, (`LH_C(2, (`LH_C(1, (`LH_N))))))), ((map_lz_lh (fun line_0 -> 
//│ 		    (((zipWith_lh (fun a_2 b_1 -> 
//│ 		      (a_2 + b_1))) ((mappend_lh line_0) (`LH_C(0, (`LH_N))))) (`LH_C(0, line_0))))) pascal_lh))));;
//│ 		let rec powers_lh =
//│ 		  (lazy (`LH_C((enumFrom_lh 2), ((map_lz_lh (fun p_0 -> 
//│ 		    (((zipWith_lz_lz_lh (fun a_4 b_3 -> 
//│ 		      (a_4 * b_3))) (head_lz_lh powers_lh)) p_0))) powers_lh))));;
//│ 		let rec neg_powers_lh =
//│ 		  (lazy ((map_lz_lh ((zipWith_lz_lz_lh (fun n_1 x_1 -> 
//│ 		    (if n_1 then
//│ 		      x_1
//│ 		    else
//│ 		      (0 - x_1)))) ((iterate_lh not) true))) powers_lh));;
//│ 		let rec bernoulli_lh _lh_bernoulli_arg1_0 =
//│ 		  (match _lh_bernoulli_arg1_0 with
//│ 		    | 0 -> 
//│ 		      1
//│ 		    | 1 -> 
//│ 		      (0 - (1 / 2))
//│ 		    | _ -> 
//│ 		      (if ((_lh_bernoulli_arg1_0 mod 2) = 1) then
//│ 		        0
//│ 		      else
//│ 		        (let rec powers_0 = ((atIndex_lz_lh (_lh_bernoulli_arg1_0 - 1)) (Lazy.force neg_powers_lh)) in
//│ 		          (((0 - 1) / 2) + (sum_lh (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		            (match _lh_listcomp_fun_para_0 with
//│ 		              | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		                (match _lh_listcomp_fun_ls_h_0 with
//│ 		                  | `LH_P2(_lh_bernoulli_LH_P2_0_0, _lh_bernoulli_LH_P2_1_0) -> 
//│ 		                    (`LH_C((((sum_lh (((zipWith_lz_nl_lh (fun a_3 b_2 -> 
//│ 		                      (a_3 * b_2))) powers_0) (tail_lh (tail_lh _lh_bernoulli_LH_P2_1_0)))) - _lh_bernoulli_LH_P2_0_0) / (_lh_bernoulli_LH_P2_0_0 + 1)), (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		                  | _ -> 
//│ 		                    (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│ 		              | `LH_N -> 
//│ 		                (`LH_N))) in
//│ 		            (_lh_listcomp_fun_0 ((zip_nl_lz_lh ((enumFromTo_lh 2) _lh_bernoulli_arg1_0)) pascal_lh))))))));;
//│ 		let rec testBernoulli_nofib_lh _lh_testBernoulli_nofib_arg1_0 =
//│ 		  (bernoulli_lh _lh_testBernoulli_nofib_arg1_0);;
//│ 		(testBernoulli_nofib_lh 1500)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)]: 13 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 15
//│ 	case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_nl_lz_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 33
//│ 	case force⁰(ls⁴) of {LH_C h⁵ t⁵ => if (n⁰ == 0) then h⁵ else atIndex_lz_lh((n⁰ - 1), t⁵) | LH_N  => error⁰}: 218
//│ [LH_N]: 14 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 15
//│ 	case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_nl_lz_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 33
//│ 	case force⁰(ls⁴) of {LH_C h⁵ t⁵ => if (n⁰ == 0) then h⁵ else atIndex_lz_lh((n⁰ - 1), t⁵) | LH_N  => error⁰}: 218
//│ [LH_P2 hx⁰ hy⁰]: 25 --->
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh(zipWith_lz_nl_lh((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh(tail_lh(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 342
//│ [LH_C [LH_P2 hx⁰ hy⁰] zip_nl_lz_lh(tx⁰, ty⁰)]: 31 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh(zipWith_lz_nl_lh((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh(tail_lh(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 344
//│ [LH_N]: 32 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh(zipWith_lz_nl_lh((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh(tail_lh(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 344
//│ [LH_N]: 34 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh(zipWith_lz_nl_lh((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh(tail_lh(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 344
//│ [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)]: 52 --->
//│ 	DeadCodeCons
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]}: 54
//│ 	case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]}: 78
//│ 	case ys² of {LH_C hy² ty² => case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 80
//│ 	case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)] | LH_N  => [LH_N]}: 105
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 122
//│ 	case xs⁴ of {LH_C h³ t³ => [LH_C h³ mappend_lh(t³, ys⁴)] | LH_N  => ys⁴}: 178
//│ [LH_N]: 53 --->
//│ 	DeadCodeCons
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]}: 54
//│ 	case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]}: 78
//│ 	case ys² of {LH_C hy² ty² => case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 80
//│ 	case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)] | LH_N  => [LH_N]}: 105
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 122
//│ 	case xs⁴ of {LH_C h³ t³ => [LH_C h³ mappend_lh(t³, ys⁴)] | LH_N  => ys⁴}: 178
//│ [LH_N]: 55 --->
//│ 	DeadCodeCons
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]}: 54
//│ 	case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]}: 78
//│ 	case ys² of {LH_C hy² ty² => case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 80
//│ 	case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)] | LH_N  => [LH_N]}: 105
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 122
//│ 	case xs⁴ of {LH_C h³ t³ => [LH_C h³ mappend_lh(t³, ys⁴)] | LH_N  => ys⁴}: 178
//│ [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)]: 76 --->
//│ 	case ls³ of {LH_C h⁴ t⁴ => (h⁴ + sum_lh(t⁴)) | LH_N  => 0}: 190
//│ [LH_N]: 77 --->
//│ 	case ls³ of {LH_C h⁴ t⁴ => (h⁴ + sum_lh(t⁴)) | LH_N  => 0}: 190
//│ [LH_N]: 79 --->
//│ 	case ls³ of {LH_C h⁴ t⁴ => (h⁴ + sum_lh(t⁴)) | LH_N  => 0}: 190
//│ [LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)]: 103 --->
//│ 	DeadCodeCons
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]}: 54
//│ 	case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]}: 78
//│ 	case ys² of {LH_C hy² ty² => case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 80
//│ 	case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)] | LH_N  => [LH_N]}: 105
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 122
//│ 	case xs⁴ of {LH_C h³ t³ => [LH_C h³ mappend_lh(t³, ys⁴)] | LH_N  => ys⁴}: 178
//│ [LH_N]: 104 --->
//│ 	DeadCodeCons
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]}: 54
//│ 	case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]}: 78
//│ 	case ys² of {LH_C hy² ty² => case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 80
//│ 	case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)] | LH_N  => [LH_N]}: 105
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 122
//│ 	case xs⁴ of {LH_C h³ t³ => [LH_C h³ mappend_lh(t³, ys⁴)] | LH_N  => ys⁴}: 178
//│ [LH_N]: 106 --->
//│ 	DeadCodeCons
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]}: 54
//│ 	case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]}: 78
//│ 	case ys² of {LH_C hy² ty² => case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 80
//│ 	case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)] | LH_N  => [LH_N]}: 105
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 122
//│ 	case xs⁴ of {LH_C h³ t³ => [LH_C h³ mappend_lh(t³, ys⁴)] | LH_N  => ys⁴}: 178
//│ [LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 139 --->
//│ 	case xs⁰ of {LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_nl_lz_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 35
//│ [LH_N]: 140 --->
//│ 	case xs⁰ of {LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_nl_lz_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 35
//│ [LH_C a¹ enumFrom_lh((a¹ + 1))]: 153 --->
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]}: 54
//│ 	case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)] | LH_N  => [LH_N]}: 105
//│ 	case force⁰(xs³) of {LH_C hx³ tx³ => case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 107
//│ 	case xs⁴ of {LH_C h³ t³ => [LH_C h³ mappend_lh(t³, ys⁴)] | LH_N  => ys⁴}: 178
//│ [LH_C x⁰ iterate_lh(f⁴, f⁴(x⁰))]: 165 --->
//│ 	case force⁰(xs³) of {LH_C hx³ tx³ => case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 107
//│ [LH_C h³ mappend_lh(t³, ys⁴)]: 176 --->
//│ 	case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 56
//│ [LH_N]: 226 --->
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]}: 54
//│ 	case ys² of {LH_C hy² ty² => case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 80
//│ 	case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)] | LH_N  => [LH_N]}: 105
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 122
//│ 	case xs⁴ of {LH_C h³ t³ => [LH_C h³ mappend_lh(t³, ys⁴)] | LH_N  => ys⁴}: 178
//│ [LH_C 1 [LH_N]]: 227 --->
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]}: 54
//│ 	case ys² of {LH_C hy² ty² => case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 80
//│ 	case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)] | LH_N  => [LH_N]}: 105
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 122
//│ 	case xs⁴ of {LH_C h³ t³ => [LH_C h³ mappend_lh(t³, ys⁴)] | LH_N  => ys⁴}: 178
//│ [LH_C 2 [LH_C 1 [LH_N]]]: 228 --->
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]}: 54
//│ 	case ys² of {LH_C hy² ty² => case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 80
//│ 	case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)] | LH_N  => [LH_N]}: 105
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 122
//│ 	case xs⁴ of {LH_C h³ t³ => [LH_C h³ mappend_lh(t³, ys⁴)] | LH_N  => ys⁴}: 178
//│ [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 229 --->
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]}: 54
//│ 	case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)] | LH_N  => [LH_N]}: 105
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 122
//│ 	case xs⁴ of {LH_C h³ t³ => [LH_C h³ mappend_lh(t³, ys⁴)] | LH_N  => ys⁴}: 178
//│ [LH_N]: 244 --->
//│ 	case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 56
//│ [LH_C 0 [LH_N]]: 245 --->
//│ 	case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 56
//│ [LH_C 0 line⁰]: 250 --->
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]}: 54
//│ [LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz_lh((fun line⁰ -> zipWith_lh((fun a² -> (fun b¹ -> (a² + b¹))), mappend_lh(line⁰, [LH_C 0 [LH_N]]), [LH_C 0 line⁰])), pascal_lh)]: 256 --->
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 15
//│ 	case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_nl_lz_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 33
//│ [LH_C ((sum_lh(zipWith_lz_nl_lh((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh(tail_lh(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 338 --->
//│ 	case ls³ of {LH_C h⁴ t⁴ => (h⁴ + sum_lh(t⁴)) | LH_N  => 0}: 190
//│ [LH_N]: 343 --->
//│ 	case ls³ of {LH_C h⁴ t⁴ => (h⁴ + sum_lh(t⁴)) | LH_N  => 0}: 190
//│ [LH_C enumFrom_lh(2) map_lz_lh((fun p⁰ -> zipWith_lz_lz_lh((fun a⁴ -> (fun b³ -> (a⁴ * b³))), head_lz_lh(powers_lh), p⁰)), powers_lh)]: 388 --->
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 15
//│ 	case force⁰(ls¹) of {LH_C h¹ t¹ => h¹ | LH_N  => error⁰}: 117
//│ ------------------
//│ case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 15 --->
//│ 	[LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)]: 13
//│ 	[LH_N]: 14
//│ 	[LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz_lh((fun line⁰ -> zipWith_lh((fun a² -> (fun b¹ -> (a² + b¹))), mappend_lh(line⁰, [LH_C 0 [LH_N]]), [LH_C 0 line⁰])), pascal_lh)]: 256
//│ 	[LH_C enumFrom_lh(2) map_lz_lh((fun p⁰ -> zipWith_lz_lz_lh((fun a⁴ -> (fun b³ -> (a⁴ * b³))), head_lz_lh(powers_lh), p⁰)), powers_lh)]: 388
//│ case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_nl_lz_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 33 --->
//│ 	[LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)]: 13
//│ 	[LH_N]: 14
//│ 	[LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz_lh((fun line⁰ -> zipWith_lh((fun a² -> (fun b¹ -> (a² + b¹))), mappend_lh(line⁰, [LH_C 0 [LH_N]]), [LH_C 0 line⁰])), pascal_lh)]: 256
//│ case xs⁰ of {LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_nl_lz_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 35 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 139
//│ 	[LH_N]: 140
//│ case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]}: 54 --->
//│ 	[LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)]: 52
//│ 	[LH_N]: 53
//│ 	[LH_N]: 55
//│ 	[LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)]: 103
//│ 	[LH_N]: 104
//│ 	[LH_N]: 106
//│ 	[LH_C a¹ enumFrom_lh((a¹ + 1))]: 153
//│ 	[LH_N]: 226
//│ 	[LH_C 1 [LH_N]]: 227
//│ 	[LH_C 2 [LH_C 1 [LH_N]]]: 228
//│ 	[LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 229
//│ 	[LH_C 0 line⁰]: 250
//│ case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 56 --->
//│ 	[LH_C h³ mappend_lh(t³, ys⁴)]: 176
//│ 	[LH_N]: 244
//│ 	[LH_C 0 [LH_N]]: 245
//│ case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]}: 78 --->
//│ 	[LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)]: 52
//│ 	[LH_N]: 53
//│ 	[LH_N]: 55
//│ 	[LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)]: 103
//│ 	[LH_N]: 104
//│ 	[LH_N]: 106
//│ case ys² of {LH_C hy² ty² => case force⁰(xs²) of {LH_C hx² tx² => [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 80 --->
//│ 	[LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)]: 52
//│ 	[LH_N]: 53
//│ 	[LH_N]: 55
//│ 	[LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)]: 103
//│ 	[LH_N]: 104
//│ 	[LH_N]: 106
//│ 	[LH_N]: 226
//│ 	[LH_C 1 [LH_N]]: 227
//│ 	[LH_C 2 [LH_C 1 [LH_N]]]: 228
//│ case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)] | LH_N  => [LH_N]}: 105 --->
//│ 	[LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)]: 52
//│ 	[LH_N]: 53
//│ 	[LH_N]: 55
//│ 	[LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)]: 103
//│ 	[LH_N]: 104
//│ 	[LH_N]: 106
//│ 	[LH_C a¹ enumFrom_lh((a¹ + 1))]: 153
//│ 	[LH_N]: 226
//│ 	[LH_C 1 [LH_N]]: 227
//│ 	[LH_C 2 [LH_C 1 [LH_N]]]: 228
//│ 	[LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 229
//│ case force⁰(xs³) of {LH_C hx³ tx³ => case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 107 --->
//│ 	[LH_C a¹ enumFrom_lh((a¹ + 1))]: 153
//│ 	[LH_C x⁰ iterate_lh(f⁴, f⁴(x⁰))]: 165
//│ case force⁰(ls¹) of {LH_C h¹ t¹ => h¹ | LH_N  => error⁰}: 117 --->
//│ 	[LH_C enumFrom_lh(2) map_lz_lh((fun p⁰ -> zipWith_lz_lz_lh((fun a⁴ -> (fun b³ -> (a⁴ * b³))), head_lz_lh(powers_lh), p⁰)), powers_lh)]: 388
//│ case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 122 --->
//│ 	[LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)]: 52
//│ 	[LH_N]: 53
//│ 	[LH_N]: 55
//│ 	[LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)]: 103
//│ 	[LH_N]: 104
//│ 	[LH_N]: 106
//│ 	[LH_N]: 226
//│ 	[LH_C 1 [LH_N]]: 227
//│ 	[LH_C 2 [LH_C 1 [LH_N]]]: 228
//│ 	[LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 229
//│ case xs⁴ of {LH_C h³ t³ => [LH_C h³ mappend_lh(t³, ys⁴)] | LH_N  => ys⁴}: 178 --->
//│ 	[LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)]: 52
//│ 	[LH_N]: 53
//│ 	[LH_N]: 55
//│ 	[LH_C f³(hx³, hy³) zipWith_lz_lz_lh(f³, tx³, ty³)]: 103
//│ 	[LH_N]: 104
//│ 	[LH_N]: 106
//│ 	[LH_C a¹ enumFrom_lh((a¹ + 1))]: 153
//│ 	[LH_N]: 226
//│ 	[LH_C 1 [LH_N]]: 227
//│ 	[LH_C 2 [LH_C 1 [LH_N]]]: 228
//│ 	[LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 229
//│ case ls³ of {LH_C h⁴ t⁴ => (h⁴ + sum_lh(t⁴)) | LH_N  => 0}: 190 --->
//│ 	[LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)]: 76
//│ 	[LH_N]: 77
//│ 	[LH_N]: 79
//│ 	[LH_C ((sum_lh(zipWith_lz_nl_lh((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh(tail_lh(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 338
//│ 	[LH_N]: 343
//│ case force⁰(ls⁴) of {LH_C h⁵ t⁵ => if (n⁰ == 0) then h⁵ else atIndex_lz_lh((n⁰ - 1), t⁵) | LH_N  => error⁰}: 218 --->
//│ 	[LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)]: 13
//│ 	[LH_N]: 14
//│ case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh(zipWith_lz_nl_lh((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh(tail_lh(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 342 --->
//│ 	[LH_P2 hx⁰ hy⁰]: 25
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh(zipWith_lz_nl_lh((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh(tail_lh(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 344 --->
//│ 	[LH_C [LH_P2 hx⁰ hy⁰] zip_nl_lz_lh(tx⁰, ty⁰)]: 31
//│ 	[LH_N]: 32
//│ 	[LH_N]: 34
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_P2 hx⁰ hy⁰]: 25 --->
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh(zipWith_lz_nl_lh((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh(tail_lh(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 342
//│ [LH_C [LH_P2 hx⁰ hy⁰] zip_nl_lz_lh(tx⁰, ty⁰)]: 31 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh(zipWith_lz_nl_lh((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh(tail_lh(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 344
//│ [LH_N]: 32 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh(zipWith_lz_nl_lh((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh(tail_lh(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 344
//│ [LH_N]: 34 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh(zipWith_lz_nl_lh((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh(tail_lh(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 344
//│ [LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)]: 76 --->
//│ 	case ls³ of {LH_C h⁴ t⁴ => (h⁴ + sum_lh(t⁴)) | LH_N  => 0}: 190
//│ [LH_N]: 77 --->
//│ 	case ls³ of {LH_C h⁴ t⁴ => (h⁴ + sum_lh(t⁴)) | LH_N  => 0}: 190
//│ [LH_N]: 79 --->
//│ 	case ls³ of {LH_C h⁴ t⁴ => (h⁴ + sum_lh(t⁴)) | LH_N  => 0}: 190
//│ [LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 139 --->
//│ 	case xs⁰ of {LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_nl_lz_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 35
//│ [LH_N]: 140 --->
//│ 	case xs⁰ of {LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_nl_lz_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 35
//│ [LH_C h³ mappend_lh(t³, ys⁴)]: 176 --->
//│ 	case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 56
//│ [LH_N]: 244 --->
//│ 	case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 56
//│ [LH_C 0 [LH_N]]: 245 --->
//│ 	case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 56
//│ [LH_C ((sum_lh(zipWith_lz_nl_lh((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh(tail_lh(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 338 --->
//│ 	case ls³ of {LH_C h⁴ t⁴ => (h⁴ + sum_lh(t⁴)) | LH_N  => 0}: 190
//│ [LH_N]: 343 --->
//│ 	case ls³ of {LH_C h⁴ t⁴ => (h⁴ + sum_lh(t⁴)) | LH_N  => 0}: 190
//│ ------------------
//│ case xs⁰ of {LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_nl_lz_lh(tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 35 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 139
//│ 	[LH_N]: 140
//│ case xs¹ of {LH_C hx¹ tx¹ => case ys¹ of {LH_C hy¹ ty¹ => [LH_C f¹(hx¹, hy¹) zipWith_lh(f¹, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 56 --->
//│ 	[LH_C h³ mappend_lh(t³, ys⁴)]: 176
//│ 	[LH_N]: 244
//│ 	[LH_C 0 [LH_N]]: 245
//│ case ls³ of {LH_C h⁴ t⁴ => (h⁴ + sum_lh(t⁴)) | LH_N  => 0}: 190 --->
//│ 	[LH_C f²(hx², hy²) zipWith_lz_nl_lh(f², tx², ty²)]: 76
//│ 	[LH_N]: 77
//│ 	[LH_N]: 79
//│ 	[LH_C ((sum_lh(zipWith_lz_nl_lh((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh(tail_lh(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 338
//│ 	[LH_N]: 343
//│ case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh(zipWith_lz_nl_lh((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh(tail_lh(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 342 --->
//│ 	[LH_P2 hx⁰ hy⁰]: 25
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P2 _lh_bernoulli_LH_P2_0⁰ _lh_bernoulli_LH_P2_1⁰ => [LH_C ((sum_lh(zipWith_lz_nl_lh((fun a³ -> (fun b² -> (a³ * b²))), powers⁰, tail_lh(tail_lh(_lh_bernoulli_LH_P2_1⁰)))) - _lh_bernoulli_LH_P2_0⁰) / (_lh_bernoulli_LH_P2_0⁰ + 1)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 344 --->
//│ 	[LH_C [LH_P2 hx⁰ hy⁰] zip_nl_lz_lh(tx⁰, ty⁰)]: 31
//│ 	[LH_N]: 32
//│ 	[LH_N]: 34
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testBernoulli_nofib_lh(primId⁰(1500))
//│ def atIndex_lz_lh(n³, ls⁸) = if (n³ < 0) then error⁰ else case force⁰(ls⁸) of {
//│ 	LH_C h⁵ t⁵ => if (n³ == 0) then h⁵ else atIndex_lz_lh((n³ - 1), t⁵)
//│ 	| LH_N  => error⁰}
//│ def bernoulli_lh(_lh_bernoulli_arg1¹) = case _lh_bernoulli_arg1¹ of {
//│ 	0  => 1
//│ 	| 1  => (0 - (1 / 2))
//│ 	| _  => if ((_lh_bernoulli_arg1¹ % 2) == 1) then 0 else 
//│ 		let powers⁵ = atIndex_lz_lh((_lh_bernoulli_arg1¹ - 1), force⁰(neg_powers_lh))
//│ 		in (((0 - 1) / 2) + sum_lh(
//│ 			let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para¹ -> _lh_listcomp_fun_para¹(_lh_listcomp_fun⁵, powers⁵))
//│ 			in _lh_listcomp_fun⁵(zip_nl_lz_lh(enumFromTo_lh(2, _lh_bernoulli_arg1¹), pascal_lh))))}
//│ def enumFromTo_lh(a⁵, b⁴) = if (a⁵ <= b⁴) then 
//│ 	let tx⁴ = enumFromTo_lh((a⁵ + 1), b⁴)
//│ 	in let hx⁴ = a⁵
//│ 	in (fun ys⁵ -> case force⁰(ys⁵) of {
//│ 		LH_C hy⁰ ty⁰ => 
//│ 			let _lh_listcomp_fun_ls_t¹ = zip_nl_lz_lh(tx⁴, ty⁰)
//│ 			in let _lh_listcomp_fun_ls_h¹ = 	
//│ 				let _lh_bernoulli_LH_P2_1¹ = hy⁰
//│ 				in let _lh_bernoulli_LH_P2_0¹ = hx⁴
//│ 				in (fun _lh_listcomp_fun_ls_t² -> (fun _lh_listcomp_fun² -> (fun powers² -> 
//│ 					let t⁶ = _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)
//│ 					in let h⁶ = ((sum_lh(zipWith_lz_nl_lh((fun a⁶ -> (fun b⁵ -> (a⁶ * b⁵))), powers², tail_lh(tail_lh(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1))
//│ 					in (fun _lh_dummy⁰ -> (h⁶ + sum_lh(t⁶))))))
//│ 			in (fun _lh_listcomp_fun¹ -> (fun powers¹ -> _lh_listcomp_fun_ls_h¹(_lh_listcomp_fun_ls_t¹, _lh_listcomp_fun¹, powers¹)))
//│ 		| LH_N  => (fun _lh_listcomp_fun³ -> (fun powers³ -> (fun _lh_dummy¹ -> 0)))}) else (fun ys⁶ -> (fun _lh_listcomp_fun⁴ -> (fun powers⁴ -> (fun _lh_dummy² -> 0))))
//│ def enumFrom_lh(a⁷) = lazy⁰([LH_C a⁷ enumFrom_lh((a⁷ + 1))])
//│ def head_lz_lh(ls⁶) = case force⁰(ls⁶) of {
//│ 	LH_C h¹ t¹ => h¹
//│ 	| LH_N  => error⁰}
//│ def iterate_lh(f⁶, x²) = lazy⁰([LH_C x² iterate_lh(f⁶, f⁶(x²))])
//│ def map_lz_lh(f⁸, ls⁵) = lazy⁰(case force⁰(ls⁵) of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁸(h⁰) map_lz_lh(f⁸, t⁰)]
//│ 	| LH_N  => [LH_N]})
//│ def mappend_lh(xs⁶, ys⁸) = case xs⁶ of {
//│ 	LH_C h³ t³ => 
//│ 		let tx⁵ = mappend_lh(t³, ys⁸)
//│ 		in let hx⁵ = h³
//│ 		in (fun f⁷ -> (fun ys⁹ -> case ys⁹ of {
//│ 			LH_C hy¹ ty¹ => [LH_C f⁷(hx⁵, hy¹) zipWith_lh(f⁷, tx⁵, ty¹)]
//│ 			| LH_N  => [LH_N]}))
//│ 	| LH_N  => ys⁸}
//│ def neg_powers_lh = lazy⁰(map_lz_lh(zipWith_lz_lz_lh((fun n² -> (fun x³ -> if n² then x³ else (0 - x³))), iterate_lh(not⁰, [True])), powers_lh))
//│ def pascal_lh = lazy⁰([LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz_lh((fun line¹ -> zipWith_lh((fun a⁸ -> (fun b⁶ -> (a⁸ + b⁶))), mappend_lh(line¹, 
//│ 	let tx⁶ = (fun f¹⁰ -> (fun ys¹¹ -> [LH_N]))
//│ 	in let hx⁶ = 0
//│ 	in (fun f⁹ -> (fun ys¹⁰ -> case ys¹⁰ of {
//│ 		LH_C hy¹ ty¹ => [LH_C f⁹(hx⁶, hy¹) zipWith_lh(f⁹, tx⁶, ty¹)]
//│ 		| LH_N  => [LH_N]}))), [LH_C 0 line¹])), pascal_lh)])
//│ def powers_lh = lazy⁰([LH_C enumFrom_lh(2) map_lz_lh((fun p¹ -> zipWith_lz_lz_lh((fun a⁹ -> (fun b⁷ -> (a⁹ * b⁷))), head_lz_lh(powers_lh), p¹)), powers_lh)])
//│ def sum_lh(ls⁹) = ls⁹(99)
//│ def tail_lh(ls⁷) = case ls⁷ of {
//│ 	LH_C h² t² => t²
//│ 	| LH_N  => error⁰}
//│ def testBernoulli_nofib_lh(_lh_testBernoulli_nofib_arg1¹) = bernoulli_lh(_lh_testBernoulli_nofib_arg1¹)
//│ def zipWith_lh(f¹¹, xs⁷, ys¹²) = xs⁷(f¹¹, ys¹²)
//│ def zipWith_lz_lz_lh(f⁵, xs⁵, ys⁷) = lazy⁰(case force⁰(xs⁵) of {
//│ 	LH_C hx³ tx³ => case force⁰(ys⁷) of {
//│ 		LH_C hy³ ty³ => [LH_C f⁵(hx³, hy³) zipWith_lz_lz_lh(f⁵, tx³, ty³)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_nl_lh(f¹², xs⁸, ys¹³) = case ys¹³ of {
//│ 	LH_C hy² ty² => case force⁰(xs⁸) of {
//│ 		LH_C hx² tx² => 
//│ 			let t⁷ = zipWith_lz_nl_lh(f¹², tx², ty²)
//│ 			in let h⁷ = f¹²(hx², hy²)
//│ 			in (fun _lh_dummy³ -> (h⁷ + sum_lh(t⁷)))
//│ 		| LH_N  => (fun _lh_dummy⁴ -> 0)}
//│ 	| LH_N  => (fun _lh_dummy⁵ -> 0)}
//│ def zip_nl_lz_lh(xs⁹, ys¹⁴) = xs⁹(ys¹⁴)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ ~~~~~~~~~~~~~~~~~~~~~~~ NEXT ITERATION ~~~~~~~~~~~~~~~~~~~~~~~
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testBernoulli_nofib_lh^1] (hopeless to continue)
//│ 	[testBernoulli_nofib_lh^1 · bernoulli_lh^135] (using original def)
//│ 		[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · atIndex_lz_lh^365] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · atIndex_lz_lh^365 · atIndex_lz_lh^437] ---> [testBernoulli_nofib_lh^1 · bernoulli_lh^135 · atIndex_lz_lh^365] (using original def)
//│ 		[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · enumFromTo_lh^396] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · enumFromTo_lh^396 · enumFromTo_lh^11] ---> [testBernoulli_nofib_lh^1 · bernoulli_lh^135 · enumFromTo_lh^396] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · enumFromTo_lh^396 · sum_lh^36] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · enumFromTo_lh^396 · sum_lh^68] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · enumFromTo_lh^396 · tail_lh^48] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · enumFromTo_lh^396 · tail_lh^49] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · enumFromTo_lh^396 · zipWith_lz_nl_lh^37] (using original def)
//│ 				[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · enumFromTo_lh^396 · zipWith_lz_nl_lh^37 · sum_lh^328] (using original def)
//│ 				[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · enumFromTo_lh^396 · zipWith_lz_nl_lh^37 · zipWith_lz_nl_lh^313] ---> [testBernoulli_nofib_lh^1 · bernoulli_lh^135 · enumFromTo_lh^396 · zipWith_lz_nl_lh^37] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · enumFromTo_lh^396 · zip_nl_lz_lh^24] (using original def)
//│ 		[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · iterate_lh^284] (using original def)
//│ 				[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · iterate_lh^284 · iterate_lh^153] ---> [testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · iterate_lh^284] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · map_lz_lh^271] (using original def)
//│ 				[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · map_lz_lh^271 · map_lz_lh^202] ---> [testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · map_lz_lh^271] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · powers_lh^291] (using original def)
//│ 				[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · powers_lh^291 · enumFrom_lh^457] (using original def)
//│ 					[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · powers_lh^291 · enumFrom_lh^457 · enumFrom_lh^141] ---> [testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · powers_lh^291 · enumFrom_lh^457] (using original def)
//│ 				[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · powers_lh^291 · head_lz_lh^470] (using original def)
//│ 				[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · powers_lh^291 · map_lz_lh^460] (using original def)
//│ 					[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · powers_lh^291 · map_lz_lh^460 · map_lz_lh^202] ---> [testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · powers_lh^291 · map_lz_lh^460] (using original def)
//│ 				[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · powers_lh^291 · powers_lh^471] ---> [testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · powers_lh^291] (using original def)
//│ 				[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · powers_lh^291 · powers_lh^478] ---> [testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · powers_lh^291] (using original def)
//│ 				[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · powers_lh^291 · zipWith_lz_lz_lh^461] (using original def)
//│ 					[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · powers_lh^291 · zipWith_lz_lz_lh^461 · zipWith_lz_lz_lh^119] ---> [testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · powers_lh^291 · zipWith_lz_lz_lh^461] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · zipWith_lz_lz_lh^272] (using original def)
//│ 				[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · zipWith_lz_lz_lh^272 · zipWith_lz_lz_lh^119] ---> [testBernoulli_nofib_lh^1 · bernoulli_lh^135 · neg_powers_lh^373 · zipWith_lz_lz_lh^272] (using original def)
//│ 		[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · pascal_lh^402] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · pascal_lh^402 · map_lz_lh^221] (using original def)
//│ 				[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · pascal_lh^402 · map_lz_lh^221 · map_lz_lh^202] ---> [testBernoulli_nofib_lh^1 · bernoulli_lh^135 · pascal_lh^402 · map_lz_lh^221] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · pascal_lh^402 · mappend_lh^231] (using original def)
//│ 				[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · pascal_lh^402 · mappend_lh^231 · mappend_lh^165] ---> [testBernoulli_nofib_lh^1 · bernoulli_lh^135 · pascal_lh^402 · mappend_lh^231] (using original def)
//│ 				[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · pascal_lh^402 · mappend_lh^231 · zipWith_lh^177] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · pascal_lh^402 · pascal_lh^266] ---> [testBernoulli_nofib_lh^1 · bernoulli_lh^135 · pascal_lh^402] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · pascal_lh^402 · zipWith_lh^222] (using original def)
//│ 			[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · pascal_lh^402 · zipWith_lh^244] (using original def)
//│ 		[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · sum_lh^387] (using original def)
//│ 		[testBernoulli_nofib_lh^1 · bernoulli_lh^135 · zip_nl_lz_lh^395] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testBernoulli_nofib_lh_₀(primId⁰(1500))
//│ def testBernoulli_nofib_lh_₀(_lh_testBernoulli_nofib_arg1¹) = 
//│ 	bernoulli_lh_₀(_lh_testBernoulli_nofib_arg1¹)
//│ 	where
//│ 	def bernoulli_lh_₀(_lh_bernoulli_arg1¹) = 
//│ 		case _lh_bernoulli_arg1¹ of {
//│ 			0  => 1
//│ 			| 1  => (0 - (1 / 2))
//│ 			| _  => if ((_lh_bernoulli_arg1¹ % 2) == 1) then 0 else 
//│ 				let powers⁵ = atIndex_lz_lh_₀((_lh_bernoulli_arg1¹ - 1), force⁰(neg_powers_lh_₀))
//│ 				in (((0 - 1) / 2) + sum_lh_₃(
//│ 					let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para¹ -> _lh_listcomp_fun_para¹(_lh_listcomp_fun⁵, powers⁵))
//│ 					in _lh_listcomp_fun⁵(zip_nl_lz_lh_₁(enumFromTo_lh_₀(2, _lh_bernoulli_arg1¹), pascal_lh_₀))))}
//│ 		where
//│ 		def atIndex_lz_lh_₀(n³, ls¹⁰) = 
//│ 			if (n³ < 0) then error⁰ else case force⁰(ls¹⁰) of {
//│ 				LH_C h¹¹ t¹¹ => if (n³ == 0) then h¹¹ else atIndex_lz_lh_₀((n³ - 1), t¹¹)
//│ 				| LH_N  => error⁰}
//│ 		def enumFromTo_lh_₀(a⁸, b⁶) = 
//│ 			if (a⁸ <= b⁶) then 
//│ 				let tx⁹ = enumFromTo_lh_₀((a⁸ + 1), b⁶)
//│ 				in let hx⁹ = a⁸
//│ 				in (fun ys¹⁹ -> case force⁰(ys¹⁹) of {
//│ 					LH_C hy⁹ ty⁹ => 
//│ 						let _lh_listcomp_fun_ls_t² = zip_nl_lz_lh_₀(tx⁹, ty⁹)
//│ 						in let _lh_listcomp_fun_ls_h¹ = 	
//│ 							let _lh_bernoulli_LH_P2_1¹ = hy⁹
//│ 							in let _lh_bernoulli_LH_P2_0¹ = hx⁹
//│ 							in (fun _lh_listcomp_fun_ls_t³ -> (fun _lh_listcomp_fun⁶ -> (fun powers⁶ -> 
//│ 								let t¹⁶ = _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)
//│ 								in let h¹⁶ = ((sum_lh_₀(zipWith_lz_nl_lh_₀((fun a⁹ -> (fun b⁷ -> (a⁹ * b⁷))), powers⁶, tail_lh_₀(tail_lh_₁(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1))
//│ 								in (fun _lh_dummy⁹ -> (h¹⁶ + sum_lh_₁(t¹⁶))))))
//│ 						in (fun _lh_listcomp_fun⁷ -> (fun powers⁷ -> _lh_listcomp_fun_ls_h¹(_lh_listcomp_fun_ls_t², _lh_listcomp_fun⁷, powers⁷)))
//│ 					| LH_N  => (fun _lh_listcomp_fun⁸ -> (fun powers⁸ -> (fun _lh_dummy¹⁰ -> 0)))}) else (fun ys²⁰ -> (fun _lh_listcomp_fun⁹ -> (fun powers⁹ -> (fun _lh_dummy¹¹ -> 0))))
//│ 			where
//│ 			def sum_lh_₀(ls¹⁴) = 
//│ 				ls¹⁴(99)
//│ 			def sum_lh_₁(ls⁶) = 
//│ 				ls⁶(99)
//│ 			def tail_lh_₀(ls¹³) = 
//│ 				case ls¹³ of {
//│ 					LH_C h¹⁴ t¹⁴ => t¹⁴
//│ 					| LH_N  => error⁰}
//│ 			def tail_lh_₁(ls¹⁵) = 
//│ 				case ls¹⁵ of {
//│ 					LH_C h¹⁵ t¹⁵ => t¹⁵
//│ 					| LH_N  => error⁰}
//│ 			def zipWith_lz_nl_lh_₀(f⁸, xs⁵, ys¹⁰) = 
//│ 				case ys¹⁰ of {
//│ 					LH_C hy⁵ ty⁵ => case force⁰(xs⁵) of {
//│ 						LH_C hx⁵ tx⁵ => 
//│ 							let t⁷ = zipWith_lz_nl_lh_₀(f⁸, tx⁵, ty⁵)
//│ 							in let h⁷ = f⁸(hx⁵, hy⁵)
//│ 							in (fun _lh_dummy⁶ -> (h⁷ + sum_lh_₂(t⁷)))
//│ 						| LH_N  => (fun _lh_dummy⁷ -> 0)}
//│ 					| LH_N  => (fun _lh_dummy⁸ -> 0)}
//│ 				where
//│ 				def sum_lh_₂(ls⁹) = 
//│ 					ls⁹(99)
//│ 			def zip_nl_lz_lh_₀(xs⁷, ys¹⁴) = 
//│ 				xs⁷(ys¹⁴)
//│ 		def neg_powers_lh_₀ = 
//│ 			lazy⁰(map_lz_lh_₀(zipWith_lz_lz_lh_₁((fun n² -> (fun x² -> if n² then x² else (0 - x²))), iterate_lh_₀(not⁰, [True])), powers_lh_₀))
//│ 			where
//│ 			def iterate_lh_₀(f¹⁸, x³) = 
//│ 				lazy⁰([LH_C x³ iterate_lh_₀(f¹⁸, f¹⁸(x³))])
//│ 			def map_lz_lh_₀(f¹¹, ls⁵) = 
//│ 				lazy⁰(case force⁰(ls⁵) of {
//│ 					LH_C h⁸ t⁸ => [LH_C f¹¹(h⁸) map_lz_lh_₀(f¹¹, t⁸)]
//│ 					| LH_N  => [LH_N]})
//│ 			def powers_lh_₀ = 
//│ 				lazy⁰([LH_C enumFrom_lh_₀(2) map_lz_lh_₁((fun p¹ -> zipWith_lz_lz_lh_₀((fun a⁶ -> (fun b⁵ -> (a⁶ * b⁵))), head_lz_lh_₀(powers_lh_₀), p¹)), powers_lh_₀)])
//│ 				where
//│ 				def enumFrom_lh_₀(a⁷) = 
//│ 					lazy⁰([LH_C a⁷ enumFrom_lh_₀((a⁷ + 1))])
//│ 				def head_lz_lh_₀(ls¹²) = 
//│ 					case force⁰(ls¹²) of {
//│ 						LH_C h¹³ t¹³ => h¹³
//│ 						| LH_N  => error⁰}
//│ 				def map_lz_lh_₁(f¹⁵, ls¹¹) = 
//│ 					lazy⁰(case force⁰(ls¹¹) of {
//│ 						LH_C h¹² t¹² => [LH_C f¹⁵(h¹²) map_lz_lh_₁(f¹⁵, t¹²)]
//│ 						| LH_N  => [LH_N]})
//│ 				def zipWith_lz_lz_lh_₀(f²⁰, xs¹³, ys²³) = 
//│ 					lazy⁰(case force⁰(xs¹³) of {
//│ 						LH_C hx¹⁰ tx¹⁰ => case force⁰(ys²³) of {
//│ 							LH_C hy¹⁰ ty¹⁰ => [LH_C f²⁰(hx¹⁰, hy¹⁰) zipWith_lz_lz_lh_₀(f²⁰, tx¹⁰, ty¹⁰)]
//│ 							| LH_N  => [LH_N]}
//│ 						| LH_N  => [LH_N]})
//│ 			def zipWith_lz_lz_lh_₁(f¹⁷, xs¹⁰, ys¹⁸) = 
//│ 				lazy⁰(case force⁰(xs¹⁰) of {
//│ 					LH_C hx⁸ tx⁸ => case force⁰(ys¹⁸) of {
//│ 						LH_C hy⁸ ty⁸ => [LH_C f¹⁷(hx⁸, hy⁸) zipWith_lz_lz_lh_₁(f¹⁷, tx⁸, ty⁸)]
//│ 						| LH_N  => [LH_N]}
//│ 					| LH_N  => [LH_N]})
//│ 		def pascal_lh_₀ = 
//│ 			lazy⁰([LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz_lh_₂((fun line¹ -> zipWith_lh_₁((fun a⁵ -> (fun b⁴ -> (a⁵ + b⁴))), mappend_lh_₀(line¹, 
//│ 				let tx⁶ = (fun f⁹ -> (fun ys¹¹ -> [LH_N]))
//│ 				in let hx⁶ = 0
//│ 				in (fun f¹⁰ -> (fun ys¹² -> case ys¹² of {
//│ 					LH_C hy⁶ ty⁶ => [LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)]
//│ 					| LH_N  => [LH_N]}))), [LH_C 0 line¹])), pascal_lh_₀)])
//│ 			where
//│ 			def map_lz_lh_₂(f¹⁴, ls⁸) = 
//│ 				lazy⁰(case force⁰(ls⁸) of {
//│ 					LH_C h¹⁰ t¹⁰ => [LH_C f¹⁴(h¹⁰) map_lz_lh_₂(f¹⁴, t¹⁰)]
//│ 					| LH_N  => [LH_N]})
//│ 			def mappend_lh_₀(xs⁸, ys¹⁵) = 
//│ 				case xs⁸ of {
//│ 					LH_C h⁹ t⁹ => 
//│ 						let tx⁷ = mappend_lh_₀(t⁹, ys¹⁵)
//│ 						in let hx⁷ = h⁹
//│ 						in (fun f¹³ -> (fun ys¹⁶ -> case ys¹⁶ of {
//│ 							LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)]
//│ 							| LH_N  => [LH_N]}))
//│ 					| LH_N  => ys¹⁵}
//│ 				where
//│ 				def zipWith_lh_₀(f¹⁶, xs⁹, ys¹⁷) = 
//│ 					xs⁹(f¹⁶, ys¹⁷)
//│ 			def zipWith_lh_₁(f¹², xs⁶, ys¹³) = 
//│ 				xs⁶(f¹², ys¹³)
//│ 			def zipWith_lh_₂(f¹⁹, xs¹², ys²²) = 
//│ 				xs¹²(f¹⁹, ys²²)
//│ 		def sum_lh_₃(ls⁷) = 
//│ 			ls⁷(99)
//│ 		def zip_nl_lz_lh_₁(xs¹¹, ys²¹) = 
//│ 			xs¹¹(ys²¹)
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 589 --->
//│ 	DeadCodeCons
//│ 	case ys¹⁰ of {LH_C hy⁵ ty⁵ => case force⁰(xs⁵) of {LH_C hx⁵ tx⁵ => let t⁷ = zipWith_lz_nl_lh_₀(f⁸, tx⁵, ty⁵)
//│ in let h⁷ = f⁸(hx⁵, hy⁵)
//│ in (fun _lh_dummy⁶ -> (h⁷ + sum_lh_₂(t⁷))) | LH_N  => (fun _lh_dummy⁷ -> 0)} | LH_N  => (fun _lh_dummy⁸ -> 0)}: 513
//│ 	case ys¹² of {LH_C hy⁶ ty⁶ => [LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 625
//│ 	case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 745
//│ 	case xs⁸ of {LH_C h⁹ t⁹ => let tx⁷ = mappend_lh_₀(t⁹, ys¹⁵)
//│ in let hx⁷ = h⁹
//│ in (fun f¹³ -> (fun ys¹⁶ -> case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]})) | LH_N  => ys¹⁵}: 751
//│ [LH_C 1 [LH_N]]: 590 --->
//│ 	DeadCodeCons
//│ 	case ys¹⁰ of {LH_C hy⁵ ty⁵ => case force⁰(xs⁵) of {LH_C hx⁵ tx⁵ => let t⁷ = zipWith_lz_nl_lh_₀(f⁸, tx⁵, ty⁵)
//│ in let h⁷ = f⁸(hx⁵, hy⁵)
//│ in (fun _lh_dummy⁶ -> (h⁷ + sum_lh_₂(t⁷))) | LH_N  => (fun _lh_dummy⁷ -> 0)} | LH_N  => (fun _lh_dummy⁸ -> 0)}: 513
//│ 	case ys¹² of {LH_C hy⁶ ty⁶ => [LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 625
//│ 	case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 745
//│ 	case xs⁸ of {LH_C h⁹ t⁹ => let tx⁷ = mappend_lh_₀(t⁹, ys¹⁵)
//│ in let hx⁷ = h⁹
//│ in (fun f¹³ -> (fun ys¹⁶ -> case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]})) | LH_N  => ys¹⁵}: 751
//│ [LH_C 2 [LH_C 1 [LH_N]]]: 591 --->
//│ 	DeadCodeCons
//│ 	case ys¹² of {LH_C hy⁶ ty⁶ => [LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 625
//│ 	case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 745
//│ 	case xs⁸ of {LH_C h⁹ t⁹ => let tx⁷ = mappend_lh_₀(t⁹, ys¹⁵)
//│ in let hx⁷ = h⁹
//│ in (fun f¹³ -> (fun ys¹⁶ -> case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]})) | LH_N  => ys¹⁵}: 751
//│ 	case ls¹³ of {LH_C h¹⁴ t¹⁴ => t¹⁴ | LH_N  => error⁰}: 846
//│ [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 592 --->
//│ 	DeadCodeCons
//│ 	case ys¹² of {LH_C hy⁶ ty⁶ => [LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 625
//│ 	case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 745
//│ 	case xs⁸ of {LH_C h⁹ t⁹ => let tx⁷ = mappend_lh_₀(t⁹, ys¹⁵)
//│ in let hx⁷ = h⁹
//│ in (fun f¹³ -> (fun ys¹⁶ -> case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]})) | LH_N  => ys¹⁵}: 751
//│ 	case ls¹⁵ of {LH_C h¹⁵ t¹⁵ => t¹⁵ | LH_N  => error⁰}: 903
//│ [LH_N]: 606 --->
//│ 	DeadCodeCons
//│ 	case ys¹⁰ of {LH_C hy⁵ ty⁵ => case force⁰(xs⁵) of {LH_C hx⁵ tx⁵ => let t⁷ = zipWith_lz_nl_lh_₀(f⁸, tx⁵, ty⁵)
//│ in let h⁷ = f⁸(hx⁵, hy⁵)
//│ in (fun _lh_dummy⁶ -> (h⁷ + sum_lh_₂(t⁷))) | LH_N  => (fun _lh_dummy⁷ -> 0)} | LH_N  => (fun _lh_dummy⁸ -> 0)}: 513
//│ 	case ys¹² of {LH_C hy⁶ ty⁶ => [LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 625
//│ 	case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 745
//│ 	case xs⁸ of {LH_C h⁹ t⁹ => let tx⁷ = mappend_lh_₀(t⁹, ys¹⁵)
//│ in let hx⁷ = h⁹
//│ in (fun f¹³ -> (fun ys¹⁶ -> case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]})) | LH_N  => ys¹⁵}: 751
//│ 	case ls¹³ of {LH_C h¹⁴ t¹⁴ => t¹⁴ | LH_N  => error⁰}: 846
//│ [LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)]: 623 --->
//│ 	DeadCodeCons
//│ 	case ys¹⁰ of {LH_C hy⁵ ty⁵ => case force⁰(xs⁵) of {LH_C hx⁵ tx⁵ => let t⁷ = zipWith_lz_nl_lh_₀(f⁸, tx⁵, ty⁵)
//│ in let h⁷ = f⁸(hx⁵, hy⁵)
//│ in (fun _lh_dummy⁶ -> (h⁷ + sum_lh_₂(t⁷))) | LH_N  => (fun _lh_dummy⁷ -> 0)} | LH_N  => (fun _lh_dummy⁸ -> 0)}: 513
//│ 	case ys¹² of {LH_C hy⁶ ty⁶ => [LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 625
//│ 	case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 745
//│ 	case xs⁸ of {LH_C h⁹ t⁹ => let tx⁷ = mappend_lh_₀(t⁹, ys¹⁵)
//│ in let hx⁷ = h⁹
//│ in (fun f¹³ -> (fun ys¹⁶ -> case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]})) | LH_N  => ys¹⁵}: 751
//│ 	case ls¹³ of {LH_C h¹⁴ t¹⁴ => t¹⁴ | LH_N  => error⁰}: 846
//│ 	case ls¹⁵ of {LH_C h¹⁵ t¹⁵ => t¹⁵ | LH_N  => error⁰}: 903
//│ [LH_N]: 624 --->
//│ 	DeadCodeCons
//│ 	case ys¹⁰ of {LH_C hy⁵ ty⁵ => case force⁰(xs⁵) of {LH_C hx⁵ tx⁵ => let t⁷ = zipWith_lz_nl_lh_₀(f⁸, tx⁵, ty⁵)
//│ in let h⁷ = f⁸(hx⁵, hy⁵)
//│ in (fun _lh_dummy⁶ -> (h⁷ + sum_lh_₂(t⁷))) | LH_N  => (fun _lh_dummy⁷ -> 0)} | LH_N  => (fun _lh_dummy⁸ -> 0)}: 513
//│ 	case ys¹² of {LH_C hy⁶ ty⁶ => [LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 625
//│ 	case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 745
//│ 	case xs⁸ of {LH_C h⁹ t⁹ => let tx⁷ = mappend_lh_₀(t⁹, ys¹⁵)
//│ in let hx⁷ = h⁹
//│ in (fun f¹³ -> (fun ys¹⁶ -> case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]})) | LH_N  => ys¹⁵}: 751
//│ 	case ls¹³ of {LH_C h¹⁴ t¹⁴ => t¹⁴ | LH_N  => error⁰}: 846
//│ 	case ls¹⁵ of {LH_C h¹⁵ t¹⁵ => t¹⁵ | LH_N  => error⁰}: 903
//│ [LH_C 0 line¹]: 634 --->
//│ 	case ys¹² of {LH_C hy⁶ ty⁶ => [LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 625
//│ 	case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 745
//│ [LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz_lh_₂((fun line¹ -> zipWith_lh_₁((fun a⁵ -> (fun b⁴ -> (a⁵ + b⁴))), mappend_lh_₀(line¹, let tx⁶ = (fun f⁹ -> (fun ys¹¹ -> [LH_N]))
//│ in let hx⁶ = 0
//│ in (fun f¹⁰ -> (fun ys¹² -> case ys¹² of {LH_C hy⁶ ty⁶ => [LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)] | LH_N  => [LH_N]}))), [LH_C 0 line¹])), pascal_lh_₀)]: 640 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁸) of {LH_C h¹⁰ t¹⁰ => [LH_C f¹⁴(h¹⁰) map_lz_lh_₂(f¹⁴, t¹⁰)] | LH_N  => [LH_N]}: 776
//│ 	case force⁰(ys¹⁹) of {LH_C hy⁹ ty⁹ => let _lh_listcomp_fun_ls_t² = zip_nl_lz_lh_₀(tx⁹, ty⁹)
//│ in let _lh_listcomp_fun_ls_h¹ = let _lh_bernoulli_LH_P2_1¹ = hy⁹
//│ in let _lh_bernoulli_LH_P2_0¹ = hx⁹
//│ in (fun _lh_listcomp_fun_ls_t³ -> (fun _lh_listcomp_fun⁶ -> (fun powers⁶ -> let t¹⁶ = _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)
//│ in let h¹⁶ = ((sum_lh_₀(zipWith_lz_nl_lh_₀((fun a⁹ -> (fun b⁷ -> (a⁹ * b⁷))), powers⁶, tail_lh_₀(tail_lh_₁(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1))
//│ in (fun _lh_dummy⁹ -> (h¹⁶ + sum_lh_₁(t¹⁶))))))
//│ in (fun _lh_listcomp_fun⁷ -> (fun powers⁷ -> _lh_listcomp_fun_ls_h¹(_lh_listcomp_fun_ls_t², _lh_listcomp_fun⁷, powers⁷))) | LH_N  => (fun _lh_listcomp_fun⁸ -> (fun powers⁸ -> (fun _lh_dummy¹⁰ -> 0)))}: 994
//│ [LH_C f¹¹(h⁸) map_lz_lh_₀(f¹¹, t⁸)]: 654 --->
//│ 	case force⁰(ls¹⁰) of {LH_C h¹¹ t¹¹ => if (n³ == 0) then h¹¹ else atIndex_lz_lh_₀((n³ - 1), t¹¹) | LH_N  => error⁰}: 814
//│ [LH_N]: 655 --->
//│ 	case force⁰(ls¹⁰) of {LH_C h¹¹ t¹¹ => if (n³ == 0) then h¹¹ else atIndex_lz_lh_₀((n³ - 1), t¹¹) | LH_N  => error⁰}: 814
//│ [LH_C enumFrom_lh_₀(2) map_lz_lh_₁((fun p¹ -> zipWith_lz_lz_lh_₀((fun a⁶ -> (fun b⁵ -> (a⁶ * b⁵))), head_lz_lh_₀(powers_lh_₀), p¹)), powers_lh_₀)]: 684 --->
//│ 	case force⁰(ls⁵) of {LH_C h⁸ t⁸ => [LH_C f¹¹(h⁸) map_lz_lh_₀(f¹¹, t⁸)] | LH_N  => [LH_N]}: 656
//│ 	case force⁰(ls¹¹) of {LH_C h¹² t¹² => [LH_C f¹⁵(h¹²) map_lz_lh_₁(f¹⁵, t¹²)] | LH_N  => [LH_N]}: 832
//│ 	case force⁰(ls¹²) of {LH_C h¹³ t¹³ => h¹³ | LH_N  => error⁰}: 841
//│ [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)]: 743 --->
//│ 	DeadCodeCons
//│ 	case ys¹⁰ of {LH_C hy⁵ ty⁵ => case force⁰(xs⁵) of {LH_C hx⁵ tx⁵ => let t⁷ = zipWith_lz_nl_lh_₀(f⁸, tx⁵, ty⁵)
//│ in let h⁷ = f⁸(hx⁵, hy⁵)
//│ in (fun _lh_dummy⁶ -> (h⁷ + sum_lh_₂(t⁷))) | LH_N  => (fun _lh_dummy⁷ -> 0)} | LH_N  => (fun _lh_dummy⁸ -> 0)}: 513
//│ 	case ys¹² of {LH_C hy⁶ ty⁶ => [LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 625
//│ 	case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 745
//│ 	case xs⁸ of {LH_C h⁹ t⁹ => let tx⁷ = mappend_lh_₀(t⁹, ys¹⁵)
//│ in let hx⁷ = h⁹
//│ in (fun f¹³ -> (fun ys¹⁶ -> case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]})) | LH_N  => ys¹⁵}: 751
//│ 	case ls¹³ of {LH_C h¹⁴ t¹⁴ => t¹⁴ | LH_N  => error⁰}: 846
//│ 	case ls¹⁵ of {LH_C h¹⁵ t¹⁵ => t¹⁵ | LH_N  => error⁰}: 903
//│ [LH_N]: 744 --->
//│ 	DeadCodeCons
//│ 	case ys¹⁰ of {LH_C hy⁵ ty⁵ => case force⁰(xs⁵) of {LH_C hx⁵ tx⁵ => let t⁷ = zipWith_lz_nl_lh_₀(f⁸, tx⁵, ty⁵)
//│ in let h⁷ = f⁸(hx⁵, hy⁵)
//│ in (fun _lh_dummy⁶ -> (h⁷ + sum_lh_₂(t⁷))) | LH_N  => (fun _lh_dummy⁷ -> 0)} | LH_N  => (fun _lh_dummy⁸ -> 0)}: 513
//│ 	case ys¹² of {LH_C hy⁶ ty⁶ => [LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 625
//│ 	case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 745
//│ 	case xs⁸ of {LH_C h⁹ t⁹ => let tx⁷ = mappend_lh_₀(t⁹, ys¹⁵)
//│ in let hx⁷ = h⁹
//│ in (fun f¹³ -> (fun ys¹⁶ -> case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]})) | LH_N  => ys¹⁵}: 751
//│ 	case ls¹³ of {LH_C h¹⁴ t¹⁴ => t¹⁴ | LH_N  => error⁰}: 846
//│ 	case ls¹⁵ of {LH_C h¹⁵ t¹⁵ => t¹⁵ | LH_N  => error⁰}: 903
//│ [LH_C f¹⁴(h¹⁰) map_lz_lh_₂(f¹⁴, t¹⁰)]: 774 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁸) of {LH_C h¹⁰ t¹⁰ => [LH_C f¹⁴(h¹⁰) map_lz_lh_₂(f¹⁴, t¹⁰)] | LH_N  => [LH_N]}: 776
//│ 	case force⁰(ys¹⁹) of {LH_C hy⁹ ty⁹ => let _lh_listcomp_fun_ls_t² = zip_nl_lz_lh_₀(tx⁹, ty⁹)
//│ in let _lh_listcomp_fun_ls_h¹ = let _lh_bernoulli_LH_P2_1¹ = hy⁹
//│ in let _lh_bernoulli_LH_P2_0¹ = hx⁹
//│ in (fun _lh_listcomp_fun_ls_t³ -> (fun _lh_listcomp_fun⁶ -> (fun powers⁶ -> let t¹⁶ = _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)
//│ in let h¹⁶ = ((sum_lh_₀(zipWith_lz_nl_lh_₀((fun a⁹ -> (fun b⁷ -> (a⁹ * b⁷))), powers⁶, tail_lh_₀(tail_lh_₁(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1))
//│ in (fun _lh_dummy⁹ -> (h¹⁶ + sum_lh_₁(t¹⁶))))))
//│ in (fun _lh_listcomp_fun⁷ -> (fun powers⁷ -> _lh_listcomp_fun_ls_h¹(_lh_listcomp_fun_ls_t², _lh_listcomp_fun⁷, powers⁷))) | LH_N  => (fun _lh_listcomp_fun⁸ -> (fun powers⁸ -> (fun _lh_dummy¹⁰ -> 0)))}: 994
//│ [LH_N]: 775 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁸) of {LH_C h¹⁰ t¹⁰ => [LH_C f¹⁴(h¹⁰) map_lz_lh_₂(f¹⁴, t¹⁰)] | LH_N  => [LH_N]}: 776
//│ 	case force⁰(ys¹⁹) of {LH_C hy⁹ ty⁹ => let _lh_listcomp_fun_ls_t² = zip_nl_lz_lh_₀(tx⁹, ty⁹)
//│ in let _lh_listcomp_fun_ls_h¹ = let _lh_bernoulli_LH_P2_1¹ = hy⁹
//│ in let _lh_bernoulli_LH_P2_0¹ = hx⁹
//│ in (fun _lh_listcomp_fun_ls_t³ -> (fun _lh_listcomp_fun⁶ -> (fun powers⁶ -> let t¹⁶ = _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)
//│ in let h¹⁶ = ((sum_lh_₀(zipWith_lz_nl_lh_₀((fun a⁹ -> (fun b⁷ -> (a⁹ * b⁷))), powers⁶, tail_lh_₀(tail_lh_₁(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1))
//│ in (fun _lh_dummy⁹ -> (h¹⁶ + sum_lh_₁(t¹⁶))))))
//│ in (fun _lh_listcomp_fun⁷ -> (fun powers⁷ -> _lh_listcomp_fun_ls_h¹(_lh_listcomp_fun_ls_t², _lh_listcomp_fun⁷, powers⁷))) | LH_N  => (fun _lh_listcomp_fun⁸ -> (fun powers⁸ -> (fun _lh_dummy¹⁰ -> 0)))}: 994
//│ [LH_C f¹⁵(h¹²) map_lz_lh_₁(f¹⁵, t¹²)]: 830 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁵) of {LH_C h⁸ t⁸ => [LH_C f¹¹(h⁸) map_lz_lh_₀(f¹¹, t⁸)] | LH_N  => [LH_N]}: 656
//│ 	case force⁰(ls¹¹) of {LH_C h¹² t¹² => [LH_C f¹⁵(h¹²) map_lz_lh_₁(f¹⁵, t¹²)] | LH_N  => [LH_N]}: 832
//│ [LH_N]: 831 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁵) of {LH_C h⁸ t⁸ => [LH_C f¹¹(h⁸) map_lz_lh_₀(f¹¹, t⁸)] | LH_N  => [LH_N]}: 656
//│ 	case force⁰(ls¹¹) of {LH_C h¹² t¹² => [LH_C f¹⁵(h¹²) map_lz_lh_₁(f¹⁵, t¹²)] | LH_N  => [LH_N]}: 832
//│ [LH_C f¹⁷(hx⁸, hy⁸) zipWith_lz_lz_lh_₁(f¹⁷, tx⁸, ty⁸)]: 875 --->
//│ 	DeadCodeCons
//│ 	case force⁰(xs⁵) of {LH_C hx⁵ tx⁵ => let t⁷ = zipWith_lz_nl_lh_₀(f⁸, tx⁵, ty⁵)
//│ in let h⁷ = f⁸(hx⁵, hy⁵)
//│ in (fun _lh_dummy⁶ -> (h⁷ + sum_lh_₂(t⁷))) | LH_N  => (fun _lh_dummy⁷ -> 0)}: 510
//│ [LH_N]: 876 --->
//│ 	DeadCodeCons
//│ 	case force⁰(xs⁵) of {LH_C hx⁵ tx⁵ => let t⁷ = zipWith_lz_nl_lh_₀(f⁸, tx⁵, ty⁵)
//│ in let h⁷ = f⁸(hx⁵, hy⁵)
//│ in (fun _lh_dummy⁶ -> (h⁷ + sum_lh_₂(t⁷))) | LH_N  => (fun _lh_dummy⁷ -> 0)}: 510
//│ [LH_N]: 878 --->
//│ 	DeadCodeCons
//│ 	case force⁰(xs⁵) of {LH_C hx⁵ tx⁵ => let t⁷ = zipWith_lz_nl_lh_₀(f⁸, tx⁵, ty⁵)
//│ in let h⁷ = f⁸(hx⁵, hy⁵)
//│ in (fun _lh_dummy⁶ -> (h⁷ + sum_lh_₂(t⁷))) | LH_N  => (fun _lh_dummy⁷ -> 0)}: 510
//│ [LH_C a⁷ enumFrom_lh_₀((a⁷ + 1))]: 893 --->
//│ 	case force⁰(ys¹⁸) of {LH_C hy⁸ ty⁸ => [LH_C f¹⁷(hx⁸, hy⁸) zipWith_lz_lz_lh_₁(f¹⁷, tx⁸, ty⁸)] | LH_N  => [LH_N]}: 877
//│ 	case force⁰(ys²³) of {LH_C hy¹⁰ ty¹⁰ => [LH_C f²⁰(hx¹⁰, hy¹⁰) zipWith_lz_lz_lh_₀(f²⁰, tx¹⁰, ty¹⁰)] | LH_N  => [LH_N]}: 1053
//│ 	case force⁰(xs¹³) of {LH_C hx¹⁰ tx¹⁰ => case force⁰(ys²³) of {LH_C hy¹⁰ ty¹⁰ => [LH_C f²⁰(hx¹⁰, hy¹⁰) zipWith_lz_lz_lh_₀(f²⁰, tx¹⁰, ty¹⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 1055
//│ [LH_C x³ iterate_lh_₀(f¹⁸, f¹⁸(x³))]: 1015 --->
//│ 	case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => case force⁰(ys¹⁸) of {LH_C hy⁸ ty⁸ => [LH_C f¹⁷(hx⁸, hy⁸) zipWith_lz_lz_lh_₁(f¹⁷, tx⁸, ty⁸)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 879
//│ [LH_C f²⁰(hx¹⁰, hy¹⁰) zipWith_lz_lz_lh_₀(f²⁰, tx¹⁰, ty¹⁰)]: 1051 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ys¹⁸) of {LH_C hy⁸ ty⁸ => [LH_C f¹⁷(hx⁸, hy⁸) zipWith_lz_lz_lh_₁(f¹⁷, tx⁸, ty⁸)] | LH_N  => [LH_N]}: 877
//│ 	case force⁰(ys²³) of {LH_C hy¹⁰ ty¹⁰ => [LH_C f²⁰(hx¹⁰, hy¹⁰) zipWith_lz_lz_lh_₀(f²⁰, tx¹⁰, ty¹⁰)] | LH_N  => [LH_N]}: 1053
//│ [LH_N]: 1052 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ys¹⁸) of {LH_C hy⁸ ty⁸ => [LH_C f¹⁷(hx⁸, hy⁸) zipWith_lz_lz_lh_₁(f¹⁷, tx⁸, ty⁸)] | LH_N  => [LH_N]}: 877
//│ 	case force⁰(ys²³) of {LH_C hy¹⁰ ty¹⁰ => [LH_C f²⁰(hx¹⁰, hy¹⁰) zipWith_lz_lz_lh_₀(f²⁰, tx¹⁰, ty¹⁰)] | LH_N  => [LH_N]}: 1053
//│ [LH_N]: 1054 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ys¹⁸) of {LH_C hy⁸ ty⁸ => [LH_C f¹⁷(hx⁸, hy⁸) zipWith_lz_lz_lh_₁(f¹⁷, tx⁸, ty⁸)] | LH_N  => [LH_N]}: 877
//│ 	case force⁰(ys²³) of {LH_C hy¹⁰ ty¹⁰ => [LH_C f²⁰(hx¹⁰, hy¹⁰) zipWith_lz_lz_lh_₀(f²⁰, tx¹⁰, ty¹⁰)] | LH_N  => [LH_N]}: 1053
//│ ------------------
//│ case force⁰(xs⁵) of {LH_C hx⁵ tx⁵ => let t⁷ = zipWith_lz_nl_lh_₀(f⁸, tx⁵, ty⁵)
//│ in let h⁷ = f⁸(hx⁵, hy⁵)
//│ in (fun _lh_dummy⁶ -> (h⁷ + sum_lh_₂(t⁷))) | LH_N  => (fun _lh_dummy⁷ -> 0)}: 510 --->
//│ 	[LH_C f¹⁷(hx⁸, hy⁸) zipWith_lz_lz_lh_₁(f¹⁷, tx⁸, ty⁸)]: 875
//│ 	[LH_N]: 876
//│ 	[LH_N]: 878
//│ case ys¹⁰ of {LH_C hy⁵ ty⁵ => case force⁰(xs⁵) of {LH_C hx⁵ tx⁵ => let t⁷ = zipWith_lz_nl_lh_₀(f⁸, tx⁵, ty⁵)
//│ in let h⁷ = f⁸(hx⁵, hy⁵)
//│ in (fun _lh_dummy⁶ -> (h⁷ + sum_lh_₂(t⁷))) | LH_N  => (fun _lh_dummy⁷ -> 0)} | LH_N  => (fun _lh_dummy⁸ -> 0)}: 513 --->
//│ 	[LH_N]: 589
//│ 	[LH_C 1 [LH_N]]: 590
//│ 	[LH_N]: 606
//│ 	[LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)]: 623
//│ 	[LH_N]: 624
//│ 	[LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)]: 743
//│ 	[LH_N]: 744
//│ case ys¹² of {LH_C hy⁶ ty⁶ => [LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 625 --->
//│ 	[LH_N]: 589
//│ 	[LH_C 1 [LH_N]]: 590
//│ 	[LH_C 2 [LH_C 1 [LH_N]]]: 591
//│ 	[LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 592
//│ 	[LH_N]: 606
//│ 	[LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)]: 623
//│ 	[LH_N]: 624
//│ 	[LH_C 0 line¹]: 634
//│ 	[LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)]: 743
//│ 	[LH_N]: 744
//│ case force⁰(ls⁵) of {LH_C h⁸ t⁸ => [LH_C f¹¹(h⁸) map_lz_lh_₀(f¹¹, t⁸)] | LH_N  => [LH_N]}: 656 --->
//│ 	[LH_C enumFrom_lh_₀(2) map_lz_lh_₁((fun p¹ -> zipWith_lz_lz_lh_₀((fun a⁶ -> (fun b⁵ -> (a⁶ * b⁵))), head_lz_lh_₀(powers_lh_₀), p¹)), powers_lh_₀)]: 684
//│ 	[LH_C f¹⁵(h¹²) map_lz_lh_₁(f¹⁵, t¹²)]: 830
//│ 	[LH_N]: 831
//│ case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 745 --->
//│ 	[LH_N]: 589
//│ 	[LH_C 1 [LH_N]]: 590
//│ 	[LH_C 2 [LH_C 1 [LH_N]]]: 591
//│ 	[LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 592
//│ 	[LH_N]: 606
//│ 	[LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)]: 623
//│ 	[LH_N]: 624
//│ 	[LH_C 0 line¹]: 634
//│ 	[LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)]: 743
//│ 	[LH_N]: 744
//│ case xs⁸ of {LH_C h⁹ t⁹ => let tx⁷ = mappend_lh_₀(t⁹, ys¹⁵)
//│ in let hx⁷ = h⁹
//│ in (fun f¹³ -> (fun ys¹⁶ -> case ys¹⁶ of {LH_C hy⁷ ty⁷ => [LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)] | LH_N  => [LH_N]})) | LH_N  => ys¹⁵}: 751 --->
//│ 	[LH_N]: 589
//│ 	[LH_C 1 [LH_N]]: 590
//│ 	[LH_C 2 [LH_C 1 [LH_N]]]: 591
//│ 	[LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 592
//│ 	[LH_N]: 606
//│ 	[LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)]: 623
//│ 	[LH_N]: 624
//│ 	[LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)]: 743
//│ 	[LH_N]: 744
//│ case force⁰(ls⁸) of {LH_C h¹⁰ t¹⁰ => [LH_C f¹⁴(h¹⁰) map_lz_lh_₂(f¹⁴, t¹⁰)] | LH_N  => [LH_N]}: 776 --->
//│ 	[LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz_lh_₂((fun line¹ -> zipWith_lh_₁((fun a⁵ -> (fun b⁴ -> (a⁵ + b⁴))), mappend_lh_₀(line¹, let tx⁶ = (fun f⁹ -> (fun ys¹¹ -> [LH_N]))
//│ in let hx⁶ = 0
//│ in (fun f¹⁰ -> (fun ys¹² -> case ys¹² of {LH_C hy⁶ ty⁶ => [LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)] | LH_N  => [LH_N]}))), [LH_C 0 line¹])), pascal_lh_₀)]: 640
//│ 	[LH_C f¹⁴(h¹⁰) map_lz_lh_₂(f¹⁴, t¹⁰)]: 774
//│ 	[LH_N]: 775
//│ case force⁰(ls¹⁰) of {LH_C h¹¹ t¹¹ => if (n³ == 0) then h¹¹ else atIndex_lz_lh_₀((n³ - 1), t¹¹) | LH_N  => error⁰}: 814 --->
//│ 	[LH_C f¹¹(h⁸) map_lz_lh_₀(f¹¹, t⁸)]: 654
//│ 	[LH_N]: 655
//│ case force⁰(ls¹¹) of {LH_C h¹² t¹² => [LH_C f¹⁵(h¹²) map_lz_lh_₁(f¹⁵, t¹²)] | LH_N  => [LH_N]}: 832 --->
//│ 	[LH_C enumFrom_lh_₀(2) map_lz_lh_₁((fun p¹ -> zipWith_lz_lz_lh_₀((fun a⁶ -> (fun b⁵ -> (a⁶ * b⁵))), head_lz_lh_₀(powers_lh_₀), p¹)), powers_lh_₀)]: 684
//│ 	[LH_C f¹⁵(h¹²) map_lz_lh_₁(f¹⁵, t¹²)]: 830
//│ 	[LH_N]: 831
//│ case force⁰(ls¹²) of {LH_C h¹³ t¹³ => h¹³ | LH_N  => error⁰}: 841 --->
//│ 	[LH_C enumFrom_lh_₀(2) map_lz_lh_₁((fun p¹ -> zipWith_lz_lz_lh_₀((fun a⁶ -> (fun b⁵ -> (a⁶ * b⁵))), head_lz_lh_₀(powers_lh_₀), p¹)), powers_lh_₀)]: 684
//│ case ls¹³ of {LH_C h¹⁴ t¹⁴ => t¹⁴ | LH_N  => error⁰}: 846 --->
//│ 	[LH_C 2 [LH_C 1 [LH_N]]]: 591
//│ 	[LH_N]: 606
//│ 	[LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)]: 623
//│ 	[LH_N]: 624
//│ 	[LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)]: 743
//│ 	[LH_N]: 744
//│ case force⁰(ys¹⁸) of {LH_C hy⁸ ty⁸ => [LH_C f¹⁷(hx⁸, hy⁸) zipWith_lz_lz_lh_₁(f¹⁷, tx⁸, ty⁸)] | LH_N  => [LH_N]}: 877 --->
//│ 	[LH_C a⁷ enumFrom_lh_₀((a⁷ + 1))]: 893
//│ 	[LH_C f²⁰(hx¹⁰, hy¹⁰) zipWith_lz_lz_lh_₀(f²⁰, tx¹⁰, ty¹⁰)]: 1051
//│ 	[LH_N]: 1052
//│ 	[LH_N]: 1054
//│ case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => case force⁰(ys¹⁸) of {LH_C hy⁸ ty⁸ => [LH_C f¹⁷(hx⁸, hy⁸) zipWith_lz_lz_lh_₁(f¹⁷, tx⁸, ty⁸)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 879 --->
//│ 	[LH_C x³ iterate_lh_₀(f¹⁸, f¹⁸(x³))]: 1015
//│ case ls¹⁵ of {LH_C h¹⁵ t¹⁵ => t¹⁵ | LH_N  => error⁰}: 903 --->
//│ 	[LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]]: 592
//│ 	[LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)]: 623
//│ 	[LH_N]: 624
//│ 	[LH_C f¹³(hx⁷, hy⁷) zipWith_lh_₀(f¹³, tx⁷, ty⁷)]: 743
//│ 	[LH_N]: 744
//│ case force⁰(ys¹⁹) of {LH_C hy⁹ ty⁹ => let _lh_listcomp_fun_ls_t² = zip_nl_lz_lh_₀(tx⁹, ty⁹)
//│ in let _lh_listcomp_fun_ls_h¹ = let _lh_bernoulli_LH_P2_1¹ = hy⁹
//│ in let _lh_bernoulli_LH_P2_0¹ = hx⁹
//│ in (fun _lh_listcomp_fun_ls_t³ -> (fun _lh_listcomp_fun⁶ -> (fun powers⁶ -> let t¹⁶ = _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)
//│ in let h¹⁶ = ((sum_lh_₀(zipWith_lz_nl_lh_₀((fun a⁹ -> (fun b⁷ -> (a⁹ * b⁷))), powers⁶, tail_lh_₀(tail_lh_₁(_lh_bernoulli_LH_P2_1¹)))) - _lh_bernoulli_LH_P2_0¹) / (_lh_bernoulli_LH_P2_0¹ + 1))
//│ in (fun _lh_dummy⁹ -> (h¹⁶ + sum_lh_₁(t¹⁶))))))
//│ in (fun _lh_listcomp_fun⁷ -> (fun powers⁷ -> _lh_listcomp_fun_ls_h¹(_lh_listcomp_fun_ls_t², _lh_listcomp_fun⁷, powers⁷))) | LH_N  => (fun _lh_listcomp_fun⁸ -> (fun powers⁸ -> (fun _lh_dummy¹⁰ -> 0)))}: 994 --->
//│ 	[LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz_lh_₂((fun line¹ -> zipWith_lh_₁((fun a⁵ -> (fun b⁴ -> (a⁵ + b⁴))), mappend_lh_₀(line¹, let tx⁶ = (fun f⁹ -> (fun ys¹¹ -> [LH_N]))
//│ in let hx⁶ = 0
//│ in (fun f¹⁰ -> (fun ys¹² -> case ys¹² of {LH_C hy⁶ ty⁶ => [LH_C f¹⁰(hx⁶, hy⁶) zipWith_lh_₂(f¹⁰, tx⁶, ty⁶)] | LH_N  => [LH_N]}))), [LH_C 0 line¹])), pascal_lh_₀)]: 640
//│ 	[LH_C f¹⁴(h¹⁰) map_lz_lh_₂(f¹⁴, t¹⁰)]: 774
//│ 	[LH_N]: 775
//│ case force⁰(ys²³) of {LH_C hy¹⁰ ty¹⁰ => [LH_C f²⁰(hx¹⁰, hy¹⁰) zipWith_lz_lz_lh_₀(f²⁰, tx¹⁰, ty¹⁰)] | LH_N  => [LH_N]}: 1053 --->
//│ 	[LH_C a⁷ enumFrom_lh_₀((a⁷ + 1))]: 893
//│ 	[LH_C f²⁰(hx¹⁰, hy¹⁰) zipWith_lz_lz_lh_₀(f²⁰, tx¹⁰, ty¹⁰)]: 1051
//│ 	[LH_N]: 1052
//│ 	[LH_N]: 1054
//│ case force⁰(xs¹³) of {LH_C hx¹⁰ tx¹⁰ => case force⁰(ys²³) of {LH_C hy¹⁰ ty¹⁰ => [LH_C f²⁰(hx¹⁰, hy¹⁰) zipWith_lz_lz_lh_₀(f²⁰, tx¹⁰, ty¹⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 1055 --->
//│ 	[LH_C a⁷ enumFrom_lh_₀((a⁷ + 1))]: 893
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C f¹¹(h⁸) map_lz_lh_₀(f¹¹, t⁸)]: 654 --->
//│ 	case force⁰(ls¹⁰) of {LH_C h¹¹ t¹¹ => if (n³ == 0) then h¹¹ else atIndex_lz_lh_₀((n³ - 1), t¹¹) | LH_N  => error⁰}: 814
//│ [LH_N]: 655 --->
//│ 	case force⁰(ls¹⁰) of {LH_C h¹¹ t¹¹ => if (n³ == 0) then h¹¹ else atIndex_lz_lh_₀((n³ - 1), t¹¹) | LH_N  => error⁰}: 814
//│ [LH_C x³ iterate_lh_₀(f¹⁸, f¹⁸(x³))]: 1015 --->
//│ 	case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => case force⁰(ys¹⁸) of {LH_C hy⁸ ty⁸ => [LH_C f¹⁷(hx⁸, hy⁸) zipWith_lz_lz_lh_₁(f¹⁷, tx⁸, ty⁸)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 879
//│ ------------------
//│ case force⁰(ls¹⁰) of {LH_C h¹¹ t¹¹ => if (n³ == 0) then h¹¹ else atIndex_lz_lh_₀((n³ - 1), t¹¹) | LH_N  => error⁰}: 814 --->
//│ 	[LH_C f¹¹(h⁸) map_lz_lh_₀(f¹¹, t⁸)]: 654
//│ 	[LH_N]: 655
//│ case force⁰(xs¹⁰) of {LH_C hx⁸ tx⁸ => case force⁰(ys¹⁸) of {LH_C hy⁸ ty⁸ => [LH_C f¹⁷(hx⁸, hy⁸) zipWith_lz_lz_lh_₁(f¹⁷, tx⁸, ty⁸)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 879 --->
//│ 	[LH_C x³ iterate_lh_₀(f¹⁸, f¹⁸(x³))]: 1015
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testBernoulli_nofib_lh_₀(primId⁰(1500))
//│ def testBernoulli_nofib_lh_₀(_lh_testBernoulli_nofib_arg1²) = 
//│ 	bernoulli_lh_₀(_lh_testBernoulli_nofib_arg1²)
//│ 	where
//│ 	def bernoulli_lh_₀(_lh_bernoulli_arg1²) = 
//│ 		case _lh_bernoulli_arg1² of {
//│ 			0  => 1
//│ 			| 1  => (0 - (1 / 2))
//│ 			| _  => if ((_lh_bernoulli_arg1² % 2) == 1) then 0 else 
//│ 				let powers¹⁰ = atIndex_lz_lh_₀((_lh_bernoulli_arg1² - 1), force⁰(neg_powers_lh_₀))
//│ 				in (((0 - 1) / 2) + sum_lh_₃(
//│ 					let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun¹⁰, powers¹⁰))
//│ 					in _lh_listcomp_fun¹⁰(zip_nl_lz_lh_₁(enumFromTo_lh_₀(2, _lh_bernoulli_arg1²), pascal_lh_₀))))}
//│ 		where
//│ 		def atIndex_lz_lh_₀(n⁴, ls¹⁸) = 
//│ 			if (n⁴ < 0) then error⁰ else force⁰(ls¹⁸, n⁴)
//│ 		def enumFromTo_lh_₀(a¹², b¹⁰) = 
//│ 			if (a¹² <= b¹⁰) then 
//│ 				let tx¹⁴ = enumFromTo_lh_₀((a¹² + 1), b¹⁰)
//│ 				in let hx¹⁴ = a¹²
//│ 				in (fun ys³⁵ -> case force⁰(ys³⁵) of {
//│ 					LH_C hy⁹ ty⁹ => 
//│ 						let _lh_listcomp_fun_ls_t⁴ = zip_nl_lz_lh_₀(tx¹⁴, ty⁹)
//│ 						in let _lh_listcomp_fun_ls_h² = 	
//│ 							let _lh_bernoulli_LH_P2_1² = hy⁹
//│ 							in let _lh_bernoulli_LH_P2_0² = hx¹⁴
//│ 							in (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun¹¹ -> (fun powers¹¹ -> 
//│ 								let t¹⁹ = _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t⁵)
//│ 								in let h¹⁹ = ((sum_lh_₀(zipWith_lz_nl_lh_₀((fun a¹³ -> (fun b¹¹ -> (a¹³ * b¹¹))), powers¹¹, tail_lh_₀(tail_lh_₁(_lh_bernoulli_LH_P2_1²)))) - _lh_bernoulli_LH_P2_0²) / (_lh_bernoulli_LH_P2_0² + 1))
//│ 								in (fun _lh_dummy¹⁵ -> (h¹⁹ + sum_lh_₁(t¹⁹))))))
//│ 						in (fun _lh_listcomp_fun¹² -> (fun powers¹² -> _lh_listcomp_fun_ls_h²(_lh_listcomp_fun_ls_t⁴, _lh_listcomp_fun¹², powers¹²)))
//│ 					| LH_N  => (fun _lh_listcomp_fun¹³ -> (fun powers¹³ -> (fun _lh_dummy¹⁶ -> 0)))}) else (fun ys³⁶ -> (fun _lh_listcomp_fun¹⁴ -> (fun powers¹⁴ -> (fun _lh_dummy¹⁷ -> 0))))
//│ 			where
//│ 			def sum_lh_₀(ls²⁴) = 
//│ 				ls²⁴(99)
//│ 			def sum_lh_₁(ls²⁵) = 
//│ 				ls²⁵(99)
//│ 			def tail_lh_₀(ls¹⁶) = 
//│ 				case ls¹⁶ of {
//│ 					LH_C h¹⁴ t¹⁴ => t¹⁴
//│ 					| LH_N  => error⁰}
//│ 			def tail_lh_₁(ls²⁶) = 
//│ 				case ls²⁶ of {
//│ 					LH_C h¹⁵ t¹⁵ => t¹⁵
//│ 					| LH_N  => error⁰}
//│ 			def zipWith_lz_nl_lh_₀(f²⁵, xs¹⁴, ys²⁷) = 
//│ 				case ys²⁷ of {
//│ 					LH_C hy⁵ ty⁵ => case force⁰(xs¹⁴) of {
//│ 						LH_C hx⁵ tx⁵ => 
//│ 							let t¹⁷ = zipWith_lz_nl_lh_₀(f²⁵, tx⁵, ty⁵)
//│ 							in let h¹⁷ = f²⁵(hx⁵, hy⁵)
//│ 							in (fun _lh_dummy¹² -> (h¹⁷ + sum_lh_₂(t¹⁷)))
//│ 						| LH_N  => (fun _lh_dummy¹³ -> 0)}
//│ 					| LH_N  => (fun _lh_dummy¹⁴ -> 0)}
//│ 				where
//│ 				def sum_lh_₂(ls¹⁹) = 
//│ 					ls¹⁹(99)
//│ 			def zip_nl_lz_lh_₀(xs¹⁷, ys³⁰) = 
//│ 				xs¹⁷(ys³⁰)
//│ 		def neg_powers_lh_₀ = 
//│ 			lazy⁰(map_lz_lh_₀(zipWith_lz_lz_lh_₁((fun n⁷ -> (fun x⁵ -> if n⁷ then x⁵ else (0 - x⁵))), iterate_lh_₀(not⁰, [True])), powers_lh_₀))
//│ 			where
//│ 			def iterate_lh_₀(f²¹, x⁴) = 
//│ 				lazy⁰(
//│ 					let tx¹¹ = iterate_lh_₀(f²¹, f²¹(x⁴))
//│ 					in let hx¹¹ = x⁴
//│ 					in (fun f²² -> (fun ys²⁴ -> case force⁰(ys²⁴) of {
//│ 						LH_C hy⁸ ty⁸ => [LH_C f²²(hx¹¹, hy⁸) zipWith_lz_lz_lh_₁(f²², tx¹¹, ty⁸)]
//│ 						| LH_N  => [LH_N]})))
//│ 			def map_lz_lh_₀(f³², ls²³) = 
//│ 				lazy⁰(case force⁰(ls²³) of {
//│ 					LH_C h⁸ t⁸ => 
//│ 						let t¹⁸ = map_lz_lh_₀(f³², t⁸)
//│ 						in let h¹⁸ = f³²(h⁸)
//│ 						in (fun n⁵ -> if (n⁵ == 0) then h¹⁸ else atIndex_lz_lh_₀((n⁵ - 1), t¹⁸))
//│ 					| LH_N  => (fun n⁶ -> error⁰)})
//│ 			def powers_lh_₀ = 
//│ 				lazy⁰([LH_C enumFrom_lh_₀(2) map_lz_lh_₁((fun p² -> zipWith_lz_lz_lh_₀((fun a¹¹ -> (fun b⁹ -> (a¹¹ * b⁹))), head_lz_lh_₀(powers_lh_₀), p²)), powers_lh_₀)])
//│ 				where
//│ 				def enumFrom_lh_₀(a¹⁴) = 
//│ 					lazy⁰([LH_C a¹⁴ enumFrom_lh_₀((a¹⁴ + 1))])
//│ 				def head_lz_lh_₀(ls²¹) = 
//│ 					case force⁰(ls²¹) of {
//│ 						LH_C h¹³ t¹³ => h¹³
//│ 						| LH_N  => error⁰}
//│ 				def map_lz_lh_₁(f²⁹, ls²²) = 
//│ 					lazy⁰(case force⁰(ls²²) of {
//│ 						LH_C h¹² t¹² => [LH_C f²⁹(h¹²) map_lz_lh_₁(f²⁹, t¹²)]
//│ 						| LH_N  => [LH_N]})
//│ 				def zipWith_lz_lz_lh_₀(f²⁶, xs¹⁵, ys²⁸) = 
//│ 					lazy⁰(case force⁰(xs¹⁵) of {
//│ 						LH_C hx¹⁰ tx¹⁰ => case force⁰(ys²⁸) of {
//│ 							LH_C hy¹⁰ ty¹⁰ => [LH_C f²⁶(hx¹⁰, hy¹⁰) zipWith_lz_lz_lh_₀(f²⁶, tx¹⁰, ty¹⁰)]
//│ 							| LH_N  => [LH_N]}
//│ 						| LH_N  => [LH_N]})
//│ 			def zipWith_lz_lz_lh_₁(f³⁴, xs²², ys³⁸) = 
//│ 				lazy⁰(force⁰(xs²², f³⁴, ys³⁸))
//│ 		def pascal_lh_₀ = 
//│ 			lazy⁰([LH_C [LH_C 1 [LH_C 2 [LH_C 1 [LH_N]]]] map_lz_lh_₂((fun line² -> zipWith_lh_₁((fun a¹⁰ -> (fun b⁸ -> (a¹⁰ + b⁸))), mappend_lh_₀(line², 
//│ 				let tx¹² = (fun f²³ -> (fun ys²⁵ -> [LH_N]))
//│ 				in let hx¹² = 0
//│ 				in (fun f²⁴ -> (fun ys²⁶ -> case ys²⁶ of {
//│ 					LH_C hy⁶ ty⁶ => [LH_C f²⁴(hx¹², hy⁶) zipWith_lh_₂(f²⁴, tx¹², ty⁶)]
//│ 					| LH_N  => [LH_N]}))), [LH_C 0 line²])), pascal_lh_₀)])
//│ 			where
//│ 			def map_lz_lh_₂(f²⁸, ls²⁰) = 
//│ 				lazy⁰(case force⁰(ls²⁰) of {
//│ 					LH_C h¹⁰ t¹⁰ => [LH_C f²⁸(h¹⁰) map_lz_lh_₂(f²⁸, t¹⁰)]
//│ 					| LH_N  => [LH_N]})
//│ 			def mappend_lh_₀(xs¹⁹, ys³²) = 
//│ 				case xs¹⁹ of {
//│ 					LH_C h⁹ t⁹ => 
//│ 						let tx¹³ = mappend_lh_₀(t⁹, ys³²)
//│ 						in let hx¹³ = h⁹
//│ 						in (fun f³⁰ -> (fun ys³³ -> case ys³³ of {
//│ 							LH_C hy⁷ ty⁷ => [LH_C f³⁰(hx¹³, hy⁷) zipWith_lh_₀(f³⁰, tx¹³, ty⁷)]
//│ 							| LH_N  => [LH_N]}))
//│ 					| LH_N  => ys³²}
//│ 				where
//│ 				def zipWith_lh_₀(f³¹, xs²⁰, ys³⁴) = 
//│ 					xs²⁰(f³¹, ys³⁴)
//│ 			def zipWith_lh_₁(f²⁷, xs¹⁶, ys²⁹) = 
//│ 				xs¹⁶(f²⁷, ys²⁹)
//│ 			def zipWith_lh_₂(f³³, xs²¹, ys³⁷) = 
//│ 				xs²¹(f³³, ys³⁷)
//│ 		def sum_lh_₃(ls¹⁷) = 
//│ 			ls¹⁷(99)
//│ 		def zip_nl_lz_lh_₁(xs¹⁸, ys³¹) = 
//│ 			xs¹⁸(ys³¹)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

