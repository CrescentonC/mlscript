

:lhInHaskell
:lhGenOCaml
compareTuple2 (a, b) (c, d) = a <= c
delete (x:xs) e = if polyEq x e then delete xs e else x:(delete xs e)
delete [] e = []
listDiff = foldl delete
sort :: (Ord a) => [a] -> [a]
sort  l = qsort (\a b -> compareTuple2 a b) l []
qsort le []     r = r
qsort le [x]    r = x:r
qsort le (x:xs) r = qpart le x xs [] [] r
qpart le x [] rlt rge r =
    rqsort le rlt (x:rqsort le rge r)
qpart le x (y:ys) rlt rge r =
    if le x y then
    qpart le x ys rlt (y:rge) r
    else
    qpart le x ys (y:rlt) rge r
rqsort le []     r = r
rqsort le [x]    r = x:r
rqsort le (x:xs) r = rqpart le x xs [] [] r
rqpart le x [] rle rgt r =
    qsort le rle (x:qsort le rgt r)
rqpart le x (y:ys) rle rgt r =
    if le y x then
    rqpart le x ys (y:rle) rgt r
    else
    rqpart le x ys rle (y:rgt) r
perms m [] = []
perms 1 l  = map (\x -> x:[]) l
perms m (n:ns) = map (\x -> n:x) (perms (m-1) ns) ++ perms m ns
awards scores = 
  let sumscores = map (\p -> (sum p, p)) (perms 3 scores) in
  let atleast = \threshold -> (filter (\sum_p -> case sum_p of { (sum, p) -> sum >= threshold }) sumscores) in
  let award = \name_threshold -> case name_threshold of { (name, threshold) -> map (\ps -> (name,ps)) (sort (atleast threshold)) } in
    award ("Gold",70) ++ award ("Silver",60) ++ award ("Bronze",50)
findawards scores = case (awards scores) of {
  [] -> [];
  head:tail -> case head of  {
    (award,(sum,perm)) -> (award,(sum,perm)) : (findawards (listDiff scores perm))
  }
}
findallawards competitors =
    map (\name_scores -> case name_scores of { (name, scores) -> (name, findawards scores) }) competitors
competitors i =
  [ ("Simon",[35,27,40,i,34,21])
  , ("Hans",[23,19,45,i,17,10,5,8,14])
  , ("Phil",[1,18,i,20,21,19,34,8,16,21])
  , ("Kevin",[9,23,17,54,i,41,9,18,14])
  ]
testAwards_nofib n = map (\x -> findallawards (competitors (x `mod` 100))) (primId [1..n])
testAwards_nofib $ primId 500
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> after expansion >>>>>>>>>>
//│ testAwards_nofib_lh_₁(primId⁰(500))
//│ def awards_lh_₁(_lh_awards_arg1⁰) = 
//│ 	let sumscores⁰ = map_lh_₄((fun p⁰ -> [LH_P2 sum_lh_₁(p⁰) p⁰]), perms_lh_₁(3, _lh_awards_arg1⁰))
//│ 	in let atleast⁰ = (fun threshold⁰ -> filter_lh_₁((fun sum_p⁰ -> 
//│ 		let _lh_matchIdent⁰ = sum_p⁰
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_P2 _lh_awards_LH_P2_0⁰ _lh_awards_LH_P2_1⁰ => (_lh_awards_LH_P2_0⁰ >= threshold⁰)}), sumscores⁰))
//│ 	in let award⁰ = (fun name_threshold⁰ -> 
//│ 		let _lh_matchIdent¹ = name_threshold⁰
//│ 		in case _lh_matchIdent¹ of {
//│ 			LH_P2 _lh_awards_LH_P2_0¹ _lh_awards_LH_P2_1¹ => map_lh_₃((fun ps⁰ -> [LH_P2 _lh_awards_LH_P2_0¹ ps⁰]), sort_lh_₁(atleast⁰(_lh_awards_LH_P2_1¹)))})
//│ 	in mappend_lh_₁(mappend_lh_₂(award⁰([LH_P2 [LH_C 'G' [LH_C 'o' [LH_C 'l' [LH_C 'd' [LH_N]]]]] 70]), award⁰([LH_P2 [LH_C 'S' [LH_C 'i' [LH_C 'l' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_N]]]]]]] 60])), award⁰([LH_P2 [LH_C 'B' [LH_C 'r' [LH_C 'o' [LH_C 'n' [LH_C 'z' [LH_C 'e' [LH_N]]]]]]] 50]))
//│ def compareTuple2_lh_₁(_lh_compareTuple2_arg1⁰, _lh_compareTuple2_arg2⁰) = case _lh_compareTuple2_arg1⁰ of {
//│ 	LH_P2 _lh_compareTuple2_LH_P2_0⁰ _lh_compareTuple2_LH_P2_1⁰ => case _lh_compareTuple2_arg2⁰ of {
//│ 		LH_P2 _lh_compareTuple2_LH_P2_0¹ _lh_compareTuple2_LH_P2_1¹ => (_lh_compareTuple2_LH_P2_0⁰ <= _lh_compareTuple2_LH_P2_0¹)}}
//│ def competitors_lh_₁(_lh_competitors_arg1⁰) = [LH_C [LH_P2 [LH_C 'S' [LH_C 'i' [LH_C 'm' [LH_C 'o' [LH_C 'n' [LH_N]]]]]] [LH_C 35 [LH_C 27 [LH_C 40 [LH_C _lh_competitors_arg1⁰ [LH_C 34 [LH_C 21 [LH_N]]]]]]]] [LH_C [LH_P2 [LH_C 'H' [LH_C 'a' [LH_C 'n' [LH_C 's' [LH_N]]]]] [LH_C 23 [LH_C 19 [LH_C 45 [LH_C _lh_competitors_arg1⁰ [LH_C 17 [LH_C 10 [LH_C 5 [LH_C 8 [LH_C 14 [LH_N]]]]]]]]]]] [LH_C [LH_P2 [LH_C 'P' [LH_C 'h' [LH_C 'i' [LH_C 'l' [LH_N]]]]] [LH_C 1 [LH_C 18 [LH_C _lh_competitors_arg1⁰ [LH_C 20 [LH_C 21 [LH_C 19 [LH_C 34 [LH_C 8 [LH_C 16 [LH_C 21 [LH_N]]]]]]]]]]]] [LH_C [LH_P2 [LH_C 'K' [LH_C 'e' [LH_C 'v' [LH_C 'i' [LH_C 'n' [LH_N]]]]]] [LH_C 9 [LH_C 23 [LH_C 17 [LH_C 54 [LH_C _lh_competitors_arg1⁰ [LH_C 41 [LH_C 9 [LH_C 18 [LH_C 14 [LH_N]]]]]]]]]]] [LH_N]]]]]
//│ def delete_lh_₁(_lh_delete_arg1⁰, _lh_delete_arg2⁰) = case _lh_delete_arg1⁰ of {
//│ 	LH_C _lh_delete_LH_C_0⁰ _lh_delete_LH_C_1⁰ => if polyEq⁰(_lh_delete_LH_C_0⁰, _lh_delete_arg2⁰) then delete_lh_₁(_lh_delete_LH_C_1⁰, _lh_delete_arg2⁰) else [LH_C _lh_delete_LH_C_0⁰ delete_lh_₁(_lh_delete_LH_C_1⁰, _lh_delete_arg2⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def enumFromTo_lh_₁(a², b¹) = if (a² <= b¹) then [LH_C a² enumFromTo_lh_₁((a² + 1), b¹)] else [LH_N]
//│ def filter_lh_₁(f², ls⁴) = case ls⁴ of {
//│ 	LH_C h⁴ t⁴ => if f²(h⁴) then [LH_C h⁴ filter_lh_₁(f², t⁴)] else filter_lh_₁(f², t⁴)
//│ 	| LH_N  => [LH_N]}
//│ def findallawards_lh_₁(_lh_findallawards_arg1⁰) = map_lh_₂((fun name_scores⁰ -> 
//│ 	let _lh_matchIdent⁴ = name_scores⁰
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_P2 _lh_findallawards_LH_P2_0⁰ _lh_findallawards_LH_P2_1⁰ => [LH_P2 _lh_findallawards_LH_P2_0⁰ findawards_lh_₁(_lh_findallawards_LH_P2_1⁰)]}), _lh_findallawards_arg1⁰)
//│ def findawards_lh_₁(_lh_findawards_arg1⁰) = 
//│ 	let _lh_matchIdent² = awards_lh_₁(_lh_findawards_arg1⁰)
//│ 	in case _lh_matchIdent² of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_findawards_LH_C_0⁰ _lh_findawards_LH_C_1⁰ => 
//│ 			let _lh_matchIdent³ = _lh_findawards_LH_C_0⁰
//│ 			in case _lh_matchIdent³ of {
//│ 				LH_P2 _lh_findawards_LH_P2_0⁰ _lh_findawards_LH_P2_1⁰ => case _lh_findawards_LH_P2_1⁰ of {
//│ 					LH_P2 _lh_findawards_LH_P2_0¹ _lh_findawards_LH_P2_1¹ => [LH_C [LH_P2 _lh_findawards_LH_P2_0⁰ [LH_P2 _lh_findawards_LH_P2_0¹ _lh_findawards_LH_P2_1¹]] findawards_lh_₁(listDiff_lh_₁(_lh_findawards_arg1⁰, _lh_findawards_LH_P2_1¹))]}}}
//│ def foldl_lh_₁(f⁵, i⁰, ls⁷) = case ls⁷ of {
//│ 	LH_C h⁹ t⁹ => foldl_lh_₁(f⁵, f⁵(i⁰, h⁹), t⁹)
//│ 	| LH_N  => i⁰}
//│ def listDiff_lh_₁ = foldl_lh_₁(delete_lh_₁)
//│ def map_lh_₁(f⁷, ls⁹) = case ls⁹ of {
//│ 	LH_C h¹¹ t¹¹ => [LH_C f⁷(h¹¹) map_lh_₁(f⁷, t¹¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f⁶, ls⁸) = case ls⁸ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C f⁶(h¹⁰) map_lh_₂(f⁶, t¹⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f⁴, ls⁶) = case ls⁶ of {
//│ 	LH_C h⁷ t⁷ => [LH_C f⁴(h⁷) map_lh_₃(f⁴, t⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f³, ls⁵) = case ls⁵ of {
//│ 	LH_C h⁶ t⁶ => [LH_C f³(h⁶) map_lh_₄(f³, t⁶)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f¹, ls²) = case ls² of {
//│ 	LH_C h² t² => [LH_C f¹(h²) map_lh_₅(f¹, t²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f⁰, ls¹) = case ls¹ of {
//│ 	LH_C h¹ t¹ => [LH_C f⁰(h¹) map_lh_₆(f⁰, t¹)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs², ys²) = case xs² of {
//│ 	LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₁(t⁸, ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₂(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₂(t⁵, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₃(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh_₃(t³, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def perms_lh_₁(_lh_perms_arg1⁰, _lh_perms_arg2⁰) = case _lh_perms_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| _  => case _lh_perms_arg1⁰ of {
//│ 		1  => map_lh_₅((fun x⁰ -> [LH_C x⁰ [LH_N]]), _lh_perms_arg2⁰)
//│ 		| _  => case _lh_perms_arg2⁰ of {
//│ 			LH_C _lh_perms_LH_C_0⁰ _lh_perms_LH_C_1⁰ => mappend_lh_₃(map_lh_₆((fun x¹ -> [LH_C _lh_perms_LH_C_0⁰ x¹]), perms_lh_₁((_lh_perms_arg1⁰ - 1), _lh_perms_LH_C_1⁰)), perms_lh_₁(_lh_perms_arg1⁰, _lh_perms_LH_C_1⁰))}}}
//│ def qpart_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg2⁰, _lh_qpart_arg3⁰, _lh_qpart_arg4⁰, _lh_qpart_arg5⁰, _lh_qpart_arg6⁰) = case _lh_qpart_arg3⁰ of {
//│ 	LH_N  => rqsort_lh_₂(_lh_qpart_arg1⁰, _lh_qpart_arg4⁰, [LH_C _lh_qpart_arg2⁰ rqsort_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg5⁰, _lh_qpart_arg6⁰)])
//│ 	| LH_C _lh_qpart_LH_C_0⁰ _lh_qpart_LH_C_1⁰ => if _lh_qpart_arg1⁰(_lh_qpart_arg2⁰, _lh_qpart_LH_C_0⁰) then qpart_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg2⁰, _lh_qpart_LH_C_1⁰, _lh_qpart_arg4⁰, [LH_C _lh_qpart_LH_C_0⁰ _lh_qpart_arg5⁰], _lh_qpart_arg6⁰) else qpart_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg2⁰, _lh_qpart_LH_C_1⁰, [LH_C _lh_qpart_LH_C_0⁰ _lh_qpart_arg4⁰], _lh_qpart_arg5⁰, _lh_qpart_arg6⁰)}
//│ def qsort_lh_₁(_lh_qsort_arg1⁰, _lh_qsort_arg2⁰, _lh_qsort_arg3⁰) = case _lh_qsort_arg2⁰ of {
//│ 	LH_N  => _lh_qsort_arg3⁰
//│ 	| LH_C _lh_qsort_LH_C_0⁰ _lh_qsort_LH_C_1⁰ => case _lh_qsort_LH_C_1⁰ of {
//│ 		LH_N  => [LH_C _lh_qsort_LH_C_0⁰ _lh_qsort_arg3⁰]
//│ 		| _  => qpart_lh_₁(_lh_qsort_arg1⁰, _lh_qsort_LH_C_0⁰, _lh_qsort_LH_C_1⁰, [LH_N], [LH_N], _lh_qsort_arg3⁰)}}
//│ def rqpart_lh_₁(_lh_rqpart_arg1¹, _lh_rqpart_arg2¹, _lh_rqpart_arg3¹, _lh_rqpart_arg4¹, _lh_rqpart_arg5¹, _lh_rqpart_arg6¹) = case _lh_rqpart_arg3¹ of {
//│ 	LH_N  => qsort_lh_₁(_lh_rqpart_arg1¹, _lh_rqpart_arg4¹, [LH_C _lh_rqpart_arg2¹ qsort_lh_₁(_lh_rqpart_arg1¹, _lh_rqpart_arg5¹, _lh_rqpart_arg6¹)])
//│ 	| LH_C _lh_rqpart_LH_C_0¹ _lh_rqpart_LH_C_1¹ => if _lh_rqpart_arg1¹(_lh_rqpart_LH_C_0¹, _lh_rqpart_arg2¹) then rqpart_lh_₁(_lh_rqpart_arg1¹, _lh_rqpart_arg2¹, _lh_rqpart_LH_C_1¹, [LH_C _lh_rqpart_LH_C_0¹ _lh_rqpart_arg4¹], _lh_rqpart_arg5¹, _lh_rqpart_arg6¹) else rqpart_lh_₁(_lh_rqpart_arg1¹, _lh_rqpart_arg2¹, _lh_rqpart_LH_C_1¹, _lh_rqpart_arg4¹, [LH_C _lh_rqpart_LH_C_0¹ _lh_rqpart_arg5¹], _lh_rqpart_arg6¹)}
//│ def rqpart_lh_₂(_lh_rqpart_arg1⁰, _lh_rqpart_arg2⁰, _lh_rqpart_arg3⁰, _lh_rqpart_arg4⁰, _lh_rqpart_arg5⁰, _lh_rqpart_arg6⁰) = case _lh_rqpart_arg3⁰ of {
//│ 	LH_N  => qsort_lh_₁(_lh_rqpart_arg1⁰, _lh_rqpart_arg4⁰, [LH_C _lh_rqpart_arg2⁰ qsort_lh_₁(_lh_rqpart_arg1⁰, _lh_rqpart_arg5⁰, _lh_rqpart_arg6⁰)])
//│ 	| LH_C _lh_rqpart_LH_C_0⁰ _lh_rqpart_LH_C_1⁰ => if _lh_rqpart_arg1⁰(_lh_rqpart_LH_C_0⁰, _lh_rqpart_arg2⁰) then rqpart_lh_₂(_lh_rqpart_arg1⁰, _lh_rqpart_arg2⁰, _lh_rqpart_LH_C_1⁰, [LH_C _lh_rqpart_LH_C_0⁰ _lh_rqpart_arg4⁰], _lh_rqpart_arg5⁰, _lh_rqpart_arg6⁰) else rqpart_lh_₂(_lh_rqpart_arg1⁰, _lh_rqpart_arg2⁰, _lh_rqpart_LH_C_1⁰, _lh_rqpart_arg4⁰, [LH_C _lh_rqpart_LH_C_0⁰ _lh_rqpart_arg5⁰], _lh_rqpart_arg6⁰)}
//│ def rqsort_lh_₁(_lh_rqsort_arg1¹, _lh_rqsort_arg2¹, _lh_rqsort_arg3¹) = case _lh_rqsort_arg2¹ of {
//│ 	LH_N  => _lh_rqsort_arg3¹
//│ 	| LH_C _lh_rqsort_LH_C_0¹ _lh_rqsort_LH_C_1¹ => case _lh_rqsort_LH_C_1¹ of {
//│ 		LH_N  => [LH_C _lh_rqsort_LH_C_0¹ _lh_rqsort_arg3¹]
//│ 		| _  => rqpart_lh_₁(_lh_rqsort_arg1¹, _lh_rqsort_LH_C_0¹, _lh_rqsort_LH_C_1¹, [LH_N], [LH_N], _lh_rqsort_arg3¹)}}
//│ def rqsort_lh_₂(_lh_rqsort_arg1⁰, _lh_rqsort_arg2⁰, _lh_rqsort_arg3⁰) = case _lh_rqsort_arg2⁰ of {
//│ 	LH_N  => _lh_rqsort_arg3⁰
//│ 	| LH_C _lh_rqsort_LH_C_0⁰ _lh_rqsort_LH_C_1⁰ => case _lh_rqsort_LH_C_1⁰ of {
//│ 		LH_N  => [LH_C _lh_rqsort_LH_C_0⁰ _lh_rqsort_arg3⁰]
//│ 		| _  => rqpart_lh_₂(_lh_rqsort_arg1⁰, _lh_rqsort_LH_C_0⁰, _lh_rqsort_LH_C_1⁰, [LH_N], [LH_N], _lh_rqsort_arg3⁰)}}
//│ def sort_lh_₁(_lh_sort_arg1⁰) = qsort_lh_₁((fun a¹ -> (fun b⁰ -> compareTuple2_lh_₁(a¹, b⁰))), _lh_sort_arg1⁰, [LH_N])
//│ def sumAux_lh_₁(ls⁰, a⁰) = case ls⁰ of {
//│ 	LH_N  => a⁰
//│ 	| LH_C h⁰ t⁰ => sumAux_lh_₁(t⁰, (a⁰ + h⁰))}
//│ def sum_lh_₁(ls³) = sumAux_lh_₁(ls³, 0)
//│ def testAwards_nofib_lh_₁(_lh_testAwards_nofib_arg1⁰) = map_lh_₁((fun x² -> findallawards_lh_₁(competitors_lh_₁((x² % 100)))), primId⁰(enumFromTo_lh_₁(1, _lh_testAwards_nofib_arg1⁰)))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec map_lh__d1 f_7 ls_9 =
//│ 		  (match ls_9 with
//│ 		    | `LH_C(h_1_1, t_1_1) -> 
//│ 		      (`LH_C((f_7 h_1_1), ((map_lh__d1 f_7) t_1_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec competitors_lh__d1 _lh_competitors_arg1_0 =
//│ 		  (`LH_C((`LH_P2((`LH_C('S', (`LH_C('i', (`LH_C('m', (`LH_C('o', (`LH_C('n', (`LH_N))))))))))), (`LH_C(35, (`LH_C(27, (`LH_C(40, (`LH_C(_lh_competitors_arg1_0, (`LH_C(34, (`LH_C(21, (`LH_N))))))))))))))), (`LH_C((`LH_P2((`LH_C('H', (`LH_C('a', (`LH_C('n', (`LH_C('s', (`LH_N))))))))), (`LH_C(23, (`LH_C(19, (`LH_C(45, (`LH_C(_lh_competitors_arg1_0, (`LH_C(17, (`LH_C(10, (`LH_C(5, (`LH_C(8, (`LH_C(14, (`LH_N))))))))))))))))))))), (`LH_C((`LH_P2((`LH_C('P', (`LH_C('h', (`LH_C('i', (`LH_C('l', (`LH_N))))))))), (`LH_C(1, (`LH_C(18, (`LH_C(_lh_competitors_arg1_0, (`LH_C(20, (`LH_C(21, (`LH_C(19, (`LH_C(34, (`LH_C(8, (`LH_C(16, (`LH_C(21, (`LH_N))))))))))))))))))))))), (`LH_C((`LH_P2((`LH_C('K', (`LH_C('e', (`LH_C('v', (`LH_C('i', (`LH_C('n', (`LH_N))))))))))), (`LH_C(9, (`LH_C(23, (`LH_C(17, (`LH_C(54, (`LH_C(_lh_competitors_arg1_0, (`LH_C(41, (`LH_C(9, (`LH_C(18, (`LH_C(14, (`LH_N))))))))))))))))))))), (`LH_N)))))))));;
//│ 		let rec enumFromTo_lh__d1 a_2 b_1 =
//│ 		  (if (a_2 <= b_1) then
//│ 		    (`LH_C(a_2, ((enumFromTo_lh__d1 (a_2 + 1)) b_1)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec mappend_lh__d1 xs_2 ys_2 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      (`LH_C(h_8, ((mappend_lh__d1 t_8) ys_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2);;
//│ 		let rec compareTuple2_lh__d1 _lh_compareTuple2_arg1_0 _lh_compareTuple2_arg2_0 =
//│ 		  (match _lh_compareTuple2_arg1_0 with
//│ 		    | `LH_P2(_lh_compareTuple2_LH_P2_0_0, _lh_compareTuple2_LH_P2_1_0) -> 
//│ 		      (match _lh_compareTuple2_arg2_0 with
//│ 		        | `LH_P2(_lh_compareTuple2_LH_P2_0_1, _lh_compareTuple2_LH_P2_1_1) -> 
//│ 		          (_lh_compareTuple2_LH_P2_0_0 <= _lh_compareTuple2_LH_P2_0_1)));;
//│ 		let rec qpart_lh__d1 _lh_qpart_arg1_0 _lh_qpart_arg2_0 _lh_qpart_arg3_0 _lh_qpart_arg4_0 _lh_qpart_arg5_0 _lh_qpart_arg6_0 =
//│ 		  (match _lh_qpart_arg3_0 with
//│ 		    | `LH_N -> 
//│ 		      (((rqsort_lh__d2 _lh_qpart_arg1_0) _lh_qpart_arg4_0) (`LH_C(_lh_qpart_arg2_0, (((rqsort_lh__d1 _lh_qpart_arg1_0) _lh_qpart_arg5_0) _lh_qpart_arg6_0))))
//│ 		    | `LH_C(_lh_qpart_LH_C_0_0, _lh_qpart_LH_C_1_0) -> 
//│ 		      (if ((_lh_qpart_arg1_0 _lh_qpart_arg2_0) _lh_qpart_LH_C_0_0) then
//│ 		        ((((((qpart_lh__d1 _lh_qpart_arg1_0) _lh_qpart_arg2_0) _lh_qpart_LH_C_1_0) _lh_qpart_arg4_0) (`LH_C(_lh_qpart_LH_C_0_0, _lh_qpart_arg5_0))) _lh_qpart_arg6_0)
//│ 		      else
//│ 		        ((((((qpart_lh__d1 _lh_qpart_arg1_0) _lh_qpart_arg2_0) _lh_qpart_LH_C_1_0) (`LH_C(_lh_qpart_LH_C_0_0, _lh_qpart_arg4_0))) _lh_qpart_arg5_0) _lh_qpart_arg6_0)))
//│ 		and
//│ 		qsort_lh__d1 _lh_qsort_arg1_0 _lh_qsort_arg2_0 _lh_qsort_arg3_0 =
//│ 		  (match _lh_qsort_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      _lh_qsort_arg3_0
//│ 		    | `LH_C(_lh_qsort_LH_C_0_0, _lh_qsort_LH_C_1_0) -> 
//│ 		      (match _lh_qsort_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_C(_lh_qsort_LH_C_0_0, _lh_qsort_arg3_0))
//│ 		        | _ -> 
//│ 		          ((((((qpart_lh__d1 _lh_qsort_arg1_0) _lh_qsort_LH_C_0_0) _lh_qsort_LH_C_1_0) (`LH_N)) (`LH_N)) _lh_qsort_arg3_0)))
//│ 		and
//│ 		rqpart_lh__d1 _lh_rqpart_arg1_1 _lh_rqpart_arg2_1 _lh_rqpart_arg3_1 _lh_rqpart_arg4_1 _lh_rqpart_arg5_1 _lh_rqpart_arg6_1 =
//│ 		  (match _lh_rqpart_arg3_1 with
//│ 		    | `LH_N -> 
//│ 		      (((qsort_lh__d1 _lh_rqpart_arg1_1) _lh_rqpart_arg4_1) (`LH_C(_lh_rqpart_arg2_1, (((qsort_lh__d1 _lh_rqpart_arg1_1) _lh_rqpart_arg5_1) _lh_rqpart_arg6_1))))
//│ 		    | `LH_C(_lh_rqpart_LH_C_0_1, _lh_rqpart_LH_C_1_1) -> 
//│ 		      (if ((_lh_rqpart_arg1_1 _lh_rqpart_LH_C_0_1) _lh_rqpart_arg2_1) then
//│ 		        ((((((rqpart_lh__d1 _lh_rqpart_arg1_1) _lh_rqpart_arg2_1) _lh_rqpart_LH_C_1_1) (`LH_C(_lh_rqpart_LH_C_0_1, _lh_rqpart_arg4_1))) _lh_rqpart_arg5_1) _lh_rqpart_arg6_1)
//│ 		      else
//│ 		        ((((((rqpart_lh__d1 _lh_rqpart_arg1_1) _lh_rqpart_arg2_1) _lh_rqpart_LH_C_1_1) _lh_rqpart_arg4_1) (`LH_C(_lh_rqpart_LH_C_0_1, _lh_rqpart_arg5_1))) _lh_rqpart_arg6_1)))
//│ 		and
//│ 		rqpart_lh__d2 _lh_rqpart_arg1_0 _lh_rqpart_arg2_0 _lh_rqpart_arg3_0 _lh_rqpart_arg4_0 _lh_rqpart_arg5_0 _lh_rqpart_arg6_0 =
//│ 		  (match _lh_rqpart_arg3_0 with
//│ 		    | `LH_N -> 
//│ 		      (((qsort_lh__d1 _lh_rqpart_arg1_0) _lh_rqpart_arg4_0) (`LH_C(_lh_rqpart_arg2_0, (((qsort_lh__d1 _lh_rqpart_arg1_0) _lh_rqpart_arg5_0) _lh_rqpart_arg6_0))))
//│ 		    | `LH_C(_lh_rqpart_LH_C_0_0, _lh_rqpart_LH_C_1_0) -> 
//│ 		      (if ((_lh_rqpart_arg1_0 _lh_rqpart_LH_C_0_0) _lh_rqpart_arg2_0) then
//│ 		        ((((((rqpart_lh__d2 _lh_rqpart_arg1_0) _lh_rqpart_arg2_0) _lh_rqpart_LH_C_1_0) (`LH_C(_lh_rqpart_LH_C_0_0, _lh_rqpart_arg4_0))) _lh_rqpart_arg5_0) _lh_rqpart_arg6_0)
//│ 		      else
//│ 		        ((((((rqpart_lh__d2 _lh_rqpart_arg1_0) _lh_rqpart_arg2_0) _lh_rqpart_LH_C_1_0) _lh_rqpart_arg4_0) (`LH_C(_lh_rqpart_LH_C_0_0, _lh_rqpart_arg5_0))) _lh_rqpart_arg6_0)))
//│ 		and
//│ 		rqsort_lh__d1 _lh_rqsort_arg1_1 _lh_rqsort_arg2_1 _lh_rqsort_arg3_1 =
//│ 		  (match _lh_rqsort_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      _lh_rqsort_arg3_1
//│ 		    | `LH_C(_lh_rqsort_LH_C_0_1, _lh_rqsort_LH_C_1_1) -> 
//│ 		      (match _lh_rqsort_LH_C_1_1 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_C(_lh_rqsort_LH_C_0_1, _lh_rqsort_arg3_1))
//│ 		        | _ -> 
//│ 		          ((((((rqpart_lh__d1 _lh_rqsort_arg1_1) _lh_rqsort_LH_C_0_1) _lh_rqsort_LH_C_1_1) (`LH_N)) (`LH_N)) _lh_rqsort_arg3_1)))
//│ 		and
//│ 		rqsort_lh__d2 _lh_rqsort_arg1_0 _lh_rqsort_arg2_0 _lh_rqsort_arg3_0 =
//│ 		  (match _lh_rqsort_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      _lh_rqsort_arg3_0
//│ 		    | `LH_C(_lh_rqsort_LH_C_0_0, _lh_rqsort_LH_C_1_0) -> 
//│ 		      (match _lh_rqsort_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_C(_lh_rqsort_LH_C_0_0, _lh_rqsort_arg3_0))
//│ 		        | _ -> 
//│ 		          ((((((rqpart_lh__d2 _lh_rqsort_arg1_0) _lh_rqsort_LH_C_0_0) _lh_rqsort_LH_C_1_0) (`LH_N)) (`LH_N)) _lh_rqsort_arg3_0)));;
//│ 		let rec sort_lh__d1 _lh_sort_arg1_0 =
//│ 		  (((qsort_lh__d1 (fun a_1 b_0 -> 
//│ 		    ((compareTuple2_lh__d1 a_1) b_0))) _lh_sort_arg1_0) (`LH_N));;
//│ 		let rec mappend_lh__d3 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      (`LH_C(h_3, ((mappend_lh__d3 t_3) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec map_lh__d6 f_0 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (`LH_C((f_0 h_1), ((map_lh__d6 f_0) t_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d5 f_1 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C((f_1 h_2), ((map_lh__d5 f_1) t_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec perms_lh__d1 _lh_perms_arg1_0 _lh_perms_arg2_0 =
//│ 		  (match _lh_perms_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | _ -> 
//│ 		      (match _lh_perms_arg1_0 with
//│ 		        | 1 -> 
//│ 		          ((map_lh__d5 (fun x_0 -> 
//│ 		            (`LH_C(x_0, (`LH_N))))) _lh_perms_arg2_0)
//│ 		        | _ -> 
//│ 		          (match _lh_perms_arg2_0 with
//│ 		            | `LH_C(_lh_perms_LH_C_0_0, _lh_perms_LH_C_1_0) -> 
//│ 		              ((mappend_lh__d3 ((map_lh__d6 (fun x_1 -> 
//│ 		                (`LH_C(_lh_perms_LH_C_0_0, x_1)))) ((perms_lh__d1 (_lh_perms_arg1_0 - 1)) _lh_perms_LH_C_1_0))) ((perms_lh__d1 _lh_perms_arg1_0) _lh_perms_LH_C_1_0)))));;
//│ 		let rec mappend_lh__d2 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      (`LH_C(h_5, ((mappend_lh__d2 t_5) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec sumAux_lh__d1 ls_0 a_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_N -> 
//│ 		      a_0
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      ((sumAux_lh__d1 t_0) (a_0 + h_0)));;
//│ 		let rec sum_lh__d1 ls_3 =
//│ 		  ((sumAux_lh__d1 ls_3) 0);;
//│ 		let rec map_lh__d3 f_4 ls_6 =
//│ 		  (match ls_6 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      (`LH_C((f_4 h_7), ((map_lh__d3 f_4) t_7)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec filter_lh__d1 f_2 ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      (if (f_2 h_4) then
//│ 		        (`LH_C(h_4, ((filter_lh__d1 f_2) t_4)))
//│ 		      else
//│ 		        ((filter_lh__d1 f_2) t_4))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d4 f_3 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      (`LH_C((f_3 h_6), ((map_lh__d4 f_3) t_6)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec awards_lh__d1 _lh_awards_arg1_0 =
//│ 		  (let rec sumscores_0 = ((map_lh__d4 (fun p_0 -> 
//│ 		    (`LH_P2((sum_lh__d1 p_0), p_0)))) ((perms_lh__d1 3) _lh_awards_arg1_0)) in
//│ 		    (let rec atleast_0 = (fun threshold_0 -> 
//│ 		      ((filter_lh__d1 (fun sum_p_0 -> 
//│ 		        (let rec _lh_matchIdent_0 = sum_p_0 in
//│ 		          (match _lh_matchIdent_0 with
//│ 		            | `LH_P2(_lh_awards_LH_P2_0_0, _lh_awards_LH_P2_1_0) -> 
//│ 		              (_lh_awards_LH_P2_0_0 >= threshold_0))))) sumscores_0)) in
//│ 		      (let rec award_0 = (fun name_threshold_0 -> 
//│ 		        (let rec _lh_matchIdent_1 = name_threshold_0 in
//│ 		          (match _lh_matchIdent_1 with
//│ 		            | `LH_P2(_lh_awards_LH_P2_0_1, _lh_awards_LH_P2_1_1) -> 
//│ 		              ((map_lh__d3 (fun ps_0 -> 
//│ 		                (`LH_P2(_lh_awards_LH_P2_0_1, ps_0)))) (sort_lh__d1 (atleast_0 _lh_awards_LH_P2_1_1)))))) in
//│ 		        ((mappend_lh__d1 ((mappend_lh__d2 (award_0 (`LH_P2((`LH_C('G', (`LH_C('o', (`LH_C('l', (`LH_C('d', (`LH_N))))))))), 70)))) (award_0 (`LH_P2((`LH_C('S', (`LH_C('i', (`LH_C('l', (`LH_C('v', (`LH_C('e', (`LH_C('r', (`LH_N))))))))))))), 60))))) (award_0 (`LH_P2((`LH_C('B', (`LH_C('r', (`LH_C('o', (`LH_C('n', (`LH_C('z', (`LH_C('e', (`LH_N))))))))))))), 50)))))));;
//│ 		let rec delete_lh__d1 _lh_delete_arg1_0 _lh_delete_arg2_0 =
//│ 		  (match _lh_delete_arg1_0 with
//│ 		    | `LH_C(_lh_delete_LH_C_0_0, _lh_delete_LH_C_1_0) -> 
//│ 		      (if (_lh_delete_LH_C_0_0 = _lh_delete_arg2_0) then
//│ 		        ((delete_lh__d1 _lh_delete_LH_C_1_0) _lh_delete_arg2_0)
//│ 		      else
//│ 		        (`LH_C(_lh_delete_LH_C_0_0, ((delete_lh__d1 _lh_delete_LH_C_1_0) _lh_delete_arg2_0))))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec foldl_lh__d1 f_5 i_0 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_9, t_9) -> 
//│ 		      (((foldl_lh__d1 f_5) ((f_5 i_0) h_9)) t_9)
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec listDiff_lh__d1 =
//│ 		  (foldl_lh__d1 delete_lh__d1);;
//│ 		let rec findawards_lh__d1 _lh_findawards_arg1_0 =
//│ 		  (let rec _lh_matchIdent_2 = (awards_lh__d1 _lh_findawards_arg1_0) in
//│ 		    (match _lh_matchIdent_2 with
//│ 		      | `LH_N -> 
//│ 		        (`LH_N)
//│ 		      | `LH_C(_lh_findawards_LH_C_0_0, _lh_findawards_LH_C_1_0) -> 
//│ 		        (let rec _lh_matchIdent_3 = _lh_findawards_LH_C_0_0 in
//│ 		          (match _lh_matchIdent_3 with
//│ 		            | `LH_P2(_lh_findawards_LH_P2_0_0, _lh_findawards_LH_P2_1_0) -> 
//│ 		              (match _lh_findawards_LH_P2_1_0 with
//│ 		                | `LH_P2(_lh_findawards_LH_P2_0_1, _lh_findawards_LH_P2_1_1) -> 
//│ 		                  (`LH_C((`LH_P2(_lh_findawards_LH_P2_0_0, (`LH_P2(_lh_findawards_LH_P2_0_1, _lh_findawards_LH_P2_1_1)))), (findawards_lh__d1 ((listDiff_lh__d1 _lh_findawards_arg1_0) _lh_findawards_LH_P2_1_1)))))))));;
//│ 		let rec map_lh__d2 f_6 ls_8 =
//│ 		  (match ls_8 with
//│ 		    | `LH_C(h_1_0, t_1_0) -> 
//│ 		      (`LH_C((f_6 h_1_0), ((map_lh__d2 f_6) t_1_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec findallawards_lh__d1 _lh_findallawards_arg1_0 =
//│ 		  ((map_lh__d2 (fun name_scores_0 -> 
//│ 		    (let rec _lh_matchIdent_4 = name_scores_0 in
//│ 		      (match _lh_matchIdent_4 with
//│ 		        | `LH_P2(_lh_findallawards_LH_P2_0_0, _lh_findallawards_LH_P2_1_0) -> 
//│ 		          (`LH_P2(_lh_findallawards_LH_P2_0_0, (findawards_lh__d1 _lh_findallawards_LH_P2_1_0))))))) _lh_findallawards_arg1_0);;
//│ 		let rec testAwards_nofib_lh__d1 _lh_testAwards_nofib_arg1_0 =
//│ 		  ((map_lh__d1 (fun x_2 -> 
//│ 		    (findallawards_lh__d1 (competitors_lh__d1 (x_2 mod 100))))) ((enumFromTo_lh__d1 1) _lh_testAwards_nofib_arg1_0));;
//│ 		(testAwards_nofib_lh__d1 500)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< after expansion <<<<<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testAwards_nofib_lh_₁(primId⁰(500))
//│ def awards_lh_₁(_lh_awards_arg1⁰) = 
//│ 	let sumscores⁰ = map_lh_₄((fun p⁰ -> [LH_P2 sum_lh_₁(p⁰) p⁰]), perms_lh_₁(3, _lh_awards_arg1⁰))
//│ 	in let atleast⁰ = (fun threshold⁰ -> filter_lh_₁((fun sum_p⁰ -> 
//│ 		let _lh_matchIdent³ = sum_p⁰
//│ 		in case _lh_matchIdent³ of {
//│ 			LH_P2 _lh_awards_LH_P2_0⁰ _lh_awards_LH_P2_1⁰ => (_lh_awards_LH_P2_0⁰ >= threshold⁰)}), sumscores⁰))
//│ 	in let award⁰ = (fun name_threshold⁰ -> 
//│ 		let _lh_matchIdent⁴ = name_threshold⁰
//│ 		in _lh_matchIdent⁴(atleast⁰))
//│ 	in mappend_lh_₁(mappend_lh_₂(award⁰(
//│ 		let _lh_awards_LH_P2_1¹ = 70
//│ 		in let _lh_awards_LH_P2_0¹ = [LH_C 'G' [LH_C 'o' [LH_C 'l' [LH_C 'd' [LH_N]]]]]
//│ 		in (fun atleast¹ -> map_lh_₃((fun ps⁰ -> [LH_P2 _lh_awards_LH_P2_0¹ ps⁰]), sort_lh_₁(atleast¹(_lh_awards_LH_P2_1¹))))), award⁰(
//│ 		let _lh_awards_LH_P2_1² = 60
//│ 		in let _lh_awards_LH_P2_0² = [LH_C 'S' [LH_C 'i' [LH_C 'l' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_N]]]]]]]
//│ 		in (fun atleast² -> map_lh_₃((fun ps¹ -> [LH_P2 _lh_awards_LH_P2_0² ps¹]), sort_lh_₁(atleast²(_lh_awards_LH_P2_1²)))))), award⁰(
//│ 		let _lh_awards_LH_P2_1³ = 50
//│ 		in let _lh_awards_LH_P2_0³ = [LH_C 'B' [LH_C 'r' [LH_C 'o' [LH_C 'n' [LH_C 'z' [LH_C 'e' [LH_N]]]]]]]
//│ 		in (fun atleast³ -> map_lh_₃((fun ps² -> [LH_P2 _lh_awards_LH_P2_0³ ps²]), sort_lh_₁(atleast³(_lh_awards_LH_P2_1³))))))
//│ def compareTuple2_lh_₁(_lh_compareTuple2_arg1⁰, _lh_compareTuple2_arg2⁰) = case _lh_compareTuple2_arg1⁰ of {
//│ 	LH_P2 _lh_compareTuple2_LH_P2_0⁰ _lh_compareTuple2_LH_P2_1⁰ => case _lh_compareTuple2_arg2⁰ of {
//│ 		LH_P2 _lh_compareTuple2_LH_P2_0¹ _lh_compareTuple2_LH_P2_1¹ => (_lh_compareTuple2_LH_P2_0⁰ <= _lh_compareTuple2_LH_P2_0¹)}}
//│ def competitors_lh_₁(_lh_competitors_arg1⁰, f¹⁷) = 
//│ 	let t¹³ = 	
//│ 		let t¹⁴ = 	
//│ 			let t¹⁵ = 	
//│ 				let t¹⁶ = (fun f¹³ -> [LH_N])
//│ 				in let h¹³ = 	
//│ 					let _lh_findallawards_LH_P2_1⁰ = [LH_C 9 [LH_C 23 [LH_C 17 [LH_C 54 [LH_C _lh_competitors_arg1⁰ [LH_C 41 [LH_C 9 [LH_C 18 [LH_C 14 [LH_N]]]]]]]]]]
//│ 					in let _lh_findallawards_LH_P2_0⁰ = [LH_C 'K' [LH_C 'e' [LH_C 'v' [LH_C 'i' [LH_C 'n' [LH_N]]]]]]
//│ 					in (fun _lh_dummy⁰ -> [LH_P2 _lh_findallawards_LH_P2_0⁰ findawards_lh_₁(_lh_findallawards_LH_P2_1⁰)])
//│ 				in (fun f¹⁴ -> [LH_C f¹⁴(h¹³) map_lh_₂(f¹⁴, t¹⁶)])
//│ 			in let h¹⁴ = 	
//│ 				let _lh_findallawards_LH_P2_1¹ = [LH_C 1 [LH_C 18 [LH_C _lh_competitors_arg1⁰ [LH_C 20 [LH_C 21 [LH_C 19 [LH_C 34 [LH_C 8 [LH_C 16 [LH_C 21 [LH_N]]]]]]]]]]]
//│ 				in let _lh_findallawards_LH_P2_0¹ = [LH_C 'P' [LH_C 'h' [LH_C 'i' [LH_C 'l' [LH_N]]]]]
//│ 				in (fun _lh_dummy¹ -> [LH_P2 _lh_findallawards_LH_P2_0¹ findawards_lh_₁(_lh_findallawards_LH_P2_1¹)])
//│ 			in (fun f¹⁵ -> [LH_C f¹⁵(h¹⁴) map_lh_₂(f¹⁵, t¹⁵)])
//│ 		in let h¹⁵ = 	
//│ 			let _lh_findallawards_LH_P2_1² = [LH_C 23 [LH_C 19 [LH_C 45 [LH_C _lh_competitors_arg1⁰ [LH_C 17 [LH_C 10 [LH_C 5 [LH_C 8 [LH_C 14 [LH_N]]]]]]]]]]
//│ 			in let _lh_findallawards_LH_P2_0² = [LH_C 'H' [LH_C 'a' [LH_C 'n' [LH_C 's' [LH_N]]]]]
//│ 			in (fun _lh_dummy² -> [LH_P2 _lh_findallawards_LH_P2_0² findawards_lh_₁(_lh_findallawards_LH_P2_1²)])
//│ 		in (fun f¹⁶ -> [LH_C f¹⁶(h¹⁵) map_lh_₂(f¹⁶, t¹⁴)])
//│ 	in let h¹⁶ = 	
//│ 		let _lh_findallawards_LH_P2_1³ = [LH_C 35 [LH_C 27 [LH_C 40 [LH_C _lh_competitors_arg1⁰ [LH_C 34 [LH_C 21 [LH_N]]]]]]]
//│ 		in let _lh_findallawards_LH_P2_0³ = [LH_C 'S' [LH_C 'i' [LH_C 'm' [LH_C 'o' [LH_C 'n' [LH_N]]]]]]
//│ 		in (fun _lh_dummy³ -> [LH_P2 _lh_findallawards_LH_P2_0³ findawards_lh_₁(_lh_findallawards_LH_P2_1³)])
//│ 	in [LH_C f¹⁷(h¹⁶) map_lh_₂(f¹⁷, t¹³)]
//│ def delete_lh_₁(_lh_delete_arg1⁰, _lh_delete_arg2⁰) = case _lh_delete_arg1⁰ of {
//│ 	LH_C _lh_delete_LH_C_0⁰ _lh_delete_LH_C_1⁰ => if polyEq⁰(_lh_delete_LH_C_0⁰, _lh_delete_arg2⁰) then delete_lh_₁(_lh_delete_LH_C_1⁰, _lh_delete_arg2⁰) else [LH_C _lh_delete_LH_C_0⁰ delete_lh_₁(_lh_delete_LH_C_1⁰, _lh_delete_arg2⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def enumFromTo_lh_₁(a¹, b¹) = if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)] else [LH_N]
//│ def filter_lh_₁(f²⁰, ls⁹) = ls⁹(f²⁰)
//│ def findallawards_lh_₁(_lh_findallawards_arg1⁰) = map_lh_₂((fun name_scores⁰ -> 
//│ 	let _lh_matchIdent⁰ = name_scores⁰
//│ 	in _lh_matchIdent⁰([lh_Unit])), _lh_findallawards_arg1⁰)
//│ def findawards_lh_₁(_lh_findawards_arg1⁰) = 
//│ 	let _lh_matchIdent¹ = awards_lh_₁(_lh_findawards_arg1⁰)
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_findawards_LH_C_0⁰ _lh_findawards_LH_C_1⁰ => 
//│ 			let _lh_matchIdent² = _lh_findawards_LH_C_0⁰
//│ 			in case _lh_matchIdent² of {
//│ 				LH_P2 _lh_findawards_LH_P2_0⁰ _lh_findawards_LH_P2_1⁰ => case _lh_findawards_LH_P2_1⁰ of {
//│ 					LH_P2 _lh_findawards_LH_P2_0¹ _lh_findawards_LH_P2_1¹ => [LH_C [LH_P2 _lh_findawards_LH_P2_0⁰ [LH_P2 _lh_findawards_LH_P2_0¹ _lh_findawards_LH_P2_1¹]] findawards_lh_₁(listDiff_lh_₁(_lh_findawards_arg1⁰, _lh_findawards_LH_P2_1¹))]}}}
//│ def foldl_lh_₁(f⁷, i⁰, ls⁴) = case ls⁴ of {
//│ 	LH_C h⁵ t⁵ => foldl_lh_₁(f⁷, f⁷(i⁰, h⁵), t⁵)
//│ 	| LH_N  => i⁰}
//│ def listDiff_lh_₁ = foldl_lh_₁(delete_lh_₁)
//│ def map_lh_₁(f¹⁰, ls⁷) = case ls⁷ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C f¹⁰(h¹⁰) map_lh_₁(f¹⁰, t¹⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f¹, ls⁰) = ls⁰(f¹)
//│ def map_lh_₃(f², ls²) = ls²(f²)
//│ def map_lh_₄(f³, ls³, _lh_floatOutId_0⁰) = case ls³ of {
//│ 	LH_C h² t² => 
//│ 		let t³ = map_lh_₄(f³, t²)
//│ 		in let h³ = f³(h²)
//│ 		in if _lh_floatOutId_0⁰(h³) then [LH_C h³ filter_lh_₁(_lh_floatOutId_0⁰, t³)] else filter_lh_₁(_lh_floatOutId_0⁰, t³)
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f¹⁸, ls⁸) = case ls⁸ of {
//│ 	LH_C h¹⁷ t¹⁷ => [LH_C f¹⁸(h¹⁷) map_lh_₅(f¹⁸, t¹⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f⁹, ls⁶, _lh_floatOutId_0¹) = case ls⁶ of {
//│ 	LH_C h⁸ t⁸ => 
//│ 		let t⁹ = map_lh_₆(f⁹, t⁸)
//│ 		in let h⁹ = f⁹(h⁸)
//│ 		in [LH_C h⁹ mappend_lh_₃(t⁹, _lh_floatOutId_0¹)]
//│ 	| LH_N  => _lh_floatOutId_0¹}
//│ def mappend_lh_₁(xs², ys²) = case xs² of {
//│ 	LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁(t⁶, ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₂(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₃(xs¹, ys¹) = xs¹(ys¹)
//│ def perms_lh_₁(_lh_perms_arg1⁰, _lh_perms_arg2⁰) = case _lh_perms_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| _  => case _lh_perms_arg1⁰ of {
//│ 		1  => map_lh_₅((fun x⁰ -> [LH_C x⁰ [LH_N]]), _lh_perms_arg2⁰)
//│ 		| _  => case _lh_perms_arg2⁰ of {
//│ 			LH_C _lh_perms_LH_C_0⁰ _lh_perms_LH_C_1⁰ => mappend_lh_₃(map_lh_₆((fun x¹ -> [LH_C _lh_perms_LH_C_0⁰ x¹]), perms_lh_₁((_lh_perms_arg1⁰ - 1), _lh_perms_LH_C_1⁰)), perms_lh_₁(_lh_perms_arg1⁰, _lh_perms_LH_C_1⁰))}}}
//│ def qpart_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg2⁰, _lh_qpart_arg3⁰, _lh_qpart_arg4⁰, _lh_qpart_arg5⁰, _lh_qpart_arg6⁰) = case _lh_qpart_arg3⁰ of {
//│ 	LH_N  => rqsort_lh_₂(_lh_qpart_arg1⁰, _lh_qpart_arg4⁰, 
//│ 		let t¹⁸ = rqsort_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg5⁰, _lh_qpart_arg6⁰)
//│ 		in let h¹⁸ = _lh_qpart_arg2⁰
//│ 		in (fun f¹⁹ -> [LH_C f¹⁹(h¹⁸) map_lh_₃(f¹⁹, t¹⁸)]))
//│ 	| LH_C _lh_qpart_LH_C_0⁰ _lh_qpart_LH_C_1⁰ => if _lh_qpart_arg1⁰(_lh_qpart_arg2⁰, _lh_qpart_LH_C_0⁰) then qpart_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg2⁰, _lh_qpart_LH_C_1⁰, _lh_qpart_arg4⁰, [LH_C _lh_qpart_LH_C_0⁰ _lh_qpart_arg5⁰], _lh_qpart_arg6⁰) else qpart_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg2⁰, _lh_qpart_LH_C_1⁰, [LH_C _lh_qpart_LH_C_0⁰ _lh_qpart_arg4⁰], _lh_qpart_arg5⁰, _lh_qpart_arg6⁰)}
//│ def qsort_lh_₁(_lh_qsort_arg1⁰, _lh_qsort_arg2⁰, _lh_qsort_arg3⁰) = case _lh_qsort_arg2⁰ of {
//│ 	LH_N  => _lh_qsort_arg3⁰
//│ 	| LH_C _lh_qsort_LH_C_0⁰ _lh_qsort_LH_C_1⁰ => case _lh_qsort_LH_C_1⁰ of {
//│ 		LH_N  => 
//│ 			let t⁴ = _lh_qsort_arg3⁰
//│ 			in let h⁴ = _lh_qsort_LH_C_0⁰
//│ 			in (fun f⁶ -> [LH_C f⁶(h⁴) map_lh_₃(f⁶, t⁴)])
//│ 		| _  => qpart_lh_₁(_lh_qsort_arg1⁰, _lh_qsort_LH_C_0⁰, _lh_qsort_LH_C_1⁰, [LH_N], [LH_N], _lh_qsort_arg3⁰)}}
//│ def rqpart_lh_₁(_lh_rqpart_arg1¹, _lh_rqpart_arg2¹, _lh_rqpart_arg3¹, _lh_rqpart_arg4¹, _lh_rqpart_arg5¹, _lh_rqpart_arg6¹) = case _lh_rqpart_arg3¹ of {
//│ 	LH_N  => qsort_lh_₁(_lh_rqpart_arg1¹, _lh_rqpart_arg4¹, 
//│ 		let t¹⁹ = qsort_lh_₁(_lh_rqpart_arg1¹, _lh_rqpart_arg5¹, _lh_rqpart_arg6¹)
//│ 		in let h¹⁹ = _lh_rqpart_arg2¹
//│ 		in (fun f²¹ -> [LH_C f²¹(h¹⁹) map_lh_₃(f²¹, t¹⁹)]))
//│ 	| LH_C _lh_rqpart_LH_C_0¹ _lh_rqpart_LH_C_1¹ => if _lh_rqpart_arg1¹(_lh_rqpart_LH_C_0¹, _lh_rqpart_arg2¹) then rqpart_lh_₁(_lh_rqpart_arg1¹, _lh_rqpart_arg2¹, _lh_rqpart_LH_C_1¹, [LH_C _lh_rqpart_LH_C_0¹ _lh_rqpart_arg4¹], _lh_rqpart_arg5¹, _lh_rqpart_arg6¹) else rqpart_lh_₁(_lh_rqpart_arg1¹, _lh_rqpart_arg2¹, _lh_rqpart_LH_C_1¹, _lh_rqpart_arg4¹, [LH_C _lh_rqpart_LH_C_0¹ _lh_rqpart_arg5¹], _lh_rqpart_arg6¹)}
//│ def rqpart_lh_₂(_lh_rqpart_arg1⁰, _lh_rqpart_arg2⁰, _lh_rqpart_arg3⁰, _lh_rqpart_arg4⁰, _lh_rqpart_arg5⁰, _lh_rqpart_arg6⁰) = case _lh_rqpart_arg3⁰ of {
//│ 	LH_N  => qsort_lh_₁(_lh_rqpart_arg1⁰, _lh_rqpart_arg4⁰, 
//│ 		let t⁷ = qsort_lh_₁(_lh_rqpart_arg1⁰, _lh_rqpart_arg5⁰, _lh_rqpart_arg6⁰)
//│ 		in let h⁷ = _lh_rqpart_arg2⁰
//│ 		in (fun f⁸ -> [LH_C f⁸(h⁷) map_lh_₃(f⁸, t⁷)]))
//│ 	| LH_C _lh_rqpart_LH_C_0⁰ _lh_rqpart_LH_C_1⁰ => if _lh_rqpart_arg1⁰(_lh_rqpart_LH_C_0⁰, _lh_rqpart_arg2⁰) then rqpart_lh_₂(_lh_rqpart_arg1⁰, _lh_rqpart_arg2⁰, _lh_rqpart_LH_C_1⁰, [LH_C _lh_rqpart_LH_C_0⁰ _lh_rqpart_arg4⁰], _lh_rqpart_arg5⁰, _lh_rqpart_arg6⁰) else rqpart_lh_₂(_lh_rqpart_arg1⁰, _lh_rqpart_arg2⁰, _lh_rqpart_LH_C_1⁰, _lh_rqpart_arg4⁰, [LH_C _lh_rqpart_LH_C_0⁰ _lh_rqpart_arg5⁰], _lh_rqpart_arg6⁰)}
//│ def rqsort_lh_₁(_lh_rqsort_arg1⁰, _lh_rqsort_arg2⁰, _lh_rqsort_arg3⁰) = case _lh_rqsort_arg2⁰ of {
//│ 	LH_N  => _lh_rqsort_arg3⁰
//│ 	| LH_C _lh_rqsort_LH_C_0⁰ _lh_rqsort_LH_C_1⁰ => case _lh_rqsort_LH_C_1⁰ of {
//│ 		LH_N  => 
//│ 			let t¹¹ = _lh_rqsort_arg3⁰
//│ 			in let h¹¹ = _lh_rqsort_LH_C_0⁰
//│ 			in (fun f¹¹ -> [LH_C f¹¹(h¹¹) map_lh_₃(f¹¹, t¹¹)])
//│ 		| _  => rqpart_lh_₁(_lh_rqsort_arg1⁰, _lh_rqsort_LH_C_0⁰, _lh_rqsort_LH_C_1⁰, [LH_N], [LH_N], _lh_rqsort_arg3⁰)}}
//│ def rqsort_lh_₂(_lh_rqsort_arg1¹, _lh_rqsort_arg2¹, _lh_rqsort_arg3¹) = case _lh_rqsort_arg2¹ of {
//│ 	LH_N  => _lh_rqsort_arg3¹
//│ 	| LH_C _lh_rqsort_LH_C_0¹ _lh_rqsort_LH_C_1¹ => case _lh_rqsort_LH_C_1¹ of {
//│ 		LH_N  => 
//│ 			let t¹² = _lh_rqsort_arg3¹
//│ 			in let h¹² = _lh_rqsort_LH_C_0¹
//│ 			in (fun f¹² -> [LH_C f¹²(h¹²) map_lh_₃(f¹², t¹²)])
//│ 		| _  => rqpart_lh_₂(_lh_rqsort_arg1¹, _lh_rqsort_LH_C_0¹, _lh_rqsort_LH_C_1¹, [LH_N], [LH_N], _lh_rqsort_arg3¹)}}
//│ def sort_lh_₁(_lh_sort_arg1⁰) = qsort_lh_₁((fun a⁰ -> (fun b⁰ -> compareTuple2_lh_₁(a⁰, b⁰))), _lh_sort_arg1⁰, (fun f⁰ -> [LH_N]))
//│ def sumAux_lh_₁(ls¹, a²) = case ls¹ of {
//│ 	LH_N  => a²
//│ 	| LH_C h¹ t¹ => sumAux_lh_₁(t¹, (a² + h¹))}
//│ def sum_lh_₁(ls⁵) = sumAux_lh_₁(ls⁵, 0)
//│ def testAwards_nofib_lh_₁(_lh_testAwards_nofib_arg1⁰) = map_lh_₁((fun x² -> findallawards_lh_₁(competitors_lh_₁((x² % 100)))), primId⁰(enumFromTo_lh_₁(1, _lh_testAwards_nofib_arg1⁰)))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
