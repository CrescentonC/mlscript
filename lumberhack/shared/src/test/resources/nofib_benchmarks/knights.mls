

:lhInHaskell
:lhGenOCaml
mySnd (a,b) = b
myIsDigit c = let n = int_of_char c in (n >= 48) && (n <= 57)
copy n x = if n <= 0 then [] else x:(copy (n-1) x)
inList x (h:t) = if polyEq x h then True else inList x t
inList x [] = False
eqTupleTwo (a,b) (c,d) = (polyEq a b) && (polyEq c d)
intintComp :: (Int, Int) -> (Int, Int) -> Bool
intintComp (a,b) (c,d) = (a < c) || ((a == c) && (b < d))
intChessSetComp :: (Int, ChessSet) -> (Int, ChessSet) -> Bool
intChessSetComp (a,b) (c,d) = (a < c)
myInit (a:[]) = []
myInit (a:t) = a:(myInit t)
myLast [] = (0-100, 0-100)
myLast (h:t) = go h t
  where
    go h [] = h
    go h (head:t) = go head t
type Tile     = (Int,Int)
data ChessSet = Board Int Int Tile [Tile]
-- instance Eq ChessSet where
--     _ == _ = True
-- instance Ord ChessSet where
--     _ <= _ = True
-- instance Show ChessSet where
--    showsPrec p board@(Board sze n f ts)
--       = showString (printBoard sze 1 sortedTrail)
--         where
--          sortedTrail = quickSort (assignMoveNo ts sze n)
showChessSet (Board sze n f ts) =
  let sortedTrail = quickSortIntInt (assignMoveNo ts sze n) in
  printBoard sze 1 sortedTrail
createBoard::Int -> Tile -> ChessSet
createBoard x t = Board x 1 t [t]
sizeBoard::ChessSet -> Int
sizeBoard (Board s _ _ _) = s
noPieces::ChessSet -> Int
noPieces (Board _ n _ _) = n
addPiece::Tile -> ChessSet -> ChessSet
addPiece t (Board s n f ts) = Board s (n+1) f (t:ts)
deleteFirst::ChessSet -> ChessSet
deleteFirst (Board s n f ts) =
  let ts' = myInit ts in
  Board s (n-1) (myLast ts') ts'
positionPiece::Int -> ChessSet -> Tile
positionPiece x (Board _ n _ ts) = atIndex (n - x) ts
lastPiece::ChessSet -> Tile
lastPiece (Board _ _ _ (t:ts)) = t
firstPiece::ChessSet -> Tile
firstPiece (Board _ _ f _) = f
pieceAtTile::Tile -> ChessSet -> Int
pieceAtTile x (Board _ _ _ ts)
   = find x ts
     where
      find x [] = error "Tile not used"
      find x (y:xs) = if eqTupleTwo x y then (1 + length xs) else find x xs
isSquareFree::Tile -> ChessSet -> Bool
isSquareFree x (Board _ _ _ ts) = not (inList x ts)
assignMoveNo [] size x = []
assignMoveNo ((x,y):t) size z =(((y-1)*size)+x,z):(assignMoveNo t size (z-1))
printBoard s n [] = 
   if (n  > (s*s)) then ""
   else if ((n `mod` s) /= 0) then "*" ++ (spaces (s*s) 1) ++ (printBoard s (n+1) [] )
   else if ((n `mod` s) == 0) then "*|" ++ (printBoard s (n+1) [] )
   else error "printBoard empty list error"
printBoard s n ((i,j):xs) = 
   if (i == n) && ((n `mod` s) == 0) then (string_of_int j) ++ "|" ++ (printBoard s (n+1) xs )
   else if (i==n) && ((n `mod` s) /= 0) then (string_of_int j) ++ (spaces (s*s) j) ++ (printBoard s (n+1) xs )
   else if ((n `mod` s) /= 0) then "*" ++ (spaces (s*s) 1) ++ (printBoard s (n+1) ((i,j):xs) )
   else if ((n `mod` s) == 0) then "*|" ++ (printBoard s (n+1) ((i,j):xs) )
   else error "printBoard non-empty list error"
spaces s y = copy ((logTen s) - (logTen y) + 1) ' '
      where
         logTen 0 = 0
         logTen x = 1 + logTen (x `div` 10)
data Direction = UL | UR | DL |DR | LU | LD | RU | RD
move::Direction -> Tile -> Tile
move UL (x,y) = (x-1,y-2)
move UR (x,y) = (x+1,y-2)
move DL (x,y) = (x-1,y+2)
move DR (x,y) = (x+1,y+2)
move LU (x,y) = (x-2,y-1)
move LD (x,y) = (x-2,y+1)
move RU (x,y) = (x+2,y-1)
move RD (x,y) = (x+2,y+1)
startTour::Tile -> Int -> ChessSet
startTour st size =
  if ((size `mod` 2) == 0) then createBoard size st
  else error "Tour doesnt exist for odd size board"
moveKnight::ChessSet -> Direction -> ChessSet
moveKnight board dir
   = addPiece (move dir (lastPiece board)) board
canMove::ChessSet -> Direction -> Bool
canMove board dir
   = canMoveTo (move dir (lastPiece board)) board
canMoveTo::Tile -> ChessSet -> Bool
canMoveTo (x,y) board =
  let sze = sizeBoard board in
  (x >= 1) && (x <=sze) && (y >= 1) && (y <=sze) && (isSquareFree (x,y) board)
descendents::ChessSet -> [ChessSet]
descendents board =
  if (canJumpFirst board) && (deadEnd (addPiece (firstPiece board) board)) then []
  else
    let singles = singleDescend board in
    let scrut = length singles in
    if scrut == 0 then map mySnd (quickSortIntChessSet (descAndNo board))
    else if scrut == 1 then singles
    else []
singleDescend::ChessSet -> [ChessSet]    
singleDescend board = [x | (y,x) <- descAndNo board, y == 1]
descAndNo::ChessSet -> [(Int,ChessSet)]
descAndNo board
   = [(length (possibleMoves (deleteFirst x)),x) | x<- allDescend board]
allDescend::ChessSet -> [ChessSet]
allDescend board
   =  map (moveKnight board) (possibleMoves board)
possibleMoves::ChessSet -> [Direction]
possibleMoves board
   =[x | x <- [UL,UR,DL,DR,LU,LD,RU,RD], (canMove board x)]
deadEnd::ChessSet -> Bool
deadEnd board = (length (possibleMoves board)) == 0
canJumpFirst::ChessSet -> Bool
canJumpFirst board
  = canMoveTo (firstPiece board) (deleteFirst board)
tourFinished::ChessSet -> Bool
tourFinished board =
  let sze = sizeBoard board in
  ((noPieces board) == (sze*sze)) && (canJumpFirst board)
printTour::[[Char]] -> [Char]
printTour ss =
  case (map (strToInt 0) ss) of {
    [size, number] -> pp (take_lz number (depthSearch (root size) grow isFinished))
  }
    where
      strToInt y []     = y
      strToInt y (x:xs) = strToInt ((10*y) + (int_of_char x - int_of_char '0')) xs
      pp []      = []
      pp ((x,y):xs)     = "|Knights tour with " ++ (string_of_int x)  ++ " backtracking moves|" ++ (showChessSet y) ++ (pp xs)
grow::(Int,ChessSet) -> [(Int,ChessSet)]
grow (x,y) = zip_lz_nl (repeat (x+1)) (descendents y)
isFinished::(Int,ChessSet) -> Bool
isFinished (x,y) = tourFinished y
root::Int -> Queue (Int,ChessSet)
root sze = addAllFront (zip_lz_nl (repeat (1-(sze*sze))) (zipWith startTour [(x,y) | x<-[1..sze], y<-[1..sze]] (copy (sze*sze) sze))) createQueue
-- depthSearch :: (Eq a) => Queue a -> (a -> [a]) -> (a -> Bool) -> Queue a
depthSearch q growFn finFn =
  if (case q of { [] -> True; _ -> False} ) then lazy []
  else if finFn (inquireFront q) then lazy ((inquireFront q):((depthSearch (removeFront q) growFn finFn)))
  else (depthSearch (addAllFront (growFn (inquireFront q)) (removeFront q)) growFn finFn)
type Queue a = [a]
createQueue::Queue a
createQueue = []
addFront::a -> Queue a -> Queue a
addFront x q = x:q
addBack::a -> Queue a -> Queue a
addBack x q = q ++ [x]
addAllFront::[a] -> Queue a -> Queue a
addAllFront list q = list ++ q
addAllBack::[a] -> Queue a -> Queue a
addAllBack list q = q ++ list
inquireFront::Queue a -> a
inquireFront []    = error "Cannot inquire on empty Queue"
inquireFront (h:t) = h
inquireBack::Queue a -> a
inquireBack []     = error "Cannot inquire on empty Queue"
inquireBack [x]    = x
inquireBack (x:xs) = inquireBack xs
removeFront::Queue a -> Queue a
removeFront []    = error "Cannot remove from an empty Queue"
removeFront (h:t) = t
removeBack::Queue a -> Queue a
removeBack []    = error "Cannot inquire on empty Queue"
removeBack [x]   =  []
removeBack (x:xs) = x:(removeBack xs)
-- emptyQueue::(Eq a) => Queue a -> Bool
emptyQueue x = polyEq x []
sizeQueue::Queue b -> Int
sizeQueue xs = length xs
-- quickSort :: (Ord a) => [a] -> [a]
quickSortIntChessSet []     = []
quickSortIntChessSet (x:xs) = (quickSortIntChessSet [y | y<-xs, intChessSetComp y x]) ++ [x] ++ (quickSortIntChessSet [y | y<-xs, not (intChessSetComp y x)])
quickSortIntInt []     = []
quickSortIntInt (x:xs) = (quickSortIntInt [y | y<-xs, intintComp y x]) ++ [x] ++ (quickSortIntInt [y | y<-xs, not (intintComp y x)])
testKnights_nofib ss =
  if (argsOk ss) then
    (length (printTour ss))
  else
    error usageString
  where
    usageString= "|Usage: knights <board size> <no solutions>|"
    argsOk ss = ((length ss) == 2) && (foldr ((\a b -> a && b) . all_digits) True ss)
    all_digits s = foldr ((\a b -> a && b) . myIsDigit) True s
testKnights_nofib $ primId ["8", "1"]
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> after expansion >>>>>>>>>>
//│ testKnights_nofib_lh_₁(primId⁰([LH_C [LH_C '8' [LH_N]] [LH_C [LH_C '1' [LH_N]] [LH_N]]]))
//│ def addAllFront_lh_₁(_lh_addAllFront_arg1¹, _lh_addAllFront_arg2¹) = mappend_lh_₁₇(_lh_addAllFront_arg1¹, _lh_addAllFront_arg2¹)
//│ def addAllFront_lh_₂(_lh_addAllFront_arg1⁰, _lh_addAllFront_arg2⁰) = mappend_lh_₁₈(_lh_addAllFront_arg1⁰, _lh_addAllFront_arg2⁰)
//│ def addPiece_lh_₁(_lh_addPiece_arg1⁰, _lh_addPiece_arg2⁰) = case _lh_addPiece_arg2⁰ of {
//│ 	Board _lh_addPiece_Board_0⁰ _lh_addPiece_Board_1⁰ _lh_addPiece_Board_2⁰ _lh_addPiece_Board_3⁰ => [Board _lh_addPiece_Board_0⁰ (_lh_addPiece_Board_1⁰ + 1) _lh_addPiece_Board_2⁰ [LH_C _lh_addPiece_arg1⁰ _lh_addPiece_Board_3⁰]]}
//│ def allDescend_lh_₁(_lh_allDescend_arg1⁰) = map_lh_₃(moveKnight_lh_₁(_lh_allDescend_arg1⁰), possibleMoves_lh_₃(_lh_allDescend_arg1⁰))
//│ def assignMoveNo_lh_₁(_lh_assignMoveNo_arg1⁰, _lh_assignMoveNo_arg2⁰, _lh_assignMoveNo_arg3⁰) = case _lh_assignMoveNo_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_assignMoveNo_LH_C_0⁰ _lh_assignMoveNo_LH_C_1⁰ => case _lh_assignMoveNo_LH_C_0⁰ of {
//│ 		LH_P2 _lh_assignMoveNo_LH_P2_0⁰ _lh_assignMoveNo_LH_P2_1⁰ => [LH_C [LH_P2 (((_lh_assignMoveNo_LH_P2_1⁰ - 1) * _lh_assignMoveNo_arg2⁰) + _lh_assignMoveNo_LH_P2_0⁰) _lh_assignMoveNo_arg3⁰] assignMoveNo_lh_₁(_lh_assignMoveNo_LH_C_1⁰, _lh_assignMoveNo_arg2⁰, (_lh_assignMoveNo_arg3⁰ - 1))]}}
//│ def canJumpFirst_lh_₁(_lh_canJumpFirst_arg1¹) = canMoveTo_lh_₁(firstPiece_lh_₂(_lh_canJumpFirst_arg1¹), deleteFirst_lh_₁(_lh_canJumpFirst_arg1¹))
//│ def canJumpFirst_lh_₂(_lh_canJumpFirst_arg1⁰) = canMoveTo_lh_₂(firstPiece_lh_₃(_lh_canJumpFirst_arg1⁰), deleteFirst_lh_₂(_lh_canJumpFirst_arg1⁰))
//│ def canMoveTo_lh_₁(_lh_canMoveTo_arg1¹, _lh_canMoveTo_arg2¹) = case _lh_canMoveTo_arg1¹ of {
//│ 	LH_P2 _lh_canMoveTo_LH_P2_0¹ _lh_canMoveTo_LH_P2_1¹ => 
//│ 		let sze¹ = sizeBoard_lh_₂(_lh_canMoveTo_arg2¹)
//│ 		in (((((_lh_canMoveTo_LH_P2_0¹ >= 1) && (_lh_canMoveTo_LH_P2_0¹ <= sze¹)) && (_lh_canMoveTo_LH_P2_1¹ >= 1)) && (_lh_canMoveTo_LH_P2_1¹ <= sze¹)) && isSquareFree_lh_₁([LH_P2 _lh_canMoveTo_LH_P2_0¹ _lh_canMoveTo_LH_P2_1¹], _lh_canMoveTo_arg2¹))}
//│ def canMoveTo_lh_₂(_lh_canMoveTo_arg1⁰, _lh_canMoveTo_arg2⁰) = case _lh_canMoveTo_arg1⁰ of {
//│ 	LH_P2 _lh_canMoveTo_LH_P2_0⁰ _lh_canMoveTo_LH_P2_1⁰ => 
//│ 		let sze⁰ = sizeBoard_lh_₃(_lh_canMoveTo_arg2⁰)
//│ 		in (((((_lh_canMoveTo_LH_P2_0⁰ >= 1) && (_lh_canMoveTo_LH_P2_0⁰ <= sze⁰)) && (_lh_canMoveTo_LH_P2_1⁰ >= 1)) && (_lh_canMoveTo_LH_P2_1⁰ <= sze⁰)) && isSquareFree_lh_₂([LH_P2 _lh_canMoveTo_LH_P2_0⁰ _lh_canMoveTo_LH_P2_1⁰], _lh_canMoveTo_arg2⁰))}
//│ def canMove_lh_₁(_lh_canMove_arg1⁰, _lh_canMove_arg2⁰) = canMoveTo_lh_₂(move_lh_₁(_lh_canMove_arg2⁰, lastPiece_lh_₁(_lh_canMove_arg1⁰)), _lh_canMove_arg1⁰)
//│ def copy_lh_₁(_lh_copy_arg1³, _lh_copy_arg2³) = if (_lh_copy_arg1³ <= 0) then [LH_N] else [LH_C _lh_copy_arg2³ copy_lh_₁((_lh_copy_arg1³ - 1), _lh_copy_arg2³)]
//│ def copy_lh_₂(_lh_copy_arg1², _lh_copy_arg2²) = if (_lh_copy_arg1² <= 0) then [LH_N] else [LH_C _lh_copy_arg2² copy_lh_₂((_lh_copy_arg1² - 1), _lh_copy_arg2²)]
//│ def copy_lh_₃(_lh_copy_arg1¹, _lh_copy_arg2¹) = if (_lh_copy_arg1¹ <= 0) then [LH_N] else [LH_C _lh_copy_arg2¹ copy_lh_₃((_lh_copy_arg1¹ - 1), _lh_copy_arg2¹)]
//│ def copy_lh_₄(_lh_copy_arg1⁰, _lh_copy_arg2⁰) = if (_lh_copy_arg1⁰ <= 0) then [LH_N] else [LH_C _lh_copy_arg2⁰ copy_lh_₄((_lh_copy_arg1⁰ - 1), _lh_copy_arg2⁰)]
//│ def createBoard_lh_₁(_lh_createBoard_arg1⁰, _lh_createBoard_arg2⁰) = [Board _lh_createBoard_arg1⁰ 1 _lh_createBoard_arg2⁰ [LH_C _lh_createBoard_arg2⁰ [LH_N]]]
//│ def createQueue_lh_₁ = [LH_N]
//│ def deadEnd_lh_₁(_lh_deadEnd_arg1⁰) = (length_lh_₅(possibleMoves_lh_₂(_lh_deadEnd_arg1⁰)) == 0)
//│ def deleteFirst_lh_₁(_lh_deleteFirst_arg1³) = case _lh_deleteFirst_arg1³ of {
//│ 	Board _lh_deleteFirst_Board_0³ _lh_deleteFirst_Board_1³ _lh_deleteFirst_Board_2³ _lh_deleteFirst_Board_3³ => 
//│ 		let ts'³ = myInit_lh_₁(_lh_deleteFirst_Board_3³)
//│ 		in [Board _lh_deleteFirst_Board_0³ (_lh_deleteFirst_Board_1³ - 1) myLast_lh_₁(ts'³) ts'³]}
//│ def deleteFirst_lh_₂(_lh_deleteFirst_arg1²) = case _lh_deleteFirst_arg1² of {
//│ 	Board _lh_deleteFirst_Board_0² _lh_deleteFirst_Board_1² _lh_deleteFirst_Board_2² _lh_deleteFirst_Board_3² => 
//│ 		let ts'² = myInit_lh_₂(_lh_deleteFirst_Board_3²)
//│ 		in [Board _lh_deleteFirst_Board_0² (_lh_deleteFirst_Board_1² - 1) myLast_lh_₂(ts'²) ts'²]}
//│ def deleteFirst_lh_₃(_lh_deleteFirst_arg1¹) = case _lh_deleteFirst_arg1¹ of {
//│ 	Board _lh_deleteFirst_Board_0¹ _lh_deleteFirst_Board_1¹ _lh_deleteFirst_Board_2¹ _lh_deleteFirst_Board_3¹ => 
//│ 		let ts'¹ = myInit_lh_₃(_lh_deleteFirst_Board_3¹)
//│ 		in [Board _lh_deleteFirst_Board_0¹ (_lh_deleteFirst_Board_1¹ - 1) myLast_lh_₃(ts'¹) ts'¹]}
//│ def deleteFirst_lh_₄(_lh_deleteFirst_arg1⁰) = case _lh_deleteFirst_arg1⁰ of {
//│ 	Board _lh_deleteFirst_Board_0⁰ _lh_deleteFirst_Board_1⁰ _lh_deleteFirst_Board_2⁰ _lh_deleteFirst_Board_3⁰ => 
//│ 		let ts'⁰ = myInit_lh_₃(_lh_deleteFirst_Board_3⁰)
//│ 		in [Board _lh_deleteFirst_Board_0⁰ (_lh_deleteFirst_Board_1⁰ - 1) myLast_lh_₃(ts'⁰) ts'⁰]}
//│ def depthSearch_lh_₁(_lh_depthSearch_arg1⁰, _lh_depthSearch_arg2⁰, _lh_depthSearch_arg3⁰) = if 
//│ 	let _lh_matchIdent⁰ = _lh_depthSearch_arg1⁰
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]} then lazy⁰([LH_N]) else if _lh_depthSearch_arg3⁰(inquireFront_lh_₂(_lh_depthSearch_arg1⁰)) then lazy⁰([LH_C inquireFront_lh_₁(_lh_depthSearch_arg1⁰) depthSearch_lh_₁(removeFront_lh_₁(_lh_depthSearch_arg1⁰), _lh_depthSearch_arg2⁰, _lh_depthSearch_arg3⁰)]) else depthSearch_lh_₁(addAllFront_lh_₂(_lh_depthSearch_arg2⁰(inquireFront_lh_₃(_lh_depthSearch_arg1⁰)), removeFront_lh_₂(_lh_depthSearch_arg1⁰)), _lh_depthSearch_arg2⁰, _lh_depthSearch_arg3⁰)
//│ def descAndNo_lh_₁(_lh_descAndNo_arg1¹) = 
//│ 	let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C [LH_P2 length_lh_₄(possibleMoves_lh_₁(deleteFirst_lh_₃(_lh_listcomp_fun_ls_h⁸))) _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁸(allDescend_lh_₁(_lh_descAndNo_arg1¹))
//│ def descAndNo_lh_₂(_lh_descAndNo_arg1⁰) = 
//│ 	let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 		LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 length_lh_₆(possibleMoves_lh_₄(deleteFirst_lh_₄(_lh_listcomp_fun_ls_h³))) _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun³(allDescend_lh_₁(_lh_descAndNo_arg1⁰))
//│ def descendents_lh_₁(_lh_descendents_arg1⁰) = if (canJumpFirst_lh_₂(_lh_descendents_arg1⁰) && deadEnd_lh_₁(addPiece_lh_₁(firstPiece_lh_₁(_lh_descendents_arg1⁰), _lh_descendents_arg1⁰))) then [LH_N] else 
//│ 	let singles⁰ = singleDescend_lh_₁(_lh_descendents_arg1⁰)
//│ 	in let scrut⁰ = length_lh_₃(singles⁰)
//│ 	in if (scrut⁰ == 0) then map_lh_₂(mySnd_lh_₁, quickSortIntChessSet_lh_₁(descAndNo_lh_₁(_lh_descendents_arg1⁰))) else if (scrut⁰ == 1) then singles⁰ else [LH_N]
//│ def enumFromTo_lh_₁(a¹, b¹) = if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)] else [LH_N]
//│ def enumFromTo_lh_₂(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh_₂((a⁰ + 1), b⁰)] else [LH_N]
//│ def firstPiece_lh_₁(_lh_firstPiece_arg1²) = case _lh_firstPiece_arg1² of {
//│ 	Board _lh_firstPiece_Board_0² _lh_firstPiece_Board_1² _lh_firstPiece_Board_2² _lh_firstPiece_Board_3² => _lh_firstPiece_Board_2²}
//│ def firstPiece_lh_₂(_lh_firstPiece_arg1¹) = case _lh_firstPiece_arg1¹ of {
//│ 	Board _lh_firstPiece_Board_0¹ _lh_firstPiece_Board_1¹ _lh_firstPiece_Board_2¹ _lh_firstPiece_Board_3¹ => _lh_firstPiece_Board_2¹}
//│ def firstPiece_lh_₃(_lh_firstPiece_arg1⁰) = case _lh_firstPiece_arg1⁰ of {
//│ 	Board _lh_firstPiece_Board_0⁰ _lh_firstPiece_Board_1⁰ _lh_firstPiece_Board_2⁰ _lh_firstPiece_Board_3⁰ => _lh_firstPiece_Board_2⁰}
//│ def foldr_lh_₁(f⁵, i¹, ls¹¹) = case ls¹¹ of {
//│ 	LH_C h³¹ t³¹ => f⁵(h³¹, foldr_lh_₁(f⁵, i¹, t³¹))
//│ 	| LH_N  => i¹}
//│ def foldr_lh_₂(f⁴, i⁰, ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h³⁰ t³⁰ => f⁴(h³⁰, foldr_lh_₂(f⁴, i⁰, t³⁰))
//│ 	| LH_N  => i⁰}
//│ def grow_lh_₁(_lh_grow_arg1⁰) = case _lh_grow_arg1⁰ of {
//│ 	LH_P2 _lh_grow_LH_P2_0⁰ _lh_grow_LH_P2_1⁰ => zip_lz_nl_lh_₂(repeat_lh_₂((_lh_grow_LH_P2_0⁰ + 1)), descendents_lh_₁(_lh_grow_LH_P2_1⁰))}
//│ def inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_arg2⁰) = case _lh_inList_arg2⁰ of {
//│ 	LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰)
//│ 	| LH_N  => [False]}
//│ def inquireFront_lh_₁(_lh_inquireFront_arg1²) = case _lh_inquireFront_arg1² of {
//│ 	LH_N  => error⁰([LH_C 'C' [LH_C 'a' [LH_C 'n' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C 'q' [LH_C 'u' [LH_C 'i' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'e' [LH_C 'm' [LH_C 'p' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'Q' [LH_C 'u' [LH_C 'e' [LH_C 'u' [LH_C 'e' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 	| LH_C _lh_inquireFront_LH_C_0² _lh_inquireFront_LH_C_1² => _lh_inquireFront_LH_C_0²}
//│ def inquireFront_lh_₂(_lh_inquireFront_arg1¹) = case _lh_inquireFront_arg1¹ of {
//│ 	LH_N  => error⁰([LH_C 'C' [LH_C 'a' [LH_C 'n' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C 'q' [LH_C 'u' [LH_C 'i' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'e' [LH_C 'm' [LH_C 'p' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'Q' [LH_C 'u' [LH_C 'e' [LH_C 'u' [LH_C 'e' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 	| LH_C _lh_inquireFront_LH_C_0¹ _lh_inquireFront_LH_C_1¹ => _lh_inquireFront_LH_C_0¹}
//│ def inquireFront_lh_₃(_lh_inquireFront_arg1⁰) = case _lh_inquireFront_arg1⁰ of {
//│ 	LH_N  => error⁰([LH_C 'C' [LH_C 'a' [LH_C 'n' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C 'q' [LH_C 'u' [LH_C 'i' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'e' [LH_C 'm' [LH_C 'p' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'Q' [LH_C 'u' [LH_C 'e' [LH_C 'u' [LH_C 'e' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 	| LH_C _lh_inquireFront_LH_C_0⁰ _lh_inquireFront_LH_C_1⁰ => _lh_inquireFront_LH_C_0⁰}
//│ def intChessSetComp_lh_₁(_lh_intChessSetComp_arg1¹, _lh_intChessSetComp_arg2¹) = case _lh_intChessSetComp_arg1¹ of {
//│ 	LH_P2 _lh_intChessSetComp_LH_P2_0² _lh_intChessSetComp_LH_P2_1² => case _lh_intChessSetComp_arg2¹ of {
//│ 		LH_P2 _lh_intChessSetComp_LH_P2_0³ _lh_intChessSetComp_LH_P2_1³ => (_lh_intChessSetComp_LH_P2_0² < _lh_intChessSetComp_LH_P2_0³)}}
//│ def intChessSetComp_lh_₂(_lh_intChessSetComp_arg1⁰, _lh_intChessSetComp_arg2⁰) = case _lh_intChessSetComp_arg1⁰ of {
//│ 	LH_P2 _lh_intChessSetComp_LH_P2_0⁰ _lh_intChessSetComp_LH_P2_1⁰ => case _lh_intChessSetComp_arg2⁰ of {
//│ 		LH_P2 _lh_intChessSetComp_LH_P2_0¹ _lh_intChessSetComp_LH_P2_1¹ => (_lh_intChessSetComp_LH_P2_0⁰ < _lh_intChessSetComp_LH_P2_0¹)}}
//│ def intintComp_lh_₁(_lh_intintComp_arg1¹, _lh_intintComp_arg2¹) = case _lh_intintComp_arg1¹ of {
//│ 	LH_P2 _lh_intintComp_LH_P2_0² _lh_intintComp_LH_P2_1² => case _lh_intintComp_arg2¹ of {
//│ 		LH_P2 _lh_intintComp_LH_P2_0³ _lh_intintComp_LH_P2_1³ => ((_lh_intintComp_LH_P2_0² < _lh_intintComp_LH_P2_0³) || ((_lh_intintComp_LH_P2_0² == _lh_intintComp_LH_P2_0³) && (_lh_intintComp_LH_P2_1² < _lh_intintComp_LH_P2_1³)))}}
//│ def intintComp_lh_₂(_lh_intintComp_arg1⁰, _lh_intintComp_arg2⁰) = case _lh_intintComp_arg1⁰ of {
//│ 	LH_P2 _lh_intintComp_LH_P2_0⁰ _lh_intintComp_LH_P2_1⁰ => case _lh_intintComp_arg2⁰ of {
//│ 		LH_P2 _lh_intintComp_LH_P2_0¹ _lh_intintComp_LH_P2_1¹ => ((_lh_intintComp_LH_P2_0⁰ < _lh_intintComp_LH_P2_0¹) || ((_lh_intintComp_LH_P2_0⁰ == _lh_intintComp_LH_P2_0¹) && (_lh_intintComp_LH_P2_1⁰ < _lh_intintComp_LH_P2_1¹)))}}
//│ def isFinished_lh_₁(_lh_isFinished_arg1⁰) = case _lh_isFinished_arg1⁰ of {
//│ 	LH_P2 _lh_isFinished_LH_P2_0⁰ _lh_isFinished_LH_P2_1⁰ => tourFinished_lh_₁(_lh_isFinished_LH_P2_1⁰)}
//│ def isSquareFree_lh_₁(_lh_isSquareFree_arg1¹, _lh_isSquareFree_arg2¹) = case _lh_isSquareFree_arg2¹ of {
//│ 	Board _lh_isSquareFree_Board_0¹ _lh_isSquareFree_Board_1¹ _lh_isSquareFree_Board_2¹ _lh_isSquareFree_Board_3¹ => not⁰(inList_lh_₁(_lh_isSquareFree_arg1¹, _lh_isSquareFree_Board_3¹))}
//│ def isSquareFree_lh_₂(_lh_isSquareFree_arg1⁰, _lh_isSquareFree_arg2⁰) = case _lh_isSquareFree_arg2⁰ of {
//│ 	Board _lh_isSquareFree_Board_0⁰ _lh_isSquareFree_Board_1⁰ _lh_isSquareFree_Board_2⁰ _lh_isSquareFree_Board_3⁰ => not⁰(inList_lh_₁(_lh_isSquareFree_arg1⁰, _lh_isSquareFree_Board_3⁰))}
//│ def lastPiece_lh_₁(_lh_lastPiece_arg1⁰) = case _lh_lastPiece_arg1⁰ of {
//│ 	Board _lh_lastPiece_Board_0⁰ _lh_lastPiece_Board_1⁰ _lh_lastPiece_Board_2⁰ _lh_lastPiece_Board_3⁰ => case _lh_lastPiece_Board_3⁰ of {
//│ 		LH_C _lh_lastPiece_LH_C_0⁰ _lh_lastPiece_LH_C_1⁰ => _lh_lastPiece_LH_C_0⁰}}
//│ def length_lh_₁(ls⁹) = case ls⁹ of {
//│ 	LH_C h²⁹ t²⁹ => (1 + length_lh_₁(t²⁹))
//│ 	| LH_N  => 0}
//│ def length_lh_₂(ls⁸) = case ls⁸ of {
//│ 	LH_C h²⁸ t²⁸ => (1 + length_lh_₂(t²⁸))
//│ 	| LH_N  => 0}
//│ def length_lh_₃(ls⁴) = case ls⁴ of {
//│ 	LH_C h⁷ t⁷ => (1 + length_lh_₃(t⁷))
//│ 	| LH_N  => 0}
//│ def length_lh_₄(ls³) = case ls³ of {
//│ 	LH_C h⁵ t⁵ => (1 + length_lh_₄(t⁵))
//│ 	| LH_N  => 0}
//│ def length_lh_₅(ls²) = case ls² of {
//│ 	LH_C h² t² => (1 + length_lh_₅(t²))
//│ 	| LH_N  => 0}
//│ def length_lh_₆(ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => (1 + length_lh_₆(t⁰))
//│ 	| LH_N  => 0}
//│ def map_lh_₁(f³, ls⁷) = case ls⁷ of {
//│ 	LH_C h²⁶ t²⁶ => [LH_C f³(h²⁶) map_lh_₁(f³, t²⁶)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f¹, ls⁵) = case ls⁵ of {
//│ 	LH_C h⁸ t⁸ => [LH_C f¹(h⁸) map_lh_₂(f¹, t⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f⁰, ls¹) = case ls¹ of {
//│ 	LH_C h¹ t¹ => [LH_C f⁰(h¹) map_lh_₃(f⁰, t¹)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs²², ys²²) = case xs²² of {
//│ 	LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)]
//│ 	| LH_N  => ys²²}
//│ def mappend_lh_₁₀(xs¹⁰, ys¹⁰) = case xs¹⁰ of {
//│ 	LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₁₀(t¹⁶, ys¹⁰)]
//│ 	| LH_N  => ys¹⁰}
//│ def mappend_lh_₁₁(xs⁹, ys⁹) = case xs⁹ of {
//│ 	LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₁₁(t¹⁵, ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_lh_₁₂(xs⁸, ys⁸) = case xs⁸ of {
//│ 	LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₁₂(t¹⁴, ys⁸)]
//│ 	| LH_N  => ys⁸}
//│ def mappend_lh_₁₃(xs⁷, ys⁷) = case xs⁷ of {
//│ 	LH_C h¹³ t¹³ => [LH_C h¹³ mappend_lh_₁₃(t¹³, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₁₄(xs⁶, ys⁶) = case xs⁶ of {
//│ 	LH_C h¹² t¹² => [LH_C h¹² mappend_lh_₁₄(t¹², ys⁶)]
//│ 	| LH_N  => ys⁶}
//│ def mappend_lh_₁₅(xs⁵, ys⁵) = case xs⁵ of {
//│ 	LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₁₅(t¹¹, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mappend_lh_₁₆(xs⁴, ys⁴) = case xs⁴ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₆(t¹⁰, ys⁴)]
//│ 	| LH_N  => ys⁴}
//│ def mappend_lh_₁₇(xs³, ys³) = case xs³ of {
//│ 	LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₇(t⁹, ys³)]
//│ 	| LH_N  => ys³}
//│ def mappend_lh_₁₈(xs², ys²) = case xs² of {
//│ 	LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁₈(t⁶, ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₁₉(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₁₉(t⁴, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₂(xs²¹, ys²¹) = case xs²¹ of {
//│ 	LH_C h²⁵ t²⁵ => [LH_C h²⁵ mappend_lh_₂(t²⁵, ys²¹)]
//│ 	| LH_N  => ys²¹}
//│ def mappend_lh_₂₀(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh_₂₀(t³, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₃(xs²⁰, ys²⁰) = case xs²⁰ of {
//│ 	LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)]
//│ 	| LH_N  => ys²⁰}
//│ def mappend_lh_₄(xs¹⁹, ys¹⁹) = case xs¹⁹ of {
//│ 	LH_C h²² t²² => [LH_C h²² mappend_lh_₄(t²², ys¹⁹)]
//│ 	| LH_N  => ys¹⁹}
//│ def mappend_lh_₅(xs¹⁵, ys¹⁵) = case xs¹⁵ of {
//│ 	LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₅(t²¹, ys¹⁵)]
//│ 	| LH_N  => ys¹⁵}
//│ def mappend_lh_₆(xs¹⁴, ys¹⁴) = case xs¹⁴ of {
//│ 	LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₆(t²⁰, ys¹⁴)]
//│ 	| LH_N  => ys¹⁴}
//│ def mappend_lh_₇(xs¹³, ys¹³) = case xs¹³ of {
//│ 	LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₇(t¹⁹, ys¹³)]
//│ 	| LH_N  => ys¹³}
//│ def mappend_lh_₈(xs¹², ys¹²) = case xs¹² of {
//│ 	LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₈(t¹⁸, ys¹²)]
//│ 	| LH_N  => ys¹²}
//│ def mappend_lh_₉(xs¹¹, ys¹¹) = case xs¹¹ of {
//│ 	LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ mappend_lh_₉(t¹⁷, ys¹¹)]
//│ 	| LH_N  => ys¹¹}
//│ def moveKnight_lh_₁(_lh_moveKnight_arg1⁰, _lh_moveKnight_arg2⁰) = addPiece_lh_₁(move_lh_₁(_lh_moveKnight_arg2⁰, lastPiece_lh_₁(_lh_moveKnight_arg1⁰)), _lh_moveKnight_arg1⁰)
//│ def move_lh_₁(_lh_move_arg1⁰, _lh_move_arg2⁰) = case _lh_move_arg1⁰ of {
//│ 	UL  => case _lh_move_arg2⁰ of {
//│ 		LH_P2 _lh_move_LH_P2_0⁰ _lh_move_LH_P2_1⁰ => [LH_P2 (_lh_move_LH_P2_0⁰ - 1) (_lh_move_LH_P2_1⁰ - 2)]}
//│ 	| UR  => case _lh_move_arg2⁰ of {
//│ 		LH_P2 _lh_move_LH_P2_0¹ _lh_move_LH_P2_1¹ => [LH_P2 (_lh_move_LH_P2_0¹ + 1) (_lh_move_LH_P2_1¹ - 2)]}
//│ 	| DL  => case _lh_move_arg2⁰ of {
//│ 		LH_P2 _lh_move_LH_P2_0² _lh_move_LH_P2_1² => [LH_P2 (_lh_move_LH_P2_0² - 1) (_lh_move_LH_P2_1² + 2)]}
//│ 	| DR  => case _lh_move_arg2⁰ of {
//│ 		LH_P2 _lh_move_LH_P2_0³ _lh_move_LH_P2_1³ => [LH_P2 (_lh_move_LH_P2_0³ + 1) (_lh_move_LH_P2_1³ + 2)]}
//│ 	| LU  => case _lh_move_arg2⁰ of {
//│ 		LH_P2 _lh_move_LH_P2_0⁴ _lh_move_LH_P2_1⁴ => [LH_P2 (_lh_move_LH_P2_0⁴ - 2) (_lh_move_LH_P2_1⁴ - 1)]}
//│ 	| LD  => case _lh_move_arg2⁰ of {
//│ 		LH_P2 _lh_move_LH_P2_0⁵ _lh_move_LH_P2_1⁵ => [LH_P2 (_lh_move_LH_P2_0⁵ - 2) (_lh_move_LH_P2_1⁵ + 1)]}
//│ 	| RU  => case _lh_move_arg2⁰ of {
//│ 		LH_P2 _lh_move_LH_P2_0⁶ _lh_move_LH_P2_1⁶ => [LH_P2 (_lh_move_LH_P2_0⁶ + 2) (_lh_move_LH_P2_1⁶ - 1)]}
//│ 	| RD  => case _lh_move_arg2⁰ of {
//│ 		LH_P2 _lh_move_LH_P2_0⁷ _lh_move_LH_P2_1⁷ => [LH_P2 (_lh_move_LH_P2_0⁷ + 2) (_lh_move_LH_P2_1⁷ + 1)]}}
//│ def myInit_lh_₁(_lh_myInit_arg1²) = case _lh_myInit_arg1² of {
//│ 	LH_C _lh_myInit_LH_C_0² _lh_myInit_LH_C_1² => case _lh_myInit_LH_C_1² of {
//│ 		LH_N  => [LH_N]
//│ 		| _  => [LH_C _lh_myInit_LH_C_0² myInit_lh_₁(_lh_myInit_LH_C_1²)]}}
//│ def myInit_lh_₂(_lh_myInit_arg1¹) = case _lh_myInit_arg1¹ of {
//│ 	LH_C _lh_myInit_LH_C_0¹ _lh_myInit_LH_C_1¹ => case _lh_myInit_LH_C_1¹ of {
//│ 		LH_N  => [LH_N]
//│ 		| _  => [LH_C _lh_myInit_LH_C_0¹ myInit_lh_₂(_lh_myInit_LH_C_1¹)]}}
//│ def myInit_lh_₃(_lh_myInit_arg1⁰) = case _lh_myInit_arg1⁰ of {
//│ 	LH_C _lh_myInit_LH_C_0⁰ _lh_myInit_LH_C_1⁰ => case _lh_myInit_LH_C_1⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| _  => [LH_C _lh_myInit_LH_C_0⁰ myInit_lh_₃(_lh_myInit_LH_C_1⁰)]}}
//│ def myIsDigit_lh_₁(_lh_myIsDigit_arg1⁰) = 
//│ 	let n¹ = int_of_char⁰(_lh_myIsDigit_arg1⁰)
//│ 	in ((n¹ >= 48) && (n¹ <= 57))
//│ def myLast_lh_₁(_lh_myLast_arg1²) = case _lh_myLast_arg1² of {
//│ 	LH_N  => [LH_P2 (0 - 100) (0 - 100)]
//│ 	| LH_C _lh_myLast_LH_C_0² _lh_myLast_LH_C_1² => 
//│ 		let go² = (fun _lh_go_arg1² -> (fun _lh_go_arg2² -> case _lh_go_arg2² of {
//│ 			LH_N  => _lh_go_arg1²
//│ 			| LH_C _lh_go_LH_C_0² _lh_go_LH_C_1² => go²(_lh_go_LH_C_0², _lh_go_LH_C_1²)}))
//│ 		in go²(_lh_myLast_LH_C_0², _lh_myLast_LH_C_1²)}
//│ def myLast_lh_₂(_lh_myLast_arg1¹) = case _lh_myLast_arg1¹ of {
//│ 	LH_N  => [LH_P2 (0 - 100) (0 - 100)]
//│ 	| LH_C _lh_myLast_LH_C_0¹ _lh_myLast_LH_C_1¹ => 
//│ 		let go¹ = (fun _lh_go_arg1¹ -> (fun _lh_go_arg2¹ -> case _lh_go_arg2¹ of {
//│ 			LH_N  => _lh_go_arg1¹
//│ 			| LH_C _lh_go_LH_C_0¹ _lh_go_LH_C_1¹ => go¹(_lh_go_LH_C_0¹, _lh_go_LH_C_1¹)}))
//│ 		in go¹(_lh_myLast_LH_C_0¹, _lh_myLast_LH_C_1¹)}
//│ def myLast_lh_₃(_lh_myLast_arg1⁰) = case _lh_myLast_arg1⁰ of {
//│ 	LH_N  => [LH_P2 (0 - 100) (0 - 100)]
//│ 	| LH_C _lh_myLast_LH_C_0⁰ _lh_myLast_LH_C_1⁰ => 
//│ 		let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {
//│ 			LH_N  => _lh_go_arg1⁰
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰)}))
//│ 		in go⁰(_lh_myLast_LH_C_0⁰, _lh_myLast_LH_C_1⁰)}
//│ def mySnd_lh_₁(_lh_mySnd_arg1⁰) = case _lh_mySnd_arg1⁰ of {
//│ 	LH_P2 _lh_mySnd_LH_P2_0⁰ _lh_mySnd_LH_P2_1⁰ => _lh_mySnd_LH_P2_1⁰}
//│ def noPieces_lh_₁(_lh_noPieces_arg1⁰) = case _lh_noPieces_arg1⁰ of {
//│ 	Board _lh_noPieces_Board_0⁰ _lh_noPieces_Board_1⁰ _lh_noPieces_Board_2⁰ _lh_noPieces_Board_3⁰ => _lh_noPieces_Board_1⁰}
//│ def possibleMoves_lh_₁(_lh_possibleMoves_arg1³) = 
//│ 	let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if canMove_lh_₁(_lh_possibleMoves_arg1³, _lh_listcomp_fun_ls_h⁴) then [LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁴([LH_C [UL] [LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]])
//│ def possibleMoves_lh_₂(_lh_possibleMoves_arg1²) = 
//│ 	let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 		LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if canMove_lh_₁(_lh_possibleMoves_arg1², _lh_listcomp_fun_ls_h²) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun²([LH_C [UL] [LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]])
//│ def possibleMoves_lh_₃(_lh_possibleMoves_arg1¹) = 
//│ 	let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if canMove_lh_₁(_lh_possibleMoves_arg1¹, _lh_listcomp_fun_ls_h¹) then [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹([LH_C [UL] [LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]])
//│ def possibleMoves_lh_₄(_lh_possibleMoves_arg1⁰) = 
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if canMove_lh_₁(_lh_possibleMoves_arg1⁰, _lh_listcomp_fun_ls_h⁰) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰([LH_C [UL] [LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]])
//│ def printBoard_lh_₁(_lh_printBoard_arg1⁰, _lh_printBoard_arg2⁰, _lh_printBoard_arg3⁰) = case _lh_printBoard_arg3⁰ of {
//│ 	LH_N  => if (_lh_printBoard_arg2⁰ > (_lh_printBoard_arg1⁰ * _lh_printBoard_arg1⁰)) then [LH_N] else if ((_lh_printBoard_arg2⁰ % _lh_printBoard_arg1⁰) /= 0) then mappend_lh_₉(mappend_lh_₁₄([LH_C '*' [LH_N]], spaces_lh_₁((_lh_printBoard_arg1⁰ * _lh_printBoard_arg1⁰), 1)), printBoard_lh_₁(_lh_printBoard_arg1⁰, (_lh_printBoard_arg2⁰ + 1), [LH_N])) else if ((_lh_printBoard_arg2⁰ % _lh_printBoard_arg1⁰) == 0) then mappend_lh_₈([LH_C '*' [LH_C '|' [LH_N]]], printBoard_lh_₁(_lh_printBoard_arg1⁰, (_lh_printBoard_arg2⁰ + 1), [LH_N])) else error⁰([LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 't' [LH_C 'B' [LH_C 'o' [LH_C 'a' [LH_C 'r' [LH_C 'd' [LH_C ' ' [LH_C 'e' [LH_C 'm' [LH_C 'p' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'l' [LH_C 'i' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 	| LH_C _lh_printBoard_LH_C_0⁰ _lh_printBoard_LH_C_1⁰ => case _lh_printBoard_LH_C_0⁰ of {
//│ 		LH_P2 _lh_printBoard_LH_P2_0⁰ _lh_printBoard_LH_P2_1⁰ => if ((_lh_printBoard_LH_P2_0⁰ == _lh_printBoard_arg2⁰) && ((_lh_printBoard_arg2⁰ % _lh_printBoard_arg1⁰) == 0)) then mappend_lh_₇(mappend_lh_₁₁(string_of_int⁰(_lh_printBoard_LH_P2_1⁰), [LH_C '|' [LH_N]]), printBoard_lh_₁(_lh_printBoard_arg1⁰, (_lh_printBoard_arg2⁰ + 1), _lh_printBoard_LH_C_1⁰)) else if ((_lh_printBoard_LH_P2_0⁰ == _lh_printBoard_arg2⁰) && ((_lh_printBoard_arg2⁰ % _lh_printBoard_arg1⁰) /= 0)) then mappend_lh_₅(mappend_lh_₁₃(string_of_int⁰(_lh_printBoard_LH_P2_1⁰), spaces_lh_₂((_lh_printBoard_arg1⁰ * _lh_printBoard_arg1⁰), _lh_printBoard_LH_P2_1⁰)), printBoard_lh_₁(_lh_printBoard_arg1⁰, (_lh_printBoard_arg2⁰ + 1), _lh_printBoard_LH_C_1⁰)) else if ((_lh_printBoard_arg2⁰ % _lh_printBoard_arg1⁰) /= 0) then mappend_lh_₆(mappend_lh_₁₂([LH_C '*' [LH_N]], spaces_lh_₃((_lh_printBoard_arg1⁰ * _lh_printBoard_arg1⁰), 1)), printBoard_lh_₁(_lh_printBoard_arg1⁰, (_lh_printBoard_arg2⁰ + 1), [LH_C [LH_P2 _lh_printBoard_LH_P2_0⁰ _lh_printBoard_LH_P2_1⁰] _lh_printBoard_LH_C_1⁰])) else if ((_lh_printBoard_arg2⁰ % _lh_printBoard_arg1⁰) == 0) then mappend_lh_₁₀([LH_C '*' [LH_C '|' [LH_N]]], printBoard_lh_₁(_lh_printBoard_arg1⁰, (_lh_printBoard_arg2⁰ + 1), [LH_C [LH_P2 _lh_printBoard_LH_P2_0⁰ _lh_printBoard_LH_P2_1⁰] _lh_printBoard_LH_C_1⁰])) else error⁰([LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 't' [LH_C 'B' [LH_C 'o' [LH_C 'a' [LH_C 'r' [LH_C 'd' [LH_C ' ' [LH_C 'n' [LH_C 'o' [LH_C 'n' [LH_C '-' [LH_C 'e' [LH_C 'm' [LH_C 'p' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'l' [LH_C 'i' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])}}
//│ def printTour_lh_₁(_lh_printTour_arg1⁰) = 
//│ 	let strToInt⁰ = (fun _lh_strToInt_arg1⁰ -> (fun _lh_strToInt_arg2⁰ -> case _lh_strToInt_arg2⁰ of {
//│ 			LH_N  => _lh_strToInt_arg1⁰
//│ 			| LH_C _lh_strToInt_LH_C_0⁰ _lh_strToInt_LH_C_1⁰ => strToInt⁰(((10 * _lh_strToInt_arg1⁰) + (int_of_char⁰(_lh_strToInt_LH_C_0⁰) - int_of_char⁰('0'))), _lh_strToInt_LH_C_1⁰)}))
//│ 	and pp⁰ = (fun _lh_pp_arg1⁰ -> case _lh_pp_arg1⁰ of {
//│ 			LH_N  => [LH_N]
//│ 			| LH_C _lh_pp_LH_C_0⁰ _lh_pp_LH_C_1⁰ => case _lh_pp_LH_C_0⁰ of {
//│ 				LH_P2 _lh_pp_LH_P2_0⁰ _lh_pp_LH_P2_1⁰ => mappend_lh_₄(mappend_lh_₁(mappend_lh_₂(mappend_lh_₃([LH_C '|' [LH_C 'K' [LH_C 'n' [LH_C 'i' [LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]], string_of_int⁰(_lh_pp_LH_P2_0⁰)), [LH_C ' ' [LH_C 'b' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]), showChessSet_lh_₁(_lh_pp_LH_P2_1⁰)), pp⁰(_lh_pp_LH_C_1⁰))}}) 
//│ 	in let _lh_matchIdent¹ = map_lh_₁(strToInt⁰(0), _lh_printTour_arg1⁰)
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_C _lh_printTour_LH_C_0⁰ _lh_printTour_LH_C_1⁰ => case _lh_printTour_LH_C_1⁰ of {
//│ 			LH_C _lh_printTour_LH_C_0¹ _lh_printTour_LH_C_1¹ => case _lh_printTour_LH_C_1¹ of {
//│ 				LH_N  => pp⁰(take_lz_lh_₁(_lh_printTour_LH_C_0¹, depthSearch_lh_₁(root_lh_₁(_lh_printTour_LH_C_0⁰), grow_lh_₁, isFinished_lh_₁)))}}}
//│ def quickSortIntChessSet_lh_₁(_lh_quickSortIntChessSet_arg1⁰) = case _lh_quickSortIntChessSet_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_quickSortIntChessSet_LH_C_0⁰ _lh_quickSortIntChessSet_LH_C_1⁰ => mappend_lh_₂₀(mappend_lh_₁₉(quickSortIntChessSet_lh_₁(
//│ 		let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if intChessSetComp_lh_₁(_lh_listcomp_fun_ls_h⁵, _lh_quickSortIntChessSet_LH_C_0⁰) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁵(_lh_quickSortIntChessSet_LH_C_1⁰)), [LH_C _lh_quickSortIntChessSet_LH_C_0⁰ [LH_N]]), quickSortIntChessSet_lh_₁(
//│ 		let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => if not⁰(intChessSetComp_lh_₂(_lh_listcomp_fun_ls_h⁶, _lh_quickSortIntChessSet_LH_C_0⁰)) then [LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] else _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁶(_lh_quickSortIntChessSet_LH_C_1⁰)))}
//│ def quickSortIntInt_lh_₁(_lh_quickSortIntInt_arg1⁰) = case _lh_quickSortIntInt_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_quickSortIntInt_LH_C_0⁰ _lh_quickSortIntInt_LH_C_1⁰ => mappend_lh_₁₆(mappend_lh_₁₅(quickSortIntInt_lh_₁(
//│ 		let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => if intintComp_lh_₁(_lh_listcomp_fun_ls_h⁹, _lh_quickSortIntInt_LH_C_0⁰) then [LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)] else _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁹(_lh_quickSortIntInt_LH_C_1⁰)), [LH_C _lh_quickSortIntInt_LH_C_0⁰ [LH_N]]), quickSortIntInt_lh_₁(
//│ 		let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => if not⁰(intintComp_lh_₂(_lh_listcomp_fun_ls_h¹⁰, _lh_quickSortIntInt_LH_C_0⁰)) then [LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)] else _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun¹⁰(_lh_quickSortIntInt_LH_C_1⁰)))}
//│ def removeFront_lh_₁(_lh_removeFront_arg1¹) = case _lh_removeFront_arg1¹ of {
//│ 	LH_N  => error⁰([LH_C 'C' [LH_C 'a' [LH_C 'n' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 'r' [LH_C 'e' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'r' [LH_C 'o' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_C 'e' [LH_C 'm' [LH_C 'p' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'Q' [LH_C 'u' [LH_C 'e' [LH_C 'u' [LH_C 'e' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 	| LH_C _lh_removeFront_LH_C_0¹ _lh_removeFront_LH_C_1¹ => _lh_removeFront_LH_C_1¹}
//│ def removeFront_lh_₂(_lh_removeFront_arg1⁰) = case _lh_removeFront_arg1⁰ of {
//│ 	LH_N  => error⁰([LH_C 'C' [LH_C 'a' [LH_C 'n' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 'r' [LH_C 'e' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'r' [LH_C 'o' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_C 'e' [LH_C 'm' [LH_C 'p' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'Q' [LH_C 'u' [LH_C 'e' [LH_C 'u' [LH_C 'e' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 	| LH_C _lh_removeFront_LH_C_0⁰ _lh_removeFront_LH_C_1⁰ => _lh_removeFront_LH_C_1⁰}
//│ def repeat_lh_₁(x¹) = lazy⁰([LH_C x¹ repeat_lh_₁(x¹)])
//│ def repeat_lh_₂(x⁰) = lazy⁰([LH_C x⁰ repeat_lh_₂(x⁰)])
//│ def root_lh_₁(_lh_root_arg1⁰) = addAllFront_lh_₁(zip_lz_nl_lh_₁(repeat_lh_₁((1 - (_lh_root_arg1⁰ * _lh_root_arg1⁰))), zipWith_lh_₁(startTour_lh_₁, 
//│ 	let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => 
//│ 			let _lh_listcomp_fun¹² = (fun _lh_listcomp_fun_para¹² -> case _lh_listcomp_fun_para¹² of {
//│ 				LH_C _lh_listcomp_fun_ls_h¹² _lh_listcomp_fun_ls_t¹² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_h¹²] _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t¹²)]
//│ 				| LH_N  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)})
//│ 			in _lh_listcomp_fun¹²(enumFromTo_lh_₁(1, _lh_root_arg1⁰))
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹¹(enumFromTo_lh_₂(1, _lh_root_arg1⁰)), copy_lh_₁((_lh_root_arg1⁰ * _lh_root_arg1⁰), _lh_root_arg1⁰))), createQueue_lh_₁)
//│ def showChessSet_lh_₁(_lh_showChessSet_arg1⁰) = case _lh_showChessSet_arg1⁰ of {
//│ 	Board _lh_showChessSet_Board_0⁰ _lh_showChessSet_Board_1⁰ _lh_showChessSet_Board_2⁰ _lh_showChessSet_Board_3⁰ => 
//│ 		let sortedTrail⁰ = quickSortIntInt_lh_₁(assignMoveNo_lh_₁(_lh_showChessSet_Board_3⁰, _lh_showChessSet_Board_0⁰, _lh_showChessSet_Board_1⁰))
//│ 		in printBoard_lh_₁(_lh_showChessSet_Board_0⁰, 1, sortedTrail⁰)}
//│ def singleDescend_lh_₁(_lh_singleDescend_arg1⁰) = 
//│ 	let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => case _lh_listcomp_fun_ls_h⁷ of {
//│ 			LH_P2 _lh_singleDescend_LH_P2_0⁰ _lh_singleDescend_LH_P2_1⁰ => if (_lh_singleDescend_LH_P2_0⁰ == 1) then [LH_C _lh_singleDescend_LH_P2_1⁰ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)
//│ 			| _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁷(descAndNo_lh_₂(_lh_singleDescend_arg1⁰))
//│ def sizeBoard_lh_₁(_lh_sizeBoard_arg1²) = case _lh_sizeBoard_arg1² of {
//│ 	Board _lh_sizeBoard_Board_0² _lh_sizeBoard_Board_1² _lh_sizeBoard_Board_2² _lh_sizeBoard_Board_3² => _lh_sizeBoard_Board_0²}
//│ def sizeBoard_lh_₂(_lh_sizeBoard_arg1¹) = case _lh_sizeBoard_arg1¹ of {
//│ 	Board _lh_sizeBoard_Board_0¹ _lh_sizeBoard_Board_1¹ _lh_sizeBoard_Board_2¹ _lh_sizeBoard_Board_3¹ => _lh_sizeBoard_Board_0¹}
//│ def sizeBoard_lh_₃(_lh_sizeBoard_arg1⁰) = case _lh_sizeBoard_arg1⁰ of {
//│ 	Board _lh_sizeBoard_Board_0⁰ _lh_sizeBoard_Board_1⁰ _lh_sizeBoard_Board_2⁰ _lh_sizeBoard_Board_3⁰ => _lh_sizeBoard_Board_0⁰}
//│ def spaces_lh_₁(_lh_spaces_arg1², _lh_spaces_arg2²) = 
//│ 	let logTen² = (fun _lh_logTen_arg1² -> case _lh_logTen_arg1² of {
//│ 		0  => 0
//│ 		| _  => (1 + logTen²(div⁰(_lh_logTen_arg1², 10)))})
//│ 	in copy_lh_₂(((logTen²(_lh_spaces_arg1²) - logTen²(_lh_spaces_arg2²)) + 1), ' ')
//│ def spaces_lh_₂(_lh_spaces_arg1¹, _lh_spaces_arg2¹) = 
//│ 	let logTen¹ = (fun _lh_logTen_arg1¹ -> case _lh_logTen_arg1¹ of {
//│ 		0  => 0
//│ 		| _  => (1 + logTen¹(div⁰(_lh_logTen_arg1¹, 10)))})
//│ 	in copy_lh_₃(((logTen¹(_lh_spaces_arg1¹) - logTen¹(_lh_spaces_arg2¹)) + 1), ' ')
//│ def spaces_lh_₃(_lh_spaces_arg1⁰, _lh_spaces_arg2⁰) = 
//│ 	let logTen⁰ = (fun _lh_logTen_arg1⁰ -> case _lh_logTen_arg1⁰ of {
//│ 		0  => 0
//│ 		| _  => (1 + logTen⁰(div⁰(_lh_logTen_arg1⁰, 10)))})
//│ 	in copy_lh_₄(((logTen⁰(_lh_spaces_arg1⁰) - logTen⁰(_lh_spaces_arg2⁰)) + 1), ' ')
//│ def startTour_lh_₁(_lh_startTour_arg1⁰, _lh_startTour_arg2⁰) = if ((_lh_startTour_arg2⁰ % 2) == 0) then createBoard_lh_₁(_lh_startTour_arg2⁰, _lh_startTour_arg1⁰) else error⁰([LH_C 'T' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'd' [LH_C 'o' [LH_C 'e' [LH_C 's' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'x' [LH_C 'i' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C ' ' [LH_C 'o' [LH_C 'd' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'i' [LH_C 'z' [LH_C 'e' [LH_C ' ' [LH_C 'b' [LH_C 'o' [LH_C 'a' [LH_C 'r' [LH_C 'd' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ def take_lz_lh_₁(n⁰, ls⁶) = if (n⁰ > 0) then case force⁰(ls⁶) of {
//│ 	LH_C h²³ t²³ => [LH_C h²³ take_lz_lh_₁((n⁰ - 1), t²³)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testKnights_nofib_lh_₁(_lh_testKnights_nofib_arg1⁰) = 
//│ 	let all_digits⁰ = (fun _lh_all_digits_arg1⁰ -> foldr_lh_₂((fun _lh_funcomp_x⁰ -> (fun a² -> (fun b² -> (a² && b²)))(myIsDigit_lh_₁(_lh_funcomp_x⁰))), [True], _lh_all_digits_arg1⁰))
//│ 	and argsOk⁰ = (fun _lh_argsOk_arg1⁰ -> ((length_lh_₂(_lh_argsOk_arg1⁰) == 2) && foldr_lh_₁((fun _lh_funcomp_x¹ -> (fun a³ -> (fun b³ -> (a³ && b³)))(all_digits⁰(_lh_funcomp_x¹))), [True], _lh_argsOk_arg1⁰)))
//│ 	and usageString⁰ = [LH_C '|' [LH_C 'U' [LH_C 's' [LH_C 'a' [LH_C 'g' [LH_C 'e' [LH_C ':' [LH_C ' ' [LH_C 'k' [LH_C 'n' [LH_C 'i' [LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C '<' [LH_C 'b' [LH_C 'o' [LH_C 'a' [LH_C 'r' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'i' [LH_C 'z' [LH_C 'e' [LH_C '>' [LH_C ' ' [LH_C '<' [LH_C 'n' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C 's' [LH_C '>' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] 
//│ 	in if argsOk⁰(_lh_testKnights_nofib_arg1⁰) then length_lh_₁(printTour_lh_₁(_lh_testKnights_nofib_arg1⁰)) else error⁰(usageString⁰)
//│ def tourFinished_lh_₁(_lh_tourFinished_arg1⁰) = 
//│ 	let sze² = sizeBoard_lh_₁(_lh_tourFinished_arg1⁰)
//│ 	in ((noPieces_lh_₁(_lh_tourFinished_arg1⁰) == (sze² * sze²)) && canJumpFirst_lh_₁(_lh_tourFinished_arg1⁰))
//│ def zipWith_lh_₁(f², xs¹⁸, ys¹⁸) = case xs¹⁸ of {
//│ 	LH_C hx² tx² => case ys¹⁸ of {
//│ 		LH_C hy² ty² => [LH_C f²(hx², hy²) zipWith_lh_₁(f², tx², ty²)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zip_lz_nl_lh_₁(xs¹⁷, ys¹⁷) = case ys¹⁷ of {
//│ 	LH_C hy¹ ty¹ => case force⁰(xs¹⁷) of {
//│ 		LH_C hx¹ tx¹ => [LH_C [LH_P2 hx¹ hy¹] zip_lz_nl_lh_₁(tx¹, ty¹)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zip_lz_nl_lh_₂(xs¹⁶, ys¹⁶) = case ys¹⁶ of {
//│ 	LH_C hy⁰ ty⁰ => case force⁰(xs¹⁶) of {
//│ 		LH_C hx⁰ tx⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lz_nl_lh_₂(tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec myIsDigit_lh__d1 _lh_myIsDigit_arg1_0 =
//│ 		  (let rec n_1 = (int_of_char _lh_myIsDigit_arg1_0) in
//│ 		    ((n_1 >= 48) && (n_1 <= 57)));;
//│ 		let rec foldr_lh__d1 f_5 i_1 ls_1_1 =
//│ 		  (match ls_1_1 with
//│ 		    | `LH_C(h_3_1, t_3_1) -> 
//│ 		      ((f_5 h_3_1) (((foldr_lh__d1 f_5) i_1) t_3_1))
//│ 		    | `LH_N -> 
//│ 		      i_1);;
//│ 		let rec foldr_lh__d2 f_4 i_0 ls_1_0 =
//│ 		  (match ls_1_0 with
//│ 		    | `LH_C(h_3_0, t_3_0) -> 
//│ 		      ((f_4 h_3_0) (((foldr_lh__d2 f_4) i_0) t_3_0))
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec length_lh__d1 ls_9 =
//│ 		  (match ls_9 with
//│ 		    | `LH_C(h_2_9, t_2_9) -> 
//│ 		      (1 + (length_lh__d1 t_2_9))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec mappend_lh__d3 xs_2_0 ys_2_0 =
//│ 		  (match xs_2_0 with
//│ 		    | `LH_C(h_2_4, t_2_4) -> 
//│ 		      (`LH_C(h_2_4, ((mappend_lh__d3 t_2_4) ys_2_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_0);;
//│ 		let rec mappend_lh__d1 xs_2_2 ys_2_2 =
//│ 		  (match xs_2_2 with
//│ 		    | `LH_C(h_2_7, t_2_7) -> 
//│ 		      (`LH_C(h_2_7, ((mappend_lh__d1 t_2_7) ys_2_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_2);;
//│ 		let rec mappend_lh__d1_d8 xs_2 ys_2 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      (`LH_C(h_6, ((mappend_lh__d1_d8 t_6) ys_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2);;
//│ 		let rec addAllFront_lh__d2 _lh_addAllFront_arg1_0 _lh_addAllFront_arg2_0 =
//│ 		  ((mappend_lh__d1_d8 _lh_addAllFront_arg1_0) _lh_addAllFront_arg2_0);;
//│ 		let rec inquireFront_lh__d1 _lh_inquireFront_arg1_2 =
//│ 		  (match _lh_inquireFront_arg1_2 with
//│ 		    | `LH_N -> 
//│ 		      (failwith "msg"(`LH_C('C', (`LH_C('a', (`LH_C('n', (`LH_C('n', (`LH_C('o', (`LH_C('t', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C('q', (`LH_C('u', (`LH_C('i', (`LH_C('r', (`LH_C('e', (`LH_C(' ', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('e', (`LH_C('m', (`LH_C('p', (`LH_C('t', (`LH_C('y', (`LH_C(' ', (`LH_C('Q', (`LH_C('u', (`LH_C('e', (`LH_C('u', (`LH_C('e', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
//│ 		    | `LH_C(_lh_inquireFront_LH_C_0_2, _lh_inquireFront_LH_C_1_2) -> 
//│ 		      _lh_inquireFront_LH_C_0_2);;
//│ 		let rec removeFront_lh__d2 _lh_removeFront_arg1_0 =
//│ 		  (match _lh_removeFront_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (failwith "msg"(`LH_C('C', (`LH_C('a', (`LH_C('n', (`LH_C('n', (`LH_C('o', (`LH_C('t', (`LH_C(' ', (`LH_C('r', (`LH_C('e', (`LH_C('m', (`LH_C('o', (`LH_C('v', (`LH_C('e', (`LH_C(' ', (`LH_C('f', (`LH_C('r', (`LH_C('o', (`LH_C('m', (`LH_C(' ', (`LH_C('a', (`LH_C('n', (`LH_C(' ', (`LH_C('e', (`LH_C('m', (`LH_C('p', (`LH_C('t', (`LH_C('y', (`LH_C(' ', (`LH_C('Q', (`LH_C('u', (`LH_C('e', (`LH_C('u', (`LH_C('e', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
//│ 		    | `LH_C(_lh_removeFront_LH_C_0_0, _lh_removeFront_LH_C_1_0) -> 
//│ 		      _lh_removeFront_LH_C_1_0);;
//│ 		let rec removeFront_lh__d1 _lh_removeFront_arg1_1 =
//│ 		  (match _lh_removeFront_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      (failwith "msg"(`LH_C('C', (`LH_C('a', (`LH_C('n', (`LH_C('n', (`LH_C('o', (`LH_C('t', (`LH_C(' ', (`LH_C('r', (`LH_C('e', (`LH_C('m', (`LH_C('o', (`LH_C('v', (`LH_C('e', (`LH_C(' ', (`LH_C('f', (`LH_C('r', (`LH_C('o', (`LH_C('m', (`LH_C(' ', (`LH_C('a', (`LH_C('n', (`LH_C(' ', (`LH_C('e', (`LH_C('m', (`LH_C('p', (`LH_C('t', (`LH_C('y', (`LH_C(' ', (`LH_C('Q', (`LH_C('u', (`LH_C('e', (`LH_C('u', (`LH_C('e', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
//│ 		    | `LH_C(_lh_removeFront_LH_C_0_1, _lh_removeFront_LH_C_1_1) -> 
//│ 		      _lh_removeFront_LH_C_1_1);;
//│ 		let rec inquireFront_lh__d2 _lh_inquireFront_arg1_1 =
//│ 		  (match _lh_inquireFront_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      (failwith "msg"(`LH_C('C', (`LH_C('a', (`LH_C('n', (`LH_C('n', (`LH_C('o', (`LH_C('t', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C('q', (`LH_C('u', (`LH_C('i', (`LH_C('r', (`LH_C('e', (`LH_C(' ', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('e', (`LH_C('m', (`LH_C('p', (`LH_C('t', (`LH_C('y', (`LH_C(' ', (`LH_C('Q', (`LH_C('u', (`LH_C('e', (`LH_C('u', (`LH_C('e', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
//│ 		    | `LH_C(_lh_inquireFront_LH_C_0_1, _lh_inquireFront_LH_C_1_1) -> 
//│ 		      _lh_inquireFront_LH_C_0_1);;
//│ 		let rec inquireFront_lh__d3 _lh_inquireFront_arg1_0 =
//│ 		  (match _lh_inquireFront_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (failwith "msg"(`LH_C('C', (`LH_C('a', (`LH_C('n', (`LH_C('n', (`LH_C('o', (`LH_C('t', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C('q', (`LH_C('u', (`LH_C('i', (`LH_C('r', (`LH_C('e', (`LH_C(' ', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('e', (`LH_C('m', (`LH_C('p', (`LH_C('t', (`LH_C('y', (`LH_C(' ', (`LH_C('Q', (`LH_C('u', (`LH_C('e', (`LH_C('u', (`LH_C('e', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
//│ 		    | `LH_C(_lh_inquireFront_LH_C_0_0, _lh_inquireFront_LH_C_1_0) -> 
//│ 		      _lh_inquireFront_LH_C_0_0);;
//│ 		let rec depthSearch_lh__d1 _lh_depthSearch_arg1_0 _lh_depthSearch_arg2_0 _lh_depthSearch_arg3_0 =
//│ 		  (if (let rec _lh_matchIdent_0 = _lh_depthSearch_arg1_0 in
//│ 		    (match _lh_matchIdent_0 with
//│ 		      | `LH_N -> 
//│ 		        true
//│ 		      | _ -> 
//│ 		        false)) then
//│ 		    (lazy (`LH_N))
//│ 		  else
//│ 		    (if (_lh_depthSearch_arg3_0 (inquireFront_lh__d2 _lh_depthSearch_arg1_0)) then
//│ 		      (lazy (`LH_C((inquireFront_lh__d1 _lh_depthSearch_arg1_0), (((depthSearch_lh__d1 (removeFront_lh__d1 _lh_depthSearch_arg1_0)) _lh_depthSearch_arg2_0) _lh_depthSearch_arg3_0))))
//│ 		    else
//│ 		      (((depthSearch_lh__d1 ((addAllFront_lh__d2 (_lh_depthSearch_arg2_0 (inquireFront_lh__d3 _lh_depthSearch_arg1_0))) (removeFront_lh__d2 _lh_depthSearch_arg1_0))) _lh_depthSearch_arg2_0) _lh_depthSearch_arg3_0)));;
//│ 		let rec mappend_lh__d2 xs_2_1 ys_2_1 =
//│ 		  (match xs_2_1 with
//│ 		    | `LH_C(h_2_5, t_2_5) -> 
//│ 		      (`LH_C(h_2_5, ((mappend_lh__d2 t_2_5) ys_2_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_1);;
//│ 		let rec mappend_lh__d4 xs_1_9 ys_1_9 =
//│ 		  (match xs_1_9 with
//│ 		    | `LH_C(h_2_2, t_2_2) -> 
//│ 		      (`LH_C(h_2_2, ((mappend_lh__d4 t_2_2) ys_1_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_9);;
//│ 		let rec map_lh__d1 f_3 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_2_6, t_2_6) -> 
//│ 		      (`LH_C((f_3 h_2_6), ((map_lh__d1 f_3) t_2_6)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec repeat_lh__d1 x_1 =
//│ 		  (lazy (`LH_C(x_1, (repeat_lh__d1 x_1))));;
//│ 		let rec createBoard_lh__d1 _lh_createBoard_arg1_0 _lh_createBoard_arg2_0 =
//│ 		  (`Board(_lh_createBoard_arg1_0, 1, _lh_createBoard_arg2_0, (`LH_C(_lh_createBoard_arg2_0, (`LH_N)))));;
//│ 		let rec startTour_lh__d1 _lh_startTour_arg1_0 _lh_startTour_arg2_0 =
//│ 		  (if ((_lh_startTour_arg2_0 mod 2) = 0) then
//│ 		    ((createBoard_lh__d1 _lh_startTour_arg2_0) _lh_startTour_arg1_0)
//│ 		  else
//│ 		    (failwith "msg"(`LH_C('T', (`LH_C('o', (`LH_C('u', (`LH_C('r', (`LH_C(' ', (`LH_C('d', (`LH_C('o', (`LH_C('e', (`LH_C('s', (`LH_C('n', (`LH_C('t', (`LH_C(' ', (`LH_C('e', (`LH_C('x', (`LH_C('i', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('f', (`LH_C('o', (`LH_C('r', (`LH_C(' ', (`LH_C('o', (`LH_C('d', (`LH_C('d', (`LH_C(' ', (`LH_C('s', (`LH_C('i', (`LH_C('z', (`LH_C('e', (`LH_C(' ', (`LH_C('b', (`LH_C('o', (`LH_C('a', (`LH_C('r', (`LH_C('d', (`LH_N)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
//│ 		let rec enumFromTo_lh__d2 a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh__d2 (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec createQueue_lh__d1 =
//│ 		  (`LH_N);;
//│ 		let rec copy_lh__d1 _lh_copy_arg1_3 _lh_copy_arg2_3 =
//│ 		  (if (_lh_copy_arg1_3 <= 0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (`LH_C(_lh_copy_arg2_3, ((copy_lh__d1 (_lh_copy_arg1_3 - 1)) _lh_copy_arg2_3))));;
//│ 		let rec enumFromTo_lh__d1 a_1 b_1 =
//│ 		  (if (a_1 <= b_1) then
//│ 		    (`LH_C(a_1, ((enumFromTo_lh__d1 (a_1 + 1)) b_1)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec mappend_lh__d1_d7 xs_3 ys_3 =
//│ 		  (match xs_3 with
//│ 		    | `LH_C(h_9, t_9) -> 
//│ 		      (`LH_C(h_9, ((mappend_lh__d1_d7 t_9) ys_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_3);;
//│ 		let rec addAllFront_lh__d1 _lh_addAllFront_arg1_1 _lh_addAllFront_arg2_1 =
//│ 		  ((mappend_lh__d1_d7 _lh_addAllFront_arg1_1) _lh_addAllFront_arg2_1);;
//│ 		let rec zipWith_lh__d1 f_2 xs_1_8 ys_1_8 =
//│ 		  (match xs_1_8 with
//│ 		    | `LH_C(hx_2, tx_2) -> 
//│ 		      (match ys_1_8 with
//│ 		        | `LH_C(hy_2, ty_2) -> 
//│ 		          (`LH_C(((f_2 hx_2) hy_2), (((zipWith_lh__d1 f_2) tx_2) ty_2)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec zip_lz_nl_lh__d1 xs_1_7 ys_1_7 =
//│ 		  (match ys_1_7 with
//│ 		    | `LH_C(hy_1, ty_1) -> 
//│ 		      (match (Lazy.force xs_1_7) with
//│ 		        | `LH_C(hx_1, tx_1) -> 
//│ 		          (`LH_C((`LH_P2(hx_1, hy_1)), ((zip_lz_nl_lh__d1 tx_1) ty_1)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec root_lh__d1 _lh_root_arg1_0 =
//│ 		  ((addAllFront_lh__d1 ((zip_lz_nl_lh__d1 (repeat_lh__d1 (1 - (_lh_root_arg1_0 * _lh_root_arg1_0)))) (((zipWith_lh__d1 startTour_lh__d1) (let rec _lh_listcomp_fun_1_1 = (fun _lh_listcomp_fun_para_1_1 -> 
//│ 		    (match _lh_listcomp_fun_para_1_1 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_1_1, _lh_listcomp_fun_ls_t_1_1) -> 
//│ 		        (let rec _lh_listcomp_fun_1_2 = (fun _lh_listcomp_fun_para_1_2 -> 
//│ 		          (match _lh_listcomp_fun_para_1_2 with
//│ 		            | `LH_C(_lh_listcomp_fun_ls_h_1_2, _lh_listcomp_fun_ls_t_1_2) -> 
//│ 		              (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_1_1, _lh_listcomp_fun_ls_h_1_2)), (_lh_listcomp_fun_1_2 _lh_listcomp_fun_ls_t_1_2)))
//│ 		            | `LH_N -> 
//│ 		              (_lh_listcomp_fun_1_1 _lh_listcomp_fun_ls_t_1_1))) in
//│ 		          (_lh_listcomp_fun_1_2 ((enumFromTo_lh__d1 1) _lh_root_arg1_0)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_1_1 ((enumFromTo_lh__d2 1) _lh_root_arg1_0)))) ((copy_lh__d1 (_lh_root_arg1_0 * _lh_root_arg1_0)) _lh_root_arg1_0)))) createQueue_lh__d1);;
//│ 		let rec take_lz_lh__d1 n_0 ls_6 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match (Lazy.force ls_6) with
//│ 		      | `LH_C(h_2_3, t_2_3) -> 
//│ 		        (`LH_C(h_2_3, ((take_lz_lh__d1 (n_0 - 1)) t_2_3)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec addPiece_lh__d1 _lh_addPiece_arg1_0 _lh_addPiece_arg2_0 =
//│ 		  (match _lh_addPiece_arg2_0 with
//│ 		    | `Board(_lh_addPiece_Board_0_0, _lh_addPiece_Board_1_0, _lh_addPiece_Board_2_0, _lh_addPiece_Board_3_0) -> 
//│ 		      (`Board(_lh_addPiece_Board_0_0, (_lh_addPiece_Board_1_0 + 1), _lh_addPiece_Board_2_0, (`LH_C(_lh_addPiece_arg1_0, _lh_addPiece_Board_3_0)))));;
//│ 		let rec firstPiece_lh__d1 _lh_firstPiece_arg1_2 =
//│ 		  (match _lh_firstPiece_arg1_2 with
//│ 		    | `Board(_lh_firstPiece_Board_0_2, _lh_firstPiece_Board_1_2, _lh_firstPiece_Board_2_2, _lh_firstPiece_Board_3_2) -> 
//│ 		      _lh_firstPiece_Board_2_2);;
//│ 		let rec myInit_lh__d3 _lh_myInit_arg1_0 =
//│ 		  (match _lh_myInit_arg1_0 with
//│ 		    | `LH_C(_lh_myInit_LH_C_0_0, _lh_myInit_LH_C_1_0) -> 
//│ 		      (match _lh_myInit_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_N)
//│ 		        | _ -> 
//│ 		          (`LH_C(_lh_myInit_LH_C_0_0, (myInit_lh__d3 _lh_myInit_LH_C_1_0)))));;
//│ 		let rec myLast_lh__d3 _lh_myLast_arg1_0 =
//│ 		  (match _lh_myLast_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2((0 - 100), (0 - 100)))
//│ 		    | `LH_C(_lh_myLast_LH_C_0_0, _lh_myLast_LH_C_1_0) -> 
//│ 		      (let rec go_0 = (fun _lh_go_arg1_0 _lh_go_arg2_0 -> 
//│ 		        (match _lh_go_arg2_0 with
//│ 		          | `LH_N -> 
//│ 		            _lh_go_arg1_0
//│ 		          | `LH_C(_lh_go_LH_C_0_0, _lh_go_LH_C_1_0) -> 
//│ 		            ((go_0 _lh_go_LH_C_0_0) _lh_go_LH_C_1_0))) in
//│ 		        ((go_0 _lh_myLast_LH_C_0_0) _lh_myLast_LH_C_1_0)));;
//│ 		let rec deleteFirst_lh__d3 _lh_deleteFirst_arg1_1 =
//│ 		  (match _lh_deleteFirst_arg1_1 with
//│ 		    | `Board(_lh_deleteFirst_Board_0_1, _lh_deleteFirst_Board_1_1, _lh_deleteFirst_Board_2_1, _lh_deleteFirst_Board_3_1) -> 
//│ 		      (let rec ts'_1 = (myInit_lh__d3 _lh_deleteFirst_Board_3_1) in
//│ 		        (`Board(_lh_deleteFirst_Board_0_1, (_lh_deleteFirst_Board_1_1 - 1), (myLast_lh__d3 ts'_1), ts'_1))));;
//│ 		let rec map_lh__d3 f_0 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (`LH_C((f_0 h_1), ((map_lh__d3 f_0) t_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec move_lh__d1 _lh_move_arg1_0 _lh_move_arg2_0 =
//│ 		  (match _lh_move_arg1_0 with
//│ 		    | `UL -> 
//│ 		      (match _lh_move_arg2_0 with
//│ 		        | `LH_P2(_lh_move_LH_P2_0_0, _lh_move_LH_P2_1_0) -> 
//│ 		          (`LH_P2((_lh_move_LH_P2_0_0 - 1), (_lh_move_LH_P2_1_0 - 2))))
//│ 		    | `UR -> 
//│ 		      (match _lh_move_arg2_0 with
//│ 		        | `LH_P2(_lh_move_LH_P2_0_1, _lh_move_LH_P2_1_1) -> 
//│ 		          (`LH_P2((_lh_move_LH_P2_0_1 + 1), (_lh_move_LH_P2_1_1 - 2))))
//│ 		    | `DL -> 
//│ 		      (match _lh_move_arg2_0 with
//│ 		        | `LH_P2(_lh_move_LH_P2_0_2, _lh_move_LH_P2_1_2) -> 
//│ 		          (`LH_P2((_lh_move_LH_P2_0_2 - 1), (_lh_move_LH_P2_1_2 + 2))))
//│ 		    | `DR -> 
//│ 		      (match _lh_move_arg2_0 with
//│ 		        | `LH_P2(_lh_move_LH_P2_0_3, _lh_move_LH_P2_1_3) -> 
//│ 		          (`LH_P2((_lh_move_LH_P2_0_3 + 1), (_lh_move_LH_P2_1_3 + 2))))
//│ 		    | `LU -> 
//│ 		      (match _lh_move_arg2_0 with
//│ 		        | `LH_P2(_lh_move_LH_P2_0_4, _lh_move_LH_P2_1_4) -> 
//│ 		          (`LH_P2((_lh_move_LH_P2_0_4 - 2), (_lh_move_LH_P2_1_4 - 1))))
//│ 		    | `LD -> 
//│ 		      (match _lh_move_arg2_0 with
//│ 		        | `LH_P2(_lh_move_LH_P2_0_5, _lh_move_LH_P2_1_5) -> 
//│ 		          (`LH_P2((_lh_move_LH_P2_0_5 - 2), (_lh_move_LH_P2_1_5 + 1))))
//│ 		    | `RU -> 
//│ 		      (match _lh_move_arg2_0 with
//│ 		        | `LH_P2(_lh_move_LH_P2_0_6, _lh_move_LH_P2_1_6) -> 
//│ 		          (`LH_P2((_lh_move_LH_P2_0_6 + 2), (_lh_move_LH_P2_1_6 - 1))))
//│ 		    | `RD -> 
//│ 		      (match _lh_move_arg2_0 with
//│ 		        | `LH_P2(_lh_move_LH_P2_0_7, _lh_move_LH_P2_1_7) -> 
//│ 		          (`LH_P2((_lh_move_LH_P2_0_7 + 2), (_lh_move_LH_P2_1_7 + 1)))));;
//│ 		let rec lastPiece_lh__d1 _lh_lastPiece_arg1_0 =
//│ 		  (match _lh_lastPiece_arg1_0 with
//│ 		    | `Board(_lh_lastPiece_Board_0_0, _lh_lastPiece_Board_1_0, _lh_lastPiece_Board_2_0, _lh_lastPiece_Board_3_0) -> 
//│ 		      (match _lh_lastPiece_Board_3_0 with
//│ 		        | `LH_C(_lh_lastPiece_LH_C_0_0, _lh_lastPiece_LH_C_1_0) -> 
//│ 		          _lh_lastPiece_LH_C_0_0));;
//│ 		let rec moveKnight_lh__d1 _lh_moveKnight_arg1_0 _lh_moveKnight_arg2_0 =
//│ 		  ((addPiece_lh__d1 ((move_lh__d1 _lh_moveKnight_arg2_0) (lastPiece_lh__d1 _lh_moveKnight_arg1_0))) _lh_moveKnight_arg1_0);;
//│ 		let rec inList_lh__d1 _lh_inList_arg1_0 _lh_inList_arg2_0 =
//│ 		  (match _lh_inList_arg2_0 with
//│ 		    | `LH_C(_lh_inList_LH_C_0_0, _lh_inList_LH_C_1_0) -> 
//│ 		      (if (_lh_inList_arg1_0 = _lh_inList_LH_C_0_0) then
//│ 		        true
//│ 		      else
//│ 		        ((inList_lh__d1 _lh_inList_arg1_0) _lh_inList_LH_C_1_0))
//│ 		    | `LH_N -> 
//│ 		      false);;
//│ 		let rec isSquareFree_lh__d2 _lh_isSquareFree_arg1_0 _lh_isSquareFree_arg2_0 =
//│ 		  (match _lh_isSquareFree_arg2_0 with
//│ 		    | `Board(_lh_isSquareFree_Board_0_0, _lh_isSquareFree_Board_1_0, _lh_isSquareFree_Board_2_0, _lh_isSquareFree_Board_3_0) -> 
//│ 		      (not ((inList_lh__d1 _lh_isSquareFree_arg1_0) _lh_isSquareFree_Board_3_0)));;
//│ 		let rec sizeBoard_lh__d3 _lh_sizeBoard_arg1_0 =
//│ 		  (match _lh_sizeBoard_arg1_0 with
//│ 		    | `Board(_lh_sizeBoard_Board_0_0, _lh_sizeBoard_Board_1_0, _lh_sizeBoard_Board_2_0, _lh_sizeBoard_Board_3_0) -> 
//│ 		      _lh_sizeBoard_Board_0_0);;
//│ 		let rec canMoveTo_lh__d2 _lh_canMoveTo_arg1_0 _lh_canMoveTo_arg2_0 =
//│ 		  (match _lh_canMoveTo_arg1_0 with
//│ 		    | `LH_P2(_lh_canMoveTo_LH_P2_0_0, _lh_canMoveTo_LH_P2_1_0) -> 
//│ 		      (let rec sze_0 = (sizeBoard_lh__d3 _lh_canMoveTo_arg2_0) in
//│ 		        (((((_lh_canMoveTo_LH_P2_0_0 >= 1) && (_lh_canMoveTo_LH_P2_0_0 <= sze_0)) && (_lh_canMoveTo_LH_P2_1_0 >= 1)) && (_lh_canMoveTo_LH_P2_1_0 <= sze_0)) && ((isSquareFree_lh__d2 (`LH_P2(_lh_canMoveTo_LH_P2_0_0, _lh_canMoveTo_LH_P2_1_0))) _lh_canMoveTo_arg2_0))));;
//│ 		let rec canMove_lh__d1 _lh_canMove_arg1_0 _lh_canMove_arg2_0 =
//│ 		  ((canMoveTo_lh__d2 ((move_lh__d1 _lh_canMove_arg2_0) (lastPiece_lh__d1 _lh_canMove_arg1_0))) _lh_canMove_arg1_0);;
//│ 		let rec possibleMoves_lh__d3 _lh_possibleMoves_arg1_1 =
//│ 		  (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		    (match _lh_listcomp_fun_para_1 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		        (if ((canMove_lh__d1 _lh_possibleMoves_arg1_1) _lh_listcomp_fun_ls_h_1) then
//│ 		          (`LH_C(_lh_listcomp_fun_ls_h_1, (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		        else
//│ 		          (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_1 (`LH_C((`UL), (`LH_C((`UR), (`LH_C((`DL), (`LH_C((`DR), (`LH_C((`LU), (`LH_C((`LD), (`LH_C((`RU), (`LH_C((`RD), (`LH_N)))))))))))))))))));;
//│ 		let rec allDescend_lh__d1 _lh_allDescend_arg1_0 =
//│ 		  ((map_lh__d3 (moveKnight_lh__d1 _lh_allDescend_arg1_0)) (possibleMoves_lh__d3 _lh_allDescend_arg1_0));;
//│ 		let rec possibleMoves_lh__d1 _lh_possibleMoves_arg1_3 =
//│ 		  (let rec _lh_listcomp_fun_4 = (fun _lh_listcomp_fun_para_4 -> 
//│ 		    (match _lh_listcomp_fun_para_4 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_4, _lh_listcomp_fun_ls_t_4) -> 
//│ 		        (if ((canMove_lh__d1 _lh_possibleMoves_arg1_3) _lh_listcomp_fun_ls_h_4) then
//│ 		          (`LH_C(_lh_listcomp_fun_ls_h_4, (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4)))
//│ 		        else
//│ 		          (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_4 (`LH_C((`UL), (`LH_C((`UR), (`LH_C((`DL), (`LH_C((`DR), (`LH_C((`LU), (`LH_C((`LD), (`LH_C((`RU), (`LH_C((`RD), (`LH_N)))))))))))))))))));;
//│ 		let rec length_lh__d4 ls_3 =
//│ 		  (match ls_3 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      (1 + (length_lh__d4 t_5))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec descAndNo_lh__d1 _lh_descAndNo_arg1_1 =
//│ 		  (let rec _lh_listcomp_fun_8 = (fun _lh_listcomp_fun_para_8 -> 
//│ 		    (match _lh_listcomp_fun_para_8 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_8, _lh_listcomp_fun_ls_t_8) -> 
//│ 		        (`LH_C((`LH_P2((length_lh__d4 (possibleMoves_lh__d1 (deleteFirst_lh__d3 _lh_listcomp_fun_ls_h_8))), _lh_listcomp_fun_ls_h_8)), (_lh_listcomp_fun_8 _lh_listcomp_fun_ls_t_8)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_8 (allDescend_lh__d1 _lh_descAndNo_arg1_1)));;
//│ 		let rec map_lh__d2 f_1 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      (`LH_C((f_1 h_8), ((map_lh__d2 f_1) t_8)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh__d1_d9 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      (`LH_C(h_4, ((mappend_lh__d1_d9 t_4) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec intChessSetComp_lh__d2 _lh_intChessSetComp_arg1_0 _lh_intChessSetComp_arg2_0 =
//│ 		  (match _lh_intChessSetComp_arg1_0 with
//│ 		    | `LH_P2(_lh_intChessSetComp_LH_P2_0_0, _lh_intChessSetComp_LH_P2_1_0) -> 
//│ 		      (match _lh_intChessSetComp_arg2_0 with
//│ 		        | `LH_P2(_lh_intChessSetComp_LH_P2_0_1, _lh_intChessSetComp_LH_P2_1_1) -> 
//│ 		          (_lh_intChessSetComp_LH_P2_0_0 < _lh_intChessSetComp_LH_P2_0_1)));;
//│ 		let rec intChessSetComp_lh__d1 _lh_intChessSetComp_arg1_1 _lh_intChessSetComp_arg2_1 =
//│ 		  (match _lh_intChessSetComp_arg1_1 with
//│ 		    | `LH_P2(_lh_intChessSetComp_LH_P2_0_2, _lh_intChessSetComp_LH_P2_1_2) -> 
//│ 		      (match _lh_intChessSetComp_arg2_1 with
//│ 		        | `LH_P2(_lh_intChessSetComp_LH_P2_0_3, _lh_intChessSetComp_LH_P2_1_3) -> 
//│ 		          (_lh_intChessSetComp_LH_P2_0_2 < _lh_intChessSetComp_LH_P2_0_3)));;
//│ 		let rec mappend_lh__d2_d0 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      (`LH_C(h_3, ((mappend_lh__d2_d0 t_3) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec quickSortIntChessSet_lh__d1 _lh_quickSortIntChessSet_arg1_0 =
//│ 		  (match _lh_quickSortIntChessSet_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_quickSortIntChessSet_LH_C_0_0, _lh_quickSortIntChessSet_LH_C_1_0) -> 
//│ 		      ((mappend_lh__d2_d0 ((mappend_lh__d1_d9 (quickSortIntChessSet_lh__d1 (let rec _lh_listcomp_fun_5 = (fun _lh_listcomp_fun_para_5 -> 
//│ 		        (match _lh_listcomp_fun_para_5 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_5, _lh_listcomp_fun_ls_t_5) -> 
//│ 		            (if ((intChessSetComp_lh__d1 _lh_listcomp_fun_ls_h_5) _lh_quickSortIntChessSet_LH_C_0_0) then
//│ 		              (`LH_C(_lh_listcomp_fun_ls_h_5, (_lh_listcomp_fun_5 _lh_listcomp_fun_ls_t_5)))
//│ 		            else
//│ 		              (_lh_listcomp_fun_5 _lh_listcomp_fun_ls_t_5))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_5 _lh_quickSortIntChessSet_LH_C_1_0)))) (`LH_C(_lh_quickSortIntChessSet_LH_C_0_0, (`LH_N))))) (quickSortIntChessSet_lh__d1 (let rec _lh_listcomp_fun_6 = (fun _lh_listcomp_fun_para_6 -> 
//│ 		        (match _lh_listcomp_fun_para_6 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_6, _lh_listcomp_fun_ls_t_6) -> 
//│ 		            (if (not ((intChessSetComp_lh__d2 _lh_listcomp_fun_ls_h_6) _lh_quickSortIntChessSet_LH_C_0_0)) then
//│ 		              (`LH_C(_lh_listcomp_fun_ls_h_6, (_lh_listcomp_fun_6 _lh_listcomp_fun_ls_t_6)))
//│ 		            else
//│ 		              (_lh_listcomp_fun_6 _lh_listcomp_fun_ls_t_6))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_6 _lh_quickSortIntChessSet_LH_C_1_0)))));;
//│ 		let rec deleteFirst_lh__d4 _lh_deleteFirst_arg1_0 =
//│ 		  (match _lh_deleteFirst_arg1_0 with
//│ 		    | `Board(_lh_deleteFirst_Board_0_0, _lh_deleteFirst_Board_1_0, _lh_deleteFirst_Board_2_0, _lh_deleteFirst_Board_3_0) -> 
//│ 		      (let rec ts'_0 = (myInit_lh__d3 _lh_deleteFirst_Board_3_0) in
//│ 		        (`Board(_lh_deleteFirst_Board_0_0, (_lh_deleteFirst_Board_1_0 - 1), (myLast_lh__d3 ts'_0), ts'_0))));;
//│ 		let rec possibleMoves_lh__d4 _lh_possibleMoves_arg1_0 =
//│ 		  (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		    (match _lh_listcomp_fun_para_0 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		        (if ((canMove_lh__d1 _lh_possibleMoves_arg1_0) _lh_listcomp_fun_ls_h_0) then
//│ 		          (`LH_C(_lh_listcomp_fun_ls_h_0, (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		        else
//│ 		          (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_0 (`LH_C((`UL), (`LH_C((`UR), (`LH_C((`DL), (`LH_C((`DR), (`LH_C((`LU), (`LH_C((`LD), (`LH_C((`RU), (`LH_C((`RD), (`LH_N)))))))))))))))))));;
//│ 		let rec length_lh__d6 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (1 + (length_lh__d6 t_0))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec descAndNo_lh__d2 _lh_descAndNo_arg1_0 =
//│ 		  (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		    (match _lh_listcomp_fun_para_3 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_3, _lh_listcomp_fun_ls_t_3) -> 
//│ 		        (`LH_C((`LH_P2((length_lh__d6 (possibleMoves_lh__d4 (deleteFirst_lh__d4 _lh_listcomp_fun_ls_h_3))), _lh_listcomp_fun_ls_h_3)), (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_3 (allDescend_lh__d1 _lh_descAndNo_arg1_0)));;
//│ 		let rec singleDescend_lh__d1 _lh_singleDescend_arg1_0 =
//│ 		  (let rec _lh_listcomp_fun_7 = (fun _lh_listcomp_fun_para_7 -> 
//│ 		    (match _lh_listcomp_fun_para_7 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_7, _lh_listcomp_fun_ls_t_7) -> 
//│ 		        (match _lh_listcomp_fun_ls_h_7 with
//│ 		          | `LH_P2(_lh_singleDescend_LH_P2_0_0, _lh_singleDescend_LH_P2_1_0) -> 
//│ 		            (if (_lh_singleDescend_LH_P2_0_0 = 1) then
//│ 		              (`LH_C(_lh_singleDescend_LH_P2_1_0, (_lh_listcomp_fun_7 _lh_listcomp_fun_ls_t_7)))
//│ 		            else
//│ 		              (_lh_listcomp_fun_7 _lh_listcomp_fun_ls_t_7))
//│ 		          | _ -> 
//│ 		            (_lh_listcomp_fun_7 _lh_listcomp_fun_ls_t_7))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_7 (descAndNo_lh__d2 _lh_singleDescend_arg1_0)));;
//│ 		let rec myLast_lh__d2 _lh_myLast_arg1_1 =
//│ 		  (match _lh_myLast_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2((0 - 100), (0 - 100)))
//│ 		    | `LH_C(_lh_myLast_LH_C_0_1, _lh_myLast_LH_C_1_1) -> 
//│ 		      (let rec go_1 = (fun _lh_go_arg1_1 _lh_go_arg2_1 -> 
//│ 		        (match _lh_go_arg2_1 with
//│ 		          | `LH_N -> 
//│ 		            _lh_go_arg1_1
//│ 		          | `LH_C(_lh_go_LH_C_0_1, _lh_go_LH_C_1_1) -> 
//│ 		            ((go_1 _lh_go_LH_C_0_1) _lh_go_LH_C_1_1))) in
//│ 		        ((go_1 _lh_myLast_LH_C_0_1) _lh_myLast_LH_C_1_1)));;
//│ 		let rec myInit_lh__d2 _lh_myInit_arg1_1 =
//│ 		  (match _lh_myInit_arg1_1 with
//│ 		    | `LH_C(_lh_myInit_LH_C_0_1, _lh_myInit_LH_C_1_1) -> 
//│ 		      (match _lh_myInit_LH_C_1_1 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_N)
//│ 		        | _ -> 
//│ 		          (`LH_C(_lh_myInit_LH_C_0_1, (myInit_lh__d2 _lh_myInit_LH_C_1_1)))));;
//│ 		let rec deleteFirst_lh__d2 _lh_deleteFirst_arg1_2 =
//│ 		  (match _lh_deleteFirst_arg1_2 with
//│ 		    | `Board(_lh_deleteFirst_Board_0_2, _lh_deleteFirst_Board_1_2, _lh_deleteFirst_Board_2_2, _lh_deleteFirst_Board_3_2) -> 
//│ 		      (let rec ts'_2 = (myInit_lh__d2 _lh_deleteFirst_Board_3_2) in
//│ 		        (`Board(_lh_deleteFirst_Board_0_2, (_lh_deleteFirst_Board_1_2 - 1), (myLast_lh__d2 ts'_2), ts'_2))));;
//│ 		let rec firstPiece_lh__d3 _lh_firstPiece_arg1_0 =
//│ 		  (match _lh_firstPiece_arg1_0 with
//│ 		    | `Board(_lh_firstPiece_Board_0_0, _lh_firstPiece_Board_1_0, _lh_firstPiece_Board_2_0, _lh_firstPiece_Board_3_0) -> 
//│ 		      _lh_firstPiece_Board_2_0);;
//│ 		let rec canJumpFirst_lh__d2 _lh_canJumpFirst_arg1_0 =
//│ 		  ((canMoveTo_lh__d2 (firstPiece_lh__d3 _lh_canJumpFirst_arg1_0)) (deleteFirst_lh__d2 _lh_canJumpFirst_arg1_0));;
//│ 		let rec mySnd_lh__d1 _lh_mySnd_arg1_0 =
//│ 		  (match _lh_mySnd_arg1_0 with
//│ 		    | `LH_P2(_lh_mySnd_LH_P2_0_0, _lh_mySnd_LH_P2_1_0) -> 
//│ 		      _lh_mySnd_LH_P2_1_0);;
//│ 		let rec length_lh__d3 ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      (1 + (length_lh__d3 t_7))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec length_lh__d5 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (1 + (length_lh__d5 t_2))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec possibleMoves_lh__d2 _lh_possibleMoves_arg1_2 =
//│ 		  (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		    (match _lh_listcomp_fun_para_2 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		        (if ((canMove_lh__d1 _lh_possibleMoves_arg1_2) _lh_listcomp_fun_ls_h_2) then
//│ 		          (`LH_C(_lh_listcomp_fun_ls_h_2, (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2)))
//│ 		        else
//│ 		          (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_2 (`LH_C((`UL), (`LH_C((`UR), (`LH_C((`DL), (`LH_C((`DR), (`LH_C((`LU), (`LH_C((`LD), (`LH_C((`RU), (`LH_C((`RD), (`LH_N)))))))))))))))))));;
//│ 		let rec deadEnd_lh__d1 _lh_deadEnd_arg1_0 =
//│ 		  ((length_lh__d5 (possibleMoves_lh__d2 _lh_deadEnd_arg1_0)) = 0);;
//│ 		let rec descendents_lh__d1 _lh_descendents_arg1_0 =
//│ 		  (if ((canJumpFirst_lh__d2 _lh_descendents_arg1_0) && (deadEnd_lh__d1 ((addPiece_lh__d1 (firstPiece_lh__d1 _lh_descendents_arg1_0)) _lh_descendents_arg1_0))) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (let rec singles_0 = (singleDescend_lh__d1 _lh_descendents_arg1_0) in
//│ 		      (let rec scrut_0 = (length_lh__d3 singles_0) in
//│ 		        (if (scrut_0 = 0) then
//│ 		          ((map_lh__d2 mySnd_lh__d1) (quickSortIntChessSet_lh__d1 (descAndNo_lh__d1 _lh_descendents_arg1_0)))
//│ 		        else
//│ 		          (if (scrut_0 = 1) then
//│ 		            singles_0
//│ 		          else
//│ 		            (`LH_N))))));;
//│ 		let rec zip_lz_nl_lh__d2 xs_1_6 ys_1_6 =
//│ 		  (match ys_1_6 with
//│ 		    | `LH_C(hy_0, ty_0) -> 
//│ 		      (match (Lazy.force xs_1_6) with
//│ 		        | `LH_C(hx_0, tx_0) -> 
//│ 		          (`LH_C((`LH_P2(hx_0, hy_0)), ((zip_lz_nl_lh__d2 tx_0) ty_0)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec repeat_lh__d2 x_0 =
//│ 		  (lazy (`LH_C(x_0, (repeat_lh__d2 x_0))));;
//│ 		let rec grow_lh__d1 _lh_grow_arg1_0 =
//│ 		  (match _lh_grow_arg1_0 with
//│ 		    | `LH_P2(_lh_grow_LH_P2_0_0, _lh_grow_LH_P2_1_0) -> 
//│ 		      ((zip_lz_nl_lh__d2 (repeat_lh__d2 (_lh_grow_LH_P2_0_0 + 1))) (descendents_lh__d1 _lh_grow_LH_P2_1_0)));;
//│ 		let rec noPieces_lh__d1 _lh_noPieces_arg1_0 =
//│ 		  (match _lh_noPieces_arg1_0 with
//│ 		    | `Board(_lh_noPieces_Board_0_0, _lh_noPieces_Board_1_0, _lh_noPieces_Board_2_0, _lh_noPieces_Board_3_0) -> 
//│ 		      _lh_noPieces_Board_1_0);;
//│ 		let rec firstPiece_lh__d2 _lh_firstPiece_arg1_1 =
//│ 		  (match _lh_firstPiece_arg1_1 with
//│ 		    | `Board(_lh_firstPiece_Board_0_1, _lh_firstPiece_Board_1_1, _lh_firstPiece_Board_2_1, _lh_firstPiece_Board_3_1) -> 
//│ 		      _lh_firstPiece_Board_2_1);;
//│ 		let rec sizeBoard_lh__d2 _lh_sizeBoard_arg1_1 =
//│ 		  (match _lh_sizeBoard_arg1_1 with
//│ 		    | `Board(_lh_sizeBoard_Board_0_1, _lh_sizeBoard_Board_1_1, _lh_sizeBoard_Board_2_1, _lh_sizeBoard_Board_3_1) -> 
//│ 		      _lh_sizeBoard_Board_0_1);;
//│ 		let rec isSquareFree_lh__d1 _lh_isSquareFree_arg1_1 _lh_isSquareFree_arg2_1 =
//│ 		  (match _lh_isSquareFree_arg2_1 with
//│ 		    | `Board(_lh_isSquareFree_Board_0_1, _lh_isSquareFree_Board_1_1, _lh_isSquareFree_Board_2_1, _lh_isSquareFree_Board_3_1) -> 
//│ 		      (not ((inList_lh__d1 _lh_isSquareFree_arg1_1) _lh_isSquareFree_Board_3_1)));;
//│ 		let rec canMoveTo_lh__d1 _lh_canMoveTo_arg1_1 _lh_canMoveTo_arg2_1 =
//│ 		  (match _lh_canMoveTo_arg1_1 with
//│ 		    | `LH_P2(_lh_canMoveTo_LH_P2_0_1, _lh_canMoveTo_LH_P2_1_1) -> 
//│ 		      (let rec sze_1 = (sizeBoard_lh__d2 _lh_canMoveTo_arg2_1) in
//│ 		        (((((_lh_canMoveTo_LH_P2_0_1 >= 1) && (_lh_canMoveTo_LH_P2_0_1 <= sze_1)) && (_lh_canMoveTo_LH_P2_1_1 >= 1)) && (_lh_canMoveTo_LH_P2_1_1 <= sze_1)) && ((isSquareFree_lh__d1 (`LH_P2(_lh_canMoveTo_LH_P2_0_1, _lh_canMoveTo_LH_P2_1_1))) _lh_canMoveTo_arg2_1))));;
//│ 		let rec myLast_lh__d1 _lh_myLast_arg1_2 =
//│ 		  (match _lh_myLast_arg1_2 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2((0 - 100), (0 - 100)))
//│ 		    | `LH_C(_lh_myLast_LH_C_0_2, _lh_myLast_LH_C_1_2) -> 
//│ 		      (let rec go_2 = (fun _lh_go_arg1_2 _lh_go_arg2_2 -> 
//│ 		        (match _lh_go_arg2_2 with
//│ 		          | `LH_N -> 
//│ 		            _lh_go_arg1_2
//│ 		          | `LH_C(_lh_go_LH_C_0_2, _lh_go_LH_C_1_2) -> 
//│ 		            ((go_2 _lh_go_LH_C_0_2) _lh_go_LH_C_1_2))) in
//│ 		        ((go_2 _lh_myLast_LH_C_0_2) _lh_myLast_LH_C_1_2)));;
//│ 		let rec myInit_lh__d1 _lh_myInit_arg1_2 =
//│ 		  (match _lh_myInit_arg1_2 with
//│ 		    | `LH_C(_lh_myInit_LH_C_0_2, _lh_myInit_LH_C_1_2) -> 
//│ 		      (match _lh_myInit_LH_C_1_2 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_N)
//│ 		        | _ -> 
//│ 		          (`LH_C(_lh_myInit_LH_C_0_2, (myInit_lh__d1 _lh_myInit_LH_C_1_2)))));;
//│ 		let rec deleteFirst_lh__d1 _lh_deleteFirst_arg1_3 =
//│ 		  (match _lh_deleteFirst_arg1_3 with
//│ 		    | `Board(_lh_deleteFirst_Board_0_3, _lh_deleteFirst_Board_1_3, _lh_deleteFirst_Board_2_3, _lh_deleteFirst_Board_3_3) -> 
//│ 		      (let rec ts'_3 = (myInit_lh__d1 _lh_deleteFirst_Board_3_3) in
//│ 		        (`Board(_lh_deleteFirst_Board_0_3, (_lh_deleteFirst_Board_1_3 - 1), (myLast_lh__d1 ts'_3), ts'_3))));;
//│ 		let rec canJumpFirst_lh__d1 _lh_canJumpFirst_arg1_1 =
//│ 		  ((canMoveTo_lh__d1 (firstPiece_lh__d2 _lh_canJumpFirst_arg1_1)) (deleteFirst_lh__d1 _lh_canJumpFirst_arg1_1));;
//│ 		let rec sizeBoard_lh__d1 _lh_sizeBoard_arg1_2 =
//│ 		  (match _lh_sizeBoard_arg1_2 with
//│ 		    | `Board(_lh_sizeBoard_Board_0_2, _lh_sizeBoard_Board_1_2, _lh_sizeBoard_Board_2_2, _lh_sizeBoard_Board_3_2) -> 
//│ 		      _lh_sizeBoard_Board_0_2);;
//│ 		let rec tourFinished_lh__d1 _lh_tourFinished_arg1_0 =
//│ 		  (let rec sze_2 = (sizeBoard_lh__d1 _lh_tourFinished_arg1_0) in
//│ 		    (((noPieces_lh__d1 _lh_tourFinished_arg1_0) = (sze_2 * sze_2)) && (canJumpFirst_lh__d1 _lh_tourFinished_arg1_0)));;
//│ 		let rec isFinished_lh__d1 _lh_isFinished_arg1_0 =
//│ 		  (match _lh_isFinished_arg1_0 with
//│ 		    | `LH_P2(_lh_isFinished_LH_P2_0_0, _lh_isFinished_LH_P2_1_0) -> 
//│ 		      (tourFinished_lh__d1 _lh_isFinished_LH_P2_1_0));;
//│ 		let rec mappend_lh__d8 xs_1_2 ys_1_2 =
//│ 		  (match xs_1_2 with
//│ 		    | `LH_C(h_1_8, t_1_8) -> 
//│ 		      (`LH_C(h_1_8, ((mappend_lh__d8 t_1_8) ys_1_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_2);;
//│ 		let rec mappend_lh__d1_d4 xs_6 ys_6 =
//│ 		  (match xs_6 with
//│ 		    | `LH_C(h_1_2, t_1_2) -> 
//│ 		      (`LH_C(h_1_2, ((mappend_lh__d1_d4 t_1_2) ys_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_6);;
//│ 		let rec mappend_lh__d6 xs_1_4 ys_1_4 =
//│ 		  (match xs_1_4 with
//│ 		    | `LH_C(h_2_0, t_2_0) -> 
//│ 		      (`LH_C(h_2_0, ((mappend_lh__d6 t_2_0) ys_1_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_4);;
//│ 		let rec mappend_lh__d1_d3 xs_7 ys_7 =
//│ 		  (match xs_7 with
//│ 		    | `LH_C(h_1_3, t_1_3) -> 
//│ 		      (`LH_C(h_1_3, ((mappend_lh__d1_d3 t_1_3) ys_7)))
//│ 		    | `LH_N -> 
//│ 		      ys_7);;
//│ 		let rec mappend_lh__d9 xs_1_1 ys_1_1 =
//│ 		  (match xs_1_1 with
//│ 		    | `LH_C(h_1_7, t_1_7) -> 
//│ 		      (`LH_C(h_1_7, ((mappend_lh__d9 t_1_7) ys_1_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_1);;
//│ 		let rec mappend_lh__d1_d2 xs_8 ys_8 =
//│ 		  (match xs_8 with
//│ 		    | `LH_C(h_1_4, t_1_4) -> 
//│ 		      (`LH_C(h_1_4, ((mappend_lh__d1_d2 t_1_4) ys_8)))
//│ 		    | `LH_N -> 
//│ 		      ys_8);;
//│ 		let rec copy_lh__d2 _lh_copy_arg1_2 _lh_copy_arg2_2 =
//│ 		  (if (_lh_copy_arg1_2 <= 0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (`LH_C(_lh_copy_arg2_2, ((copy_lh__d2 (_lh_copy_arg1_2 - 1)) _lh_copy_arg2_2))));;
//│ 		let rec spaces_lh__d1 _lh_spaces_arg1_2 _lh_spaces_arg2_2 =
//│ 		  (let rec logTen_2 = (fun _lh_logTen_arg1_2 -> 
//│ 		    (match _lh_logTen_arg1_2 with
//│ 		      | 0 -> 
//│ 		        0
//│ 		      | _ -> 
//│ 		        (1 + (logTen_2 (_lh_logTen_arg1_2 / 10))))) in
//│ 		    ((copy_lh__d2 (((logTen_2 _lh_spaces_arg1_2) - (logTen_2 _lh_spaces_arg2_2)) + 1)) ' '));;
//│ 		let rec mappend_lh__d1_d0 xs_1_0 ys_1_0 =
//│ 		  (match xs_1_0 with
//│ 		    | `LH_C(h_1_6, t_1_6) -> 
//│ 		      (`LH_C(h_1_6, ((mappend_lh__d1_d0 t_1_6) ys_1_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_0);;
//│ 		let rec mappend_lh__d7 xs_1_3 ys_1_3 =
//│ 		  (match xs_1_3 with
//│ 		    | `LH_C(h_1_9, t_1_9) -> 
//│ 		      (`LH_C(h_1_9, ((mappend_lh__d7 t_1_9) ys_1_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_3);;
//│ 		let rec mappend_lh__d5 xs_1_5 ys_1_5 =
//│ 		  (match xs_1_5 with
//│ 		    | `LH_C(h_2_1, t_2_1) -> 
//│ 		      (`LH_C(h_2_1, ((mappend_lh__d5 t_2_1) ys_1_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_5);;
//│ 		let rec copy_lh__d4 _lh_copy_arg1_0 _lh_copy_arg2_0 =
//│ 		  (if (_lh_copy_arg1_0 <= 0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (`LH_C(_lh_copy_arg2_0, ((copy_lh__d4 (_lh_copy_arg1_0 - 1)) _lh_copy_arg2_0))));;
//│ 		let rec spaces_lh__d3 _lh_spaces_arg1_0 _lh_spaces_arg2_0 =
//│ 		  (let rec logTen_0 = (fun _lh_logTen_arg1_0 -> 
//│ 		    (match _lh_logTen_arg1_0 with
//│ 		      | 0 -> 
//│ 		        0
//│ 		      | _ -> 
//│ 		        (1 + (logTen_0 (_lh_logTen_arg1_0 / 10))))) in
//│ 		    ((copy_lh__d4 (((logTen_0 _lh_spaces_arg1_0) - (logTen_0 _lh_spaces_arg2_0)) + 1)) ' '));;
//│ 		let rec mappend_lh__d1_d1 xs_9 ys_9 =
//│ 		  (match xs_9 with
//│ 		    | `LH_C(h_1_5, t_1_5) -> 
//│ 		      (`LH_C(h_1_5, ((mappend_lh__d1_d1 t_1_5) ys_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_9);;
//│ 		let rec copy_lh__d3 _lh_copy_arg1_1 _lh_copy_arg2_1 =
//│ 		  (if (_lh_copy_arg1_1 <= 0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (`LH_C(_lh_copy_arg2_1, ((copy_lh__d3 (_lh_copy_arg1_1 - 1)) _lh_copy_arg2_1))));;
//│ 		let rec spaces_lh__d2 _lh_spaces_arg1_1 _lh_spaces_arg2_1 =
//│ 		  (let rec logTen_1 = (fun _lh_logTen_arg1_1 -> 
//│ 		    (match _lh_logTen_arg1_1 with
//│ 		      | 0 -> 
//│ 		        0
//│ 		      | _ -> 
//│ 		        (1 + (logTen_1 (_lh_logTen_arg1_1 / 10))))) in
//│ 		    ((copy_lh__d3 (((logTen_1 _lh_spaces_arg1_1) - (logTen_1 _lh_spaces_arg2_1)) + 1)) ' '));;
//│ 		let rec printBoard_lh__d1 _lh_printBoard_arg1_0 _lh_printBoard_arg2_0 _lh_printBoard_arg3_0 =
//│ 		  (match _lh_printBoard_arg3_0 with
//│ 		    | `LH_N -> 
//│ 		      (if (_lh_printBoard_arg2_0 > (_lh_printBoard_arg1_0 * _lh_printBoard_arg1_0)) then
//│ 		        (`LH_N)
//│ 		      else
//│ 		        (if ((_lh_printBoard_arg2_0 mod _lh_printBoard_arg1_0) <> 0) then
//│ 		          ((mappend_lh__d9 ((mappend_lh__d1_d4 (`LH_C('*', (`LH_N)))) ((spaces_lh__d1 (_lh_printBoard_arg1_0 * _lh_printBoard_arg1_0)) 1))) (((printBoard_lh__d1 _lh_printBoard_arg1_0) (_lh_printBoard_arg2_0 + 1)) (`LH_N)))
//│ 		        else
//│ 		          (if ((_lh_printBoard_arg2_0 mod _lh_printBoard_arg1_0) = 0) then
//│ 		            ((mappend_lh__d8 (`LH_C('*', (`LH_C('|', (`LH_N)))))) (((printBoard_lh__d1 _lh_printBoard_arg1_0) (_lh_printBoard_arg2_0 + 1)) (`LH_N)))
//│ 		          else
//│ 		            (failwith "msg"(`LH_C('p', (`LH_C('r', (`LH_C('i', (`LH_C('n', (`LH_C('t', (`LH_C('B', (`LH_C('o', (`LH_C('a', (`LH_C('r', (`LH_C('d', (`LH_C(' ', (`LH_C('e', (`LH_C('m', (`LH_C('p', (`LH_C('t', (`LH_C('y', (`LH_C(' ', (`LH_C('l', (`LH_C('i', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_N)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
//│ 		    | `LH_C(_lh_printBoard_LH_C_0_0, _lh_printBoard_LH_C_1_0) -> 
//│ 		      (match _lh_printBoard_LH_C_0_0 with
//│ 		        | `LH_P2(_lh_printBoard_LH_P2_0_0, _lh_printBoard_LH_P2_1_0) -> 
//│ 		          (if ((_lh_printBoard_LH_P2_0_0 = _lh_printBoard_arg2_0) && ((_lh_printBoard_arg2_0 mod _lh_printBoard_arg1_0) = 0)) then
//│ 		            ((mappend_lh__d7 ((mappend_lh__d1_d1 (string_of_int _lh_printBoard_LH_P2_1_0)) (`LH_C('|', (`LH_N))))) (((printBoard_lh__d1 _lh_printBoard_arg1_0) (_lh_printBoard_arg2_0 + 1)) _lh_printBoard_LH_C_1_0))
//│ 		          else
//│ 		            (if ((_lh_printBoard_LH_P2_0_0 = _lh_printBoard_arg2_0) && ((_lh_printBoard_arg2_0 mod _lh_printBoard_arg1_0) <> 0)) then
//│ 		              ((mappend_lh__d5 ((mappend_lh__d1_d3 (string_of_int _lh_printBoard_LH_P2_1_0)) ((spaces_lh__d2 (_lh_printBoard_arg1_0 * _lh_printBoard_arg1_0)) _lh_printBoard_LH_P2_1_0))) (((printBoard_lh__d1 _lh_printBoard_arg1_0) (_lh_printBoard_arg2_0 + 1)) _lh_printBoard_LH_C_1_0))
//│ 		            else
//│ 		              (if ((_lh_printBoard_arg2_0 mod _lh_printBoard_arg1_0) <> 0) then
//│ 		                ((mappend_lh__d6 ((mappend_lh__d1_d2 (`LH_C('*', (`LH_N)))) ((spaces_lh__d3 (_lh_printBoard_arg1_0 * _lh_printBoard_arg1_0)) 1))) (((printBoard_lh__d1 _lh_printBoard_arg1_0) (_lh_printBoard_arg2_0 + 1)) (`LH_C((`LH_P2(_lh_printBoard_LH_P2_0_0, _lh_printBoard_LH_P2_1_0)), _lh_printBoard_LH_C_1_0))))
//│ 		              else
//│ 		                (if ((_lh_printBoard_arg2_0 mod _lh_printBoard_arg1_0) = 0) then
//│ 		                  ((mappend_lh__d1_d0 (`LH_C('*', (`LH_C('|', (`LH_N)))))) (((printBoard_lh__d1 _lh_printBoard_arg1_0) (_lh_printBoard_arg2_0 + 1)) (`LH_C((`LH_P2(_lh_printBoard_LH_P2_0_0, _lh_printBoard_LH_P2_1_0)), _lh_printBoard_LH_C_1_0))))
//│ 		                else
//│ 		                  (failwith "msg"(`LH_C('p', (`LH_C('r', (`LH_C('i', (`LH_C('n', (`LH_C('t', (`LH_C('B', (`LH_C('o', (`LH_C('a', (`LH_C('r', (`LH_C('d', (`LH_C(' ', (`LH_C('n', (`LH_C('o', (`LH_C('n', (`LH_C('-', (`LH_C('e', (`LH_C('m', (`LH_C('p', (`LH_C('t', (`LH_C('y', (`LH_C(' ', (`LH_C('l', (`LH_C('i', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
//│ 		let rec assignMoveNo_lh__d1 _lh_assignMoveNo_arg1_0 _lh_assignMoveNo_arg2_0 _lh_assignMoveNo_arg3_0 =
//│ 		  (match _lh_assignMoveNo_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_assignMoveNo_LH_C_0_0, _lh_assignMoveNo_LH_C_1_0) -> 
//│ 		      (match _lh_assignMoveNo_LH_C_0_0 with
//│ 		        | `LH_P2(_lh_assignMoveNo_LH_P2_0_0, _lh_assignMoveNo_LH_P2_1_0) -> 
//│ 		          (`LH_C((`LH_P2((((_lh_assignMoveNo_LH_P2_1_0 - 1) * _lh_assignMoveNo_arg2_0) + _lh_assignMoveNo_LH_P2_0_0), _lh_assignMoveNo_arg3_0)), (((assignMoveNo_lh__d1 _lh_assignMoveNo_LH_C_1_0) _lh_assignMoveNo_arg2_0) (_lh_assignMoveNo_arg3_0 - 1))))));;
//│ 		let rec mappend_lh__d1_d6 xs_4 ys_4 =
//│ 		  (match xs_4 with
//│ 		    | `LH_C(h_1_0, t_1_0) -> 
//│ 		      (`LH_C(h_1_0, ((mappend_lh__d1_d6 t_1_0) ys_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_4);;
//│ 		let rec intintComp_lh__d2 _lh_intintComp_arg1_0 _lh_intintComp_arg2_0 =
//│ 		  (match _lh_intintComp_arg1_0 with
//│ 		    | `LH_P2(_lh_intintComp_LH_P2_0_0, _lh_intintComp_LH_P2_1_0) -> 
//│ 		      (match _lh_intintComp_arg2_0 with
//│ 		        | `LH_P2(_lh_intintComp_LH_P2_0_1, _lh_intintComp_LH_P2_1_1) -> 
//│ 		          ((_lh_intintComp_LH_P2_0_0 < _lh_intintComp_LH_P2_0_1) || ((_lh_intintComp_LH_P2_0_0 = _lh_intintComp_LH_P2_0_1) && (_lh_intintComp_LH_P2_1_0 < _lh_intintComp_LH_P2_1_1)))));;
//│ 		let rec mappend_lh__d1_d5 xs_5 ys_5 =
//│ 		  (match xs_5 with
//│ 		    | `LH_C(h_1_1, t_1_1) -> 
//│ 		      (`LH_C(h_1_1, ((mappend_lh__d1_d5 t_1_1) ys_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_5);;
//│ 		let rec intintComp_lh__d1 _lh_intintComp_arg1_1 _lh_intintComp_arg2_1 =
//│ 		  (match _lh_intintComp_arg1_1 with
//│ 		    | `LH_P2(_lh_intintComp_LH_P2_0_2, _lh_intintComp_LH_P2_1_2) -> 
//│ 		      (match _lh_intintComp_arg2_1 with
//│ 		        | `LH_P2(_lh_intintComp_LH_P2_0_3, _lh_intintComp_LH_P2_1_3) -> 
//│ 		          ((_lh_intintComp_LH_P2_0_2 < _lh_intintComp_LH_P2_0_3) || ((_lh_intintComp_LH_P2_0_2 = _lh_intintComp_LH_P2_0_3) && (_lh_intintComp_LH_P2_1_2 < _lh_intintComp_LH_P2_1_3)))));;
//│ 		let rec quickSortIntInt_lh__d1 _lh_quickSortIntInt_arg1_0 =
//│ 		  (match _lh_quickSortIntInt_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_quickSortIntInt_LH_C_0_0, _lh_quickSortIntInt_LH_C_1_0) -> 
//│ 		      ((mappend_lh__d1_d6 ((mappend_lh__d1_d5 (quickSortIntInt_lh__d1 (let rec _lh_listcomp_fun_9 = (fun _lh_listcomp_fun_para_9 -> 
//│ 		        (match _lh_listcomp_fun_para_9 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_9, _lh_listcomp_fun_ls_t_9) -> 
//│ 		            (if ((intintComp_lh__d1 _lh_listcomp_fun_ls_h_9) _lh_quickSortIntInt_LH_C_0_0) then
//│ 		              (`LH_C(_lh_listcomp_fun_ls_h_9, (_lh_listcomp_fun_9 _lh_listcomp_fun_ls_t_9)))
//│ 		            else
//│ 		              (_lh_listcomp_fun_9 _lh_listcomp_fun_ls_t_9))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_9 _lh_quickSortIntInt_LH_C_1_0)))) (`LH_C(_lh_quickSortIntInt_LH_C_0_0, (`LH_N))))) (quickSortIntInt_lh__d1 (let rec _lh_listcomp_fun_1_0 = (fun _lh_listcomp_fun_para_1_0 -> 
//│ 		        (match _lh_listcomp_fun_para_1_0 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_1_0, _lh_listcomp_fun_ls_t_1_0) -> 
//│ 		            (if (not ((intintComp_lh__d2 _lh_listcomp_fun_ls_h_1_0) _lh_quickSortIntInt_LH_C_0_0)) then
//│ 		              (`LH_C(_lh_listcomp_fun_ls_h_1_0, (_lh_listcomp_fun_1_0 _lh_listcomp_fun_ls_t_1_0)))
//│ 		            else
//│ 		              (_lh_listcomp_fun_1_0 _lh_listcomp_fun_ls_t_1_0))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_1_0 _lh_quickSortIntInt_LH_C_1_0)))));;
//│ 		let rec showChessSet_lh__d1 _lh_showChessSet_arg1_0 =
//│ 		  (match _lh_showChessSet_arg1_0 with
//│ 		    | `Board(_lh_showChessSet_Board_0_0, _lh_showChessSet_Board_1_0, _lh_showChessSet_Board_2_0, _lh_showChessSet_Board_3_0) -> 
//│ 		      (let rec sortedTrail_0 = (quickSortIntInt_lh__d1 (((assignMoveNo_lh__d1 _lh_showChessSet_Board_3_0) _lh_showChessSet_Board_0_0) _lh_showChessSet_Board_1_0)) in
//│ 		        (((printBoard_lh__d1 _lh_showChessSet_Board_0_0) 1) sortedTrail_0)));;
//│ 		let rec printTour_lh__d1 _lh_printTour_arg1_0 =
//│ 		  let rec strToInt_0 = (fun _lh_strToInt_arg1_0 _lh_strToInt_arg2_0 -> 
//│ 		    (match _lh_strToInt_arg2_0 with
//│ 		      | `LH_N -> 
//│ 		        _lh_strToInt_arg1_0
//│ 		      | `LH_C(_lh_strToInt_LH_C_0_0, _lh_strToInt_LH_C_1_0) -> 
//│ 		        ((strToInt_0 ((10 * _lh_strToInt_arg1_0) + ((int_of_char _lh_strToInt_LH_C_0_0) - (int_of_char '0')))) _lh_strToInt_LH_C_1_0)))
//│ 		  and pp_0 = (fun _lh_pp_arg1_0 -> 
//│ 		    (match _lh_pp_arg1_0 with
//│ 		      | `LH_N -> 
//│ 		        (`LH_N)
//│ 		      | `LH_C(_lh_pp_LH_C_0_0, _lh_pp_LH_C_1_0) -> 
//│ 		        (match _lh_pp_LH_C_0_0 with
//│ 		          | `LH_P2(_lh_pp_LH_P2_0_0, _lh_pp_LH_P2_1_0) -> 
//│ 		            ((mappend_lh__d4 ((mappend_lh__d1 ((mappend_lh__d2 ((mappend_lh__d3 (`LH_C('|', (`LH_C('K', (`LH_C('n', (`LH_C('i', (`LH_C('g', (`LH_C('h', (`LH_C('t', (`LH_C('s', (`LH_C(' ', (`LH_C('t', (`LH_C('o', (`LH_C('u', (`LH_C('r', (`LH_C(' ', (`LH_C('w', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C(' ', (`LH_N)))))))))))))))))))))))))))))))))))))))) (string_of_int _lh_pp_LH_P2_0_0))) (`LH_C(' ', (`LH_C('b', (`LH_C('a', (`LH_C('c', (`LH_C('k', (`LH_C('t', (`LH_C('r', (`LH_C('a', (`LH_C('c', (`LH_C('k', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C(' ', (`LH_C('m', (`LH_C('o', (`LH_C('v', (`LH_C('e', (`LH_C('s', (`LH_C('|', (`LH_N))))))))))))))))))))))))))))))))))))))))))) (showChessSet_lh__d1 _lh_pp_LH_P2_1_0))) (pp_0 _lh_pp_LH_C_1_0)))))
//│ 		  in (let rec _lh_matchIdent_1 = ((map_lh__d1 (strToInt_0 0)) _lh_printTour_arg1_0) in
//│ 		    (match _lh_matchIdent_1 with
//│ 		      | `LH_C(_lh_printTour_LH_C_0_0, _lh_printTour_LH_C_1_0) -> 
//│ 		        (match _lh_printTour_LH_C_1_0 with
//│ 		          | `LH_C(_lh_printTour_LH_C_0_1, _lh_printTour_LH_C_1_1) -> 
//│ 		            (match _lh_printTour_LH_C_1_1 with
//│ 		              | `LH_N -> 
//│ 		                (pp_0 ((take_lz_lh__d1 _lh_printTour_LH_C_0_1) (((depthSearch_lh__d1 (root_lh__d1 _lh_printTour_LH_C_0_0)) grow_lh__d1) isFinished_lh__d1)))))));;
//│ 		let rec length_lh__d2 ls_8 =
//│ 		  (match ls_8 with
//│ 		    | `LH_C(h_2_8, t_2_8) -> 
//│ 		      (1 + (length_lh__d2 t_2_8))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec testKnights_nofib_lh__d1 _lh_testKnights_nofib_arg1_0 =
//│ 		  let rec all_digits_0 = (fun _lh_all_digits_arg1_0 -> 
//│ 		    (((foldr_lh__d2 (fun _lh_funcomp_x_0 -> 
//│ 		      ((fun a_2 b_2 -> 
//│ 		        (a_2 && b_2)) (myIsDigit_lh__d1 _lh_funcomp_x_0)))) true) _lh_all_digits_arg1_0))
//│ 		  and argsOk_0 = (fun _lh_argsOk_arg1_0 -> 
//│ 		    (((length_lh__d2 _lh_argsOk_arg1_0) = 2) && (((foldr_lh__d1 (fun _lh_funcomp_x_1 -> 
//│ 		      ((fun a_3 b_3 -> 
//│ 		        (a_3 && b_3)) (all_digits_0 _lh_funcomp_x_1)))) true) _lh_argsOk_arg1_0)))
//│ 		  and usageString_0 = (`LH_C('|', (`LH_C('U', (`LH_C('s', (`LH_C('a', (`LH_C('g', (`LH_C('e', (`LH_C(':', (`LH_C(' ', (`LH_C('k', (`LH_C('n', (`LH_C('i', (`LH_C('g', (`LH_C('h', (`LH_C('t', (`LH_C('s', (`LH_C(' ', (`LH_C('<', (`LH_C('b', (`LH_C('o', (`LH_C('a', (`LH_C('r', (`LH_C('d', (`LH_C(' ', (`LH_C('s', (`LH_C('i', (`LH_C('z', (`LH_C('e', (`LH_C('>', (`LH_C(' ', (`LH_C('<', (`LH_C('n', (`LH_C('o', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('l', (`LH_C('u', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C('s', (`LH_C('>', (`LH_C('|', (`LH_N)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
//│ 		  in (if (argsOk_0 _lh_testKnights_nofib_arg1_0) then
//│ 		    (length_lh__d1 (printTour_lh__d1 _lh_testKnights_nofib_arg1_0))
//│ 		  else
//│ 		    (failwith "msg"usageString_0));;
//│ 		(testKnights_nofib_lh__d1 (`LH_C((`LH_C('8', (`LH_N))), (`LH_C((`LH_C('1', (`LH_N))), (`LH_N))))))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< after expansion <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 153 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh_₆(t⁰)) | LH_N  => 0}: 141
//│ [LH_N]: 158 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh_₆(t⁰)) | LH_N  => 0}: 141
//│ [LH_N]: 170 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if canMove_lh_₁(_lh_possibleMoves_arg1⁰, _lh_listcomp_fun_ls_h⁰) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | LH_N  => [LH_N]}: 159
//│ [LH_C [RD] [LH_N]]: 171 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if canMove_lh_₁(_lh_possibleMoves_arg1⁰, _lh_listcomp_fun_ls_h⁰) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | LH_N  => [LH_N]}: 159
//│ [LH_C [RU] [LH_C [RD] [LH_N]]]: 172 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if canMove_lh_₁(_lh_possibleMoves_arg1⁰, _lh_listcomp_fun_ls_h⁰) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | LH_N  => [LH_N]}: 159
//│ [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]: 173 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if canMove_lh_₁(_lh_possibleMoves_arg1⁰, _lh_listcomp_fun_ls_h⁰) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | LH_N  => [LH_N]}: 159
//│ [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]: 174 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if canMove_lh_₁(_lh_possibleMoves_arg1⁰, _lh_listcomp_fun_ls_h⁰) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | LH_N  => [LH_N]}: 159
//│ [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]: 175 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if canMove_lh_₁(_lh_possibleMoves_arg1⁰, _lh_listcomp_fun_ls_h⁰) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | LH_N  => [LH_N]}: 159
//│ [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]: 176 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if canMove_lh_₁(_lh_possibleMoves_arg1⁰, _lh_listcomp_fun_ls_h⁰) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | LH_N  => [LH_N]}: 159
//│ [LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]: 177 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if canMove_lh_₁(_lh_possibleMoves_arg1⁰, _lh_listcomp_fun_ls_h⁰) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | LH_N  => [LH_N]}: 159
//│ [LH_C [UL] [LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]]: 178 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if canMove_lh_₁(_lh_possibleMoves_arg1⁰, _lh_listcomp_fun_ls_h⁰) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | LH_N  => [LH_N]}: 159
//│ [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 210 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f⁰(h¹) map_lh_₃(f⁰, t¹)] | LH_N  => [LH_N]}: 250
//│ [LH_N]: 215 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f⁰(h¹) map_lh_₃(f⁰, t¹)] | LH_N  => [LH_N]}: 250
//│ [LH_N]: 227 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if canMove_lh_₁(_lh_possibleMoves_arg1¹, _lh_listcomp_fun_ls_h¹) then [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => [LH_N]}: 216
//│ [LH_C [RD] [LH_N]]: 228 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if canMove_lh_₁(_lh_possibleMoves_arg1¹, _lh_listcomp_fun_ls_h¹) then [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => [LH_N]}: 216
//│ [LH_C [RU] [LH_C [RD] [LH_N]]]: 229 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if canMove_lh_₁(_lh_possibleMoves_arg1¹, _lh_listcomp_fun_ls_h¹) then [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => [LH_N]}: 216
//│ [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]: 230 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if canMove_lh_₁(_lh_possibleMoves_arg1¹, _lh_listcomp_fun_ls_h¹) then [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => [LH_N]}: 216
//│ [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]: 231 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if canMove_lh_₁(_lh_possibleMoves_arg1¹, _lh_listcomp_fun_ls_h¹) then [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => [LH_N]}: 216
//│ [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]: 232 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if canMove_lh_₁(_lh_possibleMoves_arg1¹, _lh_listcomp_fun_ls_h¹) then [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => [LH_N]}: 216
//│ [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]: 233 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if canMove_lh_₁(_lh_possibleMoves_arg1¹, _lh_listcomp_fun_ls_h¹) then [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => [LH_N]}: 216
//│ [LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]: 234 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if canMove_lh_₁(_lh_possibleMoves_arg1¹, _lh_listcomp_fun_ls_h¹) then [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => [LH_N]}: 216
//│ [LH_C [UL] [LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]]: 235 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if canMove_lh_₁(_lh_possibleMoves_arg1¹, _lh_listcomp_fun_ls_h¹) then [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => [LH_N]}: 216
//│ [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 453 --->
//│ 	case ls² of {LH_C h² t² => (1 + length_lh_₅(t²)) | LH_N  => 0}: 441
//│ [LH_N]: 458 --->
//│ 	case ls² of {LH_C h² t² => (1 + length_lh_₅(t²)) | LH_N  => 0}: 441
//│ [LH_N]: 470 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if canMove_lh_₁(_lh_possibleMoves_arg1², _lh_listcomp_fun_ls_h²) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => [LH_N]}: 459
//│ [LH_C [RD] [LH_N]]: 471 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if canMove_lh_₁(_lh_possibleMoves_arg1², _lh_listcomp_fun_ls_h²) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => [LH_N]}: 459
//│ [LH_C [RU] [LH_C [RD] [LH_N]]]: 472 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if canMove_lh_₁(_lh_possibleMoves_arg1², _lh_listcomp_fun_ls_h²) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => [LH_N]}: 459
//│ [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]: 473 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if canMove_lh_₁(_lh_possibleMoves_arg1², _lh_listcomp_fun_ls_h²) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => [LH_N]}: 459
//│ [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]: 474 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if canMove_lh_₁(_lh_possibleMoves_arg1², _lh_listcomp_fun_ls_h²) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => [LH_N]}: 459
//│ [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]: 475 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if canMove_lh_₁(_lh_possibleMoves_arg1², _lh_listcomp_fun_ls_h²) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => [LH_N]}: 459
//│ [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]: 476 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if canMove_lh_₁(_lh_possibleMoves_arg1², _lh_listcomp_fun_ls_h²) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => [LH_N]}: 459
//│ [LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]: 477 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if canMove_lh_₁(_lh_possibleMoves_arg1², _lh_listcomp_fun_ls_h²) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => [LH_N]}: 459
//│ [LH_C [UL] [LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]]: 478 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if canMove_lh_₁(_lh_possibleMoves_arg1², _lh_listcomp_fun_ls_h²) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => [LH_N]}: 459
//│ [LH_C h⁴ mappend_lh_₁₉(t⁴, ys¹)]: 512 --->
//│ 	case xs⁰ of {LH_C h³ t³ => [LH_C h³ mappend_lh_₂₀(t³, ys⁰)] | LH_N  => ys⁰}: 502
//│ [LH_P2 length_lh_₆(possibleMoves_lh_₄(deleteFirst_lh_₄(_lh_listcomp_fun_ls_h³))) _lh_listcomp_fun_ls_h³]: 537 --->
//│ 	case _lh_listcomp_fun_ls_h⁷ of {LH_P2 _lh_singleDescend_LH_P2_0⁰ _lh_singleDescend_LH_P2_1⁰ => if (_lh_singleDescend_LH_P2_0⁰ == 1) then [LH_C _lh_singleDescend_LH_P2_1⁰ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷) | _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)}: 962
//│ [LH_C [LH_P2 length_lh_₆(possibleMoves_lh_₄(deleteFirst_lh_₄(_lh_listcomp_fun_ls_h³))) _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 541 --->
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => case _lh_listcomp_fun_ls_h⁷ of {LH_P2 _lh_singleDescend_LH_P2_0⁰ _lh_singleDescend_LH_P2_1⁰ => if (_lh_singleDescend_LH_P2_0⁰ == 1) then [LH_C _lh_singleDescend_LH_P2_1⁰ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷) | _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)} | LH_N  => [LH_N]}: 964
//│ [LH_N]: 542 --->
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => case _lh_listcomp_fun_ls_h⁷ of {LH_P2 _lh_singleDescend_LH_P2_0⁰ _lh_singleDescend_LH_P2_1⁰ => if (_lh_singleDescend_LH_P2_0⁰ == 1) then [LH_C _lh_singleDescend_LH_P2_1⁰ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷) | _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)} | LH_N  => [LH_N]}: 964
//│ [LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 583 --->
//│ 	case ls³ of {LH_C h⁵ t⁵ => (1 + length_lh_₄(t⁵)) | LH_N  => 0}: 571
//│ [LH_N]: 588 --->
//│ 	case ls³ of {LH_C h⁵ t⁵ => (1 + length_lh_₄(t⁵)) | LH_N  => 0}: 571
//│ [LH_N]: 600 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if canMove_lh_₁(_lh_possibleMoves_arg1³, _lh_listcomp_fun_ls_h⁴) then [LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => [LH_N]}: 589
//│ [LH_C [RD] [LH_N]]: 601 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if canMove_lh_₁(_lh_possibleMoves_arg1³, _lh_listcomp_fun_ls_h⁴) then [LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => [LH_N]}: 589
//│ [LH_C [RU] [LH_C [RD] [LH_N]]]: 602 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if canMove_lh_₁(_lh_possibleMoves_arg1³, _lh_listcomp_fun_ls_h⁴) then [LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => [LH_N]}: 589
//│ [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]: 603 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if canMove_lh_₁(_lh_possibleMoves_arg1³, _lh_listcomp_fun_ls_h⁴) then [LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => [LH_N]}: 589
//│ [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]: 604 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if canMove_lh_₁(_lh_possibleMoves_arg1³, _lh_listcomp_fun_ls_h⁴) then [LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => [LH_N]}: 589
//│ [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]: 605 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if canMove_lh_₁(_lh_possibleMoves_arg1³, _lh_listcomp_fun_ls_h⁴) then [LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => [LH_N]}: 589
//│ [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]: 606 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if canMove_lh_₁(_lh_possibleMoves_arg1³, _lh_listcomp_fun_ls_h⁴) then [LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => [LH_N]}: 589
//│ [LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]: 607 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if canMove_lh_₁(_lh_possibleMoves_arg1³, _lh_listcomp_fun_ls_h⁴) then [LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => [LH_N]}: 589
//│ [LH_C [UL] [LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]]: 608 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if canMove_lh_₁(_lh_possibleMoves_arg1³, _lh_listcomp_fun_ls_h⁴) then [LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => [LH_N]}: 589
//│ [LH_N]: 773 --->
//│ 	case xs¹⁴ of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₆(t²⁰, ys¹⁴)] | LH_N  => ys¹⁴}: 1317
//│ [LH_C _lh_copy_arg2⁰ copy_lh_₄((_lh_copy_arg1⁰ - 1), _lh_copy_arg2⁰)]: 784 --->
//│ 	case xs¹⁴ of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₆(t²⁰, ys¹⁴)] | LH_N  => ys¹⁴}: 1317
//│ [LH_N]: 793 --->
//│ 	case xs¹⁵ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₅(t²¹, ys¹⁵)] | LH_N  => ys¹⁵}: 1364
//│ [LH_C _lh_copy_arg2¹ copy_lh_₃((_lh_copy_arg1¹ - 1), _lh_copy_arg2¹)]: 804 --->
//│ 	case xs¹⁵ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₅(t²¹, ys¹⁵)] | LH_N  => ys¹⁵}: 1364
//│ [LH_N]: 813 --->
//│ 	case xs¹¹ of {LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ mappend_lh_₉(t¹⁷, ys¹¹)] | LH_N  => ys¹¹}: 1281
//│ [LH_C _lh_copy_arg2² copy_lh_₂((_lh_copy_arg1² - 1), _lh_copy_arg2²)]: 824 --->
//│ 	case xs¹¹ of {LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ mappend_lh_₉(t¹⁷, ys¹¹)] | LH_N  => ys¹¹}: 1281
//│ [LH_N]: 910 --->
//│ 	case xs⁰ of {LH_C h³ t³ => [LH_C h³ mappend_lh_₂₀(t³, ys⁰)] | LH_N  => ys⁰}: 502
//│ [LH_C _lh_quickSortIntChessSet_LH_C_0⁰ [LH_N]]: 911 --->
//│ 	case xs⁰ of {LH_C h³ t³ => [LH_C h³ mappend_lh_₂₀(t³, ys⁰)] | LH_N  => ys⁰}: 502
//│ [LH_C h¹¹ mappend_lh_₁₅(t¹¹, ys⁵)]: 1083 --->
//│ 	case xs⁴ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₆(t¹⁰, ys⁴)] | LH_N  => ys⁴}: 1073
//│ [LH_C h¹² mappend_lh_₁₄(t¹², ys⁶)]: 1149 --->
//│ 	case xs¹¹ of {LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ mappend_lh_₉(t¹⁷, ys¹¹)] | LH_N  => ys¹¹}: 1281
//│ [LH_C h¹³ mappend_lh_₁₃(t¹³, ys⁷)]: 1161 --->
//│ 	case xs¹⁵ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₅(t²¹, ys¹⁵)] | LH_N  => ys¹⁵}: 1364
//│ [LH_C h¹⁴ mappend_lh_₁₂(t¹⁴, ys⁸)]: 1173 --->
//│ 	case xs¹⁴ of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₆(t²⁰, ys¹⁴)] | LH_N  => ys¹⁴}: 1317
//│ [LH_C h¹⁵ mappend_lh_₁₁(t¹⁵, ys⁹)]: 1185 --->
//│ 	case xs¹³ of {LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₇(t¹⁹, ys¹³)] | LH_N  => ys¹³}: 1305
//│ [LH_C h¹⁶ mappend_lh_₁₀(t¹⁶, ys¹⁰)]: 1197 --->
//│ 	case xs¹⁹ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₄(t²², ys¹⁹)] | LH_N  => ys¹⁹}: 2574
//│ [LH_C h¹⁷ mappend_lh_₉(t¹⁷, ys¹¹)]: 1279 --->
//│ 	case xs¹⁹ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₄(t²², ys¹⁹)] | LH_N  => ys¹⁹}: 2574
//│ [LH_C h¹⁸ mappend_lh_₈(t¹⁸, ys¹²)]: 1291 --->
//│ 	case xs¹⁹ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₄(t²², ys¹⁹)] | LH_N  => ys¹⁹}: 2574
//│ [LH_C h¹⁹ mappend_lh_₇(t¹⁹, ys¹³)]: 1303 --->
//│ 	case xs¹⁹ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₄(t²², ys¹⁹)] | LH_N  => ys¹⁹}: 2574
//│ [LH_C h²⁰ mappend_lh_₆(t²⁰, ys¹⁴)]: 1315 --->
//│ 	case xs¹⁹ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₄(t²², ys¹⁹)] | LH_N  => ys¹⁹}: 2574
//│ [LH_C h²¹ mappend_lh_₅(t²¹, ys¹⁵)]: 1362 --->
//│ 	case xs¹⁹ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₄(t²², ys¹⁹)] | LH_N  => ys¹⁹}: 2574
//│ [LH_C [LH_P2 hx⁰ hy⁰] zip_lz_nl_lh_₂(tx⁰, ty⁰)]: 1776 --->
//│ 	case xs² of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁₈(t⁶, ys²)] | LH_N  => ys²}: 837
//│ [LH_N]: 1777 --->
//│ 	case xs² of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁₈(t⁶, ys²)] | LH_N  => ys²}: 837
//│ [LH_N]: 1779 --->
//│ 	case xs² of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁₈(t⁶, ys²)] | LH_N  => ys²}: 837
//│ [LH_C x⁰ repeat_lh_₂(x⁰)]: 1788 --->
//│ 	case force⁰(xs¹⁶) of {LH_C hx⁰ tx⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lz_nl_lh_₂(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 1778
//│ [LH_C x¹ repeat_lh_₁(x¹)]: 1917 --->
//│ 	case force⁰(xs¹⁷) of {LH_C hx¹ tx¹ => [LH_C [LH_P2 hx¹ hy¹] zip_lz_nl_lh_₁(tx¹, ty¹)] | LH_N  => [LH_N]}: 1934
//│ [LH_C [LH_P2 hx¹ hy¹] zip_lz_nl_lh_₁(tx¹, ty¹)]: 1932 --->
//│ 	case xs³ of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₇(t⁹, ys³)] | LH_N  => ys³}: 1061
//│ [LH_N]: 1933 --->
//│ 	case xs³ of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₇(t⁹, ys³)] | LH_N  => ys³}: 1061
//│ [LH_N]: 1935 --->
//│ 	case xs³ of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₇(t⁹, ys³)] | LH_N  => ys³}: 1061
//│ [LH_C f²(hx², hy²) zipWith_lh_₁(f², tx², ty²)]: 1953 --->
//│ 	case ys¹⁷ of {LH_C hy¹ ty¹ => case force⁰(xs¹⁷) of {LH_C hx¹ tx¹ => [LH_C [LH_P2 hx¹ hy¹] zip_lz_nl_lh_₁(tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 1936
//│ [LH_N]: 1954 --->
//│ 	case ys¹⁷ of {LH_C hy¹ ty¹ => case force⁰(xs¹⁷) of {LH_C hx¹ tx¹ => [LH_C [LH_P2 hx¹ hy¹] zip_lz_nl_lh_₁(tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 1936
//│ [LH_N]: 1956 --->
//│ 	case ys¹⁷ of {LH_C hy¹ ty¹ => case force⁰(xs¹⁷) of {LH_C hx¹ tx¹ => [LH_C [LH_P2 hx¹ hy¹] zip_lz_nl_lh_₁(tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 1936
//│ [LH_N]: 1966 --->
//│ 	case ys¹⁸ of {LH_C hy² ty² => [LH_C f²(hx², hy²) zipWith_lh_₁(f², tx², ty²)] | LH_N  => [LH_N]}: 1955
//│ [LH_C _lh_copy_arg2³ copy_lh_₁((_lh_copy_arg1³ - 1), _lh_copy_arg2³)]: 1977 --->
//│ 	case ys¹⁸ of {LH_C hy² ty² => [LH_C f²(hx², hy²) zipWith_lh_₁(f², tx², ty²)] | LH_N  => [LH_N]}: 1955
//│ [LH_C a⁰ enumFromTo_lh_₂((a⁰ + 1), b⁰)]: 1997 --->
//│ 	case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => let _lh_listcomp_fun¹² = (fun _lh_listcomp_fun_para¹² -> case _lh_listcomp_fun_para¹² of {LH_C _lh_listcomp_fun_ls_h¹² _lh_listcomp_fun_ls_t¹² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_h¹²] _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t¹²)] | LH_N  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)})
//│ in _lh_listcomp_fun¹²(enumFromTo_lh_₁(1, _lh_root_arg1⁰)) | LH_N  => [LH_N]}: 2642
//│ [LH_N]: 1998 --->
//│ 	case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => let _lh_listcomp_fun¹² = (fun _lh_listcomp_fun_para¹² -> case _lh_listcomp_fun_para¹² of {LH_C _lh_listcomp_fun_ls_h¹² _lh_listcomp_fun_ls_t¹² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_h¹²] _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t¹²)] | LH_N  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)})
//│ in _lh_listcomp_fun¹²(enumFromTo_lh_₁(1, _lh_root_arg1⁰)) | LH_N  => [LH_N]}: 2642
//│ [LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)]: 2017 --->
//│ 	case _lh_listcomp_fun_para¹² of {LH_C _lh_listcomp_fun_ls_h¹² _lh_listcomp_fun_ls_t¹² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_h¹²] _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t¹²)] | LH_N  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)}: 2631
//│ [LH_N]: 2018 --->
//│ 	case _lh_listcomp_fun_para¹² of {LH_C _lh_listcomp_fun_ls_h¹² _lh_listcomp_fun_ls_t¹² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_h¹²] _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t¹²)] | LH_N  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)}: 2631
//│ [LH_N]: 2052 --->
//│ 	case xs⁴ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₆(t¹⁰, ys⁴)] | LH_N  => ys⁴}: 1073
//│ [LH_C _lh_quickSortIntInt_LH_C_0⁰ [LH_N]]: 2053 --->
//│ 	case xs⁴ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₆(t¹⁰, ys⁴)] | LH_N  => ys⁴}: 1073
//│ [LH_N]: 2130 --->
//│ 	case xs¹⁹ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₄(t²², ys¹⁹)] | LH_N  => ys¹⁹}: 2574
//│ [LH_N]: 2143 --->
//│ 	case xs⁶ of {LH_C h¹² t¹² => [LH_C h¹² mappend_lh_₁₄(t¹², ys⁶)] | LH_N  => ys⁶}: 1151
//│ [LH_C '*' [LH_N]]: 2144 --->
//│ 	case xs⁶ of {LH_C h¹² t¹² => [LH_C h¹² mappend_lh_₁₄(t¹², ys⁶)] | LH_N  => ys⁶}: 1151
//│ [LH_N]: 2181 --->
//│ 	case xs¹² of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₈(t¹⁸, ys¹²)] | LH_N  => ys¹²}: 1293
//│ [LH_C '|' [LH_N]]: 2182 --->
//│ 	case xs¹² of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₈(t¹⁸, ys¹²)] | LH_N  => ys¹²}: 1293
//│ [LH_C '*' [LH_C '|' [LH_N]]]: 2183 --->
//│ 	case xs¹² of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₈(t¹⁸, ys¹²)] | LH_N  => ys¹²}: 1293
//│ [LH_N]: 2282 --->
//│ 	case xs¹³ of {LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₇(t¹⁹, ys¹³)] | LH_N  => ys¹³}: 1305
//│ [LH_C '|' [LH_N]]: 2283 --->
//│ 	case xs¹³ of {LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₇(t¹⁹, ys¹³)] | LH_N  => ys¹³}: 1305
//│ [LH_N]: 2356 --->
//│ 	case xs⁸ of {LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₁₂(t¹⁴, ys⁸)] | LH_N  => ys⁸}: 1175
//│ [LH_C '*' [LH_N]]: 2357 --->
//│ 	case xs⁸ of {LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₁₂(t¹⁴, ys⁸)] | LH_N  => ys⁸}: 1175
//│ [LH_N]: 2398 --->
//│ 	case xs¹⁰ of {LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₁₀(t¹⁶, ys¹⁰)] | LH_N  => ys¹⁰}: 1199
//│ [LH_C '|' [LH_N]]: 2399 --->
//│ 	case xs¹⁰ of {LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₁₀(t¹⁶, ys¹⁰)] | LH_N  => ys¹⁰}: 1199
//│ [LH_C '*' [LH_C '|' [LH_N]]]: 2400 --->
//│ 	case xs¹⁰ of {LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₁₀(t¹⁶, ys¹⁰)] | LH_N  => ys¹⁰}: 1199
//│ [LH_N]: 2499 --->
//│ 	case force⁰(ls⁶) of {LH_C h²³ t²³ => [LH_C h²³ take_lz_lh_₁((n⁰ - 1), t²³)] | LH_N  => [LH_N]}: 2597
//│ [LH_C inquireFront_lh_₁(_lh_depthSearch_arg1⁰) depthSearch_lh_₁(removeFront_lh_₁(_lh_depthSearch_arg1⁰), _lh_depthSearch_arg2⁰, _lh_depthSearch_arg3⁰)]: 2519 --->
//│ 	case force⁰(ls⁶) of {LH_C h²³ t²³ => [LH_C h²³ take_lz_lh_₁((n⁰ - 1), t²³)] | LH_N  => [LH_N]}: 2597
//│ [LH_C h²² mappend_lh_₄(t²², ys¹⁹)]: 2572 --->
//│ 	case ls⁹ of {LH_C h²⁹ t²⁹ => (1 + length_lh_₁(t²⁹)) | LH_N  => 0}: 2922
//│ [LH_C h²³ take_lz_lh_₁((n⁰ - 1), t²³)]: 2595 --->
//│ 	case _lh_pp_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_pp_LH_C_0⁰ _lh_pp_LH_C_1⁰ => case _lh_pp_LH_C_0⁰ of {LH_P2 _lh_pp_LH_P2_0⁰ _lh_pp_LH_P2_1⁰ => mappend_lh_₄(mappend_lh_₁(mappend_lh_₂(mappend_lh_₃([LH_C '|' [LH_C 'K' [LH_C 'n' [LH_C 'i' [LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]], string_of_int⁰(_lh_pp_LH_P2_0⁰)), [LH_C ' ' [LH_C 'b' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]), showChessSet_lh_₁(_lh_pp_LH_P2_1⁰)), pp⁰(_lh_pp_LH_C_1⁰))}}: 2880
//│ [LH_N]: 2596 --->
//│ 	case _lh_pp_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_pp_LH_C_0⁰ _lh_pp_LH_C_1⁰ => case _lh_pp_LH_C_0⁰ of {LH_P2 _lh_pp_LH_P2_0⁰ _lh_pp_LH_P2_1⁰ => mappend_lh_₄(mappend_lh_₁(mappend_lh_₂(mappend_lh_₃([LH_C '|' [LH_C 'K' [LH_C 'n' [LH_C 'i' [LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]], string_of_int⁰(_lh_pp_LH_P2_0⁰)), [LH_C ' ' [LH_C 'b' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]), showChessSet_lh_₁(_lh_pp_LH_P2_1⁰)), pp⁰(_lh_pp_LH_C_1⁰))}}: 2880
//│ [LH_N]: 2598 --->
//│ 	case _lh_pp_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_pp_LH_C_0⁰ _lh_pp_LH_C_1⁰ => case _lh_pp_LH_C_0⁰ of {LH_P2 _lh_pp_LH_P2_0⁰ _lh_pp_LH_P2_1⁰ => mappend_lh_₄(mappend_lh_₁(mappend_lh_₂(mappend_lh_₃([LH_C '|' [LH_C 'K' [LH_C 'n' [LH_C 'i' [LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]], string_of_int⁰(_lh_pp_LH_P2_0⁰)), [LH_C ' ' [LH_C 'b' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]), showChessSet_lh_₁(_lh_pp_LH_P2_1⁰)), pp⁰(_lh_pp_LH_C_1⁰))}}: 2880
//│ [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_h¹²] _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t¹²)]: 2627 --->
//│ 	case xs¹⁸ of {LH_C hx² tx² => case ys¹⁸ of {LH_C hy² ty² => [LH_C f²(hx², hy²) zipWith_lh_₁(f², tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 1957
//│ [LH_N]: 2641 --->
//│ 	case xs¹⁸ of {LH_C hx² tx² => case ys¹⁸ of {LH_C hy² ty² => [LH_C f²(hx², hy²) zipWith_lh_₁(f², tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 1957
//│ [LH_C h²⁵ mappend_lh_₂(t²⁵, ys²¹)]: 2687 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_N]: 2702 --->
//│ 	case _lh_printTour_LH_C_1¹ of {LH_N  => pp⁰(take_lz_lh_₁(_lh_printTour_LH_C_0¹, depthSearch_lh_₁(root_lh_₁(_lh_printTour_LH_C_0⁰), grow_lh_₁, isFinished_lh_₁)))}: 2907
//│ [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)]: 2733 --->
//│ 	case xs¹⁹ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₄(t²², ys¹⁹)] | LH_N  => ys¹⁹}: 2574
//│ [LH_N]: 2776 --->
//│ 	case ls⁹ of {LH_C h²⁹ t²⁹ => (1 + length_lh_₁(t²⁹)) | LH_N  => 0}: 2922
//│ [LH_N]: 2801 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C ' ' [LH_N]]: 2802 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C 'h' [LH_C ' ' [LH_N]]]: 2803 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]: 2804 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]: 2805 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]: 2806 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]: 2807 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]: 2808 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]: 2809 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]: 2810 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]: 2811 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]: 2812 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]: 2813 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]: 2814 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]: 2815 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]: 2816 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C 'i' [LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]: 2817 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C 'n' [LH_C 'i' [LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]: 2818 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C 'K' [LH_C 'n' [LH_C 'i' [LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]: 2819 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_C '|' [LH_C 'K' [LH_C 'n' [LH_C 'i' [LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]: 2820 --->
//│ 	case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677
//│ [LH_N]: 2847 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C '|' [LH_N]]: 2848 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 's' [LH_C '|' [LH_N]]]: 2849 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]: 2850 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]: 2851 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]: 2852 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]: 2853 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]: 2854 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]: 2855 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]: 2856 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]: 2857 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]: 2858 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]: 2859 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]: 2860 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]: 2861 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]: 2862 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 'k' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]: 2863 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 'c' [LH_C 'k' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]: 2864 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]: 2865 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C 'b' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]: 2866 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ [LH_C ' ' [LH_C 'b' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]: 2867 --->
//│ 	case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => (1 + length_lh_₆(t⁰)) | LH_N  => 0}: 141 --->
//│ 	[LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 153
//│ 	[LH_N]: 158
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if canMove_lh_₁(_lh_possibleMoves_arg1⁰, _lh_listcomp_fun_ls_h⁰) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | LH_N  => [LH_N]}: 159 --->
//│ 	[LH_N]: 170
//│ 	[LH_C [RD] [LH_N]]: 171
//│ 	[LH_C [RU] [LH_C [RD] [LH_N]]]: 172
//│ 	[LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]: 173
//│ 	[LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]: 174
//│ 	[LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]: 175
//│ 	[LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]: 176
//│ 	[LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]: 177
//│ 	[LH_C [UL] [LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]]: 178
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if canMove_lh_₁(_lh_possibleMoves_arg1¹, _lh_listcomp_fun_ls_h¹) then [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | LH_N  => [LH_N]}: 216 --->
//│ 	[LH_N]: 227
//│ 	[LH_C [RD] [LH_N]]: 228
//│ 	[LH_C [RU] [LH_C [RD] [LH_N]]]: 229
//│ 	[LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]: 230
//│ 	[LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]: 231
//│ 	[LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]: 232
//│ 	[LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]: 233
//│ 	[LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]: 234
//│ 	[LH_C [UL] [LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]]: 235
//│ case ls¹ of {LH_C h¹ t¹ => [LH_C f⁰(h¹) map_lh_₃(f⁰, t¹)] | LH_N  => [LH_N]}: 250 --->
//│ 	[LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 210
//│ 	[LH_N]: 215
//│ case ls² of {LH_C h² t² => (1 + length_lh_₅(t²)) | LH_N  => 0}: 441 --->
//│ 	[LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 453
//│ 	[LH_N]: 458
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if canMove_lh_₁(_lh_possibleMoves_arg1², _lh_listcomp_fun_ls_h²) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => [LH_N]}: 459 --->
//│ 	[LH_N]: 470
//│ 	[LH_C [RD] [LH_N]]: 471
//│ 	[LH_C [RU] [LH_C [RD] [LH_N]]]: 472
//│ 	[LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]: 473
//│ 	[LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]: 474
//│ 	[LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]: 475
//│ 	[LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]: 476
//│ 	[LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]: 477
//│ 	[LH_C [UL] [LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]]: 478
//│ case xs⁰ of {LH_C h³ t³ => [LH_C h³ mappend_lh_₂₀(t³, ys⁰)] | LH_N  => ys⁰}: 502 --->
//│ 	[LH_C h⁴ mappend_lh_₁₉(t⁴, ys¹)]: 512
//│ 	[LH_N]: 910
//│ 	[LH_C _lh_quickSortIntChessSet_LH_C_0⁰ [LH_N]]: 911
//│ case ls³ of {LH_C h⁵ t⁵ => (1 + length_lh_₄(t⁵)) | LH_N  => 0}: 571 --->
//│ 	[LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 583
//│ 	[LH_N]: 588
//│ case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => if canMove_lh_₁(_lh_possibleMoves_arg1³, _lh_listcomp_fun_ls_h⁴) then [LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴) | LH_N  => [LH_N]}: 589 --->
//│ 	[LH_N]: 600
//│ 	[LH_C [RD] [LH_N]]: 601
//│ 	[LH_C [RU] [LH_C [RD] [LH_N]]]: 602
//│ 	[LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]: 603
//│ 	[LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]: 604
//│ 	[LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]: 605
//│ 	[LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]: 606
//│ 	[LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]: 607
//│ 	[LH_C [UL] [LH_C [UR] [LH_C [DL] [LH_C [DR] [LH_C [LU] [LH_C [LD] [LH_C [RU] [LH_C [RD] [LH_N]]]]]]]]]: 608
//│ case xs² of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁₈(t⁶, ys²)] | LH_N  => ys²}: 837 --->
//│ 	[LH_C [LH_P2 hx⁰ hy⁰] zip_lz_nl_lh_₂(tx⁰, ty⁰)]: 1776
//│ 	[LH_N]: 1777
//│ 	[LH_N]: 1779
//│ case _lh_listcomp_fun_ls_h⁷ of {LH_P2 _lh_singleDescend_LH_P2_0⁰ _lh_singleDescend_LH_P2_1⁰ => if (_lh_singleDescend_LH_P2_0⁰ == 1) then [LH_C _lh_singleDescend_LH_P2_1⁰ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷) | _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)}: 962 --->
//│ 	[LH_P2 length_lh_₆(possibleMoves_lh_₄(deleteFirst_lh_₄(_lh_listcomp_fun_ls_h³))) _lh_listcomp_fun_ls_h³]: 537
//│ case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => case _lh_listcomp_fun_ls_h⁷ of {LH_P2 _lh_singleDescend_LH_P2_0⁰ _lh_singleDescend_LH_P2_1⁰ => if (_lh_singleDescend_LH_P2_0⁰ == 1) then [LH_C _lh_singleDescend_LH_P2_1⁰ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷) | _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)} | LH_N  => [LH_N]}: 964 --->
//│ 	[LH_C [LH_P2 length_lh_₆(possibleMoves_lh_₄(deleteFirst_lh_₄(_lh_listcomp_fun_ls_h³))) _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 541
//│ 	[LH_N]: 542
//│ case xs³ of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₇(t⁹, ys³)] | LH_N  => ys³}: 1061 --->
//│ 	[LH_C [LH_P2 hx¹ hy¹] zip_lz_nl_lh_₁(tx¹, ty¹)]: 1932
//│ 	[LH_N]: 1933
//│ 	[LH_N]: 1935
//│ case xs⁴ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₆(t¹⁰, ys⁴)] | LH_N  => ys⁴}: 1073 --->
//│ 	[LH_C h¹¹ mappend_lh_₁₅(t¹¹, ys⁵)]: 1083
//│ 	[LH_N]: 2052
//│ 	[LH_C _lh_quickSortIntInt_LH_C_0⁰ [LH_N]]: 2053
//│ case xs⁶ of {LH_C h¹² t¹² => [LH_C h¹² mappend_lh_₁₄(t¹², ys⁶)] | LH_N  => ys⁶}: 1151 --->
//│ 	[LH_N]: 2143
//│ 	[LH_C '*' [LH_N]]: 2144
//│ case xs⁸ of {LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₁₂(t¹⁴, ys⁸)] | LH_N  => ys⁸}: 1175 --->
//│ 	[LH_N]: 2356
//│ 	[LH_C '*' [LH_N]]: 2357
//│ case xs¹⁰ of {LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₁₀(t¹⁶, ys¹⁰)] | LH_N  => ys¹⁰}: 1199 --->
//│ 	[LH_N]: 2398
//│ 	[LH_C '|' [LH_N]]: 2399
//│ 	[LH_C '*' [LH_C '|' [LH_N]]]: 2400
//│ case xs¹¹ of {LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ mappend_lh_₉(t¹⁷, ys¹¹)] | LH_N  => ys¹¹}: 1281 --->
//│ 	[LH_N]: 813
//│ 	[LH_C _lh_copy_arg2² copy_lh_₂((_lh_copy_arg1² - 1), _lh_copy_arg2²)]: 824
//│ 	[LH_C h¹² mappend_lh_₁₄(t¹², ys⁶)]: 1149
//│ case xs¹² of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₈(t¹⁸, ys¹²)] | LH_N  => ys¹²}: 1293 --->
//│ 	[LH_N]: 2181
//│ 	[LH_C '|' [LH_N]]: 2182
//│ 	[LH_C '*' [LH_C '|' [LH_N]]]: 2183
//│ case xs¹³ of {LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₇(t¹⁹, ys¹³)] | LH_N  => ys¹³}: 1305 --->
//│ 	[LH_C h¹⁵ mappend_lh_₁₁(t¹⁵, ys⁹)]: 1185
//│ 	[LH_N]: 2282
//│ 	[LH_C '|' [LH_N]]: 2283
//│ case xs¹⁴ of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₆(t²⁰, ys¹⁴)] | LH_N  => ys¹⁴}: 1317 --->
//│ 	[LH_N]: 773
//│ 	[LH_C _lh_copy_arg2⁰ copy_lh_₄((_lh_copy_arg1⁰ - 1), _lh_copy_arg2⁰)]: 784
//│ 	[LH_C h¹⁴ mappend_lh_₁₂(t¹⁴, ys⁸)]: 1173
//│ case xs¹⁵ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₅(t²¹, ys¹⁵)] | LH_N  => ys¹⁵}: 1364 --->
//│ 	[LH_N]: 793
//│ 	[LH_C _lh_copy_arg2¹ copy_lh_₃((_lh_copy_arg1¹ - 1), _lh_copy_arg2¹)]: 804
//│ 	[LH_C h¹³ mappend_lh_₁₃(t¹³, ys⁷)]: 1161
//│ case force⁰(xs¹⁶) of {LH_C hx⁰ tx⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lz_nl_lh_₂(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 1778 --->
//│ 	[LH_C x⁰ repeat_lh_₂(x⁰)]: 1788
//│ case force⁰(xs¹⁷) of {LH_C hx¹ tx¹ => [LH_C [LH_P2 hx¹ hy¹] zip_lz_nl_lh_₁(tx¹, ty¹)] | LH_N  => [LH_N]}: 1934 --->
//│ 	[LH_C x¹ repeat_lh_₁(x¹)]: 1917
//│ case ys¹⁷ of {LH_C hy¹ ty¹ => case force⁰(xs¹⁷) of {LH_C hx¹ tx¹ => [LH_C [LH_P2 hx¹ hy¹] zip_lz_nl_lh_₁(tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 1936 --->
//│ 	[LH_C f²(hx², hy²) zipWith_lh_₁(f², tx², ty²)]: 1953
//│ 	[LH_N]: 1954
//│ 	[LH_N]: 1956
//│ case ys¹⁸ of {LH_C hy² ty² => [LH_C f²(hx², hy²) zipWith_lh_₁(f², tx², ty²)] | LH_N  => [LH_N]}: 1955 --->
//│ 	[LH_N]: 1966
//│ 	[LH_C _lh_copy_arg2³ copy_lh_₁((_lh_copy_arg1³ - 1), _lh_copy_arg2³)]: 1977
//│ case xs¹⁸ of {LH_C hx² tx² => case ys¹⁸ of {LH_C hy² ty² => [LH_C f²(hx², hy²) zipWith_lh_₁(f², tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 1957 --->
//│ 	[LH_C [LH_P2 _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_h¹²] _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t¹²)]: 2627
//│ 	[LH_N]: 2641
//│ case xs¹⁹ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₄(t²², ys¹⁹)] | LH_N  => ys¹⁹}: 2574 --->
//│ 	[LH_C h¹⁶ mappend_lh_₁₀(t¹⁶, ys¹⁰)]: 1197
//│ 	[LH_C h¹⁷ mappend_lh_₉(t¹⁷, ys¹¹)]: 1279
//│ 	[LH_C h¹⁸ mappend_lh_₈(t¹⁸, ys¹²)]: 1291
//│ 	[LH_C h¹⁹ mappend_lh_₇(t¹⁹, ys¹³)]: 1303
//│ 	[LH_C h²⁰ mappend_lh_₆(t²⁰, ys¹⁴)]: 1315
//│ 	[LH_C h²¹ mappend_lh_₅(t²¹, ys¹⁵)]: 1362
//│ 	[LH_N]: 2130
//│ 	[LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)]: 2733
//│ case force⁰(ls⁶) of {LH_C h²³ t²³ => [LH_C h²³ take_lz_lh_₁((n⁰ - 1), t²³)] | LH_N  => [LH_N]}: 2597 --->
//│ 	[LH_N]: 2499
//│ 	[LH_C inquireFront_lh_₁(_lh_depthSearch_arg1⁰) depthSearch_lh_₁(removeFront_lh_₁(_lh_depthSearch_arg1⁰), _lh_depthSearch_arg2⁰, _lh_depthSearch_arg3⁰)]: 2519
//│ case _lh_listcomp_fun_para¹² of {LH_C _lh_listcomp_fun_ls_h¹² _lh_listcomp_fun_ls_t¹² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_h¹²] _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t¹²)] | LH_N  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)}: 2631 --->
//│ 	[LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)]: 2017
//│ 	[LH_N]: 2018
//│ case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => let _lh_listcomp_fun¹² = (fun _lh_listcomp_fun_para¹² -> case _lh_listcomp_fun_para¹² of {LH_C _lh_listcomp_fun_ls_h¹² _lh_listcomp_fun_ls_t¹² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_h¹²] _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t¹²)] | LH_N  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)})
//│ in _lh_listcomp_fun¹²(enumFromTo_lh_₁(1, _lh_root_arg1⁰)) | LH_N  => [LH_N]}: 2642 --->
//│ 	[LH_C a⁰ enumFromTo_lh_₂((a⁰ + 1), b⁰)]: 1997
//│ 	[LH_N]: 1998
//│ case xs²⁰ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys²⁰)] | LH_N  => ys²⁰}: 2677 --->
//│ 	[LH_N]: 2801
//│ 	[LH_C ' ' [LH_N]]: 2802
//│ 	[LH_C 'h' [LH_C ' ' [LH_N]]]: 2803
//│ 	[LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]: 2804
//│ 	[LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]: 2805
//│ 	[LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]: 2806
//│ 	[LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]: 2807
//│ 	[LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]: 2808
//│ 	[LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]: 2809
//│ 	[LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]: 2810
//│ 	[LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]: 2811
//│ 	[LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]: 2812
//│ 	[LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]: 2813
//│ 	[LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]: 2814
//│ 	[LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]: 2815
//│ 	[LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]: 2816
//│ 	[LH_C 'i' [LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]: 2817
//│ 	[LH_C 'n' [LH_C 'i' [LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]: 2818
//│ 	[LH_C 'K' [LH_C 'n' [LH_C 'i' [LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]: 2819
//│ 	[LH_C '|' [LH_C 'K' [LH_C 'n' [LH_C 'i' [LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]: 2820
//│ case xs²² of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys²²)] | LH_N  => ys²²}: 2735 --->
//│ 	[LH_C h²⁵ mappend_lh_₂(t²⁵, ys²¹)]: 2687
//│ 	[LH_N]: 2847
//│ 	[LH_C '|' [LH_N]]: 2848
//│ 	[LH_C 's' [LH_C '|' [LH_N]]]: 2849
//│ 	[LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]: 2850
//│ 	[LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]: 2851
//│ 	[LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]: 2852
//│ 	[LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]: 2853
//│ 	[LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]: 2854
//│ 	[LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]: 2855
//│ 	[LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]: 2856
//│ 	[LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]: 2857
//│ 	[LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]: 2858
//│ 	[LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]: 2859
//│ 	[LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]: 2860
//│ 	[LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]: 2861
//│ 	[LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]: 2862
//│ 	[LH_C 'k' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]: 2863
//│ 	[LH_C 'c' [LH_C 'k' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]: 2864
//│ 	[LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]: 2865
//│ 	[LH_C 'b' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]: 2866
//│ 	[LH_C ' ' [LH_C 'b' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]: 2867
//│ case _lh_pp_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_pp_LH_C_0⁰ _lh_pp_LH_C_1⁰ => case _lh_pp_LH_C_0⁰ of {LH_P2 _lh_pp_LH_P2_0⁰ _lh_pp_LH_P2_1⁰ => mappend_lh_₄(mappend_lh_₁(mappend_lh_₂(mappend_lh_₃([LH_C '|' [LH_C 'K' [LH_C 'n' [LH_C 'i' [LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]], string_of_int⁰(_lh_pp_LH_P2_0⁰)), [LH_C ' ' [LH_C 'b' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 's' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]), showChessSet_lh_₁(_lh_pp_LH_P2_1⁰)), pp⁰(_lh_pp_LH_C_1⁰))}}: 2880 --->
//│ 	[LH_C h²³ take_lz_lh_₁((n⁰ - 1), t²³)]: 2595
//│ 	[LH_N]: 2596
//│ 	[LH_N]: 2598
//│ case _lh_printTour_LH_C_1¹ of {LH_N  => pp⁰(take_lz_lh_₁(_lh_printTour_LH_C_0¹, depthSearch_lh_₁(root_lh_₁(_lh_printTour_LH_C_0⁰), grow_lh_₁, isFinished_lh_₁)))}: 2907 --->
//│ 	[LH_N]: 2702
//│ case ls⁹ of {LH_C h²⁹ t²⁹ => (1 + length_lh_₁(t²⁹)) | LH_N  => 0}: 2922 --->
//│ 	[LH_C h²² mappend_lh_₄(t²², ys¹⁹)]: 2572
//│ 	[LH_N]: 2776
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testKnights_nofib_lh_₁(primId⁰([LH_C [LH_C '8' [LH_N]] [LH_C [LH_C '1' [LH_N]] [LH_N]]]))
//│ def addAllFront_lh_₁(_lh_addAllFront_arg1¹, _lh_addAllFront_arg2¹) = mappend_lh_₁₇(_lh_addAllFront_arg1¹, _lh_addAllFront_arg2¹)
//│ def addAllFront_lh_₂(_lh_addAllFront_arg1⁰, _lh_addAllFront_arg2⁰) = mappend_lh_₁₈(_lh_addAllFront_arg1⁰, _lh_addAllFront_arg2⁰)
//│ def addPiece_lh_₁(_lh_addPiece_arg1⁰, _lh_addPiece_arg2⁰) = case _lh_addPiece_arg2⁰ of {
//│ 	Board _lh_addPiece_Board_0⁰ _lh_addPiece_Board_1⁰ _lh_addPiece_Board_2⁰ _lh_addPiece_Board_3⁰ => [Board _lh_addPiece_Board_0⁰ (_lh_addPiece_Board_1⁰ + 1) _lh_addPiece_Board_2⁰ [LH_C _lh_addPiece_arg1⁰ _lh_addPiece_Board_3⁰]]}
//│ def allDescend_lh_₁(_lh_allDescend_arg1⁰) = map_lh_₃(moveKnight_lh_₁(_lh_allDescend_arg1⁰), possibleMoves_lh_₃(_lh_allDescend_arg1⁰))
//│ def assignMoveNo_lh_₁(_lh_assignMoveNo_arg1⁰, _lh_assignMoveNo_arg2⁰, _lh_assignMoveNo_arg3⁰) = case _lh_assignMoveNo_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_assignMoveNo_LH_C_0⁰ _lh_assignMoveNo_LH_C_1⁰ => case _lh_assignMoveNo_LH_C_0⁰ of {
//│ 		LH_P2 _lh_assignMoveNo_LH_P2_0⁰ _lh_assignMoveNo_LH_P2_1⁰ => [LH_C [LH_P2 (((_lh_assignMoveNo_LH_P2_1⁰ - 1) * _lh_assignMoveNo_arg2⁰) + _lh_assignMoveNo_LH_P2_0⁰) _lh_assignMoveNo_arg3⁰] assignMoveNo_lh_₁(_lh_assignMoveNo_LH_C_1⁰, _lh_assignMoveNo_arg2⁰, (_lh_assignMoveNo_arg3⁰ - 1))]}}
//│ def canJumpFirst_lh_₁(_lh_canJumpFirst_arg1⁰) = canMoveTo_lh_₁(firstPiece_lh_₂(_lh_canJumpFirst_arg1⁰), deleteFirst_lh_₁(_lh_canJumpFirst_arg1⁰))
//│ def canJumpFirst_lh_₂(_lh_canJumpFirst_arg1¹) = canMoveTo_lh_₂(firstPiece_lh_₃(_lh_canJumpFirst_arg1¹), deleteFirst_lh_₂(_lh_canJumpFirst_arg1¹))
//│ def canMoveTo_lh_₁(_lh_canMoveTo_arg1⁰, _lh_canMoveTo_arg2⁰) = case _lh_canMoveTo_arg1⁰ of {
//│ 	LH_P2 _lh_canMoveTo_LH_P2_0⁰ _lh_canMoveTo_LH_P2_1⁰ => 
//│ 		let sze¹ = sizeBoard_lh_₂(_lh_canMoveTo_arg2⁰)
//│ 		in (((((_lh_canMoveTo_LH_P2_0⁰ >= 1) && (_lh_canMoveTo_LH_P2_0⁰ <= sze¹)) && (_lh_canMoveTo_LH_P2_1⁰ >= 1)) && (_lh_canMoveTo_LH_P2_1⁰ <= sze¹)) && isSquareFree_lh_₁([LH_P2 _lh_canMoveTo_LH_P2_0⁰ _lh_canMoveTo_LH_P2_1⁰], _lh_canMoveTo_arg2⁰))}
//│ def canMoveTo_lh_₂(_lh_canMoveTo_arg1¹, _lh_canMoveTo_arg2¹) = case _lh_canMoveTo_arg1¹ of {
//│ 	LH_P2 _lh_canMoveTo_LH_P2_0¹ _lh_canMoveTo_LH_P2_1¹ => 
//│ 		let sze² = sizeBoard_lh_₃(_lh_canMoveTo_arg2¹)
//│ 		in (((((_lh_canMoveTo_LH_P2_0¹ >= 1) && (_lh_canMoveTo_LH_P2_0¹ <= sze²)) && (_lh_canMoveTo_LH_P2_1¹ >= 1)) && (_lh_canMoveTo_LH_P2_1¹ <= sze²)) && isSquareFree_lh_₂([LH_P2 _lh_canMoveTo_LH_P2_0¹ _lh_canMoveTo_LH_P2_1¹], _lh_canMoveTo_arg2¹))}
//│ def canMove_lh_₁(_lh_canMove_arg1⁰, _lh_canMove_arg2⁰) = canMoveTo_lh_₂(move_lh_₁(_lh_canMove_arg2⁰, lastPiece_lh_₁(_lh_canMove_arg1⁰)), _lh_canMove_arg1⁰)
//│ def copy_lh_₁(_lh_copy_arg1¹, _lh_copy_arg2¹, _lh_floatOutId_0³, _lh_floatOutId_1², _lh_floatOutId_2¹, _lh_floatOutId_3¹) = if (_lh_copy_arg1¹ <= 0) then (fun ys⁸⁴ -> ys⁸⁴) else 
//│ 	let ty² = copy_lh_₁((_lh_copy_arg1¹ - 1), _lh_copy_arg2¹)
//│ 	in let hy² = _lh_copy_arg2¹
//│ 	in let ty³ = zipWith_lh_₁(_lh_floatOutId_0³, _lh_floatOutId_2¹, ty²)
//│ 	in let hy³ = _lh_floatOutId_0³(_lh_floatOutId_1², hy²)
//│ 	in force⁰(_lh_floatOutId_3¹, hy³, ty³)
//│ def copy_lh_₂(_lh_copy_arg1², _lh_copy_arg2², _lh_floatOutId_0⁴) = if (_lh_copy_arg1² <= 0) then _lh_floatOutId_0⁴ else (fun ys¹⁰³ -> (fun _lh_dummy⁵² -> 
//│ 	let t¹³⁹ = copy_lh_₂((_lh_copy_arg1² - 1), _lh_copy_arg2²)
//│ 	in let h¹³⁹ = _lh_copy_arg2²
//│ 	in let t¹⁴⁰ = mappend_lh_₉(t¹³⁹, _lh_floatOutId_0⁴)
//│ 	in let h¹⁴⁰ = h¹³⁹
//│ 	in let t¹⁴¹ = mappend_lh_₄(t¹⁴⁰, ys¹⁰³)
//│ 	in let h¹⁴¹ = h¹⁴⁰
//│ 	in (1 + length_lh_₁(t¹⁴¹))))
//│ def copy_lh_₃(_lh_copy_arg1³, _lh_copy_arg2³, _lh_floatOutId_0⁵) = if (_lh_copy_arg1³ <= 0) then _lh_floatOutId_0⁵ else (fun ys¹⁰⁶ -> (fun _lh_dummy⁵³ -> 
//│ 	let t¹⁴³ = copy_lh_₃((_lh_copy_arg1³ - 1), _lh_copy_arg2³)
//│ 	in let h¹⁴³ = _lh_copy_arg2³
//│ 	in let t¹⁴⁴ = mappend_lh_₅(t¹⁴³, _lh_floatOutId_0⁵)
//│ 	in let h¹⁴⁴ = h¹⁴³
//│ 	in let t¹⁴⁵ = mappend_lh_₄(t¹⁴⁴, ys¹⁰⁶)
//│ 	in let h¹⁴⁵ = h¹⁴⁴
//│ 	in (1 + length_lh_₁(t¹⁴⁵))))
//│ def copy_lh_₄(_lh_copy_arg1⁰, _lh_copy_arg2⁰, _lh_floatOutId_0¹) = if (_lh_copy_arg1⁰ <= 0) then _lh_floatOutId_0¹ else (fun ys⁵ -> (fun _lh_dummy¹⁸ -> 
//│ 	let t²⁴ = copy_lh_₄((_lh_copy_arg1⁰ - 1), _lh_copy_arg2⁰)
//│ 	in let h²⁴ = _lh_copy_arg2⁰
//│ 	in let t²⁵ = mappend_lh_₆(t²⁴, _lh_floatOutId_0¹)
//│ 	in let h²⁵ = h²⁴
//│ 	in let t²⁶ = mappend_lh_₄(t²⁵, ys⁵)
//│ 	in let h²⁶ = h²⁵
//│ 	in (1 + length_lh_₁(t²⁶))))
//│ def createBoard_lh_₁(_lh_createBoard_arg1⁰, _lh_createBoard_arg2⁰) = [Board _lh_createBoard_arg1⁰ 1 _lh_createBoard_arg2⁰ [LH_C _lh_createBoard_arg2⁰ [LH_N]]]
//│ def createQueue_lh_₁ = [LH_N]
//│ def deadEnd_lh_₁(_lh_deadEnd_arg1⁰) = (length_lh_₅(possibleMoves_lh_₂(_lh_deadEnd_arg1⁰)) == 0)
//│ def deleteFirst_lh_₁(_lh_deleteFirst_arg1²) = case _lh_deleteFirst_arg1² of {
//│ 	Board _lh_deleteFirst_Board_0² _lh_deleteFirst_Board_1² _lh_deleteFirst_Board_2² _lh_deleteFirst_Board_3² => 
//│ 		let ts'² = myInit_lh_₁(_lh_deleteFirst_Board_3²)
//│ 		in [Board _lh_deleteFirst_Board_0² (_lh_deleteFirst_Board_1² - 1) myLast_lh_₁(ts'²) ts'²]}
//│ def deleteFirst_lh_₂(_lh_deleteFirst_arg1⁰) = case _lh_deleteFirst_arg1⁰ of {
//│ 	Board _lh_deleteFirst_Board_0⁰ _lh_deleteFirst_Board_1⁰ _lh_deleteFirst_Board_2⁰ _lh_deleteFirst_Board_3⁰ => 
//│ 		let ts'⁰ = myInit_lh_₂(_lh_deleteFirst_Board_3⁰)
//│ 		in [Board _lh_deleteFirst_Board_0⁰ (_lh_deleteFirst_Board_1⁰ - 1) myLast_lh_₂(ts'⁰) ts'⁰]}
//│ def deleteFirst_lh_₃(_lh_deleteFirst_arg1³) = case _lh_deleteFirst_arg1³ of {
//│ 	Board _lh_deleteFirst_Board_0³ _lh_deleteFirst_Board_1³ _lh_deleteFirst_Board_2³ _lh_deleteFirst_Board_3³ => 
//│ 		let ts'³ = myInit_lh_₃(_lh_deleteFirst_Board_3³)
//│ 		in [Board _lh_deleteFirst_Board_0³ (_lh_deleteFirst_Board_1³ - 1) myLast_lh_₃(ts'³) ts'³]}
//│ def deleteFirst_lh_₄(_lh_deleteFirst_arg1¹) = case _lh_deleteFirst_arg1¹ of {
//│ 	Board _lh_deleteFirst_Board_0¹ _lh_deleteFirst_Board_1¹ _lh_deleteFirst_Board_2¹ _lh_deleteFirst_Board_3¹ => 
//│ 		let ts'¹ = myInit_lh_₃(_lh_deleteFirst_Board_3¹)
//│ 		in [Board _lh_deleteFirst_Board_0¹ (_lh_deleteFirst_Board_1¹ - 1) myLast_lh_₃(ts'¹) ts'¹]}
//│ def depthSearch_lh_₁(_lh_depthSearch_arg1⁰, _lh_depthSearch_arg2⁰, _lh_depthSearch_arg3⁰) = if 
//│ 	let _lh_matchIdent⁰ = _lh_depthSearch_arg1⁰
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]} then lazy⁰((fun n¹ -> (fun pp⁰ -> (fun _lh_dummy¹⁹ -> 0)))) else if _lh_depthSearch_arg3⁰(inquireFront_lh_₂(_lh_depthSearch_arg1⁰)) then lazy⁰(
//│ 	let t²⁸ = depthSearch_lh_₁(removeFront_lh_₁(_lh_depthSearch_arg1⁰), _lh_depthSearch_arg2⁰, _lh_depthSearch_arg3⁰)
//│ 	in let h²⁸ = inquireFront_lh_₁(_lh_depthSearch_arg1⁰)
//│ 	in (fun n² -> 
//│ 		let _lh_pp_LH_C_1⁰ = take_lz_lh_₁((n² - 1), t²⁸)
//│ 		in let _lh_pp_LH_C_0⁰ = h²⁸
//│ 		in (fun pp¹ -> case _lh_pp_LH_C_0⁰ of {
//│ 			LH_P2 _lh_pp_LH_P2_0⁰ _lh_pp_LH_P2_1⁰ => mappend_lh_₄(mappend_lh_₁(mappend_lh_₂(mappend_lh_₃(
//│ 				let t²⁹ = 	
//│ 					let t³⁰ = 	
//│ 						let t³¹ = 	
//│ 							let t³² = 	
//│ 								let t³³ = 	
//│ 									let t³⁴ = 	
//│ 										let t³⁵ = 	
//│ 											let t³⁶ = 	
//│ 												let t³⁷ = 	
//│ 													let t³⁸ = 	
//│ 														let t³⁹ = 	
//│ 															let t⁴⁰ = 	
//│ 																let t⁴¹ = 	
//│ 																	let t⁴² = 	
//│ 																		let t⁴³ = 	
//│ 																			let t⁴⁴ = 	
//│ 																				let t⁴⁵ = 	
//│ 																					let t⁴⁶ = 	
//│ 																						let t⁴⁷ = (fun ys¹⁰ -> ys¹⁰)
//│ 																						in let h²⁹ = ' '
//│ 																						in (fun ys¹¹ -> [LH_C h²⁹ mappend_lh_₃(t⁴⁷, ys¹¹)])
//│ 																					in let h³⁰ = 'h'
//│ 																					in (fun ys¹² -> [LH_C h³⁰ mappend_lh_₃(t⁴⁶, ys¹²)])
//│ 																				in let h³¹ = 't'
//│ 																				in (fun ys¹³ -> [LH_C h³¹ mappend_lh_₃(t⁴⁵, ys¹³)])
//│ 																			in let h³² = 'i'
//│ 																			in (fun ys¹⁴ -> [LH_C h³² mappend_lh_₃(t⁴⁴, ys¹⁴)])
//│ 																		in let h³³ = 'w'
//│ 																		in (fun ys¹⁵ -> [LH_C h³³ mappend_lh_₃(t⁴³, ys¹⁵)])
//│ 																	in let h³⁴ = ' '
//│ 																	in (fun ys¹⁶ -> [LH_C h³⁴ mappend_lh_₃(t⁴², ys¹⁶)])
//│ 																in let h³⁵ = 'r'
//│ 																in (fun ys¹⁷ -> [LH_C h³⁵ mappend_lh_₃(t⁴¹, ys¹⁷)])
//│ 															in let h³⁶ = 'u'
//│ 															in (fun ys¹⁸ -> [LH_C h³⁶ mappend_lh_₃(t⁴⁰, ys¹⁸)])
//│ 														in let h³⁷ = 'o'
//│ 														in (fun ys¹⁹ -> [LH_C h³⁷ mappend_lh_₃(t³⁹, ys¹⁹)])
//│ 													in let h³⁸ = 't'
//│ 													in (fun ys²⁰ -> [LH_C h³⁸ mappend_lh_₃(t³⁸, ys²⁰)])
//│ 												in let h³⁹ = ' '
//│ 												in (fun ys²¹ -> [LH_C h³⁹ mappend_lh_₃(t³⁷, ys²¹)])
//│ 											in let h⁴⁰ = 's'
//│ 											in (fun ys²² -> [LH_C h⁴⁰ mappend_lh_₃(t³⁶, ys²²)])
//│ 										in let h⁴¹ = 't'
//│ 										in (fun ys²³ -> [LH_C h⁴¹ mappend_lh_₃(t³⁵, ys²³)])
//│ 									in let h⁴² = 'h'
//│ 									in (fun ys²⁴ -> [LH_C h⁴² mappend_lh_₃(t³⁴, ys²⁴)])
//│ 								in let h⁴³ = 'g'
//│ 								in (fun ys²⁵ -> [LH_C h⁴³ mappend_lh_₃(t³³, ys²⁵)])
//│ 							in let h⁴⁴ = 'i'
//│ 							in (fun ys²⁶ -> [LH_C h⁴⁴ mappend_lh_₃(t³², ys²⁶)])
//│ 						in let h⁴⁵ = 'n'
//│ 						in (fun ys²⁷ -> [LH_C h⁴⁵ mappend_lh_₃(t³¹, ys²⁷)])
//│ 					in let h⁴⁶ = 'K'
//│ 					in (fun ys²⁸ -> [LH_C h⁴⁶ mappend_lh_₃(t³⁰, ys²⁸)])
//│ 				in let h⁴⁷ = '|'
//│ 				in (fun ys²⁹ -> [LH_C h⁴⁷ mappend_lh_₃(t²⁹, ys²⁹)]), string_of_int⁰(_lh_pp_LH_P2_0⁰)), 
//│ 				let t⁴⁸ = 	
//│ 					let t⁴⁹ = 	
//│ 						let t⁵⁰ = 	
//│ 							let t⁵¹ = 	
//│ 								let t⁵² = 	
//│ 									let t⁵³ = 	
//│ 										let t⁵⁴ = 	
//│ 											let t⁵⁵ = 	
//│ 												let t⁵⁶ = 	
//│ 													let t⁵⁷ = 	
//│ 														let t⁵⁸ = 	
//│ 															let t⁵⁹ = 	
//│ 																let t⁶⁰ = 	
//│ 																	let t⁶¹ = 	
//│ 																		let t⁶² = 	
//│ 																			let t⁶³ = 	
//│ 																				let t⁶⁴ = 	
//│ 																					let t⁶⁵ = 	
//│ 																						let t⁶⁶ = 	
//│ 																							let t⁶⁷ = (fun ys³⁰ -> ys³⁰)
//│ 																							in let h⁴⁸ = '|'
//│ 																							in (fun ys³¹ -> 
//│ 																								let t⁶⁸ = mappend_lh_₁(t⁶⁷, ys³¹)
//│ 																								in let h⁴⁹ = h⁴⁸
//│ 																								in (fun ys³² -> 
//│ 																									let t⁶⁹ = mappend_lh_₄(t⁶⁸, ys³²)
//│ 																									in let h⁵⁰ = h⁴⁹
//│ 																									in (fun _lh_dummy²⁰ -> (1 + length_lh_₁(t⁶⁹)))))
//│ 																						in let h⁵¹ = 's'
//│ 																						in (fun ys³³ -> 
//│ 																							let t⁷⁰ = mappend_lh_₁(t⁶⁶, ys³³)
//│ 																							in let h⁵² = h⁵¹
//│ 																							in (fun ys³⁴ -> 
//│ 																								let t⁷¹ = mappend_lh_₄(t⁷⁰, ys³⁴)
//│ 																								in let h⁵³ = h⁵²
//│ 																								in (fun _lh_dummy²¹ -> (1 + length_lh_₁(t⁷¹)))))
//│ 																					in let h⁵⁴ = 'e'
//│ 																					in (fun ys³⁵ -> 
//│ 																						let t⁷² = mappend_lh_₁(t⁶⁵, ys³⁵)
//│ 																						in let h⁵⁵ = h⁵⁴
//│ 																						in (fun ys³⁶ -> 
//│ 																							let t⁷³ = mappend_lh_₄(t⁷², ys³⁶)
//│ 																							in let h⁵⁶ = h⁵⁵
//│ 																							in (fun _lh_dummy²² -> (1 + length_lh_₁(t⁷³)))))
//│ 																				in let h⁵⁷ = 'v'
//│ 																				in (fun ys³⁷ -> 
//│ 																					let t⁷⁴ = mappend_lh_₁(t⁶⁴, ys³⁷)
//│ 																					in let h⁵⁸ = h⁵⁷
//│ 																					in (fun ys³⁸ -> 
//│ 																						let t⁷⁵ = mappend_lh_₄(t⁷⁴, ys³⁸)
//│ 																						in let h⁵⁹ = h⁵⁸
//│ 																						in (fun _lh_dummy²³ -> (1 + length_lh_₁(t⁷⁵)))))
//│ 																			in let h⁶⁰ = 'o'
//│ 																			in (fun ys³⁹ -> 
//│ 																				let t⁷⁶ = mappend_lh_₁(t⁶³, ys³⁹)
//│ 																				in let h⁶¹ = h⁶⁰
//│ 																				in (fun ys⁴⁰ -> 
//│ 																					let t⁷⁷ = mappend_lh_₄(t⁷⁶, ys⁴⁰)
//│ 																					in let h⁶² = h⁶¹
//│ 																					in (fun _lh_dummy²⁴ -> (1 + length_lh_₁(t⁷⁷)))))
//│ 																		in let h⁶³ = 'm'
//│ 																		in (fun ys⁴¹ -> 
//│ 																			let t⁷⁸ = mappend_lh_₁(t⁶², ys⁴¹)
//│ 																			in let h⁶⁴ = h⁶³
//│ 																			in (fun ys⁴² -> 
//│ 																				let t⁷⁹ = mappend_lh_₄(t⁷⁸, ys⁴²)
//│ 																				in let h⁶⁵ = h⁶⁴
//│ 																				in (fun _lh_dummy²⁵ -> (1 + length_lh_₁(t⁷⁹)))))
//│ 																	in let h⁶⁶ = ' '
//│ 																	in (fun ys⁴³ -> 
//│ 																		let t⁸⁰ = mappend_lh_₁(t⁶¹, ys⁴³)
//│ 																		in let h⁶⁷ = h⁶⁶
//│ 																		in (fun ys⁴⁴ -> 
//│ 																			let t⁸¹ = mappend_lh_₄(t⁸⁰, ys⁴⁴)
//│ 																			in let h⁶⁸ = h⁶⁷
//│ 																			in (fun _lh_dummy²⁶ -> (1 + length_lh_₁(t⁸¹)))))
//│ 																in let h⁶⁹ = 'g'
//│ 																in (fun ys⁴⁵ -> 
//│ 																	let t⁸² = mappend_lh_₁(t⁶⁰, ys⁴⁵)
//│ 																	in let h⁷⁰ = h⁶⁹
//│ 																	in (fun ys⁴⁶ -> 
//│ 																		let t⁸³ = mappend_lh_₄(t⁸², ys⁴⁶)
//│ 																		in let h⁷¹ = h⁷⁰
//│ 																		in (fun _lh_dummy²⁷ -> (1 + length_lh_₁(t⁸³)))))
//│ 															in let h⁷² = 'n'
//│ 															in (fun ys⁴⁷ -> 
//│ 																let t⁸⁴ = mappend_lh_₁(t⁵⁹, ys⁴⁷)
//│ 																in let h⁷³ = h⁷²
//│ 																in (fun ys⁴⁸ -> 
//│ 																	let t⁸⁵ = mappend_lh_₄(t⁸⁴, ys⁴⁸)
//│ 																	in let h⁷⁴ = h⁷³
//│ 																	in (fun _lh_dummy²⁸ -> (1 + length_lh_₁(t⁸⁵)))))
//│ 														in let h⁷⁵ = 'i'
//│ 														in (fun ys⁴⁹ -> 
//│ 															let t⁸⁶ = mappend_lh_₁(t⁵⁸, ys⁴⁹)
//│ 															in let h⁷⁶ = h⁷⁵
//│ 															in (fun ys⁵⁰ -> 
//│ 																let t⁸⁷ = mappend_lh_₄(t⁸⁶, ys⁵⁰)
//│ 																in let h⁷⁷ = h⁷⁶
//│ 																in (fun _lh_dummy²⁹ -> (1 + length_lh_₁(t⁸⁷)))))
//│ 													in let h⁷⁸ = 'k'
//│ 													in (fun ys⁵¹ -> 
//│ 														let t⁸⁸ = mappend_lh_₁(t⁵⁷, ys⁵¹)
//│ 														in let h⁷⁹ = h⁷⁸
//│ 														in (fun ys⁵² -> 
//│ 															let t⁸⁹ = mappend_lh_₄(t⁸⁸, ys⁵²)
//│ 															in let h⁸⁰ = h⁷⁹
//│ 															in (fun _lh_dummy³⁰ -> (1 + length_lh_₁(t⁸⁹)))))
//│ 												in let h⁸¹ = 'c'
//│ 												in (fun ys⁵³ -> 
//│ 													let t⁹⁰ = mappend_lh_₁(t⁵⁶, ys⁵³)
//│ 													in let h⁸² = h⁸¹
//│ 													in (fun ys⁵⁴ -> 
//│ 														let t⁹¹ = mappend_lh_₄(t⁹⁰, ys⁵⁴)
//│ 														in let h⁸³ = h⁸²
//│ 														in (fun _lh_dummy³¹ -> (1 + length_lh_₁(t⁹¹)))))
//│ 											in let h⁸⁴ = 'a'
//│ 											in (fun ys⁵⁵ -> 
//│ 												let t⁹² = mappend_lh_₁(t⁵⁵, ys⁵⁵)
//│ 												in let h⁸⁵ = h⁸⁴
//│ 												in (fun ys⁵⁶ -> 
//│ 													let t⁹³ = mappend_lh_₄(t⁹², ys⁵⁶)
//│ 													in let h⁸⁶ = h⁸⁵
//│ 													in (fun _lh_dummy³² -> (1 + length_lh_₁(t⁹³)))))
//│ 										in let h⁸⁷ = 'r'
//│ 										in (fun ys⁵⁷ -> 
//│ 											let t⁹⁴ = mappend_lh_₁(t⁵⁴, ys⁵⁷)
//│ 											in let h⁸⁸ = h⁸⁷
//│ 											in (fun ys⁵⁸ -> 
//│ 												let t⁹⁵ = mappend_lh_₄(t⁹⁴, ys⁵⁸)
//│ 												in let h⁸⁹ = h⁸⁸
//│ 												in (fun _lh_dummy³³ -> (1 + length_lh_₁(t⁹⁵)))))
//│ 									in let h⁹⁰ = 't'
//│ 									in (fun ys⁵⁹ -> 
//│ 										let t⁹⁶ = mappend_lh_₁(t⁵³, ys⁵⁹)
//│ 										in let h⁹¹ = h⁹⁰
//│ 										in (fun ys⁶⁰ -> 
//│ 											let t⁹⁷ = mappend_lh_₄(t⁹⁶, ys⁶⁰)
//│ 											in let h⁹² = h⁹¹
//│ 											in (fun _lh_dummy³⁴ -> (1 + length_lh_₁(t⁹⁷)))))
//│ 								in let h⁹³ = 'k'
//│ 								in (fun ys⁶¹ -> 
//│ 									let t⁹⁸ = mappend_lh_₁(t⁵², ys⁶¹)
//│ 									in let h⁹⁴ = h⁹³
//│ 									in (fun ys⁶² -> 
//│ 										let t⁹⁹ = mappend_lh_₄(t⁹⁸, ys⁶²)
//│ 										in let h⁹⁵ = h⁹⁴
//│ 										in (fun _lh_dummy³⁵ -> (1 + length_lh_₁(t⁹⁹)))))
//│ 							in let h⁹⁶ = 'c'
//│ 							in (fun ys⁶³ -> 
//│ 								let t¹⁰⁰ = mappend_lh_₁(t⁵¹, ys⁶³)
//│ 								in let h⁹⁷ = h⁹⁶
//│ 								in (fun ys⁶⁴ -> 
//│ 									let t¹⁰¹ = mappend_lh_₄(t¹⁰⁰, ys⁶⁴)
//│ 									in let h⁹⁸ = h⁹⁷
//│ 									in (fun _lh_dummy³⁶ -> (1 + length_lh_₁(t¹⁰¹)))))
//│ 						in let h⁹⁹ = 'a'
//│ 						in (fun ys⁶⁵ -> 
//│ 							let t¹⁰² = mappend_lh_₁(t⁵⁰, ys⁶⁵)
//│ 							in let h¹⁰⁰ = h⁹⁹
//│ 							in (fun ys⁶⁶ -> 
//│ 								let t¹⁰³ = mappend_lh_₄(t¹⁰², ys⁶⁶)
//│ 								in let h¹⁰¹ = h¹⁰⁰
//│ 								in (fun _lh_dummy³⁷ -> (1 + length_lh_₁(t¹⁰³)))))
//│ 					in let h¹⁰² = 'b'
//│ 					in (fun ys⁶⁷ -> 
//│ 						let t¹⁰⁴ = mappend_lh_₁(t⁴⁹, ys⁶⁷)
//│ 						in let h¹⁰³ = h¹⁰²
//│ 						in (fun ys⁶⁸ -> 
//│ 							let t¹⁰⁵ = mappend_lh_₄(t¹⁰⁴, ys⁶⁸)
//│ 							in let h¹⁰⁴ = h¹⁰³
//│ 							in (fun _lh_dummy³⁸ -> (1 + length_lh_₁(t¹⁰⁵)))))
//│ 				in let h¹⁰⁵ = ' '
//│ 				in (fun ys⁶⁹ -> 
//│ 					let t¹⁰⁶ = mappend_lh_₁(t⁴⁸, ys⁶⁹)
//│ 					in let h¹⁰⁶ = h¹⁰⁵
//│ 					in (fun ys⁷⁰ -> 
//│ 						let t¹⁰⁷ = mappend_lh_₄(t¹⁰⁶, ys⁷⁰)
//│ 						in let h¹⁰⁷ = h¹⁰⁶
//│ 						in (fun _lh_dummy³⁹ -> (1 + length_lh_₁(t¹⁰⁷)))))), showChessSet_lh_₁(_lh_pp_LH_P2_1⁰)), pp¹(_lh_pp_LH_C_1⁰))}))) else depthSearch_lh_₁(addAllFront_lh_₂(_lh_depthSearch_arg2⁰(inquireFront_lh_₃(_lh_depthSearch_arg1⁰)), removeFront_lh_₂(_lh_depthSearch_arg1⁰)), _lh_depthSearch_arg2⁰, _lh_depthSearch_arg3⁰)
//│ def descAndNo_lh_₁(_lh_descAndNo_arg1⁰) = 
//│ 	let _lh_listcomp_fun⁴⁹ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 		LH_C _lh_listcomp_fun_ls_h³⁸ _lh_listcomp_fun_ls_t³⁸ => [LH_C [LH_P2 length_lh_₄(possibleMoves_lh_₁(deleteFirst_lh_₃(_lh_listcomp_fun_ls_h³⁸))) _lh_listcomp_fun_ls_h³⁸] _lh_listcomp_fun⁴⁹(_lh_listcomp_fun_ls_t³⁸)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁴⁹(allDescend_lh_₁(_lh_descAndNo_arg1⁰))
//│ def descAndNo_lh_₂(_lh_descAndNo_arg1¹) = 
//│ 	let _lh_listcomp_fun⁵⁴ = (fun _lh_listcomp_fun_para¹² -> case _lh_listcomp_fun_para¹² of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁴¹ _lh_listcomp_fun_ls_t⁴¹ => 
//│ 			let _lh_listcomp_fun_ls_t⁴² = _lh_listcomp_fun⁵⁴(_lh_listcomp_fun_ls_t⁴¹)
//│ 			in let _lh_listcomp_fun_ls_h⁴² = 	
//│ 				let _lh_singleDescend_LH_P2_1⁰ = _lh_listcomp_fun_ls_h⁴¹
//│ 				in let _lh_singleDescend_LH_P2_0⁰ = length_lh_₆(possibleMoves_lh_₄(deleteFirst_lh_₄(_lh_listcomp_fun_ls_h⁴¹)))
//│ 				in (fun _lh_listcomp_fun_ls_t⁴³ -> (fun _lh_listcomp_fun⁵⁵ -> if (_lh_singleDescend_LH_P2_0⁰ == 1) then [LH_C _lh_singleDescend_LH_P2_1⁰ _lh_listcomp_fun⁵⁵(_lh_listcomp_fun_ls_t⁴³)] else _lh_listcomp_fun⁵⁵(_lh_listcomp_fun_ls_t⁴³)))
//│ 			in (fun _lh_listcomp_fun⁵⁶ -> _lh_listcomp_fun_ls_h⁴²(_lh_listcomp_fun_ls_t⁴², _lh_listcomp_fun⁵⁶))
//│ 		| LH_N  => (fun _lh_listcomp_fun⁵⁷ -> [LH_N])})
//│ 	in _lh_listcomp_fun⁵⁴(allDescend_lh_₁(_lh_descAndNo_arg1¹))
//│ def descendents_lh_₁(_lh_descendents_arg1⁰) = if (canJumpFirst_lh_₂(_lh_descendents_arg1⁰) && deadEnd_lh_₁(addPiece_lh_₁(firstPiece_lh_₁(_lh_descendents_arg1⁰), _lh_descendents_arg1⁰))) then [LH_N] else 
//│ 	let singles⁰ = singleDescend_lh_₁(_lh_descendents_arg1⁰)
//│ 	in let scrut⁰ = length_lh_₃(singles⁰)
//│ 	in if (scrut⁰ == 0) then map_lh_₂(mySnd_lh_₁, quickSortIntChessSet_lh_₁(descAndNo_lh_₁(_lh_descendents_arg1⁰))) else if (scrut⁰ == 1) then singles⁰ else [LH_N]
//│ def enumFromTo_lh_₁(a⁰, b⁰, _lh_floatOutId_0⁰, _lh_floatOutId_1⁰, _lh_floatOutId_2⁰, _lh_floatOutId_3⁰) = if (a⁰ <= b⁰) then (fun f⁰ -> (fun ys⁰ -> 
//│ 	let _lh_listcomp_fun_ls_t⁰ = enumFromTo_lh_₁((a⁰ + 1), b⁰)
//│ 	in let _lh_listcomp_fun_ls_h⁰ = a⁰
//│ 	in let tx⁰ = _lh_floatOutId_1⁰(_lh_listcomp_fun_ls_t⁰)
//│ 	in let hx⁰ = [LH_P2 _lh_floatOutId_0⁰ _lh_listcomp_fun_ls_h⁰]
//│ 	in ys⁰(f⁰, hx⁰, tx⁰))) else _lh_floatOutId_3⁰(_lh_floatOutId_2⁰)
//│ def enumFromTo_lh_₂(a¹, b¹, _lh_floatOutId_0², _lh_floatOutId_1¹) = if (a¹ <= b¹) then 
//│ 	let _lh_listcomp_fun_ls_t²⁷ = enumFromTo_lh_₂((a¹ + 1), b¹)
//│ 	in let _lh_listcomp_fun_ls_h²⁷ = a¹
//│ 	in let _lh_listcomp_fun³⁵ = (fun _lh_listcomp_fun_para³ -> _lh_listcomp_fun_para³(_lh_listcomp_fun_ls_h²⁷, _lh_listcomp_fun³⁵, _lh_listcomp_fun_ls_t²⁷, _lh_floatOutId_0²))
//│ 	in _lh_listcomp_fun³⁵(enumFromTo_lh_₁(1, _lh_floatOutId_1¹)) else (fun f¹⁰ -> (fun ys⁷⁴ -> (fun xs⁶ -> (fun ys⁷⁵ -> ys⁷⁵))))
//│ def firstPiece_lh_₁(_lh_firstPiece_arg1¹) = case _lh_firstPiece_arg1¹ of {
//│ 	Board _lh_firstPiece_Board_0¹ _lh_firstPiece_Board_1¹ _lh_firstPiece_Board_2¹ _lh_firstPiece_Board_3¹ => _lh_firstPiece_Board_2¹}
//│ def firstPiece_lh_₂(_lh_firstPiece_arg1²) = case _lh_firstPiece_arg1² of {
//│ 	Board _lh_firstPiece_Board_0² _lh_firstPiece_Board_1² _lh_firstPiece_Board_2² _lh_firstPiece_Board_3² => _lh_firstPiece_Board_2²}
//│ def firstPiece_lh_₃(_lh_firstPiece_arg1⁰) = case _lh_firstPiece_arg1⁰ of {
//│ 	Board _lh_firstPiece_Board_0⁰ _lh_firstPiece_Board_1⁰ _lh_firstPiece_Board_2⁰ _lh_firstPiece_Board_3⁰ => _lh_firstPiece_Board_2⁰}
//│ def foldr_lh_₁(f¹¹, i⁰, ls¹) = case ls¹ of {
//│ 	LH_C h¹¹¹ t¹¹¹ => f¹¹(h¹¹¹, foldr_lh_₁(f¹¹, i⁰, t¹¹¹))
//│ 	| LH_N  => i⁰}
//│ def foldr_lh_₂(f¹², i¹, ls²) = case ls² of {
//│ 	LH_C h¹¹² t¹¹² => f¹²(h¹¹², foldr_lh_₂(f¹², i¹, t¹¹²))
//│ 	| LH_N  => i¹}
//│ def grow_lh_₁(_lh_grow_arg1⁰) = case _lh_grow_arg1⁰ of {
//│ 	LH_P2 _lh_grow_LH_P2_0⁰ _lh_grow_LH_P2_1⁰ => zip_lz_nl_lh_₂(repeat_lh_₂((_lh_grow_LH_P2_0⁰ + 1)), descendents_lh_₁(_lh_grow_LH_P2_1⁰))}
//│ def inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_arg2⁰) = case _lh_inList_arg2⁰ of {
//│ 	LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰)
//│ 	| LH_N  => [False]}
//│ def inquireFront_lh_₁(_lh_inquireFront_arg1⁰) = case _lh_inquireFront_arg1⁰ of {
//│ 	LH_N  => error⁰([LH_C 'C' [LH_C 'a' [LH_C 'n' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C 'q' [LH_C 'u' [LH_C 'i' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'e' [LH_C 'm' [LH_C 'p' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'Q' [LH_C 'u' [LH_C 'e' [LH_C 'u' [LH_C 'e' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 	| LH_C _lh_inquireFront_LH_C_0⁰ _lh_inquireFront_LH_C_1⁰ => _lh_inquireFront_LH_C_0⁰}
//│ def inquireFront_lh_₂(_lh_inquireFront_arg1¹) = case _lh_inquireFront_arg1¹ of {
//│ 	LH_N  => error⁰([LH_C 'C' [LH_C 'a' [LH_C 'n' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C 'q' [LH_C 'u' [LH_C 'i' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'e' [LH_C 'm' [LH_C 'p' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'Q' [LH_C 'u' [LH_C 'e' [LH_C 'u' [LH_C 'e' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 	| LH_C _lh_inquireFront_LH_C_0¹ _lh_inquireFront_LH_C_1¹ => _lh_inquireFront_LH_C_0¹}
//│ def inquireFront_lh_₃(_lh_inquireFront_arg1²) = case _lh_inquireFront_arg1² of {
//│ 	LH_N  => error⁰([LH_C 'C' [LH_C 'a' [LH_C 'n' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C 'q' [LH_C 'u' [LH_C 'i' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'e' [LH_C 'm' [LH_C 'p' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'Q' [LH_C 'u' [LH_C 'e' [LH_C 'u' [LH_C 'e' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 	| LH_C _lh_inquireFront_LH_C_0² _lh_inquireFront_LH_C_1² => _lh_inquireFront_LH_C_0²}
//│ def intChessSetComp_lh_₁(_lh_intChessSetComp_arg1⁰, _lh_intChessSetComp_arg2⁰) = case _lh_intChessSetComp_arg1⁰ of {
//│ 	LH_P2 _lh_intChessSetComp_LH_P2_0⁰ _lh_intChessSetComp_LH_P2_1⁰ => case _lh_intChessSetComp_arg2⁰ of {
//│ 		LH_P2 _lh_intChessSetComp_LH_P2_0¹ _lh_intChessSetComp_LH_P2_1¹ => (_lh_intChessSetComp_LH_P2_0⁰ < _lh_intChessSetComp_LH_P2_0¹)}}
//│ def intChessSetComp_lh_₂(_lh_intChessSetComp_arg1¹, _lh_intChessSetComp_arg2¹) = case _lh_intChessSetComp_arg1¹ of {
//│ 	LH_P2 _lh_intChessSetComp_LH_P2_0² _lh_intChessSetComp_LH_P2_1² => case _lh_intChessSetComp_arg2¹ of {
//│ 		LH_P2 _lh_intChessSetComp_LH_P2_0³ _lh_intChessSetComp_LH_P2_1³ => (_lh_intChessSetComp_LH_P2_0² < _lh_intChessSetComp_LH_P2_0³)}}
//│ def intintComp_lh_₁(_lh_intintComp_arg1¹, _lh_intintComp_arg2¹) = case _lh_intintComp_arg1¹ of {
//│ 	LH_P2 _lh_intintComp_LH_P2_0² _lh_intintComp_LH_P2_1² => case _lh_intintComp_arg2¹ of {
//│ 		LH_P2 _lh_intintComp_LH_P2_0³ _lh_intintComp_LH_P2_1³ => ((_lh_intintComp_LH_P2_0² < _lh_intintComp_LH_P2_0³) || ((_lh_intintComp_LH_P2_0² == _lh_intintComp_LH_P2_0³) && (_lh_intintComp_LH_P2_1² < _lh_intintComp_LH_P2_1³)))}}
//│ def intintComp_lh_₂(_lh_intintComp_arg1⁰, _lh_intintComp_arg2⁰) = case _lh_intintComp_arg1⁰ of {
//│ 	LH_P2 _lh_intintComp_LH_P2_0⁰ _lh_intintComp_LH_P2_1⁰ => case _lh_intintComp_arg2⁰ of {
//│ 		LH_P2 _lh_intintComp_LH_P2_0¹ _lh_intintComp_LH_P2_1¹ => ((_lh_intintComp_LH_P2_0⁰ < _lh_intintComp_LH_P2_0¹) || ((_lh_intintComp_LH_P2_0⁰ == _lh_intintComp_LH_P2_0¹) && (_lh_intintComp_LH_P2_1⁰ < _lh_intintComp_LH_P2_1¹)))}}
//│ def isFinished_lh_₁(_lh_isFinished_arg1⁰) = case _lh_isFinished_arg1⁰ of {
//│ 	LH_P2 _lh_isFinished_LH_P2_0⁰ _lh_isFinished_LH_P2_1⁰ => tourFinished_lh_₁(_lh_isFinished_LH_P2_1⁰)}
//│ def isSquareFree_lh_₁(_lh_isSquareFree_arg1¹, _lh_isSquareFree_arg2¹) = case _lh_isSquareFree_arg2¹ of {
//│ 	Board _lh_isSquareFree_Board_0¹ _lh_isSquareFree_Board_1¹ _lh_isSquareFree_Board_2¹ _lh_isSquareFree_Board_3¹ => not⁰(inList_lh_₁(_lh_isSquareFree_arg1¹, _lh_isSquareFree_Board_3¹))}
//│ def isSquareFree_lh_₂(_lh_isSquareFree_arg1⁰, _lh_isSquareFree_arg2⁰) = case _lh_isSquareFree_arg2⁰ of {
//│ 	Board _lh_isSquareFree_Board_0⁰ _lh_isSquareFree_Board_1⁰ _lh_isSquareFree_Board_2⁰ _lh_isSquareFree_Board_3⁰ => not⁰(inList_lh_₁(_lh_isSquareFree_arg1⁰, _lh_isSquareFree_Board_3⁰))}
//│ def lastPiece_lh_₁(_lh_lastPiece_arg1⁰) = case _lh_lastPiece_arg1⁰ of {
//│ 	Board _lh_lastPiece_Board_0⁰ _lh_lastPiece_Board_1⁰ _lh_lastPiece_Board_2⁰ _lh_lastPiece_Board_3⁰ => case _lh_lastPiece_Board_3⁰ of {
//│ 		LH_C _lh_lastPiece_LH_C_0⁰ _lh_lastPiece_LH_C_1⁰ => _lh_lastPiece_LH_C_0⁰}}
//│ def length_lh_₁(ls⁶) = ls⁶([lh_Unit])
//│ def length_lh_₂(ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h¹⁶⁹ t¹⁶⁹ => (1 + length_lh_₂(t¹⁶⁹))
//│ 	| LH_N  => 0}
//│ def length_lh_₃(ls⁸) = case ls⁸ of {
//│ 	LH_C h¹⁴² t¹⁴² => (1 + length_lh_₃(t¹⁴²))
//│ 	| LH_N  => 0}
//│ def length_lh_₄(ls⁵) = ls⁵([lh_Unit])
//│ def length_lh_₅(ls⁰) = ls⁰([lh_Unit])
//│ def length_lh_₆(ls¹¹) = ls¹¹([lh_Unit])
//│ def map_lh_₁(f¹⁶, ls⁴) = case ls⁴ of {
//│ 	LH_C h¹³⁵ t¹³⁵ => [LH_C f¹⁶(h¹³⁵) map_lh_₁(f¹⁶, t¹³⁵)]
//│ 	| LH_N  => (fun _lh_printTour_LH_C_0⁰ -> (fun _lh_printTour_LH_C_0¹ -> (fun pp² -> pp²(take_lz_lh_₁(_lh_printTour_LH_C_0⁰, depthSearch_lh_₁(root_lh_₁(_lh_printTour_LH_C_0¹), grow_lh_₁, isFinished_lh_₁))))))}
//│ def map_lh_₂(f¹⁵, ls³) = case ls³ of {
//│ 	LH_C h¹³⁰ t¹³⁰ => [LH_C f¹⁵(h¹³⁰) map_lh_₂(f¹⁵, t¹³⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f¹⁸, ls⁷) = ls⁷(f¹⁸)
//│ def mappend_lh_₁(xs², ys⁷) = xs²(ys⁷)
//│ def mappend_lh_₁₀(xs⁷, ys⁷⁶) = xs⁷(ys⁷⁶)
//│ def mappend_lh_₁₁(xs¹⁵, ys⁸⁷) = case xs¹⁵ of {
//│ 	LH_C h¹²⁶ t¹²⁶ => 
//│ 		let t¹²⁷ = mappend_lh_₁₁(t¹²⁶, ys⁸⁷)
//│ 		in let h¹²⁷ = h¹²⁶
//│ 		in (fun ys⁸⁸ -> 
//│ 			let t¹²⁸ = mappend_lh_₇(t¹²⁷, ys⁸⁸)
//│ 			in let h¹²⁸ = h¹²⁷
//│ 			in (fun ys⁸⁹ -> 
//│ 				let t¹²⁹ = mappend_lh_₄(t¹²⁸, ys⁸⁹)
//│ 				in let h¹²⁹ = h¹²⁸
//│ 				in (fun _lh_dummy⁵⁰ -> (1 + length_lh_₁(t¹²⁹)))))
//│ 	| LH_N  => ys⁸⁷}
//│ def mappend_lh_₁₂(xs²⁴, ys¹³¹) = xs²⁴(ys¹³¹)
//│ def mappend_lh_₁₃(xs¹⁷, ys⁹¹) = case xs¹⁷ of {
//│ 	LH_C h¹³¹ t¹³¹ => 
//│ 		let t¹³² = mappend_lh_₁₃(t¹³¹, ys⁹¹)
//│ 		in let h¹³² = h¹³¹
//│ 		in (fun ys⁹² -> 
//│ 			let t¹³³ = mappend_lh_₅(t¹³², ys⁹²)
//│ 			in let h¹³³ = h¹³²
//│ 			in (fun ys⁹³ -> 
//│ 				let t¹³⁴ = mappend_lh_₄(t¹³³, ys⁹³)
//│ 				in let h¹³⁴ = h¹³³
//│ 				in (fun _lh_dummy⁵¹ -> (1 + length_lh_₁(t¹³⁴)))))
//│ 	| LH_N  => ys⁹¹}
//│ def mappend_lh_₁₄(xs¹³, ys⁸⁵) = xs¹³(ys⁸⁵)
//│ def mappend_lh_₁₅(xs²⁰, ys⁹⁶) = case xs²⁰ of {
//│ 	LH_C h¹³⁶ t¹³⁶ => 
//│ 		let t¹³⁷ = mappend_lh_₁₅(t¹³⁶, ys⁹⁶)
//│ 		in let h¹³⁷ = h¹³⁶
//│ 		in (fun ys⁹⁷ -> [LH_C h¹³⁷ mappend_lh_₁₆(t¹³⁷, ys⁹⁷)])
//│ 	| LH_N  => ys⁹⁶}
//│ def mappend_lh_₁₆(xs⁰, ys¹) = xs⁰(ys¹)
//│ def mappend_lh_₁₇(xs²³, ys¹³⁰) = xs²³(ys¹³⁰)
//│ def mappend_lh_₁₈(xs³, ys⁸) = xs³(ys⁸)
//│ def mappend_lh_₁₉(xs⁵, ys⁷¹) = case xs⁵ of {
//│ 	LH_C h¹⁰⁸ t¹⁰⁸ => 
//│ 		let t¹⁰⁹ = mappend_lh_₁₉(t¹⁰⁸, ys⁷¹)
//│ 		in let h¹⁰⁹ = h¹⁰⁸
//│ 		in (fun ys⁷² -> [LH_C h¹⁰⁹ mappend_lh_₂₀(t¹⁰⁹, ys⁷²)])
//│ 	| LH_N  => ys⁷¹}
//│ def mappend_lh_₂(xs⁹, ys⁷⁸) = case xs⁹ of {
//│ 	LH_C h¹¹³ t¹¹³ => 
//│ 		let t¹¹⁴ = mappend_lh_₂(t¹¹³, ys⁷⁸)
//│ 		in let h¹¹⁴ = h¹¹³
//│ 		in (fun ys⁷⁹ -> 
//│ 			let t¹¹⁵ = mappend_lh_₁(t¹¹⁴, ys⁷⁹)
//│ 			in let h¹¹⁵ = h¹¹⁴
//│ 			in (fun ys⁸⁰ -> 
//│ 				let t¹¹⁶ = mappend_lh_₄(t¹¹⁵, ys⁸⁰)
//│ 				in let h¹¹⁶ = h¹¹⁵
//│ 				in (fun _lh_dummy⁴⁰ -> (1 + length_lh_₁(t¹¹⁶)))))
//│ 	| LH_N  => ys⁷⁸}
//│ def mappend_lh_₂₀(xs¹⁶, ys⁹⁰) = xs¹⁶(ys⁹⁰)
//│ def mappend_lh_₃(xs¹, ys²) = xs¹(ys²)
//│ def mappend_lh_₄(xs¹⁸, ys⁹⁴) = xs¹⁸(ys⁹⁴)
//│ def mappend_lh_₅(xs¹⁰, ys⁸¹) = xs¹⁰(ys⁸¹)
//│ def mappend_lh_₆(xs¹⁴, ys⁸⁶) = xs¹⁴(ys⁸⁶)
//│ def mappend_lh_₇(xs⁸, ys⁷⁷) = xs⁸(ys⁷⁷)
//│ def mappend_lh_₈(xs⁴, ys⁹) = xs⁴(ys⁹)
//│ def mappend_lh_₉(xs¹⁹, ys⁹⁵) = xs¹⁹(ys⁹⁵)
//│ def moveKnight_lh_₁(_lh_moveKnight_arg1⁰, _lh_moveKnight_arg2⁰) = addPiece_lh_₁(move_lh_₁(_lh_moveKnight_arg2⁰, lastPiece_lh_₁(_lh_moveKnight_arg1⁰)), _lh_moveKnight_arg1⁰)
//│ def move_lh_₁(_lh_move_arg1⁰, _lh_move_arg2⁰) = case _lh_move_arg1⁰ of {
//│ 	UL  => case _lh_move_arg2⁰ of {
//│ 		LH_P2 _lh_move_LH_P2_0⁰ _lh_move_LH_P2_1⁰ => [LH_P2 (_lh_move_LH_P2_0⁰ - 1) (_lh_move_LH_P2_1⁰ - 2)]}
//│ 	| UR  => case _lh_move_arg2⁰ of {
//│ 		LH_P2 _lh_move_LH_P2_0¹ _lh_move_LH_P2_1¹ => [LH_P2 (_lh_move_LH_P2_0¹ + 1) (_lh_move_LH_P2_1¹ - 2)]}
//│ 	| DL  => case _lh_move_arg2⁰ of {
//│ 		LH_P2 _lh_move_LH_P2_0² _lh_move_LH_P2_1² => [LH_P2 (_lh_move_LH_P2_0² - 1) (_lh_move_LH_P2_1² + 2)]}
//│ 	| DR  => case _lh_move_arg2⁰ of {
//│ 		LH_P2 _lh_move_LH_P2_0³ _lh_move_LH_P2_1³ => [LH_P2 (_lh_move_LH_P2_0³ + 1) (_lh_move_LH_P2_1³ + 2)]}
//│ 	| LU  => case _lh_move_arg2⁰ of {
//│ 		LH_P2 _lh_move_LH_P2_0⁴ _lh_move_LH_P2_1⁴ => [LH_P2 (_lh_move_LH_P2_0⁴ - 2) (_lh_move_LH_P2_1⁴ - 1)]}
//│ 	| LD  => case _lh_move_arg2⁰ of {
//│ 		LH_P2 _lh_move_LH_P2_0⁵ _lh_move_LH_P2_1⁵ => [LH_P2 (_lh_move_LH_P2_0⁵ - 2) (_lh_move_LH_P2_1⁵ + 1)]}
//│ 	| RU  => case _lh_move_arg2⁰ of {
//│ 		LH_P2 _lh_move_LH_P2_0⁶ _lh_move_LH_P2_1⁶ => [LH_P2 (_lh_move_LH_P2_0⁶ + 2) (_lh_move_LH_P2_1⁶ - 1)]}
//│ 	| RD  => case _lh_move_arg2⁰ of {
//│ 		LH_P2 _lh_move_LH_P2_0⁷ _lh_move_LH_P2_1⁷ => [LH_P2 (_lh_move_LH_P2_0⁷ + 2) (_lh_move_LH_P2_1⁷ + 1)]}}
//│ def myInit_lh_₁(_lh_myInit_arg1²) = case _lh_myInit_arg1² of {
//│ 	LH_C _lh_myInit_LH_C_0² _lh_myInit_LH_C_1² => case _lh_myInit_LH_C_1² of {
//│ 		LH_N  => [LH_N]
//│ 		| _  => [LH_C _lh_myInit_LH_C_0² myInit_lh_₁(_lh_myInit_LH_C_1²)]}}
//│ def myInit_lh_₂(_lh_myInit_arg1¹) = case _lh_myInit_arg1¹ of {
//│ 	LH_C _lh_myInit_LH_C_0¹ _lh_myInit_LH_C_1¹ => case _lh_myInit_LH_C_1¹ of {
//│ 		LH_N  => [LH_N]
//│ 		| _  => [LH_C _lh_myInit_LH_C_0¹ myInit_lh_₂(_lh_myInit_LH_C_1¹)]}}
//│ def myInit_lh_₃(_lh_myInit_arg1⁰) = case _lh_myInit_arg1⁰ of {
//│ 	LH_C _lh_myInit_LH_C_0⁰ _lh_myInit_LH_C_1⁰ => case _lh_myInit_LH_C_1⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| _  => [LH_C _lh_myInit_LH_C_0⁰ myInit_lh_₃(_lh_myInit_LH_C_1⁰)]}}
//│ def myIsDigit_lh_₁(_lh_myIsDigit_arg1⁰) = 
//│ 	let n⁰ = int_of_char⁰(_lh_myIsDigit_arg1⁰)
//│ 	in ((n⁰ >= 48) && (n⁰ <= 57))
//│ def myLast_lh_₁(_lh_myLast_arg1⁰) = case _lh_myLast_arg1⁰ of {
//│ 	LH_N  => [LH_P2 (0 - 100) (0 - 100)]
//│ 	| LH_C _lh_myLast_LH_C_0⁰ _lh_myLast_LH_C_1⁰ => 
//│ 		let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {
//│ 			LH_N  => _lh_go_arg1⁰
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰)}))
//│ 		in go⁰(_lh_myLast_LH_C_0⁰, _lh_myLast_LH_C_1⁰)}
//│ def myLast_lh_₂(_lh_myLast_arg1²) = case _lh_myLast_arg1² of {
//│ 	LH_N  => [LH_P2 (0 - 100) (0 - 100)]
//│ 	| LH_C _lh_myLast_LH_C_0² _lh_myLast_LH_C_1² => 
//│ 		let go² = (fun _lh_go_arg1² -> (fun _lh_go_arg2² -> case _lh_go_arg2² of {
//│ 			LH_N  => _lh_go_arg1²
//│ 			| LH_C _lh_go_LH_C_0² _lh_go_LH_C_1² => go²(_lh_go_LH_C_0², _lh_go_LH_C_1²)}))
//│ 		in go²(_lh_myLast_LH_C_0², _lh_myLast_LH_C_1²)}
//│ def myLast_lh_₃(_lh_myLast_arg1¹) = case _lh_myLast_arg1¹ of {
//│ 	LH_N  => [LH_P2 (0 - 100) (0 - 100)]
//│ 	| LH_C _lh_myLast_LH_C_0¹ _lh_myLast_LH_C_1¹ => 
//│ 		let go¹ = (fun _lh_go_arg1¹ -> (fun _lh_go_arg2¹ -> case _lh_go_arg2¹ of {
//│ 			LH_N  => _lh_go_arg1¹
//│ 			| LH_C _lh_go_LH_C_0¹ _lh_go_LH_C_1¹ => go¹(_lh_go_LH_C_0¹, _lh_go_LH_C_1¹)}))
//│ 		in go¹(_lh_myLast_LH_C_0¹, _lh_myLast_LH_C_1¹)}
//│ def mySnd_lh_₁(_lh_mySnd_arg1⁰) = case _lh_mySnd_arg1⁰ of {
//│ 	LH_P2 _lh_mySnd_LH_P2_0⁰ _lh_mySnd_LH_P2_1⁰ => _lh_mySnd_LH_P2_1⁰}
//│ def noPieces_lh_₁(_lh_noPieces_arg1⁰) = case _lh_noPieces_arg1⁰ of {
//│ 	Board _lh_noPieces_Board_0⁰ _lh_noPieces_Board_1⁰ _lh_noPieces_Board_2⁰ _lh_noPieces_Board_3⁰ => _lh_noPieces_Board_1⁰}
//│ def possibleMoves_lh_₁(_lh_possibleMoves_arg1²⁰) = 
//│ 	let _lh_listcomp_fun²⁴ = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun²⁴, _lh_possibleMoves_arg1²⁰))
//│ 	in _lh_listcomp_fun²⁴(
//│ 		let _lh_listcomp_fun_ls_t¹⁹ = 	
//│ 			let _lh_listcomp_fun_ls_t²⁰ = 	
//│ 				let _lh_listcomp_fun_ls_t²¹ = 	
//│ 					let _lh_listcomp_fun_ls_t²² = 	
//│ 						let _lh_listcomp_fun_ls_t²³ = 	
//│ 							let _lh_listcomp_fun_ls_t²⁴ = 	
//│ 								let _lh_listcomp_fun_ls_t²⁵ = 	
//│ 									let _lh_listcomp_fun_ls_t²⁶ = (fun _lh_listcomp_fun²⁵ -> (fun _lh_possibleMoves_arg1²¹ -> (fun _lh_dummy⁹ -> 0)))
//│ 									in let _lh_listcomp_fun_ls_h¹⁹ = [RD]
//│ 									in (fun _lh_listcomp_fun²⁶ -> (fun _lh_possibleMoves_arg1²² -> if canMove_lh_₁(_lh_possibleMoves_arg1²², _lh_listcomp_fun_ls_h¹⁹) then 
//│ 										let t¹⁶ = _lh_listcomp_fun²⁶(_lh_listcomp_fun_ls_t²⁶)
//│ 										in let h¹⁶ = _lh_listcomp_fun_ls_h¹⁹
//│ 										in (fun _lh_dummy¹⁰ -> (1 + length_lh_₄(t¹⁶))) else _lh_listcomp_fun²⁶(_lh_listcomp_fun_ls_t²⁶)))
//│ 								in let _lh_listcomp_fun_ls_h²⁰ = [RU]
//│ 								in (fun _lh_listcomp_fun²⁷ -> (fun _lh_possibleMoves_arg1²³ -> if canMove_lh_₁(_lh_possibleMoves_arg1²³, _lh_listcomp_fun_ls_h²⁰) then 
//│ 									let t¹⁷ = _lh_listcomp_fun²⁷(_lh_listcomp_fun_ls_t²⁵)
//│ 									in let h¹⁷ = _lh_listcomp_fun_ls_h²⁰
//│ 									in (fun _lh_dummy¹¹ -> (1 + length_lh_₄(t¹⁷))) else _lh_listcomp_fun²⁷(_lh_listcomp_fun_ls_t²⁵)))
//│ 							in let _lh_listcomp_fun_ls_h²¹ = [LD]
//│ 							in (fun _lh_listcomp_fun²⁸ -> (fun _lh_possibleMoves_arg1²⁴ -> if canMove_lh_₁(_lh_possibleMoves_arg1²⁴, _lh_listcomp_fun_ls_h²¹) then 
//│ 								let t¹⁸ = _lh_listcomp_fun²⁸(_lh_listcomp_fun_ls_t²⁴)
//│ 								in let h¹⁸ = _lh_listcomp_fun_ls_h²¹
//│ 								in (fun _lh_dummy¹² -> (1 + length_lh_₄(t¹⁸))) else _lh_listcomp_fun²⁸(_lh_listcomp_fun_ls_t²⁴)))
//│ 						in let _lh_listcomp_fun_ls_h²² = [LU]
//│ 						in (fun _lh_listcomp_fun²⁹ -> (fun _lh_possibleMoves_arg1²⁵ -> if canMove_lh_₁(_lh_possibleMoves_arg1²⁵, _lh_listcomp_fun_ls_h²²) then 
//│ 							let t¹⁹ = _lh_listcomp_fun²⁹(_lh_listcomp_fun_ls_t²³)
//│ 							in let h¹⁹ = _lh_listcomp_fun_ls_h²²
//│ 							in (fun _lh_dummy¹³ -> (1 + length_lh_₄(t¹⁹))) else _lh_listcomp_fun²⁹(_lh_listcomp_fun_ls_t²³)))
//│ 					in let _lh_listcomp_fun_ls_h²³ = [DR]
//│ 					in (fun _lh_listcomp_fun³⁰ -> (fun _lh_possibleMoves_arg1²⁶ -> if canMove_lh_₁(_lh_possibleMoves_arg1²⁶, _lh_listcomp_fun_ls_h²³) then 
//│ 						let t²⁰ = _lh_listcomp_fun³⁰(_lh_listcomp_fun_ls_t²²)
//│ 						in let h²⁰ = _lh_listcomp_fun_ls_h²³
//│ 						in (fun _lh_dummy¹⁴ -> (1 + length_lh_₄(t²⁰))) else _lh_listcomp_fun³⁰(_lh_listcomp_fun_ls_t²²)))
//│ 				in let _lh_listcomp_fun_ls_h²⁴ = [DL]
//│ 				in (fun _lh_listcomp_fun³¹ -> (fun _lh_possibleMoves_arg1²⁷ -> if canMove_lh_₁(_lh_possibleMoves_arg1²⁷, _lh_listcomp_fun_ls_h²⁴) then 
//│ 					let t²¹ = _lh_listcomp_fun³¹(_lh_listcomp_fun_ls_t²¹)
//│ 					in let h²¹ = _lh_listcomp_fun_ls_h²⁴
//│ 					in (fun _lh_dummy¹⁵ -> (1 + length_lh_₄(t²¹))) else _lh_listcomp_fun³¹(_lh_listcomp_fun_ls_t²¹)))
//│ 			in let _lh_listcomp_fun_ls_h²⁵ = [UR]
//│ 			in (fun _lh_listcomp_fun³² -> (fun _lh_possibleMoves_arg1²⁸ -> if canMove_lh_₁(_lh_possibleMoves_arg1²⁸, _lh_listcomp_fun_ls_h²⁵) then 
//│ 				let t²² = _lh_listcomp_fun³²(_lh_listcomp_fun_ls_t²⁰)
//│ 				in let h²² = _lh_listcomp_fun_ls_h²⁵
//│ 				in (fun _lh_dummy¹⁶ -> (1 + length_lh_₄(t²²))) else _lh_listcomp_fun³²(_lh_listcomp_fun_ls_t²⁰)))
//│ 		in let _lh_listcomp_fun_ls_h²⁶ = [UL]
//│ 		in (fun _lh_listcomp_fun³³ -> (fun _lh_possibleMoves_arg1²⁹ -> if canMove_lh_₁(_lh_possibleMoves_arg1²⁹, _lh_listcomp_fun_ls_h²⁶) then 
//│ 			let t²³ = _lh_listcomp_fun³³(_lh_listcomp_fun_ls_t¹⁹)
//│ 			in let h²³ = _lh_listcomp_fun_ls_h²⁶
//│ 			in (fun _lh_dummy¹⁷ -> (1 + length_lh_₄(t²³))) else _lh_listcomp_fun³³(_lh_listcomp_fun_ls_t¹⁹))))
//│ def possibleMoves_lh_₂(_lh_possibleMoves_arg1¹⁰) = 
//│ 	let _lh_listcomp_fun¹⁴ = (fun _lh_listcomp_fun_para¹ -> _lh_listcomp_fun_para¹(_lh_listcomp_fun¹⁴, _lh_possibleMoves_arg1¹⁰))
//│ 	in _lh_listcomp_fun¹⁴(
//│ 		let _lh_listcomp_fun_ls_t¹¹ = 	
//│ 			let _lh_listcomp_fun_ls_t¹² = 	
//│ 				let _lh_listcomp_fun_ls_t¹³ = 	
//│ 					let _lh_listcomp_fun_ls_t¹⁴ = 	
//│ 						let _lh_listcomp_fun_ls_t¹⁵ = 	
//│ 							let _lh_listcomp_fun_ls_t¹⁶ = 	
//│ 								let _lh_listcomp_fun_ls_t¹⁷ = 	
//│ 									let _lh_listcomp_fun_ls_t¹⁸ = (fun _lh_listcomp_fun¹⁵ -> (fun _lh_possibleMoves_arg1¹¹ -> (fun _lh_dummy⁰ -> 0)))
//│ 									in let _lh_listcomp_fun_ls_h¹¹ = [RD]
//│ 									in (fun _lh_listcomp_fun¹⁶ -> (fun _lh_possibleMoves_arg1¹² -> if canMove_lh_₁(_lh_possibleMoves_arg1¹², _lh_listcomp_fun_ls_h¹¹) then 
//│ 										let t⁸ = _lh_listcomp_fun¹⁶(_lh_listcomp_fun_ls_t¹⁸)
//│ 										in let h⁸ = _lh_listcomp_fun_ls_h¹¹
//│ 										in (fun _lh_dummy¹ -> (1 + length_lh_₅(t⁸))) else _lh_listcomp_fun¹⁶(_lh_listcomp_fun_ls_t¹⁸)))
//│ 								in let _lh_listcomp_fun_ls_h¹² = [RU]
//│ 								in (fun _lh_listcomp_fun¹⁷ -> (fun _lh_possibleMoves_arg1¹³ -> if canMove_lh_₁(_lh_possibleMoves_arg1¹³, _lh_listcomp_fun_ls_h¹²) then 
//│ 									let t⁹ = _lh_listcomp_fun¹⁷(_lh_listcomp_fun_ls_t¹⁷)
//│ 									in let h⁹ = _lh_listcomp_fun_ls_h¹²
//│ 									in (fun _lh_dummy² -> (1 + length_lh_₅(t⁹))) else _lh_listcomp_fun¹⁷(_lh_listcomp_fun_ls_t¹⁷)))
//│ 							in let _lh_listcomp_fun_ls_h¹³ = [LD]
//│ 							in (fun _lh_listcomp_fun¹⁸ -> (fun _lh_possibleMoves_arg1¹⁴ -> if canMove_lh_₁(_lh_possibleMoves_arg1¹⁴, _lh_listcomp_fun_ls_h¹³) then 
//│ 								let t¹⁰ = _lh_listcomp_fun¹⁸(_lh_listcomp_fun_ls_t¹⁶)
//│ 								in let h¹⁰ = _lh_listcomp_fun_ls_h¹³
//│ 								in (fun _lh_dummy³ -> (1 + length_lh_₅(t¹⁰))) else _lh_listcomp_fun¹⁸(_lh_listcomp_fun_ls_t¹⁶)))
//│ 						in let _lh_listcomp_fun_ls_h¹⁴ = [LU]
//│ 						in (fun _lh_listcomp_fun¹⁹ -> (fun _lh_possibleMoves_arg1¹⁵ -> if canMove_lh_₁(_lh_possibleMoves_arg1¹⁵, _lh_listcomp_fun_ls_h¹⁴) then 
//│ 							let t¹¹ = _lh_listcomp_fun¹⁹(_lh_listcomp_fun_ls_t¹⁵)
//│ 							in let h¹¹ = _lh_listcomp_fun_ls_h¹⁴
//│ 							in (fun _lh_dummy⁴ -> (1 + length_lh_₅(t¹¹))) else _lh_listcomp_fun¹⁹(_lh_listcomp_fun_ls_t¹⁵)))
//│ 					in let _lh_listcomp_fun_ls_h¹⁵ = [DR]
//│ 					in (fun _lh_listcomp_fun²⁰ -> (fun _lh_possibleMoves_arg1¹⁶ -> if canMove_lh_₁(_lh_possibleMoves_arg1¹⁶, _lh_listcomp_fun_ls_h¹⁵) then 
//│ 						let t¹² = _lh_listcomp_fun²⁰(_lh_listcomp_fun_ls_t¹⁴)
//│ 						in let h¹² = _lh_listcomp_fun_ls_h¹⁵
//│ 						in (fun _lh_dummy⁵ -> (1 + length_lh_₅(t¹²))) else _lh_listcomp_fun²⁰(_lh_listcomp_fun_ls_t¹⁴)))
//│ 				in let _lh_listcomp_fun_ls_h¹⁶ = [DL]
//│ 				in (fun _lh_listcomp_fun²¹ -> (fun _lh_possibleMoves_arg1¹⁷ -> if canMove_lh_₁(_lh_possibleMoves_arg1¹⁷, _lh_listcomp_fun_ls_h¹⁶) then 
//│ 					let t¹³ = _lh_listcomp_fun²¹(_lh_listcomp_fun_ls_t¹³)
//│ 					in let h¹³ = _lh_listcomp_fun_ls_h¹⁶
//│ 					in (fun _lh_dummy⁶ -> (1 + length_lh_₅(t¹³))) else _lh_listcomp_fun²¹(_lh_listcomp_fun_ls_t¹³)))
//│ 			in let _lh_listcomp_fun_ls_h¹⁷ = [UR]
//│ 			in (fun _lh_listcomp_fun²² -> (fun _lh_possibleMoves_arg1¹⁸ -> if canMove_lh_₁(_lh_possibleMoves_arg1¹⁸, _lh_listcomp_fun_ls_h¹⁷) then 
//│ 				let t¹⁴ = _lh_listcomp_fun²²(_lh_listcomp_fun_ls_t¹²)
//│ 				in let h¹⁴ = _lh_listcomp_fun_ls_h¹⁷
//│ 				in (fun _lh_dummy⁷ -> (1 + length_lh_₅(t¹⁴))) else _lh_listcomp_fun²²(_lh_listcomp_fun_ls_t¹²)))
//│ 		in let _lh_listcomp_fun_ls_h¹⁸ = [UL]
//│ 		in (fun _lh_listcomp_fun²³ -> (fun _lh_possibleMoves_arg1¹⁹ -> if canMove_lh_₁(_lh_possibleMoves_arg1¹⁹, _lh_listcomp_fun_ls_h¹⁸) then 
//│ 			let t¹⁵ = _lh_listcomp_fun²³(_lh_listcomp_fun_ls_t¹¹)
//│ 			in let h¹⁵ = _lh_listcomp_fun_ls_h¹⁸
//│ 			in (fun _lh_dummy⁸ -> (1 + length_lh_₅(t¹⁵))) else _lh_listcomp_fun²³(_lh_listcomp_fun_ls_t¹¹))))
//│ def possibleMoves_lh_₃(_lh_possibleMoves_arg1⁰) = 
//│ 	let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁰ -> _lh_listcomp_fun_para⁰(_lh_listcomp_fun⁴, _lh_possibleMoves_arg1⁰))
//│ 	in _lh_listcomp_fun⁴(
//│ 		let _lh_listcomp_fun_ls_t³ = 	
//│ 			let _lh_listcomp_fun_ls_t⁴ = 	
//│ 				let _lh_listcomp_fun_ls_t⁵ = 	
//│ 					let _lh_listcomp_fun_ls_t⁶ = 	
//│ 						let _lh_listcomp_fun_ls_t⁷ = 	
//│ 							let _lh_listcomp_fun_ls_t⁸ = 	
//│ 								let _lh_listcomp_fun_ls_t⁹ = 	
//│ 									let _lh_listcomp_fun_ls_t¹⁰ = (fun _lh_listcomp_fun⁵ -> (fun _lh_possibleMoves_arg1¹ -> (fun f¹ -> [LH_N])))
//│ 									in let _lh_listcomp_fun_ls_h³ = [RD]
//│ 									in (fun _lh_listcomp_fun⁶ -> (fun _lh_possibleMoves_arg1² -> if canMove_lh_₁(_lh_possibleMoves_arg1², _lh_listcomp_fun_ls_h³) then 
//│ 										let t⁰ = _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t¹⁰)
//│ 										in let h⁰ = _lh_listcomp_fun_ls_h³
//│ 										in (fun f² -> [LH_C f²(h⁰) map_lh_₃(f², t⁰)]) else _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t¹⁰)))
//│ 								in let _lh_listcomp_fun_ls_h⁴ = [RU]
//│ 								in (fun _lh_listcomp_fun⁷ -> (fun _lh_possibleMoves_arg1³ -> if canMove_lh_₁(_lh_possibleMoves_arg1³, _lh_listcomp_fun_ls_h⁴) then 
//│ 									let t¹ = _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁹)
//│ 									in let h¹ = _lh_listcomp_fun_ls_h⁴
//│ 									in (fun f³ -> [LH_C f³(h¹) map_lh_₃(f³, t¹)]) else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁹)))
//│ 							in let _lh_listcomp_fun_ls_h⁵ = [LD]
//│ 							in (fun _lh_listcomp_fun⁸ -> (fun _lh_possibleMoves_arg1⁴ -> if canMove_lh_₁(_lh_possibleMoves_arg1⁴, _lh_listcomp_fun_ls_h⁵) then 
//│ 								let t² = _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)
//│ 								in let h² = _lh_listcomp_fun_ls_h⁵
//│ 								in (fun f⁴ -> [LH_C f⁴(h²) map_lh_₃(f⁴, t²)]) else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)))
//│ 						in let _lh_listcomp_fun_ls_h⁶ = [LU]
//│ 						in (fun _lh_listcomp_fun⁹ -> (fun _lh_possibleMoves_arg1⁵ -> if canMove_lh_₁(_lh_possibleMoves_arg1⁵, _lh_listcomp_fun_ls_h⁶) then 
//│ 							let t³ = _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁷)
//│ 							in let h³ = _lh_listcomp_fun_ls_h⁶
//│ 							in (fun f⁵ -> [LH_C f⁵(h³) map_lh_₃(f⁵, t³)]) else _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁷)))
//│ 					in let _lh_listcomp_fun_ls_h⁷ = [DR]
//│ 					in (fun _lh_listcomp_fun¹⁰ -> (fun _lh_possibleMoves_arg1⁶ -> if canMove_lh_₁(_lh_possibleMoves_arg1⁶, _lh_listcomp_fun_ls_h⁷) then 
//│ 						let t⁴ = _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t⁶)
//│ 						in let h⁴ = _lh_listcomp_fun_ls_h⁷
//│ 						in (fun f⁶ -> [LH_C f⁶(h⁴) map_lh_₃(f⁶, t⁴)]) else _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t⁶)))
//│ 				in let _lh_listcomp_fun_ls_h⁸ = [DL]
//│ 				in (fun _lh_listcomp_fun¹¹ -> (fun _lh_possibleMoves_arg1⁷ -> if canMove_lh_₁(_lh_possibleMoves_arg1⁷, _lh_listcomp_fun_ls_h⁸) then 
//│ 					let t⁵ = _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t⁵)
//│ 					in let h⁵ = _lh_listcomp_fun_ls_h⁸
//│ 					in (fun f⁷ -> [LH_C f⁷(h⁵) map_lh_₃(f⁷, t⁵)]) else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t⁵)))
//│ 			in let _lh_listcomp_fun_ls_h⁹ = [UR]
//│ 			in (fun _lh_listcomp_fun¹² -> (fun _lh_possibleMoves_arg1⁸ -> if canMove_lh_₁(_lh_possibleMoves_arg1⁸, _lh_listcomp_fun_ls_h⁹) then 
//│ 				let t⁶ = _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁴)
//│ 				in let h⁶ = _lh_listcomp_fun_ls_h⁹
//│ 				in (fun f⁸ -> [LH_C f⁸(h⁶) map_lh_₃(f⁸, t⁶)]) else _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁴)))
//│ 		in let _lh_listcomp_fun_ls_h¹⁰ = [UL]
//│ 		in (fun _lh_listcomp_fun¹³ -> (fun _lh_possibleMoves_arg1⁹ -> if canMove_lh_₁(_lh_possibleMoves_arg1⁹, _lh_listcomp_fun_ls_h¹⁰) then 
//│ 			let t⁷ = _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t³)
//│ 			in let h⁷ = _lh_listcomp_fun_ls_h¹⁰
//│ 			in (fun f⁹ -> [LH_C f⁹(h⁷) map_lh_₃(f⁹, t⁷)]) else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t³))))
//│ def possibleMoves_lh_₄(_lh_possibleMoves_arg1³⁰) = 
//│ 	let _lh_listcomp_fun³⁹ = (fun _lh_listcomp_fun_para⁶ -> _lh_listcomp_fun_para⁶(_lh_listcomp_fun³⁹, _lh_possibleMoves_arg1³⁰))
//│ 	in _lh_listcomp_fun³⁹(
//│ 		let _lh_listcomp_fun_ls_t³⁰ = 	
//│ 			let _lh_listcomp_fun_ls_t³¹ = 	
//│ 				let _lh_listcomp_fun_ls_t³² = 	
//│ 					let _lh_listcomp_fun_ls_t³³ = 	
//│ 						let _lh_listcomp_fun_ls_t³⁴ = 	
//│ 							let _lh_listcomp_fun_ls_t³⁵ = 	
//│ 								let _lh_listcomp_fun_ls_t³⁶ = 	
//│ 									let _lh_listcomp_fun_ls_t³⁷ = (fun _lh_listcomp_fun⁴⁰ -> (fun _lh_possibleMoves_arg1³¹ -> (fun _lh_dummy⁴¹ -> 0)))
//│ 									in let _lh_listcomp_fun_ls_h³⁰ = [RD]
//│ 									in (fun _lh_listcomp_fun⁴¹ -> (fun _lh_possibleMoves_arg1³² -> if canMove_lh_₁(_lh_possibleMoves_arg1³², _lh_listcomp_fun_ls_h³⁰) then 
//│ 										let t¹¹⁸ = _lh_listcomp_fun⁴¹(_lh_listcomp_fun_ls_t³⁷)
//│ 										in let h¹¹⁸ = _lh_listcomp_fun_ls_h³⁰
//│ 										in (fun _lh_dummy⁴² -> (1 + length_lh_₆(t¹¹⁸))) else _lh_listcomp_fun⁴¹(_lh_listcomp_fun_ls_t³⁷)))
//│ 								in let _lh_listcomp_fun_ls_h³¹ = [RU]
//│ 								in (fun _lh_listcomp_fun⁴² -> (fun _lh_possibleMoves_arg1³³ -> if canMove_lh_₁(_lh_possibleMoves_arg1³³, _lh_listcomp_fun_ls_h³¹) then 
//│ 									let t¹¹⁹ = _lh_listcomp_fun⁴²(_lh_listcomp_fun_ls_t³⁶)
//│ 									in let h¹¹⁹ = _lh_listcomp_fun_ls_h³¹
//│ 									in (fun _lh_dummy⁴³ -> (1 + length_lh_₆(t¹¹⁹))) else _lh_listcomp_fun⁴²(_lh_listcomp_fun_ls_t³⁶)))
//│ 							in let _lh_listcomp_fun_ls_h³² = [LD]
//│ 							in (fun _lh_listcomp_fun⁴³ -> (fun _lh_possibleMoves_arg1³⁴ -> if canMove_lh_₁(_lh_possibleMoves_arg1³⁴, _lh_listcomp_fun_ls_h³²) then 
//│ 								let t¹²⁰ = _lh_listcomp_fun⁴³(_lh_listcomp_fun_ls_t³⁵)
//│ 								in let h¹²⁰ = _lh_listcomp_fun_ls_h³²
//│ 								in (fun _lh_dummy⁴⁴ -> (1 + length_lh_₆(t¹²⁰))) else _lh_listcomp_fun⁴³(_lh_listcomp_fun_ls_t³⁵)))
//│ 						in let _lh_listcomp_fun_ls_h³³ = [LU]
//│ 						in (fun _lh_listcomp_fun⁴⁴ -> (fun _lh_possibleMoves_arg1³⁵ -> if canMove_lh_₁(_lh_possibleMoves_arg1³⁵, _lh_listcomp_fun_ls_h³³) then 
//│ 							let t¹²¹ = _lh_listcomp_fun⁴⁴(_lh_listcomp_fun_ls_t³⁴)
//│ 							in let h¹²¹ = _lh_listcomp_fun_ls_h³³
//│ 							in (fun _lh_dummy⁴⁵ -> (1 + length_lh_₆(t¹²¹))) else _lh_listcomp_fun⁴⁴(_lh_listcomp_fun_ls_t³⁴)))
//│ 					in let _lh_listcomp_fun_ls_h³⁴ = [DR]
//│ 					in (fun _lh_listcomp_fun⁴⁵ -> (fun _lh_possibleMoves_arg1³⁶ -> if canMove_lh_₁(_lh_possibleMoves_arg1³⁶, _lh_listcomp_fun_ls_h³⁴) then 
//│ 						let t¹²² = _lh_listcomp_fun⁴⁵(_lh_listcomp_fun_ls_t³³)
//│ 						in let h¹²² = _lh_listcomp_fun_ls_h³⁴
//│ 						in (fun _lh_dummy⁴⁶ -> (1 + length_lh_₆(t¹²²))) else _lh_listcomp_fun⁴⁵(_lh_listcomp_fun_ls_t³³)))
//│ 				in let _lh_listcomp_fun_ls_h³⁵ = [DL]
//│ 				in (fun _lh_listcomp_fun⁴⁶ -> (fun _lh_possibleMoves_arg1³⁷ -> if canMove_lh_₁(_lh_possibleMoves_arg1³⁷, _lh_listcomp_fun_ls_h³⁵) then 
//│ 					let t¹²³ = _lh_listcomp_fun⁴⁶(_lh_listcomp_fun_ls_t³²)
//│ 					in let h¹²³ = _lh_listcomp_fun_ls_h³⁵
//│ 					in (fun _lh_dummy⁴⁷ -> (1 + length_lh_₆(t¹²³))) else _lh_listcomp_fun⁴⁶(_lh_listcomp_fun_ls_t³²)))
//│ 			in let _lh_listcomp_fun_ls_h³⁶ = [UR]
//│ 			in (fun _lh_listcomp_fun⁴⁷ -> (fun _lh_possibleMoves_arg1³⁸ -> if canMove_lh_₁(_lh_possibleMoves_arg1³⁸, _lh_listcomp_fun_ls_h³⁶) then 
//│ 				let t¹²⁴ = _lh_listcomp_fun⁴⁷(_lh_listcomp_fun_ls_t³¹)
//│ 				in let h¹²⁴ = _lh_listcomp_fun_ls_h³⁶
//│ 				in (fun _lh_dummy⁴⁸ -> (1 + length_lh_₆(t¹²⁴))) else _lh_listcomp_fun⁴⁷(_lh_listcomp_fun_ls_t³¹)))
//│ 		in let _lh_listcomp_fun_ls_h³⁷ = [UL]
//│ 		in (fun _lh_listcomp_fun⁴⁸ -> (fun _lh_possibleMoves_arg1³⁹ -> if canMove_lh_₁(_lh_possibleMoves_arg1³⁹, _lh_listcomp_fun_ls_h³⁷) then 
//│ 			let t¹²⁵ = _lh_listcomp_fun⁴⁸(_lh_listcomp_fun_ls_t³⁰)
//│ 			in let h¹²⁵ = _lh_listcomp_fun_ls_h³⁷
//│ 			in (fun _lh_dummy⁴⁹ -> (1 + length_lh_₆(t¹²⁵))) else _lh_listcomp_fun⁴⁸(_lh_listcomp_fun_ls_t³⁰))))
//│ def printBoard_lh_₁(_lh_printBoard_arg1⁰, _lh_printBoard_arg2⁰, _lh_printBoard_arg3⁰) = case _lh_printBoard_arg3⁰ of {
//│ 	LH_N  => if (_lh_printBoard_arg2⁰ > (_lh_printBoard_arg1⁰ * _lh_printBoard_arg1⁰)) then (fun ys¹⁰⁸ -> ys¹⁰⁸) else if ((_lh_printBoard_arg2⁰ % _lh_printBoard_arg1⁰) /= 0) then mappend_lh_₉(mappend_lh_₁₄(
//│ 		let t¹⁴⁶ = (fun ys¹⁰⁹ -> ys¹⁰⁹)
//│ 		in let h¹⁴⁶ = '*'
//│ 		in (fun ys¹¹⁰ -> 
//│ 			let t¹⁴⁷ = mappend_lh_₁₄(t¹⁴⁶, ys¹¹⁰)
//│ 			in let h¹⁴⁷ = h¹⁴⁶
//│ 			in (fun ys¹¹¹ -> 
//│ 				let t¹⁴⁸ = mappend_lh_₉(t¹⁴⁷, ys¹¹¹)
//│ 				in let h¹⁴⁸ = h¹⁴⁷
//│ 				in (fun ys¹¹² -> 
//│ 					let t¹⁴⁹ = mappend_lh_₄(t¹⁴⁸, ys¹¹²)
//│ 					in let h¹⁴⁹ = h¹⁴⁸
//│ 					in (fun _lh_dummy⁵⁵ -> (1 + length_lh_₁(t¹⁴⁹)))))), spaces_lh_₁((_lh_printBoard_arg1⁰ * _lh_printBoard_arg1⁰), 1)), printBoard_lh_₁(_lh_printBoard_arg1⁰, (_lh_printBoard_arg2⁰ + 1), [LH_N])) else if ((_lh_printBoard_arg2⁰ % _lh_printBoard_arg1⁰) == 0) then mappend_lh_₈(
//│ 		let t¹⁵⁰ = 	
//│ 			let t¹⁵¹ = (fun ys¹¹³ -> ys¹¹³)
//│ 			in let h¹⁵⁰ = '|'
//│ 			in (fun ys¹¹⁴ -> 
//│ 				let t¹⁵² = mappend_lh_₈(t¹⁵¹, ys¹¹⁴)
//│ 				in let h¹⁵¹ = h¹⁵⁰
//│ 				in (fun ys¹¹⁵ -> 
//│ 					let t¹⁵³ = mappend_lh_₄(t¹⁵², ys¹¹⁵)
//│ 					in let h¹⁵² = h¹⁵¹
//│ 					in (fun _lh_dummy⁵⁶ -> (1 + length_lh_₁(t¹⁵³)))))
//│ 		in let h¹⁵³ = '*'
//│ 		in (fun ys¹¹⁶ -> 
//│ 			let t¹⁵⁴ = mappend_lh_₈(t¹⁵⁰, ys¹¹⁶)
//│ 			in let h¹⁵⁴ = h¹⁵³
//│ 			in (fun ys¹¹⁷ -> 
//│ 				let t¹⁵⁵ = mappend_lh_₄(t¹⁵⁴, ys¹¹⁷)
//│ 				in let h¹⁵⁵ = h¹⁵⁴
//│ 				in (fun _lh_dummy⁵⁷ -> (1 + length_lh_₁(t¹⁵⁵))))), printBoard_lh_₁(_lh_printBoard_arg1⁰, (_lh_printBoard_arg2⁰ + 1), [LH_N])) else error⁰([LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 't' [LH_C 'B' [LH_C 'o' [LH_C 'a' [LH_C 'r' [LH_C 'd' [LH_C ' ' [LH_C 'e' [LH_C 'm' [LH_C 'p' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'l' [LH_C 'i' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 	| LH_C _lh_printBoard_LH_C_0⁰ _lh_printBoard_LH_C_1⁰ => case _lh_printBoard_LH_C_0⁰ of {
//│ 		LH_P2 _lh_printBoard_LH_P2_0⁰ _lh_printBoard_LH_P2_1⁰ => if ((_lh_printBoard_LH_P2_0⁰ == _lh_printBoard_arg2⁰) && ((_lh_printBoard_arg2⁰ % _lh_printBoard_arg1⁰) == 0)) then mappend_lh_₇(mappend_lh_₁₁(string_of_int⁰(_lh_printBoard_LH_P2_1⁰), 
//│ 			let t¹⁵⁶ = (fun ys¹¹⁸ -> ys¹¹⁸)
//│ 			in let h¹⁵⁶ = '|'
//│ 			in (fun ys¹¹⁹ -> 
//│ 				let t¹⁵⁷ = mappend_lh_₇(t¹⁵⁶, ys¹¹⁹)
//│ 				in let h¹⁵⁷ = h¹⁵⁶
//│ 				in (fun ys¹²⁰ -> 
//│ 					let t¹⁵⁸ = mappend_lh_₄(t¹⁵⁷, ys¹²⁰)
//│ 					in let h¹⁵⁸ = h¹⁵⁷
//│ 					in (fun _lh_dummy⁵⁸ -> (1 + length_lh_₁(t¹⁵⁸)))))), printBoard_lh_₁(_lh_printBoard_arg1⁰, (_lh_printBoard_arg2⁰ + 1), _lh_printBoard_LH_C_1⁰)) else if ((_lh_printBoard_LH_P2_0⁰ == _lh_printBoard_arg2⁰) && ((_lh_printBoard_arg2⁰ % _lh_printBoard_arg1⁰) /= 0)) then mappend_lh_₅(mappend_lh_₁₃(string_of_int⁰(_lh_printBoard_LH_P2_1⁰), spaces_lh_₂((_lh_printBoard_arg1⁰ * _lh_printBoard_arg1⁰), _lh_printBoard_LH_P2_1⁰)), printBoard_lh_₁(_lh_printBoard_arg1⁰, (_lh_printBoard_arg2⁰ + 1), _lh_printBoard_LH_C_1⁰)) else if ((_lh_printBoard_arg2⁰ % _lh_printBoard_arg1⁰) /= 0) then mappend_lh_₆(mappend_lh_₁₂(
//│ 			let t¹⁵⁹ = (fun ys¹²¹ -> ys¹²¹)
//│ 			in let h¹⁵⁹ = '*'
//│ 			in (fun ys¹²² -> 
//│ 				let t¹⁶⁰ = mappend_lh_₁₂(t¹⁵⁹, ys¹²²)
//│ 				in let h¹⁶⁰ = h¹⁵⁹
//│ 				in (fun ys¹²³ -> 
//│ 					let t¹⁶¹ = mappend_lh_₆(t¹⁶⁰, ys¹²³)
//│ 					in let h¹⁶¹ = h¹⁶⁰
//│ 					in (fun ys¹²⁴ -> 
//│ 						let t¹⁶² = mappend_lh_₄(t¹⁶¹, ys¹²⁴)
//│ 						in let h¹⁶² = h¹⁶¹
//│ 						in (fun _lh_dummy⁵⁹ -> (1 + length_lh_₁(t¹⁶²)))))), spaces_lh_₃((_lh_printBoard_arg1⁰ * _lh_printBoard_arg1⁰), 1)), printBoard_lh_₁(_lh_printBoard_arg1⁰, (_lh_printBoard_arg2⁰ + 1), [LH_C [LH_P2 _lh_printBoard_LH_P2_0⁰ _lh_printBoard_LH_P2_1⁰] _lh_printBoard_LH_C_1⁰])) else if ((_lh_printBoard_arg2⁰ % _lh_printBoard_arg1⁰) == 0) then mappend_lh_₁₀(
//│ 			let t¹⁶³ = 	
//│ 				let t¹⁶⁴ = (fun ys¹²⁵ -> ys¹²⁵)
//│ 				in let h¹⁶³ = '|'
//│ 				in (fun ys¹²⁶ -> 
//│ 					let t¹⁶⁵ = mappend_lh_₁₀(t¹⁶⁴, ys¹²⁶)
//│ 					in let h¹⁶⁴ = h¹⁶³
//│ 					in (fun ys¹²⁷ -> 
//│ 						let t¹⁶⁶ = mappend_lh_₄(t¹⁶⁵, ys¹²⁷)
//│ 						in let h¹⁶⁵ = h¹⁶⁴
//│ 						in (fun _lh_dummy⁶⁰ -> (1 + length_lh_₁(t¹⁶⁶)))))
//│ 			in let h¹⁶⁶ = '*'
//│ 			in (fun ys¹²⁸ -> 
//│ 				let t¹⁶⁷ = mappend_lh_₁₀(t¹⁶³, ys¹²⁸)
//│ 				in let h¹⁶⁷ = h¹⁶⁶
//│ 				in (fun ys¹²⁹ -> 
//│ 					let t¹⁶⁸ = mappend_lh_₄(t¹⁶⁷, ys¹²⁹)
//│ 					in let h¹⁶⁸ = h¹⁶⁷
//│ 					in (fun _lh_dummy⁶¹ -> (1 + length_lh_₁(t¹⁶⁸))))), printBoard_lh_₁(_lh_printBoard_arg1⁰, (_lh_printBoard_arg2⁰ + 1), [LH_C [LH_P2 _lh_printBoard_LH_P2_0⁰ _lh_printBoard_LH_P2_1⁰] _lh_printBoard_LH_C_1⁰])) else error⁰([LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 't' [LH_C 'B' [LH_C 'o' [LH_C 'a' [LH_C 'r' [LH_C 'd' [LH_C ' ' [LH_C 'n' [LH_C 'o' [LH_C 'n' [LH_C '-' [LH_C 'e' [LH_C 'm' [LH_C 'p' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'l' [LH_C 'i' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])}}
//│ def printTour_lh_₁(_lh_printTour_arg1⁰) = 
//│ 	let strToInt⁰ = (fun _lh_strToInt_arg1⁰ -> (fun _lh_strToInt_arg2⁰ -> case _lh_strToInt_arg2⁰ of {
//│ 			LH_N  => _lh_strToInt_arg1⁰
//│ 			| LH_C _lh_strToInt_LH_C_0⁰ _lh_strToInt_LH_C_1⁰ => strToInt⁰(((10 * _lh_strToInt_arg1⁰) + (int_of_char⁰(_lh_strToInt_LH_C_0⁰) - int_of_char⁰('0'))), _lh_strToInt_LH_C_1⁰)}))
//│ 	and pp³ = (fun _lh_pp_arg1⁰ -> _lh_pp_arg1⁰(pp³)) 
//│ 	in let _lh_matchIdent¹ = map_lh_₁(strToInt⁰(0), _lh_printTour_arg1⁰)
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_C _lh_printTour_LH_C_0² _lh_printTour_LH_C_1⁰ => case _lh_printTour_LH_C_1⁰ of {
//│ 			LH_C _lh_printTour_LH_C_0³ _lh_printTour_LH_C_1¹ => _lh_printTour_LH_C_1¹(_lh_printTour_LH_C_0³, _lh_printTour_LH_C_0², pp³)}}
//│ def quickSortIntChessSet_lh_₁(_lh_quickSortIntChessSet_arg1⁰) = case _lh_quickSortIntChessSet_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_quickSortIntChessSet_LH_C_0⁰ _lh_quickSortIntChessSet_LH_C_1⁰ => mappend_lh_₂₀(mappend_lh_₁₉(quickSortIntChessSet_lh_₁(
//│ 		let _lh_listcomp_fun⁵⁰ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {
//│ 			LH_C _lh_listcomp_fun_ls_h³⁹ _lh_listcomp_fun_ls_t³⁹ => if intChessSetComp_lh_₁(_lh_listcomp_fun_ls_h³⁹, _lh_quickSortIntChessSet_LH_C_0⁰) then [LH_C _lh_listcomp_fun_ls_h³⁹ _lh_listcomp_fun⁵⁰(_lh_listcomp_fun_ls_t³⁹)] else _lh_listcomp_fun⁵⁰(_lh_listcomp_fun_ls_t³⁹)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁵⁰(_lh_quickSortIntChessSet_LH_C_1⁰)), 
//│ 		let t¹³⁸ = (fun ys⁹⁸ -> ys⁹⁸)
//│ 		in let h¹³⁸ = _lh_quickSortIntChessSet_LH_C_0⁰
//│ 		in (fun ys⁹⁹ -> [LH_C h¹³⁸ mappend_lh_₂₀(t¹³⁸, ys⁹⁹)])), quickSortIntChessSet_lh_₁(
//│ 		let _lh_listcomp_fun⁵¹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁴⁰ _lh_listcomp_fun_ls_t⁴⁰ => if not⁰(intChessSetComp_lh_₂(_lh_listcomp_fun_ls_h⁴⁰, _lh_quickSortIntChessSet_LH_C_0⁰)) then [LH_C _lh_listcomp_fun_ls_h⁴⁰ _lh_listcomp_fun⁵¹(_lh_listcomp_fun_ls_t⁴⁰)] else _lh_listcomp_fun⁵¹(_lh_listcomp_fun_ls_t⁴⁰)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁵¹(_lh_quickSortIntChessSet_LH_C_1⁰)))}
//│ def quickSortIntInt_lh_₁(_lh_quickSortIntInt_arg1⁰) = case _lh_quickSortIntInt_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_quickSortIntInt_LH_C_0⁰ _lh_quickSortIntInt_LH_C_1⁰ => mappend_lh_₁₆(mappend_lh_₁₅(quickSortIntInt_lh_₁(
//│ 		let _lh_listcomp_fun³⁷ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 			LH_C _lh_listcomp_fun_ls_h²⁸ _lh_listcomp_fun_ls_t²⁸ => if intintComp_lh_₁(_lh_listcomp_fun_ls_h²⁸, _lh_quickSortIntInt_LH_C_0⁰) then [LH_C _lh_listcomp_fun_ls_h²⁸ _lh_listcomp_fun³⁷(_lh_listcomp_fun_ls_t²⁸)] else _lh_listcomp_fun³⁷(_lh_listcomp_fun_ls_t²⁸)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun³⁷(_lh_quickSortIntInt_LH_C_1⁰)), 
//│ 		let t¹¹⁷ = (fun ys⁸² -> ys⁸²)
//│ 		in let h¹¹⁷ = _lh_quickSortIntInt_LH_C_0⁰
//│ 		in (fun ys⁸³ -> [LH_C h¹¹⁷ mappend_lh_₁₆(t¹¹⁷, ys⁸³)])), quickSortIntInt_lh_₁(
//│ 		let _lh_listcomp_fun³⁸ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 			LH_C _lh_listcomp_fun_ls_h²⁹ _lh_listcomp_fun_ls_t²⁹ => if not⁰(intintComp_lh_₂(_lh_listcomp_fun_ls_h²⁹, _lh_quickSortIntInt_LH_C_0⁰)) then [LH_C _lh_listcomp_fun_ls_h²⁹ _lh_listcomp_fun³⁸(_lh_listcomp_fun_ls_t²⁹)] else _lh_listcomp_fun³⁸(_lh_listcomp_fun_ls_t²⁹)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun³⁸(_lh_quickSortIntInt_LH_C_1⁰)))}
//│ def removeFront_lh_₁(_lh_removeFront_arg1¹) = case _lh_removeFront_arg1¹ of {
//│ 	LH_N  => error⁰([LH_C 'C' [LH_C 'a' [LH_C 'n' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 'r' [LH_C 'e' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'r' [LH_C 'o' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_C 'e' [LH_C 'm' [LH_C 'p' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'Q' [LH_C 'u' [LH_C 'e' [LH_C 'u' [LH_C 'e' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 	| LH_C _lh_removeFront_LH_C_0¹ _lh_removeFront_LH_C_1¹ => _lh_removeFront_LH_C_1¹}
//│ def removeFront_lh_₂(_lh_removeFront_arg1⁰) = case _lh_removeFront_arg1⁰ of {
//│ 	LH_N  => error⁰([LH_C 'C' [LH_C 'a' [LH_C 'n' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 'r' [LH_C 'e' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'r' [LH_C 'o' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_C 'e' [LH_C 'm' [LH_C 'p' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'Q' [LH_C 'u' [LH_C 'e' [LH_C 'u' [LH_C 'e' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 	| LH_C _lh_removeFront_LH_C_0⁰ _lh_removeFront_LH_C_1⁰ => _lh_removeFront_LH_C_1⁰}
//│ def repeat_lh_₁(x⁰) = lazy⁰(
//│ 	let tx¹ = repeat_lh_₁(x⁰)
//│ 	in let hx¹ = x⁰
//│ 	in (fun hy⁰ -> (fun ty⁰ -> 
//│ 		let t²⁷ = zip_lz_nl_lh_₁(tx¹, ty⁰)
//│ 		in let h²⁷ = [LH_P2 hx¹ hy⁰]
//│ 		in (fun ys⁶ -> [LH_C h²⁷ mappend_lh_₁₇(t²⁷, ys⁶)]))))
//│ def repeat_lh_₂(x¹) = lazy⁰(
//│ 	let tx² = repeat_lh_₂(x¹)
//│ 	in let hx² = x¹
//│ 	in (fun hy¹ -> (fun ty¹ -> 
//│ 		let t¹¹⁰ = zip_lz_nl_lh_₂(tx², ty¹)
//│ 		in let h¹¹⁰ = [LH_P2 hx² hy¹]
//│ 		in (fun ys⁷³ -> [LH_C h¹¹⁰ mappend_lh_₁₈(t¹¹⁰, ys⁷³)]))))
//│ def root_lh_₁(_lh_root_arg1²) = addAllFront_lh_₁(zip_lz_nl_lh_₁(repeat_lh_₁((1 - (_lh_root_arg1² * _lh_root_arg1²))), zipWith_lh_₁(startTour_lh_₁, 
//│ 	let _lh_listcomp_fun⁵² = (fun _lh_listcomp_fun_para¹⁰ -> _lh_listcomp_fun_para¹⁰(_lh_listcomp_fun⁵², _lh_root_arg1²))
//│ 	in _lh_listcomp_fun⁵²(enumFromTo_lh_₂(1, _lh_root_arg1²)), copy_lh_₁((_lh_root_arg1² * _lh_root_arg1²), _lh_root_arg1²))), createQueue_lh_₁)
//│ def showChessSet_lh_₁(_lh_showChessSet_arg1⁰) = case _lh_showChessSet_arg1⁰ of {
//│ 	Board _lh_showChessSet_Board_0⁰ _lh_showChessSet_Board_1⁰ _lh_showChessSet_Board_2⁰ _lh_showChessSet_Board_3⁰ => 
//│ 		let sortedTrail⁰ = quickSortIntInt_lh_₁(assignMoveNo_lh_₁(_lh_showChessSet_Board_3⁰, _lh_showChessSet_Board_0⁰, _lh_showChessSet_Board_1⁰))
//│ 		in printBoard_lh_₁(_lh_showChessSet_Board_0⁰, 1, sortedTrail⁰)}
//│ def singleDescend_lh_₁(_lh_singleDescend_arg1⁰) = 
//│ 	let _lh_listcomp_fun⁵³ = (fun _lh_listcomp_fun_para¹¹ -> _lh_listcomp_fun_para¹¹(_lh_listcomp_fun⁵³))
//│ 	in _lh_listcomp_fun⁵³(descAndNo_lh_₂(_lh_singleDescend_arg1⁰))
//│ def sizeBoard_lh_₁(_lh_sizeBoard_arg1¹) = case _lh_sizeBoard_arg1¹ of {
//│ 	Board _lh_sizeBoard_Board_0¹ _lh_sizeBoard_Board_1¹ _lh_sizeBoard_Board_2¹ _lh_sizeBoard_Board_3¹ => _lh_sizeBoard_Board_0¹}
//│ def sizeBoard_lh_₂(_lh_sizeBoard_arg1²) = case _lh_sizeBoard_arg1² of {
//│ 	Board _lh_sizeBoard_Board_0² _lh_sizeBoard_Board_1² _lh_sizeBoard_Board_2² _lh_sizeBoard_Board_3² => _lh_sizeBoard_Board_0²}
//│ def sizeBoard_lh_₃(_lh_sizeBoard_arg1⁰) = case _lh_sizeBoard_arg1⁰ of {
//│ 	Board _lh_sizeBoard_Board_0⁰ _lh_sizeBoard_Board_1⁰ _lh_sizeBoard_Board_2⁰ _lh_sizeBoard_Board_3⁰ => _lh_sizeBoard_Board_0⁰}
//│ def spaces_lh_₁(_lh_spaces_arg1², _lh_spaces_arg2²) = 
//│ 	let logTen² = (fun _lh_logTen_arg1² -> case _lh_logTen_arg1² of {
//│ 		0  => 0
//│ 		| _  => (1 + logTen²(div⁰(_lh_logTen_arg1², 10)))})
//│ 	in copy_lh_₂(((logTen²(_lh_spaces_arg1²) - logTen²(_lh_spaces_arg2²)) + 1), ' ')
//│ def spaces_lh_₂(_lh_spaces_arg1¹, _lh_spaces_arg2¹) = 
//│ 	let logTen¹ = (fun _lh_logTen_arg1¹ -> case _lh_logTen_arg1¹ of {
//│ 		0  => 0
//│ 		| _  => (1 + logTen¹(div⁰(_lh_logTen_arg1¹, 10)))})
//│ 	in copy_lh_₃(((logTen¹(_lh_spaces_arg1¹) - logTen¹(_lh_spaces_arg2¹)) + 1), ' ')
//│ def spaces_lh_₃(_lh_spaces_arg1⁰, _lh_spaces_arg2⁰) = 
//│ 	let logTen⁰ = (fun _lh_logTen_arg1⁰ -> case _lh_logTen_arg1⁰ of {
//│ 		0  => 0
//│ 		| _  => (1 + logTen⁰(div⁰(_lh_logTen_arg1⁰, 10)))})
//│ 	in copy_lh_₄(((logTen⁰(_lh_spaces_arg1⁰) - logTen⁰(_lh_spaces_arg2⁰)) + 1), ' ')
//│ def startTour_lh_₁(_lh_startTour_arg1⁰, _lh_startTour_arg2⁰) = if ((_lh_startTour_arg2⁰ % 2) == 0) then createBoard_lh_₁(_lh_startTour_arg2⁰, _lh_startTour_arg1⁰) else error⁰([LH_C 'T' [LH_C 'o' [LH_C 'u' [LH_C 'r' [LH_C ' ' [LH_C 'd' [LH_C 'o' [LH_C 'e' [LH_C 's' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'x' [LH_C 'i' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C ' ' [LH_C 'o' [LH_C 'd' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'i' [LH_C 'z' [LH_C 'e' [LH_C ' ' [LH_C 'b' [LH_C 'o' [LH_C 'a' [LH_C 'r' [LH_C 'd' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ def take_lz_lh_₁(n³, ls⁹) = if (n³ > 0) then force⁰(ls⁹, n³) else (fun pp⁴ -> (fun _lh_dummy⁵⁴ -> 0))
//│ def testKnights_nofib_lh_₁(_lh_testKnights_nofib_arg1⁰) = 
//│ 	let all_digits⁰ = (fun _lh_all_digits_arg1⁰ -> foldr_lh_₂((fun _lh_funcomp_x⁰ -> (fun a² -> (fun b² -> (a² && b²)))(myIsDigit_lh_₁(_lh_funcomp_x⁰))), [True], _lh_all_digits_arg1⁰))
//│ 	and argsOk⁰ = (fun _lh_argsOk_arg1⁰ -> ((length_lh_₂(_lh_argsOk_arg1⁰) == 2) && foldr_lh_₁((fun _lh_funcomp_x¹ -> (fun a³ -> (fun b³ -> (a³ && b³)))(all_digits⁰(_lh_funcomp_x¹))), [True], _lh_argsOk_arg1⁰)))
//│ 	and usageString⁰ = [LH_C '|' [LH_C 'U' [LH_C 's' [LH_C 'a' [LH_C 'g' [LH_C 'e' [LH_C ':' [LH_C ' ' [LH_C 'k' [LH_C 'n' [LH_C 'i' [LH_C 'g' [LH_C 'h' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C '<' [LH_C 'b' [LH_C 'o' [LH_C 'a' [LH_C 'r' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'i' [LH_C 'z' [LH_C 'e' [LH_C '>' [LH_C ' ' [LH_C '<' [LH_C 'n' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C 's' [LH_C '>' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] 
//│ 	in if argsOk⁰(_lh_testKnights_nofib_arg1⁰) then length_lh_₁(printTour_lh_₁(_lh_testKnights_nofib_arg1⁰)) else error⁰(usageString⁰)
//│ def tourFinished_lh_₁(_lh_tourFinished_arg1⁰) = 
//│ 	let sze⁰ = sizeBoard_lh_₁(_lh_tourFinished_arg1⁰)
//│ 	in ((noPieces_lh_₁(_lh_tourFinished_arg1⁰) == (sze⁰ * sze⁰)) && canJumpFirst_lh_₁(_lh_tourFinished_arg1⁰))
//│ def zipWith_lh_₁(f¹⁷, xs²¹, ys¹⁰⁰) = xs²¹(f¹⁷, ys¹⁰⁰)
//│ def zip_lz_nl_lh_₁(xs²², ys¹⁰⁷) = ys¹⁰⁷(xs²²)
//│ def zip_lz_nl_lh_₂(xs²⁵, ys¹³²) = case ys¹³² of {
//│ 	LH_C hy⁴ ty⁴ => force⁰(xs²⁵, hy⁴, ty⁴)
//│ 	| LH_N  => (fun ys¹³³ -> ys¹³³)}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
