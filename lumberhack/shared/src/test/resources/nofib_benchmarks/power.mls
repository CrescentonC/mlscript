

:lhInHaskell
:lhGenOCaml
tree   = lazy (Pc 0 (composeSndLz list (lazy tree)))
list   = lazy (Pc 1 list)
ts = lazy (Pc 1 (multPsLzLz (lazy ts) (lazy ts)))
cosx dummy = minusPs (lazy (Pc 1 (lazy Pz))) (integral (integralLz (lazy (cosx 0))))
sinx dummy = integral (minusPs (lazy (Pc 1 (lazy Pz))) (integralLz (lazy (sinx 0))))
x = lazy (Pc 0 (lazy (Pc 1 (lazy Pz))))
-- The main implementation follows
data Pss a = Pz | Pc a (Ps a)
type Ps a = Lz (Pss a)
deriv:: Num a => Ps a -> Ps a
integral:: Fractional a => Ps a -> Ps a
compose:: (Eq a, Num a) => Ps a -> Ps a -> Ps a
revert:: (Eq a, Fractional a) => Ps a -> Ps a
dotMult:: Num a => a -> Ps a -> Ps a
x:: Num a => Ps a
extract :: Int -> Ps a -> [a]
extract n ps =
  if n == 0 then
    []
  else case (force ps) of
    Pz -> []
    (Pc x ps) -> x : (extract (n-1) ps)
dotMult c ps = lazy (case (force ps) of
  Pz -> Pz
  (Pc f fs) -> (Pc (c*f) (dotMult c fs)))
dotMultSndLz c ps = lazy (case (force (force ps)) of
  Pz -> Pz
  (Pc f fs) -> (Pc (c*f) (dotMult c fs)))
negatePs ps = lazy (case (force ps) of
  Pz -> Pz
  (Pc f fs) -> (Pc (0-f) (negatePs fs)))
addPs fss gs = lazy (case (force fss) of
  Pz -> force gs
  (Pc f fs) -> case (force gs) of
    Pz -> force fss
    (Pc g gs) -> (Pc (f+g) (addPs fs gs)))
minusPs a b = addPs a (negatePs b)
multPs fss gss = lazy (case (force fss) of
  Pz -> Pz
  (Pc f fs) -> case (force gss) of
    Pz -> Pz
    (Pc g gs) -> (Pc (f*g) (addPs (addPs (dotMult f gs) (dotMult g fs)) (multPs (multPs x fs) gs))))
multPsLzLz fss gss = lazy (case (force (force fss)) of
  Pz -> Pz
  (Pc f fs) -> case (force (force gss)) of
    Pz -> Pz
    (Pc g gs) -> (Pc (f*g) (addPs (addPs (dotMult f gs) (dotMult g fs)) (multPs (multPs x fs) gs))))
multPsFstLz fss gss = lazy (case (force (force fss)) of
  Pz -> Pz
  (Pc f fs) -> case (force gss) of
    Pz -> Pz
    (Pc g gs) -> (Pc (f*g) (addPs (addPs (dotMult f gs) (dotMult g fs)) (multPs (multPs x fs) gs))))
powerPs a n = if n <= 0 then (fromIntegerPs 1) else multPs a (powerPs a (n - 1))
fromIntegerPs 0 = lazy Pz
fromIntegerPs c = lazy (Pc (c) (lazy Pz))
divPs fss gss = lazy (case (force fss) of
  Pz -> case (force gss) of
    Pz -> error "power series 0/0"
    (Pc 0 gs) -> force (divPs (lazy Pz) gs)
    _ -> Pz
  (Pc 0 fs) -> case (force gss) of
    (Pc 0 gs) -> force (divPs fs gs)
    (Pc g gs) -> let q = 0 in (Pc q (divPs (addPs fs (negatePs (dotMult q gs))) (lazy (Pc g gs))))
  (Pc f fs) -> case (force gss) of
    (Pc g gs) -> let q = f/g in (Pc q (divPs (addPs fs (negatePs (dotMult q gs))) (lazy (Pc g gs)))))
recipPs fs = divPs (fromIntegerPs 1) fs
compose fss gss = lazy (case (force fss) of
  Pz -> Pz
  (Pc f fs) -> case (force gss) of
    Pz -> (Pc f (lazy Pz))
    (Pc 0 gs) -> (Pc f (multPs gs (compose fs (lazy (Pc 0 gs)))))
    _ -> force (addPs (lazy (Pc f (lazy Pz))) (multPs gss (compose fs gss))))
composeSndLz fss gss = lazy (case (force fss) of
  Pz -> Pz
  (Pc f fs) -> case (force (force gss)) of
    Pz -> (Pc f (lazy Pz))
    (Pc 0 gs) -> (Pc f (multPs gs (compose fs (lazy (Pc 0 gs)))))
    _ -> force (addPs (lazy (Pc f (lazy Pz))) (multPsFstLz gss (composeSndLz fs gss))))
revert fss = lazy (case (force fss) of
  (Pc 0 fs) -> force (let rs = lazy (Pc 0 (divPs (fromIntegerPs 1) (compose fs rs))) in rs)
  (Pc f0 kss) -> case (force kss) of
    (Pc f1 gss) -> case (force gss) of
      Pz -> (Pc ((0-1)/f1) (lazy (Pc (1/f1) (lazy Pz)))))
deriv fss = lazy (case (force fss) of
  Pz -> Pz
  (Pc _ fs) ->
    let deriv1 = \gss -> \n -> lazy (case (force gss) of { Pz -> Pz; (Pc f fs) -> (Pc (n*f) (deriv1 fs (n+1))) }) in
    force (deriv1 fs 1))
integral fs = lazy (Pc 0 (int1 fs 1)) where
  int1 = \fss -> \n -> lazy (case (force fss) of
    Pz -> Pz
    (Pc f fs) -> (Pc (f/n) (int1 fs (n+1))))
integralLz fs = lazy (Pc 0 (int1 fs 1)) where
  int1 = \fss -> \n -> lazy (case (force (force fss)) of
    Pz -> Pz
    (Pc f fs) -> (Pc (f/n) (int1 (lazy fs) (n+1))))
sqrtPs fss = lazy (case (force fss) of
  Pz -> Pz
  (Pc 0 gss) -> case (force gss) of
    (Pc 0 fs) -> (Pc 0 (sqrtPs fs))
  (Pc 1 fs) -> let qs = lazy (addPs (fromIntegerPs 1) (integral (divPs (deriv (lazy (Pc 1 fs))) (dotMultSndLz 2 qs)))) in (force (force qs)))
testPower_nofib p =
  [ extract p (minusPs ((sinx 0)) (sqrtPs (minusPs (fromIntegerPs 1) (powerPs ((cosx 0)) (2))))),
    extract p (minusPs (divPs ((sinx 0)) ((cosx 0))) (revert (integral (divPs (fromIntegerPs 1) (addPs (fromIntegerPs 1) (powerPs x (2))))))),
    extract p ts,
    extract p tree ]
testPower_nofib $ primId 14
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> after expansion >>>>>>>>>>
//│ testPower_nofib_lh_₁(primId⁰(14))
//│ def addPs_lh_₁(_lh_addPs_arg1⁵, _lh_addPs_arg2⁵) = lazy⁰(
//│ 	let _lh_matchIdent⁵¹ = force⁰(_lh_addPs_arg1⁵)
//│ 	in case _lh_matchIdent⁵¹ of {
//│ 		Pz  => force⁰(_lh_addPs_arg2⁵)
//│ 		| Pc _lh_addPs_Pc_0¹⁰ _lh_addPs_Pc_1¹⁰ => 
//│ 			let _lh_matchIdent⁵² = force⁰(_lh_addPs_arg2⁵)
//│ 			in case _lh_matchIdent⁵² of {
//│ 				Pz  => force⁰(_lh_addPs_arg1⁵)
//│ 				| Pc _lh_addPs_Pc_0¹¹ _lh_addPs_Pc_1¹¹ => [Pc (_lh_addPs_Pc_0¹⁰ + _lh_addPs_Pc_0¹¹) addPs_lh_₁(_lh_addPs_Pc_1¹⁰, _lh_addPs_Pc_1¹¹)]}})
//│ def addPs_lh_₂(_lh_addPs_arg1⁴, _lh_addPs_arg2⁴) = lazy⁰(
//│ 	let _lh_matchIdent³³ = force⁰(_lh_addPs_arg1⁴)
//│ 	in case _lh_matchIdent³³ of {
//│ 		Pz  => force⁰(_lh_addPs_arg2⁴)
//│ 		| Pc _lh_addPs_Pc_0⁸ _lh_addPs_Pc_1⁸ => 
//│ 			let _lh_matchIdent³⁴ = force⁰(_lh_addPs_arg2⁴)
//│ 			in case _lh_matchIdent³⁴ of {
//│ 				Pz  => force⁰(_lh_addPs_arg1⁴)
//│ 				| Pc _lh_addPs_Pc_0⁹ _lh_addPs_Pc_1⁹ => [Pc (_lh_addPs_Pc_0⁸ + _lh_addPs_Pc_0⁹) addPs_lh_₂(_lh_addPs_Pc_1⁸, _lh_addPs_Pc_1⁹)]}})
//│ def addPs_lh_₃(_lh_addPs_arg1³, _lh_addPs_arg2³) = lazy⁰(
//│ 	let _lh_matchIdent³¹ = force⁰(_lh_addPs_arg1³)
//│ 	in case _lh_matchIdent³¹ of {
//│ 		Pz  => force⁰(_lh_addPs_arg2³)
//│ 		| Pc _lh_addPs_Pc_0⁶ _lh_addPs_Pc_1⁶ => 
//│ 			let _lh_matchIdent³² = force⁰(_lh_addPs_arg2³)
//│ 			in case _lh_matchIdent³² of {
//│ 				Pz  => force⁰(_lh_addPs_arg1³)
//│ 				| Pc _lh_addPs_Pc_0⁷ _lh_addPs_Pc_1⁷ => [Pc (_lh_addPs_Pc_0⁶ + _lh_addPs_Pc_0⁷) addPs_lh_₃(_lh_addPs_Pc_1⁶, _lh_addPs_Pc_1⁷)]}})
//│ def addPs_lh_₄(_lh_addPs_arg1², _lh_addPs_arg2²) = lazy⁰(
//│ 	let _lh_matchIdent²⁵ = force⁰(_lh_addPs_arg1²)
//│ 	in case _lh_matchIdent²⁵ of {
//│ 		Pz  => force⁰(_lh_addPs_arg2²)
//│ 		| Pc _lh_addPs_Pc_0⁴ _lh_addPs_Pc_1⁴ => 
//│ 			let _lh_matchIdent²⁶ = force⁰(_lh_addPs_arg2²)
//│ 			in case _lh_matchIdent²⁶ of {
//│ 				Pz  => force⁰(_lh_addPs_arg1²)
//│ 				| Pc _lh_addPs_Pc_0⁵ _lh_addPs_Pc_1⁵ => [Pc (_lh_addPs_Pc_0⁴ + _lh_addPs_Pc_0⁵) addPs_lh_₄(_lh_addPs_Pc_1⁴, _lh_addPs_Pc_1⁵)]}})
//│ def addPs_lh_₅(_lh_addPs_arg1¹, _lh_addPs_arg2¹) = lazy⁰(
//│ 	let _lh_matchIdent¹⁶ = force⁰(_lh_addPs_arg1¹)
//│ 	in case _lh_matchIdent¹⁶ of {
//│ 		Pz  => force⁰(_lh_addPs_arg2¹)
//│ 		| Pc _lh_addPs_Pc_0² _lh_addPs_Pc_1² => 
//│ 			let _lh_matchIdent¹⁷ = force⁰(_lh_addPs_arg2¹)
//│ 			in case _lh_matchIdent¹⁷ of {
//│ 				Pz  => force⁰(_lh_addPs_arg1¹)
//│ 				| Pc _lh_addPs_Pc_0³ _lh_addPs_Pc_1³ => [Pc (_lh_addPs_Pc_0² + _lh_addPs_Pc_0³) addPs_lh_₅(_lh_addPs_Pc_1², _lh_addPs_Pc_1³)]}})
//│ def addPs_lh_₆(_lh_addPs_arg1⁰, _lh_addPs_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent¹¹ = force⁰(_lh_addPs_arg1⁰)
//│ 	in case _lh_matchIdent¹¹ of {
//│ 		Pz  => force⁰(_lh_addPs_arg2⁰)
//│ 		| Pc _lh_addPs_Pc_0⁰ _lh_addPs_Pc_1⁰ => 
//│ 			let _lh_matchIdent¹² = force⁰(_lh_addPs_arg2⁰)
//│ 			in case _lh_matchIdent¹² of {
//│ 				Pz  => force⁰(_lh_addPs_arg1⁰)
//│ 				| Pc _lh_addPs_Pc_0¹ _lh_addPs_Pc_1¹ => [Pc (_lh_addPs_Pc_0⁰ + _lh_addPs_Pc_0¹) addPs_lh_₆(_lh_addPs_Pc_1⁰, _lh_addPs_Pc_1¹)]}})
//│ def composeSndLz_lh_₁(_lh_composeSndLz_arg1⁰, _lh_composeSndLz_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent² = force⁰(_lh_composeSndLz_arg1⁰)
//│ 	in case _lh_matchIdent² of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_composeSndLz_Pc_0⁰ _lh_composeSndLz_Pc_1⁰ => 
//│ 			let _lh_matchIdent³ = force⁰(force⁰(_lh_composeSndLz_arg2⁰))
//│ 			in case _lh_matchIdent³ of {
//│ 				Pz  => [Pc _lh_composeSndLz_Pc_0⁰ lazy⁰([Pz])]
//│ 				| Pc _lh_composeSndLz_Pc_0¹ _lh_composeSndLz_Pc_1¹ => case _lh_composeSndLz_Pc_0¹ of {
//│ 					0  => [Pc _lh_composeSndLz_Pc_0⁰ multPs_lh_₁(_lh_composeSndLz_Pc_1¹, compose_lh_₁(_lh_composeSndLz_Pc_1⁰, lazy⁰([Pc 0 _lh_composeSndLz_Pc_1¹])))]
//│ 					| _  => force⁰(addPs_lh_₆(lazy⁰([Pc _lh_composeSndLz_Pc_0⁰ lazy⁰([Pz])]), multPsFstLz_lh_₁(_lh_composeSndLz_arg2⁰, composeSndLz_lh_₁(_lh_composeSndLz_Pc_1⁰, _lh_composeSndLz_arg2⁰))))}
//│ 				| _  => force⁰(addPs_lh_₆(lazy⁰([Pc _lh_composeSndLz_Pc_0⁰ lazy⁰([Pz])]), multPsFstLz_lh_₁(_lh_composeSndLz_arg2⁰, composeSndLz_lh_₁(_lh_composeSndLz_Pc_1⁰, _lh_composeSndLz_arg2⁰))))}})
//│ def compose_lh_₁(_lh_compose_arg1⁰, _lh_compose_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent⁸ = force⁰(_lh_compose_arg1⁰)
//│ 	in case _lh_matchIdent⁸ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_compose_Pc_0⁰ _lh_compose_Pc_1⁰ => 
//│ 			let _lh_matchIdent⁹ = force⁰(_lh_compose_arg2⁰)
//│ 			in case _lh_matchIdent⁹ of {
//│ 				Pz  => [Pc _lh_compose_Pc_0⁰ lazy⁰([Pz])]
//│ 				| Pc _lh_compose_Pc_0¹ _lh_compose_Pc_1¹ => case _lh_compose_Pc_0¹ of {
//│ 					0  => [Pc _lh_compose_Pc_0⁰ multPs_lh_₁(_lh_compose_Pc_1¹, compose_lh_₁(_lh_compose_Pc_1⁰, lazy⁰([Pc 0 _lh_compose_Pc_1¹])))]
//│ 					| _  => force⁰(addPs_lh_₆(lazy⁰([Pc _lh_compose_Pc_0⁰ lazy⁰([Pz])]), multPs_lh_₁(_lh_compose_arg2⁰, compose_lh_₁(_lh_compose_Pc_1⁰, _lh_compose_arg2⁰))))}
//│ 				| _  => force⁰(addPs_lh_₆(lazy⁰([Pc _lh_compose_Pc_0⁰ lazy⁰([Pz])]), multPs_lh_₁(_lh_compose_arg2⁰, compose_lh_₁(_lh_compose_Pc_1⁰, _lh_compose_arg2⁰))))}})
//│ def cosx_lh_₁(_lh_cosx_arg1¹) = minusPs_lh_₄(lazy⁰([Pc 1 lazy⁰([Pz])]), integral_lh_₂(integralLz_lh_₁(lazy⁰(cosx_lh_₁(0)))))
//│ def cosx_lh_₂(_lh_cosx_arg1⁰) = minusPs_lh_₅(lazy⁰([Pc 1 lazy⁰([Pz])]), integral_lh_₃(integralLz_lh_₂(lazy⁰(cosx_lh_₂(0)))))
//│ def deriv_lh_₁(_lh_deriv_arg1⁰) = lazy⁰(
//│ 	let _lh_matchIdent²⁸ = force⁰(_lh_deriv_arg1⁰)
//│ 	in case _lh_matchIdent²⁸ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_deriv_Pc_0⁰ _lh_deriv_Pc_1⁰ => 
//│ 			let deriv1⁰ = (fun gss⁰ -> (fun n¹ -> lazy⁰(
//│ 				let _lh_matchIdent²⁹ = force⁰(gss⁰)
//│ 				in case _lh_matchIdent²⁹ of {
//│ 					Pz  => [Pz]
//│ 					| Pc _lh_deriv_Pc_0¹ _lh_deriv_Pc_1¹ => [Pc (n¹ * _lh_deriv_Pc_0¹) deriv1⁰(_lh_deriv_Pc_1¹, (n¹ + 1))]})))
//│ 			in force⁰(deriv1⁰(_lh_deriv_Pc_1⁰, 1))})
//│ def divPs_lh_₁(_lh_divPs_arg1³, _lh_divPs_arg2³) = lazy⁰(
//│ 	let _lh_matchIdent⁵⁶ = force⁰(_lh_divPs_arg1³)
//│ 	in case _lh_matchIdent⁵⁶ of {
//│ 		Pz  => 
//│ 			let _lh_matchIdent⁵⁷ = force⁰(_lh_divPs_arg2³)
//│ 			in case _lh_matchIdent⁵⁷ of {
//│ 				Pz  => error⁰([LH_C 'p' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'r' [LH_C 'i' [LH_C 'e' [LH_C 's' [LH_C ' ' [LH_C '0' [LH_C '/' [LH_C '0' [LH_N]]]]]]]]]]]]]]]]])
//│ 				| Pc _lh_divPs_Pc_0¹² _lh_divPs_Pc_1¹² => case _lh_divPs_Pc_0¹² of {
//│ 					0  => force⁰(divPs_lh_₁(lazy⁰([Pz]), _lh_divPs_Pc_1¹²))
//│ 					| _  => [Pz]}
//│ 				| _  => [Pz]}
//│ 		| Pc _lh_divPs_Pc_0¹³ _lh_divPs_Pc_1¹³ => case _lh_divPs_Pc_0¹³ of {
//│ 			0  => 
//│ 				let _lh_matchIdent⁵⁸ = force⁰(_lh_divPs_arg2³)
//│ 				in case _lh_matchIdent⁵⁸ of {
//│ 					Pc _lh_divPs_Pc_0¹⁴ _lh_divPs_Pc_1¹⁴ => case _lh_divPs_Pc_0¹⁴ of {
//│ 						0  => force⁰(divPs_lh_₁(_lh_divPs_Pc_1¹³, _lh_divPs_Pc_1¹⁴))
//│ 						| _  => 
//│ 							let q⁶ = 0
//│ 							in [Pc q⁶ divPs_lh_₁(addPs_lh_₃(_lh_divPs_Pc_1¹³, negatePs_lh_₁(dotMult_lh_₂(q⁶, _lh_divPs_Pc_1¹⁴))), lazy⁰([Pc _lh_divPs_Pc_0¹⁴ _lh_divPs_Pc_1¹⁴]))]}}
//│ 			| _  => 
//│ 				let _lh_matchIdent⁵⁹ = force⁰(_lh_divPs_arg2³)
//│ 				in case _lh_matchIdent⁵⁹ of {
//│ 					Pc _lh_divPs_Pc_0¹⁵ _lh_divPs_Pc_1¹⁵ => 
//│ 						let q⁷ = (_lh_divPs_Pc_0¹³ / _lh_divPs_Pc_0¹⁵)
//│ 						in [Pc q⁷ divPs_lh_₁(addPs_lh_₂(_lh_divPs_Pc_1¹³, negatePs_lh_₂(dotMult_lh_₁(q⁷, _lh_divPs_Pc_1¹⁵))), lazy⁰([Pc _lh_divPs_Pc_0¹⁵ _lh_divPs_Pc_1¹⁵]))]}}})
//│ def divPs_lh_₂(_lh_divPs_arg1², _lh_divPs_arg2²) = lazy⁰(
//│ 	let _lh_matchIdent⁴³ = force⁰(_lh_divPs_arg1²)
//│ 	in case _lh_matchIdent⁴³ of {
//│ 		Pz  => 
//│ 			let _lh_matchIdent⁴⁴ = force⁰(_lh_divPs_arg2²)
//│ 			in case _lh_matchIdent⁴⁴ of {
//│ 				Pz  => error⁰([LH_C 'p' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'r' [LH_C 'i' [LH_C 'e' [LH_C 's' [LH_C ' ' [LH_C '0' [LH_C '/' [LH_C '0' [LH_N]]]]]]]]]]]]]]]]])
//│ 				| Pc _lh_divPs_Pc_0⁸ _lh_divPs_Pc_1⁸ => case _lh_divPs_Pc_0⁸ of {
//│ 					0  => force⁰(divPs_lh_₂(lazy⁰([Pz]), _lh_divPs_Pc_1⁸))
//│ 					| _  => [Pz]}
//│ 				| _  => [Pz]}
//│ 		| Pc _lh_divPs_Pc_0⁹ _lh_divPs_Pc_1⁹ => case _lh_divPs_Pc_0⁹ of {
//│ 			0  => 
//│ 				let _lh_matchIdent⁴⁵ = force⁰(_lh_divPs_arg2²)
//│ 				in case _lh_matchIdent⁴⁵ of {
//│ 					Pc _lh_divPs_Pc_0¹⁰ _lh_divPs_Pc_1¹⁰ => case _lh_divPs_Pc_0¹⁰ of {
//│ 						0  => force⁰(divPs_lh_₂(_lh_divPs_Pc_1⁹, _lh_divPs_Pc_1¹⁰))
//│ 						| _  => 
//│ 							let q⁴ = 0
//│ 							in [Pc q⁴ divPs_lh_₂(addPs_lh_₆(_lh_divPs_Pc_1⁹, negatePs_lh_₄(dotMult_lh_₂(q⁴, _lh_divPs_Pc_1¹⁰))), lazy⁰([Pc _lh_divPs_Pc_0¹⁰ _lh_divPs_Pc_1¹⁰]))]}}
//│ 			| _  => 
//│ 				let _lh_matchIdent⁴⁶ = force⁰(_lh_divPs_arg2²)
//│ 				in case _lh_matchIdent⁴⁶ of {
//│ 					Pc _lh_divPs_Pc_0¹¹ _lh_divPs_Pc_1¹¹ => 
//│ 						let q⁵ = (_lh_divPs_Pc_0⁹ / _lh_divPs_Pc_0¹¹)
//│ 						in [Pc q⁵ divPs_lh_₂(addPs_lh_₆(_lh_divPs_Pc_1⁹, negatePs_lh_₄(dotMult_lh_₂(q⁵, _lh_divPs_Pc_1¹¹))), lazy⁰([Pc _lh_divPs_Pc_0¹¹ _lh_divPs_Pc_1¹¹]))]}}})
//│ def divPs_lh_₃(_lh_divPs_arg1¹, _lh_divPs_arg2¹) = lazy⁰(
//│ 	let _lh_matchIdent²⁰ = force⁰(_lh_divPs_arg1¹)
//│ 	in case _lh_matchIdent²⁰ of {
//│ 		Pz  => 
//│ 			let _lh_matchIdent²¹ = force⁰(_lh_divPs_arg2¹)
//│ 			in case _lh_matchIdent²¹ of {
//│ 				Pz  => error⁰([LH_C 'p' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'r' [LH_C 'i' [LH_C 'e' [LH_C 's' [LH_C ' ' [LH_C '0' [LH_C '/' [LH_C '0' [LH_N]]]]]]]]]]]]]]]]])
//│ 				| Pc _lh_divPs_Pc_0⁴ _lh_divPs_Pc_1⁴ => case _lh_divPs_Pc_0⁴ of {
//│ 					0  => force⁰(divPs_lh_₃(lazy⁰([Pz]), _lh_divPs_Pc_1⁴))
//│ 					| _  => [Pz]}
//│ 				| _  => [Pz]}
//│ 		| Pc _lh_divPs_Pc_0⁵ _lh_divPs_Pc_1⁵ => case _lh_divPs_Pc_0⁵ of {
//│ 			0  => 
//│ 				let _lh_matchIdent²² = force⁰(_lh_divPs_arg2¹)
//│ 				in case _lh_matchIdent²² of {
//│ 					Pc _lh_divPs_Pc_0⁶ _lh_divPs_Pc_1⁶ => case _lh_divPs_Pc_0⁶ of {
//│ 						0  => force⁰(divPs_lh_₃(_lh_divPs_Pc_1⁵, _lh_divPs_Pc_1⁶))
//│ 						| _  => 
//│ 							let q² = 0
//│ 							in [Pc q² divPs_lh_₃(addPs_lh_₆(_lh_divPs_Pc_1⁵, negatePs_lh_₄(dotMult_lh_₂(q², _lh_divPs_Pc_1⁶))), lazy⁰([Pc _lh_divPs_Pc_0⁶ _lh_divPs_Pc_1⁶]))]}}
//│ 			| _  => 
//│ 				let _lh_matchIdent²³ = force⁰(_lh_divPs_arg2¹)
//│ 				in case _lh_matchIdent²³ of {
//│ 					Pc _lh_divPs_Pc_0⁷ _lh_divPs_Pc_1⁷ => 
//│ 						let q³ = (_lh_divPs_Pc_0⁵ / _lh_divPs_Pc_0⁷)
//│ 						in [Pc q³ divPs_lh_₃(addPs_lh_₆(_lh_divPs_Pc_1⁵, negatePs_lh_₄(dotMult_lh_₂(q³, _lh_divPs_Pc_1⁷))), lazy⁰([Pc _lh_divPs_Pc_0⁷ _lh_divPs_Pc_1⁷]))]}}})
//│ def divPs_lh_₄(_lh_divPs_arg1⁰, _lh_divPs_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent⁴ = force⁰(_lh_divPs_arg1⁰)
//│ 	in case _lh_matchIdent⁴ of {
//│ 		Pz  => 
//│ 			let _lh_matchIdent⁵ = force⁰(_lh_divPs_arg2⁰)
//│ 			in case _lh_matchIdent⁵ of {
//│ 				Pz  => error⁰([LH_C 'p' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'r' [LH_C 'i' [LH_C 'e' [LH_C 's' [LH_C ' ' [LH_C '0' [LH_C '/' [LH_C '0' [LH_N]]]]]]]]]]]]]]]]])
//│ 				| Pc _lh_divPs_Pc_0⁰ _lh_divPs_Pc_1⁰ => case _lh_divPs_Pc_0⁰ of {
//│ 					0  => force⁰(divPs_lh_₄(lazy⁰([Pz]), _lh_divPs_Pc_1⁰))
//│ 					| _  => [Pz]}
//│ 				| _  => [Pz]}
//│ 		| Pc _lh_divPs_Pc_0¹ _lh_divPs_Pc_1¹ => case _lh_divPs_Pc_0¹ of {
//│ 			0  => 
//│ 				let _lh_matchIdent⁶ = force⁰(_lh_divPs_arg2⁰)
//│ 				in case _lh_matchIdent⁶ of {
//│ 					Pc _lh_divPs_Pc_0² _lh_divPs_Pc_1² => case _lh_divPs_Pc_0² of {
//│ 						0  => force⁰(divPs_lh_₄(_lh_divPs_Pc_1¹, _lh_divPs_Pc_1²))
//│ 						| _  => 
//│ 							let q⁰ = 0
//│ 							in [Pc q⁰ divPs_lh_₄(addPs_lh_₆(_lh_divPs_Pc_1¹, negatePs_lh_₄(dotMult_lh_₂(q⁰, _lh_divPs_Pc_1²))), lazy⁰([Pc _lh_divPs_Pc_0² _lh_divPs_Pc_1²]))]}}
//│ 			| _  => 
//│ 				let _lh_matchIdent⁷ = force⁰(_lh_divPs_arg2⁰)
//│ 				in case _lh_matchIdent⁷ of {
//│ 					Pc _lh_divPs_Pc_0³ _lh_divPs_Pc_1³ => 
//│ 						let q¹ = (_lh_divPs_Pc_0¹ / _lh_divPs_Pc_0³)
//│ 						in [Pc q¹ divPs_lh_₄(addPs_lh_₆(_lh_divPs_Pc_1¹, negatePs_lh_₄(dotMult_lh_₂(q¹, _lh_divPs_Pc_1³))), lazy⁰([Pc _lh_divPs_Pc_0³ _lh_divPs_Pc_1³]))]}}})
//│ def dotMultSndLz_lh_₁(_lh_dotMultSndLz_arg1⁰, _lh_dotMultSndLz_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent²⁴ = force⁰(force⁰(_lh_dotMultSndLz_arg2⁰))
//│ 	in case _lh_matchIdent²⁴ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_dotMultSndLz_Pc_0⁰ _lh_dotMultSndLz_Pc_1⁰ => [Pc (_lh_dotMultSndLz_arg1⁰ * _lh_dotMultSndLz_Pc_0⁰) dotMult_lh_₂(_lh_dotMultSndLz_arg1⁰, _lh_dotMultSndLz_Pc_1⁰)]})
//│ def dotMult_lh_₁(_lh_dotMult_arg1¹, _lh_dotMult_arg2¹) = lazy⁰(
//│ 	let _lh_matchIdent³⁷ = force⁰(_lh_dotMult_arg2¹)
//│ 	in case _lh_matchIdent³⁷ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_dotMult_Pc_0¹ _lh_dotMult_Pc_1¹ => [Pc (_lh_dotMult_arg1¹ * _lh_dotMult_Pc_0¹) dotMult_lh_₁(_lh_dotMult_arg1¹, _lh_dotMult_Pc_1¹)]})
//│ def dotMult_lh_₂(_lh_dotMult_arg1⁰, _lh_dotMult_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent³⁵ = force⁰(_lh_dotMult_arg2⁰)
//│ 	in case _lh_matchIdent³⁵ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_dotMult_Pc_0⁰ _lh_dotMult_Pc_1⁰ => [Pc (_lh_dotMult_arg1⁰ * _lh_dotMult_Pc_0⁰) dotMult_lh_₂(_lh_dotMult_arg1⁰, _lh_dotMult_Pc_1⁰)]})
//│ def extract_lh_₁(_lh_extract_arg1³, _lh_extract_arg2³) = if (_lh_extract_arg1³ == 0) then [LH_N] else 
//│ 	let _lh_matchIdent⁶¹ = force⁰(_lh_extract_arg2³)
//│ 	in case _lh_matchIdent⁶¹ of {
//│ 		Pz  => [LH_N]
//│ 		| Pc _lh_extract_Pc_0³ _lh_extract_Pc_1³ => [LH_C _lh_extract_Pc_0³ extract_lh_₁((_lh_extract_arg1³ - 1), _lh_extract_Pc_1³)]}
//│ def extract_lh_₂(_lh_extract_arg1², _lh_extract_arg2²) = if (_lh_extract_arg1² == 0) then [LH_N] else 
//│ 	let _lh_matchIdent⁶⁰ = force⁰(_lh_extract_arg2²)
//│ 	in case _lh_matchIdent⁶⁰ of {
//│ 		Pz  => [LH_N]
//│ 		| Pc _lh_extract_Pc_0² _lh_extract_Pc_1² => [LH_C _lh_extract_Pc_0² extract_lh_₂((_lh_extract_arg1² - 1), _lh_extract_Pc_1²)]}
//│ def extract_lh_₃(_lh_extract_arg1¹, _lh_extract_arg2¹) = if (_lh_extract_arg1¹ == 0) then [LH_N] else 
//│ 	let _lh_matchIdent⁴⁷ = force⁰(_lh_extract_arg2¹)
//│ 	in case _lh_matchIdent⁴⁷ of {
//│ 		Pz  => [LH_N]
//│ 		| Pc _lh_extract_Pc_0¹ _lh_extract_Pc_1¹ => [LH_C _lh_extract_Pc_0¹ extract_lh_₃((_lh_extract_arg1¹ - 1), _lh_extract_Pc_1¹)]}
//│ def extract_lh_₄(_lh_extract_arg1⁰, _lh_extract_arg2⁰) = if (_lh_extract_arg1⁰ == 0) then [LH_N] else 
//│ 	let _lh_matchIdent⁴² = force⁰(_lh_extract_arg2⁰)
//│ 	in case _lh_matchIdent⁴² of {
//│ 		Pz  => [LH_N]
//│ 		| Pc _lh_extract_Pc_0⁰ _lh_extract_Pc_1⁰ => [LH_C _lh_extract_Pc_0⁰ extract_lh_₄((_lh_extract_arg1⁰ - 1), _lh_extract_Pc_1⁰)]}
//│ def fromIntegerPs_lh_₁(_lh_fromIntegerPs_arg1⁵) = case _lh_fromIntegerPs_arg1⁵ of {
//│ 	0  => lazy⁰([Pz])
//│ 	| _  => lazy⁰([Pc _lh_fromIntegerPs_arg1⁵ lazy⁰([Pz])])}
//│ def fromIntegerPs_lh_₂(_lh_fromIntegerPs_arg1⁴) = case _lh_fromIntegerPs_arg1⁴ of {
//│ 	0  => lazy⁰([Pz])
//│ 	| _  => lazy⁰([Pc _lh_fromIntegerPs_arg1⁴ lazy⁰([Pz])])}
//│ def fromIntegerPs_lh_₃(_lh_fromIntegerPs_arg1³) = case _lh_fromIntegerPs_arg1³ of {
//│ 	0  => lazy⁰([Pz])
//│ 	| _  => lazy⁰([Pc _lh_fromIntegerPs_arg1³ lazy⁰([Pz])])}
//│ def fromIntegerPs_lh_₄(_lh_fromIntegerPs_arg1²) = case _lh_fromIntegerPs_arg1² of {
//│ 	0  => lazy⁰([Pz])
//│ 	| _  => lazy⁰([Pc _lh_fromIntegerPs_arg1² lazy⁰([Pz])])}
//│ def fromIntegerPs_lh_₅(_lh_fromIntegerPs_arg1¹) = case _lh_fromIntegerPs_arg1¹ of {
//│ 	0  => lazy⁰([Pz])
//│ 	| _  => lazy⁰([Pc _lh_fromIntegerPs_arg1¹ lazy⁰([Pz])])}
//│ def fromIntegerPs_lh_₆(_lh_fromIntegerPs_arg1⁰) = case _lh_fromIntegerPs_arg1⁰ of {
//│ 	0  => lazy⁰([Pz])
//│ 	| _  => lazy⁰([Pc _lh_fromIntegerPs_arg1⁰ lazy⁰([Pz])])}
//│ def integralLz_lh_₁(_lh_integralLz_arg1¹) = 
//│ 	let int1⁴ = (fun fss⁴ -> (fun n⁵ -> lazy⁰(
//│ 		let _lh_matchIdent⁴¹ = force⁰(force⁰(fss⁴))
//│ 		in case _lh_matchIdent⁴¹ of {
//│ 			Pz  => [Pz]
//│ 			| Pc _lh_int1_Pc_0⁴ _lh_int1_Pc_1⁴ => [Pc (_lh_int1_Pc_0⁴ / n⁵) int1⁴(lazy⁰(_lh_int1_Pc_1⁴), (n⁵ + 1))]})))
//│ 	in lazy⁰([Pc 0 int1⁴(_lh_integralLz_arg1¹, 1)])
//│ def integralLz_lh_₂(_lh_integralLz_arg1⁰) = 
//│ 	let int1² = (fun fss² -> (fun n³ -> lazy⁰(
//│ 		let _lh_matchIdent³⁹ = force⁰(force⁰(fss²))
//│ 		in case _lh_matchIdent³⁹ of {
//│ 			Pz  => [Pz]
//│ 			| Pc _lh_int1_Pc_0² _lh_int1_Pc_1² => [Pc (_lh_int1_Pc_0² / n³) int1²(lazy⁰(_lh_int1_Pc_1²), (n³ + 1))]})))
//│ 	in lazy⁰([Pc 0 int1²(_lh_integralLz_arg1⁰, 1)])
//│ def integral_lh_₁(_lh_integral_arg1³) = 
//│ 	let int1⁵ = (fun fss⁵ -> (fun n⁶ -> lazy⁰(
//│ 		let _lh_matchIdent⁵³ = force⁰(fss⁵)
//│ 		in case _lh_matchIdent⁵³ of {
//│ 			Pz  => [Pz]
//│ 			| Pc _lh_int1_Pc_0⁵ _lh_int1_Pc_1⁵ => [Pc (_lh_int1_Pc_0⁵ / n⁶) int1⁵(_lh_int1_Pc_1⁵, (n⁶ + 1))]})))
//│ 	in lazy⁰([Pc 0 int1⁵(_lh_integral_arg1³, 1)])
//│ def integral_lh_₂(_lh_integral_arg1²) = 
//│ 	let int1³ = (fun fss³ -> (fun n⁴ -> lazy⁰(
//│ 		let _lh_matchIdent⁴⁰ = force⁰(fss³)
//│ 		in case _lh_matchIdent⁴⁰ of {
//│ 			Pz  => [Pz]
//│ 			| Pc _lh_int1_Pc_0³ _lh_int1_Pc_1³ => [Pc (_lh_int1_Pc_0³ / n⁴) int1³(_lh_int1_Pc_1³, (n⁴ + 1))]})))
//│ 	in lazy⁰([Pc 0 int1³(_lh_integral_arg1², 1)])
//│ def integral_lh_₃(_lh_integral_arg1¹) = 
//│ 	let int1¹ = (fun fss¹ -> (fun n² -> lazy⁰(
//│ 		let _lh_matchIdent³⁸ = force⁰(fss¹)
//│ 		in case _lh_matchIdent³⁸ of {
//│ 			Pz  => [Pz]
//│ 			| Pc _lh_int1_Pc_0¹ _lh_int1_Pc_1¹ => [Pc (_lh_int1_Pc_0¹ / n²) int1¹(_lh_int1_Pc_1¹, (n² + 1))]})))
//│ 	in lazy⁰([Pc 0 int1¹(_lh_integral_arg1¹, 1)])
//│ def integral_lh_₄(_lh_integral_arg1⁰) = 
//│ 	let int1⁰ = (fun fss⁰ -> (fun n⁰ -> lazy⁰(
//│ 		let _lh_matchIdent²⁷ = force⁰(fss⁰)
//│ 		in case _lh_matchIdent²⁷ of {
//│ 			Pz  => [Pz]
//│ 			| Pc _lh_int1_Pc_0⁰ _lh_int1_Pc_1⁰ => [Pc (_lh_int1_Pc_0⁰ / n⁰) int1⁰(_lh_int1_Pc_1⁰, (n⁰ + 1))]})))
//│ 	in lazy⁰([Pc 0 int1⁰(_lh_integral_arg1⁰, 1)])
//│ def list_lh_₁ = lazy⁰([Pc 1 list_lh_₁])
//│ def minusPs_lh_₁(_lh_minusPs_arg1⁴, _lh_minusPs_arg2⁴) = addPs_lh_₅(_lh_minusPs_arg1⁴, negatePs_lh_₃(_lh_minusPs_arg2⁴))
//│ def minusPs_lh_₂(_lh_minusPs_arg1³, _lh_minusPs_arg2³) = addPs_lh_₆(_lh_minusPs_arg1³, negatePs_lh_₄(_lh_minusPs_arg2³))
//│ def minusPs_lh_₃(_lh_minusPs_arg1², _lh_minusPs_arg2²) = addPs_lh_₆(_lh_minusPs_arg1², negatePs_lh_₄(_lh_minusPs_arg2²))
//│ def minusPs_lh_₄(_lh_minusPs_arg1¹, _lh_minusPs_arg2¹) = addPs_lh_₆(_lh_minusPs_arg1¹, negatePs_lh_₄(_lh_minusPs_arg2¹))
//│ def minusPs_lh_₅(_lh_minusPs_arg1⁰, _lh_minusPs_arg2⁰) = addPs_lh_₆(_lh_minusPs_arg1⁰, negatePs_lh_₄(_lh_minusPs_arg2⁰))
//│ def multPsFstLz_lh_₁(_lh_multPsFstLz_arg1⁰, _lh_multPsFstLz_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent⁰ = force⁰(force⁰(_lh_multPsFstLz_arg1⁰))
//│ 	in case _lh_matchIdent⁰ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_multPsFstLz_Pc_0⁰ _lh_multPsFstLz_Pc_1⁰ => 
//│ 			let _lh_matchIdent¹ = force⁰(_lh_multPsFstLz_arg2⁰)
//│ 			in case _lh_matchIdent¹ of {
//│ 				Pz  => [Pz]
//│ 				| Pc _lh_multPsFstLz_Pc_0¹ _lh_multPsFstLz_Pc_1¹ => [Pc (_lh_multPsFstLz_Pc_0⁰ * _lh_multPsFstLz_Pc_0¹) addPs_lh_₆(addPs_lh_₆(dotMult_lh_₂(_lh_multPsFstLz_Pc_0⁰, _lh_multPsFstLz_Pc_1¹), dotMult_lh_₂(_lh_multPsFstLz_Pc_0¹, _lh_multPsFstLz_Pc_1⁰)), multPs_lh_₁(multPs_lh_₁(x_lh_₁, _lh_multPsFstLz_Pc_1⁰), _lh_multPsFstLz_Pc_1¹))]}})
//│ def multPsLzLz_lh_₁(_lh_multPsLzLz_arg1⁰, _lh_multPsLzLz_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent¹³ = force⁰(force⁰(_lh_multPsLzLz_arg1⁰))
//│ 	in case _lh_matchIdent¹³ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_multPsLzLz_Pc_0⁰ _lh_multPsLzLz_Pc_1⁰ => 
//│ 			let _lh_matchIdent¹⁴ = force⁰(force⁰(_lh_multPsLzLz_arg2⁰))
//│ 			in case _lh_matchIdent¹⁴ of {
//│ 				Pz  => [Pz]
//│ 				| Pc _lh_multPsLzLz_Pc_0¹ _lh_multPsLzLz_Pc_1¹ => [Pc (_lh_multPsLzLz_Pc_0⁰ * _lh_multPsLzLz_Pc_0¹) addPs_lh_₆(addPs_lh_₆(dotMult_lh_₂(_lh_multPsLzLz_Pc_0⁰, _lh_multPsLzLz_Pc_1¹), dotMult_lh_₂(_lh_multPsLzLz_Pc_0¹, _lh_multPsLzLz_Pc_1⁰)), multPs_lh_₁(multPs_lh_₁(x_lh_₁, _lh_multPsLzLz_Pc_1⁰), _lh_multPsLzLz_Pc_1¹))]}})
//│ def multPs_lh_₁(_lh_multPs_arg1⁰, _lh_multPs_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent¹⁸ = force⁰(_lh_multPs_arg1⁰)
//│ 	in case _lh_matchIdent¹⁸ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_multPs_Pc_0⁰ _lh_multPs_Pc_1⁰ => 
//│ 			let _lh_matchIdent¹⁹ = force⁰(_lh_multPs_arg2⁰)
//│ 			in case _lh_matchIdent¹⁹ of {
//│ 				Pz  => [Pz]
//│ 				| Pc _lh_multPs_Pc_0¹ _lh_multPs_Pc_1¹ => [Pc (_lh_multPs_Pc_0⁰ * _lh_multPs_Pc_0¹) addPs_lh_₆(addPs_lh_₆(dotMult_lh_₂(_lh_multPs_Pc_0⁰, _lh_multPs_Pc_1¹), dotMult_lh_₂(_lh_multPs_Pc_0¹, _lh_multPs_Pc_1⁰)), multPs_lh_₁(multPs_lh_₁(x_lh_₁, _lh_multPs_Pc_1⁰), _lh_multPs_Pc_1¹))]}})
//│ def negatePs_lh_₁(_lh_negatePs_arg1³) = lazy⁰(
//│ 	let _lh_matchIdent³⁶ = force⁰(_lh_negatePs_arg1³)
//│ 	in case _lh_matchIdent³⁶ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_negatePs_Pc_0³ _lh_negatePs_Pc_1³ => [Pc (0 - _lh_negatePs_Pc_0³) negatePs_lh_₁(_lh_negatePs_Pc_1³)]})
//│ def negatePs_lh_₂(_lh_negatePs_arg1²) = lazy⁰(
//│ 	let _lh_matchIdent³⁰ = force⁰(_lh_negatePs_arg1²)
//│ 	in case _lh_matchIdent³⁰ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_negatePs_Pc_0² _lh_negatePs_Pc_1² => [Pc (0 - _lh_negatePs_Pc_0²) negatePs_lh_₂(_lh_negatePs_Pc_1²)]})
//│ def negatePs_lh_₃(_lh_negatePs_arg1¹) = lazy⁰(
//│ 	let _lh_matchIdent¹⁵ = force⁰(_lh_negatePs_arg1¹)
//│ 	in case _lh_matchIdent¹⁵ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_negatePs_Pc_0¹ _lh_negatePs_Pc_1¹ => [Pc (0 - _lh_negatePs_Pc_0¹) negatePs_lh_₃(_lh_negatePs_Pc_1¹)]})
//│ def negatePs_lh_₄(_lh_negatePs_arg1⁰) = lazy⁰(
//│ 	let _lh_matchIdent¹⁰ = force⁰(_lh_negatePs_arg1⁰)
//│ 	in case _lh_matchIdent¹⁰ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_negatePs_Pc_0⁰ _lh_negatePs_Pc_1⁰ => [Pc (0 - _lh_negatePs_Pc_0⁰) negatePs_lh_₄(_lh_negatePs_Pc_1⁰)]})
//│ def powerPs_lh_₁(_lh_powerPs_arg1¹, _lh_powerPs_arg2¹) = if (_lh_powerPs_arg2¹ <= 0) then fromIntegerPs_lh_₅(1) else multPs_lh_₁(_lh_powerPs_arg1¹, powerPs_lh_₁(_lh_powerPs_arg1¹, (_lh_powerPs_arg2¹ - 1)))
//│ def powerPs_lh_₂(_lh_powerPs_arg1⁰, _lh_powerPs_arg2⁰) = if (_lh_powerPs_arg2⁰ <= 0) then fromIntegerPs_lh_₆(1) else multPs_lh_₁(_lh_powerPs_arg1⁰, powerPs_lh_₂(_lh_powerPs_arg1⁰, (_lh_powerPs_arg2⁰ - 1)))
//│ def revert_lh_₁(_lh_revert_arg1⁰) = lazy⁰(
//│ 	let _lh_matchIdent⁴⁸ = force⁰(_lh_revert_arg1⁰)
//│ 	in case _lh_matchIdent⁴⁸ of {
//│ 		Pc _lh_revert_Pc_0⁰ _lh_revert_Pc_1⁰ => case _lh_revert_Pc_0⁰ of {
//│ 			0  => force⁰(
//│ 				let rs⁰ = lazy⁰([Pc 0 divPs_lh_₄(fromIntegerPs_lh_₆(1), compose_lh_₁(_lh_revert_Pc_1⁰, rs⁰))])
//│ 				in rs⁰)
//│ 			| _  => 
//│ 				let _lh_matchIdent⁴⁹ = force⁰(_lh_revert_Pc_1⁰)
//│ 				in case _lh_matchIdent⁴⁹ of {
//│ 					Pc _lh_revert_Pc_0¹ _lh_revert_Pc_1¹ => 
//│ 						let _lh_matchIdent⁵⁰ = force⁰(_lh_revert_Pc_1¹)
//│ 						in case _lh_matchIdent⁵⁰ of {
//│ 							Pz  => [Pc ((0 - 1) / _lh_revert_Pc_0¹) lazy⁰([Pc (1 / _lh_revert_Pc_0¹) lazy⁰([Pz])])]}}}})
//│ def sinx_lh_₁(_lh_sinx_arg1¹) = integral_lh_₄(minusPs_lh_₅(lazy⁰([Pc 1 lazy⁰([Pz])]), integralLz_lh_₂(lazy⁰(sinx_lh_₁(0)))))
//│ def sinx_lh_₂(_lh_sinx_arg1⁰) = integral_lh_₄(minusPs_lh_₅(lazy⁰([Pc 1 lazy⁰([Pz])]), integralLz_lh_₂(lazy⁰(sinx_lh_₂(0)))))
//│ def sqrtPs_lh_₁(_lh_sqrtPs_arg1⁰) = lazy⁰(
//│ 	let _lh_matchIdent⁵⁴ = force⁰(_lh_sqrtPs_arg1⁰)
//│ 	in case _lh_matchIdent⁵⁴ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_sqrtPs_Pc_0⁰ _lh_sqrtPs_Pc_1⁰ => case _lh_sqrtPs_Pc_0⁰ of {
//│ 			0  => 
//│ 				let _lh_matchIdent⁵⁵ = force⁰(_lh_sqrtPs_Pc_1⁰)
//│ 				in case _lh_matchIdent⁵⁵ of {
//│ 					Pc _lh_sqrtPs_Pc_0¹ _lh_sqrtPs_Pc_1¹ => case _lh_sqrtPs_Pc_0¹ of {
//│ 						0  => [Pc 0 sqrtPs_lh_₁(_lh_sqrtPs_Pc_1¹)]}}
//│ 			| 1  => 
//│ 				let qs⁰ = lazy⁰(addPs_lh_₄(fromIntegerPs_lh_₄(1), integral_lh_₄(divPs_lh_₃(deriv_lh_₁(lazy⁰([Pc 1 _lh_sqrtPs_Pc_1⁰])), dotMultSndLz_lh_₁(2, qs⁰)))))
//│ 				in force⁰(force⁰(qs⁰))}})
//│ def testPower_nofib_lh_₁(_lh_testPower_nofib_arg1⁰) = [LH_C extract_lh_₃(_lh_testPower_nofib_arg1⁰, minusPs_lh_₁(sinx_lh_₁(0), sqrtPs_lh_₁(minusPs_lh_₃(fromIntegerPs_lh_₂(1), powerPs_lh_₂(cosx_lh_₁(0), 2))))) [LH_C extract_lh_₁(_lh_testPower_nofib_arg1⁰, minusPs_lh_₂(divPs_lh_₁(sinx_lh_₂(0), cosx_lh_₂(0)), revert_lh_₁(integral_lh_₁(divPs_lh_₂(fromIntegerPs_lh_₁(1), addPs_lh_₁(fromIntegerPs_lh_₃(1), powerPs_lh_₁(x_lh_₁, 2))))))) [LH_C extract_lh_₂(_lh_testPower_nofib_arg1⁰, ts_lh_₁) [LH_C extract_lh_₄(_lh_testPower_nofib_arg1⁰, tree_lh_₁) [LH_N]]]]]
//│ def tree_lh_₁ = lazy⁰([Pc 0 composeSndLz_lh_₁(list_lh_₁, lazy⁰(tree_lh_₁))])
//│ def ts_lh_₁ = lazy⁰([Pc 1 multPsLzLz_lh_₁(lazy⁰(ts_lh_₁), lazy⁰(ts_lh_₁))])
//│ def x_lh_₁ = lazy⁰([Pc 0 lazy⁰([Pc 1 lazy⁰([Pz])])])
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec addPs_lh__d6 _lh_addPs_arg1_0 _lh_addPs_arg2_0 =
//│ 		  (lazy (let rec _lh_matchIdent_1_1 = (Lazy.force _lh_addPs_arg1_0) in
//│ 		    (match _lh_matchIdent_1_1 with
//│ 		      | `Pz -> 
//│ 		        (Lazy.force _lh_addPs_arg2_0)
//│ 		      | `Pc(_lh_addPs_Pc_0_0, _lh_addPs_Pc_1_0) -> 
//│ 		        (let rec _lh_matchIdent_1_2 = (Lazy.force _lh_addPs_arg2_0) in
//│ 		          (match _lh_matchIdent_1_2 with
//│ 		            | `Pz -> 
//│ 		              (Lazy.force _lh_addPs_arg1_0)
//│ 		            | `Pc(_lh_addPs_Pc_0_1, _lh_addPs_Pc_1_1) -> 
//│ 		              (`Pc((_lh_addPs_Pc_0_0 + _lh_addPs_Pc_0_1), ((addPs_lh__d6 _lh_addPs_Pc_1_0) _lh_addPs_Pc_1_1))))))));;
//│ 		let rec x_lh__d1 =
//│ 		  (lazy (`Pc(0, (lazy (`Pc(1, (lazy (`Pz))))))));;
//│ 		let rec dotMult_lh__d2 _lh_dotMult_arg1_0 _lh_dotMult_arg2_0 =
//│ 		  (lazy (let rec _lh_matchIdent_3_5 = (Lazy.force _lh_dotMult_arg2_0) in
//│ 		    (match _lh_matchIdent_3_5 with
//│ 		      | `Pz -> 
//│ 		        (`Pz)
//│ 		      | `Pc(_lh_dotMult_Pc_0_0, _lh_dotMult_Pc_1_0) -> 
//│ 		        (`Pc((_lh_dotMult_arg1_0 * _lh_dotMult_Pc_0_0), ((dotMult_lh__d2 _lh_dotMult_arg1_0) _lh_dotMult_Pc_1_0))))));;
//│ 		let rec multPs_lh__d1 _lh_multPs_arg1_0 _lh_multPs_arg2_0 =
//│ 		  (lazy (let rec _lh_matchIdent_1_8 = (Lazy.force _lh_multPs_arg1_0) in
//│ 		    (match _lh_matchIdent_1_8 with
//│ 		      | `Pz -> 
//│ 		        (`Pz)
//│ 		      | `Pc(_lh_multPs_Pc_0_0, _lh_multPs_Pc_1_0) -> 
//│ 		        (let rec _lh_matchIdent_1_9 = (Lazy.force _lh_multPs_arg2_0) in
//│ 		          (match _lh_matchIdent_1_9 with
//│ 		            | `Pz -> 
//│ 		              (`Pz)
//│ 		            | `Pc(_lh_multPs_Pc_0_1, _lh_multPs_Pc_1_1) -> 
//│ 		              (`Pc((_lh_multPs_Pc_0_0 * _lh_multPs_Pc_0_1), ((addPs_lh__d6 ((addPs_lh__d6 ((dotMult_lh__d2 _lh_multPs_Pc_0_0) _lh_multPs_Pc_1_1)) ((dotMult_lh__d2 _lh_multPs_Pc_0_1) _lh_multPs_Pc_1_0))) ((multPs_lh__d1 ((multPs_lh__d1 x_lh__d1) _lh_multPs_Pc_1_0)) _lh_multPs_Pc_1_1)))))))));;
//│ 		let rec compose_lh__d1 _lh_compose_arg1_0 _lh_compose_arg2_0 =
//│ 		  (lazy (let rec _lh_matchIdent_8 = (Lazy.force _lh_compose_arg1_0) in
//│ 		    (match _lh_matchIdent_8 with
//│ 		      | `Pz -> 
//│ 		        (`Pz)
//│ 		      | `Pc(_lh_compose_Pc_0_0, _lh_compose_Pc_1_0) -> 
//│ 		        (let rec _lh_matchIdent_9 = (Lazy.force _lh_compose_arg2_0) in
//│ 		          (match _lh_matchIdent_9 with
//│ 		            | `Pz -> 
//│ 		              (`Pc(_lh_compose_Pc_0_0, (lazy (`Pz))))
//│ 		            | `Pc(_lh_compose_Pc_0_1, _lh_compose_Pc_1_1) -> 
//│ 		              (match _lh_compose_Pc_0_1 with
//│ 		                | 0 -> 
//│ 		                  (`Pc(_lh_compose_Pc_0_0, ((multPs_lh__d1 _lh_compose_Pc_1_1) ((compose_lh__d1 _lh_compose_Pc_1_0) (lazy (`Pc(0, _lh_compose_Pc_1_1)))))))
//│ 		                | _ -> 
//│ 		                  (Lazy.force ((addPs_lh__d6 (lazy (`Pc(_lh_compose_Pc_0_0, (lazy (`Pz)))))) ((multPs_lh__d1 _lh_compose_arg2_0) ((compose_lh__d1 _lh_compose_Pc_1_0) _lh_compose_arg2_0)))))
//│ 		            | _ -> 
//│ 		              (Lazy.force ((addPs_lh__d6 (lazy (`Pc(_lh_compose_Pc_0_0, (lazy (`Pz)))))) ((multPs_lh__d1 _lh_compose_arg2_0) ((compose_lh__d1 _lh_compose_Pc_1_0) _lh_compose_arg2_0)))))))));;
//│ 		let rec fromIntegerPs_lh__d6 _lh_fromIntegerPs_arg1_0 =
//│ 		  (match _lh_fromIntegerPs_arg1_0 with
//│ 		    | 0 -> 
//│ 		      (lazy (`Pz))
//│ 		    | _ -> 
//│ 		      (lazy (`Pc(_lh_fromIntegerPs_arg1_0, (lazy (`Pz))))));;
//│ 		let rec negatePs_lh__d4 _lh_negatePs_arg1_0 =
//│ 		  (lazy (let rec _lh_matchIdent_1_0 = (Lazy.force _lh_negatePs_arg1_0) in
//│ 		    (match _lh_matchIdent_1_0 with
//│ 		      | `Pz -> 
//│ 		        (`Pz)
//│ 		      | `Pc(_lh_negatePs_Pc_0_0, _lh_negatePs_Pc_1_0) -> 
//│ 		        (`Pc((0 - _lh_negatePs_Pc_0_0), (negatePs_lh__d4 _lh_negatePs_Pc_1_0))))));;
//│ 		let rec divPs_lh__d4 _lh_divPs_arg1_0 _lh_divPs_arg2_0 =
//│ 		  (lazy (let rec _lh_matchIdent_4 = (Lazy.force _lh_divPs_arg1_0) in
//│ 		    (match _lh_matchIdent_4 with
//│ 		      | `Pz -> 
//│ 		        (let rec _lh_matchIdent_5 = (Lazy.force _lh_divPs_arg2_0) in
//│ 		          (match _lh_matchIdent_5 with
//│ 		            | `Pz -> 
//│ 		              (failwith "msg"(`LH_C('p', (`LH_C('o', (`LH_C('w', (`LH_C('e', (`LH_C('r', (`LH_C(' ', (`LH_C('s', (`LH_C('e', (`LH_C('r', (`LH_C('i', (`LH_C('e', (`LH_C('s', (`LH_C(' ', (`LH_C('0', (`LH_C('/', (`LH_C('0', (`LH_N))))))))))))))))))))))))))))))))))
//│ 		            | `Pc(_lh_divPs_Pc_0_0, _lh_divPs_Pc_1_0) -> 
//│ 		              (match _lh_divPs_Pc_0_0 with
//│ 		                | 0 -> 
//│ 		                  (Lazy.force ((divPs_lh__d4 (lazy (`Pz))) _lh_divPs_Pc_1_0))
//│ 		                | _ -> 
//│ 		                  (`Pz))
//│ 		            | _ -> 
//│ 		              (`Pz)))
//│ 		      | `Pc(_lh_divPs_Pc_0_1, _lh_divPs_Pc_1_1) -> 
//│ 		        (match _lh_divPs_Pc_0_1 with
//│ 		          | 0 -> 
//│ 		            (let rec _lh_matchIdent_6 = (Lazy.force _lh_divPs_arg2_0) in
//│ 		              (match _lh_matchIdent_6 with
//│ 		                | `Pc(_lh_divPs_Pc_0_2, _lh_divPs_Pc_1_2) -> 
//│ 		                  (match _lh_divPs_Pc_0_2 with
//│ 		                    | 0 -> 
//│ 		                      (Lazy.force ((divPs_lh__d4 _lh_divPs_Pc_1_1) _lh_divPs_Pc_1_2))
//│ 		                    | _ -> 
//│ 		                      (let rec q_0 = 0 in
//│ 		                        (`Pc(q_0, ((divPs_lh__d4 ((addPs_lh__d6 _lh_divPs_Pc_1_1) (negatePs_lh__d4 ((dotMult_lh__d2 q_0) _lh_divPs_Pc_1_2)))) (lazy (`Pc(_lh_divPs_Pc_0_2, _lh_divPs_Pc_1_2))))))))))
//│ 		          | _ -> 
//│ 		            (let rec _lh_matchIdent_7 = (Lazy.force _lh_divPs_arg2_0) in
//│ 		              (match _lh_matchIdent_7 with
//│ 		                | `Pc(_lh_divPs_Pc_0_3, _lh_divPs_Pc_1_3) -> 
//│ 		                  (let rec q_1 = (_lh_divPs_Pc_0_1 / _lh_divPs_Pc_0_3) in
//│ 		                    (`Pc(q_1, ((divPs_lh__d4 ((addPs_lh__d6 _lh_divPs_Pc_1_1) (negatePs_lh__d4 ((dotMult_lh__d2 q_1) _lh_divPs_Pc_1_3)))) (lazy (`Pc(_lh_divPs_Pc_0_3, _lh_divPs_Pc_1_3)))))))))))));;
//│ 		let rec revert_lh__d1 _lh_revert_arg1_0 =
//│ 		  (lazy (let rec _lh_matchIdent_4_8 = (Lazy.force _lh_revert_arg1_0) in
//│ 		    (match _lh_matchIdent_4_8 with
//│ 		      | `Pc(_lh_revert_Pc_0_0, _lh_revert_Pc_1_0) -> 
//│ 		        (match _lh_revert_Pc_0_0 with
//│ 		          | 0 -> 
//│ 		            (Lazy.force (let rec rs_0 = (lazy (`Pc(0, ((divPs_lh__d4 (fromIntegerPs_lh__d6 1)) ((compose_lh__d1 _lh_revert_Pc_1_0) rs_0))))) in
//│ 		              rs_0))
//│ 		          | _ -> 
//│ 		            (let rec _lh_matchIdent_4_9 = (Lazy.force _lh_revert_Pc_1_0) in
//│ 		              (match _lh_matchIdent_4_9 with
//│ 		                | `Pc(_lh_revert_Pc_0_1, _lh_revert_Pc_1_1) -> 
//│ 		                  (let rec _lh_matchIdent_5_0 = (Lazy.force _lh_revert_Pc_1_1) in
//│ 		                    (match _lh_matchIdent_5_0 with
//│ 		                      | `Pz -> 
//│ 		                        (`Pc(((0 - 1) / _lh_revert_Pc_0_1), (lazy (`Pc((1 / _lh_revert_Pc_0_1), (lazy (`Pz)))))))))))))));;
//│ 		let rec integralLz_lh__d1 _lh_integralLz_arg1_1 =
//│ 		  (let rec int1_4 = (fun fss_4 n_5 -> 
//│ 		    (lazy (let rec _lh_matchIdent_4_1 = (Lazy.force (Lazy.force fss_4)) in
//│ 		      (match _lh_matchIdent_4_1 with
//│ 		        | `Pz -> 
//│ 		          (`Pz)
//│ 		        | `Pc(_lh_int1_Pc_0_4, _lh_int1_Pc_1_4) -> 
//│ 		          (`Pc((_lh_int1_Pc_0_4 / n_5), ((int1_4 (lazy _lh_int1_Pc_1_4)) (n_5 + 1)))))))) in
//│ 		    (lazy (`Pc(0, ((int1_4 _lh_integralLz_arg1_1) 1)))));;
//│ 		let rec integral_lh__d2 _lh_integral_arg1_2 =
//│ 		  (let rec int1_3 = (fun fss_3 n_4 -> 
//│ 		    (lazy (let rec _lh_matchIdent_4_0 = (Lazy.force fss_3) in
//│ 		      (match _lh_matchIdent_4_0 with
//│ 		        | `Pz -> 
//│ 		          (`Pz)
//│ 		        | `Pc(_lh_int1_Pc_0_3, _lh_int1_Pc_1_3) -> 
//│ 		          (`Pc((_lh_int1_Pc_0_3 / n_4), ((int1_3 _lh_int1_Pc_1_3) (n_4 + 1)))))))) in
//│ 		    (lazy (`Pc(0, ((int1_3 _lh_integral_arg1_2) 1)))));;
//│ 		let rec minusPs_lh__d4 _lh_minusPs_arg1_1 _lh_minusPs_arg2_1 =
//│ 		  ((addPs_lh__d6 _lh_minusPs_arg1_1) (negatePs_lh__d4 _lh_minusPs_arg2_1));;
//│ 		let rec cosx_lh__d1 _lh_cosx_arg1_1 =
//│ 		  ((minusPs_lh__d4 (lazy (`Pc(1, (lazy (`Pz)))))) (integral_lh__d2 (integralLz_lh__d1 (lazy (cosx_lh__d1 0)))));;
//│ 		let rec divPs_lh__d2 _lh_divPs_arg1_2 _lh_divPs_arg2_2 =
//│ 		  (lazy (let rec _lh_matchIdent_4_3 = (Lazy.force _lh_divPs_arg1_2) in
//│ 		    (match _lh_matchIdent_4_3 with
//│ 		      | `Pz -> 
//│ 		        (let rec _lh_matchIdent_4_4 = (Lazy.force _lh_divPs_arg2_2) in
//│ 		          (match _lh_matchIdent_4_4 with
//│ 		            | `Pz -> 
//│ 		              (failwith "msg"(`LH_C('p', (`LH_C('o', (`LH_C('w', (`LH_C('e', (`LH_C('r', (`LH_C(' ', (`LH_C('s', (`LH_C('e', (`LH_C('r', (`LH_C('i', (`LH_C('e', (`LH_C('s', (`LH_C(' ', (`LH_C('0', (`LH_C('/', (`LH_C('0', (`LH_N))))))))))))))))))))))))))))))))))
//│ 		            | `Pc(_lh_divPs_Pc_0_8, _lh_divPs_Pc_1_8) -> 
//│ 		              (match _lh_divPs_Pc_0_8 with
//│ 		                | 0 -> 
//│ 		                  (Lazy.force ((divPs_lh__d2 (lazy (`Pz))) _lh_divPs_Pc_1_8))
//│ 		                | _ -> 
//│ 		                  (`Pz))
//│ 		            | _ -> 
//│ 		              (`Pz)))
//│ 		      | `Pc(_lh_divPs_Pc_0_9, _lh_divPs_Pc_1_9) -> 
//│ 		        (match _lh_divPs_Pc_0_9 with
//│ 		          | 0 -> 
//│ 		            (let rec _lh_matchIdent_4_5 = (Lazy.force _lh_divPs_arg2_2) in
//│ 		              (match _lh_matchIdent_4_5 with
//│ 		                | `Pc(_lh_divPs_Pc_0_1_0, _lh_divPs_Pc_1_1_0) -> 
//│ 		                  (match _lh_divPs_Pc_0_1_0 with
//│ 		                    | 0 -> 
//│ 		                      (Lazy.force ((divPs_lh__d2 _lh_divPs_Pc_1_9) _lh_divPs_Pc_1_1_0))
//│ 		                    | _ -> 
//│ 		                      (let rec q_4 = 0 in
//│ 		                        (`Pc(q_4, ((divPs_lh__d2 ((addPs_lh__d6 _lh_divPs_Pc_1_9) (negatePs_lh__d4 ((dotMult_lh__d2 q_4) _lh_divPs_Pc_1_1_0)))) (lazy (`Pc(_lh_divPs_Pc_0_1_0, _lh_divPs_Pc_1_1_0))))))))))
//│ 		          | _ -> 
//│ 		            (let rec _lh_matchIdent_4_6 = (Lazy.force _lh_divPs_arg2_2) in
//│ 		              (match _lh_matchIdent_4_6 with
//│ 		                | `Pc(_lh_divPs_Pc_0_1_1, _lh_divPs_Pc_1_1_1) -> 
//│ 		                  (let rec q_5 = (_lh_divPs_Pc_0_9 / _lh_divPs_Pc_0_1_1) in
//│ 		                    (`Pc(q_5, ((divPs_lh__d2 ((addPs_lh__d6 _lh_divPs_Pc_1_9) (negatePs_lh__d4 ((dotMult_lh__d2 q_5) _lh_divPs_Pc_1_1_1)))) (lazy (`Pc(_lh_divPs_Pc_0_1_1, _lh_divPs_Pc_1_1_1)))))))))))));;
//│ 		let rec negatePs_lh__d3 _lh_negatePs_arg1_1 =
//│ 		  (lazy (let rec _lh_matchIdent_1_5 = (Lazy.force _lh_negatePs_arg1_1) in
//│ 		    (match _lh_matchIdent_1_5 with
//│ 		      | `Pz -> 
//│ 		        (`Pz)
//│ 		      | `Pc(_lh_negatePs_Pc_0_1, _lh_negatePs_Pc_1_1) -> 
//│ 		        (`Pc((0 - _lh_negatePs_Pc_0_1), (negatePs_lh__d3 _lh_negatePs_Pc_1_1))))));;
//│ 		let rec addPs_lh__d5 _lh_addPs_arg1_1 _lh_addPs_arg2_1 =
//│ 		  (lazy (let rec _lh_matchIdent_1_6 = (Lazy.force _lh_addPs_arg1_1) in
//│ 		    (match _lh_matchIdent_1_6 with
//│ 		      | `Pz -> 
//│ 		        (Lazy.force _lh_addPs_arg2_1)
//│ 		      | `Pc(_lh_addPs_Pc_0_2, _lh_addPs_Pc_1_2) -> 
//│ 		        (let rec _lh_matchIdent_1_7 = (Lazy.force _lh_addPs_arg2_1) in
//│ 		          (match _lh_matchIdent_1_7 with
//│ 		            | `Pz -> 
//│ 		              (Lazy.force _lh_addPs_arg1_1)
//│ 		            | `Pc(_lh_addPs_Pc_0_3, _lh_addPs_Pc_1_3) -> 
//│ 		              (`Pc((_lh_addPs_Pc_0_2 + _lh_addPs_Pc_0_3), ((addPs_lh__d5 _lh_addPs_Pc_1_2) _lh_addPs_Pc_1_3))))))));;
//│ 		let rec minusPs_lh__d1 _lh_minusPs_arg1_4 _lh_minusPs_arg2_4 =
//│ 		  ((addPs_lh__d5 _lh_minusPs_arg1_4) (negatePs_lh__d3 _lh_minusPs_arg2_4));;
//│ 		let rec minusPs_lh__d5 _lh_minusPs_arg1_0 _lh_minusPs_arg2_0 =
//│ 		  ((addPs_lh__d6 _lh_minusPs_arg1_0) (negatePs_lh__d4 _lh_minusPs_arg2_0));;
//│ 		let rec integral_lh__d4 _lh_integral_arg1_0 =
//│ 		  (let rec int1_0 = (fun fss_0 n_0 -> 
//│ 		    (lazy (let rec _lh_matchIdent_2_7 = (Lazy.force fss_0) in
//│ 		      (match _lh_matchIdent_2_7 with
//│ 		        | `Pz -> 
//│ 		          (`Pz)
//│ 		        | `Pc(_lh_int1_Pc_0_0, _lh_int1_Pc_1_0) -> 
//│ 		          (`Pc((_lh_int1_Pc_0_0 / n_0), ((int1_0 _lh_int1_Pc_1_0) (n_0 + 1)))))))) in
//│ 		    (lazy (`Pc(0, ((int1_0 _lh_integral_arg1_0) 1)))));;
//│ 		let rec integralLz_lh__d2 _lh_integralLz_arg1_0 =
//│ 		  (let rec int1_2 = (fun fss_2 n_3 -> 
//│ 		    (lazy (let rec _lh_matchIdent_3_9 = (Lazy.force (Lazy.force fss_2)) in
//│ 		      (match _lh_matchIdent_3_9 with
//│ 		        | `Pz -> 
//│ 		          (`Pz)
//│ 		        | `Pc(_lh_int1_Pc_0_2, _lh_int1_Pc_1_2) -> 
//│ 		          (`Pc((_lh_int1_Pc_0_2 / n_3), ((int1_2 (lazy _lh_int1_Pc_1_2)) (n_3 + 1)))))))) in
//│ 		    (lazy (`Pc(0, ((int1_2 _lh_integralLz_arg1_0) 1)))));;
//│ 		let rec sinx_lh__d2 _lh_sinx_arg1_0 =
//│ 		  (integral_lh__d4 ((minusPs_lh__d5 (lazy (`Pc(1, (lazy (`Pz)))))) (integralLz_lh__d2 (lazy (sinx_lh__d2 0)))));;
//│ 		let rec minusPs_lh__d3 _lh_minusPs_arg1_2 _lh_minusPs_arg2_2 =
//│ 		  ((addPs_lh__d6 _lh_minusPs_arg1_2) (negatePs_lh__d4 _lh_minusPs_arg2_2));;
//│ 		let rec multPsLzLz_lh__d1 _lh_multPsLzLz_arg1_0 _lh_multPsLzLz_arg2_0 =
//│ 		  (lazy (let rec _lh_matchIdent_1_3 = (Lazy.force (Lazy.force _lh_multPsLzLz_arg1_0)) in
//│ 		    (match _lh_matchIdent_1_3 with
//│ 		      | `Pz -> 
//│ 		        (`Pz)
//│ 		      | `Pc(_lh_multPsLzLz_Pc_0_0, _lh_multPsLzLz_Pc_1_0) -> 
//│ 		        (let rec _lh_matchIdent_1_4 = (Lazy.force (Lazy.force _lh_multPsLzLz_arg2_0)) in
//│ 		          (match _lh_matchIdent_1_4 with
//│ 		            | `Pz -> 
//│ 		              (`Pz)
//│ 		            | `Pc(_lh_multPsLzLz_Pc_0_1, _lh_multPsLzLz_Pc_1_1) -> 
//│ 		              (`Pc((_lh_multPsLzLz_Pc_0_0 * _lh_multPsLzLz_Pc_0_1), ((addPs_lh__d6 ((addPs_lh__d6 ((dotMult_lh__d2 _lh_multPsLzLz_Pc_0_0) _lh_multPsLzLz_Pc_1_1)) ((dotMult_lh__d2 _lh_multPsLzLz_Pc_0_1) _lh_multPsLzLz_Pc_1_0))) ((multPs_lh__d1 ((multPs_lh__d1 x_lh__d1) _lh_multPsLzLz_Pc_1_0)) _lh_multPsLzLz_Pc_1_1)))))))));;
//│ 		let rec ts_lh__d1 =
//│ 		  (lazy (`Pc(1, ((multPsLzLz_lh__d1 (lazy ts_lh__d1)) (lazy ts_lh__d1)))));;
//│ 		let rec extract_lh__d3 _lh_extract_arg1_1 _lh_extract_arg2_1 =
//│ 		  (if (_lh_extract_arg1_1 = 0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (let rec _lh_matchIdent_4_7 = (Lazy.force _lh_extract_arg2_1) in
//│ 		      (match _lh_matchIdent_4_7 with
//│ 		        | `Pz -> 
//│ 		          (`LH_N)
//│ 		        | `Pc(_lh_extract_Pc_0_1, _lh_extract_Pc_1_1) -> 
//│ 		          (`LH_C(_lh_extract_Pc_0_1, ((extract_lh__d3 (_lh_extract_arg1_1 - 1)) _lh_extract_Pc_1_1))))));;
//│ 		let rec integral_lh__d1 _lh_integral_arg1_3 =
//│ 		  (let rec int1_5 = (fun fss_5 n_6 -> 
//│ 		    (lazy (let rec _lh_matchIdent_5_3 = (Lazy.force fss_5) in
//│ 		      (match _lh_matchIdent_5_3 with
//│ 		        | `Pz -> 
//│ 		          (`Pz)
//│ 		        | `Pc(_lh_int1_Pc_0_5, _lh_int1_Pc_1_5) -> 
//│ 		          (`Pc((_lh_int1_Pc_0_5 / n_6), ((int1_5 _lh_int1_Pc_1_5) (n_6 + 1)))))))) in
//│ 		    (lazy (`Pc(0, ((int1_5 _lh_integral_arg1_3) 1)))));;
//│ 		let rec extract_lh__d1 _lh_extract_arg1_3 _lh_extract_arg2_3 =
//│ 		  (if (_lh_extract_arg1_3 = 0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (let rec _lh_matchIdent_6_1 = (Lazy.force _lh_extract_arg2_3) in
//│ 		      (match _lh_matchIdent_6_1 with
//│ 		        | `Pz -> 
//│ 		          (`LH_N)
//│ 		        | `Pc(_lh_extract_Pc_0_3, _lh_extract_Pc_1_3) -> 
//│ 		          (`LH_C(_lh_extract_Pc_0_3, ((extract_lh__d1 (_lh_extract_arg1_3 - 1)) _lh_extract_Pc_1_3))))));;
//│ 		let rec sinx_lh__d1 _lh_sinx_arg1_1 =
//│ 		  (integral_lh__d4 ((minusPs_lh__d5 (lazy (`Pc(1, (lazy (`Pz)))))) (integralLz_lh__d2 (lazy (sinx_lh__d1 0)))));;
//│ 		let rec extract_lh__d2 _lh_extract_arg1_2 _lh_extract_arg2_2 =
//│ 		  (if (_lh_extract_arg1_2 = 0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (let rec _lh_matchIdent_6_0 = (Lazy.force _lh_extract_arg2_2) in
//│ 		      (match _lh_matchIdent_6_0 with
//│ 		        | `Pz -> 
//│ 		          (`LH_N)
//│ 		        | `Pc(_lh_extract_Pc_0_2, _lh_extract_Pc_1_2) -> 
//│ 		          (`LH_C(_lh_extract_Pc_0_2, ((extract_lh__d2 (_lh_extract_arg1_2 - 1)) _lh_extract_Pc_1_2))))));;
//│ 		let rec dotMult_lh__d1 _lh_dotMult_arg1_1 _lh_dotMult_arg2_1 =
//│ 		  (lazy (let rec _lh_matchIdent_3_7 = (Lazy.force _lh_dotMult_arg2_1) in
//│ 		    (match _lh_matchIdent_3_7 with
//│ 		      | `Pz -> 
//│ 		        (`Pz)
//│ 		      | `Pc(_lh_dotMult_Pc_0_1, _lh_dotMult_Pc_1_1) -> 
//│ 		        (`Pc((_lh_dotMult_arg1_1 * _lh_dotMult_Pc_0_1), ((dotMult_lh__d1 _lh_dotMult_arg1_1) _lh_dotMult_Pc_1_1))))));;
//│ 		let rec addPs_lh__d2 _lh_addPs_arg1_4 _lh_addPs_arg2_4 =
//│ 		  (lazy (let rec _lh_matchIdent_3_3 = (Lazy.force _lh_addPs_arg1_4) in
//│ 		    (match _lh_matchIdent_3_3 with
//│ 		      | `Pz -> 
//│ 		        (Lazy.force _lh_addPs_arg2_4)
//│ 		      | `Pc(_lh_addPs_Pc_0_8, _lh_addPs_Pc_1_8) -> 
//│ 		        (let rec _lh_matchIdent_3_4 = (Lazy.force _lh_addPs_arg2_4) in
//│ 		          (match _lh_matchIdent_3_4 with
//│ 		            | `Pz -> 
//│ 		              (Lazy.force _lh_addPs_arg1_4)
//│ 		            | `Pc(_lh_addPs_Pc_0_9, _lh_addPs_Pc_1_9) -> 
//│ 		              (`Pc((_lh_addPs_Pc_0_8 + _lh_addPs_Pc_0_9), ((addPs_lh__d2 _lh_addPs_Pc_1_8) _lh_addPs_Pc_1_9))))))));;
//│ 		let rec negatePs_lh__d2 _lh_negatePs_arg1_2 =
//│ 		  (lazy (let rec _lh_matchIdent_3_0 = (Lazy.force _lh_negatePs_arg1_2) in
//│ 		    (match _lh_matchIdent_3_0 with
//│ 		      | `Pz -> 
//│ 		        (`Pz)
//│ 		      | `Pc(_lh_negatePs_Pc_0_2, _lh_negatePs_Pc_1_2) -> 
//│ 		        (`Pc((0 - _lh_negatePs_Pc_0_2), (negatePs_lh__d2 _lh_negatePs_Pc_1_2))))));;
//│ 		let rec negatePs_lh__d1 _lh_negatePs_arg1_3 =
//│ 		  (lazy (let rec _lh_matchIdent_3_6 = (Lazy.force _lh_negatePs_arg1_3) in
//│ 		    (match _lh_matchIdent_3_6 with
//│ 		      | `Pz -> 
//│ 		        (`Pz)
//│ 		      | `Pc(_lh_negatePs_Pc_0_3, _lh_negatePs_Pc_1_3) -> 
//│ 		        (`Pc((0 - _lh_negatePs_Pc_0_3), (negatePs_lh__d1 _lh_negatePs_Pc_1_3))))));;
//│ 		let rec addPs_lh__d3 _lh_addPs_arg1_3 _lh_addPs_arg2_3 =
//│ 		  (lazy (let rec _lh_matchIdent_3_1 = (Lazy.force _lh_addPs_arg1_3) in
//│ 		    (match _lh_matchIdent_3_1 with
//│ 		      | `Pz -> 
//│ 		        (Lazy.force _lh_addPs_arg2_3)
//│ 		      | `Pc(_lh_addPs_Pc_0_6, _lh_addPs_Pc_1_6) -> 
//│ 		        (let rec _lh_matchIdent_3_2 = (Lazy.force _lh_addPs_arg2_3) in
//│ 		          (match _lh_matchIdent_3_2 with
//│ 		            | `Pz -> 
//│ 		              (Lazy.force _lh_addPs_arg1_3)
//│ 		            | `Pc(_lh_addPs_Pc_0_7, _lh_addPs_Pc_1_7) -> 
//│ 		              (`Pc((_lh_addPs_Pc_0_6 + _lh_addPs_Pc_0_7), ((addPs_lh__d3 _lh_addPs_Pc_1_6) _lh_addPs_Pc_1_7))))))));;
//│ 		let rec divPs_lh__d1 _lh_divPs_arg1_3 _lh_divPs_arg2_3 =
//│ 		  (lazy (let rec _lh_matchIdent_5_6 = (Lazy.force _lh_divPs_arg1_3) in
//│ 		    (match _lh_matchIdent_5_6 with
//│ 		      | `Pz -> 
//│ 		        (let rec _lh_matchIdent_5_7 = (Lazy.force _lh_divPs_arg2_3) in
//│ 		          (match _lh_matchIdent_5_7 with
//│ 		            | `Pz -> 
//│ 		              (failwith "msg"(`LH_C('p', (`LH_C('o', (`LH_C('w', (`LH_C('e', (`LH_C('r', (`LH_C(' ', (`LH_C('s', (`LH_C('e', (`LH_C('r', (`LH_C('i', (`LH_C('e', (`LH_C('s', (`LH_C(' ', (`LH_C('0', (`LH_C('/', (`LH_C('0', (`LH_N))))))))))))))))))))))))))))))))))
//│ 		            | `Pc(_lh_divPs_Pc_0_1_2, _lh_divPs_Pc_1_1_2) -> 
//│ 		              (match _lh_divPs_Pc_0_1_2 with
//│ 		                | 0 -> 
//│ 		                  (Lazy.force ((divPs_lh__d1 (lazy (`Pz))) _lh_divPs_Pc_1_1_2))
//│ 		                | _ -> 
//│ 		                  (`Pz))
//│ 		            | _ -> 
//│ 		              (`Pz)))
//│ 		      | `Pc(_lh_divPs_Pc_0_1_3, _lh_divPs_Pc_1_1_3) -> 
//│ 		        (match _lh_divPs_Pc_0_1_3 with
//│ 		          | 0 -> 
//│ 		            (let rec _lh_matchIdent_5_8 = (Lazy.force _lh_divPs_arg2_3) in
//│ 		              (match _lh_matchIdent_5_8 with
//│ 		                | `Pc(_lh_divPs_Pc_0_1_4, _lh_divPs_Pc_1_1_4) -> 
//│ 		                  (match _lh_divPs_Pc_0_1_4 with
//│ 		                    | 0 -> 
//│ 		                      (Lazy.force ((divPs_lh__d1 _lh_divPs_Pc_1_1_3) _lh_divPs_Pc_1_1_4))
//│ 		                    | _ -> 
//│ 		                      (let rec q_6 = 0 in
//│ 		                        (`Pc(q_6, ((divPs_lh__d1 ((addPs_lh__d3 _lh_divPs_Pc_1_1_3) (negatePs_lh__d1 ((dotMult_lh__d2 q_6) _lh_divPs_Pc_1_1_4)))) (lazy (`Pc(_lh_divPs_Pc_0_1_4, _lh_divPs_Pc_1_1_4))))))))))
//│ 		          | _ -> 
//│ 		            (let rec _lh_matchIdent_5_9 = (Lazy.force _lh_divPs_arg2_3) in
//│ 		              (match _lh_matchIdent_5_9 with
//│ 		                | `Pc(_lh_divPs_Pc_0_1_5, _lh_divPs_Pc_1_1_5) -> 
//│ 		                  (let rec q_7 = (_lh_divPs_Pc_0_1_3 / _lh_divPs_Pc_0_1_5) in
//│ 		                    (`Pc(q_7, ((divPs_lh__d1 ((addPs_lh__d2 _lh_divPs_Pc_1_1_3) (negatePs_lh__d2 ((dotMult_lh__d1 q_7) _lh_divPs_Pc_1_1_5)))) (lazy (`Pc(_lh_divPs_Pc_0_1_5, _lh_divPs_Pc_1_1_5)))))))))))));;
//│ 		let rec fromIntegerPs_lh__d3 _lh_fromIntegerPs_arg1_3 =
//│ 		  (match _lh_fromIntegerPs_arg1_3 with
//│ 		    | 0 -> 
//│ 		      (lazy (`Pz))
//│ 		    | _ -> 
//│ 		      (lazy (`Pc(_lh_fromIntegerPs_arg1_3, (lazy (`Pz))))));;
//│ 		let rec powerPs_lh__d2 _lh_powerPs_arg1_0 _lh_powerPs_arg2_0 =
//│ 		  (if (_lh_powerPs_arg2_0 <= 0) then
//│ 		    (fromIntegerPs_lh__d6 1)
//│ 		  else
//│ 		    ((multPs_lh__d1 _lh_powerPs_arg1_0) ((powerPs_lh__d2 _lh_powerPs_arg1_0) (_lh_powerPs_arg2_0 - 1))));;
//│ 		let rec fromIntegerPs_lh__d1 _lh_fromIntegerPs_arg1_5 =
//│ 		  (match _lh_fromIntegerPs_arg1_5 with
//│ 		    | 0 -> 
//│ 		      (lazy (`Pz))
//│ 		    | _ -> 
//│ 		      (lazy (`Pc(_lh_fromIntegerPs_arg1_5, (lazy (`Pz))))));;
//│ 		let rec fromIntegerPs_lh__d2 _lh_fromIntegerPs_arg1_4 =
//│ 		  (match _lh_fromIntegerPs_arg1_4 with
//│ 		    | 0 -> 
//│ 		      (lazy (`Pz))
//│ 		    | _ -> 
//│ 		      (lazy (`Pc(_lh_fromIntegerPs_arg1_4, (lazy (`Pz))))));;
//│ 		let rec minusPs_lh__d2 _lh_minusPs_arg1_3 _lh_minusPs_arg2_3 =
//│ 		  ((addPs_lh__d6 _lh_minusPs_arg1_3) (negatePs_lh__d4 _lh_minusPs_arg2_3));;
//│ 		let rec dotMultSndLz_lh__d1 _lh_dotMultSndLz_arg1_0 _lh_dotMultSndLz_arg2_0 =
//│ 		  (lazy (let rec _lh_matchIdent_2_4 = (Lazy.force (Lazy.force _lh_dotMultSndLz_arg2_0)) in
//│ 		    (match _lh_matchIdent_2_4 with
//│ 		      | `Pz -> 
//│ 		        (`Pz)
//│ 		      | `Pc(_lh_dotMultSndLz_Pc_0_0, _lh_dotMultSndLz_Pc_1_0) -> 
//│ 		        (`Pc((_lh_dotMultSndLz_arg1_0 * _lh_dotMultSndLz_Pc_0_0), ((dotMult_lh__d2 _lh_dotMultSndLz_arg1_0) _lh_dotMultSndLz_Pc_1_0))))));;
//│ 		let rec addPs_lh__d4 _lh_addPs_arg1_2 _lh_addPs_arg2_2 =
//│ 		  (lazy (let rec _lh_matchIdent_2_5 = (Lazy.force _lh_addPs_arg1_2) in
//│ 		    (match _lh_matchIdent_2_5 with
//│ 		      | `Pz -> 
//│ 		        (Lazy.force _lh_addPs_arg2_2)
//│ 		      | `Pc(_lh_addPs_Pc_0_4, _lh_addPs_Pc_1_4) -> 
//│ 		        (let rec _lh_matchIdent_2_6 = (Lazy.force _lh_addPs_arg2_2) in
//│ 		          (match _lh_matchIdent_2_6 with
//│ 		            | `Pz -> 
//│ 		              (Lazy.force _lh_addPs_arg1_2)
//│ 		            | `Pc(_lh_addPs_Pc_0_5, _lh_addPs_Pc_1_5) -> 
//│ 		              (`Pc((_lh_addPs_Pc_0_4 + _lh_addPs_Pc_0_5), ((addPs_lh__d4 _lh_addPs_Pc_1_4) _lh_addPs_Pc_1_5))))))));;
//│ 		let rec deriv_lh__d1 _lh_deriv_arg1_0 =
//│ 		  (lazy (let rec _lh_matchIdent_2_8 = (Lazy.force _lh_deriv_arg1_0) in
//│ 		    (match _lh_matchIdent_2_8 with
//│ 		      | `Pz -> 
//│ 		        (`Pz)
//│ 		      | `Pc(_lh_deriv_Pc_0_0, _lh_deriv_Pc_1_0) -> 
//│ 		        (let rec deriv1_0 = (fun gss_0 n_1 -> 
//│ 		          (lazy (let rec _lh_matchIdent_2_9 = (Lazy.force gss_0) in
//│ 		            (match _lh_matchIdent_2_9 with
//│ 		              | `Pz -> 
//│ 		                (`Pz)
//│ 		              | `Pc(_lh_deriv_Pc_0_1, _lh_deriv_Pc_1_1) -> 
//│ 		                (`Pc((n_1 * _lh_deriv_Pc_0_1), ((deriv1_0 _lh_deriv_Pc_1_1) (n_1 + 1)))))))) in
//│ 		          (Lazy.force ((deriv1_0 _lh_deriv_Pc_1_0) 1))))));;
//│ 		let rec fromIntegerPs_lh__d4 _lh_fromIntegerPs_arg1_2 =
//│ 		  (match _lh_fromIntegerPs_arg1_2 with
//│ 		    | 0 -> 
//│ 		      (lazy (`Pz))
//│ 		    | _ -> 
//│ 		      (lazy (`Pc(_lh_fromIntegerPs_arg1_2, (lazy (`Pz))))));;
//│ 		let rec divPs_lh__d3 _lh_divPs_arg1_1 _lh_divPs_arg2_1 =
//│ 		  (lazy (let rec _lh_matchIdent_2_0 = (Lazy.force _lh_divPs_arg1_1) in
//│ 		    (match _lh_matchIdent_2_0 with
//│ 		      | `Pz -> 
//│ 		        (let rec _lh_matchIdent_2_1 = (Lazy.force _lh_divPs_arg2_1) in
//│ 		          (match _lh_matchIdent_2_1 with
//│ 		            | `Pz -> 
//│ 		              (failwith "msg"(`LH_C('p', (`LH_C('o', (`LH_C('w', (`LH_C('e', (`LH_C('r', (`LH_C(' ', (`LH_C('s', (`LH_C('e', (`LH_C('r', (`LH_C('i', (`LH_C('e', (`LH_C('s', (`LH_C(' ', (`LH_C('0', (`LH_C('/', (`LH_C('0', (`LH_N))))))))))))))))))))))))))))))))))
//│ 		            | `Pc(_lh_divPs_Pc_0_4, _lh_divPs_Pc_1_4) -> 
//│ 		              (match _lh_divPs_Pc_0_4 with
//│ 		                | 0 -> 
//│ 		                  (Lazy.force ((divPs_lh__d3 (lazy (`Pz))) _lh_divPs_Pc_1_4))
//│ 		                | _ -> 
//│ 		                  (`Pz))
//│ 		            | _ -> 
//│ 		              (`Pz)))
//│ 		      | `Pc(_lh_divPs_Pc_0_5, _lh_divPs_Pc_1_5) -> 
//│ 		        (match _lh_divPs_Pc_0_5 with
//│ 		          | 0 -> 
//│ 		            (let rec _lh_matchIdent_2_2 = (Lazy.force _lh_divPs_arg2_1) in
//│ 		              (match _lh_matchIdent_2_2 with
//│ 		                | `Pc(_lh_divPs_Pc_0_6, _lh_divPs_Pc_1_6) -> 
//│ 		                  (match _lh_divPs_Pc_0_6 with
//│ 		                    | 0 -> 
//│ 		                      (Lazy.force ((divPs_lh__d3 _lh_divPs_Pc_1_5) _lh_divPs_Pc_1_6))
//│ 		                    | _ -> 
//│ 		                      (let rec q_2 = 0 in
//│ 		                        (`Pc(q_2, ((divPs_lh__d3 ((addPs_lh__d6 _lh_divPs_Pc_1_5) (negatePs_lh__d4 ((dotMult_lh__d2 q_2) _lh_divPs_Pc_1_6)))) (lazy (`Pc(_lh_divPs_Pc_0_6, _lh_divPs_Pc_1_6))))))))))
//│ 		          | _ -> 
//│ 		            (let rec _lh_matchIdent_2_3 = (Lazy.force _lh_divPs_arg2_1) in
//│ 		              (match _lh_matchIdent_2_3 with
//│ 		                | `Pc(_lh_divPs_Pc_0_7, _lh_divPs_Pc_1_7) -> 
//│ 		                  (let rec q_3 = (_lh_divPs_Pc_0_5 / _lh_divPs_Pc_0_7) in
//│ 		                    (`Pc(q_3, ((divPs_lh__d3 ((addPs_lh__d6 _lh_divPs_Pc_1_5) (negatePs_lh__d4 ((dotMult_lh__d2 q_3) _lh_divPs_Pc_1_7)))) (lazy (`Pc(_lh_divPs_Pc_0_7, _lh_divPs_Pc_1_7)))))))))))));;
//│ 		let rec sqrtPs_lh__d1 _lh_sqrtPs_arg1_0 =
//│ 		  (lazy (let rec _lh_matchIdent_5_4 = (Lazy.force _lh_sqrtPs_arg1_0) in
//│ 		    (match _lh_matchIdent_5_4 with
//│ 		      | `Pz -> 
//│ 		        (`Pz)
//│ 		      | `Pc(_lh_sqrtPs_Pc_0_0, _lh_sqrtPs_Pc_1_0) -> 
//│ 		        (match _lh_sqrtPs_Pc_0_0 with
//│ 		          | 0 -> 
//│ 		            (let rec _lh_matchIdent_5_5 = (Lazy.force _lh_sqrtPs_Pc_1_0) in
//│ 		              (match _lh_matchIdent_5_5 with
//│ 		                | `Pc(_lh_sqrtPs_Pc_0_1, _lh_sqrtPs_Pc_1_1) -> 
//│ 		                  (match _lh_sqrtPs_Pc_0_1 with
//│ 		                    | 0 -> 
//│ 		                      (`Pc(0, (sqrtPs_lh__d1 _lh_sqrtPs_Pc_1_1))))))
//│ 		          | 1 -> 
//│ 		            (let rec qs_0 = (lazy ((addPs_lh__d4 (fromIntegerPs_lh__d4 1)) (integral_lh__d4 ((divPs_lh__d3 (deriv_lh__d1 (lazy (`Pc(1, _lh_sqrtPs_Pc_1_0))))) ((dotMultSndLz_lh__d1 2) qs_0))))) in
//│ 		              (Lazy.force (Lazy.force qs_0)))))));;
//│ 		let rec fromIntegerPs_lh__d5 _lh_fromIntegerPs_arg1_1 =
//│ 		  (match _lh_fromIntegerPs_arg1_1 with
//│ 		    | 0 -> 
//│ 		      (lazy (`Pz))
//│ 		    | _ -> 
//│ 		      (lazy (`Pc(_lh_fromIntegerPs_arg1_1, (lazy (`Pz))))));;
//│ 		let rec powerPs_lh__d1 _lh_powerPs_arg1_1 _lh_powerPs_arg2_1 =
//│ 		  (if (_lh_powerPs_arg2_1 <= 0) then
//│ 		    (fromIntegerPs_lh__d5 1)
//│ 		  else
//│ 		    ((multPs_lh__d1 _lh_powerPs_arg1_1) ((powerPs_lh__d1 _lh_powerPs_arg1_1) (_lh_powerPs_arg2_1 - 1))));;
//│ 		let rec addPs_lh__d1 _lh_addPs_arg1_5 _lh_addPs_arg2_5 =
//│ 		  (lazy (let rec _lh_matchIdent_5_1 = (Lazy.force _lh_addPs_arg1_5) in
//│ 		    (match _lh_matchIdent_5_1 with
//│ 		      | `Pz -> 
//│ 		        (Lazy.force _lh_addPs_arg2_5)
//│ 		      | `Pc(_lh_addPs_Pc_0_1_0, _lh_addPs_Pc_1_1_0) -> 
//│ 		        (let rec _lh_matchIdent_5_2 = (Lazy.force _lh_addPs_arg2_5) in
//│ 		          (match _lh_matchIdent_5_2 with
//│ 		            | `Pz -> 
//│ 		              (Lazy.force _lh_addPs_arg1_5)
//│ 		            | `Pc(_lh_addPs_Pc_0_1_1, _lh_addPs_Pc_1_1_1) -> 
//│ 		              (`Pc((_lh_addPs_Pc_0_1_0 + _lh_addPs_Pc_0_1_1), ((addPs_lh__d1 _lh_addPs_Pc_1_1_0) _lh_addPs_Pc_1_1_1))))))));;
//│ 		let rec list_lh__d1 =
//│ 		  (lazy (`Pc(1, list_lh__d1)));;
//│ 		let rec multPsFstLz_lh__d1 _lh_multPsFstLz_arg1_0 _lh_multPsFstLz_arg2_0 =
//│ 		  (lazy (let rec _lh_matchIdent_0 = (Lazy.force (Lazy.force _lh_multPsFstLz_arg1_0)) in
//│ 		    (match _lh_matchIdent_0 with
//│ 		      | `Pz -> 
//│ 		        (`Pz)
//│ 		      | `Pc(_lh_multPsFstLz_Pc_0_0, _lh_multPsFstLz_Pc_1_0) -> 
//│ 		        (let rec _lh_matchIdent_1 = (Lazy.force _lh_multPsFstLz_arg2_0) in
//│ 		          (match _lh_matchIdent_1 with
//│ 		            | `Pz -> 
//│ 		              (`Pz)
//│ 		            | `Pc(_lh_multPsFstLz_Pc_0_1, _lh_multPsFstLz_Pc_1_1) -> 
//│ 		              (`Pc((_lh_multPsFstLz_Pc_0_0 * _lh_multPsFstLz_Pc_0_1), ((addPs_lh__d6 ((addPs_lh__d6 ((dotMult_lh__d2 _lh_multPsFstLz_Pc_0_0) _lh_multPsFstLz_Pc_1_1)) ((dotMult_lh__d2 _lh_multPsFstLz_Pc_0_1) _lh_multPsFstLz_Pc_1_0))) ((multPs_lh__d1 ((multPs_lh__d1 x_lh__d1) _lh_multPsFstLz_Pc_1_0)) _lh_multPsFstLz_Pc_1_1)))))))));;
//│ 		let rec composeSndLz_lh__d1 _lh_composeSndLz_arg1_0 _lh_composeSndLz_arg2_0 =
//│ 		  (lazy (let rec _lh_matchIdent_2 = (Lazy.force _lh_composeSndLz_arg1_0) in
//│ 		    (match _lh_matchIdent_2 with
//│ 		      | `Pz -> 
//│ 		        (`Pz)
//│ 		      | `Pc(_lh_composeSndLz_Pc_0_0, _lh_composeSndLz_Pc_1_0) -> 
//│ 		        (let rec _lh_matchIdent_3 = (Lazy.force (Lazy.force _lh_composeSndLz_arg2_0)) in
//│ 		          (match _lh_matchIdent_3 with
//│ 		            | `Pz -> 
//│ 		              (`Pc(_lh_composeSndLz_Pc_0_0, (lazy (`Pz))))
//│ 		            | `Pc(_lh_composeSndLz_Pc_0_1, _lh_composeSndLz_Pc_1_1) -> 
//│ 		              (match _lh_composeSndLz_Pc_0_1 with
//│ 		                | 0 -> 
//│ 		                  (`Pc(_lh_composeSndLz_Pc_0_0, ((multPs_lh__d1 _lh_composeSndLz_Pc_1_1) ((compose_lh__d1 _lh_composeSndLz_Pc_1_0) (lazy (`Pc(0, _lh_composeSndLz_Pc_1_1)))))))
//│ 		                | _ -> 
//│ 		                  (Lazy.force ((addPs_lh__d6 (lazy (`Pc(_lh_composeSndLz_Pc_0_0, (lazy (`Pz)))))) ((multPsFstLz_lh__d1 _lh_composeSndLz_arg2_0) ((composeSndLz_lh__d1 _lh_composeSndLz_Pc_1_0) _lh_composeSndLz_arg2_0)))))
//│ 		            | _ -> 
//│ 		              (Lazy.force ((addPs_lh__d6 (lazy (`Pc(_lh_composeSndLz_Pc_0_0, (lazy (`Pz)))))) ((multPsFstLz_lh__d1 _lh_composeSndLz_arg2_0) ((composeSndLz_lh__d1 _lh_composeSndLz_Pc_1_0) _lh_composeSndLz_arg2_0)))))))));;
//│ 		let rec tree_lh__d1 =
//│ 		  (lazy (`Pc(0, ((composeSndLz_lh__d1 list_lh__d1) (lazy tree_lh__d1)))));;
//│ 		let rec extract_lh__d4 _lh_extract_arg1_0 _lh_extract_arg2_0 =
//│ 		  (if (_lh_extract_arg1_0 = 0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (let rec _lh_matchIdent_4_2 = (Lazy.force _lh_extract_arg2_0) in
//│ 		      (match _lh_matchIdent_4_2 with
//│ 		        | `Pz -> 
//│ 		          (`LH_N)
//│ 		        | `Pc(_lh_extract_Pc_0_0, _lh_extract_Pc_1_0) -> 
//│ 		          (`LH_C(_lh_extract_Pc_0_0, ((extract_lh__d4 (_lh_extract_arg1_0 - 1)) _lh_extract_Pc_1_0))))));;
//│ 		let rec integral_lh__d3 _lh_integral_arg1_1 =
//│ 		  (let rec int1_1 = (fun fss_1 n_2 -> 
//│ 		    (lazy (let rec _lh_matchIdent_3_8 = (Lazy.force fss_1) in
//│ 		      (match _lh_matchIdent_3_8 with
//│ 		        | `Pz -> 
//│ 		          (`Pz)
//│ 		        | `Pc(_lh_int1_Pc_0_1, _lh_int1_Pc_1_1) -> 
//│ 		          (`Pc((_lh_int1_Pc_0_1 / n_2), ((int1_1 _lh_int1_Pc_1_1) (n_2 + 1)))))))) in
//│ 		    (lazy (`Pc(0, ((int1_1 _lh_integral_arg1_1) 1)))));;
//│ 		let rec cosx_lh__d2 _lh_cosx_arg1_0 =
//│ 		  ((minusPs_lh__d5 (lazy (`Pc(1, (lazy (`Pz)))))) (integral_lh__d3 (integralLz_lh__d2 (lazy (cosx_lh__d2 0)))));;
//│ 		let rec testPower_nofib_lh__d1 _lh_testPower_nofib_arg1_0 =
//│ 		  (`LH_C(((extract_lh__d3 _lh_testPower_nofib_arg1_0) ((minusPs_lh__d1 (sinx_lh__d1 0)) (sqrtPs_lh__d1 ((minusPs_lh__d3 (fromIntegerPs_lh__d2 1)) ((powerPs_lh__d2 (cosx_lh__d1 0)) 2))))), (`LH_C(((extract_lh__d1 _lh_testPower_nofib_arg1_0) ((minusPs_lh__d2 ((divPs_lh__d1 (sinx_lh__d2 0)) (cosx_lh__d2 0))) (revert_lh__d1 (integral_lh__d1 ((divPs_lh__d2 (fromIntegerPs_lh__d1 1)) ((addPs_lh__d1 (fromIntegerPs_lh__d3 1)) ((powerPs_lh__d1 x_lh__d1) 2))))))), (`LH_C(((extract_lh__d2 _lh_testPower_nofib_arg1_0) ts_lh__d1), (`LH_C(((extract_lh__d4 _lh_testPower_nofib_arg1_0) tree_lh__d1), (`LH_N)))))))));;
//│ 		(testPower_nofib_lh__d1 14)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< after expansion <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [Pz]: 1009 --->
//│ 	case _lh_matchIdent³⁰ of {Pz  => [Pz] | Pc _lh_negatePs_Pc_0² _lh_negatePs_Pc_1² => [Pc (0 - _lh_negatePs_Pc_0²) negatePs_lh_₂(_lh_negatePs_Pc_1²)]}: 893
//│ [Pc (_lh_dotMult_arg1¹ * _lh_dotMult_Pc_0¹) dotMult_lh_₁(_lh_dotMult_arg1¹, _lh_dotMult_Pc_1¹)]: 1020 --->
//│ 	case _lh_matchIdent³⁰ of {Pz  => [Pz] | Pc _lh_negatePs_Pc_0² _lh_negatePs_Pc_1² => [Pc (0 - _lh_negatePs_Pc_0²) negatePs_lh_₂(_lh_negatePs_Pc_1²)]}: 893
//│ [Pz]: 1157 --->
//│ 	case _lh_matchIdent⁴⁰ of {Pz  => [Pz] | Pc _lh_int1_Pc_0³ _lh_int1_Pc_1³ => [Pc (_lh_int1_Pc_0³ / n⁴) int1³(_lh_int1_Pc_1³, (n⁴ + 1))]}: 1134
//│ [Pc (_lh_int1_Pc_0⁴ / n⁵) int1⁴(lazy⁰(_lh_int1_Pc_1⁴), (n⁵ + 1))]: 1174 --->
//│ 	case _lh_matchIdent⁴⁰ of {Pz  => [Pz] | Pc _lh_int1_Pc_0³ _lh_int1_Pc_1³ => [Pc (_lh_int1_Pc_0³ / n⁴) int1³(_lh_int1_Pc_1³, (n⁴ + 1))]}: 1134
//│ [Pc 0 int1⁴(_lh_integralLz_arg1¹, 1)]: 1187 --->
//│ 	case _lh_matchIdent⁴⁰ of {Pz  => [Pz] | Pc _lh_int1_Pc_0³ _lh_int1_Pc_1³ => [Pc (_lh_int1_Pc_0³ / n⁴) int1³(_lh_int1_Pc_1³, (n⁴ + 1))]}: 1134
//│ [Pz]: 1305 --->
//│ 	case _lh_matchIdent⁵³ of {Pz  => [Pz] | Pc _lh_int1_Pc_0⁵ _lh_int1_Pc_1⁵ => [Pc (_lh_int1_Pc_0⁵ / n⁶) int1⁵(_lh_int1_Pc_1⁵, (n⁶ + 1))]}: 1649
//│ [Pz]: 1307 --->
//│ 	case _lh_matchIdent⁵³ of {Pz  => [Pz] | Pc _lh_int1_Pc_0⁵ _lh_int1_Pc_1⁵ => [Pc (_lh_int1_Pc_0⁵ / n⁶) int1⁵(_lh_int1_Pc_1⁵, (n⁶ + 1))]}: 1649
//│ [Pc q⁴ divPs_lh_₂(addPs_lh_₆(_lh_divPs_Pc_1⁹, negatePs_lh_₄(dotMult_lh_₂(q⁴, _lh_divPs_Pc_1¹⁰))), lazy⁰([Pc _lh_divPs_Pc_0¹⁰ _lh_divPs_Pc_1¹⁰]))]: 1344 --->
//│ 	case _lh_matchIdent⁵³ of {Pz  => [Pz] | Pc _lh_int1_Pc_0⁵ _lh_int1_Pc_1⁵ => [Pc (_lh_int1_Pc_0⁵ / n⁶) int1⁵(_lh_int1_Pc_1⁵, (n⁶ + 1))]}: 1649
//│ [Pc q⁵ divPs_lh_₂(addPs_lh_₆(_lh_divPs_Pc_1⁹, negatePs_lh_₄(dotMult_lh_₂(q⁵, _lh_divPs_Pc_1¹¹))), lazy⁰([Pc _lh_divPs_Pc_0¹¹ _lh_divPs_Pc_1¹¹]))]: 1378 --->
//│ 	case _lh_matchIdent⁵³ of {Pz  => [Pz] | Pc _lh_int1_Pc_0⁵ _lh_int1_Pc_1⁵ => [Pc (_lh_int1_Pc_0⁵ / n⁶) int1⁵(_lh_int1_Pc_1⁵, (n⁶ + 1))]}: 1649
//│ [Pc 0 int1⁵(_lh_integral_arg1³, 1)]: 1661 --->
//│ 	case _lh_matchIdent⁴⁸ of {Pc _lh_revert_Pc_0⁰ _lh_revert_Pc_1⁰ => case _lh_revert_Pc_0⁰ of {0  => force⁰(let rs⁰ = lazy⁰([Pc 0 divPs_lh_₄(fromIntegerPs_lh_₆(1), compose_lh_₁(_lh_revert_Pc_1⁰, rs⁰))])
//│ in rs⁰) | _  => let _lh_matchIdent⁴⁹ = force⁰(_lh_revert_Pc_1⁰)
//│ in case _lh_matchIdent⁴⁹ of {Pc _lh_revert_Pc_0¹ _lh_revert_Pc_1¹ => let _lh_matchIdent⁵⁰ = force⁰(_lh_revert_Pc_1¹)
//│ in case _lh_matchIdent⁵⁰ of {Pz  => [Pc ((0 - 1) / _lh_revert_Pc_0¹) lazy⁰([Pc (1 / _lh_revert_Pc_0¹) lazy⁰([Pz])])]}}}}: 1560
//│ [Pc 1 _lh_sqrtPs_Pc_1⁰]: 1721 --->
//│ 	case _lh_matchIdent²⁸ of {Pz  => [Pz] | Pc _lh_deriv_Pc_0⁰ _lh_deriv_Pc_1⁰ => let deriv1⁰ = (fun gss⁰ -> (fun n¹ -> lazy⁰(let _lh_matchIdent²⁹ = force⁰(gss⁰)
//│ in case _lh_matchIdent²⁹ of {Pz  => [Pz] | Pc _lh_deriv_Pc_0¹ _lh_deriv_Pc_1¹ => [Pc (n¹ * _lh_deriv_Pc_0¹) deriv1⁰(_lh_deriv_Pc_1¹, (n¹ + 1))]})))
//│ in force⁰(deriv1⁰(_lh_deriv_Pc_1⁰, 1))}: 874
//│ ------------------
//│ case _lh_matchIdent²⁸ of {Pz  => [Pz] | Pc _lh_deriv_Pc_0⁰ _lh_deriv_Pc_1⁰ => let deriv1⁰ = (fun gss⁰ -> (fun n¹ -> lazy⁰(let _lh_matchIdent²⁹ = force⁰(gss⁰)
//│ in case _lh_matchIdent²⁹ of {Pz  => [Pz] | Pc _lh_deriv_Pc_0¹ _lh_deriv_Pc_1¹ => [Pc (n¹ * _lh_deriv_Pc_0¹) deriv1⁰(_lh_deriv_Pc_1¹, (n¹ + 1))]})))
//│ in force⁰(deriv1⁰(_lh_deriv_Pc_1⁰, 1))}: 874 --->
//│ 	[Pc 1 _lh_sqrtPs_Pc_1⁰]: 1721
//│ case _lh_matchIdent³⁰ of {Pz  => [Pz] | Pc _lh_negatePs_Pc_0² _lh_negatePs_Pc_1² => [Pc (0 - _lh_negatePs_Pc_0²) negatePs_lh_₂(_lh_negatePs_Pc_1²)]}: 893 --->
//│ 	[Pz]: 1009
//│ 	[Pc (_lh_dotMult_arg1¹ * _lh_dotMult_Pc_0¹) dotMult_lh_₁(_lh_dotMult_arg1¹, _lh_dotMult_Pc_1¹)]: 1020
//│ case _lh_matchIdent⁴⁰ of {Pz  => [Pz] | Pc _lh_int1_Pc_0³ _lh_int1_Pc_1³ => [Pc (_lh_int1_Pc_0³ / n⁴) int1³(_lh_int1_Pc_1³, (n⁴ + 1))]}: 1134 --->
//│ 	[Pz]: 1157
//│ 	[Pc (_lh_int1_Pc_0⁴ / n⁵) int1⁴(lazy⁰(_lh_int1_Pc_1⁴), (n⁵ + 1))]: 1174
//│ 	[Pc 0 int1⁴(_lh_integralLz_arg1¹, 1)]: 1187
//│ case _lh_matchIdent⁴⁸ of {Pc _lh_revert_Pc_0⁰ _lh_revert_Pc_1⁰ => case _lh_revert_Pc_0⁰ of {0  => force⁰(let rs⁰ = lazy⁰([Pc 0 divPs_lh_₄(fromIntegerPs_lh_₆(1), compose_lh_₁(_lh_revert_Pc_1⁰, rs⁰))])
//│ in rs⁰) | _  => let _lh_matchIdent⁴⁹ = force⁰(_lh_revert_Pc_1⁰)
//│ in case _lh_matchIdent⁴⁹ of {Pc _lh_revert_Pc_0¹ _lh_revert_Pc_1¹ => let _lh_matchIdent⁵⁰ = force⁰(_lh_revert_Pc_1¹)
//│ in case _lh_matchIdent⁵⁰ of {Pz  => [Pc ((0 - 1) / _lh_revert_Pc_0¹) lazy⁰([Pc (1 / _lh_revert_Pc_0¹) lazy⁰([Pz])])]}}}}: 1560 --->
//│ 	[Pc 0 int1⁵(_lh_integral_arg1³, 1)]: 1661
//│ case _lh_matchIdent⁵³ of {Pz  => [Pz] | Pc _lh_int1_Pc_0⁵ _lh_int1_Pc_1⁵ => [Pc (_lh_int1_Pc_0⁵ / n⁶) int1⁵(_lh_int1_Pc_1⁵, (n⁶ + 1))]}: 1649 --->
//│ 	[Pz]: 1305
//│ 	[Pz]: 1307
//│ 	[Pc q⁴ divPs_lh_₂(addPs_lh_₆(_lh_divPs_Pc_1⁹, negatePs_lh_₄(dotMult_lh_₂(q⁴, _lh_divPs_Pc_1¹⁰))), lazy⁰([Pc _lh_divPs_Pc_0¹⁰ _lh_divPs_Pc_1¹⁰]))]: 1344
//│ 	[Pc q⁵ divPs_lh_₂(addPs_lh_₆(_lh_divPs_Pc_1⁹, negatePs_lh_₄(dotMult_lh_₂(q⁵, _lh_divPs_Pc_1¹¹))), lazy⁰([Pc _lh_divPs_Pc_0¹¹ _lh_divPs_Pc_1¹¹]))]: 1378
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testPower_nofib_lh_₁(primId⁰(14))
//│ def addPs_lh_₁(_lh_addPs_arg1⁵, _lh_addPs_arg2⁵) = lazy⁰(
//│ 	let _lh_matchIdent⁵⁹ = force⁰(_lh_addPs_arg1⁵)
//│ 	in case _lh_matchIdent⁵⁹ of {
//│ 		Pz  => force⁰(_lh_addPs_arg2⁵)
//│ 		| Pc _lh_addPs_Pc_0¹⁰ _lh_addPs_Pc_1¹⁰ => 
//│ 			let _lh_matchIdent⁶⁰ = force⁰(_lh_addPs_arg2⁵)
//│ 			in case _lh_matchIdent⁶⁰ of {
//│ 				Pz  => force⁰(_lh_addPs_arg1⁵)
//│ 				| Pc _lh_addPs_Pc_0¹¹ _lh_addPs_Pc_1¹¹ => [Pc (_lh_addPs_Pc_0¹⁰ + _lh_addPs_Pc_0¹¹) addPs_lh_₁(_lh_addPs_Pc_1¹⁰, _lh_addPs_Pc_1¹¹)]}})
//│ def addPs_lh_₂(_lh_addPs_arg1², _lh_addPs_arg2²) = lazy⁰(
//│ 	let _lh_matchIdent²⁷ = force⁰(_lh_addPs_arg1²)
//│ 	in case _lh_matchIdent²⁷ of {
//│ 		Pz  => force⁰(_lh_addPs_arg2²)
//│ 		| Pc _lh_addPs_Pc_0⁴ _lh_addPs_Pc_1⁴ => 
//│ 			let _lh_matchIdent²⁸ = force⁰(_lh_addPs_arg2²)
//│ 			in case _lh_matchIdent²⁸ of {
//│ 				Pz  => force⁰(_lh_addPs_arg1²)
//│ 				| Pc _lh_addPs_Pc_0⁵ _lh_addPs_Pc_1⁵ => [Pc (_lh_addPs_Pc_0⁴ + _lh_addPs_Pc_0⁵) addPs_lh_₂(_lh_addPs_Pc_1⁴, _lh_addPs_Pc_1⁵)]}})
//│ def addPs_lh_₃(_lh_addPs_arg1¹, _lh_addPs_arg2¹) = lazy⁰(
//│ 	let _lh_matchIdent²³ = force⁰(_lh_addPs_arg1¹)
//│ 	in case _lh_matchIdent²³ of {
//│ 		Pz  => force⁰(_lh_addPs_arg2¹)
//│ 		| Pc _lh_addPs_Pc_0² _lh_addPs_Pc_1² => 
//│ 			let _lh_matchIdent²⁴ = force⁰(_lh_addPs_arg2¹)
//│ 			in case _lh_matchIdent²⁴ of {
//│ 				Pz  => force⁰(_lh_addPs_arg1¹)
//│ 				| Pc _lh_addPs_Pc_0³ _lh_addPs_Pc_1³ => [Pc (_lh_addPs_Pc_0² + _lh_addPs_Pc_0³) addPs_lh_₃(_lh_addPs_Pc_1², _lh_addPs_Pc_1³)]}})
//│ def addPs_lh_₄(_lh_addPs_arg1⁰, _lh_addPs_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent¹⁹ = force⁰(_lh_addPs_arg1⁰)
//│ 	in case _lh_matchIdent¹⁹ of {
//│ 		Pz  => force⁰(_lh_addPs_arg2⁰)
//│ 		| Pc _lh_addPs_Pc_0⁰ _lh_addPs_Pc_1⁰ => 
//│ 			let _lh_matchIdent²⁰ = force⁰(_lh_addPs_arg2⁰)
//│ 			in case _lh_matchIdent²⁰ of {
//│ 				Pz  => force⁰(_lh_addPs_arg1⁰)
//│ 				| Pc _lh_addPs_Pc_0¹ _lh_addPs_Pc_1¹ => [Pc (_lh_addPs_Pc_0⁰ + _lh_addPs_Pc_0¹) addPs_lh_₄(_lh_addPs_Pc_1⁰, _lh_addPs_Pc_1¹)]}})
//│ def addPs_lh_₅(_lh_addPs_arg1³, _lh_addPs_arg2³) = lazy⁰(
//│ 	let _lh_matchIdent⁴⁴ = force⁰(_lh_addPs_arg1³)
//│ 	in case _lh_matchIdent⁴⁴ of {
//│ 		Pz  => force⁰(_lh_addPs_arg2³)
//│ 		| Pc _lh_addPs_Pc_0⁶ _lh_addPs_Pc_1⁶ => 
//│ 			let _lh_matchIdent⁴⁵ = force⁰(_lh_addPs_arg2³)
//│ 			in case _lh_matchIdent⁴⁵ of {
//│ 				Pz  => force⁰(_lh_addPs_arg1³)
//│ 				| Pc _lh_addPs_Pc_0⁷ _lh_addPs_Pc_1⁷ => [Pc (_lh_addPs_Pc_0⁶ + _lh_addPs_Pc_0⁷) addPs_lh_₅(_lh_addPs_Pc_1⁶, _lh_addPs_Pc_1⁷)]}})
//│ def addPs_lh_₆(_lh_addPs_arg1⁴, _lh_addPs_arg2⁴) = lazy⁰(
//│ 	let _lh_matchIdent⁴⁶ = force⁰(_lh_addPs_arg1⁴)
//│ 	in case _lh_matchIdent⁴⁶ of {
//│ 		Pz  => force⁰(_lh_addPs_arg2⁴)
//│ 		| Pc _lh_addPs_Pc_0⁸ _lh_addPs_Pc_1⁸ => 
//│ 			let _lh_matchIdent⁴⁷ = force⁰(_lh_addPs_arg2⁴)
//│ 			in case _lh_matchIdent⁴⁷ of {
//│ 				Pz  => force⁰(_lh_addPs_arg1⁴)
//│ 				| Pc _lh_addPs_Pc_0⁹ _lh_addPs_Pc_1⁹ => [Pc (_lh_addPs_Pc_0⁸ + _lh_addPs_Pc_0⁹) addPs_lh_₆(_lh_addPs_Pc_1⁸, _lh_addPs_Pc_1⁹)]}})
//│ def composeSndLz_lh_₁(_lh_composeSndLz_arg1⁰, _lh_composeSndLz_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent¹⁶ = force⁰(_lh_composeSndLz_arg1⁰)
//│ 	in case _lh_matchIdent¹⁶ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_composeSndLz_Pc_0⁰ _lh_composeSndLz_Pc_1⁰ => 
//│ 			let _lh_matchIdent¹⁷ = force⁰(force⁰(_lh_composeSndLz_arg2⁰))
//│ 			in case _lh_matchIdent¹⁷ of {
//│ 				Pz  => [Pc _lh_composeSndLz_Pc_0⁰ lazy⁰([Pz])]
//│ 				| Pc _lh_composeSndLz_Pc_0¹ _lh_composeSndLz_Pc_1¹ => case _lh_composeSndLz_Pc_0¹ of {
//│ 					0  => [Pc _lh_composeSndLz_Pc_0⁰ multPs_lh_₁(_lh_composeSndLz_Pc_1¹, compose_lh_₁(_lh_composeSndLz_Pc_1⁰, lazy⁰([Pc 0 _lh_composeSndLz_Pc_1¹])))]
//│ 					| _  => force⁰(addPs_lh_₆(lazy⁰([Pc _lh_composeSndLz_Pc_0⁰ lazy⁰([Pz])]), multPsFstLz_lh_₁(_lh_composeSndLz_arg2⁰, composeSndLz_lh_₁(_lh_composeSndLz_Pc_1⁰, _lh_composeSndLz_arg2⁰))))}
//│ 				| _  => force⁰(addPs_lh_₆(lazy⁰([Pc _lh_composeSndLz_Pc_0⁰ lazy⁰([Pz])]), multPsFstLz_lh_₁(_lh_composeSndLz_arg2⁰, composeSndLz_lh_₁(_lh_composeSndLz_Pc_1⁰, _lh_composeSndLz_arg2⁰))))}})
//│ def compose_lh_₁(_lh_compose_arg1⁰, _lh_compose_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent⁸ = force⁰(_lh_compose_arg1⁰)
//│ 	in case _lh_matchIdent⁸ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_compose_Pc_0⁰ _lh_compose_Pc_1⁰ => 
//│ 			let _lh_matchIdent⁹ = force⁰(_lh_compose_arg2⁰)
//│ 			in case _lh_matchIdent⁹ of {
//│ 				Pz  => [Pc _lh_compose_Pc_0⁰ lazy⁰([Pz])]
//│ 				| Pc _lh_compose_Pc_0¹ _lh_compose_Pc_1¹ => case _lh_compose_Pc_0¹ of {
//│ 					0  => [Pc _lh_compose_Pc_0⁰ multPs_lh_₁(_lh_compose_Pc_1¹, compose_lh_₁(_lh_compose_Pc_1⁰, lazy⁰([Pc 0 _lh_compose_Pc_1¹])))]
//│ 					| _  => force⁰(addPs_lh_₆(lazy⁰([Pc _lh_compose_Pc_0⁰ lazy⁰([Pz])]), multPs_lh_₁(_lh_compose_arg2⁰, compose_lh_₁(_lh_compose_Pc_1⁰, _lh_compose_arg2⁰))))}
//│ 				| _  => force⁰(addPs_lh_₆(lazy⁰([Pc _lh_compose_Pc_0⁰ lazy⁰([Pz])]), multPs_lh_₁(_lh_compose_arg2⁰, compose_lh_₁(_lh_compose_Pc_1⁰, _lh_compose_arg2⁰))))}})
//│ def cosx_lh_₁(_lh_cosx_arg1⁰) = minusPs_lh_₄(lazy⁰([Pc 1 lazy⁰([Pz])]), integral_lh_₂(integralLz_lh_₁(lazy⁰(cosx_lh_₁(0)))))
//│ def cosx_lh_₂(_lh_cosx_arg1¹) = minusPs_lh_₅(lazy⁰([Pc 1 lazy⁰([Pz])]), integral_lh_₃(integralLz_lh_₂(lazy⁰(cosx_lh_₂(0)))))
//│ def deriv_lh_₁(_lh_deriv_arg1⁰) = lazy⁰(
//│ 	let _lh_matchIdent³¹ = force⁰(_lh_deriv_arg1⁰)
//│ 	in _lh_matchIdent³¹([lh_Unit]))
//│ def divPs_lh_₁(_lh_divPs_arg1³, _lh_divPs_arg2³) = lazy⁰(
//│ 	let _lh_matchIdent⁵¹ = force⁰(_lh_divPs_arg1³)
//│ 	in case _lh_matchIdent⁵¹ of {
//│ 		Pz  => 
//│ 			let _lh_matchIdent⁵² = force⁰(_lh_divPs_arg2³)
//│ 			in case _lh_matchIdent⁵² of {
//│ 				Pz  => error⁰([LH_C 'p' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'r' [LH_C 'i' [LH_C 'e' [LH_C 's' [LH_C ' ' [LH_C '0' [LH_C '/' [LH_C '0' [LH_N]]]]]]]]]]]]]]]]])
//│ 				| Pc _lh_divPs_Pc_0¹² _lh_divPs_Pc_1¹² => case _lh_divPs_Pc_0¹² of {
//│ 					0  => force⁰(divPs_lh_₁(lazy⁰([Pz]), _lh_divPs_Pc_1¹²))
//│ 					| _  => [Pz]}
//│ 				| _  => [Pz]}
//│ 		| Pc _lh_divPs_Pc_0¹³ _lh_divPs_Pc_1¹³ => case _lh_divPs_Pc_0¹³ of {
//│ 			0  => 
//│ 				let _lh_matchIdent⁵³ = force⁰(_lh_divPs_arg2³)
//│ 				in case _lh_matchIdent⁵³ of {
//│ 					Pc _lh_divPs_Pc_0¹⁴ _lh_divPs_Pc_1¹⁴ => case _lh_divPs_Pc_0¹⁴ of {
//│ 						0  => force⁰(divPs_lh_₁(_lh_divPs_Pc_1¹³, _lh_divPs_Pc_1¹⁴))
//│ 						| _  => 
//│ 							let q⁶ = 0
//│ 							in [Pc q⁶ divPs_lh_₁(addPs_lh_₃(_lh_divPs_Pc_1¹³, negatePs_lh_₁(dotMult_lh_₂(q⁶, _lh_divPs_Pc_1¹⁴))), lazy⁰([Pc _lh_divPs_Pc_0¹⁴ _lh_divPs_Pc_1¹⁴]))]}}
//│ 			| _  => 
//│ 				let _lh_matchIdent⁵⁴ = force⁰(_lh_divPs_arg2³)
//│ 				in case _lh_matchIdent⁵⁴ of {
//│ 					Pc _lh_divPs_Pc_0¹⁵ _lh_divPs_Pc_1¹⁵ => 
//│ 						let q⁷ = (_lh_divPs_Pc_0¹³ / _lh_divPs_Pc_0¹⁵)
//│ 						in [Pc q⁷ divPs_lh_₁(addPs_lh_₂(_lh_divPs_Pc_1¹³, negatePs_lh_₂(dotMult_lh_₁(q⁷, _lh_divPs_Pc_1¹⁵))), lazy⁰([Pc _lh_divPs_Pc_0¹⁵ _lh_divPs_Pc_1¹⁵]))]}}})
//│ def divPs_lh_₂(_lh_divPs_arg1¹, _lh_divPs_arg2¹) = lazy⁰(
//│ 	let _lh_matchIdent¹⁰ = force⁰(_lh_divPs_arg1¹)
//│ 	in case _lh_matchIdent¹⁰ of {
//│ 		Pz  => 
//│ 			let _lh_matchIdent¹¹ = force⁰(_lh_divPs_arg2¹)
//│ 			in case _lh_matchIdent¹¹ of {
//│ 				Pz  => error⁰([LH_C 'p' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'r' [LH_C 'i' [LH_C 'e' [LH_C 's' [LH_C ' ' [LH_C '0' [LH_C '/' [LH_C '0' [LH_N]]]]]]]]]]]]]]]]])
//│ 				| Pc _lh_divPs_Pc_0⁴ _lh_divPs_Pc_1⁴ => case _lh_divPs_Pc_0⁴ of {
//│ 					0  => force⁰(divPs_lh_₂(lazy⁰([Pz]), _lh_divPs_Pc_1⁴))
//│ 					| _  => (fun int1⁴ -> (fun n⁴ -> [Pz]))}
//│ 				| _  => (fun int1⁵ -> (fun n⁵ -> [Pz]))}
//│ 		| Pc _lh_divPs_Pc_0⁵ _lh_divPs_Pc_1⁵ => case _lh_divPs_Pc_0⁵ of {
//│ 			0  => 
//│ 				let _lh_matchIdent¹² = force⁰(_lh_divPs_arg2¹)
//│ 				in case _lh_matchIdent¹² of {
//│ 					Pc _lh_divPs_Pc_0⁶ _lh_divPs_Pc_1⁶ => case _lh_divPs_Pc_0⁶ of {
//│ 						0  => force⁰(divPs_lh_₂(_lh_divPs_Pc_1⁵, _lh_divPs_Pc_1⁶))
//│ 						| _  => 
//│ 							let q² = 0
//│ 							in let _lh_int1_Pc_1³ = divPs_lh_₂(addPs_lh_₆(_lh_divPs_Pc_1⁵, negatePs_lh_₄(dotMult_lh_₂(q², _lh_divPs_Pc_1⁶))), lazy⁰([Pc _lh_divPs_Pc_0⁶ _lh_divPs_Pc_1⁶]))
//│ 							in let _lh_int1_Pc_0³ = q²
//│ 							in (fun int1⁶ -> (fun n⁶ -> [Pc (_lh_int1_Pc_0³ / n⁶) int1⁶(_lh_int1_Pc_1³, (n⁶ + 1))]))}}
//│ 			| _  => 
//│ 				let _lh_matchIdent¹³ = force⁰(_lh_divPs_arg2¹)
//│ 				in case _lh_matchIdent¹³ of {
//│ 					Pc _lh_divPs_Pc_0⁷ _lh_divPs_Pc_1⁷ => 
//│ 						let q³ = (_lh_divPs_Pc_0⁵ / _lh_divPs_Pc_0⁷)
//│ 						in let _lh_int1_Pc_1⁴ = divPs_lh_₂(addPs_lh_₆(_lh_divPs_Pc_1⁵, negatePs_lh_₄(dotMult_lh_₂(q³, _lh_divPs_Pc_1⁷))), lazy⁰([Pc _lh_divPs_Pc_0⁷ _lh_divPs_Pc_1⁷]))
//│ 						in let _lh_int1_Pc_0⁴ = q³
//│ 						in (fun int1⁷ -> (fun n⁷ -> [Pc (_lh_int1_Pc_0⁴ / n⁷) int1⁷(_lh_int1_Pc_1⁴, (n⁷ + 1))]))}}})
//│ def divPs_lh_₃(_lh_divPs_arg1², _lh_divPs_arg2²) = lazy⁰(
//│ 	let _lh_matchIdent³⁷ = force⁰(_lh_divPs_arg1²)
//│ 	in case _lh_matchIdent³⁷ of {
//│ 		Pz  => 
//│ 			let _lh_matchIdent³⁸ = force⁰(_lh_divPs_arg2²)
//│ 			in case _lh_matchIdent³⁸ of {
//│ 				Pz  => error⁰([LH_C 'p' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'r' [LH_C 'i' [LH_C 'e' [LH_C 's' [LH_C ' ' [LH_C '0' [LH_C '/' [LH_C '0' [LH_N]]]]]]]]]]]]]]]]])
//│ 				| Pc _lh_divPs_Pc_0⁸ _lh_divPs_Pc_1⁸ => case _lh_divPs_Pc_0⁸ of {
//│ 					0  => force⁰(divPs_lh_₃(lazy⁰([Pz]), _lh_divPs_Pc_1⁸))
//│ 					| _  => [Pz]}
//│ 				| _  => [Pz]}
//│ 		| Pc _lh_divPs_Pc_0⁹ _lh_divPs_Pc_1⁹ => case _lh_divPs_Pc_0⁹ of {
//│ 			0  => 
//│ 				let _lh_matchIdent³⁹ = force⁰(_lh_divPs_arg2²)
//│ 				in case _lh_matchIdent³⁹ of {
//│ 					Pc _lh_divPs_Pc_0¹⁰ _lh_divPs_Pc_1¹⁰ => case _lh_divPs_Pc_0¹⁰ of {
//│ 						0  => force⁰(divPs_lh_₃(_lh_divPs_Pc_1⁹, _lh_divPs_Pc_1¹⁰))
//│ 						| _  => 
//│ 							let q⁴ = 0
//│ 							in [Pc q⁴ divPs_lh_₃(addPs_lh_₆(_lh_divPs_Pc_1⁹, negatePs_lh_₄(dotMult_lh_₂(q⁴, _lh_divPs_Pc_1¹⁰))), lazy⁰([Pc _lh_divPs_Pc_0¹⁰ _lh_divPs_Pc_1¹⁰]))]}}
//│ 			| _  => 
//│ 				let _lh_matchIdent⁴⁰ = force⁰(_lh_divPs_arg2²)
//│ 				in case _lh_matchIdent⁴⁰ of {
//│ 					Pc _lh_divPs_Pc_0¹¹ _lh_divPs_Pc_1¹¹ => 
//│ 						let q⁵ = (_lh_divPs_Pc_0⁹ / _lh_divPs_Pc_0¹¹)
//│ 						in [Pc q⁵ divPs_lh_₃(addPs_lh_₆(_lh_divPs_Pc_1⁹, negatePs_lh_₄(dotMult_lh_₂(q⁵, _lh_divPs_Pc_1¹¹))), lazy⁰([Pc _lh_divPs_Pc_0¹¹ _lh_divPs_Pc_1¹¹]))]}}})
//│ def divPs_lh_₄(_lh_divPs_arg1⁰, _lh_divPs_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent³ = force⁰(_lh_divPs_arg1⁰)
//│ 	in case _lh_matchIdent³ of {
//│ 		Pz  => 
//│ 			let _lh_matchIdent⁴ = force⁰(_lh_divPs_arg2⁰)
//│ 			in case _lh_matchIdent⁴ of {
//│ 				Pz  => error⁰([LH_C 'p' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'r' [LH_C 'i' [LH_C 'e' [LH_C 's' [LH_C ' ' [LH_C '0' [LH_C '/' [LH_C '0' [LH_N]]]]]]]]]]]]]]]]])
//│ 				| Pc _lh_divPs_Pc_0⁰ _lh_divPs_Pc_1⁰ => case _lh_divPs_Pc_0⁰ of {
//│ 					0  => force⁰(divPs_lh_₄(lazy⁰([Pz]), _lh_divPs_Pc_1⁰))
//│ 					| _  => [Pz]}
//│ 				| _  => [Pz]}
//│ 		| Pc _lh_divPs_Pc_0¹ _lh_divPs_Pc_1¹ => case _lh_divPs_Pc_0¹ of {
//│ 			0  => 
//│ 				let _lh_matchIdent⁵ = force⁰(_lh_divPs_arg2⁰)
//│ 				in case _lh_matchIdent⁵ of {
//│ 					Pc _lh_divPs_Pc_0² _lh_divPs_Pc_1² => case _lh_divPs_Pc_0² of {
//│ 						0  => force⁰(divPs_lh_₄(_lh_divPs_Pc_1¹, _lh_divPs_Pc_1²))
//│ 						| _  => 
//│ 							let q⁰ = 0
//│ 							in [Pc q⁰ divPs_lh_₄(addPs_lh_₆(_lh_divPs_Pc_1¹, negatePs_lh_₄(dotMult_lh_₂(q⁰, _lh_divPs_Pc_1²))), lazy⁰([Pc _lh_divPs_Pc_0² _lh_divPs_Pc_1²]))]}}
//│ 			| _  => 
//│ 				let _lh_matchIdent⁶ = force⁰(_lh_divPs_arg2⁰)
//│ 				in case _lh_matchIdent⁶ of {
//│ 					Pc _lh_divPs_Pc_0³ _lh_divPs_Pc_1³ => 
//│ 						let q¹ = (_lh_divPs_Pc_0¹ / _lh_divPs_Pc_0³)
//│ 						in [Pc q¹ divPs_lh_₄(addPs_lh_₆(_lh_divPs_Pc_1¹, negatePs_lh_₄(dotMult_lh_₂(q¹, _lh_divPs_Pc_1³))), lazy⁰([Pc _lh_divPs_Pc_0³ _lh_divPs_Pc_1³]))]}}})
//│ def dotMultSndLz_lh_₁(_lh_dotMultSndLz_arg1⁰, _lh_dotMultSndLz_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent¹⁵ = force⁰(force⁰(_lh_dotMultSndLz_arg2⁰))
//│ 	in case _lh_matchIdent¹⁵ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_dotMultSndLz_Pc_0⁰ _lh_dotMultSndLz_Pc_1⁰ => [Pc (_lh_dotMultSndLz_arg1⁰ * _lh_dotMultSndLz_Pc_0⁰) dotMult_lh_₂(_lh_dotMultSndLz_arg1⁰, _lh_dotMultSndLz_Pc_1⁰)]})
//│ def dotMult_lh_₁(_lh_dotMult_arg1⁰, _lh_dotMult_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent¹⁴ = force⁰(_lh_dotMult_arg2⁰)
//│ 	in case _lh_matchIdent¹⁴ of {
//│ 		Pz  => (fun _lh_dummy⁰ -> [Pz])
//│ 		| Pc _lh_dotMult_Pc_0⁰ _lh_dotMult_Pc_1⁰ => 
//│ 			let _lh_negatePs_Pc_1⁰ = dotMult_lh_₁(_lh_dotMult_arg1⁰, _lh_dotMult_Pc_1⁰)
//│ 			in let _lh_negatePs_Pc_0⁰ = (_lh_dotMult_arg1⁰ * _lh_dotMult_Pc_0⁰)
//│ 			in (fun _lh_dummy¹ -> [Pc (0 - _lh_negatePs_Pc_0⁰) negatePs_lh_₂(_lh_negatePs_Pc_1⁰)])})
//│ def dotMult_lh_₂(_lh_dotMult_arg1¹, _lh_dotMult_arg2¹) = lazy⁰(
//│ 	let _lh_matchIdent²⁵ = force⁰(_lh_dotMult_arg2¹)
//│ 	in case _lh_matchIdent²⁵ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_dotMult_Pc_0¹ _lh_dotMult_Pc_1¹ => [Pc (_lh_dotMult_arg1¹ * _lh_dotMult_Pc_0¹) dotMult_lh_₂(_lh_dotMult_arg1¹, _lh_dotMult_Pc_1¹)]})
//│ def extract_lh_₁(_lh_extract_arg1¹, _lh_extract_arg2¹) = if (_lh_extract_arg1¹ == 0) then [LH_N] else 
//│ 	let _lh_matchIdent³⁵ = force⁰(_lh_extract_arg2¹)
//│ 	in case _lh_matchIdent³⁵ of {
//│ 		Pz  => [LH_N]
//│ 		| Pc _lh_extract_Pc_0¹ _lh_extract_Pc_1¹ => [LH_C _lh_extract_Pc_0¹ extract_lh_₁((_lh_extract_arg1¹ - 1), _lh_extract_Pc_1¹)]}
//│ def extract_lh_₂(_lh_extract_arg1², _lh_extract_arg2²) = if (_lh_extract_arg1² == 0) then [LH_N] else 
//│ 	let _lh_matchIdent⁴⁸ = force⁰(_lh_extract_arg2²)
//│ 	in case _lh_matchIdent⁴⁸ of {
//│ 		Pz  => [LH_N]
//│ 		| Pc _lh_extract_Pc_0² _lh_extract_Pc_1² => [LH_C _lh_extract_Pc_0² extract_lh_₂((_lh_extract_arg1² - 1), _lh_extract_Pc_1²)]}
//│ def extract_lh_₃(_lh_extract_arg1⁰, _lh_extract_arg2⁰) = if (_lh_extract_arg1⁰ == 0) then [LH_N] else 
//│ 	let _lh_matchIdent³⁰ = force⁰(_lh_extract_arg2⁰)
//│ 	in case _lh_matchIdent³⁰ of {
//│ 		Pz  => [LH_N]
//│ 		| Pc _lh_extract_Pc_0⁰ _lh_extract_Pc_1⁰ => [LH_C _lh_extract_Pc_0⁰ extract_lh_₃((_lh_extract_arg1⁰ - 1), _lh_extract_Pc_1⁰)]}
//│ def extract_lh_₄(_lh_extract_arg1³, _lh_extract_arg2³) = if (_lh_extract_arg1³ == 0) then [LH_N] else 
//│ 	let _lh_matchIdent⁶¹ = force⁰(_lh_extract_arg2³)
//│ 	in case _lh_matchIdent⁶¹ of {
//│ 		Pz  => [LH_N]
//│ 		| Pc _lh_extract_Pc_0³ _lh_extract_Pc_1³ => [LH_C _lh_extract_Pc_0³ extract_lh_₄((_lh_extract_arg1³ - 1), _lh_extract_Pc_1³)]}
//│ def fromIntegerPs_lh_₁(_lh_fromIntegerPs_arg1²) = case _lh_fromIntegerPs_arg1² of {
//│ 	0  => lazy⁰([Pz])
//│ 	| _  => lazy⁰([Pc _lh_fromIntegerPs_arg1² lazy⁰([Pz])])}
//│ def fromIntegerPs_lh_₂(_lh_fromIntegerPs_arg1³) = case _lh_fromIntegerPs_arg1³ of {
//│ 	0  => lazy⁰([Pz])
//│ 	| _  => lazy⁰([Pc _lh_fromIntegerPs_arg1³ lazy⁰([Pz])])}
//│ def fromIntegerPs_lh_₃(_lh_fromIntegerPs_arg1¹) = case _lh_fromIntegerPs_arg1¹ of {
//│ 	0  => lazy⁰([Pz])
//│ 	| _  => lazy⁰([Pc _lh_fromIntegerPs_arg1¹ lazy⁰([Pz])])}
//│ def fromIntegerPs_lh_₄(_lh_fromIntegerPs_arg1⁵) = case _lh_fromIntegerPs_arg1⁵ of {
//│ 	0  => lazy⁰([Pz])
//│ 	| _  => lazy⁰([Pc _lh_fromIntegerPs_arg1⁵ lazy⁰([Pz])])}
//│ def fromIntegerPs_lh_₅(_lh_fromIntegerPs_arg1⁴) = case _lh_fromIntegerPs_arg1⁴ of {
//│ 	0  => lazy⁰([Pz])
//│ 	| _  => lazy⁰([Pc _lh_fromIntegerPs_arg1⁴ lazy⁰([Pz])])}
//│ def fromIntegerPs_lh_₆(_lh_fromIntegerPs_arg1⁰) = case _lh_fromIntegerPs_arg1⁰ of {
//│ 	0  => lazy⁰([Pz])
//│ 	| _  => lazy⁰([Pc _lh_fromIntegerPs_arg1⁰ lazy⁰([Pz])])}
//│ def integralLz_lh_₁(_lh_integralLz_arg1⁰) = 
//│ 	let int1⁰ = (fun fss⁰ -> (fun n⁰ -> lazy⁰(
//│ 		let _lh_matchIdent⁷ = force⁰(force⁰(fss⁰))
//│ 		in case _lh_matchIdent⁷ of {
//│ 			Pz  => (fun int1¹ -> (fun n¹ -> [Pz]))
//│ 			| Pc _lh_int1_Pc_0⁰ _lh_int1_Pc_1⁰ => 
//│ 				let _lh_int1_Pc_1¹ = int1⁰(lazy⁰(_lh_int1_Pc_1⁰), (n⁰ + 1))
//│ 				in let _lh_int1_Pc_0¹ = (_lh_int1_Pc_0⁰ / n⁰)
//│ 				in (fun int1² -> (fun n² -> [Pc (_lh_int1_Pc_0¹ / n²) int1²(_lh_int1_Pc_1¹, (n² + 1))]))})))
//│ 	in lazy⁰(
//│ 		let _lh_int1_Pc_1² = int1⁰(_lh_integralLz_arg1⁰, 1)
//│ 		in let _lh_int1_Pc_0² = 0
//│ 		in (fun int1³ -> (fun n³ -> [Pc (_lh_int1_Pc_0² / n³) int1³(_lh_int1_Pc_1², (n³ + 1))])))
//│ def integralLz_lh_₂(_lh_integralLz_arg1¹) = 
//│ 	let int1⁸ = (fun fss¹ -> (fun n⁸ -> lazy⁰(
//│ 		let _lh_matchIdent²¹ = force⁰(force⁰(fss¹))
//│ 		in case _lh_matchIdent²¹ of {
//│ 			Pz  => [Pz]
//│ 			| Pc _lh_int1_Pc_0⁵ _lh_int1_Pc_1⁵ => [Pc (_lh_int1_Pc_0⁵ / n⁸) int1⁸(lazy⁰(_lh_int1_Pc_1⁵), (n⁸ + 1))]})))
//│ 	in lazy⁰([Pc 0 int1⁸(_lh_integralLz_arg1¹, 1)])
//│ def integral_lh_₁(_lh_integral_arg1³) = 
//│ 	let int1¹² = (fun fss⁵ -> (fun n¹² -> lazy⁰(
//│ 		let _lh_matchIdent³² = force⁰(fss⁵)
//│ 		in _lh_matchIdent³²(int1¹², n¹²))))
//│ 	in lazy⁰(
//│ 		let _lh_revert_Pc_1⁰ = int1¹²(_lh_integral_arg1³, 1)
//│ 		in let _lh_revert_Pc_0⁰ = 0
//│ 		in (fun _lh_dummy² -> case _lh_revert_Pc_0⁰ of {
//│ 			0  => force⁰(
//│ 				let rs⁰ = lazy⁰([Pc 0 divPs_lh_₄(fromIntegerPs_lh_₆(1), compose_lh_₁(_lh_revert_Pc_1⁰, rs⁰))])
//│ 				in rs⁰)
//│ 			| _  => 
//│ 				let _lh_matchIdent³³ = force⁰(_lh_revert_Pc_1⁰)
//│ 				in case _lh_matchIdent³³ of {
//│ 					Pc _lh_revert_Pc_0¹ _lh_revert_Pc_1¹ => 
//│ 						let _lh_matchIdent³⁴ = force⁰(_lh_revert_Pc_1¹)
//│ 						in case _lh_matchIdent³⁴ of {
//│ 							Pz  => [Pc ((0 - 1) / _lh_revert_Pc_0¹) lazy⁰([Pc (1 / _lh_revert_Pc_0¹) lazy⁰([Pz])])]}}}))
//│ def integral_lh_₂(_lh_integral_arg1⁰) = 
//│ 	let int1⁹ = (fun fss² -> (fun n⁹ -> lazy⁰(
//│ 		let _lh_matchIdent²² = force⁰(fss²)
//│ 		in _lh_matchIdent²²(int1⁹, n⁹))))
//│ 	in lazy⁰([Pc 0 int1⁹(_lh_integral_arg1⁰, 1)])
//│ def integral_lh_₃(_lh_integral_arg1¹) = 
//│ 	let int1¹⁰ = (fun fss³ -> (fun n¹⁰ -> lazy⁰(
//│ 		let _lh_matchIdent²⁶ = force⁰(fss³)
//│ 		in case _lh_matchIdent²⁶ of {
//│ 			Pz  => [Pz]
//│ 			| Pc _lh_int1_Pc_0⁶ _lh_int1_Pc_1⁶ => [Pc (_lh_int1_Pc_0⁶ / n¹⁰) int1¹⁰(_lh_int1_Pc_1⁶, (n¹⁰ + 1))]})))
//│ 	in lazy⁰([Pc 0 int1¹⁰(_lh_integral_arg1¹, 1)])
//│ def integral_lh_₄(_lh_integral_arg1²) = 
//│ 	let int1¹¹ = (fun fss⁴ -> (fun n¹¹ -> lazy⁰(
//│ 		let _lh_matchIdent²⁹ = force⁰(fss⁴)
//│ 		in case _lh_matchIdent²⁹ of {
//│ 			Pz  => [Pz]
//│ 			| Pc _lh_int1_Pc_0⁷ _lh_int1_Pc_1⁷ => [Pc (_lh_int1_Pc_0⁷ / n¹¹) int1¹¹(_lh_int1_Pc_1⁷, (n¹¹ + 1))]})))
//│ 	in lazy⁰([Pc 0 int1¹¹(_lh_integral_arg1², 1)])
//│ def list_lh_₁ = lazy⁰([Pc 1 list_lh_₁])
//│ def minusPs_lh_₁(_lh_minusPs_arg1¹, _lh_minusPs_arg2¹) = addPs_lh_₅(_lh_minusPs_arg1¹, negatePs_lh_₃(_lh_minusPs_arg2¹))
//│ def minusPs_lh_₂(_lh_minusPs_arg1⁴, _lh_minusPs_arg2⁴) = addPs_lh_₆(_lh_minusPs_arg1⁴, negatePs_lh_₄(_lh_minusPs_arg2⁴))
//│ def minusPs_lh_₃(_lh_minusPs_arg1², _lh_minusPs_arg2²) = addPs_lh_₆(_lh_minusPs_arg1², negatePs_lh_₄(_lh_minusPs_arg2²))
//│ def minusPs_lh_₄(_lh_minusPs_arg1³, _lh_minusPs_arg2³) = addPs_lh_₆(_lh_minusPs_arg1³, negatePs_lh_₄(_lh_minusPs_arg2³))
//│ def minusPs_lh_₅(_lh_minusPs_arg1⁰, _lh_minusPs_arg2⁰) = addPs_lh_₆(_lh_minusPs_arg1⁰, negatePs_lh_₄(_lh_minusPs_arg2⁰))
//│ def multPsFstLz_lh_₁(_lh_multPsFstLz_arg1⁰, _lh_multPsFstLz_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent¹ = force⁰(force⁰(_lh_multPsFstLz_arg1⁰))
//│ 	in case _lh_matchIdent¹ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_multPsFstLz_Pc_0⁰ _lh_multPsFstLz_Pc_1⁰ => 
//│ 			let _lh_matchIdent² = force⁰(_lh_multPsFstLz_arg2⁰)
//│ 			in case _lh_matchIdent² of {
//│ 				Pz  => [Pz]
//│ 				| Pc _lh_multPsFstLz_Pc_0¹ _lh_multPsFstLz_Pc_1¹ => [Pc (_lh_multPsFstLz_Pc_0⁰ * _lh_multPsFstLz_Pc_0¹) addPs_lh_₆(addPs_lh_₆(dotMult_lh_₂(_lh_multPsFstLz_Pc_0⁰, _lh_multPsFstLz_Pc_1¹), dotMult_lh_₂(_lh_multPsFstLz_Pc_0¹, _lh_multPsFstLz_Pc_1⁰)), multPs_lh_₁(multPs_lh_₁(x_lh_₁, _lh_multPsFstLz_Pc_1⁰), _lh_multPsFstLz_Pc_1¹))]}})
//│ def multPsLzLz_lh_₁(_lh_multPsLzLz_arg1⁰, _lh_multPsLzLz_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent⁵⁶ = force⁰(force⁰(_lh_multPsLzLz_arg1⁰))
//│ 	in case _lh_matchIdent⁵⁶ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_multPsLzLz_Pc_0⁰ _lh_multPsLzLz_Pc_1⁰ => 
//│ 			let _lh_matchIdent⁵⁷ = force⁰(force⁰(_lh_multPsLzLz_arg2⁰))
//│ 			in case _lh_matchIdent⁵⁷ of {
//│ 				Pz  => [Pz]
//│ 				| Pc _lh_multPsLzLz_Pc_0¹ _lh_multPsLzLz_Pc_1¹ => [Pc (_lh_multPsLzLz_Pc_0⁰ * _lh_multPsLzLz_Pc_0¹) addPs_lh_₆(addPs_lh_₆(dotMult_lh_₂(_lh_multPsLzLz_Pc_0⁰, _lh_multPsLzLz_Pc_1¹), dotMult_lh_₂(_lh_multPsLzLz_Pc_0¹, _lh_multPsLzLz_Pc_1⁰)), multPs_lh_₁(multPs_lh_₁(x_lh_₁, _lh_multPsLzLz_Pc_1⁰), _lh_multPsLzLz_Pc_1¹))]}})
//│ def multPs_lh_₁(_lh_multPs_arg1⁰, _lh_multPs_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent⁴⁹ = force⁰(_lh_multPs_arg1⁰)
//│ 	in case _lh_matchIdent⁴⁹ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_multPs_Pc_0⁰ _lh_multPs_Pc_1⁰ => 
//│ 			let _lh_matchIdent⁵⁰ = force⁰(_lh_multPs_arg2⁰)
//│ 			in case _lh_matchIdent⁵⁰ of {
//│ 				Pz  => [Pz]
//│ 				| Pc _lh_multPs_Pc_0¹ _lh_multPs_Pc_1¹ => [Pc (_lh_multPs_Pc_0⁰ * _lh_multPs_Pc_0¹) addPs_lh_₆(addPs_lh_₆(dotMult_lh_₂(_lh_multPs_Pc_0⁰, _lh_multPs_Pc_1¹), dotMult_lh_₂(_lh_multPs_Pc_0¹, _lh_multPs_Pc_1⁰)), multPs_lh_₁(multPs_lh_₁(x_lh_₁, _lh_multPs_Pc_1⁰), _lh_multPs_Pc_1¹))]}})
//│ def negatePs_lh_₁(_lh_negatePs_arg1³) = lazy⁰(
//│ 	let _lh_matchIdent⁵⁸ = force⁰(_lh_negatePs_arg1³)
//│ 	in case _lh_matchIdent⁵⁸ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_negatePs_Pc_0³ _lh_negatePs_Pc_1³ => [Pc (0 - _lh_negatePs_Pc_0³) negatePs_lh_₁(_lh_negatePs_Pc_1³)]})
//│ def negatePs_lh_₂(_lh_negatePs_arg1¹) = lazy⁰(
//│ 	let _lh_matchIdent³⁶ = force⁰(_lh_negatePs_arg1¹)
//│ 	in _lh_matchIdent³⁶([lh_Unit]))
//│ def negatePs_lh_₃(_lh_negatePs_arg1⁰) = lazy⁰(
//│ 	let _lh_matchIdent¹⁸ = force⁰(_lh_negatePs_arg1⁰)
//│ 	in case _lh_matchIdent¹⁸ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_negatePs_Pc_0¹ _lh_negatePs_Pc_1¹ => [Pc (0 - _lh_negatePs_Pc_0¹) negatePs_lh_₃(_lh_negatePs_Pc_1¹)]})
//│ def negatePs_lh_₄(_lh_negatePs_arg1²) = lazy⁰(
//│ 	let _lh_matchIdent⁵⁵ = force⁰(_lh_negatePs_arg1²)
//│ 	in case _lh_matchIdent⁵⁵ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_negatePs_Pc_0² _lh_negatePs_Pc_1² => [Pc (0 - _lh_negatePs_Pc_0²) negatePs_lh_₄(_lh_negatePs_Pc_1²)]})
//│ def powerPs_lh_₁(_lh_powerPs_arg1¹, _lh_powerPs_arg2¹) = if (_lh_powerPs_arg2¹ <= 0) then fromIntegerPs_lh_₅(1) else multPs_lh_₁(_lh_powerPs_arg1¹, powerPs_lh_₁(_lh_powerPs_arg1¹, (_lh_powerPs_arg2¹ - 1)))
//│ def powerPs_lh_₂(_lh_powerPs_arg1⁰, _lh_powerPs_arg2⁰) = if (_lh_powerPs_arg2⁰ <= 0) then fromIntegerPs_lh_₆(1) else multPs_lh_₁(_lh_powerPs_arg1⁰, powerPs_lh_₂(_lh_powerPs_arg1⁰, (_lh_powerPs_arg2⁰ - 1)))
//│ def revert_lh_₁(_lh_revert_arg1⁰) = lazy⁰(
//│ 	let _lh_matchIdent⁰ = force⁰(_lh_revert_arg1⁰)
//│ 	in _lh_matchIdent⁰([lh_Unit]))
//│ def sinx_lh_₁(_lh_sinx_arg1⁰) = integral_lh_₄(minusPs_lh_₅(lazy⁰([Pc 1 lazy⁰([Pz])]), integralLz_lh_₂(lazy⁰(sinx_lh_₁(0)))))
//│ def sinx_lh_₂(_lh_sinx_arg1¹) = integral_lh_₄(minusPs_lh_₅(lazy⁰([Pc 1 lazy⁰([Pz])]), integralLz_lh_₂(lazy⁰(sinx_lh_₂(0)))))
//│ def sqrtPs_lh_₁(_lh_sqrtPs_arg1⁰) = lazy⁰(
//│ 	let _lh_matchIdent⁴¹ = force⁰(_lh_sqrtPs_arg1⁰)
//│ 	in case _lh_matchIdent⁴¹ of {
//│ 		Pz  => [Pz]
//│ 		| Pc _lh_sqrtPs_Pc_0⁰ _lh_sqrtPs_Pc_1⁰ => case _lh_sqrtPs_Pc_0⁰ of {
//│ 			0  => 
//│ 				let _lh_matchIdent⁴² = force⁰(_lh_sqrtPs_Pc_1⁰)
//│ 				in case _lh_matchIdent⁴² of {
//│ 					Pc _lh_sqrtPs_Pc_0¹ _lh_sqrtPs_Pc_1¹ => case _lh_sqrtPs_Pc_0¹ of {
//│ 						0  => [Pc 0 sqrtPs_lh_₁(_lh_sqrtPs_Pc_1¹)]}}
//│ 			| 1  => 
//│ 				let qs⁰ = lazy⁰(addPs_lh_₄(fromIntegerPs_lh_₄(1), integral_lh_₄(divPs_lh_₃(deriv_lh_₁(lazy⁰(
//│ 					let _lh_deriv_Pc_1⁰ = _lh_sqrtPs_Pc_1⁰
//│ 					in let _lh_deriv_Pc_0⁰ = 1
//│ 					in (fun _lh_dummy³ -> 
//│ 						let deriv1⁰ = (fun gss⁰ -> (fun n¹³ -> lazy⁰(
//│ 							let _lh_matchIdent⁴³ = force⁰(gss⁰)
//│ 							in case _lh_matchIdent⁴³ of {
//│ 								Pz  => [Pz]
//│ 								| Pc _lh_deriv_Pc_0¹ _lh_deriv_Pc_1¹ => [Pc (n¹³ * _lh_deriv_Pc_0¹) deriv1⁰(_lh_deriv_Pc_1¹, (n¹³ + 1))]})))
//│ 						in force⁰(deriv1⁰(_lh_deriv_Pc_1⁰, 1))))), dotMultSndLz_lh_₁(2, qs⁰)))))
//│ 				in force⁰(force⁰(qs⁰))}})
//│ def testPower_nofib_lh_₁(_lh_testPower_nofib_arg1⁰) = [LH_C extract_lh_₃(_lh_testPower_nofib_arg1⁰, minusPs_lh_₁(sinx_lh_₁(0), sqrtPs_lh_₁(minusPs_lh_₃(fromIntegerPs_lh_₂(1), powerPs_lh_₂(cosx_lh_₁(0), 2))))) [LH_C extract_lh_₁(_lh_testPower_nofib_arg1⁰, minusPs_lh_₂(divPs_lh_₁(sinx_lh_₂(0), cosx_lh_₂(0)), revert_lh_₁(integral_lh_₁(divPs_lh_₂(fromIntegerPs_lh_₁(1), addPs_lh_₁(fromIntegerPs_lh_₃(1), powerPs_lh_₁(x_lh_₁, 2))))))) [LH_C extract_lh_₂(_lh_testPower_nofib_arg1⁰, ts_lh_₁) [LH_C extract_lh_₄(_lh_testPower_nofib_arg1⁰, tree_lh_₁) [LH_N]]]]]
//│ def tree_lh_₁ = lazy⁰([Pc 0 composeSndLz_lh_₁(list_lh_₁, lazy⁰(tree_lh_₁))])
//│ def ts_lh_₁ = lazy⁰([Pc 1 multPsLzLz_lh_₁(lazy⁰(ts_lh_₁), lazy⁰(ts_lh_₁))])
//│ def x_lh_₁ = lazy⁰([Pc 0 lazy⁰([Pc 1 lazy⁰([Pz])])])
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
