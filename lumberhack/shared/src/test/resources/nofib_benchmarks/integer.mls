:NewParser
:ParseOnly

:lhInHaskell
:lhGenOCaml
runalltests astart astep alim bstart bstep blim = [
                                                      runbench (\a b -> a + b) (\a b -> a + b) "(+)" astart astep alim astart astep alim
                                                    , runbench (\a b -> a - b) (\a b -> a - b) "(-)" astart astep alim astart astep alim
                                                    , runbench (\a b -> a * b) (\a b -> a * b) "(*)" astart astep alim astart astep alim
                                                    , runbench (\a b -> a `div` b) (\a b -> a `div` b) "div" astart astep alim astart astep alim
                                                    , runbench (\a b -> a `mod` b) (\a b -> a `mod` b) "mod" astart astep alim astart astep alim
                                                    , runbench (\a b -> a == b) (\a b -> a == b) "(==)" astart astep alim astart astep alim
                                                    , runbench (\a b -> a < b) (\a b -> a < b) "(<)" astart astep alim astart astep alim
                                                    , runbench (\a b -> a <= b) (\a b -> a <= b) "(<=)" astart astep alim astart astep alim
                                                    , runbench (\a b -> a > b) (\a b -> a > b) "(>)" astart astep alim astart astep alim
                                                    , runbench (\a b -> a >= b) (\a b -> a >= b) "(>=)" astart astep alim astart astep alim
                                                  ]
runbench jop iop opstr astart astep alim bstart bstep blim =
  let _dum = (intbench iop astart astep alim astart astep alim, integerbench jop astart astep alim astart astep alim) in 0
integerbench op astart astep alim bstart bstep blim =
    [ op a b | a <- [ astart,astart+astep..alim ], b <- [ bstart,astart+bstep..blim ]]
intbench op astart astep alim bstart bstep blim =
    [ op a b | a <- [astart,astart+astep..alim ] , b <- [bstart,astart+bstep..blim ]]
testInteger_nofib n = runalltests (0 - n) 31 (0 + n) (0 - n) 31 (0 + n)
testInteger_nofib $ primId 3000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testInteger_nofib_lh^601(primId⁰(3000))
//│ def enumFromThenTo_lh(a⁰, t⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromThenTo_lh^7(t⁰, ((2 * t⁰) - a⁰), b⁰)] else [LH_N]
//│ def intbench_lh(_lh_intbench_arg1⁰, _lh_intbench_arg2⁰, _lh_intbench_arg3⁰, _lh_intbench_arg4⁰, _lh_intbench_arg5⁰, _lh_intbench_arg6⁰, _lh_intbench_arg7⁰) = 
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 			let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 				LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_intbench_arg1⁰(_lh_listcomp_fun_ls_h⁰, _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 				| LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ 			in _lh_listcomp_fun¹(enumFromThenTo_lh^75(_lh_intbench_arg5⁰, (_lh_intbench_arg2⁰ + _lh_intbench_arg6⁰), _lh_intbench_arg7⁰))
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰(enumFromThenTo_lh^92(_lh_intbench_arg2⁰, (_lh_intbench_arg2⁰ + _lh_intbench_arg3⁰), _lh_intbench_arg4⁰))
//│ def integerbench_lh(_lh_integerbench_arg1⁰, _lh_integerbench_arg2⁰, _lh_integerbench_arg3⁰, _lh_integerbench_arg4⁰, _lh_integerbench_arg5⁰, _lh_integerbench_arg6⁰, _lh_integerbench_arg7⁰) = 
//│ 	let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 		LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 			let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 				LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C _lh_integerbench_arg1⁰(_lh_listcomp_fun_ls_h², _lh_listcomp_fun_ls_h³) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 				| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 			in _lh_listcomp_fun³(enumFromThenTo_lh^522(_lh_integerbench_arg5⁰, (_lh_integerbench_arg2⁰ + _lh_integerbench_arg6⁰), _lh_integerbench_arg7⁰))
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun²(enumFromThenTo_lh^539(_lh_integerbench_arg2⁰, (_lh_integerbench_arg2⁰ + _lh_integerbench_arg3⁰), _lh_integerbench_arg4⁰))
//│ def runalltests_lh(_lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰, _lh_runalltests_arg4⁰, _lh_runalltests_arg5⁰, _lh_runalltests_arg6⁰) = [LH_C runbench_lh^112((fun a¹ -> (fun b¹ -> (a¹ + b¹))), (fun a² -> (fun b² -> (a² + b²))), [LH_C '(' [LH_C '+' [LH_C ')' [LH_N]]]], _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰, _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰) [LH_C runbench_lh^149((fun a³ -> (fun b³ -> (a³ - b³))), (fun a⁴ -> (fun b⁴ -> (a⁴ - b⁴))), [LH_C '(' [LH_C '-' [LH_C ')' [LH_N]]]], _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰, _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰) [LH_C runbench_lh^186((fun a⁵ -> (fun b⁵ -> (a⁵ * b⁵))), (fun a⁶ -> (fun b⁶ -> (a⁶ * b⁶))), [LH_C '(' [LH_C '*' [LH_C ')' [LH_N]]]], _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰, _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰) [LH_C runbench_lh^223((fun a⁷ -> (fun b⁷ -> div⁰(a⁷, b⁷))), (fun a⁸ -> (fun b⁸ -> div⁰(a⁸, b⁸))), [LH_C 'd' [LH_C 'i' [LH_C 'v' [LH_N]]]], _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰, _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰) [LH_C runbench_lh^260((fun a⁹ -> (fun b⁹ -> (a⁹ % b⁹))), (fun a¹⁰ -> (fun b¹⁰ -> (a¹⁰ % b¹⁰))), [LH_C 'm' [LH_C 'o' [LH_C 'd' [LH_N]]]], _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰, _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰) [LH_C runbench_lh^297((fun a¹¹ -> (fun b¹¹ -> (a¹¹ == b¹¹))), (fun a¹² -> (fun b¹² -> (a¹² == b¹²))), [LH_C '(' [LH_C '=' [LH_C '=' [LH_C ')' [LH_N]]]]], _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰, _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰) [LH_C runbench_lh^336((fun a¹³ -> (fun b¹³ -> (a¹³ < b¹³))), (fun a¹⁴ -> (fun b¹⁴ -> (a¹⁴ < b¹⁴))), [LH_C '(' [LH_C '<' [LH_C ')' [LH_N]]]], _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰, _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰) [LH_C runbench_lh^373((fun a¹⁵ -> (fun b¹⁵ -> (a¹⁵ <= b¹⁵))), (fun a¹⁶ -> (fun b¹⁶ -> (a¹⁶ <= b¹⁶))), [LH_C '(' [LH_C '<' [LH_C '=' [LH_C ')' [LH_N]]]]], _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰, _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰) [LH_C runbench_lh^412((fun a¹⁷ -> (fun b¹⁷ -> (a¹⁷ > b¹⁷))), (fun a¹⁸ -> (fun b¹⁸ -> (a¹⁸ > b¹⁸))), [LH_C '(' [LH_C '>' [LH_C ')' [LH_N]]]], _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰, _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰) [LH_C runbench_lh^449((fun a¹⁹ -> (fun b¹⁹ -> (a¹⁹ >= b¹⁹))), (fun a²⁰ -> (fun b²⁰ -> (a²⁰ >= b²⁰))), [LH_C '(' [LH_C '>' [LH_C '=' [LH_C ')' [LH_N]]]]], _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰, _lh_runalltests_arg1⁰, _lh_runalltests_arg2⁰, _lh_runalltests_arg3⁰) [LH_N]]]]]]]]]]]
//│ def runbench_lh(_lh_runbench_arg1⁰, _lh_runbench_arg2⁰, _lh_runbench_arg3⁰, _lh_runbench_arg4⁰, _lh_runbench_arg5⁰, _lh_runbench_arg6⁰, _lh_runbench_arg7⁰, _lh_runbench_arg8⁰, _lh_runbench_arg9⁰) = 
//│ 	let _dum⁰ = [LH_P2 intbench_lh^559(_lh_runbench_arg2⁰, _lh_runbench_arg4⁰, _lh_runbench_arg5⁰, _lh_runbench_arg6⁰, _lh_runbench_arg4⁰, _lh_runbench_arg5⁰, _lh_runbench_arg6⁰) integerbench_lh^574(_lh_runbench_arg1⁰, _lh_runbench_arg4⁰, _lh_runbench_arg5⁰, _lh_runbench_arg6⁰, _lh_runbench_arg4⁰, _lh_runbench_arg5⁰, _lh_runbench_arg6⁰)]
//│ 	in 0
//│ def testInteger_nofib_lh(_lh_testInteger_nofib_arg1⁰) = runalltests_lh^28((0 - _lh_testInteger_nofib_arg1⁰), 31, (0 + _lh_testInteger_nofib_arg1⁰), (0 - _lh_testInteger_nofib_arg1⁰), 31, (0 + _lh_testInteger_nofib_arg1⁰))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromThenTo_lh a_0 t_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, (((enumFromThenTo_lh t_0) ((2 * t_0) - a_0)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec intbench_lh _lh_intbench_arg1_0 _lh_intbench_arg2_0 _lh_intbench_arg3_0 _lh_intbench_arg4_0 _lh_intbench_arg5_0 _lh_intbench_arg6_0 _lh_intbench_arg7_0 =
//│ 		  (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		    (match _lh_listcomp_fun_para_0 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		        (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		          (match _lh_listcomp_fun_para_1 with
//│ 		            | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		              (`LH_C(((_lh_intbench_arg1_0 _lh_listcomp_fun_ls_h_0) _lh_listcomp_fun_ls_h_1), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		            | `LH_N -> 
//│ 		              (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))) in
//│ 		          (_lh_listcomp_fun_1 (((enumFromThenTo_lh _lh_intbench_arg5_0) (_lh_intbench_arg2_0 + _lh_intbench_arg6_0)) _lh_intbench_arg7_0)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_0 (((enumFromThenTo_lh _lh_intbench_arg2_0) (_lh_intbench_arg2_0 + _lh_intbench_arg3_0)) _lh_intbench_arg4_0)));;
//│ 		let rec integerbench_lh _lh_integerbench_arg1_0 _lh_integerbench_arg2_0 _lh_integerbench_arg3_0 _lh_integerbench_arg4_0 _lh_integerbench_arg5_0 _lh_integerbench_arg6_0 _lh_integerbench_arg7_0 =
//│ 		  (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		    (match _lh_listcomp_fun_para_2 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		        (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		          (match _lh_listcomp_fun_para_3 with
//│ 		            | `LH_C(_lh_listcomp_fun_ls_h_3, _lh_listcomp_fun_ls_t_3) -> 
//│ 		              (`LH_C(((_lh_integerbench_arg1_0 _lh_listcomp_fun_ls_h_2) _lh_listcomp_fun_ls_h_3), (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3)))
//│ 		            | `LH_N -> 
//│ 		              (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2))) in
//│ 		          (_lh_listcomp_fun_3 (((enumFromThenTo_lh _lh_integerbench_arg5_0) (_lh_integerbench_arg2_0 + _lh_integerbench_arg6_0)) _lh_integerbench_arg7_0)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_2 (((enumFromThenTo_lh _lh_integerbench_arg2_0) (_lh_integerbench_arg2_0 + _lh_integerbench_arg3_0)) _lh_integerbench_arg4_0)));;
//│ 		let rec runbench_lh _lh_runbench_arg1_0 _lh_runbench_arg2_0 _lh_runbench_arg3_0 _lh_runbench_arg4_0 _lh_runbench_arg5_0 _lh_runbench_arg6_0 _lh_runbench_arg7_0 _lh_runbench_arg8_0 _lh_runbench_arg9_0 =
//│ 		  (let rec _dum_0 = (`LH_P2((((((((intbench_lh _lh_runbench_arg2_0) _lh_runbench_arg4_0) _lh_runbench_arg5_0) _lh_runbench_arg6_0) _lh_runbench_arg4_0) _lh_runbench_arg5_0) _lh_runbench_arg6_0), (((((((integerbench_lh _lh_runbench_arg1_0) _lh_runbench_arg4_0) _lh_runbench_arg5_0) _lh_runbench_arg6_0) _lh_runbench_arg4_0) _lh_runbench_arg5_0) _lh_runbench_arg6_0))) in
//│ 		    0);;
//│ 		let rec runalltests_lh _lh_runalltests_arg1_0 _lh_runalltests_arg2_0 _lh_runalltests_arg3_0 _lh_runalltests_arg4_0 _lh_runalltests_arg5_0 _lh_runalltests_arg6_0 =
//│ 		  (`LH_C((((((((((runbench_lh (fun a_1 b_1 -> 
//│ 		    (a_1 + b_1))) (fun a_2 b_2 -> 
//│ 		    (a_2 + b_2))) (`LH_C('(', (`LH_C('+', (`LH_C(')', (`LH_N)))))))) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0), (`LH_C((((((((((runbench_lh (fun a_3 b_3 -> 
//│ 		    (a_3 - b_3))) (fun a_4 b_4 -> 
//│ 		    (a_4 - b_4))) (`LH_C('(', (`LH_C('-', (`LH_C(')', (`LH_N)))))))) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0), (`LH_C((((((((((runbench_lh (fun a_5 b_5 -> 
//│ 		    (a_5 * b_5))) (fun a_6 b_6 -> 
//│ 		    (a_6 * b_6))) (`LH_C('(', (`LH_C('*', (`LH_C(')', (`LH_N)))))))) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0), (`LH_C((((((((((runbench_lh (fun a_7 b_7 -> 
//│ 		    (a_7 / b_7))) (fun a_8 b_8 -> 
//│ 		    (a_8 / b_8))) (`LH_C('d', (`LH_C('i', (`LH_C('v', (`LH_N)))))))) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0), (`LH_C((((((((((runbench_lh (fun a_9 b_9 -> 
//│ 		    (a_9 mod b_9))) (fun a_1_0 b_1_0 -> 
//│ 		    (a_1_0 mod b_1_0))) (`LH_C('m', (`LH_C('o', (`LH_C('d', (`LH_N)))))))) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0), (`LH_C((((((((((runbench_lh (fun a_1_1 b_1_1 -> 
//│ 		    (a_1_1 = b_1_1))) (fun a_1_2 b_1_2 -> 
//│ 		    (a_1_2 = b_1_2))) (`LH_C('(', (`LH_C('=', (`LH_C('=', (`LH_C(')', (`LH_N)))))))))) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0), (`LH_C((((((((((runbench_lh (fun a_1_3 b_1_3 -> 
//│ 		    (a_1_3 < b_1_3))) (fun a_1_4 b_1_4 -> 
//│ 		    (a_1_4 < b_1_4))) (`LH_C('(', (`LH_C('<', (`LH_C(')', (`LH_N)))))))) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0), (`LH_C((((((((((runbench_lh (fun a_1_5 b_1_5 -> 
//│ 		    (a_1_5 <= b_1_5))) (fun a_1_6 b_1_6 -> 
//│ 		    (a_1_6 <= b_1_6))) (`LH_C('(', (`LH_C('<', (`LH_C('=', (`LH_C(')', (`LH_N)))))))))) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0), (`LH_C((((((((((runbench_lh (fun a_1_7 b_1_7 -> 
//│ 		    (a_1_7 > b_1_7))) (fun a_1_8 b_1_8 -> 
//│ 		    (a_1_8 > b_1_8))) (`LH_C('(', (`LH_C('>', (`LH_C(')', (`LH_N)))))))) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0), (`LH_C((((((((((runbench_lh (fun a_1_9 b_1_9 -> 
//│ 		    (a_1_9 >= b_1_9))) (fun a_2_0 b_2_0 -> 
//│ 		    (a_2_0 >= b_2_0))) (`LH_C('(', (`LH_C('>', (`LH_C('=', (`LH_C(')', (`LH_N)))))))))) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0) _lh_runalltests_arg1_0) _lh_runalltests_arg2_0) _lh_runalltests_arg3_0), (`LH_N)))))))))))))))))))));;
//│ 		let rec testInteger_nofib_lh _lh_testInteger_nofib_arg1_0 =
//│ 		  ((((((runalltests_lh (0 - _lh_testInteger_nofib_arg1_0)) 31) (0 + _lh_testInteger_nofib_arg1_0)) (0 - _lh_testInteger_nofib_arg1_0)) 31) (0 + _lh_testInteger_nofib_arg1_0));;
//│ 		(testInteger_nofib_lh 3000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C a⁰ enumFromThenTo_lh(t⁰, ((2 * t⁰) - a⁰), b⁰)]: 22 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_intbench_arg1⁰(_lh_listcomp_fun_ls_h⁰, _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 72
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_intbench_arg1⁰(_lh_listcomp_fun_ls_h⁰, _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromThenTo_lh(_lh_intbench_arg5⁰, (_lh_intbench_arg2⁰ + _lh_intbench_arg6⁰), _lh_intbench_arg7⁰)) | LH_N  => [LH_N]}: 89
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C _lh_integerbench_arg1⁰(_lh_listcomp_fun_ls_h², _lh_listcomp_fun_ls_h³) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 519
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C _lh_integerbench_arg1⁰(_lh_listcomp_fun_ls_h², _lh_listcomp_fun_ls_h³) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromThenTo_lh(_lh_integerbench_arg5⁰, (_lh_integerbench_arg2⁰ + _lh_integerbench_arg6⁰), _lh_integerbench_arg7⁰)) | LH_N  => [LH_N]}: 536
//│ [LH_N]: 23 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_intbench_arg1⁰(_lh_listcomp_fun_ls_h⁰, _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 72
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_intbench_arg1⁰(_lh_listcomp_fun_ls_h⁰, _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromThenTo_lh(_lh_intbench_arg5⁰, (_lh_intbench_arg2⁰ + _lh_intbench_arg6⁰), _lh_intbench_arg7⁰)) | LH_N  => [LH_N]}: 89
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C _lh_integerbench_arg1⁰(_lh_listcomp_fun_ls_h², _lh_listcomp_fun_ls_h³) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 519
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C _lh_integerbench_arg1⁰(_lh_listcomp_fun_ls_h², _lh_listcomp_fun_ls_h³) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromThenTo_lh(_lh_integerbench_arg5⁰, (_lh_integerbench_arg2⁰ + _lh_integerbench_arg6⁰), _lh_integerbench_arg7⁰)) | LH_N  => [LH_N]}: 536
//│ ------------------
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_intbench_arg1⁰(_lh_listcomp_fun_ls_h⁰, _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 72 --->
//│ 	[LH_C a⁰ enumFromThenTo_lh(t⁰, ((2 * t⁰) - a⁰), b⁰)]: 22
//│ 	[LH_N]: 23
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_intbench_arg1⁰(_lh_listcomp_fun_ls_h⁰, _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromThenTo_lh(_lh_intbench_arg5⁰, (_lh_intbench_arg2⁰ + _lh_intbench_arg6⁰), _lh_intbench_arg7⁰)) | LH_N  => [LH_N]}: 89 --->
//│ 	[LH_C a⁰ enumFromThenTo_lh(t⁰, ((2 * t⁰) - a⁰), b⁰)]: 22
//│ 	[LH_N]: 23
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C _lh_integerbench_arg1⁰(_lh_listcomp_fun_ls_h², _lh_listcomp_fun_ls_h³) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 519 --->
//│ 	[LH_C a⁰ enumFromThenTo_lh(t⁰, ((2 * t⁰) - a⁰), b⁰)]: 22
//│ 	[LH_N]: 23
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C _lh_integerbench_arg1⁰(_lh_listcomp_fun_ls_h², _lh_listcomp_fun_ls_h³) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromThenTo_lh(_lh_integerbench_arg5⁰, (_lh_integerbench_arg2⁰ + _lh_integerbench_arg6⁰), _lh_integerbench_arg7⁰)) | LH_N  => [LH_N]}: 536 --->
//│ 	[LH_C a⁰ enumFromThenTo_lh(t⁰, ((2 * t⁰) - a⁰), b⁰)]: 22
//│ 	[LH_N]: 23
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testInteger_nofib_lh(primId⁰(3000))
//│ def enumFromThenTo_lh(a²¹, t¹, b²¹) = if (a²¹ <= b²¹) then [LH_C a²¹ enumFromThenTo_lh(t¹, ((2 * t¹) - a²¹), b²¹)] else [LH_N]
//│ def intbench_lh(_lh_intbench_arg1¹, _lh_intbench_arg2¹, _lh_intbench_arg3¹, _lh_intbench_arg4¹, _lh_intbench_arg5¹, _lh_intbench_arg6¹, _lh_intbench_arg7¹) = 
//│ 	let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 			let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 				LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_intbench_arg1¹(_lh_listcomp_fun_ls_h⁰, _lh_listcomp_fun_ls_h¹) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t¹)]
//│ 				| LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁰)})
//│ 			in _lh_listcomp_fun⁵(enumFromThenTo_lh(_lh_intbench_arg5¹, (_lh_intbench_arg2¹ + _lh_intbench_arg6¹), _lh_intbench_arg7¹))
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁴(enumFromThenTo_lh(_lh_intbench_arg2¹, (_lh_intbench_arg2¹ + _lh_intbench_arg3¹), _lh_intbench_arg4¹))
//│ def integerbench_lh(_lh_integerbench_arg1¹, _lh_integerbench_arg2¹, _lh_integerbench_arg3¹, _lh_integerbench_arg4¹, _lh_integerbench_arg5¹, _lh_integerbench_arg6¹, _lh_integerbench_arg7¹) = 
//│ 	let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 		LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 			let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 				LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C _lh_integerbench_arg1¹(_lh_listcomp_fun_ls_h², _lh_listcomp_fun_ls_h³) _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t³)]
//│ 				| LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t²)})
//│ 			in _lh_listcomp_fun⁷(enumFromThenTo_lh(_lh_integerbench_arg5¹, (_lh_integerbench_arg2¹ + _lh_integerbench_arg6¹), _lh_integerbench_arg7¹))
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁶(enumFromThenTo_lh(_lh_integerbench_arg2¹, (_lh_integerbench_arg2¹ + _lh_integerbench_arg3¹), _lh_integerbench_arg4¹))
//│ def runalltests_lh(_lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹, _lh_runalltests_arg4¹, _lh_runalltests_arg5¹, _lh_runalltests_arg6¹) = [LH_C runbench_lh((fun a²² -> (fun b²² -> (a²² + b²²))), (fun a²³ -> (fun b²³ -> (a²³ + b²³))), [LH_C '(' [LH_C '+' [LH_C ')' [LH_N]]]], _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹, _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹) [LH_C runbench_lh((fun a²⁴ -> (fun b²⁴ -> (a²⁴ - b²⁴))), (fun a²⁵ -> (fun b²⁵ -> (a²⁵ - b²⁵))), [LH_C '(' [LH_C '-' [LH_C ')' [LH_N]]]], _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹, _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹) [LH_C runbench_lh((fun a²⁶ -> (fun b²⁶ -> (a²⁶ * b²⁶))), (fun a²⁷ -> (fun b²⁷ -> (a²⁷ * b²⁷))), [LH_C '(' [LH_C '*' [LH_C ')' [LH_N]]]], _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹, _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹) [LH_C runbench_lh((fun a²⁸ -> (fun b²⁸ -> div⁰(a²⁸, b²⁸))), (fun a²⁹ -> (fun b²⁹ -> div⁰(a²⁹, b²⁹))), [LH_C 'd' [LH_C 'i' [LH_C 'v' [LH_N]]]], _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹, _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹) [LH_C runbench_lh((fun a³⁰ -> (fun b³⁰ -> (a³⁰ % b³⁰))), (fun a³¹ -> (fun b³¹ -> (a³¹ % b³¹))), [LH_C 'm' [LH_C 'o' [LH_C 'd' [LH_N]]]], _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹, _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹) [LH_C runbench_lh((fun a³² -> (fun b³² -> (a³² == b³²))), (fun a³³ -> (fun b³³ -> (a³³ == b³³))), [LH_C '(' [LH_C '=' [LH_C '=' [LH_C ')' [LH_N]]]]], _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹, _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹) [LH_C runbench_lh((fun a³⁴ -> (fun b³⁴ -> (a³⁴ < b³⁴))), (fun a³⁵ -> (fun b³⁵ -> (a³⁵ < b³⁵))), [LH_C '(' [LH_C '<' [LH_C ')' [LH_N]]]], _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹, _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹) [LH_C runbench_lh((fun a³⁶ -> (fun b³⁶ -> (a³⁶ <= b³⁶))), (fun a³⁷ -> (fun b³⁷ -> (a³⁷ <= b³⁷))), [LH_C '(' [LH_C '<' [LH_C '=' [LH_C ')' [LH_N]]]]], _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹, _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹) [LH_C runbench_lh((fun a³⁸ -> (fun b³⁸ -> (a³⁸ > b³⁸))), (fun a³⁹ -> (fun b³⁹ -> (a³⁹ > b³⁹))), [LH_C '(' [LH_C '>' [LH_C ')' [LH_N]]]], _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹, _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹) [LH_C runbench_lh((fun a⁴⁰ -> (fun b⁴⁰ -> (a⁴⁰ >= b⁴⁰))), (fun a⁴¹ -> (fun b⁴¹ -> (a⁴¹ >= b⁴¹))), [LH_C '(' [LH_C '>' [LH_C '=' [LH_C ')' [LH_N]]]]], _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹, _lh_runalltests_arg1¹, _lh_runalltests_arg2¹, _lh_runalltests_arg3¹) [LH_N]]]]]]]]]]]
//│ def runbench_lh(_lh_runbench_arg1¹, _lh_runbench_arg2¹, _lh_runbench_arg3¹, _lh_runbench_arg4¹, _lh_runbench_arg5¹, _lh_runbench_arg6¹, _lh_runbench_arg7¹, _lh_runbench_arg8¹, _lh_runbench_arg9¹) = 
//│ 	let _dum¹ = [LH_P2 intbench_lh(_lh_runbench_arg2¹, _lh_runbench_arg4¹, _lh_runbench_arg5¹, _lh_runbench_arg6¹, _lh_runbench_arg4¹, _lh_runbench_arg5¹, _lh_runbench_arg6¹) integerbench_lh(_lh_runbench_arg1¹, _lh_runbench_arg4¹, _lh_runbench_arg5¹, _lh_runbench_arg6¹, _lh_runbench_arg4¹, _lh_runbench_arg5¹, _lh_runbench_arg6¹)]
//│ 	in 0
//│ def testInteger_nofib_lh(_lh_testInteger_nofib_arg1¹) = runalltests_lh((0 - _lh_testInteger_nofib_arg1¹), 31, (0 + _lh_testInteger_nofib_arg1¹), (0 - _lh_testInteger_nofib_arg1¹), 31, (0 + _lh_testInteger_nofib_arg1¹))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
