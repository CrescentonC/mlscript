:NewParser
:ParseOnly

:lhInHaskell
:lhGenOCaml
tak x y z = if not(y < x) then z
       else tak (tak (x-1) y z) (tak (y-1) z x) (tak (z-1) x y)
testTak_nofib n = tak 31 16 8
testTak_nofib $ primId 0
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testTak_nofib_₀^723(primId⁰(0))
//│ def tak_₀(_lh_tak_arg1¹, _lh_tak_arg2¹, _lh_tak_arg3¹) = if not⁰((_lh_tak_arg2¹ < _lh_tak_arg1¹)) then _lh_tak_arg3¹ else tak_₀^674(tak_₀^675((_lh_tak_arg1¹ - 1), _lh_tak_arg2¹, _lh_tak_arg3¹), tak_₀^687((_lh_tak_arg2¹ - 1), _lh_tak_arg3¹, _lh_tak_arg1¹), tak_₀^699((_lh_tak_arg3¹ - 1), _lh_tak_arg1¹, _lh_tak_arg2¹))
//│ def testTak_nofib_₀(_lh_testTak_nofib_arg1¹) = tak_₀^715(31, 16, 8)
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec tak__d0 _lh_tak_arg1_1 _lh_tak_arg2_1 _lh_tak_arg3_1 =
//│ 		  (if (not (_lh_tak_arg2_1 < _lh_tak_arg1_1)) then
//│ 		    _lh_tak_arg3_1
//│ 		  else
//│ 		    (((tak__d0 (((tak__d0 (_lh_tak_arg1_1 - 1)) _lh_tak_arg2_1) _lh_tak_arg3_1)) (((tak__d0 (_lh_tak_arg2_1 - 1)) _lh_tak_arg3_1) _lh_tak_arg1_1)) (((tak__d0 (_lh_tak_arg3_1 - 1)) _lh_tak_arg1_1) _lh_tak_arg2_1)))
//│ 		and testTak_nofib__d0 _lh_testTak_nofib_arg1_1 =
//│ 		  (((tak__d0 31) 16) 8);;
//│ 		(testTak_nofib__d0 0)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testTak_nofib_₀(primId⁰(0))
//│ def tak_₀(_lh_tak_arg1², _lh_tak_arg2², _lh_tak_arg3²) = if not⁰((_lh_tak_arg2² < _lh_tak_arg1²)) then _lh_tak_arg3² else tak_₀(tak_₀((_lh_tak_arg1² - 1), _lh_tak_arg2², _lh_tak_arg3²), tak_₀((_lh_tak_arg2² - 1), _lh_tak_arg3², _lh_tak_arg1²), tak_₀((_lh_tak_arg3² - 1), _lh_tak_arg1², _lh_tak_arg2²))
//│ def testTak_nofib_₀(_lh_testTak_nofib_arg1²) = tak_₀(31, 16, 8)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
