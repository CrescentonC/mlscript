:NewParser
:ParseOnly

:lhInHaskell
:lhGenOCaml
and [] = True
and (h:t) = if h then and t else False
type Win = [[Int]]
type Board = [Row]
type Row = [Piece]
data Piece = X | O | Empty deriving Eq
data Evaluation = XWin | OWin | Score Int deriving Eq
data Tree a = Branch a [Tree a]
type Player = Evaluation -> Evaluation -> Evaluation
type Move = (Board,Evaluation)
showEvaluation XWin = "XWin"
showEvaluation OWin = "OWin"
showEvaluation (Score a) = "Score" ++ (string_of_int a)
wins :: [Win]
wins = [win1,win2,win3,win4,win5,win6,win7,win8]
win1,win2,win3,win4,win5,win6,win7,win8 :: Win
win1 = [[1,1,1],
        [0,0,0],
        [0,0,0]]
win2 = [[0,0,0],
        [1,1,1],
        [0,0,0]]
win3 = [[0,0,0],
        [0,0,0],
        [1,1,1]]
win4 = [[1,0,0],
        [1,0,0],
        [1,0,0]]
win5 = [[0,1,0],
        [0,1,0],
        [0,1,0]]
win6 = [[0,0,1],
        [0,0,1],
        [0,0,1]]
win7 = [[1,0,0],
        [0,1,0],
        [0,0,1]]
win8 = [[0,0,1],
        [0,1,0],
        [1,0,0]]
--------------------
showBoard :: Board -> String
showBoard [r1,r2,r3] =  (showRow r1) ++ "|------|" ++ (showRow r2) ++ "|------|" ++ (showRow r3) ++ "||"
showRow [p1,p2,p3] = (showPiece p1) ++ "|" ++ (showPiece p2) ++ "|" ++ (showPiece p3)
showPiece :: Piece -> String
showPiece X = "X"
showPiece O = "O"
showPiece Empty = " "
placePiece :: Piece -> Board -> (Int,Int) -> [Board]
placePiece p board pos =
  if not (empty pos board) then
    []
  else case board of {[r1,r2,r3] -> case pos of {
    (1,x) -> [[insert p r1 x,r2,r3]];
    (2,x) -> [[r1,insert p r2 x,r3]];
    (3,x) -> [[r1,r2,insert p r3 x]]
  }}
insert :: Piece -> Row -> Int -> Row
insert p [p1,p2,p3] 1 = [p,p2,p3]
insert p [p1,p2,p3] 2 = [p1,p,p3]
insert p [p1,p2,p3] 3 = [p1,p2,p]
empty :: (Int,Int) -> Board -> Bool
empty (1,x) [r1,r2,r3] = empty' x r1
empty (2,x) [r1,r2,r3] = empty' x r2
empty (3,x) [r1,r2,r3] = empty' x r3
empty' :: Int -> Row -> Bool
empty' 1 [Empty,_,_] = True
empty' 2 [_,Empty,_] = True
empty' 3 [_,_,Empty] = True
empty' _ _ = False
fullBoard b = and (map (\x -> not (polyEq x Empty)) (concat b))
--newPositions :: Piece -> Board -> [Board]
newPositions piece board = concat (map (placePiece piece board) [(x,y) | x<-[1..3], y <-[1..3]])
initialBoard :: Board
initialBoard = [[Empty,Empty,Empty], [Empty,Empty,Empty], [Empty,Empty,Empty]]
eval x =
  if x == 3 then
    XWin
  else if x == (0 - 3) then
    OWin
  else Score x
static :: Board -> Evaluation
static board = interpret 0 (map (score board) wins)
interpret :: Int -> [Evaluation] -> Evaluation
interpret x [] = (Score x)
interpret x ((Score y):l) = interpret (x+y) l
interpret x (XWin:l) = XWin
interpret x (OWin:l) = OWin
score :: Board -> Win -> Evaluation
score board win  = eval (sum (map sum (map2 (map2 scorePiece) board win)))
scorePiece :: Piece -> Int -> Int
scorePiece X score = score
scorePiece Empty _ = 0
scorePiece O score = 0-score
map2 :: (a -> b -> c) -> [a] -> [b] -> [c]
map2 f [] x = []
map2 f x [] = []
map2 f (x:xs) (y:ys) = (f x y):(map2 f xs ys)
------------------------
repTree :: (a->[a]) -> (a->[a])-> a -> (Tree a)
repTree f g a = Branch a (map (repTree g f) (f a))
mapTree :: (a -> b) -> (Tree a) -> (Tree b)
mapTree f (Branch a l) = Branch (f a) (map (mapTree f) l)
prune :: Int -> (Tree a) -> (Tree a)
prune 0 (Branch a l) = Branch a []
--should be:prune (n+1) (Branch a l) = Branch a (map (prune n) l)
prune n (Branch a l) =
  if n < 0 then
    error "Tree.prune: < 0"
  else
    Branch a (map (prune (n-1)) l)
------------------------
prog :: String -> String
prog input =
  let game = alternate X max' min' (board input) in
  "OXO|" ++ (concat (map showMove game))
  where
  board "doesnt happen" = testBoard ++ testBoard
  board _                = testBoard
testBoard = [[Empty,O,Empty],[Empty,X,Empty],[Empty,Empty,Empty]]
--------------------------
alternate :: Piece -> Player -> Player -> Board -> [Move]
alternate player f g board =
  if fullBoard board then []
  else if polyEq (static board) XWin then []
  else if polyEq (static board) OWin then []
  else
    let opposition = opposite player in
    let possibles = newPositions player board in
    let scores = map (bestMove opposition g f) possibles in
    let boardd_eval = best f possibles scores in
    case boardd_eval of { (boardd, eval) ->
      (boardd,eval):(alternate opposition g f boardd)
    }
opposite :: Piece -> Piece
opposite X = O
opposite O = X
best :: Player -> [Board] -> [Evaluation] -> Move
best f (b:bs) (s:ss) =
  let best' = \b -> \s -> \ls1 -> \ls2 -> case ls1 of {
    [] -> case ls2 of { [] -> (b, s) };
    (b':bs) -> case ls2 of { (s':ss) -> if polyEq s (f s s') then best' b s bs ss else best' b' s' bs ss }
  } in
  best' b s bs ss
showMove :: Move -> String
showMove (b,e) = (showEvaluation e) ++ "|" ++ (showBoard b)
bestMove :: Piece -> Player -> Player -> Board -> Evaluation
bestMove p f g = ((mise f g) . cropTree) . (mapTree static . searchTree p)
cropTree :: (Tree Evaluation) -> (Tree Evaluation)
cropTree (Branch a []) = (Branch a [])
cropTree (Branch (Score x) l) = Branch (Score x) (map cropTree l)
cropTree (Branch x l) = Branch x []
searchTree :: Piece -> Board -> (Tree Board)
searchTree p board = prune 5 (repTree (newPositions p) (newPositions (opposite p)) board)
mise :: Player -> Player -> (Tree Evaluation) -> Evaluation
mise f g (Branch a []) = a
mise f g (Branch _ l) = foldr f (g OWin XWin) (map (mise g f) l)
max' :: Evaluation -> Evaluation -> Evaluation
max' XWin _ = XWin
max' _ XWin = XWin
max' b OWin = b
max' OWin b = b
max' (Score x) (Score y) = if x>y then (Score x) else (Score y)
min' :: Evaluation -> Evaluation -> Evaluation
min' OWin _ = OWin
min' _ OWin = OWin
min' b XWin = b
min' XWin b = b
min' (Score x) (Score y) = if x<y then (Score x) else (Score y)
-------------------------------------
testMinimax_nofib n = length (prog n)
testMinimax_nofib $ primId "180000"
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMinimax_nofib_lh_₁^2851(primId⁰([LH_C '1' [LH_C '8' [LH_C '0' [LH_C '0' [LH_C '0' [LH_C '0' [LH_N]]]]]]]))
//│ def alternate_lh_₁(_lh_alternate_arg1⁰, _lh_alternate_arg2⁰, _lh_alternate_arg3⁰, _lh_alternate_arg4⁰) = if fullBoard_lh_₁^2110(_lh_alternate_arg4⁰) then [LH_N] else if polyEq⁰(static_lh_₁^2115(_lh_alternate_arg4⁰), [XWin]) then [LH_N] else if polyEq⁰(static_lh_₂^2123(_lh_alternate_arg4⁰), [OWin]) then [LH_N] else 
//│ 	let opposition⁰ = opposite_lh_₁^2130(_lh_alternate_arg1⁰)
//│ 	in let possibles⁰ = newPositions_lh_₁^2133(_lh_alternate_arg1⁰, _lh_alternate_arg4⁰)
//│ 	in let scores⁰ = map_lh_₂^2138(bestMove_lh_₁^2139(opposition⁰, _lh_alternate_arg3⁰, _lh_alternate_arg2⁰), possibles⁰)
//│ 	in let boardd_eval⁰ = best_lh_₁^2149(_lh_alternate_arg2⁰, possibles⁰, scores⁰)
//│ 	in let _lh_matchIdent⁵ = boardd_eval⁰
//│ 	in case _lh_matchIdent⁵ of {
//│ 		LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰ => [LH_C [LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰] alternate_lh_₁^2161(opposition⁰, _lh_alternate_arg3⁰, _lh_alternate_arg2⁰, _lh_alternate_LH_P2_0⁰)]
//│ 		| _  => error⁰}
//│ def and_lh_₁(_lh_and_arg1⁰) = case _lh_and_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_and_LH_C_0⁰ _lh_and_LH_C_1⁰ => if _lh_and_LH_C_0⁰ then and_lh_₁^1040(_lh_and_LH_C_1⁰) else [False]
//│ 	| _  => error⁰}
//│ def bestMove_lh_₁(_lh_bestMove_arg1⁰, _lh_bestMove_arg2⁰, _lh_bestMove_arg3⁰, _lh_funcomp_x⁰) = (fun _lh_funcomp_x¹ -> mise_lh_₁^1596(_lh_bestMove_arg2⁰, _lh_bestMove_arg3⁰, cropTree_lh_₁^1601(_lh_funcomp_x¹)))((fun _lh_funcomp_x² -> mapTree_lh_₁^1606(static_lh_₃^1607, searchTree_lh_₁^1609(_lh_bestMove_arg1⁰, _lh_funcomp_x²)))(_lh_funcomp_x⁰))
//│ def best_lh_₁(_lh_best_arg1⁰, _lh_best_arg2⁰, _lh_best_arg3⁰) = case _lh_best_arg2⁰ of {
//│ 	LH_C _lh_best_LH_C_0⁰ _lh_best_LH_C_1⁰ => case _lh_best_arg3⁰ of {
//│ 		LH_C _lh_best_LH_C_0¹ _lh_best_LH_C_1¹ => 
//│ 			let best'⁰ = (fun b² -> (fun s⁰ -> (fun ls1⁰ -> (fun ls2⁰ -> 
//│ 				let _lh_matchIdent² = ls1⁰
//│ 				in case _lh_matchIdent² of {
//│ 					LH_N  => 
//│ 						let _lh_matchIdent³ = ls2⁰
//│ 						in case _lh_matchIdent³ of {
//│ 							LH_N  => [LH_P2 b² s⁰]
//│ 							| _  => error⁰}
//│ 					| LH_C _lh_best_LH_C_0² _lh_best_LH_C_1² => 
//│ 						let _lh_matchIdent⁴ = ls2⁰
//│ 						in case _lh_matchIdent⁴ of {
//│ 							LH_C _lh_best_LH_C_0³ _lh_best_LH_C_1³ => if polyEq⁰(s⁰, _lh_best_arg1⁰(s⁰, _lh_best_LH_C_0³)) then best'⁰(b², s⁰, _lh_best_LH_C_1², _lh_best_LH_C_1³) else best'⁰(_lh_best_LH_C_0², _lh_best_LH_C_0³, _lh_best_LH_C_1², _lh_best_LH_C_1³)
//│ 							| _  => error⁰}
//│ 					| _  => error⁰}))))
//│ 			in best'⁰(_lh_best_LH_C_0⁰, _lh_best_LH_C_0¹, _lh_best_LH_C_1⁰, _lh_best_LH_C_1¹)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def concat_lh_₁(lss²) = case lss² of {
//│ 	LH_C h³¹ t³¹ => mappend_lh_₅^2310(h³¹, concat_lh_₁^2313(t³¹))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₂(lss¹) = case lss¹ of {
//│ 	LH_C h¹⁵ t¹⁵ => mappend_lh_₂₁^1049(h¹⁵, concat_lh_₂^1052(t¹⁵))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₃(lss⁰) = case lss⁰ of {
//│ 	LH_C h¹³ t¹³ => mappend_lh_₂₁^1013(h¹³, concat_lh_₃^1016(t¹³))
//│ 	| LH_N  => [LH_N]}
//│ def cropTree_lh_₁(_lh_cropTree_arg1⁰) = case _lh_cropTree_arg1⁰ of {
//│ 	Branch _lh_cropTree_Branch_0⁰ _lh_cropTree_Branch_1⁰ => case _lh_cropTree_Branch_1⁰ of {
//│ 		LH_N  => [Branch _lh_cropTree_Branch_0⁰ [LH_N]]
//│ 		| _  => case _lh_cropTree_Branch_0⁰ of {
//│ 			Score _lh_cropTree_Score_0⁰ => [Branch [Score _lh_cropTree_Score_0⁰] map_lh_₆^1081(cropTree_lh_₁^1082, _lh_cropTree_Branch_1⁰)]
//│ 			| _  => [Branch _lh_cropTree_Branch_0⁰ [LH_N]]}}
//│ 	| _  => error⁰}
//│ def empty'_lh_₁(_lh_empty'_arg1⁰, _lh_empty'_arg2⁰) = case _lh_empty'_arg1⁰ of {
//│ 	1  => case _lh_empty'_arg2⁰ of {
//│ 		LH_C _lh_empty'_LH_C_0⁰ _lh_empty'_LH_C_1⁰ => case _lh_empty'_LH_C_0⁰ of {
//│ 			Empty  => case _lh_empty'_LH_C_1⁰ of {
//│ 				LH_C _lh_empty'_LH_C_0¹ _lh_empty'_LH_C_1¹ => case _lh_empty'_LH_C_1¹ of {
//│ 					LH_C _lh_empty'_LH_C_0² _lh_empty'_LH_C_1² => case _lh_empty'_LH_C_1² of {
//│ 						LH_N  => [True]
//│ 						| _  => [False]}
//│ 					| _  => [False]}
//│ 				| _  => [False]}
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| 2  => case _lh_empty'_arg2⁰ of {
//│ 		LH_C _lh_empty'_LH_C_0³ _lh_empty'_LH_C_1³ => case _lh_empty'_LH_C_1³ of {
//│ 			LH_C _lh_empty'_LH_C_0⁴ _lh_empty'_LH_C_1⁴ => case _lh_empty'_LH_C_0⁴ of {
//│ 				Empty  => case _lh_empty'_LH_C_1⁴ of {
//│ 					LH_C _lh_empty'_LH_C_0⁵ _lh_empty'_LH_C_1⁵ => case _lh_empty'_LH_C_1⁵ of {
//│ 						LH_N  => [True]
//│ 						| _  => [False]}
//│ 					| _  => [False]}
//│ 				| _  => [False]}
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| 3  => case _lh_empty'_arg2⁰ of {
//│ 		LH_C _lh_empty'_LH_C_0⁶ _lh_empty'_LH_C_1⁶ => case _lh_empty'_LH_C_1⁶ of {
//│ 			LH_C _lh_empty'_LH_C_0⁷ _lh_empty'_LH_C_1⁷ => case _lh_empty'_LH_C_1⁷ of {
//│ 				LH_C _lh_empty'_LH_C_0⁸ _lh_empty'_LH_C_1⁸ => case _lh_empty'_LH_C_0⁸ of {
//│ 					Empty  => case _lh_empty'_LH_C_1⁸ of {
//│ 						LH_N  => [True]
//│ 						| _  => [False]}
//│ 					| _  => [False]}
//│ 				| _  => [False]}
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def empty_lh_₁(_lh_empty_arg1⁰, _lh_empty_arg2⁰) = case _lh_empty_arg1⁰ of {
//│ 	LH_P2 _lh_empty_LH_P2_0⁰ _lh_empty_LH_P2_1⁰ => case _lh_empty_LH_P2_0⁰ of {
//│ 		1  => case _lh_empty_arg2⁰ of {
//│ 			LH_C _lh_empty_LH_C_0⁰ _lh_empty_LH_C_1⁰ => case _lh_empty_LH_C_1⁰ of {
//│ 				LH_C _lh_empty_LH_C_0¹ _lh_empty_LH_C_1¹ => case _lh_empty_LH_C_1¹ of {
//│ 					LH_C _lh_empty_LH_C_0² _lh_empty_LH_C_1² => case _lh_empty_LH_C_1² of {
//│ 						LH_N  => empty'_lh_₁^113(_lh_empty_LH_P2_1⁰, _lh_empty_LH_C_0⁰)
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| 2  => case _lh_empty_arg2⁰ of {
//│ 			LH_C _lh_empty_LH_C_0³ _lh_empty_LH_C_1³ => case _lh_empty_LH_C_1³ of {
//│ 				LH_C _lh_empty_LH_C_0⁴ _lh_empty_LH_C_1⁴ => case _lh_empty_LH_C_1⁴ of {
//│ 					LH_C _lh_empty_LH_C_0⁵ _lh_empty_LH_C_1⁵ => case _lh_empty_LH_C_1⁵ of {
//│ 						LH_N  => empty'_lh_₁^130(_lh_empty_LH_P2_1⁰, _lh_empty_LH_C_0⁴)
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| 3  => case _lh_empty_arg2⁰ of {
//│ 			LH_C _lh_empty_LH_C_0⁶ _lh_empty_LH_C_1⁶ => case _lh_empty_LH_C_1⁶ of {
//│ 				LH_C _lh_empty_LH_C_0⁷ _lh_empty_LH_C_1⁷ => case _lh_empty_LH_C_1⁷ of {
//│ 					LH_C _lh_empty_LH_C_0⁸ _lh_empty_LH_C_1⁸ => case _lh_empty_LH_C_1⁸ of {
//│ 						LH_N  => empty'_lh_₁^147(_lh_empty_LH_P2_1⁰, _lh_empty_LH_C_0⁸)
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def enumFromTo_lh_₁(a², b¹) = if (a² <= b¹) then [LH_C a² enumFromTo_lh_₁^919((a² + 1), b¹)] else [LH_N]
//│ def enumFromTo_lh_₂(a¹, b⁰) = if (a¹ <= b⁰) then [LH_C a¹ enumFromTo_lh_₂^899((a¹ + 1), b⁰)] else [LH_N]
//│ def eval_lh_₁(_lh_eval_arg1⁰) = if (_lh_eval_arg1⁰ == 3) then [XWin] else if (_lh_eval_arg1⁰ == (0 - 3)) then [OWin] else [Score _lh_eval_arg1⁰]
//│ def foldr_lh_₁(f⁰, i⁰, ls¹) = case ls¹ of {
//│ 	LH_C h¹ t¹ => f⁰(h¹, foldr_lh_₁^305(f⁰, i⁰, t¹))
//│ 	| LH_N  => i⁰}
//│ def fullBoard_lh_₁(_lh_fullBoard_arg1⁰) = and_lh_₁^1579(map_lh_₄^1580((fun x⁰ -> not⁰(polyEq⁰(x⁰, [Empty]))), concat_lh_₂^1590(_lh_fullBoard_arg1⁰)))
//│ def insert_lh_₁(_lh_insert_arg1⁰, _lh_insert_arg2⁰, _lh_insert_arg3⁰) = case _lh_insert_arg2⁰ of {
//│ 	LH_C _lh_insert_LH_C_0⁰ _lh_insert_LH_C_1⁰ => case _lh_insert_LH_C_1⁰ of {
//│ 		LH_C _lh_insert_LH_C_0¹ _lh_insert_LH_C_1¹ => case _lh_insert_LH_C_1¹ of {
//│ 			LH_C _lh_insert_LH_C_0² _lh_insert_LH_C_1² => case _lh_insert_LH_C_1² of {
//│ 				LH_N  => case _lh_insert_arg3⁰ of {
//│ 					1  => [LH_C _lh_insert_arg1⁰ [LH_C _lh_insert_LH_C_0¹ [LH_C _lh_insert_LH_C_0² [LH_N]]]]
//│ 					| 2  => [LH_C _lh_insert_LH_C_0⁰ [LH_C _lh_insert_arg1⁰ [LH_C _lh_insert_LH_C_0² [LH_N]]]]
//│ 					| 3  => [LH_C _lh_insert_LH_C_0⁰ [LH_C _lh_insert_LH_C_0¹ [LH_C _lh_insert_arg1⁰ [LH_N]]]]
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def interpret_lh_₁(_lh_interpret_arg1¹, _lh_interpret_arg2¹) = case _lh_interpret_arg2¹ of {
//│ 	LH_N  => [Score _lh_interpret_arg1¹]
//│ 	| LH_C _lh_interpret_LH_C_0¹ _lh_interpret_LH_C_1¹ => case _lh_interpret_LH_C_0¹ of {
//│ 		Score _lh_interpret_Score_0¹ => interpret_lh_₁^1224((_lh_interpret_arg1¹ + _lh_interpret_Score_0¹), _lh_interpret_LH_C_1¹)
//│ 		| XWin  => [XWin]
//│ 		| OWin  => [OWin]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def interpret_lh_₂(_lh_interpret_arg1⁰, _lh_interpret_arg2⁰) = case _lh_interpret_arg2⁰ of {
//│ 	LH_N  => [Score _lh_interpret_arg1⁰]
//│ 	| LH_C _lh_interpret_LH_C_0⁰ _lh_interpret_LH_C_1⁰ => case _lh_interpret_LH_C_0⁰ of {
//│ 		Score _lh_interpret_Score_0⁰ => interpret_lh_₂^876((_lh_interpret_arg1⁰ + _lh_interpret_Score_0⁰), _lh_interpret_LH_C_1⁰)
//│ 		| XWin  => [XWin]
//│ 		| OWin  => [OWin]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def length_lh_₁(ls⁹) = case ls⁹ of {
//│ 	LH_C h³² t³² => (1 + length_lh_₁^2718(t³²))
//│ 	| LH_N  => 0}
//│ def map2_lh_₁(_lh_map2_arg1⁰, _lh_map2_arg2⁰, _lh_map2_arg3⁰) = case _lh_map2_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| _  => case _lh_map2_arg3⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| _  => case _lh_map2_arg2⁰ of {
//│ 			LH_C _lh_map2_LH_C_0⁰ _lh_map2_LH_C_1⁰ => case _lh_map2_arg3⁰ of {
//│ 				LH_C _lh_map2_LH_C_0¹ _lh_map2_LH_C_1¹ => [LH_C _lh_map2_arg1⁰(_lh_map2_LH_C_0⁰, _lh_map2_LH_C_0¹) map2_lh_₁^350(_lh_map2_arg1⁰, _lh_map2_LH_C_1⁰, _lh_map2_LH_C_1¹)]
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}}}
//│ def mapTree_lh_₁(_lh_mapTree_arg1⁰, _lh_mapTree_arg2⁰) = case _lh_mapTree_arg2⁰ of {
//│ 	Branch _lh_mapTree_Branch_0⁰ _lh_mapTree_Branch_1⁰ => [Branch _lh_mapTree_arg1⁰(_lh_mapTree_Branch_0⁰) map_lh_₆^1099(mapTree_lh_₁^1100(_lh_mapTree_arg1⁰), _lh_mapTree_Branch_1⁰)]
//│ 	| _  => error⁰}
//│ def map_lh_₁(f⁶, ls⁸) = case ls⁸ of {
//│ 	LH_C h²⁸ t²⁸ => [LH_C f⁶(h²⁸) map_lh_₁^1990(f⁶, t²⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f⁵, ls⁷) = case ls⁷ of {
//│ 	LH_C h²⁴ t²⁴ => [LH_C f⁵(h²⁴) map_lh_₂^1569(f⁵, t²⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f⁴, ls⁶) = case ls⁶ of {
//│ 	LH_C h¹⁷ t¹⁷ => [LH_C f⁴(h¹⁷) map_lh_₃^1193(f⁴, t¹⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f³, ls⁵) = case ls⁵ of {
//│ 	LH_C h¹⁶ t¹⁶ => [LH_C f³(h¹⁶) map_lh_₄^1063(f³, t¹⁶)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f², ls⁴) = case ls⁴ of {
//│ 	LH_C h¹⁴ t¹⁴ => [LH_C f²(h¹⁴) map_lh_₅^1027(f², t¹⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f¹, ls³) = case ls³ of {
//│ 	LH_C h¹² t¹² => [LH_C f¹(h¹²) map_lh_₆^845(f¹, t¹²)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs²⁰, ys²⁰) = case xs²⁰ of {
//│ 	LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₁^2274(t³⁰, ys²⁰)]
//│ 	| LH_N  => ys²⁰}
//│ def mappend_lh_₁₀(xs¹¹, ys¹¹) = case xs¹¹ of {
//│ 	LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₁₀^1255(t¹⁹, ys¹¹)]
//│ 	| LH_N  => ys¹¹}
//│ def mappend_lh_₁₁(xs¹⁰, ys¹⁰) = case xs¹⁰ of {
//│ 	LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁^1243(t¹⁸, ys¹⁰)]
//│ 	| LH_N  => ys¹⁰}
//│ def mappend_lh_₁₂(xs⁹, ys⁹) = case xs⁹ of {
//│ 	LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₁₂^812(t¹¹, ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_lh_₁₃(xs⁸, ys⁸) = case xs⁸ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₃^774(t¹⁰, ys⁸)]
//│ 	| LH_N  => ys⁸}
//│ def mappend_lh_₁₄(xs⁷, ys⁷) = case xs⁷ of {
//│ 	LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄^762(t⁹, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₁₅(xs⁶, ys⁶) = case xs⁶ of {
//│ 	LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₁₅^750(t⁸, ys⁶)]
//│ 	| LH_N  => ys⁶}
//│ def mappend_lh_₁₆(xs⁵, ys⁵) = case xs⁵ of {
//│ 	LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₆^725(t⁷, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mappend_lh_₁₇(xs⁴, ys⁴) = case xs⁴ of {
//│ 	LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁₇^713(t⁶, ys⁴)]
//│ 	| LH_N  => ys⁴}
//│ def mappend_lh_₁₈(xs³, ys³) = case xs³ of {
//│ 	LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₈^701(t⁵, ys³)]
//│ 	| LH_N  => ys³}
//│ def mappend_lh_₁₉(xs², ys²) = case xs² of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₁₉^689(t⁴, ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₂(xs¹⁹, ys¹⁹) = case xs¹⁹ of {
//│ 	LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₂^2212(t²⁹, ys¹⁹)]
//│ 	| LH_N  => ys¹⁹}
//│ def mappend_lh_₂₀(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh_₂₀^638(t³, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₂₁(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h² t² => [LH_C h² mappend_lh_₂₁^587(t², ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₃(xs¹⁸, ys¹⁸) = case xs¹⁸ of {
//│ 	LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₃^1700(t²⁷, ys¹⁸)]
//│ 	| LH_N  => ys¹⁸}
//│ def mappend_lh_₄(xs¹⁷, ys¹⁷) = case xs¹⁷ of {
//│ 	LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₄^1649(t²⁶, ys¹⁷)]
//│ 	| LH_N  => ys¹⁷}
//│ def mappend_lh_₅(xs¹⁶, ys¹⁶) = case xs¹⁶ of {
//│ 	LH_C h²⁵ t²⁵ => [LH_C h²⁵ mappend_lh_₅^1637(t²⁵, ys¹⁶)]
//│ 	| LH_N  => ys¹⁶}
//│ def mappend_lh_₆(xs¹⁵, ys¹⁵) = case xs¹⁵ of {
//│ 	LH_C h²³ t²³ => [LH_C h²³ mappend_lh_₆^1423(t²³, ys¹⁵)]
//│ 	| LH_N  => ys¹⁵}
//│ def mappend_lh_₇(xs¹⁴, ys¹⁴) = case xs¹⁴ of {
//│ 	LH_C h²² t²² => [LH_C h²² mappend_lh_₇^1411(t²², ys¹⁴)]
//│ 	| LH_N  => ys¹⁴}
//│ def mappend_lh_₈(xs¹³, ys¹³) = case xs¹³ of {
//│ 	LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₈^1319(t²¹, ys¹³)]
//│ 	| LH_N  => ys¹³}
//│ def mappend_lh_₉(xs¹², ys¹²) = case xs¹² of {
//│ 	LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₉^1267(t²⁰, ys¹²)]
//│ 	| LH_N  => ys¹²}
//│ def max'_lh_₁(_lh_max'_arg1⁰, _lh_max'_arg2⁰) = case _lh_max'_arg1⁰ of {
//│ 	XWin  => [XWin]
//│ 	| _  => case _lh_max'_arg2⁰ of {
//│ 		XWin  => [XWin]
//│ 		| _  => case _lh_max'_arg2⁰ of {
//│ 			OWin  => _lh_max'_arg1⁰
//│ 			| _  => case _lh_max'_arg1⁰ of {
//│ 				OWin  => _lh_max'_arg2⁰
//│ 				| _  => case _lh_max'_arg1⁰ of {
//│ 					Score _lh_max'_Score_0⁰ => case _lh_max'_arg2⁰ of {
//│ 						Score _lh_max'_Score_0¹ => if (_lh_max'_Score_0⁰ > _lh_max'_Score_0¹) then [Score _lh_max'_Score_0⁰] else [Score _lh_max'_Score_0¹]
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}}}}}
//│ def min'_lh_₁(_lh_min'_arg1⁰, _lh_min'_arg2⁰) = case _lh_min'_arg1⁰ of {
//│ 	OWin  => [OWin]
//│ 	| _  => case _lh_min'_arg2⁰ of {
//│ 		OWin  => [OWin]
//│ 		| _  => case _lh_min'_arg2⁰ of {
//│ 			XWin  => _lh_min'_arg1⁰
//│ 			| _  => case _lh_min'_arg1⁰ of {
//│ 				XWin  => _lh_min'_arg2⁰
//│ 				| _  => case _lh_min'_arg1⁰ of {
//│ 					Score _lh_min'_Score_0⁰ => case _lh_min'_arg2⁰ of {
//│ 						Score _lh_min'_Score_0¹ => if (_lh_min'_Score_0⁰ < _lh_min'_Score_0¹) then [Score _lh_min'_Score_0⁰] else [Score _lh_min'_Score_0¹]
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}}}}}
//│ def mise_lh_₁(_lh_mise_arg1⁰, _lh_mise_arg2⁰, _lh_mise_arg3⁰) = case _lh_mise_arg3⁰ of {
//│ 	Branch _lh_mise_Branch_0⁰ _lh_mise_Branch_1⁰ => case _lh_mise_Branch_1⁰ of {
//│ 		LH_N  => _lh_mise_Branch_0⁰
//│ 		| _  => foldr_lh_₁^1145(_lh_mise_arg1⁰, _lh_mise_arg2⁰([OWin], [XWin]), map_lh_₆^1154(mise_lh_₁^1155(_lh_mise_arg2⁰, _lh_mise_arg1⁰), _lh_mise_Branch_1⁰))}
//│ 	| _  => error⁰}
//│ def newPositions_lh_₁(_lh_newPositions_arg1⁰, _lh_newPositions_arg2⁰) = concat_lh_₃^1451(map_lh_₅^1452(placePiece_lh_₁^1453(_lh_newPositions_arg1⁰, _lh_newPositions_arg2⁰), 
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 			let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 				LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 				| LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ 			in _lh_listcomp_fun¹(enumFromTo_lh_₁^1474(1, 3))
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰(enumFromTo_lh_₂^1485(1, 3))))
//│ def opposite_lh_₁(_lh_opposite_arg1⁰) = case _lh_opposite_arg1⁰ of {
//│ 	X  => [O]
//│ 	| O  => [X]
//│ 	| _  => error⁰}
//│ def placePiece_lh_₁(_lh_placePiece_arg1⁰, _lh_placePiece_arg2⁰, _lh_placePiece_arg3⁰) = if not⁰(empty_lh_₁^934(_lh_placePiece_arg3⁰, _lh_placePiece_arg2⁰)) then [LH_N] else 
//│ 	let _lh_matchIdent⁰ = _lh_placePiece_arg2⁰
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_C _lh_placePiece_LH_C_0⁰ _lh_placePiece_LH_C_1⁰ => case _lh_placePiece_LH_C_1⁰ of {
//│ 			LH_C _lh_placePiece_LH_C_0¹ _lh_placePiece_LH_C_1¹ => case _lh_placePiece_LH_C_1¹ of {
//│ 				LH_C _lh_placePiece_LH_C_0² _lh_placePiece_LH_C_1² => case _lh_placePiece_LH_C_1² of {
//│ 					LH_N  => 
//│ 						let _lh_matchIdent¹ = _lh_placePiece_arg3⁰
//│ 						in case _lh_matchIdent¹ of {
//│ 							LH_P2 _lh_placePiece_LH_P2_0⁰ _lh_placePiece_LH_P2_1⁰ => case _lh_placePiece_LH_P2_0⁰ of {
//│ 								1  => [LH_C [LH_C insert_lh_₁^949(_lh_placePiece_arg1⁰, _lh_placePiece_LH_C_0⁰, _lh_placePiece_LH_P2_1⁰) [LH_C _lh_placePiece_LH_C_0¹ [LH_C _lh_placePiece_LH_C_0² [LH_N]]]] [LH_N]]
//│ 								| 2  => [LH_C [LH_C _lh_placePiece_LH_C_0⁰ [LH_C insert_lh_₁^965(_lh_placePiece_arg1⁰, _lh_placePiece_LH_C_0¹, _lh_placePiece_LH_P2_1⁰) [LH_C _lh_placePiece_LH_C_0² [LH_N]]]] [LH_N]]
//│ 								| 3  => [LH_C [LH_C _lh_placePiece_LH_C_0⁰ [LH_C _lh_placePiece_LH_C_0¹ [LH_C insert_lh_₁^981(_lh_placePiece_arg1⁰, _lh_placePiece_LH_C_0², _lh_placePiece_LH_P2_1⁰) [LH_N]]]] [LH_N]]
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ def prog_lh_₁(_lh_prog_arg1⁰) = 
//│ 	let board⁰ = (fun _lh_board_arg1⁰ -> case _lh_board_arg1⁰ of {
//│ 		LH_C _lh_board_LH_C_0⁰ _lh_board_LH_C_1⁰ => case _lh_board_LH_C_0⁰ of {
//│ 			'd'  => case _lh_board_LH_C_1⁰ of {
//│ 				LH_C _lh_board_LH_C_0¹ _lh_board_LH_C_1¹ => case _lh_board_LH_C_0¹ of {
//│ 					'o'  => case _lh_board_LH_C_1¹ of {
//│ 						LH_C _lh_board_LH_C_0² _lh_board_LH_C_1² => case _lh_board_LH_C_0² of {
//│ 							'e'  => case _lh_board_LH_C_1² of {
//│ 								LH_C _lh_board_LH_C_0³ _lh_board_LH_C_1³ => case _lh_board_LH_C_0³ of {
//│ 									's'  => case _lh_board_LH_C_1³ of {
//│ 										LH_C _lh_board_LH_C_0⁴ _lh_board_LH_C_1⁴ => case _lh_board_LH_C_0⁴ of {
//│ 											'n'  => case _lh_board_LH_C_1⁴ of {
//│ 												LH_C _lh_board_LH_C_0⁵ _lh_board_LH_C_1⁵ => case _lh_board_LH_C_0⁵ of {
//│ 													't'  => case _lh_board_LH_C_1⁵ of {
//│ 														LH_C _lh_board_LH_C_0⁶ _lh_board_LH_C_1⁶ => case _lh_board_LH_C_0⁶ of {
//│ 															' '  => case _lh_board_LH_C_1⁶ of {
//│ 																LH_C _lh_board_LH_C_0⁷ _lh_board_LH_C_1⁷ => case _lh_board_LH_C_0⁷ of {
//│ 																	'h'  => case _lh_board_LH_C_1⁷ of {
//│ 																		LH_C _lh_board_LH_C_0⁸ _lh_board_LH_C_1⁸ => case _lh_board_LH_C_0⁸ of {
//│ 																			'a'  => case _lh_board_LH_C_1⁸ of {
//│ 																				LH_C _lh_board_LH_C_0⁹ _lh_board_LH_C_1⁹ => case _lh_board_LH_C_0⁹ of {
//│ 																					'p'  => case _lh_board_LH_C_1⁹ of {
//│ 																						LH_C _lh_board_LH_C_0¹⁰ _lh_board_LH_C_1¹⁰ => case _lh_board_LH_C_0¹⁰ of {
//│ 																							'p'  => case _lh_board_LH_C_1¹⁰ of {
//│ 																								LH_C _lh_board_LH_C_0¹¹ _lh_board_LH_C_1¹¹ => case _lh_board_LH_C_0¹¹ of {
//│ 																									'e'  => case _lh_board_LH_C_1¹¹ of {
//│ 																										LH_C _lh_board_LH_C_0¹² _lh_board_LH_C_1¹² => case _lh_board_LH_C_0¹² of {
//│ 																											'n'  => case _lh_board_LH_C_1¹² of {
//│ 																												LH_N  => mappend_lh_₂^2752(testBoard_lh_₂₇^2753, testBoard_lh_₁₂^2755)
//│ 																												| _  => testBoard_lh_₁₆^2757}
//│ 																											| _  => testBoard_lh_₂₃^2759}
//│ 																										| _  => testBoard_lh_₃^2761}
//│ 																									| _  => testBoard_lh_₂₂^2763}
//│ 																								| _  => testBoard_lh_₁₄^2765}
//│ 																							| _  => testBoard_lh_₆^2767}
//│ 																						| _  => testBoard_lh_₂₁^2769}
//│ 																					| _  => testBoard_lh_₁₁^2771}
//│ 																				| _  => testBoard_lh_₂₄^2773}
//│ 																			| _  => testBoard_lh_₁^2775}
//│ 																		| _  => testBoard_lh_₉^2777}
//│ 																	| _  => testBoard_lh_₂₅^2779}
//│ 																| _  => testBoard_lh_₁₅^2781}
//│ 															| _  => testBoard_lh_₈^2783}
//│ 														| _  => testBoard_lh_₁₀^2785}
//│ 													| _  => testBoard_lh_₂₀^2787}
//│ 												| _  => testBoard_lh_₁₈^2789}
//│ 											| _  => testBoard_lh_₂₉^2791}
//│ 										| _  => testBoard_lh_₂₆^2793}
//│ 									| _  => testBoard_lh_₂₈^2795}
//│ 								| _  => testBoard_lh_₇^2797}
//│ 							| _  => testBoard_lh_₅^2799}
//│ 						| _  => testBoard_lh_₂^2801}
//│ 					| _  => testBoard_lh_₁₉^2803}
//│ 				| _  => testBoard_lh_₁₇^2805}
//│ 			| _  => testBoard_lh_₄^2807}
//│ 		| _  => testBoard_lh_₁₃^2809})
//│ 	in let game⁰ = alternate_lh_₁^2812([X], max'_lh_₁^2815, min'_lh_₁^2817, board⁰(_lh_prog_arg1⁰))
//│ 	in mappend_lh_₁^2823([LH_C 'O' [LH_C 'X' [LH_C 'O' [LH_C '|' [LH_N]]]]], concat_lh_₁^2834(map_lh_₁^2835(showMove_lh_₁^2836, game⁰)))
//│ def prune_lh_₁(_lh_prune_arg1⁰, _lh_prune_arg2⁰) = case _lh_prune_arg1⁰ of {
//│ 	0  => case _lh_prune_arg2⁰ of {
//│ 		Branch _lh_prune_Branch_0⁰ _lh_prune_Branch_1⁰ => [Branch _lh_prune_Branch_0⁰ [LH_N]]
//│ 		| _  => case _lh_prune_arg2⁰ of {
//│ 			Branch _lh_prune_Branch_0¹ _lh_prune_Branch_1¹ => if (_lh_prune_arg1⁰ < 0) then error⁰([LH_C 'T' [LH_C 'r' [LH_C 'e' [LH_C 'e' [LH_C '.' [LH_C 'p' [LH_C 'r' [LH_C 'u' [LH_C 'n' [LH_C 'e' [LH_C ':' [LH_C ' ' [LH_C '<' [LH_C ' ' [LH_C '0' [LH_N]]]]]]]]]]]]]]]]) else [Branch _lh_prune_Branch_0¹ map_lh_₆^211(prune_lh_₁^212((_lh_prune_arg1⁰ - 1)), _lh_prune_Branch_1¹)]
//│ 			| _  => error⁰}}
//│ 	| _  => case _lh_prune_arg2⁰ of {
//│ 		Branch _lh_prune_Branch_0² _lh_prune_Branch_1² => if (_lh_prune_arg1⁰ < 0) then error⁰([LH_C 'T' [LH_C 'r' [LH_C 'e' [LH_C 'e' [LH_C '.' [LH_C 'p' [LH_C 'r' [LH_C 'u' [LH_C 'n' [LH_C 'e' [LH_C ':' [LH_C ' ' [LH_C '<' [LH_C ' ' [LH_C '0' [LH_N]]]]]]]]]]]]]]]]) else [Branch _lh_prune_Branch_0² map_lh_₆^267(prune_lh_₁^268((_lh_prune_arg1⁰ - 1)), _lh_prune_Branch_1²)]
//│ 		| _  => error⁰}}
//│ def repTree_lh_₁(_lh_repTree_arg1⁰, _lh_repTree_arg2⁰, _lh_repTree_arg3⁰) = [Branch _lh_repTree_arg3⁰ map_lh_₆^286(repTree_lh_₁^287(_lh_repTree_arg2⁰, _lh_repTree_arg1⁰), _lh_repTree_arg1⁰(_lh_repTree_arg3⁰))]
//│ def scorePiece_lh_₁(_lh_scorePiece_arg1⁰, _lh_scorePiece_arg2⁰) = case _lh_scorePiece_arg1⁰ of {
//│ 	X  => _lh_scorePiece_arg2⁰
//│ 	| Empty  => 0
//│ 	| O  => (0 - _lh_scorePiece_arg2⁰)
//│ 	| _  => error⁰}
//│ def score_lh_₁(_lh_score_arg1¹, _lh_score_arg2¹) = eval_lh_₁^1170(sum_lh_₁^1171(map_lh_₆^1172(sum_lh_₁^1173, map2_lh_₁^1175(map2_lh_₁^1176(scorePiece_lh_₁^1177), _lh_score_arg1¹, _lh_score_arg2¹))))
//│ def score_lh_₂(_lh_score_arg1⁰, _lh_score_arg2⁰) = eval_lh_₁^822(sum_lh_₁^823(map_lh_₆^824(sum_lh_₁^825, map2_lh_₁^827(map2_lh_₁^828(scorePiece_lh_₁^829), _lh_score_arg1⁰, _lh_score_arg2⁰))))
//│ def searchTree_lh_₁(_lh_searchTree_arg1⁰, _lh_searchTree_arg2⁰) = prune_lh_₁^1123(5, repTree_lh_₁^1126(newPositions_lh_₁^1127(_lh_searchTree_arg1⁰), newPositions_lh_₁^1131(opposite_lh_₁^1132(_lh_searchTree_arg1⁰)), _lh_searchTree_arg2⁰))
//│ def showBoard_lh_₁(_lh_showBoard_arg1⁰) = case _lh_showBoard_arg1⁰ of {
//│ 	LH_C _lh_showBoard_LH_C_0⁰ _lh_showBoard_LH_C_1⁰ => case _lh_showBoard_LH_C_1⁰ of {
//│ 		LH_C _lh_showBoard_LH_C_0¹ _lh_showBoard_LH_C_1¹ => case _lh_showBoard_LH_C_1¹ of {
//│ 			LH_C _lh_showBoard_LH_C_0² _lh_showBoard_LH_C_1² => case _lh_showBoard_LH_C_1² of {
//│ 				LH_N  => mappend_lh_₆^1714(mappend_lh_₇^1715(mappend_lh_₈^1716(mappend_lh_₉^1717(mappend_lh_₁₀^1718(showRow_lh_₃^1719(_lh_showBoard_LH_C_0⁰), [LH_C '|' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]]), showRow_lh_₂^1742(_lh_showBoard_LH_C_0¹)), [LH_C '|' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]]), showRow_lh_₁^1766(_lh_showBoard_LH_C_0²)), [LH_C '|' [LH_C '|' [LH_N]]])
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def showEvaluation_lh_₁(_lh_showEvaluation_arg1⁰) = case _lh_showEvaluation_arg1⁰ of {
//│ 	XWin  => [LH_C 'X' [LH_C 'W' [LH_C 'i' [LH_C 'n' [LH_N]]]]]
//│ 	| OWin  => [LH_C 'O' [LH_C 'W' [LH_C 'i' [LH_C 'n' [LH_N]]]]]
//│ 	| Score _lh_showEvaluation_Score_0⁰ => mappend_lh_₁₁^1678([LH_C 'S' [LH_C 'c' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_N]]]]]], string_of_int⁰(_lh_showEvaluation_Score_0⁰))
//│ 	| _  => error⁰}
//│ def showMove_lh_₁(_lh_showMove_arg1⁰) = case _lh_showMove_arg1⁰ of {
//│ 	LH_P2 _lh_showMove_LH_P2_0⁰ _lh_showMove_LH_P2_1⁰ => mappend_lh_₃^2696(mappend_lh_₄^2697(showEvaluation_lh_₁^2698(_lh_showMove_LH_P2_1⁰), [LH_C '|' [LH_N]]), showBoard_lh_₁^2707(_lh_showMove_LH_P2_0⁰))
//│ 	| _  => error⁰}
//│ def showPiece_lh_₁(_lh_showPiece_arg1⁸) = case _lh_showPiece_arg1⁸ of {
//│ 	X  => [LH_C 'X' [LH_N]]
//│ 	| O  => [LH_C 'O' [LH_N]]
//│ 	| Empty  => [LH_C ' ' [LH_N]]
//│ 	| _  => error⁰}
//│ def showPiece_lh_₂(_lh_showPiece_arg1⁷) = case _lh_showPiece_arg1⁷ of {
//│ 	X  => [LH_C 'X' [LH_N]]
//│ 	| O  => [LH_C 'O' [LH_N]]
//│ 	| Empty  => [LH_C ' ' [LH_N]]
//│ 	| _  => error⁰}
//│ def showPiece_lh_₃(_lh_showPiece_arg1⁶) = case _lh_showPiece_arg1⁶ of {
//│ 	X  => [LH_C 'X' [LH_N]]
//│ 	| O  => [LH_C 'O' [LH_N]]
//│ 	| Empty  => [LH_C ' ' [LH_N]]
//│ 	| _  => error⁰}
//│ def showPiece_lh_₄(_lh_showPiece_arg1⁵) = case _lh_showPiece_arg1⁵ of {
//│ 	X  => [LH_C 'X' [LH_N]]
//│ 	| O  => [LH_C 'O' [LH_N]]
//│ 	| Empty  => [LH_C ' ' [LH_N]]
//│ 	| _  => error⁰}
//│ def showPiece_lh_₅(_lh_showPiece_arg1⁴) = case _lh_showPiece_arg1⁴ of {
//│ 	X  => [LH_C 'X' [LH_N]]
//│ 	| O  => [LH_C 'O' [LH_N]]
//│ 	| Empty  => [LH_C ' ' [LH_N]]
//│ 	| _  => error⁰}
//│ def showPiece_lh_₆(_lh_showPiece_arg1³) = case _lh_showPiece_arg1³ of {
//│ 	X  => [LH_C 'X' [LH_N]]
//│ 	| O  => [LH_C 'O' [LH_N]]
//│ 	| Empty  => [LH_C ' ' [LH_N]]
//│ 	| _  => error⁰}
//│ def showPiece_lh_₇(_lh_showPiece_arg1²) = case _lh_showPiece_arg1² of {
//│ 	X  => [LH_C 'X' [LH_N]]
//│ 	| O  => [LH_C 'O' [LH_N]]
//│ 	| Empty  => [LH_C ' ' [LH_N]]
//│ 	| _  => error⁰}
//│ def showPiece_lh_₈(_lh_showPiece_arg1¹) = case _lh_showPiece_arg1¹ of {
//│ 	X  => [LH_C 'X' [LH_N]]
//│ 	| O  => [LH_C 'O' [LH_N]]
//│ 	| Empty  => [LH_C ' ' [LH_N]]
//│ 	| _  => error⁰}
//│ def showPiece_lh_₉(_lh_showPiece_arg1⁰) = case _lh_showPiece_arg1⁰ of {
//│ 	X  => [LH_C 'X' [LH_N]]
//│ 	| O  => [LH_C 'O' [LH_N]]
//│ 	| Empty  => [LH_C ' ' [LH_N]]
//│ 	| _  => error⁰}
//│ def showRow_lh_₁(_lh_showRow_arg1²) = case _lh_showRow_arg1² of {
//│ 	LH_C _lh_showRow_LH_C_0⁶ _lh_showRow_LH_C_1⁶ => case _lh_showRow_LH_C_1⁶ of {
//│ 		LH_C _lh_showRow_LH_C_0⁷ _lh_showRow_LH_C_1⁷ => case _lh_showRow_LH_C_1⁷ of {
//│ 			LH_C _lh_showRow_LH_C_0⁸ _lh_showRow_LH_C_1⁸ => case _lh_showRow_LH_C_1⁸ of {
//│ 				LH_N  => mappend_lh_₁₂^1373(mappend_lh_₁₃^1374(mappend_lh_₁₅^1375(mappend_lh_₁₄^1376(showPiece_lh_₁^1377(_lh_showRow_LH_C_0⁶), [LH_C '|' [LH_N]]), showPiece_lh_₂^1386(_lh_showRow_LH_C_0⁷)), [LH_C '|' [LH_N]]), showPiece_lh_₃^1396(_lh_showRow_LH_C_0⁸))
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def showRow_lh_₂(_lh_showRow_arg1¹) = case _lh_showRow_arg1¹ of {
//│ 	LH_C _lh_showRow_LH_C_0³ _lh_showRow_LH_C_1³ => case _lh_showRow_LH_C_1³ of {
//│ 		LH_C _lh_showRow_LH_C_0⁴ _lh_showRow_LH_C_1⁴ => case _lh_showRow_LH_C_1⁴ of {
//│ 			LH_C _lh_showRow_LH_C_0⁵ _lh_showRow_LH_C_1⁵ => case _lh_showRow_LH_C_1⁵ of {
//│ 				LH_N  => mappend_lh_₁₈^1333(mappend_lh_₁₇^1334(mappend_lh_₁₆^1335(mappend_lh_₁₉^1336(showPiece_lh_₅^1337(_lh_showRow_LH_C_0³), [LH_C '|' [LH_N]]), showPiece_lh_₄^1346(_lh_showRow_LH_C_0⁴)), [LH_C '|' [LH_N]]), showPiece_lh_₆^1356(_lh_showRow_LH_C_0⁵))
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def showRow_lh_₃(_lh_showRow_arg1⁰) = case _lh_showRow_arg1⁰ of {
//│ 	LH_C _lh_showRow_LH_C_0⁰ _lh_showRow_LH_C_1⁰ => case _lh_showRow_LH_C_1⁰ of {
//│ 		LH_C _lh_showRow_LH_C_0¹ _lh_showRow_LH_C_1¹ => case _lh_showRow_LH_C_1¹ of {
//│ 			LH_C _lh_showRow_LH_C_0² _lh_showRow_LH_C_1² => case _lh_showRow_LH_C_1² of {
//│ 				LH_N  => mappend_lh_₂₁^1281(mappend_lh_₂₀^1282(mappend_lh_₂₁^1283(mappend_lh_₂₁^1284(showPiece_lh_₇^1285(_lh_showRow_LH_C_0⁰), [LH_C '|' [LH_N]]), showPiece_lh_₉^1294(_lh_showRow_LH_C_0¹)), [LH_C '|' [LH_N]]), showPiece_lh_₈^1304(_lh_showRow_LH_C_0²))
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def static_lh_₁(_lh_static_arg1²) = interpret_lh_₁^1623(0, map_lh_₃^1626(score_lh_₁^1627(_lh_static_arg1²), wins_lh_₁^1631))
//│ def static_lh_₂(_lh_static_arg1¹) = interpret_lh_₂^1439(0, map_lh_₆^1442(score_lh_₂^1443(_lh_static_arg1¹), wins_lh_₂^1447))
//│ def static_lh_₃(_lh_static_arg1⁰) = interpret_lh_₂^1111(0, map_lh_₆^1114(score_lh_₂^1115(_lh_static_arg1⁰), wins_lh_₂^1119))
//│ def sumAux_lh_₁(ls⁰, a⁰) = case ls⁰ of {
//│ 	LH_N  => a⁰
//│ 	| LH_C h⁰ t⁰ => sumAux_lh_₁^56(t⁰, (a⁰ + h⁰))}
//│ def sum_lh_₁(ls²) = sumAux_lh_₁^367(ls², 0)
//│ def testBoard_lh_₁ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₀ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₁ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₂ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₃ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₄ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₅ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₆ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₇ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₈ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₉ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₀ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₁ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₂ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₃ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₄ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₅ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₆ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₇ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₈ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₉ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₃ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₄ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₅ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₆ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₇ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₈ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₉ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testMinimax_nofib_lh_₁(_lh_testMinimax_nofib_arg1⁰) = length_lh_₁^2845(prog_lh_₁^2846(_lh_testMinimax_nofib_arg1⁰))
//│ def win1_lh_₁ = [LH_C [LH_C 1 [LH_C 1 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def win2_lh_₁ = [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 1 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def win3_lh_₁ = [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 1 [LH_C 1 [LH_N]]]] [LH_N]]]]
//│ def win4_lh_₁ = [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def win5_lh_₁ = [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def win6_lh_₁ = [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_N]]]]
//│ def win7_lh_₁ = [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_N]]]]
//│ def win8_lh_₁ = [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def wins_lh_₁ = [LH_C win1_lh_₁^1203 [LH_C win2_lh_₁^1204 [LH_C win3_lh_₁^1205 [LH_C win4_lh_₁^1206 [LH_C win5_lh_₁^1207 [LH_C win6_lh_₁^1208 [LH_C win7_lh_₁^1209 [LH_C win8_lh_₁^1210 [LH_N]]]]]]]]]
//│ def wins_lh_₂ = [LH_C win1_lh_₁^855 [LH_C win2_lh_₁^856 [LH_C win3_lh_₁^857 [LH_C win4_lh_₁^858 [LH_C win5_lh_₁^859 [LH_C win6_lh_₁^860 [LH_C win7_lh_₁^861 [LH_C win8_lh_₁^862 [LH_N]]]]]]]]]
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec mappend_lh__d1 xs_2_0 ys_2_0 =
//│ 		  (match xs_2_0 with
//│ 		    | `LH_C(h_3_0, t_3_0) -> 
//│ 		      (`LH_C(h_3_0, ((mappend_lh__d1 t_3_0) ys_2_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_0);;
//│ 		let rec testBoard_lh__d8 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d6 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec mappend_lh__d4 xs_1_7 ys_1_7 =
//│ 		  (match xs_1_7 with
//│ 		    | `LH_C(h_2_6, t_2_6) -> 
//│ 		      (`LH_C(h_2_6, ((mappend_lh__d4 t_2_6) ys_1_7)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_7);;
//│ 		let rec showPiece_lh__d2 _lh_showPiece_arg1_7 =
//│ 		  (match _lh_showPiece_arg1_7 with
//│ 		    | `X -> 
//│ 		      (`LH_C('X', (`LH_N)))
//│ 		    | `O -> 
//│ 		      (`LH_C('O', (`LH_N)))
//│ 		    | `Empty -> 
//│ 		      (`LH_C(' ', (`LH_N)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec showPiece_lh__d3 _lh_showPiece_arg1_6 =
//│ 		  (match _lh_showPiece_arg1_6 with
//│ 		    | `X -> 
//│ 		      (`LH_C('X', (`LH_N)))
//│ 		    | `O -> 
//│ 		      (`LH_C('O', (`LH_N)))
//│ 		    | `Empty -> 
//│ 		      (`LH_C(' ', (`LH_N)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mappend_lh__d1_d4 xs_7 ys_7 =
//│ 		  (match xs_7 with
//│ 		    | `LH_C(h_9, t_9) -> 
//│ 		      (`LH_C(h_9, ((mappend_lh__d1_d4 t_9) ys_7)))
//│ 		    | `LH_N -> 
//│ 		      ys_7);;
//│ 		let rec mappend_lh__d1_d3 xs_8 ys_8 =
//│ 		  (match xs_8 with
//│ 		    | `LH_C(h_1_0, t_1_0) -> 
//│ 		      (`LH_C(h_1_0, ((mappend_lh__d1_d3 t_1_0) ys_8)))
//│ 		    | `LH_N -> 
//│ 		      ys_8);;
//│ 		let rec mappend_lh__d1_d5 xs_6 ys_6 =
//│ 		  (match xs_6 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      (`LH_C(h_8, ((mappend_lh__d1_d5 t_8) ys_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_6);;
//│ 		let rec showPiece_lh__d1 _lh_showPiece_arg1_8 =
//│ 		  (match _lh_showPiece_arg1_8 with
//│ 		    | `X -> 
//│ 		      (`LH_C('X', (`LH_N)))
//│ 		    | `O -> 
//│ 		      (`LH_C('O', (`LH_N)))
//│ 		    | `Empty -> 
//│ 		      (`LH_C(' ', (`LH_N)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mappend_lh__d1_d2 xs_9 ys_9 =
//│ 		  (match xs_9 with
//│ 		    | `LH_C(h_1_1, t_1_1) -> 
//│ 		      (`LH_C(h_1_1, ((mappend_lh__d1_d2 t_1_1) ys_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_9);;
//│ 		let rec showRow_lh__d1 _lh_showRow_arg1_2 =
//│ 		  (match _lh_showRow_arg1_2 with
//│ 		    | `LH_C(_lh_showRow_LH_C_0_6, _lh_showRow_LH_C_1_6) -> 
//│ 		      (match _lh_showRow_LH_C_1_6 with
//│ 		        | `LH_C(_lh_showRow_LH_C_0_7, _lh_showRow_LH_C_1_7) -> 
//│ 		          (match _lh_showRow_LH_C_1_7 with
//│ 		            | `LH_C(_lh_showRow_LH_C_0_8, _lh_showRow_LH_C_1_8) -> 
//│ 		              (match _lh_showRow_LH_C_1_8 with
//│ 		                | `LH_N -> 
//│ 		                  ((mappend_lh__d1_d2 ((mappend_lh__d1_d3 ((mappend_lh__d1_d5 ((mappend_lh__d1_d4 (showPiece_lh__d1 _lh_showRow_LH_C_0_6)) (`LH_C('|', (`LH_N))))) (showPiece_lh__d2 _lh_showRow_LH_C_0_7))) (`LH_C('|', (`LH_N))))) (showPiece_lh__d3 _lh_showRow_LH_C_0_8))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))
//│ 		            | _ -> 
//│ 		              (failwith "error"))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mappend_lh__d8 xs_1_3 ys_1_3 =
//│ 		  (match xs_1_3 with
//│ 		    | `LH_C(h_2_1, t_2_1) -> 
//│ 		      (`LH_C(h_2_1, ((mappend_lh__d8 t_2_1) ys_1_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_3);;
//│ 		let rec mappend_lh__d6 xs_1_5 ys_1_5 =
//│ 		  (match xs_1_5 with
//│ 		    | `LH_C(h_2_3, t_2_3) -> 
//│ 		      (`LH_C(h_2_3, ((mappend_lh__d6 t_2_3) ys_1_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_5);;
//│ 		let rec mappend_lh__d9 xs_1_2 ys_1_2 =
//│ 		  (match xs_1_2 with
//│ 		    | `LH_C(h_2_0, t_2_0) -> 
//│ 		      (`LH_C(h_2_0, ((mappend_lh__d9 t_2_0) ys_1_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_2);;
//│ 		let rec mappend_lh__d2_d1 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C(h_2, ((mappend_lh__d2_d1 t_2) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec showPiece_lh__d9 _lh_showPiece_arg1_0 =
//│ 		  (match _lh_showPiece_arg1_0 with
//│ 		    | `X -> 
//│ 		      (`LH_C('X', (`LH_N)))
//│ 		    | `O -> 
//│ 		      (`LH_C('O', (`LH_N)))
//│ 		    | `Empty -> 
//│ 		      (`LH_C(' ', (`LH_N)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec showPiece_lh__d8 _lh_showPiece_arg1_1 =
//│ 		  (match _lh_showPiece_arg1_1 with
//│ 		    | `X -> 
//│ 		      (`LH_C('X', (`LH_N)))
//│ 		    | `O -> 
//│ 		      (`LH_C('O', (`LH_N)))
//│ 		    | `Empty -> 
//│ 		      (`LH_C(' ', (`LH_N)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec showPiece_lh__d7 _lh_showPiece_arg1_2 =
//│ 		  (match _lh_showPiece_arg1_2 with
//│ 		    | `X -> 
//│ 		      (`LH_C('X', (`LH_N)))
//│ 		    | `O -> 
//│ 		      (`LH_C('O', (`LH_N)))
//│ 		    | `Empty -> 
//│ 		      (`LH_C(' ', (`LH_N)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mappend_lh__d2_d0 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      (`LH_C(h_3, ((mappend_lh__d2_d0 t_3) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec showRow_lh__d3 _lh_showRow_arg1_0 =
//│ 		  (match _lh_showRow_arg1_0 with
//│ 		    | `LH_C(_lh_showRow_LH_C_0_0, _lh_showRow_LH_C_1_0) -> 
//│ 		      (match _lh_showRow_LH_C_1_0 with
//│ 		        | `LH_C(_lh_showRow_LH_C_0_1, _lh_showRow_LH_C_1_1) -> 
//│ 		          (match _lh_showRow_LH_C_1_1 with
//│ 		            | `LH_C(_lh_showRow_LH_C_0_2, _lh_showRow_LH_C_1_2) -> 
//│ 		              (match _lh_showRow_LH_C_1_2 with
//│ 		                | `LH_N -> 
//│ 		                  ((mappend_lh__d2_d1 ((mappend_lh__d2_d0 ((mappend_lh__d2_d1 ((mappend_lh__d2_d1 (showPiece_lh__d7 _lh_showRow_LH_C_0_0)) (`LH_C('|', (`LH_N))))) (showPiece_lh__d9 _lh_showRow_LH_C_0_1))) (`LH_C('|', (`LH_N))))) (showPiece_lh__d8 _lh_showRow_LH_C_0_2))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))
//│ 		            | _ -> 
//│ 		              (failwith "error"))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mappend_lh__d1_d0 xs_1_1 ys_1_1 =
//│ 		  (match xs_1_1 with
//│ 		    | `LH_C(h_1_9, t_1_9) -> 
//│ 		      (`LH_C(h_1_9, ((mappend_lh__d1_d0 t_1_9) ys_1_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_1);;
//│ 		let rec mappend_lh__d1_d6 xs_5 ys_5 =
//│ 		  (match xs_5 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      (`LH_C(h_7, ((mappend_lh__d1_d6 t_7) ys_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_5);;
//│ 		let rec mappend_lh__d1_d8 xs_3 ys_3 =
//│ 		  (match xs_3 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      (`LH_C(h_5, ((mappend_lh__d1_d8 t_5) ys_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_3);;
//│ 		let rec mappend_lh__d1_d9 xs_2 ys_2 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      (`LH_C(h_4, ((mappend_lh__d1_d9 t_4) ys_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2);;
//│ 		let rec showPiece_lh__d4 _lh_showPiece_arg1_5 =
//│ 		  (match _lh_showPiece_arg1_5 with
//│ 		    | `X -> 
//│ 		      (`LH_C('X', (`LH_N)))
//│ 		    | `O -> 
//│ 		      (`LH_C('O', (`LH_N)))
//│ 		    | `Empty -> 
//│ 		      (`LH_C(' ', (`LH_N)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec showPiece_lh__d5 _lh_showPiece_arg1_4 =
//│ 		  (match _lh_showPiece_arg1_4 with
//│ 		    | `X -> 
//│ 		      (`LH_C('X', (`LH_N)))
//│ 		    | `O -> 
//│ 		      (`LH_C('O', (`LH_N)))
//│ 		    | `Empty -> 
//│ 		      (`LH_C(' ', (`LH_N)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec showPiece_lh__d6 _lh_showPiece_arg1_3 =
//│ 		  (match _lh_showPiece_arg1_3 with
//│ 		    | `X -> 
//│ 		      (`LH_C('X', (`LH_N)))
//│ 		    | `O -> 
//│ 		      (`LH_C('O', (`LH_N)))
//│ 		    | `Empty -> 
//│ 		      (`LH_C(' ', (`LH_N)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mappend_lh__d1_d7 xs_4 ys_4 =
//│ 		  (match xs_4 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      (`LH_C(h_6, ((mappend_lh__d1_d7 t_6) ys_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_4);;
//│ 		let rec showRow_lh__d2 _lh_showRow_arg1_1 =
//│ 		  (match _lh_showRow_arg1_1 with
//│ 		    | `LH_C(_lh_showRow_LH_C_0_3, _lh_showRow_LH_C_1_3) -> 
//│ 		      (match _lh_showRow_LH_C_1_3 with
//│ 		        | `LH_C(_lh_showRow_LH_C_0_4, _lh_showRow_LH_C_1_4) -> 
//│ 		          (match _lh_showRow_LH_C_1_4 with
//│ 		            | `LH_C(_lh_showRow_LH_C_0_5, _lh_showRow_LH_C_1_5) -> 
//│ 		              (match _lh_showRow_LH_C_1_5 with
//│ 		                | `LH_N -> 
//│ 		                  ((mappend_lh__d1_d8 ((mappend_lh__d1_d7 ((mappend_lh__d1_d6 ((mappend_lh__d1_d9 (showPiece_lh__d5 _lh_showRow_LH_C_0_3)) (`LH_C('|', (`LH_N))))) (showPiece_lh__d4 _lh_showRow_LH_C_0_4))) (`LH_C('|', (`LH_N))))) (showPiece_lh__d6 _lh_showRow_LH_C_0_5))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))
//│ 		            | _ -> 
//│ 		              (failwith "error"))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mappend_lh__d7 xs_1_4 ys_1_4 =
//│ 		  (match xs_1_4 with
//│ 		    | `LH_C(h_2_2, t_2_2) -> 
//│ 		      (`LH_C(h_2_2, ((mappend_lh__d7 t_2_2) ys_1_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_4);;
//│ 		let rec showBoard_lh__d1 _lh_showBoard_arg1_0 =
//│ 		  (match _lh_showBoard_arg1_0 with
//│ 		    | `LH_C(_lh_showBoard_LH_C_0_0, _lh_showBoard_LH_C_1_0) -> 
//│ 		      (match _lh_showBoard_LH_C_1_0 with
//│ 		        | `LH_C(_lh_showBoard_LH_C_0_1, _lh_showBoard_LH_C_1_1) -> 
//│ 		          (match _lh_showBoard_LH_C_1_1 with
//│ 		            | `LH_C(_lh_showBoard_LH_C_0_2, _lh_showBoard_LH_C_1_2) -> 
//│ 		              (match _lh_showBoard_LH_C_1_2 with
//│ 		                | `LH_N -> 
//│ 		                  ((mappend_lh__d6 ((mappend_lh__d7 ((mappend_lh__d8 ((mappend_lh__d9 ((mappend_lh__d1_d0 (showRow_lh__d3 _lh_showBoard_LH_C_0_0)) (`LH_C('|', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('|', (`LH_N))))))))))))))))))) (showRow_lh__d2 _lh_showBoard_LH_C_0_1))) (`LH_C('|', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('|', (`LH_N))))))))))))))))))) (showRow_lh__d1 _lh_showBoard_LH_C_0_2))) (`LH_C('|', (`LH_C('|', (`LH_N))))))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))
//│ 		            | _ -> 
//│ 		              (failwith "error"))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mappend_lh__d1_d1 xs_1_0 ys_1_0 =
//│ 		  (match xs_1_0 with
//│ 		    | `LH_C(h_1_8, t_1_8) -> 
//│ 		      (`LH_C(h_1_8, ((mappend_lh__d1_d1 t_1_8) ys_1_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_0);;
//│ 		let rec showEvaluation_lh__d1 _lh_showEvaluation_arg1_0 =
//│ 		  (match _lh_showEvaluation_arg1_0 with
//│ 		    | `XWin -> 
//│ 		      (`LH_C('X', (`LH_C('W', (`LH_C('i', (`LH_C('n', (`LH_N)))))))))
//│ 		    | `OWin -> 
//│ 		      (`LH_C('O', (`LH_C('W', (`LH_C('i', (`LH_C('n', (`LH_N)))))))))
//│ 		    | `Score(_lh_showEvaluation_Score_0_0) -> 
//│ 		      ((mappend_lh__d1_d1 (`LH_C('S', (`LH_C('c', (`LH_C('o', (`LH_C('r', (`LH_C('e', (`LH_N)))))))))))) (string_of_int _lh_showEvaluation_Score_0_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mappend_lh__d3 xs_1_8 ys_1_8 =
//│ 		  (match xs_1_8 with
//│ 		    | `LH_C(h_2_7, t_2_7) -> 
//│ 		      (`LH_C(h_2_7, ((mappend_lh__d3 t_2_7) ys_1_8)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_8);;
//│ 		let rec showMove_lh__d1 _lh_showMove_arg1_0 =
//│ 		  (match _lh_showMove_arg1_0 with
//│ 		    | `LH_P2(_lh_showMove_LH_P2_0_0, _lh_showMove_LH_P2_1_0) -> 
//│ 		      ((mappend_lh__d3 ((mappend_lh__d4 (showEvaluation_lh__d1 _lh_showMove_LH_P2_1_0)) (`LH_C('|', (`LH_N))))) (showBoard_lh__d1 _lh_showMove_LH_P2_0_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec testBoard_lh__d1_d1 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d6 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d1_d3 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d5 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec map_lh__d6 f_1 ls_3 =
//│ 		  (match ls_3 with
//│ 		    | `LH_C(h_1_2, t_1_2) -> 
//│ 		      (`LH_C((f_1 h_1_2), ((map_lh__d6 f_1) t_1_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec cropTree_lh__d1 _lh_cropTree_arg1_0 =
//│ 		  (match _lh_cropTree_arg1_0 with
//│ 		    | `Branch(_lh_cropTree_Branch_0_0, _lh_cropTree_Branch_1_0) -> 
//│ 		      (match _lh_cropTree_Branch_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (`Branch(_lh_cropTree_Branch_0_0, (`LH_N)))
//│ 		        | _ -> 
//│ 		          (match _lh_cropTree_Branch_0_0 with
//│ 		            | `Score(_lh_cropTree_Score_0_0) -> 
//│ 		              (`Branch((`Score(_lh_cropTree_Score_0_0)), ((map_lh__d6 cropTree_lh__d1) _lh_cropTree_Branch_1_0)))
//│ 		            | _ -> 
//│ 		              (`Branch(_lh_cropTree_Branch_0_0, (`LH_N)))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec prune_lh__d1 _lh_prune_arg1_0 _lh_prune_arg2_0 =
//│ 		  (match _lh_prune_arg1_0 with
//│ 		    | 0 -> 
//│ 		      (match _lh_prune_arg2_0 with
//│ 		        | `Branch(_lh_prune_Branch_0_0, _lh_prune_Branch_1_0) -> 
//│ 		          (`Branch(_lh_prune_Branch_0_0, (`LH_N)))
//│ 		        | _ -> 
//│ 		          (match _lh_prune_arg2_0 with
//│ 		            | `Branch(_lh_prune_Branch_0_1, _lh_prune_Branch_1_1) -> 
//│ 		              (if (_lh_prune_arg1_0 < 0) then
//│ 		                ((failwith "error") (`LH_C('T', (`LH_C('r', (`LH_C('e', (`LH_C('e', (`LH_C('.', (`LH_C('p', (`LH_C('r', (`LH_C('u', (`LH_C('n', (`LH_C('e', (`LH_C(':', (`LH_C(' ', (`LH_C('<', (`LH_C(' ', (`LH_C('0', (`LH_N))))))))))))))))))))))))))))))))
//│ 		              else
//│ 		                (`Branch(_lh_prune_Branch_0_1, ((map_lh__d6 (prune_lh__d1 (_lh_prune_arg1_0 - 1))) _lh_prune_Branch_1_1))))
//│ 		            | _ -> 
//│ 		              (failwith "error")))
//│ 		    | _ -> 
//│ 		      (match _lh_prune_arg2_0 with
//│ 		        | `Branch(_lh_prune_Branch_0_2, _lh_prune_Branch_1_2) -> 
//│ 		          (if (_lh_prune_arg1_0 < 0) then
//│ 		            ((failwith "error") (`LH_C('T', (`LH_C('r', (`LH_C('e', (`LH_C('e', (`LH_C('.', (`LH_C('p', (`LH_C('r', (`LH_C('u', (`LH_C('n', (`LH_C('e', (`LH_C(':', (`LH_C(' ', (`LH_C('<', (`LH_C(' ', (`LH_C('0', (`LH_N))))))))))))))))))))))))))))))))
//│ 		          else
//│ 		            (`Branch(_lh_prune_Branch_0_2, ((map_lh__d6 (prune_lh__d1 (_lh_prune_arg1_0 - 1))) _lh_prune_Branch_1_2))))
//│ 		        | _ -> 
//│ 		          (failwith "error")));;
//│ 		let rec insert_lh__d1 _lh_insert_arg1_0 _lh_insert_arg2_0 _lh_insert_arg3_0 =
//│ 		  (match _lh_insert_arg2_0 with
//│ 		    | `LH_C(_lh_insert_LH_C_0_0, _lh_insert_LH_C_1_0) -> 
//│ 		      (match _lh_insert_LH_C_1_0 with
//│ 		        | `LH_C(_lh_insert_LH_C_0_1, _lh_insert_LH_C_1_1) -> 
//│ 		          (match _lh_insert_LH_C_1_1 with
//│ 		            | `LH_C(_lh_insert_LH_C_0_2, _lh_insert_LH_C_1_2) -> 
//│ 		              (match _lh_insert_LH_C_1_2 with
//│ 		                | `LH_N -> 
//│ 		                  (match _lh_insert_arg3_0 with
//│ 		                    | 1 -> 
//│ 		                      (`LH_C(_lh_insert_arg1_0, (`LH_C(_lh_insert_LH_C_0_1, (`LH_C(_lh_insert_LH_C_0_2, (`LH_N)))))))
//│ 		                    | 2 -> 
//│ 		                      (`LH_C(_lh_insert_LH_C_0_0, (`LH_C(_lh_insert_arg1_0, (`LH_C(_lh_insert_LH_C_0_2, (`LH_N)))))))
//│ 		                    | 3 -> 
//│ 		                      (`LH_C(_lh_insert_LH_C_0_0, (`LH_C(_lh_insert_LH_C_0_1, (`LH_C(_lh_insert_arg1_0, (`LH_N)))))))
//│ 		                    | _ -> 
//│ 		                      (failwith "error"))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))
//│ 		            | _ -> 
//│ 		              (failwith "error"))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec empty'_lh__d1 _lh_empty'_arg1_0 _lh_empty'_arg2_0 =
//│ 		  (match _lh_empty'_arg1_0 with
//│ 		    | 1 -> 
//│ 		      (match _lh_empty'_arg2_0 with
//│ 		        | `LH_C(_lh_empty'_LH_C_0_0, _lh_empty'_LH_C_1_0) -> 
//│ 		          (match _lh_empty'_LH_C_0_0 with
//│ 		            | `Empty -> 
//│ 		              (match _lh_empty'_LH_C_1_0 with
//│ 		                | `LH_C(_lh_empty'_LH_C_0_1, _lh_empty'_LH_C_1_1) -> 
//│ 		                  (match _lh_empty'_LH_C_1_1 with
//│ 		                    | `LH_C(_lh_empty'_LH_C_0_2, _lh_empty'_LH_C_1_2) -> 
//│ 		                      (match _lh_empty'_LH_C_1_2 with
//│ 		                        | `LH_N -> 
//│ 		                          true
//│ 		                        | _ -> 
//│ 		                          false)
//│ 		                    | _ -> 
//│ 		                      false)
//│ 		                | _ -> 
//│ 		                  false)
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | 2 -> 
//│ 		      (match _lh_empty'_arg2_0 with
//│ 		        | `LH_C(_lh_empty'_LH_C_0_3, _lh_empty'_LH_C_1_3) -> 
//│ 		          (match _lh_empty'_LH_C_1_3 with
//│ 		            | `LH_C(_lh_empty'_LH_C_0_4, _lh_empty'_LH_C_1_4) -> 
//│ 		              (match _lh_empty'_LH_C_0_4 with
//│ 		                | `Empty -> 
//│ 		                  (match _lh_empty'_LH_C_1_4 with
//│ 		                    | `LH_C(_lh_empty'_LH_C_0_5, _lh_empty'_LH_C_1_5) -> 
//│ 		                      (match _lh_empty'_LH_C_1_5 with
//│ 		                        | `LH_N -> 
//│ 		                          true
//│ 		                        | _ -> 
//│ 		                          false)
//│ 		                    | _ -> 
//│ 		                      false)
//│ 		                | _ -> 
//│ 		                  false)
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | 3 -> 
//│ 		      (match _lh_empty'_arg2_0 with
//│ 		        | `LH_C(_lh_empty'_LH_C_0_6, _lh_empty'_LH_C_1_6) -> 
//│ 		          (match _lh_empty'_LH_C_1_6 with
//│ 		            | `LH_C(_lh_empty'_LH_C_0_7, _lh_empty'_LH_C_1_7) -> 
//│ 		              (match _lh_empty'_LH_C_1_7 with
//│ 		                | `LH_C(_lh_empty'_LH_C_0_8, _lh_empty'_LH_C_1_8) -> 
//│ 		                  (match _lh_empty'_LH_C_0_8 with
//│ 		                    | `Empty -> 
//│ 		                      (match _lh_empty'_LH_C_1_8 with
//│ 		                        | `LH_N -> 
//│ 		                          true
//│ 		                        | _ -> 
//│ 		                          false)
//│ 		                    | _ -> 
//│ 		                      false)
//│ 		                | _ -> 
//│ 		                  false)
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec empty_lh__d1 _lh_empty_arg1_0 _lh_empty_arg2_0 =
//│ 		  (match _lh_empty_arg1_0 with
//│ 		    | `LH_P2(_lh_empty_LH_P2_0_0, _lh_empty_LH_P2_1_0) -> 
//│ 		      (match _lh_empty_LH_P2_0_0 with
//│ 		        | 1 -> 
//│ 		          (match _lh_empty_arg2_0 with
//│ 		            | `LH_C(_lh_empty_LH_C_0_0, _lh_empty_LH_C_1_0) -> 
//│ 		              (match _lh_empty_LH_C_1_0 with
//│ 		                | `LH_C(_lh_empty_LH_C_0_1, _lh_empty_LH_C_1_1) -> 
//│ 		                  (match _lh_empty_LH_C_1_1 with
//│ 		                    | `LH_C(_lh_empty_LH_C_0_2, _lh_empty_LH_C_1_2) -> 
//│ 		                      (match _lh_empty_LH_C_1_2 with
//│ 		                        | `LH_N -> 
//│ 		                          ((empty'_lh__d1 _lh_empty_LH_P2_1_0) _lh_empty_LH_C_0_0)
//│ 		                        | _ -> 
//│ 		                          (failwith "error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "error"))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))
//│ 		            | _ -> 
//│ 		              (failwith "error"))
//│ 		        | 2 -> 
//│ 		          (match _lh_empty_arg2_0 with
//│ 		            | `LH_C(_lh_empty_LH_C_0_3, _lh_empty_LH_C_1_3) -> 
//│ 		              (match _lh_empty_LH_C_1_3 with
//│ 		                | `LH_C(_lh_empty_LH_C_0_4, _lh_empty_LH_C_1_4) -> 
//│ 		                  (match _lh_empty_LH_C_1_4 with
//│ 		                    | `LH_C(_lh_empty_LH_C_0_5, _lh_empty_LH_C_1_5) -> 
//│ 		                      (match _lh_empty_LH_C_1_5 with
//│ 		                        | `LH_N -> 
//│ 		                          ((empty'_lh__d1 _lh_empty_LH_P2_1_0) _lh_empty_LH_C_0_4)
//│ 		                        | _ -> 
//│ 		                          (failwith "error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "error"))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))
//│ 		            | _ -> 
//│ 		              (failwith "error"))
//│ 		        | 3 -> 
//│ 		          (match _lh_empty_arg2_0 with
//│ 		            | `LH_C(_lh_empty_LH_C_0_6, _lh_empty_LH_C_1_6) -> 
//│ 		              (match _lh_empty_LH_C_1_6 with
//│ 		                | `LH_C(_lh_empty_LH_C_0_7, _lh_empty_LH_C_1_7) -> 
//│ 		                  (match _lh_empty_LH_C_1_7 with
//│ 		                    | `LH_C(_lh_empty_LH_C_0_8, _lh_empty_LH_C_1_8) -> 
//│ 		                      (match _lh_empty_LH_C_1_8 with
//│ 		                        | `LH_N -> 
//│ 		                          ((empty'_lh__d1 _lh_empty_LH_P2_1_0) _lh_empty_LH_C_0_8)
//│ 		                        | _ -> 
//│ 		                          (failwith "error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "error"))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))
//│ 		            | _ -> 
//│ 		              (failwith "error"))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec placePiece_lh__d1 _lh_placePiece_arg1_0 _lh_placePiece_arg2_0 _lh_placePiece_arg3_0 =
//│ 		  (if (not ((empty_lh__d1 _lh_placePiece_arg3_0) _lh_placePiece_arg2_0)) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (let rec _lh_matchIdent_0 = _lh_placePiece_arg2_0 in
//│ 		      (match _lh_matchIdent_0 with
//│ 		        | `LH_C(_lh_placePiece_LH_C_0_0, _lh_placePiece_LH_C_1_0) -> 
//│ 		          (match _lh_placePiece_LH_C_1_0 with
//│ 		            | `LH_C(_lh_placePiece_LH_C_0_1, _lh_placePiece_LH_C_1_1) -> 
//│ 		              (match _lh_placePiece_LH_C_1_1 with
//│ 		                | `LH_C(_lh_placePiece_LH_C_0_2, _lh_placePiece_LH_C_1_2) -> 
//│ 		                  (match _lh_placePiece_LH_C_1_2 with
//│ 		                    | `LH_N -> 
//│ 		                      (let rec _lh_matchIdent_1 = _lh_placePiece_arg3_0 in
//│ 		                        (match _lh_matchIdent_1 with
//│ 		                          | `LH_P2(_lh_placePiece_LH_P2_0_0, _lh_placePiece_LH_P2_1_0) -> 
//│ 		                            (match _lh_placePiece_LH_P2_0_0 with
//│ 		                              | 1 -> 
//│ 		                                (`LH_C((`LH_C((((insert_lh__d1 _lh_placePiece_arg1_0) _lh_placePiece_LH_C_0_0) _lh_placePiece_LH_P2_1_0), (`LH_C(_lh_placePiece_LH_C_0_1, (`LH_C(_lh_placePiece_LH_C_0_2, (`LH_N))))))), (`LH_N)))
//│ 		                              | 2 -> 
//│ 		                                (`LH_C((`LH_C(_lh_placePiece_LH_C_0_0, (`LH_C((((insert_lh__d1 _lh_placePiece_arg1_0) _lh_placePiece_LH_C_0_1) _lh_placePiece_LH_P2_1_0), (`LH_C(_lh_placePiece_LH_C_0_2, (`LH_N))))))), (`LH_N)))
//│ 		                              | 3 -> 
//│ 		                                (`LH_C((`LH_C(_lh_placePiece_LH_C_0_0, (`LH_C(_lh_placePiece_LH_C_0_1, (`LH_C((((insert_lh__d1 _lh_placePiece_arg1_0) _lh_placePiece_LH_C_0_2) _lh_placePiece_LH_P2_1_0), (`LH_N))))))), (`LH_N)))
//│ 		                              | _ -> 
//│ 		                                (failwith "error"))
//│ 		                          | _ -> 
//│ 		                            (failwith "error")))
//│ 		                    | _ -> 
//│ 		                      (failwith "error"))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))
//│ 		            | _ -> 
//│ 		              (failwith "error"))
//│ 		        | _ -> 
//│ 		          (failwith "error"))));;
//│ 		let rec concat_lh__d3 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_1_3, t_1_3) -> 
//│ 		      ((mappend_lh__d2_d1 h_1_3) (concat_lh__d3 t_1_3))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec enumFromTo_lh__d2 a_1 b_0 =
//│ 		  (if (a_1 <= b_0) then
//│ 		    (`LH_C(a_1, ((enumFromTo_lh__d2 (a_1 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec enumFromTo_lh__d1 a_2 b_1 =
//│ 		  (if (a_2 <= b_1) then
//│ 		    (`LH_C(a_2, ((enumFromTo_lh__d1 (a_2 + 1)) b_1)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec map_lh__d5 f_2 ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_1_4, t_1_4) -> 
//│ 		      (`LH_C((f_2 h_1_4), ((map_lh__d5 f_2) t_1_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec newPositions_lh__d1 _lh_newPositions_arg1_0 _lh_newPositions_arg2_0 =
//│ 		  (concat_lh__d3 ((map_lh__d5 ((placePiece_lh__d1 _lh_newPositions_arg1_0) _lh_newPositions_arg2_0)) (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		    (match _lh_listcomp_fun_para_0 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		        (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		          (match _lh_listcomp_fun_para_1 with
//│ 		            | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		              (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_h_1)), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		            | `LH_N -> 
//│ 		              (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))) in
//│ 		          (_lh_listcomp_fun_1 ((enumFromTo_lh__d1 1) 3)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_0 ((enumFromTo_lh__d2 1) 3)))));;
//│ 		let rec opposite_lh__d1 _lh_opposite_arg1_0 =
//│ 		  (match _lh_opposite_arg1_0 with
//│ 		    | `X -> 
//│ 		      (`O)
//│ 		    | `O -> 
//│ 		      (`X)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec repTree_lh__d1 _lh_repTree_arg1_0 _lh_repTree_arg2_0 _lh_repTree_arg3_0 =
//│ 		  (`Branch(_lh_repTree_arg3_0, ((map_lh__d6 ((repTree_lh__d1 _lh_repTree_arg2_0) _lh_repTree_arg1_0)) (_lh_repTree_arg1_0 _lh_repTree_arg3_0))));;
//│ 		let rec searchTree_lh__d1 _lh_searchTree_arg1_0 _lh_searchTree_arg2_0 =
//│ 		  ((prune_lh__d1 5) (((repTree_lh__d1 (newPositions_lh__d1 _lh_searchTree_arg1_0)) (newPositions_lh__d1 (opposite_lh__d1 _lh_searchTree_arg1_0))) _lh_searchTree_arg2_0));;
//│ 		let rec foldr_lh__d1 f_0 i_0 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      ((f_0 h_1) (((foldr_lh__d1 f_0) i_0) t_1))
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec mise_lh__d1 _lh_mise_arg1_0 _lh_mise_arg2_0 _lh_mise_arg3_0 =
//│ 		  (match _lh_mise_arg3_0 with
//│ 		    | `Branch(_lh_mise_Branch_0_0, _lh_mise_Branch_1_0) -> 
//│ 		      (match _lh_mise_Branch_1_0 with
//│ 		        | `LH_N -> 
//│ 		          _lh_mise_Branch_0_0
//│ 		        | _ -> 
//│ 		          (((foldr_lh__d1 _lh_mise_arg1_0) ((_lh_mise_arg2_0 (`OWin)) (`XWin))) ((map_lh__d6 ((mise_lh__d1 _lh_mise_arg2_0) _lh_mise_arg1_0)) _lh_mise_Branch_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec win4_lh__d1 =
//│ 		  (`LH_C((`LH_C(1, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(1, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(1, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec win6_lh__d1 =
//│ 		  (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(1, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(1, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(1, (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec win7_lh__d1 =
//│ 		  (`LH_C((`LH_C(1, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(1, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(1, (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec win3_lh__d1 =
//│ 		  (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(1, (`LH_C(1, (`LH_C(1, (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec win2_lh__d1 =
//│ 		  (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(1, (`LH_C(1, (`LH_C(1, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec win8_lh__d1 =
//│ 		  (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(1, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(1, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(1, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec win1_lh__d1 =
//│ 		  (`LH_C((`LH_C(1, (`LH_C(1, (`LH_C(1, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec win5_lh__d1 =
//│ 		  (`LH_C((`LH_C(0, (`LH_C(1, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(1, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(1, (`LH_C(0, (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec wins_lh__d2 =
//│ 		  (`LH_C(win1_lh__d1, (`LH_C(win2_lh__d1, (`LH_C(win3_lh__d1, (`LH_C(win4_lh__d1, (`LH_C(win5_lh__d1, (`LH_C(win6_lh__d1, (`LH_C(win7_lh__d1, (`LH_C(win8_lh__d1, (`LH_N)))))))))))))))));;
//│ 		let rec eval_lh__d1 _lh_eval_arg1_0 =
//│ 		  (if (_lh_eval_arg1_0 = 3) then
//│ 		    (`XWin)
//│ 		  else
//│ 		    (if (_lh_eval_arg1_0 = (0 - 3)) then
//│ 		      (`OWin)
//│ 		    else
//│ 		      (`Score(_lh_eval_arg1_0))));;
//│ 		let rec scorePiece_lh__d1 _lh_scorePiece_arg1_0 _lh_scorePiece_arg2_0 =
//│ 		  (match _lh_scorePiece_arg1_0 with
//│ 		    | `X -> 
//│ 		      _lh_scorePiece_arg2_0
//│ 		    | `Empty -> 
//│ 		      0
//│ 		    | `O -> 
//│ 		      (0 - _lh_scorePiece_arg2_0)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec map2_lh__d1 _lh_map2_arg1_0 _lh_map2_arg2_0 _lh_map2_arg3_0 =
//│ 		  (match _lh_map2_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | _ -> 
//│ 		      (match _lh_map2_arg3_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_N)
//│ 		        | _ -> 
//│ 		          (match _lh_map2_arg2_0 with
//│ 		            | `LH_C(_lh_map2_LH_C_0_0, _lh_map2_LH_C_1_0) -> 
//│ 		              (match _lh_map2_arg3_0 with
//│ 		                | `LH_C(_lh_map2_LH_C_0_1, _lh_map2_LH_C_1_1) -> 
//│ 		                  (`LH_C(((_lh_map2_arg1_0 _lh_map2_LH_C_0_0) _lh_map2_LH_C_0_1), (((map2_lh__d1 _lh_map2_arg1_0) _lh_map2_LH_C_1_0) _lh_map2_LH_C_1_1)))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))
//│ 		            | _ -> 
//│ 		              (failwith "error"))));;
//│ 		let rec sumAux_lh__d1 ls_0 a_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_N -> 
//│ 		      a_0
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      ((sumAux_lh__d1 t_0) (a_0 + h_0)));;
//│ 		let rec sum_lh__d1 ls_2 =
//│ 		  ((sumAux_lh__d1 ls_2) 0);;
//│ 		let rec score_lh__d2 _lh_score_arg1_0 _lh_score_arg2_0 =
//│ 		  (eval_lh__d1 (sum_lh__d1 ((map_lh__d6 sum_lh__d1) (((map2_lh__d1 (map2_lh__d1 scorePiece_lh__d1)) _lh_score_arg1_0) _lh_score_arg2_0))));;
//│ 		let rec interpret_lh__d2 _lh_interpret_arg1_0 _lh_interpret_arg2_0 =
//│ 		  (match _lh_interpret_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`Score(_lh_interpret_arg1_0))
//│ 		    | `LH_C(_lh_interpret_LH_C_0_0, _lh_interpret_LH_C_1_0) -> 
//│ 		      (match _lh_interpret_LH_C_0_0 with
//│ 		        | `Score(_lh_interpret_Score_0_0) -> 
//│ 		          ((interpret_lh__d2 (_lh_interpret_arg1_0 + _lh_interpret_Score_0_0)) _lh_interpret_LH_C_1_0)
//│ 		        | `XWin -> 
//│ 		          (`XWin)
//│ 		        | `OWin -> 
//│ 		          (`OWin)
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec static_lh__d3 _lh_static_arg1_0 =
//│ 		  ((interpret_lh__d2 0) ((map_lh__d6 (score_lh__d2 _lh_static_arg1_0)) wins_lh__d2));;
//│ 		let rec mapTree_lh__d1 _lh_mapTree_arg1_0 _lh_mapTree_arg2_0 =
//│ 		  (match _lh_mapTree_arg2_0 with
//│ 		    | `Branch(_lh_mapTree_Branch_0_0, _lh_mapTree_Branch_1_0) -> 
//│ 		      (`Branch((_lh_mapTree_arg1_0 _lh_mapTree_Branch_0_0), ((map_lh__d6 (mapTree_lh__d1 _lh_mapTree_arg1_0)) _lh_mapTree_Branch_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec bestMove_lh__d1 _lh_bestMove_arg1_0 _lh_bestMove_arg2_0 _lh_bestMove_arg3_0 _lh_funcomp_x_0 =
//│ 		  ((fun _lh_funcomp_x_1 -> 
//│ 		    (((mise_lh__d1 _lh_bestMove_arg2_0) _lh_bestMove_arg3_0) (cropTree_lh__d1 _lh_funcomp_x_1))) ((fun _lh_funcomp_x_2 -> 
//│ 		    ((mapTree_lh__d1 static_lh__d3) ((searchTree_lh__d1 _lh_bestMove_arg1_0) _lh_funcomp_x_2))) _lh_funcomp_x_0));;
//│ 		let rec interpret_lh__d1 _lh_interpret_arg1_1 _lh_interpret_arg2_1 =
//│ 		  (match _lh_interpret_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      (`Score(_lh_interpret_arg1_1))
//│ 		    | `LH_C(_lh_interpret_LH_C_0_1, _lh_interpret_LH_C_1_1) -> 
//│ 		      (match _lh_interpret_LH_C_0_1 with
//│ 		        | `Score(_lh_interpret_Score_0_1) -> 
//│ 		          ((interpret_lh__d1 (_lh_interpret_arg1_1 + _lh_interpret_Score_0_1)) _lh_interpret_LH_C_1_1)
//│ 		        | `XWin -> 
//│ 		          (`XWin)
//│ 		        | `OWin -> 
//│ 		          (`OWin)
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec score_lh__d1 _lh_score_arg1_1 _lh_score_arg2_1 =
//│ 		  (eval_lh__d1 (sum_lh__d1 ((map_lh__d6 sum_lh__d1) (((map2_lh__d1 (map2_lh__d1 scorePiece_lh__d1)) _lh_score_arg1_1) _lh_score_arg2_1))));;
//│ 		let rec wins_lh__d1 =
//│ 		  (`LH_C(win1_lh__d1, (`LH_C(win2_lh__d1, (`LH_C(win3_lh__d1, (`LH_C(win4_lh__d1, (`LH_C(win5_lh__d1, (`LH_C(win6_lh__d1, (`LH_C(win7_lh__d1, (`LH_C(win8_lh__d1, (`LH_N)))))))))))))))));;
//│ 		let rec map_lh__d3 f_4 ls_6 =
//│ 		  (match ls_6 with
//│ 		    | `LH_C(h_1_7, t_1_7) -> 
//│ 		      (`LH_C((f_4 h_1_7), ((map_lh__d3 f_4) t_1_7)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec static_lh__d1 _lh_static_arg1_2 =
//│ 		  ((interpret_lh__d1 0) ((map_lh__d3 (score_lh__d1 _lh_static_arg1_2)) wins_lh__d1));;
//│ 		let rec map_lh__d2 f_5 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_2_4, t_2_4) -> 
//│ 		      (`LH_C((f_5 h_2_4), ((map_lh__d2 f_5) t_2_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec and_lh__d1 _lh_and_arg1_0 =
//│ 		  (match _lh_and_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_and_LH_C_0_0, _lh_and_LH_C_1_0) -> 
//│ 		      (if _lh_and_LH_C_0_0 then
//│ 		        (and_lh__d1 _lh_and_LH_C_1_0)
//│ 		      else
//│ 		        false)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec concat_lh__d2 lss_1 =
//│ 		  (match lss_1 with
//│ 		    | `LH_C(h_1_5, t_1_5) -> 
//│ 		      ((mappend_lh__d2_d1 h_1_5) (concat_lh__d2 t_1_5))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d4 f_3 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_1_6, t_1_6) -> 
//│ 		      (`LH_C((f_3 h_1_6), ((map_lh__d4 f_3) t_1_6)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec fullBoard_lh__d1 _lh_fullBoard_arg1_0 =
//│ 		  (and_lh__d1 ((map_lh__d4 (fun x_0 -> 
//│ 		    (not (x_0 = (`Empty))))) (concat_lh__d2 _lh_fullBoard_arg1_0)));;
//│ 		let rec best_lh__d1 _lh_best_arg1_0 _lh_best_arg2_0 _lh_best_arg3_0 =
//│ 		  (match _lh_best_arg2_0 with
//│ 		    | `LH_C(_lh_best_LH_C_0_0, _lh_best_LH_C_1_0) -> 
//│ 		      (match _lh_best_arg3_0 with
//│ 		        | `LH_C(_lh_best_LH_C_0_1, _lh_best_LH_C_1_1) -> 
//│ 		          (let rec best'_0 = (fun b_2 s_0 ls1_0 ls2_0 -> 
//│ 		            (let rec _lh_matchIdent_2 = ls1_0 in
//│ 		              (match _lh_matchIdent_2 with
//│ 		                | `LH_N -> 
//│ 		                  (let rec _lh_matchIdent_3 = ls2_0 in
//│ 		                    (match _lh_matchIdent_3 with
//│ 		                      | `LH_N -> 
//│ 		                        (`LH_P2(b_2, s_0))
//│ 		                      | _ -> 
//│ 		                        (failwith "error")))
//│ 		                | `LH_C(_lh_best_LH_C_0_2, _lh_best_LH_C_1_2) -> 
//│ 		                  (let rec _lh_matchIdent_4 = ls2_0 in
//│ 		                    (match _lh_matchIdent_4 with
//│ 		                      | `LH_C(_lh_best_LH_C_0_3, _lh_best_LH_C_1_3) -> 
//│ 		                        (if (s_0 = ((_lh_best_arg1_0 s_0) _lh_best_LH_C_0_3)) then
//│ 		                          ((((best'_0 b_2) s_0) _lh_best_LH_C_1_2) _lh_best_LH_C_1_3)
//│ 		                        else
//│ 		                          ((((best'_0 _lh_best_LH_C_0_2) _lh_best_LH_C_0_3) _lh_best_LH_C_1_2) _lh_best_LH_C_1_3))
//│ 		                      | _ -> 
//│ 		                        (failwith "error")))
//│ 		                | _ -> 
//│ 		                  (failwith "error")))) in
//│ 		            ((((best'_0 _lh_best_LH_C_0_0) _lh_best_LH_C_0_1) _lh_best_LH_C_1_0) _lh_best_LH_C_1_1))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec static_lh__d2 _lh_static_arg1_1 =
//│ 		  ((interpret_lh__d2 0) ((map_lh__d6 (score_lh__d2 _lh_static_arg1_1)) wins_lh__d2));;
//│ 		let rec alternate_lh__d1 _lh_alternate_arg1_0 _lh_alternate_arg2_0 _lh_alternate_arg3_0 _lh_alternate_arg4_0 =
//│ 		  (if (fullBoard_lh__d1 _lh_alternate_arg4_0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (if ((static_lh__d1 _lh_alternate_arg4_0) = (`XWin)) then
//│ 		      (`LH_N)
//│ 		    else
//│ 		      (if ((static_lh__d2 _lh_alternate_arg4_0) = (`OWin)) then
//│ 		        (`LH_N)
//│ 		      else
//│ 		        (let rec opposition_0 = (opposite_lh__d1 _lh_alternate_arg1_0) in
//│ 		          (let rec possibles_0 = ((newPositions_lh__d1 _lh_alternate_arg1_0) _lh_alternate_arg4_0) in
//│ 		            (let rec scores_0 = ((map_lh__d2 (((bestMove_lh__d1 opposition_0) _lh_alternate_arg3_0) _lh_alternate_arg2_0)) possibles_0) in
//│ 		              (let rec boardd_eval_0 = (((best_lh__d1 _lh_alternate_arg2_0) possibles_0) scores_0) in
//│ 		                (let rec _lh_matchIdent_5 = boardd_eval_0 in
//│ 		                  (match _lh_matchIdent_5 with
//│ 		                    | `LH_P2(_lh_alternate_LH_P2_0_0, _lh_alternate_LH_P2_1_0) -> 
//│ 		                      (`LH_C((`LH_P2(_lh_alternate_LH_P2_0_0, _lh_alternate_LH_P2_1_0)), ((((alternate_lh__d1 opposition_0) _lh_alternate_arg3_0) _lh_alternate_arg2_0) _lh_alternate_LH_P2_0_0)))
//│ 		                    | _ -> 
//│ 		                      (failwith "error"))))))))));;
//│ 		let rec testBoard_lh__d5 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d1_d9 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d1 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d1_d2 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d4 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d8 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d4 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d1_d5 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d9 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d1_d8 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d3 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d1_d0 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec mappend_lh__d2 xs_1_9 ys_1_9 =
//│ 		  (match xs_1_9 with
//│ 		    | `LH_C(h_2_9, t_2_9) -> 
//│ 		      (`LH_C(h_2_9, ((mappend_lh__d2 t_2_9) ys_1_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_9);;
//│ 		let rec testBoard_lh__d1_d7 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d7 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d0 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec max'_lh__d1 _lh_max'_arg1_0 _lh_max'_arg2_0 =
//│ 		  (match _lh_max'_arg1_0 with
//│ 		    | `XWin -> 
//│ 		      (`XWin)
//│ 		    | _ -> 
//│ 		      (match _lh_max'_arg2_0 with
//│ 		        | `XWin -> 
//│ 		          (`XWin)
//│ 		        | _ -> 
//│ 		          (match _lh_max'_arg2_0 with
//│ 		            | `OWin -> 
//│ 		              _lh_max'_arg1_0
//│ 		            | _ -> 
//│ 		              (match _lh_max'_arg1_0 with
//│ 		                | `OWin -> 
//│ 		                  _lh_max'_arg2_0
//│ 		                | _ -> 
//│ 		                  (match _lh_max'_arg1_0 with
//│ 		                    | `Score(_lh_max'_Score_0_0) -> 
//│ 		                      (match _lh_max'_arg2_0 with
//│ 		                        | `Score(_lh_max'_Score_0_1) -> 
//│ 		                          (if (_lh_max'_Score_0_0 > _lh_max'_Score_0_1) then
//│ 		                            (`Score(_lh_max'_Score_0_0))
//│ 		                          else
//│ 		                            (`Score(_lh_max'_Score_0_1)))
//│ 		                        | _ -> 
//│ 		                          (failwith "error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "error"))))));;
//│ 		let rec map_lh__d1 f_6 ls_8 =
//│ 		  (match ls_8 with
//│ 		    | `LH_C(h_2_8, t_2_8) -> 
//│ 		      (`LH_C((f_6 h_2_8), ((map_lh__d1 f_6) t_2_8)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec testBoard_lh__d2_d1 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d7 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec min'_lh__d1 _lh_min'_arg1_0 _lh_min'_arg2_0 =
//│ 		  (match _lh_min'_arg1_0 with
//│ 		    | `OWin -> 
//│ 		      (`OWin)
//│ 		    | _ -> 
//│ 		      (match _lh_min'_arg2_0 with
//│ 		        | `OWin -> 
//│ 		          (`OWin)
//│ 		        | _ -> 
//│ 		          (match _lh_min'_arg2_0 with
//│ 		            | `XWin -> 
//│ 		              _lh_min'_arg1_0
//│ 		            | _ -> 
//│ 		              (match _lh_min'_arg1_0 with
//│ 		                | `XWin -> 
//│ 		                  _lh_min'_arg2_0
//│ 		                | _ -> 
//│ 		                  (match _lh_min'_arg1_0 with
//│ 		                    | `Score(_lh_min'_Score_0_0) -> 
//│ 		                      (match _lh_min'_arg2_0 with
//│ 		                        | `Score(_lh_min'_Score_0_1) -> 
//│ 		                          (if (_lh_min'_Score_0_0 < _lh_min'_Score_0_1) then
//│ 		                            (`Score(_lh_min'_Score_0_0))
//│ 		                          else
//│ 		                            (`Score(_lh_min'_Score_0_1)))
//│ 		                        | _ -> 
//│ 		                          (failwith "error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "error"))))));;
//│ 		let rec testBoard_lh__d1_d4 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d2 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d1_d6 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec mappend_lh__d5 xs_1_6 ys_1_6 =
//│ 		  (match xs_1_6 with
//│ 		    | `LH_C(h_2_5, t_2_5) -> 
//│ 		      (`LH_C(h_2_5, ((mappend_lh__d5 t_2_5) ys_1_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_6);;
//│ 		let rec concat_lh__d1 lss_2 =
//│ 		  (match lss_2 with
//│ 		    | `LH_C(h_3_1, t_3_1) -> 
//│ 		      ((mappend_lh__d5 h_3_1) (concat_lh__d1 t_3_1))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec testBoard_lh__d3 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d9 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec prog_lh__d1 _lh_prog_arg1_0 =
//│ 		  (let rec board_0 = (fun _lh_board_arg1_0 -> 
//│ 		    (match _lh_board_arg1_0 with
//│ 		      | `LH_C(_lh_board_LH_C_0_0, _lh_board_LH_C_1_0) -> 
//│ 		        (match _lh_board_LH_C_0_0 with
//│ 		          | 'd' -> 
//│ 		            (match _lh_board_LH_C_1_0 with
//│ 		              | `LH_C(_lh_board_LH_C_0_1, _lh_board_LH_C_1_1) -> 
//│ 		                (match _lh_board_LH_C_0_1 with
//│ 		                  | 'o' -> 
//│ 		                    (match _lh_board_LH_C_1_1 with
//│ 		                      | `LH_C(_lh_board_LH_C_0_2, _lh_board_LH_C_1_2) -> 
//│ 		                        (match _lh_board_LH_C_0_2 with
//│ 		                          | 'e' -> 
//│ 		                            (match _lh_board_LH_C_1_2 with
//│ 		                              | `LH_C(_lh_board_LH_C_0_3, _lh_board_LH_C_1_3) -> 
//│ 		                                (match _lh_board_LH_C_0_3 with
//│ 		                                  | 's' -> 
//│ 		                                    (match _lh_board_LH_C_1_3 with
//│ 		                                      | `LH_C(_lh_board_LH_C_0_4, _lh_board_LH_C_1_4) -> 
//│ 		                                        (match _lh_board_LH_C_0_4 with
//│ 		                                          | 'n' -> 
//│ 		                                            (match _lh_board_LH_C_1_4 with
//│ 		                                              | `LH_C(_lh_board_LH_C_0_5, _lh_board_LH_C_1_5) -> 
//│ 		                                                (match _lh_board_LH_C_0_5 with
//│ 		                                                  | 't' -> 
//│ 		                                                    (match _lh_board_LH_C_1_5 with
//│ 		                                                      | `LH_C(_lh_board_LH_C_0_6, _lh_board_LH_C_1_6) -> 
//│ 		                                                        (match _lh_board_LH_C_0_6 with
//│ 		                                                          | ' ' -> 
//│ 		                                                            (match _lh_board_LH_C_1_6 with
//│ 		                                                              | `LH_C(_lh_board_LH_C_0_7, _lh_board_LH_C_1_7) -> 
//│ 		                                                                (match _lh_board_LH_C_0_7 with
//│ 		                                                                  | 'h' -> 
//│ 		                                                                    (match _lh_board_LH_C_1_7 with
//│ 		                                                                      | `LH_C(_lh_board_LH_C_0_8, _lh_board_LH_C_1_8) -> 
//│ 		                                                                        (match _lh_board_LH_C_0_8 with
//│ 		                                                                          | 'a' -> 
//│ 		                                                                            (match _lh_board_LH_C_1_8 with
//│ 		                                                                              | `LH_C(_lh_board_LH_C_0_9, _lh_board_LH_C_1_9) -> 
//│ 		                                                                                (match _lh_board_LH_C_0_9 with
//│ 		                                                                                  | 'p' -> 
//│ 		                                                                                    (match _lh_board_LH_C_1_9 with
//│ 		                                                                                      | `LH_C(_lh_board_LH_C_0_1_0, _lh_board_LH_C_1_1_0) -> 
//│ 		                                                                                        (match _lh_board_LH_C_0_1_0 with
//│ 		                                                                                          | 'p' -> 
//│ 		                                                                                            (match _lh_board_LH_C_1_1_0 with
//│ 		                                                                                              | `LH_C(_lh_board_LH_C_0_1_1, _lh_board_LH_C_1_1_1) -> 
//│ 		                                                                                                (match _lh_board_LH_C_0_1_1 with
//│ 		                                                                                                  | 'e' -> 
//│ 		                                                                                                    (match _lh_board_LH_C_1_1_1 with
//│ 		                                                                                                      | `LH_C(_lh_board_LH_C_0_1_2, _lh_board_LH_C_1_1_2) -> 
//│ 		                                                                                                        (match _lh_board_LH_C_0_1_2 with
//│ 		                                                                                                          | 'n' -> 
//│ 		                                                                                                            (match _lh_board_LH_C_1_1_2 with
//│ 		                                                                                                              | `LH_N -> 
//│ 		                                                                                                                ((mappend_lh__d2 testBoard_lh__d2_d7) testBoard_lh__d1_d2)
//│ 		                                                                                                              | _ -> 
//│ 		                                                                                                                testBoard_lh__d1_d6)
//│ 		                                                                                                          | _ -> 
//│ 		                                                                                                            testBoard_lh__d2_d3)
//│ 		                                                                                                      | _ -> 
//│ 		                                                                                                        testBoard_lh__d3)
//│ 		                                                                                                  | _ -> 
//│ 		                                                                                                    testBoard_lh__d2_d2)
//│ 		                                                                                              | _ -> 
//│ 		                                                                                                testBoard_lh__d1_d4)
//│ 		                                                                                          | _ -> 
//│ 		                                                                                            testBoard_lh__d6)
//│ 		                                                                                      | _ -> 
//│ 		                                                                                        testBoard_lh__d2_d1)
//│ 		                                                                                  | _ -> 
//│ 		                                                                                    testBoard_lh__d1_d1)
//│ 		                                                                              | _ -> 
//│ 		                                                                                testBoard_lh__d2_d4)
//│ 		                                                                          | _ -> 
//│ 		                                                                            testBoard_lh__d1)
//│ 		                                                                      | _ -> 
//│ 		                                                                        testBoard_lh__d9)
//│ 		                                                                  | _ -> 
//│ 		                                                                    testBoard_lh__d2_d5)
//│ 		                                                              | _ -> 
//│ 		                                                                testBoard_lh__d1_d5)
//│ 		                                                          | _ -> 
//│ 		                                                            testBoard_lh__d8)
//│ 		                                                      | _ -> 
//│ 		                                                        testBoard_lh__d1_d0)
//│ 		                                                  | _ -> 
//│ 		                                                    testBoard_lh__d2_d0)
//│ 		                                              | _ -> 
//│ 		                                                testBoard_lh__d1_d8)
//│ 		                                          | _ -> 
//│ 		                                            testBoard_lh__d2_d9)
//│ 		                                      | _ -> 
//│ 		                                        testBoard_lh__d2_d6)
//│ 		                                  | _ -> 
//│ 		                                    testBoard_lh__d2_d8)
//│ 		                              | _ -> 
//│ 		                                testBoard_lh__d7)
//│ 		                          | _ -> 
//│ 		                            testBoard_lh__d5)
//│ 		                      | _ -> 
//│ 		                        testBoard_lh__d2)
//│ 		                  | _ -> 
//│ 		                    testBoard_lh__d1_d9)
//│ 		              | _ -> 
//│ 		                testBoard_lh__d1_d7)
//│ 		          | _ -> 
//│ 		            testBoard_lh__d4)
//│ 		      | _ -> 
//│ 		        testBoard_lh__d1_d3)) in
//│ 		    (let rec game_0 = ((((alternate_lh__d1 (`X)) max'_lh__d1) min'_lh__d1) (board_0 _lh_prog_arg1_0)) in
//│ 		      ((mappend_lh__d1 (`LH_C('O', (`LH_C('X', (`LH_C('O', (`LH_C('|', (`LH_N)))))))))) (concat_lh__d1 ((map_lh__d1 showMove_lh__d1) game_0)))));;
//│ 		let rec length_lh__d1 ls_9 =
//│ 		  (match ls_9 with
//│ 		    | `LH_C(h_3_2, t_3_2) -> 
//│ 		      (1 + (length_lh__d1 t_3_2))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec testMinimax_nofib_lh__d1 _lh_testMinimax_nofib_arg1_0 =
//│ 		  (length_lh__d1 (prog_lh__d1 _lh_testMinimax_nofib_arg1_0));;
//│ 		(testMinimax_nofib_lh__d1 (`LH_C('1', (`LH_C('8', (`LH_C('0', (`LH_C('0', (`LH_C('0', (`LH_C('0', (`LH_N))))))))))))))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion strategies >>>>>>>
//│ [LH_N]: 650 --->
//│ 	case xs¹³ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₈(t²¹, ys¹³)] | LH_N  => ys¹³}: 1326
//│ [LH_C 'X' [LH_N]]: 651 --->
//│ 	case xs¹³ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₈(t²¹, ys¹³)] | LH_N  => ys¹³}: 1326
//│ [LH_N]: 653 --->
//│ 	case xs¹³ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₈(t²¹, ys¹³)] | LH_N  => ys¹³}: 1326
//│ [LH_C 'O' [LH_N]]: 654 --->
//│ 	case xs¹³ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₈(t²¹, ys¹³)] | LH_N  => ys¹³}: 1326
//│ [LH_N]: 656 --->
//│ 	case xs¹³ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₈(t²¹, ys¹³)] | LH_N  => ys¹³}: 1326
//│ [LH_C ' ' [LH_N]]: 657 --->
//│ 	case xs¹³ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₈(t²¹, ys¹³)] | LH_N  => ys¹³}: 1326
//│ [LH_N]: 663 --->
//│ 	case xs² of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₁₉(t⁴, ys²)] | LH_N  => ys²}: 696
//│ [LH_C 'X' [LH_N]]: 664 --->
//│ 	case xs² of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₁₉(t⁴, ys²)] | LH_N  => ys²}: 696
//│ [LH_N]: 666 --->
//│ 	case xs² of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₁₉(t⁴, ys²)] | LH_N  => ys²}: 696
//│ [LH_C 'O' [LH_N]]: 667 --->
//│ 	case xs² of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₁₉(t⁴, ys²)] | LH_N  => ys²}: 696
//│ [LH_N]: 669 --->
//│ 	case xs² of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₁₉(t⁴, ys²)] | LH_N  => ys²}: 696
//│ [LH_C ' ' [LH_N]]: 670 --->
//│ 	case xs² of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₁₉(t⁴, ys²)] | LH_N  => ys²}: 696
//│ [LH_N]: 676 --->
//│ 	case xs⁴ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁₇(t⁶, ys⁴)] | LH_N  => ys⁴}: 720
//│ [LH_C 'X' [LH_N]]: 677 --->
//│ 	case xs⁴ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁₇(t⁶, ys⁴)] | LH_N  => ys⁴}: 720
//│ [LH_N]: 679 --->
//│ 	case xs⁴ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁₇(t⁶, ys⁴)] | LH_N  => ys⁴}: 720
//│ [LH_C 'O' [LH_N]]: 680 --->
//│ 	case xs⁴ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁₇(t⁶, ys⁴)] | LH_N  => ys⁴}: 720
//│ [LH_N]: 682 --->
//│ 	case xs⁴ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁₇(t⁶, ys⁴)] | LH_N  => ys⁴}: 720
//│ [LH_C ' ' [LH_N]]: 683 --->
//│ 	case xs⁴ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁₇(t⁶, ys⁴)] | LH_N  => ys⁴}: 720
//│ [LH_C h⁴ mappend_lh_₁₉(t⁴, ys²)]: 694 --->
//│ 	case xs⁵ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₆(t⁷, ys⁵)] | LH_N  => ys⁵}: 732
//│ [LH_C h⁵ mappend_lh_₁₈(t⁵, ys³)]: 706 --->
//│ 	case xs¹³ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₈(t²¹, ys¹³)] | LH_N  => ys¹³}: 1326
//│ [LH_C h⁶ mappend_lh_₁₇(t⁶, ys⁴)]: 718 --->
//│ 	case xs³ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₈(t⁵, ys³)] | LH_N  => ys³}: 708
//│ [LH_C h⁷ mappend_lh_₁₆(t⁷, ys⁵)]: 730 --->
//│ 	case xs⁴ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁₇(t⁶, ys⁴)] | LH_N  => ys⁴}: 720
//│ [LH_N]: 737 --->
//│ 	case xs¹⁵ of {LH_C h²³ t²³ => [LH_C h²³ mappend_lh_₆(t²³, ys¹⁵)] | LH_N  => ys¹⁵}: 1430
//│ [LH_C 'X' [LH_N]]: 738 --->
//│ 	case xs¹⁵ of {LH_C h²³ t²³ => [LH_C h²³ mappend_lh_₆(t²³, ys¹⁵)] | LH_N  => ys¹⁵}: 1430
//│ [LH_N]: 740 --->
//│ 	case xs¹⁵ of {LH_C h²³ t²³ => [LH_C h²³ mappend_lh_₆(t²³, ys¹⁵)] | LH_N  => ys¹⁵}: 1430
//│ [LH_C 'O' [LH_N]]: 741 --->
//│ 	case xs¹⁵ of {LH_C h²³ t²³ => [LH_C h²³ mappend_lh_₆(t²³, ys¹⁵)] | LH_N  => ys¹⁵}: 1430
//│ [LH_N]: 743 --->
//│ 	case xs¹⁵ of {LH_C h²³ t²³ => [LH_C h²³ mappend_lh_₆(t²³, ys¹⁵)] | LH_N  => ys¹⁵}: 1430
//│ [LH_C ' ' [LH_N]]: 744 --->
//│ 	case xs¹⁵ of {LH_C h²³ t²³ => [LH_C h²³ mappend_lh_₆(t²³, ys¹⁵)] | LH_N  => ys¹⁵}: 1430
//│ [LH_C h⁸ mappend_lh_₁₅(t⁸, ys⁶)]: 755 --->
//│ 	case xs⁸ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₃(t¹⁰, ys⁸)] | LH_N  => ys⁸}: 781
//│ [LH_C h⁹ mappend_lh_₁₄(t⁹, ys⁷)]: 767 --->
//│ 	case xs⁶ of {LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₁₅(t⁸, ys⁶)] | LH_N  => ys⁶}: 757
//│ [LH_C h¹⁰ mappend_lh_₁₃(t¹⁰, ys⁸)]: 779 --->
//│ 	case xs⁹ of {LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₁₂(t¹¹, ys⁹)] | LH_N  => ys⁹}: 819
//│ [LH_N]: 786 --->
//│ 	case xs⁸ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₃(t¹⁰, ys⁸)] | LH_N  => ys⁸}: 781
//│ [LH_C 'X' [LH_N]]: 787 --->
//│ 	case xs⁸ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₃(t¹⁰, ys⁸)] | LH_N  => ys⁸}: 781
//│ [LH_N]: 789 --->
//│ 	case xs⁸ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₃(t¹⁰, ys⁸)] | LH_N  => ys⁸}: 781
//│ [LH_C 'O' [LH_N]]: 790 --->
//│ 	case xs⁸ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₃(t¹⁰, ys⁸)] | LH_N  => ys⁸}: 781
//│ [LH_N]: 792 --->
//│ 	case xs⁸ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₃(t¹⁰, ys⁸)] | LH_N  => ys⁸}: 781
//│ [LH_C ' ' [LH_N]]: 793 --->
//│ 	case xs⁸ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₃(t¹⁰, ys⁸)] | LH_N  => ys⁸}: 781
//│ [LH_N]: 799 --->
//│ 	case xs⁷ of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄(t⁹, ys⁷)] | LH_N  => ys⁷}: 769
//│ [LH_C 'X' [LH_N]]: 800 --->
//│ 	case xs⁷ of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄(t⁹, ys⁷)] | LH_N  => ys⁷}: 769
//│ [LH_N]: 802 --->
//│ 	case xs⁷ of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄(t⁹, ys⁷)] | LH_N  => ys⁷}: 769
//│ [LH_C 'O' [LH_N]]: 803 --->
//│ 	case xs⁷ of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄(t⁹, ys⁷)] | LH_N  => ys⁷}: 769
//│ [LH_N]: 805 --->
//│ 	case xs⁷ of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄(t⁹, ys⁷)] | LH_N  => ys⁷}: 769
//│ [LH_C ' ' [LH_N]]: 806 --->
//│ 	case xs⁷ of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄(t⁹, ys⁷)] | LH_N  => ys⁷}: 769
//│ [LH_C h¹¹ mappend_lh_₁₂(t¹¹, ys⁹)]: 817 --->
//│ 	case xs¹⁵ of {LH_C h²³ t²³ => [LH_C h²³ mappend_lh_₆(t²³, ys¹⁵)] | LH_N  => ys¹⁵}: 1430
//│ [LH_C a¹ enumFromTo_lh_₂((a¹ + 1), b⁰)]: 908 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh_₁(1, 3)) | LH_N  => [LH_N]}: 1482
//│ [LH_N]: 909 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh_₁(1, 3)) | LH_N  => [LH_N]}: 1482
//│ [LH_C a² enumFromTo_lh_₁((a² + 1), b¹)]: 928 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 1471
//│ [LH_N]: 929 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 1471
//│ [LH_C f²(h¹⁴) map_lh_₅(f², t¹⁴)]: 1032 --->
//│ 	case lss⁰ of {LH_C h¹³ t¹³ => mappend_lh_₂₁(h¹³, concat_lh_₃(t¹³)) | LH_N  => [LH_N]}: 1021
//│ [LH_N]: 1033 --->
//│ 	case lss⁰ of {LH_C h¹³ t¹³ => mappend_lh_₂₁(h¹³, concat_lh_₃(t¹³)) | LH_N  => [LH_N]}: 1021
//│ [LH_C f³(h¹⁶) map_lh_₄(f³, t¹⁶)]: 1068 --->
//│ 	case _lh_and_arg1⁰ of {LH_N  => [True] | LH_C _lh_and_LH_C_0⁰ _lh_and_LH_C_1⁰ => if _lh_and_LH_C_0⁰ then and_lh_₁(_lh_and_LH_C_1⁰) else [False] | _  => error⁰}: 1046
//│ [LH_N]: 1069 --->
//│ 	case _lh_and_arg1⁰ of {LH_N  => [True] | LH_C _lh_and_LH_C_0⁰ _lh_and_LH_C_1⁰ => if _lh_and_LH_C_0⁰ then and_lh_₁(_lh_and_LH_C_1⁰) else [False] | _  => error⁰}: 1046
//│ [LH_C f⁴(h¹⁷) map_lh_₃(f⁴, t¹⁷)]: 1198 --->
//│ 	case _lh_interpret_arg2¹ of {LH_N  => [Score _lh_interpret_arg1¹] | LH_C _lh_interpret_LH_C_0¹ _lh_interpret_LH_C_1¹ => case _lh_interpret_LH_C_0¹ of {Score _lh_interpret_Score_0¹ => interpret_lh_₁((_lh_interpret_arg1¹ + _lh_interpret_Score_0¹), _lh_interpret_LH_C_1¹) | XWin  => [XWin] | OWin  => [OWin] | _  => error⁰} | _  => error⁰}: 1238
//│ [LH_N]: 1199 --->
//│ 	case _lh_interpret_arg2¹ of {LH_N  => [Score _lh_interpret_arg1¹] | LH_C _lh_interpret_LH_C_0¹ _lh_interpret_LH_C_1¹ => case _lh_interpret_LH_C_0¹ of {Score _lh_interpret_Score_0¹ => interpret_lh_₁((_lh_interpret_arg1¹ + _lh_interpret_Score_0¹), _lh_interpret_LH_C_1¹) | XWin  => [XWin] | OWin  => [OWin] | _  => error⁰} | _  => error⁰}: 1238
//│ [LH_N]: 1211 --->
//│ 	case ls⁶ of {LH_C h¹⁷ t¹⁷ => [LH_C f⁴(h¹⁷) map_lh_₃(f⁴, t¹⁷)] | LH_N  => [LH_N]}: 1200
//│ [LH_C win8_lh_₁ [LH_N]]: 1212 --->
//│ 	case ls⁶ of {LH_C h¹⁷ t¹⁷ => [LH_C f⁴(h¹⁷) map_lh_₃(f⁴, t¹⁷)] | LH_N  => [LH_N]}: 1200
//│ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]: 1213 --->
//│ 	case ls⁶ of {LH_C h¹⁷ t¹⁷ => [LH_C f⁴(h¹⁷) map_lh_₃(f⁴, t¹⁷)] | LH_N  => [LH_N]}: 1200
//│ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]: 1214 --->
//│ 	case ls⁶ of {LH_C h¹⁷ t¹⁷ => [LH_C f⁴(h¹⁷) map_lh_₃(f⁴, t¹⁷)] | LH_N  => [LH_N]}: 1200
//│ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]: 1215 --->
//│ 	case ls⁶ of {LH_C h¹⁷ t¹⁷ => [LH_C f⁴(h¹⁷) map_lh_₃(f⁴, t¹⁷)] | LH_N  => [LH_N]}: 1200
//│ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]: 1216 --->
//│ 	case ls⁶ of {LH_C h¹⁷ t¹⁷ => [LH_C f⁴(h¹⁷) map_lh_₃(f⁴, t¹⁷)] | LH_N  => [LH_N]}: 1200
//│ [LH_C win3_lh_₁ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]]: 1217 --->
//│ 	case ls⁶ of {LH_C h¹⁷ t¹⁷ => [LH_C f⁴(h¹⁷) map_lh_₃(f⁴, t¹⁷)] | LH_N  => [LH_N]}: 1200
//│ [LH_C win2_lh_₁ [LH_C win3_lh_₁ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]]]: 1218 --->
//│ 	case ls⁶ of {LH_C h¹⁷ t¹⁷ => [LH_C f⁴(h¹⁷) map_lh_₃(f⁴, t¹⁷)] | LH_N  => [LH_N]}: 1200
//│ [LH_C win1_lh_₁ [LH_C win2_lh_₁ [LH_C win3_lh_₁ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]]]]: 1219 --->
//│ 	case ls⁶ of {LH_C h¹⁷ t¹⁷ => [LH_C f⁴(h¹⁷) map_lh_₃(f⁴, t¹⁷)] | LH_N  => [LH_N]}: 1200
//│ [LH_C h¹⁹ mappend_lh_₁₀(t¹⁹, ys¹¹)]: 1260 --->
//│ 	case xs¹² of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₉(t²⁰, ys¹²)] | LH_N  => ys¹²}: 1274
//│ [LH_C h²⁰ mappend_lh_₉(t²⁰, ys¹²)]: 1272 --->
//│ 	case xs¹³ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₈(t²¹, ys¹³)] | LH_N  => ys¹³}: 1326
//│ [LH_C h²¹ mappend_lh_₈(t²¹, ys¹³)]: 1324 --->
//│ 	case xs¹⁴ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₇(t²², ys¹⁴)] | LH_N  => ys¹⁴}: 1418
//│ [LH_N]: 1342 --->
//│ 	case xs⁵ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₆(t⁷, ys⁵)] | LH_N  => ys⁵}: 732
//│ [LH_C '|' [LH_N]]: 1343 --->
//│ 	case xs⁵ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₆(t⁷, ys⁵)] | LH_N  => ys⁵}: 732
//│ [LH_N]: 1352 --->
//│ 	case xs³ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₈(t⁵, ys³)] | LH_N  => ys³}: 708
//│ [LH_C '|' [LH_N]]: 1353 --->
//│ 	case xs³ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₈(t⁵, ys³)] | LH_N  => ys³}: 708
//│ [LH_N]: 1382 --->
//│ 	case xs⁶ of {LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₁₅(t⁸, ys⁶)] | LH_N  => ys⁶}: 757
//│ [LH_C '|' [LH_N]]: 1383 --->
//│ 	case xs⁶ of {LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₁₅(t⁸, ys⁶)] | LH_N  => ys⁶}: 757
//│ [LH_N]: 1392 --->
//│ 	case xs⁹ of {LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₁₂(t¹¹, ys⁹)] | LH_N  => ys⁹}: 819
//│ [LH_C '|' [LH_N]]: 1393 --->
//│ 	case xs⁹ of {LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₁₂(t¹¹, ys⁹)] | LH_N  => ys⁹}: 819
//│ [LH_C h²² mappend_lh_₇(t²², ys¹⁴)]: 1416 --->
//│ 	case xs¹⁵ of {LH_C h²³ t²³ => [LH_C h²³ mappend_lh_₆(t²³, ys¹⁵)] | LH_N  => ys¹⁵}: 1430
//│ [LH_C h²³ mappend_lh_₆(t²³, ys¹⁵)]: 1428 --->
//│ 	case xs¹⁶ of {LH_C h²⁵ t²⁵ => [LH_C h²⁵ mappend_lh_₅(t²⁵, ys¹⁶)] | LH_N  => ys¹⁶}: 1644
//│ [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 1467 --->
//│ 	case ls⁴ of {LH_C h¹⁴ t¹⁴ => [LH_C f²(h¹⁴) map_lh_₅(f², t¹⁴)] | LH_N  => [LH_N]}: 1034
//│ [LH_N]: 1481 --->
//│ 	case ls⁴ of {LH_C h¹⁴ t¹⁴ => [LH_C f²(h¹⁴) map_lh_₅(f², t¹⁴)] | LH_N  => [LH_N]}: 1034
//│ [LH_P2 b² s⁰]: 1504 --->
//│ 	case _lh_matchIdent⁵ of {LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰ => [LH_C [LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰] alternate_lh_₁(opposition⁰, _lh_alternate_arg3⁰, _lh_alternate_arg2⁰, _lh_alternate_LH_P2_0⁰)] | _  => error⁰}: 2172
//│ [LH_C h²⁵ mappend_lh_₅(t²⁵, ys¹⁶)]: 1642 --->
//│ 	case ls⁹ of {LH_C h³² t³² => (1 + length_lh_₁(t³²)) | LH_N  => 0}: 2723
//│ [LH_C h²⁶ mappend_lh_₄(t²⁶, ys¹⁷)]: 1654 --->
//│ 	case xs¹⁸ of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₃(t²⁷, ys¹⁸)] | LH_N  => ys¹⁸}: 1707
//│ [LH_N]: 1684 --->
//│ 	case xs¹⁰ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys¹⁰)] | LH_N  => ys¹⁰}: 1250
//│ [LH_C 'e' [LH_N]]: 1685 --->
//│ 	case xs¹⁰ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys¹⁰)] | LH_N  => ys¹⁰}: 1250
//│ [LH_C 'r' [LH_C 'e' [LH_N]]]: 1686 --->
//│ 	case xs¹⁰ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys¹⁰)] | LH_N  => ys¹⁰}: 1250
//│ [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_N]]]]: 1687 --->
//│ 	case xs¹⁰ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys¹⁰)] | LH_N  => ys¹⁰}: 1250
//│ [LH_C 'c' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_N]]]]]: 1688 --->
//│ 	case xs¹⁰ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys¹⁰)] | LH_N  => ys¹⁰}: 1250
//│ [LH_C 'S' [LH_C 'c' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_N]]]]]]: 1689 --->
//│ 	case xs¹⁰ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys¹⁰)] | LH_N  => ys¹⁰}: 1250
//│ [LH_C h²⁷ mappend_lh_₃(t²⁷, ys¹⁸)]: 1705 --->
//│ 	case xs¹⁶ of {LH_C h²⁵ t²⁵ => [LH_C h²⁵ mappend_lh_₅(t²⁵, ys¹⁶)] | LH_N  => ys¹⁶}: 1644
//│ [LH_N]: 1731 --->
//│ 	case xs¹² of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₉(t²⁰, ys¹²)] | LH_N  => ys¹²}: 1274
//│ [LH_C '|' [LH_N]]: 1732 --->
//│ 	case xs¹² of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₉(t²⁰, ys¹²)] | LH_N  => ys¹²}: 1274
//│ [LH_C '-' [LH_C '|' [LH_N]]]: 1733 --->
//│ 	case xs¹² of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₉(t²⁰, ys¹²)] | LH_N  => ys¹²}: 1274
//│ [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]: 1734 --->
//│ 	case xs¹² of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₉(t²⁰, ys¹²)] | LH_N  => ys¹²}: 1274
//│ [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]: 1735 --->
//│ 	case xs¹² of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₉(t²⁰, ys¹²)] | LH_N  => ys¹²}: 1274
//│ [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]: 1736 --->
//│ 	case xs¹² of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₉(t²⁰, ys¹²)] | LH_N  => ys¹²}: 1274
//│ [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]: 1737 --->
//│ 	case xs¹² of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₉(t²⁰, ys¹²)] | LH_N  => ys¹²}: 1274
//│ [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]: 1738 --->
//│ 	case xs¹² of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₉(t²⁰, ys¹²)] | LH_N  => ys¹²}: 1274
//│ [LH_C '|' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]]: 1739 --->
//│ 	case xs¹² of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₉(t²⁰, ys¹²)] | LH_N  => ys¹²}: 1274
//│ [LH_N]: 1755 --->
//│ 	case xs¹⁴ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₇(t²², ys¹⁴)] | LH_N  => ys¹⁴}: 1418
//│ [LH_C '|' [LH_N]]: 1756 --->
//│ 	case xs¹⁴ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₇(t²², ys¹⁴)] | LH_N  => ys¹⁴}: 1418
//│ [LH_C '-' [LH_C '|' [LH_N]]]: 1757 --->
//│ 	case xs¹⁴ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₇(t²², ys¹⁴)] | LH_N  => ys¹⁴}: 1418
//│ [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]: 1758 --->
//│ 	case xs¹⁴ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₇(t²², ys¹⁴)] | LH_N  => ys¹⁴}: 1418
//│ [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]: 1759 --->
//│ 	case xs¹⁴ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₇(t²², ys¹⁴)] | LH_N  => ys¹⁴}: 1418
//│ [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]: 1760 --->
//│ 	case xs¹⁴ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₇(t²², ys¹⁴)] | LH_N  => ys¹⁴}: 1418
//│ [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]: 1761 --->
//│ 	case xs¹⁴ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₇(t²², ys¹⁴)] | LH_N  => ys¹⁴}: 1418
//│ [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]: 1762 --->
//│ 	case xs¹⁴ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₇(t²², ys¹⁴)] | LH_N  => ys¹⁴}: 1418
//│ [LH_C '|' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]]: 1763 --->
//│ 	case xs¹⁴ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₇(t²², ys¹⁴)] | LH_N  => ys¹⁴}: 1418
//│ [LH_N]: 1773 --->
//│ 	case xs¹⁶ of {LH_C h²⁵ t²⁵ => [LH_C h²⁵ mappend_lh_₅(t²⁵, ys¹⁶)] | LH_N  => ys¹⁶}: 1644
//│ [LH_C '|' [LH_N]]: 1774 --->
//│ 	case xs¹⁶ of {LH_C h²⁵ t²⁵ => [LH_C h²⁵ mappend_lh_₅(t²⁵, ys¹⁶)] | LH_N  => ys¹⁶}: 1644
//│ [LH_C '|' [LH_C '|' [LH_N]]]: 1775 --->
//│ 	case xs¹⁶ of {LH_C h²⁵ t²⁵ => [LH_C h²⁵ mappend_lh_₅(t²⁵, ys¹⁶)] | LH_N  => ys¹⁶}: 1644
//│ [LH_N]: 1857 --->
//│ 	case xs¹⁹ of {LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₂(t²⁹, ys¹⁹)] | LH_N  => ys¹⁹}: 2219
//│ [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]: 1858 --->
//│ 	case xs¹⁹ of {LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₂(t²⁹, ys¹⁹)] | LH_N  => ys¹⁹}: 2219
//│ [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]: 1859 --->
//│ 	case xs¹⁹ of {LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₂(t²⁹, ys¹⁹)] | LH_N  => ys¹⁹}: 2219
//│ [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]: 1860 --->
//│ 	case xs¹⁹ of {LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₂(t²⁹, ys¹⁹)] | LH_N  => ys¹⁹}: 2219
//│ [LH_C f⁶(h²⁸) map_lh_₁(f⁶, t²⁸)]: 1995 --->
//│ 	case lss² of {LH_C h³¹ t³¹ => mappend_lh_₅(h³¹, concat_lh_₁(t³¹)) | LH_N  => [LH_N]}: 2318
//│ [LH_N]: 1996 --->
//│ 	case lss² of {LH_C h³¹ t³¹ => mappend_lh_₅(h³¹, concat_lh_₁(t³¹)) | LH_N  => [LH_N]}: 2318
//│ [LH_N]: 2113 --->
//│ 	case ls⁸ of {LH_C h²⁸ t²⁸ => [LH_C f⁶(h²⁸) map_lh_₁(f⁶, t²⁸)] | LH_N  => [LH_N]}: 1997
//│ [LH_N]: 2121 --->
//│ 	case ls⁸ of {LH_C h²⁸ t²⁸ => [LH_C f⁶(h²⁸) map_lh_₁(f⁶, t²⁸)] | LH_N  => [LH_N]}: 1997
//│ [LH_N]: 2129 --->
//│ 	case ls⁸ of {LH_C h²⁸ t²⁸ => [LH_C f⁶(h²⁸) map_lh_₁(f⁶, t²⁸)] | LH_N  => [LH_N]}: 1997
//│ [LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰]: 2160 --->
//│ 	case _lh_showMove_arg1⁰ of {LH_P2 _lh_showMove_LH_P2_0⁰ _lh_showMove_LH_P2_1⁰ => mappend_lh_₃(mappend_lh_₄(showEvaluation_lh_₁(_lh_showMove_LH_P2_1⁰), [LH_C '|' [LH_N]]), showBoard_lh_₁(_lh_showMove_LH_P2_0⁰)) | _  => error⁰}: 2712
//│ [LH_C [LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰] alternate_lh_₁(opposition⁰, _lh_alternate_arg3⁰, _lh_alternate_arg2⁰, _lh_alternate_LH_P2_0⁰)]: 2170 --->
//│ 	case ls⁸ of {LH_C h²⁸ t²⁸ => [LH_C f⁶(h²⁸) map_lh_₁(f⁶, t²⁸)] | LH_N  => [LH_N]}: 1997
//│ [LH_C h³⁰ mappend_lh_₁(t³⁰, ys²⁰)]: 2279 --->
//│ 	case ls⁹ of {LH_C h³² t³² => (1 + length_lh_₁(t³²)) | LH_N  => 0}: 2723
//│ [LH_N]: 2317 --->
//│ 	case ls⁹ of {LH_C h³² t³² => (1 + length_lh_₁(t³²)) | LH_N  => 0}: 2723
//│ [LH_N]: 2703 --->
//│ 	case xs¹⁸ of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₃(t²⁷, ys¹⁸)] | LH_N  => ys¹⁸}: 1707
//│ [LH_C '|' [LH_N]]: 2704 --->
//│ 	case xs¹⁸ of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₃(t²⁷, ys¹⁸)] | LH_N  => ys¹⁸}: 1707
//│ [LH_N]: 2828 --->
//│ 	case xs²⁰ of {LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₁(t³⁰, ys²⁰)] | LH_N  => ys²⁰}: 2281
//│ [LH_C '|' [LH_N]]: 2829 --->
//│ 	case xs²⁰ of {LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₁(t³⁰, ys²⁰)] | LH_N  => ys²⁰}: 2281
//│ [LH_C 'O' [LH_C '|' [LH_N]]]: 2830 --->
//│ 	case xs²⁰ of {LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₁(t³⁰, ys²⁰)] | LH_N  => ys²⁰}: 2281
//│ [LH_C 'X' [LH_C 'O' [LH_C '|' [LH_N]]]]: 2831 --->
//│ 	case xs²⁰ of {LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₁(t³⁰, ys²⁰)] | LH_N  => ys²⁰}: 2281
//│ [LH_C 'O' [LH_C 'X' [LH_C 'O' [LH_C '|' [LH_N]]]]]: 2832 --->
//│ 	case xs²⁰ of {LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₁(t³⁰, ys²⁰)] | LH_N  => ys²⁰}: 2281
//│ ------------------
//│ case xs² of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₁₉(t⁴, ys²)] | LH_N  => ys²}: 696 --->
//│ 	[LH_N]: 663
//│ 	[LH_C 'X' [LH_N]]: 664
//│ 	[LH_N]: 666
//│ 	[LH_C 'O' [LH_N]]: 667
//│ 	[LH_N]: 669
//│ 	[LH_C ' ' [LH_N]]: 670
//│ case xs³ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₈(t⁵, ys³)] | LH_N  => ys³}: 708 --->
//│ 	[LH_C h⁶ mappend_lh_₁₇(t⁶, ys⁴)]: 718
//│ 	[LH_N]: 1352
//│ 	[LH_C '|' [LH_N]]: 1353
//│ case xs⁴ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁₇(t⁶, ys⁴)] | LH_N  => ys⁴}: 720 --->
//│ 	[LH_N]: 676
//│ 	[LH_C 'X' [LH_N]]: 677
//│ 	[LH_N]: 679
//│ 	[LH_C 'O' [LH_N]]: 680
//│ 	[LH_N]: 682
//│ 	[LH_C ' ' [LH_N]]: 683
//│ 	[LH_C h⁷ mappend_lh_₁₆(t⁷, ys⁵)]: 730
//│ case xs⁵ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₆(t⁷, ys⁵)] | LH_N  => ys⁵}: 732 --->
//│ 	[LH_C h⁴ mappend_lh_₁₉(t⁴, ys²)]: 694
//│ 	[LH_N]: 1342
//│ 	[LH_C '|' [LH_N]]: 1343
//│ case xs⁶ of {LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₁₅(t⁸, ys⁶)] | LH_N  => ys⁶}: 757 --->
//│ 	[LH_C h⁹ mappend_lh_₁₄(t⁹, ys⁷)]: 767
//│ 	[LH_N]: 1382
//│ 	[LH_C '|' [LH_N]]: 1383
//│ case xs⁷ of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄(t⁹, ys⁷)] | LH_N  => ys⁷}: 769 --->
//│ 	[LH_N]: 799
//│ 	[LH_C 'X' [LH_N]]: 800
//│ 	[LH_N]: 802
//│ 	[LH_C 'O' [LH_N]]: 803
//│ 	[LH_N]: 805
//│ 	[LH_C ' ' [LH_N]]: 806
//│ case xs⁸ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₃(t¹⁰, ys⁸)] | LH_N  => ys⁸}: 781 --->
//│ 	[LH_C h⁸ mappend_lh_₁₅(t⁸, ys⁶)]: 755
//│ 	[LH_N]: 786
//│ 	[LH_C 'X' [LH_N]]: 787
//│ 	[LH_N]: 789
//│ 	[LH_C 'O' [LH_N]]: 790
//│ 	[LH_N]: 792
//│ 	[LH_C ' ' [LH_N]]: 793
//│ case xs⁹ of {LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₁₂(t¹¹, ys⁹)] | LH_N  => ys⁹}: 819 --->
//│ 	[LH_C h¹⁰ mappend_lh_₁₃(t¹⁰, ys⁸)]: 779
//│ 	[LH_N]: 1392
//│ 	[LH_C '|' [LH_N]]: 1393
//│ case lss⁰ of {LH_C h¹³ t¹³ => mappend_lh_₂₁(h¹³, concat_lh_₃(t¹³)) | LH_N  => [LH_N]}: 1021 --->
//│ 	[LH_C f²(h¹⁴) map_lh_₅(f², t¹⁴)]: 1032
//│ 	[LH_N]: 1033
//│ case ls⁴ of {LH_C h¹⁴ t¹⁴ => [LH_C f²(h¹⁴) map_lh_₅(f², t¹⁴)] | LH_N  => [LH_N]}: 1034 --->
//│ 	[LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 1467
//│ 	[LH_N]: 1481
//│ case _lh_and_arg1⁰ of {LH_N  => [True] | LH_C _lh_and_LH_C_0⁰ _lh_and_LH_C_1⁰ => if _lh_and_LH_C_0⁰ then and_lh_₁(_lh_and_LH_C_1⁰) else [False] | _  => error⁰}: 1046 --->
//│ 	[LH_C f³(h¹⁶) map_lh_₄(f³, t¹⁶)]: 1068
//│ 	[LH_N]: 1069
//│ case ls⁶ of {LH_C h¹⁷ t¹⁷ => [LH_C f⁴(h¹⁷) map_lh_₃(f⁴, t¹⁷)] | LH_N  => [LH_N]}: 1200 --->
//│ 	[LH_N]: 1211
//│ 	[LH_C win8_lh_₁ [LH_N]]: 1212
//│ 	[LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]: 1213
//│ 	[LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]: 1214
//│ 	[LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]: 1215
//│ 	[LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]: 1216
//│ 	[LH_C win3_lh_₁ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]]: 1217
//│ 	[LH_C win2_lh_₁ [LH_C win3_lh_₁ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]]]: 1218
//│ 	[LH_C win1_lh_₁ [LH_C win2_lh_₁ [LH_C win3_lh_₁ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]]]]: 1219
//│ case _lh_interpret_arg2¹ of {LH_N  => [Score _lh_interpret_arg1¹] | LH_C _lh_interpret_LH_C_0¹ _lh_interpret_LH_C_1¹ => case _lh_interpret_LH_C_0¹ of {Score _lh_interpret_Score_0¹ => interpret_lh_₁((_lh_interpret_arg1¹ + _lh_interpret_Score_0¹), _lh_interpret_LH_C_1¹) | XWin  => [XWin] | OWin  => [OWin] | _  => error⁰} | _  => error⁰}: 1238 --->
//│ 	[LH_C f⁴(h¹⁷) map_lh_₃(f⁴, t¹⁷)]: 1198
//│ 	[LH_N]: 1199
//│ case xs¹⁰ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys¹⁰)] | LH_N  => ys¹⁰}: 1250 --->
//│ 	[LH_N]: 1684
//│ 	[LH_C 'e' [LH_N]]: 1685
//│ 	[LH_C 'r' [LH_C 'e' [LH_N]]]: 1686
//│ 	[LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_N]]]]: 1687
//│ 	[LH_C 'c' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_N]]]]]: 1688
//│ 	[LH_C 'S' [LH_C 'c' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_N]]]]]]: 1689
//│ case xs¹² of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₉(t²⁰, ys¹²)] | LH_N  => ys¹²}: 1274 --->
//│ 	[LH_C h¹⁹ mappend_lh_₁₀(t¹⁹, ys¹¹)]: 1260
//│ 	[LH_N]: 1731
//│ 	[LH_C '|' [LH_N]]: 1732
//│ 	[LH_C '-' [LH_C '|' [LH_N]]]: 1733
//│ 	[LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]: 1734
//│ 	[LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]: 1735
//│ 	[LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]: 1736
//│ 	[LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]: 1737
//│ 	[LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]: 1738
//│ 	[LH_C '|' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]]: 1739
//│ case xs¹³ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₈(t²¹, ys¹³)] | LH_N  => ys¹³}: 1326 --->
//│ 	[LH_N]: 650
//│ 	[LH_C 'X' [LH_N]]: 651
//│ 	[LH_N]: 653
//│ 	[LH_C 'O' [LH_N]]: 654
//│ 	[LH_N]: 656
//│ 	[LH_C ' ' [LH_N]]: 657
//│ 	[LH_C h⁵ mappend_lh_₁₈(t⁵, ys³)]: 706
//│ 	[LH_C h²⁰ mappend_lh_₉(t²⁰, ys¹²)]: 1272
//│ case xs¹⁴ of {LH_C h²² t²² => [LH_C h²² mappend_lh_₇(t²², ys¹⁴)] | LH_N  => ys¹⁴}: 1418 --->
//│ 	[LH_C h²¹ mappend_lh_₈(t²¹, ys¹³)]: 1324
//│ 	[LH_N]: 1755
//│ 	[LH_C '|' [LH_N]]: 1756
//│ 	[LH_C '-' [LH_C '|' [LH_N]]]: 1757
//│ 	[LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]: 1758
//│ 	[LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]: 1759
//│ 	[LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]: 1760
//│ 	[LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]: 1761
//│ 	[LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]: 1762
//│ 	[LH_C '|' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]]: 1763
//│ case xs¹⁵ of {LH_C h²³ t²³ => [LH_C h²³ mappend_lh_₆(t²³, ys¹⁵)] | LH_N  => ys¹⁵}: 1430 --->
//│ 	[LH_N]: 737
//│ 	[LH_C 'X' [LH_N]]: 738
//│ 	[LH_N]: 740
//│ 	[LH_C 'O' [LH_N]]: 741
//│ 	[LH_N]: 743
//│ 	[LH_C ' ' [LH_N]]: 744
//│ 	[LH_C h¹¹ mappend_lh_₁₂(t¹¹, ys⁹)]: 817
//│ 	[LH_C h²² mappend_lh_₇(t²², ys¹⁴)]: 1416
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 1471 --->
//│ 	[LH_C a² enumFromTo_lh_₁((a² + 1), b¹)]: 928
//│ 	[LH_N]: 929
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh_₁(1, 3)) | LH_N  => [LH_N]}: 1482 --->
//│ 	[LH_C a¹ enumFromTo_lh_₂((a¹ + 1), b⁰)]: 908
//│ 	[LH_N]: 909
//│ case xs¹⁶ of {LH_C h²⁵ t²⁵ => [LH_C h²⁵ mappend_lh_₅(t²⁵, ys¹⁶)] | LH_N  => ys¹⁶}: 1644 --->
//│ 	[LH_C h²³ mappend_lh_₆(t²³, ys¹⁵)]: 1428
//│ 	[LH_C h²⁷ mappend_lh_₃(t²⁷, ys¹⁸)]: 1705
//│ 	[LH_N]: 1773
//│ 	[LH_C '|' [LH_N]]: 1774
//│ 	[LH_C '|' [LH_C '|' [LH_N]]]: 1775
//│ case xs¹⁸ of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₃(t²⁷, ys¹⁸)] | LH_N  => ys¹⁸}: 1707 --->
//│ 	[LH_C h²⁶ mappend_lh_₄(t²⁶, ys¹⁷)]: 1654
//│ 	[LH_N]: 2703
//│ 	[LH_C '|' [LH_N]]: 2704
//│ case ls⁸ of {LH_C h²⁸ t²⁸ => [LH_C f⁶(h²⁸) map_lh_₁(f⁶, t²⁸)] | LH_N  => [LH_N]}: 1997 --->
//│ 	[LH_N]: 2113
//│ 	[LH_N]: 2121
//│ 	[LH_N]: 2129
//│ 	[LH_C [LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰] alternate_lh_₁(opposition⁰, _lh_alternate_arg3⁰, _lh_alternate_arg2⁰, _lh_alternate_LH_P2_0⁰)]: 2170
//│ case _lh_matchIdent⁵ of {LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰ => [LH_C [LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰] alternate_lh_₁(opposition⁰, _lh_alternate_arg3⁰, _lh_alternate_arg2⁰, _lh_alternate_LH_P2_0⁰)] | _  => error⁰}: 2172 --->
//│ 	[LH_P2 b² s⁰]: 1504
//│ case xs¹⁹ of {LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₂(t²⁹, ys¹⁹)] | LH_N  => ys¹⁹}: 2219 --->
//│ 	[LH_N]: 1857
//│ 	[LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]: 1858
//│ 	[LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]: 1859
//│ 	[LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]: 1860
//│ case xs²⁰ of {LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₁(t³⁰, ys²⁰)] | LH_N  => ys²⁰}: 2281 --->
//│ 	[LH_N]: 2828
//│ 	[LH_C '|' [LH_N]]: 2829
//│ 	[LH_C 'O' [LH_C '|' [LH_N]]]: 2830
//│ 	[LH_C 'X' [LH_C 'O' [LH_C '|' [LH_N]]]]: 2831
//│ 	[LH_C 'O' [LH_C 'X' [LH_C 'O' [LH_C '|' [LH_N]]]]]: 2832
//│ case lss² of {LH_C h³¹ t³¹ => mappend_lh_₅(h³¹, concat_lh_₁(t³¹)) | LH_N  => [LH_N]}: 2318 --->
//│ 	[LH_C f⁶(h²⁸) map_lh_₁(f⁶, t²⁸)]: 1995
//│ 	[LH_N]: 1996
//│ case _lh_showMove_arg1⁰ of {LH_P2 _lh_showMove_LH_P2_0⁰ _lh_showMove_LH_P2_1⁰ => mappend_lh_₃(mappend_lh_₄(showEvaluation_lh_₁(_lh_showMove_LH_P2_1⁰), [LH_C '|' [LH_N]]), showBoard_lh_₁(_lh_showMove_LH_P2_0⁰)) | _  => error⁰}: 2712 --->
//│ 	[LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰]: 2160
//│ case ls⁹ of {LH_C h³² t³² => (1 + length_lh_₁(t³²)) | LH_N  => 0}: 2723 --->
//│ 	[LH_C h²⁵ mappend_lh_₅(t²⁵, ys¹⁶)]: 1642
//│ 	[LH_C h³⁰ mappend_lh_₁(t³⁰, ys²⁰)]: 2279
//│ 	[LH_N]: 2317
//│ <<<<<<< fusion strategies <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMinimax_nofib_lh_₁(primId⁰([LH_C '1' [LH_C '8' [LH_C '0' [LH_C '0' [LH_C '0' [LH_C '0' [LH_N]]]]]]]))
//│ def alternate_lh_₁(_lh_alternate_arg1⁰, _lh_alternate_arg2¹, _lh_alternate_arg3¹, _lh_alternate_arg4⁰) = if fullBoard_lh_₁(_lh_alternate_arg4⁰) then (fun f¹⁰ -> (fun _lh_dummy⁵³ -> (fun _lh_dummy⁵⁴ -> 0))) else if polyEq⁰(static_lh_₁(_lh_alternate_arg4⁰), [XWin]) then (fun f¹¹ -> (fun _lh_dummy⁵⁵ -> (fun _lh_dummy⁵⁶ -> 0))) else if polyEq⁰(static_lh_₂(_lh_alternate_arg4⁰), [OWin]) then (fun f¹² -> (fun _lh_dummy⁵⁷ -> (fun _lh_dummy⁵⁸ -> 0))) else 
//│ 	let opposition¹ = opposite_lh_₁(_lh_alternate_arg1⁰)
//│ 	in let possibles⁰ = newPositions_lh_₁(_lh_alternate_arg1⁰, _lh_alternate_arg4⁰)
//│ 	in let scores⁰ = map_lh_₂(bestMove_lh_₁(opposition¹, _lh_alternate_arg3¹, _lh_alternate_arg2¹), possibles⁰)
//│ 	in let boardd_eval⁰ = best_lh_₁(_lh_alternate_arg2¹, possibles⁰, scores⁰)
//│ 	in let _lh_matchIdent⁵ = boardd_eval⁰
//│ 	in _lh_matchIdent⁵(_lh_alternate_arg2¹, _lh_alternate_arg3¹, opposition¹)
//│ def and_lh_₁(_lh_and_arg1⁰) = _lh_and_arg1⁰(99)
//│ def bestMove_lh_₁(_lh_bestMove_arg1⁰, _lh_bestMove_arg2⁰, _lh_bestMove_arg3⁰, _lh_funcomp_x⁰) = (fun _lh_funcomp_x¹ -> mise_lh_₁(_lh_bestMove_arg2⁰, _lh_bestMove_arg3⁰, cropTree_lh_₁(_lh_funcomp_x¹)))((fun _lh_funcomp_x² -> mapTree_lh_₁(static_lh_₃, searchTree_lh_₁(_lh_bestMove_arg1⁰, _lh_funcomp_x²)))(_lh_funcomp_x⁰))
//│ def best_lh_₁(_lh_best_arg1⁰, _lh_best_arg2⁰, _lh_best_arg3⁰) = case _lh_best_arg2⁰ of {
//│ 	LH_C _lh_best_LH_C_0⁰ _lh_best_LH_C_1⁰ => case _lh_best_arg3⁰ of {
//│ 		LH_C _lh_best_LH_C_0¹ _lh_best_LH_C_1¹ => 
//│ 			let best'⁰ = (fun b² -> (fun s⁰ -> (fun ls1⁰ -> (fun ls2⁰ -> 
//│ 				let _lh_matchIdent² = ls1⁰
//│ 				in case _lh_matchIdent² of {
//│ 					LH_N  => 
//│ 						let _lh_matchIdent³ = ls2⁰
//│ 						in case _lh_matchIdent³ of {
//│ 							LH_N  => 
//│ 								let _lh_alternate_LH_P2_1⁰ = s⁰
//│ 								in let _lh_alternate_LH_P2_0⁰ = b²
//│ 								in (fun _lh_alternate_arg2⁰ -> (fun _lh_alternate_arg3⁰ -> (fun opposition⁰ -> 
//│ 									let t²⁵³ = alternate_lh_₁(opposition⁰, _lh_alternate_arg3⁰, _lh_alternate_arg2⁰, _lh_alternate_LH_P2_0⁰)
//│ 									in let h²⁵³ = 	
//│ 										let _lh_showMove_LH_P2_1⁰ = _lh_alternate_LH_P2_1⁰
//│ 										in let _lh_showMove_LH_P2_0⁰ = _lh_alternate_LH_P2_0⁰
//│ 										in (fun _lh_dummy⁵⁰ -> mappend_lh_₃(mappend_lh_₄(showEvaluation_lh_₁(_lh_showMove_LH_P2_1⁰), 
//│ 											let t²⁵⁴ = (fun ys²⁴² -> ys²⁴²)
//│ 											in let h²⁵⁴ = '|'
//│ 											in (fun ys²⁴³ -> 
//│ 												let t²⁵⁵ = mappend_lh_₃(t²⁵⁴, ys²⁴³)
//│ 												in let h²⁵⁵ = h²⁵⁴
//│ 												in (fun ys²⁴⁴ -> 
//│ 													let t²⁵⁶ = mappend_lh_₅(t²⁵⁵, ys²⁴⁴)
//│ 													in let h²⁵⁶ = h²⁵⁵
//│ 													in (fun _lh_dummy⁵¹ -> (1 + length_lh_₁(t²⁵⁶)))))), showBoard_lh_₁(_lh_showMove_LH_P2_0⁰)))
//│ 									in (fun f⁹ -> 
//│ 										let t²⁵⁷ = map_lh_₁(f⁹, t²⁵³)
//│ 										in let h²⁵⁷ = f⁹(h²⁵³)
//│ 										in (fun _lh_dummy⁵² -> mappend_lh_₅(h²⁵⁷, concat_lh_₁(t²⁵⁷)))))))
//│ 							| _  => error⁰}
//│ 					| LH_C _lh_best_LH_C_0² _lh_best_LH_C_1² => 
//│ 						let _lh_matchIdent⁴ = ls2⁰
//│ 						in case _lh_matchIdent⁴ of {
//│ 							LH_C _lh_best_LH_C_0³ _lh_best_LH_C_1³ => if polyEq⁰(s⁰, _lh_best_arg1⁰(s⁰, _lh_best_LH_C_0³)) then best'⁰(b², s⁰, _lh_best_LH_C_1², _lh_best_LH_C_1³) else best'⁰(_lh_best_LH_C_0², _lh_best_LH_C_0³, _lh_best_LH_C_1², _lh_best_LH_C_1³)
//│ 							| _  => error⁰}
//│ 					| _  => error⁰}))))
//│ 			in best'⁰(_lh_best_LH_C_0⁰, _lh_best_LH_C_0¹, _lh_best_LH_C_1⁰, _lh_best_LH_C_1¹)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def concat_lh_₁(lss²) = lss²(99)
//│ def concat_lh_₂(lss¹) = case lss¹ of {
//│ 	LH_C h³⁶ t³⁶ => mappend_lh_₂₁(h³⁶, concat_lh_₂(t³⁶))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₃(lss⁰) = lss⁰(99)
//│ def cropTree_lh_₁(_lh_cropTree_arg1⁰) = case _lh_cropTree_arg1⁰ of {
//│ 	Branch _lh_cropTree_Branch_0⁰ _lh_cropTree_Branch_1⁰ => case _lh_cropTree_Branch_1⁰ of {
//│ 		LH_N  => [Branch _lh_cropTree_Branch_0⁰ [LH_N]]
//│ 		| _  => case _lh_cropTree_Branch_0⁰ of {
//│ 			Score _lh_cropTree_Score_0⁰ => [Branch [Score _lh_cropTree_Score_0⁰] map_lh_₆(cropTree_lh_₁, _lh_cropTree_Branch_1⁰)]
//│ 			| _  => [Branch _lh_cropTree_Branch_0⁰ [LH_N]]}}
//│ 	| _  => error⁰}
//│ def empty'_lh_₁(_lh_empty'_arg1⁰, _lh_empty'_arg2⁰) = case _lh_empty'_arg1⁰ of {
//│ 	1  => case _lh_empty'_arg2⁰ of {
//│ 		LH_C _lh_empty'_LH_C_0⁰ _lh_empty'_LH_C_1⁰ => case _lh_empty'_LH_C_0⁰ of {
//│ 			Empty  => case _lh_empty'_LH_C_1⁰ of {
//│ 				LH_C _lh_empty'_LH_C_0¹ _lh_empty'_LH_C_1¹ => case _lh_empty'_LH_C_1¹ of {
//│ 					LH_C _lh_empty'_LH_C_0² _lh_empty'_LH_C_1² => case _lh_empty'_LH_C_1² of {
//│ 						LH_N  => [True]
//│ 						| _  => [False]}
//│ 					| _  => [False]}
//│ 				| _  => [False]}
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| 2  => case _lh_empty'_arg2⁰ of {
//│ 		LH_C _lh_empty'_LH_C_0³ _lh_empty'_LH_C_1³ => case _lh_empty'_LH_C_1³ of {
//│ 			LH_C _lh_empty'_LH_C_0⁴ _lh_empty'_LH_C_1⁴ => case _lh_empty'_LH_C_0⁴ of {
//│ 				Empty  => case _lh_empty'_LH_C_1⁴ of {
//│ 					LH_C _lh_empty'_LH_C_0⁵ _lh_empty'_LH_C_1⁵ => case _lh_empty'_LH_C_1⁵ of {
//│ 						LH_N  => [True]
//│ 						| _  => [False]}
//│ 					| _  => [False]}
//│ 				| _  => [False]}
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| 3  => case _lh_empty'_arg2⁰ of {
//│ 		LH_C _lh_empty'_LH_C_0⁶ _lh_empty'_LH_C_1⁶ => case _lh_empty'_LH_C_1⁶ of {
//│ 			LH_C _lh_empty'_LH_C_0⁷ _lh_empty'_LH_C_1⁷ => case _lh_empty'_LH_C_1⁷ of {
//│ 				LH_C _lh_empty'_LH_C_0⁸ _lh_empty'_LH_C_1⁸ => case _lh_empty'_LH_C_0⁸ of {
//│ 					Empty  => case _lh_empty'_LH_C_1⁸ of {
//│ 						LH_N  => [True]
//│ 						| _  => [False]}
//│ 					| _  => [False]}
//│ 				| _  => [False]}
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def empty_lh_₁(_lh_empty_arg1⁰, _lh_empty_arg2⁰) = case _lh_empty_arg1⁰ of {
//│ 	LH_P2 _lh_empty_LH_P2_0⁰ _lh_empty_LH_P2_1⁰ => case _lh_empty_LH_P2_0⁰ of {
//│ 		1  => case _lh_empty_arg2⁰ of {
//│ 			LH_C _lh_empty_LH_C_0⁰ _lh_empty_LH_C_1⁰ => case _lh_empty_LH_C_1⁰ of {
//│ 				LH_C _lh_empty_LH_C_0¹ _lh_empty_LH_C_1¹ => case _lh_empty_LH_C_1¹ of {
//│ 					LH_C _lh_empty_LH_C_0² _lh_empty_LH_C_1² => case _lh_empty_LH_C_1² of {
//│ 						LH_N  => empty'_lh_₁(_lh_empty_LH_P2_1⁰, _lh_empty_LH_C_0⁰)
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| 2  => case _lh_empty_arg2⁰ of {
//│ 			LH_C _lh_empty_LH_C_0³ _lh_empty_LH_C_1³ => case _lh_empty_LH_C_1³ of {
//│ 				LH_C _lh_empty_LH_C_0⁴ _lh_empty_LH_C_1⁴ => case _lh_empty_LH_C_1⁴ of {
//│ 					LH_C _lh_empty_LH_C_0⁵ _lh_empty_LH_C_1⁵ => case _lh_empty_LH_C_1⁵ of {
//│ 						LH_N  => empty'_lh_₁(_lh_empty_LH_P2_1⁰, _lh_empty_LH_C_0⁴)
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| 3  => case _lh_empty_arg2⁰ of {
//│ 			LH_C _lh_empty_LH_C_0⁶ _lh_empty_LH_C_1⁶ => case _lh_empty_LH_C_1⁶ of {
//│ 				LH_C _lh_empty_LH_C_0⁷ _lh_empty_LH_C_1⁷ => case _lh_empty_LH_C_1⁷ of {
//│ 					LH_C _lh_empty_LH_C_0⁸ _lh_empty_LH_C_1⁸ => case _lh_empty_LH_C_1⁸ of {
//│ 						LH_N  => empty'_lh_₁(_lh_empty_LH_P2_1⁰, _lh_empty_LH_C_0⁸)
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def enumFromTo_lh_₁(a¹, b¹, _lh_floatOutId_0², _lh_floatOutId_1⁰, _lh_floatOutId_2⁰, _lh_floatOutId_3⁰) = if (a¹ <= b¹) then (fun f⁶ -> (fun _lh_dummy³⁶ -> 
//│ 	let _lh_listcomp_fun_ls_t¹ = enumFromTo_lh_₁((a¹ + 1), b¹)
//│ 	in let _lh_listcomp_fun_ls_h¹ = a¹
//│ 	in let t¹⁷⁹ = _lh_floatOutId_1⁰(_lh_listcomp_fun_ls_t¹)
//│ 	in let h¹⁷⁹ = [LH_P2 _lh_floatOutId_0² _lh_listcomp_fun_ls_h¹]
//│ 	in let t¹⁸⁰ = map_lh_₅(f⁶, t¹⁷⁹)
//│ 	in let h¹⁸⁰ = f⁶(h¹⁷⁹)
//│ 	in mappend_lh_₂₁(h¹⁸⁰, concat_lh_₃(t¹⁸⁰)))) else _lh_floatOutId_3⁰(_lh_floatOutId_2⁰)
//│ def enumFromTo_lh_₂(a⁰, b⁰, _lh_floatOutId_0¹) = if (a⁰ <= b⁰) then 
//│ 	let _lh_listcomp_fun_ls_t⁰ = enumFromTo_lh_₂((a⁰ + 1), b⁰)
//│ 	in let _lh_listcomp_fun_ls_h⁰ = a⁰
//│ 	in let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para¹ -> _lh_listcomp_fun_para¹(_lh_listcomp_fun_ls_h⁰, _lh_listcomp_fun², _lh_listcomp_fun_ls_t⁰, _lh_floatOutId_0¹))
//│ 	in _lh_listcomp_fun²(enumFromTo_lh_₁(1, 3)) else (fun f¹ -> (fun _lh_dummy¹⁰ -> [LH_N]))
//│ def eval_lh_₁(_lh_eval_arg1⁰) = if (_lh_eval_arg1⁰ == 3) then [XWin] else if (_lh_eval_arg1⁰ == (0 - 3)) then [OWin] else [Score _lh_eval_arg1⁰]
//│ def foldr_lh_₁(f², i⁰, ls¹) = case ls¹ of {
//│ 	LH_C h³⁷ t³⁷ => f²(h³⁷, foldr_lh_₁(f², i⁰, t³⁷))
//│ 	| LH_N  => i⁰}
//│ def fullBoard_lh_₁(_lh_fullBoard_arg1⁰) = and_lh_₁(map_lh_₄((fun x⁰ -> not⁰(polyEq⁰(x⁰, [Empty]))), concat_lh_₂(_lh_fullBoard_arg1⁰)))
//│ def insert_lh_₁(_lh_insert_arg1⁰, _lh_insert_arg2⁰, _lh_insert_arg3⁰) = case _lh_insert_arg2⁰ of {
//│ 	LH_C _lh_insert_LH_C_0⁰ _lh_insert_LH_C_1⁰ => case _lh_insert_LH_C_1⁰ of {
//│ 		LH_C _lh_insert_LH_C_0¹ _lh_insert_LH_C_1¹ => case _lh_insert_LH_C_1¹ of {
//│ 			LH_C _lh_insert_LH_C_0² _lh_insert_LH_C_1² => case _lh_insert_LH_C_1² of {
//│ 				LH_N  => case _lh_insert_arg3⁰ of {
//│ 					1  => [LH_C _lh_insert_arg1⁰ [LH_C _lh_insert_LH_C_0¹ [LH_C _lh_insert_LH_C_0² [LH_N]]]]
//│ 					| 2  => [LH_C _lh_insert_LH_C_0⁰ [LH_C _lh_insert_arg1⁰ [LH_C _lh_insert_LH_C_0² [LH_N]]]]
//│ 					| 3  => [LH_C _lh_insert_LH_C_0⁰ [LH_C _lh_insert_LH_C_0¹ [LH_C _lh_insert_arg1⁰ [LH_N]]]]
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def interpret_lh_₁(_lh_interpret_arg1¹⁰, _lh_interpret_arg2¹) = _lh_interpret_arg2¹(_lh_interpret_arg1¹⁰)
//│ def interpret_lh_₂(_lh_interpret_arg1⁰, _lh_interpret_arg2⁰) = case _lh_interpret_arg2⁰ of {
//│ 	LH_N  => [Score _lh_interpret_arg1⁰]
//│ 	| LH_C _lh_interpret_LH_C_0⁰ _lh_interpret_LH_C_1⁰ => case _lh_interpret_LH_C_0⁰ of {
//│ 		Score _lh_interpret_Score_0⁰ => interpret_lh_₂((_lh_interpret_arg1⁰ + _lh_interpret_Score_0⁰), _lh_interpret_LH_C_1⁰)
//│ 		| XWin  => [XWin]
//│ 		| OWin  => [OWin]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def length_lh_₁(ls⁸) = ls⁸(99)
//│ def map2_lh_₁(_lh_map2_arg1⁰, _lh_map2_arg2⁰, _lh_map2_arg3⁰) = case _lh_map2_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| _  => case _lh_map2_arg3⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| _  => case _lh_map2_arg2⁰ of {
//│ 			LH_C _lh_map2_LH_C_0⁰ _lh_map2_LH_C_1⁰ => case _lh_map2_arg3⁰ of {
//│ 				LH_C _lh_map2_LH_C_0¹ _lh_map2_LH_C_1¹ => [LH_C _lh_map2_arg1⁰(_lh_map2_LH_C_0⁰, _lh_map2_LH_C_0¹) map2_lh_₁(_lh_map2_arg1⁰, _lh_map2_LH_C_1⁰, _lh_map2_LH_C_1¹)]
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}}}
//│ def mapTree_lh_₁(_lh_mapTree_arg1⁰, _lh_mapTree_arg2⁰) = case _lh_mapTree_arg2⁰ of {
//│ 	Branch _lh_mapTree_Branch_0⁰ _lh_mapTree_Branch_1⁰ => [Branch _lh_mapTree_arg1⁰(_lh_mapTree_Branch_0⁰) map_lh_₆(mapTree_lh_₁(_lh_mapTree_arg1⁰), _lh_mapTree_Branch_1⁰)]
//│ 	| _  => error⁰}
//│ def map_lh_₁(f⁵, ls⁵) = ls⁵(f⁵)
//│ def map_lh_₂(f⁴, ls⁴) = case ls⁴ of {
//│ 	LH_C h¹⁷⁷ t¹⁷⁷ => [LH_C f⁴(h¹⁷⁷) map_lh_₂(f⁴, t¹⁷⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f⁸, ls⁹) = ls⁹(f⁸)
//│ def map_lh_₄(f⁰, ls⁰, _lh_floatOutId_0⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => 
//│ 		let _lh_and_LH_C_1⁰ = map_lh_₄(f⁰, t⁰)
//│ 		in let _lh_and_LH_C_0⁰ = f⁰(h⁰)
//│ 		in if _lh_and_LH_C_0⁰ then and_lh_₁(_lh_and_LH_C_1⁰) else [False]
//│ 	| LH_N  => [True]}
//│ def map_lh_₅(f⁷, ls⁷) = ls⁷(f⁷)
//│ def map_lh_₆(f³, ls³) = case ls³ of {
//│ 	LH_C h¹⁷² t¹⁷² => [LH_C f³(h¹⁷²) map_lh_₆(f³, t¹⁷²)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs³, ys¹⁸) = xs³(ys¹⁸)
//│ def mappend_lh_₁₀(xs⁹, ys⁵⁷) = case xs⁹ of {
//│ 	LH_C h⁵² t⁵² => 
//│ 		let t⁵³ = mappend_lh_₁₀(t⁵², ys⁵⁷)
//│ 		in let h⁵³ = h⁵²
//│ 		in (fun ys⁵⁸ -> 
//│ 			let t⁵⁴ = mappend_lh_₉(t⁵³, ys⁵⁸)
//│ 			in let h⁵⁴ = h⁵³
//│ 			in (fun ys⁵⁹ -> 
//│ 				let t⁵⁵ = mappend_lh_₈(t⁵⁴, ys⁵⁹)
//│ 				in let h⁵⁵ = h⁵⁴
//│ 				in (fun ys⁶⁰ -> 
//│ 					let t⁵⁶ = mappend_lh_₇(t⁵⁵, ys⁶⁰)
//│ 					in let h⁵⁶ = h⁵⁵
//│ 					in (fun ys⁶¹ -> 
//│ 						let t⁵⁷ = mappend_lh_₆(t⁵⁶, ys⁶¹)
//│ 						in let h⁵⁷ = h⁵⁶
//│ 						in (fun ys⁶² -> 
//│ 							let t⁵⁸ = mappend_lh_₅(t⁵⁷, ys⁶²)
//│ 							in let h⁵⁸ = h⁵⁷
//│ 							in (fun _lh_dummy¹³ -> (1 + length_lh_₁(t⁵⁸))))))))
//│ 	| LH_N  => ys⁵⁷}
//│ def mappend_lh_₁₁(xs¹³, ys⁹⁷) = xs¹³(ys⁹⁷)
//│ def mappend_lh_₁₂(xs²⁰, ys²⁴⁶) = xs²⁰(ys²⁴⁶)
//│ def mappend_lh_₁₃(xs¹⁶, ys¹⁷¹) = xs¹⁶(ys¹⁷¹)
//│ def mappend_lh_₁₄(xs¹¹, ys⁷⁰) = xs¹¹(ys⁷⁰)
//│ def mappend_lh_₁₅(xs¹⁸, ys¹⁷³) = xs¹⁸(ys¹⁷³)
//│ def mappend_lh_₁₆(xs⁰, ys⁰) = xs⁰(ys⁰)
//│ def mappend_lh_₁₇(xs¹⁹, ys²⁴⁵) = xs¹⁹(ys²⁴⁵)
//│ def mappend_lh_₁₈(xs⁴, ys²⁹) = xs⁴(ys²⁹)
//│ def mappend_lh_₁₉(xs⁶, ys⁴⁰) = xs⁶(ys⁴⁰)
//│ def mappend_lh_₂(xs⁸, ys⁵⁶) = xs⁸(ys⁵⁶)
//│ def mappend_lh_₂₀(xs¹⁵, ys¹⁷⁰) = case xs¹⁵ of {
//│ 	LH_C h¹⁷⁸ t¹⁷⁸ => [LH_C h¹⁷⁸ mappend_lh_₂₀(t¹⁷⁸, ys¹⁷⁰)]
//│ 	| LH_N  => ys¹⁷⁰}
//│ def mappend_lh_₂₁(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₂₁(t¹, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₃(xs², ys²) = xs²(ys²)
//│ def mappend_lh_₄(xs¹⁴, ys¹⁶⁷) = case xs¹⁴ of {
//│ 	LH_C h¹⁷³ t¹⁷³ => 
//│ 		let t¹⁷⁴ = mappend_lh_₄(t¹⁷³, ys¹⁶⁷)
//│ 		in let h¹⁷⁴ = h¹⁷³
//│ 		in (fun ys¹⁶⁸ -> 
//│ 			let t¹⁷⁵ = mappend_lh_₃(t¹⁷⁴, ys¹⁶⁸)
//│ 			in let h¹⁷⁵ = h¹⁷⁴
//│ 			in (fun ys¹⁶⁹ -> 
//│ 				let t¹⁷⁶ = mappend_lh_₅(t¹⁷⁵, ys¹⁶⁹)
//│ 				in let h¹⁷⁶ = h¹⁷⁵
//│ 				in (fun _lh_dummy³⁵ -> (1 + length_lh_₁(t¹⁷⁶)))))
//│ 	| LH_N  => ys¹⁶⁷}
//│ def mappend_lh_₅(xs¹⁰, ys⁶⁹) = xs¹⁰(ys⁶⁹)
//│ def mappend_lh_₆(xs¹², ys⁹⁶) = xs¹²(ys⁹⁶)
//│ def mappend_lh_₇(xs⁷, ys⁵⁵) = xs⁷(ys⁵⁵)
//│ def mappend_lh_₈(xs⁵, ys³⁹) = xs⁵(ys³⁹)
//│ def mappend_lh_₉(xs¹⁷, ys¹⁷²) = xs¹⁷(ys¹⁷²)
//│ def max'_lh_₁(_lh_max'_arg1⁰, _lh_max'_arg2⁰) = case _lh_max'_arg1⁰ of {
//│ 	XWin  => [XWin]
//│ 	| _  => case _lh_max'_arg2⁰ of {
//│ 		XWin  => [XWin]
//│ 		| _  => case _lh_max'_arg2⁰ of {
//│ 			OWin  => _lh_max'_arg1⁰
//│ 			| _  => case _lh_max'_arg1⁰ of {
//│ 				OWin  => _lh_max'_arg2⁰
//│ 				| _  => case _lh_max'_arg1⁰ of {
//│ 					Score _lh_max'_Score_0⁰ => case _lh_max'_arg2⁰ of {
//│ 						Score _lh_max'_Score_0¹ => if (_lh_max'_Score_0⁰ > _lh_max'_Score_0¹) then [Score _lh_max'_Score_0⁰] else [Score _lh_max'_Score_0¹]
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}}}}}
//│ def min'_lh_₁(_lh_min'_arg1⁰, _lh_min'_arg2⁰) = case _lh_min'_arg1⁰ of {
//│ 	OWin  => [OWin]
//│ 	| _  => case _lh_min'_arg2⁰ of {
//│ 		OWin  => [OWin]
//│ 		| _  => case _lh_min'_arg2⁰ of {
//│ 			XWin  => _lh_min'_arg1⁰
//│ 			| _  => case _lh_min'_arg1⁰ of {
//│ 				XWin  => _lh_min'_arg2⁰
//│ 				| _  => case _lh_min'_arg1⁰ of {
//│ 					Score _lh_min'_Score_0⁰ => case _lh_min'_arg2⁰ of {
//│ 						Score _lh_min'_Score_0¹ => if (_lh_min'_Score_0⁰ < _lh_min'_Score_0¹) then [Score _lh_min'_Score_0⁰] else [Score _lh_min'_Score_0¹]
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}}}}}
//│ def mise_lh_₁(_lh_mise_arg1⁰, _lh_mise_arg2⁰, _lh_mise_arg3⁰) = case _lh_mise_arg3⁰ of {
//│ 	Branch _lh_mise_Branch_0⁰ _lh_mise_Branch_1⁰ => case _lh_mise_Branch_1⁰ of {
//│ 		LH_N  => _lh_mise_Branch_0⁰
//│ 		| _  => foldr_lh_₁(_lh_mise_arg1⁰, _lh_mise_arg2⁰([OWin], [XWin]), map_lh_₆(mise_lh_₁(_lh_mise_arg2⁰, _lh_mise_arg1⁰), _lh_mise_Branch_1⁰))}
//│ 	| _  => error⁰}
//│ def newPositions_lh_₁(_lh_newPositions_arg1⁰, _lh_newPositions_arg2⁰) = concat_lh_₃(map_lh_₅(placePiece_lh_₁(_lh_newPositions_arg1⁰, _lh_newPositions_arg2⁰), 
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> _lh_listcomp_fun_para⁰(_lh_listcomp_fun⁰))
//│ 	in _lh_listcomp_fun⁰(enumFromTo_lh_₂(1, 3))))
//│ def opposite_lh_₁(_lh_opposite_arg1⁰) = case _lh_opposite_arg1⁰ of {
//│ 	X  => [O]
//│ 	| O  => [X]
//│ 	| _  => error⁰}
//│ def placePiece_lh_₁(_lh_placePiece_arg1⁰, _lh_placePiece_arg2⁰, _lh_placePiece_arg3⁰) = if not⁰(empty_lh_₁(_lh_placePiece_arg3⁰, _lh_placePiece_arg2⁰)) then [LH_N] else 
//│ 	let _lh_matchIdent⁰ = _lh_placePiece_arg2⁰
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_C _lh_placePiece_LH_C_0⁰ _lh_placePiece_LH_C_1⁰ => case _lh_placePiece_LH_C_1⁰ of {
//│ 			LH_C _lh_placePiece_LH_C_0¹ _lh_placePiece_LH_C_1¹ => case _lh_placePiece_LH_C_1¹ of {
//│ 				LH_C _lh_placePiece_LH_C_0² _lh_placePiece_LH_C_1² => case _lh_placePiece_LH_C_1² of {
//│ 					LH_N  => 
//│ 						let _lh_matchIdent¹ = _lh_placePiece_arg3⁰
//│ 						in case _lh_matchIdent¹ of {
//│ 							LH_P2 _lh_placePiece_LH_P2_0⁰ _lh_placePiece_LH_P2_1⁰ => case _lh_placePiece_LH_P2_0⁰ of {
//│ 								1  => [LH_C [LH_C insert_lh_₁(_lh_placePiece_arg1⁰, _lh_placePiece_LH_C_0⁰, _lh_placePiece_LH_P2_1⁰) [LH_C _lh_placePiece_LH_C_0¹ [LH_C _lh_placePiece_LH_C_0² [LH_N]]]] [LH_N]]
//│ 								| 2  => [LH_C [LH_C _lh_placePiece_LH_C_0⁰ [LH_C insert_lh_₁(_lh_placePiece_arg1⁰, _lh_placePiece_LH_C_0¹, _lh_placePiece_LH_P2_1⁰) [LH_C _lh_placePiece_LH_C_0² [LH_N]]]] [LH_N]]
//│ 								| 3  => [LH_C [LH_C _lh_placePiece_LH_C_0⁰ [LH_C _lh_placePiece_LH_C_0¹ [LH_C insert_lh_₁(_lh_placePiece_arg1⁰, _lh_placePiece_LH_C_0², _lh_placePiece_LH_P2_1⁰) [LH_N]]]] [LH_N]]
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ def prog_lh_₁(_lh_prog_arg1⁰) = 
//│ 	let board⁰ = (fun _lh_board_arg1⁰ -> case _lh_board_arg1⁰ of {
//│ 		LH_C _lh_board_LH_C_0⁰ _lh_board_LH_C_1⁰ => case _lh_board_LH_C_0⁰ of {
//│ 			'd'  => case _lh_board_LH_C_1⁰ of {
//│ 				LH_C _lh_board_LH_C_0¹ _lh_board_LH_C_1¹ => case _lh_board_LH_C_0¹ of {
//│ 					'o'  => case _lh_board_LH_C_1¹ of {
//│ 						LH_C _lh_board_LH_C_0² _lh_board_LH_C_1² => case _lh_board_LH_C_0² of {
//│ 							'e'  => case _lh_board_LH_C_1² of {
//│ 								LH_C _lh_board_LH_C_0³ _lh_board_LH_C_1³ => case _lh_board_LH_C_0³ of {
//│ 									's'  => case _lh_board_LH_C_1³ of {
//│ 										LH_C _lh_board_LH_C_0⁴ _lh_board_LH_C_1⁴ => case _lh_board_LH_C_0⁴ of {
//│ 											'n'  => case _lh_board_LH_C_1⁴ of {
//│ 												LH_C _lh_board_LH_C_0⁵ _lh_board_LH_C_1⁵ => case _lh_board_LH_C_0⁵ of {
//│ 													't'  => case _lh_board_LH_C_1⁵ of {
//│ 														LH_C _lh_board_LH_C_0⁶ _lh_board_LH_C_1⁶ => case _lh_board_LH_C_0⁶ of {
//│ 															' '  => case _lh_board_LH_C_1⁶ of {
//│ 																LH_C _lh_board_LH_C_0⁷ _lh_board_LH_C_1⁷ => case _lh_board_LH_C_0⁷ of {
//│ 																	'h'  => case _lh_board_LH_C_1⁷ of {
//│ 																		LH_C _lh_board_LH_C_0⁸ _lh_board_LH_C_1⁸ => case _lh_board_LH_C_0⁸ of {
//│ 																			'a'  => case _lh_board_LH_C_1⁸ of {
//│ 																				LH_C _lh_board_LH_C_0⁹ _lh_board_LH_C_1⁹ => case _lh_board_LH_C_0⁹ of {
//│ 																					'p'  => case _lh_board_LH_C_1⁹ of {
//│ 																						LH_C _lh_board_LH_C_0¹⁰ _lh_board_LH_C_1¹⁰ => case _lh_board_LH_C_0¹⁰ of {
//│ 																							'p'  => case _lh_board_LH_C_1¹⁰ of {
//│ 																								LH_C _lh_board_LH_C_0¹¹ _lh_board_LH_C_1¹¹ => case _lh_board_LH_C_0¹¹ of {
//│ 																									'e'  => case _lh_board_LH_C_1¹¹ of {
//│ 																										LH_C _lh_board_LH_C_0¹² _lh_board_LH_C_1¹² => case _lh_board_LH_C_0¹² of {
//│ 																											'n'  => case _lh_board_LH_C_1¹² of {
//│ 																												LH_N  => mappend_lh_₂(testBoard_lh_₂₇, testBoard_lh_₁₂)
//│ 																												| _  => testBoard_lh_₁₆}
//│ 																											| _  => testBoard_lh_₂₃}
//│ 																										| _  => testBoard_lh_₃}
//│ 																									| _  => testBoard_lh_₂₂}
//│ 																								| _  => testBoard_lh_₁₄}
//│ 																							| _  => testBoard_lh_₆}
//│ 																						| _  => testBoard_lh_₂₁}
//│ 																					| _  => testBoard_lh_₁₁}
//│ 																				| _  => testBoard_lh_₂₄}
//│ 																			| _  => testBoard_lh_₁}
//│ 																		| _  => testBoard_lh_₉}
//│ 																	| _  => testBoard_lh_₂₅}
//│ 																| _  => testBoard_lh_₁₅}
//│ 															| _  => testBoard_lh_₈}
//│ 														| _  => testBoard_lh_₁₀}
//│ 													| _  => testBoard_lh_₂₀}
//│ 												| _  => testBoard_lh_₁₈}
//│ 											| _  => testBoard_lh_₂₉}
//│ 										| _  => testBoard_lh_₂₆}
//│ 									| _  => testBoard_lh_₂₈}
//│ 								| _  => testBoard_lh_₇}
//│ 							| _  => testBoard_lh_₅}
//│ 						| _  => testBoard_lh_₂}
//│ 					| _  => testBoard_lh_₁₉}
//│ 				| _  => testBoard_lh_₁₇}
//│ 			| _  => testBoard_lh_₄}
//│ 		| _  => testBoard_lh_₁₃})
//│ 	in let game⁰ = alternate_lh_₁([X], max'_lh_₁, min'_lh_₁, board⁰(_lh_prog_arg1⁰))
//│ 	in mappend_lh_₁(
//│ 		let t²⁰⁹ = 	
//│ 			let t²¹⁰ = 	
//│ 				let t²¹¹ = 	
//│ 					let t²¹² = (fun ys²⁰¹ -> ys²⁰¹)
//│ 					in let h²⁰⁹ = '|'
//│ 					in (fun ys²⁰² -> 
//│ 						let t²¹³ = mappend_lh_₁(t²¹², ys²⁰²)
//│ 						in let h²¹⁰ = h²⁰⁹
//│ 						in (fun _lh_dummy⁴⁰ -> (1 + length_lh_₁(t²¹³))))
//│ 				in let h²¹¹ = 'O'
//│ 				in (fun ys²⁰³ -> 
//│ 					let t²¹⁴ = mappend_lh_₁(t²¹¹, ys²⁰³)
//│ 					in let h²¹² = h²¹¹
//│ 					in (fun _lh_dummy⁴¹ -> (1 + length_lh_₁(t²¹⁴))))
//│ 			in let h²¹³ = 'X'
//│ 			in (fun ys²⁰⁴ -> 
//│ 				let t²¹⁵ = mappend_lh_₁(t²¹⁰, ys²⁰⁴)
//│ 				in let h²¹⁴ = h²¹³
//│ 				in (fun _lh_dummy⁴² -> (1 + length_lh_₁(t²¹⁵))))
//│ 		in let h²¹⁵ = 'O'
//│ 		in (fun ys²⁰⁵ -> 
//│ 			let t²¹⁶ = mappend_lh_₁(t²⁰⁹, ys²⁰⁵)
//│ 			in let h²¹⁶ = h²¹⁵
//│ 			in (fun _lh_dummy⁴³ -> (1 + length_lh_₁(t²¹⁶)))), concat_lh_₁(map_lh_₁(showMove_lh_₁, game⁰)))
//│ def prune_lh_₁(_lh_prune_arg1⁰, _lh_prune_arg2⁰) = case _lh_prune_arg1⁰ of {
//│ 	0  => case _lh_prune_arg2⁰ of {
//│ 		Branch _lh_prune_Branch_0⁰ _lh_prune_Branch_1⁰ => [Branch _lh_prune_Branch_0⁰ [LH_N]]
//│ 		| _  => case _lh_prune_arg2⁰ of {
//│ 			Branch _lh_prune_Branch_0¹ _lh_prune_Branch_1¹ => if (_lh_prune_arg1⁰ < 0) then error⁰([LH_C 'T' [LH_C 'r' [LH_C 'e' [LH_C 'e' [LH_C '.' [LH_C 'p' [LH_C 'r' [LH_C 'u' [LH_C 'n' [LH_C 'e' [LH_C ':' [LH_C ' ' [LH_C '<' [LH_C ' ' [LH_C '0' [LH_N]]]]]]]]]]]]]]]]) else [Branch _lh_prune_Branch_0¹ map_lh_₆(prune_lh_₁((_lh_prune_arg1⁰ - 1)), _lh_prune_Branch_1¹)]
//│ 			| _  => error⁰}}
//│ 	| _  => case _lh_prune_arg2⁰ of {
//│ 		Branch _lh_prune_Branch_0² _lh_prune_Branch_1² => if (_lh_prune_arg1⁰ < 0) then error⁰([LH_C 'T' [LH_C 'r' [LH_C 'e' [LH_C 'e' [LH_C '.' [LH_C 'p' [LH_C 'r' [LH_C 'u' [LH_C 'n' [LH_C 'e' [LH_C ':' [LH_C ' ' [LH_C '<' [LH_C ' ' [LH_C '0' [LH_N]]]]]]]]]]]]]]]]) else [Branch _lh_prune_Branch_0² map_lh_₆(prune_lh_₁((_lh_prune_arg1⁰ - 1)), _lh_prune_Branch_1²)]
//│ 		| _  => error⁰}}
//│ def repTree_lh_₁(_lh_repTree_arg1⁰, _lh_repTree_arg2⁰, _lh_repTree_arg3⁰) = [Branch _lh_repTree_arg3⁰ map_lh_₆(repTree_lh_₁(_lh_repTree_arg2⁰, _lh_repTree_arg1⁰), _lh_repTree_arg1⁰(_lh_repTree_arg3⁰))]
//│ def scorePiece_lh_₁(_lh_scorePiece_arg1⁰, _lh_scorePiece_arg2⁰) = case _lh_scorePiece_arg1⁰ of {
//│ 	X  => _lh_scorePiece_arg2⁰
//│ 	| Empty  => 0
//│ 	| O  => (0 - _lh_scorePiece_arg2⁰)
//│ 	| _  => error⁰}
//│ def score_lh_₁(_lh_score_arg1⁰, _lh_score_arg2⁰) = eval_lh_₁(sum_lh_₁(map_lh_₆(sum_lh_₁, map2_lh_₁(map2_lh_₁(scorePiece_lh_₁), _lh_score_arg1⁰, _lh_score_arg2⁰))))
//│ def score_lh_₂(_lh_score_arg1¹, _lh_score_arg2¹) = eval_lh_₁(sum_lh_₁(map_lh_₆(sum_lh_₁, map2_lh_₁(map2_lh_₁(scorePiece_lh_₁), _lh_score_arg1¹, _lh_score_arg2¹))))
//│ def searchTree_lh_₁(_lh_searchTree_arg1⁰, _lh_searchTree_arg2⁰) = prune_lh_₁(5, repTree_lh_₁(newPositions_lh_₁(_lh_searchTree_arg1⁰), newPositions_lh_₁(opposite_lh_₁(_lh_searchTree_arg1⁰)), _lh_searchTree_arg2⁰))
//│ def showBoard_lh_₁(_lh_showBoard_arg1⁰) = case _lh_showBoard_arg1⁰ of {
//│ 	LH_C _lh_showBoard_LH_C_0⁰ _lh_showBoard_LH_C_1⁰ => case _lh_showBoard_LH_C_1⁰ of {
//│ 		LH_C _lh_showBoard_LH_C_0¹ _lh_showBoard_LH_C_1¹ => case _lh_showBoard_LH_C_1¹ of {
//│ 			LH_C _lh_showBoard_LH_C_0² _lh_showBoard_LH_C_1² => case _lh_showBoard_LH_C_1² of {
//│ 				LH_N  => mappend_lh_₆(mappend_lh_₇(mappend_lh_₈(mappend_lh_₉(mappend_lh_₁₀(showRow_lh_₃(_lh_showBoard_LH_C_0⁰), 
//│ 					let t⁸⁸ = 	
//│ 						let t⁸⁹ = 	
//│ 							let t⁹⁰ = 	
//│ 								let t⁹¹ = 	
//│ 									let t⁹² = 	
//│ 										let t⁹³ = 	
//│ 											let t⁹⁴ = 	
//│ 												let t⁹⁵ = (fun ys⁹⁸ -> ys⁹⁸)
//│ 												in let h⁸⁸ = '|'
//│ 												in (fun ys⁹⁹ -> 
//│ 													let t⁹⁶ = mappend_lh_₉(t⁹⁵, ys⁹⁹)
//│ 													in let h⁸⁹ = h⁸⁸
//│ 													in (fun ys¹⁰⁰ -> 
//│ 														let t⁹⁷ = mappend_lh_₈(t⁹⁶, ys¹⁰⁰)
//│ 														in let h⁹⁰ = h⁸⁹
//│ 														in (fun ys¹⁰¹ -> 
//│ 															let t⁹⁸ = mappend_lh_₇(t⁹⁷, ys¹⁰¹)
//│ 															in let h⁹¹ = h⁹⁰
//│ 															in (fun ys¹⁰² -> 
//│ 																let t⁹⁹ = mappend_lh_₆(t⁹⁸, ys¹⁰²)
//│ 																in let h⁹² = h⁹¹
//│ 																in (fun ys¹⁰³ -> 
//│ 																	let t¹⁰⁰ = mappend_lh_₅(t⁹⁹, ys¹⁰³)
//│ 																	in let h⁹³ = h⁹²
//│ 																	in (fun _lh_dummy¹⁷ -> (1 + length_lh_₁(t¹⁰⁰))))))))
//│ 											in let h⁹⁴ = '-'
//│ 											in (fun ys¹⁰⁴ -> 
//│ 												let t¹⁰¹ = mappend_lh_₉(t⁹⁴, ys¹⁰⁴)
//│ 												in let h⁹⁵ = h⁹⁴
//│ 												in (fun ys¹⁰⁵ -> 
//│ 													let t¹⁰² = mappend_lh_₈(t¹⁰¹, ys¹⁰⁵)
//│ 													in let h⁹⁶ = h⁹⁵
//│ 													in (fun ys¹⁰⁶ -> 
//│ 														let t¹⁰³ = mappend_lh_₇(t¹⁰², ys¹⁰⁶)
//│ 														in let h⁹⁷ = h⁹⁶
//│ 														in (fun ys¹⁰⁷ -> 
//│ 															let t¹⁰⁴ = mappend_lh_₆(t¹⁰³, ys¹⁰⁷)
//│ 															in let h⁹⁸ = h⁹⁷
//│ 															in (fun ys¹⁰⁸ -> 
//│ 																let t¹⁰⁵ = mappend_lh_₅(t¹⁰⁴, ys¹⁰⁸)
//│ 																in let h⁹⁹ = h⁹⁸
//│ 																in (fun _lh_dummy¹⁸ -> (1 + length_lh_₁(t¹⁰⁵))))))))
//│ 										in let h¹⁰⁰ = '-'
//│ 										in (fun ys¹⁰⁹ -> 
//│ 											let t¹⁰⁶ = mappend_lh_₉(t⁹³, ys¹⁰⁹)
//│ 											in let h¹⁰¹ = h¹⁰⁰
//│ 											in (fun ys¹¹⁰ -> 
//│ 												let t¹⁰⁷ = mappend_lh_₈(t¹⁰⁶, ys¹¹⁰)
//│ 												in let h¹⁰² = h¹⁰¹
//│ 												in (fun ys¹¹¹ -> 
//│ 													let t¹⁰⁸ = mappend_lh_₇(t¹⁰⁷, ys¹¹¹)
//│ 													in let h¹⁰³ = h¹⁰²
//│ 													in (fun ys¹¹² -> 
//│ 														let t¹⁰⁹ = mappend_lh_₆(t¹⁰⁸, ys¹¹²)
//│ 														in let h¹⁰⁴ = h¹⁰³
//│ 														in (fun ys¹¹³ -> 
//│ 															let t¹¹⁰ = mappend_lh_₅(t¹⁰⁹, ys¹¹³)
//│ 															in let h¹⁰⁵ = h¹⁰⁴
//│ 															in (fun _lh_dummy¹⁹ -> (1 + length_lh_₁(t¹¹⁰))))))))
//│ 									in let h¹⁰⁶ = '-'
//│ 									in (fun ys¹¹⁴ -> 
//│ 										let t¹¹¹ = mappend_lh_₉(t⁹², ys¹¹⁴)
//│ 										in let h¹⁰⁷ = h¹⁰⁶
//│ 										in (fun ys¹¹⁵ -> 
//│ 											let t¹¹² = mappend_lh_₈(t¹¹¹, ys¹¹⁵)
//│ 											in let h¹⁰⁸ = h¹⁰⁷
//│ 											in (fun ys¹¹⁶ -> 
//│ 												let t¹¹³ = mappend_lh_₇(t¹¹², ys¹¹⁶)
//│ 												in let h¹⁰⁹ = h¹⁰⁸
//│ 												in (fun ys¹¹⁷ -> 
//│ 													let t¹¹⁴ = mappend_lh_₆(t¹¹³, ys¹¹⁷)
//│ 													in let h¹¹⁰ = h¹⁰⁹
//│ 													in (fun ys¹¹⁸ -> 
//│ 														let t¹¹⁵ = mappend_lh_₅(t¹¹⁴, ys¹¹⁸)
//│ 														in let h¹¹¹ = h¹¹⁰
//│ 														in (fun _lh_dummy²⁰ -> (1 + length_lh_₁(t¹¹⁵))))))))
//│ 								in let h¹¹² = '-'
//│ 								in (fun ys¹¹⁹ -> 
//│ 									let t¹¹⁶ = mappend_lh_₉(t⁹¹, ys¹¹⁹)
//│ 									in let h¹¹³ = h¹¹²
//│ 									in (fun ys¹²⁰ -> 
//│ 										let t¹¹⁷ = mappend_lh_₈(t¹¹⁶, ys¹²⁰)
//│ 										in let h¹¹⁴ = h¹¹³
//│ 										in (fun ys¹²¹ -> 
//│ 											let t¹¹⁸ = mappend_lh_₇(t¹¹⁷, ys¹²¹)
//│ 											in let h¹¹⁵ = h¹¹⁴
//│ 											in (fun ys¹²² -> 
//│ 												let t¹¹⁹ = mappend_lh_₆(t¹¹⁸, ys¹²²)
//│ 												in let h¹¹⁶ = h¹¹⁵
//│ 												in (fun ys¹²³ -> 
//│ 													let t¹²⁰ = mappend_lh_₅(t¹¹⁹, ys¹²³)
//│ 													in let h¹¹⁷ = h¹¹⁶
//│ 													in (fun _lh_dummy²¹ -> (1 + length_lh_₁(t¹²⁰))))))))
//│ 							in let h¹¹⁸ = '-'
//│ 							in (fun ys¹²⁴ -> 
//│ 								let t¹²¹ = mappend_lh_₉(t⁹⁰, ys¹²⁴)
//│ 								in let h¹¹⁹ = h¹¹⁸
//│ 								in (fun ys¹²⁵ -> 
//│ 									let t¹²² = mappend_lh_₈(t¹²¹, ys¹²⁵)
//│ 									in let h¹²⁰ = h¹¹⁹
//│ 									in (fun ys¹²⁶ -> 
//│ 										let t¹²³ = mappend_lh_₇(t¹²², ys¹²⁶)
//│ 										in let h¹²¹ = h¹²⁰
//│ 										in (fun ys¹²⁷ -> 
//│ 											let t¹²⁴ = mappend_lh_₆(t¹²³, ys¹²⁷)
//│ 											in let h¹²² = h¹²¹
//│ 											in (fun ys¹²⁸ -> 
//│ 												let t¹²⁵ = mappend_lh_₅(t¹²⁴, ys¹²⁸)
//│ 												in let h¹²³ = h¹²²
//│ 												in (fun _lh_dummy²² -> (1 + length_lh_₁(t¹²⁵))))))))
//│ 						in let h¹²⁴ = '-'
//│ 						in (fun ys¹²⁹ -> 
//│ 							let t¹²⁶ = mappend_lh_₉(t⁸⁹, ys¹²⁹)
//│ 							in let h¹²⁵ = h¹²⁴
//│ 							in (fun ys¹³⁰ -> 
//│ 								let t¹²⁷ = mappend_lh_₈(t¹²⁶, ys¹³⁰)
//│ 								in let h¹²⁶ = h¹²⁵
//│ 								in (fun ys¹³¹ -> 
//│ 									let t¹²⁸ = mappend_lh_₇(t¹²⁷, ys¹³¹)
//│ 									in let h¹²⁷ = h¹²⁶
//│ 									in (fun ys¹³² -> 
//│ 										let t¹²⁹ = mappend_lh_₆(t¹²⁸, ys¹³²)
//│ 										in let h¹²⁸ = h¹²⁷
//│ 										in (fun ys¹³³ -> 
//│ 											let t¹³⁰ = mappend_lh_₅(t¹²⁹, ys¹³³)
//│ 											in let h¹²⁹ = h¹²⁸
//│ 											in (fun _lh_dummy²³ -> (1 + length_lh_₁(t¹³⁰))))))))
//│ 					in let h¹³⁰ = '|'
//│ 					in (fun ys¹³⁴ -> 
//│ 						let t¹³¹ = mappend_lh_₉(t⁸⁸, ys¹³⁴)
//│ 						in let h¹³¹ = h¹³⁰
//│ 						in (fun ys¹³⁵ -> 
//│ 							let t¹³² = mappend_lh_₈(t¹³¹, ys¹³⁵)
//│ 							in let h¹³² = h¹³¹
//│ 							in (fun ys¹³⁶ -> 
//│ 								let t¹³³ = mappend_lh_₇(t¹³², ys¹³⁶)
//│ 								in let h¹³³ = h¹³²
//│ 								in (fun ys¹³⁷ -> 
//│ 									let t¹³⁴ = mappend_lh_₆(t¹³³, ys¹³⁷)
//│ 									in let h¹³⁴ = h¹³³
//│ 									in (fun ys¹³⁸ -> 
//│ 										let t¹³⁵ = mappend_lh_₅(t¹³⁴, ys¹³⁸)
//│ 										in let h¹³⁵ = h¹³⁴
//│ 										in (fun _lh_dummy²⁴ -> (1 + length_lh_₁(t¹³⁵))))))))), showRow_lh_₂(_lh_showBoard_LH_C_0¹)), 
//│ 					let t¹³⁶ = 	
//│ 						let t¹³⁷ = 	
//│ 							let t¹³⁸ = 	
//│ 								let t¹³⁹ = 	
//│ 									let t¹⁴⁰ = 	
//│ 										let t¹⁴¹ = 	
//│ 											let t¹⁴² = 	
//│ 												let t¹⁴³ = (fun ys¹³⁹ -> ys¹³⁹)
//│ 												in let h¹³⁶ = '|'
//│ 												in (fun ys¹⁴⁰ -> 
//│ 													let t¹⁴⁴ = mappend_lh_₇(t¹⁴³, ys¹⁴⁰)
//│ 													in let h¹³⁷ = h¹³⁶
//│ 													in (fun ys¹⁴¹ -> 
//│ 														let t¹⁴⁵ = mappend_lh_₆(t¹⁴⁴, ys¹⁴¹)
//│ 														in let h¹³⁸ = h¹³⁷
//│ 														in (fun ys¹⁴² -> 
//│ 															let t¹⁴⁶ = mappend_lh_₅(t¹⁴⁵, ys¹⁴²)
//│ 															in let h¹³⁹ = h¹³⁸
//│ 															in (fun _lh_dummy²⁵ -> (1 + length_lh_₁(t¹⁴⁶))))))
//│ 											in let h¹⁴⁰ = '-'
//│ 											in (fun ys¹⁴³ -> 
//│ 												let t¹⁴⁷ = mappend_lh_₇(t¹⁴², ys¹⁴³)
//│ 												in let h¹⁴¹ = h¹⁴⁰
//│ 												in (fun ys¹⁴⁴ -> 
//│ 													let t¹⁴⁸ = mappend_lh_₆(t¹⁴⁷, ys¹⁴⁴)
//│ 													in let h¹⁴² = h¹⁴¹
//│ 													in (fun ys¹⁴⁵ -> 
//│ 														let t¹⁴⁹ = mappend_lh_₅(t¹⁴⁸, ys¹⁴⁵)
//│ 														in let h¹⁴³ = h¹⁴²
//│ 														in (fun _lh_dummy²⁶ -> (1 + length_lh_₁(t¹⁴⁹))))))
//│ 										in let h¹⁴⁴ = '-'
//│ 										in (fun ys¹⁴⁶ -> 
//│ 											let t¹⁵⁰ = mappend_lh_₇(t¹⁴¹, ys¹⁴⁶)
//│ 											in let h¹⁴⁵ = h¹⁴⁴
//│ 											in (fun ys¹⁴⁷ -> 
//│ 												let t¹⁵¹ = mappend_lh_₆(t¹⁵⁰, ys¹⁴⁷)
//│ 												in let h¹⁴⁶ = h¹⁴⁵
//│ 												in (fun ys¹⁴⁸ -> 
//│ 													let t¹⁵² = mappend_lh_₅(t¹⁵¹, ys¹⁴⁸)
//│ 													in let h¹⁴⁷ = h¹⁴⁶
//│ 													in (fun _lh_dummy²⁷ -> (1 + length_lh_₁(t¹⁵²))))))
//│ 									in let h¹⁴⁸ = '-'
//│ 									in (fun ys¹⁴⁹ -> 
//│ 										let t¹⁵³ = mappend_lh_₇(t¹⁴⁰, ys¹⁴⁹)
//│ 										in let h¹⁴⁹ = h¹⁴⁸
//│ 										in (fun ys¹⁵⁰ -> 
//│ 											let t¹⁵⁴ = mappend_lh_₆(t¹⁵³, ys¹⁵⁰)
//│ 											in let h¹⁵⁰ = h¹⁴⁹
//│ 											in (fun ys¹⁵¹ -> 
//│ 												let t¹⁵⁵ = mappend_lh_₅(t¹⁵⁴, ys¹⁵¹)
//│ 												in let h¹⁵¹ = h¹⁵⁰
//│ 												in (fun _lh_dummy²⁸ -> (1 + length_lh_₁(t¹⁵⁵))))))
//│ 								in let h¹⁵² = '-'
//│ 								in (fun ys¹⁵² -> 
//│ 									let t¹⁵⁶ = mappend_lh_₇(t¹³⁹, ys¹⁵²)
//│ 									in let h¹⁵³ = h¹⁵²
//│ 									in (fun ys¹⁵³ -> 
//│ 										let t¹⁵⁷ = mappend_lh_₆(t¹⁵⁶, ys¹⁵³)
//│ 										in let h¹⁵⁴ = h¹⁵³
//│ 										in (fun ys¹⁵⁴ -> 
//│ 											let t¹⁵⁸ = mappend_lh_₅(t¹⁵⁷, ys¹⁵⁴)
//│ 											in let h¹⁵⁵ = h¹⁵⁴
//│ 											in (fun _lh_dummy²⁹ -> (1 + length_lh_₁(t¹⁵⁸))))))
//│ 							in let h¹⁵⁶ = '-'
//│ 							in (fun ys¹⁵⁵ -> 
//│ 								let t¹⁵⁹ = mappend_lh_₇(t¹³⁸, ys¹⁵⁵)
//│ 								in let h¹⁵⁷ = h¹⁵⁶
//│ 								in (fun ys¹⁵⁶ -> 
//│ 									let t¹⁶⁰ = mappend_lh_₆(t¹⁵⁹, ys¹⁵⁶)
//│ 									in let h¹⁵⁸ = h¹⁵⁷
//│ 									in (fun ys¹⁵⁷ -> 
//│ 										let t¹⁶¹ = mappend_lh_₅(t¹⁶⁰, ys¹⁵⁷)
//│ 										in let h¹⁵⁹ = h¹⁵⁸
//│ 										in (fun _lh_dummy³⁰ -> (1 + length_lh_₁(t¹⁶¹))))))
//│ 						in let h¹⁶⁰ = '-'
//│ 						in (fun ys¹⁵⁸ -> 
//│ 							let t¹⁶² = mappend_lh_₇(t¹³⁷, ys¹⁵⁸)
//│ 							in let h¹⁶¹ = h¹⁶⁰
//│ 							in (fun ys¹⁵⁹ -> 
//│ 								let t¹⁶³ = mappend_lh_₆(t¹⁶², ys¹⁵⁹)
//│ 								in let h¹⁶² = h¹⁶¹
//│ 								in (fun ys¹⁶⁰ -> 
//│ 									let t¹⁶⁴ = mappend_lh_₅(t¹⁶³, ys¹⁶⁰)
//│ 									in let h¹⁶³ = h¹⁶²
//│ 									in (fun _lh_dummy³¹ -> (1 + length_lh_₁(t¹⁶⁴))))))
//│ 					in let h¹⁶⁴ = '|'
//│ 					in (fun ys¹⁶¹ -> 
//│ 						let t¹⁶⁵ = mappend_lh_₇(t¹³⁶, ys¹⁶¹)
//│ 						in let h¹⁶⁵ = h¹⁶⁴
//│ 						in (fun ys¹⁶² -> 
//│ 							let t¹⁶⁶ = mappend_lh_₆(t¹⁶⁵, ys¹⁶²)
//│ 							in let h¹⁶⁶ = h¹⁶⁵
//│ 							in (fun ys¹⁶³ -> 
//│ 								let t¹⁶⁷ = mappend_lh_₅(t¹⁶⁶, ys¹⁶³)
//│ 								in let h¹⁶⁷ = h¹⁶⁶
//│ 								in (fun _lh_dummy³² -> (1 + length_lh_₁(t¹⁶⁷))))))), showRow_lh_₁(_lh_showBoard_LH_C_0²)), 
//│ 					let t¹⁶⁸ = 	
//│ 						let t¹⁶⁹ = (fun ys¹⁶⁴ -> ys¹⁶⁴)
//│ 						in let h¹⁶⁸ = '|'
//│ 						in (fun ys¹⁶⁵ -> 
//│ 							let t¹⁷⁰ = mappend_lh_₅(t¹⁶⁹, ys¹⁶⁵)
//│ 							in let h¹⁶⁹ = h¹⁶⁸
//│ 							in (fun _lh_dummy³³ -> (1 + length_lh_₁(t¹⁷⁰))))
//│ 					in let h¹⁷⁰ = '|'
//│ 					in (fun ys¹⁶⁶ -> 
//│ 						let t¹⁷¹ = mappend_lh_₅(t¹⁶⁸, ys¹⁶⁶)
//│ 						in let h¹⁷¹ = h¹⁷⁰
//│ 						in (fun _lh_dummy³⁴ -> (1 + length_lh_₁(t¹⁷¹)))))
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def showEvaluation_lh_₁(_lh_showEvaluation_arg1⁰) = case _lh_showEvaluation_arg1⁰ of {
//│ 	XWin  => [LH_C 'X' [LH_C 'W' [LH_C 'i' [LH_C 'n' [LH_N]]]]]
//│ 	| OWin  => [LH_C 'O' [LH_C 'W' [LH_C 'i' [LH_C 'n' [LH_N]]]]]
//│ 	| Score _lh_showEvaluation_Score_0⁰ => mappend_lh_₁₁(
//│ 		let t⁵⁹ = 	
//│ 			let t⁶⁰ = 	
//│ 				let t⁶¹ = 	
//│ 					let t⁶² = 	
//│ 						let t⁶³ = (fun ys⁶³ -> ys⁶³)
//│ 						in let h⁵⁹ = 'e'
//│ 						in (fun ys⁶⁴ -> [LH_C h⁵⁹ mappend_lh_₁₁(t⁶³, ys⁶⁴)])
//│ 					in let h⁶⁰ = 'r'
//│ 					in (fun ys⁶⁵ -> [LH_C h⁶⁰ mappend_lh_₁₁(t⁶², ys⁶⁵)])
//│ 				in let h⁶¹ = 'o'
//│ 				in (fun ys⁶⁶ -> [LH_C h⁶¹ mappend_lh_₁₁(t⁶¹, ys⁶⁶)])
//│ 			in let h⁶² = 'c'
//│ 			in (fun ys⁶⁷ -> [LH_C h⁶² mappend_lh_₁₁(t⁶⁰, ys⁶⁷)])
//│ 		in let h⁶³ = 'S'
//│ 		in (fun ys⁶⁸ -> [LH_C h⁶³ mappend_lh_₁₁(t⁵⁹, ys⁶⁸)]), string_of_int⁰(_lh_showEvaluation_Score_0⁰))
//│ 	| _  => error⁰}
//│ def showMove_lh_₁(_lh_showMove_arg1⁰) = _lh_showMove_arg1⁰(99)
//│ def showPiece_lh_₁(_lh_showPiece_arg1⁷) = case _lh_showPiece_arg1⁷ of {
//│ 	X  => 
//│ 		let t²¹⁷ = (fun ys²⁰⁶ -> ys²⁰⁶)
//│ 		in let h²¹⁷ = 'X'
//│ 		in (fun ys²⁰⁷ -> 
//│ 			let t²¹⁸ = mappend_lh_₁₄(t²¹⁷, ys²⁰⁷)
//│ 			in let h²¹⁸ = h²¹⁷
//│ 			in (fun ys²⁰⁸ -> 
//│ 				let t²¹⁹ = mappend_lh_₁₅(t²¹⁸, ys²⁰⁸)
//│ 				in let h²¹⁹ = h²¹⁸
//│ 				in (fun ys²⁰⁹ -> 
//│ 					let t²²⁰ = mappend_lh_₁₃(t²¹⁹, ys²⁰⁹)
//│ 					in let h²²⁰ = h²¹⁹
//│ 					in (fun ys²¹⁰ -> 
//│ 						let t²²¹ = mappend_lh_₁₂(t²²⁰, ys²¹⁰)
//│ 						in let h²²¹ = h²²⁰
//│ 						in (fun ys²¹¹ -> 
//│ 							let t²²² = mappend_lh_₆(t²²¹, ys²¹¹)
//│ 							in let h²²² = h²²¹
//│ 							in (fun ys²¹² -> 
//│ 								let t²²³ = mappend_lh_₅(t²²², ys²¹²)
//│ 								in let h²²³ = h²²²
//│ 								in (fun _lh_dummy⁴⁴ -> (1 + length_lh_₁(t²²³)))))))))
//│ 	| O  => 
//│ 		let t²²⁴ = (fun ys²¹³ -> ys²¹³)
//│ 		in let h²²⁴ = 'O'
//│ 		in (fun ys²¹⁴ -> 
//│ 			let t²²⁵ = mappend_lh_₁₄(t²²⁴, ys²¹⁴)
//│ 			in let h²²⁵ = h²²⁴
//│ 			in (fun ys²¹⁵ -> 
//│ 				let t²²⁶ = mappend_lh_₁₅(t²²⁵, ys²¹⁵)
//│ 				in let h²²⁶ = h²²⁵
//│ 				in (fun ys²¹⁶ -> 
//│ 					let t²²⁷ = mappend_lh_₁₃(t²²⁶, ys²¹⁶)
//│ 					in let h²²⁷ = h²²⁶
//│ 					in (fun ys²¹⁷ -> 
//│ 						let t²²⁸ = mappend_lh_₁₂(t²²⁷, ys²¹⁷)
//│ 						in let h²²⁸ = h²²⁷
//│ 						in (fun ys²¹⁸ -> 
//│ 							let t²²⁹ = mappend_lh_₆(t²²⁸, ys²¹⁸)
//│ 							in let h²²⁹ = h²²⁸
//│ 							in (fun ys²¹⁹ -> 
//│ 								let t²³⁰ = mappend_lh_₅(t²²⁹, ys²¹⁹)
//│ 								in let h²³⁰ = h²²⁹
//│ 								in (fun _lh_dummy⁴⁵ -> (1 + length_lh_₁(t²³⁰)))))))))
//│ 	| Empty  => 
//│ 		let t²³¹ = (fun ys²²⁰ -> ys²²⁰)
//│ 		in let h²³¹ = ' '
//│ 		in (fun ys²²¹ -> 
//│ 			let t²³² = mappend_lh_₁₄(t²³¹, ys²²¹)
//│ 			in let h²³² = h²³¹
//│ 			in (fun ys²²² -> 
//│ 				let t²³³ = mappend_lh_₁₅(t²³², ys²²²)
//│ 				in let h²³³ = h²³²
//│ 				in (fun ys²²³ -> 
//│ 					let t²³⁴ = mappend_lh_₁₃(t²³³, ys²²³)
//│ 					in let h²³⁴ = h²³³
//│ 					in (fun ys²²⁴ -> 
//│ 						let t²³⁵ = mappend_lh_₁₂(t²³⁴, ys²²⁴)
//│ 						in let h²³⁵ = h²³⁴
//│ 						in (fun ys²²⁵ -> 
//│ 							let t²³⁶ = mappend_lh_₆(t²³⁵, ys²²⁵)
//│ 							in let h²³⁶ = h²³⁵
//│ 							in (fun ys²²⁶ -> 
//│ 								let t²³⁷ = mappend_lh_₅(t²³⁶, ys²²⁶)
//│ 								in let h²³⁷ = h²³⁶
//│ 								in (fun _lh_dummy⁴⁶ -> (1 + length_lh_₁(t²³⁷)))))))))
//│ 	| _  => error⁰}
//│ def showPiece_lh_₂(_lh_showPiece_arg1⁰) = case _lh_showPiece_arg1⁰ of {
//│ 	X  => 
//│ 		let t² = (fun ys³ -> ys³)
//│ 		in let h² = 'X'
//│ 		in (fun ys⁴ -> 
//│ 			let t³ = mappend_lh_₁₃(t², ys⁴)
//│ 			in let h³ = h²
//│ 			in (fun ys⁵ -> 
//│ 				let t⁴ = mappend_lh_₁₂(t³, ys⁵)
//│ 				in let h⁴ = h³
//│ 				in (fun ys⁶ -> 
//│ 					let t⁵ = mappend_lh_₆(t⁴, ys⁶)
//│ 					in let h⁵ = h⁴
//│ 					in (fun ys⁷ -> 
//│ 						let t⁶ = mappend_lh_₅(t⁵, ys⁷)
//│ 						in let h⁶ = h⁵
//│ 						in (fun _lh_dummy² -> (1 + length_lh_₁(t⁶)))))))
//│ 	| O  => 
//│ 		let t⁷ = (fun ys⁸ -> ys⁸)
//│ 		in let h⁷ = 'O'
//│ 		in (fun ys⁹ -> 
//│ 			let t⁸ = mappend_lh_₁₃(t⁷, ys⁹)
//│ 			in let h⁸ = h⁷
//│ 			in (fun ys¹⁰ -> 
//│ 				let t⁹ = mappend_lh_₁₂(t⁸, ys¹⁰)
//│ 				in let h⁹ = h⁸
//│ 				in (fun ys¹¹ -> 
//│ 					let t¹⁰ = mappend_lh_₆(t⁹, ys¹¹)
//│ 					in let h¹⁰ = h⁹
//│ 					in (fun ys¹² -> 
//│ 						let t¹¹ = mappend_lh_₅(t¹⁰, ys¹²)
//│ 						in let h¹¹ = h¹⁰
//│ 						in (fun _lh_dummy³ -> (1 + length_lh_₁(t¹¹)))))))
//│ 	| Empty  => 
//│ 		let t¹² = (fun ys¹³ -> ys¹³)
//│ 		in let h¹² = ' '
//│ 		in (fun ys¹⁴ -> 
//│ 			let t¹³ = mappend_lh_₁₃(t¹², ys¹⁴)
//│ 			in let h¹³ = h¹²
//│ 			in (fun ys¹⁵ -> 
//│ 				let t¹⁴ = mappend_lh_₁₂(t¹³, ys¹⁵)
//│ 				in let h¹⁴ = h¹³
//│ 				in (fun ys¹⁶ -> 
//│ 					let t¹⁵ = mappend_lh_₆(t¹⁴, ys¹⁶)
//│ 					in let h¹⁵ = h¹⁴
//│ 					in (fun ys¹⁷ -> 
//│ 						let t¹⁶ = mappend_lh_₅(t¹⁵, ys¹⁷)
//│ 						in let h¹⁶ = h¹⁵
//│ 						in (fun _lh_dummy⁴ -> (1 + length_lh_₁(t¹⁶)))))))
//│ 	| _  => error⁰}
//│ def showPiece_lh_₃(_lh_showPiece_arg1¹) = case _lh_showPiece_arg1¹ of {
//│ 	X  => 
//│ 		let t²⁷ = (fun ys³⁰ -> ys³⁰)
//│ 		in let h²⁷ = 'X'
//│ 		in (fun ys³¹ -> 
//│ 			let t²⁸ = mappend_lh_₆(t²⁷, ys³¹)
//│ 			in let h²⁸ = h²⁷
//│ 			in (fun ys³² -> 
//│ 				let t²⁹ = mappend_lh_₅(t²⁸, ys³²)
//│ 				in let h²⁹ = h²⁸
//│ 				in (fun _lh_dummy⁷ -> (1 + length_lh_₁(t²⁹)))))
//│ 	| O  => 
//│ 		let t³⁰ = (fun ys³³ -> ys³³)
//│ 		in let h³⁰ = 'O'
//│ 		in (fun ys³⁴ -> 
//│ 			let t³¹ = mappend_lh_₆(t³⁰, ys³⁴)
//│ 			in let h³¹ = h³⁰
//│ 			in (fun ys³⁵ -> 
//│ 				let t³² = mappend_lh_₅(t³¹, ys³⁵)
//│ 				in let h³² = h³¹
//│ 				in (fun _lh_dummy⁸ -> (1 + length_lh_₁(t³²)))))
//│ 	| Empty  => 
//│ 		let t³³ = (fun ys³⁶ -> ys³⁶)
//│ 		in let h³³ = ' '
//│ 		in (fun ys³⁷ -> 
//│ 			let t³⁴ = mappend_lh_₆(t³³, ys³⁷)
//│ 			in let h³⁴ = h³³
//│ 			in (fun ys³⁸ -> 
//│ 				let t³⁵ = mappend_lh_₅(t³⁴, ys³⁸)
//│ 				in let h³⁵ = h³⁴
//│ 				in (fun _lh_dummy⁹ -> (1 + length_lh_₁(t³⁵)))))
//│ 	| _  => error⁰}
//│ def showPiece_lh_₄(_lh_showPiece_arg1⁴) = case _lh_showPiece_arg1⁴ of {
//│ 	X  => 
//│ 		let t⁶⁷ = (fun ys⁷⁵ -> ys⁷⁵)
//│ 		in let h⁶⁷ = 'X'
//│ 		in (fun ys⁷⁶ -> 
//│ 			let t⁶⁸ = mappend_lh_₁₇(t⁶⁷, ys⁷⁶)
//│ 			in let h⁶⁸ = h⁶⁷
//│ 			in (fun ys⁷⁷ -> 
//│ 				let t⁶⁹ = mappend_lh_₁₈(t⁶⁸, ys⁷⁷)
//│ 				in let h⁶⁹ = h⁶⁸
//│ 				in (fun ys⁷⁸ -> 
//│ 					let t⁷⁰ = mappend_lh_₈(t⁶⁹, ys⁷⁸)
//│ 					in let h⁷⁰ = h⁶⁹
//│ 					in (fun ys⁷⁹ -> 
//│ 						let t⁷¹ = mappend_lh_₇(t⁷⁰, ys⁷⁹)
//│ 						in let h⁷¹ = h⁷⁰
//│ 						in (fun ys⁸⁰ -> 
//│ 							let t⁷² = mappend_lh_₆(t⁷¹, ys⁸⁰)
//│ 							in let h⁷² = h⁷¹
//│ 							in (fun ys⁸¹ -> 
//│ 								let t⁷³ = mappend_lh_₅(t⁷², ys⁸¹)
//│ 								in let h⁷³ = h⁷²
//│ 								in (fun _lh_dummy¹⁴ -> (1 + length_lh_₁(t⁷³)))))))))
//│ 	| O  => 
//│ 		let t⁷⁴ = (fun ys⁸² -> ys⁸²)
//│ 		in let h⁷⁴ = 'O'
//│ 		in (fun ys⁸³ -> 
//│ 			let t⁷⁵ = mappend_lh_₁₇(t⁷⁴, ys⁸³)
//│ 			in let h⁷⁵ = h⁷⁴
//│ 			in (fun ys⁸⁴ -> 
//│ 				let t⁷⁶ = mappend_lh_₁₈(t⁷⁵, ys⁸⁴)
//│ 				in let h⁷⁶ = h⁷⁵
//│ 				in (fun ys⁸⁵ -> 
//│ 					let t⁷⁷ = mappend_lh_₈(t⁷⁶, ys⁸⁵)
//│ 					in let h⁷⁷ = h⁷⁶
//│ 					in (fun ys⁸⁶ -> 
//│ 						let t⁷⁸ = mappend_lh_₇(t⁷⁷, ys⁸⁶)
//│ 						in let h⁷⁸ = h⁷⁷
//│ 						in (fun ys⁸⁷ -> 
//│ 							let t⁷⁹ = mappend_lh_₆(t⁷⁸, ys⁸⁷)
//│ 							in let h⁷⁹ = h⁷⁸
//│ 							in (fun ys⁸⁸ -> 
//│ 								let t⁸⁰ = mappend_lh_₅(t⁷⁹, ys⁸⁸)
//│ 								in let h⁸⁰ = h⁷⁹
//│ 								in (fun _lh_dummy¹⁵ -> (1 + length_lh_₁(t⁸⁰)))))))))
//│ 	| Empty  => 
//│ 		let t⁸¹ = (fun ys⁸⁹ -> ys⁸⁹)
//│ 		in let h⁸¹ = ' '
//│ 		in (fun ys⁹⁰ -> 
//│ 			let t⁸² = mappend_lh_₁₇(t⁸¹, ys⁹⁰)
//│ 			in let h⁸² = h⁸¹
//│ 			in (fun ys⁹¹ -> 
//│ 				let t⁸³ = mappend_lh_₁₈(t⁸², ys⁹¹)
//│ 				in let h⁸³ = h⁸²
//│ 				in (fun ys⁹² -> 
//│ 					let t⁸⁴ = mappend_lh_₈(t⁸³, ys⁹²)
//│ 					in let h⁸⁴ = h⁸³
//│ 					in (fun ys⁹³ -> 
//│ 						let t⁸⁵ = mappend_lh_₇(t⁸⁴, ys⁹³)
//│ 						in let h⁸⁵ = h⁸⁴
//│ 						in (fun ys⁹⁴ -> 
//│ 							let t⁸⁶ = mappend_lh_₆(t⁸⁵, ys⁹⁴)
//│ 							in let h⁸⁶ = h⁸⁵
//│ 							in (fun ys⁹⁵ -> 
//│ 								let t⁸⁷ = mappend_lh_₅(t⁸⁶, ys⁹⁵)
//│ 								in let h⁸⁷ = h⁸⁶
//│ 								in (fun _lh_dummy¹⁶ -> (1 + length_lh_₁(t⁸⁷)))))))))
//│ 	| _  => error⁰}
//│ def showPiece_lh_₅(_lh_showPiece_arg1⁶) = case _lh_showPiece_arg1⁶ of {
//│ 	X  => 
//│ 		let t¹⁸¹ = (fun ys¹⁷⁴ -> ys¹⁷⁴)
//│ 		in let h¹⁸¹ = 'X'
//│ 		in (fun ys¹⁷⁵ -> 
//│ 			let t¹⁸² = mappend_lh_₁₉(t¹⁸¹, ys¹⁷⁵)
//│ 			in let h¹⁸² = h¹⁸¹
//│ 			in (fun ys¹⁷⁶ -> 
//│ 				let t¹⁸³ = mappend_lh_₁₆(t¹⁸², ys¹⁷⁶)
//│ 				in let h¹⁸³ = h¹⁸²
//│ 				in (fun ys¹⁷⁷ -> 
//│ 					let t¹⁸⁴ = mappend_lh_₁₇(t¹⁸³, ys¹⁷⁷)
//│ 					in let h¹⁸⁴ = h¹⁸³
//│ 					in (fun ys¹⁷⁸ -> 
//│ 						let t¹⁸⁵ = mappend_lh_₁₈(t¹⁸⁴, ys¹⁷⁸)
//│ 						in let h¹⁸⁵ = h¹⁸⁴
//│ 						in (fun ys¹⁷⁹ -> 
//│ 							let t¹⁸⁶ = mappend_lh_₈(t¹⁸⁵, ys¹⁷⁹)
//│ 							in let h¹⁸⁶ = h¹⁸⁵
//│ 							in (fun ys¹⁸⁰ -> 
//│ 								let t¹⁸⁷ = mappend_lh_₇(t¹⁸⁶, ys¹⁸⁰)
//│ 								in let h¹⁸⁷ = h¹⁸⁶
//│ 								in (fun ys¹⁸¹ -> 
//│ 									let t¹⁸⁸ = mappend_lh_₆(t¹⁸⁷, ys¹⁸¹)
//│ 									in let h¹⁸⁸ = h¹⁸⁷
//│ 									in (fun ys¹⁸² -> 
//│ 										let t¹⁸⁹ = mappend_lh_₅(t¹⁸⁸, ys¹⁸²)
//│ 										in let h¹⁸⁹ = h¹⁸⁸
//│ 										in (fun _lh_dummy³⁷ -> (1 + length_lh_₁(t¹⁸⁹)))))))))))
//│ 	| O  => 
//│ 		let t¹⁹⁰ = (fun ys¹⁸³ -> ys¹⁸³)
//│ 		in let h¹⁹⁰ = 'O'
//│ 		in (fun ys¹⁸⁴ -> 
//│ 			let t¹⁹¹ = mappend_lh_₁₉(t¹⁹⁰, ys¹⁸⁴)
//│ 			in let h¹⁹¹ = h¹⁹⁰
//│ 			in (fun ys¹⁸⁵ -> 
//│ 				let t¹⁹² = mappend_lh_₁₆(t¹⁹¹, ys¹⁸⁵)
//│ 				in let h¹⁹² = h¹⁹¹
//│ 				in (fun ys¹⁸⁶ -> 
//│ 					let t¹⁹³ = mappend_lh_₁₇(t¹⁹², ys¹⁸⁶)
//│ 					in let h¹⁹³ = h¹⁹²
//│ 					in (fun ys¹⁸⁷ -> 
//│ 						let t¹⁹⁴ = mappend_lh_₁₈(t¹⁹³, ys¹⁸⁷)
//│ 						in let h¹⁹⁴ = h¹⁹³
//│ 						in (fun ys¹⁸⁸ -> 
//│ 							let t¹⁹⁵ = mappend_lh_₈(t¹⁹⁴, ys¹⁸⁸)
//│ 							in let h¹⁹⁵ = h¹⁹⁴
//│ 							in (fun ys¹⁸⁹ -> 
//│ 								let t¹⁹⁶ = mappend_lh_₇(t¹⁹⁵, ys¹⁸⁹)
//│ 								in let h¹⁹⁶ = h¹⁹⁵
//│ 								in (fun ys¹⁹⁰ -> 
//│ 									let t¹⁹⁷ = mappend_lh_₆(t¹⁹⁶, ys¹⁹⁰)
//│ 									in let h¹⁹⁷ = h¹⁹⁶
//│ 									in (fun ys¹⁹¹ -> 
//│ 										let t¹⁹⁸ = mappend_lh_₅(t¹⁹⁷, ys¹⁹¹)
//│ 										in let h¹⁹⁸ = h¹⁹⁷
//│ 										in (fun _lh_dummy³⁸ -> (1 + length_lh_₁(t¹⁹⁸)))))))))))
//│ 	| Empty  => 
//│ 		let t¹⁹⁹ = (fun ys¹⁹² -> ys¹⁹²)
//│ 		in let h¹⁹⁹ = ' '
//│ 		in (fun ys¹⁹³ -> 
//│ 			let t²⁰⁰ = mappend_lh_₁₉(t¹⁹⁹, ys¹⁹³)
//│ 			in let h²⁰⁰ = h¹⁹⁹
//│ 			in (fun ys¹⁹⁴ -> 
//│ 				let t²⁰¹ = mappend_lh_₁₆(t²⁰⁰, ys¹⁹⁴)
//│ 				in let h²⁰¹ = h²⁰⁰
//│ 				in (fun ys¹⁹⁵ -> 
//│ 					let t²⁰² = mappend_lh_₁₇(t²⁰¹, ys¹⁹⁵)
//│ 					in let h²⁰² = h²⁰¹
//│ 					in (fun ys¹⁹⁶ -> 
//│ 						let t²⁰³ = mappend_lh_₁₈(t²⁰², ys¹⁹⁶)
//│ 						in let h²⁰³ = h²⁰²
//│ 						in (fun ys¹⁹⁷ -> 
//│ 							let t²⁰⁴ = mappend_lh_₈(t²⁰³, ys¹⁹⁷)
//│ 							in let h²⁰⁴ = h²⁰³
//│ 							in (fun ys¹⁹⁸ -> 
//│ 								let t²⁰⁵ = mappend_lh_₇(t²⁰⁴, ys¹⁹⁸)
//│ 								in let h²⁰⁵ = h²⁰⁴
//│ 								in (fun ys¹⁹⁹ -> 
//│ 									let t²⁰⁶ = mappend_lh_₆(t²⁰⁵, ys¹⁹⁹)
//│ 									in let h²⁰⁶ = h²⁰⁵
//│ 									in (fun ys²⁰⁰ -> 
//│ 										let t²⁰⁷ = mappend_lh_₅(t²⁰⁶, ys²⁰⁰)
//│ 										in let h²⁰⁷ = h²⁰⁶
//│ 										in (fun _lh_dummy³⁹ -> (1 + length_lh_₁(t²⁰⁷)))))))))))
//│ 	| _  => error⁰}
//│ def showPiece_lh_₆(_lh_showPiece_arg1⁸) = case _lh_showPiece_arg1⁸ of {
//│ 	X  => 
//│ 		let t²³⁸ = (fun ys²²⁷ -> ys²²⁷)
//│ 		in let h²³⁸ = 'X'
//│ 		in (fun ys²²⁸ -> 
//│ 			let t²³⁹ = mappend_lh_₈(t²³⁸, ys²²⁸)
//│ 			in let h²³⁹ = h²³⁸
//│ 			in (fun ys²²⁹ -> 
//│ 				let t²⁴⁰ = mappend_lh_₇(t²³⁹, ys²²⁹)
//│ 				in let h²⁴⁰ = h²³⁹
//│ 				in (fun ys²³⁰ -> 
//│ 					let t²⁴¹ = mappend_lh_₆(t²⁴⁰, ys²³⁰)
//│ 					in let h²⁴¹ = h²⁴⁰
//│ 					in (fun ys²³¹ -> 
//│ 						let t²⁴² = mappend_lh_₅(t²⁴¹, ys²³¹)
//│ 						in let h²⁴² = h²⁴¹
//│ 						in (fun _lh_dummy⁴⁷ -> (1 + length_lh_₁(t²⁴²)))))))
//│ 	| O  => 
//│ 		let t²⁴³ = (fun ys²³² -> ys²³²)
//│ 		in let h²⁴³ = 'O'
//│ 		in (fun ys²³³ -> 
//│ 			let t²⁴⁴ = mappend_lh_₈(t²⁴³, ys²³³)
//│ 			in let h²⁴⁴ = h²⁴³
//│ 			in (fun ys²³⁴ -> 
//│ 				let t²⁴⁵ = mappend_lh_₇(t²⁴⁴, ys²³⁴)
//│ 				in let h²⁴⁵ = h²⁴⁴
//│ 				in (fun ys²³⁵ -> 
//│ 					let t²⁴⁶ = mappend_lh_₆(t²⁴⁵, ys²³⁵)
//│ 					in let h²⁴⁶ = h²⁴⁵
//│ 					in (fun ys²³⁶ -> 
//│ 						let t²⁴⁷ = mappend_lh_₅(t²⁴⁶, ys²³⁶)
//│ 						in let h²⁴⁷ = h²⁴⁶
//│ 						in (fun _lh_dummy⁴⁸ -> (1 + length_lh_₁(t²⁴⁷)))))))
//│ 	| Empty  => 
//│ 		let t²⁴⁸ = (fun ys²³⁷ -> ys²³⁷)
//│ 		in let h²⁴⁸ = ' '
//│ 		in (fun ys²³⁸ -> 
//│ 			let t²⁴⁹ = mappend_lh_₈(t²⁴⁸, ys²³⁸)
//│ 			in let h²⁴⁹ = h²⁴⁸
//│ 			in (fun ys²³⁹ -> 
//│ 				let t²⁵⁰ = mappend_lh_₇(t²⁴⁹, ys²³⁹)
//│ 				in let h²⁵⁰ = h²⁴⁹
//│ 				in (fun ys²⁴⁰ -> 
//│ 					let t²⁵¹ = mappend_lh_₆(t²⁵⁰, ys²⁴⁰)
//│ 					in let h²⁵¹ = h²⁵⁰
//│ 					in (fun ys²⁴¹ -> 
//│ 						let t²⁵² = mappend_lh_₅(t²⁵¹, ys²⁴¹)
//│ 						in let h²⁵² = h²⁵¹
//│ 						in (fun _lh_dummy⁴⁹ -> (1 + length_lh_₁(t²⁵²)))))))
//│ 	| _  => error⁰}
//│ def showPiece_lh_₇(_lh_showPiece_arg1⁵) = case _lh_showPiece_arg1⁵ of {
//│ 	X  => [LH_C 'X' [LH_N]]
//│ 	| O  => [LH_C 'O' [LH_N]]
//│ 	| Empty  => [LH_C ' ' [LH_N]]
//│ 	| _  => error⁰}
//│ def showPiece_lh_₈(_lh_showPiece_arg1³) = case _lh_showPiece_arg1³ of {
//│ 	X  => [LH_C 'X' [LH_N]]
//│ 	| O  => [LH_C 'O' [LH_N]]
//│ 	| Empty  => [LH_C ' ' [LH_N]]
//│ 	| _  => error⁰}
//│ def showPiece_lh_₉(_lh_showPiece_arg1²) = case _lh_showPiece_arg1² of {
//│ 	X  => [LH_C 'X' [LH_N]]
//│ 	| O  => [LH_C 'O' [LH_N]]
//│ 	| Empty  => [LH_C ' ' [LH_N]]
//│ 	| _  => error⁰}
//│ def showRow_lh_₁(_lh_showRow_arg1⁰) = case _lh_showRow_arg1⁰ of {
//│ 	LH_C _lh_showRow_LH_C_0⁰ _lh_showRow_LH_C_1⁰ => case _lh_showRow_LH_C_1⁰ of {
//│ 		LH_C _lh_showRow_LH_C_0¹ _lh_showRow_LH_C_1¹ => case _lh_showRow_LH_C_1¹ of {
//│ 			LH_C _lh_showRow_LH_C_0² _lh_showRow_LH_C_1² => case _lh_showRow_LH_C_1² of {
//│ 				LH_N  => mappend_lh_₁₂(mappend_lh_₁₃(mappend_lh_₁₅(mappend_lh_₁₄(showPiece_lh_₁(_lh_showRow_LH_C_0⁰), 
//│ 					let t¹⁷ = (fun ys¹⁹ -> ys¹⁹)
//│ 					in let h¹⁷ = '|'
//│ 					in (fun ys²⁰ -> 
//│ 						let t¹⁸ = mappend_lh_₁₅(t¹⁷, ys²⁰)
//│ 						in let h¹⁸ = h¹⁷
//│ 						in (fun ys²¹ -> 
//│ 							let t¹⁹ = mappend_lh_₁₃(t¹⁸, ys²¹)
//│ 							in let h¹⁹ = h¹⁸
//│ 							in (fun ys²² -> 
//│ 								let t²⁰ = mappend_lh_₁₂(t¹⁹, ys²²)
//│ 								in let h²⁰ = h¹⁹
//│ 								in (fun ys²³ -> 
//│ 									let t²¹ = mappend_lh_₆(t²⁰, ys²³)
//│ 									in let h²¹ = h²⁰
//│ 									in (fun ys²⁴ -> 
//│ 										let t²² = mappend_lh_₅(t²¹, ys²⁴)
//│ 										in let h²² = h²¹
//│ 										in (fun _lh_dummy⁵ -> (1 + length_lh_₁(t²²))))))))), showPiece_lh_₂(_lh_showRow_LH_C_0¹)), 
//│ 					let t²³ = (fun ys²⁵ -> ys²⁵)
//│ 					in let h²³ = '|'
//│ 					in (fun ys²⁶ -> 
//│ 						let t²⁴ = mappend_lh_₁₂(t²³, ys²⁶)
//│ 						in let h²⁴ = h²³
//│ 						in (fun ys²⁷ -> 
//│ 							let t²⁵ = mappend_lh_₆(t²⁴, ys²⁷)
//│ 							in let h²⁵ = h²⁴
//│ 							in (fun ys²⁸ -> 
//│ 								let t²⁶ = mappend_lh_₅(t²⁵, ys²⁸)
//│ 								in let h²⁶ = h²⁵
//│ 								in (fun _lh_dummy⁶ -> (1 + length_lh_₁(t²⁶))))))), showPiece_lh_₃(_lh_showRow_LH_C_0²))
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def showRow_lh_₂(_lh_showRow_arg1¹) = case _lh_showRow_arg1¹ of {
//│ 	LH_C _lh_showRow_LH_C_0³ _lh_showRow_LH_C_1³ => case _lh_showRow_LH_C_1³ of {
//│ 		LH_C _lh_showRow_LH_C_0⁴ _lh_showRow_LH_C_1⁴ => case _lh_showRow_LH_C_1⁴ of {
//│ 			LH_C _lh_showRow_LH_C_0⁵ _lh_showRow_LH_C_1⁵ => case _lh_showRow_LH_C_1⁵ of {
//│ 				LH_N  => mappend_lh_₁₈(mappend_lh_₁₇(mappend_lh_₁₆(mappend_lh_₁₉(showPiece_lh_₅(_lh_showRow_LH_C_0³), 
//│ 					let t³⁸ = (fun ys⁴¹ -> ys⁴¹)
//│ 					in let h³⁸ = '|'
//│ 					in (fun ys⁴² -> 
//│ 						let t³⁹ = mappend_lh_₁₆(t³⁸, ys⁴²)
//│ 						in let h³⁹ = h³⁸
//│ 						in (fun ys⁴³ -> 
//│ 							let t⁴⁰ = mappend_lh_₁₇(t³⁹, ys⁴³)
//│ 							in let h⁴⁰ = h³⁹
//│ 							in (fun ys⁴⁴ -> 
//│ 								let t⁴¹ = mappend_lh_₁₈(t⁴⁰, ys⁴⁴)
//│ 								in let h⁴¹ = h⁴⁰
//│ 								in (fun ys⁴⁵ -> 
//│ 									let t⁴² = mappend_lh_₈(t⁴¹, ys⁴⁵)
//│ 									in let h⁴² = h⁴¹
//│ 									in (fun ys⁴⁶ -> 
//│ 										let t⁴³ = mappend_lh_₇(t⁴², ys⁴⁶)
//│ 										in let h⁴³ = h⁴²
//│ 										in (fun ys⁴⁷ -> 
//│ 											let t⁴⁴ = mappend_lh_₆(t⁴³, ys⁴⁷)
//│ 											in let h⁴⁴ = h⁴³
//│ 											in (fun ys⁴⁸ -> 
//│ 												let t⁴⁵ = mappend_lh_₅(t⁴⁴, ys⁴⁸)
//│ 												in let h⁴⁵ = h⁴⁴
//│ 												in (fun _lh_dummy¹¹ -> (1 + length_lh_₁(t⁴⁵))))))))))), showPiece_lh_₄(_lh_showRow_LH_C_0⁴)), 
//│ 					let t⁴⁶ = (fun ys⁴⁹ -> ys⁴⁹)
//│ 					in let h⁴⁶ = '|'
//│ 					in (fun ys⁵⁰ -> 
//│ 						let t⁴⁷ = mappend_lh_₁₈(t⁴⁶, ys⁵⁰)
//│ 						in let h⁴⁷ = h⁴⁶
//│ 						in (fun ys⁵¹ -> 
//│ 							let t⁴⁸ = mappend_lh_₈(t⁴⁷, ys⁵¹)
//│ 							in let h⁴⁸ = h⁴⁷
//│ 							in (fun ys⁵² -> 
//│ 								let t⁴⁹ = mappend_lh_₇(t⁴⁸, ys⁵²)
//│ 								in let h⁴⁹ = h⁴⁸
//│ 								in (fun ys⁵³ -> 
//│ 									let t⁵⁰ = mappend_lh_₆(t⁴⁹, ys⁵³)
//│ 									in let h⁵⁰ = h⁴⁹
//│ 									in (fun ys⁵⁴ -> 
//│ 										let t⁵¹ = mappend_lh_₅(t⁵⁰, ys⁵⁴)
//│ 										in let h⁵¹ = h⁵⁰
//│ 										in (fun _lh_dummy¹² -> (1 + length_lh_₁(t⁵¹))))))))), showPiece_lh_₆(_lh_showRow_LH_C_0⁵))
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def showRow_lh_₃(_lh_showRow_arg1²) = case _lh_showRow_arg1² of {
//│ 	LH_C _lh_showRow_LH_C_0⁶ _lh_showRow_LH_C_1⁶ => case _lh_showRow_LH_C_1⁶ of {
//│ 		LH_C _lh_showRow_LH_C_0⁷ _lh_showRow_LH_C_1⁷ => case _lh_showRow_LH_C_1⁷ of {
//│ 			LH_C _lh_showRow_LH_C_0⁸ _lh_showRow_LH_C_1⁸ => case _lh_showRow_LH_C_1⁸ of {
//│ 				LH_N  => mappend_lh_₂₁(mappend_lh_₂₀(mappend_lh_₂₁(mappend_lh_₂₁(showPiece_lh_₇(_lh_showRow_LH_C_0⁶), [LH_C '|' [LH_N]]), showPiece_lh_₉(_lh_showRow_LH_C_0⁷)), [LH_C '|' [LH_N]]), showPiece_lh_₈(_lh_showRow_LH_C_0⁸))
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def static_lh_₁(_lh_static_arg1⁰) = interpret_lh_₁(0, map_lh_₃(score_lh_₁(_lh_static_arg1⁰), wins_lh_₁))
//│ def static_lh_₂(_lh_static_arg1¹) = interpret_lh_₂(0, map_lh_₆(score_lh_₂(_lh_static_arg1¹), wins_lh_₂))
//│ def static_lh_₃(_lh_static_arg1²) = interpret_lh_₂(0, map_lh_₆(score_lh_₂(_lh_static_arg1²), wins_lh_₂))
//│ def sumAux_lh_₁(ls⁶, a²) = case ls⁶ of {
//│ 	LH_N  => a²
//│ 	| LH_C h²⁰⁸ t²⁰⁸ => sumAux_lh_₁(t²⁰⁸, (a² + h²⁰⁸))}
//│ def sum_lh_₁(ls²) = sumAux_lh_₁(ls², 0)
//│ def testBoard_lh_₁ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₀ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₁ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₂ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₃ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₄ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₅ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₆ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₇ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₈ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₉ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₀ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₁ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₂ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₃ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₄ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₅ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₆ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₇(ys⁷⁴) = 
//│ 	let t⁶⁴ = 	
//│ 		let t⁶⁵ = 	
//│ 			let t⁶⁶ = (fun ys⁷¹ -> ys⁷¹)
//│ 			in let h⁶⁴ = [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]]
//│ 			in (fun ys⁷² -> [LH_C h⁶⁴ mappend_lh_₂(t⁶⁶, ys⁷²)])
//│ 		in let h⁶⁵ = [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]]
//│ 		in (fun ys⁷³ -> [LH_C h⁶⁵ mappend_lh_₂(t⁶⁵, ys⁷³)])
//│ 	in let h⁶⁶ = [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]]
//│ 	in [LH_C h⁶⁶ mappend_lh_₂(t⁶⁴, ys⁷⁴)]
//│ def testBoard_lh_₂₈ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₉ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₃ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₄ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₅ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₆ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₇ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₈ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₉ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testMinimax_nofib_lh_₁(_lh_testMinimax_nofib_arg1⁰) = length_lh_₁(prog_lh_₁(_lh_testMinimax_nofib_arg1⁰))
//│ def win1_lh_₁ = [LH_C [LH_C 1 [LH_C 1 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def win2_lh_₁ = [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 1 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def win3_lh_₁ = [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 1 [LH_C 1 [LH_N]]]] [LH_N]]]]
//│ def win4_lh_₁ = [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def win5_lh_₁ = [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def win6_lh_₁ = [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_N]]]]
//│ def win7_lh_₁ = [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_N]]]]
//│ def win8_lh_₁ = [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def wins_lh_₁(f²¹, _lh_interpret_arg1⁹) = 
//│ 	let t²⁵⁸ = 	
//│ 		let t²⁵⁹ = 	
//│ 			let t²⁶⁰ = 	
//│ 				let t²⁶¹ = 	
//│ 					let t²⁶² = 	
//│ 						let t²⁶³ = 	
//│ 							let t²⁶⁴ = 	
//│ 								let t²⁶⁵ = (fun f¹³ -> (fun _lh_interpret_arg1¹ -> [Score _lh_interpret_arg1¹]))
//│ 								in let h²⁵⁸ = win8_lh_₁
//│ 								in (fun f¹⁴ -> 
//│ 									let _lh_interpret_LH_C_1¹ = map_lh_₃(f¹⁴, t²⁶⁵)
//│ 									in let _lh_interpret_LH_C_0¹ = f¹⁴(h²⁵⁸)
//│ 									in (fun _lh_interpret_arg1² -> case _lh_interpret_LH_C_0¹ of {
//│ 										Score _lh_interpret_Score_0¹ => interpret_lh_₁((_lh_interpret_arg1² + _lh_interpret_Score_0¹), _lh_interpret_LH_C_1¹)
//│ 										| XWin  => [XWin]
//│ 										| OWin  => [OWin]
//│ 										| _  => error⁰}))
//│ 							in let h²⁵⁹ = win7_lh_₁
//│ 							in (fun f¹⁵ -> 
//│ 								let _lh_interpret_LH_C_1² = map_lh_₃(f¹⁵, t²⁶⁴)
//│ 								in let _lh_interpret_LH_C_0² = f¹⁵(h²⁵⁹)
//│ 								in (fun _lh_interpret_arg1³ -> case _lh_interpret_LH_C_0² of {
//│ 									Score _lh_interpret_Score_0² => interpret_lh_₁((_lh_interpret_arg1³ + _lh_interpret_Score_0²), _lh_interpret_LH_C_1²)
//│ 									| XWin  => [XWin]
//│ 									| OWin  => [OWin]
//│ 									| _  => error⁰}))
//│ 						in let h²⁶⁰ = win6_lh_₁
//│ 						in (fun f¹⁶ -> 
//│ 							let _lh_interpret_LH_C_1³ = map_lh_₃(f¹⁶, t²⁶³)
//│ 							in let _lh_interpret_LH_C_0³ = f¹⁶(h²⁶⁰)
//│ 							in (fun _lh_interpret_arg1⁴ -> case _lh_interpret_LH_C_0³ of {
//│ 								Score _lh_interpret_Score_0³ => interpret_lh_₁((_lh_interpret_arg1⁴ + _lh_interpret_Score_0³), _lh_interpret_LH_C_1³)
//│ 								| XWin  => [XWin]
//│ 								| OWin  => [OWin]
//│ 								| _  => error⁰}))
//│ 					in let h²⁶¹ = win5_lh_₁
//│ 					in (fun f¹⁷ -> 
//│ 						let _lh_interpret_LH_C_1⁴ = map_lh_₃(f¹⁷, t²⁶²)
//│ 						in let _lh_interpret_LH_C_0⁴ = f¹⁷(h²⁶¹)
//│ 						in (fun _lh_interpret_arg1⁵ -> case _lh_interpret_LH_C_0⁴ of {
//│ 							Score _lh_interpret_Score_0⁴ => interpret_lh_₁((_lh_interpret_arg1⁵ + _lh_interpret_Score_0⁴), _lh_interpret_LH_C_1⁴)
//│ 							| XWin  => [XWin]
//│ 							| OWin  => [OWin]
//│ 							| _  => error⁰}))
//│ 				in let h²⁶² = win4_lh_₁
//│ 				in (fun f¹⁸ -> 
//│ 					let _lh_interpret_LH_C_1⁵ = map_lh_₃(f¹⁸, t²⁶¹)
//│ 					in let _lh_interpret_LH_C_0⁵ = f¹⁸(h²⁶²)
//│ 					in (fun _lh_interpret_arg1⁶ -> case _lh_interpret_LH_C_0⁵ of {
//│ 						Score _lh_interpret_Score_0⁵ => interpret_lh_₁((_lh_interpret_arg1⁶ + _lh_interpret_Score_0⁵), _lh_interpret_LH_C_1⁵)
//│ 						| XWin  => [XWin]
//│ 						| OWin  => [OWin]
//│ 						| _  => error⁰}))
//│ 			in let h²⁶³ = win3_lh_₁
//│ 			in (fun f¹⁹ -> 
//│ 				let _lh_interpret_LH_C_1⁶ = map_lh_₃(f¹⁹, t²⁶⁰)
//│ 				in let _lh_interpret_LH_C_0⁶ = f¹⁹(h²⁶³)
//│ 				in (fun _lh_interpret_arg1⁷ -> case _lh_interpret_LH_C_0⁶ of {
//│ 					Score _lh_interpret_Score_0⁶ => interpret_lh_₁((_lh_interpret_arg1⁷ + _lh_interpret_Score_0⁶), _lh_interpret_LH_C_1⁶)
//│ 					| XWin  => [XWin]
//│ 					| OWin  => [OWin]
//│ 					| _  => error⁰}))
//│ 		in let h²⁶⁴ = win2_lh_₁
//│ 		in (fun f²⁰ -> 
//│ 			let _lh_interpret_LH_C_1⁷ = map_lh_₃(f²⁰, t²⁵⁹)
//│ 			in let _lh_interpret_LH_C_0⁷ = f²⁰(h²⁶⁴)
//│ 			in (fun _lh_interpret_arg1⁸ -> case _lh_interpret_LH_C_0⁷ of {
//│ 				Score _lh_interpret_Score_0⁷ => interpret_lh_₁((_lh_interpret_arg1⁸ + _lh_interpret_Score_0⁷), _lh_interpret_LH_C_1⁷)
//│ 				| XWin  => [XWin]
//│ 				| OWin  => [OWin]
//│ 				| _  => error⁰}))
//│ 	in let h²⁶⁵ = win1_lh_₁
//│ 	in let _lh_interpret_LH_C_1⁸ = map_lh_₃(f²¹, t²⁵⁸)
//│ 	in let _lh_interpret_LH_C_0⁸ = f²¹(h²⁶⁵)
//│ 	in case _lh_interpret_LH_C_0⁸ of {
//│ 		Score _lh_interpret_Score_0⁸ => interpret_lh_₁((_lh_interpret_arg1⁹ + _lh_interpret_Score_0⁸), _lh_interpret_LH_C_1⁸)
//│ 		| XWin  => [XWin]
//│ 		| OWin  => [OWin]
//│ 		| _  => error⁰}
//│ def wins_lh_₂ = [LH_C win1_lh_₁ [LH_C win2_lh_₁ [LH_C win3_lh_₁ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]]]]
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
