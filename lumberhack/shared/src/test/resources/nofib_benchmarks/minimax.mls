

:lhInHaskell
:lhGenOCaml
and [] = True
and (h:t) = if h then and t else False
type Win = [[Int]]
type Board = [Row]
type Row = [Piece]
data Piece = X | O | Empty deriving Eq
data Evaluation = XWin | OWin | Score Int deriving Eq
data Tree a = Branch a [Tree a]
type Player = Evaluation -> Evaluation -> Evaluation
type Move = (Board,Evaluation)
showEvaluation XWin = "XWin"
showEvaluation OWin = "OWin"
showEvaluation (Score a) = "Score" ++ (string_of_int a)
wins :: [Win]
wins = [win1,win2,win3,win4,win5,win6,win7,win8]
win1,win2,win3,win4,win5,win6,win7,win8 :: Win
win1 = [[1,1,1],
        [0,0,0],
        [0,0,0]]
win2 = [[0,0,0],
        [1,1,1],
        [0,0,0]]
win3 = [[0,0,0],
        [0,0,0],
        [1,1,1]]
win4 = [[1,0,0],
        [1,0,0],
        [1,0,0]]
win5 = [[0,1,0],
        [0,1,0],
        [0,1,0]]
win6 = [[0,0,1],
        [0,0,1],
        [0,0,1]]
win7 = [[1,0,0],
        [0,1,0],
        [0,0,1]]
win8 = [[0,0,1],
        [0,1,0],
        [1,0,0]]
--------------------
showBoard :: Board -> String
showBoard [r1,r2,r3] =  (showRow r1) ++ "|------|" ++ (showRow r2) ++ "|------|" ++ (showRow r3) ++ "||"
showBoard _ = error
showRow [p1,p2,p3] = (showPiece p1) ++ "|" ++ (showPiece p2) ++ "|" ++ (showPiece p3)
showRow _ = error
showPiece :: Piece -> String
showPiece X = "X"
showPiece O = "O"
showPiece Empty = " "
placePiece :: Piece -> Board -> (Int,Int) -> [Board]
placePiece p board pos =
  if not (empty pos board) then
    []
  else case board of {[r1,r2,r3] -> case pos of {
    (1,x) -> [[insert p r1 x,r2,r3]];
    (2,x) -> [[r1,insert p r2 x,r3]];
    (3,x) -> [[r1,r2,insert p r3 x]]
  }; _ -> error}
insert :: Piece -> Row -> Int -> Row
insert p [p1,p2,p3] 1 = [p,p2,p3]
insert p [p1,p2,p3] 2 = [p1,p,p3]
insert p [p1,p2,p3] 3 = [p1,p2,p]
insert _ _ _ = error
empty :: (Int,Int) -> Board -> Bool
empty (1,x) [r1,r2,r3] = empty' x r1
empty (2,x) [r1,r2,r3] = empty' x r2
empty (3,x) [r1,r2,r3] = empty' x r3
empty _ _ = error
empty' :: Int -> Row -> Bool
empty' 1 [Empty,_,_] = True
empty' 2 [_,Empty,_] = True
empty' 3 [_,_,Empty] = True
empty' _ _ = False
fullBoard b = and (map (\x -> not (polyEq x Empty)) (concat b))
--newPositions :: Piece -> Board -> [Board]
newPositions piece board = concat (map (placePiece piece board) [(x,y) | x<-[1..3], y <-[1..3]])
initialBoard :: Board
initialBoard = [[Empty,Empty,Empty], [Empty,Empty,Empty], [Empty,Empty,Empty]]
eval x =
  if x == 3 then
    XWin
  else if x == (0 - 3) then
    OWin
  else Score x
static :: Board -> Evaluation
static board = interpret 0 (map (score board) wins)
interpret :: Int -> [Evaluation] -> Evaluation
interpret x [] = (Score x)
interpret x ((Score y):l) = interpret (x+y) l
interpret x (XWin:l) = XWin
interpret x (OWin:l) = OWin
score :: Board -> Win -> Evaluation
score board win  = eval (sum (map sum (map2 (map2 scorePiece) board win)))
scorePiece :: Piece -> Int -> Int
scorePiece X score = score
scorePiece Empty _ = 0
scorePiece O score = 0-score
map2 :: (a -> b -> c) -> [a] -> [b] -> [c]
map2 f [] x = []
map2 f x [] = []
map2 f (x:xs) (y:ys) = (f x y):(map2 f xs ys)
------------------------
repTree :: (a->[a]) -> (a->[a])-> a -> (Tree a)
repTree f g a = Branch a (map (repTree g f) (f a))
mapTree :: (a -> b) -> (Tree a) -> (Tree b)
mapTree f (Branch a l) = Branch (f a) (map (mapTree f) l)
prune :: Int -> (Tree a) -> (Tree a)
prune 0 (Branch a l) = Branch a []
--should be:prune (n+1) (Branch a l) = Branch a (map (prune n) l)
prune n (Branch a l) =
  if n < 0 then
    error "Tree.prune: < 0"
  else
    Branch a (map (prune (n-1)) l)
------------------------
prog :: String -> String
prog input =
  let game = alternate X max' min' (board input) in
  "OXO|" ++ (concat (map showMove game))
  where
  board "doesnt happen" = testBoard ++ testBoard
  board _                = testBoard
testBoard = [[Empty,O,Empty],[Empty,X,Empty],[Empty,Empty,Empty]]
--------------------------
alternate :: Piece -> Player -> Player -> Board -> [Move]
alternate player f g board =
  if fullBoard board then []
  else if polyEq (static board) XWin then []
  else if polyEq (static board) OWin then []
  else
    let opposition = opposite player in
    let possibles = newPositions player board in
    let scores = map (bestMove opposition g f) possibles in
    let boardd_eval = best f possibles scores in
    case boardd_eval of { (boardd, eval) ->
      (boardd,eval):(alternate opposition g f boardd)
    }
opposite :: Piece -> Piece
opposite X = O
opposite O = X
opposite _ = error
best :: Player -> [Board] -> [Evaluation] -> Move
best f (b:bs) (s:ss) =
  let best' = \b -> \s -> \ls1 -> \ls2 -> case ls1 of {
    [] -> case ls2 of { [] -> (b, s); _ -> error };
    (b':bs) -> case ls2 of { (s':ss) -> if polyEq s (f s s') then best' b s bs ss else best' b' s' bs ss; _ -> error }
  } in
  best' b s bs ss
best f _ _ = error
showMove :: Move -> String
showMove (b,e) = (showEvaluation e) ++ "|" ++ (showBoard b)
bestMove :: Piece -> Player -> Player -> Board -> Evaluation
bestMove p f g = ((mise f g) . cropTree) . (mapTree static . searchTree p)
cropTree :: (Tree Evaluation) -> (Tree Evaluation)
cropTree (Branch a []) = (Branch a [])
cropTree (Branch (Score x) l) = Branch (Score x) (map cropTree l)
cropTree (Branch x l) = Branch x []
searchTree :: Piece -> Board -> (Tree Board)
searchTree p board = prune 5 (repTree (newPositions p) (newPositions (opposite p)) board)
mise :: Player -> Player -> (Tree Evaluation) -> Evaluation
mise f g (Branch a []) = a
mise f g (Branch _ l) = foldr f (g OWin XWin) (map (mise g f) l)
max' :: Evaluation -> Evaluation -> Evaluation
max' XWin _ = XWin
max' _ XWin = XWin
max' b OWin = b
max' OWin b = b
max' (Score x) (Score y) = if x>y then (Score x) else (Score y)
min' :: Evaluation -> Evaluation -> Evaluation
min' OWin _ = OWin
min' _ OWin = OWin
min' b XWin = b
min' XWin b = b
min' (Score x) (Score y) = if x<y then (Score x) else (Score y)
-------------------------------------
testMinimax_nofib n = length (prog n)
testMinimax_nofib $ primId "180000"
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> after expansion >>>>>>>>>>
//│ testMinimax_nofib_lh_₁(primId⁰([LH_C '1' [LH_C '8' [LH_C '0' [LH_C '0' [LH_C '0' [LH_C '0' [LH_N]]]]]]]))
//│ def alternate_lh_₁(_lh_alternate_arg1⁰, _lh_alternate_arg2⁰, _lh_alternate_arg3⁰, _lh_alternate_arg4⁰) = if fullBoard_lh_₁(_lh_alternate_arg4⁰) then [LH_N] else if polyEq⁰(static_lh_₁(_lh_alternate_arg4⁰), [XWin]) then [LH_N] else if polyEq⁰(static_lh_₂(_lh_alternate_arg4⁰), [OWin]) then [LH_N] else 
//│ 	let opposition⁰ = opposite_lh_₁(_lh_alternate_arg1⁰)
//│ 	in let possibles⁰ = newPositions_lh_₁(_lh_alternate_arg1⁰, _lh_alternate_arg4⁰)
//│ 	in let scores⁰ = map_lh_₂(bestMove_lh_₁(opposition⁰, _lh_alternate_arg3⁰, _lh_alternate_arg2⁰), possibles⁰)
//│ 	in let boardd_eval⁰ = best_lh_₁(_lh_alternate_arg2⁰, possibles⁰, scores⁰)
//│ 	in let _lh_matchIdent⁵ = boardd_eval⁰
//│ 	in case _lh_matchIdent⁵ of {
//│ 		LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰ => [LH_C [LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰] alternate_lh_₁(opposition⁰, _lh_alternate_arg3⁰, _lh_alternate_arg2⁰, _lh_alternate_LH_P2_0⁰)]}
//│ def and_lh_₁(_lh_and_arg1⁰) = case _lh_and_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_and_LH_C_0⁰ _lh_and_LH_C_1⁰ => if _lh_and_LH_C_0⁰ then and_lh_₁(_lh_and_LH_C_1⁰) else [False]}
//│ def bestMove_lh_₁(_lh_bestMove_arg1⁰, _lh_bestMove_arg2⁰, _lh_bestMove_arg3⁰, _lh_funcomp_x⁰) = (fun _lh_funcomp_x¹ -> mise_lh_₁(_lh_bestMove_arg2⁰, _lh_bestMove_arg3⁰, cropTree_lh_₁(_lh_funcomp_x¹)))((fun _lh_funcomp_x² -> mapTree_lh_₁(static_lh_₃, searchTree_lh_₁(_lh_bestMove_arg1⁰, _lh_funcomp_x²)))(_lh_funcomp_x⁰))
//│ def best_lh_₁(_lh_best_arg1⁰, _lh_best_arg2⁰, _lh_best_arg3⁰) = case _lh_best_arg2⁰ of {
//│ 	LH_C _lh_best_LH_C_0⁰ _lh_best_LH_C_1⁰ => case _lh_best_arg3⁰ of {
//│ 		LH_C _lh_best_LH_C_0¹ _lh_best_LH_C_1¹ => 
//│ 			let best'⁰ = (fun b² -> (fun s⁰ -> (fun ls1⁰ -> (fun ls2⁰ -> 
//│ 				let _lh_matchIdent² = ls1⁰
//│ 				in case _lh_matchIdent² of {
//│ 					LH_N  => 
//│ 						let _lh_matchIdent³ = ls2⁰
//│ 						in case _lh_matchIdent³ of {
//│ 							LH_N  => [LH_P2 b² s⁰]
//│ 							| _  => error⁰}
//│ 					| LH_C _lh_best_LH_C_0² _lh_best_LH_C_1² => 
//│ 						let _lh_matchIdent⁴ = ls2⁰
//│ 						in case _lh_matchIdent⁴ of {
//│ 							LH_C _lh_best_LH_C_0³ _lh_best_LH_C_1³ => if polyEq⁰(s⁰, _lh_best_arg1⁰(s⁰, _lh_best_LH_C_0³)) then best'⁰(b², s⁰, _lh_best_LH_C_1², _lh_best_LH_C_1³) else best'⁰(_lh_best_LH_C_0², _lh_best_LH_C_0³, _lh_best_LH_C_1², _lh_best_LH_C_1³)
//│ 							| _  => error⁰}}))))
//│ 			in best'⁰(_lh_best_LH_C_0⁰, _lh_best_LH_C_0¹, _lh_best_LH_C_1⁰, _lh_best_LH_C_1¹)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def concat_lh_₁(lss²) = case lss² of {
//│ 	LH_C h²² t²² => mappend_lh_₃(h²², concat_lh_₁(t²²))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₂(lss¹) = case lss¹ of {
//│ 	LH_C h¹⁶ t¹⁶ => mappend_lh_₁₂(h¹⁶, concat_lh_₂(t¹⁶))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₃(lss⁰) = case lss⁰ of {
//│ 	LH_C h¹³ t¹³ => mappend_lh_₁₃(h¹³, concat_lh_₃(t¹³))
//│ 	| LH_N  => [LH_N]}
//│ def cropTree_lh_₁(_lh_cropTree_arg1⁰) = case _lh_cropTree_arg1⁰ of {
//│ 	Branch _lh_cropTree_Branch_0⁰ _lh_cropTree_Branch_1⁰ => case _lh_cropTree_Branch_1⁰ of {
//│ 		LH_N  => [Branch _lh_cropTree_Branch_0⁰ [LH_N]]
//│ 		| _  => case _lh_cropTree_Branch_0⁰ of {
//│ 			Score _lh_cropTree_Score_0⁰ => [Branch [Score _lh_cropTree_Score_0⁰] map_lh_₇(cropTree_lh_₁, _lh_cropTree_Branch_1⁰)]
//│ 			| _  => [Branch _lh_cropTree_Branch_0⁰ [LH_N]]}}}
//│ def empty'_lh_₁(_lh_empty'_arg1⁰, _lh_empty'_arg2⁰) = case _lh_empty'_arg1⁰ of {
//│ 	1  => case _lh_empty'_arg2⁰ of {
//│ 		LH_C _lh_empty'_LH_C_0⁰ _lh_empty'_LH_C_1⁰ => case _lh_empty'_LH_C_0⁰ of {
//│ 			Empty  => case _lh_empty'_LH_C_1⁰ of {
//│ 				LH_C _lh_empty'_LH_C_0¹ _lh_empty'_LH_C_1¹ => case _lh_empty'_LH_C_1¹ of {
//│ 					LH_C _lh_empty'_LH_C_0² _lh_empty'_LH_C_1² => case _lh_empty'_LH_C_1² of {
//│ 						LH_N  => [True]
//│ 						| _  => [False]}
//│ 					| _  => [False]}
//│ 				| _  => [False]}
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| 2  => case _lh_empty'_arg2⁰ of {
//│ 		LH_C _lh_empty'_LH_C_0³ _lh_empty'_LH_C_1³ => case _lh_empty'_LH_C_1³ of {
//│ 			LH_C _lh_empty'_LH_C_0⁴ _lh_empty'_LH_C_1⁴ => case _lh_empty'_LH_C_0⁴ of {
//│ 				Empty  => case _lh_empty'_LH_C_1⁴ of {
//│ 					LH_C _lh_empty'_LH_C_0⁵ _lh_empty'_LH_C_1⁵ => case _lh_empty'_LH_C_1⁵ of {
//│ 						LH_N  => [True]
//│ 						| _  => [False]}
//│ 					| _  => [False]}
//│ 				| _  => [False]}
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| 3  => case _lh_empty'_arg2⁰ of {
//│ 		LH_C _lh_empty'_LH_C_0⁶ _lh_empty'_LH_C_1⁶ => case _lh_empty'_LH_C_1⁶ of {
//│ 			LH_C _lh_empty'_LH_C_0⁷ _lh_empty'_LH_C_1⁷ => case _lh_empty'_LH_C_1⁷ of {
//│ 				LH_C _lh_empty'_LH_C_0⁸ _lh_empty'_LH_C_1⁸ => case _lh_empty'_LH_C_0⁸ of {
//│ 					Empty  => case _lh_empty'_LH_C_1⁸ of {
//│ 						LH_N  => [True]
//│ 						| _  => [False]}
//│ 					| _  => [False]}
//│ 				| _  => [False]}
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def empty_lh_₁(_lh_empty_arg1⁰, _lh_empty_arg2⁰) = case _lh_empty_arg1⁰ of {
//│ 	LH_P2 _lh_empty_LH_P2_0⁰ _lh_empty_LH_P2_1⁰ => case _lh_empty_LH_P2_0⁰ of {
//│ 		1  => case _lh_empty_arg2⁰ of {
//│ 			LH_C _lh_empty_LH_C_0⁰ _lh_empty_LH_C_1⁰ => case _lh_empty_LH_C_1⁰ of {
//│ 				LH_C _lh_empty_LH_C_0¹ _lh_empty_LH_C_1¹ => case _lh_empty_LH_C_1¹ of {
//│ 					LH_C _lh_empty_LH_C_0² _lh_empty_LH_C_1² => case _lh_empty_LH_C_1² of {
//│ 						LH_N  => empty'_lh_₁(_lh_empty_LH_P2_1⁰, _lh_empty_LH_C_0⁰)
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| 2  => case _lh_empty_arg2⁰ of {
//│ 			LH_C _lh_empty_LH_C_0³ _lh_empty_LH_C_1³ => case _lh_empty_LH_C_1³ of {
//│ 				LH_C _lh_empty_LH_C_0⁴ _lh_empty_LH_C_1⁴ => case _lh_empty_LH_C_1⁴ of {
//│ 					LH_C _lh_empty_LH_C_0⁵ _lh_empty_LH_C_1⁵ => case _lh_empty_LH_C_1⁵ of {
//│ 						LH_N  => empty'_lh_₁(_lh_empty_LH_P2_1⁰, _lh_empty_LH_C_0⁴)
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| 3  => case _lh_empty_arg2⁰ of {
//│ 			LH_C _lh_empty_LH_C_0⁶ _lh_empty_LH_C_1⁶ => case _lh_empty_LH_C_1⁶ of {
//│ 				LH_C _lh_empty_LH_C_0⁷ _lh_empty_LH_C_1⁷ => case _lh_empty_LH_C_1⁷ of {
//│ 					LH_C _lh_empty_LH_C_0⁸ _lh_empty_LH_C_1⁸ => case _lh_empty_LH_C_1⁸ of {
//│ 						LH_N  => empty'_lh_₁(_lh_empty_LH_P2_1⁰, _lh_empty_LH_C_0⁸)
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def enumFromTo_lh_₁(a², b¹) = if (a² <= b¹) then [LH_C a² enumFromTo_lh_₁((a² + 1), b¹)] else [LH_N]
//│ def enumFromTo_lh_₂(a¹, b⁰) = if (a¹ <= b⁰) then [LH_C a¹ enumFromTo_lh_₂((a¹ + 1), b⁰)] else [LH_N]
//│ def eval_lh_₁(_lh_eval_arg1⁰) = if (_lh_eval_arg1⁰ == 3) then [XWin] else if (_lh_eval_arg1⁰ == (0 - 3)) then [OWin] else [Score _lh_eval_arg1⁰]
//│ def foldr_lh_₁(f⁰, i⁰, ls¹) = case ls¹ of {
//│ 	LH_C h¹ t¹ => f⁰(h¹, foldr_lh_₁(f⁰, i⁰, t¹))
//│ 	| LH_N  => i⁰}
//│ def fullBoard_lh_₁(_lh_fullBoard_arg1⁰) = and_lh_₁(map_lh_₃((fun x⁰ -> not⁰(polyEq⁰(x⁰, [Empty]))), concat_lh_₂(_lh_fullBoard_arg1⁰)))
//│ def insert_lh_₁(_lh_insert_arg1⁰, _lh_insert_arg2⁰, _lh_insert_arg3⁰) = case _lh_insert_arg2⁰ of {
//│ 	LH_C _lh_insert_LH_C_0⁰ _lh_insert_LH_C_1⁰ => case _lh_insert_LH_C_1⁰ of {
//│ 		LH_C _lh_insert_LH_C_0¹ _lh_insert_LH_C_1¹ => case _lh_insert_LH_C_1¹ of {
//│ 			LH_C _lh_insert_LH_C_0² _lh_insert_LH_C_1² => case _lh_insert_LH_C_1² of {
//│ 				LH_N  => case _lh_insert_arg3⁰ of {
//│ 					1  => [LH_C _lh_insert_arg1⁰ [LH_C _lh_insert_LH_C_0¹ [LH_C _lh_insert_LH_C_0² [LH_N]]]]
//│ 					| 2  => [LH_C _lh_insert_LH_C_0⁰ [LH_C _lh_insert_arg1⁰ [LH_C _lh_insert_LH_C_0² [LH_N]]]]
//│ 					| 3  => [LH_C _lh_insert_LH_C_0⁰ [LH_C _lh_insert_LH_C_0¹ [LH_C _lh_insert_arg1⁰ [LH_N]]]]
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def interpret_lh_₁(_lh_interpret_arg1¹, _lh_interpret_arg2¹) = case _lh_interpret_arg2¹ of {
//│ 	LH_N  => [Score _lh_interpret_arg1¹]
//│ 	| LH_C _lh_interpret_LH_C_0¹ _lh_interpret_LH_C_1¹ => case _lh_interpret_LH_C_0¹ of {
//│ 		Score _lh_interpret_Score_0¹ => interpret_lh_₁((_lh_interpret_arg1¹ + _lh_interpret_Score_0¹), _lh_interpret_LH_C_1¹)
//│ 		| XWin  => [XWin]
//│ 		| OWin  => [OWin]}}
//│ def interpret_lh_₂(_lh_interpret_arg1⁰, _lh_interpret_arg2⁰) = case _lh_interpret_arg2⁰ of {
//│ 	LH_N  => [Score _lh_interpret_arg1⁰]
//│ 	| LH_C _lh_interpret_LH_C_0⁰ _lh_interpret_LH_C_1⁰ => case _lh_interpret_LH_C_0⁰ of {
//│ 		Score _lh_interpret_Score_0⁰ => interpret_lh_₂((_lh_interpret_arg1⁰ + _lh_interpret_Score_0⁰), _lh_interpret_LH_C_1⁰)
//│ 		| XWin  => [XWin]
//│ 		| OWin  => [OWin]}}
//│ def length_lh_₁(ls¹¹) = case ls¹¹ of {
//│ 	LH_C h²⁵ t²⁵ => (1 + length_lh_₁(t²⁵))
//│ 	| LH_N  => 0}
//│ def map2_lh_₁(_lh_map2_arg1¹, _lh_map2_arg2¹, _lh_map2_arg3¹) = case _lh_map2_arg2¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| _  => case _lh_map2_arg3¹ of {
//│ 		LH_N  => [LH_N]
//│ 		| _  => case _lh_map2_arg2¹ of {
//│ 			LH_C _lh_map2_LH_C_0² _lh_map2_LH_C_1² => case _lh_map2_arg3¹ of {
//│ 				LH_C _lh_map2_LH_C_0³ _lh_map2_LH_C_1³ => [LH_C _lh_map2_arg1¹(_lh_map2_LH_C_0², _lh_map2_LH_C_0³) map2_lh_₁(_lh_map2_arg1¹, _lh_map2_LH_C_1², _lh_map2_LH_C_1³)]}}}}
//│ def map2_lh_₂(_lh_map2_arg1⁰, _lh_map2_arg2⁰, _lh_map2_arg3⁰) = case _lh_map2_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| _  => case _lh_map2_arg3⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| _  => case _lh_map2_arg2⁰ of {
//│ 			LH_C _lh_map2_LH_C_0⁰ _lh_map2_LH_C_1⁰ => case _lh_map2_arg3⁰ of {
//│ 				LH_C _lh_map2_LH_C_0¹ _lh_map2_LH_C_1¹ => [LH_C _lh_map2_arg1⁰(_lh_map2_LH_C_0⁰, _lh_map2_LH_C_0¹) map2_lh_₂(_lh_map2_arg1⁰, _lh_map2_LH_C_1⁰, _lh_map2_LH_C_1¹)]}}}}
//│ def mapTree_lh_₁(_lh_mapTree_arg1⁰, _lh_mapTree_arg2⁰) = case _lh_mapTree_arg2⁰ of {
//│ 	Branch _lh_mapTree_Branch_0⁰ _lh_mapTree_Branch_1⁰ => [Branch _lh_mapTree_arg1⁰(_lh_mapTree_Branch_0⁰) map_lh_₇(mapTree_lh_₁(_lh_mapTree_arg1⁰), _lh_mapTree_Branch_1⁰)]}
//│ def map_lh_₁(f⁷, ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h²³ t²³ => [LH_C f⁷(h²³) map_lh_₁(f⁷, t²³)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f⁶, ls⁹) = case ls⁹ of {
//│ 	LH_C h²⁰ t²⁰ => [LH_C f⁶(h²⁰) map_lh_₂(f⁶, t²⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f⁵, ls⁸) = case ls⁸ of {
//│ 	LH_C h¹⁵ t¹⁵ => [LH_C f⁵(h¹⁵) map_lh_₃(f⁵, t¹⁵)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f⁴, ls⁷) = case ls⁷ of {
//│ 	LH_C h¹⁴ t¹⁴ => [LH_C f⁴(h¹⁴) map_lh_₄(f⁴, t¹⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f³, ls⁶) = case ls⁶ of {
//│ 	LH_C h¹² t¹² => [LH_C f³(h¹²) map_lh_₅(f³, t¹²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f², ls⁵) = case ls⁵ of {
//│ 	LH_C h¹¹ t¹¹ => [LH_C f²(h¹¹) map_lh_₆(f², t¹¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₇(f¹, ls³) = case ls³ of {
//│ 	LH_C h³ t³ => [LH_C f¹(h³) map_lh_₇(f¹, t³)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs¹², ys¹²) = case xs¹² of {
//│ 	LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₁(t²⁴, ys¹²)]
//│ 	| LH_N  => ys¹²}
//│ def mappend_lh_₁₀(xs³, ys³) = case xs³ of {
//│ 	LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁₀(t⁶, ys³)]
//│ 	| LH_N  => ys³}
//│ def mappend_lh_₁₁(xs², ys²) = case xs² of {
//│ 	LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₁(t⁵, ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₁₂(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₁₂(t⁴, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₁₃(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h² t² => [LH_C h² mappend_lh_₁₃(t², ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₂(xs¹¹, ys¹¹) = case xs¹¹ of {
//│ 	LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₂(t²¹, ys¹¹)]
//│ 	| LH_N  => ys¹¹}
//│ def mappend_lh_₃(xs¹⁰, ys¹⁰) = case xs¹⁰ of {
//│ 	LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₃(t¹⁹, ys¹⁰)]
//│ 	| LH_N  => ys¹⁰}
//│ def mappend_lh_₄(xs⁹, ys⁹) = case xs⁹ of {
//│ 	LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₄(t¹⁸, ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_lh_₅(xs⁸, ys⁸) = case xs⁸ of {
//│ 	LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ mappend_lh_₅(t¹⁷, ys⁸)]
//│ 	| LH_N  => ys⁸}
//│ def mappend_lh_₆(xs⁷, ys⁷) = case xs⁷ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₆(t¹⁰, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₇(xs⁶, ys⁶) = case xs⁶ of {
//│ 	LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₇(t⁹, ys⁶)]
//│ 	| LH_N  => ys⁶}
//│ def mappend_lh_₈(xs⁵, ys⁵) = case xs⁵ of {
//│ 	LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₈(t⁸, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mappend_lh_₉(xs⁴, ys⁴) = case xs⁴ of {
//│ 	LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₉(t⁷, ys⁴)]
//│ 	| LH_N  => ys⁴}
//│ def max'_lh_₁(_lh_max'_arg1⁰, _lh_max'_arg2⁰) = case _lh_max'_arg1⁰ of {
//│ 	XWin  => [XWin]
//│ 	| _  => case _lh_max'_arg2⁰ of {
//│ 		XWin  => [XWin]
//│ 		| _  => case _lh_max'_arg2⁰ of {
//│ 			OWin  => _lh_max'_arg1⁰
//│ 			| _  => case _lh_max'_arg1⁰ of {
//│ 				OWin  => _lh_max'_arg2⁰
//│ 				| _  => case _lh_max'_arg1⁰ of {
//│ 					Score _lh_max'_Score_0⁰ => case _lh_max'_arg2⁰ of {
//│ 						Score _lh_max'_Score_0¹ => if (_lh_max'_Score_0⁰ > _lh_max'_Score_0¹) then [Score _lh_max'_Score_0⁰] else [Score _lh_max'_Score_0¹]}}}}}}
//│ def min'_lh_₁(_lh_min'_arg1⁰, _lh_min'_arg2⁰) = case _lh_min'_arg1⁰ of {
//│ 	OWin  => [OWin]
//│ 	| _  => case _lh_min'_arg2⁰ of {
//│ 		OWin  => [OWin]
//│ 		| _  => case _lh_min'_arg2⁰ of {
//│ 			XWin  => _lh_min'_arg1⁰
//│ 			| _  => case _lh_min'_arg1⁰ of {
//│ 				XWin  => _lh_min'_arg2⁰
//│ 				| _  => case _lh_min'_arg1⁰ of {
//│ 					Score _lh_min'_Score_0⁰ => case _lh_min'_arg2⁰ of {
//│ 						Score _lh_min'_Score_0¹ => if (_lh_min'_Score_0⁰ < _lh_min'_Score_0¹) then [Score _lh_min'_Score_0⁰] else [Score _lh_min'_Score_0¹]}}}}}}
//│ def mise_lh_₁(_lh_mise_arg1⁰, _lh_mise_arg2⁰, _lh_mise_arg3⁰) = case _lh_mise_arg3⁰ of {
//│ 	Branch _lh_mise_Branch_0⁰ _lh_mise_Branch_1⁰ => case _lh_mise_Branch_1⁰ of {
//│ 		LH_N  => _lh_mise_Branch_0⁰
//│ 		| _  => foldr_lh_₁(_lh_mise_arg1⁰, _lh_mise_arg2⁰([OWin], [XWin]), map_lh_₇(mise_lh_₁(_lh_mise_arg2⁰, _lh_mise_arg1⁰), _lh_mise_Branch_1⁰))}}
//│ def newPositions_lh_₁(_lh_newPositions_arg1⁰, _lh_newPositions_arg2⁰) = concat_lh_₃(map_lh_₅(placePiece_lh_₁(_lh_newPositions_arg1⁰, _lh_newPositions_arg2⁰), 
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 			let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 				LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 				| LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ 			in _lh_listcomp_fun¹(enumFromTo_lh_₂(1, 3))
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰(enumFromTo_lh_₁(1, 3))))
//│ def opposite_lh_₁(_lh_opposite_arg1⁰) = case _lh_opposite_arg1⁰ of {
//│ 	X  => [O]
//│ 	| O  => [X]
//│ 	| _  => error⁰}
//│ def placePiece_lh_₁(_lh_placePiece_arg1⁰, _lh_placePiece_arg2⁰, _lh_placePiece_arg3⁰) = if not⁰(empty_lh_₁(_lh_placePiece_arg3⁰, _lh_placePiece_arg2⁰)) then [LH_N] else 
//│ 	let _lh_matchIdent⁰ = _lh_placePiece_arg2⁰
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_C _lh_placePiece_LH_C_0⁰ _lh_placePiece_LH_C_1⁰ => case _lh_placePiece_LH_C_1⁰ of {
//│ 			LH_C _lh_placePiece_LH_C_0¹ _lh_placePiece_LH_C_1¹ => case _lh_placePiece_LH_C_1¹ of {
//│ 				LH_C _lh_placePiece_LH_C_0² _lh_placePiece_LH_C_1² => case _lh_placePiece_LH_C_1² of {
//│ 					LH_N  => 
//│ 						let _lh_matchIdent¹ = _lh_placePiece_arg3⁰
//│ 						in case _lh_matchIdent¹ of {
//│ 							LH_P2 _lh_placePiece_LH_P2_0⁰ _lh_placePiece_LH_P2_1⁰ => case _lh_placePiece_LH_P2_0⁰ of {
//│ 								1  => [LH_C [LH_C insert_lh_₁(_lh_placePiece_arg1⁰, _lh_placePiece_LH_C_0⁰, _lh_placePiece_LH_P2_1⁰) [LH_C _lh_placePiece_LH_C_0¹ [LH_C _lh_placePiece_LH_C_0² [LH_N]]]] [LH_N]]
//│ 								| 2  => [LH_C [LH_C _lh_placePiece_LH_C_0⁰ [LH_C insert_lh_₁(_lh_placePiece_arg1⁰, _lh_placePiece_LH_C_0¹, _lh_placePiece_LH_P2_1⁰) [LH_C _lh_placePiece_LH_C_0² [LH_N]]]] [LH_N]]
//│ 								| 3  => [LH_C [LH_C _lh_placePiece_LH_C_0⁰ [LH_C _lh_placePiece_LH_C_0¹ [LH_C insert_lh_₁(_lh_placePiece_arg1⁰, _lh_placePiece_LH_C_0², _lh_placePiece_LH_P2_1⁰) [LH_N]]]] [LH_N]]}}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ def prog_lh_₁(_lh_prog_arg1⁰) = 
//│ 	let board⁰ = (fun _lh_board_arg1⁰ -> case _lh_board_arg1⁰ of {
//│ 		LH_C _lh_board_LH_C_0⁰ _lh_board_LH_C_1⁰ => case _lh_board_LH_C_0⁰ of {
//│ 			'd'  => case _lh_board_LH_C_1⁰ of {
//│ 				LH_C _lh_board_LH_C_0¹ _lh_board_LH_C_1¹ => case _lh_board_LH_C_0¹ of {
//│ 					'o'  => case _lh_board_LH_C_1¹ of {
//│ 						LH_C _lh_board_LH_C_0² _lh_board_LH_C_1² => case _lh_board_LH_C_0² of {
//│ 							'e'  => case _lh_board_LH_C_1² of {
//│ 								LH_C _lh_board_LH_C_0³ _lh_board_LH_C_1³ => case _lh_board_LH_C_0³ of {
//│ 									's'  => case _lh_board_LH_C_1³ of {
//│ 										LH_C _lh_board_LH_C_0⁴ _lh_board_LH_C_1⁴ => case _lh_board_LH_C_0⁴ of {
//│ 											'n'  => case _lh_board_LH_C_1⁴ of {
//│ 												LH_C _lh_board_LH_C_0⁵ _lh_board_LH_C_1⁵ => case _lh_board_LH_C_0⁵ of {
//│ 													't'  => case _lh_board_LH_C_1⁵ of {
//│ 														LH_C _lh_board_LH_C_0⁶ _lh_board_LH_C_1⁶ => case _lh_board_LH_C_0⁶ of {
//│ 															' '  => case _lh_board_LH_C_1⁶ of {
//│ 																LH_C _lh_board_LH_C_0⁷ _lh_board_LH_C_1⁷ => case _lh_board_LH_C_0⁷ of {
//│ 																	'h'  => case _lh_board_LH_C_1⁷ of {
//│ 																		LH_C _lh_board_LH_C_0⁸ _lh_board_LH_C_1⁸ => case _lh_board_LH_C_0⁸ of {
//│ 																			'a'  => case _lh_board_LH_C_1⁸ of {
//│ 																				LH_C _lh_board_LH_C_0⁹ _lh_board_LH_C_1⁹ => case _lh_board_LH_C_0⁹ of {
//│ 																					'p'  => case _lh_board_LH_C_1⁹ of {
//│ 																						LH_C _lh_board_LH_C_0¹⁰ _lh_board_LH_C_1¹⁰ => case _lh_board_LH_C_0¹⁰ of {
//│ 																							'p'  => case _lh_board_LH_C_1¹⁰ of {
//│ 																								LH_C _lh_board_LH_C_0¹¹ _lh_board_LH_C_1¹¹ => case _lh_board_LH_C_0¹¹ of {
//│ 																									'e'  => case _lh_board_LH_C_1¹¹ of {
//│ 																										LH_C _lh_board_LH_C_0¹² _lh_board_LH_C_1¹² => case _lh_board_LH_C_0¹² of {
//│ 																											'n'  => case _lh_board_LH_C_1¹² of {
//│ 																												LH_N  => mappend_lh_₂(testBoard_lh_₂₈, testBoard_lh_₁₀)
//│ 																												| _  => testBoard_lh_₈}
//│ 																											| _  => testBoard_lh_₁₂}
//│ 																										| _  => testBoard_lh_₇}
//│ 																									| _  => testBoard_lh_₁₅}
//│ 																								| _  => testBoard_lh_₂₃}
//│ 																							| _  => testBoard_lh_₁₃}
//│ 																						| _  => testBoard_lh_₂}
//│ 																					| _  => testBoard_lh_₁₆}
//│ 																				| _  => testBoard_lh_₄}
//│ 																			| _  => testBoard_lh_₂₀}
//│ 																		| _  => testBoard_lh_₉}
//│ 																	| _  => testBoard_lh_₅}
//│ 																| _  => testBoard_lh_₆}
//│ 															| _  => testBoard_lh_₁₈}
//│ 														| _  => testBoard_lh_₂₆}
//│ 													| _  => testBoard_lh_₃}
//│ 												| _  => testBoard_lh_₁₁}
//│ 											| _  => testBoard_lh_₁₉}
//│ 										| _  => testBoard_lh_₁₇}
//│ 									| _  => testBoard_lh_₂₇}
//│ 								| _  => testBoard_lh_₂₂}
//│ 							| _  => testBoard_lh_₂₁}
//│ 						| _  => testBoard_lh_₁₄}
//│ 					| _  => testBoard_lh_₂₅}
//│ 				| _  => testBoard_lh_₂₄}
//│ 			| _  => testBoard_lh_₁}
//│ 		| _  => testBoard_lh_₂₉})
//│ 	in let game⁰ = alternate_lh_₁([X], max'_lh_₁, min'_lh_₁, board⁰(_lh_prog_arg1⁰))
//│ 	in mappend_lh_₁([LH_C 'O' [LH_C 'X' [LH_C 'O' [LH_C '|' [LH_N]]]]], concat_lh_₁(map_lh_₁(showMove_lh_₁, game⁰)))
//│ def prune_lh_₁(_lh_prune_arg1⁰, _lh_prune_arg2⁰) = case _lh_prune_arg1⁰ of {
//│ 	0  => case _lh_prune_arg2⁰ of {
//│ 		Branch _lh_prune_Branch_0⁰ _lh_prune_Branch_1⁰ => [Branch _lh_prune_Branch_0⁰ [LH_N]]
//│ 		| _  => case _lh_prune_arg2⁰ of {
//│ 			Branch _lh_prune_Branch_0¹ _lh_prune_Branch_1¹ => if (_lh_prune_arg1⁰ < 0) then error⁰([LH_C 'T' [LH_C 'r' [LH_C 'e' [LH_C 'e' [LH_C '.' [LH_C 'p' [LH_C 'r' [LH_C 'u' [LH_C 'n' [LH_C 'e' [LH_C ':' [LH_C ' ' [LH_C '<' [LH_C ' ' [LH_C '0' [LH_N]]]]]]]]]]]]]]]]) else [Branch _lh_prune_Branch_0¹ map_lh_₇(prune_lh_₁((_lh_prune_arg1⁰ - 1)), _lh_prune_Branch_1¹)]}}
//│ 	| _  => case _lh_prune_arg2⁰ of {
//│ 		Branch _lh_prune_Branch_0² _lh_prune_Branch_1² => if (_lh_prune_arg1⁰ < 0) then error⁰([LH_C 'T' [LH_C 'r' [LH_C 'e' [LH_C 'e' [LH_C '.' [LH_C 'p' [LH_C 'r' [LH_C 'u' [LH_C 'n' [LH_C 'e' [LH_C ':' [LH_C ' ' [LH_C '<' [LH_C ' ' [LH_C '0' [LH_N]]]]]]]]]]]]]]]]) else [Branch _lh_prune_Branch_0² map_lh_₇(prune_lh_₁((_lh_prune_arg1⁰ - 1)), _lh_prune_Branch_1²)]}}
//│ def repTree_lh_₁(_lh_repTree_arg1⁰, _lh_repTree_arg2⁰, _lh_repTree_arg3⁰) = [Branch _lh_repTree_arg3⁰ map_lh_₇(repTree_lh_₁(_lh_repTree_arg2⁰, _lh_repTree_arg1⁰), _lh_repTree_arg1⁰(_lh_repTree_arg3⁰))]
//│ def scorePiece_lh_₁(_lh_scorePiece_arg1⁰, _lh_scorePiece_arg2⁰) = case _lh_scorePiece_arg1⁰ of {
//│ 	X  => _lh_scorePiece_arg2⁰
//│ 	| Empty  => 0
//│ 	| O  => (0 - _lh_scorePiece_arg2⁰)}
//│ def score_lh_₁(_lh_score_arg1¹, _lh_score_arg2¹) = eval_lh_₁(sum_lh_₂(map_lh_₇(sum_lh_₁, map2_lh_₂(map2_lh_₁(scorePiece_lh_₁), _lh_score_arg1¹, _lh_score_arg2¹))))
//│ def score_lh_₂(_lh_score_arg1⁰, _lh_score_arg2⁰) = eval_lh_₁(sum_lh_₂(map_lh_₇(sum_lh_₂, map2_lh_₂(map2_lh_₂(scorePiece_lh_₁), _lh_score_arg1⁰, _lh_score_arg2⁰))))
//│ def searchTree_lh_₁(_lh_searchTree_arg1⁰, _lh_searchTree_arg2⁰) = prune_lh_₁(5, repTree_lh_₁(newPositions_lh_₁(_lh_searchTree_arg1⁰), newPositions_lh_₁(opposite_lh_₁(_lh_searchTree_arg1⁰)), _lh_searchTree_arg2⁰))
//│ def showBoard_lh_₁(_lh_showBoard_arg1⁰) = case _lh_showBoard_arg1⁰ of {
//│ 	LH_C _lh_showBoard_LH_C_0⁰ _lh_showBoard_LH_C_1⁰ => case _lh_showBoard_LH_C_1⁰ of {
//│ 		LH_C _lh_showBoard_LH_C_0¹ _lh_showBoard_LH_C_1¹ => case _lh_showBoard_LH_C_1¹ of {
//│ 			LH_C _lh_showBoard_LH_C_0² _lh_showBoard_LH_C_1² => case _lh_showBoard_LH_C_1² of {
//│ 				LH_N  => mappend_lh_₁₀(mappend_lh_₉(mappend_lh_₈(mappend_lh_₁₁(mappend_lh_₇(showRow_lh_₃(_lh_showBoard_LH_C_0⁰), [LH_C '|' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]]), showRow_lh_₂(_lh_showBoard_LH_C_0¹)), [LH_C '|' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]]), showRow_lh_₁(_lh_showBoard_LH_C_0²)), [LH_C '|' [LH_C '|' [LH_N]]])
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def showEvaluation_lh_₁(_lh_showEvaluation_arg1⁰) = case _lh_showEvaluation_arg1⁰ of {
//│ 	XWin  => [LH_C 'X' [LH_C 'W' [LH_C 'i' [LH_C 'n' [LH_N]]]]]
//│ 	| OWin  => [LH_C 'O' [LH_C 'W' [LH_C 'i' [LH_C 'n' [LH_N]]]]]
//│ 	| Score _lh_showEvaluation_Score_0⁰ => mappend_lh_₆([LH_C 'S' [LH_C 'c' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_N]]]]]], string_of_int⁰(_lh_showEvaluation_Score_0⁰))}
//│ def showMove_lh_₁(_lh_showMove_arg1⁰) = case _lh_showMove_arg1⁰ of {
//│ 	LH_P2 _lh_showMove_LH_P2_0⁰ _lh_showMove_LH_P2_1⁰ => mappend_lh_₅(mappend_lh_₄(showEvaluation_lh_₁(_lh_showMove_LH_P2_1⁰), [LH_C '|' [LH_N]]), showBoard_lh_₁(_lh_showMove_LH_P2_0⁰))}
//│ def showPiece_lh_₁(_lh_showPiece_arg1⁰) = case _lh_showPiece_arg1⁰ of {
//│ 	X  => [LH_C 'X' [LH_N]]
//│ 	| O  => [LH_C 'O' [LH_N]]
//│ 	| Empty  => [LH_C ' ' [LH_N]]}
//│ def showRow_lh_₁(_lh_showRow_arg1²) = case _lh_showRow_arg1² of {
//│ 	LH_C _lh_showRow_LH_C_0⁶ _lh_showRow_LH_C_1⁶ => case _lh_showRow_LH_C_1⁶ of {
//│ 		LH_C _lh_showRow_LH_C_0⁷ _lh_showRow_LH_C_1⁷ => case _lh_showRow_LH_C_1⁷ of {
//│ 			LH_C _lh_showRow_LH_C_0⁸ _lh_showRow_LH_C_1⁸ => case _lh_showRow_LH_C_1⁸ of {
//│ 				LH_N  => mappend_lh_₁₃(mappend_lh_₁₃(mappend_lh_₁₃(mappend_lh_₁₃(showPiece_lh_₁(_lh_showRow_LH_C_0⁶), [LH_C '|' [LH_N]]), showPiece_lh_₁(_lh_showRow_LH_C_0⁷)), [LH_C '|' [LH_N]]), showPiece_lh_₁(_lh_showRow_LH_C_0⁸))
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def showRow_lh_₂(_lh_showRow_arg1¹) = case _lh_showRow_arg1¹ of {
//│ 	LH_C _lh_showRow_LH_C_0³ _lh_showRow_LH_C_1³ => case _lh_showRow_LH_C_1³ of {
//│ 		LH_C _lh_showRow_LH_C_0⁴ _lh_showRow_LH_C_1⁴ => case _lh_showRow_LH_C_1⁴ of {
//│ 			LH_C _lh_showRow_LH_C_0⁵ _lh_showRow_LH_C_1⁵ => case _lh_showRow_LH_C_1⁵ of {
//│ 				LH_N  => mappend_lh_₁₃(mappend_lh_₁₃(mappend_lh_₁₃(mappend_lh_₁₃(showPiece_lh_₁(_lh_showRow_LH_C_0³), [LH_C '|' [LH_N]]), showPiece_lh_₁(_lh_showRow_LH_C_0⁴)), [LH_C '|' [LH_N]]), showPiece_lh_₁(_lh_showRow_LH_C_0⁵))
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def showRow_lh_₃(_lh_showRow_arg1⁰) = case _lh_showRow_arg1⁰ of {
//│ 	LH_C _lh_showRow_LH_C_0⁰ _lh_showRow_LH_C_1⁰ => case _lh_showRow_LH_C_1⁰ of {
//│ 		LH_C _lh_showRow_LH_C_0¹ _lh_showRow_LH_C_1¹ => case _lh_showRow_LH_C_1¹ of {
//│ 			LH_C _lh_showRow_LH_C_0² _lh_showRow_LH_C_1² => case _lh_showRow_LH_C_1² of {
//│ 				LH_N  => mappend_lh_₁₃(mappend_lh_₁₃(mappend_lh_₁₃(mappend_lh_₁₃(showPiece_lh_₁(_lh_showRow_LH_C_0⁰), [LH_C '|' [LH_N]]), showPiece_lh_₁(_lh_showRow_LH_C_0¹)), [LH_C '|' [LH_N]]), showPiece_lh_₁(_lh_showRow_LH_C_0²))
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def static_lh_₁(_lh_static_arg1²) = interpret_lh_₁(0, map_lh_₄(score_lh_₁(_lh_static_arg1²), wins_lh_₁))
//│ def static_lh_₂(_lh_static_arg1¹) = interpret_lh_₂(0, map_lh_₆(score_lh_₂(_lh_static_arg1¹), wins_lh_₂))
//│ def static_lh_₃(_lh_static_arg1⁰) = interpret_lh_₂(0, map_lh_₇(score_lh_₂(_lh_static_arg1⁰), wins_lh_₂))
//│ def sumAux_lh_₁(ls⁰, a⁰) = case ls⁰ of {
//│ 	LH_N  => a⁰
//│ 	| LH_C h⁰ t⁰ => sumAux_lh_₁(t⁰, (a⁰ + h⁰))}
//│ def sum_lh_₁(ls⁴) = sumAux_lh_₁(ls⁴, 0)
//│ def sum_lh_₂(ls²) = sumAux_lh_₁(ls², 0)
//│ def testBoard_lh_₁ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₀ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₁ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₂ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₃ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₄ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₅ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₆ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₇ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₈ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₉ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₀ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₁ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₂ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₃ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₄ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₅ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₆ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₇ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₈ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₉ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₃ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₄ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₅ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₆ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₇ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₈ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₉ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testMinimax_nofib_lh_₁(_lh_testMinimax_nofib_arg1⁰) = length_lh_₁(prog_lh_₁(_lh_testMinimax_nofib_arg1⁰))
//│ def win1_lh_₁ = [LH_C [LH_C 1 [LH_C 1 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def win2_lh_₁ = [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 1 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def win3_lh_₁ = [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 1 [LH_C 1 [LH_N]]]] [LH_N]]]]
//│ def win4_lh_₁ = [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def win5_lh_₁ = [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def win6_lh_₁ = [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_N]]]]
//│ def win7_lh_₁ = [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_N]]]]
//│ def win8_lh_₁ = [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def wins_lh_₁ = [LH_C win1_lh_₁ [LH_C win2_lh_₁ [LH_C win3_lh_₁ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]]]]
//│ def wins_lh_₂ = [LH_C win1_lh_₁ [LH_C win2_lh_₁ [LH_C win3_lh_₁ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]]]]
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec mappend_lh__d1 xs_1_2 ys_1_2 =
//│ 		  (match xs_1_2 with
//│ 		    | `LH_C(h_2_4, t_2_4) -> 
//│ 		      (`LH_C(h_2_4, ((mappend_lh__d1 t_2_4) ys_1_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_2);;
//│ 		let rec testBoard_lh__d8 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d6 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec mappend_lh__d1_d3 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C(h_2, ((mappend_lh__d1_d3 t_2) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec showPiece_lh__d1 _lh_showPiece_arg1_0 =
//│ 		  (match _lh_showPiece_arg1_0 with
//│ 		    | `X -> 
//│ 		      (`LH_C('X', (`LH_N)))
//│ 		    | `O -> 
//│ 		      (`LH_C('O', (`LH_N)))
//│ 		    | `Empty -> 
//│ 		      (`LH_C(' ', (`LH_N))));;
//│ 		let rec showRow_lh__d1 _lh_showRow_arg1_2 =
//│ 		  (match _lh_showRow_arg1_2 with
//│ 		    | `LH_C(_lh_showRow_LH_C_0_6, _lh_showRow_LH_C_1_6) -> 
//│ 		      (match _lh_showRow_LH_C_1_6 with
//│ 		        | `LH_C(_lh_showRow_LH_C_0_7, _lh_showRow_LH_C_1_7) -> 
//│ 		          (match _lh_showRow_LH_C_1_7 with
//│ 		            | `LH_C(_lh_showRow_LH_C_0_8, _lh_showRow_LH_C_1_8) -> 
//│ 		              (match _lh_showRow_LH_C_1_8 with
//│ 		                | `LH_N -> 
//│ 		                  ((mappend_lh__d1_d3 ((mappend_lh__d1_d3 ((mappend_lh__d1_d3 ((mappend_lh__d1_d3 (showPiece_lh__d1 _lh_showRow_LH_C_0_6)) (`LH_C('|', (`LH_N))))) (showPiece_lh__d1 _lh_showRow_LH_C_0_7))) (`LH_C('|', (`LH_N))))) (showPiece_lh__d1 _lh_showRow_LH_C_0_8))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec mappend_lh__d8 xs_5 ys_5 =
//│ 		  (match xs_5 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      (`LH_C(h_8, ((mappend_lh__d8 t_8) ys_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_5);;
//│ 		let rec mappend_lh__d1_d1 xs_2 ys_2 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      (`LH_C(h_5, ((mappend_lh__d1_d1 t_5) ys_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2);;
//│ 		let rec mappend_lh__d9 xs_4 ys_4 =
//│ 		  (match xs_4 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      (`LH_C(h_7, ((mappend_lh__d9 t_7) ys_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_4);;
//│ 		let rec showRow_lh__d3 _lh_showRow_arg1_0 =
//│ 		  (match _lh_showRow_arg1_0 with
//│ 		    | `LH_C(_lh_showRow_LH_C_0_0, _lh_showRow_LH_C_1_0) -> 
//│ 		      (match _lh_showRow_LH_C_1_0 with
//│ 		        | `LH_C(_lh_showRow_LH_C_0_1, _lh_showRow_LH_C_1_1) -> 
//│ 		          (match _lh_showRow_LH_C_1_1 with
//│ 		            | `LH_C(_lh_showRow_LH_C_0_2, _lh_showRow_LH_C_1_2) -> 
//│ 		              (match _lh_showRow_LH_C_1_2 with
//│ 		                | `LH_N -> 
//│ 		                  ((mappend_lh__d1_d3 ((mappend_lh__d1_d3 ((mappend_lh__d1_d3 ((mappend_lh__d1_d3 (showPiece_lh__d1 _lh_showRow_LH_C_0_0)) (`LH_C('|', (`LH_N))))) (showPiece_lh__d1 _lh_showRow_LH_C_0_1))) (`LH_C('|', (`LH_N))))) (showPiece_lh__d1 _lh_showRow_LH_C_0_2))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec mappend_lh__d1_d0 xs_3 ys_3 =
//│ 		  (match xs_3 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      (`LH_C(h_6, ((mappend_lh__d1_d0 t_6) ys_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_3);;
//│ 		let rec showRow_lh__d2 _lh_showRow_arg1_1 =
//│ 		  (match _lh_showRow_arg1_1 with
//│ 		    | `LH_C(_lh_showRow_LH_C_0_3, _lh_showRow_LH_C_1_3) -> 
//│ 		      (match _lh_showRow_LH_C_1_3 with
//│ 		        | `LH_C(_lh_showRow_LH_C_0_4, _lh_showRow_LH_C_1_4) -> 
//│ 		          (match _lh_showRow_LH_C_1_4 with
//│ 		            | `LH_C(_lh_showRow_LH_C_0_5, _lh_showRow_LH_C_1_5) -> 
//│ 		              (match _lh_showRow_LH_C_1_5 with
//│ 		                | `LH_N -> 
//│ 		                  ((mappend_lh__d1_d3 ((mappend_lh__d1_d3 ((mappend_lh__d1_d3 ((mappend_lh__d1_d3 (showPiece_lh__d1 _lh_showRow_LH_C_0_3)) (`LH_C('|', (`LH_N))))) (showPiece_lh__d1 _lh_showRow_LH_C_0_4))) (`LH_C('|', (`LH_N))))) (showPiece_lh__d1 _lh_showRow_LH_C_0_5))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec mappend_lh__d7 xs_6 ys_6 =
//│ 		  (match xs_6 with
//│ 		    | `LH_C(h_9, t_9) -> 
//│ 		      (`LH_C(h_9, ((mappend_lh__d7 t_9) ys_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_6);;
//│ 		let rec showBoard_lh__d1 _lh_showBoard_arg1_0 =
//│ 		  (match _lh_showBoard_arg1_0 with
//│ 		    | `LH_C(_lh_showBoard_LH_C_0_0, _lh_showBoard_LH_C_1_0) -> 
//│ 		      (match _lh_showBoard_LH_C_1_0 with
//│ 		        | `LH_C(_lh_showBoard_LH_C_0_1, _lh_showBoard_LH_C_1_1) -> 
//│ 		          (match _lh_showBoard_LH_C_1_1 with
//│ 		            | `LH_C(_lh_showBoard_LH_C_0_2, _lh_showBoard_LH_C_1_2) -> 
//│ 		              (match _lh_showBoard_LH_C_1_2 with
//│ 		                | `LH_N -> 
//│ 		                  ((mappend_lh__d1_d0 ((mappend_lh__d9 ((mappend_lh__d8 ((mappend_lh__d1_d1 ((mappend_lh__d7 (showRow_lh__d3 _lh_showBoard_LH_C_0_0)) (`LH_C('|', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('|', (`LH_N))))))))))))))))))) (showRow_lh__d2 _lh_showBoard_LH_C_0_1))) (`LH_C('|', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('|', (`LH_N))))))))))))))))))) (showRow_lh__d1 _lh_showBoard_LH_C_0_2))) (`LH_C('|', (`LH_C('|', (`LH_N))))))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec mappend_lh__d4 xs_9 ys_9 =
//│ 		  (match xs_9 with
//│ 		    | `LH_C(h_1_8, t_1_8) -> 
//│ 		      (`LH_C(h_1_8, ((mappend_lh__d4 t_1_8) ys_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_9);;
//│ 		let rec mappend_lh__d5 xs_8 ys_8 =
//│ 		  (match xs_8 with
//│ 		    | `LH_C(h_1_7, t_1_7) -> 
//│ 		      (`LH_C(h_1_7, ((mappend_lh__d5 t_1_7) ys_8)))
//│ 		    | `LH_N -> 
//│ 		      ys_8);;
//│ 		let rec mappend_lh__d6 xs_7 ys_7 =
//│ 		  (match xs_7 with
//│ 		    | `LH_C(h_1_0, t_1_0) -> 
//│ 		      (`LH_C(h_1_0, ((mappend_lh__d6 t_1_0) ys_7)))
//│ 		    | `LH_N -> 
//│ 		      ys_7);;
//│ 		let rec showEvaluation_lh__d1 _lh_showEvaluation_arg1_0 =
//│ 		  (match _lh_showEvaluation_arg1_0 with
//│ 		    | `XWin -> 
//│ 		      (`LH_C('X', (`LH_C('W', (`LH_C('i', (`LH_C('n', (`LH_N)))))))))
//│ 		    | `OWin -> 
//│ 		      (`LH_C('O', (`LH_C('W', (`LH_C('i', (`LH_C('n', (`LH_N)))))))))
//│ 		    | `Score(_lh_showEvaluation_Score_0_0) -> 
//│ 		      ((mappend_lh__d6 (`LH_C('S', (`LH_C('c', (`LH_C('o', (`LH_C('r', (`LH_C('e', (`LH_N)))))))))))) (string_of_int _lh_showEvaluation_Score_0_0)));;
//│ 		let rec showMove_lh__d1 _lh_showMove_arg1_0 =
//│ 		  (match _lh_showMove_arg1_0 with
//│ 		    | `LH_P2(_lh_showMove_LH_P2_0_0, _lh_showMove_LH_P2_1_0) -> 
//│ 		      ((mappend_lh__d5 ((mappend_lh__d4 (showEvaluation_lh__d1 _lh_showMove_LH_P2_1_0)) (`LH_C('|', (`LH_N))))) (showBoard_lh__d1 _lh_showMove_LH_P2_0_0)));;
//│ 		let rec testBoard_lh__d1_d1 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d6 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d1_d3 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d5 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec map_lh__d7 f_1 ls_3 =
//│ 		  (match ls_3 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      (`LH_C((f_1 h_3), ((map_lh__d7 f_1) t_3)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec cropTree_lh__d1 _lh_cropTree_arg1_0 =
//│ 		  (match _lh_cropTree_arg1_0 with
//│ 		    | `Branch(_lh_cropTree_Branch_0_0, _lh_cropTree_Branch_1_0) -> 
//│ 		      (match _lh_cropTree_Branch_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (`Branch(_lh_cropTree_Branch_0_0, (`LH_N)))
//│ 		        | _ -> 
//│ 		          (match _lh_cropTree_Branch_0_0 with
//│ 		            | `Score(_lh_cropTree_Score_0_0) -> 
//│ 		              (`Branch((`Score(_lh_cropTree_Score_0_0)), ((map_lh__d7 cropTree_lh__d1) _lh_cropTree_Branch_1_0)))
//│ 		            | _ -> 
//│ 		              (`Branch(_lh_cropTree_Branch_0_0, (`LH_N))))));;
//│ 		let rec prune_lh__d1 _lh_prune_arg1_0 _lh_prune_arg2_0 =
//│ 		  (match _lh_prune_arg1_0 with
//│ 		    | 0 -> 
//│ 		      (match _lh_prune_arg2_0 with
//│ 		        | `Branch(_lh_prune_Branch_0_0, _lh_prune_Branch_1_0) -> 
//│ 		          (`Branch(_lh_prune_Branch_0_0, (`LH_N)))
//│ 		        | _ -> 
//│ 		          (match _lh_prune_arg2_0 with
//│ 		            | `Branch(_lh_prune_Branch_0_1, _lh_prune_Branch_1_1) -> 
//│ 		              (if (_lh_prune_arg1_0 < 0) then
//│ 		                (failwith "msg"(`LH_C('T', (`LH_C('r', (`LH_C('e', (`LH_C('e', (`LH_C('.', (`LH_C('p', (`LH_C('r', (`LH_C('u', (`LH_C('n', (`LH_C('e', (`LH_C(':', (`LH_C(' ', (`LH_C('<', (`LH_C(' ', (`LH_C('0', (`LH_N))))))))))))))))))))))))))))))))
//│ 		              else
//│ 		                (`Branch(_lh_prune_Branch_0_1, ((map_lh__d7 (prune_lh__d1 (_lh_prune_arg1_0 - 1))) _lh_prune_Branch_1_1))))))
//│ 		    | _ -> 
//│ 		      (match _lh_prune_arg2_0 with
//│ 		        | `Branch(_lh_prune_Branch_0_2, _lh_prune_Branch_1_2) -> 
//│ 		          (if (_lh_prune_arg1_0 < 0) then
//│ 		            (failwith "msg"(`LH_C('T', (`LH_C('r', (`LH_C('e', (`LH_C('e', (`LH_C('.', (`LH_C('p', (`LH_C('r', (`LH_C('u', (`LH_C('n', (`LH_C('e', (`LH_C(':', (`LH_C(' ', (`LH_C('<', (`LH_C(' ', (`LH_C('0', (`LH_N))))))))))))))))))))))))))))))))
//│ 		          else
//│ 		            (`Branch(_lh_prune_Branch_0_2, ((map_lh__d7 (prune_lh__d1 (_lh_prune_arg1_0 - 1))) _lh_prune_Branch_1_2))))));;
//│ 		let rec empty'_lh__d1 _lh_empty'_arg1_0 _lh_empty'_arg2_0 =
//│ 		  (match _lh_empty'_arg1_0 with
//│ 		    | 1 -> 
//│ 		      (match _lh_empty'_arg2_0 with
//│ 		        | `LH_C(_lh_empty'_LH_C_0_0, _lh_empty'_LH_C_1_0) -> 
//│ 		          (match _lh_empty'_LH_C_0_0 with
//│ 		            | `Empty -> 
//│ 		              (match _lh_empty'_LH_C_1_0 with
//│ 		                | `LH_C(_lh_empty'_LH_C_0_1, _lh_empty'_LH_C_1_1) -> 
//│ 		                  (match _lh_empty'_LH_C_1_1 with
//│ 		                    | `LH_C(_lh_empty'_LH_C_0_2, _lh_empty'_LH_C_1_2) -> 
//│ 		                      (match _lh_empty'_LH_C_1_2 with
//│ 		                        | `LH_N -> 
//│ 		                          true
//│ 		                        | _ -> 
//│ 		                          false)
//│ 		                    | _ -> 
//│ 		                      false)
//│ 		                | _ -> 
//│ 		                  false)
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | 2 -> 
//│ 		      (match _lh_empty'_arg2_0 with
//│ 		        | `LH_C(_lh_empty'_LH_C_0_3, _lh_empty'_LH_C_1_3) -> 
//│ 		          (match _lh_empty'_LH_C_1_3 with
//│ 		            | `LH_C(_lh_empty'_LH_C_0_4, _lh_empty'_LH_C_1_4) -> 
//│ 		              (match _lh_empty'_LH_C_0_4 with
//│ 		                | `Empty -> 
//│ 		                  (match _lh_empty'_LH_C_1_4 with
//│ 		                    | `LH_C(_lh_empty'_LH_C_0_5, _lh_empty'_LH_C_1_5) -> 
//│ 		                      (match _lh_empty'_LH_C_1_5 with
//│ 		                        | `LH_N -> 
//│ 		                          true
//│ 		                        | _ -> 
//│ 		                          false)
//│ 		                    | _ -> 
//│ 		                      false)
//│ 		                | _ -> 
//│ 		                  false)
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | 3 -> 
//│ 		      (match _lh_empty'_arg2_0 with
//│ 		        | `LH_C(_lh_empty'_LH_C_0_6, _lh_empty'_LH_C_1_6) -> 
//│ 		          (match _lh_empty'_LH_C_1_6 with
//│ 		            | `LH_C(_lh_empty'_LH_C_0_7, _lh_empty'_LH_C_1_7) -> 
//│ 		              (match _lh_empty'_LH_C_1_7 with
//│ 		                | `LH_C(_lh_empty'_LH_C_0_8, _lh_empty'_LH_C_1_8) -> 
//│ 		                  (match _lh_empty'_LH_C_0_8 with
//│ 		                    | `Empty -> 
//│ 		                      (match _lh_empty'_LH_C_1_8 with
//│ 		                        | `LH_N -> 
//│ 		                          true
//│ 		                        | _ -> 
//│ 		                          false)
//│ 		                    | _ -> 
//│ 		                      false)
//│ 		                | _ -> 
//│ 		                  false)
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec empty_lh__d1 _lh_empty_arg1_0 _lh_empty_arg2_0 =
//│ 		  (match _lh_empty_arg1_0 with
//│ 		    | `LH_P2(_lh_empty_LH_P2_0_0, _lh_empty_LH_P2_1_0) -> 
//│ 		      (match _lh_empty_LH_P2_0_0 with
//│ 		        | 1 -> 
//│ 		          (match _lh_empty_arg2_0 with
//│ 		            | `LH_C(_lh_empty_LH_C_0_0, _lh_empty_LH_C_1_0) -> 
//│ 		              (match _lh_empty_LH_C_1_0 with
//│ 		                | `LH_C(_lh_empty_LH_C_0_1, _lh_empty_LH_C_1_1) -> 
//│ 		                  (match _lh_empty_LH_C_1_1 with
//│ 		                    | `LH_C(_lh_empty_LH_C_0_2, _lh_empty_LH_C_1_2) -> 
//│ 		                      (match _lh_empty_LH_C_1_2 with
//│ 		                        | `LH_N -> 
//│ 		                          ((empty'_lh__d1 _lh_empty_LH_P2_1_0) _lh_empty_LH_C_0_0)
//│ 		                        | _ -> 
//│ 		                          (failwith "lh_default_error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "lh_default_error"))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | 2 -> 
//│ 		          (match _lh_empty_arg2_0 with
//│ 		            | `LH_C(_lh_empty_LH_C_0_3, _lh_empty_LH_C_1_3) -> 
//│ 		              (match _lh_empty_LH_C_1_3 with
//│ 		                | `LH_C(_lh_empty_LH_C_0_4, _lh_empty_LH_C_1_4) -> 
//│ 		                  (match _lh_empty_LH_C_1_4 with
//│ 		                    | `LH_C(_lh_empty_LH_C_0_5, _lh_empty_LH_C_1_5) -> 
//│ 		                      (match _lh_empty_LH_C_1_5 with
//│ 		                        | `LH_N -> 
//│ 		                          ((empty'_lh__d1 _lh_empty_LH_P2_1_0) _lh_empty_LH_C_0_4)
//│ 		                        | _ -> 
//│ 		                          (failwith "lh_default_error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "lh_default_error"))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | 3 -> 
//│ 		          (match _lh_empty_arg2_0 with
//│ 		            | `LH_C(_lh_empty_LH_C_0_6, _lh_empty_LH_C_1_6) -> 
//│ 		              (match _lh_empty_LH_C_1_6 with
//│ 		                | `LH_C(_lh_empty_LH_C_0_7, _lh_empty_LH_C_1_7) -> 
//│ 		                  (match _lh_empty_LH_C_1_7 with
//│ 		                    | `LH_C(_lh_empty_LH_C_0_8, _lh_empty_LH_C_1_8) -> 
//│ 		                      (match _lh_empty_LH_C_1_8 with
//│ 		                        | `LH_N -> 
//│ 		                          ((empty'_lh__d1 _lh_empty_LH_P2_1_0) _lh_empty_LH_C_0_8)
//│ 		                        | _ -> 
//│ 		                          (failwith "lh_default_error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "lh_default_error"))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec insert_lh__d1 _lh_insert_arg1_0 _lh_insert_arg2_0 _lh_insert_arg3_0 =
//│ 		  (match _lh_insert_arg2_0 with
//│ 		    | `LH_C(_lh_insert_LH_C_0_0, _lh_insert_LH_C_1_0) -> 
//│ 		      (match _lh_insert_LH_C_1_0 with
//│ 		        | `LH_C(_lh_insert_LH_C_0_1, _lh_insert_LH_C_1_1) -> 
//│ 		          (match _lh_insert_LH_C_1_1 with
//│ 		            | `LH_C(_lh_insert_LH_C_0_2, _lh_insert_LH_C_1_2) -> 
//│ 		              (match _lh_insert_LH_C_1_2 with
//│ 		                | `LH_N -> 
//│ 		                  (match _lh_insert_arg3_0 with
//│ 		                    | 1 -> 
//│ 		                      (`LH_C(_lh_insert_arg1_0, (`LH_C(_lh_insert_LH_C_0_1, (`LH_C(_lh_insert_LH_C_0_2, (`LH_N)))))))
//│ 		                    | 2 -> 
//│ 		                      (`LH_C(_lh_insert_LH_C_0_0, (`LH_C(_lh_insert_arg1_0, (`LH_C(_lh_insert_LH_C_0_2, (`LH_N)))))))
//│ 		                    | 3 -> 
//│ 		                      (`LH_C(_lh_insert_LH_C_0_0, (`LH_C(_lh_insert_LH_C_0_1, (`LH_C(_lh_insert_arg1_0, (`LH_N)))))))
//│ 		                    | _ -> 
//│ 		                      (failwith "lh_default_error"))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec placePiece_lh__d1 _lh_placePiece_arg1_0 _lh_placePiece_arg2_0 _lh_placePiece_arg3_0 =
//│ 		  (if (not ((empty_lh__d1 _lh_placePiece_arg3_0) _lh_placePiece_arg2_0)) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (let rec _lh_matchIdent_0 = _lh_placePiece_arg2_0 in
//│ 		      (match _lh_matchIdent_0 with
//│ 		        | `LH_C(_lh_placePiece_LH_C_0_0, _lh_placePiece_LH_C_1_0) -> 
//│ 		          (match _lh_placePiece_LH_C_1_0 with
//│ 		            | `LH_C(_lh_placePiece_LH_C_0_1, _lh_placePiece_LH_C_1_1) -> 
//│ 		              (match _lh_placePiece_LH_C_1_1 with
//│ 		                | `LH_C(_lh_placePiece_LH_C_0_2, _lh_placePiece_LH_C_1_2) -> 
//│ 		                  (match _lh_placePiece_LH_C_1_2 with
//│ 		                    | `LH_N -> 
//│ 		                      (let rec _lh_matchIdent_1 = _lh_placePiece_arg3_0 in
//│ 		                        (match _lh_matchIdent_1 with
//│ 		                          | `LH_P2(_lh_placePiece_LH_P2_0_0, _lh_placePiece_LH_P2_1_0) -> 
//│ 		                            (match _lh_placePiece_LH_P2_0_0 with
//│ 		                              | 1 -> 
//│ 		                                (`LH_C((`LH_C((((insert_lh__d1 _lh_placePiece_arg1_0) _lh_placePiece_LH_C_0_0) _lh_placePiece_LH_P2_1_0), (`LH_C(_lh_placePiece_LH_C_0_1, (`LH_C(_lh_placePiece_LH_C_0_2, (`LH_N))))))), (`LH_N)))
//│ 		                              | 2 -> 
//│ 		                                (`LH_C((`LH_C(_lh_placePiece_LH_C_0_0, (`LH_C((((insert_lh__d1 _lh_placePiece_arg1_0) _lh_placePiece_LH_C_0_1) _lh_placePiece_LH_P2_1_0), (`LH_C(_lh_placePiece_LH_C_0_2, (`LH_N))))))), (`LH_N)))
//│ 		                              | 3 -> 
//│ 		                                (`LH_C((`LH_C(_lh_placePiece_LH_C_0_0, (`LH_C(_lh_placePiece_LH_C_0_1, (`LH_C((((insert_lh__d1 _lh_placePiece_arg1_0) _lh_placePiece_LH_C_0_2) _lh_placePiece_LH_P2_1_0), (`LH_N))))))), (`LH_N))))))
//│ 		                    | _ -> 
//│ 		                      (failwith "lh_default_error"))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))));;
//│ 		let rec concat_lh__d3 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_1_3, t_1_3) -> 
//│ 		      ((mappend_lh__d1_d3 h_1_3) (concat_lh__d3 t_1_3))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec enumFromTo_lh__d2 a_1 b_0 =
//│ 		  (if (a_1 <= b_0) then
//│ 		    (`LH_C(a_1, ((enumFromTo_lh__d2 (a_1 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec enumFromTo_lh__d1 a_2 b_1 =
//│ 		  (if (a_2 <= b_1) then
//│ 		    (`LH_C(a_2, ((enumFromTo_lh__d1 (a_2 + 1)) b_1)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec map_lh__d5 f_3 ls_6 =
//│ 		  (match ls_6 with
//│ 		    | `LH_C(h_1_2, t_1_2) -> 
//│ 		      (`LH_C((f_3 h_1_2), ((map_lh__d5 f_3) t_1_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec newPositions_lh__d1 _lh_newPositions_arg1_0 _lh_newPositions_arg2_0 =
//│ 		  (concat_lh__d3 ((map_lh__d5 ((placePiece_lh__d1 _lh_newPositions_arg1_0) _lh_newPositions_arg2_0)) (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		    (match _lh_listcomp_fun_para_0 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		        (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		          (match _lh_listcomp_fun_para_1 with
//│ 		            | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		              (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_h_1)), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		            | `LH_N -> 
//│ 		              (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))) in
//│ 		          (_lh_listcomp_fun_1 ((enumFromTo_lh__d2 1) 3)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_0 ((enumFromTo_lh__d1 1) 3)))));;
//│ 		let rec opposite_lh__d1 _lh_opposite_arg1_0 =
//│ 		  (match _lh_opposite_arg1_0 with
//│ 		    | `X -> 
//│ 		      (`O)
//│ 		    | `O -> 
//│ 		      (`X)
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec repTree_lh__d1 _lh_repTree_arg1_0 _lh_repTree_arg2_0 _lh_repTree_arg3_0 =
//│ 		  (`Branch(_lh_repTree_arg3_0, ((map_lh__d7 ((repTree_lh__d1 _lh_repTree_arg2_0) _lh_repTree_arg1_0)) (_lh_repTree_arg1_0 _lh_repTree_arg3_0))));;
//│ 		let rec searchTree_lh__d1 _lh_searchTree_arg1_0 _lh_searchTree_arg2_0 =
//│ 		  ((prune_lh__d1 5) (((repTree_lh__d1 (newPositions_lh__d1 _lh_searchTree_arg1_0)) (newPositions_lh__d1 (opposite_lh__d1 _lh_searchTree_arg1_0))) _lh_searchTree_arg2_0));;
//│ 		let rec foldr_lh__d1 f_0 i_0 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      ((f_0 h_1) (((foldr_lh__d1 f_0) i_0) t_1))
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec mise_lh__d1 _lh_mise_arg1_0 _lh_mise_arg2_0 _lh_mise_arg3_0 =
//│ 		  (match _lh_mise_arg3_0 with
//│ 		    | `Branch(_lh_mise_Branch_0_0, _lh_mise_Branch_1_0) -> 
//│ 		      (match _lh_mise_Branch_1_0 with
//│ 		        | `LH_N -> 
//│ 		          _lh_mise_Branch_0_0
//│ 		        | _ -> 
//│ 		          (((foldr_lh__d1 _lh_mise_arg1_0) ((_lh_mise_arg2_0 (`OWin)) (`XWin))) ((map_lh__d7 ((mise_lh__d1 _lh_mise_arg2_0) _lh_mise_arg1_0)) _lh_mise_Branch_1_0))));;
//│ 		let rec interpret_lh__d2 _lh_interpret_arg1_0 _lh_interpret_arg2_0 =
//│ 		  (match _lh_interpret_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`Score(_lh_interpret_arg1_0))
//│ 		    | `LH_C(_lh_interpret_LH_C_0_0, _lh_interpret_LH_C_1_0) -> 
//│ 		      (match _lh_interpret_LH_C_0_0 with
//│ 		        | `Score(_lh_interpret_Score_0_0) -> 
//│ 		          ((interpret_lh__d2 (_lh_interpret_arg1_0 + _lh_interpret_Score_0_0)) _lh_interpret_LH_C_1_0)
//│ 		        | `XWin -> 
//│ 		          (`XWin)
//│ 		        | `OWin -> 
//│ 		          (`OWin)));;
//│ 		let rec win4_lh__d1 =
//│ 		  (`LH_C((`LH_C(1, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(1, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(1, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec win6_lh__d1 =
//│ 		  (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(1, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(1, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(1, (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec win7_lh__d1 =
//│ 		  (`LH_C((`LH_C(1, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(1, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(1, (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec win3_lh__d1 =
//│ 		  (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(1, (`LH_C(1, (`LH_C(1, (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec win2_lh__d1 =
//│ 		  (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(1, (`LH_C(1, (`LH_C(1, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec win8_lh__d1 =
//│ 		  (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(1, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(1, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(1, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec win1_lh__d1 =
//│ 		  (`LH_C((`LH_C(1, (`LH_C(1, (`LH_C(1, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(0, (`LH_C(0, (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec win5_lh__d1 =
//│ 		  (`LH_C((`LH_C(0, (`LH_C(1, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(1, (`LH_C(0, (`LH_N))))))), (`LH_C((`LH_C(0, (`LH_C(1, (`LH_C(0, (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec wins_lh__d2 =
//│ 		  (`LH_C(win1_lh__d1, (`LH_C(win2_lh__d1, (`LH_C(win3_lh__d1, (`LH_C(win4_lh__d1, (`LH_C(win5_lh__d1, (`LH_C(win6_lh__d1, (`LH_C(win7_lh__d1, (`LH_C(win8_lh__d1, (`LH_N)))))))))))))))));;
//│ 		let rec scorePiece_lh__d1 _lh_scorePiece_arg1_0 _lh_scorePiece_arg2_0 =
//│ 		  (match _lh_scorePiece_arg1_0 with
//│ 		    | `X -> 
//│ 		      _lh_scorePiece_arg2_0
//│ 		    | `Empty -> 
//│ 		      0
//│ 		    | `O -> 
//│ 		      (0 - _lh_scorePiece_arg2_0));;
//│ 		let rec map2_lh__d2 _lh_map2_arg1_0 _lh_map2_arg2_0 _lh_map2_arg3_0 =
//│ 		  (match _lh_map2_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | _ -> 
//│ 		      (match _lh_map2_arg3_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_N)
//│ 		        | _ -> 
//│ 		          (match _lh_map2_arg2_0 with
//│ 		            | `LH_C(_lh_map2_LH_C_0_0, _lh_map2_LH_C_1_0) -> 
//│ 		              (match _lh_map2_arg3_0 with
//│ 		                | `LH_C(_lh_map2_LH_C_0_1, _lh_map2_LH_C_1_1) -> 
//│ 		                  (`LH_C(((_lh_map2_arg1_0 _lh_map2_LH_C_0_0) _lh_map2_LH_C_0_1), (((map2_lh__d2 _lh_map2_arg1_0) _lh_map2_LH_C_1_0) _lh_map2_LH_C_1_1)))))));;
//│ 		let rec sumAux_lh__d1 ls_0 a_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_N -> 
//│ 		      a_0
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      ((sumAux_lh__d1 t_0) (a_0 + h_0)));;
//│ 		let rec sum_lh__d2 ls_2 =
//│ 		  ((sumAux_lh__d1 ls_2) 0);;
//│ 		let rec eval_lh__d1 _lh_eval_arg1_0 =
//│ 		  (if (_lh_eval_arg1_0 = 3) then
//│ 		    (`XWin)
//│ 		  else
//│ 		    (if (_lh_eval_arg1_0 = (0 - 3)) then
//│ 		      (`OWin)
//│ 		    else
//│ 		      (`Score(_lh_eval_arg1_0))));;
//│ 		let rec score_lh__d2 _lh_score_arg1_0 _lh_score_arg2_0 =
//│ 		  (eval_lh__d1 (sum_lh__d2 ((map_lh__d7 sum_lh__d2) (((map2_lh__d2 (map2_lh__d2 scorePiece_lh__d1)) _lh_score_arg1_0) _lh_score_arg2_0))));;
//│ 		let rec static_lh__d3 _lh_static_arg1_0 =
//│ 		  ((interpret_lh__d2 0) ((map_lh__d7 (score_lh__d2 _lh_static_arg1_0)) wins_lh__d2));;
//│ 		let rec mapTree_lh__d1 _lh_mapTree_arg1_0 _lh_mapTree_arg2_0 =
//│ 		  (match _lh_mapTree_arg2_0 with
//│ 		    | `Branch(_lh_mapTree_Branch_0_0, _lh_mapTree_Branch_1_0) -> 
//│ 		      (`Branch((_lh_mapTree_arg1_0 _lh_mapTree_Branch_0_0), ((map_lh__d7 (mapTree_lh__d1 _lh_mapTree_arg1_0)) _lh_mapTree_Branch_1_0))));;
//│ 		let rec bestMove_lh__d1 _lh_bestMove_arg1_0 _lh_bestMove_arg2_0 _lh_bestMove_arg3_0 _lh_funcomp_x_0 =
//│ 		  ((fun _lh_funcomp_x_1 -> 
//│ 		    (((mise_lh__d1 _lh_bestMove_arg2_0) _lh_bestMove_arg3_0) (cropTree_lh__d1 _lh_funcomp_x_1))) ((fun _lh_funcomp_x_2 -> 
//│ 		    ((mapTree_lh__d1 static_lh__d3) ((searchTree_lh__d1 _lh_bestMove_arg1_0) _lh_funcomp_x_2))) _lh_funcomp_x_0));;
//│ 		let rec map_lh__d4 f_4 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_1_4, t_1_4) -> 
//│ 		      (`LH_C((f_4 h_1_4), ((map_lh__d4 f_4) t_1_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec wins_lh__d1 =
//│ 		  (`LH_C(win1_lh__d1, (`LH_C(win2_lh__d1, (`LH_C(win3_lh__d1, (`LH_C(win4_lh__d1, (`LH_C(win5_lh__d1, (`LH_C(win6_lh__d1, (`LH_C(win7_lh__d1, (`LH_C(win8_lh__d1, (`LH_N)))))))))))))))));;
//│ 		let rec interpret_lh__d1 _lh_interpret_arg1_1 _lh_interpret_arg2_1 =
//│ 		  (match _lh_interpret_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      (`Score(_lh_interpret_arg1_1))
//│ 		    | `LH_C(_lh_interpret_LH_C_0_1, _lh_interpret_LH_C_1_1) -> 
//│ 		      (match _lh_interpret_LH_C_0_1 with
//│ 		        | `Score(_lh_interpret_Score_0_1) -> 
//│ 		          ((interpret_lh__d1 (_lh_interpret_arg1_1 + _lh_interpret_Score_0_1)) _lh_interpret_LH_C_1_1)
//│ 		        | `XWin -> 
//│ 		          (`XWin)
//│ 		        | `OWin -> 
//│ 		          (`OWin)));;
//│ 		let rec sum_lh__d1 ls_4 =
//│ 		  ((sumAux_lh__d1 ls_4) 0);;
//│ 		let rec map2_lh__d1 _lh_map2_arg1_1 _lh_map2_arg2_1 _lh_map2_arg3_1 =
//│ 		  (match _lh_map2_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | _ -> 
//│ 		      (match _lh_map2_arg3_1 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_N)
//│ 		        | _ -> 
//│ 		          (match _lh_map2_arg2_1 with
//│ 		            | `LH_C(_lh_map2_LH_C_0_2, _lh_map2_LH_C_1_2) -> 
//│ 		              (match _lh_map2_arg3_1 with
//│ 		                | `LH_C(_lh_map2_LH_C_0_3, _lh_map2_LH_C_1_3) -> 
//│ 		                  (`LH_C(((_lh_map2_arg1_1 _lh_map2_LH_C_0_2) _lh_map2_LH_C_0_3), (((map2_lh__d1 _lh_map2_arg1_1) _lh_map2_LH_C_1_2) _lh_map2_LH_C_1_3)))))));;
//│ 		let rec score_lh__d1 _lh_score_arg1_1 _lh_score_arg2_1 =
//│ 		  (eval_lh__d1 (sum_lh__d2 ((map_lh__d7 sum_lh__d1) (((map2_lh__d2 (map2_lh__d1 scorePiece_lh__d1)) _lh_score_arg1_1) _lh_score_arg2_1))));;
//│ 		let rec static_lh__d1 _lh_static_arg1_2 =
//│ 		  ((interpret_lh__d1 0) ((map_lh__d4 (score_lh__d1 _lh_static_arg1_2)) wins_lh__d1));;
//│ 		let rec map_lh__d2 f_6 ls_9 =
//│ 		  (match ls_9 with
//│ 		    | `LH_C(h_2_0, t_2_0) -> 
//│ 		      (`LH_C((f_6 h_2_0), ((map_lh__d2 f_6) t_2_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec and_lh__d1 _lh_and_arg1_0 =
//│ 		  (match _lh_and_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_and_LH_C_0_0, _lh_and_LH_C_1_0) -> 
//│ 		      (if _lh_and_LH_C_0_0 then
//│ 		        (and_lh__d1 _lh_and_LH_C_1_0)
//│ 		      else
//│ 		        false));;
//│ 		let rec mappend_lh__d1_d2 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      (`LH_C(h_4, ((mappend_lh__d1_d2 t_4) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec concat_lh__d2 lss_1 =
//│ 		  (match lss_1 with
//│ 		    | `LH_C(h_1_6, t_1_6) -> 
//│ 		      ((mappend_lh__d1_d2 h_1_6) (concat_lh__d2 t_1_6))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d3 f_5 ls_8 =
//│ 		  (match ls_8 with
//│ 		    | `LH_C(h_1_5, t_1_5) -> 
//│ 		      (`LH_C((f_5 h_1_5), ((map_lh__d3 f_5) t_1_5)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec fullBoard_lh__d1 _lh_fullBoard_arg1_0 =
//│ 		  (and_lh__d1 ((map_lh__d3 (fun x_0 -> 
//│ 		    (not (x_0 = (`Empty))))) (concat_lh__d2 _lh_fullBoard_arg1_0)));;
//│ 		let rec best_lh__d1 _lh_best_arg1_0 _lh_best_arg2_0 _lh_best_arg3_0 =
//│ 		  (match _lh_best_arg2_0 with
//│ 		    | `LH_C(_lh_best_LH_C_0_0, _lh_best_LH_C_1_0) -> 
//│ 		      (match _lh_best_arg3_0 with
//│ 		        | `LH_C(_lh_best_LH_C_0_1, _lh_best_LH_C_1_1) -> 
//│ 		          (let rec best'_0 = (fun b_2 s_0 ls1_0 ls2_0 -> 
//│ 		            (let rec _lh_matchIdent_2 = ls1_0 in
//│ 		              (match _lh_matchIdent_2 with
//│ 		                | `LH_N -> 
//│ 		                  (let rec _lh_matchIdent_3 = ls2_0 in
//│ 		                    (match _lh_matchIdent_3 with
//│ 		                      | `LH_N -> 
//│ 		                        (`LH_P2(b_2, s_0))
//│ 		                      | _ -> 
//│ 		                        (failwith "lh_default_error")))
//│ 		                | `LH_C(_lh_best_LH_C_0_2, _lh_best_LH_C_1_2) -> 
//│ 		                  (let rec _lh_matchIdent_4 = ls2_0 in
//│ 		                    (match _lh_matchIdent_4 with
//│ 		                      | `LH_C(_lh_best_LH_C_0_3, _lh_best_LH_C_1_3) -> 
//│ 		                        (if (s_0 = ((_lh_best_arg1_0 s_0) _lh_best_LH_C_0_3)) then
//│ 		                          ((((best'_0 b_2) s_0) _lh_best_LH_C_1_2) _lh_best_LH_C_1_3)
//│ 		                        else
//│ 		                          ((((best'_0 _lh_best_LH_C_0_2) _lh_best_LH_C_0_3) _lh_best_LH_C_1_2) _lh_best_LH_C_1_3))
//│ 		                      | _ -> 
//│ 		                        (failwith "lh_default_error")))))) in
//│ 		            ((((best'_0 _lh_best_LH_C_0_0) _lh_best_LH_C_0_1) _lh_best_LH_C_1_0) _lh_best_LH_C_1_1))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec map_lh__d6 f_2 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_1_1, t_1_1) -> 
//│ 		      (`LH_C((f_2 h_1_1), ((map_lh__d6 f_2) t_1_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec static_lh__d2 _lh_static_arg1_1 =
//│ 		  ((interpret_lh__d2 0) ((map_lh__d6 (score_lh__d2 _lh_static_arg1_1)) wins_lh__d2));;
//│ 		let rec alternate_lh__d1 _lh_alternate_arg1_0 _lh_alternate_arg2_0 _lh_alternate_arg3_0 _lh_alternate_arg4_0 =
//│ 		  (if (fullBoard_lh__d1 _lh_alternate_arg4_0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (if ((static_lh__d1 _lh_alternate_arg4_0) = (`XWin)) then
//│ 		      (`LH_N)
//│ 		    else
//│ 		      (if ((static_lh__d2 _lh_alternate_arg4_0) = (`OWin)) then
//│ 		        (`LH_N)
//│ 		      else
//│ 		        (let rec opposition_0 = (opposite_lh__d1 _lh_alternate_arg1_0) in
//│ 		          (let rec possibles_0 = ((newPositions_lh__d1 _lh_alternate_arg1_0) _lh_alternate_arg4_0) in
//│ 		            (let rec scores_0 = ((map_lh__d2 (((bestMove_lh__d1 opposition_0) _lh_alternate_arg3_0) _lh_alternate_arg2_0)) possibles_0) in
//│ 		              (let rec boardd_eval_0 = (((best_lh__d1 _lh_alternate_arg2_0) possibles_0) scores_0) in
//│ 		                (let rec _lh_matchIdent_5 = boardd_eval_0 in
//│ 		                  (match _lh_matchIdent_5 with
//│ 		                    | `LH_P2(_lh_alternate_LH_P2_0_0, _lh_alternate_LH_P2_1_0) -> 
//│ 		                      (`LH_C((`LH_P2(_lh_alternate_LH_P2_0_0, _lh_alternate_LH_P2_1_0)), ((((alternate_lh__d1 opposition_0) _lh_alternate_arg3_0) _lh_alternate_arg2_0) _lh_alternate_LH_P2_0_0))))))))))));;
//│ 		let rec testBoard_lh__d5 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d1_d9 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d1 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d1_d2 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d4 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d8 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d4 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d1_d5 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d9 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d1_d8 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d3 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d1_d0 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec mappend_lh__d2 xs_1_1 ys_1_1 =
//│ 		  (match xs_1_1 with
//│ 		    | `LH_C(h_2_1, t_2_1) -> 
//│ 		      (`LH_C(h_2_1, ((mappend_lh__d2 t_2_1) ys_1_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_1);;
//│ 		let rec testBoard_lh__d1_d7 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d7 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d0 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec max'_lh__d1 _lh_max'_arg1_0 _lh_max'_arg2_0 =
//│ 		  (match _lh_max'_arg1_0 with
//│ 		    | `XWin -> 
//│ 		      (`XWin)
//│ 		    | _ -> 
//│ 		      (match _lh_max'_arg2_0 with
//│ 		        | `XWin -> 
//│ 		          (`XWin)
//│ 		        | _ -> 
//│ 		          (match _lh_max'_arg2_0 with
//│ 		            | `OWin -> 
//│ 		              _lh_max'_arg1_0
//│ 		            | _ -> 
//│ 		              (match _lh_max'_arg1_0 with
//│ 		                | `OWin -> 
//│ 		                  _lh_max'_arg2_0
//│ 		                | _ -> 
//│ 		                  (match _lh_max'_arg1_0 with
//│ 		                    | `Score(_lh_max'_Score_0_0) -> 
//│ 		                      (match _lh_max'_arg2_0 with
//│ 		                        | `Score(_lh_max'_Score_0_1) -> 
//│ 		                          (if (_lh_max'_Score_0_0 > _lh_max'_Score_0_1) then
//│ 		                            (`Score(_lh_max'_Score_0_0))
//│ 		                          else
//│ 		                            (`Score(_lh_max'_Score_0_1)))))))));;
//│ 		let rec map_lh__d1 f_7 ls_1_0 =
//│ 		  (match ls_1_0 with
//│ 		    | `LH_C(h_2_3, t_2_3) -> 
//│ 		      (`LH_C((f_7 h_2_3), ((map_lh__d1 f_7) t_2_3)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec testBoard_lh__d2_d1 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d7 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec min'_lh__d1 _lh_min'_arg1_0 _lh_min'_arg2_0 =
//│ 		  (match _lh_min'_arg1_0 with
//│ 		    | `OWin -> 
//│ 		      (`OWin)
//│ 		    | _ -> 
//│ 		      (match _lh_min'_arg2_0 with
//│ 		        | `OWin -> 
//│ 		          (`OWin)
//│ 		        | _ -> 
//│ 		          (match _lh_min'_arg2_0 with
//│ 		            | `XWin -> 
//│ 		              _lh_min'_arg1_0
//│ 		            | _ -> 
//│ 		              (match _lh_min'_arg1_0 with
//│ 		                | `XWin -> 
//│ 		                  _lh_min'_arg2_0
//│ 		                | _ -> 
//│ 		                  (match _lh_min'_arg1_0 with
//│ 		                    | `Score(_lh_min'_Score_0_0) -> 
//│ 		                      (match _lh_min'_arg2_0 with
//│ 		                        | `Score(_lh_min'_Score_0_1) -> 
//│ 		                          (if (_lh_min'_Score_0_0 < _lh_min'_Score_0_1) then
//│ 		                            (`Score(_lh_min'_Score_0_0))
//│ 		                          else
//│ 		                            (`Score(_lh_min'_Score_0_1)))))))));;
//│ 		let rec testBoard_lh__d1_d4 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2_d2 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d1_d6 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d2 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec mappend_lh__d3 xs_1_0 ys_1_0 =
//│ 		  (match xs_1_0 with
//│ 		    | `LH_C(h_1_9, t_1_9) -> 
//│ 		      (`LH_C(h_1_9, ((mappend_lh__d3 t_1_9) ys_1_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_0);;
//│ 		let rec concat_lh__d1 lss_2 =
//│ 		  (match lss_2 with
//│ 		    | `LH_C(h_2_2, t_2_2) -> 
//│ 		      ((mappend_lh__d3 h_2_2) (concat_lh__d1 t_2_2))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec testBoard_lh__d3 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec testBoard_lh__d9 =
//│ 		  (`LH_C((`LH_C((`Empty), (`LH_C((`O), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`X), (`LH_C((`Empty), (`LH_N))))))), (`LH_C((`LH_C((`Empty), (`LH_C((`Empty), (`LH_C((`Empty), (`LH_N))))))), (`LH_N)))))));;
//│ 		let rec prog_lh__d1 _lh_prog_arg1_0 =
//│ 		  (let rec board_0 = (fun _lh_board_arg1_0 -> 
//│ 		    (match _lh_board_arg1_0 with
//│ 		      | `LH_C(_lh_board_LH_C_0_0, _lh_board_LH_C_1_0) -> 
//│ 		        (match _lh_board_LH_C_0_0 with
//│ 		          | 'd' -> 
//│ 		            (match _lh_board_LH_C_1_0 with
//│ 		              | `LH_C(_lh_board_LH_C_0_1, _lh_board_LH_C_1_1) -> 
//│ 		                (match _lh_board_LH_C_0_1 with
//│ 		                  | 'o' -> 
//│ 		                    (match _lh_board_LH_C_1_1 with
//│ 		                      | `LH_C(_lh_board_LH_C_0_2, _lh_board_LH_C_1_2) -> 
//│ 		                        (match _lh_board_LH_C_0_2 with
//│ 		                          | 'e' -> 
//│ 		                            (match _lh_board_LH_C_1_2 with
//│ 		                              | `LH_C(_lh_board_LH_C_0_3, _lh_board_LH_C_1_3) -> 
//│ 		                                (match _lh_board_LH_C_0_3 with
//│ 		                                  | 's' -> 
//│ 		                                    (match _lh_board_LH_C_1_3 with
//│ 		                                      | `LH_C(_lh_board_LH_C_0_4, _lh_board_LH_C_1_4) -> 
//│ 		                                        (match _lh_board_LH_C_0_4 with
//│ 		                                          | 'n' -> 
//│ 		                                            (match _lh_board_LH_C_1_4 with
//│ 		                                              | `LH_C(_lh_board_LH_C_0_5, _lh_board_LH_C_1_5) -> 
//│ 		                                                (match _lh_board_LH_C_0_5 with
//│ 		                                                  | 't' -> 
//│ 		                                                    (match _lh_board_LH_C_1_5 with
//│ 		                                                      | `LH_C(_lh_board_LH_C_0_6, _lh_board_LH_C_1_6) -> 
//│ 		                                                        (match _lh_board_LH_C_0_6 with
//│ 		                                                          | ' ' -> 
//│ 		                                                            (match _lh_board_LH_C_1_6 with
//│ 		                                                              | `LH_C(_lh_board_LH_C_0_7, _lh_board_LH_C_1_7) -> 
//│ 		                                                                (match _lh_board_LH_C_0_7 with
//│ 		                                                                  | 'h' -> 
//│ 		                                                                    (match _lh_board_LH_C_1_7 with
//│ 		                                                                      | `LH_C(_lh_board_LH_C_0_8, _lh_board_LH_C_1_8) -> 
//│ 		                                                                        (match _lh_board_LH_C_0_8 with
//│ 		                                                                          | 'a' -> 
//│ 		                                                                            (match _lh_board_LH_C_1_8 with
//│ 		                                                                              | `LH_C(_lh_board_LH_C_0_9, _lh_board_LH_C_1_9) -> 
//│ 		                                                                                (match _lh_board_LH_C_0_9 with
//│ 		                                                                                  | 'p' -> 
//│ 		                                                                                    (match _lh_board_LH_C_1_9 with
//│ 		                                                                                      | `LH_C(_lh_board_LH_C_0_1_0, _lh_board_LH_C_1_1_0) -> 
//│ 		                                                                                        (match _lh_board_LH_C_0_1_0 with
//│ 		                                                                                          | 'p' -> 
//│ 		                                                                                            (match _lh_board_LH_C_1_1_0 with
//│ 		                                                                                              | `LH_C(_lh_board_LH_C_0_1_1, _lh_board_LH_C_1_1_1) -> 
//│ 		                                                                                                (match _lh_board_LH_C_0_1_1 with
//│ 		                                                                                                  | 'e' -> 
//│ 		                                                                                                    (match _lh_board_LH_C_1_1_1 with
//│ 		                                                                                                      | `LH_C(_lh_board_LH_C_0_1_2, _lh_board_LH_C_1_1_2) -> 
//│ 		                                                                                                        (match _lh_board_LH_C_0_1_2 with
//│ 		                                                                                                          | 'n' -> 
//│ 		                                                                                                            (match _lh_board_LH_C_1_1_2 with
//│ 		                                                                                                              | `LH_N -> 
//│ 		                                                                                                                ((mappend_lh__d2 testBoard_lh__d2_d8) testBoard_lh__d1_d0)
//│ 		                                                                                                              | _ -> 
//│ 		                                                                                                                testBoard_lh__d8)
//│ 		                                                                                                          | _ -> 
//│ 		                                                                                                            testBoard_lh__d1_d2)
//│ 		                                                                                                      | _ -> 
//│ 		                                                                                                        testBoard_lh__d7)
//│ 		                                                                                                  | _ -> 
//│ 		                                                                                                    testBoard_lh__d1_d5)
//│ 		                                                                                              | _ -> 
//│ 		                                                                                                testBoard_lh__d2_d3)
//│ 		                                                                                          | _ -> 
//│ 		                                                                                            testBoard_lh__d1_d3)
//│ 		                                                                                      | _ -> 
//│ 		                                                                                        testBoard_lh__d2)
//│ 		                                                                                  | _ -> 
//│ 		                                                                                    testBoard_lh__d1_d6)
//│ 		                                                                              | _ -> 
//│ 		                                                                                testBoard_lh__d4)
//│ 		                                                                          | _ -> 
//│ 		                                                                            testBoard_lh__d2_d0)
//│ 		                                                                      | _ -> 
//│ 		                                                                        testBoard_lh__d9)
//│ 		                                                                  | _ -> 
//│ 		                                                                    testBoard_lh__d5)
//│ 		                                                              | _ -> 
//│ 		                                                                testBoard_lh__d6)
//│ 		                                                          | _ -> 
//│ 		                                                            testBoard_lh__d1_d8)
//│ 		                                                      | _ -> 
//│ 		                                                        testBoard_lh__d2_d6)
//│ 		                                                  | _ -> 
//│ 		                                                    testBoard_lh__d3)
//│ 		                                              | _ -> 
//│ 		                                                testBoard_lh__d1_d1)
//│ 		                                          | _ -> 
//│ 		                                            testBoard_lh__d1_d9)
//│ 		                                      | _ -> 
//│ 		                                        testBoard_lh__d1_d7)
//│ 		                                  | _ -> 
//│ 		                                    testBoard_lh__d2_d7)
//│ 		                              | _ -> 
//│ 		                                testBoard_lh__d2_d2)
//│ 		                          | _ -> 
//│ 		                            testBoard_lh__d2_d1)
//│ 		                      | _ -> 
//│ 		                        testBoard_lh__d1_d4)
//│ 		                  | _ -> 
//│ 		                    testBoard_lh__d2_d5)
//│ 		              | _ -> 
//│ 		                testBoard_lh__d2_d4)
//│ 		          | _ -> 
//│ 		            testBoard_lh__d1)
//│ 		      | _ -> 
//│ 		        testBoard_lh__d2_d9)) in
//│ 		    (let rec game_0 = ((((alternate_lh__d1 (`X)) max'_lh__d1) min'_lh__d1) (board_0 _lh_prog_arg1_0)) in
//│ 		      ((mappend_lh__d1 (`LH_C('O', (`LH_C('X', (`LH_C('O', (`LH_C('|', (`LH_N)))))))))) (concat_lh__d1 ((map_lh__d1 showMove_lh__d1) game_0)))));;
//│ 		let rec length_lh__d1 ls_1_1 =
//│ 		  (match ls_1_1 with
//│ 		    | `LH_C(h_2_5, t_2_5) -> 
//│ 		      (1 + (length_lh__d1 t_2_5))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec testMinimax_nofib_lh__d1 _lh_testMinimax_nofib_arg1_0 =
//│ 		  (length_lh__d1 (prog_lh__d1 _lh_testMinimax_nofib_arg1_0));;
//│ 		(testMinimax_nofib_lh__d1 (`LH_C('1', (`LH_C('8', (`LH_C('0', (`LH_C('0', (`LH_C('0', (`LH_C('0', (`LH_N))))))))))))))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< after expansion <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C h⁴ mappend_lh_₁₂(t⁴, ys¹)]: 657 --->
//│ 	case ls⁸ of {LH_C h¹⁵ t¹⁵ => [LH_C f⁵(h¹⁵) map_lh_₃(f⁵, t¹⁵)] | LH_N  => [LH_N]}: 1249
//│ [LH_C h⁶ mappend_lh_₁₀(t⁶, ys³)]: 761 --->
//│ 	case xs¹⁰ of {LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₃(t¹⁹, ys¹⁰)] | LH_N  => ys¹⁰}: 1410
//│ [LH_C h⁸ mappend_lh_₈(t⁸, ys⁵)]: 785 --->
//│ 	case xs⁴ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₉(t⁷, ys⁴)] | LH_N  => ys⁴}: 775
//│ [LH_C h⁹ mappend_lh_₇(t⁹, ys⁶)]: 837 --->
//│ 	case xs² of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₁(t⁵, ys²)] | LH_N  => ys²}: 711
//│ [LH_C f³(h¹²) map_lh_₅(f³, t¹²)]: 1026 --->
//│ 	case lss⁰ of {LH_C h¹³ t¹³ => mappend_lh_₁₃(h¹³, concat_lh_₃(t¹³)) | LH_N  => [LH_N]}: 1157
//│ [LH_N]: 1027 --->
//│ 	case lss⁰ of {LH_C h¹³ t¹³ => mappend_lh_₁₃(h¹³, concat_lh_₃(t¹³)) | LH_N  => [LH_N]}: 1157
//│ [LH_C a¹ enumFromTo_lh_₂((a¹ + 1), b⁰)]: 1123 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 1478
//│ [LH_N]: 1124 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 1478
//│ [LH_C a² enumFromTo_lh_₁((a² + 1), b¹)]: 1143 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh_₂(1, 3)) | LH_N  => [LH_N]}: 1489
//│ [LH_N]: 1144 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh_₂(1, 3)) | LH_N  => [LH_N]}: 1489
//│ [LH_N]: 1167 --->
//│ 	case ls⁷ of {LH_C h¹⁴ t¹⁴ => [LH_C f⁴(h¹⁴) map_lh_₄(f⁴, t¹⁴)] | LH_N  => [LH_N]}: 1187
//│ [LH_C win8_lh_₁ [LH_N]]: 1168 --->
//│ 	case ls⁷ of {LH_C h¹⁴ t¹⁴ => [LH_C f⁴(h¹⁴) map_lh_₄(f⁴, t¹⁴)] | LH_N  => [LH_N]}: 1187
//│ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]: 1169 --->
//│ 	case ls⁷ of {LH_C h¹⁴ t¹⁴ => [LH_C f⁴(h¹⁴) map_lh_₄(f⁴, t¹⁴)] | LH_N  => [LH_N]}: 1187
//│ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]: 1170 --->
//│ 	case ls⁷ of {LH_C h¹⁴ t¹⁴ => [LH_C f⁴(h¹⁴) map_lh_₄(f⁴, t¹⁴)] | LH_N  => [LH_N]}: 1187
//│ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]: 1171 --->
//│ 	case ls⁷ of {LH_C h¹⁴ t¹⁴ => [LH_C f⁴(h¹⁴) map_lh_₄(f⁴, t¹⁴)] | LH_N  => [LH_N]}: 1187
//│ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]: 1172 --->
//│ 	case ls⁷ of {LH_C h¹⁴ t¹⁴ => [LH_C f⁴(h¹⁴) map_lh_₄(f⁴, t¹⁴)] | LH_N  => [LH_N]}: 1187
//│ [LH_C win3_lh_₁ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]]: 1173 --->
//│ 	case ls⁷ of {LH_C h¹⁴ t¹⁴ => [LH_C f⁴(h¹⁴) map_lh_₄(f⁴, t¹⁴)] | LH_N  => [LH_N]}: 1187
//│ [LH_C win2_lh_₁ [LH_C win3_lh_₁ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]]]: 1174 --->
//│ 	case ls⁷ of {LH_C h¹⁴ t¹⁴ => [LH_C f⁴(h¹⁴) map_lh_₄(f⁴, t¹⁴)] | LH_N  => [LH_N]}: 1187
//│ [LH_C win1_lh_₁ [LH_C win2_lh_₁ [LH_C win3_lh_₁ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]]]]: 1175 --->
//│ 	case ls⁷ of {LH_C h¹⁴ t¹⁴ => [LH_C f⁴(h¹⁴) map_lh_₄(f⁴, t¹⁴)] | LH_N  => [LH_N]}: 1187
//│ [LH_C f⁴(h¹⁴) map_lh_₄(f⁴, t¹⁴)]: 1185 --->
//│ 	case _lh_interpret_arg2¹ of {LH_N  => [Score _lh_interpret_arg1¹] | LH_C _lh_interpret_LH_C_0¹ _lh_interpret_LH_C_1¹ => case _lh_interpret_LH_C_0¹ of {Score _lh_interpret_Score_0¹ => interpret_lh_₁((_lh_interpret_arg1¹ + _lh_interpret_Score_0¹), _lh_interpret_LH_C_1¹) | XWin  => [XWin] | OWin  => [OWin]}}: 1206
//│ [LH_N]: 1186 --->
//│ 	case _lh_interpret_arg2¹ of {LH_N  => [Score _lh_interpret_arg1¹] | LH_C _lh_interpret_LH_C_0¹ _lh_interpret_LH_C_1¹ => case _lh_interpret_LH_C_0¹ of {Score _lh_interpret_Score_0¹ => interpret_lh_₁((_lh_interpret_arg1¹ + _lh_interpret_Score_0¹), _lh_interpret_LH_C_1¹) | XWin  => [XWin] | OWin  => [OWin]}}: 1206
//│ [LH_C f⁵(h¹⁵) map_lh_₃(f⁵, t¹⁵)]: 1247 --->
//│ 	case _lh_and_arg1⁰ of {LH_N  => [True] | LH_C _lh_and_LH_C_0⁰ _lh_and_LH_C_1⁰ => if _lh_and_LH_C_0⁰ then and_lh_₁(_lh_and_LH_C_1⁰) else [False]}: 1236
//│ [LH_N]: 1248 --->
//│ 	case _lh_and_arg1⁰ of {LH_N  => [True] | LH_C _lh_and_LH_C_0⁰ _lh_and_LH_C_1⁰ => if _lh_and_LH_C_0⁰ then and_lh_₁(_lh_and_LH_C_1⁰) else [False]}: 1236
//│ [LH_N]: 1260 --->
//│ 	case ls⁸ of {LH_C h¹⁵ t¹⁵ => [LH_C f⁵(h¹⁵) map_lh_₃(f⁵, t¹⁵)] | LH_N  => [LH_N]}: 1249
//│ [LH_C h¹⁷ mappend_lh_₅(t¹⁷, ys⁸)]: 1270 --->
//│ 	case xs¹⁰ of {LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₃(t¹⁹, ys¹⁰)] | LH_N  => ys¹⁰}: 1410
//│ [LH_N]: 1296 --->
//│ 	case xs² of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₁(t⁵, ys²)] | LH_N  => ys²}: 711
//│ [LH_C '|' [LH_N]]: 1297 --->
//│ 	case xs² of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₁(t⁵, ys²)] | LH_N  => ys²}: 711
//│ [LH_C '-' [LH_C '|' [LH_N]]]: 1298 --->
//│ 	case xs² of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₁(t⁵, ys²)] | LH_N  => ys²}: 711
//│ [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]: 1299 --->
//│ 	case xs² of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₁(t⁵, ys²)] | LH_N  => ys²}: 711
//│ [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]: 1300 --->
//│ 	case xs² of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₁(t⁵, ys²)] | LH_N  => ys²}: 711
//│ [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]: 1301 --->
//│ 	case xs² of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₁(t⁵, ys²)] | LH_N  => ys²}: 711
//│ [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]: 1302 --->
//│ 	case xs² of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₁(t⁵, ys²)] | LH_N  => ys²}: 711
//│ [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]: 1303 --->
//│ 	case xs² of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₁(t⁵, ys²)] | LH_N  => ys²}: 711
//│ [LH_C '|' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]]: 1304 --->
//│ 	case xs² of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₁(t⁵, ys²)] | LH_N  => ys²}: 711
//│ [LH_N]: 1320 --->
//│ 	case xs⁴ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₉(t⁷, ys⁴)] | LH_N  => ys⁴}: 775
//│ [LH_C '|' [LH_N]]: 1321 --->
//│ 	case xs⁴ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₉(t⁷, ys⁴)] | LH_N  => ys⁴}: 775
//│ [LH_C '-' [LH_C '|' [LH_N]]]: 1322 --->
//│ 	case xs⁴ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₉(t⁷, ys⁴)] | LH_N  => ys⁴}: 775
//│ [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]: 1323 --->
//│ 	case xs⁴ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₉(t⁷, ys⁴)] | LH_N  => ys⁴}: 775
//│ [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]: 1324 --->
//│ 	case xs⁴ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₉(t⁷, ys⁴)] | LH_N  => ys⁴}: 775
//│ [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]: 1325 --->
//│ 	case xs⁴ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₉(t⁷, ys⁴)] | LH_N  => ys⁴}: 775
//│ [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]: 1326 --->
//│ 	case xs⁴ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₉(t⁷, ys⁴)] | LH_N  => ys⁴}: 775
//│ [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]: 1327 --->
//│ 	case xs⁴ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₉(t⁷, ys⁴)] | LH_N  => ys⁴}: 775
//│ [LH_C '|' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]]: 1328 --->
//│ 	case xs⁴ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₉(t⁷, ys⁴)] | LH_N  => ys⁴}: 775
//│ [LH_N]: 1338 --->
//│ 	case xs¹⁰ of {LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₃(t¹⁹, ys¹⁰)] | LH_N  => ys¹⁰}: 1410
//│ [LH_C '|' [LH_N]]: 1339 --->
//│ 	case xs¹⁰ of {LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₃(t¹⁹, ys¹⁰)] | LH_N  => ys¹⁰}: 1410
//│ [LH_C '|' [LH_C '|' [LH_N]]]: 1340 --->
//│ 	case xs¹⁰ of {LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₃(t¹⁹, ys¹⁰)] | LH_N  => ys¹⁰}: 1410
//│ [LH_C h¹⁸ mappend_lh_₄(t¹⁸, ys⁹)]: 1358 --->
//│ 	case xs⁸ of {LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ mappend_lh_₅(t¹⁷, ys⁸)] | LH_N  => ys⁸}: 1272
//│ [LH_N]: 1388 --->
//│ 	case xs⁷ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₆(t¹⁰, ys⁷)] | LH_N  => ys⁷}: 851
//│ [LH_C 'e' [LH_N]]: 1389 --->
//│ 	case xs⁷ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₆(t¹⁰, ys⁷)] | LH_N  => ys⁷}: 851
//│ [LH_C 'r' [LH_C 'e' [LH_N]]]: 1390 --->
//│ 	case xs⁷ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₆(t¹⁰, ys⁷)] | LH_N  => ys⁷}: 851
//│ [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_N]]]]: 1391 --->
//│ 	case xs⁷ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₆(t¹⁰, ys⁷)] | LH_N  => ys⁷}: 851
//│ [LH_C 'c' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_N]]]]]: 1392 --->
//│ 	case xs⁷ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₆(t¹⁰, ys⁷)] | LH_N  => ys⁷}: 851
//│ [LH_C 'S' [LH_C 'c' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_N]]]]]]: 1393 --->
//│ 	case xs⁷ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₆(t¹⁰, ys⁷)] | LH_N  => ys⁷}: 851
//│ [LH_C h¹⁹ mappend_lh_₃(t¹⁹, ys¹⁰)]: 1408 --->
//│ 	case ls¹¹ of {LH_C h²⁵ t²⁵ => (1 + length_lh_₁(t²⁵)) | LH_N  => 0}: 2665
//│ [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 1474 --->
//│ 	case ls⁶ of {LH_C h¹² t¹² => [LH_C f³(h¹²) map_lh_₅(f³, t¹²)] | LH_N  => [LH_N]}: 1028
//│ [LH_N]: 1488 --->
//│ 	case ls⁶ of {LH_C h¹² t¹² => [LH_C f³(h¹²) map_lh_₅(f³, t¹²)] | LH_N  => [LH_N]}: 1028
//│ [LH_P2 b² s⁰]: 1511 --->
//│ 	case _lh_matchIdent⁵ of {LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰ => [LH_C [LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰] alternate_lh_₁(opposition⁰, _lh_alternate_arg3⁰, _lh_alternate_arg2⁰, _lh_alternate_LH_P2_0⁰)]}: 2411
//│ [LH_N]: 1622 --->
//│ 	case xs⁸ of {LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ mappend_lh_₅(t¹⁷, ys⁸)] | LH_N  => ys⁸}: 1272
//│ [LH_C '|' [LH_N]]: 1623 --->
//│ 	case xs⁸ of {LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ mappend_lh_₅(t¹⁷, ys⁸)] | LH_N  => ys⁸}: 1272
//│ [LH_N]: 1690 --->
//│ 	case xs¹¹ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₂(t²¹, ys¹¹)] | LH_N  => ys¹¹}: 1666
//│ [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]: 1691 --->
//│ 	case xs¹¹ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₂(t²¹, ys¹¹)] | LH_N  => ys¹¹}: 1666
//│ [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]: 1692 --->
//│ 	case xs¹¹ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₂(t²¹, ys¹¹)] | LH_N  => ys¹¹}: 1666
//│ [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]: 1693 --->
//│ 	case xs¹¹ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₂(t²¹, ys¹¹)] | LH_N  => ys¹¹}: 1666
//│ [LH_N]: 1902 --->
//│ 	case ls¹¹ of {LH_C h²⁵ t²⁵ => (1 + length_lh_₁(t²⁵)) | LH_N  => 0}: 2665
//│ [LH_C f⁷(h²³) map_lh_₁(f⁷, t²³)]: 2167 --->
//│ 	case lss² of {LH_C h²² t²² => mappend_lh_₃(h²², concat_lh_₁(t²²)) | LH_N  => [LH_N]}: 1903
//│ [LH_N]: 2168 --->
//│ 	case lss² of {LH_C h²² t²² => mappend_lh_₃(h²², concat_lh_₁(t²²)) | LH_N  => [LH_N]}: 1903
//│ [LH_N]: 2353 --->
//│ 	case ls¹⁰ of {LH_C h²³ t²³ => [LH_C f⁷(h²³) map_lh_₁(f⁷, t²³)] | LH_N  => [LH_N]}: 2169
//│ [LH_N]: 2361 --->
//│ 	case ls¹⁰ of {LH_C h²³ t²³ => [LH_C f⁷(h²³) map_lh_₁(f⁷, t²³)] | LH_N  => [LH_N]}: 2169
//│ [LH_N]: 2369 --->
//│ 	case ls¹⁰ of {LH_C h²³ t²³ => [LH_C f⁷(h²³) map_lh_₁(f⁷, t²³)] | LH_N  => [LH_N]}: 2169
//│ [LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰]: 2400 --->
//│ 	case _lh_showMove_arg1⁰ of {LH_P2 _lh_showMove_LH_P2_0⁰ _lh_showMove_LH_P2_1⁰ => mappend_lh_₅(mappend_lh_₄(showEvaluation_lh_₁(_lh_showMove_LH_P2_1⁰), [LH_C '|' [LH_N]]), showBoard_lh_₁(_lh_showMove_LH_P2_0⁰))}: 1630
//│ [LH_C [LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰] alternate_lh_₁(opposition⁰, _lh_alternate_arg3⁰, _lh_alternate_arg2⁰, _lh_alternate_LH_P2_0⁰)]: 2410 --->
//│ 	case ls¹⁰ of {LH_C h²³ t²³ => [LH_C f⁷(h²³) map_lh_₁(f⁷, t²³)] | LH_N  => [LH_N]}: 2169
//│ [LH_C h²⁴ mappend_lh_₁(t²⁴, ys¹²)]: 2431 --->
//│ 	case ls¹¹ of {LH_C h²⁵ t²⁵ => (1 + length_lh_₁(t²⁵)) | LH_N  => 0}: 2665
//│ [LH_N]: 2639 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₁(t²⁴, ys¹²)] | LH_N  => ys¹²}: 2433
//│ [LH_C '|' [LH_N]]: 2640 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₁(t²⁴, ys¹²)] | LH_N  => ys¹²}: 2433
//│ [LH_C 'O' [LH_C '|' [LH_N]]]: 2641 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₁(t²⁴, ys¹²)] | LH_N  => ys¹²}: 2433
//│ [LH_C 'X' [LH_C 'O' [LH_C '|' [LH_N]]]]: 2642 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₁(t²⁴, ys¹²)] | LH_N  => ys¹²}: 2433
//│ [LH_C 'O' [LH_C 'X' [LH_C 'O' [LH_C '|' [LH_N]]]]]: 2643 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₁(t²⁴, ys¹²)] | LH_N  => ys¹²}: 2433
//│ ------------------
//│ case xs² of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₁(t⁵, ys²)] | LH_N  => ys²}: 711 --->
//│ 	[LH_C h⁹ mappend_lh_₇(t⁹, ys⁶)]: 837
//│ 	[LH_N]: 1296
//│ 	[LH_C '|' [LH_N]]: 1297
//│ 	[LH_C '-' [LH_C '|' [LH_N]]]: 1298
//│ 	[LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]: 1299
//│ 	[LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]: 1300
//│ 	[LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]: 1301
//│ 	[LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]: 1302
//│ 	[LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]: 1303
//│ 	[LH_C '|' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]]: 1304
//│ case xs⁴ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₉(t⁷, ys⁴)] | LH_N  => ys⁴}: 775 --->
//│ 	[LH_C h⁸ mappend_lh_₈(t⁸, ys⁵)]: 785
//│ 	[LH_N]: 1320
//│ 	[LH_C '|' [LH_N]]: 1321
//│ 	[LH_C '-' [LH_C '|' [LH_N]]]: 1322
//│ 	[LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]: 1323
//│ 	[LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]: 1324
//│ 	[LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]: 1325
//│ 	[LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]: 1326
//│ 	[LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]: 1327
//│ 	[LH_C '|' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '|' [LH_N]]]]]]]]]: 1328
//│ case xs⁷ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₆(t¹⁰, ys⁷)] | LH_N  => ys⁷}: 851 --->
//│ 	[LH_N]: 1388
//│ 	[LH_C 'e' [LH_N]]: 1389
//│ 	[LH_C 'r' [LH_C 'e' [LH_N]]]: 1390
//│ 	[LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_N]]]]: 1391
//│ 	[LH_C 'c' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_N]]]]]: 1392
//│ 	[LH_C 'S' [LH_C 'c' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_N]]]]]]: 1393
//│ case ls⁶ of {LH_C h¹² t¹² => [LH_C f³(h¹²) map_lh_₅(f³, t¹²)] | LH_N  => [LH_N]}: 1028 --->
//│ 	[LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 1474
//│ 	[LH_N]: 1488
//│ case lss⁰ of {LH_C h¹³ t¹³ => mappend_lh_₁₃(h¹³, concat_lh_₃(t¹³)) | LH_N  => [LH_N]}: 1157 --->
//│ 	[LH_C f³(h¹²) map_lh_₅(f³, t¹²)]: 1026
//│ 	[LH_N]: 1027
//│ case ls⁷ of {LH_C h¹⁴ t¹⁴ => [LH_C f⁴(h¹⁴) map_lh_₄(f⁴, t¹⁴)] | LH_N  => [LH_N]}: 1187 --->
//│ 	[LH_N]: 1167
//│ 	[LH_C win8_lh_₁ [LH_N]]: 1168
//│ 	[LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]: 1169
//│ 	[LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]: 1170
//│ 	[LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]: 1171
//│ 	[LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]: 1172
//│ 	[LH_C win3_lh_₁ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]]: 1173
//│ 	[LH_C win2_lh_₁ [LH_C win3_lh_₁ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]]]: 1174
//│ 	[LH_C win1_lh_₁ [LH_C win2_lh_₁ [LH_C win3_lh_₁ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]]]]: 1175
//│ case _lh_interpret_arg2¹ of {LH_N  => [Score _lh_interpret_arg1¹] | LH_C _lh_interpret_LH_C_0¹ _lh_interpret_LH_C_1¹ => case _lh_interpret_LH_C_0¹ of {Score _lh_interpret_Score_0¹ => interpret_lh_₁((_lh_interpret_arg1¹ + _lh_interpret_Score_0¹), _lh_interpret_LH_C_1¹) | XWin  => [XWin] | OWin  => [OWin]}}: 1206 --->
//│ 	[LH_C f⁴(h¹⁴) map_lh_₄(f⁴, t¹⁴)]: 1185
//│ 	[LH_N]: 1186
//│ case _lh_and_arg1⁰ of {LH_N  => [True] | LH_C _lh_and_LH_C_0⁰ _lh_and_LH_C_1⁰ => if _lh_and_LH_C_0⁰ then and_lh_₁(_lh_and_LH_C_1⁰) else [False]}: 1236 --->
//│ 	[LH_C f⁵(h¹⁵) map_lh_₃(f⁵, t¹⁵)]: 1247
//│ 	[LH_N]: 1248
//│ case ls⁸ of {LH_C h¹⁵ t¹⁵ => [LH_C f⁵(h¹⁵) map_lh_₃(f⁵, t¹⁵)] | LH_N  => [LH_N]}: 1249 --->
//│ 	[LH_C h⁴ mappend_lh_₁₂(t⁴, ys¹)]: 657
//│ 	[LH_N]: 1260
//│ case xs⁸ of {LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ mappend_lh_₅(t¹⁷, ys⁸)] | LH_N  => ys⁸}: 1272 --->
//│ 	[LH_C h¹⁸ mappend_lh_₄(t¹⁸, ys⁹)]: 1358
//│ 	[LH_N]: 1622
//│ 	[LH_C '|' [LH_N]]: 1623
//│ case xs¹⁰ of {LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₃(t¹⁹, ys¹⁰)] | LH_N  => ys¹⁰}: 1410 --->
//│ 	[LH_C h⁶ mappend_lh_₁₀(t⁶, ys³)]: 761
//│ 	[LH_C h¹⁷ mappend_lh_₅(t¹⁷, ys⁸)]: 1270
//│ 	[LH_N]: 1338
//│ 	[LH_C '|' [LH_N]]: 1339
//│ 	[LH_C '|' [LH_C '|' [LH_N]]]: 1340
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 1478 --->
//│ 	[LH_C a¹ enumFromTo_lh_₂((a¹ + 1), b⁰)]: 1123
//│ 	[LH_N]: 1124
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh_₂(1, 3)) | LH_N  => [LH_N]}: 1489 --->
//│ 	[LH_C a² enumFromTo_lh_₁((a² + 1), b¹)]: 1143
//│ 	[LH_N]: 1144
//│ case _lh_showMove_arg1⁰ of {LH_P2 _lh_showMove_LH_P2_0⁰ _lh_showMove_LH_P2_1⁰ => mappend_lh_₅(mappend_lh_₄(showEvaluation_lh_₁(_lh_showMove_LH_P2_1⁰), [LH_C '|' [LH_N]]), showBoard_lh_₁(_lh_showMove_LH_P2_0⁰))}: 1630 --->
//│ 	[LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰]: 2400
//│ case xs¹¹ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₂(t²¹, ys¹¹)] | LH_N  => ys¹¹}: 1666 --->
//│ 	[LH_N]: 1690
//│ 	[LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]: 1691
//│ 	[LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]: 1692
//│ 	[LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]: 1693
//│ case lss² of {LH_C h²² t²² => mappend_lh_₃(h²², concat_lh_₁(t²²)) | LH_N  => [LH_N]}: 1903 --->
//│ 	[LH_C f⁷(h²³) map_lh_₁(f⁷, t²³)]: 2167
//│ 	[LH_N]: 2168
//│ case ls¹⁰ of {LH_C h²³ t²³ => [LH_C f⁷(h²³) map_lh_₁(f⁷, t²³)] | LH_N  => [LH_N]}: 2169 --->
//│ 	[LH_N]: 2353
//│ 	[LH_N]: 2361
//│ 	[LH_N]: 2369
//│ 	[LH_C [LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰] alternate_lh_₁(opposition⁰, _lh_alternate_arg3⁰, _lh_alternate_arg2⁰, _lh_alternate_LH_P2_0⁰)]: 2410
//│ case _lh_matchIdent⁵ of {LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰ => [LH_C [LH_P2 _lh_alternate_LH_P2_0⁰ _lh_alternate_LH_P2_1⁰] alternate_lh_₁(opposition⁰, _lh_alternate_arg3⁰, _lh_alternate_arg2⁰, _lh_alternate_LH_P2_0⁰)]}: 2411 --->
//│ 	[LH_P2 b² s⁰]: 1511
//│ case xs¹² of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₁(t²⁴, ys¹²)] | LH_N  => ys¹²}: 2433 --->
//│ 	[LH_N]: 2639
//│ 	[LH_C '|' [LH_N]]: 2640
//│ 	[LH_C 'O' [LH_C '|' [LH_N]]]: 2641
//│ 	[LH_C 'X' [LH_C 'O' [LH_C '|' [LH_N]]]]: 2642
//│ 	[LH_C 'O' [LH_C 'X' [LH_C 'O' [LH_C '|' [LH_N]]]]]: 2643
//│ case ls¹¹ of {LH_C h²⁵ t²⁵ => (1 + length_lh_₁(t²⁵)) | LH_N  => 0}: 2665 --->
//│ 	[LH_C h¹⁹ mappend_lh_₃(t¹⁹, ys¹⁰)]: 1408
//│ 	[LH_N]: 1902
//│ 	[LH_C h²⁴ mappend_lh_₁(t²⁴, ys¹²)]: 2431
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMinimax_nofib_lh_₁(primId⁰([LH_C '1' [LH_C '8' [LH_C '0' [LH_C '0' [LH_C '0' [LH_C '0' [LH_N]]]]]]]))
//│ def alternate_lh_₁(_lh_alternate_arg1⁰, _lh_alternate_arg2¹, _lh_alternate_arg3¹, _lh_alternate_arg4⁰) = if fullBoard_lh_₁(_lh_alternate_arg4⁰) then (fun f¹² -> (fun _lh_dummy¹⁴ -> (fun _lh_dummy¹⁵ -> 0))) else if polyEq⁰(static_lh_₁(_lh_alternate_arg4⁰), [XWin]) then (fun f¹³ -> (fun _lh_dummy¹⁶ -> (fun _lh_dummy¹⁷ -> 0))) else if polyEq⁰(static_lh_₂(_lh_alternate_arg4⁰), [OWin]) then (fun f¹⁴ -> (fun _lh_dummy¹⁸ -> (fun _lh_dummy¹⁹ -> 0))) else 
//│ 	let opposition¹ = opposite_lh_₁(_lh_alternate_arg1⁰)
//│ 	in let possibles⁰ = newPositions_lh_₁(_lh_alternate_arg1⁰, _lh_alternate_arg4⁰)
//│ 	in let scores⁰ = map_lh_₂(bestMove_lh_₁(opposition¹, _lh_alternate_arg3¹, _lh_alternate_arg2¹), possibles⁰)
//│ 	in let boardd_eval⁰ = best_lh_₁(_lh_alternate_arg2¹, possibles⁰, scores⁰)
//│ 	in let _lh_matchIdent⁵ = boardd_eval⁰
//│ 	in _lh_matchIdent⁵(_lh_alternate_arg2¹, _lh_alternate_arg3¹, opposition¹)
//│ def and_lh_₁(_lh_and_arg1⁰) = _lh_and_arg1⁰([lh_Unit])
//│ def bestMove_lh_₁(_lh_bestMove_arg1⁰, _lh_bestMove_arg2⁰, _lh_bestMove_arg3⁰, _lh_funcomp_x⁰) = (fun _lh_funcomp_x¹ -> mise_lh_₁(_lh_bestMove_arg2⁰, _lh_bestMove_arg3⁰, cropTree_lh_₁(_lh_funcomp_x¹)))((fun _lh_funcomp_x² -> mapTree_lh_₁(static_lh_₃, searchTree_lh_₁(_lh_bestMove_arg1⁰, _lh_funcomp_x²)))(_lh_funcomp_x⁰))
//│ def best_lh_₁(_lh_best_arg1⁰, _lh_best_arg2⁰, _lh_best_arg3⁰) = case _lh_best_arg2⁰ of {
//│ 	LH_C _lh_best_LH_C_0⁰ _lh_best_LH_C_1⁰ => case _lh_best_arg3⁰ of {
//│ 		LH_C _lh_best_LH_C_0¹ _lh_best_LH_C_1¹ => 
//│ 			let best'⁰ = (fun b² -> (fun s⁰ -> (fun ls1⁰ -> (fun ls2⁰ -> 
//│ 				let _lh_matchIdent² = ls1⁰
//│ 				in case _lh_matchIdent² of {
//│ 					LH_N  => 
//│ 						let _lh_matchIdent³ = ls2⁰
//│ 						in case _lh_matchIdent³ of {
//│ 							LH_N  => 
//│ 								let _lh_alternate_LH_P2_1⁰ = s⁰
//│ 								in let _lh_alternate_LH_P2_0⁰ = b²
//│ 								in (fun _lh_alternate_arg2⁰ -> (fun _lh_alternate_arg3⁰ -> (fun opposition⁰ -> 
//│ 									let t⁵⁶ = alternate_lh_₁(opposition⁰, _lh_alternate_arg3⁰, _lh_alternate_arg2⁰, _lh_alternate_LH_P2_0⁰)
//│ 									in let h⁵⁶ = 	
//│ 										let _lh_showMove_LH_P2_1⁰ = _lh_alternate_LH_P2_1⁰
//│ 										in let _lh_showMove_LH_P2_0⁰ = _lh_alternate_LH_P2_0⁰
//│ 										in (fun _lh_dummy¹¹ -> mappend_lh_₅(mappend_lh_₄(showEvaluation_lh_₁(_lh_showMove_LH_P2_1⁰), 
//│ 											let t⁵⁷ = (fun ys⁵³ -> ys⁵³)
//│ 											in let h⁵⁷ = '|'
//│ 											in (fun ys⁵⁴ -> 
//│ 												let t⁵⁸ = mappend_lh_₅(t⁵⁷, ys⁵⁴)
//│ 												in let h⁵⁸ = h⁵⁷
//│ 												in (fun ys⁵⁵ -> 
//│ 													let t⁵⁹ = mappend_lh_₃(t⁵⁸, ys⁵⁵)
//│ 													in let h⁵⁹ = h⁵⁸
//│ 													in (fun _lh_dummy¹² -> (1 + length_lh_₁(t⁵⁹)))))), showBoard_lh_₁(_lh_showMove_LH_P2_0⁰)))
//│ 									in (fun f¹¹ -> 
//│ 										let t⁶⁰ = map_lh_₁(f¹¹, t⁵⁶)
//│ 										in let h⁶⁰ = f¹¹(h⁵⁶)
//│ 										in (fun _lh_dummy¹³ -> mappend_lh_₃(h⁶⁰, concat_lh_₁(t⁶⁰)))))))
//│ 							| _  => error⁰}
//│ 					| LH_C _lh_best_LH_C_0² _lh_best_LH_C_1² => 
//│ 						let _lh_matchIdent⁴ = ls2⁰
//│ 						in case _lh_matchIdent⁴ of {
//│ 							LH_C _lh_best_LH_C_0³ _lh_best_LH_C_1³ => if polyEq⁰(s⁰, _lh_best_arg1⁰(s⁰, _lh_best_LH_C_0³)) then best'⁰(b², s⁰, _lh_best_LH_C_1², _lh_best_LH_C_1³) else best'⁰(_lh_best_LH_C_0², _lh_best_LH_C_0³, _lh_best_LH_C_1², _lh_best_LH_C_1³)
//│ 							| _  => error⁰}}))))
//│ 			in best'⁰(_lh_best_LH_C_0⁰, _lh_best_LH_C_0¹, _lh_best_LH_C_1⁰, _lh_best_LH_C_1¹)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def concat_lh_₁(lss²) = lss²([lh_Unit])
//│ def concat_lh_₂(lss¹) = case lss¹ of {
//│ 	LH_C h³ t³ => mappend_lh_₁₂(h³, concat_lh_₂(t³))
//│ 	| LH_N  => (fun f² -> (fun _lh_dummy⁰ -> [True]))}
//│ def concat_lh_₃(lss⁰) = lss⁰([lh_Unit])
//│ def cropTree_lh_₁(_lh_cropTree_arg1⁰) = case _lh_cropTree_arg1⁰ of {
//│ 	Branch _lh_cropTree_Branch_0⁰ _lh_cropTree_Branch_1⁰ => case _lh_cropTree_Branch_1⁰ of {
//│ 		LH_N  => [Branch _lh_cropTree_Branch_0⁰ [LH_N]]
//│ 		| _  => case _lh_cropTree_Branch_0⁰ of {
//│ 			Score _lh_cropTree_Score_0⁰ => [Branch [Score _lh_cropTree_Score_0⁰] map_lh_₇(cropTree_lh_₁, _lh_cropTree_Branch_1⁰)]
//│ 			| _  => [Branch _lh_cropTree_Branch_0⁰ [LH_N]]}}}
//│ def empty'_lh_₁(_lh_empty'_arg1⁰, _lh_empty'_arg2⁰) = case _lh_empty'_arg1⁰ of {
//│ 	1  => case _lh_empty'_arg2⁰ of {
//│ 		LH_C _lh_empty'_LH_C_0⁰ _lh_empty'_LH_C_1⁰ => case _lh_empty'_LH_C_0⁰ of {
//│ 			Empty  => case _lh_empty'_LH_C_1⁰ of {
//│ 				LH_C _lh_empty'_LH_C_0¹ _lh_empty'_LH_C_1¹ => case _lh_empty'_LH_C_1¹ of {
//│ 					LH_C _lh_empty'_LH_C_0² _lh_empty'_LH_C_1² => case _lh_empty'_LH_C_1² of {
//│ 						LH_N  => [True]
//│ 						| _  => [False]}
//│ 					| _  => [False]}
//│ 				| _  => [False]}
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| 2  => case _lh_empty'_arg2⁰ of {
//│ 		LH_C _lh_empty'_LH_C_0³ _lh_empty'_LH_C_1³ => case _lh_empty'_LH_C_1³ of {
//│ 			LH_C _lh_empty'_LH_C_0⁴ _lh_empty'_LH_C_1⁴ => case _lh_empty'_LH_C_0⁴ of {
//│ 				Empty  => case _lh_empty'_LH_C_1⁴ of {
//│ 					LH_C _lh_empty'_LH_C_0⁵ _lh_empty'_LH_C_1⁵ => case _lh_empty'_LH_C_1⁵ of {
//│ 						LH_N  => [True]
//│ 						| _  => [False]}
//│ 					| _  => [False]}
//│ 				| _  => [False]}
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| 3  => case _lh_empty'_arg2⁰ of {
//│ 		LH_C _lh_empty'_LH_C_0⁶ _lh_empty'_LH_C_1⁶ => case _lh_empty'_LH_C_1⁶ of {
//│ 			LH_C _lh_empty'_LH_C_0⁷ _lh_empty'_LH_C_1⁷ => case _lh_empty'_LH_C_1⁷ of {
//│ 				LH_C _lh_empty'_LH_C_0⁸ _lh_empty'_LH_C_1⁸ => case _lh_empty'_LH_C_0⁸ of {
//│ 					Empty  => case _lh_empty'_LH_C_1⁸ of {
//│ 						LH_N  => [True]
//│ 						| _  => [False]}
//│ 					| _  => [False]}
//│ 				| _  => [False]}
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def empty_lh_₁(_lh_empty_arg1⁰, _lh_empty_arg2⁰) = case _lh_empty_arg1⁰ of {
//│ 	LH_P2 _lh_empty_LH_P2_0⁰ _lh_empty_LH_P2_1⁰ => case _lh_empty_LH_P2_0⁰ of {
//│ 		1  => case _lh_empty_arg2⁰ of {
//│ 			LH_C _lh_empty_LH_C_0⁰ _lh_empty_LH_C_1⁰ => case _lh_empty_LH_C_1⁰ of {
//│ 				LH_C _lh_empty_LH_C_0¹ _lh_empty_LH_C_1¹ => case _lh_empty_LH_C_1¹ of {
//│ 					LH_C _lh_empty_LH_C_0² _lh_empty_LH_C_1² => case _lh_empty_LH_C_1² of {
//│ 						LH_N  => empty'_lh_₁(_lh_empty_LH_P2_1⁰, _lh_empty_LH_C_0⁰)
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| 2  => case _lh_empty_arg2⁰ of {
//│ 			LH_C _lh_empty_LH_C_0³ _lh_empty_LH_C_1³ => case _lh_empty_LH_C_1³ of {
//│ 				LH_C _lh_empty_LH_C_0⁴ _lh_empty_LH_C_1⁴ => case _lh_empty_LH_C_1⁴ of {
//│ 					LH_C _lh_empty_LH_C_0⁵ _lh_empty_LH_C_1⁵ => case _lh_empty_LH_C_1⁵ of {
//│ 						LH_N  => empty'_lh_₁(_lh_empty_LH_P2_1⁰, _lh_empty_LH_C_0⁴)
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| 3  => case _lh_empty_arg2⁰ of {
//│ 			LH_C _lh_empty_LH_C_0⁶ _lh_empty_LH_C_1⁶ => case _lh_empty_LH_C_1⁶ of {
//│ 				LH_C _lh_empty_LH_C_0⁷ _lh_empty_LH_C_1⁷ => case _lh_empty_LH_C_1⁷ of {
//│ 					LH_C _lh_empty_LH_C_0⁸ _lh_empty_LH_C_1⁸ => case _lh_empty_LH_C_1⁸ of {
//│ 						LH_N  => empty'_lh_₁(_lh_empty_LH_P2_1⁰, _lh_empty_LH_C_0⁸)
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def enumFromTo_lh_₁(a¹, b¹, _lh_floatOutId_0¹) = if (a¹ <= b¹) then 
//│ 	let _lh_listcomp_fun_ls_t³ = enumFromTo_lh_₁((a¹ + 1), b¹)
//│ 	in let _lh_listcomp_fun_ls_h³ = a¹
//│ 	in let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para¹ -> _lh_listcomp_fun_para¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun⁶, _lh_listcomp_fun_ls_t³, _lh_floatOutId_0¹))
//│ 	in _lh_listcomp_fun⁶(enumFromTo_lh_₂(1, 3)) else (fun f⁸ -> (fun _lh_dummy⁶ -> [LH_N]))
//│ def enumFromTo_lh_₂(a⁰, b⁰, _lh_floatOutId_0⁰, _lh_floatOutId_1⁰, _lh_floatOutId_2⁰, _lh_floatOutId_3⁰) = if (a⁰ <= b⁰) then (fun f³ -> (fun _lh_dummy¹ -> 
//│ 	let _lh_listcomp_fun_ls_t⁰ = enumFromTo_lh_₂((a⁰ + 1), b⁰)
//│ 	in let _lh_listcomp_fun_ls_h⁰ = a⁰
//│ 	in let t⁷ = _lh_floatOutId_1⁰(_lh_listcomp_fun_ls_t⁰)
//│ 	in let h⁷ = [LH_P2 _lh_floatOutId_0⁰ _lh_listcomp_fun_ls_h⁰]
//│ 	in let t⁸ = map_lh_₅(f³, t⁷)
//│ 	in let h⁸ = f³(h⁷)
//│ 	in mappend_lh_₁₃(h⁸, concat_lh_₃(t⁸)))) else _lh_floatOutId_3⁰(_lh_floatOutId_2⁰)
//│ def eval_lh_₁(_lh_eval_arg1⁰) = if (_lh_eval_arg1⁰ == 3) then [XWin] else if (_lh_eval_arg1⁰ == (0 - 3)) then [OWin] else [Score _lh_eval_arg1⁰]
//│ def foldr_lh_₁(f⁴, i⁰, ls³) = case ls³ of {
//│ 	LH_C h⁹ t⁹ => f⁴(h⁹, foldr_lh_₁(f⁴, i⁰, t⁹))
//│ 	| LH_N  => i⁰}
//│ def fullBoard_lh_₁(_lh_fullBoard_arg1⁰) = and_lh_₁(map_lh_₃((fun x⁰ -> not⁰(polyEq⁰(x⁰, [Empty]))), concat_lh_₂(_lh_fullBoard_arg1⁰)))
//│ def insert_lh_₁(_lh_insert_arg1⁰, _lh_insert_arg2⁰, _lh_insert_arg3⁰) = case _lh_insert_arg2⁰ of {
//│ 	LH_C _lh_insert_LH_C_0⁰ _lh_insert_LH_C_1⁰ => case _lh_insert_LH_C_1⁰ of {
//│ 		LH_C _lh_insert_LH_C_0¹ _lh_insert_LH_C_1¹ => case _lh_insert_LH_C_1¹ of {
//│ 			LH_C _lh_insert_LH_C_0² _lh_insert_LH_C_1² => case _lh_insert_LH_C_1² of {
//│ 				LH_N  => case _lh_insert_arg3⁰ of {
//│ 					1  => [LH_C _lh_insert_arg1⁰ [LH_C _lh_insert_LH_C_0¹ [LH_C _lh_insert_LH_C_0² [LH_N]]]]
//│ 					| 2  => [LH_C _lh_insert_LH_C_0⁰ [LH_C _lh_insert_arg1⁰ [LH_C _lh_insert_LH_C_0² [LH_N]]]]
//│ 					| 3  => [LH_C _lh_insert_LH_C_0⁰ [LH_C _lh_insert_LH_C_0¹ [LH_C _lh_insert_arg1⁰ [LH_N]]]]
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def interpret_lh_₁(_lh_interpret_arg1¹⁰, _lh_interpret_arg2¹) = _lh_interpret_arg2¹(_lh_interpret_arg1¹⁰)
//│ def interpret_lh_₂(_lh_interpret_arg1⁰, _lh_interpret_arg2⁰) = case _lh_interpret_arg2⁰ of {
//│ 	LH_N  => [Score _lh_interpret_arg1⁰]
//│ 	| LH_C _lh_interpret_LH_C_0⁰ _lh_interpret_LH_C_1⁰ => case _lh_interpret_LH_C_0⁰ of {
//│ 		Score _lh_interpret_Score_0⁰ => interpret_lh_₂((_lh_interpret_arg1⁰ + _lh_interpret_Score_0⁰), _lh_interpret_LH_C_1⁰)
//│ 		| XWin  => [XWin]
//│ 		| OWin  => [OWin]}}
//│ def length_lh_₁(ls¹⁰) = ls¹⁰([lh_Unit])
//│ def map2_lh_₁(_lh_map2_arg1¹, _lh_map2_arg2¹, _lh_map2_arg3¹) = case _lh_map2_arg2¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| _  => case _lh_map2_arg3¹ of {
//│ 		LH_N  => [LH_N]
//│ 		| _  => case _lh_map2_arg2¹ of {
//│ 			LH_C _lh_map2_LH_C_0² _lh_map2_LH_C_1² => case _lh_map2_arg3¹ of {
//│ 				LH_C _lh_map2_LH_C_0³ _lh_map2_LH_C_1³ => [LH_C _lh_map2_arg1¹(_lh_map2_LH_C_0², _lh_map2_LH_C_0³) map2_lh_₁(_lh_map2_arg1¹, _lh_map2_LH_C_1², _lh_map2_LH_C_1³)]}}}}
//│ def map2_lh_₂(_lh_map2_arg1⁰, _lh_map2_arg2⁰, _lh_map2_arg3⁰) = case _lh_map2_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| _  => case _lh_map2_arg3⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| _  => case _lh_map2_arg2⁰ of {
//│ 			LH_C _lh_map2_LH_C_0⁰ _lh_map2_LH_C_1⁰ => case _lh_map2_arg3⁰ of {
//│ 				LH_C _lh_map2_LH_C_0¹ _lh_map2_LH_C_1¹ => [LH_C _lh_map2_arg1⁰(_lh_map2_LH_C_0⁰, _lh_map2_LH_C_0¹) map2_lh_₂(_lh_map2_arg1⁰, _lh_map2_LH_C_1⁰, _lh_map2_LH_C_1¹)]}}}}
//│ def mapTree_lh_₁(_lh_mapTree_arg1⁰, _lh_mapTree_arg2⁰) = case _lh_mapTree_arg2⁰ of {
//│ 	Branch _lh_mapTree_Branch_0⁰ _lh_mapTree_Branch_1⁰ => [Branch _lh_mapTree_arg1⁰(_lh_mapTree_Branch_0⁰) map_lh_₇(mapTree_lh_₁(_lh_mapTree_arg1⁰), _lh_mapTree_Branch_1⁰)]}
//│ def map_lh_₁(f⁷, ls⁷) = ls⁷(f⁷)
//│ def map_lh_₂(f⁶, ls⁶) = case ls⁶ of {
//│ 	LH_C h⁴⁵ t⁴⁵ => [LH_C f⁶(h⁴⁵) map_lh_₂(f⁶, t⁴⁵)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f¹⁰, ls¹¹) = ls¹¹(f¹⁰)
//│ def map_lh_₄(f⁰, ls⁰) = ls⁰(f⁰)
//│ def map_lh_₅(f⁹, ls⁹) = ls⁹(f⁹)
//│ def map_lh_₆(f⁵, ls⁵) = case ls⁵ of {
//│ 	LH_C h⁴⁰ t⁴⁰ => [LH_C f⁵(h⁴⁰) map_lh_₆(f⁵, t⁴⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₇(f¹, ls¹) = case ls¹ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f¹(h⁰) map_lh_₇(f¹, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs¹, ys¹) = xs¹(ys¹)
//│ def mappend_lh_₁₀(xs⁵, ys¹¹) = case xs⁵ of {
//│ 	LH_C h¹² t¹² => 
//│ 		let t¹³ = mappend_lh_₁₀(t¹², ys¹¹)
//│ 		in let h¹³ = h¹²
//│ 		in (fun ys¹² -> 
//│ 			let t¹⁴ = mappend_lh_₃(t¹³, ys¹²)
//│ 			in let h¹⁴ = h¹³
//│ 			in (fun _lh_dummy² -> (1 + length_lh_₁(t¹⁴))))
//│ 	| LH_N  => ys¹¹}
//│ def mappend_lh_₁₁(xs⁸, ys²¹) = xs⁸(ys²¹)
//│ def mappend_lh_₁₂(xs¹², ys⁵⁶) = case xs¹² of {
//│ 	LH_C h⁶⁹ t⁶⁹ => 
//│ 		let t⁷⁰ = mappend_lh_₁₂(t⁶⁹, ys⁵⁶)
//│ 		in let h⁷⁰ = h⁶⁹
//│ 		in (fun f²⁴ -> 
//│ 			let _lh_and_LH_C_1⁰ = map_lh_₃(f²⁴, t⁷⁰)
//│ 			in let _lh_and_LH_C_0⁰ = f²⁴(h⁷⁰)
//│ 			in (fun _lh_dummy²⁰ -> if _lh_and_LH_C_0⁰ then and_lh_₁(_lh_and_LH_C_1⁰) else [False]))
//│ 	| LH_N  => ys⁵⁶}
//│ def mappend_lh_₁₃(xs¹⁰, ys⁴⁶) = case xs¹⁰ of {
//│ 	LH_C h⁴⁶ t⁴⁶ => [LH_C h⁴⁶ mappend_lh_₁₃(t⁴⁶, ys⁴⁶)]
//│ 	| LH_N  => ys⁴⁶}
//│ def mappend_lh_₂(xs⁴, ys¹⁰) = xs⁴(ys¹⁰)
//│ def mappend_lh_₃(xs⁰, ys⁰) = xs⁰(ys⁰)
//│ def mappend_lh_₄(xs⁹, ys⁴³) = case xs⁹ of {
//│ 	LH_C h⁴¹ t⁴¹ => 
//│ 		let t⁴² = mappend_lh_₄(t⁴¹, ys⁴³)
//│ 		in let h⁴² = h⁴¹
//│ 		in (fun ys⁴⁴ -> 
//│ 			let t⁴³ = mappend_lh_₅(t⁴², ys⁴⁴)
//│ 			in let h⁴³ = h⁴²
//│ 			in (fun ys⁴⁵ -> 
//│ 				let t⁴⁴ = mappend_lh_₃(t⁴³, ys⁴⁵)
//│ 				in let h⁴⁴ = h⁴³
//│ 				in (fun _lh_dummy⁵ -> (1 + length_lh_₁(t⁴⁴)))))
//│ 	| LH_N  => ys⁴³}
//│ def mappend_lh_₅(xs⁶, ys¹⁹) = xs⁶(ys¹⁹)
//│ def mappend_lh_₆(xs⁷, ys²⁰) = xs⁷(ys²⁰)
//│ def mappend_lh_₇(xs³, ys⁸) = case xs³ of {
//│ 	LH_C h¹⁰ t¹⁰ => 
//│ 		let t¹¹ = mappend_lh_₇(t¹⁰, ys⁸)
//│ 		in let h¹¹ = h¹⁰
//│ 		in (fun ys⁹ -> [LH_C h¹¹ mappend_lh_₁₁(t¹¹, ys⁹)])
//│ 	| LH_N  => ys⁸}
//│ def mappend_lh_₈(xs², ys²) = case xs² of {
//│ 	LH_C h¹ t¹ => 
//│ 		let t² = mappend_lh_₈(t¹, ys²)
//│ 		in let h² = h¹
//│ 		in (fun ys³ -> [LH_C h² mappend_lh_₉(t², ys³)])
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₉(xs¹¹, ys⁴⁷) = xs¹¹(ys⁴⁷)
//│ def max'_lh_₁(_lh_max'_arg1⁰, _lh_max'_arg2⁰) = case _lh_max'_arg1⁰ of {
//│ 	XWin  => [XWin]
//│ 	| _  => case _lh_max'_arg2⁰ of {
//│ 		XWin  => [XWin]
//│ 		| _  => case _lh_max'_arg2⁰ of {
//│ 			OWin  => _lh_max'_arg1⁰
//│ 			| _  => case _lh_max'_arg1⁰ of {
//│ 				OWin  => _lh_max'_arg2⁰
//│ 				| _  => case _lh_max'_arg1⁰ of {
//│ 					Score _lh_max'_Score_0⁰ => case _lh_max'_arg2⁰ of {
//│ 						Score _lh_max'_Score_0¹ => if (_lh_max'_Score_0⁰ > _lh_max'_Score_0¹) then [Score _lh_max'_Score_0⁰] else [Score _lh_max'_Score_0¹]}}}}}}
//│ def min'_lh_₁(_lh_min'_arg1⁰, _lh_min'_arg2⁰) = case _lh_min'_arg1⁰ of {
//│ 	OWin  => [OWin]
//│ 	| _  => case _lh_min'_arg2⁰ of {
//│ 		OWin  => [OWin]
//│ 		| _  => case _lh_min'_arg2⁰ of {
//│ 			XWin  => _lh_min'_arg1⁰
//│ 			| _  => case _lh_min'_arg1⁰ of {
//│ 				XWin  => _lh_min'_arg2⁰
//│ 				| _  => case _lh_min'_arg1⁰ of {
//│ 					Score _lh_min'_Score_0⁰ => case _lh_min'_arg2⁰ of {
//│ 						Score _lh_min'_Score_0¹ => if (_lh_min'_Score_0⁰ < _lh_min'_Score_0¹) then [Score _lh_min'_Score_0⁰] else [Score _lh_min'_Score_0¹]}}}}}}
//│ def mise_lh_₁(_lh_mise_arg1⁰, _lh_mise_arg2⁰, _lh_mise_arg3⁰) = case _lh_mise_arg3⁰ of {
//│ 	Branch _lh_mise_Branch_0⁰ _lh_mise_Branch_1⁰ => case _lh_mise_Branch_1⁰ of {
//│ 		LH_N  => _lh_mise_Branch_0⁰
//│ 		| _  => foldr_lh_₁(_lh_mise_arg1⁰, _lh_mise_arg2⁰([OWin], [XWin]), map_lh_₇(mise_lh_₁(_lh_mise_arg2⁰, _lh_mise_arg1⁰), _lh_mise_Branch_1⁰))}}
//│ def newPositions_lh_₁(_lh_newPositions_arg1⁰, _lh_newPositions_arg2⁰) = concat_lh_₃(map_lh_₅(placePiece_lh_₁(_lh_newPositions_arg1⁰, _lh_newPositions_arg2⁰), 
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> _lh_listcomp_fun_para⁰(_lh_listcomp_fun⁰))
//│ 	in _lh_listcomp_fun⁰(enumFromTo_lh_₁(1, 3))))
//│ def opposite_lh_₁(_lh_opposite_arg1⁰) = case _lh_opposite_arg1⁰ of {
//│ 	X  => [O]
//│ 	| O  => [X]
//│ 	| _  => error⁰}
//│ def placePiece_lh_₁(_lh_placePiece_arg1⁰, _lh_placePiece_arg2⁰, _lh_placePiece_arg3⁰) = if not⁰(empty_lh_₁(_lh_placePiece_arg3⁰, _lh_placePiece_arg2⁰)) then [LH_N] else 
//│ 	let _lh_matchIdent⁰ = _lh_placePiece_arg2⁰
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_C _lh_placePiece_LH_C_0⁰ _lh_placePiece_LH_C_1⁰ => case _lh_placePiece_LH_C_1⁰ of {
//│ 			LH_C _lh_placePiece_LH_C_0¹ _lh_placePiece_LH_C_1¹ => case _lh_placePiece_LH_C_1¹ of {
//│ 				LH_C _lh_placePiece_LH_C_0² _lh_placePiece_LH_C_1² => case _lh_placePiece_LH_C_1² of {
//│ 					LH_N  => 
//│ 						let _lh_matchIdent¹ = _lh_placePiece_arg3⁰
//│ 						in case _lh_matchIdent¹ of {
//│ 							LH_P2 _lh_placePiece_LH_P2_0⁰ _lh_placePiece_LH_P2_1⁰ => case _lh_placePiece_LH_P2_0⁰ of {
//│ 								1  => [LH_C [LH_C insert_lh_₁(_lh_placePiece_arg1⁰, _lh_placePiece_LH_C_0⁰, _lh_placePiece_LH_P2_1⁰) [LH_C _lh_placePiece_LH_C_0¹ [LH_C _lh_placePiece_LH_C_0² [LH_N]]]] [LH_N]]
//│ 								| 2  => [LH_C [LH_C _lh_placePiece_LH_C_0⁰ [LH_C insert_lh_₁(_lh_placePiece_arg1⁰, _lh_placePiece_LH_C_0¹, _lh_placePiece_LH_P2_1⁰) [LH_C _lh_placePiece_LH_C_0² [LH_N]]]] [LH_N]]
//│ 								| 3  => [LH_C [LH_C _lh_placePiece_LH_C_0⁰ [LH_C _lh_placePiece_LH_C_0¹ [LH_C insert_lh_₁(_lh_placePiece_arg1⁰, _lh_placePiece_LH_C_0², _lh_placePiece_LH_P2_1⁰) [LH_N]]]] [LH_N]]}}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ def prog_lh_₁(_lh_prog_arg1⁰) = 
//│ 	let board⁰ = (fun _lh_board_arg1⁰ -> case _lh_board_arg1⁰ of {
//│ 		LH_C _lh_board_LH_C_0⁰ _lh_board_LH_C_1⁰ => case _lh_board_LH_C_0⁰ of {
//│ 			'd'  => case _lh_board_LH_C_1⁰ of {
//│ 				LH_C _lh_board_LH_C_0¹ _lh_board_LH_C_1¹ => case _lh_board_LH_C_0¹ of {
//│ 					'o'  => case _lh_board_LH_C_1¹ of {
//│ 						LH_C _lh_board_LH_C_0² _lh_board_LH_C_1² => case _lh_board_LH_C_0² of {
//│ 							'e'  => case _lh_board_LH_C_1² of {
//│ 								LH_C _lh_board_LH_C_0³ _lh_board_LH_C_1³ => case _lh_board_LH_C_0³ of {
//│ 									's'  => case _lh_board_LH_C_1³ of {
//│ 										LH_C _lh_board_LH_C_0⁴ _lh_board_LH_C_1⁴ => case _lh_board_LH_C_0⁴ of {
//│ 											'n'  => case _lh_board_LH_C_1⁴ of {
//│ 												LH_C _lh_board_LH_C_0⁵ _lh_board_LH_C_1⁵ => case _lh_board_LH_C_0⁵ of {
//│ 													't'  => case _lh_board_LH_C_1⁵ of {
//│ 														LH_C _lh_board_LH_C_0⁶ _lh_board_LH_C_1⁶ => case _lh_board_LH_C_0⁶ of {
//│ 															' '  => case _lh_board_LH_C_1⁶ of {
//│ 																LH_C _lh_board_LH_C_0⁷ _lh_board_LH_C_1⁷ => case _lh_board_LH_C_0⁷ of {
//│ 																	'h'  => case _lh_board_LH_C_1⁷ of {
//│ 																		LH_C _lh_board_LH_C_0⁸ _lh_board_LH_C_1⁸ => case _lh_board_LH_C_0⁸ of {
//│ 																			'a'  => case _lh_board_LH_C_1⁸ of {
//│ 																				LH_C _lh_board_LH_C_0⁹ _lh_board_LH_C_1⁹ => case _lh_board_LH_C_0⁹ of {
//│ 																					'p'  => case _lh_board_LH_C_1⁹ of {
//│ 																						LH_C _lh_board_LH_C_0¹⁰ _lh_board_LH_C_1¹⁰ => case _lh_board_LH_C_0¹⁰ of {
//│ 																							'p'  => case _lh_board_LH_C_1¹⁰ of {
//│ 																								LH_C _lh_board_LH_C_0¹¹ _lh_board_LH_C_1¹¹ => case _lh_board_LH_C_0¹¹ of {
//│ 																									'e'  => case _lh_board_LH_C_1¹¹ of {
//│ 																										LH_C _lh_board_LH_C_0¹² _lh_board_LH_C_1¹² => case _lh_board_LH_C_0¹² of {
//│ 																											'n'  => case _lh_board_LH_C_1¹² of {
//│ 																												LH_N  => mappend_lh_₂(testBoard_lh_₂₈, testBoard_lh_₁₀)
//│ 																												| _  => testBoard_lh_₈}
//│ 																											| _  => testBoard_lh_₁₂}
//│ 																										| _  => testBoard_lh_₇}
//│ 																									| _  => testBoard_lh_₁₅}
//│ 																								| _  => testBoard_lh_₂₃}
//│ 																							| _  => testBoard_lh_₁₃}
//│ 																						| _  => testBoard_lh_₂}
//│ 																					| _  => testBoard_lh_₁₆}
//│ 																				| _  => testBoard_lh_₄}
//│ 																			| _  => testBoard_lh_₂₀}
//│ 																		| _  => testBoard_lh_₉}
//│ 																	| _  => testBoard_lh_₅}
//│ 																| _  => testBoard_lh_₆}
//│ 															| _  => testBoard_lh_₁₈}
//│ 														| _  => testBoard_lh_₂₆}
//│ 													| _  => testBoard_lh_₃}
//│ 												| _  => testBoard_lh_₁₁}
//│ 											| _  => testBoard_lh_₁₉}
//│ 										| _  => testBoard_lh_₁₇}
//│ 									| _  => testBoard_lh_₂₇}
//│ 								| _  => testBoard_lh_₂₂}
//│ 							| _  => testBoard_lh_₂₁}
//│ 						| _  => testBoard_lh_₁₄}
//│ 					| _  => testBoard_lh_₂₅}
//│ 				| _  => testBoard_lh_₂₄}
//│ 			| _  => testBoard_lh_₁}
//│ 		| _  => testBoard_lh_₂₉})
//│ 	in let game⁰ = alternate_lh_₁([X], max'_lh_₁, min'_lh_₁, board⁰(_lh_prog_arg1⁰))
//│ 	in mappend_lh_₁(
//│ 		let t⁴⁸ = 	
//│ 			let t⁴⁹ = 	
//│ 				let t⁵⁰ = 	
//│ 					let t⁵¹ = (fun ys⁴⁸ -> ys⁴⁸)
//│ 					in let h⁴⁸ = '|'
//│ 					in (fun ys⁴⁹ -> 
//│ 						let t⁵² = mappend_lh_₁(t⁵¹, ys⁴⁹)
//│ 						in let h⁴⁹ = h⁴⁸
//│ 						in (fun _lh_dummy⁷ -> (1 + length_lh_₁(t⁵²))))
//│ 				in let h⁵⁰ = 'O'
//│ 				in (fun ys⁵⁰ -> 
//│ 					let t⁵³ = mappend_lh_₁(t⁵⁰, ys⁵⁰)
//│ 					in let h⁵¹ = h⁵⁰
//│ 					in (fun _lh_dummy⁸ -> (1 + length_lh_₁(t⁵³))))
//│ 			in let h⁵² = 'X'
//│ 			in (fun ys⁵¹ -> 
//│ 				let t⁵⁴ = mappend_lh_₁(t⁴⁹, ys⁵¹)
//│ 				in let h⁵³ = h⁵²
//│ 				in (fun _lh_dummy⁹ -> (1 + length_lh_₁(t⁵⁴))))
//│ 		in let h⁵⁴ = 'O'
//│ 		in (fun ys⁵² -> 
//│ 			let t⁵⁵ = mappend_lh_₁(t⁴⁸, ys⁵²)
//│ 			in let h⁵⁵ = h⁵⁴
//│ 			in (fun _lh_dummy¹⁰ -> (1 + length_lh_₁(t⁵⁵)))), concat_lh_₁(map_lh_₁(showMove_lh_₁, game⁰)))
//│ def prune_lh_₁(_lh_prune_arg1⁰, _lh_prune_arg2⁰) = case _lh_prune_arg1⁰ of {
//│ 	0  => case _lh_prune_arg2⁰ of {
//│ 		Branch _lh_prune_Branch_0⁰ _lh_prune_Branch_1⁰ => [Branch _lh_prune_Branch_0⁰ [LH_N]]
//│ 		| _  => case _lh_prune_arg2⁰ of {
//│ 			Branch _lh_prune_Branch_0¹ _lh_prune_Branch_1¹ => if (_lh_prune_arg1⁰ < 0) then error⁰([LH_C 'T' [LH_C 'r' [LH_C 'e' [LH_C 'e' [LH_C '.' [LH_C 'p' [LH_C 'r' [LH_C 'u' [LH_C 'n' [LH_C 'e' [LH_C ':' [LH_C ' ' [LH_C '<' [LH_C ' ' [LH_C '0' [LH_N]]]]]]]]]]]]]]]]) else [Branch _lh_prune_Branch_0¹ map_lh_₇(prune_lh_₁((_lh_prune_arg1⁰ - 1)), _lh_prune_Branch_1¹)]}}
//│ 	| _  => case _lh_prune_arg2⁰ of {
//│ 		Branch _lh_prune_Branch_0² _lh_prune_Branch_1² => if (_lh_prune_arg1⁰ < 0) then error⁰([LH_C 'T' [LH_C 'r' [LH_C 'e' [LH_C 'e' [LH_C '.' [LH_C 'p' [LH_C 'r' [LH_C 'u' [LH_C 'n' [LH_C 'e' [LH_C ':' [LH_C ' ' [LH_C '<' [LH_C ' ' [LH_C '0' [LH_N]]]]]]]]]]]]]]]]) else [Branch _lh_prune_Branch_0² map_lh_₇(prune_lh_₁((_lh_prune_arg1⁰ - 1)), _lh_prune_Branch_1²)]}}
//│ def repTree_lh_₁(_lh_repTree_arg1⁰, _lh_repTree_arg2⁰, _lh_repTree_arg3⁰) = [Branch _lh_repTree_arg3⁰ map_lh_₇(repTree_lh_₁(_lh_repTree_arg2⁰, _lh_repTree_arg1⁰), _lh_repTree_arg1⁰(_lh_repTree_arg3⁰))]
//│ def scorePiece_lh_₁(_lh_scorePiece_arg1⁰, _lh_scorePiece_arg2⁰) = case _lh_scorePiece_arg1⁰ of {
//│ 	X  => _lh_scorePiece_arg2⁰
//│ 	| Empty  => 0
//│ 	| O  => (0 - _lh_scorePiece_arg2⁰)}
//│ def score_lh_₁(_lh_score_arg1⁰, _lh_score_arg2⁰) = eval_lh_₁(sum_lh_₂(map_lh_₇(sum_lh_₁, map2_lh_₂(map2_lh_₁(scorePiece_lh_₁), _lh_score_arg1⁰, _lh_score_arg2⁰))))
//│ def score_lh_₂(_lh_score_arg1¹, _lh_score_arg2¹) = eval_lh_₁(sum_lh_₂(map_lh_₇(sum_lh_₂, map2_lh_₂(map2_lh_₂(scorePiece_lh_₁), _lh_score_arg1¹, _lh_score_arg2¹))))
//│ def searchTree_lh_₁(_lh_searchTree_arg1⁰, _lh_searchTree_arg2⁰) = prune_lh_₁(5, repTree_lh_₁(newPositions_lh_₁(_lh_searchTree_arg1⁰), newPositions_lh_₁(opposite_lh_₁(_lh_searchTree_arg1⁰)), _lh_searchTree_arg2⁰))
//│ def showBoard_lh_₁(_lh_showBoard_arg1⁰) = case _lh_showBoard_arg1⁰ of {
//│ 	LH_C _lh_showBoard_LH_C_0⁰ _lh_showBoard_LH_C_1⁰ => case _lh_showBoard_LH_C_1⁰ of {
//│ 		LH_C _lh_showBoard_LH_C_0¹ _lh_showBoard_LH_C_1¹ => case _lh_showBoard_LH_C_1¹ of {
//│ 			LH_C _lh_showBoard_LH_C_0² _lh_showBoard_LH_C_1² => case _lh_showBoard_LH_C_1² of {
//│ 				LH_N  => mappend_lh_₁₀(mappend_lh_₉(mappend_lh_₈(mappend_lh_₁₁(mappend_lh_₇(showRow_lh_₃(_lh_showBoard_LH_C_0⁰), 
//│ 					let t²⁰ = 	
//│ 						let t²¹ = 	
//│ 							let t²² = 	
//│ 								let t²³ = 	
//│ 									let t²⁴ = 	
//│ 										let t²⁵ = 	
//│ 											let t²⁶ = 	
//│ 												let t²⁷ = (fun ys²² -> ys²²)
//│ 												in let h²⁰ = '|'
//│ 												in (fun ys²³ -> [LH_C h²⁰ mappend_lh_₁₁(t²⁷, ys²³)])
//│ 											in let h²¹ = '-'
//│ 											in (fun ys²⁴ -> [LH_C h²¹ mappend_lh_₁₁(t²⁶, ys²⁴)])
//│ 										in let h²² = '-'
//│ 										in (fun ys²⁵ -> [LH_C h²² mappend_lh_₁₁(t²⁵, ys²⁵)])
//│ 									in let h²³ = '-'
//│ 									in (fun ys²⁶ -> [LH_C h²³ mappend_lh_₁₁(t²⁴, ys²⁶)])
//│ 								in let h²⁴ = '-'
//│ 								in (fun ys²⁷ -> [LH_C h²⁴ mappend_lh_₁₁(t²³, ys²⁷)])
//│ 							in let h²⁵ = '-'
//│ 							in (fun ys²⁸ -> [LH_C h²⁵ mappend_lh_₁₁(t²², ys²⁸)])
//│ 						in let h²⁶ = '-'
//│ 						in (fun ys²⁹ -> [LH_C h²⁶ mappend_lh_₁₁(t²¹, ys²⁹)])
//│ 					in let h²⁷ = '|'
//│ 					in (fun ys³⁰ -> [LH_C h²⁷ mappend_lh_₁₁(t²⁰, ys³⁰)])), showRow_lh_₂(_lh_showBoard_LH_C_0¹)), 
//│ 					let t²⁸ = 	
//│ 						let t²⁹ = 	
//│ 							let t³⁰ = 	
//│ 								let t³¹ = 	
//│ 									let t³² = 	
//│ 										let t³³ = 	
//│ 											let t³⁴ = 	
//│ 												let t³⁵ = (fun ys³¹ -> ys³¹)
//│ 												in let h²⁸ = '|'
//│ 												in (fun ys³² -> [LH_C h²⁸ mappend_lh_₉(t³⁵, ys³²)])
//│ 											in let h²⁹ = '-'
//│ 											in (fun ys³³ -> [LH_C h²⁹ mappend_lh_₉(t³⁴, ys³³)])
//│ 										in let h³⁰ = '-'
//│ 										in (fun ys³⁴ -> [LH_C h³⁰ mappend_lh_₉(t³³, ys³⁴)])
//│ 									in let h³¹ = '-'
//│ 									in (fun ys³⁵ -> [LH_C h³¹ mappend_lh_₉(t³², ys³⁵)])
//│ 								in let h³² = '-'
//│ 								in (fun ys³⁶ -> [LH_C h³² mappend_lh_₉(t³¹, ys³⁶)])
//│ 							in let h³³ = '-'
//│ 							in (fun ys³⁷ -> [LH_C h³³ mappend_lh_₉(t³⁰, ys³⁷)])
//│ 						in let h³⁴ = '-'
//│ 						in (fun ys³⁸ -> [LH_C h³⁴ mappend_lh_₉(t²⁹, ys³⁸)])
//│ 					in let h³⁵ = '|'
//│ 					in (fun ys³⁹ -> [LH_C h³⁵ mappend_lh_₉(t²⁸, ys³⁹)])), showRow_lh_₁(_lh_showBoard_LH_C_0²)), 
//│ 					let t³⁶ = 	
//│ 						let t³⁷ = (fun ys⁴⁰ -> ys⁴⁰)
//│ 						in let h³⁶ = '|'
//│ 						in (fun ys⁴¹ -> 
//│ 							let t³⁸ = mappend_lh_₃(t³⁷, ys⁴¹)
//│ 							in let h³⁷ = h³⁶
//│ 							in (fun _lh_dummy³ -> (1 + length_lh_₁(t³⁸))))
//│ 					in let h³⁸ = '|'
//│ 					in (fun ys⁴² -> 
//│ 						let t³⁹ = mappend_lh_₃(t³⁶, ys⁴²)
//│ 						in let h³⁹ = h³⁸
//│ 						in (fun _lh_dummy⁴ -> (1 + length_lh_₁(t³⁹)))))
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def showEvaluation_lh_₁(_lh_showEvaluation_arg1⁰) = case _lh_showEvaluation_arg1⁰ of {
//│ 	XWin  => [LH_C 'X' [LH_C 'W' [LH_C 'i' [LH_C 'n' [LH_N]]]]]
//│ 	| OWin  => [LH_C 'O' [LH_C 'W' [LH_C 'i' [LH_C 'n' [LH_N]]]]]
//│ 	| Score _lh_showEvaluation_Score_0⁰ => mappend_lh_₆(
//│ 		let t¹⁵ = 	
//│ 			let t¹⁶ = 	
//│ 				let t¹⁷ = 	
//│ 					let t¹⁸ = 	
//│ 						let t¹⁹ = (fun ys¹³ -> ys¹³)
//│ 						in let h¹⁵ = 'e'
//│ 						in (fun ys¹⁴ -> [LH_C h¹⁵ mappend_lh_₆(t¹⁹, ys¹⁴)])
//│ 					in let h¹⁶ = 'r'
//│ 					in (fun ys¹⁵ -> [LH_C h¹⁶ mappend_lh_₆(t¹⁸, ys¹⁵)])
//│ 				in let h¹⁷ = 'o'
//│ 				in (fun ys¹⁶ -> [LH_C h¹⁷ mappend_lh_₆(t¹⁷, ys¹⁶)])
//│ 			in let h¹⁸ = 'c'
//│ 			in (fun ys¹⁷ -> [LH_C h¹⁸ mappend_lh_₆(t¹⁶, ys¹⁷)])
//│ 		in let h¹⁹ = 'S'
//│ 		in (fun ys¹⁸ -> [LH_C h¹⁹ mappend_lh_₆(t¹⁵, ys¹⁸)]), string_of_int⁰(_lh_showEvaluation_Score_0⁰))}
//│ def showMove_lh_₁(_lh_showMove_arg1⁰) = _lh_showMove_arg1⁰([lh_Unit])
//│ def showPiece_lh_₁(_lh_showPiece_arg1⁰) = case _lh_showPiece_arg1⁰ of {
//│ 	X  => [LH_C 'X' [LH_N]]
//│ 	| O  => [LH_C 'O' [LH_N]]
//│ 	| Empty  => [LH_C ' ' [LH_N]]}
//│ def showRow_lh_₁(_lh_showRow_arg1⁰) = case _lh_showRow_arg1⁰ of {
//│ 	LH_C _lh_showRow_LH_C_0⁰ _lh_showRow_LH_C_1⁰ => case _lh_showRow_LH_C_1⁰ of {
//│ 		LH_C _lh_showRow_LH_C_0¹ _lh_showRow_LH_C_1¹ => case _lh_showRow_LH_C_1¹ of {
//│ 			LH_C _lh_showRow_LH_C_0² _lh_showRow_LH_C_1² => case _lh_showRow_LH_C_1² of {
//│ 				LH_N  => mappend_lh_₁₃(mappend_lh_₁₃(mappend_lh_₁₃(mappend_lh_₁₃(showPiece_lh_₁(_lh_showRow_LH_C_0⁰), [LH_C '|' [LH_N]]), showPiece_lh_₁(_lh_showRow_LH_C_0¹)), [LH_C '|' [LH_N]]), showPiece_lh_₁(_lh_showRow_LH_C_0²))
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def showRow_lh_₂(_lh_showRow_arg1¹) = case _lh_showRow_arg1¹ of {
//│ 	LH_C _lh_showRow_LH_C_0³ _lh_showRow_LH_C_1³ => case _lh_showRow_LH_C_1³ of {
//│ 		LH_C _lh_showRow_LH_C_0⁴ _lh_showRow_LH_C_1⁴ => case _lh_showRow_LH_C_1⁴ of {
//│ 			LH_C _lh_showRow_LH_C_0⁵ _lh_showRow_LH_C_1⁵ => case _lh_showRow_LH_C_1⁵ of {
//│ 				LH_N  => mappend_lh_₁₃(mappend_lh_₁₃(mappend_lh_₁₃(mappend_lh_₁₃(showPiece_lh_₁(_lh_showRow_LH_C_0³), [LH_C '|' [LH_N]]), showPiece_lh_₁(_lh_showRow_LH_C_0⁴)), [LH_C '|' [LH_N]]), showPiece_lh_₁(_lh_showRow_LH_C_0⁵))
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def showRow_lh_₃(_lh_showRow_arg1²) = case _lh_showRow_arg1² of {
//│ 	LH_C _lh_showRow_LH_C_0⁶ _lh_showRow_LH_C_1⁶ => case _lh_showRow_LH_C_1⁶ of {
//│ 		LH_C _lh_showRow_LH_C_0⁷ _lh_showRow_LH_C_1⁷ => case _lh_showRow_LH_C_1⁷ of {
//│ 			LH_C _lh_showRow_LH_C_0⁸ _lh_showRow_LH_C_1⁸ => case _lh_showRow_LH_C_1⁸ of {
//│ 				LH_N  => mappend_lh_₁₃(mappend_lh_₁₃(mappend_lh_₁₃(mappend_lh_₁₃(showPiece_lh_₁(_lh_showRow_LH_C_0⁶), [LH_C '|' [LH_N]]), showPiece_lh_₁(_lh_showRow_LH_C_0⁷)), [LH_C '|' [LH_N]]), showPiece_lh_₁(_lh_showRow_LH_C_0⁸))
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def static_lh_₁(_lh_static_arg1⁰) = interpret_lh_₁(0, map_lh_₄(score_lh_₁(_lh_static_arg1⁰), wins_lh_₁))
//│ def static_lh_₂(_lh_static_arg1¹) = interpret_lh_₂(0, map_lh_₆(score_lh_₂(_lh_static_arg1¹), wins_lh_₂))
//│ def static_lh_₃(_lh_static_arg1²) = interpret_lh_₂(0, map_lh_₇(score_lh_₂(_lh_static_arg1²), wins_lh_₂))
//│ def sumAux_lh_₁(ls⁸, a²) = case ls⁸ of {
//│ 	LH_N  => a²
//│ 	| LH_C h⁴⁷ t⁴⁷ => sumAux_lh_₁(t⁴⁷, (a² + h⁴⁷))}
//│ def sum_lh_₁(ls⁴) = sumAux_lh_₁(ls⁴, 0)
//│ def sum_lh_₂(ls²) = sumAux_lh_₁(ls², 0)
//│ def testBoard_lh_₁ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₀ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₁ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₂ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₃ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₄ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₅ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₆ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₇ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₈ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₁₉ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₀ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₁ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₂ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₃ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₄ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₅ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₆ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₇ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₂₈(ys⁷) = 
//│ 	let t⁴ = 	
//│ 		let t⁵ = 	
//│ 			let t⁶ = (fun ys⁴ -> ys⁴)
//│ 			in let h⁴ = [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]]
//│ 			in (fun ys⁵ -> [LH_C h⁴ mappend_lh_₂(t⁶, ys⁵)])
//│ 		in let h⁵ = [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]]
//│ 		in (fun ys⁶ -> [LH_C h⁵ mappend_lh_₂(t⁵, ys⁶)])
//│ 	in let h⁶ = [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]]
//│ 	in [LH_C h⁶ mappend_lh_₂(t⁴, ys⁷)]
//│ def testBoard_lh_₂₉ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₃ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₄ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₅ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₆ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₇ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₈ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testBoard_lh_₉ = [LH_C [LH_C [Empty] [LH_C [O] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [X] [LH_C [Empty] [LH_N]]]] [LH_C [LH_C [Empty] [LH_C [Empty] [LH_C [Empty] [LH_N]]]] [LH_N]]]]
//│ def testMinimax_nofib_lh_₁(_lh_testMinimax_nofib_arg1⁰) = length_lh_₁(prog_lh_₁(_lh_testMinimax_nofib_arg1⁰))
//│ def win1_lh_₁ = [LH_C [LH_C 1 [LH_C 1 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def win2_lh_₁ = [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 1 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def win3_lh_₁ = [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 1 [LH_C 1 [LH_N]]]] [LH_N]]]]
//│ def win4_lh_₁ = [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def win5_lh_₁ = [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def win6_lh_₁ = [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_N]]]]
//│ def win7_lh_₁ = [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_N]]]]
//│ def win8_lh_₁ = [LH_C [LH_C 0 [LH_C 0 [LH_C 1 [LH_N]]]] [LH_C [LH_C 0 [LH_C 1 [LH_C 0 [LH_N]]]] [LH_C [LH_C 1 [LH_C 0 [LH_C 0 [LH_N]]]] [LH_N]]]]
//│ def wins_lh_₁(f²³, _lh_interpret_arg1⁹) = 
//│ 	let t⁶¹ = 	
//│ 		let t⁶² = 	
//│ 			let t⁶³ = 	
//│ 				let t⁶⁴ = 	
//│ 					let t⁶⁵ = 	
//│ 						let t⁶⁶ = 	
//│ 							let t⁶⁷ = 	
//│ 								let t⁶⁸ = (fun f¹⁵ -> (fun _lh_interpret_arg1¹ -> [Score _lh_interpret_arg1¹]))
//│ 								in let h⁶¹ = win8_lh_₁
//│ 								in (fun f¹⁶ -> 
//│ 									let _lh_interpret_LH_C_1¹ = map_lh_₄(f¹⁶, t⁶⁸)
//│ 									in let _lh_interpret_LH_C_0¹ = f¹⁶(h⁶¹)
//│ 									in (fun _lh_interpret_arg1² -> case _lh_interpret_LH_C_0¹ of {
//│ 										Score _lh_interpret_Score_0¹ => interpret_lh_₁((_lh_interpret_arg1² + _lh_interpret_Score_0¹), _lh_interpret_LH_C_1¹)
//│ 										| XWin  => [XWin]
//│ 										| OWin  => [OWin]}))
//│ 							in let h⁶² = win7_lh_₁
//│ 							in (fun f¹⁷ -> 
//│ 								let _lh_interpret_LH_C_1² = map_lh_₄(f¹⁷, t⁶⁷)
//│ 								in let _lh_interpret_LH_C_0² = f¹⁷(h⁶²)
//│ 								in (fun _lh_interpret_arg1³ -> case _lh_interpret_LH_C_0² of {
//│ 									Score _lh_interpret_Score_0² => interpret_lh_₁((_lh_interpret_arg1³ + _lh_interpret_Score_0²), _lh_interpret_LH_C_1²)
//│ 									| XWin  => [XWin]
//│ 									| OWin  => [OWin]}))
//│ 						in let h⁶³ = win6_lh_₁
//│ 						in (fun f¹⁸ -> 
//│ 							let _lh_interpret_LH_C_1³ = map_lh_₄(f¹⁸, t⁶⁶)
//│ 							in let _lh_interpret_LH_C_0³ = f¹⁸(h⁶³)
//│ 							in (fun _lh_interpret_arg1⁴ -> case _lh_interpret_LH_C_0³ of {
//│ 								Score _lh_interpret_Score_0³ => interpret_lh_₁((_lh_interpret_arg1⁴ + _lh_interpret_Score_0³), _lh_interpret_LH_C_1³)
//│ 								| XWin  => [XWin]
//│ 								| OWin  => [OWin]}))
//│ 					in let h⁶⁴ = win5_lh_₁
//│ 					in (fun f¹⁹ -> 
//│ 						let _lh_interpret_LH_C_1⁴ = map_lh_₄(f¹⁹, t⁶⁵)
//│ 						in let _lh_interpret_LH_C_0⁴ = f¹⁹(h⁶⁴)
//│ 						in (fun _lh_interpret_arg1⁵ -> case _lh_interpret_LH_C_0⁴ of {
//│ 							Score _lh_interpret_Score_0⁴ => interpret_lh_₁((_lh_interpret_arg1⁵ + _lh_interpret_Score_0⁴), _lh_interpret_LH_C_1⁴)
//│ 							| XWin  => [XWin]
//│ 							| OWin  => [OWin]}))
//│ 				in let h⁶⁵ = win4_lh_₁
//│ 				in (fun f²⁰ -> 
//│ 					let _lh_interpret_LH_C_1⁵ = map_lh_₄(f²⁰, t⁶⁴)
//│ 					in let _lh_interpret_LH_C_0⁵ = f²⁰(h⁶⁵)
//│ 					in (fun _lh_interpret_arg1⁶ -> case _lh_interpret_LH_C_0⁵ of {
//│ 						Score _lh_interpret_Score_0⁵ => interpret_lh_₁((_lh_interpret_arg1⁶ + _lh_interpret_Score_0⁵), _lh_interpret_LH_C_1⁵)
//│ 						| XWin  => [XWin]
//│ 						| OWin  => [OWin]}))
//│ 			in let h⁶⁶ = win3_lh_₁
//│ 			in (fun f²¹ -> 
//│ 				let _lh_interpret_LH_C_1⁶ = map_lh_₄(f²¹, t⁶³)
//│ 				in let _lh_interpret_LH_C_0⁶ = f²¹(h⁶⁶)
//│ 				in (fun _lh_interpret_arg1⁷ -> case _lh_interpret_LH_C_0⁶ of {
//│ 					Score _lh_interpret_Score_0⁶ => interpret_lh_₁((_lh_interpret_arg1⁷ + _lh_interpret_Score_0⁶), _lh_interpret_LH_C_1⁶)
//│ 					| XWin  => [XWin]
//│ 					| OWin  => [OWin]}))
//│ 		in let h⁶⁷ = win2_lh_₁
//│ 		in (fun f²² -> 
//│ 			let _lh_interpret_LH_C_1⁷ = map_lh_₄(f²², t⁶²)
//│ 			in let _lh_interpret_LH_C_0⁷ = f²²(h⁶⁷)
//│ 			in (fun _lh_interpret_arg1⁸ -> case _lh_interpret_LH_C_0⁷ of {
//│ 				Score _lh_interpret_Score_0⁷ => interpret_lh_₁((_lh_interpret_arg1⁸ + _lh_interpret_Score_0⁷), _lh_interpret_LH_C_1⁷)
//│ 				| XWin  => [XWin]
//│ 				| OWin  => [OWin]}))
//│ 	in let h⁶⁸ = win1_lh_₁
//│ 	in let _lh_interpret_LH_C_1⁸ = map_lh_₄(f²³, t⁶¹)
//│ 	in let _lh_interpret_LH_C_0⁸ = f²³(h⁶⁸)
//│ 	in case _lh_interpret_LH_C_0⁸ of {
//│ 		Score _lh_interpret_Score_0⁸ => interpret_lh_₁((_lh_interpret_arg1⁹ + _lh_interpret_Score_0⁸), _lh_interpret_LH_C_1⁸)
//│ 		| XWin  => [XWin]
//│ 		| OWin  => [OWin]}
//│ def wins_lh_₂ = [LH_C win1_lh_₁ [LH_C win2_lh_₁ [LH_C win3_lh_₁ [LH_C win4_lh_₁ [LH_C win5_lh_₁ [LH_C win6_lh_₁ [LH_C win7_lh_₁ [LH_C win8_lh_₁ [LH_N]]]]]]]]]
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
