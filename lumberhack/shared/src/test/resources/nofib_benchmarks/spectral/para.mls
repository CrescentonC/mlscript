:NewParser
:ParseOnly

:lhNoIter
:lhInHaskell
:lhGenOCaml
dropWhile f [] = []
dropWhile f (h:t) = if (f h) then dropWhile f t else (h:t)
drop n []      = []
drop n (h:t)   = if n <= 0 then (h:t) else (drop (n - 1) t)
splitAt n ls = (take n ls, drop n ls)
unwords []              =  ""
unwords (w:ws)          = w ++ go ws
  where
    go []     = ""
    go (v:vs) = ' ' : (v ++ (go vs))
break p [] = ([], [])
break p (x:xs) = if p x then ([], (x:xs)) else case (break p xs) of { (ys, zs) -> ((x:ys), zs) }
isSpace c = polyEq c ' '
words s = case (dropWhile isSpace s) of
          [] -> []
          (h:t) -> case (break isSpace (h:t)) of (w, s'') -> (w : (words s''))
lines s = case break (\x -> polyEq x '|') s of
                  (l, s') -> (l:(case s' of { [] -> []; _:s'' -> lines s'' }))
unlines ls = concat $ map (\l -> l ++ "|") ls
min a b = if a > b then b else a
null [] = True
null (h:t) = False
all f [] = True
all f (h:t) = if f h then all f t else False
fold1 :: (a->b->b) -> (a->b) -> [a] -> b
fold1 f g [a]   = g a
fold1 f g (a:x) = f a (fold1 f g x)
scan1 :: (a->b->b) -> (a->b) -> [a] -> [b]
scan1 f g = fold1 (\a -> \s -> ((f a (head s)) : s)) (\a -> [g a])
tails :: [a] -> [[a]]
tails = scan1 (\x -> \y -> x:y) (\x -> x:[])
single :: [a] -> Bool
single [a] = True
single _   = False
minWith :: (a->Int) -> [a] -> a
minWith f = fold1 (\a -> \b -> if ((f a) < (f b)) then a else b) (\x -> x)
type Txt = [Word]
type Word = String
type Paragraph = [Line]
type Line = [Word]
par0 :: Txt -> Paragraph
par0 x = ((minWith cost) . (filter feasible) . formats) x
formats :: Txt -> [Paragraph]
formats = fold1 (\w -> \ps -> (map (new w) ps) ++ (map (glue w) ps)) (\x -> [ [[x]] ])
new w ls      = [w]:ls
glue w (l:ls) = (w:l):ls
feasible :: Paragraph -> Bool
feasible a = all fits a
maxw :: Int
maxw = 70
fits :: Line -> Bool
fits xs = ((width xs) <= maxw)
width :: Line -> Int
width ls = fold1 plus length ls
  where plus w n = length w + 1 + n
optw :: Int
optw = 63
cost :: Paragraph -> Int
cost ls = fold1 plus (\_dum -> 0) ls
       where plus l n = linc l + n
             linc l = let a = (optw - (width l)) in a * a
fitH ls = (fits . head) ls
type Par    = (Width,Cost,Length)
type Width  = Int
type Cost   = Int
type Length = Int
width_tl x = fst3 x
cost_tl  x = snd3 x
len_tl   x = thd3 x
fst3 (a,b,c) = a
snd3 (a,b,c) = b
thd3 (a,b,c) = c
tile :: Txt -> ([Length],Length) -> Paragraph
tile ws ([],n)   = []
tile ws (m:ms,n) =
  let l = n - m in
  case (splitAt l ws) of { (ws1,ws2) ->
    ws1 : (tile ws2 (drop l (m:ms),m))
  }            
par3 :: Txt -> Paragraph
par3 ws =
  let zs = scan1 stepr startr (map length ws) in
  tile ws (map (len_tl . last' . fst3) zs, thd3 (head zs))
startr :: Length -> (SymList Par, Width, Length)
startr a = if a <= maxw then (cons' (0,0,0) nil',a,1) else error "startr param error"
stepr :: Length -> (SymList Par, Cost, Length) -> (SymList Par, Cost, Length)
stepr w (ps,tw,tl) =
  let tot_width = w + 1 + tw in
  let tot_len = 1 + tl in
  let single = \p -> (len_tl p) == 0 in
  let width_hd = \p -> if (single p) then tot_width else tot_width - (width_tl p) - 1 in
  let cost = \p -> if (single p) then 0 else (cost_tl p) + (let a = (optw - (width_hd p)) in a*a) in
  let old_width_hd = \p -> if (single p) then tw else tw - (width_tl p) - 1 in 
  let new = \p -> if (single p) then (tw,0,tl) else (tw, (cost_tl p) + (let x = (optw-(old_width_hd p)) in x*x), tl) in
  let trim = \ps_pq ->
                if null' ps_pq then
                  ps_pq
                else if single' ps_pq then
                  ps_pq
                else
                  let ps_p = init' ps_pq in
                  let q    = last' ps_pq in
                  let p    = last' ps_p in
                  if (cost p) <= (cost q) then
                    trim ps_p
                  else
                    ps_pq
  in
  let drop_nofit = \ps_p ->
                      if null' ps_p then
                        ps_p
                      else if (width_hd (last' ps_p)) > maxw then
                        drop_nofit (init' ps_p)
                      else 
                        ps_p
  in
  let bf = \p -> \q ->
            let wqh = width_hd q in
            let rqh = maxw - wqh + 1 in
            if (single q) && ((cost_tl p) == 0) then
              min (optw - (width_hd p)) rqh
            else if single q then
              rqh
            else
              (ceildiv ((cost p)-(cost q)) (2*(wqh-(width_hd p)))) `min` rqh
  in
  let myAdd = \p -> \qr_rs ->
                if (single' qr_rs) || (null' qr_rs) then
                  cons' p qr_rs
                else
                  let q = head' qr_rs in
                  let r_rs = tail' qr_rs in
                  let r  = head' r_rs in
                  if (bf p q) <= (bf q r) then
                    myAdd p r_rs
                  else
                    cons' p qr_rs
  in
  (trim (drop_nofit (new (last' ps) `myAdd` ps)), tot_width, tot_len)
ceildiv n m = (n+m-1) `div` m
fmt x = (unparse . (map (par3 . concat)) . parse) x
fmtWith par = unparse . (map (par . concat)) . parse
type SymList a = ([a],[a])
single' (x,y) = ((null x) && (single y)) || ((single x) && (null y))
null' ([],[]) = True
null' _       = False
nil' = ([],[])
head' (x,y) = if not (null x) then head x else head y
last' (y,x) = if not (null x) then head x else head y
cons' a (x,y) = if not (null y) then (a:x,y) else ([a],x)
snoc' a (y,x) = if not (null y) then (y,a:x) else (x,[a])
tail' (x,y) =
  if null x then
    ([],[])
  else if single x then
    case (splitAt ((length y) `div` 2) y) of {(y0,y1) -> (reverse y1, y0) }
  else
    (tail x, y)
init' (y,x) =
  if null x then
    ([],[])
  else if single x then
    case (splitAt ((length y) `div` 2) y) of { (y0,y1) -> (y0, reverse y1) }
  else
    (y, tail x)
unformat :: a -> [[a]] -> [a]
unformat a = fold1 (\xs -> \ys -> xs ++ [a] ++ ys) (\x -> x)
format :: Eq a => a -> [a] -> [[a]]
format a [] = [[]]
format a x = fold1 (break a) (start a) x
  where break a b xs = if polyEq a b then []:xs else (b:(head xs)):(tail xs)
        start a b = break a b [[]]
unparas :: [[[String]]] -> [[String]]
unparas ls = unformat [] ls
paras :: [[String]] -> [[[String]]]
paras ls   = ((filter (\x -> polyNeq [] x)) . (format [])) ls
parse ls   = (paras . (map words) . lines) ls
unparse ls = (unlines . (map unwords) . unparas) ls
testPara_nofib dummy =
  let test = primId ("In the constructive programming community it is commonplace to see ") ++
             primId ("formal developments of textbook algorithms. In the algorithm design ") ++
             primId ("community, on the other hand, it may be well known that the textbook ") ++
             primId ("solution to a problem is not the most efficient possible. However, in ") ++
             primId ("presenting the more efficient solution, the algorithm designer will ") ++
             primId ("usually omit some of the implementation details, this creating an ") ++
             primId ("algorithm gap between the abstract algorithm and its concrete ") ++
             primId ("implementation. This is in contrast to the formal development, which ") ++
             primId ("usually presents the complete concrete implementation of the less ") ++
             primId ("efficient solution.| |")
  in
  if null (test) then [] else (fmt (test))
testPara_nofib $ primId 0
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testPara_nofib_lh_₁^3181(primId⁰(0))
//│ def break_lh_₁(_lh_break_arg1², _lh_break_arg2²) = case _lh_break_arg2² of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1²(_lh_break_LH_C_0¹) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]] else 
//│ 		let _lh_matchIdent⁴ = break_lh_₁^851(_lh_break_arg1², _lh_break_LH_C_1¹)
//│ 		in case _lh_matchIdent⁴ of {
//│ 			LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def break_lh_₂(_lh_break_arg1¹, _lh_break_arg2¹) = case _lh_break_arg2¹ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else 
//│ 		let _lh_matchIdent³ = break_lh_₂^808(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent³ of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def ceildiv_lh_₁(_lh_ceildiv_arg1⁰, _lh_ceildiv_arg2⁰) = div⁰(((_lh_ceildiv_arg1⁰ + _lh_ceildiv_arg2⁰) - 1), _lh_ceildiv_arg2⁰)
//│ def concat_lh_₁(lss¹) = case lss¹ of {
//│ 	LH_C h²⁷ t²⁷ => mappend_lh_₁₀^1645(h²⁷, concat_lh_₁^1648(t²⁷))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₂(lss⁰) = case lss⁰ of {
//│ 	LH_C h¹⁶ t¹⁶ => mappend_lh_₁₄^914(h¹⁶, concat_lh_₂^917(t¹⁶))
//│ 	| LH_N  => [LH_N]}
//│ def cons'_lh_₁(_lh_cons'_arg1², _lh_cons'_arg2²) = case _lh_cons'_arg2² of {
//│ 	LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₃^660(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]
//│ 	| _  => error⁰}
//│ def cons'_lh_₂(_lh_cons'_arg1¹, _lh_cons'_arg2¹) = case _lh_cons'_arg2¹ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅^355(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]
//│ 	| _  => error⁰}
//│ def cons'_lh_₃(_lh_cons'_arg1⁰, _lh_cons'_arg2⁰) = case _lh_cons'_arg2⁰ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅^313(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]
//│ 	| _  => error⁰}
//│ def cost_tl_lh_₁(_lh_cost_tl_arg1²) = snd3_lh_₁^420(_lh_cost_tl_arg1²)
//│ def cost_tl_lh_₂(_lh_cost_tl_arg1¹) = snd3_lh_₁^415(_lh_cost_tl_arg1¹)
//│ def cost_tl_lh_₃(_lh_cost_tl_arg1⁰) = snd3_lh_₁^259(_lh_cost_tl_arg1⁰)
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁^783(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]
//│ 	| _  => error⁰}
//│ def drop_lh_₁(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁^230((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def filter_lh_₁(f⁰, ls¹¹) = case ls¹¹ of {
//│ 	LH_C h¹³ t¹³ => if f⁰(h¹³) then [LH_C h¹³ filter_lh_₁^711(f⁰, t¹³)] else filter_lh_₁^717(f⁰, t¹³)
//│ 	| LH_N  => [LH_N]}
//│ def fmt_lh_₁(_lh_fmt_arg1⁰) = (fun _lh_funcomp_x⁷ -> (fun _lh_funcomp_x⁸ -> unparse_lh_₁^1755(map_lh_₁^1756((fun _lh_funcomp_x⁹ -> par3_lh_₁^1757(concat_lh_₁^1758(_lh_funcomp_x⁹))), _lh_funcomp_x⁸)))(parse_lh_₁^1768(_lh_funcomp_x⁷)))(_lh_fmt_arg1⁰)
//│ def fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_arg3²) = case _lh_fold1_arg3² of {
//│ 	LH_C _lh_fold1_LH_C_0² _lh_fold1_LH_C_1² => case _lh_fold1_LH_C_1² of {
//│ 		LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²)
//│ 		| _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁^687(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_arg3¹) = case _lh_fold1_arg3¹ of {
//│ 	LH_C _lh_fold1_LH_C_0¹ _lh_fold1_LH_C_1¹ => case _lh_fold1_LH_C_1¹ of {
//│ 		LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹)
//│ 		| _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂^153(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_arg3⁰) = case _lh_fold1_arg3⁰ of {
//│ 	LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {
//│ 		LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰)
//│ 		| _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃^119(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}
//│ 	| _  => error⁰}
//│ def format_lh_₁(_lh_format_arg1⁰, _lh_format_arg2⁰) = case _lh_format_arg2⁰ of {
//│ 	LH_N  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let break⁰ = (fun _lh_break_arg1⁰ -> (fun _lh_break_arg2⁰ -> (fun _lh_break_arg3⁰ -> if polyEq⁰(_lh_break_arg1⁰, _lh_break_arg2⁰) then [LH_C [LH_N] _lh_break_arg3⁰] else [LH_C [LH_C _lh_break_arg2⁰ head_lh_₅^740(_lh_break_arg3⁰)] tail_lh_₁^744(_lh_break_arg3⁰)])))
//│ 		and start⁰ = (fun _lh_start_arg1⁰ -> (fun _lh_start_arg2⁰ -> break⁰(_lh_start_arg1⁰, _lh_start_arg2⁰, [LH_C [LH_N] [LH_N]]))) 
//│ 		in fold1_lh_₃^763(break⁰(_lh_format_arg1⁰), start⁰(_lh_format_arg1⁰), _lh_format_arg2⁰)}
//│ def fst3_lh_₁(_lh_fst3_arg1⁰) = case _lh_fst3_arg1⁰ of {
//│ 	LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰
//│ 	| _  => error⁰}
//│ def head'_lh_₁(_lh_head'_arg1¹) = case _lh_head'_arg1¹ of {
//│ 	LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₅^583(_lh_head'_LH_P2_0¹)) then head_lh_₇^587(_lh_head'_LH_P2_0¹) else head_lh_₇^590(_lh_head'_LH_P2_1¹)
//│ 	| _  => error⁰}
//│ def head'_lh_₂(_lh_head'_arg1⁰) = case _lh_head'_arg1⁰ of {
//│ 	LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅^339(_lh_head'_LH_P2_0⁰)) then head_lh_₇^343(_lh_head'_LH_P2_0⁰) else head_lh_₇^346(_lh_head'_LH_P2_1⁰)
//│ 	| _  => error⁰}
//│ def head_lh_₁(ls¹⁶) = case ls¹⁶ of {
//│ 	LH_C h²³ t²³ => h²³
//│ 	| LH_N  => error⁰}
//│ def head_lh_₂(ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h¹² t¹² => h¹²
//│ 	| LH_N  => error⁰}
//│ def head_lh_₃(ls⁹) = case ls⁹ of {
//│ 	LH_C h¹¹ t¹¹ => h¹¹
//│ 	| LH_N  => error⁰}
//│ def head_lh_₄(ls⁸) = case ls⁸ of {
//│ 	LH_C h¹⁰ t¹⁰ => h¹⁰
//│ 	| LH_N  => error⁰}
//│ def head_lh_₅(ls⁷) = case ls⁷ of {
//│ 	LH_C h⁶ t⁶ => h⁶
//│ 	| LH_N  => error⁰}
//│ def head_lh_₆(ls⁵) = case ls⁵ of {
//│ 	LH_C h⁴ t⁴ => h⁴
//│ 	| LH_N  => error⁰}
//│ def head_lh_₇(ls⁴) = case ls⁴ of {
//│ 	LH_C h³ t³ => h³
//│ 	| LH_N  => error⁰}
//│ def init'_lh_₁(_lh_init'_arg1¹) = case _lh_init'_arg1¹ of {
//│ 	LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₅^510(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁^516(_lh_init'_LH_P2_1²) then 
//│ 		let _lh_matchIdent¹ = splitAt_lh_₂^519(div⁰(length_lh_₁^521(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ 		in case _lh_matchIdent¹ of {
//│ 			LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁^532(_lh_init'_LH_P2_1³)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₂^540(_lh_init'_LH_P2_1²)]
//│ 	| _  => error⁰}
//│ def init'_lh_₂(_lh_init'_arg1⁰) = case _lh_init'_arg1⁰ of {
//│ 	LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₅^425(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁^431(_lh_init'_LH_P2_1⁰) then 
//│ 		let _lh_matchIdent⁰ = splitAt_lh_₂^434(div⁰(length_lh_₁^436(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁^447(_lh_init'_LH_P2_1¹)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂^455(_lh_init'_LH_P2_1⁰)]
//│ 	| _  => error⁰}
//│ def isSpace_lh_₁(_lh_isSpace_arg1¹) = polyEq⁰(_lh_isSpace_arg1¹, ' ')
//│ def isSpace_lh_₂(_lh_isSpace_arg1⁰) = polyEq⁰(_lh_isSpace_arg1⁰, ' ')
//│ def last'_lh_₁(_lh_last'_arg1⁴) = case _lh_last'_arg1⁴ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂^994(_lh_last'_LH_P2_1⁴)) then head_lh_₃^998(_lh_last'_LH_P2_1⁴) else head_lh_₄^1001(_lh_last'_LH_P2_0⁴)
//│ 	| _  => error⁰}
//│ def last'_lh_₂(_lh_last'_arg1³) = case _lh_last'_arg1³ of {
//│ 	LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₄^640(_lh_last'_LH_P2_1³)) then head_lh_₆^644(_lh_last'_LH_P2_1³) else head_lh_₇^647(_lh_last'_LH_P2_0³)
//│ 	| _  => error⁰}
//│ def last'_lh_₃(_lh_last'_arg1²) = case _lh_last'_arg1² of {
//│ 	LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₅^552(_lh_last'_LH_P2_1²)) then head_lh_₇^556(_lh_last'_LH_P2_1²) else head_lh_₇^559(_lh_last'_LH_P2_0²)
//│ 	| _  => error⁰}
//│ def last'_lh_₄(_lh_last'_arg1¹) = case _lh_last'_arg1¹ of {
//│ 	LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₅^466(_lh_last'_LH_P2_1¹)) then head_lh_₇^470(_lh_last'_LH_P2_1¹) else head_lh_₇^473(_lh_last'_LH_P2_0¹)
//│ 	| _  => error⁰}
//│ def last'_lh_₅(_lh_last'_arg1⁰) = case _lh_last'_arg1⁰ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅^376(_lh_last'_LH_P2_1⁰)) then head_lh_₇^380(_lh_last'_LH_P2_1⁰) else head_lh_₇^383(_lh_last'_LH_P2_0⁰)
//│ 	| _  => error⁰}
//│ def len_tl_lh_₁(_lh_len_tl_arg1¹) = thd3_lh_₂^1047(_lh_len_tl_arg1¹)
//│ def len_tl_lh_₂(_lh_len_tl_arg1⁰) = thd3_lh_₂^577(_lh_len_tl_arg1⁰)
//│ def length_lh_₁(ls¹³) = case ls¹³ of {
//│ 	LH_C h²⁰ t²⁰ => (1 + length_lh_₁^971(t²⁰))
//│ 	| LH_N  => 0}
//│ def lines_lh_₁(_lh_lines_arg1⁰) = 
//│ 	let _lh_matchIdent⁸ = break_lh_₁^1542((fun x³ -> polyEq⁰(x³, '|')), _lh_lines_arg1⁰)
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ 
//│ 			let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ 			in case _lh_matchIdent⁹ of {
//│ 				LH_N  => [LH_N]
//│ 				| LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁^1557(_lh_lines_LH_C_1⁰)
//│ 				| _  => error⁰}]
//│ 		| _  => error⁰}
//│ def map_lh_₁(f⁶, ls¹⁹) = case ls¹⁹ of {
//│ 	LH_C h²⁶ t²⁶ => [LH_C f⁶(h²⁶) map_lh_₁^1634(f⁶, t²⁶)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f⁵, ls¹⁸) = case ls¹⁸ of {
//│ 	LH_C h²⁵ t²⁵ => [LH_C f⁵(h²⁵) map_lh_₂^1572(f⁵, t²⁵)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f⁴, ls¹⁷) = case ls¹⁷ of {
//│ 	LH_C h²⁴ t²⁴ => [LH_C f⁴(h²⁴) map_lh_₃^1532(f⁴, t²⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f³, ls¹⁵) = case ls¹⁵ of {
//│ 	LH_C h²² t²² => [LH_C f³(h²²) map_lh_₄^1446(f³, t²²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f², ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h²¹ t²¹ => [LH_C f²(h²¹) map_lh_₅^982(f², t²¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f¹, ls¹²) = case ls¹² of {
//│ 	LH_C h¹⁷ t¹⁷ => [LH_C f¹(h¹⁷) map_lh_₆^928(f¹, t¹⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs¹⁶, ys¹⁶) = case xs¹⁶ of {
//│ 	LH_C h³⁶ t³⁶ => [LH_C h³⁶ mappend_lh_₁^1850(t³⁶, ys¹⁶)]
//│ 	| LH_N  => ys¹⁶}
//│ def mappend_lh_₁₀(xs⁷, ys⁷) = case xs⁷ of {
//│ 	LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₁₀^952(t¹⁹, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₁₁(xs⁶, ys⁶) = case xs⁶ of {
//│ 	LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁^940(t¹⁸, ys⁶)]
//│ 	| LH_N  => ys⁶}
//│ def mappend_lh_₁₂(xs⁴, ys⁴) = case xs⁴ of {
//│ 	LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₁₂^884(t¹⁵, ys⁴)]
//│ 	| LH_N  => ys⁴}
//│ def mappend_lh_₁₃(xs³, ys³) = case xs³ of {
//│ 	LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₁₃^872(t¹⁴, ys³)]
//│ 	| LH_N  => ys³}
//│ def mappend_lh_₁₄(xs², ys²) = case xs² of {
//│ 	LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄^181(t⁹, ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₁₅(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₁₅^169(t⁸, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₁₆(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₆^135(t⁷, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₂(xs¹⁵, ys¹⁵) = case xs¹⁵ of {
//│ 	LH_C h³⁵ t³⁵ => [LH_C h³⁵ mappend_lh_₂^1838(t³⁵, ys¹⁵)]
//│ 	| LH_N  => ys¹⁵}
//│ def mappend_lh_₃(xs¹⁴, ys¹⁴) = case xs¹⁴ of {
//│ 	LH_C h³⁴ t³⁴ => [LH_C h³⁴ mappend_lh_₃^1826(t³⁴, ys¹⁴)]
//│ 	| LH_N  => ys¹⁴}
//│ def mappend_lh_₄(xs¹³, ys¹³) = case xs¹³ of {
//│ 	LH_C h³³ t³³ => [LH_C h³³ mappend_lh_₄^1814(t³³, ys¹³)]
//│ 	| LH_N  => ys¹³}
//│ def mappend_lh_₅(xs¹², ys¹²) = case xs¹² of {
//│ 	LH_C h³² t³² => [LH_C h³² mappend_lh_₅^1802(t³², ys¹²)]
//│ 	| LH_N  => ys¹²}
//│ def mappend_lh_₆(xs¹¹, ys¹¹) = case xs¹¹ of {
//│ 	LH_C h³¹ t³¹ => [LH_C h³¹ mappend_lh_₆^1790(t³¹, ys¹¹)]
//│ 	| LH_N  => ys¹¹}
//│ def mappend_lh_₇(xs¹⁰, ys¹⁰) = case xs¹⁰ of {
//│ 	LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₇^1778(t³⁰, ys¹⁰)]
//│ 	| LH_N  => ys¹⁰}
//│ def mappend_lh_₈(xs⁹, ys⁹) = case xs⁹ of {
//│ 	LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₈^1745(t²⁹, ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_lh_₉(xs⁸, ys⁸) = case xs⁸ of {
//│ 	LH_C h²⁸ t²⁸ => [LH_C h²⁸ mappend_lh_₉^1733(t²⁸, ys⁸)]
//│ 	| LH_N  => ys⁸}
//│ def maxw_lh_₁ = 70
//│ def maxw_lh_₂ = 70
//│ def maxw_lh_₃ = 70
//│ def min_lh_₁(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ def min_lh_₂(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ > _lh_min_arg2⁰) then _lh_min_arg2⁰ else _lh_min_arg1⁰
//│ def nil'_lh_₁ = [LH_P2 [LH_N] [LH_N]]
//│ def null'_lh_₁(_lh_null'_arg1²) = case _lh_null'_arg1² of {
//│ 	LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {
//│ 		LH_N  => case _lh_null'_LH_P2_1² of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₂(_lh_null'_arg1¹) = case _lh_null'_arg1¹ of {
//│ 	LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1¹ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₃(_lh_null'_arg1⁰) = case _lh_null'_arg1⁰ of {
//│ 	LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1⁰ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null_lh_₁(_lh_null_arg1⁴) = case _lh_null_arg1⁴ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁴ _lh_null_LH_C_1⁴ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₂(_lh_null_arg1³) = case _lh_null_arg1³ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₃(_lh_null_arg1²) = case _lh_null_arg1² of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0² _lh_null_LH_C_1² => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₄(_lh_null_arg1¹) = case _lh_null_arg1¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₅(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def optw_lh_₁ = 63
//│ def optw_lh_₂ = 63
//│ def optw_lh_₃ = 63
//│ def par3_lh_₁(_lh_par3_arg1⁰) = 
//│ 	let zs⁰ = scan1_lh_₁^1655(stepr_lh_₁^1656, startr_lh_₁^1658, map_lh_₄^1660(length_lh_₁^1661, _lh_par3_arg1⁰))
//│ 	in tile_lh_₁^1666(_lh_par3_arg1⁰, [LH_P2 map_lh_₅^1669((fun _lh_funcomp_x¹ -> (fun _lh_funcomp_x² -> len_tl_lh_₁^1670(last'_lh_₁^1671(_lh_funcomp_x²)))(fst3_lh_₁^1676(_lh_funcomp_x¹))), zs⁰) thd3_lh_₁^1684(head_lh_₁^1685(zs⁰))])
//│ def paras_lh_₁(_lh_paras_arg1⁰) = (fun _lh_funcomp_x⁰ -> filter_lh_₁^1483((fun x² -> polyNeq⁰([LH_N], x²)), format_lh_₁^1491([LH_N], _lh_funcomp_x⁰)))(_lh_paras_arg1⁰)
//│ def parse_lh_₁(_lh_parse_arg1⁰) = (fun _lh_funcomp_x³ -> (fun _lh_funcomp_x⁴ -> paras_lh_₁^1693(map_lh_₃^1694(words_lh_₁^1695, _lh_funcomp_x⁴)))(lines_lh_₁^1701(_lh_funcomp_x³)))(_lh_parse_arg1⁰)
//│ def reverse_helper_lh_₁(ls⁰, a⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => reverse_helper_lh_₁^2(t⁰, [LH_C h⁰ a⁰])
//│ 	| LH_N  => a⁰}
//│ def reverse_lh_₁(ls³) = reverse_helper_lh_₁^73(ls³, [LH_N])
//│ def scan1_lh_₁(_lh_scan1_arg1⁰, _lh_scan1_arg2⁰) = fold1_lh_₁^1461((fun a² -> (fun s⁰ -> [LH_C _lh_scan1_arg1⁰(a², head_lh_₂^1465(s⁰)) s⁰])), (fun a³ -> [LH_C _lh_scan1_arg2⁰(a³) [LH_N]]))
//│ def single'_lh_₁(_lh_single'_arg1¹) = case _lh_single'_arg1¹ of {
//│ 	LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅^483(_lh_single'_LH_P2_0¹) && single_lh_₁^487(_lh_single'_LH_P2_1¹)) || (single_lh_₁^493(_lh_single'_LH_P2_0¹) && null_lh_₅^497(_lh_single'_LH_P2_1¹)))
//│ 	| _  => error⁰}
//│ def single'_lh_₂(_lh_single'_arg1⁰) = case _lh_single'_arg1⁰ of {
//│ 	LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₅^393(_lh_single'_LH_P2_0⁰) && single_lh_₁^397(_lh_single'_LH_P2_1⁰)) || (single_lh_₁^403(_lh_single'_LH_P2_0⁰) && null_lh_₅^407(_lh_single'_LH_P2_1⁰)))
//│ 	| _  => error⁰}
//│ def single_lh_₁(_lh_single_arg1⁰) = case _lh_single_arg1⁰ of {
//│ 	LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def snd3_lh_₁(_lh_snd3_arg1⁰) = case _lh_snd3_arg1⁰ of {
//│ 	LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰
//│ 	| _  => error⁰}
//│ def splitAt_lh_₁(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹) = [LH_P2 take_lh_₁^207(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹) drop_lh_₁^212(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹)]
//│ def splitAt_lh_₂(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) = [LH_P2 take_lh_₁^41(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁^46(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]
//│ def startr_lh_₁(_lh_startr_arg1⁰) = if (_lh_startr_arg1⁰ <= maxw_lh_₁^1383) then [LH_P3 cons'_lh_₁^1385([LH_P3 0 0 0], nil'_lh_₁^1391) _lh_startr_arg1⁰ 1] else error⁰([LH_C 's' [LH_C 't' [LH_C 'a' [LH_C 'r' [LH_C 't' [LH_C 'r' [LH_C ' ' [LH_C 'p' [LH_C 'a' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]]]]]]])
//│ def stepr_lh_₁(_lh_stepr_arg1⁰, _lh_stepr_arg2⁰) = case _lh_stepr_arg2⁰ of {
//│ 	LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => 
//│ 		let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ 		in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ 		in let single⁰ = (fun p⁰ -> (len_tl_lh_₂^1067(p⁰) == 0))
//│ 		in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh_₁^1082(p¹)) - 1))
//│ 		in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh_₃^1096(p²) + 
//│ 			let a¹ = (optw_lh_₃^1101 - width_hd⁰(p²))
//│ 			in (a¹ * a¹)))
//│ 		in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh_₂^1124(p³)) - 1))
//│ 		in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂^1142(p⁴) + 
//│ 			let x¹ = (optw_lh_₁^1147 - old_width_hd⁰(p⁴))
//│ 			in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰])
//│ 		in let trim⁰ = (fun ps_pq⁰ -> if null'_lh_₂^1164(ps_pq⁰) then ps_pq⁰ else if single'_lh_₂^1168(ps_pq⁰) then ps_pq⁰ else 
//│ 			let ps_p⁰ = init'_lh_₂^1172(ps_pq⁰)
//│ 			in let q⁰ = last'_lh_₃^1175(ps_pq⁰)
//│ 			in let p⁵ = last'_lh_₄^1178(ps_p⁰)
//│ 			in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ 		in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh_₁^1201(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh_₂^1207(ps_p¹)) > maxw_lh_₃^1212) then drop_nofit⁰(init'_lh_₁^1215(ps_p¹)) else ps_p¹)
//│ 		in let bf⁰ = (fun p⁶ -> (fun q¹ -> 
//│ 			let wqh⁰ = width_hd⁰(q¹)
//│ 			in let rqh⁰ = ((maxw_lh_₂^1228 - wqh⁰) + 1)
//│ 			in if (single⁰(q¹) && (cost_tl_lh_₁^1241(p⁶) == 0)) then min_lh_₂^1248((optw_lh_₂^1250 - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh_₁^1263(ceildiv_lh_₁^1264((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ 		in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh_₁^1297(qr_rs⁰) || null'_lh_₃^1301(qr_rs⁰)) then cons'_lh_₃^1305(p⁷, qr_rs⁰) else 
//│ 			let q² = head'_lh_₂^1310(qr_rs⁰)
//│ 			in let r_rs⁰ = tail'_lh_₁^1313(qr_rs⁰)
//│ 			in let r⁰ = head'_lh_₁^1316(r_rs⁰)
//│ 			in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh_₂^1337(p⁷, qr_rs⁰)))
//│ 		in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₅^1353(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]
//│ 	| _  => error⁰}
//│ def tail'_lh_₁(_lh_tail'_arg1⁰) = case _lh_tail'_arg1⁰ of {
//│ 	LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅^599(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁^605(_lh_tail'_LH_P2_0⁰) then 
//│ 		let _lh_matchIdent² = splitAt_lh_₂^608(div⁰(length_lh_₁^610(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ 		in case _lh_matchIdent² of {
//│ 			LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁^620(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]
//│ 			| _  => error⁰} else [LH_P2 tail_lh_₂^628(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]
//│ 	| _  => error⁰}
//│ def tail_lh_₁(ls⁶) = case ls⁶ of {
//│ 	LH_C h⁵ t⁵ => t⁵
//│ 	| LH_N  => error⁰}
//│ def tail_lh_₂(ls²) = case ls² of {
//│ 	LH_C h² t² => t²
//│ 	| LH_N  => error⁰}
//│ def take_lh_₁(n⁰, ls¹) = if (n⁰ > 0) then case ls¹ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ take_lh_₁^20((n⁰ - 1), t¹)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPara_nofib_lh_₁(_lh_testPara_nofib_arg1⁰) = 
//│ 	let test⁰ = mappend_lh_₅^1860(mappend_lh_₆^1861(mappend_lh_₇^1862(mappend_lh_₃^1863(mappend_lh_₂^1864(mappend_lh_₈^1865(mappend_lh_₉^1866(mappend_lh_₁^1867(mappend_lh_₄^1868(primId⁰([LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'u' [LH_C 'c' [LH_C 't' [LH_C 'i' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C 'm' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'o' [LH_C 'n' [LH_C 'p' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]), primId⁰([LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C 's' [LH_C '.' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ',' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'h' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'y' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C ' ' [LH_C 'w' [LH_C 'e' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_C 'k' [LH_C 'n' [LH_C 'o' [LH_C 'w' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 's' [LH_C 'i' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C '.' [LH_C ' ' [LH_C 'H' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'o' [LH_C 'm' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'm' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 't' [LH_C 'a' [LH_C 'i' [LH_C 'l' [LH_C 's' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'g' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'b' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C ' ' [LH_C 'T' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'i' [LH_C 'c' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'l' [LH_C 'e' [LH_C 's' [LH_C 's' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C '|' [LH_C ' ' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]))
//│ 	in if null_lh_₁^3171(test⁰) then [LH_N] else fmt_lh_₁^3175(test⁰)
//│ def thd3_lh_₁(_lh_thd3_arg1¹) = case _lh_thd3_arg1¹ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0¹ _lh_thd3_LH_P3_1¹ _lh_thd3_LH_P3_2¹ => _lh_thd3_LH_P3_2¹
//│ 	| _  => error⁰}
//│ def thd3_lh_₂(_lh_thd3_arg1⁰) = case _lh_thd3_arg1⁰ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰
//│ 	| _  => error⁰}
//│ def tile_lh_₁(_lh_tile_arg1⁰, _lh_tile_arg2⁰) = case _lh_tile_arg2⁰ of {
//│ 	LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => 
//│ 			let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ 			in let _lh_matchIdent⁵ = splitAt_lh_₁^1016(l⁰, _lh_tile_arg1⁰)
//│ 			in case _lh_matchIdent⁵ of {
//│ 				LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁^1023(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁^1026(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def unformat_lh_₁(_lh_unformat_arg1⁰) = fold1_lh_₂^894((fun xs⁵ -> (fun ys⁵ -> mappend_lh_₁₆^895(mappend_lh_₁₅^896(xs⁵, [LH_C _lh_unformat_arg1⁰ [LH_N]]), ys⁵))), (fun x⁰ -> x⁰))
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = concat_lh_₂^1615(map_lh_₆^1616((fun l¹ -> mappend_lh_₁₁^1617(l¹, [LH_C '|' [LH_N]])), _lh_unlines_arg1⁰))
//│ def unparas_lh_₁(_lh_unparas_arg1⁰) = unformat_lh_₁^1609([LH_N], _lh_unparas_arg1⁰)
//│ def unparse_lh_₁(_lh_unparse_arg1⁰) = (fun _lh_funcomp_x⁵ -> (fun _lh_funcomp_x⁶ -> unlines_lh_₁^1709(map_lh_₂^1710(unwords_lh_₁^1711, _lh_funcomp_x⁶)))(unparas_lh_₁^1717(_lh_funcomp_x⁵)))(_lh_unparse_arg1⁰)
//│ def unwords_lh_₁(_lh_unwords_arg1⁰) = case _lh_unwords_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => 
//│ 		let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {
//│ 			LH_N  => [LH_N]
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₁₂^1587(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]
//│ 			| _  => error⁰})
//│ 		in mappend_lh_₁₃^1598(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def width_tl_lh_₁(_lh_width_tl_arg1¹) = fst3_lh_₁^505(_lh_width_tl_arg1¹)
//│ def width_tl_lh_₂(_lh_width_tl_arg1⁰) = fst3_lh_₁^332(_lh_width_tl_arg1⁰)
//│ def words_lh_₁(_lh_words_arg1⁰) = 
//│ 	let _lh_matchIdent⁶ = dropWhile_lh_₁^1501(isSpace_lh_₁^1502, _lh_words_arg1⁰)
//│ 	in case _lh_matchIdent⁶ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => 
//│ 			let _lh_matchIdent⁷ = break_lh_₂^1508(isSpace_lh_₂^1509, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ 			in case _lh_matchIdent⁷ of {
//│ 				LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁^1517(_lh_words_LH_P2_1⁰)]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec mappend_lh__d3 xs_1_4 ys_1_4 =
//│ 		  (match xs_1_4 with
//│ 		    | `LH_C(h_3_4, t_3_4) -> 
//│ 		      (`LH_C(h_3_4, ((mappend_lh__d3 t_3_4) ys_1_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_4);;
//│ 		let rec mappend_lh__d1 xs_1_6 ys_1_6 =
//│ 		  (match xs_1_6 with
//│ 		    | `LH_C(h_3_6, t_3_6) -> 
//│ 		      (`LH_C(h_3_6, ((mappend_lh__d1 t_3_6) ys_1_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_6);;
//│ 		let rec mappend_lh__d8 xs_9 ys_9 =
//│ 		  (match xs_9 with
//│ 		    | `LH_C(h_2_9, t_2_9) -> 
//│ 		      (`LH_C(h_2_9, ((mappend_lh__d8 t_2_9) ys_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_9);;
//│ 		let rec null_lh__d3 _lh_null_arg1_2 =
//│ 		  (match _lh_null_arg1_2 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_2, _lh_null_LH_C_1_2) -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec cons'_lh__d1 _lh_cons'_arg1_2 _lh_cons'_arg2_2 =
//│ 		  (match _lh_cons'_arg2_2 with
//│ 		    | `LH_P2(_lh_cons'_LH_P2_0_2, _lh_cons'_LH_P2_1_2) -> 
//│ 		      (if (not (null_lh__d3 _lh_cons'_LH_P2_1_2)) then
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_2, _lh_cons'_LH_P2_0_2)), _lh_cons'_LH_P2_1_2))
//│ 		      else
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_2, (`LH_N))), _lh_cons'_LH_P2_0_2)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec maxw_lh__d1 =
//│ 		  70;;
//│ 		let rec nil'_lh__d1 =
//│ 		  (`LH_P2((`LH_N), (`LH_N)));;
//│ 		let rec startr_lh__d1 _lh_startr_arg1_0 =
//│ 		  (if (_lh_startr_arg1_0 <= maxw_lh__d1) then
//│ 		    (`LH_P3(((cons'_lh__d1 (`LH_P3(0, 0, 0))) nil'_lh__d1), _lh_startr_arg1_0, 1))
//│ 		  else
//│ 		    ((failwith "error") (`LH_C('s', (`LH_C('t', (`LH_C('a', (`LH_C('r', (`LH_C('t', (`LH_C('r', (`LH_C(' ', (`LH_C('p', (`LH_C('a', (`LH_C('r', (`LH_C('a', (`LH_C('m', (`LH_C(' ', (`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_N)))))))))))))))))))))))))))))))))))))));;
//│ 		let rec fst3_lh__d1 _lh_fst3_arg1_0 =
//│ 		  (match _lh_fst3_arg1_0 with
//│ 		    | `LH_P3(_lh_fst3_LH_P3_0_0, _lh_fst3_LH_P3_1_0, _lh_fst3_LH_P3_2_0) -> 
//│ 		      _lh_fst3_LH_P3_0_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec thd3_lh__d1 _lh_thd3_arg1_1 =
//│ 		  (match _lh_thd3_arg1_1 with
//│ 		    | `LH_P3(_lh_thd3_LH_P3_0_1, _lh_thd3_LH_P3_1_1, _lh_thd3_LH_P3_2_1) -> 
//│ 		      _lh_thd3_LH_P3_2_1
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec head_lh__d7 ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      h_3
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec null_lh__d5 _lh_null_arg1_0 =
//│ 		  (match _lh_null_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_0, _lh_null_LH_C_1_0) -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec head'_lh__d1 _lh_head'_arg1_1 =
//│ 		  (match _lh_head'_arg1_1 with
//│ 		    | `LH_P2(_lh_head'_LH_P2_0_1, _lh_head'_LH_P2_1_1) -> 
//│ 		      (if (not (null_lh__d5 _lh_head'_LH_P2_0_1)) then
//│ 		        (head_lh__d7 _lh_head'_LH_P2_0_1)
//│ 		      else
//│ 		        (head_lh__d7 _lh_head'_LH_P2_1_1))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec cons'_lh__d2 _lh_cons'_arg1_1 _lh_cons'_arg2_1 =
//│ 		  (match _lh_cons'_arg2_1 with
//│ 		    | `LH_P2(_lh_cons'_LH_P2_0_1, _lh_cons'_LH_P2_1_1) -> 
//│ 		      (if (not (null_lh__d5 _lh_cons'_LH_P2_1_1)) then
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_1, _lh_cons'_LH_P2_0_1)), _lh_cons'_LH_P2_1_1))
//│ 		      else
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_1, (`LH_N))), _lh_cons'_LH_P2_0_1)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec snd3_lh__d1 _lh_snd3_arg1_0 =
//│ 		  (match _lh_snd3_arg1_0 with
//│ 		    | `LH_P3(_lh_snd3_LH_P3_0_0, _lh_snd3_LH_P3_1_0, _lh_snd3_LH_P3_2_0) -> 
//│ 		      _lh_snd3_LH_P3_1_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec cost_tl_lh__d3 _lh_cost_tl_arg1_0 =
//│ 		  (snd3_lh__d1 _lh_cost_tl_arg1_0);;
//│ 		let rec last'_lh__d3 _lh_last'_arg1_2 =
//│ 		  (match _lh_last'_arg1_2 with
//│ 		    | `LH_P2(_lh_last'_LH_P2_0_2, _lh_last'_LH_P2_1_2) -> 
//│ 		      (if (not (null_lh__d5 _lh_last'_LH_P2_1_2)) then
//│ 		        (head_lh__d7 _lh_last'_LH_P2_1_2)
//│ 		      else
//│ 		        (head_lh__d7 _lh_last'_LH_P2_0_2))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec width_tl_lh__d2 _lh_width_tl_arg1_0 =
//│ 		  (fst3_lh__d1 _lh_width_tl_arg1_0);;
//│ 		let rec maxw_lh__d3 =
//│ 		  70;;
//│ 		let rec null'_lh__d1 _lh_null'_arg1_2 =
//│ 		  (match _lh_null'_arg1_2 with
//│ 		    | `LH_P2(_lh_null'_LH_P2_0_2, _lh_null'_LH_P2_1_2) -> 
//│ 		      (match _lh_null'_LH_P2_0_2 with
//│ 		        | `LH_N -> 
//│ 		          (match _lh_null'_LH_P2_1_2 with
//│ 		            | `LH_N -> 
//│ 		              true
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec null'_lh__d3 _lh_null'_arg1_0 =
//│ 		  (match _lh_null'_arg1_0 with
//│ 		    | `LH_P2(_lh_null'_LH_P2_0_0, _lh_null'_LH_P2_1_0) -> 
//│ 		      (match _lh_null'_LH_P2_0_0 with
//│ 		        | `LH_N -> 
//│ 		          (match _lh_null'_LH_P2_1_0 with
//│ 		            | `LH_N -> 
//│ 		              true
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec single_lh__d1 _lh_single_arg1_0 =
//│ 		  (match _lh_single_arg1_0 with
//│ 		    | `LH_C(_lh_single_LH_C_0_0, _lh_single_LH_C_1_0) -> 
//│ 		      (match _lh_single_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec tail_lh__d2 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      t_2
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec length_lh__d1 ls_1_3 =
//│ 		  (match ls_1_3 with
//│ 		    | `LH_C(h_2_0, t_2_0) -> 
//│ 		      (1 + (length_lh__d1 t_2_0))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec reverse_helper_lh__d1 ls_0 a_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      ((reverse_helper_lh__d1 t_0) (`LH_C(h_0, a_0)))
//│ 		    | `LH_N -> 
//│ 		      a_0);;
//│ 		let rec reverse_lh__d1 ls_3 =
//│ 		  ((reverse_helper_lh__d1 ls_3) (`LH_N));;
//│ 		let rec drop_lh__d1 _lh_drop_arg1_0 _lh_drop_arg2_0 =
//│ 		  (match _lh_drop_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0) -> 
//│ 		      (if (_lh_drop_arg1_0 <= 0) then
//│ 		        (`LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0))
//│ 		      else
//│ 		        ((drop_lh__d1 (_lh_drop_arg1_0 - 1)) _lh_drop_LH_C_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec take_lh__d1 n_0 ls_1 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match ls_1 with
//│ 		      | `LH_C(h_1, t_1) -> 
//│ 		        (`LH_C(h_1, ((take_lh__d1 (n_0 - 1)) t_1)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec splitAt_lh__d2 _lh_splitAt_arg1_0 _lh_splitAt_arg2_0 =
//│ 		  (`LH_P2(((take_lh__d1 _lh_splitAt_arg1_0) _lh_splitAt_arg2_0), ((drop_lh__d1 _lh_splitAt_arg1_0) _lh_splitAt_arg2_0)));;
//│ 		let rec init'_lh__d1 _lh_init'_arg1_1 =
//│ 		  (match _lh_init'_arg1_1 with
//│ 		    | `LH_P2(_lh_init'_LH_P2_0_2, _lh_init'_LH_P2_1_2) -> 
//│ 		      (if (null_lh__d5 _lh_init'_LH_P2_1_2) then
//│ 		        (`LH_P2((`LH_N), (`LH_N)))
//│ 		      else
//│ 		        (if (single_lh__d1 _lh_init'_LH_P2_1_2) then
//│ 		          (let rec _lh_matchIdent_1 = ((splitAt_lh__d2 ((length_lh__d1 _lh_init'_LH_P2_0_2) / 2)) _lh_init'_LH_P2_0_2) in
//│ 		            (match _lh_matchIdent_1 with
//│ 		              | `LH_P2(_lh_init'_LH_P2_0_3, _lh_init'_LH_P2_1_3) -> 
//│ 		                (`LH_P2(_lh_init'_LH_P2_0_3, (reverse_lh__d1 _lh_init'_LH_P2_1_3)))
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        else
//│ 		          (`LH_P2(_lh_init'_LH_P2_0_2, (tail_lh__d2 _lh_init'_LH_P2_1_2)))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec min_lh__d2 _lh_min_arg1_0 _lh_min_arg2_0 =
//│ 		  (if (_lh_min_arg1_0 > _lh_min_arg2_0) then
//│ 		    _lh_min_arg2_0
//│ 		  else
//│ 		    _lh_min_arg1_0);;
//│ 		let rec tail'_lh__d1 _lh_tail'_arg1_0 =
//│ 		  (match _lh_tail'_arg1_0 with
//│ 		    | `LH_P2(_lh_tail'_LH_P2_0_0, _lh_tail'_LH_P2_1_0) -> 
//│ 		      (if (null_lh__d5 _lh_tail'_LH_P2_0_0) then
//│ 		        (`LH_P2((`LH_N), (`LH_N)))
//│ 		      else
//│ 		        (if (single_lh__d1 _lh_tail'_LH_P2_0_0) then
//│ 		          (let rec _lh_matchIdent_2 = ((splitAt_lh__d2 ((length_lh__d1 _lh_tail'_LH_P2_1_0) / 2)) _lh_tail'_LH_P2_1_0) in
//│ 		            (match _lh_matchIdent_2 with
//│ 		              | `LH_P2(_lh_tail'_LH_P2_0_1, _lh_tail'_LH_P2_1_1) -> 
//│ 		                (`LH_P2((reverse_lh__d1 _lh_tail'_LH_P2_1_1), _lh_tail'_LH_P2_0_1))
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        else
//│ 		          (`LH_P2((tail_lh__d2 _lh_tail'_LH_P2_0_0), _lh_tail'_LH_P2_1_0))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec last'_lh__d5 _lh_last'_arg1_0 =
//│ 		  (match _lh_last'_arg1_0 with
//│ 		    | `LH_P2(_lh_last'_LH_P2_0_0, _lh_last'_LH_P2_1_0) -> 
//│ 		      (if (not (null_lh__d5 _lh_last'_LH_P2_1_0)) then
//│ 		        (head_lh__d7 _lh_last'_LH_P2_1_0)
//│ 		      else
//│ 		        (head_lh__d7 _lh_last'_LH_P2_0_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec head'_lh__d2 _lh_head'_arg1_0 =
//│ 		  (match _lh_head'_arg1_0 with
//│ 		    | `LH_P2(_lh_head'_LH_P2_0_0, _lh_head'_LH_P2_1_0) -> 
//│ 		      (if (not (null_lh__d5 _lh_head'_LH_P2_0_0)) then
//│ 		        (head_lh__d7 _lh_head'_LH_P2_0_0)
//│ 		      else
//│ 		        (head_lh__d7 _lh_head'_LH_P2_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec optw_lh__d3 =
//│ 		  63;;
//│ 		let rec last'_lh__d4 _lh_last'_arg1_1 =
//│ 		  (match _lh_last'_arg1_1 with
//│ 		    | `LH_P2(_lh_last'_LH_P2_0_1, _lh_last'_LH_P2_1_1) -> 
//│ 		      (if (not (null_lh__d5 _lh_last'_LH_P2_1_1)) then
//│ 		        (head_lh__d7 _lh_last'_LH_P2_1_1)
//│ 		      else
//│ 		        (head_lh__d7 _lh_last'_LH_P2_0_1))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec null'_lh__d2 _lh_null'_arg1_1 =
//│ 		  (match _lh_null'_arg1_1 with
//│ 		    | `LH_P2(_lh_null'_LH_P2_0_1, _lh_null'_LH_P2_1_1) -> 
//│ 		      (match _lh_null'_LH_P2_0_1 with
//│ 		        | `LH_N -> 
//│ 		          (match _lh_null'_LH_P2_1_1 with
//│ 		            | `LH_N -> 
//│ 		              true
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec single'_lh__d1 _lh_single'_arg1_1 =
//│ 		  (match _lh_single'_arg1_1 with
//│ 		    | `LH_P2(_lh_single'_LH_P2_0_1, _lh_single'_LH_P2_1_1) -> 
//│ 		      (((null_lh__d5 _lh_single'_LH_P2_0_1) && (single_lh__d1 _lh_single'_LH_P2_1_1)) || ((single_lh__d1 _lh_single'_LH_P2_0_1) && (null_lh__d5 _lh_single'_LH_P2_1_1)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec width_tl_lh__d1 _lh_width_tl_arg1_1 =
//│ 		  (fst3_lh__d1 _lh_width_tl_arg1_1);;
//│ 		let rec optw_lh__d2 =
//│ 		  63;;
//│ 		let rec cost_tl_lh__d2 _lh_cost_tl_arg1_1 =
//│ 		  (snd3_lh__d1 _lh_cost_tl_arg1_1);;
//│ 		let rec ceildiv_lh__d1 _lh_ceildiv_arg1_0 _lh_ceildiv_arg2_0 =
//│ 		  (((_lh_ceildiv_arg1_0 + _lh_ceildiv_arg2_0) - 1) / _lh_ceildiv_arg2_0);;
//│ 		let rec single'_lh__d2 _lh_single'_arg1_0 =
//│ 		  (match _lh_single'_arg1_0 with
//│ 		    | `LH_P2(_lh_single'_LH_P2_0_0, _lh_single'_LH_P2_1_0) -> 
//│ 		      (((null_lh__d5 _lh_single'_LH_P2_0_0) && (single_lh__d1 _lh_single'_LH_P2_1_0)) || ((single_lh__d1 _lh_single'_LH_P2_0_0) && (null_lh__d5 _lh_single'_LH_P2_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec cons'_lh__d3 _lh_cons'_arg1_0 _lh_cons'_arg2_0 =
//│ 		  (match _lh_cons'_arg2_0 with
//│ 		    | `LH_P2(_lh_cons'_LH_P2_0_0, _lh_cons'_LH_P2_1_0) -> 
//│ 		      (if (not (null_lh__d5 _lh_cons'_LH_P2_1_0)) then
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_0, _lh_cons'_LH_P2_0_0)), _lh_cons'_LH_P2_1_0))
//│ 		      else
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_0, (`LH_N))), _lh_cons'_LH_P2_0_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec init'_lh__d2 _lh_init'_arg1_0 =
//│ 		  (match _lh_init'_arg1_0 with
//│ 		    | `LH_P2(_lh_init'_LH_P2_0_0, _lh_init'_LH_P2_1_0) -> 
//│ 		      (if (null_lh__d5 _lh_init'_LH_P2_1_0) then
//│ 		        (`LH_P2((`LH_N), (`LH_N)))
//│ 		      else
//│ 		        (if (single_lh__d1 _lh_init'_LH_P2_1_0) then
//│ 		          (let rec _lh_matchIdent_0 = ((splitAt_lh__d2 ((length_lh__d1 _lh_init'_LH_P2_0_0) / 2)) _lh_init'_LH_P2_0_0) in
//│ 		            (match _lh_matchIdent_0 with
//│ 		              | `LH_P2(_lh_init'_LH_P2_0_1, _lh_init'_LH_P2_1_1) -> 
//│ 		                (`LH_P2(_lh_init'_LH_P2_0_1, (reverse_lh__d1 _lh_init'_LH_P2_1_1)))
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        else
//│ 		          (`LH_P2(_lh_init'_LH_P2_0_0, (tail_lh__d2 _lh_init'_LH_P2_1_0)))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec maxw_lh__d2 =
//│ 		  70;;
//│ 		let rec cost_tl_lh__d1 _lh_cost_tl_arg1_2 =
//│ 		  (snd3_lh__d1 _lh_cost_tl_arg1_2);;
//│ 		let rec optw_lh__d1 =
//│ 		  63;;
//│ 		let rec min_lh__d1 _lh_min_arg1_1 _lh_min_arg2_1 =
//│ 		  (if (_lh_min_arg1_1 > _lh_min_arg2_1) then
//│ 		    _lh_min_arg2_1
//│ 		  else
//│ 		    _lh_min_arg1_1);;
//│ 		let rec null_lh__d4 _lh_null_arg1_1 =
//│ 		  (match _lh_null_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_1, _lh_null_LH_C_1_1) -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec head_lh__d6 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      h_4
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec last'_lh__d2 _lh_last'_arg1_3 =
//│ 		  (match _lh_last'_arg1_3 with
//│ 		    | `LH_P2(_lh_last'_LH_P2_0_3, _lh_last'_LH_P2_1_3) -> 
//│ 		      (if (not (null_lh__d4 _lh_last'_LH_P2_1_3)) then
//│ 		        (head_lh__d6 _lh_last'_LH_P2_1_3)
//│ 		      else
//│ 		        (head_lh__d7 _lh_last'_LH_P2_0_3))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec thd3_lh__d2 _lh_thd3_arg1_0 =
//│ 		  (match _lh_thd3_arg1_0 with
//│ 		    | `LH_P3(_lh_thd3_LH_P3_0_0, _lh_thd3_LH_P3_1_0, _lh_thd3_LH_P3_2_0) -> 
//│ 		      _lh_thd3_LH_P3_2_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec len_tl_lh__d2 _lh_len_tl_arg1_0 =
//│ 		  (thd3_lh__d2 _lh_len_tl_arg1_0);;
//│ 		let rec stepr_lh__d1 _lh_stepr_arg1_0 _lh_stepr_arg2_0 =
//│ 		  (match _lh_stepr_arg2_0 with
//│ 		    | `LH_P3(_lh_stepr_LH_P3_0_0, _lh_stepr_LH_P3_1_0, _lh_stepr_LH_P3_2_0) -> 
//│ 		      (let rec tot_width_0 = ((_lh_stepr_arg1_0 + 1) + _lh_stepr_LH_P3_1_0) in
//│ 		        (let rec tot_len_0 = (1 + _lh_stepr_LH_P3_2_0) in
//│ 		          (let rec single_0 = (fun p_0 -> 
//│ 		            ((len_tl_lh__d2 p_0) = 0)) in
//│ 		            (let rec width_hd_0 = (fun p_1 -> 
//│ 		              (if (single_0 p_1) then
//│ 		                tot_width_0
//│ 		              else
//│ 		                ((tot_width_0 - (width_tl_lh__d1 p_1)) - 1))) in
//│ 		              (let rec cost_0 = (fun p_2 -> 
//│ 		                (if (single_0 p_2) then
//│ 		                  0
//│ 		                else
//│ 		                  ((cost_tl_lh__d3 p_2) + (let rec a_1 = (optw_lh__d3 - (width_hd_0 p_2)) in
//│ 		                    (a_1 * a_1))))) in
//│ 		                (let rec old_width_hd_0 = (fun p_3 -> 
//│ 		                  (if (single_0 p_3) then
//│ 		                    _lh_stepr_LH_P3_1_0
//│ 		                  else
//│ 		                    ((_lh_stepr_LH_P3_1_0 - (width_tl_lh__d2 p_3)) - 1))) in
//│ 		                  (let rec new_0 = (fun p_4 -> 
//│ 		                    (if (single_0 p_4) then
//│ 		                      (`LH_P3(_lh_stepr_LH_P3_1_0, 0, _lh_stepr_LH_P3_2_0))
//│ 		                    else
//│ 		                      (`LH_P3(_lh_stepr_LH_P3_1_0, ((cost_tl_lh__d2 p_4) + (let rec x_1 = (optw_lh__d1 - (old_width_hd_0 p_4)) in
//│ 		                        (x_1 * x_1))), _lh_stepr_LH_P3_2_0)))) in
//│ 		                    (let rec trim_0 = (fun ps_pq_0 -> 
//│ 		                      (if (null'_lh__d2 ps_pq_0) then
//│ 		                        ps_pq_0
//│ 		                      else
//│ 		                        (if (single'_lh__d2 ps_pq_0) then
//│ 		                          ps_pq_0
//│ 		                        else
//│ 		                          (let rec ps_p_0 = (init'_lh__d2 ps_pq_0) in
//│ 		                            (let rec q_0 = (last'_lh__d3 ps_pq_0) in
//│ 		                              (let rec p_5 = (last'_lh__d4 ps_p_0) in
//│ 		                                (if ((cost_0 p_5) <= (cost_0 q_0)) then
//│ 		                                  (trim_0 ps_p_0)
//│ 		                                else
//│ 		                                  ps_pq_0))))))) in
//│ 		                      (let rec drop_nofit_0 = (fun ps_p_1 -> 
//│ 		                        (if (null'_lh__d1 ps_p_1) then
//│ 		                          ps_p_1
//│ 		                        else
//│ 		                          (if ((width_hd_0 (last'_lh__d2 ps_p_1)) > maxw_lh__d3) then
//│ 		                            (drop_nofit_0 (init'_lh__d1 ps_p_1))
//│ 		                          else
//│ 		                            ps_p_1))) in
//│ 		                        (let rec bf_0 = (fun p_6 q_1 -> 
//│ 		                          (let rec wqh_0 = (width_hd_0 q_1) in
//│ 		                            (let rec rqh_0 = ((maxw_lh__d2 - wqh_0) + 1) in
//│ 		                              (if ((single_0 q_1) && ((cost_tl_lh__d1 p_6) = 0)) then
//│ 		                                ((min_lh__d2 (optw_lh__d2 - (width_hd_0 p_6))) rqh_0)
//│ 		                              else
//│ 		                                (if (single_0 q_1) then
//│ 		                                  rqh_0
//│ 		                                else
//│ 		                                  ((min_lh__d1 ((ceildiv_lh__d1 ((cost_0 p_6) - (cost_0 q_1))) (2 * (wqh_0 - (width_hd_0 p_6))))) rqh_0)))))) in
//│ 		                          (let rec myAdd_0 = (fun p_7 qr_rs_0 -> 
//│ 		                            (if ((single'_lh__d1 qr_rs_0) || (null'_lh__d3 qr_rs_0)) then
//│ 		                              ((cons'_lh__d3 p_7) qr_rs_0)
//│ 		                            else
//│ 		                              (let rec q_2 = (head'_lh__d2 qr_rs_0) in
//│ 		                                (let rec r_rs_0 = (tail'_lh__d1 qr_rs_0) in
//│ 		                                  (let rec r_0 = (head'_lh__d1 r_rs_0) in
//│ 		                                    (if (((bf_0 p_7) q_2) <= ((bf_0 q_2) r_0)) then
//│ 		                                      ((myAdd_0 p_7) r_rs_0)
//│ 		                                    else
//│ 		                                      ((cons'_lh__d2 p_7) qr_rs_0))))))) in
//│ 		                            (`LH_P3((trim_0 (drop_nofit_0 ((myAdd_0 (new_0 (last'_lh__d5 _lh_stepr_LH_P3_0_0))) _lh_stepr_LH_P3_0_0))), tot_width_0, tot_len_0)))))))))))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec fold1_lh__d1 _lh_fold1_arg1_2 _lh_fold1_arg2_2 _lh_fold1_arg3_2 =
//│ 		  (match _lh_fold1_arg3_2 with
//│ 		    | `LH_C(_lh_fold1_LH_C_0_2, _lh_fold1_LH_C_1_2) -> 
//│ 		      (match _lh_fold1_LH_C_1_2 with
//│ 		        | `LH_N -> 
//│ 		          (_lh_fold1_arg2_2 _lh_fold1_LH_C_0_2)
//│ 		        | _ -> 
//│ 		          ((_lh_fold1_arg1_2 _lh_fold1_LH_C_0_2) (((fold1_lh__d1 _lh_fold1_arg1_2) _lh_fold1_arg2_2) _lh_fold1_LH_C_1_2)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec head_lh__d2 ls_1_0 =
//│ 		  (match ls_1_0 with
//│ 		    | `LH_C(h_1_2, t_1_2) -> 
//│ 		      h_1_2
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec scan1_lh__d1 _lh_scan1_arg1_0 _lh_scan1_arg2_0 =
//│ 		  ((fold1_lh__d1 (fun a_2 s_0 -> 
//│ 		    (`LH_C(((_lh_scan1_arg1_0 a_2) (head_lh__d2 s_0)), s_0)))) (fun a_3 -> 
//│ 		    (`LH_C((_lh_scan1_arg2_0 a_3), (`LH_N)))));;
//│ 		let rec len_tl_lh__d1 _lh_len_tl_arg1_1 =
//│ 		  (thd3_lh__d2 _lh_len_tl_arg1_1);;
//│ 		let rec map_lh__d4 f_3 ls_1_5 =
//│ 		  (match ls_1_5 with
//│ 		    | `LH_C(h_2_2, t_2_2) -> 
//│ 		      (`LH_C((f_3 h_2_2), ((map_lh__d4 f_3) t_2_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec head_lh__d1 ls_1_6 =
//│ 		  (match ls_1_6 with
//│ 		    | `LH_C(h_2_3, t_2_3) -> 
//│ 		      h_2_3
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec head_lh__d3 ls_9 =
//│ 		  (match ls_9 with
//│ 		    | `LH_C(h_1_1, t_1_1) -> 
//│ 		      h_1_1
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec null_lh__d2 _lh_null_arg1_3 =
//│ 		  (match _lh_null_arg1_3 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_3, _lh_null_LH_C_1_3) -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec head_lh__d4 ls_8 =
//│ 		  (match ls_8 with
//│ 		    | `LH_C(h_1_0, t_1_0) -> 
//│ 		      h_1_0
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec last'_lh__d1 _lh_last'_arg1_4 =
//│ 		  (match _lh_last'_arg1_4 with
//│ 		    | `LH_P2(_lh_last'_LH_P2_0_4, _lh_last'_LH_P2_1_4) -> 
//│ 		      (if (not (null_lh__d2 _lh_last'_LH_P2_1_4)) then
//│ 		        (head_lh__d3 _lh_last'_LH_P2_1_4)
//│ 		      else
//│ 		        (head_lh__d4 _lh_last'_LH_P2_0_4))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec splitAt_lh__d1 _lh_splitAt_arg1_1 _lh_splitAt_arg2_1 =
//│ 		  (`LH_P2(((take_lh__d1 _lh_splitAt_arg1_1) _lh_splitAt_arg2_1), ((drop_lh__d1 _lh_splitAt_arg1_1) _lh_splitAt_arg2_1)));;
//│ 		let rec tile_lh__d1 _lh_tile_arg1_0 _lh_tile_arg2_0 =
//│ 		  (match _lh_tile_arg2_0 with
//│ 		    | `LH_P2(_lh_tile_LH_P2_0_0, _lh_tile_LH_P2_1_0) -> 
//│ 		      (match _lh_tile_LH_P2_0_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_N)
//│ 		        | `LH_C(_lh_tile_LH_C_0_0, _lh_tile_LH_C_1_0) -> 
//│ 		          (let rec l_0 = (_lh_tile_LH_P2_1_0 - _lh_tile_LH_C_0_0) in
//│ 		            (let rec _lh_matchIdent_5 = ((splitAt_lh__d1 l_0) _lh_tile_arg1_0) in
//│ 		              (match _lh_matchIdent_5 with
//│ 		                | `LH_P2(_lh_tile_LH_P2_0_1, _lh_tile_LH_P2_1_1) -> 
//│ 		                  (`LH_C(_lh_tile_LH_P2_0_1, ((tile_lh__d1 _lh_tile_LH_P2_1_1) (`LH_P2(((drop_lh__d1 l_0) (`LH_C(_lh_tile_LH_C_0_0, _lh_tile_LH_C_1_0))), _lh_tile_LH_C_0_0)))))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec map_lh__d5 f_2 ls_1_4 =
//│ 		  (match ls_1_4 with
//│ 		    | `LH_C(h_2_1, t_2_1) -> 
//│ 		      (`LH_C((f_2 h_2_1), ((map_lh__d5 f_2) t_2_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec par3_lh__d1 _lh_par3_arg1_0 =
//│ 		  (let rec zs_0 = (((scan1_lh__d1 stepr_lh__d1) startr_lh__d1) ((map_lh__d4 length_lh__d1) _lh_par3_arg1_0)) in
//│ 		    ((tile_lh__d1 _lh_par3_arg1_0) (`LH_P2(((map_lh__d5 (fun _lh_funcomp_x_1 -> 
//│ 		      ((fun _lh_funcomp_x_2 -> 
//│ 		        (len_tl_lh__d1 (last'_lh__d1 _lh_funcomp_x_2))) (fst3_lh__d1 _lh_funcomp_x_1)))) zs_0), (thd3_lh__d1 (head_lh__d1 zs_0))))));;
//│ 		let rec map_lh__d3 f_4 ls_1_7 =
//│ 		  (match ls_1_7 with
//│ 		    | `LH_C(h_2_4, t_2_4) -> 
//│ 		      (`LH_C((f_4 h_2_4), ((map_lh__d3 f_4) t_2_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec dropWhile_lh__d1 _lh_dropWhile_arg1_0 _lh_dropWhile_arg2_0 =
//│ 		  (match _lh_dropWhile_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_dropWhile_LH_C_0_0, _lh_dropWhile_LH_C_1_0) -> 
//│ 		      (if (_lh_dropWhile_arg1_0 _lh_dropWhile_LH_C_0_0) then
//│ 		        ((dropWhile_lh__d1 _lh_dropWhile_arg1_0) _lh_dropWhile_LH_C_1_0)
//│ 		      else
//│ 		        (`LH_C(_lh_dropWhile_LH_C_0_0, _lh_dropWhile_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec isSpace_lh__d1 _lh_isSpace_arg1_1 =
//│ 		  (_lh_isSpace_arg1_1 = ' ');;
//│ 		let rec isSpace_lh__d2 _lh_isSpace_arg1_0 =
//│ 		  (_lh_isSpace_arg1_0 = ' ');;
//│ 		let rec break_lh__d2 _lh_break_arg1_1 _lh_break_arg2_1 =
//│ 		  (match _lh_break_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2((`LH_N), (`LH_N)))
//│ 		    | `LH_C(_lh_break_LH_C_0_0, _lh_break_LH_C_1_0) -> 
//│ 		      (if (_lh_break_arg1_1 _lh_break_LH_C_0_0) then
//│ 		        (`LH_P2((`LH_N), (`LH_C(_lh_break_LH_C_0_0, _lh_break_LH_C_1_0))))
//│ 		      else
//│ 		        (let rec _lh_matchIdent_3 = ((break_lh__d2 _lh_break_arg1_1) _lh_break_LH_C_1_0) in
//│ 		          (match _lh_matchIdent_3 with
//│ 		            | `LH_P2(_lh_break_LH_P2_0_0, _lh_break_LH_P2_1_0) -> 
//│ 		              (`LH_P2((`LH_C(_lh_break_LH_C_0_0, _lh_break_LH_P2_0_0)), _lh_break_LH_P2_1_0))
//│ 		            | _ -> 
//│ 		              (failwith "error"))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec words_lh__d1 _lh_words_arg1_0 =
//│ 		  (let rec _lh_matchIdent_6 = ((dropWhile_lh__d1 isSpace_lh__d1) _lh_words_arg1_0) in
//│ 		    (match _lh_matchIdent_6 with
//│ 		      | `LH_N -> 
//│ 		        (`LH_N)
//│ 		      | `LH_C(_lh_words_LH_C_0_0, _lh_words_LH_C_1_0) -> 
//│ 		        (let rec _lh_matchIdent_7 = ((break_lh__d2 isSpace_lh__d2) (`LH_C(_lh_words_LH_C_0_0, _lh_words_LH_C_1_0))) in
//│ 		          (match _lh_matchIdent_7 with
//│ 		            | `LH_P2(_lh_words_LH_P2_0_0, _lh_words_LH_P2_1_0) -> 
//│ 		              (`LH_C(_lh_words_LH_P2_0_0, (words_lh__d1 _lh_words_LH_P2_1_0)))
//│ 		            | _ -> 
//│ 		              (failwith "error")))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec break_lh__d1 _lh_break_arg1_2 _lh_break_arg2_2 =
//│ 		  (match _lh_break_arg2_2 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2((`LH_N), (`LH_N)))
//│ 		    | `LH_C(_lh_break_LH_C_0_1, _lh_break_LH_C_1_1) -> 
//│ 		      (if (_lh_break_arg1_2 _lh_break_LH_C_0_1) then
//│ 		        (`LH_P2((`LH_N), (`LH_C(_lh_break_LH_C_0_1, _lh_break_LH_C_1_1))))
//│ 		      else
//│ 		        (let rec _lh_matchIdent_4 = ((break_lh__d1 _lh_break_arg1_2) _lh_break_LH_C_1_1) in
//│ 		          (match _lh_matchIdent_4 with
//│ 		            | `LH_P2(_lh_break_LH_P2_0_1, _lh_break_LH_P2_1_1) -> 
//│ 		              (`LH_P2((`LH_C(_lh_break_LH_C_0_1, _lh_break_LH_P2_0_1)), _lh_break_LH_P2_1_1))
//│ 		            | _ -> 
//│ 		              (failwith "error"))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec lines_lh__d1 _lh_lines_arg1_0 =
//│ 		  (let rec _lh_matchIdent_8 = ((break_lh__d1 (fun x_3 -> 
//│ 		    (x_3 = '|'))) _lh_lines_arg1_0) in
//│ 		    (match _lh_matchIdent_8 with
//│ 		      | `LH_P2(_lh_lines_LH_P2_0_0, _lh_lines_LH_P2_1_0) -> 
//│ 		        (`LH_C(_lh_lines_LH_P2_0_0, (let rec _lh_matchIdent_9 = _lh_lines_LH_P2_1_0 in
//│ 		          (match _lh_matchIdent_9 with
//│ 		            | `LH_N -> 
//│ 		              (`LH_N)
//│ 		            | `LH_C(_lh_lines_LH_C_0_0, _lh_lines_LH_C_1_0) -> 
//│ 		              (lines_lh__d1 _lh_lines_LH_C_1_0)
//│ 		            | _ -> 
//│ 		              (failwith "error")))))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec tail_lh__d1 ls_6 =
//│ 		  (match ls_6 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      t_5
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec head_lh__d5 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      h_6
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec fold1_lh__d3 _lh_fold1_arg1_0 _lh_fold1_arg2_0 _lh_fold1_arg3_0 =
//│ 		  (match _lh_fold1_arg3_0 with
//│ 		    | `LH_C(_lh_fold1_LH_C_0_0, _lh_fold1_LH_C_1_0) -> 
//│ 		      (match _lh_fold1_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (_lh_fold1_arg2_0 _lh_fold1_LH_C_0_0)
//│ 		        | _ -> 
//│ 		          ((_lh_fold1_arg1_0 _lh_fold1_LH_C_0_0) (((fold1_lh__d3 _lh_fold1_arg1_0) _lh_fold1_arg2_0) _lh_fold1_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec format_lh__d1 _lh_format_arg1_0 _lh_format_arg2_0 =
//│ 		  (match _lh_format_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_C((`LH_N), (`LH_N)))
//│ 		    | _ -> 
//│ 		      let rec break_0 = (fun _lh_break_arg1_0 _lh_break_arg2_0 _lh_break_arg3_0 -> 
//│ 		        (if (_lh_break_arg1_0 = _lh_break_arg2_0) then
//│ 		          (`LH_C((`LH_N), _lh_break_arg3_0))
//│ 		        else
//│ 		          (`LH_C((`LH_C(_lh_break_arg2_0, (head_lh__d5 _lh_break_arg3_0))), (tail_lh__d1 _lh_break_arg3_0)))))
//│ 		      and start_0 = (fun _lh_start_arg1_0 _lh_start_arg2_0 -> 
//│ 		        (((break_0 _lh_start_arg1_0) _lh_start_arg2_0) (`LH_C((`LH_N), (`LH_N)))))
//│ 		      in (((fold1_lh__d3 (break_0 _lh_format_arg1_0)) (start_0 _lh_format_arg1_0)) _lh_format_arg2_0));;
//│ 		let rec filter_lh__d1 f_0 ls_1_1 =
//│ 		  (match ls_1_1 with
//│ 		    | `LH_C(h_1_3, t_1_3) -> 
//│ 		      (if (f_0 h_1_3) then
//│ 		        (`LH_C(h_1_3, ((filter_lh__d1 f_0) t_1_3)))
//│ 		      else
//│ 		        ((filter_lh__d1 f_0) t_1_3))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec paras_lh__d1 _lh_paras_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_0 -> 
//│ 		    ((filter_lh__d1 (fun x_2 -> 
//│ 		      ((`LH_N) <> x_2))) ((format_lh__d1 (`LH_N)) _lh_funcomp_x_0))) _lh_paras_arg1_0);;
//│ 		let rec parse_lh__d1 _lh_parse_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_3 -> 
//│ 		    ((fun _lh_funcomp_x_4 -> 
//│ 		      (paras_lh__d1 ((map_lh__d3 words_lh__d1) _lh_funcomp_x_4))) (lines_lh__d1 _lh_funcomp_x_3))) _lh_parse_arg1_0);;
//│ 		let rec mappend_lh__d1_d3 xs_3 ys_3 =
//│ 		  (match xs_3 with
//│ 		    | `LH_C(h_1_4, t_1_4) -> 
//│ 		      (`LH_C(h_1_4, ((mappend_lh__d1_d3 t_1_4) ys_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_3);;
//│ 		let rec mappend_lh__d1_d2 xs_4 ys_4 =
//│ 		  (match xs_4 with
//│ 		    | `LH_C(h_1_5, t_1_5) -> 
//│ 		      (`LH_C(h_1_5, ((mappend_lh__d1_d2 t_1_5) ys_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_4);;
//│ 		let rec unwords_lh__d1 _lh_unwords_arg1_0 =
//│ 		  (match _lh_unwords_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_unwords_LH_C_0_0, _lh_unwords_LH_C_1_0) -> 
//│ 		      (let rec go_0 = (fun _lh_go_arg1_0 -> 
//│ 		        (match _lh_go_arg1_0 with
//│ 		          | `LH_N -> 
//│ 		            (`LH_N)
//│ 		          | `LH_C(_lh_go_LH_C_0_0, _lh_go_LH_C_1_0) -> 
//│ 		            (`LH_C(' ', ((mappend_lh__d1_d2 _lh_go_LH_C_0_0) (go_0 _lh_go_LH_C_1_0))))
//│ 		          | _ -> 
//│ 		            (failwith "error"))) in
//│ 		        ((mappend_lh__d1_d3 _lh_unwords_LH_C_0_0) (go_0 _lh_unwords_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec map_lh__d2 f_5 ls_1_8 =
//│ 		  (match ls_1_8 with
//│ 		    | `LH_C(h_2_5, t_2_5) -> 
//│ 		      (`LH_C((f_5 h_2_5), ((map_lh__d2 f_5) t_2_5)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh__d1_d1 xs_6 ys_6 =
//│ 		  (match xs_6 with
//│ 		    | `LH_C(h_1_8, t_1_8) -> 
//│ 		      (`LH_C(h_1_8, ((mappend_lh__d1_d1 t_1_8) ys_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_6);;
//│ 		let rec mappend_lh__d1_d4 xs_2 ys_2 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(h_9, t_9) -> 
//│ 		      (`LH_C(h_9, ((mappend_lh__d1_d4 t_9) ys_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2);;
//│ 		let rec concat_lh__d2 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_1_6, t_1_6) -> 
//│ 		      ((mappend_lh__d1_d4 h_1_6) (concat_lh__d2 t_1_6))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d6 f_1 ls_1_2 =
//│ 		  (match ls_1_2 with
//│ 		    | `LH_C(h_1_7, t_1_7) -> 
//│ 		      (`LH_C((f_1 h_1_7), ((map_lh__d6 f_1) t_1_7)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec unlines_lh__d1 _lh_unlines_arg1_0 =
//│ 		  (concat_lh__d2 ((map_lh__d6 (fun l_1 -> 
//│ 		    ((mappend_lh__d1_d1 l_1) (`LH_C('|', (`LH_N)))))) _lh_unlines_arg1_0));;
//│ 		let rec mappend_lh__d1_d5 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      (`LH_C(h_8, ((mappend_lh__d1_d5 t_8) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec mappend_lh__d1_d6 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      (`LH_C(h_7, ((mappend_lh__d1_d6 t_7) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec fold1_lh__d2 _lh_fold1_arg1_1 _lh_fold1_arg2_1 _lh_fold1_arg3_1 =
//│ 		  (match _lh_fold1_arg3_1 with
//│ 		    | `LH_C(_lh_fold1_LH_C_0_1, _lh_fold1_LH_C_1_1) -> 
//│ 		      (match _lh_fold1_LH_C_1_1 with
//│ 		        | `LH_N -> 
//│ 		          (_lh_fold1_arg2_1 _lh_fold1_LH_C_0_1)
//│ 		        | _ -> 
//│ 		          ((_lh_fold1_arg1_1 _lh_fold1_LH_C_0_1) (((fold1_lh__d2 _lh_fold1_arg1_1) _lh_fold1_arg2_1) _lh_fold1_LH_C_1_1)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec unformat_lh__d1 _lh_unformat_arg1_0 =
//│ 		  ((fold1_lh__d2 (fun xs_5 ys_5 -> 
//│ 		    ((mappend_lh__d1_d6 ((mappend_lh__d1_d5 xs_5) (`LH_C(_lh_unformat_arg1_0, (`LH_N))))) ys_5))) (fun x_0 -> 
//│ 		    x_0));;
//│ 		let rec unparas_lh__d1 _lh_unparas_arg1_0 =
//│ 		  ((unformat_lh__d1 (`LH_N)) _lh_unparas_arg1_0);;
//│ 		let rec unparse_lh__d1 _lh_unparse_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_5 -> 
//│ 		    ((fun _lh_funcomp_x_6 -> 
//│ 		      (unlines_lh__d1 ((map_lh__d2 unwords_lh__d1) _lh_funcomp_x_6))) (unparas_lh__d1 _lh_funcomp_x_5))) _lh_unparse_arg1_0);;
//│ 		let rec map_lh__d1 f_6 ls_1_9 =
//│ 		  (match ls_1_9 with
//│ 		    | `LH_C(h_2_6, t_2_6) -> 
//│ 		      (`LH_C((f_6 h_2_6), ((map_lh__d1 f_6) t_2_6)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh__d1_d0 xs_7 ys_7 =
//│ 		  (match xs_7 with
//│ 		    | `LH_C(h_1_9, t_1_9) -> 
//│ 		      (`LH_C(h_1_9, ((mappend_lh__d1_d0 t_1_9) ys_7)))
//│ 		    | `LH_N -> 
//│ 		      ys_7);;
//│ 		let rec concat_lh__d1 lss_1 =
//│ 		  (match lss_1 with
//│ 		    | `LH_C(h_2_7, t_2_7) -> 
//│ 		      ((mappend_lh__d1_d0 h_2_7) (concat_lh__d1 t_2_7))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec fmt_lh__d1 _lh_fmt_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_7 -> 
//│ 		    ((fun _lh_funcomp_x_8 -> 
//│ 		      (unparse_lh__d1 ((map_lh__d1 (fun _lh_funcomp_x_9 -> 
//│ 		        (par3_lh__d1 (concat_lh__d1 _lh_funcomp_x_9)))) _lh_funcomp_x_8))) (parse_lh__d1 _lh_funcomp_x_7))) _lh_fmt_arg1_0);;
//│ 		let rec mappend_lh__d5 xs_1_2 ys_1_2 =
//│ 		  (match xs_1_2 with
//│ 		    | `LH_C(h_3_2, t_3_2) -> 
//│ 		      (`LH_C(h_3_2, ((mappend_lh__d5 t_3_2) ys_1_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_2);;
//│ 		let rec mappend_lh__d6 xs_1_1 ys_1_1 =
//│ 		  (match xs_1_1 with
//│ 		    | `LH_C(h_3_1, t_3_1) -> 
//│ 		      (`LH_C(h_3_1, ((mappend_lh__d6 t_3_1) ys_1_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_1);;
//│ 		let rec mappend_lh__d4 xs_1_3 ys_1_3 =
//│ 		  (match xs_1_3 with
//│ 		    | `LH_C(h_3_3, t_3_3) -> 
//│ 		      (`LH_C(h_3_3, ((mappend_lh__d4 t_3_3) ys_1_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_3);;
//│ 		let rec mappend_lh__d9 xs_8 ys_8 =
//│ 		  (match xs_8 with
//│ 		    | `LH_C(h_2_8, t_2_8) -> 
//│ 		      (`LH_C(h_2_8, ((mappend_lh__d9 t_2_8) ys_8)))
//│ 		    | `LH_N -> 
//│ 		      ys_8);;
//│ 		let rec null_lh__d1 _lh_null_arg1_4 =
//│ 		  (match _lh_null_arg1_4 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_4, _lh_null_LH_C_1_4) -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mappend_lh__d7 xs_1_0 ys_1_0 =
//│ 		  (match xs_1_0 with
//│ 		    | `LH_C(h_3_0, t_3_0) -> 
//│ 		      (`LH_C(h_3_0, ((mappend_lh__d7 t_3_0) ys_1_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_0);;
//│ 		let rec mappend_lh__d2 xs_1_5 ys_1_5 =
//│ 		  (match xs_1_5 with
//│ 		    | `LH_C(h_3_5, t_3_5) -> 
//│ 		      (`LH_C(h_3_5, ((mappend_lh__d2 t_3_5) ys_1_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_5);;
//│ 		let rec testPara_nofib_lh__d1 _lh_testPara_nofib_arg1_0 =
//│ 		  (let rec test_0 = ((mappend_lh__d5 ((mappend_lh__d6 ((mappend_lh__d7 ((mappend_lh__d3 ((mappend_lh__d2 ((mappend_lh__d8 ((mappend_lh__d9 ((mappend_lh__d1 ((mappend_lh__d4 (`LH_C('I', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('s', (`LH_C('t', (`LH_C('r', (`LH_C('u', (`LH_C('c', (`LH_C('t', (`LH_C('i', (`LH_C('v', (`LH_C('e', (`LH_C(' ', (`LH_C('p', (`LH_C('r', (`LH_C('o', (`LH_C('g', (`LH_C('r', (`LH_C('a', (`LH_C('m', (`LH_C('m', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('m', (`LH_C('u', (`LH_C('n', (`LH_C('i', (`LH_C('t', (`LH_C('y', (`LH_C(' ', (`LH_C('i', (`LH_C('t', (`LH_C(' ', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('m', (`LH_C('o', (`LH_C('n', (`LH_C('p', (`LH_C('l', (`LH_C('a', (`LH_C('c', (`LH_C('e', (`LH_C(' ', (`LH_C('t', (`LH_C('o', (`LH_C(' ', (`LH_C('s', (`LH_C('e', (`LH_C('e', (`LH_C(' ', (`LH_N)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('f', (`LH_C('o', (`LH_C('r', (`LH_C('m', (`LH_C('a', (`LH_C('l', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('v', (`LH_C('e', (`LH_C('l', (`LH_C('o', (`LH_C('p', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('s', (`LH_C(' ', (`LH_C('o', (`LH_C('f', (`LH_C(' ', (`LH_C('t', (`LH_C('e', (`LH_C('x', (`LH_C('t', (`LH_C('b', (`LH_C('o', (`LH_C('o', (`LH_C('k', (`LH_C(' ', (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C('s', (`LH_C('.', (`LH_C(' ', (`LH_C('I', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('s', (`LH_C('i', (`LH_C('g', (`LH_C('n', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('m', (`LH_C('u', (`LH_C('n', (`LH_C('i', (`LH_C('t', (`LH_C('y', (`LH_C(',', (`LH_C(' ', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('o', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C('r', (`LH_C(' ', (`LH_C('h', (`LH_C('a', (`LH_C('n', (`LH_C('d', (`LH_C(',', (`LH_C(' ', (`LH_C('i', (`LH_C('t', (`LH_C(' ', (`LH_C('m', (`LH_C('a', (`LH_C('y', (`LH_C(' ', (`LH_C('b', (`LH_C('e', (`LH_C(' ', (`LH_C('w', (`LH_C('e', (`LH_C('l', (`LH_C('l', (`LH_C(' ', (`LH_C('k', (`LH_C('n', (`LH_C('o', (`LH_C('w', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('a', (`LH_C('t', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('t', (`LH_C('e', (`LH_C('x', (`LH_C('t', (`LH_C('b', (`LH_C('o', (`LH_C('o', (`LH_C('k', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('s', (`LH_C('o', (`LH_C('l', (`LH_C('u', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('o', (`LH_C(' ', (`LH_C('a', (`LH_C(' ', (`LH_C('p', (`LH_C('r', (`LH_C('o', (`LH_C('b', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C(' ', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('n', (`LH_C('o', (`LH_C('t', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('m', (`LH_C('o', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('e', (`LH_C('f', (`LH_C('f', (`LH_C('i', (`LH_C('c', (`LH_C('i', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(' ', (`LH_C('p', (`LH_C('o', (`LH_C('s', (`LH_C('s', (`LH_C('i', (`LH_C('b', (`LH_C('l', (`LH_C('e', (`LH_C('.', (`LH_C(' ', (`LH_C('H', (`LH_C('o', (`LH_C('w', (`LH_C('e', (`LH_C('v', (`LH_C('e', (`LH_C('r', (`LH_C(',', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('p', (`LH_C('r', (`LH_C('e', (`LH_C('s', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('m', (`LH_C('o', (`LH_C('r', (`LH_C('e', (`LH_C(' ', (`LH_C('e', (`LH_C('f', (`LH_C('f', (`LH_C('i', (`LH_C('c', (`LH_C('i', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('l', (`LH_C('u', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(',', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('s', (`LH_C('i', (`LH_C('g', (`LH_C('n', (`LH_C('e', (`LH_C('r', (`LH_C(' ', (`LH_C('w', (`LH_C('i', (`LH_C('l', (`LH_C('l', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('u', (`LH_C('s', (`LH_C('u', (`LH_C('a', (`LH_C('l', (`LH_C('l', (`LH_C('y', (`LH_C(' ', (`LH_C('o', (`LH_C('m', (`LH_C('i', (`LH_C('t', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('m', (`LH_C('e', (`LH_C(' ', (`LH_C('o', (`LH_C('f', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('t', (`LH_C('a', (`LH_C('i', (`LH_C('l', (`LH_C('s', (`LH_C(',', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('c', (`LH_C('r', (`LH_C('e', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C(' ', (`LH_C('a', (`LH_C('n', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C(' ', (`LH_C('g', (`LH_C('a', (`LH_C('p', (`LH_C(' ', (`LH_C('b', (`LH_C('e', (`LH_C('t', (`LH_C('w', (`LH_C('e', (`LH_C('e', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('a', (`LH_C('b', (`LH_C('s', (`LH_C('t', (`LH_C('r', (`LH_C('a', (`LH_C('c', (`LH_C('t', (`LH_C(' ', (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C(' ', (`LH_C('a', (`LH_C('n', (`LH_C('d', (`LH_C(' ', (`LH_C('i', (`LH_C('t', (`LH_C('s', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('c', (`LH_C('r', (`LH_C('e', (`LH_C('t', (`LH_C('e', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C('.', (`LH_C(' ', (`LH_C('T', (`LH_C('h', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('t', (`LH_C('r', (`LH_C('a', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('t', (`LH_C('o', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('f', (`LH_C('o', (`LH_C('r', (`LH_C('m', (`LH_C('a', (`LH_C('l', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('v', (`LH_C('e', (`LH_C('l', (`LH_C('o', (`LH_C('p', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(',', (`LH_C(' ', (`LH_C('w', (`LH_C('h', (`LH_C('i', (`LH_C('c', (`LH_C('h', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('u', (`LH_C('s', (`LH_C('u', (`LH_C('a', (`LH_C('l', (`LH_C('l', (`LH_C('y', (`LH_C(' ', (`LH_C('p', (`LH_C('r', (`LH_C('e', (`LH_C('s', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('s', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('t', (`LH_C('e', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('c', (`LH_C('r', (`LH_C('e', (`LH_C('t', (`LH_C('e', (`LH_C(' ', (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('o', (`LH_C('f', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('l', (`LH_C('e', (`LH_C('s', (`LH_C('s', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('e', (`LH_C('f', (`LH_C('f', (`LH_C('i', (`LH_C('c', (`LH_C('i', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('l', (`LH_C('u', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C('.', (`LH_C('|', (`LH_C(' ', (`LH_C('|', (`LH_N)))))))))))))))))))))))))))))))))))))))))))))) in
//│ 		    (if (null_lh__d1 test_0) then
//│ 		      (`LH_N)
//│ 		    else
//│ 		      (fmt_lh__d1 test_0)));;
//│ 		(testPara_nofib_lh__d1 0)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C h⁰ a⁰]: 7 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁸ of {LH_C h¹⁰ t¹⁰ => h¹⁰ | LH_N  => error⁰}: 194
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 296
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 573
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₁₂(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 1596
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₁₂(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh_₁₃(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 1607
//│ [LH_N]: 30 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁸ of {LH_C h¹⁰ t¹⁰ => h¹⁰ | LH_N  => error⁰}: 194
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 296
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 573
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₁₂(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 1596
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₁₂(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh_₁₃(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 1607
//│ [LH_N]: 32 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁸ of {LH_C h¹⁰ t¹⁰ => h¹⁰ | LH_N  => error⁰}: 194
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 296
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 573
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₁₂(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 1596
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₁₂(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh_₁₃(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 1607
//│ [LH_P2 take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]: 51 --->
//│ 	case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰}: 452
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰}: 537
//│ 	case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰}: 626
//│ [LH_N]: 76 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_C h⁷ mappend_lh_₁₆(t⁷, ys⁰)]: 140 --->
//│ 	case ls¹⁸ of {LH_C h²⁵ t²⁵ => [LH_C f⁵(h²⁵) map_lh_₂(f⁵, t²⁵)] | LH_N  => [LH_N]}: 1579
//│ [LH_C h⁸ mappend_lh_₁₅(t⁸, ys¹)]: 174 --->
//│ 	case xs⁰ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₆(t⁷, ys⁰)] | LH_N  => ys⁰}: 142
//│ [LH_P2 take_lh_₁(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹) drop_lh_₁(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹)]: 217 --->
//│ 	case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰}: 1038
//│ [LH_N]: 221 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰}: 1042
//│ [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 229 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰}: 1042
//│ [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁸ of {LH_C h¹⁰ t¹⁰ => h¹⁰ | LH_N  => error⁰}: 194
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 296
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 573
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 321 --->
//│ 	DeadCodeCons
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 287
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 298
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 329
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 351
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 371
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁰)) then head_lh_₇(_lh_last'_LH_P2_1⁰) else head_lh_₇(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 388
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₅(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₅(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 413
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₅(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 462
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 503
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₅(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)] | _  => error⁰}: 547
//│ 	case _lh_last'_arg1² of {LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₅(_lh_last'_LH_P2_1²)) then head_lh_₇(_lh_last'_LH_P2_1²) else head_lh_₇(_lh_last'_LH_P2_0²) | _  => error⁰}: 564
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 575
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_last'_arg1³ of {LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₄(_lh_last'_LH_P2_1³)) then head_lh_₆(_lh_last'_LH_P2_1³) else head_lh_₇(_lh_last'_LH_P2_0³) | _  => error⁰}: 652
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 1006
//│ [LH_N]: 323 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_C _lh_cons'_arg1⁰ [LH_N]]: 324 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁸ of {LH_C h¹⁰ t¹⁰ => h¹⁰ | LH_N  => error⁰}: 194
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 296
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 573
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 326 --->
//│ 	DeadCodeCons
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 287
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 298
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 329
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 351
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 371
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁰)) then head_lh_₇(_lh_last'_LH_P2_1⁰) else head_lh_₇(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 388
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₅(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₅(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 413
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₅(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 462
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 503
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₅(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)] | _  => error⁰}: 547
//│ 	case _lh_last'_arg1² of {LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₅(_lh_last'_LH_P2_1²)) then head_lh_₇(_lh_last'_LH_P2_1²) else head_lh_₇(_lh_last'_LH_P2_0²) | _  => error⁰}: 564
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 575
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_last'_arg1³ of {LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₄(_lh_last'_LH_P2_1³)) then head_lh_₆(_lh_last'_LH_P2_1³) else head_lh_₇(_lh_last'_LH_P2_0³) | _  => error⁰}: 652
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 1006
//│ [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁸ of {LH_C h¹⁰ t¹⁰ => h¹⁰ | LH_N  => error⁰}: 194
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 296
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 573
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 363 --->
//│ 	DeadCodeCons
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 287
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 298
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 329
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 351
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 371
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁰)) then head_lh_₇(_lh_last'_LH_P2_1⁰) else head_lh_₇(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 388
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₅(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₅(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 413
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₅(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 462
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 503
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₅(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)] | _  => error⁰}: 547
//│ 	case _lh_last'_arg1² of {LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₅(_lh_last'_LH_P2_1²)) then head_lh_₇(_lh_last'_LH_P2_1²) else head_lh_₇(_lh_last'_LH_P2_0²) | _  => error⁰}: 564
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 575
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_last'_arg1³ of {LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₄(_lh_last'_LH_P2_1³)) then head_lh_₆(_lh_last'_LH_P2_1³) else head_lh_₇(_lh_last'_LH_P2_0³) | _  => error⁰}: 652
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 1006
//│ [LH_N]: 365 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_C _lh_cons'_arg1¹ [LH_N]]: 366 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁸ of {LH_C h¹⁰ t¹⁰ => h¹⁰ | LH_N  => error⁰}: 194
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 296
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 573
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 368 --->
//│ 	DeadCodeCons
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 287
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 298
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 329
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 351
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 371
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁰)) then head_lh_₇(_lh_last'_LH_P2_1⁰) else head_lh_₇(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 388
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₅(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₅(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 413
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₅(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 462
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 503
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₅(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)] | _  => error⁰}: 547
//│ 	case _lh_last'_arg1² of {LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₅(_lh_last'_LH_P2_1²)) then head_lh_₇(_lh_last'_LH_P2_1²) else head_lh_₇(_lh_last'_LH_P2_0²) | _  => error⁰}: 564
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 575
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_last'_arg1³ of {LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₄(_lh_last'_LH_P2_1³)) then head_lh_₆(_lh_last'_LH_P2_1³) else head_lh_₇(_lh_last'_LH_P2_0³) | _  => error⁰}: 652
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 1006
//│ [LH_N]: 428 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁸ of {LH_C h¹⁰ t¹⁰ => h¹⁰ | LH_N  => error⁰}: 194
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 296
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_N]: 429 --->
//│ 	DeadCodeCons
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_P2 [LH_N] [LH_N]]: 430 --->
//│ 	DeadCodeCons
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 287
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 298
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 329
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 351
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 371
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁰)) then head_lh_₇(_lh_last'_LH_P2_1⁰) else head_lh_₇(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 388
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₅(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₅(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 413
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₅(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 462
//│ 	case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1¹)) then head_lh_₇(_lh_last'_LH_P2_1¹) else head_lh_₇(_lh_last'_LH_P2_0¹) | _  => error⁰}: 478
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 503
//│ 	case _lh_last'_arg1² of {LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₅(_lh_last'_LH_P2_1²)) then head_lh_₇(_lh_last'_LH_P2_1²) else head_lh_₇(_lh_last'_LH_P2_0²) | _  => error⁰}: 564
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 1006
//│ [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 450 --->
//│ 	DeadCodeCons
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 287
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 298
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 329
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 351
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 371
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁰)) then head_lh_₇(_lh_last'_LH_P2_1⁰) else head_lh_₇(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 388
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₅(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₅(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 413
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₅(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 462
//│ 	case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1¹)) then head_lh_₇(_lh_last'_LH_P2_1¹) else head_lh_₇(_lh_last'_LH_P2_0¹) | _  => error⁰}: 478
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 503
//│ 	case _lh_last'_arg1² of {LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₅(_lh_last'_LH_P2_1²)) then head_lh_₇(_lh_last'_LH_P2_1²) else head_lh_₇(_lh_last'_LH_P2_0²) | _  => error⁰}: 564
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 1006
//│ [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]: 458 --->
//│ 	DeadCodeCons
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 287
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 298
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 329
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 351
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 371
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁰)) then head_lh_₇(_lh_last'_LH_P2_1⁰) else head_lh_₇(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 388
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₅(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₅(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 413
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₅(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 462
//│ 	case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1¹)) then head_lh_₇(_lh_last'_LH_P2_1¹) else head_lh_₇(_lh_last'_LH_P2_0¹) | _  => error⁰}: 478
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 503
//│ 	case _lh_last'_arg1² of {LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₅(_lh_last'_LH_P2_1²)) then head_lh_₇(_lh_last'_LH_P2_1²) else head_lh_₇(_lh_last'_LH_P2_0²) | _  => error⁰}: 564
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 1006
//│ [LH_N]: 513 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁸ of {LH_C h¹⁰ t¹⁰ => h¹⁰ | LH_N  => error⁰}: 194
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 296
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 573
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_N]: 514 --->
//│ 	DeadCodeCons
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_P2 [LH_N] [LH_N]]: 515 --->
//│ 	DeadCodeCons
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 287
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 298
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 329
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 351
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 371
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁰)) then head_lh_₇(_lh_last'_LH_P2_1⁰) else head_lh_₇(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 388
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₅(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₅(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 413
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₅(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 462
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 503
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₅(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)] | _  => error⁰}: 547
//│ 	case _lh_last'_arg1² of {LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₅(_lh_last'_LH_P2_1²)) then head_lh_₇(_lh_last'_LH_P2_1²) else head_lh_₇(_lh_last'_LH_P2_0²) | _  => error⁰}: 564
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 575
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_last'_arg1³ of {LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₄(_lh_last'_LH_P2_1³)) then head_lh_₆(_lh_last'_LH_P2_1³) else head_lh_₇(_lh_last'_LH_P2_0³) | _  => error⁰}: 652
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 1006
//│ [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 535 --->
//│ 	DeadCodeCons
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 287
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 298
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 329
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 351
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 371
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁰)) then head_lh_₇(_lh_last'_LH_P2_1⁰) else head_lh_₇(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 388
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₅(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₅(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 413
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₅(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 462
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 503
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₅(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)] | _  => error⁰}: 547
//│ 	case _lh_last'_arg1² of {LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₅(_lh_last'_LH_P2_1²)) then head_lh_₇(_lh_last'_LH_P2_1²) else head_lh_₇(_lh_last'_LH_P2_0²) | _  => error⁰}: 564
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 575
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_last'_arg1³ of {LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₄(_lh_last'_LH_P2_1³)) then head_lh_₆(_lh_last'_LH_P2_1³) else head_lh_₇(_lh_last'_LH_P2_0³) | _  => error⁰}: 652
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 1006
//│ [LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]: 543 --->
//│ 	DeadCodeCons
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 287
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 298
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 329
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 351
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 371
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁰)) then head_lh_₇(_lh_last'_LH_P2_1⁰) else head_lh_₇(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 388
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₅(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₅(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 413
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₅(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 462
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 503
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₅(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)] | _  => error⁰}: 547
//│ 	case _lh_last'_arg1² of {LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₅(_lh_last'_LH_P2_1²)) then head_lh_₇(_lh_last'_LH_P2_1²) else head_lh_₇(_lh_last'_LH_P2_0²) | _  => error⁰}: 564
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 575
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_last'_arg1³ of {LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₄(_lh_last'_LH_P2_1³)) then head_lh_₆(_lh_last'_LH_P2_1³) else head_lh_₇(_lh_last'_LH_P2_0³) | _  => error⁰}: 652
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 1006
//│ [LH_N]: 602 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_N]: 603 --->
//│ 	DeadCodeCons
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_P2 [LH_N] [LH_N]]: 604 --->
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 287
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 329
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 351
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 371
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 503
//│ 	case _lh_head'_arg1¹ of {LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0¹)) then head_lh_₇(_lh_head'_LH_P2_0¹) else head_lh_₇(_lh_head'_LH_P2_1¹) | _  => error⁰}: 595
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 624 --->
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 287
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 329
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 351
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 371
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 503
//│ 	case _lh_head'_arg1¹ of {LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0¹)) then head_lh_₇(_lh_head'_LH_P2_0¹) else head_lh_₇(_lh_head'_LH_P2_1¹) | _  => error⁰}: 595
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 632 --->
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 287
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 329
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 351
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 371
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 503
//│ 	case _lh_head'_arg1¹ of {LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0¹)) then head_lh_₇(_lh_head'_LH_P2_0¹) else head_lh_₇(_lh_head'_LH_P2_1¹) | _  => error⁰}: 595
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ [LH_N]: 655 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_N]: 656 --->
//│ 	DeadCodeCons
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case _lh_null_arg1² of {LH_N  => [True] | LH_C _lh_null_LH_C_0² _lh_null_LH_C_1² => [False] | _  => error⁰}: 99
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_P2 [LH_N] [LH_N]]: 657 --->
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₃(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 676
//│ [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁸ of {LH_C h¹⁰ t¹⁰ => h¹⁰ | LH_N  => error⁰}: 194
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 668 --->
//│ 	DeadCodeCons
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 287
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 329
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 351
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 371
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁰)) then head_lh_₇(_lh_last'_LH_P2_1⁰) else head_lh_₇(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 388
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 503
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 1006
//│ [LH_N]: 670 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_C _lh_cons'_arg1² [LH_N]]: 671 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66
//│ 	case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71
//│ 	case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82
//│ 	case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93
//│ 	case ls⁸ of {LH_C h¹⁰ t¹⁰ => h¹⁰ | LH_N  => error⁰}: 194
//│ 	case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199
//│ 	case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 673 --->
//│ 	DeadCodeCons
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 287
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 329
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 351
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 371
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁰)) then head_lh_₇(_lh_last'_LH_P2_1⁰) else head_lh_₇(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 388
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 503
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 1006
//│ [LH_C h¹³ filter_lh_₁(f⁰, t¹³)]: 716 --->
//│ 	case ls¹⁹ of {LH_C h²⁶ t²⁶ => [LH_C f⁶(h²⁶) map_lh_₁(f⁶, t²⁶)] | LH_N  => [LH_N]}: 1641
//│ [LH_N]: 723 --->
//│ 	case ls¹⁹ of {LH_C h²⁶ t²⁶ => [LH_C f⁶(h²⁶) map_lh_₁(f⁶, t²⁶)] | LH_N  => [LH_N]}: 1641
//│ [LH_N]: 728 --->
//│ 	NoCons
//│ 	case lss¹ of {LH_C h²⁷ t²⁷ => mappend_lh_₁₀(h²⁷, concat_lh_₁(t²⁷)) | LH_N  => [LH_N]}: 1653
//│ [LH_N]: 729 --->
//│ 	case ls¹¹ of {LH_C h¹³ t¹³ => if f⁰(h¹³) then [LH_C h¹³ filter_lh_₁(f⁰, t¹³)] else filter_lh_₁(f⁰, t¹³) | LH_N  => [LH_N]}: 724
//│ [LH_C [LH_N] [LH_N]]: 730 --->
//│ 	case ls¹¹ of {LH_C h¹³ t¹³ => if f⁰(h¹³) then [LH_C h¹³ filter_lh_₁(f⁰, t¹³)] else filter_lh_₁(f⁰, t¹³) | LH_N  => [LH_N]}: 724
//│ [LH_N]: 736 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case lss¹ of {LH_C h²⁷ t²⁷ => mappend_lh_₁₀(h²⁷, concat_lh_₁(t²⁷)) | LH_N  => [LH_N]}: 1653
//│ [LH_C [LH_N] _lh_break_arg3⁰]: 738 --->
//│ 	DeadCodeCons
//│ 	case ls⁶ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 104
//│ 	case ls⁷ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 109
//│ 	case ls¹¹ of {LH_C h¹³ t¹³ => if f⁰(h¹³) then [LH_C h¹³ filter_lh_₁(f⁰, t¹³)] else filter_lh_₁(f⁰, t¹³) | LH_N  => [LH_N]}: 724
//│ [LH_C _lh_break_arg2⁰ head_lh_₅(_lh_break_arg3⁰)]: 743 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case lss¹ of {LH_C h²⁷ t²⁷ => mappend_lh_₁₀(h²⁷, concat_lh_₁(t²⁷)) | LH_N  => [LH_N]}: 1653
//│ [LH_C [LH_C _lh_break_arg2⁰ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 747 --->
//│ 	DeadCodeCons
//│ 	case ls⁶ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 104
//│ 	case ls⁷ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 109
//│ 	case ls¹¹ of {LH_C h¹³ t¹³ => if f⁰(h¹³) then [LH_C h¹³ filter_lh_₁(f⁰, t¹³)] else filter_lh_₁(f⁰, t¹³) | LH_N  => [LH_N]}: 724
//│ [LH_N]: 757 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case lss¹ of {LH_C h²⁷ t²⁷ => mappend_lh_₁₀(h²⁷, concat_lh_₁(t²⁷)) | LH_N  => [LH_N]}: 1653
//│ [LH_N]: 758 --->
//│ 	DeadCodeCons
//│ 	case ls¹¹ of {LH_C h¹³ t¹³ => if f⁰(h¹³) then [LH_C h¹³ filter_lh_₁(f⁰, t¹³)] else filter_lh_₁(f⁰, t¹³) | LH_N  => [LH_N]}: 724
//│ [LH_C [LH_N] [LH_N]]: 759 --->
//│ 	DeadCodeCons
//│ 	case ls⁶ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 104
//│ 	case ls⁷ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 109
//│ 	case ls¹¹ of {LH_C h¹³ t¹³ => if f⁰(h¹³) then [LH_C h¹³ filter_lh_₁(f⁰, t¹³)] else filter_lh_₁(f⁰, t¹³) | LH_N  => [LH_N]}: 724
//│ [LH_N]: 779 --->
//│ 	case _lh_matchIdent⁶ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁷ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 1525
//│ [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]: 790 --->
//│ 	case _lh_matchIdent⁶ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁷ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 1525
//│ [LH_N]: 797 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 247
//│ 	case xs³ of {LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₁₃(t¹⁴, ys³)] | LH_N  => ys³}: 879
//│ 	case xs⁴ of {LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₁₂(t¹⁵, ys⁴)] | LH_N  => ys⁴}: 891
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 1440
//│ [LH_N]: 798 --->
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 793
//│ [LH_P2 [LH_N] [LH_N]]: 799 --->
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰}: 820
//│ 	case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰}: 1522
//│ [LH_N]: 803 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 247
//│ 	case xs³ of {LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₁₃(t¹⁴, ys³)] | LH_N  => ys³}: 879
//│ 	case xs⁴ of {LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₁₂(t¹⁵, ys⁴)] | LH_N  => ys⁴}: 891
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 1440
//│ [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]: 806 --->
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 793
//│ [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]]: 807 --->
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰}: 820
//│ 	case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰}: 1522
//│ [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 816 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 247
//│ 	case xs³ of {LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₁₃(t¹⁴, ys³)] | LH_N  => ys³}: 879
//│ 	case xs⁴ of {LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₁₂(t¹⁵, ys⁴)] | LH_N  => ys⁴}: 891
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 1440
//│ [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]: 818 --->
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰}: 820
//│ 	case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰}: 1522
//│ [LH_N]: 840 --->
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 793
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent³ = break_lh_₂(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 824
//│ [LH_N]: 841 --->
//│ 	case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1561
//│ [LH_P2 [LH_N] [LH_N]]: 842 --->
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹] | _  => error⁰}: 863
//│ 	case _lh_matchIdent⁸ of {LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}] | _  => error⁰}: 1565
//│ [LH_N]: 846 --->
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 793
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent³ = break_lh_₂(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 824
//│ [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]: 849 --->
//│ 	case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1561
//│ [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]]: 850 --->
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹] | _  => error⁰}: 863
//│ 	case _lh_matchIdent⁸ of {LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}] | _  => error⁰}: 1565
//│ [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹]: 859 --->
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 793
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent³ = break_lh_₂(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 824
//│ [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]: 861 --->
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹] | _  => error⁰}: 863
//│ 	case _lh_matchIdent⁸ of {LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}] | _  => error⁰}: 1565
//│ [LH_C h¹⁴ mappend_lh_₁₃(t¹⁴, ys³)]: 877 --->
//│ 	case xs⁶ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys⁶)] | LH_N  => ys⁶}: 947
//│ [LH_C h¹⁵ mappend_lh_₁₂(t¹⁵, ys⁴)]: 889 --->
//│ 	case xs⁶ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys⁶)] | LH_N  => ys⁶}: 947
//│ [LH_N]: 900 --->
//│ 	case xs⁰ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₆(t⁷, ys⁰)] | LH_N  => ys⁰}: 142
//│ [LH_C _lh_unformat_arg1⁰ [LH_N]]: 901 --->
//│ 	case xs⁰ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₆(t⁷, ys⁰)] | LH_N  => ys⁰}: 142
//│ [LH_C f¹(h¹⁷) map_lh_₆(f¹, t¹⁷)]: 933 --->
//│ 	case lss⁰ of {LH_C h¹⁶ t¹⁶ => mappend_lh_₁₄(h¹⁶, concat_lh_₂(t¹⁶)) | LH_N  => [LH_N]}: 922
//│ [LH_N]: 934 --->
//│ 	case lss⁰ of {LH_C h¹⁶ t¹⁶ => mappend_lh_₁₄(h¹⁶, concat_lh_₂(t¹⁶)) | LH_N  => [LH_N]}: 922
//│ [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys⁶)]: 945 --->
//│ 	case xs² of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄(t⁹, ys²)] | LH_N  => ys²}: 188
//│ [LH_C h¹⁹ mappend_lh_₁₀(t¹⁹, ys⁷)]: 957 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case ls¹⁵ of {LH_C h²² t²² => [LH_C f³(h²²) map_lh_₄(f³, t²²)] | LH_N  => [LH_N]}: 1453
//│ [LH_C f²(h²¹) map_lh_₅(f², t²¹)]: 987 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰}: 1042
//│ [LH_N]: 988 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰}: 1042
//│ [LH_N]: 1010 --->
//│ 	case xs¹ of {LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₁₅(t⁸, ys¹)] | LH_N  => ys¹}: 176
//│ 	case ls¹⁸ of {LH_C h²⁵ t²⁵ => [LH_C f⁵(h²⁵) map_lh_₂(f⁵, t²⁵)] | LH_N  => [LH_N]}: 1579
//│ [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]: 1031 --->
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰]: 1034 --->
//│ 	case _lh_tile_arg2⁰ of {LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰} | _  => error⁰}: 1044
//│ [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 1036 --->
//│ 	case xs¹ of {LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₁₅(t⁸, ys¹)] | LH_N  => ys¹}: 176
//│ 	case ls¹⁸ of {LH_C h²⁵ t²⁵ => [LH_C f⁵(h²⁵) map_lh_₂(f⁵, t²⁵)] | LH_N  => [LH_N]}: 1579
//│ [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 1139 --->
//│ 	DeadCodeCons
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 247
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 1440
//│ [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + let x¹ = (optw_lh_₁ - old_width_hd⁰(p⁴))
//│ in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰]: 1161 --->
//│ 	DeadCodeCons
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 247
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 1440
//│ [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₅(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 1364 --->
//│ 	DeadCodeCons
//│ 	case _lh_thd3_arg1¹ of {LH_P3 _lh_thd3_LH_P3_0¹ _lh_thd3_LH_P3_1¹ _lh_thd3_LH_P3_2¹ => _lh_thd3_LH_P3_2¹ | _  => error⁰}: 965
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh_₂(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh_₁(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh_₃(p²) + let a¹ = (optw_lh_₃ - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh_₂(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + let x¹ = (optw_lh_₁ - old_width_hd⁰(p⁴))
//│ in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh_₂(ps_pq⁰) then ps_pq⁰ else if single'_lh_₂(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh_₂(ps_pq⁰)
//│ in let q⁰ = last'_lh_₃(ps_pq⁰)
//│ in let p⁵ = last'_lh_₄(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh_₁(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh_₂(ps_p¹)) > maxw_lh_₃) then drop_nofit⁰(init'_lh_₁(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh_₂ - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh_₁(p⁶) == 0)) then min_lh_₂((optw_lh_₂ - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh_₁(ceildiv_lh_₁((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh_₁(qr_rs⁰) || null'_lh_₃(qr_rs⁰)) then cons'_lh_₃(p⁷, qr_rs⁰) else let q² = head'_lh_₂(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh_₁(qr_rs⁰)
//│ in let r⁰ = head'_lh_₁(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh_₂(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₅(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 1377
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 1440
//│ [LH_P3 0 0 0]: 1389 --->
//│ 	DeadCodeCons
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 247
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 1440
//│ [LH_P3 cons'_lh_₁([LH_P3 0 0 0], nil'_lh_₁) _lh_startr_arg1⁰ 1]: 1395 --->
//│ 	DeadCodeCons
//│ 	case _lh_thd3_arg1¹ of {LH_P3 _lh_thd3_LH_P3_0¹ _lh_thd3_LH_P3_1¹ _lh_thd3_LH_P3_2¹ => _lh_thd3_LH_P3_2¹ | _  => error⁰}: 965
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh_₂(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh_₁(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh_₃(p²) + let a¹ = (optw_lh_₃ - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh_₂(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + let x¹ = (optw_lh_₁ - old_width_hd⁰(p⁴))
//│ in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh_₂(ps_pq⁰) then ps_pq⁰ else if single'_lh_₂(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh_₂(ps_pq⁰)
//│ in let q⁰ = last'_lh_₃(ps_pq⁰)
//│ in let p⁵ = last'_lh_₄(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh_₁(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh_₂(ps_p¹)) > maxw_lh_₃) then drop_nofit⁰(init'_lh_₁(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh_₂ - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh_₁(p⁶) == 0)) then min_lh_₂((optw_lh_₂ - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh_₁(ceildiv_lh_₁((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh_₁(qr_rs⁰) || null'_lh_₃(qr_rs⁰)) then cons'_lh_₃(p⁷, qr_rs⁰) else let q² = head'_lh_₂(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh_₁(qr_rs⁰)
//│ in let r⁰ = head'_lh_₁(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh_₂(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₅(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 1377
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 1440
//│ [LH_C f³(h²²) map_lh_₄(f³, t²²)]: 1451 --->
//│ 	case _lh_fold1_LH_C_1² of {LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²) | _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))}: 695
//│ 	case _lh_fold1_arg3² of {LH_C _lh_fold1_LH_C_0² _lh_fold1_LH_C_1² => case _lh_fold1_LH_C_1² of {LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²) | _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))} | _  => error⁰}: 697
//│ [LH_N]: 1452 --->
//│ 	case _lh_fold1_LH_C_1² of {LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²) | _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))}: 695
//│ 	case _lh_fold1_arg3² of {LH_C _lh_fold1_LH_C_0² _lh_fold1_LH_C_1² => case _lh_fold1_LH_C_1² of {LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²) | _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))} | _  => error⁰}: 697
//│ [LH_C _lh_scan1_arg1⁰(a², head_lh_₂(s⁰)) s⁰]: 1470 --->
//│ 	DeadCodeCons
//│ 	case ls¹⁰ of {LH_C h¹² t¹² => h¹² | LH_N  => error⁰}: 704
//│ 	case ls¹⁴ of {LH_C h²¹ t²¹ => [LH_C f²(h²¹) map_lh_₅(f², t²¹)] | LH_N  => [LH_N]}: 989
//│ 	case ls¹⁶ of {LH_C h²³ t²³ => h²³ | LH_N  => error⁰}: 1459
//│ [LH_N]: 1477 --->
//│ 	DeadCodeCons
//│ 	case ls¹⁴ of {LH_C h²¹ t²¹ => [LH_C f²(h²¹) map_lh_₅(f², t²¹)] | LH_N  => [LH_N]}: 989
//│ [LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 1478 --->
//│ 	DeadCodeCons
//│ 	case ls¹⁰ of {LH_C h¹² t¹² => h¹² | LH_N  => error⁰}: 704
//│ 	case ls¹⁴ of {LH_C h²¹ t²¹ => [LH_C f²(h²¹) map_lh_₅(f², t²¹)] | LH_N  => [LH_N]}: 989
//│ 	case ls¹⁶ of {LH_C h²³ t²³ => h²³ | LH_N  => error⁰}: 1459
//│ [LH_N]: 1507 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case xs⁷ of {LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₁₀(t¹⁹, ys⁷)] | LH_N  => ys⁷}: 959
//│ [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰]: 1513 --->
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent³ = break_lh_₂(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 824
//│ [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)]: 1520 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case xs⁷ of {LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₁₀(t¹⁹, ys⁷)] | LH_N  => ys⁷}: 959
//│ [LH_C f⁴(h²⁴) map_lh_₃(f⁴, t²⁴)]: 1537 --->
//│ 	case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}: 127
//│ 	case _lh_fold1_arg3⁰ of {LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))} | _  => error⁰}: 129
//│ 	case _lh_format_arg2⁰ of {LH_N  => [LH_C [LH_N] [LH_N]] | _  => SINGLE_LINE_LET_GROUP_STUB}: 775
//│ [LH_N]: 1538 --->
//│ 	case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}: 127
//│ 	case _lh_fold1_arg3⁰ of {LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))} | _  => error⁰}: 129
//│ 	case _lh_format_arg2⁰ of {LH_N  => [LH_C [LH_N] [LH_N]] | _  => SINGLE_LINE_LET_GROUP_STUB}: 775
//│ [LH_N]: 1556 --->
//│ 	case ls¹⁷ of {LH_C h²⁴ t²⁴ => [LH_C f⁴(h²⁴) map_lh_₃(f⁴, t²⁴)] | LH_N  => [LH_N]}: 1539
//│ [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}]: 1563 --->
//│ 	case ls¹⁷ of {LH_C h²⁴ t²⁴ => [LH_C f⁴(h²⁴) map_lh_₃(f⁴, t²⁴)] | LH_N  => [LH_N]}: 1539
//│ [LH_C f⁵(h²⁵) map_lh_₂(f⁵, t²⁵)]: 1577 --->
//│ 	case ls¹² of {LH_C h¹⁷ t¹⁷ => [LH_C f¹(h¹⁷) map_lh_₆(f¹, t¹⁷)] | LH_N  => [LH_N]}: 935
//│ [LH_N]: 1578 --->
//│ 	case ls¹² of {LH_C h¹⁷ t¹⁷ => [LH_C f¹(h¹⁷) map_lh_₆(f¹, t¹⁷)] | LH_N  => [LH_N]}: 935
//│ [LH_N]: 1583 --->
//│ 	case xs⁶ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys⁶)] | LH_N  => ys⁶}: 947
//│ [LH_N]: 1585 --->
//│ 	case xs⁶ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys⁶)] | LH_N  => ys⁶}: 947
//│ [LH_C ' ' mappend_lh_₁₂(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 1594 --->
//│ 	case xs⁶ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys⁶)] | LH_N  => ys⁶}: 947
//│ [LH_N]: 1610 --->
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₁₂(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh_₁₃(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 1607
//│ [LH_N]: 1621 --->
//│ 	case xs² of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄(t⁹, ys²)] | LH_N  => ys²}: 188
//│ [LH_C '|' [LH_N]]: 1622 --->
//│ 	case xs² of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄(t⁹, ys²)] | LH_N  => ys²}: 188
//│ [LH_C f⁶(h²⁶) map_lh_₁(f⁶, t²⁶)]: 1639 --->
//│ 	case _lh_fold1_LH_C_1¹ of {LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹) | _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))}: 161
//│ 	case _lh_fold1_arg3¹ of {LH_C _lh_fold1_LH_C_0¹ _lh_fold1_LH_C_1¹ => case _lh_fold1_LH_C_1¹ of {LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹) | _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))} | _  => error⁰}: 163
//│ [LH_N]: 1640 --->
//│ 	case _lh_fold1_LH_C_1¹ of {LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹) | _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))}: 161
//│ 	case _lh_fold1_arg3¹ of {LH_C _lh_fold1_LH_C_0¹ _lh_fold1_LH_C_1¹ => case _lh_fold1_LH_C_1¹ of {LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹) | _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))} | _  => error⁰}: 163
//│ [LH_N]: 1652 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241
//│ 	case ls¹⁵ of {LH_C h²² t²² => [LH_C f³(h²²) map_lh_₄(f³, t²²)] | LH_N  => [LH_N]}: 1453
//│ [LH_P2 map_lh_₅((fun _lh_funcomp_x¹ -> (fun _lh_funcomp_x² -> len_tl_lh_₁(last'_lh_₁(_lh_funcomp_x²)))(fst3_lh_₁(_lh_funcomp_x¹))), zs⁰) thd3_lh_₁(head_lh_₁(zs⁰))]: 1689 --->
//│ 	case _lh_tile_arg2⁰ of {LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰} | _  => error⁰}: 1044
//│ [LH_C h²⁸ mappend_lh_₉(t²⁸, ys⁸)]: 1738 --->
//│ 	case xs⁹ of {LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₈(t²⁹, ys⁹)] | LH_N  => ys⁹}: 1752
//│ [LH_C h²⁹ mappend_lh_₈(t²⁹, ys⁹)]: 1750 --->
//│ 	case xs¹⁵ of {LH_C h³⁵ t³⁵ => [LH_C h³⁵ mappend_lh_₂(t³⁵, ys¹⁵)] | LH_N  => ys¹⁵}: 1845
//│ [LH_C h³⁰ mappend_lh_₇(t³⁰, ys¹⁰)]: 1783 --->
//│ 	case xs¹¹ of {LH_C h³¹ t³¹ => [LH_C h³¹ mappend_lh_₆(t³¹, ys¹¹)] | LH_N  => ys¹¹}: 1797
//│ [LH_C h³¹ mappend_lh_₆(t³¹, ys¹¹)]: 1795 --->
//│ 	case xs¹² of {LH_C h³² t³² => [LH_C h³² mappend_lh_₅(t³², ys¹²)] | LH_N  => ys¹²}: 1809
//│ [LH_C h³² mappend_lh_₅(t³², ys¹²)]: 1807 --->
//│ 	DeadCodeCons
//│ 	case _lh_break_arg2² of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1²(_lh_break_LH_C_0¹) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]] else let _lh_matchIdent⁴ = break_lh_₁(_lh_break_arg1², _lh_break_LH_C_1¹)
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹] | _  => error⁰} | _  => error⁰}: 867
//│ 	case _lh_null_arg1⁴ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁴ _lh_null_LH_C_1⁴ => [False] | _  => error⁰}: 1729
//│ [LH_C h³³ mappend_lh_₄(t³³, ys¹³)]: 1819 --->
//│ 	case xs¹⁶ of {LH_C h³⁶ t³⁶ => [LH_C h³⁶ mappend_lh_₁(t³⁶, ys¹⁶)] | LH_N  => ys¹⁶}: 1857
//│ [LH_C h³⁴ mappend_lh_₃(t³⁴, ys¹⁴)]: 1831 --->
//│ 	case xs¹⁰ of {LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₇(t³⁰, ys¹⁰)] | LH_N  => ys¹⁰}: 1785
//│ [LH_C h³⁵ mappend_lh_₂(t³⁵, ys¹⁵)]: 1843 --->
//│ 	case xs¹⁴ of {LH_C h³⁴ t³⁴ => [LH_C h³⁴ mappend_lh_₃(t³⁴, ys¹⁴)] | LH_N  => ys¹⁴}: 1833
//│ [LH_C h³⁶ mappend_lh_₁(t³⁶, ys¹⁶)]: 1855 --->
//│ 	case xs⁸ of {LH_C h²⁸ t²⁸ => [LH_C h²⁸ mappend_lh_₉(t²⁸, ys⁸)] | LH_N  => ys⁸}: 1740
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_N]: 221
//│ 	[LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 229
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 513
//│ 	[LH_N]: 602
//│ 	[LH_N]: 655
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ 	[LH_C h¹⁹ mappend_lh_₁₀(t¹⁹, ys⁷)]: 957
//│ 	[LH_C f²(h²¹) map_lh_₅(f², t²¹)]: 987
//│ 	[LH_N]: 988
//│ 	[LH_N]: 1652
//│ case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_N]: 221
//│ 	[LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 229
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 429
//│ 	[LH_N]: 513
//│ 	[LH_N]: 514
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_N]: 655
//│ 	[LH_N]: 656
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ 	[LH_C h¹⁹ mappend_lh_₁₀(t¹⁹, ys⁷)]: 957
//│ 	[LH_C f²(h²¹) map_lh_₅(f², t²¹)]: 987
//│ 	[LH_N]: 988
//│ 	[LH_N]: 1652
//│ case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39 --->
//│ 	[LH_N]: 797
//│ 	[LH_N]: 803
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 816
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 1139
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + let x¹ = (optw_lh_₁ - old_width_hd⁰(p⁴))
//│ in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰]: 1161
//│ 	[LH_P3 0 0 0]: 1389
//│ case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 58 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 429
//│ 	[LH_N]: 513
//│ 	[LH_N]: 514
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_N]: 655
//│ 	[LH_N]: 656
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 64 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 513
//│ 	[LH_N]: 602
//│ 	[LH_N]: 655
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 66 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 429
//│ 	[LH_N]: 513
//│ 	[LH_N]: 514
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_N]: 655
//│ 	[LH_N]: 656
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ case ls² of {LH_C h² t² => t² | LH_N  => error⁰}: 71 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 429
//│ 	[LH_N]: 513
//│ 	[LH_N]: 514
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_N]: 655
//│ 	[LH_N]: 656
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ case ls⁴ of {LH_C h³ t³ => h³ | LH_N  => error⁰}: 82 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 429
//│ 	[LH_N]: 513
//│ 	[LH_N]: 514
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_N]: 655
//│ 	[LH_N]: 656
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ case ls⁵ of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 87 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 429
//│ 	[LH_N]: 513
//│ 	[LH_N]: 514
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_N]: 655
//│ 	[LH_N]: 656
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 93 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 429
//│ 	[LH_N]: 513
//│ 	[LH_N]: 514
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_N]: 655
//│ 	[LH_N]: 656
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ case _lh_null_arg1² of {LH_N  => [True] | LH_C _lh_null_LH_C_0² _lh_null_LH_C_1² => [False] | _  => error⁰}: 99 --->
//│ 	[LH_N]: 656
//│ case ls⁶ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 104 --->
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 738
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 747
//│ 	[LH_C [LH_N] [LH_N]]: 759
//│ case ls⁷ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 109 --->
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 738
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 747
//│ 	[LH_C [LH_N] [LH_N]]: 759
//│ case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}: 127 --->
//│ 	[LH_C f⁴(h²⁴) map_lh_₃(f⁴, t²⁴)]: 1537
//│ 	[LH_N]: 1538
//│ case _lh_fold1_arg3⁰ of {LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))} | _  => error⁰}: 129 --->
//│ 	[LH_C f⁴(h²⁴) map_lh_₃(f⁴, t²⁴)]: 1537
//│ 	[LH_N]: 1538
//│ case xs⁰ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₆(t⁷, ys⁰)] | LH_N  => ys⁰}: 142 --->
//│ 	[LH_C h⁸ mappend_lh_₁₅(t⁸, ys¹)]: 174
//│ 	[LH_N]: 900
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 901
//│ case _lh_fold1_LH_C_1¹ of {LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹) | _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))}: 161 --->
//│ 	[LH_C f⁶(h²⁶) map_lh_₁(f⁶, t²⁶)]: 1639
//│ 	[LH_N]: 1640
//│ case _lh_fold1_arg3¹ of {LH_C _lh_fold1_LH_C_0¹ _lh_fold1_LH_C_1¹ => case _lh_fold1_LH_C_1¹ of {LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹) | _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))} | _  => error⁰}: 163 --->
//│ 	[LH_C f⁶(h²⁶) map_lh_₁(f⁶, t²⁶)]: 1639
//│ 	[LH_N]: 1640
//│ case xs¹ of {LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₁₅(t⁸, ys¹)] | LH_N  => ys¹}: 176 --->
//│ 	[LH_N]: 1010
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 1036
//│ case xs² of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄(t⁹, ys²)] | LH_N  => ys²}: 188 --->
//│ 	[LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys⁶)]: 945
//│ 	[LH_N]: 1621
//│ 	[LH_C '|' [LH_N]]: 1622
//│ case ls⁸ of {LH_C h¹⁰ t¹⁰ => h¹⁰ | LH_N  => error⁰}: 194 --->
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 513
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ case ls⁹ of {LH_C h¹¹ t¹¹ => h¹¹ | LH_N  => error⁰}: 199 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 429
//│ 	[LH_N]: 513
//│ 	[LH_N]: 514
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_N]: 655
//│ 	[LH_N]: 656
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ case _lh_null_arg1³ of {LH_N  => [True] | LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False] | _  => error⁰}: 205 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 429
//│ 	[LH_N]: 513
//│ 	[LH_N]: 514
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_N]: 655
//│ 	[LH_N]: 656
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 241 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_N]: 221
//│ 	[LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 229
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 429
//│ 	[LH_N]: 513
//│ 	[LH_N]: 514
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_N]: 655
//│ 	[LH_N]: 656
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ 	[LH_C h¹⁹ mappend_lh_₁₀(t¹⁹, ys⁷)]: 957
//│ 	[LH_C f²(h²¹) map_lh_₅(f², t²¹)]: 987
//│ 	[LH_N]: 988
//│ 	[LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]: 1031
//│ 	[LH_N]: 1652
//│ case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 247 --->
//│ 	[LH_N]: 797
//│ 	[LH_N]: 803
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 816
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 1139
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + let x¹ = (optw_lh_₁ - old_width_hd⁰(p⁴))
//│ in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰]: 1161
//│ 	[LH_P3 0 0 0]: 1389
//│ case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 283 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 429
//│ 	[LH_N]: 513
//│ 	[LH_N]: 514
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_N]: 655
//│ 	[LH_N]: 656
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 285 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 513
//│ 	[LH_N]: 602
//│ 	[LH_N]: 655
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 287 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 326
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 363
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 368
//│ 	[LH_P2 [LH_N] [LH_N]]: 430
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 450
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]: 458
//│ 	[LH_P2 [LH_N] [LH_N]]: 515
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 535
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]: 543
//│ 	[LH_P2 [LH_N] [LH_N]]: 604
//│ 	[LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 624
//│ 	[LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 632
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 668
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 673
//│ case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 294 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 429
//│ 	[LH_N]: 513
//│ 	[LH_N]: 514
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_N]: 655
//│ 	[LH_N]: 656
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 296 --->
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 513
//│ case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 298 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 326
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 363
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 368
//│ 	[LH_P2 [LH_N] [LH_N]]: 430
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 450
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]: 458
//│ 	[LH_P2 [LH_N] [LH_N]]: 515
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 535
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]: 543
//│ case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 329 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 326
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 363
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 368
//│ 	[LH_P2 [LH_N] [LH_N]]: 430
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 450
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]: 458
//│ 	[LH_P2 [LH_N] [LH_N]]: 515
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 535
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]: 543
//│ 	[LH_P2 [LH_N] [LH_N]]: 604
//│ 	[LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 624
//│ 	[LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 632
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 668
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 673
//│ case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 351 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 326
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 363
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 368
//│ 	[LH_P2 [LH_N] [LH_N]]: 430
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 450
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]: 458
//│ 	[LH_P2 [LH_N] [LH_N]]: 515
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 535
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]: 543
//│ 	[LH_P2 [LH_N] [LH_N]]: 604
//│ 	[LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 624
//│ 	[LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 632
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 668
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 673
//│ case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 371 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 326
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 363
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 368
//│ 	[LH_P2 [LH_N] [LH_N]]: 430
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 450
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]: 458
//│ 	[LH_P2 [LH_N] [LH_N]]: 515
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 535
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]: 543
//│ 	[LH_P2 [LH_N] [LH_N]]: 604
//│ 	[LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 624
//│ 	[LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 632
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 668
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 673
//│ case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁰)) then head_lh_₇(_lh_last'_LH_P2_1⁰) else head_lh_₇(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 388 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 326
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 363
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 368
//│ 	[LH_P2 [LH_N] [LH_N]]: 430
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 450
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]: 458
//│ 	[LH_P2 [LH_N] [LH_N]]: 515
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 535
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]: 543
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 668
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 673
//│ case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₅(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₅(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 413 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 326
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 363
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 368
//│ 	[LH_P2 [LH_N] [LH_N]]: 430
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 450
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]: 458
//│ 	[LH_P2 [LH_N] [LH_N]]: 515
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 535
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]: 543
//│ case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰}: 452 --->
//│ 	[LH_P2 take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]: 51
//│ case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₅(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 462 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 326
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 363
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 368
//│ 	[LH_P2 [LH_N] [LH_N]]: 430
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 450
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]: 458
//│ 	[LH_P2 [LH_N] [LH_N]]: 515
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 535
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]: 543
//│ case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1¹)) then head_lh_₇(_lh_last'_LH_P2_1¹) else head_lh_₇(_lh_last'_LH_P2_0¹) | _  => error⁰}: 478 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 430
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 450
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]: 458
//│ case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 503 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 326
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 363
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 368
//│ 	[LH_P2 [LH_N] [LH_N]]: 430
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 450
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]: 458
//│ 	[LH_P2 [LH_N] [LH_N]]: 515
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 535
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]: 543
//│ 	[LH_P2 [LH_N] [LH_N]]: 604
//│ 	[LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 624
//│ 	[LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 632
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 668
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 673
//│ case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰}: 537 --->
//│ 	[LH_P2 take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]: 51
//│ case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₅(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)] | _  => error⁰}: 547 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 326
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 363
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 368
//│ 	[LH_P2 [LH_N] [LH_N]]: 515
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 535
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]: 543
//│ case _lh_last'_arg1² of {LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₅(_lh_last'_LH_P2_1²)) then head_lh_₇(_lh_last'_LH_P2_1²) else head_lh_₇(_lh_last'_LH_P2_0²) | _  => error⁰}: 564 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 326
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 363
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 368
//│ 	[LH_P2 [LH_N] [LH_N]]: 430
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 450
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]: 458
//│ 	[LH_P2 [LH_N] [LH_N]]: 515
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 535
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]: 543
//│ case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 571 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 429
//│ 	[LH_N]: 513
//│ 	[LH_N]: 514
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_N]: 655
//│ 	[LH_N]: 656
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 573 --->
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 513
//│ case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 575 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 326
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 363
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 368
//│ 	[LH_P2 [LH_N] [LH_N]]: 515
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 535
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]: 543
//│ case _lh_head'_arg1¹ of {LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0¹)) then head_lh_₇(_lh_head'_LH_P2_0¹) else head_lh_₇(_lh_head'_LH_P2_1¹) | _  => error⁰}: 595 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 604
//│ 	[LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 624
//│ 	[LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 632
//│ case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰}: 626 --->
//│ 	[LH_P2 take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]: 51
//│ case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 326
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 363
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 368
//│ 	[LH_P2 [LH_N] [LH_N]]: 430
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 450
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]: 458
//│ 	[LH_P2 [LH_N] [LH_N]]: 515
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 535
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]: 543
//│ 	[LH_P2 [LH_N] [LH_N]]: 604
//│ 	[LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 624
//│ 	[LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 632
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 668
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 673
//│ case _lh_last'_arg1³ of {LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₄(_lh_last'_LH_P2_1³)) then head_lh_₆(_lh_last'_LH_P2_1³) else head_lh_₇(_lh_last'_LH_P2_0³) | _  => error⁰}: 652 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 326
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 363
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 368
//│ 	[LH_P2 [LH_N] [LH_N]]: 515
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 535
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]: 543
//│ case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₃(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 676 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 657
//│ case _lh_fold1_LH_C_1² of {LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²) | _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))}: 695 --->
//│ 	[LH_C f³(h²²) map_lh_₄(f³, t²²)]: 1451
//│ 	[LH_N]: 1452
//│ case _lh_fold1_arg3² of {LH_C _lh_fold1_LH_C_0² _lh_fold1_LH_C_1² => case _lh_fold1_LH_C_1² of {LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²) | _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))} | _  => error⁰}: 697 --->
//│ 	[LH_C f³(h²²) map_lh_₄(f³, t²²)]: 1451
//│ 	[LH_N]: 1452
//│ case ls¹⁰ of {LH_C h¹² t¹² => h¹² | LH_N  => error⁰}: 704 --->
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh_₂(s⁰)) s⁰]: 1470
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 1478
//│ case ls¹¹ of {LH_C h¹³ t¹³ => if f⁰(h¹³) then [LH_C h¹³ filter_lh_₁(f⁰, t¹³)] else filter_lh_₁(f⁰, t¹³) | LH_N  => [LH_N]}: 724 --->
//│ 	[LH_N]: 729
//│ 	[LH_C [LH_N] [LH_N]]: 730
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 738
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 747
//│ 	[LH_N]: 758
//│ 	[LH_C [LH_N] [LH_N]]: 759
//│ case _lh_format_arg2⁰ of {LH_N  => [LH_C [LH_N] [LH_N]] | _  => SINGLE_LINE_LET_GROUP_STUB}: 775 --->
//│ 	[LH_C f⁴(h²⁴) map_lh_₃(f⁴, t²⁴)]: 1537
//│ 	[LH_N]: 1538
//│ case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 793 --->
//│ 	[LH_N]: 798
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]: 806
//│ 	[LH_N]: 840
//│ 	[LH_N]: 846
//│ 	[LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹]: 859
//│ case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰}: 820 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 799
//│ 	[LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]]: 807
//│ 	[LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]: 818
//│ case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent³ = break_lh_₂(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 824 --->
//│ 	[LH_N]: 840
//│ 	[LH_N]: 846
//│ 	[LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹]: 859
//│ 	[LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰]: 1513
//│ case _lh_matchIdent⁴ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹] | _  => error⁰}: 863 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 842
//│ 	[LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]]: 850
//│ 	[LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]: 861
//│ case _lh_break_arg2² of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1²(_lh_break_LH_C_0¹) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]] else let _lh_matchIdent⁴ = break_lh_₁(_lh_break_arg1², _lh_break_LH_C_1¹)
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹] | _  => error⁰} | _  => error⁰}: 867 --->
//│ 	NoProd
//│ 	[LH_C h³² mappend_lh_₅(t³², ys¹²)]: 1807
//│ case xs³ of {LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₁₃(t¹⁴, ys³)] | LH_N  => ys³}: 879 --->
//│ 	[LH_N]: 797
//│ 	[LH_N]: 803
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 816
//│ case xs⁴ of {LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₁₂(t¹⁵, ys⁴)] | LH_N  => ys⁴}: 891 --->
//│ 	[LH_N]: 797
//│ 	[LH_N]: 803
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 816
//│ case lss⁰ of {LH_C h¹⁶ t¹⁶ => mappend_lh_₁₄(h¹⁶, concat_lh_₂(t¹⁶)) | LH_N  => [LH_N]}: 922 --->
//│ 	[LH_C f¹(h¹⁷) map_lh_₆(f¹, t¹⁷)]: 933
//│ 	[LH_N]: 934
//│ case ls¹² of {LH_C h¹⁷ t¹⁷ => [LH_C f¹(h¹⁷) map_lh_₆(f¹, t¹⁷)] | LH_N  => [LH_N]}: 935 --->
//│ 	[LH_C f⁵(h²⁵) map_lh_₂(f⁵, t²⁵)]: 1577
//│ 	[LH_N]: 1578
//│ case xs⁶ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys⁶)] | LH_N  => ys⁶}: 947 --->
//│ 	[LH_C h¹⁴ mappend_lh_₁₃(t¹⁴, ys³)]: 877
//│ 	[LH_C h¹⁵ mappend_lh_₁₂(t¹⁵, ys⁴)]: 889
//│ 	[LH_N]: 1583
//│ 	[LH_N]: 1585
//│ 	[LH_C ' ' mappend_lh_₁₂(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 1594
//│ case xs⁷ of {LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₁₀(t¹⁹, ys⁷)] | LH_N  => ys⁷}: 959 --->
//│ 	[LH_N]: 1507
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)]: 1520
//│ case _lh_thd3_arg1¹ of {LH_P3 _lh_thd3_LH_P3_0¹ _lh_thd3_LH_P3_1¹ _lh_thd3_LH_P3_2¹ => _lh_thd3_LH_P3_2¹ | _  => error⁰}: 965 --->
//│ 	[LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₅(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 1364
//│ 	[LH_P3 cons'_lh_₁([LH_P3 0 0 0], nil'_lh_₁) _lh_startr_arg1⁰ 1]: 1395
//│ case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 976 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 76
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 319
//│ 	[LH_N]: 323
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 324
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 361
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 366
//│ 	[LH_N]: 428
//│ 	[LH_N]: 429
//│ 	[LH_N]: 513
//│ 	[LH_N]: 514
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_N]: 655
//│ 	[LH_N]: 656
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 666
//│ 	[LH_N]: 670
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 671
//│ 	[LH_N]: 797
//│ 	[LH_N]: 803
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 816
//│ case ls¹⁴ of {LH_C h²¹ t²¹ => [LH_C f²(h²¹) map_lh_₅(f², t²¹)] | LH_N  => [LH_N]}: 989 --->
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh_₂(s⁰)) s⁰]: 1470
//│ 	[LH_N]: 1477
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 1478
//│ case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 1006 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 326
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 363
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 368
//│ 	[LH_P2 [LH_N] [LH_N]]: 430
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 450
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]: 458
//│ 	[LH_P2 [LH_N] [LH_N]]: 515
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 535
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]: 543
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 668
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 673
//│ case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰}: 1038 --->
//│ 	[LH_P2 take_lh_₁(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹) drop_lh_₁(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹)]: 217
//│ case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰}: 1042 --->
//│ 	[LH_N]: 221
//│ 	[LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 229
//│ 	[LH_C f²(h²¹) map_lh_₅(f², t²¹)]: 987
//│ 	[LH_N]: 988
//│ case _lh_tile_arg2⁰ of {LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰} | _  => error⁰}: 1044 --->
//│ 	[LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰]: 1034
//│ 	[LH_P2 map_lh_₅((fun _lh_funcomp_x¹ -> (fun _lh_funcomp_x² -> len_tl_lh_₁(last'_lh_₁(_lh_funcomp_x²)))(fst3_lh_₁(_lh_funcomp_x¹))), zs⁰) thd3_lh_₁(head_lh_₁(zs⁰))]: 1689
//│ case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh_₂(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh_₁(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh_₃(p²) + let a¹ = (optw_lh_₃ - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh_₂(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + let x¹ = (optw_lh_₁ - old_width_hd⁰(p⁴))
//│ in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh_₂(ps_pq⁰) then ps_pq⁰ else if single'_lh_₂(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh_₂(ps_pq⁰)
//│ in let q⁰ = last'_lh_₃(ps_pq⁰)
//│ in let p⁵ = last'_lh_₄(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh_₁(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh_₂(ps_p¹)) > maxw_lh_₃) then drop_nofit⁰(init'_lh_₁(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh_₂ - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh_₁(p⁶) == 0)) then min_lh_₂((optw_lh_₂ - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh_₁(ceildiv_lh_₁((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh_₁(qr_rs⁰) || null'_lh_₃(qr_rs⁰)) then cons'_lh_₃(p⁷, qr_rs⁰) else let q² = head'_lh_₂(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh_₁(qr_rs⁰)
//│ in let r⁰ = head'_lh_₁(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh_₂(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₅(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 1377 --->
//│ 	[LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₅(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 1364
//│ 	[LH_P3 cons'_lh_₁([LH_P3 0 0 0], nil'_lh_₁) _lh_startr_arg1⁰ 1]: 1395
//│ case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 1440 --->
//│ 	[LH_N]: 797
//│ 	[LH_N]: 803
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 816
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 1139
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + let x¹ = (optw_lh_₁ - old_width_hd⁰(p⁴))
//│ in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰]: 1161
//│ 	[LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₅(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 1364
//│ 	[LH_P3 0 0 0]: 1389
//│ 	[LH_P3 cons'_lh_₁([LH_P3 0 0 0], nil'_lh_₁) _lh_startr_arg1⁰ 1]: 1395
//│ case ls¹⁵ of {LH_C h²² t²² => [LH_C f³(h²²) map_lh_₄(f³, t²²)] | LH_N  => [LH_N]}: 1453 --->
//│ 	[LH_C h¹⁹ mappend_lh_₁₀(t¹⁹, ys⁷)]: 957
//│ 	[LH_N]: 1652
//│ case ls¹⁶ of {LH_C h²³ t²³ => h²³ | LH_N  => error⁰}: 1459 --->
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh_₂(s⁰)) s⁰]: 1470
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 1478
//│ case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰}: 1522 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 799
//│ 	[LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]]: 807
//│ 	[LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]: 818
//│ case _lh_matchIdent⁶ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁷ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 1525 --->
//│ 	[LH_N]: 779
//│ 	[LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]: 790
//│ case ls¹⁷ of {LH_C h²⁴ t²⁴ => [LH_C f⁴(h²⁴) map_lh_₃(f⁴, t²⁴)] | LH_N  => [LH_N]}: 1539 --->
//│ 	[LH_N]: 1556
//│ 	[LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}]: 1563
//│ case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1561 --->
//│ 	[LH_N]: 841
//│ 	[LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]: 849
//│ case _lh_matchIdent⁸ of {LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}] | _  => error⁰}: 1565 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 842
//│ 	[LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]]: 850
//│ 	[LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]: 861
//│ case ls¹⁸ of {LH_C h²⁵ t²⁵ => [LH_C f⁵(h²⁵) map_lh_₂(f⁵, t²⁵)] | LH_N  => [LH_N]}: 1579 --->
//│ 	[LH_C h⁷ mappend_lh_₁₆(t⁷, ys⁰)]: 140
//│ 	[LH_N]: 1010
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 1036
//│ case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₁₂(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 1596 --->
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₁₂(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh_₁₃(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 1607 --->
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 1610
//│ case ls¹⁹ of {LH_C h²⁶ t²⁶ => [LH_C f⁶(h²⁶) map_lh_₁(f⁶, t²⁶)] | LH_N  => [LH_N]}: 1641 --->
//│ 	[LH_C h¹³ filter_lh_₁(f⁰, t¹³)]: 716
//│ 	[LH_N]: 723
//│ case lss¹ of {LH_C h²⁷ t²⁷ => mappend_lh_₁₀(h²⁷, concat_lh_₁(t²⁷)) | LH_N  => [LH_N]}: 1653 --->
//│ 	[LH_N]: 728
//│ 	[LH_N]: 736
//│ 	[LH_C _lh_break_arg2⁰ head_lh_₅(_lh_break_arg3⁰)]: 743
//│ 	[LH_N]: 757
//│ case _lh_null_arg1⁴ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁴ _lh_null_LH_C_1⁴ => [False] | _  => error⁰}: 1729 --->
//│ 	NoProd
//│ 	[LH_C h³² mappend_lh_₅(t³², ys¹²)]: 1807
//│ case xs⁸ of {LH_C h²⁸ t²⁸ => [LH_C h²⁸ mappend_lh_₉(t²⁸, ys⁸)] | LH_N  => ys⁸}: 1740 --->
//│ 	NoProd
//│ 	[LH_C h³⁶ mappend_lh_₁(t³⁶, ys¹⁶)]: 1855
//│ case xs⁹ of {LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₈(t²⁹, ys⁹)] | LH_N  => ys⁹}: 1752 --->
//│ 	NoProd
//│ 	[LH_C h²⁸ mappend_lh_₉(t²⁸, ys⁸)]: 1738
//│ case xs¹⁰ of {LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₇(t³⁰, ys¹⁰)] | LH_N  => ys¹⁰}: 1785 --->
//│ 	NoProd
//│ 	[LH_C h³⁴ mappend_lh_₃(t³⁴, ys¹⁴)]: 1831
//│ case xs¹¹ of {LH_C h³¹ t³¹ => [LH_C h³¹ mappend_lh_₆(t³¹, ys¹¹)] | LH_N  => ys¹¹}: 1797 --->
//│ 	NoProd
//│ 	[LH_C h³⁰ mappend_lh_₇(t³⁰, ys¹⁰)]: 1783
//│ case xs¹² of {LH_C h³² t³² => [LH_C h³² mappend_lh_₅(t³², ys¹²)] | LH_N  => ys¹²}: 1809 --->
//│ 	NoProd
//│ 	[LH_C h³¹ mappend_lh_₆(t³¹, ys¹¹)]: 1795
//│ case xs¹⁴ of {LH_C h³⁴ t³⁴ => [LH_C h³⁴ mappend_lh_₃(t³⁴, ys¹⁴)] | LH_N  => ys¹⁴}: 1833 --->
//│ 	NoProd
//│ 	[LH_C h³⁵ mappend_lh_₂(t³⁵, ys¹⁵)]: 1843
//│ case xs¹⁵ of {LH_C h³⁵ t³⁵ => [LH_C h³⁵ mappend_lh_₂(t³⁵, ys¹⁵)] | LH_N  => ys¹⁵}: 1845 --->
//│ 	NoProd
//│ 	[LH_C h²⁹ mappend_lh_₈(t²⁹, ys⁹)]: 1750
//│ case xs¹⁶ of {LH_C h³⁶ t³⁶ => [LH_C h³⁶ mappend_lh_₁(t³⁶, ys¹⁶)] | LH_N  => ys¹⁶}: 1857 --->
//│ 	NoProd
//│ 	[LH_C h³³ mappend_lh_₄(t³³, ys¹³)]: 1819
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C h⁸ mappend_lh_₁₅(t⁸, ys¹)]: 174 --->
//│ 	case xs⁰ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₆(t⁷, ys⁰)] | LH_N  => ys⁰}: 142
//│ [LH_P2 take_lh_₁(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹) drop_lh_₁(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹)]: 217 --->
//│ 	case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰}: 1038
//│ [LH_P2 [LH_N] [LH_N]]: 657 --->
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₃(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 676
//│ [LH_C h¹³ filter_lh_₁(f⁰, t¹³)]: 716 --->
//│ 	case ls¹⁹ of {LH_C h²⁶ t²⁶ => [LH_C f⁶(h²⁶) map_lh_₁(f⁶, t²⁶)] | LH_N  => [LH_N]}: 1641
//│ [LH_N]: 723 --->
//│ 	case ls¹⁹ of {LH_C h²⁶ t²⁶ => [LH_C f⁶(h²⁶) map_lh_₁(f⁶, t²⁶)] | LH_N  => [LH_N]}: 1641
//│ [LH_N]: 779 --->
//│ 	case _lh_matchIdent⁶ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁷ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 1525
//│ [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]: 790 --->
//│ 	case _lh_matchIdent⁶ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁷ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 1525
//│ [LH_N]: 841 --->
//│ 	case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1561
//│ [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]: 849 --->
//│ 	case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1561
//│ [LH_C h¹⁴ mappend_lh_₁₃(t¹⁴, ys³)]: 877 --->
//│ 	case xs⁶ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys⁶)] | LH_N  => ys⁶}: 947
//│ [LH_C h¹⁵ mappend_lh_₁₂(t¹⁵, ys⁴)]: 889 --->
//│ 	case xs⁶ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys⁶)] | LH_N  => ys⁶}: 947
//│ [LH_N]: 900 --->
//│ 	case xs⁰ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₆(t⁷, ys⁰)] | LH_N  => ys⁰}: 142
//│ [LH_C _lh_unformat_arg1⁰ [LH_N]]: 901 --->
//│ 	case xs⁰ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₆(t⁷, ys⁰)] | LH_N  => ys⁰}: 142
//│ [LH_C f¹(h¹⁷) map_lh_₆(f¹, t¹⁷)]: 933 --->
//│ 	case lss⁰ of {LH_C h¹⁶ t¹⁶ => mappend_lh_₁₄(h¹⁶, concat_lh_₂(t¹⁶)) | LH_N  => [LH_N]}: 922
//│ [LH_N]: 934 --->
//│ 	case lss⁰ of {LH_C h¹⁶ t¹⁶ => mappend_lh_₁₄(h¹⁶, concat_lh_₂(t¹⁶)) | LH_N  => [LH_N]}: 922
//│ [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys⁶)]: 945 --->
//│ 	case xs² of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄(t⁹, ys²)] | LH_N  => ys²}: 188
//│ [LH_N]: 1556 --->
//│ 	case ls¹⁷ of {LH_C h²⁴ t²⁴ => [LH_C f⁴(h²⁴) map_lh_₃(f⁴, t²⁴)] | LH_N  => [LH_N]}: 1539
//│ [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}]: 1563 --->
//│ 	case ls¹⁷ of {LH_C h²⁴ t²⁴ => [LH_C f⁴(h²⁴) map_lh_₃(f⁴, t²⁴)] | LH_N  => [LH_N]}: 1539
//│ [LH_C f⁵(h²⁵) map_lh_₂(f⁵, t²⁵)]: 1577 --->
//│ 	case ls¹² of {LH_C h¹⁷ t¹⁷ => [LH_C f¹(h¹⁷) map_lh_₆(f¹, t¹⁷)] | LH_N  => [LH_N]}: 935
//│ [LH_N]: 1578 --->
//│ 	case ls¹² of {LH_C h¹⁷ t¹⁷ => [LH_C f¹(h¹⁷) map_lh_₆(f¹, t¹⁷)] | LH_N  => [LH_N]}: 935
//│ [LH_N]: 1583 --->
//│ 	case xs⁶ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys⁶)] | LH_N  => ys⁶}: 947
//│ [LH_N]: 1585 --->
//│ 	case xs⁶ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys⁶)] | LH_N  => ys⁶}: 947
//│ [LH_C ' ' mappend_lh_₁₂(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 1594 --->
//│ 	case xs⁶ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys⁶)] | LH_N  => ys⁶}: 947
//│ [LH_N]: 1621 --->
//│ 	case xs² of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄(t⁹, ys²)] | LH_N  => ys²}: 188
//│ [LH_C '|' [LH_N]]: 1622 --->
//│ 	case xs² of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄(t⁹, ys²)] | LH_N  => ys²}: 188
//│ ------------------
//│ case xs⁰ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₆(t⁷, ys⁰)] | LH_N  => ys⁰}: 142 --->
//│ 	[LH_C h⁸ mappend_lh_₁₅(t⁸, ys¹)]: 174
//│ 	[LH_N]: 900
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 901
//│ case xs² of {LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₄(t⁹, ys²)] | LH_N  => ys²}: 188 --->
//│ 	[LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys⁶)]: 945
//│ 	[LH_N]: 1621
//│ 	[LH_C '|' [LH_N]]: 1622
//│ case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₃(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 676 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 657
//│ case lss⁰ of {LH_C h¹⁶ t¹⁶ => mappend_lh_₁₄(h¹⁶, concat_lh_₂(t¹⁶)) | LH_N  => [LH_N]}: 922 --->
//│ 	[LH_C f¹(h¹⁷) map_lh_₆(f¹, t¹⁷)]: 933
//│ 	[LH_N]: 934
//│ case ls¹² of {LH_C h¹⁷ t¹⁷ => [LH_C f¹(h¹⁷) map_lh_₆(f¹, t¹⁷)] | LH_N  => [LH_N]}: 935 --->
//│ 	[LH_C f⁵(h²⁵) map_lh_₂(f⁵, t²⁵)]: 1577
//│ 	[LH_N]: 1578
//│ case xs⁶ of {LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₁₁(t¹⁸, ys⁶)] | LH_N  => ys⁶}: 947 --->
//│ 	[LH_C h¹⁴ mappend_lh_₁₃(t¹⁴, ys³)]: 877
//│ 	[LH_C h¹⁵ mappend_lh_₁₂(t¹⁵, ys⁴)]: 889
//│ 	[LH_N]: 1583
//│ 	[LH_N]: 1585
//│ 	[LH_C ' ' mappend_lh_₁₂(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 1594
//│ case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰}: 1038 --->
//│ 	[LH_P2 take_lh_₁(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹) drop_lh_₁(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹)]: 217
//│ case _lh_matchIdent⁶ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁷ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 1525 --->
//│ 	[LH_N]: 779
//│ 	[LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]: 790
//│ case ls¹⁷ of {LH_C h²⁴ t²⁴ => [LH_C f⁴(h²⁴) map_lh_₃(f⁴, t²⁴)] | LH_N  => [LH_N]}: 1539 --->
//│ 	[LH_N]: 1556
//│ 	[LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}]: 1563
//│ case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1561 --->
//│ 	[LH_N]: 841
//│ 	[LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]: 849
//│ case ls¹⁹ of {LH_C h²⁶ t²⁶ => [LH_C f⁶(h²⁶) map_lh_₁(f⁶, t²⁶)] | LH_N  => [LH_N]}: 1641 --->
//│ 	[LH_C h¹³ filter_lh_₁(f⁰, t¹³)]: 716
//│ 	[LH_N]: 723
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testPara_nofib_lh_₁(primId⁰(0))
//│ def break_lh_₁(_lh_break_arg1⁵, _lh_break_arg2⁵) = case _lh_break_arg2⁵ of {
//│ 	LH_N  => [LH_P2 [LH_N] (fun _lh_dummy⁴ -> (fun f¹⁵ -> [LH_N]))]
//│ 	| LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1⁵(_lh_break_LH_C_0¹) then [LH_P2 [LH_N] 
//│ 		let _lh_lines_LH_C_1¹ = _lh_break_LH_C_1¹
//│ 		in let _lh_lines_LH_C_0¹ = _lh_break_LH_C_0¹
//│ 		in (fun _lh_dummy⁵ -> lines_lh_₁(_lh_lines_LH_C_1¹))] else 
//│ 		let _lh_matchIdent¹⁸ = break_lh_₁(_lh_break_arg1⁵, _lh_break_LH_C_1¹)
//│ 		in case _lh_matchIdent¹⁸ of {
//│ 			LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def break_lh_₂(_lh_break_arg1³, _lh_break_arg2³) = case _lh_break_arg2³ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1³(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else 
//│ 		let _lh_matchIdent¹² = break_lh_₂(_lh_break_arg1³, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent¹² of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def ceildiv_lh_₁(_lh_ceildiv_arg1¹, _lh_ceildiv_arg2¹) = div⁰(((_lh_ceildiv_arg1¹ + _lh_ceildiv_arg2¹) - 1), _lh_ceildiv_arg2¹)
//│ def concat_lh_₁(lss³) = case lss³ of {
//│ 	LH_C h²⁷ t²⁷ => mappend_lh_₁₀(h²⁷, concat_lh_₁(t²⁷))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₂(lss²) = lss²(99)
//│ def cons'_lh_₁(_lh_cons'_arg1⁵, _lh_cons'_arg2⁵) = _lh_cons'_arg2⁵(_lh_cons'_arg1⁵)
//│ def cons'_lh_₂(_lh_cons'_arg1³, _lh_cons'_arg2³) = case _lh_cons'_arg2³ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1³ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1³ [LH_N]] _lh_cons'_LH_P2_0¹]
//│ 	| _  => error⁰}
//│ def cons'_lh_₃(_lh_cons'_arg1⁴, _lh_cons'_arg2⁴) = case _lh_cons'_arg2⁴ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁴ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁴ [LH_N]] _lh_cons'_LH_P2_0⁰]
//│ 	| _  => error⁰}
//│ def cost_tl_lh_₁(_lh_cost_tl_arg1⁵) = snd3_lh_₁(_lh_cost_tl_arg1⁵)
//│ def cost_tl_lh_₂(_lh_cost_tl_arg1³) = snd3_lh_₁(_lh_cost_tl_arg1³)
//│ def cost_tl_lh_₃(_lh_cost_tl_arg1⁴) = snd3_lh_₁(_lh_cost_tl_arg1⁴)
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1¹, _lh_dropWhile_arg2¹) = case _lh_dropWhile_arg2¹ of {
//│ 	LH_N  => (fun _lh_dummy⁰ -> [LH_N])
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1¹(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1¹, _lh_dropWhile_LH_C_1⁰) else 
//│ 		let _lh_words_LH_C_1¹ = _lh_dropWhile_LH_C_1⁰
//│ 		in let _lh_words_LH_C_0¹ = _lh_dropWhile_LH_C_0⁰
//│ 		in (fun _lh_dummy¹ -> 
//│ 			let _lh_matchIdent¹⁶ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0¹ _lh_words_LH_C_1¹])
//│ 			in case _lh_matchIdent¹⁶ of {
//│ 				LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)]
//│ 				| _  => error⁰})
//│ 	| _  => error⁰}
//│ def drop_lh_₁(_lh_drop_arg1¹, _lh_drop_arg2¹) = case _lh_drop_arg2¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1¹ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1¹ - 1), _lh_drop_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def filter_lh_₁(f¹⁷, ls³⁵) = case ls³⁵ of {
//│ 	LH_C h¹³ t¹³ => if f¹⁷(h¹³) then 
//│ 		let t⁴⁶ = filter_lh_₁(f¹⁷, t¹³)
//│ 		in let h⁴⁶ = h¹³
//│ 		in (fun f¹⁸ -> [LH_C f¹⁸(h⁴⁶) map_lh_₁(f¹⁸, t⁴⁶)]) else filter_lh_₁(f¹⁷, t¹³)
//│ 	| LH_N  => (fun f¹⁹ -> [LH_N])}
//│ def fmt_lh_₁(_lh_fmt_arg1¹) = (fun _lh_funcomp_x¹³ -> (fun _lh_funcomp_x¹⁴ -> unparse_lh_₁(map_lh_₁((fun _lh_funcomp_x¹⁵ -> par3_lh_₁(concat_lh_₁(_lh_funcomp_x¹⁵))), _lh_funcomp_x¹⁴)))(parse_lh_₁(_lh_funcomp_x¹³)))(_lh_fmt_arg1¹)
//│ def fold1_lh_₁(_lh_fold1_arg1⁵, _lh_fold1_arg2⁵, _lh_fold1_arg3⁵) = case _lh_fold1_arg3⁵ of {
//│ 	LH_C _lh_fold1_LH_C_0² _lh_fold1_LH_C_1² => case _lh_fold1_LH_C_1² of {
//│ 		LH_N  => _lh_fold1_arg2⁵(_lh_fold1_LH_C_0²)
//│ 		| _  => _lh_fold1_arg1⁵(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1⁵, _lh_fold1_arg2⁵, _lh_fold1_LH_C_1²))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₂(_lh_fold1_arg1⁴, _lh_fold1_arg2⁴, _lh_fold1_arg3⁴) = case _lh_fold1_arg3⁴ of {
//│ 	LH_C _lh_fold1_LH_C_0¹ _lh_fold1_LH_C_1¹ => case _lh_fold1_LH_C_1¹ of {
//│ 		LH_N  => _lh_fold1_arg2⁴(_lh_fold1_LH_C_0¹)
//│ 		| _  => _lh_fold1_arg1⁴(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1⁴, _lh_fold1_arg2⁴, _lh_fold1_LH_C_1¹))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₃(_lh_fold1_arg1³, _lh_fold1_arg2³, _lh_fold1_arg3³) = case _lh_fold1_arg3³ of {
//│ 	LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {
//│ 		LH_N  => _lh_fold1_arg2³(_lh_fold1_LH_C_0⁰)
//│ 		| _  => _lh_fold1_arg1³(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1³, _lh_fold1_arg2³, _lh_fold1_LH_C_1⁰))}
//│ 	| _  => error⁰}
//│ def format_lh_₁(_lh_format_arg1¹, _lh_format_arg2¹) = case _lh_format_arg2¹ of {
//│ 	LH_N  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let break¹ = (fun _lh_break_arg1⁴ -> (fun _lh_break_arg2⁴ -> (fun _lh_break_arg3¹ -> if polyEq⁰(_lh_break_arg1⁴, _lh_break_arg2⁴) then [LH_C [LH_N] _lh_break_arg3¹] else [LH_C [LH_C _lh_break_arg2⁴ head_lh_₅(_lh_break_arg3¹)] tail_lh_₁(_lh_break_arg3¹)])))
//│ 		and start¹ = (fun _lh_start_arg1¹ -> (fun _lh_start_arg2¹ -> break¹(_lh_start_arg1¹, _lh_start_arg2¹, [LH_C [LH_N] [LH_N]]))) 
//│ 		in fold1_lh_₃(break¹(_lh_format_arg1¹), start¹(_lh_format_arg1¹), _lh_format_arg2¹)}
//│ def fst3_lh_₁(_lh_fst3_arg1¹) = case _lh_fst3_arg1¹ of {
//│ 	LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰
//│ 	| _  => error⁰}
//│ def head'_lh_₁(_lh_head'_arg1²) = case _lh_head'_arg1² of {
//│ 	LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0¹)) then head_lh_₇(_lh_head'_LH_P2_0¹) else head_lh_₇(_lh_head'_LH_P2_1¹)
//│ 	| _  => error⁰}
//│ def head'_lh_₂(_lh_head'_arg1³) = case _lh_head'_arg1³ of {
//│ 	LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰)
//│ 	| _  => error⁰}
//│ def head_lh_₁(ls³⁷) = case ls³⁷ of {
//│ 	LH_C h²³ t²³ => h²³
//│ 	| LH_N  => error⁰}
//│ def head_lh_₂(ls²¹) = case ls²¹ of {
//│ 	LH_C h¹² t¹² => h¹²
//│ 	| LH_N  => error⁰}
//│ def head_lh_₃(ls³⁶) = case ls³⁶ of {
//│ 	LH_C h¹¹ t¹¹ => h¹¹
//│ 	| LH_N  => error⁰}
//│ def head_lh_₄(ls²⁶) = case ls²⁶ of {
//│ 	LH_C h¹⁰ t¹⁰ => h¹⁰
//│ 	| LH_N  => error⁰}
//│ def head_lh_₅(ls²³) = case ls²³ of {
//│ 	LH_C h⁶ t⁶ => h⁶
//│ 	| LH_N  => error⁰}
//│ def head_lh_₆(ls³⁰) = case ls³⁰ of {
//│ 	LH_C h⁴ t⁴ => h⁴
//│ 	| LH_N  => error⁰}
//│ def head_lh_₇(ls³⁹) = case ls³⁹ of {
//│ 	LH_C h³ t³ => h³
//│ 	| LH_N  => error⁰}
//│ def init'_lh_₁(_lh_init'_arg1³) = case _lh_init'_arg1³ of {
//│ 	LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₅(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then 
//│ 		let _lh_matchIdent¹⁷ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ 		in case _lh_matchIdent¹⁷ of {
//│ 			LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]
//│ 	| _  => error⁰}
//│ def init'_lh_₂(_lh_init'_arg1²) = case _lh_init'_arg1² of {
//│ 	LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₅(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then 
//│ 		let _lh_matchIdent¹⁰ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ 		in case _lh_matchIdent¹⁰ of {
//│ 			LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]
//│ 	| _  => error⁰}
//│ def isSpace_lh_₁(_lh_isSpace_arg1²) = polyEq⁰(_lh_isSpace_arg1², ' ')
//│ def isSpace_lh_₂(_lh_isSpace_arg1³) = polyEq⁰(_lh_isSpace_arg1³, ' ')
//│ def last'_lh_₁(_lh_last'_arg1⁷) = case _lh_last'_arg1⁷ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴)
//│ 	| _  => error⁰}
//│ def last'_lh_₂(_lh_last'_arg1⁸) = case _lh_last'_arg1⁸ of {
//│ 	LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₄(_lh_last'_LH_P2_1³)) then head_lh_₆(_lh_last'_LH_P2_1³) else head_lh_₇(_lh_last'_LH_P2_0³)
//│ 	| _  => error⁰}
//│ def last'_lh_₃(_lh_last'_arg1⁶) = case _lh_last'_arg1⁶ of {
//│ 	LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₅(_lh_last'_LH_P2_1²)) then head_lh_₇(_lh_last'_LH_P2_1²) else head_lh_₇(_lh_last'_LH_P2_0²)
//│ 	| _  => error⁰}
//│ def last'_lh_₄(_lh_last'_arg1⁵) = case _lh_last'_arg1⁵ of {
//│ 	LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1¹)) then head_lh_₇(_lh_last'_LH_P2_1¹) else head_lh_₇(_lh_last'_LH_P2_0¹)
//│ 	| _  => error⁰}
//│ def last'_lh_₅(_lh_last'_arg1⁹) = case _lh_last'_arg1⁹ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁰)) then head_lh_₇(_lh_last'_LH_P2_1⁰) else head_lh_₇(_lh_last'_LH_P2_0⁰)
//│ 	| _  => error⁰}
//│ def len_tl_lh_₁(_lh_len_tl_arg1³) = thd3_lh_₂(_lh_len_tl_arg1³)
//│ def len_tl_lh_₂(_lh_len_tl_arg1²) = thd3_lh_₂(_lh_len_tl_arg1²)
//│ def length_lh_₁(ls³³) = case ls³³ of {
//│ 	LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰))
//│ 	| LH_N  => 0}
//│ def lines_lh_₁(_lh_lines_arg1¹) = 
//│ 	let _lh_matchIdent¹⁴ = break_lh_₁((fun x⁵ -> polyEq⁰(x⁵, '|')), _lh_lines_arg1¹)
//│ 	in case _lh_matchIdent¹⁴ of {
//│ 		LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => 
//│ 			let t³⁹ = 	
//│ 				let _lh_matchIdent¹⁵ = _lh_lines_LH_P2_1⁰
//│ 				in _lh_matchIdent¹⁵(99)
//│ 			in let h³⁹ = _lh_lines_LH_P2_0⁰
//│ 			in (fun f⁸ -> [LH_C f⁸(h³⁹) map_lh_₃(f⁸, t³⁹)])
//│ 		| _  => error⁰}
//│ def map_lh_₁(f¹³, ls³¹) = ls³¹(f¹³)
//│ def map_lh_₂(f¹⁰, ls²⁷) = case ls²⁷ of {
//│ 	LH_C h²⁵ t²⁵ => 
//│ 		let t⁴⁰ = map_lh_₂(f¹⁰, t²⁵)
//│ 		in let h⁴⁰ = f¹⁰(h²⁵)
//│ 		in (fun f¹¹ -> 
//│ 			let t⁴¹ = map_lh_₆(f¹¹, t⁴⁰)
//│ 			in let h⁴¹ = f¹¹(h⁴⁰)
//│ 			in (fun _lh_dummy² -> mappend_lh_₁₄(h⁴¹, concat_lh_₂(t⁴¹))))
//│ 	| LH_N  => (fun f¹² -> (fun _lh_dummy³ -> [LH_N]))}
//│ def map_lh_₃(f¹⁶, ls³⁴) = ls³⁴(f¹⁶)
//│ def map_lh_₄(f⁷, ls²⁰) = case ls²⁰ of {
//│ 	LH_C h²² t²² => [LH_C f⁷(h²²) map_lh_₄(f⁷, t²²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f¹⁴, ls³²) = case ls³² of {
//│ 	LH_C h²¹ t²¹ => [LH_C f¹⁴(h²¹) map_lh_₅(f¹⁴, t²¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f⁹, ls²⁴) = ls²⁴(f⁹)
//│ def mappend_lh_₁(xs²⁰, ys²⁴) = case xs²⁰ of {
//│ 	LH_C h³⁶ t³⁶ => [LH_C h³⁶ mappend_lh_₁(t³⁶, ys²⁴)]
//│ 	| LH_N  => ys²⁴}
//│ def mappend_lh_₁₀(xs²¹, ys²⁵) = case xs²¹ of {
//│ 	LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₁₀(t¹⁹, ys²⁵)]
//│ 	| LH_N  => ys²⁵}
//│ def mappend_lh_₁₁(xs²⁷, ys³¹) = xs²⁷(ys³¹)
//│ def mappend_lh_₁₂(xs³³, ys⁴²) = case xs³³ of {
//│ 	LH_C h¹⁵ t¹⁵ => 
//│ 		let t⁴⁷ = mappend_lh_₁₂(t¹⁵, ys⁴²)
//│ 		in let h⁴⁷ = h¹⁵
//│ 		in (fun ys⁴³ -> 
//│ 			let t⁴⁸ = mappend_lh_₁₁(t⁴⁷, ys⁴³)
//│ 			in let h⁴⁸ = h⁴⁷
//│ 			in (fun ys⁴⁴ -> [LH_C h⁴⁸ mappend_lh_₁₄(t⁴⁸, ys⁴⁴)]))
//│ 	| LH_N  => ys⁴²}
//│ def mappend_lh_₁₃(xs³⁰, ys³⁶) = case xs³⁰ of {
//│ 	LH_C h¹⁴ t¹⁴ => 
//│ 		let t⁴³ = mappend_lh_₁₃(t¹⁴, ys³⁶)
//│ 		in let h⁴³ = h¹⁴
//│ 		in (fun ys³⁷ -> 
//│ 			let t⁴⁴ = mappend_lh_₁₁(t⁴³, ys³⁷)
//│ 			in let h⁴⁴ = h⁴³
//│ 			in (fun ys³⁸ -> [LH_C h⁴⁴ mappend_lh_₁₄(t⁴⁴, ys³⁸)]))
//│ 	| LH_N  => ys³⁶}
//│ def mappend_lh_₁₄(xs²⁵, ys²⁹) = xs²⁵(ys²⁹)
//│ def mappend_lh_₁₅(xs³², ys⁴⁰) = case xs³² of {
//│ 	LH_C h⁸ t⁸ => 
//│ 		let t⁴⁵ = mappend_lh_₁₅(t⁸, ys⁴⁰)
//│ 		in let h⁴⁵ = h⁸
//│ 		in (fun ys⁴¹ -> [LH_C h⁴⁵ mappend_lh_₁₆(t⁴⁵, ys⁴¹)])
//│ 	| LH_N  => ys⁴⁰}
//│ def mappend_lh_₁₆(xs¹⁸, ys¹⁸) = xs¹⁸(ys¹⁸)
//│ def mappend_lh_₂(xs²³, ys²⁷) = case xs²³ of {
//│ 	LH_C h³⁵ t³⁵ => [LH_C h³⁵ mappend_lh_₂(t³⁵, ys²⁷)]
//│ 	| LH_N  => ys²⁷}
//│ def mappend_lh_₃(xs¹⁹, ys²³) = case xs¹⁹ of {
//│ 	LH_C h³⁴ t³⁴ => [LH_C h³⁴ mappend_lh_₃(t³⁴, ys²³)]
//│ 	| LH_N  => ys²³}
//│ def mappend_lh_₄(xs²⁸, ys³²) = case xs²⁸ of {
//│ 	LH_C h³³ t³³ => [LH_C h³³ mappend_lh_₄(t³³, ys³²)]
//│ 	| LH_N  => ys³²}
//│ def mappend_lh_₅(xs²⁴, ys²⁸) = case xs²⁴ of {
//│ 	LH_C h³² t³² => [LH_C h³² mappend_lh_₅(t³², ys²⁸)]
//│ 	| LH_N  => ys²⁸}
//│ def mappend_lh_₆(xs²⁶, ys³⁰) = case xs²⁶ of {
//│ 	LH_C h³¹ t³¹ => [LH_C h³¹ mappend_lh_₆(t³¹, ys³⁰)]
//│ 	| LH_N  => ys³⁰}
//│ def mappend_lh_₇(xs²², ys²⁶) = case xs²² of {
//│ 	LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₇(t³⁰, ys²⁶)]
//│ 	| LH_N  => ys²⁶}
//│ def mappend_lh_₈(xs¹⁷, ys¹⁷) = case xs¹⁷ of {
//│ 	LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₈(t²⁹, ys¹⁷)]
//│ 	| LH_N  => ys¹⁷}
//│ def mappend_lh_₉(xs³¹, ys³⁹) = case xs³¹ of {
//│ 	LH_C h²⁸ t²⁸ => [LH_C h²⁸ mappend_lh_₉(t²⁸, ys³⁹)]
//│ 	| LH_N  => ys³⁹}
//│ def maxw_lh_₁ = 70
//│ def maxw_lh_₂ = 70
//│ def maxw_lh_₃ = 70
//│ def min_lh_₁(_lh_min_arg1², _lh_min_arg2²) = if (_lh_min_arg1² > _lh_min_arg2²) then _lh_min_arg2² else _lh_min_arg1²
//│ def min_lh_₂(_lh_min_arg1³, _lh_min_arg2³) = if (_lh_min_arg1³ > _lh_min_arg2³) then _lh_min_arg2³ else _lh_min_arg1³
//│ def nil'_lh_₁ = 
//│ 	let _lh_cons'_LH_P2_1³ = [LH_N]
//│ 	in let _lh_cons'_LH_P2_0³ = [LH_N]
//│ 	in (fun _lh_cons'_arg1⁶ -> if not⁰(null_lh_₃(_lh_cons'_LH_P2_1³)) then [LH_P2 [LH_C _lh_cons'_arg1⁶ _lh_cons'_LH_P2_0³] _lh_cons'_LH_P2_1³] else [LH_P2 [LH_C _lh_cons'_arg1⁶ [LH_N]] _lh_cons'_LH_P2_0³])
//│ def null'_lh_₁(_lh_null'_arg1⁴) = case _lh_null'_arg1⁴ of {
//│ 	LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {
//│ 		LH_N  => case _lh_null'_LH_P2_1² of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₂(_lh_null'_arg1³) = case _lh_null'_arg1³ of {
//│ 	LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1¹ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₃(_lh_null'_arg1⁵) = case _lh_null'_arg1⁵ of {
//│ 	LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1⁰ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null_lh_₁(_lh_null_arg1⁵) = case _lh_null_arg1⁵ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁴ _lh_null_LH_C_1⁴ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₂(_lh_null_arg1⁷) = case _lh_null_arg1⁷ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₃(_lh_null_arg1⁸) = case _lh_null_arg1⁸ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0² _lh_null_LH_C_1² => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₄(_lh_null_arg1⁶) = case _lh_null_arg1⁶ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₅(_lh_null_arg1⁹) = case _lh_null_arg1⁹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def optw_lh_₁ = 63
//│ def optw_lh_₂ = 63
//│ def optw_lh_₃ = 63
//│ def par3_lh_₁(_lh_par3_arg1¹) = 
//│ 	let zs¹ = scan1_lh_₁(stepr_lh_₁, startr_lh_₁, map_lh_₄(length_lh_₁, _lh_par3_arg1¹))
//│ 	in tile_lh_₁(_lh_par3_arg1¹, [LH_P2 map_lh_₅((fun _lh_funcomp_x¹¹ -> (fun _lh_funcomp_x¹² -> len_tl_lh_₁(last'_lh_₁(_lh_funcomp_x¹²)))(fst3_lh_₁(_lh_funcomp_x¹¹))), zs¹) thd3_lh_₁(head_lh_₁(zs¹))])
//│ def paras_lh_₁(_lh_paras_arg1¹) = (fun _lh_funcomp_x¹⁰ -> filter_lh_₁((fun x⁴ -> polyNeq⁰([LH_N], x⁴)), format_lh_₁([LH_N], _lh_funcomp_x¹⁰)))(_lh_paras_arg1¹)
//│ def parse_lh_₁(_lh_parse_arg1¹) = (fun _lh_funcomp_x¹⁶ -> (fun _lh_funcomp_x¹⁷ -> paras_lh_₁(map_lh_₃(words_lh_₁, _lh_funcomp_x¹⁷)))(lines_lh_₁(_lh_funcomp_x¹⁶)))(_lh_parse_arg1¹)
//│ def reverse_helper_lh_₁(ls²², a⁴) = case ls²² of {
//│ 	LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁴])
//│ 	| LH_N  => a⁴}
//│ def reverse_lh_₁(ls³⁸) = reverse_helper_lh_₁(ls³⁸, [LH_N])
//│ def scan1_lh_₁(_lh_scan1_arg1¹, _lh_scan1_arg2¹) = fold1_lh_₁((fun a⁶ -> (fun s¹ -> [LH_C _lh_scan1_arg1¹(a⁶, head_lh_₂(s¹)) s¹])), (fun a⁷ -> [LH_C _lh_scan1_arg2¹(a⁷) [LH_N]]))
//│ def single'_lh_₁(_lh_single'_arg1²) = case _lh_single'_arg1² of {
//│ 	LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹)))
//│ 	| _  => error⁰}
//│ def single'_lh_₂(_lh_single'_arg1³) = case _lh_single'_arg1³ of {
//│ 	LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₅(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₅(_lh_single'_LH_P2_1⁰)))
//│ 	| _  => error⁰}
//│ def single_lh_₁(_lh_single_arg1¹) = case _lh_single_arg1¹ of {
//│ 	LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def snd3_lh_₁(_lh_snd3_arg1¹) = case _lh_snd3_arg1¹ of {
//│ 	LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰
//│ 	| _  => error⁰}
//│ def splitAt_lh_₁(_lh_splitAt_arg1², _lh_splitAt_arg2²) = 
//│ 	let _lh_tile_LH_P2_1² = drop_lh_₁(_lh_splitAt_arg1², _lh_splitAt_arg2²)
//│ 	in let _lh_tile_LH_P2_0² = take_lh_₁(_lh_splitAt_arg1², _lh_splitAt_arg2²)
//│ 	in (fun _lh_tile_LH_C_0¹ -> (fun _lh_tile_LH_C_1¹ -> (fun l² -> [LH_C _lh_tile_LH_P2_0² tile_lh_₁(_lh_tile_LH_P2_1², [LH_P2 drop_lh_₁(l², [LH_C _lh_tile_LH_C_0¹ _lh_tile_LH_C_1¹]) _lh_tile_LH_C_0¹])])))
//│ def splitAt_lh_₂(_lh_splitAt_arg1³, _lh_splitAt_arg2³) = [LH_P2 take_lh_₁(_lh_splitAt_arg1³, _lh_splitAt_arg2³) drop_lh_₁(_lh_splitAt_arg1³, _lh_splitAt_arg2³)]
//│ def startr_lh_₁(_lh_startr_arg1¹) = if (_lh_startr_arg1¹ <= maxw_lh_₁) then [LH_P3 cons'_lh_₁([LH_P3 0 0 0], nil'_lh_₁) _lh_startr_arg1¹ 1] else error⁰([LH_C 's' [LH_C 't' [LH_C 'a' [LH_C 'r' [LH_C 't' [LH_C 'r' [LH_C ' ' [LH_C 'p' [LH_C 'a' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]]]]]]])
//│ def stepr_lh_₁(_lh_stepr_arg1¹, _lh_stepr_arg2¹) = case _lh_stepr_arg2¹ of {
//│ 	LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => 
//│ 		let tot_width¹ = ((_lh_stepr_arg1¹ + 1) + _lh_stepr_LH_P3_1⁰)
//│ 		in let tot_len¹ = (1 + _lh_stepr_LH_P3_2⁰)
//│ 		in let single¹ = (fun p⁸ -> (len_tl_lh_₂(p⁸) == 0))
//│ 		in let width_hd¹ = (fun p⁹ -> if single¹(p⁹) then tot_width¹ else ((tot_width¹ - width_tl_lh_₁(p⁹)) - 1))
//│ 		in let cost¹ = (fun p¹⁰ -> if single¹(p¹⁰) then 0 else (cost_tl_lh_₃(p¹⁰) + 
//│ 			let a⁵ = (optw_lh_₃ - width_hd¹(p¹⁰))
//│ 			in (a⁵ * a⁵)))
//│ 		in let old_width_hd¹ = (fun p¹¹ -> if single¹(p¹¹) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh_₂(p¹¹)) - 1))
//│ 		in let new¹ = (fun p¹² -> if single¹(p¹²) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p¹²) + 
//│ 			let x⁷ = (optw_lh_₁ - old_width_hd¹(p¹²))
//│ 			in (x⁷ * x⁷)) _lh_stepr_LH_P3_2⁰])
//│ 		in let trim¹ = (fun ps_pq¹ -> if null'_lh_₂(ps_pq¹) then ps_pq¹ else if single'_lh_₂(ps_pq¹) then ps_pq¹ else 
//│ 			let ps_p² = init'_lh_₂(ps_pq¹)
//│ 			in let q³ = last'_lh_₃(ps_pq¹)
//│ 			in let p¹³ = last'_lh_₄(ps_p²)
//│ 			in if (cost¹(p¹³) <= cost¹(q³)) then trim¹(ps_p²) else ps_pq¹)
//│ 		in let drop_nofit¹ = (fun ps_p³ -> if null'_lh_₁(ps_p³) then ps_p³ else if (width_hd¹(last'_lh_₂(ps_p³)) > maxw_lh_₃) then drop_nofit¹(init'_lh_₁(ps_p³)) else ps_p³)
//│ 		in let bf¹ = (fun p¹⁴ -> (fun q⁴ -> 
//│ 			let wqh¹ = width_hd¹(q⁴)
//│ 			in let rqh¹ = ((maxw_lh_₂ - wqh¹) + 1)
//│ 			in if (single¹(q⁴) && (cost_tl_lh_₁(p¹⁴) == 0)) then min_lh_₂((optw_lh_₂ - width_hd¹(p¹⁴)), rqh¹) else if single¹(q⁴) then rqh¹ else min_lh_₁(ceildiv_lh_₁((cost¹(p¹⁴) - cost¹(q⁴)), (2 * (wqh¹ - width_hd¹(p¹⁴)))), rqh¹)))
//│ 		in let myAdd¹ = (fun p¹⁵ -> (fun qr_rs¹ -> if (single'_lh_₁(qr_rs¹) || null'_lh_₃(qr_rs¹)) then cons'_lh_₃(p¹⁵, qr_rs¹) else 
//│ 			let q⁵ = head'_lh_₂(qr_rs¹)
//│ 			in let r_rs¹ = tail'_lh_₁(qr_rs¹)
//│ 			in let r¹ = head'_lh_₁(r_rs¹)
//│ 			in if (bf¹(p¹⁵, q⁵) <= bf¹(q⁵, r¹)) then myAdd¹(p¹⁵, r_rs¹) else cons'_lh_₂(p¹⁵, qr_rs¹)))
//│ 		in [LH_P3 trim¹(drop_nofit¹(myAdd¹(new¹(last'_lh_₅(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width¹ tot_len¹]
//│ 	| _  => error⁰}
//│ def tail'_lh_₁(_lh_tail'_arg1¹) = case _lh_tail'_arg1¹ of {
//│ 	LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then 
//│ 		let _lh_matchIdent¹⁹ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ 		in case _lh_matchIdent¹⁹ of {
//│ 			LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]
//│ 			| _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]
//│ 	| _  => error⁰}
//│ def tail_lh_₁(ls²⁸) = case ls²⁸ of {
//│ 	LH_C h⁵ t⁵ => t⁵
//│ 	| LH_N  => error⁰}
//│ def tail_lh_₂(ls²⁵) = case ls²⁵ of {
//│ 	LH_C h² t² => t²
//│ 	| LH_N  => error⁰}
//│ def take_lh_₁(n¹, ls²⁹) = if (n¹ > 0) then case ls²⁹ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n¹ - 1), t¹)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPara_nofib_lh_₁(_lh_testPara_nofib_arg1¹) = 
//│ 	let test¹ = mappend_lh_₅(mappend_lh_₆(mappend_lh_₇(mappend_lh_₃(mappend_lh_₂(mappend_lh_₈(mappend_lh_₉(mappend_lh_₁(mappend_lh_₄(primId⁰([LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'u' [LH_C 'c' [LH_C 't' [LH_C 'i' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C 'm' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'o' [LH_C 'n' [LH_C 'p' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]), primId⁰([LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C 's' [LH_C '.' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ',' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'h' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'y' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C ' ' [LH_C 'w' [LH_C 'e' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_C 'k' [LH_C 'n' [LH_C 'o' [LH_C 'w' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 's' [LH_C 'i' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C '.' [LH_C ' ' [LH_C 'H' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'o' [LH_C 'm' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'm' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 't' [LH_C 'a' [LH_C 'i' [LH_C 'l' [LH_C 's' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'g' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'b' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C ' ' [LH_C 'T' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'i' [LH_C 'c' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'l' [LH_C 'e' [LH_C 's' [LH_C 's' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C '|' [LH_C ' ' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]))
//│ 	in if null_lh_₁(test¹) then [LH_N] else fmt_lh_₁(test¹)
//│ def thd3_lh_₁(_lh_thd3_arg1³) = case _lh_thd3_arg1³ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0¹ _lh_thd3_LH_P3_1¹ _lh_thd3_LH_P3_2¹ => _lh_thd3_LH_P3_2¹
//│ 	| _  => error⁰}
//│ def thd3_lh_₂(_lh_thd3_arg1²) = case _lh_thd3_arg1² of {
//│ 	LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰
//│ 	| _  => error⁰}
//│ def tile_lh_₁(_lh_tile_arg1¹, _lh_tile_arg2¹) = case _lh_tile_arg2¹ of {
//│ 	LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => 
//│ 			let l³ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ 			in let _lh_matchIdent¹³ = splitAt_lh_₁(l³, _lh_tile_arg1¹)
//│ 			in _lh_matchIdent¹³(_lh_tile_LH_C_0⁰, _lh_tile_LH_C_1⁰, l³)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def unformat_lh_₁(_lh_unformat_arg1¹) = fold1_lh_₂((fun xs²⁹ -> (fun ys³³ -> mappend_lh_₁₆(mappend_lh_₁₅(xs²⁹, 
//│ 	let t⁴² = (fun ys³⁵ -> ys³⁵)
//│ 	in let h⁴² = _lh_unformat_arg1¹
//│ 	in (fun ys³⁴ -> [LH_C h⁴² mappend_lh_₁₆(t⁴², ys³⁴)])), ys³³))), (fun x⁶ -> x⁶))
//│ def unlines_lh_₁(_lh_unlines_arg1¹) = concat_lh_₂(map_lh_₆((fun l⁴ -> mappend_lh_₁₁(l⁴, 
//│ 	let t⁴⁹ = (fun ys⁴⁶ -> ys⁴⁶)
//│ 	in let h⁴⁹ = '|'
//│ 	in (fun ys⁴⁵ -> [LH_C h⁴⁹ mappend_lh_₁₄(t⁴⁹, ys⁴⁵)]))), _lh_unlines_arg1¹))
//│ def unparas_lh_₁(_lh_unparas_arg1¹) = unformat_lh_₁([LH_N], _lh_unparas_arg1¹)
//│ def unparse_lh_₁(_lh_unparse_arg1¹) = (fun _lh_funcomp_x¹⁸ -> (fun _lh_funcomp_x¹⁹ -> unlines_lh_₁(map_lh_₂(unwords_lh_₁, _lh_funcomp_x¹⁹)))(unparas_lh_₁(_lh_funcomp_x¹⁸)))(_lh_unparse_arg1¹)
//│ def unwords_lh_₁(_lh_unwords_arg1¹) = case _lh_unwords_arg1¹ of {
//│ 	LH_N  => (fun ys¹⁹ -> ys¹⁹)
//│ 	| LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => 
//│ 		let go¹ = (fun _lh_go_arg1¹ -> case _lh_go_arg1¹ of {
//│ 			LH_N  => (fun ys²⁰ -> ys²⁰)
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => 
//│ 				let t³⁷ = mappend_lh_₁₂(_lh_go_LH_C_0⁰, go¹(_lh_go_LH_C_1⁰))
//│ 				in let h³⁷ = ' '
//│ 				in (fun ys²¹ -> 
//│ 					let t³⁸ = mappend_lh_₁₁(t³⁷, ys²¹)
//│ 					in let h³⁸ = h³⁷
//│ 					in (fun ys²² -> [LH_C h³⁸ mappend_lh_₁₄(t³⁸, ys²²)]))
//│ 			| _  => error⁰})
//│ 		in mappend_lh_₁₃(_lh_unwords_LH_C_0⁰, go¹(_lh_unwords_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def width_tl_lh_₁(_lh_width_tl_arg1²) = fst3_lh_₁(_lh_width_tl_arg1²)
//│ def width_tl_lh_₂(_lh_width_tl_arg1³) = fst3_lh_₁(_lh_width_tl_arg1³)
//│ def words_lh_₁(_lh_words_arg1¹) = 
//│ 	let _lh_matchIdent¹¹ = dropWhile_lh_₁(isSpace_lh_₁, _lh_words_arg1¹)
//│ 	in _lh_matchIdent¹¹(99)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ tile_lh_₁, mappend_lh_₁₄, map_lh_₃, lines_lh_₁, map_lh_₆, map_lh_₁, mappend_lh_₁₆, words_lh_₁, concat_lh_₂, cons'_lh_₁, mappend_lh_₁₁
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ unwords_lh_₁ -> 0
//│ splitAt_lh_₁ -> 5
//│ mappend_lh_₁₅ -> 3
//│ break_lh_₁ -> 2
//│ filter_lh_₁ -> 2
//│ mappend_lh_₁₂ -> 4
//│ unlines_lh_₁ -> 1
//│ nil'_lh_₁ -> 1
//│ dropWhile_lh_₁ -> 2
//│ map_lh_₂ -> 2
//│ unformat_lh_₁ -> 2
//│ mappend_lh_₁₃ -> 2
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ testPara_nofib_lh_₁(primId⁰(0))
//│ def break_lh_₁(_lh_break_arg1², _lh_break_arg2²) = case _lh_break_arg2² of {
//│ 	LH_N  => [LH_P2 [LH_N] (fun _lh_dummy⁴ -> (fun f⁹ -> [LH_N]))]
//│ 	| LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1²(_lh_break_LH_C_0¹) then [LH_P2 [LH_N] 
//│ 		let _lh_lines_LH_C_1⁰ = _lh_break_LH_C_1¹
//│ 		in let _lh_lines_LH_C_0⁰ = _lh_break_LH_C_0¹
//│ 		in (fun _lh_dummy⁵ -> 
//│ 			let _lh_matchIdent¹³ = break_lh_₁((fun x⁵ -> polyEq⁰(x⁵, '|')), _lh_lines_LH_C_1⁰)
//│ 			in case _lh_matchIdent¹³ of {
//│ 				LH_P2 _lh_lines_LH_P2_0² _lh_lines_LH_P2_1² => 
//│ 					let t³³ = 	
//│ 						let _lh_matchIdent¹⁴ = _lh_lines_LH_P2_1²
//│ 						in _lh_matchIdent¹⁴(99)
//│ 					in let h³³ = _lh_lines_LH_P2_0²
//│ 					in (fun f¹⁰ -> [LH_C f¹⁰(h³³) t³³(f¹⁰)])
//│ 				| _  => error⁰})] else 
//│ 		let _lh_matchIdent¹⁵ = break_lh_₁(_lh_break_arg1², _lh_break_LH_C_1¹)
//│ 		in case _lh_matchIdent¹⁵ of {
//│ 			LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def break_lh_₂(_lh_break_arg1⁰, _lh_break_arg2⁰) = case _lh_break_arg2⁰ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1⁰(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else 
//│ 		let _lh_matchIdent⁴ = break_lh_₂(_lh_break_arg1⁰, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent⁴ of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def ceildiv_lh_₁(_lh_ceildiv_arg1⁰, _lh_ceildiv_arg2⁰) = div⁰(((_lh_ceildiv_arg1⁰ + _lh_ceildiv_arg2⁰) - 1), _lh_ceildiv_arg2⁰)
//│ def concat_lh_₁(lss¹) = case lss¹ of {
//│ 	LH_C h³⁹ t³⁹ => mappend_lh_₁₀(h³⁹, concat_lh_₁(t³⁹))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₂(lss⁰) = lss⁰(99)
//│ def cons'_lh_₁(_lh_cons'_arg1², _lh_cons'_arg2²) = _lh_cons'_arg2²(_lh_cons'_arg1²)
//│ def cons'_lh_₂(_lh_cons'_arg1⁰, _lh_cons'_arg2⁰) = case _lh_cons'_arg2⁰ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]
//│ 	| _  => error⁰}
//│ def cons'_lh_₃(_lh_cons'_arg1¹, _lh_cons'_arg2¹) = case _lh_cons'_arg2¹ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]
//│ 	| _  => error⁰}
//│ def cost_tl_lh_₁(_lh_cost_tl_arg1²) = snd3_lh_₁(_lh_cost_tl_arg1²)
//│ def cost_tl_lh_₂(_lh_cost_tl_arg1⁰) = snd3_lh_₁(_lh_cost_tl_arg1⁰)
//│ def cost_tl_lh_₃(_lh_cost_tl_arg1¹) = snd3_lh_₁(_lh_cost_tl_arg1¹)
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => (fun _lh_dummy⁰ -> [LH_N])
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else 
//│ 		let _lh_words_LH_C_1⁰ = _lh_dropWhile_LH_C_1⁰
//│ 		in let _lh_words_LH_C_0⁰ = _lh_dropWhile_LH_C_0⁰
//│ 		in (fun _lh_dummy¹ -> 
//│ 			let _lh_matchIdent¹⁰ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ 			in case _lh_matchIdent¹⁰ of {
//│ 				LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ 
//│ 					let _lh_matchIdent¹¹ = dropWhile_lh_₁(isSpace_lh_₁, _lh_words_LH_P2_1⁰)
//│ 					in _lh_matchIdent¹¹(99)]
//│ 				| _  => error⁰})
//│ 	| _  => error⁰}
//│ def drop_lh_₁(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def filter_lh_₁(f¹², ls¹⁵) = case ls¹⁵ of {
//│ 	LH_C h³⁵ t³⁵ => if f¹²(h³⁵) then 
//│ 		let t³⁶ = filter_lh_₁(f¹², t³⁵)
//│ 		in let h³⁶ = h³⁵
//│ 		in (fun f¹³ -> [LH_C f¹³(h³⁶) t³⁶(f¹³)]) else filter_lh_₁(f¹², t³⁵)
//│ 	| LH_N  => (fun f¹⁴ -> [LH_N])}
//│ def fmt_lh_₁(_lh_fmt_arg1⁰) = (fun _lh_funcomp_x³ -> (fun _lh_funcomp_x⁴ -> unparse_lh_₁(_lh_funcomp_x⁴((fun _lh_funcomp_x⁵ -> par3_lh_₁(concat_lh_₁(_lh_funcomp_x⁵))))))(parse_lh_₁(_lh_funcomp_x³)))(_lh_fmt_arg1⁰)
//│ def fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_arg3²) = case _lh_fold1_arg3² of {
//│ 	LH_C _lh_fold1_LH_C_0² _lh_fold1_LH_C_1² => case _lh_fold1_LH_C_1² of {
//│ 		LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²)
//│ 		| _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_arg3¹) = case _lh_fold1_arg3¹ of {
//│ 	LH_C _lh_fold1_LH_C_0¹ _lh_fold1_LH_C_1¹ => case _lh_fold1_LH_C_1¹ of {
//│ 		LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹)
//│ 		| _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_arg3⁰) = case _lh_fold1_arg3⁰ of {
//│ 	LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {
//│ 		LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰)
//│ 		| _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}
//│ 	| _  => error⁰}
//│ def format_lh_₁(_lh_format_arg1⁰, _lh_format_arg2⁰) = case _lh_format_arg2⁰ of {
//│ 	LH_N  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let break⁰ = (fun _lh_break_arg1¹ -> (fun _lh_break_arg2¹ -> (fun _lh_break_arg3⁰ -> if polyEq⁰(_lh_break_arg1¹, _lh_break_arg2¹) then [LH_C [LH_N] _lh_break_arg3⁰] else [LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)])))
//│ 		and start⁰ = (fun _lh_start_arg1⁰ -> (fun _lh_start_arg2⁰ -> break⁰(_lh_start_arg1⁰, _lh_start_arg2⁰, [LH_C [LH_N] [LH_N]]))) 
//│ 		in fold1_lh_₃(break⁰(_lh_format_arg1⁰), start⁰(_lh_format_arg1⁰), _lh_format_arg2⁰)}
//│ def fst3_lh_₁(_lh_fst3_arg1⁰) = case _lh_fst3_arg1⁰ of {
//│ 	LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰
//│ 	| _  => error⁰}
//│ def head'_lh_₁(_lh_head'_arg1⁰) = case _lh_head'_arg1⁰ of {
//│ 	LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰)
//│ 	| _  => error⁰}
//│ def head'_lh_₂(_lh_head'_arg1¹) = case _lh_head'_arg1¹ of {
//│ 	LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0¹)) then head_lh_₇(_lh_head'_LH_P2_0¹) else head_lh_₇(_lh_head'_LH_P2_1¹)
//│ 	| _  => error⁰}
//│ def head_lh_₁(ls¹⁷) = case ls¹⁷ of {
//│ 	LH_C h³⁸ t³⁸ => h³⁸
//│ 	| LH_N  => error⁰}
//│ def head_lh_₂(ls¹) = case ls¹ of {
//│ 	LH_C h⁶ t⁶ => h⁶
//│ 	| LH_N  => error⁰}
//│ def head_lh_₃(ls¹⁶) = case ls¹⁶ of {
//│ 	LH_C h³⁷ t³⁷ => h³⁷
//│ 	| LH_N  => error⁰}
//│ def head_lh_₄(ls⁶) = case ls⁶ of {
//│ 	LH_C h¹⁷ t¹⁷ => h¹⁷
//│ 	| LH_N  => error⁰}
//│ def head_lh_₅(ls³) = case ls³ of {
//│ 	LH_C h¹⁴ t¹⁴ => h¹⁴
//│ 	| LH_N  => error⁰}
//│ def head_lh_₆(ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h²⁸ t²⁸ => h²⁸
//│ 	| LH_N  => error⁰}
//│ def head_lh_₇(ls¹⁹) = case ls¹⁹ of {
//│ 	LH_C h⁴³ t⁴³ => h⁴³
//│ 	| LH_N  => error⁰}
//│ def init'_lh_₁(_lh_init'_arg1¹) = case _lh_init'_arg1¹ of {
//│ 	LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₅(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then 
//│ 		let _lh_matchIdent¹² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ 		in case _lh_matchIdent¹² of {
//│ 			LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]
//│ 	| _  => error⁰}
//│ def init'_lh_₂(_lh_init'_arg1⁰) = case _lh_init'_arg1⁰ of {
//│ 	LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₅(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then 
//│ 		let _lh_matchIdent⁰ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]
//│ 	| _  => error⁰}
//│ def isSpace_lh_₁(_lh_isSpace_arg1⁰) = polyEq⁰(_lh_isSpace_arg1⁰, ' ')
//│ def isSpace_lh_₂(_lh_isSpace_arg1¹) = polyEq⁰(_lh_isSpace_arg1¹, ' ')
//│ def last'_lh_₁(_lh_last'_arg1²) = case _lh_last'_arg1² of {
//│ 	LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₂(_lh_last'_LH_P2_1²)) then head_lh_₃(_lh_last'_LH_P2_1²) else head_lh_₄(_lh_last'_LH_P2_0²)
//│ 	| _  => error⁰}
//│ def last'_lh_₂(_lh_last'_arg1³) = case _lh_last'_arg1³ of {
//│ 	LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₄(_lh_last'_LH_P2_1³)) then head_lh_₆(_lh_last'_LH_P2_1³) else head_lh_₇(_lh_last'_LH_P2_0³)
//│ 	| _  => error⁰}
//│ def last'_lh_₃(_lh_last'_arg1¹) = case _lh_last'_arg1¹ of {
//│ 	LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1¹)) then head_lh_₇(_lh_last'_LH_P2_1¹) else head_lh_₇(_lh_last'_LH_P2_0¹)
//│ 	| _  => error⁰}
//│ def last'_lh_₄(_lh_last'_arg1⁰) = case _lh_last'_arg1⁰ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁰)) then head_lh_₇(_lh_last'_LH_P2_1⁰) else head_lh_₇(_lh_last'_LH_P2_0⁰)
//│ 	| _  => error⁰}
//│ def last'_lh_₅(_lh_last'_arg1⁴) = case _lh_last'_arg1⁴ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁴)) then head_lh_₇(_lh_last'_LH_P2_1⁴) else head_lh_₇(_lh_last'_LH_P2_0⁴)
//│ 	| _  => error⁰}
//│ def len_tl_lh_₁(_lh_len_tl_arg1¹) = thd3_lh_₂(_lh_len_tl_arg1¹)
//│ def len_tl_lh_₂(_lh_len_tl_arg1⁰) = thd3_lh_₂(_lh_len_tl_arg1⁰)
//│ def length_lh_₁(ls¹³) = case ls¹³ of {
//│ 	LH_C h³⁴ t³⁴ => (1 + length_lh_₁(t³⁴))
//│ 	| LH_N  => 0}
//│ def lines_lh_₁(_lh_lines_arg1⁰) = 
//│ 	let _lh_matchIdent⁶ = break_lh_₁((fun x¹ -> polyEq⁰(x¹, '|')), _lh_lines_arg1⁰)
//│ 	in case _lh_matchIdent⁶ of {
//│ 		LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => 
//│ 			let t¹² = 	
//│ 				let _lh_matchIdent⁷ = _lh_lines_LH_P2_1⁰
//│ 				in _lh_matchIdent⁷(99)
//│ 			in let h¹² = _lh_lines_LH_P2_0⁰
//│ 			in (fun f¹ -> [LH_C f¹(h¹²) t¹²(f¹)])
//│ 		| _  => error⁰}
//│ def map_lh_₁(f⁷, ls¹¹) = ls¹¹(f⁷)
//│ def map_lh_₂(f⁴, ls⁷) = case ls⁷ of {
//│ 	LH_C h¹⁹ t¹⁹ => 
//│ 		let t²⁰ = map_lh_₂(f⁴, t¹⁹)
//│ 		in let h²⁰ = f⁴(h¹⁹)
//│ 		in (fun f⁵ -> 
//│ 			let t²¹ = t²⁰(f⁵)
//│ 			in let h²¹ = f⁵(h²⁰)
//│ 			in (fun _lh_dummy² -> h²¹(t²¹(99))))
//│ 	| LH_N  => (fun f⁶ -> (fun _lh_dummy³ -> [LH_N]))}
//│ def map_lh_₃(f¹¹, ls¹⁴) = ls¹⁴(f¹¹)
//│ def map_lh_₄(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h¹ t¹ => [LH_C f⁰(h¹) map_lh_₄(f⁰, t¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f⁸, ls¹²) = case ls¹² of {
//│ 	LH_C h³² t³² => [LH_C f⁸(h³²) map_lh_₅(f⁸, t³²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f³, ls⁴) = ls⁴(f³)
//│ def mappend_lh_₁(xs³, ys⁷) = case xs³ of {
//│ 	LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁(t⁵, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₁₀(xs⁴, ys⁸) = case xs⁴ of {
//│ 	LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₁₀(t⁸, ys⁸)]
//│ 	| LH_N  => ys⁸}
//│ def mappend_lh_₁₁(xs¹⁰, ys¹⁴) = xs¹⁰(ys¹⁴)
//│ def mappend_lh_₁₂(xs¹⁶, ys²⁵) = case xs¹⁶ of {
//│ 	LH_C h⁴⁰ t⁴⁰ => 
//│ 		let t⁴¹ = mappend_lh_₁₂(t⁴⁰, ys²⁵)
//│ 		in let h⁴¹ = h⁴⁰
//│ 		in (fun ys²⁶ -> 
//│ 			let t⁴² = t⁴¹(ys²⁶)
//│ 			in let h⁴² = h⁴¹
//│ 			in (fun ys²⁷ -> [LH_C h⁴² t⁴²(ys²⁷)]))
//│ 	| LH_N  => ys²⁵}
//│ def mappend_lh_₁₃(xs¹³, ys¹⁹) = case xs¹³ of {
//│ 	LH_C h²⁴ t²⁴ => 
//│ 		let t²⁵ = mappend_lh_₁₃(t²⁴, ys¹⁹)
//│ 		in let h²⁵ = h²⁴
//│ 		in (fun ys²⁰ -> 
//│ 			let t²⁶ = t²⁵(ys²⁰)
//│ 			in let h²⁶ = h²⁵
//│ 			in (fun ys²¹ -> [LH_C h²⁶ t²⁶(ys²¹)]))
//│ 	| LH_N  => ys¹⁹}
//│ def mappend_lh_₁₄(xs⁸, ys¹²) = xs⁸(ys¹²)
//│ def mappend_lh_₁₅(xs¹⁵, ys²³) = case xs¹⁵ of {
//│ 	LH_C h³⁰ t³⁰ => 
//│ 		let t³¹ = mappend_lh_₁₅(t³⁰, ys²³)
//│ 		in let h³¹ = h³⁰
//│ 		in (fun ys²⁴ -> [LH_C h³¹ t³¹(ys²⁴)])
//│ 	| LH_N  => ys²³}
//│ def mappend_lh_₁₆(xs¹, ys¹) = xs¹(ys¹)
//│ def mappend_lh_₂(xs⁶, ys¹⁰) = case xs⁶ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂(t¹⁰, ys¹⁰)]
//│ 	| LH_N  => ys¹⁰}
//│ def mappend_lh_₃(xs², ys⁶) = case xs² of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃(t⁴, ys⁶)]
//│ 	| LH_N  => ys⁶}
//│ def mappend_lh_₄(xs¹¹, ys¹⁵) = case xs¹¹ of {
//│ 	LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₄(t¹⁸, ys¹⁵)]
//│ 	| LH_N  => ys¹⁵}
//│ def mappend_lh_₅(xs⁷, ys¹¹) = case xs⁷ of {
//│ 	LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₅(t¹¹, ys¹¹)]
//│ 	| LH_N  => ys¹¹}
//│ def mappend_lh_₆(xs⁹, ys¹³) = case xs⁹ of {
//│ 	LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₆(t¹⁵, ys¹³)]
//│ 	| LH_N  => ys¹³}
//│ def mappend_lh_₇(xs⁵, ys⁹) = case xs⁵ of {
//│ 	LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₇(t⁹, ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_lh_₈(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₈(t⁰, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₉(xs¹⁴, ys²²) = case xs¹⁴ of {
//│ 	LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₉(t²⁹, ys²²)]
//│ 	| LH_N  => ys²²}
//│ def maxw_lh_₁ = 70
//│ def maxw_lh_₂ = 70
//│ def maxw_lh_₃ = 70
//│ def min_lh_₁(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ > _lh_min_arg2⁰) then _lh_min_arg2⁰ else _lh_min_arg1⁰
//│ def min_lh_₂(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ def nil'_lh_₁ = 
//│ 	let _lh_cons'_LH_P2_1² = [LH_N]
//│ 	in let _lh_cons'_LH_P2_0² = [LH_N]
//│ 	in (fun _lh_cons'_arg1³ -> if not⁰(null_lh_₃(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1³ _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1³ [LH_N]] _lh_cons'_LH_P2_0²])
//│ def null'_lh_₁(_lh_null'_arg1¹) = case _lh_null'_arg1¹ of {
//│ 	LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1¹ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₂(_lh_null'_arg1⁰) = case _lh_null'_arg1⁰ of {
//│ 	LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1⁰ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₃(_lh_null'_arg1²) = case _lh_null'_arg1² of {
//│ 	LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {
//│ 		LH_N  => case _lh_null'_LH_P2_1² of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null_lh_₁(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₂(_lh_null_arg1²) = case _lh_null_arg1² of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0² _lh_null_LH_C_1² => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₃(_lh_null_arg1³) = case _lh_null_arg1³ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₄(_lh_null_arg1¹) = case _lh_null_arg1¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₅(_lh_null_arg1⁴) = case _lh_null_arg1⁴ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁴ _lh_null_LH_C_1⁴ => [False]
//│ 	| _  => error⁰}
//│ def optw_lh_₁ = 63
//│ def optw_lh_₂ = 63
//│ def optw_lh_₃ = 63
//│ def par3_lh_₁(_lh_par3_arg1⁰) = 
//│ 	let zs⁰ = scan1_lh_₁(stepr_lh_₁, startr_lh_₁, map_lh_₄(length_lh_₁, _lh_par3_arg1⁰))
//│ 	in case [LH_P2 map_lh_₅((fun _lh_funcomp_x¹ -> (fun _lh_funcomp_x² -> len_tl_lh_₁(last'_lh_₁(_lh_funcomp_x²)))(fst3_lh_₁(_lh_funcomp_x¹))), zs⁰) thd3_lh_₁(head_lh_₁(zs⁰))] of {
//│ 		LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {
//│ 			LH_N  => [LH_N]
//│ 			| LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => 
//│ 				let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ 				in let _lh_matchIdent¹ = splitAt_lh_₁(l⁰, _lh_par3_arg1⁰)
//│ 				in _lh_matchIdent¹(_lh_tile_LH_C_0⁰, _lh_tile_LH_C_1⁰, l⁰)
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ def paras_lh_₁(_lh_paras_arg1⁰) = (fun _lh_funcomp_x⁰ -> filter_lh_₁((fun x⁰ -> polyNeq⁰([LH_N], x⁰)), format_lh_₁([LH_N], _lh_funcomp_x⁰)))(_lh_paras_arg1⁰)
//│ def parse_lh_₁(_lh_parse_arg1⁰) = (fun _lh_funcomp_x⁶ -> (fun _lh_funcomp_x⁷ -> paras_lh_₁(_lh_funcomp_x⁷(words_lh_₁)))(
//│ 	let _lh_matchIdent⁸ = break_lh_₁((fun x² -> polyEq⁰(x², '|')), _lh_funcomp_x⁶)
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => 
//│ 			let t¹³ = 	
//│ 				let _lh_matchIdent⁹ = _lh_lines_LH_P2_1¹
//│ 				in _lh_matchIdent⁹(99)
//│ 			in let h¹³ = _lh_lines_LH_P2_0¹
//│ 			in (fun f² -> [LH_C f²(h¹³) t¹³(f²)])
//│ 		| _  => error⁰}))(_lh_parse_arg1⁰)
//│ def reverse_helper_lh_₁(ls², a⁰) = case ls² of {
//│ 	LH_C h⁷ t⁷ => reverse_helper_lh_₁(t⁷, [LH_C h⁷ a⁰])
//│ 	| LH_N  => a⁰}
//│ def reverse_lh_₁(ls¹⁸) = reverse_helper_lh_₁(ls¹⁸, [LH_N])
//│ def scan1_lh_₁(_lh_scan1_arg1⁰, _lh_scan1_arg2⁰) = fold1_lh_₁((fun a² -> (fun s⁰ -> [LH_C _lh_scan1_arg1⁰(a², head_lh_₂(s⁰)) s⁰])), (fun a³ -> [LH_C _lh_scan1_arg2⁰(a³) [LH_N]]))
//│ def single'_lh_₁(_lh_single'_arg1⁰) = case _lh_single'_arg1⁰ of {
//│ 	LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₅(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₅(_lh_single'_LH_P2_1⁰)))
//│ 	| _  => error⁰}
//│ def single'_lh_₂(_lh_single'_arg1¹) = case _lh_single'_arg1¹ of {
//│ 	LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹)))
//│ 	| _  => error⁰}
//│ def single_lh_₁(_lh_single_arg1⁰) = case _lh_single_arg1⁰ of {
//│ 	LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def snd3_lh_₁(_lh_snd3_arg1⁰) = case _lh_snd3_arg1⁰ of {
//│ 	LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰
//│ 	| _  => error⁰}
//│ def splitAt_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) = 
//│ 	let _lh_tile_LH_P2_1¹ = drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)
//│ 	in let _lh_tile_LH_P2_0¹ = take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)
//│ 	in (fun _lh_tile_LH_C_0¹ -> (fun _lh_tile_LH_C_1¹ -> (fun l¹ -> [LH_C _lh_tile_LH_P2_0¹ case [LH_P2 drop_lh_₁(l¹, [LH_C _lh_tile_LH_C_0¹ _lh_tile_LH_C_1¹]) _lh_tile_LH_C_0¹] of {
//│ 		LH_P2 _lh_tile_LH_P2_0² _lh_tile_LH_P2_1² => case _lh_tile_LH_P2_0² of {
//│ 			LH_N  => [LH_N]
//│ 			| LH_C _lh_tile_LH_C_0² _lh_tile_LH_C_1² => 
//│ 				let l² = (_lh_tile_LH_P2_1² - _lh_tile_LH_C_0²)
//│ 				in let _lh_matchIdent² = splitAt_lh_₁(l², _lh_tile_LH_P2_1¹)
//│ 				in _lh_matchIdent²(_lh_tile_LH_C_0², _lh_tile_LH_C_1², l²)
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}])))
//│ def splitAt_lh_₂(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹) = [LH_P2 take_lh_₁(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹) drop_lh_₁(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹)]
//│ def startr_lh_₁(_lh_startr_arg1⁰) = if (_lh_startr_arg1⁰ <= maxw_lh_₁) then [LH_P3 nil'_lh_₁([LH_P3 0 0 0]) _lh_startr_arg1⁰ 1] else error⁰([LH_C 's' [LH_C 't' [LH_C 'a' [LH_C 'r' [LH_C 't' [LH_C 'r' [LH_C ' ' [LH_C 'p' [LH_C 'a' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]]]]]]])
//│ def stepr_lh_₁(_lh_stepr_arg1⁰, _lh_stepr_arg2⁰) = case _lh_stepr_arg2⁰ of {
//│ 	LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => 
//│ 		let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ 		in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ 		in let single⁰ = (fun p⁰ -> (len_tl_lh_₂(p⁰) == 0))
//│ 		in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh_₁(p¹)) - 1))
//│ 		in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh_₃(p²) + 
//│ 			let a¹ = (optw_lh_₃ - width_hd⁰(p²))
//│ 			in (a¹ * a¹)))
//│ 		in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh_₂(p³)) - 1))
//│ 		in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + 
//│ 			let x⁴ = (optw_lh_₁ - old_width_hd⁰(p⁴))
//│ 			in (x⁴ * x⁴)) _lh_stepr_LH_P3_2⁰])
//│ 		in let trim⁰ = (fun ps_pq⁰ -> if null'_lh_₂(ps_pq⁰) then ps_pq⁰ else if single'_lh_₂(ps_pq⁰) then ps_pq⁰ else 
//│ 			let ps_p⁰ = init'_lh_₂(ps_pq⁰)
//│ 			in let q⁰ = last'_lh_₃(ps_pq⁰)
//│ 			in let p⁵ = last'_lh_₄(ps_p⁰)
//│ 			in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ 		in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh_₁(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh_₂(ps_p¹)) > maxw_lh_₃) then drop_nofit⁰(init'_lh_₁(ps_p¹)) else ps_p¹)
//│ 		in let bf⁰ = (fun p⁶ -> (fun q¹ -> 
//│ 			let wqh⁰ = width_hd⁰(q¹)
//│ 			in let rqh⁰ = ((maxw_lh_₂ - wqh⁰) + 1)
//│ 			in if (single⁰(q¹) && (cost_tl_lh_₁(p⁶) == 0)) then min_lh_₂((optw_lh_₂ - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh_₁(ceildiv_lh_₁((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ 		in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh_₁(qr_rs⁰) || null'_lh_₃(qr_rs⁰)) then cons'_lh_₃(p⁷, qr_rs⁰) else 
//│ 			let q² = head'_lh_₂(qr_rs⁰)
//│ 			in let r_rs⁰ = tail'_lh_₁(qr_rs⁰)
//│ 			in let r⁰ = head'_lh_₁(r_rs⁰)
//│ 			in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh_₂(p⁷, qr_rs⁰)))
//│ 		in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₅(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]
//│ 	| _  => error⁰}
//│ def tail'_lh_₁(_lh_tail'_arg1⁰) = case _lh_tail'_arg1⁰ of {
//│ 	LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then 
//│ 		let _lh_matchIdent¹⁶ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ 		in case _lh_matchIdent¹⁶ of {
//│ 			LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]
//│ 			| _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]
//│ 	| _  => error⁰}
//│ def tail_lh_₁(ls⁸) = case ls⁸ of {
//│ 	LH_C h²³ t²³ => t²³
//│ 	| LH_N  => error⁰}
//│ def tail_lh_₂(ls⁵) = case ls⁵ of {
//│ 	LH_C h¹⁶ t¹⁶ => t¹⁶
//│ 	| LH_N  => error⁰}
//│ def take_lh_₁(n⁰, ls⁹) = if (n⁰ > 0) then case ls⁹ of {
//│ 	LH_C h²⁷ t²⁷ => [LH_C h²⁷ take_lh_₁((n⁰ - 1), t²⁷)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPara_nofib_lh_₁(_lh_testPara_nofib_arg1⁰) = 
//│ 	let test⁰ = mappend_lh_₅(mappend_lh_₆(mappend_lh_₇(mappend_lh_₃(mappend_lh_₂(mappend_lh_₈(mappend_lh_₉(mappend_lh_₁(mappend_lh_₄(primId⁰([LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'u' [LH_C 'c' [LH_C 't' [LH_C 'i' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C 'm' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'o' [LH_C 'n' [LH_C 'p' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]), primId⁰([LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C 's' [LH_C '.' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ',' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'h' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'y' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C ' ' [LH_C 'w' [LH_C 'e' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_C 'k' [LH_C 'n' [LH_C 'o' [LH_C 'w' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 's' [LH_C 'i' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C '.' [LH_C ' ' [LH_C 'H' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'o' [LH_C 'm' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'm' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 't' [LH_C 'a' [LH_C 'i' [LH_C 'l' [LH_C 's' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'g' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'b' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C ' ' [LH_C 'T' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'i' [LH_C 'c' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'l' [LH_C 'e' [LH_C 's' [LH_C 's' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C '|' [LH_C ' ' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]))
//│ 	in if null_lh_₁(test⁰) then [LH_N] else fmt_lh_₁(test⁰)
//│ def thd3_lh_₁(_lh_thd3_arg1¹) = case _lh_thd3_arg1¹ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0¹ _lh_thd3_LH_P3_1¹ _lh_thd3_LH_P3_2¹ => _lh_thd3_LH_P3_2¹
//│ 	| _  => error⁰}
//│ def thd3_lh_₂(_lh_thd3_arg1⁰) = case _lh_thd3_arg1⁰ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰
//│ 	| _  => error⁰}
//│ def tile_lh_₁(_lh_tile_arg1⁰, _lh_tile_arg2⁰) = case _lh_tile_arg2⁰ of {
//│ 	LH_P2 _lh_tile_LH_P2_0³ _lh_tile_LH_P2_1³ => case _lh_tile_LH_P2_0³ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_tile_LH_C_0³ _lh_tile_LH_C_1³ => 
//│ 			let l³ = (_lh_tile_LH_P2_1³ - _lh_tile_LH_C_0³)
//│ 			in let _lh_matchIdent⁵ = splitAt_lh_₁(l³, _lh_tile_arg1⁰)
//│ 			in _lh_matchIdent⁵(_lh_tile_LH_C_0³, _lh_tile_LH_C_1³, l³)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def unformat_lh_₁(_lh_unformat_arg1⁰) = fold1_lh_₂((fun xs¹² -> (fun ys¹⁶ -> mappend_lh_₁₅(xs¹², 
//│ 	let t²² = (fun ys¹⁷ -> ys¹⁷)
//│ 	in let h²² = _lh_unformat_arg1⁰
//│ 	in (fun ys¹⁸ -> [LH_C h²² t²²(ys¹⁸)]), ys¹⁶))), (fun x³ -> x³))
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = _lh_unlines_arg1⁰((fun l⁴ -> l⁴(
//│ 	let t⁴⁴ = (fun ys²⁸ -> ys²⁸)
//│ 	in let h⁴⁴ = '|'
//│ 	in (fun ys²⁹ -> [LH_C h⁴⁴ t⁴⁴(ys²⁹)]))), 99)
//│ def unparas_lh_₁(_lh_unparas_arg1⁰) = unformat_lh_₁([LH_N], _lh_unparas_arg1⁰)
//│ def unparse_lh_₁(_lh_unparse_arg1⁰) = (fun _lh_funcomp_x⁸ -> (fun _lh_funcomp_x⁹ -> unlines_lh_₁(map_lh_₂(unwords_lh_₁, _lh_funcomp_x⁹)))(unparas_lh_₁(_lh_funcomp_x⁸)))(_lh_unparse_arg1⁰)
//│ def unwords_lh_₁(_lh_unwords_arg1⁰) = case _lh_unwords_arg1⁰ of {
//│ 	LH_N  => (fun ys² -> ys²)
//│ 	| LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => 
//│ 		let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {
//│ 			LH_N  => (fun ys³ -> ys³)
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => 
//│ 				let t² = mappend_lh_₁₂(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))
//│ 				in let h² = ' '
//│ 				in (fun ys⁴ -> 
//│ 					let t³ = t²(ys⁴)
//│ 					in let h³ = h²
//│ 					in (fun ys⁵ -> [LH_C h³ t³(ys⁵)]))
//│ 			| _  => error⁰})
//│ 		in mappend_lh_₁₃(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def width_tl_lh_₁(_lh_width_tl_arg1⁰) = fst3_lh_₁(_lh_width_tl_arg1⁰)
//│ def width_tl_lh_₂(_lh_width_tl_arg1¹) = fst3_lh_₁(_lh_width_tl_arg1¹)
//│ def words_lh_₁(_lh_words_arg1⁰) = 
//│ 	let _lh_matchIdent³ = dropWhile_lh_₁(isSpace_lh_₁, _lh_words_arg1⁰)
//│ 	in _lh_matchIdent³(99)
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ testPara_nofib_lh_₁(primId⁰(0))
//│ def break_lh_₁(_lh_break_arg1², _lh_break_arg2²) = case _lh_break_arg2² of {
//│ 	LH_N  => [LH_P2 [LH_N] (fun _lh_dummy⁴ -> (fun f⁹ -> [LH_N]))]
//│ 	| LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1²(_lh_break_LH_C_0¹) then [LH_P2 [LH_N] 
//│ 		let _lh_lines_LH_C_1⁰ = _lh_break_LH_C_1¹
//│ 		in let _lh_lines_LH_C_0⁰ = _lh_break_LH_C_0¹
//│ 		in (fun _lh_dummy⁵ -> 
//│ 			let _lh_matchIdent¹³ = break_lh_₁((fun x⁵ -> polyEq⁰(x⁵, '|')), _lh_lines_LH_C_1⁰)
//│ 			in case _lh_matchIdent¹³ of {
//│ 				LH_P2 _lh_lines_LH_P2_0² _lh_lines_LH_P2_1² => 
//│ 					let t³³ = 	
//│ 						let _lh_matchIdent¹⁴ = _lh_lines_LH_P2_1²
//│ 						in _lh_matchIdent¹⁴(99)
//│ 					in let h³³ = _lh_lines_LH_P2_0²
//│ 					in (fun f¹⁰ -> [LH_C f¹⁰(h³³) t³³(f¹⁰)])
//│ 				| _  => error⁰})] else 
//│ 		let _lh_matchIdent¹⁵ = break_lh_₁(_lh_break_arg1², _lh_break_LH_C_1¹)
//│ 		in case _lh_matchIdent¹⁵ of {
//│ 			LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def break_lh_₂(_lh_break_arg1⁰, _lh_break_arg2⁰) = case _lh_break_arg2⁰ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1⁰(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else 
//│ 		let _lh_matchIdent⁴ = break_lh_₂(_lh_break_arg1⁰, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent⁴ of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def ceildiv_lh_₁(_lh_ceildiv_arg1⁰, _lh_ceildiv_arg2⁰) = div⁰(((_lh_ceildiv_arg1⁰ + _lh_ceildiv_arg2⁰) - 1), _lh_ceildiv_arg2⁰)
//│ def concat_lh_₁(lss¹) = case lss¹ of {
//│ 	LH_C h³⁹ t³⁹ => mappend_lh_₁₀(h³⁹, concat_lh_₁(t³⁹))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₂(lss⁰) = lss⁰(99)
//│ def cons'_lh_₁(_lh_cons'_arg1², _lh_cons'_arg2²) = _lh_cons'_arg2²(_lh_cons'_arg1²)
//│ def cons'_lh_₂(_lh_cons'_arg1⁰, _lh_cons'_arg2⁰) = case _lh_cons'_arg2⁰ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]
//│ 	| _  => error⁰}
//│ def cons'_lh_₃(_lh_cons'_arg1¹, _lh_cons'_arg2¹) = case _lh_cons'_arg2¹ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]
//│ 	| _  => error⁰}
//│ def cost_tl_lh_₁(_lh_cost_tl_arg1²) = snd3_lh_₁(_lh_cost_tl_arg1²)
//│ def cost_tl_lh_₂(_lh_cost_tl_arg1⁰) = snd3_lh_₁(_lh_cost_tl_arg1⁰)
//│ def cost_tl_lh_₃(_lh_cost_tl_arg1¹) = snd3_lh_₁(_lh_cost_tl_arg1¹)
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => (fun _lh_dummy⁰ -> [LH_N])
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else 
//│ 		let _lh_words_LH_C_1⁰ = _lh_dropWhile_LH_C_1⁰
//│ 		in let _lh_words_LH_C_0⁰ = _lh_dropWhile_LH_C_0⁰
//│ 		in (fun _lh_dummy¹ -> 
//│ 			let _lh_matchIdent¹⁰ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ 			in case _lh_matchIdent¹⁰ of {
//│ 				LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ 
//│ 					let _lh_matchIdent¹¹ = dropWhile_lh_₁(isSpace_lh_₁, _lh_words_LH_P2_1⁰)
//│ 					in _lh_matchIdent¹¹(99)]
//│ 				| _  => error⁰})
//│ 	| _  => error⁰}
//│ def drop_lh_₁(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def filter_lh_₁(f¹², ls¹⁵) = case ls¹⁵ of {
//│ 	LH_C h³⁵ t³⁵ => if f¹²(h³⁵) then 
//│ 		let t³⁶ = filter_lh_₁(f¹², t³⁵)
//│ 		in let h³⁶ = h³⁵
//│ 		in (fun f¹³ -> [LH_C f¹³(h³⁶) t³⁶(f¹³)]) else filter_lh_₁(f¹², t³⁵)
//│ 	| LH_N  => (fun f¹⁴ -> [LH_N])}
//│ def fmt_lh_₁(_lh_fmt_arg1⁰) = (fun _lh_funcomp_x³ -> (fun _lh_funcomp_x⁴ -> unparse_lh_₁(_lh_funcomp_x⁴((fun _lh_funcomp_x⁵ -> par3_lh_₁(concat_lh_₁(_lh_funcomp_x⁵))))))(parse_lh_₁(_lh_funcomp_x³)))(_lh_fmt_arg1⁰)
//│ def fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_arg3²) = case _lh_fold1_arg3² of {
//│ 	LH_C _lh_fold1_LH_C_0² _lh_fold1_LH_C_1² => case _lh_fold1_LH_C_1² of {
//│ 		LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²)
//│ 		| _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_arg3¹) = case _lh_fold1_arg3¹ of {
//│ 	LH_C _lh_fold1_LH_C_0¹ _lh_fold1_LH_C_1¹ => case _lh_fold1_LH_C_1¹ of {
//│ 		LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹)
//│ 		| _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_arg3⁰) = case _lh_fold1_arg3⁰ of {
//│ 	LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {
//│ 		LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰)
//│ 		| _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}
//│ 	| _  => error⁰}
//│ def format_lh_₁(_lh_format_arg1⁰, _lh_format_arg2⁰) = case _lh_format_arg2⁰ of {
//│ 	LH_N  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let break⁰ = (fun _lh_break_arg1¹ -> (fun _lh_break_arg2¹ -> (fun _lh_break_arg3⁰ -> if polyEq⁰(_lh_break_arg1¹, _lh_break_arg2¹) then [LH_C [LH_N] _lh_break_arg3⁰] else [LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)])))
//│ 		and start⁰ = (fun _lh_start_arg1⁰ -> (fun _lh_start_arg2⁰ -> break⁰(_lh_start_arg1⁰, _lh_start_arg2⁰, [LH_C [LH_N] [LH_N]]))) 
//│ 		in fold1_lh_₃(break⁰(_lh_format_arg1⁰), start⁰(_lh_format_arg1⁰), _lh_format_arg2⁰)}
//│ def fst3_lh_₁(_lh_fst3_arg1⁰) = case _lh_fst3_arg1⁰ of {
//│ 	LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰
//│ 	| _  => error⁰}
//│ def head'_lh_₁(_lh_head'_arg1⁰) = case _lh_head'_arg1⁰ of {
//│ 	LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0⁰)) then head_lh_₇(_lh_head'_LH_P2_0⁰) else head_lh_₇(_lh_head'_LH_P2_1⁰)
//│ 	| _  => error⁰}
//│ def head'_lh_₂(_lh_head'_arg1¹) = case _lh_head'_arg1¹ of {
//│ 	LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_head'_LH_P2_0¹)) then head_lh_₇(_lh_head'_LH_P2_0¹) else head_lh_₇(_lh_head'_LH_P2_1¹)
//│ 	| _  => error⁰}
//│ def head_lh_₁(ls¹⁷) = case ls¹⁷ of {
//│ 	LH_C h³⁸ t³⁸ => h³⁸
//│ 	| LH_N  => error⁰}
//│ def head_lh_₂(ls¹) = case ls¹ of {
//│ 	LH_C h⁶ t⁶ => h⁶
//│ 	| LH_N  => error⁰}
//│ def head_lh_₃(ls¹⁶) = case ls¹⁶ of {
//│ 	LH_C h³⁷ t³⁷ => h³⁷
//│ 	| LH_N  => error⁰}
//│ def head_lh_₄(ls⁶) = case ls⁶ of {
//│ 	LH_C h¹⁷ t¹⁷ => h¹⁷
//│ 	| LH_N  => error⁰}
//│ def head_lh_₅(ls³) = case ls³ of {
//│ 	LH_C h¹⁴ t¹⁴ => h¹⁴
//│ 	| LH_N  => error⁰}
//│ def head_lh_₆(ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h²⁸ t²⁸ => h²⁸
//│ 	| LH_N  => error⁰}
//│ def head_lh_₇(ls¹⁹) = case ls¹⁹ of {
//│ 	LH_C h⁴³ t⁴³ => h⁴³
//│ 	| LH_N  => error⁰}
//│ def init'_lh_₁(_lh_init'_arg1¹) = case _lh_init'_arg1¹ of {
//│ 	LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₅(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then 
//│ 		let _lh_matchIdent¹² = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ 		in case _lh_matchIdent¹² of {
//│ 			LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₂(_lh_init'_LH_P2_1²)]
//│ 	| _  => error⁰}
//│ def init'_lh_₂(_lh_init'_arg1⁰) = case _lh_init'_arg1⁰ of {
//│ 	LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₅(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then 
//│ 		let _lh_matchIdent⁰ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₂(_lh_init'_LH_P2_1⁰)]
//│ 	| _  => error⁰}
//│ def isSpace_lh_₁(_lh_isSpace_arg1⁰) = polyEq⁰(_lh_isSpace_arg1⁰, ' ')
//│ def isSpace_lh_₂(_lh_isSpace_arg1¹) = polyEq⁰(_lh_isSpace_arg1¹, ' ')
//│ def last'_lh_₁(_lh_last'_arg1²) = case _lh_last'_arg1² of {
//│ 	LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₂(_lh_last'_LH_P2_1²)) then head_lh_₃(_lh_last'_LH_P2_1²) else head_lh_₄(_lh_last'_LH_P2_0²)
//│ 	| _  => error⁰}
//│ def last'_lh_₂(_lh_last'_arg1³) = case _lh_last'_arg1³ of {
//│ 	LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₄(_lh_last'_LH_P2_1³)) then head_lh_₆(_lh_last'_LH_P2_1³) else head_lh_₇(_lh_last'_LH_P2_0³)
//│ 	| _  => error⁰}
//│ def last'_lh_₃(_lh_last'_arg1¹) = case _lh_last'_arg1¹ of {
//│ 	LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1¹)) then head_lh_₇(_lh_last'_LH_P2_1¹) else head_lh_₇(_lh_last'_LH_P2_0¹)
//│ 	| _  => error⁰}
//│ def last'_lh_₄(_lh_last'_arg1⁰) = case _lh_last'_arg1⁰ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁰)) then head_lh_₇(_lh_last'_LH_P2_1⁰) else head_lh_₇(_lh_last'_LH_P2_0⁰)
//│ 	| _  => error⁰}
//│ def last'_lh_₅(_lh_last'_arg1⁴) = case _lh_last'_arg1⁴ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₅(_lh_last'_LH_P2_1⁴)) then head_lh_₇(_lh_last'_LH_P2_1⁴) else head_lh_₇(_lh_last'_LH_P2_0⁴)
//│ 	| _  => error⁰}
//│ def len_tl_lh_₁(_lh_len_tl_arg1¹) = thd3_lh_₂(_lh_len_tl_arg1¹)
//│ def len_tl_lh_₂(_lh_len_tl_arg1⁰) = thd3_lh_₂(_lh_len_tl_arg1⁰)
//│ def length_lh_₁(ls¹³) = case ls¹³ of {
//│ 	LH_C h³⁴ t³⁴ => (1 + length_lh_₁(t³⁴))
//│ 	| LH_N  => 0}
//│ def lines_lh_₁(_lh_lines_arg1⁰) = 
//│ 	let _lh_matchIdent⁶ = break_lh_₁((fun x¹ -> polyEq⁰(x¹, '|')), _lh_lines_arg1⁰)
//│ 	in case _lh_matchIdent⁶ of {
//│ 		LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => 
//│ 			let t¹² = 	
//│ 				let _lh_matchIdent⁷ = _lh_lines_LH_P2_1⁰
//│ 				in _lh_matchIdent⁷(99)
//│ 			in let h¹² = _lh_lines_LH_P2_0⁰
//│ 			in (fun f¹ -> [LH_C f¹(h¹²) t¹²(f¹)])
//│ 		| _  => error⁰}
//│ def map_lh_₁(f⁷, ls¹¹) = ls¹¹(f⁷)
//│ def map_lh_₂(f⁴, ls⁷) = case ls⁷ of {
//│ 	LH_C h¹⁹ t¹⁹ => 
//│ 		let t²⁰ = map_lh_₂(f⁴, t¹⁹)
//│ 		in let h²⁰ = f⁴(h¹⁹)
//│ 		in (fun f⁵ -> 
//│ 			let t²¹ = t²⁰(f⁵)
//│ 			in let h²¹ = f⁵(h²⁰)
//│ 			in (fun _lh_dummy² -> h²¹(t²¹(99))))
//│ 	| LH_N  => (fun f⁶ -> (fun _lh_dummy³ -> [LH_N]))}
//│ def map_lh_₃(f¹¹, ls¹⁴) = ls¹⁴(f¹¹)
//│ def map_lh_₄(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h¹ t¹ => [LH_C f⁰(h¹) map_lh_₄(f⁰, t¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f⁸, ls¹²) = case ls¹² of {
//│ 	LH_C h³² t³² => [LH_C f⁸(h³²) map_lh_₅(f⁸, t³²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f³, ls⁴) = ls⁴(f³)
//│ def mappend_lh_₁(xs³, ys⁷) = case xs³ of {
//│ 	LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁(t⁵, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₁₀(xs⁴, ys⁸) = case xs⁴ of {
//│ 	LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₁₀(t⁸, ys⁸)]
//│ 	| LH_N  => ys⁸}
//│ def mappend_lh_₁₁(xs¹⁰, ys¹⁴) = xs¹⁰(ys¹⁴)
//│ def mappend_lh_₁₂(xs¹⁶, ys²⁵) = case xs¹⁶ of {
//│ 	LH_C h⁴⁰ t⁴⁰ => 
//│ 		let t⁴¹ = mappend_lh_₁₂(t⁴⁰, ys²⁵)
//│ 		in let h⁴¹ = h⁴⁰
//│ 		in (fun ys²⁶ -> 
//│ 			let t⁴² = t⁴¹(ys²⁶)
//│ 			in let h⁴² = h⁴¹
//│ 			in (fun ys²⁷ -> [LH_C h⁴² t⁴²(ys²⁷)]))
//│ 	| LH_N  => ys²⁵}
//│ def mappend_lh_₁₃(xs¹³, ys¹⁹) = case xs¹³ of {
//│ 	LH_C h²⁴ t²⁴ => 
//│ 		let t²⁵ = mappend_lh_₁₃(t²⁴, ys¹⁹)
//│ 		in let h²⁵ = h²⁴
//│ 		in (fun ys²⁰ -> 
//│ 			let t²⁶ = t²⁵(ys²⁰)
//│ 			in let h²⁶ = h²⁵
//│ 			in (fun ys²¹ -> [LH_C h²⁶ t²⁶(ys²¹)]))
//│ 	| LH_N  => ys¹⁹}
//│ def mappend_lh_₁₄(xs⁸, ys¹²) = xs⁸(ys¹²)
//│ def mappend_lh_₁₅(xs¹⁵, ys²³) = case xs¹⁵ of {
//│ 	LH_C h³⁰ t³⁰ => 
//│ 		let t³¹ = mappend_lh_₁₅(t³⁰, ys²³)
//│ 		in let h³¹ = h³⁰
//│ 		in (fun ys²⁴ -> [LH_C h³¹ t³¹(ys²⁴)])
//│ 	| LH_N  => ys²³}
//│ def mappend_lh_₁₆(xs¹, ys¹) = xs¹(ys¹)
//│ def mappend_lh_₂(xs⁶, ys¹⁰) = case xs⁶ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂(t¹⁰, ys¹⁰)]
//│ 	| LH_N  => ys¹⁰}
//│ def mappend_lh_₃(xs², ys⁶) = case xs² of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃(t⁴, ys⁶)]
//│ 	| LH_N  => ys⁶}
//│ def mappend_lh_₄(xs¹¹, ys¹⁵) = case xs¹¹ of {
//│ 	LH_C h¹⁸ t¹⁸ => [LH_C h¹⁸ mappend_lh_₄(t¹⁸, ys¹⁵)]
//│ 	| LH_N  => ys¹⁵}
//│ def mappend_lh_₅(xs⁷, ys¹¹) = case xs⁷ of {
//│ 	LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₅(t¹¹, ys¹¹)]
//│ 	| LH_N  => ys¹¹}
//│ def mappend_lh_₆(xs⁹, ys¹³) = case xs⁹ of {
//│ 	LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₆(t¹⁵, ys¹³)]
//│ 	| LH_N  => ys¹³}
//│ def mappend_lh_₇(xs⁵, ys⁹) = case xs⁵ of {
//│ 	LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₇(t⁹, ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_lh_₈(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₈(t⁰, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₉(xs¹⁴, ys²²) = case xs¹⁴ of {
//│ 	LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₉(t²⁹, ys²²)]
//│ 	| LH_N  => ys²²}
//│ def maxw_lh_₁ = 70
//│ def maxw_lh_₂ = 70
//│ def maxw_lh_₃ = 70
//│ def min_lh_₁(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ > _lh_min_arg2⁰) then _lh_min_arg2⁰ else _lh_min_arg1⁰
//│ def min_lh_₂(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ def nil'_lh_₁(_lh_cons'_arg1³) = 
//│ 	let _lh_cons'_LH_P2_1² = [LH_N]
//│ 	in let _lh_cons'_LH_P2_0² = [LH_N]
//│ 	in if not⁰(null_lh_₃(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1³ _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1³ [LH_N]] _lh_cons'_LH_P2_0²]
//│ def null'_lh_₁(_lh_null'_arg1¹) = case _lh_null'_arg1¹ of {
//│ 	LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1¹ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₂(_lh_null'_arg1⁰) = case _lh_null'_arg1⁰ of {
//│ 	LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1⁰ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₃(_lh_null'_arg1²) = case _lh_null'_arg1² of {
//│ 	LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {
//│ 		LH_N  => case _lh_null'_LH_P2_1² of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null_lh_₁(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₂(_lh_null_arg1²) = case _lh_null_arg1² of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0² _lh_null_LH_C_1² => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₃(_lh_null_arg1³) = case _lh_null_arg1³ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₄(_lh_null_arg1¹) = case _lh_null_arg1¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₅(_lh_null_arg1⁴) = case _lh_null_arg1⁴ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁴ _lh_null_LH_C_1⁴ => [False]
//│ 	| _  => error⁰}
//│ def optw_lh_₁ = 63
//│ def optw_lh_₂ = 63
//│ def optw_lh_₃ = 63
//│ def par3_lh_₁(_lh_par3_arg1⁰) = 
//│ 	let zs⁰ = scan1_lh_₁(stepr_lh_₁, startr_lh_₁, map_lh_₄(length_lh_₁, _lh_par3_arg1⁰))
//│ 	in case [LH_P2 map_lh_₅((fun _lh_funcomp_x¹ -> (fun _lh_funcomp_x² -> len_tl_lh_₁(last'_lh_₁(_lh_funcomp_x²)))(fst3_lh_₁(_lh_funcomp_x¹))), zs⁰) thd3_lh_₁(head_lh_₁(zs⁰))] of {
//│ 		LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {
//│ 			LH_N  => [LH_N]
//│ 			| LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => 
//│ 				let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ 				in let _lh_matchIdent¹ = splitAt_lh_₁(l⁰, _lh_par3_arg1⁰)
//│ 				in _lh_matchIdent¹(_lh_tile_LH_C_0⁰, _lh_tile_LH_C_1⁰, l⁰)
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ def paras_lh_₁(_lh_paras_arg1⁰) = (fun _lh_funcomp_x⁰ -> filter_lh_₁((fun x⁰ -> polyNeq⁰([LH_N], x⁰)), format_lh_₁([LH_N], _lh_funcomp_x⁰)))(_lh_paras_arg1⁰)
//│ def parse_lh_₁(_lh_parse_arg1⁰) = (fun _lh_funcomp_x⁶ -> (fun _lh_funcomp_x⁷ -> paras_lh_₁(_lh_funcomp_x⁷(words_lh_₁)))(
//│ 	let _lh_matchIdent⁸ = break_lh_₁((fun x² -> polyEq⁰(x², '|')), _lh_funcomp_x⁶)
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => 
//│ 			let t¹³ = 	
//│ 				let _lh_matchIdent⁹ = _lh_lines_LH_P2_1¹
//│ 				in _lh_matchIdent⁹(99)
//│ 			in let h¹³ = _lh_lines_LH_P2_0¹
//│ 			in (fun f² -> [LH_C f²(h¹³) t¹³(f²)])
//│ 		| _  => error⁰}))(_lh_parse_arg1⁰)
//│ def reverse_helper_lh_₁(ls², a⁰) = case ls² of {
//│ 	LH_C h⁷ t⁷ => reverse_helper_lh_₁(t⁷, [LH_C h⁷ a⁰])
//│ 	| LH_N  => a⁰}
//│ def reverse_lh_₁(ls¹⁸) = reverse_helper_lh_₁(ls¹⁸, [LH_N])
//│ def scan1_lh_₁(_lh_scan1_arg1⁰, _lh_scan1_arg2⁰) = fold1_lh_₁((fun a² -> (fun s⁰ -> [LH_C _lh_scan1_arg1⁰(a², head_lh_₂(s⁰)) s⁰])), (fun a³ -> [LH_C _lh_scan1_arg2⁰(a³) [LH_N]]))
//│ def single'_lh_₁(_lh_single'_arg1⁰) = case _lh_single'_arg1⁰ of {
//│ 	LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₅(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₅(_lh_single'_LH_P2_1⁰)))
//│ 	| _  => error⁰}
//│ def single'_lh_₂(_lh_single'_arg1¹) = case _lh_single'_arg1¹ of {
//│ 	LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₅(_lh_single'_LH_P2_1¹)))
//│ 	| _  => error⁰}
//│ def single_lh_₁(_lh_single_arg1⁰) = case _lh_single_arg1⁰ of {
//│ 	LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def snd3_lh_₁(_lh_snd3_arg1⁰) = case _lh_snd3_arg1⁰ of {
//│ 	LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰
//│ 	| _  => error⁰}
//│ def splitAt_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰, _lh_tile_LH_C_0¹, _lh_tile_LH_C_1¹, l¹) = 
//│ 	let _lh_tile_LH_P2_1¹ = drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)
//│ 	in let _lh_tile_LH_P2_0¹ = take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)
//│ 	in [LH_C _lh_tile_LH_P2_0¹ case [LH_P2 drop_lh_₁(l¹, [LH_C _lh_tile_LH_C_0¹ _lh_tile_LH_C_1¹]) _lh_tile_LH_C_0¹] of {
//│ 		LH_P2 _lh_tile_LH_P2_0² _lh_tile_LH_P2_1² => case _lh_tile_LH_P2_0² of {
//│ 			LH_N  => [LH_N]
//│ 			| LH_C _lh_tile_LH_C_0² _lh_tile_LH_C_1² => 
//│ 				let l² = (_lh_tile_LH_P2_1² - _lh_tile_LH_C_0²)
//│ 				in let _lh_matchIdent² = splitAt_lh_₁(l², _lh_tile_LH_P2_1¹)
//│ 				in _lh_matchIdent²(_lh_tile_LH_C_0², _lh_tile_LH_C_1², l²)
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}]
//│ def splitAt_lh_₂(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹) = [LH_P2 take_lh_₁(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹) drop_lh_₁(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹)]
//│ def startr_lh_₁(_lh_startr_arg1⁰) = if (_lh_startr_arg1⁰ <= maxw_lh_₁) then [LH_P3 nil'_lh_₁([LH_P3 0 0 0]) _lh_startr_arg1⁰ 1] else error⁰([LH_C 's' [LH_C 't' [LH_C 'a' [LH_C 'r' [LH_C 't' [LH_C 'r' [LH_C ' ' [LH_C 'p' [LH_C 'a' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]]]]]]])
//│ def stepr_lh_₁(_lh_stepr_arg1⁰, _lh_stepr_arg2⁰) = case _lh_stepr_arg2⁰ of {
//│ 	LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => 
//│ 		let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ 		in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ 		in let single⁰ = (fun p⁰ -> (len_tl_lh_₂(p⁰) == 0))
//│ 		in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh_₁(p¹)) - 1))
//│ 		in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh_₃(p²) + 
//│ 			let a¹ = (optw_lh_₃ - width_hd⁰(p²))
//│ 			in (a¹ * a¹)))
//│ 		in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh_₂(p³)) - 1))
//│ 		in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + 
//│ 			let x⁴ = (optw_lh_₁ - old_width_hd⁰(p⁴))
//│ 			in (x⁴ * x⁴)) _lh_stepr_LH_P3_2⁰])
//│ 		in let trim⁰ = (fun ps_pq⁰ -> if null'_lh_₂(ps_pq⁰) then ps_pq⁰ else if single'_lh_₂(ps_pq⁰) then ps_pq⁰ else 
//│ 			let ps_p⁰ = init'_lh_₂(ps_pq⁰)
//│ 			in let q⁰ = last'_lh_₃(ps_pq⁰)
//│ 			in let p⁵ = last'_lh_₄(ps_p⁰)
//│ 			in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ 		in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh_₁(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh_₂(ps_p¹)) > maxw_lh_₃) then drop_nofit⁰(init'_lh_₁(ps_p¹)) else ps_p¹)
//│ 		in let bf⁰ = (fun p⁶ -> (fun q¹ -> 
//│ 			let wqh⁰ = width_hd⁰(q¹)
//│ 			in let rqh⁰ = ((maxw_lh_₂ - wqh⁰) + 1)
//│ 			in if (single⁰(q¹) && (cost_tl_lh_₁(p⁶) == 0)) then min_lh_₂((optw_lh_₂ - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh_₁(ceildiv_lh_₁((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ 		in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh_₁(qr_rs⁰) || null'_lh_₃(qr_rs⁰)) then cons'_lh_₃(p⁷, qr_rs⁰) else 
//│ 			let q² = head'_lh_₂(qr_rs⁰)
//│ 			in let r_rs⁰ = tail'_lh_₁(qr_rs⁰)
//│ 			in let r⁰ = head'_lh_₁(r_rs⁰)
//│ 			in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh_₂(p⁷, qr_rs⁰)))
//│ 		in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₅(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]
//│ 	| _  => error⁰}
//│ def tail'_lh_₁(_lh_tail'_arg1⁰) = case _lh_tail'_arg1⁰ of {
//│ 	LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₅(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then 
//│ 		let _lh_matchIdent¹⁶ = splitAt_lh_₂(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ 		in case _lh_matchIdent¹⁶ of {
//│ 			LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]
//│ 			| _  => error⁰} else [LH_P2 tail_lh_₂(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]
//│ 	| _  => error⁰}
//│ def tail_lh_₁(ls⁸) = case ls⁸ of {
//│ 	LH_C h²³ t²³ => t²³
//│ 	| LH_N  => error⁰}
//│ def tail_lh_₂(ls⁵) = case ls⁵ of {
//│ 	LH_C h¹⁶ t¹⁶ => t¹⁶
//│ 	| LH_N  => error⁰}
//│ def take_lh_₁(n⁰, ls⁹) = if (n⁰ > 0) then case ls⁹ of {
//│ 	LH_C h²⁷ t²⁷ => [LH_C h²⁷ take_lh_₁((n⁰ - 1), t²⁷)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPara_nofib_lh_₁(_lh_testPara_nofib_arg1⁰) = 
//│ 	let test⁰ = mappend_lh_₅(mappend_lh_₆(mappend_lh_₇(mappend_lh_₃(mappend_lh_₂(mappend_lh_₈(mappend_lh_₉(mappend_lh_₁(mappend_lh_₄(primId⁰([LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'u' [LH_C 'c' [LH_C 't' [LH_C 'i' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C 'm' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'o' [LH_C 'n' [LH_C 'p' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]), primId⁰([LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C 's' [LH_C '.' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ',' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'h' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'y' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C ' ' [LH_C 'w' [LH_C 'e' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_C 'k' [LH_C 'n' [LH_C 'o' [LH_C 'w' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 's' [LH_C 'i' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C '.' [LH_C ' ' [LH_C 'H' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'o' [LH_C 'm' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'm' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 't' [LH_C 'a' [LH_C 'i' [LH_C 'l' [LH_C 's' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'g' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'b' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C ' ' [LH_C 'T' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'i' [LH_C 'c' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'l' [LH_C 'e' [LH_C 's' [LH_C 's' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C '|' [LH_C ' ' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]))
//│ 	in if null_lh_₁(test⁰) then [LH_N] else fmt_lh_₁(test⁰)
//│ def thd3_lh_₁(_lh_thd3_arg1¹) = case _lh_thd3_arg1¹ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0¹ _lh_thd3_LH_P3_1¹ _lh_thd3_LH_P3_2¹ => _lh_thd3_LH_P3_2¹
//│ 	| _  => error⁰}
//│ def thd3_lh_₂(_lh_thd3_arg1⁰) = case _lh_thd3_arg1⁰ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰
//│ 	| _  => error⁰}
//│ def tile_lh_₁(_lh_tile_arg1⁰, _lh_tile_arg2⁰) = case _lh_tile_arg2⁰ of {
//│ 	LH_P2 _lh_tile_LH_P2_0³ _lh_tile_LH_P2_1³ => case _lh_tile_LH_P2_0³ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_tile_LH_C_0³ _lh_tile_LH_C_1³ => 
//│ 			let l³ = (_lh_tile_LH_P2_1³ - _lh_tile_LH_C_0³)
//│ 			in let _lh_matchIdent⁵ = splitAt_lh_₁(l³, _lh_tile_arg1⁰)
//│ 			in _lh_matchIdent⁵(_lh_tile_LH_C_0³, _lh_tile_LH_C_1³, l³)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def unformat_lh_₁(_lh_unformat_arg1⁰) = fold1_lh_₂((fun xs¹² -> (fun ys¹⁶ -> mappend_lh_₁₅(xs¹², 
//│ 	let t²² = (fun ys¹⁷ -> ys¹⁷)
//│ 	in let h²² = _lh_unformat_arg1⁰
//│ 	in (fun ys¹⁸ -> [LH_C h²² t²²(ys¹⁸)]), ys¹⁶))), (fun x³ -> x³))
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = _lh_unlines_arg1⁰((fun l⁴ -> l⁴(
//│ 	let t⁴⁴ = (fun ys²⁸ -> ys²⁸)
//│ 	in let h⁴⁴ = '|'
//│ 	in (fun ys²⁹ -> [LH_C h⁴⁴ t⁴⁴(ys²⁹)]))), 99)
//│ def unparas_lh_₁(_lh_unparas_arg1⁰) = unformat_lh_₁([LH_N], _lh_unparas_arg1⁰)
//│ def unparse_lh_₁(_lh_unparse_arg1⁰) = (fun _lh_funcomp_x⁸ -> (fun _lh_funcomp_x⁹ -> unlines_lh_₁(map_lh_₂(unwords_lh_₁, _lh_funcomp_x⁹)))(unparas_lh_₁(_lh_funcomp_x⁸)))(_lh_unparse_arg1⁰)
//│ def unwords_lh_₁(_lh_unwords_arg1⁰) = case _lh_unwords_arg1⁰ of {
//│ 	LH_N  => (fun ys² -> ys²)
//│ 	| LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => 
//│ 		let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {
//│ 			LH_N  => (fun ys³ -> ys³)
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => 
//│ 				let t² = mappend_lh_₁₂(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))
//│ 				in let h² = ' '
//│ 				in (fun ys⁴ -> 
//│ 					let t³ = t²(ys⁴)
//│ 					in let h³ = h²
//│ 					in (fun ys⁵ -> [LH_C h³ t³(ys⁵)]))
//│ 			| _  => error⁰})
//│ 		in mappend_lh_₁₃(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def width_tl_lh_₁(_lh_width_tl_arg1⁰) = fst3_lh_₁(_lh_width_tl_arg1⁰)
//│ def width_tl_lh_₂(_lh_width_tl_arg1¹) = fst3_lh_₁(_lh_width_tl_arg1¹)
//│ def words_lh_₁(_lh_words_arg1⁰) = 
//│ 	let _lh_matchIdent³ = dropWhile_lh_₁(isSpace_lh_₁, _lh_words_arg1⁰)
//│ 	in _lh_matchIdent³(99)
//│ <<<<<<< after floating out <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
