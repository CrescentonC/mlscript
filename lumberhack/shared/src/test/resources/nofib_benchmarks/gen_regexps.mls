:NewParser
:ParseOnly


:lhInHaskell
:lhGenOCaml
span p [] = ([], [])
span p (h:t) = if (p h) then
                    case (span p t) of {
                      (f, s) -> (h:f, s)
                    }
                else
                  ([], (h:t))
max a b = if a > b then a else b
numchars l = sum $ (map length l)
expand [] = [""]
expand ('<':x) = numericRule x
expand ('[':x) = alphabeticRule x
expand x = constantRule x
constantRule (c:rest) = [ c:z | z <- expand rest ]
alphabeticRule (a:('-':(b:(']':rest)))) =
  if ((int_of_char a) <= (int_of_char b)) then
    [(char_of_int c):z | c <- [(int_of_char a)..(int_of_char b)], z <- expand rest]
  else
    [(char_of_int c):z | c <- reverse [(int_of_char b)..(int_of_char a)], z <- expand rest]
mknum s = foldl (\ u c -> (u * 10) + ((int_of_char c) - (int_of_char '0'))) 0 s
pad s w  = [ '0' | i <- [1 .. (w - (length s))]] ++ s
numericRule x = case (span (\c -> (polyNeq c '-')) x) of {
                  (p, (_:q)) -> case (span (\c -> (polyNeq c '>')) q) of {
                    (r, (_:s)) -> case (mknum p, mknum r) of {
                      (u, v) ->
                        let width = (max (length (string_of_int u)) (length (string_of_int v))) in
                                  [ (pad (string_of_int i) width) ++ z | i <- (if (u < v) then [u..v] else [u,(u-1)..v]), z <- expand s ]
                    }
                  }
                }
testGenRegexs_nofib e = concat (expand e)
testGenRegexs_nofib $ primId "[a-j][a-j][a-j][0-9]"
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testGenRegexs_nofib_lh_₁^682(primId⁰([LH_C '[' [LH_C 'a' [LH_C '-' [LH_C 'j' [LH_C ']' [LH_C '[' [LH_C 'a' [LH_C '-' [LH_C 'j' [LH_C ']' [LH_C '[' [LH_C 'a' [LH_C '-' [LH_C 'j' [LH_C ']' [LH_C '[' [LH_C '0' [LH_C '-' [LH_C '9' [LH_C ']' [LH_N]]]]]]]]]]]]]]]]]]]]]))
//│ def alphabeticRule_lh_₁(_lh_alphabeticRule_arg1⁰) = case _lh_alphabeticRule_arg1⁰ of {
//│ 	LH_C _lh_alphabeticRule_LH_C_0⁰ _lh_alphabeticRule_LH_C_1⁰ => case _lh_alphabeticRule_LH_C_1⁰ of {
//│ 		LH_C _lh_alphabeticRule_LH_C_0¹ _lh_alphabeticRule_LH_C_1¹ => case _lh_alphabeticRule_LH_C_0¹ of {
//│ 			'-'  => case _lh_alphabeticRule_LH_C_1¹ of {
//│ 				LH_C _lh_alphabeticRule_LH_C_0² _lh_alphabeticRule_LH_C_1² => case _lh_alphabeticRule_LH_C_1² of {
//│ 					LH_C _lh_alphabeticRule_LH_C_0³ _lh_alphabeticRule_LH_C_1³ => case _lh_alphabeticRule_LH_C_0³ of {
//│ 						']'  => if (int_of_char⁰(_lh_alphabeticRule_LH_C_0⁰) <= int_of_char⁰(_lh_alphabeticRule_LH_C_0²)) then 
//│ 							let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 								LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => 
//│ 									let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 										LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]
//│ 										| LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ 									in _lh_listcomp_fun⁴(expand_lh_₁^530(_lh_alphabeticRule_LH_C_1³))
//│ 								| LH_N  => [LH_N]})
//│ 							in _lh_listcomp_fun³(enumFromTo_lh_₁^539(int_of_char⁰(_lh_alphabeticRule_LH_C_0⁰), int_of_char⁰(_lh_alphabeticRule_LH_C_0²))) else 
//│ 							let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 								LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => 
//│ 									let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 										LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)]
//│ 										| LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)})
//│ 									in _lh_listcomp_fun⁶(expand_lh_₁^567(_lh_alphabeticRule_LH_C_1³))
//│ 								| LH_N  => [LH_N]})
//│ 							in _lh_listcomp_fun⁵(reverse_lh_₁^576(enumFromTo_lh_₂^577(int_of_char⁰(_lh_alphabeticRule_LH_C_0²), int_of_char⁰(_lh_alphabeticRule_LH_C_0⁰))))
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def concat_lh_₁(lss⁰) = case lss⁰ of {
//│ 	LH_C h⁹ t¹⁰ => mappend_lh_₁^646(h⁹, concat_lh_₁^649(t¹⁰))
//│ 	| LH_N  => [LH_N]}
//│ def constantRule_lh_₁(_lh_constantRule_arg1¹) = case _lh_constantRule_arg1¹ of {
//│ 	LH_C _lh_constantRule_LH_C_0¹ _lh_constantRule_LH_C_1¹ => 
//│ 		let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁸(expand_lh_₁^637(_lh_constantRule_LH_C_1¹))
//│ 	| _  => error⁰}
//│ def constantRule_lh_₂(_lh_constantRule_arg1⁰) = case _lh_constantRule_arg1⁰ of {
//│ 	LH_C _lh_constantRule_LH_C_0⁰ _lh_constantRule_LH_C_1⁰ => 
//│ 		let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => [LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁷(expand_lh_₁^616(_lh_constantRule_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def enumFromThenTo_lh_₁(a³, t⁸, b²) = if (a³ <= b²) then [LH_C a³ enumFromThenTo_lh_₁^303(t⁸, ((2 * t⁸) - a³), b²)] else [LH_N]
//│ def enumFromTo_lh_₁(a⁵, b⁴) = if (a⁵ <= b⁴) then [LH_C a⁵ enumFromTo_lh_₁^350((a⁵ + 1), b⁴)] else [LH_N]
//│ def enumFromTo_lh_₂(a⁴, b³) = if (a⁴ <= b³) then [LH_C a⁴ enumFromTo_lh_₂^330((a⁴ + 1), b³)] else [LH_N]
//│ def enumFromTo_lh_₃(a², b¹) = if (a² <= b¹) then [LH_C a² enumFromTo_lh_₃^283((a² + 1), b¹)] else [LH_N]
//│ def enumFromTo_lh_₄(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh_₄^30((a⁰ + 1), b⁰)] else [LH_N]
//│ def expand_lh_₁(_lh_expand_arg1⁰) = case _lh_expand_arg1⁰ of {
//│ 	LH_N  => [LH_C [LH_N] [LH_N]]
//│ 	| LH_C _lh_expand_LH_C_0⁰ _lh_expand_LH_C_1⁰ => case _lh_expand_LH_C_0⁰ of {
//│ 		'<'  => numericRule_lh_₁^661(_lh_expand_LH_C_1⁰)
//│ 		| '['  => alphabeticRule_lh_₁^664(_lh_expand_LH_C_1⁰)
//│ 		| _  => constantRule_lh_₁^667(_lh_expand_arg1⁰)}
//│ 	| _  => constantRule_lh_₂^671(_lh_expand_arg1⁰)}
//│ def foldl_lh_₁(f¹, i¹, ls²) = case ls² of {
//│ 	LH_C h³ t³ => foldl_lh_₁^62(f¹, f¹(i¹, h³), t³)
//│ 	| LH_N  => i¹}
//│ def foldl_lh_₂(f⁰, i⁰, ls¹) = case ls¹ of {
//│ 	LH_C h² t² => foldl_lh_₂^45(f⁰, f⁰(i⁰, h²), t²)
//│ 	| LH_N  => i⁰}
//│ def length_lh_₁(ls⁵) = case ls⁵ of {
//│ 	LH_C h⁷ t⁷ => (1 + length_lh_₁^244(t⁷))
//│ 	| LH_N  => 0}
//│ def length_lh_₂(ls⁴) = case ls⁴ of {
//│ 	LH_C h⁶ t⁶ => (1 + length_lh_₂^233(t⁶))
//│ 	| LH_N  => 0}
//│ def length_lh_₃(ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => (1 + length_lh_₃^5(t⁰))
//│ 	| LH_N  => 0}
//│ def mappend_lh_₁(xs², ys²) = case xs² of {
//│ 	LH_C h⁸ t⁹ => [LH_C h⁸ mappend_lh_₁^372(t⁹, ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₂(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₂^162(t⁵, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₃(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₃^14(t¹, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def max_lh_₁(_lh_max_arg1⁰, _lh_max_arg2⁰) = if (_lh_max_arg1⁰ > _lh_max_arg2⁰) then _lh_max_arg1⁰ else _lh_max_arg2⁰
//│ def mknum_lh_₁(_lh_mknum_arg1¹) = foldl_lh_₁^251((fun u¹ -> (fun c¹ -> ((u¹ * 10) + (int_of_char⁰(c¹) - int_of_char⁰('0'))))), 0, _lh_mknum_arg1¹)
//│ def mknum_lh_₂(_lh_mknum_arg1⁰) = foldl_lh_₂^172((fun u⁰ -> (fun c⁰ -> ((u⁰ * 10) + (int_of_char⁰(c⁰) - int_of_char⁰('0'))))), 0, _lh_mknum_arg1⁰)
//│ def numericRule_lh_₁(_lh_numericRule_arg1⁰) = 
//│ 	let _lh_matchIdent² = span_lh_₂^382((fun c² -> polyNeq⁰(c², '-')), _lh_numericRule_arg1⁰)
//│ 	in case _lh_matchIdent² of {
//│ 		LH_P2 _lh_numericRule_LH_P2_0⁰ _lh_numericRule_LH_P2_1⁰ => case _lh_numericRule_LH_P2_1⁰ of {
//│ 			LH_C _lh_numericRule_LH_C_0⁰ _lh_numericRule_LH_C_1⁰ => 
//│ 				let _lh_matchIdent³ = span_lh_₁^394((fun c³ -> polyNeq⁰(c³, '>')), _lh_numericRule_LH_C_1⁰)
//│ 				in case _lh_matchIdent³ of {
//│ 					LH_P2 _lh_numericRule_LH_P2_0¹ _lh_numericRule_LH_P2_1¹ => case _lh_numericRule_LH_P2_1¹ of {
//│ 						LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => 
//│ 							let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁^406(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂^409(_lh_numericRule_LH_P2_0¹)]
//│ 							in case _lh_matchIdent⁴ of {
//│ 								LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => 
//│ 									let width⁰ = max_lh_₁^414(length_lh_₁^415(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂^421(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ 									in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 										LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => 
//│ 											let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 												LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂^429(pad_lh_₁^430(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]
//│ 												| LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ 											in _lh_listcomp_fun²(expand_lh_₁^450(_lh_numericRule_LH_C_1¹))
//│ 										| LH_N  => [LH_N]})
//│ 									in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃^464(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁^469(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²))
//│ 								| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ def pad_lh_₁(_lh_pad_arg1⁰, _lh_pad_arg2⁰) = mappend_lh_₃^90(
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C '0' _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰(enumFromTo_lh_₄^101(1, (_lh_pad_arg2⁰ - length_lh_₃^107(_lh_pad_arg1⁰)))), _lh_pad_arg1⁰)
//│ def reverse_helper_lh_₁(ls³, a¹) = case ls³ of {
//│ 	LH_C h⁴ t⁴ => reverse_helper_lh_₁^79(t⁴, [LH_C h⁴ a¹])
//│ 	| LH_N  => a¹}
//│ def reverse_lh_₁(ls⁶) = reverse_helper_lh_₁^364(ls⁶, [LH_N])
//│ def span_lh_₁(_lh_span_arg1¹, _lh_span_arg2¹) = case _lh_span_arg2¹ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_span_LH_C_0¹ _lh_span_LH_C_1¹ => if _lh_span_arg1¹(_lh_span_LH_C_0¹) then 
//│ 		let _lh_matchIdent¹ = span_lh_₁^205(_lh_span_arg1¹, _lh_span_LH_C_1¹)
//│ 		in case _lh_matchIdent¹ of {
//│ 			LH_P2 _lh_span_LH_P2_0¹ _lh_span_LH_P2_1¹ => [LH_P2 [LH_C _lh_span_LH_C_0¹ _lh_span_LH_P2_0¹] _lh_span_LH_P2_1¹]
//│ 			| _  => error⁰} else [LH_P2 [LH_N] [LH_C _lh_span_LH_C_0¹ _lh_span_LH_C_1¹]]
//│ 	| _  => error⁰}
//│ def span_lh_₂(_lh_span_arg1⁰, _lh_span_arg2⁰) = case _lh_span_arg2⁰ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_span_LH_C_0⁰ _lh_span_LH_C_1⁰ => if _lh_span_arg1⁰(_lh_span_LH_C_0⁰) then 
//│ 		let _lh_matchIdent⁰ = span_lh_₂^126(_lh_span_arg1⁰, _lh_span_LH_C_1⁰)
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_P2 _lh_span_LH_P2_0⁰ _lh_span_LH_P2_1⁰ => [LH_P2 [LH_C _lh_span_LH_C_0⁰ _lh_span_LH_P2_0⁰] _lh_span_LH_P2_1⁰]
//│ 			| _  => error⁰} else [LH_P2 [LH_N] [LH_C _lh_span_LH_C_0⁰ _lh_span_LH_C_1⁰]]
//│ 	| _  => error⁰}
//│ def testGenRegexs_nofib_lh_₁(_lh_testGenRegexs_nofib_arg1⁰) = concat_lh_₁^676(expand_lh_₁^677(_lh_testGenRegexs_nofib_arg1⁰))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec mappend_lh__d1 xs_2 ys_2 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(h_8, t_9) -> 
//│ 		      (`LH_C(h_8, ((mappend_lh__d1 t_9) ys_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2);;
//│ 		let rec concat_lh__d1 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_9, t_1_0) -> 
//│ 		      ((mappend_lh__d1 h_9) (concat_lh__d1 t_1_0))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec span_lh__d2 _lh_span_arg1_0 _lh_span_arg2_0 =
//│ 		  (match _lh_span_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2((`LH_N), (`LH_N)))
//│ 		    | `LH_C(_lh_span_LH_C_0_0, _lh_span_LH_C_1_0) -> 
//│ 		      (if (_lh_span_arg1_0 _lh_span_LH_C_0_0) then
//│ 		        (let rec _lh_matchIdent_0 = ((span_lh__d2 _lh_span_arg1_0) _lh_span_LH_C_1_0) in
//│ 		          (match _lh_matchIdent_0 with
//│ 		            | `LH_P2(_lh_span_LH_P2_0_0, _lh_span_LH_P2_1_0) -> 
//│ 		              (`LH_P2((`LH_C(_lh_span_LH_C_0_0, _lh_span_LH_P2_0_0)), _lh_span_LH_P2_1_0))
//│ 		            | _ -> 
//│ 		              (failwith "error")))
//│ 		      else
//│ 		        (`LH_P2((`LH_N), (`LH_C(_lh_span_LH_C_0_0, _lh_span_LH_C_1_0)))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec span_lh__d1 _lh_span_arg1_1 _lh_span_arg2_1 =
//│ 		  (match _lh_span_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2((`LH_N), (`LH_N)))
//│ 		    | `LH_C(_lh_span_LH_C_0_1, _lh_span_LH_C_1_1) -> 
//│ 		      (if (_lh_span_arg1_1 _lh_span_LH_C_0_1) then
//│ 		        (let rec _lh_matchIdent_1 = ((span_lh__d1 _lh_span_arg1_1) _lh_span_LH_C_1_1) in
//│ 		          (match _lh_matchIdent_1 with
//│ 		            | `LH_P2(_lh_span_LH_P2_0_1, _lh_span_LH_P2_1_1) -> 
//│ 		              (`LH_P2((`LH_C(_lh_span_LH_C_0_1, _lh_span_LH_P2_0_1)), _lh_span_LH_P2_1_1))
//│ 		            | _ -> 
//│ 		              (failwith "error")))
//│ 		      else
//│ 		        (`LH_P2((`LH_N), (`LH_C(_lh_span_LH_C_0_1, _lh_span_LH_C_1_1)))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec foldl_lh__d1 f_1 i_1 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      (((foldl_lh__d1 f_1) ((f_1 i_1) h_3)) t_3)
//│ 		    | `LH_N -> 
//│ 		      i_1);;
//│ 		let rec mknum_lh__d1 _lh_mknum_arg1_1 =
//│ 		  (((foldl_lh__d1 (fun u_1 c_1 -> 
//│ 		    ((u_1 * 10) + ((int_of_char c_1) - (int_of_char '0'))))) 0) _lh_mknum_arg1_1);;
//│ 		let rec enumFromThenTo_lh__d1 a_3 t_8 b_2 =
//│ 		  (if (a_3 <= b_2) then
//│ 		    (`LH_C(a_3, (((enumFromThenTo_lh__d1 t_8) ((2 * t_8) - a_3)) b_2)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec mappend_lh__d3 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (`LH_C(h_1, ((mappend_lh__d3 t_1) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec enumFromTo_lh__d4 a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh__d4 (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec length_lh__d3 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (1 + (length_lh__d3 t_0))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec pad_lh__d1 _lh_pad_arg1_0 _lh_pad_arg2_0 =
//│ 		  ((mappend_lh__d3 (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		    (match _lh_listcomp_fun_para_0 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		        (`LH_C('0', (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_0 ((enumFromTo_lh__d4 1) (_lh_pad_arg2_0 - (length_lh__d3 _lh_pad_arg1_0)))))) _lh_pad_arg1_0);;
//│ 		let rec length_lh__d1 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      (1 + (length_lh__d1 t_7))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec enumFromTo_lh__d3 a_2 b_1 =
//│ 		  (if (a_2 <= b_1) then
//│ 		    (`LH_C(a_2, ((enumFromTo_lh__d3 (a_2 + 1)) b_1)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec max_lh__d1 _lh_max_arg1_0 _lh_max_arg2_0 =
//│ 		  (if (_lh_max_arg1_0 > _lh_max_arg2_0) then
//│ 		    _lh_max_arg1_0
//│ 		  else
//│ 		    _lh_max_arg2_0);;
//│ 		let rec length_lh__d2 ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      (1 + (length_lh__d2 t_6))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec mappend_lh__d2 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      (`LH_C(h_5, ((mappend_lh__d2 t_5) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec foldl_lh__d2 f_0 i_0 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (((foldl_lh__d2 f_0) ((f_0 i_0) h_2)) t_2)
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec mknum_lh__d2 _lh_mknum_arg1_0 =
//│ 		  (((foldl_lh__d2 (fun u_0 c_0 -> 
//│ 		    ((u_0 * 10) + ((int_of_char c_0) - (int_of_char '0'))))) 0) _lh_mknum_arg1_0);;
//│ 		let rec enumFromTo_lh__d2 a_4 b_3 =
//│ 		  (if (a_4 <= b_3) then
//│ 		    (`LH_C(a_4, ((enumFromTo_lh__d2 (a_4 + 1)) b_3)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec enumFromTo_lh__d1 a_5 b_4 =
//│ 		  (if (a_5 <= b_4) then
//│ 		    (`LH_C(a_5, ((enumFromTo_lh__d1 (a_5 + 1)) b_4)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec reverse_helper_lh__d1 ls_3 a_1 =
//│ 		  (match ls_3 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      ((reverse_helper_lh__d1 t_4) (`LH_C(h_4, a_1)))
//│ 		    | `LH_N -> 
//│ 		      a_1);;
//│ 		let rec reverse_lh__d1 ls_6 =
//│ 		  ((reverse_helper_lh__d1 ls_6) (`LH_N));;
//│ 		let rec alphabeticRule_lh__d1 _lh_alphabeticRule_arg1_0 =
//│ 		  (match _lh_alphabeticRule_arg1_0 with
//│ 		    | `LH_C(_lh_alphabeticRule_LH_C_0_0, _lh_alphabeticRule_LH_C_1_0) -> 
//│ 		      (match _lh_alphabeticRule_LH_C_1_0 with
//│ 		        | `LH_C(_lh_alphabeticRule_LH_C_0_1, _lh_alphabeticRule_LH_C_1_1) -> 
//│ 		          (match _lh_alphabeticRule_LH_C_0_1 with
//│ 		            | '-' -> 
//│ 		              (match _lh_alphabeticRule_LH_C_1_1 with
//│ 		                | `LH_C(_lh_alphabeticRule_LH_C_0_2, _lh_alphabeticRule_LH_C_1_2) -> 
//│ 		                  (match _lh_alphabeticRule_LH_C_1_2 with
//│ 		                    | `LH_C(_lh_alphabeticRule_LH_C_0_3, _lh_alphabeticRule_LH_C_1_3) -> 
//│ 		                      (match _lh_alphabeticRule_LH_C_0_3 with
//│ 		                        | ']' -> 
//│ 		                          (if ((int_of_char _lh_alphabeticRule_LH_C_0_0) <= (int_of_char _lh_alphabeticRule_LH_C_0_2)) then
//│ 		                            (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		                              (match _lh_listcomp_fun_para_3 with
//│ 		                                | `LH_C(_lh_listcomp_fun_ls_h_3, _lh_listcomp_fun_ls_t_3) -> 
//│ 		                                  (let rec _lh_listcomp_fun_4 = (fun _lh_listcomp_fun_para_4 -> 
//│ 		                                    (match _lh_listcomp_fun_para_4 with
//│ 		                                      | `LH_C(_lh_listcomp_fun_ls_h_4, _lh_listcomp_fun_ls_t_4) -> 
//│ 		                                        (`LH_C((`LH_C((char_of_int _lh_listcomp_fun_ls_h_3), _lh_listcomp_fun_ls_h_4)), (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4)))
//│ 		                                      | `LH_N -> 
//│ 		                                        (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3))) in
//│ 		                                    (_lh_listcomp_fun_4 (expand_lh__d1 _lh_alphabeticRule_LH_C_1_3)))
//│ 		                                | `LH_N -> 
//│ 		                                  (`LH_N))) in
//│ 		                              (_lh_listcomp_fun_3 ((enumFromTo_lh__d1 (int_of_char _lh_alphabeticRule_LH_C_0_0)) (int_of_char _lh_alphabeticRule_LH_C_0_2))))
//│ 		                          else
//│ 		                            (let rec _lh_listcomp_fun_5 = (fun _lh_listcomp_fun_para_5 -> 
//│ 		                              (match _lh_listcomp_fun_para_5 with
//│ 		                                | `LH_C(_lh_listcomp_fun_ls_h_5, _lh_listcomp_fun_ls_t_5) -> 
//│ 		                                  (let rec _lh_listcomp_fun_6 = (fun _lh_listcomp_fun_para_6 -> 
//│ 		                                    (match _lh_listcomp_fun_para_6 with
//│ 		                                      | `LH_C(_lh_listcomp_fun_ls_h_6, _lh_listcomp_fun_ls_t_6) -> 
//│ 		                                        (`LH_C((`LH_C((char_of_int _lh_listcomp_fun_ls_h_5), _lh_listcomp_fun_ls_h_6)), (_lh_listcomp_fun_6 _lh_listcomp_fun_ls_t_6)))
//│ 		                                      | `LH_N -> 
//│ 		                                        (_lh_listcomp_fun_5 _lh_listcomp_fun_ls_t_5))) in
//│ 		                                    (_lh_listcomp_fun_6 (expand_lh__d1 _lh_alphabeticRule_LH_C_1_3)))
//│ 		                                | `LH_N -> 
//│ 		                                  (`LH_N))) in
//│ 		                              (_lh_listcomp_fun_5 (reverse_lh__d1 ((enumFromTo_lh__d2 (int_of_char _lh_alphabeticRule_LH_C_0_2)) (int_of_char _lh_alphabeticRule_LH_C_0_0))))))
//│ 		                        | _ -> 
//│ 		                          (failwith "error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "error"))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))
//│ 		            | _ -> 
//│ 		              (failwith "error"))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and
//│ 		constantRule_lh__d1 _lh_constantRule_arg1_1 =
//│ 		  (match _lh_constantRule_arg1_1 with
//│ 		    | `LH_C(_lh_constantRule_LH_C_0_1, _lh_constantRule_LH_C_1_1) -> 
//│ 		      (let rec _lh_listcomp_fun_8 = (fun _lh_listcomp_fun_para_8 -> 
//│ 		        (match _lh_listcomp_fun_para_8 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_8, _lh_listcomp_fun_ls_t_8) -> 
//│ 		            (`LH_C((`LH_C(_lh_constantRule_LH_C_0_1, _lh_listcomp_fun_ls_h_8)), (_lh_listcomp_fun_8 _lh_listcomp_fun_ls_t_8)))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_8 (expand_lh__d1 _lh_constantRule_LH_C_1_1)))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and
//│ 		constantRule_lh__d2 _lh_constantRule_arg1_0 =
//│ 		  (match _lh_constantRule_arg1_0 with
//│ 		    | `LH_C(_lh_constantRule_LH_C_0_0, _lh_constantRule_LH_C_1_0) -> 
//│ 		      (let rec _lh_listcomp_fun_7 = (fun _lh_listcomp_fun_para_7 -> 
//│ 		        (match _lh_listcomp_fun_para_7 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_7, _lh_listcomp_fun_ls_t_7) -> 
//│ 		            (`LH_C((`LH_C(_lh_constantRule_LH_C_0_0, _lh_listcomp_fun_ls_h_7)), (_lh_listcomp_fun_7 _lh_listcomp_fun_ls_t_7)))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_7 (expand_lh__d1 _lh_constantRule_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and
//│ 		expand_lh__d1 _lh_expand_arg1_0 =
//│ 		  (match _lh_expand_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_C((`LH_N), (`LH_N)))
//│ 		    | `LH_C(_lh_expand_LH_C_0_0, _lh_expand_LH_C_1_0) -> 
//│ 		      (match _lh_expand_LH_C_0_0 with
//│ 		        | '<' -> 
//│ 		          (numericRule_lh__d1 _lh_expand_LH_C_1_0)
//│ 		        | '[' -> 
//│ 		          (alphabeticRule_lh__d1 _lh_expand_LH_C_1_0)
//│ 		        | _ -> 
//│ 		          (constantRule_lh__d1 _lh_expand_arg1_0))
//│ 		    | _ -> 
//│ 		      (constantRule_lh__d2 _lh_expand_arg1_0))
//│ 		and
//│ 		numericRule_lh__d1 _lh_numericRule_arg1_0 =
//│ 		  (let rec _lh_matchIdent_2 = ((span_lh__d2 (fun c_2 -> 
//│ 		    (c_2 <> '-'))) _lh_numericRule_arg1_0) in
//│ 		    (match _lh_matchIdent_2 with
//│ 		      | `LH_P2(_lh_numericRule_LH_P2_0_0, _lh_numericRule_LH_P2_1_0) -> 
//│ 		        (match _lh_numericRule_LH_P2_1_0 with
//│ 		          | `LH_C(_lh_numericRule_LH_C_0_0, _lh_numericRule_LH_C_1_0) -> 
//│ 		            (let rec _lh_matchIdent_3 = ((span_lh__d1 (fun c_3 -> 
//│ 		              (c_3 <> '>'))) _lh_numericRule_LH_C_1_0) in
//│ 		              (match _lh_matchIdent_3 with
//│ 		                | `LH_P2(_lh_numericRule_LH_P2_0_1, _lh_numericRule_LH_P2_1_1) -> 
//│ 		                  (match _lh_numericRule_LH_P2_1_1 with
//│ 		                    | `LH_C(_lh_numericRule_LH_C_0_1, _lh_numericRule_LH_C_1_1) -> 
//│ 		                      (let rec _lh_matchIdent_4 = (`LH_P2((mknum_lh__d1 _lh_numericRule_LH_P2_0_0), (mknum_lh__d2 _lh_numericRule_LH_P2_0_1))) in
//│ 		                        (match _lh_matchIdent_4 with
//│ 		                          | `LH_P2(_lh_numericRule_LH_P2_0_2, _lh_numericRule_LH_P2_1_2) -> 
//│ 		                            (let rec width_0 = ((max_lh__d1 (length_lh__d1 (string_of_int _lh_numericRule_LH_P2_0_2))) (length_lh__d2 (string_of_int _lh_numericRule_LH_P2_1_2))) in
//│ 		                              (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		                                (match _lh_listcomp_fun_para_1 with
//│ 		                                  | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		                                    (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		                                      (match _lh_listcomp_fun_para_2 with
//│ 		                                        | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		                                          (`LH_C(((mappend_lh__d2 ((pad_lh__d1 (string_of_int _lh_listcomp_fun_ls_h_1)) width_0)) _lh_listcomp_fun_ls_h_2), (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2)))
//│ 		                                        | `LH_N -> 
//│ 		                                          (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))) in
//│ 		                                      (_lh_listcomp_fun_2 (expand_lh__d1 _lh_numericRule_LH_C_1_1)))
//│ 		                                  | `LH_N -> 
//│ 		                                    (`LH_N))) in
//│ 		                                (_lh_listcomp_fun_1 (if (_lh_numericRule_LH_P2_0_2 < _lh_numericRule_LH_P2_1_2) then
//│ 		                                  ((enumFromTo_lh__d3 _lh_numericRule_LH_P2_0_2) _lh_numericRule_LH_P2_1_2)
//│ 		                                else
//│ 		                                  (((enumFromThenTo_lh__d1 _lh_numericRule_LH_P2_0_2) (_lh_numericRule_LH_P2_0_2 - 1)) _lh_numericRule_LH_P2_1_2)))))
//│ 		                          | _ -> 
//│ 		                            (failwith "error")))
//│ 		                    | _ -> 
//│ 		                      (failwith "error"))
//│ 		                | _ -> 
//│ 		                  (failwith "error")))
//│ 		          | _ -> 
//│ 		            (failwith "error"))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec testGenRegexs_nofib_lh__d1 _lh_testGenRegexs_nofib_arg1_0 =
//│ 		  (concat_lh__d1 (expand_lh__d1 _lh_testGenRegexs_nofib_arg1_0));;
//│ 		(testGenRegexs_nofib_lh__d1 (`LH_C('[', (`LH_C('a', (`LH_C('-', (`LH_C('j', (`LH_C(']', (`LH_C('[', (`LH_C('a', (`LH_C('-', (`LH_C('j', (`LH_C(']', (`LH_C('[', (`LH_C('a', (`LH_C('-', (`LH_C('j', (`LH_C(']', (`LH_C('[', (`LH_C('0', (`LH_C('-', (`LH_C('9', (`LH_C(']', (`LH_N))))))))))))))))))))))))))))))))))))))))))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C h¹ mappend_lh_₃(t¹, ys⁰)]: 19 --->
//│ 	case xs¹ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₂(t⁵, ys¹)] | LH_N  => ys¹}: 169
//│ [LH_C a⁰ enumFromTo_lh_₄((a⁰ + 1), b⁰)]: 39 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C '0' _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | LH_N  => [LH_N]}: 98
//│ [LH_N]: 40 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C '0' _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | LH_N  => [LH_N]}: 98
//│ [LH_C h⁴ a¹]: 84 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)})
//│ in _lh_listcomp_fun⁶(expand_lh_₁(_lh_alphabeticRule_LH_C_1³)) | LH_N  => [LH_N]}: 573
//│ [LH_C '0' _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 96 --->
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₃(t¹, ys⁰)] | LH_N  => ys⁰}: 21
//│ [LH_N]: 97 --->
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₃(t¹, ys⁰)] | LH_N  => ys⁰}: 21
//│ [LH_N]: 120 --->
//│ 	case ls² of {LH_C h³ t³ => foldl_lh_₁(f¹, f¹(i¹, h³), t³) | LH_N  => i¹}: 74
//│ [LH_N]: 121 --->
//│ 	case _lh_numericRule_LH_P2_1⁰ of {LH_C _lh_numericRule_LH_C_0⁰ _lh_numericRule_LH_C_1⁰ => let _lh_matchIdent³ = span_lh_₁((fun c³ -> polyNeq⁰(c³, '>')), _lh_numericRule_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_numericRule_LH_P2_0¹ _lh_numericRule_LH_P2_1¹ => case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 493
//│ [LH_P2 [LH_N] [LH_N]]: 122 --->
//│ 	case _lh_matchIdent⁰ of {LH_P2 _lh_span_LH_P2_0⁰ _lh_span_LH_P2_1⁰ => [LH_P2 [LH_C _lh_span_LH_C_0⁰ _lh_span_LH_P2_0⁰] _lh_span_LH_P2_1⁰] | _  => error⁰}: 138
//│ 	case _lh_matchIdent² of {LH_P2 _lh_numericRule_LH_P2_0⁰ _lh_numericRule_LH_P2_1⁰ => case _lh_numericRule_LH_P2_1⁰ of {LH_C _lh_numericRule_LH_C_0⁰ _lh_numericRule_LH_C_1⁰ => let _lh_matchIdent³ = span_lh_₁((fun c³ -> polyNeq⁰(c³, '>')), _lh_numericRule_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_numericRule_LH_P2_0¹ _lh_numericRule_LH_P2_1¹ => case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 495
//│ [LH_C _lh_span_LH_C_0⁰ _lh_span_LH_P2_0⁰]: 134 --->
//│ 	case ls² of {LH_C h³ t³ => foldl_lh_₁(f¹, f¹(i¹, h³), t³) | LH_N  => i¹}: 74
//│ [LH_P2 [LH_C _lh_span_LH_C_0⁰ _lh_span_LH_P2_0⁰] _lh_span_LH_P2_1⁰]: 136 --->
//│ 	case _lh_matchIdent⁰ of {LH_P2 _lh_span_LH_P2_0⁰ _lh_span_LH_P2_1⁰ => [LH_P2 [LH_C _lh_span_LH_C_0⁰ _lh_span_LH_P2_0⁰] _lh_span_LH_P2_1⁰] | _  => error⁰}: 138
//│ 	case _lh_matchIdent² of {LH_P2 _lh_numericRule_LH_P2_0⁰ _lh_numericRule_LH_P2_1⁰ => case _lh_numericRule_LH_P2_1⁰ of {LH_C _lh_numericRule_LH_C_0⁰ _lh_numericRule_LH_C_1⁰ => let _lh_matchIdent³ = span_lh_₁((fun c³ -> polyNeq⁰(c³, '>')), _lh_numericRule_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_numericRule_LH_P2_0¹ _lh_numericRule_LH_P2_1¹ => case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 495
//│ [LH_N]: 140 --->
//│ 	case ls² of {LH_C h³ t³ => foldl_lh_₁(f¹, f¹(i¹, h³), t³) | LH_N  => i¹}: 74
//│ [LH_C _lh_span_LH_C_0⁰ _lh_span_LH_C_1⁰]: 143 --->
//│ 	case _lh_numericRule_LH_P2_1⁰ of {LH_C _lh_numericRule_LH_C_0⁰ _lh_numericRule_LH_C_1⁰ => let _lh_matchIdent³ = span_lh_₁((fun c³ -> polyNeq⁰(c³, '>')), _lh_numericRule_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_numericRule_LH_P2_0¹ _lh_numericRule_LH_P2_1¹ => case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 493
//│ [LH_P2 [LH_N] [LH_C _lh_span_LH_C_0⁰ _lh_span_LH_C_1⁰]]: 144 --->
//│ 	case _lh_matchIdent⁰ of {LH_P2 _lh_span_LH_P2_0⁰ _lh_span_LH_P2_1⁰ => [LH_P2 [LH_C _lh_span_LH_C_0⁰ _lh_span_LH_P2_0⁰] _lh_span_LH_P2_1⁰] | _  => error⁰}: 138
//│ 	case _lh_matchIdent² of {LH_P2 _lh_numericRule_LH_P2_0⁰ _lh_numericRule_LH_P2_1⁰ => case _lh_numericRule_LH_P2_1⁰ of {LH_C _lh_numericRule_LH_C_0⁰ _lh_numericRule_LH_C_1⁰ => let _lh_matchIdent³ = span_lh_₁((fun c³ -> polyNeq⁰(c³, '>')), _lh_numericRule_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_numericRule_LH_P2_0¹ _lh_numericRule_LH_P2_1¹ => case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 495
//│ [LH_C h⁵ mappend_lh_₂(t⁵, ys¹)]: 167 --->
//│ 	case xs² of {LH_C h⁸ t⁹ => [LH_C h⁸ mappend_lh_₁(t⁹, ys²)] | LH_N  => ys²}: 379
//│ [LH_N]: 199 --->
//│ 	case ls¹ of {LH_C h² t² => foldl_lh_₂(f⁰, f⁰(i⁰, h²), t²) | LH_N  => i⁰}: 57
//│ [LH_N]: 200 --->
//│ 	case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰}: 488
//│ [LH_P2 [LH_N] [LH_N]]: 201 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_span_LH_P2_0¹ _lh_span_LH_P2_1¹ => [LH_P2 [LH_C _lh_span_LH_C_0¹ _lh_span_LH_P2_0¹] _lh_span_LH_P2_1¹] | _  => error⁰}: 217
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_numericRule_LH_P2_0¹ _lh_numericRule_LH_P2_1¹ => case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 490
//│ [LH_C _lh_span_LH_C_0¹ _lh_span_LH_P2_0¹]: 213 --->
//│ 	case ls¹ of {LH_C h² t² => foldl_lh_₂(f⁰, f⁰(i⁰, h²), t²) | LH_N  => i⁰}: 57
//│ [LH_P2 [LH_C _lh_span_LH_C_0¹ _lh_span_LH_P2_0¹] _lh_span_LH_P2_1¹]: 215 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_span_LH_P2_0¹ _lh_span_LH_P2_1¹ => [LH_P2 [LH_C _lh_span_LH_C_0¹ _lh_span_LH_P2_0¹] _lh_span_LH_P2_1¹] | _  => error⁰}: 217
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_numericRule_LH_P2_0¹ _lh_numericRule_LH_P2_1¹ => case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 490
//│ [LH_N]: 219 --->
//│ 	case ls¹ of {LH_C h² t² => foldl_lh_₂(f⁰, f⁰(i⁰, h²), t²) | LH_N  => i⁰}: 57
//│ [LH_C _lh_span_LH_C_0¹ _lh_span_LH_C_1¹]: 222 --->
//│ 	case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰}: 488
//│ [LH_P2 [LH_N] [LH_C _lh_span_LH_C_0¹ _lh_span_LH_C_1¹]]: 223 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_span_LH_P2_0¹ _lh_span_LH_P2_1¹ => [LH_P2 [LH_C _lh_span_LH_C_0¹ _lh_span_LH_P2_0¹] _lh_span_LH_P2_1¹] | _  => error⁰}: 217
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_numericRule_LH_P2_0¹ _lh_numericRule_LH_P2_1¹ => case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 490
//│ [LH_C a² enumFromTo_lh_₃((a² + 1), b¹)]: 292 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]}: 456
//│ [LH_N]: 293 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]}: 456
//│ [LH_C a³ enumFromThenTo_lh_₁(t⁸, ((2 * t⁸) - a³), b²)]: 318 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]}: 456
//│ [LH_N]: 319 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]}: 456
//│ [LH_C a⁴ enumFromTo_lh_₂((a⁴ + 1), b³)]: 339 --->
//│ 	case ls³ of {LH_C h⁴ t⁴ => reverse_helper_lh_₁(t⁴, [LH_C h⁴ a¹]) | LH_N  => a¹}: 87
//│ [LH_N]: 340 --->
//│ 	case ls³ of {LH_C h⁴ t⁴ => reverse_helper_lh_₁(t⁴, [LH_C h⁴ a¹]) | LH_N  => a¹}: 87
//│ [LH_C a⁵ enumFromTo_lh_₁((a⁵ + 1), b⁴)]: 359 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(expand_lh_₁(_lh_alphabeticRule_LH_C_1³)) | LH_N  => [LH_N]}: 536
//│ [LH_N]: 360 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(expand_lh_₁(_lh_alphabeticRule_LH_C_1³)) | LH_N  => [LH_N]}: 536
//│ [LH_N]: 367 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)})
//│ in _lh_listcomp_fun⁶(expand_lh_₁(_lh_alphabeticRule_LH_C_1³)) | LH_N  => [LH_N]}: 573
//│ [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]: 412 --->
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰}: 485
//│ [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 443 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 447
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 527
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 564
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => [LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] | LH_N  => [LH_N]}: 613
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] | LH_N  => [LH_N]}: 634
//│ 	case lss⁰ of {LH_C h⁹ t¹⁰ => mappend_lh_₁(h⁹, concat_lh_₁(t¹⁰)) | LH_N  => [LH_N]}: 654
//│ [LH_N]: 455 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 447
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 527
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 564
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => [LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] | LH_N  => [LH_N]}: 613
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] | LH_N  => [LH_N]}: 634
//│ 	case lss⁰ of {LH_C h⁹ t¹⁰ => mappend_lh_₁(h⁹, concat_lh_₁(t¹⁰)) | LH_N  => [LH_N]}: 654
//│ [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴]: 519 --->
//│ 	case xs² of {LH_C h⁸ t⁹ => [LH_C h⁸ mappend_lh_₁(t⁹, ys²)] | LH_N  => ys²}: 379
//│ [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 523 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 447
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 527
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 564
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => [LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] | LH_N  => [LH_N]}: 613
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] | LH_N  => [LH_N]}: 634
//│ 	case lss⁰ of {LH_C h⁹ t¹⁰ => mappend_lh_₁(h⁹, concat_lh_₁(t¹⁰)) | LH_N  => [LH_N]}: 654
//│ [LH_N]: 535 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 447
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 527
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 564
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => [LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] | LH_N  => [LH_N]}: 613
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] | LH_N  => [LH_N]}: 634
//│ 	case lss⁰ of {LH_C h⁹ t¹⁰ => mappend_lh_₁(h⁹, concat_lh_₁(t¹⁰)) | LH_N  => [LH_N]}: 654
//│ [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶]: 556 --->
//│ 	case xs² of {LH_C h⁸ t⁹ => [LH_C h⁸ mappend_lh_₁(t⁹, ys²)] | LH_N  => ys²}: 379
//│ [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)]: 560 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 447
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 527
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 564
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => [LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] | LH_N  => [LH_N]}: 613
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] | LH_N  => [LH_N]}: 634
//│ 	case lss⁰ of {LH_C h⁹ t¹⁰ => mappend_lh_₁(h⁹, concat_lh_₁(t¹⁰)) | LH_N  => [LH_N]}: 654
//│ [LH_N]: 572 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 447
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 527
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 564
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => [LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] | LH_N  => [LH_N]}: 613
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] | LH_N  => [LH_N]}: 634
//│ 	case lss⁰ of {LH_C h⁹ t¹⁰ => mappend_lh_₁(h⁹, concat_lh_₁(t¹⁰)) | LH_N  => [LH_N]}: 654
//│ [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷]: 607 --->
//│ 	case xs² of {LH_C h⁸ t⁹ => [LH_C h⁸ mappend_lh_₁(t⁹, ys²)] | LH_N  => ys²}: 379
//│ [LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)]: 611 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 447
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 527
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 564
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => [LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] | LH_N  => [LH_N]}: 613
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] | LH_N  => [LH_N]}: 634
//│ 	case lss⁰ of {LH_C h⁹ t¹⁰ => mappend_lh_₁(h⁹, concat_lh_₁(t¹⁰)) | LH_N  => [LH_N]}: 654
//│ [LH_N]: 612 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 447
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 527
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 564
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => [LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] | LH_N  => [LH_N]}: 613
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] | LH_N  => [LH_N]}: 634
//│ 	case lss⁰ of {LH_C h⁹ t¹⁰ => mappend_lh_₁(h⁹, concat_lh_₁(t¹⁰)) | LH_N  => [LH_N]}: 654
//│ [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸]: 628 --->
//│ 	case xs² of {LH_C h⁸ t⁹ => [LH_C h⁸ mappend_lh_₁(t⁹, ys²)] | LH_N  => ys²}: 379
//│ [LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]: 632 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 447
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 527
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 564
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => [LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] | LH_N  => [LH_N]}: 613
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] | LH_N  => [LH_N]}: 634
//│ 	case lss⁰ of {LH_C h⁹ t¹⁰ => mappend_lh_₁(h⁹, concat_lh_₁(t¹⁰)) | LH_N  => [LH_N]}: 654
//│ [LH_N]: 633 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 447
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 527
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 564
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => [LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] | LH_N  => [LH_N]}: 613
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] | LH_N  => [LH_N]}: 634
//│ 	case lss⁰ of {LH_C h⁹ t¹⁰ => mappend_lh_₁(h⁹, concat_lh_₁(t¹⁰)) | LH_N  => [LH_N]}: 654
//│ [LH_N]: 657 --->
//│ 	case xs² of {LH_C h⁸ t⁹ => [LH_C h⁸ mappend_lh_₁(t⁹, ys²)] | LH_N  => ys²}: 379
//│ [LH_N]: 658 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 447
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 527
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 564
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => [LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] | LH_N  => [LH_N]}: 613
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] | LH_N  => [LH_N]}: 634
//│ 	case lss⁰ of {LH_C h⁹ t¹⁰ => mappend_lh_₁(h⁹, concat_lh_₁(t¹⁰)) | LH_N  => [LH_N]}: 654
//│ [LH_C [LH_N] [LH_N]]: 659 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 447
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 527
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 564
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => [LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] | LH_N  => [LH_N]}: 613
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] | LH_N  => [LH_N]}: 634
//│ 	case lss⁰ of {LH_C h⁹ t¹⁰ => mappend_lh_₁(h⁹, concat_lh_₁(t¹⁰)) | LH_N  => [LH_N]}: 654
//│ ------------------
//│ case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₃(t¹, ys⁰)] | LH_N  => ys⁰}: 21 --->
//│ 	[LH_C '0' _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 96
//│ 	[LH_N]: 97
//│ case ls¹ of {LH_C h² t² => foldl_lh_₂(f⁰, f⁰(i⁰, h²), t²) | LH_N  => i⁰}: 57 --->
//│ 	[LH_N]: 199
//│ 	[LH_C _lh_span_LH_C_0¹ _lh_span_LH_P2_0¹]: 213
//│ 	[LH_N]: 219
//│ case ls² of {LH_C h³ t³ => foldl_lh_₁(f¹, f¹(i¹, h³), t³) | LH_N  => i¹}: 74 --->
//│ 	[LH_N]: 120
//│ 	[LH_C _lh_span_LH_C_0⁰ _lh_span_LH_P2_0⁰]: 134
//│ 	[LH_N]: 140
//│ case ls³ of {LH_C h⁴ t⁴ => reverse_helper_lh_₁(t⁴, [LH_C h⁴ a¹]) | LH_N  => a¹}: 87 --->
//│ 	[LH_C a⁴ enumFromTo_lh_₂((a⁴ + 1), b³)]: 339
//│ 	[LH_N]: 340
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C '0' _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | LH_N  => [LH_N]}: 98 --->
//│ 	[LH_C a⁰ enumFromTo_lh_₄((a⁰ + 1), b⁰)]: 39
//│ 	[LH_N]: 40
//│ case _lh_matchIdent⁰ of {LH_P2 _lh_span_LH_P2_0⁰ _lh_span_LH_P2_1⁰ => [LH_P2 [LH_C _lh_span_LH_C_0⁰ _lh_span_LH_P2_0⁰] _lh_span_LH_P2_1⁰] | _  => error⁰}: 138 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 122
//│ 	[LH_P2 [LH_C _lh_span_LH_C_0⁰ _lh_span_LH_P2_0⁰] _lh_span_LH_P2_1⁰]: 136
//│ 	[LH_P2 [LH_N] [LH_C _lh_span_LH_C_0⁰ _lh_span_LH_C_1⁰]]: 144
//│ case xs¹ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₂(t⁵, ys¹)] | LH_N  => ys¹}: 169 --->
//│ 	NoProd
//│ 	[LH_C h¹ mappend_lh_₃(t¹, ys⁰)]: 19
//│ case _lh_matchIdent¹ of {LH_P2 _lh_span_LH_P2_0¹ _lh_span_LH_P2_1¹ => [LH_P2 [LH_C _lh_span_LH_C_0¹ _lh_span_LH_P2_0¹] _lh_span_LH_P2_1¹] | _  => error⁰}: 217 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 201
//│ 	[LH_P2 [LH_C _lh_span_LH_C_0¹ _lh_span_LH_P2_0¹] _lh_span_LH_P2_1¹]: 215
//│ 	[LH_P2 [LH_N] [LH_C _lh_span_LH_C_0¹ _lh_span_LH_C_1¹]]: 223
//│ case xs² of {LH_C h⁸ t⁹ => [LH_C h⁸ mappend_lh_₁(t⁹, ys²)] | LH_N  => ys²}: 379 --->
//│ 	[LH_C h⁵ mappend_lh_₂(t⁵, ys¹)]: 167
//│ 	[LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴]: 519
//│ 	[LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶]: 556
//│ 	[LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷]: 607
//│ 	[LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸]: 628
//│ 	[LH_N]: 657
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 447 --->
//│ 	[LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 443
//│ 	[LH_N]: 455
//│ 	[LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 523
//│ 	[LH_N]: 535
//│ 	[LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)]: 560
//│ 	[LH_N]: 572
//│ 	[LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)]: 611
//│ 	[LH_N]: 612
//│ 	[LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]: 632
//│ 	[LH_N]: 633
//│ 	[LH_N]: 658
//│ 	[LH_C [LH_N] [LH_N]]: 659
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]}: 456 --->
//│ 	[LH_C a² enumFromTo_lh_₃((a² + 1), b¹)]: 292
//│ 	[LH_N]: 293
//│ 	[LH_C a³ enumFromThenTo_lh_₁(t⁸, ((2 * t⁸) - a³), b²)]: 318
//│ 	[LH_N]: 319
//│ case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰}: 485 --->
//│ 	[LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]: 412
//│ case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰}: 488 --->
//│ 	[LH_N]: 200
//│ 	[LH_C _lh_span_LH_C_0¹ _lh_span_LH_C_1¹]: 222
//│ case _lh_matchIdent³ of {LH_P2 _lh_numericRule_LH_P2_0¹ _lh_numericRule_LH_P2_1¹ => case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 490 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 201
//│ 	[LH_P2 [LH_C _lh_span_LH_C_0¹ _lh_span_LH_P2_0¹] _lh_span_LH_P2_1¹]: 215
//│ 	[LH_P2 [LH_N] [LH_C _lh_span_LH_C_0¹ _lh_span_LH_C_1¹]]: 223
//│ case _lh_numericRule_LH_P2_1⁰ of {LH_C _lh_numericRule_LH_C_0⁰ _lh_numericRule_LH_C_1⁰ => let _lh_matchIdent³ = span_lh_₁((fun c³ -> polyNeq⁰(c³, '>')), _lh_numericRule_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_numericRule_LH_P2_0¹ _lh_numericRule_LH_P2_1¹ => case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 493 --->
//│ 	[LH_N]: 121
//│ 	[LH_C _lh_span_LH_C_0⁰ _lh_span_LH_C_1⁰]: 143
//│ case _lh_matchIdent² of {LH_P2 _lh_numericRule_LH_P2_0⁰ _lh_numericRule_LH_P2_1⁰ => case _lh_numericRule_LH_P2_1⁰ of {LH_C _lh_numericRule_LH_C_0⁰ _lh_numericRule_LH_C_1⁰ => let _lh_matchIdent³ = span_lh_₁((fun c³ -> polyNeq⁰(c³, '>')), _lh_numericRule_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_numericRule_LH_P2_0¹ _lh_numericRule_LH_P2_1¹ => case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 495 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 122
//│ 	[LH_P2 [LH_C _lh_span_LH_C_0⁰ _lh_span_LH_P2_0⁰] _lh_span_LH_P2_1⁰]: 136
//│ 	[LH_P2 [LH_N] [LH_C _lh_span_LH_C_0⁰ _lh_span_LH_C_1⁰]]: 144
//│ case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 527 --->
//│ 	[LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 443
//│ 	[LH_N]: 455
//│ 	[LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 523
//│ 	[LH_N]: 535
//│ 	[LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)]: 560
//│ 	[LH_N]: 572
//│ 	[LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)]: 611
//│ 	[LH_N]: 612
//│ 	[LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]: 632
//│ 	[LH_N]: 633
//│ 	[LH_N]: 658
//│ 	[LH_C [LH_N] [LH_N]]: 659
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(expand_lh_₁(_lh_alphabeticRule_LH_C_1³)) | LH_N  => [LH_N]}: 536 --->
//│ 	[LH_C a⁵ enumFromTo_lh_₁((a⁵ + 1), b⁴)]: 359
//│ 	[LH_N]: 360
//│ case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}: 564 --->
//│ 	[LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 443
//│ 	[LH_N]: 455
//│ 	[LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 523
//│ 	[LH_N]: 535
//│ 	[LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)]: 560
//│ 	[LH_N]: 572
//│ 	[LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)]: 611
//│ 	[LH_N]: 612
//│ 	[LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]: 632
//│ 	[LH_N]: 633
//│ 	[LH_N]: 658
//│ 	[LH_C [LH_N] [LH_N]]: 659
//│ case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)})
//│ in _lh_listcomp_fun⁶(expand_lh_₁(_lh_alphabeticRule_LH_C_1³)) | LH_N  => [LH_N]}: 573 --->
//│ 	[LH_C h⁴ a¹]: 84
//│ 	[LH_N]: 367
//│ case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => [LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] | LH_N  => [LH_N]}: 613 --->
//│ 	[LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 443
//│ 	[LH_N]: 455
//│ 	[LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 523
//│ 	[LH_N]: 535
//│ 	[LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)]: 560
//│ 	[LH_N]: 572
//│ 	[LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)]: 611
//│ 	[LH_N]: 612
//│ 	[LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]: 632
//│ 	[LH_N]: 633
//│ 	[LH_N]: 658
//│ 	[LH_C [LH_N] [LH_N]]: 659
//│ case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] | LH_N  => [LH_N]}: 634 --->
//│ 	[LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 443
//│ 	[LH_N]: 455
//│ 	[LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 523
//│ 	[LH_N]: 535
//│ 	[LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)]: 560
//│ 	[LH_N]: 572
//│ 	[LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)]: 611
//│ 	[LH_N]: 612
//│ 	[LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]: 632
//│ 	[LH_N]: 633
//│ 	[LH_N]: 658
//│ 	[LH_C [LH_N] [LH_N]]: 659
//│ case lss⁰ of {LH_C h⁹ t¹⁰ => mappend_lh_₁(h⁹, concat_lh_₁(t¹⁰)) | LH_N  => [LH_N]}: 654 --->
//│ 	[LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 443
//│ 	[LH_N]: 455
//│ 	[LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 523
//│ 	[LH_N]: 535
//│ 	[LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)]: 560
//│ 	[LH_N]: 572
//│ 	[LH_C [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)]: 611
//│ 	[LH_N]: 612
//│ 	[LH_C [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]: 632
//│ 	[LH_N]: 633
//│ 	[LH_N]: 658
//│ 	[LH_C [LH_N] [LH_N]]: 659
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C a⁰ enumFromTo_lh_₄((a⁰ + 1), b⁰)]: 39 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C '0' _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | LH_N  => [LH_N]}: 98
//│ [LH_N]: 40 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C '0' _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | LH_N  => [LH_N]}: 98
//│ [LH_C h⁴ a¹]: 84 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)})
//│ in _lh_listcomp_fun⁶(expand_lh_₁(_lh_alphabeticRule_LH_C_1³)) | LH_N  => [LH_N]}: 573
//│ [LH_C '0' _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 96 --->
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₃(t¹, ys⁰)] | LH_N  => ys⁰}: 21
//│ [LH_N]: 97 --->
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₃(t¹, ys⁰)] | LH_N  => ys⁰}: 21
//│ [LH_N]: 120 --->
//│ 	case ls² of {LH_C h³ t³ => foldl_lh_₁(f¹, f¹(i¹, h³), t³) | LH_N  => i¹}: 74
//│ [LH_N]: 121 --->
//│ 	case _lh_numericRule_LH_P2_1⁰ of {LH_C _lh_numericRule_LH_C_0⁰ _lh_numericRule_LH_C_1⁰ => let _lh_matchIdent³ = span_lh_₁((fun c³ -> polyNeq⁰(c³, '>')), _lh_numericRule_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_numericRule_LH_P2_0¹ _lh_numericRule_LH_P2_1¹ => case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 493
//│ [LH_C _lh_span_LH_C_0⁰ _lh_span_LH_P2_0⁰]: 134 --->
//│ 	case ls² of {LH_C h³ t³ => foldl_lh_₁(f¹, f¹(i¹, h³), t³) | LH_N  => i¹}: 74
//│ [LH_N]: 140 --->
//│ 	case ls² of {LH_C h³ t³ => foldl_lh_₁(f¹, f¹(i¹, h³), t³) | LH_N  => i¹}: 74
//│ [LH_C _lh_span_LH_C_0⁰ _lh_span_LH_C_1⁰]: 143 --->
//│ 	case _lh_numericRule_LH_P2_1⁰ of {LH_C _lh_numericRule_LH_C_0⁰ _lh_numericRule_LH_C_1⁰ => let _lh_matchIdent³ = span_lh_₁((fun c³ -> polyNeq⁰(c³, '>')), _lh_numericRule_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_numericRule_LH_P2_0¹ _lh_numericRule_LH_P2_1¹ => case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 493
//│ [LH_C h⁵ mappend_lh_₂(t⁵, ys¹)]: 167 --->
//│ 	case xs² of {LH_C h⁸ t⁹ => [LH_C h⁸ mappend_lh_₁(t⁹, ys²)] | LH_N  => ys²}: 379
//│ [LH_N]: 199 --->
//│ 	case ls¹ of {LH_C h² t² => foldl_lh_₂(f⁰, f⁰(i⁰, h²), t²) | LH_N  => i⁰}: 57
//│ [LH_N]: 200 --->
//│ 	case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰}: 488
//│ [LH_C _lh_span_LH_C_0¹ _lh_span_LH_P2_0¹]: 213 --->
//│ 	case ls¹ of {LH_C h² t² => foldl_lh_₂(f⁰, f⁰(i⁰, h²), t²) | LH_N  => i⁰}: 57
//│ [LH_N]: 219 --->
//│ 	case ls¹ of {LH_C h² t² => foldl_lh_₂(f⁰, f⁰(i⁰, h²), t²) | LH_N  => i⁰}: 57
//│ [LH_C _lh_span_LH_C_0¹ _lh_span_LH_C_1¹]: 222 --->
//│ 	case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰}: 488
//│ [LH_C a² enumFromTo_lh_₃((a² + 1), b¹)]: 292 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]}: 456
//│ [LH_N]: 293 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]}: 456
//│ [LH_C a³ enumFromThenTo_lh_₁(t⁸, ((2 * t⁸) - a³), b²)]: 318 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]}: 456
//│ [LH_N]: 319 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]}: 456
//│ [LH_C a⁴ enumFromTo_lh_₂((a⁴ + 1), b³)]: 339 --->
//│ 	case ls³ of {LH_C h⁴ t⁴ => reverse_helper_lh_₁(t⁴, [LH_C h⁴ a¹]) | LH_N  => a¹}: 87
//│ [LH_N]: 340 --->
//│ 	case ls³ of {LH_C h⁴ t⁴ => reverse_helper_lh_₁(t⁴, [LH_C h⁴ a¹]) | LH_N  => a¹}: 87
//│ [LH_C a⁵ enumFromTo_lh_₁((a⁵ + 1), b⁴)]: 359 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(expand_lh_₁(_lh_alphabeticRule_LH_C_1³)) | LH_N  => [LH_N]}: 536
//│ [LH_N]: 360 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(expand_lh_₁(_lh_alphabeticRule_LH_C_1³)) | LH_N  => [LH_N]}: 536
//│ [LH_N]: 367 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)})
//│ in _lh_listcomp_fun⁶(expand_lh_₁(_lh_alphabeticRule_LH_C_1³)) | LH_N  => [LH_N]}: 573
//│ [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]: 412 --->
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰}: 485
//│ [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴]: 519 --->
//│ 	case xs² of {LH_C h⁸ t⁹ => [LH_C h⁸ mappend_lh_₁(t⁹, ys²)] | LH_N  => ys²}: 379
//│ [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶]: 556 --->
//│ 	case xs² of {LH_C h⁸ t⁹ => [LH_C h⁸ mappend_lh_₁(t⁹, ys²)] | LH_N  => ys²}: 379
//│ [LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷]: 607 --->
//│ 	case xs² of {LH_C h⁸ t⁹ => [LH_C h⁸ mappend_lh_₁(t⁹, ys²)] | LH_N  => ys²}: 379
//│ [LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸]: 628 --->
//│ 	case xs² of {LH_C h⁸ t⁹ => [LH_C h⁸ mappend_lh_₁(t⁹, ys²)] | LH_N  => ys²}: 379
//│ [LH_N]: 657 --->
//│ 	case xs² of {LH_C h⁸ t⁹ => [LH_C h⁸ mappend_lh_₁(t⁹, ys²)] | LH_N  => ys²}: 379
//│ ------------------
//│ case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₃(t¹, ys⁰)] | LH_N  => ys⁰}: 21 --->
//│ 	[LH_C '0' _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 96
//│ 	[LH_N]: 97
//│ case ls¹ of {LH_C h² t² => foldl_lh_₂(f⁰, f⁰(i⁰, h²), t²) | LH_N  => i⁰}: 57 --->
//│ 	[LH_N]: 199
//│ 	[LH_C _lh_span_LH_C_0¹ _lh_span_LH_P2_0¹]: 213
//│ 	[LH_N]: 219
//│ case ls² of {LH_C h³ t³ => foldl_lh_₁(f¹, f¹(i¹, h³), t³) | LH_N  => i¹}: 74 --->
//│ 	[LH_N]: 120
//│ 	[LH_C _lh_span_LH_C_0⁰ _lh_span_LH_P2_0⁰]: 134
//│ 	[LH_N]: 140
//│ case ls³ of {LH_C h⁴ t⁴ => reverse_helper_lh_₁(t⁴, [LH_C h⁴ a¹]) | LH_N  => a¹}: 87 --->
//│ 	[LH_C a⁴ enumFromTo_lh_₂((a⁴ + 1), b³)]: 339
//│ 	[LH_N]: 340
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C '0' _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | LH_N  => [LH_N]}: 98 --->
//│ 	[LH_C a⁰ enumFromTo_lh_₄((a⁰ + 1), b⁰)]: 39
//│ 	[LH_N]: 40
//│ case xs² of {LH_C h⁸ t⁹ => [LH_C h⁸ mappend_lh_₁(t⁹, ys²)] | LH_N  => ys²}: 379 --->
//│ 	[LH_C h⁵ mappend_lh_₂(t⁵, ys¹)]: 167
//│ 	[LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴]: 519
//│ 	[LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶]: 556
//│ 	[LH_C _lh_constantRule_LH_C_0⁰ _lh_listcomp_fun_ls_h⁷]: 607
//│ 	[LH_C _lh_constantRule_LH_C_0¹ _lh_listcomp_fun_ls_h⁸]: 628
//│ 	[LH_N]: 657
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]}: 456 --->
//│ 	[LH_C a² enumFromTo_lh_₃((a² + 1), b¹)]: 292
//│ 	[LH_N]: 293
//│ 	[LH_C a³ enumFromThenTo_lh_₁(t⁸, ((2 * t⁸) - a³), b²)]: 318
//│ 	[LH_N]: 319
//│ case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰}: 485 --->
//│ 	[LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]: 412
//│ case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰}: 488 --->
//│ 	[LH_N]: 200
//│ 	[LH_C _lh_span_LH_C_0¹ _lh_span_LH_C_1¹]: 222
//│ case _lh_numericRule_LH_P2_1⁰ of {LH_C _lh_numericRule_LH_C_0⁰ _lh_numericRule_LH_C_1⁰ => let _lh_matchIdent³ = span_lh_₁((fun c³ -> polyNeq⁰(c³, '>')), _lh_numericRule_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_numericRule_LH_P2_0¹ _lh_numericRule_LH_P2_1¹ => case _lh_numericRule_LH_P2_1¹ of {LH_C _lh_numericRule_LH_C_0¹ _lh_numericRule_LH_C_1¹ => let _lh_matchIdent⁴ = [LH_P2 mknum_lh_₁(_lh_numericRule_LH_P2_0⁰) mknum_lh_₂(_lh_numericRule_LH_P2_0¹)]
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1² => let width⁰ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0²)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1²)))
//│ in let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹), width⁰), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(expand_lh_₁(_lh_numericRule_LH_C_1¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(if (_lh_numericRule_LH_P2_0² < _lh_numericRule_LH_P2_1²) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_1²) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0², (_lh_numericRule_LH_P2_0² - 1), _lh_numericRule_LH_P2_1²)) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 493 --->
//│ 	[LH_N]: 121
//│ 	[LH_C _lh_span_LH_C_0⁰ _lh_span_LH_C_1⁰]: 143
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(expand_lh_₁(_lh_alphabeticRule_LH_C_1³)) | LH_N  => [LH_N]}: 536 --->
//│ 	[LH_C a⁵ enumFromTo_lh_₁((a⁵ + 1), b⁴)]: 359
//│ 	[LH_N]: 360
//│ case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [LH_C char_of_int⁰(_lh_listcomp_fun_ls_h⁵) _lh_listcomp_fun_ls_h⁶] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)})
//│ in _lh_listcomp_fun⁶(expand_lh_₁(_lh_alphabeticRule_LH_C_1³)) | LH_N  => [LH_N]}: 573 --->
//│ 	[LH_C h⁴ a¹]: 84
//│ 	[LH_N]: 367
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testGenRegexs_nofib_lh_₁(primId⁰([LH_C '[' [LH_C 'a' [LH_C '-' [LH_C 'j' [LH_C ']' [LH_C '[' [LH_C 'a' [LH_C '-' [LH_C 'j' [LH_C ']' [LH_C '[' [LH_C 'a' [LH_C '-' [LH_C 'j' [LH_C ']' [LH_C '[' [LH_C '0' [LH_C '-' [LH_C '9' [LH_C ']' [LH_N]]]]]]]]]]]]]]]]]]]]]))
//│ def alphabeticRule_lh_₁(_lh_alphabeticRule_arg1¹) = case _lh_alphabeticRule_arg1¹ of {
//│ 	LH_C _lh_alphabeticRule_LH_C_0⁰ _lh_alphabeticRule_LH_C_1⁰ => case _lh_alphabeticRule_LH_C_1⁰ of {
//│ 		LH_C _lh_alphabeticRule_LH_C_0¹ _lh_alphabeticRule_LH_C_1¹ => case _lh_alphabeticRule_LH_C_0¹ of {
//│ 			'-'  => case _lh_alphabeticRule_LH_C_1¹ of {
//│ 				LH_C _lh_alphabeticRule_LH_C_0² _lh_alphabeticRule_LH_C_1² => case _lh_alphabeticRule_LH_C_1² of {
//│ 					LH_C _lh_alphabeticRule_LH_C_0³ _lh_alphabeticRule_LH_C_1³ => case _lh_alphabeticRule_LH_C_0³ of {
//│ 						']'  => if (int_of_char⁰(_lh_alphabeticRule_LH_C_0⁰) <= int_of_char⁰(_lh_alphabeticRule_LH_C_0²)) then 
//│ 							let _lh_listcomp_fun²² = (fun _lh_listcomp_fun_para¹⁴ -> _lh_listcomp_fun_para¹⁴(_lh_alphabeticRule_LH_C_1³, _lh_listcomp_fun²²))
//│ 							in _lh_listcomp_fun²²(enumFromTo_lh_₁(int_of_char⁰(_lh_alphabeticRule_LH_C_0⁰), int_of_char⁰(_lh_alphabeticRule_LH_C_0²))) else 
//│ 							let _lh_listcomp_fun²³ = (fun _lh_listcomp_fun_para¹⁵ -> _lh_listcomp_fun_para¹⁵(_lh_alphabeticRule_LH_C_1³, _lh_listcomp_fun²³))
//│ 							in _lh_listcomp_fun²³(reverse_lh_₁(enumFromTo_lh_₂(int_of_char⁰(_lh_alphabeticRule_LH_C_0²), int_of_char⁰(_lh_alphabeticRule_LH_C_0⁰))))
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def concat_lh_₁(lss¹) = case lss¹ of {
//│ 	LH_C h⁹ t¹⁰ => mappend_lh_₁(h⁹, concat_lh_₁(t¹⁰))
//│ 	| LH_N  => [LH_N]}
//│ def constantRule_lh_₁(_lh_constantRule_arg1²) = case _lh_constantRule_arg1² of {
//│ 	LH_C _lh_constantRule_LH_C_0¹ _lh_constantRule_LH_C_1¹ => 
//│ 		let _lh_listcomp_fun¹⁵ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C 
//│ 				let t¹³ = _lh_listcomp_fun_ls_h⁸
//│ 				in let h¹² = _lh_constantRule_LH_C_0¹
//│ 				in (fun ys⁵ -> [LH_C h¹² mappend_lh_₁(t¹³, ys⁵)]) _lh_listcomp_fun¹⁵(_lh_listcomp_fun_ls_t⁸)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun¹⁵(expand_lh_₁(_lh_constantRule_LH_C_1¹))
//│ 	| _  => error⁰}
//│ def constantRule_lh_₂(_lh_constantRule_arg1³) = case _lh_constantRule_arg1³ of {
//│ 	LH_C _lh_constantRule_LH_C_0⁰ _lh_constantRule_LH_C_1⁰ => 
//│ 		let _lh_listcomp_fun²⁶ = (fun _lh_listcomp_fun_para¹⁷ -> case _lh_listcomp_fun_para¹⁷ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => [LH_C 
//│ 				let t²⁰ = _lh_listcomp_fun_ls_h⁷
//│ 				in let h¹⁸ = _lh_constantRule_LH_C_0⁰
//│ 				in (fun ys¹³ -> [LH_C h¹⁸ mappend_lh_₁(t²⁰, ys¹³)]) _lh_listcomp_fun²⁶(_lh_listcomp_fun_ls_t⁷)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²⁶(expand_lh_₁(_lh_constantRule_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def enumFromThenTo_lh_₁(a¹⁰, t¹⁶, b⁸) = if (a¹⁰ <= b⁸) then 
//│ 	let _lh_listcomp_fun_ls_t¹² = enumFromThenTo_lh_₁(t¹⁶, ((2 * t¹⁶) - a¹⁰), b⁸)
//│ 	in let _lh_listcomp_fun_ls_h¹¹ = a¹⁰
//│ 	in (fun _lh_listcomp_fun¹⁹ -> (fun _lh_numericRule_LH_C_1⁷ -> (fun width⁴ -> 
//│ 		let _lh_listcomp_fun²⁰ = (fun _lh_listcomp_fun_para¹³ -> case _lh_listcomp_fun_para¹³ of {
//│ 			LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹¹), width⁴), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun²⁰(_lh_listcomp_fun_ls_t²)]
//│ 			| LH_N  => _lh_listcomp_fun¹⁹(_lh_listcomp_fun_ls_t¹²)})
//│ 		in _lh_listcomp_fun²⁰(expand_lh_₁(_lh_numericRule_LH_C_1⁷))))) else (fun _lh_listcomp_fun²¹ -> (fun _lh_numericRule_LH_C_1⁸ -> (fun width⁵ -> [LH_N])))
//│ def enumFromTo_lh_₁(a⁷, b⁵) = if (a⁷ <= b⁵) then 
//│ 	let _lh_listcomp_fun_ls_t⁹ = enumFromTo_lh_₁((a⁷ + 1), b⁵)
//│ 	in let _lh_listcomp_fun_ls_h⁹ = a⁷
//│ 	in (fun _lh_alphabeticRule_LH_C_1⁴ -> (fun _lh_listcomp_fun⁹ -> 
//│ 		let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C 
//│ 				let t¹² = _lh_listcomp_fun_ls_h⁴
//│ 				in let h¹¹ = char_of_int⁰(_lh_listcomp_fun_ls_h⁹)
//│ 				in (fun ys⁴ -> [LH_C h¹¹ mappend_lh_₁(t¹², ys⁴)]) _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t⁴)]
//│ 			| LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ 		in _lh_listcomp_fun¹⁰(expand_lh_₁(_lh_alphabeticRule_LH_C_1⁴)))) else (fun _lh_alphabeticRule_LH_C_1⁵ -> (fun _lh_listcomp_fun¹¹ -> [LH_N]))
//│ def enumFromTo_lh_₂(a¹¹, b⁹) = if (a¹¹ <= b⁹) then 
//│ 	let t¹⁷ = enumFromTo_lh_₂((a¹¹ + 1), b⁹)
//│ 	in let h¹⁵ = a¹¹
//│ 	in (fun a¹² -> reverse_helper_lh_₁(t¹⁷, 
//│ 		let _lh_listcomp_fun_ls_t¹³ = a¹²
//│ 		in let _lh_listcomp_fun_ls_h¹² = h¹⁵
//│ 		in (fun _lh_alphabeticRule_LH_C_1⁶ -> (fun _lh_listcomp_fun²⁴ -> 
//│ 			let _lh_listcomp_fun²⁵ = (fun _lh_listcomp_fun_para¹⁶ -> case _lh_listcomp_fun_para¹⁶ of {
//│ 				LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C 
//│ 					let t¹⁸ = _lh_listcomp_fun_ls_h⁶
//│ 					in let h¹⁶ = char_of_int⁰(_lh_listcomp_fun_ls_h¹²)
//│ 					in (fun ys¹⁰ -> [LH_C h¹⁶ mappend_lh_₁(t¹⁸, ys¹⁰)]) _lh_listcomp_fun²⁵(_lh_listcomp_fun_ls_t⁶)]
//│ 				| LH_N  => _lh_listcomp_fun²⁴(_lh_listcomp_fun_ls_t¹³)})
//│ 			in _lh_listcomp_fun²⁵(expand_lh_₁(_lh_alphabeticRule_LH_C_1⁶)))))) else (fun a¹³ -> a¹³)
//│ def enumFromTo_lh_₃(a⁸, b⁶) = if (a⁸ <= b⁶) then 
//│ 	let _lh_listcomp_fun_ls_t¹⁰ = enumFromTo_lh_₃((a⁸ + 1), b⁶)
//│ 	in let _lh_listcomp_fun_ls_h¹⁰ = a⁸
//│ 	in (fun _lh_listcomp_fun¹² -> (fun _lh_numericRule_LH_C_1³ -> (fun width¹ -> 
//│ 		let _lh_listcomp_fun¹³ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C mappend_lh_₂(pad_lh_₁(string_of_int⁰(_lh_listcomp_fun_ls_h¹⁰), width¹), _lh_listcomp_fun_ls_h²) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t²)]
//│ 			| LH_N  => _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t¹⁰)})
//│ 		in _lh_listcomp_fun¹³(expand_lh_₁(_lh_numericRule_LH_C_1³))))) else (fun _lh_listcomp_fun¹⁴ -> (fun _lh_numericRule_LH_C_1⁴ -> (fun width² -> [LH_N])))
//│ def enumFromTo_lh_₄(a⁹, b⁷) = if (a⁹ <= b⁷) then 
//│ 	let _lh_listcomp_fun_ls_t¹¹ = enumFromTo_lh_₄((a⁹ + 1), b⁷)
//│ 	in (fun _lh_listcomp_fun¹⁷ -> 
//│ 		let t¹⁵ = _lh_listcomp_fun¹⁷(_lh_listcomp_fun_ls_t¹¹)
//│ 		in let h¹⁴ = '0'
//│ 		in (fun ys⁸ -> [LH_C h¹⁴ mappend_lh_₃(t¹⁵, ys⁸)])) else (fun _lh_listcomp_fun¹⁸ -> (fun ys⁹ -> ys⁹))
//│ def expand_lh_₁(_lh_expand_arg1¹) = case _lh_expand_arg1¹ of {
//│ 	LH_N  => [LH_C (fun ys⁶ -> ys⁶) [LH_N]]
//│ 	| LH_C _lh_expand_LH_C_0⁰ _lh_expand_LH_C_1⁰ => case _lh_expand_LH_C_0⁰ of {
//│ 		'<'  => numericRule_lh_₁(_lh_expand_LH_C_1⁰)
//│ 		| '['  => alphabeticRule_lh_₁(_lh_expand_LH_C_1⁰)
//│ 		| _  => constantRule_lh_₁(_lh_expand_arg1¹)}
//│ 	| _  => constantRule_lh_₂(_lh_expand_arg1¹)}
//│ def foldl_lh_₁(f⁹, i⁹, ls¹²) = ls¹²(f⁹, i⁹)
//│ def foldl_lh_₂(f⁵, i⁵, ls⁷) = ls⁷(f⁵, i⁵)
//│ def length_lh_₁(ls⁹) = case ls⁹ of {
//│ 	LH_C h⁷ t⁷ => (1 + length_lh_₁(t⁷))
//│ 	| LH_N  => 0}
//│ def length_lh_₂(ls¹¹) = case ls¹¹ of {
//│ 	LH_C h⁶ t⁶ => (1 + length_lh_₂(t⁶))
//│ 	| LH_N  => 0}
//│ def length_lh_₃(ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h⁰ t⁰ => (1 + length_lh_₃(t⁰))
//│ 	| LH_N  => 0}
//│ def mappend_lh_₁(xs³, ys³) = xs³(ys³)
//│ def mappend_lh_₂(xs⁵, ys¹¹) = case xs⁵ of {
//│ 	LH_C h⁵ t⁵ => 
//│ 		let t¹⁹ = mappend_lh_₂(t⁵, ys¹¹)
//│ 		in let h¹⁷ = h⁵
//│ 		in (fun ys¹² -> [LH_C h¹⁷ mappend_lh_₁(t¹⁹, ys¹²)])
//│ 	| LH_N  => ys¹¹}
//│ def mappend_lh_₃(xs⁴, ys⁷) = xs⁴(ys⁷)
//│ def max_lh_₁(_lh_max_arg1¹, _lh_max_arg2¹) = if (_lh_max_arg1¹ > _lh_max_arg2¹) then _lh_max_arg1¹ else _lh_max_arg2¹
//│ def mknum_lh_₁(_lh_mknum_arg1²) = foldl_lh_₁((fun u² -> (fun c⁵ -> ((u² * 10) + (int_of_char⁰(c⁵) - int_of_char⁰('0'))))), 0, _lh_mknum_arg1²)
//│ def mknum_lh_₂(_lh_mknum_arg1³) = foldl_lh_₂((fun u³ -> (fun c⁷ -> ((u³ * 10) + (int_of_char⁰(c⁷) - int_of_char⁰('0'))))), 0, _lh_mknum_arg1³)
//│ def numericRule_lh_₁(_lh_numericRule_arg1¹) = 
//│ 	let _lh_matchIdent⁷ = span_lh_₂((fun c⁶ -> polyNeq⁰(c⁶, '-')), _lh_numericRule_arg1¹)
//│ 	in case _lh_matchIdent⁷ of {
//│ 		LH_P2 _lh_numericRule_LH_P2_0⁰ _lh_numericRule_LH_P2_1⁰ => _lh_numericRule_LH_P2_1⁰(_lh_numericRule_LH_P2_0⁰)
//│ 		| _  => error⁰}
//│ def pad_lh_₁(_lh_pad_arg1¹, _lh_pad_arg2¹) = mappend_lh_₃(
//│ 	let _lh_listcomp_fun²⁷ = (fun _lh_listcomp_fun_para¹⁸ -> _lh_listcomp_fun_para¹⁸(_lh_listcomp_fun²⁷))
//│ 	in _lh_listcomp_fun²⁷(enumFromTo_lh_₄(1, (_lh_pad_arg2¹ - length_lh_₃(_lh_pad_arg1¹)))), _lh_pad_arg1¹)
//│ def reverse_helper_lh_₁(ls⁸, a⁶) = ls⁸(a⁶)
//│ def reverse_lh_₁(ls¹³) = reverse_helper_lh_₁(ls¹³, (fun _lh_alphabeticRule_LH_C_1⁷ -> (fun _lh_listcomp_fun²⁸ -> [LH_N])))
//│ def span_lh_₁(_lh_span_arg1³, _lh_span_arg2³) = case _lh_span_arg2³ of {
//│ 	LH_N  => [LH_P2 (fun f⁶ -> (fun i⁶ -> i⁶)) (fun _lh_numericRule_LH_P2_0⁵ -> (fun _lh_numericRule_LH_P2_0⁶ -> error⁰))]
//│ 	| LH_C _lh_span_LH_C_0¹ _lh_span_LH_C_1¹ => if _lh_span_arg1³(_lh_span_LH_C_0¹) then 
//│ 		let _lh_matchIdent⁸ = span_lh_₁(_lh_span_arg1³, _lh_span_LH_C_1¹)
//│ 		in case _lh_matchIdent⁸ of {
//│ 			LH_P2 _lh_span_LH_P2_0¹ _lh_span_LH_P2_1¹ => [LH_P2 
//│ 				let t¹⁴ = _lh_span_LH_P2_0¹
//│ 				in let h¹³ = _lh_span_LH_C_0¹
//│ 				in (fun f⁷ -> (fun i⁷ -> foldl_lh_₂(f⁷, f⁷(i⁷, h¹³), t¹⁴))) _lh_span_LH_P2_1¹]
//│ 			| _  => error⁰} else [LH_P2 (fun f⁸ -> (fun i⁸ -> i⁸)) 
//│ 		let _lh_numericRule_LH_C_1⁵ = _lh_span_LH_C_1¹
//│ 		in (fun _lh_numericRule_LH_P2_0⁷ -> (fun _lh_numericRule_LH_P2_0⁸ -> 
//│ 			let _lh_matchIdent⁹ = 	
//│ 				let _lh_numericRule_LH_P2_1³ = mknum_lh_₂(_lh_numericRule_LH_P2_0⁷)
//│ 				in let _lh_numericRule_LH_P2_0⁹ = mknum_lh_₁(_lh_numericRule_LH_P2_0⁸)
//│ 				in (fun _lh_numericRule_LH_C_1⁶ -> 
//│ 					let width³ = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0⁹)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1³)))
//│ 					in let _lh_listcomp_fun¹⁶ = (fun _lh_listcomp_fun_para¹² -> _lh_listcomp_fun_para¹²(_lh_listcomp_fun¹⁶, _lh_numericRule_LH_C_1⁶, width³))
//│ 					in _lh_listcomp_fun¹⁶(if (_lh_numericRule_LH_P2_0⁹ < _lh_numericRule_LH_P2_1³) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0⁹, _lh_numericRule_LH_P2_1³) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0⁹, (_lh_numericRule_LH_P2_0⁹ - 1), _lh_numericRule_LH_P2_1³)))
//│ 			in _lh_matchIdent⁹(_lh_numericRule_LH_C_1⁵)))]
//│ 	| _  => error⁰}
//│ def span_lh_₂(_lh_span_arg1², _lh_span_arg2²) = case _lh_span_arg2² of {
//│ 	LH_N  => [LH_P2 (fun f² -> (fun i² -> i²)) (fun _lh_numericRule_LH_P2_0³ -> error⁰)]
//│ 	| LH_C _lh_span_LH_C_0⁰ _lh_span_LH_C_1⁰ => if _lh_span_arg1²(_lh_span_LH_C_0⁰) then 
//│ 		let _lh_matchIdent⁵ = span_lh_₂(_lh_span_arg1², _lh_span_LH_C_1⁰)
//│ 		in case _lh_matchIdent⁵ of {
//│ 			LH_P2 _lh_span_LH_P2_0⁰ _lh_span_LH_P2_1⁰ => [LH_P2 
//│ 				let t¹¹ = _lh_span_LH_P2_0⁰
//│ 				in let h¹⁰ = _lh_span_LH_C_0⁰
//│ 				in (fun f³ -> (fun i³ -> foldl_lh_₁(f³, f³(i³, h¹⁰), t¹¹))) _lh_span_LH_P2_1⁰]
//│ 			| _  => error⁰} else [LH_P2 (fun f⁴ -> (fun i⁴ -> i⁴)) 
//│ 		let _lh_numericRule_LH_C_1² = _lh_span_LH_C_1⁰
//│ 		in (fun _lh_numericRule_LH_P2_0⁴ -> 
//│ 			let _lh_matchIdent⁶ = span_lh_₁((fun c⁴ -> polyNeq⁰(c⁴, '>')), _lh_numericRule_LH_C_1²)
//│ 			in case _lh_matchIdent⁶ of {
//│ 				LH_P2 _lh_numericRule_LH_P2_0¹ _lh_numericRule_LH_P2_1¹ => _lh_numericRule_LH_P2_1¹(_lh_numericRule_LH_P2_0¹, _lh_numericRule_LH_P2_0⁴)
//│ 				| _  => error⁰})]
//│ 	| _  => error⁰}
//│ def testGenRegexs_nofib_lh_₁(_lh_testGenRegexs_nofib_arg1¹) = concat_lh_₁(expand_lh_₁(_lh_testGenRegexs_nofib_arg1¹))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ alphabeticRule_lh_₁, reverse_helper_lh_₁, mappend_lh_₁, mappend_lh_₃, foldl_lh_₁, pad_lh_₁, numericRule_lh_₁, foldl_lh_₂
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ span_lh_₂ -> 2
//│ span_lh_₁ -> 2
//│ enumFromTo_lh_₂ -> 2
//│ mappend_lh_₂ -> 2
//│ constantRule_lh_₂ -> 1
//│ enumFromTo_lh_₁ -> 2
//│ enumFromTo_lh_₃ -> 2
//│ constantRule_lh_₁ -> 1
//│ reverse_lh_₁ -> 1
//│ expand_lh_₁ -> 1
//│ enumFromTo_lh_₄ -> 2
//│ enumFromThenTo_lh_₁ -> 3
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ testGenRegexs_nofib_lh_₁(primId⁰([LH_C '[' [LH_C 'a' [LH_C '-' [LH_C 'j' [LH_C ']' [LH_C '[' [LH_C 'a' [LH_C '-' [LH_C 'j' [LH_C ']' [LH_C '[' [LH_C 'a' [LH_C '-' [LH_C 'j' [LH_C ']' [LH_C '[' [LH_C '0' [LH_C '-' [LH_C '9' [LH_C ']' [LH_N]]]]]]]]]]]]]]]]]]]]]))
//│ def alphabeticRule_lh_₁(_lh_alphabeticRule_arg1⁰) = case _lh_alphabeticRule_arg1⁰ of {
//│ 	LH_C _lh_alphabeticRule_LH_C_0⁴ _lh_alphabeticRule_LH_C_1⁶ => case _lh_alphabeticRule_LH_C_1⁶ of {
//│ 		LH_C _lh_alphabeticRule_LH_C_0⁵ _lh_alphabeticRule_LH_C_1⁷ => case _lh_alphabeticRule_LH_C_0⁵ of {
//│ 			'-'  => case _lh_alphabeticRule_LH_C_1⁷ of {
//│ 				LH_C _lh_alphabeticRule_LH_C_0⁶ _lh_alphabeticRule_LH_C_1⁸ => case _lh_alphabeticRule_LH_C_1⁸ of {
//│ 					LH_C _lh_alphabeticRule_LH_C_0⁷ _lh_alphabeticRule_LH_C_1⁹ => case _lh_alphabeticRule_LH_C_0⁷ of {
//│ 						']'  => if (int_of_char⁰(_lh_alphabeticRule_LH_C_0⁴) <= int_of_char⁰(_lh_alphabeticRule_LH_C_0⁶)) then 
//│ 							let _lh_listcomp_fun¹⁷ = (fun _lh_listcomp_fun_para⁹ -> _lh_listcomp_fun_para⁹(_lh_alphabeticRule_LH_C_1⁹, _lh_listcomp_fun¹⁷))
//│ 							in _lh_listcomp_fun¹⁷(enumFromTo_lh_₁(int_of_char⁰(_lh_alphabeticRule_LH_C_0⁴), int_of_char⁰(_lh_alphabeticRule_LH_C_0⁶))) else 
//│ 							let _lh_listcomp_fun¹⁸ = (fun _lh_listcomp_fun_para¹⁰ -> _lh_listcomp_fun_para¹⁰(_lh_alphabeticRule_LH_C_1⁹, _lh_listcomp_fun¹⁸))
//│ 							in _lh_listcomp_fun¹⁸(reverse_lh_₁(enumFromTo_lh_₂(int_of_char⁰(_lh_alphabeticRule_LH_C_0⁶), int_of_char⁰(_lh_alphabeticRule_LH_C_0⁴))))
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def concat_lh_₁(lss⁰) = case lss⁰ of {
//│ 	LH_C h¹³ t¹⁴ => h¹³(concat_lh_₁(t¹⁴))
//│ 	| LH_N  => [LH_N]}
//│ def constantRule_lh_₁(_lh_constantRule_arg1⁰) = case _lh_constantRule_arg1⁰ of {
//│ 	LH_C _lh_constantRule_LH_C_0⁰ _lh_constantRule_LH_C_1⁰ => 
//│ 		let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C 
//│ 				let t⁴ = _lh_listcomp_fun_ls_h⁴
//│ 				in let h⁴ = _lh_constantRule_LH_C_0⁰
//│ 				in (fun ys² -> [LH_C h⁴ t⁴(ys²)]) _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁴)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁷(expand_lh_₁(_lh_constantRule_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def constantRule_lh_₂(_lh_constantRule_arg1¹) = case _lh_constantRule_arg1¹ of {
//│ 	LH_C _lh_constantRule_LH_C_0¹ _lh_constantRule_LH_C_1¹ => 
//│ 		let _lh_listcomp_fun²¹ = (fun _lh_listcomp_fun_para¹² -> case _lh_listcomp_fun_para¹² of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t¹⁰ => [LH_C 
//│ 				let t¹³ = _lh_listcomp_fun_ls_h⁹
//│ 				in let h¹² = _lh_constantRule_LH_C_0¹
//│ 				in (fun ys¹⁰ -> [LH_C h¹² t¹³(ys¹⁰)]) _lh_listcomp_fun²¹(_lh_listcomp_fun_ls_t¹⁰)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²¹(expand_lh_₁(_lh_constantRule_LH_C_1¹))
//│ 	| _  => error⁰}
//│ def enumFromThenTo_lh_₁(a⁴, t⁸, b³) = if (a⁴ <= b³) then 
//│ 	let _lh_listcomp_fun_ls_t⁶ = enumFromThenTo_lh_₁(t⁸, ((2 * t⁸) - a⁴), b³)
//│ 	in let _lh_listcomp_fun_ls_h⁵ = a⁴
//│ 	in (fun _lh_listcomp_fun¹³ -> (fun _lh_numericRule_LH_C_1⁵ -> (fun width³ -> 
//│ 		let _lh_listcomp_fun¹⁴ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁷ => [LH_C mappend_lh_₂(
//│ 				let _lh_listcomp_fun¹⁵ = (fun _lh_listcomp_fun_para⁸ -> _lh_listcomp_fun_para⁸(_lh_listcomp_fun¹⁵))
//│ 				in _lh_listcomp_fun¹⁵(enumFromTo_lh_₄(1, (width³ - length_lh_₃(string_of_int⁰(_lh_listcomp_fun_ls_h⁵)))))(string_of_int⁰(_lh_listcomp_fun_ls_h⁵)), _lh_listcomp_fun_ls_h⁶) _lh_listcomp_fun¹⁴(_lh_listcomp_fun_ls_t⁷)]
//│ 			| LH_N  => _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁶)})
//│ 		in _lh_listcomp_fun¹⁴(expand_lh_₁(_lh_numericRule_LH_C_1⁵))))) else (fun _lh_listcomp_fun¹⁶ -> (fun _lh_numericRule_LH_C_1⁶ -> (fun width⁴ -> [LH_N])))
//│ def enumFromTo_lh_₁(a¹, b⁰) = if (a¹ <= b⁰) then 
//│ 	let _lh_listcomp_fun_ls_t⁰ = enumFromTo_lh_₁((a¹ + 1), b⁰)
//│ 	in let _lh_listcomp_fun_ls_h⁰ = a¹
//│ 	in (fun _lh_alphabeticRule_LH_C_1⁰ -> (fun _lh_listcomp_fun⁰ -> 
//│ 		let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C 
//│ 				let t¹ = _lh_listcomp_fun_ls_h¹
//│ 				in let h¹ = char_of_int⁰(_lh_listcomp_fun_ls_h⁰)
//│ 				in (fun ys¹ -> [LH_C h¹ t¹(ys¹)]) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 			| LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ 		in _lh_listcomp_fun¹(expand_lh_₁(_lh_alphabeticRule_LH_C_1⁰)))) else (fun _lh_alphabeticRule_LH_C_1¹ -> (fun _lh_listcomp_fun² -> [LH_N]))
//│ def enumFromTo_lh_₂(a⁵, b⁴) = if (a⁵ <= b⁴) then 
//│ 	let t⁹ = enumFromTo_lh_₂((a⁵ + 1), b⁴)
//│ 	in let h⁸ = a⁵
//│ 	in (fun a⁶ -> t⁹(
//│ 		let _lh_listcomp_fun_ls_t⁸ = a⁶
//│ 		in let _lh_listcomp_fun_ls_h⁷ = h⁸
//│ 		in (fun _lh_alphabeticRule_LH_C_1¹⁰ -> (fun _lh_listcomp_fun¹⁹ -> 
//│ 			let _lh_listcomp_fun²⁰ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {
//│ 				LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁹ => [LH_C 
//│ 					let t¹⁰ = _lh_listcomp_fun_ls_h⁸
//│ 					in let h⁹ = char_of_int⁰(_lh_listcomp_fun_ls_h⁷)
//│ 					in (fun ys⁷ -> [LH_C h⁹ t¹⁰(ys⁷)]) _lh_listcomp_fun²⁰(_lh_listcomp_fun_ls_t⁹)]
//│ 				| LH_N  => _lh_listcomp_fun¹⁹(_lh_listcomp_fun_ls_t⁸)})
//│ 			in _lh_listcomp_fun²⁰(expand_lh_₁(_lh_alphabeticRule_LH_C_1¹⁰)))))) else (fun a⁷ -> a⁷)
//│ def enumFromTo_lh_₃(a², b¹) = if (a² <= b¹) then 
//│ 	let _lh_listcomp_fun_ls_t² = enumFromTo_lh_₃((a² + 1), b¹)
//│ 	in let _lh_listcomp_fun_ls_h² = a²
//│ 	in (fun _lh_listcomp_fun³ -> (fun _lh_numericRule_LH_C_1¹ -> (fun width⁰ -> 
//│ 		let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C mappend_lh_₂(
//│ 				let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun⁵))
//│ 				in _lh_listcomp_fun⁵(enumFromTo_lh_₄(1, (width⁰ - length_lh_₃(string_of_int⁰(_lh_listcomp_fun_ls_h²)))))(string_of_int⁰(_lh_listcomp_fun_ls_h²)), _lh_listcomp_fun_ls_h³) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t³)]
//│ 			| LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t²)})
//│ 		in _lh_listcomp_fun⁴(expand_lh_₁(_lh_numericRule_LH_C_1¹))))) else (fun _lh_listcomp_fun⁶ -> (fun _lh_numericRule_LH_C_1² -> (fun width¹ -> [LH_N])))
//│ def enumFromTo_lh_₄(a³, b²) = if (a³ <= b²) then 
//│ 	let _lh_listcomp_fun_ls_t⁵ = enumFromTo_lh_₄((a³ + 1), b²)
//│ 	in (fun _lh_listcomp_fun¹¹ -> 
//│ 		let t⁷ = _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t⁵)
//│ 		in let h⁷ = '0'
//│ 		in (fun ys⁵ -> [LH_C h⁷ t⁷(ys⁵)])) else (fun _lh_listcomp_fun¹² -> (fun ys⁶ -> ys⁶))
//│ def expand_lh_₁(_lh_expand_arg1⁰) = case _lh_expand_arg1⁰ of {
//│ 	LH_N  => [LH_C (fun ys³ -> ys³) [LH_N]]
//│ 	| LH_C _lh_expand_LH_C_0⁰ _lh_expand_LH_C_1⁰ => case _lh_expand_LH_C_0⁰ of {
//│ 		'<'  => 
//│ 			let _lh_matchIdent³ = span_lh_₂((fun c³ -> polyNeq⁰(c³, '-')), _lh_expand_LH_C_1⁰)
//│ 			in case _lh_matchIdent³ of {
//│ 				LH_P2 _lh_numericRule_LH_P2_0⁴ _lh_numericRule_LH_P2_1² => _lh_numericRule_LH_P2_1²(_lh_numericRule_LH_P2_0⁴)
//│ 				| _  => error⁰}
//│ 		| '['  => case _lh_expand_LH_C_1⁰ of {
//│ 			LH_C _lh_alphabeticRule_LH_C_0⁰ _lh_alphabeticRule_LH_C_1² => case _lh_alphabeticRule_LH_C_1² of {
//│ 				LH_C _lh_alphabeticRule_LH_C_0¹ _lh_alphabeticRule_LH_C_1³ => case _lh_alphabeticRule_LH_C_0¹ of {
//│ 					'-'  => case _lh_alphabeticRule_LH_C_1³ of {
//│ 						LH_C _lh_alphabeticRule_LH_C_0² _lh_alphabeticRule_LH_C_1⁴ => case _lh_alphabeticRule_LH_C_1⁴ of {
//│ 							LH_C _lh_alphabeticRule_LH_C_0³ _lh_alphabeticRule_LH_C_1⁵ => case _lh_alphabeticRule_LH_C_0³ of {
//│ 								']'  => if (int_of_char⁰(_lh_alphabeticRule_LH_C_0⁰) <= int_of_char⁰(_lh_alphabeticRule_LH_C_0²)) then 
//│ 									let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁴ -> _lh_listcomp_fun_para⁴(_lh_alphabeticRule_LH_C_1⁵, _lh_listcomp_fun⁸))
//│ 									in _lh_listcomp_fun⁸(enumFromTo_lh_₁(int_of_char⁰(_lh_alphabeticRule_LH_C_0⁰), int_of_char⁰(_lh_alphabeticRule_LH_C_0²))) else 
//│ 									let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁵ -> _lh_listcomp_fun_para⁵(_lh_alphabeticRule_LH_C_1⁵, _lh_listcomp_fun⁹))
//│ 									in _lh_listcomp_fun⁹(reverse_lh_₁(enumFromTo_lh_₂(int_of_char⁰(_lh_alphabeticRule_LH_C_0²), int_of_char⁰(_lh_alphabeticRule_LH_C_0⁰))))
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => constantRule_lh_₁(_lh_expand_arg1⁰)}
//│ 	| _  => constantRule_lh_₂(_lh_expand_arg1⁰)}
//│ def foldl_lh_₁(f⁷, i⁷, ls⁵) = ls⁵(f⁷, i⁷)
//│ def foldl_lh_₂(f³, i³, ls⁰) = ls⁰(f³, i³)
//│ def length_lh_₁(ls²) = case ls² of {
//│ 	LH_C h² t² => (1 + length_lh_₁(t²))
//│ 	| LH_N  => 0}
//│ def length_lh_₂(ls⁴) = case ls⁴ of {
//│ 	LH_C h⁵ t⁵ => (1 + length_lh_₂(t⁵))
//│ 	| LH_N  => 0}
//│ def length_lh_₃(ls³) = case ls³ of {
//│ 	LH_C h³ t³ => (1 + length_lh_₃(t³))
//│ 	| LH_N  => 0}
//│ def mappend_lh_₁(xs⁰, ys⁰) = xs⁰(ys⁰)
//│ def mappend_lh_₂(xs², ys⁸) = case xs² of {
//│ 	LH_C h¹⁰ t¹¹ => 
//│ 		let t¹² = mappend_lh_₂(t¹¹, ys⁸)
//│ 		in let h¹¹ = h¹⁰
//│ 		in (fun ys⁹ -> [LH_C h¹¹ t¹²(ys⁹)])
//│ 	| LH_N  => ys⁸}
//│ def mappend_lh_₃(xs¹, ys⁴) = xs¹(ys⁴)
//│ def max_lh_₁(_lh_max_arg1⁰, _lh_max_arg2⁰) = if (_lh_max_arg1⁰ > _lh_max_arg2⁰) then _lh_max_arg1⁰ else _lh_max_arg2⁰
//│ def mknum_lh_₁(_lh_mknum_arg1⁰) = _lh_mknum_arg1⁰((fun u⁰ -> (fun c¹ -> ((u⁰ * 10) + (int_of_char⁰(c¹) - int_of_char⁰('0'))))), 0)
//│ def mknum_lh_₂(_lh_mknum_arg1¹) = _lh_mknum_arg1¹((fun u¹ -> (fun c⁴ -> ((u¹ * 10) + (int_of_char⁰(c⁴) - int_of_char⁰('0'))))), 0)
//│ def numericRule_lh_₁(_lh_numericRule_arg1⁰) = 
//│ 	let _lh_matchIdent² = span_lh_₂((fun c² -> polyNeq⁰(c², '-')), _lh_numericRule_arg1⁰)
//│ 	in case _lh_matchIdent² of {
//│ 		LH_P2 _lh_numericRule_LH_P2_0³ _lh_numericRule_LH_P2_1¹ => _lh_numericRule_LH_P2_1¹(_lh_numericRule_LH_P2_0³)
//│ 		| _  => error⁰}
//│ def pad_lh_₁(_lh_pad_arg1⁰, _lh_pad_arg2⁰) = 
//│ 	let _lh_listcomp_fun²² = (fun _lh_listcomp_fun_para¹³ -> _lh_listcomp_fun_para¹³(_lh_listcomp_fun²²))
//│ 	in _lh_listcomp_fun²²(enumFromTo_lh_₄(1, (_lh_pad_arg2⁰ - length_lh_₃(_lh_pad_arg1⁰))))(_lh_pad_arg1⁰)
//│ def reverse_helper_lh_₁(ls¹, a⁰) = ls¹(a⁰)
//│ def reverse_lh_₁(ls⁶) = ls⁶((fun _lh_alphabeticRule_LH_C_1¹¹ -> (fun _lh_listcomp_fun²³ -> [LH_N])))
//│ def span_lh_₁(_lh_span_arg1¹, _lh_span_arg2¹) = case _lh_span_arg2¹ of {
//│ 	LH_N  => [LH_P2 (fun f⁴ -> (fun i⁴ -> i⁴)) (fun _lh_numericRule_LH_P2_0⁵ -> (fun _lh_numericRule_LH_P2_0⁶ -> error⁰))]
//│ 	| LH_C _lh_span_LH_C_0¹ _lh_span_LH_C_1¹ => if _lh_span_arg1¹(_lh_span_LH_C_0¹) then 
//│ 		let _lh_matchIdent⁴ = span_lh_₁(_lh_span_arg1¹, _lh_span_LH_C_1¹)
//│ 		in case _lh_matchIdent⁴ of {
//│ 			LH_P2 _lh_span_LH_P2_0¹ _lh_span_LH_P2_1¹ => [LH_P2 
//│ 				let t⁶ = _lh_span_LH_P2_0¹
//│ 				in let h⁶ = _lh_span_LH_C_0¹
//│ 				in (fun f⁵ -> (fun i⁵ -> t⁶(f⁵, f⁵(i⁵, h⁶)))) _lh_span_LH_P2_1¹]
//│ 			| _  => error⁰} else [LH_P2 (fun f⁶ -> (fun i⁶ -> i⁶)) 
//│ 		let _lh_numericRule_LH_C_1³ = _lh_span_LH_C_1¹
//│ 		in (fun _lh_numericRule_LH_P2_0⁷ -> (fun _lh_numericRule_LH_P2_0⁸ -> 
//│ 			let _lh_matchIdent⁵ = 	
//│ 				let _lh_numericRule_LH_P2_1³ = mknum_lh_₂(_lh_numericRule_LH_P2_0⁷)
//│ 				in let _lh_numericRule_LH_P2_0⁹ = mknum_lh_₁(_lh_numericRule_LH_P2_0⁸)
//│ 				in (fun _lh_numericRule_LH_C_1⁴ -> 
//│ 					let width² = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0⁹)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1³)))
//│ 					in let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para⁶ -> _lh_listcomp_fun_para⁶(_lh_listcomp_fun¹⁰, _lh_numericRule_LH_C_1⁴, width²))
//│ 					in _lh_listcomp_fun¹⁰(if (_lh_numericRule_LH_P2_0⁹ < _lh_numericRule_LH_P2_1³) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0⁹, _lh_numericRule_LH_P2_1³) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0⁹, (_lh_numericRule_LH_P2_0⁹ - 1), _lh_numericRule_LH_P2_1³)))
//│ 			in _lh_matchIdent⁵(_lh_numericRule_LH_C_1³)))]
//│ 	| _  => error⁰}
//│ def span_lh_₂(_lh_span_arg1⁰, _lh_span_arg2⁰) = case _lh_span_arg2⁰ of {
//│ 	LH_N  => [LH_P2 (fun f⁰ -> (fun i⁰ -> i⁰)) (fun _lh_numericRule_LH_P2_0⁰ -> error⁰)]
//│ 	| LH_C _lh_span_LH_C_0⁰ _lh_span_LH_C_1⁰ => if _lh_span_arg1⁰(_lh_span_LH_C_0⁰) then 
//│ 		let _lh_matchIdent⁰ = span_lh_₂(_lh_span_arg1⁰, _lh_span_LH_C_1⁰)
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_P2 _lh_span_LH_P2_0⁰ _lh_span_LH_P2_1⁰ => [LH_P2 
//│ 				let t⁰ = _lh_span_LH_P2_0⁰
//│ 				in let h⁰ = _lh_span_LH_C_0⁰
//│ 				in (fun f¹ -> (fun i¹ -> t⁰(f¹, f¹(i¹, h⁰)))) _lh_span_LH_P2_1⁰]
//│ 			| _  => error⁰} else [LH_P2 (fun f² -> (fun i² -> i²)) 
//│ 		let _lh_numericRule_LH_C_1⁰ = _lh_span_LH_C_1⁰
//│ 		in (fun _lh_numericRule_LH_P2_0¹ -> 
//│ 			let _lh_matchIdent¹ = span_lh_₁((fun c⁰ -> polyNeq⁰(c⁰, '>')), _lh_numericRule_LH_C_1⁰)
//│ 			in case _lh_matchIdent¹ of {
//│ 				LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1⁰ => _lh_numericRule_LH_P2_1⁰(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_0¹)
//│ 				| _  => error⁰})]
//│ 	| _  => error⁰}
//│ def testGenRegexs_nofib_lh_₁(_lh_testGenRegexs_nofib_arg1⁰) = concat_lh_₁(expand_lh_₁(_lh_testGenRegexs_nofib_arg1⁰))
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ testGenRegexs_nofib_lh_₁(primId⁰([LH_C '[' [LH_C 'a' [LH_C '-' [LH_C 'j' [LH_C ']' [LH_C '[' [LH_C 'a' [LH_C '-' [LH_C 'j' [LH_C ']' [LH_C '[' [LH_C 'a' [LH_C '-' [LH_C 'j' [LH_C ']' [LH_C '[' [LH_C '0' [LH_C '-' [LH_C '9' [LH_C ']' [LH_N]]]]]]]]]]]]]]]]]]]]]))
//│ def alphabeticRule_lh_₁(_lh_alphabeticRule_arg1⁰) = case _lh_alphabeticRule_arg1⁰ of {
//│ 	LH_C _lh_alphabeticRule_LH_C_0⁴ _lh_alphabeticRule_LH_C_1⁶ => case _lh_alphabeticRule_LH_C_1⁶ of {
//│ 		LH_C _lh_alphabeticRule_LH_C_0⁵ _lh_alphabeticRule_LH_C_1⁷ => case _lh_alphabeticRule_LH_C_0⁵ of {
//│ 			'-'  => case _lh_alphabeticRule_LH_C_1⁷ of {
//│ 				LH_C _lh_alphabeticRule_LH_C_0⁶ _lh_alphabeticRule_LH_C_1⁸ => case _lh_alphabeticRule_LH_C_1⁸ of {
//│ 					LH_C _lh_alphabeticRule_LH_C_0⁷ _lh_alphabeticRule_LH_C_1⁹ => case _lh_alphabeticRule_LH_C_0⁷ of {
//│ 						']'  => if (int_of_char⁰(_lh_alphabeticRule_LH_C_0⁴) <= int_of_char⁰(_lh_alphabeticRule_LH_C_0⁶)) then 
//│ 							let _lh_listcomp_fun¹⁷ = (fun _lh_listcomp_fun_para⁹ -> _lh_listcomp_fun_para⁹(_lh_alphabeticRule_LH_C_1⁹, _lh_listcomp_fun¹⁷))
//│ 							in _lh_listcomp_fun¹⁷(enumFromTo_lh_₁(int_of_char⁰(_lh_alphabeticRule_LH_C_0⁴), int_of_char⁰(_lh_alphabeticRule_LH_C_0⁶))) else 
//│ 							let _lh_listcomp_fun¹⁸ = (fun _lh_listcomp_fun_para¹⁰ -> _lh_listcomp_fun_para¹⁰(_lh_alphabeticRule_LH_C_1⁹, _lh_listcomp_fun¹⁸))
//│ 							in _lh_listcomp_fun¹⁸(reverse_lh_₁(enumFromTo_lh_₂(int_of_char⁰(_lh_alphabeticRule_LH_C_0⁶), int_of_char⁰(_lh_alphabeticRule_LH_C_0⁴))))
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def concat_lh_₁(lss⁰) = case lss⁰ of {
//│ 	LH_C h¹³ t¹⁴ => h¹³(concat_lh_₁(t¹⁴))
//│ 	| LH_N  => [LH_N]}
//│ def constantRule_lh_₁(_lh_constantRule_arg1⁰) = case _lh_constantRule_arg1⁰ of {
//│ 	LH_C _lh_constantRule_LH_C_0⁰ _lh_constantRule_LH_C_1⁰ => 
//│ 		let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C 
//│ 				let t⁴ = _lh_listcomp_fun_ls_h⁴
//│ 				in let h⁴ = _lh_constantRule_LH_C_0⁰
//│ 				in (fun ys² -> [LH_C h⁴ t⁴(ys²)]) _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁴)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁷(expand_lh_₁(_lh_constantRule_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def constantRule_lh_₂(_lh_constantRule_arg1¹) = case _lh_constantRule_arg1¹ of {
//│ 	LH_C _lh_constantRule_LH_C_0¹ _lh_constantRule_LH_C_1¹ => 
//│ 		let _lh_listcomp_fun²¹ = (fun _lh_listcomp_fun_para¹² -> case _lh_listcomp_fun_para¹² of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t¹⁰ => [LH_C 
//│ 				let t¹³ = _lh_listcomp_fun_ls_h⁹
//│ 				in let h¹² = _lh_constantRule_LH_C_0¹
//│ 				in (fun ys¹⁰ -> [LH_C h¹² t¹³(ys¹⁰)]) _lh_listcomp_fun²¹(_lh_listcomp_fun_ls_t¹⁰)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²¹(expand_lh_₁(_lh_constantRule_LH_C_1¹))
//│ 	| _  => error⁰}
//│ def enumFromThenTo_lh_₁(a⁴, t⁸, b³) = if (a⁴ <= b³) then 
//│ 	let _lh_listcomp_fun_ls_t⁶ = enumFromThenTo_lh_₁(t⁸, ((2 * t⁸) - a⁴), b³)
//│ 	in let _lh_listcomp_fun_ls_h⁵ = a⁴
//│ 	in (fun _lh_listcomp_fun¹³ -> (fun _lh_numericRule_LH_C_1⁵ -> (fun width³ -> 
//│ 		let _lh_listcomp_fun¹⁴ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁷ => [LH_C mappend_lh_₂(
//│ 				let _lh_listcomp_fun¹⁵ = (fun _lh_listcomp_fun_para⁸ -> _lh_listcomp_fun_para⁸(_lh_listcomp_fun¹⁵))
//│ 				in _lh_listcomp_fun¹⁵(enumFromTo_lh_₄(1, (width³ - length_lh_₃(string_of_int⁰(_lh_listcomp_fun_ls_h⁵)))))(string_of_int⁰(_lh_listcomp_fun_ls_h⁵)), _lh_listcomp_fun_ls_h⁶) _lh_listcomp_fun¹⁴(_lh_listcomp_fun_ls_t⁷)]
//│ 			| LH_N  => _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁶)})
//│ 		in _lh_listcomp_fun¹⁴(expand_lh_₁(_lh_numericRule_LH_C_1⁵))))) else (fun _lh_listcomp_fun¹⁶ -> (fun _lh_numericRule_LH_C_1⁶ -> (fun width⁴ -> [LH_N])))
//│ def enumFromTo_lh_₁(a¹, b⁰) = if (a¹ <= b⁰) then 
//│ 	let _lh_listcomp_fun_ls_t⁰ = enumFromTo_lh_₁((a¹ + 1), b⁰)
//│ 	in let _lh_listcomp_fun_ls_h⁰ = a¹
//│ 	in (fun _lh_alphabeticRule_LH_C_1⁰ -> (fun _lh_listcomp_fun⁰ -> 
//│ 		let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C 
//│ 				let t¹ = _lh_listcomp_fun_ls_h¹
//│ 				in let h¹ = char_of_int⁰(_lh_listcomp_fun_ls_h⁰)
//│ 				in (fun ys¹ -> [LH_C h¹ t¹(ys¹)]) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 			| LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ 		in _lh_listcomp_fun¹(expand_lh_₁(_lh_alphabeticRule_LH_C_1⁰)))) else (fun _lh_alphabeticRule_LH_C_1¹ -> (fun _lh_listcomp_fun² -> [LH_N]))
//│ def enumFromTo_lh_₂(a⁵, b⁴) = if (a⁵ <= b⁴) then 
//│ 	let t⁹ = enumFromTo_lh_₂((a⁵ + 1), b⁴)
//│ 	in let h⁸ = a⁵
//│ 	in (fun a⁶ -> t⁹(
//│ 		let _lh_listcomp_fun_ls_t⁸ = a⁶
//│ 		in let _lh_listcomp_fun_ls_h⁷ = h⁸
//│ 		in (fun _lh_alphabeticRule_LH_C_1¹⁰ -> (fun _lh_listcomp_fun¹⁹ -> 
//│ 			let _lh_listcomp_fun²⁰ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {
//│ 				LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁹ => [LH_C 
//│ 					let t¹⁰ = _lh_listcomp_fun_ls_h⁸
//│ 					in let h⁹ = char_of_int⁰(_lh_listcomp_fun_ls_h⁷)
//│ 					in (fun ys⁷ -> [LH_C h⁹ t¹⁰(ys⁷)]) _lh_listcomp_fun²⁰(_lh_listcomp_fun_ls_t⁹)]
//│ 				| LH_N  => _lh_listcomp_fun¹⁹(_lh_listcomp_fun_ls_t⁸)})
//│ 			in _lh_listcomp_fun²⁰(expand_lh_₁(_lh_alphabeticRule_LH_C_1¹⁰)))))) else (fun a⁷ -> a⁷)
//│ def enumFromTo_lh_₃(a², b¹) = if (a² <= b¹) then 
//│ 	let _lh_listcomp_fun_ls_t² = enumFromTo_lh_₃((a² + 1), b¹)
//│ 	in let _lh_listcomp_fun_ls_h² = a²
//│ 	in (fun _lh_listcomp_fun³ -> (fun _lh_numericRule_LH_C_1¹ -> (fun width⁰ -> 
//│ 		let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C mappend_lh_₂(
//│ 				let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun⁵))
//│ 				in _lh_listcomp_fun⁵(enumFromTo_lh_₄(1, (width⁰ - length_lh_₃(string_of_int⁰(_lh_listcomp_fun_ls_h²)))))(string_of_int⁰(_lh_listcomp_fun_ls_h²)), _lh_listcomp_fun_ls_h³) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t³)]
//│ 			| LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t²)})
//│ 		in _lh_listcomp_fun⁴(expand_lh_₁(_lh_numericRule_LH_C_1¹))))) else (fun _lh_listcomp_fun⁶ -> (fun _lh_numericRule_LH_C_1² -> (fun width¹ -> [LH_N])))
//│ def enumFromTo_lh_₄(a³, b²) = if (a³ <= b²) then 
//│ 	let _lh_listcomp_fun_ls_t⁵ = enumFromTo_lh_₄((a³ + 1), b²)
//│ 	in (fun _lh_listcomp_fun¹¹ -> 
//│ 		let t⁷ = _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t⁵)
//│ 		in let h⁷ = '0'
//│ 		in (fun ys⁵ -> [LH_C h⁷ t⁷(ys⁵)])) else (fun _lh_listcomp_fun¹² -> (fun ys⁶ -> ys⁶))
//│ def expand_lh_₁(_lh_expand_arg1⁰) = case _lh_expand_arg1⁰ of {
//│ 	LH_N  => [LH_C (fun ys³ -> ys³) [LH_N]]
//│ 	| LH_C _lh_expand_LH_C_0⁰ _lh_expand_LH_C_1⁰ => case _lh_expand_LH_C_0⁰ of {
//│ 		'<'  => 
//│ 			let _lh_matchIdent³ = span_lh_₂((fun c³ -> polyNeq⁰(c³, '-')), _lh_expand_LH_C_1⁰)
//│ 			in case _lh_matchIdent³ of {
//│ 				LH_P2 _lh_numericRule_LH_P2_0⁴ _lh_numericRule_LH_P2_1² => _lh_numericRule_LH_P2_1²(_lh_numericRule_LH_P2_0⁴)
//│ 				| _  => error⁰}
//│ 		| '['  => case _lh_expand_LH_C_1⁰ of {
//│ 			LH_C _lh_alphabeticRule_LH_C_0⁰ _lh_alphabeticRule_LH_C_1² => case _lh_alphabeticRule_LH_C_1² of {
//│ 				LH_C _lh_alphabeticRule_LH_C_0¹ _lh_alphabeticRule_LH_C_1³ => case _lh_alphabeticRule_LH_C_0¹ of {
//│ 					'-'  => case _lh_alphabeticRule_LH_C_1³ of {
//│ 						LH_C _lh_alphabeticRule_LH_C_0² _lh_alphabeticRule_LH_C_1⁴ => case _lh_alphabeticRule_LH_C_1⁴ of {
//│ 							LH_C _lh_alphabeticRule_LH_C_0³ _lh_alphabeticRule_LH_C_1⁵ => case _lh_alphabeticRule_LH_C_0³ of {
//│ 								']'  => if (int_of_char⁰(_lh_alphabeticRule_LH_C_0⁰) <= int_of_char⁰(_lh_alphabeticRule_LH_C_0²)) then 
//│ 									let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁴ -> _lh_listcomp_fun_para⁴(_lh_alphabeticRule_LH_C_1⁵, _lh_listcomp_fun⁸))
//│ 									in _lh_listcomp_fun⁸(enumFromTo_lh_₁(int_of_char⁰(_lh_alphabeticRule_LH_C_0⁰), int_of_char⁰(_lh_alphabeticRule_LH_C_0²))) else 
//│ 									let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁵ -> _lh_listcomp_fun_para⁵(_lh_alphabeticRule_LH_C_1⁵, _lh_listcomp_fun⁹))
//│ 									in _lh_listcomp_fun⁹(reverse_lh_₁(enumFromTo_lh_₂(int_of_char⁰(_lh_alphabeticRule_LH_C_0²), int_of_char⁰(_lh_alphabeticRule_LH_C_0⁰))))
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => constantRule_lh_₁(_lh_expand_arg1⁰)}
//│ 	| _  => constantRule_lh_₂(_lh_expand_arg1⁰)}
//│ def foldl_lh_₁(f⁷, i⁷, ls⁵) = ls⁵(f⁷, i⁷)
//│ def foldl_lh_₂(f³, i³, ls⁰) = ls⁰(f³, i³)
//│ def length_lh_₁(ls²) = case ls² of {
//│ 	LH_C h² t² => (1 + length_lh_₁(t²))
//│ 	| LH_N  => 0}
//│ def length_lh_₂(ls⁴) = case ls⁴ of {
//│ 	LH_C h⁵ t⁵ => (1 + length_lh_₂(t⁵))
//│ 	| LH_N  => 0}
//│ def length_lh_₃(ls³) = case ls³ of {
//│ 	LH_C h³ t³ => (1 + length_lh_₃(t³))
//│ 	| LH_N  => 0}
//│ def mappend_lh_₁(xs⁰, ys⁰) = xs⁰(ys⁰)
//│ def mappend_lh_₂(xs², ys⁸) = case xs² of {
//│ 	LH_C h¹⁰ t¹¹ => 
//│ 		let t¹² = mappend_lh_₂(t¹¹, ys⁸)
//│ 		in let h¹¹ = h¹⁰
//│ 		in (fun ys⁹ -> [LH_C h¹¹ t¹²(ys⁹)])
//│ 	| LH_N  => ys⁸}
//│ def mappend_lh_₃(xs¹, ys⁴) = xs¹(ys⁴)
//│ def max_lh_₁(_lh_max_arg1⁰, _lh_max_arg2⁰) = if (_lh_max_arg1⁰ > _lh_max_arg2⁰) then _lh_max_arg1⁰ else _lh_max_arg2⁰
//│ def mknum_lh_₁(_lh_mknum_arg1⁰) = _lh_mknum_arg1⁰((fun u⁰ -> (fun c¹ -> ((u⁰ * 10) + (int_of_char⁰(c¹) - int_of_char⁰('0'))))), 0)
//│ def mknum_lh_₂(_lh_mknum_arg1¹) = _lh_mknum_arg1¹((fun u¹ -> (fun c⁴ -> ((u¹ * 10) + (int_of_char⁰(c⁴) - int_of_char⁰('0'))))), 0)
//│ def numericRule_lh_₁(_lh_numericRule_arg1⁰) = 
//│ 	let _lh_matchIdent² = span_lh_₂((fun c² -> polyNeq⁰(c², '-')), _lh_numericRule_arg1⁰)
//│ 	in case _lh_matchIdent² of {
//│ 		LH_P2 _lh_numericRule_LH_P2_0³ _lh_numericRule_LH_P2_1¹ => _lh_numericRule_LH_P2_1¹(_lh_numericRule_LH_P2_0³)
//│ 		| _  => error⁰}
//│ def pad_lh_₁(_lh_pad_arg1⁰, _lh_pad_arg2⁰) = 
//│ 	let _lh_listcomp_fun²² = (fun _lh_listcomp_fun_para¹³ -> _lh_listcomp_fun_para¹³(_lh_listcomp_fun²²))
//│ 	in _lh_listcomp_fun²²(enumFromTo_lh_₄(1, (_lh_pad_arg2⁰ - length_lh_₃(_lh_pad_arg1⁰))))(_lh_pad_arg1⁰)
//│ def reverse_helper_lh_₁(ls¹, a⁰) = ls¹(a⁰)
//│ def reverse_lh_₁(ls⁶) = ls⁶((fun _lh_alphabeticRule_LH_C_1¹¹ -> (fun _lh_listcomp_fun²³ -> [LH_N])))
//│ def span_lh_₁(_lh_span_arg1¹, _lh_span_arg2¹) = case _lh_span_arg2¹ of {
//│ 	LH_N  => [LH_P2 (fun f⁴ -> (fun i⁴ -> i⁴)) (fun _lh_numericRule_LH_P2_0⁵ -> (fun _lh_numericRule_LH_P2_0⁶ -> error⁰))]
//│ 	| LH_C _lh_span_LH_C_0¹ _lh_span_LH_C_1¹ => if _lh_span_arg1¹(_lh_span_LH_C_0¹) then 
//│ 		let _lh_matchIdent⁴ = span_lh_₁(_lh_span_arg1¹, _lh_span_LH_C_1¹)
//│ 		in case _lh_matchIdent⁴ of {
//│ 			LH_P2 _lh_span_LH_P2_0¹ _lh_span_LH_P2_1¹ => [LH_P2 
//│ 				let t⁶ = _lh_span_LH_P2_0¹
//│ 				in let h⁶ = _lh_span_LH_C_0¹
//│ 				in (fun f⁵ -> (fun i⁵ -> t⁶(f⁵, f⁵(i⁵, h⁶)))) _lh_span_LH_P2_1¹]
//│ 			| _  => error⁰} else [LH_P2 (fun f⁶ -> (fun i⁶ -> i⁶)) 
//│ 		let _lh_numericRule_LH_C_1³ = _lh_span_LH_C_1¹
//│ 		in (fun _lh_numericRule_LH_P2_0⁷ -> (fun _lh_numericRule_LH_P2_0⁸ -> 
//│ 			let _lh_matchIdent⁵ = 	
//│ 				let _lh_numericRule_LH_P2_1³ = mknum_lh_₂(_lh_numericRule_LH_P2_0⁷)
//│ 				in let _lh_numericRule_LH_P2_0⁹ = mknum_lh_₁(_lh_numericRule_LH_P2_0⁸)
//│ 				in (fun _lh_numericRule_LH_C_1⁴ -> 
//│ 					let width² = max_lh_₁(length_lh_₁(string_of_int⁰(_lh_numericRule_LH_P2_0⁹)), length_lh_₂(string_of_int⁰(_lh_numericRule_LH_P2_1³)))
//│ 					in let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para⁶ -> _lh_listcomp_fun_para⁶(_lh_listcomp_fun¹⁰, _lh_numericRule_LH_C_1⁴, width²))
//│ 					in _lh_listcomp_fun¹⁰(if (_lh_numericRule_LH_P2_0⁹ < _lh_numericRule_LH_P2_1³) then enumFromTo_lh_₃(_lh_numericRule_LH_P2_0⁹, _lh_numericRule_LH_P2_1³) else enumFromThenTo_lh_₁(_lh_numericRule_LH_P2_0⁹, (_lh_numericRule_LH_P2_0⁹ - 1), _lh_numericRule_LH_P2_1³)))
//│ 			in _lh_matchIdent⁵(_lh_numericRule_LH_C_1³)))]
//│ 	| _  => error⁰}
//│ def span_lh_₂(_lh_span_arg1⁰, _lh_span_arg2⁰) = case _lh_span_arg2⁰ of {
//│ 	LH_N  => [LH_P2 (fun f⁰ -> (fun i⁰ -> i⁰)) (fun _lh_numericRule_LH_P2_0⁰ -> error⁰)]
//│ 	| LH_C _lh_span_LH_C_0⁰ _lh_span_LH_C_1⁰ => if _lh_span_arg1⁰(_lh_span_LH_C_0⁰) then 
//│ 		let _lh_matchIdent⁰ = span_lh_₂(_lh_span_arg1⁰, _lh_span_LH_C_1⁰)
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_P2 _lh_span_LH_P2_0⁰ _lh_span_LH_P2_1⁰ => [LH_P2 
//│ 				let t⁰ = _lh_span_LH_P2_0⁰
//│ 				in let h⁰ = _lh_span_LH_C_0⁰
//│ 				in (fun f¹ -> (fun i¹ -> t⁰(f¹, f¹(i¹, h⁰)))) _lh_span_LH_P2_1⁰]
//│ 			| _  => error⁰} else [LH_P2 (fun f² -> (fun i² -> i²)) 
//│ 		let _lh_numericRule_LH_C_1⁰ = _lh_span_LH_C_1⁰
//│ 		in (fun _lh_numericRule_LH_P2_0¹ -> 
//│ 			let _lh_matchIdent¹ = span_lh_₁((fun c⁰ -> polyNeq⁰(c⁰, '>')), _lh_numericRule_LH_C_1⁰)
//│ 			in case _lh_matchIdent¹ of {
//│ 				LH_P2 _lh_numericRule_LH_P2_0² _lh_numericRule_LH_P2_1⁰ => _lh_numericRule_LH_P2_1⁰(_lh_numericRule_LH_P2_0², _lh_numericRule_LH_P2_0¹)
//│ 				| _  => error⁰})]
//│ 	| _  => error⁰}
//│ def testGenRegexs_nofib_lh_₁(_lh_testGenRegexs_nofib_arg1⁰) = concat_lh_₁(expand_lh_₁(_lh_testGenRegexs_nofib_arg1⁰))
//│ <<<<<<< after floating out <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

