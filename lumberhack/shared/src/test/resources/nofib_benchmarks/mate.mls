

:lhInHaskell
:lhGenOCaml
drop n []      = []
drop n (h:t)   = if n <= 0 then (h:t) else (drop (n - 1) t)
splitAt n ls = (take n ls, drop n ls)
abs a = if a < 0 then (0 - a) else a
min a b = if a < b then a else b
max a b = if a < b then b else a
sort  l = qsort (\a -> \b -> case a of { (aa,_) -> case b of { (bb,_) -> (length aa) <= (length bb) } }) l []
qsort le []     r = r
qsort le [x]    r = x:r
qsort le (x:xs) r = qpart le x xs [] [] r
qpart le x [] rlt rge r =
    rqsort le rlt (x:rqsort le rge r)
qpart le x (y:ys) rlt rge r =
    if le x y then
    qpart le x ys rlt (y:rge) r
    else
    qpart le x ys (y:rlt) rge r
rqsort le []     r = r
rqsort le [x]    r = x:r
rqsort le (x:xs) r = rqpart le x xs [] [] r
rqpart le x [] rle rgt r =
    qsort le rle (x:qsort le rgt r)
rqpart le x (y:ys) rle rgt r =
    if le y x then
    rqpart le x ys (y:rle) rgt r
    else
    rqpart le x ys rle (y:rgt) r
data Kind = King | Queen | Rook | Bishop | Knight | Pawn  deriving (Eq, Ord)
data Colour = Black | White  deriving (Eq, Ord)
type Piece = (Colour,Kind)
type Square = (Int,Int)
data Board = Board [(Kind,Square)] [(Kind,Square)]
data Move = Move
    Square    -- to here
    (Maybe Piece)  -- capturing this
    (Maybe Piece)  -- gaining promotion to this
   deriving (Eq, Ord)
data MoveInFull = MoveInFull Piece Square Move deriving (Eq, Ord)
data Soln = Soln MoveInFull [([MoveInFull],Soln)]
maybe d f Nothing = d
maybe d f (Just x) = f x
null [] = True
null (h:t) = False
lines s = case break (\x -> polyEq x '|') s of (l, s') -> (l:(case s' of { [] -> []; _:s'' -> lines s'' }))
any f [] = False
any f (h:t) = if f h then True else any f t
isUpper c = case c of {
  'A' -> True;
  'B' -> True;
  'C' -> True;
  'D' -> True;
  'E' -> True;
  'F' -> True;
  'G' -> True;
  'H' -> True;
  'I' -> True;
  'J' -> True;
  'K' -> True;
  'L' -> True;
  'M' -> True;
  'N' -> True;
  'O' -> True;
  'P' -> True;
  'Q' -> True;
  'R' -> True;
  'S' -> True;
  'T' -> True;
  'U' -> True;
  'V' -> True;
  'W' -> True;
  'X' -> True;
  'Y' -> True;
  'Z' -> True;
  c -> False
}
toLower c = case c of {
  'A' -> 'a';
  'B' -> 'b';
  'C' -> 'c';
  'D' -> 'd';
  'E' -> 'e';
  'F' -> 'f';
  'G' -> 'g';
  'H' -> 'h';
  'I' -> 'i';
  'J' -> 'j';
  'K' -> 'k';
  'L' -> 'l';
  'M' -> 'm';
  'N' -> 'n';
  'O' -> 'o';
  'P' -> 'p';
  'Q' -> 'q';
  'R' -> 'r';
  'S' -> 's';
  'T' -> 't';
  'U' -> 'u';
  'V' -> 'v';
  'W' -> 'w';
  'X' -> 'x';
  'Y' -> 'y';
  'Z' -> 'z';
  c -> c
}
break p [] = ([], [])
break p (x:xs) = if p x then ([], (x:xs)) else case (break p xs) of { (ys, zs) -> ((x:ys), zs) }
words s =  case (dropWhile (\x -> polyEq x ' ') s) of
            [] -> []
            s' -> case (break (\x -> polyEq x ' ') s') of (w, s'') -> (w : (words s''))
dropWhile f [] = []
dropWhile f (h:t) = if (f h) then dropWhile f t else (h:t)
unlines ls = concat $ map (\l -> l ++ "|") ls
showColour Black = "Black"
showColour White = "White"
showBoard bd =
  let showRank = \r ->
                let consFile = \f -> \s -> case pieceAt bd (f,r) of { Nothing -> " -" ++ s; Just p  -> ' ': ((pieceToChar p) : s) } in
                foldr consFile [] [1..8]
  in
  unlines (map showRank (reverse [1..8]))
pieceToChar :: Piece -> Char
pieceToChar (Black,k) = kindToChar k
pieceToChar (White,k) = toLower (kindToChar k)
kindToChar :: Kind -> Char
kindToChar k =
  case k of
    King  -> 'K'
    Queen  -> 'Q'
    Rook  -> 'R'
    Bishop  -> 'B'
    Knight  -> 'N'
    Pawn  -> 'P'
showPiece :: Piece -> String
showPiece (c,k) = [kindToChar k]
showSquare :: Colour -> Square -> String
showSquare c (x,y) =
  (atIndex (x - 1) ["QR","QN","QB","Q","K","KB","KN","KR"]) ++ (string_of_int (case c of { Black -> 9-y; White -> y }))
pieceAt :: Board -> Square -> Maybe Piece
pieceAt (Board wkss bkss) sq =
  let pieceAtWith = \c -> \n -> \ls -> case ls of { [] -> n; ((k,s):xs) -> if polyEq s sq then Just (c,k) else pieceAtWith c n xs } in
  pieceAtWith White (pieceAtWith Black Nothing bkss) wkss
emptyAtAll :: Board -> (Square->Bool) -> Bool
emptyAtAll (Board wkss bkss) e =
  let emptyAtAllAnd = \b -> \ls -> case ls of { [] -> b; ((_,s):xs) -> (not (e s)) && (emptyAtAllAnd b xs) } in
  emptyAtAllAnd (emptyAtAllAnd True bkss) wkss
rmPieceAt White sq (Board wkss bkss) = Board (rPa sq wkss) bkss
rmPieceAt Black sq (Board wkss bkss) = Board wkss (rPa sq bkss)
rPa sq ((k,s):kss) = if polyEq s sq then kss else (k,s):(rPa sq kss)
rPa sq [] = error
putPieceAt sq (White,k) (Board wkss bkss) = Board ((k,sq):wkss) bkss
putPieceAt sq (Black,k) (Board wkss bkss) = Board wkss ((k,sq):bkss)
kingSquare :: Colour -> Board -> Square
kingSquare White (Board kss _) = kSq kss
kingSquare Black (Board _ kss) = kSq kss
kSq ((King,s):_)   = s
kSq (       _:kss) = kSq kss
kSq [] = error
opponent Black = White
opponent White = Black
colourOf :: Piece -> Colour
colourOf (c,_) = c
kindOf :: Piece -> Kind
kindOf (_,k) = k
onboard :: Square -> Bool
onboard (p,q) = (1<=p) && (p<=8) && (1<=q) && (q<=8)
forcesColoured White (Board kss _) = kss
forcesColoured Black (Board _ kss) = kss
emptyBoard = Board [] []
------------------
showMoveInFull :: MoveInFull -> String
showMoveInFull a = showMove True a
showMove withPiece (MoveInFull (c,k) sq (Move sq' mcp mpp)) =
  let capt = polyNeq mcp Nothing in
  let prom = polyNeq mpp Nothing in
  (if withPiece then
      showPiece (c,k) ++ (if (polyEq k King) || ((polyEq k Pawn) && (not (capt || prom))) then "" else "/") ++ (showSquare c sq)
   else
     ""
  ) ++ (
    maybe "-" (\cp -> "x" ++ showPiece cp ++ "/") mcp
  ) ++ (
    showSquare c sq'
  ) ++ (
    maybe "" (\pp -> "(" ++ showPiece pp ++ ")") mpp
  )
showMoves (mif:mifs) = (showMoveInFull mif) ++ (showMovesAfter mif mifs)
showMoves [] = error
showMovesAfter _ [] = ""
showMovesAfter (MoveInFull p' sq' _) ((MoveInFull p sq _d):mifs) =
  ", " ++ (showMove ((polyNeq p p') || (polyNeq sq sq')) (MoveInFull p sq _d)) ++ (showMovesAfter (MoveInFull p sq _d) mifs)
moveDetailsFor :: Colour -> Board -> [(MoveInFull,Board)]
moveDetailsFor c bd =
  foldr (\ksq -> \ms ->
    foldr (\rm -> \ms' -> maybe (\x -> x) (\h -> \t -> h:t) (tryMove c ksq rm bd) ms') ms (rawmoves c ksq bd)
  ) [] (forcesColoured c bd)
tryMove :: Colour -> (Kind,Square) -> Move -> Board -> Maybe (MoveInFull,Board)
tryMove c (k,sq) (Move sq' mcp mpp) bd =
  let p   =   (c,k) in
  let bd1 =  rmPieceAt c sq bd in
  let p'  =  maybe p (\x -> x) mpp in
  let bd2 =  maybe (putPieceAt sq' p' bd1) (\_dummy -> (putPieceAt sq' p' (rmPieceAt (opponent c) sq' bd1))) mcp in
  if not (kingincheck c bd2) then Just (MoveInFull p sq (Move sq' mcp mpp), bd2)
  else Nothing
-- NB raw move = might illegally leave the king in check.
rawmoves :: Colour -> (Kind,Square) -> Board -> [Move]
rawmoves c (k,sq) bd =
  let m = case k of { King -> kingmoves; Queen -> queenmoves; Rook -> rookmoves; Bishop -> bishopmoves; Knight -> knightmoves; Pawn -> pawnmoves } in
  m c sq bd
bishopmoves :: Colour -> Square -> Board -> [Move]
bishopmoves c sq bd =
  ( moveLine bd c sq (\xy -> case xy of {(x,y) -> (x-1,y+1)}) $ (moveLine bd c sq (\xy -> case xy of {(x,y) -> (x+1,y+1)}) $ (moveLine bd c sq (\xy -> case xy of {(x,y) -> (x-1,y-1)}) $ (moveLine bd c sq (\xy -> case xy of {(x,y) -> (x+1,y-1)}) (\x -> x))))) []
rookmoves :: Colour -> Square -> Board -> [Move]
rookmoves c sq bd =
  ( moveLine bd c sq (\xy -> case xy of {(x,y) -> (x-1,y)}) $ (moveLine bd c sq (\xy -> case xy of {(x,y) -> (x+1,y)}) $ (moveLine bd c sq (\xy -> case xy of {(x,y) -> (x,y-1)}) $ (moveLine bd c sq (\xy -> case xy of {(x,y) -> (x,y+1)}) (\x -> x))))) []
moveLine :: Board -> Colour -> Square -> (Square->Square) -> ([Move]->a) -> [Move] -> a
moveLine bd c sq inc cont =
  let ml = \sq -> \ms ->
            let sq' = inc sq in
            if onboard sq' then
              case pieceAt bd sq' of
              Nothing -> ml sq' ((Move sq' Nothing Nothing) : ms)
              Just p' -> if polyNeq (colourOf p') c then cont ((Move sq' (Just p') Nothing) : ms) else cont ms
            else cont ms
  in
  ml sq
kingmoves :: Colour -> Square -> Board -> [Move]
kingmoves c (p,q) bd =
  sift c bd [] [(p-1,q+1), (p,q+1), (p+1,q+1), (p-1,q), (p+1,q), (p-1,q-1), (p,q-1), (p+1,q-1)]
knightmoves :: Colour -> Square -> Board -> [Move]
knightmoves c (p,q) bd =
  sift c bd [] [(p-1,q+2),(p+1,q+2), (p-2,q+1), (p+2,q+1), (p-2,q-1), (p+2,q-1), (p-1,q-2), (p+1,q-2)]
sift :: Colour -> Board -> [Move] -> [Square] -> [Move]
sift _ _  ms [] = ms
sift c bd ms (sq:sqs) =
  if onboard sq then
    case pieceAt bd sq of
                Nothing -> sift c bd ((Move sq Nothing Nothing) : ms) sqs
                Just p' -> if polyEq (colourOf p') c then sift c bd ms sqs
                           else sift c bd ((Move sq (Just p') Nothing) : ms) sqs
  else sift c bd ms sqs
pawnmoves :: Colour -> Square -> Board -> [Move]
pawnmoves c (p,q) bd =
  let fwd = case c of { White -> 1; Black -> 0-1 } in
  let promote = \xy -> \mcp -> case xy of { (x,y) ->
    if (((polyEq c Black) && (y==1)) || ((polyEq c White) && (y==8))) then
      map (\param -> Move (x,y) mcp (Just param)) [(c,Queen), (c,Rook), (c,Bishop), (c,Knight)]
    else [Move (x,y) mcp Nothing]
  } in
  let movs =
             let on1 = (p,q+fwd) in
             let on2 = (p,q+2*fwd) in
             if polyEq (pieceAt bd on1) Nothing then
               promote on1 Nothing ++ (
                 if (((q==2) && (polyEq c White)) || ((q==7) && (polyEq c Black))) && (polyEq (pieceAt bd on2) Nothing) then
                   [Move on2 Nothing Nothing]
                 else
                   []
               )
             else
               []
  in
  let caps = concat [ promote sq (Just p') | sq <- [(p+1,q+fwd), (p-1,q+fwd)], (Just p') <- [pieceAt bd sq], not (polyEq (colourOf p') c) ] in
  movs ++ caps
queenmoves :: Colour -> Square -> Board -> [Move]
queenmoves c sq bd = (bishopmoves c sq bd) ++ (rookmoves c sq bd)
kingincheck :: Colour -> Board -> Bool
kingincheck c bd =
  let givesCheck = \kxy -> case kxy of
                          (k,(x,y)) ->
                            let kthreat = \param ->
                                            let xkyk = kingSquare c bd in
                                            case xkyk of {(xk,yk) ->
                                            case param of
                                                      King -> ((abs (x-xk)) <= 1) && ((abs (y-yk)) <= 1)
                                                      Queen -> (kthreat Rook) || (kthreat Bishop)
                                                      Rook ->
                                                        ((x==xk) && (emptyAtAll bd (\xeye -> case xeye of { (xe,ye) -> (xe==xk) && ((min y yk) < ye) && (ye < (max y yk))}))) ||
                                                        ((y==yk) && (emptyAtAll bd (\xeye -> case xeye of { (xe,ye) -> (ye==yk) && ((min x xk) < xe) && (xe < (max x xk))})))
                                                      Bishop ->
                                                        (((x+y)==(xk+yk)) && (emptyAtAll bd (\xeye -> case xeye of { (xe,ye) -> ((xe+ye)==(xk+yk)) && ((min x xk) < xe) && (xe < (max x xk)) }))) ||
                                                        (((x-y)==(xk-yk)) && (emptyAtAll bd (\xeye -> case xeye of { (xe,ye) -> ((xe-ye)==(xk-yk)) && ((min x xk) < xe) && (xe < (max x xk)) })))
                                                      Knight ->
                                                        (((abs (x-xk)) == 2) && ((abs (y-yk)) == 1)) || (((abs (x-xk)) == 1) && ((abs (y-yk)) == 2))
                                                      Pawn ->
                                                        ((abs (x-xk)) == 1) && (case c of { Black -> yk == (y+1); White -> yk == (y-1) })
                                            }
                            in
                            kthreat k
  in
  any givesCheck (forcesColoured (opponent c) bd)
---------------
readProblem :: String -> (Board, (Colour, Int))
readProblem s = (parseProblem . lines) s
comment s = ( (polyEq s []) || (polyEq (take 2 s) ("--")))
parseProblem :: [String] -> (Board, (Colour, Int))
parseProblem s =
  let bdtxt_gltxt = splitAt 8 (filter (not . comment) s) in
  case bdtxt_gltxt of { (bdtxt, gltxt) ->
    let bd = parseBoard bdtxt in
    let gl = parseGoal gltxt in
    (bd, gl)
  }
parseBoard :: [String] -> Board
parseBoard ls =
  let addPiece = \p_sq -> case p_sq of { (p,sq) -> putPieceAt sq p } in
  ((foldr addPiece emptyBoard) . concat . zipWith parseRank (reverse [1..8])) ls
parseRank r x = (concat . (zipWith (parseSquare r) [1..8]) . (filter (\x -> not (polyEq x ' ')))) x
parseSquare r f '-' = []
parseSquare r f  c  =
  let clr = if isUpper c then Black else White in
  let kin = case toLower c of
              'k' -> King
              'q' -> Queen
              'r' -> Rook
              'b' -> Bishop
              'n' -> Knight
              'p' -> Pawn
  in
  [((clr,kin), (f,r))]
parseGoal :: [String] -> (Colour, Int)
parseGoal [gltxt] =
  let ws = words gltxt in
  let c  = if polyEq (head ws) "Black" then Black else White in
  let n = 2 in
  (c, n)
parseGoal _ = error
-----------------
solve :: Board -> Colour -> Int -> String
solve bd c n = showResult (solution bd c ((2*n)-1))
data Solution = Solution MoveInFull [(MoveInFull,Solution)]
solution :: Board -> Colour -> Int -> Maybe Solution
solution bd c n =
  let solnOr = \mifb -> \other -> case mifb of { (mif,b) ->
                  let rsm = replies b (opponent c) (n-1) in
                  case rsm of
                    Nothing -> other
                    Just [] ->
                      if kingincheck (opponent c) b then
                        Just (Solution mif [])
                      else
                        other
                    Just rs -> Just (Solution mif rs)
                }
  in
  if n > 0 then
    let mds = moveDetailsFor c bd in foldr solnOr Nothing mds
  else
    error "n <= 0"
replies :: Board -> Colour -> Int -> Maybe [(MoveInFull, Solution)]
replies bd c n =
  let mds = moveDetailsFor c bd in
  let solnAnd = \mifb -> \rest -> case mifb of { (mif,b) ->
                let sm = solution b (opponent c) (n-1) in
                case sm of
                  Nothing -> Nothing
                  Just s ->  case rest of
                      Nothing -> Nothing
                      Just ms -> Just ((mif,s):ms)
              }
  in
  if n==0 then
    if null mds then Just [] else Nothing
  else if n>0 then
    foldr solnAnd (Just []) mds
  else
    error "n < 0"
showResult Nothing = "No solution!"
showResult (Just s) = showSoln (compact s) 1
compact :: Solution -> Soln
compact (Solution mif rs) = Soln mif (foldr insertCompact [] rs)
insertCompact (mif,s) ls =
  let cs = compact s in
  let ic = \ls -> case ls of
            [] -> [([mif],cs)]
            ((mifs,cs'):etc) -> let a = (showSoln cs 1) in
                                let b = (showSoln cs' 1) in
                                if polyLt a b then
                                  ([mif], cs):((mifs,cs'):etc)
                                else if polyEq a b then
                                  (insert mif mifs, cs):etc
                                else if polyGt a b then
                                  (mifs,cs'):(ic etc)
                                else
                                  error "compare error"
              -- case compare (showSoln cs 1) (showSoln cs' 1) of
              --                     LT -> ([mif], cs):((mifs,cs'):etc)
              --                     EQ -> (insert mif mifs, cs):etc
              --                     GT -> (mifs,cs'):(ic etc)
  in
  ic ls
  where
  insert x [] = [x]
  insert x (y:ys) = if polyGt x y then y : (insert x ys) else x : (y : ys)
showSoln (Soln mif rs) n =
  (string_of_int n) ++ ". " ++ (showMoveInFull mif) ++
  ( case rs of
    []       -> "++|"
    [(mifs,s)] -> ", " ++
      ( if (length mifs) > 1 then "..." else showMoves mifs) ++
      "; " ++ showSoln s (n+1)
    _       -> ",|" ++ showReplies (sort rs) n )
showReplies [] n = ""
showReplies ((mifs,s):rs) n =
  (tab n) ++ "if " ++
  (
    if (null rs) && ((length mifs) > 1) then
      "others"
    else
      showMoves mifs
  ) ++
  "; " ++ (showSoln s (n+1)) ++ (showReplies rs n)
tab :: Int -> String
tab n = if n <= 0 then [] else ' ':(tab (n - 1))
------------
testMate_nofib dummy = 
  let input = primId "-- A. Ellerman|-- 1st prize, Luigi Centurini, Genoa, 1925|-- `One of the very best modern two-movers,|-- unsurpassed for beauty of idea and|-- execution. (Phillips)||b k - - - - - - |- n p - - - - - |- - - - - - - - |r - - - - p - - |R - - - K - - - |- - - r P - p - |- Q - - - - - - |- - - - - q B B ||White to play and mate in 2|" in
  let bdcn = readProblem input in
  case bdcn of {(bd,(c,n)) ->
    (showBoard bd) ++ "|" ++ (showColour c) ++ " to move and mate in " ++ (string_of_int n) ++ "|" ++ "|" ++ (solve bd c n)
  }
testMate_nofib $ primId 0
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> after expansion >>>>>>>>>>
//│ testMate_nofib_lh_₁(primId⁰(0))
//│ def abs_lh_₁(_lh_abs_arg1⁶) = if (_lh_abs_arg1⁶ < 0) then (0 - _lh_abs_arg1⁶) else _lh_abs_arg1⁶
//│ def abs_lh_₂(_lh_abs_arg1⁵) = if (_lh_abs_arg1⁵ < 0) then (0 - _lh_abs_arg1⁵) else _lh_abs_arg1⁵
//│ def abs_lh_₃(_lh_abs_arg1⁴) = if (_lh_abs_arg1⁴ < 0) then (0 - _lh_abs_arg1⁴) else _lh_abs_arg1⁴
//│ def abs_lh_₄(_lh_abs_arg1³) = if (_lh_abs_arg1³ < 0) then (0 - _lh_abs_arg1³) else _lh_abs_arg1³
//│ def abs_lh_₅(_lh_abs_arg1²) = if (_lh_abs_arg1² < 0) then (0 - _lh_abs_arg1²) else _lh_abs_arg1²
//│ def abs_lh_₆(_lh_abs_arg1¹) = if (_lh_abs_arg1¹ < 0) then (0 - _lh_abs_arg1¹) else _lh_abs_arg1¹
//│ def abs_lh_₇(_lh_abs_arg1⁰) = if (_lh_abs_arg1⁰ < 0) then (0 - _lh_abs_arg1⁰) else _lh_abs_arg1⁰
//│ def any_lh_₁(_lh_any_arg1⁰, _lh_any_arg2⁰) = case _lh_any_arg2⁰ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0⁰ _lh_any_LH_C_1⁰ => if _lh_any_arg1⁰(_lh_any_LH_C_0⁰) then [True] else any_lh_₁(_lh_any_arg1⁰, _lh_any_LH_C_1⁰)}
//│ def atIndex_lh_₁(n⁰, ls⁰) = if (n⁰ < 0) then error⁰ else case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => if (n⁰ == 0) then h⁰ else atIndex_lh_₁((n⁰ - 1), t⁰)
//│ 	| LH_N  => error⁰}
//│ def bishopmoves_lh_₁(_lh_bishopmoves_arg1⁰, _lh_bishopmoves_arg2⁰, _lh_bishopmoves_arg3⁰) = moveLine_lh_₁(_lh_bishopmoves_arg3⁰, _lh_bishopmoves_arg1⁰, _lh_bishopmoves_arg2⁰, (fun xy¹ -> 
//│ 	let _lh_matchIdent¹⁵ = xy¹
//│ 	in case _lh_matchIdent¹⁵ of {
//│ 		LH_P2 _lh_bishopmoves_LH_P2_0⁰ _lh_bishopmoves_LH_P2_1⁰ => [LH_P2 (_lh_bishopmoves_LH_P2_0⁰ - 1) (_lh_bishopmoves_LH_P2_1⁰ + 1)]}), moveLine_lh_₁(_lh_bishopmoves_arg3⁰, _lh_bishopmoves_arg1⁰, _lh_bishopmoves_arg2⁰, (fun xy² -> 
//│ 	let _lh_matchIdent¹⁶ = xy²
//│ 	in case _lh_matchIdent¹⁶ of {
//│ 		LH_P2 _lh_bishopmoves_LH_P2_0¹ _lh_bishopmoves_LH_P2_1¹ => [LH_P2 (_lh_bishopmoves_LH_P2_0¹ + 1) (_lh_bishopmoves_LH_P2_1¹ + 1)]}), moveLine_lh_₁(_lh_bishopmoves_arg3⁰, _lh_bishopmoves_arg1⁰, _lh_bishopmoves_arg2⁰, (fun xy³ -> 
//│ 	let _lh_matchIdent¹⁷ = xy³
//│ 	in case _lh_matchIdent¹⁷ of {
//│ 		LH_P2 _lh_bishopmoves_LH_P2_0² _lh_bishopmoves_LH_P2_1² => [LH_P2 (_lh_bishopmoves_LH_P2_0² - 1) (_lh_bishopmoves_LH_P2_1² - 1)]}), moveLine_lh_₁(_lh_bishopmoves_arg3⁰, _lh_bishopmoves_arg1⁰, _lh_bishopmoves_arg2⁰, (fun xy⁴ -> 
//│ 	let _lh_matchIdent¹⁸ = xy⁴
//│ 	in case _lh_matchIdent¹⁸ of {
//│ 		LH_P2 _lh_bishopmoves_LH_P2_0³ _lh_bishopmoves_LH_P2_1³ => [LH_P2 (_lh_bishopmoves_LH_P2_0³ + 1) (_lh_bishopmoves_LH_P2_1³ - 1)]}), (fun x¹ -> x¹)))), [LH_N])
//│ def break_lh_₁(_lh_break_arg1⁰, _lh_break_arg2⁰) = case _lh_break_arg2⁰ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1⁰(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else 
//│ 		let _lh_matchIdent³⁹ = break_lh_₁(_lh_break_arg1⁰, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent³⁹ of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]}}
//│ def colourOf_lh_₁(_lh_colourOf_arg1⁰) = case _lh_colourOf_arg1⁰ of {
//│ 	LH_P2 _lh_colourOf_LH_P2_0⁰ _lh_colourOf_LH_P2_1⁰ => _lh_colourOf_LH_P2_0⁰}
//│ def comment_lh_₁(_lh_comment_arg1⁰) = (polyEq⁰(_lh_comment_arg1⁰, [LH_N]) || polyEq⁰(take_lh_₁(2, _lh_comment_arg1⁰), [LH_C '-' [LH_C '-' [LH_N]]]))
//│ def compact_lh_₁(_lh_compact_arg1⁰) = case _lh_compact_arg1⁰ of {
//│ 	Solution _lh_compact_Solution_0⁰ _lh_compact_Solution_1⁰ => [Soln _lh_compact_Solution_0⁰ foldr_lh_₃(insertCompact_lh_₁, [LH_N], _lh_compact_Solution_1⁰)]}
//│ def concat_lh_₁(lss¹) = case lss¹ of {
//│ 	LH_C h⁴⁹ t⁴⁹ => mappend_lh_₁₉(h⁴⁹, concat_lh_₁(t⁴⁹))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₂(lss⁰) = case lss⁰ of {
//│ 	LH_C h²⁹ t²⁹ => mappend_lh_₃₅(h²⁹, concat_lh_₂(t²⁹))
//│ 	| LH_N  => [LH_N]}
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]}
//│ def drop_lh_₁(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰)}
//│ def emptyAtAll_lh_₁(_lh_emptyAtAll_arg1³, _lh_emptyAtAll_arg2³) = case _lh_emptyAtAll_arg1³ of {
//│ 	Board _lh_emptyAtAll_Board_0³ _lh_emptyAtAll_Board_1³ => 
//│ 		let emptyAtAllAnd³ = (fun b⁴ -> (fun ls¹⁸ -> 
//│ 			let _lh_matchIdent³⁰ = ls¹⁸
//│ 			in case _lh_matchIdent³⁰ of {
//│ 				LH_N  => b⁴
//│ 				| LH_C _lh_emptyAtAll_LH_C_0³ _lh_emptyAtAll_LH_C_1³ => case _lh_emptyAtAll_LH_C_0³ of {
//│ 					LH_P2 _lh_emptyAtAll_LH_P2_0³ _lh_emptyAtAll_LH_P2_1³ => (not⁰(_lh_emptyAtAll_arg2³(_lh_emptyAtAll_LH_P2_1³)) && emptyAtAllAnd³(b⁴, _lh_emptyAtAll_LH_C_1³))}}))
//│ 		in emptyAtAllAnd³(emptyAtAllAnd³([True], _lh_emptyAtAll_Board_1³), _lh_emptyAtAll_Board_0³)}
//│ def emptyAtAll_lh_₂(_lh_emptyAtAll_arg1², _lh_emptyAtAll_arg2²) = case _lh_emptyAtAll_arg1² of {
//│ 	Board _lh_emptyAtAll_Board_0² _lh_emptyAtAll_Board_1² => 
//│ 		let emptyAtAllAnd² = (fun b³ -> (fun ls¹⁷ -> 
//│ 			let _lh_matchIdent²⁹ = ls¹⁷
//│ 			in case _lh_matchIdent²⁹ of {
//│ 				LH_N  => b³
//│ 				| LH_C _lh_emptyAtAll_LH_C_0² _lh_emptyAtAll_LH_C_1² => case _lh_emptyAtAll_LH_C_0² of {
//│ 					LH_P2 _lh_emptyAtAll_LH_P2_0² _lh_emptyAtAll_LH_P2_1² => (not⁰(_lh_emptyAtAll_arg2²(_lh_emptyAtAll_LH_P2_1²)) && emptyAtAllAnd²(b³, _lh_emptyAtAll_LH_C_1²))}}))
//│ 		in emptyAtAllAnd²(emptyAtAllAnd²([True], _lh_emptyAtAll_Board_1²), _lh_emptyAtAll_Board_0²)}
//│ def emptyAtAll_lh_₃(_lh_emptyAtAll_arg1¹, _lh_emptyAtAll_arg2¹) = case _lh_emptyAtAll_arg1¹ of {
//│ 	Board _lh_emptyAtAll_Board_0¹ _lh_emptyAtAll_Board_1¹ => 
//│ 		let emptyAtAllAnd¹ = (fun b² -> (fun ls¹⁶ -> 
//│ 			let _lh_matchIdent²⁸ = ls¹⁶
//│ 			in case _lh_matchIdent²⁸ of {
//│ 				LH_N  => b²
//│ 				| LH_C _lh_emptyAtAll_LH_C_0¹ _lh_emptyAtAll_LH_C_1¹ => case _lh_emptyAtAll_LH_C_0¹ of {
//│ 					LH_P2 _lh_emptyAtAll_LH_P2_0¹ _lh_emptyAtAll_LH_P2_1¹ => (not⁰(_lh_emptyAtAll_arg2¹(_lh_emptyAtAll_LH_P2_1¹)) && emptyAtAllAnd¹(b², _lh_emptyAtAll_LH_C_1¹))}}))
//│ 		in emptyAtAllAnd¹(emptyAtAllAnd¹([True], _lh_emptyAtAll_Board_1¹), _lh_emptyAtAll_Board_0¹)}
//│ def emptyAtAll_lh_₄(_lh_emptyAtAll_arg1⁰, _lh_emptyAtAll_arg2⁰) = case _lh_emptyAtAll_arg1⁰ of {
//│ 	Board _lh_emptyAtAll_Board_0⁰ _lh_emptyAtAll_Board_1⁰ => 
//│ 		let emptyAtAllAnd⁰ = (fun b¹ -> (fun ls¹⁵ -> 
//│ 			let _lh_matchIdent²⁷ = ls¹⁵
//│ 			in case _lh_matchIdent²⁷ of {
//│ 				LH_N  => b¹
//│ 				| LH_C _lh_emptyAtAll_LH_C_0⁰ _lh_emptyAtAll_LH_C_1⁰ => case _lh_emptyAtAll_LH_C_0⁰ of {
//│ 					LH_P2 _lh_emptyAtAll_LH_P2_0⁰ _lh_emptyAtAll_LH_P2_1⁰ => (not⁰(_lh_emptyAtAll_arg2⁰(_lh_emptyAtAll_LH_P2_1⁰)) && emptyAtAllAnd⁰(b¹, _lh_emptyAtAll_LH_C_1⁰))}}))
//│ 		in emptyAtAllAnd⁰(emptyAtAllAnd⁰([True], _lh_emptyAtAll_Board_1⁰), _lh_emptyAtAll_Board_0⁰)}
//│ def emptyBoard_lh_₁ = [Board [LH_N] [LH_N]]
//│ def enumFromTo_lh_₁(a⁷, b¹⁰) = if (a⁷ <= b¹⁰) then [LH_C a⁷ enumFromTo_lh_₁((a⁷ + 1), b¹⁰)] else [LH_N]
//│ def enumFromTo_lh_₂(a⁶, b⁹) = if (a⁶ <= b⁹) then [LH_C a⁶ enumFromTo_lh_₂((a⁶ + 1), b⁹)] else [LH_N]
//│ def enumFromTo_lh_₃(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh_₃((a⁰ + 1), b⁰)] else [LH_N]
//│ def filter_lh_₁(f⁶, ls²⁵) = case ls²⁵ of {
//│ 	LH_C h⁴⁷ t⁴⁷ => if f⁶(h⁴⁷) then [LH_C h⁴⁷ filter_lh_₁(f⁶, t⁴⁷)] else filter_lh_₁(f⁶, t⁴⁷)
//│ 	| LH_N  => [LH_N]}
//│ def foldr_lh_₁(f¹⁰, i⁶, ls³⁰) = case ls³⁰ of {
//│ 	LH_C h⁵⁵ t⁵⁵ => f¹⁰(h⁵⁵, foldr_lh_₁(f¹⁰, i⁶, t⁵⁵))
//│ 	| LH_N  => i⁶}
//│ def foldr_lh_₂(f⁸, i⁵, ls²⁸) = case ls²⁸ of {
//│ 	LH_C h⁵² t⁵² => f⁸(h⁵², foldr_lh_₂(f⁸, i⁵, t⁵²))
//│ 	| LH_N  => i⁵}
//│ def foldr_lh_₃(f⁵, i⁴, ls²⁴) = case ls²⁴ of {
//│ 	LH_C h⁴⁶ t⁴⁶ => f⁵(h⁴⁶, foldr_lh_₃(f⁵, i⁴, t⁴⁶))
//│ 	| LH_N  => i⁴}
//│ def foldr_lh_₄(f⁴, i³, ls²¹) = case ls²¹ of {
//│ 	LH_C h³⁵ t³⁵ => f⁴(h³⁵, foldr_lh_₄(f⁴, i³, t³⁵))
//│ 	| LH_N  => i³}
//│ def foldr_lh_₅(f³, i², ls²⁰) = case ls²⁰ of {
//│ 	LH_C h³⁴ t³⁴ => f³(h³⁴, foldr_lh_₅(f³, i², t³⁴))
//│ 	| LH_N  => i²}
//│ def foldr_lh_₆(f², i¹, ls¹⁹) = case ls¹⁹ of {
//│ 	LH_C h³² t³² => f²(h³², foldr_lh_₆(f², i¹, t³²))
//│ 	| LH_N  => i¹}
//│ def foldr_lh_₇(f⁰, i⁰, ls¹²) = case ls¹² of {
//│ 	LH_C h²⁸ t²⁸ => f⁰(h²⁸, foldr_lh_₇(f⁰, i⁰, t²⁸))
//│ 	| LH_N  => i⁰}
//│ def forcesColoured_lh_₁(_lh_forcesColoured_arg1¹, _lh_forcesColoured_arg2¹) = case _lh_forcesColoured_arg1¹ of {
//│ 	White  => case _lh_forcesColoured_arg2¹ of {
//│ 		Board _lh_forcesColoured_Board_0² _lh_forcesColoured_Board_1² => _lh_forcesColoured_Board_0²}
//│ 	| Black  => case _lh_forcesColoured_arg2¹ of {
//│ 		Board _lh_forcesColoured_Board_0³ _lh_forcesColoured_Board_1³ => _lh_forcesColoured_Board_1³}}
//│ def forcesColoured_lh_₂(_lh_forcesColoured_arg1⁰, _lh_forcesColoured_arg2⁰) = case _lh_forcesColoured_arg1⁰ of {
//│ 	White  => case _lh_forcesColoured_arg2⁰ of {
//│ 		Board _lh_forcesColoured_Board_0⁰ _lh_forcesColoured_Board_1⁰ => _lh_forcesColoured_Board_0⁰}
//│ 	| Black  => case _lh_forcesColoured_arg2⁰ of {
//│ 		Board _lh_forcesColoured_Board_0¹ _lh_forcesColoured_Board_1¹ => _lh_forcesColoured_Board_1¹}}
//│ def head_lh_₁(ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h³⁰ t³⁰ => h³⁰
//│ 	| LH_N  => error⁰}
//│ def insertCompact_lh_₁(_lh_insertCompact_arg1⁰, _lh_insertCompact_arg2⁰) = case _lh_insertCompact_arg1⁰ of {
//│ 	LH_P2 _lh_insertCompact_LH_P2_0⁰ _lh_insertCompact_LH_P2_1⁰ => 
//│ 		let insert⁰ = (fun _lh_insert_arg1⁰ -> (fun _lh_insert_arg2⁰ -> case _lh_insert_arg2⁰ of {
//│ 			LH_N  => [LH_C _lh_insert_arg1⁰ [LH_N]]
//│ 			| LH_C _lh_insert_LH_C_0⁰ _lh_insert_LH_C_1⁰ => if polyGt⁰(_lh_insert_arg1⁰, _lh_insert_LH_C_0⁰) then [LH_C _lh_insert_LH_C_0⁰ insert⁰(_lh_insert_arg1⁰, _lh_insert_LH_C_1⁰)] else [LH_C _lh_insert_arg1⁰ [LH_C _lh_insert_LH_C_0⁰ _lh_insert_LH_C_1⁰]]}))
//│ 		in let cs⁰ = compact_lh_₁(_lh_insertCompact_LH_P2_1⁰)
//│ 		in let ic⁰ = (fun ls²³ -> 
//│ 			let _lh_matchIdent³⁸ = ls²³
//│ 			in case _lh_matchIdent³⁸ of {
//│ 				LH_N  => [LH_C [LH_P2 [LH_C _lh_insertCompact_LH_P2_0⁰ [LH_N]] cs⁰] [LH_N]]
//│ 				| LH_C _lh_insertCompact_LH_C_0⁰ _lh_insertCompact_LH_C_1⁰ => case _lh_insertCompact_LH_C_0⁰ of {
//│ 					LH_P2 _lh_insertCompact_LH_P2_0¹ _lh_insertCompact_LH_P2_1¹ => 
//│ 						let a⁴ = showSoln_lh_₂(cs⁰, 1)
//│ 						in let b⁸ = showSoln_lh_₃(_lh_insertCompact_LH_P2_1¹, 1)
//│ 						in if polyLt⁰(a⁴, b⁸) then [LH_C [LH_P2 [LH_C _lh_insertCompact_LH_P2_0⁰ [LH_N]] cs⁰] [LH_C [LH_P2 _lh_insertCompact_LH_P2_0¹ _lh_insertCompact_LH_P2_1¹] _lh_insertCompact_LH_C_1⁰]] else if polyEq⁰(a⁴, b⁸) then [LH_C [LH_P2 insert⁰(_lh_insertCompact_LH_P2_0⁰, _lh_insertCompact_LH_P2_0¹) cs⁰] _lh_insertCompact_LH_C_1⁰] else if polyGt⁰(a⁴, b⁸) then [LH_C [LH_P2 _lh_insertCompact_LH_P2_0¹ _lh_insertCompact_LH_P2_1¹] ic⁰(_lh_insertCompact_LH_C_1⁰)] else error⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'a' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]])}})
//│ 		in ic⁰(_lh_insertCompact_arg2⁰)}
//│ def isUpper_lh_₁(_lh_isUpper_arg1⁰) = 
//│ 	let _lh_matchIdent⁰ = _lh_isUpper_arg1⁰
//│ 	in case _lh_matchIdent⁰ of {
//│ 		'A'  => [True]
//│ 		| 'B'  => [True]
//│ 		| 'C'  => [True]
//│ 		| 'D'  => [True]
//│ 		| 'E'  => [True]
//│ 		| 'F'  => [True]
//│ 		| 'G'  => [True]
//│ 		| 'H'  => [True]
//│ 		| 'I'  => [True]
//│ 		| 'J'  => [True]
//│ 		| 'K'  => [True]
//│ 		| 'L'  => [True]
//│ 		| 'M'  => [True]
//│ 		| 'N'  => [True]
//│ 		| 'O'  => [True]
//│ 		| 'P'  => [True]
//│ 		| 'Q'  => [True]
//│ 		| 'R'  => [True]
//│ 		| 'S'  => [True]
//│ 		| 'T'  => [True]
//│ 		| 'U'  => [True]
//│ 		| 'V'  => [True]
//│ 		| 'W'  => [True]
//│ 		| 'X'  => [True]
//│ 		| 'Y'  => [True]
//│ 		| 'Z'  => [True]
//│ 		| _  => [False]}
//│ def kSq_lh_₁(_lh_kSq_arg1⁰) = case _lh_kSq_arg1⁰ of {
//│ 	LH_C _lh_kSq_LH_C_0⁰ _lh_kSq_LH_C_1⁰ => case _lh_kSq_LH_C_0⁰ of {
//│ 		LH_P2 _lh_kSq_LH_P2_0⁰ _lh_kSq_LH_P2_1⁰ => case _lh_kSq_LH_P2_0⁰ of {
//│ 			King  => _lh_kSq_LH_P2_1⁰
//│ 			| _  => kSq_lh_₁(_lh_kSq_LH_C_1⁰)}
//│ 		| _  => kSq_lh_₁(_lh_kSq_LH_C_1⁰)}
//│ 	| LH_N  => error⁰}
//│ def kindToChar_lh_₁(_lh_kindToChar_arg1¹) = 
//│ 	let _lh_matchIdent⁴² = _lh_kindToChar_arg1¹
//│ 	in case _lh_matchIdent⁴² of {
//│ 		King  => 'K'
//│ 		| Queen  => 'Q'
//│ 		| Rook  => 'R'
//│ 		| Bishop  => 'B'
//│ 		| Knight  => 'N'
//│ 		| Pawn  => 'P'}
//│ def kindToChar_lh_₂(_lh_kindToChar_arg1⁰) = 
//│ 	let _lh_matchIdent⁴¹ = _lh_kindToChar_arg1⁰
//│ 	in case _lh_matchIdent⁴¹ of {
//│ 		King  => 'K'
//│ 		| Queen  => 'Q'
//│ 		| Rook  => 'R'
//│ 		| Bishop  => 'B'
//│ 		| Knight  => 'N'
//│ 		| Pawn  => 'P'}
//│ def kingSquare_lh_₁(_lh_kingSquare_arg1⁰, _lh_kingSquare_arg2⁰) = case _lh_kingSquare_arg1⁰ of {
//│ 	White  => case _lh_kingSquare_arg2⁰ of {
//│ 		Board _lh_kingSquare_Board_0⁰ _lh_kingSquare_Board_1⁰ => kSq_lh_₁(_lh_kingSquare_Board_0⁰)}
//│ 	| Black  => case _lh_kingSquare_arg2⁰ of {
//│ 		Board _lh_kingSquare_Board_0¹ _lh_kingSquare_Board_1¹ => kSq_lh_₁(_lh_kingSquare_Board_1¹)}}
//│ def kingincheck_lh_₁(_lh_kingincheck_arg1¹, _lh_kingincheck_arg2¹) = 
//│ 	let givesCheck¹ = (fun kxy¹ -> 
//│ 		let _lh_matchIdent⁴⁴ = kxy¹
//│ 		in case _lh_matchIdent⁴⁴ of {
//│ 			LH_P2 _lh_kingincheck_LH_P2_0⁷ _lh_kingincheck_LH_P2_1⁷ => case _lh_kingincheck_LH_P2_1⁷ of {
//│ 				LH_P2 _lh_kingincheck_LH_P2_0⁸ _lh_kingincheck_LH_P2_1⁸ => 
//│ 					let kthreat¹ = (fun param² -> 
//│ 						let xkyk¹ = kingSquare_lh_₁(_lh_kingincheck_arg1¹, _lh_kingincheck_arg2¹)
//│ 						in let _lh_matchIdent⁴⁵ = xkyk¹
//│ 						in case _lh_matchIdent⁴⁵ of {
//│ 							LH_P2 _lh_kingincheck_LH_P2_0⁹ _lh_kingincheck_LH_P2_1⁹ => 
//│ 								let _lh_matchIdent⁴⁶ = param²
//│ 								in case _lh_matchIdent⁴⁶ of {
//│ 									King  => ((abs_lh_₂((_lh_kingincheck_LH_P2_0⁸ - _lh_kingincheck_LH_P2_0⁹)) <= 1) && (abs_lh_₁((_lh_kingincheck_LH_P2_1⁸ - _lh_kingincheck_LH_P2_1⁹)) <= 1))
//│ 									| Queen  => (kthreat¹([Rook]) || kthreat¹([Bishop]))
//│ 									| Rook  => (((_lh_kingincheck_LH_P2_0⁸ == _lh_kingincheck_LH_P2_0⁹) && emptyAtAll_lh_₄(_lh_kingincheck_arg2¹, (fun xeye⁴ -> 
//│ 										let _lh_matchIdent⁴⁷ = xeye⁴
//│ 										in case _lh_matchIdent⁴⁷ of {
//│ 											LH_P2 _lh_kingincheck_LH_P2_0¹⁰ _lh_kingincheck_LH_P2_1¹⁰ => (((_lh_kingincheck_LH_P2_0¹⁰ == _lh_kingincheck_LH_P2_0⁹) && (min_lh_₄(_lh_kingincheck_LH_P2_1⁸, _lh_kingincheck_LH_P2_1⁹) < _lh_kingincheck_LH_P2_1¹⁰)) && (_lh_kingincheck_LH_P2_1¹⁰ < max_lh_₁(_lh_kingincheck_LH_P2_1⁸, _lh_kingincheck_LH_P2_1⁹)))}))) || ((_lh_kingincheck_LH_P2_1⁸ == _lh_kingincheck_LH_P2_1⁹) && emptyAtAll_lh_₃(_lh_kingincheck_arg2¹, (fun xeye⁵ -> 
//│ 										let _lh_matchIdent⁴⁸ = xeye⁵
//│ 										in case _lh_matchIdent⁴⁸ of {
//│ 											LH_P2 _lh_kingincheck_LH_P2_0¹¹ _lh_kingincheck_LH_P2_1¹¹ => (((_lh_kingincheck_LH_P2_1¹¹ == _lh_kingincheck_LH_P2_1⁹) && (min_lh_₃(_lh_kingincheck_LH_P2_0⁸, _lh_kingincheck_LH_P2_0⁹) < _lh_kingincheck_LH_P2_0¹¹)) && (_lh_kingincheck_LH_P2_0¹¹ < max_lh_₂(_lh_kingincheck_LH_P2_0⁸, _lh_kingincheck_LH_P2_0⁹)))}))))
//│ 									| Bishop  => ((((_lh_kingincheck_LH_P2_0⁸ + _lh_kingincheck_LH_P2_1⁸) == (_lh_kingincheck_LH_P2_0⁹ + _lh_kingincheck_LH_P2_1⁹)) && emptyAtAll_lh_₁(_lh_kingincheck_arg2¹, (fun xeye⁶ -> 
//│ 										let _lh_matchIdent⁴⁹ = xeye⁶
//│ 										in case _lh_matchIdent⁴⁹ of {
//│ 											LH_P2 _lh_kingincheck_LH_P2_0¹² _lh_kingincheck_LH_P2_1¹² => ((((_lh_kingincheck_LH_P2_0¹² + _lh_kingincheck_LH_P2_1¹²) == (_lh_kingincheck_LH_P2_0⁹ + _lh_kingincheck_LH_P2_1⁹)) && (min_lh_₁(_lh_kingincheck_LH_P2_0⁸, _lh_kingincheck_LH_P2_0⁹) < _lh_kingincheck_LH_P2_0¹²)) && (_lh_kingincheck_LH_P2_0¹² < max_lh_₃(_lh_kingincheck_LH_P2_0⁸, _lh_kingincheck_LH_P2_0⁹)))}))) || (((_lh_kingincheck_LH_P2_0⁸ - _lh_kingincheck_LH_P2_1⁸) == (_lh_kingincheck_LH_P2_0⁹ - _lh_kingincheck_LH_P2_1⁹)) && emptyAtAll_lh_₂(_lh_kingincheck_arg2¹, (fun xeye⁷ -> 
//│ 										let _lh_matchIdent⁵⁰ = xeye⁷
//│ 										in case _lh_matchIdent⁵⁰ of {
//│ 											LH_P2 _lh_kingincheck_LH_P2_0¹³ _lh_kingincheck_LH_P2_1¹³ => ((((_lh_kingincheck_LH_P2_0¹³ - _lh_kingincheck_LH_P2_1¹³) == (_lh_kingincheck_LH_P2_0⁹ - _lh_kingincheck_LH_P2_1⁹)) && (min_lh_₂(_lh_kingincheck_LH_P2_0⁸, _lh_kingincheck_LH_P2_0⁹) < _lh_kingincheck_LH_P2_0¹³)) && (_lh_kingincheck_LH_P2_0¹³ < max_lh_₄(_lh_kingincheck_LH_P2_0⁸, _lh_kingincheck_LH_P2_0⁹)))}))))
//│ 									| Knight  => (((abs_lh_₄((_lh_kingincheck_LH_P2_0⁸ - _lh_kingincheck_LH_P2_0⁹)) == 2) && (abs_lh_₆((_lh_kingincheck_LH_P2_1⁸ - _lh_kingincheck_LH_P2_1⁹)) == 1)) || ((abs_lh_₅((_lh_kingincheck_LH_P2_0⁸ - _lh_kingincheck_LH_P2_0⁹)) == 1) && (abs_lh_₇((_lh_kingincheck_LH_P2_1⁸ - _lh_kingincheck_LH_P2_1⁹)) == 2)))
//│ 									| Pawn  => ((abs_lh_₃((_lh_kingincheck_LH_P2_0⁸ - _lh_kingincheck_LH_P2_0⁹)) == 1) && 
//│ 										let _lh_matchIdent⁵¹ = _lh_kingincheck_arg1¹
//│ 										in case _lh_matchIdent⁵¹ of {
//│ 											Black  => (_lh_kingincheck_LH_P2_1⁹ == (_lh_kingincheck_LH_P2_1⁸ + 1))
//│ 											| White  => (_lh_kingincheck_LH_P2_1⁹ == (_lh_kingincheck_LH_P2_1⁸ - 1))})}})
//│ 					in kthreat¹(_lh_kingincheck_LH_P2_0⁷)}})
//│ 	in any_lh_₁(givesCheck¹, forcesColoured_lh_₂(opponent_lh_₄(_lh_kingincheck_arg1¹), _lh_kingincheck_arg2¹))
//│ def kingincheck_lh_₂(_lh_kingincheck_arg1⁰, _lh_kingincheck_arg2⁰) = 
//│ 	let givesCheck⁰ = (fun kxy⁰ -> 
//│ 		let _lh_matchIdent⁵ = kxy⁰
//│ 		in case _lh_matchIdent⁵ of {
//│ 			LH_P2 _lh_kingincheck_LH_P2_0⁰ _lh_kingincheck_LH_P2_1⁰ => case _lh_kingincheck_LH_P2_1⁰ of {
//│ 				LH_P2 _lh_kingincheck_LH_P2_0¹ _lh_kingincheck_LH_P2_1¹ => 
//│ 					let kthreat⁰ = (fun param⁰ -> 
//│ 						let xkyk⁰ = kingSquare_lh_₁(_lh_kingincheck_arg1⁰, _lh_kingincheck_arg2⁰)
//│ 						in let _lh_matchIdent⁶ = xkyk⁰
//│ 						in case _lh_matchIdent⁶ of {
//│ 							LH_P2 _lh_kingincheck_LH_P2_0² _lh_kingincheck_LH_P2_1² => 
//│ 								let _lh_matchIdent⁷ = param⁰
//│ 								in case _lh_matchIdent⁷ of {
//│ 									King  => ((abs_lh_₇((_lh_kingincheck_LH_P2_0¹ - _lh_kingincheck_LH_P2_0²)) <= 1) && (abs_lh_₇((_lh_kingincheck_LH_P2_1¹ - _lh_kingincheck_LH_P2_1²)) <= 1))
//│ 									| Queen  => (kthreat⁰([Rook]) || kthreat⁰([Bishop]))
//│ 									| Rook  => (((_lh_kingincheck_LH_P2_0¹ == _lh_kingincheck_LH_P2_0²) && emptyAtAll_lh_₄(_lh_kingincheck_arg2⁰, (fun xeye⁰ -> 
//│ 										let _lh_matchIdent⁸ = xeye⁰
//│ 										in case _lh_matchIdent⁸ of {
//│ 											LH_P2 _lh_kingincheck_LH_P2_0³ _lh_kingincheck_LH_P2_1³ => (((_lh_kingincheck_LH_P2_0³ == _lh_kingincheck_LH_P2_0²) && (min_lh_₄(_lh_kingincheck_LH_P2_1¹, _lh_kingincheck_LH_P2_1²) < _lh_kingincheck_LH_P2_1³)) && (_lh_kingincheck_LH_P2_1³ < max_lh_₄(_lh_kingincheck_LH_P2_1¹, _lh_kingincheck_LH_P2_1²)))}))) || ((_lh_kingincheck_LH_P2_1¹ == _lh_kingincheck_LH_P2_1²) && emptyAtAll_lh_₄(_lh_kingincheck_arg2⁰, (fun xeye¹ -> 
//│ 										let _lh_matchIdent⁹ = xeye¹
//│ 										in case _lh_matchIdent⁹ of {
//│ 											LH_P2 _lh_kingincheck_LH_P2_0⁴ _lh_kingincheck_LH_P2_1⁴ => (((_lh_kingincheck_LH_P2_1⁴ == _lh_kingincheck_LH_P2_1²) && (min_lh_₄(_lh_kingincheck_LH_P2_0¹, _lh_kingincheck_LH_P2_0²) < _lh_kingincheck_LH_P2_0⁴)) && (_lh_kingincheck_LH_P2_0⁴ < max_lh_₄(_lh_kingincheck_LH_P2_0¹, _lh_kingincheck_LH_P2_0²)))}))))
//│ 									| Bishop  => ((((_lh_kingincheck_LH_P2_0¹ + _lh_kingincheck_LH_P2_1¹) == (_lh_kingincheck_LH_P2_0² + _lh_kingincheck_LH_P2_1²)) && emptyAtAll_lh_₄(_lh_kingincheck_arg2⁰, (fun xeye² -> 
//│ 										let _lh_matchIdent¹⁰ = xeye²
//│ 										in case _lh_matchIdent¹⁰ of {
//│ 											LH_P2 _lh_kingincheck_LH_P2_0⁵ _lh_kingincheck_LH_P2_1⁵ => ((((_lh_kingincheck_LH_P2_0⁵ + _lh_kingincheck_LH_P2_1⁵) == (_lh_kingincheck_LH_P2_0² + _lh_kingincheck_LH_P2_1²)) && (min_lh_₄(_lh_kingincheck_LH_P2_0¹, _lh_kingincheck_LH_P2_0²) < _lh_kingincheck_LH_P2_0⁵)) && (_lh_kingincheck_LH_P2_0⁵ < max_lh_₄(_lh_kingincheck_LH_P2_0¹, _lh_kingincheck_LH_P2_0²)))}))) || (((_lh_kingincheck_LH_P2_0¹ - _lh_kingincheck_LH_P2_1¹) == (_lh_kingincheck_LH_P2_0² - _lh_kingincheck_LH_P2_1²)) && emptyAtAll_lh_₄(_lh_kingincheck_arg2⁰, (fun xeye³ -> 
//│ 										let _lh_matchIdent¹¹ = xeye³
//│ 										in case _lh_matchIdent¹¹ of {
//│ 											LH_P2 _lh_kingincheck_LH_P2_0⁶ _lh_kingincheck_LH_P2_1⁶ => ((((_lh_kingincheck_LH_P2_0⁶ - _lh_kingincheck_LH_P2_1⁶) == (_lh_kingincheck_LH_P2_0² - _lh_kingincheck_LH_P2_1²)) && (min_lh_₄(_lh_kingincheck_LH_P2_0¹, _lh_kingincheck_LH_P2_0²) < _lh_kingincheck_LH_P2_0⁶)) && (_lh_kingincheck_LH_P2_0⁶ < max_lh_₄(_lh_kingincheck_LH_P2_0¹, _lh_kingincheck_LH_P2_0²)))}))))
//│ 									| Knight  => (((abs_lh_₇((_lh_kingincheck_LH_P2_0¹ - _lh_kingincheck_LH_P2_0²)) == 2) && (abs_lh_₇((_lh_kingincheck_LH_P2_1¹ - _lh_kingincheck_LH_P2_1²)) == 1)) || ((abs_lh_₇((_lh_kingincheck_LH_P2_0¹ - _lh_kingincheck_LH_P2_0²)) == 1) && (abs_lh_₇((_lh_kingincheck_LH_P2_1¹ - _lh_kingincheck_LH_P2_1²)) == 2)))
//│ 									| Pawn  => ((abs_lh_₇((_lh_kingincheck_LH_P2_0¹ - _lh_kingincheck_LH_P2_0²)) == 1) && 
//│ 										let _lh_matchIdent¹² = _lh_kingincheck_arg1⁰
//│ 										in case _lh_matchIdent¹² of {
//│ 											Black  => (_lh_kingincheck_LH_P2_1² == (_lh_kingincheck_LH_P2_1¹ + 1))
//│ 											| White  => (_lh_kingincheck_LH_P2_1² == (_lh_kingincheck_LH_P2_1¹ - 1))})}})
//│ 					in kthreat⁰(_lh_kingincheck_LH_P2_0⁰)}})
//│ 	in any_lh_₁(givesCheck⁰, forcesColoured_lh_₂(opponent_lh_₅(_lh_kingincheck_arg1⁰), _lh_kingincheck_arg2⁰))
//│ def kingmoves_lh_₁(_lh_kingmoves_arg1⁰, _lh_kingmoves_arg2⁰, _lh_kingmoves_arg3⁰) = case _lh_kingmoves_arg2⁰ of {
//│ 	LH_P2 _lh_kingmoves_LH_P2_0⁰ _lh_kingmoves_LH_P2_1⁰ => sift_lh_₁(_lh_kingmoves_arg1⁰, _lh_kingmoves_arg3⁰, [LH_N], [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]]]]]]]])}
//│ def knightmoves_lh_₁(_lh_knightmoves_arg1⁰, _lh_knightmoves_arg2⁰, _lh_knightmoves_arg3⁰) = case _lh_knightmoves_arg2⁰ of {
//│ 	LH_P2 _lh_knightmoves_LH_P2_0⁰ _lh_knightmoves_LH_P2_1⁰ => sift_lh_₁(_lh_knightmoves_arg1⁰, _lh_knightmoves_arg3⁰, [LH_N], [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ + 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ + 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]]]]]]]])}
//│ def length_lh_₁(ls²²) = case ls²² of {
//│ 	LH_C h⁴⁴ t⁴⁴ => (1 + length_lh_₁(t⁴⁴))
//│ 	| LH_N  => 0}
//│ def length_lh_₁₀(ls¹) = case ls¹ of {
//│ 	LH_C h⁵ t⁵ => (1 + length_lh_₁₀(t⁵))
//│ 	| LH_N  => 0}
//│ def length_lh_₂(ls⁹) = case ls⁹ of {
//│ 	LH_C h²⁵ t²⁵ => (1 + length_lh_₂(t²⁵))
//│ 	| LH_N  => 0}
//│ def length_lh_₃(ls⁸) = case ls⁸ of {
//│ 	LH_C h²⁴ t²⁴ => (1 + length_lh_₃(t²⁴))
//│ 	| LH_N  => 0}
//│ def length_lh_₄(ls⁷) = case ls⁷ of {
//│ 	LH_C h²³ t²³ => (1 + length_lh_₄(t²³))
//│ 	| LH_N  => 0}
//│ def length_lh_₅(ls⁶) = case ls⁶ of {
//│ 	LH_C h²² t²² => (1 + length_lh_₅(t²²))
//│ 	| LH_N  => 0}
//│ def length_lh_₆(ls⁵) = case ls⁵ of {
//│ 	LH_C h²¹ t²¹ => (1 + length_lh_₆(t²¹))
//│ 	| LH_N  => 0}
//│ def length_lh_₇(ls⁴) = case ls⁴ of {
//│ 	LH_C h²⁰ t²⁰ => (1 + length_lh_₇(t²⁰))
//│ 	| LH_N  => 0}
//│ def length_lh_₈(ls³) = case ls³ of {
//│ 	LH_C h¹⁸ t¹⁸ => (1 + length_lh_₈(t¹⁸))
//│ 	| LH_N  => 0}
//│ def length_lh_₉(ls²) = case ls² of {
//│ 	LH_C h⁹ t⁹ => (1 + length_lh_₉(t⁹))
//│ 	| LH_N  => 0}
//│ def lines_lh_₁(_lh_lines_arg1⁰) = 
//│ 	let _lh_matchIdent⁵⁶ = break_lh_₁((fun x⁹ -> polyEq⁰(x⁹, '|')), _lh_lines_arg1⁰)
//│ 	in case _lh_matchIdent⁵⁶ of {
//│ 		LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ 
//│ 			let _lh_matchIdent⁵⁷ = _lh_lines_LH_P2_1⁰
//│ 			in case _lh_matchIdent⁵⁷ of {
//│ 				LH_N  => [LH_N]
//│ 				| LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰)}]}
//│ def map_lh_₁(f⁹, ls²⁹) = case ls²⁹ of {
//│ 	LH_C h⁵⁴ t⁵⁴ => [LH_C f⁹(h⁵⁴) map_lh_₁(f⁹, t⁵⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f⁷, ls²⁷) = case ls²⁷ of {
//│ 	LH_C h⁵⁰ t⁵⁰ => [LH_C f⁷(h⁵⁰) map_lh_₂(f⁷, t⁵⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs³⁵, ys³⁵) = case xs³⁵ of {
//│ 	LH_C h⁶³ t⁶³ => [LH_C h⁶³ mappend_lh_₁(t⁶³, ys³⁵)]
//│ 	| LH_N  => ys³⁵}
//│ def mappend_lh_₁₀(xs²⁶, ys²⁶) = case xs²⁶ of {
//│ 	LH_C h⁴⁵ t⁴⁵ => [LH_C h⁴⁵ mappend_lh_₁₀(t⁴⁵, ys²⁶)]
//│ 	| LH_N  => ys²⁶}
//│ def mappend_lh_₁₁(xs²⁵, ys²⁵) = case xs²⁵ of {
//│ 	LH_C h⁴³ t⁴³ => [LH_C h⁴³ mappend_lh_₁₁(t⁴³, ys²⁵)]
//│ 	| LH_N  => ys²⁵}
//│ def mappend_lh_₁₂(xs²⁴, ys²⁴) = case xs²⁴ of {
//│ 	LH_C h⁴² t⁴² => [LH_C h⁴² mappend_lh_₁₂(t⁴², ys²⁴)]
//│ 	| LH_N  => ys²⁴}
//│ def mappend_lh_₁₃(xs²³, ys²³) = case xs²³ of {
//│ 	LH_C h⁴¹ t⁴¹ => [LH_C h⁴¹ mappend_lh_₁₃(t⁴¹, ys²³)]
//│ 	| LH_N  => ys²³}
//│ def mappend_lh_₁₄(xs²², ys²²) = case xs²² of {
//│ 	LH_C h⁴⁰ t⁴⁰ => [LH_C h⁴⁰ mappend_lh_₁₄(t⁴⁰, ys²²)]
//│ 	| LH_N  => ys²²}
//│ def mappend_lh_₁₅(xs²¹, ys²¹) = case xs²¹ of {
//│ 	LH_C h³⁹ t³⁹ => [LH_C h³⁹ mappend_lh_₁₅(t³⁹, ys²¹)]
//│ 	| LH_N  => ys²¹}
//│ def mappend_lh_₁₆(xs²⁰, ys²⁰) = case xs²⁰ of {
//│ 	LH_C h³⁸ t³⁸ => [LH_C h³⁸ mappend_lh_₁₆(t³⁸, ys²⁰)]
//│ 	| LH_N  => ys²⁰}
//│ def mappend_lh_₁₇(xs¹⁹, ys¹⁹) = case xs¹⁹ of {
//│ 	LH_C h³⁷ t³⁷ => [LH_C h³⁷ mappend_lh_₁₇(t³⁷, ys¹⁹)]
//│ 	| LH_N  => ys¹⁹}
//│ def mappend_lh_₁₈(xs¹⁸, ys¹⁸) = case xs¹⁸ of {
//│ 	LH_C h³⁶ t³⁶ => [LH_C h³⁶ mappend_lh_₁₈(t³⁶, ys¹⁸)]
//│ 	| LH_N  => ys¹⁸}
//│ def mappend_lh_₁₉(xs¹⁷, ys¹⁷) = case xs¹⁷ of {
//│ 	LH_C h³¹ t³¹ => [LH_C h³¹ mappend_lh_₁₉(t³¹, ys¹⁷)]
//│ 	| LH_N  => ys¹⁷}
//│ def mappend_lh_₂(xs³⁴, ys³⁴) = case xs³⁴ of {
//│ 	LH_C h⁶² t⁶² => [LH_C h⁶² mappend_lh_₂(t⁶², ys³⁴)]
//│ 	| LH_N  => ys³⁴}
//│ def mappend_lh_₂₀(xs¹⁵, ys¹⁵) = case xs¹⁵ of {
//│ 	LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₂₀(t¹⁹, ys¹⁵)]
//│ 	| LH_N  => ys¹⁵}
//│ def mappend_lh_₂₁(xs¹⁴, ys¹⁴) = case xs¹⁴ of {
//│ 	LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ mappend_lh_₂₁(t¹⁷, ys¹⁴)]
//│ 	| LH_N  => ys¹⁴}
//│ def mappend_lh_₂₂(xs¹³, ys¹³) = case xs¹³ of {
//│ 	LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₂₂(t¹⁶, ys¹³)]
//│ 	| LH_N  => ys¹³}
//│ def mappend_lh_₂₃(xs¹², ys¹²) = case xs¹² of {
//│ 	LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₂₃(t¹⁵, ys¹²)]
//│ 	| LH_N  => ys¹²}
//│ def mappend_lh_₂₄(xs¹¹, ys¹¹) = case xs¹¹ of {
//│ 	LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₂₄(t¹⁴, ys¹¹)]
//│ 	| LH_N  => ys¹¹}
//│ def mappend_lh_₂₅(xs¹⁰, ys¹⁰) = case xs¹⁰ of {
//│ 	LH_C h¹³ t¹³ => [LH_C h¹³ mappend_lh_₂₅(t¹³, ys¹⁰)]
//│ 	| LH_N  => ys¹⁰}
//│ def mappend_lh_₂₆(xs⁹, ys⁹) = case xs⁹ of {
//│ 	LH_C h¹² t¹² => [LH_C h¹² mappend_lh_₂₆(t¹², ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_lh_₂₇(xs⁸, ys⁸) = case xs⁸ of {
//│ 	LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₂₇(t¹¹, ys⁸)]
//│ 	| LH_N  => ys⁸}
//│ def mappend_lh_₂₈(xs⁷, ys⁷) = case xs⁷ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂₈(t¹⁰, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₂₉(xs⁶, ys⁶) = case xs⁶ of {
//│ 	LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₂₉(t⁸, ys⁶)]
//│ 	| LH_N  => ys⁶}
//│ def mappend_lh_₃(xs³³, ys³³) = case xs³³ of {
//│ 	LH_C h⁶¹ t⁶¹ => [LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)]
//│ 	| LH_N  => ys³³}
//│ def mappend_lh_₃₀(xs⁵, ys⁵) = case xs⁵ of {
//│ 	LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₃₀(t⁷, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mappend_lh_₃₁(xs⁴, ys⁴) = case xs⁴ of {
//│ 	LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₃₁(t⁶, ys⁴)]
//│ 	| LH_N  => ys⁴}
//│ def mappend_lh_₃₂(xs³, ys³) = case xs³ of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃₂(t⁴, ys³)]
//│ 	| LH_N  => ys³}
//│ def mappend_lh_₃₃(xs², ys²) = case xs² of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh_₃₃(t³, ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₃₄(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h² t² => [LH_C h² mappend_lh_₃₄(t², ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₃₅(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₃₅(t¹, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₄(xs³², ys³²) = case xs³² of {
//│ 	LH_C h⁶⁰ t⁶⁰ => [LH_C h⁶⁰ mappend_lh_₄(t⁶⁰, ys³²)]
//│ 	| LH_N  => ys³²}
//│ def mappend_lh_₅(xs³¹, ys³¹) = case xs³¹ of {
//│ 	LH_C h⁵⁹ t⁵⁹ => [LH_C h⁵⁹ mappend_lh_₅(t⁵⁹, ys³¹)]
//│ 	| LH_N  => ys³¹}
//│ def mappend_lh_₆(xs³⁰, ys³⁰) = case xs³⁰ of {
//│ 	LH_C h⁵⁸ t⁵⁸ => [LH_C h⁵⁸ mappend_lh_₆(t⁵⁸, ys³⁰)]
//│ 	| LH_N  => ys³⁰}
//│ def mappend_lh_₇(xs²⁹, ys²⁹) = case xs²⁹ of {
//│ 	LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)]
//│ 	| LH_N  => ys²⁹}
//│ def mappend_lh_₈(xs²⁸, ys²⁸) = case xs²⁸ of {
//│ 	LH_C h⁵⁶ t⁵⁶ => [LH_C h⁵⁶ mappend_lh_₈(t⁵⁶, ys²⁸)]
//│ 	| LH_N  => ys²⁸}
//│ def mappend_lh_₉(xs²⁷, ys²⁷) = case xs²⁷ of {
//│ 	LH_C h⁵¹ t⁵¹ => [LH_C h⁵¹ mappend_lh_₉(t⁵¹, ys²⁷)]
//│ 	| LH_N  => ys²⁷}
//│ def max_lh_₁(_lh_max_arg1³, _lh_max_arg2³) = if (_lh_max_arg1³ < _lh_max_arg2³) then _lh_max_arg2³ else _lh_max_arg1³
//│ def max_lh_₂(_lh_max_arg1², _lh_max_arg2²) = if (_lh_max_arg1² < _lh_max_arg2²) then _lh_max_arg2² else _lh_max_arg1²
//│ def max_lh_₃(_lh_max_arg1¹, _lh_max_arg2¹) = if (_lh_max_arg1¹ < _lh_max_arg2¹) then _lh_max_arg2¹ else _lh_max_arg1¹
//│ def max_lh_₄(_lh_max_arg1⁰, _lh_max_arg2⁰) = if (_lh_max_arg1⁰ < _lh_max_arg2⁰) then _lh_max_arg2⁰ else _lh_max_arg1⁰
//│ def maybe_lh_₁(_lh_maybe_arg1², _lh_maybe_arg2², _lh_maybe_arg3²) = case _lh_maybe_arg3² of {
//│ 	Nothing  => _lh_maybe_arg1²
//│ 	| Just _lh_maybe_Just_0² => _lh_maybe_arg2²(_lh_maybe_Just_0²)}
//│ def maybe_lh_₂(_lh_maybe_arg1¹, _lh_maybe_arg2¹, _lh_maybe_arg3¹) = case _lh_maybe_arg3¹ of {
//│ 	Nothing  => _lh_maybe_arg1¹
//│ 	| Just _lh_maybe_Just_0¹ => _lh_maybe_arg2¹(_lh_maybe_Just_0¹)}
//│ def maybe_lh_₃(_lh_maybe_arg1⁰, _lh_maybe_arg2⁰, _lh_maybe_arg3⁰) = case _lh_maybe_arg3⁰ of {
//│ 	Nothing  => _lh_maybe_arg1⁰
//│ 	| Just _lh_maybe_Just_0⁰ => _lh_maybe_arg2⁰(_lh_maybe_Just_0⁰)}
//│ def min_lh_₁(_lh_min_arg1³, _lh_min_arg2³) = if (_lh_min_arg1³ < _lh_min_arg2³) then _lh_min_arg1³ else _lh_min_arg2³
//│ def min_lh_₂(_lh_min_arg1², _lh_min_arg2²) = if (_lh_min_arg1² < _lh_min_arg2²) then _lh_min_arg1² else _lh_min_arg2²
//│ def min_lh_₃(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ < _lh_min_arg2¹) then _lh_min_arg1¹ else _lh_min_arg2¹
//│ def min_lh_₄(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ < _lh_min_arg2⁰) then _lh_min_arg1⁰ else _lh_min_arg2⁰
//│ def moveDetailsFor_lh_₁(_lh_moveDetailsFor_arg1¹, _lh_moveDetailsFor_arg2¹) = foldr_lh_₄((fun ksq¹ -> (fun ms² -> foldr_lh_₅((fun rm¹ -> (fun ms'¹ -> maybe_lh_₁((fun x⁸ -> x⁸), (fun h⁵³ -> (fun t⁵³ -> [LH_C h⁵³ t⁵³])), tryMove_lh_₁(_lh_moveDetailsFor_arg1¹, ksq¹, rm¹, _lh_moveDetailsFor_arg2¹), ms'¹))), ms², rawmoves_lh_₁(_lh_moveDetailsFor_arg1¹, ksq¹, _lh_moveDetailsFor_arg2¹)))), [LH_N], forcesColoured_lh_₁(_lh_moveDetailsFor_arg1¹, _lh_moveDetailsFor_arg2¹))
//│ def moveDetailsFor_lh_₂(_lh_moveDetailsFor_arg1⁰, _lh_moveDetailsFor_arg2⁰) = foldr_lh_₇((fun ksq⁰ -> (fun ms¹ -> foldr_lh_₇((fun rm⁰ -> (fun ms'⁰ -> maybe_lh_₃((fun x⁶ -> x⁶), (fun h³³ -> (fun t³³ -> [LH_C h³³ t³³])), tryMove_lh_₂(_lh_moveDetailsFor_arg1⁰, ksq⁰, rm⁰, _lh_moveDetailsFor_arg2⁰), ms'⁰))), ms¹, rawmoves_lh_₁(_lh_moveDetailsFor_arg1⁰, ksq⁰, _lh_moveDetailsFor_arg2⁰)))), [LH_N], forcesColoured_lh_₂(_lh_moveDetailsFor_arg1⁰, _lh_moveDetailsFor_arg2⁰))
//│ def moveLine_lh_₁(_lh_moveLine_arg1⁰, _lh_moveLine_arg2⁰, _lh_moveLine_arg3⁰, _lh_moveLine_arg4⁰, _lh_moveLine_arg5⁰) = 
//│ 	let ml⁰ = (fun sq⁰ -> (fun ms⁰ -> 
//│ 		let sq'⁰ = _lh_moveLine_arg4⁰(sq⁰)
//│ 		in if onboard_lh_₁(sq'⁰) then 
//│ 			let _lh_matchIdent¹ = pieceAt_lh_₁(_lh_moveLine_arg1⁰, sq'⁰)
//│ 			in case _lh_matchIdent¹ of {
//│ 				Nothing  => ml⁰(sq'⁰, [LH_C [Move sq'⁰ [Nothing] [Nothing]] ms⁰])
//│ 				| Just _lh_moveLine_Just_0⁰ => if polyNeq⁰(colourOf_lh_₁(_lh_moveLine_Just_0⁰), _lh_moveLine_arg2⁰) then _lh_moveLine_arg5⁰([LH_C [Move sq'⁰ [Just _lh_moveLine_Just_0⁰] [Nothing]] ms⁰]) else _lh_moveLine_arg5⁰(ms⁰)} else _lh_moveLine_arg5⁰(ms⁰)))
//│ 	in ml⁰(_lh_moveLine_arg3⁰)
//│ def null_lh_₁(_lh_null_arg1³) = case _lh_null_arg1³ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False]}
//│ def null_lh_₂(_lh_null_arg1²) = case _lh_null_arg1² of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0² _lh_null_LH_C_1² => [False]}
//│ def null_lh_₃(_lh_null_arg1¹) = case _lh_null_arg1¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False]}
//│ def null_lh_₄(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]}
//│ def onboard_lh_₁(_lh_onboard_arg1⁰) = case _lh_onboard_arg1⁰ of {
//│ 	LH_P2 _lh_onboard_LH_P2_0⁰ _lh_onboard_LH_P2_1⁰ => ((((1 <= _lh_onboard_LH_P2_0⁰) && (_lh_onboard_LH_P2_0⁰ <= 8)) && (1 <= _lh_onboard_LH_P2_1⁰)) && (_lh_onboard_LH_P2_1⁰ <= 8))}
//│ def opponent_lh_₁(_lh_opponent_arg1⁴) = case _lh_opponent_arg1⁴ of {
//│ 	Black  => [White]
//│ 	| White  => [Black]}
//│ def opponent_lh_₂(_lh_opponent_arg1³) = case _lh_opponent_arg1³ of {
//│ 	Black  => [White]
//│ 	| White  => [Black]}
//│ def opponent_lh_₃(_lh_opponent_arg1²) = case _lh_opponent_arg1² of {
//│ 	Black  => [White]
//│ 	| White  => [Black]}
//│ def opponent_lh_₄(_lh_opponent_arg1¹) = case _lh_opponent_arg1¹ of {
//│ 	Black  => [White]
//│ 	| White  => [Black]}
//│ def opponent_lh_₅(_lh_opponent_arg1⁰) = case _lh_opponent_arg1⁰ of {
//│ 	Black  => [White]
//│ 	| White  => [Black]}
//│ def parseBoard_lh_₁(_lh_parseBoard_arg1⁰) = 
//│ 	let addPiece⁰ = (fun p_sq⁰ -> 
//│ 		let _lh_matchIdent⁴⁰ = p_sq⁰
//│ 		in case _lh_matchIdent⁴⁰ of {
//│ 			LH_P2 _lh_parseBoard_LH_P2_0⁰ _lh_parseBoard_LH_P2_1⁰ => putPieceAt_lh_₁(_lh_parseBoard_LH_P2_1⁰, _lh_parseBoard_LH_P2_0⁰)})
//│ 	in (fun _lh_funcomp_x² -> (fun _lh_funcomp_x³ -> foldr_lh_₇(addPiece⁰, emptyBoard_lh_₁, concat_lh_₂(_lh_funcomp_x³)))(zipWith_lh_₁(parseRank_lh_₁, reverse_lh_₂(enumFromTo_lh_₃(1, 8)), _lh_funcomp_x²)))(_lh_parseBoard_arg1⁰)
//│ def parseGoal_lh_₁(_lh_parseGoal_arg1⁰) = case _lh_parseGoal_arg1⁰ of {
//│ 	LH_C _lh_parseGoal_LH_C_0⁰ _lh_parseGoal_LH_C_1⁰ => case _lh_parseGoal_LH_C_1⁰ of {
//│ 		LH_N  => 
//│ 			let ws⁰ = words_lh_₁(_lh_parseGoal_LH_C_0⁰)
//│ 			in let c⁰ = if polyEq⁰(head_lh_₁(ws⁰), [LH_C 'B' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_N]]]]]]) then [Black] else [White]
//│ 			in let n³ = 2
//│ 			in [LH_P2 c⁰ n³]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def parseProblem_lh_₁(_lh_parseProblem_arg1⁰) = 
//│ 	let bdtxt_gltxt⁰ = splitAt_lh_₁(8, filter_lh_₁((fun _lh_funcomp_x⁴ -> not⁰(comment_lh_₁(_lh_funcomp_x⁴))), _lh_parseProblem_arg1⁰))
//│ 	in let _lh_matchIdent⁵⁸ = bdtxt_gltxt⁰
//│ 	in case _lh_matchIdent⁵⁸ of {
//│ 		LH_P2 _lh_parseProblem_LH_P2_0⁰ _lh_parseProblem_LH_P2_1⁰ => 
//│ 			let bd⁰ = parseBoard_lh_₁(_lh_parseProblem_LH_P2_0⁰)
//│ 			in let gl⁰ = parseGoal_lh_₁(_lh_parseProblem_LH_P2_1⁰)
//│ 			in [LH_P2 bd⁰ gl⁰]}
//│ def parseRank_lh_₁(_lh_parseRank_arg1⁰, _lh_parseRank_arg2⁰) = (fun _lh_funcomp_x⁰ -> (fun _lh_funcomp_x¹ -> concat_lh_₂(zipWith_lh_₁(parseSquare_lh_₁(_lh_parseRank_arg1⁰), enumFromTo_lh_₃(1, 8), _lh_funcomp_x¹)))(filter_lh_₁((fun x³ -> not⁰(polyEq⁰(x³, ' '))), _lh_funcomp_x⁰)))(_lh_parseRank_arg2⁰)
//│ def parseSquare_lh_₁(_lh_parseSquare_arg1⁰, _lh_parseSquare_arg2⁰, _lh_parseSquare_arg3⁰) = case _lh_parseSquare_arg3⁰ of {
//│ 	'-'  => [LH_N]
//│ 	| _  => 
//│ 		let clr⁰ = if isUpper_lh_₁(_lh_parseSquare_arg3⁰) then [Black] else [White]
//│ 		in let kin⁰ = 	
//│ 			let _lh_matchIdent⁴ = toLower_lh_₁(_lh_parseSquare_arg3⁰)
//│ 			in case _lh_matchIdent⁴ of {
//│ 				'k'  => [King]
//│ 				| 'q'  => [Queen]
//│ 				| 'r'  => [Rook]
//│ 				| 'b'  => [Bishop]
//│ 				| 'n'  => [Knight]
//│ 				| 'p'  => [Pawn]}
//│ 		in [LH_C [LH_P2 [LH_P2 clr⁰ kin⁰] [LH_P2 _lh_parseSquare_arg2⁰ _lh_parseSquare_arg1⁰]] [LH_N]]}
//│ def pawnmoves_lh_₁(_lh_pawnmoves_arg1⁰, _lh_pawnmoves_arg2⁰, _lh_pawnmoves_arg3⁰) = case _lh_pawnmoves_arg2⁰ of {
//│ 	LH_P2 _lh_pawnmoves_LH_P2_0⁰ _lh_pawnmoves_LH_P2_1⁰ => 
//│ 		let fwd⁰ = 	
//│ 			let _lh_matchIdent¹³ = _lh_pawnmoves_arg1⁰
//│ 			in case _lh_matchIdent¹³ of {
//│ 				White  => 1
//│ 				| Black  => (0 - 1)}
//│ 		in let promote⁰ = (fun xy⁰ -> (fun mcp⁰ -> 
//│ 			let _lh_matchIdent¹⁴ = xy⁰
//│ 			in case _lh_matchIdent¹⁴ of {
//│ 				LH_P2 _lh_pawnmoves_LH_P2_0¹ _lh_pawnmoves_LH_P2_1¹ => if ((polyEq⁰(_lh_pawnmoves_arg1⁰, [Black]) && (_lh_pawnmoves_LH_P2_1¹ == 1)) || (polyEq⁰(_lh_pawnmoves_arg1⁰, [White]) && (_lh_pawnmoves_LH_P2_1¹ == 8))) then map_lh_₂((fun param¹ -> [Move [LH_P2 _lh_pawnmoves_LH_P2_0¹ _lh_pawnmoves_LH_P2_1¹] mcp⁰ [Just param¹]]), [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Queen]] [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Rook]] [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Bishop]] [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Knight]] [LH_N]]]]]) else [LH_C [Move [LH_P2 _lh_pawnmoves_LH_P2_0¹ _lh_pawnmoves_LH_P2_1¹] mcp⁰ [Nothing]] [LH_N]]}))
//│ 		in let movs⁰ = 	
//│ 			let on1⁰ = [LH_P2 _lh_pawnmoves_LH_P2_0⁰ (_lh_pawnmoves_LH_P2_1⁰ + fwd⁰)]
//│ 			in let on2⁰ = [LH_P2 _lh_pawnmoves_LH_P2_0⁰ ((_lh_pawnmoves_LH_P2_1⁰ + 2) * fwd⁰)]
//│ 			in if polyEq⁰(pieceAt_lh_₁(_lh_pawnmoves_arg3⁰, on1⁰), [Nothing]) then mappend_lh_₃₅(promote⁰(on1⁰, [Nothing]), if ((((_lh_pawnmoves_LH_P2_1⁰ == 2) && polyEq⁰(_lh_pawnmoves_arg1⁰, [White])) || ((_lh_pawnmoves_LH_P2_1⁰ == 7) && polyEq⁰(_lh_pawnmoves_arg1⁰, [Black]))) && polyEq⁰(pieceAt_lh_₁(_lh_pawnmoves_arg3⁰, on2⁰), [Nothing])) then [LH_C [Move on2⁰ [Nothing] [Nothing]] [LH_N]] else [LH_N]) else [LH_N]
//│ 		in let caps⁰ = concat_lh_₂(
//│ 			let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 				LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 					let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 						LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {
//│ 							Just _lh_pawnmoves_Just_0⁰ => if not⁰(polyEq⁰(colourOf_lh_₁(_lh_pawnmoves_Just_0⁰), _lh_pawnmoves_arg1⁰)) then [LH_C promote⁰(_lh_listcomp_fun_ls_h⁰, [Just _lh_pawnmoves_Just_0⁰]) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)
//│ 							| _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}
//│ 						| LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ 					in _lh_listcomp_fun¹([LH_C pieceAt_lh_₁(_lh_pawnmoves_arg3⁰, _lh_listcomp_fun_ls_h⁰) [LH_N]])
//│ 				| LH_N  => [LH_N]})
//│ 			in _lh_listcomp_fun⁰([LH_C [LH_P2 (_lh_pawnmoves_LH_P2_0⁰ + 1) (_lh_pawnmoves_LH_P2_1⁰ + fwd⁰)] [LH_C [LH_P2 (_lh_pawnmoves_LH_P2_0⁰ - 1) (_lh_pawnmoves_LH_P2_1⁰ + fwd⁰)] [LH_N]]]))
//│ 		in mappend_lh_₃₅(movs⁰, caps⁰)}
//│ def pieceAt_lh_₁(_lh_pieceAt_arg1⁰, _lh_pieceAt_arg2⁰) = case _lh_pieceAt_arg1⁰ of {
//│ 	Board _lh_pieceAt_Board_0⁰ _lh_pieceAt_Board_1⁰ => 
//│ 		let pieceAtWith⁰ = (fun c¹ -> (fun n⁴ -> (fun ls³² -> 
//│ 			let _lh_matchIdent⁵⁹ = ls³²
//│ 			in case _lh_matchIdent⁵⁹ of {
//│ 				LH_N  => n⁴
//│ 				| LH_C _lh_pieceAt_LH_C_0⁰ _lh_pieceAt_LH_C_1⁰ => case _lh_pieceAt_LH_C_0⁰ of {
//│ 					LH_P2 _lh_pieceAt_LH_P2_0⁰ _lh_pieceAt_LH_P2_1⁰ => if polyEq⁰(_lh_pieceAt_LH_P2_1⁰, _lh_pieceAt_arg2⁰) then [Just [LH_P2 c¹ _lh_pieceAt_LH_P2_0⁰]] else pieceAtWith⁰(c¹, n⁴, _lh_pieceAt_LH_C_1⁰)}})))
//│ 		in pieceAtWith⁰([White], pieceAtWith⁰([Black], [Nothing], _lh_pieceAt_Board_1⁰), _lh_pieceAt_Board_0⁰)}
//│ def pieceToChar_lh_₁(_lh_pieceToChar_arg1⁰) = case _lh_pieceToChar_arg1⁰ of {
//│ 	LH_P2 _lh_pieceToChar_LH_P2_0⁰ _lh_pieceToChar_LH_P2_1⁰ => case _lh_pieceToChar_LH_P2_0⁰ of {
//│ 		Black  => kindToChar_lh_₁(_lh_pieceToChar_LH_P2_1⁰)
//│ 		| White  => toLower_lh_₁(kindToChar_lh_₂(_lh_pieceToChar_LH_P2_1⁰))}}
//│ def putPieceAt_lh_₁(_lh_putPieceAt_arg1², _lh_putPieceAt_arg2², _lh_putPieceAt_arg3²) = case _lh_putPieceAt_arg2² of {
//│ 	LH_P2 _lh_putPieceAt_LH_P2_0² _lh_putPieceAt_LH_P2_1² => case _lh_putPieceAt_LH_P2_0² of {
//│ 		White  => case _lh_putPieceAt_arg3² of {
//│ 			Board _lh_putPieceAt_Board_0⁴ _lh_putPieceAt_Board_1⁴ => [Board [LH_C [LH_P2 _lh_putPieceAt_LH_P2_1² _lh_putPieceAt_arg1²] _lh_putPieceAt_Board_0⁴] _lh_putPieceAt_Board_1⁴]}
//│ 		| Black  => case _lh_putPieceAt_arg3² of {
//│ 			Board _lh_putPieceAt_Board_0⁵ _lh_putPieceAt_Board_1⁵ => [Board _lh_putPieceAt_Board_0⁵ [LH_C [LH_P2 _lh_putPieceAt_LH_P2_1² _lh_putPieceAt_arg1²] _lh_putPieceAt_Board_1⁵]]}}}
//│ def putPieceAt_lh_₂(_lh_putPieceAt_arg1¹, _lh_putPieceAt_arg2¹, _lh_putPieceAt_arg3¹) = case _lh_putPieceAt_arg2¹ of {
//│ 	LH_P2 _lh_putPieceAt_LH_P2_0¹ _lh_putPieceAt_LH_P2_1¹ => case _lh_putPieceAt_LH_P2_0¹ of {
//│ 		White  => case _lh_putPieceAt_arg3¹ of {
//│ 			Board _lh_putPieceAt_Board_0² _lh_putPieceAt_Board_1² => [Board [LH_C [LH_P2 _lh_putPieceAt_LH_P2_1¹ _lh_putPieceAt_arg1¹] _lh_putPieceAt_Board_0²] _lh_putPieceAt_Board_1²]}
//│ 		| Black  => case _lh_putPieceAt_arg3¹ of {
//│ 			Board _lh_putPieceAt_Board_0³ _lh_putPieceAt_Board_1³ => [Board _lh_putPieceAt_Board_0³ [LH_C [LH_P2 _lh_putPieceAt_LH_P2_1¹ _lh_putPieceAt_arg1¹] _lh_putPieceAt_Board_1³]]}}}
//│ def putPieceAt_lh_₃(_lh_putPieceAt_arg1⁰, _lh_putPieceAt_arg2⁰, _lh_putPieceAt_arg3⁰) = case _lh_putPieceAt_arg2⁰ of {
//│ 	LH_P2 _lh_putPieceAt_LH_P2_0⁰ _lh_putPieceAt_LH_P2_1⁰ => case _lh_putPieceAt_LH_P2_0⁰ of {
//│ 		White  => case _lh_putPieceAt_arg3⁰ of {
//│ 			Board _lh_putPieceAt_Board_0⁰ _lh_putPieceAt_Board_1⁰ => [Board [LH_C [LH_P2 _lh_putPieceAt_LH_P2_1⁰ _lh_putPieceAt_arg1⁰] _lh_putPieceAt_Board_0⁰] _lh_putPieceAt_Board_1⁰]}
//│ 		| Black  => case _lh_putPieceAt_arg3⁰ of {
//│ 			Board _lh_putPieceAt_Board_0¹ _lh_putPieceAt_Board_1¹ => [Board _lh_putPieceAt_Board_0¹ [LH_C [LH_P2 _lh_putPieceAt_LH_P2_1⁰ _lh_putPieceAt_arg1⁰] _lh_putPieceAt_Board_1¹]]}}}
//│ def qpart_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg2⁰, _lh_qpart_arg3⁰, _lh_qpart_arg4⁰, _lh_qpart_arg5⁰, _lh_qpart_arg6⁰) = case _lh_qpart_arg3⁰ of {
//│ 	LH_N  => rqsort_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg4⁰, [LH_C _lh_qpart_arg2⁰ rqsort_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg5⁰, _lh_qpart_arg6⁰)])
//│ 	| LH_C _lh_qpart_LH_C_0⁰ _lh_qpart_LH_C_1⁰ => if _lh_qpart_arg1⁰(_lh_qpart_arg2⁰, _lh_qpart_LH_C_0⁰) then qpart_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg2⁰, _lh_qpart_LH_C_1⁰, _lh_qpart_arg4⁰, [LH_C _lh_qpart_LH_C_0⁰ _lh_qpart_arg5⁰], _lh_qpart_arg6⁰) else qpart_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg2⁰, _lh_qpart_LH_C_1⁰, [LH_C _lh_qpart_LH_C_0⁰ _lh_qpart_arg4⁰], _lh_qpart_arg5⁰, _lh_qpart_arg6⁰)}
//│ def qsort_lh_₁(_lh_qsort_arg1², _lh_qsort_arg2², _lh_qsort_arg3²) = case _lh_qsort_arg2² of {
//│ 	LH_N  => _lh_qsort_arg3²
//│ 	| LH_C _lh_qsort_LH_C_0² _lh_qsort_LH_C_1² => case _lh_qsort_LH_C_1² of {
//│ 		LH_N  => [LH_C _lh_qsort_LH_C_0² _lh_qsort_arg3²]
//│ 		| _  => qpart_lh_₁(_lh_qsort_arg1², _lh_qsort_LH_C_0², _lh_qsort_LH_C_1², [LH_N], [LH_N], _lh_qsort_arg3²)}}
//│ def qsort_lh_₂(_lh_qsort_arg1¹, _lh_qsort_arg2¹, _lh_qsort_arg3¹) = case _lh_qsort_arg2¹ of {
//│ 	LH_N  => _lh_qsort_arg3¹
//│ 	| LH_C _lh_qsort_LH_C_0¹ _lh_qsort_LH_C_1¹ => case _lh_qsort_LH_C_1¹ of {
//│ 		LH_N  => [LH_C _lh_qsort_LH_C_0¹ _lh_qsort_arg3¹]
//│ 		| _  => qpart_lh_₁(_lh_qsort_arg1¹, _lh_qsort_LH_C_0¹, _lh_qsort_LH_C_1¹, [LH_N], [LH_N], _lh_qsort_arg3¹)}}
//│ def qsort_lh_₃(_lh_qsort_arg1⁰, _lh_qsort_arg2⁰, _lh_qsort_arg3⁰) = case _lh_qsort_arg2⁰ of {
//│ 	LH_N  => _lh_qsort_arg3⁰
//│ 	| LH_C _lh_qsort_LH_C_0⁰ _lh_qsort_LH_C_1⁰ => case _lh_qsort_LH_C_1⁰ of {
//│ 		LH_N  => [LH_C _lh_qsort_LH_C_0⁰ _lh_qsort_arg3⁰]
//│ 		| _  => qpart_lh_₁(_lh_qsort_arg1⁰, _lh_qsort_LH_C_0⁰, _lh_qsort_LH_C_1⁰, [LH_N], [LH_N], _lh_qsort_arg3⁰)}}
//│ def queenmoves_lh_₁(_lh_queenmoves_arg1⁰, _lh_queenmoves_arg2⁰, _lh_queenmoves_arg3⁰) = mappend_lh_₃₅(bishopmoves_lh_₁(_lh_queenmoves_arg1⁰, _lh_queenmoves_arg2⁰, _lh_queenmoves_arg3⁰), rookmoves_lh_₁(_lh_queenmoves_arg1⁰, _lh_queenmoves_arg2⁰, _lh_queenmoves_arg3⁰))
//│ def rPa_lh_₁(_lh_rPa_arg1⁰, _lh_rPa_arg2⁰) = case _lh_rPa_arg2⁰ of {
//│ 	LH_C _lh_rPa_LH_C_0⁰ _lh_rPa_LH_C_1⁰ => case _lh_rPa_LH_C_0⁰ of {
//│ 		LH_P2 _lh_rPa_LH_P2_0⁰ _lh_rPa_LH_P2_1⁰ => if polyEq⁰(_lh_rPa_LH_P2_1⁰, _lh_rPa_arg1⁰) then _lh_rPa_LH_C_1⁰ else [LH_C [LH_P2 _lh_rPa_LH_P2_0⁰ _lh_rPa_LH_P2_1⁰] rPa_lh_₁(_lh_rPa_arg1⁰, _lh_rPa_LH_C_1⁰)]}
//│ 	| LH_N  => error⁰}
//│ def rawmoves_lh_₁(_lh_rawmoves_arg1⁰, _lh_rawmoves_arg2⁰, _lh_rawmoves_arg3⁰) = case _lh_rawmoves_arg2⁰ of {
//│ 	LH_P2 _lh_rawmoves_LH_P2_0⁰ _lh_rawmoves_LH_P2_1⁰ => 
//│ 		let m⁰ = 	
//│ 			let _lh_matchIdent³¹ = _lh_rawmoves_LH_P2_0⁰
//│ 			in case _lh_matchIdent³¹ of {
//│ 				King  => kingmoves_lh_₁
//│ 				| Queen  => queenmoves_lh_₁
//│ 				| Rook  => rookmoves_lh_₁
//│ 				| Bishop  => bishopmoves_lh_₁
//│ 				| Knight  => knightmoves_lh_₁
//│ 				| Pawn  => pawnmoves_lh_₁}
//│ 		in m⁰(_lh_rawmoves_arg1⁰, _lh_rawmoves_LH_P2_1⁰, _lh_rawmoves_arg3⁰)}
//│ def readProblem_lh_₁(_lh_readProblem_arg1⁰) = (fun _lh_funcomp_x⁵ -> parseProblem_lh_₁(lines_lh_₁(_lh_funcomp_x⁵)))(_lh_readProblem_arg1⁰)
//│ def replies_lh_₁(_lh_replies_arg1⁰, _lh_replies_arg2⁰, _lh_replies_arg3⁰) = 
//│ 	let mds⁰ = moveDetailsFor_lh_₂(_lh_replies_arg2⁰, _lh_replies_arg1⁰)
//│ 	in let solnAnd⁰ = (fun mifb⁰ -> (fun rest⁰ -> 
//│ 		let _lh_matchIdent⁵² = mifb⁰
//│ 		in case _lh_matchIdent⁵² of {
//│ 			LH_P2 _lh_replies_LH_P2_0⁰ _lh_replies_LH_P2_1⁰ => 
//│ 				let sm⁰ = solution_lh_₁(_lh_replies_LH_P2_1⁰, opponent_lh_₃(_lh_replies_arg2⁰), (_lh_replies_arg3⁰ - 1))
//│ 				in let _lh_matchIdent⁵³ = sm⁰
//│ 				in case _lh_matchIdent⁵³ of {
//│ 					Nothing  => [Nothing]
//│ 					| Just _lh_replies_Just_0⁰ => 
//│ 						let _lh_matchIdent⁵⁴ = rest⁰
//│ 						in case _lh_matchIdent⁵⁴ of {
//│ 							Nothing  => [Nothing]
//│ 							| Just _lh_replies_Just_0¹ => [Just [LH_C [LH_P2 _lh_replies_LH_P2_0⁰ _lh_replies_Just_0⁰] _lh_replies_Just_0¹]]}}}))
//│ 	in if (_lh_replies_arg3⁰ == 0) then if null_lh_₁(mds⁰) then [Just [LH_N]] else [Nothing] else if (_lh_replies_arg3⁰ > 0) then foldr_lh_₆(solnAnd⁰, [Just [LH_N]], mds⁰) else error⁰([LH_C 'n' [LH_C ' ' [LH_C '<' [LH_C ' ' [LH_C '0' [LH_N]]]]]])
//│ def reverse_helper_lh_₁(ls²⁶, a⁵) = case ls²⁶ of {
//│ 	LH_C h⁴⁸ t⁴⁸ => reverse_helper_lh_₁(t⁴⁸, [LH_C h⁴⁸ a⁵])
//│ 	| LH_N  => a⁵}
//│ def reverse_lh_₁(ls³¹) = reverse_helper_lh_₁(ls³¹, [LH_N])
//│ def reverse_lh_₂(ls¹³) = reverse_helper_lh_₁(ls¹³, [LH_N])
//│ def rmPieceAt_lh_₁(_lh_rmPieceAt_arg1¹, _lh_rmPieceAt_arg2¹, _lh_rmPieceAt_arg3¹) = case _lh_rmPieceAt_arg1¹ of {
//│ 	White  => case _lh_rmPieceAt_arg3¹ of {
//│ 		Board _lh_rmPieceAt_Board_0² _lh_rmPieceAt_Board_1² => [Board rPa_lh_₁(_lh_rmPieceAt_arg2¹, _lh_rmPieceAt_Board_0²) _lh_rmPieceAt_Board_1²]}
//│ 	| Black  => case _lh_rmPieceAt_arg3¹ of {
//│ 		Board _lh_rmPieceAt_Board_0³ _lh_rmPieceAt_Board_1³ => [Board _lh_rmPieceAt_Board_0³ rPa_lh_₁(_lh_rmPieceAt_arg2¹, _lh_rmPieceAt_Board_1³)]}}
//│ def rmPieceAt_lh_₂(_lh_rmPieceAt_arg1⁰, _lh_rmPieceAt_arg2⁰, _lh_rmPieceAt_arg3⁰) = case _lh_rmPieceAt_arg1⁰ of {
//│ 	White  => case _lh_rmPieceAt_arg3⁰ of {
//│ 		Board _lh_rmPieceAt_Board_0⁰ _lh_rmPieceAt_Board_1⁰ => [Board rPa_lh_₁(_lh_rmPieceAt_arg2⁰, _lh_rmPieceAt_Board_0⁰) _lh_rmPieceAt_Board_1⁰]}
//│ 	| Black  => case _lh_rmPieceAt_arg3⁰ of {
//│ 		Board _lh_rmPieceAt_Board_0¹ _lh_rmPieceAt_Board_1¹ => [Board _lh_rmPieceAt_Board_0¹ rPa_lh_₁(_lh_rmPieceAt_arg2⁰, _lh_rmPieceAt_Board_1¹)]}}
//│ def rookmoves_lh_₁(_lh_rookmoves_arg1⁰, _lh_rookmoves_arg2⁰, _lh_rookmoves_arg3⁰) = moveLine_lh_₁(_lh_rookmoves_arg3⁰, _lh_rookmoves_arg1⁰, _lh_rookmoves_arg2⁰, (fun xy⁵ -> 
//│ 	let _lh_matchIdent¹⁹ = xy⁵
//│ 	in case _lh_matchIdent¹⁹ of {
//│ 		LH_P2 _lh_rookmoves_LH_P2_0⁰ _lh_rookmoves_LH_P2_1⁰ => [LH_P2 (_lh_rookmoves_LH_P2_0⁰ - 1) _lh_rookmoves_LH_P2_1⁰]}), moveLine_lh_₁(_lh_rookmoves_arg3⁰, _lh_rookmoves_arg1⁰, _lh_rookmoves_arg2⁰, (fun xy⁶ -> 
//│ 	let _lh_matchIdent²⁰ = xy⁶
//│ 	in case _lh_matchIdent²⁰ of {
//│ 		LH_P2 _lh_rookmoves_LH_P2_0¹ _lh_rookmoves_LH_P2_1¹ => [LH_P2 (_lh_rookmoves_LH_P2_0¹ + 1) _lh_rookmoves_LH_P2_1¹]}), moveLine_lh_₁(_lh_rookmoves_arg3⁰, _lh_rookmoves_arg1⁰, _lh_rookmoves_arg2⁰, (fun xy⁷ -> 
//│ 	let _lh_matchIdent²¹ = xy⁷
//│ 	in case _lh_matchIdent²¹ of {
//│ 		LH_P2 _lh_rookmoves_LH_P2_0² _lh_rookmoves_LH_P2_1² => [LH_P2 _lh_rookmoves_LH_P2_0² (_lh_rookmoves_LH_P2_1² - 1)]}), moveLine_lh_₁(_lh_rookmoves_arg3⁰, _lh_rookmoves_arg1⁰, _lh_rookmoves_arg2⁰, (fun xy⁸ -> 
//│ 	let _lh_matchIdent²² = xy⁸
//│ 	in case _lh_matchIdent²² of {
//│ 		LH_P2 _lh_rookmoves_LH_P2_0³ _lh_rookmoves_LH_P2_1³ => [LH_P2 _lh_rookmoves_LH_P2_0³ (_lh_rookmoves_LH_P2_1³ + 1)]}), (fun x² -> x²)))), [LH_N])
//│ def rqpart_lh_₁(_lh_rqpart_arg1⁰, _lh_rqpart_arg2⁰, _lh_rqpart_arg3⁰, _lh_rqpart_arg4⁰, _lh_rqpart_arg5⁰, _lh_rqpart_arg6⁰) = case _lh_rqpart_arg3⁰ of {
//│ 	LH_N  => qsort_lh_₁(_lh_rqpart_arg1⁰, _lh_rqpart_arg4⁰, [LH_C _lh_rqpart_arg2⁰ qsort_lh_₁(_lh_rqpart_arg1⁰, _lh_rqpart_arg5⁰, _lh_rqpart_arg6⁰)])
//│ 	| LH_C _lh_rqpart_LH_C_0⁰ _lh_rqpart_LH_C_1⁰ => if _lh_rqpart_arg1⁰(_lh_rqpart_LH_C_0⁰, _lh_rqpart_arg2⁰) then rqpart_lh_₁(_lh_rqpart_arg1⁰, _lh_rqpart_arg2⁰, _lh_rqpart_LH_C_1⁰, [LH_C _lh_rqpart_LH_C_0⁰ _lh_rqpart_arg4⁰], _lh_rqpart_arg5⁰, _lh_rqpart_arg6⁰) else rqpart_lh_₁(_lh_rqpart_arg1⁰, _lh_rqpart_arg2⁰, _lh_rqpart_LH_C_1⁰, _lh_rqpart_arg4⁰, [LH_C _lh_rqpart_LH_C_0⁰ _lh_rqpart_arg5⁰], _lh_rqpart_arg6⁰)}
//│ def rqsort_lh_₁(_lh_rqsort_arg1⁰, _lh_rqsort_arg2⁰, _lh_rqsort_arg3⁰) = case _lh_rqsort_arg2⁰ of {
//│ 	LH_N  => _lh_rqsort_arg3⁰
//│ 	| LH_C _lh_rqsort_LH_C_0⁰ _lh_rqsort_LH_C_1⁰ => case _lh_rqsort_LH_C_1⁰ of {
//│ 		LH_N  => [LH_C _lh_rqsort_LH_C_0⁰ _lh_rqsort_arg3⁰]
//│ 		| _  => rqpart_lh_₁(_lh_rqsort_arg1⁰, _lh_rqsort_LH_C_0⁰, _lh_rqsort_LH_C_1⁰, [LH_N], [LH_N], _lh_rqsort_arg3⁰)}}
//│ def showBoard_lh_₁(_lh_showBoard_arg1⁰) = 
//│ 	let showRank⁰ = (fun r⁰ -> 
//│ 		let consFile⁰ = (fun f¹¹ -> (fun s⁰ -> 
//│ 			let _lh_matchIdent⁶² = pieceAt_lh_₁(_lh_showBoard_arg1⁰, [LH_P2 f¹¹ r⁰])
//│ 			in case _lh_matchIdent⁶² of {
//│ 				Nothing  => mappend_lh_₈([LH_C ' ' [LH_C '-' [LH_N]]], s⁰)
//│ 				| Just _lh_showBoard_Just_0⁰ => [LH_C ' ' [LH_C pieceToChar_lh_₁(_lh_showBoard_Just_0⁰) s⁰]]}))
//│ 		in foldr_lh_₁(consFile⁰, [LH_N], enumFromTo_lh_₂(1, 8)))
//│ 	in unlines_lh_₁(map_lh_₁(showRank⁰, reverse_lh_₁(enumFromTo_lh_₁(1, 8))))
//│ def showColour_lh_₁(_lh_showColour_arg1⁰) = case _lh_showColour_arg1⁰ of {
//│ 	Black  => [LH_C 'B' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_N]]]]]]
//│ 	| White  => [LH_C 'W' [LH_C 'h' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]}
//│ def showMoveInFull_lh_₁(_lh_showMoveInFull_arg1¹) = showMove_lh_₁([True], _lh_showMoveInFull_arg1¹)
//│ def showMoveInFull_lh_₂(_lh_showMoveInFull_arg1⁰) = showMove_lh_₁([True], _lh_showMoveInFull_arg1⁰)
//│ def showMove_lh_₁(_lh_showMove_arg1⁰, _lh_showMove_arg2⁰) = case _lh_showMove_arg2⁰ of {
//│ 	MoveInFull _lh_showMove_MoveInFull_0⁰ _lh_showMove_MoveInFull_1⁰ _lh_showMove_MoveInFull_2⁰ => case _lh_showMove_MoveInFull_0⁰ of {
//│ 		LH_P2 _lh_showMove_LH_P2_0⁰ _lh_showMove_LH_P2_1⁰ => case _lh_showMove_MoveInFull_2⁰ of {
//│ 			Move _lh_showMove_Move_0⁰ _lh_showMove_Move_1⁰ _lh_showMove_Move_2⁰ => 
//│ 				let capt⁰ = polyNeq⁰(_lh_showMove_Move_1⁰, [Nothing])
//│ 				in let prom⁰ = polyNeq⁰(_lh_showMove_Move_2⁰, [Nothing])
//│ 				in mappend_lh_₃₅(mappend_lh_₃₅(mappend_lh_₃₅(if _lh_showMove_arg1⁰ then mappend_lh_₃₅(mappend_lh_₃₅(showPiece_lh_₁([LH_P2 _lh_showMove_LH_P2_0⁰ _lh_showMove_LH_P2_1⁰]), if (polyEq⁰(_lh_showMove_LH_P2_1⁰, [King]) || (polyEq⁰(_lh_showMove_LH_P2_1⁰, [Pawn]) && not⁰((capt⁰ || prom⁰)))) then [LH_N] else [LH_C '/' [LH_N]]), showSquare_lh_₁(_lh_showMove_LH_P2_0⁰, _lh_showMove_MoveInFull_1⁰)) else [LH_N], maybe_lh_₃([LH_C '-' [LH_N]], (fun cp⁰ -> mappend_lh_₃₅(mappend_lh_₃₅([LH_C 'x' [LH_N]], showPiece_lh_₁(cp⁰)), [LH_C '/' [LH_N]])), _lh_showMove_Move_1⁰)), showSquare_lh_₁(_lh_showMove_LH_P2_0⁰, _lh_showMove_Move_0⁰)), maybe_lh_₃([LH_N], (fun pp⁰ -> mappend_lh_₃₅(mappend_lh_₃₅([LH_C '(' [LH_N]], showPiece_lh_₁(pp⁰)), [LH_C ')' [LH_N]])), _lh_showMove_Move_2⁰))}}}
//│ def showMovesAfter_lh_₁(_lh_showMovesAfter_arg1⁰, _lh_showMovesAfter_arg2⁰) = case _lh_showMovesAfter_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| _  => case _lh_showMovesAfter_arg1⁰ of {
//│ 		MoveInFull _lh_showMovesAfter_MoveInFull_0⁰ _lh_showMovesAfter_MoveInFull_1⁰ _lh_showMovesAfter_MoveInFull_2⁰ => case _lh_showMovesAfter_arg2⁰ of {
//│ 			LH_C _lh_showMovesAfter_LH_C_0⁰ _lh_showMovesAfter_LH_C_1⁰ => case _lh_showMovesAfter_LH_C_0⁰ of {
//│ 				MoveInFull _lh_showMovesAfter_MoveInFull_0¹ _lh_showMovesAfter_MoveInFull_1¹ _lh_showMovesAfter_MoveInFull_2¹ => mappend_lh_₃₅(mappend_lh_₃₅([LH_C ',' [LH_C ' ' [LH_N]]], showMove_lh_₁((polyNeq⁰(_lh_showMovesAfter_MoveInFull_0¹, _lh_showMovesAfter_MoveInFull_0⁰) || polyNeq⁰(_lh_showMovesAfter_MoveInFull_1¹, _lh_showMovesAfter_MoveInFull_1⁰)), [MoveInFull _lh_showMovesAfter_MoveInFull_0¹ _lh_showMovesAfter_MoveInFull_1¹ _lh_showMovesAfter_MoveInFull_2¹])), showMovesAfter_lh_₁([MoveInFull _lh_showMovesAfter_MoveInFull_0¹ _lh_showMovesAfter_MoveInFull_1¹ _lh_showMovesAfter_MoveInFull_2¹], _lh_showMovesAfter_LH_C_1⁰))}}}}
//│ def showMoves_lh_₁(_lh_showMoves_arg1³) = case _lh_showMoves_arg1³ of {
//│ 	LH_C _lh_showMoves_LH_C_0³ _lh_showMoves_LH_C_1³ => mappend_lh_₂₀(showMoveInFull_lh_₂(_lh_showMoves_LH_C_0³), showMovesAfter_lh_₁(_lh_showMoves_LH_C_0³, _lh_showMoves_LH_C_1³))
//│ 	| LH_N  => error⁰}
//│ def showMoves_lh_₂(_lh_showMoves_arg1²) = case _lh_showMoves_arg1² of {
//│ 	LH_C _lh_showMoves_LH_C_0² _lh_showMoves_LH_C_1² => mappend_lh_₃₅(showMoveInFull_lh_₂(_lh_showMoves_LH_C_0²), showMovesAfter_lh_₁(_lh_showMoves_LH_C_0², _lh_showMoves_LH_C_1²))
//│ 	| LH_N  => error⁰}
//│ def showMoves_lh_₃(_lh_showMoves_arg1¹) = case _lh_showMoves_arg1¹ of {
//│ 	LH_C _lh_showMoves_LH_C_0¹ _lh_showMoves_LH_C_1¹ => mappend_lh_₃₅(showMoveInFull_lh_₂(_lh_showMoves_LH_C_0¹), showMovesAfter_lh_₁(_lh_showMoves_LH_C_0¹, _lh_showMoves_LH_C_1¹))
//│ 	| LH_N  => error⁰}
//│ def showMoves_lh_₄(_lh_showMoves_arg1⁰) = case _lh_showMoves_arg1⁰ of {
//│ 	LH_C _lh_showMoves_LH_C_0⁰ _lh_showMoves_LH_C_1⁰ => mappend_lh_₃₅(showMoveInFull_lh_₂(_lh_showMoves_LH_C_0⁰), showMovesAfter_lh_₁(_lh_showMoves_LH_C_0⁰, _lh_showMoves_LH_C_1⁰))
//│ 	| LH_N  => error⁰}
//│ def showPiece_lh_₁(_lh_showPiece_arg1⁰) = case _lh_showPiece_arg1⁰ of {
//│ 	LH_P2 _lh_showPiece_LH_P2_0⁰ _lh_showPiece_LH_P2_1⁰ => [LH_C kindToChar_lh_₂(_lh_showPiece_LH_P2_1⁰) [LH_N]]}
//│ def showReplies_lh_₁(_lh_showReplies_arg1², _lh_showReplies_arg2²) = case _lh_showReplies_arg1² of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_showReplies_LH_C_0² _lh_showReplies_LH_C_1² => case _lh_showReplies_LH_C_0² of {
//│ 		LH_P2 _lh_showReplies_LH_P2_0² _lh_showReplies_LH_P2_1² => mappend_lh_₂₄(mappend_lh_₂₁(mappend_lh_₂₅(mappend_lh_₂₂(mappend_lh_₂₃(tab_lh_₁(_lh_showReplies_arg2²), [LH_C 'i' [LH_C 'f' [LH_C ' ' [LH_N]]]]), if (null_lh_₂(_lh_showReplies_LH_C_1²) && (length_lh_₈(_lh_showReplies_LH_P2_0²) > 1)) then [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_N]]]]]]] else showMoves_lh_₂(_lh_showReplies_LH_P2_0²)), [LH_C ';' [LH_C ' ' [LH_N]]]), showSoln_lh_₁(_lh_showReplies_LH_P2_1², (_lh_showReplies_arg2² + 1))), showReplies_lh_₁(_lh_showReplies_LH_C_1², _lh_showReplies_arg2²))}}
//│ def showReplies_lh_₂(_lh_showReplies_arg1¹, _lh_showReplies_arg2¹) = case _lh_showReplies_arg1¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_showReplies_LH_C_0¹ _lh_showReplies_LH_C_1¹ => case _lh_showReplies_LH_C_0¹ of {
//│ 		LH_P2 _lh_showReplies_LH_P2_0¹ _lh_showReplies_LH_P2_1¹ => mappend_lh_₃₀(mappend_lh_₂₆(mappend_lh_₂₈(mappend_lh_₂₇(mappend_lh_₂₉(tab_lh_₂(_lh_showReplies_arg2¹), [LH_C 'i' [LH_C 'f' [LH_C ' ' [LH_N]]]]), if (null_lh_₃(_lh_showReplies_LH_C_1¹) && (length_lh_₉(_lh_showReplies_LH_P2_0¹) > 1)) then [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_N]]]]]]] else showMoves_lh_₃(_lh_showReplies_LH_P2_0¹)), [LH_C ';' [LH_C ' ' [LH_N]]]), showSoln_lh_₁(_lh_showReplies_LH_P2_1¹, (_lh_showReplies_arg2¹ + 1))), showReplies_lh_₂(_lh_showReplies_LH_C_1¹, _lh_showReplies_arg2¹))}}
//│ def showReplies_lh_₃(_lh_showReplies_arg1⁰, _lh_showReplies_arg2⁰) = case _lh_showReplies_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_showReplies_LH_C_0⁰ _lh_showReplies_LH_C_1⁰ => case _lh_showReplies_LH_C_0⁰ of {
//│ 		LH_P2 _lh_showReplies_LH_P2_0⁰ _lh_showReplies_LH_P2_1⁰ => mappend_lh_₃₄(mappend_lh_₃₃(mappend_lh_₃₅(mappend_lh_₃₂(mappend_lh_₃₁(tab_lh_₃(_lh_showReplies_arg2⁰), [LH_C 'i' [LH_C 'f' [LH_C ' ' [LH_N]]]]), if (null_lh_₄(_lh_showReplies_LH_C_1⁰) && (length_lh_₁₀(_lh_showReplies_LH_P2_0⁰) > 1)) then [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_N]]]]]]] else showMoves_lh_₄(_lh_showReplies_LH_P2_0⁰)), [LH_C ';' [LH_C ' ' [LH_N]]]), showSoln_lh_₁(_lh_showReplies_LH_P2_1⁰, (_lh_showReplies_arg2⁰ + 1))), showReplies_lh_₃(_lh_showReplies_LH_C_1⁰, _lh_showReplies_arg2⁰))}}
//│ def showResult_lh_₁(_lh_showResult_arg1⁰) = case _lh_showResult_arg1⁰ of {
//│ 	Nothing  => [LH_C 'N' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '!' [LH_N]]]]]]]]]]]]]
//│ 	| Just _lh_showResult_Just_0⁰ => showSoln_lh_₁(compact_lh_₁(_lh_showResult_Just_0⁰), 1)}
//│ def showSoln_lh_₁(_lh_showSoln_arg1², _lh_showSoln_arg2²) = case _lh_showSoln_arg1² of {
//│ 	Soln _lh_showSoln_Soln_0² _lh_showSoln_Soln_1² => mappend_lh_₁₄(mappend_lh_₁₂(mappend_lh_₁₁(string_of_int⁰(_lh_showSoln_arg2²), [LH_C '.' [LH_C ' ' [LH_N]]]), showMoveInFull_lh_₁(_lh_showSoln_Soln_0²)), 
//│ 		let _lh_matchIdent⁵⁵ = _lh_showSoln_Soln_1²
//│ 		in case _lh_matchIdent⁵⁵ of {
//│ 			LH_N  => [LH_C '+' [LH_C '+' [LH_C '|' [LH_N]]]]
//│ 			| LH_C _lh_showSoln_LH_C_0² _lh_showSoln_LH_C_1² => case _lh_showSoln_LH_C_0² of {
//│ 				LH_P2 _lh_showSoln_LH_P2_0² _lh_showSoln_LH_P2_1² => case _lh_showSoln_LH_C_1² of {
//│ 					LH_N  => mappend_lh_₁₃(mappend_lh_₁₀(mappend_lh_₁₇([LH_C ',' [LH_C ' ' [LH_N]]], if (length_lh_₁(_lh_showSoln_LH_P2_0²) > 1) then [LH_C '.' [LH_C '.' [LH_C '.' [LH_N]]]] else showMoves_lh_₁(_lh_showSoln_LH_P2_0²)), [LH_C ';' [LH_C ' ' [LH_N]]]), showSoln_lh_₁(_lh_showSoln_LH_P2_1², (_lh_showSoln_arg2² + 1)))
//│ 					| _  => mappend_lh_₁₅([LH_C ',' [LH_C '|' [LH_N]]], showReplies_lh_₁(sort_lh_₃(_lh_showSoln_Soln_1²), _lh_showSoln_arg2²))}
//│ 				| _  => mappend_lh_₁₈([LH_C ',' [LH_C '|' [LH_N]]], showReplies_lh_₂(sort_lh_₂(_lh_showSoln_Soln_1²), _lh_showSoln_arg2²))}
//│ 			| _  => mappend_lh_₁₆([LH_C ',' [LH_C '|' [LH_N]]], showReplies_lh_₃(sort_lh_₁(_lh_showSoln_Soln_1²), _lh_showSoln_arg2²))})}
//│ def showSoln_lh_₂(_lh_showSoln_arg1¹, _lh_showSoln_arg2¹) = case _lh_showSoln_arg1¹ of {
//│ 	Soln _lh_showSoln_Soln_0¹ _lh_showSoln_Soln_1¹ => mappend_lh_₃₅(mappend_lh_₃₅(mappend_lh_₃₅(string_of_int⁰(_lh_showSoln_arg2¹), [LH_C '.' [LH_C ' ' [LH_N]]]), showMoveInFull_lh_₂(_lh_showSoln_Soln_0¹)), 
//│ 		let _lh_matchIdent²⁴ = _lh_showSoln_Soln_1¹
//│ 		in case _lh_matchIdent²⁴ of {
//│ 			LH_N  => [LH_C '+' [LH_C '+' [LH_C '|' [LH_N]]]]
//│ 			| LH_C _lh_showSoln_LH_C_0¹ _lh_showSoln_LH_C_1¹ => case _lh_showSoln_LH_C_0¹ of {
//│ 				LH_P2 _lh_showSoln_LH_P2_0¹ _lh_showSoln_LH_P2_1¹ => case _lh_showSoln_LH_C_1¹ of {
//│ 					LH_N  => mappend_lh_₃₅(mappend_lh_₃₅(mappend_lh_₃₅([LH_C ',' [LH_C ' ' [LH_N]]], if (length_lh_₁₀(_lh_showSoln_LH_P2_0¹) > 1) then [LH_C '.' [LH_C '.' [LH_C '.' [LH_N]]]] else showMoves_lh_₄(_lh_showSoln_LH_P2_0¹)), [LH_C ';' [LH_C ' ' [LH_N]]]), showSoln_lh_₂(_lh_showSoln_LH_P2_1¹, (_lh_showSoln_arg2¹ + 1)))
//│ 					| _  => mappend_lh_₃₅([LH_C ',' [LH_C '|' [LH_N]]], showReplies_lh_₃(sort_lh_₃(_lh_showSoln_Soln_1¹), _lh_showSoln_arg2¹))}
//│ 				| _  => mappend_lh_₃₅([LH_C ',' [LH_C '|' [LH_N]]], showReplies_lh_₃(sort_lh_₃(_lh_showSoln_Soln_1¹), _lh_showSoln_arg2¹))}
//│ 			| _  => mappend_lh_₃₅([LH_C ',' [LH_C '|' [LH_N]]], showReplies_lh_₃(sort_lh_₃(_lh_showSoln_Soln_1¹), _lh_showSoln_arg2¹))})}
//│ def showSoln_lh_₃(_lh_showSoln_arg1⁰, _lh_showSoln_arg2⁰) = case _lh_showSoln_arg1⁰ of {
//│ 	Soln _lh_showSoln_Soln_0⁰ _lh_showSoln_Soln_1⁰ => mappend_lh_₃₅(mappend_lh_₃₅(mappend_lh_₃₅(string_of_int⁰(_lh_showSoln_arg2⁰), [LH_C '.' [LH_C ' ' [LH_N]]]), showMoveInFull_lh_₂(_lh_showSoln_Soln_0⁰)), 
//│ 		let _lh_matchIdent²³ = _lh_showSoln_Soln_1⁰
//│ 		in case _lh_matchIdent²³ of {
//│ 			LH_N  => [LH_C '+' [LH_C '+' [LH_C '|' [LH_N]]]]
//│ 			| LH_C _lh_showSoln_LH_C_0⁰ _lh_showSoln_LH_C_1⁰ => case _lh_showSoln_LH_C_0⁰ of {
//│ 				LH_P2 _lh_showSoln_LH_P2_0⁰ _lh_showSoln_LH_P2_1⁰ => case _lh_showSoln_LH_C_1⁰ of {
//│ 					LH_N  => mappend_lh_₃₅(mappend_lh_₃₅(mappend_lh_₃₅([LH_C ',' [LH_C ' ' [LH_N]]], if (length_lh_₁₀(_lh_showSoln_LH_P2_0⁰) > 1) then [LH_C '.' [LH_C '.' [LH_C '.' [LH_N]]]] else showMoves_lh_₄(_lh_showSoln_LH_P2_0⁰)), [LH_C ';' [LH_C ' ' [LH_N]]]), showSoln_lh_₃(_lh_showSoln_LH_P2_1⁰, (_lh_showSoln_arg2⁰ + 1)))
//│ 					| _  => mappend_lh_₃₅([LH_C ',' [LH_C '|' [LH_N]]], showReplies_lh_₃(sort_lh_₃(_lh_showSoln_Soln_1⁰), _lh_showSoln_arg2⁰))}
//│ 				| _  => mappend_lh_₃₅([LH_C ',' [LH_C '|' [LH_N]]], showReplies_lh_₃(sort_lh_₃(_lh_showSoln_Soln_1⁰), _lh_showSoln_arg2⁰))}
//│ 			| _  => mappend_lh_₃₅([LH_C ',' [LH_C '|' [LH_N]]], showReplies_lh_₃(sort_lh_₃(_lh_showSoln_Soln_1⁰), _lh_showSoln_arg2⁰))})}
//│ def showSquare_lh_₁(_lh_showSquare_arg1⁰, _lh_showSquare_arg2⁰) = case _lh_showSquare_arg2⁰ of {
//│ 	LH_P2 _lh_showSquare_LH_P2_0⁰ _lh_showSquare_LH_P2_1⁰ => mappend_lh_₃₅(atIndex_lh_₁((_lh_showSquare_LH_P2_0⁰ - 1), [LH_C [LH_C 'Q' [LH_C 'R' [LH_N]]] [LH_C [LH_C 'Q' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'Q' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'Q' [LH_N]] [LH_C [LH_C 'K' [LH_N]] [LH_C [LH_C 'K' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]]]]]]]]), string_of_int⁰(
//│ 		let _lh_matchIdent³ = _lh_showSquare_arg1⁰
//│ 		in case _lh_matchIdent³ of {
//│ 			Black  => (9 - _lh_showSquare_LH_P2_1⁰)
//│ 			| White  => _lh_showSquare_LH_P2_1⁰}))}
//│ def sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_arg4⁰) = case _lh_sift_arg4⁰ of {
//│ 	LH_N  => _lh_sift_arg3⁰
//│ 	| LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then 
//│ 		let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ 		in case _lh_matchIdent² of {
//│ 			Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)
//│ 			| Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}
//│ def solution_lh_₁(_lh_solution_arg1⁰, _lh_solution_arg2⁰, _lh_solution_arg3⁰) = 
//│ 	let solnOr⁰ = (fun mifb¹ -> (fun other⁰ -> 
//│ 		let _lh_matchIdent⁶⁰ = mifb¹
//│ 		in case _lh_matchIdent⁶⁰ of {
//│ 			LH_P2 _lh_solution_LH_P2_0⁰ _lh_solution_LH_P2_1⁰ => 
//│ 				let rsm⁰ = replies_lh_₁(_lh_solution_LH_P2_1⁰, opponent_lh_₂(_lh_solution_arg2⁰), (_lh_solution_arg3⁰ - 1))
//│ 				in let _lh_matchIdent⁶¹ = rsm⁰
//│ 				in case _lh_matchIdent⁶¹ of {
//│ 					Nothing  => other⁰
//│ 					| Just _lh_solution_Just_0⁰ => case _lh_solution_Just_0⁰ of {
//│ 						LH_N  => if kingincheck_lh_₁(opponent_lh_₁(_lh_solution_arg2⁰), _lh_solution_LH_P2_1⁰) then [Just [Solution _lh_solution_LH_P2_0⁰ [LH_N]]] else other⁰
//│ 						| _  => [Just [Solution _lh_solution_LH_P2_0⁰ _lh_solution_Just_0⁰]]}}}))
//│ 	in if (_lh_solution_arg3⁰ > 0) then 
//│ 		let mds¹ = moveDetailsFor_lh_₁(_lh_solution_arg2⁰, _lh_solution_arg1⁰)
//│ 		in foldr_lh_₂(solnOr⁰, [Nothing], mds¹) else error⁰([LH_C 'n' [LH_C ' ' [LH_C '<' [LH_C '=' [LH_C ' ' [LH_C '0' [LH_N]]]]]]])
//│ def solve_lh_₁(_lh_solve_arg1⁰, _lh_solve_arg2⁰, _lh_solve_arg3⁰) = showResult_lh_₁(solution_lh_₁(_lh_solve_arg1⁰, _lh_solve_arg2⁰, ((2 * _lh_solve_arg3⁰) - 1)))
//│ def sort_lh_₁(_lh_sort_arg1²) = qsort_lh_₁((fun a³ -> (fun b⁷ -> 
//│ 	let _lh_matchIdent³⁶ = a³
//│ 	in case _lh_matchIdent³⁶ of {
//│ 		LH_P2 _lh_sort_LH_P2_0⁴ _lh_sort_LH_P2_1⁴ => 
//│ 			let _lh_matchIdent³⁷ = b⁷
//│ 			in case _lh_matchIdent³⁷ of {
//│ 				LH_P2 _lh_sort_LH_P2_0⁵ _lh_sort_LH_P2_1⁵ => (length_lh_₂(_lh_sort_LH_P2_0⁴) <= length_lh_₃(_lh_sort_LH_P2_0⁵))}})), _lh_sort_arg1², [LH_N])
//│ def sort_lh_₂(_lh_sort_arg1¹) = qsort_lh_₂((fun a² -> (fun b⁶ -> 
//│ 	let _lh_matchIdent³⁴ = a²
//│ 	in case _lh_matchIdent³⁴ of {
//│ 		LH_P2 _lh_sort_LH_P2_0² _lh_sort_LH_P2_1² => 
//│ 			let _lh_matchIdent³⁵ = b⁶
//│ 			in case _lh_matchIdent³⁵ of {
//│ 				LH_P2 _lh_sort_LH_P2_0³ _lh_sort_LH_P2_1³ => (length_lh_₄(_lh_sort_LH_P2_0²) <= length_lh_₅(_lh_sort_LH_P2_0³))}})), _lh_sort_arg1¹, [LH_N])
//│ def sort_lh_₃(_lh_sort_arg1⁰) = qsort_lh_₃((fun a¹ -> (fun b⁵ -> 
//│ 	let _lh_matchIdent³² = a¹
//│ 	in case _lh_matchIdent³² of {
//│ 		LH_P2 _lh_sort_LH_P2_0⁰ _lh_sort_LH_P2_1⁰ => 
//│ 			let _lh_matchIdent³³ = b⁵
//│ 			in case _lh_matchIdent³³ of {
//│ 				LH_P2 _lh_sort_LH_P2_0¹ _lh_sort_LH_P2_1¹ => (length_lh_₆(_lh_sort_LH_P2_0⁰) <= length_lh_₇(_lh_sort_LH_P2_0¹))}})), _lh_sort_arg1⁰, [LH_N])
//│ def splitAt_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) = [LH_P2 take_lh_₂(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]
//│ def tab_lh_₁(_lh_tab_arg1²) = if (_lh_tab_arg1² <= 0) then [LH_N] else [LH_C ' ' tab_lh_₁((_lh_tab_arg1² - 1))]
//│ def tab_lh_₂(_lh_tab_arg1¹) = if (_lh_tab_arg1¹ <= 0) then [LH_N] else [LH_C ' ' tab_lh_₂((_lh_tab_arg1¹ - 1))]
//│ def tab_lh_₃(_lh_tab_arg1⁰) = if (_lh_tab_arg1⁰ <= 0) then [LH_N] else [LH_C ' ' tab_lh_₃((_lh_tab_arg1⁰ - 1))]
//│ def take_lh_₁(n², ls¹¹) = if (n² > 0) then case ls¹¹ of {
//│ 	LH_C h²⁷ t²⁷ => [LH_C h²⁷ take_lh_₁((n² - 1), t²⁷)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lh_₂(n¹, ls¹⁰) = if (n¹ > 0) then case ls¹⁰ of {
//│ 	LH_C h²⁶ t²⁶ => [LH_C h²⁶ take_lh_₂((n¹ - 1), t²⁶)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testMate_nofib_lh_₁(_lh_testMate_nofib_arg1⁰) = 
//│ 	let input⁰ = primId⁰([LH_C '-' [LH_C '-' [LH_C ' ' [LH_C 'A' [LH_C '.' [LH_C ' ' [LH_C 'E' [LH_C 'l' [LH_C 'l' [LH_C 'e' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'n' [LH_C '|' [LH_C '-' [LH_C '-' [LH_C ' ' [LH_C '1' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'z' [LH_C 'e' [LH_C ',' [LH_C ' ' [LH_C 'L' [LH_C 'u' [LH_C 'i' [LH_C 'g' [LH_C 'i' [LH_C ' ' [LH_C 'C' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'u' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'i' [LH_C ',' [LH_C ' ' [LH_C 'G' [LH_C 'e' [LH_C 'n' [LH_C 'o' [LH_C 'a' [LH_C ',' [LH_C ' ' [LH_C '1' [LH_C '9' [LH_C '2' [LH_C '5' [LH_C '|' [LH_C '-' [LH_C '-' [LH_C ' ' [LH_C '`' [LH_C 'O' [LH_C 'n' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C 'y' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C 'r' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'w' [LH_C 'o' [LH_C '-' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_C ',' [LH_C '|' [LH_C '-' [LH_C '-' [LH_C ' ' [LH_C 'u' [LH_C 'n' [LH_C 's' [LH_C 'u' [LH_C 'r' [LH_C 'p' [LH_C 'a' [LH_C 's' [LH_C 's' [LH_C 'e' [LH_C 'd' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 'a' [LH_C 'u' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 'i' [LH_C 'd' [LH_C 'e' [LH_C 'a' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C '|' [LH_C '-' [LH_C '-' [LH_C ' ' [LH_C 'e' [LH_C 'x' [LH_C 'e' [LH_C 'c' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C ' ' [LH_C '(' [LH_C 'P' [LH_C 'h' [LH_C 'i' [LH_C 'l' [LH_C 'l' [LH_C 'i' [LH_C 'p' [LH_C 's' [LH_C ')' [LH_C '|' [LH_C '|' [LH_C 'b' [LH_C ' ' [LH_C 'k' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '|' [LH_C '-' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C 'p' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '|' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '|' [LH_C 'r' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C 'p' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '|' [LH_C 'R' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C 'K' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '|' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C 'r' [LH_C ' ' [LH_C 'P' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C 'p' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '|' [LH_C '-' [LH_C ' ' [LH_C 'Q' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '|' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C 'q' [LH_C ' ' [LH_C 'B' [LH_C ' ' [LH_C 'B' [LH_C ' ' [LH_C '|' [LH_C '|' [LH_C 'W' [LH_C 'h' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'p' [LH_C 'l' [LH_C 'a' [LH_C 'y' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C '2' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 	in let bdcn⁰ = readProblem_lh_₁(input⁰)
//│ 	in let _lh_matchIdent⁶³ = bdcn⁰
//│ 	in case _lh_matchIdent⁶³ of {
//│ 		LH_P2 _lh_testMate_nofib_LH_P2_0⁰ _lh_testMate_nofib_LH_P2_1⁰ => case _lh_testMate_nofib_LH_P2_1⁰ of {
//│ 			LH_P2 _lh_testMate_nofib_LH_P2_0¹ _lh_testMate_nofib_LH_P2_1¹ => mappend_lh_₅(mappend_lh_₂(mappend_lh_₆(mappend_lh_₇(mappend_lh_₃(mappend_lh_₁(mappend_lh_₄(showBoard_lh_₁(_lh_testMate_nofib_LH_P2_0⁰), [LH_C '|' [LH_N]]), showColour_lh_₁(_lh_testMate_nofib_LH_P2_0¹)), [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]), string_of_int⁰(_lh_testMate_nofib_LH_P2_1¹)), [LH_C '|' [LH_N]]), [LH_C '|' [LH_N]]), solve_lh_₁(_lh_testMate_nofib_LH_P2_0⁰, _lh_testMate_nofib_LH_P2_0¹, _lh_testMate_nofib_LH_P2_1¹))}}
//│ def toLower_lh_₁(_lh_toLower_arg1⁰) = 
//│ 	let _lh_matchIdent⁴³ = _lh_toLower_arg1⁰
//│ 	in case _lh_matchIdent⁴³ of {
//│ 		'A'  => 'a'
//│ 		| 'B'  => 'b'
//│ 		| 'C'  => 'c'
//│ 		| 'D'  => 'd'
//│ 		| 'E'  => 'e'
//│ 		| 'F'  => 'f'
//│ 		| 'G'  => 'g'
//│ 		| 'H'  => 'h'
//│ 		| 'I'  => 'i'
//│ 		| 'J'  => 'j'
//│ 		| 'K'  => 'k'
//│ 		| 'L'  => 'l'
//│ 		| 'M'  => 'm'
//│ 		| 'N'  => 'n'
//│ 		| 'O'  => 'o'
//│ 		| 'P'  => 'p'
//│ 		| 'Q'  => 'q'
//│ 		| 'R'  => 'r'
//│ 		| 'S'  => 's'
//│ 		| 'T'  => 't'
//│ 		| 'U'  => 'u'
//│ 		| 'V'  => 'v'
//│ 		| 'W'  => 'w'
//│ 		| 'X'  => 'x'
//│ 		| 'Y'  => 'y'
//│ 		| 'Z'  => 'z'
//│ 		| _  => _lh_matchIdent⁴³}
//│ def tryMove_lh_₁(_lh_tryMove_arg1¹, _lh_tryMove_arg2¹, _lh_tryMove_arg3¹, _lh_tryMove_arg4¹) = case _lh_tryMove_arg2¹ of {
//│ 	LH_P2 _lh_tryMove_LH_P2_0¹ _lh_tryMove_LH_P2_1¹ => case _lh_tryMove_arg3¹ of {
//│ 		Move _lh_tryMove_Move_0¹ _lh_tryMove_Move_1¹ _lh_tryMove_Move_2¹ => 
//│ 			let p¹ = [LH_P2 _lh_tryMove_arg1¹ _lh_tryMove_LH_P2_0¹]
//│ 			in let bd1¹ = rmPieceAt_lh_₁(_lh_tryMove_arg1¹, _lh_tryMove_LH_P2_1¹, _lh_tryMove_arg4¹)
//│ 			in let p'¹ = maybe_lh_₂(p¹, (fun x⁷ -> x⁷), _lh_tryMove_Move_2¹)
//│ 			in let bd2¹ = maybe_lh_₃(putPieceAt_lh_₂(_lh_tryMove_Move_0¹, p'¹, bd1¹), (fun _dummy¹ -> putPieceAt_lh_₃(_lh_tryMove_Move_0¹, p'¹, rmPieceAt_lh_₂(opponent_lh_₅(_lh_tryMove_arg1¹), _lh_tryMove_Move_0¹, bd1¹))), _lh_tryMove_Move_1¹)
//│ 			in if not⁰(kingincheck_lh_₂(_lh_tryMove_arg1¹, bd2¹)) then [Just [LH_P2 [MoveInFull p¹ _lh_tryMove_LH_P2_1¹ [Move _lh_tryMove_Move_0¹ _lh_tryMove_Move_1¹ _lh_tryMove_Move_2¹]] bd2¹]] else [Nothing]}}
//│ def tryMove_lh_₂(_lh_tryMove_arg1⁰, _lh_tryMove_arg2⁰, _lh_tryMove_arg3⁰, _lh_tryMove_arg4⁰) = case _lh_tryMove_arg2⁰ of {
//│ 	LH_P2 _lh_tryMove_LH_P2_0⁰ _lh_tryMove_LH_P2_1⁰ => case _lh_tryMove_arg3⁰ of {
//│ 		Move _lh_tryMove_Move_0⁰ _lh_tryMove_Move_1⁰ _lh_tryMove_Move_2⁰ => 
//│ 			let p⁰ = [LH_P2 _lh_tryMove_arg1⁰ _lh_tryMove_LH_P2_0⁰]
//│ 			in let bd1⁰ = rmPieceAt_lh_₂(_lh_tryMove_arg1⁰, _lh_tryMove_LH_P2_1⁰, _lh_tryMove_arg4⁰)
//│ 			in let p'⁰ = maybe_lh_₃(p⁰, (fun x⁰ -> x⁰), _lh_tryMove_Move_2⁰)
//│ 			in let bd2⁰ = maybe_lh_₃(putPieceAt_lh_₃(_lh_tryMove_Move_0⁰, p'⁰, bd1⁰), (fun _dummy⁰ -> putPieceAt_lh_₃(_lh_tryMove_Move_0⁰, p'⁰, rmPieceAt_lh_₂(opponent_lh_₅(_lh_tryMove_arg1⁰), _lh_tryMove_Move_0⁰, bd1⁰))), _lh_tryMove_Move_1⁰)
//│ 			in if not⁰(kingincheck_lh_₂(_lh_tryMove_arg1⁰, bd2⁰)) then [Just [LH_P2 [MoveInFull p⁰ _lh_tryMove_LH_P2_1⁰ [Move _lh_tryMove_Move_0⁰ _lh_tryMove_Move_1⁰ _lh_tryMove_Move_2⁰]] bd2⁰]] else [Nothing]}}
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = concat_lh_₁(map_lh_₂((fun l⁰ -> mappend_lh_₉(l⁰, [LH_C '|' [LH_N]])), _lh_unlines_arg1⁰))
//│ def words_lh_₁(_lh_words_arg1⁰) = 
//│ 	let _lh_matchIdent²⁵ = dropWhile_lh_₁((fun x⁴ -> polyEq⁰(x⁴, ' ')), _lh_words_arg1⁰)
//│ 	in case _lh_matchIdent²⁵ of {
//│ 		LH_N  => [LH_N]
//│ 		| _  => 
//│ 			let _lh_matchIdent²⁶ = break_lh_₁((fun x⁵ -> polyEq⁰(x⁵, ' ')), _lh_matchIdent²⁵)
//│ 			in case _lh_matchIdent²⁶ of {
//│ 				LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)]}}
//│ def zipWith_lh_₁(f¹, xs¹⁶, ys¹⁶) = case xs¹⁶ of {
//│ 	LH_C hx⁰ tx⁰ => case ys¹⁶ of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lh_₁(f¹, tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec mappend_lh__d3 xs_3_3 ys_3_3 =
//│ 		  (match xs_3_3 with
//│ 		    | `LH_C(h_6_1, t_6_1) -> 
//│ 		      (`LH_C(h_6_1, ((mappend_lh__d3 t_6_1) ys_3_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_3_3);;
//│ 		let rec mappend_lh__d1 xs_3_5 ys_3_5 =
//│ 		  (match xs_3_5 with
//│ 		    | `LH_C(h_6_3, t_6_3) -> 
//│ 		      (`LH_C(h_6_3, ((mappend_lh__d1 t_6_3) ys_3_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_3_5);;
//│ 		let rec showColour_lh__d1 _lh_showColour_arg1_0 =
//│ 		  (match _lh_showColour_arg1_0 with
//│ 		    | `Black -> 
//│ 		      (`LH_C('B', (`LH_C('l', (`LH_C('a', (`LH_C('c', (`LH_C('k', (`LH_N)))))))))))
//│ 		    | `White -> 
//│ 		      (`LH_C('W', (`LH_C('h', (`LH_C('i', (`LH_C('t', (`LH_C('e', (`LH_N))))))))))));;
//│ 		let rec mappend_lh__d1_d6 xs_2_0 ys_2_0 =
//│ 		  (match xs_2_0 with
//│ 		    | `LH_C(h_3_8, t_3_8) -> 
//│ 		      (`LH_C(h_3_8, ((mappend_lh__d1_d6 t_3_8) ys_2_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_0);;
//│ 		let rec mappend_lh__d1_d8 xs_1_8 ys_1_8 =
//│ 		  (match xs_1_8 with
//│ 		    | `LH_C(h_3_6, t_3_6) -> 
//│ 		      (`LH_C(h_3_6, ((mappend_lh__d1_d8 t_3_6) ys_1_8)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_8);;
//│ 		let rec qpart_lh__d1 _lh_qpart_arg1_0 _lh_qpart_arg2_0 _lh_qpart_arg3_0 _lh_qpart_arg4_0 _lh_qpart_arg5_0 _lh_qpart_arg6_0 =
//│ 		  (match _lh_qpart_arg3_0 with
//│ 		    | `LH_N -> 
//│ 		      (((rqsort_lh__d1 _lh_qpart_arg1_0) _lh_qpart_arg4_0) (`LH_C(_lh_qpart_arg2_0, (((rqsort_lh__d1 _lh_qpart_arg1_0) _lh_qpart_arg5_0) _lh_qpart_arg6_0))))
//│ 		    | `LH_C(_lh_qpart_LH_C_0_0, _lh_qpart_LH_C_1_0) -> 
//│ 		      (if ((_lh_qpart_arg1_0 _lh_qpart_arg2_0) _lh_qpart_LH_C_0_0) then
//│ 		        ((((((qpart_lh__d1 _lh_qpart_arg1_0) _lh_qpart_arg2_0) _lh_qpart_LH_C_1_0) _lh_qpart_arg4_0) (`LH_C(_lh_qpart_LH_C_0_0, _lh_qpart_arg5_0))) _lh_qpart_arg6_0)
//│ 		      else
//│ 		        ((((((qpart_lh__d1 _lh_qpart_arg1_0) _lh_qpart_arg2_0) _lh_qpart_LH_C_1_0) (`LH_C(_lh_qpart_LH_C_0_0, _lh_qpart_arg4_0))) _lh_qpart_arg5_0) _lh_qpart_arg6_0)))
//│ 		and
//│ 		qsort_lh__d1 _lh_qsort_arg1_2 _lh_qsort_arg2_2 _lh_qsort_arg3_2 =
//│ 		  (match _lh_qsort_arg2_2 with
//│ 		    | `LH_N -> 
//│ 		      _lh_qsort_arg3_2
//│ 		    | `LH_C(_lh_qsort_LH_C_0_2, _lh_qsort_LH_C_1_2) -> 
//│ 		      (match _lh_qsort_LH_C_1_2 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_C(_lh_qsort_LH_C_0_2, _lh_qsort_arg3_2))
//│ 		        | _ -> 
//│ 		          ((((((qpart_lh__d1 _lh_qsort_arg1_2) _lh_qsort_LH_C_0_2) _lh_qsort_LH_C_1_2) (`LH_N)) (`LH_N)) _lh_qsort_arg3_2)))
//│ 		and
//│ 		rqpart_lh__d1 _lh_rqpart_arg1_0 _lh_rqpart_arg2_0 _lh_rqpart_arg3_0 _lh_rqpart_arg4_0 _lh_rqpart_arg5_0 _lh_rqpart_arg6_0 =
//│ 		  (match _lh_rqpart_arg3_0 with
//│ 		    | `LH_N -> 
//│ 		      (((qsort_lh__d1 _lh_rqpart_arg1_0) _lh_rqpart_arg4_0) (`LH_C(_lh_rqpart_arg2_0, (((qsort_lh__d1 _lh_rqpart_arg1_0) _lh_rqpart_arg5_0) _lh_rqpart_arg6_0))))
//│ 		    | `LH_C(_lh_rqpart_LH_C_0_0, _lh_rqpart_LH_C_1_0) -> 
//│ 		      (if ((_lh_rqpart_arg1_0 _lh_rqpart_LH_C_0_0) _lh_rqpart_arg2_0) then
//│ 		        ((((((rqpart_lh__d1 _lh_rqpart_arg1_0) _lh_rqpart_arg2_0) _lh_rqpart_LH_C_1_0) (`LH_C(_lh_rqpart_LH_C_0_0, _lh_rqpart_arg4_0))) _lh_rqpart_arg5_0) _lh_rqpart_arg6_0)
//│ 		      else
//│ 		        ((((((rqpart_lh__d1 _lh_rqpart_arg1_0) _lh_rqpart_arg2_0) _lh_rqpart_LH_C_1_0) _lh_rqpart_arg4_0) (`LH_C(_lh_rqpart_LH_C_0_0, _lh_rqpart_arg5_0))) _lh_rqpart_arg6_0)))
//│ 		and
//│ 		rqsort_lh__d1 _lh_rqsort_arg1_0 _lh_rqsort_arg2_0 _lh_rqsort_arg3_0 =
//│ 		  (match _lh_rqsort_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      _lh_rqsort_arg3_0
//│ 		    | `LH_C(_lh_rqsort_LH_C_0_0, _lh_rqsort_LH_C_1_0) -> 
//│ 		      (match _lh_rqsort_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_C(_lh_rqsort_LH_C_0_0, _lh_rqsort_arg3_0))
//│ 		        | _ -> 
//│ 		          ((((((rqpart_lh__d1 _lh_rqsort_arg1_0) _lh_rqsort_LH_C_0_0) _lh_rqsort_LH_C_1_0) (`LH_N)) (`LH_N)) _lh_rqsort_arg3_0)));;
//│ 		let rec length_lh__d3 ls_8 =
//│ 		  (match ls_8 with
//│ 		    | `LH_C(h_2_4, t_2_4) -> 
//│ 		      (1 + (length_lh__d3 t_2_4))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec length_lh__d2 ls_9 =
//│ 		  (match ls_9 with
//│ 		    | `LH_C(h_2_5, t_2_5) -> 
//│ 		      (1 + (length_lh__d2 t_2_5))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec sort_lh__d1 _lh_sort_arg1_2 =
//│ 		  (((qsort_lh__d1 (fun a_3 b_7 -> 
//│ 		    (let rec _lh_matchIdent_3_6 = a_3 in
//│ 		      (match _lh_matchIdent_3_6 with
//│ 		        | `LH_P2(_lh_sort_LH_P2_0_4, _lh_sort_LH_P2_1_4) -> 
//│ 		          (let rec _lh_matchIdent_3_7 = b_7 in
//│ 		            (match _lh_matchIdent_3_7 with
//│ 		              | `LH_P2(_lh_sort_LH_P2_0_5, _lh_sort_LH_P2_1_5) -> 
//│ 		                ((length_lh__d2 _lh_sort_LH_P2_0_4) <= (length_lh__d3 _lh_sort_LH_P2_0_5)))))))) _lh_sort_arg1_2) (`LH_N));;
//│ 		let rec mappend_lh__d1_d3 xs_2_3 ys_2_3 =
//│ 		  (match xs_2_3 with
//│ 		    | `LH_C(h_4_1, t_4_1) -> 
//│ 		      (`LH_C(h_4_1, ((mappend_lh__d1_d3 t_4_1) ys_2_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_3);;
//│ 		let rec mappend_lh__d3_d5 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (`LH_C(h_1, ((mappend_lh__d3_d5 t_1) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec maybe_lh__d3 _lh_maybe_arg1_0 _lh_maybe_arg2_0 _lh_maybe_arg3_0 =
//│ 		  (match _lh_maybe_arg3_0 with
//│ 		    | `Nothing -> 
//│ 		      _lh_maybe_arg1_0
//│ 		    | `Just(_lh_maybe_Just_0_0) -> 
//│ 		      (_lh_maybe_arg2_0 _lh_maybe_Just_0_0));;
//│ 		let rec kindToChar_lh__d2 _lh_kindToChar_arg1_0 =
//│ 		  (let rec _lh_matchIdent_4_1 = _lh_kindToChar_arg1_0 in
//│ 		    (match _lh_matchIdent_4_1 with
//│ 		      | `King -> 
//│ 		        'K'
//│ 		      | `Queen -> 
//│ 		        'Q'
//│ 		      | `Rook -> 
//│ 		        'R'
//│ 		      | `Bishop -> 
//│ 		        'B'
//│ 		      | `Knight -> 
//│ 		        'N'
//│ 		      | `Pawn -> 
//│ 		        'P'));;
//│ 		let rec showPiece_lh__d1 _lh_showPiece_arg1_0 =
//│ 		  (match _lh_showPiece_arg1_0 with
//│ 		    | `LH_P2(_lh_showPiece_LH_P2_0_0, _lh_showPiece_LH_P2_1_0) -> 
//│ 		      (`LH_C((kindToChar_lh__d2 _lh_showPiece_LH_P2_1_0), (`LH_N))));;
//│ 		let rec atIndex_lh__d1 n_0 ls_0 =
//│ 		  (if (n_0 < 0) then
//│ 		    (failwith "lh_default_error")
//│ 		  else
//│ 		    (match ls_0 with
//│ 		      | `LH_C(h_0, t_0) -> 
//│ 		        (if (n_0 = 0) then
//│ 		          h_0
//│ 		        else
//│ 		          ((atIndex_lh__d1 (n_0 - 1)) t_0))
//│ 		      | `LH_N -> 
//│ 		        (failwith "lh_default_error")));;
//│ 		let rec showSquare_lh__d1 _lh_showSquare_arg1_0 _lh_showSquare_arg2_0 =
//│ 		  (match _lh_showSquare_arg2_0 with
//│ 		    | `LH_P2(_lh_showSquare_LH_P2_0_0, _lh_showSquare_LH_P2_1_0) -> 
//│ 		      ((mappend_lh__d3_d5 ((atIndex_lh__d1 (_lh_showSquare_LH_P2_0_0 - 1)) (`LH_C((`LH_C('Q', (`LH_C('R', (`LH_N))))), (`LH_C((`LH_C('Q', (`LH_C('N', (`LH_N))))), (`LH_C((`LH_C('Q', (`LH_C('B', (`LH_N))))), (`LH_C((`LH_C('Q', (`LH_N))), (`LH_C((`LH_C('K', (`LH_N))), (`LH_C((`LH_C('K', (`LH_C('B', (`LH_N))))), (`LH_C((`LH_C('K', (`LH_C('N', (`LH_N))))), (`LH_C((`LH_C('K', (`LH_C('R', (`LH_N))))), (`LH_N))))))))))))))))))) (string_of_int (let rec _lh_matchIdent_3 = _lh_showSquare_arg1_0 in
//│ 		        (match _lh_matchIdent_3 with
//│ 		          | `Black -> 
//│ 		            (9 - _lh_showSquare_LH_P2_1_0)
//│ 		          | `White -> 
//│ 		            _lh_showSquare_LH_P2_1_0)))));;
//│ 		let rec showMove_lh__d1 _lh_showMove_arg1_0 _lh_showMove_arg2_0 =
//│ 		  (match _lh_showMove_arg2_0 with
//│ 		    | `MoveInFull(_lh_showMove_MoveInFull_0_0, _lh_showMove_MoveInFull_1_0, _lh_showMove_MoveInFull_2_0) -> 
//│ 		      (match _lh_showMove_MoveInFull_0_0 with
//│ 		        | `LH_P2(_lh_showMove_LH_P2_0_0, _lh_showMove_LH_P2_1_0) -> 
//│ 		          (match _lh_showMove_MoveInFull_2_0 with
//│ 		            | `Move(_lh_showMove_Move_0_0, _lh_showMove_Move_1_0, _lh_showMove_Move_2_0) -> 
//│ 		              (let rec capt_0 = (_lh_showMove_Move_1_0 <> (`Nothing)) in
//│ 		                (let rec prom_0 = (_lh_showMove_Move_2_0 <> (`Nothing)) in
//│ 		                  ((mappend_lh__d3_d5 ((mappend_lh__d3_d5 ((mappend_lh__d3_d5 (if _lh_showMove_arg1_0 then
//│ 		                    ((mappend_lh__d3_d5 ((mappend_lh__d3_d5 (showPiece_lh__d1 (`LH_P2(_lh_showMove_LH_P2_0_0, _lh_showMove_LH_P2_1_0)))) (if ((_lh_showMove_LH_P2_1_0 = (`King)) || ((_lh_showMove_LH_P2_1_0 = (`Pawn)) && (not (capt_0 || prom_0)))) then
//│ 		                      (`LH_N)
//│ 		                    else
//│ 		                      (`LH_C('/', (`LH_N)))))) ((showSquare_lh__d1 _lh_showMove_LH_P2_0_0) _lh_showMove_MoveInFull_1_0))
//│ 		                  else
//│ 		                    (`LH_N))) (((maybe_lh__d3 (`LH_C('-', (`LH_N)))) (fun cp_0 -> 
//│ 		                    ((mappend_lh__d3_d5 ((mappend_lh__d3_d5 (`LH_C('x', (`LH_N)))) (showPiece_lh__d1 cp_0))) (`LH_C('/', (`LH_N)))))) _lh_showMove_Move_1_0))) ((showSquare_lh__d1 _lh_showMove_LH_P2_0_0) _lh_showMove_Move_0_0))) (((maybe_lh__d3 (`LH_N)) (fun pp_0 -> 
//│ 		                    ((mappend_lh__d3_d5 ((mappend_lh__d3_d5 (`LH_C('(', (`LH_N)))) (showPiece_lh__d1 pp_0))) (`LH_C(')', (`LH_N)))))) _lh_showMove_Move_2_0)))))));;
//│ 		let rec showMoveInFull_lh__d2 _lh_showMoveInFull_arg1_0 =
//│ 		  ((showMove_lh__d1 true) _lh_showMoveInFull_arg1_0);;
//│ 		let rec showMovesAfter_lh__d1 _lh_showMovesAfter_arg1_0 _lh_showMovesAfter_arg2_0 =
//│ 		  (match _lh_showMovesAfter_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | _ -> 
//│ 		      (match _lh_showMovesAfter_arg1_0 with
//│ 		        | `MoveInFull(_lh_showMovesAfter_MoveInFull_0_0, _lh_showMovesAfter_MoveInFull_1_0, _lh_showMovesAfter_MoveInFull_2_0) -> 
//│ 		          (match _lh_showMovesAfter_arg2_0 with
//│ 		            | `LH_C(_lh_showMovesAfter_LH_C_0_0, _lh_showMovesAfter_LH_C_1_0) -> 
//│ 		              (match _lh_showMovesAfter_LH_C_0_0 with
//│ 		                | `MoveInFull(_lh_showMovesAfter_MoveInFull_0_1, _lh_showMovesAfter_MoveInFull_1_1, _lh_showMovesAfter_MoveInFull_2_1) -> 
//│ 		                  ((mappend_lh__d3_d5 ((mappend_lh__d3_d5 (`LH_C(',', (`LH_C(' ', (`LH_N)))))) ((showMove_lh__d1 ((_lh_showMovesAfter_MoveInFull_0_1 <> _lh_showMovesAfter_MoveInFull_0_0) || (_lh_showMovesAfter_MoveInFull_1_1 <> _lh_showMovesAfter_MoveInFull_1_0))) (`MoveInFull(_lh_showMovesAfter_MoveInFull_0_1, _lh_showMovesAfter_MoveInFull_1_1, _lh_showMovesAfter_MoveInFull_2_1))))) ((showMovesAfter_lh__d1 (`MoveInFull(_lh_showMovesAfter_MoveInFull_0_1, _lh_showMovesAfter_MoveInFull_1_1, _lh_showMovesAfter_MoveInFull_2_1))) _lh_showMovesAfter_LH_C_1_0))))));;
//│ 		let rec showMoves_lh__d3 _lh_showMoves_arg1_1 =
//│ 		  (match _lh_showMoves_arg1_1 with
//│ 		    | `LH_C(_lh_showMoves_LH_C_0_1, _lh_showMoves_LH_C_1_1) -> 
//│ 		      ((mappend_lh__d3_d5 (showMoveInFull_lh__d2 _lh_showMoves_LH_C_0_1)) ((showMovesAfter_lh__d1 _lh_showMoves_LH_C_0_1) _lh_showMoves_LH_C_1_1))
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec length_lh__d9 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_9, t_9) -> 
//│ 		      (1 + (length_lh__d9 t_9))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec null_lh__d3 _lh_null_arg1_1 =
//│ 		  (match _lh_null_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_1, _lh_null_LH_C_1_1) -> 
//│ 		      false);;
//│ 		let rec mappend_lh__d2_d6 xs_9 ys_9 =
//│ 		  (match xs_9 with
//│ 		    | `LH_C(h_1_2, t_1_2) -> 
//│ 		      (`LH_C(h_1_2, ((mappend_lh__d2_d6 t_1_2) ys_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_9);;
//│ 		let rec mappend_lh__d3_d0 xs_5 ys_5 =
//│ 		  (match xs_5 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      (`LH_C(h_7, ((mappend_lh__d3_d0 t_7) ys_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_5);;
//│ 		let rec mappend_lh__d2_d7 xs_8 ys_8 =
//│ 		  (match xs_8 with
//│ 		    | `LH_C(h_1_1, t_1_1) -> 
//│ 		      (`LH_C(h_1_1, ((mappend_lh__d2_d7 t_1_1) ys_8)))
//│ 		    | `LH_N -> 
//│ 		      ys_8);;
//│ 		let rec tab_lh__d2 _lh_tab_arg1_1 =
//│ 		  (if (_lh_tab_arg1_1 <= 0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (`LH_C(' ', (tab_lh__d2 (_lh_tab_arg1_1 - 1)))));;
//│ 		let rec mappend_lh__d2_d8 xs_7 ys_7 =
//│ 		  (match xs_7 with
//│ 		    | `LH_C(h_1_0, t_1_0) -> 
//│ 		      (`LH_C(h_1_0, ((mappend_lh__d2_d8 t_1_0) ys_7)))
//│ 		    | `LH_N -> 
//│ 		      ys_7);;
//│ 		let rec mappend_lh__d2_d9 xs_6 ys_6 =
//│ 		  (match xs_6 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      (`LH_C(h_8, ((mappend_lh__d2_d9 t_8) ys_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_6);;
//│ 		let rec mappend_lh__d1_d5 xs_2_1 ys_2_1 =
//│ 		  (match xs_2_1 with
//│ 		    | `LH_C(h_3_9, t_3_9) -> 
//│ 		      (`LH_C(h_3_9, ((mappend_lh__d1_d5 t_3_9) ys_2_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_1);;
//│ 		let rec length_lh__d1 ls_2_2 =
//│ 		  (match ls_2_2 with
//│ 		    | `LH_C(h_4_4, t_4_4) -> 
//│ 		      (1 + (length_lh__d1 t_4_4))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec showMoves_lh__d4 _lh_showMoves_arg1_0 =
//│ 		  (match _lh_showMoves_arg1_0 with
//│ 		    | `LH_C(_lh_showMoves_LH_C_0_0, _lh_showMoves_LH_C_1_0) -> 
//│ 		      ((mappend_lh__d3_d5 (showMoveInFull_lh__d2 _lh_showMoves_LH_C_0_0)) ((showMovesAfter_lh__d1 _lh_showMoves_LH_C_0_0) _lh_showMoves_LH_C_1_0))
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec null_lh__d4 _lh_null_arg1_0 =
//│ 		  (match _lh_null_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_0, _lh_null_LH_C_1_0) -> 
//│ 		      false);;
//│ 		let rec length_lh__d1_d0 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      (1 + (length_lh__d1_d0 t_5))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec mappend_lh__d3_d3 xs_2 ys_2 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      (`LH_C(h_3, ((mappend_lh__d3_d3 t_3) ys_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2);;
//│ 		let rec mappend_lh__d3_d4 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C(h_2, ((mappend_lh__d3_d4 t_2) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec tab_lh__d3 _lh_tab_arg1_0 =
//│ 		  (if (_lh_tab_arg1_0 <= 0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (`LH_C(' ', (tab_lh__d3 (_lh_tab_arg1_0 - 1)))));;
//│ 		let rec mappend_lh__d3_d2 xs_3 ys_3 =
//│ 		  (match xs_3 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      (`LH_C(h_4, ((mappend_lh__d3_d2 t_4) ys_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_3);;
//│ 		let rec mappend_lh__d3_d1 xs_4 ys_4 =
//│ 		  (match xs_4 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      (`LH_C(h_6, ((mappend_lh__d3_d1 t_6) ys_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_4);;
//│ 		let rec mappend_lh__d1_d7 xs_1_9 ys_1_9 =
//│ 		  (match xs_1_9 with
//│ 		    | `LH_C(h_3_7, t_3_7) -> 
//│ 		      (`LH_C(h_3_7, ((mappend_lh__d1_d7 t_3_7) ys_1_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_9);;
//│ 		let rec mappend_lh__d1_d0 xs_2_6 ys_2_6 =
//│ 		  (match xs_2_6 with
//│ 		    | `LH_C(h_4_5, t_4_5) -> 
//│ 		      (`LH_C(h_4_5, ((mappend_lh__d1_d0 t_4_5) ys_2_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_6);;
//│ 		let rec length_lh__d4 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_2_3, t_2_3) -> 
//│ 		      (1 + (length_lh__d4 t_2_3))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec qsort_lh__d2 _lh_qsort_arg1_1 _lh_qsort_arg2_1 _lh_qsort_arg3_1 =
//│ 		  (match _lh_qsort_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      _lh_qsort_arg3_1
//│ 		    | `LH_C(_lh_qsort_LH_C_0_1, _lh_qsort_LH_C_1_1) -> 
//│ 		      (match _lh_qsort_LH_C_1_1 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_C(_lh_qsort_LH_C_0_1, _lh_qsort_arg3_1))
//│ 		        | _ -> 
//│ 		          ((((((qpart_lh__d1 _lh_qsort_arg1_1) _lh_qsort_LH_C_0_1) _lh_qsort_LH_C_1_1) (`LH_N)) (`LH_N)) _lh_qsort_arg3_1)));;
//│ 		let rec length_lh__d5 ls_6 =
//│ 		  (match ls_6 with
//│ 		    | `LH_C(h_2_2, t_2_2) -> 
//│ 		      (1 + (length_lh__d5 t_2_2))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec sort_lh__d2 _lh_sort_arg1_1 =
//│ 		  (((qsort_lh__d2 (fun a_2 b_6 -> 
//│ 		    (let rec _lh_matchIdent_3_4 = a_2 in
//│ 		      (match _lh_matchIdent_3_4 with
//│ 		        | `LH_P2(_lh_sort_LH_P2_0_2, _lh_sort_LH_P2_1_2) -> 
//│ 		          (let rec _lh_matchIdent_3_5 = b_6 in
//│ 		            (match _lh_matchIdent_3_5 with
//│ 		              | `LH_P2(_lh_sort_LH_P2_0_3, _lh_sort_LH_P2_1_3) -> 
//│ 		                ((length_lh__d4 _lh_sort_LH_P2_0_2) <= (length_lh__d5 _lh_sort_LH_P2_0_3)))))))) _lh_sort_arg1_1) (`LH_N));;
//│ 		let rec mappend_lh__d1_d4 xs_2_2 ys_2_2 =
//│ 		  (match xs_2_2 with
//│ 		    | `LH_C(h_4_0, t_4_0) -> 
//│ 		      (`LH_C(h_4_0, ((mappend_lh__d1_d4 t_4_0) ys_2_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_2);;
//│ 		let rec showMoveInFull_lh__d1 _lh_showMoveInFull_arg1_1 =
//│ 		  ((showMove_lh__d1 true) _lh_showMoveInFull_arg1_1);;
//│ 		let rec mappend_lh__d1_d1 xs_2_5 ys_2_5 =
//│ 		  (match xs_2_5 with
//│ 		    | `LH_C(h_4_3, t_4_3) -> 
//│ 		      (`LH_C(h_4_3, ((mappend_lh__d1_d1 t_4_3) ys_2_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_5);;
//│ 		let rec mappend_lh__d2_d1 xs_1_4 ys_1_4 =
//│ 		  (match xs_1_4 with
//│ 		    | `LH_C(h_1_7, t_1_7) -> 
//│ 		      (`LH_C(h_1_7, ((mappend_lh__d2_d1 t_1_7) ys_1_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_4);;
//│ 		let rec showMoves_lh__d2 _lh_showMoves_arg1_2 =
//│ 		  (match _lh_showMoves_arg1_2 with
//│ 		    | `LH_C(_lh_showMoves_LH_C_0_2, _lh_showMoves_LH_C_1_2) -> 
//│ 		      ((mappend_lh__d3_d5 (showMoveInFull_lh__d2 _lh_showMoves_LH_C_0_2)) ((showMovesAfter_lh__d1 _lh_showMoves_LH_C_0_2) _lh_showMoves_LH_C_1_2))
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec length_lh__d8 ls_3 =
//│ 		  (match ls_3 with
//│ 		    | `LH_C(h_1_8, t_1_8) -> 
//│ 		      (1 + (length_lh__d8 t_1_8))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec mappend_lh__d2_d3 xs_1_2 ys_1_2 =
//│ 		  (match xs_1_2 with
//│ 		    | `LH_C(h_1_5, t_1_5) -> 
//│ 		      (`LH_C(h_1_5, ((mappend_lh__d2_d3 t_1_5) ys_1_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_2);;
//│ 		let rec null_lh__d2 _lh_null_arg1_2 =
//│ 		  (match _lh_null_arg1_2 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_2, _lh_null_LH_C_1_2) -> 
//│ 		      false);;
//│ 		let rec mappend_lh__d2_d5 xs_1_0 ys_1_0 =
//│ 		  (match xs_1_0 with
//│ 		    | `LH_C(h_1_3, t_1_3) -> 
//│ 		      (`LH_C(h_1_3, ((mappend_lh__d2_d5 t_1_3) ys_1_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_0);;
//│ 		let rec mappend_lh__d2_d4 xs_1_1 ys_1_1 =
//│ 		  (match xs_1_1 with
//│ 		    | `LH_C(h_1_4, t_1_4) -> 
//│ 		      (`LH_C(h_1_4, ((mappend_lh__d2_d4 t_1_4) ys_1_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_1);;
//│ 		let rec mappend_lh__d2_d2 xs_1_3 ys_1_3 =
//│ 		  (match xs_1_3 with
//│ 		    | `LH_C(h_1_6, t_1_6) -> 
//│ 		      (`LH_C(h_1_6, ((mappend_lh__d2_d2 t_1_6) ys_1_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_3);;
//│ 		let rec tab_lh__d1 _lh_tab_arg1_2 =
//│ 		  (if (_lh_tab_arg1_2 <= 0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (`LH_C(' ', (tab_lh__d1 (_lh_tab_arg1_2 - 1)))));;
//│ 		let rec length_lh__d6 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_2_1, t_2_1) -> 
//│ 		      (1 + (length_lh__d6 t_2_1))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec qsort_lh__d3 _lh_qsort_arg1_0 _lh_qsort_arg2_0 _lh_qsort_arg3_0 =
//│ 		  (match _lh_qsort_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      _lh_qsort_arg3_0
//│ 		    | `LH_C(_lh_qsort_LH_C_0_0, _lh_qsort_LH_C_1_0) -> 
//│ 		      (match _lh_qsort_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_C(_lh_qsort_LH_C_0_0, _lh_qsort_arg3_0))
//│ 		        | _ -> 
//│ 		          ((((((qpart_lh__d1 _lh_qsort_arg1_0) _lh_qsort_LH_C_0_0) _lh_qsort_LH_C_1_0) (`LH_N)) (`LH_N)) _lh_qsort_arg3_0)));;
//│ 		let rec length_lh__d7 ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_2_0, t_2_0) -> 
//│ 		      (1 + (length_lh__d7 t_2_0))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec sort_lh__d3 _lh_sort_arg1_0 =
//│ 		  (((qsort_lh__d3 (fun a_1 b_5 -> 
//│ 		    (let rec _lh_matchIdent_3_2 = a_1 in
//│ 		      (match _lh_matchIdent_3_2 with
//│ 		        | `LH_P2(_lh_sort_LH_P2_0_0, _lh_sort_LH_P2_1_0) -> 
//│ 		          (let rec _lh_matchIdent_3_3 = b_5 in
//│ 		            (match _lh_matchIdent_3_3 with
//│ 		              | `LH_P2(_lh_sort_LH_P2_0_1, _lh_sort_LH_P2_1_1) -> 
//│ 		                ((length_lh__d6 _lh_sort_LH_P2_0_0) <= (length_lh__d7 _lh_sort_LH_P2_0_1)))))))) _lh_sort_arg1_0) (`LH_N));;
//│ 		let rec mappend_lh__d1_d2 xs_2_4 ys_2_4 =
//│ 		  (match xs_2_4 with
//│ 		    | `LH_C(h_4_2, t_4_2) -> 
//│ 		      (`LH_C(h_4_2, ((mappend_lh__d1_d2 t_4_2) ys_2_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_4);;
//│ 		let rec mappend_lh__d2_d0 xs_1_5 ys_1_5 =
//│ 		  (match xs_1_5 with
//│ 		    | `LH_C(h_1_9, t_1_9) -> 
//│ 		      (`LH_C(h_1_9, ((mappend_lh__d2_d0 t_1_9) ys_1_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_5);;
//│ 		let rec showMoves_lh__d1 _lh_showMoves_arg1_3 =
//│ 		  (match _lh_showMoves_arg1_3 with
//│ 		    | `LH_C(_lh_showMoves_LH_C_0_3, _lh_showMoves_LH_C_1_3) -> 
//│ 		      ((mappend_lh__d2_d0 (showMoveInFull_lh__d2 _lh_showMoves_LH_C_0_3)) ((showMovesAfter_lh__d1 _lh_showMoves_LH_C_0_3) _lh_showMoves_LH_C_1_3))
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec showReplies_lh__d1 _lh_showReplies_arg1_2 _lh_showReplies_arg2_2 =
//│ 		  (match _lh_showReplies_arg1_2 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_showReplies_LH_C_0_2, _lh_showReplies_LH_C_1_2) -> 
//│ 		      (match _lh_showReplies_LH_C_0_2 with
//│ 		        | `LH_P2(_lh_showReplies_LH_P2_0_2, _lh_showReplies_LH_P2_1_2) -> 
//│ 		          ((mappend_lh__d2_d4 ((mappend_lh__d2_d1 ((mappend_lh__d2_d5 ((mappend_lh__d2_d2 ((mappend_lh__d2_d3 (tab_lh__d1 _lh_showReplies_arg2_2)) (`LH_C('i', (`LH_C('f', (`LH_C(' ', (`LH_N))))))))) (if ((null_lh__d2 _lh_showReplies_LH_C_1_2) && ((length_lh__d8 _lh_showReplies_LH_P2_0_2) > 1)) then
//│ 		            (`LH_C('o', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C('r', (`LH_C('s', (`LH_N)))))))))))))
//│ 		          else
//│ 		            (showMoves_lh__d2 _lh_showReplies_LH_P2_0_2)))) (`LH_C(';', (`LH_C(' ', (`LH_N))))))) ((showSoln_lh__d1 _lh_showReplies_LH_P2_1_2) (_lh_showReplies_arg2_2 + 1)))) ((showReplies_lh__d1 _lh_showReplies_LH_C_1_2) _lh_showReplies_arg2_2))))
//│ 		and
//│ 		showReplies_lh__d2 _lh_showReplies_arg1_1 _lh_showReplies_arg2_1 =
//│ 		  (match _lh_showReplies_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_showReplies_LH_C_0_1, _lh_showReplies_LH_C_1_1) -> 
//│ 		      (match _lh_showReplies_LH_C_0_1 with
//│ 		        | `LH_P2(_lh_showReplies_LH_P2_0_1, _lh_showReplies_LH_P2_1_1) -> 
//│ 		          ((mappend_lh__d3_d0 ((mappend_lh__d2_d6 ((mappend_lh__d2_d8 ((mappend_lh__d2_d7 ((mappend_lh__d2_d9 (tab_lh__d2 _lh_showReplies_arg2_1)) (`LH_C('i', (`LH_C('f', (`LH_C(' ', (`LH_N))))))))) (if ((null_lh__d3 _lh_showReplies_LH_C_1_1) && ((length_lh__d9 _lh_showReplies_LH_P2_0_1) > 1)) then
//│ 		            (`LH_C('o', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C('r', (`LH_C('s', (`LH_N)))))))))))))
//│ 		          else
//│ 		            (showMoves_lh__d3 _lh_showReplies_LH_P2_0_1)))) (`LH_C(';', (`LH_C(' ', (`LH_N))))))) ((showSoln_lh__d1 _lh_showReplies_LH_P2_1_1) (_lh_showReplies_arg2_1 + 1)))) ((showReplies_lh__d2 _lh_showReplies_LH_C_1_1) _lh_showReplies_arg2_1))))
//│ 		and
//│ 		showReplies_lh__d3 _lh_showReplies_arg1_0 _lh_showReplies_arg2_0 =
//│ 		  (match _lh_showReplies_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_showReplies_LH_C_0_0, _lh_showReplies_LH_C_1_0) -> 
//│ 		      (match _lh_showReplies_LH_C_0_0 with
//│ 		        | `LH_P2(_lh_showReplies_LH_P2_0_0, _lh_showReplies_LH_P2_1_0) -> 
//│ 		          ((mappend_lh__d3_d4 ((mappend_lh__d3_d3 ((mappend_lh__d3_d5 ((mappend_lh__d3_d2 ((mappend_lh__d3_d1 (tab_lh__d3 _lh_showReplies_arg2_0)) (`LH_C('i', (`LH_C('f', (`LH_C(' ', (`LH_N))))))))) (if ((null_lh__d4 _lh_showReplies_LH_C_1_0) && ((length_lh__d1_d0 _lh_showReplies_LH_P2_0_0) > 1)) then
//│ 		            (`LH_C('o', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C('r', (`LH_C('s', (`LH_N)))))))))))))
//│ 		          else
//│ 		            (showMoves_lh__d4 _lh_showReplies_LH_P2_0_0)))) (`LH_C(';', (`LH_C(' ', (`LH_N))))))) ((showSoln_lh__d1 _lh_showReplies_LH_P2_1_0) (_lh_showReplies_arg2_0 + 1)))) ((showReplies_lh__d3 _lh_showReplies_LH_C_1_0) _lh_showReplies_arg2_0))))
//│ 		and
//│ 		showSoln_lh__d1 _lh_showSoln_arg1_2 _lh_showSoln_arg2_2 =
//│ 		  (match _lh_showSoln_arg1_2 with
//│ 		    | `Soln(_lh_showSoln_Soln_0_2, _lh_showSoln_Soln_1_2) -> 
//│ 		      ((mappend_lh__d1_d4 ((mappend_lh__d1_d2 ((mappend_lh__d1_d1 (string_of_int _lh_showSoln_arg2_2)) (`LH_C('.', (`LH_C(' ', (`LH_N))))))) (showMoveInFull_lh__d1 _lh_showSoln_Soln_0_2))) (let rec _lh_matchIdent_5_5 = _lh_showSoln_Soln_1_2 in
//│ 		        (match _lh_matchIdent_5_5 with
//│ 		          | `LH_N -> 
//│ 		            (`LH_C('+', (`LH_C('+', (`LH_C('|', (`LH_N)))))))
//│ 		          | `LH_C(_lh_showSoln_LH_C_0_2, _lh_showSoln_LH_C_1_2) -> 
//│ 		            (match _lh_showSoln_LH_C_0_2 with
//│ 		              | `LH_P2(_lh_showSoln_LH_P2_0_2, _lh_showSoln_LH_P2_1_2) -> 
//│ 		                (match _lh_showSoln_LH_C_1_2 with
//│ 		                  | `LH_N -> 
//│ 		                    ((mappend_lh__d1_d3 ((mappend_lh__d1_d0 ((mappend_lh__d1_d7 (`LH_C(',', (`LH_C(' ', (`LH_N)))))) (if ((length_lh__d1 _lh_showSoln_LH_P2_0_2) > 1) then
//│ 		                      (`LH_C('.', (`LH_C('.', (`LH_C('.', (`LH_N)))))))
//│ 		                    else
//│ 		                      (showMoves_lh__d1 _lh_showSoln_LH_P2_0_2)))) (`LH_C(';', (`LH_C(' ', (`LH_N))))))) ((showSoln_lh__d1 _lh_showSoln_LH_P2_1_2) (_lh_showSoln_arg2_2 + 1)))
//│ 		                  | _ -> 
//│ 		                    ((mappend_lh__d1_d5 (`LH_C(',', (`LH_C('|', (`LH_N)))))) ((showReplies_lh__d1 (sort_lh__d3 _lh_showSoln_Soln_1_2)) _lh_showSoln_arg2_2)))
//│ 		              | _ -> 
//│ 		                ((mappend_lh__d1_d8 (`LH_C(',', (`LH_C('|', (`LH_N)))))) ((showReplies_lh__d2 (sort_lh__d2 _lh_showSoln_Soln_1_2)) _lh_showSoln_arg2_2)))
//│ 		          | _ -> 
//│ 		            ((mappend_lh__d1_d6 (`LH_C(',', (`LH_C('|', (`LH_N)))))) ((showReplies_lh__d3 (sort_lh__d1 _lh_showSoln_Soln_1_2)) _lh_showSoln_arg2_2))))));;
//│ 		let rec showSoln_lh__d2 _lh_showSoln_arg1_1 _lh_showSoln_arg2_1 =
//│ 		  (match _lh_showSoln_arg1_1 with
//│ 		    | `Soln(_lh_showSoln_Soln_0_1, _lh_showSoln_Soln_1_1) -> 
//│ 		      ((mappend_lh__d3_d5 ((mappend_lh__d3_d5 ((mappend_lh__d3_d5 (string_of_int _lh_showSoln_arg2_1)) (`LH_C('.', (`LH_C(' ', (`LH_N))))))) (showMoveInFull_lh__d2 _lh_showSoln_Soln_0_1))) (let rec _lh_matchIdent_2_4 = _lh_showSoln_Soln_1_1 in
//│ 		        (match _lh_matchIdent_2_4 with
//│ 		          | `LH_N -> 
//│ 		            (`LH_C('+', (`LH_C('+', (`LH_C('|', (`LH_N)))))))
//│ 		          | `LH_C(_lh_showSoln_LH_C_0_1, _lh_showSoln_LH_C_1_1) -> 
//│ 		            (match _lh_showSoln_LH_C_0_1 with
//│ 		              | `LH_P2(_lh_showSoln_LH_P2_0_1, _lh_showSoln_LH_P2_1_1) -> 
//│ 		                (match _lh_showSoln_LH_C_1_1 with
//│ 		                  | `LH_N -> 
//│ 		                    ((mappend_lh__d3_d5 ((mappend_lh__d3_d5 ((mappend_lh__d3_d5 (`LH_C(',', (`LH_C(' ', (`LH_N)))))) (if ((length_lh__d1_d0 _lh_showSoln_LH_P2_0_1) > 1) then
//│ 		                      (`LH_C('.', (`LH_C('.', (`LH_C('.', (`LH_N)))))))
//│ 		                    else
//│ 		                      (showMoves_lh__d4 _lh_showSoln_LH_P2_0_1)))) (`LH_C(';', (`LH_C(' ', (`LH_N))))))) ((showSoln_lh__d2 _lh_showSoln_LH_P2_1_1) (_lh_showSoln_arg2_1 + 1)))
//│ 		                  | _ -> 
//│ 		                    ((mappend_lh__d3_d5 (`LH_C(',', (`LH_C('|', (`LH_N)))))) ((showReplies_lh__d3 (sort_lh__d3 _lh_showSoln_Soln_1_1)) _lh_showSoln_arg2_1)))
//│ 		              | _ -> 
//│ 		                ((mappend_lh__d3_d5 (`LH_C(',', (`LH_C('|', (`LH_N)))))) ((showReplies_lh__d3 (sort_lh__d3 _lh_showSoln_Soln_1_1)) _lh_showSoln_arg2_1)))
//│ 		          | _ -> 
//│ 		            ((mappend_lh__d3_d5 (`LH_C(',', (`LH_C('|', (`LH_N)))))) ((showReplies_lh__d3 (sort_lh__d3 _lh_showSoln_Soln_1_1)) _lh_showSoln_arg2_1))))));;
//│ 		let rec showSoln_lh__d3 _lh_showSoln_arg1_0 _lh_showSoln_arg2_0 =
//│ 		  (match _lh_showSoln_arg1_0 with
//│ 		    | `Soln(_lh_showSoln_Soln_0_0, _lh_showSoln_Soln_1_0) -> 
//│ 		      ((mappend_lh__d3_d5 ((mappend_lh__d3_d5 ((mappend_lh__d3_d5 (string_of_int _lh_showSoln_arg2_0)) (`LH_C('.', (`LH_C(' ', (`LH_N))))))) (showMoveInFull_lh__d2 _lh_showSoln_Soln_0_0))) (let rec _lh_matchIdent_2_3 = _lh_showSoln_Soln_1_0 in
//│ 		        (match _lh_matchIdent_2_3 with
//│ 		          | `LH_N -> 
//│ 		            (`LH_C('+', (`LH_C('+', (`LH_C('|', (`LH_N)))))))
//│ 		          | `LH_C(_lh_showSoln_LH_C_0_0, _lh_showSoln_LH_C_1_0) -> 
//│ 		            (match _lh_showSoln_LH_C_0_0 with
//│ 		              | `LH_P2(_lh_showSoln_LH_P2_0_0, _lh_showSoln_LH_P2_1_0) -> 
//│ 		                (match _lh_showSoln_LH_C_1_0 with
//│ 		                  | `LH_N -> 
//│ 		                    ((mappend_lh__d3_d5 ((mappend_lh__d3_d5 ((mappend_lh__d3_d5 (`LH_C(',', (`LH_C(' ', (`LH_N)))))) (if ((length_lh__d1_d0 _lh_showSoln_LH_P2_0_0) > 1) then
//│ 		                      (`LH_C('.', (`LH_C('.', (`LH_C('.', (`LH_N)))))))
//│ 		                    else
//│ 		                      (showMoves_lh__d4 _lh_showSoln_LH_P2_0_0)))) (`LH_C(';', (`LH_C(' ', (`LH_N))))))) ((showSoln_lh__d3 _lh_showSoln_LH_P2_1_0) (_lh_showSoln_arg2_0 + 1)))
//│ 		                  | _ -> 
//│ 		                    ((mappend_lh__d3_d5 (`LH_C(',', (`LH_C('|', (`LH_N)))))) ((showReplies_lh__d3 (sort_lh__d3 _lh_showSoln_Soln_1_0)) _lh_showSoln_arg2_0)))
//│ 		              | _ -> 
//│ 		                ((mappend_lh__d3_d5 (`LH_C(',', (`LH_C('|', (`LH_N)))))) ((showReplies_lh__d3 (sort_lh__d3 _lh_showSoln_Soln_1_0)) _lh_showSoln_arg2_0)))
//│ 		          | _ -> 
//│ 		            ((mappend_lh__d3_d5 (`LH_C(',', (`LH_C('|', (`LH_N)))))) ((showReplies_lh__d3 (sort_lh__d3 _lh_showSoln_Soln_1_0)) _lh_showSoln_arg2_0))))));;
//│ 		let rec foldr_lh__d3 f_5 i_4 ls_2_4 =
//│ 		  (match ls_2_4 with
//│ 		    | `LH_C(h_4_6, t_4_6) -> 
//│ 		      ((f_5 h_4_6) (((foldr_lh__d3 f_5) i_4) t_4_6))
//│ 		    | `LH_N -> 
//│ 		      i_4);;
//│ 		let rec compact_lh__d1 _lh_compact_arg1_0 =
//│ 		  (match _lh_compact_arg1_0 with
//│ 		    | `Solution(_lh_compact_Solution_0_0, _lh_compact_Solution_1_0) -> 
//│ 		      (`Soln(_lh_compact_Solution_0_0, (((foldr_lh__d3 insertCompact_lh__d1) (`LH_N)) _lh_compact_Solution_1_0))))
//│ 		and
//│ 		insertCompact_lh__d1 _lh_insertCompact_arg1_0 _lh_insertCompact_arg2_0 =
//│ 		  (match _lh_insertCompact_arg1_0 with
//│ 		    | `LH_P2(_lh_insertCompact_LH_P2_0_0, _lh_insertCompact_LH_P2_1_0) -> 
//│ 		      (let rec insert_0 = (fun _lh_insert_arg1_0 _lh_insert_arg2_0 -> 
//│ 		        (match _lh_insert_arg2_0 with
//│ 		          | `LH_N -> 
//│ 		            (`LH_C(_lh_insert_arg1_0, (`LH_N)))
//│ 		          | `LH_C(_lh_insert_LH_C_0_0, _lh_insert_LH_C_1_0) -> 
//│ 		            (if (_lh_insert_arg1_0 > _lh_insert_LH_C_0_0) then
//│ 		              (`LH_C(_lh_insert_LH_C_0_0, ((insert_0 _lh_insert_arg1_0) _lh_insert_LH_C_1_0)))
//│ 		            else
//│ 		              (`LH_C(_lh_insert_arg1_0, (`LH_C(_lh_insert_LH_C_0_0, _lh_insert_LH_C_1_0))))))) in
//│ 		        (let rec cs_0 = (compact_lh__d1 _lh_insertCompact_LH_P2_1_0) in
//│ 		          (let rec ic_0 = (fun ls_2_3 -> 
//│ 		            (let rec _lh_matchIdent_3_8 = ls_2_3 in
//│ 		              (match _lh_matchIdent_3_8 with
//│ 		                | `LH_N -> 
//│ 		                  (`LH_C((`LH_P2((`LH_C(_lh_insertCompact_LH_P2_0_0, (`LH_N))), cs_0)), (`LH_N)))
//│ 		                | `LH_C(_lh_insertCompact_LH_C_0_0, _lh_insertCompact_LH_C_1_0) -> 
//│ 		                  (match _lh_insertCompact_LH_C_0_0 with
//│ 		                    | `LH_P2(_lh_insertCompact_LH_P2_0_1, _lh_insertCompact_LH_P2_1_1) -> 
//│ 		                      (let rec a_4 = ((showSoln_lh__d2 cs_0) 1) in
//│ 		                        (let rec b_8 = ((showSoln_lh__d3 _lh_insertCompact_LH_P2_1_1) 1) in
//│ 		                          (if (a_4 < b_8) then
//│ 		                            (`LH_C((`LH_P2((`LH_C(_lh_insertCompact_LH_P2_0_0, (`LH_N))), cs_0)), (`LH_C((`LH_P2(_lh_insertCompact_LH_P2_0_1, _lh_insertCompact_LH_P2_1_1)), _lh_insertCompact_LH_C_1_0))))
//│ 		                          else
//│ 		                            (if (a_4 = b_8) then
//│ 		                              (`LH_C((`LH_P2(((insert_0 _lh_insertCompact_LH_P2_0_0) _lh_insertCompact_LH_P2_0_1), cs_0)), _lh_insertCompact_LH_C_1_0))
//│ 		                            else
//│ 		                              (if (a_4 > b_8) then
//│ 		                                (`LH_C((`LH_P2(_lh_insertCompact_LH_P2_0_1, _lh_insertCompact_LH_P2_1_1)), (ic_0 _lh_insertCompact_LH_C_1_0)))
//│ 		                              else
//│ 		                                (failwith "msg"(`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('p', (`LH_C('a', (`LH_C('r', (`LH_C('e', (`LH_C(' ', (`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_N))))))))))))))))))))))))))))))))))))) in
//│ 		            (ic_0 _lh_insertCompact_arg2_0)))));;
//│ 		let rec showResult_lh__d1 _lh_showResult_arg1_0 =
//│ 		  (match _lh_showResult_arg1_0 with
//│ 		    | `Nothing -> 
//│ 		      (`LH_C('N', (`LH_C('o', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('l', (`LH_C('u', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C('!', (`LH_N)))))))))))))))))))))))))
//│ 		    | `Just(_lh_showResult_Just_0_0) -> 
//│ 		      ((showSoln_lh__d1 (compact_lh__d1 _lh_showResult_Just_0_0)) 1));;
//│ 		let rec foldr_lh__d5 f_3 i_2 ls_2_0 =
//│ 		  (match ls_2_0 with
//│ 		    | `LH_C(h_3_4, t_3_4) -> 
//│ 		      ((f_3 h_3_4) (((foldr_lh__d5 f_3) i_2) t_3_4))
//│ 		    | `LH_N -> 
//│ 		      i_2);;
//│ 		let rec forcesColoured_lh__d1 _lh_forcesColoured_arg1_1 _lh_forcesColoured_arg2_1 =
//│ 		  (match _lh_forcesColoured_arg1_1 with
//│ 		    | `White -> 
//│ 		      (match _lh_forcesColoured_arg2_1 with
//│ 		        | `Board(_lh_forcesColoured_Board_0_2, _lh_forcesColoured_Board_1_2) -> 
//│ 		          _lh_forcesColoured_Board_0_2)
//│ 		    | `Black -> 
//│ 		      (match _lh_forcesColoured_arg2_1 with
//│ 		        | `Board(_lh_forcesColoured_Board_0_3, _lh_forcesColoured_Board_1_3) -> 
//│ 		          _lh_forcesColoured_Board_1_3));;
//│ 		let rec emptyAtAll_lh__d4 _lh_emptyAtAll_arg1_0 _lh_emptyAtAll_arg2_0 =
//│ 		  (match _lh_emptyAtAll_arg1_0 with
//│ 		    | `Board(_lh_emptyAtAll_Board_0_0, _lh_emptyAtAll_Board_1_0) -> 
//│ 		      (let rec emptyAtAllAnd_0 = (fun b_1 ls_1_5 -> 
//│ 		        (let rec _lh_matchIdent_2_7 = ls_1_5 in
//│ 		          (match _lh_matchIdent_2_7 with
//│ 		            | `LH_N -> 
//│ 		              b_1
//│ 		            | `LH_C(_lh_emptyAtAll_LH_C_0_0, _lh_emptyAtAll_LH_C_1_0) -> 
//│ 		              (match _lh_emptyAtAll_LH_C_0_0 with
//│ 		                | `LH_P2(_lh_emptyAtAll_LH_P2_0_0, _lh_emptyAtAll_LH_P2_1_0) -> 
//│ 		                  ((not (_lh_emptyAtAll_arg2_0 _lh_emptyAtAll_LH_P2_1_0)) && ((emptyAtAllAnd_0 b_1) _lh_emptyAtAll_LH_C_1_0)))))) in
//│ 		        ((emptyAtAllAnd_0 ((emptyAtAllAnd_0 true) _lh_emptyAtAll_Board_1_0)) _lh_emptyAtAll_Board_0_0)));;
//│ 		let rec opponent_lh__d5 _lh_opponent_arg1_0 =
//│ 		  (match _lh_opponent_arg1_0 with
//│ 		    | `Black -> 
//│ 		      (`White)
//│ 		    | `White -> 
//│ 		      (`Black));;
//│ 		let rec max_lh__d4 _lh_max_arg1_0 _lh_max_arg2_0 =
//│ 		  (if (_lh_max_arg1_0 < _lh_max_arg2_0) then
//│ 		    _lh_max_arg2_0
//│ 		  else
//│ 		    _lh_max_arg1_0);;
//│ 		let rec abs_lh__d7 _lh_abs_arg1_0 =
//│ 		  (if (_lh_abs_arg1_0 < 0) then
//│ 		    (0 - _lh_abs_arg1_0)
//│ 		  else
//│ 		    _lh_abs_arg1_0);;
//│ 		let rec forcesColoured_lh__d2 _lh_forcesColoured_arg1_0 _lh_forcesColoured_arg2_0 =
//│ 		  (match _lh_forcesColoured_arg1_0 with
//│ 		    | `White -> 
//│ 		      (match _lh_forcesColoured_arg2_0 with
//│ 		        | `Board(_lh_forcesColoured_Board_0_0, _lh_forcesColoured_Board_1_0) -> 
//│ 		          _lh_forcesColoured_Board_0_0)
//│ 		    | `Black -> 
//│ 		      (match _lh_forcesColoured_arg2_0 with
//│ 		        | `Board(_lh_forcesColoured_Board_0_1, _lh_forcesColoured_Board_1_1) -> 
//│ 		          _lh_forcesColoured_Board_1_1));;
//│ 		let rec any_lh__d1 _lh_any_arg1_0 _lh_any_arg2_0 =
//│ 		  (match _lh_any_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_any_LH_C_0_0, _lh_any_LH_C_1_0) -> 
//│ 		      (if (_lh_any_arg1_0 _lh_any_LH_C_0_0) then
//│ 		        true
//│ 		      else
//│ 		        ((any_lh__d1 _lh_any_arg1_0) _lh_any_LH_C_1_0)));;
//│ 		let rec kSq_lh__d1 _lh_kSq_arg1_0 =
//│ 		  (match _lh_kSq_arg1_0 with
//│ 		    | `LH_C(_lh_kSq_LH_C_0_0, _lh_kSq_LH_C_1_0) -> 
//│ 		      (match _lh_kSq_LH_C_0_0 with
//│ 		        | `LH_P2(_lh_kSq_LH_P2_0_0, _lh_kSq_LH_P2_1_0) -> 
//│ 		          (match _lh_kSq_LH_P2_0_0 with
//│ 		            | `King -> 
//│ 		              _lh_kSq_LH_P2_1_0
//│ 		            | _ -> 
//│ 		              (kSq_lh__d1 _lh_kSq_LH_C_1_0))
//│ 		        | _ -> 
//│ 		          (kSq_lh__d1 _lh_kSq_LH_C_1_0))
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec kingSquare_lh__d1 _lh_kingSquare_arg1_0 _lh_kingSquare_arg2_0 =
//│ 		  (match _lh_kingSquare_arg1_0 with
//│ 		    | `White -> 
//│ 		      (match _lh_kingSquare_arg2_0 with
//│ 		        | `Board(_lh_kingSquare_Board_0_0, _lh_kingSquare_Board_1_0) -> 
//│ 		          (kSq_lh__d1 _lh_kingSquare_Board_0_0))
//│ 		    | `Black -> 
//│ 		      (match _lh_kingSquare_arg2_0 with
//│ 		        | `Board(_lh_kingSquare_Board_0_1, _lh_kingSquare_Board_1_1) -> 
//│ 		          (kSq_lh__d1 _lh_kingSquare_Board_1_1)));;
//│ 		let rec min_lh__d4 _lh_min_arg1_0 _lh_min_arg2_0 =
//│ 		  (if (_lh_min_arg1_0 < _lh_min_arg2_0) then
//│ 		    _lh_min_arg1_0
//│ 		  else
//│ 		    _lh_min_arg2_0);;
//│ 		let rec kingincheck_lh__d2 _lh_kingincheck_arg1_0 _lh_kingincheck_arg2_0 =
//│ 		  (let rec givesCheck_0 = (fun kxy_0 -> 
//│ 		    (let rec _lh_matchIdent_5 = kxy_0 in
//│ 		      (match _lh_matchIdent_5 with
//│ 		        | `LH_P2(_lh_kingincheck_LH_P2_0_0, _lh_kingincheck_LH_P2_1_0) -> 
//│ 		          (match _lh_kingincheck_LH_P2_1_0 with
//│ 		            | `LH_P2(_lh_kingincheck_LH_P2_0_1, _lh_kingincheck_LH_P2_1_1) -> 
//│ 		              (let rec kthreat_0 = (fun param_0 -> 
//│ 		                (let rec xkyk_0 = ((kingSquare_lh__d1 _lh_kingincheck_arg1_0) _lh_kingincheck_arg2_0) in
//│ 		                  (let rec _lh_matchIdent_6 = xkyk_0 in
//│ 		                    (match _lh_matchIdent_6 with
//│ 		                      | `LH_P2(_lh_kingincheck_LH_P2_0_2, _lh_kingincheck_LH_P2_1_2) -> 
//│ 		                        (let rec _lh_matchIdent_7 = param_0 in
//│ 		                          (match _lh_matchIdent_7 with
//│ 		                            | `King -> 
//│ 		                              (((abs_lh__d7 (_lh_kingincheck_LH_P2_0_1 - _lh_kingincheck_LH_P2_0_2)) <= 1) && ((abs_lh__d7 (_lh_kingincheck_LH_P2_1_1 - _lh_kingincheck_LH_P2_1_2)) <= 1))
//│ 		                            | `Queen -> 
//│ 		                              ((kthreat_0 (`Rook)) || (kthreat_0 (`Bishop)))
//│ 		                            | `Rook -> 
//│ 		                              (((_lh_kingincheck_LH_P2_0_1 = _lh_kingincheck_LH_P2_0_2) && ((emptyAtAll_lh__d4 _lh_kingincheck_arg2_0) (fun xeye_0 -> 
//│ 		                                (let rec _lh_matchIdent_8 = xeye_0 in
//│ 		                                  (match _lh_matchIdent_8 with
//│ 		                                    | `LH_P2(_lh_kingincheck_LH_P2_0_3, _lh_kingincheck_LH_P2_1_3) -> 
//│ 		                                      (((_lh_kingincheck_LH_P2_0_3 = _lh_kingincheck_LH_P2_0_2) && (((min_lh__d4 _lh_kingincheck_LH_P2_1_1) _lh_kingincheck_LH_P2_1_2) < _lh_kingincheck_LH_P2_1_3)) && (_lh_kingincheck_LH_P2_1_3 < ((max_lh__d4 _lh_kingincheck_LH_P2_1_1) _lh_kingincheck_LH_P2_1_2)))))))) || ((_lh_kingincheck_LH_P2_1_1 = _lh_kingincheck_LH_P2_1_2) && ((emptyAtAll_lh__d4 _lh_kingincheck_arg2_0) (fun xeye_1 -> 
//│ 		                                (let rec _lh_matchIdent_9 = xeye_1 in
//│ 		                                  (match _lh_matchIdent_9 with
//│ 		                                    | `LH_P2(_lh_kingincheck_LH_P2_0_4, _lh_kingincheck_LH_P2_1_4) -> 
//│ 		                                      (((_lh_kingincheck_LH_P2_1_4 = _lh_kingincheck_LH_P2_1_2) && (((min_lh__d4 _lh_kingincheck_LH_P2_0_1) _lh_kingincheck_LH_P2_0_2) < _lh_kingincheck_LH_P2_0_4)) && (_lh_kingincheck_LH_P2_0_4 < ((max_lh__d4 _lh_kingincheck_LH_P2_0_1) _lh_kingincheck_LH_P2_0_2)))))))))
//│ 		                            | `Bishop -> 
//│ 		                              ((((_lh_kingincheck_LH_P2_0_1 + _lh_kingincheck_LH_P2_1_1) = (_lh_kingincheck_LH_P2_0_2 + _lh_kingincheck_LH_P2_1_2)) && ((emptyAtAll_lh__d4 _lh_kingincheck_arg2_0) (fun xeye_2 -> 
//│ 		                                (let rec _lh_matchIdent_1_0 = xeye_2 in
//│ 		                                  (match _lh_matchIdent_1_0 with
//│ 		                                    | `LH_P2(_lh_kingincheck_LH_P2_0_5, _lh_kingincheck_LH_P2_1_5) -> 
//│ 		                                      ((((_lh_kingincheck_LH_P2_0_5 + _lh_kingincheck_LH_P2_1_5) = (_lh_kingincheck_LH_P2_0_2 + _lh_kingincheck_LH_P2_1_2)) && (((min_lh__d4 _lh_kingincheck_LH_P2_0_1) _lh_kingincheck_LH_P2_0_2) < _lh_kingincheck_LH_P2_0_5)) && (_lh_kingincheck_LH_P2_0_5 < ((max_lh__d4 _lh_kingincheck_LH_P2_0_1) _lh_kingincheck_LH_P2_0_2)))))))) || (((_lh_kingincheck_LH_P2_0_1 - _lh_kingincheck_LH_P2_1_1) = (_lh_kingincheck_LH_P2_0_2 - _lh_kingincheck_LH_P2_1_2)) && ((emptyAtAll_lh__d4 _lh_kingincheck_arg2_0) (fun xeye_3 -> 
//│ 		                                (let rec _lh_matchIdent_1_1 = xeye_3 in
//│ 		                                  (match _lh_matchIdent_1_1 with
//│ 		                                    | `LH_P2(_lh_kingincheck_LH_P2_0_6, _lh_kingincheck_LH_P2_1_6) -> 
//│ 		                                      ((((_lh_kingincheck_LH_P2_0_6 - _lh_kingincheck_LH_P2_1_6) = (_lh_kingincheck_LH_P2_0_2 - _lh_kingincheck_LH_P2_1_2)) && (((min_lh__d4 _lh_kingincheck_LH_P2_0_1) _lh_kingincheck_LH_P2_0_2) < _lh_kingincheck_LH_P2_0_6)) && (_lh_kingincheck_LH_P2_0_6 < ((max_lh__d4 _lh_kingincheck_LH_P2_0_1) _lh_kingincheck_LH_P2_0_2)))))))))
//│ 		                            | `Knight -> 
//│ 		                              ((((abs_lh__d7 (_lh_kingincheck_LH_P2_0_1 - _lh_kingincheck_LH_P2_0_2)) = 2) && ((abs_lh__d7 (_lh_kingincheck_LH_P2_1_1 - _lh_kingincheck_LH_P2_1_2)) = 1)) || (((abs_lh__d7 (_lh_kingincheck_LH_P2_0_1 - _lh_kingincheck_LH_P2_0_2)) = 1) && ((abs_lh__d7 (_lh_kingincheck_LH_P2_1_1 - _lh_kingincheck_LH_P2_1_2)) = 2)))
//│ 		                            | `Pawn -> 
//│ 		                              (((abs_lh__d7 (_lh_kingincheck_LH_P2_0_1 - _lh_kingincheck_LH_P2_0_2)) = 1) && (let rec _lh_matchIdent_1_2 = _lh_kingincheck_arg1_0 in
//│ 		                                (match _lh_matchIdent_1_2 with
//│ 		                                  | `Black -> 
//│ 		                                    (_lh_kingincheck_LH_P2_1_2 = (_lh_kingincheck_LH_P2_1_1 + 1))
//│ 		                                  | `White -> 
//│ 		                                    (_lh_kingincheck_LH_P2_1_2 = (_lh_kingincheck_LH_P2_1_1 - 1))))))))))) in
//│ 		                (kthreat_0 _lh_kingincheck_LH_P2_0_0)))))) in
//│ 		    ((any_lh__d1 givesCheck_0) ((forcesColoured_lh__d2 (opponent_lh__d5 _lh_kingincheck_arg1_0)) _lh_kingincheck_arg2_0)));;
//│ 		let rec maybe_lh__d2 _lh_maybe_arg1_1 _lh_maybe_arg2_1 _lh_maybe_arg3_1 =
//│ 		  (match _lh_maybe_arg3_1 with
//│ 		    | `Nothing -> 
//│ 		      _lh_maybe_arg1_1
//│ 		    | `Just(_lh_maybe_Just_0_1) -> 
//│ 		      (_lh_maybe_arg2_1 _lh_maybe_Just_0_1));;
//│ 		let rec putPieceAt_lh__d3 _lh_putPieceAt_arg1_0 _lh_putPieceAt_arg2_0 _lh_putPieceAt_arg3_0 =
//│ 		  (match _lh_putPieceAt_arg2_0 with
//│ 		    | `LH_P2(_lh_putPieceAt_LH_P2_0_0, _lh_putPieceAt_LH_P2_1_0) -> 
//│ 		      (match _lh_putPieceAt_LH_P2_0_0 with
//│ 		        | `White -> 
//│ 		          (match _lh_putPieceAt_arg3_0 with
//│ 		            | `Board(_lh_putPieceAt_Board_0_0, _lh_putPieceAt_Board_1_0) -> 
//│ 		              (`Board((`LH_C((`LH_P2(_lh_putPieceAt_LH_P2_1_0, _lh_putPieceAt_arg1_0)), _lh_putPieceAt_Board_0_0)), _lh_putPieceAt_Board_1_0)))
//│ 		        | `Black -> 
//│ 		          (match _lh_putPieceAt_arg3_0 with
//│ 		            | `Board(_lh_putPieceAt_Board_0_1, _lh_putPieceAt_Board_1_1) -> 
//│ 		              (`Board(_lh_putPieceAt_Board_0_1, (`LH_C((`LH_P2(_lh_putPieceAt_LH_P2_1_0, _lh_putPieceAt_arg1_0)), _lh_putPieceAt_Board_1_1)))))));;
//│ 		let rec putPieceAt_lh__d2 _lh_putPieceAt_arg1_1 _lh_putPieceAt_arg2_1 _lh_putPieceAt_arg3_1 =
//│ 		  (match _lh_putPieceAt_arg2_1 with
//│ 		    | `LH_P2(_lh_putPieceAt_LH_P2_0_1, _lh_putPieceAt_LH_P2_1_1) -> 
//│ 		      (match _lh_putPieceAt_LH_P2_0_1 with
//│ 		        | `White -> 
//│ 		          (match _lh_putPieceAt_arg3_1 with
//│ 		            | `Board(_lh_putPieceAt_Board_0_2, _lh_putPieceAt_Board_1_2) -> 
//│ 		              (`Board((`LH_C((`LH_P2(_lh_putPieceAt_LH_P2_1_1, _lh_putPieceAt_arg1_1)), _lh_putPieceAt_Board_0_2)), _lh_putPieceAt_Board_1_2)))
//│ 		        | `Black -> 
//│ 		          (match _lh_putPieceAt_arg3_1 with
//│ 		            | `Board(_lh_putPieceAt_Board_0_3, _lh_putPieceAt_Board_1_3) -> 
//│ 		              (`Board(_lh_putPieceAt_Board_0_3, (`LH_C((`LH_P2(_lh_putPieceAt_LH_P2_1_1, _lh_putPieceAt_arg1_1)), _lh_putPieceAt_Board_1_3)))))));;
//│ 		let rec rPa_lh__d1 _lh_rPa_arg1_0 _lh_rPa_arg2_0 =
//│ 		  (match _lh_rPa_arg2_0 with
//│ 		    | `LH_C(_lh_rPa_LH_C_0_0, _lh_rPa_LH_C_1_0) -> 
//│ 		      (match _lh_rPa_LH_C_0_0 with
//│ 		        | `LH_P2(_lh_rPa_LH_P2_0_0, _lh_rPa_LH_P2_1_0) -> 
//│ 		          (if (_lh_rPa_LH_P2_1_0 = _lh_rPa_arg1_0) then
//│ 		            _lh_rPa_LH_C_1_0
//│ 		          else
//│ 		            (`LH_C((`LH_P2(_lh_rPa_LH_P2_0_0, _lh_rPa_LH_P2_1_0)), ((rPa_lh__d1 _lh_rPa_arg1_0) _lh_rPa_LH_C_1_0)))))
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec rmPieceAt_lh__d2 _lh_rmPieceAt_arg1_0 _lh_rmPieceAt_arg2_0 _lh_rmPieceAt_arg3_0 =
//│ 		  (match _lh_rmPieceAt_arg1_0 with
//│ 		    | `White -> 
//│ 		      (match _lh_rmPieceAt_arg3_0 with
//│ 		        | `Board(_lh_rmPieceAt_Board_0_0, _lh_rmPieceAt_Board_1_0) -> 
//│ 		          (`Board(((rPa_lh__d1 _lh_rmPieceAt_arg2_0) _lh_rmPieceAt_Board_0_0), _lh_rmPieceAt_Board_1_0)))
//│ 		    | `Black -> 
//│ 		      (match _lh_rmPieceAt_arg3_0 with
//│ 		        | `Board(_lh_rmPieceAt_Board_0_1, _lh_rmPieceAt_Board_1_1) -> 
//│ 		          (`Board(_lh_rmPieceAt_Board_0_1, ((rPa_lh__d1 _lh_rmPieceAt_arg2_0) _lh_rmPieceAt_Board_1_1)))));;
//│ 		let rec rmPieceAt_lh__d1 _lh_rmPieceAt_arg1_1 _lh_rmPieceAt_arg2_1 _lh_rmPieceAt_arg3_1 =
//│ 		  (match _lh_rmPieceAt_arg1_1 with
//│ 		    | `White -> 
//│ 		      (match _lh_rmPieceAt_arg3_1 with
//│ 		        | `Board(_lh_rmPieceAt_Board_0_2, _lh_rmPieceAt_Board_1_2) -> 
//│ 		          (`Board(((rPa_lh__d1 _lh_rmPieceAt_arg2_1) _lh_rmPieceAt_Board_0_2), _lh_rmPieceAt_Board_1_2)))
//│ 		    | `Black -> 
//│ 		      (match _lh_rmPieceAt_arg3_1 with
//│ 		        | `Board(_lh_rmPieceAt_Board_0_3, _lh_rmPieceAt_Board_1_3) -> 
//│ 		          (`Board(_lh_rmPieceAt_Board_0_3, ((rPa_lh__d1 _lh_rmPieceAt_arg2_1) _lh_rmPieceAt_Board_1_3)))));;
//│ 		let rec tryMove_lh__d1 _lh_tryMove_arg1_1 _lh_tryMove_arg2_1 _lh_tryMove_arg3_1 _lh_tryMove_arg4_1 =
//│ 		  (match _lh_tryMove_arg2_1 with
//│ 		    | `LH_P2(_lh_tryMove_LH_P2_0_1, _lh_tryMove_LH_P2_1_1) -> 
//│ 		      (match _lh_tryMove_arg3_1 with
//│ 		        | `Move(_lh_tryMove_Move_0_1, _lh_tryMove_Move_1_1, _lh_tryMove_Move_2_1) -> 
//│ 		          (let rec p_1 = (`LH_P2(_lh_tryMove_arg1_1, _lh_tryMove_LH_P2_0_1)) in
//│ 		            (let rec bd1_1 = (((rmPieceAt_lh__d1 _lh_tryMove_arg1_1) _lh_tryMove_LH_P2_1_1) _lh_tryMove_arg4_1) in
//│ 		              (let rec p'_1 = (((maybe_lh__d2 p_1) (fun x_7 -> 
//│ 		                x_7)) _lh_tryMove_Move_2_1) in
//│ 		                (let rec bd2_1 = (((maybe_lh__d3 (((putPieceAt_lh__d2 _lh_tryMove_Move_0_1) p'_1) bd1_1)) (fun _dummy_1 -> 
//│ 		                  (((putPieceAt_lh__d3 _lh_tryMove_Move_0_1) p'_1) (((rmPieceAt_lh__d2 (opponent_lh__d5 _lh_tryMove_arg1_1)) _lh_tryMove_Move_0_1) bd1_1)))) _lh_tryMove_Move_1_1) in
//│ 		                  (if (not ((kingincheck_lh__d2 _lh_tryMove_arg1_1) bd2_1)) then
//│ 		                    (`Just((`LH_P2((`MoveInFull(p_1, _lh_tryMove_LH_P2_1_1, (`Move(_lh_tryMove_Move_0_1, _lh_tryMove_Move_1_1, _lh_tryMove_Move_2_1)))), bd2_1))))
//│ 		                  else
//│ 		                    (`Nothing))))))));;
//│ 		let rec foldr_lh__d4 f_4 i_3 ls_2_1 =
//│ 		  (match ls_2_1 with
//│ 		    | `LH_C(h_3_5, t_3_5) -> 
//│ 		      ((f_4 h_3_5) (((foldr_lh__d4 f_4) i_3) t_3_5))
//│ 		    | `LH_N -> 
//│ 		      i_3);;
//│ 		let rec pieceAt_lh__d1 _lh_pieceAt_arg1_0 _lh_pieceAt_arg2_0 =
//│ 		  (match _lh_pieceAt_arg1_0 with
//│ 		    | `Board(_lh_pieceAt_Board_0_0, _lh_pieceAt_Board_1_0) -> 
//│ 		      (let rec pieceAtWith_0 = (fun c_1 n_4 ls_3_2 -> 
//│ 		        (let rec _lh_matchIdent_5_9 = ls_3_2 in
//│ 		          (match _lh_matchIdent_5_9 with
//│ 		            | `LH_N -> 
//│ 		              n_4
//│ 		            | `LH_C(_lh_pieceAt_LH_C_0_0, _lh_pieceAt_LH_C_1_0) -> 
//│ 		              (match _lh_pieceAt_LH_C_0_0 with
//│ 		                | `LH_P2(_lh_pieceAt_LH_P2_0_0, _lh_pieceAt_LH_P2_1_0) -> 
//│ 		                  (if (_lh_pieceAt_LH_P2_1_0 = _lh_pieceAt_arg2_0) then
//│ 		                    (`Just((`LH_P2(c_1, _lh_pieceAt_LH_P2_0_0))))
//│ 		                  else
//│ 		                    (((pieceAtWith_0 c_1) n_4) _lh_pieceAt_LH_C_1_0)))))) in
//│ 		        (((pieceAtWith_0 (`White)) (((pieceAtWith_0 (`Black)) (`Nothing)) _lh_pieceAt_Board_1_0)) _lh_pieceAt_Board_0_0)));;
//│ 		let rec onboard_lh__d1 _lh_onboard_arg1_0 =
//│ 		  (match _lh_onboard_arg1_0 with
//│ 		    | `LH_P2(_lh_onboard_LH_P2_0_0, _lh_onboard_LH_P2_1_0) -> 
//│ 		      ((((1 <= _lh_onboard_LH_P2_0_0) && (_lh_onboard_LH_P2_0_0 <= 8)) && (1 <= _lh_onboard_LH_P2_1_0)) && (_lh_onboard_LH_P2_1_0 <= 8)));;
//│ 		let rec colourOf_lh__d1 _lh_colourOf_arg1_0 =
//│ 		  (match _lh_colourOf_arg1_0 with
//│ 		    | `LH_P2(_lh_colourOf_LH_P2_0_0, _lh_colourOf_LH_P2_1_0) -> 
//│ 		      _lh_colourOf_LH_P2_0_0);;
//│ 		let rec sift_lh__d1 _lh_sift_arg1_0 _lh_sift_arg2_0 _lh_sift_arg3_0 _lh_sift_arg4_0 =
//│ 		  (match _lh_sift_arg4_0 with
//│ 		    | `LH_N -> 
//│ 		      _lh_sift_arg3_0
//│ 		    | `LH_C(_lh_sift_LH_C_0_0, _lh_sift_LH_C_1_0) -> 
//│ 		      (if (onboard_lh__d1 _lh_sift_LH_C_0_0) then
//│ 		        (let rec _lh_matchIdent_2 = ((pieceAt_lh__d1 _lh_sift_arg2_0) _lh_sift_LH_C_0_0) in
//│ 		          (match _lh_matchIdent_2 with
//│ 		            | `Nothing -> 
//│ 		              ((((sift_lh__d1 _lh_sift_arg1_0) _lh_sift_arg2_0) (`LH_C((`Move(_lh_sift_LH_C_0_0, (`Nothing), (`Nothing))), _lh_sift_arg3_0))) _lh_sift_LH_C_1_0)
//│ 		            | `Just(_lh_sift_Just_0_0) -> 
//│ 		              (if ((colourOf_lh__d1 _lh_sift_Just_0_0) = _lh_sift_arg1_0) then
//│ 		                ((((sift_lh__d1 _lh_sift_arg1_0) _lh_sift_arg2_0) _lh_sift_arg3_0) _lh_sift_LH_C_1_0)
//│ 		              else
//│ 		                ((((sift_lh__d1 _lh_sift_arg1_0) _lh_sift_arg2_0) (`LH_C((`Move(_lh_sift_LH_C_0_0, (`Just(_lh_sift_Just_0_0)), (`Nothing))), _lh_sift_arg3_0))) _lh_sift_LH_C_1_0))))
//│ 		      else
//│ 		        ((((sift_lh__d1 _lh_sift_arg1_0) _lh_sift_arg2_0) _lh_sift_arg3_0) _lh_sift_LH_C_1_0)));;
//│ 		let rec kingmoves_lh__d1 _lh_kingmoves_arg1_0 _lh_kingmoves_arg2_0 _lh_kingmoves_arg3_0 =
//│ 		  (match _lh_kingmoves_arg2_0 with
//│ 		    | `LH_P2(_lh_kingmoves_LH_P2_0_0, _lh_kingmoves_LH_P2_1_0) -> 
//│ 		      ((((sift_lh__d1 _lh_kingmoves_arg1_0) _lh_kingmoves_arg3_0) (`LH_N)) (`LH_C((`LH_P2((_lh_kingmoves_LH_P2_0_0 - 1), (_lh_kingmoves_LH_P2_1_0 + 1))), (`LH_C((`LH_P2(_lh_kingmoves_LH_P2_0_0, (_lh_kingmoves_LH_P2_1_0 + 1))), (`LH_C((`LH_P2((_lh_kingmoves_LH_P2_0_0 + 1), (_lh_kingmoves_LH_P2_1_0 + 1))), (`LH_C((`LH_P2((_lh_kingmoves_LH_P2_0_0 - 1), _lh_kingmoves_LH_P2_1_0)), (`LH_C((`LH_P2((_lh_kingmoves_LH_P2_0_0 + 1), _lh_kingmoves_LH_P2_1_0)), (`LH_C((`LH_P2((_lh_kingmoves_LH_P2_0_0 - 1), (_lh_kingmoves_LH_P2_1_0 - 1))), (`LH_C((`LH_P2(_lh_kingmoves_LH_P2_0_0, (_lh_kingmoves_LH_P2_1_0 - 1))), (`LH_C((`LH_P2((_lh_kingmoves_LH_P2_0_0 + 1), (_lh_kingmoves_LH_P2_1_0 - 1))), (`LH_N)))))))))))))))))));;
//│ 		let rec moveLine_lh__d1 _lh_moveLine_arg1_0 _lh_moveLine_arg2_0 _lh_moveLine_arg3_0 _lh_moveLine_arg4_0 _lh_moveLine_arg5_0 =
//│ 		  (let rec ml_0 = (fun sq_0 ms_0 -> 
//│ 		    (let rec sq'_0 = (_lh_moveLine_arg4_0 sq_0) in
//│ 		      (if (onboard_lh__d1 sq'_0) then
//│ 		        (let rec _lh_matchIdent_1 = ((pieceAt_lh__d1 _lh_moveLine_arg1_0) sq'_0) in
//│ 		          (match _lh_matchIdent_1 with
//│ 		            | `Nothing -> 
//│ 		              ((ml_0 sq'_0) (`LH_C((`Move(sq'_0, (`Nothing), (`Nothing))), ms_0)))
//│ 		            | `Just(_lh_moveLine_Just_0_0) -> 
//│ 		              (if ((colourOf_lh__d1 _lh_moveLine_Just_0_0) <> _lh_moveLine_arg2_0) then
//│ 		                (_lh_moveLine_arg5_0 (`LH_C((`Move(sq'_0, (`Just(_lh_moveLine_Just_0_0)), (`Nothing))), ms_0)))
//│ 		              else
//│ 		                (_lh_moveLine_arg5_0 ms_0))))
//│ 		      else
//│ 		        (_lh_moveLine_arg5_0 ms_0)))) in
//│ 		    (ml_0 _lh_moveLine_arg3_0));;
//│ 		let rec bishopmoves_lh__d1 _lh_bishopmoves_arg1_0 _lh_bishopmoves_arg2_0 _lh_bishopmoves_arg3_0 =
//│ 		  ((((((moveLine_lh__d1 _lh_bishopmoves_arg3_0) _lh_bishopmoves_arg1_0) _lh_bishopmoves_arg2_0) (fun xy_1 -> 
//│ 		    (let rec _lh_matchIdent_1_5 = xy_1 in
//│ 		      (match _lh_matchIdent_1_5 with
//│ 		        | `LH_P2(_lh_bishopmoves_LH_P2_0_0, _lh_bishopmoves_LH_P2_1_0) -> 
//│ 		          (`LH_P2((_lh_bishopmoves_LH_P2_0_0 - 1), (_lh_bishopmoves_LH_P2_1_0 + 1))))))) (((((moveLine_lh__d1 _lh_bishopmoves_arg3_0) _lh_bishopmoves_arg1_0) _lh_bishopmoves_arg2_0) (fun xy_2 -> 
//│ 		    (let rec _lh_matchIdent_1_6 = xy_2 in
//│ 		      (match _lh_matchIdent_1_6 with
//│ 		        | `LH_P2(_lh_bishopmoves_LH_P2_0_1, _lh_bishopmoves_LH_P2_1_1) -> 
//│ 		          (`LH_P2((_lh_bishopmoves_LH_P2_0_1 + 1), (_lh_bishopmoves_LH_P2_1_1 + 1))))))) (((((moveLine_lh__d1 _lh_bishopmoves_arg3_0) _lh_bishopmoves_arg1_0) _lh_bishopmoves_arg2_0) (fun xy_3 -> 
//│ 		    (let rec _lh_matchIdent_1_7 = xy_3 in
//│ 		      (match _lh_matchIdent_1_7 with
//│ 		        | `LH_P2(_lh_bishopmoves_LH_P2_0_2, _lh_bishopmoves_LH_P2_1_2) -> 
//│ 		          (`LH_P2((_lh_bishopmoves_LH_P2_0_2 - 1), (_lh_bishopmoves_LH_P2_1_2 - 1))))))) (((((moveLine_lh__d1 _lh_bishopmoves_arg3_0) _lh_bishopmoves_arg1_0) _lh_bishopmoves_arg2_0) (fun xy_4 -> 
//│ 		    (let rec _lh_matchIdent_1_8 = xy_4 in
//│ 		      (match _lh_matchIdent_1_8 with
//│ 		        | `LH_P2(_lh_bishopmoves_LH_P2_0_3, _lh_bishopmoves_LH_P2_1_3) -> 
//│ 		          (`LH_P2((_lh_bishopmoves_LH_P2_0_3 + 1), (_lh_bishopmoves_LH_P2_1_3 - 1))))))) (fun x_1 -> 
//│ 		    x_1))))) (`LH_N));;
//│ 		let rec concat_lh__d2 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_2_9, t_2_9) -> 
//│ 		      ((mappend_lh__d3_d5 h_2_9) (concat_lh__d2 t_2_9))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d2 f_7 ls_2_7 =
//│ 		  (match ls_2_7 with
//│ 		    | `LH_C(h_5_0, t_5_0) -> 
//│ 		      (`LH_C((f_7 h_5_0), ((map_lh__d2 f_7) t_5_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec pawnmoves_lh__d1 _lh_pawnmoves_arg1_0 _lh_pawnmoves_arg2_0 _lh_pawnmoves_arg3_0 =
//│ 		  (match _lh_pawnmoves_arg2_0 with
//│ 		    | `LH_P2(_lh_pawnmoves_LH_P2_0_0, _lh_pawnmoves_LH_P2_1_0) -> 
//│ 		      (let rec fwd_0 = (let rec _lh_matchIdent_1_3 = _lh_pawnmoves_arg1_0 in
//│ 		        (match _lh_matchIdent_1_3 with
//│ 		          | `White -> 
//│ 		            1
//│ 		          | `Black -> 
//│ 		            (0 - 1))) in
//│ 		        (let rec promote_0 = (fun xy_0 mcp_0 -> 
//│ 		          (let rec _lh_matchIdent_1_4 = xy_0 in
//│ 		            (match _lh_matchIdent_1_4 with
//│ 		              | `LH_P2(_lh_pawnmoves_LH_P2_0_1, _lh_pawnmoves_LH_P2_1_1) -> 
//│ 		                (if (((_lh_pawnmoves_arg1_0 = (`Black)) && (_lh_pawnmoves_LH_P2_1_1 = 1)) || ((_lh_pawnmoves_arg1_0 = (`White)) && (_lh_pawnmoves_LH_P2_1_1 = 8))) then
//│ 		                  ((map_lh__d2 (fun param_1 -> 
//│ 		                    (`Move((`LH_P2(_lh_pawnmoves_LH_P2_0_1, _lh_pawnmoves_LH_P2_1_1)), mcp_0, (`Just(param_1)))))) (`LH_C((`LH_P2(_lh_pawnmoves_arg1_0, (`Queen))), (`LH_C((`LH_P2(_lh_pawnmoves_arg1_0, (`Rook))), (`LH_C((`LH_P2(_lh_pawnmoves_arg1_0, (`Bishop))), (`LH_C((`LH_P2(_lh_pawnmoves_arg1_0, (`Knight))), (`LH_N))))))))))
//│ 		                else
//│ 		                  (`LH_C((`Move((`LH_P2(_lh_pawnmoves_LH_P2_0_1, _lh_pawnmoves_LH_P2_1_1)), mcp_0, (`Nothing))), (`LH_N))))))) in
//│ 		          (let rec movs_0 = (let rec on1_0 = (`LH_P2(_lh_pawnmoves_LH_P2_0_0, (_lh_pawnmoves_LH_P2_1_0 + fwd_0))) in
//│ 		            (let rec on2_0 = (`LH_P2(_lh_pawnmoves_LH_P2_0_0, ((_lh_pawnmoves_LH_P2_1_0 + 2) * fwd_0))) in
//│ 		              (if (((pieceAt_lh__d1 _lh_pawnmoves_arg3_0) on1_0) = (`Nothing)) then
//│ 		                ((mappend_lh__d3_d5 ((promote_0 on1_0) (`Nothing))) (if ((((_lh_pawnmoves_LH_P2_1_0 = 2) && (_lh_pawnmoves_arg1_0 = (`White))) || ((_lh_pawnmoves_LH_P2_1_0 = 7) && (_lh_pawnmoves_arg1_0 = (`Black)))) && (((pieceAt_lh__d1 _lh_pawnmoves_arg3_0) on2_0) = (`Nothing))) then
//│ 		                  (`LH_C((`Move(on2_0, (`Nothing), (`Nothing))), (`LH_N)))
//│ 		                else
//│ 		                  (`LH_N)))
//│ 		              else
//│ 		                (`LH_N)))) in
//│ 		            (let rec caps_0 = (concat_lh__d2 (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		              (match _lh_listcomp_fun_para_0 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		                  (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		                    (match _lh_listcomp_fun_para_1 with
//│ 		                      | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		                        (match _lh_listcomp_fun_ls_h_1 with
//│ 		                          | `Just(_lh_pawnmoves_Just_0_0) -> 
//│ 		                            (if (not ((colourOf_lh__d1 _lh_pawnmoves_Just_0_0) = _lh_pawnmoves_arg1_0)) then
//│ 		                              (`LH_C(((promote_0 _lh_listcomp_fun_ls_h_0) (`Just(_lh_pawnmoves_Just_0_0))), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		                            else
//│ 		                              (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))
//│ 		                          | _ -> 
//│ 		                            (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))
//│ 		                      | `LH_N -> 
//│ 		                        (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))) in
//│ 		                    (_lh_listcomp_fun_1 (`LH_C(((pieceAt_lh__d1 _lh_pawnmoves_arg3_0) _lh_listcomp_fun_ls_h_0), (`LH_N)))))
//│ 		                | `LH_N -> 
//│ 		                  (`LH_N))) in
//│ 		              (_lh_listcomp_fun_0 (`LH_C((`LH_P2((_lh_pawnmoves_LH_P2_0_0 + 1), (_lh_pawnmoves_LH_P2_1_0 + fwd_0))), (`LH_C((`LH_P2((_lh_pawnmoves_LH_P2_0_0 - 1), (_lh_pawnmoves_LH_P2_1_0 + fwd_0))), (`LH_N)))))))) in
//│ 		              ((mappend_lh__d3_d5 movs_0) caps_0))))));;
//│ 		let rec knightmoves_lh__d1 _lh_knightmoves_arg1_0 _lh_knightmoves_arg2_0 _lh_knightmoves_arg3_0 =
//│ 		  (match _lh_knightmoves_arg2_0 with
//│ 		    | `LH_P2(_lh_knightmoves_LH_P2_0_0, _lh_knightmoves_LH_P2_1_0) -> 
//│ 		      ((((sift_lh__d1 _lh_knightmoves_arg1_0) _lh_knightmoves_arg3_0) (`LH_N)) (`LH_C((`LH_P2((_lh_knightmoves_LH_P2_0_0 - 1), (_lh_knightmoves_LH_P2_1_0 + 2))), (`LH_C((`LH_P2((_lh_knightmoves_LH_P2_0_0 + 1), (_lh_knightmoves_LH_P2_1_0 + 2))), (`LH_C((`LH_P2((_lh_knightmoves_LH_P2_0_0 - 2), (_lh_knightmoves_LH_P2_1_0 + 1))), (`LH_C((`LH_P2((_lh_knightmoves_LH_P2_0_0 + 2), (_lh_knightmoves_LH_P2_1_0 + 1))), (`LH_C((`LH_P2((_lh_knightmoves_LH_P2_0_0 - 2), (_lh_knightmoves_LH_P2_1_0 - 1))), (`LH_C((`LH_P2((_lh_knightmoves_LH_P2_0_0 + 2), (_lh_knightmoves_LH_P2_1_0 - 1))), (`LH_C((`LH_P2((_lh_knightmoves_LH_P2_0_0 - 1), (_lh_knightmoves_LH_P2_1_0 - 2))), (`LH_C((`LH_P2((_lh_knightmoves_LH_P2_0_0 + 1), (_lh_knightmoves_LH_P2_1_0 - 2))), (`LH_N)))))))))))))))))));;
//│ 		let rec rookmoves_lh__d1 _lh_rookmoves_arg1_0 _lh_rookmoves_arg2_0 _lh_rookmoves_arg3_0 =
//│ 		  ((((((moveLine_lh__d1 _lh_rookmoves_arg3_0) _lh_rookmoves_arg1_0) _lh_rookmoves_arg2_0) (fun xy_5 -> 
//│ 		    (let rec _lh_matchIdent_1_9 = xy_5 in
//│ 		      (match _lh_matchIdent_1_9 with
//│ 		        | `LH_P2(_lh_rookmoves_LH_P2_0_0, _lh_rookmoves_LH_P2_1_0) -> 
//│ 		          (`LH_P2((_lh_rookmoves_LH_P2_0_0 - 1), _lh_rookmoves_LH_P2_1_0)))))) (((((moveLine_lh__d1 _lh_rookmoves_arg3_0) _lh_rookmoves_arg1_0) _lh_rookmoves_arg2_0) (fun xy_6 -> 
//│ 		    (let rec _lh_matchIdent_2_0 = xy_6 in
//│ 		      (match _lh_matchIdent_2_0 with
//│ 		        | `LH_P2(_lh_rookmoves_LH_P2_0_1, _lh_rookmoves_LH_P2_1_1) -> 
//│ 		          (`LH_P2((_lh_rookmoves_LH_P2_0_1 + 1), _lh_rookmoves_LH_P2_1_1)))))) (((((moveLine_lh__d1 _lh_rookmoves_arg3_0) _lh_rookmoves_arg1_0) _lh_rookmoves_arg2_0) (fun xy_7 -> 
//│ 		    (let rec _lh_matchIdent_2_1 = xy_7 in
//│ 		      (match _lh_matchIdent_2_1 with
//│ 		        | `LH_P2(_lh_rookmoves_LH_P2_0_2, _lh_rookmoves_LH_P2_1_2) -> 
//│ 		          (`LH_P2(_lh_rookmoves_LH_P2_0_2, (_lh_rookmoves_LH_P2_1_2 - 1))))))) (((((moveLine_lh__d1 _lh_rookmoves_arg3_0) _lh_rookmoves_arg1_0) _lh_rookmoves_arg2_0) (fun xy_8 -> 
//│ 		    (let rec _lh_matchIdent_2_2 = xy_8 in
//│ 		      (match _lh_matchIdent_2_2 with
//│ 		        | `LH_P2(_lh_rookmoves_LH_P2_0_3, _lh_rookmoves_LH_P2_1_3) -> 
//│ 		          (`LH_P2(_lh_rookmoves_LH_P2_0_3, (_lh_rookmoves_LH_P2_1_3 + 1))))))) (fun x_2 -> 
//│ 		    x_2))))) (`LH_N));;
//│ 		let rec queenmoves_lh__d1 _lh_queenmoves_arg1_0 _lh_queenmoves_arg2_0 _lh_queenmoves_arg3_0 =
//│ 		  ((mappend_lh__d3_d5 (((bishopmoves_lh__d1 _lh_queenmoves_arg1_0) _lh_queenmoves_arg2_0) _lh_queenmoves_arg3_0)) (((rookmoves_lh__d1 _lh_queenmoves_arg1_0) _lh_queenmoves_arg2_0) _lh_queenmoves_arg3_0));;
//│ 		let rec rawmoves_lh__d1 _lh_rawmoves_arg1_0 _lh_rawmoves_arg2_0 _lh_rawmoves_arg3_0 =
//│ 		  (match _lh_rawmoves_arg2_0 with
//│ 		    | `LH_P2(_lh_rawmoves_LH_P2_0_0, _lh_rawmoves_LH_P2_1_0) -> 
//│ 		      (let rec m_0 = (let rec _lh_matchIdent_3_1 = _lh_rawmoves_LH_P2_0_0 in
//│ 		        (match _lh_matchIdent_3_1 with
//│ 		          | `King -> 
//│ 		            kingmoves_lh__d1
//│ 		          | `Queen -> 
//│ 		            queenmoves_lh__d1
//│ 		          | `Rook -> 
//│ 		            rookmoves_lh__d1
//│ 		          | `Bishop -> 
//│ 		            bishopmoves_lh__d1
//│ 		          | `Knight -> 
//│ 		            knightmoves_lh__d1
//│ 		          | `Pawn -> 
//│ 		            pawnmoves_lh__d1)) in
//│ 		        (((m_0 _lh_rawmoves_arg1_0) _lh_rawmoves_LH_P2_1_0) _lh_rawmoves_arg3_0)));;
//│ 		let rec maybe_lh__d1 _lh_maybe_arg1_2 _lh_maybe_arg2_2 _lh_maybe_arg3_2 =
//│ 		  (match _lh_maybe_arg3_2 with
//│ 		    | `Nothing -> 
//│ 		      _lh_maybe_arg1_2
//│ 		    | `Just(_lh_maybe_Just_0_2) -> 
//│ 		      (_lh_maybe_arg2_2 _lh_maybe_Just_0_2));;
//│ 		let rec moveDetailsFor_lh__d1 _lh_moveDetailsFor_arg1_1 _lh_moveDetailsFor_arg2_1 =
//│ 		  (((foldr_lh__d4 (fun ksq_1 ms_2 -> 
//│ 		    (((foldr_lh__d5 (fun rm_1 ms'_1 -> 
//│ 		      ((((maybe_lh__d1 (fun x_8 -> 
//│ 		        x_8)) (fun h_5_3 t_5_3 -> 
//│ 		        (`LH_C(h_5_3, t_5_3)))) ((((tryMove_lh__d1 _lh_moveDetailsFor_arg1_1) ksq_1) rm_1) _lh_moveDetailsFor_arg2_1)) ms'_1))) ms_2) (((rawmoves_lh__d1 _lh_moveDetailsFor_arg1_1) ksq_1) _lh_moveDetailsFor_arg2_1)))) (`LH_N)) ((forcesColoured_lh__d1 _lh_moveDetailsFor_arg1_1) _lh_moveDetailsFor_arg2_1));;
//│ 		let rec foldr_lh__d2 f_8 i_5 ls_2_8 =
//│ 		  (match ls_2_8 with
//│ 		    | `LH_C(h_5_2, t_5_2) -> 
//│ 		      ((f_8 h_5_2) (((foldr_lh__d2 f_8) i_5) t_5_2))
//│ 		    | `LH_N -> 
//│ 		      i_5);;
//│ 		let rec opponent_lh__d2 _lh_opponent_arg1_3 =
//│ 		  (match _lh_opponent_arg1_3 with
//│ 		    | `Black -> 
//│ 		      (`White)
//│ 		    | `White -> 
//│ 		      (`Black));;
//│ 		let rec opponent_lh__d1 _lh_opponent_arg1_4 =
//│ 		  (match _lh_opponent_arg1_4 with
//│ 		    | `Black -> 
//│ 		      (`White)
//│ 		    | `White -> 
//│ 		      (`Black));;
//│ 		let rec null_lh__d1 _lh_null_arg1_3 =
//│ 		  (match _lh_null_arg1_3 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_3, _lh_null_LH_C_1_3) -> 
//│ 		      false);;
//│ 		let rec opponent_lh__d3 _lh_opponent_arg1_2 =
//│ 		  (match _lh_opponent_arg1_2 with
//│ 		    | `Black -> 
//│ 		      (`White)
//│ 		    | `White -> 
//│ 		      (`Black));;
//│ 		let rec tryMove_lh__d2 _lh_tryMove_arg1_0 _lh_tryMove_arg2_0 _lh_tryMove_arg3_0 _lh_tryMove_arg4_0 =
//│ 		  (match _lh_tryMove_arg2_0 with
//│ 		    | `LH_P2(_lh_tryMove_LH_P2_0_0, _lh_tryMove_LH_P2_1_0) -> 
//│ 		      (match _lh_tryMove_arg3_0 with
//│ 		        | `Move(_lh_tryMove_Move_0_0, _lh_tryMove_Move_1_0, _lh_tryMove_Move_2_0) -> 
//│ 		          (let rec p_0 = (`LH_P2(_lh_tryMove_arg1_0, _lh_tryMove_LH_P2_0_0)) in
//│ 		            (let rec bd1_0 = (((rmPieceAt_lh__d2 _lh_tryMove_arg1_0) _lh_tryMove_LH_P2_1_0) _lh_tryMove_arg4_0) in
//│ 		              (let rec p'_0 = (((maybe_lh__d3 p_0) (fun x_0 -> 
//│ 		                x_0)) _lh_tryMove_Move_2_0) in
//│ 		                (let rec bd2_0 = (((maybe_lh__d3 (((putPieceAt_lh__d3 _lh_tryMove_Move_0_0) p'_0) bd1_0)) (fun _dummy_0 -> 
//│ 		                  (((putPieceAt_lh__d3 _lh_tryMove_Move_0_0) p'_0) (((rmPieceAt_lh__d2 (opponent_lh__d5 _lh_tryMove_arg1_0)) _lh_tryMove_Move_0_0) bd1_0)))) _lh_tryMove_Move_1_0) in
//│ 		                  (if (not ((kingincheck_lh__d2 _lh_tryMove_arg1_0) bd2_0)) then
//│ 		                    (`Just((`LH_P2((`MoveInFull(p_0, _lh_tryMove_LH_P2_1_0, (`Move(_lh_tryMove_Move_0_0, _lh_tryMove_Move_1_0, _lh_tryMove_Move_2_0)))), bd2_0))))
//│ 		                  else
//│ 		                    (`Nothing))))))));;
//│ 		let rec foldr_lh__d7 f_0 i_0 ls_1_2 =
//│ 		  (match ls_1_2 with
//│ 		    | `LH_C(h_2_8, t_2_8) -> 
//│ 		      ((f_0 h_2_8) (((foldr_lh__d7 f_0) i_0) t_2_8))
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec moveDetailsFor_lh__d2 _lh_moveDetailsFor_arg1_0 _lh_moveDetailsFor_arg2_0 =
//│ 		  (((foldr_lh__d7 (fun ksq_0 ms_1 -> 
//│ 		    (((foldr_lh__d7 (fun rm_0 ms'_0 -> 
//│ 		      ((((maybe_lh__d3 (fun x_6 -> 
//│ 		        x_6)) (fun h_3_3 t_3_3 -> 
//│ 		        (`LH_C(h_3_3, t_3_3)))) ((((tryMove_lh__d2 _lh_moveDetailsFor_arg1_0) ksq_0) rm_0) _lh_moveDetailsFor_arg2_0)) ms'_0))) ms_1) (((rawmoves_lh__d1 _lh_moveDetailsFor_arg1_0) ksq_0) _lh_moveDetailsFor_arg2_0)))) (`LH_N)) ((forcesColoured_lh__d2 _lh_moveDetailsFor_arg1_0) _lh_moveDetailsFor_arg2_0));;
//│ 		let rec foldr_lh__d6 f_2 i_1 ls_1_9 =
//│ 		  (match ls_1_9 with
//│ 		    | `LH_C(h_3_2, t_3_2) -> 
//│ 		      ((f_2 h_3_2) (((foldr_lh__d6 f_2) i_1) t_3_2))
//│ 		    | `LH_N -> 
//│ 		      i_1);;
//│ 		let rec max_lh__d3 _lh_max_arg1_1 _lh_max_arg2_1 =
//│ 		  (if (_lh_max_arg1_1 < _lh_max_arg2_1) then
//│ 		    _lh_max_arg2_1
//│ 		  else
//│ 		    _lh_max_arg1_1);;
//│ 		let rec abs_lh__d5 _lh_abs_arg1_2 =
//│ 		  (if (_lh_abs_arg1_2 < 0) then
//│ 		    (0 - _lh_abs_arg1_2)
//│ 		  else
//│ 		    _lh_abs_arg1_2);;
//│ 		let rec emptyAtAll_lh__d1 _lh_emptyAtAll_arg1_3 _lh_emptyAtAll_arg2_3 =
//│ 		  (match _lh_emptyAtAll_arg1_3 with
//│ 		    | `Board(_lh_emptyAtAll_Board_0_3, _lh_emptyAtAll_Board_1_3) -> 
//│ 		      (let rec emptyAtAllAnd_3 = (fun b_4 ls_1_8 -> 
//│ 		        (let rec _lh_matchIdent_3_0 = ls_1_8 in
//│ 		          (match _lh_matchIdent_3_0 with
//│ 		            | `LH_N -> 
//│ 		              b_4
//│ 		            | `LH_C(_lh_emptyAtAll_LH_C_0_3, _lh_emptyAtAll_LH_C_1_3) -> 
//│ 		              (match _lh_emptyAtAll_LH_C_0_3 with
//│ 		                | `LH_P2(_lh_emptyAtAll_LH_P2_0_3, _lh_emptyAtAll_LH_P2_1_3) -> 
//│ 		                  ((not (_lh_emptyAtAll_arg2_3 _lh_emptyAtAll_LH_P2_1_3)) && ((emptyAtAllAnd_3 b_4) _lh_emptyAtAll_LH_C_1_3)))))) in
//│ 		        ((emptyAtAllAnd_3 ((emptyAtAllAnd_3 true) _lh_emptyAtAll_Board_1_3)) _lh_emptyAtAll_Board_0_3)));;
//│ 		let rec abs_lh__d2 _lh_abs_arg1_5 =
//│ 		  (if (_lh_abs_arg1_5 < 0) then
//│ 		    (0 - _lh_abs_arg1_5)
//│ 		  else
//│ 		    _lh_abs_arg1_5);;
//│ 		let rec min_lh__d2 _lh_min_arg1_2 _lh_min_arg2_2 =
//│ 		  (if (_lh_min_arg1_2 < _lh_min_arg2_2) then
//│ 		    _lh_min_arg1_2
//│ 		  else
//│ 		    _lh_min_arg2_2);;
//│ 		let rec abs_lh__d1 _lh_abs_arg1_6 =
//│ 		  (if (_lh_abs_arg1_6 < 0) then
//│ 		    (0 - _lh_abs_arg1_6)
//│ 		  else
//│ 		    _lh_abs_arg1_6);;
//│ 		let rec emptyAtAll_lh__d3 _lh_emptyAtAll_arg1_1 _lh_emptyAtAll_arg2_1 =
//│ 		  (match _lh_emptyAtAll_arg1_1 with
//│ 		    | `Board(_lh_emptyAtAll_Board_0_1, _lh_emptyAtAll_Board_1_1) -> 
//│ 		      (let rec emptyAtAllAnd_1 = (fun b_2 ls_1_6 -> 
//│ 		        (let rec _lh_matchIdent_2_8 = ls_1_6 in
//│ 		          (match _lh_matchIdent_2_8 with
//│ 		            | `LH_N -> 
//│ 		              b_2
//│ 		            | `LH_C(_lh_emptyAtAll_LH_C_0_1, _lh_emptyAtAll_LH_C_1_1) -> 
//│ 		              (match _lh_emptyAtAll_LH_C_0_1 with
//│ 		                | `LH_P2(_lh_emptyAtAll_LH_P2_0_1, _lh_emptyAtAll_LH_P2_1_1) -> 
//│ 		                  ((not (_lh_emptyAtAll_arg2_1 _lh_emptyAtAll_LH_P2_1_1)) && ((emptyAtAllAnd_1 b_2) _lh_emptyAtAll_LH_C_1_1)))))) in
//│ 		        ((emptyAtAllAnd_1 ((emptyAtAllAnd_1 true) _lh_emptyAtAll_Board_1_1)) _lh_emptyAtAll_Board_0_1)));;
//│ 		let rec max_lh__d1 _lh_max_arg1_3 _lh_max_arg2_3 =
//│ 		  (if (_lh_max_arg1_3 < _lh_max_arg2_3) then
//│ 		    _lh_max_arg2_3
//│ 		  else
//│ 		    _lh_max_arg1_3);;
//│ 		let rec min_lh__d3 _lh_min_arg1_1 _lh_min_arg2_1 =
//│ 		  (if (_lh_min_arg1_1 < _lh_min_arg2_1) then
//│ 		    _lh_min_arg1_1
//│ 		  else
//│ 		    _lh_min_arg2_1);;
//│ 		let rec abs_lh__d6 _lh_abs_arg1_1 =
//│ 		  (if (_lh_abs_arg1_1 < 0) then
//│ 		    (0 - _lh_abs_arg1_1)
//│ 		  else
//│ 		    _lh_abs_arg1_1);;
//│ 		let rec max_lh__d2 _lh_max_arg1_2 _lh_max_arg2_2 =
//│ 		  (if (_lh_max_arg1_2 < _lh_max_arg2_2) then
//│ 		    _lh_max_arg2_2
//│ 		  else
//│ 		    _lh_max_arg1_2);;
//│ 		let rec opponent_lh__d4 _lh_opponent_arg1_1 =
//│ 		  (match _lh_opponent_arg1_1 with
//│ 		    | `Black -> 
//│ 		      (`White)
//│ 		    | `White -> 
//│ 		      (`Black));;
//│ 		let rec emptyAtAll_lh__d2 _lh_emptyAtAll_arg1_2 _lh_emptyAtAll_arg2_2 =
//│ 		  (match _lh_emptyAtAll_arg1_2 with
//│ 		    | `Board(_lh_emptyAtAll_Board_0_2, _lh_emptyAtAll_Board_1_2) -> 
//│ 		      (let rec emptyAtAllAnd_2 = (fun b_3 ls_1_7 -> 
//│ 		        (let rec _lh_matchIdent_2_9 = ls_1_7 in
//│ 		          (match _lh_matchIdent_2_9 with
//│ 		            | `LH_N -> 
//│ 		              b_3
//│ 		            | `LH_C(_lh_emptyAtAll_LH_C_0_2, _lh_emptyAtAll_LH_C_1_2) -> 
//│ 		              (match _lh_emptyAtAll_LH_C_0_2 with
//│ 		                | `LH_P2(_lh_emptyAtAll_LH_P2_0_2, _lh_emptyAtAll_LH_P2_1_2) -> 
//│ 		                  ((not (_lh_emptyAtAll_arg2_2 _lh_emptyAtAll_LH_P2_1_2)) && ((emptyAtAllAnd_2 b_3) _lh_emptyAtAll_LH_C_1_2)))))) in
//│ 		        ((emptyAtAllAnd_2 ((emptyAtAllAnd_2 true) _lh_emptyAtAll_Board_1_2)) _lh_emptyAtAll_Board_0_2)));;
//│ 		let rec abs_lh__d3 _lh_abs_arg1_4 =
//│ 		  (if (_lh_abs_arg1_4 < 0) then
//│ 		    (0 - _lh_abs_arg1_4)
//│ 		  else
//│ 		    _lh_abs_arg1_4);;
//│ 		let rec abs_lh__d4 _lh_abs_arg1_3 =
//│ 		  (if (_lh_abs_arg1_3 < 0) then
//│ 		    (0 - _lh_abs_arg1_3)
//│ 		  else
//│ 		    _lh_abs_arg1_3);;
//│ 		let rec min_lh__d1 _lh_min_arg1_3 _lh_min_arg2_3 =
//│ 		  (if (_lh_min_arg1_3 < _lh_min_arg2_3) then
//│ 		    _lh_min_arg1_3
//│ 		  else
//│ 		    _lh_min_arg2_3);;
//│ 		let rec kingincheck_lh__d1 _lh_kingincheck_arg1_1 _lh_kingincheck_arg2_1 =
//│ 		  (let rec givesCheck_1 = (fun kxy_1 -> 
//│ 		    (let rec _lh_matchIdent_4_4 = kxy_1 in
//│ 		      (match _lh_matchIdent_4_4 with
//│ 		        | `LH_P2(_lh_kingincheck_LH_P2_0_7, _lh_kingincheck_LH_P2_1_7) -> 
//│ 		          (match _lh_kingincheck_LH_P2_1_7 with
//│ 		            | `LH_P2(_lh_kingincheck_LH_P2_0_8, _lh_kingincheck_LH_P2_1_8) -> 
//│ 		              (let rec kthreat_1 = (fun param_2 -> 
//│ 		                (let rec xkyk_1 = ((kingSquare_lh__d1 _lh_kingincheck_arg1_1) _lh_kingincheck_arg2_1) in
//│ 		                  (let rec _lh_matchIdent_4_5 = xkyk_1 in
//│ 		                    (match _lh_matchIdent_4_5 with
//│ 		                      | `LH_P2(_lh_kingincheck_LH_P2_0_9, _lh_kingincheck_LH_P2_1_9) -> 
//│ 		                        (let rec _lh_matchIdent_4_6 = param_2 in
//│ 		                          (match _lh_matchIdent_4_6 with
//│ 		                            | `King -> 
//│ 		                              (((abs_lh__d2 (_lh_kingincheck_LH_P2_0_8 - _lh_kingincheck_LH_P2_0_9)) <= 1) && ((abs_lh__d1 (_lh_kingincheck_LH_P2_1_8 - _lh_kingincheck_LH_P2_1_9)) <= 1))
//│ 		                            | `Queen -> 
//│ 		                              ((kthreat_1 (`Rook)) || (kthreat_1 (`Bishop)))
//│ 		                            | `Rook -> 
//│ 		                              (((_lh_kingincheck_LH_P2_0_8 = _lh_kingincheck_LH_P2_0_9) && ((emptyAtAll_lh__d4 _lh_kingincheck_arg2_1) (fun xeye_4 -> 
//│ 		                                (let rec _lh_matchIdent_4_7 = xeye_4 in
//│ 		                                  (match _lh_matchIdent_4_7 with
//│ 		                                    | `LH_P2(_lh_kingincheck_LH_P2_0_1_0, _lh_kingincheck_LH_P2_1_1_0) -> 
//│ 		                                      (((_lh_kingincheck_LH_P2_0_1_0 = _lh_kingincheck_LH_P2_0_9) && (((min_lh__d4 _lh_kingincheck_LH_P2_1_8) _lh_kingincheck_LH_P2_1_9) < _lh_kingincheck_LH_P2_1_1_0)) && (_lh_kingincheck_LH_P2_1_1_0 < ((max_lh__d1 _lh_kingincheck_LH_P2_1_8) _lh_kingincheck_LH_P2_1_9)))))))) || ((_lh_kingincheck_LH_P2_1_8 = _lh_kingincheck_LH_P2_1_9) && ((emptyAtAll_lh__d3 _lh_kingincheck_arg2_1) (fun xeye_5 -> 
//│ 		                                (let rec _lh_matchIdent_4_8 = xeye_5 in
//│ 		                                  (match _lh_matchIdent_4_8 with
//│ 		                                    | `LH_P2(_lh_kingincheck_LH_P2_0_1_1, _lh_kingincheck_LH_P2_1_1_1) -> 
//│ 		                                      (((_lh_kingincheck_LH_P2_1_1_1 = _lh_kingincheck_LH_P2_1_9) && (((min_lh__d3 _lh_kingincheck_LH_P2_0_8) _lh_kingincheck_LH_P2_0_9) < _lh_kingincheck_LH_P2_0_1_1)) && (_lh_kingincheck_LH_P2_0_1_1 < ((max_lh__d2 _lh_kingincheck_LH_P2_0_8) _lh_kingincheck_LH_P2_0_9)))))))))
//│ 		                            | `Bishop -> 
//│ 		                              ((((_lh_kingincheck_LH_P2_0_8 + _lh_kingincheck_LH_P2_1_8) = (_lh_kingincheck_LH_P2_0_9 + _lh_kingincheck_LH_P2_1_9)) && ((emptyAtAll_lh__d1 _lh_kingincheck_arg2_1) (fun xeye_6 -> 
//│ 		                                (let rec _lh_matchIdent_4_9 = xeye_6 in
//│ 		                                  (match _lh_matchIdent_4_9 with
//│ 		                                    | `LH_P2(_lh_kingincheck_LH_P2_0_1_2, _lh_kingincheck_LH_P2_1_1_2) -> 
//│ 		                                      ((((_lh_kingincheck_LH_P2_0_1_2 + _lh_kingincheck_LH_P2_1_1_2) = (_lh_kingincheck_LH_P2_0_9 + _lh_kingincheck_LH_P2_1_9)) && (((min_lh__d1 _lh_kingincheck_LH_P2_0_8) _lh_kingincheck_LH_P2_0_9) < _lh_kingincheck_LH_P2_0_1_2)) && (_lh_kingincheck_LH_P2_0_1_2 < ((max_lh__d3 _lh_kingincheck_LH_P2_0_8) _lh_kingincheck_LH_P2_0_9)))))))) || (((_lh_kingincheck_LH_P2_0_8 - _lh_kingincheck_LH_P2_1_8) = (_lh_kingincheck_LH_P2_0_9 - _lh_kingincheck_LH_P2_1_9)) && ((emptyAtAll_lh__d2 _lh_kingincheck_arg2_1) (fun xeye_7 -> 
//│ 		                                (let rec _lh_matchIdent_5_0 = xeye_7 in
//│ 		                                  (match _lh_matchIdent_5_0 with
//│ 		                                    | `LH_P2(_lh_kingincheck_LH_P2_0_1_3, _lh_kingincheck_LH_P2_1_1_3) -> 
//│ 		                                      ((((_lh_kingincheck_LH_P2_0_1_3 - _lh_kingincheck_LH_P2_1_1_3) = (_lh_kingincheck_LH_P2_0_9 - _lh_kingincheck_LH_P2_1_9)) && (((min_lh__d2 _lh_kingincheck_LH_P2_0_8) _lh_kingincheck_LH_P2_0_9) < _lh_kingincheck_LH_P2_0_1_3)) && (_lh_kingincheck_LH_P2_0_1_3 < ((max_lh__d4 _lh_kingincheck_LH_P2_0_8) _lh_kingincheck_LH_P2_0_9)))))))))
//│ 		                            | `Knight -> 
//│ 		                              ((((abs_lh__d4 (_lh_kingincheck_LH_P2_0_8 - _lh_kingincheck_LH_P2_0_9)) = 2) && ((abs_lh__d6 (_lh_kingincheck_LH_P2_1_8 - _lh_kingincheck_LH_P2_1_9)) = 1)) || (((abs_lh__d5 (_lh_kingincheck_LH_P2_0_8 - _lh_kingincheck_LH_P2_0_9)) = 1) && ((abs_lh__d7 (_lh_kingincheck_LH_P2_1_8 - _lh_kingincheck_LH_P2_1_9)) = 2)))
//│ 		                            | `Pawn -> 
//│ 		                              (((abs_lh__d3 (_lh_kingincheck_LH_P2_0_8 - _lh_kingincheck_LH_P2_0_9)) = 1) && (let rec _lh_matchIdent_5_1 = _lh_kingincheck_arg1_1 in
//│ 		                                (match _lh_matchIdent_5_1 with
//│ 		                                  | `Black -> 
//│ 		                                    (_lh_kingincheck_LH_P2_1_9 = (_lh_kingincheck_LH_P2_1_8 + 1))
//│ 		                                  | `White -> 
//│ 		                                    (_lh_kingincheck_LH_P2_1_9 = (_lh_kingincheck_LH_P2_1_8 - 1))))))))))) in
//│ 		                (kthreat_1 _lh_kingincheck_LH_P2_0_7)))))) in
//│ 		    ((any_lh__d1 givesCheck_1) ((forcesColoured_lh__d2 (opponent_lh__d4 _lh_kingincheck_arg1_1)) _lh_kingincheck_arg2_1)));;
//│ 		let rec replies_lh__d1 _lh_replies_arg1_0 _lh_replies_arg2_0 _lh_replies_arg3_0 =
//│ 		  (let rec mds_0 = ((moveDetailsFor_lh__d2 _lh_replies_arg2_0) _lh_replies_arg1_0) in
//│ 		    (let rec solnAnd_0 = (fun mifb_0 rest_0 -> 
//│ 		      (let rec _lh_matchIdent_5_2 = mifb_0 in
//│ 		        (match _lh_matchIdent_5_2 with
//│ 		          | `LH_P2(_lh_replies_LH_P2_0_0, _lh_replies_LH_P2_1_0) -> 
//│ 		            (let rec sm_0 = (((solution_lh__d1 _lh_replies_LH_P2_1_0) (opponent_lh__d3 _lh_replies_arg2_0)) (_lh_replies_arg3_0 - 1)) in
//│ 		              (let rec _lh_matchIdent_5_3 = sm_0 in
//│ 		                (match _lh_matchIdent_5_3 with
//│ 		                  | `Nothing -> 
//│ 		                    (`Nothing)
//│ 		                  | `Just(_lh_replies_Just_0_0) -> 
//│ 		                    (let rec _lh_matchIdent_5_4 = rest_0 in
//│ 		                      (match _lh_matchIdent_5_4 with
//│ 		                        | `Nothing -> 
//│ 		                          (`Nothing)
//│ 		                        | `Just(_lh_replies_Just_0_1) -> 
//│ 		                          (`Just((`LH_C((`LH_P2(_lh_replies_LH_P2_0_0, _lh_replies_Just_0_0)), _lh_replies_Just_0_1)))))))))))) in
//│ 		      (if (_lh_replies_arg3_0 = 0) then
//│ 		        (if (null_lh__d1 mds_0) then
//│ 		          (`Just((`LH_N)))
//│ 		        else
//│ 		          (`Nothing))
//│ 		      else
//│ 		        (if (_lh_replies_arg3_0 > 0) then
//│ 		          (((foldr_lh__d6 solnAnd_0) (`Just((`LH_N)))) mds_0)
//│ 		        else
//│ 		          (failwith "msg"(`LH_C('n', (`LH_C(' ', (`LH_C('<', (`LH_C(' ', (`LH_C('0', (`LH_N))))))))))))))))
//│ 		and
//│ 		solution_lh__d1 _lh_solution_arg1_0 _lh_solution_arg2_0 _lh_solution_arg3_0 =
//│ 		  (let rec solnOr_0 = (fun mifb_1 other_0 -> 
//│ 		    (let rec _lh_matchIdent_6_0 = mifb_1 in
//│ 		      (match _lh_matchIdent_6_0 with
//│ 		        | `LH_P2(_lh_solution_LH_P2_0_0, _lh_solution_LH_P2_1_0) -> 
//│ 		          (let rec rsm_0 = (((replies_lh__d1 _lh_solution_LH_P2_1_0) (opponent_lh__d2 _lh_solution_arg2_0)) (_lh_solution_arg3_0 - 1)) in
//│ 		            (let rec _lh_matchIdent_6_1 = rsm_0 in
//│ 		              (match _lh_matchIdent_6_1 with
//│ 		                | `Nothing -> 
//│ 		                  other_0
//│ 		                | `Just(_lh_solution_Just_0_0) -> 
//│ 		                  (match _lh_solution_Just_0_0 with
//│ 		                    | `LH_N -> 
//│ 		                      (if ((kingincheck_lh__d1 (opponent_lh__d1 _lh_solution_arg2_0)) _lh_solution_LH_P2_1_0) then
//│ 		                        (`Just((`Solution(_lh_solution_LH_P2_0_0, (`LH_N)))))
//│ 		                      else
//│ 		                        other_0)
//│ 		                    | _ -> 
//│ 		                      (`Just((`Solution(_lh_solution_LH_P2_0_0, _lh_solution_Just_0_0))))))))))) in
//│ 		    (if (_lh_solution_arg3_0 > 0) then
//│ 		      (let rec mds_1 = ((moveDetailsFor_lh__d1 _lh_solution_arg2_0) _lh_solution_arg1_0) in
//│ 		        (((foldr_lh__d2 solnOr_0) (`Nothing)) mds_1))
//│ 		    else
//│ 		      (failwith "msg"(`LH_C('n', (`LH_C(' ', (`LH_C('<', (`LH_C('=', (`LH_C(' ', (`LH_C('0', (`LH_N))))))))))))))));;
//│ 		let rec solve_lh__d1 _lh_solve_arg1_0 _lh_solve_arg2_0 _lh_solve_arg3_0 =
//│ 		  (showResult_lh__d1 (((solution_lh__d1 _lh_solve_arg1_0) _lh_solve_arg2_0) ((2 * _lh_solve_arg3_0) - 1)));;
//│ 		let rec mappend_lh__d5 xs_3_1 ys_3_1 =
//│ 		  (match xs_3_1 with
//│ 		    | `LH_C(h_5_9, t_5_9) -> 
//│ 		      (`LH_C(h_5_9, ((mappend_lh__d5 t_5_9) ys_3_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_3_1);;
//│ 		let rec mappend_lh__d6 xs_3_0 ys_3_0 =
//│ 		  (match xs_3_0 with
//│ 		    | `LH_C(h_5_8, t_5_8) -> 
//│ 		      (`LH_C(h_5_8, ((mappend_lh__d6 t_5_8) ys_3_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_3_0);;
//│ 		let rec mappend_lh__d4 xs_3_2 ys_3_2 =
//│ 		  (match xs_3_2 with
//│ 		    | `LH_C(h_6_0, t_6_0) -> 
//│ 		      (`LH_C(h_6_0, ((mappend_lh__d4 t_6_0) ys_3_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_3_2);;
//│ 		let rec mappend_lh__d7 xs_2_9 ys_2_9 =
//│ 		  (match xs_2_9 with
//│ 		    | `LH_C(h_5_7, t_5_7) -> 
//│ 		      (`LH_C(h_5_7, ((mappend_lh__d7 t_5_7) ys_2_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_9);;
//│ 		let rec mappend_lh__d2 xs_3_4 ys_3_4 =
//│ 		  (match xs_3_4 with
//│ 		    | `LH_C(h_6_2, t_6_2) -> 
//│ 		      (`LH_C(h_6_2, ((mappend_lh__d2 t_6_2) ys_3_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_3_4);;
//│ 		let rec mappend_lh__d8 xs_2_8 ys_2_8 =
//│ 		  (match xs_2_8 with
//│ 		    | `LH_C(h_5_6, t_5_6) -> 
//│ 		      (`LH_C(h_5_6, ((mappend_lh__d8 t_5_6) ys_2_8)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_8);;
//│ 		let rec map_lh__d1 f_9 ls_2_9 =
//│ 		  (match ls_2_9 with
//│ 		    | `LH_C(h_5_4, t_5_4) -> 
//│ 		      (`LH_C((f_9 h_5_4), ((map_lh__d1 f_9) t_5_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec enumFromTo_lh__d1 a_7 b_1_0 =
//│ 		  (if (a_7 <= b_1_0) then
//│ 		    (`LH_C(a_7, ((enumFromTo_lh__d1 (a_7 + 1)) b_1_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec reverse_helper_lh__d1 ls_2_6 a_5 =
//│ 		  (match ls_2_6 with
//│ 		    | `LH_C(h_4_8, t_4_8) -> 
//│ 		      ((reverse_helper_lh__d1 t_4_8) (`LH_C(h_4_8, a_5)))
//│ 		    | `LH_N -> 
//│ 		      a_5);;
//│ 		let rec reverse_lh__d1 ls_3_1 =
//│ 		  ((reverse_helper_lh__d1 ls_3_1) (`LH_N));;
//│ 		let rec toLower_lh__d1 _lh_toLower_arg1_0 =
//│ 		  (let rec _lh_matchIdent_4_3 = _lh_toLower_arg1_0 in
//│ 		    (match _lh_matchIdent_4_3 with
//│ 		      | 'A' -> 
//│ 		        'a'
//│ 		      | 'B' -> 
//│ 		        'b'
//│ 		      | 'C' -> 
//│ 		        'c'
//│ 		      | 'D' -> 
//│ 		        'd'
//│ 		      | 'E' -> 
//│ 		        'e'
//│ 		      | 'F' -> 
//│ 		        'f'
//│ 		      | 'G' -> 
//│ 		        'g'
//│ 		      | 'H' -> 
//│ 		        'h'
//│ 		      | 'I' -> 
//│ 		        'i'
//│ 		      | 'J' -> 
//│ 		        'j'
//│ 		      | 'K' -> 
//│ 		        'k'
//│ 		      | 'L' -> 
//│ 		        'l'
//│ 		      | 'M' -> 
//│ 		        'm'
//│ 		      | 'N' -> 
//│ 		        'n'
//│ 		      | 'O' -> 
//│ 		        'o'
//│ 		      | 'P' -> 
//│ 		        'p'
//│ 		      | 'Q' -> 
//│ 		        'q'
//│ 		      | 'R' -> 
//│ 		        'r'
//│ 		      | 'S' -> 
//│ 		        's'
//│ 		      | 'T' -> 
//│ 		        't'
//│ 		      | 'U' -> 
//│ 		        'u'
//│ 		      | 'V' -> 
//│ 		        'v'
//│ 		      | 'W' -> 
//│ 		        'w'
//│ 		      | 'X' -> 
//│ 		        'x'
//│ 		      | 'Y' -> 
//│ 		        'y'
//│ 		      | 'Z' -> 
//│ 		        'z'
//│ 		      | _ -> 
//│ 		        _lh_matchIdent_4_3));;
//│ 		let rec kindToChar_lh__d1 _lh_kindToChar_arg1_1 =
//│ 		  (let rec _lh_matchIdent_4_2 = _lh_kindToChar_arg1_1 in
//│ 		    (match _lh_matchIdent_4_2 with
//│ 		      | `King -> 
//│ 		        'K'
//│ 		      | `Queen -> 
//│ 		        'Q'
//│ 		      | `Rook -> 
//│ 		        'R'
//│ 		      | `Bishop -> 
//│ 		        'B'
//│ 		      | `Knight -> 
//│ 		        'N'
//│ 		      | `Pawn -> 
//│ 		        'P'));;
//│ 		let rec pieceToChar_lh__d1 _lh_pieceToChar_arg1_0 =
//│ 		  (match _lh_pieceToChar_arg1_0 with
//│ 		    | `LH_P2(_lh_pieceToChar_LH_P2_0_0, _lh_pieceToChar_LH_P2_1_0) -> 
//│ 		      (match _lh_pieceToChar_LH_P2_0_0 with
//│ 		        | `Black -> 
//│ 		          (kindToChar_lh__d1 _lh_pieceToChar_LH_P2_1_0)
//│ 		        | `White -> 
//│ 		          (toLower_lh__d1 (kindToChar_lh__d2 _lh_pieceToChar_LH_P2_1_0))));;
//│ 		let rec mappend_lh__d9 xs_2_7 ys_2_7 =
//│ 		  (match xs_2_7 with
//│ 		    | `LH_C(h_5_1, t_5_1) -> 
//│ 		      (`LH_C(h_5_1, ((mappend_lh__d9 t_5_1) ys_2_7)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_7);;
//│ 		let rec mappend_lh__d1_d9 xs_1_7 ys_1_7 =
//│ 		  (match xs_1_7 with
//│ 		    | `LH_C(h_3_1, t_3_1) -> 
//│ 		      (`LH_C(h_3_1, ((mappend_lh__d1_d9 t_3_1) ys_1_7)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_7);;
//│ 		let rec concat_lh__d1 lss_1 =
//│ 		  (match lss_1 with
//│ 		    | `LH_C(h_4_9, t_4_9) -> 
//│ 		      ((mappend_lh__d1_d9 h_4_9) (concat_lh__d1 t_4_9))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec unlines_lh__d1 _lh_unlines_arg1_0 =
//│ 		  (concat_lh__d1 ((map_lh__d2 (fun l_0 -> 
//│ 		    ((mappend_lh__d9 l_0) (`LH_C('|', (`LH_N)))))) _lh_unlines_arg1_0));;
//│ 		let rec enumFromTo_lh__d2 a_6 b_9 =
//│ 		  (if (a_6 <= b_9) then
//│ 		    (`LH_C(a_6, ((enumFromTo_lh__d2 (a_6 + 1)) b_9)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec foldr_lh__d1 f_1_0 i_6 ls_3_0 =
//│ 		  (match ls_3_0 with
//│ 		    | `LH_C(h_5_5, t_5_5) -> 
//│ 		      ((f_1_0 h_5_5) (((foldr_lh__d1 f_1_0) i_6) t_5_5))
//│ 		    | `LH_N -> 
//│ 		      i_6);;
//│ 		let rec showBoard_lh__d1 _lh_showBoard_arg1_0 =
//│ 		  (let rec showRank_0 = (fun r_0 -> 
//│ 		    (let rec consFile_0 = (fun f_1_1 s_0 -> 
//│ 		      (let rec _lh_matchIdent_6_2 = ((pieceAt_lh__d1 _lh_showBoard_arg1_0) (`LH_P2(f_1_1, r_0))) in
//│ 		        (match _lh_matchIdent_6_2 with
//│ 		          | `Nothing -> 
//│ 		            ((mappend_lh__d8 (`LH_C(' ', (`LH_C('-', (`LH_N)))))) s_0)
//│ 		          | `Just(_lh_showBoard_Just_0_0) -> 
//│ 		            (`LH_C(' ', (`LH_C((pieceToChar_lh__d1 _lh_showBoard_Just_0_0), s_0))))))) in
//│ 		      (((foldr_lh__d1 consFile_0) (`LH_N)) ((enumFromTo_lh__d2 1) 8)))) in
//│ 		    (unlines_lh__d1 ((map_lh__d1 showRank_0) (reverse_lh__d1 ((enumFromTo_lh__d1 1) 8)))));;
//│ 		let rec zipWith_lh__d1 f_1 xs_1_6 ys_1_6 =
//│ 		  (match xs_1_6 with
//│ 		    | `LH_C(hx_0, tx_0) -> 
//│ 		      (match ys_1_6 with
//│ 		        | `LH_C(hy_0, ty_0) -> 
//│ 		          (`LH_C(((f_1 hx_0) hy_0), (((zipWith_lh__d1 f_1) tx_0) ty_0)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec enumFromTo_lh__d3 a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh__d3 (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec filter_lh__d1 f_6 ls_2_5 =
//│ 		  (match ls_2_5 with
//│ 		    | `LH_C(h_4_7, t_4_7) -> 
//│ 		      (if (f_6 h_4_7) then
//│ 		        (`LH_C(h_4_7, ((filter_lh__d1 f_6) t_4_7)))
//│ 		      else
//│ 		        ((filter_lh__d1 f_6) t_4_7))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec isUpper_lh__d1 _lh_isUpper_arg1_0 =
//│ 		  (let rec _lh_matchIdent_0 = _lh_isUpper_arg1_0 in
//│ 		    (match _lh_matchIdent_0 with
//│ 		      | 'A' -> 
//│ 		        true
//│ 		      | 'B' -> 
//│ 		        true
//│ 		      | 'C' -> 
//│ 		        true
//│ 		      | 'D' -> 
//│ 		        true
//│ 		      | 'E' -> 
//│ 		        true
//│ 		      | 'F' -> 
//│ 		        true
//│ 		      | 'G' -> 
//│ 		        true
//│ 		      | 'H' -> 
//│ 		        true
//│ 		      | 'I' -> 
//│ 		        true
//│ 		      | 'J' -> 
//│ 		        true
//│ 		      | 'K' -> 
//│ 		        true
//│ 		      | 'L' -> 
//│ 		        true
//│ 		      | 'M' -> 
//│ 		        true
//│ 		      | 'N' -> 
//│ 		        true
//│ 		      | 'O' -> 
//│ 		        true
//│ 		      | 'P' -> 
//│ 		        true
//│ 		      | 'Q' -> 
//│ 		        true
//│ 		      | 'R' -> 
//│ 		        true
//│ 		      | 'S' -> 
//│ 		        true
//│ 		      | 'T' -> 
//│ 		        true
//│ 		      | 'U' -> 
//│ 		        true
//│ 		      | 'V' -> 
//│ 		        true
//│ 		      | 'W' -> 
//│ 		        true
//│ 		      | 'X' -> 
//│ 		        true
//│ 		      | 'Y' -> 
//│ 		        true
//│ 		      | 'Z' -> 
//│ 		        true
//│ 		      | _ -> 
//│ 		        false));;
//│ 		let rec parseSquare_lh__d1 _lh_parseSquare_arg1_0 _lh_parseSquare_arg2_0 _lh_parseSquare_arg3_0 =
//│ 		  (match _lh_parseSquare_arg3_0 with
//│ 		    | '-' -> 
//│ 		      (`LH_N)
//│ 		    | _ -> 
//│ 		      (let rec clr_0 = (if (isUpper_lh__d1 _lh_parseSquare_arg3_0) then
//│ 		        (`Black)
//│ 		      else
//│ 		        (`White)) in
//│ 		        (let rec kin_0 = (let rec _lh_matchIdent_4 = (toLower_lh__d1 _lh_parseSquare_arg3_0) in
//│ 		          (match _lh_matchIdent_4 with
//│ 		            | 'k' -> 
//│ 		              (`King)
//│ 		            | 'q' -> 
//│ 		              (`Queen)
//│ 		            | 'r' -> 
//│ 		              (`Rook)
//│ 		            | 'b' -> 
//│ 		              (`Bishop)
//│ 		            | 'n' -> 
//│ 		              (`Knight)
//│ 		            | 'p' -> 
//│ 		              (`Pawn))) in
//│ 		          (`LH_C((`LH_P2((`LH_P2(clr_0, kin_0)), (`LH_P2(_lh_parseSquare_arg2_0, _lh_parseSquare_arg1_0)))), (`LH_N))))));;
//│ 		let rec parseRank_lh__d1 _lh_parseRank_arg1_0 _lh_parseRank_arg2_0 =
//│ 		  ((fun _lh_funcomp_x_0 -> 
//│ 		    ((fun _lh_funcomp_x_1 -> 
//│ 		      (concat_lh__d2 (((zipWith_lh__d1 (parseSquare_lh__d1 _lh_parseRank_arg1_0)) ((enumFromTo_lh__d3 1) 8)) _lh_funcomp_x_1))) ((filter_lh__d1 (fun x_3 -> 
//│ 		      (not (x_3 = ' ')))) _lh_funcomp_x_0))) _lh_parseRank_arg2_0);;
//│ 		let rec putPieceAt_lh__d1 _lh_putPieceAt_arg1_2 _lh_putPieceAt_arg2_2 _lh_putPieceAt_arg3_2 =
//│ 		  (match _lh_putPieceAt_arg2_2 with
//│ 		    | `LH_P2(_lh_putPieceAt_LH_P2_0_2, _lh_putPieceAt_LH_P2_1_2) -> 
//│ 		      (match _lh_putPieceAt_LH_P2_0_2 with
//│ 		        | `White -> 
//│ 		          (match _lh_putPieceAt_arg3_2 with
//│ 		            | `Board(_lh_putPieceAt_Board_0_4, _lh_putPieceAt_Board_1_4) -> 
//│ 		              (`Board((`LH_C((`LH_P2(_lh_putPieceAt_LH_P2_1_2, _lh_putPieceAt_arg1_2)), _lh_putPieceAt_Board_0_4)), _lh_putPieceAt_Board_1_4)))
//│ 		        | `Black -> 
//│ 		          (match _lh_putPieceAt_arg3_2 with
//│ 		            | `Board(_lh_putPieceAt_Board_0_5, _lh_putPieceAt_Board_1_5) -> 
//│ 		              (`Board(_lh_putPieceAt_Board_0_5, (`LH_C((`LH_P2(_lh_putPieceAt_LH_P2_1_2, _lh_putPieceAt_arg1_2)), _lh_putPieceAt_Board_1_5)))))));;
//│ 		let rec emptyBoard_lh__d1 =
//│ 		  (`Board((`LH_N), (`LH_N)));;
//│ 		let rec reverse_lh__d2 ls_1_3 =
//│ 		  ((reverse_helper_lh__d1 ls_1_3) (`LH_N));;
//│ 		let rec parseBoard_lh__d1 _lh_parseBoard_arg1_0 =
//│ 		  (let rec addPiece_0 = (fun p_sq_0 -> 
//│ 		    (let rec _lh_matchIdent_4_0 = p_sq_0 in
//│ 		      (match _lh_matchIdent_4_0 with
//│ 		        | `LH_P2(_lh_parseBoard_LH_P2_0_0, _lh_parseBoard_LH_P2_1_0) -> 
//│ 		          ((putPieceAt_lh__d1 _lh_parseBoard_LH_P2_1_0) _lh_parseBoard_LH_P2_0_0)))) in
//│ 		    ((fun _lh_funcomp_x_2 -> 
//│ 		      ((fun _lh_funcomp_x_3 -> 
//│ 		        (((foldr_lh__d7 addPiece_0) emptyBoard_lh__d1) (concat_lh__d2 _lh_funcomp_x_3))) (((zipWith_lh__d1 parseRank_lh__d1) (reverse_lh__d2 ((enumFromTo_lh__d3 1) 8))) _lh_funcomp_x_2))) _lh_parseBoard_arg1_0));;
//│ 		let rec head_lh__d1 ls_1_4 =
//│ 		  (match ls_1_4 with
//│ 		    | `LH_C(h_3_0, t_3_0) -> 
//│ 		      h_3_0
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec break_lh__d1 _lh_break_arg1_0 _lh_break_arg2_0 =
//│ 		  (match _lh_break_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2((`LH_N), (`LH_N)))
//│ 		    | `LH_C(_lh_break_LH_C_0_0, _lh_break_LH_C_1_0) -> 
//│ 		      (if (_lh_break_arg1_0 _lh_break_LH_C_0_0) then
//│ 		        (`LH_P2((`LH_N), (`LH_C(_lh_break_LH_C_0_0, _lh_break_LH_C_1_0))))
//│ 		      else
//│ 		        (let rec _lh_matchIdent_3_9 = ((break_lh__d1 _lh_break_arg1_0) _lh_break_LH_C_1_0) in
//│ 		          (match _lh_matchIdent_3_9 with
//│ 		            | `LH_P2(_lh_break_LH_P2_0_0, _lh_break_LH_P2_1_0) -> 
//│ 		              (`LH_P2((`LH_C(_lh_break_LH_C_0_0, _lh_break_LH_P2_0_0)), _lh_break_LH_P2_1_0))))));;
//│ 		let rec dropWhile_lh__d1 _lh_dropWhile_arg1_0 _lh_dropWhile_arg2_0 =
//│ 		  (match _lh_dropWhile_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_dropWhile_LH_C_0_0, _lh_dropWhile_LH_C_1_0) -> 
//│ 		      (if (_lh_dropWhile_arg1_0 _lh_dropWhile_LH_C_0_0) then
//│ 		        ((dropWhile_lh__d1 _lh_dropWhile_arg1_0) _lh_dropWhile_LH_C_1_0)
//│ 		      else
//│ 		        (`LH_C(_lh_dropWhile_LH_C_0_0, _lh_dropWhile_LH_C_1_0))));;
//│ 		let rec words_lh__d1 _lh_words_arg1_0 =
//│ 		  (let rec _lh_matchIdent_2_5 = ((dropWhile_lh__d1 (fun x_4 -> 
//│ 		    (x_4 = ' '))) _lh_words_arg1_0) in
//│ 		    (match _lh_matchIdent_2_5 with
//│ 		      | `LH_N -> 
//│ 		        (`LH_N)
//│ 		      | _ -> 
//│ 		        (let rec _lh_matchIdent_2_6 = ((break_lh__d1 (fun x_5 -> 
//│ 		          (x_5 = ' '))) _lh_matchIdent_2_5) in
//│ 		          (match _lh_matchIdent_2_6 with
//│ 		            | `LH_P2(_lh_words_LH_P2_0_0, _lh_words_LH_P2_1_0) -> 
//│ 		              (`LH_C(_lh_words_LH_P2_0_0, (words_lh__d1 _lh_words_LH_P2_1_0)))))));;
//│ 		let rec parseGoal_lh__d1 _lh_parseGoal_arg1_0 =
//│ 		  (match _lh_parseGoal_arg1_0 with
//│ 		    | `LH_C(_lh_parseGoal_LH_C_0_0, _lh_parseGoal_LH_C_1_0) -> 
//│ 		      (match _lh_parseGoal_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (let rec ws_0 = (words_lh__d1 _lh_parseGoal_LH_C_0_0) in
//│ 		            (let rec c_0 = (if ((head_lh__d1 ws_0) = (`LH_C('B', (`LH_C('l', (`LH_C('a', (`LH_C('c', (`LH_C('k', (`LH_N)))))))))))) then
//│ 		              (`Black)
//│ 		            else
//│ 		              (`White)) in
//│ 		              (let rec n_3 = 2 in
//│ 		                (`LH_P2(c_0, n_3)))))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec drop_lh__d1 _lh_drop_arg1_0 _lh_drop_arg2_0 =
//│ 		  (match _lh_drop_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0) -> 
//│ 		      (if (_lh_drop_arg1_0 <= 0) then
//│ 		        (`LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0))
//│ 		      else
//│ 		        ((drop_lh__d1 (_lh_drop_arg1_0 - 1)) _lh_drop_LH_C_1_0)));;
//│ 		let rec take_lh__d2 n_1 ls_1_0 =
//│ 		  (if (n_1 > 0) then
//│ 		    (match ls_1_0 with
//│ 		      | `LH_C(h_2_6, t_2_6) -> 
//│ 		        (`LH_C(h_2_6, ((take_lh__d2 (n_1 - 1)) t_2_6)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec splitAt_lh__d1 _lh_splitAt_arg1_0 _lh_splitAt_arg2_0 =
//│ 		  (`LH_P2(((take_lh__d2 _lh_splitAt_arg1_0) _lh_splitAt_arg2_0), ((drop_lh__d1 _lh_splitAt_arg1_0) _lh_splitAt_arg2_0)));;
//│ 		let rec take_lh__d1 n_2 ls_1_1 =
//│ 		  (if (n_2 > 0) then
//│ 		    (match ls_1_1 with
//│ 		      | `LH_C(h_2_7, t_2_7) -> 
//│ 		        (`LH_C(h_2_7, ((take_lh__d1 (n_2 - 1)) t_2_7)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec comment_lh__d1 _lh_comment_arg1_0 =
//│ 		  ((_lh_comment_arg1_0 = (`LH_N)) || (((take_lh__d1 2) _lh_comment_arg1_0) = (`LH_C('-', (`LH_C('-', (`LH_N)))))));;
//│ 		let rec parseProblem_lh__d1 _lh_parseProblem_arg1_0 =
//│ 		  (let rec bdtxt_gltxt_0 = ((splitAt_lh__d1 8) ((filter_lh__d1 (fun _lh_funcomp_x_4 -> 
//│ 		    (not (comment_lh__d1 _lh_funcomp_x_4)))) _lh_parseProblem_arg1_0)) in
//│ 		    (let rec _lh_matchIdent_5_8 = bdtxt_gltxt_0 in
//│ 		      (match _lh_matchIdent_5_8 with
//│ 		        | `LH_P2(_lh_parseProblem_LH_P2_0_0, _lh_parseProblem_LH_P2_1_0) -> 
//│ 		          (let rec bd_0 = (parseBoard_lh__d1 _lh_parseProblem_LH_P2_0_0) in
//│ 		            (let rec gl_0 = (parseGoal_lh__d1 _lh_parseProblem_LH_P2_1_0) in
//│ 		              (`LH_P2(bd_0, gl_0)))))));;
//│ 		let rec lines_lh__d1 _lh_lines_arg1_0 =
//│ 		  (let rec _lh_matchIdent_5_6 = ((break_lh__d1 (fun x_9 -> 
//│ 		    (x_9 = '|'))) _lh_lines_arg1_0) in
//│ 		    (match _lh_matchIdent_5_6 with
//│ 		      | `LH_P2(_lh_lines_LH_P2_0_0, _lh_lines_LH_P2_1_0) -> 
//│ 		        (`LH_C(_lh_lines_LH_P2_0_0, (let rec _lh_matchIdent_5_7 = _lh_lines_LH_P2_1_0 in
//│ 		          (match _lh_matchIdent_5_7 with
//│ 		            | `LH_N -> 
//│ 		              (`LH_N)
//│ 		            | `LH_C(_lh_lines_LH_C_0_0, _lh_lines_LH_C_1_0) -> 
//│ 		              (lines_lh__d1 _lh_lines_LH_C_1_0)))))));;
//│ 		let rec readProblem_lh__d1 _lh_readProblem_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_5 -> 
//│ 		    (parseProblem_lh__d1 (lines_lh__d1 _lh_funcomp_x_5))) _lh_readProblem_arg1_0);;
//│ 		let rec testMate_nofib_lh__d1 _lh_testMate_nofib_arg1_0 =
//│ 		  (let rec input_0 = (`LH_C('-', (`LH_C('-', (`LH_C(' ', (`LH_C('A', (`LH_C('.', (`LH_C(' ', (`LH_C('E', (`LH_C('l', (`LH_C('l', (`LH_C('e', (`LH_C('r', (`LH_C('m', (`LH_C('a', (`LH_C('n', (`LH_C('|', (`LH_C('-', (`LH_C('-', (`LH_C(' ', (`LH_C('1', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('p', (`LH_C('r', (`LH_C('i', (`LH_C('z', (`LH_C('e', (`LH_C(',', (`LH_C(' ', (`LH_C('L', (`LH_C('u', (`LH_C('i', (`LH_C('g', (`LH_C('i', (`LH_C(' ', (`LH_C('C', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('u', (`LH_C('r', (`LH_C('i', (`LH_C('n', (`LH_C('i', (`LH_C(',', (`LH_C(' ', (`LH_C('G', (`LH_C('e', (`LH_C('n', (`LH_C('o', (`LH_C('a', (`LH_C(',', (`LH_C(' ', (`LH_C('1', (`LH_C('9', (`LH_C('2', (`LH_C('5', (`LH_C('|', (`LH_C('-', (`LH_C('-', (`LH_C(' ', (`LH_C('`', (`LH_C('O', (`LH_C('n', (`LH_C('e', (`LH_C(' ', (`LH_C('o', (`LH_C('f', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('v', (`LH_C('e', (`LH_C('r', (`LH_C('y', (`LH_C(' ', (`LH_C('b', (`LH_C('e', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('m', (`LH_C('o', (`LH_C('d', (`LH_C('e', (`LH_C('r', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('w', (`LH_C('o', (`LH_C('-', (`LH_C('m', (`LH_C('o', (`LH_C('v', (`LH_C('e', (`LH_C('r', (`LH_C('s', (`LH_C(',', (`LH_C('|', (`LH_C('-', (`LH_C('-', (`LH_C(' ', (`LH_C('u', (`LH_C('n', (`LH_C('s', (`LH_C('u', (`LH_C('r', (`LH_C('p', (`LH_C('a', (`LH_C('s', (`LH_C('s', (`LH_C('e', (`LH_C('d', (`LH_C(' ', (`LH_C('f', (`LH_C('o', (`LH_C('r', (`LH_C(' ', (`LH_C('b', (`LH_C('e', (`LH_C('a', (`LH_C('u', (`LH_C('t', (`LH_C('y', (`LH_C(' ', (`LH_C('o', (`LH_C('f', (`LH_C(' ', (`LH_C('i', (`LH_C('d', (`LH_C('e', (`LH_C('a', (`LH_C(' ', (`LH_C('a', (`LH_C('n', (`LH_C('d', (`LH_C('|', (`LH_C('-', (`LH_C('-', (`LH_C(' ', (`LH_C('e', (`LH_C('x', (`LH_C('e', (`LH_C('c', (`LH_C('u', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C('.', (`LH_C(' ', (`LH_C('(', (`LH_C('P', (`LH_C('h', (`LH_C('i', (`LH_C('l', (`LH_C('l', (`LH_C('i', (`LH_C('p', (`LH_C('s', (`LH_C(')', (`LH_C('|', (`LH_C('|', (`LH_C('b', (`LH_C(' ', (`LH_C('k', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('|', (`LH_C('-', (`LH_C(' ', (`LH_C('n', (`LH_C(' ', (`LH_C('p', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('|', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('|', (`LH_C('r', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('p', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('|', (`LH_C('R', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('K', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('|', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('r', (`LH_C(' ', (`LH_C('P', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('p', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('|', (`LH_C('-', (`LH_C(' ', (`LH_C('Q', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('|', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('-', (`LH_C(' ', (`LH_C('q', (`LH_C(' ', (`LH_C('B', (`LH_C(' ', (`LH_C('B', (`LH_C(' ', (`LH_C('|', (`LH_C('|', (`LH_C('W', (`LH_C('h', (`LH_C('i', (`LH_C('t', (`LH_C('e', (`LH_C(' ', (`LH_C('t', (`LH_C('o', (`LH_C(' ', (`LH_C('p', (`LH_C('l', (`LH_C('a', (`LH_C('y', (`LH_C(' ', (`LH_C('a', (`LH_C('n', (`LH_C('d', (`LH_C(' ', (`LH_C('m', (`LH_C('a', (`LH_C('t', (`LH_C('e', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C(' ', (`LH_C('2', (`LH_C('|', (`in
//│ 		    (let rec bdcn_0 = (readProblem_lh__d1 input_0) in
//│ 		      (let rec _lh_matchIdent_6_3 = bdcn_0 in
//│ 		        (match _lh_matchIdent_6_3 with
//│ 		          | `LH_P2(_lh_testMate_nofib_LH_P2_0_0, _lh_testMate_nofib_LH_P2_1_0) -> 
//│ 		            (match _lh_testMate_nofib_LH_P2_1_0 with
//│ 		              | `LH_P2(_lh_testMate_nofib_LH_P2_0_1, _lh_testMate_nofib_LH_P2_1_1) -> 
//│ 		                ((mappend_lh__d5 ((mappend_lh__d2 ((mappend_lh__d6 ((mappend_lh__d7 ((mappend_lh__d3 ((mappend_lh__d1 ((mappend_lh__d4 (showBoard_lh__d1 _lh_testMate_nofib_LH_P2_0_0)) (`LH_C('|', (`LH_N))))) (showColour_lh__d1 _lh_testMate_nofib_LH_P2_0_1))) (`LH_C(' ', (`LH_C('t', (`LH_C('o', (`LH_C(' ', (`LH_C('m', (`LH_C('o', (`LH_C('v', (`LH_C('e', (`LH_C(' ', (`LH_C('a', (`LH_C('n', (`LH_C('d', (`LH_C(' ', (`LH_C('m', (`LH_C('a', (`LH_C('t', (`LH_C('e', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))) (string_of_int _lh_testMate_nofib_LH_P2_1_1))) (`LH_C('|', (`LH_N))))) (`LH_C('|', (`LH_N))))) (((solve_lh__d1 _lh_testMate_nofib_LH_P2_0_0) _lh_testMate_nofib_LH_P2_0_1) _lh_testMate_nofib_LH_P2_1_1)))))));;
//│ 		(testMate_nofib_lh__d1 0)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< after expansion <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 390 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => if (n⁰ == 0) then h⁰ else atIndex_lh_₁((n⁰ - 1), t⁰) | LH_N  => error⁰}: 116
//│ [LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]: 391 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => if (n⁰ == 0) then h⁰ else atIndex_lh_₁((n⁰ - 1), t⁰) | LH_N  => error⁰}: 116
//│ [LH_C [LH_C 'K' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]]: 392 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => if (n⁰ == 0) then h⁰ else atIndex_lh_₁((n⁰ - 1), t⁰) | LH_N  => error⁰}: 116
//│ [LH_C [LH_C 'K' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]]]: 393 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => if (n⁰ == 0) then h⁰ else atIndex_lh_₁((n⁰ - 1), t⁰) | LH_N  => error⁰}: 116
//│ [LH_C [LH_C 'K' [LH_N]] [LH_C [LH_C 'K' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]]]]: 394 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => if (n⁰ == 0) then h⁰ else atIndex_lh_₁((n⁰ - 1), t⁰) | LH_N  => error⁰}: 116
//│ [LH_C [LH_C 'Q' [LH_N]] [LH_C [LH_C 'K' [LH_N]] [LH_C [LH_C 'K' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]]]]]: 395 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => if (n⁰ == 0) then h⁰ else atIndex_lh_₁((n⁰ - 1), t⁰) | LH_N  => error⁰}: 116
//│ [LH_C [LH_C 'Q' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'Q' [LH_N]] [LH_C [LH_C 'K' [LH_N]] [LH_C [LH_C 'K' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]]]]]]: 396 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => if (n⁰ == 0) then h⁰ else atIndex_lh_₁((n⁰ - 1), t⁰) | LH_N  => error⁰}: 116
//│ [LH_C [LH_C 'Q' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'Q' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'Q' [LH_N]] [LH_C [LH_C 'K' [LH_N]] [LH_C [LH_C 'K' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]]]]]]]: 397 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => if (n⁰ == 0) then h⁰ else atIndex_lh_₁((n⁰ - 1), t⁰) | LH_N  => error⁰}: 116
//│ [LH_C [LH_C 'Q' [LH_C 'R' [LH_N]]] [LH_C [LH_C 'Q' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'Q' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'Q' [LH_N]] [LH_C [LH_C 'K' [LH_N]] [LH_C [LH_C 'K' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]]]]]]]]: 398 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => if (n⁰ == 0) then h⁰ else atIndex_lh_₁((n⁰ - 1), t⁰) | LH_N  => error⁰}: 116
//│ [LH_N]: 1208 --->
//│ 	case ls²⁷ of {LH_C h⁵⁰ t⁵⁰ => [LH_C f⁷(h⁵⁰) map_lh_₂(f⁷, t⁵⁰)] | LH_N  => [LH_N]}: 4382
//│ [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Knight]] [LH_N]]: 1209 --->
//│ 	case ls²⁷ of {LH_C h⁵⁰ t⁵⁰ => [LH_C f⁷(h⁵⁰) map_lh_₂(f⁷, t⁵⁰)] | LH_N  => [LH_N]}: 4382
//│ [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Bishop]] [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Knight]] [LH_N]]]: 1210 --->
//│ 	case ls²⁷ of {LH_C h⁵⁰ t⁵⁰ => [LH_C f⁷(h⁵⁰) map_lh_₂(f⁷, t⁵⁰)] | LH_N  => [LH_N]}: 4382
//│ [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Rook]] [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Bishop]] [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Knight]] [LH_N]]]]: 1211 --->
//│ 	case ls²⁷ of {LH_C h⁵⁰ t⁵⁰ => [LH_C f⁷(h⁵⁰) map_lh_₂(f⁷, t⁵⁰)] | LH_N  => [LH_N]}: 4382
//│ [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Queen]] [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Rook]] [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Bishop]] [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Knight]] [LH_N]]]]]: 1212 --->
//│ 	case ls²⁷ of {LH_C h⁵⁰ t⁵⁰ => [LH_C f⁷(h⁵⁰) map_lh_₂(f⁷, t⁵⁰)] | LH_N  => [LH_N]}: 4382
//│ [LH_N]: 1357 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {Just _lh_pawnmoves_Just_0⁰ => if not⁰(polyEq⁰(colourOf_lh_₁(_lh_pawnmoves_Just_0⁰), _lh_pawnmoves_arg1⁰)) then [LH_C promote⁰(_lh_listcomp_fun_ls_h⁰, [Just _lh_pawnmoves_Just_0⁰]) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 1349
//│ [LH_C pieceAt_lh_₁(_lh_pawnmoves_arg3⁰, _lh_listcomp_fun_ls_h⁰) [LH_N]]: 1358 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {Just _lh_pawnmoves_Just_0⁰ => if not⁰(polyEq⁰(colourOf_lh_₁(_lh_pawnmoves_Just_0⁰), _lh_pawnmoves_arg1⁰)) then [LH_C promote⁰(_lh_listcomp_fun_ls_h⁰, [Just _lh_pawnmoves_Just_0⁰]) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 1349
//│ [LH_N]: 1387 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {Just _lh_pawnmoves_Just_0⁰ => if not⁰(polyEq⁰(colourOf_lh_₁(_lh_pawnmoves_Just_0⁰), _lh_pawnmoves_arg1⁰)) then [LH_C promote⁰(_lh_listcomp_fun_ls_h⁰, [Just _lh_pawnmoves_Just_0⁰]) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹([LH_C pieceAt_lh_₁(_lh_pawnmoves_arg3⁰, _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => [LH_N]}: 1362
//│ [LH_C [LH_P2 (_lh_pawnmoves_LH_P2_0⁰ - 1) (_lh_pawnmoves_LH_P2_1⁰ + fwd⁰)] [LH_N]]: 1388 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {Just _lh_pawnmoves_Just_0⁰ => if not⁰(polyEq⁰(colourOf_lh_₁(_lh_pawnmoves_Just_0⁰), _lh_pawnmoves_arg1⁰)) then [LH_C promote⁰(_lh_listcomp_fun_ls_h⁰, [Just _lh_pawnmoves_Just_0⁰]) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹([LH_C pieceAt_lh_₁(_lh_pawnmoves_arg3⁰, _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => [LH_N]}: 1362
//│ [LH_C [LH_P2 (_lh_pawnmoves_LH_P2_0⁰ + 1) (_lh_pawnmoves_LH_P2_1⁰ + fwd⁰)] [LH_C [LH_P2 (_lh_pawnmoves_LH_P2_0⁰ - 1) (_lh_pawnmoves_LH_P2_1⁰ + fwd⁰)] [LH_N]]]: 1389 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {Just _lh_pawnmoves_Just_0⁰ => if not⁰(polyEq⁰(colourOf_lh_₁(_lh_pawnmoves_Just_0⁰), _lh_pawnmoves_arg1⁰)) then [LH_C promote⁰(_lh_listcomp_fun_ls_h⁰, [Just _lh_pawnmoves_Just_0⁰]) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹([LH_C pieceAt_lh_₁(_lh_pawnmoves_arg3⁰, _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => [LH_N]}: 1362
//│ [LH_N]: 1609 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]: 1610 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]]: 1611 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]]]: 1612 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]]]]: 1613 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]]]]]: 1614 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]]]]]]: 1615 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ + 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]]]]]]]: 1616 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ + 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ + 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]]]]]]]]: 1617 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_N]: 1794 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]: 1795 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]]: 1796 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]]]: 1797 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]]]]: 1798 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]]]]]: 1799 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]]]]]]: 1800 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]]]]]]]: 1801 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]]]]]]]]: 1802 --->
//│ 	case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332
//│ [LH_N]: 1892 --->
//│ 	case xs⁴ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₃₁(t⁶, ys⁴)] | LH_N  => ys⁴}: 1913
//│ [LH_C ' ' tab_lh_₃((_lh_tab_arg1⁰ - 1))]: 1901 --->
//│ 	case xs⁴ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₃₁(t⁶, ys⁴)] | LH_N  => ys⁴}: 1913
//│ [LH_C h⁶ mappend_lh_₃₁(t⁶, ys⁴)]: 1911 --->
//│ 	case xs³ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃₂(t⁴, ys³)] | LH_N  => ys³}: 1858
//│ [LH_C h⁸ mappend_lh_₂₉(t⁸, ys⁶)]: 1935 --->
//│ 	case xs⁸ of {LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₂₇(t¹¹, ys⁸)] | LH_N  => ys⁸}: 1994
//│ [LH_C h¹⁰ mappend_lh_₂₈(t¹⁰, ys⁷)]: 1958 --->
//│ 	case xs⁹ of {LH_C h¹² t¹² => [LH_C h¹² mappend_lh_₂₆(t¹², ys⁹)] | LH_N  => ys⁹}: 2021
//│ [LH_N]: 1968 --->
//│ 	case xs⁶ of {LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₂₉(t⁸, ys⁶)] | LH_N  => ys⁶}: 1937
//│ [LH_C ' ' tab_lh_₂((_lh_tab_arg1¹ - 1))]: 1977 --->
//│ 	case xs⁶ of {LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₂₉(t⁸, ys⁶)] | LH_N  => ys⁶}: 1937
//│ [LH_C h¹³ mappend_lh_₂₅(t¹³, ys¹⁰)]: 2031 --->
//│ 	case xs¹⁴ of {LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ mappend_lh_₂₁(t¹⁷, ys¹⁴)] | LH_N  => ys¹⁴}: 2096
//│ [LH_C h¹⁵ mappend_lh_₂₃(t¹⁵, ys¹²)]: 2055 --->
//│ 	case xs¹³ of {LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₂₂(t¹⁶, ys¹³)] | LH_N  => ys¹³}: 2069
//│ [LH_N]: 2104 --->
//│ 	case xs¹² of {LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₂₃(t¹⁵, ys¹²)] | LH_N  => ys¹²}: 2057
//│ [LH_C ' ' tab_lh_₁((_lh_tab_arg1² - 1))]: 2113 --->
//│ 	case xs¹² of {LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₂₃(t¹⁵, ys¹²)] | LH_N  => ys¹²}: 2057
//│ [LH_N]: 2749 --->
//│ 	case _lh_parseGoal_arg1⁰ of {LH_C _lh_parseGoal_LH_C_0⁰ _lh_parseGoal_LH_C_1⁰ => case _lh_parseGoal_LH_C_1⁰ of {LH_N  => let ws⁰ = words_lh_₁(_lh_parseGoal_LH_C_0⁰)
//│ in let c⁰ = if polyEq⁰(head_lh_₁(ws⁰), [LH_C 'B' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_N]]]]]]) then [Black] else [White]
//│ in let n³ = 2
//│ in [LH_P2 c⁰ n³] | _  => error⁰} | _  => error⁰}: 4346
//│ [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 2757 --->
//│ 	case _lh_parseGoal_arg1⁰ of {LH_C _lh_parseGoal_LH_C_0⁰ _lh_parseGoal_LH_C_1⁰ => case _lh_parseGoal_LH_C_1⁰ of {LH_N  => let ws⁰ = words_lh_₁(_lh_parseGoal_LH_C_0⁰)
//│ in let c⁰ = if polyEq⁰(head_lh_₁(ws⁰), [LH_C 'B' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_N]]]]]]) then [Black] else [White]
//│ in let n³ = 2
//│ in [LH_P2 c⁰ n³] | _  => error⁰} | _  => error⁰}: 4346
//│ [LH_C h³¹ mappend_lh_₁₉(t³¹, ys¹⁷)]: 2977 --->
//│ 	case xs³² of {LH_C h⁶⁰ t⁶⁰ => [LH_C h⁶⁰ mappend_lh_₄(t⁶⁰, ys³²)] | LH_N  => ys³²}: 5610
//│ [LH_P2 [MoveInFull p¹ _lh_tryMove_LH_P2_1¹ [Move _lh_tryMove_Move_0¹ _lh_tryMove_Move_1¹ _lh_tryMove_Move_2¹]] bd2¹]: 3534 --->
//│ 	case _lh_matchIdent⁶⁰ of {LH_P2 _lh_solution_LH_P2_0⁰ _lh_solution_LH_P2_1⁰ => let rsm⁰ = replies_lh_₁(_lh_solution_LH_P2_1⁰, opponent_lh_₂(_lh_solution_arg2⁰), (_lh_solution_arg3⁰ - 1))
//│ in let _lh_matchIdent⁶¹ = rsm⁰
//│ in case _lh_matchIdent⁶¹ of {Nothing  => other⁰ | Just _lh_solution_Just_0⁰ => case _lh_solution_Just_0⁰ of {LH_N  => if kingincheck_lh_₁(opponent_lh_₁(_lh_solution_arg2⁰), _lh_solution_LH_P2_1⁰) then [Just [Solution _lh_solution_LH_P2_0⁰ [LH_N]]] else other⁰ | _  => [Just [Solution _lh_solution_LH_P2_0⁰ _lh_solution_Just_0⁰]]}}}: 5398
//│ [Just [LH_P2 [MoveInFull p¹ _lh_tryMove_LH_P2_1¹ [Move _lh_tryMove_Move_0¹ _lh_tryMove_Move_1¹ _lh_tryMove_Move_2¹]] bd2¹]]: 3535 --->
//│ 	case _lh_maybe_arg3² of {Nothing  => _lh_maybe_arg1² | Just _lh_maybe_Just_0² => _lh_maybe_arg2²(_lh_maybe_Just_0²)}: 3423
//│ [Nothing]: 3536 --->
//│ 	case _lh_maybe_arg3² of {Nothing  => _lh_maybe_arg1² | Just _lh_maybe_Just_0² => _lh_maybe_arg2²(_lh_maybe_Just_0²)}: 3423
//│ [LH_N]: 3586 --->
//│ 	case xs³ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃₂(t⁴, ys³)] | LH_N  => ys³}: 1858
//│ [LH_C ' ' [LH_N]]: 3587 --->
//│ 	case xs³ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃₂(t⁴, ys³)] | LH_N  => ys³}: 1858
//│ [LH_C 'f' [LH_C ' ' [LH_N]]]: 3588 --->
//│ 	case xs³ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃₂(t⁴, ys³)] | LH_N  => ys³}: 1858
//│ [LH_C 'i' [LH_C 'f' [LH_C ' ' [LH_N]]]]: 3589 --->
//│ 	case xs³ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃₂(t⁴, ys³)] | LH_N  => ys³}: 1858
//│ [LH_N]: 3667 --->
//│ 	case xs⁸ of {LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₂₇(t¹¹, ys⁸)] | LH_N  => ys⁸}: 1994
//│ [LH_C ' ' [LH_N]]: 3668 --->
//│ 	case xs⁸ of {LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₂₇(t¹¹, ys⁸)] | LH_N  => ys⁸}: 1994
//│ [LH_C 'f' [LH_C ' ' [LH_N]]]: 3669 --->
//│ 	case xs⁸ of {LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₂₇(t¹¹, ys⁸)] | LH_N  => ys⁸}: 1994
//│ [LH_C 'i' [LH_C 'f' [LH_C ' ' [LH_N]]]]: 3670 --->
//│ 	case xs⁸ of {LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₂₇(t¹¹, ys⁸)] | LH_N  => ys⁸}: 1994
//│ [LH_N]: 3707 --->
//│ 	case xs⁹ of {LH_C h¹² t¹² => [LH_C h¹² mappend_lh_₂₆(t¹², ys⁹)] | LH_N  => ys⁹}: 2021
//│ [LH_C ' ' [LH_N]]: 3708 --->
//│ 	case xs⁹ of {LH_C h¹² t¹² => [LH_C h¹² mappend_lh_₂₆(t¹², ys⁹)] | LH_N  => ys⁹}: 2021
//│ [LH_C ';' [LH_C ' ' [LH_N]]]: 3709 --->
//│ 	case xs⁹ of {LH_C h¹² t¹² => [LH_C h¹² mappend_lh_₂₆(t¹², ys⁹)] | LH_N  => ys⁹}: 2021
//│ [LH_N]: 3772 --->
//│ 	case xs¹³ of {LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₂₂(t¹⁶, ys¹³)] | LH_N  => ys¹³}: 2069
//│ [LH_C ' ' [LH_N]]: 3773 --->
//│ 	case xs¹³ of {LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₂₂(t¹⁶, ys¹³)] | LH_N  => ys¹³}: 2069
//│ [LH_C 'f' [LH_C ' ' [LH_N]]]: 3774 --->
//│ 	case xs¹³ of {LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₂₂(t¹⁶, ys¹³)] | LH_N  => ys¹³}: 2069
//│ [LH_C 'i' [LH_C 'f' [LH_C ' ' [LH_N]]]]: 3775 --->
//│ 	case xs¹³ of {LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₂₂(t¹⁶, ys¹³)] | LH_N  => ys¹³}: 2069
//│ [LH_N]: 3812 --->
//│ 	case xs¹⁴ of {LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ mappend_lh_₂₁(t¹⁷, ys¹⁴)] | LH_N  => ys¹⁴}: 2096
//│ [LH_C ' ' [LH_N]]: 3813 --->
//│ 	case xs¹⁴ of {LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ mappend_lh_₂₁(t¹⁷, ys¹⁴)] | LH_N  => ys¹⁴}: 2096
//│ [LH_C ';' [LH_C ' ' [LH_N]]]: 3814 --->
//│ 	case xs¹⁴ of {LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ mappend_lh_₂₁(t¹⁷, ys¹⁴)] | LH_N  => ys¹⁴}: 2096
//│ [LH_C h⁴³ mappend_lh_₁₁(t⁴³, ys²⁵)]: 4004 --->
//│ 	case xs²⁴ of {LH_C h⁴² t⁴² => [LH_C h⁴² mappend_lh_₁₂(t⁴², ys²⁴)] | LH_N  => ys²⁴}: 3994
//│ [LH_C h⁴⁵ mappend_lh_₁₀(t⁴⁵, ys²⁶)]: 4027 --->
//│ 	case xs²³ of {LH_C h⁴¹ t⁴¹ => [LH_C h⁴¹ mappend_lh_₁₃(t⁴¹, ys²³)] | LH_N  => ys²³}: 3930
//│ [LH_P2 take_lh_₂(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]: 4247 --->
//│ 	case _lh_matchIdent⁵⁸ of {LH_P2 _lh_parseProblem_LH_P2_0⁰ _lh_parseProblem_LH_P2_1⁰ => let bd⁰ = parseBoard_lh_₁(_lh_parseProblem_LH_P2_0⁰)
//│ in let gl⁰ = parseGoal_lh_₁(_lh_parseProblem_LH_P2_1⁰)
//│ in [LH_P2 bd⁰ gl⁰]}: 5192
//│ [LH_P2 c⁰ n³]: 4339 --->
//│ 	case _lh_testMate_nofib_LH_P2_1⁰ of {LH_P2 _lh_testMate_nofib_LH_P2_0¹ _lh_testMate_nofib_LH_P2_1¹ => mappend_lh_₅(mappend_lh_₂(mappend_lh_₆(mappend_lh_₇(mappend_lh_₃(mappend_lh_₁(mappend_lh_₄(showBoard_lh_₁(_lh_testMate_nofib_LH_P2_0⁰), [LH_C '|' [LH_N]]), showColour_lh_₁(_lh_testMate_nofib_LH_P2_0¹)), [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]), string_of_int⁰(_lh_testMate_nofib_LH_P2_1¹)), [LH_C '|' [LH_N]]), [LH_C '|' [LH_N]]), solve_lh_₁(_lh_testMate_nofib_LH_P2_0⁰, _lh_testMate_nofib_LH_P2_0¹, _lh_testMate_nofib_LH_P2_1¹))}: 6429
//│ [LH_N]: 4368 --->
//│ 	case xs³² of {LH_C h⁶⁰ t⁶⁰ => [LH_C h⁶⁰ mappend_lh_₄(t⁶⁰, ys³²)] | LH_N  => ys³²}: 5610
//│ [LH_P2 _lh_replies_LH_P2_0⁰ _lh_replies_Just_0⁰]: 4881 --->
//│ 	case _lh_insertCompact_arg1⁰ of {LH_P2 _lh_insertCompact_LH_P2_0⁰ _lh_insertCompact_LH_P2_1⁰ => let insert⁰ = (fun _lh_insert_arg1⁰ -> (fun _lh_insert_arg2⁰ -> case _lh_insert_arg2⁰ of {LH_N  => [LH_C _lh_insert_arg1⁰ [LH_N]] | LH_C _lh_insert_LH_C_0⁰ _lh_insert_LH_C_1⁰ => if polyGt⁰(_lh_insert_arg1⁰, _lh_insert_LH_C_0⁰) then [LH_C _lh_insert_LH_C_0⁰ insert⁰(_lh_insert_arg1⁰, _lh_insert_LH_C_1⁰)] else [LH_C _lh_insert_arg1⁰ [LH_C _lh_insert_LH_C_0⁰ _lh_insert_LH_C_1⁰]]}))
//│ in let cs⁰ = compact_lh_₁(_lh_insertCompact_LH_P2_1⁰)
//│ in let ic⁰ = (fun ls²³ -> let _lh_matchIdent³⁸ = ls²³
//│ in case _lh_matchIdent³⁸ of {LH_N  => [LH_C [LH_P2 [LH_C _lh_insertCompact_LH_P2_0⁰ [LH_N]] cs⁰] [LH_N]] | LH_C _lh_insertCompact_LH_C_0⁰ _lh_insertCompact_LH_C_1⁰ => case _lh_insertCompact_LH_C_0⁰ of {LH_P2 _lh_insertCompact_LH_P2_0¹ _lh_insertCompact_LH_P2_1¹ => let a⁴ = showSoln_lh_₂(cs⁰, 1)
//│ in let b⁸ = showSoln_lh_₃(_lh_insertCompact_LH_P2_1¹, 1)
//│ in if polyLt⁰(a⁴, b⁸) then [LH_C [LH_P2 [LH_C _lh_insertCompact_LH_P2_0⁰ [LH_N]] cs⁰] [LH_C [LH_P2 _lh_insertCompact_LH_P2_0¹ _lh_insertCompact_LH_P2_1¹] _lh_insertCompact_LH_C_1⁰]] else if polyEq⁰(a⁴, b⁸) then [LH_C [LH_P2 insert⁰(_lh_insertCompact_LH_P2_0⁰, _lh_insertCompact_LH_P2_0¹) cs⁰] _lh_insertCompact_LH_C_1⁰] else if polyGt⁰(a⁴, b⁸) then [LH_C [LH_P2 _lh_insertCompact_LH_P2_0¹ _lh_insertCompact_LH_P2_1¹] ic⁰(_lh_insertCompact_LH_C_1⁰)] else error⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'a' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]])}})
//│ in ic⁰(_lh_insertCompact_arg2⁰)}: 4167
//│ [LH_C h⁵³ t⁵³]: 4947 --->
//│ 	case ls²⁸ of {LH_C h⁵² t⁵² => f⁸(h⁵², foldr_lh_₂(f⁸, i⁵, t⁵²)) | LH_N  => i⁵}: 4464
//│ [LH_N]: 4979 --->
//│ 	case ls²⁸ of {LH_C h⁵² t⁵² => f⁸(h⁵², foldr_lh_₂(f⁸, i⁵, t⁵²)) | LH_N  => i⁵}: 4464
//│ [LH_N]: 5009 --->
//│ 	case xs²⁴ of {LH_C h⁴² t⁴² => [LH_C h⁴² mappend_lh_₁₂(t⁴², ys²⁴)] | LH_N  => ys²⁴}: 3994
//│ [LH_C ' ' [LH_N]]: 5010 --->
//│ 	case xs²⁴ of {LH_C h⁴² t⁴² => [LH_C h⁴² mappend_lh_₁₂(t⁴², ys²⁴)] | LH_N  => ys²⁴}: 3994
//│ [LH_C '.' [LH_C ' ' [LH_N]]]: 5011 --->
//│ 	case xs²⁴ of {LH_C h⁴² t⁴² => [LH_C h⁴² mappend_lh_₁₂(t⁴², ys²⁴)] | LH_N  => ys²⁴}: 3994
//│ [LH_N]: 5035 --->
//│ 	case xs¹⁹ of {LH_C h³⁷ t³⁷ => [LH_C h³⁷ mappend_lh_₁₇(t³⁷, ys¹⁹)] | LH_N  => ys¹⁹}: 3754
//│ [LH_C ' ' [LH_N]]: 5036 --->
//│ 	case xs¹⁹ of {LH_C h³⁷ t³⁷ => [LH_C h³⁷ mappend_lh_₁₇(t³⁷, ys¹⁹)] | LH_N  => ys¹⁹}: 3754
//│ [LH_C ',' [LH_C ' ' [LH_N]]]: 5037 --->
//│ 	case xs¹⁹ of {LH_C h³⁷ t³⁷ => [LH_C h³⁷ mappend_lh_₁₇(t³⁷, ys¹⁹)] | LH_N  => ys¹⁹}: 3754
//│ [LH_N]: 5061 --->
//│ 	case xs²³ of {LH_C h⁴¹ t⁴¹ => [LH_C h⁴¹ mappend_lh_₁₃(t⁴¹, ys²³)] | LH_N  => ys²³}: 3930
//│ [LH_C ' ' [LH_N]]: 5062 --->
//│ 	case xs²³ of {LH_C h⁴¹ t⁴¹ => [LH_C h⁴¹ mappend_lh_₁₃(t⁴¹, ys²³)] | LH_N  => ys²³}: 3930
//│ [LH_C ';' [LH_C ' ' [LH_N]]]: 5063 --->
//│ 	case xs²³ of {LH_C h⁴¹ t⁴¹ => [LH_C h⁴¹ mappend_lh_₁₃(t⁴¹, ys²³)] | LH_N  => ys²³}: 3930
//│ [LH_N]: 5079 --->
//│ 	case xs²¹ of {LH_C h³⁹ t³⁹ => [LH_C h³⁹ mappend_lh_₁₅(t³⁹, ys²¹)] | LH_N  => ys²¹}: 3874
//│ [LH_C '|' [LH_N]]: 5080 --->
//│ 	case xs²¹ of {LH_C h³⁹ t³⁹ => [LH_C h³⁹ mappend_lh_₁₅(t³⁹, ys²¹)] | LH_N  => ys²¹}: 3874
//│ [LH_C ',' [LH_C '|' [LH_N]]]: 5081 --->
//│ 	case xs²¹ of {LH_C h³⁹ t³⁹ => [LH_C h³⁹ mappend_lh_₁₅(t³⁹, ys²¹)] | LH_N  => ys²¹}: 3874
//│ [LH_N]: 5095 --->
//│ 	case xs¹⁸ of {LH_C h³⁶ t³⁶ => [LH_C h³⁶ mappend_lh_₁₈(t³⁶, ys¹⁸)] | LH_N  => ys¹⁸}: 3742
//│ [LH_C '|' [LH_N]]: 5096 --->
//│ 	case xs¹⁸ of {LH_C h³⁶ t³⁶ => [LH_C h³⁶ mappend_lh_₁₈(t³⁶, ys¹⁸)] | LH_N  => ys¹⁸}: 3742
//│ [LH_C ',' [LH_C '|' [LH_N]]]: 5097 --->
//│ 	case xs¹⁸ of {LH_C h³⁶ t³⁶ => [LH_C h³⁶ mappend_lh_₁₈(t³⁶, ys¹⁸)] | LH_N  => ys¹⁸}: 3742
//│ [LH_N]: 5111 --->
//│ 	case xs²⁰ of {LH_C h³⁸ t³⁸ => [LH_C h³⁸ mappend_lh_₁₆(t³⁸, ys²⁰)] | LH_N  => ys²⁰}: 3847
//│ [LH_C '|' [LH_N]]: 5112 --->
//│ 	case xs²⁰ of {LH_C h³⁸ t³⁸ => [LH_C h³⁸ mappend_lh_₁₆(t³⁸, ys²⁰)] | LH_N  => ys²⁰}: 3847
//│ [LH_C ',' [LH_C '|' [LH_N]]]: 5113 --->
//│ 	case xs²⁰ of {LH_C h³⁸ t³⁸ => [LH_C h³⁸ mappend_lh_₁₆(t³⁸, ys²⁰)] | LH_N  => ys²⁰}: 3847
//│ [LH_P2 bd⁰ gl⁰]: 5189 --->
//│ 	case _lh_matchIdent⁶³ of {LH_P2 _lh_testMate_nofib_LH_P2_0⁰ _lh_testMate_nofib_LH_P2_1⁰ => case _lh_testMate_nofib_LH_P2_1⁰ of {LH_P2 _lh_testMate_nofib_LH_P2_0¹ _lh_testMate_nofib_LH_P2_1¹ => mappend_lh_₅(mappend_lh_₂(mappend_lh_₆(mappend_lh_₇(mappend_lh_₃(mappend_lh_₁(mappend_lh_₄(showBoard_lh_₁(_lh_testMate_nofib_LH_P2_0⁰), [LH_C '|' [LH_N]]), showColour_lh_₁(_lh_testMate_nofib_LH_P2_0¹)), [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]), string_of_int⁰(_lh_testMate_nofib_LH_P2_1¹)), [LH_C '|' [LH_N]]), [LH_C '|' [LH_N]]), solve_lh_₁(_lh_testMate_nofib_LH_P2_0⁰, _lh_testMate_nofib_LH_P2_0¹, _lh_testMate_nofib_LH_P2_1¹))}}: 6430
//│ [LH_C a⁶ enumFromTo_lh_₂((a⁶ + 1), b⁹)]: 5211 --->
//│ 	case ls³⁰ of {LH_C h⁵⁵ t⁵⁵ => f¹⁰(h⁵⁵, foldr_lh_₁(f¹⁰, i⁶, t⁵⁵)) | LH_N  => i⁶}: 5243
//│ [LH_N]: 5212 --->
//│ 	case ls³⁰ of {LH_C h⁵⁵ t⁵⁵ => f¹⁰(h⁵⁵, foldr_lh_₁(f¹⁰, i⁶, t⁵⁵)) | LH_N  => i⁶}: 5243
//│ [LH_C f⁹(h⁵⁴) map_lh_₁(f⁹, t⁵⁴)]: 5225 --->
//│ 	case ls²⁷ of {LH_C h⁵⁰ t⁵⁰ => [LH_C f⁷(h⁵⁰) map_lh_₂(f⁷, t⁵⁰)] | LH_N  => [LH_N]}: 4382
//│ [LH_N]: 5226 --->
//│ 	case ls²⁷ of {LH_C h⁵⁰ t⁵⁰ => [LH_C f⁷(h⁵⁰) map_lh_₂(f⁷, t⁵⁰)] | LH_N  => [LH_N]}: 4382
//│ [Solution _lh_solution_LH_P2_0⁰ [LH_N]]: 5386 --->
//│ 	case _lh_compact_arg1⁰ of {Solution _lh_compact_Solution_0⁰ _lh_compact_Solution_1⁰ => [Soln _lh_compact_Solution_0⁰ foldr_lh_₃(insertCompact_lh_₁, [LH_N], _lh_compact_Solution_1⁰)]}: 5139
//│ [Solution _lh_solution_LH_P2_0⁰ _lh_solution_Just_0⁰]: 5392 --->
//│ 	case _lh_compact_arg1⁰ of {Solution _lh_compact_Solution_0⁰ _lh_compact_Solution_1⁰ => [Soln _lh_compact_Solution_0⁰ foldr_lh_₃(insertCompact_lh_₁, [LH_N], _lh_compact_Solution_1⁰)]}: 5139
//│ [LH_C h⁵⁸ mappend_lh_₆(t⁵⁸, ys³⁰)]: 5503 --->
//│ 	case xs³⁴ of {LH_C h⁶² t⁶² => [LH_C h⁶² mappend_lh_₂(t⁶², ys³⁴)] | LH_N  => ys³⁴}: 5634
//│ [LH_N]: 5519 --->
//│ 	case xs²⁸ of {LH_C h⁵⁶ t⁵⁶ => [LH_C h⁵⁶ mappend_lh_₈(t⁵⁶, ys²⁸)] | LH_N  => ys²⁸}: 5297
//│ [LH_C '-' [LH_N]]: 5520 --->
//│ 	case xs²⁸ of {LH_C h⁵⁶ t⁵⁶ => [LH_C h⁵⁶ mappend_lh_₈(t⁵⁶, ys²⁸)] | LH_N  => ys²⁸}: 5297
//│ [LH_C ' ' [LH_C '-' [LH_N]]]: 5521 --->
//│ 	case xs²⁸ of {LH_C h⁵⁶ t⁵⁶ => [LH_C h⁵⁶ mappend_lh_₈(t⁵⁶, ys²⁸)] | LH_N  => ys²⁸}: 5297
//│ [LH_N]: 5570 --->
//│ 	case xs³³ of {LH_C h⁶¹ t⁶¹ => [LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)] | LH_N  => ys³³}: 5622
//│ [LH_C 'k' [LH_N]]: 5571 --->
//│ 	case xs³³ of {LH_C h⁶¹ t⁶¹ => [LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)] | LH_N  => ys³³}: 5622
//│ [LH_C 'c' [LH_C 'k' [LH_N]]]: 5572 --->
//│ 	case xs³³ of {LH_C h⁶¹ t⁶¹ => [LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)] | LH_N  => ys³³}: 5622
//│ [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_N]]]]: 5573 --->
//│ 	case xs³³ of {LH_C h⁶¹ t⁶¹ => [LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)] | LH_N  => ys³³}: 5622
//│ [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_N]]]]]: 5574 --->
//│ 	case xs³³ of {LH_C h⁶¹ t⁶¹ => [LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)] | LH_N  => ys³³}: 5622
//│ [LH_C 'B' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_N]]]]]]: 5575 --->
//│ 	case xs³³ of {LH_C h⁶¹ t⁶¹ => [LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)] | LH_N  => ys³³}: 5622
//│ [LH_N]: 5581 --->
//│ 	case xs³³ of {LH_C h⁶¹ t⁶¹ => [LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)] | LH_N  => ys³³}: 5622
//│ [LH_C 'e' [LH_N]]: 5582 --->
//│ 	case xs³³ of {LH_C h⁶¹ t⁶¹ => [LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)] | LH_N  => ys³³}: 5622
//│ [LH_C 't' [LH_C 'e' [LH_N]]]: 5583 --->
//│ 	case xs³³ of {LH_C h⁶¹ t⁶¹ => [LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)] | LH_N  => ys³³}: 5622
//│ [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]: 5584 --->
//│ 	case xs³³ of {LH_C h⁶¹ t⁶¹ => [LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)] | LH_N  => ys³³}: 5622
//│ [LH_C 'h' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]: 5585 --->
//│ 	case xs³³ of {LH_C h⁶¹ t⁶¹ => [LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)] | LH_N  => ys³³}: 5622
//│ [LH_C 'W' [LH_C 'h' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]: 5586 --->
//│ 	case xs³³ of {LH_C h⁶¹ t⁶¹ => [LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)] | LH_N  => ys³³}: 5622
//│ [LH_C h⁶⁰ mappend_lh_₄(t⁶⁰, ys³²)]: 5608 --->
//│ 	case xs³⁵ of {LH_C h⁶³ t⁶³ => [LH_C h⁶³ mappend_lh_₁(t⁶³, ys³⁵)] | LH_N  => ys³⁵}: 5646
//│ [LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)]: 5620 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C h⁶² mappend_lh_₂(t⁶², ys³⁴)]: 5632 --->
//│ 	case xs³¹ of {LH_C h⁵⁹ t⁵⁹ => [LH_C h⁵⁹ mappend_lh_₅(t⁵⁹, ys³¹)] | LH_N  => ys³¹}: 5598
//│ [LH_C h⁶³ mappend_lh_₁(t⁶³, ys³⁵)]: 5644 --->
//│ 	case xs³³ of {LH_C h⁶¹ t⁶¹ => [LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)] | LH_N  => ys³³}: 5622
//│ [LH_N]: 6352 --->
//│ 	case xs³⁵ of {LH_C h⁶³ t⁶³ => [LH_C h⁶³ mappend_lh_₁(t⁶³, ys³⁵)] | LH_N  => ys³⁵}: 5646
//│ [LH_C '|' [LH_N]]: 6353 --->
//│ 	case xs³⁵ of {LH_C h⁶³ t⁶³ => [LH_C h⁶³ mappend_lh_₁(t⁶³, ys³⁵)] | LH_N  => ys³⁵}: 5646
//│ [LH_N]: 6382 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C ' ' [LH_N]]: 6383 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C 'n' [LH_C ' ' [LH_N]]]: 6384 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]: 6385 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]: 6386 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]: 6387 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]: 6388 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]: 6389 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]: 6390 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]: 6391 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]: 6392 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]: 6393 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]: 6394 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]: 6395 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]: 6396 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]: 6397 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]: 6398 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]: 6399 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]: 6400 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C 'o' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]: 6401 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]: 6402 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]: 6403 --->
//│ 	case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484
//│ [LH_N]: 6412 --->
//│ 	case xs³⁴ of {LH_C h⁶² t⁶² => [LH_C h⁶² mappend_lh_₂(t⁶², ys³⁴)] | LH_N  => ys³⁴}: 5634
//│ [LH_C '|' [LH_N]]: 6413 --->
//│ 	case xs³⁴ of {LH_C h⁶² t⁶² => [LH_C h⁶² mappend_lh_₂(t⁶², ys³⁴)] | LH_N  => ys³⁴}: 5634
//│ [LH_N]: 6417 --->
//│ 	case xs³¹ of {LH_C h⁵⁹ t⁵⁹ => [LH_C h⁵⁹ mappend_lh_₅(t⁵⁹, ys³¹)] | LH_N  => ys³¹}: 5598
//│ [LH_C '|' [LH_N]]: 6418 --->
//│ 	case xs³¹ of {LH_C h⁵⁹ t⁵⁹ => [LH_C h⁵⁹ mappend_lh_₅(t⁵⁹, ys³¹)] | LH_N  => ys³¹}: 5598
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => if (n⁰ == 0) then h⁰ else atIndex_lh_₁((n⁰ - 1), t⁰) | LH_N  => error⁰}: 116 --->
//│ 	[LH_N]: 390
//│ 	[LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]: 391
//│ 	[LH_C [LH_C 'K' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]]: 392
//│ 	[LH_C [LH_C 'K' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]]]: 393
//│ 	[LH_C [LH_C 'K' [LH_N]] [LH_C [LH_C 'K' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]]]]: 394
//│ 	[LH_C [LH_C 'Q' [LH_N]] [LH_C [LH_C 'K' [LH_N]] [LH_C [LH_C 'K' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]]]]]: 395
//│ 	[LH_C [LH_C 'Q' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'Q' [LH_N]] [LH_C [LH_C 'K' [LH_N]] [LH_C [LH_C 'K' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]]]]]]: 396
//│ 	[LH_C [LH_C 'Q' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'Q' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'Q' [LH_N]] [LH_C [LH_C 'K' [LH_N]] [LH_C [LH_C 'K' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]]]]]]]: 397
//│ 	[LH_C [LH_C 'Q' [LH_C 'R' [LH_N]]] [LH_C [LH_C 'Q' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'Q' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'Q' [LH_N]] [LH_C [LH_C 'K' [LH_N]] [LH_C [LH_C 'K' [LH_C 'B' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'N' [LH_N]]] [LH_C [LH_C 'K' [LH_C 'R' [LH_N]]] [LH_N]]]]]]]]]: 398
//│ case _lh_sift_arg4⁰ of {LH_N  => _lh_sift_arg3⁰ | LH_C _lh_sift_LH_C_0⁰ _lh_sift_LH_C_1⁰ => if onboard_lh_₁(_lh_sift_LH_C_0⁰) then let _lh_matchIdent² = pieceAt_lh_₁(_lh_sift_arg2⁰, _lh_sift_LH_C_0⁰)
//│ in case _lh_matchIdent² of {Nothing  => sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰) | Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1⁰) then sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3⁰], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁰, _lh_sift_arg2⁰, _lh_sift_arg3⁰, _lh_sift_LH_C_1⁰)}: 332 --->
//│ 	[LH_N]: 1609
//│ 	[LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]: 1610
//│ 	[LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]]: 1611
//│ 	[LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]]]: 1612
//│ 	[LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]]]]: 1613
//│ 	[LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]]]]]: 1614
//│ 	[LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]]]]]]: 1615
//│ 	[LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ + 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]]]]]]]: 1616
//│ 	[LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ + 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ + 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_C [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)] [LH_N]]]]]]]]]: 1617
//│ 	[LH_N]: 1794
//│ 	[LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]: 1795
//│ 	[LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]]: 1796
//│ 	[LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]]]: 1797
//│ 	[LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]]]]: 1798
//│ 	[LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]]]]]: 1799
//│ 	[LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]]]]]]: 1800
//│ 	[LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]]]]]]]: 1801
//│ 	[LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ + 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) _lh_kingmoves_LH_P2_1⁰] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_C [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)] [LH_N]]]]]]]]]: 1802
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {Just _lh_pawnmoves_Just_0⁰ => if not⁰(polyEq⁰(colourOf_lh_₁(_lh_pawnmoves_Just_0⁰), _lh_pawnmoves_arg1⁰)) then [LH_C promote⁰(_lh_listcomp_fun_ls_h⁰, [Just _lh_pawnmoves_Just_0⁰]) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 1349 --->
//│ 	[LH_N]: 1357
//│ 	[LH_C pieceAt_lh_₁(_lh_pawnmoves_arg3⁰, _lh_listcomp_fun_ls_h⁰) [LH_N]]: 1358
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {Just _lh_pawnmoves_Just_0⁰ => if not⁰(polyEq⁰(colourOf_lh_₁(_lh_pawnmoves_Just_0⁰), _lh_pawnmoves_arg1⁰)) then [LH_C promote⁰(_lh_listcomp_fun_ls_h⁰, [Just _lh_pawnmoves_Just_0⁰]) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹) | _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)} | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹([LH_C pieceAt_lh_₁(_lh_pawnmoves_arg3⁰, _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => [LH_N]}: 1362 --->
//│ 	[LH_N]: 1387
//│ 	[LH_C [LH_P2 (_lh_pawnmoves_LH_P2_0⁰ - 1) (_lh_pawnmoves_LH_P2_1⁰ + fwd⁰)] [LH_N]]: 1388
//│ 	[LH_C [LH_P2 (_lh_pawnmoves_LH_P2_0⁰ + 1) (_lh_pawnmoves_LH_P2_1⁰ + fwd⁰)] [LH_C [LH_P2 (_lh_pawnmoves_LH_P2_0⁰ - 1) (_lh_pawnmoves_LH_P2_1⁰ + fwd⁰)] [LH_N]]]: 1389
//│ case xs³ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃₂(t⁴, ys³)] | LH_N  => ys³}: 1858 --->
//│ 	[LH_C h⁶ mappend_lh_₃₁(t⁶, ys⁴)]: 1911
//│ 	[LH_N]: 3586
//│ 	[LH_C ' ' [LH_N]]: 3587
//│ 	[LH_C 'f' [LH_C ' ' [LH_N]]]: 3588
//│ 	[LH_C 'i' [LH_C 'f' [LH_C ' ' [LH_N]]]]: 3589
//│ case xs⁴ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₃₁(t⁶, ys⁴)] | LH_N  => ys⁴}: 1913 --->
//│ 	[LH_N]: 1892
//│ 	[LH_C ' ' tab_lh_₃((_lh_tab_arg1⁰ - 1))]: 1901
//│ case xs⁶ of {LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₂₉(t⁸, ys⁶)] | LH_N  => ys⁶}: 1937 --->
//│ 	[LH_N]: 1968
//│ 	[LH_C ' ' tab_lh_₂((_lh_tab_arg1¹ - 1))]: 1977
//│ case xs⁸ of {LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₂₇(t¹¹, ys⁸)] | LH_N  => ys⁸}: 1994 --->
//│ 	[LH_C h⁸ mappend_lh_₂₉(t⁸, ys⁶)]: 1935
//│ 	[LH_N]: 3667
//│ 	[LH_C ' ' [LH_N]]: 3668
//│ 	[LH_C 'f' [LH_C ' ' [LH_N]]]: 3669
//│ 	[LH_C 'i' [LH_C 'f' [LH_C ' ' [LH_N]]]]: 3670
//│ case xs⁹ of {LH_C h¹² t¹² => [LH_C h¹² mappend_lh_₂₆(t¹², ys⁹)] | LH_N  => ys⁹}: 2021 --->
//│ 	[LH_C h¹⁰ mappend_lh_₂₈(t¹⁰, ys⁷)]: 1958
//│ 	[LH_N]: 3707
//│ 	[LH_C ' ' [LH_N]]: 3708
//│ 	[LH_C ';' [LH_C ' ' [LH_N]]]: 3709
//│ case xs¹² of {LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₂₃(t¹⁵, ys¹²)] | LH_N  => ys¹²}: 2057 --->
//│ 	[LH_N]: 2104
//│ 	[LH_C ' ' tab_lh_₁((_lh_tab_arg1² - 1))]: 2113
//│ case xs¹³ of {LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₂₂(t¹⁶, ys¹³)] | LH_N  => ys¹³}: 2069 --->
//│ 	[LH_C h¹⁵ mappend_lh_₂₃(t¹⁵, ys¹²)]: 2055
//│ 	[LH_N]: 3772
//│ 	[LH_C ' ' [LH_N]]: 3773
//│ 	[LH_C 'f' [LH_C ' ' [LH_N]]]: 3774
//│ 	[LH_C 'i' [LH_C 'f' [LH_C ' ' [LH_N]]]]: 3775
//│ case xs¹⁴ of {LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ mappend_lh_₂₁(t¹⁷, ys¹⁴)] | LH_N  => ys¹⁴}: 2096 --->
//│ 	[LH_C h¹³ mappend_lh_₂₅(t¹³, ys¹⁰)]: 2031
//│ 	[LH_N]: 3812
//│ 	[LH_C ' ' [LH_N]]: 3813
//│ 	[LH_C ';' [LH_C ' ' [LH_N]]]: 3814
//│ case _lh_maybe_arg3² of {Nothing  => _lh_maybe_arg1² | Just _lh_maybe_Just_0² => _lh_maybe_arg2²(_lh_maybe_Just_0²)}: 3423 --->
//│ 	[Just [LH_P2 [MoveInFull p¹ _lh_tryMove_LH_P2_1¹ [Move _lh_tryMove_Move_0¹ _lh_tryMove_Move_1¹ _lh_tryMove_Move_2¹]] bd2¹]]: 3535
//│ 	[Nothing]: 3536
//│ case xs¹⁸ of {LH_C h³⁶ t³⁶ => [LH_C h³⁶ mappend_lh_₁₈(t³⁶, ys¹⁸)] | LH_N  => ys¹⁸}: 3742 --->
//│ 	[LH_N]: 5095
//│ 	[LH_C '|' [LH_N]]: 5096
//│ 	[LH_C ',' [LH_C '|' [LH_N]]]: 5097
//│ case xs¹⁹ of {LH_C h³⁷ t³⁷ => [LH_C h³⁷ mappend_lh_₁₇(t³⁷, ys¹⁹)] | LH_N  => ys¹⁹}: 3754 --->
//│ 	[LH_N]: 5035
//│ 	[LH_C ' ' [LH_N]]: 5036
//│ 	[LH_C ',' [LH_C ' ' [LH_N]]]: 5037
//│ case xs²⁰ of {LH_C h³⁸ t³⁸ => [LH_C h³⁸ mappend_lh_₁₆(t³⁸, ys²⁰)] | LH_N  => ys²⁰}: 3847 --->
//│ 	[LH_N]: 5111
//│ 	[LH_C '|' [LH_N]]: 5112
//│ 	[LH_C ',' [LH_C '|' [LH_N]]]: 5113
//│ case xs²¹ of {LH_C h³⁹ t³⁹ => [LH_C h³⁹ mappend_lh_₁₅(t³⁹, ys²¹)] | LH_N  => ys²¹}: 3874 --->
//│ 	[LH_N]: 5079
//│ 	[LH_C '|' [LH_N]]: 5080
//│ 	[LH_C ',' [LH_C '|' [LH_N]]]: 5081
//│ case xs²³ of {LH_C h⁴¹ t⁴¹ => [LH_C h⁴¹ mappend_lh_₁₃(t⁴¹, ys²³)] | LH_N  => ys²³}: 3930 --->
//│ 	[LH_C h⁴⁵ mappend_lh_₁₀(t⁴⁵, ys²⁶)]: 4027
//│ 	[LH_N]: 5061
//│ 	[LH_C ' ' [LH_N]]: 5062
//│ 	[LH_C ';' [LH_C ' ' [LH_N]]]: 5063
//│ case xs²⁴ of {LH_C h⁴² t⁴² => [LH_C h⁴² mappend_lh_₁₂(t⁴², ys²⁴)] | LH_N  => ys²⁴}: 3994 --->
//│ 	[LH_C h⁴³ mappend_lh_₁₁(t⁴³, ys²⁵)]: 4004
//│ 	[LH_N]: 5009
//│ 	[LH_C ' ' [LH_N]]: 5010
//│ 	[LH_C '.' [LH_C ' ' [LH_N]]]: 5011
//│ case _lh_insertCompact_arg1⁰ of {LH_P2 _lh_insertCompact_LH_P2_0⁰ _lh_insertCompact_LH_P2_1⁰ => let insert⁰ = (fun _lh_insert_arg1⁰ -> (fun _lh_insert_arg2⁰ -> case _lh_insert_arg2⁰ of {LH_N  => [LH_C _lh_insert_arg1⁰ [LH_N]] | LH_C _lh_insert_LH_C_0⁰ _lh_insert_LH_C_1⁰ => if polyGt⁰(_lh_insert_arg1⁰, _lh_insert_LH_C_0⁰) then [LH_C _lh_insert_LH_C_0⁰ insert⁰(_lh_insert_arg1⁰, _lh_insert_LH_C_1⁰)] else [LH_C _lh_insert_arg1⁰ [LH_C _lh_insert_LH_C_0⁰ _lh_insert_LH_C_1⁰]]}))
//│ in let cs⁰ = compact_lh_₁(_lh_insertCompact_LH_P2_1⁰)
//│ in let ic⁰ = (fun ls²³ -> let _lh_matchIdent³⁸ = ls²³
//│ in case _lh_matchIdent³⁸ of {LH_N  => [LH_C [LH_P2 [LH_C _lh_insertCompact_LH_P2_0⁰ [LH_N]] cs⁰] [LH_N]] | LH_C _lh_insertCompact_LH_C_0⁰ _lh_insertCompact_LH_C_1⁰ => case _lh_insertCompact_LH_C_0⁰ of {LH_P2 _lh_insertCompact_LH_P2_0¹ _lh_insertCompact_LH_P2_1¹ => let a⁴ = showSoln_lh_₂(cs⁰, 1)
//│ in let b⁸ = showSoln_lh_₃(_lh_insertCompact_LH_P2_1¹, 1)
//│ in if polyLt⁰(a⁴, b⁸) then [LH_C [LH_P2 [LH_C _lh_insertCompact_LH_P2_0⁰ [LH_N]] cs⁰] [LH_C [LH_P2 _lh_insertCompact_LH_P2_0¹ _lh_insertCompact_LH_P2_1¹] _lh_insertCompact_LH_C_1⁰]] else if polyEq⁰(a⁴, b⁸) then [LH_C [LH_P2 insert⁰(_lh_insertCompact_LH_P2_0⁰, _lh_insertCompact_LH_P2_0¹) cs⁰] _lh_insertCompact_LH_C_1⁰] else if polyGt⁰(a⁴, b⁸) then [LH_C [LH_P2 _lh_insertCompact_LH_P2_0¹ _lh_insertCompact_LH_P2_1¹] ic⁰(_lh_insertCompact_LH_C_1⁰)] else error⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'a' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]])}})
//│ in ic⁰(_lh_insertCompact_arg2⁰)}: 4167 --->
//│ 	[LH_P2 _lh_replies_LH_P2_0⁰ _lh_replies_Just_0⁰]: 4881
//│ case _lh_parseGoal_arg1⁰ of {LH_C _lh_parseGoal_LH_C_0⁰ _lh_parseGoal_LH_C_1⁰ => case _lh_parseGoal_LH_C_1⁰ of {LH_N  => let ws⁰ = words_lh_₁(_lh_parseGoal_LH_C_0⁰)
//│ in let c⁰ = if polyEq⁰(head_lh_₁(ws⁰), [LH_C 'B' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_N]]]]]]) then [Black] else [White]
//│ in let n³ = 2
//│ in [LH_P2 c⁰ n³] | _  => error⁰} | _  => error⁰}: 4346 --->
//│ 	[LH_N]: 2749
//│ 	[LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 2757
//│ case ls²⁷ of {LH_C h⁵⁰ t⁵⁰ => [LH_C f⁷(h⁵⁰) map_lh_₂(f⁷, t⁵⁰)] | LH_N  => [LH_N]}: 4382 --->
//│ 	[LH_N]: 1208
//│ 	[LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Knight]] [LH_N]]: 1209
//│ 	[LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Bishop]] [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Knight]] [LH_N]]]: 1210
//│ 	[LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Rook]] [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Bishop]] [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Knight]] [LH_N]]]]: 1211
//│ 	[LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Queen]] [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Rook]] [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Bishop]] [LH_C [LH_P2 _lh_pawnmoves_arg1⁰ [Knight]] [LH_N]]]]]: 1212
//│ 	[LH_C f⁹(h⁵⁴) map_lh_₁(f⁹, t⁵⁴)]: 5225
//│ 	[LH_N]: 5226
//│ case ls²⁸ of {LH_C h⁵² t⁵² => f⁸(h⁵², foldr_lh_₂(f⁸, i⁵, t⁵²)) | LH_N  => i⁵}: 4464 --->
//│ 	[LH_C h⁵³ t⁵³]: 4947
//│ 	[LH_N]: 4979
//│ case _lh_compact_arg1⁰ of {Solution _lh_compact_Solution_0⁰ _lh_compact_Solution_1⁰ => [Soln _lh_compact_Solution_0⁰ foldr_lh_₃(insertCompact_lh_₁, [LH_N], _lh_compact_Solution_1⁰)]}: 5139 --->
//│ 	[Solution _lh_solution_LH_P2_0⁰ [LH_N]]: 5386
//│ 	[Solution _lh_solution_LH_P2_0⁰ _lh_solution_Just_0⁰]: 5392
//│ case _lh_matchIdent⁵⁸ of {LH_P2 _lh_parseProblem_LH_P2_0⁰ _lh_parseProblem_LH_P2_1⁰ => let bd⁰ = parseBoard_lh_₁(_lh_parseProblem_LH_P2_0⁰)
//│ in let gl⁰ = parseGoal_lh_₁(_lh_parseProblem_LH_P2_1⁰)
//│ in [LH_P2 bd⁰ gl⁰]}: 5192 --->
//│ 	[LH_P2 take_lh_₂(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]: 4247
//│ case ls³⁰ of {LH_C h⁵⁵ t⁵⁵ => f¹⁰(h⁵⁵, foldr_lh_₁(f¹⁰, i⁶, t⁵⁵)) | LH_N  => i⁶}: 5243 --->
//│ 	[LH_C a⁶ enumFromTo_lh_₂((a⁶ + 1), b⁹)]: 5211
//│ 	[LH_N]: 5212
//│ case xs²⁸ of {LH_C h⁵⁶ t⁵⁶ => [LH_C h⁵⁶ mappend_lh_₈(t⁵⁶, ys²⁸)] | LH_N  => ys²⁸}: 5297 --->
//│ 	[LH_N]: 5519
//│ 	[LH_C '-' [LH_N]]: 5520
//│ 	[LH_C ' ' [LH_C '-' [LH_N]]]: 5521
//│ case _lh_matchIdent⁶⁰ of {LH_P2 _lh_solution_LH_P2_0⁰ _lh_solution_LH_P2_1⁰ => let rsm⁰ = replies_lh_₁(_lh_solution_LH_P2_1⁰, opponent_lh_₂(_lh_solution_arg2⁰), (_lh_solution_arg3⁰ - 1))
//│ in let _lh_matchIdent⁶¹ = rsm⁰
//│ in case _lh_matchIdent⁶¹ of {Nothing  => other⁰ | Just _lh_solution_Just_0⁰ => case _lh_solution_Just_0⁰ of {LH_N  => if kingincheck_lh_₁(opponent_lh_₁(_lh_solution_arg2⁰), _lh_solution_LH_P2_1⁰) then [Just [Solution _lh_solution_LH_P2_0⁰ [LH_N]]] else other⁰ | _  => [Just [Solution _lh_solution_LH_P2_0⁰ _lh_solution_Just_0⁰]]}}}: 5398 --->
//│ 	[LH_P2 [MoveInFull p¹ _lh_tryMove_LH_P2_1¹ [Move _lh_tryMove_Move_0¹ _lh_tryMove_Move_1¹ _lh_tryMove_Move_2¹]] bd2¹]: 3534
//│ case xs²⁹ of {LH_C h⁵⁷ t⁵⁷ => [LH_C h⁵⁷ mappend_lh_₇(t⁵⁷, ys²⁹)] | LH_N  => ys²⁹}: 5484 --->
//│ 	[LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)]: 5620
//│ 	[LH_N]: 6382
//│ 	[LH_C ' ' [LH_N]]: 6383
//│ 	[LH_C 'n' [LH_C ' ' [LH_N]]]: 6384
//│ 	[LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]: 6385
//│ 	[LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]: 6386
//│ 	[LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]: 6387
//│ 	[LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]: 6388
//│ 	[LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]: 6389
//│ 	[LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]: 6390
//│ 	[LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]: 6391
//│ 	[LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]: 6392
//│ 	[LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]: 6393
//│ 	[LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]: 6394
//│ 	[LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]: 6395
//│ 	[LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]: 6396
//│ 	[LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]: 6397
//│ 	[LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]: 6398
//│ 	[LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]: 6399
//│ 	[LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]: 6400
//│ 	[LH_C 'o' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]: 6401
//│ 	[LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]: 6402
//│ 	[LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]: 6403
//│ case xs³¹ of {LH_C h⁵⁹ t⁵⁹ => [LH_C h⁵⁹ mappend_lh_₅(t⁵⁹, ys³¹)] | LH_N  => ys³¹}: 5598 --->
//│ 	[LH_C h⁶² mappend_lh_₂(t⁶², ys³⁴)]: 5632
//│ 	[LH_N]: 6417
//│ 	[LH_C '|' [LH_N]]: 6418
//│ case xs³² of {LH_C h⁶⁰ t⁶⁰ => [LH_C h⁶⁰ mappend_lh_₄(t⁶⁰, ys³²)] | LH_N  => ys³²}: 5610 --->
//│ 	[LH_C h³¹ mappend_lh_₁₉(t³¹, ys¹⁷)]: 2977
//│ 	[LH_N]: 4368
//│ case xs³³ of {LH_C h⁶¹ t⁶¹ => [LH_C h⁶¹ mappend_lh_₃(t⁶¹, ys³³)] | LH_N  => ys³³}: 5622 --->
//│ 	[LH_N]: 5570
//│ 	[LH_C 'k' [LH_N]]: 5571
//│ 	[LH_C 'c' [LH_C 'k' [LH_N]]]: 5572
//│ 	[LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_N]]]]: 5573
//│ 	[LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_N]]]]]: 5574
//│ 	[LH_C 'B' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_N]]]]]]: 5575
//│ 	[LH_N]: 5581
//│ 	[LH_C 'e' [LH_N]]: 5582
//│ 	[LH_C 't' [LH_C 'e' [LH_N]]]: 5583
//│ 	[LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]: 5584
//│ 	[LH_C 'h' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]: 5585
//│ 	[LH_C 'W' [LH_C 'h' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]: 5586
//│ 	[LH_C h⁶³ mappend_lh_₁(t⁶³, ys³⁵)]: 5644
//│ case xs³⁴ of {LH_C h⁶² t⁶² => [LH_C h⁶² mappend_lh_₂(t⁶², ys³⁴)] | LH_N  => ys³⁴}: 5634 --->
//│ 	[LH_C h⁵⁸ mappend_lh_₆(t⁵⁸, ys³⁰)]: 5503
//│ 	[LH_N]: 6412
//│ 	[LH_C '|' [LH_N]]: 6413
//│ case xs³⁵ of {LH_C h⁶³ t⁶³ => [LH_C h⁶³ mappend_lh_₁(t⁶³, ys³⁵)] | LH_N  => ys³⁵}: 5646 --->
//│ 	[LH_C h⁶⁰ mappend_lh_₄(t⁶⁰, ys³²)]: 5608
//│ 	[LH_N]: 6352
//│ 	[LH_C '|' [LH_N]]: 6353
//│ case _lh_testMate_nofib_LH_P2_1⁰ of {LH_P2 _lh_testMate_nofib_LH_P2_0¹ _lh_testMate_nofib_LH_P2_1¹ => mappend_lh_₅(mappend_lh_₂(mappend_lh_₆(mappend_lh_₇(mappend_lh_₃(mappend_lh_₁(mappend_lh_₄(showBoard_lh_₁(_lh_testMate_nofib_LH_P2_0⁰), [LH_C '|' [LH_N]]), showColour_lh_₁(_lh_testMate_nofib_LH_P2_0¹)), [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]), string_of_int⁰(_lh_testMate_nofib_LH_P2_1¹)), [LH_C '|' [LH_N]]), [LH_C '|' [LH_N]]), solve_lh_₁(_lh_testMate_nofib_LH_P2_0⁰, _lh_testMate_nofib_LH_P2_0¹, _lh_testMate_nofib_LH_P2_1¹))}: 6429 --->
//│ 	[LH_P2 c⁰ n³]: 4339
//│ case _lh_matchIdent⁶³ of {LH_P2 _lh_testMate_nofib_LH_P2_0⁰ _lh_testMate_nofib_LH_P2_1⁰ => case _lh_testMate_nofib_LH_P2_1⁰ of {LH_P2 _lh_testMate_nofib_LH_P2_0¹ _lh_testMate_nofib_LH_P2_1¹ => mappend_lh_₅(mappend_lh_₂(mappend_lh_₆(mappend_lh_₇(mappend_lh_₃(mappend_lh_₁(mappend_lh_₄(showBoard_lh_₁(_lh_testMate_nofib_LH_P2_0⁰), [LH_C '|' [LH_N]]), showColour_lh_₁(_lh_testMate_nofib_LH_P2_0¹)), [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]), string_of_int⁰(_lh_testMate_nofib_LH_P2_1¹)), [LH_C '|' [LH_N]]), [LH_C '|' [LH_N]]), solve_lh_₁(_lh_testMate_nofib_LH_P2_0⁰, _lh_testMate_nofib_LH_P2_0¹, _lh_testMate_nofib_LH_P2_1¹))}}: 6430 --->
//│ 	[LH_P2 bd⁰ gl⁰]: 5189
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMate_nofib_lh_₁(primId⁰(0))
//│ def abs_lh_₁(_lh_abs_arg1⁶) = if (_lh_abs_arg1⁶ < 0) then (0 - _lh_abs_arg1⁶) else _lh_abs_arg1⁶
//│ def abs_lh_₂(_lh_abs_arg1³) = if (_lh_abs_arg1³ < 0) then (0 - _lh_abs_arg1³) else _lh_abs_arg1³
//│ def abs_lh_₃(_lh_abs_arg1⁴) = if (_lh_abs_arg1⁴ < 0) then (0 - _lh_abs_arg1⁴) else _lh_abs_arg1⁴
//│ def abs_lh_₄(_lh_abs_arg1⁵) = if (_lh_abs_arg1⁵ < 0) then (0 - _lh_abs_arg1⁵) else _lh_abs_arg1⁵
//│ def abs_lh_₅(_lh_abs_arg1²) = if (_lh_abs_arg1² < 0) then (0 - _lh_abs_arg1²) else _lh_abs_arg1²
//│ def abs_lh_₆(_lh_abs_arg1¹) = if (_lh_abs_arg1¹ < 0) then (0 - _lh_abs_arg1¹) else _lh_abs_arg1¹
//│ def abs_lh_₇(_lh_abs_arg1⁰) = if (_lh_abs_arg1⁰ < 0) then (0 - _lh_abs_arg1⁰) else _lh_abs_arg1⁰
//│ def any_lh_₁(_lh_any_arg1⁰, _lh_any_arg2⁰) = case _lh_any_arg2⁰ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0⁰ _lh_any_LH_C_1⁰ => if _lh_any_arg1⁰(_lh_any_LH_C_0⁰) then [True] else any_lh_₁(_lh_any_arg1⁰, _lh_any_LH_C_1⁰)}
//│ def atIndex_lh_₁(n¹³, ls³⁰) = if (n¹³ < 0) then error⁰ else ls³⁰(n¹³)
//│ def bishopmoves_lh_₁(_lh_bishopmoves_arg1⁰, _lh_bishopmoves_arg2⁰, _lh_bishopmoves_arg3⁰) = moveLine_lh_₁(_lh_bishopmoves_arg3⁰, _lh_bishopmoves_arg1⁰, _lh_bishopmoves_arg2⁰, (fun xy⁰ -> 
//│ 	let _lh_matchIdent³⁸ = xy⁰
//│ 	in case _lh_matchIdent³⁸ of {
//│ 		LH_P2 _lh_bishopmoves_LH_P2_0⁰ _lh_bishopmoves_LH_P2_1⁰ => [LH_P2 (_lh_bishopmoves_LH_P2_0⁰ - 1) (_lh_bishopmoves_LH_P2_1⁰ + 1)]}), moveLine_lh_₁(_lh_bishopmoves_arg3⁰, _lh_bishopmoves_arg1⁰, _lh_bishopmoves_arg2⁰, (fun xy¹ -> 
//│ 	let _lh_matchIdent³⁹ = xy¹
//│ 	in case _lh_matchIdent³⁹ of {
//│ 		LH_P2 _lh_bishopmoves_LH_P2_0¹ _lh_bishopmoves_LH_P2_1¹ => [LH_P2 (_lh_bishopmoves_LH_P2_0¹ + 1) (_lh_bishopmoves_LH_P2_1¹ + 1)]}), moveLine_lh_₁(_lh_bishopmoves_arg3⁰, _lh_bishopmoves_arg1⁰, _lh_bishopmoves_arg2⁰, (fun xy² -> 
//│ 	let _lh_matchIdent⁴⁰ = xy²
//│ 	in case _lh_matchIdent⁴⁰ of {
//│ 		LH_P2 _lh_bishopmoves_LH_P2_0² _lh_bishopmoves_LH_P2_1² => [LH_P2 (_lh_bishopmoves_LH_P2_0² - 1) (_lh_bishopmoves_LH_P2_1² - 1)]}), moveLine_lh_₁(_lh_bishopmoves_arg3⁰, _lh_bishopmoves_arg1⁰, _lh_bishopmoves_arg2⁰, (fun xy³ -> 
//│ 	let _lh_matchIdent⁴¹ = xy³
//│ 	in case _lh_matchIdent⁴¹ of {
//│ 		LH_P2 _lh_bishopmoves_LH_P2_0³ _lh_bishopmoves_LH_P2_1³ => [LH_P2 (_lh_bishopmoves_LH_P2_0³ + 1) (_lh_bishopmoves_LH_P2_1³ - 1)]}), (fun x⁷ -> x⁷)))), [LH_N])
//│ def break_lh_₁(_lh_break_arg1⁰, _lh_break_arg2⁰) = case _lh_break_arg2⁰ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1⁰(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else 
//│ 		let _lh_matchIdent⁵⁷ = break_lh_₁(_lh_break_arg1⁰, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent⁵⁷ of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]}}
//│ def colourOf_lh_₁(_lh_colourOf_arg1⁰) = case _lh_colourOf_arg1⁰ of {
//│ 	LH_P2 _lh_colourOf_LH_P2_0⁰ _lh_colourOf_LH_P2_1⁰ => _lh_colourOf_LH_P2_0⁰}
//│ def comment_lh_₁(_lh_comment_arg1⁰) = (polyEq⁰(_lh_comment_arg1⁰, [LH_N]) || polyEq⁰(take_lh_₁(2, _lh_comment_arg1⁰), [LH_C '-' [LH_C '-' [LH_N]]]))
//│ def compact_lh_₁(_lh_compact_arg1⁰) = _lh_compact_arg1⁰([lh_Unit])
//│ def concat_lh_₁(lss¹) = case lss¹ of {
//│ 	LH_C h¹³⁰ t¹³⁰ => mappend_lh_₁₉(h¹³⁰, concat_lh_₁(t¹³⁰))
//│ 	| LH_N  => (fun ys¹³⁹ -> ys¹³⁹)}
//│ def concat_lh_₂(lss⁰) = case lss⁰ of {
//│ 	LH_C h²⁵ t²⁵ => mappend_lh_₃₅(h²⁵, concat_lh_₂(t²⁵))
//│ 	| LH_N  => [LH_N]}
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]}
//│ def drop_lh_₁(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => (fun _lh_dummy⁴ -> error⁰)
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then 
//│ 		let _lh_parseGoal_LH_C_1⁰ = _lh_drop_LH_C_1⁰
//│ 		in let _lh_parseGoal_LH_C_0⁰ = _lh_drop_LH_C_0⁰
//│ 		in (fun _lh_dummy⁵ -> case _lh_parseGoal_LH_C_1⁰ of {
//│ 			LH_N  => 
//│ 				let ws⁰ = words_lh_₁(_lh_parseGoal_LH_C_0⁰)
//│ 				in let c¹ = if polyEq⁰(head_lh_₁(ws⁰), [LH_C 'B' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'k' [LH_N]]]]]]) then [Black] else [White]
//│ 				in let n³ = 2
//│ 				in let _lh_testMate_nofib_LH_P2_1¹ = n³
//│ 				in let _lh_testMate_nofib_LH_P2_0¹ = c¹
//│ 				in (fun _lh_testMate_nofib_LH_P2_0² -> mappend_lh_₅(mappend_lh_₂(mappend_lh_₆(mappend_lh_₇(mappend_lh_₃(mappend_lh_₁(mappend_lh_₄(showBoard_lh_₁(_lh_testMate_nofib_LH_P2_0²), 
//│ 					let t¹⁰¹ = (fun ys¹⁰⁴ -> ys¹⁰⁴)
//│ 					in let h¹⁰¹ = '|'
//│ 					in (fun ys¹⁰⁵ -> 
//│ 						let t¹⁰² = mappend_lh_₁(t¹⁰¹, ys¹⁰⁵)
//│ 						in let h¹⁰² = h¹⁰¹
//│ 						in (fun ys¹⁰⁶ -> 
//│ 							let t¹⁰³ = mappend_lh_₃(t¹⁰², ys¹⁰⁶)
//│ 							in let h¹⁰³ = h¹⁰²
//│ 							in (fun ys¹⁰⁷ -> [LH_C h¹⁰³ mappend_lh_₇(t¹⁰³, ys¹⁰⁷)])))), showColour_lh_₁(_lh_testMate_nofib_LH_P2_0¹)), 
//│ 					let t¹⁰⁴ = 	
//│ 						let t¹⁰⁵ = 	
//│ 							let t¹⁰⁶ = 	
//│ 								let t¹⁰⁷ = 	
//│ 									let t¹⁰⁸ = 	
//│ 										let t¹⁰⁹ = 	
//│ 											let t¹¹⁰ = 	
//│ 												let t¹¹¹ = 	
//│ 													let t¹¹² = 	
//│ 														let t¹¹³ = 	
//│ 															let t¹¹⁴ = 	
//│ 																let t¹¹⁵ = 	
//│ 																	let t¹¹⁶ = 	
//│ 																		let t¹¹⁷ = 	
//│ 																			let t¹¹⁸ = 	
//│ 																				let t¹¹⁹ = 	
//│ 																					let t¹²⁰ = 	
//│ 																						let t¹²¹ = 	
//│ 																							let t¹²² = 	
//│ 																								let t¹²³ = 	
//│ 																									let t¹²⁴ = (fun ys¹⁰⁸ -> ys¹⁰⁸)
//│ 																									in let h¹⁰⁴ = ' '
//│ 																									in (fun ys¹⁰⁹ -> [LH_C h¹⁰⁴ mappend_lh_₇(t¹²⁴, ys¹⁰⁹)])
//│ 																								in let h¹⁰⁵ = 'n'
//│ 																								in (fun ys¹¹⁰ -> [LH_C h¹⁰⁵ mappend_lh_₇(t¹²³, ys¹¹⁰)])
//│ 																							in let h¹⁰⁶ = 'i'
//│ 																							in (fun ys¹¹¹ -> [LH_C h¹⁰⁶ mappend_lh_₇(t¹²², ys¹¹¹)])
//│ 																						in let h¹⁰⁷ = ' '
//│ 																						in (fun ys¹¹² -> [LH_C h¹⁰⁷ mappend_lh_₇(t¹²¹, ys¹¹²)])
//│ 																					in let h¹⁰⁸ = 'e'
//│ 																					in (fun ys¹¹³ -> [LH_C h¹⁰⁸ mappend_lh_₇(t¹²⁰, ys¹¹³)])
//│ 																				in let h¹⁰⁹ = 't'
//│ 																				in (fun ys¹¹⁴ -> [LH_C h¹⁰⁹ mappend_lh_₇(t¹¹⁹, ys¹¹⁴)])
//│ 																			in let h¹¹⁰ = 'a'
//│ 																			in (fun ys¹¹⁵ -> [LH_C h¹¹⁰ mappend_lh_₇(t¹¹⁸, ys¹¹⁵)])
//│ 																		in let h¹¹¹ = 'm'
//│ 																		in (fun ys¹¹⁶ -> [LH_C h¹¹¹ mappend_lh_₇(t¹¹⁷, ys¹¹⁶)])
//│ 																	in let h¹¹² = ' '
//│ 																	in (fun ys¹¹⁷ -> [LH_C h¹¹² mappend_lh_₇(t¹¹⁶, ys¹¹⁷)])
//│ 																in let h¹¹³ = 'd'
//│ 																in (fun ys¹¹⁸ -> [LH_C h¹¹³ mappend_lh_₇(t¹¹⁵, ys¹¹⁸)])
//│ 															in let h¹¹⁴ = 'n'
//│ 															in (fun ys¹¹⁹ -> [LH_C h¹¹⁴ mappend_lh_₇(t¹¹⁴, ys¹¹⁹)])
//│ 														in let h¹¹⁵ = 'a'
//│ 														in (fun ys¹²⁰ -> [LH_C h¹¹⁵ mappend_lh_₇(t¹¹³, ys¹²⁰)])
//│ 													in let h¹¹⁶ = ' '
//│ 													in (fun ys¹²¹ -> [LH_C h¹¹⁶ mappend_lh_₇(t¹¹², ys¹²¹)])
//│ 												in let h¹¹⁷ = 'e'
//│ 												in (fun ys¹²² -> [LH_C h¹¹⁷ mappend_lh_₇(t¹¹¹, ys¹²²)])
//│ 											in let h¹¹⁸ = 'v'
//│ 											in (fun ys¹²³ -> [LH_C h¹¹⁸ mappend_lh_₇(t¹¹⁰, ys¹²³)])
//│ 										in let h¹¹⁹ = 'o'
//│ 										in (fun ys¹²⁴ -> [LH_C h¹¹⁹ mappend_lh_₇(t¹⁰⁹, ys¹²⁴)])
//│ 									in let h¹²⁰ = 'm'
//│ 									in (fun ys¹²⁵ -> [LH_C h¹²⁰ mappend_lh_₇(t¹⁰⁸, ys¹²⁵)])
//│ 								in let h¹²¹ = ' '
//│ 								in (fun ys¹²⁶ -> [LH_C h¹²¹ mappend_lh_₇(t¹⁰⁷, ys¹²⁶)])
//│ 							in let h¹²² = 'o'
//│ 							in (fun ys¹²⁷ -> [LH_C h¹²² mappend_lh_₇(t¹⁰⁶, ys¹²⁷)])
//│ 						in let h¹²³ = 't'
//│ 						in (fun ys¹²⁸ -> [LH_C h¹²³ mappend_lh_₇(t¹⁰⁵, ys¹²⁸)])
//│ 					in let h¹²⁴ = ' '
//│ 					in (fun ys¹²⁹ -> [LH_C h¹²⁴ mappend_lh_₇(t¹⁰⁴, ys¹²⁹)])), string_of_int⁰(_lh_testMate_nofib_LH_P2_1¹)), 
//│ 					let t¹²⁵ = (fun ys¹³⁰ -> ys¹³⁰)
//│ 					in let h¹²⁵ = '|'
//│ 					in (fun ys¹³¹ -> 
//│ 						let t¹²⁶ = mappend_lh_₂(t¹²⁵, ys¹³¹)
//│ 						in let h¹²⁶ = h¹²⁵
//│ 						in (fun ys¹³² -> [LH_C h¹²⁶ mappend_lh_₅(t¹²⁶, ys¹³²)]))), 
//│ 					let t¹²⁷ = (fun ys¹³³ -> ys¹³³)
//│ 					in let h¹²⁷ = '|'
//│ 					in (fun ys¹³⁴ -> [LH_C h¹²⁷ mappend_lh_₅(t¹²⁷, ys¹³⁴)])), solve_lh_₁(_lh_testMate_nofib_LH_P2_0², _lh_testMate_nofib_LH_P2_0¹, _lh_testMate_nofib_LH_P2_1¹)))
//│ 			| _  => error⁰}) else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰)}
//│ def emptyAtAll_lh_₁(_lh_emptyAtAll_arg1¹, _lh_emptyAtAll_arg2¹) = case _lh_emptyAtAll_arg1¹ of {
//│ 	Board _lh_emptyAtAll_Board_0¹ _lh_emptyAtAll_Board_1¹ => 
//│ 		let emptyAtAllAnd¹ = (fun b³ -> (fun ls⁹ -> 
//│ 			let _lh_matchIdent²⁷ = ls⁹
//│ 			in case _lh_matchIdent²⁷ of {
//│ 				LH_N  => b³
//│ 				| LH_C _lh_emptyAtAll_LH_C_0¹ _lh_emptyAtAll_LH_C_1¹ => case _lh_emptyAtAll_LH_C_0¹ of {
//│ 					LH_P2 _lh_emptyAtAll_LH_P2_0¹ _lh_emptyAtAll_LH_P2_1¹ => (not⁰(_lh_emptyAtAll_arg2¹(_lh_emptyAtAll_LH_P2_1¹)) && emptyAtAllAnd¹(b³, _lh_emptyAtAll_LH_C_1¹))}}))
//│ 		in emptyAtAllAnd¹(emptyAtAllAnd¹([True], _lh_emptyAtAll_Board_1¹), _lh_emptyAtAll_Board_0¹)}
//│ def emptyAtAll_lh_₂(_lh_emptyAtAll_arg1², _lh_emptyAtAll_arg2²) = case _lh_emptyAtAll_arg1² of {
//│ 	Board _lh_emptyAtAll_Board_0² _lh_emptyAtAll_Board_1² => 
//│ 		let emptyAtAllAnd² = (fun b⁵ -> (fun ls¹⁹ -> 
//│ 			let _lh_matchIdent⁴³ = ls¹⁹
//│ 			in case _lh_matchIdent⁴³ of {
//│ 				LH_N  => b⁵
//│ 				| LH_C _lh_emptyAtAll_LH_C_0² _lh_emptyAtAll_LH_C_1² => case _lh_emptyAtAll_LH_C_0² of {
//│ 					LH_P2 _lh_emptyAtAll_LH_P2_0² _lh_emptyAtAll_LH_P2_1² => (not⁰(_lh_emptyAtAll_arg2²(_lh_emptyAtAll_LH_P2_1²)) && emptyAtAllAnd²(b⁵, _lh_emptyAtAll_LH_C_1²))}}))
//│ 		in emptyAtAllAnd²(emptyAtAllAnd²([True], _lh_emptyAtAll_Board_1²), _lh_emptyAtAll_Board_0²)}
//│ def emptyAtAll_lh_₃(_lh_emptyAtAll_arg1³, _lh_emptyAtAll_arg2³) = case _lh_emptyAtAll_arg1³ of {
//│ 	Board _lh_emptyAtAll_Board_0³ _lh_emptyAtAll_Board_1³ => 
//│ 		let emptyAtAllAnd³ = (fun b¹⁰ -> (fun ls²⁶ -> 
//│ 			let _lh_matchIdent⁶⁵ = ls²⁶
//│ 			in case _lh_matchIdent⁶⁵ of {
//│ 				LH_N  => b¹⁰
//│ 				| LH_C _lh_emptyAtAll_LH_C_0³ _lh_emptyAtAll_LH_C_1³ => case _lh_emptyAtAll_LH_C_0³ of {
//│ 					LH_P2 _lh_emptyAtAll_LH_P2_0³ _lh_emptyAtAll_LH_P2_1³ => (not⁰(_lh_emptyAtAll_arg2³(_lh_emptyAtAll_LH_P2_1³)) && emptyAtAllAnd³(b¹⁰, _lh_emptyAtAll_LH_C_1³))}}))
//│ 		in emptyAtAllAnd³(emptyAtAllAnd³([True], _lh_emptyAtAll_Board_1³), _lh_emptyAtAll_Board_0³)}
//│ def emptyAtAll_lh_₄(_lh_emptyAtAll_arg1⁰, _lh_emptyAtAll_arg2⁰) = case _lh_emptyAtAll_arg1⁰ of {
//│ 	Board _lh_emptyAtAll_Board_0⁰ _lh_emptyAtAll_Board_1⁰ => 
//│ 		let emptyAtAllAnd⁰ = (fun b⁰ -> (fun ls⁰ -> 
//│ 			let _lh_matchIdent⁰ = ls⁰
//│ 			in case _lh_matchIdent⁰ of {
//│ 				LH_N  => b⁰
//│ 				| LH_C _lh_emptyAtAll_LH_C_0⁰ _lh_emptyAtAll_LH_C_1⁰ => case _lh_emptyAtAll_LH_C_0⁰ of {
//│ 					LH_P2 _lh_emptyAtAll_LH_P2_0⁰ _lh_emptyAtAll_LH_P2_1⁰ => (not⁰(_lh_emptyAtAll_arg2⁰(_lh_emptyAtAll_LH_P2_1⁰)) && emptyAtAllAnd⁰(b⁰, _lh_emptyAtAll_LH_C_1⁰))}}))
//│ 		in emptyAtAllAnd⁰(emptyAtAllAnd⁰([True], _lh_emptyAtAll_Board_1⁰), _lh_emptyAtAll_Board_0⁰)}
//│ def emptyBoard_lh_₁ = [Board [LH_N] [LH_N]]
//│ def enumFromTo_lh_₁(a⁴, b⁶) = if (a⁴ <= b⁶) then [LH_C a⁴ enumFromTo_lh_₁((a⁴ + 1), b⁶)] else [LH_N]
//│ def enumFromTo_lh_₂(a², b², _lh_floatOutId_0¹, _lh_floatOutId_1¹) = if (a² <= b²) then 
//│ 	let t³⁶ = enumFromTo_lh_₂((a² + 1), b²)
//│ 	in let h³⁶ = a²
//│ 	in _lh_floatOutId_0¹(h³⁶, foldr_lh_₁(_lh_floatOutId_0¹, _lh_floatOutId_1¹, t³⁶)) else _lh_floatOutId_1¹
//│ def enumFromTo_lh_₃(a⁵, b⁷) = if (a⁵ <= b⁷) then [LH_C a⁵ enumFromTo_lh_₃((a⁵ + 1), b⁷)] else [LH_N]
//│ def filter_lh_₁(f²¹, ls²³) = case ls²³ of {
//│ 	LH_C h⁸⁶ t⁸⁶ => if f²¹(h⁸⁶) then [LH_C h⁸⁶ filter_lh_₁(f²¹, t⁸⁶)] else filter_lh_₁(f²¹, t⁸⁶)
//│ 	| LH_N  => [LH_N]}
//│ def foldr_lh_₁(f⁶, i⁶, ls⁸) = ls⁸(f⁶, i⁶)
//│ def foldr_lh_₂(f⁷, i⁷, ls¹⁰) = ls¹⁰(f⁷, i⁷)
//│ def foldr_lh_₃(f⁸, i⁸, ls¹²) = case ls¹² of {
//│ 	LH_C h⁴² t⁴² => f⁸(h⁴², foldr_lh_₃(f⁸, i⁸, t⁴²))
//│ 	| LH_N  => i⁸}
//│ def foldr_lh_₄(f¹⁰, i⁹, ls¹⁶) = case ls¹⁶ of {
//│ 	LH_C h⁶⁷ t⁶⁷ => f¹⁰(h⁶⁷, foldr_lh_₄(f¹⁰, i⁹, t⁶⁷))
//│ 	| LH_N  => i⁹}
//│ def foldr_lh_₅(f⁰, i⁰, ls²) = case ls² of {
//│ 	LH_C h⁰ t⁰ => f⁰(h⁰, foldr_lh_₅(f⁰, i⁰, t⁰))
//│ 	| LH_N  => i⁰}
//│ def foldr_lh_₆(f¹, i¹, ls³) = case ls³ of {
//│ 	LH_C h² t² => f¹(h², foldr_lh_₆(f¹, i¹, t²))
//│ 	| LH_N  => i¹}
//│ def foldr_lh_₇(f²², i¹⁰, ls²⁵) = case ls²⁵ of {
//│ 	LH_C h⁹⁹ t⁹⁹ => f²²(h⁹⁹, foldr_lh_₇(f²², i¹⁰, t⁹⁹))
//│ 	| LH_N  => i¹⁰}
//│ def forcesColoured_lh_₁(_lh_forcesColoured_arg1⁰, _lh_forcesColoured_arg2⁰) = case _lh_forcesColoured_arg1⁰ of {
//│ 	White  => case _lh_forcesColoured_arg2⁰ of {
//│ 		Board _lh_forcesColoured_Board_0⁰ _lh_forcesColoured_Board_1⁰ => _lh_forcesColoured_Board_0⁰}
//│ 	| Black  => case _lh_forcesColoured_arg2⁰ of {
//│ 		Board _lh_forcesColoured_Board_0¹ _lh_forcesColoured_Board_1¹ => _lh_forcesColoured_Board_1¹}}
//│ def forcesColoured_lh_₂(_lh_forcesColoured_arg1¹, _lh_forcesColoured_arg2¹) = case _lh_forcesColoured_arg1¹ of {
//│ 	White  => case _lh_forcesColoured_arg2¹ of {
//│ 		Board _lh_forcesColoured_Board_0² _lh_forcesColoured_Board_1² => _lh_forcesColoured_Board_0²}
//│ 	| Black  => case _lh_forcesColoured_arg2¹ of {
//│ 		Board _lh_forcesColoured_Board_0³ _lh_forcesColoured_Board_1³ => _lh_forcesColoured_Board_1³}}
//│ def head_lh_₁(ls²⁷) = case ls²⁷ of {
//│ 	LH_C h¹⁰⁰ t¹⁰⁰ => h¹⁰⁰
//│ 	| LH_N  => error⁰}
//│ def insertCompact_lh_₁(_lh_insertCompact_arg1⁰, _lh_insertCompact_arg2⁰) = _lh_insertCompact_arg1⁰(_lh_insertCompact_arg2⁰)
//│ def isUpper_lh_₁(_lh_isUpper_arg1⁰) = 
//│ 	let _lh_matchIdent³³ = _lh_isUpper_arg1⁰
//│ 	in case _lh_matchIdent³³ of {
//│ 		'A'  => [True]
//│ 		| 'B'  => [True]
//│ 		| 'C'  => [True]
//│ 		| 'D'  => [True]
//│ 		| 'E'  => [True]
//│ 		| 'F'  => [True]
//│ 		| 'G'  => [True]
//│ 		| 'H'  => [True]
//│ 		| 'I'  => [True]
//│ 		| 'J'  => [True]
//│ 		| 'K'  => [True]
//│ 		| 'L'  => [True]
//│ 		| 'M'  => [True]
//│ 		| 'N'  => [True]
//│ 		| 'O'  => [True]
//│ 		| 'P'  => [True]
//│ 		| 'Q'  => [True]
//│ 		| 'R'  => [True]
//│ 		| 'S'  => [True]
//│ 		| 'T'  => [True]
//│ 		| 'U'  => [True]
//│ 		| 'V'  => [True]
//│ 		| 'W'  => [True]
//│ 		| 'X'  => [True]
//│ 		| 'Y'  => [True]
//│ 		| 'Z'  => [True]
//│ 		| _  => [False]}
//│ def kSq_lh_₁(_lh_kSq_arg1⁰) = case _lh_kSq_arg1⁰ of {
//│ 	LH_C _lh_kSq_LH_C_0⁰ _lh_kSq_LH_C_1⁰ => case _lh_kSq_LH_C_0⁰ of {
//│ 		LH_P2 _lh_kSq_LH_P2_0⁰ _lh_kSq_LH_P2_1⁰ => case _lh_kSq_LH_P2_0⁰ of {
//│ 			King  => _lh_kSq_LH_P2_1⁰
//│ 			| _  => kSq_lh_₁(_lh_kSq_LH_C_1⁰)}
//│ 		| _  => kSq_lh_₁(_lh_kSq_LH_C_1⁰)}
//│ 	| LH_N  => error⁰}
//│ def kindToChar_lh_₁(_lh_kindToChar_arg1¹) = 
//│ 	let _lh_matchIdent⁴⁷ = _lh_kindToChar_arg1¹
//│ 	in case _lh_matchIdent⁴⁷ of {
//│ 		King  => 'K'
//│ 		| Queen  => 'Q'
//│ 		| Rook  => 'R'
//│ 		| Bishop  => 'B'
//│ 		| Knight  => 'N'
//│ 		| Pawn  => 'P'}
//│ def kindToChar_lh_₂(_lh_kindToChar_arg1⁰) = 
//│ 	let _lh_matchIdent³⁴ = _lh_kindToChar_arg1⁰
//│ 	in case _lh_matchIdent³⁴ of {
//│ 		King  => 'K'
//│ 		| Queen  => 'Q'
//│ 		| Rook  => 'R'
//│ 		| Bishop  => 'B'
//│ 		| Knight  => 'N'
//│ 		| Pawn  => 'P'}
//│ def kingSquare_lh_₁(_lh_kingSquare_arg1⁰, _lh_kingSquare_arg2⁰) = case _lh_kingSquare_arg1⁰ of {
//│ 	White  => case _lh_kingSquare_arg2⁰ of {
//│ 		Board _lh_kingSquare_Board_0⁰ _lh_kingSquare_Board_1⁰ => kSq_lh_₁(_lh_kingSquare_Board_0⁰)}
//│ 	| Black  => case _lh_kingSquare_arg2⁰ of {
//│ 		Board _lh_kingSquare_Board_0¹ _lh_kingSquare_Board_1¹ => kSq_lh_₁(_lh_kingSquare_Board_1¹)}}
//│ def kingincheck_lh_₁(_lh_kingincheck_arg1¹, _lh_kingincheck_arg2¹) = 
//│ 	let givesCheck¹ = (fun kxy¹ -> 
//│ 		let _lh_matchIdent⁷¹ = kxy¹
//│ 		in case _lh_matchIdent⁷¹ of {
//│ 			LH_P2 _lh_kingincheck_LH_P2_0⁷ _lh_kingincheck_LH_P2_1⁷ => case _lh_kingincheck_LH_P2_1⁷ of {
//│ 				LH_P2 _lh_kingincheck_LH_P2_0⁸ _lh_kingincheck_LH_P2_1⁸ => 
//│ 					let kthreat¹ = (fun param² -> 
//│ 						let xkyk¹ = kingSquare_lh_₁(_lh_kingincheck_arg1¹, _lh_kingincheck_arg2¹)
//│ 						in let _lh_matchIdent⁷² = xkyk¹
//│ 						in case _lh_matchIdent⁷² of {
//│ 							LH_P2 _lh_kingincheck_LH_P2_0⁹ _lh_kingincheck_LH_P2_1⁹ => 
//│ 								let _lh_matchIdent⁷³ = param²
//│ 								in case _lh_matchIdent⁷³ of {
//│ 									King  => ((abs_lh_₂((_lh_kingincheck_LH_P2_0⁸ - _lh_kingincheck_LH_P2_0⁹)) <= 1) && (abs_lh_₁((_lh_kingincheck_LH_P2_1⁸ - _lh_kingincheck_LH_P2_1⁹)) <= 1))
//│ 									| Queen  => (kthreat¹([Rook]) || kthreat¹([Bishop]))
//│ 									| Rook  => (((_lh_kingincheck_LH_P2_0⁸ == _lh_kingincheck_LH_P2_0⁹) && emptyAtAll_lh_₄(_lh_kingincheck_arg2¹, (fun xeye⁴ -> 
//│ 										let _lh_matchIdent⁷⁴ = xeye⁴
//│ 										in case _lh_matchIdent⁷⁴ of {
//│ 											LH_P2 _lh_kingincheck_LH_P2_0¹⁰ _lh_kingincheck_LH_P2_1¹⁰ => (((_lh_kingincheck_LH_P2_0¹⁰ == _lh_kingincheck_LH_P2_0⁹) && (min_lh_₄(_lh_kingincheck_LH_P2_1⁸, _lh_kingincheck_LH_P2_1⁹) < _lh_kingincheck_LH_P2_1¹⁰)) && (_lh_kingincheck_LH_P2_1¹⁰ < max_lh_₁(_lh_kingincheck_LH_P2_1⁸, _lh_kingincheck_LH_P2_1⁹)))}))) || ((_lh_kingincheck_LH_P2_1⁸ == _lh_kingincheck_LH_P2_1⁹) && emptyAtAll_lh_₃(_lh_kingincheck_arg2¹, (fun xeye⁵ -> 
//│ 										let _lh_matchIdent⁷⁵ = xeye⁵
//│ 										in case _lh_matchIdent⁷⁵ of {
//│ 											LH_P2 _lh_kingincheck_LH_P2_0¹¹ _lh_kingincheck_LH_P2_1¹¹ => (((_lh_kingincheck_LH_P2_1¹¹ == _lh_kingincheck_LH_P2_1⁹) && (min_lh_₃(_lh_kingincheck_LH_P2_0⁸, _lh_kingincheck_LH_P2_0⁹) < _lh_kingincheck_LH_P2_0¹¹)) && (_lh_kingincheck_LH_P2_0¹¹ < max_lh_₂(_lh_kingincheck_LH_P2_0⁸, _lh_kingincheck_LH_P2_0⁹)))}))))
//│ 									| Bishop  => ((((_lh_kingincheck_LH_P2_0⁸ + _lh_kingincheck_LH_P2_1⁸) == (_lh_kingincheck_LH_P2_0⁹ + _lh_kingincheck_LH_P2_1⁹)) && emptyAtAll_lh_₁(_lh_kingincheck_arg2¹, (fun xeye⁶ -> 
//│ 										let _lh_matchIdent⁷⁶ = xeye⁶
//│ 										in case _lh_matchIdent⁷⁶ of {
//│ 											LH_P2 _lh_kingincheck_LH_P2_0¹² _lh_kingincheck_LH_P2_1¹² => ((((_lh_kingincheck_LH_P2_0¹² + _lh_kingincheck_LH_P2_1¹²) == (_lh_kingincheck_LH_P2_0⁹ + _lh_kingincheck_LH_P2_1⁹)) && (min_lh_₁(_lh_kingincheck_LH_P2_0⁸, _lh_kingincheck_LH_P2_0⁹) < _lh_kingincheck_LH_P2_0¹²)) && (_lh_kingincheck_LH_P2_0¹² < max_lh_₃(_lh_kingincheck_LH_P2_0⁸, _lh_kingincheck_LH_P2_0⁹)))}))) || (((_lh_kingincheck_LH_P2_0⁸ - _lh_kingincheck_LH_P2_1⁸) == (_lh_kingincheck_LH_P2_0⁹ - _lh_kingincheck_LH_P2_1⁹)) && emptyAtAll_lh_₂(_lh_kingincheck_arg2¹, (fun xeye⁷ -> 
//│ 										let _lh_matchIdent⁷⁷ = xeye⁷
//│ 										in case _lh_matchIdent⁷⁷ of {
//│ 											LH_P2 _lh_kingincheck_LH_P2_0¹³ _lh_kingincheck_LH_P2_1¹³ => ((((_lh_kingincheck_LH_P2_0¹³ - _lh_kingincheck_LH_P2_1¹³) == (_lh_kingincheck_LH_P2_0⁹ - _lh_kingincheck_LH_P2_1⁹)) && (min_lh_₂(_lh_kingincheck_LH_P2_0⁸, _lh_kingincheck_LH_P2_0⁹) < _lh_kingincheck_LH_P2_0¹³)) && (_lh_kingincheck_LH_P2_0¹³ < max_lh_₄(_lh_kingincheck_LH_P2_0⁸, _lh_kingincheck_LH_P2_0⁹)))}))))
//│ 									| Knight  => (((abs_lh_₄((_lh_kingincheck_LH_P2_0⁸ - _lh_kingincheck_LH_P2_0⁹)) == 2) && (abs_lh_₆((_lh_kingincheck_LH_P2_1⁸ - _lh_kingincheck_LH_P2_1⁹)) == 1)) || ((abs_lh_₅((_lh_kingincheck_LH_P2_0⁸ - _lh_kingincheck_LH_P2_0⁹)) == 1) && (abs_lh_₇((_lh_kingincheck_LH_P2_1⁸ - _lh_kingincheck_LH_P2_1⁹)) == 2)))
//│ 									| Pawn  => ((abs_lh_₃((_lh_kingincheck_LH_P2_0⁸ - _lh_kingincheck_LH_P2_0⁹)) == 1) && 
//│ 										let _lh_matchIdent⁷⁸ = _lh_kingincheck_arg1¹
//│ 										in case _lh_matchIdent⁷⁸ of {
//│ 											Black  => (_lh_kingincheck_LH_P2_1⁹ == (_lh_kingincheck_LH_P2_1⁸ + 1))
//│ 											| White  => (_lh_kingincheck_LH_P2_1⁹ == (_lh_kingincheck_LH_P2_1⁸ - 1))})}})
//│ 					in kthreat¹(_lh_kingincheck_LH_P2_0⁷)}})
//│ 	in any_lh_₁(givesCheck¹, forcesColoured_lh_₂(opponent_lh_₄(_lh_kingincheck_arg1¹), _lh_kingincheck_arg2¹))
//│ def kingincheck_lh_₂(_lh_kingincheck_arg1⁰, _lh_kingincheck_arg2⁰) = 
//│ 	let givesCheck⁰ = (fun kxy⁰ -> 
//│ 		let _lh_matchIdent² = kxy⁰
//│ 		in case _lh_matchIdent² of {
//│ 			LH_P2 _lh_kingincheck_LH_P2_0⁰ _lh_kingincheck_LH_P2_1⁰ => case _lh_kingincheck_LH_P2_1⁰ of {
//│ 				LH_P2 _lh_kingincheck_LH_P2_0¹ _lh_kingincheck_LH_P2_1¹ => 
//│ 					let kthreat⁰ = (fun param⁰ -> 
//│ 						let xkyk⁰ = kingSquare_lh_₁(_lh_kingincheck_arg1⁰, _lh_kingincheck_arg2⁰)
//│ 						in let _lh_matchIdent³ = xkyk⁰
//│ 						in case _lh_matchIdent³ of {
//│ 							LH_P2 _lh_kingincheck_LH_P2_0² _lh_kingincheck_LH_P2_1² => 
//│ 								let _lh_matchIdent⁴ = param⁰
//│ 								in case _lh_matchIdent⁴ of {
//│ 									King  => ((abs_lh_₇((_lh_kingincheck_LH_P2_0¹ - _lh_kingincheck_LH_P2_0²)) <= 1) && (abs_lh_₇((_lh_kingincheck_LH_P2_1¹ - _lh_kingincheck_LH_P2_1²)) <= 1))
//│ 									| Queen  => (kthreat⁰([Rook]) || kthreat⁰([Bishop]))
//│ 									| Rook  => (((_lh_kingincheck_LH_P2_0¹ == _lh_kingincheck_LH_P2_0²) && emptyAtAll_lh_₄(_lh_kingincheck_arg2⁰, (fun xeye⁰ -> 
//│ 										let _lh_matchIdent⁵ = xeye⁰
//│ 										in case _lh_matchIdent⁵ of {
//│ 											LH_P2 _lh_kingincheck_LH_P2_0³ _lh_kingincheck_LH_P2_1³ => (((_lh_kingincheck_LH_P2_0³ == _lh_kingincheck_LH_P2_0²) && (min_lh_₄(_lh_kingincheck_LH_P2_1¹, _lh_kingincheck_LH_P2_1²) < _lh_kingincheck_LH_P2_1³)) && (_lh_kingincheck_LH_P2_1³ < max_lh_₄(_lh_kingincheck_LH_P2_1¹, _lh_kingincheck_LH_P2_1²)))}))) || ((_lh_kingincheck_LH_P2_1¹ == _lh_kingincheck_LH_P2_1²) && emptyAtAll_lh_₄(_lh_kingincheck_arg2⁰, (fun xeye¹ -> 
//│ 										let _lh_matchIdent⁶ = xeye¹
//│ 										in case _lh_matchIdent⁶ of {
//│ 											LH_P2 _lh_kingincheck_LH_P2_0⁴ _lh_kingincheck_LH_P2_1⁴ => (((_lh_kingincheck_LH_P2_1⁴ == _lh_kingincheck_LH_P2_1²) && (min_lh_₄(_lh_kingincheck_LH_P2_0¹, _lh_kingincheck_LH_P2_0²) < _lh_kingincheck_LH_P2_0⁴)) && (_lh_kingincheck_LH_P2_0⁴ < max_lh_₄(_lh_kingincheck_LH_P2_0¹, _lh_kingincheck_LH_P2_0²)))}))))
//│ 									| Bishop  => ((((_lh_kingincheck_LH_P2_0¹ + _lh_kingincheck_LH_P2_1¹) == (_lh_kingincheck_LH_P2_0² + _lh_kingincheck_LH_P2_1²)) && emptyAtAll_lh_₄(_lh_kingincheck_arg2⁰, (fun xeye² -> 
//│ 										let _lh_matchIdent⁷ = xeye²
//│ 										in case _lh_matchIdent⁷ of {
//│ 											LH_P2 _lh_kingincheck_LH_P2_0⁵ _lh_kingincheck_LH_P2_1⁵ => ((((_lh_kingincheck_LH_P2_0⁵ + _lh_kingincheck_LH_P2_1⁵) == (_lh_kingincheck_LH_P2_0² + _lh_kingincheck_LH_P2_1²)) && (min_lh_₄(_lh_kingincheck_LH_P2_0¹, _lh_kingincheck_LH_P2_0²) < _lh_kingincheck_LH_P2_0⁵)) && (_lh_kingincheck_LH_P2_0⁵ < max_lh_₄(_lh_kingincheck_LH_P2_0¹, _lh_kingincheck_LH_P2_0²)))}))) || (((_lh_kingincheck_LH_P2_0¹ - _lh_kingincheck_LH_P2_1¹) == (_lh_kingincheck_LH_P2_0² - _lh_kingincheck_LH_P2_1²)) && emptyAtAll_lh_₄(_lh_kingincheck_arg2⁰, (fun xeye³ -> 
//│ 										let _lh_matchIdent⁸ = xeye³
//│ 										in case _lh_matchIdent⁸ of {
//│ 											LH_P2 _lh_kingincheck_LH_P2_0⁶ _lh_kingincheck_LH_P2_1⁶ => ((((_lh_kingincheck_LH_P2_0⁶ - _lh_kingincheck_LH_P2_1⁶) == (_lh_kingincheck_LH_P2_0² - _lh_kingincheck_LH_P2_1²)) && (min_lh_₄(_lh_kingincheck_LH_P2_0¹, _lh_kingincheck_LH_P2_0²) < _lh_kingincheck_LH_P2_0⁶)) && (_lh_kingincheck_LH_P2_0⁶ < max_lh_₄(_lh_kingincheck_LH_P2_0¹, _lh_kingincheck_LH_P2_0²)))}))))
//│ 									| Knight  => (((abs_lh_₇((_lh_kingincheck_LH_P2_0¹ - _lh_kingincheck_LH_P2_0²)) == 2) && (abs_lh_₇((_lh_kingincheck_LH_P2_1¹ - _lh_kingincheck_LH_P2_1²)) == 1)) || ((abs_lh_₇((_lh_kingincheck_LH_P2_0¹ - _lh_kingincheck_LH_P2_0²)) == 1) && (abs_lh_₇((_lh_kingincheck_LH_P2_1¹ - _lh_kingincheck_LH_P2_1²)) == 2)))
//│ 									| Pawn  => ((abs_lh_₇((_lh_kingincheck_LH_P2_0¹ - _lh_kingincheck_LH_P2_0²)) == 1) && 
//│ 										let _lh_matchIdent⁹ = _lh_kingincheck_arg1⁰
//│ 										in case _lh_matchIdent⁹ of {
//│ 											Black  => (_lh_kingincheck_LH_P2_1² == (_lh_kingincheck_LH_P2_1¹ + 1))
//│ 											| White  => (_lh_kingincheck_LH_P2_1² == (_lh_kingincheck_LH_P2_1¹ - 1))})}})
//│ 					in kthreat⁰(_lh_kingincheck_LH_P2_0⁰)}})
//│ 	in any_lh_₁(givesCheck⁰, forcesColoured_lh_₂(opponent_lh_₅(_lh_kingincheck_arg1⁰), _lh_kingincheck_arg2⁰))
//│ def kingmoves_lh_₁(_lh_kingmoves_arg1⁰, _lh_kingmoves_arg2⁰, _lh_kingmoves_arg3⁰) = case _lh_kingmoves_arg2⁰ of {
//│ 	LH_P2 _lh_kingmoves_LH_P2_0⁰ _lh_kingmoves_LH_P2_1⁰ => sift_lh_₁(_lh_kingmoves_arg1⁰, _lh_kingmoves_arg3⁰, [LH_N], 
//│ 		let _lh_sift_LH_C_1⁰ = 	
//│ 			let _lh_sift_LH_C_1¹ = 	
//│ 				let _lh_sift_LH_C_1² = 	
//│ 					let _lh_sift_LH_C_1³ = 	
//│ 						let _lh_sift_LH_C_1⁴ = 	
//│ 							let _lh_sift_LH_C_1⁵ = 	
//│ 								let _lh_sift_LH_C_1⁶ = 	
//│ 									let _lh_sift_LH_C_1⁷ = (fun _lh_sift_arg3⁰ -> (fun _lh_sift_arg1⁰ -> (fun _lh_sift_arg2⁰ -> _lh_sift_arg3⁰)))
//│ 									in let _lh_sift_LH_C_0⁰ = [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ - 1)]
//│ 									in (fun _lh_sift_arg3¹ -> (fun _lh_sift_arg1¹ -> (fun _lh_sift_arg2¹ -> if onboard_lh_₁(_lh_sift_LH_C_0⁰) then 
//│ 										let _lh_matchIdent¹⁴ = pieceAt_lh_₁(_lh_sift_arg2¹, _lh_sift_LH_C_0⁰)
//│ 										in case _lh_matchIdent¹⁴ of {
//│ 											Nothing  => sift_lh_₁(_lh_sift_arg1¹, _lh_sift_arg2¹, [LH_C [Move _lh_sift_LH_C_0⁰ [Nothing] [Nothing]] _lh_sift_arg3¹], _lh_sift_LH_C_1⁷)
//│ 											| Just _lh_sift_Just_0⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁰), _lh_sift_arg1¹) then sift_lh_₁(_lh_sift_arg1¹, _lh_sift_arg2¹, _lh_sift_arg3¹, _lh_sift_LH_C_1⁷) else sift_lh_₁(_lh_sift_arg1¹, _lh_sift_arg2¹, [LH_C [Move _lh_sift_LH_C_0⁰ [Just _lh_sift_Just_0⁰] [Nothing]] _lh_sift_arg3¹], _lh_sift_LH_C_1⁷)} else sift_lh_₁(_lh_sift_arg1¹, _lh_sift_arg2¹, _lh_sift_arg3¹, _lh_sift_LH_C_1⁷))))
//│ 								in let _lh_sift_LH_C_0¹ = [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ - 1)]
//│ 								in (fun _lh_sift_arg3² -> (fun _lh_sift_arg1² -> (fun _lh_sift_arg2² -> if onboard_lh_₁(_lh_sift_LH_C_0¹) then 
//│ 									let _lh_matchIdent¹⁵ = pieceAt_lh_₁(_lh_sift_arg2², _lh_sift_LH_C_0¹)
//│ 									in case _lh_matchIdent¹⁵ of {
//│ 										Nothing  => sift_lh_₁(_lh_sift_arg1², _lh_sift_arg2², [LH_C [Move _lh_sift_LH_C_0¹ [Nothing] [Nothing]] _lh_sift_arg3²], _lh_sift_LH_C_1⁶)
//│ 										| Just _lh_sift_Just_0¹ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0¹), _lh_sift_arg1²) then sift_lh_₁(_lh_sift_arg1², _lh_sift_arg2², _lh_sift_arg3², _lh_sift_LH_C_1⁶) else sift_lh_₁(_lh_sift_arg1², _lh_sift_arg2², [LH_C [Move _lh_sift_LH_C_0¹ [Just _lh_sift_Just_0¹] [Nothing]] _lh_sift_arg3²], _lh_sift_LH_C_1⁶)} else sift_lh_₁(_lh_sift_arg1², _lh_sift_arg2², _lh_sift_arg3², _lh_sift_LH_C_1⁶))))
//│ 							in let _lh_sift_LH_C_0² = [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ - 1)]
//│ 							in (fun _lh_sift_arg3³ -> (fun _lh_sift_arg1³ -> (fun _lh_sift_arg2³ -> if onboard_lh_₁(_lh_sift_LH_C_0²) then 
//│ 								let _lh_matchIdent¹⁶ = pieceAt_lh_₁(_lh_sift_arg2³, _lh_sift_LH_C_0²)
//│ 								in case _lh_matchIdent¹⁶ of {
//│ 									Nothing  => sift_lh_₁(_lh_sift_arg1³, _lh_sift_arg2³, [LH_C [Move _lh_sift_LH_C_0² [Nothing] [Nothing]] _lh_sift_arg3³], _lh_sift_LH_C_1⁵)
//│ 									| Just _lh_sift_Just_0² => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0²), _lh_sift_arg1³) then sift_lh_₁(_lh_sift_arg1³, _lh_sift_arg2³, _lh_sift_arg3³, _lh_sift_LH_C_1⁵) else sift_lh_₁(_lh_sift_arg1³, _lh_sift_arg2³, [LH_C [Move _lh_sift_LH_C_0² [Just _lh_sift_Just_0²] [Nothing]] _lh_sift_arg3³], _lh_sift_LH_C_1⁵)} else sift_lh_₁(_lh_sift_arg1³, _lh_sift_arg2³, _lh_sift_arg3³, _lh_sift_LH_C_1⁵))))
//│ 						in let _lh_sift_LH_C_0³ = [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) _lh_kingmoves_LH_P2_1⁰]
//│ 						in (fun _lh_sift_arg3⁴ -> (fun _lh_sift_arg1⁴ -> (fun _lh_sift_arg2⁴ -> if onboard_lh_₁(_lh_sift_LH_C_0³) then 
//│ 							let _lh_matchIdent¹⁷ = pieceAt_lh_₁(_lh_sift_arg2⁴, _lh_sift_LH_C_0³)
//│ 							in case _lh_matchIdent¹⁷ of {
//│ 								Nothing  => sift_lh_₁(_lh_sift_arg1⁴, _lh_sift_arg2⁴, [LH_C [Move _lh_sift_LH_C_0³ [Nothing] [Nothing]] _lh_sift_arg3⁴], _lh_sift_LH_C_1⁴)
//│ 								| Just _lh_sift_Just_0³ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0³), _lh_sift_arg1⁴) then sift_lh_₁(_lh_sift_arg1⁴, _lh_sift_arg2⁴, _lh_sift_arg3⁴, _lh_sift_LH_C_1⁴) else sift_lh_₁(_lh_sift_arg1⁴, _lh_sift_arg2⁴, [LH_C [Move _lh_sift_LH_C_0³ [Just _lh_sift_Just_0³] [Nothing]] _lh_sift_arg3⁴], _lh_sift_LH_C_1⁴)} else sift_lh_₁(_lh_sift_arg1⁴, _lh_sift_arg2⁴, _lh_sift_arg3⁴, _lh_sift_LH_C_1⁴))))
//│ 					in let _lh_sift_LH_C_0⁴ = [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) _lh_kingmoves_LH_P2_1⁰]
//│ 					in (fun _lh_sift_arg3⁵ -> (fun _lh_sift_arg1⁵ -> (fun _lh_sift_arg2⁵ -> if onboard_lh_₁(_lh_sift_LH_C_0⁴) then 
//│ 						let _lh_matchIdent¹⁸ = pieceAt_lh_₁(_lh_sift_arg2⁵, _lh_sift_LH_C_0⁴)
//│ 						in case _lh_matchIdent¹⁸ of {
//│ 							Nothing  => sift_lh_₁(_lh_sift_arg1⁵, _lh_sift_arg2⁵, [LH_C [Move _lh_sift_LH_C_0⁴ [Nothing] [Nothing]] _lh_sift_arg3⁵], _lh_sift_LH_C_1³)
//│ 							| Just _lh_sift_Just_0⁴ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁴), _lh_sift_arg1⁵) then sift_lh_₁(_lh_sift_arg1⁵, _lh_sift_arg2⁵, _lh_sift_arg3⁵, _lh_sift_LH_C_1³) else sift_lh_₁(_lh_sift_arg1⁵, _lh_sift_arg2⁵, [LH_C [Move _lh_sift_LH_C_0⁴ [Just _lh_sift_Just_0⁴] [Nothing]] _lh_sift_arg3⁵], _lh_sift_LH_C_1³)} else sift_lh_₁(_lh_sift_arg1⁵, _lh_sift_arg2⁵, _lh_sift_arg3⁵, _lh_sift_LH_C_1³))))
//│ 				in let _lh_sift_LH_C_0⁵ = [LH_P2 (_lh_kingmoves_LH_P2_0⁰ + 1) (_lh_kingmoves_LH_P2_1⁰ + 1)]
//│ 				in (fun _lh_sift_arg3⁶ -> (fun _lh_sift_arg1⁶ -> (fun _lh_sift_arg2⁶ -> if onboard_lh_₁(_lh_sift_LH_C_0⁵) then 
//│ 					let _lh_matchIdent¹⁹ = pieceAt_lh_₁(_lh_sift_arg2⁶, _lh_sift_LH_C_0⁵)
//│ 					in case _lh_matchIdent¹⁹ of {
//│ 						Nothing  => sift_lh_₁(_lh_sift_arg1⁶, _lh_sift_arg2⁶, [LH_C [Move _lh_sift_LH_C_0⁵ [Nothing] [Nothing]] _lh_sift_arg3⁶], _lh_sift_LH_C_1²)
//│ 						| Just _lh_sift_Just_0⁵ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁵), _lh_sift_arg1⁶) then sift_lh_₁(_lh_sift_arg1⁶, _lh_sift_arg2⁶, _lh_sift_arg3⁶, _lh_sift_LH_C_1²) else sift_lh_₁(_lh_sift_arg1⁶, _lh_sift_arg2⁶, [LH_C [Move _lh_sift_LH_C_0⁵ [Just _lh_sift_Just_0⁵] [Nothing]] _lh_sift_arg3⁶], _lh_sift_LH_C_1²)} else sift_lh_₁(_lh_sift_arg1⁶, _lh_sift_arg2⁶, _lh_sift_arg3⁶, _lh_sift_LH_C_1²))))
//│ 			in let _lh_sift_LH_C_0⁶ = [LH_P2 _lh_kingmoves_LH_P2_0⁰ (_lh_kingmoves_LH_P2_1⁰ + 1)]
//│ 			in (fun _lh_sift_arg3⁷ -> (fun _lh_sift_arg1⁷ -> (fun _lh_sift_arg2⁷ -> if onboard_lh_₁(_lh_sift_LH_C_0⁶) then 
//│ 				let _lh_matchIdent²⁰ = pieceAt_lh_₁(_lh_sift_arg2⁷, _lh_sift_LH_C_0⁶)
//│ 				in case _lh_matchIdent²⁰ of {
//│ 					Nothing  => sift_lh_₁(_lh_sift_arg1⁷, _lh_sift_arg2⁷, [LH_C [Move _lh_sift_LH_C_0⁶ [Nothing] [Nothing]] _lh_sift_arg3⁷], _lh_sift_LH_C_1¹)
//│ 					| Just _lh_sift_Just_0⁶ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁶), _lh_sift_arg1⁷) then sift_lh_₁(_lh_sift_arg1⁷, _lh_sift_arg2⁷, _lh_sift_arg3⁷, _lh_sift_LH_C_1¹) else sift_lh_₁(_lh_sift_arg1⁷, _lh_sift_arg2⁷, [LH_C [Move _lh_sift_LH_C_0⁶ [Just _lh_sift_Just_0⁶] [Nothing]] _lh_sift_arg3⁷], _lh_sift_LH_C_1¹)} else sift_lh_₁(_lh_sift_arg1⁷, _lh_sift_arg2⁷, _lh_sift_arg3⁷, _lh_sift_LH_C_1¹))))
//│ 		in let _lh_sift_LH_C_0⁷ = [LH_P2 (_lh_kingmoves_LH_P2_0⁰ - 1) (_lh_kingmoves_LH_P2_1⁰ + 1)]
//│ 		in (fun _lh_sift_arg3⁸ -> (fun _lh_sift_arg1⁸ -> (fun _lh_sift_arg2⁸ -> if onboard_lh_₁(_lh_sift_LH_C_0⁷) then 
//│ 			let _lh_matchIdent²¹ = pieceAt_lh_₁(_lh_sift_arg2⁸, _lh_sift_LH_C_0⁷)
//│ 			in case _lh_matchIdent²¹ of {
//│ 				Nothing  => sift_lh_₁(_lh_sift_arg1⁸, _lh_sift_arg2⁸, [LH_C [Move _lh_sift_LH_C_0⁷ [Nothing] [Nothing]] _lh_sift_arg3⁸], _lh_sift_LH_C_1⁰)
//│ 				| Just _lh_sift_Just_0⁷ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁷), _lh_sift_arg1⁸) then sift_lh_₁(_lh_sift_arg1⁸, _lh_sift_arg2⁸, _lh_sift_arg3⁸, _lh_sift_LH_C_1⁰) else sift_lh_₁(_lh_sift_arg1⁸, _lh_sift_arg2⁸, [LH_C [Move _lh_sift_LH_C_0⁷ [Just _lh_sift_Just_0⁷] [Nothing]] _lh_sift_arg3⁸], _lh_sift_LH_C_1⁰)} else sift_lh_₁(_lh_sift_arg1⁸, _lh_sift_arg2⁸, _lh_sift_arg3⁸, _lh_sift_LH_C_1⁰)))))}
//│ def knightmoves_lh_₁(_lh_knightmoves_arg1⁰, _lh_knightmoves_arg2⁰, _lh_knightmoves_arg3⁰) = case _lh_knightmoves_arg2⁰ of {
//│ 	LH_P2 _lh_knightmoves_LH_P2_0⁰ _lh_knightmoves_LH_P2_1⁰ => sift_lh_₁(_lh_knightmoves_arg1⁰, _lh_knightmoves_arg3⁰, [LH_N], 
//│ 		let _lh_sift_LH_C_1⁸ = 	
//│ 			let _lh_sift_LH_C_1⁹ = 	
//│ 				let _lh_sift_LH_C_1¹⁰ = 	
//│ 					let _lh_sift_LH_C_1¹¹ = 	
//│ 						let _lh_sift_LH_C_1¹² = 	
//│ 							let _lh_sift_LH_C_1¹³ = 	
//│ 								let _lh_sift_LH_C_1¹⁴ = 	
//│ 									let _lh_sift_LH_C_1¹⁵ = (fun _lh_sift_arg3⁹ -> (fun _lh_sift_arg1⁹ -> (fun _lh_sift_arg2⁹ -> _lh_sift_arg3⁹)))
//│ 									in let _lh_sift_LH_C_0⁸ = [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ - 2)]
//│ 									in (fun _lh_sift_arg3¹⁰ -> (fun _lh_sift_arg1¹⁰ -> (fun _lh_sift_arg2¹⁰ -> if onboard_lh_₁(_lh_sift_LH_C_0⁸) then 
//│ 										let _lh_matchIdent⁴⁸ = pieceAt_lh_₁(_lh_sift_arg2¹⁰, _lh_sift_LH_C_0⁸)
//│ 										in case _lh_matchIdent⁴⁸ of {
//│ 											Nothing  => sift_lh_₁(_lh_sift_arg1¹⁰, _lh_sift_arg2¹⁰, [LH_C [Move _lh_sift_LH_C_0⁸ [Nothing] [Nothing]] _lh_sift_arg3¹⁰], _lh_sift_LH_C_1¹⁵)
//│ 											| Just _lh_sift_Just_0⁸ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁸), _lh_sift_arg1¹⁰) then sift_lh_₁(_lh_sift_arg1¹⁰, _lh_sift_arg2¹⁰, _lh_sift_arg3¹⁰, _lh_sift_LH_C_1¹⁵) else sift_lh_₁(_lh_sift_arg1¹⁰, _lh_sift_arg2¹⁰, [LH_C [Move _lh_sift_LH_C_0⁸ [Just _lh_sift_Just_0⁸] [Nothing]] _lh_sift_arg3¹⁰], _lh_sift_LH_C_1¹⁵)} else sift_lh_₁(_lh_sift_arg1¹⁰, _lh_sift_arg2¹⁰, _lh_sift_arg3¹⁰, _lh_sift_LH_C_1¹⁵))))
//│ 								in let _lh_sift_LH_C_0⁹ = [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ - 2)]
//│ 								in (fun _lh_sift_arg3¹¹ -> (fun _lh_sift_arg1¹¹ -> (fun _lh_sift_arg2¹¹ -> if onboard_lh_₁(_lh_sift_LH_C_0⁹) then 
//│ 									let _lh_matchIdent⁴⁹ = pieceAt_lh_₁(_lh_sift_arg2¹¹, _lh_sift_LH_C_0⁹)
//│ 									in case _lh_matchIdent⁴⁹ of {
//│ 										Nothing  => sift_lh_₁(_lh_sift_arg1¹¹, _lh_sift_arg2¹¹, [LH_C [Move _lh_sift_LH_C_0⁹ [Nothing] [Nothing]] _lh_sift_arg3¹¹], _lh_sift_LH_C_1¹⁴)
//│ 										| Just _lh_sift_Just_0⁹ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0⁹), _lh_sift_arg1¹¹) then sift_lh_₁(_lh_sift_arg1¹¹, _lh_sift_arg2¹¹, _lh_sift_arg3¹¹, _lh_sift_LH_C_1¹⁴) else sift_lh_₁(_lh_sift_arg1¹¹, _lh_sift_arg2¹¹, [LH_C [Move _lh_sift_LH_C_0⁹ [Just _lh_sift_Just_0⁹] [Nothing]] _lh_sift_arg3¹¹], _lh_sift_LH_C_1¹⁴)} else sift_lh_₁(_lh_sift_arg1¹¹, _lh_sift_arg2¹¹, _lh_sift_arg3¹¹, _lh_sift_LH_C_1¹⁴))))
//│ 							in let _lh_sift_LH_C_0¹⁰ = [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ - 1)]
//│ 							in (fun _lh_sift_arg3¹² -> (fun _lh_sift_arg1¹² -> (fun _lh_sift_arg2¹² -> if onboard_lh_₁(_lh_sift_LH_C_0¹⁰) then 
//│ 								let _lh_matchIdent⁵⁰ = pieceAt_lh_₁(_lh_sift_arg2¹², _lh_sift_LH_C_0¹⁰)
//│ 								in case _lh_matchIdent⁵⁰ of {
//│ 									Nothing  => sift_lh_₁(_lh_sift_arg1¹², _lh_sift_arg2¹², [LH_C [Move _lh_sift_LH_C_0¹⁰ [Nothing] [Nothing]] _lh_sift_arg3¹²], _lh_sift_LH_C_1¹³)
//│ 									| Just _lh_sift_Just_0¹⁰ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0¹⁰), _lh_sift_arg1¹²) then sift_lh_₁(_lh_sift_arg1¹², _lh_sift_arg2¹², _lh_sift_arg3¹², _lh_sift_LH_C_1¹³) else sift_lh_₁(_lh_sift_arg1¹², _lh_sift_arg2¹², [LH_C [Move _lh_sift_LH_C_0¹⁰ [Just _lh_sift_Just_0¹⁰] [Nothing]] _lh_sift_arg3¹²], _lh_sift_LH_C_1¹³)} else sift_lh_₁(_lh_sift_arg1¹², _lh_sift_arg2¹², _lh_sift_arg3¹², _lh_sift_LH_C_1¹³))))
//│ 						in let _lh_sift_LH_C_0¹¹ = [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ - 1)]
//│ 						in (fun _lh_sift_arg3¹³ -> (fun _lh_sift_arg1¹³ -> (fun _lh_sift_arg2¹³ -> if onboard_lh_₁(_lh_sift_LH_C_0¹¹) then 
//│ 							let _lh_matchIdent⁵¹ = pieceAt_lh_₁(_lh_sift_arg2¹³, _lh_sift_LH_C_0¹¹)
//│ 							in case _lh_matchIdent⁵¹ of {
//│ 								Nothing  => sift_lh_₁(_lh_sift_arg1¹³, _lh_sift_arg2¹³, [LH_C [Move _lh_sift_LH_C_0¹¹ [Nothing] [Nothing]] _lh_sift_arg3¹³], _lh_sift_LH_C_1¹²)
//│ 								| Just _lh_sift_Just_0¹¹ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0¹¹), _lh_sift_arg1¹³) then sift_lh_₁(_lh_sift_arg1¹³, _lh_sift_arg2¹³, _lh_sift_arg3¹³, _lh_sift_LH_C_1¹²) else sift_lh_₁(_lh_sift_arg1¹³, _lh_sift_arg2¹³, [LH_C [Move _lh_sift_LH_C_0¹¹ [Just _lh_sift_Just_0¹¹] [Nothing]] _lh_sift_arg3¹³], _lh_sift_LH_C_1¹²)} else sift_lh_₁(_lh_sift_arg1¹³, _lh_sift_arg2¹³, _lh_sift_arg3¹³, _lh_sift_LH_C_1¹²))))
//│ 					in let _lh_sift_LH_C_0¹² = [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 2) (_lh_knightmoves_LH_P2_1⁰ + 1)]
//│ 					in (fun _lh_sift_arg3¹⁴ -> (fun _lh_sift_arg1¹⁴ -> (fun _lh_sift_arg2¹⁴ -> if onboard_lh_₁(_lh_sift_LH_C_0¹²) then 
//│ 						let _lh_matchIdent⁵² = pieceAt_lh_₁(_lh_sift_arg2¹⁴, _lh_sift_LH_C_0¹²)
//│ 						in case _lh_matchIdent⁵² of {
//│ 							Nothing  => sift_lh_₁(_lh_sift_arg1¹⁴, _lh_sift_arg2¹⁴, [LH_C [Move _lh_sift_LH_C_0¹² [Nothing] [Nothing]] _lh_sift_arg3¹⁴], _lh_sift_LH_C_1¹¹)
//│ 							| Just _lh_sift_Just_0¹² => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0¹²), _lh_sift_arg1¹⁴) then sift_lh_₁(_lh_sift_arg1¹⁴, _lh_sift_arg2¹⁴, _lh_sift_arg3¹⁴, _lh_sift_LH_C_1¹¹) else sift_lh_₁(_lh_sift_arg1¹⁴, _lh_sift_arg2¹⁴, [LH_C [Move _lh_sift_LH_C_0¹² [Just _lh_sift_Just_0¹²] [Nothing]] _lh_sift_arg3¹⁴], _lh_sift_LH_C_1¹¹)} else sift_lh_₁(_lh_sift_arg1¹⁴, _lh_sift_arg2¹⁴, _lh_sift_arg3¹⁴, _lh_sift_LH_C_1¹¹))))
//│ 				in let _lh_sift_LH_C_0¹³ = [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 2) (_lh_knightmoves_LH_P2_1⁰ + 1)]
//│ 				in (fun _lh_sift_arg3¹⁵ -> (fun _lh_sift_arg1¹⁵ -> (fun _lh_sift_arg2¹⁵ -> if onboard_lh_₁(_lh_sift_LH_C_0¹³) then 
//│ 					let _lh_matchIdent⁵³ = pieceAt_lh_₁(_lh_sift_arg2¹⁵, _lh_sift_LH_C_0¹³)
//│ 					in case _lh_matchIdent⁵³ of {
//│ 						Nothing  => sift_lh_₁(_lh_sift_arg1¹⁵, _lh_sift_arg2¹⁵, [LH_C [Move _lh_sift_LH_C_0¹³ [Nothing] [Nothing]] _lh_sift_arg3¹⁵], _lh_sift_LH_C_1¹⁰)
//│ 						| Just _lh_sift_Just_0¹³ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0¹³), _lh_sift_arg1¹⁵) then sift_lh_₁(_lh_sift_arg1¹⁵, _lh_sift_arg2¹⁵, _lh_sift_arg3¹⁵, _lh_sift_LH_C_1¹⁰) else sift_lh_₁(_lh_sift_arg1¹⁵, _lh_sift_arg2¹⁵, [LH_C [Move _lh_sift_LH_C_0¹³ [Just _lh_sift_Just_0¹³] [Nothing]] _lh_sift_arg3¹⁵], _lh_sift_LH_C_1¹⁰)} else sift_lh_₁(_lh_sift_arg1¹⁵, _lh_sift_arg2¹⁵, _lh_sift_arg3¹⁵, _lh_sift_LH_C_1¹⁰))))
//│ 			in let _lh_sift_LH_C_0¹⁴ = [LH_P2 (_lh_knightmoves_LH_P2_0⁰ + 1) (_lh_knightmoves_LH_P2_1⁰ + 2)]
//│ 			in (fun _lh_sift_arg3¹⁶ -> (fun _lh_sift_arg1¹⁶ -> (fun _lh_sift_arg2¹⁶ -> if onboard_lh_₁(_lh_sift_LH_C_0¹⁴) then 
//│ 				let _lh_matchIdent⁵⁴ = pieceAt_lh_₁(_lh_sift_arg2¹⁶, _lh_sift_LH_C_0¹⁴)
//│ 				in case _lh_matchIdent⁵⁴ of {
//│ 					Nothing  => sift_lh_₁(_lh_sift_arg1¹⁶, _lh_sift_arg2¹⁶, [LH_C [Move _lh_sift_LH_C_0¹⁴ [Nothing] [Nothing]] _lh_sift_arg3¹⁶], _lh_sift_LH_C_1⁹)
//│ 					| Just _lh_sift_Just_0¹⁴ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0¹⁴), _lh_sift_arg1¹⁶) then sift_lh_₁(_lh_sift_arg1¹⁶, _lh_sift_arg2¹⁶, _lh_sift_arg3¹⁶, _lh_sift_LH_C_1⁹) else sift_lh_₁(_lh_sift_arg1¹⁶, _lh_sift_arg2¹⁶, [LH_C [Move _lh_sift_LH_C_0¹⁴ [Just _lh_sift_Just_0¹⁴] [Nothing]] _lh_sift_arg3¹⁶], _lh_sift_LH_C_1⁹)} else sift_lh_₁(_lh_sift_arg1¹⁶, _lh_sift_arg2¹⁶, _lh_sift_arg3¹⁶, _lh_sift_LH_C_1⁹))))
//│ 		in let _lh_sift_LH_C_0¹⁵ = [LH_P2 (_lh_knightmoves_LH_P2_0⁰ - 1) (_lh_knightmoves_LH_P2_1⁰ + 2)]
//│ 		in (fun _lh_sift_arg3¹⁷ -> (fun _lh_sift_arg1¹⁷ -> (fun _lh_sift_arg2¹⁷ -> if onboard_lh_₁(_lh_sift_LH_C_0¹⁵) then 
//│ 			let _lh_matchIdent⁵⁵ = pieceAt_lh_₁(_lh_sift_arg2¹⁷, _lh_sift_LH_C_0¹⁵)
//│ 			in case _lh_matchIdent⁵⁵ of {
//│ 				Nothing  => sift_lh_₁(_lh_sift_arg1¹⁷, _lh_sift_arg2¹⁷, [LH_C [Move _lh_sift_LH_C_0¹⁵ [Nothing] [Nothing]] _lh_sift_arg3¹⁷], _lh_sift_LH_C_1⁸)
//│ 				| Just _lh_sift_Just_0¹⁵ => if polyEq⁰(colourOf_lh_₁(_lh_sift_Just_0¹⁵), _lh_sift_arg1¹⁷) then sift_lh_₁(_lh_sift_arg1¹⁷, _lh_sift_arg2¹⁷, _lh_sift_arg3¹⁷, _lh_sift_LH_C_1⁸) else sift_lh_₁(_lh_sift_arg1¹⁷, _lh_sift_arg2¹⁷, [LH_C [Move _lh_sift_LH_C_0¹⁵ [Just _lh_sift_Just_0¹⁵] [Nothing]] _lh_sift_arg3¹⁷], _lh_sift_LH_C_1⁸)} else sift_lh_₁(_lh_sift_arg1¹⁷, _lh_sift_arg2¹⁷, _lh_sift_arg3¹⁷, _lh_sift_LH_C_1⁸)))))}
//│ def length_lh_₁(ls²¹) = case ls²¹ of {
//│ 	LH_C h⁸⁴ t⁸⁴ => (1 + length_lh_₁(t⁸⁴))
//│ 	| LH_N  => 0}
//│ def length_lh_₁₀(ls⁵) = case ls⁵ of {
//│ 	LH_C h²⁶ t²⁶ => (1 + length_lh_₁₀(t²⁶))
//│ 	| LH_N  => 0}
//│ def length_lh_₂(ls³²) = case ls³² of {
//│ 	LH_C h¹⁴³ t¹⁴³ => (1 + length_lh_₂(t¹⁴³))
//│ 	| LH_N  => 0}
//│ def length_lh_₃(ls²²) = case ls²² of {
//│ 	LH_C h⁸⁵ t⁸⁵ => (1 + length_lh_₃(t⁸⁵))
//│ 	| LH_N  => 0}
//│ def length_lh_₄(ls²⁰) = case ls²⁰ of {
//│ 	LH_C h⁸³ t⁸³ => (1 + length_lh_₄(t⁸³))
//│ 	| LH_N  => 0}
//│ def length_lh_₅(ls⁴) = case ls⁴ of {
//│ 	LH_C h²⁴ t²⁴ => (1 + length_lh_₅(t²⁴))
//│ 	| LH_N  => 0}
//│ def length_lh_₆(ls³¹) = case ls³¹ of {
//│ 	LH_C h¹⁴² t¹⁴² => (1 + length_lh_₆(t¹⁴²))
//│ 	| LH_N  => 0}
//│ def length_lh_₇(ls⁷) = case ls⁷ of {
//│ 	LH_C h³⁵ t³⁵ => (1 + length_lh_₇(t³⁵))
//│ 	| LH_N  => 0}
//│ def length_lh_₈(ls¹¹) = case ls¹¹ of {
//│ 	LH_C h³⁹ t³⁹ => (1 + length_lh_₈(t³⁹))
//│ 	| LH_N  => 0}
//│ def length_lh_₉(ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h⁴⁷ t⁴⁷ => (1 + length_lh_₉(t⁴⁷))
//│ 	| LH_N  => 0}
//│ def lines_lh_₁(_lh_lines_arg1⁰) = 
//│ 	let _lh_matchIdent³⁰ = break_lh_₁((fun x⁵ -> polyEq⁰(x⁵, '|')), _lh_lines_arg1⁰)
//│ 	in case _lh_matchIdent³⁰ of {
//│ 		LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ 
//│ 			let _lh_matchIdent³¹ = _lh_lines_LH_P2_1⁰
//│ 			in case _lh_matchIdent³¹ of {
//│ 				LH_N  => [LH_N]
//│ 				| LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰)}]}
//│ def map_lh_₁(f¹², ls¹⁸, _lh_floatOutId_0⁶) = case ls¹⁸ of {
//│ 	LH_C h⁷⁶ t⁷⁶ => 
//│ 		let t⁷⁷ = map_lh_₁(f¹², t⁷⁶)
//│ 		in let h⁷⁷ = f¹²(h⁷⁶)
//│ 		in [LH_C _lh_floatOutId_0⁶(h⁷⁷) map_lh_₂(_lh_floatOutId_0⁶, t⁷⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f¹¹, ls¹⁷) = ls¹⁷(f¹¹)
//│ def mappend_lh_₁(xs⁴, ys⁴) = xs⁴(ys⁴)
//│ def mappend_lh_₁₀(xs⁸, ys³⁴) = case xs⁸ of {
//│ 	LH_C h³⁷ t³⁷ => 
//│ 		let t³⁸ = mappend_lh_₁₀(t³⁷, ys³⁴)
//│ 		in let h³⁸ = h³⁷
//│ 		in (fun ys³⁵ -> [LH_C h³⁸ mappend_lh_₁₃(t³⁸, ys³⁵)])
//│ 	| LH_N  => ys³⁴}
//│ def mappend_lh_₁₁(xs¹⁶, ys⁶³) = case xs¹⁶ of {
//│ 	LH_C h⁶⁰ t⁶⁰ => 
//│ 		let t⁶¹ = mappend_lh_₁₁(t⁶⁰, ys⁶³)
//│ 		in let h⁶¹ = h⁶⁰
//│ 		in (fun ys⁶⁴ -> [LH_C h⁶¹ mappend_lh_₁₂(t⁶¹, ys⁶⁴)])
//│ 	| LH_N  => ys⁶³}
//│ def mappend_lh_₁₂(xs³², ys¹⁴¹) = xs³²(ys¹⁴¹)
//│ def mappend_lh_₁₃(xs²⁰, ys⁷⁵) = xs²⁰(ys⁷⁵)
//│ def mappend_lh_₁₄(xs¹⁴, ys⁴¹) = case xs¹⁴ of {
//│ 	LH_C h⁴¹ t⁴¹ => [LH_C h⁴¹ mappend_lh_₁₄(t⁴¹, ys⁴¹)]
//│ 	| LH_N  => ys⁴¹}
//│ def mappend_lh_₁₅(xs²², ys⁸⁴) = xs²²(ys⁸⁴)
//│ def mappend_lh_₁₆(xs⁰, ys⁰) = xs⁰(ys⁰)
//│ def mappend_lh_₁₇(xs³⁰, ys¹³⁸) = xs³⁰(ys¹³⁸)
//│ def mappend_lh_₁₈(xs³, ys³) = xs³(ys³)
//│ def mappend_lh_₁₉(xs⁷, ys²⁹) = case xs⁷ of {
//│ 	LH_C h²⁸ t²⁸ => 
//│ 		let t²⁹ = mappend_lh_₁₉(t²⁸, ys²⁹)
//│ 		in let h²⁹ = h²⁸
//│ 		in (fun ys³⁰ -> 
//│ 			let t³⁰ = mappend_lh_₄(t²⁹, ys³⁰)
//│ 			in let h³⁰ = h²⁹
//│ 			in (fun ys³¹ -> 
//│ 				let t³¹ = mappend_lh_₁(t³⁰, ys³¹)
//│ 				in let h³¹ = h³⁰
//│ 				in (fun ys³² -> 
//│ 					let t³² = mappend_lh_₃(t³¹, ys³²)
//│ 					in let h³² = h³¹
//│ 					in (fun ys³³ -> [LH_C h³² mappend_lh_₇(t³², ys³³)]))))
//│ 	| LH_N  => ys²⁹}
//│ def mappend_lh_₂(xs¹⁰, ys³⁷) = xs¹⁰(ys³⁷)
//│ def mappend_lh_₂₀(xs¹⁸, ys⁷²) = case xs¹⁸ of {
//│ 	LH_C h⁶⁸ t⁶⁸ => [LH_C h⁶⁸ mappend_lh_₂₀(t⁶⁸, ys⁷²)]
//│ 	| LH_N  => ys⁷²}
//│ def mappend_lh_₂₁(xs¹, ys¹) = xs¹(ys¹)
//│ def mappend_lh_₂₂(xs³⁴, ys¹⁴⁶) = xs³⁴(ys¹⁴⁶)
//│ def mappend_lh_₂₃(xs¹², ys³⁹) = xs¹²(ys³⁹)
//│ def mappend_lh_₂₄(xs²⁵, ys⁹⁸) = case xs²⁵ of {
//│ 	LH_C h⁹⁶ t⁹⁶ => [LH_C h⁹⁶ mappend_lh_₂₄(t⁹⁶, ys⁹⁸)]
//│ 	| LH_N  => ys⁹⁸}
//│ def mappend_lh_₂₅(xs¹⁹, ys⁷³) = case xs¹⁹ of {
//│ 	LH_C h⁶⁹ t⁶⁹ => 
//│ 		let t⁷⁰ = mappend_lh_₂₅(t⁶⁹, ys⁷³)
//│ 		in let h⁷⁰ = h⁶⁹
//│ 		in (fun ys⁷⁴ -> [LH_C h⁷⁰ mappend_lh_₂₁(t⁷⁰, ys⁷⁴)])
//│ 	| LH_N  => ys⁷³}
//│ def mappend_lh_₂₆(xs³¹, ys¹⁴⁰) = xs³¹(ys¹⁴⁰)
//│ def mappend_lh_₂₇(xs³⁵, ys¹⁴⁷) = xs³⁵(ys¹⁴⁷)
//│ def mappend_lh_₂₈(xs²⁸, ys¹³⁵) = case xs²⁸ of {
//│ 	LH_C h¹²⁸ t¹²⁸ => 
//│ 		let t¹²⁹ = mappend_lh_₂₈(t¹²⁸, ys¹³⁵)
//│ 		in let h¹²⁹ = h¹²⁸
//│ 		in (fun ys¹³⁶ -> [LH_C h¹²⁹ mappend_lh_₂₆(t¹²⁹, ys¹³⁶)])
//│ 	| LH_N  => ys¹³⁵}
//│ def mappend_lh_₂₉(xs²⁹, ys¹³⁷) = xs²⁹(ys¹³⁷)
//│ def mappend_lh_₃(xs², ys²) = xs²(ys²)
//│ def mappend_lh_₃₀(xs³³, ys¹⁴²) = case xs³³ of {
//│ 	LH_C h¹³¹ t¹³¹ => [LH_C h¹³¹ mappend_lh_₃₀(t¹³¹, ys¹⁴²)]
//│ 	| LH_N  => ys¹⁴²}
//│ def mappend_lh_₃₁(xs²⁷, ys¹⁰³) = xs²⁷(ys¹⁰³)
//│ def mappend_lh_₃₂(xs²⁶, ys¹⁰²) = xs²⁶(ys¹⁰²)
//│ def mappend_lh_₃₃(xs¹¹, ys³⁸) = case xs¹¹ of {
//│ 	LH_C h⁴⁰ t⁴⁰ => [LH_C h⁴⁰ mappend_lh_₃₃(t⁴⁰, ys³⁸)]
//│ 	| LH_N  => ys³⁸}
//│ def mappend_lh_₃₄(xs²⁴, ys⁹³) = case xs²⁴ of {
//│ 	LH_C h⁹² t⁹² => [LH_C h⁹² mappend_lh_₃₄(t⁹², ys⁹³)]
//│ 	| LH_N  => ys⁹³}
//│ def mappend_lh_₃₅(xs⁵, ys⁵) = case xs⁵ of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh_₃₅(t³, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mappend_lh_₄(xs¹⁷, ys⁷¹) = xs¹⁷(ys⁷¹)
//│ def mappend_lh_₅(xs¹³, ys⁴⁰) = xs¹³(ys⁴⁰)
//│ def mappend_lh_₆(xs¹⁵, ys⁴²) = case xs¹⁵ of {
//│ 	LH_C h⁴³ t⁴³ => 
//│ 		let t⁴⁴ = mappend_lh_₆(t⁴³, ys⁴²)
//│ 		in let h⁴⁴ = h⁴³
//│ 		in (fun ys⁴³ -> 
//│ 			let t⁴⁵ = mappend_lh_₂(t⁴⁴, ys⁴³)
//│ 			in let h⁴⁵ = h⁴⁴
//│ 			in (fun ys⁴⁴ -> [LH_C h⁴⁵ mappend_lh_₅(t⁴⁵, ys⁴⁴)]))
//│ 	| LH_N  => ys⁴²}
//│ def mappend_lh_₇(xs⁹, ys³⁶) = xs⁹(ys³⁶)
//│ def mappend_lh_₈(xs⁶, ys⁶) = xs⁶(ys⁶)
//│ def mappend_lh_₉(xs²¹, ys⁸³) = case xs²¹ of {
//│ 	LH_C h⁷⁸ t⁷⁸ => [LH_C h⁷⁸ mappend_lh_₉(t⁷⁸, ys⁸³)]
//│ 	| LH_N  => ys⁸³}
//│ def max_lh_₁(_lh_max_arg1³, _lh_max_arg2³) = if (_lh_max_arg1³ < _lh_max_arg2³) then _lh_max_arg2³ else _lh_max_arg1³
//│ def max_lh_₂(_lh_max_arg1², _lh_max_arg2²) = if (_lh_max_arg1² < _lh_max_arg2²) then _lh_max_arg2² else _lh_max_arg1²
//│ def max_lh_₃(_lh_max_arg1⁰, _lh_max_arg2⁰) = if (_lh_max_arg1⁰ < _lh_max_arg2⁰) then _lh_max_arg2⁰ else _lh_max_arg1⁰
//│ def max_lh_₄(_lh_max_arg1¹, _lh_max_arg2¹) = if (_lh_max_arg1¹ < _lh_max_arg2¹) then _lh_max_arg2¹ else _lh_max_arg1¹
//│ def maybe_lh_₁(_lh_maybe_arg1⁴, _lh_maybe_arg2⁴, _lh_maybe_arg3²) = _lh_maybe_arg3²(_lh_maybe_arg1⁴, _lh_maybe_arg2⁴)
//│ def maybe_lh_₂(_lh_maybe_arg1³, _lh_maybe_arg2³, _lh_maybe_arg3¹) = case _lh_maybe_arg3¹ of {
//│ 	Nothing  => _lh_maybe_arg1³
//│ 	| Just _lh_maybe_Just_0² => _lh_maybe_arg2³(_lh_maybe_Just_0²)}
//│ def maybe_lh_₃(_lh_maybe_arg1⁰, _lh_maybe_arg2⁰, _lh_maybe_arg3⁰) = case _lh_maybe_arg3⁰ of {
//│ 	Nothing  => _lh_maybe_arg1⁰
//│ 	| Just _lh_maybe_Just_0⁰ => _lh_maybe_arg2⁰(_lh_maybe_Just_0⁰)}
//│ def min_lh_₁(_lh_min_arg1², _lh_min_arg2²) = if (_lh_min_arg1² < _lh_min_arg2²) then _lh_min_arg1² else _lh_min_arg2²
//│ def min_lh_₂(_lh_min_arg1³, _lh_min_arg2³) = if (_lh_min_arg1³ < _lh_min_arg2³) then _lh_min_arg1³ else _lh_min_arg2³
//│ def min_lh_₃(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ < _lh_min_arg2⁰) then _lh_min_arg1⁰ else _lh_min_arg2⁰
//│ def min_lh_₄(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ < _lh_min_arg2¹) then _lh_min_arg1¹ else _lh_min_arg2¹
//│ def moveDetailsFor_lh_₁(_lh_moveDetailsFor_arg1¹, _lh_moveDetailsFor_arg2¹) = foldr_lh_₄((fun ksq¹ -> (fun ms² -> foldr_lh_₅((fun rm¹ -> (fun ms'¹ -> maybe_lh_₁((fun x² -> x²), (fun h³³ -> (fun t³³ -> 
//│ 	let t³⁴ = t³³
//│ 	in let h³⁴ = h³³
//│ 	in (fun f² -> (fun i² -> f²(h³⁴, foldr_lh_₂(f², i², t³⁴)))))), tryMove_lh_₁(_lh_moveDetailsFor_arg1¹, ksq¹, rm¹, _lh_moveDetailsFor_arg2¹), ms'¹))), ms², rawmoves_lh_₁(_lh_moveDetailsFor_arg1¹, ksq¹, _lh_moveDetailsFor_arg2¹)))), (fun f³ -> (fun i³ -> i³)), forcesColoured_lh_₁(_lh_moveDetailsFor_arg1¹, _lh_moveDetailsFor_arg2¹))
//│ def moveDetailsFor_lh_₂(_lh_moveDetailsFor_arg1⁰, _lh_moveDetailsFor_arg2⁰) = foldr_lh_₇((fun ksq⁰ -> (fun ms¹ -> foldr_lh_₇((fun rm⁰ -> (fun ms'⁰ -> maybe_lh_₃((fun x¹ -> x¹), (fun h¹ -> (fun t¹ -> [LH_C h¹ t¹])), tryMove_lh_₂(_lh_moveDetailsFor_arg1⁰, ksq⁰, rm⁰, _lh_moveDetailsFor_arg2⁰), ms'⁰))), ms¹, rawmoves_lh_₁(_lh_moveDetailsFor_arg1⁰, ksq⁰, _lh_moveDetailsFor_arg2⁰)))), [LH_N], forcesColoured_lh_₂(_lh_moveDetailsFor_arg1⁰, _lh_moveDetailsFor_arg2⁰))
//│ def moveLine_lh_₁(_lh_moveLine_arg1⁰, _lh_moveLine_arg2⁰, _lh_moveLine_arg3⁰, _lh_moveLine_arg4⁰, _lh_moveLine_arg5⁰) = 
//│ 	let ml⁰ = (fun sq⁰ -> (fun ms⁰ -> 
//│ 		let sq'⁰ = _lh_moveLine_arg4⁰(sq⁰)
//│ 		in if onboard_lh_₁(sq'⁰) then 
//│ 			let _lh_matchIdent¹³ = pieceAt_lh_₁(_lh_moveLine_arg1⁰, sq'⁰)
//│ 			in case _lh_matchIdent¹³ of {
//│ 				Nothing  => ml⁰(sq'⁰, [LH_C [Move sq'⁰ [Nothing] [Nothing]] ms⁰])
//│ 				| Just _lh_moveLine_Just_0⁰ => if polyNeq⁰(colourOf_lh_₁(_lh_moveLine_Just_0⁰), _lh_moveLine_arg2⁰) then _lh_moveLine_arg5⁰([LH_C [Move sq'⁰ [Just _lh_moveLine_Just_0⁰] [Nothing]] ms⁰]) else _lh_moveLine_arg5⁰(ms⁰)} else _lh_moveLine_arg5⁰(ms⁰)))
//│ 	in ml⁰(_lh_moveLine_arg3⁰)
//│ def null_lh_₁(_lh_null_arg1³) = case _lh_null_arg1³ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False]}
//│ def null_lh_₂(_lh_null_arg1¹) = case _lh_null_arg1¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False]}
//│ def null_lh_₃(_lh_null_arg1²) = case _lh_null_arg1² of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0² _lh_null_LH_C_1² => [False]}
//│ def null_lh_₄(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]}
//│ def onboard_lh_₁(_lh_onboard_arg1⁰) = case _lh_onboard_arg1⁰ of {
//│ 	LH_P2 _lh_onboard_LH_P2_0⁰ _lh_onboard_LH_P2_1⁰ => ((((1 <= _lh_onboard_LH_P2_0⁰) && (_lh_onboard_LH_P2_0⁰ <= 8)) && (1 <= _lh_onboard_LH_P2_1⁰)) && (_lh_onboard_LH_P2_1⁰ <= 8))}
//│ def opponent_lh_₁(_lh_opponent_arg1³) = case _lh_opponent_arg1³ of {
//│ 	Black  => [White]
//│ 	| White  => [Black]}
//│ def opponent_lh_₂(_lh_opponent_arg1²) = case _lh_opponent_arg1² of {
//│ 	Black  => [White]
//│ 	| White  => [Black]}
//│ def opponent_lh_₃(_lh_opponent_arg1⁴) = case _lh_opponent_arg1⁴ of {
//│ 	Black  => [White]
//│ 	| White  => [Black]}
//│ def opponent_lh_₄(_lh_opponent_arg1¹) = case _lh_opponent_arg1¹ of {
//│ 	Black  => [White]
//│ 	| White  => [Black]}
//│ def opponent_lh_₅(_lh_opponent_arg1⁰) = case _lh_opponent_arg1⁰ of {
//│ 	Black  => [White]
//│ 	| White  => [Black]}
//│ def parseBoard_lh_₁(_lh_parseBoard_arg1⁰) = 
//│ 	let addPiece⁰ = (fun p_sq⁰ -> 
//│ 		let _lh_matchIdent¹² = p_sq⁰
//│ 		in case _lh_matchIdent¹² of {
//│ 			LH_P2 _lh_parseBoard_LH_P2_0⁰ _lh_parseBoard_LH_P2_1⁰ => putPieceAt_lh_₁(_lh_parseBoard_LH_P2_1⁰, _lh_parseBoard_LH_P2_0⁰)})
//│ 	in (fun _lh_funcomp_x¹ -> (fun _lh_funcomp_x² -> foldr_lh_₇(addPiece⁰, emptyBoard_lh_₁, concat_lh_₂(_lh_funcomp_x²)))(zipWith_lh_₁(parseRank_lh_₁, reverse_lh_₂(enumFromTo_lh_₃(1, 8)), _lh_funcomp_x¹)))(_lh_parseBoard_arg1⁰)
//│ def parseGoal_lh_₁(_lh_parseGoal_arg1⁰) = _lh_parseGoal_arg1⁰([lh_Unit])
//│ def parseProblem_lh_₁(_lh_parseProblem_arg1⁰) = 
//│ 	let bdtxt_gltxt⁰ = splitAt_lh_₁(8, filter_lh_₁((fun _lh_funcomp_x⁰ -> not⁰(comment_lh_₁(_lh_funcomp_x⁰))), _lh_parseProblem_arg1⁰))
//│ 	in let _lh_matchIdent¹¹ = bdtxt_gltxt⁰
//│ 	in _lh_matchIdent¹¹([lh_Unit])
//│ def parseRank_lh_₁(_lh_parseRank_arg1⁰, _lh_parseRank_arg2⁰) = (fun _lh_funcomp_x³ -> (fun _lh_funcomp_x⁴ -> concat_lh_₂(zipWith_lh_₁(parseSquare_lh_₁(_lh_parseRank_arg1⁰), enumFromTo_lh_₃(1, 8), _lh_funcomp_x⁴)))(filter_lh_₁((fun x⁰ -> not⁰(polyEq⁰(x⁰, ' '))), _lh_funcomp_x³)))(_lh_parseRank_arg2⁰)
//│ def parseSquare_lh_₁(_lh_parseSquare_arg1⁰, _lh_parseSquare_arg2⁰, _lh_parseSquare_arg3⁰) = case _lh_parseSquare_arg3⁰ of {
//│ 	'-'  => [LH_N]
//│ 	| _  => 
//│ 		let clr⁰ = if isUpper_lh_₁(_lh_parseSquare_arg3⁰) then [Black] else [White]
//│ 		in let kin⁰ = 	
//│ 			let _lh_matchIdent⁵⁸ = toLower_lh_₁(_lh_parseSquare_arg3⁰)
//│ 			in case _lh_matchIdent⁵⁸ of {
//│ 				'k'  => [King]
//│ 				| 'q'  => [Queen]
//│ 				| 'r'  => [Rook]
//│ 				| 'b'  => [Bishop]
//│ 				| 'n'  => [Knight]
//│ 				| 'p'  => [Pawn]}
//│ 		in [LH_C [LH_P2 [LH_P2 clr⁰ kin⁰] [LH_P2 _lh_parseSquare_arg2⁰ _lh_parseSquare_arg1⁰]] [LH_N]]}
//│ def pawnmoves_lh_₁(_lh_pawnmoves_arg1⁰, _lh_pawnmoves_arg2⁰, _lh_pawnmoves_arg3⁰) = case _lh_pawnmoves_arg2⁰ of {
//│ 	LH_P2 _lh_pawnmoves_LH_P2_0⁰ _lh_pawnmoves_LH_P2_1⁰ => 
//│ 		let fwd⁰ = 	
//│ 			let _lh_matchIdent⁴⁴ = _lh_pawnmoves_arg1⁰
//│ 			in case _lh_matchIdent⁴⁴ of {
//│ 				White  => 1
//│ 				| Black  => (0 - 1)}
//│ 		in let promote⁰ = (fun xy⁴ -> (fun mcp⁰ -> 
//│ 			let _lh_matchIdent⁴⁵ = xy⁴
//│ 			in case _lh_matchIdent⁴⁵ of {
//│ 				LH_P2 _lh_pawnmoves_LH_P2_0¹ _lh_pawnmoves_LH_P2_1¹ => if ((polyEq⁰(_lh_pawnmoves_arg1⁰, [Black]) && (_lh_pawnmoves_LH_P2_1¹ == 1)) || (polyEq⁰(_lh_pawnmoves_arg1⁰, [White]) && (_lh_pawnmoves_LH_P2_1¹ == 8))) then map_lh_₂((fun param¹ -> [Move [LH_P2 _lh_pawnmoves_LH_P2_0¹ _lh_pawnmoves_LH_P2_1¹] mcp⁰ [Just param¹]]), 
//│ 					let t⁷⁹ = 	
//│ 						let t⁸⁰ = 	
//│ 							let t⁸¹ = 	
//│ 								let t⁸² = (fun f¹⁵ -> [LH_N])
//│ 								in let h⁷⁹ = [LH_P2 _lh_pawnmoves_arg1⁰ [Knight]]
//│ 								in (fun f¹⁶ -> [LH_C f¹⁶(h⁷⁹) map_lh_₂(f¹⁶, t⁸²)])
//│ 							in let h⁸⁰ = [LH_P2 _lh_pawnmoves_arg1⁰ [Bishop]]
//│ 							in (fun f¹⁷ -> [LH_C f¹⁷(h⁸⁰) map_lh_₂(f¹⁷, t⁸¹)])
//│ 						in let h⁸¹ = [LH_P2 _lh_pawnmoves_arg1⁰ [Rook]]
//│ 						in (fun f¹⁸ -> [LH_C f¹⁸(h⁸¹) map_lh_₂(f¹⁸, t⁸⁰)])
//│ 					in let h⁸² = [LH_P2 _lh_pawnmoves_arg1⁰ [Queen]]
//│ 					in (fun f¹⁹ -> [LH_C f¹⁹(h⁸²) map_lh_₂(f¹⁹, t⁷⁹)])) else [LH_C [Move [LH_P2 _lh_pawnmoves_LH_P2_0¹ _lh_pawnmoves_LH_P2_1¹] mcp⁰ [Nothing]] [LH_N]]}))
//│ 		in let movs⁰ = 	
//│ 			let on1⁰ = [LH_P2 _lh_pawnmoves_LH_P2_0⁰ (_lh_pawnmoves_LH_P2_1⁰ + fwd⁰)]
//│ 			in let on2⁰ = [LH_P2 _lh_pawnmoves_LH_P2_0⁰ ((_lh_pawnmoves_LH_P2_1⁰ + 2) * fwd⁰)]
//│ 			in if polyEq⁰(pieceAt_lh_₁(_lh_pawnmoves_arg3⁰, on1⁰), [Nothing]) then mappend_lh_₃₅(promote⁰(on1⁰, [Nothing]), if ((((_lh_pawnmoves_LH_P2_1⁰ == 2) && polyEq⁰(_lh_pawnmoves_arg1⁰, [White])) || ((_lh_pawnmoves_LH_P2_1⁰ == 7) && polyEq⁰(_lh_pawnmoves_arg1⁰, [Black]))) && polyEq⁰(pieceAt_lh_₁(_lh_pawnmoves_arg3⁰, on2⁰), [Nothing])) then [LH_C [Move on2⁰ [Nothing] [Nothing]] [LH_N]] else [LH_N]) else [LH_N]
//│ 		in let caps⁰ = concat_lh_₂(
//│ 			let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> _lh_listcomp_fun_para⁰(_lh_listcomp_fun⁰, _lh_pawnmoves_arg1⁰, _lh_pawnmoves_arg3⁰, promote⁰))
//│ 			in _lh_listcomp_fun⁰(
//│ 				let _lh_listcomp_fun_ls_t⁰ = 	
//│ 					let _lh_listcomp_fun_ls_t¹ = (fun _lh_listcomp_fun¹ -> (fun _lh_pawnmoves_arg1¹ -> (fun _lh_pawnmoves_arg3¹ -> (fun promote¹ -> [LH_N]))))
//│ 					in let _lh_listcomp_fun_ls_h⁰ = [LH_P2 (_lh_pawnmoves_LH_P2_0⁰ - 1) (_lh_pawnmoves_LH_P2_1⁰ + fwd⁰)]
//│ 					in (fun _lh_listcomp_fun² -> (fun _lh_pawnmoves_arg1² -> (fun _lh_pawnmoves_arg3² -> (fun promote² -> 
//│ 						let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para¹ -> _lh_listcomp_fun_para¹(_lh_listcomp_fun_ls_h⁰, _lh_listcomp_fun³, _lh_pawnmoves_arg1², promote², _lh_listcomp_fun_ls_t¹, _lh_listcomp_fun²))
//│ 						in _lh_listcomp_fun³(
//│ 							let _lh_listcomp_fun_ls_t² = (fun _lh_listcomp_fun_ls_h¹ -> (fun _lh_listcomp_fun⁴ -> (fun _lh_pawnmoves_arg1³ -> (fun promote³ -> (fun _lh_listcomp_fun_ls_t³ -> (fun _lh_listcomp_fun⁵ -> _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t³)))))))
//│ 							in let _lh_listcomp_fun_ls_h² = pieceAt_lh_₁(_lh_pawnmoves_arg3², _lh_listcomp_fun_ls_h⁰)
//│ 							in (fun _lh_listcomp_fun_ls_h³ -> (fun _lh_listcomp_fun⁶ -> (fun _lh_pawnmoves_arg1⁴ -> (fun promote⁴ -> (fun _lh_listcomp_fun_ls_t⁴ -> (fun _lh_listcomp_fun⁷ -> case _lh_listcomp_fun_ls_h² of {
//│ 								Just _lh_pawnmoves_Just_0⁰ => if not⁰(polyEq⁰(colourOf_lh_₁(_lh_pawnmoves_Just_0⁰), _lh_pawnmoves_arg1⁴)) then [LH_C promote⁴(_lh_listcomp_fun_ls_h³, [Just _lh_pawnmoves_Just_0⁰]) _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t²)
//│ 								| _  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t²)})))))))))))
//│ 				in let _lh_listcomp_fun_ls_h⁴ = [LH_P2 (_lh_pawnmoves_LH_P2_0⁰ + 1) (_lh_pawnmoves_LH_P2_1⁰ + fwd⁰)]
//│ 				in (fun _lh_listcomp_fun⁸ -> (fun _lh_pawnmoves_arg1⁵ -> (fun _lh_pawnmoves_arg3³ -> (fun promote⁵ -> 
//│ 					let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun⁹, _lh_pawnmoves_arg1⁵, promote⁵, _lh_listcomp_fun_ls_t⁰, _lh_listcomp_fun⁸))
//│ 					in _lh_listcomp_fun⁹(
//│ 						let _lh_listcomp_fun_ls_t⁵ = (fun _lh_listcomp_fun_ls_h⁵ -> (fun _lh_listcomp_fun¹⁰ -> (fun _lh_pawnmoves_arg1⁶ -> (fun promote⁶ -> (fun _lh_listcomp_fun_ls_t⁶ -> (fun _lh_listcomp_fun¹¹ -> _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t⁶)))))))
//│ 						in let _lh_listcomp_fun_ls_h⁶ = pieceAt_lh_₁(_lh_pawnmoves_arg3³, _lh_listcomp_fun_ls_h⁴)
//│ 						in (fun _lh_listcomp_fun_ls_h⁷ -> (fun _lh_listcomp_fun¹² -> (fun _lh_pawnmoves_arg1⁷ -> (fun promote⁷ -> (fun _lh_listcomp_fun_ls_t⁷ -> (fun _lh_listcomp_fun¹³ -> case _lh_listcomp_fun_ls_h⁶ of {
//│ 							Just _lh_pawnmoves_Just_0¹ => if not⁰(polyEq⁰(colourOf_lh_₁(_lh_pawnmoves_Just_0¹), _lh_pawnmoves_arg1⁷)) then [LH_C promote⁷(_lh_listcomp_fun_ls_h⁷, [Just _lh_pawnmoves_Just_0¹]) _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁵)
//│ 							| _  => _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁵)})))))))))))))
//│ 		in mappend_lh_₃₅(movs⁰, caps⁰)}
//│ def pieceAt_lh_₁(_lh_pieceAt_arg1⁰, _lh_pieceAt_arg2⁰) = case _lh_pieceAt_arg1⁰ of {
//│ 	Board _lh_pieceAt_Board_0⁰ _lh_pieceAt_Board_1⁰ => 
//│ 		let pieceAtWith⁰ = (fun c⁰ -> (fun n⁰ -> (fun ls¹ -> 
//│ 			let _lh_matchIdent¹⁰ = ls¹
//│ 			in case _lh_matchIdent¹⁰ of {
//│ 				LH_N  => n⁰
//│ 				| LH_C _lh_pieceAt_LH_C_0⁰ _lh_pieceAt_LH_C_1⁰ => case _lh_pieceAt_LH_C_0⁰ of {
//│ 					LH_P2 _lh_pieceAt_LH_P2_0⁰ _lh_pieceAt_LH_P2_1⁰ => if polyEq⁰(_lh_pieceAt_LH_P2_1⁰, _lh_pieceAt_arg2⁰) then [Just [LH_P2 c⁰ _lh_pieceAt_LH_P2_0⁰]] else pieceAtWith⁰(c⁰, n⁰, _lh_pieceAt_LH_C_1⁰)}})))
//│ 		in pieceAtWith⁰([White], pieceAtWith⁰([Black], [Nothing], _lh_pieceAt_Board_1⁰), _lh_pieceAt_Board_0⁰)}
//│ def pieceToChar_lh_₁(_lh_pieceToChar_arg1⁰) = case _lh_pieceToChar_arg1⁰ of {
//│ 	LH_P2 _lh_pieceToChar_LH_P2_0⁰ _lh_pieceToChar_LH_P2_1⁰ => case _lh_pieceToChar_LH_P2_0⁰ of {
//│ 		Black  => kindToChar_lh_₁(_lh_pieceToChar_LH_P2_1⁰)
//│ 		| White  => toLower_lh_₁(kindToChar_lh_₂(_lh_pieceToChar_LH_P2_1⁰))}}
//│ def putPieceAt_lh_₁(_lh_putPieceAt_arg1¹, _lh_putPieceAt_arg2¹, _lh_putPieceAt_arg3¹) = case _lh_putPieceAt_arg2¹ of {
//│ 	LH_P2 _lh_putPieceAt_LH_P2_0¹ _lh_putPieceAt_LH_P2_1¹ => case _lh_putPieceAt_LH_P2_0¹ of {
//│ 		White  => case _lh_putPieceAt_arg3¹ of {
//│ 			Board _lh_putPieceAt_Board_0² _lh_putPieceAt_Board_1² => [Board [LH_C [LH_P2 _lh_putPieceAt_LH_P2_1¹ _lh_putPieceAt_arg1¹] _lh_putPieceAt_Board_0²] _lh_putPieceAt_Board_1²]}
//│ 		| Black  => case _lh_putPieceAt_arg3¹ of {
//│ 			Board _lh_putPieceAt_Board_0³ _lh_putPieceAt_Board_1³ => [Board _lh_putPieceAt_Board_0³ [LH_C [LH_P2 _lh_putPieceAt_LH_P2_1¹ _lh_putPieceAt_arg1¹] _lh_putPieceAt_Board_1³]]}}}
//│ def putPieceAt_lh_₂(_lh_putPieceAt_arg1⁰, _lh_putPieceAt_arg2⁰, _lh_putPieceAt_arg3⁰) = case _lh_putPieceAt_arg2⁰ of {
//│ 	LH_P2 _lh_putPieceAt_LH_P2_0⁰ _lh_putPieceAt_LH_P2_1⁰ => case _lh_putPieceAt_LH_P2_0⁰ of {
//│ 		White  => case _lh_putPieceAt_arg3⁰ of {
//│ 			Board _lh_putPieceAt_Board_0⁰ _lh_putPieceAt_Board_1⁰ => [Board [LH_C [LH_P2 _lh_putPieceAt_LH_P2_1⁰ _lh_putPieceAt_arg1⁰] _lh_putPieceAt_Board_0⁰] _lh_putPieceAt_Board_1⁰]}
//│ 		| Black  => case _lh_putPieceAt_arg3⁰ of {
//│ 			Board _lh_putPieceAt_Board_0¹ _lh_putPieceAt_Board_1¹ => [Board _lh_putPieceAt_Board_0¹ [LH_C [LH_P2 _lh_putPieceAt_LH_P2_1⁰ _lh_putPieceAt_arg1⁰] _lh_putPieceAt_Board_1¹]]}}}
//│ def putPieceAt_lh_₃(_lh_putPieceAt_arg1², _lh_putPieceAt_arg2², _lh_putPieceAt_arg3²) = case _lh_putPieceAt_arg2² of {
//│ 	LH_P2 _lh_putPieceAt_LH_P2_0² _lh_putPieceAt_LH_P2_1² => case _lh_putPieceAt_LH_P2_0² of {
//│ 		White  => case _lh_putPieceAt_arg3² of {
//│ 			Board _lh_putPieceAt_Board_0⁴ _lh_putPieceAt_Board_1⁴ => [Board [LH_C [LH_P2 _lh_putPieceAt_LH_P2_1² _lh_putPieceAt_arg1²] _lh_putPieceAt_Board_0⁴] _lh_putPieceAt_Board_1⁴]}
//│ 		| Black  => case _lh_putPieceAt_arg3² of {
//│ 			Board _lh_putPieceAt_Board_0⁵ _lh_putPieceAt_Board_1⁵ => [Board _lh_putPieceAt_Board_0⁵ [LH_C [LH_P2 _lh_putPieceAt_LH_P2_1² _lh_putPieceAt_arg1²] _lh_putPieceAt_Board_1⁵]]}}}
//│ def qpart_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg2⁰, _lh_qpart_arg3⁰, _lh_qpart_arg4⁰, _lh_qpart_arg5⁰, _lh_qpart_arg6⁰) = case _lh_qpart_arg3⁰ of {
//│ 	LH_N  => rqsort_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg4⁰, [LH_C _lh_qpart_arg2⁰ rqsort_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg5⁰, _lh_qpart_arg6⁰)])
//│ 	| LH_C _lh_qpart_LH_C_0⁰ _lh_qpart_LH_C_1⁰ => if _lh_qpart_arg1⁰(_lh_qpart_arg2⁰, _lh_qpart_LH_C_0⁰) then qpart_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg2⁰, _lh_qpart_LH_C_1⁰, _lh_qpart_arg4⁰, [LH_C _lh_qpart_LH_C_0⁰ _lh_qpart_arg5⁰], _lh_qpart_arg6⁰) else qpart_lh_₁(_lh_qpart_arg1⁰, _lh_qpart_arg2⁰, _lh_qpart_LH_C_1⁰, [LH_C _lh_qpart_LH_C_0⁰ _lh_qpart_arg4⁰], _lh_qpart_arg5⁰, _lh_qpart_arg6⁰)}
//│ def qsort_lh_₁(_lh_qsort_arg1⁰, _lh_qsort_arg2⁰, _lh_qsort_arg3⁰) = case _lh_qsort_arg2⁰ of {
//│ 	LH_N  => _lh_qsort_arg3⁰
//│ 	| LH_C _lh_qsort_LH_C_0⁰ _lh_qsort_LH_C_1⁰ => case _lh_qsort_LH_C_1⁰ of {
//│ 		LH_N  => [LH_C _lh_qsort_LH_C_0⁰ _lh_qsort_arg3⁰]
//│ 		| _  => qpart_lh_₁(_lh_qsort_arg1⁰, _lh_qsort_LH_C_0⁰, _lh_qsort_LH_C_1⁰, [LH_N], [LH_N], _lh_qsort_arg3⁰)}}
//│ def qsort_lh_₂(_lh_qsort_arg1¹, _lh_qsort_arg2¹, _lh_qsort_arg3¹) = case _lh_qsort_arg2¹ of {
//│ 	LH_N  => _lh_qsort_arg3¹
//│ 	| LH_C _lh_qsort_LH_C_0¹ _lh_qsort_LH_C_1¹ => case _lh_qsort_LH_C_1¹ of {
//│ 		LH_N  => [LH_C _lh_qsort_LH_C_0¹ _lh_qsort_arg3¹]
//│ 		| _  => qpart_lh_₁(_lh_qsort_arg1¹, _lh_qsort_LH_C_0¹, _lh_qsort_LH_C_1¹, [LH_N], [LH_N], _lh_qsort_arg3¹)}}
//│ def qsort_lh_₃(_lh_qsort_arg1², _lh_qsort_arg2², _lh_qsort_arg3²) = case _lh_qsort_arg2² of {
//│ 	LH_N  => _lh_qsort_arg3²
//│ 	| LH_C _lh_qsort_LH_C_0² _lh_qsort_LH_C_1² => case _lh_qsort_LH_C_1² of {
//│ 		LH_N  => [LH_C _lh_qsort_LH_C_0² _lh_qsort_arg3²]
//│ 		| _  => qpart_lh_₁(_lh_qsort_arg1², _lh_qsort_LH_C_0², _lh_qsort_LH_C_1², [LH_N], [LH_N], _lh_qsort_arg3²)}}
//│ def queenmoves_lh_₁(_lh_queenmoves_arg1⁰, _lh_queenmoves_arg2⁰, _lh_queenmoves_arg3⁰) = mappend_lh_₃₅(bishopmoves_lh_₁(_lh_queenmoves_arg1⁰, _lh_queenmoves_arg2⁰, _lh_queenmoves_arg3⁰), rookmoves_lh_₁(_lh_queenmoves_arg1⁰, _lh_queenmoves_arg2⁰, _lh_queenmoves_arg3⁰))
//│ def rPa_lh_₁(_lh_rPa_arg1⁰, _lh_rPa_arg2⁰) = case _lh_rPa_arg2⁰ of {
//│ 	LH_C _lh_rPa_LH_C_0⁰ _lh_rPa_LH_C_1⁰ => case _lh_rPa_LH_C_0⁰ of {
//│ 		LH_P2 _lh_rPa_LH_P2_0⁰ _lh_rPa_LH_P2_1⁰ => if polyEq⁰(_lh_rPa_LH_P2_1⁰, _lh_rPa_arg1⁰) then _lh_rPa_LH_C_1⁰ else [LH_C [LH_P2 _lh_rPa_LH_P2_0⁰ _lh_rPa_LH_P2_1⁰] rPa_lh_₁(_lh_rPa_arg1⁰, _lh_rPa_LH_C_1⁰)]}
//│ 	| LH_N  => error⁰}
//│ def rawmoves_lh_₁(_lh_rawmoves_arg1⁰, _lh_rawmoves_arg2⁰, _lh_rawmoves_arg3⁰) = case _lh_rawmoves_arg2⁰ of {
//│ 	LH_P2 _lh_rawmoves_LH_P2_0⁰ _lh_rawmoves_LH_P2_1⁰ => 
//│ 		let m⁰ = 	
//│ 			let _lh_matchIdent⁴⁶ = _lh_rawmoves_LH_P2_0⁰
//│ 			in case _lh_matchIdent⁴⁶ of {
//│ 				King  => kingmoves_lh_₁
//│ 				| Queen  => queenmoves_lh_₁
//│ 				| Rook  => rookmoves_lh_₁
//│ 				| Bishop  => bishopmoves_lh_₁
//│ 				| Knight  => knightmoves_lh_₁
//│ 				| Pawn  => pawnmoves_lh_₁}
//│ 		in m⁰(_lh_rawmoves_arg1⁰, _lh_rawmoves_LH_P2_1⁰, _lh_rawmoves_arg3⁰)}
//│ def readProblem_lh_₁(_lh_readProblem_arg1⁰) = (fun _lh_funcomp_x⁵ -> parseProblem_lh_₁(lines_lh_₁(_lh_funcomp_x⁵)))(_lh_readProblem_arg1⁰)
//│ def replies_lh_₁(_lh_replies_arg1⁰, _lh_replies_arg2⁰, _lh_replies_arg3⁰) = 
//│ 	let mds¹ = moveDetailsFor_lh_₂(_lh_replies_arg2⁰, _lh_replies_arg1⁰)
//│ 	in let solnAnd⁰ = (fun mifb¹ -> (fun rest⁰ -> 
//│ 		let _lh_matchIdent⁶¹ = mifb¹
//│ 		in case _lh_matchIdent⁶¹ of {
//│ 			LH_P2 _lh_replies_LH_P2_0⁰ _lh_replies_LH_P2_1⁰ => 
//│ 				let sm⁰ = solution_lh_₁(_lh_replies_LH_P2_1⁰, opponent_lh_₃(_lh_replies_arg2⁰), (_lh_replies_arg3⁰ - 1))
//│ 				in let _lh_matchIdent⁶² = sm⁰
//│ 				in case _lh_matchIdent⁶² of {
//│ 					Nothing  => [Nothing]
//│ 					| Just _lh_replies_Just_0⁰ => 
//│ 						let _lh_matchIdent⁶³ = rest⁰
//│ 						in case _lh_matchIdent⁶³ of {
//│ 							Nothing  => [Nothing]
//│ 							| Just _lh_replies_Just_0¹ => [Just [LH_C 
//│ 								let _lh_insertCompact_LH_P2_1⁰ = _lh_replies_Just_0⁰
//│ 								in let _lh_insertCompact_LH_P2_0⁰ = _lh_replies_LH_P2_0⁰
//│ 								in (fun _lh_insertCompact_arg2¹ -> 
//│ 									let insert⁰ = (fun _lh_insert_arg1⁰ -> (fun _lh_insert_arg2⁰ -> case _lh_insert_arg2⁰ of {
//│ 										LH_N  => [LH_C _lh_insert_arg1⁰ [LH_N]]
//│ 										| LH_C _lh_insert_LH_C_0⁰ _lh_insert_LH_C_1⁰ => if polyGt⁰(_lh_insert_arg1⁰, _lh_insert_LH_C_0⁰) then [LH_C _lh_insert_LH_C_0⁰ insert⁰(_lh_insert_arg1⁰, _lh_insert_LH_C_1⁰)] else [LH_C _lh_insert_arg1⁰ [LH_C _lh_insert_LH_C_0⁰ _lh_insert_LH_C_1⁰]]}))
//│ 									in let cs⁰ = compact_lh_₁(_lh_insertCompact_LH_P2_1⁰)
//│ 									in let ic⁰ = (fun ls²⁴ -> 
//│ 										let _lh_matchIdent⁶⁴ = ls²⁴
//│ 										in case _lh_matchIdent⁶⁴ of {
//│ 											LH_N  => [LH_C [LH_P2 [LH_C _lh_insertCompact_LH_P2_0⁰ [LH_N]] cs⁰] [LH_N]]
//│ 											| LH_C _lh_insertCompact_LH_C_0⁰ _lh_insertCompact_LH_C_1⁰ => case _lh_insertCompact_LH_C_0⁰ of {
//│ 												LH_P2 _lh_insertCompact_LH_P2_0¹ _lh_insertCompact_LH_P2_1¹ => 
//│ 													let a⁷ = showSoln_lh_₂(cs⁰, 1)
//│ 													in let b⁹ = showSoln_lh_₃(_lh_insertCompact_LH_P2_1¹, 1)
//│ 													in if polyLt⁰(a⁷, b⁹) then [LH_C [LH_P2 [LH_C _lh_insertCompact_LH_P2_0⁰ [LH_N]] cs⁰] [LH_C [LH_P2 _lh_insertCompact_LH_P2_0¹ _lh_insertCompact_LH_P2_1¹] _lh_insertCompact_LH_C_1⁰]] else if polyEq⁰(a⁷, b⁹) then [LH_C [LH_P2 insert⁰(_lh_insertCompact_LH_P2_0⁰, _lh_insertCompact_LH_P2_0¹) cs⁰] _lh_insertCompact_LH_C_1⁰] else if polyGt⁰(a⁷, b⁹) then [LH_C [LH_P2 _lh_insertCompact_LH_P2_0¹ _lh_insertCompact_LH_P2_1¹] ic⁰(_lh_insertCompact_LH_C_1⁰)] else error⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'a' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]])}})
//│ 									in ic⁰(_lh_insertCompact_arg2¹)) _lh_replies_Just_0¹]]}}}))
//│ 	in if (_lh_replies_arg3⁰ == 0) then if null_lh_₁(mds¹) then [Just [LH_N]] else [Nothing] else if (_lh_replies_arg3⁰ > 0) then foldr_lh_₆(solnAnd⁰, [Just [LH_N]], mds¹) else error⁰([LH_C 'n' [LH_C ' ' [LH_C '<' [LH_C ' ' [LH_C '0' [LH_N]]]]]])
//│ def reverse_helper_lh_₁(ls⁶, a¹) = case ls⁶ of {
//│ 	LH_C h²⁷ t²⁷ => reverse_helper_lh_₁(t²⁷, [LH_C h²⁷ a¹])
//│ 	| LH_N  => a¹}
//│ def reverse_lh_₁(ls²⁸) = reverse_helper_lh_₁(ls²⁸, [LH_N])
//│ def reverse_lh_₂(ls²⁹) = reverse_helper_lh_₁(ls²⁹, [LH_N])
//│ def rmPieceAt_lh_₁(_lh_rmPieceAt_arg1¹, _lh_rmPieceAt_arg2¹, _lh_rmPieceAt_arg3¹) = case _lh_rmPieceAt_arg1¹ of {
//│ 	White  => case _lh_rmPieceAt_arg3¹ of {
//│ 		Board _lh_rmPieceAt_Board_0² _lh_rmPieceAt_Board_1² => [Board rPa_lh_₁(_lh_rmPieceAt_arg2¹, _lh_rmPieceAt_Board_0²) _lh_rmPieceAt_Board_1²]}
//│ 	| Black  => case _lh_rmPieceAt_arg3¹ of {
//│ 		Board _lh_rmPieceAt_Board_0³ _lh_rmPieceAt_Board_1³ => [Board _lh_rmPieceAt_Board_0³ rPa_lh_₁(_lh_rmPieceAt_arg2¹, _lh_rmPieceAt_Board_1³)]}}
//│ def rmPieceAt_lh_₂(_lh_rmPieceAt_arg1⁰, _lh_rmPieceAt_arg2⁰, _lh_rmPieceAt_arg3⁰) = case _lh_rmPieceAt_arg1⁰ of {
//│ 	White  => case _lh_rmPieceAt_arg3⁰ of {
//│ 		Board _lh_rmPieceAt_Board_0⁰ _lh_rmPieceAt_Board_1⁰ => [Board rPa_lh_₁(_lh_rmPieceAt_arg2⁰, _lh_rmPieceAt_Board_0⁰) _lh_rmPieceAt_Board_1⁰]}
//│ 	| Black  => case _lh_rmPieceAt_arg3⁰ of {
//│ 		Board _lh_rmPieceAt_Board_0¹ _lh_rmPieceAt_Board_1¹ => [Board _lh_rmPieceAt_Board_0¹ rPa_lh_₁(_lh_rmPieceAt_arg2⁰, _lh_rmPieceAt_Board_1¹)]}}
//│ def rookmoves_lh_₁(_lh_rookmoves_arg1⁰, _lh_rookmoves_arg2⁰, _lh_rookmoves_arg3⁰) = moveLine_lh_₁(_lh_rookmoves_arg3⁰, _lh_rookmoves_arg1⁰, _lh_rookmoves_arg2⁰, (fun xy⁵ -> 
//│ 	let _lh_matchIdent⁶⁶ = xy⁵
//│ 	in case _lh_matchIdent⁶⁶ of {
//│ 		LH_P2 _lh_rookmoves_LH_P2_0⁰ _lh_rookmoves_LH_P2_1⁰ => [LH_P2 (_lh_rookmoves_LH_P2_0⁰ - 1) _lh_rookmoves_LH_P2_1⁰]}), moveLine_lh_₁(_lh_rookmoves_arg3⁰, _lh_rookmoves_arg1⁰, _lh_rookmoves_arg2⁰, (fun xy⁶ -> 
//│ 	let _lh_matchIdent⁶⁷ = xy⁶
//│ 	in case _lh_matchIdent⁶⁷ of {
//│ 		LH_P2 _lh_rookmoves_LH_P2_0¹ _lh_rookmoves_LH_P2_1¹ => [LH_P2 (_lh_rookmoves_LH_P2_0¹ + 1) _lh_rookmoves_LH_P2_1¹]}), moveLine_lh_₁(_lh_rookmoves_arg3⁰, _lh_rookmoves_arg1⁰, _lh_rookmoves_arg2⁰, (fun xy⁷ -> 
//│ 	let _lh_matchIdent⁶⁸ = xy⁷
//│ 	in case _lh_matchIdent⁶⁸ of {
//│ 		LH_P2 _lh_rookmoves_LH_P2_0² _lh_rookmoves_LH_P2_1² => [LH_P2 _lh_rookmoves_LH_P2_0² (_lh_rookmoves_LH_P2_1² - 1)]}), moveLine_lh_₁(_lh_rookmoves_arg3⁰, _lh_rookmoves_arg1⁰, _lh_rookmoves_arg2⁰, (fun xy⁸ -> 
//│ 	let _lh_matchIdent⁶⁹ = xy⁸
//│ 	in case _lh_matchIdent⁶⁹ of {
//│ 		LH_P2 _lh_rookmoves_LH_P2_0³ _lh_rookmoves_LH_P2_1³ => [LH_P2 _lh_rookmoves_LH_P2_0³ (_lh_rookmoves_LH_P2_1³ + 1)]}), (fun x⁹ -> x⁹)))), [LH_N])
//│ def rqpart_lh_₁(_lh_rqpart_arg1⁰, _lh_rqpart_arg2⁰, _lh_rqpart_arg3⁰, _lh_rqpart_arg4⁰, _lh_rqpart_arg5⁰, _lh_rqpart_arg6⁰) = case _lh_rqpart_arg3⁰ of {
//│ 	LH_N  => qsort_lh_₁(_lh_rqpart_arg1⁰, _lh_rqpart_arg4⁰, [LH_C _lh_rqpart_arg2⁰ qsort_lh_₁(_lh_rqpart_arg1⁰, _lh_rqpart_arg5⁰, _lh_rqpart_arg6⁰)])
//│ 	| LH_C _lh_rqpart_LH_C_0⁰ _lh_rqpart_LH_C_1⁰ => if _lh_rqpart_arg1⁰(_lh_rqpart_LH_C_0⁰, _lh_rqpart_arg2⁰) then rqpart_lh_₁(_lh_rqpart_arg1⁰, _lh_rqpart_arg2⁰, _lh_rqpart_LH_C_1⁰, [LH_C _lh_rqpart_LH_C_0⁰ _lh_rqpart_arg4⁰], _lh_rqpart_arg5⁰, _lh_rqpart_arg6⁰) else rqpart_lh_₁(_lh_rqpart_arg1⁰, _lh_rqpart_arg2⁰, _lh_rqpart_LH_C_1⁰, _lh_rqpart_arg4⁰, [LH_C _lh_rqpart_LH_C_0⁰ _lh_rqpart_arg5⁰], _lh_rqpart_arg6⁰)}
//│ def rqsort_lh_₁(_lh_rqsort_arg1⁰, _lh_rqsort_arg2⁰, _lh_rqsort_arg3⁰) = case _lh_rqsort_arg2⁰ of {
//│ 	LH_N  => _lh_rqsort_arg3⁰
//│ 	| LH_C _lh_rqsort_LH_C_0⁰ _lh_rqsort_LH_C_1⁰ => case _lh_rqsort_LH_C_1⁰ of {
//│ 		LH_N  => [LH_C _lh_rqsort_LH_C_0⁰ _lh_rqsort_arg3⁰]
//│ 		| _  => rqpart_lh_₁(_lh_rqsort_arg1⁰, _lh_rqsort_LH_C_0⁰, _lh_rqsort_LH_C_1⁰, [LH_N], [LH_N], _lh_rqsort_arg3⁰)}}
//│ def showBoard_lh_₁(_lh_showBoard_arg1⁰) = 
//│ 	let showRank⁰ = (fun r⁰ -> 
//│ 		let consFile⁰ = (fun f⁹ -> (fun s⁰ -> 
//│ 			let _lh_matchIdent⁴² = pieceAt_lh_₁(_lh_showBoard_arg1⁰, [LH_P2 f⁹ r⁰])
//│ 			in case _lh_matchIdent⁴² of {
//│ 				Nothing  => mappend_lh_₈(
//│ 					let t⁶⁴ = 	
//│ 						let t⁶⁵ = (fun ys⁶⁸ -> ys⁶⁸)
//│ 						in let h⁶⁴ = '-'
//│ 						in (fun ys⁶⁹ -> [LH_C h⁶⁴ mappend_lh_₈(t⁶⁵, ys⁶⁹)])
//│ 					in let h⁶⁵ = ' '
//│ 					in (fun ys⁷⁰ -> [LH_C h⁶⁵ mappend_lh_₈(t⁶⁴, ys⁷⁰)]), s⁰)
//│ 				| Just _lh_showBoard_Just_0⁰ => [LH_C ' ' [LH_C pieceToChar_lh_₁(_lh_showBoard_Just_0⁰) s⁰]]}))
//│ 		in foldr_lh_₁(consFile⁰, [LH_N], enumFromTo_lh_₂(1, 8)))
//│ 	in unlines_lh_₁(map_lh_₁(showRank⁰, reverse_lh_₁(enumFromTo_lh_₁(1, 8))))
//│ def showColour_lh_₁(_lh_showColour_arg1⁰, _lh_floatOutId_0⁰, _lh_floatOutId_1⁰) = case _lh_showColour_arg1⁰ of {
//│ 	Black  => 
//│ 		let t⁴ = 	
//│ 			let t⁵ = 	
//│ 				let t⁶ = 	
//│ 					let t⁷ = 	
//│ 						let t⁸ = (fun ys⁷ -> ys⁷)
//│ 						in let h⁴ = 'k'
//│ 						in (fun ys⁸ -> 
//│ 							let t⁹ = mappend_lh_₃(t⁸, ys⁸)
//│ 							in let h⁵ = h⁴
//│ 							in (fun ys⁹ -> [LH_C h⁵ mappend_lh_₇(t⁹, ys⁹)]))
//│ 					in let h⁶ = 'c'
//│ 					in (fun ys¹⁰ -> 
//│ 						let t¹⁰ = mappend_lh_₃(t⁷, ys¹⁰)
//│ 						in let h⁷ = h⁶
//│ 						in (fun ys¹¹ -> [LH_C h⁷ mappend_lh_₇(t¹⁰, ys¹¹)]))
//│ 				in let h⁸ = 'a'
//│ 				in (fun ys¹² -> 
//│ 					let t¹¹ = mappend_lh_₃(t⁶, ys¹²)
//│ 					in let h⁹ = h⁸
//│ 					in (fun ys¹³ -> [LH_C h⁹ mappend_lh_₇(t¹¹, ys¹³)]))
//│ 			in let h¹⁰ = 'l'
//│ 			in (fun ys¹⁴ -> 
//│ 				let t¹² = mappend_lh_₃(t⁵, ys¹⁴)
//│ 				in let h¹¹ = h¹⁰
//│ 				in (fun ys¹⁵ -> [LH_C h¹¹ mappend_lh_₇(t¹², ys¹⁵)]))
//│ 		in let h¹² = 'B'
//│ 		in let t¹³ = mappend_lh_₃(t⁴, _lh_floatOutId_0⁰)
//│ 		in let h¹³ = h¹²
//│ 		in [LH_C h¹³ mappend_lh_₇(t¹³, _lh_floatOutId_1⁰)]
//│ 	| White  => 
//│ 		let t¹⁴ = 	
//│ 			let t¹⁵ = 	
//│ 				let t¹⁶ = 	
//│ 					let t¹⁷ = 	
//│ 						let t¹⁸ = (fun ys¹⁸ -> ys¹⁸)
//│ 						in let h¹⁴ = 'e'
//│ 						in (fun ys¹⁹ -> 
//│ 							let t¹⁹ = mappend_lh_₃(t¹⁸, ys¹⁹)
//│ 							in let h¹⁵ = h¹⁴
//│ 							in (fun ys²⁰ -> [LH_C h¹⁵ mappend_lh_₇(t¹⁹, ys²⁰)]))
//│ 					in let h¹⁶ = 't'
//│ 					in (fun ys²¹ -> 
//│ 						let t²⁰ = mappend_lh_₃(t¹⁷, ys²¹)
//│ 						in let h¹⁷ = h¹⁶
//│ 						in (fun ys²² -> [LH_C h¹⁷ mappend_lh_₇(t²⁰, ys²²)]))
//│ 				in let h¹⁸ = 'i'
//│ 				in (fun ys²³ -> 
//│ 					let t²¹ = mappend_lh_₃(t¹⁶, ys²³)
//│ 					in let h¹⁹ = h¹⁸
//│ 					in (fun ys²⁴ -> [LH_C h¹⁹ mappend_lh_₇(t²¹, ys²⁴)]))
//│ 			in let h²⁰ = 'h'
//│ 			in (fun ys²⁵ -> 
//│ 				let t²² = mappend_lh_₃(t¹⁵, ys²⁵)
//│ 				in let h²¹ = h²⁰
//│ 				in (fun ys²⁶ -> [LH_C h²¹ mappend_lh_₇(t²², ys²⁶)]))
//│ 		in let h²² = 'W'
//│ 		in let t²³ = mappend_lh_₃(t¹⁴, _lh_floatOutId_0⁰)
//│ 		in let h²³ = h²²
//│ 		in [LH_C h²³ mappend_lh_₇(t²³, _lh_floatOutId_1⁰)]}
//│ def showMoveInFull_lh_₁(_lh_showMoveInFull_arg1¹) = showMove_lh_₁([True], _lh_showMoveInFull_arg1¹)
//│ def showMoveInFull_lh_₂(_lh_showMoveInFull_arg1⁰) = showMove_lh_₁([True], _lh_showMoveInFull_arg1⁰)
//│ def showMove_lh_₁(_lh_showMove_arg1⁰, _lh_showMove_arg2⁰) = case _lh_showMove_arg2⁰ of {
//│ 	MoveInFull _lh_showMove_MoveInFull_0⁰ _lh_showMove_MoveInFull_1⁰ _lh_showMove_MoveInFull_2⁰ => case _lh_showMove_MoveInFull_0⁰ of {
//│ 		LH_P2 _lh_showMove_LH_P2_0⁰ _lh_showMove_LH_P2_1⁰ => case _lh_showMove_MoveInFull_2⁰ of {
//│ 			Move _lh_showMove_Move_0⁰ _lh_showMove_Move_1⁰ _lh_showMove_Move_2⁰ => 
//│ 				let capt⁰ = polyNeq⁰(_lh_showMove_Move_1⁰, [Nothing])
//│ 				in let prom⁰ = polyNeq⁰(_lh_showMove_Move_2⁰, [Nothing])
//│ 				in mappend_lh_₃₅(mappend_lh_₃₅(mappend_lh_₃₅(if _lh_showMove_arg1⁰ then mappend_lh_₃₅(mappend_lh_₃₅(showPiece_lh_₁([LH_P2 _lh_showMove_LH_P2_0⁰ _lh_showMove_LH_P2_1⁰]), if (polyEq⁰(_lh_showMove_LH_P2_1⁰, [King]) || (polyEq⁰(_lh_showMove_LH_P2_1⁰, [Pawn]) && not⁰((capt⁰ || prom⁰)))) then [LH_N] else [LH_C '/' [LH_N]]), showSquare_lh_₁(_lh_showMove_LH_P2_0⁰, _lh_showMove_MoveInFull_1⁰)) else [LH_N], maybe_lh_₃([LH_C '-' [LH_N]], (fun cp⁰ -> mappend_lh_₃₅(mappend_lh_₃₅([LH_C 'x' [LH_N]], showPiece_lh_₁(cp⁰)), [LH_C '/' [LH_N]])), _lh_showMove_Move_1⁰)), showSquare_lh_₁(_lh_showMove_LH_P2_0⁰, _lh_showMove_Move_0⁰)), maybe_lh_₃([LH_N], (fun pp⁰ -> mappend_lh_₃₅(mappend_lh_₃₅([LH_C '(' [LH_N]], showPiece_lh_₁(pp⁰)), [LH_C ')' [LH_N]])), _lh_showMove_Move_2⁰))}}}
//│ def showMovesAfter_lh_₁(_lh_showMovesAfter_arg1⁰, _lh_showMovesAfter_arg2⁰) = case _lh_showMovesAfter_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| _  => case _lh_showMovesAfter_arg1⁰ of {
//│ 		MoveInFull _lh_showMovesAfter_MoveInFull_0⁰ _lh_showMovesAfter_MoveInFull_1⁰ _lh_showMovesAfter_MoveInFull_2⁰ => case _lh_showMovesAfter_arg2⁰ of {
//│ 			LH_C _lh_showMovesAfter_LH_C_0⁰ _lh_showMovesAfter_LH_C_1⁰ => case _lh_showMovesAfter_LH_C_0⁰ of {
//│ 				MoveInFull _lh_showMovesAfter_MoveInFull_0¹ _lh_showMovesAfter_MoveInFull_1¹ _lh_showMovesAfter_MoveInFull_2¹ => mappend_lh_₃₅(mappend_lh_₃₅([LH_C ',' [LH_C ' ' [LH_N]]], showMove_lh_₁((polyNeq⁰(_lh_showMovesAfter_MoveInFull_0¹, _lh_showMovesAfter_MoveInFull_0⁰) || polyNeq⁰(_lh_showMovesAfter_MoveInFull_1¹, _lh_showMovesAfter_MoveInFull_1⁰)), [MoveInFull _lh_showMovesAfter_MoveInFull_0¹ _lh_showMovesAfter_MoveInFull_1¹ _lh_showMovesAfter_MoveInFull_2¹])), showMovesAfter_lh_₁([MoveInFull _lh_showMovesAfter_MoveInFull_0¹ _lh_showMovesAfter_MoveInFull_1¹ _lh_showMovesAfter_MoveInFull_2¹], _lh_showMovesAfter_LH_C_1⁰))}}}}
//│ def showMoves_lh_₁(_lh_showMoves_arg1³) = case _lh_showMoves_arg1³ of {
//│ 	LH_C _lh_showMoves_LH_C_0³ _lh_showMoves_LH_C_1³ => mappend_lh_₂₀(showMoveInFull_lh_₂(_lh_showMoves_LH_C_0³), showMovesAfter_lh_₁(_lh_showMoves_LH_C_0³, _lh_showMoves_LH_C_1³))
//│ 	| LH_N  => error⁰}
//│ def showMoves_lh_₂(_lh_showMoves_arg1²) = case _lh_showMoves_arg1² of {
//│ 	LH_C _lh_showMoves_LH_C_0² _lh_showMoves_LH_C_1² => mappend_lh_₃₅(showMoveInFull_lh_₂(_lh_showMoves_LH_C_0²), showMovesAfter_lh_₁(_lh_showMoves_LH_C_0², _lh_showMoves_LH_C_1²))
//│ 	| LH_N  => error⁰}
//│ def showMoves_lh_₃(_lh_showMoves_arg1¹) = case _lh_showMoves_arg1¹ of {
//│ 	LH_C _lh_showMoves_LH_C_0¹ _lh_showMoves_LH_C_1¹ => mappend_lh_₃₅(showMoveInFull_lh_₂(_lh_showMoves_LH_C_0¹), showMovesAfter_lh_₁(_lh_showMoves_LH_C_0¹, _lh_showMoves_LH_C_1¹))
//│ 	| LH_N  => error⁰}
//│ def showMoves_lh_₄(_lh_showMoves_arg1⁰) = case _lh_showMoves_arg1⁰ of {
//│ 	LH_C _lh_showMoves_LH_C_0⁰ _lh_showMoves_LH_C_1⁰ => mappend_lh_₃₅(showMoveInFull_lh_₂(_lh_showMoves_LH_C_0⁰), showMovesAfter_lh_₁(_lh_showMoves_LH_C_0⁰, _lh_showMoves_LH_C_1⁰))
//│ 	| LH_N  => error⁰}
//│ def showPiece_lh_₁(_lh_showPiece_arg1⁰) = case _lh_showPiece_arg1⁰ of {
//│ 	LH_P2 _lh_showPiece_LH_P2_0⁰ _lh_showPiece_LH_P2_1⁰ => [LH_C kindToChar_lh_₂(_lh_showPiece_LH_P2_1⁰) [LH_N]]}
//│ def showReplies_lh_₁(_lh_showReplies_arg1¹, _lh_showReplies_arg2¹) = case _lh_showReplies_arg1¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_showReplies_LH_C_0¹ _lh_showReplies_LH_C_1¹ => case _lh_showReplies_LH_C_0¹ of {
//│ 		LH_P2 _lh_showReplies_LH_P2_0¹ _lh_showReplies_LH_P2_1¹ => mappend_lh_₂₄(mappend_lh_₂₁(mappend_lh_₂₅(mappend_lh_₂₂(mappend_lh_₂₃(tab_lh_₁(_lh_showReplies_arg2¹), 
//│ 			let t⁸⁷ = 	
//│ 				let t⁸⁸ = 	
//│ 					let t⁸⁹ = (fun ys⁸⁶ -> ys⁸⁶)
//│ 					in let h⁸⁷ = ' '
//│ 					in (fun ys⁸⁷ -> [LH_C h⁸⁷ mappend_lh_₂₂(t⁸⁹, ys⁸⁷)])
//│ 				in let h⁸⁸ = 'f'
//│ 				in (fun ys⁸⁸ -> [LH_C h⁸⁸ mappend_lh_₂₂(t⁸⁸, ys⁸⁸)])
//│ 			in let h⁸⁹ = 'i'
//│ 			in (fun ys⁸⁹ -> [LH_C h⁸⁹ mappend_lh_₂₂(t⁸⁷, ys⁸⁹)])), if (null_lh_₂(_lh_showReplies_LH_C_1¹) && (length_lh_₈(_lh_showReplies_LH_P2_0¹) > 1)) then [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_N]]]]]]] else showMoves_lh_₂(_lh_showReplies_LH_P2_0¹)), 
//│ 			let t⁹⁰ = 	
//│ 				let t⁹¹ = (fun ys⁹⁰ -> ys⁹⁰)
//│ 				in let h⁹⁰ = ' '
//│ 				in (fun ys⁹¹ -> [LH_C h⁹⁰ mappend_lh_₂₁(t⁹¹, ys⁹¹)])
//│ 			in let h⁹¹ = ';'
//│ 			in (fun ys⁹² -> [LH_C h⁹¹ mappend_lh_₂₁(t⁹⁰, ys⁹²)])), showSoln_lh_₁(_lh_showReplies_LH_P2_1¹, (_lh_showReplies_arg2¹ + 1))), showReplies_lh_₁(_lh_showReplies_LH_C_1¹, _lh_showReplies_arg2¹))}}
//│ def showReplies_lh_₂(_lh_showReplies_arg1⁰, _lh_showReplies_arg2⁰) = case _lh_showReplies_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_showReplies_LH_C_0⁰ _lh_showReplies_LH_C_1⁰ => case _lh_showReplies_LH_C_0⁰ of {
//│ 		LH_P2 _lh_showReplies_LH_P2_0⁰ _lh_showReplies_LH_P2_1⁰ => mappend_lh_₃₀(mappend_lh_₂₆(mappend_lh_₂₈(mappend_lh_₂₇(mappend_lh_₂₉(tab_lh_₂(_lh_showReplies_arg2⁰), 
//│ 			let t⁷¹ = 	
//│ 				let t⁷² = 	
//│ 					let t⁷³ = (fun ys⁷⁶ -> ys⁷⁶)
//│ 					in let h⁷¹ = ' '
//│ 					in (fun ys⁷⁷ -> [LH_C h⁷¹ mappend_lh_₂₇(t⁷³, ys⁷⁷)])
//│ 				in let h⁷² = 'f'
//│ 				in (fun ys⁷⁸ -> [LH_C h⁷² mappend_lh_₂₇(t⁷², ys⁷⁸)])
//│ 			in let h⁷³ = 'i'
//│ 			in (fun ys⁷⁹ -> [LH_C h⁷³ mappend_lh_₂₇(t⁷¹, ys⁷⁹)])), if (null_lh_₃(_lh_showReplies_LH_C_1⁰) && (length_lh_₉(_lh_showReplies_LH_P2_0⁰) > 1)) then [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_N]]]]]]] else showMoves_lh_₃(_lh_showReplies_LH_P2_0⁰)), 
//│ 			let t⁷⁴ = 	
//│ 				let t⁷⁵ = (fun ys⁸⁰ -> ys⁸⁰)
//│ 				in let h⁷⁴ = ' '
//│ 				in (fun ys⁸¹ -> [LH_C h⁷⁴ mappend_lh_₂₆(t⁷⁵, ys⁸¹)])
//│ 			in let h⁷⁵ = ';'
//│ 			in (fun ys⁸² -> [LH_C h⁷⁵ mappend_lh_₂₆(t⁷⁴, ys⁸²)])), showSoln_lh_₁(_lh_showReplies_LH_P2_1⁰, (_lh_showReplies_arg2⁰ + 1))), showReplies_lh_₂(_lh_showReplies_LH_C_1⁰, _lh_showReplies_arg2⁰))}}
//│ def showReplies_lh_₃(_lh_showReplies_arg1², _lh_showReplies_arg2²) = case _lh_showReplies_arg1² of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_showReplies_LH_C_0² _lh_showReplies_LH_C_1² => case _lh_showReplies_LH_C_0² of {
//│ 		LH_P2 _lh_showReplies_LH_P2_0² _lh_showReplies_LH_P2_1² => mappend_lh_₃₄(mappend_lh_₃₃(mappend_lh_₃₅(mappend_lh_₃₂(mappend_lh_₃₁(tab_lh_₃(_lh_showReplies_arg2²), 
//│ 			let t⁹³ = 	
//│ 				let t⁹⁴ = 	
//│ 					let t⁹⁵ = (fun ys⁹⁴ -> ys⁹⁴)
//│ 					in let h⁹³ = ' '
//│ 					in (fun ys⁹⁵ -> [LH_C h⁹³ mappend_lh_₃₂(t⁹⁵, ys⁹⁵)])
//│ 				in let h⁹⁴ = 'f'
//│ 				in (fun ys⁹⁶ -> [LH_C h⁹⁴ mappend_lh_₃₂(t⁹⁴, ys⁹⁶)])
//│ 			in let h⁹⁵ = 'i'
//│ 			in (fun ys⁹⁷ -> [LH_C h⁹⁵ mappend_lh_₃₂(t⁹³, ys⁹⁷)])), if (null_lh_₄(_lh_showReplies_LH_C_1²) && (length_lh_₁₀(_lh_showReplies_LH_P2_0²) > 1)) then [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_N]]]]]]] else showMoves_lh_₄(_lh_showReplies_LH_P2_0²)), [LH_C ';' [LH_C ' ' [LH_N]]]), showSoln_lh_₁(_lh_showReplies_LH_P2_1², (_lh_showReplies_arg2² + 1))), showReplies_lh_₃(_lh_showReplies_LH_C_1², _lh_showReplies_arg2²))}}
//│ def showResult_lh_₁(_lh_showResult_arg1⁰) = case _lh_showResult_arg1⁰ of {
//│ 	Nothing  => [LH_C 'N' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '!' [LH_N]]]]]]]]]]]]]
//│ 	| Just _lh_showResult_Just_0⁰ => showSoln_lh_₁(compact_lh_₁(_lh_showResult_Just_0⁰), 1)}
//│ def showSoln_lh_₁(_lh_showSoln_arg1², _lh_showSoln_arg2²) = case _lh_showSoln_arg1² of {
//│ 	Soln _lh_showSoln_Soln_0² _lh_showSoln_Soln_1² => mappend_lh_₁₄(mappend_lh_₁₂(mappend_lh_₁₁(string_of_int⁰(_lh_showSoln_arg2²), 
//│ 		let t⁴⁸ = 	
//│ 			let t⁴⁹ = (fun ys⁴⁵ -> ys⁴⁵)
//│ 			in let h⁴⁸ = ' '
//│ 			in (fun ys⁴⁶ -> [LH_C h⁴⁸ mappend_lh_₁₂(t⁴⁹, ys⁴⁶)])
//│ 		in let h⁴⁹ = '.'
//│ 		in (fun ys⁴⁷ -> [LH_C h⁴⁹ mappend_lh_₁₂(t⁴⁸, ys⁴⁷)])), showMoveInFull_lh_₁(_lh_showSoln_Soln_0²)), 
//│ 		let _lh_matchIdent³⁶ = _lh_showSoln_Soln_1²
//│ 		in case _lh_matchIdent³⁶ of {
//│ 			LH_N  => [LH_C '+' [LH_C '+' [LH_C '|' [LH_N]]]]
//│ 			| LH_C _lh_showSoln_LH_C_0² _lh_showSoln_LH_C_1² => case _lh_showSoln_LH_C_0² of {
//│ 				LH_P2 _lh_showSoln_LH_P2_0² _lh_showSoln_LH_P2_1² => case _lh_showSoln_LH_C_1² of {
//│ 					LH_N  => mappend_lh_₁₃(mappend_lh_₁₀(mappend_lh_₁₇(
//│ 						let t⁵⁰ = 	
//│ 							let t⁵¹ = (fun ys⁴⁸ -> ys⁴⁸)
//│ 							in let h⁵⁰ = ' '
//│ 							in (fun ys⁴⁹ -> [LH_C h⁵⁰ mappend_lh_₁₇(t⁵¹, ys⁴⁹)])
//│ 						in let h⁵¹ = ','
//│ 						in (fun ys⁵⁰ -> [LH_C h⁵¹ mappend_lh_₁₇(t⁵⁰, ys⁵⁰)]), if (length_lh_₁(_lh_showSoln_LH_P2_0²) > 1) then [LH_C '.' [LH_C '.' [LH_C '.' [LH_N]]]] else showMoves_lh_₁(_lh_showSoln_LH_P2_0²)), 
//│ 						let t⁵² = 	
//│ 							let t⁵³ = (fun ys⁵¹ -> ys⁵¹)
//│ 							in let h⁵² = ' '
//│ 							in (fun ys⁵² -> [LH_C h⁵² mappend_lh_₁₃(t⁵³, ys⁵²)])
//│ 						in let h⁵³ = ';'
//│ 						in (fun ys⁵³ -> [LH_C h⁵³ mappend_lh_₁₃(t⁵², ys⁵³)])), showSoln_lh_₁(_lh_showSoln_LH_P2_1², (_lh_showSoln_arg2² + 1)))
//│ 					| _  => mappend_lh_₁₅(
//│ 						let t⁵⁴ = 	
//│ 							let t⁵⁵ = (fun ys⁵⁴ -> ys⁵⁴)
//│ 							in let h⁵⁴ = '|'
//│ 							in (fun ys⁵⁵ -> [LH_C h⁵⁴ mappend_lh_₁₅(t⁵⁵, ys⁵⁵)])
//│ 						in let h⁵⁵ = ','
//│ 						in (fun ys⁵⁶ -> [LH_C h⁵⁵ mappend_lh_₁₅(t⁵⁴, ys⁵⁶)]), showReplies_lh_₁(sort_lh_₃(_lh_showSoln_Soln_1²), _lh_showSoln_arg2²))}
//│ 				| _  => mappend_lh_₁₈(
//│ 					let t⁵⁶ = 	
//│ 						let t⁵⁷ = (fun ys⁵⁷ -> ys⁵⁷)
//│ 						in let h⁵⁶ = '|'
//│ 						in (fun ys⁵⁸ -> [LH_C h⁵⁶ mappend_lh_₁₈(t⁵⁷, ys⁵⁸)])
//│ 					in let h⁵⁷ = ','
//│ 					in (fun ys⁵⁹ -> [LH_C h⁵⁷ mappend_lh_₁₈(t⁵⁶, ys⁵⁹)]), showReplies_lh_₂(sort_lh_₂(_lh_showSoln_Soln_1²), _lh_showSoln_arg2²))}
//│ 			| _  => mappend_lh_₁₆(
//│ 				let t⁵⁸ = 	
//│ 					let t⁵⁹ = (fun ys⁶⁰ -> ys⁶⁰)
//│ 					in let h⁵⁸ = '|'
//│ 					in (fun ys⁶¹ -> [LH_C h⁵⁸ mappend_lh_₁₆(t⁵⁹, ys⁶¹)])
//│ 				in let h⁵⁹ = ','
//│ 				in (fun ys⁶² -> [LH_C h⁵⁹ mappend_lh_₁₆(t⁵⁸, ys⁶²)]), showReplies_lh_₃(sort_lh_₁(_lh_showSoln_Soln_1²), _lh_showSoln_arg2²))})}
//│ def showSoln_lh_₂(_lh_showSoln_arg1⁰, _lh_showSoln_arg2⁰) = case _lh_showSoln_arg1⁰ of {
//│ 	Soln _lh_showSoln_Soln_0⁰ _lh_showSoln_Soln_1⁰ => mappend_lh_₃₅(mappend_lh_₃₅(mappend_lh_₃₅(string_of_int⁰(_lh_showSoln_arg2⁰), [LH_C '.' [LH_C ' ' [LH_N]]]), showMoveInFull_lh_₂(_lh_showSoln_Soln_0⁰)), 
//│ 		let _lh_matchIdent²² = _lh_showSoln_Soln_1⁰
//│ 		in case _lh_matchIdent²² of {
//│ 			LH_N  => [LH_C '+' [LH_C '+' [LH_C '|' [LH_N]]]]
//│ 			| LH_C _lh_showSoln_LH_C_0⁰ _lh_showSoln_LH_C_1⁰ => case _lh_showSoln_LH_C_0⁰ of {
//│ 				LH_P2 _lh_showSoln_LH_P2_0⁰ _lh_showSoln_LH_P2_1⁰ => case _lh_showSoln_LH_C_1⁰ of {
//│ 					LH_N  => mappend_lh_₃₅(mappend_lh_₃₅(mappend_lh_₃₅([LH_C ',' [LH_C ' ' [LH_N]]], if (length_lh_₁₀(_lh_showSoln_LH_P2_0⁰) > 1) then [LH_C '.' [LH_C '.' [LH_C '.' [LH_N]]]] else showMoves_lh_₄(_lh_showSoln_LH_P2_0⁰)), [LH_C ';' [LH_C ' ' [LH_N]]]), showSoln_lh_₂(_lh_showSoln_LH_P2_1⁰, (_lh_showSoln_arg2⁰ + 1)))
//│ 					| _  => mappend_lh_₃₅([LH_C ',' [LH_C '|' [LH_N]]], showReplies_lh_₃(sort_lh_₃(_lh_showSoln_Soln_1⁰), _lh_showSoln_arg2⁰))}
//│ 				| _  => mappend_lh_₃₅([LH_C ',' [LH_C '|' [LH_N]]], showReplies_lh_₃(sort_lh_₃(_lh_showSoln_Soln_1⁰), _lh_showSoln_arg2⁰))}
//│ 			| _  => mappend_lh_₃₅([LH_C ',' [LH_C '|' [LH_N]]], showReplies_lh_₃(sort_lh_₃(_lh_showSoln_Soln_1⁰), _lh_showSoln_arg2⁰))})}
//│ def showSoln_lh_₃(_lh_showSoln_arg1¹, _lh_showSoln_arg2¹) = case _lh_showSoln_arg1¹ of {
//│ 	Soln _lh_showSoln_Soln_0¹ _lh_showSoln_Soln_1¹ => mappend_lh_₃₅(mappend_lh_₃₅(mappend_lh_₃₅(string_of_int⁰(_lh_showSoln_arg2¹), [LH_C '.' [LH_C ' ' [LH_N]]]), showMoveInFull_lh_₂(_lh_showSoln_Soln_0¹)), 
//│ 		let _lh_matchIdent³⁵ = _lh_showSoln_Soln_1¹
//│ 		in case _lh_matchIdent³⁵ of {
//│ 			LH_N  => [LH_C '+' [LH_C '+' [LH_C '|' [LH_N]]]]
//│ 			| LH_C _lh_showSoln_LH_C_0¹ _lh_showSoln_LH_C_1¹ => case _lh_showSoln_LH_C_0¹ of {
//│ 				LH_P2 _lh_showSoln_LH_P2_0¹ _lh_showSoln_LH_P2_1¹ => case _lh_showSoln_LH_C_1¹ of {
//│ 					LH_N  => mappend_lh_₃₅(mappend_lh_₃₅(mappend_lh_₃₅([LH_C ',' [LH_C ' ' [LH_N]]], if (length_lh_₁₀(_lh_showSoln_LH_P2_0¹) > 1) then [LH_C '.' [LH_C '.' [LH_C '.' [LH_N]]]] else showMoves_lh_₄(_lh_showSoln_LH_P2_0¹)), [LH_C ';' [LH_C ' ' [LH_N]]]), showSoln_lh_₃(_lh_showSoln_LH_P2_1¹, (_lh_showSoln_arg2¹ + 1)))
//│ 					| _  => mappend_lh_₃₅([LH_C ',' [LH_C '|' [LH_N]]], showReplies_lh_₃(sort_lh_₃(_lh_showSoln_Soln_1¹), _lh_showSoln_arg2¹))}
//│ 				| _  => mappend_lh_₃₅([LH_C ',' [LH_C '|' [LH_N]]], showReplies_lh_₃(sort_lh_₃(_lh_showSoln_Soln_1¹), _lh_showSoln_arg2¹))}
//│ 			| _  => mappend_lh_₃₅([LH_C ',' [LH_C '|' [LH_N]]], showReplies_lh_₃(sort_lh_₃(_lh_showSoln_Soln_1¹), _lh_showSoln_arg2¹))})}
//│ def showSquare_lh_₁(_lh_showSquare_arg1⁰, _lh_showSquare_arg2⁰) = case _lh_showSquare_arg2⁰ of {
//│ 	LH_P2 _lh_showSquare_LH_P2_0⁰ _lh_showSquare_LH_P2_1⁰ => mappend_lh_₃₅(atIndex_lh_₁((_lh_showSquare_LH_P2_0⁰ - 1), 
//│ 		let t¹³² = 	
//│ 			let t¹³³ = 	
//│ 				let t¹³⁴ = 	
//│ 					let t¹³⁵ = 	
//│ 						let t¹³⁶ = 	
//│ 							let t¹³⁷ = 	
//│ 								let t¹³⁸ = 	
//│ 									let t¹³⁹ = (fun n⁴ -> error⁰)
//│ 									in let h¹³² = [LH_C 'K' [LH_C 'R' [LH_N]]]
//│ 									in (fun n⁵ -> if (n⁵ == 0) then h¹³² else atIndex_lh_₁((n⁵ - 1), t¹³⁹))
//│ 								in let h¹³³ = [LH_C 'K' [LH_C 'N' [LH_N]]]
//│ 								in (fun n⁶ -> if (n⁶ == 0) then h¹³³ else atIndex_lh_₁((n⁶ - 1), t¹³⁸))
//│ 							in let h¹³⁴ = [LH_C 'K' [LH_C 'B' [LH_N]]]
//│ 							in (fun n⁷ -> if (n⁷ == 0) then h¹³⁴ else atIndex_lh_₁((n⁷ - 1), t¹³⁷))
//│ 						in let h¹³⁵ = [LH_C 'K' [LH_N]]
//│ 						in (fun n⁸ -> if (n⁸ == 0) then h¹³⁵ else atIndex_lh_₁((n⁸ - 1), t¹³⁶))
//│ 					in let h¹³⁶ = [LH_C 'Q' [LH_N]]
//│ 					in (fun n⁹ -> if (n⁹ == 0) then h¹³⁶ else atIndex_lh_₁((n⁹ - 1), t¹³⁵))
//│ 				in let h¹³⁷ = [LH_C 'Q' [LH_C 'B' [LH_N]]]
//│ 				in (fun n¹⁰ -> if (n¹⁰ == 0) then h¹³⁷ else atIndex_lh_₁((n¹⁰ - 1), t¹³⁴))
//│ 			in let h¹³⁸ = [LH_C 'Q' [LH_C 'N' [LH_N]]]
//│ 			in (fun n¹¹ -> if (n¹¹ == 0) then h¹³⁸ else atIndex_lh_₁((n¹¹ - 1), t¹³³))
//│ 		in let h¹³⁹ = [LH_C 'Q' [LH_C 'R' [LH_N]]]
//│ 		in (fun n¹² -> if (n¹² == 0) then h¹³⁹ else atIndex_lh_₁((n¹² - 1), t¹³²))), string_of_int⁰(
//│ 		let _lh_matchIdent⁷⁰ = _lh_showSquare_arg1⁰
//│ 		in case _lh_matchIdent⁷⁰ of {
//│ 			Black  => (9 - _lh_showSquare_LH_P2_1⁰)
//│ 			| White  => _lh_showSquare_LH_P2_1⁰}))}
//│ def sift_lh_₁(_lh_sift_arg1¹⁸, _lh_sift_arg2¹⁸, _lh_sift_arg3¹⁸, _lh_sift_arg4⁰) = _lh_sift_arg4⁰(_lh_sift_arg3¹⁸, _lh_sift_arg1¹⁸, _lh_sift_arg2¹⁸)
//│ def solution_lh_₁(_lh_solution_arg1⁰, _lh_solution_arg2⁰, _lh_solution_arg3⁰) = 
//│ 	let solnOr⁰ = (fun mifb⁰ -> (fun other⁰ -> 
//│ 		let _lh_matchIdent³² = mifb⁰
//│ 		in _lh_matchIdent³²(_lh_solution_arg2⁰, _lh_solution_arg3⁰, other⁰)))
//│ 	in if (_lh_solution_arg3⁰ > 0) then 
//│ 		let mds⁰ = moveDetailsFor_lh_₁(_lh_solution_arg2⁰, _lh_solution_arg1⁰)
//│ 		in foldr_lh_₂(solnOr⁰, [Nothing], mds⁰) else error⁰([LH_C 'n' [LH_C ' ' [LH_C '<' [LH_C '=' [LH_C ' ' [LH_C '0' [LH_N]]]]]]])
//│ def solve_lh_₁(_lh_solve_arg1⁰, _lh_solve_arg2⁰, _lh_solve_arg3⁰) = showResult_lh_₁(solution_lh_₁(_lh_solve_arg1⁰, _lh_solve_arg2⁰, ((2 * _lh_solve_arg3⁰) - 1)))
//│ def sort_lh_₁(_lh_sort_arg1⁰) = qsort_lh_₁((fun a⁰ -> (fun b¹ -> 
//│ 	let _lh_matchIdent²³ = a⁰
//│ 	in case _lh_matchIdent²³ of {
//│ 		LH_P2 _lh_sort_LH_P2_0⁰ _lh_sort_LH_P2_1⁰ => 
//│ 			let _lh_matchIdent²⁴ = b¹
//│ 			in case _lh_matchIdent²⁴ of {
//│ 				LH_P2 _lh_sort_LH_P2_0¹ _lh_sort_LH_P2_1¹ => (length_lh_₂(_lh_sort_LH_P2_0⁰) <= length_lh_₃(_lh_sort_LH_P2_0¹))}})), _lh_sort_arg1⁰, [LH_N])
//│ def sort_lh_₂(_lh_sort_arg1¹) = qsort_lh_₂((fun a³ -> (fun b⁴ -> 
//│ 	let _lh_matchIdent²⁸ = a³
//│ 	in case _lh_matchIdent²⁸ of {
//│ 		LH_P2 _lh_sort_LH_P2_0² _lh_sort_LH_P2_1² => 
//│ 			let _lh_matchIdent²⁹ = b⁴
//│ 			in case _lh_matchIdent²⁹ of {
//│ 				LH_P2 _lh_sort_LH_P2_0³ _lh_sort_LH_P2_1³ => (length_lh_₄(_lh_sort_LH_P2_0²) <= length_lh_₅(_lh_sort_LH_P2_0³))}})), _lh_sort_arg1¹, [LH_N])
//│ def sort_lh_₃(_lh_sort_arg1²) = qsort_lh_₃((fun a⁶ -> (fun b⁸ -> 
//│ 	let _lh_matchIdent⁵⁹ = a⁶
//│ 	in case _lh_matchIdent⁵⁹ of {
//│ 		LH_P2 _lh_sort_LH_P2_0⁴ _lh_sort_LH_P2_1⁴ => 
//│ 			let _lh_matchIdent⁶⁰ = b⁸
//│ 			in case _lh_matchIdent⁶⁰ of {
//│ 				LH_P2 _lh_sort_LH_P2_0⁵ _lh_sort_LH_P2_1⁵ => (length_lh_₆(_lh_sort_LH_P2_0⁴) <= length_lh_₇(_lh_sort_LH_P2_0⁵))}})), _lh_sort_arg1², [LH_N])
//│ def splitAt_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰, _lh_dummy⁰, _lh_dummy¹) = 
//│ 	let _lh_parseProblem_LH_P2_1⁰ = drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)
//│ 	in let _lh_parseProblem_LH_P2_0⁰ = take_lh_₂(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)
//│ 	in let bd⁰ = parseBoard_lh_₁(_lh_parseProblem_LH_P2_0⁰)
//│ 	in let gl⁰ = parseGoal_lh_₁(_lh_parseProblem_LH_P2_1⁰)
//│ 	in let _lh_testMate_nofib_LH_P2_1⁰ = gl⁰
//│ 	in let _lh_testMate_nofib_LH_P2_0⁰ = bd⁰
//│ 	in _lh_testMate_nofib_LH_P2_1⁰(_lh_testMate_nofib_LH_P2_0⁰)
//│ def tab_lh_₁(_lh_tab_arg1², _lh_floatOutId_0⁸) = if (_lh_tab_arg1² <= 0) then _lh_floatOutId_0⁸ else (fun ys¹⁴⁵ -> 
//│ 	let t¹⁴⁰ = tab_lh_₁((_lh_tab_arg1² - 1))
//│ 	in let h¹⁴⁰ = ' '
//│ 	in let t¹⁴¹ = mappend_lh_₂₃(t¹⁴⁰, _lh_floatOutId_0⁸)
//│ 	in let h¹⁴¹ = h¹⁴⁰
//│ 	in [LH_C h¹⁴¹ mappend_lh_₂₂(t¹⁴¹, ys¹⁴⁵)])
//│ def tab_lh_₂(_lh_tab_arg1⁰, _lh_floatOutId_0⁵) = if (_lh_tab_arg1⁰ <= 0) then _lh_floatOutId_0⁵ else (fun ys⁶⁷ -> 
//│ 	let t⁶² = tab_lh_₂((_lh_tab_arg1⁰ - 1))
//│ 	in let h⁶² = ' '
//│ 	in let t⁶³ = mappend_lh_₂₉(t⁶², _lh_floatOutId_0⁵)
//│ 	in let h⁶³ = h⁶²
//│ 	in [LH_C h⁶³ mappend_lh_₂₇(t⁶³, ys⁶⁷)])
//│ def tab_lh_₃(_lh_tab_arg1¹, _lh_floatOutId_0⁷) = if (_lh_tab_arg1¹ <= 0) then _lh_floatOutId_0⁷ else (fun ys¹⁰¹ -> 
//│ 	let t⁹⁷ = tab_lh_₃((_lh_tab_arg1¹ - 1))
//│ 	in let h⁹⁷ = ' '
//│ 	in let t⁹⁸ = mappend_lh_₃₁(t⁹⁷, _lh_floatOutId_0⁷)
//│ 	in let h⁹⁸ = h⁹⁷
//│ 	in [LH_C h⁹⁸ mappend_lh_₃₂(t⁹⁸, ys¹⁰¹)])
//│ def take_lh_₁(n², ls¹⁵) = if (n² > 0) then case ls¹⁵ of {
//│ 	LH_C h⁶⁶ t⁶⁶ => [LH_C h⁶⁶ take_lh_₁((n² - 1), t⁶⁶)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lh_₂(n¹, ls¹³) = if (n¹ > 0) then case ls¹³ of {
//│ 	LH_C h⁴⁶ t⁴⁶ => [LH_C h⁴⁶ take_lh_₂((n¹ - 1), t⁴⁶)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testMate_nofib_lh_₁(_lh_testMate_nofib_arg1⁰) = 
//│ 	let input⁰ = primId⁰([LH_C '-' [LH_C '-' [LH_C ' ' [LH_C 'A' [LH_C '.' [LH_C ' ' [LH_C 'E' [LH_C 'l' [LH_C 'l' [LH_C 'e' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'n' [LH_C '|' [LH_C '-' [LH_C '-' [LH_C ' ' [LH_C '1' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'z' [LH_C 'e' [LH_C ',' [LH_C ' ' [LH_C 'L' [LH_C 'u' [LH_C 'i' [LH_C 'g' [LH_C 'i' [LH_C ' ' [LH_C 'C' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'u' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'i' [LH_C ',' [LH_C ' ' [LH_C 'G' [LH_C 'e' [LH_C 'n' [LH_C 'o' [LH_C 'a' [LH_C ',' [LH_C ' ' [LH_C '1' [LH_C '9' [LH_C '2' [LH_C '5' [LH_C '|' [LH_C '-' [LH_C '-' [LH_C ' ' [LH_C '`' [LH_C 'O' [LH_C 'n' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C 'y' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C 'r' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'w' [LH_C 'o' [LH_C '-' [LH_C 'm' [LH_C 'o' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_C ',' [LH_C '|' [LH_C '-' [LH_C '-' [LH_C ' ' [LH_C 'u' [LH_C 'n' [LH_C 's' [LH_C 'u' [LH_C 'r' [LH_C 'p' [LH_C 'a' [LH_C 's' [LH_C 's' [LH_C 'e' [LH_C 'd' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 'a' [LH_C 'u' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 'i' [LH_C 'd' [LH_C 'e' [LH_C 'a' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C '|' [LH_C '-' [LH_C '-' [LH_C ' ' [LH_C 'e' [LH_C 'x' [LH_C 'e' [LH_C 'c' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C ' ' [LH_C '(' [LH_C 'P' [LH_C 'h' [LH_C 'i' [LH_C 'l' [LH_C 'l' [LH_C 'i' [LH_C 'p' [LH_C 's' [LH_C ')' [LH_C '|' [LH_C '|' [LH_C 'b' [LH_C ' ' [LH_C 'k' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '|' [LH_C '-' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C 'p' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '|' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '|' [LH_C 'r' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C 'p' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '|' [LH_C 'R' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C 'K' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '|' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C 'r' [LH_C ' ' [LH_C 'P' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C 'p' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '|' [LH_C '-' [LH_C ' ' [LH_C 'Q' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '|' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C '-' [LH_C ' ' [LH_C 'q' [LH_C ' ' [LH_C 'B' [LH_C ' ' [LH_C 'B' [LH_C ' ' [LH_C '|' [LH_C '|' [LH_C 'W' [LH_C 'h' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'p' [LH_C 'l' [LH_C 'a' [LH_C 'y' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C '2' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 	in let bdcn⁰ = readProblem_lh_₁(input⁰)
//│ 	in let _lh_matchIdent¹ = bdcn⁰
//│ 	in _lh_matchIdent¹([lh_Unit])
//│ def toLower_lh_₁(_lh_toLower_arg1⁰) = 
//│ 	let _lh_matchIdent⁵⁶ = _lh_toLower_arg1⁰
//│ 	in case _lh_matchIdent⁵⁶ of {
//│ 		'A'  => 'a'
//│ 		| 'B'  => 'b'
//│ 		| 'C'  => 'c'
//│ 		| 'D'  => 'd'
//│ 		| 'E'  => 'e'
//│ 		| 'F'  => 'f'
//│ 		| 'G'  => 'g'
//│ 		| 'H'  => 'h'
//│ 		| 'I'  => 'i'
//│ 		| 'J'  => 'j'
//│ 		| 'K'  => 'k'
//│ 		| 'L'  => 'l'
//│ 		| 'M'  => 'm'
//│ 		| 'N'  => 'n'
//│ 		| 'O'  => 'o'
//│ 		| 'P'  => 'p'
//│ 		| 'Q'  => 'q'
//│ 		| 'R'  => 'r'
//│ 		| 'S'  => 's'
//│ 		| 'T'  => 't'
//│ 		| 'U'  => 'u'
//│ 		| 'V'  => 'v'
//│ 		| 'W'  => 'w'
//│ 		| 'X'  => 'x'
//│ 		| 'Y'  => 'y'
//│ 		| 'Z'  => 'z'
//│ 		| _  => _lh_matchIdent⁵⁶}
//│ def tryMove_lh_₁(_lh_tryMove_arg1⁰, _lh_tryMove_arg2⁰, _lh_tryMove_arg3⁰, _lh_tryMove_arg4⁰, _lh_floatOutId_0⁴, _lh_floatOutId_1⁴) = case _lh_tryMove_arg2⁰ of {
//│ 	LH_P2 _lh_tryMove_LH_P2_0⁰ _lh_tryMove_LH_P2_1⁰ => case _lh_tryMove_arg3⁰ of {
//│ 		Move _lh_tryMove_Move_0⁰ _lh_tryMove_Move_1⁰ _lh_tryMove_Move_2⁰ => 
//│ 			let p⁰ = [LH_P2 _lh_tryMove_arg1⁰ _lh_tryMove_LH_P2_0⁰]
//│ 			in let bd1⁰ = rmPieceAt_lh_₁(_lh_tryMove_arg1⁰, _lh_tryMove_LH_P2_1⁰, _lh_tryMove_arg4⁰)
//│ 			in let p'⁰ = maybe_lh_₂(p⁰, (fun x⁶ -> x⁶), _lh_tryMove_Move_2⁰)
//│ 			in let bd2⁰ = maybe_lh_₃(putPieceAt_lh_₂(_lh_tryMove_Move_0⁰, p'⁰, bd1⁰), (fun _dummy⁰ -> putPieceAt_lh_₃(_lh_tryMove_Move_0⁰, p'⁰, rmPieceAt_lh_₂(opponent_lh_₅(_lh_tryMove_arg1⁰), _lh_tryMove_Move_0⁰, bd1⁰))), _lh_tryMove_Move_1⁰)
//│ 			in if not⁰(kingincheck_lh_₂(_lh_tryMove_arg1⁰, bd2⁰)) then 
//│ 				let _lh_maybe_Just_0¹ = 	
//│ 					let _lh_solution_LH_P2_1⁰ = bd2⁰
//│ 					in let _lh_solution_LH_P2_0⁰ = [MoveInFull p⁰ _lh_tryMove_LH_P2_1⁰ [Move _lh_tryMove_Move_0⁰ _lh_tryMove_Move_1⁰ _lh_tryMove_Move_2⁰]]
//│ 					in (fun _lh_solution_arg2¹ -> (fun _lh_solution_arg3¹ -> (fun other¹ -> 
//│ 						let rsm⁰ = replies_lh_₁(_lh_solution_LH_P2_1⁰, opponent_lh_₂(_lh_solution_arg2¹), (_lh_solution_arg3¹ - 1))
//│ 						in let _lh_matchIdent³⁷ = rsm⁰
//│ 						in case _lh_matchIdent³⁷ of {
//│ 							Nothing  => other¹
//│ 							| Just _lh_solution_Just_0⁰ => case _lh_solution_Just_0⁰ of {
//│ 								LH_N  => if kingincheck_lh_₁(opponent_lh_₁(_lh_solution_arg2¹), _lh_solution_LH_P2_1⁰) then [Just 
//│ 									let _lh_compact_Solution_1⁰ = [LH_N]
//│ 									in let _lh_compact_Solution_0⁰ = _lh_solution_LH_P2_0⁰
//│ 									in (fun _lh_dummy² -> [Soln _lh_compact_Solution_0⁰ foldr_lh_₃(insertCompact_lh_₁, [LH_N], _lh_compact_Solution_1⁰)])] else other¹
//│ 								| _  => [Just 
//│ 									let _lh_compact_Solution_1¹ = _lh_solution_Just_0⁰
//│ 									in let _lh_compact_Solution_0¹ = _lh_solution_LH_P2_0⁰
//│ 									in (fun _lh_dummy³ -> [Soln _lh_compact_Solution_0¹ foldr_lh_₃(insertCompact_lh_₁, [LH_N], _lh_compact_Solution_1¹)])]}})))
//│ 				in _lh_floatOutId_1⁴(_lh_maybe_Just_0¹) else _lh_floatOutId_0⁴}}
//│ def tryMove_lh_₂(_lh_tryMove_arg1¹, _lh_tryMove_arg2¹, _lh_tryMove_arg3¹, _lh_tryMove_arg4¹) = case _lh_tryMove_arg2¹ of {
//│ 	LH_P2 _lh_tryMove_LH_P2_0¹ _lh_tryMove_LH_P2_1¹ => case _lh_tryMove_arg3¹ of {
//│ 		Move _lh_tryMove_Move_0¹ _lh_tryMove_Move_1¹ _lh_tryMove_Move_2¹ => 
//│ 			let p¹ = [LH_P2 _lh_tryMove_arg1¹ _lh_tryMove_LH_P2_0¹]
//│ 			in let bd1¹ = rmPieceAt_lh_₂(_lh_tryMove_arg1¹, _lh_tryMove_LH_P2_1¹, _lh_tryMove_arg4¹)
//│ 			in let p'¹ = maybe_lh_₃(p¹, (fun x⁸ -> x⁸), _lh_tryMove_Move_2¹)
//│ 			in let bd2¹ = maybe_lh_₃(putPieceAt_lh_₃(_lh_tryMove_Move_0¹, p'¹, bd1¹), (fun _dummy¹ -> putPieceAt_lh_₃(_lh_tryMove_Move_0¹, p'¹, rmPieceAt_lh_₂(opponent_lh_₅(_lh_tryMove_arg1¹), _lh_tryMove_Move_0¹, bd1¹))), _lh_tryMove_Move_1¹)
//│ 			in if not⁰(kingincheck_lh_₂(_lh_tryMove_arg1¹, bd2¹)) then [Just [LH_P2 [MoveInFull p¹ _lh_tryMove_LH_P2_1¹ [Move _lh_tryMove_Move_0¹ _lh_tryMove_Move_1¹ _lh_tryMove_Move_2¹]] bd2¹]] else [Nothing]}}
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = concat_lh_₁(map_lh_₂((fun l⁰ -> mappend_lh_₉(l⁰, [LH_C '|' [LH_N]])), _lh_unlines_arg1⁰))
//│ def words_lh_₁(_lh_words_arg1⁰) = 
//│ 	let _lh_matchIdent²⁵ = dropWhile_lh_₁((fun x³ -> polyEq⁰(x³, ' ')), _lh_words_arg1⁰)
//│ 	in case _lh_matchIdent²⁵ of {
//│ 		LH_N  => [LH_N]
//│ 		| _  => 
//│ 			let _lh_matchIdent²⁶ = break_lh_₁((fun x⁴ -> polyEq⁰(x⁴, ' ')), _lh_matchIdent²⁵)
//│ 			in case _lh_matchIdent²⁶ of {
//│ 				LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)]}}
//│ def zipWith_lh_₁(f²⁰, xs²³, ys⁸⁵) = case xs²³ of {
//│ 	LH_C hx⁰ tx⁰ => case ys⁸⁵ of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C f²⁰(hx⁰, hy⁰) zipWith_lh_₁(f²⁰, tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
