

:lhInHaskell
:lhGenOCaml
map_dnet :: (a -> b) -> DISC_NET a -> DISC_NET b
map_dnet f (Switch alist defalt) = Switch (map (cross (\x -> x) (map_dnet f)) alist) (map_dnet f defalt)
map_dnet f (Return x) = Return (f x)
delete_eqns :: [NUM] -> DNET -> DNET
delete_eqns nums =
  let ok = \e -> not (inList (eqno e) nums) in
  map_dnet (filter ok)
skeleton :: DNET -> DISC_NET [NUM]
skeleton x = map_dnet (map eqno) x
quant :: (PRED a -> PRED [a]) -> RELATION a b -> RELATION b [a]
quant q rel y xs =
  let p = \x -> rel x y in
  q p xs
eqRewrite ord x y = (polyEq (ord (x, y)) Equal)
gtRewrite ord x y = (polyEq (ord (x, y)) Greater)
ltRewrite ord x y = (polyEq (ord (x, y)) Less)
geRewrite ord x y = (inList (ord (x, y)) [Greater, Equal])
dropWhile f [] = []
dropWhile f (h:t) = if (f h) then dropWhile f t else (h:t)
takeWhile p [] = []
takeWhile p (x:xs) = if (p x) then x:(takeWhile p xs) else []
fst (a, b) = a
snd (a, b) = b
inList x (h:t) = if polyEq x h then True else inList x t
inList x [] = False
or [] = False
or (h:t) = if h then True else or t
all p [] = True
all p (h:t) = if p h then all p t else False
any p [] = False
any p (h:t) = if p h then True else any p t
data EXPR = Func FUNC [EXPR] | Var VAR
type FUNC    = String
type VAR    = String
type NUM    = Int
type EXPR_PAIR = (EXPR, EXPR)
data EQUATION = Eqn NUM EXPR_PAIR
type PARSER    = String -> Maybe (SYNVAL, String)
data SYNVAL    = Expr EXPR | List [SYNVAL] | MkString String
type SUBST = [(VAR, EXPR)]
type PATH = [NUM]
type TACTIC = EXPR -> Maybe EXPR
data TOKEN = Afunc FUNC | Avar
data DISC_NET a = Switch [(FUNC, DISC_NET a)] (DISC_NET a) | Return a
type DNET = DISC_NET [EQUATION]
data ANSWER = Equal | Greater | Less | Unrelated deriving Eq
type ORDERING a   = (a, a) -> ANSWER
type PRED a        = a -> Bool
type RELATION a b = a -> b -> Bool
type EXTENSION = ORDERING EXPR -> ORDERING EXPR
type CRIT_PAIR    = EXPR_PAIR
data ITEM         = Item NUM CRIT_PAIR
type AGENDA       = [ITEM]
type KB_DATA = (ORDERING EXPR, EXPR_PAIR -> NUM)
copy n x = if n <= 0 then [] else x:(copy (n - 1) x)
eqListExpr [] [] = True
eqListExpr (a:b) (c:d) = if eqExpr a c then eqListExpr b d else False
eqListExpr _ _ = False
succeed x             = Just x
croak                 = Nothing
exists Nothing        = False
exists x              = True
the (Just x)          = x
the _                 = error
orElse Nothing y      = y
orElse x y            = x
getOrElse (Just x) y  = x
getOrElse Nothing y   = y
orElseMap p q s       = orElse (p s) (q s)
maybeX p x            = if p then Just x else Nothing
first_ok x            = foldr (orElse) Nothing x
sift x                = (concat . map listify) x
listify x             = getOrElse (lift box x) []
box x                 = [x]
lift f Nothing        = Nothing
lift f (Just x)       = Just (f x)
prop :: (a -> Maybe b) -> (Maybe a -> Maybe b)
prop f Nothing = Nothing
prop f (Just x) = f x
prop2 :: (a -> b -> Maybe c) -> (Maybe a -> b -> Maybe c)
prop2 f Nothing y = Nothing
prop2 f (Just x) y = f x y
prop_fold :: (a -> b -> Maybe a) -> a -> [b] -> Maybe a
prop_fold f x [] = Just x
prop_fold f x (y:ys) = prop2 (prop_fold f) (f x y) ys
squash                :: Maybe (Maybe a) -> Maybe a
squash (Just x)       = x
squash Nothing        = Nothing
pair x y              = (x, y)
cross              :: (a -> c) -> (b -> d) -> (a,b) -> (c,d)
cross f g (x,y)     = (f x, g y)
eqExpr (Func f1 es1) (Func f2 es2) = (polyEq f1 f2) && (eqListExpr es1 es2)
eqExpr (Var v1) (Var v2) = polyEq v1 v2
eqExpr other1 other2 = False
lhs (Eqn n (a, b)) = a
rhs (Eqn n (a, b)) = b
eqno (Eqn n (a, b)) = n
eqpr (Eqn n pr) = pr
cost :: (EXPR, EXPR) -> NUM
cost (a, b) = (size a) + (size b)
      where
      size x = expr_fold (\x -> \a -> (sum a) + 1) (\dum -> 0) x
expr_fold :: (FUNC -> [a] -> a) -> (VAR -> a) -> EXPR -> a
expr_fold ff vv (Var v) = vv v
expr_fold ff vv (Func f a) = ff f (map (expr_fold ff vv) a)
occurs :: VAR -> EXPR -> Bool
occurs v = expr_fold (\dum -> or) (\x -> polyEq x v)
assoc alist x =
  let match_x = \uv -> case uv of {(u,v) -> maybeX (polyEq x u) v} in
  first_ok (map match_x alist)
update_alist :: Eq a => a -> (b -> b) -> b -> [(a, b)] -> [(a, b)]
update_alist x f defalt =
  let upd = \ls -> case ls of {
    [] -> [(x, f defalt)];
    ((y, z):alist) -> if polyEq x y then ((x, f z):alist) else ((y, z):(upd alist));
  } in
  upd
apply :: SUBST -> VAR -> EXPR
apply s v = getOrElse (assoc s v) (Var v)
sub :: EXPR -> SUBST -> EXPR
sub t s = expr_fold (\x -> \y -> Func x y) (apply s) t
comp_sub s1 s2 = [(v, sub t s1) | (v, t) <- s2] ++ s1
stand :: String -> EXPR -> EXPR
stand suffix = expr_fold (\x -> \y -> Func x y) (\v -> Var (v ++ suffix))
stand_eqn :: String -> EQUATION -> EQUATION
stand_eqn suffix (Eqn n (lhs, rhs)) = Eqn n (stand suffix lhs, stand suffix rhs)
subterms :: EXPR -> [(PATH, EXPR)]
subterms (Var v) = []
subterms (Func f a) = [([], Func f a)] ++ [(i:k, u) | (i, t) <- (zip_lz_nl [0..] a), (k, u) <- subterms t]
replace :: EXPR -> PATH -> EXPR -> EXPR
replace t [] u = u
replace (Func f a) (i:k) u = Func f (modify a i (\t -> replace t k u))
replace _ _ u = error
modify (x:a) 0 f = (f x) : a
modify (x:a) i f = x : (modify a (i-1) f)
modify _ _ _ = error
match :: EXPR -> EXPR -> Maybe SUBST
match p t = match' [] (p, t)
match' s (Var v, t) =
  let u = assoc s v in
  if not (exists u) then succeed ((v, t):s)
  else if eqExpr (the u) t then succeed s
  else croak
match' s (Func f a, Func g b) = if polyEq f g then prop_fold match' s (zip a b) else croak
match' s (Func f a, Var v) = croak
match' _ _ = error
rewrite :: EQUATION -> TACTIC
rewrite (Eqn n (l, r)) = (lift (sub r)) . (match l)
try_all :: [TACTIC] -> TACTIC
try_all x = foldr (orElseMap) (\dum -> croak) x
inside :: TACTIC -> TACTIC
inside rw t = first_ok [ lift (replace t k) (rw u) | (k, u) <- subterms t ]
reduce1 eqn = inside (rewrite eqn)
reduce eqns = inside (try_all (map rewrite eqns))
unify t u = unify' [] (t, u)
unify' s (Var v, u) = univar s v u
unify' s (Func f a, Var v) = univar s v (Func f a)
unify' s (Func f a, Func g b)
    = if polyEq f g then prop_fold unify' s (zip a b) else croak
univar s v u =
  let t = assoc s v in
  if exists t then unify' s (the t, u)
  else if eqExpr u (Var v) then succeed s
  else
    let u' = sub u s in
    if not ( occurs v u') then succeed (comp_sub [(v, u')] s)
    else croak
simplify :: TACTIC -> EXPR -> EXPR
simplify rw = let f = \t -> getOrElse (lift f (rw t)) t in f
result (s1, s2) =
  let group_completion = knuth_bendix (rpo (rank_order rank) lex_ext) (map parse_eqn [ "(a * b) * c = a * (b * c)", "E * x = x", "I(x) * x = E" ]) in
  (eqExpr (simplify (super_reduce group_completion) (parse s1)) (parse s2))
  where
    ----- parsing -----
    parse_eqn s = case (fst (the (p_eqn s))) of {(List [Expr lhs, Expr rhs]) -> (lhs, rhs); _ -> error}
    parse s                 = (unExpr . fst . the . p_expr) s
    unExpr (Expr e)         = e
    unExpr _                = error
    unString (MkString s)   = s
    unString _              = error
    build                 :: (SYNVAL -> SYNVAL) -> (PARSER -> PARSER)
    build f p             = (lift (cross f (\x -> x))) . p
    seq2                  :: (SYNVAL -> SYNVAL -> SYNVAL) -> (PARSER -> PARSER -> PARSER)
    seq2 f p q =
      let g = (\xs -> case xs of (x, s) -> lift (cross (f x) (\x -> x)) (q s)) in (squash . (lift g) . p)
    seq2Lzq f p q =
      let g = (\xs -> case xs of (x, s) -> lift (cross (f x) (\x -> x)) ((force q) s)) in (squash . (lift g) . p)
    seQ                   :: ([SYNVAL] -> SYNVAL) -> ([PARSER] -> PARSER)
    seQ f ps              = build (mk_list f) (foldr (seq2 mk_cons) empty ps)
    mk_cons x (List xs)   = List (x:xs)
    mk_cons x _           = error
    mk_list f (List xs)   = f xs
    mk_list f _           = error
    empty                 :: PARSER
    empty s               = succeed (List [], s)
    list_of               :: PARSER -> Char -> PARSER
    -- NOTE:
    list_of p sep         =
      let p' = lazy (seq2 mk_cons p (orElseMap (seq2Lzq (\x -> \y -> y) (look_for sep) p') empty)) in
      force p'
    sp p                  = p . dropWhile (\x -> polyEq x ' ')
    look_for c            = sp (pchar (\x -> polyEq x c))
    pchar p []            = croak
    pchar p (c:s)         = if p c then succeed (MkString [c], s) else croak
    string_of kind s =
      let chars = takeWhile kind s in
      let s'    = dropWhile kind s in
      maybeX (polyNeq chars "") (MkString chars, s')
    p_eqn x = seQ q_eqn [p_expr, look_for '=', p_expr] x
    q_eqn [lhs, eqRewrite, rhs] = List [lhs, rhs]
    q_eqn _                     = error
    p_expr x = orElseMap (seQ q_op [p_term, p_op, p_term]) p_term x
    q_op [Expr a, MkString op, Expr b] = Expr (Func op [a, b])
    q_op _                             = error
    p_term x = orElseMap (seQ q_func [p_ident, look_for '(', list_of p_expr ',', look_for ')']) p_prim x
    q_func [MkString fun, lb, List args, rb] = Expr (Func fun (map unExpr args))
    q_func _                                 = error
    p_prim x = orElseMap p_name (seQ (\x -> atIndex 1 x) [look_for '(', p_expr, look_for ')']) x
    p_name x = build q_name p_ident x
    q_name (MkString s) = if ((int_of_char (atIndex 0 s)) >= (int_of_char 'a')) && ((int_of_char (atIndex 0 s)) <= (int_of_char 'z')) then Expr (Var s) else Expr (Func s [])
    q_name _ = error
    p_ident x = sp (string_of alphanum) x
    p_op x = sp (string_of opsym) x
    opsym x = (\x -> inList x ['*', '+', '%', '@', '-', '/', '?', ':']) x
    alphanum c = ((((int_of_char c) >= (int_of_char 'A')) && ((int_of_char c) <= (int_of_char 'Z'))) ||
                (((int_of_char c) >= (int_of_char 'a')) && ((int_of_char c) <= (int_of_char 'z'))) ||
                (((int_of_char c) >= (int_of_char '0')) && ((int_of_char c) <= (int_of_char '9'))))
    ----- parsing -----
    g_init exp = [exp]
    g_first ((Func f a) : z) = Afunc f
    g_first ((Var v) : z) = Avar
    g_first _ = error
    g_rest ((Func f a) : z) = a ++ z
    g_rest ((Var v) : z) = z
    g_rest _ = error
    g_skip x = tail x
    preorder z = if eqListExpr z [] then [] else ([g_first z] ++ (preorder (g_rest z)))
    empty_net = Return []
    is_switch (Switch alist defalt) = True
    is_switch (Return eqns) = False
    find :: EXPR -> DNET -> [EQUATION]
    find exp d = find' (g_init exp) d
    find' z (Return eqns) = eqns
    find' z (Switch alist defalt)
        = (find_assoc (g_first z) (g_rest z) alist) ++ (find' (g_skip z) defalt)
    find_assoc (Afunc f) z alist
        = getOrElse (lift (find' z) (assoc alist f)) []
    find_assoc Avar z alist = []
    mk_dnet :: [EQUATION] -> DNET
    mk_dnet x = foldl add_eqn empty_net x
    add_eqn :: DNET -> EQUATION -> DNET
    add_eqn d eqn = thread (preorder (g_init (lhs eqn))) eqn d
    thread :: [TOKEN] -> EQUATION -> DNET -> DNET
    thread ((Afunc f) : z) e (Switch alist defalt) = Switch (update_alist f (thread z e) empty_net alist) defalt
    thread (Avar : z) e (Switch alist defalt) = Switch alist (thread z e defalt)
    thread [] e (Return eqns) = Return (e : eqns)
    thread ((Afunc f) : z) e (Return eqns) = thread ((Afunc f) : z) e (Switch [] (Return eqns))
    thread (Avar : z) e (Return eqns) =
      let d' = thread z e (Return eqns) in
      if is_switch d' then Switch [] d' else  d'
    super_reduce d = inside (dnet_reduce d)
    dnet_reduce d t = try_all (map rewrite (find t d)) t
    num_order :: ORDERING NUM
    num_order (i, j) =
      if i > j then
        Greater
      else if i < j then
        Less
      else
        Equal
    rank_order :: (a -> NUM) -> ORDERING a
    rank_order rank (x, y) = num_order (rank x, rank y)
    delete :: RELATION a b -> a -> [b] -> Maybe [b]
    delete eqRewrite x [] = croak
    delete eqRewrite x (y:ys) = if eqRewrite x y then succeed ys else lift (\x -> y:x) (delete eqRewrite x ys)
    rem_eq :: RELATION a b -> ([a], [b]) -> ([a], [b])
    rem_eq eqRewrite ([], ys) = ([], ys)
    rem_eq eqRewrite (x:xs, ys) =
      let add_x = \xsys -> case xsys of {(xs', ys') -> ((x:xs'), ys')} in
      getOrElse (lift (rem_eq eqRewrite . pair xs) (delete eqRewrite x ys)) (add_x (rem_eq eqRewrite (xs, ys)))
    dominates :: ORDERING a -> RELATION [a] [a]
    dominates ord = quant all (quant any (gtRewrite ord))
    multi :: ORDERING a -> ORDERING [a]
    multi ord (a, b) =
      case rem_eq (eqRewrite ord) (a, b) of
        (a', b') -> if dominates ord a' b' then Greater else (if dominates ord b' a' then Less else Unrelated)
    lexico :: ORDERING a -> ORDERING [a]
    lexico ord ([], []) = Equal
    lexico ord (x:a, []) = Greater
    lexico ord ([], y:b) = Less
    lexico ord (x:a, y:b) = lex_combine (ord (x, y)) (lexico ord (a, b))
    lex_combine Equal o = o
    lex_combine Greater o = Greater
    lex_combine Less o = Less
    lex_combine Unrelated o = Unrelated
    multi_ext :: EXTENSION
    multi_ext ord (Func f a, Func g b) = multi ord (a, b)
    multi_ext ord _ = error
    lex_ext :: EXTENSION
    lex_ext ord (Func f a, Func g b) =
      let estimate = lexico ord (a, b) in
      let confirm = \x -> case x of {
        Equal     -> True;
        Greater   -> quant all (ltRewrite ord) (Func f a) b;
        Less      -> quant all (ltRewrite ord) (Func g b) a;
        Unrelated -> False;
      } in
      if confirm estimate then estimate
      else if quant any (geRewrite ord) (Func g b) a then Greater
      else if quant any (geRewrite ord) (Func f a) b then Less
      else Unrelated
    lex_ext ord _ = error
    rpo :: ORDERING FUNC -> EXTENSION -> ORDERING EXPR
    rpo ord ext =
      let rpo' = \param -> case param of {
        (Var x, Var y)       -> if polyEq x y then Equal else Unrelated;
        (Var x, Func f a)    -> if occurs x (Func f a) then Less else Unrelated;
        (Func f a, Var x)    -> if occurs x (Func f a) then Greater else Unrelated;
        (Func f a, Func g b) -> case (ord (f, g)) of {
                                  Equal     -> ext (rpo') (Func f a, Func g b);
                                  Greater   -> if quant all (ltRewrite rpo') (Func f a) b then Greater
                                              else if quant any (geRewrite rpo') (Func f a) b then Less
                                              else Unrelated;
                                  Less      -> if quant all (ltRewrite rpo') (Func g b) a then Less
                                              else if quant any (geRewrite rpo') (Func g b) a then Greater
                                              else Unrelated;
                                  Unrelated -> Unrelated;
                                };
        _ -> error "error"
      } in
      rpo'
    item_cost (Item c e) = c
    mk_item :: (EXPR_PAIR -> NUM) -> CRIT_PAIR -> ITEM
    mk_item cfun eqn = Item (cfun eqn) eqn
    addby :: (a -> NUM) -> [a] -> [a] -> [a]
    addby f xs ys =
      let insert = \x -> \ls -> case ls of {
        [] -> [x];
        (y:ys) -> if (f x) <= (f y) then x:(y:ys) else y:(insert x ys)
      } in
      foldr insert ys xs
    add_agenda :: (EXPR_PAIR -> NUM) -> [CRIT_PAIR] -> AGENDA -> AGENDA
    add_agenda cfun eqns = addby item_cost (map (mk_item cfun) eqns)
    superpose :: EXPR -> EXPR -> [(PATH, SUBST)]
    superpose t u = sift [ lift (pair k) (unify t w) | (k, w) <- subterms u ]
    strict_super :: EXPR -> EXPR -> [(PATH, SUBST)]
    strict_super t (Func f a) = [ (i:k, s) | (i, u) <- (zip_lz_nl [0..] a), (k, s) <- superpose t u ]
    strict_super t _ = error
    mk_crit :: EQUATION -> EQUATION -> (PATH, SUBST) -> CRIT_PAIR
    mk_crit (Eqn n1 (l1, r1)) (Eqn n2 (l2, r2)) (k, s) = (sub (replace l2 k r1) s, sub r2 s)
    crit_pairs :: EQUATION -> EQUATION -> [CRIT_PAIR]
    crit_pairs e1 e2 =
      (map (mk_crit e1 e2) (superpose (lhs e1) (lhs e2))) ++ (map (mk_crit e2 e1) (strict_super (lhs e2) (lhs e1)))
    all_crit_pairs :: EQUATION -> [EQUATION] -> [CRIT_PAIR]
    all_crit_pairs eqn theory =
      let eqn' = stand_eqn "1" eqn in
      let eqn'' = stand_eqn "2" eqn in
      let theory'' = map (stand_eqn "2") theory in
      (map (mk_crit eqn' eqn'') (strict_super (lhs eqn') (lhs eqn''))) ++ (concat (map (crit_pairs eqn') theory''))
    knuth_bendix :: ORDERING EXPR -> [EXPR_PAIR] -> DNET
    knuth_bendix ord axs = knuth_bendix1 (ord, cost) axs
    knuth_bendix1 datums axs = process datums 1 [] empty_net (add_agenda (snd datums) axs [])
    process :: KB_DATA -> NUM -> [EQUATION] -> DNET -> AGENDA -> DNET
    process datums n thy net [] = net
    process datums n thy net ((Item w eqn) : todo) = process1 datums n thy net todo (preprocess net eqn)
    preprocess :: DNET -> CRIT_PAIR -> CRIT_PAIR
    preprocess net (lhs, rhs) = (simplify (super_reduce net) lhs, simplify (super_reduce net) rhs)
    process1 :: KB_DATA -> NUM -> [EQUATION] -> DNET -> AGENDA -> CRIT_PAIR -> DNET
    process1 datums n thy net todo (lhs, rhs) =
      let o = (fst datums) (lhs, rhs) in
      case o of
            Unrelated -> process datums n thy net (add_agenda (\dum -> 1000) [(lhs, rhs)] todo)
            Equal ->     process datums n thy net todo
            _ ->
              let eqn = case o of { Greater -> Eqn n (lhs, rhs); Less -> Eqn n (rhs, lhs) } in
              process2 datums (n+1) thy net todo eqn
    process2 :: KB_DATA -> NUM -> [EQUATION] -> DNET -> AGENDA -> EQUATION -> DNET
    process2 datums n thy net todo new_rule =
      case (split (reducible (reduce1 new_rule)) thy) of { (deleted, thy') ->
      let net' = add_eqn (delete_eqns (map eqno deleted) net) new_rule in
      let deletions = map eqpr deleted in
      let critical = all_crit_pairs new_rule thy' in
      let new_agenda = sift (map (resolve (super_reduce net')) (deletions ++ critical)) in
      let todo' = add_agenda (snd datums) new_agenda todo in
      process datums n (thy' ++ [new_rule]) net' todo' }
    resolve :: TACTIC -> CRIT_PAIR -> Maybe CRIT_PAIR
    resolve tac pr =
      let lhs' = simplify tac (fst pr) in
      let rhs' = simplify tac (snd pr) in
      if eqExpr lhs' rhs' then croak else succeed (lhs', rhs')
    reducible :: TACTIC -> EQUATION -> Bool
    reducible tac (Eqn n (lhs, rhs)) = (exists (tac lhs)) || (exists (tac rhs))
    split :: (a -> Bool) -> [a] -> ([a], [a])
    split p xs =
      let tmp = (zip (map p xs) xs) in
      ([ x | (b, x) <- tmp, b ], [ x | (b, x) <- tmp, not(b) ])
    rank "E" = 1
    rank "*" = 2
    rank "I" = 3
    rank _ = error
testRewrite_nofib n = all result (copy n ("I(a * b)", "I(b) * I(a)"))
testRewrite_nofib $ primId 50
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> after expansion >>>>>>>>>>
//│ testRewrite_nofib_lh_₁(primId⁰(50))
//│ def all_lh_₁(_lh_all_arg1⁵, _lh_all_arg2⁵) = case _lh_all_arg2⁵ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0⁵ _lh_all_LH_C_1⁵ => if _lh_all_arg1⁵(_lh_all_LH_C_0⁵) then all_lh_₁(_lh_all_arg1⁵, _lh_all_LH_C_1⁵) else [False]}
//│ def all_lh_₂(_lh_all_arg1⁴, _lh_all_arg2⁴) = case _lh_all_arg2⁴ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0⁴ _lh_all_LH_C_1⁴ => if _lh_all_arg1⁴(_lh_all_LH_C_0⁴) then all_lh_₂(_lh_all_arg1⁴, _lh_all_LH_C_1⁴) else [False]}
//│ def all_lh_₃(_lh_all_arg1³, _lh_all_arg2³) = case _lh_all_arg2³ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0³ _lh_all_LH_C_1³ => if _lh_all_arg1³(_lh_all_LH_C_0³) then all_lh_₃(_lh_all_arg1³, _lh_all_LH_C_1³) else [False]}
//│ def all_lh_₄(_lh_all_arg1², _lh_all_arg2²) = case _lh_all_arg2² of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0² _lh_all_LH_C_1² => if _lh_all_arg1²(_lh_all_LH_C_0²) then all_lh_₄(_lh_all_arg1², _lh_all_LH_C_1²) else [False]}
//│ def all_lh_₅(_lh_all_arg1¹, _lh_all_arg2¹) = case _lh_all_arg2¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0¹ _lh_all_LH_C_1¹ => if _lh_all_arg1¹(_lh_all_LH_C_0¹) then all_lh_₅(_lh_all_arg1¹, _lh_all_LH_C_1¹) else [False]}
//│ def all_lh_₆(_lh_all_arg1⁰, _lh_all_arg2⁰) = case _lh_all_arg2⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0⁰ _lh_all_LH_C_1⁰ => if _lh_all_arg1⁰(_lh_all_LH_C_0⁰) then all_lh_₆(_lh_all_arg1⁰, _lh_all_LH_C_1⁰) else [False]}
//│ def any_lh_₁(_lh_any_arg1⁴, _lh_any_arg2⁴) = case _lh_any_arg2⁴ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0⁴ _lh_any_LH_C_1⁴ => if _lh_any_arg1⁴(_lh_any_LH_C_0⁴) then [True] else any_lh_₁(_lh_any_arg1⁴, _lh_any_LH_C_1⁴)}
//│ def any_lh_₂(_lh_any_arg1³, _lh_any_arg2³) = case _lh_any_arg2³ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0³ _lh_any_LH_C_1³ => if _lh_any_arg1³(_lh_any_LH_C_0³) then [True] else any_lh_₂(_lh_any_arg1³, _lh_any_LH_C_1³)}
//│ def any_lh_₃(_lh_any_arg1², _lh_any_arg2²) = case _lh_any_arg2² of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0² _lh_any_LH_C_1² => if _lh_any_arg1²(_lh_any_LH_C_0²) then [True] else any_lh_₃(_lh_any_arg1², _lh_any_LH_C_1²)}
//│ def any_lh_₄(_lh_any_arg1¹, _lh_any_arg2¹) = case _lh_any_arg2¹ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0¹ _lh_any_LH_C_1¹ => if _lh_any_arg1¹(_lh_any_LH_C_0¹) then [True] else any_lh_₄(_lh_any_arg1¹, _lh_any_LH_C_1¹)}
//│ def any_lh_₅(_lh_any_arg1⁰, _lh_any_arg2⁰) = case _lh_any_arg2⁰ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0⁰ _lh_any_LH_C_1⁰ => if _lh_any_arg1⁰(_lh_any_LH_C_0⁰) then [True] else any_lh_₅(_lh_any_arg1⁰, _lh_any_LH_C_1⁰)}
//│ def apply_lh_₁(_lh_apply_arg1⁰, _lh_apply_arg2⁰) = getOrElse_lh_₂(assoc_lh_₁(_lh_apply_arg1⁰, _lh_apply_arg2⁰), [Var _lh_apply_arg2⁰])
//│ def assoc_lh_₁(_lh_assoc_arg1⁰, _lh_assoc_arg2⁰) = 
//│ 	let match_x⁰ = (fun uv⁰ -> 
//│ 		let _lh_matchIdent⁰ = uv⁰
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => maybeX_lh_₁(polyEq⁰(_lh_assoc_arg2⁰, _lh_assoc_LH_P2_0⁰), _lh_assoc_LH_P2_1⁰)})
//│ 	in first_ok_lh_₁(map_lh_₁₃(match_x⁰, _lh_assoc_arg1⁰))
//│ def atIndex_lh_₁(n², ls²³) = if (n² < 0) then error⁰ else case ls²³ of {
//│ 	LH_C h²⁹ t³⁷ => if (n² == 0) then h²⁹ else atIndex_lh_₁((n² - 1), t³⁷)
//│ 	| LH_N  => error⁰}
//│ def atIndex_lh_₂(n¹, ls¹³) = if (n¹ < 0) then error⁰ else case ls¹³ of {
//│ 	LH_C h¹⁴ t²² => if (n¹ == 0) then h¹⁴ else atIndex_lh_₂((n¹ - 1), t²²)
//│ 	| LH_N  => error⁰}
//│ def atIndex_lh_₃(n⁰, ls⁷) = if (n⁰ < 0) then error⁰ else case ls⁷ of {
//│ 	LH_C h⁶ t⁹ => if (n⁰ == 0) then h⁶ else atIndex_lh_₃((n⁰ - 1), t⁹)
//│ 	| LH_N  => error⁰}
//│ def box_lh_₁(_lh_box_arg1⁰) = [LH_C _lh_box_arg1⁰ [LH_N]]
//│ def comp_sub_lh_₁(_lh_comp_sub_arg1⁰, _lh_comp_sub_arg2⁰) = mappend_lh_₇(
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {
//│ 			LH_P2 _lh_comp_sub_LH_P2_0⁰ _lh_comp_sub_LH_P2_1⁰ => [LH_C [LH_P2 _lh_comp_sub_LH_P2_0⁰ sub_lh_₂(_lh_comp_sub_LH_P2_1⁰, _lh_comp_sub_arg1⁰)] _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 			| _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰(_lh_comp_sub_arg2⁰), _lh_comp_sub_arg1⁰)
//│ def concat_lh_₁(lss⁰) = case lss⁰ of {
//│ 	LH_C h¹⁶ t²⁴ => mappend_lh_₇(h¹⁶, concat_lh_₁(t²⁴))
//│ 	| LH_N  => [LH_N]}
//│ def copy_lh_₁(_lh_copy_arg1⁰, _lh_copy_arg2⁰) = if (_lh_copy_arg1⁰ <= 0) then [LH_N] else [LH_C _lh_copy_arg2⁰ copy_lh_₁((_lh_copy_arg1⁰ - 1), _lh_copy_arg2⁰)]
//│ def cost_lh_₁(_lh_cost_arg1⁰) = case _lh_cost_arg1⁰ of {
//│ 	LH_P2 _lh_cost_LH_P2_0⁰ _lh_cost_LH_P2_1⁰ => 
//│ 		let size⁰ = (fun _lh_size_arg1⁰ -> expr_fold_lh_₁((fun x¹¹ -> (fun a¹ -> (sum_lh_₁(a¹) + 1))), (fun dum² -> 0), _lh_size_arg1⁰))
//│ 		in (size⁰(_lh_cost_LH_P2_0⁰) + size⁰(_lh_cost_LH_P2_1⁰))}
//│ def croak_lh_₁ = [Nothing]
//│ def croak_lh_₂ = [Nothing]
//│ def croak_lh_₃ = [Nothing]
//│ def croak_lh_₄ = [Nothing]
//│ def cross_lh_₁(_lh_cross_arg1², _lh_cross_arg2², _lh_cross_arg3²) = case _lh_cross_arg3² of {
//│ 	LH_P2 _lh_cross_LH_P2_0² _lh_cross_LH_P2_1² => [LH_P2 _lh_cross_arg1²(_lh_cross_LH_P2_0²) _lh_cross_arg2²(_lh_cross_LH_P2_1²)]}
//│ def cross_lh_₂(_lh_cross_arg1¹, _lh_cross_arg2¹, _lh_cross_arg3¹) = case _lh_cross_arg3¹ of {
//│ 	LH_P2 _lh_cross_LH_P2_0¹ _lh_cross_LH_P2_1¹ => [LH_P2 _lh_cross_arg1¹(_lh_cross_LH_P2_0¹) _lh_cross_arg2¹(_lh_cross_LH_P2_1¹)]}
//│ def cross_lh_₃(_lh_cross_arg1⁰, _lh_cross_arg2⁰, _lh_cross_arg3⁰) = case _lh_cross_arg3⁰ of {
//│ 	LH_P2 _lh_cross_LH_P2_0⁰ _lh_cross_LH_P2_1⁰ => [LH_P2 _lh_cross_arg1⁰(_lh_cross_LH_P2_0⁰) _lh_cross_arg2⁰(_lh_cross_LH_P2_1⁰)]}
//│ def delete_eqns_lh_₁(_lh_delete_eqns_arg1⁰) = 
//│ 	let ok⁰ = (fun e⁰ -> not⁰(inList_lh_₁(eqno_lh_₁(e⁰), _lh_delete_eqns_arg1⁰)))
//│ 	in map_dnet_lh_₁(filter_lh_₁(ok⁰))
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1¹, _lh_dropWhile_arg2¹) = case _lh_dropWhile_arg2¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_dropWhile_LH_C_0¹ _lh_dropWhile_LH_C_1¹ => if _lh_dropWhile_arg1¹(_lh_dropWhile_LH_C_0¹) then dropWhile_lh_₁(_lh_dropWhile_arg1¹, _lh_dropWhile_LH_C_1¹) else [LH_C _lh_dropWhile_LH_C_0¹ _lh_dropWhile_LH_C_1¹]}
//│ def dropWhile_lh_₂(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₂(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]}
//│ def enumFrom_lh_₁(a²) = lazy⁰([LH_C a² enumFrom_lh_₁((a² + 1))])
//│ def eqExpr_lh_₁(_lh_eqExpr_arg1², _lh_eqExpr_arg2²) = case _lh_eqExpr_arg1² of {
//│ 	Func _lh_eqExpr_Func_0⁴ _lh_eqExpr_Func_1⁴ => case _lh_eqExpr_arg2² of {
//│ 		Func _lh_eqExpr_Func_0⁵ _lh_eqExpr_Func_1⁵ => (polyEq⁰(_lh_eqExpr_Func_0⁴, _lh_eqExpr_Func_0⁵) && eqListExpr_lh_₂(_lh_eqExpr_Func_1⁴, _lh_eqExpr_Func_1⁵))
//│ 		| _  => [False]}
//│ 	| Var _lh_eqExpr_Var_0⁴ => case _lh_eqExpr_arg2² of {
//│ 		Var _lh_eqExpr_Var_0⁵ => polyEq⁰(_lh_eqExpr_Var_0⁴, _lh_eqExpr_Var_0⁵)
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqExpr_lh_₂(_lh_eqExpr_arg1¹, _lh_eqExpr_arg2¹) = case _lh_eqExpr_arg1¹ of {
//│ 	Func _lh_eqExpr_Func_0² _lh_eqExpr_Func_1² => case _lh_eqExpr_arg2¹ of {
//│ 		Func _lh_eqExpr_Func_0³ _lh_eqExpr_Func_1³ => (polyEq⁰(_lh_eqExpr_Func_0², _lh_eqExpr_Func_0³) && eqListExpr_lh_₂(_lh_eqExpr_Func_1², _lh_eqExpr_Func_1³))
//│ 		| _  => [False]}
//│ 	| Var _lh_eqExpr_Var_0² => case _lh_eqExpr_arg2¹ of {
//│ 		Var _lh_eqExpr_Var_0³ => polyEq⁰(_lh_eqExpr_Var_0², _lh_eqExpr_Var_0³)
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqExpr_lh_₃(_lh_eqExpr_arg1⁰, _lh_eqExpr_arg2⁰) = case _lh_eqExpr_arg1⁰ of {
//│ 	Func _lh_eqExpr_Func_0⁰ _lh_eqExpr_Func_1⁰ => case _lh_eqExpr_arg2⁰ of {
//│ 		Func _lh_eqExpr_Func_0¹ _lh_eqExpr_Func_1¹ => (polyEq⁰(_lh_eqExpr_Func_0⁰, _lh_eqExpr_Func_0¹) && eqListExpr_lh_₁(_lh_eqExpr_Func_1⁰, _lh_eqExpr_Func_1¹))
//│ 		| _  => [False]}
//│ 	| Var _lh_eqExpr_Var_0⁰ => case _lh_eqExpr_arg2⁰ of {
//│ 		Var _lh_eqExpr_Var_0¹ => polyEq⁰(_lh_eqExpr_Var_0⁰, _lh_eqExpr_Var_0¹)
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqListExpr_lh_₁(_lh_eqListExpr_arg1¹, _lh_eqListExpr_arg2¹) = case _lh_eqListExpr_arg1¹ of {
//│ 	LH_N  => case _lh_eqListExpr_arg2¹ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| LH_C _lh_eqListExpr_LH_C_0² _lh_eqListExpr_LH_C_1² => case _lh_eqListExpr_arg2¹ of {
//│ 		LH_C _lh_eqListExpr_LH_C_0³ _lh_eqListExpr_LH_C_1³ => if eqExpr_lh_₃(_lh_eqListExpr_LH_C_0², _lh_eqListExpr_LH_C_0³) then eqListExpr_lh_₁(_lh_eqListExpr_LH_C_1², _lh_eqListExpr_LH_C_1³) else [False]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqListExpr_lh_₂(_lh_eqListExpr_arg1⁰, _lh_eqListExpr_arg2⁰) = case _lh_eqListExpr_arg1⁰ of {
//│ 	LH_N  => case _lh_eqListExpr_arg2⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| LH_C _lh_eqListExpr_LH_C_0⁰ _lh_eqListExpr_LH_C_1⁰ => case _lh_eqListExpr_arg2⁰ of {
//│ 		LH_C _lh_eqListExpr_LH_C_0¹ _lh_eqListExpr_LH_C_1¹ => if eqExpr_lh_₁(_lh_eqListExpr_LH_C_0⁰, _lh_eqListExpr_LH_C_0¹) then eqListExpr_lh_₂(_lh_eqListExpr_LH_C_1⁰, _lh_eqListExpr_LH_C_1¹) else [False]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqRewrite_lh_₁(_lh_eqRewrite_arg1⁰, _lh_eqRewrite_arg2⁰, _lh_eqRewrite_arg3⁰) = polyEq⁰(_lh_eqRewrite_arg1⁰([LH_P2 _lh_eqRewrite_arg2⁰ _lh_eqRewrite_arg3⁰]), [Equal])
//│ def eqno_lh_₁(_lh_eqno_arg1⁰) = case _lh_eqno_arg1⁰ of {
//│ 	Eqn _lh_eqno_Eqn_0⁰ _lh_eqno_Eqn_1⁰ => case _lh_eqno_Eqn_1⁰ of {
//│ 		LH_P2 _lh_eqno_LH_P2_0⁰ _lh_eqno_LH_P2_1⁰ => _lh_eqno_Eqn_0⁰}}
//│ def eqpr_lh_₁(_lh_eqpr_arg1⁰) = case _lh_eqpr_arg1⁰ of {
//│ 	Eqn _lh_eqpr_Eqn_0⁰ _lh_eqpr_Eqn_1⁰ => _lh_eqpr_Eqn_1⁰}
//│ def exists_lh_₁(_lh_exists_arg1¹) = case _lh_exists_arg1¹ of {
//│ 	Nothing  => [False]
//│ 	| _  => [True]}
//│ def exists_lh_₂(_lh_exists_arg1⁰) = case _lh_exists_arg1⁰ of {
//│ 	Nothing  => [False]
//│ 	| _  => [True]}
//│ def expr_fold_lh_₁(_lh_expr_fold_arg1⁰, _lh_expr_fold_arg2⁰, _lh_expr_fold_arg3⁰) = case _lh_expr_fold_arg3⁰ of {
//│ 	Var _lh_expr_fold_Var_0⁰ => _lh_expr_fold_arg2⁰(_lh_expr_fold_Var_0⁰)
//│ 	| Func _lh_expr_fold_Func_0⁰ _lh_expr_fold_Func_1⁰ => _lh_expr_fold_arg1⁰(_lh_expr_fold_Func_0⁰, map_lh_₁₃(expr_fold_lh_₁(_lh_expr_fold_arg1⁰, _lh_expr_fold_arg2⁰), _lh_expr_fold_Func_1⁰))}
//│ def filter_lh_₁(f⁰, ls¹) = case ls¹ of {
//│ 	LH_C h¹ t² => if f⁰(h¹) then [LH_C h¹ filter_lh_₁(f⁰, t²)] else filter_lh_₁(f⁰, t²)
//│ 	| LH_N  => [LH_N]}
//│ def first_ok_lh_₁(_lh_first_ok_arg1⁰) = foldr_lh_₂(orElse_lh_₁, [Nothing], _lh_first_ok_arg1⁰)
//│ def foldl_lh_₁(f¹, i⁰, ls³) = case ls³ of {
//│ 	LH_C h² t⁴ => foldl_lh_₁(f¹, f¹(i⁰, h²), t⁴)
//│ 	| LH_N  => i⁰}
//│ def foldr_lh_₁(f¹⁹, i², ls²⁰) = case ls²⁰ of {
//│ 	LH_C h²⁶ t³⁴ => f¹⁹(h²⁶, foldr_lh_₁(f¹⁹, i², t³⁴))
//│ 	| LH_N  => i²}
//│ def foldr_lh_₂(f⁸, i¹, ls⁹) = case ls⁹ of {
//│ 	LH_C h¹⁰ t¹⁵ => f⁸(h¹⁰, foldr_lh_₂(f⁸, i¹, t¹⁵))
//│ 	| LH_N  => i¹}
//│ def fst_lh_₁(_lh_fst_arg1³) = case _lh_fst_arg1³ of {
//│ 	LH_P2 _lh_fst_LH_P2_0³ _lh_fst_LH_P2_1³ => _lh_fst_LH_P2_0³}
//│ def fst_lh_₂(_lh_fst_arg1²) = case _lh_fst_arg1² of {
//│ 	LH_P2 _lh_fst_LH_P2_0² _lh_fst_LH_P2_1² => _lh_fst_LH_P2_0²}
//│ def fst_lh_₃(_lh_fst_arg1¹) = case _lh_fst_arg1¹ of {
//│ 	LH_P2 _lh_fst_LH_P2_0¹ _lh_fst_LH_P2_1¹ => _lh_fst_LH_P2_0¹}
//│ def fst_lh_₄(_lh_fst_arg1⁰) = case _lh_fst_arg1⁰ of {
//│ 	LH_P2 _lh_fst_LH_P2_0⁰ _lh_fst_LH_P2_1⁰ => _lh_fst_LH_P2_0⁰}
//│ def geRewrite_lh_₁(_lh_geRewrite_arg1³, _lh_geRewrite_arg2³, _lh_geRewrite_arg3³) = inList_lh_₁(_lh_geRewrite_arg1³([LH_P2 _lh_geRewrite_arg2³ _lh_geRewrite_arg3³]), [LH_C [Greater] [LH_C [Equal] [LH_N]]])
//│ def geRewrite_lh_₂(_lh_geRewrite_arg1², _lh_geRewrite_arg2², _lh_geRewrite_arg3²) = inList_lh_₁(_lh_geRewrite_arg1²([LH_P2 _lh_geRewrite_arg2² _lh_geRewrite_arg3²]), [LH_C [Greater] [LH_C [Equal] [LH_N]]])
//│ def geRewrite_lh_₃(_lh_geRewrite_arg1¹, _lh_geRewrite_arg2¹, _lh_geRewrite_arg3¹) = inList_lh_₁(_lh_geRewrite_arg1¹([LH_P2 _lh_geRewrite_arg2¹ _lh_geRewrite_arg3¹]), [LH_C [Greater] [LH_C [Equal] [LH_N]]])
//│ def geRewrite_lh_₄(_lh_geRewrite_arg1⁰, _lh_geRewrite_arg2⁰, _lh_geRewrite_arg3⁰) = inList_lh_₁(_lh_geRewrite_arg1⁰([LH_P2 _lh_geRewrite_arg2⁰ _lh_geRewrite_arg3⁰]), [LH_C [Greater] [LH_C [Equal] [LH_N]]])
//│ def getOrElse_lh_₁(_lh_getOrElse_arg1¹, _lh_getOrElse_arg2¹) = case _lh_getOrElse_arg1¹ of {
//│ 	Just _lh_getOrElse_Just_0¹ => _lh_getOrElse_Just_0¹
//│ 	| Nothing  => _lh_getOrElse_arg2¹}
//│ def getOrElse_lh_₂(_lh_getOrElse_arg1⁰, _lh_getOrElse_arg2⁰) = case _lh_getOrElse_arg1⁰ of {
//│ 	Just _lh_getOrElse_Just_0⁰ => _lh_getOrElse_Just_0⁰
//│ 	| Nothing  => _lh_getOrElse_arg2⁰}
//│ def gtRewrite_lh_₁(_lh_gtRewrite_arg1⁰, _lh_gtRewrite_arg2⁰, _lh_gtRewrite_arg3⁰) = polyEq⁰(_lh_gtRewrite_arg1⁰([LH_P2 _lh_gtRewrite_arg2⁰ _lh_gtRewrite_arg3⁰]), [Greater])
//│ def inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_arg2⁰) = case _lh_inList_arg2⁰ of {
//│ 	LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰)
//│ 	| LH_N  => [False]}
//│ def inside_lh_₁(_lh_inside_arg1⁰, _lh_inside_arg2⁰) = first_ok_lh_₁(
//│ 	let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => case _lh_listcomp_fun_ls_h⁵ of {
//│ 			LH_P2 _lh_inside_LH_P2_0⁰ _lh_inside_LH_P2_1⁰ => [LH_C lift_lh_₁₀(replace_lh_₂(_lh_inside_arg2⁰, _lh_inside_LH_P2_0⁰), _lh_inside_arg1⁰(_lh_inside_LH_P2_1⁰)) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)]
//│ 			| _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁵(subterms_lh_₂(_lh_inside_arg2⁰)))
//│ def lhs_lh_₁(_lh_lhs_arg1⁶) = case _lh_lhs_arg1⁶ of {
//│ 	Eqn _lh_lhs_Eqn_0⁶ _lh_lhs_Eqn_1⁶ => case _lh_lhs_Eqn_1⁶ of {
//│ 		LH_P2 _lh_lhs_LH_P2_0⁶ _lh_lhs_LH_P2_1⁶ => _lh_lhs_LH_P2_0⁶}}
//│ def lhs_lh_₂(_lh_lhs_arg1⁵) = case _lh_lhs_arg1⁵ of {
//│ 	Eqn _lh_lhs_Eqn_0⁵ _lh_lhs_Eqn_1⁵ => case _lh_lhs_Eqn_1⁵ of {
//│ 		LH_P2 _lh_lhs_LH_P2_0⁵ _lh_lhs_LH_P2_1⁵ => _lh_lhs_LH_P2_0⁵}}
//│ def lhs_lh_₃(_lh_lhs_arg1⁴) = case _lh_lhs_arg1⁴ of {
//│ 	Eqn _lh_lhs_Eqn_0⁴ _lh_lhs_Eqn_1⁴ => case _lh_lhs_Eqn_1⁴ of {
//│ 		LH_P2 _lh_lhs_LH_P2_0⁴ _lh_lhs_LH_P2_1⁴ => _lh_lhs_LH_P2_0⁴}}
//│ def lhs_lh_₄(_lh_lhs_arg1³) = case _lh_lhs_arg1³ of {
//│ 	Eqn _lh_lhs_Eqn_0³ _lh_lhs_Eqn_1³ => case _lh_lhs_Eqn_1³ of {
//│ 		LH_P2 _lh_lhs_LH_P2_0³ _lh_lhs_LH_P2_1³ => _lh_lhs_LH_P2_0³}}
//│ def lhs_lh_₅(_lh_lhs_arg1²) = case _lh_lhs_arg1² of {
//│ 	Eqn _lh_lhs_Eqn_0² _lh_lhs_Eqn_1² => case _lh_lhs_Eqn_1² of {
//│ 		LH_P2 _lh_lhs_LH_P2_0² _lh_lhs_LH_P2_1² => _lh_lhs_LH_P2_0²}}
//│ def lhs_lh_₆(_lh_lhs_arg1¹) = case _lh_lhs_arg1¹ of {
//│ 	Eqn _lh_lhs_Eqn_0¹ _lh_lhs_Eqn_1¹ => case _lh_lhs_Eqn_1¹ of {
//│ 		LH_P2 _lh_lhs_LH_P2_0¹ _lh_lhs_LH_P2_1¹ => _lh_lhs_LH_P2_0¹}}
//│ def lhs_lh_₇(_lh_lhs_arg1⁰) = case _lh_lhs_arg1⁰ of {
//│ 	Eqn _lh_lhs_Eqn_0⁰ _lh_lhs_Eqn_1⁰ => case _lh_lhs_Eqn_1⁰ of {
//│ 		LH_P2 _lh_lhs_LH_P2_0⁰ _lh_lhs_LH_P2_1⁰ => _lh_lhs_LH_P2_0⁰}}
//│ def lift_lh_₁(_lh_lift_arg1⁹, _lh_lift_arg2⁹) = case _lh_lift_arg2⁹ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁹ => [Just _lh_lift_arg1⁹(_lh_lift_Just_0⁹)]}
//│ def lift_lh_₁₀(_lh_lift_arg1⁰, _lh_lift_arg2⁰) = case _lh_lift_arg2⁰ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁰ => [Just _lh_lift_arg1⁰(_lh_lift_Just_0⁰)]}
//│ def lift_lh_₂(_lh_lift_arg1⁸, _lh_lift_arg2⁸) = case _lh_lift_arg2⁸ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁸ => [Just _lh_lift_arg1⁸(_lh_lift_Just_0⁸)]}
//│ def lift_lh_₃(_lh_lift_arg1⁷, _lh_lift_arg2⁷) = case _lh_lift_arg2⁷ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁷ => [Just _lh_lift_arg1⁷(_lh_lift_Just_0⁷)]}
//│ def lift_lh_₄(_lh_lift_arg1⁶, _lh_lift_arg2⁶) = case _lh_lift_arg2⁶ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁶ => [Just _lh_lift_arg1⁶(_lh_lift_Just_0⁶)]}
//│ def lift_lh_₅(_lh_lift_arg1⁵, _lh_lift_arg2⁵) = case _lh_lift_arg2⁵ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁵ => [Just _lh_lift_arg1⁵(_lh_lift_Just_0⁵)]}
//│ def lift_lh_₆(_lh_lift_arg1⁴, _lh_lift_arg2⁴) = case _lh_lift_arg2⁴ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁴ => [Just _lh_lift_arg1⁴(_lh_lift_Just_0⁴)]}
//│ def lift_lh_₇(_lh_lift_arg1³, _lh_lift_arg2³) = case _lh_lift_arg2³ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0³ => [Just _lh_lift_arg1³(_lh_lift_Just_0³)]}
//│ def lift_lh_₈(_lh_lift_arg1², _lh_lift_arg2²) = case _lh_lift_arg2² of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0² => [Just _lh_lift_arg1²(_lh_lift_Just_0²)]}
//│ def lift_lh_₉(_lh_lift_arg1¹, _lh_lift_arg2¹) = case _lh_lift_arg2¹ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0¹ => [Just _lh_lift_arg1¹(_lh_lift_Just_0¹)]}
//│ def listify_lh_₁(_lh_listify_arg1⁰) = getOrElse_lh_₂(lift_lh_₁₀(box_lh_₁, _lh_listify_arg1⁰), [LH_N])
//│ def ltRewrite_lh_₁(_lh_ltRewrite_arg1³, _lh_ltRewrite_arg2³, _lh_ltRewrite_arg3³) = polyEq⁰(_lh_ltRewrite_arg1³([LH_P2 _lh_ltRewrite_arg2³ _lh_ltRewrite_arg3³]), [Less])
//│ def ltRewrite_lh_₂(_lh_ltRewrite_arg1², _lh_ltRewrite_arg2², _lh_ltRewrite_arg3²) = polyEq⁰(_lh_ltRewrite_arg1²([LH_P2 _lh_ltRewrite_arg2² _lh_ltRewrite_arg3²]), [Less])
//│ def ltRewrite_lh_₃(_lh_ltRewrite_arg1¹, _lh_ltRewrite_arg2¹, _lh_ltRewrite_arg3¹) = polyEq⁰(_lh_ltRewrite_arg1¹([LH_P2 _lh_ltRewrite_arg2¹ _lh_ltRewrite_arg3¹]), [Less])
//│ def ltRewrite_lh_₄(_lh_ltRewrite_arg1⁰, _lh_ltRewrite_arg2⁰, _lh_ltRewrite_arg3⁰) = polyEq⁰(_lh_ltRewrite_arg1⁰([LH_P2 _lh_ltRewrite_arg2⁰ _lh_ltRewrite_arg3⁰]), [Less])
//│ def map_dnet_lh_₁(_lh_map_dnet_arg1⁰, _lh_map_dnet_arg2⁰) = case _lh_map_dnet_arg2⁰ of {
//│ 	Switch _lh_map_dnet_Switch_0⁰ _lh_map_dnet_Switch_1⁰ => [Switch map_lh_₁₃(cross_lh_₃((fun x⁰ -> x⁰), map_dnet_lh_₁(_lh_map_dnet_arg1⁰)), _lh_map_dnet_Switch_0⁰) map_dnet_lh_₁(_lh_map_dnet_arg1⁰, _lh_map_dnet_Switch_1⁰)]
//│ 	| Return _lh_map_dnet_Return_0⁰ => [Return _lh_map_dnet_arg1⁰(_lh_map_dnet_Return_0⁰)]}
//│ def map_lh_₁(f²¹, ls²²) = case ls²² of {
//│ 	LH_C h²⁸ t³⁶ => [LH_C f²¹(h²⁸) map_lh_₁(f²¹, t³⁶)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₀(f⁷, ls⁸) = case ls⁸ of {
//│ 	LH_C h⁸ t¹³ => [LH_C f⁷(h⁸) map_lh_₁₀(f⁷, t¹³)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₁(f⁵, ls⁶) = case ls⁶ of {
//│ 	LH_C h⁵ t⁸ => [LH_C f⁵(h⁵) map_lh_₁₁(f⁵, t⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₂(f⁴, ls⁵) = case ls⁵ of {
//│ 	LH_C h⁴ t⁷ => [LH_C f⁴(h⁴) map_lh_₁₂(f⁴, t⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₃(f³, ls⁴) = case ls⁴ of {
//│ 	LH_C h³ t⁶ => [LH_C f³(h³) map_lh_₁₃(f³, t⁶)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f²⁰, ls²¹) = case ls²¹ of {
//│ 	LH_C h²⁷ t³⁵ => [LH_C f²⁰(h²⁷) map_lh_₂(f²⁰, t³⁵)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f¹⁸, ls¹⁹) = case ls¹⁹ of {
//│ 	LH_C h²⁵ t³³ => [LH_C f¹⁸(h²⁵) map_lh_₃(f¹⁸, t³³)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f¹⁷, ls¹⁷) = case ls¹⁷ of {
//│ 	LH_C h²³ t³¹ => [LH_C f¹⁷(h²³) map_lh_₄(f¹⁷, t³¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f¹⁶, ls¹⁶) = case ls¹⁶ of {
//│ 	LH_C h²² t³⁰ => [LH_C f¹⁶(h²²) map_lh_₅(f¹⁶, t³⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f¹⁵, ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h²¹ t²⁹ => [LH_C f¹⁵(h²¹) map_lh_₆(f¹⁵, t²⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₇(f¹⁴, ls¹²) = case ls¹² of {
//│ 	LH_C h¹³ t²¹ => [LH_C f¹⁴(h¹³) map_lh_₇(f¹⁴, t²¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₈(f¹¹, ls¹¹) = case ls¹¹ of {
//│ 	LH_C h¹² t¹⁸ => [LH_C f¹¹(h¹²) map_lh_₈(f¹¹, t¹⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₉(f¹⁰, ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h¹¹ t¹⁷ => [LH_C f¹⁰(h¹¹) map_lh_₉(f¹⁰, t¹⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs⁸, ys⁸) = case xs⁸ of {
//│ 	LH_C h²⁰ t²⁸ => [LH_C h²⁰ mappend_lh_₁(t²⁸, ys⁸)]
//│ 	| LH_N  => ys⁸}
//│ def mappend_lh_₂(xs⁷, ys⁷) = case xs⁷ of {
//│ 	LH_C h¹⁹ t²⁷ => [LH_C h¹⁹ mappend_lh_₂(t²⁷, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₃(xs⁶, ys⁶) = case xs⁶ of {
//│ 	LH_C h¹⁸ t²⁶ => [LH_C h¹⁸ mappend_lh_₃(t²⁶, ys⁶)]
//│ 	| LH_N  => ys⁶}
//│ def mappend_lh_₄(xs⁵, ys⁵) = case xs⁵ of {
//│ 	LH_C h¹⁷ t²⁵ => [LH_C h¹⁷ mappend_lh_₄(t²⁵, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mappend_lh_₅(xs³, ys³) = case xs³ of {
//│ 	LH_C h¹⁵ t²³ => [LH_C h¹⁵ mappend_lh_₅(t²³, ys³)]
//│ 	| LH_N  => ys³}
//│ def mappend_lh_₆(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h⁹ t¹⁴ => [LH_C h⁹ mappend_lh_₆(t¹⁴, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₇(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁷ t¹² => [LH_C h⁷ mappend_lh_₇(t¹², ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def match'_lh_₁(_lh_match'_arg1⁰, _lh_match'_arg2⁰) = case _lh_match'_arg2⁰ of {
//│ 	LH_P2 _lh_match'_LH_P2_0⁰ _lh_match'_LH_P2_1⁰ => case _lh_match'_LH_P2_0⁰ of {
//│ 		Var _lh_match'_Var_0⁰ => 
//│ 			let u⁰ = assoc_lh_₁(_lh_match'_arg1⁰, _lh_match'_Var_0⁰)
//│ 			in if not⁰(exists_lh_₂(u⁰)) then succeed_lh_₄([LH_C [LH_P2 _lh_match'_Var_0⁰ _lh_match'_LH_P2_1⁰] _lh_match'_arg1⁰]) else if eqExpr_lh_₃(the_lh_₂(u⁰), _lh_match'_LH_P2_1⁰) then succeed_lh_₄(_lh_match'_arg1⁰) else croak_lh_₄
//│ 		| Func _lh_match'_Func_0⁰ _lh_match'_Func_1⁰ => case _lh_match'_LH_P2_1⁰ of {
//│ 			Func _lh_match'_Func_0¹ _lh_match'_Func_1¹ => if polyEq⁰(_lh_match'_Func_0⁰, _lh_match'_Func_0¹) then prop_fold_lh_₁(match'_lh_₁, _lh_match'_arg1⁰, zip_lh_₁(_lh_match'_Func_1⁰, _lh_match'_Func_1¹)) else croak_lh_₄
//│ 			| Var _lh_match'_Var_0¹ => croak_lh_₄
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def match_lh_₁(_lh_match_arg1⁰, _lh_match_arg2⁰) = match'_lh_₁([LH_N], [LH_P2 _lh_match_arg1⁰ _lh_match_arg2⁰])
//│ def maybeX_lh_₁(_lh_maybeX_arg1⁰, _lh_maybeX_arg2⁰) = if _lh_maybeX_arg1⁰ then [Just _lh_maybeX_arg2⁰] else [Nothing]
//│ def modify_lh_₁(_lh_modify_arg1⁰, _lh_modify_arg2⁰, _lh_modify_arg3⁰) = case _lh_modify_arg1⁰ of {
//│ 	LH_C _lh_modify_LH_C_0⁰ _lh_modify_LH_C_1⁰ => case _lh_modify_arg2⁰ of {
//│ 		0  => [LH_C _lh_modify_arg3⁰(_lh_modify_LH_C_0⁰) _lh_modify_LH_C_1⁰]
//│ 		| _  => [LH_C _lh_modify_LH_C_0⁰ modify_lh_₁(_lh_modify_LH_C_1⁰, (_lh_modify_arg2⁰ - 1), _lh_modify_arg3⁰)]}
//│ 	| _  => error⁰}
//│ def occurs_lh_₁(_lh_occurs_arg1¹) = expr_fold_lh_₁((fun dum³ -> or_lh_₁), (fun x¹⁵ -> polyEq⁰(x¹⁵, _lh_occurs_arg1¹)))
//│ def occurs_lh_₂(_lh_occurs_arg1⁰) = expr_fold_lh_₁((fun dum¹ -> or_lh_₁), (fun x⁸ -> polyEq⁰(x⁸, _lh_occurs_arg1⁰)))
//│ def orElseMap_lh_₁(_lh_orElseMap_arg1³, _lh_orElseMap_arg2³, _lh_orElseMap_arg3³) = orElse_lh_₁(_lh_orElseMap_arg1³(_lh_orElseMap_arg3³), _lh_orElseMap_arg2³(_lh_orElseMap_arg3³))
//│ def orElseMap_lh_₂(_lh_orElseMap_arg1², _lh_orElseMap_arg2², _lh_orElseMap_arg3²) = orElse_lh_₁(_lh_orElseMap_arg1²(_lh_orElseMap_arg3²), _lh_orElseMap_arg2²(_lh_orElseMap_arg3²))
//│ def orElseMap_lh_₃(_lh_orElseMap_arg1¹, _lh_orElseMap_arg2¹, _lh_orElseMap_arg3¹) = orElse_lh_₁(_lh_orElseMap_arg1¹(_lh_orElseMap_arg3¹), _lh_orElseMap_arg2¹(_lh_orElseMap_arg3¹))
//│ def orElseMap_lh_₄(_lh_orElseMap_arg1⁰, _lh_orElseMap_arg2⁰, _lh_orElseMap_arg3⁰) = orElse_lh_₁(_lh_orElseMap_arg1⁰(_lh_orElseMap_arg3⁰), _lh_orElseMap_arg2⁰(_lh_orElseMap_arg3⁰))
//│ def orElse_lh_₁(_lh_orElse_arg1⁰, _lh_orElse_arg2⁰) = case _lh_orElse_arg1⁰ of {
//│ 	Nothing  => _lh_orElse_arg2⁰
//│ 	| _  => _lh_orElse_arg1⁰}
//│ def or_lh_₁(_lh_or_arg1⁰) = case _lh_or_arg1⁰ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_or_LH_C_0⁰ _lh_or_LH_C_1⁰ => if _lh_or_LH_C_0⁰ then [True] else or_lh_₁(_lh_or_LH_C_1⁰)}
//│ def pair_lh_₁(_lh_pair_arg1¹, _lh_pair_arg2¹) = [LH_P2 _lh_pair_arg1¹ _lh_pair_arg2¹]
//│ def pair_lh_₂(_lh_pair_arg1⁰, _lh_pair_arg2⁰) = [LH_P2 _lh_pair_arg1⁰ _lh_pair_arg2⁰]
//│ def prop2_lh_₁(_lh_prop2_arg1⁰, _lh_prop2_arg2⁰, _lh_prop2_arg3⁰) = case _lh_prop2_arg2⁰ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_prop2_Just_0⁰ => _lh_prop2_arg1⁰(_lh_prop2_Just_0⁰, _lh_prop2_arg3⁰)}
//│ def prop_fold_lh_₁(_lh_prop_fold_arg1⁰, _lh_prop_fold_arg2⁰, _lh_prop_fold_arg3⁰) = case _lh_prop_fold_arg3⁰ of {
//│ 	LH_N  => [Just _lh_prop_fold_arg2⁰]
//│ 	| LH_C _lh_prop_fold_LH_C_0⁰ _lh_prop_fold_LH_C_1⁰ => prop2_lh_₁(prop_fold_lh_₁(_lh_prop_fold_arg1⁰), _lh_prop_fold_arg1⁰(_lh_prop_fold_arg2⁰, _lh_prop_fold_LH_C_0⁰), _lh_prop_fold_LH_C_1⁰)}
//│ def quant_lh_₁(_lh_quant_arg1⁹, _lh_quant_arg2⁹, _lh_quant_arg3⁹, _lh_quant_arg4⁹) = 
//│ 	let p⁹ = (fun x¹⁶ -> _lh_quant_arg2⁹(x¹⁶, _lh_quant_arg3⁹))
//│ 	in _lh_quant_arg1⁹(p⁹, _lh_quant_arg4⁹)
//│ def quant_lh_₁₀(_lh_quant_arg1⁰, _lh_quant_arg2⁰, _lh_quant_arg3⁰, _lh_quant_arg4⁰) = 
//│ 	let p⁰ = (fun x² -> _lh_quant_arg2⁰(x², _lh_quant_arg3⁰))
//│ 	in _lh_quant_arg1⁰(p⁰, _lh_quant_arg4⁰)
//│ def quant_lh_₂(_lh_quant_arg1⁸, _lh_quant_arg2⁸, _lh_quant_arg3⁸, _lh_quant_arg4⁸) = 
//│ 	let p⁸ = (fun x¹⁴ -> _lh_quant_arg2⁸(x¹⁴, _lh_quant_arg3⁸))
//│ 	in _lh_quant_arg1⁸(p⁸, _lh_quant_arg4⁸)
//│ def quant_lh_₃(_lh_quant_arg1⁷, _lh_quant_arg2⁷, _lh_quant_arg3⁷, _lh_quant_arg4⁷) = 
//│ 	let p⁷ = (fun x¹³ -> _lh_quant_arg2⁷(x¹³, _lh_quant_arg3⁷))
//│ 	in _lh_quant_arg1⁷(p⁷, _lh_quant_arg4⁷)
//│ def quant_lh_₄(_lh_quant_arg1⁶, _lh_quant_arg2⁶, _lh_quant_arg3⁶, _lh_quant_arg4⁶) = 
//│ 	let p⁶ = (fun x¹⁰ -> _lh_quant_arg2⁶(x¹⁰, _lh_quant_arg3⁶))
//│ 	in _lh_quant_arg1⁶(p⁶, _lh_quant_arg4⁶)
//│ def quant_lh_₅(_lh_quant_arg1⁵, _lh_quant_arg2⁵, _lh_quant_arg3⁵, _lh_quant_arg4⁵) = 
//│ 	let p⁵ = (fun x⁹ -> _lh_quant_arg2⁵(x⁹, _lh_quant_arg3⁵))
//│ 	in _lh_quant_arg1⁵(p⁵, _lh_quant_arg4⁵)
//│ def quant_lh_₆(_lh_quant_arg1⁴, _lh_quant_arg2⁴, _lh_quant_arg3⁴, _lh_quant_arg4⁴) = 
//│ 	let p⁴ = (fun x⁷ -> _lh_quant_arg2⁴(x⁷, _lh_quant_arg3⁴))
//│ 	in _lh_quant_arg1⁴(p⁴, _lh_quant_arg4⁴)
//│ def quant_lh_₇(_lh_quant_arg1³, _lh_quant_arg2³, _lh_quant_arg3³, _lh_quant_arg4³) = 
//│ 	let p³ = (fun x⁶ -> _lh_quant_arg2³(x⁶, _lh_quant_arg3³))
//│ 	in _lh_quant_arg1³(p³, _lh_quant_arg4³)
//│ def quant_lh_₈(_lh_quant_arg1², _lh_quant_arg2², _lh_quant_arg3², _lh_quant_arg4²) = 
//│ 	let p² = (fun x⁵ -> _lh_quant_arg2²(x⁵, _lh_quant_arg3²))
//│ 	in _lh_quant_arg1²(p², _lh_quant_arg4²)
//│ def quant_lh_₉(_lh_quant_arg1¹, _lh_quant_arg2¹, _lh_quant_arg3¹, _lh_quant_arg4¹) = 
//│ 	let p¹ = (fun x³ -> _lh_quant_arg2¹(x³, _lh_quant_arg3¹))
//│ 	in _lh_quant_arg1¹(p¹, _lh_quant_arg4¹)
//│ def reduce1_lh_₁(_lh_reduce1_arg1⁰) = inside_lh_₁(rewrite_lh_₁(_lh_reduce1_arg1⁰))
//│ def replace_lh_₁(_lh_replace_arg1¹, _lh_replace_arg2¹, _lh_replace_arg3¹) = case _lh_replace_arg2¹ of {
//│ 	LH_N  => _lh_replace_arg3¹
//│ 	| _  => case _lh_replace_arg1¹ of {
//│ 		Func _lh_replace_Func_0¹ _lh_replace_Func_1¹ => case _lh_replace_arg2¹ of {
//│ 			LH_C _lh_replace_LH_C_0¹ _lh_replace_LH_C_1¹ => [Func _lh_replace_Func_0¹ modify_lh_₁(_lh_replace_Func_1¹, _lh_replace_LH_C_0¹, (fun t¹¹ -> replace_lh_₁(t¹¹, _lh_replace_LH_C_1¹, _lh_replace_arg3¹)))]
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}}
//│ def replace_lh_₂(_lh_replace_arg1⁰, _lh_replace_arg2⁰, _lh_replace_arg3⁰) = case _lh_replace_arg2⁰ of {
//│ 	LH_N  => _lh_replace_arg3⁰
//│ 	| _  => case _lh_replace_arg1⁰ of {
//│ 		Func _lh_replace_Func_0⁰ _lh_replace_Func_1⁰ => case _lh_replace_arg2⁰ of {
//│ 			LH_C _lh_replace_LH_C_0⁰ _lh_replace_LH_C_1⁰ => [Func _lh_replace_Func_0⁰ modify_lh_₁(_lh_replace_Func_1⁰, _lh_replace_LH_C_0⁰, (fun t³ -> replace_lh_₂(t³, _lh_replace_LH_C_1⁰, _lh_replace_arg3⁰)))]
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}}
//│ def result_lh_₁(_lh_result_arg1⁰) = case _lh_result_arg1⁰ of {
//│ 	LH_P2 _lh_result_LH_P2_0⁰ _lh_result_LH_P2_1⁰ => 
//│ 		let multi⁰ = (fun _lh_multi_arg1⁰ -> (fun _lh_multi_arg2⁰ -> case _lh_multi_arg2⁰ of {
//│ 				LH_P2 _lh_multi_LH_P2_0⁰ _lh_multi_LH_P2_1⁰ => 
//│ 					let _lh_matchIdent² = rem_eq⁰(eqRewrite_lh_₁(_lh_multi_arg1⁰), [LH_P2 _lh_multi_LH_P2_0⁰ _lh_multi_LH_P2_1⁰])
//│ 					in case _lh_matchIdent² of {
//│ 						LH_P2 _lh_multi_LH_P2_0¹ _lh_multi_LH_P2_1¹ => if dominates⁰(_lh_multi_arg1⁰, _lh_multi_LH_P2_0¹, _lh_multi_LH_P2_1¹) then [Greater] else if dominates⁰(_lh_multi_arg1⁰, _lh_multi_LH_P2_1¹, _lh_multi_LH_P2_0¹) then [Less] else [Unrelated]}}))
//│ 		and rank_order⁰ = (fun _lh_rank_order_arg1⁰ -> (fun _lh_rank_order_arg2⁰ -> case _lh_rank_order_arg2⁰ of {
//│ 				LH_P2 _lh_rank_order_LH_P2_0⁰ _lh_rank_order_LH_P2_1⁰ => num_order⁰([LH_P2 _lh_rank_order_arg1⁰(_lh_rank_order_LH_P2_0⁰) _lh_rank_order_arg1⁰(_lh_rank_order_LH_P2_1⁰)])}))
//│ 		and superpose⁰ = (fun _lh_superpose_arg1⁰ -> (fun _lh_superpose_arg2⁰ -> sift_lh_₁(
//│ 				let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 					LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => case _lh_listcomp_fun_ls_h⁶ of {
//│ 						LH_P2 _lh_superpose_LH_P2_0⁰ _lh_superpose_LH_P2_1⁰ => [LH_C lift_lh_₈(pair_lh_₂(_lh_superpose_LH_P2_0⁰), unify_lh_₁(_lh_superpose_arg1⁰, _lh_superpose_LH_P2_1⁰)) _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)]
//│ 						| _  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)}
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun⁶(subterms_lh_₁(_lh_superpose_arg2⁰)))))
//│ 		and delete⁰ = (fun _lh_delete_arg1⁰ -> (fun _lh_delete_arg2⁰ -> (fun _lh_delete_arg3⁰ -> case _lh_delete_arg3⁰ of {
//│ 				LH_N  => croak_lh_₄
//│ 				| LH_C _lh_delete_LH_C_0⁰ _lh_delete_LH_C_1⁰ => if _lh_delete_arg1⁰(_lh_delete_arg2⁰, _lh_delete_LH_C_0⁰) then succeed_lh_₁(_lh_delete_LH_C_1⁰) else lift_lh_₇((fun x¹⁷ -> [LH_C _lh_delete_LH_C_0⁰ x¹⁷]), delete⁰(_lh_delete_arg1⁰, _lh_delete_arg2⁰, _lh_delete_LH_C_1⁰))})))
//│ 		and rem_eq⁰ = (fun _lh_rem_eq_arg1⁰ -> (fun _lh_rem_eq_arg2⁰ -> case _lh_rem_eq_arg2⁰ of {
//│ 				LH_P2 _lh_rem_eq_LH_P2_0⁰ _lh_rem_eq_LH_P2_1⁰ => case _lh_rem_eq_LH_P2_0⁰ of {
//│ 					LH_N  => [LH_P2 [LH_N] _lh_rem_eq_LH_P2_1⁰]
//│ 					| LH_C _lh_rem_eq_LH_C_0⁰ _lh_rem_eq_LH_C_1⁰ => 
//│ 						let add_x⁰ = (fun xsys⁰ -> 
//│ 							let _lh_matchIdent³ = xsys⁰
//│ 							in case _lh_matchIdent³ of {
//│ 								LH_P2 _lh_rem_eq_LH_P2_0¹ _lh_rem_eq_LH_P2_1¹ => [LH_P2 [LH_C _lh_rem_eq_LH_C_0⁰ _lh_rem_eq_LH_P2_0¹] _lh_rem_eq_LH_P2_1¹]})
//│ 						in getOrElse_lh_₁(lift_lh_₃((fun _lh_funcomp_x³ -> rem_eq⁰(_lh_rem_eq_arg1⁰, pair_lh_₁(_lh_rem_eq_LH_C_1⁰, _lh_funcomp_x³))), delete⁰(_lh_rem_eq_arg1⁰, _lh_rem_eq_LH_C_0⁰, _lh_rem_eq_LH_P2_1⁰)), add_x⁰(rem_eq⁰(_lh_rem_eq_arg1⁰, [LH_P2 _lh_rem_eq_LH_C_1⁰ _lh_rem_eq_LH_P2_1⁰])))}}))
//│ 		and q_eqn⁰ = (fun _lh_q_eqn_arg1⁰ -> case _lh_q_eqn_arg1⁰ of {
//│ 				LH_C _lh_q_eqn_LH_C_0⁰ _lh_q_eqn_LH_C_1⁰ => case _lh_q_eqn_LH_C_1⁰ of {
//│ 					LH_C _lh_q_eqn_LH_C_0¹ _lh_q_eqn_LH_C_1¹ => case _lh_q_eqn_LH_C_1¹ of {
//│ 						LH_C _lh_q_eqn_LH_C_0² _lh_q_eqn_LH_C_1² => case _lh_q_eqn_LH_C_1² of {
//│ 							LH_N  => [List [LH_C _lh_q_eqn_LH_C_0⁰ [LH_C _lh_q_eqn_LH_C_0² [LH_N]]]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 		and parse_eqn⁰ = (fun _lh_parse_eqn_arg1⁰ -> 
//│ 				let _lh_matchIdent⁴ = fst_lh_₃(the_lh_₂(p_eqn⁰(_lh_parse_eqn_arg1⁰)))
//│ 				in case _lh_matchIdent⁴ of {
//│ 					List _lh_parse_eqn_List_0⁰ => case _lh_parse_eqn_List_0⁰ of {
//│ 						LH_C _lh_parse_eqn_LH_C_0⁰ _lh_parse_eqn_LH_C_1⁰ => case _lh_parse_eqn_LH_C_0⁰ of {
//│ 							Expr _lh_parse_eqn_Expr_0⁰ => case _lh_parse_eqn_LH_C_1⁰ of {
//│ 								LH_C _lh_parse_eqn_LH_C_0¹ _lh_parse_eqn_LH_C_1¹ => case _lh_parse_eqn_LH_C_0¹ of {
//│ 									Expr _lh_parse_eqn_Expr_0¹ => case _lh_parse_eqn_LH_C_1¹ of {
//│ 										LH_N  => [LH_P2 _lh_parse_eqn_Expr_0⁰ _lh_parse_eqn_Expr_0¹]
//│ 										| _  => error⁰}
//│ 									| _  => error⁰}
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰})
//│ 		and addby⁰ = (fun _lh_addby_arg1⁰ -> (fun _lh_addby_arg2⁰ -> (fun _lh_addby_arg3⁰ -> 
//│ 				let insert⁰ = (fun x¹⁸ -> (fun ls²⁴ -> 
//│ 					let _lh_matchIdent⁵ = ls²⁴
//│ 					in case _lh_matchIdent⁵ of {
//│ 						LH_N  => [LH_C x¹⁸ [LH_N]]
//│ 						| LH_C _lh_addby_LH_C_0⁰ _lh_addby_LH_C_1⁰ => if (_lh_addby_arg1⁰(x¹⁸) <= _lh_addby_arg1⁰(_lh_addby_LH_C_0⁰)) then [LH_C x¹⁸ [LH_C _lh_addby_LH_C_0⁰ _lh_addby_LH_C_1⁰]] else [LH_C _lh_addby_LH_C_0⁰ insert⁰(x¹⁸, _lh_addby_LH_C_1⁰)]}))
//│ 				in foldr_lh_₁(insert⁰, _lh_addby_arg3⁰, _lh_addby_arg2⁰))))
//│ 		and seq2Lzq⁰ = (fun _lh_seq2Lzq_arg1⁰ -> (fun _lh_seq2Lzq_arg2⁰ -> (fun _lh_seq2Lzq_arg3⁰ -> 
//│ 				let g⁰ = (fun xs⁹ -> 
//│ 					let _lh_matchIdent⁶ = xs⁹
//│ 					in case _lh_matchIdent⁶ of {
//│ 						LH_P2 _lh_seq2Lzq_LH_P2_0⁰ _lh_seq2Lzq_LH_P2_1⁰ => lift_lh_₆(cross_lh_₁(_lh_seq2Lzq_arg1⁰(_lh_seq2Lzq_LH_P2_0⁰), (fun x¹⁹ -> x¹⁹)), force⁰(_lh_seq2Lzq_arg3⁰, _lh_seq2Lzq_LH_P2_1⁰))})
//│ 				in (fun _lh_funcomp_x⁴ -> (fun _lh_funcomp_x⁵ -> squash_lh_₂(lift_lh_₅(g⁰, _lh_funcomp_x⁵)))(_lh_seq2Lzq_arg2⁰(_lh_funcomp_x⁴))))))
//│ 		and find_assoc⁰ = (fun _lh_find_assoc_arg1⁰ -> (fun _lh_find_assoc_arg2⁰ -> (fun _lh_find_assoc_arg3⁰ -> case _lh_find_assoc_arg1⁰ of {
//│ 				Afunc _lh_find_assoc_Afunc_0⁰ => getOrElse_lh_₂(lift_lh_₁(find'⁰(_lh_find_assoc_arg2⁰), assoc_lh_₁(_lh_find_assoc_arg3⁰, _lh_find_assoc_Afunc_0⁰)), [LH_N])
//│ 				| Avar  => [LH_N]})))
//│ 		and rpo⁰ = (fun _lh_rpo_arg1⁰ -> (fun _lh_rpo_arg2⁰ -> 
//│ 				let rpo'⁰ = (fun param⁰ -> 
//│ 					let _lh_matchIdent⁷ = param⁰
//│ 					in case _lh_matchIdent⁷ of {
//│ 						LH_P2 _lh_rpo_LH_P2_0⁰ _lh_rpo_LH_P2_1⁰ => case _lh_rpo_LH_P2_0⁰ of {
//│ 							Var _lh_rpo_Var_0⁰ => case _lh_rpo_LH_P2_1⁰ of {
//│ 								Var _lh_rpo_Var_0¹ => if polyEq⁰(_lh_rpo_Var_0⁰, _lh_rpo_Var_0¹) then [Equal] else [Unrelated]
//│ 								| Func _lh_rpo_Func_0⁰ _lh_rpo_Func_1⁰ => if occurs_lh_₁(_lh_rpo_Var_0⁰, [Func _lh_rpo_Func_0⁰ _lh_rpo_Func_1⁰]) then [Less] else [Unrelated]
//│ 								| _  => error⁰([LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]])}
//│ 							| Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹ => case _lh_rpo_LH_P2_1⁰ of {
//│ 								Var _lh_rpo_Var_0² => if occurs_lh_₂(_lh_rpo_Var_0², [Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹]) then [Greater] else [Unrelated]
//│ 								| Func _lh_rpo_Func_0² _lh_rpo_Func_1² => 
//│ 									let _lh_matchIdent⁸ = _lh_rpo_arg1⁰([LH_P2 _lh_rpo_Func_0¹ _lh_rpo_Func_0²])
//│ 									in case _lh_matchIdent⁸ of {
//│ 										Equal  => _lh_rpo_arg2⁰(rpo'⁰, [LH_P2 [Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹] [Func _lh_rpo_Func_0² _lh_rpo_Func_1²]])
//│ 										| Greater  => if quant_lh_₂(all_lh_₅, ltRewrite_lh_₁(rpo'⁰), [Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹], _lh_rpo_Func_1²) then [Greater] else if quant_lh_₁(any_lh_₅, geRewrite_lh_₃(rpo'⁰), [Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹], _lh_rpo_Func_1²) then [Less] else [Unrelated]
//│ 										| Less  => if quant_lh_₈(all_lh_₂, ltRewrite_lh_₃(rpo'⁰), [Func _lh_rpo_Func_0² _lh_rpo_Func_1²], _lh_rpo_Func_1¹) then [Less] else if quant_lh_₅(any_lh_₂, geRewrite_lh_₁(rpo'⁰), [Func _lh_rpo_Func_0² _lh_rpo_Func_1²], _lh_rpo_Func_1¹) then [Greater] else [Unrelated]
//│ 										| Unrelated  => [Unrelated]}
//│ 								| _  => error⁰([LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]])}
//│ 							| _  => error⁰([LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]])}
//│ 						| _  => error⁰([LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]])})
//│ 				in rpo'⁰))
//│ 		and split⁰ = (fun _lh_split_arg1⁰ -> (fun _lh_split_arg2⁰ -> 
//│ 				let tmp⁰ = zip_lh_₁(map_lh_₁₁(_lh_split_arg1⁰, _lh_split_arg2⁰), _lh_split_arg2⁰)
//│ 				in [LH_P2 
//│ 					let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 						LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => case _lh_listcomp_fun_ls_h⁷ of {
//│ 							LH_P2 _lh_split_LH_P2_0⁰ _lh_split_LH_P2_1⁰ => if _lh_split_LH_P2_0⁰ then [LH_C _lh_split_LH_P2_1⁰ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)
//│ 							| _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)}
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun⁷(tmp⁰) 
//│ 					let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {
//│ 						LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => case _lh_listcomp_fun_ls_h⁸ of {
//│ 							LH_P2 _lh_split_LH_P2_0¹ _lh_split_LH_P2_1¹ => if not⁰(_lh_split_LH_P2_0¹) then [LH_C _lh_split_LH_P2_1¹ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)
//│ 							| _  => _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)}
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun⁸(tmp⁰)]))
//│ 		and build⁰ = (fun _lh_build_arg1⁰ -> (fun _lh_build_arg2⁰ -> (fun _lh_funcomp_x⁶ -> lift_lh_₉(cross_lh_₃(_lh_build_arg1⁰, (fun x²⁰ -> x²⁰)), _lh_build_arg2⁰(_lh_funcomp_x⁶)))))
//│ 		and process1⁰ = (fun _lh_process1_arg1⁰ -> (fun _lh_process1_arg2⁰ -> (fun _lh_process1_arg3⁰ -> (fun _lh_process1_arg4⁰ -> (fun _lh_process1_arg5⁰ -> (fun _lh_process1_arg6⁰ -> case _lh_process1_arg6⁰ of {
//│ 				LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰ => 
//│ 					let o⁰ = fst_lh_₂(_lh_process1_arg1⁰, [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰])
//│ 					in let _lh_matchIdent⁹ = o⁰
//│ 					in case _lh_matchIdent⁹ of {
//│ 						Unrelated  => process⁰(_lh_process1_arg1⁰, _lh_process1_arg2⁰, _lh_process1_arg3⁰, _lh_process1_arg4⁰, add_agenda⁰((fun dum⁴ -> 1000), [LH_C [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰] [LH_N]], _lh_process1_arg5⁰))
//│ 						| Equal  => process⁰(_lh_process1_arg1⁰, _lh_process1_arg2⁰, _lh_process1_arg3⁰, _lh_process1_arg4⁰, _lh_process1_arg5⁰)
//│ 						| _  => 
//│ 							let eqn⁰ = 	
//│ 								let _lh_matchIdent¹⁰ = o⁰
//│ 								in case _lh_matchIdent¹⁰ of {
//│ 									Greater  => [Eqn _lh_process1_arg2⁰ [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰]]
//│ 									| Less  => [Eqn _lh_process1_arg2⁰ [LH_P2 _lh_process1_LH_P2_1⁰ _lh_process1_LH_P2_0⁰]]}
//│ 							in process2⁰(_lh_process1_arg1⁰, (_lh_process1_arg2⁰ + 1), _lh_process1_arg3⁰, _lh_process1_arg4⁰, _lh_process1_arg5⁰, eqn⁰)}}))))))
//│ 		and p_op⁰ = (fun _lh_p_op_arg1⁰ -> sp⁰(string_of⁰(opsym⁰), _lh_p_op_arg1⁰))
//│ 		and p_prim⁰ = (fun _lh_p_prim_arg1⁰ -> orElseMap_lh_₁(p_name⁰, seQ⁰((fun x²¹ -> atIndex_lh_₂(1, x²¹)), [LH_C look_for⁰('(') [LH_C p_expr⁰ [LH_C look_for⁰(')') [LH_N]]]]), _lh_p_prim_arg1⁰))
//│ 		and reducible⁰ = (fun _lh_reducible_arg1⁰ -> (fun _lh_reducible_arg2⁰ -> case _lh_reducible_arg2⁰ of {
//│ 				Eqn _lh_reducible_Eqn_0⁰ _lh_reducible_Eqn_1⁰ => case _lh_reducible_Eqn_1⁰ of {
//│ 					LH_P2 _lh_reducible_LH_P2_0⁰ _lh_reducible_LH_P2_1⁰ => (exists_lh_₂(_lh_reducible_arg1⁰(_lh_reducible_LH_P2_0⁰)) || exists_lh_₁(_lh_reducible_arg1⁰(_lh_reducible_LH_P2_1⁰)))}}))
//│ 		and mk_list⁰ = (fun _lh_mk_list_arg1⁰ -> (fun _lh_mk_list_arg2⁰ -> case _lh_mk_list_arg2⁰ of {
//│ 				List _lh_mk_list_List_0⁰ => _lh_mk_list_arg1⁰(_lh_mk_list_List_0⁰)
//│ 				| _  => error⁰}))
//│ 		and lexico⁰ = (fun _lh_lexico_arg1⁰ -> (fun _lh_lexico_arg2⁰ -> case _lh_lexico_arg2⁰ of {
//│ 				LH_P2 _lh_lexico_LH_P2_0⁰ _lh_lexico_LH_P2_1⁰ => case _lh_lexico_LH_P2_0⁰ of {
//│ 					LH_N  => case _lh_lexico_LH_P2_1⁰ of {
//│ 						LH_N  => [Equal]
//│ 						| LH_C _lh_lexico_LH_C_0⁰ _lh_lexico_LH_C_1⁰ => [Less]}
//│ 					| LH_C _lh_lexico_LH_C_0¹ _lh_lexico_LH_C_1¹ => case _lh_lexico_LH_P2_1⁰ of {
//│ 						LH_N  => [Greater]
//│ 						| LH_C _lh_lexico_LH_C_0² _lh_lexico_LH_C_1² => lex_combine⁰(_lh_lexico_arg1⁰([LH_P2 _lh_lexico_LH_C_0¹ _lh_lexico_LH_C_0²]), lexico⁰(_lh_lexico_arg1⁰, [LH_P2 _lh_lexico_LH_C_1¹ _lh_lexico_LH_C_1²]))}}}))
//│ 		and find⁰ = (fun _lh_find_arg1⁰ -> (fun _lh_find_arg2⁰ -> find'⁰(g_init⁰(_lh_find_arg1⁰), _lh_find_arg2⁰)))
//│ 		and rank⁰ = (fun _lh_rank_arg1⁰ -> case _lh_rank_arg1⁰ of {
//│ 				LH_C _lh_rank_LH_C_0⁰ _lh_rank_LH_C_1⁰ => case _lh_rank_LH_C_0⁰ of {
//│ 					'E'  => case _lh_rank_LH_C_1⁰ of {
//│ 						LH_N  => 1
//│ 						| _  => error⁰}
//│ 					| '*'  => case _lh_rank_LH_C_1⁰ of {
//│ 						LH_N  => 2
//│ 						| _  => error⁰}
//│ 					| 'I'  => case _lh_rank_LH_C_1⁰ of {
//│ 						LH_N  => 3
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 		and is_switch⁰ = (fun _lh_is_switch_arg1⁰ -> case _lh_is_switch_arg1⁰ of {
//│ 				Switch _lh_is_switch_Switch_0⁰ _lh_is_switch_Switch_1⁰ => [True]
//│ 				| Return _lh_is_switch_Return_0⁰ => [False]})
//│ 		and q_func⁰ = (fun _lh_q_func_arg1⁰ -> case _lh_q_func_arg1⁰ of {
//│ 				LH_C _lh_q_func_LH_C_0⁰ _lh_q_func_LH_C_1⁰ => case _lh_q_func_LH_C_0⁰ of {
//│ 					MkString _lh_q_func_MkString_0⁰ => case _lh_q_func_LH_C_1⁰ of {
//│ 						LH_C _lh_q_func_LH_C_0¹ _lh_q_func_LH_C_1¹ => case _lh_q_func_LH_C_1¹ of {
//│ 							LH_C _lh_q_func_LH_C_0² _lh_q_func_LH_C_1² => case _lh_q_func_LH_C_0² of {
//│ 								List _lh_q_func_List_0⁰ => case _lh_q_func_LH_C_1² of {
//│ 									LH_C _lh_q_func_LH_C_0³ _lh_q_func_LH_C_1³ => case _lh_q_func_LH_C_1³ of {
//│ 										LH_N  => [Expr [Func _lh_q_func_MkString_0⁰ map_lh_₁₀(unExpr⁰, _lh_q_func_List_0⁰)]]
//│ 										| _  => error⁰}
//│ 									| _  => error⁰}
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 		and knuth_bendix⁰ = (fun _lh_knuth_bendix_arg1⁰ -> (fun _lh_knuth_bendix_arg2⁰ -> knuth_bendix1⁰([LH_P2 _lh_knuth_bendix_arg1⁰ cost_lh_₁], _lh_knuth_bendix_arg2⁰)))
//│ 		and add_agenda⁰ = (fun _lh_add_agenda_arg1⁰ -> (fun _lh_add_agenda_arg2⁰ -> addby⁰(item_cost⁰, map_lh_₁₂(mk_item⁰(_lh_add_agenda_arg1⁰), _lh_add_agenda_arg2⁰))))
//│ 		and g_init⁰ = (fun _lh_g_init_arg1⁰ -> [LH_C _lh_g_init_arg1⁰ [LH_N]])
//│ 		and mk_dnet⁰ = (fun _lh_mk_dnet_arg1⁰ -> foldl_lh_₁(add_eqn⁰, empty_net⁰, _lh_mk_dnet_arg1⁰))
//│ 		and p_name⁰ = (fun _lh_p_name_arg1⁰ -> build⁰(q_name⁰, p_ident⁰, _lh_p_name_arg1⁰))
//│ 		and q_op⁰ = (fun _lh_q_op_arg1⁰ -> case _lh_q_op_arg1⁰ of {
//│ 				LH_C _lh_q_op_LH_C_0⁰ _lh_q_op_LH_C_1⁰ => case _lh_q_op_LH_C_0⁰ of {
//│ 					Expr _lh_q_op_Expr_0⁰ => case _lh_q_op_LH_C_1⁰ of {
//│ 						LH_C _lh_q_op_LH_C_0¹ _lh_q_op_LH_C_1¹ => case _lh_q_op_LH_C_0¹ of {
//│ 							MkString _lh_q_op_MkString_0⁰ => case _lh_q_op_LH_C_1¹ of {
//│ 								LH_C _lh_q_op_LH_C_0² _lh_q_op_LH_C_1² => case _lh_q_op_LH_C_0² of {
//│ 									Expr _lh_q_op_Expr_0¹ => case _lh_q_op_LH_C_1² of {
//│ 										LH_N  => [Expr [Func _lh_q_op_MkString_0⁰ [LH_C _lh_q_op_Expr_0⁰ [LH_C _lh_q_op_Expr_0¹ [LH_N]]]]]
//│ 										| _  => error⁰}
//│ 									| _  => error⁰}
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 		and unExpr⁰ = (fun _lh_unExpr_arg1⁰ -> case _lh_unExpr_arg1⁰ of {
//│ 				Expr _lh_unExpr_Expr_0⁰ => _lh_unExpr_Expr_0⁰
//│ 				| _  => error⁰})
//│ 		and opsym⁰ = (fun _lh_opsym_arg1⁰ -> (fun x²² -> inList_lh_₁(x²², [LH_C '*' [LH_C '+' [LH_C '%' [LH_C '@' [LH_C '-' [LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]]]]]]))(_lh_opsym_arg1⁰))
//│ 		and resolve⁰ = (fun _lh_resolve_arg1⁰ -> (fun _lh_resolve_arg2⁰ -> 
//│ 				let lhs'⁰ = simplify_lh_₁(_lh_resolve_arg1⁰, fst_lh_₄(_lh_resolve_arg2⁰))
//│ 				in let rhs'⁰ = simplify_lh_₅(_lh_resolve_arg1⁰, snd_lh_₂(_lh_resolve_arg2⁰))
//│ 				in if eqExpr_lh_₂(lhs'⁰, rhs'⁰) then croak_lh_₂ else succeed_lh_₃([LH_P2 lhs'⁰ rhs'⁰])))
//│ 		and p_term⁰ = (fun _lh_p_term_arg1⁰ -> orElseMap_lh_₄(seQ⁰(q_func⁰, [LH_C p_ident⁰ [LH_C look_for⁰('(') [LH_C list_of⁰(p_expr⁰, ',') [LH_C look_for⁰(')') [LH_N]]]]]), p_prim⁰, _lh_p_term_arg1⁰))
//│ 		and add_eqn⁰ = (fun _lh_add_eqn_arg1⁰ -> (fun _lh_add_eqn_arg2⁰ -> thread⁰(preorder⁰(g_init⁰(lhs_lh_₁(_lh_add_eqn_arg2⁰))), _lh_add_eqn_arg2⁰, _lh_add_eqn_arg1⁰)))
//│ 		and thread⁰ = (fun _lh_thread_arg1⁰ -> (fun _lh_thread_arg2⁰ -> (fun _lh_thread_arg3⁰ -> case _lh_thread_arg1⁰ of {
//│ 				LH_C _lh_thread_LH_C_0⁰ _lh_thread_LH_C_1⁰ => case _lh_thread_LH_C_0⁰ of {
//│ 					Afunc _lh_thread_Afunc_0⁰ => case _lh_thread_arg3⁰ of {
//│ 						Switch _lh_thread_Switch_0⁰ _lh_thread_Switch_1⁰ => [Switch update_alist_lh_₁(_lh_thread_Afunc_0⁰, thread⁰(_lh_thread_LH_C_1⁰, _lh_thread_arg2⁰), empty_net⁰, _lh_thread_Switch_0⁰) _lh_thread_Switch_1⁰]
//│ 						| Return _lh_thread_Return_0⁰ => thread⁰([LH_C [Afunc _lh_thread_Afunc_0⁰] _lh_thread_LH_C_1⁰], _lh_thread_arg2⁰, [Switch [LH_N] [Return _lh_thread_Return_0⁰]])}
//│ 					| Avar  => case _lh_thread_arg3⁰ of {
//│ 						Switch _lh_thread_Switch_0¹ _lh_thread_Switch_1¹ => [Switch _lh_thread_Switch_0¹ thread⁰(_lh_thread_LH_C_1⁰, _lh_thread_arg2⁰, _lh_thread_Switch_1¹)]
//│ 						| Return _lh_thread_Return_0¹ => 
//│ 							let d'⁰ = thread⁰(_lh_thread_LH_C_1⁰, _lh_thread_arg2⁰, [Return _lh_thread_Return_0¹])
//│ 							in if is_switch⁰(d'⁰) then [Switch [LH_N] d'⁰] else d'⁰}}
//│ 				| LH_N  => case _lh_thread_arg3⁰ of {
//│ 					Return _lh_thread_Return_0² => [Return [LH_C _lh_thread_arg2⁰ _lh_thread_Return_0²]]}})))
//│ 		and item_cost⁰ = (fun _lh_item_cost_arg1⁰ -> case _lh_item_cost_arg1⁰ of {
//│ 				Item _lh_item_cost_Item_0⁰ _lh_item_cost_Item_1⁰ => _lh_item_cost_Item_0⁰})
//│ 		and g_rest⁰ = (fun _lh_g_rest_arg1⁰ -> case _lh_g_rest_arg1⁰ of {
//│ 				LH_C _lh_g_rest_LH_C_0⁰ _lh_g_rest_LH_C_1⁰ => case _lh_g_rest_LH_C_0⁰ of {
//│ 					Func _lh_g_rest_Func_0⁰ _lh_g_rest_Func_1⁰ => mappend_lh_₂(_lh_g_rest_Func_1⁰, _lh_g_rest_LH_C_1⁰)
//│ 					| Var _lh_g_rest_Var_0⁰ => _lh_g_rest_LH_C_1⁰
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 		and lex_ext⁰ = (fun _lh_lex_ext_arg1⁰ -> (fun _lh_lex_ext_arg2⁰ -> case _lh_lex_ext_arg2⁰ of {
//│ 				LH_P2 _lh_lex_ext_LH_P2_0⁰ _lh_lex_ext_LH_P2_1⁰ => case _lh_lex_ext_LH_P2_0⁰ of {
//│ 					Func _lh_lex_ext_Func_0⁰ _lh_lex_ext_Func_1⁰ => case _lh_lex_ext_LH_P2_1⁰ of {
//│ 						Func _lh_lex_ext_Func_0¹ _lh_lex_ext_Func_1¹ => 
//│ 							let estimate⁰ = lexico⁰(_lh_lex_ext_arg1⁰, [LH_P2 _lh_lex_ext_Func_1⁰ _lh_lex_ext_Func_1¹])
//│ 							in let confirm⁰ = (fun x²³ -> 
//│ 								let _lh_matchIdent¹¹ = x²³
//│ 								in case _lh_matchIdent¹¹ of {
//│ 									Equal  => [True]
//│ 									| Greater  => quant_lh_₇(all_lh_₄, ltRewrite_lh_₄(_lh_lex_ext_arg1⁰), [Func _lh_lex_ext_Func_0⁰ _lh_lex_ext_Func_1⁰], _lh_lex_ext_Func_1¹)
//│ 									| Less  => quant_lh_₁₀(all_lh_₆, ltRewrite_lh_₂(_lh_lex_ext_arg1⁰), [Func _lh_lex_ext_Func_0¹ _lh_lex_ext_Func_1¹], _lh_lex_ext_Func_1⁰)
//│ 									| Unrelated  => [False]})
//│ 							in if confirm⁰(estimate⁰) then estimate⁰ else if quant_lh_₄(any_lh_₄, geRewrite_lh_₂(_lh_lex_ext_arg1⁰), [Func _lh_lex_ext_Func_0¹ _lh_lex_ext_Func_1¹], _lh_lex_ext_Func_1⁰) then [Greater] else if quant_lh_₆(any_lh_₃, geRewrite_lh_₄(_lh_lex_ext_arg1⁰), [Func _lh_lex_ext_Func_0⁰ _lh_lex_ext_Func_1⁰], _lh_lex_ext_Func_1¹) then [Less] else [Unrelated]
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}))
//│ 		and empty⁰ = (fun _lh_empty_arg1⁰ -> succeed_lh_₄([LH_P2 [List [LH_N]] _lh_empty_arg1⁰]))
//│ 		and g_skip⁰ = (fun _lh_g_skip_arg1⁰ -> tail_lh_₁(_lh_g_skip_arg1⁰))
//│ 		and super_reduce⁰ = (fun _lh_super_reduce_arg1⁰ -> inside_lh_₁(dnet_reduce⁰(_lh_super_reduce_arg1⁰)))
//│ 		and unString⁰ = (fun _lh_unString_arg1⁰ -> case _lh_unString_arg1⁰ of {
//│ 				MkString _lh_unString_MkString_0⁰ => _lh_unString_MkString_0⁰
//│ 				| _  => error⁰})
//│ 		and look_for⁰ = (fun _lh_look_for_arg1⁰ -> sp⁰(pchar⁰((fun x²⁴ -> polyEq⁰(x²⁴, _lh_look_for_arg1⁰)))))
//│ 		and mk_crit⁰ = (fun _lh_mk_crit_arg1⁰ -> (fun _lh_mk_crit_arg2⁰ -> (fun _lh_mk_crit_arg3⁰ -> case _lh_mk_crit_arg1⁰ of {
//│ 				Eqn _lh_mk_crit_Eqn_0⁰ _lh_mk_crit_Eqn_1⁰ => case _lh_mk_crit_Eqn_1⁰ of {
//│ 					LH_P2 _lh_mk_crit_LH_P2_0⁰ _lh_mk_crit_LH_P2_1⁰ => case _lh_mk_crit_arg2⁰ of {
//│ 						Eqn _lh_mk_crit_Eqn_0¹ _lh_mk_crit_Eqn_1¹ => case _lh_mk_crit_Eqn_1¹ of {
//│ 							LH_P2 _lh_mk_crit_LH_P2_0¹ _lh_mk_crit_LH_P2_1¹ => case _lh_mk_crit_arg3⁰ of {
//│ 								LH_P2 _lh_mk_crit_LH_P2_0² _lh_mk_crit_LH_P2_1² => [LH_P2 sub_lh_₁(replace_lh_₁(_lh_mk_crit_LH_P2_0¹, _lh_mk_crit_LH_P2_0², _lh_mk_crit_LH_P2_1⁰), _lh_mk_crit_LH_P2_1²) sub_lh_₂(_lh_mk_crit_LH_P2_1¹, _lh_mk_crit_LH_P2_1²)]}}}}})))
//│ 		and list_of⁰ = (fun _lh_list_of_arg1⁰ -> (fun _lh_list_of_arg2⁰ -> 
//│ 				let p'⁰ = lazy⁰(seq2⁰(mk_cons⁰, _lh_list_of_arg1⁰, orElseMap_lh_₃(seq2Lzq⁰((fun x²⁵ -> (fun y³ -> y³)), look_for⁰(_lh_list_of_arg2⁰), p'⁰), empty⁰)))
//│ 				in force⁰(p'⁰)))
//│ 		and seQ⁰ = (fun _lh_seQ_arg1⁰ -> (fun _lh_seQ_arg2⁰ -> build⁰(mk_list⁰(_lh_seQ_arg1⁰), foldr_lh_₂(seq2⁰(mk_cons⁰), empty⁰, _lh_seQ_arg2⁰))))
//│ 		and q_name⁰ = (fun _lh_q_name_arg1⁰ -> case _lh_q_name_arg1⁰ of {
//│ 				MkString _lh_q_name_MkString_0⁰ => if ((int_of_char⁰(atIndex_lh_₁(0, _lh_q_name_MkString_0⁰)) >= int_of_char⁰('a')) && (int_of_char⁰(atIndex_lh_₃(0, _lh_q_name_MkString_0⁰)) <= int_of_char⁰('z'))) then [Expr [Var _lh_q_name_MkString_0⁰]] else [Expr [Func _lh_q_name_MkString_0⁰ [LH_N]]]
//│ 				| _  => error⁰})
//│ 		and lex_combine⁰ = (fun _lh_lex_combine_arg1⁰ -> (fun _lh_lex_combine_arg2⁰ -> case _lh_lex_combine_arg1⁰ of {
//│ 				Equal  => _lh_lex_combine_arg2⁰
//│ 				| Greater  => [Greater]
//│ 				| Less  => [Less]
//│ 				| Unrelated  => [Unrelated]}))
//│ 		and num_order⁰ = (fun _lh_num_order_arg1⁰ -> case _lh_num_order_arg1⁰ of {
//│ 				LH_P2 _lh_num_order_LH_P2_0⁰ _lh_num_order_LH_P2_1⁰ => if (_lh_num_order_LH_P2_0⁰ > _lh_num_order_LH_P2_1⁰) then [Greater] else if (_lh_num_order_LH_P2_0⁰ < _lh_num_order_LH_P2_1⁰) then [Less] else [Equal]})
//│ 		and pchar⁰ = (fun _lh_pchar_arg1⁰ -> (fun _lh_pchar_arg2⁰ -> case _lh_pchar_arg2⁰ of {
//│ 				LH_N  => croak_lh_₃
//│ 				| LH_C _lh_pchar_LH_C_0⁰ _lh_pchar_LH_C_1⁰ => if _lh_pchar_arg1⁰(_lh_pchar_LH_C_0⁰) then succeed_lh_₂([LH_P2 [MkString [LH_C _lh_pchar_LH_C_0⁰ [LH_N]]] _lh_pchar_LH_C_1⁰]) else croak_lh_₁}))
//│ 		and crit_pairs⁰ = (fun _lh_crit_pairs_arg1⁰ -> (fun _lh_crit_pairs_arg2⁰ -> mappend_lh_₄(map_lh_₈(mk_crit⁰(_lh_crit_pairs_arg1⁰, _lh_crit_pairs_arg2⁰), superpose⁰(lhs_lh_₇(_lh_crit_pairs_arg1⁰), lhs_lh_₂(_lh_crit_pairs_arg2⁰))), map_lh_₃(mk_crit⁰(_lh_crit_pairs_arg2⁰, _lh_crit_pairs_arg1⁰), strict_super⁰(lhs_lh_₃(_lh_crit_pairs_arg2⁰), lhs_lh_₆(_lh_crit_pairs_arg1⁰))))))
//│ 		and strict_super⁰ = (fun _lh_strict_super_arg1⁰ -> (fun _lh_strict_super_arg2⁰ -> case _lh_strict_super_arg2⁰ of {
//│ 				Func _lh_strict_super_Func_0⁰ _lh_strict_super_Func_1⁰ => 
//│ 					let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {
//│ 						LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => case _lh_listcomp_fun_ls_h⁹ of {
//│ 							LH_P2 _lh_strict_super_LH_P2_0⁰ _lh_strict_super_LH_P2_1⁰ => 
//│ 								let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {
//│ 									LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => case _lh_listcomp_fun_ls_h¹⁰ of {
//│ 										LH_P2 _lh_strict_super_LH_P2_0¹ _lh_strict_super_LH_P2_1¹ => [LH_C [LH_P2 [LH_C _lh_strict_super_LH_P2_0⁰ _lh_strict_super_LH_P2_0¹] _lh_strict_super_LH_P2_1¹] _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)]
//│ 										| _  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)}
//│ 									| LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ 								in _lh_listcomp_fun¹⁰(superpose⁰(_lh_strict_super_arg1⁰, _lh_strict_super_LH_P2_1⁰))
//│ 							| _  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)}
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun⁹(zip_lz_nl_lh_₁(enumFrom_lh_₁(0), _lh_strict_super_Func_1⁰))
//│ 				| _  => error⁰}))
//│ 		and dominates⁰ = (fun _lh_dominates_arg1⁰ -> quant_lh_₃(all_lh_₃, quant_lh_₉(any_lh_₁, gtRewrite_lh_₁(_lh_dominates_arg1⁰))))
//│ 		and knuth_bendix1⁰ = (fun _lh_knuth_bendix1_arg1⁰ -> (fun _lh_knuth_bendix1_arg2⁰ -> process⁰(_lh_knuth_bendix1_arg1⁰, 1, [LH_N], empty_net⁰, add_agenda⁰(snd_lh_₁(_lh_knuth_bendix1_arg1⁰), _lh_knuth_bendix1_arg2⁰, [LH_N]))))
//│ 		and mk_item⁰ = (fun _lh_mk_item_arg1⁰ -> (fun _lh_mk_item_arg2⁰ -> [Item _lh_mk_item_arg1⁰(_lh_mk_item_arg2⁰) _lh_mk_item_arg2⁰]))
//│ 		and sp⁰ = (fun _lh_sp_arg1⁰ -> (fun _lh_funcomp_x⁷ -> _lh_sp_arg1⁰(dropWhile_lh_₂((fun x²⁶ -> polyEq⁰(x²⁶, ' ')), _lh_funcomp_x⁷))))
//│ 		and p_eqn⁰ = (fun _lh_p_eqn_arg1⁰ -> seQ⁰(q_eqn⁰, [LH_C p_expr⁰ [LH_C look_for⁰('=') [LH_C p_expr⁰ [LH_N]]]], _lh_p_eqn_arg1⁰))
//│ 		and p_ident⁰ = (fun _lh_p_ident_arg1⁰ -> sp⁰(string_of⁰(alphanum⁰), _lh_p_ident_arg1⁰))
//│ 		and process2⁰ = (fun _lh_process2_arg1⁰ -> (fun _lh_process2_arg2⁰ -> (fun _lh_process2_arg3⁰ -> (fun _lh_process2_arg4⁰ -> (fun _lh_process2_arg5⁰ -> (fun _lh_process2_arg6⁰ -> 
//│ 				let _lh_matchIdent¹² = split⁰(reducible⁰(reduce1_lh_₁(_lh_process2_arg6⁰)), _lh_process2_arg3⁰)
//│ 				in case _lh_matchIdent¹² of {
//│ 					LH_P2 _lh_process2_LH_P2_0⁰ _lh_process2_LH_P2_1⁰ => 
//│ 						let net'⁰ = add_eqn⁰(delete_eqns_lh_₁(map_lh_₆(eqno_lh_₁, _lh_process2_LH_P2_0⁰), _lh_process2_arg4⁰), _lh_process2_arg6⁰)
//│ 						in let deletions⁰ = map_lh_₉(eqpr_lh_₁, _lh_process2_LH_P2_0⁰)
//│ 						in let critical⁰ = all_crit_pairs⁰(_lh_process2_arg6⁰, _lh_process2_LH_P2_1⁰)
//│ 						in let new_agenda⁰ = sift_lh_₂(map_lh_₁₃(resolve⁰(super_reduce⁰(net'⁰)), mappend_lh_₇(deletions⁰, critical⁰)))
//│ 						in let todo'⁰ = add_agenda⁰(snd_lh_₃(_lh_process2_arg1⁰), new_agenda⁰, _lh_process2_arg5⁰)
//│ 						in process⁰(_lh_process2_arg1⁰, _lh_process2_arg2⁰, mappend_lh_₅(_lh_process2_LH_P2_1⁰, [LH_C _lh_process2_arg6⁰ [LH_N]]), net'⁰, todo'⁰)}))))))
//│ 		and dnet_reduce⁰ = (fun _lh_dnet_reduce_arg1⁰ -> (fun _lh_dnet_reduce_arg2⁰ -> try_all_lh_₁(map_lh_₇(rewrite_lh_₁, find⁰(_lh_dnet_reduce_arg2⁰, _lh_dnet_reduce_arg1⁰)), _lh_dnet_reduce_arg2⁰)))
//│ 		and find'⁰ = (fun _lh_find'_arg1⁰ -> (fun _lh_find'_arg2⁰ -> case _lh_find'_arg2⁰ of {
//│ 				Return _lh_find'_Return_0⁰ => _lh_find'_Return_0⁰
//│ 				| Switch _lh_find'_Switch_0⁰ _lh_find'_Switch_1⁰ => mappend_lh_₁(find_assoc⁰(g_first⁰(_lh_find'_arg1⁰), g_rest⁰(_lh_find'_arg1⁰), _lh_find'_Switch_0⁰), find'⁰(g_skip⁰(_lh_find'_arg1⁰), _lh_find'_Switch_1⁰))}))
//│ 		and multi_ext⁰ = (fun _lh_multi_ext_arg1⁰ -> (fun _lh_multi_ext_arg2⁰ -> case _lh_multi_ext_arg2⁰ of {
//│ 				LH_P2 _lh_multi_ext_LH_P2_0⁰ _lh_multi_ext_LH_P2_1⁰ => case _lh_multi_ext_LH_P2_0⁰ of {
//│ 					Func _lh_multi_ext_Func_0⁰ _lh_multi_ext_Func_1⁰ => case _lh_multi_ext_LH_P2_1⁰ of {
//│ 						Func _lh_multi_ext_Func_0¹ _lh_multi_ext_Func_1¹ => multi⁰(_lh_multi_ext_arg1⁰, [LH_P2 _lh_multi_ext_Func_1⁰ _lh_multi_ext_Func_1¹])
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}))
//│ 		and seq2⁰ = (fun _lh_seq2_arg1⁰ -> (fun _lh_seq2_arg2⁰ -> (fun _lh_seq2_arg3⁰ -> 
//│ 				let g¹ = (fun xs¹⁰ -> 
//│ 					let _lh_matchIdent¹³ = xs¹⁰
//│ 					in case _lh_matchIdent¹³ of {
//│ 						LH_P2 _lh_seq2_LH_P2_0⁰ _lh_seq2_LH_P2_1⁰ => lift_lh_₂(cross_lh_₂(_lh_seq2_arg1⁰(_lh_seq2_LH_P2_0⁰), (fun x²⁷ -> x²⁷)), _lh_seq2_arg3⁰(_lh_seq2_LH_P2_1⁰))})
//│ 				in (fun _lh_funcomp_x⁸ -> (fun _lh_funcomp_x⁹ -> squash_lh_₁(lift_lh_₄(g¹, _lh_funcomp_x⁹)))(_lh_seq2_arg2⁰(_lh_funcomp_x⁸))))))
//│ 		and g_first⁰ = (fun _lh_g_first_arg1⁰ -> case _lh_g_first_arg1⁰ of {
//│ 				LH_C _lh_g_first_LH_C_0⁰ _lh_g_first_LH_C_1⁰ => case _lh_g_first_LH_C_0⁰ of {
//│ 					Func _lh_g_first_Func_0⁰ _lh_g_first_Func_1⁰ => [Afunc _lh_g_first_Func_0⁰]
//│ 					| Var _lh_g_first_Var_0⁰ => [Avar]
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 		and p_expr⁰ = (fun _lh_p_expr_arg1⁰ -> orElseMap_lh_₂(seQ⁰(q_op⁰, [LH_C p_term⁰ [LH_C p_op⁰ [LH_C p_term⁰ [LH_N]]]]), p_term⁰, _lh_p_expr_arg1⁰))
//│ 		and all_crit_pairs⁰ = (fun _lh_all_crit_pairs_arg1⁰ -> (fun _lh_all_crit_pairs_arg2⁰ -> 
//│ 				let eqn'⁰ = stand_eqn_lh_₁([LH_C '1' [LH_N]], _lh_all_crit_pairs_arg1⁰)
//│ 				in let eqn''⁰ = stand_eqn_lh_₂([LH_C '2' [LH_N]], _lh_all_crit_pairs_arg1⁰)
//│ 				in let theory''⁰ = map_lh_₁(stand_eqn_lh_₃([LH_C '2' [LH_N]]), _lh_all_crit_pairs_arg2⁰)
//│ 				in mappend_lh_₆(map_lh_₂(mk_crit⁰(eqn'⁰, eqn''⁰), strict_super⁰(lhs_lh_₅(eqn'⁰), lhs_lh_₄(eqn''⁰))), concat_lh_₁(map_lh_₄(crit_pairs⁰(eqn'⁰), theory''⁰)))))
//│ 		and parse⁰ = (fun _lh_parse_arg1⁰ -> (fun _lh_funcomp_x¹⁰ -> (fun _lh_funcomp_x¹¹ -> (fun _lh_funcomp_x¹² -> unExpr⁰(fst_lh_₁(_lh_funcomp_x¹²)))(the_lh_₁(_lh_funcomp_x¹¹)))(p_expr⁰(_lh_funcomp_x¹⁰)))(_lh_parse_arg1⁰))
//│ 		and mk_cons⁰ = (fun _lh_mk_cons_arg1⁰ -> (fun _lh_mk_cons_arg2⁰ -> case _lh_mk_cons_arg2⁰ of {
//│ 				List _lh_mk_cons_List_0⁰ => [List [LH_C _lh_mk_cons_arg1⁰ _lh_mk_cons_List_0⁰]]
//│ 				| _  => error⁰}))
//│ 		and string_of⁰ = (fun _lh_string_of_arg1⁰ -> (fun _lh_string_of_arg2⁰ -> 
//│ 				let chars⁰ = takeWhile_lh_₁(_lh_string_of_arg1⁰, _lh_string_of_arg2⁰)
//│ 				in let s'⁰ = dropWhile_lh_₁(_lh_string_of_arg1⁰, _lh_string_of_arg2⁰)
//│ 				in maybeX_lh_₁(polyNeq⁰(chars⁰, [LH_N]), [LH_P2 [MkString chars⁰] s'⁰])))
//│ 		and preorder⁰ = (fun _lh_preorder_arg1⁰ -> if eqListExpr_lh_₁(_lh_preorder_arg1⁰, [LH_N]) then [LH_N] else mappend_lh_₃([LH_C g_first⁰(_lh_preorder_arg1⁰) [LH_N]], preorder⁰(g_rest⁰(_lh_preorder_arg1⁰))))
//│ 		and alphanum⁰ = (fun _lh_alphanum_arg1⁰ -> ((((int_of_char⁰(_lh_alphanum_arg1⁰) >= int_of_char⁰('A')) && (int_of_char⁰(_lh_alphanum_arg1⁰) <= int_of_char⁰('Z'))) || ((int_of_char⁰(_lh_alphanum_arg1⁰) >= int_of_char⁰('a')) && (int_of_char⁰(_lh_alphanum_arg1⁰) <= int_of_char⁰('z')))) || ((int_of_char⁰(_lh_alphanum_arg1⁰) >= int_of_char⁰('0')) && (int_of_char⁰(_lh_alphanum_arg1⁰) <= int_of_char⁰('9')))))
//│ 		and preprocess⁰ = (fun _lh_preprocess_arg1⁰ -> (fun _lh_preprocess_arg2⁰ -> case _lh_preprocess_arg2⁰ of {
//│ 				LH_P2 _lh_preprocess_LH_P2_0⁰ _lh_preprocess_LH_P2_1⁰ => [LH_P2 simplify_lh_₂(super_reduce⁰(_lh_preprocess_arg1⁰), _lh_preprocess_LH_P2_0⁰) simplify_lh_₃(super_reduce⁰(_lh_preprocess_arg1⁰), _lh_preprocess_LH_P2_1⁰)]}))
//│ 		and empty_net⁰ = [Return [LH_N]]
//│ 		and process⁰ = (fun _lh_process_arg1⁰ -> (fun _lh_process_arg2⁰ -> (fun _lh_process_arg3⁰ -> (fun _lh_process_arg4⁰ -> (fun _lh_process_arg5⁰ -> case _lh_process_arg5⁰ of {
//│ 				LH_N  => _lh_process_arg4⁰
//│ 				| LH_C _lh_process_LH_C_0⁰ _lh_process_LH_C_1⁰ => case _lh_process_LH_C_0⁰ of {
//│ 					Item _lh_process_Item_0⁰ _lh_process_Item_1⁰ => process1⁰(_lh_process_arg1⁰, _lh_process_arg2⁰, _lh_process_arg3⁰, _lh_process_arg4⁰, _lh_process_LH_C_1⁰, preprocess⁰(_lh_process_arg4⁰, _lh_process_Item_1⁰))}}))))) 
//│ 		in let group_completion⁰ = knuth_bendix⁰(rpo⁰(rank_order⁰(rank⁰), lex_ext⁰), map_lh_₅(parse_eqn⁰, [LH_C [LH_C '(' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'b' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'c' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C '(' [LH_C 'b' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'c' [LH_C ')' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]] [LH_C [LH_C 'E' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'x' [LH_N]]]]]]]]]] [LH_C [LH_C 'I' [LH_C '(' [LH_C 'x' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'E' [LH_N]]]]]]]]]]]]] [LH_N]]]]))
//│ 		in eqExpr_lh_₁(simplify_lh_₄(super_reduce⁰(group_completion⁰), parse⁰(_lh_result_LH_P2_0⁰)), parse⁰(_lh_result_LH_P2_1⁰))}
//│ def rewrite_lh_₁(_lh_rewrite_arg1⁰) = case _lh_rewrite_arg1⁰ of {
//│ 	Eqn _lh_rewrite_Eqn_0⁰ _lh_rewrite_Eqn_1⁰ => case _lh_rewrite_Eqn_1⁰ of {
//│ 		LH_P2 _lh_rewrite_LH_P2_0⁰ _lh_rewrite_LH_P2_1⁰ => (fun _lh_funcomp_x⁰ -> lift_lh_₁₀(sub_lh_₂(_lh_rewrite_LH_P2_1⁰), match_lh_₁(_lh_rewrite_LH_P2_0⁰, _lh_funcomp_x⁰)))}}
//│ def sift_lh_₁(_lh_sift_arg1¹) = (fun _lh_funcomp_x² -> concat_lh_₁(map_lh_₁₃(listify_lh_₁, _lh_funcomp_x²)))(_lh_sift_arg1¹)
//│ def sift_lh_₂(_lh_sift_arg1⁰) = (fun _lh_funcomp_x¹ -> concat_lh_₁(map_lh_₁₃(listify_lh_₁, _lh_funcomp_x¹)))(_lh_sift_arg1⁰)
//│ def simplify_lh_₁(_lh_simplify_arg1⁴) = 
//│ 	let f¹³ = (fun t²⁰ -> getOrElse_lh_₂(lift_lh_₁₀(f¹³, _lh_simplify_arg1⁴(t²⁰)), t²⁰))
//│ 	in f¹³
//│ def simplify_lh_₂(_lh_simplify_arg1³) = 
//│ 	let f¹² = (fun t¹⁹ -> getOrElse_lh_₂(lift_lh_₁₀(f¹², _lh_simplify_arg1³(t¹⁹)), t¹⁹))
//│ 	in f¹²
//│ def simplify_lh_₃(_lh_simplify_arg1²) = 
//│ 	let f⁹ = (fun t¹⁶ -> getOrElse_lh_₂(lift_lh_₁₀(f⁹, _lh_simplify_arg1²(t¹⁶)), t¹⁶))
//│ 	in f⁹
//│ def simplify_lh_₄(_lh_simplify_arg1¹) = 
//│ 	let f⁶ = (fun t¹⁰ -> getOrElse_lh_₂(lift_lh_₁₀(f⁶, _lh_simplify_arg1¹(t¹⁰)), t¹⁰))
//│ 	in f⁶
//│ def simplify_lh_₅(_lh_simplify_arg1⁰) = 
//│ 	let f² = (fun t⁵ -> getOrElse_lh_₂(lift_lh_₁₀(f², _lh_simplify_arg1⁰(t⁵)), t⁵))
//│ 	in f²
//│ def snd_lh_₁(_lh_snd_arg1²) = case _lh_snd_arg1² of {
//│ 	LH_P2 _lh_snd_LH_P2_0² _lh_snd_LH_P2_1² => _lh_snd_LH_P2_1²}
//│ def snd_lh_₂(_lh_snd_arg1¹) = case _lh_snd_arg1¹ of {
//│ 	LH_P2 _lh_snd_LH_P2_0¹ _lh_snd_LH_P2_1¹ => _lh_snd_LH_P2_1¹}
//│ def snd_lh_₃(_lh_snd_arg1⁰) = case _lh_snd_arg1⁰ of {
//│ 	LH_P2 _lh_snd_LH_P2_0⁰ _lh_snd_LH_P2_1⁰ => _lh_snd_LH_P2_1⁰}
//│ def squash_lh_₁(_lh_squash_arg1¹) = case _lh_squash_arg1¹ of {
//│ 	Just _lh_squash_Just_0¹ => _lh_squash_Just_0¹
//│ 	| Nothing  => [Nothing]}
//│ def squash_lh_₂(_lh_squash_arg1⁰) = case _lh_squash_arg1⁰ of {
//│ 	Just _lh_squash_Just_0⁰ => _lh_squash_Just_0⁰
//│ 	| Nothing  => [Nothing]}
//│ def stand_eqn_lh_₁(_lh_stand_eqn_arg1², _lh_stand_eqn_arg2²) = case _lh_stand_eqn_arg2² of {
//│ 	Eqn _lh_stand_eqn_Eqn_0² _lh_stand_eqn_Eqn_1² => case _lh_stand_eqn_Eqn_1² of {
//│ 		LH_P2 _lh_stand_eqn_LH_P2_0² _lh_stand_eqn_LH_P2_1² => [Eqn _lh_stand_eqn_Eqn_0² [LH_P2 stand_lh_₁(_lh_stand_eqn_arg1², _lh_stand_eqn_LH_P2_0²) stand_lh_₁(_lh_stand_eqn_arg1², _lh_stand_eqn_LH_P2_1²)]]}}
//│ def stand_eqn_lh_₂(_lh_stand_eqn_arg1¹, _lh_stand_eqn_arg2¹) = case _lh_stand_eqn_arg2¹ of {
//│ 	Eqn _lh_stand_eqn_Eqn_0¹ _lh_stand_eqn_Eqn_1¹ => case _lh_stand_eqn_Eqn_1¹ of {
//│ 		LH_P2 _lh_stand_eqn_LH_P2_0¹ _lh_stand_eqn_LH_P2_1¹ => [Eqn _lh_stand_eqn_Eqn_0¹ [LH_P2 stand_lh_₁(_lh_stand_eqn_arg1¹, _lh_stand_eqn_LH_P2_0¹) stand_lh_₁(_lh_stand_eqn_arg1¹, _lh_stand_eqn_LH_P2_1¹)]]}}
//│ def stand_eqn_lh_₃(_lh_stand_eqn_arg1⁰, _lh_stand_eqn_arg2⁰) = case _lh_stand_eqn_arg2⁰ of {
//│ 	Eqn _lh_stand_eqn_Eqn_0⁰ _lh_stand_eqn_Eqn_1⁰ => case _lh_stand_eqn_Eqn_1⁰ of {
//│ 		LH_P2 _lh_stand_eqn_LH_P2_0⁰ _lh_stand_eqn_LH_P2_1⁰ => [Eqn _lh_stand_eqn_Eqn_0⁰ [LH_P2 stand_lh_₁(_lh_stand_eqn_arg1⁰, _lh_stand_eqn_LH_P2_0⁰) stand_lh_₁(_lh_stand_eqn_arg1⁰, _lh_stand_eqn_LH_P2_1⁰)]]}}
//│ def stand_lh_₁(_lh_stand_arg1⁰) = expr_fold_lh_₁((fun x¹ -> (fun y⁰ -> [Func x¹ y⁰])), (fun v⁰ -> [Var mappend_lh_₇(v⁰, _lh_stand_arg1⁰)]))
//│ def sub_lh_₁(_lh_sub_arg1¹, _lh_sub_arg2¹) = expr_fold_lh_₁((fun x¹² -> (fun y² -> [Func x¹² y²])), apply_lh_₁(_lh_sub_arg2¹), _lh_sub_arg1¹)
//│ def sub_lh_₂(_lh_sub_arg1⁰, _lh_sub_arg2⁰) = expr_fold_lh_₁((fun x⁴ -> (fun y¹ -> [Func x⁴ y¹])), apply_lh_₁(_lh_sub_arg2⁰), _lh_sub_arg1⁰)
//│ def subterms_lh_₁(_lh_subterms_arg1¹) = case _lh_subterms_arg1¹ of {
//│ 	Var _lh_subterms_Var_0¹ => [LH_N]
//│ 	| Func _lh_subterms_Func_0¹ _lh_subterms_Func_1¹ => mappend_lh_₇([LH_C [LH_P2 [LH_N] [Func _lh_subterms_Func_0¹ _lh_subterms_Func_1¹]] [LH_N]], 
//│ 		let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 			LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => case _lh_listcomp_fun_ls_h³ of {
//│ 				LH_P2 _lh_subterms_LH_P2_0² _lh_subterms_LH_P2_1² => 
//│ 					let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 						LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => case _lh_listcomp_fun_ls_h⁴ of {
//│ 							LH_P2 _lh_subterms_LH_P2_0³ _lh_subterms_LH_P2_1³ => [LH_C [LH_P2 [LH_C _lh_subterms_LH_P2_0² _lh_subterms_LH_P2_0³] _lh_subterms_LH_P2_1³] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]
//│ 							| _  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)}
//│ 						| LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ 					in _lh_listcomp_fun⁴(subterms_lh_₁(_lh_subterms_LH_P2_1²))
//│ 				| _  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun³(zip_lz_nl_lh_₁(enumFrom_lh_₁(0), _lh_subterms_Func_1¹)))}
//│ def subterms_lh_₂(_lh_subterms_arg1⁰) = case _lh_subterms_arg1⁰ of {
//│ 	Var _lh_subterms_Var_0⁰ => [LH_N]
//│ 	| Func _lh_subterms_Func_0⁰ _lh_subterms_Func_1⁰ => mappend_lh_₇([LH_C [LH_P2 [LH_N] [Func _lh_subterms_Func_0⁰ _lh_subterms_Func_1⁰]] [LH_N]], 
//│ 		let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {
//│ 				LH_P2 _lh_subterms_LH_P2_0⁰ _lh_subterms_LH_P2_1⁰ => 
//│ 					let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 						LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => case _lh_listcomp_fun_ls_h² of {
//│ 							LH_P2 _lh_subterms_LH_P2_0¹ _lh_subterms_LH_P2_1¹ => [LH_C [LH_P2 [LH_C _lh_subterms_LH_P2_0⁰ _lh_subterms_LH_P2_0¹] _lh_subterms_LH_P2_1¹] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]
//│ 							| _  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}
//│ 						| LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ 					in _lh_listcomp_fun²(subterms_lh_₂(_lh_subterms_LH_P2_1⁰))
//│ 				| _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun¹(zip_lz_nl_lh_₁(enumFrom_lh_₁(0), _lh_subterms_Func_1⁰)))}
//│ def succeed_lh_₁(_lh_succeed_arg1³) = [Just _lh_succeed_arg1³]
//│ def succeed_lh_₂(_lh_succeed_arg1²) = [Just _lh_succeed_arg1²]
//│ def succeed_lh_₃(_lh_succeed_arg1¹) = [Just _lh_succeed_arg1¹]
//│ def succeed_lh_₄(_lh_succeed_arg1⁰) = [Just _lh_succeed_arg1⁰]
//│ def sumAux_lh_₁(ls⁰, a⁰) = case ls⁰ of {
//│ 	LH_N  => a⁰
//│ 	| LH_C h⁰ t¹ => sumAux_lh_₁(t¹, (a⁰ + h⁰))}
//│ def sum_lh_₁(ls²) = sumAux_lh_₁(ls², 0)
//│ def tail_lh_₁(ls¹⁸) = case ls¹⁸ of {
//│ 	LH_C h²⁴ t³² => t³²
//│ 	| LH_N  => error⁰}
//│ def takeWhile_lh_₁(_lh_takeWhile_arg1⁰, _lh_takeWhile_arg2⁰) = case _lh_takeWhile_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_takeWhile_LH_C_0⁰ _lh_takeWhile_LH_C_1⁰ => if _lh_takeWhile_arg1⁰(_lh_takeWhile_LH_C_0⁰) then [LH_C _lh_takeWhile_LH_C_0⁰ takeWhile_lh_₁(_lh_takeWhile_arg1⁰, _lh_takeWhile_LH_C_1⁰)] else [LH_N]}
//│ def testRewrite_nofib_lh_₁(_lh_testRewrite_nofib_arg1⁰) = all_lh_₁(result_lh_₁, copy_lh_₁(_lh_testRewrite_nofib_arg1⁰, [LH_P2 [LH_C 'I' [LH_C '(' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'b' [LH_C ')' [LH_N]]]]]]]]] [LH_C 'I' [LH_C '(' [LH_C 'b' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'I' [LH_C '(' [LH_C 'a' [LH_C ')' [LH_N]]]]]]]]]]]]]))
//│ def the_lh_₁(_lh_the_arg1¹) = case _lh_the_arg1¹ of {
//│ 	Just _lh_the_Just_0¹ => _lh_the_Just_0¹
//│ 	| _  => error⁰}
//│ def the_lh_₂(_lh_the_arg1⁰) = case _lh_the_arg1⁰ of {
//│ 	Just _lh_the_Just_0⁰ => _lh_the_Just_0⁰
//│ 	| _  => error⁰}
//│ def try_all_lh_₁(_lh_try_all_arg1⁰) = foldr_lh_₂(orElseMap_lh_₄, (fun dum⁰ -> croak_lh_₄), _lh_try_all_arg1⁰)
//│ def unify'_lh_₁(_lh_unify'_arg1⁰, _lh_unify'_arg2⁰) = case _lh_unify'_arg2⁰ of {
//│ 	LH_P2 _lh_unify'_LH_P2_0⁰ _lh_unify'_LH_P2_1⁰ => case _lh_unify'_LH_P2_0⁰ of {
//│ 		Var _lh_unify'_Var_0⁰ => univar_lh_₁(_lh_unify'_arg1⁰, _lh_unify'_Var_0⁰, _lh_unify'_LH_P2_1⁰)
//│ 		| Func _lh_unify'_Func_0⁰ _lh_unify'_Func_1⁰ => case _lh_unify'_LH_P2_1⁰ of {
//│ 			Var _lh_unify'_Var_0¹ => univar_lh_₁(_lh_unify'_arg1⁰, _lh_unify'_Var_0¹, [Func _lh_unify'_Func_0⁰ _lh_unify'_Func_1⁰])
//│ 			| Func _lh_unify'_Func_0¹ _lh_unify'_Func_1¹ => if polyEq⁰(_lh_unify'_Func_0⁰, _lh_unify'_Func_0¹) then prop_fold_lh_₁(unify'_lh_₁, _lh_unify'_arg1⁰, zip_lh_₁(_lh_unify'_Func_1⁰, _lh_unify'_Func_1¹)) else croak_lh_₄}}}
//│ def unify_lh_₁(_lh_unify_arg1⁰, _lh_unify_arg2⁰) = unify'_lh_₁([LH_N], [LH_P2 _lh_unify_arg1⁰ _lh_unify_arg2⁰])
//│ def univar_lh_₁(_lh_univar_arg1⁰, _lh_univar_arg2⁰, _lh_univar_arg3⁰) = 
//│ 	let t⁰ = assoc_lh_₁(_lh_univar_arg1⁰, _lh_univar_arg2⁰)
//│ 	in if exists_lh_₂(t⁰) then unify'_lh_₁(_lh_univar_arg1⁰, [LH_P2 the_lh_₂(t⁰) _lh_univar_arg3⁰]) else if eqExpr_lh_₃(_lh_univar_arg3⁰, [Var _lh_univar_arg2⁰]) then succeed_lh_₄(_lh_univar_arg1⁰) else 
//│ 		let u'⁰ = sub_lh_₂(_lh_univar_arg3⁰, _lh_univar_arg1⁰)
//│ 		in if not⁰(occurs_lh_₂(_lh_univar_arg2⁰, u'⁰)) then succeed_lh_₄(comp_sub_lh_₁([LH_C [LH_P2 _lh_univar_arg2⁰ u'⁰] [LH_N]], _lh_univar_arg1⁰)) else croak_lh_₄
//│ def update_alist_lh_₁(_lh_update_alist_arg1⁰, _lh_update_alist_arg2⁰, _lh_update_alist_arg3⁰) = 
//│ 	let upd⁰ = (fun ls¹⁵ -> 
//│ 		let _lh_matchIdent¹ = ls¹⁵
//│ 		in case _lh_matchIdent¹ of {
//│ 			LH_N  => [LH_C [LH_P2 _lh_update_alist_arg1⁰ _lh_update_alist_arg2⁰(_lh_update_alist_arg3⁰)] [LH_N]]
//│ 			| LH_C _lh_update_alist_LH_C_0⁰ _lh_update_alist_LH_C_1⁰ => case _lh_update_alist_LH_C_0⁰ of {
//│ 				LH_P2 _lh_update_alist_LH_P2_0⁰ _lh_update_alist_LH_P2_1⁰ => if polyEq⁰(_lh_update_alist_arg1⁰, _lh_update_alist_LH_P2_0⁰) then [LH_C [LH_P2 _lh_update_alist_arg1⁰ _lh_update_alist_arg2⁰(_lh_update_alist_LH_P2_1⁰)] _lh_update_alist_LH_C_1⁰] else [LH_C [LH_P2 _lh_update_alist_LH_P2_0⁰ _lh_update_alist_LH_P2_1⁰] upd⁰(_lh_update_alist_LH_C_1⁰)]}})
//│ 	in upd⁰
//│ def zip_lh_₁(xs², ys²) = case xs² of {
//│ 	LH_C hx⁰ tx⁰ => case ys² of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh_₁(tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zip_lz_nl_lh_₁(xs⁴, ys⁴) = case ys⁴ of {
//│ 	LH_C hy¹ ty¹ => case force⁰(xs⁴) of {
//│ 		LH_C hx¹ tx¹ => [LH_C [LH_P2 hx¹ hy¹] zip_lz_nl_lh_₁(tx¹, ty¹)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec all_lh__d1 _lh_all_arg1_5 _lh_all_arg2_5 =
//│ 		  (match _lh_all_arg2_5 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_all_LH_C_0_5, _lh_all_LH_C_1_5) -> 
//│ 		      (if (_lh_all_arg1_5 _lh_all_LH_C_0_5) then
//│ 		        ((all_lh__d1 _lh_all_arg1_5) _lh_all_LH_C_1_5)
//│ 		      else
//│ 		        false));;
//│ 		let rec copy_lh__d1 _lh_copy_arg1_0 _lh_copy_arg2_0 =
//│ 		  (if (_lh_copy_arg1_0 <= 0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (`LH_C(_lh_copy_arg2_0, ((copy_lh__d1 (_lh_copy_arg1_0 - 1)) _lh_copy_arg2_0))));;
//│ 		let rec fst_lh__d4 _lh_fst_arg1_0 =
//│ 		  (match _lh_fst_arg1_0 with
//│ 		    | `LH_P2(_lh_fst_LH_P2_0_0, _lh_fst_LH_P2_1_0) -> 
//│ 		      _lh_fst_LH_P2_0_0);;
//│ 		let rec mappend_lh__d7 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_7, t_1_2) -> 
//│ 		      (`LH_C(h_7, ((mappend_lh__d7 t_1_2) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec map_lh__d1_d3 f_3 ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_3, t_6) -> 
//│ 		      (`LH_C((f_3 h_3), ((map_lh__d1_d3 f_3) t_6)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec expr_fold_lh__d1 _lh_expr_fold_arg1_0 _lh_expr_fold_arg2_0 _lh_expr_fold_arg3_0 =
//│ 		  (match _lh_expr_fold_arg3_0 with
//│ 		    | `Var(_lh_expr_fold_Var_0_0) -> 
//│ 		      (_lh_expr_fold_arg2_0 _lh_expr_fold_Var_0_0)
//│ 		    | `Func(_lh_expr_fold_Func_0_0, _lh_expr_fold_Func_1_0) -> 
//│ 		      ((_lh_expr_fold_arg1_0 _lh_expr_fold_Func_0_0) ((map_lh__d1_d3 ((expr_fold_lh__d1 _lh_expr_fold_arg1_0) _lh_expr_fold_arg2_0)) _lh_expr_fold_Func_1_0)));;
//│ 		let rec stand_lh__d1 _lh_stand_arg1_0 =
//│ 		  ((expr_fold_lh__d1 (fun x_1 y_0 -> 
//│ 		    (`Func(x_1, y_0)))) (fun v_0 -> 
//│ 		    (`Var(((mappend_lh__d7 v_0) _lh_stand_arg1_0)))));;
//│ 		let rec stand_eqn_lh__d3 _lh_stand_eqn_arg1_0 _lh_stand_eqn_arg2_0 =
//│ 		  (match _lh_stand_eqn_arg2_0 with
//│ 		    | `Eqn(_lh_stand_eqn_Eqn_0_0, _lh_stand_eqn_Eqn_1_0) -> 
//│ 		      (match _lh_stand_eqn_Eqn_1_0 with
//│ 		        | `LH_P2(_lh_stand_eqn_LH_P2_0_0, _lh_stand_eqn_LH_P2_1_0) -> 
//│ 		          (`Eqn(_lh_stand_eqn_Eqn_0_0, (`LH_P2(((stand_lh__d1 _lh_stand_eqn_arg1_0) _lh_stand_eqn_LH_P2_0_0), ((stand_lh__d1 _lh_stand_eqn_arg1_0) _lh_stand_eqn_LH_P2_1_0)))))));;
//│ 		let rec map_lh__d3 f_1_8 ls_1_9 =
//│ 		  (match ls_1_9 with
//│ 		    | `LH_C(h_2_5, t_3_3) -> 
//│ 		      (`LH_C((f_1_8 h_2_5), ((map_lh__d3 f_1_8) t_3_3)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec orElse_lh__d1 _lh_orElse_arg1_0 _lh_orElse_arg2_0 =
//│ 		  (match _lh_orElse_arg1_0 with
//│ 		    | `Nothing -> 
//│ 		      _lh_orElse_arg2_0
//│ 		    | _ -> 
//│ 		      _lh_orElse_arg1_0);;
//│ 		let rec orElseMap_lh__d4 _lh_orElseMap_arg1_0 _lh_orElseMap_arg2_0 _lh_orElseMap_arg3_0 =
//│ 		  ((orElse_lh__d1 (_lh_orElseMap_arg1_0 _lh_orElseMap_arg3_0)) (_lh_orElseMap_arg2_0 _lh_orElseMap_arg3_0));;
//│ 		let rec lift_lh__d1_d0 _lh_lift_arg1_0 _lh_lift_arg2_0 =
//│ 		  (match _lh_lift_arg2_0 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_lift_Just_0_0) -> 
//│ 		      (`Just((_lh_lift_arg1_0 _lh_lift_Just_0_0))));;
//│ 		let rec getOrElse_lh__d2 _lh_getOrElse_arg1_0 _lh_getOrElse_arg2_0 =
//│ 		  (match _lh_getOrElse_arg1_0 with
//│ 		    | `Just(_lh_getOrElse_Just_0_0) -> 
//│ 		      _lh_getOrElse_Just_0_0
//│ 		    | `Nothing -> 
//│ 		      _lh_getOrElse_arg2_0);;
//│ 		let rec simplify_lh__d5 _lh_simplify_arg1_0 =
//│ 		  (let rec f_2 = (fun t_5 -> 
//│ 		    ((getOrElse_lh__d2 ((lift_lh__d1_d0 f_2) (_lh_simplify_arg1_0 t_5))) t_5)) in
//│ 		    f_2);;
//│ 		let rec cross_lh__d2 _lh_cross_arg1_1 _lh_cross_arg2_1 _lh_cross_arg3_1 =
//│ 		  (match _lh_cross_arg3_1 with
//│ 		    | `LH_P2(_lh_cross_LH_P2_0_1, _lh_cross_LH_P2_1_1) -> 
//│ 		      (`LH_P2((_lh_cross_arg1_1 _lh_cross_LH_P2_0_1), (_lh_cross_arg2_1 _lh_cross_LH_P2_1_1))));;
//│ 		let rec concat_lh__d1 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_1_6, t_2_4) -> 
//│ 		      ((mappend_lh__d7 h_1_6) (concat_lh__d1 t_2_4))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec box_lh__d1 _lh_box_arg1_0 =
//│ 		  (`LH_C(_lh_box_arg1_0, (`LH_N)));;
//│ 		let rec listify_lh__d1 _lh_listify_arg1_0 =
//│ 		  ((getOrElse_lh__d2 ((lift_lh__d1_d0 box_lh__d1) _lh_listify_arg1_0)) (`LH_N));;
//│ 		let rec sift_lh__d2 _lh_sift_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_1 -> 
//│ 		    (concat_lh__d1 ((map_lh__d1_d3 listify_lh__d1) _lh_funcomp_x_1))) _lh_sift_arg1_0);;
//│ 		let rec simplify_lh__d4 _lh_simplify_arg1_1 =
//│ 		  (let rec f_6 = (fun t_1_0 -> 
//│ 		    ((getOrElse_lh__d2 ((lift_lh__d1_d0 f_6) (_lh_simplify_arg1_1 t_1_0))) t_1_0)) in
//│ 		    f_6);;
//│ 		let rec any_lh__d5 _lh_any_arg1_0 _lh_any_arg2_0 =
//│ 		  (match _lh_any_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_any_LH_C_0_0, _lh_any_LH_C_1_0) -> 
//│ 		      (if (_lh_any_arg1_0 _lh_any_LH_C_0_0) then
//│ 		        true
//│ 		      else
//│ 		        ((any_lh__d5 _lh_any_arg1_0) _lh_any_LH_C_1_0)));;
//│ 		let rec quant_lh__d5 _lh_quant_arg1_5 _lh_quant_arg2_5 _lh_quant_arg3_5 _lh_quant_arg4_5 =
//│ 		  (let rec p_5 = (fun x_9 -> 
//│ 		    ((_lh_quant_arg2_5 x_9) _lh_quant_arg3_5)) in
//│ 		    ((_lh_quant_arg1_5 p_5) _lh_quant_arg4_5));;
//│ 		let rec simplify_lh__d1 _lh_simplify_arg1_4 =
//│ 		  (let rec f_1_3 = (fun t_2_0 -> 
//│ 		    ((getOrElse_lh__d2 ((lift_lh__d1_d0 f_1_3) (_lh_simplify_arg1_4 t_2_0))) t_2_0)) in
//│ 		    f_1_3);;
//│ 		let rec map_lh__d9 f_1_0 ls_1_0 =
//│ 		  (match ls_1_0 with
//│ 		    | `LH_C(h_1_1, t_1_7) -> 
//│ 		      (`LH_C((f_1_0 h_1_1), ((map_lh__d9 f_1_0) t_1_7)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh__d3 xs_6 ys_6 =
//│ 		  (match xs_6 with
//│ 		    | `LH_C(h_1_8, t_2_6) -> 
//│ 		      (`LH_C(h_1_8, ((mappend_lh__d3 t_2_6) ys_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_6);;
//│ 		let rec lhs_lh__d5 _lh_lhs_arg1_2 =
//│ 		  (match _lh_lhs_arg1_2 with
//│ 		    | `Eqn(_lh_lhs_Eqn_0_2, _lh_lhs_Eqn_1_2) -> 
//│ 		      (match _lh_lhs_Eqn_1_2 with
//│ 		        | `LH_P2(_lh_lhs_LH_P2_0_2, _lh_lhs_LH_P2_1_2) -> 
//│ 		          _lh_lhs_LH_P2_0_2));;
//│ 		let rec succeed_lh__d4 _lh_succeed_arg1_0 =
//│ 		  (`Just(_lh_succeed_arg1_0));;
//│ 		let rec foldl_lh__d1 f_1 i_0 ls_3 =
//│ 		  (match ls_3 with
//│ 		    | `LH_C(h_2, t_4) -> 
//│ 		      (((foldl_lh__d1 f_1) ((f_1 i_0) h_2)) t_4)
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec eqRewrite_lh__d1 _lh_eqRewrite_arg1_0 _lh_eqRewrite_arg2_0 _lh_eqRewrite_arg3_0 =
//│ 		  ((_lh_eqRewrite_arg1_0 (`LH_P2(_lh_eqRewrite_arg2_0, _lh_eqRewrite_arg3_0))) = (`Equal));;
//│ 		let rec modify_lh__d1 _lh_modify_arg1_0 _lh_modify_arg2_0 _lh_modify_arg3_0 =
//│ 		  (match _lh_modify_arg1_0 with
//│ 		    | `LH_C(_lh_modify_LH_C_0_0, _lh_modify_LH_C_1_0) -> 
//│ 		      (match _lh_modify_arg2_0 with
//│ 		        | 0 -> 
//│ 		          (`LH_C((_lh_modify_arg3_0 _lh_modify_LH_C_0_0), _lh_modify_LH_C_1_0))
//│ 		        | _ -> 
//│ 		          (`LH_C(_lh_modify_LH_C_0_0, (((modify_lh__d1 _lh_modify_LH_C_1_0) (_lh_modify_arg2_0 - 1)) _lh_modify_arg3_0))))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec replace_lh__d1 _lh_replace_arg1_1 _lh_replace_arg2_1 _lh_replace_arg3_1 =
//│ 		  (match _lh_replace_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      _lh_replace_arg3_1
//│ 		    | _ -> 
//│ 		      (match _lh_replace_arg1_1 with
//│ 		        | `Func(_lh_replace_Func_0_1, _lh_replace_Func_1_1) -> 
//│ 		          (match _lh_replace_arg2_1 with
//│ 		            | `LH_C(_lh_replace_LH_C_0_1, _lh_replace_LH_C_1_1) -> 
//│ 		              (`Func(_lh_replace_Func_0_1, (((modify_lh__d1 _lh_replace_Func_1_1) _lh_replace_LH_C_0_1) (fun t_1_1 -> 
//│ 		                (((replace_lh__d1 t_1_1) _lh_replace_LH_C_1_1) _lh_replace_arg3_1)))))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error")));;
//│ 		let rec zip_lh__d1 xs_2 ys_2 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(hx_0, tx_0) -> 
//│ 		      (match ys_2 with
//│ 		        | `LH_C(hy_0, ty_0) -> 
//│ 		          (`LH_C((`LH_P2(hx_0, hy_0)), ((zip_lh__d1 tx_0) ty_0)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec snd_lh__d2 _lh_snd_arg1_1 =
//│ 		  (match _lh_snd_arg1_1 with
//│ 		    | `LH_P2(_lh_snd_LH_P2_0_1, _lh_snd_LH_P2_1_1) -> 
//│ 		      _lh_snd_LH_P2_1_1);;
//│ 		let rec lift_lh__d1 _lh_lift_arg1_9 _lh_lift_arg2_9 =
//│ 		  (match _lh_lift_arg2_9 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_lift_Just_0_9) -> 
//│ 		      (`Just((_lh_lift_arg1_9 _lh_lift_Just_0_9))));;
//│ 		let rec map_lh__d7 f_1_4 ls_1_2 =
//│ 		  (match ls_1_2 with
//│ 		    | `LH_C(h_1_3, t_2_1) -> 
//│ 		      (`LH_C((f_1_4 h_1_3), ((map_lh__d7 f_1_4) t_2_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec inList_lh__d1 _lh_inList_arg1_0 _lh_inList_arg2_0 =
//│ 		  (match _lh_inList_arg2_0 with
//│ 		    | `LH_C(_lh_inList_LH_C_0_0, _lh_inList_LH_C_1_0) -> 
//│ 		      (if (_lh_inList_arg1_0 = _lh_inList_LH_C_0_0) then
//│ 		        true
//│ 		      else
//│ 		        ((inList_lh__d1 _lh_inList_arg1_0) _lh_inList_LH_C_1_0))
//│ 		    | `LH_N -> 
//│ 		      false);;
//│ 		let rec geRewrite_lh__d3 _lh_geRewrite_arg1_1 _lh_geRewrite_arg2_1 _lh_geRewrite_arg3_1 =
//│ 		  ((inList_lh__d1 (_lh_geRewrite_arg1_1 (`LH_P2(_lh_geRewrite_arg2_1, _lh_geRewrite_arg3_1)))) (`LH_C((`Greater), (`LH_C((`Equal), (`LH_N))))));;
//│ 		let rec sumAux_lh__d1 ls_0 a_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_N -> 
//│ 		      a_0
//│ 		    | `LH_C(h_0, t_1) -> 
//│ 		      ((sumAux_lh__d1 t_1) (a_0 + h_0)));;
//│ 		let rec sum_lh__d1 ls_2 =
//│ 		  ((sumAux_lh__d1 ls_2) 0);;
//│ 		let rec cost_lh__d1 _lh_cost_arg1_0 =
//│ 		  (match _lh_cost_arg1_0 with
//│ 		    | `LH_P2(_lh_cost_LH_P2_0_0, _lh_cost_LH_P2_1_0) -> 
//│ 		      (let rec size_0 = (fun _lh_size_arg1_0 -> 
//│ 		        (((expr_fold_lh__d1 (fun x_1_1 a_1 -> 
//│ 		          ((sum_lh__d1 a_1) + 1))) (fun dum_2 -> 
//│ 		          0)) _lh_size_arg1_0)) in
//│ 		        ((size_0 _lh_cost_LH_P2_0_0) + (size_0 _lh_cost_LH_P2_1_0))));;
//│ 		let rec croak_lh__d4 =
//│ 		  (`Nothing);;
//│ 		let rec or_lh__d1 _lh_or_arg1_0 =
//│ 		  (match _lh_or_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_or_LH_C_0_0, _lh_or_LH_C_1_0) -> 
//│ 		      (if _lh_or_LH_C_0_0 then
//│ 		        true
//│ 		      else
//│ 		        (or_lh__d1 _lh_or_LH_C_1_0)));;
//│ 		let rec occurs_lh__d2 _lh_occurs_arg1_0 =
//│ 		  ((expr_fold_lh__d1 (fun dum_1 -> 
//│ 		    or_lh__d1)) (fun x_8 -> 
//│ 		    (x_8 = _lh_occurs_arg1_0)));;
//│ 		let rec foldr_lh__d2 f_8 i_1 ls_9 =
//│ 		  (match ls_9 with
//│ 		    | `LH_C(h_1_0, t_1_5) -> 
//│ 		      ((f_8 h_1_0) (((foldr_lh__d2 f_8) i_1) t_1_5))
//│ 		    | `LH_N -> 
//│ 		      i_1);;
//│ 		let rec first_ok_lh__d1 _lh_first_ok_arg1_0 =
//│ 		  (((foldr_lh__d2 orElse_lh__d1) (`Nothing)) _lh_first_ok_arg1_0);;
//│ 		let rec maybeX_lh__d1 _lh_maybeX_arg1_0 _lh_maybeX_arg2_0 =
//│ 		  (if _lh_maybeX_arg1_0 then
//│ 		    (`Just(_lh_maybeX_arg2_0))
//│ 		  else
//│ 		    (`Nothing));;
//│ 		let rec assoc_lh__d1 _lh_assoc_arg1_0 _lh_assoc_arg2_0 =
//│ 		  (let rec match_x_0 = (fun uv_0 -> 
//│ 		    (let rec _lh_matchIdent_0 = uv_0 in
//│ 		      (match _lh_matchIdent_0 with
//│ 		        | `LH_P2(_lh_assoc_LH_P2_0_0, _lh_assoc_LH_P2_1_0) -> 
//│ 		          ((maybeX_lh__d1 (_lh_assoc_arg2_0 = _lh_assoc_LH_P2_0_0)) _lh_assoc_LH_P2_1_0)))) in
//│ 		    (first_ok_lh__d1 ((map_lh__d1_d3 match_x_0) _lh_assoc_arg1_0)));;
//│ 		let rec apply_lh__d1 _lh_apply_arg1_0 _lh_apply_arg2_0 =
//│ 		  ((getOrElse_lh__d2 ((assoc_lh__d1 _lh_apply_arg1_0) _lh_apply_arg2_0)) (`Var(_lh_apply_arg2_0)));;
//│ 		let rec sub_lh__d2 _lh_sub_arg1_0 _lh_sub_arg2_0 =
//│ 		  (((expr_fold_lh__d1 (fun x_4 y_1 -> 
//│ 		    (`Func(x_4, y_1)))) (apply_lh__d1 _lh_sub_arg2_0)) _lh_sub_arg1_0);;
//│ 		let rec comp_sub_lh__d1 _lh_comp_sub_arg1_0 _lh_comp_sub_arg2_0 =
//│ 		  ((mappend_lh__d7 (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		    (match _lh_listcomp_fun_para_0 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		        (match _lh_listcomp_fun_ls_h_0 with
//│ 		          | `LH_P2(_lh_comp_sub_LH_P2_0_0, _lh_comp_sub_LH_P2_1_0) -> 
//│ 		            (`LH_C((`LH_P2(_lh_comp_sub_LH_P2_0_0, ((sub_lh__d2 _lh_comp_sub_LH_P2_1_0) _lh_comp_sub_arg1_0))), (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		          | _ -> 
//│ 		            (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_0 _lh_comp_sub_arg2_0))) _lh_comp_sub_arg1_0);;
//│ 		let rec exists_lh__d2 _lh_exists_arg1_0 =
//│ 		  (match _lh_exists_arg1_0 with
//│ 		    | `Nothing -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      true);;
//│ 		let rec the_lh__d2 _lh_the_arg1_0 =
//│ 		  (match _lh_the_arg1_0 with
//│ 		    | `Just(_lh_the_Just_0_0) -> 
//│ 		      _lh_the_Just_0_0
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec eqExpr_lh__d3 _lh_eqExpr_arg1_0 _lh_eqExpr_arg2_0 =
//│ 		  (match _lh_eqExpr_arg1_0 with
//│ 		    | `Func(_lh_eqExpr_Func_0_0, _lh_eqExpr_Func_1_0) -> 
//│ 		      (match _lh_eqExpr_arg2_0 with
//│ 		        | `Func(_lh_eqExpr_Func_0_1, _lh_eqExpr_Func_1_1) -> 
//│ 		          ((_lh_eqExpr_Func_0_0 = _lh_eqExpr_Func_0_1) && ((eqListExpr_lh__d1 _lh_eqExpr_Func_1_0) _lh_eqExpr_Func_1_1))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Var(_lh_eqExpr_Var_0_0) -> 
//│ 		      (match _lh_eqExpr_arg2_0 with
//│ 		        | `Var(_lh_eqExpr_Var_0_1) -> 
//│ 		          (_lh_eqExpr_Var_0_0 = _lh_eqExpr_Var_0_1)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false)
//│ 		and
//│ 		eqListExpr_lh__d1 _lh_eqListExpr_arg1_1 _lh_eqListExpr_arg2_1 =
//│ 		  (match _lh_eqListExpr_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      (match _lh_eqListExpr_arg2_1 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `LH_C(_lh_eqListExpr_LH_C_0_2, _lh_eqListExpr_LH_C_1_2) -> 
//│ 		      (match _lh_eqListExpr_arg2_1 with
//│ 		        | `LH_C(_lh_eqListExpr_LH_C_0_3, _lh_eqListExpr_LH_C_1_3) -> 
//│ 		          (if ((eqExpr_lh__d3 _lh_eqListExpr_LH_C_0_2) _lh_eqListExpr_LH_C_0_3) then
//│ 		            ((eqListExpr_lh__d1 _lh_eqListExpr_LH_C_1_2) _lh_eqListExpr_LH_C_1_3)
//│ 		          else
//│ 		            false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec prop2_lh__d1 _lh_prop2_arg1_0 _lh_prop2_arg2_0 _lh_prop2_arg3_0 =
//│ 		  (match _lh_prop2_arg2_0 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_prop2_Just_0_0) -> 
//│ 		      ((_lh_prop2_arg1_0 _lh_prop2_Just_0_0) _lh_prop2_arg3_0));;
//│ 		let rec prop_fold_lh__d1 _lh_prop_fold_arg1_0 _lh_prop_fold_arg2_0 _lh_prop_fold_arg3_0 =
//│ 		  (match _lh_prop_fold_arg3_0 with
//│ 		    | `LH_N -> 
//│ 		      (`Just(_lh_prop_fold_arg2_0))
//│ 		    | `LH_C(_lh_prop_fold_LH_C_0_0, _lh_prop_fold_LH_C_1_0) -> 
//│ 		      (((prop2_lh__d1 (prop_fold_lh__d1 _lh_prop_fold_arg1_0)) ((_lh_prop_fold_arg1_0 _lh_prop_fold_arg2_0) _lh_prop_fold_LH_C_0_0)) _lh_prop_fold_LH_C_1_0));;
//│ 		let rec unify'_lh__d1 _lh_unify'_arg1_0 _lh_unify'_arg2_0 =
//│ 		  (match _lh_unify'_arg2_0 with
//│ 		    | `LH_P2(_lh_unify'_LH_P2_0_0, _lh_unify'_LH_P2_1_0) -> 
//│ 		      (match _lh_unify'_LH_P2_0_0 with
//│ 		        | `Var(_lh_unify'_Var_0_0) -> 
//│ 		          (((univar_lh__d1 _lh_unify'_arg1_0) _lh_unify'_Var_0_0) _lh_unify'_LH_P2_1_0)
//│ 		        | `Func(_lh_unify'_Func_0_0, _lh_unify'_Func_1_0) -> 
//│ 		          (match _lh_unify'_LH_P2_1_0 with
//│ 		            | `Var(_lh_unify'_Var_0_1) -> 
//│ 		              (((univar_lh__d1 _lh_unify'_arg1_0) _lh_unify'_Var_0_1) (`Func(_lh_unify'_Func_0_0, _lh_unify'_Func_1_0)))
//│ 		            | `Func(_lh_unify'_Func_0_1, _lh_unify'_Func_1_1) -> 
//│ 		              (if (_lh_unify'_Func_0_0 = _lh_unify'_Func_0_1) then
//│ 		                (((prop_fold_lh__d1 unify'_lh__d1) _lh_unify'_arg1_0) ((zip_lh__d1 _lh_unify'_Func_1_0) _lh_unify'_Func_1_1))
//│ 		              else
//│ 		                croak_lh__d4))))
//│ 		and
//│ 		univar_lh__d1 _lh_univar_arg1_0 _lh_univar_arg2_0 _lh_univar_arg3_0 =
//│ 		  (let rec t_0 = ((assoc_lh__d1 _lh_univar_arg1_0) _lh_univar_arg2_0) in
//│ 		    (if (exists_lh__d2 t_0) then
//│ 		      ((unify'_lh__d1 _lh_univar_arg1_0) (`LH_P2((the_lh__d2 t_0), _lh_univar_arg3_0)))
//│ 		    else
//│ 		      (if ((eqExpr_lh__d3 _lh_univar_arg3_0) (`Var(_lh_univar_arg2_0))) then
//│ 		        (succeed_lh__d4 _lh_univar_arg1_0)
//│ 		      else
//│ 		        (let rec u'_0 = ((sub_lh__d2 _lh_univar_arg3_0) _lh_univar_arg1_0) in
//│ 		          (if (not ((occurs_lh__d2 _lh_univar_arg2_0) u'_0)) then
//│ 		            (succeed_lh__d4 ((comp_sub_lh__d1 (`LH_C((`LH_P2(_lh_univar_arg2_0, u'_0)), (`LH_N)))) _lh_univar_arg1_0))
//│ 		          else
//│ 		            croak_lh__d4)))));;
//│ 		let rec unify_lh__d1 _lh_unify_arg1_0 _lh_unify_arg2_0 =
//│ 		  ((unify'_lh__d1 (`LH_N)) (`LH_P2(_lh_unify_arg1_0, _lh_unify_arg2_0)));;
//│ 		let rec lhs_lh__d4 _lh_lhs_arg1_3 =
//│ 		  (match _lh_lhs_arg1_3 with
//│ 		    | `Eqn(_lh_lhs_Eqn_0_3, _lh_lhs_Eqn_1_3) -> 
//│ 		      (match _lh_lhs_Eqn_1_3 with
//│ 		        | `LH_P2(_lh_lhs_LH_P2_0_3, _lh_lhs_LH_P2_1_3) -> 
//│ 		          _lh_lhs_LH_P2_0_3));;
//│ 		let rec stand_eqn_lh__d2 _lh_stand_eqn_arg1_1 _lh_stand_eqn_arg2_1 =
//│ 		  (match _lh_stand_eqn_arg2_1 with
//│ 		    | `Eqn(_lh_stand_eqn_Eqn_0_1, _lh_stand_eqn_Eqn_1_1) -> 
//│ 		      (match _lh_stand_eqn_Eqn_1_1 with
//│ 		        | `LH_P2(_lh_stand_eqn_LH_P2_0_1, _lh_stand_eqn_LH_P2_1_1) -> 
//│ 		          (`Eqn(_lh_stand_eqn_Eqn_0_1, (`LH_P2(((stand_lh__d1 _lh_stand_eqn_arg1_1) _lh_stand_eqn_LH_P2_0_1), ((stand_lh__d1 _lh_stand_eqn_arg1_1) _lh_stand_eqn_LH_P2_1_1)))))));;
//│ 		let rec mappend_lh__d1 xs_8 ys_8 =
//│ 		  (match xs_8 with
//│ 		    | `LH_C(h_2_0, t_2_8) -> 
//│ 		      (`LH_C(h_2_0, ((mappend_lh__d1 t_2_8) ys_8)))
//│ 		    | `LH_N -> 
//│ 		      ys_8);;
//│ 		let rec map_lh__d1_d1 f_5 ls_6 =
//│ 		  (match ls_6 with
//│ 		    | `LH_C(h_5, t_8) -> 
//│ 		      (`LH_C((f_5 h_5), ((map_lh__d1_d1 f_5) t_8)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec simplify_lh__d3 _lh_simplify_arg1_2 =
//│ 		  (let rec f_9 = (fun t_1_6 -> 
//│ 		    ((getOrElse_lh__d2 ((lift_lh__d1_d0 f_9) (_lh_simplify_arg1_2 t_1_6))) t_1_6)) in
//│ 		    f_9);;
//│ 		let rec eqExpr_lh__d1 _lh_eqExpr_arg1_2 _lh_eqExpr_arg2_2 =
//│ 		  (match _lh_eqExpr_arg1_2 with
//│ 		    | `Func(_lh_eqExpr_Func_0_4, _lh_eqExpr_Func_1_4) -> 
//│ 		      (match _lh_eqExpr_arg2_2 with
//│ 		        | `Func(_lh_eqExpr_Func_0_5, _lh_eqExpr_Func_1_5) -> 
//│ 		          ((_lh_eqExpr_Func_0_4 = _lh_eqExpr_Func_0_5) && ((eqListExpr_lh__d2 _lh_eqExpr_Func_1_4) _lh_eqExpr_Func_1_5))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Var(_lh_eqExpr_Var_0_4) -> 
//│ 		      (match _lh_eqExpr_arg2_2 with
//│ 		        | `Var(_lh_eqExpr_Var_0_5) -> 
//│ 		          (_lh_eqExpr_Var_0_4 = _lh_eqExpr_Var_0_5)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false)
//│ 		and
//│ 		eqListExpr_lh__d2 _lh_eqListExpr_arg1_0 _lh_eqListExpr_arg2_0 =
//│ 		  (match _lh_eqListExpr_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (match _lh_eqListExpr_arg2_0 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `LH_C(_lh_eqListExpr_LH_C_0_0, _lh_eqListExpr_LH_C_1_0) -> 
//│ 		      (match _lh_eqListExpr_arg2_0 with
//│ 		        | `LH_C(_lh_eqListExpr_LH_C_0_1, _lh_eqListExpr_LH_C_1_1) -> 
//│ 		          (if ((eqExpr_lh__d1 _lh_eqListExpr_LH_C_0_0) _lh_eqListExpr_LH_C_0_1) then
//│ 		            ((eqListExpr_lh__d2 _lh_eqListExpr_LH_C_1_0) _lh_eqListExpr_LH_C_1_1)
//│ 		          else
//│ 		            false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec match'_lh__d1 _lh_match'_arg1_0 _lh_match'_arg2_0 =
//│ 		  (match _lh_match'_arg2_0 with
//│ 		    | `LH_P2(_lh_match'_LH_P2_0_0, _lh_match'_LH_P2_1_0) -> 
//│ 		      (match _lh_match'_LH_P2_0_0 with
//│ 		        | `Var(_lh_match'_Var_0_0) -> 
//│ 		          (let rec u_0 = ((assoc_lh__d1 _lh_match'_arg1_0) _lh_match'_Var_0_0) in
//│ 		            (if (not (exists_lh__d2 u_0)) then
//│ 		              (succeed_lh__d4 (`LH_C((`LH_P2(_lh_match'_Var_0_0, _lh_match'_LH_P2_1_0)), _lh_match'_arg1_0)))
//│ 		            else
//│ 		              (if ((eqExpr_lh__d3 (the_lh__d2 u_0)) _lh_match'_LH_P2_1_0) then
//│ 		                (succeed_lh__d4 _lh_match'_arg1_0)
//│ 		              else
//│ 		                croak_lh__d4)))
//│ 		        | `Func(_lh_match'_Func_0_0, _lh_match'_Func_1_0) -> 
//│ 		          (match _lh_match'_LH_P2_1_0 with
//│ 		            | `Func(_lh_match'_Func_0_1, _lh_match'_Func_1_1) -> 
//│ 		              (if (_lh_match'_Func_0_0 = _lh_match'_Func_0_1) then
//│ 		                (((prop_fold_lh__d1 match'_lh__d1) _lh_match'_arg1_0) ((zip_lh__d1 _lh_match'_Func_1_0) _lh_match'_Func_1_1))
//│ 		              else
//│ 		                croak_lh__d4)
//│ 		            | `Var(_lh_match'_Var_0_1) -> 
//│ 		              croak_lh__d4
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec match_lh__d1 _lh_match_arg1_0 _lh_match_arg2_0 =
//│ 		  ((match'_lh__d1 (`LH_N)) (`LH_P2(_lh_match_arg1_0, _lh_match_arg2_0)));;
//│ 		let rec rewrite_lh__d1 _lh_rewrite_arg1_0 =
//│ 		  (match _lh_rewrite_arg1_0 with
//│ 		    | `Eqn(_lh_rewrite_Eqn_0_0, _lh_rewrite_Eqn_1_0) -> 
//│ 		      (match _lh_rewrite_Eqn_1_0 with
//│ 		        | `LH_P2(_lh_rewrite_LH_P2_0_0, _lh_rewrite_LH_P2_1_0) -> 
//│ 		          (fun _lh_funcomp_x_0 -> 
//│ 		            ((lift_lh__d1_d0 (sub_lh__d2 _lh_rewrite_LH_P2_1_0)) ((match_lh__d1 _lh_rewrite_LH_P2_0_0) _lh_funcomp_x_0)))));;
//│ 		let rec zip_lz_nl_lh__d1 xs_4 ys_4 =
//│ 		  (match ys_4 with
//│ 		    | `LH_C(hy_1, ty_1) -> 
//│ 		      (match (Lazy.force xs_4) with
//│ 		        | `LH_C(hx_1, tx_1) -> 
//│ 		          (`LH_C((`LH_P2(hx_1, hy_1)), ((zip_lz_nl_lh__d1 tx_1) ty_1)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec enumFrom_lh__d1 a_2 =
//│ 		  (lazy (`LH_C(a_2, (enumFrom_lh__d1 (a_2 + 1)))));;
//│ 		let rec subterms_lh__d2 _lh_subterms_arg1_0 =
//│ 		  (match _lh_subterms_arg1_0 with
//│ 		    | `Var(_lh_subterms_Var_0_0) -> 
//│ 		      (`LH_N)
//│ 		    | `Func(_lh_subterms_Func_0_0, _lh_subterms_Func_1_0) -> 
//│ 		      ((mappend_lh__d7 (`LH_C((`LH_P2((`LH_N), (`Func(_lh_subterms_Func_0_0, _lh_subterms_Func_1_0)))), (`LH_N)))) (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		        (match _lh_listcomp_fun_para_1 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		            (match _lh_listcomp_fun_ls_h_1 with
//│ 		              | `LH_P2(_lh_subterms_LH_P2_0_0, _lh_subterms_LH_P2_1_0) -> 
//│ 		                (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		                  (match _lh_listcomp_fun_para_2 with
//│ 		                    | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		                      (match _lh_listcomp_fun_ls_h_2 with
//│ 		                        | `LH_P2(_lh_subterms_LH_P2_0_1, _lh_subterms_LH_P2_1_1) -> 
//│ 		                          (`LH_C((`LH_P2((`LH_C(_lh_subterms_LH_P2_0_0, _lh_subterms_LH_P2_0_1)), _lh_subterms_LH_P2_1_1)), (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2)))
//│ 		                        | _ -> 
//│ 		                          (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2))
//│ 		                    | `LH_N -> 
//│ 		                      (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))) in
//│ 		                  (_lh_listcomp_fun_2 (subterms_lh__d2 _lh_subterms_LH_P2_1_0)))
//│ 		              | _ -> 
//│ 		                (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_1 ((zip_lz_nl_lh__d1 (enumFrom_lh__d1 0)) _lh_subterms_Func_1_0)))));;
//│ 		let rec replace_lh__d2 _lh_replace_arg1_0 _lh_replace_arg2_0 _lh_replace_arg3_0 =
//│ 		  (match _lh_replace_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      _lh_replace_arg3_0
//│ 		    | _ -> 
//│ 		      (match _lh_replace_arg1_0 with
//│ 		        | `Func(_lh_replace_Func_0_0, _lh_replace_Func_1_0) -> 
//│ 		          (match _lh_replace_arg2_0 with
//│ 		            | `LH_C(_lh_replace_LH_C_0_0, _lh_replace_LH_C_1_0) -> 
//│ 		              (`Func(_lh_replace_Func_0_0, (((modify_lh__d1 _lh_replace_Func_1_0) _lh_replace_LH_C_0_0) (fun t_3 -> 
//│ 		                (((replace_lh__d2 t_3) _lh_replace_LH_C_1_0) _lh_replace_arg3_0)))))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error")));;
//│ 		let rec inside_lh__d1 _lh_inside_arg1_0 _lh_inside_arg2_0 =
//│ 		  (first_ok_lh__d1 (let rec _lh_listcomp_fun_5 = (fun _lh_listcomp_fun_para_5 -> 
//│ 		    (match _lh_listcomp_fun_para_5 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_5, _lh_listcomp_fun_ls_t_5) -> 
//│ 		        (match _lh_listcomp_fun_ls_h_5 with
//│ 		          | `LH_P2(_lh_inside_LH_P2_0_0, _lh_inside_LH_P2_1_0) -> 
//│ 		            (`LH_C(((lift_lh__d1_d0 ((replace_lh__d2 _lh_inside_arg2_0) _lh_inside_LH_P2_0_0)) (_lh_inside_arg1_0 _lh_inside_LH_P2_1_0)), (_lh_listcomp_fun_5 _lh_listcomp_fun_ls_t_5)))
//│ 		          | _ -> 
//│ 		            (_lh_listcomp_fun_5 _lh_listcomp_fun_ls_t_5))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_5 (subterms_lh__d2 _lh_inside_arg2_0))));;
//│ 		let rec reduce1_lh__d1 _lh_reduce1_arg1_0 =
//│ 		  (inside_lh__d1 (rewrite_lh__d1 _lh_reduce1_arg1_0));;
//│ 		let rec pair_lh__d2 _lh_pair_arg1_0 _lh_pair_arg2_0 =
//│ 		  (`LH_P2(_lh_pair_arg1_0, _lh_pair_arg2_0));;
//│ 		let rec any_lh__d3 _lh_any_arg1_2 _lh_any_arg2_2 =
//│ 		  (match _lh_any_arg2_2 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_any_LH_C_0_2, _lh_any_LH_C_1_2) -> 
//│ 		      (if (_lh_any_arg1_2 _lh_any_LH_C_0_2) then
//│ 		        true
//│ 		      else
//│ 		        ((any_lh__d3 _lh_any_arg1_2) _lh_any_LH_C_1_2)));;
//│ 		let rec geRewrite_lh__d4 _lh_geRewrite_arg1_0 _lh_geRewrite_arg2_0 _lh_geRewrite_arg3_0 =
//│ 		  ((inList_lh__d1 (_lh_geRewrite_arg1_0 (`LH_P2(_lh_geRewrite_arg2_0, _lh_geRewrite_arg3_0)))) (`LH_C((`Greater), (`LH_C((`Equal), (`LH_N))))));;
//│ 		let rec orElseMap_lh__d3 _lh_orElseMap_arg1_1 _lh_orElseMap_arg2_1 _lh_orElseMap_arg3_1 =
//│ 		  ((orElse_lh__d1 (_lh_orElseMap_arg1_1 _lh_orElseMap_arg3_1)) (_lh_orElseMap_arg2_1 _lh_orElseMap_arg3_1));;
//│ 		let rec croak_lh__d2 =
//│ 		  (`Nothing);;
//│ 		let rec lift_lh__d4 _lh_lift_arg1_6 _lh_lift_arg2_6 =
//│ 		  (match _lh_lift_arg2_6 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_lift_Just_0_6) -> 
//│ 		      (`Just((_lh_lift_arg1_6 _lh_lift_Just_0_6))));;
//│ 		let rec lhs_lh__d2 _lh_lhs_arg1_5 =
//│ 		  (match _lh_lhs_arg1_5 with
//│ 		    | `Eqn(_lh_lhs_Eqn_0_5, _lh_lhs_Eqn_1_5) -> 
//│ 		      (match _lh_lhs_Eqn_1_5 with
//│ 		        | `LH_P2(_lh_lhs_LH_P2_0_5, _lh_lhs_LH_P2_1_5) -> 
//│ 		          _lh_lhs_LH_P2_0_5));;
//│ 		let rec getOrElse_lh__d1 _lh_getOrElse_arg1_1 _lh_getOrElse_arg2_1 =
//│ 		  (match _lh_getOrElse_arg1_1 with
//│ 		    | `Just(_lh_getOrElse_Just_0_1) -> 
//│ 		      _lh_getOrElse_Just_0_1
//│ 		    | `Nothing -> 
//│ 		      _lh_getOrElse_arg2_1);;
//│ 		let rec ltRewrite_lh__d2 _lh_ltRewrite_arg1_2 _lh_ltRewrite_arg2_2 _lh_ltRewrite_arg3_2 =
//│ 		  ((_lh_ltRewrite_arg1_2 (`LH_P2(_lh_ltRewrite_arg2_2, _lh_ltRewrite_arg3_2))) = (`Less));;
//│ 		let rec squash_lh__d2 _lh_squash_arg1_0 =
//│ 		  (match _lh_squash_arg1_0 with
//│ 		    | `Just(_lh_squash_Just_0_0) -> 
//│ 		      _lh_squash_Just_0_0
//│ 		    | `Nothing -> 
//│ 		      (`Nothing));;
//│ 		let rec foldr_lh__d1 f_1_9 i_2 ls_2_0 =
//│ 		  (match ls_2_0 with
//│ 		    | `LH_C(h_2_6, t_3_4) -> 
//│ 		      ((f_1_9 h_2_6) (((foldr_lh__d1 f_1_9) i_2) t_3_4))
//│ 		    | `LH_N -> 
//│ 		      i_2);;
//│ 		let rec lift_lh__d7 _lh_lift_arg1_3 _lh_lift_arg2_3 =
//│ 		  (match _lh_lift_arg2_3 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_lift_Just_0_3) -> 
//│ 		      (`Just((_lh_lift_arg1_3 _lh_lift_Just_0_3))));;
//│ 		let rec succeed_lh__d1 _lh_succeed_arg1_3 =
//│ 		  (`Just(_lh_succeed_arg1_3));;
//│ 		let rec mappend_lh__d2 xs_7 ys_7 =
//│ 		  (match xs_7 with
//│ 		    | `LH_C(h_1_9, t_2_7) -> 
//│ 		      (`LH_C(h_1_9, ((mappend_lh__d2 t_2_7) ys_7)))
//│ 		    | `LH_N -> 
//│ 		      ys_7);;
//│ 		let rec eqpr_lh__d1 _lh_eqpr_arg1_0 =
//│ 		  (match _lh_eqpr_arg1_0 with
//│ 		    | `Eqn(_lh_eqpr_Eqn_0_0, _lh_eqpr_Eqn_1_0) -> 
//│ 		      _lh_eqpr_Eqn_1_0);;
//│ 		let rec all_lh__d5 _lh_all_arg1_1 _lh_all_arg2_1 =
//│ 		  (match _lh_all_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_all_LH_C_0_1, _lh_all_LH_C_1_1) -> 
//│ 		      (if (_lh_all_arg1_1 _lh_all_LH_C_0_1) then
//│ 		        ((all_lh__d5 _lh_all_arg1_1) _lh_all_LH_C_1_1)
//│ 		      else
//│ 		        false));;
//│ 		let rec lift_lh__d5 _lh_lift_arg1_5 _lh_lift_arg2_5 =
//│ 		  (match _lh_lift_arg2_5 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_lift_Just_0_5) -> 
//│ 		      (`Just((_lh_lift_arg1_5 _lh_lift_Just_0_5))));;
//│ 		let rec quant_lh__d1_d0 _lh_quant_arg1_0 _lh_quant_arg2_0 _lh_quant_arg3_0 _lh_quant_arg4_0 =
//│ 		  (let rec p_0 = (fun x_2 -> 
//│ 		    ((_lh_quant_arg2_0 x_2) _lh_quant_arg3_0)) in
//│ 		    ((_lh_quant_arg1_0 p_0) _lh_quant_arg4_0));;
//│ 		let rec lhs_lh__d1 _lh_lhs_arg1_6 =
//│ 		  (match _lh_lhs_arg1_6 with
//│ 		    | `Eqn(_lh_lhs_Eqn_0_6, _lh_lhs_Eqn_1_6) -> 
//│ 		      (match _lh_lhs_Eqn_1_6 with
//│ 		        | `LH_P2(_lh_lhs_LH_P2_0_6, _lh_lhs_LH_P2_1_6) -> 
//│ 		          _lh_lhs_LH_P2_0_6));;
//│ 		let rec pair_lh__d1 _lh_pair_arg1_1 _lh_pair_arg2_1 =
//│ 		  (`LH_P2(_lh_pair_arg1_1, _lh_pair_arg2_1));;
//│ 		let rec lift_lh__d8 _lh_lift_arg1_2 _lh_lift_arg2_2 =
//│ 		  (match _lh_lift_arg2_2 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_lift_Just_0_2) -> 
//│ 		      (`Just((_lh_lift_arg1_2 _lh_lift_Just_0_2))));;
//│ 		let rec mappend_lh__d5 xs_3 ys_3 =
//│ 		  (match xs_3 with
//│ 		    | `LH_C(h_1_5, t_2_3) -> 
//│ 		      (`LH_C(h_1_5, ((mappend_lh__d5 t_2_3) ys_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_3);;
//│ 		let rec any_lh__d2 _lh_any_arg1_3 _lh_any_arg2_3 =
//│ 		  (match _lh_any_arg2_3 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_any_LH_C_0_3, _lh_any_LH_C_1_3) -> 
//│ 		      (if (_lh_any_arg1_3 _lh_any_LH_C_0_3) then
//│ 		        true
//│ 		      else
//│ 		        ((any_lh__d2 _lh_any_arg1_3) _lh_any_LH_C_1_3)));;
//│ 		let rec fst_lh__d2 _lh_fst_arg1_2 =
//│ 		  (match _lh_fst_arg1_2 with
//│ 		    | `LH_P2(_lh_fst_LH_P2_0_2, _lh_fst_LH_P2_1_2) -> 
//│ 		      _lh_fst_LH_P2_0_2);;
//│ 		let rec lift_lh__d3 _lh_lift_arg1_7 _lh_lift_arg2_7 =
//│ 		  (match _lh_lift_arg2_7 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_lift_Just_0_7) -> 
//│ 		      (`Just((_lh_lift_arg1_7 _lh_lift_Just_0_7))));;
//│ 		let rec snd_lh__d1 _lh_snd_arg1_2 =
//│ 		  (match _lh_snd_arg1_2 with
//│ 		    | `LH_P2(_lh_snd_LH_P2_0_2, _lh_snd_LH_P2_1_2) -> 
//│ 		      _lh_snd_LH_P2_1_2);;
//│ 		let rec quant_lh__d2 _lh_quant_arg1_8 _lh_quant_arg2_8 _lh_quant_arg3_8 _lh_quant_arg4_8 =
//│ 		  (let rec p_8 = (fun x_1_4 -> 
//│ 		    ((_lh_quant_arg2_8 x_1_4) _lh_quant_arg3_8)) in
//│ 		    ((_lh_quant_arg1_8 p_8) _lh_quant_arg4_8));;
//│ 		let rec the_lh__d1 _lh_the_arg1_1 =
//│ 		  (match _lh_the_arg1_1 with
//│ 		    | `Just(_lh_the_Just_0_1) -> 
//│ 		      _lh_the_Just_0_1
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec cross_lh__d3 _lh_cross_arg1_0 _lh_cross_arg2_0 _lh_cross_arg3_0 =
//│ 		  (match _lh_cross_arg3_0 with
//│ 		    | `LH_P2(_lh_cross_LH_P2_0_0, _lh_cross_LH_P2_1_0) -> 
//│ 		      (`LH_P2((_lh_cross_arg1_0 _lh_cross_LH_P2_0_0), (_lh_cross_arg2_0 _lh_cross_LH_P2_1_0))));;
//│ 		let rec quant_lh__d9 _lh_quant_arg1_1 _lh_quant_arg2_1 _lh_quant_arg3_1 _lh_quant_arg4_1 =
//│ 		  (let rec p_1 = (fun x_3 -> 
//│ 		    ((_lh_quant_arg2_1 x_3) _lh_quant_arg3_1)) in
//│ 		    ((_lh_quant_arg1_1 p_1) _lh_quant_arg4_1));;
//│ 		let rec eqno_lh__d1 _lh_eqno_arg1_0 =
//│ 		  (match _lh_eqno_arg1_0 with
//│ 		    | `Eqn(_lh_eqno_Eqn_0_0, _lh_eqno_Eqn_1_0) -> 
//│ 		      (match _lh_eqno_Eqn_1_0 with
//│ 		        | `LH_P2(_lh_eqno_LH_P2_0_0, _lh_eqno_LH_P2_1_0) -> 
//│ 		          _lh_eqno_Eqn_0_0));;
//│ 		let rec dropWhile_lh__d1 _lh_dropWhile_arg1_1 _lh_dropWhile_arg2_1 =
//│ 		  (match _lh_dropWhile_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_dropWhile_LH_C_0_1, _lh_dropWhile_LH_C_1_1) -> 
//│ 		      (if (_lh_dropWhile_arg1_1 _lh_dropWhile_LH_C_0_1) then
//│ 		        ((dropWhile_lh__d1 _lh_dropWhile_arg1_1) _lh_dropWhile_LH_C_1_1)
//│ 		      else
//│ 		        (`LH_C(_lh_dropWhile_LH_C_0_1, _lh_dropWhile_LH_C_1_1))));;
//│ 		let rec dropWhile_lh__d2 _lh_dropWhile_arg1_0 _lh_dropWhile_arg2_0 =
//│ 		  (match _lh_dropWhile_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_dropWhile_LH_C_0_0, _lh_dropWhile_LH_C_1_0) -> 
//│ 		      (if (_lh_dropWhile_arg1_0 _lh_dropWhile_LH_C_0_0) then
//│ 		        ((dropWhile_lh__d2 _lh_dropWhile_arg1_0) _lh_dropWhile_LH_C_1_0)
//│ 		      else
//│ 		        (`LH_C(_lh_dropWhile_LH_C_0_0, _lh_dropWhile_LH_C_1_0))));;
//│ 		let rec mappend_lh__d6 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(h_9, t_1_4) -> 
//│ 		      (`LH_C(h_9, ((mappend_lh__d6 t_1_4) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec any_lh__d4 _lh_any_arg1_1 _lh_any_arg2_1 =
//│ 		  (match _lh_any_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_any_LH_C_0_1, _lh_any_LH_C_1_1) -> 
//│ 		      (if (_lh_any_arg1_1 _lh_any_LH_C_0_1) then
//│ 		        true
//│ 		      else
//│ 		        ((any_lh__d4 _lh_any_arg1_1) _lh_any_LH_C_1_1)));;
//│ 		let rec atIndex_lh__d3 n_0 ls_7 =
//│ 		  (if (n_0 < 0) then
//│ 		    (failwith "lh_default_error")
//│ 		  else
//│ 		    (match ls_7 with
//│ 		      | `LH_C(h_6, t_9) -> 
//│ 		        (if (n_0 = 0) then
//│ 		          h_6
//│ 		        else
//│ 		          ((atIndex_lh__d3 (n_0 - 1)) t_9))
//│ 		      | `LH_N -> 
//│ 		        (failwith "lh_default_error")));;
//│ 		let rec map_lh__d6 f_1_5 ls_1_4 =
//│ 		  (match ls_1_4 with
//│ 		    | `LH_C(h_2_1, t_2_9) -> 
//│ 		      (`LH_C((f_1_5 h_2_1), ((map_lh__d6 f_1_5) t_2_9)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d1_d2 f_4 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_4, t_7) -> 
//│ 		      (`LH_C((f_4 h_4), ((map_lh__d1_d2 f_4) t_7)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec sub_lh__d1 _lh_sub_arg1_1 _lh_sub_arg2_1 =
//│ 		  (((expr_fold_lh__d1 (fun x_1_2 y_2 -> 
//│ 		    (`Func(x_1_2, y_2)))) (apply_lh__d1 _lh_sub_arg2_1)) _lh_sub_arg1_1);;
//│ 		let rec mappend_lh__d4 xs_5 ys_5 =
//│ 		  (match xs_5 with
//│ 		    | `LH_C(h_1_7, t_2_5) -> 
//│ 		      (`LH_C(h_1_7, ((mappend_lh__d4 t_2_5) ys_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_5);;
//│ 		let rec map_lh__d2 f_2_0 ls_2_1 =
//│ 		  (match ls_2_1 with
//│ 		    | `LH_C(h_2_7, t_3_5) -> 
//│ 		      (`LH_C((f_2_0 h_2_7), ((map_lh__d2 f_2_0) t_3_5)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec lhs_lh__d3 _lh_lhs_arg1_4 =
//│ 		  (match _lh_lhs_arg1_4 with
//│ 		    | `Eqn(_lh_lhs_Eqn_0_4, _lh_lhs_Eqn_1_4) -> 
//│ 		      (match _lh_lhs_Eqn_1_4 with
//│ 		        | `LH_P2(_lh_lhs_LH_P2_0_4, _lh_lhs_LH_P2_1_4) -> 
//│ 		          _lh_lhs_LH_P2_0_4));;
//│ 		let rec fst_lh__d1 _lh_fst_arg1_3 =
//│ 		  (match _lh_fst_arg1_3 with
//│ 		    | `LH_P2(_lh_fst_LH_P2_0_3, _lh_fst_LH_P2_1_3) -> 
//│ 		      _lh_fst_LH_P2_0_3);;
//│ 		let rec tail_lh__d1 ls_1_8 =
//│ 		  (match ls_1_8 with
//│ 		    | `LH_C(h_2_4, t_3_2) -> 
//│ 		      t_3_2
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec quant_lh__d7 _lh_quant_arg1_3 _lh_quant_arg2_3 _lh_quant_arg3_3 _lh_quant_arg4_3 =
//│ 		  (let rec p_3 = (fun x_6 -> 
//│ 		    ((_lh_quant_arg2_3 x_6) _lh_quant_arg3_3)) in
//│ 		    ((_lh_quant_arg1_3 p_3) _lh_quant_arg4_3));;
//│ 		let rec fst_lh__d3 _lh_fst_arg1_1 =
//│ 		  (match _lh_fst_arg1_1 with
//│ 		    | `LH_P2(_lh_fst_LH_P2_0_1, _lh_fst_LH_P2_1_1) -> 
//│ 		      _lh_fst_LH_P2_0_1);;
//│ 		let rec map_lh__d1 f_2_1 ls_2_2 =
//│ 		  (match ls_2_2 with
//│ 		    | `LH_C(h_2_8, t_3_6) -> 
//│ 		      (`LH_C((f_2_1 h_2_8), ((map_lh__d1 f_2_1) t_3_6)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec snd_lh__d3 _lh_snd_arg1_0 =
//│ 		  (match _lh_snd_arg1_0 with
//│ 		    | `LH_P2(_lh_snd_LH_P2_0_0, _lh_snd_LH_P2_1_0) -> 
//│ 		      _lh_snd_LH_P2_1_0);;
//│ 		let rec all_lh__d6 _lh_all_arg1_0 _lh_all_arg2_0 =
//│ 		  (match _lh_all_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_all_LH_C_0_0, _lh_all_LH_C_1_0) -> 
//│ 		      (if (_lh_all_arg1_0 _lh_all_LH_C_0_0) then
//│ 		        ((all_lh__d6 _lh_all_arg1_0) _lh_all_LH_C_1_0)
//│ 		      else
//│ 		        false));;
//│ 		let rec ltRewrite_lh__d3 _lh_ltRewrite_arg1_1 _lh_ltRewrite_arg2_1 _lh_ltRewrite_arg3_1 =
//│ 		  ((_lh_ltRewrite_arg1_1 (`LH_P2(_lh_ltRewrite_arg2_1, _lh_ltRewrite_arg3_1))) = (`Less));;
//│ 		let rec all_lh__d4 _lh_all_arg1_2 _lh_all_arg2_2 =
//│ 		  (match _lh_all_arg2_2 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_all_LH_C_0_2, _lh_all_LH_C_1_2) -> 
//│ 		      (if (_lh_all_arg1_2 _lh_all_LH_C_0_2) then
//│ 		        ((all_lh__d4 _lh_all_arg1_2) _lh_all_LH_C_1_2)
//│ 		      else
//│ 		        false));;
//│ 		let rec succeed_lh__d3 _lh_succeed_arg1_1 =
//│ 		  (`Just(_lh_succeed_arg1_1));;
//│ 		let rec squash_lh__d1 _lh_squash_arg1_1 =
//│ 		  (match _lh_squash_arg1_1 with
//│ 		    | `Just(_lh_squash_Just_0_1) -> 
//│ 		      _lh_squash_Just_0_1
//│ 		    | `Nothing -> 
//│ 		      (`Nothing));;
//│ 		let rec try_all_lh__d1 _lh_try_all_arg1_0 =
//│ 		  (((foldr_lh__d2 orElseMap_lh__d4) (fun dum_0 -> 
//│ 		    croak_lh__d4)) _lh_try_all_arg1_0);;
//│ 		let rec ltRewrite_lh__d4 _lh_ltRewrite_arg1_0 _lh_ltRewrite_arg2_0 _lh_ltRewrite_arg3_0 =
//│ 		  ((_lh_ltRewrite_arg1_0 (`LH_P2(_lh_ltRewrite_arg2_0, _lh_ltRewrite_arg3_0))) = (`Less));;
//│ 		let rec exists_lh__d1 _lh_exists_arg1_1 =
//│ 		  (match _lh_exists_arg1_1 with
//│ 		    | `Nothing -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      true);;
//│ 		let rec all_lh__d2 _lh_all_arg1_4 _lh_all_arg2_4 =
//│ 		  (match _lh_all_arg2_4 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_all_LH_C_0_4, _lh_all_LH_C_1_4) -> 
//│ 		      (if (_lh_all_arg1_4 _lh_all_LH_C_0_4) then
//│ 		        ((all_lh__d2 _lh_all_arg1_4) _lh_all_LH_C_1_4)
//│ 		      else
//│ 		        false));;
//│ 		let rec gtRewrite_lh__d1 _lh_gtRewrite_arg1_0 _lh_gtRewrite_arg2_0 _lh_gtRewrite_arg3_0 =
//│ 		  ((_lh_gtRewrite_arg1_0 (`LH_P2(_lh_gtRewrite_arg2_0, _lh_gtRewrite_arg3_0))) = (`Greater));;
//│ 		let rec simplify_lh__d2 _lh_simplify_arg1_3 =
//│ 		  (let rec f_1_2 = (fun t_1_9 -> 
//│ 		    ((getOrElse_lh__d2 ((lift_lh__d1_d0 f_1_2) (_lh_simplify_arg1_3 t_1_9))) t_1_9)) in
//│ 		    f_1_2);;
//│ 		let rec lhs_lh__d7 _lh_lhs_arg1_0 =
//│ 		  (match _lh_lhs_arg1_0 with
//│ 		    | `Eqn(_lh_lhs_Eqn_0_0, _lh_lhs_Eqn_1_0) -> 
//│ 		      (match _lh_lhs_Eqn_1_0 with
//│ 		        | `LH_P2(_lh_lhs_LH_P2_0_0, _lh_lhs_LH_P2_1_0) -> 
//│ 		          _lh_lhs_LH_P2_0_0));;
//│ 		let rec occurs_lh__d1 _lh_occurs_arg1_1 =
//│ 		  ((expr_fold_lh__d1 (fun dum_3 -> 
//│ 		    or_lh__d1)) (fun x_1_5 -> 
//│ 		    (x_1_5 = _lh_occurs_arg1_1)));;
//│ 		let rec geRewrite_lh__d1 _lh_geRewrite_arg1_3 _lh_geRewrite_arg2_3 _lh_geRewrite_arg3_3 =
//│ 		  ((inList_lh__d1 (_lh_geRewrite_arg1_3 (`LH_P2(_lh_geRewrite_arg2_3, _lh_geRewrite_arg3_3)))) (`LH_C((`Greater), (`LH_C((`Equal), (`LH_N))))));;
//│ 		let rec succeed_lh__d2 _lh_succeed_arg1_2 =
//│ 		  (`Just(_lh_succeed_arg1_2));;
//│ 		let rec quant_lh__d1 _lh_quant_arg1_9 _lh_quant_arg2_9 _lh_quant_arg3_9 _lh_quant_arg4_9 =
//│ 		  (let rec p_9 = (fun x_1_6 -> 
//│ 		    ((_lh_quant_arg2_9 x_1_6) _lh_quant_arg3_9)) in
//│ 		    ((_lh_quant_arg1_9 p_9) _lh_quant_arg4_9));;
//│ 		let rec map_lh__d5 f_1_6 ls_1_6 =
//│ 		  (match ls_1_6 with
//│ 		    | `LH_C(h_2_2, t_3_0) -> 
//│ 		      (`LH_C((f_1_6 h_2_2), ((map_lh__d5 f_1_6) t_3_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec lift_lh__d2 _lh_lift_arg1_8 _lh_lift_arg2_8 =
//│ 		  (match _lh_lift_arg2_8 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_lift_Just_0_8) -> 
//│ 		      (`Just((_lh_lift_arg1_8 _lh_lift_Just_0_8))));;
//│ 		let rec lift_lh__d9 _lh_lift_arg1_1 _lh_lift_arg2_1 =
//│ 		  (match _lh_lift_arg2_1 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_lift_Just_0_1) -> 
//│ 		      (`Just((_lh_lift_arg1_1 _lh_lift_Just_0_1))));;
//│ 		let rec quant_lh__d6 _lh_quant_arg1_4 _lh_quant_arg2_4 _lh_quant_arg3_4 _lh_quant_arg4_4 =
//│ 		  (let rec p_4 = (fun x_7 -> 
//│ 		    ((_lh_quant_arg2_4 x_7) _lh_quant_arg3_4)) in
//│ 		    ((_lh_quant_arg1_4 p_4) _lh_quant_arg4_4));;
//│ 		let rec lift_lh__d6 _lh_lift_arg1_4 _lh_lift_arg2_4 =
//│ 		  (match _lh_lift_arg2_4 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_lift_Just_0_4) -> 
//│ 		      (`Just((_lh_lift_arg1_4 _lh_lift_Just_0_4))));;
//│ 		let rec ltRewrite_lh__d1 _lh_ltRewrite_arg1_3 _lh_ltRewrite_arg2_3 _lh_ltRewrite_arg3_3 =
//│ 		  ((_lh_ltRewrite_arg1_3 (`LH_P2(_lh_ltRewrite_arg2_3, _lh_ltRewrite_arg3_3))) = (`Less));;
//│ 		let rec lhs_lh__d6 _lh_lhs_arg1_1 =
//│ 		  (match _lh_lhs_arg1_1 with
//│ 		    | `Eqn(_lh_lhs_Eqn_0_1, _lh_lhs_Eqn_1_1) -> 
//│ 		      (match _lh_lhs_Eqn_1_1 with
//│ 		        | `LH_P2(_lh_lhs_LH_P2_0_1, _lh_lhs_LH_P2_1_1) -> 
//│ 		          _lh_lhs_LH_P2_0_1));;
//│ 		let rec filter_lh__d1 f_0 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_1, t_2) -> 
//│ 		      (if (f_0 h_1) then
//│ 		        (`LH_C(h_1, ((filter_lh__d1 f_0) t_2)))
//│ 		      else
//│ 		        ((filter_lh__d1 f_0) t_2))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_dnet_lh__d1 _lh_map_dnet_arg1_0 _lh_map_dnet_arg2_0 =
//│ 		  (match _lh_map_dnet_arg2_0 with
//│ 		    | `Switch(_lh_map_dnet_Switch_0_0, _lh_map_dnet_Switch_1_0) -> 
//│ 		      (`Switch(((map_lh__d1_d3 ((cross_lh__d3 (fun x_0 -> 
//│ 		        x_0)) (map_dnet_lh__d1 _lh_map_dnet_arg1_0))) _lh_map_dnet_Switch_0_0), ((map_dnet_lh__d1 _lh_map_dnet_arg1_0) _lh_map_dnet_Switch_1_0)))
//│ 		    | `Return(_lh_map_dnet_Return_0_0) -> 
//│ 		      (`Return((_lh_map_dnet_arg1_0 _lh_map_dnet_Return_0_0))));;
//│ 		let rec delete_eqns_lh__d1 _lh_delete_eqns_arg1_0 =
//│ 		  (let rec ok_0 = (fun e_0 -> 
//│ 		    (not ((inList_lh__d1 (eqno_lh__d1 e_0)) _lh_delete_eqns_arg1_0))) in
//│ 		    (map_dnet_lh__d1 (filter_lh__d1 ok_0)));;
//│ 		let rec croak_lh__d3 =
//│ 		  (`Nothing);;
//│ 		let rec all_lh__d3 _lh_all_arg1_3 _lh_all_arg2_3 =
//│ 		  (match _lh_all_arg2_3 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_all_LH_C_0_3, _lh_all_LH_C_1_3) -> 
//│ 		      (if (_lh_all_arg1_3 _lh_all_LH_C_0_3) then
//│ 		        ((all_lh__d3 _lh_all_arg1_3) _lh_all_LH_C_1_3)
//│ 		      else
//│ 		        false));;
//│ 		let rec subterms_lh__d1 _lh_subterms_arg1_1 =
//│ 		  (match _lh_subterms_arg1_1 with
//│ 		    | `Var(_lh_subterms_Var_0_1) -> 
//│ 		      (`LH_N)
//│ 		    | `Func(_lh_subterms_Func_0_1, _lh_subterms_Func_1_1) -> 
//│ 		      ((mappend_lh__d7 (`LH_C((`LH_P2((`LH_N), (`Func(_lh_subterms_Func_0_1, _lh_subterms_Func_1_1)))), (`LH_N)))) (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		        (match _lh_listcomp_fun_para_3 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_3, _lh_listcomp_fun_ls_t_3) -> 
//│ 		            (match _lh_listcomp_fun_ls_h_3 with
//│ 		              | `LH_P2(_lh_subterms_LH_P2_0_2, _lh_subterms_LH_P2_1_2) -> 
//│ 		                (let rec _lh_listcomp_fun_4 = (fun _lh_listcomp_fun_para_4 -> 
//│ 		                  (match _lh_listcomp_fun_para_4 with
//│ 		                    | `LH_C(_lh_listcomp_fun_ls_h_4, _lh_listcomp_fun_ls_t_4) -> 
//│ 		                      (match _lh_listcomp_fun_ls_h_4 with
//│ 		                        | `LH_P2(_lh_subterms_LH_P2_0_3, _lh_subterms_LH_P2_1_3) -> 
//│ 		                          (`LH_C((`LH_P2((`LH_C(_lh_subterms_LH_P2_0_2, _lh_subterms_LH_P2_0_3)), _lh_subterms_LH_P2_1_3)), (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4)))
//│ 		                        | _ -> 
//│ 		                          (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4))
//│ 		                    | `LH_N -> 
//│ 		                      (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3))) in
//│ 		                  (_lh_listcomp_fun_4 (subterms_lh__d1 _lh_subterms_LH_P2_1_2)))
//│ 		              | _ -> 
//│ 		                (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_3 ((zip_lz_nl_lh__d1 (enumFrom_lh__d1 0)) _lh_subterms_Func_1_1)))));;
//│ 		let rec quant_lh__d8 _lh_quant_arg1_2 _lh_quant_arg2_2 _lh_quant_arg3_2 _lh_quant_arg4_2 =
//│ 		  (let rec p_2 = (fun x_5 -> 
//│ 		    ((_lh_quant_arg2_2 x_5) _lh_quant_arg3_2)) in
//│ 		    ((_lh_quant_arg1_2 p_2) _lh_quant_arg4_2));;
//│ 		let rec map_lh__d4 f_1_7 ls_1_7 =
//│ 		  (match ls_1_7 with
//│ 		    | `LH_C(h_2_3, t_3_1) -> 
//│ 		      (`LH_C((f_1_7 h_2_3), ((map_lh__d4 f_1_7) t_3_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec geRewrite_lh__d2 _lh_geRewrite_arg1_2 _lh_geRewrite_arg2_2 _lh_geRewrite_arg3_2 =
//│ 		  ((inList_lh__d1 (_lh_geRewrite_arg1_2 (`LH_P2(_lh_geRewrite_arg2_2, _lh_geRewrite_arg3_2)))) (`LH_C((`Greater), (`LH_C((`Equal), (`LH_N))))));;
//│ 		let rec orElseMap_lh__d1 _lh_orElseMap_arg1_3 _lh_orElseMap_arg2_3 _lh_orElseMap_arg3_3 =
//│ 		  ((orElse_lh__d1 (_lh_orElseMap_arg1_3 _lh_orElseMap_arg3_3)) (_lh_orElseMap_arg2_3 _lh_orElseMap_arg3_3));;
//│ 		let rec quant_lh__d3 _lh_quant_arg1_7 _lh_quant_arg2_7 _lh_quant_arg3_7 _lh_quant_arg4_7 =
//│ 		  (let rec p_7 = (fun x_1_3 -> 
//│ 		    ((_lh_quant_arg2_7 x_1_3) _lh_quant_arg3_7)) in
//│ 		    ((_lh_quant_arg1_7 p_7) _lh_quant_arg4_7));;
//│ 		let rec update_alist_lh__d1 _lh_update_alist_arg1_0 _lh_update_alist_arg2_0 _lh_update_alist_arg3_0 =
//│ 		  (let rec upd_0 = (fun ls_1_5 -> 
//│ 		    (let rec _lh_matchIdent_1 = ls_1_5 in
//│ 		      (match _lh_matchIdent_1 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_C((`LH_P2(_lh_update_alist_arg1_0, (_lh_update_alist_arg2_0 _lh_update_alist_arg3_0))), (`LH_N)))
//│ 		        | `LH_C(_lh_update_alist_LH_C_0_0, _lh_update_alist_LH_C_1_0) -> 
//│ 		          (match _lh_update_alist_LH_C_0_0 with
//│ 		            | `LH_P2(_lh_update_alist_LH_P2_0_0, _lh_update_alist_LH_P2_1_0) -> 
//│ 		              (if (_lh_update_alist_arg1_0 = _lh_update_alist_LH_P2_0_0) then
//│ 		                (`LH_C((`LH_P2(_lh_update_alist_arg1_0, (_lh_update_alist_arg2_0 _lh_update_alist_LH_P2_1_0))), _lh_update_alist_LH_C_1_0))
//│ 		              else
//│ 		                (`LH_C((`LH_P2(_lh_update_alist_LH_P2_0_0, _lh_update_alist_LH_P2_1_0)), (upd_0 _lh_update_alist_LH_C_1_0)))))))) in
//│ 		    upd_0);;
//│ 		let rec any_lh__d1 _lh_any_arg1_4 _lh_any_arg2_4 =
//│ 		  (match _lh_any_arg2_4 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_any_LH_C_0_4, _lh_any_LH_C_1_4) -> 
//│ 		      (if (_lh_any_arg1_4 _lh_any_LH_C_0_4) then
//│ 		        true
//│ 		      else
//│ 		        ((any_lh__d1 _lh_any_arg1_4) _lh_any_LH_C_1_4)));;
//│ 		let rec croak_lh__d1 =
//│ 		  (`Nothing);;
//│ 		let rec sift_lh__d1 _lh_sift_arg1_1 =
//│ 		  ((fun _lh_funcomp_x_2 -> 
//│ 		    (concat_lh__d1 ((map_lh__d1_d3 listify_lh__d1) _lh_funcomp_x_2))) _lh_sift_arg1_1);;
//│ 		let rec orElseMap_lh__d2 _lh_orElseMap_arg1_2 _lh_orElseMap_arg2_2 _lh_orElseMap_arg3_2 =
//│ 		  ((orElse_lh__d1 (_lh_orElseMap_arg1_2 _lh_orElseMap_arg3_2)) (_lh_orElseMap_arg2_2 _lh_orElseMap_arg3_2));;
//│ 		let rec map_lh__d1_d0 f_7 ls_8 =
//│ 		  (match ls_8 with
//│ 		    | `LH_C(h_8, t_1_3) -> 
//│ 		      (`LH_C((f_7 h_8), ((map_lh__d1_d0 f_7) t_1_3)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec atIndex_lh__d2 n_1 ls_1_3 =
//│ 		  (if (n_1 < 0) then
//│ 		    (failwith "lh_default_error")
//│ 		  else
//│ 		    (match ls_1_3 with
//│ 		      | `LH_C(h_1_4, t_2_2) -> 
//│ 		        (if (n_1 = 0) then
//│ 		          h_1_4
//│ 		        else
//│ 		          ((atIndex_lh__d2 (n_1 - 1)) t_2_2))
//│ 		      | `LH_N -> 
//│ 		        (failwith "lh_default_error")));;
//│ 		let rec cross_lh__d1 _lh_cross_arg1_2 _lh_cross_arg2_2 _lh_cross_arg3_2 =
//│ 		  (match _lh_cross_arg3_2 with
//│ 		    | `LH_P2(_lh_cross_LH_P2_0_2, _lh_cross_LH_P2_1_2) -> 
//│ 		      (`LH_P2((_lh_cross_arg1_2 _lh_cross_LH_P2_0_2), (_lh_cross_arg2_2 _lh_cross_LH_P2_1_2))));;
//│ 		let rec atIndex_lh__d1 n_2 ls_2_3 =
//│ 		  (if (n_2 < 0) then
//│ 		    (failwith "lh_default_error")
//│ 		  else
//│ 		    (match ls_2_3 with
//│ 		      | `LH_C(h_2_9, t_3_7) -> 
//│ 		        (if (n_2 = 0) then
//│ 		          h_2_9
//│ 		        else
//│ 		          ((atIndex_lh__d1 (n_2 - 1)) t_3_7))
//│ 		      | `LH_N -> 
//│ 		        (failwith "lh_default_error")));;
//│ 		let rec quant_lh__d4 _lh_quant_arg1_6 _lh_quant_arg2_6 _lh_quant_arg3_6 _lh_quant_arg4_6 =
//│ 		  (let rec p_6 = (fun x_1_0 -> 
//│ 		    ((_lh_quant_arg2_6 x_1_0) _lh_quant_arg3_6)) in
//│ 		    ((_lh_quant_arg1_6 p_6) _lh_quant_arg4_6));;
//│ 		let rec map_lh__d8 f_1_1 ls_1_1 =
//│ 		  (match ls_1_1 with
//│ 		    | `LH_C(h_1_2, t_1_8) -> 
//│ 		      (`LH_C((f_1_1 h_1_2), ((map_lh__d8 f_1_1) t_1_8)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec takeWhile_lh__d1 _lh_takeWhile_arg1_0 _lh_takeWhile_arg2_0 =
//│ 		  (match _lh_takeWhile_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_takeWhile_LH_C_0_0, _lh_takeWhile_LH_C_1_0) -> 
//│ 		      (if (_lh_takeWhile_arg1_0 _lh_takeWhile_LH_C_0_0) then
//│ 		        (`LH_C(_lh_takeWhile_LH_C_0_0, ((takeWhile_lh__d1 _lh_takeWhile_arg1_0) _lh_takeWhile_LH_C_1_0)))
//│ 		      else
//│ 		        (`LH_N)));;
//│ 		let rec stand_eqn_lh__d1 _lh_stand_eqn_arg1_2 _lh_stand_eqn_arg2_2 =
//│ 		  (match _lh_stand_eqn_arg2_2 with
//│ 		    | `Eqn(_lh_stand_eqn_Eqn_0_2, _lh_stand_eqn_Eqn_1_2) -> 
//│ 		      (match _lh_stand_eqn_Eqn_1_2 with
//│ 		        | `LH_P2(_lh_stand_eqn_LH_P2_0_2, _lh_stand_eqn_LH_P2_1_2) -> 
//│ 		          (`Eqn(_lh_stand_eqn_Eqn_0_2, (`LH_P2(((stand_lh__d1 _lh_stand_eqn_arg1_2) _lh_stand_eqn_LH_P2_0_2), ((stand_lh__d1 _lh_stand_eqn_arg1_2) _lh_stand_eqn_LH_P2_1_2)))))));;
//│ 		let rec eqExpr_lh__d2 _lh_eqExpr_arg1_1 _lh_eqExpr_arg2_1 =
//│ 		  (match _lh_eqExpr_arg1_1 with
//│ 		    | `Func(_lh_eqExpr_Func_0_2, _lh_eqExpr_Func_1_2) -> 
//│ 		      (match _lh_eqExpr_arg2_1 with
//│ 		        | `Func(_lh_eqExpr_Func_0_3, _lh_eqExpr_Func_1_3) -> 
//│ 		          ((_lh_eqExpr_Func_0_2 = _lh_eqExpr_Func_0_3) && ((eqListExpr_lh__d2 _lh_eqExpr_Func_1_2) _lh_eqExpr_Func_1_3))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Var(_lh_eqExpr_Var_0_2) -> 
//│ 		      (match _lh_eqExpr_arg2_1 with
//│ 		        | `Var(_lh_eqExpr_Var_0_3) -> 
//│ 		          (_lh_eqExpr_Var_0_2 = _lh_eqExpr_Var_0_3)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec result_lh__d1 _lh_result_arg1_0 =
//│ 		  (match _lh_result_arg1_0 with
//│ 		    | `LH_P2(_lh_result_LH_P2_0_0, _lh_result_LH_P2_1_0) -> 
//│ 		      let rec multi_0 = (fun _lh_multi_arg1_0 _lh_multi_arg2_0 -> 
//│ 		        (match _lh_multi_arg2_0 with
//│ 		          | `LH_P2(_lh_multi_LH_P2_0_0, _lh_multi_LH_P2_1_0) -> 
//│ 		            (let rec _lh_matchIdent_2 = ((rem_eq_0 (eqRewrite_lh__d1 _lh_multi_arg1_0)) (`LH_P2(_lh_multi_LH_P2_0_0, _lh_multi_LH_P2_1_0))) in
//│ 		              (match _lh_matchIdent_2 with
//│ 		                | `LH_P2(_lh_multi_LH_P2_0_1, _lh_multi_LH_P2_1_1) -> 
//│ 		                  (if (((dominates_0 _lh_multi_arg1_0) _lh_multi_LH_P2_0_1) _lh_multi_LH_P2_1_1) then
//│ 		                    (`Greater)
//│ 		                  else
//│ 		                    (if (((dominates_0 _lh_multi_arg1_0) _lh_multi_LH_P2_1_1) _lh_multi_LH_P2_0_1) then
//│ 		                      (`Less)
//│ 		                    else
//│ 		                      (`Unrelated)))))))
//│ 		      and rank_order_0 = (fun _lh_rank_order_arg1_0 _lh_rank_order_arg2_0 -> 
//│ 		        (match _lh_rank_order_arg2_0 with
//│ 		          | `LH_P2(_lh_rank_order_LH_P2_0_0, _lh_rank_order_LH_P2_1_0) -> 
//│ 		            (num_order_0 (`LH_P2((_lh_rank_order_arg1_0 _lh_rank_order_LH_P2_0_0), (_lh_rank_order_arg1_0 _lh_rank_order_LH_P2_1_0))))))
//│ 		      and superpose_0 = (fun _lh_superpose_arg1_0 _lh_superpose_arg2_0 -> 
//│ 		        (sift_lh__d1 (let rec _lh_listcomp_fun_6 = (fun _lh_listcomp_fun_para_6 -> 
//│ 		          (match _lh_listcomp_fun_para_6 with
//│ 		            | `LH_C(_lh_listcomp_fun_ls_h_6, _lh_listcomp_fun_ls_t_6) -> 
//│ 		              (match _lh_listcomp_fun_ls_h_6 with
//│ 		                | `LH_P2(_lh_superpose_LH_P2_0_0, _lh_superpose_LH_P2_1_0) -> 
//│ 		                  (`LH_C(((lift_lh__d8 (pair_lh__d2 _lh_superpose_LH_P2_0_0)) ((unify_lh__d1 _lh_superpose_arg1_0) _lh_superpose_LH_P2_1_0)), (_lh_listcomp_fun_6 _lh_listcomp_fun_ls_t_6)))
//│ 		                | _ -> 
//│ 		                  (_lh_listcomp_fun_6 _lh_listcomp_fun_ls_t_6))
//│ 		            | `LH_N -> 
//│ 		              (`LH_N))) in
//│ 		          (_lh_listcomp_fun_6 (subterms_lh__d1 _lh_superpose_arg2_0)))))
//│ 		      and delete_0 = (fun _lh_delete_arg1_0 _lh_delete_arg2_0 _lh_delete_arg3_0 -> 
//│ 		        (match _lh_delete_arg3_0 with
//│ 		          | `LH_N -> 
//│ 		            croak_lh__d4
//│ 		          | `LH_C(_lh_delete_LH_C_0_0, _lh_delete_LH_C_1_0) -> 
//│ 		            (if ((_lh_delete_arg1_0 _lh_delete_arg2_0) _lh_delete_LH_C_0_0) then
//│ 		              (succeed_lh__d1 _lh_delete_LH_C_1_0)
//│ 		            else
//│ 		              ((lift_lh__d7 (fun x_1_7 -> 
//│ 		                (`LH_C(_lh_delete_LH_C_0_0, x_1_7)))) (((delete_0 _lh_delete_arg1_0) _lh_delete_arg2_0) _lh_delete_LH_C_1_0)))))
//│ 		      and rem_eq_0 = (fun _lh_rem_eq_arg1_0 _lh_rem_eq_arg2_0 -> 
//│ 		        (match _lh_rem_eq_arg2_0 with
//│ 		          | `LH_P2(_lh_rem_eq_LH_P2_0_0, _lh_rem_eq_LH_P2_1_0) -> 
//│ 		            (match _lh_rem_eq_LH_P2_0_0 with
//│ 		              | `LH_N -> 
//│ 		                (`LH_P2((`LH_N), _lh_rem_eq_LH_P2_1_0))
//│ 		              | `LH_C(_lh_rem_eq_LH_C_0_0, _lh_rem_eq_LH_C_1_0) -> 
//│ 		                (let rec add_x_0 = (fun xsys_0 -> 
//│ 		                  (let rec _lh_matchIdent_3 = xsys_0 in
//│ 		                    (match _lh_matchIdent_3 with
//│ 		                      | `LH_P2(_lh_rem_eq_LH_P2_0_1, _lh_rem_eq_LH_P2_1_1) -> 
//│ 		                        (`LH_P2((`LH_C(_lh_rem_eq_LH_C_0_0, _lh_rem_eq_LH_P2_0_1)), _lh_rem_eq_LH_P2_1_1))))) in
//│ 		                  ((getOrElse_lh__d1 ((lift_lh__d3 (fun _lh_funcomp_x_3 -> 
//│ 		                    ((rem_eq_0 _lh_rem_eq_arg1_0) ((pair_lh__d1 _lh_rem_eq_LH_C_1_0) _lh_funcomp_x_3)))) (((delete_0 _lh_rem_eq_arg1_0) _lh_rem_eq_LH_C_0_0) _lh_rem_eq_LH_P2_1_0))) (add_x_0 ((rem_eq_0 _lh_rem_eq_arg1_0) (`LH_P2(_lh_rem_eq_LH_C_1_0, _lh_rem_eq_LH_P2_1_0)))))))))
//│ 		      and q_eqn_0 = (fun _lh_q_eqn_arg1_0 -> 
//│ 		        (match _lh_q_eqn_arg1_0 with
//│ 		          | `LH_C(_lh_q_eqn_LH_C_0_0, _lh_q_eqn_LH_C_1_0) -> 
//│ 		            (match _lh_q_eqn_LH_C_1_0 with
//│ 		              | `LH_C(_lh_q_eqn_LH_C_0_1, _lh_q_eqn_LH_C_1_1) -> 
//│ 		                (match _lh_q_eqn_LH_C_1_1 with
//│ 		                  | `LH_C(_lh_q_eqn_LH_C_0_2, _lh_q_eqn_LH_C_1_2) -> 
//│ 		                    (match _lh_q_eqn_LH_C_1_2 with
//│ 		                      | `LH_N -> 
//│ 		                        (`List((`LH_C(_lh_q_eqn_LH_C_0_0, (`LH_C(_lh_q_eqn_LH_C_0_2, (`LH_N)))))))
//│ 		                      | _ -> 
//│ 		                        (failwith "lh_default_error"))
//│ 		                  | _ -> 
//│ 		                    (failwith "lh_default_error"))
//│ 		              | _ -> 
//│ 		                (failwith "lh_default_error"))
//│ 		          | _ -> 
//│ 		            (failwith "lh_default_error")))
//│ 		      and parse_eqn_0 = (fun _lh_parse_eqn_arg1_0 -> 
//│ 		        (let rec _lh_matchIdent_4 = (fst_lh__d3 (the_lh__d2 (p_eqn_0 _lh_parse_eqn_arg1_0))) in
//│ 		          (match _lh_matchIdent_4 with
//│ 		            | `List(_lh_parse_eqn_List_0_0) -> 
//│ 		              (match _lh_parse_eqn_List_0_0 with
//│ 		                | `LH_C(_lh_parse_eqn_LH_C_0_0, _lh_parse_eqn_LH_C_1_0) -> 
//│ 		                  (match _lh_parse_eqn_LH_C_0_0 with
//│ 		                    | `Expr(_lh_parse_eqn_Expr_0_0) -> 
//│ 		                      (match _lh_parse_eqn_LH_C_1_0 with
//│ 		                        | `LH_C(_lh_parse_eqn_LH_C_0_1, _lh_parse_eqn_LH_C_1_1) -> 
//│ 		                          (match _lh_parse_eqn_LH_C_0_1 with
//│ 		                            | `Expr(_lh_parse_eqn_Expr_0_1) -> 
//│ 		                              (match _lh_parse_eqn_LH_C_1_1 with
//│ 		                                | `LH_N -> 
//│ 		                                  (`LH_P2(_lh_parse_eqn_Expr_0_0, _lh_parse_eqn_Expr_0_1))
//│ 		                                | _ -> 
//│ 		                                  (failwith "lh_default_error"))
//│ 		                            | _ -> 
//│ 		                              (failwith "lh_default_error"))
//│ 		                        | _ -> 
//│ 		                          (failwith "lh_default_error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "lh_default_error"))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))))
//│ 		      and addby_0 = (fun _lh_addby_arg1_0 _lh_addby_arg2_0 _lh_addby_arg3_0 -> 
//│ 		        (let rec insert_0 = (fun x_1_8 ls_2_4 -> 
//│ 		          (let rec _lh_matchIdent_5 = ls_2_4 in
//│ 		            (match _lh_matchIdent_5 with
//│ 		              | `LH_N -> 
//│ 		                (`LH_C(x_1_8, (`LH_N)))
//│ 		              | `LH_C(_lh_addby_LH_C_0_0, _lh_addby_LH_C_1_0) -> 
//│ 		                (if ((_lh_addby_arg1_0 x_1_8) <= (_lh_addby_arg1_0 _lh_addby_LH_C_0_0)) then
//│ 		                  (`LH_C(x_1_8, (`LH_C(_lh_addby_LH_C_0_0, _lh_addby_LH_C_1_0))))
//│ 		                else
//│ 		                  (`LH_C(_lh_addby_LH_C_0_0, ((insert_0 x_1_8) _lh_addby_LH_C_1_0))))))) in
//│ 		          (((foldr_lh__d1 insert_0) _lh_addby_arg3_0) _lh_addby_arg2_0)))
//│ 		      and seq2Lzq_0 = (fun _lh_seq2Lzq_arg1_0 _lh_seq2Lzq_arg2_0 _lh_seq2Lzq_arg3_0 -> 
//│ 		        (let rec g_0 = (fun xs_9 -> 
//│ 		          (let rec _lh_matchIdent_6 = xs_9 in
//│ 		            (match _lh_matchIdent_6 with
//│ 		              | `LH_P2(_lh_seq2Lzq_LH_P2_0_0, _lh_seq2Lzq_LH_P2_1_0) -> 
//│ 		                ((lift_lh__d6 ((cross_lh__d1 (_lh_seq2Lzq_arg1_0 _lh_seq2Lzq_LH_P2_0_0)) (fun x_1_9 -> 
//│ 		                  x_1_9))) ((Lazy.force _lh_seq2Lzq_arg3_0) _lh_seq2Lzq_LH_P2_1_0))))) in
//│ 		          (fun _lh_funcomp_x_4 -> 
//│ 		            ((fun _lh_funcomp_x_5 -> 
//│ 		              (squash_lh__d2 ((lift_lh__d5 g_0) _lh_funcomp_x_5))) (_lh_seq2Lzq_arg2_0 _lh_funcomp_x_4)))))
//│ 		      and find_assoc_0 = (fun _lh_find_assoc_arg1_0 _lh_find_assoc_arg2_0 _lh_find_assoc_arg3_0 -> 
//│ 		        (match _lh_find_assoc_arg1_0 with
//│ 		          | `Afunc(_lh_find_assoc_Afunc_0_0) -> 
//│ 		            ((getOrElse_lh__d2 ((lift_lh__d1 (find'_0 _lh_find_assoc_arg2_0)) ((assoc_lh__d1 _lh_find_assoc_arg3_0) _lh_find_assoc_Afunc_0_0))) (`LH_N))
//│ 		          | `Avar -> 
//│ 		            (`LH_N)))
//│ 		      and rpo_0 = (fun _lh_rpo_arg1_0 _lh_rpo_arg2_0 -> 
//│ 		        (let rec rpo'_0 = (fun param_0 -> 
//│ 		          (let rec _lh_matchIdent_7 = param_0 in
//│ 		            (match _lh_matchIdent_7 with
//│ 		              | `LH_P2(_lh_rpo_LH_P2_0_0, _lh_rpo_LH_P2_1_0) -> 
//│ 		                (match _lh_rpo_LH_P2_0_0 with
//│ 		                  | `Var(_lh_rpo_Var_0_0) -> 
//│ 		                    (match _lh_rpo_LH_P2_1_0 with
//│ 		                      | `Var(_lh_rpo_Var_0_1) -> 
//│ 		                        (if (_lh_rpo_Var_0_0 = _lh_rpo_Var_0_1) then
//│ 		                          (`Equal)
//│ 		                        else
//│ 		                          (`Unrelated))
//│ 		                      | `Func(_lh_rpo_Func_0_0, _lh_rpo_Func_1_0) -> 
//│ 		                        (if ((occurs_lh__d1 _lh_rpo_Var_0_0) (`Func(_lh_rpo_Func_0_0, _lh_rpo_Func_1_0))) then
//│ 		                          (`Less)
//│ 		                        else
//│ 		                          (`Unrelated))
//│ 		                      | _ -> 
//│ 		                        (failwith "msg"(`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_N)))))))))))))
//│ 		                  | `Func(_lh_rpo_Func_0_1, _lh_rpo_Func_1_1) -> 
//│ 		                    (match _lh_rpo_LH_P2_1_0 with
//│ 		                      | `Var(_lh_rpo_Var_0_2) -> 
//│ 		                        (if ((occurs_lh__d2 _lh_rpo_Var_0_2) (`Func(_lh_rpo_Func_0_1, _lh_rpo_Func_1_1))) then
//│ 		                          (`Greater)
//│ 		                        else
//│ 		                          (`Unrelated))
//│ 		                      | `Func(_lh_rpo_Func_0_2, _lh_rpo_Func_1_2) -> 
//│ 		                        (let rec _lh_matchIdent_8 = (_lh_rpo_arg1_0 (`LH_P2(_lh_rpo_Func_0_1, _lh_rpo_Func_0_2))) in
//│ 		                          (match _lh_matchIdent_8 with
//│ 		                            | `Equal -> 
//│ 		                              ((_lh_rpo_arg2_0 rpo'_0) (`LH_P2((`Func(_lh_rpo_Func_0_1, _lh_rpo_Func_1_1)), (`Func(_lh_rpo_Func_0_2, _lh_rpo_Func_1_2)))))
//│ 		                            | `Greater -> 
//│ 		                              (if ((((quant_lh__d2 all_lh__d5) (ltRewrite_lh__d1 rpo'_0)) (`Func(_lh_rpo_Func_0_1, _lh_rpo_Func_1_1))) _lh_rpo_Func_1_2) then
//│ 		                                (`Greater)
//│ 		                              else
//│ 		                                (if ((((quant_lh__d1 any_lh__d5) (geRewrite_lh__d3 rpo'_0)) (`Func(_lh_rpo_Func_0_1, _lh_rpo_Func_1_1))) _lh_rpo_Func_1_2) then
//│ 		                                  (`Less)
//│ 		                                else
//│ 		                                  (`Unrelated)))
//│ 		                            | `Less -> 
//│ 		                              (if ((((quant_lh__d8 all_lh__d2) (ltRewrite_lh__d3 rpo'_0)) (`Func(_lh_rpo_Func_0_2, _lh_rpo_Func_1_2))) _lh_rpo_Func_1_1) then
//│ 		                                (`Less)
//│ 		                              else
//│ 		                                (if ((((quant_lh__d5 any_lh__d2) (geRewrite_lh__d1 rpo'_0)) (`Func(_lh_rpo_Func_0_2, _lh_rpo_Func_1_2))) _lh_rpo_Func_1_1) then
//│ 		                                  (`Greater)
//│ 		                                else
//│ 		                                  (`Unrelated)))
//│ 		                            | `Unrelated -> 
//│ 		                              (`Unrelated)))
//│ 		                      | _ -> 
//│ 		                        (failwith "msg"(`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_N)))))))))))))
//│ 		                  | _ -> 
//│ 		                    (failwith "msg"(`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_N)))))))))))))
//│ 		              | _ -> 
//│ 		                (failwith "msg"(`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_N))))))))))))))) in
//│ 		          rpo'_0))
//│ 		      and split_0 = (fun _lh_split_arg1_0 _lh_split_arg2_0 -> 
//│ 		        (let rec tmp_0 = ((zip_lh__d1 ((map_lh__d1_d1 _lh_split_arg1_0) _lh_split_arg2_0)) _lh_split_arg2_0) in
//│ 		          (`LH_P2((let rec _lh_listcomp_fun_7 = (fun _lh_listcomp_fun_para_7 -> 
//│ 		            (match _lh_listcomp_fun_para_7 with
//│ 		              | `LH_C(_lh_listcomp_fun_ls_h_7, _lh_listcomp_fun_ls_t_7) -> 
//│ 		                (match _lh_listcomp_fun_ls_h_7 with
//│ 		                  | `LH_P2(_lh_split_LH_P2_0_0, _lh_split_LH_P2_1_0) -> 
//│ 		                    (if _lh_split_LH_P2_0_0 then
//│ 		                      (`LH_C(_lh_split_LH_P2_1_0, (_lh_listcomp_fun_7 _lh_listcomp_fun_ls_t_7)))
//│ 		                    else
//│ 		                      (_lh_listcomp_fun_7 _lh_listcomp_fun_ls_t_7))
//│ 		                  | _ -> 
//│ 		                    (_lh_listcomp_fun_7 _lh_listcomp_fun_ls_t_7))
//│ 		              | `LH_N -> 
//│ 		                (`LH_N))) in
//│ 		            (_lh_listcomp_fun_7 tmp_0)), (let rec _lh_listcomp_fun_8 = (fun _lh_listcomp_fun_para_8 -> 
//│ 		            (match _lh_listcomp_fun_para_8 with
//│ 		              | `LH_C(_lh_listcomp_fun_ls_h_8, _lh_listcomp_fun_ls_t_8) -> 
//│ 		                (match _lh_listcomp_fun_ls_h_8 with
//│ 		                  | `LH_P2(_lh_split_LH_P2_0_1, _lh_split_LH_P2_1_1) -> 
//│ 		                    (if (not _lh_split_LH_P2_0_1) then
//│ 		                      (`LH_C(_lh_split_LH_P2_1_1, (_lh_listcomp_fun_8 _lh_listcomp_fun_ls_t_8)))
//│ 		                    else
//│ 		                      (_lh_listcomp_fun_8 _lh_listcomp_fun_ls_t_8))
//│ 		                  | _ -> 
//│ 		                    (_lh_listcomp_fun_8 _lh_listcomp_fun_ls_t_8))
//│ 		              | `LH_N -> 
//│ 		                (`LH_N))) in
//│ 		            (_lh_listcomp_fun_8 tmp_0))))))
//│ 		      and build_0 = (fun _lh_build_arg1_0 _lh_build_arg2_0 _lh_funcomp_x_6 -> 
//│ 		        ((lift_lh__d9 ((cross_lh__d3 _lh_build_arg1_0) (fun x_2_0 -> 
//│ 		          x_2_0))) (_lh_build_arg2_0 _lh_funcomp_x_6)))
//│ 		      and process1_0 = (fun _lh_process1_arg1_0 _lh_process1_arg2_0 _lh_process1_arg3_0 _lh_process1_arg4_0 _lh_process1_arg5_0 _lh_process1_arg6_0 -> 
//│ 		        (match _lh_process1_arg6_0 with
//│ 		          | `LH_P2(_lh_process1_LH_P2_0_0, _lh_process1_LH_P2_1_0) -> 
//│ 		            (let rec o_0 = ((fst_lh__d2 _lh_process1_arg1_0) (`LH_P2(_lh_process1_LH_P2_0_0, _lh_process1_LH_P2_1_0))) in
//│ 		              (let rec _lh_matchIdent_9 = o_0 in
//│ 		                (match _lh_matchIdent_9 with
//│ 		                  | `Unrelated -> 
//│ 		                    (((((process_0 _lh_process1_arg1_0) _lh_process1_arg2_0) _lh_process1_arg3_0) _lh_process1_arg4_0) (((add_agenda_0 (fun dum_4 -> 
//│ 		                      1000)) (`LH_C((`LH_P2(_lh_process1_LH_P2_0_0, _lh_process1_LH_P2_1_0)), (`LH_N)))) _lh_process1_arg5_0))
//│ 		                  | `Equal -> 
//│ 		                    (((((process_0 _lh_process1_arg1_0) _lh_process1_arg2_0) _lh_process1_arg3_0) _lh_process1_arg4_0) _lh_process1_arg5_0)
//│ 		                  | _ -> 
//│ 		                    (let rec eqn_0 = (let rec _lh_matchIdent_1_0 = o_0 in
//│ 		                      (match _lh_matchIdent_1_0 with
//│ 		                        | `Greater -> 
//│ 		                          (`Eqn(_lh_process1_arg2_0, (`LH_P2(_lh_process1_LH_P2_0_0, _lh_process1_LH_P2_1_0))))
//│ 		                        | `Less -> 
//│ 		                          (`Eqn(_lh_process1_arg2_0, (`LH_P2(_lh_process1_LH_P2_1_0, _lh_process1_LH_P2_0_0)))))) in
//│ 		                      ((((((process2_0 _lh_process1_arg1_0) (_lh_process1_arg2_0 + 1)) _lh_process1_arg3_0) _lh_process1_arg4_0) _lh_process1_arg5_0) eqn_0)))))))
//│ 		      and p_op_0 = (fun _lh_p_op_arg1_0 -> 
//│ 		        ((sp_0 (string_of_0 opsym_0)) _lh_p_op_arg1_0))
//│ 		      and p_prim_0 = (fun _lh_p_prim_arg1_0 -> 
//│ 		        (((orElseMap_lh__d1 p_name_0) ((seQ_0 (fun x_2_1 -> 
//│ 		          ((atIndex_lh__d2 1) x_2_1))) (`LH_C((look_for_0 '('), (`LH_C(p_expr_0, (`LH_C((look_for_0 ')'), (`LH_N))))))))) _lh_p_prim_arg1_0))
//│ 		      and reducible_0 = (fun _lh_reducible_arg1_0 _lh_reducible_arg2_0 -> 
//│ 		        (match _lh_reducible_arg2_0 with
//│ 		          | `Eqn(_lh_reducible_Eqn_0_0, _lh_reducible_Eqn_1_0) -> 
//│ 		            (match _lh_reducible_Eqn_1_0 with
//│ 		              | `LH_P2(_lh_reducible_LH_P2_0_0, _lh_reducible_LH_P2_1_0) -> 
//│ 		                ((exists_lh__d2 (_lh_reducible_arg1_0 _lh_reducible_LH_P2_0_0)) || (exists_lh__d1 (_lh_reducible_arg1_0 _lh_reducible_LH_P2_1_0))))))
//│ 		      and mk_list_0 = (fun _lh_mk_list_arg1_0 _lh_mk_list_arg2_0 -> 
//│ 		        (match _lh_mk_list_arg2_0 with
//│ 		          | `List(_lh_mk_list_List_0_0) -> 
//│ 		            (_lh_mk_list_arg1_0 _lh_mk_list_List_0_0)
//│ 		          | _ -> 
//│ 		            (failwith "lh_default_error")))
//│ 		      and lexico_0 = (fun _lh_lexico_arg1_0 _lh_lexico_arg2_0 -> 
//│ 		        (match _lh_lexico_arg2_0 with
//│ 		          | `LH_P2(_lh_lexico_LH_P2_0_0, _lh_lexico_LH_P2_1_0) -> 
//│ 		            (match _lh_lexico_LH_P2_0_0 with
//│ 		              | `LH_N -> 
//│ 		                (match _lh_lexico_LH_P2_1_0 with
//│ 		                  | `LH_N -> 
//│ 		                    (`Equal)
//│ 		                  | `LH_C(_lh_lexico_LH_C_0_0, _lh_lexico_LH_C_1_0) -> 
//│ 		                    (`Less))
//│ 		              | `LH_C(_lh_lexico_LH_C_0_1, _lh_lexico_LH_C_1_1) -> 
//│ 		                (match _lh_lexico_LH_P2_1_0 with
//│ 		                  | `LH_N -> 
//│ 		                    (`Greater)
//│ 		                  | `LH_C(_lh_lexico_LH_C_0_2, _lh_lexico_LH_C_1_2) -> 
//│ 		                    ((lex_combine_0 (_lh_lexico_arg1_0 (`LH_P2(_lh_lexico_LH_C_0_1, _lh_lexico_LH_C_0_2)))) ((lexico_0 _lh_lexico_arg1_0) (`LH_P2(_lh_lexico_LH_C_1_1, _lh_lexico_LH_C_1_2))))))))
//│ 		      and find_0 = (fun _lh_find_arg1_0 _lh_find_arg2_0 -> 
//│ 		        ((find'_0 (g_init_0 _lh_find_arg1_0)) _lh_find_arg2_0))
//│ 		      and rank_0 = (fun _lh_rank_arg1_0 -> 
//│ 		        (match _lh_rank_arg1_0 with
//│ 		          | `LH_C(_lh_rank_LH_C_0_0, _lh_rank_LH_C_1_0) -> 
//│ 		            (match _lh_rank_LH_C_0_0 with
//│ 		              | 'E' -> 
//│ 		                (match _lh_rank_LH_C_1_0 with
//│ 		                  | `LH_N -> 
//│ 		                    1
//│ 		                  | _ -> 
//│ 		                    (failwith "lh_default_error"))
//│ 		              | '*' -> 
//│ 		                (match _lh_rank_LH_C_1_0 with
//│ 		                  | `LH_N -> 
//│ 		                    2
//│ 		                  | _ -> 
//│ 		                    (failwith "lh_default_error"))
//│ 		              | 'I' -> 
//│ 		                (match _lh_rank_LH_C_1_0 with
//│ 		                  | `LH_N -> 
//│ 		                    3
//│ 		                  | _ -> 
//│ 		                    (failwith "lh_default_error"))
//│ 		              | _ -> 
//│ 		                (failwith "lh_default_error"))
//│ 		          | _ -> 
//│ 		            (failwith "lh_default_error")))
//│ 		      and is_switch_0 = (fun _lh_is_switch_arg1_0 -> 
//│ 		        (match _lh_is_switch_arg1_0 with
//│ 		          | `Switch(_lh_is_switch_Switch_0_0, _lh_is_switch_Switch_1_0) -> 
//│ 		            true
//│ 		          | `Return(_lh_is_switch_Return_0_0) -> 
//│ 		            false))
//│ 		      and q_func_0 = (fun _lh_q_func_arg1_0 -> 
//│ 		        (match _lh_q_func_arg1_0 with
//│ 		          | `LH_C(_lh_q_func_LH_C_0_0, _lh_q_func_LH_C_1_0) -> 
//│ 		            (match _lh_q_func_LH_C_0_0 with
//│ 		              | `MkString(_lh_q_func_MkString_0_0) -> 
//│ 		                (match _lh_q_func_LH_C_1_0 with
//│ 		                  | `LH_C(_lh_q_func_LH_C_0_1, _lh_q_func_LH_C_1_1) -> 
//│ 		                    (match _lh_q_func_LH_C_1_1 with
//│ 		                      | `LH_C(_lh_q_func_LH_C_0_2, _lh_q_func_LH_C_1_2) -> 
//│ 		                        (match _lh_q_func_LH_C_0_2 with
//│ 		                          | `List(_lh_q_func_List_0_0) -> 
//│ 		                            (match _lh_q_func_LH_C_1_2 with
//│ 		                              | `LH_C(_lh_q_func_LH_C_0_3, _lh_q_func_LH_C_1_3) -> 
//│ 		                                (match _lh_q_func_LH_C_1_3 with
//│ 		                                  | `LH_N -> 
//│ 		                                    (`Expr((`Func(_lh_q_func_MkString_0_0, ((map_lh__d1_d0 unExpr_0) _lh_q_func_List_0_0)))))
//│ 		                                  | _ -> 
//│ 		                                    (failwith "lh_default_error"))
//│ 		                              | _ -> 
//│ 		                                (failwith "lh_default_error"))
//│ 		                          | _ -> 
//│ 		                            (failwith "lh_default_error"))
//│ 		                      | _ -> 
//│ 		                        (failwith "lh_default_error"))
//│ 		                  | _ -> 
//│ 		                    (failwith "lh_default_error"))
//│ 		              | _ -> 
//│ 		                (failwith "lh_default_error"))
//│ 		          | _ -> 
//│ 		            (failwith "lh_default_error")))
//│ 		      and knuth_bendix_0 = (fun _lh_knuth_bendix_arg1_0 _lh_knuth_bendix_arg2_0 -> 
//│ 		        ((knuth_bendix1_0 (`LH_P2(_lh_knuth_bendix_arg1_0, cost_lh__d1))) _lh_knuth_bendix_arg2_0))
//│ 		      and add_agenda_0 = (fun _lh_add_agenda_arg1_0 _lh_add_agenda_arg2_0 -> 
//│ 		        ((addby_0 item_cost_0) ((map_lh__d1_d2 (mk_item_0 _lh_add_agenda_arg1_0)) _lh_add_agenda_arg2_0)))
//│ 		      and g_init_0 = (fun _lh_g_init_arg1_0 -> 
//│ 		        (`LH_C(_lh_g_init_arg1_0, (`LH_N))))
//│ 		      and mk_dnet_0 = (fun _lh_mk_dnet_arg1_0 -> 
//│ 		        (((foldl_lh__d1 add_eqn_0) empty_net_0) _lh_mk_dnet_arg1_0))
//│ 		      and p_name_0 = (fun _lh_p_name_arg1_0 -> 
//│ 		        (((build_0 q_name_0) p_ident_0) _lh_p_name_arg1_0))
//│ 		      and q_op_0 = (fun _lh_q_op_arg1_0 -> 
//│ 		        (match _lh_q_op_arg1_0 with
//│ 		          | `LH_C(_lh_q_op_LH_C_0_0, _lh_q_op_LH_C_1_0) -> 
//│ 		            (match _lh_q_op_LH_C_0_0 with
//│ 		              | `Expr(_lh_q_op_Expr_0_0) -> 
//│ 		                (match _lh_q_op_LH_C_1_0 with
//│ 		                  | `LH_C(_lh_q_op_LH_C_0_1, _lh_q_op_LH_C_1_1) -> 
//│ 		                    (match _lh_q_op_LH_C_0_1 with
//│ 		                      | `MkString(_lh_q_op_MkString_0_0) -> 
//│ 		                        (match _lh_q_op_LH_C_1_1 with
//│ 		                          | `LH_C(_lh_q_op_LH_C_0_2, _lh_q_op_LH_C_1_2) -> 
//│ 		                            (match _lh_q_op_LH_C_0_2 with
//│ 		                              | `Expr(_lh_q_op_Expr_0_1) -> 
//│ 		                                (match _lh_q_op_LH_C_1_2 with
//│ 		                                  | `LH_N -> 
//│ 		                                    (`Expr((`Func(_lh_q_op_MkString_0_0, (`LH_C(_lh_q_op_Expr_0_0, (`LH_C(_lh_q_op_Expr_0_1, (`LH_N)))))))))
//│ 		                                  | _ -> 
//│ 		                                    (failwith "lh_default_error"))
//│ 		                              | _ -> 
//│ 		                                (failwith "lh_default_error"))
//│ 		                          | _ -> 
//│ 		                            (failwith "lh_default_error"))
//│ 		                      | _ -> 
//│ 		                        (failwith "lh_default_error"))
//│ 		                  | _ -> 
//│ 		                    (failwith "lh_default_error"))
//│ 		              | _ -> 
//│ 		                (failwith "lh_default_error"))
//│ 		          | _ -> 
//│ 		            (failwith "lh_default_error")))
//│ 		      and unExpr_0 = (fun _lh_unExpr_arg1_0 -> 
//│ 		        (match _lh_unExpr_arg1_0 with
//│ 		          | `Expr(_lh_unExpr_Expr_0_0) -> 
//│ 		            _lh_unExpr_Expr_0_0
//│ 		          | _ -> 
//│ 		            (failwith "lh_default_error")))
//│ 		      and opsym_0 = (fun _lh_opsym_arg1_0 -> 
//│ 		        ((fun x_2_2 -> 
//│ 		          ((inList_lh__d1 x_2_2) (`LH_C('*', (`LH_C('+', (`LH_C('%', (`LH_C('@', (`LH_C('-', (`LH_C('/', (`LH_C('?', (`LH_C(':', (`LH_N))))))))))))))))))) _lh_opsym_arg1_0))
//│ 		      and resolve_0 = (fun _lh_resolve_arg1_0 _lh_resolve_arg2_0 -> 
//│ 		        (let rec lhs'_0 = ((simplify_lh__d1 _lh_resolve_arg1_0) (fst_lh__d4 _lh_resolve_arg2_0)) in
//│ 		          (let rec rhs'_0 = ((simplify_lh__d5 _lh_resolve_arg1_0) (snd_lh__d2 _lh_resolve_arg2_0)) in
//│ 		            (if ((eqExpr_lh__d2 lhs'_0) rhs'_0) then
//│ 		              croak_lh__d2
//│ 		            else
//│ 		              (succeed_lh__d3 (`LH_P2(lhs'_0, rhs'_0)))))))
//│ 		      and p_term_0 = (fun _lh_p_term_arg1_0 -> 
//│ 		        (((orElseMap_lh__d4 ((seQ_0 q_func_0) (`LH_C(p_ident_0, (`LH_C((look_for_0 '('), (`LH_C(((list_of_0 p_expr_0) ','), (`LH_C((look_for_0 ')'), (`LH_N))))))))))) p_prim_0) _lh_p_term_arg1_0))
//│ 		      and add_eqn_0 = (fun _lh_add_eqn_arg1_0 _lh_add_eqn_arg2_0 -> 
//│ 		        (((thread_0 (preorder_0 (g_init_0 (lhs_lh__d1 _lh_add_eqn_arg2_0)))) _lh_add_eqn_arg2_0) _lh_add_eqn_arg1_0))
//│ 		      and thread_0 = (fun _lh_thread_arg1_0 _lh_thread_arg2_0 _lh_thread_arg3_0 -> 
//│ 		        (match _lh_thread_arg1_0 with
//│ 		          | `LH_C(_lh_thread_LH_C_0_0, _lh_thread_LH_C_1_0) -> 
//│ 		            (match _lh_thread_LH_C_0_0 with
//│ 		              | `Afunc(_lh_thread_Afunc_0_0) -> 
//│ 		                (match _lh_thread_arg3_0 with
//│ 		                  | `Switch(_lh_thread_Switch_0_0, _lh_thread_Switch_1_0) -> 
//│ 		                    (`Switch(((((update_alist_lh__d1 _lh_thread_Afunc_0_0) ((thread_0 _lh_thread_LH_C_1_0) _lh_thread_arg2_0)) empty_net_0) _lh_thread_Switch_0_0), _lh_thread_Switch_1_0))
//│ 		                  | `Return(_lh_thread_Return_0_0) -> 
//│ 		                    (((thread_0 (`LH_C((`Afunc(_lh_thread_Afunc_0_0)), _lh_thread_LH_C_1_0))) _lh_thread_arg2_0) (`Switch((`LH_N), (`Return(_lh_thread_Return_0_0))))))
//│ 		              | `Avar -> 
//│ 		                (match _lh_thread_arg3_0 with
//│ 		                  | `Switch(_lh_thread_Switch_0_1, _lh_thread_Switch_1_1) -> 
//│ 		                    (`Switch(_lh_thread_Switch_0_1, (((thread_0 _lh_thread_LH_C_1_0) _lh_thread_arg2_0) _lh_thread_Switch_1_1)))
//│ 		                  | `Return(_lh_thread_Return_0_1) -> 
//│ 		                    (let rec d'_0 = (((thread_0 _lh_thread_LH_C_1_0) _lh_thread_arg2_0) (`Return(_lh_thread_Return_0_1))) in
//│ 		                      (if (is_switch_0 d'_0) then
//│ 		                        (`Switch((`LH_N), d'_0))
//│ 		                      else
//│ 		                        d'_0))))
//│ 		          | `LH_N -> 
//│ 		            (match _lh_thread_arg3_0 with
//│ 		              | `Return(_lh_thread_Return_0_2) -> 
//│ 		                (`Return((`LH_C(_lh_thread_arg2_0, _lh_thread_Return_0_2)))))))
//│ 		      and item_cost_0 = (fun _lh_item_cost_arg1_0 -> 
//│ 		        (match _lh_item_cost_arg1_0 with
//│ 		          | `Item(_lh_item_cost_Item_0_0, _lh_item_cost_Item_1_0) -> 
//│ 		            _lh_item_cost_Item_0_0))
//│ 		      and g_rest_0 = (fun _lh_g_rest_arg1_0 -> 
//│ 		        (match _lh_g_rest_arg1_0 with
//│ 		          | `LH_C(_lh_g_rest_LH_C_0_0, _lh_g_rest_LH_C_1_0) -> 
//│ 		            (match _lh_g_rest_LH_C_0_0 with
//│ 		              | `Func(_lh_g_rest_Func_0_0, _lh_g_rest_Func_1_0) -> 
//│ 		                ((mappend_lh__d2 _lh_g_rest_Func_1_0) _lh_g_rest_LH_C_1_0)
//│ 		              | `Var(_lh_g_rest_Var_0_0) -> 
//│ 		                _lh_g_rest_LH_C_1_0
//│ 		              | _ -> 
//│ 		                (failwith "lh_default_error"))
//│ 		          | _ -> 
//│ 		            (failwith "lh_default_error")))
//│ 		      and lex_ext_0 = (fun _lh_lex_ext_arg1_0 _lh_lex_ext_arg2_0 -> 
//│ 		        (match _lh_lex_ext_arg2_0 with
//│ 		          | `LH_P2(_lh_lex_ext_LH_P2_0_0, _lh_lex_ext_LH_P2_1_0) -> 
//│ 		            (match _lh_lex_ext_LH_P2_0_0 with
//│ 		              | `Func(_lh_lex_ext_Func_0_0, _lh_lex_ext_Func_1_0) -> 
//│ 		                (match _lh_lex_ext_LH_P2_1_0 with
//│ 		                  | `Func(_lh_lex_ext_Func_0_1, _lh_lex_ext_Func_1_1) -> 
//│ 		                    (let rec estimate_0 = ((lexico_0 _lh_lex_ext_arg1_0) (`LH_P2(_lh_lex_ext_Func_1_0, _lh_lex_ext_Func_1_1))) in
//│ 		                      (let rec confirm_0 = (fun x_2_3 -> 
//│ 		                        (let rec _lh_matchIdent_1_1 = x_2_3 in
//│ 		                          (match _lh_matchIdent_1_1 with
//│ 		                            | `Equal -> 
//│ 		                              true
//│ 		                            | `Greater -> 
//│ 		                              ((((quant_lh__d7 all_lh__d4) (ltRewrite_lh__d4 _lh_lex_ext_arg1_0)) (`Func(_lh_lex_ext_Func_0_0, _lh_lex_ext_Func_1_0))) _lh_lex_ext_Func_1_1)
//│ 		                            | `Less -> 
//│ 		                              ((((quant_lh__d1_d0 all_lh__d6) (ltRewrite_lh__d2 _lh_lex_ext_arg1_0)) (`Func(_lh_lex_ext_Func_0_1, _lh_lex_ext_Func_1_1))) _lh_lex_ext_Func_1_0)
//│ 		                            | `Unrelated -> 
//│ 		                              false))) in
//│ 		                        (if (confirm_0 estimate_0) then
//│ 		                          estimate_0
//│ 		                        else
//│ 		                          (if ((((quant_lh__d4 any_lh__d4) (geRewrite_lh__d2 _lh_lex_ext_arg1_0)) (`Func(_lh_lex_ext_Func_0_1, _lh_lex_ext_Func_1_1))) _lh_lex_ext_Func_1_0) then
//│ 		                            (`Greater)
//│ 		                          else
//│ 		                            (if ((((quant_lh__d6 any_lh__d3) (geRewrite_lh__d4 _lh_lex_ext_arg1_0)) (`Func(_lh_lex_ext_Func_0_0, _lh_lex_ext_Func_1_0))) _lh_lex_ext_Func_1_1) then
//│ 		                              (`Less)
//│ 		                            else
//│ 		                              (`Unrelated))))))
//│ 		                  | _ -> 
//│ 		                    (failwith "lh_default_error"))
//│ 		              | _ -> 
//│ 		                (failwith "lh_default_error"))
//│ 		          | _ -> 
//│ 		            (failwith "lh_default_error")))
//│ 		      and empty_0 = (fun _lh_empty_arg1_0 -> 
//│ 		        (succeed_lh__d4 (`LH_P2((`List((`LH_N))), _lh_empty_arg1_0))))
//│ 		      and g_skip_0 = (fun _lh_g_skip_arg1_0 -> 
//│ 		        (tail_lh__d1 _lh_g_skip_arg1_0))
//│ 		      and super_reduce_0 = (fun _lh_super_reduce_arg1_0 -> 
//│ 		        (inside_lh__d1 (dnet_reduce_0 _lh_super_reduce_arg1_0)))
//│ 		      and unString_0 = (fun _lh_unString_arg1_0 -> 
//│ 		        (match _lh_unString_arg1_0 with
//│ 		          | `MkString(_lh_unString_MkString_0_0) -> 
//│ 		            _lh_unString_MkString_0_0
//│ 		          | _ -> 
//│ 		            (failwith "lh_default_error")))
//│ 		      and look_for_0 = (fun _lh_look_for_arg1_0 -> 
//│ 		        (sp_0 (pchar_0 (fun x_2_4 -> 
//│ 		          (x_2_4 = _lh_look_for_arg1_0)))))
//│ 		      and mk_crit_0 = (fun _lh_mk_crit_arg1_0 _lh_mk_crit_arg2_0 _lh_mk_crit_arg3_0 -> 
//│ 		        (match _lh_mk_crit_arg1_0 with
//│ 		          | `Eqn(_lh_mk_crit_Eqn_0_0, _lh_mk_crit_Eqn_1_0) -> 
//│ 		            (match _lh_mk_crit_Eqn_1_0 with
//│ 		              | `LH_P2(_lh_mk_crit_LH_P2_0_0, _lh_mk_crit_LH_P2_1_0) -> 
//│ 		                (match _lh_mk_crit_arg2_0 with
//│ 		                  | `Eqn(_lh_mk_crit_Eqn_0_1, _lh_mk_crit_Eqn_1_1) -> 
//│ 		                    (match _lh_mk_crit_Eqn_1_1 with
//│ 		                      | `LH_P2(_lh_mk_crit_LH_P2_0_1, _lh_mk_crit_LH_P2_1_1) -> 
//│ 		                        (match _lh_mk_crit_arg3_0 with
//│ 		                          | `LH_P2(_lh_mk_crit_LH_P2_0_2, _lh_mk_crit_LH_P2_1_2) -> 
//│ 		                            (`LH_P2(((sub_lh__d1 (((replace_lh__d1 _lh_mk_crit_LH_P2_0_1) _lh_mk_crit_LH_P2_0_2) _lh_mk_crit_LH_P2_1_0)) _lh_mk_crit_LH_P2_1_2), ((sub_lh__d2 _lh_mk_crit_LH_P2_1_1) _lh_mk_crit_LH_P2_1_2)))))))))
//│ 		      and list_of_0 = (fun _lh_list_of_arg1_0 _lh_list_of_arg2_0 -> 
//│ 		        (let rec p'_0 = (lazy (((seq2_0 mk_cons_0) _lh_list_of_arg1_0) ((orElseMap_lh__d3 (((seq2Lzq_0 (fun x_2_5 y_3 -> 
//│ 		          y_3)) (look_for_0 _lh_list_of_arg2_0)) p'_0)) empty_0))) in
//│ 		          (Lazy.force p'_0)))
//│ 		      and seQ_0 = (fun _lh_seQ_arg1_0 _lh_seQ_arg2_0 -> 
//│ 		        ((build_0 (mk_list_0 _lh_seQ_arg1_0)) (((foldr_lh__d2 (seq2_0 mk_cons_0)) empty_0) _lh_seQ_arg2_0)))
//│ 		      and q_name_0 = (fun _lh_q_name_arg1_0 -> 
//│ 		        (match _lh_q_name_arg1_0 with
//│ 		          | `MkString(_lh_q_name_MkString_0_0) -> 
//│ 		            (if (((int_of_char ((atIndex_lh__d1 0) _lh_q_name_MkString_0_0)) >= (int_of_char 'a')) && ((int_of_char ((atIndex_lh__d3 0) _lh_q_name_MkString_0_0)) <= (int_of_char 'z'))) then
//│ 		              (`Expr((`Var(_lh_q_name_MkString_0_0))))
//│ 		            else
//│ 		              (`Expr((`Func(_lh_q_name_MkString_0_0, (`LH_N))))))
//│ 		          | _ -> 
//│ 		            (failwith "lh_default_error")))
//│ 		      and lex_combine_0 = (fun _lh_lex_combine_arg1_0 _lh_lex_combine_arg2_0 -> 
//│ 		        (match _lh_lex_combine_arg1_0 with
//│ 		          | `Equal -> 
//│ 		            _lh_lex_combine_arg2_0
//│ 		          | `Greater -> 
//│ 		            (`Greater)
//│ 		          | `Less -> 
//│ 		            (`Less)
//│ 		          | `Unrelated -> 
//│ 		            (`Unrelated)))
//│ 		      and num_order_0 = (fun _lh_num_order_arg1_0 -> 
//│ 		        (match _lh_num_order_arg1_0 with
//│ 		          | `LH_P2(_lh_num_order_LH_P2_0_0, _lh_num_order_LH_P2_1_0) -> 
//│ 		            (if (_lh_num_order_LH_P2_0_0 > _lh_num_order_LH_P2_1_0) then
//│ 		              (`Greater)
//│ 		            else
//│ 		              (if (_lh_num_order_LH_P2_0_0 < _lh_num_order_LH_P2_1_0) then
//│ 		                (`Less)
//│ 		              else
//│ 		                (`Equal)))))
//│ 		      and pchar_0 = (fun _lh_pchar_arg1_0 _lh_pchar_arg2_0 -> 
//│ 		        (match _lh_pchar_arg2_0 with
//│ 		          | `LH_N -> 
//│ 		            croak_lh__d3
//│ 		          | `LH_C(_lh_pchar_LH_C_0_0, _lh_pchar_LH_C_1_0) -> 
//│ 		            (if (_lh_pchar_arg1_0 _lh_pchar_LH_C_0_0) then
//│ 		              (succeed_lh__d2 (`LH_P2((`MkString((`LH_C(_lh_pchar_LH_C_0_0, (`LH_N))))), _lh_pchar_LH_C_1_0)))
//│ 		            else
//│ 		              croak_lh__d1)))
//│ 		      and crit_pairs_0 = (fun _lh_crit_pairs_arg1_0 _lh_crit_pairs_arg2_0 -> 
//│ 		        ((mappend_lh__d4 ((map_lh__d8 ((mk_crit_0 _lh_crit_pairs_arg1_0) _lh_crit_pairs_arg2_0)) ((superpose_0 (lhs_lh__d7 _lh_crit_pairs_arg1_0)) (lhs_lh__d2 _lh_crit_pairs_arg2_0)))) ((map_lh__d3 ((mk_crit_0 _lh_crit_pairs_arg2_0) _lh_crit_pairs_arg1_0)) ((strict_super_0 (lhs_lh__d3 _lh_crit_pairs_arg2_0)) (lhs_lh__d6 _lh_crit_pairs_arg1_0)))))
//│ 		      and strict_super_0 = (fun _lh_strict_super_arg1_0 _lh_strict_super_arg2_0 -> 
//│ 		        (match _lh_strict_super_arg2_0 with
//│ 		          | `Func(_lh_strict_super_Func_0_0, _lh_strict_super_Func_1_0) -> 
//│ 		            (let rec _lh_listcomp_fun_9 = (fun _lh_listcomp_fun_para_9 -> 
//│ 		              (match _lh_listcomp_fun_para_9 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_9, _lh_listcomp_fun_ls_t_9) -> 
//│ 		                  (match _lh_listcomp_fun_ls_h_9 with
//│ 		                    | `LH_P2(_lh_strict_super_LH_P2_0_0, _lh_strict_super_LH_P2_1_0) -> 
//│ 		                      (let rec _lh_listcomp_fun_1_0 = (fun _lh_listcomp_fun_para_1_0 -> 
//│ 		                        (match _lh_listcomp_fun_para_1_0 with
//│ 		                          | `LH_C(_lh_listcomp_fun_ls_h_1_0, _lh_listcomp_fun_ls_t_1_0) -> 
//│ 		                            (match _lh_listcomp_fun_ls_h_1_0 with
//│ 		                              | `LH_P2(_lh_strict_super_LH_P2_0_1, _lh_strict_super_LH_P2_1_1) -> 
//│ 		                                (`LH_C((`LH_P2((`LH_C(_lh_strict_super_LH_P2_0_0, _lh_strict_super_LH_P2_0_1)), _lh_strict_super_LH_P2_1_1)), (_lh_listcomp_fun_1_0 _lh_listcomp_fun_ls_t_1_0)))
//│ 		                              | _ -> 
//│ 		                                (_lh_listcomp_fun_1_0 _lh_listcomp_fun_ls_t_1_0))
//│ 		                          | `LH_N -> 
//│ 		                            (_lh_listcomp_fun_9 _lh_listcomp_fun_ls_t_9))) in
//│ 		                        (_lh_listcomp_fun_1_0 ((superpose_0 _lh_strict_super_arg1_0) _lh_strict_super_LH_P2_1_0)))
//│ 		                    | _ -> 
//│ 		                      (_lh_listcomp_fun_9 _lh_listcomp_fun_ls_t_9))
//│ 		                | `LH_N -> 
//│ 		                  (`LH_N))) in
//│ 		              (_lh_listcomp_fun_9 ((zip_lz_nl_lh__d1 (enumFrom_lh__d1 0)) _lh_strict_super_Func_1_0)))
//│ 		          | _ -> 
//│ 		            (failwith "lh_default_error")))
//│ 		      and dominates_0 = (fun _lh_dominates_arg1_0 -> 
//│ 		        ((quant_lh__d3 all_lh__d3) ((quant_lh__d9 any_lh__d1) (gtRewrite_lh__d1 _lh_dominates_arg1_0))))
//│ 		      and knuth_bendix1_0 = (fun _lh_knuth_bendix1_arg1_0 _lh_knuth_bendix1_arg2_0 -> 
//│ 		        (((((process_0 _lh_knuth_bendix1_arg1_0) 1) (`LH_N)) empty_net_0) (((add_agenda_0 (snd_lh__d1 _lh_knuth_bendix1_arg1_0)) _lh_knuth_bendix1_arg2_0) (`LH_N))))
//│ 		      and mk_item_0 = (fun _lh_mk_item_arg1_0 _lh_mk_item_arg2_0 -> 
//│ 		        (`Item((_lh_mk_item_arg1_0 _lh_mk_item_arg2_0), _lh_mk_item_arg2_0)))
//│ 		      and sp_0 = (fun _lh_sp_arg1_0 _lh_funcomp_x_7 -> 
//│ 		        (_lh_sp_arg1_0 ((dropWhile_lh__d2 (fun x_2_6 -> 
//│ 		          (x_2_6 = ' '))) _lh_funcomp_x_7)))
//│ 		      and p_eqn_0 = (fun _lh_p_eqn_arg1_0 -> 
//│ 		        (((seQ_0 q_eqn_0) (`LH_C(p_expr_0, (`LH_C((look_for_0 '='), (`LH_C(p_expr_0, (`LH_N)))))))) _lh_p_eqn_arg1_0))
//│ 		      and p_ident_0 = (fun _lh_p_ident_arg1_0 -> 
//│ 		        ((sp_0 (string_of_0 alphanum_0)) _lh_p_ident_arg1_0))
//│ 		      and process2_0 = (fun _lh_process2_arg1_0 _lh_process2_arg2_0 _lh_process2_arg3_0 _lh_process2_arg4_0 _lh_process2_arg5_0 _lh_process2_arg6_0 -> 
//│ 		        (let rec _lh_matchIdent_1_2 = ((split_0 (reducible_0 (reduce1_lh__d1 _lh_process2_arg6_0))) _lh_process2_arg3_0) in
//│ 		          (match _lh_matchIdent_1_2 with
//│ 		            | `LH_P2(_lh_process2_LH_P2_0_0, _lh_process2_LH_P2_1_0) -> 
//│ 		              (let rec net'_0 = ((add_eqn_0 ((delete_eqns_lh__d1 ((map_lh__d6 eqno_lh__d1) _lh_process2_LH_P2_0_0)) _lh_process2_arg4_0)) _lh_process2_arg6_0) in
//│ 		                (let rec deletions_0 = ((map_lh__d9 eqpr_lh__d1) _lh_process2_LH_P2_0_0) in
//│ 		                  (let rec critical_0 = ((all_crit_pairs_0 _lh_process2_arg6_0) _lh_process2_LH_P2_1_0) in
//│ 		                    (let rec new_agenda_0 = (sift_lh__d2 ((map_lh__d1_d3 (resolve_0 (super_reduce_0 net'_0))) ((mappend_lh__d7 deletions_0) critical_0))) in
//│ 		                      (let rec todo'_0 = (((add_agenda_0 (snd_lh__d3 _lh_process2_arg1_0)) new_agenda_0) _lh_process2_arg5_0) in
//│ 		                        (((((process_0 _lh_process2_arg1_0) _lh_process2_arg2_0) ((mappend_lh__d5 _lh_process2_LH_P2_1_0) (`LH_C(_lh_process2_arg6_0, (`LH_N))))) net'_0) todo'_0)))))))))
//│ 		      and dnet_reduce_0 = (fun _lh_dnet_reduce_arg1_0 _lh_dnet_reduce_arg2_0 -> 
//│ 		        ((try_all_lh__d1 ((map_lh__d7 rewrite_lh__d1) ((find_0 _lh_dnet_reduce_arg2_0) _lh_dnet_reduce_arg1_0))) _lh_dnet_reduce_arg2_0))
//│ 		      and find'_0 = (fun _lh_find'_arg1_0 _lh_find'_arg2_0 -> 
//│ 		        (match _lh_find'_arg2_0 with
//│ 		          | `Return(_lh_find'_Return_0_0) -> 
//│ 		            _lh_find'_Return_0_0
//│ 		          | `Switch(_lh_find'_Switch_0_0, _lh_find'_Switch_1_0) -> 
//│ 		            ((mappend_lh__d1 (((find_assoc_0 (g_first_0 _lh_find'_arg1_0)) (g_rest_0 _lh_find'_arg1_0)) _lh_find'_Switch_0_0)) ((find'_0 (g_skip_0 _lh_find'_arg1_0)) _lh_find'_Switch_1_0))))
//│ 		      and multi_ext_0 = (fun _lh_multi_ext_arg1_0 _lh_multi_ext_arg2_0 -> 
//│ 		        (match _lh_multi_ext_arg2_0 with
//│ 		          | `LH_P2(_lh_multi_ext_LH_P2_0_0, _lh_multi_ext_LH_P2_1_0) -> 
//│ 		            (match _lh_multi_ext_LH_P2_0_0 with
//│ 		              | `Func(_lh_multi_ext_Func_0_0, _lh_multi_ext_Func_1_0) -> 
//│ 		                (match _lh_multi_ext_LH_P2_1_0 with
//│ 		                  | `Func(_lh_multi_ext_Func_0_1, _lh_multi_ext_Func_1_1) -> 
//│ 		                    ((multi_0 _lh_multi_ext_arg1_0) (`LH_P2(_lh_multi_ext_Func_1_0, _lh_multi_ext_Func_1_1)))
//│ 		                  | _ -> 
//│ 		                    (failwith "lh_default_error"))
//│ 		              | _ -> 
//│ 		                (failwith "lh_default_error"))
//│ 		          | _ -> 
//│ 		            (failwith "lh_default_error")))
//│ 		      and seq2_0 = (fun _lh_seq2_arg1_0 _lh_seq2_arg2_0 _lh_seq2_arg3_0 -> 
//│ 		        (let rec g_1 = (fun xs_1_0 -> 
//│ 		          (let rec _lh_matchIdent_1_3 = xs_1_0 in
//│ 		            (match _lh_matchIdent_1_3 with
//│ 		              | `LH_P2(_lh_seq2_LH_P2_0_0, _lh_seq2_LH_P2_1_0) -> 
//│ 		                ((lift_lh__d2 ((cross_lh__d2 (_lh_seq2_arg1_0 _lh_seq2_LH_P2_0_0)) (fun x_2_7 -> 
//│ 		                  x_2_7))) (_lh_seq2_arg3_0 _lh_seq2_LH_P2_1_0))))) in
//│ 		          (fun _lh_funcomp_x_8 -> 
//│ 		            ((fun _lh_funcomp_x_9 -> 
//│ 		              (squash_lh__d1 ((lift_lh__d4 g_1) _lh_funcomp_x_9))) (_lh_seq2_arg2_0 _lh_funcomp_x_8)))))
//│ 		      and g_first_0 = (fun _lh_g_first_arg1_0 -> 
//│ 		        (match _lh_g_first_arg1_0 with
//│ 		          | `LH_C(_lh_g_first_LH_C_0_0, _lh_g_first_LH_C_1_0) -> 
//│ 		            (match _lh_g_first_LH_C_0_0 with
//│ 		              | `Func(_lh_g_first_Func_0_0, _lh_g_first_Func_1_0) -> 
//│ 		                (`Afunc(_lh_g_first_Func_0_0))
//│ 		              | `Var(_lh_g_first_Var_0_0) -> 
//│ 		                (`Avar)
//│ 		              | _ -> 
//│ 		                (failwith "lh_default_error"))
//│ 		          | _ -> 
//│ 		            (failwith "lh_default_error")))
//│ 		      and p_expr_0 = (fun _lh_p_expr_arg1_0 -> 
//│ 		        (((orElseMap_lh__d2 ((seQ_0 q_op_0) (`LH_C(p_term_0, (`LH_C(p_op_0, (`LH_C(p_term_0, (`LH_N))))))))) p_term_0) _lh_p_expr_arg1_0))
//│ 		      and all_crit_pairs_0 = (fun _lh_all_crit_pairs_arg1_0 _lh_all_crit_pairs_arg2_0 -> 
//│ 		        (let rec eqn'_0 = ((stand_eqn_lh__d1 (`LH_C('1', (`LH_N)))) _lh_all_crit_pairs_arg1_0) in
//│ 		          (let rec eqn''_0 = ((stand_eqn_lh__d2 (`LH_C('2', (`LH_N)))) _lh_all_crit_pairs_arg1_0) in
//│ 		            (let rec theory''_0 = ((map_lh__d1 (stand_eqn_lh__d3 (`LH_C('2', (`LH_N))))) _lh_all_crit_pairs_arg2_0) in
//│ 		              ((mappend_lh__d6 ((map_lh__d2 ((mk_crit_0 eqn'_0) eqn''_0)) ((strict_super_0 (lhs_lh__d5 eqn'_0)) (lhs_lh__d4 eqn''_0)))) (concat_lh__d1 ((map_lh__d4 (crit_pairs_0 eqn'_0)) theory''_0)))))))
//│ 		      and parse_0 = (fun _lh_parse_arg1_0 -> 
//│ 		        ((fun _lh_funcomp_x_1_0 -> 
//│ 		          ((fun _lh_funcomp_x_1_1 -> 
//│ 		            ((fun _lh_funcomp_x_1_2 -> 
//│ 		              (unExpr_0 (fst_lh__d1 _lh_funcomp_x_1_2))) (the_lh__d1 _lh_funcomp_x_1_1))) (p_expr_0 _lh_funcomp_x_1_0))) _lh_parse_arg1_0))
//│ 		      and mk_cons_0 = (fun _lh_mk_cons_arg1_0 _lh_mk_cons_arg2_0 -> 
//│ 		        (match _lh_mk_cons_arg2_0 with
//│ 		          | `List(_lh_mk_cons_List_0_0) -> 
//│ 		            (`List((`LH_C(_lh_mk_cons_arg1_0, _lh_mk_cons_List_0_0))))
//│ 		          | _ -> 
//│ 		            (failwith "lh_default_error")))
//│ 		      and string_of_0 = (fun _lh_string_of_arg1_0 _lh_string_of_arg2_0 -> 
//│ 		        (let rec chars_0 = ((takeWhile_lh__d1 _lh_string_of_arg1_0) _lh_string_of_arg2_0) in
//│ 		          (let rec s'_0 = ((dropWhile_lh__d1 _lh_string_of_arg1_0) _lh_string_of_arg2_0) in
//│ 		            ((maybeX_lh__d1 (chars_0 <> (`LH_N))) (`LH_P2((`MkString(chars_0)), s'_0))))))
//│ 		      and preorder_0 = (fun _lh_preorder_arg1_0 -> 
//│ 		        (if ((eqListExpr_lh__d1 _lh_preorder_arg1_0) (`LH_N)) then
//│ 		          (`LH_N)
//│ 		        else
//│ 		          ((mappend_lh__d3 (`LH_C((g_first_0 _lh_preorder_arg1_0), (`LH_N)))) (preorder_0 (g_rest_0 _lh_preorder_arg1_0)))))
//│ 		      and alphanum_0 = (fun _lh_alphanum_arg1_0 -> 
//│ 		        (((((int_of_char _lh_alphanum_arg1_0) >= (int_of_char 'A')) && ((int_of_char _lh_alphanum_arg1_0) <= (int_of_char 'Z'))) || (((int_of_char _lh_alphanum_arg1_0) >= (int_of_char 'a')) && ((int_of_char _lh_alphanum_arg1_0) <= (int_of_char 'z')))) || (((int_of_char _lh_alphanum_arg1_0) >= (int_of_char '0')) && ((int_of_char _lh_alphanum_arg1_0) <= (int_of_char '9')))))
//│ 		      and preprocess_0 = (fun _lh_preprocess_arg1_0 _lh_preprocess_arg2_0 -> 
//│ 		        (match _lh_preprocess_arg2_0 with
//│ 		          | `LH_P2(_lh_preprocess_LH_P2_0_0, _lh_preprocess_LH_P2_1_0) -> 
//│ 		            (`LH_P2(((simplify_lh__d2 (super_reduce_0 _lh_preprocess_arg1_0)) _lh_preprocess_LH_P2_0_0), ((simplify_lh__d3 (super_reduce_0 _lh_preprocess_arg1_0)) _lh_preprocess_LH_P2_1_0)))))
//│ 		      and empty_net_0 = (`Return((`LH_N)))
//│ 		      and process_0 = (fun _lh_process_arg1_0 _lh_process_arg2_0 _lh_process_arg3_0 _lh_process_arg4_0 _lh_process_arg5_0 -> 
//│ 		        (match _lh_process_arg5_0 with
//│ 		          | `LH_N -> 
//│ 		            _lh_process_arg4_0
//│ 		          | `LH_C(_lh_process_LH_C_0_0, _lh_process_LH_C_1_0) -> 
//│ 		            (match _lh_process_LH_C_0_0 with
//│ 		              | `Item(_lh_process_Item_0_0, _lh_process_Item_1_0) -> 
//│ 		                ((((((process1_0 _lh_process_arg1_0) _lh_process_arg2_0) _lh_process_arg3_0) _lh_process_arg4_0) _lh_process_LH_C_1_0) ((preprocess_0 _lh_process_arg4_0) _lh_process_Item_1_0)))))
//│ 		      in (let rec group_completion_0 = ((knuth_bendix_0 ((rpo_0 (rank_order_0 rank_0)) lex_ext_0)) ((map_lh__d5 parse_eqn_0) (`LH_C((`LH_C('(', (`LH_C('a', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('b', (`LH_C(')', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('c', (`LH_C(' ', (`LH_C('=', (`LH_C(' ', (`LH_C('a', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('(', (`LH_C('b', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('c', (`LH_C(')', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))), (`LH_C((`LH_C('E', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('x', (`LH_C(' ', (`LH_C('=', (`LH_C(' ', (`LH_C('x', (`LH_N))))))))))))))))))), (`LH_C((`LH_C('I', (`LH_C('(', (`LH_C('x', (`LH_C(')', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('x', (`LH_C(' ', (`LH_C('=', (`LH_C(' ', (`LH_C('E', (`LH_N))))))))))))))))))))))))), (`LH_N))))))))) in
//│ 		        ((eqExpr_lh__d1 ((simplify_lh__d4 (super_reduce_0 group_completion_0)) (parse_0 _lh_result_LH_P2_0_0))) (parse_0 _lh_result_LH_P2_1_0))));;
//│ 		let rec testRewrite_nofib_lh__d1 _lh_testRewrite_nofib_arg1_0 =
//│ 		  ((all_lh__d1 result_lh__d1) ((copy_lh__d1 _lh_testRewrite_nofib_arg1_0) (`LH_P2((`LH_C('I', (`LH_C('(', (`LH_C('a', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('b', (`LH_C(')', (`LH_N))))))))))))))))), (`LH_C('I', (`LH_C('(', (`LH_C('b', (`LH_C(')', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('I', (`LH_C('(', (`LH_C('a', (`LH_C(')', (`LH_N)))))))))))))))))))))))))));;
//│ 		(testRewrite_nofib_lh__d1 50)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< after expansion <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f⁴(h⁴) map_lh_₁₂(f⁴, t⁷)]: 661 --->
//│ 	case ls²⁰ of {LH_C h²⁶ t³⁴ => f¹⁹(h²⁶, foldr_lh_₁(f¹⁹, i², t³⁴)) | LH_N  => i²}: 2277
//│ [LH_N]: 662 --->
//│ 	case ls²⁰ of {LH_C h²⁶ t³⁴ => f¹⁹(h²⁶, foldr_lh_₁(f¹⁹, i², t³⁴)) | LH_N  => i²}: 2277
//│ [LH_N]: 1065 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C [Equal] [LH_N]]: 1066 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C [Greater] [LH_C [Equal] [LH_N]]]: 1067 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_N]: 1124 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C [Equal] [LH_N]]: 1125 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C [Greater] [LH_C [Equal] [LH_N]]]: 1126 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_N]: 1188 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C [Equal] [LH_N]]: 1189 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C [Greater] [LH_C [Equal] [LH_N]]]: 1190 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C f¹¹(h¹²) map_lh_₈(f¹¹, t¹⁸)]: 1362 --->
//│ 	case xs⁵ of {LH_C h¹⁷ t²⁵ => [LH_C h¹⁷ mappend_lh_₄(t²⁵, ys⁵)] | LH_N  => ys⁵}: 1782
//│ [LH_N]: 1363 --->
//│ 	case xs⁵ of {LH_C h¹⁷ t²⁵ => [LH_C h¹⁷ mappend_lh_₄(t²⁵, ys⁵)] | LH_N  => ys⁵}: 1782
//│ [LH_N]: 1835 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C [Equal] [LH_N]]: 1836 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C [Greater] [LH_C [Equal] [LH_N]]]: 1837 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [Nothing]: 1961 --->
//│ 	case _lh_squash_arg1⁰ of {Just _lh_squash_Just_0⁰ => _lh_squash_Just_0⁰ | Nothing  => [Nothing]}: 968
//│ [Just _lh_lift_arg1⁵(_lh_lift_Just_0⁵)]: 1965 --->
//│ 	case _lh_squash_arg1⁰ of {Just _lh_squash_Just_0⁰ => _lh_squash_Just_0⁰ | Nothing  => [Nothing]}: 968
//│ [Nothing]: 1991 --->
//│ 	case _lh_squash_arg1¹ of {Just _lh_squash_Just_0¹ => _lh_squash_Just_0¹ | Nothing  => [Nothing]}: 1946
//│ [Just _lh_lift_arg1⁶(_lh_lift_Just_0⁶)]: 1995 --->
//│ 	case _lh_squash_arg1¹ of {Just _lh_squash_Just_0¹ => _lh_squash_Just_0¹ | Nothing  => [Nothing]}: 1946
//│ [LH_C f¹⁵(h²¹) map_lh_₆(f¹⁵, t²⁹)]: 2008 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_N]: 2009 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C a² enumFrom_lh_₁((a² + 1))]: 2149 --->
//│ 	case force⁰(xs⁴) of {LH_C hx¹ tx¹ => [LH_C [LH_P2 hx¹ hy¹] zip_lz_nl_lh_₁(tx¹, ty¹)] | LH_N  => [LH_N]}: 1665
//│ [LH_C f²⁰(h²⁷) map_lh_₂(f²⁰, t³⁵)]: 2290 --->
//│ 	case xs¹ of {LH_C h⁹ t¹⁴ => [LH_C h⁹ mappend_lh_₆(t¹⁴, ys¹)] | LH_N  => ys¹}: 915
//│ [LH_N]: 2291 --->
//│ 	case xs¹ of {LH_C h⁹ t¹⁴ => [LH_C h⁹ mappend_lh_₆(t¹⁴, ys¹)] | LH_N  => ys¹}: 915
//│ [LH_C f²¹(h²⁸) map_lh_₁(f²¹, t³⁶)]: 2316 --->
//│ 	case ls¹⁷ of {LH_C h²³ t³¹ => [LH_C f¹⁷(h²³) map_lh_₄(f¹⁷, t³¹)] | LH_N  => [LH_N]}: 2163
//│ [LH_N]: 2317 --->
//│ 	case ls¹⁷ of {LH_C h²³ t³¹ => [LH_C f¹⁷(h²³) map_lh_₄(f¹⁷, t³¹)] | LH_N  => [LH_N]}: 2163
//│ [Nothing]: 2350 --->
//│ 	case _lh_getOrElse_arg1¹ of {Just _lh_getOrElse_Just_0¹ => _lh_getOrElse_Just_0¹ | Nothing  => _lh_getOrElse_arg2¹}: 2190
//│ [Just _lh_lift_arg1⁷(_lh_lift_Just_0⁷)]: 2354 --->
//│ 	case _lh_getOrElse_arg1¹ of {Just _lh_getOrElse_Just_0¹ => _lh_getOrElse_Just_0¹ | Nothing  => _lh_getOrElse_arg2¹}: 2190
//│ [LH_P2 _lh_rpo_Func_0¹ _lh_rpo_Func_0²]: 2786 --->
//│ 	case _lh_rank_order_arg2⁰ of {LH_P2 _lh_rank_order_LH_P2_0⁰ _lh_rank_order_LH_P2_1⁰ => num_order⁰([LH_P2 _lh_rank_order_arg1⁰(_lh_rank_order_LH_P2_0⁰) _lh_rank_order_arg1⁰(_lh_rank_order_LH_P2_1⁰)])}: 2468
//│ [LH_P2 let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => case _lh_listcomp_fun_ls_h⁷ of {LH_P2 _lh_split_LH_P2_0⁰ _lh_split_LH_P2_1⁰ => if _lh_split_LH_P2_0⁰ then [LH_C _lh_split_LH_P2_1⁰ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷) | _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁷(tmp⁰) let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => case _lh_listcomp_fun_ls_h⁸ of {LH_P2 _lh_split_LH_P2_0¹ _lh_split_LH_P2_1¹ => if not⁰(_lh_split_LH_P2_0¹) then [LH_C _lh_split_LH_P2_1¹ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | _  => _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁸(tmp⁰)]: 2970 --->
//│ 	case _lh_matchIdent¹² of {LH_P2 _lh_process2_LH_P2_0⁰ _lh_process2_LH_P2_1⁰ => let net'⁰ = add_eqn⁰(delete_eqns_lh_₁(map_lh_₆(eqno_lh_₁, _lh_process2_LH_P2_0⁰), _lh_process2_arg4⁰), _lh_process2_arg6⁰)
//│ in let deletions⁰ = map_lh_₉(eqpr_lh_₁, _lh_process2_LH_P2_0⁰)
//│ in let critical⁰ = all_crit_pairs⁰(_lh_process2_arg6⁰, _lh_process2_LH_P2_1⁰)
//│ in let new_agenda⁰ = sift_lh_₂(map_lh_₁₃(resolve⁰(super_reduce⁰(net'⁰)), mappend_lh_₇(deletions⁰, critical⁰)))
//│ in let todo'⁰ = add_agenda⁰(snd_lh_₃(_lh_process2_arg1⁰), new_agenda⁰, _lh_process2_arg5⁰)
//│ in process⁰(_lh_process2_arg1⁰, _lh_process2_arg2⁰, mappend_lh_₅(_lh_process2_LH_P2_1⁰, [LH_C _lh_process2_arg6⁰ [LH_N]]), net'⁰, todo'⁰)}: 4021
//│ [LH_N]: 3315 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C ':' [LH_N]]: 3316 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C '?' [LH_C ':' [LH_N]]]: 3317 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]: 3318 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C '-' [LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]]: 3319 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C '@' [LH_C '-' [LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]]]: 3320 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C '%' [LH_C '@' [LH_C '-' [LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]]]]: 3321 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C '+' [LH_C '%' [LH_C '@' [LH_C '-' [LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]]]]]: 3322 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_C '*' [LH_C '+' [LH_C '%' [LH_C '@' [LH_C '-' [LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]]]]]]: 3323 --->
//│ 	case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234
//│ [LH_P2 _lh_multi_ext_Func_1⁰ _lh_multi_ext_Func_1¹]: 4078 --->
//│ 	case _lh_multi_arg2⁰ of {LH_P2 _lh_multi_LH_P2_0⁰ _lh_multi_LH_P2_1⁰ => let _lh_matchIdent² = rem_eq⁰(eqRewrite_lh_₁(_lh_multi_arg1⁰), [LH_P2 _lh_multi_LH_P2_0⁰ _lh_multi_LH_P2_1⁰])
//│ in case _lh_matchIdent² of {LH_P2 _lh_multi_LH_P2_0¹ _lh_multi_LH_P2_1¹ => if dominates⁰(_lh_multi_arg1⁰, _lh_multi_LH_P2_0¹, _lh_multi_LH_P2_1¹) then [Greater] else if dominates⁰(_lh_multi_arg1⁰, _lh_multi_LH_P2_1¹, _lh_multi_LH_P2_0¹) then [Less] else [Unrelated]}}: 2455
//│ [LH_N]: 4273 --->
//│ 	case xs⁶ of {LH_C h¹⁸ t²⁶ => [LH_C h¹⁸ mappend_lh_₃(t²⁶, ys⁶)] | LH_N  => ys⁶}: 1814
//│ [LH_C g_first⁰(_lh_preorder_arg1⁰) [LH_N]]: 4274 --->
//│ 	case xs⁶ of {LH_C h¹⁸ t²⁶ => [LH_C h¹⁸ mappend_lh_₃(t²⁶, ys⁶)] | LH_N  => ys⁶}: 1814
//│ [LH_P2 simplify_lh_₂(super_reduce⁰(_lh_preprocess_arg1⁰), _lh_preprocess_LH_P2_0⁰) simplify_lh_₃(super_reduce⁰(_lh_preprocess_arg1⁰), _lh_preprocess_LH_P2_1⁰)]: 4369 --->
//│ 	case _lh_process1_arg6⁰ of {LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰ => let o⁰ = fst_lh_₂(_lh_process1_arg1⁰, [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰])
//│ in let _lh_matchIdent⁹ = o⁰
//│ in case _lh_matchIdent⁹ of {Unrelated  => process⁰(_lh_process1_arg1⁰, _lh_process1_arg2⁰, _lh_process1_arg3⁰, _lh_process1_arg4⁰, add_agenda⁰((fun dum⁴ -> 1000), [LH_C [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰] [LH_N]], _lh_process1_arg5⁰)) | Equal  => process⁰(_lh_process1_arg1⁰, _lh_process1_arg2⁰, _lh_process1_arg3⁰, _lh_process1_arg4⁰, _lh_process1_arg5⁰) | _  => let eqn⁰ = let _lh_matchIdent¹⁰ = o⁰
//│ in case _lh_matchIdent¹⁰ of {Greater  => [Eqn _lh_process1_arg2⁰ [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰]] | Less  => [Eqn _lh_process1_arg2⁰ [LH_P2 _lh_process1_LH_P2_1⁰ _lh_process1_LH_P2_0⁰]]}
//│ in process2⁰(_lh_process1_arg1⁰, (_lh_process1_arg2⁰ + 1), _lh_process1_arg3⁰, _lh_process1_arg4⁰, _lh_process1_arg5⁰, eqn⁰)}}: 3067
//│ [LH_N]: 4509 --->
//│ 	case ls¹⁶ of {LH_C h²² t³⁰ => [LH_C f¹⁶(h²²) map_lh_₅(f¹⁶, t³⁰)] | LH_N  => [LH_N]}: 2098
//│ [LH_C [LH_C 'I' [LH_C '(' [LH_C 'x' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'E' [LH_N]]]]]]]]]]]]] [LH_N]]: 4510 --->
//│ 	case ls¹⁶ of {LH_C h²² t³⁰ => [LH_C f¹⁶(h²²) map_lh_₅(f¹⁶, t³⁰)] | LH_N  => [LH_N]}: 2098
//│ [LH_C [LH_C 'E' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'x' [LH_N]]]]]]]]]] [LH_C [LH_C 'I' [LH_C '(' [LH_C 'x' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'E' [LH_N]]]]]]]]]]]]] [LH_N]]]: 4511 --->
//│ 	case ls¹⁶ of {LH_C h²² t³⁰ => [LH_C f¹⁶(h²²) map_lh_₅(f¹⁶, t³⁰)] | LH_N  => [LH_N]}: 2098
//│ [LH_C [LH_C '(' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'b' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'c' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C '(' [LH_C 'b' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'c' [LH_C ')' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]] [LH_C [LH_C 'E' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'x' [LH_N]]]]]]]]]] [LH_C [LH_C 'I' [LH_C '(' [LH_C 'x' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'E' [LH_N]]]]]]]]]]]]] [LH_N]]]]: 4512 --->
//│ 	case ls¹⁶ of {LH_C h²² t³⁰ => [LH_C f¹⁶(h²²) map_lh_₅(f¹⁶, t³⁰)] | LH_N  => [LH_N]}: 2098
//│ [LH_N]: 4554 --->
//│ 	case _lh_all_arg2⁵ of {LH_N  => [True] | LH_C _lh_all_LH_C_0⁵ _lh_all_LH_C_1⁵ => if _lh_all_arg1⁵(_lh_all_LH_C_0⁵) then all_lh_₁(_lh_all_arg1⁵, _lh_all_LH_C_1⁵) else [False]}: 4546
//│ [LH_C _lh_copy_arg2⁰ copy_lh_₁((_lh_copy_arg1⁰ - 1), _lh_copy_arg2⁰)]: 4565 --->
//│ 	case _lh_all_arg2⁵ of {LH_N  => [True] | LH_C _lh_all_LH_C_0⁵ _lh_all_LH_C_1⁵ => if _lh_all_arg1⁵(_lh_all_LH_C_0⁵) then all_lh_₁(_lh_all_arg1⁵, _lh_all_LH_C_1⁵) else [False]}: 4546
//│ [LH_P2 [LH_C 'I' [LH_C '(' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'b' [LH_C ')' [LH_N]]]]]]]]] [LH_C 'I' [LH_C '(' [LH_C 'b' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'I' [LH_C '(' [LH_C 'a' [LH_C ')' [LH_N]]]]]]]]]]]]]: 4615 --->
//│ 	case _lh_result_arg1⁰ of {LH_P2 _lh_result_LH_P2_0⁰ _lh_result_LH_P2_1⁰ => SINGLE_LINE_LET_GROUP_STUB}: 4532
//│ ------------------
//│ case xs¹ of {LH_C h⁹ t¹⁴ => [LH_C h⁹ mappend_lh_₆(t¹⁴, ys¹)] | LH_N  => ys¹}: 915 --->
//│ 	[LH_C f²⁰(h²⁷) map_lh_₂(f²⁰, t³⁵)]: 2290
//│ 	[LH_N]: 2291
//│ case _lh_squash_arg1⁰ of {Just _lh_squash_Just_0⁰ => _lh_squash_Just_0⁰ | Nothing  => [Nothing]}: 968 --->
//│ 	[Nothing]: 1961
//│ 	[Just _lh_lift_arg1⁵(_lh_lift_Just_0⁵)]: 1965
//│ case _lh_inList_arg2⁰ of {LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰) | LH_N  => [False]}: 1234 --->
//│ 	[LH_N]: 1065
//│ 	[LH_C [Equal] [LH_N]]: 1066
//│ 	[LH_C [Greater] [LH_C [Equal] [LH_N]]]: 1067
//│ 	[LH_N]: 1124
//│ 	[LH_C [Equal] [LH_N]]: 1125
//│ 	[LH_C [Greater] [LH_C [Equal] [LH_N]]]: 1126
//│ 	[LH_N]: 1188
//│ 	[LH_C [Equal] [LH_N]]: 1189
//│ 	[LH_C [Greater] [LH_C [Equal] [LH_N]]]: 1190
//│ 	[LH_N]: 1835
//│ 	[LH_C [Equal] [LH_N]]: 1836
//│ 	[LH_C [Greater] [LH_C [Equal] [LH_N]]]: 1837
//│ 	[LH_C f¹⁵(h²¹) map_lh_₆(f¹⁵, t²⁹)]: 2008
//│ 	[LH_N]: 2009
//│ 	[LH_N]: 3315
//│ 	[LH_C ':' [LH_N]]: 3316
//│ 	[LH_C '?' [LH_C ':' [LH_N]]]: 3317
//│ 	[LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]: 3318
//│ 	[LH_C '-' [LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]]: 3319
//│ 	[LH_C '@' [LH_C '-' [LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]]]: 3320
//│ 	[LH_C '%' [LH_C '@' [LH_C '-' [LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]]]]: 3321
//│ 	[LH_C '+' [LH_C '%' [LH_C '@' [LH_C '-' [LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]]]]]: 3322
//│ 	[LH_C '*' [LH_C '+' [LH_C '%' [LH_C '@' [LH_C '-' [LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]]]]]]: 3323
//│ case force⁰(xs⁴) of {LH_C hx¹ tx¹ => [LH_C [LH_P2 hx¹ hy¹] zip_lz_nl_lh_₁(tx¹, ty¹)] | LH_N  => [LH_N]}: 1665 --->
//│ 	[LH_C a² enumFrom_lh_₁((a² + 1))]: 2149
//│ case xs⁵ of {LH_C h¹⁷ t²⁵ => [LH_C h¹⁷ mappend_lh_₄(t²⁵, ys⁵)] | LH_N  => ys⁵}: 1782 --->
//│ 	[LH_C f¹¹(h¹²) map_lh_₈(f¹¹, t¹⁸)]: 1362
//│ 	[LH_N]: 1363
//│ case xs⁶ of {LH_C h¹⁸ t²⁶ => [LH_C h¹⁸ mappend_lh_₃(t²⁶, ys⁶)] | LH_N  => ys⁶}: 1814 --->
//│ 	[LH_N]: 4273
//│ 	[LH_C g_first⁰(_lh_preorder_arg1⁰) [LH_N]]: 4274
//│ case _lh_squash_arg1¹ of {Just _lh_squash_Just_0¹ => _lh_squash_Just_0¹ | Nothing  => [Nothing]}: 1946 --->
//│ 	[Nothing]: 1991
//│ 	[Just _lh_lift_arg1⁶(_lh_lift_Just_0⁶)]: 1995
//│ case ls¹⁶ of {LH_C h²² t³⁰ => [LH_C f¹⁶(h²²) map_lh_₅(f¹⁶, t³⁰)] | LH_N  => [LH_N]}: 2098 --->
//│ 	[LH_N]: 4509
//│ 	[LH_C [LH_C 'I' [LH_C '(' [LH_C 'x' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'E' [LH_N]]]]]]]]]]]]] [LH_N]]: 4510
//│ 	[LH_C [LH_C 'E' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'x' [LH_N]]]]]]]]]] [LH_C [LH_C 'I' [LH_C '(' [LH_C 'x' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'E' [LH_N]]]]]]]]]]]]] [LH_N]]]: 4511
//│ 	[LH_C [LH_C '(' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'b' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'c' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C '(' [LH_C 'b' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'c' [LH_C ')' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]] [LH_C [LH_C 'E' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'x' [LH_N]]]]]]]]]] [LH_C [LH_C 'I' [LH_C '(' [LH_C 'x' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'E' [LH_N]]]]]]]]]]]]] [LH_N]]]]: 4512
//│ case ls¹⁷ of {LH_C h²³ t³¹ => [LH_C f¹⁷(h²³) map_lh_₄(f¹⁷, t³¹)] | LH_N  => [LH_N]}: 2163 --->
//│ 	[LH_C f²¹(h²⁸) map_lh_₁(f²¹, t³⁶)]: 2316
//│ 	[LH_N]: 2317
//│ case _lh_getOrElse_arg1¹ of {Just _lh_getOrElse_Just_0¹ => _lh_getOrElse_Just_0¹ | Nothing  => _lh_getOrElse_arg2¹}: 2190 --->
//│ 	[Nothing]: 2350
//│ 	[Just _lh_lift_arg1⁷(_lh_lift_Just_0⁷)]: 2354
//│ case ls²⁰ of {LH_C h²⁶ t³⁴ => f¹⁹(h²⁶, foldr_lh_₁(f¹⁹, i², t³⁴)) | LH_N  => i²}: 2277 --->
//│ 	[LH_C f⁴(h⁴) map_lh_₁₂(f⁴, t⁷)]: 661
//│ 	[LH_N]: 662
//│ case _lh_multi_arg2⁰ of {LH_P2 _lh_multi_LH_P2_0⁰ _lh_multi_LH_P2_1⁰ => let _lh_matchIdent² = rem_eq⁰(eqRewrite_lh_₁(_lh_multi_arg1⁰), [LH_P2 _lh_multi_LH_P2_0⁰ _lh_multi_LH_P2_1⁰])
//│ in case _lh_matchIdent² of {LH_P2 _lh_multi_LH_P2_0¹ _lh_multi_LH_P2_1¹ => if dominates⁰(_lh_multi_arg1⁰, _lh_multi_LH_P2_0¹, _lh_multi_LH_P2_1¹) then [Greater] else if dominates⁰(_lh_multi_arg1⁰, _lh_multi_LH_P2_1¹, _lh_multi_LH_P2_0¹) then [Less] else [Unrelated]}}: 2455 --->
//│ 	[LH_P2 _lh_multi_ext_Func_1⁰ _lh_multi_ext_Func_1¹]: 4078
//│ case _lh_rank_order_arg2⁰ of {LH_P2 _lh_rank_order_LH_P2_0⁰ _lh_rank_order_LH_P2_1⁰ => num_order⁰([LH_P2 _lh_rank_order_arg1⁰(_lh_rank_order_LH_P2_0⁰) _lh_rank_order_arg1⁰(_lh_rank_order_LH_P2_1⁰)])}: 2468 --->
//│ 	[LH_P2 _lh_rpo_Func_0¹ _lh_rpo_Func_0²]: 2786
//│ case _lh_process1_arg6⁰ of {LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰ => let o⁰ = fst_lh_₂(_lh_process1_arg1⁰, [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰])
//│ in let _lh_matchIdent⁹ = o⁰
//│ in case _lh_matchIdent⁹ of {Unrelated  => process⁰(_lh_process1_arg1⁰, _lh_process1_arg2⁰, _lh_process1_arg3⁰, _lh_process1_arg4⁰, add_agenda⁰((fun dum⁴ -> 1000), [LH_C [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰] [LH_N]], _lh_process1_arg5⁰)) | Equal  => process⁰(_lh_process1_arg1⁰, _lh_process1_arg2⁰, _lh_process1_arg3⁰, _lh_process1_arg4⁰, _lh_process1_arg5⁰) | _  => let eqn⁰ = let _lh_matchIdent¹⁰ = o⁰
//│ in case _lh_matchIdent¹⁰ of {Greater  => [Eqn _lh_process1_arg2⁰ [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰]] | Less  => [Eqn _lh_process1_arg2⁰ [LH_P2 _lh_process1_LH_P2_1⁰ _lh_process1_LH_P2_0⁰]]}
//│ in process2⁰(_lh_process1_arg1⁰, (_lh_process1_arg2⁰ + 1), _lh_process1_arg3⁰, _lh_process1_arg4⁰, _lh_process1_arg5⁰, eqn⁰)}}: 3067 --->
//│ 	[LH_P2 simplify_lh_₂(super_reduce⁰(_lh_preprocess_arg1⁰), _lh_preprocess_LH_P2_0⁰) simplify_lh_₃(super_reduce⁰(_lh_preprocess_arg1⁰), _lh_preprocess_LH_P2_1⁰)]: 4369
//│ case _lh_matchIdent¹² of {LH_P2 _lh_process2_LH_P2_0⁰ _lh_process2_LH_P2_1⁰ => let net'⁰ = add_eqn⁰(delete_eqns_lh_₁(map_lh_₆(eqno_lh_₁, _lh_process2_LH_P2_0⁰), _lh_process2_arg4⁰), _lh_process2_arg6⁰)
//│ in let deletions⁰ = map_lh_₉(eqpr_lh_₁, _lh_process2_LH_P2_0⁰)
//│ in let critical⁰ = all_crit_pairs⁰(_lh_process2_arg6⁰, _lh_process2_LH_P2_1⁰)
//│ in let new_agenda⁰ = sift_lh_₂(map_lh_₁₃(resolve⁰(super_reduce⁰(net'⁰)), mappend_lh_₇(deletions⁰, critical⁰)))
//│ in let todo'⁰ = add_agenda⁰(snd_lh_₃(_lh_process2_arg1⁰), new_agenda⁰, _lh_process2_arg5⁰)
//│ in process⁰(_lh_process2_arg1⁰, _lh_process2_arg2⁰, mappend_lh_₅(_lh_process2_LH_P2_1⁰, [LH_C _lh_process2_arg6⁰ [LH_N]]), net'⁰, todo'⁰)}: 4021 --->
//│ 	[LH_P2 let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => case _lh_listcomp_fun_ls_h⁷ of {LH_P2 _lh_split_LH_P2_0⁰ _lh_split_LH_P2_1⁰ => if _lh_split_LH_P2_0⁰ then [LH_C _lh_split_LH_P2_1⁰ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷) | _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁷(tmp⁰) let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => case _lh_listcomp_fun_ls_h⁸ of {LH_P2 _lh_split_LH_P2_0¹ _lh_split_LH_P2_1¹ => if not⁰(_lh_split_LH_P2_0¹) then [LH_C _lh_split_LH_P2_1¹ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | _  => _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁸(tmp⁰)]: 2970
//│ case _lh_result_arg1⁰ of {LH_P2 _lh_result_LH_P2_0⁰ _lh_result_LH_P2_1⁰ => SINGLE_LINE_LET_GROUP_STUB}: 4532 --->
//│ 	[LH_P2 [LH_C 'I' [LH_C '(' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'b' [LH_C ')' [LH_N]]]]]]]]] [LH_C 'I' [LH_C '(' [LH_C 'b' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'I' [LH_C '(' [LH_C 'a' [LH_C ')' [LH_N]]]]]]]]]]]]]: 4615
//│ case _lh_all_arg2⁵ of {LH_N  => [True] | LH_C _lh_all_LH_C_0⁵ _lh_all_LH_C_1⁵ => if _lh_all_arg1⁵(_lh_all_LH_C_0⁵) then all_lh_₁(_lh_all_arg1⁵, _lh_all_LH_C_1⁵) else [False]}: 4546 --->
//│ 	[LH_N]: 4554
//│ 	[LH_C _lh_copy_arg2⁰ copy_lh_₁((_lh_copy_arg1⁰ - 1), _lh_copy_arg2⁰)]: 4565
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testRewrite_nofib_lh_₁(primId⁰(50))
//│ def all_lh_₁(_lh_all_arg1⁶, _lh_all_arg2⁴) = _lh_all_arg2⁴(_lh_all_arg1⁶)
//│ def all_lh_₂(_lh_all_arg1⁵, _lh_all_arg2³) = case _lh_all_arg2³ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0⁴ _lh_all_LH_C_1⁴ => if _lh_all_arg1⁵(_lh_all_LH_C_0⁴) then all_lh_₂(_lh_all_arg1⁵, _lh_all_LH_C_1⁴) else [False]}
//│ def all_lh_₃(_lh_all_arg1⁷, _lh_all_arg2⁵) = case _lh_all_arg2⁵ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0⁵ _lh_all_LH_C_1⁵ => if _lh_all_arg1⁷(_lh_all_LH_C_0⁵) then all_lh_₃(_lh_all_arg1⁷, _lh_all_LH_C_1⁵) else [False]}
//│ def all_lh_₄(_lh_all_arg1⁴, _lh_all_arg2²) = case _lh_all_arg2² of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0³ _lh_all_LH_C_1³ => if _lh_all_arg1⁴(_lh_all_LH_C_0³) then all_lh_₄(_lh_all_arg1⁴, _lh_all_LH_C_1³) else [False]}
//│ def all_lh_₅(_lh_all_arg1⁰, _lh_all_arg2⁰) = case _lh_all_arg2⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0⁰ _lh_all_LH_C_1⁰ => if _lh_all_arg1⁰(_lh_all_LH_C_0⁰) then all_lh_₅(_lh_all_arg1⁰, _lh_all_LH_C_1⁰) else [False]}
//│ def all_lh_₆(_lh_all_arg1³, _lh_all_arg2¹) = case _lh_all_arg2¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0² _lh_all_LH_C_1² => if _lh_all_arg1³(_lh_all_LH_C_0²) then all_lh_₆(_lh_all_arg1³, _lh_all_LH_C_1²) else [False]}
//│ def any_lh_₁(_lh_any_arg1⁴, _lh_any_arg2⁴) = case _lh_any_arg2⁴ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0⁴ _lh_any_LH_C_1⁴ => if _lh_any_arg1⁴(_lh_any_LH_C_0⁴) then [True] else any_lh_₁(_lh_any_arg1⁴, _lh_any_LH_C_1⁴)}
//│ def any_lh_₂(_lh_any_arg1², _lh_any_arg2²) = case _lh_any_arg2² of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0² _lh_any_LH_C_1² => if _lh_any_arg1²(_lh_any_LH_C_0²) then [True] else any_lh_₂(_lh_any_arg1², _lh_any_LH_C_1²)}
//│ def any_lh_₃(_lh_any_arg1¹, _lh_any_arg2¹) = case _lh_any_arg2¹ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0¹ _lh_any_LH_C_1¹ => if _lh_any_arg1¹(_lh_any_LH_C_0¹) then [True] else any_lh_₃(_lh_any_arg1¹, _lh_any_LH_C_1¹)}
//│ def any_lh_₄(_lh_any_arg1³, _lh_any_arg2³) = case _lh_any_arg2³ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0³ _lh_any_LH_C_1³ => if _lh_any_arg1³(_lh_any_LH_C_0³) then [True] else any_lh_₄(_lh_any_arg1³, _lh_any_LH_C_1³)}
//│ def any_lh_₅(_lh_any_arg1⁰, _lh_any_arg2⁰) = case _lh_any_arg2⁰ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0⁰ _lh_any_LH_C_1⁰ => if _lh_any_arg1⁰(_lh_any_LH_C_0⁰) then [True] else any_lh_₅(_lh_any_arg1⁰, _lh_any_LH_C_1⁰)}
//│ def apply_lh_₁(_lh_apply_arg1⁰, _lh_apply_arg2⁰) = getOrElse_lh_₂(assoc_lh_₁(_lh_apply_arg1⁰, _lh_apply_arg2⁰), [Var _lh_apply_arg2⁰])
//│ def assoc_lh_₁(_lh_assoc_arg1⁰, _lh_assoc_arg2⁰) = 
//│ 	let match_x⁰ = (fun uv⁰ -> 
//│ 		let _lh_matchIdent¹² = uv⁰
//│ 		in case _lh_matchIdent¹² of {
//│ 			LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => maybeX_lh_₁(polyEq⁰(_lh_assoc_arg2⁰, _lh_assoc_LH_P2_0⁰), _lh_assoc_LH_P2_1⁰)})
//│ 	in first_ok_lh_₁(map_lh_₁₃(match_x⁰, _lh_assoc_arg1⁰))
//│ def atIndex_lh_₁(n², ls²³) = if (n² < 0) then error⁰ else case ls²³ of {
//│ 	LH_C h²⁹ t³⁷ => if (n² == 0) then h²⁹ else atIndex_lh_₁((n² - 1), t³⁷)
//│ 	| LH_N  => error⁰}
//│ def atIndex_lh_₂(n¹, ls²²) = if (n¹ < 0) then error⁰ else case ls²² of {
//│ 	LH_C h²⁸ t³⁶ => if (n¹ == 0) then h²⁸ else atIndex_lh_₂((n¹ - 1), t³⁶)
//│ 	| LH_N  => error⁰}
//│ def atIndex_lh_₃(n⁰, ls⁸) = if (n⁰ < 0) then error⁰ else case ls⁸ of {
//│ 	LH_C h¹⁴ t²¹ => if (n⁰ == 0) then h¹⁴ else atIndex_lh_₃((n⁰ - 1), t²¹)
//│ 	| LH_N  => error⁰}
//│ def box_lh_₁(_lh_box_arg1⁰) = [LH_C _lh_box_arg1⁰ [LH_N]]
//│ def comp_sub_lh_₁(_lh_comp_sub_arg1⁰, _lh_comp_sub_arg2⁰) = mappend_lh_₇(
//│ 	let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => case _lh_listcomp_fun_ls_h⁶ of {
//│ 			LH_P2 _lh_comp_sub_LH_P2_0⁰ _lh_comp_sub_LH_P2_1⁰ => [LH_C [LH_P2 _lh_comp_sub_LH_P2_0⁰ sub_lh_₂(_lh_comp_sub_LH_P2_1⁰, _lh_comp_sub_arg1⁰)] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)]
//│ 			| _  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁶(_lh_comp_sub_arg2⁰), _lh_comp_sub_arg1⁰)
//│ def concat_lh_₁(lss⁰) = case lss⁰ of {
//│ 	LH_C h²⁶ t³⁴ => mappend_lh_₇(h²⁶, concat_lh_₁(t³⁴))
//│ 	| LH_N  => [LH_N]}
//│ def copy_lh_₁(_lh_copy_arg1⁰, _lh_copy_arg2⁰, _lh_floatOutId_0³) = if (_lh_copy_arg1⁰ <= 0) then [True] else 
//│ 	let _lh_all_LH_C_1¹ = copy_lh_₁((_lh_copy_arg1⁰ - 1), _lh_copy_arg2⁰)
//│ 	in let _lh_all_LH_C_0¹ = _lh_copy_arg2⁰
//│ 	in if _lh_floatOutId_0³(_lh_all_LH_C_0¹) then all_lh_₁(_lh_floatOutId_0³, _lh_all_LH_C_1¹) else [False]
//│ def cost_lh_₁(_lh_cost_arg1⁰) = case _lh_cost_arg1⁰ of {
//│ 	LH_P2 _lh_cost_LH_P2_0⁰ _lh_cost_LH_P2_1⁰ => 
//│ 		let size⁰ = (fun _lh_size_arg1⁰ -> expr_fold_lh_₁((fun x¹ -> (fun a⁰ -> (sum_lh_₁(a⁰) + 1))), (fun dum⁰ -> 0), _lh_size_arg1⁰))
//│ 		in (size⁰(_lh_cost_LH_P2_0⁰) + size⁰(_lh_cost_LH_P2_1⁰))}
//│ def croak_lh_₁ = [Nothing]
//│ def croak_lh_₂ = [Nothing]
//│ def croak_lh_₃ = [Nothing]
//│ def croak_lh_₄ = [Nothing]
//│ def cross_lh_₁(_lh_cross_arg1², _lh_cross_arg2², _lh_cross_arg3²) = case _lh_cross_arg3² of {
//│ 	LH_P2 _lh_cross_LH_P2_0² _lh_cross_LH_P2_1² => [LH_P2 _lh_cross_arg1²(_lh_cross_LH_P2_0²) _lh_cross_arg2²(_lh_cross_LH_P2_1²)]}
//│ def cross_lh_₂(_lh_cross_arg1⁰, _lh_cross_arg2⁰, _lh_cross_arg3⁰) = case _lh_cross_arg3⁰ of {
//│ 	LH_P2 _lh_cross_LH_P2_0⁰ _lh_cross_LH_P2_1⁰ => [LH_P2 _lh_cross_arg1⁰(_lh_cross_LH_P2_0⁰) _lh_cross_arg2⁰(_lh_cross_LH_P2_1⁰)]}
//│ def cross_lh_₃(_lh_cross_arg1¹, _lh_cross_arg2¹, _lh_cross_arg3¹) = case _lh_cross_arg3¹ of {
//│ 	LH_P2 _lh_cross_LH_P2_0¹ _lh_cross_LH_P2_1¹ => [LH_P2 _lh_cross_arg1¹(_lh_cross_LH_P2_0¹) _lh_cross_arg2¹(_lh_cross_LH_P2_1¹)]}
//│ def delete_eqns_lh_₁(_lh_delete_eqns_arg1⁰) = 
//│ 	let ok⁰ = (fun e⁰ -> not⁰(inList_lh_₁(eqno_lh_₁(e⁰), _lh_delete_eqns_arg1⁰)))
//│ 	in map_dnet_lh_₁(filter_lh_₁(ok⁰))
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]}
//│ def dropWhile_lh_₂(_lh_dropWhile_arg1¹, _lh_dropWhile_arg2¹) = case _lh_dropWhile_arg2¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_dropWhile_LH_C_0¹ _lh_dropWhile_LH_C_1¹ => if _lh_dropWhile_arg1¹(_lh_dropWhile_LH_C_0¹) then dropWhile_lh_₂(_lh_dropWhile_arg1¹, _lh_dropWhile_LH_C_1¹) else [LH_C _lh_dropWhile_LH_C_0¹ _lh_dropWhile_LH_C_1¹]}
//│ def enumFrom_lh_₁(a²) = lazy⁰(
//│ 	let tx¹ = enumFrom_lh_₁((a² + 1))
//│ 	in let hx¹ = a²
//│ 	in (fun hy¹ -> (fun ty¹ -> [LH_C [LH_P2 hx¹ hy¹] zip_lz_nl_lh_₁(tx¹, ty¹)])))
//│ def eqExpr_lh_₁(_lh_eqExpr_arg1⁰, _lh_eqExpr_arg2⁰) = case _lh_eqExpr_arg1⁰ of {
//│ 	Func _lh_eqExpr_Func_0⁰ _lh_eqExpr_Func_1⁰ => case _lh_eqExpr_arg2⁰ of {
//│ 		Func _lh_eqExpr_Func_0¹ _lh_eqExpr_Func_1¹ => (polyEq⁰(_lh_eqExpr_Func_0⁰, _lh_eqExpr_Func_0¹) && eqListExpr_lh_₂(_lh_eqExpr_Func_1⁰, _lh_eqExpr_Func_1¹))
//│ 		| _  => [False]}
//│ 	| Var _lh_eqExpr_Var_0⁰ => case _lh_eqExpr_arg2⁰ of {
//│ 		Var _lh_eqExpr_Var_0¹ => polyEq⁰(_lh_eqExpr_Var_0⁰, _lh_eqExpr_Var_0¹)
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqExpr_lh_₂(_lh_eqExpr_arg1², _lh_eqExpr_arg2²) = case _lh_eqExpr_arg1² of {
//│ 	Func _lh_eqExpr_Func_0⁴ _lh_eqExpr_Func_1⁴ => case _lh_eqExpr_arg2² of {
//│ 		Func _lh_eqExpr_Func_0⁵ _lh_eqExpr_Func_1⁵ => (polyEq⁰(_lh_eqExpr_Func_0⁴, _lh_eqExpr_Func_0⁵) && eqListExpr_lh_₂(_lh_eqExpr_Func_1⁴, _lh_eqExpr_Func_1⁵))
//│ 		| _  => [False]}
//│ 	| Var _lh_eqExpr_Var_0⁴ => case _lh_eqExpr_arg2² of {
//│ 		Var _lh_eqExpr_Var_0⁵ => polyEq⁰(_lh_eqExpr_Var_0⁴, _lh_eqExpr_Var_0⁵)
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqExpr_lh_₃(_lh_eqExpr_arg1¹, _lh_eqExpr_arg2¹) = case _lh_eqExpr_arg1¹ of {
//│ 	Func _lh_eqExpr_Func_0² _lh_eqExpr_Func_1² => case _lh_eqExpr_arg2¹ of {
//│ 		Func _lh_eqExpr_Func_0³ _lh_eqExpr_Func_1³ => (polyEq⁰(_lh_eqExpr_Func_0², _lh_eqExpr_Func_0³) && eqListExpr_lh_₁(_lh_eqExpr_Func_1², _lh_eqExpr_Func_1³))
//│ 		| _  => [False]}
//│ 	| Var _lh_eqExpr_Var_0² => case _lh_eqExpr_arg2¹ of {
//│ 		Var _lh_eqExpr_Var_0³ => polyEq⁰(_lh_eqExpr_Var_0², _lh_eqExpr_Var_0³)
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqListExpr_lh_₁(_lh_eqListExpr_arg1⁰, _lh_eqListExpr_arg2⁰) = case _lh_eqListExpr_arg1⁰ of {
//│ 	LH_N  => case _lh_eqListExpr_arg2⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| LH_C _lh_eqListExpr_LH_C_0⁰ _lh_eqListExpr_LH_C_1⁰ => case _lh_eqListExpr_arg2⁰ of {
//│ 		LH_C _lh_eqListExpr_LH_C_0¹ _lh_eqListExpr_LH_C_1¹ => if eqExpr_lh_₃(_lh_eqListExpr_LH_C_0⁰, _lh_eqListExpr_LH_C_0¹) then eqListExpr_lh_₁(_lh_eqListExpr_LH_C_1⁰, _lh_eqListExpr_LH_C_1¹) else [False]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqListExpr_lh_₂(_lh_eqListExpr_arg1¹, _lh_eqListExpr_arg2¹) = case _lh_eqListExpr_arg1¹ of {
//│ 	LH_N  => case _lh_eqListExpr_arg2¹ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| LH_C _lh_eqListExpr_LH_C_0² _lh_eqListExpr_LH_C_1² => case _lh_eqListExpr_arg2¹ of {
//│ 		LH_C _lh_eqListExpr_LH_C_0³ _lh_eqListExpr_LH_C_1³ => if eqExpr_lh_₁(_lh_eqListExpr_LH_C_0², _lh_eqListExpr_LH_C_0³) then eqListExpr_lh_₂(_lh_eqListExpr_LH_C_1², _lh_eqListExpr_LH_C_1³) else [False]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqRewrite_lh_₁(_lh_eqRewrite_arg1⁰, _lh_eqRewrite_arg2⁰, _lh_eqRewrite_arg3⁰) = polyEq⁰(_lh_eqRewrite_arg1⁰([LH_P2 _lh_eqRewrite_arg2⁰ _lh_eqRewrite_arg3⁰]), [Equal])
//│ def eqno_lh_₁(_lh_eqno_arg1⁰) = case _lh_eqno_arg1⁰ of {
//│ 	Eqn _lh_eqno_Eqn_0⁰ _lh_eqno_Eqn_1⁰ => case _lh_eqno_Eqn_1⁰ of {
//│ 		LH_P2 _lh_eqno_LH_P2_0⁰ _lh_eqno_LH_P2_1⁰ => _lh_eqno_Eqn_0⁰}}
//│ def eqpr_lh_₁(_lh_eqpr_arg1⁰) = case _lh_eqpr_arg1⁰ of {
//│ 	Eqn _lh_eqpr_Eqn_0⁰ _lh_eqpr_Eqn_1⁰ => _lh_eqpr_Eqn_1⁰}
//│ def exists_lh_₁(_lh_exists_arg1¹) = case _lh_exists_arg1¹ of {
//│ 	Nothing  => [False]
//│ 	| _  => [True]}
//│ def exists_lh_₂(_lh_exists_arg1⁰) = case _lh_exists_arg1⁰ of {
//│ 	Nothing  => [False]
//│ 	| _  => [True]}
//│ def expr_fold_lh_₁(_lh_expr_fold_arg1⁰, _lh_expr_fold_arg2⁰, _lh_expr_fold_arg3⁰) = case _lh_expr_fold_arg3⁰ of {
//│ 	Var _lh_expr_fold_Var_0⁰ => _lh_expr_fold_arg2⁰(_lh_expr_fold_Var_0⁰)
//│ 	| Func _lh_expr_fold_Func_0⁰ _lh_expr_fold_Func_1⁰ => _lh_expr_fold_arg1⁰(_lh_expr_fold_Func_0⁰, map_lh_₁₃(expr_fold_lh_₁(_lh_expr_fold_arg1⁰, _lh_expr_fold_arg2⁰), _lh_expr_fold_Func_1⁰))}
//│ def filter_lh_₁(f²⁶, ls¹⁸) = case ls¹⁸ of {
//│ 	LH_C h²⁵ t³³ => if f²⁶(h²⁵) then [LH_C h²⁵ filter_lh_₁(f²⁶, t³³)] else filter_lh_₁(f²⁶, t³³)
//│ 	| LH_N  => [LH_N]}
//│ def first_ok_lh_₁(_lh_first_ok_arg1⁰) = foldr_lh_₂(orElse_lh_₁, [Nothing], _lh_first_ok_arg1⁰)
//│ def foldl_lh_₁(f⁴, i⁰, ls¹) = case ls¹ of {
//│ 	LH_C h¹ t⁵ => foldl_lh_₁(f⁴, f⁴(i⁰, h¹), t⁵)
//│ 	| LH_N  => i⁰}
//│ def foldr_lh_₁(f¹³, i¹, ls⁶) = ls⁶(f¹³, i¹)
//│ def foldr_lh_₂(f¹⁴, i², ls⁷) = case ls⁷ of {
//│ 	LH_C h¹² t¹⁸ => f¹⁴(h¹², foldr_lh_₂(f¹⁴, i², t¹⁸))
//│ 	| LH_N  => i²}
//│ def fst_lh_₁(_lh_fst_arg1²) = case _lh_fst_arg1² of {
//│ 	LH_P2 _lh_fst_LH_P2_0² _lh_fst_LH_P2_1² => _lh_fst_LH_P2_0²}
//│ def fst_lh_₂(_lh_fst_arg1¹) = case _lh_fst_arg1¹ of {
//│ 	LH_P2 _lh_fst_LH_P2_0¹ _lh_fst_LH_P2_1¹ => _lh_fst_LH_P2_0¹}
//│ def fst_lh_₃(_lh_fst_arg1³) = case _lh_fst_arg1³ of {
//│ 	LH_P2 _lh_fst_LH_P2_0³ _lh_fst_LH_P2_1³ => _lh_fst_LH_P2_0³}
//│ def fst_lh_₄(_lh_fst_arg1⁰) = case _lh_fst_arg1⁰ of {
//│ 	LH_P2 _lh_fst_LH_P2_0⁰ _lh_fst_LH_P2_1⁰ => _lh_fst_LH_P2_0⁰}
//│ def geRewrite_lh_₁(_lh_geRewrite_arg1², _lh_geRewrite_arg2², _lh_geRewrite_arg3²) = inList_lh_₁(_lh_geRewrite_arg1²([LH_P2 _lh_geRewrite_arg2² _lh_geRewrite_arg3²]), 
//│ 	let _lh_inList_LH_C_1¹³ = 	
//│ 		let _lh_inList_LH_C_1¹⁴ = (fun _lh_inList_arg1¹⁸ -> [False])
//│ 		in let _lh_inList_LH_C_0¹³ = [Equal]
//│ 		in (fun _lh_inList_arg1¹⁹ -> if polyEq⁰(_lh_inList_arg1¹⁹, _lh_inList_LH_C_0¹³) then [True] else inList_lh_₁(_lh_inList_arg1¹⁹, _lh_inList_LH_C_1¹⁴))
//│ 	in let _lh_inList_LH_C_0¹⁴ = [Greater]
//│ 	in (fun _lh_inList_arg1²⁰ -> if polyEq⁰(_lh_inList_arg1²⁰, _lh_inList_LH_C_0¹⁴) then [True] else inList_lh_₁(_lh_inList_arg1²⁰, _lh_inList_LH_C_1¹³)))
//│ def geRewrite_lh_₂(_lh_geRewrite_arg1³, _lh_geRewrite_arg2³, _lh_geRewrite_arg3³) = inList_lh_₁(_lh_geRewrite_arg1³([LH_P2 _lh_geRewrite_arg2³ _lh_geRewrite_arg3³]), 
//│ 	let _lh_inList_LH_C_1¹⁵ = 	
//│ 		let _lh_inList_LH_C_1¹⁶ = (fun _lh_inList_arg1²¹ -> [False])
//│ 		in let _lh_inList_LH_C_0¹⁵ = [Equal]
//│ 		in (fun _lh_inList_arg1²² -> if polyEq⁰(_lh_inList_arg1²², _lh_inList_LH_C_0¹⁵) then [True] else inList_lh_₁(_lh_inList_arg1²², _lh_inList_LH_C_1¹⁶))
//│ 	in let _lh_inList_LH_C_0¹⁶ = [Greater]
//│ 	in (fun _lh_inList_arg1²³ -> if polyEq⁰(_lh_inList_arg1²³, _lh_inList_LH_C_0¹⁶) then [True] else inList_lh_₁(_lh_inList_arg1²³, _lh_inList_LH_C_1¹⁵)))
//│ def geRewrite_lh_₃(_lh_geRewrite_arg1⁰, _lh_geRewrite_arg2⁰, _lh_geRewrite_arg3⁰) = inList_lh_₁(_lh_geRewrite_arg1⁰([LH_P2 _lh_geRewrite_arg2⁰ _lh_geRewrite_arg3⁰]), 
//│ 	let _lh_inList_LH_C_1⁰ = 	
//│ 		let _lh_inList_LH_C_1¹ = (fun _lh_inList_arg1⁰ -> [False])
//│ 		in let _lh_inList_LH_C_0⁰ = [Equal]
//│ 		in (fun _lh_inList_arg1¹ -> if polyEq⁰(_lh_inList_arg1¹, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1¹, _lh_inList_LH_C_1¹))
//│ 	in let _lh_inList_LH_C_0¹ = [Greater]
//│ 	in (fun _lh_inList_arg1² -> if polyEq⁰(_lh_inList_arg1², _lh_inList_LH_C_0¹) then [True] else inList_lh_₁(_lh_inList_arg1², _lh_inList_LH_C_1⁰)))
//│ def geRewrite_lh_₄(_lh_geRewrite_arg1¹, _lh_geRewrite_arg2¹, _lh_geRewrite_arg3¹) = inList_lh_₁(_lh_geRewrite_arg1¹([LH_P2 _lh_geRewrite_arg2¹ _lh_geRewrite_arg3¹]), 
//│ 	let _lh_inList_LH_C_1¹⁰ = 	
//│ 		let _lh_inList_LH_C_1¹¹ = (fun _lh_inList_arg1¹² -> [False])
//│ 		in let _lh_inList_LH_C_0¹⁰ = [Equal]
//│ 		in (fun _lh_inList_arg1¹³ -> if polyEq⁰(_lh_inList_arg1¹³, _lh_inList_LH_C_0¹⁰) then [True] else inList_lh_₁(_lh_inList_arg1¹³, _lh_inList_LH_C_1¹¹))
//│ 	in let _lh_inList_LH_C_0¹¹ = [Greater]
//│ 	in (fun _lh_inList_arg1¹⁴ -> if polyEq⁰(_lh_inList_arg1¹⁴, _lh_inList_LH_C_0¹¹) then [True] else inList_lh_₁(_lh_inList_arg1¹⁴, _lh_inList_LH_C_1¹⁰)))
//│ def getOrElse_lh_₁(_lh_getOrElse_arg1⁰, _lh_getOrElse_arg2⁰) = _lh_getOrElse_arg1⁰(_lh_getOrElse_arg2⁰)
//│ def getOrElse_lh_₂(_lh_getOrElse_arg1¹, _lh_getOrElse_arg2³) = case _lh_getOrElse_arg1¹ of {
//│ 	Just _lh_getOrElse_Just_0¹ => _lh_getOrElse_Just_0¹
//│ 	| Nothing  => _lh_getOrElse_arg2³}
//│ def gtRewrite_lh_₁(_lh_gtRewrite_arg1⁰, _lh_gtRewrite_arg2⁰, _lh_gtRewrite_arg3⁰) = polyEq⁰(_lh_gtRewrite_arg1⁰([LH_P2 _lh_gtRewrite_arg2⁰ _lh_gtRewrite_arg3⁰]), [Greater])
//│ def inList_lh_₁(_lh_inList_arg1¹⁵, _lh_inList_arg2⁰) = _lh_inList_arg2⁰(_lh_inList_arg1¹⁵)
//│ def inside_lh_₁(_lh_inside_arg1⁰, _lh_inside_arg2⁰) = first_ok_lh_₁(
//│ 	let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => case _lh_listcomp_fun_ls_h⁵ of {
//│ 			LH_P2 _lh_inside_LH_P2_0⁰ _lh_inside_LH_P2_1⁰ => [LH_C lift_lh_₁₀(replace_lh_₂(_lh_inside_arg2⁰, _lh_inside_LH_P2_0⁰), _lh_inside_arg1⁰(_lh_inside_LH_P2_1⁰)) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)]
//│ 			| _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁵(subterms_lh_₂(_lh_inside_arg2⁰)))
//│ def lhs_lh_₁(_lh_lhs_arg1³) = case _lh_lhs_arg1³ of {
//│ 	Eqn _lh_lhs_Eqn_0³ _lh_lhs_Eqn_1³ => case _lh_lhs_Eqn_1³ of {
//│ 		LH_P2 _lh_lhs_LH_P2_0³ _lh_lhs_LH_P2_1³ => _lh_lhs_LH_P2_0³}}
//│ def lhs_lh_₂(_lh_lhs_arg1²) = case _lh_lhs_arg1² of {
//│ 	Eqn _lh_lhs_Eqn_0² _lh_lhs_Eqn_1² => case _lh_lhs_Eqn_1² of {
//│ 		LH_P2 _lh_lhs_LH_P2_0² _lh_lhs_LH_P2_1² => _lh_lhs_LH_P2_0²}}
//│ def lhs_lh_₃(_lh_lhs_arg1⁴) = case _lh_lhs_arg1⁴ of {
//│ 	Eqn _lh_lhs_Eqn_0⁴ _lh_lhs_Eqn_1⁴ => case _lh_lhs_Eqn_1⁴ of {
//│ 		LH_P2 _lh_lhs_LH_P2_0⁴ _lh_lhs_LH_P2_1⁴ => _lh_lhs_LH_P2_0⁴}}
//│ def lhs_lh_₄(_lh_lhs_arg1¹) = case _lh_lhs_arg1¹ of {
//│ 	Eqn _lh_lhs_Eqn_0¹ _lh_lhs_Eqn_1¹ => case _lh_lhs_Eqn_1¹ of {
//│ 		LH_P2 _lh_lhs_LH_P2_0¹ _lh_lhs_LH_P2_1¹ => _lh_lhs_LH_P2_0¹}}
//│ def lhs_lh_₅(_lh_lhs_arg1⁰) = case _lh_lhs_arg1⁰ of {
//│ 	Eqn _lh_lhs_Eqn_0⁰ _lh_lhs_Eqn_1⁰ => case _lh_lhs_Eqn_1⁰ of {
//│ 		LH_P2 _lh_lhs_LH_P2_0⁰ _lh_lhs_LH_P2_1⁰ => _lh_lhs_LH_P2_0⁰}}
//│ def lhs_lh_₆(_lh_lhs_arg1⁶) = case _lh_lhs_arg1⁶ of {
//│ 	Eqn _lh_lhs_Eqn_0⁶ _lh_lhs_Eqn_1⁶ => case _lh_lhs_Eqn_1⁶ of {
//│ 		LH_P2 _lh_lhs_LH_P2_0⁶ _lh_lhs_LH_P2_1⁶ => _lh_lhs_LH_P2_0⁶}}
//│ def lhs_lh_₇(_lh_lhs_arg1⁵) = case _lh_lhs_arg1⁵ of {
//│ 	Eqn _lh_lhs_Eqn_0⁵ _lh_lhs_Eqn_1⁵ => case _lh_lhs_Eqn_1⁵ of {
//│ 		LH_P2 _lh_lhs_LH_P2_0⁵ _lh_lhs_LH_P2_1⁵ => _lh_lhs_LH_P2_0⁵}}
//│ def lift_lh_₁(_lh_lift_arg1⁰, _lh_lift_arg2⁰) = case _lh_lift_arg2⁰ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁰ => [Just _lh_lift_arg1⁰(_lh_lift_Just_0⁰)]}
//│ def lift_lh_₁₀(_lh_lift_arg1², _lh_lift_arg2²) = case _lh_lift_arg2² of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0² => [Just _lh_lift_arg1²(_lh_lift_Just_0²)]}
//│ def lift_lh_₂(_lh_lift_arg1⁷, _lh_lift_arg2⁷) = case _lh_lift_arg2⁷ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁷ => [Just _lh_lift_arg1⁷(_lh_lift_Just_0⁷)]}
//│ def lift_lh_₃(_lh_lift_arg1⁶, _lh_lift_arg2⁶, _lh_floatOutId_0²) = case _lh_lift_arg2⁶ of {
//│ 	Nothing  => _lh_floatOutId_0²
//│ 	| Just _lh_lift_Just_0⁶ => 
//│ 		let _lh_getOrElse_Just_0⁰ = _lh_lift_arg1⁶(_lh_lift_Just_0⁶)
//│ 		in _lh_getOrElse_Just_0⁰}
//│ def lift_lh_₄(_lh_lift_arg1¹, _lh_lift_arg2¹, _lh_floatOutId_0⁰) = case _lh_lift_arg2¹ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0¹ => 
//│ 		let _lh_squash_Just_0⁰ = _lh_lift_arg1¹(_lh_lift_Just_0¹)
//│ 		in _lh_squash_Just_0⁰}
//│ def lift_lh_₅(_lh_lift_arg1⁴, _lh_lift_arg2⁴, _lh_floatOutId_0¹) = case _lh_lift_arg2⁴ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁴ => 
//│ 		let _lh_squash_Just_0¹ = _lh_lift_arg1⁴(_lh_lift_Just_0⁴)
//│ 		in _lh_squash_Just_0¹}
//│ def lift_lh_₆(_lh_lift_arg1⁹, _lh_lift_arg2⁹) = case _lh_lift_arg2⁹ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁹ => [Just _lh_lift_arg1⁹(_lh_lift_Just_0⁹)]}
//│ def lift_lh_₇(_lh_lift_arg1³, _lh_lift_arg2³) = case _lh_lift_arg2³ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0³ => [Just _lh_lift_arg1³(_lh_lift_Just_0³)]}
//│ def lift_lh_₈(_lh_lift_arg1⁵, _lh_lift_arg2⁵) = case _lh_lift_arg2⁵ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁵ => [Just _lh_lift_arg1⁵(_lh_lift_Just_0⁵)]}
//│ def lift_lh_₉(_lh_lift_arg1⁸, _lh_lift_arg2⁸) = case _lh_lift_arg2⁸ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁸ => [Just _lh_lift_arg1⁸(_lh_lift_Just_0⁸)]}
//│ def listify_lh_₁(_lh_listify_arg1⁰) = getOrElse_lh_₂(lift_lh_₁₀(box_lh_₁, _lh_listify_arg1⁰), [LH_N])
//│ def ltRewrite_lh_₁(_lh_ltRewrite_arg1³, _lh_ltRewrite_arg2³, _lh_ltRewrite_arg3³) = polyEq⁰(_lh_ltRewrite_arg1³([LH_P2 _lh_ltRewrite_arg2³ _lh_ltRewrite_arg3³]), [Less])
//│ def ltRewrite_lh_₂(_lh_ltRewrite_arg1⁰, _lh_ltRewrite_arg2⁰, _lh_ltRewrite_arg3⁰) = polyEq⁰(_lh_ltRewrite_arg1⁰([LH_P2 _lh_ltRewrite_arg2⁰ _lh_ltRewrite_arg3⁰]), [Less])
//│ def ltRewrite_lh_₃(_lh_ltRewrite_arg1¹, _lh_ltRewrite_arg2¹, _lh_ltRewrite_arg3¹) = polyEq⁰(_lh_ltRewrite_arg1¹([LH_P2 _lh_ltRewrite_arg2¹ _lh_ltRewrite_arg3¹]), [Less])
//│ def ltRewrite_lh_₄(_lh_ltRewrite_arg1², _lh_ltRewrite_arg2², _lh_ltRewrite_arg3²) = polyEq⁰(_lh_ltRewrite_arg1²([LH_P2 _lh_ltRewrite_arg2² _lh_ltRewrite_arg3²]), [Less])
//│ def map_dnet_lh_₁(_lh_map_dnet_arg1⁰, _lh_map_dnet_arg2⁰) = case _lh_map_dnet_arg2⁰ of {
//│ 	Switch _lh_map_dnet_Switch_0⁰ _lh_map_dnet_Switch_1⁰ => [Switch map_lh_₁₃(cross_lh_₃((fun x¹⁵ -> x¹⁵), map_dnet_lh_₁(_lh_map_dnet_arg1⁰)), _lh_map_dnet_Switch_0⁰) map_dnet_lh_₁(_lh_map_dnet_arg1⁰, _lh_map_dnet_Switch_1⁰)]
//│ 	| Return _lh_map_dnet_Return_0⁰ => [Return _lh_map_dnet_arg1⁰(_lh_map_dnet_Return_0⁰)]}
//│ def map_lh_₁(f²⁰, ls¹⁴, _lh_floatOutId_0⁷) = case ls¹⁴ of {
//│ 	LH_C h²¹ t²⁸ => 
//│ 		let t²⁹ = map_lh_₁(f²⁰, t²⁸)
//│ 		in let h²² = f²⁰(h²¹)
//│ 		in [LH_C _lh_floatOutId_0⁷(h²²) map_lh_₄(_lh_floatOutId_0⁷, t²⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₀(f²⁸, ls²¹) = case ls²¹ of {
//│ 	LH_C h²⁷ t³⁵ => [LH_C f²⁸(h²⁷) map_lh_₁₀(f²⁸, t³⁵)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₁(f⁶, ls³) = case ls³ of {
//│ 	LH_C h⁴ t⁹ => [LH_C f⁶(h⁴) map_lh_₁₁(f⁶, t⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₂(f¹⁶, ls¹¹, _lh_floatOutId_0⁵, _lh_floatOutId_1⁰) = case ls¹¹ of {
//│ 	LH_C h¹⁶ t²³ => 
//│ 		let t²⁴ = map_lh_₁₂(f¹⁶, t²³)
//│ 		in let h¹⁷ = f¹⁶(h¹⁶)
//│ 		in _lh_floatOutId_0⁵(h¹⁷, foldr_lh_₁(_lh_floatOutId_0⁵, _lh_floatOutId_1⁰, t²⁴))
//│ 	| LH_N  => _lh_floatOutId_1⁰}
//│ def map_lh_₁₃(f¹², ls⁵) = case ls⁵ of {
//│ 	LH_C h⁹ t¹⁵ => [LH_C f¹²(h⁹) map_lh_₁₃(f¹², t¹⁵)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f¹⁹, ls¹², _lh_floatOutId_0⁶) = case ls¹² of {
//│ 	LH_C h¹⁸ t²⁵ => 
//│ 		let t²⁶ = map_lh_₂(f¹⁹, t²⁵)
//│ 		in let h¹⁹ = f¹⁹(h¹⁸)
//│ 		in [LH_C h¹⁹ mappend_lh_₆(t²⁶, _lh_floatOutId_0⁶)]
//│ 	| LH_N  => _lh_floatOutId_0⁶}
//│ def map_lh_₃(f²⁵, ls¹⁷) = case ls¹⁷ of {
//│ 	LH_C h²⁴ t³² => [LH_C f²⁵(h²⁴) map_lh_₃(f²⁵, t³²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f²⁷, ls¹⁹) = ls¹⁹(f²⁷)
//│ def map_lh_₅(f²⁴, ls¹⁶) = ls¹⁶(f²⁴)
//│ def map_lh_₆(f¹⁵, ls¹⁰, _lh_floatOutId_0⁴) = case ls¹⁰ of {
//│ 	LH_C h¹⁵ t²² => 
//│ 		let _lh_inList_LH_C_1¹² = map_lh_₆(f¹⁵, t²²)
//│ 		in let _lh_inList_LH_C_0¹² = f¹⁵(h¹⁵)
//│ 		in if polyEq⁰(_lh_floatOutId_0⁴, _lh_inList_LH_C_0¹²) then [True] else inList_lh_₁(_lh_floatOutId_0⁴, _lh_inList_LH_C_1¹²)
//│ 	| LH_N  => [False]}
//│ def map_lh_₇(f⁵, ls²) = case ls² of {
//│ 	LH_C h² t⁷ => [LH_C f⁵(h²) map_lh_₇(f⁵, t⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₈(f²⁹, ls²⁴, _lh_floatOutId_0¹⁰) = case ls²⁴ of {
//│ 	LH_C h³⁰ t³⁸ => 
//│ 		let t³⁹ = map_lh_₈(f²⁹, t³⁸)
//│ 		in let h³¹ = f²⁹(h³⁰)
//│ 		in [LH_C h³¹ mappend_lh_₄(t³⁹, _lh_floatOutId_0¹⁰)]
//│ 	| LH_N  => _lh_floatOutId_0¹⁰}
//│ def map_lh_₉(f³, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁴ => [LH_C f³(h⁰) map_lh_₉(f³, t⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs², ys²) = case xs² of {
//│ 	LH_C h³ t⁸ => [LH_C h³ mappend_lh_₁(t⁸, ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₂(xs⁶, ys⁶) = case xs⁶ of {
//│ 	LH_C h¹¹ t¹⁷ => [LH_C h¹¹ mappend_lh_₂(t¹⁷, ys⁶)]
//│ 	| LH_N  => ys⁶}
//│ def mappend_lh_₃(xs⁰, ys⁰) = xs⁰(ys⁰)
//│ def mappend_lh_₄(xs⁹, ys⁹) = xs⁹(ys⁹)
//│ def mappend_lh_₅(xs⁷, ys⁷) = case xs⁷ of {
//│ 	LH_C h¹³ t²⁰ => [LH_C h¹³ mappend_lh_₅(t²⁰, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₆(xs⁸, ys⁸) = xs⁸(ys⁸)
//│ def mappend_lh_₇(xs⁵, ys⁵) = case xs⁵ of {
//│ 	LH_C h¹⁰ t¹⁶ => [LH_C h¹⁰ mappend_lh_₇(t¹⁶, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def match'_lh_₁(_lh_match'_arg1⁰, _lh_match'_arg2⁰) = case _lh_match'_arg2⁰ of {
//│ 	LH_P2 _lh_match'_LH_P2_0⁰ _lh_match'_LH_P2_1⁰ => case _lh_match'_LH_P2_0⁰ of {
//│ 		Var _lh_match'_Var_0⁰ => 
//│ 			let u⁰ = assoc_lh_₁(_lh_match'_arg1⁰, _lh_match'_Var_0⁰)
//│ 			in if not⁰(exists_lh_₂(u⁰)) then succeed_lh_₄([LH_C [LH_P2 _lh_match'_Var_0⁰ _lh_match'_LH_P2_1⁰] _lh_match'_arg1⁰]) else if eqExpr_lh_₃(the_lh_₂(u⁰), _lh_match'_LH_P2_1⁰) then succeed_lh_₄(_lh_match'_arg1⁰) else croak_lh_₄
//│ 		| Func _lh_match'_Func_0⁰ _lh_match'_Func_1⁰ => case _lh_match'_LH_P2_1⁰ of {
//│ 			Func _lh_match'_Func_0¹ _lh_match'_Func_1¹ => if polyEq⁰(_lh_match'_Func_0⁰, _lh_match'_Func_0¹) then prop_fold_lh_₁(match'_lh_₁, _lh_match'_arg1⁰, zip_lh_₁(_lh_match'_Func_1⁰, _lh_match'_Func_1¹)) else croak_lh_₄
//│ 			| Var _lh_match'_Var_0¹ => croak_lh_₄
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def match_lh_₁(_lh_match_arg1⁰, _lh_match_arg2⁰) = match'_lh_₁([LH_N], [LH_P2 _lh_match_arg1⁰ _lh_match_arg2⁰])
//│ def maybeX_lh_₁(_lh_maybeX_arg1⁰, _lh_maybeX_arg2⁰) = if _lh_maybeX_arg1⁰ then [Just _lh_maybeX_arg2⁰] else [Nothing]
//│ def modify_lh_₁(_lh_modify_arg1⁰, _lh_modify_arg2⁰, _lh_modify_arg3⁰) = case _lh_modify_arg1⁰ of {
//│ 	LH_C _lh_modify_LH_C_0⁰ _lh_modify_LH_C_1⁰ => case _lh_modify_arg2⁰ of {
//│ 		0  => [LH_C _lh_modify_arg3⁰(_lh_modify_LH_C_0⁰) _lh_modify_LH_C_1⁰]
//│ 		| _  => [LH_C _lh_modify_LH_C_0⁰ modify_lh_₁(_lh_modify_LH_C_1⁰, (_lh_modify_arg2⁰ - 1), _lh_modify_arg3⁰)]}
//│ 	| _  => error⁰}
//│ def occurs_lh_₁(_lh_occurs_arg1¹) = expr_fold_lh_₁((fun dum⁴ -> or_lh_₁), (fun x²¹ -> polyEq⁰(x²¹, _lh_occurs_arg1¹)))
//│ def occurs_lh_₂(_lh_occurs_arg1⁰) = expr_fold_lh_₁((fun dum² -> or_lh_₁), (fun x¹³ -> polyEq⁰(x¹³, _lh_occurs_arg1⁰)))
//│ def orElseMap_lh_₁(_lh_orElseMap_arg1², _lh_orElseMap_arg2², _lh_orElseMap_arg3²) = orElse_lh_₁(_lh_orElseMap_arg1²(_lh_orElseMap_arg3²), _lh_orElseMap_arg2²(_lh_orElseMap_arg3²))
//│ def orElseMap_lh_₂(_lh_orElseMap_arg1³, _lh_orElseMap_arg2³, _lh_orElseMap_arg3³) = orElse_lh_₁(_lh_orElseMap_arg1³(_lh_orElseMap_arg3³), _lh_orElseMap_arg2³(_lh_orElseMap_arg3³))
//│ def orElseMap_lh_₃(_lh_orElseMap_arg1¹, _lh_orElseMap_arg2¹, _lh_orElseMap_arg3¹) = orElse_lh_₁(_lh_orElseMap_arg1¹(_lh_orElseMap_arg3¹), _lh_orElseMap_arg2¹(_lh_orElseMap_arg3¹))
//│ def orElseMap_lh_₄(_lh_orElseMap_arg1⁰, _lh_orElseMap_arg2⁰, _lh_orElseMap_arg3⁰) = orElse_lh_₁(_lh_orElseMap_arg1⁰(_lh_orElseMap_arg3⁰), _lh_orElseMap_arg2⁰(_lh_orElseMap_arg3⁰))
//│ def orElse_lh_₁(_lh_orElse_arg1⁰, _lh_orElse_arg2⁰) = case _lh_orElse_arg1⁰ of {
//│ 	Nothing  => _lh_orElse_arg2⁰
//│ 	| _  => _lh_orElse_arg1⁰}
//│ def or_lh_₁(_lh_or_arg1⁰) = case _lh_or_arg1⁰ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_or_LH_C_0⁰ _lh_or_LH_C_1⁰ => if _lh_or_LH_C_0⁰ then [True] else or_lh_₁(_lh_or_LH_C_1⁰)}
//│ def pair_lh_₁(_lh_pair_arg1¹, _lh_pair_arg2¹) = [LH_P2 _lh_pair_arg1¹ _lh_pair_arg2¹]
//│ def pair_lh_₂(_lh_pair_arg1⁰, _lh_pair_arg2⁰) = [LH_P2 _lh_pair_arg1⁰ _lh_pair_arg2⁰]
//│ def prop2_lh_₁(_lh_prop2_arg1⁰, _lh_prop2_arg2⁰, _lh_prop2_arg3⁰) = case _lh_prop2_arg2⁰ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_prop2_Just_0⁰ => _lh_prop2_arg1⁰(_lh_prop2_Just_0⁰, _lh_prop2_arg3⁰)}
//│ def prop_fold_lh_₁(_lh_prop_fold_arg1⁰, _lh_prop_fold_arg2⁰, _lh_prop_fold_arg3⁰) = case _lh_prop_fold_arg3⁰ of {
//│ 	LH_N  => [Just _lh_prop_fold_arg2⁰]
//│ 	| LH_C _lh_prop_fold_LH_C_0⁰ _lh_prop_fold_LH_C_1⁰ => prop2_lh_₁(prop_fold_lh_₁(_lh_prop_fold_arg1⁰), _lh_prop_fold_arg1⁰(_lh_prop_fold_arg2⁰, _lh_prop_fold_LH_C_0⁰), _lh_prop_fold_LH_C_1⁰)}
//│ def quant_lh_₁(_lh_quant_arg1⁵, _lh_quant_arg2⁵, _lh_quant_arg3⁵, _lh_quant_arg4⁵) = 
//│ 	let p⁵ = (fun x²² -> _lh_quant_arg2⁵(x²², _lh_quant_arg3⁵))
//│ 	in _lh_quant_arg1⁵(p⁵, _lh_quant_arg4⁵)
//│ def quant_lh_₁₀(_lh_quant_arg1¹, _lh_quant_arg2¹, _lh_quant_arg3¹, _lh_quant_arg4¹) = 
//│ 	let p¹ = (fun x¹⁴ -> _lh_quant_arg2¹(x¹⁴, _lh_quant_arg3¹))
//│ 	in _lh_quant_arg1¹(p¹, _lh_quant_arg4¹)
//│ def quant_lh_₂(_lh_quant_arg1², _lh_quant_arg2², _lh_quant_arg3², _lh_quant_arg4²) = 
//│ 	let p² = (fun x¹⁶ -> _lh_quant_arg2²(x¹⁶, _lh_quant_arg3²))
//│ 	in _lh_quant_arg1²(p², _lh_quant_arg4²)
//│ def quant_lh_₃(_lh_quant_arg1⁸, _lh_quant_arg2⁸, _lh_quant_arg3⁸, _lh_quant_arg4⁸) = 
//│ 	let p⁸ = (fun x²⁵ -> _lh_quant_arg2⁸(x²⁵, _lh_quant_arg3⁸))
//│ 	in _lh_quant_arg1⁸(p⁸, _lh_quant_arg4⁸)
//│ def quant_lh_₄(_lh_quant_arg1⁹, _lh_quant_arg2⁹, _lh_quant_arg3⁹, _lh_quant_arg4⁹) = 
//│ 	let p⁹ = (fun x²⁷ -> _lh_quant_arg2⁹(x²⁷, _lh_quant_arg3⁹))
//│ 	in _lh_quant_arg1⁹(p⁹, _lh_quant_arg4⁹)
//│ def quant_lh_₅(_lh_quant_arg1⁰, _lh_quant_arg2⁰, _lh_quant_arg3⁰, _lh_quant_arg4⁰) = 
//│ 	let p⁰ = (fun x⁰ -> _lh_quant_arg2⁰(x⁰, _lh_quant_arg3⁰))
//│ 	in _lh_quant_arg1⁰(p⁰, _lh_quant_arg4⁰)
//│ def quant_lh_₆(_lh_quant_arg1⁶, _lh_quant_arg2⁶, _lh_quant_arg3⁶, _lh_quant_arg4⁶) = 
//│ 	let p⁶ = (fun x²³ -> _lh_quant_arg2⁶(x²³, _lh_quant_arg3⁶))
//│ 	in _lh_quant_arg1⁶(p⁶, _lh_quant_arg4⁶)
//│ def quant_lh_₇(_lh_quant_arg1⁴, _lh_quant_arg2⁴, _lh_quant_arg3⁴, _lh_quant_arg4⁴) = 
//│ 	let p⁴ = (fun x²⁰ -> _lh_quant_arg2⁴(x²⁰, _lh_quant_arg3⁴))
//│ 	in _lh_quant_arg1⁴(p⁴, _lh_quant_arg4⁴)
//│ def quant_lh_₈(_lh_quant_arg1⁷, _lh_quant_arg2⁷, _lh_quant_arg3⁷, _lh_quant_arg4⁷) = 
//│ 	let p⁷ = (fun x²⁴ -> _lh_quant_arg2⁷(x²⁴, _lh_quant_arg3⁷))
//│ 	in _lh_quant_arg1⁷(p⁷, _lh_quant_arg4⁷)
//│ def quant_lh_₉(_lh_quant_arg1³, _lh_quant_arg2³, _lh_quant_arg3³, _lh_quant_arg4³) = 
//│ 	let p³ = (fun x¹⁷ -> _lh_quant_arg2³(x¹⁷, _lh_quant_arg3³))
//│ 	in _lh_quant_arg1³(p³, _lh_quant_arg4³)
//│ def reduce1_lh_₁(_lh_reduce1_arg1⁰) = inside_lh_₁(rewrite_lh_₁(_lh_reduce1_arg1⁰))
//│ def replace_lh_₁(_lh_replace_arg1¹, _lh_replace_arg2¹, _lh_replace_arg3¹) = case _lh_replace_arg2¹ of {
//│ 	LH_N  => _lh_replace_arg3¹
//│ 	| _  => case _lh_replace_arg1¹ of {
//│ 		Func _lh_replace_Func_0¹ _lh_replace_Func_1¹ => case _lh_replace_arg2¹ of {
//│ 			LH_C _lh_replace_LH_C_0¹ _lh_replace_LH_C_1¹ => [Func _lh_replace_Func_0¹ modify_lh_₁(_lh_replace_Func_1¹, _lh_replace_LH_C_0¹, (fun t⁶ -> replace_lh_₁(t⁶, _lh_replace_LH_C_1¹, _lh_replace_arg3¹)))]
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}}
//│ def replace_lh_₂(_lh_replace_arg1⁰, _lh_replace_arg2⁰, _lh_replace_arg3⁰) = case _lh_replace_arg2⁰ of {
//│ 	LH_N  => _lh_replace_arg3⁰
//│ 	| _  => case _lh_replace_arg1⁰ of {
//│ 		Func _lh_replace_Func_0⁰ _lh_replace_Func_1⁰ => case _lh_replace_arg2⁰ of {
//│ 			LH_C _lh_replace_LH_C_0⁰ _lh_replace_LH_C_1⁰ => [Func _lh_replace_Func_0⁰ modify_lh_₁(_lh_replace_Func_1⁰, _lh_replace_LH_C_0⁰, (fun t¹ -> replace_lh_₂(t¹, _lh_replace_LH_C_1⁰, _lh_replace_arg3⁰)))]
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}}
//│ def result_lh_₁(_lh_result_arg1⁰) = _lh_result_arg1⁰([lh_Unit])
//│ def rewrite_lh_₁(_lh_rewrite_arg1⁰, _lh_floatOutId_0⁹) = case _lh_rewrite_arg1⁰ of {
//│ 	Eqn _lh_rewrite_Eqn_0⁰ _lh_rewrite_Eqn_1⁰ => case _lh_rewrite_Eqn_1⁰ of {
//│ 		LH_P2 _lh_rewrite_LH_P2_0⁰ _lh_rewrite_LH_P2_1⁰ => lift_lh_₁₀(sub_lh_₂(_lh_rewrite_LH_P2_1⁰), match_lh_₁(_lh_rewrite_LH_P2_0⁰, _lh_floatOutId_0⁹))}}
//│ def sift_lh_₁(_lh_sift_arg1¹) = (fun _lh_funcomp_x¹² -> concat_lh_₁(map_lh_₁₃(listify_lh_₁, _lh_funcomp_x¹²)))(_lh_sift_arg1¹)
//│ def sift_lh_₂(_lh_sift_arg1⁰) = (fun _lh_funcomp_x⁰ -> concat_lh_₁(map_lh_₁₃(listify_lh_₁, _lh_funcomp_x⁰)))(_lh_sift_arg1⁰)
//│ def simplify_lh_₁(_lh_simplify_arg1²) = 
//│ 	let f² = (fun t³ -> getOrElse_lh_₂(lift_lh_₁₀(f², _lh_simplify_arg1²(t³)), t³))
//│ 	in f²
//│ def simplify_lh_₂(_lh_simplify_arg1⁴) = 
//│ 	let f²³ = (fun t³⁰ -> getOrElse_lh_₂(lift_lh_₁₀(f²³, _lh_simplify_arg1⁴(t³⁰)), t³⁰))
//│ 	in f²³
//│ def simplify_lh_₃(_lh_simplify_arg1³) = 
//│ 	let f⁷ = (fun t¹⁰ -> getOrElse_lh_₂(lift_lh_₁₀(f⁷, _lh_simplify_arg1³(t¹⁰)), t¹⁰))
//│ 	in f⁷
//│ def simplify_lh_₄(_lh_simplify_arg1¹) = 
//│ 	let f¹ = (fun t² -> getOrElse_lh_₂(lift_lh_₁₀(f¹, _lh_simplify_arg1¹(t²)), t²))
//│ 	in f¹
//│ def simplify_lh_₅(_lh_simplify_arg1⁰) = 
//│ 	let f⁰ = (fun t⁰ -> getOrElse_lh_₂(lift_lh_₁₀(f⁰, _lh_simplify_arg1⁰(t⁰)), t⁰))
//│ 	in f⁰
//│ def snd_lh_₁(_lh_snd_arg1¹) = case _lh_snd_arg1¹ of {
//│ 	LH_P2 _lh_snd_LH_P2_0¹ _lh_snd_LH_P2_1¹ => _lh_snd_LH_P2_1¹}
//│ def snd_lh_₂(_lh_snd_arg1⁰) = case _lh_snd_arg1⁰ of {
//│ 	LH_P2 _lh_snd_LH_P2_0⁰ _lh_snd_LH_P2_1⁰ => _lh_snd_LH_P2_1⁰}
//│ def snd_lh_₃(_lh_snd_arg1²) = case _lh_snd_arg1² of {
//│ 	LH_P2 _lh_snd_LH_P2_0² _lh_snd_LH_P2_1² => _lh_snd_LH_P2_1²}
//│ def squash_lh_₁(_lh_squash_arg1¹) = _lh_squash_arg1¹([lh_Unit])
//│ def squash_lh_₂(_lh_squash_arg1⁰) = _lh_squash_arg1⁰([lh_Unit])
//│ def stand_eqn_lh_₁(_lh_stand_eqn_arg1², _lh_stand_eqn_arg2²) = case _lh_stand_eqn_arg2² of {
//│ 	Eqn _lh_stand_eqn_Eqn_0² _lh_stand_eqn_Eqn_1² => case _lh_stand_eqn_Eqn_1² of {
//│ 		LH_P2 _lh_stand_eqn_LH_P2_0² _lh_stand_eqn_LH_P2_1² => [Eqn _lh_stand_eqn_Eqn_0² [LH_P2 stand_lh_₁(_lh_stand_eqn_arg1², _lh_stand_eqn_LH_P2_0²) stand_lh_₁(_lh_stand_eqn_arg1², _lh_stand_eqn_LH_P2_1²)]]}}
//│ def stand_eqn_lh_₂(_lh_stand_eqn_arg1¹, _lh_stand_eqn_arg2¹) = case _lh_stand_eqn_arg2¹ of {
//│ 	Eqn _lh_stand_eqn_Eqn_0¹ _lh_stand_eqn_Eqn_1¹ => case _lh_stand_eqn_Eqn_1¹ of {
//│ 		LH_P2 _lh_stand_eqn_LH_P2_0¹ _lh_stand_eqn_LH_P2_1¹ => [Eqn _lh_stand_eqn_Eqn_0¹ [LH_P2 stand_lh_₁(_lh_stand_eqn_arg1¹, _lh_stand_eqn_LH_P2_0¹) stand_lh_₁(_lh_stand_eqn_arg1¹, _lh_stand_eqn_LH_P2_1¹)]]}}
//│ def stand_eqn_lh_₃(_lh_stand_eqn_arg1⁰, _lh_stand_eqn_arg2⁰) = case _lh_stand_eqn_arg2⁰ of {
//│ 	Eqn _lh_stand_eqn_Eqn_0⁰ _lh_stand_eqn_Eqn_1⁰ => case _lh_stand_eqn_Eqn_1⁰ of {
//│ 		LH_P2 _lh_stand_eqn_LH_P2_0⁰ _lh_stand_eqn_LH_P2_1⁰ => [Eqn _lh_stand_eqn_Eqn_0⁰ [LH_P2 stand_lh_₁(_lh_stand_eqn_arg1⁰, _lh_stand_eqn_LH_P2_0⁰) stand_lh_₁(_lh_stand_eqn_arg1⁰, _lh_stand_eqn_LH_P2_1⁰)]]}}
//│ def stand_lh_₁(_lh_stand_arg1⁰) = expr_fold_lh_₁((fun x¹⁸ -> (fun y¹ -> [Func x¹⁸ y¹])), (fun v⁰ -> [Var mappend_lh_₇(v⁰, _lh_stand_arg1⁰)]))
//│ def sub_lh_₁(_lh_sub_arg1⁰, _lh_sub_arg2⁰) = expr_fold_lh_₁((fun x¹⁹ -> (fun y² -> [Func x¹⁹ y²])), apply_lh_₁(_lh_sub_arg2⁰), _lh_sub_arg1⁰)
//│ def sub_lh_₂(_lh_sub_arg1¹, _lh_sub_arg2¹) = expr_fold_lh_₁((fun x²⁶ -> (fun y³ -> [Func x²⁶ y³])), apply_lh_₁(_lh_sub_arg2¹), _lh_sub_arg1¹)
//│ def subterms_lh_₁(_lh_subterms_arg1¹) = case _lh_subterms_arg1¹ of {
//│ 	Var _lh_subterms_Var_0¹ => [LH_N]
//│ 	| Func _lh_subterms_Func_0¹ _lh_subterms_Func_1¹ => mappend_lh_₇([LH_C [LH_P2 [LH_N] [Func _lh_subterms_Func_0¹ _lh_subterms_Func_1¹]] [LH_N]], 
//│ 		let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => case _lh_listcomp_fun_ls_h⁹ of {
//│ 				LH_P2 _lh_subterms_LH_P2_0² _lh_subterms_LH_P2_1² => 
//│ 					let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {
//│ 						LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => case _lh_listcomp_fun_ls_h¹⁰ of {
//│ 							LH_P2 _lh_subterms_LH_P2_0³ _lh_subterms_LH_P2_1³ => [LH_C [LH_P2 [LH_C _lh_subterms_LH_P2_0² _lh_subterms_LH_P2_0³] _lh_subterms_LH_P2_1³] _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)]
//│ 							| _  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)}
//│ 						| LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ 					in _lh_listcomp_fun¹⁰(subterms_lh_₁(_lh_subterms_LH_P2_1²))
//│ 				| _  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁹(zip_lz_nl_lh_₁(enumFrom_lh_₁(0), _lh_subterms_Func_1¹)))}
//│ def subterms_lh_₂(_lh_subterms_arg1⁰) = case _lh_subterms_arg1⁰ of {
//│ 	Var _lh_subterms_Var_0⁰ => [LH_N]
//│ 	| Func _lh_subterms_Func_0⁰ _lh_subterms_Func_1⁰ => mappend_lh_₇([LH_C [LH_P2 [LH_N] [Func _lh_subterms_Func_0⁰ _lh_subterms_Func_1⁰]] [LH_N]], 
//│ 		let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => case _lh_listcomp_fun_ls_h⁷ of {
//│ 				LH_P2 _lh_subterms_LH_P2_0⁰ _lh_subterms_LH_P2_1⁰ => 
//│ 					let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {
//│ 						LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => case _lh_listcomp_fun_ls_h⁸ of {
//│ 							LH_P2 _lh_subterms_LH_P2_0¹ _lh_subterms_LH_P2_1¹ => [LH_C [LH_P2 [LH_C _lh_subterms_LH_P2_0⁰ _lh_subterms_LH_P2_0¹] _lh_subterms_LH_P2_1¹] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]
//│ 							| _  => _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)}
//│ 						| LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ 					in _lh_listcomp_fun⁸(subterms_lh_₂(_lh_subterms_LH_P2_1⁰))
//│ 				| _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁷(zip_lz_nl_lh_₁(enumFrom_lh_₁(0), _lh_subterms_Func_1⁰)))}
//│ def succeed_lh_₁(_lh_succeed_arg1¹) = [Just _lh_succeed_arg1¹]
//│ def succeed_lh_₂(_lh_succeed_arg1³) = [Just _lh_succeed_arg1³]
//│ def succeed_lh_₃(_lh_succeed_arg1²) = [Just _lh_succeed_arg1²]
//│ def succeed_lh_₄(_lh_succeed_arg1⁰) = [Just _lh_succeed_arg1⁰]
//│ def sumAux_lh_₁(ls¹⁵, a¹) = case ls¹⁵ of {
//│ 	LH_N  => a¹
//│ 	| LH_C h²³ t³¹ => sumAux_lh_₁(t³¹, (a¹ + h²³))}
//│ def sum_lh_₁(ls⁹) = sumAux_lh_₁(ls⁹, 0)
//│ def tail_lh_₁(ls¹³) = case ls¹³ of {
//│ 	LH_C h²⁰ t²⁷ => t²⁷
//│ 	| LH_N  => error⁰}
//│ def takeWhile_lh_₁(_lh_takeWhile_arg1⁰, _lh_takeWhile_arg2⁰) = case _lh_takeWhile_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_takeWhile_LH_C_0⁰ _lh_takeWhile_LH_C_1⁰ => if _lh_takeWhile_arg1⁰(_lh_takeWhile_LH_C_0⁰) then [LH_C _lh_takeWhile_LH_C_0⁰ takeWhile_lh_₁(_lh_takeWhile_arg1⁰, _lh_takeWhile_LH_C_1⁰)] else [LH_N]}
//│ def testRewrite_nofib_lh_₁(_lh_testRewrite_nofib_arg1⁰) = all_lh_₁(result_lh_₁, copy_lh_₁(_lh_testRewrite_nofib_arg1⁰, 
//│ 	let _lh_result_LH_P2_1⁰ = [LH_C 'I' [LH_C '(' [LH_C 'b' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'I' [LH_C '(' [LH_C 'a' [LH_C ')' [LH_N]]]]]]]]]]]]
//│ 	in let _lh_result_LH_P2_0⁰ = [LH_C 'I' [LH_C '(' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'b' [LH_C ')' [LH_N]]]]]]]]]
//│ 	in (fun _lh_dummy⁰ -> 
//│ 		let multi⁰ = (fun _lh_multi_arg1¹ -> (fun _lh_multi_arg2⁰ -> _lh_multi_arg2⁰(_lh_multi_arg1¹, dominates⁰, rem_eq⁰)))
//│ 		and rank_order⁰ = (fun _lh_rank_order_arg1⁰ -> (fun _lh_rank_order_arg2⁰ -> _lh_rank_order_arg2⁰(_lh_rank_order_arg1⁰, num_order⁰)))
//│ 		and superpose⁰ = (fun _lh_superpose_arg1⁰ -> (fun _lh_superpose_arg2⁰ -> sift_lh_₁(
//│ 				let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 					LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => case _lh_listcomp_fun_ls_h² of {
//│ 						LH_P2 _lh_superpose_LH_P2_0⁰ _lh_superpose_LH_P2_1⁰ => [LH_C lift_lh_₈(pair_lh_₂(_lh_superpose_LH_P2_0⁰), unify_lh_₁(_lh_superpose_arg1⁰, _lh_superpose_LH_P2_1⁰)) _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]
//│ 						| _  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun²(subterms_lh_₁(_lh_superpose_arg2⁰)))))
//│ 		and delete⁰ = (fun _lh_delete_arg1⁰ -> (fun _lh_delete_arg2⁰ -> (fun _lh_delete_arg3⁰ -> case _lh_delete_arg3⁰ of {
//│ 				LH_N  => croak_lh_₄
//│ 				| LH_C _lh_delete_LH_C_0⁰ _lh_delete_LH_C_1⁰ => if _lh_delete_arg1⁰(_lh_delete_arg2⁰, _lh_delete_LH_C_0⁰) then succeed_lh_₁(_lh_delete_LH_C_1⁰) else lift_lh_₇((fun x⁹ -> [LH_C _lh_delete_LH_C_0⁰ x⁹]), delete⁰(_lh_delete_arg1⁰, _lh_delete_arg2⁰, _lh_delete_LH_C_1⁰))})))
//│ 		and rem_eq⁰ = (fun _lh_rem_eq_arg1⁰ -> (fun _lh_rem_eq_arg2⁰ -> case _lh_rem_eq_arg2⁰ of {
//│ 				LH_P2 _lh_rem_eq_LH_P2_0⁰ _lh_rem_eq_LH_P2_1⁰ => case _lh_rem_eq_LH_P2_0⁰ of {
//│ 					LH_N  => [LH_P2 [LH_N] _lh_rem_eq_LH_P2_1⁰]
//│ 					| LH_C _lh_rem_eq_LH_C_0⁰ _lh_rem_eq_LH_C_1⁰ => 
//│ 						let add_x⁰ = (fun xsys⁰ -> 
//│ 							let _lh_matchIdent⁸ = xsys⁰
//│ 							in case _lh_matchIdent⁸ of {
//│ 								LH_P2 _lh_rem_eq_LH_P2_0¹ _lh_rem_eq_LH_P2_1¹ => [LH_P2 [LH_C _lh_rem_eq_LH_C_0⁰ _lh_rem_eq_LH_P2_0¹] _lh_rem_eq_LH_P2_1¹]})
//│ 						in getOrElse_lh_₁(lift_lh_₃((fun _lh_funcomp_x⁶ -> rem_eq⁰(_lh_rem_eq_arg1⁰, pair_lh_₁(_lh_rem_eq_LH_C_1⁰, _lh_funcomp_x⁶))), delete⁰(_lh_rem_eq_arg1⁰, _lh_rem_eq_LH_C_0⁰, _lh_rem_eq_LH_P2_1⁰)), add_x⁰(rem_eq⁰(_lh_rem_eq_arg1⁰, [LH_P2 _lh_rem_eq_LH_C_1⁰ _lh_rem_eq_LH_P2_1⁰])))}}))
//│ 		and q_eqn⁰ = (fun _lh_q_eqn_arg1⁰ -> case _lh_q_eqn_arg1⁰ of {
//│ 				LH_C _lh_q_eqn_LH_C_0⁰ _lh_q_eqn_LH_C_1⁰ => case _lh_q_eqn_LH_C_1⁰ of {
//│ 					LH_C _lh_q_eqn_LH_C_0¹ _lh_q_eqn_LH_C_1¹ => case _lh_q_eqn_LH_C_1¹ of {
//│ 						LH_C _lh_q_eqn_LH_C_0² _lh_q_eqn_LH_C_1² => case _lh_q_eqn_LH_C_1² of {
//│ 							LH_N  => [List [LH_C _lh_q_eqn_LH_C_0⁰ [LH_C _lh_q_eqn_LH_C_0² [LH_N]]]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 		and parse_eqn⁰ = (fun _lh_parse_eqn_arg1⁰ -> 
//│ 				let _lh_matchIdent¹¹ = fst_lh_₃(the_lh_₂(p_eqn⁰(_lh_parse_eqn_arg1⁰)))
//│ 				in case _lh_matchIdent¹¹ of {
//│ 					List _lh_parse_eqn_List_0⁰ => case _lh_parse_eqn_List_0⁰ of {
//│ 						LH_C _lh_parse_eqn_LH_C_0⁰ _lh_parse_eqn_LH_C_1⁰ => case _lh_parse_eqn_LH_C_0⁰ of {
//│ 							Expr _lh_parse_eqn_Expr_0⁰ => case _lh_parse_eqn_LH_C_1⁰ of {
//│ 								LH_C _lh_parse_eqn_LH_C_0¹ _lh_parse_eqn_LH_C_1¹ => case _lh_parse_eqn_LH_C_0¹ of {
//│ 									Expr _lh_parse_eqn_Expr_0¹ => case _lh_parse_eqn_LH_C_1¹ of {
//│ 										LH_N  => [LH_P2 _lh_parse_eqn_Expr_0⁰ _lh_parse_eqn_Expr_0¹]
//│ 										| _  => error⁰}
//│ 									| _  => error⁰}
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰})
//│ 		and addby⁰ = (fun _lh_addby_arg1⁰ -> (fun _lh_addby_arg2⁰ -> (fun _lh_addby_arg3⁰ -> 
//│ 				let insert⁰ = (fun x⁸ -> (fun ls⁴ -> 
//│ 					let _lh_matchIdent⁴ = ls⁴
//│ 					in case _lh_matchIdent⁴ of {
//│ 						LH_N  => [LH_C x⁸ [LH_N]]
//│ 						| LH_C _lh_addby_LH_C_0⁰ _lh_addby_LH_C_1⁰ => if (_lh_addby_arg1⁰(x⁸) <= _lh_addby_arg1⁰(_lh_addby_LH_C_0⁰)) then [LH_C x⁸ [LH_C _lh_addby_LH_C_0⁰ _lh_addby_LH_C_1⁰]] else [LH_C _lh_addby_LH_C_0⁰ insert⁰(x⁸, _lh_addby_LH_C_1⁰)]}))
//│ 				in foldr_lh_₁(insert⁰, _lh_addby_arg3⁰, _lh_addby_arg2⁰))))
//│ 		and seq2Lzq⁰ = (fun _lh_seq2Lzq_arg1⁰ -> (fun _lh_seq2Lzq_arg2⁰ -> (fun _lh_seq2Lzq_arg3⁰ -> 
//│ 				let g¹ = (fun xs⁴ -> 
//│ 					let _lh_matchIdent⁵ = xs⁴
//│ 					in case _lh_matchIdent⁵ of {
//│ 						LH_P2 _lh_seq2Lzq_LH_P2_0⁰ _lh_seq2Lzq_LH_P2_1⁰ => lift_lh_₆(cross_lh_₁(_lh_seq2Lzq_arg1⁰(_lh_seq2Lzq_LH_P2_0⁰), (fun x¹⁰ -> x¹⁰)), force⁰(_lh_seq2Lzq_arg3⁰, _lh_seq2Lzq_LH_P2_1⁰))})
//│ 				in (fun _lh_funcomp_x⁴ -> (fun _lh_funcomp_x⁵ -> squash_lh_₂(lift_lh_₅(g¹, _lh_funcomp_x⁵)))(_lh_seq2Lzq_arg2⁰(_lh_funcomp_x⁴))))))
//│ 		and find_assoc⁰ = (fun _lh_find_assoc_arg1⁰ -> (fun _lh_find_assoc_arg2⁰ -> (fun _lh_find_assoc_arg3⁰ -> case _lh_find_assoc_arg1⁰ of {
//│ 				Afunc _lh_find_assoc_Afunc_0⁰ => getOrElse_lh_₂(lift_lh_₁(find'⁰(_lh_find_assoc_arg2⁰), assoc_lh_₁(_lh_find_assoc_arg3⁰, _lh_find_assoc_Afunc_0⁰)), [LH_N])
//│ 				| Avar  => [LH_N]})))
//│ 		and rpo⁰ = (fun _lh_rpo_arg1⁰ -> (fun _lh_rpo_arg2⁰ -> 
//│ 				let rpo'⁰ = (fun param⁰ -> 
//│ 					let _lh_matchIdent⁶ = param⁰
//│ 					in case _lh_matchIdent⁶ of {
//│ 						LH_P2 _lh_rpo_LH_P2_0⁰ _lh_rpo_LH_P2_1⁰ => case _lh_rpo_LH_P2_0⁰ of {
//│ 							Var _lh_rpo_Var_0⁰ => case _lh_rpo_LH_P2_1⁰ of {
//│ 								Var _lh_rpo_Var_0¹ => if polyEq⁰(_lh_rpo_Var_0⁰, _lh_rpo_Var_0¹) then [Equal] else [Unrelated]
//│ 								| Func _lh_rpo_Func_0⁰ _lh_rpo_Func_1⁰ => if occurs_lh_₁(_lh_rpo_Var_0⁰, [Func _lh_rpo_Func_0⁰ _lh_rpo_Func_1⁰]) then [Less] else [Unrelated]
//│ 								| _  => error⁰([LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]])}
//│ 							| Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹ => case _lh_rpo_LH_P2_1⁰ of {
//│ 								Var _lh_rpo_Var_0² => if occurs_lh_₂(_lh_rpo_Var_0², [Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹]) then [Greater] else [Unrelated]
//│ 								| Func _lh_rpo_Func_0² _lh_rpo_Func_1² => 
//│ 									let _lh_matchIdent⁷ = _lh_rpo_arg1⁰(
//│ 										let _lh_rank_order_LH_P2_1⁰ = _lh_rpo_Func_0²
//│ 										in let _lh_rank_order_LH_P2_0⁰ = _lh_rpo_Func_0¹
//│ 										in (fun _lh_rank_order_arg1¹ -> (fun num_order¹ -> num_order¹([LH_P2 _lh_rank_order_arg1¹(_lh_rank_order_LH_P2_0⁰) _lh_rank_order_arg1¹(_lh_rank_order_LH_P2_1⁰)]))))
//│ 									in case _lh_matchIdent⁷ of {
//│ 										Equal  => _lh_rpo_arg2⁰(rpo'⁰, [LH_P2 [Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹] [Func _lh_rpo_Func_0² _lh_rpo_Func_1²]])
//│ 										| Greater  => if quant_lh_₂(all_lh_₅, ltRewrite_lh_₁(rpo'⁰), [Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹], _lh_rpo_Func_1²) then [Greater] else if quant_lh_₁(any_lh_₅, geRewrite_lh_₃(rpo'⁰), [Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹], _lh_rpo_Func_1²) then [Less] else [Unrelated]
//│ 										| Less  => if quant_lh_₈(all_lh_₂, ltRewrite_lh_₃(rpo'⁰), [Func _lh_rpo_Func_0² _lh_rpo_Func_1²], _lh_rpo_Func_1¹) then [Less] else if quant_lh_₅(any_lh_₂, geRewrite_lh_₁(rpo'⁰), [Func _lh_rpo_Func_0² _lh_rpo_Func_1²], _lh_rpo_Func_1¹) then [Greater] else [Unrelated]
//│ 										| Unrelated  => [Unrelated]}
//│ 								| _  => error⁰([LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]])}
//│ 							| _  => error⁰([LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]])}
//│ 						| _  => error⁰([LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]])})
//│ 				in rpo'⁰))
//│ 		and split⁰ = (fun _lh_split_arg1⁰ -> (fun _lh_split_arg2⁰ -> 
//│ 				let tmp⁰ = zip_lh_₁(map_lh_₁₁(_lh_split_arg1⁰, _lh_split_arg2⁰), _lh_split_arg2⁰)
//│ 				in let _lh_process2_LH_P2_1⁰ = 	
//│ 					let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 						LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {
//│ 							LH_P2 _lh_split_LH_P2_0⁰ _lh_split_LH_P2_1⁰ => if not⁰(_lh_split_LH_P2_0⁰) then [LH_C _lh_split_LH_P2_1⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)
//│ 							| _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun⁰(tmp⁰)
//│ 				in let _lh_process2_LH_P2_0⁰ = 	
//│ 					let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 						LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {
//│ 							LH_P2 _lh_split_LH_P2_0¹ _lh_split_LH_P2_1¹ => if _lh_split_LH_P2_0¹ then [LH_C _lh_split_LH_P2_1¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)
//│ 							| _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun¹(tmp⁰)
//│ 				in (fun _lh_process2_arg1¹ -> (fun _lh_process2_arg2¹ -> (fun _lh_process2_arg4¹ -> (fun _lh_process2_arg5¹ -> (fun _lh_process2_arg6¹ -> (fun add_agenda¹ -> (fun add_eqn¹ -> (fun all_crit_pairs¹ -> (fun process¹ -> (fun resolve¹ -> (fun super_reduce¹ -> 
//│ 					let net'⁰ = add_eqn¹(delete_eqns_lh_₁(map_lh_₆(eqno_lh_₁, _lh_process2_LH_P2_0⁰), _lh_process2_arg4¹), _lh_process2_arg6¹)
//│ 					in let deletions⁰ = map_lh_₉(eqpr_lh_₁, _lh_process2_LH_P2_0⁰)
//│ 					in let critical⁰ = all_crit_pairs¹(_lh_process2_arg6¹, _lh_process2_LH_P2_1⁰)
//│ 					in let new_agenda⁰ = sift_lh_₂(map_lh_₁₃(resolve¹(super_reduce¹(net'⁰)), mappend_lh_₇(deletions⁰, critical⁰)))
//│ 					in let todo'⁰ = add_agenda¹(snd_lh_₃(_lh_process2_arg1¹), new_agenda⁰, _lh_process2_arg5¹)
//│ 					in process¹(_lh_process2_arg1¹, _lh_process2_arg2¹, mappend_lh_₅(_lh_process2_LH_P2_1⁰, [LH_C _lh_process2_arg6¹ [LH_N]]), net'⁰, todo'⁰))))))))))))))
//│ 		and build⁰ = (fun _lh_build_arg1⁰ -> (fun _lh_build_arg2⁰ -> (fun _lh_funcomp_x¹ -> lift_lh_₉(cross_lh_₃(_lh_build_arg1⁰, (fun x² -> x²)), _lh_build_arg2⁰(_lh_funcomp_x¹)))))
//│ 		and process1⁰ = (fun _lh_process1_arg1⁰ -> (fun _lh_process1_arg2⁰ -> (fun _lh_process1_arg3⁰ -> (fun _lh_process1_arg4⁰ -> (fun _lh_process1_arg5⁰ -> (fun _lh_process1_arg6⁰ -> _lh_process1_arg6⁰(_lh_process1_arg1⁰, _lh_process1_arg2⁰, _lh_process1_arg3⁰, _lh_process1_arg4⁰, _lh_process1_arg5⁰, add_agenda⁰, process2⁰, process⁰)))))))
//│ 		and p_op⁰ = (fun _lh_p_op_arg1⁰ -> sp⁰(string_of⁰(opsym⁰), _lh_p_op_arg1⁰))
//│ 		and p_prim⁰ = (fun _lh_p_prim_arg1⁰ -> orElseMap_lh_₁(p_name⁰, seQ⁰((fun x³ -> atIndex_lh_₂(1, x³)), [LH_C look_for⁰('(') [LH_C p_expr⁰ [LH_C look_for⁰(')') [LH_N]]]]), _lh_p_prim_arg1⁰))
//│ 		and reducible⁰ = (fun _lh_reducible_arg1⁰ -> (fun _lh_reducible_arg2⁰ -> case _lh_reducible_arg2⁰ of {
//│ 				Eqn _lh_reducible_Eqn_0⁰ _lh_reducible_Eqn_1⁰ => case _lh_reducible_Eqn_1⁰ of {
//│ 					LH_P2 _lh_reducible_LH_P2_0⁰ _lh_reducible_LH_P2_1⁰ => (exists_lh_₂(_lh_reducible_arg1⁰(_lh_reducible_LH_P2_0⁰)) || exists_lh_₁(_lh_reducible_arg1⁰(_lh_reducible_LH_P2_1⁰)))}}))
//│ 		and mk_list⁰ = (fun _lh_mk_list_arg1⁰ -> (fun _lh_mk_list_arg2⁰ -> case _lh_mk_list_arg2⁰ of {
//│ 				List _lh_mk_list_List_0⁰ => _lh_mk_list_arg1⁰(_lh_mk_list_List_0⁰)
//│ 				| _  => error⁰}))
//│ 		and lexico⁰ = (fun _lh_lexico_arg1⁰ -> (fun _lh_lexico_arg2⁰ -> case _lh_lexico_arg2⁰ of {
//│ 				LH_P2 _lh_lexico_LH_P2_0⁰ _lh_lexico_LH_P2_1⁰ => case _lh_lexico_LH_P2_0⁰ of {
//│ 					LH_N  => case _lh_lexico_LH_P2_1⁰ of {
//│ 						LH_N  => [Equal]
//│ 						| LH_C _lh_lexico_LH_C_0⁰ _lh_lexico_LH_C_1⁰ => [Less]}
//│ 					| LH_C _lh_lexico_LH_C_0¹ _lh_lexico_LH_C_1¹ => case _lh_lexico_LH_P2_1⁰ of {
//│ 						LH_N  => [Greater]
//│ 						| LH_C _lh_lexico_LH_C_0² _lh_lexico_LH_C_1² => lex_combine⁰(_lh_lexico_arg1⁰([LH_P2 _lh_lexico_LH_C_0¹ _lh_lexico_LH_C_0²]), lexico⁰(_lh_lexico_arg1⁰, [LH_P2 _lh_lexico_LH_C_1¹ _lh_lexico_LH_C_1²]))}}}))
//│ 		and find⁰ = (fun _lh_find_arg1⁰ -> (fun _lh_find_arg2⁰ -> find'⁰(g_init⁰(_lh_find_arg1⁰), _lh_find_arg2⁰)))
//│ 		and rank⁰ = (fun _lh_rank_arg1⁰ -> case _lh_rank_arg1⁰ of {
//│ 				LH_C _lh_rank_LH_C_0⁰ _lh_rank_LH_C_1⁰ => case _lh_rank_LH_C_0⁰ of {
//│ 					'E'  => case _lh_rank_LH_C_1⁰ of {
//│ 						LH_N  => 1
//│ 						| _  => error⁰}
//│ 					| '*'  => case _lh_rank_LH_C_1⁰ of {
//│ 						LH_N  => 2
//│ 						| _  => error⁰}
//│ 					| 'I'  => case _lh_rank_LH_C_1⁰ of {
//│ 						LH_N  => 3
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 		and is_switch⁰ = (fun _lh_is_switch_arg1⁰ -> case _lh_is_switch_arg1⁰ of {
//│ 				Switch _lh_is_switch_Switch_0⁰ _lh_is_switch_Switch_1⁰ => [True]
//│ 				| Return _lh_is_switch_Return_0⁰ => [False]})
//│ 		and q_func⁰ = (fun _lh_q_func_arg1⁰ -> case _lh_q_func_arg1⁰ of {
//│ 				LH_C _lh_q_func_LH_C_0⁰ _lh_q_func_LH_C_1⁰ => case _lh_q_func_LH_C_0⁰ of {
//│ 					MkString _lh_q_func_MkString_0⁰ => case _lh_q_func_LH_C_1⁰ of {
//│ 						LH_C _lh_q_func_LH_C_0¹ _lh_q_func_LH_C_1¹ => case _lh_q_func_LH_C_1¹ of {
//│ 							LH_C _lh_q_func_LH_C_0² _lh_q_func_LH_C_1² => case _lh_q_func_LH_C_0² of {
//│ 								List _lh_q_func_List_0⁰ => case _lh_q_func_LH_C_1² of {
//│ 									LH_C _lh_q_func_LH_C_0³ _lh_q_func_LH_C_1³ => case _lh_q_func_LH_C_1³ of {
//│ 										LH_N  => [Expr [Func _lh_q_func_MkString_0⁰ map_lh_₁₀(unExpr⁰, _lh_q_func_List_0⁰)]]
//│ 										| _  => error⁰}
//│ 									| _  => error⁰}
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 		and knuth_bendix⁰ = (fun _lh_knuth_bendix_arg1⁰ -> (fun _lh_knuth_bendix_arg2⁰ -> knuth_bendix1⁰([LH_P2 _lh_knuth_bendix_arg1⁰ cost_lh_₁], _lh_knuth_bendix_arg2⁰)))
//│ 		and add_agenda⁰ = (fun _lh_add_agenda_arg1⁰ -> (fun _lh_add_agenda_arg2⁰ -> addby⁰(item_cost⁰, map_lh_₁₂(mk_item⁰(_lh_add_agenda_arg1⁰), _lh_add_agenda_arg2⁰))))
//│ 		and g_init⁰ = (fun _lh_g_init_arg1⁰ -> [LH_C _lh_g_init_arg1⁰ [LH_N]])
//│ 		and mk_dnet⁰ = (fun _lh_mk_dnet_arg1⁰ -> foldl_lh_₁(add_eqn⁰, empty_net⁰, _lh_mk_dnet_arg1⁰))
//│ 		and p_name⁰ = (fun _lh_p_name_arg1⁰ -> build⁰(q_name⁰, p_ident⁰, _lh_p_name_arg1⁰))
//│ 		and q_op⁰ = (fun _lh_q_op_arg1⁰ -> case _lh_q_op_arg1⁰ of {
//│ 				LH_C _lh_q_op_LH_C_0⁰ _lh_q_op_LH_C_1⁰ => case _lh_q_op_LH_C_0⁰ of {
//│ 					Expr _lh_q_op_Expr_0⁰ => case _lh_q_op_LH_C_1⁰ of {
//│ 						LH_C _lh_q_op_LH_C_0¹ _lh_q_op_LH_C_1¹ => case _lh_q_op_LH_C_0¹ of {
//│ 							MkString _lh_q_op_MkString_0⁰ => case _lh_q_op_LH_C_1¹ of {
//│ 								LH_C _lh_q_op_LH_C_0² _lh_q_op_LH_C_1² => case _lh_q_op_LH_C_0² of {
//│ 									Expr _lh_q_op_Expr_0¹ => case _lh_q_op_LH_C_1² of {
//│ 										LH_N  => [Expr [Func _lh_q_op_MkString_0⁰ [LH_C _lh_q_op_Expr_0⁰ [LH_C _lh_q_op_Expr_0¹ [LH_N]]]]]
//│ 										| _  => error⁰}
//│ 									| _  => error⁰}
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 		and unExpr⁰ = (fun _lh_unExpr_arg1⁰ -> case _lh_unExpr_arg1⁰ of {
//│ 				Expr _lh_unExpr_Expr_0⁰ => _lh_unExpr_Expr_0⁰
//│ 				| _  => error⁰})
//│ 		and opsym⁰ = (fun _lh_opsym_arg1⁰ -> (fun x⁴ -> inList_lh_₁(x⁴, 
//│ 				let _lh_inList_LH_C_1² = 	
//│ 					let _lh_inList_LH_C_1³ = 	
//│ 						let _lh_inList_LH_C_1⁴ = 	
//│ 							let _lh_inList_LH_C_1⁵ = 	
//│ 								let _lh_inList_LH_C_1⁶ = 	
//│ 									let _lh_inList_LH_C_1⁷ = 	
//│ 										let _lh_inList_LH_C_1⁸ = 	
//│ 											let _lh_inList_LH_C_1⁹ = (fun _lh_inList_arg1³ -> [False])
//│ 											in let _lh_inList_LH_C_0² = ':'
//│ 											in (fun _lh_inList_arg1⁴ -> if polyEq⁰(_lh_inList_arg1⁴, _lh_inList_LH_C_0²) then [True] else inList_lh_₁(_lh_inList_arg1⁴, _lh_inList_LH_C_1⁹))
//│ 										in let _lh_inList_LH_C_0³ = '?'
//│ 										in (fun _lh_inList_arg1⁵ -> if polyEq⁰(_lh_inList_arg1⁵, _lh_inList_LH_C_0³) then [True] else inList_lh_₁(_lh_inList_arg1⁵, _lh_inList_LH_C_1⁸))
//│ 									in let _lh_inList_LH_C_0⁴ = '/'
//│ 									in (fun _lh_inList_arg1⁶ -> if polyEq⁰(_lh_inList_arg1⁶, _lh_inList_LH_C_0⁴) then [True] else inList_lh_₁(_lh_inList_arg1⁶, _lh_inList_LH_C_1⁷))
//│ 								in let _lh_inList_LH_C_0⁵ = '-'
//│ 								in (fun _lh_inList_arg1⁷ -> if polyEq⁰(_lh_inList_arg1⁷, _lh_inList_LH_C_0⁵) then [True] else inList_lh_₁(_lh_inList_arg1⁷, _lh_inList_LH_C_1⁶))
//│ 							in let _lh_inList_LH_C_0⁶ = '@'
//│ 							in (fun _lh_inList_arg1⁸ -> if polyEq⁰(_lh_inList_arg1⁸, _lh_inList_LH_C_0⁶) then [True] else inList_lh_₁(_lh_inList_arg1⁸, _lh_inList_LH_C_1⁵))
//│ 						in let _lh_inList_LH_C_0⁷ = '%'
//│ 						in (fun _lh_inList_arg1⁹ -> if polyEq⁰(_lh_inList_arg1⁹, _lh_inList_LH_C_0⁷) then [True] else inList_lh_₁(_lh_inList_arg1⁹, _lh_inList_LH_C_1⁴))
//│ 					in let _lh_inList_LH_C_0⁸ = '+'
//│ 					in (fun _lh_inList_arg1¹⁰ -> if polyEq⁰(_lh_inList_arg1¹⁰, _lh_inList_LH_C_0⁸) then [True] else inList_lh_₁(_lh_inList_arg1¹⁰, _lh_inList_LH_C_1³))
//│ 				in let _lh_inList_LH_C_0⁹ = '*'
//│ 				in (fun _lh_inList_arg1¹¹ -> if polyEq⁰(_lh_inList_arg1¹¹, _lh_inList_LH_C_0⁹) then [True] else inList_lh_₁(_lh_inList_arg1¹¹, _lh_inList_LH_C_1²))))(_lh_opsym_arg1⁰))
//│ 		and resolve⁰ = (fun _lh_resolve_arg1⁰ -> (fun _lh_resolve_arg2⁰ -> 
//│ 				let lhs'⁰ = simplify_lh_₁(_lh_resolve_arg1⁰, fst_lh_₄(_lh_resolve_arg2⁰))
//│ 				in let rhs'⁰ = simplify_lh_₅(_lh_resolve_arg1⁰, snd_lh_₂(_lh_resolve_arg2⁰))
//│ 				in if eqExpr_lh_₂(lhs'⁰, rhs'⁰) then croak_lh_₂ else succeed_lh_₃([LH_P2 lhs'⁰ rhs'⁰])))
//│ 		and p_term⁰ = (fun _lh_p_term_arg1⁰ -> orElseMap_lh_₄(seQ⁰(q_func⁰, [LH_C p_ident⁰ [LH_C look_for⁰('(') [LH_C list_of⁰(p_expr⁰, ',') [LH_C look_for⁰(')') [LH_N]]]]]), p_prim⁰, _lh_p_term_arg1⁰))
//│ 		and add_eqn⁰ = (fun _lh_add_eqn_arg1⁰ -> (fun _lh_add_eqn_arg2⁰ -> thread⁰(preorder⁰(g_init⁰(lhs_lh_₁(_lh_add_eqn_arg2⁰))), _lh_add_eqn_arg2⁰, _lh_add_eqn_arg1⁰)))
//│ 		and thread⁰ = (fun _lh_thread_arg1⁰ -> (fun _lh_thread_arg2⁰ -> (fun _lh_thread_arg3⁰ -> case _lh_thread_arg1⁰ of {
//│ 				LH_C _lh_thread_LH_C_0⁰ _lh_thread_LH_C_1⁰ => case _lh_thread_LH_C_0⁰ of {
//│ 					Afunc _lh_thread_Afunc_0⁰ => case _lh_thread_arg3⁰ of {
//│ 						Switch _lh_thread_Switch_0⁰ _lh_thread_Switch_1⁰ => [Switch update_alist_lh_₁(_lh_thread_Afunc_0⁰, thread⁰(_lh_thread_LH_C_1⁰, _lh_thread_arg2⁰), empty_net⁰, _lh_thread_Switch_0⁰) _lh_thread_Switch_1⁰]
//│ 						| Return _lh_thread_Return_0⁰ => thread⁰([LH_C [Afunc _lh_thread_Afunc_0⁰] _lh_thread_LH_C_1⁰], _lh_thread_arg2⁰, [Switch [LH_N] [Return _lh_thread_Return_0⁰]])}
//│ 					| Avar  => case _lh_thread_arg3⁰ of {
//│ 						Switch _lh_thread_Switch_0¹ _lh_thread_Switch_1¹ => [Switch _lh_thread_Switch_0¹ thread⁰(_lh_thread_LH_C_1⁰, _lh_thread_arg2⁰, _lh_thread_Switch_1¹)]
//│ 						| Return _lh_thread_Return_0¹ => 
//│ 							let d'⁰ = thread⁰(_lh_thread_LH_C_1⁰, _lh_thread_arg2⁰, [Return _lh_thread_Return_0¹])
//│ 							in if is_switch⁰(d'⁰) then [Switch [LH_N] d'⁰] else d'⁰}}
//│ 				| LH_N  => case _lh_thread_arg3⁰ of {
//│ 					Return _lh_thread_Return_0² => [Return [LH_C _lh_thread_arg2⁰ _lh_thread_Return_0²]]}})))
//│ 		and item_cost⁰ = (fun _lh_item_cost_arg1⁰ -> case _lh_item_cost_arg1⁰ of {
//│ 				Item _lh_item_cost_Item_0⁰ _lh_item_cost_Item_1⁰ => _lh_item_cost_Item_0⁰})
//│ 		and g_rest⁰ = (fun _lh_g_rest_arg1⁰ -> case _lh_g_rest_arg1⁰ of {
//│ 				LH_C _lh_g_rest_LH_C_0⁰ _lh_g_rest_LH_C_1⁰ => case _lh_g_rest_LH_C_0⁰ of {
//│ 					Func _lh_g_rest_Func_0⁰ _lh_g_rest_Func_1⁰ => mappend_lh_₂(_lh_g_rest_Func_1⁰, _lh_g_rest_LH_C_1⁰)
//│ 					| Var _lh_g_rest_Var_0⁰ => _lh_g_rest_LH_C_1⁰
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 		and lex_ext⁰ = (fun _lh_lex_ext_arg1⁰ -> (fun _lh_lex_ext_arg2⁰ -> case _lh_lex_ext_arg2⁰ of {
//│ 				LH_P2 _lh_lex_ext_LH_P2_0⁰ _lh_lex_ext_LH_P2_1⁰ => case _lh_lex_ext_LH_P2_0⁰ of {
//│ 					Func _lh_lex_ext_Func_0⁰ _lh_lex_ext_Func_1⁰ => case _lh_lex_ext_LH_P2_1⁰ of {
//│ 						Func _lh_lex_ext_Func_0¹ _lh_lex_ext_Func_1¹ => 
//│ 							let estimate⁰ = lexico⁰(_lh_lex_ext_arg1⁰, [LH_P2 _lh_lex_ext_Func_1⁰ _lh_lex_ext_Func_1¹])
//│ 							in let confirm⁰ = (fun x⁶ -> 
//│ 								let _lh_matchIdent² = x⁶
//│ 								in case _lh_matchIdent² of {
//│ 									Equal  => [True]
//│ 									| Greater  => quant_lh_₇(all_lh_₄, ltRewrite_lh_₄(_lh_lex_ext_arg1⁰), [Func _lh_lex_ext_Func_0⁰ _lh_lex_ext_Func_1⁰], _lh_lex_ext_Func_1¹)
//│ 									| Less  => quant_lh_₁₀(all_lh_₆, ltRewrite_lh_₂(_lh_lex_ext_arg1⁰), [Func _lh_lex_ext_Func_0¹ _lh_lex_ext_Func_1¹], _lh_lex_ext_Func_1⁰)
//│ 									| Unrelated  => [False]})
//│ 							in if confirm⁰(estimate⁰) then estimate⁰ else if quant_lh_₄(any_lh_₄, geRewrite_lh_₂(_lh_lex_ext_arg1⁰), [Func _lh_lex_ext_Func_0¹ _lh_lex_ext_Func_1¹], _lh_lex_ext_Func_1⁰) then [Greater] else if quant_lh_₆(any_lh_₃, geRewrite_lh_₄(_lh_lex_ext_arg1⁰), [Func _lh_lex_ext_Func_0⁰ _lh_lex_ext_Func_1⁰], _lh_lex_ext_Func_1¹) then [Less] else [Unrelated]
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}))
//│ 		and empty⁰ = (fun _lh_empty_arg1⁰ -> succeed_lh_₄([LH_P2 [List [LH_N]] _lh_empty_arg1⁰]))
//│ 		and g_skip⁰ = (fun _lh_g_skip_arg1⁰ -> tail_lh_₁(_lh_g_skip_arg1⁰))
//│ 		and super_reduce⁰ = (fun _lh_super_reduce_arg1⁰ -> inside_lh_₁(dnet_reduce⁰(_lh_super_reduce_arg1⁰)))
//│ 		and unString⁰ = (fun _lh_unString_arg1⁰ -> case _lh_unString_arg1⁰ of {
//│ 				MkString _lh_unString_MkString_0⁰ => _lh_unString_MkString_0⁰
//│ 				| _  => error⁰})
//│ 		and look_for⁰ = (fun _lh_look_for_arg1⁰ -> sp⁰(pchar⁰((fun x⁵ -> polyEq⁰(x⁵, _lh_look_for_arg1⁰)))))
//│ 		and mk_crit⁰ = (fun _lh_mk_crit_arg1⁰ -> (fun _lh_mk_crit_arg2⁰ -> (fun _lh_mk_crit_arg3⁰ -> case _lh_mk_crit_arg1⁰ of {
//│ 				Eqn _lh_mk_crit_Eqn_0⁰ _lh_mk_crit_Eqn_1⁰ => case _lh_mk_crit_Eqn_1⁰ of {
//│ 					LH_P2 _lh_mk_crit_LH_P2_0⁰ _lh_mk_crit_LH_P2_1⁰ => case _lh_mk_crit_arg2⁰ of {
//│ 						Eqn _lh_mk_crit_Eqn_0¹ _lh_mk_crit_Eqn_1¹ => case _lh_mk_crit_Eqn_1¹ of {
//│ 							LH_P2 _lh_mk_crit_LH_P2_0¹ _lh_mk_crit_LH_P2_1¹ => case _lh_mk_crit_arg3⁰ of {
//│ 								LH_P2 _lh_mk_crit_LH_P2_0² _lh_mk_crit_LH_P2_1² => [LH_P2 sub_lh_₁(replace_lh_₁(_lh_mk_crit_LH_P2_0¹, _lh_mk_crit_LH_P2_0², _lh_mk_crit_LH_P2_1⁰), _lh_mk_crit_LH_P2_1²) sub_lh_₂(_lh_mk_crit_LH_P2_1¹, _lh_mk_crit_LH_P2_1²)]}}}}})))
//│ 		and list_of⁰ = (fun _lh_list_of_arg1⁰ -> (fun _lh_list_of_arg2⁰ -> 
//│ 				let p'⁰ = lazy⁰(seq2⁰(mk_cons⁰, _lh_list_of_arg1⁰, orElseMap_lh_₃(seq2Lzq⁰((fun x¹¹ -> (fun y⁰ -> y⁰)), look_for⁰(_lh_list_of_arg2⁰), p'⁰), empty⁰)))
//│ 				in force⁰(p'⁰)))
//│ 		and seQ⁰ = (fun _lh_seQ_arg1⁰ -> (fun _lh_seQ_arg2⁰ -> build⁰(mk_list⁰(_lh_seQ_arg1⁰), foldr_lh_₂(seq2⁰(mk_cons⁰), empty⁰, _lh_seQ_arg2⁰))))
//│ 		and q_name⁰ = (fun _lh_q_name_arg1⁰ -> case _lh_q_name_arg1⁰ of {
//│ 				MkString _lh_q_name_MkString_0⁰ => if ((int_of_char⁰(atIndex_lh_₁(0, _lh_q_name_MkString_0⁰)) >= int_of_char⁰('a')) && (int_of_char⁰(atIndex_lh_₃(0, _lh_q_name_MkString_0⁰)) <= int_of_char⁰('z'))) then [Expr [Var _lh_q_name_MkString_0⁰]] else [Expr [Func _lh_q_name_MkString_0⁰ [LH_N]]]
//│ 				| _  => error⁰})
//│ 		and lex_combine⁰ = (fun _lh_lex_combine_arg1⁰ -> (fun _lh_lex_combine_arg2⁰ -> case _lh_lex_combine_arg1⁰ of {
//│ 				Equal  => _lh_lex_combine_arg2⁰
//│ 				| Greater  => [Greater]
//│ 				| Less  => [Less]
//│ 				| Unrelated  => [Unrelated]}))
//│ 		and num_order⁰ = (fun _lh_num_order_arg1⁰ -> case _lh_num_order_arg1⁰ of {
//│ 				LH_P2 _lh_num_order_LH_P2_0⁰ _lh_num_order_LH_P2_1⁰ => if (_lh_num_order_LH_P2_0⁰ > _lh_num_order_LH_P2_1⁰) then [Greater] else if (_lh_num_order_LH_P2_0⁰ < _lh_num_order_LH_P2_1⁰) then [Less] else [Equal]})
//│ 		and pchar⁰ = (fun _lh_pchar_arg1⁰ -> (fun _lh_pchar_arg2⁰ -> case _lh_pchar_arg2⁰ of {
//│ 				LH_N  => croak_lh_₃
//│ 				| LH_C _lh_pchar_LH_C_0⁰ _lh_pchar_LH_C_1⁰ => if _lh_pchar_arg1⁰(_lh_pchar_LH_C_0⁰) then succeed_lh_₂([LH_P2 [MkString [LH_C _lh_pchar_LH_C_0⁰ [LH_N]]] _lh_pchar_LH_C_1⁰]) else croak_lh_₁}))
//│ 		and crit_pairs⁰ = (fun _lh_crit_pairs_arg1⁰ -> (fun _lh_crit_pairs_arg2⁰ -> mappend_lh_₄(map_lh_₈(mk_crit⁰(_lh_crit_pairs_arg1⁰, _lh_crit_pairs_arg2⁰), superpose⁰(lhs_lh_₇(_lh_crit_pairs_arg1⁰), lhs_lh_₂(_lh_crit_pairs_arg2⁰))), map_lh_₃(mk_crit⁰(_lh_crit_pairs_arg2⁰, _lh_crit_pairs_arg1⁰), strict_super⁰(lhs_lh_₃(_lh_crit_pairs_arg2⁰), lhs_lh_₆(_lh_crit_pairs_arg1⁰))))))
//│ 		and strict_super⁰ = (fun _lh_strict_super_arg1⁰ -> (fun _lh_strict_super_arg2⁰ -> case _lh_strict_super_arg2⁰ of {
//│ 				Func _lh_strict_super_Func_0⁰ _lh_strict_super_Func_1⁰ => 
//│ 					let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 						LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => case _lh_listcomp_fun_ls_h³ of {
//│ 							LH_P2 _lh_strict_super_LH_P2_0⁰ _lh_strict_super_LH_P2_1⁰ => 
//│ 								let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 									LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => case _lh_listcomp_fun_ls_h⁴ of {
//│ 										LH_P2 _lh_strict_super_LH_P2_0¹ _lh_strict_super_LH_P2_1¹ => [LH_C [LH_P2 [LH_C _lh_strict_super_LH_P2_0⁰ _lh_strict_super_LH_P2_0¹] _lh_strict_super_LH_P2_1¹] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]
//│ 										| _  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)}
//│ 									| LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ 								in _lh_listcomp_fun⁴(superpose⁰(_lh_strict_super_arg1⁰, _lh_strict_super_LH_P2_1⁰))
//│ 							| _  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun³(zip_lz_nl_lh_₁(enumFrom_lh_₁(0), _lh_strict_super_Func_1⁰))
//│ 				| _  => error⁰}))
//│ 		and dominates⁰ = (fun _lh_dominates_arg1⁰ -> quant_lh_₃(all_lh_₃, quant_lh_₉(any_lh_₁, gtRewrite_lh_₁(_lh_dominates_arg1⁰))))
//│ 		and knuth_bendix1⁰ = (fun _lh_knuth_bendix1_arg1⁰ -> (fun _lh_knuth_bendix1_arg2⁰ -> process⁰(_lh_knuth_bendix1_arg1⁰, 1, [LH_N], empty_net⁰, add_agenda⁰(snd_lh_₁(_lh_knuth_bendix1_arg1⁰), _lh_knuth_bendix1_arg2⁰, [LH_N]))))
//│ 		and mk_item⁰ = (fun _lh_mk_item_arg1⁰ -> (fun _lh_mk_item_arg2⁰ -> [Item _lh_mk_item_arg1⁰(_lh_mk_item_arg2⁰) _lh_mk_item_arg2⁰]))
//│ 		and sp⁰ = (fun _lh_sp_arg1⁰ -> (fun _lh_funcomp_x¹⁰ -> _lh_sp_arg1⁰(dropWhile_lh_₂((fun x¹² -> polyEq⁰(x¹², ' ')), _lh_funcomp_x¹⁰))))
//│ 		and p_eqn⁰ = (fun _lh_p_eqn_arg1⁰ -> seQ⁰(q_eqn⁰, [LH_C p_expr⁰ [LH_C look_for⁰('=') [LH_C p_expr⁰ [LH_N]]]], _lh_p_eqn_arg1⁰))
//│ 		and p_ident⁰ = (fun _lh_p_ident_arg1⁰ -> sp⁰(string_of⁰(alphanum⁰), _lh_p_ident_arg1⁰))
//│ 		and process2⁰ = (fun _lh_process2_arg1⁰ -> (fun _lh_process2_arg2⁰ -> (fun _lh_process2_arg3⁰ -> (fun _lh_process2_arg4⁰ -> (fun _lh_process2_arg5⁰ -> (fun _lh_process2_arg6⁰ -> 
//│ 				let _lh_matchIdent⁰ = split⁰(reducible⁰(reduce1_lh_₁(_lh_process2_arg6⁰)), _lh_process2_arg3⁰)
//│ 				in _lh_matchIdent⁰(_lh_process2_arg1⁰, _lh_process2_arg2⁰, _lh_process2_arg4⁰, _lh_process2_arg5⁰, _lh_process2_arg6⁰, add_agenda⁰, add_eqn⁰, all_crit_pairs⁰, process⁰, resolve⁰, super_reduce⁰)))))))
//│ 		and dnet_reduce⁰ = (fun _lh_dnet_reduce_arg1⁰ -> (fun _lh_dnet_reduce_arg2⁰ -> try_all_lh_₁(map_lh_₇(rewrite_lh_₁, find⁰(_lh_dnet_reduce_arg2⁰, _lh_dnet_reduce_arg1⁰)), _lh_dnet_reduce_arg2⁰)))
//│ 		and find'⁰ = (fun _lh_find'_arg1⁰ -> (fun _lh_find'_arg2⁰ -> case _lh_find'_arg2⁰ of {
//│ 				Return _lh_find'_Return_0⁰ => _lh_find'_Return_0⁰
//│ 				| Switch _lh_find'_Switch_0⁰ _lh_find'_Switch_1⁰ => mappend_lh_₁(find_assoc⁰(g_first⁰(_lh_find'_arg1⁰), g_rest⁰(_lh_find'_arg1⁰), _lh_find'_Switch_0⁰), find'⁰(g_skip⁰(_lh_find'_arg1⁰), _lh_find'_Switch_1⁰))}))
//│ 		and multi_ext⁰ = (fun _lh_multi_ext_arg1⁰ -> (fun _lh_multi_ext_arg2⁰ -> case _lh_multi_ext_arg2⁰ of {
//│ 				LH_P2 _lh_multi_ext_LH_P2_0⁰ _lh_multi_ext_LH_P2_1⁰ => case _lh_multi_ext_LH_P2_0⁰ of {
//│ 					Func _lh_multi_ext_Func_0⁰ _lh_multi_ext_Func_1⁰ => case _lh_multi_ext_LH_P2_1⁰ of {
//│ 						Func _lh_multi_ext_Func_0¹ _lh_multi_ext_Func_1¹ => multi⁰(_lh_multi_ext_arg1⁰, 
//│ 							let _lh_multi_LH_P2_1⁰ = _lh_multi_ext_Func_1¹
//│ 							in let _lh_multi_LH_P2_0⁰ = _lh_multi_ext_Func_1⁰
//│ 							in (fun _lh_multi_arg1⁰ -> (fun dominates¹ -> (fun rem_eq¹ -> 
//│ 								let _lh_matchIdent¹ = rem_eq¹(eqRewrite_lh_₁(_lh_multi_arg1⁰), [LH_P2 _lh_multi_LH_P2_0⁰ _lh_multi_LH_P2_1⁰])
//│ 								in case _lh_matchIdent¹ of {
//│ 									LH_P2 _lh_multi_LH_P2_0¹ _lh_multi_LH_P2_1¹ => if dominates¹(_lh_multi_arg1⁰, _lh_multi_LH_P2_0¹, _lh_multi_LH_P2_1¹) then [Greater] else if dominates¹(_lh_multi_arg1⁰, _lh_multi_LH_P2_1¹, _lh_multi_LH_P2_0¹) then [Less] else [Unrelated]}))))
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}))
//│ 		and seq2⁰ = (fun _lh_seq2_arg1⁰ -> (fun _lh_seq2_arg2⁰ -> (fun _lh_seq2_arg3⁰ -> 
//│ 				let g⁰ = (fun xs³ -> 
//│ 					let _lh_matchIdent³ = xs³
//│ 					in case _lh_matchIdent³ of {
//│ 						LH_P2 _lh_seq2_LH_P2_0⁰ _lh_seq2_LH_P2_1⁰ => lift_lh_₂(cross_lh_₂(_lh_seq2_arg1⁰(_lh_seq2_LH_P2_0⁰), (fun x⁷ -> x⁷)), _lh_seq2_arg3⁰(_lh_seq2_LH_P2_1⁰))})
//│ 				in (fun _lh_funcomp_x² -> (fun _lh_funcomp_x³ -> squash_lh_₁(lift_lh_₄(g⁰, _lh_funcomp_x³)))(_lh_seq2_arg2⁰(_lh_funcomp_x²))))))
//│ 		and g_first⁰ = (fun _lh_g_first_arg1⁰ -> case _lh_g_first_arg1⁰ of {
//│ 				LH_C _lh_g_first_LH_C_0⁰ _lh_g_first_LH_C_1⁰ => case _lh_g_first_LH_C_0⁰ of {
//│ 					Func _lh_g_first_Func_0⁰ _lh_g_first_Func_1⁰ => [Afunc _lh_g_first_Func_0⁰]
//│ 					| Var _lh_g_first_Var_0⁰ => [Avar]
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 		and p_expr⁰ = (fun _lh_p_expr_arg1⁰ -> orElseMap_lh_₂(seQ⁰(q_op⁰, [LH_C p_term⁰ [LH_C p_op⁰ [LH_C p_term⁰ [LH_N]]]]), p_term⁰, _lh_p_expr_arg1⁰))
//│ 		and all_crit_pairs⁰ = (fun _lh_all_crit_pairs_arg1⁰ -> (fun _lh_all_crit_pairs_arg2⁰ -> 
//│ 				let eqn'⁰ = stand_eqn_lh_₁([LH_C '1' [LH_N]], _lh_all_crit_pairs_arg1⁰)
//│ 				in let eqn''⁰ = stand_eqn_lh_₂([LH_C '2' [LH_N]], _lh_all_crit_pairs_arg1⁰)
//│ 				in let theory''⁰ = map_lh_₁(stand_eqn_lh_₃([LH_C '2' [LH_N]]), _lh_all_crit_pairs_arg2⁰)
//│ 				in mappend_lh_₆(map_lh_₂(mk_crit⁰(eqn'⁰, eqn''⁰), strict_super⁰(lhs_lh_₅(eqn'⁰), lhs_lh_₄(eqn''⁰))), concat_lh_₁(map_lh_₄(crit_pairs⁰(eqn'⁰), theory''⁰)))))
//│ 		and parse⁰ = (fun _lh_parse_arg1⁰ -> (fun _lh_funcomp_x⁷ -> (fun _lh_funcomp_x⁸ -> (fun _lh_funcomp_x⁹ -> unExpr⁰(fst_lh_₁(_lh_funcomp_x⁹)))(the_lh_₁(_lh_funcomp_x⁸)))(p_expr⁰(_lh_funcomp_x⁷)))(_lh_parse_arg1⁰))
//│ 		and mk_cons⁰ = (fun _lh_mk_cons_arg1⁰ -> (fun _lh_mk_cons_arg2⁰ -> case _lh_mk_cons_arg2⁰ of {
//│ 				List _lh_mk_cons_List_0⁰ => [List [LH_C _lh_mk_cons_arg1⁰ _lh_mk_cons_List_0⁰]]
//│ 				| _  => error⁰}))
//│ 		and string_of⁰ = (fun _lh_string_of_arg1⁰ -> (fun _lh_string_of_arg2⁰ -> 
//│ 				let chars⁰ = takeWhile_lh_₁(_lh_string_of_arg1⁰, _lh_string_of_arg2⁰)
//│ 				in let s'⁰ = dropWhile_lh_₁(_lh_string_of_arg1⁰, _lh_string_of_arg2⁰)
//│ 				in maybeX_lh_₁(polyNeq⁰(chars⁰, [LH_N]), [LH_P2 [MkString chars⁰] s'⁰])))
//│ 		and preorder⁰ = (fun _lh_preorder_arg1⁰ -> if eqListExpr_lh_₁(_lh_preorder_arg1⁰, [LH_N]) then [LH_N] else mappend_lh_₃(
//│ 				let t¹¹ = (fun ys³ -> ys³)
//│ 				in let h⁵ = g_first⁰(_lh_preorder_arg1⁰)
//│ 				in (fun ys⁴ -> [LH_C h⁵ mappend_lh_₃(t¹¹, ys⁴)]), preorder⁰(g_rest⁰(_lh_preorder_arg1⁰))))
//│ 		and alphanum⁰ = (fun _lh_alphanum_arg1⁰ -> ((((int_of_char⁰(_lh_alphanum_arg1⁰) >= int_of_char⁰('A')) && (int_of_char⁰(_lh_alphanum_arg1⁰) <= int_of_char⁰('Z'))) || ((int_of_char⁰(_lh_alphanum_arg1⁰) >= int_of_char⁰('a')) && (int_of_char⁰(_lh_alphanum_arg1⁰) <= int_of_char⁰('z')))) || ((int_of_char⁰(_lh_alphanum_arg1⁰) >= int_of_char⁰('0')) && (int_of_char⁰(_lh_alphanum_arg1⁰) <= int_of_char⁰('9')))))
//│ 		and preprocess⁰ = (fun _lh_preprocess_arg1⁰ -> (fun _lh_preprocess_arg2⁰ -> case _lh_preprocess_arg2⁰ of {
//│ 				LH_P2 _lh_preprocess_LH_P2_0⁰ _lh_preprocess_LH_P2_1⁰ => 
//│ 					let _lh_process1_LH_P2_1⁰ = simplify_lh_₃(super_reduce⁰(_lh_preprocess_arg1⁰), _lh_preprocess_LH_P2_1⁰)
//│ 					in let _lh_process1_LH_P2_0⁰ = simplify_lh_₂(super_reduce⁰(_lh_preprocess_arg1⁰), _lh_preprocess_LH_P2_0⁰)
//│ 					in (fun _lh_process1_arg1¹ -> (fun _lh_process1_arg2¹ -> (fun _lh_process1_arg3¹ -> (fun _lh_process1_arg4¹ -> (fun _lh_process1_arg5¹ -> (fun add_agenda² -> (fun process2¹ -> (fun process² -> 
//│ 						let o⁰ = fst_lh_₂(_lh_process1_arg1¹, [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰])
//│ 						in let _lh_matchIdent⁹ = o⁰
//│ 						in case _lh_matchIdent⁹ of {
//│ 							Unrelated  => process²(_lh_process1_arg1¹, _lh_process1_arg2¹, _lh_process1_arg3¹, _lh_process1_arg4¹, add_agenda²((fun dum¹ -> 1000), [LH_C [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰] [LH_N]], _lh_process1_arg5¹))
//│ 							| Equal  => process²(_lh_process1_arg1¹, _lh_process1_arg2¹, _lh_process1_arg3¹, _lh_process1_arg4¹, _lh_process1_arg5¹)
//│ 							| _  => 
//│ 								let eqn⁰ = 	
//│ 									let _lh_matchIdent¹⁰ = o⁰
//│ 									in case _lh_matchIdent¹⁰ of {
//│ 										Greater  => [Eqn _lh_process1_arg2¹ [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰]]
//│ 										| Less  => [Eqn _lh_process1_arg2¹ [LH_P2 _lh_process1_LH_P2_1⁰ _lh_process1_LH_P2_0⁰]]}
//│ 								in process2¹(_lh_process1_arg1¹, (_lh_process1_arg2¹ + 1), _lh_process1_arg3¹, _lh_process1_arg4¹, _lh_process1_arg5¹, eqn⁰)}))))))))}))
//│ 		and empty_net⁰ = [Return [LH_N]]
//│ 		and process⁰ = (fun _lh_process_arg1⁰ -> (fun _lh_process_arg2⁰ -> (fun _lh_process_arg3⁰ -> (fun _lh_process_arg4⁰ -> (fun _lh_process_arg5⁰ -> case _lh_process_arg5⁰ of {
//│ 				LH_N  => _lh_process_arg4⁰
//│ 				| LH_C _lh_process_LH_C_0⁰ _lh_process_LH_C_1⁰ => case _lh_process_LH_C_0⁰ of {
//│ 					Item _lh_process_Item_0⁰ _lh_process_Item_1⁰ => process1⁰(_lh_process_arg1⁰, _lh_process_arg2⁰, _lh_process_arg3⁰, _lh_process_arg4⁰, _lh_process_LH_C_1⁰, preprocess⁰(_lh_process_arg4⁰, _lh_process_Item_1⁰))}}))))) 
//│ 		in let group_completion⁰ = knuth_bendix⁰(rpo⁰(rank_order⁰(rank⁰), lex_ext⁰), map_lh_₅(parse_eqn⁰, 
//│ 			let t¹² = 	
//│ 				let t¹³ = 	
//│ 					let t¹⁴ = (fun f⁸ -> [LH_N])
//│ 					in let h⁶ = [LH_C 'I' [LH_C '(' [LH_C 'x' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'E' [LH_N]]]]]]]]]]]]]
//│ 					in (fun f⁹ -> [LH_C f⁹(h⁶) map_lh_₅(f⁹, t¹⁴)])
//│ 				in let h⁷ = [LH_C 'E' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'x' [LH_N]]]]]]]]]]
//│ 				in (fun f¹⁰ -> [LH_C f¹⁰(h⁷) map_lh_₅(f¹⁰, t¹³)])
//│ 			in let h⁸ = [LH_C '(' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'b' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'c' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C '(' [LH_C 'b' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'c' [LH_C ')' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ 			in (fun f¹¹ -> [LH_C f¹¹(h⁸) map_lh_₅(f¹¹, t¹²)])))
//│ 		in eqExpr_lh_₁(simplify_lh_₄(super_reduce⁰(group_completion⁰), parse⁰(_lh_result_LH_P2_0⁰)), parse⁰(_lh_result_LH_P2_1⁰)))))
//│ def the_lh_₁(_lh_the_arg1⁰) = case _lh_the_arg1⁰ of {
//│ 	Just _lh_the_Just_0⁰ => _lh_the_Just_0⁰
//│ 	| _  => error⁰}
//│ def the_lh_₂(_lh_the_arg1¹) = case _lh_the_arg1¹ of {
//│ 	Just _lh_the_Just_0¹ => _lh_the_Just_0¹
//│ 	| _  => error⁰}
//│ def try_all_lh_₁(_lh_try_all_arg1⁰) = foldr_lh_₂(orElseMap_lh_₄, (fun dum³ -> croak_lh_₄), _lh_try_all_arg1⁰)
//│ def unify'_lh_₁(_lh_unify'_arg1⁰, _lh_unify'_arg2⁰) = case _lh_unify'_arg2⁰ of {
//│ 	LH_P2 _lh_unify'_LH_P2_0⁰ _lh_unify'_LH_P2_1⁰ => case _lh_unify'_LH_P2_0⁰ of {
//│ 		Var _lh_unify'_Var_0⁰ => univar_lh_₁(_lh_unify'_arg1⁰, _lh_unify'_Var_0⁰, _lh_unify'_LH_P2_1⁰)
//│ 		| Func _lh_unify'_Func_0⁰ _lh_unify'_Func_1⁰ => case _lh_unify'_LH_P2_1⁰ of {
//│ 			Var _lh_unify'_Var_0¹ => univar_lh_₁(_lh_unify'_arg1⁰, _lh_unify'_Var_0¹, [Func _lh_unify'_Func_0⁰ _lh_unify'_Func_1⁰])
//│ 			| Func _lh_unify'_Func_0¹ _lh_unify'_Func_1¹ => if polyEq⁰(_lh_unify'_Func_0⁰, _lh_unify'_Func_0¹) then prop_fold_lh_₁(unify'_lh_₁, _lh_unify'_arg1⁰, zip_lh_₁(_lh_unify'_Func_1⁰, _lh_unify'_Func_1¹)) else croak_lh_₄}}}
//│ def unify_lh_₁(_lh_unify_arg1⁰, _lh_unify_arg2⁰) = unify'_lh_₁([LH_N], [LH_P2 _lh_unify_arg1⁰ _lh_unify_arg2⁰])
//│ def univar_lh_₁(_lh_univar_arg1⁰, _lh_univar_arg2⁰, _lh_univar_arg3⁰) = 
//│ 	let t¹⁹ = assoc_lh_₁(_lh_univar_arg1⁰, _lh_univar_arg2⁰)
//│ 	in if exists_lh_₂(t¹⁹) then unify'_lh_₁(_lh_univar_arg1⁰, [LH_P2 the_lh_₂(t¹⁹) _lh_univar_arg3⁰]) else if eqExpr_lh_₃(_lh_univar_arg3⁰, [Var _lh_univar_arg2⁰]) then succeed_lh_₄(_lh_univar_arg1⁰) else 
//│ 		let u'⁰ = sub_lh_₂(_lh_univar_arg3⁰, _lh_univar_arg1⁰)
//│ 		in if not⁰(occurs_lh_₂(_lh_univar_arg2⁰, u'⁰)) then succeed_lh_₄(comp_sub_lh_₁([LH_C [LH_P2 _lh_univar_arg2⁰ u'⁰] [LH_N]], _lh_univar_arg1⁰)) else croak_lh_₄
//│ def update_alist_lh_₁(_lh_update_alist_arg1⁰, _lh_update_alist_arg2⁰, _lh_update_alist_arg3⁰) = 
//│ 	let upd⁰ = (fun ls²⁰ -> 
//│ 		let _lh_matchIdent¹³ = ls²⁰
//│ 		in case _lh_matchIdent¹³ of {
//│ 			LH_N  => [LH_C [LH_P2 _lh_update_alist_arg1⁰ _lh_update_alist_arg2⁰(_lh_update_alist_arg3⁰)] [LH_N]]
//│ 			| LH_C _lh_update_alist_LH_C_0⁰ _lh_update_alist_LH_C_1⁰ => case _lh_update_alist_LH_C_0⁰ of {
//│ 				LH_P2 _lh_update_alist_LH_P2_0⁰ _lh_update_alist_LH_P2_1⁰ => if polyEq⁰(_lh_update_alist_arg1⁰, _lh_update_alist_LH_P2_0⁰) then [LH_C [LH_P2 _lh_update_alist_arg1⁰ _lh_update_alist_arg2⁰(_lh_update_alist_LH_P2_1⁰)] _lh_update_alist_LH_C_1⁰] else [LH_C [LH_P2 _lh_update_alist_LH_P2_0⁰ _lh_update_alist_LH_P2_1⁰] upd⁰(_lh_update_alist_LH_C_1⁰)]}})
//│ 	in upd⁰
//│ def zip_lh_₁(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C hx⁰ tx⁰ => case ys¹ of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh_₁(tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zip_lz_nl_lh_₁(xs¹⁰, ys¹²) = case ys¹² of {
//│ 	LH_C hy² ty² => force⁰(xs¹⁰, hy², ty²)
//│ 	| LH_N  => [LH_N]}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
