

:lhInHaskell
:lhGenOCaml
map_dnet :: (a -> b) -> DISC_NET a -> DISC_NET b
map_dnet f (Switch alist defalt) = Switch (map (cross (\x -> x) (map_dnet f)) alist) (map_dnet f defalt)
map_dnet f (Return x) = Return (f x)
delete_eqns :: [NUM] -> DNET -> DNET
delete_eqns nums =
  let ok = \e -> not (inList (eqno e) nums) in
  map_dnet (filter ok)
skeleton :: DNET -> DISC_NET [NUM]
skeleton x = map_dnet (map eqno) x
quant :: (PRED a -> PRED [a]) -> RELATION a b -> RELATION b [a]
quant q rel y xs =
  let p = \x -> rel x y in
  q p xs
eqRewrite ord x y = (polyEq (ord (x, y)) Equal)
gtRewrite ord x y = (polyEq (ord (x, y)) Greater)
ltRewrite ord x y = (polyEq (ord (x, y)) Less)
geRewrite ord x y = (inList (ord (x, y)) [Greater, Equal])
dropWhile f [] = []
dropWhile f (h:t) = if (f h) then dropWhile f t else (h:t)
takeWhile p [] = []
takeWhile p (x:xs) = if (p x) then x:(takeWhile p xs) else []
fst (a, b) = a
snd (a, b) = b
inList x (h:t) = if polyEq x h then True else inList x t
inList x [] = False
or [] = False
or (h:t) = if h then True else or t
all p [] = True
all p (h:t) = if p h then all p t else False
any p [] = False
any p (h:t) = if p h then True else any p t
data EXPR = Func FUNC [EXPR] | Var VAR
type FUNC    = String
type VAR    = String
type NUM    = Int
type EXPR_PAIR = (EXPR, EXPR)
data EQUATION = Eqn NUM EXPR_PAIR
type PARSER    = String -> Maybe (SYNVAL, String)
data SYNVAL    = Expr EXPR | List [SYNVAL] | MkString String
type SUBST = [(VAR, EXPR)]
type PATH = [NUM]
type TACTIC = EXPR -> Maybe EXPR
data TOKEN = Afunc FUNC | Avar
data DISC_NET a = Switch [(FUNC, DISC_NET a)] (DISC_NET a) | Return a
type DNET = DISC_NET [EQUATION]
data ANSWER = Equal | Greater | Less | Unrelated deriving Eq
type ORDERING a   = (a, a) -> ANSWER
type PRED a        = a -> Bool
type RELATION a b = a -> b -> Bool
type EXTENSION = ORDERING EXPR -> ORDERING EXPR
type CRIT_PAIR    = EXPR_PAIR
data ITEM         = Item NUM CRIT_PAIR
type AGENDA       = [ITEM]
type KB_DATA = (ORDERING EXPR, EXPR_PAIR -> NUM)
copy n x = if n <= 0 then [] else x:(copy (n - 1) x)
eqListExpr [] [] = True
eqListExpr (a:b) (c:d) = if eqExpr a c then eqListExpr b d else False
eqListExpr _ _ = False
succeed x             = Just x
croak                 = Nothing
exists Nothing        = False
exists x              = True
the (Just x)          = x
the _                 = error
orElse Nothing y      = y
orElse x y            = x
getOrElse (Just x) y  = x
getOrElse Nothing y   = y
orElseMap p q s       = orElse (p s) (q s)
maybeX p x            = if p then Just x else Nothing
first_ok x            = foldr (orElse) Nothing x
sift x                = (concat . map listify) x
listify x             = getOrElse (lift box x) []
box x                 = [x]
lift f Nothing        = Nothing
lift f (Just x)       = Just (f x)
prop :: (a -> Maybe b) -> (Maybe a -> Maybe b)
prop f Nothing = Nothing
prop f (Just x) = f x
prop2 :: (a -> b -> Maybe c) -> (Maybe a -> b -> Maybe c)
prop2 f Nothing y = Nothing
prop2 f (Just x) y = f x y
prop_fold :: (a -> b -> Maybe a) -> a -> [b] -> Maybe a
prop_fold f x [] = Just x
prop_fold f x (y:ys) = prop2 (prop_fold f) (f x y) ys
squash                :: Maybe (Maybe a) -> Maybe a
squash (Just x)       = x
squash Nothing        = Nothing
pair x y              = (x, y)
cross              :: (a -> c) -> (b -> d) -> (a,b) -> (c,d)
cross f g (x,y)     = (f x, g y)
eqExpr (Func f1 es1) (Func f2 es2) = (polyEq f1 f2) && (eqListExpr es1 es2)
eqExpr (Var v1) (Var v2) = polyEq v1 v2
eqExpr other1 other2 = False
lhs (Eqn n (a, b)) = a
rhs (Eqn n (a, b)) = b
eqno (Eqn n (a, b)) = n
eqpr (Eqn n pr) = pr
cost :: (EXPR, EXPR) -> NUM
cost (a, b) = (size a) + (size b)
      where
      size x = expr_fold (\x -> \a -> (sum a) + 1) (\dum -> 0) x
expr_fold :: (FUNC -> [a] -> a) -> (VAR -> a) -> EXPR -> a
expr_fold ff vv (Var v) = vv v
expr_fold ff vv (Func f a) = ff f (map (expr_fold ff vv) a)
occurs :: VAR -> EXPR -> Bool
occurs v = expr_fold (\dum -> or) (\x -> polyEq x v)
assoc alist x =
  let match_x = \uv -> case uv of {(u,v) -> maybeX (polyEq x u) v} in
  first_ok (map match_x alist)
update_alist :: Eq a => a -> (b -> b) -> b -> [(a, b)] -> [(a, b)]
update_alist x f defalt =
  let upd = \ls -> case ls of {
    [] -> [(x, f defalt)];
    ((y, z):alist) -> if polyEq x y then ((x, f z):alist) else ((y, z):(upd alist));
  } in
  upd
apply :: SUBST -> VAR -> EXPR
apply s v = getOrElse (assoc s v) (Var v)
sub :: EXPR -> SUBST -> EXPR
sub t s = expr_fold (\x -> \y -> Func x y) (apply s) t
comp_sub s1 s2 = [(v, sub t s1) | (v, t) <- s2] ++ s1
stand :: String -> EXPR -> EXPR
stand suffix = expr_fold (\x -> \y -> Func x y) (\v -> Var (v ++ suffix))
stand_eqn :: String -> EQUATION -> EQUATION
stand_eqn suffix (Eqn n (lhs, rhs)) = Eqn n (stand suffix lhs, stand suffix rhs)
subterms :: EXPR -> [(PATH, EXPR)]
subterms (Var v) = []
subterms (Func f a) = [([], Func f a)] ++ [(i:k, u) | (i, t) <- (zip_lz_nl [0..] a), (k, u) <- subterms t]
replace :: EXPR -> PATH -> EXPR -> EXPR
replace t [] u = u
replace (Func f a) (i:k) u = Func f (modify a i (\t -> replace t k u))
replace _ _ u = error
modify (x:a) 0 f = (f x) : a
modify (x:a) i f = x : (modify a (i-1) f)
modify _ _ _ = error
match :: EXPR -> EXPR -> Maybe SUBST
match p t = match' [] (p, t)
match' s (Var v, t) =
  let u = assoc s v in
  if not (exists u) then succeed ((v, t):s)
  else if eqExpr (the u) t then succeed s
  else croak
match' s (Func f a, Func g b) = if polyEq f g then prop_fold match' s (zip a b) else croak
match' s (Func f a, Var v) = croak
match' _ _ = error
rewrite :: EQUATION -> TACTIC
rewrite (Eqn n (l, r)) = (lift (sub r)) . (match l)
try_all :: [TACTIC] -> TACTIC
try_all x = foldr (orElseMap) (\dum -> croak) x
inside :: TACTIC -> TACTIC
inside rw t = first_ok [ lift (replace t k) (rw u) | (k, u) <- subterms t ]
reduce1 eqn = inside (rewrite eqn)
reduce eqns = inside (try_all (map rewrite eqns))
unify t u = unify' [] (t, u)
unify' s (Var v, u) = univar s v u
unify' s (Func f a, Var v) = univar s v (Func f a)
unify' s (Func f a, Func g b)
    = if polyEq f g then prop_fold unify' s (zip a b) else croak
univar s v u =
  let t = assoc s v in
  if exists t then unify' s (the t, u)
  else if eqExpr u (Var v) then succeed s
  else
    let u' = sub u s in
    if not ( occurs v u') then succeed (comp_sub [(v, u')] s)
    else croak
simplify :: TACTIC -> EXPR -> EXPR
simplify rw = let f = \t -> getOrElse (lift f (rw t)) t in f
----- parsing -----
parse_eqn s = case (fst (the (p_eqn s))) of {(List [Expr lhs, Expr rhs]) -> (lhs, rhs); _ -> error}
parse s                 = (unExpr . fst . the . p_expr) s
unExpr (Expr e)         = e
unExpr _                = error
unString (MkString s)   = s
unString _              = error
build                 :: (SYNVAL -> SYNVAL) -> (PARSER -> PARSER)
build f p             = (lift (cross f (\x -> x))) . p
seq2                  :: (SYNVAL -> SYNVAL -> SYNVAL) -> (PARSER -> PARSER -> PARSER)
seq2 f p q =
  let g = (\xs -> case xs of (x, s) -> lift (cross (f x) (\x -> x)) (q s)) in (squash . (lift g) . p)
seq2Lzq f p q =
  let g = (\xs -> case xs of (x, s) -> lift (cross (f x) (\x -> x)) ((force q) s)) in (squash . (lift g) . p)
seQ                   :: ([SYNVAL] -> SYNVAL) -> ([PARSER] -> PARSER)
seQ f ps              = build (mk_list f) (foldr (seq2 mk_cons) empty ps)
mk_cons x (List xs)   = List (x:xs)
mk_cons x _           = error
mk_list f (List xs)   = f xs
mk_list f _           = error
empty                 :: PARSER
empty s               = succeed (List [], s)
list_of               :: PARSER -> Char -> PARSER
-- NOTE:
list_of p sep         =
  let p' = lazy (seq2 mk_cons p (orElseMap (seq2Lzq (\x -> \y -> y) (look_for sep) p') empty)) in
  force p'
sp p                  = p . dropWhile (\x -> polyEq x ' ')
look_for c            = sp (pchar (\x -> polyEq x c))
pchar p []            = croak
pchar p (c:s)         = if p c then succeed (MkString [c], s) else croak
string_of kind s =
  let chars = takeWhile kind s in
  let s'    = dropWhile kind s in
  maybeX (polyNeq chars "") (MkString chars, s')
p_eqn x = seQ q_eqn [p_expr, look_for '=', p_expr] x
q_eqn [lhs, eqRewrite, rhs] = List [lhs, rhs]
q_eqn _                     = error
p_expr x = orElseMap (seQ q_op [p_term, p_op, p_term]) p_term x
q_op [Expr a, MkString op, Expr b] = Expr (Func op [a, b])
q_op _                             = error
p_term x = orElseMap (seQ q_func [p_ident, look_for '(', list_of p_expr ',', look_for ')']) p_prim x
q_func [MkString fun, lb, List args, rb] = Expr (Func fun (map unExpr args))
q_func _                                 = error
p_prim x = orElseMap p_name (seQ (\x -> atIndex 1 x) [look_for '(', p_expr, look_for ')']) x
p_name x = build q_name p_ident x
q_name (MkString s) = if ((int_of_char (atIndex 0 s)) >= (int_of_char 'a')) && ((int_of_char (atIndex 0 s)) <= (int_of_char 'z')) then Expr (Var s) else Expr (Func s [])
q_name _ = error
p_ident x = sp (string_of alphanum) x
p_op x = sp (string_of opsym) x
opsym x = (\x -> inList x ['*', '+', '%', '@', '-', '/', '?', ':']) x
alphanum c = ((((int_of_char c) >= (int_of_char 'A')) && ((int_of_char c) <= (int_of_char 'Z'))) ||
            (((int_of_char c) >= (int_of_char 'a')) && ((int_of_char c) <= (int_of_char 'z'))) ||
            (((int_of_char c) >= (int_of_char '0')) && ((int_of_char c) <= (int_of_char '9'))))
----- parsing -----
g_init exp = [exp]
g_first ((Func f a) : z) = Afunc f
g_first ((Var v) : z) = Avar
g_first _ = error
g_rest ((Func f a) : z) = a ++ z
g_rest ((Var v) : z) = z
g_rest _ = error
g_skip x = tail x
preorder z = if eqListExpr z [] then [] else ([g_first z] ++ (preorder (g_rest z)))
empty_net = Return []
is_switch (Switch alist defalt) = True
is_switch (Return eqns) = False
find :: EXPR -> DNET -> [EQUATION]
find exp d = find' (g_init exp) d
find' z (Return eqns) = eqns
find' z (Switch alist defalt)
    = (find_assoc (g_first z) (g_rest z) alist) ++ (find' (g_skip z) defalt)
find_assoc (Afunc f) z alist
    = getOrElse (lift (find' z) (assoc alist f)) []
find_assoc Avar z alist = []
mk_dnet :: [EQUATION] -> DNET
mk_dnet x = foldl add_eqn empty_net x
add_eqn :: DNET -> EQUATION -> DNET
add_eqn d eqn = thread (preorder (g_init (lhs eqn))) eqn d
thread :: [TOKEN] -> EQUATION -> DNET -> DNET
thread ((Afunc f) : z) e (Switch alist defalt) = Switch (update_alist f (thread z e) empty_net alist) defalt
thread (Avar : z) e (Switch alist defalt) = Switch alist (thread z e defalt)
thread [] e (Return eqns) = Return (e : eqns)
thread ((Afunc f) : z) e (Return eqns) = thread ((Afunc f) : z) e (Switch [] (Return eqns))
thread (Avar : z) e (Return eqns) =
  let d' = thread z e (Return eqns) in
  if is_switch d' then Switch [] d' else  d'
super_reduce d = inside (dnet_reduce d)
dnet_reduce d t = try_all (map rewrite (find t d)) t
num_order :: ORDERING NUM
num_order (i, j) =
  if i > j then
    Greater
  else if i < j then
    Less
  else
    Equal
rank_order :: (a -> NUM) -> ORDERING a
rank_order rank (x, y) = num_order (rank x, rank y)
delete :: RELATION a b -> a -> [b] -> Maybe [b]
delete eqRewrite x [] = croak
delete eqRewrite x (y:ys) = if eqRewrite x y then succeed ys else lift (\x -> y:x) (delete eqRewrite x ys)
rem_eq :: RELATION a b -> ([a], [b]) -> ([a], [b])
rem_eq eqRewrite ([], ys) = ([], ys)
rem_eq eqRewrite (x:xs, ys) =
  let add_x = \xsys -> case xsys of {(xs', ys') -> ((x:xs'), ys')} in
  getOrElse (lift (rem_eq eqRewrite . pair xs) (delete eqRewrite x ys)) (add_x (rem_eq eqRewrite (xs, ys)))
dominates :: ORDERING a -> RELATION [a] [a]
dominates ord = quant all (quant any (gtRewrite ord))
multi :: ORDERING a -> ORDERING [a]
multi ord (a, b) =
  case rem_eq (eqRewrite ord) (a, b) of
    (a', b') -> if dominates ord a' b' then Greater else (if dominates ord b' a' then Less else Unrelated)
lexico :: ORDERING a -> ORDERING [a]
lexico ord ([], []) = Equal
lexico ord (x:a, []) = Greater
lexico ord ([], y:b) = Less
lexico ord (x:a, y:b) = lex_combine (ord (x, y)) (lexico ord (a, b))
lex_combine Equal o = o
lex_combine Greater o = Greater
lex_combine Less o = Less
lex_combine Unrelated o = Unrelated
multi_ext :: EXTENSION
multi_ext ord (Func f a, Func g b) = multi ord (a, b)
multi_ext ord _ = error
lex_ext :: EXTENSION
lex_ext ord (Func f a, Func g b) =
  let estimate = lexico ord (a, b) in
  let confirm = \x -> case x of {
    Equal     -> True;
    Greater   -> quant all (ltRewrite ord) (Func f a) b;
    Less      -> quant all (ltRewrite ord) (Func g b) a;
    Unrelated -> False;
  } in
  if confirm estimate then estimate
  else if quant any (geRewrite ord) (Func g b) a then Greater
  else if quant any (geRewrite ord) (Func f a) b then Less
  else Unrelated
lex_ext ord _ = error
rpo :: ORDERING FUNC -> EXTENSION -> ORDERING EXPR
rpo ord ext =
  let rpo' = \param -> case param of {
    (Var x, Var y)       -> if polyEq x y then Equal else Unrelated;
    (Var x, Func f a)    -> if occurs x (Func f a) then Less else Unrelated;
    (Func f a, Var x)    -> if occurs x (Func f a) then Greater else Unrelated;
    (Func f a, Func g b) -> case (ord (f, g)) of {
                              Equal     -> ext (rpo') (Func f a, Func g b);
                              Greater   -> if quant all (ltRewrite rpo') (Func f a) b then Greater
                                          else if quant any (geRewrite rpo') (Func f a) b then Less
                                          else Unrelated;
                              Less      -> if quant all (ltRewrite rpo') (Func g b) a then Less
                                          else if quant any (geRewrite rpo') (Func g b) a then Greater
                                          else Unrelated;
                              Unrelated -> Unrelated;
                            };
    _ -> error "error"
  } in
  rpo'
item_cost (Item c e) = c
mk_item :: (EXPR_PAIR -> NUM) -> CRIT_PAIR -> ITEM
mk_item cfun eqn = Item (cfun eqn) eqn
addby :: (a -> NUM) -> [a] -> [a] -> [a]
addby f xs ys =
  let insert = \x -> \ls -> case ls of {
    [] -> [x];
    (y:ys) -> if (f x) <= (f y) then x:(y:ys) else y:(insert x ys)
  } in
  foldr insert ys xs
add_agenda :: (EXPR_PAIR -> NUM) -> [CRIT_PAIR] -> AGENDA -> AGENDA
add_agenda cfun eqns = addby item_cost (map (mk_item cfun) eqns)
superpose :: EXPR -> EXPR -> [(PATH, SUBST)]
superpose t u = sift [ lift (pair k) (unify t w) | (k, w) <- subterms u ]
strict_super :: EXPR -> EXPR -> [(PATH, SUBST)]
strict_super t (Func f a) = [ (i:k, s) | (i, u) <- (zip_lz_nl [0..] a), (k, s) <- superpose t u ]
strict_super t _ = error
mk_crit :: EQUATION -> EQUATION -> (PATH, SUBST) -> CRIT_PAIR
mk_crit (Eqn n1 (l1, r1)) (Eqn n2 (l2, r2)) (k, s) = (sub (replace l2 k r1) s, sub r2 s)
crit_pairs :: EQUATION -> EQUATION -> [CRIT_PAIR]
crit_pairs e1 e2 =
  (map (mk_crit e1 e2) (superpose (lhs e1) (lhs e2))) ++ (map (mk_crit e2 e1) (strict_super (lhs e2) (lhs e1)))
all_crit_pairs :: EQUATION -> [EQUATION] -> [CRIT_PAIR]
all_crit_pairs eqn theory =
  let eqn' = stand_eqn "1" eqn in
  let eqn'' = stand_eqn "2" eqn in
  let theory'' = map (stand_eqn "2") theory in
  (map (mk_crit eqn' eqn'') (strict_super (lhs eqn') (lhs eqn''))) ++ (concat (map (crit_pairs eqn') theory''))
knuth_bendix :: ORDERING EXPR -> [EXPR_PAIR] -> DNET
knuth_bendix ord axs = knuth_bendix1 (ord, cost) axs
knuth_bendix1 datums axs = process datums 1 [] empty_net (add_agenda (snd datums) axs [])
process :: KB_DATA -> NUM -> [EQUATION] -> DNET -> AGENDA -> DNET
process datums n thy net [] = net
process datums n thy net ((Item w eqn) : todo) = process1 datums n thy net todo (preprocess net eqn)
preprocess :: DNET -> CRIT_PAIR -> CRIT_PAIR
preprocess net (lhs, rhs) = (simplify (super_reduce net) lhs, simplify (super_reduce net) rhs)
process1 :: KB_DATA -> NUM -> [EQUATION] -> DNET -> AGENDA -> CRIT_PAIR -> DNET
process1 datums n thy net todo (lhs, rhs) =
  let o = (fst datums) (lhs, rhs) in
  case o of
        Unrelated -> process datums n thy net (add_agenda (\dum -> 1000) [(lhs, rhs)] todo)
        Equal ->     process datums n thy net todo
        _ ->
          let eqn = case o of { Greater -> Eqn n (lhs, rhs); Less -> Eqn n (rhs, lhs) } in
          process2 datums (n+1) thy net todo eqn
process2 :: KB_DATA -> NUM -> [EQUATION] -> DNET -> AGENDA -> EQUATION -> DNET
process2 datums n thy net todo new_rule =
  case (split (reducible (reduce1 new_rule)) thy) of { (deleted, thy') ->
  let net' = add_eqn (delete_eqns (map eqno deleted) net) new_rule in
  let deletions = map eqpr deleted in
  let critical = all_crit_pairs new_rule thy' in
  let new_agenda = sift (map (resolve (super_reduce net')) (deletions ++ critical)) in
  let todo' = add_agenda (snd datums) new_agenda todo in
  process datums n (thy' ++ [new_rule]) net' todo' }
resolve :: TACTIC -> CRIT_PAIR -> Maybe CRIT_PAIR
resolve tac pr =
  let lhs' = simplify tac (fst pr) in
  let rhs' = simplify tac (snd pr) in
  if eqExpr lhs' rhs' then croak else succeed (lhs', rhs')
reducible :: TACTIC -> EQUATION -> Bool
reducible tac (Eqn n (lhs, rhs)) = (exists (tac lhs)) || (exists (tac rhs))
split :: (a -> Bool) -> [a] -> ([a], [a])
split p xs =
  let tmp = (zip (map p xs) xs) in
  ([ x | (b, x) <- tmp, b ], [ x | (b, x) <- tmp, not(b) ])
rank "E" = 1
rank "*" = 2
rank "I" = 3
rank _ = error
result (s1, s2) =
  let group_completion = knuth_bendix (rpo (rank_order rank) lex_ext) (map parse_eqn [ "(a * b) * c = a * (b * c)", "E * x = x", "I(x) * x = E" ]) in
  (eqExpr (simplify (super_reduce group_completion) (parse s1)) (parse s2))
testRewrite_nofib n = all result (copy n ("I(a * b)", "I(b) * I(a)"))
testRewrite_nofib $ primId 50
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> after expansion >>>>>>>>>>
//│ testRewrite_nofib_lh_₁(primId⁰(50))
//│ def add_agenda_lh_₁(_lh_add_agenda_arg1⁰, _lh_add_agenda_arg2⁰) = addby_lh_₁(item_cost_lh_₁, map_lh_₅(mk_item_lh_₁(_lh_add_agenda_arg1⁰), _lh_add_agenda_arg2⁰))
//│ def add_eqn_lh_₁(_lh_add_eqn_arg1⁰, _lh_add_eqn_arg2⁰) = thread_lh_₁(preorder_lh_₁(g_init_lh_₁(lhs_lh_₁(_lh_add_eqn_arg2⁰))), _lh_add_eqn_arg2⁰, _lh_add_eqn_arg1⁰)
//│ def addby_lh_₁(_lh_addby_arg1⁰, _lh_addby_arg2⁰, _lh_addby_arg3⁰) = 
//│ 	let insert⁰ = (fun x²⁴ -> (fun ls¹¹ -> 
//│ 		let _lh_matchIdent¹⁰ = ls¹¹
//│ 		in case _lh_matchIdent¹⁰ of {
//│ 			LH_N  => [LH_C x²⁴ [LH_N]]
//│ 			| LH_C _lh_addby_LH_C_0⁰ _lh_addby_LH_C_1⁰ => if (_lh_addby_arg1⁰(x²⁴) <= _lh_addby_arg1⁰(_lh_addby_LH_C_0⁰)) then [LH_C x²⁴ [LH_C _lh_addby_LH_C_0⁰ _lh_addby_LH_C_1⁰]] else [LH_C _lh_addby_LH_C_0⁰ insert⁰(x²⁴, _lh_addby_LH_C_1⁰)]}))
//│ 	in foldr_lh_₆(insert⁰, _lh_addby_arg3⁰, _lh_addby_arg2⁰)
//│ def all_crit_pairs_lh_₁(_lh_all_crit_pairs_arg1⁰, _lh_all_crit_pairs_arg2⁰) = 
//│ 	let eqn'⁰ = stand_eqn_lh_₁([LH_C '1' [LH_N]], _lh_all_crit_pairs_arg1⁰)
//│ 	in let eqn''⁰ = stand_eqn_lh_₁([LH_C '2' [LH_N]], _lh_all_crit_pairs_arg1⁰)
//│ 	in let theory''⁰ = map_lh_₇(stand_eqn_lh_₁([LH_C '2' [LH_N]]), _lh_all_crit_pairs_arg2⁰)
//│ 	in mappend_lh_₂(map_lh_₇(mk_crit_lh_₁(eqn'⁰, eqn''⁰), strict_super_lh_₁(lhs_lh_₁(eqn'⁰), lhs_lh_₁(eqn''⁰))), concat_lh_₁(map_lh_₇(crit_pairs_lh_₁(eqn'⁰), theory''⁰)))
//│ def all_lh_₁(_lh_all_arg1⁴, _lh_all_arg2⁴) = case _lh_all_arg2⁴ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0⁴ _lh_all_LH_C_1⁴ => if _lh_all_arg1⁴(_lh_all_LH_C_0⁴) then all_lh_₁(_lh_all_arg1⁴, _lh_all_LH_C_1⁴) else [False]}
//│ def all_lh_₂(_lh_all_arg1³, _lh_all_arg2³) = case _lh_all_arg2³ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0³ _lh_all_LH_C_1³ => if _lh_all_arg1³(_lh_all_LH_C_0³) then all_lh_₂(_lh_all_arg1³, _lh_all_LH_C_1³) else [False]}
//│ def all_lh_₃(_lh_all_arg1², _lh_all_arg2²) = case _lh_all_arg2² of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0² _lh_all_LH_C_1² => if _lh_all_arg1²(_lh_all_LH_C_0²) then all_lh_₃(_lh_all_arg1², _lh_all_LH_C_1²) else [False]}
//│ def all_lh_₄(_lh_all_arg1¹, _lh_all_arg2¹) = case _lh_all_arg2¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0¹ _lh_all_LH_C_1¹ => if _lh_all_arg1¹(_lh_all_LH_C_0¹) then all_lh_₄(_lh_all_arg1¹, _lh_all_LH_C_1¹) else [False]}
//│ def all_lh_₅(_lh_all_arg1⁰, _lh_all_arg2⁰) = case _lh_all_arg2⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0⁰ _lh_all_LH_C_1⁰ => if _lh_all_arg1⁰(_lh_all_LH_C_0⁰) then all_lh_₅(_lh_all_arg1⁰, _lh_all_LH_C_1⁰) else [False]}
//│ def alphanum_lh_₁(_lh_alphanum_arg1¹) = ((((int_of_char⁰(_lh_alphanum_arg1¹) >= int_of_char⁰('A')) && (int_of_char⁰(_lh_alphanum_arg1¹) <= int_of_char⁰('Z'))) || ((int_of_char⁰(_lh_alphanum_arg1¹) >= int_of_char⁰('a')) && (int_of_char⁰(_lh_alphanum_arg1¹) <= int_of_char⁰('z')))) || ((int_of_char⁰(_lh_alphanum_arg1¹) >= int_of_char⁰('0')) && (int_of_char⁰(_lh_alphanum_arg1¹) <= int_of_char⁰('9'))))
//│ def alphanum_lh_₂(_lh_alphanum_arg1⁰) = ((((int_of_char⁰(_lh_alphanum_arg1⁰) >= int_of_char⁰('A')) && (int_of_char⁰(_lh_alphanum_arg1⁰) <= int_of_char⁰('Z'))) || ((int_of_char⁰(_lh_alphanum_arg1⁰) >= int_of_char⁰('a')) && (int_of_char⁰(_lh_alphanum_arg1⁰) <= int_of_char⁰('z')))) || ((int_of_char⁰(_lh_alphanum_arg1⁰) >= int_of_char⁰('0')) && (int_of_char⁰(_lh_alphanum_arg1⁰) <= int_of_char⁰('9'))))
//│ def any_lh_₁(_lh_any_arg1³, _lh_any_arg2³) = case _lh_any_arg2³ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0³ _lh_any_LH_C_1³ => if _lh_any_arg1³(_lh_any_LH_C_0³) then [True] else any_lh_₁(_lh_any_arg1³, _lh_any_LH_C_1³)}
//│ def any_lh_₂(_lh_any_arg1², _lh_any_arg2²) = case _lh_any_arg2² of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0² _lh_any_LH_C_1² => if _lh_any_arg1²(_lh_any_LH_C_0²) then [True] else any_lh_₂(_lh_any_arg1², _lh_any_LH_C_1²)}
//│ def any_lh_₃(_lh_any_arg1¹, _lh_any_arg2¹) = case _lh_any_arg2¹ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0¹ _lh_any_LH_C_1¹ => if _lh_any_arg1¹(_lh_any_LH_C_0¹) then [True] else any_lh_₃(_lh_any_arg1¹, _lh_any_LH_C_1¹)}
//│ def any_lh_₄(_lh_any_arg1⁰, _lh_any_arg2⁰) = case _lh_any_arg2⁰ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0⁰ _lh_any_LH_C_1⁰ => if _lh_any_arg1⁰(_lh_any_LH_C_0⁰) then [True] else any_lh_₄(_lh_any_arg1⁰, _lh_any_LH_C_1⁰)}
//│ def apply_lh_₁(_lh_apply_arg1⁰, _lh_apply_arg2⁰) = getOrElse_lh_₁(assoc_lh_₁(_lh_apply_arg1⁰, _lh_apply_arg2⁰), [Var _lh_apply_arg2⁰])
//│ def assoc_lh_₁(_lh_assoc_arg1⁰, _lh_assoc_arg2⁰) = 
//│ 	let match_x⁰ = (fun uv⁰ -> 
//│ 		let _lh_matchIdent¹ = uv⁰
//│ 		in case _lh_matchIdent¹ of {
//│ 			LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => maybeX_lh_₁(polyEq⁰(_lh_assoc_arg2⁰, _lh_assoc_LH_P2_0⁰), _lh_assoc_LH_P2_1⁰)})
//│ 	in first_ok_lh_₁(map_lh_₇(match_x⁰, _lh_assoc_arg1⁰))
//│ def atIndex_lh_₁(n¹, ls⁴) = if (n¹ < 0) then error⁰ else case ls⁴ of {
//│ 	LH_C h⁴ t⁵ => if (n¹ == 0) then h⁴ else atIndex_lh_₁((n¹ - 1), t⁵)
//│ 	| LH_N  => error⁰}
//│ def atIndex_lh_₂(n⁰, ls³) = if (n⁰ < 0) then error⁰ else case ls³ of {
//│ 	LH_C h³ t⁴ => if (n⁰ == 0) then h³ else atIndex_lh_₂((n⁰ - 1), t⁴)
//│ 	| LH_N  => error⁰}
//│ def box_lh_₁(_lh_box_arg1⁰) = [LH_C _lh_box_arg1⁰ [LH_N]]
//│ def build_lh_₁(_lh_build_arg1⁴, _lh_build_arg2⁴, _lh_funcomp_x²⁹) = lift_lh_₆(cross_lh_₂(_lh_build_arg1⁴, (fun x⁵⁵ -> x⁵⁵)), _lh_build_arg2⁴(_lh_funcomp_x²⁹))
//│ def build_lh_₂(_lh_build_arg1³, _lh_build_arg2³, _lh_funcomp_x²⁴) = lift_lh_₆(cross_lh_₂(_lh_build_arg1³, (fun x³⁷ -> x³⁷)), _lh_build_arg2³(_lh_funcomp_x²⁴))
//│ def build_lh_₃(_lh_build_arg1², _lh_build_arg2², _lh_funcomp_x²⁰) = lift_lh_₆(cross_lh_₂(_lh_build_arg1², (fun x²¹ -> x²¹)), _lh_build_arg2²(_lh_funcomp_x²⁰))
//│ def build_lh_₄(_lh_build_arg1¹, _lh_build_arg2¹, _lh_funcomp_x¹⁸) = lift_lh_₆(cross_lh_₂(_lh_build_arg1¹, (fun x¹⁹ -> x¹⁹)), _lh_build_arg2¹(_lh_funcomp_x¹⁸))
//│ def build_lh_₅(_lh_build_arg1⁰, _lh_build_arg2⁰, _lh_funcomp_x³) = lift_lh_₆(cross_lh_₂(_lh_build_arg1⁰, (fun x³ -> x³)), _lh_build_arg2⁰(_lh_funcomp_x³))
//│ def comp_sub_lh_₁(_lh_comp_sub_arg1⁰, _lh_comp_sub_arg2⁰) = mappend_lh_₂(
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {
//│ 			LH_P2 _lh_comp_sub_LH_P2_0⁰ _lh_comp_sub_LH_P2_1⁰ => [LH_C [LH_P2 _lh_comp_sub_LH_P2_0⁰ sub_lh_₁(_lh_comp_sub_LH_P2_1⁰, _lh_comp_sub_arg1⁰)] _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 			| _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰(_lh_comp_sub_arg2⁰), _lh_comp_sub_arg1⁰)
//│ def concat_lh_₁(lss⁰) = case lss⁰ of {
//│ 	LH_C h¹ t² => mappend_lh_₂(h¹, concat_lh_₁(t²))
//│ 	| LH_N  => [LH_N]}
//│ def copy_lh_₁(_lh_copy_arg1⁰, _lh_copy_arg2⁰) = if (_lh_copy_arg1⁰ <= 0) then [LH_N] else [LH_C _lh_copy_arg2⁰ copy_lh_₁((_lh_copy_arg1⁰ - 1), _lh_copy_arg2⁰)]
//│ def cost_lh_₁(_lh_cost_arg1⁰) = case _lh_cost_arg1⁰ of {
//│ 	LH_P2 _lh_cost_LH_P2_0⁰ _lh_cost_LH_P2_1⁰ => 
//│ 		let size⁰ = (fun _lh_size_arg1⁰ -> expr_fold_lh_₃((fun x⁵⁹ -> (fun a² -> (sum_lh_₁(a²) + 1))), (fun dum² -> 0), _lh_size_arg1⁰))
//│ 		in (size⁰(_lh_cost_LH_P2_0⁰) + size⁰(_lh_cost_LH_P2_1⁰))}
//│ def crit_pairs_lh_₁(_lh_crit_pairs_arg1⁰, _lh_crit_pairs_arg2⁰) = mappend_lh_₂(map_lh_₇(mk_crit_lh_₁(_lh_crit_pairs_arg1⁰, _lh_crit_pairs_arg2⁰), superpose_lh_₁(lhs_lh_₁(_lh_crit_pairs_arg1⁰), lhs_lh_₁(_lh_crit_pairs_arg2⁰))), map_lh_₇(mk_crit_lh_₁(_lh_crit_pairs_arg2⁰, _lh_crit_pairs_arg1⁰), strict_super_lh_₁(lhs_lh_₁(_lh_crit_pairs_arg2⁰), lhs_lh_₁(_lh_crit_pairs_arg1⁰))))
//│ def croak_lh_₁ = [Nothing]
//│ def cross_lh_₁(_lh_cross_arg1¹, _lh_cross_arg2¹, _lh_cross_arg3¹) = case _lh_cross_arg3¹ of {
//│ 	LH_P2 _lh_cross_LH_P2_0¹ _lh_cross_LH_P2_1¹ => [LH_P2 _lh_cross_arg1¹(_lh_cross_LH_P2_0¹) _lh_cross_arg2¹(_lh_cross_LH_P2_1¹)]}
//│ def cross_lh_₂(_lh_cross_arg1⁰, _lh_cross_arg2⁰, _lh_cross_arg3⁰) = case _lh_cross_arg3⁰ of {
//│ 	LH_P2 _lh_cross_LH_P2_0⁰ _lh_cross_LH_P2_1⁰ => [LH_P2 _lh_cross_arg1⁰(_lh_cross_LH_P2_0⁰) _lh_cross_arg2⁰(_lh_cross_LH_P2_1⁰)]}
//│ def delete_eqns_lh_₁(_lh_delete_eqns_arg1⁰) = 
//│ 	let ok⁰ = (fun e⁰ -> not⁰(inList_lh_₄(eqno_lh_₁(e⁰), _lh_delete_eqns_arg1⁰)))
//│ 	in map_dnet_lh_₁(filter_lh_₁(ok⁰))
//│ def dnet_reduce_lh_₁(_lh_dnet_reduce_arg1⁰, _lh_dnet_reduce_arg2⁰) = try_all_lh_₁(map_lh_₂(rewrite_lh_₁, find_lh_₁(_lh_dnet_reduce_arg2⁰, _lh_dnet_reduce_arg1⁰)), _lh_dnet_reduce_arg2⁰)
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]}
//│ def empty_lh_₁(_lh_empty_arg1⁵) = succeed_lh_₁([LH_P2 [List [LH_N]] _lh_empty_arg1⁵])
//│ def empty_lh_₂(_lh_empty_arg1⁴) = succeed_lh_₁([LH_P2 [List [LH_N]] _lh_empty_arg1⁴])
//│ def empty_lh_₃(_lh_empty_arg1³) = succeed_lh_₁([LH_P2 [List [LH_N]] _lh_empty_arg1³])
//│ def empty_lh_₄(_lh_empty_arg1²) = succeed_lh_₁([LH_P2 [List [LH_N]] _lh_empty_arg1²])
//│ def empty_lh_₅(_lh_empty_arg1¹) = succeed_lh_₁([LH_P2 [List [LH_N]] _lh_empty_arg1¹])
//│ def empty_lh_₆(_lh_empty_arg1⁰) = succeed_lh_₁([LH_P2 [List [LH_N]] _lh_empty_arg1⁰])
//│ def empty_net_lh_₁ = [Return [LH_N]]
//│ def enumFrom_lh_₁(a¹) = lazy⁰([LH_C a¹ enumFrom_lh_₁((a¹ + 1))])
//│ def eqExpr_lh_₁(_lh_eqExpr_arg1⁰, _lh_eqExpr_arg2⁰) = case _lh_eqExpr_arg1⁰ of {
//│ 	Func _lh_eqExpr_Func_0⁰ _lh_eqExpr_Func_1⁰ => case _lh_eqExpr_arg2⁰ of {
//│ 		Func _lh_eqExpr_Func_0¹ _lh_eqExpr_Func_1¹ => (polyEq⁰(_lh_eqExpr_Func_0⁰, _lh_eqExpr_Func_0¹) && eqListExpr_lh_₁(_lh_eqExpr_Func_1⁰, _lh_eqExpr_Func_1¹))
//│ 		| _  => [False]}
//│ 	| Var _lh_eqExpr_Var_0⁰ => case _lh_eqExpr_arg2⁰ of {
//│ 		Var _lh_eqExpr_Var_0¹ => polyEq⁰(_lh_eqExpr_Var_0⁰, _lh_eqExpr_Var_0¹)
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqListExpr_lh_₁(_lh_eqListExpr_arg1⁰, _lh_eqListExpr_arg2⁰) = case _lh_eqListExpr_arg1⁰ of {
//│ 	LH_N  => case _lh_eqListExpr_arg2⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| LH_C _lh_eqListExpr_LH_C_0⁰ _lh_eqListExpr_LH_C_1⁰ => case _lh_eqListExpr_arg2⁰ of {
//│ 		LH_C _lh_eqListExpr_LH_C_0¹ _lh_eqListExpr_LH_C_1¹ => if eqExpr_lh_₁(_lh_eqListExpr_LH_C_0⁰, _lh_eqListExpr_LH_C_0¹) then eqListExpr_lh_₁(_lh_eqListExpr_LH_C_1⁰, _lh_eqListExpr_LH_C_1¹) else [False]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqno_lh_₁(_lh_eqno_arg1⁰) = case _lh_eqno_arg1⁰ of {
//│ 	Eqn _lh_eqno_Eqn_0⁰ _lh_eqno_Eqn_1⁰ => case _lh_eqno_Eqn_1⁰ of {
//│ 		LH_P2 _lh_eqno_LH_P2_0⁰ _lh_eqno_LH_P2_1⁰ => _lh_eqno_Eqn_0⁰}}
//│ def eqpr_lh_₁(_lh_eqpr_arg1⁰) = case _lh_eqpr_arg1⁰ of {
//│ 	Eqn _lh_eqpr_Eqn_0⁰ _lh_eqpr_Eqn_1⁰ => _lh_eqpr_Eqn_1⁰}
//│ def exists_lh_₁(_lh_exists_arg1⁰) = case _lh_exists_arg1⁰ of {
//│ 	Nothing  => [False]
//│ 	| _  => [True]}
//│ def expr_fold_lh_₁(_lh_expr_fold_arg1³, _lh_expr_fold_arg2³, _lh_expr_fold_arg3³) = case _lh_expr_fold_arg3³ of {
//│ 	Var _lh_expr_fold_Var_0³ => _lh_expr_fold_arg2³(_lh_expr_fold_Var_0³)
//│ 	| Func _lh_expr_fold_Func_0³ _lh_expr_fold_Func_1³ => _lh_expr_fold_arg1³(_lh_expr_fold_Func_0³, map_lh_₃(expr_fold_lh_₁(_lh_expr_fold_arg1³, _lh_expr_fold_arg2³), _lh_expr_fold_Func_1³))}
//│ def expr_fold_lh_₂(_lh_expr_fold_arg1², _lh_expr_fold_arg2², _lh_expr_fold_arg3²) = case _lh_expr_fold_arg3² of {
//│ 	Var _lh_expr_fold_Var_0² => _lh_expr_fold_arg2²(_lh_expr_fold_Var_0²)
//│ 	| Func _lh_expr_fold_Func_0² _lh_expr_fold_Func_1² => _lh_expr_fold_arg1²(_lh_expr_fold_Func_0², map_lh_₄(expr_fold_lh_₂(_lh_expr_fold_arg1², _lh_expr_fold_arg2²), _lh_expr_fold_Func_1²))}
//│ def expr_fold_lh_₃(_lh_expr_fold_arg1¹, _lh_expr_fold_arg2¹, _lh_expr_fold_arg3¹) = case _lh_expr_fold_arg3¹ of {
//│ 	Var _lh_expr_fold_Var_0¹ => _lh_expr_fold_arg2¹(_lh_expr_fold_Var_0¹)
//│ 	| Func _lh_expr_fold_Func_0¹ _lh_expr_fold_Func_1¹ => _lh_expr_fold_arg1¹(_lh_expr_fold_Func_0¹, map_lh_₆(expr_fold_lh_₃(_lh_expr_fold_arg1¹, _lh_expr_fold_arg2¹), _lh_expr_fold_Func_1¹))}
//│ def expr_fold_lh_₄(_lh_expr_fold_arg1⁰, _lh_expr_fold_arg2⁰, _lh_expr_fold_arg3⁰) = case _lh_expr_fold_arg3⁰ of {
//│ 	Var _lh_expr_fold_Var_0⁰ => _lh_expr_fold_arg2⁰(_lh_expr_fold_Var_0⁰)
//│ 	| Func _lh_expr_fold_Func_0⁰ _lh_expr_fold_Func_1⁰ => _lh_expr_fold_arg1⁰(_lh_expr_fold_Func_0⁰, map_lh_₇(expr_fold_lh_₄(_lh_expr_fold_arg1⁰, _lh_expr_fold_arg2⁰), _lh_expr_fold_Func_1⁰))}
//│ def filter_lh_₁(f⁰, ls¹) = case ls¹ of {
//│ 	LH_C h⁰ t¹ => if f⁰(h⁰) then [LH_C h⁰ filter_lh_₁(f⁰, t¹)] else filter_lh_₁(f⁰, t¹)
//│ 	| LH_N  => [LH_N]}
//│ def find'_lh_₁(_lh_find'_arg1⁰, _lh_find'_arg2⁰) = case _lh_find'_arg2⁰ of {
//│ 	Return _lh_find'_Return_0⁰ => _lh_find'_Return_0⁰
//│ 	| Switch _lh_find'_Switch_0⁰ _lh_find'_Switch_1⁰ => mappend_lh_₂(find_assoc_lh_₁(g_first_lh_₁(_lh_find'_arg1⁰), g_rest_lh_₁(_lh_find'_arg1⁰), _lh_find'_Switch_0⁰), find'_lh_₁(g_skip_lh_₁(_lh_find'_arg1⁰), _lh_find'_Switch_1⁰))}
//│ def find_assoc_lh_₁(_lh_find_assoc_arg1⁰, _lh_find_assoc_arg2⁰, _lh_find_assoc_arg3⁰) = case _lh_find_assoc_arg1⁰ of {
//│ 	Afunc _lh_find_assoc_Afunc_0⁰ => getOrElse_lh_₁(lift_lh_₆(find'_lh_₁(_lh_find_assoc_arg2⁰), assoc_lh_₁(_lh_find_assoc_arg3⁰, _lh_find_assoc_Afunc_0⁰)), [LH_N])
//│ 	| Avar  => [LH_N]}
//│ def find_lh_₁(_lh_find_arg1⁰, _lh_find_arg2⁰) = find'_lh_₁(g_init_lh_₁(_lh_find_arg1⁰), _lh_find_arg2⁰)
//│ def first_ok_lh_₁(_lh_first_ok_arg1⁰) = foldr_lh_₂(orElse_lh_₁, [Nothing], _lh_first_ok_arg1⁰)
//│ def foldr_lh_₁(f⁹, i⁵, ls¹⁵) = case ls¹⁵ of {
//│ 	LH_C h¹⁶ t¹⁷ => f⁹(h¹⁶, foldr_lh_₁(f⁹, i⁵, t¹⁷))
//│ 	| LH_N  => i⁵}
//│ def foldr_lh_₂(f⁸, i⁴, ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h¹⁴ t¹⁵ => f⁸(h¹⁴, foldr_lh_₂(f⁸, i⁴, t¹⁵))
//│ 	| LH_N  => i⁴}
//│ def foldr_lh_₃(f⁷, i³, ls¹³) = case ls¹³ of {
//│ 	LH_C h¹³ t¹⁴ => f⁷(h¹³, foldr_lh_₃(f⁷, i³, t¹⁴))
//│ 	| LH_N  => i³}
//│ def foldr_lh_₄(f⁶, i², ls¹²) = case ls¹² of {
//│ 	LH_C h¹² t¹³ => f⁶(h¹², foldr_lh_₄(f⁶, i², t¹³))
//│ 	| LH_N  => i²}
//│ def foldr_lh_₅(f³, i¹, ls⁷) = case ls⁷ of {
//│ 	LH_C h⁸ t⁹ => f³(h⁸, foldr_lh_₅(f³, i¹, t⁹))
//│ 	| LH_N  => i¹}
//│ def foldr_lh_₆(f², i⁰, ls⁶) = case ls⁶ of {
//│ 	LH_C h⁶ t⁷ => f²(h⁶, foldr_lh_₆(f², i⁰, t⁷))
//│ 	| LH_N  => i⁰}
//│ def fst_lh_₁(_lh_fst_arg1²) = case _lh_fst_arg1² of {
//│ 	LH_P2 _lh_fst_LH_P2_0² _lh_fst_LH_P2_1² => _lh_fst_LH_P2_0²}
//│ def fst_lh_₂(_lh_fst_arg1¹) = case _lh_fst_arg1¹ of {
//│ 	LH_P2 _lh_fst_LH_P2_0¹ _lh_fst_LH_P2_1¹ => _lh_fst_LH_P2_0¹}
//│ def fst_lh_₃(_lh_fst_arg1⁰) = case _lh_fst_arg1⁰ of {
//│ 	LH_P2 _lh_fst_LH_P2_0⁰ _lh_fst_LH_P2_1⁰ => _lh_fst_LH_P2_0⁰}
//│ def g_first_lh_₁(_lh_g_first_arg1⁰) = case _lh_g_first_arg1⁰ of {
//│ 	LH_C _lh_g_first_LH_C_0⁰ _lh_g_first_LH_C_1⁰ => case _lh_g_first_LH_C_0⁰ of {
//│ 		Func _lh_g_first_Func_0⁰ _lh_g_first_Func_1⁰ => [Afunc _lh_g_first_Func_0⁰]
//│ 		| Var _lh_g_first_Var_0⁰ => [Avar]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def g_init_lh_₁(_lh_g_init_arg1⁰) = [LH_C _lh_g_init_arg1⁰ [LH_N]]
//│ def g_rest_lh_₁(_lh_g_rest_arg1⁰) = case _lh_g_rest_arg1⁰ of {
//│ 	LH_C _lh_g_rest_LH_C_0⁰ _lh_g_rest_LH_C_1⁰ => case _lh_g_rest_LH_C_0⁰ of {
//│ 		Func _lh_g_rest_Func_0⁰ _lh_g_rest_Func_1⁰ => mappend_lh_₂(_lh_g_rest_Func_1⁰, _lh_g_rest_LH_C_1⁰)
//│ 		| Var _lh_g_rest_Var_0⁰ => _lh_g_rest_LH_C_1⁰
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def g_skip_lh_₁(_lh_g_skip_arg1⁰) = tail_lh_₁(_lh_g_skip_arg1⁰)
//│ def geRewrite_lh_₁(_lh_geRewrite_arg1³, _lh_geRewrite_arg2³, _lh_geRewrite_arg3³) = inList_lh_₁(_lh_geRewrite_arg1³([LH_P2 _lh_geRewrite_arg2³ _lh_geRewrite_arg3³]), [LH_C [Greater] [LH_C [Equal] [LH_N]]])
//│ def geRewrite_lh_₂(_lh_geRewrite_arg1², _lh_geRewrite_arg2², _lh_geRewrite_arg3²) = inList_lh_₂(_lh_geRewrite_arg1²([LH_P2 _lh_geRewrite_arg2² _lh_geRewrite_arg3²]), [LH_C [Greater] [LH_C [Equal] [LH_N]]])
//│ def geRewrite_lh_₃(_lh_geRewrite_arg1¹, _lh_geRewrite_arg2¹, _lh_geRewrite_arg3¹) = inList_lh_₃(_lh_geRewrite_arg1¹([LH_P2 _lh_geRewrite_arg2¹ _lh_geRewrite_arg3¹]), [LH_C [Greater] [LH_C [Equal] [LH_N]]])
//│ def geRewrite_lh_₄(_lh_geRewrite_arg1⁰, _lh_geRewrite_arg2⁰, _lh_geRewrite_arg3⁰) = inList_lh_₄(_lh_geRewrite_arg1⁰([LH_P2 _lh_geRewrite_arg2⁰ _lh_geRewrite_arg3⁰]), [LH_C [Greater] [LH_C [Equal] [LH_N]]])
//│ def getOrElse_lh_₁(_lh_getOrElse_arg1⁰, _lh_getOrElse_arg2⁰) = case _lh_getOrElse_arg1⁰ of {
//│ 	Just _lh_getOrElse_Just_0⁰ => _lh_getOrElse_Just_0⁰
//│ 	| Nothing  => _lh_getOrElse_arg2⁰}
//│ def inList_lh_₁(_lh_inList_arg1³, _lh_inList_arg2³) = case _lh_inList_arg2³ of {
//│ 	LH_C _lh_inList_LH_C_0³ _lh_inList_LH_C_1³ => if polyEq⁰(_lh_inList_arg1³, _lh_inList_LH_C_0³) then [True] else inList_lh_₁(_lh_inList_arg1³, _lh_inList_LH_C_1³)
//│ 	| LH_N  => [False]}
//│ def inList_lh_₂(_lh_inList_arg1², _lh_inList_arg2²) = case _lh_inList_arg2² of {
//│ 	LH_C _lh_inList_LH_C_0² _lh_inList_LH_C_1² => if polyEq⁰(_lh_inList_arg1², _lh_inList_LH_C_0²) then [True] else inList_lh_₂(_lh_inList_arg1², _lh_inList_LH_C_1²)
//│ 	| LH_N  => [False]}
//│ def inList_lh_₃(_lh_inList_arg1¹, _lh_inList_arg2¹) = case _lh_inList_arg2¹ of {
//│ 	LH_C _lh_inList_LH_C_0¹ _lh_inList_LH_C_1¹ => if polyEq⁰(_lh_inList_arg1¹, _lh_inList_LH_C_0¹) then [True] else inList_lh_₃(_lh_inList_arg1¹, _lh_inList_LH_C_1¹)
//│ 	| LH_N  => [False]}
//│ def inList_lh_₄(_lh_inList_arg1⁰, _lh_inList_arg2⁰) = case _lh_inList_arg2⁰ of {
//│ 	LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if polyEq⁰(_lh_inList_arg1⁰, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₄(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰)
//│ 	| LH_N  => [False]}
//│ def inside_lh_₁(_lh_inside_arg1⁰, _lh_inside_arg2⁰) = first_ok_lh_₁(
//│ 	let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => case _lh_listcomp_fun_ls_h⁸ of {
//│ 			LH_P2 _lh_inside_LH_P2_0⁰ _lh_inside_LH_P2_1⁰ => [LH_C lift_lh_₂(replace_lh_₁(_lh_inside_arg2⁰, _lh_inside_LH_P2_0⁰), _lh_inside_arg1⁰(_lh_inside_LH_P2_1⁰)) _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]
//│ 			| _  => _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁸(subterms_lh_₁(_lh_inside_arg2⁰)))
//│ def is_switch_lh_₁(_lh_is_switch_arg1⁰) = case _lh_is_switch_arg1⁰ of {
//│ 	Switch _lh_is_switch_Switch_0⁰ _lh_is_switch_Switch_1⁰ => [True]
//│ 	| Return _lh_is_switch_Return_0⁰ => [False]}
//│ def item_cost_lh_₁(_lh_item_cost_arg1⁰) = case _lh_item_cost_arg1⁰ of {
//│ 	Item _lh_item_cost_Item_0⁰ _lh_item_cost_Item_1⁰ => _lh_item_cost_Item_0⁰}
//│ def knuth_bendix1_lh_₁(_lh_knuth_bendix1_arg1⁰, _lh_knuth_bendix1_arg2⁰) = process_lh_₁(_lh_knuth_bendix1_arg1⁰, 1, [LH_N], empty_net_lh_₁, add_agenda_lh_₁(snd_lh_₁(_lh_knuth_bendix1_arg1⁰), _lh_knuth_bendix1_arg2⁰, [LH_N]))
//│ def knuth_bendix_lh_₁(_lh_knuth_bendix_arg1⁰, _lh_knuth_bendix_arg2⁰) = knuth_bendix1_lh_₁([LH_P2 _lh_knuth_bendix_arg1⁰ cost_lh_₁], _lh_knuth_bendix_arg2⁰)
//│ def lex_combine_lh_₁(_lh_lex_combine_arg1⁰, _lh_lex_combine_arg2⁰) = case _lh_lex_combine_arg1⁰ of {
//│ 	Equal  => _lh_lex_combine_arg2⁰
//│ 	| Greater  => [Greater]
//│ 	| Less  => [Less]
//│ 	| Unrelated  => [Unrelated]}
//│ def lex_ext_lh_₁(_lh_lex_ext_arg1⁰, _lh_lex_ext_arg2⁰) = case _lh_lex_ext_arg2⁰ of {
//│ 	LH_P2 _lh_lex_ext_LH_P2_0⁰ _lh_lex_ext_LH_P2_1⁰ => case _lh_lex_ext_LH_P2_0⁰ of {
//│ 		Func _lh_lex_ext_Func_0⁰ _lh_lex_ext_Func_1⁰ => case _lh_lex_ext_LH_P2_1⁰ of {
//│ 			Func _lh_lex_ext_Func_0¹ _lh_lex_ext_Func_1¹ => 
//│ 				let estimate⁰ = lexico_lh_₁(_lh_lex_ext_arg1⁰, [LH_P2 _lh_lex_ext_Func_1⁰ _lh_lex_ext_Func_1¹])
//│ 				in let confirm⁰ = (fun x⁷⁰ -> 
//│ 					let _lh_matchIdent¹⁶ = x⁷⁰
//│ 					in case _lh_matchIdent¹⁶ of {
//│ 						Equal  => [True]
//│ 						| Greater  => quant_lh_₆(all_lh_₄, ltRewrite_lh_₃(_lh_lex_ext_arg1⁰), [Func _lh_lex_ext_Func_0⁰ _lh_lex_ext_Func_1⁰], _lh_lex_ext_Func_1¹)
//│ 						| Less  => quant_lh_₈(all_lh_₅, ltRewrite_lh_₄(_lh_lex_ext_arg1⁰), [Func _lh_lex_ext_Func_0¹ _lh_lex_ext_Func_1¹], _lh_lex_ext_Func_1⁰)
//│ 						| Unrelated  => [False]})
//│ 				in if confirm⁰(estimate⁰) then estimate⁰ else if quant_lh_₇(any_lh_₄, geRewrite_lh_₃(_lh_lex_ext_arg1⁰), [Func _lh_lex_ext_Func_0¹ _lh_lex_ext_Func_1¹], _lh_lex_ext_Func_1⁰) then [Greater] else if quant_lh_₅(any_lh_₃, geRewrite_lh_₄(_lh_lex_ext_arg1⁰), [Func _lh_lex_ext_Func_0⁰ _lh_lex_ext_Func_1⁰], _lh_lex_ext_Func_1¹) then [Less] else [Unrelated]
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def lexico_lh_₁(_lh_lexico_arg1⁰, _lh_lexico_arg2⁰) = case _lh_lexico_arg2⁰ of {
//│ 	LH_P2 _lh_lexico_LH_P2_0⁰ _lh_lexico_LH_P2_1⁰ => case _lh_lexico_LH_P2_0⁰ of {
//│ 		LH_N  => case _lh_lexico_LH_P2_1⁰ of {
//│ 			LH_N  => [Equal]
//│ 			| LH_C _lh_lexico_LH_C_0⁰ _lh_lexico_LH_C_1⁰ => [Less]}
//│ 		| LH_C _lh_lexico_LH_C_0¹ _lh_lexico_LH_C_1¹ => case _lh_lexico_LH_P2_1⁰ of {
//│ 			LH_N  => [Greater]
//│ 			| LH_C _lh_lexico_LH_C_0² _lh_lexico_LH_C_1² => lex_combine_lh_₁(_lh_lexico_arg1⁰([LH_P2 _lh_lexico_LH_C_0¹ _lh_lexico_LH_C_0²]), lexico_lh_₁(_lh_lexico_arg1⁰, [LH_P2 _lh_lexico_LH_C_1¹ _lh_lexico_LH_C_1²]))}}}
//│ def lhs_lh_₁(_lh_lhs_arg1⁰) = case _lh_lhs_arg1⁰ of {
//│ 	Eqn _lh_lhs_Eqn_0⁰ _lh_lhs_Eqn_1⁰ => case _lh_lhs_Eqn_1⁰ of {
//│ 		LH_P2 _lh_lhs_LH_P2_0⁰ _lh_lhs_LH_P2_1⁰ => _lh_lhs_LH_P2_0⁰}}
//│ def lift_lh_₁(_lh_lift_arg1⁵, _lh_lift_arg2⁵) = case _lh_lift_arg2⁵ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁵ => [Just _lh_lift_arg1⁵(_lh_lift_Just_0⁵)]}
//│ def lift_lh_₂(_lh_lift_arg1⁴, _lh_lift_arg2⁴) = case _lh_lift_arg2⁴ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁴ => [Just _lh_lift_arg1⁴(_lh_lift_Just_0⁴)]}
//│ def lift_lh_₃(_lh_lift_arg1³, _lh_lift_arg2³) = case _lh_lift_arg2³ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0³ => [Just _lh_lift_arg1³(_lh_lift_Just_0³)]}
//│ def lift_lh_₄(_lh_lift_arg1², _lh_lift_arg2²) = case _lh_lift_arg2² of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0² => [Just _lh_lift_arg1²(_lh_lift_Just_0²)]}
//│ def lift_lh_₅(_lh_lift_arg1¹, _lh_lift_arg2¹) = case _lh_lift_arg2¹ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0¹ => [Just _lh_lift_arg1¹(_lh_lift_Just_0¹)]}
//│ def lift_lh_₆(_lh_lift_arg1⁰, _lh_lift_arg2⁰) = case _lh_lift_arg2⁰ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁰ => [Just _lh_lift_arg1⁰(_lh_lift_Just_0⁰)]}
//│ def list_of_lh_₁(_lh_list_of_arg1⁵, _lh_list_of_arg2⁵) = 
//│ 	let p'⁵ = lazy⁰(seq2_lh_₅(mk_cons_lh_₅, _lh_list_of_arg1⁵, orElseMap_lh_₁₂(seq2Lzq_lh_₁((fun x⁵³ -> (fun y⁶ -> y⁶)), look_for_lh_₁₄(_lh_list_of_arg2⁵), p'⁵), empty_lh_₅)))
//│ 	in force⁰(p'⁵)
//│ def list_of_lh_₂(_lh_list_of_arg1⁴, _lh_list_of_arg2⁴) = 
//│ 	let p'⁴ = lazy⁰(seq2_lh_₆(mk_cons_lh_₆, _lh_list_of_arg1⁴, orElseMap_lh_₁₄(seq2Lzq_lh_₂((fun x⁵⁰ -> (fun y⁵ -> y⁵)), look_for_lh_₁₇(_lh_list_of_arg2⁴), p'⁴), empty_lh_₆)))
//│ 	in force⁰(p'⁴)
//│ def list_of_lh_₃(_lh_list_of_arg1³, _lh_list_of_arg2³) = 
//│ 	let p'³ = lazy⁰(seq2_lh_₇(mk_cons_lh_₇, _lh_list_of_arg1³, orElseMap_lh_₁₅(seq2Lzq_lh_₂((fun x⁴³ -> (fun y⁴ -> y⁴)), look_for_lh_₁₉(_lh_list_of_arg2³), p'³), empty_lh_₆)))
//│ 	in force⁰(p'³)
//│ def list_of_lh_₄(_lh_list_of_arg1², _lh_list_of_arg2²) = 
//│ 	let p'² = lazy⁰(seq2_lh_₇(mk_cons_lh_₇, _lh_list_of_arg1², orElseMap_lh_₁₅(seq2Lzq_lh_₂((fun x³³ -> (fun y³ -> y³)), look_for_lh_₁₉(_lh_list_of_arg2²), p'²), empty_lh_₆)))
//│ 	in force⁰(p'²)
//│ def list_of_lh_₅(_lh_list_of_arg1¹, _lh_list_of_arg2¹) = 
//│ 	let p'¹ = lazy⁰(seq2_lh_₇(mk_cons_lh_₇, _lh_list_of_arg1¹, orElseMap_lh_₁₅(seq2Lzq_lh_₂((fun x³² -> (fun y² -> y²)), look_for_lh_₁₉(_lh_list_of_arg2¹), p'¹), empty_lh_₆)))
//│ 	in force⁰(p'¹)
//│ def list_of_lh_₆(_lh_list_of_arg1⁰, _lh_list_of_arg2⁰) = 
//│ 	let p'⁰ = lazy⁰(seq2_lh_₇(mk_cons_lh_₇, _lh_list_of_arg1⁰, orElseMap_lh_₁₅(seq2Lzq_lh_₂((fun x²⁷ -> (fun y¹ -> y¹)), look_for_lh_₁₉(_lh_list_of_arg2⁰), p'⁰), empty_lh_₆)))
//│ 	in force⁰(p'⁰)
//│ def listify_lh_₁(_lh_listify_arg1⁰) = getOrElse_lh_₁(lift_lh_₆(box_lh_₁, _lh_listify_arg1⁰), [LH_N])
//│ def look_for_lh_₁(_lh_look_for_arg1¹⁸) = sp_lh_₃(pchar_lh_₁((fun x⁵⁸ -> polyEq⁰(x⁵⁸, _lh_look_for_arg1¹⁸))))
//│ def look_for_lh_₁₀(_lh_look_for_arg1⁹) = sp_lh_₈(pchar_lh_₄((fun x³¹ -> polyEq⁰(x³¹, _lh_look_for_arg1⁹))))
//│ def look_for_lh_₁₁(_lh_look_for_arg1⁸) = sp_lh_₈(pchar_lh_₄((fun x²⁹ -> polyEq⁰(x²⁹, _lh_look_for_arg1⁸))))
//│ def look_for_lh_₁₂(_lh_look_for_arg1⁷) = sp_lh_₈(pchar_lh_₄((fun x²⁸ -> polyEq⁰(x²⁸, _lh_look_for_arg1⁷))))
//│ def look_for_lh_₁₃(_lh_look_for_arg1⁶) = sp_lh_₈(pchar_lh_₄((fun x²⁶ -> polyEq⁰(x²⁶, _lh_look_for_arg1⁶))))
//│ def look_for_lh_₁₄(_lh_look_for_arg1⁵) = sp_lh_₈(pchar_lh_₄((fun x¹⁶ -> polyEq⁰(x¹⁶, _lh_look_for_arg1⁵))))
//│ def look_for_lh_₁₅(_lh_look_for_arg1⁴) = sp_lh_₈(pchar_lh_₄((fun x¹² -> polyEq⁰(x¹², _lh_look_for_arg1⁴))))
//│ def look_for_lh_₁₆(_lh_look_for_arg1³) = sp_lh_₈(pchar_lh_₄((fun x¹¹ -> polyEq⁰(x¹¹, _lh_look_for_arg1³))))
//│ def look_for_lh_₁₇(_lh_look_for_arg1²) = sp_lh_₈(pchar_lh_₄((fun x⁸ -> polyEq⁰(x⁸, _lh_look_for_arg1²))))
//│ def look_for_lh_₁₈(_lh_look_for_arg1¹) = sp_lh_₈(pchar_lh_₄((fun x⁵ -> polyEq⁰(x⁵, _lh_look_for_arg1¹))))
//│ def look_for_lh_₁₉(_lh_look_for_arg1⁰) = sp_lh_₈(pchar_lh_₄((fun x⁴ -> polyEq⁰(x⁴, _lh_look_for_arg1⁰))))
//│ def look_for_lh_₂(_lh_look_for_arg1¹⁷) = sp_lh_₄(pchar_lh_₂((fun x⁵⁴ -> polyEq⁰(x⁵⁴, _lh_look_for_arg1¹⁷))))
//│ def look_for_lh_₃(_lh_look_for_arg1¹⁶) = sp_lh_₆(pchar_lh_₃((fun x⁵² -> polyEq⁰(x⁵², _lh_look_for_arg1¹⁶))))
//│ def look_for_lh_₄(_lh_look_for_arg1¹⁵) = sp_lh_₈(pchar_lh_₄((fun x⁴⁹ -> polyEq⁰(x⁴⁹, _lh_look_for_arg1¹⁵))))
//│ def look_for_lh_₅(_lh_look_for_arg1¹⁴) = sp_lh_₈(pchar_lh_₄((fun x⁴⁷ -> polyEq⁰(x⁴⁷, _lh_look_for_arg1¹⁴))))
//│ def look_for_lh_₆(_lh_look_for_arg1¹³) = sp_lh_₈(pchar_lh_₄((fun x⁴⁵ -> polyEq⁰(x⁴⁵, _lh_look_for_arg1¹³))))
//│ def look_for_lh_₇(_lh_look_for_arg1¹²) = sp_lh_₈(pchar_lh_₄((fun x⁴⁴ -> polyEq⁰(x⁴⁴, _lh_look_for_arg1¹²))))
//│ def look_for_lh_₈(_lh_look_for_arg1¹¹) = sp_lh_₈(pchar_lh_₄((fun x³⁶ -> polyEq⁰(x³⁶, _lh_look_for_arg1¹¹))))
//│ def look_for_lh_₉(_lh_look_for_arg1¹⁰) = sp_lh_₈(pchar_lh_₄((fun x³⁴ -> polyEq⁰(x³⁴, _lh_look_for_arg1¹⁰))))
//│ def ltRewrite_lh_₁(_lh_ltRewrite_arg1³, _lh_ltRewrite_arg2³, _lh_ltRewrite_arg3³) = polyEq⁰(_lh_ltRewrite_arg1³([LH_P2 _lh_ltRewrite_arg2³ _lh_ltRewrite_arg3³]), [Less])
//│ def ltRewrite_lh_₂(_lh_ltRewrite_arg1², _lh_ltRewrite_arg2², _lh_ltRewrite_arg3²) = polyEq⁰(_lh_ltRewrite_arg1²([LH_P2 _lh_ltRewrite_arg2² _lh_ltRewrite_arg3²]), [Less])
//│ def ltRewrite_lh_₃(_lh_ltRewrite_arg1¹, _lh_ltRewrite_arg2¹, _lh_ltRewrite_arg3¹) = polyEq⁰(_lh_ltRewrite_arg1¹([LH_P2 _lh_ltRewrite_arg2¹ _lh_ltRewrite_arg3¹]), [Less])
//│ def ltRewrite_lh_₄(_lh_ltRewrite_arg1⁰, _lh_ltRewrite_arg2⁰, _lh_ltRewrite_arg3⁰) = polyEq⁰(_lh_ltRewrite_arg1⁰([LH_P2 _lh_ltRewrite_arg2⁰ _lh_ltRewrite_arg3⁰]), [Less])
//│ def map_dnet_lh_₁(_lh_map_dnet_arg1⁰, _lh_map_dnet_arg2⁰) = case _lh_map_dnet_arg2⁰ of {
//│ 	Switch _lh_map_dnet_Switch_0⁰ _lh_map_dnet_Switch_1⁰ => [Switch map_lh_₇(cross_lh_₂((fun x¹ -> x¹), map_dnet_lh_₁(_lh_map_dnet_arg1⁰)), _lh_map_dnet_Switch_0⁰) map_dnet_lh_₁(_lh_map_dnet_arg1⁰, _lh_map_dnet_Switch_1⁰)]
//│ 	| Return _lh_map_dnet_Return_0⁰ => [Return _lh_map_dnet_arg1⁰(_lh_map_dnet_Return_0⁰)]}
//│ def map_lh_₁(f¹⁴, ls²⁰) = case ls²⁰ of {
//│ 	LH_C h²⁰ t²³ => [LH_C f¹⁴(h²⁰) map_lh_₁(f¹⁴, t²³)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f¹², ls¹⁹) = case ls¹⁹ of {
//│ 	LH_C h¹⁹ t²¹ => [LH_C f¹²(h¹⁹) map_lh_₂(f¹², t²¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f¹¹, ls¹⁷) = case ls¹⁷ of {
//│ 	LH_C h¹⁸ t¹⁹ => [LH_C f¹¹(h¹⁸) map_lh_₃(f¹¹, t¹⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f¹⁰, ls¹⁶) = case ls¹⁶ of {
//│ 	LH_C h¹⁷ t¹⁸ => [LH_C f¹⁰(h¹⁷) map_lh_₄(f¹⁰, t¹⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f⁵, ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h¹¹ t¹² => [LH_C f⁵(h¹¹) map_lh_₅(f⁵, t¹²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f⁴, ls⁸) = case ls⁸ of {
//│ 	LH_C h⁹ t¹⁰ => [LH_C f⁴(h⁹) map_lh_₆(f⁴, t¹⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₇(f¹, ls⁵) = case ls⁵ of {
//│ 	LH_C h⁵ t⁶ => [LH_C f¹(h⁵) map_lh_₇(f¹, t⁶)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs¹², ys³) = case xs¹² of {
//│ 	LH_C h¹⁵ t¹⁶ => [LH_C h¹⁵ mappend_lh_₁(t¹⁶, ys³)]
//│ 	| LH_N  => ys³}
//│ def mappend_lh_₂(xs⁷, ys¹) = case xs⁷ of {
//│ 	LH_C h⁷ t⁸ => [LH_C h⁷ mappend_lh_₂(t⁸, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def match'_lh_₁(_lh_match'_arg1⁰, _lh_match'_arg2⁰) = case _lh_match'_arg2⁰ of {
//│ 	LH_P2 _lh_match'_LH_P2_0⁰ _lh_match'_LH_P2_1⁰ => case _lh_match'_LH_P2_0⁰ of {
//│ 		Var _lh_match'_Var_0⁰ => 
//│ 			let u⁰ = assoc_lh_₁(_lh_match'_arg1⁰, _lh_match'_Var_0⁰)
//│ 			in if not⁰(exists_lh_₁(u⁰)) then succeed_lh_₁([LH_C [LH_P2 _lh_match'_Var_0⁰ _lh_match'_LH_P2_1⁰] _lh_match'_arg1⁰]) else if eqExpr_lh_₁(the_lh_₃(u⁰), _lh_match'_LH_P2_1⁰) then succeed_lh_₁(_lh_match'_arg1⁰) else croak_lh_₁
//│ 		| Func _lh_match'_Func_0⁰ _lh_match'_Func_1⁰ => case _lh_match'_LH_P2_1⁰ of {
//│ 			Func _lh_match'_Func_0¹ _lh_match'_Func_1¹ => if polyEq⁰(_lh_match'_Func_0⁰, _lh_match'_Func_0¹) then prop_fold_lh_₁(match'_lh_₁, _lh_match'_arg1⁰, zip_lh_₁(_lh_match'_Func_1⁰, _lh_match'_Func_1¹)) else croak_lh_₁
//│ 			| Var _lh_match'_Var_0¹ => croak_lh_₁
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def match_lh_₁(_lh_match_arg1⁰, _lh_match_arg2⁰) = match'_lh_₁([LH_N], [LH_P2 _lh_match_arg1⁰ _lh_match_arg2⁰])
//│ def maybeX_lh_₁(_lh_maybeX_arg1⁰, _lh_maybeX_arg2⁰) = if _lh_maybeX_arg1⁰ then [Just _lh_maybeX_arg2⁰] else [Nothing]
//│ def mk_cons_lh_₁(_lh_mk_cons_arg1⁶, _lh_mk_cons_arg2⁶) = case _lh_mk_cons_arg2⁶ of {
//│ 	List _lh_mk_cons_List_0⁶ => [List [LH_C _lh_mk_cons_arg1⁶ _lh_mk_cons_List_0⁶]]
//│ 	| _  => error⁰}
//│ def mk_cons_lh_₂(_lh_mk_cons_arg1⁵, _lh_mk_cons_arg2⁵) = case _lh_mk_cons_arg2⁵ of {
//│ 	List _lh_mk_cons_List_0⁵ => [List [LH_C _lh_mk_cons_arg1⁵ _lh_mk_cons_List_0⁵]]
//│ 	| _  => error⁰}
//│ def mk_cons_lh_₃(_lh_mk_cons_arg1⁴, _lh_mk_cons_arg2⁴) = case _lh_mk_cons_arg2⁴ of {
//│ 	List _lh_mk_cons_List_0⁴ => [List [LH_C _lh_mk_cons_arg1⁴ _lh_mk_cons_List_0⁴]]
//│ 	| _  => error⁰}
//│ def mk_cons_lh_₄(_lh_mk_cons_arg1³, _lh_mk_cons_arg2³) = case _lh_mk_cons_arg2³ of {
//│ 	List _lh_mk_cons_List_0³ => [List [LH_C _lh_mk_cons_arg1³ _lh_mk_cons_List_0³]]
//│ 	| _  => error⁰}
//│ def mk_cons_lh_₅(_lh_mk_cons_arg1², _lh_mk_cons_arg2²) = case _lh_mk_cons_arg2² of {
//│ 	List _lh_mk_cons_List_0² => [List [LH_C _lh_mk_cons_arg1² _lh_mk_cons_List_0²]]
//│ 	| _  => error⁰}
//│ def mk_cons_lh_₆(_lh_mk_cons_arg1¹, _lh_mk_cons_arg2¹) = case _lh_mk_cons_arg2¹ of {
//│ 	List _lh_mk_cons_List_0¹ => [List [LH_C _lh_mk_cons_arg1¹ _lh_mk_cons_List_0¹]]
//│ 	| _  => error⁰}
//│ def mk_cons_lh_₇(_lh_mk_cons_arg1⁰, _lh_mk_cons_arg2⁰) = case _lh_mk_cons_arg2⁰ of {
//│ 	List _lh_mk_cons_List_0⁰ => [List [LH_C _lh_mk_cons_arg1⁰ _lh_mk_cons_List_0⁰]]
//│ 	| _  => error⁰}
//│ def mk_crit_lh_₁(_lh_mk_crit_arg1⁰, _lh_mk_crit_arg2⁰, _lh_mk_crit_arg3⁰) = case _lh_mk_crit_arg1⁰ of {
//│ 	Eqn _lh_mk_crit_Eqn_0⁰ _lh_mk_crit_Eqn_1⁰ => case _lh_mk_crit_Eqn_1⁰ of {
//│ 		LH_P2 _lh_mk_crit_LH_P2_0⁰ _lh_mk_crit_LH_P2_1⁰ => case _lh_mk_crit_arg2⁰ of {
//│ 			Eqn _lh_mk_crit_Eqn_0¹ _lh_mk_crit_Eqn_1¹ => case _lh_mk_crit_Eqn_1¹ of {
//│ 				LH_P2 _lh_mk_crit_LH_P2_0¹ _lh_mk_crit_LH_P2_1¹ => case _lh_mk_crit_arg3⁰ of {
//│ 					LH_P2 _lh_mk_crit_LH_P2_0² _lh_mk_crit_LH_P2_1² => [LH_P2 sub_lh_₁(replace_lh_₁(_lh_mk_crit_LH_P2_0¹, _lh_mk_crit_LH_P2_0², _lh_mk_crit_LH_P2_1⁰), _lh_mk_crit_LH_P2_1²) sub_lh_₁(_lh_mk_crit_LH_P2_1¹, _lh_mk_crit_LH_P2_1²)]}}}}}
//│ def mk_item_lh_₁(_lh_mk_item_arg1⁰, _lh_mk_item_arg2⁰) = [Item _lh_mk_item_arg1⁰(_lh_mk_item_arg2⁰) _lh_mk_item_arg2⁰]
//│ def mk_list_lh_₁(_lh_mk_list_arg1⁴, _lh_mk_list_arg2⁴) = case _lh_mk_list_arg2⁴ of {
//│ 	List _lh_mk_list_List_0⁴ => _lh_mk_list_arg1⁴(_lh_mk_list_List_0⁴)
//│ 	| _  => error⁰}
//│ def mk_list_lh_₂(_lh_mk_list_arg1³, _lh_mk_list_arg2³) = case _lh_mk_list_arg2³ of {
//│ 	List _lh_mk_list_List_0³ => _lh_mk_list_arg1³(_lh_mk_list_List_0³)
//│ 	| _  => error⁰}
//│ def mk_list_lh_₃(_lh_mk_list_arg1², _lh_mk_list_arg2²) = case _lh_mk_list_arg2² of {
//│ 	List _lh_mk_list_List_0² => _lh_mk_list_arg1²(_lh_mk_list_List_0²)
//│ 	| _  => error⁰}
//│ def mk_list_lh_₄(_lh_mk_list_arg1¹, _lh_mk_list_arg2¹) = case _lh_mk_list_arg2¹ of {
//│ 	List _lh_mk_list_List_0¹ => _lh_mk_list_arg1¹(_lh_mk_list_List_0¹)
//│ 	| _  => error⁰}
//│ def mk_list_lh_₅(_lh_mk_list_arg1⁰, _lh_mk_list_arg2⁰) = case _lh_mk_list_arg2⁰ of {
//│ 	List _lh_mk_list_List_0⁰ => _lh_mk_list_arg1⁰(_lh_mk_list_List_0⁰)
//│ 	| _  => error⁰}
//│ def modify_lh_₁(_lh_modify_arg1⁰, _lh_modify_arg2⁰, _lh_modify_arg3⁰) = case _lh_modify_arg1⁰ of {
//│ 	LH_C _lh_modify_LH_C_0⁰ _lh_modify_LH_C_1⁰ => case _lh_modify_arg2⁰ of {
//│ 		0  => [LH_C _lh_modify_arg3⁰(_lh_modify_LH_C_0⁰) _lh_modify_LH_C_1⁰]
//│ 		| _  => [LH_C _lh_modify_LH_C_0⁰ modify_lh_₁(_lh_modify_LH_C_1⁰, (_lh_modify_arg2⁰ - 1), _lh_modify_arg3⁰)]}
//│ 	| _  => error⁰}
//│ def num_order_lh_₁(_lh_num_order_arg1⁰) = case _lh_num_order_arg1⁰ of {
//│ 	LH_P2 _lh_num_order_LH_P2_0⁰ _lh_num_order_LH_P2_1⁰ => if (_lh_num_order_LH_P2_0⁰ > _lh_num_order_LH_P2_1⁰) then [Greater] else if (_lh_num_order_LH_P2_0⁰ < _lh_num_order_LH_P2_1⁰) then [Less] else [Equal]}
//│ def occurs_lh_₁(_lh_occurs_arg1¹) = expr_fold_lh_₁((fun dum⁴ -> or_lh_₁), (fun x⁶⁶ -> polyEq⁰(x⁶⁶, _lh_occurs_arg1¹)))
//│ def occurs_lh_₂(_lh_occurs_arg1⁰) = expr_fold_lh_₂((fun dum³ -> or_lh_₂), (fun x⁶⁴ -> polyEq⁰(x⁶⁴, _lh_occurs_arg1⁰)))
//│ def opsym_lh_₁(_lh_opsym_arg1¹) = (fun x⁴¹ -> inList_lh_₄(x⁴¹, [LH_C '*' [LH_C '+' [LH_C '%' [LH_C '@' [LH_C '-' [LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]]]]]]))(_lh_opsym_arg1¹)
//│ def opsym_lh_₂(_lh_opsym_arg1⁰) = (fun x³⁹ -> inList_lh_₄(x³⁹, [LH_C '*' [LH_C '+' [LH_C '%' [LH_C '@' [LH_C '-' [LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]]]]]]))(_lh_opsym_arg1⁰)
//│ def orElseMap_lh_₁(_lh_orElseMap_arg1¹⁴, _lh_orElseMap_arg2¹⁴, _lh_orElseMap_arg3¹⁴) = orElse_lh_₂(_lh_orElseMap_arg1¹⁴(_lh_orElseMap_arg3¹⁴), _lh_orElseMap_arg2¹⁴(_lh_orElseMap_arg3¹⁴))
//│ def orElseMap_lh_₁₀(_lh_orElseMap_arg1⁵, _lh_orElseMap_arg2⁵, _lh_orElseMap_arg3⁵) = orElse_lh_₆(_lh_orElseMap_arg1⁵(_lh_orElseMap_arg3⁵), _lh_orElseMap_arg2⁵(_lh_orElseMap_arg3⁵))
//│ def orElseMap_lh_₁₁(_lh_orElseMap_arg1⁴, _lh_orElseMap_arg2⁴, _lh_orElseMap_arg3⁴) = orElse_lh_₆(_lh_orElseMap_arg1⁴(_lh_orElseMap_arg3⁴), _lh_orElseMap_arg2⁴(_lh_orElseMap_arg3⁴))
//│ def orElseMap_lh_₁₂(_lh_orElseMap_arg1³, _lh_orElseMap_arg2³, _lh_orElseMap_arg3³) = orElse_lh_₆(_lh_orElseMap_arg1³(_lh_orElseMap_arg3³), _lh_orElseMap_arg2³(_lh_orElseMap_arg3³))
//│ def orElseMap_lh_₁₃(_lh_orElseMap_arg1², _lh_orElseMap_arg2², _lh_orElseMap_arg3²) = orElse_lh_₆(_lh_orElseMap_arg1²(_lh_orElseMap_arg3²), _lh_orElseMap_arg2²(_lh_orElseMap_arg3²))
//│ def orElseMap_lh_₁₄(_lh_orElseMap_arg1¹, _lh_orElseMap_arg2¹, _lh_orElseMap_arg3¹) = orElse_lh_₆(_lh_orElseMap_arg1¹(_lh_orElseMap_arg3¹), _lh_orElseMap_arg2¹(_lh_orElseMap_arg3¹))
//│ def orElseMap_lh_₁₅(_lh_orElseMap_arg1⁰, _lh_orElseMap_arg2⁰, _lh_orElseMap_arg3⁰) = orElse_lh_₆(_lh_orElseMap_arg1⁰(_lh_orElseMap_arg3⁰), _lh_orElseMap_arg2⁰(_lh_orElseMap_arg3⁰))
//│ def orElseMap_lh_₂(_lh_orElseMap_arg1¹³, _lh_orElseMap_arg2¹³, _lh_orElseMap_arg3¹³) = orElse_lh_₃(_lh_orElseMap_arg1¹³(_lh_orElseMap_arg3¹³), _lh_orElseMap_arg2¹³(_lh_orElseMap_arg3¹³))
//│ def orElseMap_lh_₃(_lh_orElseMap_arg1¹², _lh_orElseMap_arg2¹², _lh_orElseMap_arg3¹²) = orElse_lh_₄(_lh_orElseMap_arg1¹²(_lh_orElseMap_arg3¹²), _lh_orElseMap_arg2¹²(_lh_orElseMap_arg3¹²))
//│ def orElseMap_lh_₄(_lh_orElseMap_arg1¹¹, _lh_orElseMap_arg2¹¹, _lh_orElseMap_arg3¹¹) = orElse_lh_₅(_lh_orElseMap_arg1¹¹(_lh_orElseMap_arg3¹¹), _lh_orElseMap_arg2¹¹(_lh_orElseMap_arg3¹¹))
//│ def orElseMap_lh_₅(_lh_orElseMap_arg1¹⁰, _lh_orElseMap_arg2¹⁰, _lh_orElseMap_arg3¹⁰) = orElse_lh_₆(_lh_orElseMap_arg1¹⁰(_lh_orElseMap_arg3¹⁰), _lh_orElseMap_arg2¹⁰(_lh_orElseMap_arg3¹⁰))
//│ def orElseMap_lh_₆(_lh_orElseMap_arg1⁹, _lh_orElseMap_arg2⁹, _lh_orElseMap_arg3⁹) = orElse_lh_₆(_lh_orElseMap_arg1⁹(_lh_orElseMap_arg3⁹), _lh_orElseMap_arg2⁹(_lh_orElseMap_arg3⁹))
//│ def orElseMap_lh_₇(_lh_orElseMap_arg1⁸, _lh_orElseMap_arg2⁸, _lh_orElseMap_arg3⁸) = orElse_lh_₆(_lh_orElseMap_arg1⁸(_lh_orElseMap_arg3⁸), _lh_orElseMap_arg2⁸(_lh_orElseMap_arg3⁸))
//│ def orElseMap_lh_₈(_lh_orElseMap_arg1⁷, _lh_orElseMap_arg2⁷, _lh_orElseMap_arg3⁷) = orElse_lh_₆(_lh_orElseMap_arg1⁷(_lh_orElseMap_arg3⁷), _lh_orElseMap_arg2⁷(_lh_orElseMap_arg3⁷))
//│ def orElseMap_lh_₉(_lh_orElseMap_arg1⁶, _lh_orElseMap_arg2⁶, _lh_orElseMap_arg3⁶) = orElse_lh_₆(_lh_orElseMap_arg1⁶(_lh_orElseMap_arg3⁶), _lh_orElseMap_arg2⁶(_lh_orElseMap_arg3⁶))
//│ def orElse_lh_₁(_lh_orElse_arg1⁵, _lh_orElse_arg2⁵) = case _lh_orElse_arg1⁵ of {
//│ 	Nothing  => _lh_orElse_arg2⁵
//│ 	| _  => _lh_orElse_arg1⁵}
//│ def orElse_lh_₂(_lh_orElse_arg1⁴, _lh_orElse_arg2⁴) = case _lh_orElse_arg1⁴ of {
//│ 	Nothing  => _lh_orElse_arg2⁴
//│ 	| _  => _lh_orElse_arg1⁴}
//│ def orElse_lh_₃(_lh_orElse_arg1³, _lh_orElse_arg2³) = case _lh_orElse_arg1³ of {
//│ 	Nothing  => _lh_orElse_arg2³
//│ 	| _  => _lh_orElse_arg1³}
//│ def orElse_lh_₄(_lh_orElse_arg1², _lh_orElse_arg2²) = case _lh_orElse_arg1² of {
//│ 	Nothing  => _lh_orElse_arg2²
//│ 	| _  => _lh_orElse_arg1²}
//│ def orElse_lh_₅(_lh_orElse_arg1¹, _lh_orElse_arg2¹) = case _lh_orElse_arg1¹ of {
//│ 	Nothing  => _lh_orElse_arg2¹
//│ 	| _  => _lh_orElse_arg1¹}
//│ def orElse_lh_₆(_lh_orElse_arg1⁰, _lh_orElse_arg2⁰) = case _lh_orElse_arg1⁰ of {
//│ 	Nothing  => _lh_orElse_arg2⁰
//│ 	| _  => _lh_orElse_arg1⁰}
//│ def or_lh_₁(_lh_or_arg1¹) = case _lh_or_arg1¹ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_or_LH_C_0¹ _lh_or_LH_C_1¹ => if _lh_or_LH_C_0¹ then [True] else or_lh_₁(_lh_or_LH_C_1¹)}
//│ def or_lh_₂(_lh_or_arg1⁰) = case _lh_or_arg1⁰ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_or_LH_C_0⁰ _lh_or_LH_C_1⁰ => if _lh_or_LH_C_0⁰ then [True] else or_lh_₂(_lh_or_LH_C_1⁰)}
//│ def p_eqn_lh_₁(_lh_p_eqn_arg1⁰) = seQ_lh_₃(q_eqn_lh_₁, [LH_C p_expr_lh_₄ [LH_C look_for_lh_₁('=') [LH_C p_expr_lh_₃ [LH_N]]]], _lh_p_eqn_arg1⁰)
//│ def p_expr_lh_₁(_lh_p_expr_arg1³) = orElseMap_lh_₁(seQ_lh_₁(q_op_lh_₁, [LH_C p_term_lh_₃ [LH_C p_op_lh_₁ [LH_C p_term_lh_₂ [LH_N]]]]), p_term_lh_₁, _lh_p_expr_arg1³)
//│ def p_expr_lh_₂(_lh_p_expr_arg1²) = orElseMap_lh_₂(seQ_lh_₂(q_op_lh_₂, [LH_C p_term_lh_₄ [LH_C p_op_lh_₂ [LH_C p_term_lh_₆ [LH_N]]]]), p_term_lh_₅, _lh_p_expr_arg1²)
//│ def p_expr_lh_₃(_lh_p_expr_arg1¹) = orElseMap_lh_₁₀(seQ_lh_₁₀(q_op_lh_₃, [LH_C p_term_lh_₉ [LH_C p_op_lh_₃ [LH_C p_term_lh_₈ [LH_N]]]]), p_term_lh_₇, _lh_p_expr_arg1¹)
//│ def p_expr_lh_₄(_lh_p_expr_arg1⁰) = orElseMap_lh_₁₁(seQ_lh_₁₁(q_op_lh_₄, [LH_C p_term_lh_₁₂ [LH_C p_op_lh_₄ [LH_C p_term_lh_₁₀ [LH_N]]]]), p_term_lh_₁₁, _lh_p_expr_arg1⁰)
//│ def p_ident_lh_₁(_lh_p_ident_arg1⁵) = sp_lh_₅(string_of_lh_₃(alphanum_lh_₁), _lh_p_ident_arg1⁵)
//│ def p_ident_lh_₂(_lh_p_ident_arg1⁴) = sp_lh_₇(string_of_lh_₄(alphanum_lh_₂), _lh_p_ident_arg1⁴)
//│ def p_ident_lh_₃(_lh_p_ident_arg1³) = sp_lh_₈(string_of_lh_₄(alphanum_lh_₂), _lh_p_ident_arg1³)
//│ def p_ident_lh_₄(_lh_p_ident_arg1²) = sp_lh_₈(string_of_lh_₄(alphanum_lh_₂), _lh_p_ident_arg1²)
//│ def p_ident_lh_₅(_lh_p_ident_arg1¹) = sp_lh_₈(string_of_lh_₄(alphanum_lh_₂), _lh_p_ident_arg1¹)
//│ def p_ident_lh_₆(_lh_p_ident_arg1⁰) = sp_lh_₈(string_of_lh_₄(alphanum_lh_₂), _lh_p_ident_arg1⁰)
//│ def p_name_lh_₁(_lh_p_name_arg1¹) = build_lh_₅(q_name_lh_₁, p_ident_lh_₆, _lh_p_name_arg1¹)
//│ def p_name_lh_₂(_lh_p_name_arg1⁰) = build_lh_₅(q_name_lh_₁, p_ident_lh_₆, _lh_p_name_arg1⁰)
//│ def p_op_lh_₁(_lh_p_op_arg1³) = sp_lh_₁(string_of_lh_₁(opsym_lh_₁), _lh_p_op_arg1³)
//│ def p_op_lh_₂(_lh_p_op_arg1²) = sp_lh_₂(string_of_lh_₂(opsym_lh_₂), _lh_p_op_arg1²)
//│ def p_op_lh_₃(_lh_p_op_arg1¹) = sp_lh_₈(string_of_lh_₄(opsym_lh_₂), _lh_p_op_arg1¹)
//│ def p_op_lh_₄(_lh_p_op_arg1⁰) = sp_lh_₈(string_of_lh_₄(opsym_lh_₂), _lh_p_op_arg1⁰)
//│ def p_prim_lh_₁(_lh_p_prim_arg1⁵) = orElseMap_lh_₁₃(p_name_lh_₁, seQ_lh_₁₂((fun x⁵¹ -> atIndex_lh_₁(1, x⁵¹)), [LH_C look_for_lh_₁₅('(') [LH_C p_expr_lh_₁ [LH_C look_for_lh_₁₆(')') [LH_N]]]]), _lh_p_prim_arg1⁵)
//│ def p_prim_lh_₂(_lh_p_prim_arg1⁴) = orElseMap_lh_₁₅(p_name_lh_₂, seQ_lh_₁₃((fun x⁴⁸ -> atIndex_lh_₂(1, x⁴⁸)), [LH_C look_for_lh_₁₈('(') [LH_C p_expr_lh_₁ [LH_C look_for_lh_₁₉(')') [LH_N]]]]), _lh_p_prim_arg1⁴)
//│ def p_prim_lh_₃(_lh_p_prim_arg1³) = orElseMap_lh_₁₅(p_name_lh_₂, seQ_lh_₁₃((fun x⁴⁶ -> atIndex_lh_₂(1, x⁴⁶)), [LH_C look_for_lh_₁₉('(') [LH_C p_expr_lh_₁ [LH_C look_for_lh_₁₉(')') [LH_N]]]]), _lh_p_prim_arg1³)
//│ def p_prim_lh_₄(_lh_p_prim_arg1²) = orElseMap_lh_₁₅(p_name_lh_₂, seQ_lh_₁₃((fun x³⁵ -> atIndex_lh_₂(1, x³⁵)), [LH_C look_for_lh_₁₉('(') [LH_C p_expr_lh_₂ [LH_C look_for_lh_₁₉(')') [LH_N]]]]), _lh_p_prim_arg1²)
//│ def p_prim_lh_₅(_lh_p_prim_arg1¹) = orElseMap_lh_₁₅(p_name_lh_₂, seQ_lh_₁₃((fun x³⁰ -> atIndex_lh_₂(1, x³⁰)), [LH_C look_for_lh_₁₉('(') [LH_C p_expr_lh_₂ [LH_C look_for_lh_₁₉(')') [LH_N]]]]), _lh_p_prim_arg1¹)
//│ def p_prim_lh_₆(_lh_p_prim_arg1⁰) = orElseMap_lh_₁₅(p_name_lh_₂, seQ_lh_₁₃((fun x²⁵ -> atIndex_lh_₂(1, x²⁵)), [LH_C look_for_lh_₁₉('(') [LH_C p_expr_lh_₂ [LH_C look_for_lh_₁₉(')') [LH_N]]]]), _lh_p_prim_arg1⁰)
//│ def p_term_lh_₁(_lh_p_term_arg1¹¹) = orElseMap_lh_₄(seQ_lh_₄(q_func_lh_₁, [LH_C p_ident_lh_₁ [LH_C look_for_lh_₃('(') [LH_C list_of_lh_₁(p_expr_lh_₁, ',') [LH_C look_for_lh_₂(')') [LH_N]]]]]), p_prim_lh_₁, _lh_p_term_arg1¹¹)
//│ def p_term_lh_₁₀(_lh_p_term_arg1²) = orElseMap_lh_₁₅(seQ_lh_₁₃(q_func_lh_₆, [LH_C p_ident_lh_₆ [LH_C look_for_lh_₁₉('(') [LH_C list_of_lh_₆(p_expr_lh_₄, ',') [LH_C look_for_lh_₁₉(')') [LH_N]]]]]), p_prim_lh_₆, _lh_p_term_arg1²)
//│ def p_term_lh_₁₁(_lh_p_term_arg1¹) = orElseMap_lh_₁₅(seQ_lh_₁₃(q_func_lh_₆, [LH_C p_ident_lh_₆ [LH_C look_for_lh_₁₉('(') [LH_C list_of_lh_₆(p_expr_lh_₄, ',') [LH_C look_for_lh_₁₉(')') [LH_N]]]]]), p_prim_lh_₆, _lh_p_term_arg1¹)
//│ def p_term_lh_₁₂(_lh_p_term_arg1⁰) = orElseMap_lh_₁₅(seQ_lh_₁₃(q_func_lh_₆, [LH_C p_ident_lh_₆ [LH_C look_for_lh_₁₉('(') [LH_C list_of_lh_₆(p_expr_lh_₄, ',') [LH_C look_for_lh_₁₉(')') [LH_N]]]]]), p_prim_lh_₆, _lh_p_term_arg1⁰)
//│ def p_term_lh_₂(_lh_p_term_arg1¹⁰) = orElseMap_lh_₅(seQ_lh_₅(q_func_lh_₂, [LH_C p_ident_lh_₂ [LH_C look_for_lh_₅('(') [LH_C list_of_lh_₂(p_expr_lh_₁, ',') [LH_C look_for_lh_₄(')') [LH_N]]]]]), p_prim_lh_₂, _lh_p_term_arg1¹⁰)
//│ def p_term_lh_₃(_lh_p_term_arg1⁹) = orElseMap_lh_₆(seQ_lh_₆(q_func_lh_₃, [LH_C p_ident_lh_₃ [LH_C look_for_lh_₇('(') [LH_C list_of_lh_₃(p_expr_lh_₁, ',') [LH_C look_for_lh_₆(')') [LH_N]]]]]), p_prim_lh_₃, _lh_p_term_arg1⁹)
//│ def p_term_lh_₄(_lh_p_term_arg1⁸) = orElseMap_lh_₇(seQ_lh_₇(q_func_lh_₄, [LH_C p_ident_lh_₄ [LH_C look_for_lh_₈('(') [LH_C list_of_lh_₄(p_expr_lh_₂, ',') [LH_C look_for_lh_₉(')') [LH_N]]]]]), p_prim_lh_₄, _lh_p_term_arg1⁸)
//│ def p_term_lh_₅(_lh_p_term_arg1⁷) = orElseMap_lh_₈(seQ_lh_₈(q_func_lh_₅, [LH_C p_ident_lh_₅ [LH_C look_for_lh_₁₀('(') [LH_C list_of_lh_₅(p_expr_lh_₂, ',') [LH_C look_for_lh_₁₁(')') [LH_N]]]]]), p_prim_lh_₅, _lh_p_term_arg1⁷)
//│ def p_term_lh_₆(_lh_p_term_arg1⁶) = orElseMap_lh_₉(seQ_lh_₉(q_func_lh_₆, [LH_C p_ident_lh_₆ [LH_C look_for_lh_₁₂('(') [LH_C list_of_lh_₆(p_expr_lh_₂, ',') [LH_C look_for_lh_₁₃(')') [LH_N]]]]]), p_prim_lh_₆, _lh_p_term_arg1⁶)
//│ def p_term_lh_₇(_lh_p_term_arg1⁵) = orElseMap_lh_₁₅(seQ_lh_₁₃(q_func_lh_₆, [LH_C p_ident_lh_₆ [LH_C look_for_lh_₁₉('(') [LH_C list_of_lh_₆(p_expr_lh_₃, ',') [LH_C look_for_lh_₁₉(')') [LH_N]]]]]), p_prim_lh_₆, _lh_p_term_arg1⁵)
//│ def p_term_lh_₈(_lh_p_term_arg1⁴) = orElseMap_lh_₁₅(seQ_lh_₁₃(q_func_lh_₆, [LH_C p_ident_lh_₆ [LH_C look_for_lh_₁₉('(') [LH_C list_of_lh_₆(p_expr_lh_₃, ',') [LH_C look_for_lh_₁₉(')') [LH_N]]]]]), p_prim_lh_₆, _lh_p_term_arg1⁴)
//│ def p_term_lh_₉(_lh_p_term_arg1³) = orElseMap_lh_₁₅(seQ_lh_₁₃(q_func_lh_₆, [LH_C p_ident_lh_₆ [LH_C look_for_lh_₁₉('(') [LH_C list_of_lh_₆(p_expr_lh_₃, ',') [LH_C look_for_lh_₁₉(')') [LH_N]]]]]), p_prim_lh_₆, _lh_p_term_arg1³)
//│ def pair_lh_₁(_lh_pair_arg1⁰, _lh_pair_arg2⁰) = [LH_P2 _lh_pair_arg1⁰ _lh_pair_arg2⁰]
//│ def parse_eqn_lh_₁(_lh_parse_eqn_arg1⁰) = 
//│ 	let _lh_matchIdent¹⁵ = fst_lh_₃(the_lh_₃(p_eqn_lh_₁(_lh_parse_eqn_arg1⁰)))
//│ 	in case _lh_matchIdent¹⁵ of {
//│ 		List _lh_parse_eqn_List_0⁰ => case _lh_parse_eqn_List_0⁰ of {
//│ 			LH_C _lh_parse_eqn_LH_C_0⁰ _lh_parse_eqn_LH_C_1⁰ => case _lh_parse_eqn_LH_C_0⁰ of {
//│ 				Expr _lh_parse_eqn_Expr_0⁰ => case _lh_parse_eqn_LH_C_1⁰ of {
//│ 					LH_C _lh_parse_eqn_LH_C_0¹ _lh_parse_eqn_LH_C_1¹ => case _lh_parse_eqn_LH_C_0¹ of {
//│ 						Expr _lh_parse_eqn_Expr_0¹ => case _lh_parse_eqn_LH_C_1¹ of {
//│ 							LH_N  => [LH_P2 _lh_parse_eqn_Expr_0⁰ _lh_parse_eqn_Expr_0¹]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ def parse_lh_₁(_lh_parse_arg1¹) = (fun _lh_funcomp_x³⁶ -> (fun _lh_funcomp_x³⁷ -> (fun _lh_funcomp_x³⁸ -> unExpr_lh_₁(fst_lh_₁(_lh_funcomp_x³⁸)))(the_lh_₁(_lh_funcomp_x³⁷)))(p_expr_lh_₁(_lh_funcomp_x³⁶)))(_lh_parse_arg1¹)
//│ def parse_lh_₂(_lh_parse_arg1⁰) = (fun _lh_funcomp_x³³ -> (fun _lh_funcomp_x³⁴ -> (fun _lh_funcomp_x³⁵ -> unExpr_lh_₂(fst_lh_₂(_lh_funcomp_x³⁵)))(the_lh_₂(_lh_funcomp_x³⁴)))(p_expr_lh_₂(_lh_funcomp_x³³)))(_lh_parse_arg1⁰)
//│ def pchar_lh_₁(_lh_pchar_arg1³, _lh_pchar_arg2³) = case _lh_pchar_arg2³ of {
//│ 	LH_N  => croak_lh_₁
//│ 	| LH_C _lh_pchar_LH_C_0³ _lh_pchar_LH_C_1³ => if _lh_pchar_arg1³(_lh_pchar_LH_C_0³) then succeed_lh_₁([LH_P2 [MkString [LH_C _lh_pchar_LH_C_0³ [LH_N]]] _lh_pchar_LH_C_1³]) else croak_lh_₁}
//│ def pchar_lh_₂(_lh_pchar_arg1², _lh_pchar_arg2²) = case _lh_pchar_arg2² of {
//│ 	LH_N  => croak_lh_₁
//│ 	| LH_C _lh_pchar_LH_C_0² _lh_pchar_LH_C_1² => if _lh_pchar_arg1²(_lh_pchar_LH_C_0²) then succeed_lh_₁([LH_P2 [MkString [LH_C _lh_pchar_LH_C_0² [LH_N]]] _lh_pchar_LH_C_1²]) else croak_lh_₁}
//│ def pchar_lh_₃(_lh_pchar_arg1¹, _lh_pchar_arg2¹) = case _lh_pchar_arg2¹ of {
//│ 	LH_N  => croak_lh_₁
//│ 	| LH_C _lh_pchar_LH_C_0¹ _lh_pchar_LH_C_1¹ => if _lh_pchar_arg1¹(_lh_pchar_LH_C_0¹) then succeed_lh_₁([LH_P2 [MkString [LH_C _lh_pchar_LH_C_0¹ [LH_N]]] _lh_pchar_LH_C_1¹]) else croak_lh_₁}
//│ def pchar_lh_₄(_lh_pchar_arg1⁰, _lh_pchar_arg2⁰) = case _lh_pchar_arg2⁰ of {
//│ 	LH_N  => croak_lh_₁
//│ 	| LH_C _lh_pchar_LH_C_0⁰ _lh_pchar_LH_C_1⁰ => if _lh_pchar_arg1⁰(_lh_pchar_LH_C_0⁰) then succeed_lh_₁([LH_P2 [MkString [LH_C _lh_pchar_LH_C_0⁰ [LH_N]]] _lh_pchar_LH_C_1⁰]) else croak_lh_₁}
//│ def preorder_lh_₁(_lh_preorder_arg1⁰) = if eqListExpr_lh_₁(_lh_preorder_arg1⁰, [LH_N]) then [LH_N] else mappend_lh_₂([LH_C g_first_lh_₁(_lh_preorder_arg1⁰) [LH_N]], preorder_lh_₁(g_rest_lh_₁(_lh_preorder_arg1⁰)))
//│ def preprocess_lh_₁(_lh_preprocess_arg1⁰, _lh_preprocess_arg2⁰) = case _lh_preprocess_arg2⁰ of {
//│ 	LH_P2 _lh_preprocess_LH_P2_0⁰ _lh_preprocess_LH_P2_1⁰ => [LH_P2 simplify_lh_₁(super_reduce_lh_₁(_lh_preprocess_arg1⁰), _lh_preprocess_LH_P2_0⁰) simplify_lh_₁(super_reduce_lh_₁(_lh_preprocess_arg1⁰), _lh_preprocess_LH_P2_1⁰)]}
//│ def process1_lh_₁(_lh_process1_arg1⁰, _lh_process1_arg2⁰, _lh_process1_arg3⁰, _lh_process1_arg4⁰, _lh_process1_arg5⁰, _lh_process1_arg6⁰) = case _lh_process1_arg6⁰ of {
//│ 	LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰ => 
//│ 		let o⁰ = fst_lh_₃(_lh_process1_arg1⁰, [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰])
//│ 		in let _lh_matchIdent¹¹ = o⁰
//│ 		in case _lh_matchIdent¹¹ of {
//│ 			Unrelated  => process_lh_₁(_lh_process1_arg1⁰, _lh_process1_arg2⁰, _lh_process1_arg3⁰, _lh_process1_arg4⁰, add_agenda_lh_₁((fun dum⁰ -> 1000), [LH_C [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰] [LH_N]], _lh_process1_arg5⁰))
//│ 			| Equal  => process_lh_₁(_lh_process1_arg1⁰, _lh_process1_arg2⁰, _lh_process1_arg3⁰, _lh_process1_arg4⁰, _lh_process1_arg5⁰)
//│ 			| _  => 
//│ 				let eqn⁰ = 	
//│ 					let _lh_matchIdent¹² = o⁰
//│ 					in case _lh_matchIdent¹² of {
//│ 						Greater  => [Eqn _lh_process1_arg2⁰ [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰]]
//│ 						| Less  => [Eqn _lh_process1_arg2⁰ [LH_P2 _lh_process1_LH_P2_1⁰ _lh_process1_LH_P2_0⁰]]}
//│ 				in process2_lh_₁(_lh_process1_arg1⁰, (_lh_process1_arg2⁰ + 1), _lh_process1_arg3⁰, _lh_process1_arg4⁰, _lh_process1_arg5⁰, eqn⁰)}}
//│ def process2_lh_₁(_lh_process2_arg1⁰, _lh_process2_arg2⁰, _lh_process2_arg3⁰, _lh_process2_arg4⁰, _lh_process2_arg5⁰, _lh_process2_arg6⁰) = 
//│ 	let _lh_matchIdent² = split_lh_₁(reducible_lh_₁(reduce1_lh_₁(_lh_process2_arg6⁰)), _lh_process2_arg3⁰)
//│ 	in case _lh_matchIdent² of {
//│ 		LH_P2 _lh_process2_LH_P2_0⁰ _lh_process2_LH_P2_1⁰ => 
//│ 			let net'⁰ = add_eqn_lh_₁(delete_eqns_lh_₁(map_lh_₇(eqno_lh_₁, _lh_process2_LH_P2_0⁰), _lh_process2_arg4⁰), _lh_process2_arg6⁰)
//│ 			in let deletions⁰ = map_lh_₇(eqpr_lh_₁, _lh_process2_LH_P2_0⁰)
//│ 			in let critical⁰ = all_crit_pairs_lh_₁(_lh_process2_arg6⁰, _lh_process2_LH_P2_1⁰)
//│ 			in let new_agenda⁰ = sift_lh_₁(map_lh_₇(resolve_lh_₁(super_reduce_lh_₁(net'⁰)), mappend_lh_₂(deletions⁰, critical⁰)))
//│ 			in let todo'⁰ = add_agenda_lh_₁(snd_lh_₁(_lh_process2_arg1⁰), new_agenda⁰, _lh_process2_arg5⁰)
//│ 			in process_lh_₁(_lh_process2_arg1⁰, _lh_process2_arg2⁰, mappend_lh_₂(_lh_process2_LH_P2_1⁰, [LH_C _lh_process2_arg6⁰ [LH_N]]), net'⁰, todo'⁰)}
//│ def process_lh_₁(_lh_process_arg1⁰, _lh_process_arg2⁰, _lh_process_arg3⁰, _lh_process_arg4⁰, _lh_process_arg5⁰) = case _lh_process_arg5⁰ of {
//│ 	LH_N  => _lh_process_arg4⁰
//│ 	| LH_C _lh_process_LH_C_0⁰ _lh_process_LH_C_1⁰ => case _lh_process_LH_C_0⁰ of {
//│ 		Item _lh_process_Item_0⁰ _lh_process_Item_1⁰ => process1_lh_₁(_lh_process_arg1⁰, _lh_process_arg2⁰, _lh_process_arg3⁰, _lh_process_arg4⁰, _lh_process_LH_C_1⁰, preprocess_lh_₁(_lh_process_arg4⁰, _lh_process_Item_1⁰))}}
//│ def prop2_lh_₁(_lh_prop2_arg1⁰, _lh_prop2_arg2⁰, _lh_prop2_arg3⁰) = case _lh_prop2_arg2⁰ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_prop2_Just_0⁰ => _lh_prop2_arg1⁰(_lh_prop2_Just_0⁰, _lh_prop2_arg3⁰)}
//│ def prop_fold_lh_₁(_lh_prop_fold_arg1⁰, _lh_prop_fold_arg2⁰, _lh_prop_fold_arg3⁰) = case _lh_prop_fold_arg3⁰ of {
//│ 	LH_N  => [Just _lh_prop_fold_arg2⁰]
//│ 	| LH_C _lh_prop_fold_LH_C_0⁰ _lh_prop_fold_LH_C_1⁰ => prop2_lh_₁(prop_fold_lh_₁(_lh_prop_fold_arg1⁰), _lh_prop_fold_arg1⁰(_lh_prop_fold_arg2⁰, _lh_prop_fold_LH_C_0⁰), _lh_prop_fold_LH_C_1⁰)}
//│ def q_eqn_lh_₁(_lh_q_eqn_arg1⁰) = case _lh_q_eqn_arg1⁰ of {
//│ 	LH_C _lh_q_eqn_LH_C_0⁰ _lh_q_eqn_LH_C_1⁰ => case _lh_q_eqn_LH_C_1⁰ of {
//│ 		LH_C _lh_q_eqn_LH_C_0¹ _lh_q_eqn_LH_C_1¹ => case _lh_q_eqn_LH_C_1¹ of {
//│ 			LH_C _lh_q_eqn_LH_C_0² _lh_q_eqn_LH_C_1² => case _lh_q_eqn_LH_C_1² of {
//│ 				LH_N  => [List [LH_C _lh_q_eqn_LH_C_0⁰ [LH_C _lh_q_eqn_LH_C_0² [LH_N]]]]
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_func_lh_₁(_lh_q_func_arg1⁵) = case _lh_q_func_arg1⁵ of {
//│ 	LH_C _lh_q_func_LH_C_0²⁰ _lh_q_func_LH_C_1²⁰ => case _lh_q_func_LH_C_0²⁰ of {
//│ 		MkString _lh_q_func_MkString_0⁵ => case _lh_q_func_LH_C_1²⁰ of {
//│ 			LH_C _lh_q_func_LH_C_0²¹ _lh_q_func_LH_C_1²¹ => case _lh_q_func_LH_C_1²¹ of {
//│ 				LH_C _lh_q_func_LH_C_0²² _lh_q_func_LH_C_1²² => case _lh_q_func_LH_C_0²² of {
//│ 					List _lh_q_func_List_0⁵ => case _lh_q_func_LH_C_1²² of {
//│ 						LH_C _lh_q_func_LH_C_0²³ _lh_q_func_LH_C_1²³ => case _lh_q_func_LH_C_1²³ of {
//│ 							LH_N  => [Expr [Func _lh_q_func_MkString_0⁵ map_lh_₇(unExpr_lh_₃, _lh_q_func_List_0⁵)]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_func_lh_₂(_lh_q_func_arg1⁴) = case _lh_q_func_arg1⁴ of {
//│ 	LH_C _lh_q_func_LH_C_0¹⁶ _lh_q_func_LH_C_1¹⁶ => case _lh_q_func_LH_C_0¹⁶ of {
//│ 		MkString _lh_q_func_MkString_0⁴ => case _lh_q_func_LH_C_1¹⁶ of {
//│ 			LH_C _lh_q_func_LH_C_0¹⁷ _lh_q_func_LH_C_1¹⁷ => case _lh_q_func_LH_C_1¹⁷ of {
//│ 				LH_C _lh_q_func_LH_C_0¹⁸ _lh_q_func_LH_C_1¹⁸ => case _lh_q_func_LH_C_0¹⁸ of {
//│ 					List _lh_q_func_List_0⁴ => case _lh_q_func_LH_C_1¹⁸ of {
//│ 						LH_C _lh_q_func_LH_C_0¹⁹ _lh_q_func_LH_C_1¹⁹ => case _lh_q_func_LH_C_1¹⁹ of {
//│ 							LH_N  => [Expr [Func _lh_q_func_MkString_0⁴ map_lh_₇(unExpr_lh_₃, _lh_q_func_List_0⁴)]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_func_lh_₃(_lh_q_func_arg1³) = case _lh_q_func_arg1³ of {
//│ 	LH_C _lh_q_func_LH_C_0¹² _lh_q_func_LH_C_1¹² => case _lh_q_func_LH_C_0¹² of {
//│ 		MkString _lh_q_func_MkString_0³ => case _lh_q_func_LH_C_1¹² of {
//│ 			LH_C _lh_q_func_LH_C_0¹³ _lh_q_func_LH_C_1¹³ => case _lh_q_func_LH_C_1¹³ of {
//│ 				LH_C _lh_q_func_LH_C_0¹⁴ _lh_q_func_LH_C_1¹⁴ => case _lh_q_func_LH_C_0¹⁴ of {
//│ 					List _lh_q_func_List_0³ => case _lh_q_func_LH_C_1¹⁴ of {
//│ 						LH_C _lh_q_func_LH_C_0¹⁵ _lh_q_func_LH_C_1¹⁵ => case _lh_q_func_LH_C_1¹⁵ of {
//│ 							LH_N  => [Expr [Func _lh_q_func_MkString_0³ map_lh_₇(unExpr_lh_₃, _lh_q_func_List_0³)]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_func_lh_₄(_lh_q_func_arg1²) = case _lh_q_func_arg1² of {
//│ 	LH_C _lh_q_func_LH_C_0⁸ _lh_q_func_LH_C_1⁸ => case _lh_q_func_LH_C_0⁸ of {
//│ 		MkString _lh_q_func_MkString_0² => case _lh_q_func_LH_C_1⁸ of {
//│ 			LH_C _lh_q_func_LH_C_0⁹ _lh_q_func_LH_C_1⁹ => case _lh_q_func_LH_C_1⁹ of {
//│ 				LH_C _lh_q_func_LH_C_0¹⁰ _lh_q_func_LH_C_1¹⁰ => case _lh_q_func_LH_C_0¹⁰ of {
//│ 					List _lh_q_func_List_0² => case _lh_q_func_LH_C_1¹⁰ of {
//│ 						LH_C _lh_q_func_LH_C_0¹¹ _lh_q_func_LH_C_1¹¹ => case _lh_q_func_LH_C_1¹¹ of {
//│ 							LH_N  => [Expr [Func _lh_q_func_MkString_0² map_lh_₇(unExpr_lh_₃, _lh_q_func_List_0²)]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_func_lh_₅(_lh_q_func_arg1¹) = case _lh_q_func_arg1¹ of {
//│ 	LH_C _lh_q_func_LH_C_0⁴ _lh_q_func_LH_C_1⁴ => case _lh_q_func_LH_C_0⁴ of {
//│ 		MkString _lh_q_func_MkString_0¹ => case _lh_q_func_LH_C_1⁴ of {
//│ 			LH_C _lh_q_func_LH_C_0⁵ _lh_q_func_LH_C_1⁵ => case _lh_q_func_LH_C_1⁵ of {
//│ 				LH_C _lh_q_func_LH_C_0⁶ _lh_q_func_LH_C_1⁶ => case _lh_q_func_LH_C_0⁶ of {
//│ 					List _lh_q_func_List_0¹ => case _lh_q_func_LH_C_1⁶ of {
//│ 						LH_C _lh_q_func_LH_C_0⁷ _lh_q_func_LH_C_1⁷ => case _lh_q_func_LH_C_1⁷ of {
//│ 							LH_N  => [Expr [Func _lh_q_func_MkString_0¹ map_lh_₇(unExpr_lh_₃, _lh_q_func_List_0¹)]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_func_lh_₆(_lh_q_func_arg1⁰) = case _lh_q_func_arg1⁰ of {
//│ 	LH_C _lh_q_func_LH_C_0⁰ _lh_q_func_LH_C_1⁰ => case _lh_q_func_LH_C_0⁰ of {
//│ 		MkString _lh_q_func_MkString_0⁰ => case _lh_q_func_LH_C_1⁰ of {
//│ 			LH_C _lh_q_func_LH_C_0¹ _lh_q_func_LH_C_1¹ => case _lh_q_func_LH_C_1¹ of {
//│ 				LH_C _lh_q_func_LH_C_0² _lh_q_func_LH_C_1² => case _lh_q_func_LH_C_0² of {
//│ 					List _lh_q_func_List_0⁰ => case _lh_q_func_LH_C_1² of {
//│ 						LH_C _lh_q_func_LH_C_0³ _lh_q_func_LH_C_1³ => case _lh_q_func_LH_C_1³ of {
//│ 							LH_N  => [Expr [Func _lh_q_func_MkString_0⁰ map_lh_₇(unExpr_lh_₃, _lh_q_func_List_0⁰)]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_name_lh_₁(_lh_q_name_arg1⁰) = case _lh_q_name_arg1⁰ of {
//│ 	MkString _lh_q_name_MkString_0⁰ => if ((int_of_char⁰(atIndex_lh_₂(0, _lh_q_name_MkString_0⁰)) >= int_of_char⁰('a')) && (int_of_char⁰(atIndex_lh_₂(0, _lh_q_name_MkString_0⁰)) <= int_of_char⁰('z'))) then [Expr [Var _lh_q_name_MkString_0⁰]] else [Expr [Func _lh_q_name_MkString_0⁰ [LH_N]]]
//│ 	| _  => error⁰}
//│ def q_op_lh_₁(_lh_q_op_arg1³) = case _lh_q_op_arg1³ of {
//│ 	LH_C _lh_q_op_LH_C_0⁹ _lh_q_op_LH_C_1⁹ => case _lh_q_op_LH_C_0⁹ of {
//│ 		Expr _lh_q_op_Expr_0⁶ => case _lh_q_op_LH_C_1⁹ of {
//│ 			LH_C _lh_q_op_LH_C_0¹⁰ _lh_q_op_LH_C_1¹⁰ => case _lh_q_op_LH_C_0¹⁰ of {
//│ 				MkString _lh_q_op_MkString_0³ => case _lh_q_op_LH_C_1¹⁰ of {
//│ 					LH_C _lh_q_op_LH_C_0¹¹ _lh_q_op_LH_C_1¹¹ => case _lh_q_op_LH_C_0¹¹ of {
//│ 						Expr _lh_q_op_Expr_0⁷ => case _lh_q_op_LH_C_1¹¹ of {
//│ 							LH_N  => [Expr [Func _lh_q_op_MkString_0³ [LH_C _lh_q_op_Expr_0⁶ [LH_C _lh_q_op_Expr_0⁷ [LH_N]]]]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_op_lh_₂(_lh_q_op_arg1²) = case _lh_q_op_arg1² of {
//│ 	LH_C _lh_q_op_LH_C_0⁶ _lh_q_op_LH_C_1⁶ => case _lh_q_op_LH_C_0⁶ of {
//│ 		Expr _lh_q_op_Expr_0⁴ => case _lh_q_op_LH_C_1⁶ of {
//│ 			LH_C _lh_q_op_LH_C_0⁷ _lh_q_op_LH_C_1⁷ => case _lh_q_op_LH_C_0⁷ of {
//│ 				MkString _lh_q_op_MkString_0² => case _lh_q_op_LH_C_1⁷ of {
//│ 					LH_C _lh_q_op_LH_C_0⁸ _lh_q_op_LH_C_1⁸ => case _lh_q_op_LH_C_0⁸ of {
//│ 						Expr _lh_q_op_Expr_0⁵ => case _lh_q_op_LH_C_1⁸ of {
//│ 							LH_N  => [Expr [Func _lh_q_op_MkString_0² [LH_C _lh_q_op_Expr_0⁴ [LH_C _lh_q_op_Expr_0⁵ [LH_N]]]]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_op_lh_₃(_lh_q_op_arg1¹) = case _lh_q_op_arg1¹ of {
//│ 	LH_C _lh_q_op_LH_C_0³ _lh_q_op_LH_C_1³ => case _lh_q_op_LH_C_0³ of {
//│ 		Expr _lh_q_op_Expr_0² => case _lh_q_op_LH_C_1³ of {
//│ 			LH_C _lh_q_op_LH_C_0⁴ _lh_q_op_LH_C_1⁴ => case _lh_q_op_LH_C_0⁴ of {
//│ 				MkString _lh_q_op_MkString_0¹ => case _lh_q_op_LH_C_1⁴ of {
//│ 					LH_C _lh_q_op_LH_C_0⁵ _lh_q_op_LH_C_1⁵ => case _lh_q_op_LH_C_0⁵ of {
//│ 						Expr _lh_q_op_Expr_0³ => case _lh_q_op_LH_C_1⁵ of {
//│ 							LH_N  => [Expr [Func _lh_q_op_MkString_0¹ [LH_C _lh_q_op_Expr_0² [LH_C _lh_q_op_Expr_0³ [LH_N]]]]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_op_lh_₄(_lh_q_op_arg1⁰) = case _lh_q_op_arg1⁰ of {
//│ 	LH_C _lh_q_op_LH_C_0⁰ _lh_q_op_LH_C_1⁰ => case _lh_q_op_LH_C_0⁰ of {
//│ 		Expr _lh_q_op_Expr_0⁰ => case _lh_q_op_LH_C_1⁰ of {
//│ 			LH_C _lh_q_op_LH_C_0¹ _lh_q_op_LH_C_1¹ => case _lh_q_op_LH_C_0¹ of {
//│ 				MkString _lh_q_op_MkString_0⁰ => case _lh_q_op_LH_C_1¹ of {
//│ 					LH_C _lh_q_op_LH_C_0² _lh_q_op_LH_C_1² => case _lh_q_op_LH_C_0² of {
//│ 						Expr _lh_q_op_Expr_0¹ => case _lh_q_op_LH_C_1² of {
//│ 							LH_N  => [Expr [Func _lh_q_op_MkString_0⁰ [LH_C _lh_q_op_Expr_0⁰ [LH_C _lh_q_op_Expr_0¹ [LH_N]]]]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def quant_lh_₁(_lh_quant_arg1⁷, _lh_quant_arg2⁷, _lh_quant_arg3⁷, _lh_quant_arg4⁷) = 
//│ 	let p⁷ = (fun x⁶⁹ -> _lh_quant_arg2⁷(x⁶⁹, _lh_quant_arg3⁷))
//│ 	in _lh_quant_arg1⁷(p⁷, _lh_quant_arg4⁷)
//│ def quant_lh_₂(_lh_quant_arg1⁶, _lh_quant_arg2⁶, _lh_quant_arg3⁶, _lh_quant_arg4⁶) = 
//│ 	let p⁶ = (fun x⁶⁸ -> _lh_quant_arg2⁶(x⁶⁸, _lh_quant_arg3⁶))
//│ 	in _lh_quant_arg1⁶(p⁶, _lh_quant_arg4⁶)
//│ def quant_lh_₃(_lh_quant_arg1⁵, _lh_quant_arg2⁵, _lh_quant_arg3⁵, _lh_quant_arg4⁵) = 
//│ 	let p⁵ = (fun x⁶⁷ -> _lh_quant_arg2⁵(x⁶⁷, _lh_quant_arg3⁵))
//│ 	in _lh_quant_arg1⁵(p⁵, _lh_quant_arg4⁵)
//│ def quant_lh_₄(_lh_quant_arg1⁴, _lh_quant_arg2⁴, _lh_quant_arg3⁴, _lh_quant_arg4⁴) = 
//│ 	let p⁴ = (fun x⁶⁵ -> _lh_quant_arg2⁴(x⁶⁵, _lh_quant_arg3⁴))
//│ 	in _lh_quant_arg1⁴(p⁴, _lh_quant_arg4⁴)
//│ def quant_lh_₅(_lh_quant_arg1³, _lh_quant_arg2³, _lh_quant_arg3³, _lh_quant_arg4³) = 
//│ 	let p³ = (fun x⁶³ -> _lh_quant_arg2³(x⁶³, _lh_quant_arg3³))
//│ 	in _lh_quant_arg1³(p³, _lh_quant_arg4³)
//│ def quant_lh_₆(_lh_quant_arg1², _lh_quant_arg2², _lh_quant_arg3², _lh_quant_arg4²) = 
//│ 	let p² = (fun x⁶² -> _lh_quant_arg2²(x⁶², _lh_quant_arg3²))
//│ 	in _lh_quant_arg1²(p², _lh_quant_arg4²)
//│ def quant_lh_₇(_lh_quant_arg1¹, _lh_quant_arg2¹, _lh_quant_arg3¹, _lh_quant_arg4¹) = 
//│ 	let p¹ = (fun x⁶¹ -> _lh_quant_arg2¹(x⁶¹, _lh_quant_arg3¹))
//│ 	in _lh_quant_arg1¹(p¹, _lh_quant_arg4¹)
//│ def quant_lh_₈(_lh_quant_arg1⁰, _lh_quant_arg2⁰, _lh_quant_arg3⁰, _lh_quant_arg4⁰) = 
//│ 	let p⁰ = (fun x⁶⁰ -> _lh_quant_arg2⁰(x⁶⁰, _lh_quant_arg3⁰))
//│ 	in _lh_quant_arg1⁰(p⁰, _lh_quant_arg4⁰)
//│ def rank_lh_₁(_lh_rank_arg1⁰) = case _lh_rank_arg1⁰ of {
//│ 	LH_C _lh_rank_LH_C_0⁰ _lh_rank_LH_C_1⁰ => case _lh_rank_LH_C_0⁰ of {
//│ 		'E'  => case _lh_rank_LH_C_1⁰ of {
//│ 			LH_N  => 1
//│ 			| _  => error⁰}
//│ 		| '*'  => case _lh_rank_LH_C_1⁰ of {
//│ 			LH_N  => 2
//│ 			| _  => error⁰}
//│ 		| 'I'  => case _lh_rank_LH_C_1⁰ of {
//│ 			LH_N  => 3
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def rank_order_lh_₁(_lh_rank_order_arg1⁰, _lh_rank_order_arg2⁰) = case _lh_rank_order_arg2⁰ of {
//│ 	LH_P2 _lh_rank_order_LH_P2_0⁰ _lh_rank_order_LH_P2_1⁰ => num_order_lh_₁([LH_P2 _lh_rank_order_arg1⁰(_lh_rank_order_LH_P2_0⁰) _lh_rank_order_arg1⁰(_lh_rank_order_LH_P2_1⁰)])}
//│ def reduce1_lh_₁(_lh_reduce1_arg1⁰) = inside_lh_₁(rewrite_lh_₁(_lh_reduce1_arg1⁰))
//│ def reducible_lh_₁(_lh_reducible_arg1⁰, _lh_reducible_arg2⁰) = case _lh_reducible_arg2⁰ of {
//│ 	Eqn _lh_reducible_Eqn_0⁰ _lh_reducible_Eqn_1⁰ => case _lh_reducible_Eqn_1⁰ of {
//│ 		LH_P2 _lh_reducible_LH_P2_0⁰ _lh_reducible_LH_P2_1⁰ => (exists_lh_₁(_lh_reducible_arg1⁰(_lh_reducible_LH_P2_0⁰)) || exists_lh_₁(_lh_reducible_arg1⁰(_lh_reducible_LH_P2_1⁰)))}}
//│ def replace_lh_₁(_lh_replace_arg1⁰, _lh_replace_arg2⁰, _lh_replace_arg3⁰) = case _lh_replace_arg2⁰ of {
//│ 	LH_N  => _lh_replace_arg3⁰
//│ 	| _  => case _lh_replace_arg1⁰ of {
//│ 		Func _lh_replace_Func_0⁰ _lh_replace_Func_1⁰ => case _lh_replace_arg2⁰ of {
//│ 			LH_C _lh_replace_LH_C_0⁰ _lh_replace_LH_C_1⁰ => [Func _lh_replace_Func_0⁰ modify_lh_₁(_lh_replace_Func_1⁰, _lh_replace_LH_C_0⁰, (fun t²⁰ -> replace_lh_₁(t²⁰, _lh_replace_LH_C_1⁰, _lh_replace_arg3⁰)))]
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}}
//│ def resolve_lh_₁(_lh_resolve_arg1⁰, _lh_resolve_arg2⁰) = 
//│ 	let lhs'⁰ = simplify_lh_₁(_lh_resolve_arg1⁰, fst_lh_₃(_lh_resolve_arg2⁰))
//│ 	in let rhs'⁰ = simplify_lh_₁(_lh_resolve_arg1⁰, snd_lh_₁(_lh_resolve_arg2⁰))
//│ 	in if eqExpr_lh_₁(lhs'⁰, rhs'⁰) then croak_lh_₁ else succeed_lh_₁([LH_P2 lhs'⁰ rhs'⁰])
//│ def result_lh_₁(_lh_result_arg1⁰) = case _lh_result_arg1⁰ of {
//│ 	LH_P2 _lh_result_LH_P2_0⁰ _lh_result_LH_P2_1⁰ => 
//│ 		let group_completion⁰ = knuth_bendix_lh_₁(rpo_lh_₁(rank_order_lh_₁(rank_lh_₁), lex_ext_lh_₁), map_lh_₁(parse_eqn_lh_₁, [LH_C [LH_C '(' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'b' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'c' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C '(' [LH_C 'b' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'c' [LH_C ')' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]] [LH_C [LH_C 'E' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'x' [LH_N]]]]]]]]]] [LH_C [LH_C 'I' [LH_C '(' [LH_C 'x' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'E' [LH_N]]]]]]]]]]]]] [LH_N]]]]))
//│ 		in eqExpr_lh_₁(simplify_lh_₁(super_reduce_lh_₁(group_completion⁰), parse_lh_₁(_lh_result_LH_P2_0⁰)), parse_lh_₂(_lh_result_LH_P2_1⁰))}
//│ def rewrite_lh_₁(_lh_rewrite_arg1⁰) = case _lh_rewrite_arg1⁰ of {
//│ 	Eqn _lh_rewrite_Eqn_0⁰ _lh_rewrite_Eqn_1⁰ => case _lh_rewrite_Eqn_1⁰ of {
//│ 		LH_P2 _lh_rewrite_LH_P2_0⁰ _lh_rewrite_LH_P2_1⁰ => (fun _lh_funcomp_x³² -> lift_lh_₃(sub_lh_₁(_lh_rewrite_LH_P2_1⁰), match_lh_₁(_lh_rewrite_LH_P2_0⁰, _lh_funcomp_x³²)))}}
//│ def rpo_lh_₁(_lh_rpo_arg1⁰, _lh_rpo_arg2⁰) = 
//│ 	let rpo'⁰ = (fun param⁰ -> 
//│ 		let _lh_matchIdent¹⁷ = param⁰
//│ 		in case _lh_matchIdent¹⁷ of {
//│ 			LH_P2 _lh_rpo_LH_P2_0⁰ _lh_rpo_LH_P2_1⁰ => case _lh_rpo_LH_P2_0⁰ of {
//│ 				Var _lh_rpo_Var_0⁰ => case _lh_rpo_LH_P2_1⁰ of {
//│ 					Var _lh_rpo_Var_0¹ => if polyEq⁰(_lh_rpo_Var_0⁰, _lh_rpo_Var_0¹) then [Equal] else [Unrelated]
//│ 					| Func _lh_rpo_Func_0⁰ _lh_rpo_Func_1⁰ => if occurs_lh_₂(_lh_rpo_Var_0⁰, [Func _lh_rpo_Func_0⁰ _lh_rpo_Func_1⁰]) then [Less] else [Unrelated]
//│ 					| _  => error⁰([LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]])}
//│ 				| Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹ => case _lh_rpo_LH_P2_1⁰ of {
//│ 					Var _lh_rpo_Var_0² => if occurs_lh_₁(_lh_rpo_Var_0², [Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹]) then [Greater] else [Unrelated]
//│ 					| Func _lh_rpo_Func_0² _lh_rpo_Func_1² => 
//│ 						let _lh_matchIdent¹⁸ = _lh_rpo_arg1⁰([LH_P2 _lh_rpo_Func_0¹ _lh_rpo_Func_0²])
//│ 						in case _lh_matchIdent¹⁸ of {
//│ 							Equal  => _lh_rpo_arg2⁰(rpo'⁰, [LH_P2 [Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹] [Func _lh_rpo_Func_0² _lh_rpo_Func_1²]])
//│ 							| Greater  => if quant_lh_₄(all_lh_₃, ltRewrite_lh_₂(rpo'⁰), [Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹], _lh_rpo_Func_1²) then [Greater] else if quant_lh_₂(any_lh_₁, geRewrite_lh_₁(rpo'⁰), [Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹], _lh_rpo_Func_1²) then [Less] else [Unrelated]
//│ 							| Less  => if quant_lh_₃(all_lh_₂, ltRewrite_lh_₁(rpo'⁰), [Func _lh_rpo_Func_0² _lh_rpo_Func_1²], _lh_rpo_Func_1¹) then [Less] else if quant_lh_₁(any_lh_₂, geRewrite_lh_₂(rpo'⁰), [Func _lh_rpo_Func_0² _lh_rpo_Func_1²], _lh_rpo_Func_1¹) then [Greater] else [Unrelated]
//│ 							| Unrelated  => [Unrelated]}
//│ 					| _  => error⁰([LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]])}
//│ 				| _  => error⁰([LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]])}
//│ 			| _  => error⁰([LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]])})
//│ 	in rpo'⁰
//│ def seQ_lh_₁(_lh_seQ_arg1¹², _lh_seQ_arg2¹²) = build_lh_₁(mk_list_lh_₁(_lh_seQ_arg1¹²), foldr_lh_₃(seq2_lh_₁(mk_cons_lh_₁), empty_lh_₁, _lh_seQ_arg2¹²))
//│ def seQ_lh_₁₀(_lh_seQ_arg1³, _lh_seQ_arg2³) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1³), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2³))
//│ def seQ_lh_₁₁(_lh_seQ_arg1², _lh_seQ_arg2²) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1²), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2²))
//│ def seQ_lh_₁₂(_lh_seQ_arg1¹, _lh_seQ_arg2¹) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1¹), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2¹))
//│ def seQ_lh_₁₃(_lh_seQ_arg1⁰, _lh_seQ_arg2⁰) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1⁰), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2⁰))
//│ def seQ_lh_₂(_lh_seQ_arg1¹¹, _lh_seQ_arg2¹¹) = build_lh_₂(mk_list_lh_₂(_lh_seQ_arg1¹¹), foldr_lh_₄(seq2_lh_₂(mk_cons_lh_₂), empty_lh_₂, _lh_seQ_arg2¹¹))
//│ def seQ_lh_₃(_lh_seQ_arg1¹⁰, _lh_seQ_arg2¹⁰) = build_lh_₃(mk_list_lh_₃(_lh_seQ_arg1¹⁰), foldr_lh_₅(seq2_lh_₃(mk_cons_lh_₃), empty_lh_₃, _lh_seQ_arg2¹⁰))
//│ def seQ_lh_₄(_lh_seQ_arg1⁹, _lh_seQ_arg2⁹) = build_lh_₄(mk_list_lh_₄(_lh_seQ_arg1⁹), foldr_lh_₆(seq2_lh_₄(mk_cons_lh_₄), empty_lh_₄, _lh_seQ_arg2⁹))
//│ def seQ_lh_₅(_lh_seQ_arg1⁸, _lh_seQ_arg2⁸) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1⁸), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2⁸))
//│ def seQ_lh_₆(_lh_seQ_arg1⁷, _lh_seQ_arg2⁷) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1⁷), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2⁷))
//│ def seQ_lh_₇(_lh_seQ_arg1⁶, _lh_seQ_arg2⁶) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1⁶), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2⁶))
//│ def seQ_lh_₈(_lh_seQ_arg1⁵, _lh_seQ_arg2⁵) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1⁵), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2⁵))
//│ def seQ_lh_₉(_lh_seQ_arg1⁴, _lh_seQ_arg2⁴) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1⁴), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2⁴))
//│ def seq2Lzq_lh_₁(_lh_seq2Lzq_arg1¹, _lh_seq2Lzq_arg2¹, _lh_seq2Lzq_arg3¹) = 
//│ 	let g⁴ = (fun xs⁵ -> 
//│ 		let _lh_matchIdent⁷ = xs⁵
//│ 		in case _lh_matchIdent⁷ of {
//│ 			LH_P2 _lh_seq2Lzq_LH_P2_0¹ _lh_seq2Lzq_LH_P2_1¹ => lift_lh_₆(cross_lh_₂(_lh_seq2Lzq_arg1¹(_lh_seq2Lzq_LH_P2_0¹), (fun x¹⁷ -> x¹⁷)), force⁰(_lh_seq2Lzq_arg3¹, _lh_seq2Lzq_LH_P2_1¹))})
//│ 	in (fun _lh_funcomp_x¹⁴ -> (fun _lh_funcomp_x¹⁵ -> squash_lh_₁(lift_lh_₆(g⁴, _lh_funcomp_x¹⁵)))(_lh_seq2Lzq_arg2¹(_lh_funcomp_x¹⁴)))
//│ def seq2Lzq_lh_₂(_lh_seq2Lzq_arg1⁰, _lh_seq2Lzq_arg2⁰, _lh_seq2Lzq_arg3⁰) = 
//│ 	let g¹ = (fun xs² -> 
//│ 		let _lh_matchIdent⁴ = xs²
//│ 		in case _lh_matchIdent⁴ of {
//│ 			LH_P2 _lh_seq2Lzq_LH_P2_0⁰ _lh_seq2Lzq_LH_P2_1⁰ => lift_lh_₆(cross_lh_₂(_lh_seq2Lzq_arg1⁰(_lh_seq2Lzq_LH_P2_0⁰), (fun x⁷ -> x⁷)), force⁰(_lh_seq2Lzq_arg3⁰, _lh_seq2Lzq_LH_P2_1⁰))})
//│ 	in (fun _lh_funcomp_x⁵ -> (fun _lh_funcomp_x⁶ -> squash_lh_₁(lift_lh_₆(g¹, _lh_funcomp_x⁶)))(_lh_seq2Lzq_arg2⁰(_lh_funcomp_x⁵)))
//│ def seq2_lh_₁(_lh_seq2_arg1⁶, _lh_seq2_arg2⁶, _lh_seq2_arg3⁶) = 
//│ 	let g⁸ = (fun xs¹⁰ -> 
//│ 		let _lh_matchIdent¹⁴ = xs¹⁰
//│ 		in case _lh_matchIdent¹⁴ of {
//│ 			LH_P2 _lh_seq2_LH_P2_0⁶ _lh_seq2_LH_P2_1⁶ => lift_lh_₅(cross_lh_₁(_lh_seq2_arg1⁶(_lh_seq2_LH_P2_0⁶), (fun x⁵⁶ -> x⁵⁶)), _lh_seq2_arg3⁶(_lh_seq2_LH_P2_1⁶))})
//│ 	in (fun _lh_funcomp_x³⁰ -> (fun _lh_funcomp_x³¹ -> squash_lh_₁(lift_lh_₄(g⁸, _lh_funcomp_x³¹)))(_lh_seq2_arg2⁶(_lh_funcomp_x³⁰)))
//│ def seq2_lh_₂(_lh_seq2_arg1⁵, _lh_seq2_arg2⁵, _lh_seq2_arg3⁵) = 
//│ 	let g⁷ = (fun xs⁹ -> 
//│ 		let _lh_matchIdent¹³ = xs⁹
//│ 		in case _lh_matchIdent¹³ of {
//│ 			LH_P2 _lh_seq2_LH_P2_0⁵ _lh_seq2_LH_P2_1⁵ => lift_lh_₆(cross_lh_₂(_lh_seq2_arg1⁵(_lh_seq2_LH_P2_0⁵), (fun x³⁸ -> x³⁸)), _lh_seq2_arg3⁵(_lh_seq2_LH_P2_1⁵))})
//│ 	in (fun _lh_funcomp_x²⁵ -> (fun _lh_funcomp_x²⁶ -> squash_lh_₁(lift_lh_₆(g⁷, _lh_funcomp_x²⁶)))(_lh_seq2_arg2⁵(_lh_funcomp_x²⁵)))
//│ def seq2_lh_₃(_lh_seq2_arg1⁴, _lh_seq2_arg2⁴, _lh_seq2_arg3⁴) = 
//│ 	let g⁶ = (fun xs⁸ -> 
//│ 		let _lh_matchIdent⁹ = xs⁸
//│ 		in case _lh_matchIdent⁹ of {
//│ 			LH_P2 _lh_seq2_LH_P2_0⁴ _lh_seq2_LH_P2_1⁴ => lift_lh_₆(cross_lh_₂(_lh_seq2_arg1⁴(_lh_seq2_LH_P2_0⁴), (fun x²² -> x²²)), _lh_seq2_arg3⁴(_lh_seq2_LH_P2_1⁴))})
//│ 	in (fun _lh_funcomp_x²¹ -> (fun _lh_funcomp_x²² -> squash_lh_₁(lift_lh_₆(g⁶, _lh_funcomp_x²²)))(_lh_seq2_arg2⁴(_lh_funcomp_x²¹)))
//│ def seq2_lh_₄(_lh_seq2_arg1³, _lh_seq2_arg2³, _lh_seq2_arg3³) = 
//│ 	let g⁵ = (fun xs⁶ -> 
//│ 		let _lh_matchIdent⁸ = xs⁶
//│ 		in case _lh_matchIdent⁸ of {
//│ 			LH_P2 _lh_seq2_LH_P2_0³ _lh_seq2_LH_P2_1³ => lift_lh_₆(cross_lh_₂(_lh_seq2_arg1³(_lh_seq2_LH_P2_0³), (fun x¹⁸ -> x¹⁸)), _lh_seq2_arg3³(_lh_seq2_LH_P2_1³))})
//│ 	in (fun _lh_funcomp_x¹⁶ -> (fun _lh_funcomp_x¹⁷ -> squash_lh_₁(lift_lh_₆(g⁵, _lh_funcomp_x¹⁷)))(_lh_seq2_arg2³(_lh_funcomp_x¹⁶)))
//│ def seq2_lh_₅(_lh_seq2_arg1², _lh_seq2_arg2², _lh_seq2_arg3²) = 
//│ 	let g³ = (fun xs⁴ -> 
//│ 		let _lh_matchIdent⁶ = xs⁴
//│ 		in case _lh_matchIdent⁶ of {
//│ 			LH_P2 _lh_seq2_LH_P2_0² _lh_seq2_LH_P2_1² => lift_lh_₆(cross_lh_₂(_lh_seq2_arg1²(_lh_seq2_LH_P2_0²), (fun x¹⁵ -> x¹⁵)), _lh_seq2_arg3²(_lh_seq2_LH_P2_1²))})
//│ 	in (fun _lh_funcomp_x¹² -> (fun _lh_funcomp_x¹³ -> squash_lh_₁(lift_lh_₆(g³, _lh_funcomp_x¹³)))(_lh_seq2_arg2²(_lh_funcomp_x¹²)))
//│ def seq2_lh_₆(_lh_seq2_arg1¹, _lh_seq2_arg2¹, _lh_seq2_arg3¹) = 
//│ 	let g² = (fun xs³ -> 
//│ 		let _lh_matchIdent⁵ = xs³
//│ 		in case _lh_matchIdent⁵ of {
//│ 			LH_P2 _lh_seq2_LH_P2_0¹ _lh_seq2_LH_P2_1¹ => lift_lh_₆(cross_lh_₂(_lh_seq2_arg1¹(_lh_seq2_LH_P2_0¹), (fun x⁹ -> x⁹)), _lh_seq2_arg3¹(_lh_seq2_LH_P2_1¹))})
//│ 	in (fun _lh_funcomp_x⁷ -> (fun _lh_funcomp_x⁸ -> squash_lh_₁(lift_lh_₆(g², _lh_funcomp_x⁸)))(_lh_seq2_arg2¹(_lh_funcomp_x⁷)))
//│ def seq2_lh_₇(_lh_seq2_arg1⁰, _lh_seq2_arg2⁰, _lh_seq2_arg3⁰) = 
//│ 	let g⁰ = (fun xs¹ -> 
//│ 		let _lh_matchIdent³ = xs¹
//│ 		in case _lh_matchIdent³ of {
//│ 			LH_P2 _lh_seq2_LH_P2_0⁰ _lh_seq2_LH_P2_1⁰ => lift_lh_₆(cross_lh_₂(_lh_seq2_arg1⁰(_lh_seq2_LH_P2_0⁰), (fun x² -> x²)), _lh_seq2_arg3⁰(_lh_seq2_LH_P2_1⁰))})
//│ 	in (fun _lh_funcomp_x¹ -> (fun _lh_funcomp_x² -> squash_lh_₁(lift_lh_₆(g⁰, _lh_funcomp_x²)))(_lh_seq2_arg2⁰(_lh_funcomp_x¹)))
//│ def sift_lh_₁(_lh_sift_arg1⁰) = (fun _lh_funcomp_x⁰ -> concat_lh_₁(map_lh_₇(listify_lh_₁, _lh_funcomp_x⁰)))(_lh_sift_arg1⁰)
//│ def simplify_lh_₁(_lh_simplify_arg1⁰) = 
//│ 	let f¹³ = (fun t²² -> getOrElse_lh_₁(lift_lh_₁(f¹³, _lh_simplify_arg1⁰(t²²)), t²²))
//│ 	in f¹³
//│ def snd_lh_₁(_lh_snd_arg1⁰) = case _lh_snd_arg1⁰ of {
//│ 	LH_P2 _lh_snd_LH_P2_0⁰ _lh_snd_LH_P2_1⁰ => _lh_snd_LH_P2_1⁰}
//│ def sp_lh_₁(_lh_sp_arg1⁷, _lh_funcomp_x²⁸) = _lh_sp_arg1⁷(dropWhile_lh_₁((fun x⁴² -> polyEq⁰(x⁴², ' ')), _lh_funcomp_x²⁸))
//│ def sp_lh_₂(_lh_sp_arg1⁶, _lh_funcomp_x²⁷) = _lh_sp_arg1⁶(dropWhile_lh_₁((fun x⁴⁰ -> polyEq⁰(x⁴⁰, ' ')), _lh_funcomp_x²⁷))
//│ def sp_lh_₃(_lh_sp_arg1⁵, _lh_funcomp_x²³) = _lh_sp_arg1⁵(dropWhile_lh_₁((fun x²³ -> polyEq⁰(x²³, ' ')), _lh_funcomp_x²³))
//│ def sp_lh_₄(_lh_sp_arg1⁴, _lh_funcomp_x¹⁹) = _lh_sp_arg1⁴(dropWhile_lh_₁((fun x²⁰ -> polyEq⁰(x²⁰, ' ')), _lh_funcomp_x¹⁹))
//│ def sp_lh_₅(_lh_sp_arg1³, _lh_funcomp_x¹¹) = _lh_sp_arg1³(dropWhile_lh_₁((fun x¹⁴ -> polyEq⁰(x¹⁴, ' ')), _lh_funcomp_x¹¹))
//│ def sp_lh_₆(_lh_sp_arg1², _lh_funcomp_x¹⁰) = _lh_sp_arg1²(dropWhile_lh_₁((fun x¹³ -> polyEq⁰(x¹³, ' ')), _lh_funcomp_x¹⁰))
//│ def sp_lh_₇(_lh_sp_arg1¹, _lh_funcomp_x⁹) = _lh_sp_arg1¹(dropWhile_lh_₁((fun x¹⁰ -> polyEq⁰(x¹⁰, ' ')), _lh_funcomp_x⁹))
//│ def sp_lh_₈(_lh_sp_arg1⁰, _lh_funcomp_x⁴) = _lh_sp_arg1⁰(dropWhile_lh_₁((fun x⁶ -> polyEq⁰(x⁶, ' ')), _lh_funcomp_x⁴))
//│ def split_lh_₁(_lh_split_arg1⁰, _lh_split_arg2⁰) = 
//│ 	let tmp⁰ = zip_lh_₁(map_lh_₇(_lh_split_arg1⁰, _lh_split_arg2⁰), _lh_split_arg2⁰)
//│ 	in [LH_P2 
//│ 		let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => case _lh_listcomp_fun_ls_h⁴ of {
//│ 				LH_P2 _lh_split_LH_P2_0⁰ _lh_split_LH_P2_1⁰ => if _lh_split_LH_P2_0⁰ then [LH_C _lh_split_LH_P2_1⁰ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)
//│ 				| _  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁴(tmp⁰) 
//│ 		let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => case _lh_listcomp_fun_ls_h⁵ of {
//│ 				LH_P2 _lh_split_LH_P2_0¹ _lh_split_LH_P2_1¹ => if not⁰(_lh_split_LH_P2_0¹) then [LH_C _lh_split_LH_P2_1¹ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)
//│ 				| _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁵(tmp⁰)]
//│ def squash_lh_₁(_lh_squash_arg1⁰) = case _lh_squash_arg1⁰ of {
//│ 	Just _lh_squash_Just_0⁰ => _lh_squash_Just_0⁰
//│ 	| Nothing  => [Nothing]}
//│ def stand_eqn_lh_₁(_lh_stand_eqn_arg1⁰, _lh_stand_eqn_arg2⁰) = case _lh_stand_eqn_arg2⁰ of {
//│ 	Eqn _lh_stand_eqn_Eqn_0⁰ _lh_stand_eqn_Eqn_1⁰ => case _lh_stand_eqn_Eqn_1⁰ of {
//│ 		LH_P2 _lh_stand_eqn_LH_P2_0⁰ _lh_stand_eqn_LH_P2_1⁰ => [Eqn _lh_stand_eqn_Eqn_0⁰ [LH_P2 stand_lh_₁(_lh_stand_eqn_arg1⁰, _lh_stand_eqn_LH_P2_0⁰) stand_lh_₁(_lh_stand_eqn_arg1⁰, _lh_stand_eqn_LH_P2_1⁰)]]}}
//│ def stand_lh_₁(_lh_stand_arg1⁰) = expr_fold_lh_₄((fun x⁰ -> (fun y⁰ -> [Func x⁰ y⁰])), (fun v⁰ -> [Var mappend_lh_₂(v⁰, _lh_stand_arg1⁰)]))
//│ def strict_super_lh_₁(_lh_strict_super_arg1⁰, _lh_strict_super_arg2⁰) = case _lh_strict_super_arg2⁰ of {
//│ 	Func _lh_strict_super_Func_0⁰ _lh_strict_super_Func_1⁰ => 
//│ 		let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 			LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => case _lh_listcomp_fun_ls_h² of {
//│ 				LH_P2 _lh_strict_super_LH_P2_0⁰ _lh_strict_super_LH_P2_1⁰ => 
//│ 					let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 						LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => case _lh_listcomp_fun_ls_h³ of {
//│ 							LH_P2 _lh_strict_super_LH_P2_0¹ _lh_strict_super_LH_P2_1¹ => [LH_C [LH_P2 [LH_C _lh_strict_super_LH_P2_0⁰ _lh_strict_super_LH_P2_0¹] _lh_strict_super_LH_P2_1¹] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 							| _  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}
//│ 						| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 					in _lh_listcomp_fun³(superpose_lh_₁(_lh_strict_super_arg1⁰, _lh_strict_super_LH_P2_1⁰))
//│ 				| _  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²(zip_lz_nl_lh_₁(enumFrom_lh_₁(0), _lh_strict_super_Func_1⁰))
//│ 	| _  => error⁰}
//│ def string_of_lh_₁(_lh_string_of_arg1³, _lh_string_of_arg2³) = 
//│ 	let chars³ = takeWhile_lh_₁(_lh_string_of_arg1³, _lh_string_of_arg2³)
//│ 	in let s'³ = dropWhile_lh_₁(_lh_string_of_arg1³, _lh_string_of_arg2³)
//│ 	in maybeX_lh_₁(polyNeq⁰(chars³, [LH_N]), [LH_P2 [MkString chars³] s'³])
//│ def string_of_lh_₂(_lh_string_of_arg1², _lh_string_of_arg2²) = 
//│ 	let chars² = takeWhile_lh_₁(_lh_string_of_arg1², _lh_string_of_arg2²)
//│ 	in let s'² = dropWhile_lh_₁(_lh_string_of_arg1², _lh_string_of_arg2²)
//│ 	in maybeX_lh_₁(polyNeq⁰(chars², [LH_N]), [LH_P2 [MkString chars²] s'²])
//│ def string_of_lh_₃(_lh_string_of_arg1¹, _lh_string_of_arg2¹) = 
//│ 	let chars¹ = takeWhile_lh_₁(_lh_string_of_arg1¹, _lh_string_of_arg2¹)
//│ 	in let s'¹ = dropWhile_lh_₁(_lh_string_of_arg1¹, _lh_string_of_arg2¹)
//│ 	in maybeX_lh_₁(polyNeq⁰(chars¹, [LH_N]), [LH_P2 [MkString chars¹] s'¹])
//│ def string_of_lh_₄(_lh_string_of_arg1⁰, _lh_string_of_arg2⁰) = 
//│ 	let chars⁰ = takeWhile_lh_₁(_lh_string_of_arg1⁰, _lh_string_of_arg2⁰)
//│ 	in let s'⁰ = dropWhile_lh_₁(_lh_string_of_arg1⁰, _lh_string_of_arg2⁰)
//│ 	in maybeX_lh_₁(polyNeq⁰(chars⁰, [LH_N]), [LH_P2 [MkString chars⁰] s'⁰])
//│ def sub_lh_₁(_lh_sub_arg1⁰, _lh_sub_arg2⁰) = expr_fold_lh_₄((fun x⁵⁷ -> (fun y⁷ -> [Func x⁵⁷ y⁷])), apply_lh_₁(_lh_sub_arg2⁰), _lh_sub_arg1⁰)
//│ def subterms_lh_₁(_lh_subterms_arg1⁰) = case _lh_subterms_arg1⁰ of {
//│ 	Var _lh_subterms_Var_0⁰ => [LH_N]
//│ 	| Func _lh_subterms_Func_0⁰ _lh_subterms_Func_1⁰ => mappend_lh_₁([LH_C [LH_P2 [LH_N] [Func _lh_subterms_Func_0⁰ _lh_subterms_Func_1⁰]] [LH_N]], 
//│ 		let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => case _lh_listcomp_fun_ls_h⁶ of {
//│ 				LH_P2 _lh_subterms_LH_P2_0⁰ _lh_subterms_LH_P2_1⁰ => 
//│ 					let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 						LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => case _lh_listcomp_fun_ls_h⁷ of {
//│ 							LH_P2 _lh_subterms_LH_P2_0¹ _lh_subterms_LH_P2_1¹ => [LH_C [LH_P2 [LH_C _lh_subterms_LH_P2_0⁰ _lh_subterms_LH_P2_0¹] _lh_subterms_LH_P2_1¹] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)]
//│ 							| _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)}
//│ 						| LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)})
//│ 					in _lh_listcomp_fun⁷(subterms_lh_₁(_lh_subterms_LH_P2_1⁰))
//│ 				| _  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁶(zip_lz_nl_lh_₁(enumFrom_lh_₁(0), _lh_subterms_Func_1⁰)))}
//│ def succeed_lh_₁(_lh_succeed_arg1⁰) = [Just _lh_succeed_arg1⁰]
//│ def sumAux_lh_₁(ls⁹, a⁰) = case ls⁹ of {
//│ 	LH_N  => a⁰
//│ 	| LH_C h¹⁰ t¹¹ => sumAux_lh_₁(t¹¹, (a⁰ + h¹⁰))}
//│ def sum_lh_₁(ls¹⁸) = sumAux_lh_₁(ls¹⁸, 0)
//│ def super_reduce_lh_₁(_lh_super_reduce_arg1⁰) = inside_lh_₁(dnet_reduce_lh_₁(_lh_super_reduce_arg1⁰))
//│ def superpose_lh_₁(_lh_superpose_arg1⁰, _lh_superpose_arg2⁰) = sift_lh_₁(
//│ 	let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {
//│ 			LH_P2 _lh_superpose_LH_P2_0⁰ _lh_superpose_LH_P2_1⁰ => [LH_C lift_lh_₆(pair_lh_₁(_lh_superpose_LH_P2_0⁰), unify_lh_₁(_lh_superpose_arg1⁰, _lh_superpose_LH_P2_1⁰)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 			| _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹(subterms_lh_₁(_lh_superpose_arg2⁰)))
//│ def tail_lh_₁(ls²) = case ls² of {
//│ 	LH_C h² t³ => t³
//│ 	| LH_N  => error⁰}
//│ def takeWhile_lh_₁(_lh_takeWhile_arg1⁰, _lh_takeWhile_arg2⁰) = case _lh_takeWhile_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_takeWhile_LH_C_0⁰ _lh_takeWhile_LH_C_1⁰ => if _lh_takeWhile_arg1⁰(_lh_takeWhile_LH_C_0⁰) then [LH_C _lh_takeWhile_LH_C_0⁰ takeWhile_lh_₁(_lh_takeWhile_arg1⁰, _lh_takeWhile_LH_C_1⁰)] else [LH_N]}
//│ def testRewrite_nofib_lh_₁(_lh_testRewrite_nofib_arg1⁰) = all_lh_₁(result_lh_₁, copy_lh_₁(_lh_testRewrite_nofib_arg1⁰, [LH_P2 [LH_C 'I' [LH_C '(' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'b' [LH_C ')' [LH_N]]]]]]]]] [LH_C 'I' [LH_C '(' [LH_C 'b' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'I' [LH_C '(' [LH_C 'a' [LH_C ')' [LH_N]]]]]]]]]]]]]))
//│ def the_lh_₁(_lh_the_arg1²) = case _lh_the_arg1² of {
//│ 	Just _lh_the_Just_0² => _lh_the_Just_0²
//│ 	| _  => error⁰}
//│ def the_lh_₂(_lh_the_arg1¹) = case _lh_the_arg1¹ of {
//│ 	Just _lh_the_Just_0¹ => _lh_the_Just_0¹
//│ 	| _  => error⁰}
//│ def the_lh_₃(_lh_the_arg1⁰) = case _lh_the_arg1⁰ of {
//│ 	Just _lh_the_Just_0⁰ => _lh_the_Just_0⁰
//│ 	| _  => error⁰}
//│ def thread_lh_₁(_lh_thread_arg1⁰, _lh_thread_arg2⁰, _lh_thread_arg3⁰) = case _lh_thread_arg1⁰ of {
//│ 	LH_C _lh_thread_LH_C_0⁰ _lh_thread_LH_C_1⁰ => case _lh_thread_LH_C_0⁰ of {
//│ 		Afunc _lh_thread_Afunc_0⁰ => case _lh_thread_arg3⁰ of {
//│ 			Switch _lh_thread_Switch_0⁰ _lh_thread_Switch_1⁰ => [Switch update_alist_lh_₁(_lh_thread_Afunc_0⁰, thread_lh_₁(_lh_thread_LH_C_1⁰, _lh_thread_arg2⁰), empty_net_lh_₁, _lh_thread_Switch_0⁰) _lh_thread_Switch_1⁰]
//│ 			| Return _lh_thread_Return_0⁰ => thread_lh_₁([LH_C [Afunc _lh_thread_Afunc_0⁰] _lh_thread_LH_C_1⁰], _lh_thread_arg2⁰, [Switch [LH_N] [Return _lh_thread_Return_0⁰]])}
//│ 		| Avar  => case _lh_thread_arg3⁰ of {
//│ 			Switch _lh_thread_Switch_0¹ _lh_thread_Switch_1¹ => [Switch _lh_thread_Switch_0¹ thread_lh_₁(_lh_thread_LH_C_1⁰, _lh_thread_arg2⁰, _lh_thread_Switch_1¹)]
//│ 			| Return _lh_thread_Return_0¹ => 
//│ 				let d'⁰ = thread_lh_₁(_lh_thread_LH_C_1⁰, _lh_thread_arg2⁰, [Return _lh_thread_Return_0¹])
//│ 				in if is_switch_lh_₁(d'⁰) then [Switch [LH_N] d'⁰] else d'⁰}}
//│ 	| LH_N  => case _lh_thread_arg3⁰ of {
//│ 		Return _lh_thread_Return_0² => [Return [LH_C _lh_thread_arg2⁰ _lh_thread_Return_0²]]}}
//│ def try_all_lh_₁(_lh_try_all_arg1⁰) = foldr_lh_₁(orElseMap_lh_₃, (fun dum¹ -> croak_lh_₁), _lh_try_all_arg1⁰)
//│ def unExpr_lh_₁(_lh_unExpr_arg1²) = case _lh_unExpr_arg1² of {
//│ 	Expr _lh_unExpr_Expr_0² => _lh_unExpr_Expr_0²
//│ 	| _  => error⁰}
//│ def unExpr_lh_₂(_lh_unExpr_arg1¹) = case _lh_unExpr_arg1¹ of {
//│ 	Expr _lh_unExpr_Expr_0¹ => _lh_unExpr_Expr_0¹
//│ 	| _  => error⁰}
//│ def unExpr_lh_₃(_lh_unExpr_arg1⁰) = case _lh_unExpr_arg1⁰ of {
//│ 	Expr _lh_unExpr_Expr_0⁰ => _lh_unExpr_Expr_0⁰
//│ 	| _  => error⁰}
//│ def unify'_lh_₁(_lh_unify'_arg1⁰, _lh_unify'_arg2⁰) = case _lh_unify'_arg2⁰ of {
//│ 	LH_P2 _lh_unify'_LH_P2_0⁰ _lh_unify'_LH_P2_1⁰ => case _lh_unify'_LH_P2_0⁰ of {
//│ 		Var _lh_unify'_Var_0⁰ => univar_lh_₁(_lh_unify'_arg1⁰, _lh_unify'_Var_0⁰, _lh_unify'_LH_P2_1⁰)
//│ 		| Func _lh_unify'_Func_0⁰ _lh_unify'_Func_1⁰ => case _lh_unify'_LH_P2_1⁰ of {
//│ 			Var _lh_unify'_Var_0¹ => univar_lh_₁(_lh_unify'_arg1⁰, _lh_unify'_Var_0¹, [Func _lh_unify'_Func_0⁰ _lh_unify'_Func_1⁰])
//│ 			| Func _lh_unify'_Func_0¹ _lh_unify'_Func_1¹ => if polyEq⁰(_lh_unify'_Func_0⁰, _lh_unify'_Func_0¹) then prop_fold_lh_₁(unify'_lh_₁, _lh_unify'_arg1⁰, zip_lh_₁(_lh_unify'_Func_1⁰, _lh_unify'_Func_1¹)) else croak_lh_₁}}}
//│ def unify_lh_₁(_lh_unify_arg1⁰, _lh_unify_arg2⁰) = unify'_lh_₁([LH_N], [LH_P2 _lh_unify_arg1⁰ _lh_unify_arg2⁰])
//│ def univar_lh_₁(_lh_univar_arg1⁰, _lh_univar_arg2⁰, _lh_univar_arg3⁰) = 
//│ 	let t⁰ = assoc_lh_₁(_lh_univar_arg1⁰, _lh_univar_arg2⁰)
//│ 	in if exists_lh_₁(t⁰) then unify'_lh_₁(_lh_univar_arg1⁰, [LH_P2 the_lh_₃(t⁰) _lh_univar_arg3⁰]) else if eqExpr_lh_₁(_lh_univar_arg3⁰, [Var _lh_univar_arg2⁰]) then succeed_lh_₁(_lh_univar_arg1⁰) else 
//│ 		let u'⁰ = sub_lh_₁(_lh_univar_arg3⁰, _lh_univar_arg1⁰)
//│ 		in if not⁰(occurs_lh_₂(_lh_univar_arg2⁰, u'⁰)) then succeed_lh_₁(comp_sub_lh_₁([LH_C [LH_P2 _lh_univar_arg2⁰ u'⁰] [LH_N]], _lh_univar_arg1⁰)) else croak_lh_₁
//│ def update_alist_lh_₁(_lh_update_alist_arg1⁰, _lh_update_alist_arg2⁰, _lh_update_alist_arg3⁰) = 
//│ 	let upd⁰ = (fun ls⁰ -> 
//│ 		let _lh_matchIdent⁰ = ls⁰
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_N  => [LH_C [LH_P2 _lh_update_alist_arg1⁰ _lh_update_alist_arg2⁰(_lh_update_alist_arg3⁰)] [LH_N]]
//│ 			| LH_C _lh_update_alist_LH_C_0⁰ _lh_update_alist_LH_C_1⁰ => case _lh_update_alist_LH_C_0⁰ of {
//│ 				LH_P2 _lh_update_alist_LH_P2_0⁰ _lh_update_alist_LH_P2_1⁰ => if polyEq⁰(_lh_update_alist_arg1⁰, _lh_update_alist_LH_P2_0⁰) then [LH_C [LH_P2 _lh_update_alist_arg1⁰ _lh_update_alist_arg2⁰(_lh_update_alist_LH_P2_1⁰)] _lh_update_alist_LH_C_1⁰] else [LH_C [LH_P2 _lh_update_alist_LH_P2_0⁰ _lh_update_alist_LH_P2_1⁰] upd⁰(_lh_update_alist_LH_C_1⁰)]}})
//│ 	in upd⁰
//│ def zip_lh_₁(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C hx⁰ tx⁰ => case ys⁰ of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh_₁(tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zip_lz_nl_lh_₁(xs¹¹, ys²) = case ys² of {
//│ 	LH_C hy¹ ty¹ => case force⁰(xs¹¹) of {
//│ 		LH_C hx¹ tx¹ => [LH_C [LH_P2 hx¹ hy¹] zip_lz_nl_lh_₁(tx¹, ty¹)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec all_lh__d1 _lh_all_arg1_4 _lh_all_arg2_4 =
//│ 		  (match _lh_all_arg2_4 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_all_LH_C_0_4, _lh_all_LH_C_1_4) -> 
//│ 		      (if (_lh_all_arg1_4 _lh_all_LH_C_0_4) then
//│ 		        ((all_lh__d1 _lh_all_arg1_4) _lh_all_LH_C_1_4)
//│ 		      else
//│ 		        false));;
//│ 		let rec getOrElse_lh__d1 _lh_getOrElse_arg1_0 _lh_getOrElse_arg2_0 =
//│ 		  (match _lh_getOrElse_arg1_0 with
//│ 		    | `Just(_lh_getOrElse_Just_0_0) -> 
//│ 		      _lh_getOrElse_Just_0_0
//│ 		    | `Nothing -> 
//│ 		      _lh_getOrElse_arg2_0);;
//│ 		let rec lift_lh__d1 _lh_lift_arg1_5 _lh_lift_arg2_5 =
//│ 		  (match _lh_lift_arg2_5 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_lift_Just_0_5) -> 
//│ 		      (`Just((_lh_lift_arg1_5 _lh_lift_Just_0_5))));;
//│ 		let rec simplify_lh__d1 _lh_simplify_arg1_0 =
//│ 		  (let rec f_1_3 = (fun t_2_2 -> 
//│ 		    ((getOrElse_lh__d1 ((lift_lh__d1 f_1_3) (_lh_simplify_arg1_0 t_2_2))) t_2_2)) in
//│ 		    f_1_3);;
//│ 		let rec eqExpr_lh__d1 _lh_eqExpr_arg1_0 _lh_eqExpr_arg2_0 =
//│ 		  (match _lh_eqExpr_arg1_0 with
//│ 		    | `Func(_lh_eqExpr_Func_0_0, _lh_eqExpr_Func_1_0) -> 
//│ 		      (match _lh_eqExpr_arg2_0 with
//│ 		        | `Func(_lh_eqExpr_Func_0_1, _lh_eqExpr_Func_1_1) -> 
//│ 		          ((_lh_eqExpr_Func_0_0 = _lh_eqExpr_Func_0_1) && ((eqListExpr_lh__d1 _lh_eqExpr_Func_1_0) _lh_eqExpr_Func_1_1))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Var(_lh_eqExpr_Var_0_0) -> 
//│ 		      (match _lh_eqExpr_arg2_0 with
//│ 		        | `Var(_lh_eqExpr_Var_0_1) -> 
//│ 		          (_lh_eqExpr_Var_0_0 = _lh_eqExpr_Var_0_1)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false)
//│ 		and
//│ 		eqListExpr_lh__d1 _lh_eqListExpr_arg1_0 _lh_eqListExpr_arg2_0 =
//│ 		  (match _lh_eqListExpr_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (match _lh_eqListExpr_arg2_0 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `LH_C(_lh_eqListExpr_LH_C_0_0, _lh_eqListExpr_LH_C_1_0) -> 
//│ 		      (match _lh_eqListExpr_arg2_0 with
//│ 		        | `LH_C(_lh_eqListExpr_LH_C_0_1, _lh_eqListExpr_LH_C_1_1) -> 
//│ 		          (if ((eqExpr_lh__d1 _lh_eqListExpr_LH_C_0_0) _lh_eqListExpr_LH_C_0_1) then
//│ 		            ((eqListExpr_lh__d1 _lh_eqListExpr_LH_C_1_0) _lh_eqListExpr_LH_C_1_1)
//│ 		          else
//│ 		            false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec num_order_lh__d1 _lh_num_order_arg1_0 =
//│ 		  (match _lh_num_order_arg1_0 with
//│ 		    | `LH_P2(_lh_num_order_LH_P2_0_0, _lh_num_order_LH_P2_1_0) -> 
//│ 		      (if (_lh_num_order_LH_P2_0_0 > _lh_num_order_LH_P2_1_0) then
//│ 		        (`Greater)
//│ 		      else
//│ 		        (if (_lh_num_order_LH_P2_0_0 < _lh_num_order_LH_P2_1_0) then
//│ 		          (`Less)
//│ 		        else
//│ 		          (`Equal))));;
//│ 		let rec rank_order_lh__d1 _lh_rank_order_arg1_0 _lh_rank_order_arg2_0 =
//│ 		  (match _lh_rank_order_arg2_0 with
//│ 		    | `LH_P2(_lh_rank_order_LH_P2_0_0, _lh_rank_order_LH_P2_1_0) -> 
//│ 		      (num_order_lh__d1 (`LH_P2((_lh_rank_order_arg1_0 _lh_rank_order_LH_P2_0_0), (_lh_rank_order_arg1_0 _lh_rank_order_LH_P2_1_0)))));;
//│ 		let rec inList_lh__d4 _lh_inList_arg1_0 _lh_inList_arg2_0 =
//│ 		  (match _lh_inList_arg2_0 with
//│ 		    | `LH_C(_lh_inList_LH_C_0_0, _lh_inList_LH_C_1_0) -> 
//│ 		      (if (_lh_inList_arg1_0 = _lh_inList_LH_C_0_0) then
//│ 		        true
//│ 		      else
//│ 		        ((inList_lh__d4 _lh_inList_arg1_0) _lh_inList_LH_C_1_0))
//│ 		    | `LH_N -> 
//│ 		      false);;
//│ 		let rec opsym_lh__d2 _lh_opsym_arg1_0 =
//│ 		  ((fun x_3_9 -> 
//│ 		    ((inList_lh__d4 x_3_9) (`LH_C('*', (`LH_C('+', (`LH_C('%', (`LH_C('@', (`LH_C('-', (`LH_C('/', (`LH_C('?', (`LH_C(':', (`LH_N))))))))))))))))))) _lh_opsym_arg1_0);;
//│ 		let rec dropWhile_lh__d1 _lh_dropWhile_arg1_0 _lh_dropWhile_arg2_0 =
//│ 		  (match _lh_dropWhile_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_dropWhile_LH_C_0_0, _lh_dropWhile_LH_C_1_0) -> 
//│ 		      (if (_lh_dropWhile_arg1_0 _lh_dropWhile_LH_C_0_0) then
//│ 		        ((dropWhile_lh__d1 _lh_dropWhile_arg1_0) _lh_dropWhile_LH_C_1_0)
//│ 		      else
//│ 		        (`LH_C(_lh_dropWhile_LH_C_0_0, _lh_dropWhile_LH_C_1_0))));;
//│ 		let rec takeWhile_lh__d1 _lh_takeWhile_arg1_0 _lh_takeWhile_arg2_0 =
//│ 		  (match _lh_takeWhile_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_takeWhile_LH_C_0_0, _lh_takeWhile_LH_C_1_0) -> 
//│ 		      (if (_lh_takeWhile_arg1_0 _lh_takeWhile_LH_C_0_0) then
//│ 		        (`LH_C(_lh_takeWhile_LH_C_0_0, ((takeWhile_lh__d1 _lh_takeWhile_arg1_0) _lh_takeWhile_LH_C_1_0)))
//│ 		      else
//│ 		        (`LH_N)));;
//│ 		let rec maybeX_lh__d1 _lh_maybeX_arg1_0 _lh_maybeX_arg2_0 =
//│ 		  (if _lh_maybeX_arg1_0 then
//│ 		    (`Just(_lh_maybeX_arg2_0))
//│ 		  else
//│ 		    (`Nothing));;
//│ 		let rec string_of_lh__d2 _lh_string_of_arg1_2 _lh_string_of_arg2_2 =
//│ 		  (let rec chars_2 = ((takeWhile_lh__d1 _lh_string_of_arg1_2) _lh_string_of_arg2_2) in
//│ 		    (let rec s'_2 = ((dropWhile_lh__d1 _lh_string_of_arg1_2) _lh_string_of_arg2_2) in
//│ 		      ((maybeX_lh__d1 (chars_2 <> (`LH_N))) (`LH_P2((`MkString(chars_2)), s'_2)))));;
//│ 		let rec sp_lh__d2 _lh_sp_arg1_6 _lh_funcomp_x_2_7 =
//│ 		  (_lh_sp_arg1_6 ((dropWhile_lh__d1 (fun x_4_0 -> 
//│ 		    (x_4_0 = ' '))) _lh_funcomp_x_2_7));;
//│ 		let rec p_op_lh__d2 _lh_p_op_arg1_2 =
//│ 		  ((sp_lh__d2 (string_of_lh__d2 opsym_lh__d2)) _lh_p_op_arg1_2);;
//│ 		let rec q_op_lh__d2 _lh_q_op_arg1_2 =
//│ 		  (match _lh_q_op_arg1_2 with
//│ 		    | `LH_C(_lh_q_op_LH_C_0_6, _lh_q_op_LH_C_1_6) -> 
//│ 		      (match _lh_q_op_LH_C_0_6 with
//│ 		        | `Expr(_lh_q_op_Expr_0_4) -> 
//│ 		          (match _lh_q_op_LH_C_1_6 with
//│ 		            | `LH_C(_lh_q_op_LH_C_0_7, _lh_q_op_LH_C_1_7) -> 
//│ 		              (match _lh_q_op_LH_C_0_7 with
//│ 		                | `MkString(_lh_q_op_MkString_0_2) -> 
//│ 		                  (match _lh_q_op_LH_C_1_7 with
//│ 		                    | `LH_C(_lh_q_op_LH_C_0_8, _lh_q_op_LH_C_1_8) -> 
//│ 		                      (match _lh_q_op_LH_C_0_8 with
//│ 		                        | `Expr(_lh_q_op_Expr_0_5) -> 
//│ 		                          (match _lh_q_op_LH_C_1_8 with
//│ 		                            | `LH_N -> 
//│ 		                              (`Expr((`Func(_lh_q_op_MkString_0_2, (`LH_C(_lh_q_op_Expr_0_4, (`LH_C(_lh_q_op_Expr_0_5, (`LH_N)))))))))
//│ 		                            | _ -> 
//│ 		                              (failwith "lh_default_error"))
//│ 		                        | _ -> 
//│ 		                          (failwith "lh_default_error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "lh_default_error"))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec map_lh__d7 f_1 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_5, t_6) -> 
//│ 		      (`LH_C((f_1 h_5), ((map_lh__d7 f_1) t_6)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec unExpr_lh__d3 _lh_unExpr_arg1_0 =
//│ 		  (match _lh_unExpr_arg1_0 with
//│ 		    | `Expr(_lh_unExpr_Expr_0_0) -> 
//│ 		      _lh_unExpr_Expr_0_0
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec q_func_lh__d6 _lh_q_func_arg1_0 =
//│ 		  (match _lh_q_func_arg1_0 with
//│ 		    | `LH_C(_lh_q_func_LH_C_0_0, _lh_q_func_LH_C_1_0) -> 
//│ 		      (match _lh_q_func_LH_C_0_0 with
//│ 		        | `MkString(_lh_q_func_MkString_0_0) -> 
//│ 		          (match _lh_q_func_LH_C_1_0 with
//│ 		            | `LH_C(_lh_q_func_LH_C_0_1, _lh_q_func_LH_C_1_1) -> 
//│ 		              (match _lh_q_func_LH_C_1_1 with
//│ 		                | `LH_C(_lh_q_func_LH_C_0_2, _lh_q_func_LH_C_1_2) -> 
//│ 		                  (match _lh_q_func_LH_C_0_2 with
//│ 		                    | `List(_lh_q_func_List_0_0) -> 
//│ 		                      (match _lh_q_func_LH_C_1_2 with
//│ 		                        | `LH_C(_lh_q_func_LH_C_0_3, _lh_q_func_LH_C_1_3) -> 
//│ 		                          (match _lh_q_func_LH_C_1_3 with
//│ 		                            | `LH_N -> 
//│ 		                              (`Expr((`Func(_lh_q_func_MkString_0_0, ((map_lh__d7 unExpr_lh__d3) _lh_q_func_List_0_0)))))
//│ 		                            | _ -> 
//│ 		                              (failwith "lh_default_error"))
//│ 		                        | _ -> 
//│ 		                          (failwith "lh_default_error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "lh_default_error"))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec orElse_lh__d6 _lh_orElse_arg1_0 _lh_orElse_arg2_0 =
//│ 		  (match _lh_orElse_arg1_0 with
//│ 		    | `Nothing -> 
//│ 		      _lh_orElse_arg2_0
//│ 		    | _ -> 
//│ 		      _lh_orElse_arg1_0);;
//│ 		let rec orElseMap_lh__d1_d5 _lh_orElseMap_arg1_0 _lh_orElseMap_arg2_0 _lh_orElseMap_arg3_0 =
//│ 		  ((orElse_lh__d6 (_lh_orElseMap_arg1_0 _lh_orElseMap_arg3_0)) (_lh_orElseMap_arg2_0 _lh_orElseMap_arg3_0));;
//│ 		let rec sp_lh__d8 _lh_sp_arg1_0 _lh_funcomp_x_4 =
//│ 		  (_lh_sp_arg1_0 ((dropWhile_lh__d1 (fun x_6 -> 
//│ 		    (x_6 = ' '))) _lh_funcomp_x_4));;
//│ 		let rec croak_lh__d1 =
//│ 		  (`Nothing);;
//│ 		let rec succeed_lh__d1 _lh_succeed_arg1_0 =
//│ 		  (`Just(_lh_succeed_arg1_0));;
//│ 		let rec pchar_lh__d4 _lh_pchar_arg1_0 _lh_pchar_arg2_0 =
//│ 		  (match _lh_pchar_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      croak_lh__d1
//│ 		    | `LH_C(_lh_pchar_LH_C_0_0, _lh_pchar_LH_C_1_0) -> 
//│ 		      (if (_lh_pchar_arg1_0 _lh_pchar_LH_C_0_0) then
//│ 		        (succeed_lh__d1 (`LH_P2((`MkString((`LH_C(_lh_pchar_LH_C_0_0, (`LH_N))))), _lh_pchar_LH_C_1_0)))
//│ 		      else
//│ 		        croak_lh__d1));;
//│ 		let rec look_for_lh__d1_d9 _lh_look_for_arg1_0 =
//│ 		  (sp_lh__d8 (pchar_lh__d4 (fun x_4 -> 
//│ 		    (x_4 = _lh_look_for_arg1_0))));;
//│ 		let rec empty_lh__d6 _lh_empty_arg1_0 =
//│ 		  (succeed_lh__d1 (`LH_P2((`List((`LH_N))), _lh_empty_arg1_0)));;
//│ 		let rec foldr_lh__d6 f_2 i_0 ls_6 =
//│ 		  (match ls_6 with
//│ 		    | `LH_C(h_6, t_7) -> 
//│ 		      ((f_2 h_6) (((foldr_lh__d6 f_2) i_0) t_7))
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec lift_lh__d6 _lh_lift_arg1_0 _lh_lift_arg2_0 =
//│ 		  (match _lh_lift_arg2_0 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_lift_Just_0_0) -> 
//│ 		      (`Just((_lh_lift_arg1_0 _lh_lift_Just_0_0))));;
//│ 		let rec cross_lh__d2 _lh_cross_arg1_0 _lh_cross_arg2_0 _lh_cross_arg3_0 =
//│ 		  (match _lh_cross_arg3_0 with
//│ 		    | `LH_P2(_lh_cross_LH_P2_0_0, _lh_cross_LH_P2_1_0) -> 
//│ 		      (`LH_P2((_lh_cross_arg1_0 _lh_cross_LH_P2_0_0), (_lh_cross_arg2_0 _lh_cross_LH_P2_1_0))));;
//│ 		let rec squash_lh__d1 _lh_squash_arg1_0 =
//│ 		  (match _lh_squash_arg1_0 with
//│ 		    | `Just(_lh_squash_Just_0_0) -> 
//│ 		      _lh_squash_Just_0_0
//│ 		    | `Nothing -> 
//│ 		      (`Nothing));;
//│ 		let rec seq2_lh__d7 _lh_seq2_arg1_0 _lh_seq2_arg2_0 _lh_seq2_arg3_0 =
//│ 		  (let rec g_0 = (fun xs_1 -> 
//│ 		    (let rec _lh_matchIdent_3 = xs_1 in
//│ 		      (match _lh_matchIdent_3 with
//│ 		        | `LH_P2(_lh_seq2_LH_P2_0_0, _lh_seq2_LH_P2_1_0) -> 
//│ 		          ((lift_lh__d6 ((cross_lh__d2 (_lh_seq2_arg1_0 _lh_seq2_LH_P2_0_0)) (fun x_2 -> 
//│ 		            x_2))) (_lh_seq2_arg3_0 _lh_seq2_LH_P2_1_0))))) in
//│ 		    (fun _lh_funcomp_x_1 -> 
//│ 		      ((fun _lh_funcomp_x_2 -> 
//│ 		        (squash_lh__d1 ((lift_lh__d6 g_0) _lh_funcomp_x_2))) (_lh_seq2_arg2_0 _lh_funcomp_x_1))));;
//│ 		let rec mk_cons_lh__d7 _lh_mk_cons_arg1_0 _lh_mk_cons_arg2_0 =
//│ 		  (match _lh_mk_cons_arg2_0 with
//│ 		    | `List(_lh_mk_cons_List_0_0) -> 
//│ 		      (`List((`LH_C(_lh_mk_cons_arg1_0, _lh_mk_cons_List_0_0))))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec build_lh__d5 _lh_build_arg1_0 _lh_build_arg2_0 _lh_funcomp_x_3 =
//│ 		  ((lift_lh__d6 ((cross_lh__d2 _lh_build_arg1_0) (fun x_3 -> 
//│ 		    x_3))) (_lh_build_arg2_0 _lh_funcomp_x_3));;
//│ 		let rec mk_list_lh__d5 _lh_mk_list_arg1_0 _lh_mk_list_arg2_0 =
//│ 		  (match _lh_mk_list_arg2_0 with
//│ 		    | `List(_lh_mk_list_List_0_0) -> 
//│ 		      (_lh_mk_list_arg1_0 _lh_mk_list_List_0_0)
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec seQ_lh__d1_d3 _lh_seQ_arg1_0 _lh_seQ_arg2_0 =
//│ 		  ((build_lh__d5 (mk_list_lh__d5 _lh_seQ_arg1_0)) (((foldr_lh__d6 (seq2_lh__d7 mk_cons_lh__d7)) empty_lh__d6) _lh_seQ_arg2_0));;
//│ 		let rec atIndex_lh__d2 n_0 ls_3 =
//│ 		  (if (n_0 < 0) then
//│ 		    (failwith "lh_default_error")
//│ 		  else
//│ 		    (match ls_3 with
//│ 		      | `LH_C(h_3, t_4) -> 
//│ 		        (if (n_0 = 0) then
//│ 		          h_3
//│ 		        else
//│ 		          ((atIndex_lh__d2 (n_0 - 1)) t_4))
//│ 		      | `LH_N -> 
//│ 		        (failwith "lh_default_error")));;
//│ 		let rec q_name_lh__d1 _lh_q_name_arg1_0 =
//│ 		  (match _lh_q_name_arg1_0 with
//│ 		    | `MkString(_lh_q_name_MkString_0_0) -> 
//│ 		      (if (((int_of_char ((atIndex_lh__d2 0) _lh_q_name_MkString_0_0)) >= (int_of_char 'a')) && ((int_of_char ((atIndex_lh__d2 0) _lh_q_name_MkString_0_0)) <= (int_of_char 'z'))) then
//│ 		        (`Expr((`Var(_lh_q_name_MkString_0_0))))
//│ 		      else
//│ 		        (`Expr((`Func(_lh_q_name_MkString_0_0, (`LH_N))))))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec string_of_lh__d4 _lh_string_of_arg1_0 _lh_string_of_arg2_0 =
//│ 		  (let rec chars_0 = ((takeWhile_lh__d1 _lh_string_of_arg1_0) _lh_string_of_arg2_0) in
//│ 		    (let rec s'_0 = ((dropWhile_lh__d1 _lh_string_of_arg1_0) _lh_string_of_arg2_0) in
//│ 		      ((maybeX_lh__d1 (chars_0 <> (`LH_N))) (`LH_P2((`MkString(chars_0)), s'_0)))));;
//│ 		let rec alphanum_lh__d2 _lh_alphanum_arg1_0 =
//│ 		  (((((int_of_char _lh_alphanum_arg1_0) >= (int_of_char 'A')) && ((int_of_char _lh_alphanum_arg1_0) <= (int_of_char 'Z'))) || (((int_of_char _lh_alphanum_arg1_0) >= (int_of_char 'a')) && ((int_of_char _lh_alphanum_arg1_0) <= (int_of_char 'z')))) || (((int_of_char _lh_alphanum_arg1_0) >= (int_of_char '0')) && ((int_of_char _lh_alphanum_arg1_0) <= (int_of_char '9'))));;
//│ 		let rec p_ident_lh__d6 _lh_p_ident_arg1_0 =
//│ 		  ((sp_lh__d8 (string_of_lh__d4 alphanum_lh__d2)) _lh_p_ident_arg1_0);;
//│ 		let rec p_name_lh__d2 _lh_p_name_arg1_0 =
//│ 		  (((build_lh__d5 q_name_lh__d1) p_ident_lh__d6) _lh_p_name_arg1_0);;
//│ 		let rec seQ_lh__d9 _lh_seQ_arg1_4 _lh_seQ_arg2_4 =
//│ 		  ((build_lh__d5 (mk_list_lh__d5 _lh_seQ_arg1_4)) (((foldr_lh__d6 (seq2_lh__d7 mk_cons_lh__d7)) empty_lh__d6) _lh_seQ_arg2_4));;
//│ 		let rec seq2Lzq_lh__d2 _lh_seq2Lzq_arg1_0 _lh_seq2Lzq_arg2_0 _lh_seq2Lzq_arg3_0 =
//│ 		  (let rec g_1 = (fun xs_2 -> 
//│ 		    (let rec _lh_matchIdent_4 = xs_2 in
//│ 		      (match _lh_matchIdent_4 with
//│ 		        | `LH_P2(_lh_seq2Lzq_LH_P2_0_0, _lh_seq2Lzq_LH_P2_1_0) -> 
//│ 		          ((lift_lh__d6 ((cross_lh__d2 (_lh_seq2Lzq_arg1_0 _lh_seq2Lzq_LH_P2_0_0)) (fun x_7 -> 
//│ 		            x_7))) ((Lazy.force _lh_seq2Lzq_arg3_0) _lh_seq2Lzq_LH_P2_1_0))))) in
//│ 		    (fun _lh_funcomp_x_5 -> 
//│ 		      ((fun _lh_funcomp_x_6 -> 
//│ 		        (squash_lh__d1 ((lift_lh__d6 g_1) _lh_funcomp_x_6))) (_lh_seq2Lzq_arg2_0 _lh_funcomp_x_5))));;
//│ 		let rec list_of_lh__d6 _lh_list_of_arg1_0 _lh_list_of_arg2_0 =
//│ 		  (let rec p'_0 = (lazy (((seq2_lh__d7 mk_cons_lh__d7) _lh_list_of_arg1_0) ((orElseMap_lh__d1_d5 (((seq2Lzq_lh__d2 (fun x_2_7 y_1 -> 
//│ 		    y_1)) (look_for_lh__d1_d9 _lh_list_of_arg2_0)) p'_0)) empty_lh__d6))) in
//│ 		    (Lazy.force p'_0));;
//│ 		let rec look_for_lh__d1_d2 _lh_look_for_arg1_7 =
//│ 		  (sp_lh__d8 (pchar_lh__d4 (fun x_2_8 -> 
//│ 		    (x_2_8 = _lh_look_for_arg1_7))));;
//│ 		let rec look_for_lh__d1_d3 _lh_look_for_arg1_6 =
//│ 		  (sp_lh__d8 (pchar_lh__d4 (fun x_2_6 -> 
//│ 		    (x_2_6 = _lh_look_for_arg1_6))));;
//│ 		let rec orElseMap_lh__d9 _lh_orElseMap_arg1_6 _lh_orElseMap_arg2_6 _lh_orElseMap_arg3_6 =
//│ 		  ((orElse_lh__d6 (_lh_orElseMap_arg1_6 _lh_orElseMap_arg3_6)) (_lh_orElseMap_arg2_6 _lh_orElseMap_arg3_6));;
//│ 		let rec build_lh__d2 _lh_build_arg1_3 _lh_build_arg2_3 _lh_funcomp_x_2_4 =
//│ 		  ((lift_lh__d6 ((cross_lh__d2 _lh_build_arg1_3) (fun x_3_7 -> 
//│ 		    x_3_7))) (_lh_build_arg2_3 _lh_funcomp_x_2_4));;
//│ 		let rec mk_list_lh__d2 _lh_mk_list_arg1_3 _lh_mk_list_arg2_3 =
//│ 		  (match _lh_mk_list_arg2_3 with
//│ 		    | `List(_lh_mk_list_List_0_3) -> 
//│ 		      (_lh_mk_list_arg1_3 _lh_mk_list_List_0_3)
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec empty_lh__d2 _lh_empty_arg1_4 =
//│ 		  (succeed_lh__d1 (`LH_P2((`List((`LH_N))), _lh_empty_arg1_4)));;
//│ 		let rec mk_cons_lh__d2 _lh_mk_cons_arg1_5 _lh_mk_cons_arg2_5 =
//│ 		  (match _lh_mk_cons_arg2_5 with
//│ 		    | `List(_lh_mk_cons_List_0_5) -> 
//│ 		      (`List((`LH_C(_lh_mk_cons_arg1_5, _lh_mk_cons_List_0_5))))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec foldr_lh__d4 f_6 i_2 ls_1_2 =
//│ 		  (match ls_1_2 with
//│ 		    | `LH_C(h_1_2, t_1_3) -> 
//│ 		      ((f_6 h_1_2) (((foldr_lh__d4 f_6) i_2) t_1_3))
//│ 		    | `LH_N -> 
//│ 		      i_2);;
//│ 		let rec seq2_lh__d2 _lh_seq2_arg1_5 _lh_seq2_arg2_5 _lh_seq2_arg3_5 =
//│ 		  (let rec g_7 = (fun xs_9 -> 
//│ 		    (let rec _lh_matchIdent_1_3 = xs_9 in
//│ 		      (match _lh_matchIdent_1_3 with
//│ 		        | `LH_P2(_lh_seq2_LH_P2_0_5, _lh_seq2_LH_P2_1_5) -> 
//│ 		          ((lift_lh__d6 ((cross_lh__d2 (_lh_seq2_arg1_5 _lh_seq2_LH_P2_0_5)) (fun x_3_8 -> 
//│ 		            x_3_8))) (_lh_seq2_arg3_5 _lh_seq2_LH_P2_1_5))))) in
//│ 		    (fun _lh_funcomp_x_2_5 -> 
//│ 		      ((fun _lh_funcomp_x_2_6 -> 
//│ 		        (squash_lh__d1 ((lift_lh__d6 g_7) _lh_funcomp_x_2_6))) (_lh_seq2_arg2_5 _lh_funcomp_x_2_5))));;
//│ 		let rec seQ_lh__d2 _lh_seQ_arg1_1_1 _lh_seQ_arg2_1_1 =
//│ 		  ((build_lh__d2 (mk_list_lh__d2 _lh_seQ_arg1_1_1)) (((foldr_lh__d4 (seq2_lh__d2 mk_cons_lh__d2)) empty_lh__d2) _lh_seQ_arg2_1_1));;
//│ 		let rec seQ_lh__d7 _lh_seQ_arg1_6 _lh_seQ_arg2_6 =
//│ 		  ((build_lh__d5 (mk_list_lh__d5 _lh_seQ_arg1_6)) (((foldr_lh__d6 (seq2_lh__d7 mk_cons_lh__d7)) empty_lh__d6) _lh_seQ_arg2_6));;
//│ 		let rec p_ident_lh__d4 _lh_p_ident_arg1_2 =
//│ 		  ((sp_lh__d8 (string_of_lh__d4 alphanum_lh__d2)) _lh_p_ident_arg1_2);;
//│ 		let rec look_for_lh__d9 _lh_look_for_arg1_1_0 =
//│ 		  (sp_lh__d8 (pchar_lh__d4 (fun x_3_4 -> 
//│ 		    (x_3_4 = _lh_look_for_arg1_1_0))));;
//│ 		let rec look_for_lh__d8 _lh_look_for_arg1_1_1 =
//│ 		  (sp_lh__d8 (pchar_lh__d4 (fun x_3_6 -> 
//│ 		    (x_3_6 = _lh_look_for_arg1_1_1))));;
//│ 		let rec orElseMap_lh__d7 _lh_orElseMap_arg1_8 _lh_orElseMap_arg2_8 _lh_orElseMap_arg3_8 =
//│ 		  ((orElse_lh__d6 (_lh_orElseMap_arg1_8 _lh_orElseMap_arg3_8)) (_lh_orElseMap_arg2_8 _lh_orElseMap_arg3_8));;
//│ 		let rec q_func_lh__d4 _lh_q_func_arg1_2 =
//│ 		  (match _lh_q_func_arg1_2 with
//│ 		    | `LH_C(_lh_q_func_LH_C_0_8, _lh_q_func_LH_C_1_8) -> 
//│ 		      (match _lh_q_func_LH_C_0_8 with
//│ 		        | `MkString(_lh_q_func_MkString_0_2) -> 
//│ 		          (match _lh_q_func_LH_C_1_8 with
//│ 		            | `LH_C(_lh_q_func_LH_C_0_9, _lh_q_func_LH_C_1_9) -> 
//│ 		              (match _lh_q_func_LH_C_1_9 with
//│ 		                | `LH_C(_lh_q_func_LH_C_0_1_0, _lh_q_func_LH_C_1_1_0) -> 
//│ 		                  (match _lh_q_func_LH_C_0_1_0 with
//│ 		                    | `List(_lh_q_func_List_0_2) -> 
//│ 		                      (match _lh_q_func_LH_C_1_1_0 with
//│ 		                        | `LH_C(_lh_q_func_LH_C_0_1_1, _lh_q_func_LH_C_1_1_1) -> 
//│ 		                          (match _lh_q_func_LH_C_1_1_1 with
//│ 		                            | `LH_N -> 
//│ 		                              (`Expr((`Func(_lh_q_func_MkString_0_2, ((map_lh__d7 unExpr_lh__d3) _lh_q_func_List_0_2)))))
//│ 		                            | _ -> 
//│ 		                              (failwith "lh_default_error"))
//│ 		                        | _ -> 
//│ 		                          (failwith "lh_default_error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "lh_default_error"))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec list_of_lh__d4 _lh_list_of_arg1_2 _lh_list_of_arg2_2 =
//│ 		  (let rec p'_2 = (lazy (((seq2_lh__d7 mk_cons_lh__d7) _lh_list_of_arg1_2) ((orElseMap_lh__d1_d5 (((seq2Lzq_lh__d2 (fun x_3_3 y_3 -> 
//│ 		    y_3)) (look_for_lh__d1_d9 _lh_list_of_arg2_2)) p'_2)) empty_lh__d6))) in
//│ 		    (Lazy.force p'_2));;
//│ 		let rec orElseMap_lh__d8 _lh_orElseMap_arg1_7 _lh_orElseMap_arg2_7 _lh_orElseMap_arg3_7 =
//│ 		  ((orElse_lh__d6 (_lh_orElseMap_arg1_7 _lh_orElseMap_arg3_7)) (_lh_orElseMap_arg2_7 _lh_orElseMap_arg3_7));;
//│ 		let rec look_for_lh__d1_d1 _lh_look_for_arg1_8 =
//│ 		  (sp_lh__d8 (pchar_lh__d4 (fun x_2_9 -> 
//│ 		    (x_2_9 = _lh_look_for_arg1_8))));;
//│ 		let rec look_for_lh__d1_d0 _lh_look_for_arg1_9 =
//│ 		  (sp_lh__d8 (pchar_lh__d4 (fun x_3_1 -> 
//│ 		    (x_3_1 = _lh_look_for_arg1_9))));;
//│ 		let rec q_func_lh__d5 _lh_q_func_arg1_1 =
//│ 		  (match _lh_q_func_arg1_1 with
//│ 		    | `LH_C(_lh_q_func_LH_C_0_4, _lh_q_func_LH_C_1_4) -> 
//│ 		      (match _lh_q_func_LH_C_0_4 with
//│ 		        | `MkString(_lh_q_func_MkString_0_1) -> 
//│ 		          (match _lh_q_func_LH_C_1_4 with
//│ 		            | `LH_C(_lh_q_func_LH_C_0_5, _lh_q_func_LH_C_1_5) -> 
//│ 		              (match _lh_q_func_LH_C_1_5 with
//│ 		                | `LH_C(_lh_q_func_LH_C_0_6, _lh_q_func_LH_C_1_6) -> 
//│ 		                  (match _lh_q_func_LH_C_0_6 with
//│ 		                    | `List(_lh_q_func_List_0_1) -> 
//│ 		                      (match _lh_q_func_LH_C_1_6 with
//│ 		                        | `LH_C(_lh_q_func_LH_C_0_7, _lh_q_func_LH_C_1_7) -> 
//│ 		                          (match _lh_q_func_LH_C_1_7 with
//│ 		                            | `LH_N -> 
//│ 		                              (`Expr((`Func(_lh_q_func_MkString_0_1, ((map_lh__d7 unExpr_lh__d3) _lh_q_func_List_0_1)))))
//│ 		                            | _ -> 
//│ 		                              (failwith "lh_default_error"))
//│ 		                        | _ -> 
//│ 		                          (failwith "lh_default_error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "lh_default_error"))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec seQ_lh__d8 _lh_seQ_arg1_5 _lh_seQ_arg2_5 =
//│ 		  ((build_lh__d5 (mk_list_lh__d5 _lh_seQ_arg1_5)) (((foldr_lh__d6 (seq2_lh__d7 mk_cons_lh__d7)) empty_lh__d6) _lh_seQ_arg2_5));;
//│ 		let rec p_ident_lh__d5 _lh_p_ident_arg1_1 =
//│ 		  ((sp_lh__d8 (string_of_lh__d4 alphanum_lh__d2)) _lh_p_ident_arg1_1);;
//│ 		let rec list_of_lh__d5 _lh_list_of_arg1_1 _lh_list_of_arg2_1 =
//│ 		  (let rec p'_1 = (lazy (((seq2_lh__d7 mk_cons_lh__d7) _lh_list_of_arg1_1) ((orElseMap_lh__d1_d5 (((seq2Lzq_lh__d2 (fun x_3_2 y_2 -> 
//│ 		    y_2)) (look_for_lh__d1_d9 _lh_list_of_arg2_1)) p'_1)) empty_lh__d6))) in
//│ 		    (Lazy.force p'_1));;
//│ 		let rec orElse_lh__d3 _lh_orElse_arg1_3 _lh_orElse_arg2_3 =
//│ 		  (match _lh_orElse_arg1_3 with
//│ 		    | `Nothing -> 
//│ 		      _lh_orElse_arg2_3
//│ 		    | _ -> 
//│ 		      _lh_orElse_arg1_3);;
//│ 		let rec orElseMap_lh__d2 _lh_orElseMap_arg1_1_3 _lh_orElseMap_arg2_1_3 _lh_orElseMap_arg3_1_3 =
//│ 		  ((orElse_lh__d3 (_lh_orElseMap_arg1_1_3 _lh_orElseMap_arg3_1_3)) (_lh_orElseMap_arg2_1_3 _lh_orElseMap_arg3_1_3));;
//│ 		let rec p_expr_lh__d2 _lh_p_expr_arg1_2 =
//│ 		  (((orElseMap_lh__d2 ((seQ_lh__d2 q_op_lh__d2) (`LH_C(p_term_lh__d4, (`LH_C(p_op_lh__d2, (`LH_C(p_term_lh__d6, (`LH_N))))))))) p_term_lh__d5) _lh_p_expr_arg1_2)
//│ 		and
//│ 		p_prim_lh__d4 _lh_p_prim_arg1_2 =
//│ 		  (((orElseMap_lh__d1_d5 p_name_lh__d2) ((seQ_lh__d1_d3 (fun x_3_5 -> 
//│ 		    ((atIndex_lh__d2 1) x_3_5))) (`LH_C((look_for_lh__d1_d9 '('), (`LH_C(p_expr_lh__d2, (`LH_C((look_for_lh__d1_d9 ')'), (`LH_N))))))))) _lh_p_prim_arg1_2)
//│ 		and
//│ 		p_prim_lh__d5 _lh_p_prim_arg1_1 =
//│ 		  (((orElseMap_lh__d1_d5 p_name_lh__d2) ((seQ_lh__d1_d3 (fun x_3_0 -> 
//│ 		    ((atIndex_lh__d2 1) x_3_0))) (`LH_C((look_for_lh__d1_d9 '('), (`LH_C(p_expr_lh__d2, (`LH_C((look_for_lh__d1_d9 ')'), (`LH_N))))))))) _lh_p_prim_arg1_1)
//│ 		and
//│ 		p_prim_lh__d6 _lh_p_prim_arg1_0 =
//│ 		  (((orElseMap_lh__d1_d5 p_name_lh__d2) ((seQ_lh__d1_d3 (fun x_2_5 -> 
//│ 		    ((atIndex_lh__d2 1) x_2_5))) (`LH_C((look_for_lh__d1_d9 '('), (`LH_C(p_expr_lh__d2, (`LH_C((look_for_lh__d1_d9 ')'), (`LH_N))))))))) _lh_p_prim_arg1_0)
//│ 		and
//│ 		p_term_lh__d4 _lh_p_term_arg1_8 =
//│ 		  (((orElseMap_lh__d7 ((seQ_lh__d7 q_func_lh__d4) (`LH_C(p_ident_lh__d4, (`LH_C((look_for_lh__d8 '('), (`LH_C(((list_of_lh__d4 p_expr_lh__d2) ','), (`LH_C((look_for_lh__d9 ')'), (`LH_N))))))))))) p_prim_lh__d4) _lh_p_term_arg1_8)
//│ 		and
//│ 		p_term_lh__d5 _lh_p_term_arg1_7 =
//│ 		  (((orElseMap_lh__d8 ((seQ_lh__d8 q_func_lh__d5) (`LH_C(p_ident_lh__d5, (`LH_C((look_for_lh__d1_d0 '('), (`LH_C(((list_of_lh__d5 p_expr_lh__d2) ','), (`LH_C((look_for_lh__d1_d1 ')'), (`LH_N))))))))))) p_prim_lh__d5) _lh_p_term_arg1_7)
//│ 		and
//│ 		p_term_lh__d6 _lh_p_term_arg1_6 =
//│ 		  (((orElseMap_lh__d9 ((seQ_lh__d9 q_func_lh__d6) (`LH_C(p_ident_lh__d6, (`LH_C((look_for_lh__d1_d2 '('), (`LH_C(((list_of_lh__d6 p_expr_lh__d2) ','), (`LH_C((look_for_lh__d1_d3 ')'), (`LH_N))))))))))) p_prim_lh__d6) _lh_p_term_arg1_6);;
//│ 		let rec fst_lh__d2 _lh_fst_arg1_1 =
//│ 		  (match _lh_fst_arg1_1 with
//│ 		    | `LH_P2(_lh_fst_LH_P2_0_1, _lh_fst_LH_P2_1_1) -> 
//│ 		      _lh_fst_LH_P2_0_1);;
//│ 		let rec unExpr_lh__d2 _lh_unExpr_arg1_1 =
//│ 		  (match _lh_unExpr_arg1_1 with
//│ 		    | `Expr(_lh_unExpr_Expr_0_1) -> 
//│ 		      _lh_unExpr_Expr_0_1
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec the_lh__d2 _lh_the_arg1_1 =
//│ 		  (match _lh_the_arg1_1 with
//│ 		    | `Just(_lh_the_Just_0_1) -> 
//│ 		      _lh_the_Just_0_1
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec parse_lh__d2 _lh_parse_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_3_3 -> 
//│ 		    ((fun _lh_funcomp_x_3_4 -> 
//│ 		      ((fun _lh_funcomp_x_3_5 -> 
//│ 		        (unExpr_lh__d2 (fst_lh__d2 _lh_funcomp_x_3_5))) (the_lh__d2 _lh_funcomp_x_3_4))) (p_expr_lh__d2 _lh_funcomp_x_3_3))) _lh_parse_arg1_0);;
//│ 		let rec unExpr_lh__d1 _lh_unExpr_arg1_2 =
//│ 		  (match _lh_unExpr_arg1_2 with
//│ 		    | `Expr(_lh_unExpr_Expr_0_2) -> 
//│ 		      _lh_unExpr_Expr_0_2
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec fst_lh__d1 _lh_fst_arg1_2 =
//│ 		  (match _lh_fst_arg1_2 with
//│ 		    | `LH_P2(_lh_fst_LH_P2_0_2, _lh_fst_LH_P2_1_2) -> 
//│ 		      _lh_fst_LH_P2_0_2);;
//│ 		let rec p_ident_lh__d3 _lh_p_ident_arg1_3 =
//│ 		  ((sp_lh__d8 (string_of_lh__d4 alphanum_lh__d2)) _lh_p_ident_arg1_3);;
//│ 		let rec look_for_lh__d7 _lh_look_for_arg1_1_2 =
//│ 		  (sp_lh__d8 (pchar_lh__d4 (fun x_4_4 -> 
//│ 		    (x_4_4 = _lh_look_for_arg1_1_2))));;
//│ 		let rec list_of_lh__d3 _lh_list_of_arg1_3 _lh_list_of_arg2_3 =
//│ 		  (let rec p'_3 = (lazy (((seq2_lh__d7 mk_cons_lh__d7) _lh_list_of_arg1_3) ((orElseMap_lh__d1_d5 (((seq2Lzq_lh__d2 (fun x_4_3 y_4 -> 
//│ 		    y_4)) (look_for_lh__d1_d9 _lh_list_of_arg2_3)) p'_3)) empty_lh__d6))) in
//│ 		    (Lazy.force p'_3));;
//│ 		let rec seQ_lh__d6 _lh_seQ_arg1_7 _lh_seQ_arg2_7 =
//│ 		  ((build_lh__d5 (mk_list_lh__d5 _lh_seQ_arg1_7)) (((foldr_lh__d6 (seq2_lh__d7 mk_cons_lh__d7)) empty_lh__d6) _lh_seQ_arg2_7));;
//│ 		let rec look_for_lh__d6 _lh_look_for_arg1_1_3 =
//│ 		  (sp_lh__d8 (pchar_lh__d4 (fun x_4_5 -> 
//│ 		    (x_4_5 = _lh_look_for_arg1_1_3))));;
//│ 		let rec q_func_lh__d3 _lh_q_func_arg1_3 =
//│ 		  (match _lh_q_func_arg1_3 with
//│ 		    | `LH_C(_lh_q_func_LH_C_0_1_2, _lh_q_func_LH_C_1_1_2) -> 
//│ 		      (match _lh_q_func_LH_C_0_1_2 with
//│ 		        | `MkString(_lh_q_func_MkString_0_3) -> 
//│ 		          (match _lh_q_func_LH_C_1_1_2 with
//│ 		            | `LH_C(_lh_q_func_LH_C_0_1_3, _lh_q_func_LH_C_1_1_3) -> 
//│ 		              (match _lh_q_func_LH_C_1_1_3 with
//│ 		                | `LH_C(_lh_q_func_LH_C_0_1_4, _lh_q_func_LH_C_1_1_4) -> 
//│ 		                  (match _lh_q_func_LH_C_0_1_4 with
//│ 		                    | `List(_lh_q_func_List_0_3) -> 
//│ 		                      (match _lh_q_func_LH_C_1_1_4 with
//│ 		                        | `LH_C(_lh_q_func_LH_C_0_1_5, _lh_q_func_LH_C_1_1_5) -> 
//│ 		                          (match _lh_q_func_LH_C_1_1_5 with
//│ 		                            | `LH_N -> 
//│ 		                              (`Expr((`Func(_lh_q_func_MkString_0_3, ((map_lh__d7 unExpr_lh__d3) _lh_q_func_List_0_3)))))
//│ 		                            | _ -> 
//│ 		                              (failwith "lh_default_error"))
//│ 		                        | _ -> 
//│ 		                          (failwith "lh_default_error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "lh_default_error"))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec orElseMap_lh__d6 _lh_orElseMap_arg1_9 _lh_orElseMap_arg2_9 _lh_orElseMap_arg3_9 =
//│ 		  ((orElse_lh__d6 (_lh_orElseMap_arg1_9 _lh_orElseMap_arg3_9)) (_lh_orElseMap_arg2_9 _lh_orElseMap_arg3_9));;
//│ 		let rec q_func_lh__d2 _lh_q_func_arg1_4 =
//│ 		  (match _lh_q_func_arg1_4 with
//│ 		    | `LH_C(_lh_q_func_LH_C_0_1_6, _lh_q_func_LH_C_1_1_6) -> 
//│ 		      (match _lh_q_func_LH_C_0_1_6 with
//│ 		        | `MkString(_lh_q_func_MkString_0_4) -> 
//│ 		          (match _lh_q_func_LH_C_1_1_6 with
//│ 		            | `LH_C(_lh_q_func_LH_C_0_1_7, _lh_q_func_LH_C_1_1_7) -> 
//│ 		              (match _lh_q_func_LH_C_1_1_7 with
//│ 		                | `LH_C(_lh_q_func_LH_C_0_1_8, _lh_q_func_LH_C_1_1_8) -> 
//│ 		                  (match _lh_q_func_LH_C_0_1_8 with
//│ 		                    | `List(_lh_q_func_List_0_4) -> 
//│ 		                      (match _lh_q_func_LH_C_1_1_8 with
//│ 		                        | `LH_C(_lh_q_func_LH_C_0_1_9, _lh_q_func_LH_C_1_1_9) -> 
//│ 		                          (match _lh_q_func_LH_C_1_1_9 with
//│ 		                            | `LH_N -> 
//│ 		                              (`Expr((`Func(_lh_q_func_MkString_0_4, ((map_lh__d7 unExpr_lh__d3) _lh_q_func_List_0_4)))))
//│ 		                            | _ -> 
//│ 		                              (failwith "lh_default_error"))
//│ 		                        | _ -> 
//│ 		                          (failwith "lh_default_error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "lh_default_error"))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec orElseMap_lh__d1_d4 _lh_orElseMap_arg1_1 _lh_orElseMap_arg2_1 _lh_orElseMap_arg3_1 =
//│ 		  ((orElse_lh__d6 (_lh_orElseMap_arg1_1 _lh_orElseMap_arg3_1)) (_lh_orElseMap_arg2_1 _lh_orElseMap_arg3_1));;
//│ 		let rec seq2_lh__d6 _lh_seq2_arg1_1 _lh_seq2_arg2_1 _lh_seq2_arg3_1 =
//│ 		  (let rec g_2 = (fun xs_3 -> 
//│ 		    (let rec _lh_matchIdent_5 = xs_3 in
//│ 		      (match _lh_matchIdent_5 with
//│ 		        | `LH_P2(_lh_seq2_LH_P2_0_1, _lh_seq2_LH_P2_1_1) -> 
//│ 		          ((lift_lh__d6 ((cross_lh__d2 (_lh_seq2_arg1_1 _lh_seq2_LH_P2_0_1)) (fun x_9 -> 
//│ 		            x_9))) (_lh_seq2_arg3_1 _lh_seq2_LH_P2_1_1))))) in
//│ 		    (fun _lh_funcomp_x_7 -> 
//│ 		      ((fun _lh_funcomp_x_8 -> 
//│ 		        (squash_lh__d1 ((lift_lh__d6 g_2) _lh_funcomp_x_8))) (_lh_seq2_arg2_1 _lh_funcomp_x_7))));;
//│ 		let rec mk_cons_lh__d6 _lh_mk_cons_arg1_1 _lh_mk_cons_arg2_1 =
//│ 		  (match _lh_mk_cons_arg2_1 with
//│ 		    | `List(_lh_mk_cons_List_0_1) -> 
//│ 		      (`List((`LH_C(_lh_mk_cons_arg1_1, _lh_mk_cons_List_0_1))))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec look_for_lh__d1_d7 _lh_look_for_arg1_2 =
//│ 		  (sp_lh__d8 (pchar_lh__d4 (fun x_8 -> 
//│ 		    (x_8 = _lh_look_for_arg1_2))));;
//│ 		let rec list_of_lh__d2 _lh_list_of_arg1_4 _lh_list_of_arg2_4 =
//│ 		  (let rec p'_4 = (lazy (((seq2_lh__d6 mk_cons_lh__d6) _lh_list_of_arg1_4) ((orElseMap_lh__d1_d4 (((seq2Lzq_lh__d2 (fun x_5_0 y_5 -> 
//│ 		    y_5)) (look_for_lh__d1_d7 _lh_list_of_arg2_4)) p'_4)) empty_lh__d6))) in
//│ 		    (Lazy.force p'_4));;
//│ 		let rec sp_lh__d7 _lh_sp_arg1_1 _lh_funcomp_x_9 =
//│ 		  (_lh_sp_arg1_1 ((dropWhile_lh__d1 (fun x_1_0 -> 
//│ 		    (x_1_0 = ' '))) _lh_funcomp_x_9));;
//│ 		let rec p_ident_lh__d2 _lh_p_ident_arg1_4 =
//│ 		  ((sp_lh__d7 (string_of_lh__d4 alphanum_lh__d2)) _lh_p_ident_arg1_4);;
//│ 		let rec look_for_lh__d4 _lh_look_for_arg1_1_5 =
//│ 		  (sp_lh__d8 (pchar_lh__d4 (fun x_4_9 -> 
//│ 		    (x_4_9 = _lh_look_for_arg1_1_5))));;
//│ 		let rec look_for_lh__d1_d8 _lh_look_for_arg1_1 =
//│ 		  (sp_lh__d8 (pchar_lh__d4 (fun x_5 -> 
//│ 		    (x_5 = _lh_look_for_arg1_1))));;
//│ 		let rec look_for_lh__d5 _lh_look_for_arg1_1_4 =
//│ 		  (sp_lh__d8 (pchar_lh__d4 (fun x_4_7 -> 
//│ 		    (x_4_7 = _lh_look_for_arg1_1_4))));;
//│ 		let rec orElseMap_lh__d5 _lh_orElseMap_arg1_1_0 _lh_orElseMap_arg2_1_0 _lh_orElseMap_arg3_1_0 =
//│ 		  ((orElse_lh__d6 (_lh_orElseMap_arg1_1_0 _lh_orElseMap_arg3_1_0)) (_lh_orElseMap_arg2_1_0 _lh_orElseMap_arg3_1_0));;
//│ 		let rec seQ_lh__d5 _lh_seQ_arg1_8 _lh_seQ_arg2_8 =
//│ 		  ((build_lh__d5 (mk_list_lh__d5 _lh_seQ_arg1_8)) (((foldr_lh__d6 (seq2_lh__d7 mk_cons_lh__d7)) empty_lh__d6) _lh_seQ_arg2_8));;
//│ 		let rec orElse_lh__d2 _lh_orElse_arg1_4 _lh_orElse_arg2_4 =
//│ 		  (match _lh_orElse_arg1_4 with
//│ 		    | `Nothing -> 
//│ 		      _lh_orElse_arg2_4
//│ 		    | _ -> 
//│ 		      _lh_orElse_arg1_4);;
//│ 		let rec orElseMap_lh__d1 _lh_orElseMap_arg1_1_4 _lh_orElseMap_arg2_1_4 _lh_orElseMap_arg3_1_4 =
//│ 		  ((orElse_lh__d2 (_lh_orElseMap_arg1_1_4 _lh_orElseMap_arg3_1_4)) (_lh_orElseMap_arg2_1_4 _lh_orElseMap_arg3_1_4));;
//│ 		let rec orElse_lh__d5 _lh_orElse_arg1_1 _lh_orElse_arg2_1 =
//│ 		  (match _lh_orElse_arg1_1 with
//│ 		    | `Nothing -> 
//│ 		      _lh_orElse_arg2_1
//│ 		    | _ -> 
//│ 		      _lh_orElse_arg1_1);;
//│ 		let rec orElseMap_lh__d4 _lh_orElseMap_arg1_1_1 _lh_orElseMap_arg2_1_1 _lh_orElseMap_arg3_1_1 =
//│ 		  ((orElse_lh__d5 (_lh_orElseMap_arg1_1_1 _lh_orElseMap_arg3_1_1)) (_lh_orElseMap_arg2_1_1 _lh_orElseMap_arg3_1_1));;
//│ 		let rec q_func_lh__d1 _lh_q_func_arg1_5 =
//│ 		  (match _lh_q_func_arg1_5 with
//│ 		    | `LH_C(_lh_q_func_LH_C_0_2_0, _lh_q_func_LH_C_1_2_0) -> 
//│ 		      (match _lh_q_func_LH_C_0_2_0 with
//│ 		        | `MkString(_lh_q_func_MkString_0_5) -> 
//│ 		          (match _lh_q_func_LH_C_1_2_0 with
//│ 		            | `LH_C(_lh_q_func_LH_C_0_2_1, _lh_q_func_LH_C_1_2_1) -> 
//│ 		              (match _lh_q_func_LH_C_1_2_1 with
//│ 		                | `LH_C(_lh_q_func_LH_C_0_2_2, _lh_q_func_LH_C_1_2_2) -> 
//│ 		                  (match _lh_q_func_LH_C_0_2_2 with
//│ 		                    | `List(_lh_q_func_List_0_5) -> 
//│ 		                      (match _lh_q_func_LH_C_1_2_2 with
//│ 		                        | `LH_C(_lh_q_func_LH_C_0_2_3, _lh_q_func_LH_C_1_2_3) -> 
//│ 		                          (match _lh_q_func_LH_C_1_2_3 with
//│ 		                            | `LH_N -> 
//│ 		                              (`Expr((`Func(_lh_q_func_MkString_0_5, ((map_lh__d7 unExpr_lh__d3) _lh_q_func_List_0_5)))))
//│ 		                            | _ -> 
//│ 		                              (failwith "lh_default_error"))
//│ 		                        | _ -> 
//│ 		                          (failwith "lh_default_error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "lh_default_error"))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec pchar_lh__d3 _lh_pchar_arg1_1 _lh_pchar_arg2_1 =
//│ 		  (match _lh_pchar_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      croak_lh__d1
//│ 		    | `LH_C(_lh_pchar_LH_C_0_1, _lh_pchar_LH_C_1_1) -> 
//│ 		      (if (_lh_pchar_arg1_1 _lh_pchar_LH_C_0_1) then
//│ 		        (succeed_lh__d1 (`LH_P2((`MkString((`LH_C(_lh_pchar_LH_C_0_1, (`LH_N))))), _lh_pchar_LH_C_1_1)))
//│ 		      else
//│ 		        croak_lh__d1));;
//│ 		let rec sp_lh__d6 _lh_sp_arg1_2 _lh_funcomp_x_1_0 =
//│ 		  (_lh_sp_arg1_2 ((dropWhile_lh__d1 (fun x_1_3 -> 
//│ 		    (x_1_3 = ' '))) _lh_funcomp_x_1_0));;
//│ 		let rec look_for_lh__d3 _lh_look_for_arg1_1_6 =
//│ 		  (sp_lh__d6 (pchar_lh__d3 (fun x_5_2 -> 
//│ 		    (x_5_2 = _lh_look_for_arg1_1_6))));;
//│ 		let rec seQ_lh__d1_d2 _lh_seQ_arg1_1 _lh_seQ_arg2_1 =
//│ 		  ((build_lh__d5 (mk_list_lh__d5 _lh_seQ_arg1_1)) (((foldr_lh__d6 (seq2_lh__d7 mk_cons_lh__d7)) empty_lh__d6) _lh_seQ_arg2_1));;
//│ 		let rec p_name_lh__d1 _lh_p_name_arg1_1 =
//│ 		  (((build_lh__d5 q_name_lh__d1) p_ident_lh__d6) _lh_p_name_arg1_1);;
//│ 		let rec look_for_lh__d1_d5 _lh_look_for_arg1_4 =
//│ 		  (sp_lh__d8 (pchar_lh__d4 (fun x_1_2 -> 
//│ 		    (x_1_2 = _lh_look_for_arg1_4))));;
//│ 		let rec atIndex_lh__d1 n_1 ls_4 =
//│ 		  (if (n_1 < 0) then
//│ 		    (failwith "lh_default_error")
//│ 		  else
//│ 		    (match ls_4 with
//│ 		      | `LH_C(h_4, t_5) -> 
//│ 		        (if (n_1 = 0) then
//│ 		          h_4
//│ 		        else
//│ 		          ((atIndex_lh__d1 (n_1 - 1)) t_5))
//│ 		      | `LH_N -> 
//│ 		        (failwith "lh_default_error")));;
//│ 		let rec orElseMap_lh__d1_d3 _lh_orElseMap_arg1_2 _lh_orElseMap_arg2_2 _lh_orElseMap_arg3_2 =
//│ 		  ((orElse_lh__d6 (_lh_orElseMap_arg1_2 _lh_orElseMap_arg3_2)) (_lh_orElseMap_arg2_2 _lh_orElseMap_arg3_2));;
//│ 		let rec look_for_lh__d1_d6 _lh_look_for_arg1_3 =
//│ 		  (sp_lh__d8 (pchar_lh__d4 (fun x_1_1 -> 
//│ 		    (x_1_1 = _lh_look_for_arg1_3))));;
//│ 		let rec pchar_lh__d2 _lh_pchar_arg1_2 _lh_pchar_arg2_2 =
//│ 		  (match _lh_pchar_arg2_2 with
//│ 		    | `LH_N -> 
//│ 		      croak_lh__d1
//│ 		    | `LH_C(_lh_pchar_LH_C_0_2, _lh_pchar_LH_C_1_2) -> 
//│ 		      (if (_lh_pchar_arg1_2 _lh_pchar_LH_C_0_2) then
//│ 		        (succeed_lh__d1 (`LH_P2((`MkString((`LH_C(_lh_pchar_LH_C_0_2, (`LH_N))))), _lh_pchar_LH_C_1_2)))
//│ 		      else
//│ 		        croak_lh__d1));;
//│ 		let rec sp_lh__d4 _lh_sp_arg1_4 _lh_funcomp_x_1_9 =
//│ 		  (_lh_sp_arg1_4 ((dropWhile_lh__d1 (fun x_2_0 -> 
//│ 		    (x_2_0 = ' '))) _lh_funcomp_x_1_9));;
//│ 		let rec look_for_lh__d2 _lh_look_for_arg1_1_7 =
//│ 		  (sp_lh__d4 (pchar_lh__d2 (fun x_5_4 -> 
//│ 		    (x_5_4 = _lh_look_for_arg1_1_7))));;
//│ 		let rec orElseMap_lh__d1_d2 _lh_orElseMap_arg1_3 _lh_orElseMap_arg2_3 _lh_orElseMap_arg3_3 =
//│ 		  ((orElse_lh__d6 (_lh_orElseMap_arg1_3 _lh_orElseMap_arg3_3)) (_lh_orElseMap_arg2_3 _lh_orElseMap_arg3_3));;
//│ 		let rec look_for_lh__d1_d4 _lh_look_for_arg1_5 =
//│ 		  (sp_lh__d8 (pchar_lh__d4 (fun x_1_6 -> 
//│ 		    (x_1_6 = _lh_look_for_arg1_5))));;
//│ 		let rec mk_cons_lh__d5 _lh_mk_cons_arg1_2 _lh_mk_cons_arg2_2 =
//│ 		  (match _lh_mk_cons_arg2_2 with
//│ 		    | `List(_lh_mk_cons_List_0_2) -> 
//│ 		      (`List((`LH_C(_lh_mk_cons_arg1_2, _lh_mk_cons_List_0_2))))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec empty_lh__d5 _lh_empty_arg1_1 =
//│ 		  (succeed_lh__d1 (`LH_P2((`List((`LH_N))), _lh_empty_arg1_1)));;
//│ 		let rec seq2_lh__d5 _lh_seq2_arg1_2 _lh_seq2_arg2_2 _lh_seq2_arg3_2 =
//│ 		  (let rec g_3 = (fun xs_4 -> 
//│ 		    (let rec _lh_matchIdent_6 = xs_4 in
//│ 		      (match _lh_matchIdent_6 with
//│ 		        | `LH_P2(_lh_seq2_LH_P2_0_2, _lh_seq2_LH_P2_1_2) -> 
//│ 		          ((lift_lh__d6 ((cross_lh__d2 (_lh_seq2_arg1_2 _lh_seq2_LH_P2_0_2)) (fun x_1_5 -> 
//│ 		            x_1_5))) (_lh_seq2_arg3_2 _lh_seq2_LH_P2_1_2))))) in
//│ 		    (fun _lh_funcomp_x_1_2 -> 
//│ 		      ((fun _lh_funcomp_x_1_3 -> 
//│ 		        (squash_lh__d1 ((lift_lh__d6 g_3) _lh_funcomp_x_1_3))) (_lh_seq2_arg2_2 _lh_funcomp_x_1_2))));;
//│ 		let rec seq2Lzq_lh__d1 _lh_seq2Lzq_arg1_1 _lh_seq2Lzq_arg2_1 _lh_seq2Lzq_arg3_1 =
//│ 		  (let rec g_4 = (fun xs_5 -> 
//│ 		    (let rec _lh_matchIdent_7 = xs_5 in
//│ 		      (match _lh_matchIdent_7 with
//│ 		        | `LH_P2(_lh_seq2Lzq_LH_P2_0_1, _lh_seq2Lzq_LH_P2_1_1) -> 
//│ 		          ((lift_lh__d6 ((cross_lh__d2 (_lh_seq2Lzq_arg1_1 _lh_seq2Lzq_LH_P2_0_1)) (fun x_1_7 -> 
//│ 		            x_1_7))) ((Lazy.force _lh_seq2Lzq_arg3_1) _lh_seq2Lzq_LH_P2_1_1))))) in
//│ 		    (fun _lh_funcomp_x_1_4 -> 
//│ 		      ((fun _lh_funcomp_x_1_5 -> 
//│ 		        (squash_lh__d1 ((lift_lh__d6 g_4) _lh_funcomp_x_1_5))) (_lh_seq2Lzq_arg2_1 _lh_funcomp_x_1_4))));;
//│ 		let rec list_of_lh__d1 _lh_list_of_arg1_5 _lh_list_of_arg2_5 =
//│ 		  (let rec p'_5 = (lazy (((seq2_lh__d5 mk_cons_lh__d5) _lh_list_of_arg1_5) ((orElseMap_lh__d1_d2 (((seq2Lzq_lh__d1 (fun x_5_3 y_6 -> 
//│ 		    y_6)) (look_for_lh__d1_d4 _lh_list_of_arg2_5)) p'_5)) empty_lh__d5))) in
//│ 		    (Lazy.force p'_5));;
//│ 		let rec string_of_lh__d3 _lh_string_of_arg1_1 _lh_string_of_arg2_1 =
//│ 		  (let rec chars_1 = ((takeWhile_lh__d1 _lh_string_of_arg1_1) _lh_string_of_arg2_1) in
//│ 		    (let rec s'_1 = ((dropWhile_lh__d1 _lh_string_of_arg1_1) _lh_string_of_arg2_1) in
//│ 		      ((maybeX_lh__d1 (chars_1 <> (`LH_N))) (`LH_P2((`MkString(chars_1)), s'_1)))));;
//│ 		let rec sp_lh__d5 _lh_sp_arg1_3 _lh_funcomp_x_1_1 =
//│ 		  (_lh_sp_arg1_3 ((dropWhile_lh__d1 (fun x_1_4 -> 
//│ 		    (x_1_4 = ' '))) _lh_funcomp_x_1_1));;
//│ 		let rec alphanum_lh__d1 _lh_alphanum_arg1_1 =
//│ 		  (((((int_of_char _lh_alphanum_arg1_1) >= (int_of_char 'A')) && ((int_of_char _lh_alphanum_arg1_1) <= (int_of_char 'Z'))) || (((int_of_char _lh_alphanum_arg1_1) >= (int_of_char 'a')) && ((int_of_char _lh_alphanum_arg1_1) <= (int_of_char 'z')))) || (((int_of_char _lh_alphanum_arg1_1) >= (int_of_char '0')) && ((int_of_char _lh_alphanum_arg1_1) <= (int_of_char '9'))));;
//│ 		let rec p_ident_lh__d1 _lh_p_ident_arg1_5 =
//│ 		  ((sp_lh__d5 (string_of_lh__d3 alphanum_lh__d1)) _lh_p_ident_arg1_5);;
//│ 		let rec mk_cons_lh__d4 _lh_mk_cons_arg1_3 _lh_mk_cons_arg2_3 =
//│ 		  (match _lh_mk_cons_arg2_3 with
//│ 		    | `List(_lh_mk_cons_List_0_3) -> 
//│ 		      (`List((`LH_C(_lh_mk_cons_arg1_3, _lh_mk_cons_List_0_3))))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec seq2_lh__d4 _lh_seq2_arg1_3 _lh_seq2_arg2_3 _lh_seq2_arg3_3 =
//│ 		  (let rec g_5 = (fun xs_6 -> 
//│ 		    (let rec _lh_matchIdent_8 = xs_6 in
//│ 		      (match _lh_matchIdent_8 with
//│ 		        | `LH_P2(_lh_seq2_LH_P2_0_3, _lh_seq2_LH_P2_1_3) -> 
//│ 		          ((lift_lh__d6 ((cross_lh__d2 (_lh_seq2_arg1_3 _lh_seq2_LH_P2_0_3)) (fun x_1_8 -> 
//│ 		            x_1_8))) (_lh_seq2_arg3_3 _lh_seq2_LH_P2_1_3))))) in
//│ 		    (fun _lh_funcomp_x_1_6 -> 
//│ 		      ((fun _lh_funcomp_x_1_7 -> 
//│ 		        (squash_lh__d1 ((lift_lh__d6 g_5) _lh_funcomp_x_1_7))) (_lh_seq2_arg2_3 _lh_funcomp_x_1_6))));;
//│ 		let rec mk_list_lh__d4 _lh_mk_list_arg1_1 _lh_mk_list_arg2_1 =
//│ 		  (match _lh_mk_list_arg2_1 with
//│ 		    | `List(_lh_mk_list_List_0_1) -> 
//│ 		      (_lh_mk_list_arg1_1 _lh_mk_list_List_0_1)
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec build_lh__d4 _lh_build_arg1_1 _lh_build_arg2_1 _lh_funcomp_x_1_8 =
//│ 		  ((lift_lh__d6 ((cross_lh__d2 _lh_build_arg1_1) (fun x_1_9 -> 
//│ 		    x_1_9))) (_lh_build_arg2_1 _lh_funcomp_x_1_8));;
//│ 		let rec empty_lh__d4 _lh_empty_arg1_2 =
//│ 		  (succeed_lh__d1 (`LH_P2((`List((`LH_N))), _lh_empty_arg1_2)));;
//│ 		let rec seQ_lh__d4 _lh_seQ_arg1_9 _lh_seQ_arg2_9 =
//│ 		  ((build_lh__d4 (mk_list_lh__d4 _lh_seQ_arg1_9)) (((foldr_lh__d6 (seq2_lh__d4 mk_cons_lh__d4)) empty_lh__d4) _lh_seQ_arg2_9));;
//│ 		let rec q_op_lh__d1 _lh_q_op_arg1_3 =
//│ 		  (match _lh_q_op_arg1_3 with
//│ 		    | `LH_C(_lh_q_op_LH_C_0_9, _lh_q_op_LH_C_1_9) -> 
//│ 		      (match _lh_q_op_LH_C_0_9 with
//│ 		        | `Expr(_lh_q_op_Expr_0_6) -> 
//│ 		          (match _lh_q_op_LH_C_1_9 with
//│ 		            | `LH_C(_lh_q_op_LH_C_0_1_0, _lh_q_op_LH_C_1_1_0) -> 
//│ 		              (match _lh_q_op_LH_C_0_1_0 with
//│ 		                | `MkString(_lh_q_op_MkString_0_3) -> 
//│ 		                  (match _lh_q_op_LH_C_1_1_0 with
//│ 		                    | `LH_C(_lh_q_op_LH_C_0_1_1, _lh_q_op_LH_C_1_1_1) -> 
//│ 		                      (match _lh_q_op_LH_C_0_1_1 with
//│ 		                        | `Expr(_lh_q_op_Expr_0_7) -> 
//│ 		                          (match _lh_q_op_LH_C_1_1_1 with
//│ 		                            | `LH_N -> 
//│ 		                              (`Expr((`Func(_lh_q_op_MkString_0_3, (`LH_C(_lh_q_op_Expr_0_6, (`LH_C(_lh_q_op_Expr_0_7, (`LH_N)))))))))
//│ 		                            | _ -> 
//│ 		                              (failwith "lh_default_error"))
//│ 		                        | _ -> 
//│ 		                          (failwith "lh_default_error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "lh_default_error"))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec string_of_lh__d1 _lh_string_of_arg1_3 _lh_string_of_arg2_3 =
//│ 		  (let rec chars_3 = ((takeWhile_lh__d1 _lh_string_of_arg1_3) _lh_string_of_arg2_3) in
//│ 		    (let rec s'_3 = ((dropWhile_lh__d1 _lh_string_of_arg1_3) _lh_string_of_arg2_3) in
//│ 		      ((maybeX_lh__d1 (chars_3 <> (`LH_N))) (`LH_P2((`MkString(chars_3)), s'_3)))));;
//│ 		let rec opsym_lh__d1 _lh_opsym_arg1_1 =
//│ 		  ((fun x_4_1 -> 
//│ 		    ((inList_lh__d4 x_4_1) (`LH_C('*', (`LH_C('+', (`LH_C('%', (`LH_C('@', (`LH_C('-', (`LH_C('/', (`LH_C('?', (`LH_C(':', (`LH_N))))))))))))))))))) _lh_opsym_arg1_1);;
//│ 		let rec sp_lh__d1 _lh_sp_arg1_7 _lh_funcomp_x_2_8 =
//│ 		  (_lh_sp_arg1_7 ((dropWhile_lh__d1 (fun x_4_2 -> 
//│ 		    (x_4_2 = ' '))) _lh_funcomp_x_2_8));;
//│ 		let rec p_op_lh__d1 _lh_p_op_arg1_3 =
//│ 		  ((sp_lh__d1 (string_of_lh__d1 opsym_lh__d1)) _lh_p_op_arg1_3);;
//│ 		let rec mk_cons_lh__d1 _lh_mk_cons_arg1_6 _lh_mk_cons_arg2_6 =
//│ 		  (match _lh_mk_cons_arg2_6 with
//│ 		    | `List(_lh_mk_cons_List_0_6) -> 
//│ 		      (`List((`LH_C(_lh_mk_cons_arg1_6, _lh_mk_cons_List_0_6))))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec empty_lh__d1 _lh_empty_arg1_5 =
//│ 		  (succeed_lh__d1 (`LH_P2((`List((`LH_N))), _lh_empty_arg1_5)));;
//│ 		let rec mk_list_lh__d1 _lh_mk_list_arg1_4 _lh_mk_list_arg2_4 =
//│ 		  (match _lh_mk_list_arg2_4 with
//│ 		    | `List(_lh_mk_list_List_0_4) -> 
//│ 		      (_lh_mk_list_arg1_4 _lh_mk_list_List_0_4)
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec lift_lh__d5 _lh_lift_arg1_1 _lh_lift_arg2_1 =
//│ 		  (match _lh_lift_arg2_1 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_lift_Just_0_1) -> 
//│ 		      (`Just((_lh_lift_arg1_1 _lh_lift_Just_0_1))));;
//│ 		let rec cross_lh__d1 _lh_cross_arg1_1 _lh_cross_arg2_1 _lh_cross_arg3_1 =
//│ 		  (match _lh_cross_arg3_1 with
//│ 		    | `LH_P2(_lh_cross_LH_P2_0_1, _lh_cross_LH_P2_1_1) -> 
//│ 		      (`LH_P2((_lh_cross_arg1_1 _lh_cross_LH_P2_0_1), (_lh_cross_arg2_1 _lh_cross_LH_P2_1_1))));;
//│ 		let rec lift_lh__d4 _lh_lift_arg1_2 _lh_lift_arg2_2 =
//│ 		  (match _lh_lift_arg2_2 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_lift_Just_0_2) -> 
//│ 		      (`Just((_lh_lift_arg1_2 _lh_lift_Just_0_2))));;
//│ 		let rec seq2_lh__d1 _lh_seq2_arg1_6 _lh_seq2_arg2_6 _lh_seq2_arg3_6 =
//│ 		  (let rec g_8 = (fun xs_1_0 -> 
//│ 		    (let rec _lh_matchIdent_1_4 = xs_1_0 in
//│ 		      (match _lh_matchIdent_1_4 with
//│ 		        | `LH_P2(_lh_seq2_LH_P2_0_6, _lh_seq2_LH_P2_1_6) -> 
//│ 		          ((lift_lh__d5 ((cross_lh__d1 (_lh_seq2_arg1_6 _lh_seq2_LH_P2_0_6)) (fun x_5_6 -> 
//│ 		            x_5_6))) (_lh_seq2_arg3_6 _lh_seq2_LH_P2_1_6))))) in
//│ 		    (fun _lh_funcomp_x_3_0 -> 
//│ 		      ((fun _lh_funcomp_x_3_1 -> 
//│ 		        (squash_lh__d1 ((lift_lh__d4 g_8) _lh_funcomp_x_3_1))) (_lh_seq2_arg2_6 _lh_funcomp_x_3_0))));;
//│ 		let rec foldr_lh__d3 f_7 i_3 ls_1_3 =
//│ 		  (match ls_1_3 with
//│ 		    | `LH_C(h_1_3, t_1_4) -> 
//│ 		      ((f_7 h_1_3) (((foldr_lh__d3 f_7) i_3) t_1_4))
//│ 		    | `LH_N -> 
//│ 		      i_3);;
//│ 		let rec build_lh__d1 _lh_build_arg1_4 _lh_build_arg2_4 _lh_funcomp_x_2_9 =
//│ 		  ((lift_lh__d6 ((cross_lh__d2 _lh_build_arg1_4) (fun x_5_5 -> 
//│ 		    x_5_5))) (_lh_build_arg2_4 _lh_funcomp_x_2_9));;
//│ 		let rec seQ_lh__d1 _lh_seQ_arg1_1_2 _lh_seQ_arg2_1_2 =
//│ 		  ((build_lh__d1 (mk_list_lh__d1 _lh_seQ_arg1_1_2)) (((foldr_lh__d3 (seq2_lh__d1 mk_cons_lh__d1)) empty_lh__d1) _lh_seQ_arg2_1_2));;
//│ 		let rec p_expr_lh__d1 _lh_p_expr_arg1_3 =
//│ 		  (((orElseMap_lh__d1 ((seQ_lh__d1 q_op_lh__d1) (`LH_C(p_term_lh__d3, (`LH_C(p_op_lh__d1, (`LH_C(p_term_lh__d2, (`LH_N))))))))) p_term_lh__d1) _lh_p_expr_arg1_3)
//│ 		and
//│ 		p_prim_lh__d1 _lh_p_prim_arg1_5 =
//│ 		  (((orElseMap_lh__d1_d3 p_name_lh__d1) ((seQ_lh__d1_d2 (fun x_5_1 -> 
//│ 		    ((atIndex_lh__d1 1) x_5_1))) (`LH_C((look_for_lh__d1_d5 '('), (`LH_C(p_expr_lh__d1, (`LH_C((look_for_lh__d1_d6 ')'), (`LH_N))))))))) _lh_p_prim_arg1_5)
//│ 		and
//│ 		p_prim_lh__d2 _lh_p_prim_arg1_4 =
//│ 		  (((orElseMap_lh__d1_d5 p_name_lh__d2) ((seQ_lh__d1_d3 (fun x_4_8 -> 
//│ 		    ((atIndex_lh__d2 1) x_4_8))) (`LH_C((look_for_lh__d1_d8 '('), (`LH_C(p_expr_lh__d1, (`LH_C((look_for_lh__d1_d9 ')'), (`LH_N))))))))) _lh_p_prim_arg1_4)
//│ 		and
//│ 		p_prim_lh__d3 _lh_p_prim_arg1_3 =
//│ 		  (((orElseMap_lh__d1_d5 p_name_lh__d2) ((seQ_lh__d1_d3 (fun x_4_6 -> 
//│ 		    ((atIndex_lh__d2 1) x_4_6))) (`LH_C((look_for_lh__d1_d9 '('), (`LH_C(p_expr_lh__d1, (`LH_C((look_for_lh__d1_d9 ')'), (`LH_N))))))))) _lh_p_prim_arg1_3)
//│ 		and
//│ 		p_term_lh__d1 _lh_p_term_arg1_1_1 =
//│ 		  (((orElseMap_lh__d4 ((seQ_lh__d4 q_func_lh__d1) (`LH_C(p_ident_lh__d1, (`LH_C((look_for_lh__d3 '('), (`LH_C(((list_of_lh__d1 p_expr_lh__d1) ','), (`LH_C((look_for_lh__d2 ')'), (`LH_N))))))))))) p_prim_lh__d1) _lh_p_term_arg1_1_1)
//│ 		and
//│ 		p_term_lh__d2 _lh_p_term_arg1_1_0 =
//│ 		  (((orElseMap_lh__d5 ((seQ_lh__d5 q_func_lh__d2) (`LH_C(p_ident_lh__d2, (`LH_C((look_for_lh__d5 '('), (`LH_C(((list_of_lh__d2 p_expr_lh__d1) ','), (`LH_C((look_for_lh__d4 ')'), (`LH_N))))))))))) p_prim_lh__d2) _lh_p_term_arg1_1_0)
//│ 		and
//│ 		p_term_lh__d3 _lh_p_term_arg1_9 =
//│ 		  (((orElseMap_lh__d6 ((seQ_lh__d6 q_func_lh__d3) (`LH_C(p_ident_lh__d3, (`LH_C((look_for_lh__d7 '('), (`LH_C(((list_of_lh__d3 p_expr_lh__d1) ','), (`LH_C((look_for_lh__d6 ')'), (`LH_N))))))))))) p_prim_lh__d3) _lh_p_term_arg1_9);;
//│ 		let rec the_lh__d1 _lh_the_arg1_2 =
//│ 		  (match _lh_the_arg1_2 with
//│ 		    | `Just(_lh_the_Just_0_2) -> 
//│ 		      _lh_the_Just_0_2
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec parse_lh__d1 _lh_parse_arg1_1 =
//│ 		  ((fun _lh_funcomp_x_3_6 -> 
//│ 		    ((fun _lh_funcomp_x_3_7 -> 
//│ 		      ((fun _lh_funcomp_x_3_8 -> 
//│ 		        (unExpr_lh__d1 (fst_lh__d1 _lh_funcomp_x_3_8))) (the_lh__d1 _lh_funcomp_x_3_7))) (p_expr_lh__d1 _lh_funcomp_x_3_6))) _lh_parse_arg1_1);;
//│ 		let rec quant_lh__d5 _lh_quant_arg1_3 _lh_quant_arg2_3 _lh_quant_arg3_3 _lh_quant_arg4_3 =
//│ 		  (let rec p_3 = (fun x_6_3 -> 
//│ 		    ((_lh_quant_arg2_3 x_6_3) _lh_quant_arg3_3)) in
//│ 		    ((_lh_quant_arg1_3 p_3) _lh_quant_arg4_3));;
//│ 		let rec inList_lh__d3 _lh_inList_arg1_1 _lh_inList_arg2_1 =
//│ 		  (match _lh_inList_arg2_1 with
//│ 		    | `LH_C(_lh_inList_LH_C_0_1, _lh_inList_LH_C_1_1) -> 
//│ 		      (if (_lh_inList_arg1_1 = _lh_inList_LH_C_0_1) then
//│ 		        true
//│ 		      else
//│ 		        ((inList_lh__d3 _lh_inList_arg1_1) _lh_inList_LH_C_1_1))
//│ 		    | `LH_N -> 
//│ 		      false);;
//│ 		let rec geRewrite_lh__d3 _lh_geRewrite_arg1_1 _lh_geRewrite_arg2_1 _lh_geRewrite_arg3_1 =
//│ 		  ((inList_lh__d3 (_lh_geRewrite_arg1_1 (`LH_P2(_lh_geRewrite_arg2_1, _lh_geRewrite_arg3_1)))) (`LH_C((`Greater), (`LH_C((`Equal), (`LH_N))))));;
//│ 		let rec any_lh__d3 _lh_any_arg1_1 _lh_any_arg2_1 =
//│ 		  (match _lh_any_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_any_LH_C_0_1, _lh_any_LH_C_1_1) -> 
//│ 		      (if (_lh_any_arg1_1 _lh_any_LH_C_0_1) then
//│ 		        true
//│ 		      else
//│ 		        ((any_lh__d3 _lh_any_arg1_1) _lh_any_LH_C_1_1)));;
//│ 		let rec geRewrite_lh__d4 _lh_geRewrite_arg1_0 _lh_geRewrite_arg2_0 _lh_geRewrite_arg3_0 =
//│ 		  ((inList_lh__d4 (_lh_geRewrite_arg1_0 (`LH_P2(_lh_geRewrite_arg2_0, _lh_geRewrite_arg3_0)))) (`LH_C((`Greater), (`LH_C((`Equal), (`LH_N))))));;
//│ 		let rec all_lh__d5 _lh_all_arg1_0 _lh_all_arg2_0 =
//│ 		  (match _lh_all_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_all_LH_C_0_0, _lh_all_LH_C_1_0) -> 
//│ 		      (if (_lh_all_arg1_0 _lh_all_LH_C_0_0) then
//│ 		        ((all_lh__d5 _lh_all_arg1_0) _lh_all_LH_C_1_0)
//│ 		      else
//│ 		        false));;
//│ 		let rec quant_lh__d7 _lh_quant_arg1_1 _lh_quant_arg2_1 _lh_quant_arg3_1 _lh_quant_arg4_1 =
//│ 		  (let rec p_1 = (fun x_6_1 -> 
//│ 		    ((_lh_quant_arg2_1 x_6_1) _lh_quant_arg3_1)) in
//│ 		    ((_lh_quant_arg1_1 p_1) _lh_quant_arg4_1));;
//│ 		let rec ltRewrite_lh__d4 _lh_ltRewrite_arg1_0 _lh_ltRewrite_arg2_0 _lh_ltRewrite_arg3_0 =
//│ 		  ((_lh_ltRewrite_arg1_0 (`LH_P2(_lh_ltRewrite_arg2_0, _lh_ltRewrite_arg3_0))) = (`Less));;
//│ 		let rec quant_lh__d6 _lh_quant_arg1_2 _lh_quant_arg2_2 _lh_quant_arg3_2 _lh_quant_arg4_2 =
//│ 		  (let rec p_2 = (fun x_6_2 -> 
//│ 		    ((_lh_quant_arg2_2 x_6_2) _lh_quant_arg3_2)) in
//│ 		    ((_lh_quant_arg1_2 p_2) _lh_quant_arg4_2));;
//│ 		let rec quant_lh__d8 _lh_quant_arg1_0 _lh_quant_arg2_0 _lh_quant_arg3_0 _lh_quant_arg4_0 =
//│ 		  (let rec p_0 = (fun x_6_0 -> 
//│ 		    ((_lh_quant_arg2_0 x_6_0) _lh_quant_arg3_0)) in
//│ 		    ((_lh_quant_arg1_0 p_0) _lh_quant_arg4_0));;
//│ 		let rec lex_combine_lh__d1 _lh_lex_combine_arg1_0 _lh_lex_combine_arg2_0 =
//│ 		  (match _lh_lex_combine_arg1_0 with
//│ 		    | `Equal -> 
//│ 		      _lh_lex_combine_arg2_0
//│ 		    | `Greater -> 
//│ 		      (`Greater)
//│ 		    | `Less -> 
//│ 		      (`Less)
//│ 		    | `Unrelated -> 
//│ 		      (`Unrelated));;
//│ 		let rec lexico_lh__d1 _lh_lexico_arg1_0 _lh_lexico_arg2_0 =
//│ 		  (match _lh_lexico_arg2_0 with
//│ 		    | `LH_P2(_lh_lexico_LH_P2_0_0, _lh_lexico_LH_P2_1_0) -> 
//│ 		      (match _lh_lexico_LH_P2_0_0 with
//│ 		        | `LH_N -> 
//│ 		          (match _lh_lexico_LH_P2_1_0 with
//│ 		            | `LH_N -> 
//│ 		              (`Equal)
//│ 		            | `LH_C(_lh_lexico_LH_C_0_0, _lh_lexico_LH_C_1_0) -> 
//│ 		              (`Less))
//│ 		        | `LH_C(_lh_lexico_LH_C_0_1, _lh_lexico_LH_C_1_1) -> 
//│ 		          (match _lh_lexico_LH_P2_1_0 with
//│ 		            | `LH_N -> 
//│ 		              (`Greater)
//│ 		            | `LH_C(_lh_lexico_LH_C_0_2, _lh_lexico_LH_C_1_2) -> 
//│ 		              ((lex_combine_lh__d1 (_lh_lexico_arg1_0 (`LH_P2(_lh_lexico_LH_C_0_1, _lh_lexico_LH_C_0_2)))) ((lexico_lh__d1 _lh_lexico_arg1_0) (`LH_P2(_lh_lexico_LH_C_1_1, _lh_lexico_LH_C_1_2)))))));;
//│ 		let rec any_lh__d4 _lh_any_arg1_0 _lh_any_arg2_0 =
//│ 		  (match _lh_any_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_any_LH_C_0_0, _lh_any_LH_C_1_0) -> 
//│ 		      (if (_lh_any_arg1_0 _lh_any_LH_C_0_0) then
//│ 		        true
//│ 		      else
//│ 		        ((any_lh__d4 _lh_any_arg1_0) _lh_any_LH_C_1_0)));;
//│ 		let rec ltRewrite_lh__d3 _lh_ltRewrite_arg1_1 _lh_ltRewrite_arg2_1 _lh_ltRewrite_arg3_1 =
//│ 		  ((_lh_ltRewrite_arg1_1 (`LH_P2(_lh_ltRewrite_arg2_1, _lh_ltRewrite_arg3_1))) = (`Less));;
//│ 		let rec all_lh__d4 _lh_all_arg1_1 _lh_all_arg2_1 =
//│ 		  (match _lh_all_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_all_LH_C_0_1, _lh_all_LH_C_1_1) -> 
//│ 		      (if (_lh_all_arg1_1 _lh_all_LH_C_0_1) then
//│ 		        ((all_lh__d4 _lh_all_arg1_1) _lh_all_LH_C_1_1)
//│ 		      else
//│ 		        false));;
//│ 		let rec lex_ext_lh__d1 _lh_lex_ext_arg1_0 _lh_lex_ext_arg2_0 =
//│ 		  (match _lh_lex_ext_arg2_0 with
//│ 		    | `LH_P2(_lh_lex_ext_LH_P2_0_0, _lh_lex_ext_LH_P2_1_0) -> 
//│ 		      (match _lh_lex_ext_LH_P2_0_0 with
//│ 		        | `Func(_lh_lex_ext_Func_0_0, _lh_lex_ext_Func_1_0) -> 
//│ 		          (match _lh_lex_ext_LH_P2_1_0 with
//│ 		            | `Func(_lh_lex_ext_Func_0_1, _lh_lex_ext_Func_1_1) -> 
//│ 		              (let rec estimate_0 = ((lexico_lh__d1 _lh_lex_ext_arg1_0) (`LH_P2(_lh_lex_ext_Func_1_0, _lh_lex_ext_Func_1_1))) in
//│ 		                (let rec confirm_0 = (fun x_7_0 -> 
//│ 		                  (let rec _lh_matchIdent_1_6 = x_7_0 in
//│ 		                    (match _lh_matchIdent_1_6 with
//│ 		                      | `Equal -> 
//│ 		                        true
//│ 		                      | `Greater -> 
//│ 		                        ((((quant_lh__d6 all_lh__d4) (ltRewrite_lh__d3 _lh_lex_ext_arg1_0)) (`Func(_lh_lex_ext_Func_0_0, _lh_lex_ext_Func_1_0))) _lh_lex_ext_Func_1_1)
//│ 		                      | `Less -> 
//│ 		                        ((((quant_lh__d8 all_lh__d5) (ltRewrite_lh__d4 _lh_lex_ext_arg1_0)) (`Func(_lh_lex_ext_Func_0_1, _lh_lex_ext_Func_1_1))) _lh_lex_ext_Func_1_0)
//│ 		                      | `Unrelated -> 
//│ 		                        false))) in
//│ 		                  (if (confirm_0 estimate_0) then
//│ 		                    estimate_0
//│ 		                  else
//│ 		                    (if ((((quant_lh__d7 any_lh__d4) (geRewrite_lh__d3 _lh_lex_ext_arg1_0)) (`Func(_lh_lex_ext_Func_0_1, _lh_lex_ext_Func_1_1))) _lh_lex_ext_Func_1_0) then
//│ 		                      (`Greater)
//│ 		                    else
//│ 		                      (if ((((quant_lh__d5 any_lh__d3) (geRewrite_lh__d4 _lh_lex_ext_arg1_0)) (`Func(_lh_lex_ext_Func_0_0, _lh_lex_ext_Func_1_0))) _lh_lex_ext_Func_1_1) then
//│ 		                        (`Less)
//│ 		                      else
//│ 		                        (`Unrelated))))))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec map_lh__d1 f_1_4 ls_2_0 =
//│ 		  (match ls_2_0 with
//│ 		    | `LH_C(h_2_0, t_2_3) -> 
//│ 		      (`LH_C((f_1_4 h_2_0), ((map_lh__d1 f_1_4) t_2_3)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec ltRewrite_lh__d2 _lh_ltRewrite_arg1_2 _lh_ltRewrite_arg2_2 _lh_ltRewrite_arg3_2 =
//│ 		  ((_lh_ltRewrite_arg1_2 (`LH_P2(_lh_ltRewrite_arg2_2, _lh_ltRewrite_arg3_2))) = (`Less));;
//│ 		let rec or_lh__d2 _lh_or_arg1_0 =
//│ 		  (match _lh_or_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_or_LH_C_0_0, _lh_or_LH_C_1_0) -> 
//│ 		      (if _lh_or_LH_C_0_0 then
//│ 		        true
//│ 		      else
//│ 		        (or_lh__d2 _lh_or_LH_C_1_0)));;
//│ 		let rec map_lh__d4 f_1_0 ls_1_6 =
//│ 		  (match ls_1_6 with
//│ 		    | `LH_C(h_1_7, t_1_8) -> 
//│ 		      (`LH_C((f_1_0 h_1_7), ((map_lh__d4 f_1_0) t_1_8)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec expr_fold_lh__d2 _lh_expr_fold_arg1_2 _lh_expr_fold_arg2_2 _lh_expr_fold_arg3_2 =
//│ 		  (match _lh_expr_fold_arg3_2 with
//│ 		    | `Var(_lh_expr_fold_Var_0_2) -> 
//│ 		      (_lh_expr_fold_arg2_2 _lh_expr_fold_Var_0_2)
//│ 		    | `Func(_lh_expr_fold_Func_0_2, _lh_expr_fold_Func_1_2) -> 
//│ 		      ((_lh_expr_fold_arg1_2 _lh_expr_fold_Func_0_2) ((map_lh__d4 ((expr_fold_lh__d2 _lh_expr_fold_arg1_2) _lh_expr_fold_arg2_2)) _lh_expr_fold_Func_1_2)));;
//│ 		let rec occurs_lh__d2 _lh_occurs_arg1_0 =
//│ 		  ((expr_fold_lh__d2 (fun dum_3 -> 
//│ 		    or_lh__d2)) (fun x_6_4 -> 
//│ 		    (x_6_4 = _lh_occurs_arg1_0)));;
//│ 		let rec any_lh__d2 _lh_any_arg1_2 _lh_any_arg2_2 =
//│ 		  (match _lh_any_arg2_2 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_any_LH_C_0_2, _lh_any_LH_C_1_2) -> 
//│ 		      (if (_lh_any_arg1_2 _lh_any_LH_C_0_2) then
//│ 		        true
//│ 		      else
//│ 		        ((any_lh__d2 _lh_any_arg1_2) _lh_any_LH_C_1_2)));;
//│ 		let rec quant_lh__d2 _lh_quant_arg1_6 _lh_quant_arg2_6 _lh_quant_arg3_6 _lh_quant_arg4_6 =
//│ 		  (let rec p_6 = (fun x_6_8 -> 
//│ 		    ((_lh_quant_arg2_6 x_6_8) _lh_quant_arg3_6)) in
//│ 		    ((_lh_quant_arg1_6 p_6) _lh_quant_arg4_6));;
//│ 		let rec all_lh__d2 _lh_all_arg1_3 _lh_all_arg2_3 =
//│ 		  (match _lh_all_arg2_3 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_all_LH_C_0_3, _lh_all_LH_C_1_3) -> 
//│ 		      (if (_lh_all_arg1_3 _lh_all_LH_C_0_3) then
//│ 		        ((all_lh__d2 _lh_all_arg1_3) _lh_all_LH_C_1_3)
//│ 		      else
//│ 		        false));;
//│ 		let rec ltRewrite_lh__d1 _lh_ltRewrite_arg1_3 _lh_ltRewrite_arg2_3 _lh_ltRewrite_arg3_3 =
//│ 		  ((_lh_ltRewrite_arg1_3 (`LH_P2(_lh_ltRewrite_arg2_3, _lh_ltRewrite_arg3_3))) = (`Less));;
//│ 		let rec all_lh__d3 _lh_all_arg1_2 _lh_all_arg2_2 =
//│ 		  (match _lh_all_arg2_2 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_all_LH_C_0_2, _lh_all_LH_C_1_2) -> 
//│ 		      (if (_lh_all_arg1_2 _lh_all_LH_C_0_2) then
//│ 		        ((all_lh__d3 _lh_all_arg1_2) _lh_all_LH_C_1_2)
//│ 		      else
//│ 		        false));;
//│ 		let rec any_lh__d1 _lh_any_arg1_3 _lh_any_arg2_3 =
//│ 		  (match _lh_any_arg2_3 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_any_LH_C_0_3, _lh_any_LH_C_1_3) -> 
//│ 		      (if (_lh_any_arg1_3 _lh_any_LH_C_0_3) then
//│ 		        true
//│ 		      else
//│ 		        ((any_lh__d1 _lh_any_arg1_3) _lh_any_LH_C_1_3)));;
//│ 		let rec quant_lh__d4 _lh_quant_arg1_4 _lh_quant_arg2_4 _lh_quant_arg3_4 _lh_quant_arg4_4 =
//│ 		  (let rec p_4 = (fun x_6_5 -> 
//│ 		    ((_lh_quant_arg2_4 x_6_5) _lh_quant_arg3_4)) in
//│ 		    ((_lh_quant_arg1_4 p_4) _lh_quant_arg4_4));;
//│ 		let rec quant_lh__d1 _lh_quant_arg1_7 _lh_quant_arg2_7 _lh_quant_arg3_7 _lh_quant_arg4_7 =
//│ 		  (let rec p_7 = (fun x_6_9 -> 
//│ 		    ((_lh_quant_arg2_7 x_6_9) _lh_quant_arg3_7)) in
//│ 		    ((_lh_quant_arg1_7 p_7) _lh_quant_arg4_7));;
//│ 		let rec map_lh__d3 f_1_1 ls_1_7 =
//│ 		  (match ls_1_7 with
//│ 		    | `LH_C(h_1_8, t_1_9) -> 
//│ 		      (`LH_C((f_1_1 h_1_8), ((map_lh__d3 f_1_1) t_1_9)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec expr_fold_lh__d1 _lh_expr_fold_arg1_3 _lh_expr_fold_arg2_3 _lh_expr_fold_arg3_3 =
//│ 		  (match _lh_expr_fold_arg3_3 with
//│ 		    | `Var(_lh_expr_fold_Var_0_3) -> 
//│ 		      (_lh_expr_fold_arg2_3 _lh_expr_fold_Var_0_3)
//│ 		    | `Func(_lh_expr_fold_Func_0_3, _lh_expr_fold_Func_1_3) -> 
//│ 		      ((_lh_expr_fold_arg1_3 _lh_expr_fold_Func_0_3) ((map_lh__d3 ((expr_fold_lh__d1 _lh_expr_fold_arg1_3) _lh_expr_fold_arg2_3)) _lh_expr_fold_Func_1_3)));;
//│ 		let rec or_lh__d1 _lh_or_arg1_1 =
//│ 		  (match _lh_or_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_or_LH_C_0_1, _lh_or_LH_C_1_1) -> 
//│ 		      (if _lh_or_LH_C_0_1 then
//│ 		        true
//│ 		      else
//│ 		        (or_lh__d1 _lh_or_LH_C_1_1)));;
//│ 		let rec occurs_lh__d1 _lh_occurs_arg1_1 =
//│ 		  ((expr_fold_lh__d1 (fun dum_4 -> 
//│ 		    or_lh__d1)) (fun x_6_6 -> 
//│ 		    (x_6_6 = _lh_occurs_arg1_1)));;
//│ 		let rec inList_lh__d1 _lh_inList_arg1_3 _lh_inList_arg2_3 =
//│ 		  (match _lh_inList_arg2_3 with
//│ 		    | `LH_C(_lh_inList_LH_C_0_3, _lh_inList_LH_C_1_3) -> 
//│ 		      (if (_lh_inList_arg1_3 = _lh_inList_LH_C_0_3) then
//│ 		        true
//│ 		      else
//│ 		        ((inList_lh__d1 _lh_inList_arg1_3) _lh_inList_LH_C_1_3))
//│ 		    | `LH_N -> 
//│ 		      false);;
//│ 		let rec geRewrite_lh__d1 _lh_geRewrite_arg1_3 _lh_geRewrite_arg2_3 _lh_geRewrite_arg3_3 =
//│ 		  ((inList_lh__d1 (_lh_geRewrite_arg1_3 (`LH_P2(_lh_geRewrite_arg2_3, _lh_geRewrite_arg3_3)))) (`LH_C((`Greater), (`LH_C((`Equal), (`LH_N))))));;
//│ 		let rec inList_lh__d2 _lh_inList_arg1_2 _lh_inList_arg2_2 =
//│ 		  (match _lh_inList_arg2_2 with
//│ 		    | `LH_C(_lh_inList_LH_C_0_2, _lh_inList_LH_C_1_2) -> 
//│ 		      (if (_lh_inList_arg1_2 = _lh_inList_LH_C_0_2) then
//│ 		        true
//│ 		      else
//│ 		        ((inList_lh__d2 _lh_inList_arg1_2) _lh_inList_LH_C_1_2))
//│ 		    | `LH_N -> 
//│ 		      false);;
//│ 		let rec geRewrite_lh__d2 _lh_geRewrite_arg1_2 _lh_geRewrite_arg2_2 _lh_geRewrite_arg3_2 =
//│ 		  ((inList_lh__d2 (_lh_geRewrite_arg1_2 (`LH_P2(_lh_geRewrite_arg2_2, _lh_geRewrite_arg3_2)))) (`LH_C((`Greater), (`LH_C((`Equal), (`LH_N))))));;
//│ 		let rec quant_lh__d3 _lh_quant_arg1_5 _lh_quant_arg2_5 _lh_quant_arg3_5 _lh_quant_arg4_5 =
//│ 		  (let rec p_5 = (fun x_6_7 -> 
//│ 		    ((_lh_quant_arg2_5 x_6_7) _lh_quant_arg3_5)) in
//│ 		    ((_lh_quant_arg1_5 p_5) _lh_quant_arg4_5));;
//│ 		let rec rpo_lh__d1 _lh_rpo_arg1_0 _lh_rpo_arg2_0 =
//│ 		  (let rec rpo'_0 = (fun param_0 -> 
//│ 		    (let rec _lh_matchIdent_1_7 = param_0 in
//│ 		      (match _lh_matchIdent_1_7 with
//│ 		        | `LH_P2(_lh_rpo_LH_P2_0_0, _lh_rpo_LH_P2_1_0) -> 
//│ 		          (match _lh_rpo_LH_P2_0_0 with
//│ 		            | `Var(_lh_rpo_Var_0_0) -> 
//│ 		              (match _lh_rpo_LH_P2_1_0 with
//│ 		                | `Var(_lh_rpo_Var_0_1) -> 
//│ 		                  (if (_lh_rpo_Var_0_0 = _lh_rpo_Var_0_1) then
//│ 		                    (`Equal)
//│ 		                  else
//│ 		                    (`Unrelated))
//│ 		                | `Func(_lh_rpo_Func_0_0, _lh_rpo_Func_1_0) -> 
//│ 		                  (if ((occurs_lh__d2 _lh_rpo_Var_0_0) (`Func(_lh_rpo_Func_0_0, _lh_rpo_Func_1_0))) then
//│ 		                    (`Less)
//│ 		                  else
//│ 		                    (`Unrelated))
//│ 		                | _ -> 
//│ 		                  (failwith "msg"(`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_N)))))))))))))
//│ 		            | `Func(_lh_rpo_Func_0_1, _lh_rpo_Func_1_1) -> 
//│ 		              (match _lh_rpo_LH_P2_1_0 with
//│ 		                | `Var(_lh_rpo_Var_0_2) -> 
//│ 		                  (if ((occurs_lh__d1 _lh_rpo_Var_0_2) (`Func(_lh_rpo_Func_0_1, _lh_rpo_Func_1_1))) then
//│ 		                    (`Greater)
//│ 		                  else
//│ 		                    (`Unrelated))
//│ 		                | `Func(_lh_rpo_Func_0_2, _lh_rpo_Func_1_2) -> 
//│ 		                  (let rec _lh_matchIdent_1_8 = (_lh_rpo_arg1_0 (`LH_P2(_lh_rpo_Func_0_1, _lh_rpo_Func_0_2))) in
//│ 		                    (match _lh_matchIdent_1_8 with
//│ 		                      | `Equal -> 
//│ 		                        ((_lh_rpo_arg2_0 rpo'_0) (`LH_P2((`Func(_lh_rpo_Func_0_1, _lh_rpo_Func_1_1)), (`Func(_lh_rpo_Func_0_2, _lh_rpo_Func_1_2)))))
//│ 		                      | `Greater -> 
//│ 		                        (if ((((quant_lh__d4 all_lh__d3) (ltRewrite_lh__d2 rpo'_0)) (`Func(_lh_rpo_Func_0_1, _lh_rpo_Func_1_1))) _lh_rpo_Func_1_2) then
//│ 		                          (`Greater)
//│ 		                        else
//│ 		                          (if ((((quant_lh__d2 any_lh__d1) (geRewrite_lh__d1 rpo'_0)) (`Func(_lh_rpo_Func_0_1, _lh_rpo_Func_1_1))) _lh_rpo_Func_1_2) then
//│ 		                            (`Less)
//│ 		                          else
//│ 		                            (`Unrelated)))
//│ 		                      | `Less -> 
//│ 		                        (if ((((quant_lh__d3 all_lh__d2) (ltRewrite_lh__d1 rpo'_0)) (`Func(_lh_rpo_Func_0_2, _lh_rpo_Func_1_2))) _lh_rpo_Func_1_1) then
//│ 		                          (`Less)
//│ 		                        else
//│ 		                          (if ((((quant_lh__d1 any_lh__d2) (geRewrite_lh__d2 rpo'_0)) (`Func(_lh_rpo_Func_0_2, _lh_rpo_Func_1_2))) _lh_rpo_Func_1_1) then
//│ 		                            (`Greater)
//│ 		                          else
//│ 		                            (`Unrelated)))
//│ 		                      | `Unrelated -> 
//│ 		                        (`Unrelated)))
//│ 		                | _ -> 
//│ 		                  (failwith "msg"(`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_N)))))))))))))
//│ 		            | _ -> 
//│ 		              (failwith "msg"(`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_N)))))))))))))
//│ 		        | _ -> 
//│ 		          (failwith "msg"(`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_N))))))))))))))) in
//│ 		    rpo'_0);;
//│ 		let rec foldr_lh__d2 f_8 i_4 ls_1_4 =
//│ 		  (match ls_1_4 with
//│ 		    | `LH_C(h_1_4, t_1_5) -> 
//│ 		      ((f_8 h_1_4) (((foldr_lh__d2 f_8) i_4) t_1_5))
//│ 		    | `LH_N -> 
//│ 		      i_4);;
//│ 		let rec orElse_lh__d1 _lh_orElse_arg1_5 _lh_orElse_arg2_5 =
//│ 		  (match _lh_orElse_arg1_5 with
//│ 		    | `Nothing -> 
//│ 		      _lh_orElse_arg2_5
//│ 		    | _ -> 
//│ 		      _lh_orElse_arg1_5);;
//│ 		let rec first_ok_lh__d1 _lh_first_ok_arg1_0 =
//│ 		  (((foldr_lh__d2 orElse_lh__d1) (`Nothing)) _lh_first_ok_arg1_0);;
//│ 		let rec lift_lh__d2 _lh_lift_arg1_4 _lh_lift_arg2_4 =
//│ 		  (match _lh_lift_arg2_4 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_lift_Just_0_4) -> 
//│ 		      (`Just((_lh_lift_arg1_4 _lh_lift_Just_0_4))));;
//│ 		let rec mappend_lh__d1 xs_1_2 ys_3 =
//│ 		  (match xs_1_2 with
//│ 		    | `LH_C(h_1_5, t_1_6) -> 
//│ 		      (`LH_C(h_1_5, ((mappend_lh__d1 t_1_6) ys_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_3);;
//│ 		let rec zip_lz_nl_lh__d1 xs_1_1 ys_2 =
//│ 		  (match ys_2 with
//│ 		    | `LH_C(hy_1, ty_1) -> 
//│ 		      (match (Lazy.force xs_1_1) with
//│ 		        | `LH_C(hx_1, tx_1) -> 
//│ 		          (`LH_C((`LH_P2(hx_1, hy_1)), ((zip_lz_nl_lh__d1 tx_1) ty_1)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec enumFrom_lh__d1 a_1 =
//│ 		  (lazy (`LH_C(a_1, (enumFrom_lh__d1 (a_1 + 1)))));;
//│ 		let rec subterms_lh__d1 _lh_subterms_arg1_0 =
//│ 		  (match _lh_subterms_arg1_0 with
//│ 		    | `Var(_lh_subterms_Var_0_0) -> 
//│ 		      (`LH_N)
//│ 		    | `Func(_lh_subterms_Func_0_0, _lh_subterms_Func_1_0) -> 
//│ 		      ((mappend_lh__d1 (`LH_C((`LH_P2((`LH_N), (`Func(_lh_subterms_Func_0_0, _lh_subterms_Func_1_0)))), (`LH_N)))) (let rec _lh_listcomp_fun_6 = (fun _lh_listcomp_fun_para_6 -> 
//│ 		        (match _lh_listcomp_fun_para_6 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_6, _lh_listcomp_fun_ls_t_6) -> 
//│ 		            (match _lh_listcomp_fun_ls_h_6 with
//│ 		              | `LH_P2(_lh_subterms_LH_P2_0_0, _lh_subterms_LH_P2_1_0) -> 
//│ 		                (let rec _lh_listcomp_fun_7 = (fun _lh_listcomp_fun_para_7 -> 
//│ 		                  (match _lh_listcomp_fun_para_7 with
//│ 		                    | `LH_C(_lh_listcomp_fun_ls_h_7, _lh_listcomp_fun_ls_t_7) -> 
//│ 		                      (match _lh_listcomp_fun_ls_h_7 with
//│ 		                        | `LH_P2(_lh_subterms_LH_P2_0_1, _lh_subterms_LH_P2_1_1) -> 
//│ 		                          (`LH_C((`LH_P2((`LH_C(_lh_subterms_LH_P2_0_0, _lh_subterms_LH_P2_0_1)), _lh_subterms_LH_P2_1_1)), (_lh_listcomp_fun_7 _lh_listcomp_fun_ls_t_7)))
//│ 		                        | _ -> 
//│ 		                          (_lh_listcomp_fun_7 _lh_listcomp_fun_ls_t_7))
//│ 		                    | `LH_N -> 
//│ 		                      (_lh_listcomp_fun_6 _lh_listcomp_fun_ls_t_6))) in
//│ 		                  (_lh_listcomp_fun_7 (subterms_lh__d1 _lh_subterms_LH_P2_1_0)))
//│ 		              | _ -> 
//│ 		                (_lh_listcomp_fun_6 _lh_listcomp_fun_ls_t_6))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_6 ((zip_lz_nl_lh__d1 (enumFrom_lh__d1 0)) _lh_subterms_Func_1_0)))));;
//│ 		let rec modify_lh__d1 _lh_modify_arg1_0 _lh_modify_arg2_0 _lh_modify_arg3_0 =
//│ 		  (match _lh_modify_arg1_0 with
//│ 		    | `LH_C(_lh_modify_LH_C_0_0, _lh_modify_LH_C_1_0) -> 
//│ 		      (match _lh_modify_arg2_0 with
//│ 		        | 0 -> 
//│ 		          (`LH_C((_lh_modify_arg3_0 _lh_modify_LH_C_0_0), _lh_modify_LH_C_1_0))
//│ 		        | _ -> 
//│ 		          (`LH_C(_lh_modify_LH_C_0_0, (((modify_lh__d1 _lh_modify_LH_C_1_0) (_lh_modify_arg2_0 - 1)) _lh_modify_arg3_0))))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec replace_lh__d1 _lh_replace_arg1_0 _lh_replace_arg2_0 _lh_replace_arg3_0 =
//│ 		  (match _lh_replace_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      _lh_replace_arg3_0
//│ 		    | _ -> 
//│ 		      (match _lh_replace_arg1_0 with
//│ 		        | `Func(_lh_replace_Func_0_0, _lh_replace_Func_1_0) -> 
//│ 		          (match _lh_replace_arg2_0 with
//│ 		            | `LH_C(_lh_replace_LH_C_0_0, _lh_replace_LH_C_1_0) -> 
//│ 		              (`Func(_lh_replace_Func_0_0, (((modify_lh__d1 _lh_replace_Func_1_0) _lh_replace_LH_C_0_0) (fun t_2_0 -> 
//│ 		                (((replace_lh__d1 t_2_0) _lh_replace_LH_C_1_0) _lh_replace_arg3_0)))))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error")));;
//│ 		let rec inside_lh__d1 _lh_inside_arg1_0 _lh_inside_arg2_0 =
//│ 		  (first_ok_lh__d1 (let rec _lh_listcomp_fun_8 = (fun _lh_listcomp_fun_para_8 -> 
//│ 		    (match _lh_listcomp_fun_para_8 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_8, _lh_listcomp_fun_ls_t_8) -> 
//│ 		        (match _lh_listcomp_fun_ls_h_8 with
//│ 		          | `LH_P2(_lh_inside_LH_P2_0_0, _lh_inside_LH_P2_1_0) -> 
//│ 		            (`LH_C(((lift_lh__d2 ((replace_lh__d1 _lh_inside_arg2_0) _lh_inside_LH_P2_0_0)) (_lh_inside_arg1_0 _lh_inside_LH_P2_1_0)), (_lh_listcomp_fun_8 _lh_listcomp_fun_ls_t_8)))
//│ 		          | _ -> 
//│ 		            (_lh_listcomp_fun_8 _lh_listcomp_fun_ls_t_8))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_8 (subterms_lh__d1 _lh_inside_arg2_0))));;
//│ 		let rec lift_lh__d3 _lh_lift_arg1_3 _lh_lift_arg2_3 =
//│ 		  (match _lh_lift_arg2_3 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_lift_Just_0_3) -> 
//│ 		      (`Just((_lh_lift_arg1_3 _lh_lift_Just_0_3))));;
//│ 		let rec expr_fold_lh__d4 _lh_expr_fold_arg1_0 _lh_expr_fold_arg2_0 _lh_expr_fold_arg3_0 =
//│ 		  (match _lh_expr_fold_arg3_0 with
//│ 		    | `Var(_lh_expr_fold_Var_0_0) -> 
//│ 		      (_lh_expr_fold_arg2_0 _lh_expr_fold_Var_0_0)
//│ 		    | `Func(_lh_expr_fold_Func_0_0, _lh_expr_fold_Func_1_0) -> 
//│ 		      ((_lh_expr_fold_arg1_0 _lh_expr_fold_Func_0_0) ((map_lh__d7 ((expr_fold_lh__d4 _lh_expr_fold_arg1_0) _lh_expr_fold_arg2_0)) _lh_expr_fold_Func_1_0)));;
//│ 		let rec assoc_lh__d1 _lh_assoc_arg1_0 _lh_assoc_arg2_0 =
//│ 		  (let rec match_x_0 = (fun uv_0 -> 
//│ 		    (let rec _lh_matchIdent_1 = uv_0 in
//│ 		      (match _lh_matchIdent_1 with
//│ 		        | `LH_P2(_lh_assoc_LH_P2_0_0, _lh_assoc_LH_P2_1_0) -> 
//│ 		          ((maybeX_lh__d1 (_lh_assoc_arg2_0 = _lh_assoc_LH_P2_0_0)) _lh_assoc_LH_P2_1_0)))) in
//│ 		    (first_ok_lh__d1 ((map_lh__d7 match_x_0) _lh_assoc_arg1_0)));;
//│ 		let rec apply_lh__d1 _lh_apply_arg1_0 _lh_apply_arg2_0 =
//│ 		  ((getOrElse_lh__d1 ((assoc_lh__d1 _lh_apply_arg1_0) _lh_apply_arg2_0)) (`Var(_lh_apply_arg2_0)));;
//│ 		let rec sub_lh__d1 _lh_sub_arg1_0 _lh_sub_arg2_0 =
//│ 		  (((expr_fold_lh__d4 (fun x_5_7 y_7 -> 
//│ 		    (`Func(x_5_7, y_7)))) (apply_lh__d1 _lh_sub_arg2_0)) _lh_sub_arg1_0);;
//│ 		let rec the_lh__d3 _lh_the_arg1_0 =
//│ 		  (match _lh_the_arg1_0 with
//│ 		    | `Just(_lh_the_Just_0_0) -> 
//│ 		      _lh_the_Just_0_0
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec exists_lh__d1 _lh_exists_arg1_0 =
//│ 		  (match _lh_exists_arg1_0 with
//│ 		    | `Nothing -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      true);;
//│ 		let rec prop2_lh__d1 _lh_prop2_arg1_0 _lh_prop2_arg2_0 _lh_prop2_arg3_0 =
//│ 		  (match _lh_prop2_arg2_0 with
//│ 		    | `Nothing -> 
//│ 		      (`Nothing)
//│ 		    | `Just(_lh_prop2_Just_0_0) -> 
//│ 		      ((_lh_prop2_arg1_0 _lh_prop2_Just_0_0) _lh_prop2_arg3_0));;
//│ 		let rec prop_fold_lh__d1 _lh_prop_fold_arg1_0 _lh_prop_fold_arg2_0 _lh_prop_fold_arg3_0 =
//│ 		  (match _lh_prop_fold_arg3_0 with
//│ 		    | `LH_N -> 
//│ 		      (`Just(_lh_prop_fold_arg2_0))
//│ 		    | `LH_C(_lh_prop_fold_LH_C_0_0, _lh_prop_fold_LH_C_1_0) -> 
//│ 		      (((prop2_lh__d1 (prop_fold_lh__d1 _lh_prop_fold_arg1_0)) ((_lh_prop_fold_arg1_0 _lh_prop_fold_arg2_0) _lh_prop_fold_LH_C_0_0)) _lh_prop_fold_LH_C_1_0));;
//│ 		let rec zip_lh__d1 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(hx_0, tx_0) -> 
//│ 		      (match ys_0 with
//│ 		        | `LH_C(hy_0, ty_0) -> 
//│ 		          (`LH_C((`LH_P2(hx_0, hy_0)), ((zip_lh__d1 tx_0) ty_0)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec match'_lh__d1 _lh_match'_arg1_0 _lh_match'_arg2_0 =
//│ 		  (match _lh_match'_arg2_0 with
//│ 		    | `LH_P2(_lh_match'_LH_P2_0_0, _lh_match'_LH_P2_1_0) -> 
//│ 		      (match _lh_match'_LH_P2_0_0 with
//│ 		        | `Var(_lh_match'_Var_0_0) -> 
//│ 		          (let rec u_0 = ((assoc_lh__d1 _lh_match'_arg1_0) _lh_match'_Var_0_0) in
//│ 		            (if (not (exists_lh__d1 u_0)) then
//│ 		              (succeed_lh__d1 (`LH_C((`LH_P2(_lh_match'_Var_0_0, _lh_match'_LH_P2_1_0)), _lh_match'_arg1_0)))
//│ 		            else
//│ 		              (if ((eqExpr_lh__d1 (the_lh__d3 u_0)) _lh_match'_LH_P2_1_0) then
//│ 		                (succeed_lh__d1 _lh_match'_arg1_0)
//│ 		              else
//│ 		                croak_lh__d1)))
//│ 		        | `Func(_lh_match'_Func_0_0, _lh_match'_Func_1_0) -> 
//│ 		          (match _lh_match'_LH_P2_1_0 with
//│ 		            | `Func(_lh_match'_Func_0_1, _lh_match'_Func_1_1) -> 
//│ 		              (if (_lh_match'_Func_0_0 = _lh_match'_Func_0_1) then
//│ 		                (((prop_fold_lh__d1 match'_lh__d1) _lh_match'_arg1_0) ((zip_lh__d1 _lh_match'_Func_1_0) _lh_match'_Func_1_1))
//│ 		              else
//│ 		                croak_lh__d1)
//│ 		            | `Var(_lh_match'_Var_0_1) -> 
//│ 		              croak_lh__d1
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec match_lh__d1 _lh_match_arg1_0 _lh_match_arg2_0 =
//│ 		  ((match'_lh__d1 (`LH_N)) (`LH_P2(_lh_match_arg1_0, _lh_match_arg2_0)));;
//│ 		let rec rewrite_lh__d1 _lh_rewrite_arg1_0 =
//│ 		  (match _lh_rewrite_arg1_0 with
//│ 		    | `Eqn(_lh_rewrite_Eqn_0_0, _lh_rewrite_Eqn_1_0) -> 
//│ 		      (match _lh_rewrite_Eqn_1_0 with
//│ 		        | `LH_P2(_lh_rewrite_LH_P2_0_0, _lh_rewrite_LH_P2_1_0) -> 
//│ 		          (fun _lh_funcomp_x_3_2 -> 
//│ 		            ((lift_lh__d3 (sub_lh__d1 _lh_rewrite_LH_P2_1_0)) ((match_lh__d1 _lh_rewrite_LH_P2_0_0) _lh_funcomp_x_3_2)))));;
//│ 		let rec map_lh__d2 f_1_2 ls_1_9 =
//│ 		  (match ls_1_9 with
//│ 		    | `LH_C(h_1_9, t_2_1) -> 
//│ 		      (`LH_C((f_1_2 h_1_9), ((map_lh__d2 f_1_2) t_2_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec foldr_lh__d1 f_9 i_5 ls_1_5 =
//│ 		  (match ls_1_5 with
//│ 		    | `LH_C(h_1_6, t_1_7) -> 
//│ 		      ((f_9 h_1_6) (((foldr_lh__d1 f_9) i_5) t_1_7))
//│ 		    | `LH_N -> 
//│ 		      i_5);;
//│ 		let rec orElse_lh__d4 _lh_orElse_arg1_2 _lh_orElse_arg2_2 =
//│ 		  (match _lh_orElse_arg1_2 with
//│ 		    | `Nothing -> 
//│ 		      _lh_orElse_arg2_2
//│ 		    | _ -> 
//│ 		      _lh_orElse_arg1_2);;
//│ 		let rec orElseMap_lh__d3 _lh_orElseMap_arg1_1_2 _lh_orElseMap_arg2_1_2 _lh_orElseMap_arg3_1_2 =
//│ 		  ((orElse_lh__d4 (_lh_orElseMap_arg1_1_2 _lh_orElseMap_arg3_1_2)) (_lh_orElseMap_arg2_1_2 _lh_orElseMap_arg3_1_2));;
//│ 		let rec try_all_lh__d1 _lh_try_all_arg1_0 =
//│ 		  (((foldr_lh__d1 orElseMap_lh__d3) (fun dum_1 -> 
//│ 		    croak_lh__d1)) _lh_try_all_arg1_0);;
//│ 		let rec g_first_lh__d1 _lh_g_first_arg1_0 =
//│ 		  (match _lh_g_first_arg1_0 with
//│ 		    | `LH_C(_lh_g_first_LH_C_0_0, _lh_g_first_LH_C_1_0) -> 
//│ 		      (match _lh_g_first_LH_C_0_0 with
//│ 		        | `Func(_lh_g_first_Func_0_0, _lh_g_first_Func_1_0) -> 
//│ 		          (`Afunc(_lh_g_first_Func_0_0))
//│ 		        | `Var(_lh_g_first_Var_0_0) -> 
//│ 		          (`Avar)
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec mappend_lh__d2 xs_7 ys_1 =
//│ 		  (match xs_7 with
//│ 		    | `LH_C(h_7, t_8) -> 
//│ 		      (`LH_C(h_7, ((mappend_lh__d2 t_8) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec g_rest_lh__d1 _lh_g_rest_arg1_0 =
//│ 		  (match _lh_g_rest_arg1_0 with
//│ 		    | `LH_C(_lh_g_rest_LH_C_0_0, _lh_g_rest_LH_C_1_0) -> 
//│ 		      (match _lh_g_rest_LH_C_0_0 with
//│ 		        | `Func(_lh_g_rest_Func_0_0, _lh_g_rest_Func_1_0) -> 
//│ 		          ((mappend_lh__d2 _lh_g_rest_Func_1_0) _lh_g_rest_LH_C_1_0)
//│ 		        | `Var(_lh_g_rest_Var_0_0) -> 
//│ 		          _lh_g_rest_LH_C_1_0
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec tail_lh__d1 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_2, t_3) -> 
//│ 		      t_3
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec g_skip_lh__d1 _lh_g_skip_arg1_0 =
//│ 		  (tail_lh__d1 _lh_g_skip_arg1_0);;
//│ 		let rec find'_lh__d1 _lh_find'_arg1_0 _lh_find'_arg2_0 =
//│ 		  (match _lh_find'_arg2_0 with
//│ 		    | `Return(_lh_find'_Return_0_0) -> 
//│ 		      _lh_find'_Return_0_0
//│ 		    | `Switch(_lh_find'_Switch_0_0, _lh_find'_Switch_1_0) -> 
//│ 		      ((mappend_lh__d2 (((find_assoc_lh__d1 (g_first_lh__d1 _lh_find'_arg1_0)) (g_rest_lh__d1 _lh_find'_arg1_0)) _lh_find'_Switch_0_0)) ((find'_lh__d1 (g_skip_lh__d1 _lh_find'_arg1_0)) _lh_find'_Switch_1_0)))
//│ 		and
//│ 		find_assoc_lh__d1 _lh_find_assoc_arg1_0 _lh_find_assoc_arg2_0 _lh_find_assoc_arg3_0 =
//│ 		  (match _lh_find_assoc_arg1_0 with
//│ 		    | `Afunc(_lh_find_assoc_Afunc_0_0) -> 
//│ 		      ((getOrElse_lh__d1 ((lift_lh__d6 (find'_lh__d1 _lh_find_assoc_arg2_0)) ((assoc_lh__d1 _lh_find_assoc_arg3_0) _lh_find_assoc_Afunc_0_0))) (`LH_N))
//│ 		    | `Avar -> 
//│ 		      (`LH_N));;
//│ 		let rec g_init_lh__d1 _lh_g_init_arg1_0 =
//│ 		  (`LH_C(_lh_g_init_arg1_0, (`LH_N)));;
//│ 		let rec find_lh__d1 _lh_find_arg1_0 _lh_find_arg2_0 =
//│ 		  ((find'_lh__d1 (g_init_lh__d1 _lh_find_arg1_0)) _lh_find_arg2_0);;
//│ 		let rec dnet_reduce_lh__d1 _lh_dnet_reduce_arg1_0 _lh_dnet_reduce_arg2_0 =
//│ 		  ((try_all_lh__d1 ((map_lh__d2 rewrite_lh__d1) ((find_lh__d1 _lh_dnet_reduce_arg2_0) _lh_dnet_reduce_arg1_0))) _lh_dnet_reduce_arg2_0);;
//│ 		let rec super_reduce_lh__d1 _lh_super_reduce_arg1_0 =
//│ 		  (inside_lh__d1 (dnet_reduce_lh__d1 _lh_super_reduce_arg1_0));;
//│ 		let rec rank_lh__d1 _lh_rank_arg1_0 =
//│ 		  (match _lh_rank_arg1_0 with
//│ 		    | `LH_C(_lh_rank_LH_C_0_0, _lh_rank_LH_C_1_0) -> 
//│ 		      (match _lh_rank_LH_C_0_0 with
//│ 		        | 'E' -> 
//│ 		          (match _lh_rank_LH_C_1_0 with
//│ 		            | `LH_N -> 
//│ 		              1
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | '*' -> 
//│ 		          (match _lh_rank_LH_C_1_0 with
//│ 		            | `LH_N -> 
//│ 		              2
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | 'I' -> 
//│ 		          (match _lh_rank_LH_C_1_0 with
//│ 		            | `LH_N -> 
//│ 		              3
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec addby_lh__d1 _lh_addby_arg1_0 _lh_addby_arg2_0 _lh_addby_arg3_0 =
//│ 		  (let rec insert_0 = (fun x_2_4 ls_1_1 -> 
//│ 		    (let rec _lh_matchIdent_1_0 = ls_1_1 in
//│ 		      (match _lh_matchIdent_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_C(x_2_4, (`LH_N)))
//│ 		        | `LH_C(_lh_addby_LH_C_0_0, _lh_addby_LH_C_1_0) -> 
//│ 		          (if ((_lh_addby_arg1_0 x_2_4) <= (_lh_addby_arg1_0 _lh_addby_LH_C_0_0)) then
//│ 		            (`LH_C(x_2_4, (`LH_C(_lh_addby_LH_C_0_0, _lh_addby_LH_C_1_0))))
//│ 		          else
//│ 		            (`LH_C(_lh_addby_LH_C_0_0, ((insert_0 x_2_4) _lh_addby_LH_C_1_0))))))) in
//│ 		    (((foldr_lh__d6 insert_0) _lh_addby_arg3_0) _lh_addby_arg2_0));;
//│ 		let rec mk_item_lh__d1 _lh_mk_item_arg1_0 _lh_mk_item_arg2_0 =
//│ 		  (`Item((_lh_mk_item_arg1_0 _lh_mk_item_arg2_0), _lh_mk_item_arg2_0));;
//│ 		let rec item_cost_lh__d1 _lh_item_cost_arg1_0 =
//│ 		  (match _lh_item_cost_arg1_0 with
//│ 		    | `Item(_lh_item_cost_Item_0_0, _lh_item_cost_Item_1_0) -> 
//│ 		      _lh_item_cost_Item_0_0);;
//│ 		let rec map_lh__d5 f_5 ls_1_0 =
//│ 		  (match ls_1_0 with
//│ 		    | `LH_C(h_1_1, t_1_2) -> 
//│ 		      (`LH_C((f_5 h_1_1), ((map_lh__d5 f_5) t_1_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec add_agenda_lh__d1 _lh_add_agenda_arg1_0 _lh_add_agenda_arg2_0 =
//│ 		  ((addby_lh__d1 item_cost_lh__d1) ((map_lh__d5 (mk_item_lh__d1 _lh_add_agenda_arg1_0)) _lh_add_agenda_arg2_0));;
//│ 		let rec fst_lh__d3 _lh_fst_arg1_0 =
//│ 		  (match _lh_fst_arg1_0 with
//│ 		    | `LH_P2(_lh_fst_LH_P2_0_0, _lh_fst_LH_P2_1_0) -> 
//│ 		      _lh_fst_LH_P2_0_0);;
//│ 		let rec reducible_lh__d1 _lh_reducible_arg1_0 _lh_reducible_arg2_0 =
//│ 		  (match _lh_reducible_arg2_0 with
//│ 		    | `Eqn(_lh_reducible_Eqn_0_0, _lh_reducible_Eqn_1_0) -> 
//│ 		      (match _lh_reducible_Eqn_1_0 with
//│ 		        | `LH_P2(_lh_reducible_LH_P2_0_0, _lh_reducible_LH_P2_1_0) -> 
//│ 		          ((exists_lh__d1 (_lh_reducible_arg1_0 _lh_reducible_LH_P2_0_0)) || (exists_lh__d1 (_lh_reducible_arg1_0 _lh_reducible_LH_P2_1_0)))));;
//│ 		let rec snd_lh__d1 _lh_snd_arg1_0 =
//│ 		  (match _lh_snd_arg1_0 with
//│ 		    | `LH_P2(_lh_snd_LH_P2_0_0, _lh_snd_LH_P2_1_0) -> 
//│ 		      _lh_snd_LH_P2_1_0);;
//│ 		let rec resolve_lh__d1 _lh_resolve_arg1_0 _lh_resolve_arg2_0 =
//│ 		  (let rec lhs'_0 = ((simplify_lh__d1 _lh_resolve_arg1_0) (fst_lh__d3 _lh_resolve_arg2_0)) in
//│ 		    (let rec rhs'_0 = ((simplify_lh__d1 _lh_resolve_arg1_0) (snd_lh__d1 _lh_resolve_arg2_0)) in
//│ 		      (if ((eqExpr_lh__d1 lhs'_0) rhs'_0) then
//│ 		        croak_lh__d1
//│ 		      else
//│ 		        (succeed_lh__d1 (`LH_P2(lhs'_0, rhs'_0))))));;
//│ 		let rec eqno_lh__d1 _lh_eqno_arg1_0 =
//│ 		  (match _lh_eqno_arg1_0 with
//│ 		    | `Eqn(_lh_eqno_Eqn_0_0, _lh_eqno_Eqn_1_0) -> 
//│ 		      (match _lh_eqno_Eqn_1_0 with
//│ 		        | `LH_P2(_lh_eqno_LH_P2_0_0, _lh_eqno_LH_P2_1_0) -> 
//│ 		          _lh_eqno_Eqn_0_0));;
//│ 		let rec split_lh__d1 _lh_split_arg1_0 _lh_split_arg2_0 =
//│ 		  (let rec tmp_0 = ((zip_lh__d1 ((map_lh__d7 _lh_split_arg1_0) _lh_split_arg2_0)) _lh_split_arg2_0) in
//│ 		    (`LH_P2((let rec _lh_listcomp_fun_4 = (fun _lh_listcomp_fun_para_4 -> 
//│ 		      (match _lh_listcomp_fun_para_4 with
//│ 		        | `LH_C(_lh_listcomp_fun_ls_h_4, _lh_listcomp_fun_ls_t_4) -> 
//│ 		          (match _lh_listcomp_fun_ls_h_4 with
//│ 		            | `LH_P2(_lh_split_LH_P2_0_0, _lh_split_LH_P2_1_0) -> 
//│ 		              (if _lh_split_LH_P2_0_0 then
//│ 		                (`LH_C(_lh_split_LH_P2_1_0, (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4)))
//│ 		              else
//│ 		                (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4))
//│ 		            | _ -> 
//│ 		              (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))) in
//│ 		      (_lh_listcomp_fun_4 tmp_0)), (let rec _lh_listcomp_fun_5 = (fun _lh_listcomp_fun_para_5 -> 
//│ 		      (match _lh_listcomp_fun_para_5 with
//│ 		        | `LH_C(_lh_listcomp_fun_ls_h_5, _lh_listcomp_fun_ls_t_5) -> 
//│ 		          (match _lh_listcomp_fun_ls_h_5 with
//│ 		            | `LH_P2(_lh_split_LH_P2_0_1, _lh_split_LH_P2_1_1) -> 
//│ 		              (if (not _lh_split_LH_P2_0_1) then
//│ 		                (`LH_C(_lh_split_LH_P2_1_1, (_lh_listcomp_fun_5 _lh_listcomp_fun_ls_t_5)))
//│ 		              else
//│ 		                (_lh_listcomp_fun_5 _lh_listcomp_fun_ls_t_5))
//│ 		            | _ -> 
//│ 		              (_lh_listcomp_fun_5 _lh_listcomp_fun_ls_t_5))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))) in
//│ 		      (_lh_listcomp_fun_5 tmp_0)))));;
//│ 		let rec filter_lh__d1 f_0 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_0, t_1) -> 
//│ 		      (if (f_0 h_0) then
//│ 		        (`LH_C(h_0, ((filter_lh__d1 f_0) t_1)))
//│ 		      else
//│ 		        ((filter_lh__d1 f_0) t_1))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_dnet_lh__d1 _lh_map_dnet_arg1_0 _lh_map_dnet_arg2_0 =
//│ 		  (match _lh_map_dnet_arg2_0 with
//│ 		    | `Switch(_lh_map_dnet_Switch_0_0, _lh_map_dnet_Switch_1_0) -> 
//│ 		      (`Switch(((map_lh__d7 ((cross_lh__d2 (fun x_1 -> 
//│ 		        x_1)) (map_dnet_lh__d1 _lh_map_dnet_arg1_0))) _lh_map_dnet_Switch_0_0), ((map_dnet_lh__d1 _lh_map_dnet_arg1_0) _lh_map_dnet_Switch_1_0)))
//│ 		    | `Return(_lh_map_dnet_Return_0_0) -> 
//│ 		      (`Return((_lh_map_dnet_arg1_0 _lh_map_dnet_Return_0_0))));;
//│ 		let rec delete_eqns_lh__d1 _lh_delete_eqns_arg1_0 =
//│ 		  (let rec ok_0 = (fun e_0 -> 
//│ 		    (not ((inList_lh__d4 (eqno_lh__d1 e_0)) _lh_delete_eqns_arg1_0))) in
//│ 		    (map_dnet_lh__d1 (filter_lh__d1 ok_0)));;
//│ 		let rec concat_lh__d1 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_1, t_2) -> 
//│ 		      ((mappend_lh__d2 h_1) (concat_lh__d1 t_2))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec box_lh__d1 _lh_box_arg1_0 =
//│ 		  (`LH_C(_lh_box_arg1_0, (`LH_N)));;
//│ 		let rec listify_lh__d1 _lh_listify_arg1_0 =
//│ 		  ((getOrElse_lh__d1 ((lift_lh__d6 box_lh__d1) _lh_listify_arg1_0)) (`LH_N));;
//│ 		let rec sift_lh__d1 _lh_sift_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_0 -> 
//│ 		    (concat_lh__d1 ((map_lh__d7 listify_lh__d1) _lh_funcomp_x_0))) _lh_sift_arg1_0);;
//│ 		let rec reduce1_lh__d1 _lh_reduce1_arg1_0 =
//│ 		  (inside_lh__d1 (rewrite_lh__d1 _lh_reduce1_arg1_0));;
//│ 		let rec lhs_lh__d1 _lh_lhs_arg1_0 =
//│ 		  (match _lh_lhs_arg1_0 with
//│ 		    | `Eqn(_lh_lhs_Eqn_0_0, _lh_lhs_Eqn_1_0) -> 
//│ 		      (match _lh_lhs_Eqn_1_0 with
//│ 		        | `LH_P2(_lh_lhs_LH_P2_0_0, _lh_lhs_LH_P2_1_0) -> 
//│ 		          _lh_lhs_LH_P2_0_0));;
//│ 		let rec update_alist_lh__d1 _lh_update_alist_arg1_0 _lh_update_alist_arg2_0 _lh_update_alist_arg3_0 =
//│ 		  (let rec upd_0 = (fun ls_0 -> 
//│ 		    (let rec _lh_matchIdent_0 = ls_0 in
//│ 		      (match _lh_matchIdent_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_C((`LH_P2(_lh_update_alist_arg1_0, (_lh_update_alist_arg2_0 _lh_update_alist_arg3_0))), (`LH_N)))
//│ 		        | `LH_C(_lh_update_alist_LH_C_0_0, _lh_update_alist_LH_C_1_0) -> 
//│ 		          (match _lh_update_alist_LH_C_0_0 with
//│ 		            | `LH_P2(_lh_update_alist_LH_P2_0_0, _lh_update_alist_LH_P2_1_0) -> 
//│ 		              (if (_lh_update_alist_arg1_0 = _lh_update_alist_LH_P2_0_0) then
//│ 		                (`LH_C((`LH_P2(_lh_update_alist_arg1_0, (_lh_update_alist_arg2_0 _lh_update_alist_LH_P2_1_0))), _lh_update_alist_LH_C_1_0))
//│ 		              else
//│ 		                (`LH_C((`LH_P2(_lh_update_alist_LH_P2_0_0, _lh_update_alist_LH_P2_1_0)), (upd_0 _lh_update_alist_LH_C_1_0)))))))) in
//│ 		    upd_0);;
//│ 		let rec empty_net_lh__d1 =
//│ 		  (`Return((`LH_N)));;
//│ 		let rec is_switch_lh__d1 _lh_is_switch_arg1_0 =
//│ 		  (match _lh_is_switch_arg1_0 with
//│ 		    | `Switch(_lh_is_switch_Switch_0_0, _lh_is_switch_Switch_1_0) -> 
//│ 		      true
//│ 		    | `Return(_lh_is_switch_Return_0_0) -> 
//│ 		      false);;
//│ 		let rec thread_lh__d1 _lh_thread_arg1_0 _lh_thread_arg2_0 _lh_thread_arg3_0 =
//│ 		  (match _lh_thread_arg1_0 with
//│ 		    | `LH_C(_lh_thread_LH_C_0_0, _lh_thread_LH_C_1_0) -> 
//│ 		      (match _lh_thread_LH_C_0_0 with
//│ 		        | `Afunc(_lh_thread_Afunc_0_0) -> 
//│ 		          (match _lh_thread_arg3_0 with
//│ 		            | `Switch(_lh_thread_Switch_0_0, _lh_thread_Switch_1_0) -> 
//│ 		              (`Switch(((((update_alist_lh__d1 _lh_thread_Afunc_0_0) ((thread_lh__d1 _lh_thread_LH_C_1_0) _lh_thread_arg2_0)) empty_net_lh__d1) _lh_thread_Switch_0_0), _lh_thread_Switch_1_0))
//│ 		            | `Return(_lh_thread_Return_0_0) -> 
//│ 		              (((thread_lh__d1 (`LH_C((`Afunc(_lh_thread_Afunc_0_0)), _lh_thread_LH_C_1_0))) _lh_thread_arg2_0) (`Switch((`LH_N), (`Return(_lh_thread_Return_0_0))))))
//│ 		        | `Avar -> 
//│ 		          (match _lh_thread_arg3_0 with
//│ 		            | `Switch(_lh_thread_Switch_0_1, _lh_thread_Switch_1_1) -> 
//│ 		              (`Switch(_lh_thread_Switch_0_1, (((thread_lh__d1 _lh_thread_LH_C_1_0) _lh_thread_arg2_0) _lh_thread_Switch_1_1)))
//│ 		            | `Return(_lh_thread_Return_0_1) -> 
//│ 		              (let rec d'_0 = (((thread_lh__d1 _lh_thread_LH_C_1_0) _lh_thread_arg2_0) (`Return(_lh_thread_Return_0_1))) in
//│ 		                (if (is_switch_lh__d1 d'_0) then
//│ 		                  (`Switch((`LH_N), d'_0))
//│ 		                else
//│ 		                  d'_0))))
//│ 		    | `LH_N -> 
//│ 		      (match _lh_thread_arg3_0 with
//│ 		        | `Return(_lh_thread_Return_0_2) -> 
//│ 		          (`Return((`LH_C(_lh_thread_arg2_0, _lh_thread_Return_0_2))))));;
//│ 		let rec preorder_lh__d1 _lh_preorder_arg1_0 =
//│ 		  (if ((eqListExpr_lh__d1 _lh_preorder_arg1_0) (`LH_N)) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    ((mappend_lh__d2 (`LH_C((g_first_lh__d1 _lh_preorder_arg1_0), (`LH_N)))) (preorder_lh__d1 (g_rest_lh__d1 _lh_preorder_arg1_0))));;
//│ 		let rec add_eqn_lh__d1 _lh_add_eqn_arg1_0 _lh_add_eqn_arg2_0 =
//│ 		  (((thread_lh__d1 (preorder_lh__d1 (g_init_lh__d1 (lhs_lh__d1 _lh_add_eqn_arg2_0)))) _lh_add_eqn_arg2_0) _lh_add_eqn_arg1_0);;
//│ 		let rec eqpr_lh__d1 _lh_eqpr_arg1_0 =
//│ 		  (match _lh_eqpr_arg1_0 with
//│ 		    | `Eqn(_lh_eqpr_Eqn_0_0, _lh_eqpr_Eqn_1_0) -> 
//│ 		      _lh_eqpr_Eqn_1_0);;
//│ 		let rec mk_crit_lh__d1 _lh_mk_crit_arg1_0 _lh_mk_crit_arg2_0 _lh_mk_crit_arg3_0 =
//│ 		  (match _lh_mk_crit_arg1_0 with
//│ 		    | `Eqn(_lh_mk_crit_Eqn_0_0, _lh_mk_crit_Eqn_1_0) -> 
//│ 		      (match _lh_mk_crit_Eqn_1_0 with
//│ 		        | `LH_P2(_lh_mk_crit_LH_P2_0_0, _lh_mk_crit_LH_P2_1_0) -> 
//│ 		          (match _lh_mk_crit_arg2_0 with
//│ 		            | `Eqn(_lh_mk_crit_Eqn_0_1, _lh_mk_crit_Eqn_1_1) -> 
//│ 		              (match _lh_mk_crit_Eqn_1_1 with
//│ 		                | `LH_P2(_lh_mk_crit_LH_P2_0_1, _lh_mk_crit_LH_P2_1_1) -> 
//│ 		                  (match _lh_mk_crit_arg3_0 with
//│ 		                    | `LH_P2(_lh_mk_crit_LH_P2_0_2, _lh_mk_crit_LH_P2_1_2) -> 
//│ 		                      (`LH_P2(((sub_lh__d1 (((replace_lh__d1 _lh_mk_crit_LH_P2_0_1) _lh_mk_crit_LH_P2_0_2) _lh_mk_crit_LH_P2_1_0)) _lh_mk_crit_LH_P2_1_2), ((sub_lh__d1 _lh_mk_crit_LH_P2_1_1) _lh_mk_crit_LH_P2_1_2))))))));;
//│ 		let rec comp_sub_lh__d1 _lh_comp_sub_arg1_0 _lh_comp_sub_arg2_0 =
//│ 		  ((mappend_lh__d2 (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		    (match _lh_listcomp_fun_para_0 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		        (match _lh_listcomp_fun_ls_h_0 with
//│ 		          | `LH_P2(_lh_comp_sub_LH_P2_0_0, _lh_comp_sub_LH_P2_1_0) -> 
//│ 		            (`LH_C((`LH_P2(_lh_comp_sub_LH_P2_0_0, ((sub_lh__d1 _lh_comp_sub_LH_P2_1_0) _lh_comp_sub_arg1_0))), (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		          | _ -> 
//│ 		            (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_0 _lh_comp_sub_arg2_0))) _lh_comp_sub_arg1_0);;
//│ 		let rec unify'_lh__d1 _lh_unify'_arg1_0 _lh_unify'_arg2_0 =
//│ 		  (match _lh_unify'_arg2_0 with
//│ 		    | `LH_P2(_lh_unify'_LH_P2_0_0, _lh_unify'_LH_P2_1_0) -> 
//│ 		      (match _lh_unify'_LH_P2_0_0 with
//│ 		        | `Var(_lh_unify'_Var_0_0) -> 
//│ 		          (((univar_lh__d1 _lh_unify'_arg1_0) _lh_unify'_Var_0_0) _lh_unify'_LH_P2_1_0)
//│ 		        | `Func(_lh_unify'_Func_0_0, _lh_unify'_Func_1_0) -> 
//│ 		          (match _lh_unify'_LH_P2_1_0 with
//│ 		            | `Var(_lh_unify'_Var_0_1) -> 
//│ 		              (((univar_lh__d1 _lh_unify'_arg1_0) _lh_unify'_Var_0_1) (`Func(_lh_unify'_Func_0_0, _lh_unify'_Func_1_0)))
//│ 		            | `Func(_lh_unify'_Func_0_1, _lh_unify'_Func_1_1) -> 
//│ 		              (if (_lh_unify'_Func_0_0 = _lh_unify'_Func_0_1) then
//│ 		                (((prop_fold_lh__d1 unify'_lh__d1) _lh_unify'_arg1_0) ((zip_lh__d1 _lh_unify'_Func_1_0) _lh_unify'_Func_1_1))
//│ 		              else
//│ 		                croak_lh__d1))))
//│ 		and
//│ 		univar_lh__d1 _lh_univar_arg1_0 _lh_univar_arg2_0 _lh_univar_arg3_0 =
//│ 		  (let rec t_0 = ((assoc_lh__d1 _lh_univar_arg1_0) _lh_univar_arg2_0) in
//│ 		    (if (exists_lh__d1 t_0) then
//│ 		      ((unify'_lh__d1 _lh_univar_arg1_0) (`LH_P2((the_lh__d3 t_0), _lh_univar_arg3_0)))
//│ 		    else
//│ 		      (if ((eqExpr_lh__d1 _lh_univar_arg3_0) (`Var(_lh_univar_arg2_0))) then
//│ 		        (succeed_lh__d1 _lh_univar_arg1_0)
//│ 		      else
//│ 		        (let rec u'_0 = ((sub_lh__d1 _lh_univar_arg3_0) _lh_univar_arg1_0) in
//│ 		          (if (not ((occurs_lh__d2 _lh_univar_arg2_0) u'_0)) then
//│ 		            (succeed_lh__d1 ((comp_sub_lh__d1 (`LH_C((`LH_P2(_lh_univar_arg2_0, u'_0)), (`LH_N)))) _lh_univar_arg1_0))
//│ 		          else
//│ 		            croak_lh__d1)))));;
//│ 		let rec unify_lh__d1 _lh_unify_arg1_0 _lh_unify_arg2_0 =
//│ 		  ((unify'_lh__d1 (`LH_N)) (`LH_P2(_lh_unify_arg1_0, _lh_unify_arg2_0)));;
//│ 		let rec pair_lh__d1 _lh_pair_arg1_0 _lh_pair_arg2_0 =
//│ 		  (`LH_P2(_lh_pair_arg1_0, _lh_pair_arg2_0));;
//│ 		let rec superpose_lh__d1 _lh_superpose_arg1_0 _lh_superpose_arg2_0 =
//│ 		  (sift_lh__d1 (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		    (match _lh_listcomp_fun_para_1 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		        (match _lh_listcomp_fun_ls_h_1 with
//│ 		          | `LH_P2(_lh_superpose_LH_P2_0_0, _lh_superpose_LH_P2_1_0) -> 
//│ 		            (`LH_C(((lift_lh__d6 (pair_lh__d1 _lh_superpose_LH_P2_0_0)) ((unify_lh__d1 _lh_superpose_arg1_0) _lh_superpose_LH_P2_1_0)), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		          | _ -> 
//│ 		            (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_1 (subterms_lh__d1 _lh_superpose_arg2_0))));;
//│ 		let rec strict_super_lh__d1 _lh_strict_super_arg1_0 _lh_strict_super_arg2_0 =
//│ 		  (match _lh_strict_super_arg2_0 with
//│ 		    | `Func(_lh_strict_super_Func_0_0, _lh_strict_super_Func_1_0) -> 
//│ 		      (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		        (match _lh_listcomp_fun_para_2 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		            (match _lh_listcomp_fun_ls_h_2 with
//│ 		              | `LH_P2(_lh_strict_super_LH_P2_0_0, _lh_strict_super_LH_P2_1_0) -> 
//│ 		                (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		                  (match _lh_listcomp_fun_para_3 with
//│ 		                    | `LH_C(_lh_listcomp_fun_ls_h_3, _lh_listcomp_fun_ls_t_3) -> 
//│ 		                      (match _lh_listcomp_fun_ls_h_3 with
//│ 		                        | `LH_P2(_lh_strict_super_LH_P2_0_1, _lh_strict_super_LH_P2_1_1) -> 
//│ 		                          (`LH_C((`LH_P2((`LH_C(_lh_strict_super_LH_P2_0_0, _lh_strict_super_LH_P2_0_1)), _lh_strict_super_LH_P2_1_1)), (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3)))
//│ 		                        | _ -> 
//│ 		                          (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3))
//│ 		                    | `LH_N -> 
//│ 		                      (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2))) in
//│ 		                  (_lh_listcomp_fun_3 ((superpose_lh__d1 _lh_strict_super_arg1_0) _lh_strict_super_LH_P2_1_0)))
//│ 		              | _ -> 
//│ 		                (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_2 ((zip_lz_nl_lh__d1 (enumFrom_lh__d1 0)) _lh_strict_super_Func_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec crit_pairs_lh__d1 _lh_crit_pairs_arg1_0 _lh_crit_pairs_arg2_0 =
//│ 		  ((mappend_lh__d2 ((map_lh__d7 ((mk_crit_lh__d1 _lh_crit_pairs_arg1_0) _lh_crit_pairs_arg2_0)) ((superpose_lh__d1 (lhs_lh__d1 _lh_crit_pairs_arg1_0)) (lhs_lh__d1 _lh_crit_pairs_arg2_0)))) ((map_lh__d7 ((mk_crit_lh__d1 _lh_crit_pairs_arg2_0) _lh_crit_pairs_arg1_0)) ((strict_super_lh__d1 (lhs_lh__d1 _lh_crit_pairs_arg2_0)) (lhs_lh__d1 _lh_crit_pairs_arg1_0))));;
//│ 		let rec stand_lh__d1 _lh_stand_arg1_0 =
//│ 		  ((expr_fold_lh__d4 (fun x_0 y_0 -> 
//│ 		    (`Func(x_0, y_0)))) (fun v_0 -> 
//│ 		    (`Var(((mappend_lh__d2 v_0) _lh_stand_arg1_0)))));;
//│ 		let rec stand_eqn_lh__d1 _lh_stand_eqn_arg1_0 _lh_stand_eqn_arg2_0 =
//│ 		  (match _lh_stand_eqn_arg2_0 with
//│ 		    | `Eqn(_lh_stand_eqn_Eqn_0_0, _lh_stand_eqn_Eqn_1_0) -> 
//│ 		      (match _lh_stand_eqn_Eqn_1_0 with
//│ 		        | `LH_P2(_lh_stand_eqn_LH_P2_0_0, _lh_stand_eqn_LH_P2_1_0) -> 
//│ 		          (`Eqn(_lh_stand_eqn_Eqn_0_0, (`LH_P2(((stand_lh__d1 _lh_stand_eqn_arg1_0) _lh_stand_eqn_LH_P2_0_0), ((stand_lh__d1 _lh_stand_eqn_arg1_0) _lh_stand_eqn_LH_P2_1_0)))))));;
//│ 		let rec all_crit_pairs_lh__d1 _lh_all_crit_pairs_arg1_0 _lh_all_crit_pairs_arg2_0 =
//│ 		  (let rec eqn'_0 = ((stand_eqn_lh__d1 (`LH_C('1', (`LH_N)))) _lh_all_crit_pairs_arg1_0) in
//│ 		    (let rec eqn''_0 = ((stand_eqn_lh__d1 (`LH_C('2', (`LH_N)))) _lh_all_crit_pairs_arg1_0) in
//│ 		      (let rec theory''_0 = ((map_lh__d7 (stand_eqn_lh__d1 (`LH_C('2', (`LH_N))))) _lh_all_crit_pairs_arg2_0) in
//│ 		        ((mappend_lh__d2 ((map_lh__d7 ((mk_crit_lh__d1 eqn'_0) eqn''_0)) ((strict_super_lh__d1 (lhs_lh__d1 eqn'_0)) (lhs_lh__d1 eqn''_0)))) (concat_lh__d1 ((map_lh__d7 (crit_pairs_lh__d1 eqn'_0)) theory''_0))))));;
//│ 		let rec preprocess_lh__d1 _lh_preprocess_arg1_0 _lh_preprocess_arg2_0 =
//│ 		  (match _lh_preprocess_arg2_0 with
//│ 		    | `LH_P2(_lh_preprocess_LH_P2_0_0, _lh_preprocess_LH_P2_1_0) -> 
//│ 		      (`LH_P2(((simplify_lh__d1 (super_reduce_lh__d1 _lh_preprocess_arg1_0)) _lh_preprocess_LH_P2_0_0), ((simplify_lh__d1 (super_reduce_lh__d1 _lh_preprocess_arg1_0)) _lh_preprocess_LH_P2_1_0))));;
//│ 		let rec process1_lh__d1 _lh_process1_arg1_0 _lh_process1_arg2_0 _lh_process1_arg3_0 _lh_process1_arg4_0 _lh_process1_arg5_0 _lh_process1_arg6_0 =
//│ 		  (match _lh_process1_arg6_0 with
//│ 		    | `LH_P2(_lh_process1_LH_P2_0_0, _lh_process1_LH_P2_1_0) -> 
//│ 		      (let rec o_0 = ((fst_lh__d3 _lh_process1_arg1_0) (`LH_P2(_lh_process1_LH_P2_0_0, _lh_process1_LH_P2_1_0))) in
//│ 		        (let rec _lh_matchIdent_1_1 = o_0 in
//│ 		          (match _lh_matchIdent_1_1 with
//│ 		            | `Unrelated -> 
//│ 		              (((((process_lh__d1 _lh_process1_arg1_0) _lh_process1_arg2_0) _lh_process1_arg3_0) _lh_process1_arg4_0) (((add_agenda_lh__d1 (fun dum_0 -> 
//│ 		                1000)) (`LH_C((`LH_P2(_lh_process1_LH_P2_0_0, _lh_process1_LH_P2_1_0)), (`LH_N)))) _lh_process1_arg5_0))
//│ 		            | `Equal -> 
//│ 		              (((((process_lh__d1 _lh_process1_arg1_0) _lh_process1_arg2_0) _lh_process1_arg3_0) _lh_process1_arg4_0) _lh_process1_arg5_0)
//│ 		            | _ -> 
//│ 		              (let rec eqn_0 = (let rec _lh_matchIdent_1_2 = o_0 in
//│ 		                (match _lh_matchIdent_1_2 with
//│ 		                  | `Greater -> 
//│ 		                    (`Eqn(_lh_process1_arg2_0, (`LH_P2(_lh_process1_LH_P2_0_0, _lh_process1_LH_P2_1_0))))
//│ 		                  | `Less -> 
//│ 		                    (`Eqn(_lh_process1_arg2_0, (`LH_P2(_lh_process1_LH_P2_1_0, _lh_process1_LH_P2_0_0)))))) in
//│ 		                ((((((process2_lh__d1 _lh_process1_arg1_0) (_lh_process1_arg2_0 + 1)) _lh_process1_arg3_0) _lh_process1_arg4_0) _lh_process1_arg5_0) eqn_0))))))
//│ 		and
//│ 		process2_lh__d1 _lh_process2_arg1_0 _lh_process2_arg2_0 _lh_process2_arg3_0 _lh_process2_arg4_0 _lh_process2_arg5_0 _lh_process2_arg6_0 =
//│ 		  (let rec _lh_matchIdent_2 = ((split_lh__d1 (reducible_lh__d1 (reduce1_lh__d1 _lh_process2_arg6_0))) _lh_process2_arg3_0) in
//│ 		    (match _lh_matchIdent_2 with
//│ 		      | `LH_P2(_lh_process2_LH_P2_0_0, _lh_process2_LH_P2_1_0) -> 
//│ 		        (let rec net'_0 = ((add_eqn_lh__d1 ((delete_eqns_lh__d1 ((map_lh__d7 eqno_lh__d1) _lh_process2_LH_P2_0_0)) _lh_process2_arg4_0)) _lh_process2_arg6_0) in
//│ 		          (let rec deletions_0 = ((map_lh__d7 eqpr_lh__d1) _lh_process2_LH_P2_0_0) in
//│ 		            (let rec critical_0 = ((all_crit_pairs_lh__d1 _lh_process2_arg6_0) _lh_process2_LH_P2_1_0) in
//│ 		              (let rec new_agenda_0 = (sift_lh__d1 ((map_lh__d7 (resolve_lh__d1 (super_reduce_lh__d1 net'_0))) ((mappend_lh__d2 deletions_0) critical_0))) in
//│ 		                (let rec todo'_0 = (((add_agenda_lh__d1 (snd_lh__d1 _lh_process2_arg1_0)) new_agenda_0) _lh_process2_arg5_0) in
//│ 		                  (((((process_lh__d1 _lh_process2_arg1_0) _lh_process2_arg2_0) ((mappend_lh__d2 _lh_process2_LH_P2_1_0) (`LH_C(_lh_process2_arg6_0, (`LH_N))))) net'_0) todo'_0))))))))
//│ 		and
//│ 		process_lh__d1 _lh_process_arg1_0 _lh_process_arg2_0 _lh_process_arg3_0 _lh_process_arg4_0 _lh_process_arg5_0 =
//│ 		  (match _lh_process_arg5_0 with
//│ 		    | `LH_N -> 
//│ 		      _lh_process_arg4_0
//│ 		    | `LH_C(_lh_process_LH_C_0_0, _lh_process_LH_C_1_0) -> 
//│ 		      (match _lh_process_LH_C_0_0 with
//│ 		        | `Item(_lh_process_Item_0_0, _lh_process_Item_1_0) -> 
//│ 		          ((((((process1_lh__d1 _lh_process_arg1_0) _lh_process_arg2_0) _lh_process_arg3_0) _lh_process_arg4_0) _lh_process_LH_C_1_0) ((preprocess_lh__d1 _lh_process_arg4_0) _lh_process_Item_1_0))));;
//│ 		let rec knuth_bendix1_lh__d1 _lh_knuth_bendix1_arg1_0 _lh_knuth_bendix1_arg2_0 =
//│ 		  (((((process_lh__d1 _lh_knuth_bendix1_arg1_0) 1) (`LH_N)) empty_net_lh__d1) (((add_agenda_lh__d1 (snd_lh__d1 _lh_knuth_bendix1_arg1_0)) _lh_knuth_bendix1_arg2_0) (`LH_N)));;
//│ 		let rec map_lh__d6 f_4 ls_8 =
//│ 		  (match ls_8 with
//│ 		    | `LH_C(h_9, t_1_0) -> 
//│ 		      (`LH_C((f_4 h_9), ((map_lh__d6 f_4) t_1_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec expr_fold_lh__d3 _lh_expr_fold_arg1_1 _lh_expr_fold_arg2_1 _lh_expr_fold_arg3_1 =
//│ 		  (match _lh_expr_fold_arg3_1 with
//│ 		    | `Var(_lh_expr_fold_Var_0_1) -> 
//│ 		      (_lh_expr_fold_arg2_1 _lh_expr_fold_Var_0_1)
//│ 		    | `Func(_lh_expr_fold_Func_0_1, _lh_expr_fold_Func_1_1) -> 
//│ 		      ((_lh_expr_fold_arg1_1 _lh_expr_fold_Func_0_1) ((map_lh__d6 ((expr_fold_lh__d3 _lh_expr_fold_arg1_1) _lh_expr_fold_arg2_1)) _lh_expr_fold_Func_1_1)));;
//│ 		let rec sumAux_lh__d1 ls_9 a_0 =
//│ 		  (match ls_9 with
//│ 		    | `LH_N -> 
//│ 		      a_0
//│ 		    | `LH_C(h_1_0, t_1_1) -> 
//│ 		      ((sumAux_lh__d1 t_1_1) (a_0 + h_1_0)));;
//│ 		let rec sum_lh__d1 ls_1_8 =
//│ 		  ((sumAux_lh__d1 ls_1_8) 0);;
//│ 		let rec cost_lh__d1 _lh_cost_arg1_0 =
//│ 		  (match _lh_cost_arg1_0 with
//│ 		    | `LH_P2(_lh_cost_LH_P2_0_0, _lh_cost_LH_P2_1_0) -> 
//│ 		      (let rec size_0 = (fun _lh_size_arg1_0 -> 
//│ 		        (((expr_fold_lh__d3 (fun x_5_9 a_2 -> 
//│ 		          ((sum_lh__d1 a_2) + 1))) (fun dum_2 -> 
//│ 		          0)) _lh_size_arg1_0)) in
//│ 		        ((size_0 _lh_cost_LH_P2_0_0) + (size_0 _lh_cost_LH_P2_1_0))));;
//│ 		let rec knuth_bendix_lh__d1 _lh_knuth_bendix_arg1_0 _lh_knuth_bendix_arg2_0 =
//│ 		  ((knuth_bendix1_lh__d1 (`LH_P2(_lh_knuth_bendix_arg1_0, cost_lh__d1))) _lh_knuth_bendix_arg2_0);;
//│ 		let rec seQ_lh__d1_d1 _lh_seQ_arg1_2 _lh_seQ_arg2_2 =
//│ 		  ((build_lh__d5 (mk_list_lh__d5 _lh_seQ_arg1_2)) (((foldr_lh__d6 (seq2_lh__d7 mk_cons_lh__d7)) empty_lh__d6) _lh_seQ_arg2_2));;
//│ 		let rec p_op_lh__d4 _lh_p_op_arg1_0 =
//│ 		  ((sp_lh__d8 (string_of_lh__d4 opsym_lh__d2)) _lh_p_op_arg1_0);;
//│ 		let rec q_op_lh__d4 _lh_q_op_arg1_0 =
//│ 		  (match _lh_q_op_arg1_0 with
//│ 		    | `LH_C(_lh_q_op_LH_C_0_0, _lh_q_op_LH_C_1_0) -> 
//│ 		      (match _lh_q_op_LH_C_0_0 with
//│ 		        | `Expr(_lh_q_op_Expr_0_0) -> 
//│ 		          (match _lh_q_op_LH_C_1_0 with
//│ 		            | `LH_C(_lh_q_op_LH_C_0_1, _lh_q_op_LH_C_1_1) -> 
//│ 		              (match _lh_q_op_LH_C_0_1 with
//│ 		                | `MkString(_lh_q_op_MkString_0_0) -> 
//│ 		                  (match _lh_q_op_LH_C_1_1 with
//│ 		                    | `LH_C(_lh_q_op_LH_C_0_2, _lh_q_op_LH_C_1_2) -> 
//│ 		                      (match _lh_q_op_LH_C_0_2 with
//│ 		                        | `Expr(_lh_q_op_Expr_0_1) -> 
//│ 		                          (match _lh_q_op_LH_C_1_2 with
//│ 		                            | `LH_N -> 
//│ 		                              (`Expr((`Func(_lh_q_op_MkString_0_0, (`LH_C(_lh_q_op_Expr_0_0, (`LH_C(_lh_q_op_Expr_0_1, (`LH_N)))))))))
//│ 		                            | _ -> 
//│ 		                              (failwith "lh_default_error"))
//│ 		                        | _ -> 
//│ 		                          (failwith "lh_default_error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "lh_default_error"))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec orElseMap_lh__d1_d1 _lh_orElseMap_arg1_4 _lh_orElseMap_arg2_4 _lh_orElseMap_arg3_4 =
//│ 		  ((orElse_lh__d6 (_lh_orElseMap_arg1_4 _lh_orElseMap_arg3_4)) (_lh_orElseMap_arg2_4 _lh_orElseMap_arg3_4));;
//│ 		let rec p_expr_lh__d4 _lh_p_expr_arg1_0 =
//│ 		  (((orElseMap_lh__d1_d1 ((seQ_lh__d1_d1 q_op_lh__d4) (`LH_C(p_term_lh__d1_d2, (`LH_C(p_op_lh__d4, (`LH_C(p_term_lh__d1_d0, (`LH_N))))))))) p_term_lh__d1_d1) _lh_p_expr_arg1_0)
//│ 		and
//│ 		p_term_lh__d1_d0 _lh_p_term_arg1_2 =
//│ 		  (((orElseMap_lh__d1_d5 ((seQ_lh__d1_d3 q_func_lh__d6) (`LH_C(p_ident_lh__d6, (`LH_C((look_for_lh__d1_d9 '('), (`LH_C(((list_of_lh__d6 p_expr_lh__d4) ','), (`LH_C((look_for_lh__d1_d9 ')'), (`LH_N))))))))))) p_prim_lh__d6) _lh_p_term_arg1_2)
//│ 		and
//│ 		p_term_lh__d1_d1 _lh_p_term_arg1_1 =
//│ 		  (((orElseMap_lh__d1_d5 ((seQ_lh__d1_d3 q_func_lh__d6) (`LH_C(p_ident_lh__d6, (`LH_C((look_for_lh__d1_d9 '('), (`LH_C(((list_of_lh__d6 p_expr_lh__d4) ','), (`LH_C((look_for_lh__d1_d9 ')'), (`LH_N))))))))))) p_prim_lh__d6) _lh_p_term_arg1_1)
//│ 		and
//│ 		p_term_lh__d1_d2 _lh_p_term_arg1_0 =
//│ 		  (((orElseMap_lh__d1_d5 ((seQ_lh__d1_d3 q_func_lh__d6) (`LH_C(p_ident_lh__d6, (`LH_C((look_for_lh__d1_d9 '('), (`LH_C(((list_of_lh__d6 p_expr_lh__d4) ','), (`LH_C((look_for_lh__d1_d9 ')'), (`LH_N))))))))))) p_prim_lh__d6) _lh_p_term_arg1_0);;
//│ 		let rec seq2_lh__d3 _lh_seq2_arg1_4 _lh_seq2_arg2_4 _lh_seq2_arg3_4 =
//│ 		  (let rec g_6 = (fun xs_8 -> 
//│ 		    (let rec _lh_matchIdent_9 = xs_8 in
//│ 		      (match _lh_matchIdent_9 with
//│ 		        | `LH_P2(_lh_seq2_LH_P2_0_4, _lh_seq2_LH_P2_1_4) -> 
//│ 		          ((lift_lh__d6 ((cross_lh__d2 (_lh_seq2_arg1_4 _lh_seq2_LH_P2_0_4)) (fun x_2_2 -> 
//│ 		            x_2_2))) (_lh_seq2_arg3_4 _lh_seq2_LH_P2_1_4))))) in
//│ 		    (fun _lh_funcomp_x_2_1 -> 
//│ 		      ((fun _lh_funcomp_x_2_2 -> 
//│ 		        (squash_lh__d1 ((lift_lh__d6 g_6) _lh_funcomp_x_2_2))) (_lh_seq2_arg2_4 _lh_funcomp_x_2_1))));;
//│ 		let rec empty_lh__d3 _lh_empty_arg1_3 =
//│ 		  (succeed_lh__d1 (`LH_P2((`List((`LH_N))), _lh_empty_arg1_3)));;
//│ 		let rec mk_list_lh__d3 _lh_mk_list_arg1_2 _lh_mk_list_arg2_2 =
//│ 		  (match _lh_mk_list_arg2_2 with
//│ 		    | `List(_lh_mk_list_List_0_2) -> 
//│ 		      (_lh_mk_list_arg1_2 _lh_mk_list_List_0_2)
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec mk_cons_lh__d3 _lh_mk_cons_arg1_4 _lh_mk_cons_arg2_4 =
//│ 		  (match _lh_mk_cons_arg2_4 with
//│ 		    | `List(_lh_mk_cons_List_0_4) -> 
//│ 		      (`List((`LH_C(_lh_mk_cons_arg1_4, _lh_mk_cons_List_0_4))))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec foldr_lh__d5 f_3 i_1 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_8, t_9) -> 
//│ 		      ((f_3 h_8) (((foldr_lh__d5 f_3) i_1) t_9))
//│ 		    | `LH_N -> 
//│ 		      i_1);;
//│ 		let rec build_lh__d3 _lh_build_arg1_2 _lh_build_arg2_2 _lh_funcomp_x_2_0 =
//│ 		  ((lift_lh__d6 ((cross_lh__d2 _lh_build_arg1_2) (fun x_2_1 -> 
//│ 		    x_2_1))) (_lh_build_arg2_2 _lh_funcomp_x_2_0));;
//│ 		let rec seQ_lh__d3 _lh_seQ_arg1_1_0 _lh_seQ_arg2_1_0 =
//│ 		  ((build_lh__d3 (mk_list_lh__d3 _lh_seQ_arg1_1_0)) (((foldr_lh__d5 (seq2_lh__d3 mk_cons_lh__d3)) empty_lh__d3) _lh_seQ_arg2_1_0));;
//│ 		let rec q_eqn_lh__d1 _lh_q_eqn_arg1_0 =
//│ 		  (match _lh_q_eqn_arg1_0 with
//│ 		    | `LH_C(_lh_q_eqn_LH_C_0_0, _lh_q_eqn_LH_C_1_0) -> 
//│ 		      (match _lh_q_eqn_LH_C_1_0 with
//│ 		        | `LH_C(_lh_q_eqn_LH_C_0_1, _lh_q_eqn_LH_C_1_1) -> 
//│ 		          (match _lh_q_eqn_LH_C_1_1 with
//│ 		            | `LH_C(_lh_q_eqn_LH_C_0_2, _lh_q_eqn_LH_C_1_2) -> 
//│ 		              (match _lh_q_eqn_LH_C_1_2 with
//│ 		                | `LH_N -> 
//│ 		                  (`List((`LH_C(_lh_q_eqn_LH_C_0_0, (`LH_C(_lh_q_eqn_LH_C_0_2, (`LH_N)))))))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec orElseMap_lh__d1_d0 _lh_orElseMap_arg1_5 _lh_orElseMap_arg2_5 _lh_orElseMap_arg3_5 =
//│ 		  ((orElse_lh__d6 (_lh_orElseMap_arg1_5 _lh_orElseMap_arg3_5)) (_lh_orElseMap_arg2_5 _lh_orElseMap_arg3_5));;
//│ 		let rec p_op_lh__d3 _lh_p_op_arg1_1 =
//│ 		  ((sp_lh__d8 (string_of_lh__d4 opsym_lh__d2)) _lh_p_op_arg1_1);;
//│ 		let rec seQ_lh__d1_d0 _lh_seQ_arg1_3 _lh_seQ_arg2_3 =
//│ 		  ((build_lh__d5 (mk_list_lh__d5 _lh_seQ_arg1_3)) (((foldr_lh__d6 (seq2_lh__d7 mk_cons_lh__d7)) empty_lh__d6) _lh_seQ_arg2_3));;
//│ 		let rec q_op_lh__d3 _lh_q_op_arg1_1 =
//│ 		  (match _lh_q_op_arg1_1 with
//│ 		    | `LH_C(_lh_q_op_LH_C_0_3, _lh_q_op_LH_C_1_3) -> 
//│ 		      (match _lh_q_op_LH_C_0_3 with
//│ 		        | `Expr(_lh_q_op_Expr_0_2) -> 
//│ 		          (match _lh_q_op_LH_C_1_3 with
//│ 		            | `LH_C(_lh_q_op_LH_C_0_4, _lh_q_op_LH_C_1_4) -> 
//│ 		              (match _lh_q_op_LH_C_0_4 with
//│ 		                | `MkString(_lh_q_op_MkString_0_1) -> 
//│ 		                  (match _lh_q_op_LH_C_1_4 with
//│ 		                    | `LH_C(_lh_q_op_LH_C_0_5, _lh_q_op_LH_C_1_5) -> 
//│ 		                      (match _lh_q_op_LH_C_0_5 with
//│ 		                        | `Expr(_lh_q_op_Expr_0_3) -> 
//│ 		                          (match _lh_q_op_LH_C_1_5 with
//│ 		                            | `LH_N -> 
//│ 		                              (`Expr((`Func(_lh_q_op_MkString_0_1, (`LH_C(_lh_q_op_Expr_0_2, (`LH_C(_lh_q_op_Expr_0_3, (`LH_N)))))))))
//│ 		                            | _ -> 
//│ 		                              (failwith "lh_default_error"))
//│ 		                        | _ -> 
//│ 		                          (failwith "lh_default_error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "lh_default_error"))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec p_expr_lh__d3 _lh_p_expr_arg1_1 =
//│ 		  (((orElseMap_lh__d1_d0 ((seQ_lh__d1_d0 q_op_lh__d3) (`LH_C(p_term_lh__d9, (`LH_C(p_op_lh__d3, (`LH_C(p_term_lh__d8, (`LH_N))))))))) p_term_lh__d7) _lh_p_expr_arg1_1)
//│ 		and
//│ 		p_term_lh__d7 _lh_p_term_arg1_5 =
//│ 		  (((orElseMap_lh__d1_d5 ((seQ_lh__d1_d3 q_func_lh__d6) (`LH_C(p_ident_lh__d6, (`LH_C((look_for_lh__d1_d9 '('), (`LH_C(((list_of_lh__d6 p_expr_lh__d3) ','), (`LH_C((look_for_lh__d1_d9 ')'), (`LH_N))))))))))) p_prim_lh__d6) _lh_p_term_arg1_5)
//│ 		and
//│ 		p_term_lh__d8 _lh_p_term_arg1_4 =
//│ 		  (((orElseMap_lh__d1_d5 ((seQ_lh__d1_d3 q_func_lh__d6) (`LH_C(p_ident_lh__d6, (`LH_C((look_for_lh__d1_d9 '('), (`LH_C(((list_of_lh__d6 p_expr_lh__d3) ','), (`LH_C((look_for_lh__d1_d9 ')'), (`LH_N))))))))))) p_prim_lh__d6) _lh_p_term_arg1_4)
//│ 		and
//│ 		p_term_lh__d9 _lh_p_term_arg1_3 =
//│ 		  (((orElseMap_lh__d1_d5 ((seQ_lh__d1_d3 q_func_lh__d6) (`LH_C(p_ident_lh__d6, (`LH_C((look_for_lh__d1_d9 '('), (`LH_C(((list_of_lh__d6 p_expr_lh__d3) ','), (`LH_C((look_for_lh__d1_d9 ')'), (`LH_N))))))))))) p_prim_lh__d6) _lh_p_term_arg1_3);;
//│ 		let rec sp_lh__d3 _lh_sp_arg1_5 _lh_funcomp_x_2_3 =
//│ 		  (_lh_sp_arg1_5 ((dropWhile_lh__d1 (fun x_2_3 -> 
//│ 		    (x_2_3 = ' '))) _lh_funcomp_x_2_3));;
//│ 		let rec pchar_lh__d1 _lh_pchar_arg1_3 _lh_pchar_arg2_3 =
//│ 		  (match _lh_pchar_arg2_3 with
//│ 		    | `LH_N -> 
//│ 		      croak_lh__d1
//│ 		    | `LH_C(_lh_pchar_LH_C_0_3, _lh_pchar_LH_C_1_3) -> 
//│ 		      (if (_lh_pchar_arg1_3 _lh_pchar_LH_C_0_3) then
//│ 		        (succeed_lh__d1 (`LH_P2((`MkString((`LH_C(_lh_pchar_LH_C_0_3, (`LH_N))))), _lh_pchar_LH_C_1_3)))
//│ 		      else
//│ 		        croak_lh__d1));;
//│ 		let rec look_for_lh__d1 _lh_look_for_arg1_1_8 =
//│ 		  (sp_lh__d3 (pchar_lh__d1 (fun x_5_8 -> 
//│ 		    (x_5_8 = _lh_look_for_arg1_1_8))));;
//│ 		let rec p_eqn_lh__d1 _lh_p_eqn_arg1_0 =
//│ 		  (((seQ_lh__d3 q_eqn_lh__d1) (`LH_C(p_expr_lh__d4, (`LH_C((look_for_lh__d1 '='), (`LH_C(p_expr_lh__d3, (`LH_N)))))))) _lh_p_eqn_arg1_0);;
//│ 		let rec parse_eqn_lh__d1 _lh_parse_eqn_arg1_0 =
//│ 		  (let rec _lh_matchIdent_1_5 = (fst_lh__d3 (the_lh__d3 (p_eqn_lh__d1 _lh_parse_eqn_arg1_0))) in
//│ 		    (match _lh_matchIdent_1_5 with
//│ 		      | `List(_lh_parse_eqn_List_0_0) -> 
//│ 		        (match _lh_parse_eqn_List_0_0 with
//│ 		          | `LH_C(_lh_parse_eqn_LH_C_0_0, _lh_parse_eqn_LH_C_1_0) -> 
//│ 		            (match _lh_parse_eqn_LH_C_0_0 with
//│ 		              | `Expr(_lh_parse_eqn_Expr_0_0) -> 
//│ 		                (match _lh_parse_eqn_LH_C_1_0 with
//│ 		                  | `LH_C(_lh_parse_eqn_LH_C_0_1, _lh_parse_eqn_LH_C_1_1) -> 
//│ 		                    (match _lh_parse_eqn_LH_C_0_1 with
//│ 		                      | `Expr(_lh_parse_eqn_Expr_0_1) -> 
//│ 		                        (match _lh_parse_eqn_LH_C_1_1 with
//│ 		                          | `LH_N -> 
//│ 		                            (`LH_P2(_lh_parse_eqn_Expr_0_0, _lh_parse_eqn_Expr_0_1))
//│ 		                          | _ -> 
//│ 		                            (failwith "lh_default_error"))
//│ 		                      | _ -> 
//│ 		                        (failwith "lh_default_error"))
//│ 		                  | _ -> 
//│ 		                    (failwith "lh_default_error"))
//│ 		              | _ -> 
//│ 		                (failwith "lh_default_error"))
//│ 		          | _ -> 
//│ 		            (failwith "lh_default_error"))
//│ 		      | _ -> 
//│ 		        (failwith "lh_default_error")));;
//│ 		let rec result_lh__d1 _lh_result_arg1_0 =
//│ 		  (match _lh_result_arg1_0 with
//│ 		    | `LH_P2(_lh_result_LH_P2_0_0, _lh_result_LH_P2_1_0) -> 
//│ 		      (let rec group_completion_0 = ((knuth_bendix_lh__d1 ((rpo_lh__d1 (rank_order_lh__d1 rank_lh__d1)) lex_ext_lh__d1)) ((map_lh__d1 parse_eqn_lh__d1) (`LH_C((`LH_C('(', (`LH_C('a', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('b', (`LH_C(')', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('c', (`LH_C(' ', (`LH_C('=', (`LH_C(' ', (`LH_C('a', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('(', (`LH_C('b', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('c', (`LH_C(')', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))), (`LH_C((`LH_C('E', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('x', (`LH_C(' ', (`LH_C('=', (`LH_C(' ', (`LH_C('x', (`LH_N))))))))))))))))))), (`LH_C((`LH_C('I', (`LH_C('(', (`LH_C('x', (`LH_C(')', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('x', (`LH_C(' ', (`LH_C('=', (`LH_C(' ', (`LH_C('E', (`LH_N))))))))))))))))))))))))), (`LH_N))))))))) in
//│ 		        ((eqExpr_lh__d1 ((simplify_lh__d1 (super_reduce_lh__d1 group_completion_0)) (parse_lh__d1 _lh_result_LH_P2_0_0))) (parse_lh__d2 _lh_result_LH_P2_1_0))));;
//│ 		let rec copy_lh__d1 _lh_copy_arg1_0 _lh_copy_arg2_0 =
//│ 		  (if (_lh_copy_arg1_0 <= 0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (`LH_C(_lh_copy_arg2_0, ((copy_lh__d1 (_lh_copy_arg1_0 - 1)) _lh_copy_arg2_0))));;
//│ 		let rec testRewrite_nofib_lh__d1 _lh_testRewrite_nofib_arg1_0 =
//│ 		  ((all_lh__d1 result_lh__d1) ((copy_lh__d1 _lh_testRewrite_nofib_arg1_0) (`LH_P2((`LH_C('I', (`LH_C('(', (`LH_C('a', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('b', (`LH_C(')', (`LH_N))))))))))))))))), (`LH_C('I', (`LH_C('(', (`LH_C('b', (`LH_C(')', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('I', (`LH_C('(', (`LH_C('a', (`LH_C(')', (`LH_N)))))))))))))))))))))))))));;
//│ 		(testRewrite_nofib_lh__d1 50)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< after expansion <<<<<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testRewrite_nofib_lh_₁(primId⁰(50))
//│ def add_agenda_lh_₁(_lh_add_agenda_arg1⁰, _lh_add_agenda_arg2⁰) = addby_lh_₁(item_cost_lh_₁, map_lh_₅(mk_item_lh_₁(_lh_add_agenda_arg1⁰), _lh_add_agenda_arg2⁰))
//│ def add_eqn_lh_₁(_lh_add_eqn_arg1⁰, _lh_add_eqn_arg2⁰) = thread_lh_₁(preorder_lh_₁(g_init_lh_₁(lhs_lh_₁(_lh_add_eqn_arg2⁰))), _lh_add_eqn_arg2⁰, _lh_add_eqn_arg1⁰)
//│ def addby_lh_₁(_lh_addby_arg1⁰, _lh_addby_arg2⁰, _lh_addby_arg3⁰) = 
//│ 	let insert⁰ = (fun x³¹ -> (fun ls⁶ -> 
//│ 		let _lh_matchIdent⁴ = ls⁶
//│ 		in case _lh_matchIdent⁴ of {
//│ 			LH_N  => [LH_C x³¹ [LH_N]]
//│ 			| LH_C _lh_addby_LH_C_0⁰ _lh_addby_LH_C_1⁰ => if (_lh_addby_arg1⁰(x³¹) <= _lh_addby_arg1⁰(_lh_addby_LH_C_0⁰)) then [LH_C x³¹ [LH_C _lh_addby_LH_C_0⁰ _lh_addby_LH_C_1⁰]] else [LH_C _lh_addby_LH_C_0⁰ insert⁰(x³¹, _lh_addby_LH_C_1⁰)]}))
//│ 	in foldr_lh_₆(insert⁰, _lh_addby_arg3⁰, _lh_addby_arg2⁰)
//│ def all_crit_pairs_lh_₁(_lh_all_crit_pairs_arg1⁰, _lh_all_crit_pairs_arg2⁰) = 
//│ 	let eqn'⁰ = stand_eqn_lh_₁([LH_C '1' [LH_N]], _lh_all_crit_pairs_arg1⁰)
//│ 	in let eqn''⁰ = stand_eqn_lh_₁([LH_C '2' [LH_N]], _lh_all_crit_pairs_arg1⁰)
//│ 	in let theory''⁰ = map_lh_₇(stand_eqn_lh_₁([LH_C '2' [LH_N]]), _lh_all_crit_pairs_arg2⁰)
//│ 	in mappend_lh_₂(map_lh_₇(mk_crit_lh_₁(eqn'⁰, eqn''⁰), strict_super_lh_₁(lhs_lh_₁(eqn'⁰), lhs_lh_₁(eqn''⁰))), concat_lh_₁(map_lh_₇(crit_pairs_lh_₁(eqn'⁰), theory''⁰)))
//│ def all_lh_₁(_lh_all_arg1⁵, _lh_all_arg2³) = _lh_all_arg2³(_lh_all_arg1⁵)
//│ def all_lh_₂(_lh_all_arg1⁴, _lh_all_arg2²) = case _lh_all_arg2² of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0³ _lh_all_LH_C_1³ => if _lh_all_arg1⁴(_lh_all_LH_C_0³) then all_lh_₂(_lh_all_arg1⁴, _lh_all_LH_C_1³) else [False]}
//│ def all_lh_₃(_lh_all_arg1⁶, _lh_all_arg2⁴) = case _lh_all_arg2⁴ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0⁴ _lh_all_LH_C_1⁴ => if _lh_all_arg1⁶(_lh_all_LH_C_0⁴) then all_lh_₃(_lh_all_arg1⁶, _lh_all_LH_C_1⁴) else [False]}
//│ def all_lh_₄(_lh_all_arg1³, _lh_all_arg2¹) = case _lh_all_arg2¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0² _lh_all_LH_C_1² => if _lh_all_arg1³(_lh_all_LH_C_0²) then all_lh_₄(_lh_all_arg1³, _lh_all_LH_C_1²) else [False]}
//│ def all_lh_₅(_lh_all_arg1⁰, _lh_all_arg2⁰) = case _lh_all_arg2⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0⁰ _lh_all_LH_C_1⁰ => if _lh_all_arg1⁰(_lh_all_LH_C_0⁰) then all_lh_₅(_lh_all_arg1⁰, _lh_all_LH_C_1⁰) else [False]}
//│ def alphanum_lh_₁(_lh_alphanum_arg1¹) = ((((int_of_char⁰(_lh_alphanum_arg1¹) >= int_of_char⁰('A')) && (int_of_char⁰(_lh_alphanum_arg1¹) <= int_of_char⁰('Z'))) || ((int_of_char⁰(_lh_alphanum_arg1¹) >= int_of_char⁰('a')) && (int_of_char⁰(_lh_alphanum_arg1¹) <= int_of_char⁰('z')))) || ((int_of_char⁰(_lh_alphanum_arg1¹) >= int_of_char⁰('0')) && (int_of_char⁰(_lh_alphanum_arg1¹) <= int_of_char⁰('9'))))
//│ def alphanum_lh_₂(_lh_alphanum_arg1⁰) = ((((int_of_char⁰(_lh_alphanum_arg1⁰) >= int_of_char⁰('A')) && (int_of_char⁰(_lh_alphanum_arg1⁰) <= int_of_char⁰('Z'))) || ((int_of_char⁰(_lh_alphanum_arg1⁰) >= int_of_char⁰('a')) && (int_of_char⁰(_lh_alphanum_arg1⁰) <= int_of_char⁰('z')))) || ((int_of_char⁰(_lh_alphanum_arg1⁰) >= int_of_char⁰('0')) && (int_of_char⁰(_lh_alphanum_arg1⁰) <= int_of_char⁰('9'))))
//│ def any_lh_₁(_lh_any_arg1³, _lh_any_arg2³) = case _lh_any_arg2³ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0³ _lh_any_LH_C_1³ => if _lh_any_arg1³(_lh_any_LH_C_0³) then [True] else any_lh_₁(_lh_any_arg1³, _lh_any_LH_C_1³)}
//│ def any_lh_₂(_lh_any_arg1¹, _lh_any_arg2¹) = case _lh_any_arg2¹ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0¹ _lh_any_LH_C_1¹ => if _lh_any_arg1¹(_lh_any_LH_C_0¹) then [True] else any_lh_₂(_lh_any_arg1¹, _lh_any_LH_C_1¹)}
//│ def any_lh_₃(_lh_any_arg1⁰, _lh_any_arg2⁰) = case _lh_any_arg2⁰ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0⁰ _lh_any_LH_C_1⁰ => if _lh_any_arg1⁰(_lh_any_LH_C_0⁰) then [True] else any_lh_₃(_lh_any_arg1⁰, _lh_any_LH_C_1⁰)}
//│ def any_lh_₄(_lh_any_arg1², _lh_any_arg2²) = case _lh_any_arg2² of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_any_LH_C_0² _lh_any_LH_C_1² => if _lh_any_arg1²(_lh_any_LH_C_0²) then [True] else any_lh_₄(_lh_any_arg1², _lh_any_LH_C_1²)}
//│ def apply_lh_₁(_lh_apply_arg1⁰, _lh_apply_arg2⁰) = getOrElse_lh_₁(assoc_lh_₁(_lh_apply_arg1⁰, _lh_apply_arg2⁰), [Var _lh_apply_arg2⁰])
//│ def assoc_lh_₁(_lh_assoc_arg1⁰, _lh_assoc_arg2⁰) = 
//│ 	let match_x⁰ = (fun uv⁰ -> 
//│ 		let _lh_matchIdent¹⁴ = uv⁰
//│ 		in case _lh_matchIdent¹⁴ of {
//│ 			LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => maybeX_lh_₁(polyEq⁰(_lh_assoc_arg2⁰, _lh_assoc_LH_P2_0⁰), _lh_assoc_LH_P2_1⁰)})
//│ 	in first_ok_lh_₁(map_lh_₇(match_x⁰, _lh_assoc_arg1⁰))
//│ def atIndex_lh_₁(n¹, ls²⁰) = if (n¹ < 0) then error⁰ else case ls²⁰ of {
//│ 	LH_C h¹⁰⁰ t¹⁰³ => if (n¹ == 0) then h¹⁰⁰ else atIndex_lh_₁((n¹ - 1), t¹⁰³)
//│ 	| LH_N  => error⁰}
//│ def atIndex_lh_₂(n⁰, ls¹⁹) = if (n⁰ < 0) then error⁰ else case ls¹⁹ of {
//│ 	LH_C h⁹⁹ t¹⁰² => if (n⁰ == 0) then h⁹⁹ else atIndex_lh_₂((n⁰ - 1), t¹⁰²)
//│ 	| LH_N  => error⁰}
//│ def box_lh_₁(_lh_box_arg1⁰) = [LH_C _lh_box_arg1⁰ [LH_N]]
//│ def build_lh_₁(_lh_build_arg1³, _lh_build_arg2³, _lh_funcomp_x²³) = lift_lh_₆(cross_lh_₂(_lh_build_arg1³, (fun x²⁸ -> x²⁸)), _lh_build_arg2³(_lh_funcomp_x²³))
//│ def build_lh_₂(_lh_build_arg1⁰, _lh_build_arg2⁰, _lh_funcomp_x¹) = lift_lh_₆(cross_lh_₂(_lh_build_arg1⁰, (fun x¹ -> x¹)), _lh_build_arg2⁰(_lh_funcomp_x¹))
//│ def build_lh_₃(_lh_build_arg1¹, _lh_build_arg2¹, _lh_funcomp_x⁵) = lift_lh_₆(cross_lh_₂(_lh_build_arg1¹, (fun x¹⁰ -> x¹⁰)), _lh_build_arg2¹(_lh_funcomp_x⁵))
//│ def build_lh_₄(_lh_build_arg1², _lh_build_arg2², _lh_funcomp_x¹⁹) = lift_lh_₆(cross_lh_₂(_lh_build_arg1², (fun x²⁷ -> x²⁷)), _lh_build_arg2²(_lh_funcomp_x¹⁹))
//│ def build_lh_₅(_lh_build_arg1⁴, _lh_build_arg2⁴, _lh_funcomp_x³²) = lift_lh_₆(cross_lh_₂(_lh_build_arg1⁴, (fun x⁶² -> x⁶²)), _lh_build_arg2⁴(_lh_funcomp_x³²))
//│ def comp_sub_lh_₁(_lh_comp_sub_arg1⁰, _lh_comp_sub_arg2⁰) = mappend_lh_₂(
//│ 	let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 		LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => case _lh_listcomp_fun_ls_h² of {
//│ 			LH_P2 _lh_comp_sub_LH_P2_0⁰ _lh_comp_sub_LH_P2_1⁰ => [LH_C [LH_P2 _lh_comp_sub_LH_P2_0⁰ sub_lh_₁(_lh_comp_sub_LH_P2_1⁰, _lh_comp_sub_arg1⁰)] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]
//│ 			| _  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun²(_lh_comp_sub_arg2⁰), _lh_comp_sub_arg1⁰)
//│ def concat_lh_₁(lss⁰) = case lss⁰ of {
//│ 	LH_C h⁹⁸ t¹⁰¹ => mappend_lh_₂(h⁹⁸, concat_lh_₁(t¹⁰¹))
//│ 	| LH_N  => [LH_N]}
//│ def copy_lh_₁(_lh_copy_arg1⁰, _lh_copy_arg2⁰, _lh_floatOutId_0⁰) = if (_lh_copy_arg1⁰ <= 0) then [True] else 
//│ 	let _lh_all_LH_C_1¹ = copy_lh_₁((_lh_copy_arg1⁰ - 1), _lh_copy_arg2⁰)
//│ 	in let _lh_all_LH_C_0¹ = _lh_copy_arg2⁰
//│ 	in if _lh_floatOutId_0⁰(_lh_all_LH_C_0¹) then all_lh_₁(_lh_floatOutId_0⁰, _lh_all_LH_C_1¹) else [False]
//│ def cost_lh_₁(_lh_cost_arg1⁰) = case _lh_cost_arg1⁰ of {
//│ 	LH_P2 _lh_cost_LH_P2_0⁰ _lh_cost_LH_P2_1⁰ => 
//│ 		let size⁰ = (fun _lh_size_arg1⁰ -> expr_fold_lh_₃((fun x⁹ -> (fun a⁰ -> (sum_lh_₁(a⁰) + 1))), (fun dum⁰ -> 0), _lh_size_arg1⁰))
//│ 		in (size⁰(_lh_cost_LH_P2_0⁰) + size⁰(_lh_cost_LH_P2_1⁰))}
//│ def crit_pairs_lh_₁(_lh_crit_pairs_arg1⁰, _lh_crit_pairs_arg2⁰) = mappend_lh_₂(map_lh_₇(mk_crit_lh_₁(_lh_crit_pairs_arg1⁰, _lh_crit_pairs_arg2⁰), superpose_lh_₁(lhs_lh_₁(_lh_crit_pairs_arg1⁰), lhs_lh_₁(_lh_crit_pairs_arg2⁰))), map_lh_₇(mk_crit_lh_₁(_lh_crit_pairs_arg2⁰, _lh_crit_pairs_arg1⁰), strict_super_lh_₁(lhs_lh_₁(_lh_crit_pairs_arg2⁰), lhs_lh_₁(_lh_crit_pairs_arg1⁰))))
//│ def croak_lh_₁ = [Nothing]
//│ def cross_lh_₁(_lh_cross_arg1¹, _lh_cross_arg2¹, _lh_cross_arg3¹) = case _lh_cross_arg3¹ of {
//│ 	LH_P2 _lh_cross_LH_P2_0¹ _lh_cross_LH_P2_1¹ => [LH_P2 _lh_cross_arg1¹(_lh_cross_LH_P2_0¹) _lh_cross_arg2¹(_lh_cross_LH_P2_1¹)]}
//│ def cross_lh_₂(_lh_cross_arg1⁰, _lh_cross_arg2⁰, _lh_cross_arg3⁰) = case _lh_cross_arg3⁰ of {
//│ 	LH_P2 _lh_cross_LH_P2_0⁰ _lh_cross_LH_P2_1⁰ => [LH_P2 _lh_cross_arg1⁰(_lh_cross_LH_P2_0⁰) _lh_cross_arg2⁰(_lh_cross_LH_P2_1⁰)]}
//│ def delete_eqns_lh_₁(_lh_delete_eqns_arg1⁰) = 
//│ 	let ok⁰ = (fun e⁰ -> not⁰(inList_lh_₄(eqno_lh_₁(e⁰), _lh_delete_eqns_arg1⁰)))
//│ 	in map_dnet_lh_₁(filter_lh_₁(ok⁰))
//│ def dnet_reduce_lh_₁(_lh_dnet_reduce_arg1⁰, _lh_dnet_reduce_arg2⁰) = try_all_lh_₁(map_lh_₂(rewrite_lh_₁, find_lh_₁(_lh_dnet_reduce_arg2⁰, _lh_dnet_reduce_arg1⁰)), _lh_dnet_reduce_arg2⁰)
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]}
//│ def empty_lh_₁(_lh_empty_arg1⁰) = succeed_lh_₁([LH_P2 [List [LH_N]] _lh_empty_arg1⁰])
//│ def empty_lh_₂(_lh_empty_arg1³) = succeed_lh_₁([LH_P2 [List [LH_N]] _lh_empty_arg1³])
//│ def empty_lh_₃(_lh_empty_arg1²) = succeed_lh_₁([LH_P2 [List [LH_N]] _lh_empty_arg1²])
//│ def empty_lh_₄(_lh_empty_arg1⁵) = succeed_lh_₁([LH_P2 [List [LH_N]] _lh_empty_arg1⁵])
//│ def empty_lh_₅(_lh_empty_arg1⁴) = succeed_lh_₁([LH_P2 [List [LH_N]] _lh_empty_arg1⁴])
//│ def empty_lh_₆(_lh_empty_arg1¹) = succeed_lh_₁([LH_P2 [List [LH_N]] _lh_empty_arg1¹])
//│ def empty_net_lh_₁ = [Return [LH_N]]
//│ def enumFrom_lh_₁(a⁴) = lazy⁰(
//│ 	let tx¹ = enumFrom_lh_₁((a⁴ + 1))
//│ 	in let hx¹ = a⁴
//│ 	in (fun hy¹ -> (fun ty¹ -> [LH_C [LH_P2 hx¹ hy¹] zip_lz_nl_lh_₁(tx¹, ty¹)])))
//│ def eqExpr_lh_₁(_lh_eqExpr_arg1⁰, _lh_eqExpr_arg2⁰) = case _lh_eqExpr_arg1⁰ of {
//│ 	Func _lh_eqExpr_Func_0⁰ _lh_eqExpr_Func_1⁰ => case _lh_eqExpr_arg2⁰ of {
//│ 		Func _lh_eqExpr_Func_0¹ _lh_eqExpr_Func_1¹ => (polyEq⁰(_lh_eqExpr_Func_0⁰, _lh_eqExpr_Func_0¹) && eqListExpr_lh_₁(_lh_eqExpr_Func_1⁰, _lh_eqExpr_Func_1¹))
//│ 		| _  => [False]}
//│ 	| Var _lh_eqExpr_Var_0⁰ => case _lh_eqExpr_arg2⁰ of {
//│ 		Var _lh_eqExpr_Var_0¹ => polyEq⁰(_lh_eqExpr_Var_0⁰, _lh_eqExpr_Var_0¹)
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqListExpr_lh_₁(_lh_eqListExpr_arg1⁰, _lh_eqListExpr_arg2⁰) = case _lh_eqListExpr_arg1⁰ of {
//│ 	LH_N  => case _lh_eqListExpr_arg2⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| LH_C _lh_eqListExpr_LH_C_0⁰ _lh_eqListExpr_LH_C_1⁰ => case _lh_eqListExpr_arg2⁰ of {
//│ 		LH_C _lh_eqListExpr_LH_C_0¹ _lh_eqListExpr_LH_C_1¹ => if eqExpr_lh_₁(_lh_eqListExpr_LH_C_0⁰, _lh_eqListExpr_LH_C_0¹) then eqListExpr_lh_₁(_lh_eqListExpr_LH_C_1⁰, _lh_eqListExpr_LH_C_1¹) else [False]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqno_lh_₁(_lh_eqno_arg1⁰) = case _lh_eqno_arg1⁰ of {
//│ 	Eqn _lh_eqno_Eqn_0⁰ _lh_eqno_Eqn_1⁰ => case _lh_eqno_Eqn_1⁰ of {
//│ 		LH_P2 _lh_eqno_LH_P2_0⁰ _lh_eqno_LH_P2_1⁰ => _lh_eqno_Eqn_0⁰}}
//│ def eqpr_lh_₁(_lh_eqpr_arg1⁰) = case _lh_eqpr_arg1⁰ of {
//│ 	Eqn _lh_eqpr_Eqn_0⁰ _lh_eqpr_Eqn_1⁰ => _lh_eqpr_Eqn_1⁰}
//│ def exists_lh_₁(_lh_exists_arg1⁰) = case _lh_exists_arg1⁰ of {
//│ 	Nothing  => [False]
//│ 	| _  => [True]}
//│ def expr_fold_lh_₁(_lh_expr_fold_arg1³, _lh_expr_fold_arg2³, _lh_expr_fold_arg3³) = case _lh_expr_fold_arg3³ of {
//│ 	Var _lh_expr_fold_Var_0³ => _lh_expr_fold_arg2³(_lh_expr_fold_Var_0³)
//│ 	| Func _lh_expr_fold_Func_0³ _lh_expr_fold_Func_1³ => _lh_expr_fold_arg1³(_lh_expr_fold_Func_0³, map_lh_₃(expr_fold_lh_₁(_lh_expr_fold_arg1³, _lh_expr_fold_arg2³), _lh_expr_fold_Func_1³))}
//│ def expr_fold_lh_₂(_lh_expr_fold_arg1², _lh_expr_fold_arg2², _lh_expr_fold_arg3²) = case _lh_expr_fold_arg3² of {
//│ 	Var _lh_expr_fold_Var_0² => _lh_expr_fold_arg2²(_lh_expr_fold_Var_0²)
//│ 	| Func _lh_expr_fold_Func_0² _lh_expr_fold_Func_1² => _lh_expr_fold_arg1²(_lh_expr_fold_Func_0², map_lh_₄(expr_fold_lh_₂(_lh_expr_fold_arg1², _lh_expr_fold_arg2²), _lh_expr_fold_Func_1²))}
//│ def expr_fold_lh_₃(_lh_expr_fold_arg1¹, _lh_expr_fold_arg2¹, _lh_expr_fold_arg3¹) = case _lh_expr_fold_arg3¹ of {
//│ 	Var _lh_expr_fold_Var_0¹ => _lh_expr_fold_arg2¹(_lh_expr_fold_Var_0¹)
//│ 	| Func _lh_expr_fold_Func_0¹ _lh_expr_fold_Func_1¹ => _lh_expr_fold_arg1¹(_lh_expr_fold_Func_0¹, map_lh_₆(expr_fold_lh_₃(_lh_expr_fold_arg1¹, _lh_expr_fold_arg2¹), _lh_expr_fold_Func_1¹))}
//│ def expr_fold_lh_₄(_lh_expr_fold_arg1⁰, _lh_expr_fold_arg2⁰, _lh_expr_fold_arg3⁰) = case _lh_expr_fold_arg3⁰ of {
//│ 	Var _lh_expr_fold_Var_0⁰ => _lh_expr_fold_arg2⁰(_lh_expr_fold_Var_0⁰)
//│ 	| Func _lh_expr_fold_Func_0⁰ _lh_expr_fold_Func_1⁰ => _lh_expr_fold_arg1⁰(_lh_expr_fold_Func_0⁰, map_lh_₇(expr_fold_lh_₄(_lh_expr_fold_arg1⁰, _lh_expr_fold_arg2⁰), _lh_expr_fold_Func_1⁰))}
//│ def filter_lh_₁(f¹¹¹, ls¹⁶) = case ls¹⁶ of {
//│ 	LH_C h⁸⁴ t⁸⁷ => if f¹¹¹(h⁸⁴) then [LH_C h⁸⁴ filter_lh_₁(f¹¹¹, t⁸⁷)] else filter_lh_₁(f¹¹¹, t⁸⁷)
//│ 	| LH_N  => [LH_N]}
//│ def find'_lh_₁(_lh_find'_arg1⁰, _lh_find'_arg2⁰) = case _lh_find'_arg2⁰ of {
//│ 	Return _lh_find'_Return_0⁰ => _lh_find'_Return_0⁰
//│ 	| Switch _lh_find'_Switch_0⁰ _lh_find'_Switch_1⁰ => mappend_lh_₂(find_assoc_lh_₁(g_first_lh_₁(_lh_find'_arg1⁰), g_rest_lh_₁(_lh_find'_arg1⁰), _lh_find'_Switch_0⁰), find'_lh_₁(g_skip_lh_₁(_lh_find'_arg1⁰), _lh_find'_Switch_1⁰))}
//│ def find_assoc_lh_₁(_lh_find_assoc_arg1⁰, _lh_find_assoc_arg2⁰, _lh_find_assoc_arg3⁰) = case _lh_find_assoc_arg1⁰ of {
//│ 	Afunc _lh_find_assoc_Afunc_0⁰ => getOrElse_lh_₁(lift_lh_₆(find'_lh_₁(_lh_find_assoc_arg2⁰), assoc_lh_₁(_lh_find_assoc_arg3⁰, _lh_find_assoc_Afunc_0⁰)), [LH_N])
//│ 	| Avar  => [LH_N]}
//│ def find_lh_₁(_lh_find_arg1⁰, _lh_find_arg2⁰) = find'_lh_₁(g_init_lh_₁(_lh_find_arg1⁰), _lh_find_arg2⁰)
//│ def first_ok_lh_₁(_lh_first_ok_arg1⁰) = foldr_lh_₂(orElse_lh_₁, [Nothing], _lh_first_ok_arg1⁰)
//│ def foldr_lh_₁(f⁵³, i⁴⁷, ls³) = ls³(f⁵³, i⁴⁷)
//│ def foldr_lh_₂(f⁵⁴, i⁴⁸, ls⁴) = case ls⁴ of {
//│ 	LH_C h⁴⁰ t⁴² => f⁵⁴(h⁴⁰, foldr_lh_₂(f⁵⁴, i⁴⁸, t⁴²))
//│ 	| LH_N  => i⁴⁸}
//│ def foldr_lh_₃(f⁵⁹, i⁵³, ls⁵) = ls⁵(f⁵⁹, i⁵³)
//│ def foldr_lh_₄(f⁸⁴, i⁷⁷, ls⁹) = ls⁹(f⁸⁴, i⁷⁷)
//│ def foldr_lh_₅(f¹⁵, i¹⁴, ls⁰) = ls⁰(f¹⁵, i¹⁴)
//│ def foldr_lh_₆(f²², i²⁰, ls²) = ls²(f²², i²⁰)
//│ def fst_lh_₁(_lh_fst_arg1¹) = case _lh_fst_arg1¹ of {
//│ 	LH_P2 _lh_fst_LH_P2_0¹ _lh_fst_LH_P2_1¹ => _lh_fst_LH_P2_0¹}
//│ def fst_lh_₂(_lh_fst_arg1⁰) = case _lh_fst_arg1⁰ of {
//│ 	LH_P2 _lh_fst_LH_P2_0⁰ _lh_fst_LH_P2_1⁰ => _lh_fst_LH_P2_0⁰}
//│ def fst_lh_₃(_lh_fst_arg1²) = case _lh_fst_arg1² of {
//│ 	LH_P2 _lh_fst_LH_P2_0² _lh_fst_LH_P2_1² => _lh_fst_LH_P2_0²}
//│ def g_first_lh_₁(_lh_g_first_arg1⁰) = case _lh_g_first_arg1⁰ of {
//│ 	LH_C _lh_g_first_LH_C_0⁰ _lh_g_first_LH_C_1⁰ => case _lh_g_first_LH_C_0⁰ of {
//│ 		Func _lh_g_first_Func_0⁰ _lh_g_first_Func_1⁰ => [Afunc _lh_g_first_Func_0⁰]
//│ 		| Var _lh_g_first_Var_0⁰ => [Avar]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def g_init_lh_₁(_lh_g_init_arg1⁰) = [LH_C _lh_g_init_arg1⁰ [LH_N]]
//│ def g_rest_lh_₁(_lh_g_rest_arg1⁰) = case _lh_g_rest_arg1⁰ of {
//│ 	LH_C _lh_g_rest_LH_C_0⁰ _lh_g_rest_LH_C_1⁰ => case _lh_g_rest_LH_C_0⁰ of {
//│ 		Func _lh_g_rest_Func_0⁰ _lh_g_rest_Func_1⁰ => mappend_lh_₂(_lh_g_rest_Func_1⁰, _lh_g_rest_LH_C_1⁰)
//│ 		| Var _lh_g_rest_Var_0⁰ => _lh_g_rest_LH_C_1⁰
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def g_skip_lh_₁(_lh_g_skip_arg1⁰) = tail_lh_₁(_lh_g_skip_arg1⁰)
//│ def geRewrite_lh_₁(_lh_geRewrite_arg1², _lh_geRewrite_arg2², _lh_geRewrite_arg3²) = inList_lh_₁(_lh_geRewrite_arg1²([LH_P2 _lh_geRewrite_arg2² _lh_geRewrite_arg3²]), 
//│ 	let _lh_inList_LH_C_1³ = 	
//│ 		let _lh_inList_LH_C_1⁴ = (fun _lh_inList_arg1⁶ -> [False])
//│ 		in let _lh_inList_LH_C_0³ = [Equal]
//│ 		in (fun _lh_inList_arg1⁷ -> if polyEq⁰(_lh_inList_arg1⁷, _lh_inList_LH_C_0³) then [True] else inList_lh_₁(_lh_inList_arg1⁷, _lh_inList_LH_C_1⁴))
//│ 	in let _lh_inList_LH_C_0⁴ = [Greater]
//│ 	in (fun _lh_inList_arg1⁸ -> if polyEq⁰(_lh_inList_arg1⁸, _lh_inList_LH_C_0⁴) then [True] else inList_lh_₁(_lh_inList_arg1⁸, _lh_inList_LH_C_1³)))
//│ def geRewrite_lh_₂(_lh_geRewrite_arg1³, _lh_geRewrite_arg2³, _lh_geRewrite_arg3³) = inList_lh_₂(_lh_geRewrite_arg1³([LH_P2 _lh_geRewrite_arg2³ _lh_geRewrite_arg3³]), 
//│ 	let _lh_inList_LH_C_1⁵ = 	
//│ 		let _lh_inList_LH_C_1⁶ = (fun _lh_inList_arg1⁹ -> [False])
//│ 		in let _lh_inList_LH_C_0⁵ = [Equal]
//│ 		in (fun _lh_inList_arg1¹⁰ -> if polyEq⁰(_lh_inList_arg1¹⁰, _lh_inList_LH_C_0⁵) then [True] else inList_lh_₂(_lh_inList_arg1¹⁰, _lh_inList_LH_C_1⁶))
//│ 	in let _lh_inList_LH_C_0⁶ = [Greater]
//│ 	in (fun _lh_inList_arg1¹¹ -> if polyEq⁰(_lh_inList_arg1¹¹, _lh_inList_LH_C_0⁶) then [True] else inList_lh_₂(_lh_inList_arg1¹¹, _lh_inList_LH_C_1⁵)))
//│ def geRewrite_lh_₃(_lh_geRewrite_arg1⁰, _lh_geRewrite_arg2⁰, _lh_geRewrite_arg3⁰) = inList_lh_₃(_lh_geRewrite_arg1⁰([LH_P2 _lh_geRewrite_arg2⁰ _lh_geRewrite_arg3⁰]), 
//│ 	let _lh_inList_LH_C_1⁰ = 	
//│ 		let _lh_inList_LH_C_1¹ = (fun _lh_inList_arg1⁰ -> [False])
//│ 		in let _lh_inList_LH_C_0⁰ = [Equal]
//│ 		in (fun _lh_inList_arg1¹ -> if polyEq⁰(_lh_inList_arg1¹, _lh_inList_LH_C_0⁰) then [True] else inList_lh_₃(_lh_inList_arg1¹, _lh_inList_LH_C_1¹))
//│ 	in let _lh_inList_LH_C_0¹ = [Greater]
//│ 	in (fun _lh_inList_arg1² -> if polyEq⁰(_lh_inList_arg1², _lh_inList_LH_C_0¹) then [True] else inList_lh_₃(_lh_inList_arg1², _lh_inList_LH_C_1⁰)))
//│ def geRewrite_lh_₄(_lh_geRewrite_arg1¹, _lh_geRewrite_arg2¹, _lh_geRewrite_arg3¹) = inList_lh_₄(_lh_geRewrite_arg1¹([LH_P2 _lh_geRewrite_arg2¹ _lh_geRewrite_arg3¹]), [LH_C [Greater] [LH_C [Equal] [LH_N]]])
//│ def getOrElse_lh_₁(_lh_getOrElse_arg1⁰, _lh_getOrElse_arg2⁰) = case _lh_getOrElse_arg1⁰ of {
//│ 	Just _lh_getOrElse_Just_0⁰ => _lh_getOrElse_Just_0⁰
//│ 	| Nothing  => _lh_getOrElse_arg2⁰}
//│ def inList_lh_₁(_lh_inList_arg1⁵, _lh_inList_arg2²) = _lh_inList_arg2²(_lh_inList_arg1⁵)
//│ def inList_lh_₂(_lh_inList_arg1¹², _lh_inList_arg2³) = _lh_inList_arg2³(_lh_inList_arg1¹²)
//│ def inList_lh_₃(_lh_inList_arg1⁴, _lh_inList_arg2¹) = _lh_inList_arg2¹(_lh_inList_arg1⁴)
//│ def inList_lh_₄(_lh_inList_arg1³, _lh_inList_arg2⁰) = case _lh_inList_arg2⁰ of {
//│ 	LH_C _lh_inList_LH_C_0² _lh_inList_LH_C_1² => if polyEq⁰(_lh_inList_arg1³, _lh_inList_LH_C_0²) then [True] else inList_lh_₄(_lh_inList_arg1³, _lh_inList_LH_C_1²)
//│ 	| LH_N  => [False]}
//│ def inside_lh_₁(_lh_inside_arg1⁰, _lh_inside_arg2⁰) = first_ok_lh_₁(
//│ 	let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {
//│ 			LH_P2 _lh_inside_LH_P2_0⁰ _lh_inside_LH_P2_1⁰ => [LH_C lift_lh_₂(replace_lh_₁(_lh_inside_arg2⁰, _lh_inside_LH_P2_0⁰), _lh_inside_arg1⁰(_lh_inside_LH_P2_1⁰)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 			| _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹(subterms_lh_₁(_lh_inside_arg2⁰)))
//│ def is_switch_lh_₁(_lh_is_switch_arg1⁰) = case _lh_is_switch_arg1⁰ of {
//│ 	Switch _lh_is_switch_Switch_0⁰ _lh_is_switch_Switch_1⁰ => [True]
//│ 	| Return _lh_is_switch_Return_0⁰ => [False]}
//│ def item_cost_lh_₁(_lh_item_cost_arg1⁰) = case _lh_item_cost_arg1⁰ of {
//│ 	Item _lh_item_cost_Item_0⁰ _lh_item_cost_Item_1⁰ => _lh_item_cost_Item_0⁰}
//│ def knuth_bendix1_lh_₁(_lh_knuth_bendix1_arg1⁰, _lh_knuth_bendix1_arg2⁰) = process_lh_₁(_lh_knuth_bendix1_arg1⁰, 1, [LH_N], empty_net_lh_₁, add_agenda_lh_₁(snd_lh_₁(_lh_knuth_bendix1_arg1⁰), _lh_knuth_bendix1_arg2⁰, [LH_N]))
//│ def knuth_bendix_lh_₁(_lh_knuth_bendix_arg1⁰, _lh_knuth_bendix_arg2⁰) = knuth_bendix1_lh_₁([LH_P2 _lh_knuth_bendix_arg1⁰ cost_lh_₁], _lh_knuth_bendix_arg2⁰)
//│ def lex_combine_lh_₁(_lh_lex_combine_arg1⁰, _lh_lex_combine_arg2⁰) = case _lh_lex_combine_arg1⁰ of {
//│ 	Equal  => _lh_lex_combine_arg2⁰
//│ 	| Greater  => [Greater]
//│ 	| Less  => [Less]
//│ 	| Unrelated  => [Unrelated]}
//│ def lex_ext_lh_₁(_lh_lex_ext_arg1⁰, _lh_lex_ext_arg2⁰) = _lh_lex_ext_arg2⁰(_lh_lex_ext_arg1⁰)
//│ def lexico_lh_₁(_lh_lexico_arg1⁰, _lh_lexico_arg2⁰) = case _lh_lexico_arg2⁰ of {
//│ 	LH_P2 _lh_lexico_LH_P2_0⁰ _lh_lexico_LH_P2_1⁰ => case _lh_lexico_LH_P2_0⁰ of {
//│ 		LH_N  => case _lh_lexico_LH_P2_1⁰ of {
//│ 			LH_N  => [Equal]
//│ 			| LH_C _lh_lexico_LH_C_0⁰ _lh_lexico_LH_C_1⁰ => [Less]}
//│ 		| LH_C _lh_lexico_LH_C_0¹ _lh_lexico_LH_C_1¹ => case _lh_lexico_LH_P2_1⁰ of {
//│ 			LH_N  => [Greater]
//│ 			| LH_C _lh_lexico_LH_C_0² _lh_lexico_LH_C_1² => lex_combine_lh_₁(_lh_lexico_arg1⁰([LH_P2 _lh_lexico_LH_C_0¹ _lh_lexico_LH_C_0²]), lexico_lh_₁(_lh_lexico_arg1⁰, [LH_P2 _lh_lexico_LH_C_1¹ _lh_lexico_LH_C_1²]))}}}
//│ def lhs_lh_₁(_lh_lhs_arg1⁰) = case _lh_lhs_arg1⁰ of {
//│ 	Eqn _lh_lhs_Eqn_0⁰ _lh_lhs_Eqn_1⁰ => case _lh_lhs_Eqn_1⁰ of {
//│ 		LH_P2 _lh_lhs_LH_P2_0⁰ _lh_lhs_LH_P2_1⁰ => _lh_lhs_LH_P2_0⁰}}
//│ def lift_lh_₁(_lh_lift_arg1⁰, _lh_lift_arg2⁰) = case _lh_lift_arg2⁰ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁰ => [Just _lh_lift_arg1⁰(_lh_lift_Just_0⁰)]}
//│ def lift_lh_₂(_lh_lift_arg1⁴, _lh_lift_arg2⁴) = case _lh_lift_arg2⁴ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁴ => [Just _lh_lift_arg1⁴(_lh_lift_Just_0⁴)]}
//│ def lift_lh_₃(_lh_lift_arg1³, _lh_lift_arg2³) = case _lh_lift_arg2³ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0³ => [Just _lh_lift_arg1³(_lh_lift_Just_0³)]}
//│ def lift_lh_₄(_lh_lift_arg1¹, _lh_lift_arg2¹) = case _lh_lift_arg2¹ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0¹ => [Just _lh_lift_arg1¹(_lh_lift_Just_0¹)]}
//│ def lift_lh_₅(_lh_lift_arg1², _lh_lift_arg2²) = case _lh_lift_arg2² of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0² => [Just _lh_lift_arg1²(_lh_lift_Just_0²)]}
//│ def lift_lh_₆(_lh_lift_arg1⁵, _lh_lift_arg2⁵) = case _lh_lift_arg2⁵ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_lift_Just_0⁵ => [Just _lh_lift_arg1⁵(_lh_lift_Just_0⁵)]}
//│ def list_of_lh_₁(_lh_list_of_arg1³, _lh_list_of_arg2³) = 
//│ 	let p'³ = lazy⁰(seq2_lh_₅(mk_cons_lh_₅, _lh_list_of_arg1³, orElseMap_lh_₁₂(seq2Lzq_lh_₁((fun x⁴⁵ -> (fun y⁵ -> y⁵)), look_for_lh_₁₄(_lh_list_of_arg2³), p'³), empty_lh_₅)))
//│ 	in force⁰(p'³)
//│ def list_of_lh_₂(_lh_list_of_arg1⁰, _lh_list_of_arg2⁰) = 
//│ 	let p'⁰ = lazy⁰(seq2_lh_₆(mk_cons_lh_₆, _lh_list_of_arg1⁰, orElseMap_lh_₁₄(seq2Lzq_lh_₂((fun x³ -> (fun y⁰ -> y⁰)), look_for_lh_₁₇(_lh_list_of_arg2⁰), p'⁰), empty_lh_₆)))
//│ 	in force⁰(p'⁰)
//│ def list_of_lh_₃(_lh_list_of_arg1⁴, _lh_list_of_arg2⁴) = 
//│ 	let p'⁴ = lazy⁰(seq2_lh_₇(mk_cons_lh_₇, _lh_list_of_arg1⁴, orElseMap_lh_₁₅(seq2Lzq_lh_₂((fun x⁵⁴ -> (fun y⁶ -> y⁶)), look_for_lh_₁₉(_lh_list_of_arg2⁴), p'⁴), empty_lh_₆)))
//│ 	in force⁰(p'⁴)
//│ def list_of_lh_₄(_lh_list_of_arg1¹, _lh_list_of_arg2¹) = 
//│ 	let p'¹ = lazy⁰(seq2_lh_₇(mk_cons_lh_₇, _lh_list_of_arg1¹, orElseMap_lh_₁₅(seq2Lzq_lh_₂((fun x¹⁹ -> (fun y¹ -> y¹)), look_for_lh_₁₉(_lh_list_of_arg2¹), p'¹), empty_lh_₆)))
//│ 	in force⁰(p'¹)
//│ def list_of_lh_₅(_lh_list_of_arg1², _lh_list_of_arg2²) = 
//│ 	let p'² = lazy⁰(seq2_lh_₇(mk_cons_lh_₇, _lh_list_of_arg1², orElseMap_lh_₁₅(seq2Lzq_lh_₂((fun x³⁴ -> (fun y² -> y²)), look_for_lh_₁₉(_lh_list_of_arg2²), p'²), empty_lh_₆)))
//│ 	in force⁰(p'²)
//│ def list_of_lh_₆(_lh_list_of_arg1⁵, _lh_list_of_arg2⁵) = 
//│ 	let p'⁵ = lazy⁰(seq2_lh_₇(mk_cons_lh_₇, _lh_list_of_arg1⁵, orElseMap_lh_₁₅(seq2Lzq_lh_₂((fun x⁵⁵ -> (fun y⁷ -> y⁷)), look_for_lh_₁₉(_lh_list_of_arg2⁵), p'⁵), empty_lh_₆)))
//│ 	in force⁰(p'⁵)
//│ def listify_lh_₁(_lh_listify_arg1⁰) = getOrElse_lh_₁(lift_lh_₆(box_lh_₁, _lh_listify_arg1⁰), [LH_N])
//│ def look_for_lh_₁(_lh_look_for_arg1¹²) = sp_lh_₃(pchar_lh_₁((fun x⁵³ -> polyEq⁰(x⁵³, _lh_look_for_arg1¹²))))
//│ def look_for_lh_₁₀(_lh_look_for_arg1¹¹) = sp_lh_₈(pchar_lh_₄((fun x⁵² -> polyEq⁰(x⁵², _lh_look_for_arg1¹¹))))
//│ def look_for_lh_₁₁(_lh_look_for_arg1²) = sp_lh_₈(pchar_lh_₄((fun x¹³ -> polyEq⁰(x¹³, _lh_look_for_arg1²))))
//│ def look_for_lh_₁₂(_lh_look_for_arg1¹⁵) = sp_lh_₈(pchar_lh_₄((fun x⁵⁸ -> polyEq⁰(x⁵⁸, _lh_look_for_arg1¹⁵))))
//│ def look_for_lh_₁₃(_lh_look_for_arg1¹⁷) = sp_lh_₈(pchar_lh_₄((fun x⁶⁴ -> polyEq⁰(x⁶⁴, _lh_look_for_arg1¹⁷))))
//│ def look_for_lh_₁₄(_lh_look_for_arg1¹) = sp_lh_₈(pchar_lh_₄((fun x¹¹ -> polyEq⁰(x¹¹, _lh_look_for_arg1¹))))
//│ def look_for_lh_₁₅(_lh_look_for_arg1¹⁴) = sp_lh_₈(pchar_lh_₄((fun x⁵⁷ -> polyEq⁰(x⁵⁷, _lh_look_for_arg1¹⁴))))
//│ def look_for_lh_₁₆(_lh_look_for_arg1¹⁶) = sp_lh_₈(pchar_lh_₄((fun x⁵⁹ -> polyEq⁰(x⁵⁹, _lh_look_for_arg1¹⁶))))
//│ def look_for_lh_₁₇(_lh_look_for_arg1¹³) = sp_lh_₈(pchar_lh_₄((fun x⁵⁶ -> polyEq⁰(x⁵⁶, _lh_look_for_arg1¹³))))
//│ def look_for_lh_₁₈(_lh_look_for_arg1⁹) = sp_lh_₈(pchar_lh_₄((fun x⁴⁷ -> polyEq⁰(x⁴⁷, _lh_look_for_arg1⁹))))
//│ def look_for_lh_₁₉(_lh_look_for_arg1⁴) = sp_lh_₈(pchar_lh_₄((fun x²⁵ -> polyEq⁰(x²⁵, _lh_look_for_arg1⁴))))
//│ def look_for_lh_₂(_lh_look_for_arg1³) = sp_lh_₄(pchar_lh_₂((fun x²⁴ -> polyEq⁰(x²⁴, _lh_look_for_arg1³))))
//│ def look_for_lh_₃(_lh_look_for_arg1⁰) = sp_lh_₆(pchar_lh_₃((fun x⁸ -> polyEq⁰(x⁸, _lh_look_for_arg1⁰))))
//│ def look_for_lh_₄(_lh_look_for_arg1⁶) = sp_lh_₈(pchar_lh_₄((fun x³³ -> polyEq⁰(x³³, _lh_look_for_arg1⁶))))
//│ def look_for_lh_₅(_lh_look_for_arg1⁷) = sp_lh_₈(pchar_lh_₄((fun x⁴² -> polyEq⁰(x⁴², _lh_look_for_arg1⁷))))
//│ def look_for_lh_₆(_lh_look_for_arg1¹⁸) = sp_lh_₈(pchar_lh_₄((fun x⁶⁵ -> polyEq⁰(x⁶⁵, _lh_look_for_arg1¹⁸))))
//│ def look_for_lh_₇(_lh_look_for_arg1⁵) = sp_lh_₈(pchar_lh_₄((fun x³² -> polyEq⁰(x³², _lh_look_for_arg1⁵))))
//│ def look_for_lh_₈(_lh_look_for_arg1¹⁰) = sp_lh_₈(pchar_lh_₄((fun x⁵¹ -> polyEq⁰(x⁵¹, _lh_look_for_arg1¹⁰))))
//│ def look_for_lh_₉(_lh_look_for_arg1⁸) = sp_lh_₈(pchar_lh_₄((fun x⁴³ -> polyEq⁰(x⁴³, _lh_look_for_arg1⁸))))
//│ def ltRewrite_lh_₁(_lh_ltRewrite_arg1³, _lh_ltRewrite_arg2³, _lh_ltRewrite_arg3³) = polyEq⁰(_lh_ltRewrite_arg1³([LH_P2 _lh_ltRewrite_arg2³ _lh_ltRewrite_arg3³]), [Less])
//│ def ltRewrite_lh_₂(_lh_ltRewrite_arg1⁰, _lh_ltRewrite_arg2⁰, _lh_ltRewrite_arg3⁰) = polyEq⁰(_lh_ltRewrite_arg1⁰([LH_P2 _lh_ltRewrite_arg2⁰ _lh_ltRewrite_arg3⁰]), [Less])
//│ def ltRewrite_lh_₃(_lh_ltRewrite_arg1¹, _lh_ltRewrite_arg2¹, _lh_ltRewrite_arg3¹) = polyEq⁰(_lh_ltRewrite_arg1¹([LH_P2 _lh_ltRewrite_arg2¹ _lh_ltRewrite_arg3¹]), [Less])
//│ def ltRewrite_lh_₄(_lh_ltRewrite_arg1², _lh_ltRewrite_arg2², _lh_ltRewrite_arg3²) = polyEq⁰(_lh_ltRewrite_arg1²([LH_P2 _lh_ltRewrite_arg2² _lh_ltRewrite_arg3²]), [Less])
//│ def map_dnet_lh_₁(_lh_map_dnet_arg1⁰, _lh_map_dnet_arg2⁰) = case _lh_map_dnet_arg2⁰ of {
//│ 	Switch _lh_map_dnet_Switch_0⁰ _lh_map_dnet_Switch_1⁰ => [Switch map_lh_₇(cross_lh_₂((fun x²⁶ -> x²⁶), map_dnet_lh_₁(_lh_map_dnet_arg1⁰)), _lh_map_dnet_Switch_0⁰) map_dnet_lh_₁(_lh_map_dnet_arg1⁰, _lh_map_dnet_Switch_1⁰)]
//│ 	| Return _lh_map_dnet_Return_0⁰ => [Return _lh_map_dnet_arg1⁰(_lh_map_dnet_Return_0⁰)]}
//│ def map_lh_₁(f⁹², ls¹²) = ls¹²(f⁹²)
//│ def map_lh_₂(f⁸⁹, ls¹⁰, _lh_floatOutId_0², _lh_floatOutId_1⁰) = case ls¹⁰ of {
//│ 	LH_C h⁶⁷ t⁷⁰ => 
//│ 		let t⁷¹ = map_lh_₂(f⁸⁹, t⁷⁰)
//│ 		in let h⁶⁸ = f⁸⁹(h⁶⁷)
//│ 		in _lh_floatOutId_0²(h⁶⁸, foldr_lh_₁(_lh_floatOutId_0², _lh_floatOutId_1⁰, t⁷¹))
//│ 	| LH_N  => _lh_floatOutId_1⁰}
//│ def map_lh_₃(f¹¹⁰, ls¹⁵, _lh_floatOutId_0⁷) = case ls¹⁵ of {
//│ 	LH_C h⁸³ t⁸⁶ => 
//│ 		let _lh_or_LH_C_1⁰ = map_lh_₃(f¹¹⁰, t⁸⁶)
//│ 		in let _lh_or_LH_C_0⁰ = f¹¹⁰(h⁸³)
//│ 		in if _lh_or_LH_C_0⁰ then [True] else or_lh_₁(_lh_or_LH_C_1⁰)
//│ 	| LH_N  => [False]}
//│ def map_lh_₄(f¹¹², ls¹⁷, _lh_floatOutId_0⁸) = case ls¹⁷ of {
//│ 	LH_C h⁸⁶ t⁸⁹ => 
//│ 		let _lh_or_LH_C_1¹ = map_lh_₄(f¹¹², t⁸⁹)
//│ 		in let _lh_or_LH_C_0¹ = f¹¹²(h⁸⁶)
//│ 		in if _lh_or_LH_C_0¹ then [True] else or_lh_₂(_lh_or_LH_C_1¹)
//│ 	| LH_N  => [False]}
//│ def map_lh_₅(f¹⁰⁷, ls¹⁴, _lh_floatOutId_0⁶, _lh_floatOutId_1²) = case ls¹⁴ of {
//│ 	LH_C h⁸¹ t⁸⁴ => 
//│ 		let t⁸⁵ = map_lh_₅(f¹⁰⁷, t⁸⁴)
//│ 		in let h⁸² = f¹⁰⁷(h⁸¹)
//│ 		in _lh_floatOutId_0⁶(h⁸², foldr_lh_₆(_lh_floatOutId_0⁶, _lh_floatOutId_1², t⁸⁵))
//│ 	| LH_N  => _lh_floatOutId_1²}
//│ def map_lh_₆(f⁷⁴, ls⁸, _lh_floatOutId_0¹) = case ls⁸ of {
//│ 	LH_C h⁵⁵ t⁵⁸ => 
//│ 		let t⁵⁹ = map_lh_₆(f⁷⁴, t⁵⁸)
//│ 		in let h⁵⁶ = f⁷⁴(h⁵⁵)
//│ 		in sumAux_lh_₁(t⁵⁹, (_lh_floatOutId_0¹ + h⁵⁶))
//│ 	| LH_N  => _lh_floatOutId_0¹}
//│ def map_lh_₇(f²¹, ls¹) = case ls¹ of {
//│ 	LH_C h¹⁵ t¹⁷ => [LH_C f²¹(h¹⁵) map_lh_₇(f²¹, t¹⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs², ys¹) = xs²(ys¹)
//│ def mappend_lh_₂(xs⁵, ys²) = case xs⁵ of {
//│ 	LH_C h³⁹ t⁴¹ => [LH_C h³⁹ mappend_lh_₂(t⁴¹, ys²)]
//│ 	| LH_N  => ys²}
//│ def match'_lh_₁(_lh_match'_arg1⁰, _lh_match'_arg2⁰) = case _lh_match'_arg2⁰ of {
//│ 	LH_P2 _lh_match'_LH_P2_0⁰ _lh_match'_LH_P2_1⁰ => case _lh_match'_LH_P2_0⁰ of {
//│ 		Var _lh_match'_Var_0⁰ => 
//│ 			let u⁰ = assoc_lh_₁(_lh_match'_arg1⁰, _lh_match'_Var_0⁰)
//│ 			in if not⁰(exists_lh_₁(u⁰)) then succeed_lh_₁([LH_C [LH_P2 _lh_match'_Var_0⁰ _lh_match'_LH_P2_1⁰] _lh_match'_arg1⁰]) else if eqExpr_lh_₁(the_lh_₃(u⁰), _lh_match'_LH_P2_1⁰) then succeed_lh_₁(_lh_match'_arg1⁰) else croak_lh_₁
//│ 		| Func _lh_match'_Func_0⁰ _lh_match'_Func_1⁰ => case _lh_match'_LH_P2_1⁰ of {
//│ 			Func _lh_match'_Func_0¹ _lh_match'_Func_1¹ => if polyEq⁰(_lh_match'_Func_0⁰, _lh_match'_Func_0¹) then prop_fold_lh_₁(match'_lh_₁, _lh_match'_arg1⁰, zip_lh_₁(_lh_match'_Func_1⁰, _lh_match'_Func_1¹)) else croak_lh_₁
//│ 			| Var _lh_match'_Var_0¹ => croak_lh_₁
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def match_lh_₁(_lh_match_arg1⁰, _lh_match_arg2⁰) = match'_lh_₁([LH_N], [LH_P2 _lh_match_arg1⁰ _lh_match_arg2⁰])
//│ def maybeX_lh_₁(_lh_maybeX_arg1⁰, _lh_maybeX_arg2⁰) = if _lh_maybeX_arg1⁰ then [Just _lh_maybeX_arg2⁰] else [Nothing]
//│ def mk_cons_lh_₁(_lh_mk_cons_arg1⁰, _lh_mk_cons_arg2⁰) = case _lh_mk_cons_arg2⁰ of {
//│ 	List _lh_mk_cons_List_0⁰ => [List [LH_C _lh_mk_cons_arg1⁰ _lh_mk_cons_List_0⁰]]
//│ 	| _  => error⁰}
//│ def mk_cons_lh_₂(_lh_mk_cons_arg1³, _lh_mk_cons_arg2³) = case _lh_mk_cons_arg2³ of {
//│ 	List _lh_mk_cons_List_0³ => [List [LH_C _lh_mk_cons_arg1³ _lh_mk_cons_List_0³]]
//│ 	| _  => error⁰}
//│ def mk_cons_lh_₃(_lh_mk_cons_arg1², _lh_mk_cons_arg2²) = case _lh_mk_cons_arg2² of {
//│ 	List _lh_mk_cons_List_0² => [List [LH_C _lh_mk_cons_arg1² _lh_mk_cons_List_0²]]
//│ 	| _  => error⁰}
//│ def mk_cons_lh_₄(_lh_mk_cons_arg1¹, _lh_mk_cons_arg2¹) = case _lh_mk_cons_arg2¹ of {
//│ 	List _lh_mk_cons_List_0¹ => [List [LH_C _lh_mk_cons_arg1¹ _lh_mk_cons_List_0¹]]
//│ 	| _  => error⁰}
//│ def mk_cons_lh_₅(_lh_mk_cons_arg1⁵, _lh_mk_cons_arg2⁵) = case _lh_mk_cons_arg2⁵ of {
//│ 	List _lh_mk_cons_List_0⁵ => [List [LH_C _lh_mk_cons_arg1⁵ _lh_mk_cons_List_0⁵]]
//│ 	| _  => error⁰}
//│ def mk_cons_lh_₆(_lh_mk_cons_arg1⁴, _lh_mk_cons_arg2⁴) = case _lh_mk_cons_arg2⁴ of {
//│ 	List _lh_mk_cons_List_0⁴ => [List [LH_C _lh_mk_cons_arg1⁴ _lh_mk_cons_List_0⁴]]
//│ 	| _  => error⁰}
//│ def mk_cons_lh_₇(_lh_mk_cons_arg1⁶, _lh_mk_cons_arg2⁶) = case _lh_mk_cons_arg2⁶ of {
//│ 	List _lh_mk_cons_List_0⁶ => [List [LH_C _lh_mk_cons_arg1⁶ _lh_mk_cons_List_0⁶]]
//│ 	| _  => error⁰}
//│ def mk_crit_lh_₁(_lh_mk_crit_arg1⁰, _lh_mk_crit_arg2⁰, _lh_mk_crit_arg3⁰) = case _lh_mk_crit_arg1⁰ of {
//│ 	Eqn _lh_mk_crit_Eqn_0⁰ _lh_mk_crit_Eqn_1⁰ => case _lh_mk_crit_Eqn_1⁰ of {
//│ 		LH_P2 _lh_mk_crit_LH_P2_0⁰ _lh_mk_crit_LH_P2_1⁰ => case _lh_mk_crit_arg2⁰ of {
//│ 			Eqn _lh_mk_crit_Eqn_0¹ _lh_mk_crit_Eqn_1¹ => case _lh_mk_crit_Eqn_1¹ of {
//│ 				LH_P2 _lh_mk_crit_LH_P2_0¹ _lh_mk_crit_LH_P2_1¹ => case _lh_mk_crit_arg3⁰ of {
//│ 					LH_P2 _lh_mk_crit_LH_P2_0² _lh_mk_crit_LH_P2_1² => [LH_P2 sub_lh_₁(replace_lh_₁(_lh_mk_crit_LH_P2_0¹, _lh_mk_crit_LH_P2_0², _lh_mk_crit_LH_P2_1⁰), _lh_mk_crit_LH_P2_1²) sub_lh_₁(_lh_mk_crit_LH_P2_1¹, _lh_mk_crit_LH_P2_1²)]}}}}}
//│ def mk_item_lh_₁(_lh_mk_item_arg1⁰, _lh_mk_item_arg2⁰) = [Item _lh_mk_item_arg1⁰(_lh_mk_item_arg2⁰) _lh_mk_item_arg2⁰]
//│ def mk_list_lh_₁(_lh_mk_list_arg1³, _lh_mk_list_arg2³) = case _lh_mk_list_arg2³ of {
//│ 	List _lh_mk_list_List_0³ => _lh_mk_list_arg1³(_lh_mk_list_List_0³)
//│ 	| _  => error⁰}
//│ def mk_list_lh_₂(_lh_mk_list_arg1¹, _lh_mk_list_arg2¹) = case _lh_mk_list_arg2¹ of {
//│ 	List _lh_mk_list_List_0¹ => _lh_mk_list_arg1¹(_lh_mk_list_List_0¹)
//│ 	| _  => error⁰}
//│ def mk_list_lh_₃(_lh_mk_list_arg1⁰, _lh_mk_list_arg2⁰) = case _lh_mk_list_arg2⁰ of {
//│ 	List _lh_mk_list_List_0⁰ => _lh_mk_list_arg1⁰(_lh_mk_list_List_0⁰)
//│ 	| _  => error⁰}
//│ def mk_list_lh_₄(_lh_mk_list_arg1², _lh_mk_list_arg2²) = case _lh_mk_list_arg2² of {
//│ 	List _lh_mk_list_List_0² => _lh_mk_list_arg1²(_lh_mk_list_List_0²)
//│ 	| _  => error⁰}
//│ def mk_list_lh_₅(_lh_mk_list_arg1⁴, _lh_mk_list_arg2⁴) = case _lh_mk_list_arg2⁴ of {
//│ 	List _lh_mk_list_List_0⁴ => _lh_mk_list_arg1⁴(_lh_mk_list_List_0⁴)
//│ 	| _  => error⁰}
//│ def modify_lh_₁(_lh_modify_arg1⁰, _lh_modify_arg2⁰, _lh_modify_arg3⁰) = case _lh_modify_arg1⁰ of {
//│ 	LH_C _lh_modify_LH_C_0⁰ _lh_modify_LH_C_1⁰ => case _lh_modify_arg2⁰ of {
//│ 		0  => [LH_C _lh_modify_arg3⁰(_lh_modify_LH_C_0⁰) _lh_modify_LH_C_1⁰]
//│ 		| _  => [LH_C _lh_modify_LH_C_0⁰ modify_lh_₁(_lh_modify_LH_C_1⁰, (_lh_modify_arg2⁰ - 1), _lh_modify_arg3⁰)]}
//│ 	| _  => error⁰}
//│ def num_order_lh_₁(_lh_num_order_arg1⁰) = _lh_num_order_arg1⁰([lh_Unit])
//│ def occurs_lh_₁(_lh_occurs_arg1¹) = expr_fold_lh_₁((fun dum⁴ -> or_lh_₁), (fun x⁵⁰ -> polyEq⁰(x⁵⁰, _lh_occurs_arg1¹)))
//│ def occurs_lh_₂(_lh_occurs_arg1⁰) = expr_fold_lh_₂((fun dum¹ -> or_lh_₂), (fun x²² -> polyEq⁰(x²², _lh_occurs_arg1⁰)))
//│ def opsym_lh_₁(_lh_opsym_arg1¹) = (fun x²⁰ -> inList_lh_₄(x²⁰, [LH_C '*' [LH_C '+' [LH_C '%' [LH_C '@' [LH_C '-' [LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]]]]]]))(_lh_opsym_arg1¹)
//│ def opsym_lh_₂(_lh_opsym_arg1⁰) = (fun x² -> inList_lh_₄(x², [LH_C '*' [LH_C '+' [LH_C '%' [LH_C '@' [LH_C '-' [LH_C '/' [LH_C '?' [LH_C ':' [LH_N]]]]]]]]]))(_lh_opsym_arg1⁰)
//│ def orElseMap_lh_₁(_lh_orElseMap_arg1¹¹, _lh_orElseMap_arg2¹¹, _lh_orElseMap_arg3¹¹) = orElse_lh_₂(_lh_orElseMap_arg1¹¹(_lh_orElseMap_arg3¹¹), _lh_orElseMap_arg2¹¹(_lh_orElseMap_arg3¹¹))
//│ def orElseMap_lh_₁₀(_lh_orElseMap_arg1⁰, _lh_orElseMap_arg2⁰, _lh_orElseMap_arg3⁰) = orElse_lh_₆(_lh_orElseMap_arg1⁰(_lh_orElseMap_arg3⁰), _lh_orElseMap_arg2⁰(_lh_orElseMap_arg3⁰))
//│ def orElseMap_lh_₁₁(_lh_orElseMap_arg1⁷, _lh_orElseMap_arg2⁷, _lh_orElseMap_arg3⁷) = orElse_lh_₆(_lh_orElseMap_arg1⁷(_lh_orElseMap_arg3⁷), _lh_orElseMap_arg2⁷(_lh_orElseMap_arg3⁷))
//│ def orElseMap_lh_₁₂(_lh_orElseMap_arg1⁴, _lh_orElseMap_arg2⁴, _lh_orElseMap_arg3⁴) = orElse_lh_₆(_lh_orElseMap_arg1⁴(_lh_orElseMap_arg3⁴), _lh_orElseMap_arg2⁴(_lh_orElseMap_arg3⁴))
//│ def orElseMap_lh_₁₃(_lh_orElseMap_arg1¹⁰, _lh_orElseMap_arg2¹⁰, _lh_orElseMap_arg3¹⁰) = orElse_lh_₆(_lh_orElseMap_arg1¹⁰(_lh_orElseMap_arg3¹⁰), _lh_orElseMap_arg2¹⁰(_lh_orElseMap_arg3¹⁰))
//│ def orElseMap_lh_₁₄(_lh_orElseMap_arg1², _lh_orElseMap_arg2², _lh_orElseMap_arg3²) = orElse_lh_₆(_lh_orElseMap_arg1²(_lh_orElseMap_arg3²), _lh_orElseMap_arg2²(_lh_orElseMap_arg3²))
//│ def orElseMap_lh_₁₅(_lh_orElseMap_arg1⁵, _lh_orElseMap_arg2⁵, _lh_orElseMap_arg3⁵) = orElse_lh_₆(_lh_orElseMap_arg1⁵(_lh_orElseMap_arg3⁵), _lh_orElseMap_arg2⁵(_lh_orElseMap_arg3⁵))
//│ def orElseMap_lh_₂(_lh_orElseMap_arg1¹³, _lh_orElseMap_arg2¹³, _lh_orElseMap_arg3¹³) = orElse_lh_₃(_lh_orElseMap_arg1¹³(_lh_orElseMap_arg3¹³), _lh_orElseMap_arg2¹³(_lh_orElseMap_arg3¹³))
//│ def orElseMap_lh_₃(_lh_orElseMap_arg1⁶, _lh_orElseMap_arg2⁶, _lh_orElseMap_arg3⁶) = orElse_lh_₄(_lh_orElseMap_arg1⁶(_lh_orElseMap_arg3⁶), _lh_orElseMap_arg2⁶(_lh_orElseMap_arg3⁶))
//│ def orElseMap_lh_₄(_lh_orElseMap_arg1¹, _lh_orElseMap_arg2¹, _lh_orElseMap_arg3¹) = orElse_lh_₅(_lh_orElseMap_arg1¹(_lh_orElseMap_arg3¹), _lh_orElseMap_arg2¹(_lh_orElseMap_arg3¹))
//│ def orElseMap_lh_₅(_lh_orElseMap_arg1⁸, _lh_orElseMap_arg2⁸, _lh_orElseMap_arg3⁸) = orElse_lh_₆(_lh_orElseMap_arg1⁸(_lh_orElseMap_arg3⁸), _lh_orElseMap_arg2⁸(_lh_orElseMap_arg3⁸))
//│ def orElseMap_lh_₆(_lh_orElseMap_arg1¹⁴, _lh_orElseMap_arg2¹⁴, _lh_orElseMap_arg3¹⁴) = orElse_lh_₆(_lh_orElseMap_arg1¹⁴(_lh_orElseMap_arg3¹⁴), _lh_orElseMap_arg2¹⁴(_lh_orElseMap_arg3¹⁴))
//│ def orElseMap_lh_₇(_lh_orElseMap_arg1⁹, _lh_orElseMap_arg2⁹, _lh_orElseMap_arg3⁹) = orElse_lh_₆(_lh_orElseMap_arg1⁹(_lh_orElseMap_arg3⁹), _lh_orElseMap_arg2⁹(_lh_orElseMap_arg3⁹))
//│ def orElseMap_lh_₈(_lh_orElseMap_arg1³, _lh_orElseMap_arg2³, _lh_orElseMap_arg3³) = orElse_lh_₆(_lh_orElseMap_arg1³(_lh_orElseMap_arg3³), _lh_orElseMap_arg2³(_lh_orElseMap_arg3³))
//│ def orElseMap_lh_₉(_lh_orElseMap_arg1¹², _lh_orElseMap_arg2¹², _lh_orElseMap_arg3¹²) = orElse_lh_₆(_lh_orElseMap_arg1¹²(_lh_orElseMap_arg3¹²), _lh_orElseMap_arg2¹²(_lh_orElseMap_arg3¹²))
//│ def orElse_lh_₁(_lh_orElse_arg1⁴, _lh_orElse_arg2⁴) = case _lh_orElse_arg1⁴ of {
//│ 	Nothing  => _lh_orElse_arg2⁴
//│ 	| _  => _lh_orElse_arg1⁴}
//│ def orElse_lh_₂(_lh_orElse_arg1³, _lh_orElse_arg2³) = case _lh_orElse_arg1³ of {
//│ 	Nothing  => _lh_orElse_arg2³
//│ 	| _  => _lh_orElse_arg1³}
//│ def orElse_lh_₃(_lh_orElse_arg1⁰, _lh_orElse_arg2⁰) = case _lh_orElse_arg1⁰ of {
//│ 	Nothing  => _lh_orElse_arg2⁰
//│ 	| _  => _lh_orElse_arg1⁰}
//│ def orElse_lh_₄(_lh_orElse_arg1¹, _lh_orElse_arg2¹) = case _lh_orElse_arg1¹ of {
//│ 	Nothing  => _lh_orElse_arg2¹
//│ 	| _  => _lh_orElse_arg1¹}
//│ def orElse_lh_₅(_lh_orElse_arg1², _lh_orElse_arg2²) = case _lh_orElse_arg1² of {
//│ 	Nothing  => _lh_orElse_arg2²
//│ 	| _  => _lh_orElse_arg1²}
//│ def orElse_lh_₆(_lh_orElse_arg1⁵, _lh_orElse_arg2⁵) = case _lh_orElse_arg1⁵ of {
//│ 	Nothing  => _lh_orElse_arg2⁵
//│ 	| _  => _lh_orElse_arg1⁵}
//│ def or_lh_₁(_lh_or_arg1⁰) = _lh_or_arg1⁰([lh_Unit])
//│ def or_lh_₂(_lh_or_arg1¹) = _lh_or_arg1¹([lh_Unit])
//│ def p_eqn_lh_₁(_lh_p_eqn_arg1⁰) = seQ_lh_₃(q_eqn_lh_₁, 
//│ 	let t⁴⁴ = 	
//│ 		let t⁴⁵ = 	
//│ 			let t⁴⁶ = (fun f⁵⁵ -> (fun i⁴⁹ -> i⁴⁹))
//│ 			in let h⁴¹ = p_expr_lh_₃
//│ 			in (fun f⁵⁶ -> (fun i⁵⁰ -> f⁵⁶(h⁴¹, foldr_lh_₅(f⁵⁶, i⁵⁰, t⁴⁶))))
//│ 		in let h⁴² = look_for_lh_₁('=')
//│ 		in (fun f⁵⁷ -> (fun i⁵¹ -> f⁵⁷(h⁴², foldr_lh_₅(f⁵⁷, i⁵¹, t⁴⁵))))
//│ 	in let h⁴³ = p_expr_lh_₄
//│ 	in (fun f⁵⁸ -> (fun i⁵² -> f⁵⁸(h⁴³, foldr_lh_₅(f⁵⁸, i⁵², t⁴⁴)))), _lh_p_eqn_arg1⁰)
//│ def p_expr_lh_₁(_lh_p_expr_arg1²) = orElseMap_lh_₁(seQ_lh_₁(q_op_lh_₁, 
//│ 	let t³⁴ = 	
//│ 		let t³⁵ = 	
//│ 			let t³⁶ = (fun f⁴⁴ -> (fun i³⁸ -> i³⁸))
//│ 			in let h³² = p_term_lh_₂
//│ 			in (fun f⁴⁵ -> (fun i³⁹ -> f⁴⁵(h³², foldr_lh_₃(f⁴⁵, i³⁹, t³⁶))))
//│ 		in let h³³ = p_op_lh_₁
//│ 		in (fun f⁴⁶ -> (fun i⁴⁰ -> f⁴⁶(h³³, foldr_lh_₃(f⁴⁶, i⁴⁰, t³⁵))))
//│ 	in let h³⁴ = p_term_lh_₃
//│ 	in (fun f⁴⁷ -> (fun i⁴¹ -> f⁴⁷(h³⁴, foldr_lh_₃(f⁴⁷, i⁴¹, t³⁴))))), p_term_lh_₁, _lh_p_expr_arg1²)
//│ def p_expr_lh_₂(_lh_p_expr_arg1¹) = orElseMap_lh_₂(seQ_lh_₂(q_op_lh_₂, 
//│ 	let t³¹ = 	
//│ 		let t³² = 	
//│ 			let t³³ = (fun f⁴⁰ -> (fun i³⁴ -> i³⁴))
//│ 			in let h²⁹ = p_term_lh_₆
//│ 			in (fun f⁴¹ -> (fun i³⁵ -> f⁴¹(h²⁹, foldr_lh_₄(f⁴¹, i³⁵, t³³))))
//│ 		in let h³⁰ = p_op_lh_₂
//│ 		in (fun f⁴² -> (fun i³⁶ -> f⁴²(h³⁰, foldr_lh_₄(f⁴², i³⁶, t³²))))
//│ 	in let h³¹ = p_term_lh_₄
//│ 	in (fun f⁴³ -> (fun i³⁷ -> f⁴³(h³¹, foldr_lh_₄(f⁴³, i³⁷, t³¹))))), p_term_lh_₅, _lh_p_expr_arg1¹)
//│ def p_expr_lh_₃(_lh_p_expr_arg1³) = orElseMap_lh_₁₀(seQ_lh_₁₀(q_op_lh_₃, 
//│ 	let t⁷⁷ = 	
//│ 		let t⁷⁸ = 	
//│ 			let t⁷⁹ = (fun f⁹⁸ -> (fun i⁸⁹ -> i⁸⁹))
//│ 			in let h⁷⁴ = p_term_lh_₈
//│ 			in (fun f⁹⁹ -> (fun i⁹⁰ -> f⁹⁹(h⁷⁴, foldr_lh_₆(f⁹⁹, i⁹⁰, t⁷⁹))))
//│ 		in let h⁷⁵ = p_op_lh_₃
//│ 		in (fun f¹⁰⁰ -> (fun i⁹¹ -> f¹⁰⁰(h⁷⁵, foldr_lh_₆(f¹⁰⁰, i⁹¹, t⁷⁸))))
//│ 	in let h⁷⁶ = p_term_lh_₉
//│ 	in (fun f¹⁰¹ -> (fun i⁹² -> f¹⁰¹(h⁷⁶, foldr_lh_₆(f¹⁰¹, i⁹², t⁷⁷))))), p_term_lh_₇, _lh_p_expr_arg1³)
//│ def p_expr_lh_₄(_lh_p_expr_arg1⁰) = orElseMap_lh_₁₁(seQ_lh_₁₁(q_op_lh_₄, 
//│ 	let t²⁵ = 	
//│ 		let t²⁶ = 	
//│ 			let t²⁷ = (fun f³² -> (fun i³⁰ -> i³⁰))
//│ 			in let h²³ = p_term_lh_₁₀
//│ 			in (fun f³³ -> (fun i³¹ -> f³³(h²³, foldr_lh_₆(f³³, i³¹, t²⁷))))
//│ 		in let h²⁴ = p_op_lh_₄
//│ 		in (fun f³⁴ -> (fun i³² -> f³⁴(h²⁴, foldr_lh_₆(f³⁴, i³², t²⁶))))
//│ 	in let h²⁵ = p_term_lh_₁₂
//│ 	in (fun f³⁵ -> (fun i³³ -> f³⁵(h²⁵, foldr_lh_₆(f³⁵, i³³, t²⁵))))), p_term_lh_₁₁, _lh_p_expr_arg1⁰)
//│ def p_ident_lh_₁(_lh_p_ident_arg1⁵) = sp_lh_₅(string_of_lh_₃(alphanum_lh_₁), _lh_p_ident_arg1⁵)
//│ def p_ident_lh_₂(_lh_p_ident_arg1²) = sp_lh_₇(string_of_lh_₄(alphanum_lh_₂), _lh_p_ident_arg1²)
//│ def p_ident_lh_₃(_lh_p_ident_arg1⁰) = sp_lh_₈(string_of_lh_₄(alphanum_lh_₂), _lh_p_ident_arg1⁰)
//│ def p_ident_lh_₄(_lh_p_ident_arg1¹) = sp_lh_₈(string_of_lh_₄(alphanum_lh_₂), _lh_p_ident_arg1¹)
//│ def p_ident_lh_₅(_lh_p_ident_arg1³) = sp_lh_₈(string_of_lh_₄(alphanum_lh_₂), _lh_p_ident_arg1³)
//│ def p_ident_lh_₆(_lh_p_ident_arg1⁴) = sp_lh_₈(string_of_lh_₄(alphanum_lh_₂), _lh_p_ident_arg1⁴)
//│ def p_name_lh_₁(_lh_p_name_arg1¹) = build_lh_₅(q_name_lh_₁, p_ident_lh_₆, _lh_p_name_arg1¹)
//│ def p_name_lh_₂(_lh_p_name_arg1⁰) = build_lh_₅(q_name_lh_₁, p_ident_lh_₆, _lh_p_name_arg1⁰)
//│ def p_op_lh_₁(_lh_p_op_arg1³) = sp_lh_₁(string_of_lh_₁(opsym_lh_₁), _lh_p_op_arg1³)
//│ def p_op_lh_₂(_lh_p_op_arg1⁰) = sp_lh_₂(string_of_lh_₂(opsym_lh_₂), _lh_p_op_arg1⁰)
//│ def p_op_lh_₃(_lh_p_op_arg1¹) = sp_lh_₈(string_of_lh_₄(opsym_lh_₂), _lh_p_op_arg1¹)
//│ def p_op_lh_₄(_lh_p_op_arg1²) = sp_lh_₈(string_of_lh_₄(opsym_lh_₂), _lh_p_op_arg1²)
//│ def p_prim_lh_₁(_lh_p_prim_arg1¹) = orElseMap_lh_₁₃(p_name_lh_₁, seQ_lh_₁₂((fun x¹² -> atIndex_lh_₁(1, x¹²)), 
//│ 	let t¹⁸ = 	
//│ 		let t¹⁹ = 	
//│ 			let t²⁰ = (fun f²³ -> (fun i²¹ -> i²¹))
//│ 			in let h¹⁶ = look_for_lh_₁₆(')')
//│ 			in (fun f²⁴ -> (fun i²² -> f²⁴(h¹⁶, foldr_lh_₆(f²⁴, i²², t²⁰))))
//│ 		in let h¹⁷ = p_expr_lh_₁
//│ 		in (fun f²⁵ -> (fun i²³ -> f²⁵(h¹⁷, foldr_lh_₆(f²⁵, i²³, t¹⁹))))
//│ 	in let h¹⁸ = look_for_lh_₁₅('(')
//│ 	in (fun f²⁶ -> (fun i²⁴ -> f²⁶(h¹⁸, foldr_lh_₆(f²⁶, i²⁴, t¹⁸))))), _lh_p_prim_arg1¹)
//│ def p_prim_lh_₂(_lh_p_prim_arg1²) = orElseMap_lh_₁₅(p_name_lh_₂, seQ_lh_₁₃((fun x³⁵ -> atIndex_lh_₂(1, x³⁵)), 
//│ 	let t⁵¹ = 	
//│ 		let t⁵² = 	
//│ 			let t⁵³ = (fun f⁶⁵ -> (fun i⁵⁹ -> i⁵⁹))
//│ 			in let h⁴⁸ = look_for_lh_₁₉(')')
//│ 			in (fun f⁶⁶ -> (fun i⁶⁰ -> f⁶⁶(h⁴⁸, foldr_lh_₆(f⁶⁶, i⁶⁰, t⁵³))))
//│ 		in let h⁴⁹ = p_expr_lh_₁
//│ 		in (fun f⁶⁷ -> (fun i⁶¹ -> f⁶⁷(h⁴⁹, foldr_lh_₆(f⁶⁷, i⁶¹, t⁵²))))
//│ 	in let h⁵⁰ = look_for_lh_₁₈('(')
//│ 	in (fun f⁶⁸ -> (fun i⁶² -> f⁶⁸(h⁵⁰, foldr_lh_₆(f⁶⁸, i⁶², t⁵¹))))), _lh_p_prim_arg1²)
//│ def p_prim_lh_₃(_lh_p_prim_arg1³) = orElseMap_lh_₁₅(p_name_lh_₂, seQ_lh_₁₃((fun x³⁷ -> atIndex_lh_₂(1, x³⁷)), 
//│ 	let t⁶⁰ = 	
//│ 		let t⁶¹ = 	
//│ 			let t⁶² = (fun f⁷⁵ -> (fun i⁶⁸ -> i⁶⁸))
//│ 			in let h⁵⁷ = look_for_lh_₁₉(')')
//│ 			in (fun f⁷⁶ -> (fun i⁶⁹ -> f⁷⁶(h⁵⁷, foldr_lh_₆(f⁷⁶, i⁶⁹, t⁶²))))
//│ 		in let h⁵⁸ = p_expr_lh_₁
//│ 		in (fun f⁷⁷ -> (fun i⁷⁰ -> f⁷⁷(h⁵⁸, foldr_lh_₆(f⁷⁷, i⁷⁰, t⁶¹))))
//│ 	in let h⁵⁹ = look_for_lh_₁₉('(')
//│ 	in (fun f⁷⁸ -> (fun i⁷¹ -> f⁷⁸(h⁵⁹, foldr_lh_₆(f⁷⁸, i⁷¹, t⁶⁰))))), _lh_p_prim_arg1³)
//│ def p_prim_lh_₄(_lh_p_prim_arg1⁰) = orElseMap_lh_₁₅(p_name_lh_₂, seQ_lh_₁₃((fun x⁴ -> atIndex_lh_₂(1, x⁴)), 
//│ 	let t⁸ = 	
//│ 		let t⁹ = 	
//│ 			let t¹⁰ = (fun f¹⁰ -> (fun i¹⁰ -> i¹⁰))
//│ 			in let h⁸ = look_for_lh_₁₉(')')
//│ 			in (fun f¹¹ -> (fun i¹¹ -> f¹¹(h⁸, foldr_lh_₆(f¹¹, i¹¹, t¹⁰))))
//│ 		in let h⁹ = p_expr_lh_₂
//│ 		in (fun f¹² -> (fun i¹² -> f¹²(h⁹, foldr_lh_₆(f¹², i¹², t⁹))))
//│ 	in let h¹⁰ = look_for_lh_₁₉('(')
//│ 	in (fun f¹³ -> (fun i¹³ -> f¹³(h¹⁰, foldr_lh_₆(f¹³, i¹³, t⁸))))), _lh_p_prim_arg1⁰)
//│ def p_prim_lh_₅(_lh_p_prim_arg1⁵) = orElseMap_lh_₁₅(p_name_lh_₂, seQ_lh_₁₃((fun x⁶³ -> atIndex_lh_₂(1, x⁶³)), 
//│ 	let t⁹⁰ = 	
//│ 		let t⁹¹ = 	
//│ 			let t⁹² = (fun f¹¹³ -> (fun i¹⁰⁰ -> i¹⁰⁰))
//│ 			in let h⁸⁷ = look_for_lh_₁₉(')')
//│ 			in (fun f¹¹⁴ -> (fun i¹⁰¹ -> f¹¹⁴(h⁸⁷, foldr_lh_₆(f¹¹⁴, i¹⁰¹, t⁹²))))
//│ 		in let h⁸⁸ = p_expr_lh_₂
//│ 		in (fun f¹¹⁵ -> (fun i¹⁰² -> f¹¹⁵(h⁸⁸, foldr_lh_₆(f¹¹⁵, i¹⁰², t⁹¹))))
//│ 	in let h⁸⁹ = look_for_lh_₁₉('(')
//│ 	in (fun f¹¹⁶ -> (fun i¹⁰³ -> f¹¹⁶(h⁸⁹, foldr_lh_₆(f¹¹⁶, i¹⁰³, t⁹⁰))))), _lh_p_prim_arg1⁵)
//│ def p_prim_lh_₆(_lh_p_prim_arg1⁴) = orElseMap_lh_₁₅(p_name_lh_₂, seQ_lh_₁₃((fun x³⁹ -> atIndex_lh_₂(1, x³⁹)), 
//│ 	let t⁶⁷ = 	
//│ 		let t⁶⁸ = 	
//│ 			let t⁶⁹ = (fun f⁸⁵ -> (fun i⁷⁸ -> i⁷⁸))
//│ 			in let h⁶⁴ = look_for_lh_₁₉(')')
//│ 			in (fun f⁸⁶ -> (fun i⁷⁹ -> f⁸⁶(h⁶⁴, foldr_lh_₆(f⁸⁶, i⁷⁹, t⁶⁹))))
//│ 		in let h⁶⁵ = p_expr_lh_₂
//│ 		in (fun f⁸⁷ -> (fun i⁸⁰ -> f⁸⁷(h⁶⁵, foldr_lh_₆(f⁸⁷, i⁸⁰, t⁶⁸))))
//│ 	in let h⁶⁶ = look_for_lh_₁₉('(')
//│ 	in (fun f⁸⁸ -> (fun i⁸¹ -> f⁸⁸(h⁶⁶, foldr_lh_₆(f⁸⁸, i⁸¹, t⁶⁷))))), _lh_p_prim_arg1⁴)
//│ def p_term_lh_₁(_lh_p_term_arg1¹¹) = orElseMap_lh_₄(seQ_lh_₄(q_func_lh_₁, 
//│ 	let t⁹⁷ = 	
//│ 		let t⁹⁸ = 	
//│ 			let t⁹⁹ = 	
//│ 				let t¹⁰⁰ = (fun f¹²² -> (fun i¹⁰⁹ -> i¹⁰⁹))
//│ 				in let h⁹⁴ = look_for_lh_₂(')')
//│ 				in (fun f¹²³ -> (fun i¹¹⁰ -> f¹²³(h⁹⁴, foldr_lh_₆(f¹²³, i¹¹⁰, t¹⁰⁰))))
//│ 			in let h⁹⁵ = list_of_lh_₁(p_expr_lh_₁, ',')
//│ 			in (fun f¹²⁴ -> (fun i¹¹¹ -> f¹²⁴(h⁹⁵, foldr_lh_₆(f¹²⁴, i¹¹¹, t⁹⁹))))
//│ 		in let h⁹⁶ = look_for_lh_₃('(')
//│ 		in (fun f¹²⁵ -> (fun i¹¹² -> f¹²⁵(h⁹⁶, foldr_lh_₆(f¹²⁵, i¹¹², t⁹⁸))))
//│ 	in let h⁹⁷ = p_ident_lh_₁
//│ 	in (fun f¹²⁶ -> (fun i¹¹³ -> f¹²⁶(h⁹⁷, foldr_lh_₆(f¹²⁶, i¹¹³, t⁹⁷))))), p_prim_lh_₁, _lh_p_term_arg1¹¹)
//│ def p_term_lh_₁₀(_lh_p_term_arg1⁶) = orElseMap_lh_₁₅(seQ_lh_₁₃(q_func_lh_₆, 
//│ 	let t⁵⁴ = 	
//│ 		let t⁵⁵ = 	
//│ 			let t⁵⁶ = 	
//│ 				let t⁵⁷ = (fun f⁶⁹ -> (fun i⁶³ -> i⁶³))
//│ 				in let h⁵¹ = look_for_lh_₁₉(')')
//│ 				in (fun f⁷⁰ -> (fun i⁶⁴ -> f⁷⁰(h⁵¹, foldr_lh_₆(f⁷⁰, i⁶⁴, t⁵⁷))))
//│ 			in let h⁵² = list_of_lh_₆(p_expr_lh_₄, ',')
//│ 			in (fun f⁷¹ -> (fun i⁶⁵ -> f⁷¹(h⁵², foldr_lh_₆(f⁷¹, i⁶⁵, t⁵⁶))))
//│ 		in let h⁵³ = look_for_lh_₁₉('(')
//│ 		in (fun f⁷² -> (fun i⁶⁶ -> f⁷²(h⁵³, foldr_lh_₆(f⁷², i⁶⁶, t⁵⁵))))
//│ 	in let h⁵⁴ = p_ident_lh_₆
//│ 	in (fun f⁷³ -> (fun i⁶⁷ -> f⁷³(h⁵⁴, foldr_lh_₆(f⁷³, i⁶⁷, t⁵⁴))))), p_prim_lh_₆, _lh_p_term_arg1⁶)
//│ def p_term_lh_₁₁(_lh_p_term_arg1⁴) = orElseMap_lh_₁₅(seQ_lh_₁₃(q_func_lh_₆, 
//│ 	let t³⁷ = 	
//│ 		let t³⁸ = 	
//│ 			let t³⁹ = 	
//│ 				let t⁴⁰ = (fun f⁴⁸ -> (fun i⁴² -> i⁴²))
//│ 				in let h³⁵ = look_for_lh_₁₉(')')
//│ 				in (fun f⁴⁹ -> (fun i⁴³ -> f⁴⁹(h³⁵, foldr_lh_₆(f⁴⁹, i⁴³, t⁴⁰))))
//│ 			in let h³⁶ = list_of_lh_₆(p_expr_lh_₄, ',')
//│ 			in (fun f⁵⁰ -> (fun i⁴⁴ -> f⁵⁰(h³⁶, foldr_lh_₆(f⁵⁰, i⁴⁴, t³⁹))))
//│ 		in let h³⁷ = look_for_lh_₁₉('(')
//│ 		in (fun f⁵¹ -> (fun i⁴⁵ -> f⁵¹(h³⁷, foldr_lh_₆(f⁵¹, i⁴⁵, t³⁸))))
//│ 	in let h³⁸ = p_ident_lh_₆
//│ 	in (fun f⁵² -> (fun i⁴⁶ -> f⁵²(h³⁸, foldr_lh_₆(f⁵², i⁴⁶, t³⁷))))), p_prim_lh_₆, _lh_p_term_arg1⁴)
//│ def p_term_lh_₁₂(_lh_p_term_arg1⁵) = orElseMap_lh_₁₅(seQ_lh_₁₃(q_func_lh_₆, 
//│ 	let t⁴⁷ = 	
//│ 		let t⁴⁸ = 	
//│ 			let t⁴⁹ = 	
//│ 				let t⁵⁰ = (fun f⁶⁰ -> (fun i⁵⁴ -> i⁵⁴))
//│ 				in let h⁴⁴ = look_for_lh_₁₉(')')
//│ 				in (fun f⁶¹ -> (fun i⁵⁵ -> f⁶¹(h⁴⁴, foldr_lh_₆(f⁶¹, i⁵⁵, t⁵⁰))))
//│ 			in let h⁴⁵ = list_of_lh_₆(p_expr_lh_₄, ',')
//│ 			in (fun f⁶² -> (fun i⁵⁶ -> f⁶²(h⁴⁵, foldr_lh_₆(f⁶², i⁵⁶, t⁴⁹))))
//│ 		in let h⁴⁶ = look_for_lh_₁₉('(')
//│ 		in (fun f⁶³ -> (fun i⁵⁷ -> f⁶³(h⁴⁶, foldr_lh_₆(f⁶³, i⁵⁷, t⁴⁸))))
//│ 	in let h⁴⁷ = p_ident_lh_₆
//│ 	in (fun f⁶⁴ -> (fun i⁵⁸ -> f⁶⁴(h⁴⁷, foldr_lh_₆(f⁶⁴, i⁵⁸, t⁴⁷))))), p_prim_lh_₆, _lh_p_term_arg1⁵)
//│ def p_term_lh_₂(_lh_p_term_arg1¹) = orElseMap_lh_₅(seQ_lh_₅(q_func_lh_₂, 
//│ 	let t⁴ = 	
//│ 		let t⁵ = 	
//│ 			let t⁶ = 	
//│ 				let t⁷ = (fun f⁵ -> (fun i⁵ -> i⁵))
//│ 				in let h⁴ = look_for_lh_₄(')')
//│ 				in (fun f⁶ -> (fun i⁶ -> f⁶(h⁴, foldr_lh_₆(f⁶, i⁶, t⁷))))
//│ 			in let h⁵ = list_of_lh_₂(p_expr_lh_₁, ',')
//│ 			in (fun f⁷ -> (fun i⁷ -> f⁷(h⁵, foldr_lh_₆(f⁷, i⁷, t⁶))))
//│ 		in let h⁶ = look_for_lh_₅('(')
//│ 		in (fun f⁸ -> (fun i⁸ -> f⁸(h⁶, foldr_lh_₆(f⁸, i⁸, t⁵))))
//│ 	in let h⁷ = p_ident_lh_₂
//│ 	in (fun f⁹ -> (fun i⁹ -> f⁹(h⁷, foldr_lh_₆(f⁹, i⁹, t⁴))))), p_prim_lh_₂, _lh_p_term_arg1¹)
//│ def p_term_lh_₃(_lh_p_term_arg1⁰) = orElseMap_lh_₆(seQ_lh_₆(q_func_lh_₃, 
//│ 	let t⁰ = 	
//│ 		let t¹ = 	
//│ 			let t² = 	
//│ 				let t³ = (fun f⁰ -> (fun i⁰ -> i⁰))
//│ 				in let h⁰ = look_for_lh_₆(')')
//│ 				in (fun f¹ -> (fun i¹ -> f¹(h⁰, foldr_lh_₆(f¹, i¹, t³))))
//│ 			in let h¹ = list_of_lh_₃(p_expr_lh_₁, ',')
//│ 			in (fun f² -> (fun i² -> f²(h¹, foldr_lh_₆(f², i², t²))))
//│ 		in let h² = look_for_lh_₇('(')
//│ 		in (fun f³ -> (fun i³ -> f³(h², foldr_lh_₆(f³, i³, t¹))))
//│ 	in let h³ = p_ident_lh_₃
//│ 	in (fun f⁴ -> (fun i⁴ -> f⁴(h³, foldr_lh_₆(f⁴, i⁴, t⁰))))), p_prim_lh_₃, _lh_p_term_arg1⁰)
//│ def p_term_lh_₄(_lh_p_term_arg1⁷) = orElseMap_lh_₇(seQ_lh_₇(q_func_lh_₄, 
//│ 	let t⁶³ = 	
//│ 		let t⁶⁴ = 	
//│ 			let t⁶⁵ = 	
//│ 				let t⁶⁶ = (fun f⁷⁹ -> (fun i⁷² -> i⁷²))
//│ 				in let h⁶⁰ = look_for_lh_₉(')')
//│ 				in (fun f⁸⁰ -> (fun i⁷³ -> f⁸⁰(h⁶⁰, foldr_lh_₆(f⁸⁰, i⁷³, t⁶⁶))))
//│ 			in let h⁶¹ = list_of_lh_₄(p_expr_lh_₂, ',')
//│ 			in (fun f⁸¹ -> (fun i⁷⁴ -> f⁸¹(h⁶¹, foldr_lh_₆(f⁸¹, i⁷⁴, t⁶⁵))))
//│ 		in let h⁶² = look_for_lh_₈('(')
//│ 		in (fun f⁸² -> (fun i⁷⁵ -> f⁸²(h⁶², foldr_lh_₆(f⁸², i⁷⁵, t⁶⁴))))
//│ 	in let h⁶³ = p_ident_lh_₄
//│ 	in (fun f⁸³ -> (fun i⁷⁶ -> f⁸³(h⁶³, foldr_lh_₆(f⁸³, i⁷⁶, t⁶³))))), p_prim_lh_₄, _lh_p_term_arg1⁷)
//│ def p_term_lh_₅(_lh_p_term_arg1⁸) = orElseMap_lh_₈(seQ_lh_₈(q_func_lh_₅, 
//│ 	let t⁷³ = 	
//│ 		let t⁷⁴ = 	
//│ 			let t⁷⁵ = 	
//│ 				let t⁷⁶ = (fun f⁹³ -> (fun i⁸⁴ -> i⁸⁴))
//│ 				in let h⁷⁰ = look_for_lh_₁₁(')')
//│ 				in (fun f⁹⁴ -> (fun i⁸⁵ -> f⁹⁴(h⁷⁰, foldr_lh_₆(f⁹⁴, i⁸⁵, t⁷⁶))))
//│ 			in let h⁷¹ = list_of_lh_₅(p_expr_lh_₂, ',')
//│ 			in (fun f⁹⁵ -> (fun i⁸⁶ -> f⁹⁵(h⁷¹, foldr_lh_₆(f⁹⁵, i⁸⁶, t⁷⁵))))
//│ 		in let h⁷² = look_for_lh_₁₀('(')
//│ 		in (fun f⁹⁶ -> (fun i⁸⁷ -> f⁹⁶(h⁷², foldr_lh_₆(f⁹⁶, i⁸⁷, t⁷⁴))))
//│ 	in let h⁷³ = p_ident_lh_₅
//│ 	in (fun f⁹⁷ -> (fun i⁸⁸ -> f⁹⁷(h⁷³, foldr_lh_₆(f⁹⁷, i⁸⁸, t⁷³))))), p_prim_lh_₅, _lh_p_term_arg1⁸)
//│ def p_term_lh_₆(_lh_p_term_arg1²) = orElseMap_lh_₉(seQ_lh_₉(q_func_lh_₆, 
//│ 	let t¹³ = 	
//│ 		let t¹⁴ = 	
//│ 			let t¹⁵ = 	
//│ 				let t¹⁶ = (fun f¹⁶ -> (fun i¹⁵ -> i¹⁵))
//│ 				in let h¹¹ = look_for_lh_₁₃(')')
//│ 				in (fun f¹⁷ -> (fun i¹⁶ -> f¹⁷(h¹¹, foldr_lh_₆(f¹⁷, i¹⁶, t¹⁶))))
//│ 			in let h¹² = list_of_lh_₆(p_expr_lh_₂, ',')
//│ 			in (fun f¹⁸ -> (fun i¹⁷ -> f¹⁸(h¹², foldr_lh_₆(f¹⁸, i¹⁷, t¹⁵))))
//│ 		in let h¹³ = look_for_lh_₁₂('(')
//│ 		in (fun f¹⁹ -> (fun i¹⁸ -> f¹⁹(h¹³, foldr_lh_₆(f¹⁹, i¹⁸, t¹⁴))))
//│ 	in let h¹⁴ = p_ident_lh_₆
//│ 	in (fun f²⁰ -> (fun i¹⁹ -> f²⁰(h¹⁴, foldr_lh_₆(f²⁰, i¹⁹, t¹³))))), p_prim_lh_₆, _lh_p_term_arg1²)
//│ def p_term_lh_₇(_lh_p_term_arg1³) = orElseMap_lh_₁₅(seQ_lh_₁₃(q_func_lh_₆, 
//│ 	let t²¹ = 	
//│ 		let t²² = 	
//│ 			let t²³ = 	
//│ 				let t²⁴ = (fun f²⁷ -> (fun i²⁵ -> i²⁵))
//│ 				in let h¹⁹ = look_for_lh_₁₉(')')
//│ 				in (fun f²⁸ -> (fun i²⁶ -> f²⁸(h¹⁹, foldr_lh_₆(f²⁸, i²⁶, t²⁴))))
//│ 			in let h²⁰ = list_of_lh_₆(p_expr_lh_₃, ',')
//│ 			in (fun f²⁹ -> (fun i²⁷ -> f²⁹(h²⁰, foldr_lh_₆(f²⁹, i²⁷, t²³))))
//│ 		in let h²¹ = look_for_lh_₁₉('(')
//│ 		in (fun f³⁰ -> (fun i²⁸ -> f³⁰(h²¹, foldr_lh_₆(f³⁰, i²⁸, t²²))))
//│ 	in let h²² = p_ident_lh_₆
//│ 	in (fun f³¹ -> (fun i²⁹ -> f³¹(h²², foldr_lh_₆(f³¹, i²⁹, t²¹))))), p_prim_lh_₆, _lh_p_term_arg1³)
//│ def p_term_lh_₈(_lh_p_term_arg1⁹) = orElseMap_lh_₁₅(seQ_lh_₁₃(q_func_lh_₆, 
//│ 	let t⁸⁰ = 	
//│ 		let t⁸¹ = 	
//│ 			let t⁸² = 	
//│ 				let t⁸³ = (fun f¹⁰² -> (fun i⁹³ -> i⁹³))
//│ 				in let h⁷⁷ = look_for_lh_₁₉(')')
//│ 				in (fun f¹⁰³ -> (fun i⁹⁴ -> f¹⁰³(h⁷⁷, foldr_lh_₆(f¹⁰³, i⁹⁴, t⁸³))))
//│ 			in let h⁷⁸ = list_of_lh_₆(p_expr_lh_₃, ',')
//│ 			in (fun f¹⁰⁴ -> (fun i⁹⁵ -> f¹⁰⁴(h⁷⁸, foldr_lh_₆(f¹⁰⁴, i⁹⁵, t⁸²))))
//│ 		in let h⁷⁹ = look_for_lh_₁₉('(')
//│ 		in (fun f¹⁰⁵ -> (fun i⁹⁶ -> f¹⁰⁵(h⁷⁹, foldr_lh_₆(f¹⁰⁵, i⁹⁶, t⁸¹))))
//│ 	in let h⁸⁰ = p_ident_lh_₆
//│ 	in (fun f¹⁰⁶ -> (fun i⁹⁷ -> f¹⁰⁶(h⁸⁰, foldr_lh_₆(f¹⁰⁶, i⁹⁷, t⁸⁰))))), p_prim_lh_₆, _lh_p_term_arg1⁹)
//│ def p_term_lh_₉(_lh_p_term_arg1¹⁰) = orElseMap_lh_₁₅(seQ_lh_₁₃(q_func_lh_₆, 
//│ 	let t⁹³ = 	
//│ 		let t⁹⁴ = 	
//│ 			let t⁹⁵ = 	
//│ 				let t⁹⁶ = (fun f¹¹⁷ -> (fun i¹⁰⁴ -> i¹⁰⁴))
//│ 				in let h⁹⁰ = look_for_lh_₁₉(')')
//│ 				in (fun f¹¹⁸ -> (fun i¹⁰⁵ -> f¹¹⁸(h⁹⁰, foldr_lh_₆(f¹¹⁸, i¹⁰⁵, t⁹⁶))))
//│ 			in let h⁹¹ = list_of_lh_₆(p_expr_lh_₃, ',')
//│ 			in (fun f¹¹⁹ -> (fun i¹⁰⁶ -> f¹¹⁹(h⁹¹, foldr_lh_₆(f¹¹⁹, i¹⁰⁶, t⁹⁵))))
//│ 		in let h⁹² = look_for_lh_₁₉('(')
//│ 		in (fun f¹²⁰ -> (fun i¹⁰⁷ -> f¹²⁰(h⁹², foldr_lh_₆(f¹²⁰, i¹⁰⁷, t⁹⁴))))
//│ 	in let h⁹³ = p_ident_lh_₆
//│ 	in (fun f¹²¹ -> (fun i¹⁰⁸ -> f¹²¹(h⁹³, foldr_lh_₆(f¹²¹, i¹⁰⁸, t⁹³))))), p_prim_lh_₆, _lh_p_term_arg1¹⁰)
//│ def pair_lh_₁(_lh_pair_arg1⁰, _lh_pair_arg2⁰) = [LH_P2 _lh_pair_arg1⁰ _lh_pair_arg2⁰]
//│ def parse_eqn_lh_₁(_lh_parse_eqn_arg1⁰) = 
//│ 	let _lh_matchIdent¹⁵ = fst_lh_₃(the_lh_₃(p_eqn_lh_₁(_lh_parse_eqn_arg1⁰)))
//│ 	in case _lh_matchIdent¹⁵ of {
//│ 		List _lh_parse_eqn_List_0⁰ => case _lh_parse_eqn_List_0⁰ of {
//│ 			LH_C _lh_parse_eqn_LH_C_0⁰ _lh_parse_eqn_LH_C_1⁰ => case _lh_parse_eqn_LH_C_0⁰ of {
//│ 				Expr _lh_parse_eqn_Expr_0⁰ => case _lh_parse_eqn_LH_C_1⁰ of {
//│ 					LH_C _lh_parse_eqn_LH_C_0¹ _lh_parse_eqn_LH_C_1¹ => case _lh_parse_eqn_LH_C_0¹ of {
//│ 						Expr _lh_parse_eqn_Expr_0¹ => case _lh_parse_eqn_LH_C_1¹ of {
//│ 							LH_N  => [LH_P2 _lh_parse_eqn_Expr_0⁰ _lh_parse_eqn_Expr_0¹]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ def parse_lh_₁(_lh_parse_arg1¹) = (fun _lh_funcomp_x²⁰ -> (fun _lh_funcomp_x²¹ -> (fun _lh_funcomp_x²² -> unExpr_lh_₁(fst_lh_₁(_lh_funcomp_x²²)))(the_lh_₁(_lh_funcomp_x²¹)))(p_expr_lh_₁(_lh_funcomp_x²⁰)))(_lh_parse_arg1¹)
//│ def parse_lh_₂(_lh_parse_arg1⁰) = (fun _lh_funcomp_x¹⁴ -> (fun _lh_funcomp_x¹⁵ -> (fun _lh_funcomp_x¹⁶ -> unExpr_lh_₂(fst_lh_₂(_lh_funcomp_x¹⁶)))(the_lh_₂(_lh_funcomp_x¹⁵)))(p_expr_lh_₂(_lh_funcomp_x¹⁴)))(_lh_parse_arg1⁰)
//│ def pchar_lh_₁(_lh_pchar_arg1³, _lh_pchar_arg2³) = case _lh_pchar_arg2³ of {
//│ 	LH_N  => croak_lh_₁
//│ 	| LH_C _lh_pchar_LH_C_0³ _lh_pchar_LH_C_1³ => if _lh_pchar_arg1³(_lh_pchar_LH_C_0³) then succeed_lh_₁([LH_P2 [MkString [LH_C _lh_pchar_LH_C_0³ [LH_N]]] _lh_pchar_LH_C_1³]) else croak_lh_₁}
//│ def pchar_lh_₂(_lh_pchar_arg1², _lh_pchar_arg2²) = case _lh_pchar_arg2² of {
//│ 	LH_N  => croak_lh_₁
//│ 	| LH_C _lh_pchar_LH_C_0² _lh_pchar_LH_C_1² => if _lh_pchar_arg1²(_lh_pchar_LH_C_0²) then succeed_lh_₁([LH_P2 [MkString [LH_C _lh_pchar_LH_C_0² [LH_N]]] _lh_pchar_LH_C_1²]) else croak_lh_₁}
//│ def pchar_lh_₃(_lh_pchar_arg1⁰, _lh_pchar_arg2⁰) = case _lh_pchar_arg2⁰ of {
//│ 	LH_N  => croak_lh_₁
//│ 	| LH_C _lh_pchar_LH_C_0⁰ _lh_pchar_LH_C_1⁰ => if _lh_pchar_arg1⁰(_lh_pchar_LH_C_0⁰) then succeed_lh_₁([LH_P2 [MkString [LH_C _lh_pchar_LH_C_0⁰ [LH_N]]] _lh_pchar_LH_C_1⁰]) else croak_lh_₁}
//│ def pchar_lh_₄(_lh_pchar_arg1¹, _lh_pchar_arg2¹) = case _lh_pchar_arg2¹ of {
//│ 	LH_N  => croak_lh_₁
//│ 	| LH_C _lh_pchar_LH_C_0¹ _lh_pchar_LH_C_1¹ => if _lh_pchar_arg1¹(_lh_pchar_LH_C_0¹) then succeed_lh_₁([LH_P2 [MkString [LH_C _lh_pchar_LH_C_0¹ [LH_N]]] _lh_pchar_LH_C_1¹]) else croak_lh_₁}
//│ def preorder_lh_₁(_lh_preorder_arg1⁰) = if eqListExpr_lh_₁(_lh_preorder_arg1⁰, [LH_N]) then [LH_N] else mappend_lh_₂([LH_C g_first_lh_₁(_lh_preorder_arg1⁰) [LH_N]], preorder_lh_₁(g_rest_lh_₁(_lh_preorder_arg1⁰)))
//│ def preprocess_lh_₁(_lh_preprocess_arg1⁰, _lh_preprocess_arg2⁰, _lh_floatOutId_0³, _lh_floatOutId_1¹, _lh_floatOutId_2⁰, _lh_floatOutId_3⁰, _lh_floatOutId_4⁰) = case _lh_preprocess_arg2⁰ of {
//│ 	LH_P2 _lh_preprocess_LH_P2_0⁰ _lh_preprocess_LH_P2_1⁰ => 
//│ 		let _lh_process1_LH_P2_1⁰ = simplify_lh_₁(super_reduce_lh_₁(_lh_preprocess_arg1⁰), _lh_preprocess_LH_P2_1⁰)
//│ 		in let _lh_process1_LH_P2_0⁰ = simplify_lh_₁(super_reduce_lh_₁(_lh_preprocess_arg1⁰), _lh_preprocess_LH_P2_0⁰)
//│ 		in let o⁰ = fst_lh_₃(_lh_floatOutId_0³, [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰])
//│ 		in let _lh_matchIdent⁶ = o⁰
//│ 		in case _lh_matchIdent⁶ of {
//│ 			Unrelated  => process_lh_₁(_lh_floatOutId_0³, _lh_floatOutId_1¹, _lh_floatOutId_2⁰, _lh_floatOutId_3⁰, add_agenda_lh_₁((fun dum² -> 1000), [LH_C [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰] [LH_N]], _lh_floatOutId_4⁰))
//│ 			| Equal  => process_lh_₁(_lh_floatOutId_0³, _lh_floatOutId_1¹, _lh_floatOutId_2⁰, _lh_floatOutId_3⁰, _lh_floatOutId_4⁰)
//│ 			| _  => 
//│ 				let eqn⁰ = 	
//│ 					let _lh_matchIdent⁷ = o⁰
//│ 					in case _lh_matchIdent⁷ of {
//│ 						Greater  => [Eqn _lh_floatOutId_1¹ [LH_P2 _lh_process1_LH_P2_0⁰ _lh_process1_LH_P2_1⁰]]
//│ 						| Less  => [Eqn _lh_floatOutId_1¹ [LH_P2 _lh_process1_LH_P2_1⁰ _lh_process1_LH_P2_0⁰]]}
//│ 				in process2_lh_₁(_lh_floatOutId_0³, (_lh_floatOutId_1¹ + 1), _lh_floatOutId_2⁰, _lh_floatOutId_3⁰, _lh_floatOutId_4⁰, eqn⁰)}}
//│ def process1_lh_₁(_lh_process1_arg1⁰, _lh_process1_arg2⁰, _lh_process1_arg3⁰, _lh_process1_arg4⁰, _lh_process1_arg5⁰, _lh_process1_arg6⁰) = _lh_process1_arg6⁰(_lh_process1_arg1⁰, _lh_process1_arg2⁰, _lh_process1_arg3⁰, _lh_process1_arg4⁰, _lh_process1_arg5⁰)
//│ def process2_lh_₁(_lh_process2_arg1⁰, _lh_process2_arg2⁰, _lh_process2_arg3⁰, _lh_process2_arg4⁰, _lh_process2_arg5⁰, _lh_process2_arg6⁰) = 
//│ 	let _lh_matchIdent⁹ = split_lh_₁(reducible_lh_₁(reduce1_lh_₁(_lh_process2_arg6⁰)), _lh_process2_arg3⁰)
//│ 	in _lh_matchIdent⁹(_lh_process2_arg1⁰, _lh_process2_arg2⁰, _lh_process2_arg4⁰, _lh_process2_arg5⁰, _lh_process2_arg6⁰)
//│ def process_lh_₁(_lh_process_arg1⁰, _lh_process_arg2⁰, _lh_process_arg3⁰, _lh_process_arg4⁰, _lh_process_arg5⁰) = case _lh_process_arg5⁰ of {
//│ 	LH_N  => _lh_process_arg4⁰
//│ 	| LH_C _lh_process_LH_C_0⁰ _lh_process_LH_C_1⁰ => case _lh_process_LH_C_0⁰ of {
//│ 		Item _lh_process_Item_0⁰ _lh_process_Item_1⁰ => process1_lh_₁(_lh_process_arg1⁰, _lh_process_arg2⁰, _lh_process_arg3⁰, _lh_process_arg4⁰, _lh_process_LH_C_1⁰, preprocess_lh_₁(_lh_process_arg4⁰, _lh_process_Item_1⁰))}}
//│ def prop2_lh_₁(_lh_prop2_arg1⁰, _lh_prop2_arg2⁰, _lh_prop2_arg3⁰) = case _lh_prop2_arg2⁰ of {
//│ 	Nothing  => [Nothing]
//│ 	| Just _lh_prop2_Just_0⁰ => _lh_prop2_arg1⁰(_lh_prop2_Just_0⁰, _lh_prop2_arg3⁰)}
//│ def prop_fold_lh_₁(_lh_prop_fold_arg1⁰, _lh_prop_fold_arg2⁰, _lh_prop_fold_arg3⁰) = case _lh_prop_fold_arg3⁰ of {
//│ 	LH_N  => [Just _lh_prop_fold_arg2⁰]
//│ 	| LH_C _lh_prop_fold_LH_C_0⁰ _lh_prop_fold_LH_C_1⁰ => prop2_lh_₁(prop_fold_lh_₁(_lh_prop_fold_arg1⁰), _lh_prop_fold_arg1⁰(_lh_prop_fold_arg2⁰, _lh_prop_fold_LH_C_0⁰), _lh_prop_fold_LH_C_1⁰)}
//│ def q_eqn_lh_₁(_lh_q_eqn_arg1⁰) = case _lh_q_eqn_arg1⁰ of {
//│ 	LH_C _lh_q_eqn_LH_C_0⁰ _lh_q_eqn_LH_C_1⁰ => case _lh_q_eqn_LH_C_1⁰ of {
//│ 		LH_C _lh_q_eqn_LH_C_0¹ _lh_q_eqn_LH_C_1¹ => case _lh_q_eqn_LH_C_1¹ of {
//│ 			LH_C _lh_q_eqn_LH_C_0² _lh_q_eqn_LH_C_1² => case _lh_q_eqn_LH_C_1² of {
//│ 				LH_N  => [List [LH_C _lh_q_eqn_LH_C_0⁰ [LH_C _lh_q_eqn_LH_C_0² [LH_N]]]]
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_func_lh_₁(_lh_q_func_arg1¹) = case _lh_q_func_arg1¹ of {
//│ 	LH_C _lh_q_func_LH_C_0⁴ _lh_q_func_LH_C_1⁴ => case _lh_q_func_LH_C_0⁴ of {
//│ 		MkString _lh_q_func_MkString_0¹ => case _lh_q_func_LH_C_1⁴ of {
//│ 			LH_C _lh_q_func_LH_C_0⁵ _lh_q_func_LH_C_1⁵ => case _lh_q_func_LH_C_1⁵ of {
//│ 				LH_C _lh_q_func_LH_C_0⁶ _lh_q_func_LH_C_1⁶ => case _lh_q_func_LH_C_0⁶ of {
//│ 					List _lh_q_func_List_0¹ => case _lh_q_func_LH_C_1⁶ of {
//│ 						LH_C _lh_q_func_LH_C_0⁷ _lh_q_func_LH_C_1⁷ => case _lh_q_func_LH_C_1⁷ of {
//│ 							LH_N  => [Expr [Func _lh_q_func_MkString_0¹ map_lh_₇(unExpr_lh_₃, _lh_q_func_List_0¹)]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_func_lh_₂(_lh_q_func_arg1⁰) = case _lh_q_func_arg1⁰ of {
//│ 	LH_C _lh_q_func_LH_C_0⁰ _lh_q_func_LH_C_1⁰ => case _lh_q_func_LH_C_0⁰ of {
//│ 		MkString _lh_q_func_MkString_0⁰ => case _lh_q_func_LH_C_1⁰ of {
//│ 			LH_C _lh_q_func_LH_C_0¹ _lh_q_func_LH_C_1¹ => case _lh_q_func_LH_C_1¹ of {
//│ 				LH_C _lh_q_func_LH_C_0² _lh_q_func_LH_C_1² => case _lh_q_func_LH_C_0² of {
//│ 					List _lh_q_func_List_0⁰ => case _lh_q_func_LH_C_1² of {
//│ 						LH_C _lh_q_func_LH_C_0³ _lh_q_func_LH_C_1³ => case _lh_q_func_LH_C_1³ of {
//│ 							LH_N  => [Expr [Func _lh_q_func_MkString_0⁰ map_lh_₇(unExpr_lh_₃, _lh_q_func_List_0⁰)]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_func_lh_₃(_lh_q_func_arg1⁴) = case _lh_q_func_arg1⁴ of {
//│ 	LH_C _lh_q_func_LH_C_0¹⁶ _lh_q_func_LH_C_1¹⁶ => case _lh_q_func_LH_C_0¹⁶ of {
//│ 		MkString _lh_q_func_MkString_0⁴ => case _lh_q_func_LH_C_1¹⁶ of {
//│ 			LH_C _lh_q_func_LH_C_0¹⁷ _lh_q_func_LH_C_1¹⁷ => case _lh_q_func_LH_C_1¹⁷ of {
//│ 				LH_C _lh_q_func_LH_C_0¹⁸ _lh_q_func_LH_C_1¹⁸ => case _lh_q_func_LH_C_0¹⁸ of {
//│ 					List _lh_q_func_List_0⁴ => case _lh_q_func_LH_C_1¹⁸ of {
//│ 						LH_C _lh_q_func_LH_C_0¹⁹ _lh_q_func_LH_C_1¹⁹ => case _lh_q_func_LH_C_1¹⁹ of {
//│ 							LH_N  => [Expr [Func _lh_q_func_MkString_0⁴ map_lh_₇(unExpr_lh_₃, _lh_q_func_List_0⁴)]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_func_lh_₄(_lh_q_func_arg1⁵) = case _lh_q_func_arg1⁵ of {
//│ 	LH_C _lh_q_func_LH_C_0²⁰ _lh_q_func_LH_C_1²⁰ => case _lh_q_func_LH_C_0²⁰ of {
//│ 		MkString _lh_q_func_MkString_0⁵ => case _lh_q_func_LH_C_1²⁰ of {
//│ 			LH_C _lh_q_func_LH_C_0²¹ _lh_q_func_LH_C_1²¹ => case _lh_q_func_LH_C_1²¹ of {
//│ 				LH_C _lh_q_func_LH_C_0²² _lh_q_func_LH_C_1²² => case _lh_q_func_LH_C_0²² of {
//│ 					List _lh_q_func_List_0⁵ => case _lh_q_func_LH_C_1²² of {
//│ 						LH_C _lh_q_func_LH_C_0²³ _lh_q_func_LH_C_1²³ => case _lh_q_func_LH_C_1²³ of {
//│ 							LH_N  => [Expr [Func _lh_q_func_MkString_0⁵ map_lh_₇(unExpr_lh_₃, _lh_q_func_List_0⁵)]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_func_lh_₅(_lh_q_func_arg1³) = case _lh_q_func_arg1³ of {
//│ 	LH_C _lh_q_func_LH_C_0¹² _lh_q_func_LH_C_1¹² => case _lh_q_func_LH_C_0¹² of {
//│ 		MkString _lh_q_func_MkString_0³ => case _lh_q_func_LH_C_1¹² of {
//│ 			LH_C _lh_q_func_LH_C_0¹³ _lh_q_func_LH_C_1¹³ => case _lh_q_func_LH_C_1¹³ of {
//│ 				LH_C _lh_q_func_LH_C_0¹⁴ _lh_q_func_LH_C_1¹⁴ => case _lh_q_func_LH_C_0¹⁴ of {
//│ 					List _lh_q_func_List_0³ => case _lh_q_func_LH_C_1¹⁴ of {
//│ 						LH_C _lh_q_func_LH_C_0¹⁵ _lh_q_func_LH_C_1¹⁵ => case _lh_q_func_LH_C_1¹⁵ of {
//│ 							LH_N  => [Expr [Func _lh_q_func_MkString_0³ map_lh_₇(unExpr_lh_₃, _lh_q_func_List_0³)]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_func_lh_₆(_lh_q_func_arg1²) = case _lh_q_func_arg1² of {
//│ 	LH_C _lh_q_func_LH_C_0⁸ _lh_q_func_LH_C_1⁸ => case _lh_q_func_LH_C_0⁸ of {
//│ 		MkString _lh_q_func_MkString_0² => case _lh_q_func_LH_C_1⁸ of {
//│ 			LH_C _lh_q_func_LH_C_0⁹ _lh_q_func_LH_C_1⁹ => case _lh_q_func_LH_C_1⁹ of {
//│ 				LH_C _lh_q_func_LH_C_0¹⁰ _lh_q_func_LH_C_1¹⁰ => case _lh_q_func_LH_C_0¹⁰ of {
//│ 					List _lh_q_func_List_0² => case _lh_q_func_LH_C_1¹⁰ of {
//│ 						LH_C _lh_q_func_LH_C_0¹¹ _lh_q_func_LH_C_1¹¹ => case _lh_q_func_LH_C_1¹¹ of {
//│ 							LH_N  => [Expr [Func _lh_q_func_MkString_0² map_lh_₇(unExpr_lh_₃, _lh_q_func_List_0²)]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_name_lh_₁(_lh_q_name_arg1⁰) = case _lh_q_name_arg1⁰ of {
//│ 	MkString _lh_q_name_MkString_0⁰ => if ((int_of_char⁰(atIndex_lh_₂(0, _lh_q_name_MkString_0⁰)) >= int_of_char⁰('a')) && (int_of_char⁰(atIndex_lh_₂(0, _lh_q_name_MkString_0⁰)) <= int_of_char⁰('z'))) then [Expr [Var _lh_q_name_MkString_0⁰]] else [Expr [Func _lh_q_name_MkString_0⁰ [LH_N]]]
//│ 	| _  => error⁰}
//│ def q_op_lh_₁(_lh_q_op_arg1³) = case _lh_q_op_arg1³ of {
//│ 	LH_C _lh_q_op_LH_C_0⁹ _lh_q_op_LH_C_1⁹ => case _lh_q_op_LH_C_0⁹ of {
//│ 		Expr _lh_q_op_Expr_0⁶ => case _lh_q_op_LH_C_1⁹ of {
//│ 			LH_C _lh_q_op_LH_C_0¹⁰ _lh_q_op_LH_C_1¹⁰ => case _lh_q_op_LH_C_0¹⁰ of {
//│ 				MkString _lh_q_op_MkString_0³ => case _lh_q_op_LH_C_1¹⁰ of {
//│ 					LH_C _lh_q_op_LH_C_0¹¹ _lh_q_op_LH_C_1¹¹ => case _lh_q_op_LH_C_0¹¹ of {
//│ 						Expr _lh_q_op_Expr_0⁷ => case _lh_q_op_LH_C_1¹¹ of {
//│ 							LH_N  => [Expr [Func _lh_q_op_MkString_0³ [LH_C _lh_q_op_Expr_0⁶ [LH_C _lh_q_op_Expr_0⁷ [LH_N]]]]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_op_lh_₂(_lh_q_op_arg1⁰) = case _lh_q_op_arg1⁰ of {
//│ 	LH_C _lh_q_op_LH_C_0⁰ _lh_q_op_LH_C_1⁰ => case _lh_q_op_LH_C_0⁰ of {
//│ 		Expr _lh_q_op_Expr_0⁰ => case _lh_q_op_LH_C_1⁰ of {
//│ 			LH_C _lh_q_op_LH_C_0¹ _lh_q_op_LH_C_1¹ => case _lh_q_op_LH_C_0¹ of {
//│ 				MkString _lh_q_op_MkString_0⁰ => case _lh_q_op_LH_C_1¹ of {
//│ 					LH_C _lh_q_op_LH_C_0² _lh_q_op_LH_C_1² => case _lh_q_op_LH_C_0² of {
//│ 						Expr _lh_q_op_Expr_0¹ => case _lh_q_op_LH_C_1² of {
//│ 							LH_N  => [Expr [Func _lh_q_op_MkString_0⁰ [LH_C _lh_q_op_Expr_0⁰ [LH_C _lh_q_op_Expr_0¹ [LH_N]]]]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_op_lh_₃(_lh_q_op_arg1¹) = case _lh_q_op_arg1¹ of {
//│ 	LH_C _lh_q_op_LH_C_0³ _lh_q_op_LH_C_1³ => case _lh_q_op_LH_C_0³ of {
//│ 		Expr _lh_q_op_Expr_0² => case _lh_q_op_LH_C_1³ of {
//│ 			LH_C _lh_q_op_LH_C_0⁴ _lh_q_op_LH_C_1⁴ => case _lh_q_op_LH_C_0⁴ of {
//│ 				MkString _lh_q_op_MkString_0¹ => case _lh_q_op_LH_C_1⁴ of {
//│ 					LH_C _lh_q_op_LH_C_0⁵ _lh_q_op_LH_C_1⁵ => case _lh_q_op_LH_C_0⁵ of {
//│ 						Expr _lh_q_op_Expr_0³ => case _lh_q_op_LH_C_1⁵ of {
//│ 							LH_N  => [Expr [Func _lh_q_op_MkString_0¹ [LH_C _lh_q_op_Expr_0² [LH_C _lh_q_op_Expr_0³ [LH_N]]]]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def q_op_lh_₄(_lh_q_op_arg1²) = case _lh_q_op_arg1² of {
//│ 	LH_C _lh_q_op_LH_C_0⁶ _lh_q_op_LH_C_1⁶ => case _lh_q_op_LH_C_0⁶ of {
//│ 		Expr _lh_q_op_Expr_0⁴ => case _lh_q_op_LH_C_1⁶ of {
//│ 			LH_C _lh_q_op_LH_C_0⁷ _lh_q_op_LH_C_1⁷ => case _lh_q_op_LH_C_0⁷ of {
//│ 				MkString _lh_q_op_MkString_0² => case _lh_q_op_LH_C_1⁷ of {
//│ 					LH_C _lh_q_op_LH_C_0⁸ _lh_q_op_LH_C_1⁸ => case _lh_q_op_LH_C_0⁸ of {
//│ 						Expr _lh_q_op_Expr_0⁵ => case _lh_q_op_LH_C_1⁸ of {
//│ 							LH_N  => [Expr [Func _lh_q_op_MkString_0² [LH_C _lh_q_op_Expr_0⁴ [LH_C _lh_q_op_Expr_0⁵ [LH_N]]]]]
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def quant_lh_₁(_lh_quant_arg1³, _lh_quant_arg2³, _lh_quant_arg3³, _lh_quant_arg4³) = 
//│ 	let p³ = (fun x⁴⁹ -> _lh_quant_arg2³(x⁴⁹, _lh_quant_arg3³))
//│ 	in _lh_quant_arg1³(p³, _lh_quant_arg4³)
//│ def quant_lh_₂(_lh_quant_arg1¹, _lh_quant_arg2¹, _lh_quant_arg3¹, _lh_quant_arg4¹) = 
//│ 	let p¹ = (fun x²⁹ -> _lh_quant_arg2¹(x²⁹, _lh_quant_arg3¹))
//│ 	in _lh_quant_arg1¹(p¹, _lh_quant_arg4¹)
//│ def quant_lh_₃(_lh_quant_arg1⁶, _lh_quant_arg2⁶, _lh_quant_arg3⁶, _lh_quant_arg4⁶) = 
//│ 	let p⁶ = (fun x⁶⁶ -> _lh_quant_arg2⁶(x⁶⁶, _lh_quant_arg3⁶))
//│ 	in _lh_quant_arg1⁶(p⁶, _lh_quant_arg4⁶)
//│ def quant_lh_₄(_lh_quant_arg1⁷, _lh_quant_arg2⁷, _lh_quant_arg3⁷, _lh_quant_arg4⁷) = 
//│ 	let p⁷ = (fun x⁶⁸ -> _lh_quant_arg2⁷(x⁶⁸, _lh_quant_arg3⁷))
//│ 	in _lh_quant_arg1⁷(p⁷, _lh_quant_arg4⁷)
//│ def quant_lh_₅(_lh_quant_arg1⁰, _lh_quant_arg2⁰, _lh_quant_arg3⁰, _lh_quant_arg4⁰) = 
//│ 	let p⁰ = (fun x⁵ -> _lh_quant_arg2⁰(x⁵, _lh_quant_arg3⁰))
//│ 	in _lh_quant_arg1⁰(p⁰, _lh_quant_arg4⁰)
//│ def quant_lh_₆(_lh_quant_arg1⁴, _lh_quant_arg2⁴, _lh_quant_arg3⁴, _lh_quant_arg4⁴) = 
//│ 	let p⁴ = (fun x⁶⁰ -> _lh_quant_arg2⁴(x⁶⁰, _lh_quant_arg3⁴))
//│ 	in _lh_quant_arg1⁴(p⁴, _lh_quant_arg4⁴)
//│ def quant_lh_₇(_lh_quant_arg1², _lh_quant_arg2², _lh_quant_arg3², _lh_quant_arg4²) = 
//│ 	let p² = (fun x⁴⁰ -> _lh_quant_arg2²(x⁴⁰, _lh_quant_arg3²))
//│ 	in _lh_quant_arg1²(p², _lh_quant_arg4²)
//│ def quant_lh_₈(_lh_quant_arg1⁵, _lh_quant_arg2⁵, _lh_quant_arg3⁵, _lh_quant_arg4⁵) = 
//│ 	let p⁵ = (fun x⁶¹ -> _lh_quant_arg2⁵(x⁶¹, _lh_quant_arg3⁵))
//│ 	in _lh_quant_arg1⁵(p⁵, _lh_quant_arg4⁵)
//│ def rank_lh_₁(_lh_rank_arg1⁰) = case _lh_rank_arg1⁰ of {
//│ 	LH_C _lh_rank_LH_C_0⁰ _lh_rank_LH_C_1⁰ => case _lh_rank_LH_C_0⁰ of {
//│ 		'E'  => case _lh_rank_LH_C_1⁰ of {
//│ 			LH_N  => 1
//│ 			| _  => error⁰}
//│ 		| '*'  => case _lh_rank_LH_C_1⁰ of {
//│ 			LH_N  => 2
//│ 			| _  => error⁰}
//│ 		| 'I'  => case _lh_rank_LH_C_1⁰ of {
//│ 			LH_N  => 3
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def rank_order_lh_₁(_lh_rank_order_arg1⁰, _lh_rank_order_arg2⁰) = _lh_rank_order_arg2⁰(_lh_rank_order_arg1⁰)
//│ def reduce1_lh_₁(_lh_reduce1_arg1⁰) = inside_lh_₁(rewrite_lh_₁(_lh_reduce1_arg1⁰))
//│ def reducible_lh_₁(_lh_reducible_arg1⁰, _lh_reducible_arg2⁰) = case _lh_reducible_arg2⁰ of {
//│ 	Eqn _lh_reducible_Eqn_0⁰ _lh_reducible_Eqn_1⁰ => case _lh_reducible_Eqn_1⁰ of {
//│ 		LH_P2 _lh_reducible_LH_P2_0⁰ _lh_reducible_LH_P2_1⁰ => (exists_lh_₁(_lh_reducible_arg1⁰(_lh_reducible_LH_P2_0⁰)) || exists_lh_₁(_lh_reducible_arg1⁰(_lh_reducible_LH_P2_1⁰)))}}
//│ def replace_lh_₁(_lh_replace_arg1⁰, _lh_replace_arg2⁰, _lh_replace_arg3⁰) = case _lh_replace_arg2⁰ of {
//│ 	LH_N  => _lh_replace_arg3⁰
//│ 	| _  => case _lh_replace_arg1⁰ of {
//│ 		Func _lh_replace_Func_0⁰ _lh_replace_Func_1⁰ => case _lh_replace_arg2⁰ of {
//│ 			LH_C _lh_replace_LH_C_0⁰ _lh_replace_LH_C_1⁰ => [Func _lh_replace_Func_0⁰ modify_lh_₁(_lh_replace_Func_1⁰, _lh_replace_LH_C_0⁰, (fun t¹² -> replace_lh_₁(t¹², _lh_replace_LH_C_1⁰, _lh_replace_arg3⁰)))]
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}}
//│ def resolve_lh_₁(_lh_resolve_arg1⁰, _lh_resolve_arg2⁰) = 
//│ 	let lhs'⁰ = simplify_lh_₁(_lh_resolve_arg1⁰, fst_lh_₃(_lh_resolve_arg2⁰))
//│ 	in let rhs'⁰ = simplify_lh_₁(_lh_resolve_arg1⁰, snd_lh_₁(_lh_resolve_arg2⁰))
//│ 	in if eqExpr_lh_₁(lhs'⁰, rhs'⁰) then croak_lh_₁ else succeed_lh_₁([LH_P2 lhs'⁰ rhs'⁰])
//│ def result_lh_₁(_lh_result_arg1⁰) = _lh_result_arg1⁰([lh_Unit])
//│ def rewrite_lh_₁(_lh_rewrite_arg1⁰, _lh_floatOutId_0⁵) = case _lh_rewrite_arg1⁰ of {
//│ 	Eqn _lh_rewrite_Eqn_0⁰ _lh_rewrite_Eqn_1⁰ => case _lh_rewrite_Eqn_1⁰ of {
//│ 		LH_P2 _lh_rewrite_LH_P2_0⁰ _lh_rewrite_LH_P2_1⁰ => lift_lh_₃(sub_lh_₁(_lh_rewrite_LH_P2_1⁰), match_lh_₁(_lh_rewrite_LH_P2_0⁰, _lh_floatOutId_0⁵))}}
//│ def rpo_lh_₁(_lh_rpo_arg1⁰, _lh_rpo_arg2⁰) = 
//│ 	let rpo'⁰ = (fun param⁰ -> 
//│ 		let _lh_matchIdent¹⁰ = param⁰
//│ 		in case _lh_matchIdent¹⁰ of {
//│ 			LH_P2 _lh_rpo_LH_P2_0⁰ _lh_rpo_LH_P2_1⁰ => case _lh_rpo_LH_P2_0⁰ of {
//│ 				Var _lh_rpo_Var_0⁰ => case _lh_rpo_LH_P2_1⁰ of {
//│ 					Var _lh_rpo_Var_0¹ => if polyEq⁰(_lh_rpo_Var_0⁰, _lh_rpo_Var_0¹) then [Equal] else [Unrelated]
//│ 					| Func _lh_rpo_Func_0⁰ _lh_rpo_Func_1⁰ => if occurs_lh_₂(_lh_rpo_Var_0⁰, [Func _lh_rpo_Func_0⁰ _lh_rpo_Func_1⁰]) then [Less] else [Unrelated]
//│ 					| _  => error⁰([LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]])}
//│ 				| Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹ => case _lh_rpo_LH_P2_1⁰ of {
//│ 					Var _lh_rpo_Var_0² => if occurs_lh_₁(_lh_rpo_Var_0², [Func _lh_rpo_Func_0¹ _lh_rpo_Func_1¹]) then [Greater] else [Unrelated]
//│ 					| Func _lh_rpo_Func_0² _lh_rpo_Func_1² => 
//│ 						let _lh_matchIdent¹¹ = _lh_rpo_arg1⁰(
//│ 							let _lh_rank_order_LH_P2_1⁰ = _lh_rpo_Func_0²
//│ 							in let _lh_rank_order_LH_P2_0⁰ = _lh_rpo_Func_0¹
//│ 							in (fun _lh_rank_order_arg1¹ -> num_order_lh_₁(
//│ 								let _lh_num_order_LH_P2_1⁰ = _lh_rank_order_arg1¹(_lh_rank_order_LH_P2_1⁰)
//│ 								in let _lh_num_order_LH_P2_0⁰ = _lh_rank_order_arg1¹(_lh_rank_order_LH_P2_0⁰)
//│ 								in (fun _lh_dummy¹ -> if (_lh_num_order_LH_P2_0⁰ > _lh_num_order_LH_P2_1⁰) then (fun _lh_rpo_Func_0³ -> (fun _lh_rpo_Func_0⁴ -> (fun _lh_rpo_Func_1³ -> (fun _lh_rpo_Func_1⁴ -> (fun _lh_rpo_arg2¹ -> (fun rpo'¹ -> if quant_lh_₄(all_lh_₃, ltRewrite_lh_₂(rpo'¹), [Func _lh_rpo_Func_0⁴ _lh_rpo_Func_1⁴], _lh_rpo_Func_1³) then [Greater] else if quant_lh_₂(any_lh_₁, geRewrite_lh_₁(rpo'¹), [Func _lh_rpo_Func_0⁴ _lh_rpo_Func_1⁴], _lh_rpo_Func_1³) then [Less] else [Unrelated])))))) else if (_lh_num_order_LH_P2_0⁰ < _lh_num_order_LH_P2_1⁰) then (fun _lh_rpo_Func_0⁵ -> (fun _lh_rpo_Func_0⁶ -> (fun _lh_rpo_Func_1⁵ -> (fun _lh_rpo_Func_1⁶ -> (fun _lh_rpo_arg2² -> (fun rpo'² -> if quant_lh_₃(all_lh_₂, ltRewrite_lh_₁(rpo'²), [Func _lh_rpo_Func_0⁵ _lh_rpo_Func_1⁵], _lh_rpo_Func_1⁶) then [Less] else if quant_lh_₁(any_lh_₂, geRewrite_lh_₂(rpo'²), [Func _lh_rpo_Func_0⁵ _lh_rpo_Func_1⁵], _lh_rpo_Func_1⁶) then [Greater] else [Unrelated])))))) else (fun _lh_rpo_Func_0⁷ -> (fun _lh_rpo_Func_0⁸ -> (fun _lh_rpo_Func_1⁷ -> (fun _lh_rpo_Func_1⁸ -> (fun _lh_rpo_arg2³ -> (fun rpo'³ -> _lh_rpo_arg2³(rpo'³, 
//│ 									let _lh_lex_ext_LH_P2_1⁰ = 	
//│ 										let _lh_lex_ext_Func_1⁰ = _lh_rpo_Func_1⁷
//│ 										in let _lh_lex_ext_Func_0⁰ = _lh_rpo_Func_0⁷
//│ 										in (fun _lh_lex_ext_Func_0¹ -> (fun _lh_lex_ext_Func_1¹ -> (fun _lh_lex_ext_arg1¹ -> 
//│ 											let estimate⁰ = lexico_lh_₁(_lh_lex_ext_arg1¹, [LH_P2 _lh_lex_ext_Func_1¹ _lh_lex_ext_Func_1⁰])
//│ 											in let confirm⁰ = (fun x⁴⁶ -> 
//│ 												let _lh_matchIdent¹² = x⁴⁶
//│ 												in case _lh_matchIdent¹² of {
//│ 													Equal  => [True]
//│ 													| Greater  => quant_lh_₆(all_lh_₄, ltRewrite_lh_₃(_lh_lex_ext_arg1¹), [Func _lh_lex_ext_Func_0¹ _lh_lex_ext_Func_1¹], _lh_lex_ext_Func_1⁰)
//│ 													| Less  => quant_lh_₈(all_lh_₅, ltRewrite_lh_₄(_lh_lex_ext_arg1¹), [Func _lh_lex_ext_Func_0⁰ _lh_lex_ext_Func_1⁰], _lh_lex_ext_Func_1¹)
//│ 													| Unrelated  => [False]})
//│ 											in if confirm⁰(estimate⁰) then estimate⁰ else if quant_lh_₇(any_lh_₄, geRewrite_lh_₃(_lh_lex_ext_arg1¹), [Func _lh_lex_ext_Func_0⁰ _lh_lex_ext_Func_1⁰], _lh_lex_ext_Func_1¹) then [Greater] else if quant_lh_₅(any_lh_₃, geRewrite_lh_₄(_lh_lex_ext_arg1¹), [Func _lh_lex_ext_Func_0¹ _lh_lex_ext_Func_1¹], _lh_lex_ext_Func_1⁰) then [Less] else [Unrelated])))
//│ 									in let _lh_lex_ext_LH_P2_0⁰ = 	
//│ 										let _lh_lex_ext_Func_1² = _lh_rpo_Func_1⁸
//│ 										in let _lh_lex_ext_Func_0² = _lh_rpo_Func_0⁸
//│ 										in (fun _lh_lex_ext_LH_P2_1¹ -> (fun _lh_lex_ext_arg1² -> _lh_lex_ext_LH_P2_1¹(_lh_lex_ext_Func_0², _lh_lex_ext_Func_1², _lh_lex_ext_arg1²)))
//│ 									in (fun _lh_lex_ext_arg1³ -> _lh_lex_ext_LH_P2_0⁰(_lh_lex_ext_LH_P2_1⁰, _lh_lex_ext_arg1³)))))))))))))
//│ 						in _lh_matchIdent¹¹(_lh_rpo_Func_0², _lh_rpo_Func_0¹, _lh_rpo_Func_1², _lh_rpo_Func_1¹, _lh_rpo_arg2⁰, rpo'⁰)
//│ 					| _  => error⁰([LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]])}
//│ 				| _  => error⁰([LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]])}
//│ 			| _  => error⁰([LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]])})
//│ 	in rpo'⁰
//│ def seQ_lh_₁(_lh_seQ_arg1¹⁰, _lh_seQ_arg2¹⁰) = build_lh_₁(mk_list_lh_₁(_lh_seQ_arg1¹⁰), foldr_lh_₃(seq2_lh_₁(mk_cons_lh_₁), empty_lh_₁, _lh_seQ_arg2¹⁰))
//│ def seQ_lh_₁₀(_lh_seQ_arg1³, _lh_seQ_arg2³) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1³), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2³))
//│ def seQ_lh_₁₁(_lh_seQ_arg1¹, _lh_seQ_arg2¹) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1¹), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2¹))
//│ def seQ_lh_₁₂(_lh_seQ_arg1⁴, _lh_seQ_arg2⁴) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1⁴), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2⁴))
//│ def seQ_lh_₁₃(_lh_seQ_arg1⁷, _lh_seQ_arg2⁷) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1⁷), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2⁷))
//│ def seQ_lh_₂(_lh_seQ_arg1⁵, _lh_seQ_arg2⁵) = build_lh_₂(mk_list_lh_₂(_lh_seQ_arg1⁵), foldr_lh_₄(seq2_lh_₂(mk_cons_lh_₂), empty_lh_₂, _lh_seQ_arg2⁵))
//│ def seQ_lh_₃(_lh_seQ_arg1², _lh_seQ_arg2²) = build_lh_₃(mk_list_lh_₃(_lh_seQ_arg1²), foldr_lh_₅(seq2_lh_₃(mk_cons_lh_₃), empty_lh_₃, _lh_seQ_arg2²))
//│ def seQ_lh_₄(_lh_seQ_arg1⁸, _lh_seQ_arg2⁸) = build_lh_₄(mk_list_lh_₄(_lh_seQ_arg1⁸), foldr_lh_₆(seq2_lh_₄(mk_cons_lh_₄), empty_lh_₄, _lh_seQ_arg2⁸))
//│ def seQ_lh_₅(_lh_seQ_arg1¹¹, _lh_seQ_arg2¹¹) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1¹¹), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2¹¹))
//│ def seQ_lh_₆(_lh_seQ_arg1⁹, _lh_seQ_arg2⁹) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1⁹), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2⁹))
//│ def seQ_lh_₇(_lh_seQ_arg1⁰, _lh_seQ_arg2⁰) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1⁰), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2⁰))
//│ def seQ_lh_₈(_lh_seQ_arg1¹², _lh_seQ_arg2¹²) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1¹²), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2¹²))
//│ def seQ_lh_₉(_lh_seQ_arg1⁶, _lh_seQ_arg2⁶) = build_lh_₅(mk_list_lh_₅(_lh_seQ_arg1⁶), foldr_lh_₆(seq2_lh_₇(mk_cons_lh_₇), empty_lh_₆, _lh_seQ_arg2⁶))
//│ def seq2Lzq_lh_₁(_lh_seq2Lzq_arg1¹, _lh_seq2Lzq_arg2¹, _lh_seq2Lzq_arg3¹, _lh_funcomp_x³⁷) = 
//│ 	let g⁸ = (fun xs¹² -> 
//│ 		let _lh_matchIdent¹⁸ = xs¹²
//│ 		in case _lh_matchIdent¹⁸ of {
//│ 			LH_P2 _lh_seq2Lzq_LH_P2_0¹ _lh_seq2Lzq_LH_P2_1¹ => lift_lh_₆(cross_lh_₂(_lh_seq2Lzq_arg1¹(_lh_seq2Lzq_LH_P2_0¹), (fun x⁷⁰ -> x⁷⁰)), force⁰(_lh_seq2Lzq_arg3¹, _lh_seq2Lzq_LH_P2_1¹))})
//│ 	in (fun _lh_funcomp_x³⁸ -> squash_lh_₁(lift_lh_₆(g⁸, _lh_funcomp_x³⁸)))(_lh_seq2Lzq_arg2¹(_lh_funcomp_x³⁷))
//│ def seq2Lzq_lh_₂(_lh_seq2Lzq_arg1⁰, _lh_seq2Lzq_arg2⁰, _lh_seq2Lzq_arg3⁰, _lh_funcomp_x¹²) = 
//│ 	let g² = (fun xs⁴ -> 
//│ 		let _lh_matchIdent² = xs⁴
//│ 		in case _lh_matchIdent² of {
//│ 			LH_P2 _lh_seq2Lzq_LH_P2_0⁰ _lh_seq2Lzq_LH_P2_1⁰ => lift_lh_₆(cross_lh_₂(_lh_seq2Lzq_arg1⁰(_lh_seq2Lzq_LH_P2_0⁰), (fun x²¹ -> x²¹)), force⁰(_lh_seq2Lzq_arg3⁰, _lh_seq2Lzq_LH_P2_1⁰))})
//│ 	in (fun _lh_funcomp_x¹³ -> squash_lh_₁(lift_lh_₆(g², _lh_funcomp_x¹³)))(_lh_seq2Lzq_arg2⁰(_lh_funcomp_x¹²))
//│ def seq2_lh_₁(_lh_seq2_arg1³, _lh_seq2_arg2³, _lh_seq2_arg3³, _lh_funcomp_x²⁵) = 
//│ 	let g⁴ = (fun xs⁷ -> 
//│ 		let _lh_matchIdent⁵ = xs⁷
//│ 		in case _lh_matchIdent⁵ of {
//│ 			LH_P2 _lh_seq2_LH_P2_0³ _lh_seq2_LH_P2_1³ => lift_lh_₅(cross_lh_₁(_lh_seq2_arg1³(_lh_seq2_LH_P2_0³), (fun x⁴¹ -> x⁴¹)), _lh_seq2_arg3³(_lh_seq2_LH_P2_1³))})
//│ 	in (fun _lh_funcomp_x²⁶ -> squash_lh_₁(lift_lh_₄(g⁴, _lh_funcomp_x²⁶)))(_lh_seq2_arg2³(_lh_funcomp_x²⁵))
//│ def seq2_lh_₂(_lh_seq2_arg1⁵, _lh_seq2_arg2⁵, _lh_seq2_arg3⁵, _lh_funcomp_x³⁰) = 
//│ 	let g⁶ = (fun xs⁹ -> 
//│ 		let _lh_matchIdent¹³ = xs⁹
//│ 		in case _lh_matchIdent¹³ of {
//│ 			LH_P2 _lh_seq2_LH_P2_0⁵ _lh_seq2_LH_P2_1⁵ => lift_lh_₆(cross_lh_₂(_lh_seq2_arg1⁵(_lh_seq2_LH_P2_0⁵), (fun x⁴⁸ -> x⁴⁸)), _lh_seq2_arg3⁵(_lh_seq2_LH_P2_1⁵))})
//│ 	in (fun _lh_funcomp_x³¹ -> squash_lh_₁(lift_lh_₆(g⁶, _lh_funcomp_x³¹)))(_lh_seq2_arg2⁵(_lh_funcomp_x³⁰))
//│ def seq2_lh_₃(_lh_seq2_arg1⁰, _lh_seq2_arg2⁰, _lh_seq2_arg3⁰, _lh_funcomp_x³) = 
//│ 	let g⁰ = (fun xs¹ -> 
//│ 		let _lh_matchIdent⁰ = xs¹
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_P2 _lh_seq2_LH_P2_0⁰ _lh_seq2_LH_P2_1⁰ => lift_lh_₆(cross_lh_₂(_lh_seq2_arg1⁰(_lh_seq2_LH_P2_0⁰), (fun x⁷ -> x⁷)), _lh_seq2_arg3⁰(_lh_seq2_LH_P2_1⁰))})
//│ 	in (fun _lh_funcomp_x⁴ -> squash_lh_₁(lift_lh_₆(g⁰, _lh_funcomp_x⁴)))(_lh_seq2_arg2⁰(_lh_funcomp_x³))
//│ def seq2_lh_₄(_lh_seq2_arg1¹, _lh_seq2_arg2¹, _lh_seq2_arg3¹, _lh_funcomp_x⁷) = 
//│ 	let g¹ = (fun xs³ -> 
//│ 		let _lh_matchIdent¹ = xs³
//│ 		in case _lh_matchIdent¹ of {
//│ 			LH_P2 _lh_seq2_LH_P2_0¹ _lh_seq2_LH_P2_1¹ => lift_lh_₆(cross_lh_₂(_lh_seq2_arg1¹(_lh_seq2_LH_P2_0¹), (fun x¹⁵ -> x¹⁵)), _lh_seq2_arg3¹(_lh_seq2_LH_P2_1¹))})
//│ 	in (fun _lh_funcomp_x⁸ -> squash_lh_₁(lift_lh_₆(g¹, _lh_funcomp_x⁸)))(_lh_seq2_arg2¹(_lh_funcomp_x⁷))
//│ def seq2_lh_₅(_lh_seq2_arg1⁶, _lh_seq2_arg2⁶, _lh_seq2_arg3⁶, _lh_funcomp_x³⁵) = 
//│ 	let g⁷ = (fun xs¹¹ -> 
//│ 		let _lh_matchIdent¹⁷ = xs¹¹
//│ 		in case _lh_matchIdent¹⁷ of {
//│ 			LH_P2 _lh_seq2_LH_P2_0⁶ _lh_seq2_LH_P2_1⁶ => lift_lh_₆(cross_lh_₂(_lh_seq2_arg1⁶(_lh_seq2_LH_P2_0⁶), (fun x⁶⁹ -> x⁶⁹)), _lh_seq2_arg3⁶(_lh_seq2_LH_P2_1⁶))})
//│ 	in (fun _lh_funcomp_x³⁶ -> squash_lh_₁(lift_lh_₆(g⁷, _lh_funcomp_x³⁶)))(_lh_seq2_arg2⁶(_lh_funcomp_x³⁵))
//│ def seq2_lh_₆(_lh_seq2_arg1², _lh_seq2_arg2², _lh_seq2_arg3², _lh_funcomp_x¹⁷) = 
//│ 	let g³ = (fun xs⁶ -> 
//│ 		let _lh_matchIdent³ = xs⁶
//│ 		in case _lh_matchIdent³ of {
//│ 			LH_P2 _lh_seq2_LH_P2_0² _lh_seq2_LH_P2_1² => lift_lh_₆(cross_lh_₂(_lh_seq2_arg1²(_lh_seq2_LH_P2_0²), (fun x²³ -> x²³)), _lh_seq2_arg3²(_lh_seq2_LH_P2_1²))})
//│ 	in (fun _lh_funcomp_x¹⁸ -> squash_lh_₁(lift_lh_₆(g³, _lh_funcomp_x¹⁸)))(_lh_seq2_arg2²(_lh_funcomp_x¹⁷))
//│ def seq2_lh_₇(_lh_seq2_arg1⁴, _lh_seq2_arg2⁴, _lh_seq2_arg3⁴, _lh_funcomp_x²⁸) = 
//│ 	let g⁵ = (fun xs⁸ -> 
//│ 		let _lh_matchIdent⁸ = xs⁸
//│ 		in case _lh_matchIdent⁸ of {
//│ 			LH_P2 _lh_seq2_LH_P2_0⁴ _lh_seq2_LH_P2_1⁴ => lift_lh_₆(cross_lh_₂(_lh_seq2_arg1⁴(_lh_seq2_LH_P2_0⁴), (fun x⁴⁴ -> x⁴⁴)), _lh_seq2_arg3⁴(_lh_seq2_LH_P2_1⁴))})
//│ 	in (fun _lh_funcomp_x²⁹ -> squash_lh_₁(lift_lh_₆(g⁵, _lh_funcomp_x²⁹)))(_lh_seq2_arg2⁴(_lh_funcomp_x²⁸))
//│ def sift_lh_₁(_lh_sift_arg1⁰) = (fun _lh_funcomp_x³³ -> concat_lh_₁(map_lh_₇(listify_lh_₁, _lh_funcomp_x³³)))(_lh_sift_arg1⁰)
//│ def simplify_lh_₁(_lh_simplify_arg1⁰) = 
//│ 	let f¹⁴ = (fun t¹¹ -> getOrElse_lh_₁(lift_lh_₁(f¹⁴, _lh_simplify_arg1⁰(t¹¹)), t¹¹))
//│ 	in f¹⁴
//│ def snd_lh_₁(_lh_snd_arg1⁰) = case _lh_snd_arg1⁰ of {
//│ 	LH_P2 _lh_snd_LH_P2_0⁰ _lh_snd_LH_P2_1⁰ => _lh_snd_LH_P2_1⁰}
//│ def sp_lh_₁(_lh_sp_arg1⁰, _lh_funcomp_x⁰) = _lh_sp_arg1⁰(dropWhile_lh_₁((fun x⁰ -> polyEq⁰(x⁰, ' ')), _lh_funcomp_x⁰))
//│ def sp_lh_₂(_lh_sp_arg1³, _lh_funcomp_x⁹) = _lh_sp_arg1³(dropWhile_lh_₁((fun x¹⁶ -> polyEq⁰(x¹⁶, ' ')), _lh_funcomp_x⁹))
//│ def sp_lh_₃(_lh_sp_arg1¹, _lh_funcomp_x²) = _lh_sp_arg1¹(dropWhile_lh_₁((fun x⁶ -> polyEq⁰(x⁶, ' ')), _lh_funcomp_x²))
//│ def sp_lh_₄(_lh_sp_arg1⁵, _lh_funcomp_x¹¹) = _lh_sp_arg1⁵(dropWhile_lh_₁((fun x¹⁸ -> polyEq⁰(x¹⁸, ' ')), _lh_funcomp_x¹¹))
//│ def sp_lh_₅(_lh_sp_arg1⁷, _lh_funcomp_x³⁴) = _lh_sp_arg1⁷(dropWhile_lh_₁((fun x⁶⁷ -> polyEq⁰(x⁶⁷, ' ')), _lh_funcomp_x³⁴))
//│ def sp_lh_₆(_lh_sp_arg1⁴, _lh_funcomp_x¹⁰) = _lh_sp_arg1⁴(dropWhile_lh_₁((fun x¹⁷ -> polyEq⁰(x¹⁷, ' ')), _lh_funcomp_x¹⁰))
//│ def sp_lh_₇(_lh_sp_arg1², _lh_funcomp_x⁶) = _lh_sp_arg1²(dropWhile_lh_₁((fun x¹⁴ -> polyEq⁰(x¹⁴, ' ')), _lh_funcomp_x⁶))
//│ def sp_lh_₈(_lh_sp_arg1⁶, _lh_funcomp_x²⁴) = _lh_sp_arg1⁶(dropWhile_lh_₁((fun x³⁰ -> polyEq⁰(x³⁰, ' ')), _lh_funcomp_x²⁴))
//│ def split_lh_₁(_lh_split_arg1⁰, _lh_split_arg2⁰, _lh_process2_arg1¹, _lh_process2_arg2¹, _lh_process2_arg4¹, _lh_process2_arg5¹, _lh_process2_arg6¹) = 
//│ 	let tmp⁰ = zip_lh_₁(map_lh_₇(_lh_split_arg1⁰, _lh_split_arg2⁰), _lh_split_arg2⁰)
//│ 	in let _lh_process2_LH_P2_1⁰ = 	
//│ 		let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 			LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => case _lh_listcomp_fun_ls_h³ of {
//│ 				LH_P2 _lh_split_LH_P2_0⁰ _lh_split_LH_P2_1⁰ => if not⁰(_lh_split_LH_P2_0⁰) then [LH_C _lh_split_LH_P2_1⁰ _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)
//│ 				| _  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun³(tmp⁰)
//│ 	in let _lh_process2_LH_P2_0⁰ = 	
//│ 		let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => case _lh_listcomp_fun_ls_h⁴ of {
//│ 				LH_P2 _lh_split_LH_P2_0¹ _lh_split_LH_P2_1¹ => if _lh_split_LH_P2_0¹ then [LH_C _lh_split_LH_P2_1¹ _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] else _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)
//│ 				| _  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁴(tmp⁰)
//│ 	in let net'⁰ = add_eqn_lh_₁(delete_eqns_lh_₁(map_lh_₇(eqno_lh_₁, _lh_process2_LH_P2_0⁰), _lh_process2_arg4¹), _lh_process2_arg6¹)
//│ 	in let deletions⁰ = map_lh_₇(eqpr_lh_₁, _lh_process2_LH_P2_0⁰)
//│ 	in let critical⁰ = all_crit_pairs_lh_₁(_lh_process2_arg6¹, _lh_process2_LH_P2_1⁰)
//│ 	in let new_agenda⁰ = sift_lh_₁(map_lh_₇(resolve_lh_₁(super_reduce_lh_₁(net'⁰)), mappend_lh_₂(deletions⁰, critical⁰)))
//│ 	in let todo'⁰ = add_agenda_lh_₁(snd_lh_₁(_lh_process2_arg1¹), new_agenda⁰, _lh_process2_arg5¹)
//│ 	in process_lh_₁(_lh_process2_arg1¹, _lh_process2_arg2¹, mappend_lh_₂(_lh_process2_LH_P2_1⁰, [LH_C _lh_process2_arg6¹ [LH_N]]), net'⁰, todo'⁰)
//│ def squash_lh_₁(_lh_squash_arg1⁰) = case _lh_squash_arg1⁰ of {
//│ 	Just _lh_squash_Just_0⁰ => _lh_squash_Just_0⁰
//│ 	| Nothing  => [Nothing]}
//│ def stand_eqn_lh_₁(_lh_stand_eqn_arg1⁰, _lh_stand_eqn_arg2⁰) = case _lh_stand_eqn_arg2⁰ of {
//│ 	Eqn _lh_stand_eqn_Eqn_0⁰ _lh_stand_eqn_Eqn_1⁰ => case _lh_stand_eqn_Eqn_1⁰ of {
//│ 		LH_P2 _lh_stand_eqn_LH_P2_0⁰ _lh_stand_eqn_LH_P2_1⁰ => [Eqn _lh_stand_eqn_Eqn_0⁰ [LH_P2 stand_lh_₁(_lh_stand_eqn_arg1⁰, _lh_stand_eqn_LH_P2_0⁰) stand_lh_₁(_lh_stand_eqn_arg1⁰, _lh_stand_eqn_LH_P2_1⁰)]]}}
//│ def stand_lh_₁(_lh_stand_arg1⁰) = expr_fold_lh_₄((fun x³⁶ -> (fun y³ -> [Func x³⁶ y³])), (fun v⁰ -> [Var mappend_lh_₂(v⁰, _lh_stand_arg1⁰)]))
//│ def strict_super_lh_₁(_lh_strict_super_arg1⁰, _lh_strict_super_arg2⁰) = case _lh_strict_super_arg2⁰ of {
//│ 	Func _lh_strict_super_Func_0⁰ _lh_strict_super_Func_1⁰ => 
//│ 		let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => case _lh_listcomp_fun_ls_h⁷ of {
//│ 				LH_P2 _lh_strict_super_LH_P2_0⁰ _lh_strict_super_LH_P2_1⁰ => 
//│ 					let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {
//│ 						LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => case _lh_listcomp_fun_ls_h⁸ of {
//│ 							LH_P2 _lh_strict_super_LH_P2_0¹ _lh_strict_super_LH_P2_1¹ => [LH_C [LH_P2 [LH_C _lh_strict_super_LH_P2_0⁰ _lh_strict_super_LH_P2_0¹] _lh_strict_super_LH_P2_1¹] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]
//│ 							| _  => _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)}
//│ 						| LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ 					in _lh_listcomp_fun⁸(superpose_lh_₁(_lh_strict_super_arg1⁰, _lh_strict_super_LH_P2_1⁰))
//│ 				| _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁷(zip_lz_nl_lh_₁(enumFrom_lh_₁(0), _lh_strict_super_Func_1⁰))
//│ 	| _  => error⁰}
//│ def string_of_lh_₁(_lh_string_of_arg1³, _lh_string_of_arg2³) = 
//│ 	let chars³ = takeWhile_lh_₁(_lh_string_of_arg1³, _lh_string_of_arg2³)
//│ 	in let s'³ = dropWhile_lh_₁(_lh_string_of_arg1³, _lh_string_of_arg2³)
//│ 	in maybeX_lh_₁(polyNeq⁰(chars³, [LH_N]), [LH_P2 [MkString chars³] s'³])
//│ def string_of_lh_₂(_lh_string_of_arg1¹, _lh_string_of_arg2¹) = 
//│ 	let chars¹ = takeWhile_lh_₁(_lh_string_of_arg1¹, _lh_string_of_arg2¹)
//│ 	in let s'¹ = dropWhile_lh_₁(_lh_string_of_arg1¹, _lh_string_of_arg2¹)
//│ 	in maybeX_lh_₁(polyNeq⁰(chars¹, [LH_N]), [LH_P2 [MkString chars¹] s'¹])
//│ def string_of_lh_₃(_lh_string_of_arg1⁰, _lh_string_of_arg2⁰) = 
//│ 	let chars⁰ = takeWhile_lh_₁(_lh_string_of_arg1⁰, _lh_string_of_arg2⁰)
//│ 	in let s'⁰ = dropWhile_lh_₁(_lh_string_of_arg1⁰, _lh_string_of_arg2⁰)
//│ 	in maybeX_lh_₁(polyNeq⁰(chars⁰, [LH_N]), [LH_P2 [MkString chars⁰] s'⁰])
//│ def string_of_lh_₄(_lh_string_of_arg1², _lh_string_of_arg2²) = 
//│ 	let chars² = takeWhile_lh_₁(_lh_string_of_arg1², _lh_string_of_arg2²)
//│ 	in let s'² = dropWhile_lh_₁(_lh_string_of_arg1², _lh_string_of_arg2²)
//│ 	in maybeX_lh_₁(polyNeq⁰(chars², [LH_N]), [LH_P2 [MkString chars²] s'²])
//│ def sub_lh_₁(_lh_sub_arg1⁰, _lh_sub_arg2⁰) = expr_fold_lh_₄((fun x³⁸ -> (fun y⁴ -> [Func x³⁸ y⁴])), apply_lh_₁(_lh_sub_arg2⁰), _lh_sub_arg1⁰)
//│ def subterms_lh_₁(_lh_subterms_arg1⁰) = case _lh_subterms_arg1⁰ of {
//│ 	Var _lh_subterms_Var_0⁰ => [LH_N]
//│ 	| Func _lh_subterms_Func_0⁰ _lh_subterms_Func_1⁰ => mappend_lh_₁(
//│ 		let t⁸⁸ = (fun ys³ -> ys³)
//│ 		in let h⁸⁵ = [LH_P2 [LH_N] [Func _lh_subterms_Func_0⁰ _lh_subterms_Func_1⁰]]
//│ 		in (fun ys⁴ -> [LH_C h⁸⁵ mappend_lh_₁(t⁸⁸, ys⁴)]), 
//│ 		let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => case _lh_listcomp_fun_ls_h⁵ of {
//│ 				LH_P2 _lh_subterms_LH_P2_0⁰ _lh_subterms_LH_P2_1⁰ => 
//│ 					let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 						LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => case _lh_listcomp_fun_ls_h⁶ of {
//│ 							LH_P2 _lh_subterms_LH_P2_0¹ _lh_subterms_LH_P2_1¹ => [LH_C [LH_P2 [LH_C _lh_subterms_LH_P2_0⁰ _lh_subterms_LH_P2_0¹] _lh_subterms_LH_P2_1¹] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)]
//│ 							| _  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)}
//│ 						| LH_N  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)})
//│ 					in _lh_listcomp_fun⁶(subterms_lh_₁(_lh_subterms_LH_P2_1⁰))
//│ 				| _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁵(zip_lz_nl_lh_₁(enumFrom_lh_₁(0), _lh_subterms_Func_1⁰)))}
//│ def succeed_lh_₁(_lh_succeed_arg1⁰) = [Just _lh_succeed_arg1⁰]
//│ def sumAux_lh_₁(ls¹³, a³) = ls¹³(a³)
//│ def sum_lh_₁(ls⁷) = sumAux_lh_₁(ls⁷, 0)
//│ def super_reduce_lh_₁(_lh_super_reduce_arg1⁰) = inside_lh_₁(dnet_reduce_lh_₁(_lh_super_reduce_arg1⁰))
//│ def superpose_lh_₁(_lh_superpose_arg1⁰, _lh_superpose_arg2⁰) = sift_lh_₁(
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {
//│ 			LH_P2 _lh_superpose_LH_P2_0⁰ _lh_superpose_LH_P2_1⁰ => [LH_C lift_lh_₆(pair_lh_₁(_lh_superpose_LH_P2_0⁰), unify_lh_₁(_lh_superpose_arg1⁰, _lh_superpose_LH_P2_1⁰)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 			| _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰(subterms_lh_₁(_lh_superpose_arg2⁰)))
//│ def tail_lh_₁(ls¹¹) = case ls¹¹ of {
//│ 	LH_C h⁶⁹ t⁷² => t⁷²
//│ 	| LH_N  => error⁰}
//│ def takeWhile_lh_₁(_lh_takeWhile_arg1⁰, _lh_takeWhile_arg2⁰) = case _lh_takeWhile_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_takeWhile_LH_C_0⁰ _lh_takeWhile_LH_C_1⁰ => if _lh_takeWhile_arg1⁰(_lh_takeWhile_LH_C_0⁰) then [LH_C _lh_takeWhile_LH_C_0⁰ takeWhile_lh_₁(_lh_takeWhile_arg1⁰, _lh_takeWhile_LH_C_1⁰)] else [LH_N]}
//│ def testRewrite_nofib_lh_₁(_lh_testRewrite_nofib_arg1⁰) = all_lh_₁(result_lh_₁, copy_lh_₁(_lh_testRewrite_nofib_arg1⁰, 
//│ 	let _lh_result_LH_P2_1⁰ = [LH_C 'I' [LH_C '(' [LH_C 'b' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'I' [LH_C '(' [LH_C 'a' [LH_C ')' [LH_N]]]]]]]]]]]]
//│ 	in let _lh_result_LH_P2_0⁰ = [LH_C 'I' [LH_C '(' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'b' [LH_C ')' [LH_N]]]]]]]]]
//│ 	in (fun _lh_dummy⁰ -> 
//│ 		let group_completion⁰ = knuth_bendix_lh_₁(rpo_lh_₁(rank_order_lh_₁(rank_lh_₁), lex_ext_lh_₁), map_lh_₁(parse_eqn_lh_₁, 
//│ 			let t²⁸ = 	
//│ 				let t²⁹ = 	
//│ 					let t³⁰ = (fun f³⁶ -> [LH_N])
//│ 					in let h²⁶ = [LH_C 'I' [LH_C '(' [LH_C 'x' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'E' [LH_N]]]]]]]]]]]]]
//│ 					in (fun f³⁷ -> [LH_C f³⁷(h²⁶) map_lh_₁(f³⁷, t³⁰)])
//│ 				in let h²⁷ = [LH_C 'E' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'x' [LH_N]]]]]]]]]]
//│ 				in (fun f³⁸ -> [LH_C f³⁸(h²⁷) map_lh_₁(f³⁸, t²⁹)])
//│ 			in let h²⁸ = [LH_C '(' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'b' [LH_C ')' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'c' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C '(' [LH_C 'b' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'c' [LH_C ')' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]
//│ 			in (fun f³⁹ -> [LH_C f³⁹(h²⁸) map_lh_₁(f³⁹, t²⁸)])))
//│ 		in eqExpr_lh_₁(simplify_lh_₁(super_reduce_lh_₁(group_completion⁰), parse_lh_₁(_lh_result_LH_P2_0⁰)), parse_lh_₂(_lh_result_LH_P2_1⁰)))))
//│ def the_lh_₁(_lh_the_arg1¹) = case _lh_the_arg1¹ of {
//│ 	Just _lh_the_Just_0¹ => _lh_the_Just_0¹
//│ 	| _  => error⁰}
//│ def the_lh_₂(_lh_the_arg1²) = case _lh_the_arg1² of {
//│ 	Just _lh_the_Just_0² => _lh_the_Just_0²
//│ 	| _  => error⁰}
//│ def the_lh_₃(_lh_the_arg1⁰) = case _lh_the_arg1⁰ of {
//│ 	Just _lh_the_Just_0⁰ => _lh_the_Just_0⁰
//│ 	| _  => error⁰}
//│ def thread_lh_₁(_lh_thread_arg1⁰, _lh_thread_arg2⁰, _lh_thread_arg3⁰) = case _lh_thread_arg1⁰ of {
//│ 	LH_C _lh_thread_LH_C_0⁰ _lh_thread_LH_C_1⁰ => case _lh_thread_LH_C_0⁰ of {
//│ 		Afunc _lh_thread_Afunc_0⁰ => case _lh_thread_arg3⁰ of {
//│ 			Switch _lh_thread_Switch_0⁰ _lh_thread_Switch_1⁰ => [Switch update_alist_lh_₁(_lh_thread_Afunc_0⁰, thread_lh_₁(_lh_thread_LH_C_1⁰, _lh_thread_arg2⁰), empty_net_lh_₁, _lh_thread_Switch_0⁰) _lh_thread_Switch_1⁰]
//│ 			| Return _lh_thread_Return_0⁰ => thread_lh_₁([LH_C [Afunc _lh_thread_Afunc_0⁰] _lh_thread_LH_C_1⁰], _lh_thread_arg2⁰, [Switch [LH_N] [Return _lh_thread_Return_0⁰]])}
//│ 		| Avar  => case _lh_thread_arg3⁰ of {
//│ 			Switch _lh_thread_Switch_0¹ _lh_thread_Switch_1¹ => [Switch _lh_thread_Switch_0¹ thread_lh_₁(_lh_thread_LH_C_1⁰, _lh_thread_arg2⁰, _lh_thread_Switch_1¹)]
//│ 			| Return _lh_thread_Return_0¹ => 
//│ 				let d'⁰ = thread_lh_₁(_lh_thread_LH_C_1⁰, _lh_thread_arg2⁰, [Return _lh_thread_Return_0¹])
//│ 				in if is_switch_lh_₁(d'⁰) then [Switch [LH_N] d'⁰] else d'⁰}}
//│ 	| LH_N  => case _lh_thread_arg3⁰ of {
//│ 		Return _lh_thread_Return_0² => [Return [LH_C _lh_thread_arg2⁰ _lh_thread_Return_0²]]}}
//│ def try_all_lh_₁(_lh_try_all_arg1⁰) = foldr_lh_₁(orElseMap_lh_₃, (fun dum³ -> croak_lh_₁), _lh_try_all_arg1⁰)
//│ def unExpr_lh_₁(_lh_unExpr_arg1¹) = case _lh_unExpr_arg1¹ of {
//│ 	Expr _lh_unExpr_Expr_0¹ => _lh_unExpr_Expr_0¹
//│ 	| _  => error⁰}
//│ def unExpr_lh_₂(_lh_unExpr_arg1⁰) = case _lh_unExpr_arg1⁰ of {
//│ 	Expr _lh_unExpr_Expr_0⁰ => _lh_unExpr_Expr_0⁰
//│ 	| _  => error⁰}
//│ def unExpr_lh_₃(_lh_unExpr_arg1²) = case _lh_unExpr_arg1² of {
//│ 	Expr _lh_unExpr_Expr_0² => _lh_unExpr_Expr_0²
//│ 	| _  => error⁰}
//│ def unify'_lh_₁(_lh_unify'_arg1⁰, _lh_unify'_arg2⁰) = case _lh_unify'_arg2⁰ of {
//│ 	LH_P2 _lh_unify'_LH_P2_0⁰ _lh_unify'_LH_P2_1⁰ => case _lh_unify'_LH_P2_0⁰ of {
//│ 		Var _lh_unify'_Var_0⁰ => univar_lh_₁(_lh_unify'_arg1⁰, _lh_unify'_Var_0⁰, _lh_unify'_LH_P2_1⁰)
//│ 		| Func _lh_unify'_Func_0⁰ _lh_unify'_Func_1⁰ => case _lh_unify'_LH_P2_1⁰ of {
//│ 			Var _lh_unify'_Var_0¹ => univar_lh_₁(_lh_unify'_arg1⁰, _lh_unify'_Var_0¹, [Func _lh_unify'_Func_0⁰ _lh_unify'_Func_1⁰])
//│ 			| Func _lh_unify'_Func_0¹ _lh_unify'_Func_1¹ => if polyEq⁰(_lh_unify'_Func_0⁰, _lh_unify'_Func_0¹) then prop_fold_lh_₁(unify'_lh_₁, _lh_unify'_arg1⁰, zip_lh_₁(_lh_unify'_Func_1⁰, _lh_unify'_Func_1¹)) else croak_lh_₁}}}
//│ def unify_lh_₁(_lh_unify_arg1⁰, _lh_unify_arg2⁰) = unify'_lh_₁([LH_N], [LH_P2 _lh_unify_arg1⁰ _lh_unify_arg2⁰])
//│ def univar_lh_₁(_lh_univar_arg1⁰, _lh_univar_arg2⁰, _lh_univar_arg3⁰) = 
//│ 	let t⁴³ = assoc_lh_₁(_lh_univar_arg1⁰, _lh_univar_arg2⁰)
//│ 	in if exists_lh_₁(t⁴³) then unify'_lh_₁(_lh_univar_arg1⁰, [LH_P2 the_lh_₃(t⁴³) _lh_univar_arg3⁰]) else if eqExpr_lh_₁(_lh_univar_arg3⁰, [Var _lh_univar_arg2⁰]) then succeed_lh_₁(_lh_univar_arg1⁰) else 
//│ 		let u'⁰ = sub_lh_₁(_lh_univar_arg3⁰, _lh_univar_arg1⁰)
//│ 		in if not⁰(occurs_lh_₂(_lh_univar_arg2⁰, u'⁰)) then succeed_lh_₁(comp_sub_lh_₁([LH_C [LH_P2 _lh_univar_arg2⁰ u'⁰] [LH_N]], _lh_univar_arg1⁰)) else croak_lh_₁
//│ def update_alist_lh_₁(_lh_update_alist_arg1⁰, _lh_update_alist_arg2⁰, _lh_update_alist_arg3⁰) = 
//│ 	let upd⁰ = (fun ls¹⁸ -> 
//│ 		let _lh_matchIdent¹⁶ = ls¹⁸
//│ 		in case _lh_matchIdent¹⁶ of {
//│ 			LH_N  => [LH_C [LH_P2 _lh_update_alist_arg1⁰ _lh_update_alist_arg2⁰(_lh_update_alist_arg3⁰)] [LH_N]]
//│ 			| LH_C _lh_update_alist_LH_C_0⁰ _lh_update_alist_LH_C_1⁰ => case _lh_update_alist_LH_C_0⁰ of {
//│ 				LH_P2 _lh_update_alist_LH_P2_0⁰ _lh_update_alist_LH_P2_1⁰ => if polyEq⁰(_lh_update_alist_arg1⁰, _lh_update_alist_LH_P2_0⁰) then [LH_C [LH_P2 _lh_update_alist_arg1⁰ _lh_update_alist_arg2⁰(_lh_update_alist_LH_P2_1⁰)] _lh_update_alist_LH_C_1⁰] else [LH_C [LH_P2 _lh_update_alist_LH_P2_0⁰ _lh_update_alist_LH_P2_1⁰] upd⁰(_lh_update_alist_LH_C_1⁰)]}})
//│ 	in upd⁰
//│ def zip_lh_₁(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C hx⁰ tx⁰ => case ys⁰ of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh_₁(tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zip_lz_nl_lh_₁(xs¹⁰, ys⁵) = case ys⁵ of {
//│ 	LH_C hy² ty² => force⁰(xs¹⁰, hy², ty²)
//│ 	| LH_N  => [LH_N]}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
