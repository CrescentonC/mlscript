:NewParser
:ParseOnly

// carryPropagate base (d:ds)
//   | carryguess == (d+9) `div` base
//       = carryguess : ((remainder+nextcarry) : fraction)
//   | otherwise
//       = (dCorrected `div` base) : ((dCorrected `mod` base) : fraction)
//   where carryguess = d `div` base
//         remainder = d `mod` base
//         (nextcarry:fraction) = carryPropagate (base+1) ds
//         dCorrected = d + nextcarry
// e n =
//     take_lz n $
//     (\b -> append_lz "2." b) $
//     tail_lz . concat_lz $
//     map_lz (string_of_int . head_lz) $
//     iterate ((carryPropagate 2) . (map_lz (\a -> (10*a))) . tail_lz) $
//     2:[1,1..]

// take_lz 5 $ (carryPropagate 2 $ repeat 1)

:lhInHaskell
:lhGenOCaml
append_lz xs ys = case xs of {
  (x:xs) -> lazy (x:(append_lz xs ys));
  [] -> ys
}
concat_lz ls = lazy (case (force ls) of {
  (h:t) -> force (append_lz h (concat_lz t));
  [] -> []
})
carryPropagate base l = lazy (case (force l) of {
                          (d:ds) -> let carryguess = (d `div` base) in
                                          let remainder = (d `mod` base) in
                                                let recRes = (carryPropagate (base+1) ds) in
                                                      if (carryguess == ((d + 9) `div` base))
                                                      then let tail = lazy (
                                                                  case (force recRes) of {
                                                                    (nextcarry:fraction) -> ((remainder+nextcarry) : fraction)
                                                                  }
                                                                ) in (carryguess : tail)
                                                      else case (force recRes) of {
                                                        (nextcarry:fraction) -> let dCorrected = (d + nextcarry) in
                                                                                        (dCorrected `div` base) : (lazy ((dCorrected `mod` base) : fraction))
                                                      }
                        })
e n =
  take_lz n ((\b -> append_lz "2." b) ((tail_lz . concat_lz) (map_lz (string_of_int . head_lz) (iterate ((carryPropagate 2) . (map_lz (\a -> (10*a))) . tail_lz) (lazy (2:[1,1..]))))))
testDigitsOfE2_nofib n = e n
testDigitsOfE2_nofib $ primId 500
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testDigitsOfE2_nofib_lh^290(primId⁰(500))
//│ def append_lz_lh(_lh_append_lz_arg1⁰, _lh_append_lz_arg2⁰) = 
//│ 	let _lh_matchIdent⁰ = _lh_append_lz_arg1⁰
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_C _lh_append_lz_LH_C_0⁰ _lh_append_lz_LH_C_1⁰ => lazy⁰([LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh^162(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)])
//│ 		| LH_N  => _lh_append_lz_arg2⁰
//│ 		| _  => error⁰}
//│ def carryPropagate_lh(_lh_carryPropagate_arg1⁰, _lh_carryPropagate_arg2⁰) = lazy⁰(
//│ 	let _lh_matchIdent² = force⁰(_lh_carryPropagate_arg2⁰)
//│ 	in case _lh_matchIdent² of {
//│ 		LH_C _lh_carryPropagate_LH_C_0⁰ _lh_carryPropagate_LH_C_1⁰ => 
//│ 			let carryguess⁰ = div⁰(_lh_carryPropagate_LH_C_0⁰, _lh_carryPropagate_arg1⁰)
//│ 			in let remainder⁰ = (_lh_carryPropagate_LH_C_0⁰ % _lh_carryPropagate_arg1⁰)
//│ 			in let recRes⁰ = carryPropagate_lh^210((_lh_carryPropagate_arg1⁰ + 1), _lh_carryPropagate_LH_C_1⁰)
//│ 			in if (carryguess⁰ == div⁰((_lh_carryPropagate_LH_C_0⁰ + 9), _lh_carryPropagate_arg1⁰)) then 
//│ 				let tail⁰ = lazy⁰(
//│ 					let _lh_matchIdent³ = force⁰(recRes⁰)
//│ 					in case _lh_matchIdent³ of {
//│ 						LH_C _lh_carryPropagate_LH_C_0¹ _lh_carryPropagate_LH_C_1¹ => [LH_C (remainder⁰ + _lh_carryPropagate_LH_C_0¹) _lh_carryPropagate_LH_C_1¹]
//│ 						| _  => error⁰})
//│ 				in [LH_C carryguess⁰ tail⁰] else 
//│ 				let _lh_matchIdent⁴ = force⁰(recRes⁰)
//│ 				in case _lh_matchIdent⁴ of {
//│ 					LH_C _lh_carryPropagate_LH_C_0² _lh_carryPropagate_LH_C_1² => 
//│ 						let dCorrected⁰ = (_lh_carryPropagate_LH_C_0⁰ + _lh_carryPropagate_LH_C_0²)
//│ 						in [LH_C div⁰(dCorrected⁰, _lh_carryPropagate_arg1⁰) lazy⁰([LH_C (dCorrected⁰ % _lh_carryPropagate_arg1⁰) _lh_carryPropagate_LH_C_1²])]
//│ 					| _  => error⁰}
//│ 		| _  => error⁰})
//│ def concat_lz_lh(_lh_concat_lz_arg1⁰) = lazy⁰(
//│ 	let _lh_matchIdent¹ = force⁰(_lh_concat_lz_arg1⁰)
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_C _lh_concat_lz_LH_C_0⁰ _lh_concat_lz_LH_C_1⁰ => force⁰(append_lz_lh^181(_lh_concat_lz_LH_C_0⁰, concat_lz_lh^184(_lh_concat_lz_LH_C_1⁰)))
//│ 		| LH_N  => [LH_N]
//│ 		| _  => error⁰})
//│ def e_lh(_lh_e_arg1⁰) = take_lz_lh^90(_lh_e_arg1⁰, (fun b⁰ -> append_lz_lh^93([LH_C '2' [LH_C '.' [LH_N]]], b⁰))((fun _lh_funcomp_x⁰ -> tail_lz_lh^103(concat_lz_lh^104(_lh_funcomp_x⁰)))(map_lz_lh^109((fun _lh_funcomp_x¹ -> string_of_int⁰(head_lz_lh^111(_lh_funcomp_x¹))), iterate_lh^117((fun _lh_funcomp_x² -> (fun _lh_funcomp_x³ -> carryPropagate_lh^118(2, map_lz_lh^121((fun a¹ -> (10 * a¹)), _lh_funcomp_x³)))(tail_lz_lh^133(_lh_funcomp_x²))), lazy⁰([LH_C 2 enumFromThen_lh^141(1, 1)]))))))
//│ def enumFromThen_lh(a⁰, t³) = lazy⁰([LH_C a⁰ enumFromThen_lh^35(t³, ((2 * t³) - a⁰))])
//│ def head_lz_lh(ls¹) = case force⁰(ls¹) of {
//│ 	LH_C h¹ t¹ => h¹
//│ 	| LH_N  => error⁰}
//│ def iterate_lh(f¹, x⁰) = lazy⁰([LH_C x⁰ iterate_lh^54(f¹, f¹(x⁰))])
//│ def map_lz_lh(f⁰, ls⁰) = lazy⁰(case force⁰(ls⁰) of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh^8(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]})
//│ def tail_lz_lh(ls²) = case force⁰(ls²) of {
//│ 	LH_C h² t² => t²
//│ 	| LH_N  => error⁰}
//│ def take_lz_lh(n⁰, ls³) = if (n⁰ > 0) then case force⁰(ls³) of {
//│ 	LH_C h³ t⁴ => [LH_C h³ take_lz_lh^74((n⁰ - 1), t⁴)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testDigitsOfE2_nofib_lh(_lh_testDigitsOfE2_nofib_arg1⁰) = e_lh^154(_lh_testDigitsOfE2_nofib_arg1⁰)
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec head_lz_lh ls_1 =
//│ 		  (match (Lazy.force ls_1) with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      h_1
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec enumFromThen_lh a_0 t_3 =
//│ 		  (lazy (`LH_C(a_0, ((enumFromThen_lh t_3) ((2 * t_3) - a_0)))));;
//│ 		let rec carryPropagate_lh _lh_carryPropagate_arg1_0 _lh_carryPropagate_arg2_0 =
//│ 		  (lazy (let rec _lh_matchIdent_2 = (Lazy.force _lh_carryPropagate_arg2_0) in
//│ 		    (match _lh_matchIdent_2 with
//│ 		      | `LH_C(_lh_carryPropagate_LH_C_0_0, _lh_carryPropagate_LH_C_1_0) -> 
//│ 		        (let rec carryguess_0 = (_lh_carryPropagate_LH_C_0_0 / _lh_carryPropagate_arg1_0) in
//│ 		          (let rec remainder_0 = (_lh_carryPropagate_LH_C_0_0 mod _lh_carryPropagate_arg1_0) in
//│ 		            (let rec recRes_0 = ((carryPropagate_lh (_lh_carryPropagate_arg1_0 + 1)) _lh_carryPropagate_LH_C_1_0) in
//│ 		              (if (carryguess_0 = ((_lh_carryPropagate_LH_C_0_0 + 9) / _lh_carryPropagate_arg1_0)) then
//│ 		                (let rec tail_0 = (lazy (let rec _lh_matchIdent_3 = (Lazy.force recRes_0) in
//│ 		                  (match _lh_matchIdent_3 with
//│ 		                    | `LH_C(_lh_carryPropagate_LH_C_0_1, _lh_carryPropagate_LH_C_1_1) -> 
//│ 		                      (`LH_C((remainder_0 + _lh_carryPropagate_LH_C_0_1), _lh_carryPropagate_LH_C_1_1))
//│ 		                    | _ -> 
//│ 		                      (failwith "error")))) in
//│ 		                  (`LH_C(carryguess_0, tail_0)))
//│ 		              else
//│ 		                (let rec _lh_matchIdent_4 = (Lazy.force recRes_0) in
//│ 		                  (match _lh_matchIdent_4 with
//│ 		                    | `LH_C(_lh_carryPropagate_LH_C_0_2, _lh_carryPropagate_LH_C_1_2) -> 
//│ 		                      (let rec dCorrected_0 = (_lh_carryPropagate_LH_C_0_0 + _lh_carryPropagate_LH_C_0_2) in
//│ 		                        (`LH_C((dCorrected_0 / _lh_carryPropagate_arg1_0), (lazy (`LH_C((dCorrected_0 mod _lh_carryPropagate_arg1_0), _lh_carryPropagate_LH_C_1_2))))))
//│ 		                    | _ -> 
//│ 		                      (failwith "error")))))))
//│ 		      | _ -> 
//│ 		        (failwith "error"))));;
//│ 		let rec map_lz_lh f_0 ls_0 =
//│ 		  (lazy (match (Lazy.force ls_0) with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C((f_0 h_0), ((map_lz_lh f_0) t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec append_lz_lh _lh_append_lz_arg1_0 _lh_append_lz_arg2_0 =
//│ 		  (let rec _lh_matchIdent_0 = _lh_append_lz_arg1_0 in
//│ 		    (match _lh_matchIdent_0 with
//│ 		      | `LH_C(_lh_append_lz_LH_C_0_0, _lh_append_lz_LH_C_1_0) -> 
//│ 		        (lazy (`LH_C(_lh_append_lz_LH_C_0_0, ((append_lz_lh _lh_append_lz_LH_C_1_0) _lh_append_lz_arg2_0))))
//│ 		      | `LH_N -> 
//│ 		        _lh_append_lz_arg2_0
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec take_lz_lh n_0 ls_3 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match (Lazy.force ls_3) with
//│ 		      | `LH_C(h_3, t_4) -> 
//│ 		        (`LH_C(h_3, ((take_lz_lh (n_0 - 1)) t_4)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec iterate_lh f_1 x_0 =
//│ 		  (lazy (`LH_C(x_0, ((iterate_lh f_1) (f_1 x_0)))));;
//│ 		let rec tail_lz_lh ls_2 =
//│ 		  (match (Lazy.force ls_2) with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      t_2
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec concat_lz_lh _lh_concat_lz_arg1_0 =
//│ 		  (lazy (let rec _lh_matchIdent_1 = (Lazy.force _lh_concat_lz_arg1_0) in
//│ 		    (match _lh_matchIdent_1 with
//│ 		      | `LH_C(_lh_concat_lz_LH_C_0_0, _lh_concat_lz_LH_C_1_0) -> 
//│ 		        (Lazy.force ((append_lz_lh _lh_concat_lz_LH_C_0_0) (concat_lz_lh _lh_concat_lz_LH_C_1_0)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N)
//│ 		      | _ -> 
//│ 		        (failwith "error"))));;
//│ 		let rec e_lh _lh_e_arg1_0 =
//│ 		  ((take_lz_lh _lh_e_arg1_0) ((fun b_0 -> 
//│ 		    ((append_lz_lh (`LH_C('2', (`LH_C('.', (`LH_N)))))) b_0)) ((fun _lh_funcomp_x_0 -> 
//│ 		    (tail_lz_lh (concat_lz_lh _lh_funcomp_x_0))) ((map_lz_lh (fun _lh_funcomp_x_1 -> 
//│ 		    (string_of_int (head_lz_lh _lh_funcomp_x_1)))) ((iterate_lh (fun _lh_funcomp_x_2 -> 
//│ 		    ((fun _lh_funcomp_x_3 -> 
//│ 		      ((carryPropagate_lh 2) ((map_lz_lh (fun a_1 -> 
//│ 		        (10 * a_1))) _lh_funcomp_x_3))) (tail_lz_lh _lh_funcomp_x_2)))) (lazy (`LH_C(2, ((enumFromThen_lh 1) 1)))))))));;
//│ 		let rec testDigitsOfE2_nofib_lh _lh_testDigitsOfE2_nofib_arg1_0 =
//│ 		  (e_lh _lh_testDigitsOfE2_nofib_arg1_0);;
//│ 		(testDigitsOfE2_nofib_lh 500)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)]: 13 --->
//│ 	case _lh_matchIdent¹ of {LH_C _lh_concat_lz_LH_C_0⁰ _lh_concat_lz_LH_C_1⁰ => force⁰(append_lz_lh(_lh_concat_lz_LH_C_0⁰, concat_lz_lh(_lh_concat_lz_LH_C_1⁰))) | LH_N  => [LH_N] | _  => error⁰}: 191
//│ 	case _lh_matchIdent² of {LH_C _lh_carryPropagate_LH_C_0⁰ _lh_carryPropagate_LH_C_1⁰ => let carryguess⁰ = div⁰(_lh_carryPropagate_LH_C_0⁰, _lh_carryPropagate_arg1⁰)
//│ in let remainder⁰ = (_lh_carryPropagate_LH_C_0⁰ % _lh_carryPropagate_arg1⁰)
//│ in let recRes⁰ = carryPropagate_lh((_lh_carryPropagate_arg1⁰ + 1), _lh_carryPropagate_LH_C_1⁰)
//│ in if (carryguess⁰ == div⁰((_lh_carryPropagate_LH_C_0⁰ + 9), _lh_carryPropagate_arg1⁰)) then let tail⁰ = lazy⁰(let _lh_matchIdent³ = force⁰(recRes⁰)
//│ in case _lh_matchIdent³ of {LH_C _lh_carryPropagate_LH_C_0¹ _lh_carryPropagate_LH_C_1¹ => [LH_C (remainder⁰ + _lh_carryPropagate_LH_C_0¹) _lh_carryPropagate_LH_C_1¹] | _  => error⁰})
//│ in [LH_C carryguess⁰ tail⁰] else let _lh_matchIdent⁴ = force⁰(recRes⁰)
//│ in case _lh_matchIdent⁴ of {LH_C _lh_carryPropagate_LH_C_0² _lh_carryPropagate_LH_C_1² => let dCorrected⁰ = (_lh_carryPropagate_LH_C_0⁰ + _lh_carryPropagate_LH_C_0²)
//│ in [LH_C div⁰(dCorrected⁰, _lh_carryPropagate_arg1⁰) lazy⁰([LH_C (dCorrected⁰ % _lh_carryPropagate_arg1⁰) _lh_carryPropagate_LH_C_1²])] | _  => error⁰} | _  => error⁰}: 285
//│ [LH_N]: 14 --->
//│ 	case _lh_matchIdent¹ of {LH_C _lh_concat_lz_LH_C_0⁰ _lh_concat_lz_LH_C_1⁰ => force⁰(append_lz_lh(_lh_concat_lz_LH_C_0⁰, concat_lz_lh(_lh_concat_lz_LH_C_1⁰))) | LH_N  => [LH_N] | _  => error⁰}: 191
//│ 	case _lh_matchIdent² of {LH_C _lh_carryPropagate_LH_C_0⁰ _lh_carryPropagate_LH_C_1⁰ => let carryguess⁰ = div⁰(_lh_carryPropagate_LH_C_0⁰, _lh_carryPropagate_arg1⁰)
//│ in let remainder⁰ = (_lh_carryPropagate_LH_C_0⁰ % _lh_carryPropagate_arg1⁰)
//│ in let recRes⁰ = carryPropagate_lh((_lh_carryPropagate_arg1⁰ + 1), _lh_carryPropagate_LH_C_1⁰)
//│ in if (carryguess⁰ == div⁰((_lh_carryPropagate_LH_C_0⁰ + 9), _lh_carryPropagate_arg1⁰)) then let tail⁰ = lazy⁰(let _lh_matchIdent³ = force⁰(recRes⁰)
//│ in case _lh_matchIdent³ of {LH_C _lh_carryPropagate_LH_C_0¹ _lh_carryPropagate_LH_C_1¹ => [LH_C (remainder⁰ + _lh_carryPropagate_LH_C_0¹) _lh_carryPropagate_LH_C_1¹] | _  => error⁰})
//│ in [LH_C carryguess⁰ tail⁰] else let _lh_matchIdent⁴ = force⁰(recRes⁰)
//│ in case _lh_matchIdent⁴ of {LH_C _lh_carryPropagate_LH_C_0² _lh_carryPropagate_LH_C_1² => let dCorrected⁰ = (_lh_carryPropagate_LH_C_0⁰ + _lh_carryPropagate_LH_C_0²)
//│ in [LH_C div⁰(dCorrected⁰, _lh_carryPropagate_arg1⁰) lazy⁰([LH_C (dCorrected⁰ % _lh_carryPropagate_arg1⁰) _lh_carryPropagate_LH_C_1²])] | _  => error⁰} | _  => error⁰}: 285
//│ [LH_C a⁰ enumFromThen_lh(t³, ((2 * t³) - a⁰))]: 48 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 15
//│ 	case force⁰(ls²) of {LH_C h² t² => t² | LH_N  => error⁰}: 31
//│ 	case force⁰(ls³) of {LH_C h³ t⁴ => [LH_C h³ take_lz_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 85
//│ [LH_C x⁰ iterate_lh(f¹, f¹(x⁰))]: 61 --->
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 15
//│ [LH_N]: 96 --->
//│ 	case _lh_matchIdent⁰ of {LH_C _lh_append_lz_LH_C_0⁰ _lh_append_lz_LH_C_1⁰ => lazy⁰([LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]) | LH_N  => _lh_append_lz_arg2⁰ | _  => error⁰}: 171
//│ [LH_C '.' [LH_N]]: 97 --->
//│ 	case _lh_matchIdent⁰ of {LH_C _lh_append_lz_LH_C_0⁰ _lh_append_lz_LH_C_1⁰ => lazy⁰([LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]) | LH_N  => _lh_append_lz_arg2⁰ | _  => error⁰}: 171
//│ [LH_C '2' [LH_C '.' [LH_N]]]: 98 --->
//│ 	case _lh_matchIdent⁰ of {LH_C _lh_append_lz_LH_C_0⁰ _lh_append_lz_LH_C_1⁰ => lazy⁰([LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]) | LH_N  => _lh_append_lz_arg2⁰ | _  => error⁰}: 171
//│ [LH_C 2 enumFromThen_lh(1, 1)]: 146 --->
//│ 	case force⁰(ls¹) of {LH_C h¹ t¹ => h¹ | LH_N  => error⁰}: 24
//│ 	case force⁰(ls²) of {LH_C h² t² => t² | LH_N  => error⁰}: 31
//│ [LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]: 167 --->
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 15
//│ 	case force⁰(ls²) of {LH_C h² t² => t² | LH_N  => error⁰}: 31
//│ 	case force⁰(ls³) of {LH_C h³ t⁴ => [LH_C h³ take_lz_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 85
//│ [LH_N]: 189 --->
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 15
//│ 	case force⁰(ls²) of {LH_C h² t² => t² | LH_N  => error⁰}: 31
//│ 	case force⁰(ls³) of {LH_C h³ t⁴ => [LH_C h³ take_lz_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 85
//│ [LH_C (remainder⁰ + _lh_carryPropagate_LH_C_0¹) _lh_carryPropagate_LH_C_1¹]: 243 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 15
//│ 	case force⁰(ls²) of {LH_C h² t² => t² | LH_N  => error⁰}: 31
//│ 	case force⁰(ls³) of {LH_C h³ t⁴ => [LH_C h³ take_lz_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 85
//│ [LH_C carryguess⁰ tail⁰]: 250 --->
//│ 	case force⁰(ls¹) of {LH_C h¹ t¹ => h¹ | LH_N  => error⁰}: 24
//│ 	case force⁰(ls²) of {LH_C h² t² => t² | LH_N  => error⁰}: 31
//│ 	case _lh_matchIdent³ of {LH_C _lh_carryPropagate_LH_C_0¹ _lh_carryPropagate_LH_C_1¹ => [LH_C (remainder⁰ + _lh_carryPropagate_LH_C_0¹) _lh_carryPropagate_LH_C_1¹] | _  => error⁰}: 245
//│ 	case _lh_matchIdent⁴ of {LH_C _lh_carryPropagate_LH_C_0² _lh_carryPropagate_LH_C_1² => let dCorrected⁰ = (_lh_carryPropagate_LH_C_0⁰ + _lh_carryPropagate_LH_C_0²)
//│ in [LH_C div⁰(dCorrected⁰, _lh_carryPropagate_arg1⁰) lazy⁰([LH_C (dCorrected⁰ % _lh_carryPropagate_arg1⁰) _lh_carryPropagate_LH_C_1²])] | _  => error⁰}: 278
//│ [LH_C (dCorrected⁰ % _lh_carryPropagate_arg1⁰) _lh_carryPropagate_LH_C_1²]: 273 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 15
//│ 	case force⁰(ls²) of {LH_C h² t² => t² | LH_N  => error⁰}: 31
//│ 	case force⁰(ls³) of {LH_C h³ t⁴ => [LH_C h³ take_lz_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 85
//│ [LH_C div⁰(dCorrected⁰, _lh_carryPropagate_arg1⁰) lazy⁰([LH_C (dCorrected⁰ % _lh_carryPropagate_arg1⁰) _lh_carryPropagate_LH_C_1²])]: 275 --->
//│ 	case force⁰(ls¹) of {LH_C h¹ t¹ => h¹ | LH_N  => error⁰}: 24
//│ 	case force⁰(ls²) of {LH_C h² t² => t² | LH_N  => error⁰}: 31
//│ 	case _lh_matchIdent³ of {LH_C _lh_carryPropagate_LH_C_0¹ _lh_carryPropagate_LH_C_1¹ => [LH_C (remainder⁰ + _lh_carryPropagate_LH_C_0¹) _lh_carryPropagate_LH_C_1¹] | _  => error⁰}: 245
//│ 	case _lh_matchIdent⁴ of {LH_C _lh_carryPropagate_LH_C_0² _lh_carryPropagate_LH_C_1² => let dCorrected⁰ = (_lh_carryPropagate_LH_C_0⁰ + _lh_carryPropagate_LH_C_0²)
//│ in [LH_C div⁰(dCorrected⁰, _lh_carryPropagate_arg1⁰) lazy⁰([LH_C (dCorrected⁰ % _lh_carryPropagate_arg1⁰) _lh_carryPropagate_LH_C_1²])] | _  => error⁰}: 278
//│ ------------------
//│ case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 15 --->
//│ 	[LH_C a⁰ enumFromThen_lh(t³, ((2 * t³) - a⁰))]: 48
//│ 	[LH_C x⁰ iterate_lh(f¹, f¹(x⁰))]: 61
//│ 	[LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]: 167
//│ 	[LH_N]: 189
//│ 	[LH_C (remainder⁰ + _lh_carryPropagate_LH_C_0¹) _lh_carryPropagate_LH_C_1¹]: 243
//│ 	[LH_C (dCorrected⁰ % _lh_carryPropagate_arg1⁰) _lh_carryPropagate_LH_C_1²]: 273
//│ case force⁰(ls¹) of {LH_C h¹ t¹ => h¹ | LH_N  => error⁰}: 24 --->
//│ 	NoProd
//│ 	[LH_C 2 enumFromThen_lh(1, 1)]: 146
//│ 	[LH_C carryguess⁰ tail⁰]: 250
//│ 	[LH_C div⁰(dCorrected⁰, _lh_carryPropagate_arg1⁰) lazy⁰([LH_C (dCorrected⁰ % _lh_carryPropagate_arg1⁰) _lh_carryPropagate_LH_C_1²])]: 275
//│ case force⁰(ls²) of {LH_C h² t² => t² | LH_N  => error⁰}: 31 --->
//│ 	[LH_C a⁰ enumFromThen_lh(t³, ((2 * t³) - a⁰))]: 48
//│ 	[LH_C 2 enumFromThen_lh(1, 1)]: 146
//│ 	[LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]: 167
//│ 	[LH_N]: 189
//│ 	[LH_C (remainder⁰ + _lh_carryPropagate_LH_C_0¹) _lh_carryPropagate_LH_C_1¹]: 243
//│ 	[LH_C carryguess⁰ tail⁰]: 250
//│ 	[LH_C (dCorrected⁰ % _lh_carryPropagate_arg1⁰) _lh_carryPropagate_LH_C_1²]: 273
//│ 	[LH_C div⁰(dCorrected⁰, _lh_carryPropagate_arg1⁰) lazy⁰([LH_C (dCorrected⁰ % _lh_carryPropagate_arg1⁰) _lh_carryPropagate_LH_C_1²])]: 275
//│ case force⁰(ls³) of {LH_C h³ t⁴ => [LH_C h³ take_lz_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 85 --->
//│ 	[LH_C a⁰ enumFromThen_lh(t³, ((2 * t³) - a⁰))]: 48
//│ 	[LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]: 167
//│ 	[LH_N]: 189
//│ 	[LH_C (remainder⁰ + _lh_carryPropagate_LH_C_0¹) _lh_carryPropagate_LH_C_1¹]: 243
//│ 	[LH_C (dCorrected⁰ % _lh_carryPropagate_arg1⁰) _lh_carryPropagate_LH_C_1²]: 273
//│ case _lh_matchIdent⁰ of {LH_C _lh_append_lz_LH_C_0⁰ _lh_append_lz_LH_C_1⁰ => lazy⁰([LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]) | LH_N  => _lh_append_lz_arg2⁰ | _  => error⁰}: 171 --->
//│ 	NoProd
//│ 	[LH_N]: 96
//│ 	[LH_C '.' [LH_N]]: 97
//│ 	[LH_C '2' [LH_C '.' [LH_N]]]: 98
//│ case _lh_matchIdent¹ of {LH_C _lh_concat_lz_LH_C_0⁰ _lh_concat_lz_LH_C_1⁰ => force⁰(append_lz_lh(_lh_concat_lz_LH_C_0⁰, concat_lz_lh(_lh_concat_lz_LH_C_1⁰))) | LH_N  => [LH_N] | _  => error⁰}: 191 --->
//│ 	[LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)]: 13
//│ 	[LH_N]: 14
//│ case _lh_matchIdent³ of {LH_C _lh_carryPropagate_LH_C_0¹ _lh_carryPropagate_LH_C_1¹ => [LH_C (remainder⁰ + _lh_carryPropagate_LH_C_0¹) _lh_carryPropagate_LH_C_1¹] | _  => error⁰}: 245 --->
//│ 	[LH_C carryguess⁰ tail⁰]: 250
//│ 	[LH_C div⁰(dCorrected⁰, _lh_carryPropagate_arg1⁰) lazy⁰([LH_C (dCorrected⁰ % _lh_carryPropagate_arg1⁰) _lh_carryPropagate_LH_C_1²])]: 275
//│ case _lh_matchIdent⁴ of {LH_C _lh_carryPropagate_LH_C_0² _lh_carryPropagate_LH_C_1² => let dCorrected⁰ = (_lh_carryPropagate_LH_C_0⁰ + _lh_carryPropagate_LH_C_0²)
//│ in [LH_C div⁰(dCorrected⁰, _lh_carryPropagate_arg1⁰) lazy⁰([LH_C (dCorrected⁰ % _lh_carryPropagate_arg1⁰) _lh_carryPropagate_LH_C_1²])] | _  => error⁰}: 278 --->
//│ 	[LH_C carryguess⁰ tail⁰]: 250
//│ 	[LH_C div⁰(dCorrected⁰, _lh_carryPropagate_arg1⁰) lazy⁰([LH_C (dCorrected⁰ % _lh_carryPropagate_arg1⁰) _lh_carryPropagate_LH_C_1²])]: 275
//│ case _lh_matchIdent² of {LH_C _lh_carryPropagate_LH_C_0⁰ _lh_carryPropagate_LH_C_1⁰ => let carryguess⁰ = div⁰(_lh_carryPropagate_LH_C_0⁰, _lh_carryPropagate_arg1⁰)
//│ in let remainder⁰ = (_lh_carryPropagate_LH_C_0⁰ % _lh_carryPropagate_arg1⁰)
//│ in let recRes⁰ = carryPropagate_lh((_lh_carryPropagate_arg1⁰ + 1), _lh_carryPropagate_LH_C_1⁰)
//│ in if (carryguess⁰ == div⁰((_lh_carryPropagate_LH_C_0⁰ + 9), _lh_carryPropagate_arg1⁰)) then let tail⁰ = lazy⁰(let _lh_matchIdent³ = force⁰(recRes⁰)
//│ in case _lh_matchIdent³ of {LH_C _lh_carryPropagate_LH_C_0¹ _lh_carryPropagate_LH_C_1¹ => [LH_C (remainder⁰ + _lh_carryPropagate_LH_C_0¹) _lh_carryPropagate_LH_C_1¹] | _  => error⁰})
//│ in [LH_C carryguess⁰ tail⁰] else let _lh_matchIdent⁴ = force⁰(recRes⁰)
//│ in case _lh_matchIdent⁴ of {LH_C _lh_carryPropagate_LH_C_0² _lh_carryPropagate_LH_C_1² => let dCorrected⁰ = (_lh_carryPropagate_LH_C_0⁰ + _lh_carryPropagate_LH_C_0²)
//│ in [LH_C div⁰(dCorrected⁰, _lh_carryPropagate_arg1⁰) lazy⁰([LH_C (dCorrected⁰ % _lh_carryPropagate_arg1⁰) _lh_carryPropagate_LH_C_1²])] | _  => error⁰} | _  => error⁰}: 285 --->
//│ 	[LH_C f⁰(h⁰) map_lz_lh(f⁰, t⁰)]: 13
//│ 	[LH_N]: 14
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testDigitsOfE2_nofib_lh(primId⁰(500))
//│ def append_lz_lh(_lh_append_lz_arg1¹, _lh_append_lz_arg2¹) = 
//│ 	let _lh_matchIdent⁸ = _lh_append_lz_arg1¹
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_C _lh_append_lz_LH_C_0⁰ _lh_append_lz_LH_C_1⁰ => lazy⁰([LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2¹)])
//│ 		| LH_N  => _lh_append_lz_arg2¹
//│ 		| _  => error⁰}
//│ def carryPropagate_lh(_lh_carryPropagate_arg1¹, _lh_carryPropagate_arg2¹) = lazy⁰(
//│ 	let _lh_matchIdent⁵ = force⁰(_lh_carryPropagate_arg2¹)
//│ 	in case _lh_matchIdent⁵ of {
//│ 		LH_C _lh_carryPropagate_LH_C_0⁰ _lh_carryPropagate_LH_C_1⁰ => 
//│ 			let carryguess¹ = div⁰(_lh_carryPropagate_LH_C_0⁰, _lh_carryPropagate_arg1¹)
//│ 			in let remainder¹ = (_lh_carryPropagate_LH_C_0⁰ % _lh_carryPropagate_arg1¹)
//│ 			in let recRes¹ = carryPropagate_lh((_lh_carryPropagate_arg1¹ + 1), _lh_carryPropagate_LH_C_1⁰)
//│ 			in if (carryguess¹ == div⁰((_lh_carryPropagate_LH_C_0⁰ + 9), _lh_carryPropagate_arg1¹)) then 
//│ 				let tail¹ = lazy⁰(
//│ 					let _lh_matchIdent⁶ = force⁰(recRes¹)
//│ 					in case _lh_matchIdent⁶ of {
//│ 						LH_C _lh_carryPropagate_LH_C_0¹ _lh_carryPropagate_LH_C_1¹ => [LH_C (remainder¹ + _lh_carryPropagate_LH_C_0¹) _lh_carryPropagate_LH_C_1¹]
//│ 						| _  => error⁰})
//│ 				in [LH_C carryguess¹ tail¹] else 
//│ 				let _lh_matchIdent⁷ = force⁰(recRes¹)
//│ 				in case _lh_matchIdent⁷ of {
//│ 					LH_C _lh_carryPropagate_LH_C_0² _lh_carryPropagate_LH_C_1² => 
//│ 						let dCorrected¹ = (_lh_carryPropagate_LH_C_0⁰ + _lh_carryPropagate_LH_C_0²)
//│ 						in [LH_C div⁰(dCorrected¹, _lh_carryPropagate_arg1¹) lazy⁰([LH_C (dCorrected¹ % _lh_carryPropagate_arg1¹) _lh_carryPropagate_LH_C_1²])]
//│ 					| _  => error⁰}
//│ 		| _  => error⁰})
//│ def concat_lz_lh(_lh_concat_lz_arg1¹) = lazy⁰(
//│ 	let _lh_matchIdent⁹ = force⁰(_lh_concat_lz_arg1¹)
//│ 	in case _lh_matchIdent⁹ of {
//│ 		LH_C _lh_concat_lz_LH_C_0⁰ _lh_concat_lz_LH_C_1⁰ => force⁰(append_lz_lh(_lh_concat_lz_LH_C_0⁰, concat_lz_lh(_lh_concat_lz_LH_C_1⁰)))
//│ 		| LH_N  => [LH_N]
//│ 		| _  => error⁰})
//│ def e_lh(_lh_e_arg1¹) = take_lz_lh(_lh_e_arg1¹, (fun b¹ -> append_lz_lh([LH_C '2' [LH_C '.' [LH_N]]], b¹))((fun _lh_funcomp_x⁴ -> tail_lz_lh(concat_lz_lh(_lh_funcomp_x⁴)))(map_lz_lh((fun _lh_funcomp_x⁵ -> string_of_int⁰(head_lz_lh(_lh_funcomp_x⁵))), iterate_lh((fun _lh_funcomp_x⁶ -> (fun _lh_funcomp_x⁷ -> carryPropagate_lh(2, map_lz_lh((fun a² -> (10 * a²)), _lh_funcomp_x⁷)))(tail_lz_lh(_lh_funcomp_x⁶))), lazy⁰([LH_C 2 enumFromThen_lh(1, 1)]))))))
//│ def enumFromThen_lh(a³, t⁵) = lazy⁰([LH_C a³ enumFromThen_lh(t⁵, ((2 * t⁵) - a³))])
//│ def head_lz_lh(ls⁴) = case force⁰(ls⁴) of {
//│ 	LH_C h¹ t¹ => h¹
//│ 	| LH_N  => error⁰}
//│ def iterate_lh(f³, x¹) = lazy⁰([LH_C x¹ iterate_lh(f³, f³(x¹))])
//│ def map_lz_lh(f², ls⁵) = lazy⁰(case force⁰(ls⁵) of {
//│ 	LH_C h⁰ t⁰ => [LH_C f²(h⁰) map_lz_lh(f², t⁰)]
//│ 	| LH_N  => [LH_N]})
//│ def tail_lz_lh(ls⁷) = case force⁰(ls⁷) of {
//│ 	LH_C h² t² => t²
//│ 	| LH_N  => error⁰}
//│ def take_lz_lh(n¹, ls⁶) = if (n¹ > 0) then case force⁰(ls⁶) of {
//│ 	LH_C h³ t⁴ => [LH_C h³ take_lz_lh((n¹ - 1), t⁴)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testDigitsOfE2_nofib_lh(_lh_testDigitsOfE2_nofib_arg1¹) = e_lh(_lh_testDigitsOfE2_nofib_arg1¹)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

