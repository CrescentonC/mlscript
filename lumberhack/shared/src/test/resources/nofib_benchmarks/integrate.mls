:NewParser
:ParseOnly

:lhInHaskell
:lhGenOCaml
sumFloat [] = 0.0
sumFloat (h:t) = h +. (sumFloat t)
enumFromFloat a = lazy (a:(enumFromFloat (a +. 1.0)))
integrate1D l u f =
  let d = (u -. l) /. 8.0 in
     d *. (sumFloat
      [ (f l) *. 0.5,
        f (l +. d),
        f (l +. (2.0 *. d)),
        f (l +. (3.0 *. d)),
        f (l +. (4.0 *. d)),
        f (u -. (3.0 *. d)),
        f (u -. (2.0 *. d)),
        f (u -. d),
        (f u) *. 0.5])
integrate2D l1 u1 l2 u2 f = integrate1D l2 u2
            (\y -> integrate1D l1 u1
              (\x -> f x y))
zark u v = integrate2D 0.0 u 0.0 v (\x -> (\y -> x *. y))
ints _ = enumFromFloat 1.0
zarks _ = zipWith_lz_lz zark (ints 0) (map_lz (\n -> 2.0 *. n) (ints 0))
rtotals _ = lazy ((head_lz (zarks 0)) : (zipWith_lz_lz (\a b -> a +. b) (tail_lz (zarks 0)) (rtotals 0)))
rtotal n = atIndex_lz n (rtotals 0)
is _ = map_lz (\a -> a *. a *. a *. a) (ints 0)
itotals _ = lazy ((head_lz (is 0)) : (zipWith_lz_lz (\a b -> a +. b) (tail_lz (is 0)) (itotals 0)))
itotal n = atIndex_lz n (itotals 0)
etotal n = sumFloat (take_lz n (map_lz (\a -> a *. a) (zipWith_lz_lz (\a b -> a -. b) (rtotals 0) (itotals 0))))
testIntegrate_nofib n = etotal n
testIntegrate_nofib $ primId 100
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testIntegrate_nofib_lh_₁^719(primId⁰(100))
//│ def enumFromFloat_lh_₁(_lh_enumFromFloat_arg1¹) = lazy⁰([LH_C _lh_enumFromFloat_arg1¹ enumFromFloat_lh_₁^175((_lh_enumFromFloat_arg1¹ +. 1.0))])
//│ def enumFromFloat_lh_₂(_lh_enumFromFloat_arg1⁰) = lazy⁰([LH_C _lh_enumFromFloat_arg1⁰ enumFromFloat_lh_₂^139((_lh_enumFromFloat_arg1⁰ +. 1.0))])
//│ def etotal_lh_₁(_lh_etotal_arg1⁰) = sumFloat_lh_₁^682(take_lz_lh_₁^683(_lh_etotal_arg1⁰, map_lz_lh_₁^686((fun a⁴ -> (a⁴ *. a⁴)), zipWith_lz_lz_lh_₁^694((fun a⁵ -> (fun b² -> (a⁵ -. b²))), rtotals_lh_₁^703(0), itotals_lh_₁^707(0)))))
//│ def head_lz_lh_₁(ls⁷) = case force⁰(ls⁷) of {
//│ 	LH_C h⁷ t⁷ => h⁷
//│ 	| LH_N  => error⁰}
//│ def head_lz_lh_₂(ls⁵) = case force⁰(ls⁵) of {
//│ 	LH_C h⁵ t⁵ => h⁵
//│ 	| LH_N  => error⁰}
//│ def integrate1D_lh_₁(_lh_integrate1D_arg1⁰, _lh_integrate1D_arg2⁰, _lh_integrate1D_arg3⁰) = 
//│ 	let d⁰ = ((_lh_integrate1D_arg2⁰ -. _lh_integrate1D_arg1⁰) /. 8.0)
//│ 	in (d⁰ *. sumFloat_lh_₁^13([LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg1⁰) *. 0.5) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. d⁰)) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]]]]))
//│ def integrate2D_lh_₁(_lh_integrate2D_arg1¹, _lh_integrate2D_arg2¹, _lh_integrate2D_arg3¹, _lh_integrate2D_arg4¹, _lh_integrate2D_arg5¹) = integrate1D_lh_₁^149(_lh_integrate2D_arg3¹, _lh_integrate2D_arg4¹, (fun y¹ -> integrate1D_lh_₁^154(_lh_integrate2D_arg1¹, _lh_integrate2D_arg2¹, (fun x¹ -> _lh_integrate2D_arg5¹(x¹, y¹)))))
//│ def integrate2D_lh_₂(_lh_integrate2D_arg1⁰, _lh_integrate2D_arg2⁰, _lh_integrate2D_arg3⁰, _lh_integrate2D_arg4⁰, _lh_integrate2D_arg5⁰) = integrate1D_lh_₁^113(_lh_integrate2D_arg3⁰, _lh_integrate2D_arg4⁰, (fun y⁰ -> integrate1D_lh_₁^118(_lh_integrate2D_arg1⁰, _lh_integrate2D_arg2⁰, (fun x⁰ -> _lh_integrate2D_arg5⁰(x⁰, y⁰)))))
//│ def ints_lh_₁(_lh_ints_arg1⁵) = enumFromFloat_lh_₁^325(1.0)
//│ def ints_lh_₂(_lh_ints_arg1⁴) = enumFromFloat_lh_₂^302(1.0)
//│ def ints_lh_₃(_lh_ints_arg1³) = enumFromFloat_lh_₂^251(1.0)
//│ def ints_lh_₄(_lh_ints_arg1²) = enumFromFloat_lh_₂^229(1.0)
//│ def ints_lh_₅(_lh_ints_arg1¹) = enumFromFloat_lh_₂^207(1.0)
//│ def ints_lh_₆(_lh_ints_arg1⁰) = enumFromFloat_lh_₂^185(1.0)
//│ def is_lh_₁(_lh_is_arg1¹) = map_lz_lh_₄^438((fun a¹ -> (((a¹ *. a¹) *. a¹) *. a¹)), ints_lh_₅^454(0))
//│ def is_lh_₂(_lh_is_arg1⁰) = map_lz_lh_₅^375((fun a⁰ -> (((a⁰ *. a⁰) *. a⁰) *. a⁰)), ints_lh_₆^391(0))
//│ def itotals_lh_₁(_lh_itotals_arg1⁰) = lazy⁰([LH_C head_lz_lh_₂^556(is_lh_₂^557(0)) zipWith_lz_lz_lh_₃^561((fun a² -> (fun b⁰ -> (a² +. b⁰))), tail_lz_lh_₂^570(is_lh_₁^571(0)), itotals_lh_₁^576(0))])
//│ def map_lz_lh_₁(f⁸, ls⁸) = lazy⁰(case force⁰(ls⁸) of {
//│ 	LH_C h⁸ t⁸ => [LH_C f⁸(h⁸) map_lz_lh_₁^590(f⁸, t⁸)]
//│ 	| LH_N  => [LH_N]})
//│ def map_lz_lh_₂(f⁵, ls³) = lazy⁰(case force⁰(ls³) of {
//│ 	LH_C h³ t³ => [LH_C f⁵(h³) map_lz_lh_₂^364(f⁵, t³)]
//│ 	| LH_N  => [LH_N]})
//│ def map_lz_lh_₃(f², ls²) = lazy⁰(case force⁰(ls²) of {
//│ 	LH_C h² t² => [LH_C f²(h²) map_lz_lh_₃^240(f², t²)]
//│ 	| LH_N  => [LH_N]})
//│ def map_lz_lh_₄(f¹, ls¹) = lazy⁰(case force⁰(ls¹) of {
//│ 	LH_C h¹ t¹ => [LH_C f¹(h¹) map_lz_lh_₄^218(f¹, t¹)]
//│ 	| LH_N  => [LH_N]})
//│ def map_lz_lh_₅(f⁰, ls⁰) = lazy⁰(case force⁰(ls⁰) of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh_₅^196(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]})
//│ def rtotals_lh_₁(_lh_rtotals_arg1⁰) = lazy⁰([LH_C head_lz_lh_₁^627(zarks_lh_₁^628(0)) zipWith_lz_lz_lh_₂^632((fun a³ -> (fun b¹ -> (a³ +. b¹))), tail_lz_lh_₁^641(zarks_lh_₂^642(0)), rtotals_lh_₁^647(0))])
//│ def sumFloat_lh_₁(_lh_sumFloat_arg1⁰) = case _lh_sumFloat_arg1⁰ of {
//│ 	LH_N  => 0.0
//│ 	| LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁^548(_lh_sumFloat_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def tail_lz_lh_₁(ls⁶) = case force⁰(ls⁶) of {
//│ 	LH_C h⁶ t⁶ => t⁶
//│ 	| LH_N  => error⁰}
//│ def tail_lz_lh_₂(ls⁴) = case force⁰(ls⁴) of {
//│ 	LH_C h⁴ t⁴ => t⁴
//│ 	| LH_N  => error⁰}
//│ def take_lz_lh_₁(n², ls⁹) = if (n² > 0) then case force⁰(ls⁹) of {
//│ 	LH_C h⁹ t⁹ => [LH_C h⁹ take_lz_lh_₁^610((n² - 1), t⁹)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testIntegrate_nofib_lh_₁(_lh_testIntegrate_nofib_arg1⁰) = etotal_lh_₁^715(_lh_testIntegrate_nofib_arg1⁰)
//│ def zark_lh_₁(_lh_zark_arg1¹, _lh_zark_arg2¹) = integrate2D_lh_₁^306(0.0, _lh_zark_arg1¹, 0.0, _lh_zark_arg2¹, (fun x³ -> (fun y³ -> (x³ *. y³))))
//│ def zark_lh_₂(_lh_zark_arg1⁰, _lh_zark_arg2⁰) = integrate2D_lh_₂^283(0.0, _lh_zark_arg1⁰, 0.0, _lh_zark_arg2⁰, (fun x² -> (fun y² -> (x² *. y²))))
//│ def zarks_lh_₁(_lh_zarks_arg1¹) = zipWith_lz_lz_lh_₄^522(zark_lh_₁^523, ints_lh_₁^525(0), map_lz_lh_₂^529((fun n¹ -> (2.0 *. n¹)), ints_lh_₂^537(0)))
//│ def zarks_lh_₂(_lh_zarks_arg1⁰) = zipWith_lz_lz_lh_₅^501(zark_lh_₂^502, ints_lh_₃^504(0), map_lz_lh_₃^508((fun n⁰ -> (2.0 *. n⁰)), ints_lh_₄^516(0)))
//│ def zipWith_lz_lz_lh_₁(f⁹, xs⁴, ys⁴) = lazy⁰(case force⁰(xs⁴) of {
//│ 	LH_C hx⁴ tx⁴ => case force⁰(ys⁴) of {
//│ 		LH_C hy⁴ ty⁴ => [LH_C f⁹(hx⁴, hy⁴) zipWith_lz_lz_lh_₁^666(f⁹, tx⁴, ty⁴)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_lz_lh_₂(f⁷, xs³, ys³) = lazy⁰(case force⁰(xs³) of {
//│ 	LH_C hx³ tx³ => case force⁰(ys³) of {
//│ 		LH_C hy³ ty³ => [LH_C f⁷(hx³, hy³) zipWith_lz_lz_lh_₂^471(f⁷, tx³, ty³)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_lz_lh_₃(f⁶, xs², ys²) = lazy⁰(case force⁰(xs²) of {
//│ 	LH_C hx² tx² => case force⁰(ys²) of {
//│ 		LH_C hy² ty² => [LH_C f⁶(hx², hy²) zipWith_lz_lz_lh_₃^415(f⁶, tx², ty²)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_lz_lh_₄(f⁴, xs¹, ys¹) = lazy⁰(case force⁰(xs¹) of {
//│ 	LH_C hx¹ tx¹ => case force⁰(ys¹) of {
//│ 		LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₄^341(f⁴, tx¹, ty¹)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_lz_lh_₅(f³, xs⁰, ys⁰) = lazy⁰(case force⁰(xs⁰) of {
//│ 	LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C f³(hx⁰, hy⁰) zipWith_lz_lz_lh_₅^267(f³, tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec map_lz_lh__d1 f_8 ls_8 =
//│ 		  (lazy (match (Lazy.force ls_8) with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      (`LH_C((f_8 h_8), ((map_lz_lh__d1 f_8) t_8)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec zipWith_lz_lz_lh__d3 f_6 xs_2 ys_2 =
//│ 		  (lazy (match (Lazy.force xs_2) with
//│ 		    | `LH_C(hx_2, tx_2) -> 
//│ 		      (match (Lazy.force ys_2) with
//│ 		        | `LH_C(hy_2, ty_2) -> 
//│ 		          (`LH_C(((f_6 hx_2) hy_2), (((zipWith_lz_lz_lh__d3 f_6) tx_2) ty_2)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec map_lz_lh__d5 f_0 ls_0 =
//│ 		  (lazy (match (Lazy.force ls_0) with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C((f_0 h_0), ((map_lz_lh__d5 f_0) t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec enumFromFloat_lh__d2 _lh_enumFromFloat_arg1_0 =
//│ 		  (lazy (`LH_C(_lh_enumFromFloat_arg1_0, (enumFromFloat_lh__d2 (_lh_enumFromFloat_arg1_0 +. 1.0)))));;
//│ 		let rec ints_lh__d6 _lh_ints_arg1_0 =
//│ 		  (enumFromFloat_lh__d2 1.0);;
//│ 		let rec is_lh__d2 _lh_is_arg1_0 =
//│ 		  ((map_lz_lh__d5 (fun a_0 -> 
//│ 		    (((a_0 *. a_0) *. a_0) *. a_0))) (ints_lh__d6 0));;
//│ 		let rec tail_lz_lh__d2 ls_4 =
//│ 		  (match (Lazy.force ls_4) with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      t_4
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec ints_lh__d5 _lh_ints_arg1_1 =
//│ 		  (enumFromFloat_lh__d2 1.0);;
//│ 		let rec map_lz_lh__d4 f_1 ls_1 =
//│ 		  (lazy (match (Lazy.force ls_1) with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (`LH_C((f_1 h_1), ((map_lz_lh__d4 f_1) t_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec is_lh__d1 _lh_is_arg1_1 =
//│ 		  ((map_lz_lh__d4 (fun a_1 -> 
//│ 		    (((a_1 *. a_1) *. a_1) *. a_1))) (ints_lh__d5 0));;
//│ 		let rec head_lz_lh__d2 ls_5 =
//│ 		  (match (Lazy.force ls_5) with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      h_5
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec itotals_lh__d1 _lh_itotals_arg1_0 =
//│ 		  (lazy (`LH_C((head_lz_lh__d2 (is_lh__d2 0)), (((zipWith_lz_lz_lh__d3 (fun a_2 b_0 -> 
//│ 		    (a_2 +. b_0))) (tail_lz_lh__d2 (is_lh__d1 0))) (itotals_lh__d1 0)))));;
//│ 		let rec sumFloat_lh__d1 _lh_sumFloat_arg1_0 =
//│ 		  (match _lh_sumFloat_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      0.0
//│ 		    | `LH_C(_lh_sumFloat_LH_C_0_0, _lh_sumFloat_LH_C_1_0) -> 
//│ 		      (_lh_sumFloat_LH_C_0_0 +. (sumFloat_lh__d1 _lh_sumFloat_LH_C_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec zipWith_lz_lz_lh__d1 f_9 xs_4 ys_4 =
//│ 		  (lazy (match (Lazy.force xs_4) with
//│ 		    | `LH_C(hx_4, tx_4) -> 
//│ 		      (match (Lazy.force ys_4) with
//│ 		        | `LH_C(hy_4, ty_4) -> 
//│ 		          (`LH_C(((f_9 hx_4) hy_4), (((zipWith_lz_lz_lh__d1 f_9) tx_4) ty_4)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec take_lz_lh__d1 n_2 ls_9 =
//│ 		  (if (n_2 > 0) then
//│ 		    (match (Lazy.force ls_9) with
//│ 		      | `LH_C(h_9, t_9) -> 
//│ 		        (`LH_C(h_9, ((take_lz_lh__d1 (n_2 - 1)) t_9)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec zipWith_lz_lz_lh__d2 f_7 xs_3 ys_3 =
//│ 		  (lazy (match (Lazy.force xs_3) with
//│ 		    | `LH_C(hx_3, tx_3) -> 
//│ 		      (match (Lazy.force ys_3) with
//│ 		        | `LH_C(hy_3, ty_3) -> 
//│ 		          (`LH_C(((f_7 hx_3) hy_3), (((zipWith_lz_lz_lh__d2 f_7) tx_3) ty_3)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec integrate1D_lh__d1 _lh_integrate1D_arg1_0 _lh_integrate1D_arg2_0 _lh_integrate1D_arg3_0 =
//│ 		  (let rec d_0 = ((_lh_integrate1D_arg2_0 -. _lh_integrate1D_arg1_0) /. 8.0) in
//│ 		    (d_0 *. (sumFloat_lh__d1 (`LH_C(((_lh_integrate1D_arg3_0 _lh_integrate1D_arg1_0) *. 0.5), (`LH_C((_lh_integrate1D_arg3_0 (_lh_integrate1D_arg1_0 +. d_0)), (`LH_C((_lh_integrate1D_arg3_0 (_lh_integrate1D_arg1_0 +. (2.0 *. d_0))), (`LH_C((_lh_integrate1D_arg3_0 (_lh_integrate1D_arg1_0 +. (3.0 *. d_0))), (`LH_C((_lh_integrate1D_arg3_0 (_lh_integrate1D_arg1_0 +. (4.0 *. d_0))), (`LH_C((_lh_integrate1D_arg3_0 (_lh_integrate1D_arg2_0 -. (3.0 *. d_0))), (`LH_C((_lh_integrate1D_arg3_0 (_lh_integrate1D_arg2_0 -. (2.0 *. d_0))), (`LH_C((_lh_integrate1D_arg3_0 (_lh_integrate1D_arg2_0 -. d_0)), (`LH_C(((_lh_integrate1D_arg3_0 _lh_integrate1D_arg2_0) *. 0.5), (`LH_N))))))))))))))))))))));;
//│ 		let rec integrate2D_lh__d1 _lh_integrate2D_arg1_1 _lh_integrate2D_arg2_1 _lh_integrate2D_arg3_1 _lh_integrate2D_arg4_1 _lh_integrate2D_arg5_1 =
//│ 		  (((integrate1D_lh__d1 _lh_integrate2D_arg3_1) _lh_integrate2D_arg4_1) (fun y_1 -> 
//│ 		    (((integrate1D_lh__d1 _lh_integrate2D_arg1_1) _lh_integrate2D_arg2_1) (fun x_1 -> 
//│ 		      ((_lh_integrate2D_arg5_1 x_1) y_1)))));;
//│ 		let rec zark_lh__d1 _lh_zark_arg1_1 _lh_zark_arg2_1 =
//│ 		  (((((integrate2D_lh__d1 0.0) _lh_zark_arg1_1) 0.0) _lh_zark_arg2_1) (fun x_3 y_3 -> 
//│ 		    (x_3 *. y_3)));;
//│ 		let rec ints_lh__d2 _lh_ints_arg1_4 =
//│ 		  (enumFromFloat_lh__d2 1.0);;
//│ 		let rec zipWith_lz_lz_lh__d4 f_4 xs_1 ys_1 =
//│ 		  (lazy (match (Lazy.force xs_1) with
//│ 		    | `LH_C(hx_1, tx_1) -> 
//│ 		      (match (Lazy.force ys_1) with
//│ 		        | `LH_C(hy_1, ty_1) -> 
//│ 		          (`LH_C(((f_4 hx_1) hy_1), (((zipWith_lz_lz_lh__d4 f_4) tx_1) ty_1)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec enumFromFloat_lh__d1 _lh_enumFromFloat_arg1_1 =
//│ 		  (lazy (`LH_C(_lh_enumFromFloat_arg1_1, (enumFromFloat_lh__d1 (_lh_enumFromFloat_arg1_1 +. 1.0)))));;
//│ 		let rec ints_lh__d1 _lh_ints_arg1_5 =
//│ 		  (enumFromFloat_lh__d1 1.0);;
//│ 		let rec map_lz_lh__d2 f_5 ls_3 =
//│ 		  (lazy (match (Lazy.force ls_3) with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      (`LH_C((f_5 h_3), ((map_lz_lh__d2 f_5) t_3)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec zarks_lh__d1 _lh_zarks_arg1_1 =
//│ 		  (((zipWith_lz_lz_lh__d4 zark_lh__d1) (ints_lh__d1 0)) ((map_lz_lh__d2 (fun n_1 -> 
//│ 		    (2.0 *. n_1))) (ints_lh__d2 0)));;
//│ 		let rec head_lz_lh__d1 ls_7 =
//│ 		  (match (Lazy.force ls_7) with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      h_7
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec map_lz_lh__d3 f_2 ls_2 =
//│ 		  (lazy (match (Lazy.force ls_2) with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C((f_2 h_2), ((map_lz_lh__d3 f_2) t_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec ints_lh__d3 _lh_ints_arg1_3 =
//│ 		  (enumFromFloat_lh__d2 1.0);;
//│ 		let rec ints_lh__d4 _lh_ints_arg1_2 =
//│ 		  (enumFromFloat_lh__d2 1.0);;
//│ 		let rec integrate2D_lh__d2 _lh_integrate2D_arg1_0 _lh_integrate2D_arg2_0 _lh_integrate2D_arg3_0 _lh_integrate2D_arg4_0 _lh_integrate2D_arg5_0 =
//│ 		  (((integrate1D_lh__d1 _lh_integrate2D_arg3_0) _lh_integrate2D_arg4_0) (fun y_0 -> 
//│ 		    (((integrate1D_lh__d1 _lh_integrate2D_arg1_0) _lh_integrate2D_arg2_0) (fun x_0 -> 
//│ 		      ((_lh_integrate2D_arg5_0 x_0) y_0)))));;
//│ 		let rec zark_lh__d2 _lh_zark_arg1_0 _lh_zark_arg2_0 =
//│ 		  (((((integrate2D_lh__d2 0.0) _lh_zark_arg1_0) 0.0) _lh_zark_arg2_0) (fun x_2 y_2 -> 
//│ 		    (x_2 *. y_2)));;
//│ 		let rec zipWith_lz_lz_lh__d5 f_3 xs_0 ys_0 =
//│ 		  (lazy (match (Lazy.force xs_0) with
//│ 		    | `LH_C(hx_0, tx_0) -> 
//│ 		      (match (Lazy.force ys_0) with
//│ 		        | `LH_C(hy_0, ty_0) -> 
//│ 		          (`LH_C(((f_3 hx_0) hy_0), (((zipWith_lz_lz_lh__d5 f_3) tx_0) ty_0)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec zarks_lh__d2 _lh_zarks_arg1_0 =
//│ 		  (((zipWith_lz_lz_lh__d5 zark_lh__d2) (ints_lh__d3 0)) ((map_lz_lh__d3 (fun n_0 -> 
//│ 		    (2.0 *. n_0))) (ints_lh__d4 0)));;
//│ 		let rec tail_lz_lh__d1 ls_6 =
//│ 		  (match (Lazy.force ls_6) with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      t_6
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec rtotals_lh__d1 _lh_rtotals_arg1_0 =
//│ 		  (lazy (`LH_C((head_lz_lh__d1 (zarks_lh__d1 0)), (((zipWith_lz_lz_lh__d2 (fun a_3 b_1 -> 
//│ 		    (a_3 +. b_1))) (tail_lz_lh__d1 (zarks_lh__d2 0))) (rtotals_lh__d1 0)))));;
//│ 		let rec etotal_lh__d1 _lh_etotal_arg1_0 =
//│ 		  (sumFloat_lh__d1 ((take_lz_lh__d1 _lh_etotal_arg1_0) ((map_lz_lh__d1 (fun a_4 -> 
//│ 		    (a_4 *. a_4))) (((zipWith_lz_lz_lh__d1 (fun a_5 b_2 -> 
//│ 		    (a_5 -. b_2))) (rtotals_lh__d1 0)) (itotals_lh__d1 0)))));;
//│ 		let rec testIntegrate_nofib_lh__d1 _lh_testIntegrate_nofib_arg1_0 =
//│ 		  (etotal_lh__d1 _lh_testIntegrate_nofib_arg1_0);;
//│ 		(testIntegrate_nofib_lh__d1 100)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 97 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]: 98 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]: 99 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]: 100 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]: 101 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]: 102 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]: 103 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]]: 104 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. d⁰)) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]]]: 105 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg1⁰) *. 0.5) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. d⁰)) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]]]]: 106 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C _lh_enumFromFloat_arg1⁰ enumFromFloat_lh_₂((_lh_enumFromFloat_arg1⁰ +. 1.0))]: 146 --->
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh_₅(f⁰, t⁰)] | LH_N  => [LH_N]}: 203
//│ 	case force⁰(ls¹) of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lz_lh_₄(f¹, t¹)] | LH_N  => [LH_N]}: 225
//│ 	case force⁰(ls²) of {LH_C h² t² => [LH_C f²(h²) map_lz_lh_₃(f², t²)] | LH_N  => [LH_N]}: 247
//│ 	case force⁰(xs⁰) of {LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f³(hx⁰, hy⁰) zipWith_lz_lz_lh_₅(f³, tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 278
//│ 	case force⁰(ls³) of {LH_C h³ t³ => [LH_C f⁵(h³) map_lz_lh_₂(f⁵, t³)] | LH_N  => [LH_N]}: 371
//│ [LH_C _lh_enumFromFloat_arg1¹ enumFromFloat_lh_₁((_lh_enumFromFloat_arg1¹ +. 1.0))]: 182 --->
//│ 	case force⁰(xs¹) of {LH_C hx¹ tx¹ => case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₄(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 352
//│ [LH_C f⁰(h⁰) map_lz_lh_₅(f⁰, t⁰)]: 201 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁵) of {LH_C h⁵ t⁵ => h⁵ | LH_N  => error⁰}: 436
//│ [LH_N]: 202 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁵) of {LH_C h⁵ t⁵ => h⁵ | LH_N  => error⁰}: 436
//│ [LH_C f¹(h¹) map_lz_lh_₄(f¹, t¹)]: 223 --->
//│ 	case force⁰(ls⁴) of {LH_C h⁴ t⁴ => t⁴ | LH_N  => error⁰}: 401
//│ 	case force⁰(xs²) of {LH_C hx² tx² => case force⁰(ys²) of {LH_C hy² ty² => [LH_C f⁶(hx², hy²) zipWith_lz_lz_lh_₃(f⁶, tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 426
//│ [LH_N]: 224 --->
//│ 	case force⁰(ls⁴) of {LH_C h⁴ t⁴ => t⁴ | LH_N  => error⁰}: 401
//│ 	case force⁰(xs²) of {LH_C hx² tx² => case force⁰(ys²) of {LH_C hy² ty² => [LH_C f⁶(hx², hy²) zipWith_lz_lz_lh_₃(f⁶, tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 426
//│ [LH_C f²(h²) map_lz_lh_₃(f², t²)]: 245 --->
//│ 	case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f³(hx⁰, hy⁰) zipWith_lz_lz_lh_₅(f³, tx⁰, ty⁰)] | LH_N  => [LH_N]}: 276
//│ [LH_N]: 246 --->
//│ 	case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f³(hx⁰, hy⁰) zipWith_lz_lz_lh_₅(f³, tx⁰, ty⁰)] | LH_N  => [LH_N]}: 276
//│ [LH_C f³(hx⁰, hy⁰) zipWith_lz_lz_lh_₅(f³, tx⁰, ty⁰)]: 274 --->
//│ 	case force⁰(xs³) of {LH_C hx³ tx³ => case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f⁷(hx³, hy³) zipWith_lz_lz_lh_₂(f⁷, tx³, ty³)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 482
//│ 	case force⁰(ls⁶) of {LH_C h⁶ t⁶ => t⁶ | LH_N  => error⁰}: 492
//│ [LH_N]: 275 --->
//│ 	case force⁰(xs³) of {LH_C hx³ tx³ => case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f⁷(hx³, hy³) zipWith_lz_lz_lh_₂(f⁷, tx³, ty³)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 482
//│ 	case force⁰(ls⁶) of {LH_C h⁶ t⁶ => t⁶ | LH_N  => error⁰}: 492
//│ [LH_N]: 277 --->
//│ 	case force⁰(xs³) of {LH_C hx³ tx³ => case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f⁷(hx³, hy³) zipWith_lz_lz_lh_₂(f⁷, tx³, ty³)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 482
//│ 	case force⁰(ls⁶) of {LH_C h⁶ t⁶ => t⁶ | LH_N  => error⁰}: 492
//│ [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₄(f⁴, tx¹, ty¹)]: 348 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁷) of {LH_C h⁷ t⁷ => h⁷ | LH_N  => error⁰}: 499
//│ [LH_N]: 349 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁷) of {LH_C h⁷ t⁷ => h⁷ | LH_N  => error⁰}: 499
//│ [LH_N]: 351 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁷) of {LH_C h⁷ t⁷ => h⁷ | LH_N  => error⁰}: 499
//│ [LH_C f⁵(h³) map_lz_lh_₂(f⁵, t³)]: 369 --->
//│ 	case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₄(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]}: 350
//│ [LH_N]: 370 --->
//│ 	case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₄(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]}: 350
//│ [LH_C f⁶(hx², hy²) zipWith_lz_lz_lh_₃(f⁶, tx², ty²)]: 422 --->
//│ 	case force⁰(ys²) of {LH_C hy² ty² => [LH_C f⁶(hx², hy²) zipWith_lz_lz_lh_₃(f⁶, tx², ty²)] | LH_N  => [LH_N]}: 424
//│ 	case force⁰(ys⁴) of {LH_C hy⁴ ty⁴ => [LH_C f⁹(hx⁴, hy⁴) zipWith_lz_lz_lh_₁(f⁹, tx⁴, ty⁴)] | LH_N  => [LH_N]}: 675
//│ [LH_N]: 423 --->
//│ 	case force⁰(ys²) of {LH_C hy² ty² => [LH_C f⁶(hx², hy²) zipWith_lz_lz_lh_₃(f⁶, tx², ty²)] | LH_N  => [LH_N]}: 424
//│ 	case force⁰(ys⁴) of {LH_C hy⁴ ty⁴ => [LH_C f⁹(hx⁴, hy⁴) zipWith_lz_lz_lh_₁(f⁹, tx⁴, ty⁴)] | LH_N  => [LH_N]}: 675
//│ [LH_N]: 425 --->
//│ 	case force⁰(ys²) of {LH_C hy² ty² => [LH_C f⁶(hx², hy²) zipWith_lz_lz_lh_₃(f⁶, tx², ty²)] | LH_N  => [LH_N]}: 424
//│ 	case force⁰(ys⁴) of {LH_C hy⁴ ty⁴ => [LH_C f⁹(hx⁴, hy⁴) zipWith_lz_lz_lh_₁(f⁹, tx⁴, ty⁴)] | LH_N  => [LH_N]}: 675
//│ [LH_C f⁷(hx³, hy³) zipWith_lz_lz_lh_₂(f⁷, tx³, ty³)]: 478 --->
//│ 	case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f⁷(hx³, hy³) zipWith_lz_lz_lh_₂(f⁷, tx³, ty³)] | LH_N  => [LH_N]}: 480
//│ 	case force⁰(xs⁴) of {LH_C hx⁴ tx⁴ => case force⁰(ys⁴) of {LH_C hy⁴ ty⁴ => [LH_C f⁹(hx⁴, hy⁴) zipWith_lz_lz_lh_₁(f⁹, tx⁴, ty⁴)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 677
//│ [LH_N]: 479 --->
//│ 	case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f⁷(hx³, hy³) zipWith_lz_lz_lh_₂(f⁷, tx³, ty³)] | LH_N  => [LH_N]}: 480
//│ 	case force⁰(xs⁴) of {LH_C hx⁴ tx⁴ => case force⁰(ys⁴) of {LH_C hy⁴ ty⁴ => [LH_C f⁹(hx⁴, hy⁴) zipWith_lz_lz_lh_₁(f⁹, tx⁴, ty⁴)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 677
//│ [LH_N]: 481 --->
//│ 	case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f⁷(hx³, hy³) zipWith_lz_lz_lh_₂(f⁷, tx³, ty³)] | LH_N  => [LH_N]}: 480
//│ 	case force⁰(xs⁴) of {LH_C hx⁴ tx⁴ => case force⁰(ys⁴) of {LH_C hy⁴ ty⁴ => [LH_C f⁹(hx⁴, hy⁴) zipWith_lz_lz_lh_₁(f⁹, tx⁴, ty⁴)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 677
//│ [LH_C head_lz_lh_₂(is_lh_₂(0)) zipWith_lz_lz_lh_₃((fun a² -> (fun b⁰ -> (a² +. b⁰))), tail_lz_lh_₂(is_lh_₁(0)), itotals_lh_₁(0))]: 580 --->
//│ 	case force⁰(ys²) of {LH_C hy² ty² => [LH_C f⁶(hx², hy²) zipWith_lz_lz_lh_₃(f⁶, tx², ty²)] | LH_N  => [LH_N]}: 424
//│ 	case force⁰(ys⁴) of {LH_C hy⁴ ty⁴ => [LH_C f⁹(hx⁴, hy⁴) zipWith_lz_lz_lh_₁(f⁹, tx⁴, ty⁴)] | LH_N  => [LH_N]}: 675
//│ [LH_C f⁸(h⁸) map_lz_lh_₁(f⁸, t⁸)]: 595 --->
//│ 	case force⁰(ls⁹) of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lz_lh_₁((n² - 1), t⁹)] | LH_N  => [LH_N]}: 621
//│ [LH_N]: 596 --->
//│ 	case force⁰(ls⁹) of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lz_lh_₁((n² - 1), t⁹)] | LH_N  => [LH_N]}: 621
//│ [LH_C h⁹ take_lz_lh_₁((n² - 1), t⁹)]: 619 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_N]: 620 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_N]: 622 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C head_lz_lh_₁(zarks_lh_₁(0)) zipWith_lz_lz_lh_₂((fun a³ -> (fun b¹ -> (a³ +. b¹))), tail_lz_lh_₁(zarks_lh_₂(0)), rtotals_lh_₁(0))]: 651 --->
//│ 	case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f⁷(hx³, hy³) zipWith_lz_lz_lh_₂(f⁷, tx³, ty³)] | LH_N  => [LH_N]}: 480
//│ 	case force⁰(xs⁴) of {LH_C hx⁴ tx⁴ => case force⁰(ys⁴) of {LH_C hy⁴ ty⁴ => [LH_C f⁹(hx⁴, hy⁴) zipWith_lz_lz_lh_₁(f⁹, tx⁴, ty⁴)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 677
//│ [LH_C f⁹(hx⁴, hy⁴) zipWith_lz_lz_lh_₁(f⁹, tx⁴, ty⁴)]: 673 --->
//│ 	case force⁰(ls⁸) of {LH_C h⁸ t⁸ => [LH_C f⁸(h⁸) map_lz_lh_₁(f⁸, t⁸)] | LH_N  => [LH_N]}: 597
//│ [LH_N]: 674 --->
//│ 	case force⁰(ls⁸) of {LH_C h⁸ t⁸ => [LH_C f⁸(h⁸) map_lz_lh_₁(f⁸, t⁸)] | LH_N  => [LH_N]}: 597
//│ [LH_N]: 676 --->
//│ 	case force⁰(ls⁸) of {LH_C h⁸ t⁸ => [LH_C f⁸(h⁸) map_lz_lh_₁(f⁸, t⁸)] | LH_N  => [LH_N]}: 597
//│ ------------------
//│ case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh_₅(f⁰, t⁰)] | LH_N  => [LH_N]}: 203 --->
//│ 	[LH_C _lh_enumFromFloat_arg1⁰ enumFromFloat_lh_₂((_lh_enumFromFloat_arg1⁰ +. 1.0))]: 146
//│ case force⁰(ls¹) of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lz_lh_₄(f¹, t¹)] | LH_N  => [LH_N]}: 225 --->
//│ 	[LH_C _lh_enumFromFloat_arg1⁰ enumFromFloat_lh_₂((_lh_enumFromFloat_arg1⁰ +. 1.0))]: 146
//│ case force⁰(ls²) of {LH_C h² t² => [LH_C f²(h²) map_lz_lh_₃(f², t²)] | LH_N  => [LH_N]}: 247 --->
//│ 	[LH_C _lh_enumFromFloat_arg1⁰ enumFromFloat_lh_₂((_lh_enumFromFloat_arg1⁰ +. 1.0))]: 146
//│ case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f³(hx⁰, hy⁰) zipWith_lz_lz_lh_₅(f³, tx⁰, ty⁰)] | LH_N  => [LH_N]}: 276 --->
//│ 	[LH_C f²(h²) map_lz_lh_₃(f², t²)]: 245
//│ 	[LH_N]: 246
//│ case force⁰(xs⁰) of {LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f³(hx⁰, hy⁰) zipWith_lz_lz_lh_₅(f³, tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 278 --->
//│ 	[LH_C _lh_enumFromFloat_arg1⁰ enumFromFloat_lh_₂((_lh_enumFromFloat_arg1⁰ +. 1.0))]: 146
//│ case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₄(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]}: 350 --->
//│ 	[LH_C f⁵(h³) map_lz_lh_₂(f⁵, t³)]: 369
//│ 	[LH_N]: 370
//│ case force⁰(xs¹) of {LH_C hx¹ tx¹ => case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₄(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 352 --->
//│ 	[LH_C _lh_enumFromFloat_arg1¹ enumFromFloat_lh_₁((_lh_enumFromFloat_arg1¹ +. 1.0))]: 182
//│ case force⁰(ls³) of {LH_C h³ t³ => [LH_C f⁵(h³) map_lz_lh_₂(f⁵, t³)] | LH_N  => [LH_N]}: 371 --->
//│ 	[LH_C _lh_enumFromFloat_arg1⁰ enumFromFloat_lh_₂((_lh_enumFromFloat_arg1⁰ +. 1.0))]: 146
//│ case force⁰(ls⁴) of {LH_C h⁴ t⁴ => t⁴ | LH_N  => error⁰}: 401 --->
//│ 	[LH_C f¹(h¹) map_lz_lh_₄(f¹, t¹)]: 223
//│ 	[LH_N]: 224
//│ case force⁰(ys²) of {LH_C hy² ty² => [LH_C f⁶(hx², hy²) zipWith_lz_lz_lh_₃(f⁶, tx², ty²)] | LH_N  => [LH_N]}: 424 --->
//│ 	[LH_C f⁶(hx², hy²) zipWith_lz_lz_lh_₃(f⁶, tx², ty²)]: 422
//│ 	[LH_N]: 423
//│ 	[LH_N]: 425
//│ 	[LH_C head_lz_lh_₂(is_lh_₂(0)) zipWith_lz_lz_lh_₃((fun a² -> (fun b⁰ -> (a² +. b⁰))), tail_lz_lh_₂(is_lh_₁(0)), itotals_lh_₁(0))]: 580
//│ case force⁰(xs²) of {LH_C hx² tx² => case force⁰(ys²) of {LH_C hy² ty² => [LH_C f⁶(hx², hy²) zipWith_lz_lz_lh_₃(f⁶, tx², ty²)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 426 --->
//│ 	[LH_C f¹(h¹) map_lz_lh_₄(f¹, t¹)]: 223
//│ 	[LH_N]: 224
//│ case force⁰(ls⁵) of {LH_C h⁵ t⁵ => h⁵ | LH_N  => error⁰}: 436 --->
//│ 	[LH_C f⁰(h⁰) map_lz_lh_₅(f⁰, t⁰)]: 201
//│ 	[LH_N]: 202
//│ case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f⁷(hx³, hy³) zipWith_lz_lz_lh_₂(f⁷, tx³, ty³)] | LH_N  => [LH_N]}: 480 --->
//│ 	[LH_C f⁷(hx³, hy³) zipWith_lz_lz_lh_₂(f⁷, tx³, ty³)]: 478
//│ 	[LH_N]: 479
//│ 	[LH_N]: 481
//│ 	[LH_C head_lz_lh_₁(zarks_lh_₁(0)) zipWith_lz_lz_lh_₂((fun a³ -> (fun b¹ -> (a³ +. b¹))), tail_lz_lh_₁(zarks_lh_₂(0)), rtotals_lh_₁(0))]: 651
//│ case force⁰(xs³) of {LH_C hx³ tx³ => case force⁰(ys³) of {LH_C hy³ ty³ => [LH_C f⁷(hx³, hy³) zipWith_lz_lz_lh_₂(f⁷, tx³, ty³)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 482 --->
//│ 	[LH_C f³(hx⁰, hy⁰) zipWith_lz_lz_lh_₅(f³, tx⁰, ty⁰)]: 274
//│ 	[LH_N]: 275
//│ 	[LH_N]: 277
//│ case force⁰(ls⁶) of {LH_C h⁶ t⁶ => t⁶ | LH_N  => error⁰}: 492 --->
//│ 	[LH_C f³(hx⁰, hy⁰) zipWith_lz_lz_lh_₅(f³, tx⁰, ty⁰)]: 274
//│ 	[LH_N]: 275
//│ 	[LH_N]: 277
//│ case force⁰(ls⁷) of {LH_C h⁷ t⁷ => h⁷ | LH_N  => error⁰}: 499 --->
//│ 	[LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₄(f⁴, tx¹, ty¹)]: 348
//│ 	[LH_N]: 349
//│ 	[LH_N]: 351
//│ case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553 --->
//│ 	[LH_N]: 97
//│ 	[LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]: 98
//│ 	[LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]: 99
//│ 	[LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]: 100
//│ 	[LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]: 101
//│ 	[LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]: 102
//│ 	[LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]: 103
//│ 	[LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]]: 104
//│ 	[LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. d⁰)) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]]]: 105
//│ 	[LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg1⁰) *. 0.5) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. d⁰)) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]]]]: 106
//│ 	[LH_C h⁹ take_lz_lh_₁((n² - 1), t⁹)]: 619
//│ 	[LH_N]: 620
//│ 	[LH_N]: 622
//│ case force⁰(ls⁸) of {LH_C h⁸ t⁸ => [LH_C f⁸(h⁸) map_lz_lh_₁(f⁸, t⁸)] | LH_N  => [LH_N]}: 597 --->
//│ 	[LH_C f⁹(hx⁴, hy⁴) zipWith_lz_lz_lh_₁(f⁹, tx⁴, ty⁴)]: 673
//│ 	[LH_N]: 674
//│ 	[LH_N]: 676
//│ case force⁰(ls⁹) of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lz_lh_₁((n² - 1), t⁹)] | LH_N  => [LH_N]}: 621 --->
//│ 	[LH_C f⁸(h⁸) map_lz_lh_₁(f⁸, t⁸)]: 595
//│ 	[LH_N]: 596
//│ case force⁰(ys⁴) of {LH_C hy⁴ ty⁴ => [LH_C f⁹(hx⁴, hy⁴) zipWith_lz_lz_lh_₁(f⁹, tx⁴, ty⁴)] | LH_N  => [LH_N]}: 675 --->
//│ 	[LH_C f⁶(hx², hy²) zipWith_lz_lz_lh_₃(f⁶, tx², ty²)]: 422
//│ 	[LH_N]: 423
//│ 	[LH_N]: 425
//│ 	[LH_C head_lz_lh_₂(is_lh_₂(0)) zipWith_lz_lz_lh_₃((fun a² -> (fun b⁰ -> (a² +. b⁰))), tail_lz_lh_₂(is_lh_₁(0)), itotals_lh_₁(0))]: 580
//│ case force⁰(xs⁴) of {LH_C hx⁴ tx⁴ => case force⁰(ys⁴) of {LH_C hy⁴ ty⁴ => [LH_C f⁹(hx⁴, hy⁴) zipWith_lz_lz_lh_₁(f⁹, tx⁴, ty⁴)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 677 --->
//│ 	[LH_C f⁷(hx³, hy³) zipWith_lz_lz_lh_₂(f⁷, tx³, ty³)]: 478
//│ 	[LH_N]: 479
//│ 	[LH_N]: 481
//│ 	[LH_C head_lz_lh_₁(zarks_lh_₁(0)) zipWith_lz_lz_lh_₂((fun a³ -> (fun b¹ -> (a³ +. b¹))), tail_lz_lh_₁(zarks_lh_₂(0)), rtotals_lh_₁(0))]: 651
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_N]: 97 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]: 98 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]: 99 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]: 100 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]: 101 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]: 102 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]: 103 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]]: 104 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. d⁰)) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]]]: 105 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg1⁰) *. 0.5) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. d⁰)) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]]]]: 106 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C _lh_enumFromFloat_arg1¹ enumFromFloat_lh_₁((_lh_enumFromFloat_arg1¹ +. 1.0))]: 182 --->
//│ 	case force⁰(xs¹) of {LH_C hx¹ tx¹ => case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₄(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 352
//│ [LH_C f²(h²) map_lz_lh_₃(f², t²)]: 245 --->
//│ 	case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f³(hx⁰, hy⁰) zipWith_lz_lz_lh_₅(f³, tx⁰, ty⁰)] | LH_N  => [LH_N]}: 276
//│ [LH_N]: 246 --->
//│ 	case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f³(hx⁰, hy⁰) zipWith_lz_lz_lh_₅(f³, tx⁰, ty⁰)] | LH_N  => [LH_N]}: 276
//│ [LH_C f⁵(h³) map_lz_lh_₂(f⁵, t³)]: 369 --->
//│ 	case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₄(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]}: 350
//│ [LH_N]: 370 --->
//│ 	case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₄(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]}: 350
//│ [LH_C f⁸(h⁸) map_lz_lh_₁(f⁸, t⁸)]: 595 --->
//│ 	case force⁰(ls⁹) of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lz_lh_₁((n² - 1), t⁹)] | LH_N  => [LH_N]}: 621
//│ [LH_N]: 596 --->
//│ 	case force⁰(ls⁹) of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lz_lh_₁((n² - 1), t⁹)] | LH_N  => [LH_N]}: 621
//│ [LH_C h⁹ take_lz_lh_₁((n² - 1), t⁹)]: 619 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_N]: 620 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_N]: 622 --->
//│ 	case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553
//│ [LH_C f⁹(hx⁴, hy⁴) zipWith_lz_lz_lh_₁(f⁹, tx⁴, ty⁴)]: 673 --->
//│ 	case force⁰(ls⁸) of {LH_C h⁸ t⁸ => [LH_C f⁸(h⁸) map_lz_lh_₁(f⁸, t⁸)] | LH_N  => [LH_N]}: 597
//│ [LH_N]: 674 --->
//│ 	case force⁰(ls⁸) of {LH_C h⁸ t⁸ => [LH_C f⁸(h⁸) map_lz_lh_₁(f⁸, t⁸)] | LH_N  => [LH_N]}: 597
//│ [LH_N]: 676 --->
//│ 	case force⁰(ls⁸) of {LH_C h⁸ t⁸ => [LH_C f⁸(h⁸) map_lz_lh_₁(f⁸, t⁸)] | LH_N  => [LH_N]}: 597
//│ ------------------
//│ case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f³(hx⁰, hy⁰) zipWith_lz_lz_lh_₅(f³, tx⁰, ty⁰)] | LH_N  => [LH_N]}: 276 --->
//│ 	[LH_C f²(h²) map_lz_lh_₃(f², t²)]: 245
//│ 	[LH_N]: 246
//│ case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₄(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]}: 350 --->
//│ 	[LH_C f⁵(h³) map_lz_lh_₂(f⁵, t³)]: 369
//│ 	[LH_N]: 370
//│ case force⁰(xs¹) of {LH_C hx¹ tx¹ => case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f⁴(hx¹, hy¹) zipWith_lz_lz_lh_₄(f⁴, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 352 --->
//│ 	[LH_C _lh_enumFromFloat_arg1¹ enumFromFloat_lh_₁((_lh_enumFromFloat_arg1¹ +. 1.0))]: 182
//│ case _lh_sumFloat_arg1⁰ of {LH_N  => 0.0 | LH_C _lh_sumFloat_LH_C_0⁰ _lh_sumFloat_LH_C_1⁰ => (_lh_sumFloat_LH_C_0⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁰)) | _  => error⁰}: 553 --->
//│ 	[LH_N]: 97
//│ 	[LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]: 98
//│ 	[LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]: 99
//│ 	[LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]: 100
//│ 	[LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]: 101
//│ 	[LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]: 102
//│ 	[LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]: 103
//│ 	[LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]]: 104
//│ 	[LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. d⁰)) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]]]: 105
//│ 	[LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg1⁰) *. 0.5) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. d⁰)) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰))) [LH_C _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰)) [LH_C (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5) [LH_N]]]]]]]]]]: 106
//│ 	[LH_C h⁹ take_lz_lh_₁((n² - 1), t⁹)]: 619
//│ 	[LH_N]: 620
//│ 	[LH_N]: 622
//│ case force⁰(ls⁸) of {LH_C h⁸ t⁸ => [LH_C f⁸(h⁸) map_lz_lh_₁(f⁸, t⁸)] | LH_N  => [LH_N]}: 597 --->
//│ 	[LH_C f⁹(hx⁴, hy⁴) zipWith_lz_lz_lh_₁(f⁹, tx⁴, ty⁴)]: 673
//│ 	[LH_N]: 674
//│ 	[LH_N]: 676
//│ case force⁰(ls⁹) of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lz_lh_₁((n² - 1), t⁹)] | LH_N  => [LH_N]}: 621 --->
//│ 	[LH_C f⁸(h⁸) map_lz_lh_₁(f⁸, t⁸)]: 595
//│ 	[LH_N]: 596
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testIntegrate_nofib_lh_₁(primId⁰(100))
//│ def enumFromFloat_lh_₁(_lh_enumFromFloat_arg1³) = lazy⁰(
//│ 	let tx⁷ = enumFromFloat_lh_₁((_lh_enumFromFloat_arg1³ +. 1.0))
//│ 	in let hx⁷ = _lh_enumFromFloat_arg1³
//│ 	in (fun f²³ -> (fun ys¹⁰ -> force⁰(ys¹⁰, f²³, hx⁷, tx⁷))))
//│ def enumFromFloat_lh_₂(_lh_enumFromFloat_arg1²) = lazy⁰([LH_C _lh_enumFromFloat_arg1² enumFromFloat_lh_₂((_lh_enumFromFloat_arg1² +. 1.0))])
//│ def etotal_lh_₁(_lh_etotal_arg1¹) = sumFloat_lh_₁(take_lz_lh_₁(_lh_etotal_arg1¹, map_lz_lh_₁((fun a⁹ -> (a⁹ *. a⁹)), zipWith_lz_lz_lh_₁((fun a¹⁰ -> (fun b⁴ -> (a¹⁰ -. b⁴))), rtotals_lh_₁(0), itotals_lh_₁(0)))))
//│ def head_lz_lh_₁(ls¹²) = case force⁰(ls¹²) of {
//│ 	LH_C h⁷ t⁷ => h⁷
//│ 	| LH_N  => error⁰}
//│ def head_lz_lh_₂(ls¹³) = case force⁰(ls¹³) of {
//│ 	LH_C h⁵ t⁵ => h⁵
//│ 	| LH_N  => error⁰}
//│ def integrate1D_lh_₁(_lh_integrate1D_arg1¹, _lh_integrate1D_arg2¹, _lh_integrate1D_arg3¹) = 
//│ 	let d¹ = ((_lh_integrate1D_arg2¹ -. _lh_integrate1D_arg1¹) /. 8.0)
//│ 	in (d¹ *. sumFloat_lh_₁(
//│ 		let _lh_sumFloat_LH_C_1² = 	
//│ 			let _lh_sumFloat_LH_C_1³ = 	
//│ 				let _lh_sumFloat_LH_C_1⁴ = 	
//│ 					let _lh_sumFloat_LH_C_1⁵ = 	
//│ 						let _lh_sumFloat_LH_C_1⁶ = 	
//│ 							let _lh_sumFloat_LH_C_1⁷ = 	
//│ 								let _lh_sumFloat_LH_C_1⁸ = 	
//│ 									let _lh_sumFloat_LH_C_1⁹ = 	
//│ 										let _lh_sumFloat_LH_C_1¹⁰ = (fun _lh_dummy¹² -> 0.0)
//│ 										in let _lh_sumFloat_LH_C_0¹⁰ = (_lh_integrate1D_arg3¹(_lh_integrate1D_arg2¹) *. 0.5)
//│ 										in (fun _lh_dummy¹¹ -> (_lh_sumFloat_LH_C_0¹⁰ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1¹⁰)))
//│ 									in let _lh_sumFloat_LH_C_0⁹ = _lh_integrate1D_arg3¹((_lh_integrate1D_arg2¹ -. d¹))
//│ 									in (fun _lh_dummy¹⁰ -> (_lh_sumFloat_LH_C_0⁹ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁹)))
//│ 								in let _lh_sumFloat_LH_C_0⁸ = _lh_integrate1D_arg3¹((_lh_integrate1D_arg2¹ -. (2.0 *. d¹)))
//│ 								in (fun _lh_dummy⁹ -> (_lh_sumFloat_LH_C_0⁸ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁸)))
//│ 							in let _lh_sumFloat_LH_C_0⁷ = _lh_integrate1D_arg3¹((_lh_integrate1D_arg2¹ -. (3.0 *. d¹)))
//│ 							in (fun _lh_dummy⁸ -> (_lh_sumFloat_LH_C_0⁷ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁷)))
//│ 						in let _lh_sumFloat_LH_C_0⁶ = _lh_integrate1D_arg3¹((_lh_integrate1D_arg1¹ +. (4.0 *. d¹)))
//│ 						in (fun _lh_dummy⁷ -> (_lh_sumFloat_LH_C_0⁶ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁶)))
//│ 					in let _lh_sumFloat_LH_C_0⁵ = _lh_integrate1D_arg3¹((_lh_integrate1D_arg1¹ +. (3.0 *. d¹)))
//│ 					in (fun _lh_dummy⁶ -> (_lh_sumFloat_LH_C_0⁵ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁵)))
//│ 				in let _lh_sumFloat_LH_C_0⁴ = _lh_integrate1D_arg3¹((_lh_integrate1D_arg1¹ +. (2.0 *. d¹)))
//│ 				in (fun _lh_dummy⁵ -> (_lh_sumFloat_LH_C_0⁴ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1⁴)))
//│ 			in let _lh_sumFloat_LH_C_0³ = _lh_integrate1D_arg3¹((_lh_integrate1D_arg1¹ +. d¹))
//│ 			in (fun _lh_dummy⁴ -> (_lh_sumFloat_LH_C_0³ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1³)))
//│ 		in let _lh_sumFloat_LH_C_0² = (_lh_integrate1D_arg3¹(_lh_integrate1D_arg1¹) *. 0.5)
//│ 		in (fun _lh_dummy³ -> (_lh_sumFloat_LH_C_0² +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1²)))))
//│ def integrate2D_lh_₁(_lh_integrate2D_arg1³, _lh_integrate2D_arg2³, _lh_integrate2D_arg3³, _lh_integrate2D_arg4³, _lh_integrate2D_arg5³) = integrate1D_lh_₁(_lh_integrate2D_arg3³, _lh_integrate2D_arg4³, (fun y⁶ -> integrate1D_lh_₁(_lh_integrate2D_arg1³, _lh_integrate2D_arg2³, (fun x⁶ -> _lh_integrate2D_arg5³(x⁶, y⁶)))))
//│ def integrate2D_lh_₂(_lh_integrate2D_arg1², _lh_integrate2D_arg2², _lh_integrate2D_arg3², _lh_integrate2D_arg4², _lh_integrate2D_arg5²) = integrate1D_lh_₁(_lh_integrate2D_arg3², _lh_integrate2D_arg4², (fun y⁴ -> integrate1D_lh_₁(_lh_integrate2D_arg1², _lh_integrate2D_arg2², (fun x⁴ -> _lh_integrate2D_arg5²(x⁴, y⁴)))))
//│ def ints_lh_₁(_lh_ints_arg1¹⁰) = enumFromFloat_lh_₁(1.0)
//│ def ints_lh_₂(_lh_ints_arg1⁹) = enumFromFloat_lh_₂(1.0)
//│ def ints_lh_₃(_lh_ints_arg1⁷) = enumFromFloat_lh_₂(1.0)
//│ def ints_lh_₄(_lh_ints_arg1¹¹) = enumFromFloat_lh_₂(1.0)
//│ def ints_lh_₅(_lh_ints_arg1⁸) = enumFromFloat_lh_₂(1.0)
//│ def ints_lh_₆(_lh_ints_arg1⁶) = enumFromFloat_lh_₂(1.0)
//│ def is_lh_₁(_lh_is_arg1²) = map_lz_lh_₄((fun a⁶ -> (((a⁶ *. a⁶) *. a⁶) *. a⁶)), ints_lh_₅(0))
//│ def is_lh_₂(_lh_is_arg1³) = map_lz_lh_₅((fun a⁸ -> (((a⁸ *. a⁸) *. a⁸) *. a⁸)), ints_lh_₆(0))
//│ def itotals_lh_₁(_lh_itotals_arg1¹) = lazy⁰([LH_C head_lz_lh_₂(is_lh_₂(0)) zipWith_lz_lz_lh_₃((fun a⁷ -> (fun b³ -> (a⁷ +. b³))), tail_lz_lh_₂(is_lh_₁(0)), itotals_lh_₁(0))])
//│ def map_lz_lh_₁(f¹⁰, ls¹⁰) = lazy⁰(force⁰(ls¹⁰, f¹⁰))
//│ def map_lz_lh_₂(f²⁴, ls¹⁸) = lazy⁰(case force⁰(ls¹⁸) of {
//│ 	LH_C h³ t³ => 
//│ 		let ty⁶ = map_lz_lh_₂(f²⁴, t³)
//│ 		in let hy⁶ = f²⁴(h³)
//│ 		in (fun f²⁵ -> (fun hx⁸ -> (fun tx⁸ -> [LH_C f²⁵(hx⁸, hy⁶) zipWith_lz_lz_lh_₄(f²⁵, tx⁸, ty⁶)])))
//│ 	| LH_N  => (fun f²⁶ -> (fun hx⁹ -> (fun tx⁹ -> [LH_N])))})
//│ def map_lz_lh_₃(f²⁰, ls¹⁴) = lazy⁰(case force⁰(ls¹⁴) of {
//│ 	LH_C h² t² => 
//│ 		let ty⁵ = map_lz_lh_₃(f²⁰, t²)
//│ 		in let hy⁵ = f²⁰(h²)
//│ 		in (fun f²¹ -> (fun hx⁵ -> (fun tx⁵ -> [LH_C f²¹(hx⁵, hy⁵) zipWith_lz_lz_lh_₅(f²¹, tx⁵, ty⁵)])))
//│ 	| LH_N  => (fun f²² -> (fun hx⁶ -> (fun tx⁶ -> [LH_N])))})
//│ def map_lz_lh_₄(f¹², ls¹¹) = lazy⁰(case force⁰(ls¹¹) of {
//│ 	LH_C h¹ t¹ => [LH_C f¹²(h¹) map_lz_lh_₄(f¹², t¹)]
//│ 	| LH_N  => [LH_N]})
//│ def map_lz_lh_₅(f²⁷, ls¹⁹) = lazy⁰(case force⁰(ls¹⁹) of {
//│ 	LH_C h⁰ t⁰ => [LH_C f²⁷(h⁰) map_lz_lh_₅(f²⁷, t⁰)]
//│ 	| LH_N  => [LH_N]})
//│ def rtotals_lh_₁(_lh_rtotals_arg1¹) = lazy⁰([LH_C head_lz_lh_₁(zarks_lh_₁(0)) zipWith_lz_lz_lh_₂((fun a¹¹ -> (fun b⁵ -> (a¹¹ +. b⁵))), tail_lz_lh_₁(zarks_lh_₂(0)), rtotals_lh_₁(0))])
//│ def sumFloat_lh_₁(_lh_sumFloat_arg1¹) = _lh_sumFloat_arg1¹(99)
//│ def tail_lz_lh_₁(ls¹⁶) = case force⁰(ls¹⁶) of {
//│ 	LH_C h⁶ t⁶ => t⁶
//│ 	| LH_N  => error⁰}
//│ def tail_lz_lh_₂(ls¹⁵) = case force⁰(ls¹⁵) of {
//│ 	LH_C h⁴ t⁴ => t⁴
//│ 	| LH_N  => error⁰}
//│ def take_lz_lh_₁(n⁸, ls¹⁷) = if (n⁸ > 0) then force⁰(ls¹⁷, n⁸) else (fun _lh_dummy¹³ -> 0.0)
//│ def testIntegrate_nofib_lh_₁(_lh_testIntegrate_nofib_arg1¹) = etotal_lh_₁(_lh_testIntegrate_nofib_arg1¹)
//│ def zark_lh_₁(_lh_zark_arg1³, _lh_zark_arg2³) = integrate2D_lh_₁(0.0, _lh_zark_arg1³, 0.0, _lh_zark_arg2³, (fun x⁷ -> (fun y⁷ -> (x⁷ *. y⁷))))
//│ def zark_lh_₂(_lh_zark_arg1², _lh_zark_arg2²) = integrate2D_lh_₂(0.0, _lh_zark_arg1², 0.0, _lh_zark_arg2², (fun x⁵ -> (fun y⁵ -> (x⁵ *. y⁵))))
//│ def zarks_lh_₁(_lh_zarks_arg1³) = zipWith_lz_lz_lh_₄(zark_lh_₁, ints_lh_₁(0), map_lz_lh_₂((fun n⁷ -> (2.0 *. n⁷)), ints_lh_₂(0)))
//│ def zarks_lh_₂(_lh_zarks_arg1²) = zipWith_lz_lz_lh_₅(zark_lh_₂, ints_lh_₃(0), map_lz_lh_₃((fun n⁶ -> (2.0 *. n⁶)), ints_lh_₄(0)))
//│ def zipWith_lz_lz_lh_₁(f¹³, xs⁶, ys⁶) = lazy⁰(case force⁰(xs⁶) of {
//│ 	LH_C hx⁴ tx⁴ => case force⁰(ys⁶) of {
//│ 		LH_C hy⁴ ty⁴ => 
//│ 			let t¹⁰ = zipWith_lz_lz_lh_₁(f¹³, tx⁴, ty⁴)
//│ 			in let h¹⁰ = f¹³(hx⁴, hy⁴)
//│ 			in (fun f¹⁴ -> 
//│ 				let t¹¹ = map_lz_lh_₁(f¹⁴, t¹⁰)
//│ 				in let h¹¹ = f¹⁴(h¹⁰)
//│ 				in (fun n³ -> 
//│ 					let _lh_sumFloat_LH_C_1¹ = take_lz_lh_₁((n³ - 1), t¹¹)
//│ 					in let _lh_sumFloat_LH_C_0¹ = h¹¹
//│ 					in (fun _lh_dummy⁰ -> (_lh_sumFloat_LH_C_0¹ +. sumFloat_lh_₁(_lh_sumFloat_LH_C_1¹)))))
//│ 		| LH_N  => (fun f¹⁵ -> (fun n⁴ -> (fun _lh_dummy¹ -> 0.0)))}
//│ 	| LH_N  => (fun f¹⁶ -> (fun n⁵ -> (fun _lh_dummy² -> 0.0)))})
//│ def zipWith_lz_lz_lh_₂(f¹⁸, xs⁸, ys⁸) = lazy⁰(case force⁰(xs⁸) of {
//│ 	LH_C hx³ tx³ => case force⁰(ys⁸) of {
//│ 		LH_C hy³ ty³ => [LH_C f¹⁸(hx³, hy³) zipWith_lz_lz_lh_₂(f¹⁸, tx³, ty³)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_lz_lh_₃(f¹¹, xs⁵, ys⁵) = lazy⁰(case force⁰(xs⁵) of {
//│ 	LH_C hx² tx² => case force⁰(ys⁵) of {
//│ 		LH_C hy² ty² => [LH_C f¹¹(hx², hy²) zipWith_lz_lz_lh_₃(f¹¹, tx², ty²)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_lz_lh_₄(f¹⁷, xs⁷, ys⁷) = lazy⁰(force⁰(xs⁷, f¹⁷, ys⁷))
//│ def zipWith_lz_lz_lh_₅(f¹⁹, xs⁹, ys⁹) = lazy⁰(case force⁰(xs⁹) of {
//│ 	LH_C hx⁰ tx⁰ => force⁰(ys⁹, f¹⁹, hx⁰, tx⁰)
//│ 	| LH_N  => [LH_N]})
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ zipWith_lz_lz_lh_₄, take_lz_lh_₁, map_lz_lh_₁, zipWith_lz_lz_lh_₅, sumFloat_lh_₁
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ integrate1D_lh_₁ -> 3
//│ map_lz_lh_₃ -> 2
//│ zipWith_lz_lz_lh_₁ -> 3
//│ enumFromFloat_lh_₁ -> 1
//│ map_lz_lh_₂ -> 2
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ testIntegrate_nofib_lh_₁(primId⁰(100))
//│ def enumFromFloat_lh_₁(_lh_enumFromFloat_arg1¹) = lazy⁰(
//│ 	let tx⁸ = enumFromFloat_lh_₁((_lh_enumFromFloat_arg1¹ +. 1.0))
//│ 	in let hx⁸ = _lh_enumFromFloat_arg1¹
//│ 	in (fun f¹³ -> (fun ys⁵ -> force⁰(ys⁵, f¹³, hx⁸, tx⁸))))
//│ def enumFromFloat_lh_₂(_lh_enumFromFloat_arg1⁰) = lazy⁰([LH_C _lh_enumFromFloat_arg1⁰ enumFromFloat_lh_₂((_lh_enumFromFloat_arg1⁰ +. 1.0))])
//│ def etotal_lh_₁(_lh_etotal_arg1⁰) = if (_lh_etotal_arg1⁰ > 0) then force⁰(lazy⁰(force⁰(zipWith_lz_lz_lh_₁((fun a³ -> (fun b¹ -> (a³ -. b¹))), rtotals_lh_₁(0), itotals_lh_₁(0)), (fun a⁴ -> (a⁴ *. a⁴)))), _lh_etotal_arg1⁰) else (fun _lh_dummy¹⁴ -> 0.0)(99)
//│ def head_lz_lh_₁(ls²) = case force⁰(ls²) of {
//│ 	LH_C h³ t³ => h³
//│ 	| LH_N  => error⁰}
//│ def head_lz_lh_₂(ls³) = case force⁰(ls³) of {
//│ 	LH_C h⁴ t⁴ => h⁴
//│ 	| LH_N  => error⁰}
//│ def integrate1D_lh_₁(_lh_integrate1D_arg1⁰, _lh_integrate1D_arg2⁰, _lh_integrate1D_arg3⁰) = 
//│ 	let d⁰ = ((_lh_integrate1D_arg2⁰ -. _lh_integrate1D_arg1⁰) /. 8.0)
//│ 	in (d⁰ *. 
//│ 		let _lh_sumFloat_LH_C_1¹ = 	
//│ 			let _lh_sumFloat_LH_C_1² = 	
//│ 				let _lh_sumFloat_LH_C_1³ = 	
//│ 					let _lh_sumFloat_LH_C_1⁴ = 	
//│ 						let _lh_sumFloat_LH_C_1⁵ = 	
//│ 							let _lh_sumFloat_LH_C_1⁶ = 	
//│ 								let _lh_sumFloat_LH_C_1⁷ = 	
//│ 									let _lh_sumFloat_LH_C_1⁸ = 	
//│ 										let _lh_sumFloat_LH_C_1⁹ = (fun _lh_dummy⁴ -> 0.0)
//│ 										in let _lh_sumFloat_LH_C_0¹ = (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5)
//│ 										in (fun _lh_dummy⁵ -> (_lh_sumFloat_LH_C_0¹ +. _lh_sumFloat_LH_C_1⁹(99)))
//│ 									in let _lh_sumFloat_LH_C_0² = _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰))
//│ 									in (fun _lh_dummy⁶ -> (_lh_sumFloat_LH_C_0² +. _lh_sumFloat_LH_C_1⁸(99)))
//│ 								in let _lh_sumFloat_LH_C_0³ = _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰)))
//│ 								in (fun _lh_dummy⁷ -> (_lh_sumFloat_LH_C_0³ +. _lh_sumFloat_LH_C_1⁷(99)))
//│ 							in let _lh_sumFloat_LH_C_0⁴ = _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰)))
//│ 							in (fun _lh_dummy⁸ -> (_lh_sumFloat_LH_C_0⁴ +. _lh_sumFloat_LH_C_1⁶(99)))
//│ 						in let _lh_sumFloat_LH_C_0⁵ = _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰)))
//│ 						in (fun _lh_dummy⁹ -> (_lh_sumFloat_LH_C_0⁵ +. _lh_sumFloat_LH_C_1⁵(99)))
//│ 					in let _lh_sumFloat_LH_C_0⁶ = _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰)))
//│ 					in (fun _lh_dummy¹⁰ -> (_lh_sumFloat_LH_C_0⁶ +. _lh_sumFloat_LH_C_1⁴(99)))
//│ 				in let _lh_sumFloat_LH_C_0⁷ = _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (2.0 *. d⁰)))
//│ 				in (fun _lh_dummy¹¹ -> (_lh_sumFloat_LH_C_0⁷ +. _lh_sumFloat_LH_C_1³(99)))
//│ 			in let _lh_sumFloat_LH_C_0⁸ = _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. d⁰))
//│ 			in (fun _lh_dummy¹² -> (_lh_sumFloat_LH_C_0⁸ +. _lh_sumFloat_LH_C_1²(99)))
//│ 		in let _lh_sumFloat_LH_C_0⁹ = (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg1⁰) *. 0.5)
//│ 		in (fun _lh_dummy¹³ -> (_lh_sumFloat_LH_C_0⁹ +. _lh_sumFloat_LH_C_1¹(99)))(99))
//│ def integrate2D_lh_₁(_lh_integrate2D_arg1¹, _lh_integrate2D_arg2¹, _lh_integrate2D_arg3¹, _lh_integrate2D_arg4¹, _lh_integrate2D_arg5¹) = integrate1D_lh_₁(_lh_integrate2D_arg3¹, _lh_integrate2D_arg4¹, (fun y² -> integrate1D_lh_₁(_lh_integrate2D_arg1¹, _lh_integrate2D_arg2¹, (fun x² -> _lh_integrate2D_arg5¹(x², y²)))))
//│ def integrate2D_lh_₂(_lh_integrate2D_arg1⁰, _lh_integrate2D_arg2⁰, _lh_integrate2D_arg3⁰, _lh_integrate2D_arg4⁰, _lh_integrate2D_arg5⁰) = integrate1D_lh_₁(_lh_integrate2D_arg3⁰, _lh_integrate2D_arg4⁰, (fun y⁰ -> integrate1D_lh_₁(_lh_integrate2D_arg1⁰, _lh_integrate2D_arg2⁰, (fun x⁰ -> _lh_integrate2D_arg5⁰(x⁰, y⁰)))))
//│ def ints_lh_₁(_lh_ints_arg1⁴) = enumFromFloat_lh_₁(1.0)
//│ def ints_lh_₂(_lh_ints_arg1³) = enumFromFloat_lh_₂(1.0)
//│ def ints_lh_₃(_lh_ints_arg1¹) = enumFromFloat_lh_₂(1.0)
//│ def ints_lh_₄(_lh_ints_arg1⁵) = enumFromFloat_lh_₂(1.0)
//│ def ints_lh_₅(_lh_ints_arg1²) = enumFromFloat_lh_₂(1.0)
//│ def ints_lh_₆(_lh_ints_arg1⁰) = enumFromFloat_lh_₂(1.0)
//│ def is_lh_₁(_lh_is_arg1⁰) = map_lz_lh_₄((fun a⁰ -> (((a⁰ *. a⁰) *. a⁰) *. a⁰)), ints_lh_₅(0))
//│ def is_lh_₂(_lh_is_arg1¹) = map_lz_lh_₅((fun a² -> (((a² *. a²) *. a²) *. a²)), ints_lh_₆(0))
//│ def itotals_lh_₁(_lh_itotals_arg1⁰) = lazy⁰([LH_C head_lz_lh_₂(is_lh_₂(0)) zipWith_lz_lz_lh_₃((fun a¹ -> (fun b⁰ -> (a¹ +. b⁰))), tail_lz_lh_₂(is_lh_₁(0)), itotals_lh_₁(0))])
//│ def map_lz_lh_₁(f⁰, ls⁰) = lazy⁰(force⁰(ls⁰, f⁰))
//│ def map_lz_lh_₂(f¹⁴, ls⁸) = lazy⁰(case force⁰(ls⁸) of {
//│ 	LH_C h⁸ t⁸ => 
//│ 		let ty⁴ = map_lz_lh_₂(f¹⁴, t⁸)
//│ 		in let hy⁴ = f¹⁴(h⁸)
//│ 		in (fun f¹⁵ -> (fun hx⁹ -> (fun tx⁹ -> [LH_C f¹⁵(hx⁹, hy⁴) lazy⁰(force⁰(tx⁹, f¹⁵, ty⁴))])))
//│ 	| LH_N  => (fun f¹⁶ -> (fun hx¹⁰ -> (fun tx¹⁰ -> [LH_N])))})
//│ def map_lz_lh_₃(f¹⁰, ls⁴) = lazy⁰(case force⁰(ls⁴) of {
//│ 	LH_C h⁵ t⁵ => 
//│ 		let ty³ = map_lz_lh_₃(f¹⁰, t⁵)
//│ 		in let hy³ = f¹⁰(h⁵)
//│ 		in (fun f¹¹ -> (fun hx⁵ -> (fun tx⁵ -> [LH_C f¹¹(hx⁵, hy³) lazy⁰(case force⁰(tx⁵) of {
//│ 			LH_C hx⁶ tx⁶ => force⁰(ty³, f¹¹, hx⁶, tx⁶)
//│ 			| LH_N  => [LH_N]})])))
//│ 	| LH_N  => (fun f¹² -> (fun hx⁷ -> (fun tx⁷ -> [LH_N])))})
//│ def map_lz_lh_₄(f², ls¹) = lazy⁰(case force⁰(ls¹) of {
//│ 	LH_C h⁰ t⁰ => [LH_C f²(h⁰) map_lz_lh_₄(f², t⁰)]
//│ 	| LH_N  => [LH_N]})
//│ def map_lz_lh_₅(f¹⁷, ls⁹) = lazy⁰(case force⁰(ls⁹) of {
//│ 	LH_C h⁹ t⁹ => [LH_C f¹⁷(h⁹) map_lz_lh_₅(f¹⁷, t⁹)]
//│ 	| LH_N  => [LH_N]})
//│ def rtotals_lh_₁(_lh_rtotals_arg1⁰) = lazy⁰([LH_C head_lz_lh_₁(zarks_lh_₁(0)) zipWith_lz_lz_lh_₂((fun a⁵ -> (fun b² -> (a⁵ +. b²))), tail_lz_lh_₁(zarks_lh_₂(0)), rtotals_lh_₁(0))])
//│ def sumFloat_lh_₁(_lh_sumFloat_arg1⁰) = _lh_sumFloat_arg1⁰(99)
//│ def tail_lz_lh_₁(ls⁶) = case force⁰(ls⁶) of {
//│ 	LH_C h⁷ t⁷ => t⁷
//│ 	| LH_N  => error⁰}
//│ def tail_lz_lh_₂(ls⁵) = case force⁰(ls⁵) of {
//│ 	LH_C h⁶ t⁶ => t⁶
//│ 	| LH_N  => error⁰}
//│ def take_lz_lh_₁(n⁵, ls⁷) = if (n⁵ > 0) then force⁰(ls⁷, n⁵) else (fun _lh_dummy¹⁵ -> 0.0)
//│ def testIntegrate_nofib_lh_₁(_lh_testIntegrate_nofib_arg1⁰) = etotal_lh_₁(_lh_testIntegrate_nofib_arg1⁰)
//│ def zark_lh_₁(_lh_zark_arg1¹, _lh_zark_arg2¹) = integrate2D_lh_₁(0.0, _lh_zark_arg1¹, 0.0, _lh_zark_arg2¹, (fun x³ -> (fun y³ -> (x³ *. y³))))
//│ def zark_lh_₂(_lh_zark_arg1⁰, _lh_zark_arg2⁰) = integrate2D_lh_₂(0.0, _lh_zark_arg1⁰, 0.0, _lh_zark_arg2⁰, (fun x¹ -> (fun y¹ -> (x¹ *. y¹))))
//│ def zarks_lh_₁(_lh_zarks_arg1¹) = lazy⁰(force⁰(ints_lh_₁(0), zark_lh_₁, map_lz_lh_₂((fun n⁴ -> (2.0 *. n⁴)), ints_lh_₂(0))))
//│ def zarks_lh_₂(_lh_zarks_arg1⁰) = lazy⁰(case force⁰(ints_lh_₃(0)) of {
//│ 	LH_C hx² tx² => force⁰(map_lz_lh_₃((fun n³ -> (2.0 *. n³)), ints_lh_₄(0)), zark_lh_₂, hx², tx²)
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_lz_lh_₁(f³, xs¹, ys¹) = lazy⁰(case force⁰(xs¹) of {
//│ 	LH_C hx¹ tx¹ => case force⁰(ys¹) of {
//│ 		LH_C hy¹ ty¹ => 
//│ 			let t¹ = zipWith_lz_lz_lh_₁(f³, tx¹, ty¹)
//│ 			in let h¹ = f³(hx¹, hy¹)
//│ 			in (fun f⁴ -> 
//│ 				let t² = lazy⁰(force⁰(t¹, f⁴))
//│ 				in let h² = f⁴(h¹)
//│ 				in (fun n⁰ -> 
//│ 					let _lh_sumFloat_LH_C_1⁰ = if ((n⁰ - 1) > 0) then force⁰(t², (n⁰ - 1)) else (fun _lh_dummy⁰ -> 0.0)
//│ 					in let _lh_sumFloat_LH_C_0⁰ = h²
//│ 					in (fun _lh_dummy¹ -> (_lh_sumFloat_LH_C_0⁰ +. _lh_sumFloat_LH_C_1⁰(99)))))
//│ 		| LH_N  => (fun f⁵ -> (fun n¹ -> (fun _lh_dummy² -> 0.0)))}
//│ 	| LH_N  => (fun f⁶ -> (fun n² -> (fun _lh_dummy³ -> 0.0)))})
//│ def zipWith_lz_lz_lh_₂(f⁸, xs³, ys³) = lazy⁰(case force⁰(xs³) of {
//│ 	LH_C hx³ tx³ => case force⁰(ys³) of {
//│ 		LH_C hy² ty² => [LH_C f⁸(hx³, hy²) zipWith_lz_lz_lh_₂(f⁸, tx³, ty²)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_lz_lh_₃(f¹, xs⁰, ys⁰) = lazy⁰(case force⁰(xs⁰) of {
//│ 	LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₃(f¹, tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_lz_lh_₄(f⁷, xs², ys²) = lazy⁰(force⁰(xs², f⁷, ys²))
//│ def zipWith_lz_lz_lh_₅(f⁹, xs⁴, ys⁴) = lazy⁰(case force⁰(xs⁴) of {
//│ 	LH_C hx⁴ tx⁴ => force⁰(ys⁴, f⁹, hx⁴, tx⁴)
//│ 	| LH_N  => [LH_N]})
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ testIntegrate_nofib_lh_₁(primId⁰(100))
//│ def enumFromFloat_lh_₁(_lh_enumFromFloat_arg1¹) = lazy⁰(
//│ 	let tx⁸ = enumFromFloat_lh_₁((_lh_enumFromFloat_arg1¹ +. 1.0))
//│ 	in let hx⁸ = _lh_enumFromFloat_arg1¹
//│ 	in (fun f¹³ -> (fun ys⁵ -> force⁰(ys⁵, f¹³, hx⁸, tx⁸))))
//│ def enumFromFloat_lh_₂(_lh_enumFromFloat_arg1⁰) = lazy⁰([LH_C _lh_enumFromFloat_arg1⁰ enumFromFloat_lh_₂((_lh_enumFromFloat_arg1⁰ +. 1.0))])
//│ def etotal_lh_₁(_lh_etotal_arg1⁰) = if (_lh_etotal_arg1⁰ > 0) then force⁰(lazy⁰(force⁰(zipWith_lz_lz_lh_₁((fun a³ -> (fun b¹ -> (a³ -. b¹))), rtotals_lh_₁(0), itotals_lh_₁(0)), (fun a⁴ -> (a⁴ *. a⁴)))), _lh_etotal_arg1⁰) else (fun _lh_dummy¹⁴ -> 0.0)(99)
//│ def head_lz_lh_₁(ls²) = case force⁰(ls²) of {
//│ 	LH_C h³ t³ => h³
//│ 	| LH_N  => error⁰}
//│ def head_lz_lh_₂(ls³) = case force⁰(ls³) of {
//│ 	LH_C h⁴ t⁴ => h⁴
//│ 	| LH_N  => error⁰}
//│ def integrate1D_lh_₁(_lh_integrate1D_arg1⁰, _lh_integrate1D_arg2⁰, _lh_integrate1D_arg3⁰) = 
//│ 	let d⁰ = ((_lh_integrate1D_arg2⁰ -. _lh_integrate1D_arg1⁰) /. 8.0)
//│ 	in (d⁰ *. 
//│ 		let _lh_sumFloat_LH_C_1¹ = 	
//│ 			let _lh_sumFloat_LH_C_1² = 	
//│ 				let _lh_sumFloat_LH_C_1³ = 	
//│ 					let _lh_sumFloat_LH_C_1⁴ = 	
//│ 						let _lh_sumFloat_LH_C_1⁵ = 	
//│ 							let _lh_sumFloat_LH_C_1⁶ = 	
//│ 								let _lh_sumFloat_LH_C_1⁷ = 	
//│ 									let _lh_sumFloat_LH_C_1⁸ = 	
//│ 										let _lh_sumFloat_LH_C_1⁹ = (fun _lh_dummy⁴ -> 0.0)
//│ 										in let _lh_sumFloat_LH_C_0¹ = (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg2⁰) *. 0.5)
//│ 										in (fun _lh_dummy⁵ -> (_lh_sumFloat_LH_C_0¹ +. _lh_sumFloat_LH_C_1⁹(99)))
//│ 									in let _lh_sumFloat_LH_C_0² = _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. d⁰))
//│ 									in (fun _lh_dummy⁶ -> (_lh_sumFloat_LH_C_0² +. _lh_sumFloat_LH_C_1⁸(99)))
//│ 								in let _lh_sumFloat_LH_C_0³ = _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (2.0 *. d⁰)))
//│ 								in (fun _lh_dummy⁷ -> (_lh_sumFloat_LH_C_0³ +. _lh_sumFloat_LH_C_1⁷(99)))
//│ 							in let _lh_sumFloat_LH_C_0⁴ = _lh_integrate1D_arg3⁰((_lh_integrate1D_arg2⁰ -. (3.0 *. d⁰)))
//│ 							in (fun _lh_dummy⁸ -> (_lh_sumFloat_LH_C_0⁴ +. _lh_sumFloat_LH_C_1⁶(99)))
//│ 						in let _lh_sumFloat_LH_C_0⁵ = _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (4.0 *. d⁰)))
//│ 						in (fun _lh_dummy⁹ -> (_lh_sumFloat_LH_C_0⁵ +. _lh_sumFloat_LH_C_1⁵(99)))
//│ 					in let _lh_sumFloat_LH_C_0⁶ = _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (3.0 *. d⁰)))
//│ 					in (fun _lh_dummy¹⁰ -> (_lh_sumFloat_LH_C_0⁶ +. _lh_sumFloat_LH_C_1⁴(99)))
//│ 				in let _lh_sumFloat_LH_C_0⁷ = _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. (2.0 *. d⁰)))
//│ 				in (fun _lh_dummy¹¹ -> (_lh_sumFloat_LH_C_0⁷ +. _lh_sumFloat_LH_C_1³(99)))
//│ 			in let _lh_sumFloat_LH_C_0⁸ = _lh_integrate1D_arg3⁰((_lh_integrate1D_arg1⁰ +. d⁰))
//│ 			in (fun _lh_dummy¹² -> (_lh_sumFloat_LH_C_0⁸ +. _lh_sumFloat_LH_C_1²(99)))
//│ 		in let _lh_sumFloat_LH_C_0⁹ = (_lh_integrate1D_arg3⁰(_lh_integrate1D_arg1⁰) *. 0.5)
//│ 		in (fun _lh_dummy¹³ -> (_lh_sumFloat_LH_C_0⁹ +. _lh_sumFloat_LH_C_1¹(99)))(99))
//│ def integrate2D_lh_₁(_lh_integrate2D_arg1¹, _lh_integrate2D_arg2¹, _lh_integrate2D_arg3¹, _lh_integrate2D_arg4¹, _lh_integrate2D_arg5¹) = integrate1D_lh_₁(_lh_integrate2D_arg3¹, _lh_integrate2D_arg4¹, (fun y² -> integrate1D_lh_₁(_lh_integrate2D_arg1¹, _lh_integrate2D_arg2¹, (fun x² -> _lh_integrate2D_arg5¹(x², y²)))))
//│ def integrate2D_lh_₂(_lh_integrate2D_arg1⁰, _lh_integrate2D_arg2⁰, _lh_integrate2D_arg3⁰, _lh_integrate2D_arg4⁰, _lh_integrate2D_arg5⁰) = integrate1D_lh_₁(_lh_integrate2D_arg3⁰, _lh_integrate2D_arg4⁰, (fun y⁰ -> integrate1D_lh_₁(_lh_integrate2D_arg1⁰, _lh_integrate2D_arg2⁰, (fun x⁰ -> _lh_integrate2D_arg5⁰(x⁰, y⁰)))))
//│ def ints_lh_₁(_lh_ints_arg1⁴) = enumFromFloat_lh_₁(1.0)
//│ def ints_lh_₂(_lh_ints_arg1³) = enumFromFloat_lh_₂(1.0)
//│ def ints_lh_₃(_lh_ints_arg1¹) = enumFromFloat_lh_₂(1.0)
//│ def ints_lh_₄(_lh_ints_arg1⁵) = enumFromFloat_lh_₂(1.0)
//│ def ints_lh_₅(_lh_ints_arg1²) = enumFromFloat_lh_₂(1.0)
//│ def ints_lh_₆(_lh_ints_arg1⁰) = enumFromFloat_lh_₂(1.0)
//│ def is_lh_₁(_lh_is_arg1⁰) = map_lz_lh_₄((fun a⁰ -> (((a⁰ *. a⁰) *. a⁰) *. a⁰)), ints_lh_₅(0))
//│ def is_lh_₂(_lh_is_arg1¹) = map_lz_lh_₅((fun a² -> (((a² *. a²) *. a²) *. a²)), ints_lh_₆(0))
//│ def itotals_lh_₁(_lh_itotals_arg1⁰) = lazy⁰([LH_C head_lz_lh_₂(is_lh_₂(0)) zipWith_lz_lz_lh_₃((fun a¹ -> (fun b⁰ -> (a¹ +. b⁰))), tail_lz_lh_₂(is_lh_₁(0)), itotals_lh_₁(0))])
//│ def map_lz_lh_₁(f⁰, ls⁰) = lazy⁰(force⁰(ls⁰, f⁰))
//│ def map_lz_lh_₂(f¹⁴, ls⁸) = lazy⁰(case force⁰(ls⁸) of {
//│ 	LH_C h⁸ t⁸ => 
//│ 		let ty⁴ = map_lz_lh_₂(f¹⁴, t⁸)
//│ 		in let hy⁴ = f¹⁴(h⁸)
//│ 		in (fun f¹⁵ -> (fun hx⁹ -> (fun tx⁹ -> [LH_C f¹⁵(hx⁹, hy⁴) lazy⁰(force⁰(tx⁹, f¹⁵, ty⁴))])))
//│ 	| LH_N  => (fun f¹⁶ -> (fun hx¹⁰ -> (fun tx¹⁰ -> [LH_N])))})
//│ def map_lz_lh_₃(f¹⁰, ls⁴) = lazy⁰(case force⁰(ls⁴) of {
//│ 	LH_C h⁵ t⁵ => 
//│ 		let ty³ = map_lz_lh_₃(f¹⁰, t⁵)
//│ 		in let hy³ = f¹⁰(h⁵)
//│ 		in (fun f¹¹ -> (fun hx⁵ -> (fun tx⁵ -> [LH_C f¹¹(hx⁵, hy³) lazy⁰(case force⁰(tx⁵) of {
//│ 			LH_C hx⁶ tx⁶ => force⁰(ty³, f¹¹, hx⁶, tx⁶)
//│ 			| LH_N  => [LH_N]})])))
//│ 	| LH_N  => (fun f¹² -> (fun hx⁷ -> (fun tx⁷ -> [LH_N])))})
//│ def map_lz_lh_₄(f², ls¹) = lazy⁰(case force⁰(ls¹) of {
//│ 	LH_C h⁰ t⁰ => [LH_C f²(h⁰) map_lz_lh_₄(f², t⁰)]
//│ 	| LH_N  => [LH_N]})
//│ def map_lz_lh_₅(f¹⁷, ls⁹) = lazy⁰(case force⁰(ls⁹) of {
//│ 	LH_C h⁹ t⁹ => [LH_C f¹⁷(h⁹) map_lz_lh_₅(f¹⁷, t⁹)]
//│ 	| LH_N  => [LH_N]})
//│ def rtotals_lh_₁(_lh_rtotals_arg1⁰) = lazy⁰([LH_C head_lz_lh_₁(zarks_lh_₁(0)) zipWith_lz_lz_lh_₂((fun a⁵ -> (fun b² -> (a⁵ +. b²))), tail_lz_lh_₁(zarks_lh_₂(0)), rtotals_lh_₁(0))])
//│ def sumFloat_lh_₁(_lh_sumFloat_arg1⁰) = _lh_sumFloat_arg1⁰(99)
//│ def tail_lz_lh_₁(ls⁶) = case force⁰(ls⁶) of {
//│ 	LH_C h⁷ t⁷ => t⁷
//│ 	| LH_N  => error⁰}
//│ def tail_lz_lh_₂(ls⁵) = case force⁰(ls⁵) of {
//│ 	LH_C h⁶ t⁶ => t⁶
//│ 	| LH_N  => error⁰}
//│ def take_lz_lh_₁(n⁵, ls⁷) = if (n⁵ > 0) then force⁰(ls⁷, n⁵) else (fun _lh_dummy¹⁵ -> 0.0)
//│ def testIntegrate_nofib_lh_₁(_lh_testIntegrate_nofib_arg1⁰) = etotal_lh_₁(_lh_testIntegrate_nofib_arg1⁰)
//│ def zark_lh_₁(_lh_zark_arg1¹, _lh_zark_arg2¹) = integrate2D_lh_₁(0.0, _lh_zark_arg1¹, 0.0, _lh_zark_arg2¹, (fun x³ -> (fun y³ -> (x³ *. y³))))
//│ def zark_lh_₂(_lh_zark_arg1⁰, _lh_zark_arg2⁰) = integrate2D_lh_₂(0.0, _lh_zark_arg1⁰, 0.0, _lh_zark_arg2⁰, (fun x¹ -> (fun y¹ -> (x¹ *. y¹))))
//│ def zarks_lh_₁(_lh_zarks_arg1¹) = lazy⁰(force⁰(ints_lh_₁(0), zark_lh_₁, map_lz_lh_₂((fun n⁴ -> (2.0 *. n⁴)), ints_lh_₂(0))))
//│ def zarks_lh_₂(_lh_zarks_arg1⁰) = lazy⁰(case force⁰(ints_lh_₃(0)) of {
//│ 	LH_C hx² tx² => force⁰(map_lz_lh_₃((fun n³ -> (2.0 *. n³)), ints_lh_₄(0)), zark_lh_₂, hx², tx²)
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_lz_lh_₁(f³, xs¹, ys¹) = lazy⁰(case force⁰(xs¹) of {
//│ 	LH_C hx¹ tx¹ => case force⁰(ys¹) of {
//│ 		LH_C hy¹ ty¹ => 
//│ 			let t¹ = zipWith_lz_lz_lh_₁(f³, tx¹, ty¹)
//│ 			in let h¹ = f³(hx¹, hy¹)
//│ 			in (fun f⁴ -> 
//│ 				let t² = lazy⁰(force⁰(t¹, f⁴))
//│ 				in let h² = f⁴(h¹)
//│ 				in (fun n⁰ -> 
//│ 					let _lh_sumFloat_LH_C_1⁰ = if ((n⁰ - 1) > 0) then force⁰(t², (n⁰ - 1)) else (fun _lh_dummy⁰ -> 0.0)
//│ 					in let _lh_sumFloat_LH_C_0⁰ = h²
//│ 					in (fun _lh_dummy¹ -> (_lh_sumFloat_LH_C_0⁰ +. _lh_sumFloat_LH_C_1⁰(99)))))
//│ 		| LH_N  => (fun f⁵ -> (fun n¹ -> (fun _lh_dummy² -> 0.0)))}
//│ 	| LH_N  => (fun f⁶ -> (fun n² -> (fun _lh_dummy³ -> 0.0)))})
//│ def zipWith_lz_lz_lh_₂(f⁸, xs³, ys³) = lazy⁰(case force⁰(xs³) of {
//│ 	LH_C hx³ tx³ => case force⁰(ys³) of {
//│ 		LH_C hy² ty² => [LH_C f⁸(hx³, hy²) zipWith_lz_lz_lh_₂(f⁸, tx³, ty²)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_lz_lh_₃(f¹, xs⁰, ys⁰) = lazy⁰(case force⁰(xs⁰) of {
//│ 	LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₃(f¹, tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ def zipWith_lz_lz_lh_₄(f⁷, xs², ys²) = lazy⁰(force⁰(xs², f⁷, ys²))
//│ def zipWith_lz_lz_lh_₅(f⁹, xs⁴, ys⁴) = lazy⁰(case force⁰(xs⁴) of {
//│ 	LH_C hx⁴ tx⁴ => force⁰(ys⁴, f⁹, hx⁴, tx⁴)
//│ 	| LH_N  => [LH_N]})
//│ <<<<<<< after floating out <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
