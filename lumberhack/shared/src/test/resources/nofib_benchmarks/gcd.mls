:NewParser
:ParseOnly

:lhNoIter
:lhInHaskell
:lhGenOCaml
abs x = if x < 0 then (0 - x) else x
f1 (x,y) = (x, y, gcdE x y)
f2 (_, _, (g, u, v)) = abs (g+u+v)
quotRem a b = (a `div` b, a `mod` b)
test d = let ns = [5000..(5000+d)] in
              let ms = [10000..(10000+d)] in
                    let tripls = map f1 [(x, y) | x <- ns, y <- ms] in
                          let rs = (map f2 tripls) in
                                max' rs
max' [x]      = x
max' (x:y:xs) = if (x<y) then max' (y:xs)  else  max' (x:xs)
g (u1, u2, u3) (v1, v2, v3) =
                   if (v3 == 0) then (u3, u1, u2)
                   else
                      case (quotRem u3 v3) of
                        (q,r) -> g (v1,v2,v3) (u1-(q*v1), u2-(q*v2), r)
gcdE 0 y = (y,0,1)
gcdE x y = g (1,0,x) (0,1,y)
testGcd_nofib x = test x
testGcd_nofib $ primId 200
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testGcd_nofib_lh^252(primId⁰(200))
//│ def abs_lh(_lh_abs_arg1⁰) = if (_lh_abs_arg1⁰ < 0) then (0 - _lh_abs_arg1⁰) else _lh_abs_arg1⁰
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^21((a⁰ + 1), b⁰)] else [LH_N]
//│ def f1_lh(_lh_f1_arg1⁰) = case _lh_f1_arg1⁰ of {
//│ 	LH_P2 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ => [LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh^117(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)]
//│ 	| _  => error⁰}
//│ def f2_lh(_lh_f2_arg1⁰) = case _lh_f2_arg1⁰ of {
//│ 	LH_P3 _lh_f2_LH_P3_0⁰ _lh_f2_LH_P3_1⁰ _lh_f2_LH_P3_2⁰ => case _lh_f2_LH_P3_2⁰ of {
//│ 		LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh^236(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹))
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def g_lh(_lh_g_arg1⁰, _lh_g_arg2⁰) = case _lh_g_arg1⁰ of {
//│ 	LH_P3 _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰ _lh_g_LH_P3_2⁰ => case _lh_g_arg2⁰ of {
//│ 		LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else 
//│ 			let _lh_matchIdent⁰ = quotRem_lh^178(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ 			in case _lh_matchIdent⁰ of {
//│ 				LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh^184([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰])
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def gcdE_lh(_lh_gcdE_arg1⁰, _lh_gcdE_arg2⁰) = case _lh_gcdE_arg1⁰ of {
//│ 	0  => [LH_P3 _lh_gcdE_arg2⁰ 0 1]
//│ 	| _  => g_lh^100([LH_P3 1 0 _lh_gcdE_arg1⁰], [LH_P3 0 1 _lh_gcdE_arg2⁰])}
//│ def map_lh(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh^5(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def max'_lh(_lh_max'_arg1⁰) = case _lh_max'_arg1⁰ of {
//│ 	LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1⁰ => case _lh_max'_LH_C_1⁰ of {
//│ 		LH_N  => _lh_max'_LH_C_0⁰
//│ 		| LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh^147([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh^152([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹])
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def quotRem_lh(_lh_quotRem_arg1⁰, _lh_quotRem_arg2⁰) = [LH_P2 div⁰(_lh_quotRem_arg1⁰, _lh_quotRem_arg2⁰) (_lh_quotRem_arg1⁰ % _lh_quotRem_arg2⁰)]
//│ def testGcd_nofib_lh(_lh_testGcd_nofib_arg1⁰) = test_lh^163(_lh_testGcd_nofib_arg1⁰)
//│ def test_lh(_lh_test_arg1⁰) = 
//│ 	let ns⁰ = enumFromTo_lh^35(5000, (5000 + _lh_test_arg1⁰))
//│ 	in let ms⁰ = enumFromTo_lh^44(10000, (10000 + _lh_test_arg1⁰))
//│ 	in let tripls⁰ = map_lh^53(f1_lh^54, 
//│ 		let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 				let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 					LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 					| LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ 				in _lh_listcomp_fun¹(ms⁰)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁰(ns⁰))
//│ 	in let rs⁰ = map_lh^82(f2_lh^83, tripls⁰)
//│ 	in max'_lh^87(rs⁰)
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo_lh a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec abs_lh _lh_abs_arg1_0 =
//│ 		  (if (_lh_abs_arg1_0 < 0) then
//│ 		    (0 - _lh_abs_arg1_0)
//│ 		  else
//│ 		    _lh_abs_arg1_0);;
//│ 		let rec max'_lh _lh_max'_arg1_0 =
//│ 		  (match _lh_max'_arg1_0 with
//│ 		    | `LH_C(_lh_max'_LH_C_0_0, _lh_max'_LH_C_1_0) -> 
//│ 		      (match _lh_max'_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          _lh_max'_LH_C_0_0
//│ 		        | `LH_C(_lh_max'_LH_C_0_1, _lh_max'_LH_C_1_1) -> 
//│ 		          (if (_lh_max'_LH_C_0_0 < _lh_max'_LH_C_0_1) then
//│ 		            (max'_lh (`LH_C(_lh_max'_LH_C_0_1, _lh_max'_LH_C_1_1)))
//│ 		          else
//│ 		            (max'_lh (`LH_C(_lh_max'_LH_C_0_0, _lh_max'_LH_C_1_1))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec map_lh f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C((f_0 h_0), ((map_lh f_0) t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec quotRem_lh _lh_quotRem_arg1_0 _lh_quotRem_arg2_0 =
//│ 		  (`LH_P2((_lh_quotRem_arg1_0 / _lh_quotRem_arg2_0), (_lh_quotRem_arg1_0 mod _lh_quotRem_arg2_0)));;
//│ 		let rec f2_lh _lh_f2_arg1_0 =
//│ 		  (match _lh_f2_arg1_0 with
//│ 		    | `LH_P3(_lh_f2_LH_P3_0_0, _lh_f2_LH_P3_1_0, _lh_f2_LH_P3_2_0) -> 
//│ 		      (match _lh_f2_LH_P3_2_0 with
//│ 		        | `LH_P3(_lh_f2_LH_P3_0_1, _lh_f2_LH_P3_1_1, _lh_f2_LH_P3_2_1) -> 
//│ 		          (abs_lh ((_lh_f2_LH_P3_0_1 + _lh_f2_LH_P3_1_1) + _lh_f2_LH_P3_2_1))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec g_lh _lh_g_arg1_0 _lh_g_arg2_0 =
//│ 		  (match _lh_g_arg1_0 with
//│ 		    | `LH_P3(_lh_g_LH_P3_0_0, _lh_g_LH_P3_1_0, _lh_g_LH_P3_2_0) -> 
//│ 		      (match _lh_g_arg2_0 with
//│ 		        | `LH_P3(_lh_g_LH_P3_0_1, _lh_g_LH_P3_1_1, _lh_g_LH_P3_2_1) -> 
//│ 		          (if (_lh_g_LH_P3_2_1 = 0) then
//│ 		            (`LH_P3(_lh_g_LH_P3_2_0, _lh_g_LH_P3_0_0, _lh_g_LH_P3_1_0))
//│ 		          else
//│ 		            (let rec _lh_matchIdent_0 = ((quotRem_lh _lh_g_LH_P3_2_0) _lh_g_LH_P3_2_1) in
//│ 		              (match _lh_matchIdent_0 with
//│ 		                | `LH_P2(_lh_g_LH_P2_0_0, _lh_g_LH_P2_1_0) -> 
//│ 		                  ((g_lh (`LH_P3(_lh_g_LH_P3_0_1, _lh_g_LH_P3_1_1, _lh_g_LH_P3_2_1))) (`LH_P3((_lh_g_LH_P3_0_0 - (_lh_g_LH_P2_0_0 * _lh_g_LH_P3_0_1)), (_lh_g_LH_P3_1_0 - (_lh_g_LH_P2_0_0 * _lh_g_LH_P3_1_1)), _lh_g_LH_P2_1_0)))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec gcdE_lh _lh_gcdE_arg1_0 _lh_gcdE_arg2_0 =
//│ 		  (match _lh_gcdE_arg1_0 with
//│ 		    | 0 -> 
//│ 		      (`LH_P3(_lh_gcdE_arg2_0, 0, 1))
//│ 		    | _ -> 
//│ 		      ((g_lh (`LH_P3(1, 0, _lh_gcdE_arg1_0))) (`LH_P3(0, 1, _lh_gcdE_arg2_0))));;
//│ 		let rec f1_lh _lh_f1_arg1_0 =
//│ 		  (match _lh_f1_arg1_0 with
//│ 		    | `LH_P2(_lh_f1_LH_P2_0_0, _lh_f1_LH_P2_1_0) -> 
//│ 		      (`LH_P3(_lh_f1_LH_P2_0_0, _lh_f1_LH_P2_1_0, ((gcdE_lh _lh_f1_LH_P2_0_0) _lh_f1_LH_P2_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec test_lh _lh_test_arg1_0 =
//│ 		  (let rec ns_0 = ((enumFromTo_lh 5000) (5000 + _lh_test_arg1_0)) in
//│ 		    (let rec ms_0 = ((enumFromTo_lh 10000) (10000 + _lh_test_arg1_0)) in
//│ 		      (let rec tripls_0 = ((map_lh f1_lh) (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		        (match _lh_listcomp_fun_para_0 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		            (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		              (match _lh_listcomp_fun_para_1 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		                  (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_h_1)), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		                | `LH_N -> 
//│ 		                  (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))) in
//│ 		              (_lh_listcomp_fun_1 ms_0))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_0 ns_0))) in
//│ 		        (let rec rs_0 = ((map_lh f2_lh) tripls_0) in
//│ 		          (max'_lh rs_0)))));;
//│ 		let rec testGcd_nofib_lh _lh_testGcd_nofib_arg1_0 =
//│ 		  (test_lh _lh_testGcd_nofib_arg1_0);;
//│ 		(testGcd_nofib_lh 200)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_max'_LH_C_1⁰ of {LH_N  => _lh_max'_LH_C_0⁰ | LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]) | _  => error⁰}: 159
//│ 	case _lh_max'_arg1⁰ of {LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1⁰ => case _lh_max'_LH_C_1⁰ of {LH_N  => _lh_max'_LH_C_0⁰ | LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]) | _  => error⁰} | _  => error⁰}: 161
//│ [LH_N]: 11 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_max'_LH_C_1⁰ of {LH_N  => _lh_max'_LH_C_0⁰ | LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]) | _  => error⁰}: 159
//│ 	case _lh_max'_arg1⁰ of {LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1⁰ => case _lh_max'_LH_C_1⁰ of {LH_N  => _lh_max'_LH_C_0⁰ | LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]) | _  => error⁰} | _  => error⁰}: 161
//│ [LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 30 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 68
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(ms⁰) | LH_N  => [LH_N]}: 75
//│ [LH_N]: 31 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 68
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(ms⁰) | LH_N  => [LH_N]}: 75
//│ [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹]: 60 --->
//│ 	case _lh_f1_arg1⁰ of {LH_P2 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ => [LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)] | _  => error⁰}: 124
//│ 	case _lh_f2_arg1⁰ of {LH_P3 _lh_f2_LH_P3_0⁰ _lh_f2_LH_P3_1⁰ _lh_f2_LH_P3_2⁰ => case _lh_f2_LH_P3_2⁰ of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹)) | _  => error⁰} | _  => error⁰}: 250
//│ [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 64 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_N]: 74 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_P3 _lh_gcdE_arg2⁰ 0 1]: 99 --->
//│ 	NoCons
//│ 	case _lh_f2_LH_P3_2⁰ of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹)) | _  => error⁰}: 248
//│ [LH_P3 1 0 _lh_gcdE_arg1⁰]: 104 --->
//│ 	case _lh_g_arg1⁰ of {LH_P3 _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰ _lh_g_LH_P3_2⁰ => case _lh_g_arg2⁰ of {LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else let _lh_matchIdent⁰ = quotRem_lh(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 218
//│ [LH_P3 0 1 _lh_gcdE_arg2⁰]: 109 --->
//│ 	case _lh_g_arg2⁰ of {LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else let _lh_matchIdent⁰ = quotRem_lh(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰} | _  => error⁰}: 216
//│ [LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)]: 122 --->
//│ 	NoCons
//│ 	case _lh_f1_arg1⁰ of {LH_P2 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ => [LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)] | _  => error⁰}: 124
//│ 	case _lh_f2_arg1⁰ of {LH_P3 _lh_f2_LH_P3_0⁰ _lh_f2_LH_P3_1⁰ _lh_f2_LH_P3_2⁰ => case _lh_f2_LH_P3_2⁰ of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹)) | _  => error⁰} | _  => error⁰}: 250
//│ [LH_P2 div⁰(_lh_quotRem_arg1⁰, _lh_quotRem_arg2⁰) (_lh_quotRem_arg1⁰ % _lh_quotRem_arg2⁰)]: 136 --->
//│ 	case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰}: 212
//│ [LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]: 150 --->
//│ 	case _lh_max'_arg1⁰ of {LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1⁰ => case _lh_max'_LH_C_1⁰ of {LH_N  => _lh_max'_LH_C_0⁰ | LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]) | _  => error⁰} | _  => error⁰}: 161
//│ [LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]: 155 --->
//│ 	case _lh_max'_arg1⁰ of {LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1⁰ => case _lh_max'_LH_C_1⁰ of {LH_N  => _lh_max'_LH_C_0⁰ | LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]) | _  => error⁰} | _  => error⁰}: 161
//│ [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰]: 177 --->
//│ 	NoCons
//│ 	case _lh_f2_LH_P3_2⁰ of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹)) | _  => error⁰}: 248
//│ [LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹]: 188 --->
//│ 	case _lh_g_arg1⁰ of {LH_P3 _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰ _lh_g_LH_P3_2⁰ => case _lh_g_arg2⁰ of {LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else let _lh_matchIdent⁰ = quotRem_lh(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 218
//│ [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]: 209 --->
//│ 	case _lh_g_arg2⁰ of {LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else let _lh_matchIdent⁰ = quotRem_lh(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰} | _  => error⁰}: 216
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12 --->
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 64
//│ 	[LH_N]: 74
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 68 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 30
//│ 	[LH_N]: 31
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(ms⁰) | LH_N  => [LH_N]}: 75 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 30
//│ 	[LH_N]: 31
//│ case _lh_f1_arg1⁰ of {LH_P2 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ => [LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)] | _  => error⁰}: 124 --->
//│ 	[LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹]: 60
//│ 	[LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)]: 122
//│ case _lh_max'_LH_C_1⁰ of {LH_N  => _lh_max'_LH_C_0⁰ | LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]) | _  => error⁰}: 159 --->
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ case _lh_max'_arg1⁰ of {LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1⁰ => case _lh_max'_LH_C_1⁰ of {LH_N  => _lh_max'_LH_C_0⁰ | LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]) | _  => error⁰} | _  => error⁰}: 161 --->
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]: 150
//│ 	[LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]: 155
//│ case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰}: 212 --->
//│ 	[LH_P2 div⁰(_lh_quotRem_arg1⁰, _lh_quotRem_arg2⁰) (_lh_quotRem_arg1⁰ % _lh_quotRem_arg2⁰)]: 136
//│ case _lh_g_arg2⁰ of {LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else let _lh_matchIdent⁰ = quotRem_lh(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰} | _  => error⁰}: 216 --->
//│ 	[LH_P3 0 1 _lh_gcdE_arg2⁰]: 109
//│ 	[LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]: 209
//│ case _lh_g_arg1⁰ of {LH_P3 _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰ _lh_g_LH_P3_2⁰ => case _lh_g_arg2⁰ of {LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else let _lh_matchIdent⁰ = quotRem_lh(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 218 --->
//│ 	[LH_P3 1 0 _lh_gcdE_arg1⁰]: 104
//│ 	[LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹]: 188
//│ case _lh_f2_LH_P3_2⁰ of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹)) | _  => error⁰}: 248 --->
//│ 	[LH_P3 _lh_gcdE_arg2⁰ 0 1]: 99
//│ 	[LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰]: 177
//│ case _lh_f2_arg1⁰ of {LH_P3 _lh_f2_LH_P3_0⁰ _lh_f2_LH_P3_1⁰ _lh_f2_LH_P3_2⁰ => case _lh_f2_LH_P3_2⁰ of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹)) | _  => error⁰} | _  => error⁰}: 250 --->
//│ 	[LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹]: 60
//│ 	[LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)]: 122
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_P2 div⁰(_lh_quotRem_arg1⁰, _lh_quotRem_arg2⁰) (_lh_quotRem_arg1⁰ % _lh_quotRem_arg2⁰)]: 136 --->
//│ 	case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰}: 212
//│ ------------------
//│ case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰}: 212 --->
//│ 	[LH_P2 div⁰(_lh_quotRem_arg1⁰, _lh_quotRem_arg2⁰) (_lh_quotRem_arg1⁰ % _lh_quotRem_arg2⁰)]: 136
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testGcd_nofib_lh(primId⁰(200))
//│ def abs_lh(_lh_abs_arg1¹) = if (_lh_abs_arg1¹ < 0) then (0 - _lh_abs_arg1¹) else _lh_abs_arg1¹
//│ def enumFromTo_lh(a¹, b¹) = if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh((a¹ + 1), b¹)] else [LH_N]
//│ def f1_lh(_lh_f1_arg1¹) = case _lh_f1_arg1¹ of {
//│ 	LH_P2 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ => [LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)]
//│ 	| _  => error⁰}
//│ def f2_lh(_lh_f2_arg1¹) = case _lh_f2_arg1¹ of {
//│ 	LH_P3 _lh_f2_LH_P3_0⁰ _lh_f2_LH_P3_1⁰ _lh_f2_LH_P3_2⁰ => case _lh_f2_LH_P3_2⁰ of {
//│ 		LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹))
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def g_lh(_lh_g_arg1¹, _lh_g_arg2¹) = case _lh_g_arg1¹ of {
//│ 	LH_P3 _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰ _lh_g_LH_P3_2⁰ => case _lh_g_arg2¹ of {
//│ 		LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else 
//│ 			let _lh_matchIdent¹ = quotRem_lh(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ 			in _lh_matchIdent¹(_lh_g_LH_P3_0¹, _lh_g_LH_P3_0⁰, _lh_g_LH_P3_1¹, _lh_g_LH_P3_1⁰, _lh_g_LH_P3_2¹)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def gcdE_lh(_lh_gcdE_arg1¹, _lh_gcdE_arg2¹) = case _lh_gcdE_arg1¹ of {
//│ 	0  => [LH_P3 _lh_gcdE_arg2¹ 0 1]
//│ 	| _  => g_lh([LH_P3 1 0 _lh_gcdE_arg1¹], [LH_P3 0 1 _lh_gcdE_arg2¹])}
//│ def map_lh(f¹, ls¹) = case ls¹ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f¹(h⁰) map_lh(f¹, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def max'_lh(_lh_max'_arg1¹) = case _lh_max'_arg1¹ of {
//│ 	LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1⁰ => case _lh_max'_LH_C_1⁰ of {
//│ 		LH_N  => _lh_max'_LH_C_0⁰
//│ 		| LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹])
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def quotRem_lh(_lh_quotRem_arg1¹, _lh_quotRem_arg2¹) = 
//│ 	let _lh_g_LH_P2_1¹ = (_lh_quotRem_arg1¹ % _lh_quotRem_arg2¹)
//│ 	in let _lh_g_LH_P2_0¹ = div⁰(_lh_quotRem_arg1¹, _lh_quotRem_arg2¹)
//│ 	in (fun _lh_g_LH_P3_0² -> (fun _lh_g_LH_P3_0³ -> (fun _lh_g_LH_P3_1² -> (fun _lh_g_LH_P3_1³ -> (fun _lh_g_LH_P3_2² -> g_lh([LH_P3 _lh_g_LH_P3_0² _lh_g_LH_P3_1² _lh_g_LH_P3_2²], [LH_P3 (_lh_g_LH_P3_0³ - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0²)) (_lh_g_LH_P3_1³ - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1²)) _lh_g_LH_P2_1¹]))))))
//│ def testGcd_nofib_lh(_lh_testGcd_nofib_arg1¹) = test_lh(_lh_testGcd_nofib_arg1¹)
//│ def test_lh(_lh_test_arg1¹) = 
//│ 	let ns¹ = enumFromTo_lh(5000, (5000 + _lh_test_arg1¹))
//│ 	in let ms¹ = enumFromTo_lh(10000, (10000 + _lh_test_arg1¹))
//│ 	in let tripls¹ = map_lh(f1_lh, 
//│ 		let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 				let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 					LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t¹)]
//│ 					| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t⁰)})
//│ 				in _lh_listcomp_fun³(ms¹)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²(ns¹))
//│ 	in let rs¹ = map_lh(f2_lh, tripls¹)
//│ 	in max'_lh(rs¹)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
