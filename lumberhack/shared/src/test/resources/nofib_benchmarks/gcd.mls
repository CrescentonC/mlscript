:NewParser
:ParseOnly

:lhNoIter
:lhInHaskell
:lhGenOCaml
abs x = if x < 0 then (0 - x) else x
f1 (x,y) = (x, y, gcdE x y)
f2 (_, _, (g, u, v)) = abs (g+u+v)
quotRem a b = (a `div` b, a `mod` b)
test d = let ns = [5000..(5000+d)] in
              let ms = [10000..(10000+d)] in
                    let tripls = map f1 [(x, y) | x <- ns, y <- ms] in
                          let rs = (map f2 tripls) in
                                max' rs
max' [x]      = x
max' (x:y:xs) = if (x<y) then max' (y:xs)  else  max' (x:xs)
g (u1, u2, u3) (v1, v2, v3) =
                   if (v3 == 0) then (u3, u1, u2)
                   else
                      case (quotRem u3 v3) of
                        (q,r) -> g (v1,v2,v3) (u1-(q*v1), u2-(q*v2), r)
gcdE 0 y = (y,0,1)
gcdE x y = g (1,0,x) (0,1,y)
testGcd_nofib x = test x
testGcd_nofib $ primId 200
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testGcd_nofib_lh_₁^286(primId⁰(200))
//│ def abs_lh_₁(_lh_abs_arg1⁰) = if (_lh_abs_arg1⁰ < 0) then (0 - _lh_abs_arg1⁰) else _lh_abs_arg1⁰
//│ def enumFromTo_lh_₁(a¹, b¹) = if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh_₁^194((a¹ + 1), b¹)] else [LH_N]
//│ def enumFromTo_lh_₂(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh_₂^156((a⁰ + 1), b⁰)] else [LH_N]
//│ def f1_lh_₁(_lh_f1_arg1⁰) = case _lh_f1_arg1⁰ of {
//│ 	LH_P2 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ => [LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh_₁^141(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)]
//│ 	| _  => error⁰}
//│ def f2_lh_₁(_lh_f2_arg1⁰) = case _lh_f2_arg1⁰ of {
//│ 	LH_P3 _lh_f2_LH_P3_0⁰ _lh_f2_LH_P3_1⁰ _lh_f2_LH_P3_2⁰ => case _lh_f2_LH_P3_2⁰ of {
//│ 		LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh_₁^172(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹))
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def g_lh_₁(_lh_g_arg1⁰, _lh_g_arg2⁰) = case _lh_g_arg1⁰ of {
//│ 	LH_P3 _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰ _lh_g_LH_P3_2⁰ => case _lh_g_arg2⁰ of {
//│ 		LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else 
//│ 			let _lh_matchIdent⁰ = quotRem_lh_₁^25(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ 			in case _lh_matchIdent⁰ of {
//│ 				LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh_₁^31([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰])
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def gcdE_lh_₁(_lh_gcdE_arg1⁰, _lh_gcdE_arg2⁰) = case _lh_gcdE_arg1⁰ of {
//│ 	0  => [LH_P3 _lh_gcdE_arg2⁰ 0 1]
//│ 	| _  => g_lh_₁^73([LH_P3 1 0 _lh_gcdE_arg1⁰], [LH_P3 0 1 _lh_gcdE_arg2⁰])}
//│ def map_lh_₁(f¹, ls¹) = case ls¹ of {
//│ 	LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₁^212(f¹, t¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₂^128(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def max'_lh_₁(_lh_max'_arg1⁰) = case _lh_max'_arg1⁰ of {
//│ 	LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1⁰ => case _lh_max'_LH_C_1⁰ of {
//│ 		LH_N  => _lh_max'_LH_C_0⁰
//│ 		| LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh_₁^108([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh_₁^113([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹])
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def quotRem_lh_₁(_lh_quotRem_arg1⁰, _lh_quotRem_arg2⁰) = [LH_P2 div⁰(_lh_quotRem_arg1⁰, _lh_quotRem_arg2⁰) (_lh_quotRem_arg1⁰ % _lh_quotRem_arg2⁰)]
//│ def testGcd_nofib_lh_₁(_lh_testGcd_nofib_arg1⁰) = test_lh_₁^282(_lh_testGcd_nofib_arg1⁰)
//│ def test_lh_₁(_lh_test_arg1⁰) = 
//│ 	let ns⁰ = enumFromTo_lh_₂^222(5000, (5000 + _lh_test_arg1⁰))
//│ 	in let ms⁰ = enumFromTo_lh_₁^231(10000, (10000 + _lh_test_arg1⁰))
//│ 	in let tripls⁰ = map_lh_₁^240(f1_lh_₁^241, 
//│ 		let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 				let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 					LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 					| LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ 				in _lh_listcomp_fun¹(ms⁰)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁰(ns⁰))
//│ 	in let rs⁰ = map_lh_₂^269(f2_lh_₁^270, tripls⁰)
//│ 	in max'_lh_₁^274(rs⁰)
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo_lh__d2 a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh__d2 (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec map_lh__d2 f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C((f_0 h_0), ((map_lh__d2 f_0) t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec enumFromTo_lh__d1 a_1 b_1 =
//│ 		  (if (a_1 <= b_1) then
//│ 		    (`LH_C(a_1, ((enumFromTo_lh__d1 (a_1 + 1)) b_1)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec quotRem_lh__d1 _lh_quotRem_arg1_0 _lh_quotRem_arg2_0 =
//│ 		  (`LH_P2((_lh_quotRem_arg1_0 / _lh_quotRem_arg2_0), (_lh_quotRem_arg1_0 mod _lh_quotRem_arg2_0)));;
//│ 		let rec g_lh__d1 _lh_g_arg1_0 _lh_g_arg2_0 =
//│ 		  (match _lh_g_arg1_0 with
//│ 		    | `LH_P3(_lh_g_LH_P3_0_0, _lh_g_LH_P3_1_0, _lh_g_LH_P3_2_0) -> 
//│ 		      (match _lh_g_arg2_0 with
//│ 		        | `LH_P3(_lh_g_LH_P3_0_1, _lh_g_LH_P3_1_1, _lh_g_LH_P3_2_1) -> 
//│ 		          (if (_lh_g_LH_P3_2_1 = 0) then
//│ 		            (`LH_P3(_lh_g_LH_P3_2_0, _lh_g_LH_P3_0_0, _lh_g_LH_P3_1_0))
//│ 		          else
//│ 		            (let rec _lh_matchIdent_0 = ((quotRem_lh__d1 _lh_g_LH_P3_2_0) _lh_g_LH_P3_2_1) in
//│ 		              (match _lh_matchIdent_0 with
//│ 		                | `LH_P2(_lh_g_LH_P2_0_0, _lh_g_LH_P2_1_0) -> 
//│ 		                  ((g_lh__d1 (`LH_P3(_lh_g_LH_P3_0_1, _lh_g_LH_P3_1_1, _lh_g_LH_P3_2_1))) (`LH_P3((_lh_g_LH_P3_0_0 - (_lh_g_LH_P2_0_0 * _lh_g_LH_P3_0_1)), (_lh_g_LH_P3_1_0 - (_lh_g_LH_P2_0_0 * _lh_g_LH_P3_1_1)), _lh_g_LH_P2_1_0)))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec gcdE_lh__d1 _lh_gcdE_arg1_0 _lh_gcdE_arg2_0 =
//│ 		  (match _lh_gcdE_arg1_0 with
//│ 		    | 0 -> 
//│ 		      (`LH_P3(_lh_gcdE_arg2_0, 0, 1))
//│ 		    | _ -> 
//│ 		      ((g_lh__d1 (`LH_P3(1, 0, _lh_gcdE_arg1_0))) (`LH_P3(0, 1, _lh_gcdE_arg2_0))));;
//│ 		let rec f1_lh__d1 _lh_f1_arg1_0 =
//│ 		  (match _lh_f1_arg1_0 with
//│ 		    | `LH_P2(_lh_f1_LH_P2_0_0, _lh_f1_LH_P2_1_0) -> 
//│ 		      (`LH_P3(_lh_f1_LH_P2_0_0, _lh_f1_LH_P2_1_0, ((gcdE_lh__d1 _lh_f1_LH_P2_0_0) _lh_f1_LH_P2_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec abs_lh__d1 _lh_abs_arg1_0 =
//│ 		  (if (_lh_abs_arg1_0 < 0) then
//│ 		    (0 - _lh_abs_arg1_0)
//│ 		  else
//│ 		    _lh_abs_arg1_0);;
//│ 		let rec f2_lh__d1 _lh_f2_arg1_0 =
//│ 		  (match _lh_f2_arg1_0 with
//│ 		    | `LH_P3(_lh_f2_LH_P3_0_0, _lh_f2_LH_P3_1_0, _lh_f2_LH_P3_2_0) -> 
//│ 		      (match _lh_f2_LH_P3_2_0 with
//│ 		        | `LH_P3(_lh_f2_LH_P3_0_1, _lh_f2_LH_P3_1_1, _lh_f2_LH_P3_2_1) -> 
//│ 		          (abs_lh__d1 ((_lh_f2_LH_P3_0_1 + _lh_f2_LH_P3_1_1) + _lh_f2_LH_P3_2_1))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec max'_lh__d1 _lh_max'_arg1_0 =
//│ 		  (match _lh_max'_arg1_0 with
//│ 		    | `LH_C(_lh_max'_LH_C_0_0, _lh_max'_LH_C_1_0) -> 
//│ 		      (match _lh_max'_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          _lh_max'_LH_C_0_0
//│ 		        | `LH_C(_lh_max'_LH_C_0_1, _lh_max'_LH_C_1_1) -> 
//│ 		          (if (_lh_max'_LH_C_0_0 < _lh_max'_LH_C_0_1) then
//│ 		            (max'_lh__d1 (`LH_C(_lh_max'_LH_C_0_1, _lh_max'_LH_C_1_1)))
//│ 		          else
//│ 		            (max'_lh__d1 (`LH_C(_lh_max'_LH_C_0_0, _lh_max'_LH_C_1_1))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec map_lh__d1 f_1 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (`LH_C((f_1 h_1), ((map_lh__d1 f_1) t_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec test_lh__d1 _lh_test_arg1_0 =
//│ 		  (let rec ns_0 = ((enumFromTo_lh__d2 5000) (5000 + _lh_test_arg1_0)) in
//│ 		    (let rec ms_0 = ((enumFromTo_lh__d1 10000) (10000 + _lh_test_arg1_0)) in
//│ 		      (let rec tripls_0 = ((map_lh__d1 f1_lh__d1) (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		        (match _lh_listcomp_fun_para_0 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		            (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		              (match _lh_listcomp_fun_para_1 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		                  (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_h_1)), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		                | `LH_N -> 
//│ 		                  (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))) in
//│ 		              (_lh_listcomp_fun_1 ms_0))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_0 ns_0))) in
//│ 		        (let rec rs_0 = ((map_lh__d2 f2_lh__d1) tripls_0) in
//│ 		          (max'_lh__d1 rs_0)))));;
//│ 		let rec testGcd_nofib_lh__d1 _lh_testGcd_nofib_arg1_0 =
//│ 		  (test_lh__d1 _lh_testGcd_nofib_arg1_0);;
//│ 		(testGcd_nofib_lh__d1 200)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_P2 div⁰(_lh_quotRem_arg1⁰, _lh_quotRem_arg2⁰) (_lh_quotRem_arg1⁰ % _lh_quotRem_arg2⁰)]: 11 --->
//│ 	case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh_₁([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰}: 59
//│ [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰]: 24 --->
//│ 	case _lh_f2_LH_P3_2⁰ of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh_₁(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹)) | _  => error⁰}: 184
//│ [LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹]: 35 --->
//│ 	case _lh_g_arg1⁰ of {LH_P3 _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰ _lh_g_LH_P3_2⁰ => case _lh_g_arg2⁰ of {LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else let _lh_matchIdent⁰ = quotRem_lh_₁(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh_₁([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 65
//│ [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]: 56 --->
//│ 	case _lh_g_arg2⁰ of {LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else let _lh_matchIdent⁰ = quotRem_lh_₁(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh_₁([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰} | _  => error⁰}: 63
//│ [LH_P3 _lh_gcdE_arg2⁰ 0 1]: 72 --->
//│ 	case _lh_f2_LH_P3_2⁰ of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh_₁(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹)) | _  => error⁰}: 184
//│ [LH_P3 1 0 _lh_gcdE_arg1⁰]: 77 --->
//│ 	case _lh_g_arg1⁰ of {LH_P3 _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰ _lh_g_LH_P3_2⁰ => case _lh_g_arg2⁰ of {LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else let _lh_matchIdent⁰ = quotRem_lh_₁(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh_₁([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 65
//│ [LH_P3 0 1 _lh_gcdE_arg2⁰]: 82 --->
//│ 	case _lh_g_arg2⁰ of {LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else let _lh_matchIdent⁰ = quotRem_lh_₁(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh_₁([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰} | _  => error⁰}: 63
//│ [LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]: 111 --->
//│ 	case _lh_max'_arg1⁰ of {LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1⁰ => case _lh_max'_LH_C_1⁰ of {LH_N  => _lh_max'_LH_C_0⁰ | LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh_₁([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh_₁([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]) | _  => error⁰} | _  => error⁰}: 122
//│ [LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]: 116 --->
//│ 	case _lh_max'_arg1⁰ of {LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1⁰ => case _lh_max'_LH_C_1⁰ of {LH_N  => _lh_max'_LH_C_0⁰ | LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh_₁([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh_₁([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]) | _  => error⁰} | _  => error⁰}: 122
//│ [LH_C f⁰(h⁰) map_lh_₂(f⁰, t⁰)]: 133 --->
//│ 	case _lh_max'_LH_C_1⁰ of {LH_N  => _lh_max'_LH_C_0⁰ | LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh_₁([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh_₁([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]) | _  => error⁰}: 120
//│ 	case _lh_max'_arg1⁰ of {LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1⁰ => case _lh_max'_LH_C_1⁰ of {LH_N  => _lh_max'_LH_C_0⁰ | LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh_₁([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh_₁([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]) | _  => error⁰} | _  => error⁰}: 122
//│ [LH_N]: 134 --->
//│ 	case _lh_max'_LH_C_1⁰ of {LH_N  => _lh_max'_LH_C_0⁰ | LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh_₁([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh_₁([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]) | _  => error⁰}: 120
//│ 	case _lh_max'_arg1⁰ of {LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1⁰ => case _lh_max'_LH_C_1⁰ of {LH_N  => _lh_max'_LH_C_0⁰ | LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh_₁([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh_₁([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]) | _  => error⁰} | _  => error⁰}: 122
//│ [LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh_₁(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)]: 146 --->
//│ 	case _lh_f2_arg1⁰ of {LH_P3 _lh_f2_LH_P3_0⁰ _lh_f2_LH_P3_1⁰ _lh_f2_LH_P3_2⁰ => case _lh_f2_LH_P3_2⁰ of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh_₁(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹)) | _  => error⁰} | _  => error⁰}: 186
//│ [LH_C a⁰ enumFromTo_lh_₂((a⁰ + 1), b⁰)]: 165 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(ms⁰) | LH_N  => [LH_N]}: 262
//│ [LH_N]: 166 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(ms⁰) | LH_N  => [LH_N]}: 262
//│ [LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)]: 203 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 255
//│ [LH_N]: 204 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 255
//│ [LH_C f¹(h¹) map_lh_₁(f¹, t¹)]: 217 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₂(f⁰, t⁰)] | LH_N  => [LH_N]}: 135
//│ [LH_N]: 218 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₂(f⁰, t⁰)] | LH_N  => [LH_N]}: 135
//│ [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹]: 247 --->
//│ 	case _lh_f1_arg1⁰ of {LH_P2 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ => [LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh_₁(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)] | _  => error⁰}: 148
//│ [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 251 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₁(f¹, t¹)] | LH_N  => [LH_N]}: 219
//│ [LH_N]: 261 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₁(f¹, t¹)] | LH_N  => [LH_N]}: 219
//│ ------------------
//│ case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh_₁([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰}: 59 --->
//│ 	[LH_P2 div⁰(_lh_quotRem_arg1⁰, _lh_quotRem_arg2⁰) (_lh_quotRem_arg1⁰ % _lh_quotRem_arg2⁰)]: 11
//│ case _lh_g_arg2⁰ of {LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else let _lh_matchIdent⁰ = quotRem_lh_₁(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh_₁([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰} | _  => error⁰}: 63 --->
//│ 	[LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]: 56
//│ 	[LH_P3 0 1 _lh_gcdE_arg2⁰]: 82
//│ case _lh_g_arg1⁰ of {LH_P3 _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰ _lh_g_LH_P3_2⁰ => case _lh_g_arg2⁰ of {LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else let _lh_matchIdent⁰ = quotRem_lh_₁(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh_₁([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 65 --->
//│ 	[LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹]: 35
//│ 	[LH_P3 1 0 _lh_gcdE_arg1⁰]: 77
//│ case _lh_max'_LH_C_1⁰ of {LH_N  => _lh_max'_LH_C_0⁰ | LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh_₁([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh_₁([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]) | _  => error⁰}: 120 --->
//│ 	[LH_C f⁰(h⁰) map_lh_₂(f⁰, t⁰)]: 133
//│ 	[LH_N]: 134
//│ case _lh_max'_arg1⁰ of {LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1⁰ => case _lh_max'_LH_C_1⁰ of {LH_N  => _lh_max'_LH_C_0⁰ | LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh_₁([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh_₁([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]) | _  => error⁰} | _  => error⁰}: 122 --->
//│ 	[LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]: 111
//│ 	[LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹]: 116
//│ 	[LH_C f⁰(h⁰) map_lh_₂(f⁰, t⁰)]: 133
//│ 	[LH_N]: 134
//│ case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₂(f⁰, t⁰)] | LH_N  => [LH_N]}: 135 --->
//│ 	[LH_C f¹(h¹) map_lh_₁(f¹, t¹)]: 217
//│ 	[LH_N]: 218
//│ case _lh_f1_arg1⁰ of {LH_P2 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ => [LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh_₁(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)] | _  => error⁰}: 148 --->
//│ 	[LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹]: 247
//│ case _lh_f2_LH_P3_2⁰ of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh_₁(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹)) | _  => error⁰}: 184 --->
//│ 	[LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰]: 24
//│ 	[LH_P3 _lh_gcdE_arg2⁰ 0 1]: 72
//│ case _lh_f2_arg1⁰ of {LH_P3 _lh_f2_LH_P3_0⁰ _lh_f2_LH_P3_1⁰ _lh_f2_LH_P3_2⁰ => case _lh_f2_LH_P3_2⁰ of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh_₁(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹)) | _  => error⁰} | _  => error⁰}: 186 --->
//│ 	[LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh_₁(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)]: 146
//│ case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₁(f¹, t¹)] | LH_N  => [LH_N]}: 219 --->
//│ 	[LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 251
//│ 	[LH_N]: 261
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 255 --->
//│ 	[LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)]: 203
//│ 	[LH_N]: 204
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(ms⁰) | LH_N  => [LH_N]}: 262 --->
//│ 	[LH_C a⁰ enumFromTo_lh_₂((a⁰ + 1), b⁰)]: 165
//│ 	[LH_N]: 166
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_P2 div⁰(_lh_quotRem_arg1⁰, _lh_quotRem_arg2⁰) (_lh_quotRem_arg1⁰ % _lh_quotRem_arg2⁰)]: 11 --->
//│ 	case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh_₁([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰}: 59
//│ [LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh_₁(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)]: 146 --->
//│ 	case _lh_f2_arg1⁰ of {LH_P3 _lh_f2_LH_P3_0⁰ _lh_f2_LH_P3_1⁰ _lh_f2_LH_P3_2⁰ => case _lh_f2_LH_P3_2⁰ of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh_₁(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹)) | _  => error⁰} | _  => error⁰}: 186
//│ [LH_C a⁰ enumFromTo_lh_₂((a⁰ + 1), b⁰)]: 165 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(ms⁰) | LH_N  => [LH_N]}: 262
//│ [LH_N]: 166 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(ms⁰) | LH_N  => [LH_N]}: 262
//│ [LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)]: 203 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 255
//│ [LH_N]: 204 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 255
//│ [LH_C f¹(h¹) map_lh_₁(f¹, t¹)]: 217 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₂(f⁰, t⁰)] | LH_N  => [LH_N]}: 135
//│ [LH_N]: 218 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₂(f⁰, t⁰)] | LH_N  => [LH_N]}: 135
//│ [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹]: 247 --->
//│ 	case _lh_f1_arg1⁰ of {LH_P2 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ => [LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh_₁(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)] | _  => error⁰}: 148
//│ [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 251 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₁(f¹, t¹)] | LH_N  => [LH_N]}: 219
//│ [LH_N]: 261 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₁(f¹, t¹)] | LH_N  => [LH_N]}: 219
//│ ------------------
//│ case _lh_matchIdent⁰ of {LH_P2 _lh_g_LH_P2_0⁰ _lh_g_LH_P2_1⁰ => g_lh_₁([LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹], [LH_P3 (_lh_g_LH_P3_0⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0¹)) (_lh_g_LH_P3_1⁰ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1¹)) _lh_g_LH_P2_1⁰]) | _  => error⁰}: 59 --->
//│ 	[LH_P2 div⁰(_lh_quotRem_arg1⁰, _lh_quotRem_arg2⁰) (_lh_quotRem_arg1⁰ % _lh_quotRem_arg2⁰)]: 11
//│ case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₂(f⁰, t⁰)] | LH_N  => [LH_N]}: 135 --->
//│ 	[LH_C f¹(h¹) map_lh_₁(f¹, t¹)]: 217
//│ 	[LH_N]: 218
//│ case _lh_f1_arg1⁰ of {LH_P2 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ => [LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh_₁(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)] | _  => error⁰}: 148 --->
//│ 	[LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹]: 247
//│ case _lh_f2_arg1⁰ of {LH_P3 _lh_f2_LH_P3_0⁰ _lh_f2_LH_P3_1⁰ _lh_f2_LH_P3_2⁰ => case _lh_f2_LH_P3_2⁰ of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh_₁(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹)) | _  => error⁰} | _  => error⁰}: 186 --->
//│ 	[LH_P3 _lh_f1_LH_P2_0⁰ _lh_f1_LH_P2_1⁰ gcdE_lh_₁(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)]: 146
//│ case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₁(f¹, t¹)] | LH_N  => [LH_N]}: 219 --->
//│ 	[LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 251
//│ 	[LH_N]: 261
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 255 --->
//│ 	[LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)]: 203
//│ 	[LH_N]: 204
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_h¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(ms⁰) | LH_N  => [LH_N]}: 262 --->
//│ 	[LH_C a⁰ enumFromTo_lh_₂((a⁰ + 1), b⁰)]: 165
//│ 	[LH_N]: 166
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testGcd_nofib_lh_₁(primId⁰(200))
//│ def abs_lh_₁(_lh_abs_arg1¹) = if (_lh_abs_arg1¹ < 0) then (0 - _lh_abs_arg1¹) else _lh_abs_arg1¹
//│ def enumFromTo_lh_₁(a³, b³) = if (a³ <= b³) then 
//│ 	let _lh_listcomp_fun_ls_t³ = enumFromTo_lh_₁((a³ + 1), b³)
//│ 	in let _lh_listcomp_fun_ls_h³ = a³
//│ 	in (fun _lh_listcomp_fun_ls_h⁴ -> (fun _lh_listcomp_fun⁵ -> (fun _lh_listcomp_fun_ls_t⁴ -> (fun _lh_listcomp_fun⁶ -> 
//│ 		let t² = _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t³)
//│ 		in let h² = 	
//│ 			let _lh_f1_LH_P2_1¹ = _lh_listcomp_fun_ls_h³
//│ 			in let _lh_f1_LH_P2_0¹ = _lh_listcomp_fun_ls_h⁴
//│ 			in (fun _lh_dummy¹ -> 
//│ 				let _lh_f2_LH_P3_2² = gcdE_lh_₁(_lh_f1_LH_P2_0¹, _lh_f1_LH_P2_1¹)
//│ 				in let _lh_f2_LH_P3_1² = _lh_f1_LH_P2_1¹
//│ 				in let _lh_f2_LH_P3_0² = _lh_f1_LH_P2_0¹
//│ 				in (fun _lh_dummy⁰ -> case _lh_f2_LH_P3_2² of {
//│ 					LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh_₁(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹))
//│ 					| _  => error⁰}))
//│ 		in (fun f⁵ -> 
//│ 			let t³ = map_lh_₁(f⁵, t²)
//│ 			in let h³ = f⁵(h²)
//│ 			in (fun f⁶ -> [LH_C f⁶(h³) map_lh_₂(f⁶, t³)])))))) else (fun _lh_listcomp_fun_ls_h⁵ -> (fun _lh_listcomp_fun⁷ -> (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁸ -> _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁵)))))
//│ def enumFromTo_lh_₂(a², b²) = if (a² <= b²) then 
//│ 	let _lh_listcomp_fun_ls_t² = enumFromTo_lh_₂((a² + 1), b²)
//│ 	in let _lh_listcomp_fun_ls_h² = a²
//│ 	in (fun _lh_listcomp_fun² -> (fun ms¹ -> 
//│ 		let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun_ls_h², _lh_listcomp_fun³, _lh_listcomp_fun_ls_t², _lh_listcomp_fun²))
//│ 		in _lh_listcomp_fun³(ms¹))) else (fun _lh_listcomp_fun⁴ -> (fun ms² -> (fun f² -> (fun f³ -> [LH_N]))))
//│ def f1_lh_₁(_lh_f1_arg1¹) = _lh_f1_arg1¹(99)
//│ def f2_lh_₁(_lh_f2_arg1¹) = _lh_f2_arg1¹(99)
//│ def g_lh_₁(_lh_g_arg1¹, _lh_g_arg2¹) = case _lh_g_arg1¹ of {
//│ 	LH_P3 _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰ _lh_g_LH_P3_2⁰ => case _lh_g_arg2¹ of {
//│ 		LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else 
//│ 			let _lh_matchIdent¹ = quotRem_lh_₁(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ 			in _lh_matchIdent¹(_lh_g_LH_P3_0¹, _lh_g_LH_P3_0⁰, _lh_g_LH_P3_1¹, _lh_g_LH_P3_1⁰, _lh_g_LH_P3_2¹)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def gcdE_lh_₁(_lh_gcdE_arg1¹, _lh_gcdE_arg2¹) = case _lh_gcdE_arg1¹ of {
//│ 	0  => [LH_P3 _lh_gcdE_arg2¹ 0 1]
//│ 	| _  => g_lh_₁([LH_P3 1 0 _lh_gcdE_arg1¹], [LH_P3 0 1 _lh_gcdE_arg2¹])}
//│ def map_lh_₁(f⁷, ls³) = ls³(f⁷)
//│ def map_lh_₂(f⁴, ls²) = ls²(f⁴)
//│ def max'_lh_₁(_lh_max'_arg1¹) = case _lh_max'_arg1¹ of {
//│ 	LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1⁰ => case _lh_max'_LH_C_1⁰ of {
//│ 		LH_N  => _lh_max'_LH_C_0⁰
//│ 		| LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh_₁([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh_₁([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹])
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def quotRem_lh_₁(_lh_quotRem_arg1¹, _lh_quotRem_arg2¹) = 
//│ 	let _lh_g_LH_P2_1¹ = (_lh_quotRem_arg1¹ % _lh_quotRem_arg2¹)
//│ 	in let _lh_g_LH_P2_0¹ = div⁰(_lh_quotRem_arg1¹, _lh_quotRem_arg2¹)
//│ 	in (fun _lh_g_LH_P3_0² -> (fun _lh_g_LH_P3_0³ -> (fun _lh_g_LH_P3_1² -> (fun _lh_g_LH_P3_1³ -> (fun _lh_g_LH_P3_2² -> g_lh_₁([LH_P3 _lh_g_LH_P3_0² _lh_g_LH_P3_1² _lh_g_LH_P3_2²], [LH_P3 (_lh_g_LH_P3_0³ - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0²)) (_lh_g_LH_P3_1³ - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1²)) _lh_g_LH_P2_1¹]))))))
//│ def testGcd_nofib_lh_₁(_lh_testGcd_nofib_arg1¹) = test_lh_₁(_lh_testGcd_nofib_arg1¹)
//│ def test_lh_₁(_lh_test_arg1¹) = 
//│ 	let ns¹ = enumFromTo_lh_₂(5000, (5000 + _lh_test_arg1¹))
//│ 	in let ms³ = enumFromTo_lh_₁(10000, (10000 + _lh_test_arg1¹))
//│ 	in let tripls¹ = map_lh_₁(f1_lh_₁, 
//│ 		let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para³ -> _lh_listcomp_fun_para³(_lh_listcomp_fun⁹, ms³))
//│ 		in _lh_listcomp_fun⁹(ns¹))
//│ 	in let rs¹ = map_lh_₂(f2_lh_₁, tripls¹)
//│ 	in max'_lh_₁(rs¹)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ map_lh_₂, test_lh_₁, map_lh_₁, f2_lh_₁, f1_lh_₁, g_lh_₁
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ enumFromTo_lh_₂ -> 2
//│ enumFromTo_lh_₁ -> 2
//│ quotRem_lh_₁ -> 7
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ testGcd_nofib_lh_₁(primId⁰(200))
//│ def abs_lh_₁(_lh_abs_arg1⁰) = if (_lh_abs_arg1⁰ < 0) then (0 - _lh_abs_arg1⁰) else _lh_abs_arg1⁰
//│ def enumFromTo_lh_₁(a¹, b¹) = if (a¹ <= b¹) then 
//│ 	let _lh_listcomp_fun_ls_t¹ = enumFromTo_lh_₁((a¹ + 1), b¹)
//│ 	in let _lh_listcomp_fun_ls_h¹ = a¹
//│ 	in (fun _lh_listcomp_fun_ls_h² -> (fun _lh_listcomp_fun³ -> (fun _lh_listcomp_fun_ls_t² -> (fun _lh_listcomp_fun⁴ -> 
//│ 		let t⁰ = _lh_listcomp_fun³(_lh_listcomp_fun_ls_t¹)
//│ 		in let h⁰ = 	
//│ 			let _lh_f1_LH_P2_1⁰ = _lh_listcomp_fun_ls_h¹
//│ 			in let _lh_f1_LH_P2_0⁰ = _lh_listcomp_fun_ls_h²
//│ 			in (fun _lh_dummy⁰ -> 
//│ 				let _lh_f2_LH_P3_2⁰ = gcdE_lh_₁(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)
//│ 				in let _lh_f2_LH_P3_1⁰ = _lh_f1_LH_P2_1⁰
//│ 				in let _lh_f2_LH_P3_0⁰ = _lh_f1_LH_P2_0⁰
//│ 				in (fun _lh_dummy¹ -> case _lh_f2_LH_P3_2⁰ of {
//│ 					LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh_₁(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹))
//│ 					| _  => error⁰}))
//│ 		in (fun f³ -> 
//│ 			let t¹ = t⁰(f³)
//│ 			in let h¹ = f³(h⁰)
//│ 			in (fun f⁴ -> [LH_C f⁴(h¹) t¹(f⁴)])))))) else (fun _lh_listcomp_fun_ls_h³ -> (fun _lh_listcomp_fun⁵ -> (fun _lh_listcomp_fun_ls_t³ -> (fun _lh_listcomp_fun⁶ -> _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)))))
//│ def enumFromTo_lh_₂(a⁰, b⁰) = if (a⁰ <= b⁰) then 
//│ 	let _lh_listcomp_fun_ls_t⁰ = enumFromTo_lh_₂((a⁰ + 1), b⁰)
//│ 	in let _lh_listcomp_fun_ls_h⁰ = a⁰
//│ 	in (fun _lh_listcomp_fun⁰ -> (fun ms⁰ -> 
//│ 		let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para⁰ -> _lh_listcomp_fun_para⁰(_lh_listcomp_fun_ls_h⁰, _lh_listcomp_fun¹, _lh_listcomp_fun_ls_t⁰, _lh_listcomp_fun⁰))
//│ 		in _lh_listcomp_fun¹(ms⁰))) else (fun _lh_listcomp_fun² -> (fun ms¹ -> (fun f⁰ -> (fun f¹ -> [LH_N]))))
//│ def f1_lh_₁(_lh_f1_arg1⁰) = _lh_f1_arg1⁰(99)
//│ def f2_lh_₁(_lh_f2_arg1⁰) = _lh_f2_arg1⁰(99)
//│ def g_lh_₁(_lh_g_arg1⁰, _lh_g_arg2⁰) = case _lh_g_arg1⁰ of {
//│ 	LH_P3 _lh_g_LH_P3_0² _lh_g_LH_P3_1² _lh_g_LH_P3_2² => case _lh_g_arg2⁰ of {
//│ 		LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³ => if (_lh_g_LH_P3_2³ == 0) then [LH_P3 _lh_g_LH_P3_2² _lh_g_LH_P3_0² _lh_g_LH_P3_1²] else 
//│ 			let _lh_matchIdent¹ = quotRem_lh_₁(_lh_g_LH_P3_2², _lh_g_LH_P3_2³)
//│ 			in _lh_matchIdent¹(_lh_g_LH_P3_0³, _lh_g_LH_P3_0², _lh_g_LH_P3_1³, _lh_g_LH_P3_1², _lh_g_LH_P3_2³)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def gcdE_lh_₁(_lh_gcdE_arg1⁰, _lh_gcdE_arg2⁰) = case _lh_gcdE_arg1⁰ of {
//│ 	0  => [LH_P3 _lh_gcdE_arg2⁰ 0 1]
//│ 	| _  => case [LH_P3 1 0 _lh_gcdE_arg1⁰] of {
//│ 		LH_P3 _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰ _lh_g_LH_P3_2⁰ => case [LH_P3 0 1 _lh_gcdE_arg2⁰] of {
//│ 			LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else 
//│ 				let _lh_matchIdent⁰ = quotRem_lh_₁(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ 				in _lh_matchIdent⁰(_lh_g_LH_P3_0¹, _lh_g_LH_P3_0⁰, _lh_g_LH_P3_1¹, _lh_g_LH_P3_1⁰, _lh_g_LH_P3_2¹)
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}}
//│ def map_lh_₁(f⁵, ls¹) = ls¹(f⁵)
//│ def map_lh_₂(f², ls⁰) = ls⁰(f²)
//│ def max'_lh_₁(_lh_max'_arg1⁰) = case _lh_max'_arg1⁰ of {
//│ 	LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1⁰ => case _lh_max'_LH_C_1⁰ of {
//│ 		LH_N  => _lh_max'_LH_C_0⁰
//│ 		| LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh_₁([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh_₁([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹])
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def quotRem_lh_₁(_lh_quotRem_arg1⁰, _lh_quotRem_arg2⁰) = 
//│ 	let _lh_g_LH_P2_1⁰ = (_lh_quotRem_arg1⁰ % _lh_quotRem_arg2⁰)
//│ 	in let _lh_g_LH_P2_0⁰ = div⁰(_lh_quotRem_arg1⁰, _lh_quotRem_arg2⁰)
//│ 	in (fun _lh_g_LH_P3_0⁴ -> (fun _lh_g_LH_P3_0⁵ -> (fun _lh_g_LH_P3_1⁴ -> (fun _lh_g_LH_P3_1⁵ -> (fun _lh_g_LH_P3_2⁴ -> case [LH_P3 _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴ _lh_g_LH_P3_2⁴] of {
//│ 		LH_P3 _lh_g_LH_P3_0⁶ _lh_g_LH_P3_1⁶ _lh_g_LH_P3_2⁵ => case [LH_P3 (_lh_g_LH_P3_0⁵ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0⁴)) (_lh_g_LH_P3_1⁵ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1⁴)) _lh_g_LH_P2_1⁰] of {
//│ 			LH_P3 _lh_g_LH_P3_0⁷ _lh_g_LH_P3_1⁷ _lh_g_LH_P3_2⁶ => if (_lh_g_LH_P3_2⁶ == 0) then [LH_P3 _lh_g_LH_P3_2⁵ _lh_g_LH_P3_0⁶ _lh_g_LH_P3_1⁶] else 
//│ 				let _lh_matchIdent² = quotRem_lh_₁(_lh_g_LH_P3_2⁵, _lh_g_LH_P3_2⁶)
//│ 				in _lh_matchIdent²(_lh_g_LH_P3_0⁷, _lh_g_LH_P3_0⁶, _lh_g_LH_P3_1⁷, _lh_g_LH_P3_1⁶, _lh_g_LH_P3_2⁶)
//│ 			| _  => error⁰}
//│ 		| _  => error⁰})))))
//│ def testGcd_nofib_lh_₁(_lh_testGcd_nofib_arg1⁰) = 
//│ 	let ns¹ = enumFromTo_lh_₂(5000, (5000 + _lh_testGcd_nofib_arg1⁰))
//│ 	in let ms³ = enumFromTo_lh_₁(10000, (10000 + _lh_testGcd_nofib_arg1⁰))
//│ 	in let tripls¹ = let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun⁸, ms³))
//│ 		in _lh_listcomp_fun⁸(ns¹)(f1_lh_₁)
//│ 	in let rs¹ = tripls¹(f2_lh_₁)
//│ 	in max'_lh_₁(rs¹)
//│ def test_lh_₁(_lh_test_arg1⁰) = 
//│ 	let ns⁰ = enumFromTo_lh_₂(5000, (5000 + _lh_test_arg1⁰))
//│ 	in let ms² = enumFromTo_lh_₁(10000, (10000 + _lh_test_arg1⁰))
//│ 	in let tripls⁰ = let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para¹ -> _lh_listcomp_fun_para¹(_lh_listcomp_fun⁷, ms²))
//│ 		in _lh_listcomp_fun⁷(ns⁰)(f1_lh_₁)
//│ 	in let rs⁰ = tripls⁰(f2_lh_₁)
//│ 	in max'_lh_₁(rs⁰)
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ testGcd_nofib_lh_₁(primId⁰(200))
//│ def abs_lh_₁(_lh_abs_arg1⁰) = if (_lh_abs_arg1⁰ < 0) then (0 - _lh_abs_arg1⁰) else _lh_abs_arg1⁰
//│ def enumFromTo_lh_₁(a¹, b¹) = if (a¹ <= b¹) then 
//│ 	let _lh_listcomp_fun_ls_t¹ = enumFromTo_lh_₁((a¹ + 1), b¹)
//│ 	in let _lh_listcomp_fun_ls_h¹ = a¹
//│ 	in (fun _lh_listcomp_fun_ls_h² -> (fun _lh_listcomp_fun³ -> (fun _lh_listcomp_fun_ls_t² -> (fun _lh_listcomp_fun⁴ -> 
//│ 		let t⁰ = _lh_listcomp_fun³(_lh_listcomp_fun_ls_t¹)
//│ 		in let h⁰ = 	
//│ 			let _lh_f1_LH_P2_1⁰ = _lh_listcomp_fun_ls_h¹
//│ 			in let _lh_f1_LH_P2_0⁰ = _lh_listcomp_fun_ls_h²
//│ 			in (fun _lh_dummy⁰ -> 
//│ 				let _lh_f2_LH_P3_2⁰ = gcdE_lh_₁(_lh_f1_LH_P2_0⁰, _lh_f1_LH_P2_1⁰)
//│ 				in let _lh_f2_LH_P3_1⁰ = _lh_f1_LH_P2_1⁰
//│ 				in let _lh_f2_LH_P3_0⁰ = _lh_f1_LH_P2_0⁰
//│ 				in (fun _lh_dummy¹ -> case _lh_f2_LH_P3_2⁰ of {
//│ 					LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2¹ => abs_lh_₁(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2¹))
//│ 					| _  => error⁰}))
//│ 		in (fun f³ -> 
//│ 			let t¹ = t⁰(f³)
//│ 			in let h¹ = f³(h⁰)
//│ 			in (fun f⁴ -> [LH_C f⁴(h¹) t¹(f⁴)])))))) else (fun _lh_listcomp_fun_ls_h³ -> (fun _lh_listcomp_fun⁵ -> (fun _lh_listcomp_fun_ls_t³ -> (fun _lh_listcomp_fun⁶ -> _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t³)))))
//│ def enumFromTo_lh_₂(a⁰, b⁰) = if (a⁰ <= b⁰) then 
//│ 	let _lh_listcomp_fun_ls_t⁰ = enumFromTo_lh_₂((a⁰ + 1), b⁰)
//│ 	in let _lh_listcomp_fun_ls_h⁰ = a⁰
//│ 	in (fun _lh_listcomp_fun⁰ -> (fun ms⁰ -> 
//│ 		let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para⁰ -> _lh_listcomp_fun_para⁰(_lh_listcomp_fun_ls_h⁰, _lh_listcomp_fun¹, _lh_listcomp_fun_ls_t⁰, _lh_listcomp_fun⁰))
//│ 		in _lh_listcomp_fun¹(ms⁰))) else (fun _lh_listcomp_fun² -> (fun ms¹ -> (fun f⁰ -> (fun f¹ -> [LH_N]))))
//│ def f1_lh_₁(_lh_f1_arg1⁰) = _lh_f1_arg1⁰(99)
//│ def f2_lh_₁(_lh_f2_arg1⁰) = _lh_f2_arg1⁰(99)
//│ def g_lh_₁(_lh_g_arg1⁰, _lh_g_arg2⁰) = case _lh_g_arg1⁰ of {
//│ 	LH_P3 _lh_g_LH_P3_0² _lh_g_LH_P3_1² _lh_g_LH_P3_2² => case _lh_g_arg2⁰ of {
//│ 		LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³ => if (_lh_g_LH_P3_2³ == 0) then [LH_P3 _lh_g_LH_P3_2² _lh_g_LH_P3_0² _lh_g_LH_P3_1²] else 
//│ 			let _lh_matchIdent¹ = quotRem_lh_₁(_lh_g_LH_P3_2², _lh_g_LH_P3_2³)
//│ 			in _lh_matchIdent¹(_lh_g_LH_P3_0³, _lh_g_LH_P3_0², _lh_g_LH_P3_1³, _lh_g_LH_P3_1², _lh_g_LH_P3_2³)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def gcdE_lh_₁(_lh_gcdE_arg1⁰, _lh_gcdE_arg2⁰) = case _lh_gcdE_arg1⁰ of {
//│ 	0  => [LH_P3 _lh_gcdE_arg2⁰ 0 1]
//│ 	| _  => case [LH_P3 1 0 _lh_gcdE_arg1⁰] of {
//│ 		LH_P3 _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰ _lh_g_LH_P3_2⁰ => case [LH_P3 0 1 _lh_gcdE_arg2⁰] of {
//│ 			LH_P3 _lh_g_LH_P3_0¹ _lh_g_LH_P3_1¹ _lh_g_LH_P3_2¹ => if (_lh_g_LH_P3_2¹ == 0) then [LH_P3 _lh_g_LH_P3_2⁰ _lh_g_LH_P3_0⁰ _lh_g_LH_P3_1⁰] else 
//│ 				let _lh_matchIdent⁰ = quotRem_lh_₁(_lh_g_LH_P3_2⁰, _lh_g_LH_P3_2¹)
//│ 				in _lh_matchIdent⁰(_lh_g_LH_P3_0¹, _lh_g_LH_P3_0⁰, _lh_g_LH_P3_1¹, _lh_g_LH_P3_1⁰, _lh_g_LH_P3_2¹)
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}}
//│ def map_lh_₁(f⁵, ls¹) = ls¹(f⁵)
//│ def map_lh_₂(f², ls⁰) = ls⁰(f²)
//│ def max'_lh_₁(_lh_max'_arg1⁰) = case _lh_max'_arg1⁰ of {
//│ 	LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1⁰ => case _lh_max'_LH_C_1⁰ of {
//│ 		LH_N  => _lh_max'_LH_C_0⁰
//│ 		| LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹ => if (_lh_max'_LH_C_0⁰ < _lh_max'_LH_C_0¹) then max'_lh_₁([LH_C _lh_max'_LH_C_0¹ _lh_max'_LH_C_1¹]) else max'_lh_₁([LH_C _lh_max'_LH_C_0⁰ _lh_max'_LH_C_1¹])
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def quotRem_lh_₁(_lh_quotRem_arg1⁰, _lh_quotRem_arg2⁰, _lh_g_LH_P3_0⁴, _lh_g_LH_P3_0⁵, _lh_g_LH_P3_1⁴, _lh_g_LH_P3_1⁵, _lh_g_LH_P3_2⁴) = 
//│ 	let _lh_g_LH_P2_1⁰ = (_lh_quotRem_arg1⁰ % _lh_quotRem_arg2⁰)
//│ 	in let _lh_g_LH_P2_0⁰ = div⁰(_lh_quotRem_arg1⁰, _lh_quotRem_arg2⁰)
//│ 	in case [LH_P3 _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴ _lh_g_LH_P3_2⁴] of {
//│ 		LH_P3 _lh_g_LH_P3_0⁶ _lh_g_LH_P3_1⁶ _lh_g_LH_P3_2⁵ => case [LH_P3 (_lh_g_LH_P3_0⁵ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_0⁴)) (_lh_g_LH_P3_1⁵ - (_lh_g_LH_P2_0⁰ * _lh_g_LH_P3_1⁴)) _lh_g_LH_P2_1⁰] of {
//│ 			LH_P3 _lh_g_LH_P3_0⁷ _lh_g_LH_P3_1⁷ _lh_g_LH_P3_2⁶ => if (_lh_g_LH_P3_2⁶ == 0) then [LH_P3 _lh_g_LH_P3_2⁵ _lh_g_LH_P3_0⁶ _lh_g_LH_P3_1⁶] else 
//│ 				let _lh_matchIdent² = quotRem_lh_₁(_lh_g_LH_P3_2⁵, _lh_g_LH_P3_2⁶)
//│ 				in _lh_matchIdent²(_lh_g_LH_P3_0⁷, _lh_g_LH_P3_0⁶, _lh_g_LH_P3_1⁷, _lh_g_LH_P3_1⁶, _lh_g_LH_P3_2⁶)
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ def testGcd_nofib_lh_₁(_lh_testGcd_nofib_arg1⁰) = 
//│ 	let ns¹ = enumFromTo_lh_₂(5000, (5000 + _lh_testGcd_nofib_arg1⁰))
//│ 	in let ms³ = enumFromTo_lh_₁(10000, (10000 + _lh_testGcd_nofib_arg1⁰))
//│ 	in let tripls¹ = let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun⁸, ms³))
//│ 		in _lh_listcomp_fun⁸(ns¹)(f1_lh_₁)
//│ 	in let rs¹ = tripls¹(f2_lh_₁)
//│ 	in max'_lh_₁(rs¹)
//│ def test_lh_₁(_lh_test_arg1⁰) = 
//│ 	let ns⁰ = enumFromTo_lh_₂(5000, (5000 + _lh_test_arg1⁰))
//│ 	in let ms² = enumFromTo_lh_₁(10000, (10000 + _lh_test_arg1⁰))
//│ 	in let tripls⁰ = let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para¹ -> _lh_listcomp_fun_para¹(_lh_listcomp_fun⁷, ms²))
//│ 		in _lh_listcomp_fun⁷(ns⁰)(f1_lh_₁)
//│ 	in let rs⁰ = tripls⁰(f2_lh_₁)
//│ 	in max'_lh_₁(rs⁰)
//│ <<<<<<< after floating out <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
