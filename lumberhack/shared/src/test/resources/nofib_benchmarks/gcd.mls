:NewParser
:ParseOnly


:lhInHaskell
:lhGenOCaml
abs x = if x < 0 then (0 - x) else x
f1 (x,y) = (x, y, gcdE x y)
f2 (_, _, (g, u, v)) = abs (g+u+v)
quotRem a b = (a `div` b, a `mod` b)
test d = let ns = [5000..(5000+d)] in
              let ms = [10000..(10000+d)] in
                    let tripls = map f1 [(x, y) | x <- ns, y <- ms] in
                          let rs = (map f2 tripls) in
                                max' rs
max' [x]      = x
max' (x:y:xs) = if (x<y) then max' (y:xs)  else  max' (x:xs)
g (u1, u2, u3) (v1, v2, v3) =
                   if (v3 == 0) then (u3, u1, u2)
                   else
                      case (quotRem u3 v3) of
                        (q,r) -> g (v1,v2,v3) (u1-(q*v1), u2-(q*v2), r)
gcdE 0 y = (y,0,1)
gcdE x y = g (1,0,x) (0,1,y)
testGcd_nofib x = test x
testGcd_nofib $ primId 200
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testGcd_nofib_₀^1109(primId⁰(200))
//│ def abs_₀(_lh_abs_arg1¹) = if (_lh_abs_arg1¹ < 0) then (0 - _lh_abs_arg1¹) else _lh_abs_arg1¹
//│ def enumFromTo_₀(a⁶, b³) = if (a⁶ <= b³) then [LH_C a⁶ enumFromTo_₀^1045((a⁶ + 1), b³)] else [LH_N]
//│ def enumFromTo_₁(a⁵, b²) = if (a⁵ <= b²) then [LH_C a⁵ enumFromTo_₁^998((a⁵ + 1), b²)] else [LH_N]
//│ def f1_₀(_lh_f1_arg1¹) = case _lh_f1_arg1¹ of {
//│ 	LH_P2 _lh_f1_LH_P2_0¹ _lh_f1_LH_P2_1¹ => [LH_P3 _lh_f1_LH_P2_0¹ _lh_f1_LH_P2_1¹ gcdE_₀^905(_lh_f1_LH_P2_0¹, _lh_f1_LH_P2_1¹)]
//│ 	| _  => error⁰}
//│ def f2_₀(_lh_f2_arg1¹) = case _lh_f2_arg1¹ of {
//│ 	LH_P3 _lh_f2_LH_P3_0² _lh_f2_LH_P3_1² _lh_f2_LH_P3_2² => case _lh_f2_LH_P3_2² of {
//│ 		LH_P3 _lh_f2_LH_P3_0³ _lh_f2_LH_P3_1³ _lh_f2_LH_P3_2³ => abs_₀^886(((_lh_f2_LH_P3_0³ + _lh_f2_LH_P3_1³) + _lh_f2_LH_P3_2³))
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def g_₀(_lh_g_arg1¹, _lh_g_arg2¹) = case _lh_g_arg1¹ of {
//│ 	LH_P3 _lh_g_LH_P3_0² _lh_g_LH_P3_1² _lh_g_LH_P3_2² => case _lh_g_arg2¹ of {
//│ 		LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³ => if (_lh_g_LH_P3_2³ == 0) then [LH_P3 _lh_g_LH_P3_2² _lh_g_LH_P3_0² _lh_g_LH_P3_1²] else 
//│ 			let _lh_matchIdent¹ = quotRem_₀^925(_lh_g_LH_P3_2², _lh_g_LH_P3_2³)
//│ 			in case _lh_matchIdent¹ of {
//│ 				LH_P2 _lh_g_LH_P2_0¹ _lh_g_LH_P2_1¹ => g_₀^931([LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³], [LH_P3 (_lh_g_LH_P3_0² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0³)) (_lh_g_LH_P3_1² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1³)) _lh_g_LH_P2_1¹])
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def gcdE_₀(_lh_gcdE_arg1¹, _lh_gcdE_arg2¹) = case _lh_gcdE_arg1¹ of {
//│ 	0  => [LH_P3 _lh_gcdE_arg2¹ 0 1]
//│ 	| _  => g_₀^1095([LH_P3 1 0 _lh_gcdE_arg1¹], [LH_P3 0 1 _lh_gcdE_arg2¹])}
//│ def map_₀(f¹², ls¹⁹) = case ls¹⁹ of {
//│ 	LH_C h²⁰ t²² => [LH_C f¹²(h²⁰) map_₀^1016(f¹², t²²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_₁(f¹³, ls²⁰) = case ls²⁰ of {
//│ 	LH_C h²¹ t²³ => [LH_C f¹³(h²¹) map_₁^1067(f¹³, t²³)]
//│ 	| LH_N  => [LH_N]}
//│ def max'_₀(_lh_max'_arg1¹) = case _lh_max'_arg1¹ of {
//│ 	LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1² => case _lh_max'_LH_C_1² of {
//│ 		LH_N  => _lh_max'_LH_C_0²
//│ 		| LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀^976([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀^981([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³])
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def quotRem_₀(_lh_quotRem_arg1¹, _lh_quotRem_arg2¹) = [LH_P2 div⁰(_lh_quotRem_arg1¹, _lh_quotRem_arg2¹) (_lh_quotRem_arg1¹ % _lh_quotRem_arg2¹)]
//│ def testGcd_nofib_₀(_lh_testGcd_nofib_arg1¹) = test_₀^1059(_lh_testGcd_nofib_arg1¹)
//│ def test_₀(_lh_test_arg1¹) = 
//│ 	let ns¹ = enumFromTo_₀^824(5000, (5000 + _lh_test_arg1¹))
//│ 	in let ms¹ = enumFromTo_₁^833(10000, (10000 + _lh_test_arg1¹))
//│ 	in let tripls¹ = map_₀^842(f1_₀^843, 
//│ 		let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 			LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 				let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 					LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 					| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 				in _lh_listcomp_fun³(ms¹)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²(ns¹))
//│ 	in let rs¹ = map_₁^871(f2_₀^872, tripls¹)
//│ 	in max'_₀^876(rs¹)
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec abs__d0 _lh_abs_arg1_1 =
//│ 		  (if (_lh_abs_arg1_1 < 0) then
//│ 		    (0 - _lh_abs_arg1_1)
//│ 		  else
//│ 		    _lh_abs_arg1_1)
//│ 		and enumFromTo__d0 a_6 b_3 =
//│ 		  (if (a_6 <= b_3) then
//│ 		    (`LH_C(a_6, ((enumFromTo__d0 (a_6 + 1)) b_3)))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and enumFromTo__d1 a_5 b_2 =
//│ 		  (if (a_5 <= b_2) then
//│ 		    (`LH_C(a_5, ((enumFromTo__d1 (a_5 + 1)) b_2)))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and f1__d0 _lh_f1_arg1_1 =
//│ 		  (match _lh_f1_arg1_1 with
//│ 		    | `LH_P2(_lh_f1_LH_P2_0_1, _lh_f1_LH_P2_1_1) -> 
//│ 		      (`LH_P3(_lh_f1_LH_P2_0_1, _lh_f1_LH_P2_1_1, ((gcdE__d0 _lh_f1_LH_P2_0_1) _lh_f1_LH_P2_1_1)))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and f2__d0 _lh_f2_arg1_1 =
//│ 		  (match _lh_f2_arg1_1 with
//│ 		    | `LH_P3(_lh_f2_LH_P3_0_2, _lh_f2_LH_P3_1_2, _lh_f2_LH_P3_2_2) -> 
//│ 		      (match _lh_f2_LH_P3_2_2 with
//│ 		        | `LH_P3(_lh_f2_LH_P3_0_3, _lh_f2_LH_P3_1_3, _lh_f2_LH_P3_2_3) -> 
//│ 		          (abs__d0 ((_lh_f2_LH_P3_0_3 + _lh_f2_LH_P3_1_3) + _lh_f2_LH_P3_2_3))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and g__d0 _lh_g_arg1_1 _lh_g_arg2_1 =
//│ 		  (match _lh_g_arg1_1 with
//│ 		    | `LH_P3(_lh_g_LH_P3_0_2, _lh_g_LH_P3_1_2, _lh_g_LH_P3_2_2) -> 
//│ 		      (match _lh_g_arg2_1 with
//│ 		        | `LH_P3(_lh_g_LH_P3_0_3, _lh_g_LH_P3_1_3, _lh_g_LH_P3_2_3) -> 
//│ 		          (if (_lh_g_LH_P3_2_3 = 0) then
//│ 		            (`LH_P3(_lh_g_LH_P3_2_2, _lh_g_LH_P3_0_2, _lh_g_LH_P3_1_2))
//│ 		          else
//│ 		            (let rec _lh_matchIdent_1 = ((quotRem__d0 _lh_g_LH_P3_2_2) _lh_g_LH_P3_2_3) in
//│ 		              (match _lh_matchIdent_1 with
//│ 		                | `LH_P2(_lh_g_LH_P2_0_1, _lh_g_LH_P2_1_1) -> 
//│ 		                  ((g__d0 (`LH_P3(_lh_g_LH_P3_0_3, _lh_g_LH_P3_1_3, _lh_g_LH_P3_2_3))) (`LH_P3((_lh_g_LH_P3_0_2 - (_lh_g_LH_P2_0_1 * _lh_g_LH_P3_0_3)), (_lh_g_LH_P3_1_2 - (_lh_g_LH_P2_0_1 * _lh_g_LH_P3_1_3)), _lh_g_LH_P2_1_1)))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and gcdE__d0 _lh_gcdE_arg1_1 _lh_gcdE_arg2_1 =
//│ 		  (match _lh_gcdE_arg1_1 with
//│ 		    | 0 -> 
//│ 		      (`LH_P3(_lh_gcdE_arg2_1, 0, 1))
//│ 		    | _ -> 
//│ 		      ((g__d0 (`LH_P3(1, 0, _lh_gcdE_arg1_1))) (`LH_P3(0, 1, _lh_gcdE_arg2_1))))
//│ 		and map__d0 f_1_2 ls_1_9 =
//│ 		  (match ls_1_9 with
//│ 		    | `LH_C(h_2_0, t_2_2) -> 
//│ 		      (`LH_C((f_1_2 h_2_0), ((map__d0 f_1_2) t_2_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N))
//│ 		and map__d1 f_1_3 ls_2_0 =
//│ 		  (match ls_2_0 with
//│ 		    | `LH_C(h_2_1, t_2_3) -> 
//│ 		      (`LH_C((f_1_3 h_2_1), ((map__d1 f_1_3) t_2_3)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N))
//│ 		and max'__d0 _lh_max'_arg1_1 =
//│ 		  (match _lh_max'_arg1_1 with
//│ 		    | `LH_C(_lh_max'_LH_C_0_2, _lh_max'_LH_C_1_2) -> 
//│ 		      (match _lh_max'_LH_C_1_2 with
//│ 		        | `LH_N -> 
//│ 		          _lh_max'_LH_C_0_2
//│ 		        | `LH_C(_lh_max'_LH_C_0_3, _lh_max'_LH_C_1_3) -> 
//│ 		          (if (_lh_max'_LH_C_0_2 < _lh_max'_LH_C_0_3) then
//│ 		            (max'__d0 (`LH_C(_lh_max'_LH_C_0_3, _lh_max'_LH_C_1_3)))
//│ 		          else
//│ 		            (max'__d0 (`LH_C(_lh_max'_LH_C_0_2, _lh_max'_LH_C_1_3))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and quotRem__d0 _lh_quotRem_arg1_1 _lh_quotRem_arg2_1 =
//│ 		  (`LH_P2((_lh_quotRem_arg1_1 / _lh_quotRem_arg2_1), (_lh_quotRem_arg1_1 mod _lh_quotRem_arg2_1)))
//│ 		and testGcd_nofib__d0 _lh_testGcd_nofib_arg1_1 =
//│ 		  (test__d0 _lh_testGcd_nofib_arg1_1)
//│ 		and test__d0 _lh_test_arg1_1 =
//│ 		  (let rec ns_1 = ((enumFromTo__d0 5000) (5000 + _lh_test_arg1_1)) in
//│ 		    (let rec ms_1 = ((enumFromTo__d1 10000) (10000 + _lh_test_arg1_1)) in
//│ 		      (let rec tripls_1 = ((map__d0 f1__d0) (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		        (match _lh_listcomp_fun_para_2 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		            (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		              (match _lh_listcomp_fun_para_3 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_3, _lh_listcomp_fun_ls_t_3) -> 
//│ 		                  (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_h_3)), (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3)))
//│ 		                | `LH_N -> 
//│ 		                  (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2))) in
//│ 		              (_lh_listcomp_fun_3 ms_1))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_2 ns_1))) in
//│ 		        (let rec rs_1 = ((map__d1 f2__d0) tripls_1) in
//│ 		          (max'__d0 rs_1)))));;
//│ 		(testGcd_nofib__d0 200)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³]: 849 --->
//│ 	case _lh_f1_arg1¹ of {LH_P2 _lh_f1_LH_P2_0¹ _lh_f1_LH_P2_1¹ => [LH_P3 _lh_f1_LH_P2_0¹ _lh_f1_LH_P2_1¹ gcdE_₀(_lh_f1_LH_P2_0¹, _lh_f1_LH_P2_1¹)] | _  => error⁰}: 912
//│ [LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 853 --->
//│ 	case ls¹⁹ of {LH_C h²⁰ t²² => [LH_C f¹²(h²⁰) map_₀(f¹², t²²)] | LH_N  => [LH_N]}: 1023
//│ [LH_N]: 863 --->
//│ 	case ls¹⁹ of {LH_C h²⁰ t²² => [LH_C f¹²(h²⁰) map_₀(f¹², t²²)] | LH_N  => [LH_N]}: 1023
//│ [LH_P3 _lh_f1_LH_P2_0¹ _lh_f1_LH_P2_1¹ gcdE_₀(_lh_f1_LH_P2_0¹, _lh_f1_LH_P2_1¹)]: 910 --->
//│ 	case _lh_f2_arg1¹ of {LH_P3 _lh_f2_LH_P3_0² _lh_f2_LH_P3_1² _lh_f2_LH_P3_2² => case _lh_f2_LH_P3_2² of {LH_P3 _lh_f2_LH_P3_0³ _lh_f2_LH_P3_1³ _lh_f2_LH_P3_2³ => abs_₀(((_lh_f2_LH_P3_0³ + _lh_f2_LH_P3_1³) + _lh_f2_LH_P3_2³)) | _  => error⁰} | _  => error⁰}: 900
//│ [LH_P3 _lh_g_LH_P3_2² _lh_g_LH_P3_0² _lh_g_LH_P3_1²]: 924 --->
//│ 	case _lh_f2_LH_P3_2² of {LH_P3 _lh_f2_LH_P3_0³ _lh_f2_LH_P3_1³ _lh_f2_LH_P3_2³ => abs_₀(((_lh_f2_LH_P3_0³ + _lh_f2_LH_P3_1³) + _lh_f2_LH_P3_2³)) | _  => error⁰}: 898
//│ [LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³]: 935 --->
//│ 	case _lh_g_arg1¹ of {LH_P3 _lh_g_LH_P3_0² _lh_g_LH_P3_1² _lh_g_LH_P3_2² => case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³ => if (_lh_g_LH_P3_2³ == 0) then [LH_P3 _lh_g_LH_P3_2² _lh_g_LH_P3_0² _lh_g_LH_P3_1²] else let _lh_matchIdent¹ = quotRem_₀(_lh_g_LH_P3_2², _lh_g_LH_P3_2³)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_g_LH_P2_0¹ _lh_g_LH_P2_1¹ => g_₀([LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³], [LH_P3 (_lh_g_LH_P3_0² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0³)) (_lh_g_LH_P3_1² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1³)) _lh_g_LH_P2_1¹]) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 965
//│ [LH_P3 (_lh_g_LH_P3_0² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0³)) (_lh_g_LH_P3_1² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1³)) _lh_g_LH_P2_1¹]: 956 --->
//│ 	case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³ => if (_lh_g_LH_P3_2³ == 0) then [LH_P3 _lh_g_LH_P3_2² _lh_g_LH_P3_0² _lh_g_LH_P3_1²] else let _lh_matchIdent¹ = quotRem_₀(_lh_g_LH_P3_2², _lh_g_LH_P3_2³)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_g_LH_P2_0¹ _lh_g_LH_P2_1¹ => g_₀([LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³], [LH_P3 (_lh_g_LH_P3_0² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0³)) (_lh_g_LH_P3_1² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1³)) _lh_g_LH_P2_1¹]) | _  => error⁰} | _  => error⁰}: 963
//│ [LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]: 979 --->
//│ 	case _lh_max'_arg1¹ of {LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1² => case _lh_max'_LH_C_1² of {LH_N  => _lh_max'_LH_C_0² | LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]) | _  => error⁰} | _  => error⁰}: 990
//│ [LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]: 984 --->
//│ 	case _lh_max'_arg1¹ of {LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1² => case _lh_max'_LH_C_1² of {LH_N  => _lh_max'_LH_C_0² | LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]) | _  => error⁰} | _  => error⁰}: 990
//│ [LH_C a⁵ enumFromTo_₁((a⁵ + 1), b²)]: 1007 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 857
//│ [LH_N]: 1008 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 857
//│ [LH_C f¹²(h²⁰) map_₀(f¹², t²²)]: 1021 --->
//│ 	case ls²⁰ of {LH_C h²¹ t²³ => [LH_C f¹³(h²¹) map_₁(f¹³, t²³)] | LH_N  => [LH_N]}: 1074
//│ [LH_N]: 1022 --->
//│ 	case ls²⁰ of {LH_C h²¹ t²³ => [LH_C f¹³(h²¹) map_₁(f¹³, t²³)] | LH_N  => [LH_N]}: 1074
//│ [LH_C a⁶ enumFromTo_₀((a⁶ + 1), b³)]: 1054 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(ms¹) | LH_N  => [LH_N]}: 864
//│ [LH_N]: 1055 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(ms¹) | LH_N  => [LH_N]}: 864
//│ [LH_C f¹³(h²¹) map_₁(f¹³, t²³)]: 1072 --->
//│ 	case _lh_max'_LH_C_1² of {LH_N  => _lh_max'_LH_C_0² | LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]) | _  => error⁰}: 988
//│ 	case _lh_max'_arg1¹ of {LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1² => case _lh_max'_LH_C_1² of {LH_N  => _lh_max'_LH_C_0² | LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]) | _  => error⁰} | _  => error⁰}: 990
//│ [LH_N]: 1073 --->
//│ 	case _lh_max'_LH_C_1² of {LH_N  => _lh_max'_LH_C_0² | LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]) | _  => error⁰}: 988
//│ 	case _lh_max'_arg1¹ of {LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1² => case _lh_max'_LH_C_1² of {LH_N  => _lh_max'_LH_C_0² | LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]) | _  => error⁰} | _  => error⁰}: 990
//│ [LH_P2 div⁰(_lh_quotRem_arg1¹, _lh_quotRem_arg2¹) (_lh_quotRem_arg1¹ % _lh_quotRem_arg2¹)]: 1087 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_g_LH_P2_0¹ _lh_g_LH_P2_1¹ => g_₀([LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³], [LH_P3 (_lh_g_LH_P3_0² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0³)) (_lh_g_LH_P3_1² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1³)) _lh_g_LH_P2_1¹]) | _  => error⁰}: 959
//│ [LH_P3 _lh_gcdE_arg2¹ 0 1]: 1094 --->
//│ 	case _lh_f2_LH_P3_2² of {LH_P3 _lh_f2_LH_P3_0³ _lh_f2_LH_P3_1³ _lh_f2_LH_P3_2³ => abs_₀(((_lh_f2_LH_P3_0³ + _lh_f2_LH_P3_1³) + _lh_f2_LH_P3_2³)) | _  => error⁰}: 898
//│ [LH_P3 1 0 _lh_gcdE_arg1¹]: 1099 --->
//│ 	case _lh_g_arg1¹ of {LH_P3 _lh_g_LH_P3_0² _lh_g_LH_P3_1² _lh_g_LH_P3_2² => case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³ => if (_lh_g_LH_P3_2³ == 0) then [LH_P3 _lh_g_LH_P3_2² _lh_g_LH_P3_0² _lh_g_LH_P3_1²] else let _lh_matchIdent¹ = quotRem_₀(_lh_g_LH_P3_2², _lh_g_LH_P3_2³)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_g_LH_P2_0¹ _lh_g_LH_P2_1¹ => g_₀([LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³], [LH_P3 (_lh_g_LH_P3_0² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0³)) (_lh_g_LH_P3_1² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1³)) _lh_g_LH_P2_1¹]) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 965
//│ [LH_P3 0 1 _lh_gcdE_arg2¹]: 1104 --->
//│ 	case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³ => if (_lh_g_LH_P3_2³ == 0) then [LH_P3 _lh_g_LH_P3_2² _lh_g_LH_P3_0² _lh_g_LH_P3_1²] else let _lh_matchIdent¹ = quotRem_₀(_lh_g_LH_P3_2², _lh_g_LH_P3_2³)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_g_LH_P2_0¹ _lh_g_LH_P2_1¹ => g_₀([LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³], [LH_P3 (_lh_g_LH_P3_0² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0³)) (_lh_g_LH_P3_1² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1³)) _lh_g_LH_P2_1¹]) | _  => error⁰} | _  => error⁰}: 963
//│ ------------------
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 857 --->
//│ 	[LH_C a⁵ enumFromTo_₁((a⁵ + 1), b²)]: 1007
//│ 	[LH_N]: 1008
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(ms¹) | LH_N  => [LH_N]}: 864 --->
//│ 	[LH_C a⁶ enumFromTo_₀((a⁶ + 1), b³)]: 1054
//│ 	[LH_N]: 1055
//│ case _lh_f2_LH_P3_2² of {LH_P3 _lh_f2_LH_P3_0³ _lh_f2_LH_P3_1³ _lh_f2_LH_P3_2³ => abs_₀(((_lh_f2_LH_P3_0³ + _lh_f2_LH_P3_1³) + _lh_f2_LH_P3_2³)) | _  => error⁰}: 898 --->
//│ 	[LH_P3 _lh_g_LH_P3_2² _lh_g_LH_P3_0² _lh_g_LH_P3_1²]: 924
//│ 	[LH_P3 _lh_gcdE_arg2¹ 0 1]: 1094
//│ case _lh_f2_arg1¹ of {LH_P3 _lh_f2_LH_P3_0² _lh_f2_LH_P3_1² _lh_f2_LH_P3_2² => case _lh_f2_LH_P3_2² of {LH_P3 _lh_f2_LH_P3_0³ _lh_f2_LH_P3_1³ _lh_f2_LH_P3_2³ => abs_₀(((_lh_f2_LH_P3_0³ + _lh_f2_LH_P3_1³) + _lh_f2_LH_P3_2³)) | _  => error⁰} | _  => error⁰}: 900 --->
//│ 	[LH_P3 _lh_f1_LH_P2_0¹ _lh_f1_LH_P2_1¹ gcdE_₀(_lh_f1_LH_P2_0¹, _lh_f1_LH_P2_1¹)]: 910
//│ case _lh_f1_arg1¹ of {LH_P2 _lh_f1_LH_P2_0¹ _lh_f1_LH_P2_1¹ => [LH_P3 _lh_f1_LH_P2_0¹ _lh_f1_LH_P2_1¹ gcdE_₀(_lh_f1_LH_P2_0¹, _lh_f1_LH_P2_1¹)] | _  => error⁰}: 912 --->
//│ 	[LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³]: 849
//│ case _lh_matchIdent¹ of {LH_P2 _lh_g_LH_P2_0¹ _lh_g_LH_P2_1¹ => g_₀([LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³], [LH_P3 (_lh_g_LH_P3_0² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0³)) (_lh_g_LH_P3_1² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1³)) _lh_g_LH_P2_1¹]) | _  => error⁰}: 959 --->
//│ 	[LH_P2 div⁰(_lh_quotRem_arg1¹, _lh_quotRem_arg2¹) (_lh_quotRem_arg1¹ % _lh_quotRem_arg2¹)]: 1087
//│ case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³ => if (_lh_g_LH_P3_2³ == 0) then [LH_P3 _lh_g_LH_P3_2² _lh_g_LH_P3_0² _lh_g_LH_P3_1²] else let _lh_matchIdent¹ = quotRem_₀(_lh_g_LH_P3_2², _lh_g_LH_P3_2³)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_g_LH_P2_0¹ _lh_g_LH_P2_1¹ => g_₀([LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³], [LH_P3 (_lh_g_LH_P3_0² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0³)) (_lh_g_LH_P3_1² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1³)) _lh_g_LH_P2_1¹]) | _  => error⁰} | _  => error⁰}: 963 --->
//│ 	[LH_P3 (_lh_g_LH_P3_0² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0³)) (_lh_g_LH_P3_1² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1³)) _lh_g_LH_P2_1¹]: 956
//│ 	[LH_P3 0 1 _lh_gcdE_arg2¹]: 1104
//│ case _lh_g_arg1¹ of {LH_P3 _lh_g_LH_P3_0² _lh_g_LH_P3_1² _lh_g_LH_P3_2² => case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³ => if (_lh_g_LH_P3_2³ == 0) then [LH_P3 _lh_g_LH_P3_2² _lh_g_LH_P3_0² _lh_g_LH_P3_1²] else let _lh_matchIdent¹ = quotRem_₀(_lh_g_LH_P3_2², _lh_g_LH_P3_2³)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_g_LH_P2_0¹ _lh_g_LH_P2_1¹ => g_₀([LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³], [LH_P3 (_lh_g_LH_P3_0² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0³)) (_lh_g_LH_P3_1² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1³)) _lh_g_LH_P2_1¹]) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 965 --->
//│ 	[LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³]: 935
//│ 	[LH_P3 1 0 _lh_gcdE_arg1¹]: 1099
//│ case _lh_max'_LH_C_1² of {LH_N  => _lh_max'_LH_C_0² | LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]) | _  => error⁰}: 988 --->
//│ 	[LH_C f¹³(h²¹) map_₁(f¹³, t²³)]: 1072
//│ 	[LH_N]: 1073
//│ case _lh_max'_arg1¹ of {LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1² => case _lh_max'_LH_C_1² of {LH_N  => _lh_max'_LH_C_0² | LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]) | _  => error⁰} | _  => error⁰}: 990 --->
//│ 	[LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]: 979
//│ 	[LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]: 984
//│ 	[LH_C f¹³(h²¹) map_₁(f¹³, t²³)]: 1072
//│ 	[LH_N]: 1073
//│ case ls¹⁹ of {LH_C h²⁰ t²² => [LH_C f¹²(h²⁰) map_₀(f¹², t²²)] | LH_N  => [LH_N]}: 1023 --->
//│ 	[LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 853
//│ 	[LH_N]: 863
//│ case ls²⁰ of {LH_C h²¹ t²³ => [LH_C f¹³(h²¹) map_₁(f¹³, t²³)] | LH_N  => [LH_N]}: 1074 --->
//│ 	[LH_C f¹²(h²⁰) map_₀(f¹², t²²)]: 1021
//│ 	[LH_N]: 1022
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³]: 849 --->
//│ 	case _lh_f1_arg1¹ of {LH_P2 _lh_f1_LH_P2_0¹ _lh_f1_LH_P2_1¹ => [LH_P3 _lh_f1_LH_P2_0¹ _lh_f1_LH_P2_1¹ gcdE_₀(_lh_f1_LH_P2_0¹, _lh_f1_LH_P2_1¹)] | _  => error⁰}: 912
//│ [LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 853 --->
//│ 	case ls¹⁹ of {LH_C h²⁰ t²² => [LH_C f¹²(h²⁰) map_₀(f¹², t²²)] | LH_N  => [LH_N]}: 1023
//│ [LH_N]: 863 --->
//│ 	case ls¹⁹ of {LH_C h²⁰ t²² => [LH_C f¹²(h²⁰) map_₀(f¹², t²²)] | LH_N  => [LH_N]}: 1023
//│ [LH_P3 _lh_f1_LH_P2_0¹ _lh_f1_LH_P2_1¹ gcdE_₀(_lh_f1_LH_P2_0¹, _lh_f1_LH_P2_1¹)]: 910 --->
//│ 	case _lh_f2_arg1¹ of {LH_P3 _lh_f2_LH_P3_0² _lh_f2_LH_P3_1² _lh_f2_LH_P3_2² => case _lh_f2_LH_P3_2² of {LH_P3 _lh_f2_LH_P3_0³ _lh_f2_LH_P3_1³ _lh_f2_LH_P3_2³ => abs_₀(((_lh_f2_LH_P3_0³ + _lh_f2_LH_P3_1³) + _lh_f2_LH_P3_2³)) | _  => error⁰} | _  => error⁰}: 900
//│ [LH_C a⁵ enumFromTo_₁((a⁵ + 1), b²)]: 1007 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 857
//│ [LH_N]: 1008 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 857
//│ [LH_C f¹²(h²⁰) map_₀(f¹², t²²)]: 1021 --->
//│ 	case ls²⁰ of {LH_C h²¹ t²³ => [LH_C f¹³(h²¹) map_₁(f¹³, t²³)] | LH_N  => [LH_N]}: 1074
//│ [LH_N]: 1022 --->
//│ 	case ls²⁰ of {LH_C h²¹ t²³ => [LH_C f¹³(h²¹) map_₁(f¹³, t²³)] | LH_N  => [LH_N]}: 1074
//│ [LH_C a⁶ enumFromTo_₀((a⁶ + 1), b³)]: 1054 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(ms¹) | LH_N  => [LH_N]}: 864
//│ [LH_N]: 1055 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(ms¹) | LH_N  => [LH_N]}: 864
//│ [LH_P2 div⁰(_lh_quotRem_arg1¹, _lh_quotRem_arg2¹) (_lh_quotRem_arg1¹ % _lh_quotRem_arg2¹)]: 1087 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_g_LH_P2_0¹ _lh_g_LH_P2_1¹ => g_₀([LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³], [LH_P3 (_lh_g_LH_P3_0² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0³)) (_lh_g_LH_P3_1² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1³)) _lh_g_LH_P2_1¹]) | _  => error⁰}: 959
//│ ------------------
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 857 --->
//│ 	[LH_C a⁵ enumFromTo_₁((a⁵ + 1), b²)]: 1007
//│ 	[LH_N]: 1008
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(ms¹) | LH_N  => [LH_N]}: 864 --->
//│ 	[LH_C a⁶ enumFromTo_₀((a⁶ + 1), b³)]: 1054
//│ 	[LH_N]: 1055
//│ case _lh_f2_arg1¹ of {LH_P3 _lh_f2_LH_P3_0² _lh_f2_LH_P3_1² _lh_f2_LH_P3_2² => case _lh_f2_LH_P3_2² of {LH_P3 _lh_f2_LH_P3_0³ _lh_f2_LH_P3_1³ _lh_f2_LH_P3_2³ => abs_₀(((_lh_f2_LH_P3_0³ + _lh_f2_LH_P3_1³) + _lh_f2_LH_P3_2³)) | _  => error⁰} | _  => error⁰}: 900 --->
//│ 	[LH_P3 _lh_f1_LH_P2_0¹ _lh_f1_LH_P2_1¹ gcdE_₀(_lh_f1_LH_P2_0¹, _lh_f1_LH_P2_1¹)]: 910
//│ case _lh_f1_arg1¹ of {LH_P2 _lh_f1_LH_P2_0¹ _lh_f1_LH_P2_1¹ => [LH_P3 _lh_f1_LH_P2_0¹ _lh_f1_LH_P2_1¹ gcdE_₀(_lh_f1_LH_P2_0¹, _lh_f1_LH_P2_1¹)] | _  => error⁰}: 912 --->
//│ 	[LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³]: 849
//│ case _lh_matchIdent¹ of {LH_P2 _lh_g_LH_P2_0¹ _lh_g_LH_P2_1¹ => g_₀([LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³], [LH_P3 (_lh_g_LH_P3_0² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0³)) (_lh_g_LH_P3_1² - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1³)) _lh_g_LH_P2_1¹]) | _  => error⁰}: 959 --->
//│ 	[LH_P2 div⁰(_lh_quotRem_arg1¹, _lh_quotRem_arg2¹) (_lh_quotRem_arg1¹ % _lh_quotRem_arg2¹)]: 1087
//│ case ls¹⁹ of {LH_C h²⁰ t²² => [LH_C f¹²(h²⁰) map_₀(f¹², t²²)] | LH_N  => [LH_N]}: 1023 --->
//│ 	[LH_C [LH_P2 _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_h³] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 853
//│ 	[LH_N]: 863
//│ case ls²⁰ of {LH_C h²¹ t²³ => [LH_C f¹³(h²¹) map_₁(f¹³, t²³)] | LH_N  => [LH_N]}: 1074 --->
//│ 	[LH_C f¹²(h²⁰) map_₀(f¹², t²²)]: 1021
//│ 	[LH_N]: 1022
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testGcd_nofib_₀(primId⁰(200))
//│ def abs_₀(_lh_abs_arg1²) = if (_lh_abs_arg1² < 0) then (0 - _lh_abs_arg1²) else _lh_abs_arg1²
//│ def enumFromTo_₀(a⁸, b⁵) = if (a⁸ <= b⁵) then 
//│ 	let _lh_listcomp_fun_ls_t⁷ = enumFromTo_₀((a⁸ + 1), b⁵)
//│ 	in let _lh_listcomp_fun_ls_h⁷ = a⁸
//│ 	in (fun _lh_listcomp_fun⁹ -> (fun ms³ -> 
//│ 		let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para⁵ -> _lh_listcomp_fun_para⁵(_lh_listcomp_fun_ls_h⁷, _lh_listcomp_fun¹⁰, _lh_listcomp_fun_ls_t⁷, _lh_listcomp_fun⁹))
//│ 		in _lh_listcomp_fun¹⁰(ms³))) else (fun _lh_listcomp_fun¹¹ -> (fun ms⁴ -> (fun f¹⁷ -> (fun f¹⁸ -> [LH_N]))))
//│ def enumFromTo_₁(a⁷, b⁴) = if (a⁷ <= b⁴) then 
//│ 	let _lh_listcomp_fun_ls_t⁴ = enumFromTo_₁((a⁷ + 1), b⁴)
//│ 	in let _lh_listcomp_fun_ls_h⁴ = a⁷
//│ 	in (fun _lh_listcomp_fun_ls_h⁵ -> (fun _lh_listcomp_fun⁴ -> (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁵ -> 
//│ 		let t²⁴ = _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)
//│ 		in let h²² = 	
//│ 			let _lh_f1_LH_P2_1² = _lh_listcomp_fun_ls_h⁴
//│ 			in let _lh_f1_LH_P2_0² = _lh_listcomp_fun_ls_h⁵
//│ 			in (fun _lh_dummy¹ -> 
//│ 				let _lh_f2_LH_P3_2⁴ = gcdE_₀(_lh_f1_LH_P2_0², _lh_f1_LH_P2_1²)
//│ 				in (fun _lh_dummy⁰ -> case _lh_f2_LH_P3_2⁴ of {
//│ 					LH_P3 _lh_f2_LH_P3_0³ _lh_f2_LH_P3_1³ _lh_f2_LH_P3_2³ => abs_₀(((_lh_f2_LH_P3_0³ + _lh_f2_LH_P3_1³) + _lh_f2_LH_P3_2³))
//│ 					| _  => error⁰}))
//│ 		in (fun f¹⁵ -> 
//│ 			let t²⁵ = map_₀(f¹⁵, t²⁴)
//│ 			in let h²³ = f¹⁵(h²²)
//│ 			in (fun f¹⁶ -> [LH_C f¹⁶(h²³) map_₁(f¹⁶, t²⁵)])))))) else (fun _lh_listcomp_fun_ls_h⁶ -> (fun _lh_listcomp_fun⁶ -> (fun _lh_listcomp_fun_ls_t⁶ -> (fun _lh_listcomp_fun⁷ -> _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁶)))))
//│ def f1_₀(_lh_f1_arg1²) = _lh_f1_arg1²(99)
//│ def f2_₀(_lh_f2_arg1²) = _lh_f2_arg1²(99)
//│ def g_₀(_lh_g_arg1², _lh_g_arg2²) = case _lh_g_arg1² of {
//│ 	LH_P3 _lh_g_LH_P3_0² _lh_g_LH_P3_1² _lh_g_LH_P3_2² => case _lh_g_arg2² of {
//│ 		LH_P3 _lh_g_LH_P3_0³ _lh_g_LH_P3_1³ _lh_g_LH_P3_2³ => if (_lh_g_LH_P3_2³ == 0) then [LH_P3 _lh_g_LH_P3_2² _lh_g_LH_P3_0² _lh_g_LH_P3_1²] else 
//│ 			let _lh_matchIdent² = quotRem_₀(_lh_g_LH_P3_2², _lh_g_LH_P3_2³)
//│ 			in _lh_matchIdent²(_lh_g_LH_P3_0², _lh_g_LH_P3_0³, _lh_g_LH_P3_1², _lh_g_LH_P3_1³, _lh_g_LH_P3_2³)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def gcdE_₀(_lh_gcdE_arg1², _lh_gcdE_arg2²) = case _lh_gcdE_arg1² of {
//│ 	0  => [LH_P3 _lh_gcdE_arg2² 0 1]
//│ 	| _  => g_₀([LH_P3 1 0 _lh_gcdE_arg1²], [LH_P3 0 1 _lh_gcdE_arg2²])}
//│ def map_₀(f¹⁴, ls²¹) = ls²¹(f¹⁴)
//│ def map_₁(f¹⁹, ls²²) = ls²²(f¹⁹)
//│ def max'_₀(_lh_max'_arg1²) = case _lh_max'_arg1² of {
//│ 	LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1² => case _lh_max'_LH_C_1² of {
//│ 		LH_N  => _lh_max'_LH_C_0²
//│ 		| LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³])
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def quotRem_₀(_lh_quotRem_arg1², _lh_quotRem_arg2²) = 
//│ 	let _lh_g_LH_P2_1² = (_lh_quotRem_arg1² % _lh_quotRem_arg2²)
//│ 	in let _lh_g_LH_P2_0² = div⁰(_lh_quotRem_arg1², _lh_quotRem_arg2²)
//│ 	in (fun _lh_g_LH_P3_0⁴ -> (fun _lh_g_LH_P3_0⁵ -> (fun _lh_g_LH_P3_1⁴ -> (fun _lh_g_LH_P3_1⁵ -> (fun _lh_g_LH_P3_2⁴ -> g_₀([LH_P3 _lh_g_LH_P3_0⁵ _lh_g_LH_P3_1⁵ _lh_g_LH_P3_2⁴], [LH_P3 (_lh_g_LH_P3_0⁴ - (_lh_g_LH_P2_0² * _lh_g_LH_P3_0⁵)) (_lh_g_LH_P3_1⁴ - (_lh_g_LH_P2_0² * _lh_g_LH_P3_1⁵)) _lh_g_LH_P2_1²]))))))
//│ def testGcd_nofib_₀(_lh_testGcd_nofib_arg1²) = test_₀(_lh_testGcd_nofib_arg1²)
//│ def test_₀(_lh_test_arg1²) = 
//│ 	let ns² = enumFromTo_₀(5000, (5000 + _lh_test_arg1²))
//│ 	in let ms² = enumFromTo_₁(10000, (10000 + _lh_test_arg1²))
//│ 	in let tripls² = map_₀(f1_₀, 
//│ 		let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁴ -> _lh_listcomp_fun_para⁴(_lh_listcomp_fun⁸, ms²))
//│ 		in _lh_listcomp_fun⁸(ns²))
//│ 	in let rs² = map_₁(f2_₀, tripls²)
//│ 	in max'_₀(rs²)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ ~~~~~~~~~~~~~~~~~~~~~~~ NEXT ITERATION ~~~~~~~~~~~~~~~~~~~~~~~
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testGcd_nofib_₀^1] (hopeless to continue)
//│ 	[testGcd_nofib_₀^1 · test_₀^277] (using original def)
//│ 		[testGcd_nofib_₀^1 · test_₀^277 · enumFromTo_₀^122] (using original def)
//│ 			[testGcd_nofib_₀^1 · test_₀^277 · enumFromTo_₀^122 · enumFromTo_₀^172] ---> [testGcd_nofib_₀^1 · test_₀^277 · enumFromTo_₀^122] (using original def)
//│ 		[testGcd_nofib_₀^1 · test_₀^277 · enumFromTo_₁^131] (using original def)
//│ 			[testGcd_nofib_₀^1 · test_₀^277 · enumFromTo_₁^131 · abs_₀^65] (using original def)
//│ 			[testGcd_nofib_₀^1 · test_₀^277 · enumFromTo_₁^131 · enumFromTo_₁^44] ---> [testGcd_nofib_₀^1 · test_₀^277 · enumFromTo_₁^131] (using original def)
//│ 			[testGcd_nofib_₀^1 · test_₀^277 · enumFromTo_₁^131 · gcdE_₀^59] (using original def)
//│ 				[testGcd_nofib_₀^1 · test_₀^277 · enumFromTo_₁^131 · gcdE_₀^59 · g_₀^217] (using original def)
//│ 					[testGcd_nofib_₀^1 · test_₀^277 · enumFromTo_₁^131 · gcdE_₀^59 · g_₀^217 · quotRem_₀^292] (using original def)
//│ 						[testGcd_nofib_₀^1 · test_₀^277 · enumFromTo_₁^131 · gcdE_₀^59 · g_₀^217 · quotRem_₀^292 · g_₀^241] ---> [testGcd_nofib_₀^1 · test_₀^277 · enumFromTo_₁^131 · gcdE_₀^59 · g_₀^217] (using original def)
//│ 			[testGcd_nofib_₀^1 · test_₀^277 · enumFromTo_₁^131 · map_₀^83] (using original def)
//│ 			[testGcd_nofib_₀^1 · test_₀^277 · enumFromTo_₁^131 · map_₁^94] (using original def)
//│ 		[testGcd_nofib_₀^1 · test_₀^277 · f1_₀^141] (using original def)
//│ 		[testGcd_nofib_₀^1 · test_₀^277 · f2_₀^155] (using original def)
//│ 		[testGcd_nofib_₀^1 · test_₀^277 · map_₀^140] (using original def)
//│ 		[testGcd_nofib_₀^1 · test_₀^277 · map_₁^154] (using original def)
//│ 		[testGcd_nofib_₀^1 · test_₀^277 · max'_₀^159] (using original def)
//│ 			[testGcd_nofib_₀^1 · test_₀^277 · max'_₀^159 · max'_₀^23] ---> [testGcd_nofib_₀^1 · test_₀^277 · max'_₀^159] (using original def)
//│ 			[testGcd_nofib_₀^1 · test_₀^277 · max'_₀^159 · max'_₀^28] ---> [testGcd_nofib_₀^1 · test_₀^277 · max'_₀^159] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testGcd_nofib_₀_₀(primId⁰(200))
//│ def testGcd_nofib_₀_₀(_lh_testGcd_nofib_arg1¹) = 
//│ 	test_₀_₀(_lh_testGcd_nofib_arg1¹)
//│ 	where
//│ 	def test_₀_₀(_lh_test_arg1¹) = 
//│ 		let ns¹ = enumFromTo_₀_₀(5000, (5000 + _lh_test_arg1¹))
//│ 		in let ms³ = enumFromTo_₁_₀(10000, (10000 + _lh_test_arg1¹))
//│ 		in let tripls¹ = map_₀_₁(f1_₀_₀, 
//│ 			let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun⁸, ms³))
//│ 			in _lh_listcomp_fun⁸(ns¹))
//│ 		in let rs¹ = map_₁_₁(f2_₀_₀, tripls¹)
//│ 		in max'_₀_₀(rs¹)
//│ 		where
//│ 		def enumFromTo_₀_₀(a³, b³) = 
//│ 			if (a³ <= b³) then 
//│ 				let _lh_listcomp_fun_ls_t⁷ = enumFromTo_₀_₀((a³ + 1), b³)
//│ 				in let _lh_listcomp_fun_ls_h⁷ = a³
//│ 				in (fun _lh_listcomp_fun¹³ -> (fun ms⁴ -> 
//│ 					let _lh_listcomp_fun¹⁴ = (fun _lh_listcomp_fun_para³ -> _lh_listcomp_fun_para³(_lh_listcomp_fun_ls_h⁷, _lh_listcomp_fun¹⁴, _lh_listcomp_fun_ls_t⁷, _lh_listcomp_fun¹³))
//│ 					in _lh_listcomp_fun¹⁴(ms⁴))) else (fun _lh_listcomp_fun¹⁵ -> (fun ms⁵ -> (fun f¹² -> (fun f¹³ -> [LH_N]))))
//│ 		def enumFromTo_₁_₀(a², b²) = 
//│ 			if (a² <= b²) then 
//│ 				let _lh_listcomp_fun_ls_t⁴ = enumFromTo_₁_₀((a² + 1), b²)
//│ 				in let _lh_listcomp_fun_ls_h⁴ = a²
//│ 				in (fun _lh_listcomp_fun_ls_h⁵ -> (fun _lh_listcomp_fun⁹ -> (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun¹⁰ -> 
//│ 					let t² = _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁴)
//│ 					in let h² = 	
//│ 						let _lh_f1_LH_P2_1¹ = _lh_listcomp_fun_ls_h⁴
//│ 						in let _lh_f1_LH_P2_0¹ = _lh_listcomp_fun_ls_h⁵
//│ 						in (fun _lh_dummy² -> 
//│ 							let _lh_f2_LH_P3_2² = gcdE_₀_₀(_lh_f1_LH_P2_0¹, _lh_f1_LH_P2_1¹)
//│ 							in (fun _lh_dummy³ -> case _lh_f2_LH_P3_2² of {
//│ 								LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2³ => abs_₀_₀(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2³))
//│ 								| _  => error⁰}))
//│ 					in (fun f⁹ -> 
//│ 						let t³ = map_₀_₀(f⁹, t²)
//│ 						in let h³ = f⁹(h²)
//│ 						in (fun f¹⁰ -> [LH_C f¹⁰(h³) map_₁_₀(f¹⁰, t³)])))))) else (fun _lh_listcomp_fun_ls_h⁶ -> (fun _lh_listcomp_fun¹¹ -> (fun _lh_listcomp_fun_ls_t⁶ -> (fun _lh_listcomp_fun¹² -> _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁶)))))
//│ 			where
//│ 			def abs_₀_₀(_lh_abs_arg1¹) = 
//│ 				if (_lh_abs_arg1¹ < 0) then (0 - _lh_abs_arg1¹) else _lh_abs_arg1¹
//│ 			def gcdE_₀_₀(_lh_gcdE_arg1¹, _lh_gcdE_arg2¹) = 
//│ 				case _lh_gcdE_arg1¹ of {
//│ 					0  => [LH_P3 _lh_gcdE_arg2¹ 0 1]
//│ 					| _  => g_₀_₀([LH_P3 1 0 _lh_gcdE_arg1¹], [LH_P3 0 1 _lh_gcdE_arg2¹])}
//│ 				where
//│ 				def g_₀_₀(_lh_g_arg1¹, _lh_g_arg2¹) = 
//│ 					case _lh_g_arg1¹ of {
//│ 						LH_P3 _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴ _lh_g_LH_P3_2³ => case _lh_g_arg2¹ of {
//│ 							LH_P3 _lh_g_LH_P3_0⁵ _lh_g_LH_P3_1⁵ _lh_g_LH_P3_2⁴ => if (_lh_g_LH_P3_2⁴ == 0) then [LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴] else 
//│ 								let _lh_matchIdent¹ = quotRem_₀_₀(_lh_g_LH_P3_2³, _lh_g_LH_P3_2⁴)
//│ 								in _lh_matchIdent¹(_lh_g_LH_P3_0⁴, _lh_g_LH_P3_0⁵, _lh_g_LH_P3_1⁴, _lh_g_LH_P3_1⁵, _lh_g_LH_P3_2⁴)
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					where
//│ 					def quotRem_₀_₀(_lh_quotRem_arg1¹, _lh_quotRem_arg2¹) = 
//│ 						let _lh_g_LH_P2_1¹ = (_lh_quotRem_arg1¹ % _lh_quotRem_arg2¹)
//│ 						in let _lh_g_LH_P2_0¹ = div⁰(_lh_quotRem_arg1¹, _lh_quotRem_arg2¹)
//│ 						in (fun _lh_g_LH_P3_0⁶ -> (fun _lh_g_LH_P3_0⁷ -> (fun _lh_g_LH_P3_1⁶ -> (fun _lh_g_LH_P3_1⁷ -> (fun _lh_g_LH_P3_2⁵ -> g_₀_₀([LH_P3 _lh_g_LH_P3_0⁷ _lh_g_LH_P3_1⁷ _lh_g_LH_P3_2⁵], [LH_P3 (_lh_g_LH_P3_0⁶ - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0⁷)) (_lh_g_LH_P3_1⁶ - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1⁷)) _lh_g_LH_P2_1¹]))))))
//│ 			def map_₀_₀(f⁸, ls⁴) = 
//│ 				ls⁴(f⁸)
//│ 			def map_₁_₀(f⁷, ls³) = 
//│ 				ls³(f⁷)
//│ 		def f1_₀_₀(_lh_f1_arg1¹) = 
//│ 			_lh_f1_arg1¹(99)
//│ 		def f2_₀_₀(_lh_f2_arg1¹) = 
//│ 			_lh_f2_arg1¹(99)
//│ 		def map_₀_₁(f¹¹, ls⁵) = 
//│ 			ls⁵(f¹¹)
//│ 		def map_₁_₁(f⁶, ls²) = 
//│ 			ls²(f⁶)
//│ 		def max'_₀_₀(_lh_max'_arg1¹) = 
//│ 			case _lh_max'_arg1¹ of {
//│ 				LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1² => case _lh_max'_LH_C_1² of {
//│ 					LH_N  => _lh_max'_LH_C_0²
//│ 					| LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³])
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴]: 344 --->
//│ 	case _lh_f2_LH_P3_2² of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2³ => abs_₀_₀(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2³)) | _  => error⁰}: 581
//│ [LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]: 384 --->
//│ 	case _lh_max'_arg1¹ of {LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1² => case _lh_max'_LH_C_1² of {LH_N  => _lh_max'_LH_C_0² | LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]) | _  => error⁰} | _  => error⁰}: 395
//│ [LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]: 389 --->
//│ 	case _lh_max'_arg1¹ of {LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1² => case _lh_max'_LH_C_1² of {LH_N  => _lh_max'_LH_C_0² | LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]) | _  => error⁰} | _  => error⁰}: 395
//│ [LH_P3 _lh_gcdE_arg2¹ 0 1]: 405 --->
//│ 	case _lh_f2_LH_P3_2² of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2³ => abs_₀_₀(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2³)) | _  => error⁰}: 581
//│ [LH_P3 1 0 _lh_gcdE_arg1¹]: 410 --->
//│ 	case _lh_g_arg1¹ of {LH_P3 _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴ _lh_g_LH_P3_2³ => case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0⁵ _lh_g_LH_P3_1⁵ _lh_g_LH_P3_2⁴ => if (_lh_g_LH_P3_2⁴ == 0) then [LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴] else let _lh_matchIdent¹ = quotRem_₀_₀(_lh_g_LH_P3_2³, _lh_g_LH_P3_2⁴)
//│ in _lh_matchIdent¹(_lh_g_LH_P3_0⁴, _lh_g_LH_P3_0⁵, _lh_g_LH_P3_1⁴, _lh_g_LH_P3_1⁵, _lh_g_LH_P3_2⁴) | _  => error⁰} | _  => error⁰}: 366
//│ [LH_P3 0 1 _lh_gcdE_arg2¹]: 415 --->
//│ 	case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0⁵ _lh_g_LH_P3_1⁵ _lh_g_LH_P3_2⁴ => if (_lh_g_LH_P3_2⁴ == 0) then [LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴] else let _lh_matchIdent¹ = quotRem_₀_₀(_lh_g_LH_P3_2³, _lh_g_LH_P3_2⁴)
//│ in _lh_matchIdent¹(_lh_g_LH_P3_0⁴, _lh_g_LH_P3_0⁵, _lh_g_LH_P3_1⁴, _lh_g_LH_P3_1⁵, _lh_g_LH_P3_2⁴) | _  => error⁰}: 364
//│ [LH_P3 _lh_g_LH_P3_0⁷ _lh_g_LH_P3_1⁷ _lh_g_LH_P3_2⁵]: 434 --->
//│ 	case _lh_g_arg1¹ of {LH_P3 _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴ _lh_g_LH_P3_2³ => case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0⁵ _lh_g_LH_P3_1⁵ _lh_g_LH_P3_2⁴ => if (_lh_g_LH_P3_2⁴ == 0) then [LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴] else let _lh_matchIdent¹ = quotRem_₀_₀(_lh_g_LH_P3_2³, _lh_g_LH_P3_2⁴)
//│ in _lh_matchIdent¹(_lh_g_LH_P3_0⁴, _lh_g_LH_P3_0⁵, _lh_g_LH_P3_1⁴, _lh_g_LH_P3_1⁵, _lh_g_LH_P3_2⁴) | _  => error⁰} | _  => error⁰}: 366
//│ [LH_P3 (_lh_g_LH_P3_0⁶ - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0⁷)) (_lh_g_LH_P3_1⁶ - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1⁷)) _lh_g_LH_P2_1¹]: 455 --->
//│ 	case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0⁵ _lh_g_LH_P3_1⁵ _lh_g_LH_P3_2⁴ => if (_lh_g_LH_P3_2⁴ == 0) then [LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴] else let _lh_matchIdent¹ = quotRem_₀_₀(_lh_g_LH_P3_2³, _lh_g_LH_P3_2⁴)
//│ in _lh_matchIdent¹(_lh_g_LH_P3_0⁴, _lh_g_LH_P3_0⁵, _lh_g_LH_P3_1⁴, _lh_g_LH_P3_1⁵, _lh_g_LH_P3_2⁴) | _  => error⁰}: 364
//│ [LH_C f¹⁰(h³) map_₁_₀(f¹⁰, t³)]: 603 --->
//│ 	DeadCodeCons
//│ 	case _lh_max'_LH_C_1² of {LH_N  => _lh_max'_LH_C_0² | LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]) | _  => error⁰}: 393
//│ 	case _lh_max'_arg1¹ of {LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1² => case _lh_max'_LH_C_1² of {LH_N  => _lh_max'_LH_C_0² | LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]) | _  => error⁰} | _  => error⁰}: 395
//│ [LH_N]: 664 --->
//│ 	DeadCodeCons
//│ 	case _lh_max'_LH_C_1² of {LH_N  => _lh_max'_LH_C_0² | LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]) | _  => error⁰}: 393
//│ 	case _lh_max'_arg1¹ of {LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1² => case _lh_max'_LH_C_1² of {LH_N  => _lh_max'_LH_C_0² | LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]) | _  => error⁰} | _  => error⁰}: 395
//│ ------------------
//│ case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0⁵ _lh_g_LH_P3_1⁵ _lh_g_LH_P3_2⁴ => if (_lh_g_LH_P3_2⁴ == 0) then [LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴] else let _lh_matchIdent¹ = quotRem_₀_₀(_lh_g_LH_P3_2³, _lh_g_LH_P3_2⁴)
//│ in _lh_matchIdent¹(_lh_g_LH_P3_0⁴, _lh_g_LH_P3_0⁵, _lh_g_LH_P3_1⁴, _lh_g_LH_P3_1⁵, _lh_g_LH_P3_2⁴) | _  => error⁰}: 364 --->
//│ 	[LH_P3 0 1 _lh_gcdE_arg2¹]: 415
//│ 	[LH_P3 (_lh_g_LH_P3_0⁶ - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0⁷)) (_lh_g_LH_P3_1⁶ - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1⁷)) _lh_g_LH_P2_1¹]: 455
//│ case _lh_g_arg1¹ of {LH_P3 _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴ _lh_g_LH_P3_2³ => case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0⁵ _lh_g_LH_P3_1⁵ _lh_g_LH_P3_2⁴ => if (_lh_g_LH_P3_2⁴ == 0) then [LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴] else let _lh_matchIdent¹ = quotRem_₀_₀(_lh_g_LH_P3_2³, _lh_g_LH_P3_2⁴)
//│ in _lh_matchIdent¹(_lh_g_LH_P3_0⁴, _lh_g_LH_P3_0⁵, _lh_g_LH_P3_1⁴, _lh_g_LH_P3_1⁵, _lh_g_LH_P3_2⁴) | _  => error⁰} | _  => error⁰}: 366 --->
//│ 	[LH_P3 1 0 _lh_gcdE_arg1¹]: 410
//│ 	[LH_P3 _lh_g_LH_P3_0⁷ _lh_g_LH_P3_1⁷ _lh_g_LH_P3_2⁵]: 434
//│ case _lh_max'_LH_C_1² of {LH_N  => _lh_max'_LH_C_0² | LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]) | _  => error⁰}: 393 --->
//│ 	DeadCodeProd
//│ 	[LH_C f¹⁰(h³) map_₁_₀(f¹⁰, t³)]: 603
//│ 	[LH_N]: 664
//│ case _lh_max'_arg1¹ of {LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1² => case _lh_max'_LH_C_1² of {LH_N  => _lh_max'_LH_C_0² | LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]) | _  => error⁰} | _  => error⁰}: 395 --->
//│ 	DeadCodeProd
//│ 	[LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]: 384
//│ 	[LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³]: 389
//│ 	[LH_C f¹⁰(h³) map_₁_₀(f¹⁰, t³)]: 603
//│ 	[LH_N]: 664
//│ case _lh_f2_LH_P3_2² of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2³ => abs_₀_₀(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2³)) | _  => error⁰}: 581 --->
//│ 	[LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴]: 344
//│ 	[LH_P3 _lh_gcdE_arg2¹ 0 1]: 405
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴]: 344 --->
//│ 	case _lh_f2_LH_P3_2² of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2³ => abs_₀_₀(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2³)) | _  => error⁰}: 581
//│ [LH_P3 _lh_gcdE_arg2¹ 0 1]: 405 --->
//│ 	case _lh_f2_LH_P3_2² of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2³ => abs_₀_₀(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2³)) | _  => error⁰}: 581
//│ [LH_P3 1 0 _lh_gcdE_arg1¹]: 410 --->
//│ 	case _lh_g_arg1¹ of {LH_P3 _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴ _lh_g_LH_P3_2³ => case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0⁵ _lh_g_LH_P3_1⁵ _lh_g_LH_P3_2⁴ => if (_lh_g_LH_P3_2⁴ == 0) then [LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴] else let _lh_matchIdent¹ = quotRem_₀_₀(_lh_g_LH_P3_2³, _lh_g_LH_P3_2⁴)
//│ in _lh_matchIdent¹(_lh_g_LH_P3_0⁴, _lh_g_LH_P3_0⁵, _lh_g_LH_P3_1⁴, _lh_g_LH_P3_1⁵, _lh_g_LH_P3_2⁴) | _  => error⁰} | _  => error⁰}: 366
//│ [LH_P3 0 1 _lh_gcdE_arg2¹]: 415 --->
//│ 	case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0⁵ _lh_g_LH_P3_1⁵ _lh_g_LH_P3_2⁴ => if (_lh_g_LH_P3_2⁴ == 0) then [LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴] else let _lh_matchIdent¹ = quotRem_₀_₀(_lh_g_LH_P3_2³, _lh_g_LH_P3_2⁴)
//│ in _lh_matchIdent¹(_lh_g_LH_P3_0⁴, _lh_g_LH_P3_0⁵, _lh_g_LH_P3_1⁴, _lh_g_LH_P3_1⁵, _lh_g_LH_P3_2⁴) | _  => error⁰}: 364
//│ [LH_P3 _lh_g_LH_P3_0⁷ _lh_g_LH_P3_1⁷ _lh_g_LH_P3_2⁵]: 434 --->
//│ 	case _lh_g_arg1¹ of {LH_P3 _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴ _lh_g_LH_P3_2³ => case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0⁵ _lh_g_LH_P3_1⁵ _lh_g_LH_P3_2⁴ => if (_lh_g_LH_P3_2⁴ == 0) then [LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴] else let _lh_matchIdent¹ = quotRem_₀_₀(_lh_g_LH_P3_2³, _lh_g_LH_P3_2⁴)
//│ in _lh_matchIdent¹(_lh_g_LH_P3_0⁴, _lh_g_LH_P3_0⁵, _lh_g_LH_P3_1⁴, _lh_g_LH_P3_1⁵, _lh_g_LH_P3_2⁴) | _  => error⁰} | _  => error⁰}: 366
//│ [LH_P3 (_lh_g_LH_P3_0⁶ - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0⁷)) (_lh_g_LH_P3_1⁶ - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1⁷)) _lh_g_LH_P2_1¹]: 455 --->
//│ 	case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0⁵ _lh_g_LH_P3_1⁵ _lh_g_LH_P3_2⁴ => if (_lh_g_LH_P3_2⁴ == 0) then [LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴] else let _lh_matchIdent¹ = quotRem_₀_₀(_lh_g_LH_P3_2³, _lh_g_LH_P3_2⁴)
//│ in _lh_matchIdent¹(_lh_g_LH_P3_0⁴, _lh_g_LH_P3_0⁵, _lh_g_LH_P3_1⁴, _lh_g_LH_P3_1⁵, _lh_g_LH_P3_2⁴) | _  => error⁰}: 364
//│ ------------------
//│ case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0⁵ _lh_g_LH_P3_1⁵ _lh_g_LH_P3_2⁴ => if (_lh_g_LH_P3_2⁴ == 0) then [LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴] else let _lh_matchIdent¹ = quotRem_₀_₀(_lh_g_LH_P3_2³, _lh_g_LH_P3_2⁴)
//│ in _lh_matchIdent¹(_lh_g_LH_P3_0⁴, _lh_g_LH_P3_0⁵, _lh_g_LH_P3_1⁴, _lh_g_LH_P3_1⁵, _lh_g_LH_P3_2⁴) | _  => error⁰}: 364 --->
//│ 	[LH_P3 0 1 _lh_gcdE_arg2¹]: 415
//│ 	[LH_P3 (_lh_g_LH_P3_0⁶ - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_0⁷)) (_lh_g_LH_P3_1⁶ - (_lh_g_LH_P2_0¹ * _lh_g_LH_P3_1⁷)) _lh_g_LH_P2_1¹]: 455
//│ case _lh_g_arg1¹ of {LH_P3 _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴ _lh_g_LH_P3_2³ => case _lh_g_arg2¹ of {LH_P3 _lh_g_LH_P3_0⁵ _lh_g_LH_P3_1⁵ _lh_g_LH_P3_2⁴ => if (_lh_g_LH_P3_2⁴ == 0) then [LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴] else let _lh_matchIdent¹ = quotRem_₀_₀(_lh_g_LH_P3_2³, _lh_g_LH_P3_2⁴)
//│ in _lh_matchIdent¹(_lh_g_LH_P3_0⁴, _lh_g_LH_P3_0⁵, _lh_g_LH_P3_1⁴, _lh_g_LH_P3_1⁵, _lh_g_LH_P3_2⁴) | _  => error⁰} | _  => error⁰}: 366 --->
//│ 	[LH_P3 1 0 _lh_gcdE_arg1¹]: 410
//│ 	[LH_P3 _lh_g_LH_P3_0⁷ _lh_g_LH_P3_1⁷ _lh_g_LH_P3_2⁵]: 434
//│ case _lh_f2_LH_P3_2² of {LH_P3 _lh_f2_LH_P3_0¹ _lh_f2_LH_P3_1¹ _lh_f2_LH_P3_2³ => abs_₀_₀(((_lh_f2_LH_P3_0¹ + _lh_f2_LH_P3_1¹) + _lh_f2_LH_P3_2³)) | _  => error⁰}: 581 --->
//│ 	[LH_P3 _lh_g_LH_P3_2³ _lh_g_LH_P3_0⁴ _lh_g_LH_P3_1⁴]: 344
//│ 	[LH_P3 _lh_gcdE_arg2¹ 0 1]: 405
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testGcd_nofib_₀_₀(primId⁰(200))
//│ def testGcd_nofib_₀_₀(_lh_testGcd_nofib_arg1²) = 
//│ 	test_₀_₀(_lh_testGcd_nofib_arg1²)
//│ 	where
//│ 	def test_₀_₀(_lh_test_arg1²) = 
//│ 		let ns² = enumFromTo_₀_₀(5000, (5000 + _lh_test_arg1²))
//│ 		in let ms⁶ = enumFromTo_₁_₀(10000, (10000 + _lh_test_arg1²))
//│ 		in let tripls² = map_₀_₁(f1_₀_₀, 
//│ 			let _lh_listcomp_fun²⁰ = (fun _lh_listcomp_fun_para⁴ -> _lh_listcomp_fun_para⁴(_lh_listcomp_fun²⁰, ms⁶))
//│ 			in _lh_listcomp_fun²⁰(ns²))
//│ 		in let rs² = map_₁_₁(f2_₀_₀, tripls²)
//│ 		in max'_₀_₀(rs²)
//│ 		where
//│ 		def enumFromTo_₀_₀(a⁵, b⁵) = 
//│ 			if (a⁵ <= b⁵) then 
//│ 				let _lh_listcomp_fun_ls_t¹¹ = enumFromTo_₀_₀((a⁵ + 1), b⁵)
//│ 				in let _lh_listcomp_fun_ls_h¹¹ = a⁵
//│ 				in (fun _lh_listcomp_fun²¹ -> (fun ms⁷ -> 
//│ 					let _lh_listcomp_fun²² = (fun _lh_listcomp_fun_para⁵ -> _lh_listcomp_fun_para⁵(_lh_listcomp_fun_ls_h¹¹, _lh_listcomp_fun²², _lh_listcomp_fun_ls_t¹¹, _lh_listcomp_fun²¹))
//│ 					in _lh_listcomp_fun²²(ms⁷))) else (fun _lh_listcomp_fun²³ -> (fun ms⁸ -> (fun f²⁰ -> (fun f²¹ -> [LH_N]))))
//│ 		def enumFromTo_₁_₀(a⁴, b⁴) = 
//│ 			if (a⁴ <= b⁴) then 
//│ 				let _lh_listcomp_fun_ls_t⁸ = enumFromTo_₁_₀((a⁴ + 1), b⁴)
//│ 				in let _lh_listcomp_fun_ls_h⁸ = a⁴
//│ 				in (fun _lh_listcomp_fun_ls_h⁹ -> (fun _lh_listcomp_fun¹⁶ -> (fun _lh_listcomp_fun_ls_t⁹ -> (fun _lh_listcomp_fun¹⁷ -> 
//│ 					let t⁴ = _lh_listcomp_fun¹⁶(_lh_listcomp_fun_ls_t⁸)
//│ 					in let h⁴ = 	
//│ 						let _lh_f1_LH_P2_1² = _lh_listcomp_fun_ls_h⁸
//│ 						in let _lh_f1_LH_P2_0² = _lh_listcomp_fun_ls_h⁹
//│ 						in (fun _lh_dummy⁴ -> 
//│ 							let _lh_f2_LH_P3_2⁴ = gcdE_₀_₀(_lh_f1_LH_P2_0², _lh_f1_LH_P2_1²)
//│ 							in (fun _lh_dummy⁵ -> _lh_f2_LH_P3_2⁴(99)))
//│ 					in (fun f¹⁷ -> 
//│ 						let t⁵ = map_₀_₀(f¹⁷, t⁴)
//│ 						in let h⁵ = f¹⁷(h⁴)
//│ 						in (fun f¹⁸ -> [LH_C f¹⁸(h⁵) map_₁_₀(f¹⁸, t⁵)])))))) else (fun _lh_listcomp_fun_ls_h¹⁰ -> (fun _lh_listcomp_fun¹⁸ -> (fun _lh_listcomp_fun_ls_t¹⁰ -> (fun _lh_listcomp_fun¹⁹ -> _lh_listcomp_fun¹⁹(_lh_listcomp_fun_ls_t¹⁰)))))
//│ 			where
//│ 			def abs_₀_₀(_lh_abs_arg1²) = 
//│ 				if (_lh_abs_arg1² < 0) then (0 - _lh_abs_arg1²) else _lh_abs_arg1²
//│ 			def gcdE_₀_₀(_lh_gcdE_arg1², _lh_gcdE_arg2²) = 
//│ 				case _lh_gcdE_arg1² of {
//│ 					0  => 
//│ 						let _lh_f2_LH_P3_2⁶ = 1
//│ 						in let _lh_f2_LH_P3_1³ = 0
//│ 						in let _lh_f2_LH_P3_0³ = _lh_gcdE_arg2²
//│ 						in (fun _lh_dummy⁷ -> abs_₀_₀(((_lh_f2_LH_P3_0³ + _lh_f2_LH_P3_1³) + _lh_f2_LH_P3_2⁶)))
//│ 					| _  => g_₀_₀(
//│ 						let _lh_g_LH_P3_2¹⁰ = _lh_gcdE_arg1²
//│ 						in let _lh_g_LH_P3_1¹³ = 0
//│ 						in let _lh_g_LH_P3_0¹³ = 1
//│ 						in (fun _lh_g_arg2⁴ -> _lh_g_arg2⁴(_lh_g_LH_P3_0¹³, _lh_g_LH_P3_1¹³, _lh_g_LH_P3_2¹⁰)), 
//│ 						let _lh_g_LH_P3_2¹¹ = _lh_gcdE_arg2²
//│ 						in let _lh_g_LH_P3_1¹⁴ = 1
//│ 						in let _lh_g_LH_P3_0¹⁴ = 0
//│ 						in (fun _lh_g_LH_P3_0¹⁵ -> (fun _lh_g_LH_P3_1¹⁵ -> (fun _lh_g_LH_P3_2¹² -> if (_lh_g_LH_P3_2¹¹ == 0) then 
//│ 							let _lh_f2_LH_P3_2⁷ = _lh_g_LH_P3_1¹⁵
//│ 							in let _lh_f2_LH_P3_1⁴ = _lh_g_LH_P3_0¹⁵
//│ 							in let _lh_f2_LH_P3_0⁴ = _lh_g_LH_P3_2¹²
//│ 							in (fun _lh_dummy⁸ -> abs_₀_₀(((_lh_f2_LH_P3_0⁴ + _lh_f2_LH_P3_1⁴) + _lh_f2_LH_P3_2⁷))) else 
//│ 							let _lh_matchIdent³ = quotRem_₀_₀(_lh_g_LH_P3_2¹², _lh_g_LH_P3_2¹¹)
//│ 							in _lh_matchIdent³(_lh_g_LH_P3_0¹⁵, _lh_g_LH_P3_0¹⁴, _lh_g_LH_P3_1¹⁵, _lh_g_LH_P3_1¹⁴, _lh_g_LH_P3_2¹¹)))))}
//│ 				where
//│ 				def g_₀_₀(_lh_g_arg1², _lh_g_arg2³) = 
//│ 					_lh_g_arg1²(_lh_g_arg2³)
//│ 					where
//│ 					def quotRem_₀_₀(_lh_quotRem_arg1², _lh_quotRem_arg2²) = 
//│ 						let _lh_g_LH_P2_1² = (_lh_quotRem_arg1² % _lh_quotRem_arg2²)
//│ 						in let _lh_g_LH_P2_0² = div⁰(_lh_quotRem_arg1², _lh_quotRem_arg2²)
//│ 						in (fun _lh_g_LH_P3_0⁸ -> (fun _lh_g_LH_P3_0⁹ -> (fun _lh_g_LH_P3_1⁸ -> (fun _lh_g_LH_P3_1⁹ -> (fun _lh_g_LH_P3_2⁶ -> g_₀_₀(
//│ 							let _lh_g_LH_P3_2⁷ = _lh_g_LH_P3_2⁶
//│ 							in let _lh_g_LH_P3_1¹⁰ = _lh_g_LH_P3_1⁹
//│ 							in let _lh_g_LH_P3_0¹⁰ = _lh_g_LH_P3_0⁹
//│ 							in (fun _lh_g_arg2² -> _lh_g_arg2²(_lh_g_LH_P3_0¹⁰, _lh_g_LH_P3_1¹⁰, _lh_g_LH_P3_2⁷)), 
//│ 							let _lh_g_LH_P3_2⁸ = _lh_g_LH_P2_1²
//│ 							in let _lh_g_LH_P3_1¹¹ = (_lh_g_LH_P3_1⁸ - (_lh_g_LH_P2_0² * _lh_g_LH_P3_1⁹))
//│ 							in let _lh_g_LH_P3_0¹¹ = (_lh_g_LH_P3_0⁸ - (_lh_g_LH_P2_0² * _lh_g_LH_P3_0⁹))
//│ 							in (fun _lh_g_LH_P3_0¹² -> (fun _lh_g_LH_P3_1¹² -> (fun _lh_g_LH_P3_2⁹ -> if (_lh_g_LH_P3_2⁸ == 0) then 
//│ 								let _lh_f2_LH_P3_2⁵ = _lh_g_LH_P3_1¹²
//│ 								in let _lh_f2_LH_P3_1² = _lh_g_LH_P3_0¹²
//│ 								in let _lh_f2_LH_P3_0² = _lh_g_LH_P3_2⁹
//│ 								in (fun _lh_dummy⁶ -> abs_₀_₀(((_lh_f2_LH_P3_0² + _lh_f2_LH_P3_1²) + _lh_f2_LH_P3_2⁵))) else 
//│ 								let _lh_matchIdent² = quotRem_₀_₀(_lh_g_LH_P3_2⁹, _lh_g_LH_P3_2⁸)
//│ 								in _lh_matchIdent²(_lh_g_LH_P3_0¹², _lh_g_LH_P3_0¹¹, _lh_g_LH_P3_1¹², _lh_g_LH_P3_1¹¹, _lh_g_LH_P3_2⁸))))))))))
//│ 			def map_₀_₀(f¹⁶, ls⁸) = 
//│ 				ls⁸(f¹⁶)
//│ 			def map_₁_₀(f¹⁴, ls⁶) = 
//│ 				ls⁶(f¹⁴)
//│ 		def f1_₀_₀(_lh_f1_arg1²) = 
//│ 			_lh_f1_arg1²(99)
//│ 		def f2_₀_₀(_lh_f2_arg1²) = 
//│ 			_lh_f2_arg1²(99)
//│ 		def map_₀_₁(f¹⁵, ls⁷) = 
//│ 			ls⁷(f¹⁵)
//│ 		def map_₁_₁(f¹⁹, ls⁹) = 
//│ 			ls⁹(f¹⁹)
//│ 		def max'_₀_₀(_lh_max'_arg1²) = 
//│ 			case _lh_max'_arg1² of {
//│ 				LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1² => case _lh_max'_LH_C_1² of {
//│ 					LH_N  => _lh_max'_LH_C_0²
//│ 					| LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³ => if (_lh_max'_LH_C_0² < _lh_max'_LH_C_0³) then max'_₀_₀([LH_C _lh_max'_LH_C_0³ _lh_max'_LH_C_1³]) else max'_₀_₀([LH_C _lh_max'_LH_C_0² _lh_max'_LH_C_1³])
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
