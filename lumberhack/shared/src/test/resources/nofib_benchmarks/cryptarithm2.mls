



:lhInHaskell
:lhGenOCaml
data Unit = Unit
fromJust (Just a) = a
unlines ls = concat (map (\l -> l ++ ['n']) ls)
nub []             =  []
nub (x:xs)         =  x : nub (filter (\y -> not (polyEq x y)) xs)
lookup k [] = Nothing
lookup k ((x, v):t) = if polyEq k x then Just v else lookup k t
unzip ls = foldr (\ab asbs -> case ab of {(a, b) -> (case asbs of {(as, bs) -> ((a:as), (b:bs))})}) ([],[]) ls
combine y h ys t = (y:h) : (transpose (ys:t))
transpose [] = []
transpose ([] : xss) = transpose xss
transpose ((x : xs) : xss) = case (unzip [(hd, tl) | hd : tl <- xss]) of {
  (hds, tls) -> combine x hds xs tls
}
delete (x:xs) e = if polyEq x e then delete xs e else x:(delete xs e)
delete [] e = []
listDiff = foldl delete
data StateT s m a = StateT (s -> m (a, s))
runStateT (StateT f) = f
mapM f ls = foldr (\a r -> bind (f a) (\x -> bind r (\xs -> return (x:xs)))) (return []) ls
lift ls = StateT (\s -> concat $ map (\x -> [(x, s)]) ls)
execStateT m s = concat $ map (\x -> case x of {(a, s) -> [s]}) ((runStateT m) s)
bind m f = StateT (\s -> concat $ map (\as -> case as of { (a, s) -> runStateT (f a) s }) (runStateT m s))
guard True = StateT (\s -> [(Unit, s)])
guard False = StateT (\s -> [])
return a = StateT (\s -> [(a, s)])
put ss = StateT (\s -> [(Unit, ss)])
get = StateT (\s -> [(s, s)])
type DigitState a = StateT Digits [] a
-- Our digits state
-- * First we have the remaining digit to allocate.
-- * Second, we have the mapping from Char to Digit,
--   for the chars that have been mapped so far.
-- data Digits = Digits {
--   digits :: [Int],
--   digitEnv :: [(Char,Int)]
-- } deriving Show
data Digits = Digits [Int] [(Char, Int)]
digits (Digits a b) = a
digitEnv (Digits a b) = b
-- permute adds a mapping from a char to each of the
-- remaining allocable digits.
-- This is used in the context of the list-of-successes
-- monad, so it actually returns all possible mappings.
-- permute :: Char -> DigitState Int
-- permute c = do
--   st <- get
--   (i,is) <- let xs = digits st in lift [ (x,xs \\ [x]) | x <-  xs]
--   put (Digits is ((c,i):digitEnv st))
--   return i
permute c =
  bind get (\st ->
    bind (let xs = digits st in lift [ (x, listDiff xs [x]) | x <- xs]) (\iis -> case iis of {
      (i, is) -> bind (put (Digits is ((c,i):(digitEnv st)))) (\_p ->
        return i
      )
    })
  )
-- select attempt first checks to see if a mapping
-- from a specific char to digit already has been
-- mapped. If so, use the mapping, otherwise
-- add a new mapping.
-- select :: Char -> DigitState Int
-- select c = do
--   st <- get
--   case lookup c (digitEnv st) of
--     Just r -> return r
--     Nothing -> permute c
select c =
  bind get (\st ->
    case (lookup c (digitEnv st)) of {
      Just r -> return r;
      Nothing -> permute c
    }
  )
-- solve takes a list of list of (backwards) letters,
-- and a list of (backwards) letters, and tries
-- to map the letter to digits, such that
-- the sum of the first list of letters (mapped to digits)
-- is equal to the sum of the second list of letters,
-- again mapped to digits.
--
-- So a possible mapping for A+B=C might be
-- solve ["A","B"] "C" 0
--     => A -> 1, B -> 2, C -> 3
rest []     = []
rest (x:xs) = xs
-- solve :: [[Char]] -> [Char] -> Int -> DigitState Unit
-- solve tops (bot:bots) carry =
--   do topN <- (case tops of
--        [] -> return carry
--        (top:_) ->
--          do topNS <- mapM select top
--             return (sum topNS + carry))
--      botN <- select bot
--      guard (topN `mod` 10 == botN)  -- key optimization
--      solve (rest tops) bots (topN `div` 10)
-- solve [] [] 0 = return Unit
-- solve _  _  _ = mzero
solve tops (bot:bots) carry = 
  bind (case tops of 
    [] -> return carry
    (top:_) -> bind (mapM select top) (\topNS -> return ((sum topNS) + carry))
  ) (\topN -> bind (select bot) (\botN ->
    bind (guard ((topN `mod` 10) == botN)) (\_s ->
      solve (rest tops) bots (topN `div` 10))))
solve [] [] 0 = return Unit
solve _ _ _ = StateT (\_p -> [])
-- Puzzle provides a cleaner interface into solve.
-- The strings are in the order *we* write them.
puzzle :: [[Char]] -> [Char] -> String
puzzle top bot =
  let solution = solve (transpose (map reverse top)) (reverse bot) 0 in
  let answer = case (execStateT solution (Digits [0..9] [])) of {(a:_) -> a; [] -> error} in
  let env = digitEnv answer in
  let look = \c -> fromJust (lookup c env) in
  let expand = \ls -> foldl (\a -> \b -> a * 10 + look b) 0 ls in
  let topVal = sum [expand xs | xs <- top] in
  let botVal = expand bot in
  if length (nub (concat top ++ bot)) > 10 then
    error
  else if topVal /= botVal then
    error
  else unlines [ [c] ++ " => " ++ string_of_int i | (c,i) <- digitEnv answer ]
testCryptarithm2_nofib n =
  let args = ["THIRTY", "TWELVE", "TWELVE", "TWELVE", "TWELVE", "TWELVE" ++ if n > 999999 then "1" else ""] in
  puzzle args "NINETY"
testCryptarithm2_nofib $ primId 1500
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> after expansion >>>>>>>>>>
//│ testCryptarithm2_nofib_lh_₁(primId⁰(1500))
//│ def bind_lh_₁(_lh_bind_arg1⁶, _lh_bind_arg2⁶) = [StateT (fun s¹⁷ -> concat_lh_₄(map_lh_₄((fun as⁶ -> 
//│ 	let _lh_matchIdent¹² = as⁶
//│ 	in case _lh_matchIdent¹² of {
//│ 		LH_P2 _lh_bind_LH_P2_0⁶ _lh_bind_LH_P2_1⁶ => runStateT_lh_₂(_lh_bind_arg2⁶(_lh_bind_LH_P2_0⁶), _lh_bind_LH_P2_1⁶)}), runStateT_lh_₃(_lh_bind_arg1⁶, s¹⁷))))]
//│ def bind_lh_₂(_lh_bind_arg1⁵, _lh_bind_arg2⁵) = [StateT (fun s¹⁶ -> concat_lh_₅(map_lh_₅((fun as⁵ -> 
//│ 	let _lh_matchIdent¹¹ = as⁵
//│ 	in case _lh_matchIdent¹¹ of {
//│ 		LH_P2 _lh_bind_LH_P2_0⁵ _lh_bind_LH_P2_1⁵ => runStateT_lh_₄(_lh_bind_arg2⁵(_lh_bind_LH_P2_0⁵), _lh_bind_LH_P2_1⁵)}), runStateT_lh_₅(_lh_bind_arg1⁵, s¹⁶))))]
//│ def bind_lh_₃(_lh_bind_arg1⁴, _lh_bind_arg2⁴) = [StateT (fun s¹⁵ -> concat_lh_₆(map_lh_₆((fun as⁴ -> 
//│ 	let _lh_matchIdent¹⁰ = as⁴
//│ 	in case _lh_matchIdent¹⁰ of {
//│ 		LH_P2 _lh_bind_LH_P2_0⁴ _lh_bind_LH_P2_1⁴ => runStateT_lh_₆(_lh_bind_arg2⁴(_lh_bind_LH_P2_0⁴), _lh_bind_LH_P2_1⁴)}), runStateT_lh_₇(_lh_bind_arg1⁴, s¹⁵))))]
//│ def bind_lh_₄(_lh_bind_arg1³, _lh_bind_arg2³) = [StateT (fun s¹² -> concat_lh_₇(map_lh_₇((fun as³ -> 
//│ 	let _lh_matchIdent⁸ = as³
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_P2 _lh_bind_LH_P2_0³ _lh_bind_LH_P2_1³ => runStateT_lh_₈(_lh_bind_arg2³(_lh_bind_LH_P2_0³), _lh_bind_LH_P2_1³)}), runStateT_lh_₉(_lh_bind_arg1³, s¹²))))]
//│ def bind_lh_₅(_lh_bind_arg1², _lh_bind_arg2²) = [StateT (fun s⁷ -> concat_lh_₇(map_lh_₇((fun as² -> 
//│ 	let _lh_matchIdent⁴ = as²
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_P2 _lh_bind_LH_P2_0² _lh_bind_LH_P2_1² => runStateT_lh_₉(_lh_bind_arg2²(_lh_bind_LH_P2_0²), _lh_bind_LH_P2_1²)}), runStateT_lh_₉(_lh_bind_arg1², s⁷))))]
//│ def bind_lh_₆(_lh_bind_arg1¹, _lh_bind_arg2¹) = [StateT (fun s³ -> concat_lh_₇(map_lh_₇((fun as¹ -> 
//│ 	let _lh_matchIdent² = as¹
//│ 	in case _lh_matchIdent² of {
//│ 		LH_P2 _lh_bind_LH_P2_0¹ _lh_bind_LH_P2_1¹ => runStateT_lh_₉(_lh_bind_arg2¹(_lh_bind_LH_P2_0¹), _lh_bind_LH_P2_1¹)}), runStateT_lh_₉(_lh_bind_arg1¹, s³))))]
//│ def bind_lh_₇(_lh_bind_arg1⁰, _lh_bind_arg2⁰) = [StateT (fun s² -> concat_lh_₇(map_lh_₇((fun as⁰ -> 
//│ 	let _lh_matchIdent¹ = as⁰
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_P2 _lh_bind_LH_P2_0⁰ _lh_bind_LH_P2_1⁰ => runStateT_lh_₉(_lh_bind_arg2⁰(_lh_bind_LH_P2_0⁰), _lh_bind_LH_P2_1⁰)}), runStateT_lh_₉(_lh_bind_arg1⁰, s²))))]
//│ def combine_lh_₁(_lh_combine_arg1⁰, _lh_combine_arg2⁰, _lh_combine_arg3⁰, _lh_combine_arg4⁰) = [LH_C [LH_C _lh_combine_arg1⁰ _lh_combine_arg2⁰] transpose_lh_₁([LH_C _lh_combine_arg3⁰ _lh_combine_arg4⁰])]
//│ def concat_lh_₁(lss⁶) = case lss⁶ of {
//│ 	LH_C h²² t²² => mappend_lh_₆(h²², concat_lh_₁(t²²))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₂(lss⁵) = case lss⁵ of {
//│ 	LH_C h¹⁵ t¹⁵ => mappend_lh_₆(h¹⁵, concat_lh_₂(t¹⁵))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₃(lss⁴) = case lss⁴ of {
//│ 	LH_C h¹¹ t¹¹ => mappend_lh_₆(h¹¹, concat_lh_₃(t¹¹))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₄(lss³) = case lss³ of {
//│ 	LH_C h⁷ t⁷ => mappend_lh_₆(h⁷, concat_lh_₄(t⁷))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₅(lss²) = case lss² of {
//│ 	LH_C h⁵ t⁵ => mappend_lh_₆(h⁵, concat_lh_₅(t⁵))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₆(lss¹) = case lss¹ of {
//│ 	LH_C h³ t³ => mappend_lh_₆(h³, concat_lh_₆(t³))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₇(lss⁰) = case lss⁰ of {
//│ 	LH_C h¹ t¹ => mappend_lh_₆(h¹, concat_lh_₇(t¹))
//│ 	| LH_N  => [LH_N]}
//│ def delete_lh_₁(_lh_delete_arg1⁰, _lh_delete_arg2⁰) = case _lh_delete_arg1⁰ of {
//│ 	LH_C _lh_delete_LH_C_0⁰ _lh_delete_LH_C_1⁰ => if polyEq⁰(_lh_delete_LH_C_0⁰, _lh_delete_arg2⁰) then delete_lh_₁(_lh_delete_LH_C_1⁰, _lh_delete_arg2⁰) else [LH_C _lh_delete_LH_C_0⁰ delete_lh_₁(_lh_delete_LH_C_1⁰, _lh_delete_arg2⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def digitEnv_lh_₁(_lh_digitEnv_arg1²) = case _lh_digitEnv_arg1² of {
//│ 	Digits _lh_digitEnv_Digits_0² _lh_digitEnv_Digits_1² => _lh_digitEnv_Digits_1²}
//│ def digitEnv_lh_₂(_lh_digitEnv_arg1¹) = case _lh_digitEnv_arg1¹ of {
//│ 	Digits _lh_digitEnv_Digits_0¹ _lh_digitEnv_Digits_1¹ => _lh_digitEnv_Digits_1¹}
//│ def digitEnv_lh_₃(_lh_digitEnv_arg1⁰) = case _lh_digitEnv_arg1⁰ of {
//│ 	Digits _lh_digitEnv_Digits_0⁰ _lh_digitEnv_Digits_1⁰ => _lh_digitEnv_Digits_1⁰}
//│ def digits_lh_₁(_lh_digits_arg1⁰) = case _lh_digits_arg1⁰ of {
//│ 	Digits _lh_digits_Digits_0⁰ _lh_digits_Digits_1⁰ => _lh_digits_Digits_0⁰}
//│ def enumFromTo_lh_₁(a⁴, b⁰) = if (a⁴ <= b⁰) then [LH_C a⁴ enumFromTo_lh_₁((a⁴ + 1), b⁰)] else [LH_N]
//│ def execStateT_lh_₁(_lh_execStateT_arg1⁰, _lh_execStateT_arg2⁰) = concat_lh_₃(map_lh_₃((fun x² -> 
//│ 	let _lh_matchIdent¹³ = x²
//│ 	in case _lh_matchIdent¹³ of {
//│ 		LH_P2 _lh_execStateT_LH_P2_0⁰ _lh_execStateT_LH_P2_1⁰ => [LH_C _lh_execStateT_LH_P2_1⁰ [LH_N]]}), runStateT_lh_₁(_lh_execStateT_arg1⁰, _lh_execStateT_arg2⁰)))
//│ def filter_lh_₁(f⁶, ls⁷) = case ls⁷ of {
//│ 	LH_C h¹³ t¹³ => if f⁶(h¹³) then [LH_C h¹³ filter_lh_₁(f⁶, t¹³)] else filter_lh_₁(f⁶, t¹³)
//│ 	| LH_N  => [LH_N]}
//│ def foldl_lh_₁(f⁹, i¹, ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h²⁴ t²⁴ => foldl_lh_₁(f⁹, f⁹(i¹, h²⁴), t²⁴)
//│ 	| LH_N  => i¹}
//│ def foldr_lh_₁(f⁰, i⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => f⁰(h⁰, foldr_lh_₁(f⁰, i⁰, t⁰))
//│ 	| LH_N  => i⁰}
//│ def fromJust_lh_₁(_lh_fromJust_arg1⁰) = case _lh_fromJust_arg1⁰ of {
//│ 	Just _lh_fromJust_Just_0⁰ => _lh_fromJust_Just_0⁰}
//│ def get_lh_₁ = [StateT (fun s⁶ -> [LH_C [LH_P2 s⁶ s⁶] [LH_N]])]
//│ def guard_lh_₁(_lh_guard_arg1⁰) = case _lh_guard_arg1⁰ of {
//│ 	True  => [StateT (fun s⁹ -> [LH_C [LH_P2 [Unit] s⁹] [LH_N]])]
//│ 	| False  => [StateT (fun s¹⁰ -> [LH_N])]}
//│ def length_lh_₁(ls¹⁵) = case ls¹⁵ of {
//│ 	LH_C h²⁵ t²⁵ => (1 + length_lh_₁(t²⁵))
//│ 	| LH_N  => 0}
//│ def lift_lh_₁(_lh_lift_arg1⁰) = [StateT (fun s⁰ -> concat_lh_₇(map_lh_₇((fun x⁰ -> [LH_C [LH_P2 x⁰ s⁰] [LH_N]]), _lh_lift_arg1⁰)))]
//│ def listDiff_lh_₁ = foldl_lh_₁(delete_lh_₁)
//│ def lookup_lh_₁(_lh_lookup_arg1², _lh_lookup_arg2²) = case _lh_lookup_arg2² of {
//│ 	LH_N  => [Nothing]
//│ 	| LH_C _lh_lookup_LH_C_0² _lh_lookup_LH_C_1² => case _lh_lookup_LH_C_0² of {
//│ 		LH_P2 _lh_lookup_LH_P2_0² _lh_lookup_LH_P2_1² => if polyEq⁰(_lh_lookup_arg1², _lh_lookup_LH_P2_0²) then [Just _lh_lookup_LH_P2_1²] else lookup_lh_₁(_lh_lookup_arg1², _lh_lookup_LH_C_1²)}}
//│ def lookup_lh_₂(_lh_lookup_arg1¹, _lh_lookup_arg2¹) = case _lh_lookup_arg2¹ of {
//│ 	LH_N  => [Nothing]
//│ 	| LH_C _lh_lookup_LH_C_0¹ _lh_lookup_LH_C_1¹ => case _lh_lookup_LH_C_0¹ of {
//│ 		LH_P2 _lh_lookup_LH_P2_0¹ _lh_lookup_LH_P2_1¹ => if polyEq⁰(_lh_lookup_arg1¹, _lh_lookup_LH_P2_0¹) then [Just _lh_lookup_LH_P2_1¹] else lookup_lh_₂(_lh_lookup_arg1¹, _lh_lookup_LH_C_1¹)}}
//│ def lookup_lh_₃(_lh_lookup_arg1⁰, _lh_lookup_arg2⁰) = case _lh_lookup_arg2⁰ of {
//│ 	LH_N  => [Nothing]
//│ 	| LH_C _lh_lookup_LH_C_0⁰ _lh_lookup_LH_C_1⁰ => case _lh_lookup_LH_C_0⁰ of {
//│ 		LH_P2 _lh_lookup_LH_P2_0⁰ _lh_lookup_LH_P2_1⁰ => if polyEq⁰(_lh_lookup_arg1⁰, _lh_lookup_LH_P2_0⁰) then [Just _lh_lookup_LH_P2_1⁰] else lookup_lh_₃(_lh_lookup_arg1⁰, _lh_lookup_LH_C_1⁰)}}
//│ def mapM_lh_₁(_lh_mapM_arg1⁰, _lh_mapM_arg2⁰) = foldr_lh_₁((fun a¹ -> (fun r⁰ -> bind_lh_₇(_lh_mapM_arg1⁰(a¹), (fun x¹ -> bind_lh_₆(r⁰, (fun xs⁴ -> return_lh_₅([LH_C x¹ xs⁴]))))))), return_lh_₆([LH_N]), _lh_mapM_arg2⁰)
//│ def map_lh_₁(f⁸, ls¹³) = case ls¹³ of {
//│ 	LH_C h²⁰ t²⁰ => [LH_C f⁸(h²⁰) map_lh_₁(f⁸, t²⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f⁷, ls⁸) = case ls⁸ of {
//│ 	LH_C h¹⁴ t¹⁴ => [LH_C f⁷(h¹⁴) map_lh_₂(f⁷, t¹⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f⁵, ls⁶) = case ls⁶ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C f⁵(h¹⁰) map_lh_₃(f⁵, t¹⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f⁴, ls⁴) = case ls⁴ of {
//│ 	LH_C h⁸ t⁸ => [LH_C f⁴(h⁸) map_lh_₄(f⁴, t⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f³, ls³) = case ls³ of {
//│ 	LH_C h⁶ t⁶ => [LH_C f³(h⁶) map_lh_₅(f³, t⁶)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f², ls²) = case ls² of {
//│ 	LH_C h⁴ t⁴ => [LH_C f²(h⁴) map_lh_₆(f², t⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₇(f¹, ls¹) = case ls¹ of {
//│ 	LH_C h² t² => [LH_C f¹(h²) map_lh_₇(f¹, t²)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs⁸, ys⁵) = case xs⁸ of {
//│ 	LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₁(t²⁶, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mappend_lh_₂(xs⁷, ys⁴) = case xs⁷ of {
//│ 	LH_C h²³ t²³ => [LH_C h²³ mappend_lh_₂(t²³, ys⁴)]
//│ 	| LH_N  => ys⁴}
//│ def mappend_lh_₃(xs⁶, ys³) = case xs⁶ of {
//│ 	LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₃(t²¹, ys³)]
//│ 	| LH_N  => ys³}
//│ def mappend_lh_₄(xs⁵, ys²) = case xs⁵ of {
//│ 	LH_C h¹⁹ t¹⁹ => [LH_C h¹⁹ mappend_lh_₄(t¹⁹, ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₅(xs³, ys¹) = case xs³ of {
//│ 	LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₅(t¹⁶, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₆(xs², ys⁰) = case xs² of {
//│ 	LH_C h¹² t¹² => [LH_C h¹² mappend_lh_₆(t¹², ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def nub_lh_₁(_lh_nub_arg1⁰) = case _lh_nub_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_nub_LH_C_0⁰ _lh_nub_LH_C_1⁰ => [LH_C _lh_nub_LH_C_0⁰ nub_lh_₁(filter_lh_₁((fun y⁰ -> not⁰(polyEq⁰(_lh_nub_LH_C_0⁰, y⁰))), _lh_nub_LH_C_1⁰))]}
//│ def permute_lh_₁(_lh_permute_arg1¹) = bind_lh_₇(get_lh_₁, (fun st¹ -> bind_lh_₇(
//│ 	let xs¹ = digits_lh_₁(st¹)
//│ 	in lift_lh_₁(
//│ 		let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ listDiff_lh_₁(xs¹, [LH_C _lh_listcomp_fun_ls_h¹ [LH_N]])] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun¹(xs¹)), (fun iis¹ -> 
//│ 	let _lh_matchIdent³ = iis¹
//│ 	in case _lh_matchIdent³ of {
//│ 		LH_P2 _lh_permute_LH_P2_0¹ _lh_permute_LH_P2_1¹ => bind_lh_₇(put_lh_₁([Digits _lh_permute_LH_P2_1¹ [LH_C [LH_P2 _lh_permute_arg1¹ _lh_permute_LH_P2_0¹] digitEnv_lh_₃(st¹)]]), (fun _p¹ -> return_lh_₆(_lh_permute_LH_P2_0¹)))}))))
//│ def permute_lh_₂(_lh_permute_arg1⁰) = bind_lh_₇(get_lh_₁, (fun st⁰ -> bind_lh_₇(
//│ 	let xs⁰ = digits_lh_₁(st⁰)
//│ 	in lift_lh_₁(
//│ 		let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ listDiff_lh_₁(xs⁰, [LH_C _lh_listcomp_fun_ls_h⁰ [LH_N]])] _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁰(xs⁰)), (fun iis⁰ -> 
//│ 	let _lh_matchIdent⁰ = iis⁰
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_P2 _lh_permute_LH_P2_0⁰ _lh_permute_LH_P2_1⁰ => bind_lh_₇(put_lh_₁([Digits _lh_permute_LH_P2_1⁰ [LH_C [LH_P2 _lh_permute_arg1⁰ _lh_permute_LH_P2_0⁰] digitEnv_lh_₃(st⁰)]]), (fun _p⁰ -> return_lh_₆(_lh_permute_LH_P2_0⁰)))}))))
//│ def put_lh_₁(_lh_put_arg1⁰) = [StateT (fun s¹ -> [LH_C [LH_P2 [Unit] _lh_put_arg1⁰] [LH_N]])]
//│ def puzzle_lh_₁(_lh_puzzle_arg1⁰, _lh_puzzle_arg2⁰) = 
//│ 	let solution⁰ = solve_lh_₁(transpose_lh_₁(map_lh_₁(reverse_lh_₂, _lh_puzzle_arg1⁰)), reverse_lh_₁(_lh_puzzle_arg2⁰), 0)
//│ 	in let answer⁰ = 	
//│ 		let _lh_matchIdent¹⁶ = execStateT_lh_₁(solution⁰, [Digits enumFromTo_lh_₁(0, 9) [LH_N]])
//│ 		in case _lh_matchIdent¹⁶ of {
//│ 			LH_C _lh_puzzle_LH_C_0⁰ _lh_puzzle_LH_C_1⁰ => _lh_puzzle_LH_C_0⁰
//│ 			| LH_N  => error⁰}
//│ 	in let env⁰ = digitEnv_lh_₂(answer⁰)
//│ 	in let look⁰ = (fun c⁰ -> fromJust_lh_₁(lookup_lh_₁(c⁰, env⁰)))
//│ 	in let expand⁰ = (fun ls¹⁸ -> foldl_lh_₁((fun a⁵ -> (fun b¹ -> ((a⁵ * 10) + look⁰(b¹)))), 0, ls¹⁸))
//│ 	in let topVal⁰ = sum_lh_₁(
//│ 		let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 			LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C expand⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun³(_lh_puzzle_arg1⁰))
//│ 	in let botVal⁰ = expand⁰(_lh_puzzle_arg2⁰)
//│ 	in if (length_lh_₁(nub_lh_₁(mappend_lh_₄(concat_lh_₁(_lh_puzzle_arg1⁰), _lh_puzzle_arg2⁰))) > 10) then error⁰ else if (topVal⁰ /= botVal⁰) then error⁰ else unlines_lh_₁(
//│ 		let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => case _lh_listcomp_fun_ls_h⁴ of {
//│ 				LH_P2 _lh_puzzle_LH_P2_0⁰ _lh_puzzle_LH_P2_1⁰ => [LH_C mappend_lh_₃(mappend_lh_₂([LH_C _lh_puzzle_LH_P2_0⁰ [LH_N]], [LH_C ' ' [LH_C '=' [LH_C '>' [LH_C ' ' [LH_N]]]]]), string_of_int⁰(_lh_puzzle_LH_P2_1⁰)) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]
//│ 				| _  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁴(digitEnv_lh_₁(answer⁰)))
//│ def rest_lh_₁(_lh_rest_arg1⁰) = case _lh_rest_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_rest_LH_C_0⁰ _lh_rest_LH_C_1⁰ => _lh_rest_LH_C_1⁰}
//│ def return_lh_₁(_lh_return_arg1⁵) = [StateT (fun s¹⁴ -> [LH_C [LH_P2 _lh_return_arg1⁵ s¹⁴] [LH_N]])]
//│ def return_lh_₂(_lh_return_arg1⁴) = [StateT (fun s¹³ -> [LH_C [LH_P2 _lh_return_arg1⁴ s¹³] [LH_N]])]
//│ def return_lh_₃(_lh_return_arg1³) = [StateT (fun s¹¹ -> [LH_C [LH_P2 _lh_return_arg1³ s¹¹] [LH_N]])]
//│ def return_lh_₄(_lh_return_arg1²) = [StateT (fun s⁸ -> [LH_C [LH_P2 _lh_return_arg1² s⁸] [LH_N]])]
//│ def return_lh_₅(_lh_return_arg1¹) = [StateT (fun s⁵ -> [LH_C [LH_P2 _lh_return_arg1¹ s⁵] [LH_N]])]
//│ def return_lh_₆(_lh_return_arg1⁰) = [StateT (fun s⁴ -> [LH_C [LH_P2 _lh_return_arg1⁰ s⁴] [LH_N]])]
//│ def reverse_helper_lh_₁(ls¹¹, a³) = case ls¹¹ of {
//│ 	LH_C h¹⁸ t¹⁸ => reverse_helper_lh_₁(t¹⁸, [LH_C h¹⁸ a³])
//│ 	| LH_N  => a³}
//│ def reverse_helper_lh_₂(ls⁵, a⁰) = case ls⁵ of {
//│ 	LH_C h⁹ t⁹ => reverse_helper_lh_₂(t⁹, [LH_C h⁹ a⁰])
//│ 	| LH_N  => a⁰}
//│ def reverse_lh_₁(ls¹⁷) = reverse_helper_lh_₁(ls¹⁷, [LH_N])
//│ def reverse_lh_₂(ls¹²) = reverse_helper_lh_₂(ls¹², [LH_N])
//│ def runStateT_lh_₁(_lh_runStateT_arg1⁸) = case _lh_runStateT_arg1⁸ of {
//│ 	StateT _lh_runStateT_StateT_0⁸ => _lh_runStateT_StateT_0⁸}
//│ def runStateT_lh_₂(_lh_runStateT_arg1⁷) = case _lh_runStateT_arg1⁷ of {
//│ 	StateT _lh_runStateT_StateT_0⁷ => _lh_runStateT_StateT_0⁷}
//│ def runStateT_lh_₃(_lh_runStateT_arg1⁶) = case _lh_runStateT_arg1⁶ of {
//│ 	StateT _lh_runStateT_StateT_0⁶ => _lh_runStateT_StateT_0⁶}
//│ def runStateT_lh_₄(_lh_runStateT_arg1⁵) = case _lh_runStateT_arg1⁵ of {
//│ 	StateT _lh_runStateT_StateT_0⁵ => _lh_runStateT_StateT_0⁵}
//│ def runStateT_lh_₅(_lh_runStateT_arg1⁴) = case _lh_runStateT_arg1⁴ of {
//│ 	StateT _lh_runStateT_StateT_0⁴ => _lh_runStateT_StateT_0⁴}
//│ def runStateT_lh_₆(_lh_runStateT_arg1³) = case _lh_runStateT_arg1³ of {
//│ 	StateT _lh_runStateT_StateT_0³ => _lh_runStateT_StateT_0³}
//│ def runStateT_lh_₇(_lh_runStateT_arg1²) = case _lh_runStateT_arg1² of {
//│ 	StateT _lh_runStateT_StateT_0² => _lh_runStateT_StateT_0²}
//│ def runStateT_lh_₈(_lh_runStateT_arg1¹) = case _lh_runStateT_arg1¹ of {
//│ 	StateT _lh_runStateT_StateT_0¹ => _lh_runStateT_StateT_0¹}
//│ def runStateT_lh_₉(_lh_runStateT_arg1⁰) = case _lh_runStateT_arg1⁰ of {
//│ 	StateT _lh_runStateT_StateT_0⁰ => _lh_runStateT_StateT_0⁰}
//│ def select_lh_₁(_lh_select_arg1¹) = bind_lh_₅(get_lh_₁, (fun st³ -> 
//│ 	let _lh_matchIdent⁹ = lookup_lh_₂(_lh_select_arg1¹, digitEnv_lh_₃(st³))
//│ 	in case _lh_matchIdent⁹ of {
//│ 		Just _lh_select_Just_0¹ => return_lh_₄(_lh_select_Just_0¹)
//│ 		| Nothing  => permute_lh_₁(_lh_select_arg1¹)}))
//│ def select_lh_₂(_lh_select_arg1⁰) = bind_lh_₇(get_lh_₁, (fun st² -> 
//│ 	let _lh_matchIdent⁷ = lookup_lh_₃(_lh_select_arg1⁰, digitEnv_lh_₃(st²))
//│ 	in case _lh_matchIdent⁷ of {
//│ 		Just _lh_select_Just_0⁰ => return_lh_₆(_lh_select_Just_0⁰)
//│ 		| Nothing  => permute_lh_₂(_lh_select_arg1⁰)}))
//│ def solve_lh_₁(_lh_solve_arg1⁰, _lh_solve_arg2⁰, _lh_solve_arg3⁰) = case _lh_solve_arg2⁰ of {
//│ 	LH_C _lh_solve_LH_C_0⁰ _lh_solve_LH_C_1⁰ => bind_lh_₂(
//│ 		let _lh_matchIdent¹⁵ = _lh_solve_arg1⁰
//│ 		in case _lh_matchIdent¹⁵ of {
//│ 			LH_N  => return_lh_₂(_lh_solve_arg3⁰)
//│ 			| LH_C _lh_solve_LH_C_0¹ _lh_solve_LH_C_1¹ => bind_lh_₃(mapM_lh_₁(select_lh_₂, _lh_solve_LH_C_0¹), (fun topNS⁰ -> return_lh_₁((sum_lh_₂(topNS⁰) + _lh_solve_arg3⁰))))}, (fun topN⁰ -> bind_lh_₁(select_lh_₁(_lh_solve_LH_C_0⁰), (fun botN⁰ -> bind_lh_₄(guard_lh_₁(((topN⁰ % 10) == botN⁰)), (fun _s⁰ -> solve_lh_₁(rest_lh_₁(_lh_solve_arg1⁰), _lh_solve_LH_C_1⁰, div⁰(topN⁰, 10))))))))
//│ 	| _  => case _lh_solve_arg1⁰ of {
//│ 		LH_N  => case _lh_solve_arg2⁰ of {
//│ 			LH_N  => case _lh_solve_arg3⁰ of {
//│ 				0  => return_lh_₃([Unit])
//│ 				| _  => [StateT (fun _p² -> [LH_N])]}
//│ 			| _  => [StateT (fun _p³ -> [LH_N])]}
//│ 		| _  => [StateT (fun _p⁴ -> [LH_N])]}}
//│ def sumAux_lh_₁(ls¹⁰, a²) = case ls¹⁰ of {
//│ 	LH_N  => a²
//│ 	| LH_C h¹⁷ t¹⁷ => sumAux_lh_₁(t¹⁷, (a² + h¹⁷))}
//│ def sum_lh_₁(ls¹⁶) = sumAux_lh_₁(ls¹⁶, 0)
//│ def sum_lh_₂(ls⁹) = sumAux_lh_₁(ls⁹, 0)
//│ def testCryptarithm2_nofib_lh_₁(_lh_testCryptarithm2_nofib_arg1⁰) = 
//│ 	let args⁰ = [LH_C [LH_C 'T' [LH_C 'H' [LH_C 'I' [LH_C 'R' [LH_C 'T' [LH_C 'Y' [LH_N]]]]]]] [LH_C [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]] [LH_C [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]] [LH_C [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]] [LH_C [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]] [LH_C mappend_lh_₁([LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]], if (_lh_testCryptarithm2_nofib_arg1⁰ > 999999) then [LH_C '1' [LH_N]] else [LH_N]) [LH_N]]]]]]]
//│ 	in puzzle_lh_₁(args⁰, [LH_C 'N' [LH_C 'I' [LH_C 'N' [LH_C 'E' [LH_C 'T' [LH_C 'Y' [LH_N]]]]]]])
//│ def transpose_lh_₁(_lh_transpose_arg1⁰) = case _lh_transpose_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_transpose_LH_C_0⁰ _lh_transpose_LH_C_1⁰ => case _lh_transpose_LH_C_0⁰ of {
//│ 		LH_N  => transpose_lh_₁(_lh_transpose_LH_C_1⁰)
//│ 		| LH_C _lh_transpose_LH_C_0¹ _lh_transpose_LH_C_1¹ => 
//│ 			let _lh_matchIdent¹⁴ = unzip_lh_₁(
//│ 				let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 					LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => case _lh_listcomp_fun_ls_h² of {
//│ 						LH_C _lh_transpose_LH_C_0² _lh_transpose_LH_C_1² => [LH_C [LH_P2 _lh_transpose_LH_C_0² _lh_transpose_LH_C_1²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]
//│ 						| _  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun²(_lh_transpose_LH_C_1⁰))
//│ 			in case _lh_matchIdent¹⁴ of {
//│ 				LH_P2 _lh_transpose_LH_P2_0⁰ _lh_transpose_LH_P2_1⁰ => combine_lh_₁(_lh_transpose_LH_C_0¹, _lh_transpose_LH_P2_0⁰, _lh_transpose_LH_C_1¹, _lh_transpose_LH_P2_1⁰)}}}
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = concat_lh_₂(map_lh_₂((fun l⁰ -> mappend_lh_₅(l⁰, [LH_C 'n' [LH_N]])), _lh_unlines_arg1⁰))
//│ def unzip_lh_₁(_lh_unzip_arg1⁰) = foldr_lh_₁((fun ab⁰ -> (fun asbs⁰ -> 
//│ 	let _lh_matchIdent⁵ = ab⁰
//│ 	in case _lh_matchIdent⁵ of {
//│ 		LH_P2 _lh_unzip_LH_P2_0⁰ _lh_unzip_LH_P2_1⁰ => 
//│ 			let _lh_matchIdent⁶ = asbs⁰
//│ 			in case _lh_matchIdent⁶ of {
//│ 				LH_P2 _lh_unzip_LH_P2_0¹ _lh_unzip_LH_P2_1¹ => [LH_P2 [LH_C _lh_unzip_LH_P2_0⁰ _lh_unzip_LH_P2_0¹] [LH_C _lh_unzip_LH_P2_1⁰ _lh_unzip_LH_P2_1¹]]}})), [LH_P2 [LH_N] [LH_N]], _lh_unzip_arg1⁰)
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec filter_lh__d1 f_6 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_1_3, t_1_3) -> 
//│ 		      (if (f_6 h_1_3) then
//│ 		        (`LH_C(h_1_3, ((filter_lh__d1 f_6) t_1_3)))
//│ 		      else
//│ 		        ((filter_lh__d1 f_6) t_1_3))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec nub_lh__d1 _lh_nub_arg1_0 =
//│ 		  (match _lh_nub_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_nub_LH_C_0_0, _lh_nub_LH_C_1_0) -> 
//│ 		      (`LH_C(_lh_nub_LH_C_0_0, (nub_lh__d1 ((filter_lh__d1 (fun y_0 -> 
//│ 		        (not (_lh_nub_LH_C_0_0 = y_0)))) _lh_nub_LH_C_1_0)))));;
//│ 		let rec lookup_lh__d1 _lh_lookup_arg1_2 _lh_lookup_arg2_2 =
//│ 		  (match _lh_lookup_arg2_2 with
//│ 		    | `LH_N -> 
//│ 		      (`Nothing)
//│ 		    | `LH_C(_lh_lookup_LH_C_0_2, _lh_lookup_LH_C_1_2) -> 
//│ 		      (match _lh_lookup_LH_C_0_2 with
//│ 		        | `LH_P2(_lh_lookup_LH_P2_0_2, _lh_lookup_LH_P2_1_2) -> 
//│ 		          (if (_lh_lookup_arg1_2 = _lh_lookup_LH_P2_0_2) then
//│ 		            (`Just(_lh_lookup_LH_P2_1_2))
//│ 		          else
//│ 		            ((lookup_lh__d1 _lh_lookup_arg1_2) _lh_lookup_LH_C_1_2))));;
//│ 		let rec digitEnv_lh__d1 _lh_digitEnv_arg1_2 =
//│ 		  (match _lh_digitEnv_arg1_2 with
//│ 		    | `Digits(_lh_digitEnv_Digits_0_2, _lh_digitEnv_Digits_1_2) -> 
//│ 		      _lh_digitEnv_Digits_1_2);;
//│ 		let rec lookup_lh__d3 _lh_lookup_arg1_0 _lh_lookup_arg2_0 =
//│ 		  (match _lh_lookup_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`Nothing)
//│ 		    | `LH_C(_lh_lookup_LH_C_0_0, _lh_lookup_LH_C_1_0) -> 
//│ 		      (match _lh_lookup_LH_C_0_0 with
//│ 		        | `LH_P2(_lh_lookup_LH_P2_0_0, _lh_lookup_LH_P2_1_0) -> 
//│ 		          (if (_lh_lookup_arg1_0 = _lh_lookup_LH_P2_0_0) then
//│ 		            (`Just(_lh_lookup_LH_P2_1_0))
//│ 		          else
//│ 		            ((lookup_lh__d3 _lh_lookup_arg1_0) _lh_lookup_LH_C_1_0))));;
//│ 		let rec digits_lh__d1 _lh_digits_arg1_0 =
//│ 		  (match _lh_digits_arg1_0 with
//│ 		    | `Digits(_lh_digits_Digits_0_0, _lh_digits_Digits_1_0) -> 
//│ 		      _lh_digits_Digits_0_0);;
//│ 		let rec runStateT_lh__d9 _lh_runStateT_arg1_0 =
//│ 		  (match _lh_runStateT_arg1_0 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_0) -> 
//│ 		      _lh_runStateT_StateT_0_0);;
//│ 		let rec mappend_lh__d6 xs_2 ys_0 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(h_1_2, t_1_2) -> 
//│ 		      (`LH_C(h_1_2, ((mappend_lh__d6 t_1_2) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec concat_lh__d7 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      ((mappend_lh__d6 h_1) (concat_lh__d7 t_1))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d7 f_1 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C((f_1 h_2), ((map_lh__d7 f_1) t_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec bind_lh__d7 _lh_bind_arg1_0 _lh_bind_arg2_0 =
//│ 		  (`StateT((fun s_2 -> 
//│ 		    (concat_lh__d7 ((map_lh__d7 (fun as_0 -> 
//│ 		      (let rec _lh_matchIdent_1 = as_0 in
//│ 		        (match _lh_matchIdent_1 with
//│ 		          | `LH_P2(_lh_bind_LH_P2_0_0, _lh_bind_LH_P2_1_0) -> 
//│ 		            ((runStateT_lh__d9 (_lh_bind_arg2_0 _lh_bind_LH_P2_0_0)) _lh_bind_LH_P2_1_0))))) ((runStateT_lh__d9 _lh_bind_arg1_0) s_2))))));;
//│ 		let rec lift_lh__d1 _lh_lift_arg1_0 =
//│ 		  (`StateT((fun s_0 -> 
//│ 		    (concat_lh__d7 ((map_lh__d7 (fun x_0 -> 
//│ 		      (`LH_C((`LH_P2(x_0, s_0)), (`LH_N))))) _lh_lift_arg1_0)))));;
//│ 		let rec delete_lh__d1 _lh_delete_arg1_0 _lh_delete_arg2_0 =
//│ 		  (match _lh_delete_arg1_0 with
//│ 		    | `LH_C(_lh_delete_LH_C_0_0, _lh_delete_LH_C_1_0) -> 
//│ 		      (if (_lh_delete_LH_C_0_0 = _lh_delete_arg2_0) then
//│ 		        ((delete_lh__d1 _lh_delete_LH_C_1_0) _lh_delete_arg2_0)
//│ 		      else
//│ 		        (`LH_C(_lh_delete_LH_C_0_0, ((delete_lh__d1 _lh_delete_LH_C_1_0) _lh_delete_arg2_0))))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec foldl_lh__d1 f_9 i_1 ls_1_4 =
//│ 		  (match ls_1_4 with
//│ 		    | `LH_C(h_2_4, t_2_4) -> 
//│ 		      (((foldl_lh__d1 f_9) ((f_9 i_1) h_2_4)) t_2_4)
//│ 		    | `LH_N -> 
//│ 		      i_1);;
//│ 		let rec listDiff_lh__d1 =
//│ 		  (foldl_lh__d1 delete_lh__d1);;
//│ 		let rec digitEnv_lh__d3 _lh_digitEnv_arg1_0 =
//│ 		  (match _lh_digitEnv_arg1_0 with
//│ 		    | `Digits(_lh_digitEnv_Digits_0_0, _lh_digitEnv_Digits_1_0) -> 
//│ 		      _lh_digitEnv_Digits_1_0);;
//│ 		let rec return_lh__d6 _lh_return_arg1_0 =
//│ 		  (`StateT((fun s_4 -> 
//│ 		    (`LH_C((`LH_P2(_lh_return_arg1_0, s_4)), (`LH_N))))));;
//│ 		let rec put_lh__d1 _lh_put_arg1_0 =
//│ 		  (`StateT((fun s_1 -> 
//│ 		    (`LH_C((`LH_P2((`Unit), _lh_put_arg1_0)), (`LH_N))))));;
//│ 		let rec get_lh__d1 =
//│ 		  (`StateT((fun s_6 -> 
//│ 		    (`LH_C((`LH_P2(s_6, s_6)), (`LH_N))))));;
//│ 		let rec permute_lh__d2 _lh_permute_arg1_0 =
//│ 		  ((bind_lh__d7 get_lh__d1) (fun st_0 -> 
//│ 		    ((bind_lh__d7 (let rec xs_0 = (digits_lh__d1 st_0) in
//│ 		      (lift_lh__d1 (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		        (match _lh_listcomp_fun_para_0 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		            (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_0, ((listDiff_lh__d1 xs_0) (`LH_C(_lh_listcomp_fun_ls_h_0, (`LH_N)))))), (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_0 xs_0))))) (fun iis_0 -> 
//│ 		      (let rec _lh_matchIdent_0 = iis_0 in
//│ 		        (match _lh_matchIdent_0 with
//│ 		          | `LH_P2(_lh_permute_LH_P2_0_0, _lh_permute_LH_P2_1_0) -> 
//│ 		            ((bind_lh__d7 (put_lh__d1 (`Digits(_lh_permute_LH_P2_1_0, (`LH_C((`LH_P2(_lh_permute_arg1_0, _lh_permute_LH_P2_0_0)), (digitEnv_lh__d3 st_0))))))) (fun _p_0 -> 
//│ 		              (return_lh__d6 _lh_permute_LH_P2_0_0)))))))));;
//│ 		let rec select_lh__d2 _lh_select_arg1_0 =
//│ 		  ((bind_lh__d7 get_lh__d1) (fun st_2 -> 
//│ 		    (let rec _lh_matchIdent_7 = ((lookup_lh__d3 _lh_select_arg1_0) (digitEnv_lh__d3 st_2)) in
//│ 		      (match _lh_matchIdent_7 with
//│ 		        | `Just(_lh_select_Just_0_0) -> 
//│ 		          (return_lh__d6 _lh_select_Just_0_0)
//│ 		        | `Nothing -> 
//│ 		          (permute_lh__d2 _lh_select_arg1_0)))));;
//│ 		let rec lookup_lh__d2 _lh_lookup_arg1_1 _lh_lookup_arg2_1 =
//│ 		  (match _lh_lookup_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      (`Nothing)
//│ 		    | `LH_C(_lh_lookup_LH_C_0_1, _lh_lookup_LH_C_1_1) -> 
//│ 		      (match _lh_lookup_LH_C_0_1 with
//│ 		        | `LH_P2(_lh_lookup_LH_P2_0_1, _lh_lookup_LH_P2_1_1) -> 
//│ 		          (if (_lh_lookup_arg1_1 = _lh_lookup_LH_P2_0_1) then
//│ 		            (`Just(_lh_lookup_LH_P2_1_1))
//│ 		          else
//│ 		            ((lookup_lh__d2 _lh_lookup_arg1_1) _lh_lookup_LH_C_1_1))));;
//│ 		let rec permute_lh__d1 _lh_permute_arg1_1 =
//│ 		  ((bind_lh__d7 get_lh__d1) (fun st_1 -> 
//│ 		    ((bind_lh__d7 (let rec xs_1 = (digits_lh__d1 st_1) in
//│ 		      (lift_lh__d1 (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		        (match _lh_listcomp_fun_para_1 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		            (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_1, ((listDiff_lh__d1 xs_1) (`LH_C(_lh_listcomp_fun_ls_h_1, (`LH_N)))))), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_1 xs_1))))) (fun iis_1 -> 
//│ 		      (let rec _lh_matchIdent_3 = iis_1 in
//│ 		        (match _lh_matchIdent_3 with
//│ 		          | `LH_P2(_lh_permute_LH_P2_0_1, _lh_permute_LH_P2_1_1) -> 
//│ 		            ((bind_lh__d7 (put_lh__d1 (`Digits(_lh_permute_LH_P2_1_1, (`LH_C((`LH_P2(_lh_permute_arg1_1, _lh_permute_LH_P2_0_1)), (digitEnv_lh__d3 st_1))))))) (fun _p_1 -> 
//│ 		              (return_lh__d6 _lh_permute_LH_P2_0_1)))))))));;
//│ 		let rec return_lh__d4 _lh_return_arg1_2 =
//│ 		  (`StateT((fun s_8 -> 
//│ 		    (`LH_C((`LH_P2(_lh_return_arg1_2, s_8)), (`LH_N))))));;
//│ 		let rec bind_lh__d5 _lh_bind_arg1_2 _lh_bind_arg2_2 =
//│ 		  (`StateT((fun s_7 -> 
//│ 		    (concat_lh__d7 ((map_lh__d7 (fun as_2 -> 
//│ 		      (let rec _lh_matchIdent_4 = as_2 in
//│ 		        (match _lh_matchIdent_4 with
//│ 		          | `LH_P2(_lh_bind_LH_P2_0_2, _lh_bind_LH_P2_1_2) -> 
//│ 		            ((runStateT_lh__d9 (_lh_bind_arg2_2 _lh_bind_LH_P2_0_2)) _lh_bind_LH_P2_1_2))))) ((runStateT_lh__d9 _lh_bind_arg1_2) s_7))))));;
//│ 		let rec select_lh__d1 _lh_select_arg1_1 =
//│ 		  ((bind_lh__d5 get_lh__d1) (fun st_3 -> 
//│ 		    (let rec _lh_matchIdent_9 = ((lookup_lh__d2 _lh_select_arg1_1) (digitEnv_lh__d3 st_3)) in
//│ 		      (match _lh_matchIdent_9 with
//│ 		        | `Just(_lh_select_Just_0_1) -> 
//│ 		          (return_lh__d4 _lh_select_Just_0_1)
//│ 		        | `Nothing -> 
//│ 		          (permute_lh__d1 _lh_select_arg1_1)))));;
//│ 		let rec guard_lh__d1 _lh_guard_arg1_0 =
//│ 		  (match _lh_guard_arg1_0 with
//│ 		    | true -> 
//│ 		      (`StateT((fun s_9 -> 
//│ 		        (`LH_C((`LH_P2((`Unit), s_9)), (`LH_N))))))
//│ 		    | false -> 
//│ 		      (`StateT((fun s_1_0 -> 
//│ 		        (`LH_N)))));;
//│ 		let rec runStateT_lh__d6 _lh_runStateT_arg1_3 =
//│ 		  (match _lh_runStateT_arg1_3 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_3) -> 
//│ 		      _lh_runStateT_StateT_0_3);;
//│ 		let rec runStateT_lh__d7 _lh_runStateT_arg1_2 =
//│ 		  (match _lh_runStateT_arg1_2 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_2) -> 
//│ 		      _lh_runStateT_StateT_0_2);;
//│ 		let rec map_lh__d6 f_2 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      (`LH_C((f_2 h_4), ((map_lh__d6 f_2) t_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec concat_lh__d6 lss_1 =
//│ 		  (match lss_1 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      ((mappend_lh__d6 h_3) (concat_lh__d6 t_3))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec bind_lh__d3 _lh_bind_arg1_4 _lh_bind_arg2_4 =
//│ 		  (`StateT((fun s_1_5 -> 
//│ 		    (concat_lh__d6 ((map_lh__d6 (fun as_4 -> 
//│ 		      (let rec _lh_matchIdent_1_0 = as_4 in
//│ 		        (match _lh_matchIdent_1_0 with
//│ 		          | `LH_P2(_lh_bind_LH_P2_0_4, _lh_bind_LH_P2_1_4) -> 
//│ 		            ((runStateT_lh__d6 (_lh_bind_arg2_4 _lh_bind_LH_P2_0_4)) _lh_bind_LH_P2_1_4))))) ((runStateT_lh__d7 _lh_bind_arg1_4) s_1_5))))));;
//│ 		let rec rest_lh__d1 _lh_rest_arg1_0 =
//│ 		  (match _lh_rest_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_rest_LH_C_0_0, _lh_rest_LH_C_1_0) -> 
//│ 		      _lh_rest_LH_C_1_0);;
//│ 		let rec runStateT_lh__d2 _lh_runStateT_arg1_7 =
//│ 		  (match _lh_runStateT_arg1_7 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_7) -> 
//│ 		      _lh_runStateT_StateT_0_7);;
//│ 		let rec map_lh__d4 f_4 ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      (`LH_C((f_4 h_8), ((map_lh__d4 f_4) t_8)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec concat_lh__d4 lss_3 =
//│ 		  (match lss_3 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      ((mappend_lh__d6 h_7) (concat_lh__d4 t_7))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec runStateT_lh__d3 _lh_runStateT_arg1_6 =
//│ 		  (match _lh_runStateT_arg1_6 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_6) -> 
//│ 		      _lh_runStateT_StateT_0_6);;
//│ 		let rec bind_lh__d1 _lh_bind_arg1_6 _lh_bind_arg2_6 =
//│ 		  (`StateT((fun s_1_7 -> 
//│ 		    (concat_lh__d4 ((map_lh__d4 (fun as_6 -> 
//│ 		      (let rec _lh_matchIdent_1_2 = as_6 in
//│ 		        (match _lh_matchIdent_1_2 with
//│ 		          | `LH_P2(_lh_bind_LH_P2_0_6, _lh_bind_LH_P2_1_6) -> 
//│ 		            ((runStateT_lh__d2 (_lh_bind_arg2_6 _lh_bind_LH_P2_0_6)) _lh_bind_LH_P2_1_6))))) ((runStateT_lh__d3 _lh_bind_arg1_6) s_1_7))))));;
//│ 		let rec return_lh__d3 _lh_return_arg1_3 =
//│ 		  (`StateT((fun s_1_1 -> 
//│ 		    (`LH_C((`LH_P2(_lh_return_arg1_3, s_1_1)), (`LH_N))))));;
//│ 		let rec return_lh__d2 _lh_return_arg1_4 =
//│ 		  (`StateT((fun s_1_3 -> 
//│ 		    (`LH_C((`LH_P2(_lh_return_arg1_4, s_1_3)), (`LH_N))))));;
//│ 		let rec runStateT_lh__d8 _lh_runStateT_arg1_1 =
//│ 		  (match _lh_runStateT_arg1_1 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_1) -> 
//│ 		      _lh_runStateT_StateT_0_1);;
//│ 		let rec bind_lh__d4 _lh_bind_arg1_3 _lh_bind_arg2_3 =
//│ 		  (`StateT((fun s_1_2 -> 
//│ 		    (concat_lh__d7 ((map_lh__d7 (fun as_3 -> 
//│ 		      (let rec _lh_matchIdent_8 = as_3 in
//│ 		        (match _lh_matchIdent_8 with
//│ 		          | `LH_P2(_lh_bind_LH_P2_0_3, _lh_bind_LH_P2_1_3) -> 
//│ 		            ((runStateT_lh__d8 (_lh_bind_arg2_3 _lh_bind_LH_P2_0_3)) _lh_bind_LH_P2_1_3))))) ((runStateT_lh__d9 _lh_bind_arg1_3) s_1_2))))));;
//│ 		let rec return_lh__d1 _lh_return_arg1_5 =
//│ 		  (`StateT((fun s_1_4 -> 
//│ 		    (`LH_C((`LH_P2(_lh_return_arg1_5, s_1_4)), (`LH_N))))));;
//│ 		let rec return_lh__d5 _lh_return_arg1_1 =
//│ 		  (`StateT((fun s_5 -> 
//│ 		    (`LH_C((`LH_P2(_lh_return_arg1_1, s_5)), (`LH_N))))));;
//│ 		let rec foldr_lh__d1 f_0 i_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      ((f_0 h_0) (((foldr_lh__d1 f_0) i_0) t_0))
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec bind_lh__d6 _lh_bind_arg1_1 _lh_bind_arg2_1 =
//│ 		  (`StateT((fun s_3 -> 
//│ 		    (concat_lh__d7 ((map_lh__d7 (fun as_1 -> 
//│ 		      (let rec _lh_matchIdent_2 = as_1 in
//│ 		        (match _lh_matchIdent_2 with
//│ 		          | `LH_P2(_lh_bind_LH_P2_0_1, _lh_bind_LH_P2_1_1) -> 
//│ 		            ((runStateT_lh__d9 (_lh_bind_arg2_1 _lh_bind_LH_P2_0_1)) _lh_bind_LH_P2_1_1))))) ((runStateT_lh__d9 _lh_bind_arg1_1) s_3))))));;
//│ 		let rec mapM_lh__d1 _lh_mapM_arg1_0 _lh_mapM_arg2_0 =
//│ 		  (((foldr_lh__d1 (fun a_1 r_0 -> 
//│ 		    ((bind_lh__d7 (_lh_mapM_arg1_0 a_1)) (fun x_1 -> 
//│ 		      ((bind_lh__d6 r_0) (fun xs_4 -> 
//│ 		        (return_lh__d5 (`LH_C(x_1, xs_4))))))))) (return_lh__d6 (`LH_N))) _lh_mapM_arg2_0);;
//│ 		let rec sumAux_lh__d1 ls_1_0 a_2 =
//│ 		  (match ls_1_0 with
//│ 		    | `LH_N -> 
//│ 		      a_2
//│ 		    | `LH_C(h_1_7, t_1_7) -> 
//│ 		      ((sumAux_lh__d1 t_1_7) (a_2 + h_1_7)));;
//│ 		let rec sum_lh__d2 ls_9 =
//│ 		  ((sumAux_lh__d1 ls_9) 0);;
//│ 		let rec concat_lh__d5 lss_2 =
//│ 		  (match lss_2 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      ((mappend_lh__d6 h_5) (concat_lh__d5 t_5))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec runStateT_lh__d4 _lh_runStateT_arg1_5 =
//│ 		  (match _lh_runStateT_arg1_5 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_5) -> 
//│ 		      _lh_runStateT_StateT_0_5);;
//│ 		let rec runStateT_lh__d5 _lh_runStateT_arg1_4 =
//│ 		  (match _lh_runStateT_arg1_4 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_4) -> 
//│ 		      _lh_runStateT_StateT_0_4);;
//│ 		let rec map_lh__d5 f_3 ls_3 =
//│ 		  (match ls_3 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      (`LH_C((f_3 h_6), ((map_lh__d5 f_3) t_6)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec bind_lh__d2 _lh_bind_arg1_5 _lh_bind_arg2_5 =
//│ 		  (`StateT((fun s_1_6 -> 
//│ 		    (concat_lh__d5 ((map_lh__d5 (fun as_5 -> 
//│ 		      (let rec _lh_matchIdent_1_1 = as_5 in
//│ 		        (match _lh_matchIdent_1_1 with
//│ 		          | `LH_P2(_lh_bind_LH_P2_0_5, _lh_bind_LH_P2_1_5) -> 
//│ 		            ((runStateT_lh__d4 (_lh_bind_arg2_5 _lh_bind_LH_P2_0_5)) _lh_bind_LH_P2_1_5))))) ((runStateT_lh__d5 _lh_bind_arg1_5) s_1_6))))));;
//│ 		let rec solve_lh__d1 _lh_solve_arg1_0 _lh_solve_arg2_0 _lh_solve_arg3_0 =
//│ 		  (match _lh_solve_arg2_0 with
//│ 		    | `LH_C(_lh_solve_LH_C_0_0, _lh_solve_LH_C_1_0) -> 
//│ 		      ((bind_lh__d2 (let rec _lh_matchIdent_1_5 = _lh_solve_arg1_0 in
//│ 		        (match _lh_matchIdent_1_5 with
//│ 		          | `LH_N -> 
//│ 		            (return_lh__d2 _lh_solve_arg3_0)
//│ 		          | `LH_C(_lh_solve_LH_C_0_1, _lh_solve_LH_C_1_1) -> 
//│ 		            ((bind_lh__d3 ((mapM_lh__d1 select_lh__d2) _lh_solve_LH_C_0_1)) (fun topNS_0 -> 
//│ 		              (return_lh__d1 ((sum_lh__d2 topNS_0) + _lh_solve_arg3_0))))))) (fun topN_0 -> 
//│ 		        ((bind_lh__d1 (select_lh__d1 _lh_solve_LH_C_0_0)) (fun botN_0 -> 
//│ 		          ((bind_lh__d4 (guard_lh__d1 ((topN_0 mod 10) = botN_0))) (fun _s_0 -> 
//│ 		            (((solve_lh__d1 (rest_lh__d1 _lh_solve_arg1_0)) _lh_solve_LH_C_1_0) (topN_0 / 10))))))))
//│ 		    | _ -> 
//│ 		      (match _lh_solve_arg1_0 with
//│ 		        | `LH_N -> 
//│ 		          (match _lh_solve_arg2_0 with
//│ 		            | `LH_N -> 
//│ 		              (match _lh_solve_arg3_0 with
//│ 		                | 0 -> 
//│ 		                  (return_lh__d3 (`Unit))
//│ 		                | _ -> 
//│ 		                  (`StateT((fun _p_2 -> 
//│ 		                    (`LH_N)))))
//│ 		            | _ -> 
//│ 		              (`StateT((fun _p_3 -> 
//│ 		                (`LH_N)))))
//│ 		        | _ -> 
//│ 		          (`StateT((fun _p_4 -> 
//│ 		            (`LH_N))))));;
//│ 		let rec mappend_lh__d2 xs_7 ys_4 =
//│ 		  (match xs_7 with
//│ 		    | `LH_C(h_2_3, t_2_3) -> 
//│ 		      (`LH_C(h_2_3, ((mappend_lh__d2 t_2_3) ys_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_4);;
//│ 		let rec sum_lh__d1 ls_1_6 =
//│ 		  ((sumAux_lh__d1 ls_1_6) 0);;
//│ 		let rec mappend_lh__d4 xs_5 ys_2 =
//│ 		  (match xs_5 with
//│ 		    | `LH_C(h_1_9, t_1_9) -> 
//│ 		      (`LH_C(h_1_9, ((mappend_lh__d4 t_1_9) ys_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2);;
//│ 		let rec map_lh__d1 f_8 ls_1_3 =
//│ 		  (match ls_1_3 with
//│ 		    | `LH_C(h_2_0, t_2_0) -> 
//│ 		      (`LH_C((f_8 h_2_0), ((map_lh__d1 f_8) t_2_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec enumFromTo_lh__d1 a_4 b_0 =
//│ 		  (if (a_4 <= b_0) then
//│ 		    (`LH_C(a_4, ((enumFromTo_lh__d1 (a_4 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec digitEnv_lh__d2 _lh_digitEnv_arg1_1 =
//│ 		  (match _lh_digitEnv_arg1_1 with
//│ 		    | `Digits(_lh_digitEnv_Digits_0_1, _lh_digitEnv_Digits_1_1) -> 
//│ 		      _lh_digitEnv_Digits_1_1);;
//│ 		let rec concat_lh__d3 lss_4 =
//│ 		  (match lss_4 with
//│ 		    | `LH_C(h_1_1, t_1_1) -> 
//│ 		      ((mappend_lh__d6 h_1_1) (concat_lh__d3 t_1_1))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d3 f_5 ls_6 =
//│ 		  (match ls_6 with
//│ 		    | `LH_C(h_1_0, t_1_0) -> 
//│ 		      (`LH_C((f_5 h_1_0), ((map_lh__d3 f_5) t_1_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec runStateT_lh__d1 _lh_runStateT_arg1_8 =
//│ 		  (match _lh_runStateT_arg1_8 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_8) -> 
//│ 		      _lh_runStateT_StateT_0_8);;
//│ 		let rec execStateT_lh__d1 _lh_execStateT_arg1_0 _lh_execStateT_arg2_0 =
//│ 		  (concat_lh__d3 ((map_lh__d3 (fun x_2 -> 
//│ 		    (let rec _lh_matchIdent_1_3 = x_2 in
//│ 		      (match _lh_matchIdent_1_3 with
//│ 		        | `LH_P2(_lh_execStateT_LH_P2_0_0, _lh_execStateT_LH_P2_1_0) -> 
//│ 		          (`LH_C(_lh_execStateT_LH_P2_1_0, (`LH_N))))))) ((runStateT_lh__d1 _lh_execStateT_arg1_0) _lh_execStateT_arg2_0)));;
//│ 		let rec length_lh__d1 ls_1_5 =
//│ 		  (match ls_1_5 with
//│ 		    | `LH_C(h_2_5, t_2_5) -> 
//│ 		      (1 + (length_lh__d1 t_2_5))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec unzip_lh__d1 _lh_unzip_arg1_0 =
//│ 		  (((foldr_lh__d1 (fun ab_0 asbs_0 -> 
//│ 		    (let rec _lh_matchIdent_5 = ab_0 in
//│ 		      (match _lh_matchIdent_5 with
//│ 		        | `LH_P2(_lh_unzip_LH_P2_0_0, _lh_unzip_LH_P2_1_0) -> 
//│ 		          (let rec _lh_matchIdent_6 = asbs_0 in
//│ 		            (match _lh_matchIdent_6 with
//│ 		              | `LH_P2(_lh_unzip_LH_P2_0_1, _lh_unzip_LH_P2_1_1) -> 
//│ 		                (`LH_P2((`LH_C(_lh_unzip_LH_P2_0_0, _lh_unzip_LH_P2_0_1)), (`LH_C(_lh_unzip_LH_P2_1_0, _lh_unzip_LH_P2_1_1)))))))))) (`LH_P2((`LH_N), (`LH_N)))) _lh_unzip_arg1_0);;
//│ 		let rec combine_lh__d1 _lh_combine_arg1_0 _lh_combine_arg2_0 _lh_combine_arg3_0 _lh_combine_arg4_0 =
//│ 		  (`LH_C((`LH_C(_lh_combine_arg1_0, _lh_combine_arg2_0)), (transpose_lh__d1 (`LH_C(_lh_combine_arg3_0, _lh_combine_arg4_0)))))
//│ 		and
//│ 		transpose_lh__d1 _lh_transpose_arg1_0 =
//│ 		  (match _lh_transpose_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_transpose_LH_C_0_0, _lh_transpose_LH_C_1_0) -> 
//│ 		      (match _lh_transpose_LH_C_0_0 with
//│ 		        | `LH_N -> 
//│ 		          (transpose_lh__d1 _lh_transpose_LH_C_1_0)
//│ 		        | `LH_C(_lh_transpose_LH_C_0_1, _lh_transpose_LH_C_1_1) -> 
//│ 		          (let rec _lh_matchIdent_1_4 = (unzip_lh__d1 (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		            (match _lh_listcomp_fun_para_2 with
//│ 		              | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		                (match _lh_listcomp_fun_ls_h_2 with
//│ 		                  | `LH_C(_lh_transpose_LH_C_0_2, _lh_transpose_LH_C_1_2) -> 
//│ 		                    (`LH_C((`LH_P2(_lh_transpose_LH_C_0_2, _lh_transpose_LH_C_1_2)), (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2)))
//│ 		                  | _ -> 
//│ 		                    (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2))
//│ 		              | `LH_N -> 
//│ 		                (`LH_N))) in
//│ 		            (_lh_listcomp_fun_2 _lh_transpose_LH_C_1_0))) in
//│ 		            (match _lh_matchIdent_1_4 with
//│ 		              | `LH_P2(_lh_transpose_LH_P2_0_0, _lh_transpose_LH_P2_1_0) -> 
//│ 		                ((((combine_lh__d1 _lh_transpose_LH_C_0_1) _lh_transpose_LH_P2_0_0) _lh_transpose_LH_C_1_1) _lh_transpose_LH_P2_1_0)))));;
//│ 		let rec fromJust_lh__d1 _lh_fromJust_arg1_0 =
//│ 		  (match _lh_fromJust_arg1_0 with
//│ 		    | `Just(_lh_fromJust_Just_0_0) -> 
//│ 		      _lh_fromJust_Just_0_0);;
//│ 		let rec reverse_helper_lh__d2 ls_5 a_0 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_9, t_9) -> 
//│ 		      ((reverse_helper_lh__d2 t_9) (`LH_C(h_9, a_0)))
//│ 		    | `LH_N -> 
//│ 		      a_0);;
//│ 		let rec reverse_lh__d2 ls_1_2 =
//│ 		  ((reverse_helper_lh__d2 ls_1_2) (`LH_N));;
//│ 		let rec concat_lh__d2 lss_5 =
//│ 		  (match lss_5 with
//│ 		    | `LH_C(h_1_5, t_1_5) -> 
//│ 		      ((mappend_lh__d6 h_1_5) (concat_lh__d2 t_1_5))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d2 f_7 ls_8 =
//│ 		  (match ls_8 with
//│ 		    | `LH_C(h_1_4, t_1_4) -> 
//│ 		      (`LH_C((f_7 h_1_4), ((map_lh__d2 f_7) t_1_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh__d5 xs_3 ys_1 =
//│ 		  (match xs_3 with
//│ 		    | `LH_C(h_1_6, t_1_6) -> 
//│ 		      (`LH_C(h_1_6, ((mappend_lh__d5 t_1_6) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec unlines_lh__d1 _lh_unlines_arg1_0 =
//│ 		  (concat_lh__d2 ((map_lh__d2 (fun l_0 -> 
//│ 		    ((mappend_lh__d5 l_0) (`LH_C('n', (`LH_N)))))) _lh_unlines_arg1_0));;
//│ 		let rec mappend_lh__d3 xs_6 ys_3 =
//│ 		  (match xs_6 with
//│ 		    | `LH_C(h_2_1, t_2_1) -> 
//│ 		      (`LH_C(h_2_1, ((mappend_lh__d3 t_2_1) ys_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_3);;
//│ 		let rec concat_lh__d1 lss_6 =
//│ 		  (match lss_6 with
//│ 		    | `LH_C(h_2_2, t_2_2) -> 
//│ 		      ((mappend_lh__d6 h_2_2) (concat_lh__d1 t_2_2))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec reverse_helper_lh__d1 ls_1_1 a_3 =
//│ 		  (match ls_1_1 with
//│ 		    | `LH_C(h_1_8, t_1_8) -> 
//│ 		      ((reverse_helper_lh__d1 t_1_8) (`LH_C(h_1_8, a_3)))
//│ 		    | `LH_N -> 
//│ 		      a_3);;
//│ 		let rec reverse_lh__d1 ls_1_7 =
//│ 		  ((reverse_helper_lh__d1 ls_1_7) (`LH_N));;
//│ 		let rec puzzle_lh__d1 _lh_puzzle_arg1_0 _lh_puzzle_arg2_0 =
//│ 		  (let rec solution_0 = (((solve_lh__d1 (transpose_lh__d1 ((map_lh__d1 reverse_lh__d2) _lh_puzzle_arg1_0))) (reverse_lh__d1 _lh_puzzle_arg2_0)) 0) in
//│ 		    (let rec answer_0 = (let rec _lh_matchIdent_1_6 = ((execStateT_lh__d1 solution_0) (`Digits(((enumFromTo_lh__d1 0) 9), (`LH_N)))) in
//│ 		      (match _lh_matchIdent_1_6 with
//│ 		        | `LH_C(_lh_puzzle_LH_C_0_0, _lh_puzzle_LH_C_1_0) -> 
//│ 		          _lh_puzzle_LH_C_0_0
//│ 		        | `LH_N -> 
//│ 		          (failwith "lh_default_error"))) in
//│ 		      (let rec env_0 = (digitEnv_lh__d2 answer_0) in
//│ 		        (let rec look_0 = (fun c_0 -> 
//│ 		          (fromJust_lh__d1 ((lookup_lh__d1 c_0) env_0))) in
//│ 		          (let rec expand_0 = (fun ls_1_8 -> 
//│ 		            (((foldl_lh__d1 (fun a_5 b_1 -> 
//│ 		              ((a_5 * 10) + (look_0 b_1)))) 0) ls_1_8)) in
//│ 		            (let rec topVal_0 = (sum_lh__d1 (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		              (match _lh_listcomp_fun_para_3 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_3, _lh_listcomp_fun_ls_t_3) -> 
//│ 		                  (`LH_C((expand_0 _lh_listcomp_fun_ls_h_3), (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3)))
//│ 		                | `LH_N -> 
//│ 		                  (`LH_N))) in
//│ 		              (_lh_listcomp_fun_3 _lh_puzzle_arg1_0))) in
//│ 		              (let rec botVal_0 = (expand_0 _lh_puzzle_arg2_0) in
//│ 		                (if ((length_lh__d1 (nub_lh__d1 ((mappend_lh__d4 (concat_lh__d1 _lh_puzzle_arg1_0)) _lh_puzzle_arg2_0))) > 10) then
//│ 		                  (failwith "lh_default_error")
//│ 		                else
//│ 		                  (if (topVal_0 <> botVal_0) then
//│ 		                    (failwith "lh_default_error")
//│ 		                  else
//│ 		                    (unlines_lh__d1 (let rec _lh_listcomp_fun_4 = (fun _lh_listcomp_fun_para_4 -> 
//│ 		                      (match _lh_listcomp_fun_para_4 with
//│ 		                        | `LH_C(_lh_listcomp_fun_ls_h_4, _lh_listcomp_fun_ls_t_4) -> 
//│ 		                          (match _lh_listcomp_fun_ls_h_4 with
//│ 		                            | `LH_P2(_lh_puzzle_LH_P2_0_0, _lh_puzzle_LH_P2_1_0) -> 
//│ 		                              (`LH_C(((mappend_lh__d3 ((mappend_lh__d2 (`LH_C(_lh_puzzle_LH_P2_0_0, (`LH_N)))) (`LH_C(' ', (`LH_C('=', (`LH_C('>', (`LH_C(' ', (`LH_N))))))))))) (string_of_int _lh_puzzle_LH_P2_1_0)), (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4)))
//│ 		                            | _ -> 
//│ 		                              (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4))
//│ 		                        | `LH_N -> 
//│ 		                          (`LH_N))) in
//│ 		                      (_lh_listcomp_fun_4 (digitEnv_lh__d1 answer_0)))))))))))));;
//│ 		let rec mappend_lh__d1 xs_8 ys_5 =
//│ 		  (match xs_8 with
//│ 		    | `LH_C(h_2_6, t_2_6) -> 
//│ 		      (`LH_C(h_2_6, ((mappend_lh__d1 t_2_6) ys_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_5);;
//│ 		let rec testCryptarithm2_nofib_lh__d1 _lh_testCryptarithm2_nofib_arg1_0 =
//│ 		  (let rec args_0 = (`LH_C((`LH_C('T', (`LH_C('H', (`LH_C('I', (`LH_C('R', (`LH_C('T', (`LH_C('Y', (`LH_N))))))))))))), (`LH_C((`LH_C('T', (`LH_C('W', (`LH_C('E', (`LH_C('L', (`LH_C('V', (`LH_C('E', (`LH_N))))))))))))), (`LH_C((`LH_C('T', (`LH_C('W', (`LH_C('E', (`LH_C('L', (`LH_C('V', (`LH_C('E', (`LH_N))))))))))))), (`LH_C((`LH_C('T', (`LH_C('W', (`LH_C('E', (`LH_C('L', (`LH_C('V', (`LH_C('E', (`LH_N))))))))))))), (`LH_C((`LH_C('T', (`LH_C('W', (`LH_C('E', (`LH_C('L', (`LH_C('V', (`LH_C('E', (`LH_N))))))))))))), (`LH_C(((mappend_lh__d1 (`LH_C('T', (`LH_C('W', (`LH_C('E', (`LH_C('L', (`LH_C('V', (`LH_C('E', (`LH_N)))))))))))))) (if (_lh_testCryptarithm2_nofib_arg1_0 > 999999) then
//│ 		    (`LH_C('1', (`LH_N)))
//│ 		  else
//│ 		    (`LH_N))), (`LH_N))))))))))))) in
//│ 		    ((puzzle_lh__d1 args_0) (`LH_C('N', (`LH_C('I', (`LH_C('N', (`LH_C('E', (`LH_C('T', (`LH_C('Y', (`LH_N)))))))))))))));;
//│ 		(testCryptarithm2_nofib_lh__d1 1500)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< after expansion <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [Nothing]: 114 --->
//│ 	case _lh_matchIdent⁷ of {Just _lh_select_Just_0⁰ => return_lh_₆(_lh_select_Just_0⁰) | Nothing  => permute_lh_₂(_lh_select_arg1⁰)}: 660
//│ [Just _lh_lookup_LH_P2_1⁰]: 122 --->
//│ 	case _lh_matchIdent⁷ of {Just _lh_select_Just_0⁰ => return_lh_₆(_lh_select_Just_0⁰) | Nothing  => permute_lh_₂(_lh_select_arg1⁰)}: 660
//│ [LH_C f¹(h²) map_lh_₇(f¹, t²)]: 246 --->
//│ 	case lss⁰ of {LH_C h¹ t¹ => mappend_lh_₆(h¹, concat_lh_₇(t¹)) | LH_N  => [LH_N]}: 227
//│ [LH_N]: 247 --->
//│ 	case lss⁰ of {LH_C h¹ t¹ => mappend_lh_₆(h¹, concat_lh_₇(t¹)) | LH_N  => [LH_N]}: 227
//│ [StateT (fun s⁷ -> concat_lh_₇(map_lh_₇((fun as² -> let _lh_matchIdent⁴ = as²
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_bind_LH_P2_0² _lh_bind_LH_P2_1² => runStateT_lh_₉(_lh_bind_arg2²(_lh_bind_LH_P2_0²), _lh_bind_LH_P2_1²)}), runStateT_lh_₉(_lh_bind_arg1², s⁷))))]: 340 --->
//│ 	case _lh_runStateT_arg1⁶ of {StateT _lh_runStateT_StateT_0⁶ => _lh_runStateT_StateT_0⁶}: 454
//│ [Nothing]: 344 --->
//│ 	case _lh_matchIdent⁹ of {Just _lh_select_Just_0¹ => return_lh_₄(_lh_select_Just_0¹) | Nothing  => permute_lh_₁(_lh_select_arg1¹)}: 745
//│ [Just _lh_lookup_LH_P2_1¹]: 352 --->
//│ 	case _lh_matchIdent⁹ of {Just _lh_select_Just_0¹ => return_lh_₄(_lh_select_Just_0¹) | Nothing  => permute_lh_₁(_lh_select_arg1¹)}: 745
//│ [LH_C f²(h⁴) map_lh_₆(f², t⁴)]: 403 --->
//│ 	case lss¹ of {LH_C h³ t³ => mappend_lh_₆(h³, concat_lh_₆(t³)) | LH_N  => [LH_N]}: 384
//│ [LH_N]: 404 --->
//│ 	case lss¹ of {LH_C h³ t³ => mappend_lh_₆(h³, concat_lh_₆(t³)) | LH_N  => [LH_N]}: 384
//│ [LH_C f³(h⁶) map_lh_₅(f³, t⁶)]: 436 --->
//│ 	case lss² of {LH_C h⁵ t⁵ => mappend_lh_₆(h⁵, concat_lh_₅(t⁵)) | LH_N  => [LH_N]}: 417
//│ [LH_N]: 437 --->
//│ 	case lss² of {LH_C h⁵ t⁵ => mappend_lh_₆(h⁵, concat_lh_₅(t⁵)) | LH_N  => [LH_N]}: 417
//│ [LH_C f⁴(h⁸) map_lh_₄(f⁴, t⁸)]: 469 --->
//│ 	case lss³ of {LH_C h⁷ t⁷ => mappend_lh_₆(h⁷, concat_lh_₄(t⁷)) | LH_N  => [LH_N]}: 450
//│ [LH_N]: 470 --->
//│ 	case lss³ of {LH_C h⁷ t⁷ => mappend_lh_₆(h⁷, concat_lh_₄(t⁷)) | LH_N  => [LH_N]}: 450
//│ [LH_C f⁵(h¹⁰) map_lh_₃(f⁵, t¹⁰)]: 495 --->
//│ 	case lss⁴ of {LH_C h¹¹ t¹¹ => mappend_lh_₆(h¹¹, concat_lh_₃(t¹¹)) | LH_N  => [LH_N]}: 509
//│ [LH_N]: 496 --->
//│ 	case lss⁴ of {LH_C h¹¹ t¹¹ => mappend_lh_₆(h¹¹, concat_lh_₃(t¹¹)) | LH_N  => [LH_N]}: 509
//│ [LH_C f⁷(h¹⁴) map_lh_₂(f⁷, t¹⁴)]: 596 --->
//│ 	case lss⁵ of {LH_C h¹⁵ t¹⁵ => mappend_lh_₆(h¹⁵, concat_lh_₂(t¹⁵)) | LH_N  => [LH_N]}: 610
//│ [LH_N]: 597 --->
//│ 	case lss⁵ of {LH_C h¹⁵ t¹⁵ => mappend_lh_₆(h¹⁵, concat_lh_₂(t¹⁵)) | LH_N  => [LH_N]}: 610
//│ [StateT (fun s¹² -> concat_lh_₇(map_lh_₇((fun as³ -> let _lh_matchIdent⁸ = as³
//│ in case _lh_matchIdent⁸ of {LH_P2 _lh_bind_LH_P2_0³ _lh_bind_LH_P2_1³ => runStateT_lh_₈(_lh_bind_arg2³(_lh_bind_LH_P2_0³), _lh_bind_LH_P2_1³)}), runStateT_lh_₉(_lh_bind_arg1³, s¹²))))]: 725 --->
//│ 	case _lh_runStateT_arg1⁷ of {StateT _lh_runStateT_StateT_0⁷ => _lh_runStateT_StateT_0⁷}: 458
//│ [StateT (fun s¹³ -> [LH_C [LH_P2 _lh_return_arg1⁴ s¹³] [LH_N]])]: 756 --->
//│ 	case _lh_runStateT_arg1⁴ of {StateT _lh_runStateT_StateT_0⁴ => _lh_runStateT_StateT_0⁴}: 421
//│ [StateT (fun s¹⁴ -> [LH_C [LH_P2 _lh_return_arg1⁵ s¹⁴] [LH_N]])]: 769 --->
//│ 	case _lh_runStateT_arg1³ of {StateT _lh_runStateT_StateT_0³ => _lh_runStateT_StateT_0³}: 392
//│ [StateT (fun s¹⁵ -> concat_lh_₆(map_lh_₆((fun as⁴ -> let _lh_matchIdent¹⁰ = as⁴
//│ in case _lh_matchIdent¹⁰ of {LH_P2 _lh_bind_LH_P2_0⁴ _lh_bind_LH_P2_1⁴ => runStateT_lh_₆(_lh_bind_arg2⁴(_lh_bind_LH_P2_0⁴), _lh_bind_LH_P2_1⁴)}), runStateT_lh_₇(_lh_bind_arg1⁴, s¹⁵))))]: 794 --->
//│ 	case _lh_runStateT_arg1⁴ of {StateT _lh_runStateT_StateT_0⁴ => _lh_runStateT_StateT_0⁴}: 421
//│ [StateT (fun s¹⁷ -> concat_lh_₄(map_lh_₄((fun as⁶ -> let _lh_matchIdent¹² = as⁶
//│ in case _lh_matchIdent¹² of {LH_P2 _lh_bind_LH_P2_0⁶ _lh_bind_LH_P2_1⁶ => runStateT_lh_₂(_lh_bind_arg2⁶(_lh_bind_LH_P2_0⁶), _lh_bind_LH_P2_1⁶)}), runStateT_lh_₃(_lh_bind_arg1⁶, s¹⁷))))]: 846 --->
//│ 	case _lh_runStateT_arg1⁵ of {StateT _lh_runStateT_StateT_0⁵ => _lh_runStateT_StateT_0⁵}: 425
//│ [Just _lh_lookup_LH_P2_1²]: 1026 --->
//│ 	case _lh_fromJust_arg1⁰ of {Just _lh_fromJust_Just_0⁰ => _lh_fromJust_Just_0⁰}: 972
//│ [LH_C h²³ mappend_lh_₂(t²³, ys⁴)]: 1048 --->
//│ 	case xs⁶ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₃(t²¹, ys³)] | LH_N  => ys³}: 956
//│ [LH_N]: 1054 --->
//│ 	case ls¹⁵ of {LH_C h²⁵ t²⁵ => (1 + length_lh_₁(t²⁵)) | LH_N  => 0}: 1118
//│ [LH_C _lh_nub_LH_C_0⁰ nub_lh_₁(filter_lh_₁((fun y⁰ -> not⁰(polyEq⁰(_lh_nub_LH_C_0⁰, y⁰))), _lh_nub_LH_C_1⁰))]: 1070 --->
//│ 	case ls¹⁵ of {LH_C h²⁵ t²⁵ => (1 + length_lh_₁(t²⁵)) | LH_N  => 0}: 1118
//│ [LH_N]: 1329 --->
//│ 	case xs⁷ of {LH_C h²³ t²³ => [LH_C h²³ mappend_lh_₂(t²³, ys⁴)] | LH_N  => ys⁴}: 1050
//│ [LH_C _lh_puzzle_LH_P2_0⁰ [LH_N]]: 1330 --->
//│ 	case xs⁷ of {LH_C h²³ t²³ => [LH_C h²³ mappend_lh_₂(t²³, ys⁴)] | LH_N  => ys⁴}: 1050
//│ [LH_N]: 1336 --->
//│ 	case xs⁶ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₃(t²¹, ys³)] | LH_N  => ys³}: 956
//│ [LH_C ' ' [LH_N]]: 1337 --->
//│ 	case xs⁶ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₃(t²¹, ys³)] | LH_N  => ys³}: 956
//│ [LH_C '>' [LH_C ' ' [LH_N]]]: 1338 --->
//│ 	case xs⁶ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₃(t²¹, ys³)] | LH_N  => ys³}: 956
//│ [LH_C '=' [LH_C '>' [LH_C ' ' [LH_N]]]]: 1339 --->
//│ 	case xs⁶ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₃(t²¹, ys³)] | LH_N  => ys³}: 956
//│ [LH_C ' ' [LH_C '=' [LH_C '>' [LH_C ' ' [LH_N]]]]]: 1340 --->
//│ 	case xs⁶ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₃(t²¹, ys³)] | LH_N  => ys³}: 956
//│ [LH_C mappend_lh_₃(mappend_lh_₂([LH_C _lh_puzzle_LH_P2_0⁰ [LH_N]], [LH_C ' ' [LH_C '=' [LH_C '>' [LH_C ' ' [LH_N]]]]]), string_of_int⁰(_lh_puzzle_LH_P2_1⁰)) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 1350 --->
//│ 	case ls⁸ of {LH_C h¹⁴ t¹⁴ => [LH_C f⁷(h¹⁴) map_lh_₂(f⁷, t¹⁴)] | LH_N  => [LH_N]}: 598
//│ [LH_N]: 1355 --->
//│ 	case ls⁸ of {LH_C h¹⁴ t¹⁴ => [LH_C f⁷(h¹⁴) map_lh_₂(f⁷, t¹⁴)] | LH_N  => [LH_N]}: 598
//│ [LH_N]: 1460 --->
//│ 	case xs⁸ of {LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₁(t²⁶, ys⁵)] | LH_N  => ys⁵}: 1385
//│ [LH_C 'E' [LH_N]]: 1461 --->
//│ 	case xs⁸ of {LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₁(t²⁶, ys⁵)] | LH_N  => ys⁵}: 1385
//│ [LH_C 'V' [LH_C 'E' [LH_N]]]: 1462 --->
//│ 	case xs⁸ of {LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₁(t²⁶, ys⁵)] | LH_N  => ys⁵}: 1385
//│ [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]: 1463 --->
//│ 	case xs⁸ of {LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₁(t²⁶, ys⁵)] | LH_N  => ys⁵}: 1385
//│ [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]: 1464 --->
//│ 	case xs⁸ of {LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₁(t²⁶, ys⁵)] | LH_N  => ys⁵}: 1385
//│ [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]: 1465 --->
//│ 	case xs⁸ of {LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₁(t²⁶, ys⁵)] | LH_N  => ys⁵}: 1385
//│ [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]]: 1466 --->
//│ 	case xs⁸ of {LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₁(t²⁶, ys⁵)] | LH_N  => ys⁵}: 1385
//│ ------------------
//│ case lss⁰ of {LH_C h¹ t¹ => mappend_lh_₆(h¹, concat_lh_₇(t¹)) | LH_N  => [LH_N]}: 227 --->
//│ 	[LH_C f¹(h²) map_lh_₇(f¹, t²)]: 246
//│ 	[LH_N]: 247
//│ case lss¹ of {LH_C h³ t³ => mappend_lh_₆(h³, concat_lh_₆(t³)) | LH_N  => [LH_N]}: 384 --->
//│ 	[LH_C f²(h⁴) map_lh_₆(f², t⁴)]: 403
//│ 	[LH_N]: 404
//│ case _lh_runStateT_arg1³ of {StateT _lh_runStateT_StateT_0³ => _lh_runStateT_StateT_0³}: 392 --->
//│ 	[StateT (fun s¹⁴ -> [LH_C [LH_P2 _lh_return_arg1⁵ s¹⁴] [LH_N]])]: 769
//│ case lss² of {LH_C h⁵ t⁵ => mappend_lh_₆(h⁵, concat_lh_₅(t⁵)) | LH_N  => [LH_N]}: 417 --->
//│ 	[LH_C f³(h⁶) map_lh_₅(f³, t⁶)]: 436
//│ 	[LH_N]: 437
//│ case _lh_runStateT_arg1⁴ of {StateT _lh_runStateT_StateT_0⁴ => _lh_runStateT_StateT_0⁴}: 421 --->
//│ 	[StateT (fun s¹³ -> [LH_C [LH_P2 _lh_return_arg1⁴ s¹³] [LH_N]])]: 756
//│ 	[StateT (fun s¹⁵ -> concat_lh_₆(map_lh_₆((fun as⁴ -> let _lh_matchIdent¹⁰ = as⁴
//│ in case _lh_matchIdent¹⁰ of {LH_P2 _lh_bind_LH_P2_0⁴ _lh_bind_LH_P2_1⁴ => runStateT_lh_₆(_lh_bind_arg2⁴(_lh_bind_LH_P2_0⁴), _lh_bind_LH_P2_1⁴)}), runStateT_lh_₇(_lh_bind_arg1⁴, s¹⁵))))]: 794
//│ case _lh_runStateT_arg1⁵ of {StateT _lh_runStateT_StateT_0⁵ => _lh_runStateT_StateT_0⁵}: 425 --->
//│ 	[StateT (fun s¹⁷ -> concat_lh_₄(map_lh_₄((fun as⁶ -> let _lh_matchIdent¹² = as⁶
//│ in case _lh_matchIdent¹² of {LH_P2 _lh_bind_LH_P2_0⁶ _lh_bind_LH_P2_1⁶ => runStateT_lh_₂(_lh_bind_arg2⁶(_lh_bind_LH_P2_0⁶), _lh_bind_LH_P2_1⁶)}), runStateT_lh_₃(_lh_bind_arg1⁶, s¹⁷))))]: 846
//│ case lss³ of {LH_C h⁷ t⁷ => mappend_lh_₆(h⁷, concat_lh_₄(t⁷)) | LH_N  => [LH_N]}: 450 --->
//│ 	[LH_C f⁴(h⁸) map_lh_₄(f⁴, t⁸)]: 469
//│ 	[LH_N]: 470
//│ case _lh_runStateT_arg1⁶ of {StateT _lh_runStateT_StateT_0⁶ => _lh_runStateT_StateT_0⁶}: 454 --->
//│ 	[StateT (fun s⁷ -> concat_lh_₇(map_lh_₇((fun as² -> let _lh_matchIdent⁴ = as²
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_bind_LH_P2_0² _lh_bind_LH_P2_1² => runStateT_lh_₉(_lh_bind_arg2²(_lh_bind_LH_P2_0²), _lh_bind_LH_P2_1²)}), runStateT_lh_₉(_lh_bind_arg1², s⁷))))]: 340
//│ case _lh_runStateT_arg1⁷ of {StateT _lh_runStateT_StateT_0⁷ => _lh_runStateT_StateT_0⁷}: 458 --->
//│ 	[StateT (fun s¹² -> concat_lh_₇(map_lh_₇((fun as³ -> let _lh_matchIdent⁸ = as³
//│ in case _lh_matchIdent⁸ of {LH_P2 _lh_bind_LH_P2_0³ _lh_bind_LH_P2_1³ => runStateT_lh_₈(_lh_bind_arg2³(_lh_bind_LH_P2_0³), _lh_bind_LH_P2_1³)}), runStateT_lh_₉(_lh_bind_arg1³, s¹²))))]: 725
//│ case lss⁴ of {LH_C h¹¹ t¹¹ => mappend_lh_₆(h¹¹, concat_lh_₃(t¹¹)) | LH_N  => [LH_N]}: 509 --->
//│ 	[LH_C f⁵(h¹⁰) map_lh_₃(f⁵, t¹⁰)]: 495
//│ 	[LH_N]: 496
//│ case ls⁸ of {LH_C h¹⁴ t¹⁴ => [LH_C f⁷(h¹⁴) map_lh_₂(f⁷, t¹⁴)] | LH_N  => [LH_N]}: 598 --->
//│ 	[LH_C mappend_lh_₃(mappend_lh_₂([LH_C _lh_puzzle_LH_P2_0⁰ [LH_N]], [LH_C ' ' [LH_C '=' [LH_C '>' [LH_C ' ' [LH_N]]]]]), string_of_int⁰(_lh_puzzle_LH_P2_1⁰)) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 1350
//│ 	[LH_N]: 1355
//│ case lss⁵ of {LH_C h¹⁵ t¹⁵ => mappend_lh_₆(h¹⁵, concat_lh_₂(t¹⁵)) | LH_N  => [LH_N]}: 610 --->
//│ 	[LH_C f⁷(h¹⁴) map_lh_₂(f⁷, t¹⁴)]: 596
//│ 	[LH_N]: 597
//│ case _lh_matchIdent⁷ of {Just _lh_select_Just_0⁰ => return_lh_₆(_lh_select_Just_0⁰) | Nothing  => permute_lh_₂(_lh_select_arg1⁰)}: 660 --->
//│ 	[Nothing]: 114
//│ 	[Just _lh_lookup_LH_P2_1⁰]: 122
//│ case _lh_matchIdent⁹ of {Just _lh_select_Just_0¹ => return_lh_₄(_lh_select_Just_0¹) | Nothing  => permute_lh_₁(_lh_select_arg1¹)}: 745 --->
//│ 	[Nothing]: 344
//│ 	[Just _lh_lookup_LH_P2_1¹]: 352
//│ case xs⁶ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₃(t²¹, ys³)] | LH_N  => ys³}: 956 --->
//│ 	[LH_C h²³ mappend_lh_₂(t²³, ys⁴)]: 1048
//│ 	[LH_N]: 1336
//│ 	[LH_C ' ' [LH_N]]: 1337
//│ 	[LH_C '>' [LH_C ' ' [LH_N]]]: 1338
//│ 	[LH_C '=' [LH_C '>' [LH_C ' ' [LH_N]]]]: 1339
//│ 	[LH_C ' ' [LH_C '=' [LH_C '>' [LH_C ' ' [LH_N]]]]]: 1340
//│ case _lh_fromJust_arg1⁰ of {Just _lh_fromJust_Just_0⁰ => _lh_fromJust_Just_0⁰}: 972 --->
//│ 	[Just _lh_lookup_LH_P2_1²]: 1026
//│ case xs⁷ of {LH_C h²³ t²³ => [LH_C h²³ mappend_lh_₂(t²³, ys⁴)] | LH_N  => ys⁴}: 1050 --->
//│ 	[LH_N]: 1329
//│ 	[LH_C _lh_puzzle_LH_P2_0⁰ [LH_N]]: 1330
//│ case ls¹⁵ of {LH_C h²⁵ t²⁵ => (1 + length_lh_₁(t²⁵)) | LH_N  => 0}: 1118 --->
//│ 	[LH_N]: 1054
//│ 	[LH_C _lh_nub_LH_C_0⁰ nub_lh_₁(filter_lh_₁((fun y⁰ -> not⁰(polyEq⁰(_lh_nub_LH_C_0⁰, y⁰))), _lh_nub_LH_C_1⁰))]: 1070
//│ case xs⁸ of {LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₁(t²⁶, ys⁵)] | LH_N  => ys⁵}: 1385 --->
//│ 	[LH_N]: 1460
//│ 	[LH_C 'E' [LH_N]]: 1461
//│ 	[LH_C 'V' [LH_C 'E' [LH_N]]]: 1462
//│ 	[LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]: 1463
//│ 	[LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]: 1464
//│ 	[LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]: 1465
//│ 	[LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]]: 1466
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testCryptarithm2_nofib_lh_₁(primId⁰(1500))
//│ def bind_lh_₁(_lh_bind_arg1⁶, _lh_bind_arg2⁶) = 
//│ 	let _lh_runStateT_StateT_0⁸ = (fun s¹⁷ -> concat_lh_₄(map_lh_₄((fun as⁶ -> 
//│ 		let _lh_matchIdent¹⁶ = as⁶
//│ 		in case _lh_matchIdent¹⁶ of {
//│ 			LH_P2 _lh_bind_LH_P2_0⁶ _lh_bind_LH_P2_1⁶ => runStateT_lh_₂(_lh_bind_arg2⁶(_lh_bind_LH_P2_0⁶), _lh_bind_LH_P2_1⁶)}), runStateT_lh_₃(_lh_bind_arg1⁶, s¹⁷))))
//│ 	in _lh_runStateT_StateT_0⁸
//│ def bind_lh_₂(_lh_bind_arg1¹, _lh_bind_arg2¹) = [StateT (fun s⁶ -> concat_lh_₅(map_lh_₅((fun as¹ -> 
//│ 	let _lh_matchIdent⁴ = as¹
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_P2 _lh_bind_LH_P2_0¹ _lh_bind_LH_P2_1¹ => runStateT_lh_₄(_lh_bind_arg2¹(_lh_bind_LH_P2_0¹), _lh_bind_LH_P2_1¹)}), runStateT_lh_₅(_lh_bind_arg1¹, s⁶))))]
//│ def bind_lh_₃(_lh_bind_arg1³, _lh_bind_arg2³) = 
//│ 	let _lh_runStateT_StateT_0⁵ = (fun s¹¹ -> concat_lh_₆(map_lh_₆((fun as³ -> 
//│ 		let _lh_matchIdent⁸ = as³
//│ 		in case _lh_matchIdent⁸ of {
//│ 			LH_P2 _lh_bind_LH_P2_0³ _lh_bind_LH_P2_1³ => runStateT_lh_₆(_lh_bind_arg2³(_lh_bind_LH_P2_0³), _lh_bind_LH_P2_1³)}), runStateT_lh_₇(_lh_bind_arg1³, s¹¹))))
//│ 	in _lh_runStateT_StateT_0⁵
//│ def bind_lh_₄(_lh_bind_arg1⁰, _lh_bind_arg2⁰) = 
//│ 	let _lh_runStateT_StateT_0² = (fun s³ -> concat_lh_₇(map_lh_₇((fun as⁰ -> 
//│ 		let _lh_matchIdent² = as⁰
//│ 		in case _lh_matchIdent² of {
//│ 			LH_P2 _lh_bind_LH_P2_0⁰ _lh_bind_LH_P2_1⁰ => runStateT_lh_₈(_lh_bind_arg2⁰(_lh_bind_LH_P2_0⁰), _lh_bind_LH_P2_1⁰)}), runStateT_lh_₉(_lh_bind_arg1⁰, s³))))
//│ 	in _lh_runStateT_StateT_0²
//│ def bind_lh_₅(_lh_bind_arg1⁵, _lh_bind_arg2⁵) = 
//│ 	let _lh_runStateT_StateT_0⁷ = (fun s¹⁶ -> concat_lh_₇(map_lh_₇((fun as⁵ -> 
//│ 		let _lh_matchIdent¹⁵ = as⁵
//│ 		in case _lh_matchIdent¹⁵ of {
//│ 			LH_P2 _lh_bind_LH_P2_0⁵ _lh_bind_LH_P2_1⁵ => runStateT_lh_₉(_lh_bind_arg2⁵(_lh_bind_LH_P2_0⁵), _lh_bind_LH_P2_1⁵)}), runStateT_lh_₉(_lh_bind_arg1⁵, s¹⁶))))
//│ 	in _lh_runStateT_StateT_0⁷
//│ def bind_lh_₆(_lh_bind_arg1², _lh_bind_arg2²) = [StateT (fun s¹⁰ -> concat_lh_₇(map_lh_₇((fun as² -> 
//│ 	let _lh_matchIdent⁷ = as²
//│ 	in case _lh_matchIdent⁷ of {
//│ 		LH_P2 _lh_bind_LH_P2_0² _lh_bind_LH_P2_1² => runStateT_lh_₉(_lh_bind_arg2²(_lh_bind_LH_P2_0²), _lh_bind_LH_P2_1²)}), runStateT_lh_₉(_lh_bind_arg1², s¹⁰))))]
//│ def bind_lh_₇(_lh_bind_arg1⁴, _lh_bind_arg2⁴) = [StateT (fun s¹² -> concat_lh_₇(map_lh_₇((fun as⁴ -> 
//│ 	let _lh_matchIdent¹² = as⁴
//│ 	in case _lh_matchIdent¹² of {
//│ 		LH_P2 _lh_bind_LH_P2_0⁴ _lh_bind_LH_P2_1⁴ => runStateT_lh_₉(_lh_bind_arg2⁴(_lh_bind_LH_P2_0⁴), _lh_bind_LH_P2_1⁴)}), runStateT_lh_₉(_lh_bind_arg1⁴, s¹²))))]
//│ def combine_lh_₁(_lh_combine_arg1⁰, _lh_combine_arg2⁰, _lh_combine_arg3⁰, _lh_combine_arg4⁰) = [LH_C [LH_C _lh_combine_arg1⁰ _lh_combine_arg2⁰] transpose_lh_₁([LH_C _lh_combine_arg3⁰ _lh_combine_arg4⁰])]
//│ def concat_lh_₁(lss⁶) = case lss⁶ of {
//│ 	LH_C h³⁵ t³⁵ => mappend_lh_₆(h³⁵, concat_lh_₁(t³⁵))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₂(lss⁴) = lss⁴([lh_Unit])
//│ def concat_lh_₃(lss³) = lss³([lh_Unit])
//│ def concat_lh_₄(lss²) = lss²([lh_Unit])
//│ def concat_lh_₅(lss⁰) = lss⁰([lh_Unit])
//│ def concat_lh_₆(lss⁵) = lss⁵([lh_Unit])
//│ def concat_lh_₇(lss¹) = lss¹([lh_Unit])
//│ def delete_lh_₁(_lh_delete_arg1⁰, _lh_delete_arg2⁰) = case _lh_delete_arg1⁰ of {
//│ 	LH_C _lh_delete_LH_C_0⁰ _lh_delete_LH_C_1⁰ => if polyEq⁰(_lh_delete_LH_C_0⁰, _lh_delete_arg2⁰) then delete_lh_₁(_lh_delete_LH_C_1⁰, _lh_delete_arg2⁰) else [LH_C _lh_delete_LH_C_0⁰ delete_lh_₁(_lh_delete_LH_C_1⁰, _lh_delete_arg2⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def digitEnv_lh_₁(_lh_digitEnv_arg1⁰) = case _lh_digitEnv_arg1⁰ of {
//│ 	Digits _lh_digitEnv_Digits_0⁰ _lh_digitEnv_Digits_1⁰ => _lh_digitEnv_Digits_1⁰}
//│ def digitEnv_lh_₂(_lh_digitEnv_arg1²) = case _lh_digitEnv_arg1² of {
//│ 	Digits _lh_digitEnv_Digits_0² _lh_digitEnv_Digits_1² => _lh_digitEnv_Digits_1²}
//│ def digitEnv_lh_₃(_lh_digitEnv_arg1¹) = case _lh_digitEnv_arg1¹ of {
//│ 	Digits _lh_digitEnv_Digits_0¹ _lh_digitEnv_Digits_1¹ => _lh_digitEnv_Digits_1¹}
//│ def digits_lh_₁(_lh_digits_arg1⁰) = case _lh_digits_arg1⁰ of {
//│ 	Digits _lh_digits_Digits_0⁰ _lh_digits_Digits_1⁰ => _lh_digits_Digits_0⁰}
//│ def enumFromTo_lh_₁(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh_₁((a⁰ + 1), b⁰)] else [LH_N]
//│ def execStateT_lh_₁(_lh_execStateT_arg1⁰, _lh_execStateT_arg2⁰) = concat_lh_₃(map_lh_₃((fun x² -> 
//│ 	let _lh_matchIdent¹¹ = x²
//│ 	in case _lh_matchIdent¹¹ of {
//│ 		LH_P2 _lh_execStateT_LH_P2_0⁰ _lh_execStateT_LH_P2_1⁰ => [LH_C _lh_execStateT_LH_P2_1⁰ [LH_N]]}), runStateT_lh_₁(_lh_execStateT_arg1⁰, _lh_execStateT_arg2⁰)))
//│ def filter_lh_₁(f¹⁰, ls¹⁵) = case ls¹⁵ of {
//│ 	LH_C h²⁶ t²⁶ => if f¹⁰(h²⁶) then [LH_C h²⁶ filter_lh_₁(f¹⁰, t²⁶)] else filter_lh_₁(f¹⁰, t²⁶)
//│ 	| LH_N  => [LH_N]}
//│ def foldl_lh_₁(f¹, i⁰, ls¹) = case ls¹ of {
//│ 	LH_C h⁴ t⁴ => foldl_lh_₁(f¹, f¹(i⁰, h⁴), t⁴)
//│ 	| LH_N  => i⁰}
//│ def foldr_lh_₁(f³, i¹, ls⁶) = case ls⁶ of {
//│ 	LH_C h⁹ t⁹ => f³(h⁹, foldr_lh_₁(f³, i¹, t⁹))
//│ 	| LH_N  => i¹}
//│ def fromJust_lh_₁(_lh_fromJust_arg1⁰) = _lh_fromJust_arg1⁰
//│ def get_lh_₁ = [StateT (fun s¹⁴ -> [LH_C [LH_P2 s¹⁴ s¹⁴] [LH_N]])]
//│ def guard_lh_₁(_lh_guard_arg1⁰) = case _lh_guard_arg1⁰ of {
//│ 	True  => [StateT (fun s⁸ -> [LH_C [LH_P2 [Unit] s⁸] [LH_N]])]
//│ 	| False  => [StateT (fun s⁹ -> [LH_N])]}
//│ def length_lh_₁(ls¹⁴) = ls¹⁴([lh_Unit])
//│ def lift_lh_₁(_lh_lift_arg1⁰) = [StateT (fun s⁵ -> concat_lh_₇(map_lh_₇((fun x¹ -> [LH_C [LH_P2 x¹ s⁵] [LH_N]]), _lh_lift_arg1⁰)))]
//│ def listDiff_lh_₁ = foldl_lh_₁(delete_lh_₁)
//│ def lookup_lh_₁(_lh_lookup_arg1⁰, _lh_lookup_arg2⁰) = case _lh_lookup_arg2⁰ of {
//│ 	LH_N  => [Nothing]
//│ 	| LH_C _lh_lookup_LH_C_0⁰ _lh_lookup_LH_C_1⁰ => case _lh_lookup_LH_C_0⁰ of {
//│ 		LH_P2 _lh_lookup_LH_P2_0⁰ _lh_lookup_LH_P2_1⁰ => if polyEq⁰(_lh_lookup_arg1⁰, _lh_lookup_LH_P2_0⁰) then 
//│ 			let _lh_fromJust_Just_0⁰ = _lh_lookup_LH_P2_1⁰
//│ 			in _lh_fromJust_Just_0⁰ else lookup_lh_₁(_lh_lookup_arg1⁰, _lh_lookup_LH_C_1⁰)}}
//│ def lookup_lh_₂(_lh_lookup_arg1¹, _lh_lookup_arg2¹) = case _lh_lookup_arg2¹ of {
//│ 	LH_N  => (fun _lh_select_arg1² -> permute_lh_₁(_lh_select_arg1²))
//│ 	| LH_C _lh_lookup_LH_C_0¹ _lh_lookup_LH_C_1¹ => case _lh_lookup_LH_C_0¹ of {
//│ 		LH_P2 _lh_lookup_LH_P2_0¹ _lh_lookup_LH_P2_1¹ => if polyEq⁰(_lh_lookup_arg1¹, _lh_lookup_LH_P2_0¹) then 
//│ 			let _lh_select_Just_0⁰ = _lh_lookup_LH_P2_1¹
//│ 			in (fun _lh_select_arg1³ -> return_lh_₄(_lh_select_Just_0⁰)) else lookup_lh_₂(_lh_lookup_arg1¹, _lh_lookup_LH_C_1¹)}}
//│ def lookup_lh_₃(_lh_lookup_arg1², _lh_lookup_arg2²) = case _lh_lookup_arg2² of {
//│ 	LH_N  => (fun _lh_select_arg1⁴ -> permute_lh_₂(_lh_select_arg1⁴))
//│ 	| LH_C _lh_lookup_LH_C_0² _lh_lookup_LH_C_1² => case _lh_lookup_LH_C_0² of {
//│ 		LH_P2 _lh_lookup_LH_P2_0² _lh_lookup_LH_P2_1² => if polyEq⁰(_lh_lookup_arg1², _lh_lookup_LH_P2_0²) then 
//│ 			let _lh_select_Just_0¹ = _lh_lookup_LH_P2_1²
//│ 			in (fun _lh_select_arg1⁵ -> return_lh_₆(_lh_select_Just_0¹)) else lookup_lh_₃(_lh_lookup_arg1², _lh_lookup_LH_C_1²)}}
//│ def mapM_lh_₁(_lh_mapM_arg1⁰, _lh_mapM_arg2⁰) = foldr_lh_₁((fun a¹ -> (fun r⁰ -> bind_lh_₇(_lh_mapM_arg1⁰(a¹), (fun x⁰ -> bind_lh_₆(r⁰, (fun xs² -> return_lh_₅([LH_C x⁰ xs²]))))))), return_lh_₆([LH_N]), _lh_mapM_arg2⁰)
//│ def map_lh_₁(f⁸, ls¹¹) = case ls¹¹ of {
//│ 	LH_C h²² t²² => [LH_C f⁸(h²²) map_lh_₁(f⁸, t²²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f⁵, ls⁹) = ls⁹(f⁵)
//│ def map_lh_₃(f⁰, ls⁰, _lh_floatOutId_0⁰) = case ls⁰ of {
//│ 	LH_C h¹ t¹ => 
//│ 		let t² = map_lh_₃(f⁰, t¹)
//│ 		in let h² = f⁰(h¹)
//│ 		in mappend_lh_₆(h², concat_lh_₃(t²))
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f¹¹, ls¹⁶, _lh_floatOutId_0⁵) = case ls¹⁶ of {
//│ 	LH_C h³³ t³³ => 
//│ 		let t³⁴ = map_lh_₄(f¹¹, t³³)
//│ 		in let h³⁴ = f¹¹(h³³)
//│ 		in mappend_lh_₆(h³⁴, concat_lh_₄(t³⁴))
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f⁹, ls¹³, _lh_floatOutId_0⁴) = case ls¹³ of {
//│ 	LH_C h²⁴ t²⁴ => 
//│ 		let t²⁵ = map_lh_₅(f⁹, t²⁴)
//│ 		in let h²⁵ = f⁹(h²⁴)
//│ 		in mappend_lh_₆(h²⁵, concat_lh_₅(t²⁵))
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f⁴, ls⁸, _lh_floatOutId_0³) = case ls⁸ of {
//│ 	LH_C h¹¹ t¹¹ => 
//│ 		let t¹² = map_lh_₆(f⁴, t¹¹)
//│ 		in let h¹² = f⁴(h¹¹)
//│ 		in mappend_lh_₆(h¹², concat_lh_₆(t¹²))
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₇(f², ls², _lh_floatOutId_0²) = case ls² of {
//│ 	LH_C h⁵ t⁵ => 
//│ 		let t⁶ = map_lh_₇(f², t⁵)
//│ 		in let h⁶ = f²(h⁵)
//│ 		in mappend_lh_₆(h⁶, concat_lh_₇(t⁶))
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs³, ys²) = xs³(ys²)
//│ def mappend_lh_₂(xs⁴, ys³) = xs⁴(ys³)
//│ def mappend_lh_₃(xs¹, ys¹) = xs¹(ys¹)
//│ def mappend_lh_₄(xs⁶, ys⁵) = case xs⁶ of {
//│ 	LH_C h¹³ t¹³ => [LH_C h¹³ mappend_lh_₄(t¹³, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mappend_lh_₅(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₅(t⁰, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₆(xs⁵, ys⁴) = case xs⁵ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₆(t¹⁰, ys⁴)]
//│ 	| LH_N  => ys⁴}
//│ def nub_lh_₁(_lh_nub_arg1⁰, _lh_floatOutId_0¹) = case _lh_nub_arg1⁰ of {
//│ 	LH_N  => 0
//│ 	| LH_C _lh_nub_LH_C_0⁰ _lh_nub_LH_C_1⁰ => 
//│ 		let t³ = nub_lh_₁(filter_lh_₁((fun y⁰ -> not⁰(polyEq⁰(_lh_nub_LH_C_0⁰, y⁰))), _lh_nub_LH_C_1⁰))
//│ 		in let h³ = _lh_nub_LH_C_0⁰
//│ 		in (1 + length_lh_₁(t³))}
//│ def permute_lh_₁(_lh_permute_arg1¹) = bind_lh_₇(get_lh_₁, (fun st³ -> bind_lh_₇(
//│ 	let xs⁸ = digits_lh_₁(st³)
//│ 	in lift_lh_₁(
//│ 		let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁴ listDiff_lh_₁(xs⁸, [LH_C _lh_listcomp_fun_ls_h⁴ [LH_N]])] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁴(xs⁸)), (fun iis¹ -> 
//│ 	let _lh_matchIdent¹⁴ = iis¹
//│ 	in case _lh_matchIdent¹⁴ of {
//│ 		LH_P2 _lh_permute_LH_P2_0¹ _lh_permute_LH_P2_1¹ => bind_lh_₇(put_lh_₁([Digits _lh_permute_LH_P2_1¹ [LH_C [LH_P2 _lh_permute_arg1¹ _lh_permute_LH_P2_0¹] digitEnv_lh_₃(st³)]]), (fun _p⁴ -> return_lh_₆(_lh_permute_LH_P2_0¹)))}))))
//│ def permute_lh_₂(_lh_permute_arg1⁰) = bind_lh_₇(get_lh_₁, (fun st² -> bind_lh_₇(
//│ 	let xs⁷ = digits_lh_₁(st²)
//│ 	in lift_lh_₁(
//│ 		let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 			LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h² listDiff_lh_₁(xs⁷, [LH_C _lh_listcomp_fun_ls_h² [LH_N]])] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²(xs⁷)), (fun iis⁰ -> 
//│ 	let _lh_matchIdent¹⁰ = iis⁰
//│ 	in case _lh_matchIdent¹⁰ of {
//│ 		LH_P2 _lh_permute_LH_P2_0⁰ _lh_permute_LH_P2_1⁰ => bind_lh_₇(put_lh_₁([Digits _lh_permute_LH_P2_1⁰ [LH_C [LH_P2 _lh_permute_arg1⁰ _lh_permute_LH_P2_0⁰] digitEnv_lh_₃(st²)]]), (fun _p³ -> return_lh_₆(_lh_permute_LH_P2_0⁰)))}))))
//│ def put_lh_₁(_lh_put_arg1⁰) = [StateT (fun s¹³ -> [LH_C [LH_P2 [Unit] _lh_put_arg1⁰] [LH_N]])]
//│ def puzzle_lh_₁(_lh_puzzle_arg1⁰, _lh_puzzle_arg2⁰) = 
//│ 	let solution⁰ = solve_lh_₁(transpose_lh_₁(map_lh_₁(reverse_lh_₂, _lh_puzzle_arg1⁰)), reverse_lh_₁(_lh_puzzle_arg2⁰), 0)
//│ 	in let answer⁰ = 	
//│ 		let _lh_matchIdent⁹ = execStateT_lh_₁(solution⁰, [Digits enumFromTo_lh_₁(0, 9) [LH_N]])
//│ 		in case _lh_matchIdent⁹ of {
//│ 			LH_C _lh_puzzle_LH_C_0⁰ _lh_puzzle_LH_C_1⁰ => _lh_puzzle_LH_C_0⁰
//│ 			| LH_N  => error⁰}
//│ 	in let env⁰ = digitEnv_lh_₂(answer⁰)
//│ 	in let look⁰ = (fun c⁰ -> fromJust_lh_₁(lookup_lh_₁(c⁰, env⁰)))
//│ 	in let expand⁰ = (fun ls¹⁰ -> foldl_lh_₁((fun a⁴ -> (fun b¹ -> ((a⁴ * 10) + look⁰(b¹)))), 0, ls¹⁰))
//│ 	in let topVal⁰ = sum_lh_₁(
//│ 		let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C expand⁰(_lh_listcomp_fun_ls_h⁰) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁰(_lh_puzzle_arg1⁰))
//│ 	in let botVal⁰ = expand⁰(_lh_puzzle_arg2⁰)
//│ 	in if (length_lh_₁(nub_lh_₁(mappend_lh_₄(concat_lh_₁(_lh_puzzle_arg1⁰), _lh_puzzle_arg2⁰))) > 10) then error⁰ else if (topVal⁰ /= botVal⁰) then error⁰ else unlines_lh_₁(
//│ 		let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {
//│ 				LH_P2 _lh_puzzle_LH_P2_0⁰ _lh_puzzle_LH_P2_1⁰ => 
//│ 					let t¹⁴ = _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)
//│ 					in let h¹⁴ = mappend_lh_₃(mappend_lh_₂(
//│ 						let t¹⁵ = (fun ys⁶ -> ys⁶)
//│ 						in let h¹⁵ = _lh_puzzle_LH_P2_0⁰
//│ 						in (fun ys⁷ -> 
//│ 							let t¹⁶ = mappend_lh_₂(t¹⁵, ys⁷)
//│ 							in let h¹⁶ = h¹⁵
//│ 							in (fun ys⁸ -> [LH_C h¹⁶ mappend_lh_₃(t¹⁶, ys⁸)])), 
//│ 						let t¹⁷ = 	
//│ 							let t¹⁸ = 	
//│ 								let t¹⁹ = 	
//│ 									let t²⁰ = (fun ys⁹ -> ys⁹)
//│ 									in let h¹⁷ = ' '
//│ 									in (fun ys¹⁰ -> [LH_C h¹⁷ mappend_lh_₃(t²⁰, ys¹⁰)])
//│ 								in let h¹⁸ = '>'
//│ 								in (fun ys¹¹ -> [LH_C h¹⁸ mappend_lh_₃(t¹⁹, ys¹¹)])
//│ 							in let h¹⁹ = '='
//│ 							in (fun ys¹² -> [LH_C h¹⁹ mappend_lh_₃(t¹⁸, ys¹²)])
//│ 						in let h²⁰ = ' '
//│ 						in (fun ys¹³ -> [LH_C h²⁰ mappend_lh_₃(t¹⁷, ys¹³)])), string_of_int⁰(_lh_puzzle_LH_P2_1⁰))
//│ 					in (fun f⁶ -> 
//│ 						let t²¹ = map_lh_₂(f⁶, t¹⁴)
//│ 						in let h²¹ = f⁶(h¹⁴)
//│ 						in (fun _lh_dummy⁸ -> mappend_lh_₆(h²¹, concat_lh_₂(t²¹))))
//│ 				| _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}
//│ 			| LH_N  => (fun f⁷ -> (fun _lh_dummy⁹ -> [LH_N]))})
//│ 		in _lh_listcomp_fun¹(digitEnv_lh_₁(answer⁰)))
//│ def rest_lh_₁(_lh_rest_arg1⁰) = case _lh_rest_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_rest_LH_C_0⁰ _lh_rest_LH_C_1⁰ => _lh_rest_LH_C_1⁰}
//│ def return_lh_₁(_lh_return_arg1³) = 
//│ 	let _lh_runStateT_StateT_0³ = (fun s⁴ -> [LH_C [LH_P2 _lh_return_arg1³ s⁴] [LH_N]])
//│ 	in _lh_runStateT_StateT_0³
//│ def return_lh_₂(_lh_return_arg1¹) = 
//│ 	let _lh_runStateT_StateT_0⁰ = (fun s¹ -> [LH_C [LH_P2 _lh_return_arg1¹ s¹] [LH_N]])
//│ 	in _lh_runStateT_StateT_0⁰
//│ def return_lh_₃(_lh_return_arg1⁰) = [StateT (fun s⁰ -> [LH_C [LH_P2 _lh_return_arg1⁰ s⁰] [LH_N]])]
//│ def return_lh_₄(_lh_return_arg1⁵) = [StateT (fun s¹⁵ -> [LH_C [LH_P2 _lh_return_arg1⁵ s¹⁵] [LH_N]])]
//│ def return_lh_₅(_lh_return_arg1²) = [StateT (fun s² -> [LH_C [LH_P2 _lh_return_arg1² s²] [LH_N]])]
//│ def return_lh_₆(_lh_return_arg1⁴) = [StateT (fun s⁷ -> [LH_C [LH_P2 _lh_return_arg1⁴ s⁷] [LH_N]])]
//│ def reverse_helper_lh_₁(ls⁴, a³) = case ls⁴ of {
//│ 	LH_C h⁸ t⁸ => reverse_helper_lh_₁(t⁸, [LH_C h⁸ a³])
//│ 	| LH_N  => a³}
//│ def reverse_helper_lh_₂(ls³, a²) = case ls³ of {
//│ 	LH_C h⁷ t⁷ => reverse_helper_lh_₂(t⁷, [LH_C h⁷ a²])
//│ 	| LH_N  => a²}
//│ def reverse_lh_₁(ls¹⁷) = reverse_helper_lh_₁(ls¹⁷, [LH_N])
//│ def reverse_lh_₂(ls¹⁸) = reverse_helper_lh_₂(ls¹⁸, [LH_N])
//│ def runStateT_lh_₁(_lh_runStateT_arg1²) = case _lh_runStateT_arg1² of {
//│ 	StateT _lh_runStateT_StateT_0⁴ => _lh_runStateT_StateT_0⁴}
//│ def runStateT_lh_₂(_lh_runStateT_arg1⁴) = _lh_runStateT_arg1⁴
//│ def runStateT_lh_₃(_lh_runStateT_arg1⁶) = _lh_runStateT_arg1⁶
//│ def runStateT_lh_₄(_lh_runStateT_arg1⁷) = _lh_runStateT_arg1⁷
//│ def runStateT_lh_₅(_lh_runStateT_arg1¹) = _lh_runStateT_arg1¹
//│ def runStateT_lh_₆(_lh_runStateT_arg1³) = _lh_runStateT_arg1³
//│ def runStateT_lh_₇(_lh_runStateT_arg1⁸) = case _lh_runStateT_arg1⁸ of {
//│ 	StateT _lh_runStateT_StateT_0⁹ => _lh_runStateT_StateT_0⁹}
//│ def runStateT_lh_₈(_lh_runStateT_arg1⁵) = case _lh_runStateT_arg1⁵ of {
//│ 	StateT _lh_runStateT_StateT_0⁶ => _lh_runStateT_StateT_0⁶}
//│ def runStateT_lh_₉(_lh_runStateT_arg1⁰) = case _lh_runStateT_arg1⁰ of {
//│ 	StateT _lh_runStateT_StateT_0¹ => _lh_runStateT_StateT_0¹}
//│ def select_lh_₁(_lh_select_arg1¹) = bind_lh_₅(get_lh_₁, (fun st¹ -> 
//│ 	let _lh_matchIdent¹ = lookup_lh_₂(_lh_select_arg1¹, digitEnv_lh_₃(st¹))
//│ 	in _lh_matchIdent¹(_lh_select_arg1¹)))
//│ def select_lh_₂(_lh_select_arg1⁰) = bind_lh_₇(get_lh_₁, (fun st⁰ -> 
//│ 	let _lh_matchIdent⁰ = lookup_lh_₃(_lh_select_arg1⁰, digitEnv_lh_₃(st⁰))
//│ 	in _lh_matchIdent⁰(_lh_select_arg1⁰)))
//│ def solve_lh_₁(_lh_solve_arg1⁰, _lh_solve_arg2⁰, _lh_solve_arg3⁰) = case _lh_solve_arg2⁰ of {
//│ 	LH_C _lh_solve_LH_C_0⁰ _lh_solve_LH_C_1⁰ => bind_lh_₂(
//│ 		let _lh_matchIdent³ = _lh_solve_arg1⁰
//│ 		in case _lh_matchIdent³ of {
//│ 			LH_N  => return_lh_₂(_lh_solve_arg3⁰)
//│ 			| LH_C _lh_solve_LH_C_0¹ _lh_solve_LH_C_1¹ => bind_lh_₃(mapM_lh_₁(select_lh_₂, _lh_solve_LH_C_0¹), (fun topNS⁰ -> return_lh_₁((sum_lh_₂(topNS⁰) + _lh_solve_arg3⁰))))}, (fun topN⁰ -> bind_lh_₁(select_lh_₁(_lh_solve_LH_C_0⁰), (fun botN⁰ -> bind_lh_₄(guard_lh_₁(((topN⁰ % 10) == botN⁰)), (fun _s⁰ -> solve_lh_₁(rest_lh_₁(_lh_solve_arg1⁰), _lh_solve_LH_C_1⁰, div⁰(topN⁰, 10))))))))
//│ 	| _  => case _lh_solve_arg1⁰ of {
//│ 		LH_N  => case _lh_solve_arg2⁰ of {
//│ 			LH_N  => case _lh_solve_arg3⁰ of {
//│ 				0  => return_lh_₃([Unit])
//│ 				| _  => [StateT (fun _p⁰ -> [LH_N])]}
//│ 			| _  => [StateT (fun _p¹ -> [LH_N])]}
//│ 		| _  => [StateT (fun _p² -> [LH_N])]}}
//│ def sumAux_lh_₁(ls¹², a⁵) = case ls¹² of {
//│ 	LH_N  => a⁵
//│ 	| LH_C h²³ t²³ => sumAux_lh_₁(t²³, (a⁵ + h²³))}
//│ def sum_lh_₁(ls⁷) = sumAux_lh_₁(ls⁷, 0)
//│ def sum_lh_₂(ls⁵) = sumAux_lh_₁(ls⁵, 0)
//│ def testCryptarithm2_nofib_lh_₁(_lh_testCryptarithm2_nofib_arg1⁰) = 
//│ 	let args⁰ = [LH_C [LH_C 'T' [LH_C 'H' [LH_C 'I' [LH_C 'R' [LH_C 'T' [LH_C 'Y' [LH_N]]]]]]] [LH_C [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]] [LH_C [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]] [LH_C [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]] [LH_C [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]] [LH_C mappend_lh_₁(
//│ 		let t²⁷ = 	
//│ 			let t²⁸ = 	
//│ 				let t²⁹ = 	
//│ 					let t³⁰ = 	
//│ 						let t³¹ = 	
//│ 							let t³² = (fun ys¹⁴ -> ys¹⁴)
//│ 							in let h²⁷ = 'E'
//│ 							in (fun ys¹⁵ -> [LH_C h²⁷ mappend_lh_₁(t³², ys¹⁵)])
//│ 						in let h²⁸ = 'V'
//│ 						in (fun ys¹⁶ -> [LH_C h²⁸ mappend_lh_₁(t³¹, ys¹⁶)])
//│ 					in let h²⁹ = 'L'
//│ 					in (fun ys¹⁷ -> [LH_C h²⁹ mappend_lh_₁(t³⁰, ys¹⁷)])
//│ 				in let h³⁰ = 'E'
//│ 				in (fun ys¹⁸ -> [LH_C h³⁰ mappend_lh_₁(t²⁹, ys¹⁸)])
//│ 			in let h³¹ = 'W'
//│ 			in (fun ys¹⁹ -> [LH_C h³¹ mappend_lh_₁(t²⁸, ys¹⁹)])
//│ 		in let h³² = 'T'
//│ 		in (fun ys²⁰ -> [LH_C h³² mappend_lh_₁(t²⁷, ys²⁰)]), if (_lh_testCryptarithm2_nofib_arg1⁰ > 999999) then [LH_C '1' [LH_N]] else [LH_N]) [LH_N]]]]]]]
//│ 	in puzzle_lh_₁(args⁰, [LH_C 'N' [LH_C 'I' [LH_C 'N' [LH_C 'E' [LH_C 'T' [LH_C 'Y' [LH_N]]]]]]])
//│ def transpose_lh_₁(_lh_transpose_arg1⁰) = case _lh_transpose_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_transpose_LH_C_0⁰ _lh_transpose_LH_C_1⁰ => case _lh_transpose_LH_C_0⁰ of {
//│ 		LH_N  => transpose_lh_₁(_lh_transpose_LH_C_1⁰)
//│ 		| LH_C _lh_transpose_LH_C_0¹ _lh_transpose_LH_C_1¹ => 
//│ 			let _lh_matchIdent¹³ = unzip_lh_₁(
//│ 				let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 					LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => case _lh_listcomp_fun_ls_h³ of {
//│ 						LH_C _lh_transpose_LH_C_0² _lh_transpose_LH_C_1² => [LH_C [LH_P2 _lh_transpose_LH_C_0² _lh_transpose_LH_C_1²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 						| _  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun³(_lh_transpose_LH_C_1⁰))
//│ 			in case _lh_matchIdent¹³ of {
//│ 				LH_P2 _lh_transpose_LH_P2_0⁰ _lh_transpose_LH_P2_1⁰ => combine_lh_₁(_lh_transpose_LH_C_0¹, _lh_transpose_LH_P2_0⁰, _lh_transpose_LH_C_1¹, _lh_transpose_LH_P2_1⁰)}}}
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = concat_lh_₂(map_lh_₂((fun l⁰ -> mappend_lh_₅(l⁰, [LH_C 'n' [LH_N]])), _lh_unlines_arg1⁰))
//│ def unzip_lh_₁(_lh_unzip_arg1⁰) = foldr_lh_₁((fun ab⁰ -> (fun asbs⁰ -> 
//│ 	let _lh_matchIdent⁵ = ab⁰
//│ 	in case _lh_matchIdent⁵ of {
//│ 		LH_P2 _lh_unzip_LH_P2_0⁰ _lh_unzip_LH_P2_1⁰ => 
//│ 			let _lh_matchIdent⁶ = asbs⁰
//│ 			in case _lh_matchIdent⁶ of {
//│ 				LH_P2 _lh_unzip_LH_P2_0¹ _lh_unzip_LH_P2_1¹ => [LH_P2 [LH_C _lh_unzip_LH_P2_0⁰ _lh_unzip_LH_P2_0¹] [LH_C _lh_unzip_LH_P2_1⁰ _lh_unzip_LH_P2_1¹]]}})), [LH_P2 [LH_N] [LH_N]], _lh_unzip_arg1⁰)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
