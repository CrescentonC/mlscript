:NewParser
:ParseOnly



:lhInHaskell
:lhGenOCaml
data Unit = Unit
fromJust (Just a) = a
unlines ls = concat (map (\l -> l ++ ['n']) ls)
nub []             =  []
nub (x:xs)         =  x : nub (filter (\y -> not (polyEq x y)) xs)
lookup k [] = Nothing
lookup k ((x, v):t) = if polyEq k x then Just v else lookup k t
unzip ls = foldr (\ab asbs -> case ab of {(a, b) -> (case asbs of {(as, bs) -> ((a:as), (b:bs))})}) ([],[]) ls
combine y h ys t = (y:h) : (transpose (ys:t))
transpose [] = []
transpose ([] : xss) = transpose xss
transpose ((x : xs) : xss) = case (unzip [(hd, tl) | hd : tl <- xss]) of {
  (hds, tls) -> combine x hds xs tls
}
delete (x:xs) e = if polyEq x e then delete xs e else x:(delete xs e)
delete [] e = []
listDiff = foldl delete
data StateT s m a = StateT (s -> m (a, s))
runStateT (StateT f) = f
mapM f ls = foldr (\a r -> bind (f a) (\x -> bind r (\xs -> return (x:xs)))) (return []) ls
lift ls = StateT (\s -> concat $ map (\x -> [(x, s)]) ls)
execStateT m s = concat $ map (\x -> case x of {(a, s) -> [s]}) ((runStateT m) s)
bind m f = StateT (\s -> concat $ map (\as -> case as of { (a, s) -> runStateT (f a) s }) (runStateT m s))
guard True = StateT (\s -> [(Unit, s)])
guard False = StateT (\s -> [])
return a = StateT (\s -> [(a, s)])
put ss = StateT (\s -> [(Unit, ss)])
get = StateT (\s -> [(s, s)])
type DigitState a = StateT Digits [] a
-- Our digits state
-- * First we have the remaining digit to allocate.
-- * Second, we have the mapping from Char to Digit,
--   for the chars that have been mapped so far.
-- data Digits = Digits {
--   digits :: [Int],
--   digitEnv :: [(Char,Int)]
-- } deriving Show
data Digits = Digits [Int] [(Char, Int)]
digits (Digits a b) = a
digitEnv (Digits a b) = b
-- permute adds a mapping from a char to each of the
-- remaining allocable digits.
-- This is used in the context of the list-of-successes
-- monad, so it actually returns all possible mappings.
-- permute :: Char -> DigitState Int
-- permute c = do
--   st <- get
--   (i,is) <- let xs = digits st in lift [ (x,xs \\ [x]) | x <-  xs]
--   put (Digits is ((c,i):digitEnv st))
--   return i
permute c =
  bind get (\st ->
    bind (let xs = digits st in lift [ (x, listDiff xs [x]) | x <- xs]) (\iis -> case iis of {
      (i, is) -> bind (put (Digits is ((c,i):(digitEnv st)))) (\_p ->
        return i
      )
    })
  )
-- select attempt first checks to see if a mapping
-- from a specific char to digit already has been
-- mapped. If so, use the mapping, otherwise
-- add a new mapping.
-- select :: Char -> DigitState Int
-- select c = do
--   st <- get
--   case lookup c (digitEnv st) of
--     Just r -> return r
--     Nothing -> permute c
select c =
  bind get (\st ->
    case (lookup c (digitEnv st)) of {
      Just r -> return r;
      Nothing -> permute c
    }
  )
-- solve takes a list of list of (backwards) letters,
-- and a list of (backwards) letters, and tries
-- to map the letter to digits, such that
-- the sum of the first list of letters (mapped to digits)
-- is equal to the sum of the second list of letters,
-- again mapped to digits.
--
-- So a possible mapping for A+B=C might be
-- solve ["A","B"] "C" 0
--     => A -> 1, B -> 2, C -> 3
rest []     = []
rest (x:xs) = xs
-- solve :: [[Char]] -> [Char] -> Int -> DigitState Unit
-- solve tops (bot:bots) carry =
--   do topN <- (case tops of
--        [] -> return carry
--        (top:_) ->
--          do topNS <- mapM select top
--             return (sum topNS + carry))
--      botN <- select bot
--      guard (topN `mod` 10 == botN)  -- key optimization
--      solve (rest tops) bots (topN `div` 10)
-- solve [] [] 0 = return Unit
-- solve _  _  _ = mzero
solve tops (bot:bots) carry = 
  bind (case tops of 
    [] -> return carry
    (top:_) -> bind (mapM select top) (\topNS -> return ((sum topNS) + carry))
  ) (\topN -> bind (select bot) (\botN ->
    bind (guard ((topN `mod` 10) == botN)) (\_s ->
      solve (rest tops) bots (topN `div` 10))))
solve [] [] 0 = return Unit
solve _ _ _ = StateT (\_p -> [])
-- Puzzle provides a cleaner interface into solve.
-- The strings are in the order *we* write them.
puzzle :: [[Char]] -> [Char] -> String
puzzle top bot =
  let solution = solve (transpose (map reverse top)) (reverse bot) 0 in
  let answer = case (execStateT solution (Digits [0..9] [])) of {(a:_) -> a; [] -> error} in
  let env = digitEnv answer in
  let look = \c -> fromJust (lookup c env) in
  let expand = \ls -> foldl (\a -> \b -> a * 10 + look b) 0 ls in
  let topVal = sum [expand xs | xs <- top] in
  let botVal = expand bot in
  if length (nub (concat top ++ bot)) > 10 then
    error
  else if topVal /= botVal then
    error
  else unlines [ [c] ++ " => " ++ string_of_int i | (c,i) <- digitEnv answer ]
testCryptarithm2_nofib n =
  let args = ["THIRTY", "TWELVE", "TWELVE", "TWELVE", "TWELVE", "TWELVE" ++ if n > 999999 then "1" else ""] in
  puzzle args "NINETY"
testCryptarithm2_nofib $ primId 1500
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testCryptarithm2_nofib_lh_₁^1534(primId⁰(1500))
//│ def bind_lh_₁(_lh_bind_arg1⁵, _lh_bind_arg2⁵) = [StateT (fun s¹⁶ -> concat_lh_₄^779(map_lh_₄^780((fun as⁵ -> 
//│ 	let _lh_matchIdent⁹ = as⁵
//│ 	in case _lh_matchIdent⁹ of {
//│ 		LH_P2 _lh_bind_LH_P2_0⁵ _lh_bind_LH_P2_1⁵ => runStateT_lh_₃^783(_lh_bind_arg2⁵(_lh_bind_LH_P2_0⁵), _lh_bind_LH_P2_1⁵)
//│ 		| _  => error⁰}), runStateT_lh_₂^795(_lh_bind_arg1⁵, s¹⁶))))]
//│ def bind_lh_₂(_lh_bind_arg1⁴, _lh_bind_arg2⁴) = [StateT (fun s¹² -> concat_lh_₅^718(map_lh_₅^719((fun as⁴ -> 
//│ 	let _lh_matchIdent⁸ = as⁴
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_P2 _lh_bind_LH_P2_0⁴ _lh_bind_LH_P2_1⁴ => runStateT_lh_₅^722(_lh_bind_arg2⁴(_lh_bind_LH_P2_0⁴), _lh_bind_LH_P2_1⁴)
//│ 		| _  => error⁰}), runStateT_lh_₄^734(_lh_bind_arg1⁴, s¹²))))]
//│ def bind_lh_₃(_lh_bind_arg1³, _lh_bind_arg2³) = [StateT (fun s¹⁰ -> concat_lh_₆^637(map_lh_₆^638((fun as³ -> 
//│ 	let _lh_matchIdent⁵ = as³
//│ 	in case _lh_matchIdent⁵ of {
//│ 		LH_P2 _lh_bind_LH_P2_0³ _lh_bind_LH_P2_1³ => runStateT_lh_₇^641(_lh_bind_arg2³(_lh_bind_LH_P2_0³), _lh_bind_LH_P2_1³)
//│ 		| _  => error⁰}), runStateT_lh_₆^653(_lh_bind_arg1³, s¹⁰))))]
//│ def bind_lh_₄(_lh_bind_arg1², _lh_bind_arg2²) = [StateT (fun s⁹ -> concat_lh_₇^610(map_lh_₇^611((fun as² -> 
//│ 	let _lh_matchIdent⁴ = as²
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_P2 _lh_bind_LH_P2_0² _lh_bind_LH_P2_1² => runStateT_lh_₈^614(_lh_bind_arg2²(_lh_bind_LH_P2_0²), _lh_bind_LH_P2_1²)
//│ 		| _  => error⁰}), runStateT_lh_₈^626(_lh_bind_arg1², s⁹))))]
//│ def bind_lh_₅(_lh_bind_arg1¹, _lh_bind_arg2¹) = [StateT (fun s⁷ -> concat_lh_₇^352(map_lh_₇^353((fun as¹ -> 
//│ 	let _lh_matchIdent³ = as¹
//│ 	in case _lh_matchIdent³ of {
//│ 		LH_P2 _lh_bind_LH_P2_0¹ _lh_bind_LH_P2_1¹ => runStateT_lh_₈^356(_lh_bind_arg2¹(_lh_bind_LH_P2_0¹), _lh_bind_LH_P2_1¹)
//│ 		| _  => error⁰}), runStateT_lh_₈^368(_lh_bind_arg1¹, s⁷))))]
//│ def bind_lh_₆(_lh_bind_arg1⁰, _lh_bind_arg2⁰) = [StateT (fun s³ -> concat_lh_₇^129(map_lh_₇^130((fun as⁰ -> 
//│ 	let _lh_matchIdent⁰ = as⁰
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_P2 _lh_bind_LH_P2_0⁰ _lh_bind_LH_P2_1⁰ => runStateT_lh_₈^133(_lh_bind_arg2⁰(_lh_bind_LH_P2_0⁰), _lh_bind_LH_P2_1⁰)
//│ 		| _  => error⁰}), runStateT_lh_₈^145(_lh_bind_arg1⁰, s³))))]
//│ def combine_lh_₁(_lh_combine_arg1⁰, _lh_combine_arg2⁰, _lh_combine_arg3⁰, _lh_combine_arg4⁰) = [LH_C [LH_C _lh_combine_arg1⁰ _lh_combine_arg2⁰] transpose_lh_₁^833([LH_C _lh_combine_arg3⁰ _lh_combine_arg4⁰])]
//│ def concat_lh_₁(lss⁶) = case lss⁶ of {
//│ 	LH_C h²³ t²³ => mappend_lh_₅^1004(h²³, concat_lh_₁^1007(t²³))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₂(lss⁵) = case lss⁵ of {
//│ 	LH_C h¹² t¹² => mappend_lh_₆^511(h¹², concat_lh_₂^514(t¹²))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₃(lss⁴) = case lss⁴ of {
//│ 	LH_C h¹¹ t¹¹ => mappend_lh_₆^495(h¹¹, concat_lh_₃^498(t¹¹))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₄(lss³) = case lss³ of {
//│ 	LH_C h⁸ t⁸ => mappend_lh_₆^453(h⁸, concat_lh_₄^456(t⁸))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₅(lss²) = case lss² of {
//│ 	LH_C h⁵ t⁵ => mappend_lh_₆^404(h⁵, concat_lh_₅^407(t⁵))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₆(lss¹) = case lss¹ of {
//│ 	LH_C h³ t³ => mappend_lh_₆^111(h³, concat_lh_₆^114(t³))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₇(lss⁰) = case lss⁰ of {
//│ 	LH_C h¹ t¹ => mappend_lh_₆^76(h¹, concat_lh_₇^79(t¹))
//│ 	| LH_N  => [LH_N]}
//│ def delete_lh_₁(_lh_delete_arg1⁰, _lh_delete_arg2⁰) = case _lh_delete_arg1⁰ of {
//│ 	LH_C _lh_delete_LH_C_0⁰ _lh_delete_LH_C_1⁰ => if polyEq⁰(_lh_delete_LH_C_0⁰, _lh_delete_arg2⁰) then delete_lh_₁^7(_lh_delete_LH_C_1⁰, _lh_delete_arg2⁰) else [LH_C _lh_delete_LH_C_0⁰ delete_lh_₁^13(_lh_delete_LH_C_1⁰, _lh_delete_arg2⁰)]
//│ 	| LH_N  => [LH_N]
//│ 	| _  => error⁰}
//│ def digitEnv_lh_₁(_lh_digitEnv_arg1³) = case _lh_digitEnv_arg1³ of {
//│ 	Digits _lh_digitEnv_Digits_0³ _lh_digitEnv_Digits_1³ => _lh_digitEnv_Digits_1³
//│ 	| _  => error⁰}
//│ def digitEnv_lh_₂(_lh_digitEnv_arg1²) = case _lh_digitEnv_arg1² of {
//│ 	Digits _lh_digitEnv_Digits_0² _lh_digitEnv_Digits_1² => _lh_digitEnv_Digits_1²
//│ 	| _  => error⁰}
//│ def digitEnv_lh_₃(_lh_digitEnv_arg1¹) = case _lh_digitEnv_arg1¹ of {
//│ 	Digits _lh_digitEnv_Digits_0¹ _lh_digitEnv_Digits_1¹ => _lh_digitEnv_Digits_1¹
//│ 	| _  => error⁰}
//│ def digitEnv_lh_₄(_lh_digitEnv_arg1⁰) = case _lh_digitEnv_arg1⁰ of {
//│ 	Digits _lh_digitEnv_Digits_0⁰ _lh_digitEnv_Digits_1⁰ => _lh_digitEnv_Digits_1⁰
//│ 	| _  => error⁰}
//│ def digits_lh_₁(_lh_digits_arg1⁰) = case _lh_digits_arg1⁰ of {
//│ 	Digits _lh_digits_Digits_0⁰ _lh_digits_Digits_1⁰ => _lh_digits_Digits_0⁰
//│ 	| _  => error⁰}
//│ def enumFromTo_lh_₁(a⁵, b⁰) = if (a⁵ <= b⁰) then [LH_C a⁵ enumFromTo_lh_₁^1171((a⁵ + 1), b⁰)] else [LH_N]
//│ def execStateT_lh_₁(_lh_execStateT_arg1⁰, _lh_execStateT_arg2⁰) = concat_lh_₃^892(map_lh_₃^893((fun x² -> 
//│ 	let _lh_matchIdent¹² = x²
//│ 	in case _lh_matchIdent¹² of {
//│ 		LH_P2 _lh_execStateT_LH_P2_0⁰ _lh_execStateT_LH_P2_1⁰ => [LH_C _lh_execStateT_LH_P2_1⁰ [LH_N]]
//│ 		| _  => error⁰}), runStateT_lh_₁^904(_lh_execStateT_arg1⁰, _lh_execStateT_arg2⁰)))
//│ def filter_lh_₁(f⁷, ls¹²) = case ls¹² of {
//│ 	LH_C h¹⁹ t¹⁹ => if f⁷(h¹⁹) then [LH_C h¹⁹ filter_lh_₁^876(f⁷, t¹⁹)] else filter_lh_₁^882(f⁷, t¹⁹)
//│ 	| LH_N  => [LH_N]}
//│ def foldl_lh_₁(f⁹, i¹, ls¹⁸) = case ls¹⁸ of {
//│ 	LH_C h²⁵ t²⁵ => foldl_lh_₁^1198(f⁹, f⁹(i¹, h²⁵), t²⁵)
//│ 	| LH_N  => i¹}
//│ def foldr_lh_₁(f⁴, i⁰, ls⁵) = case ls⁵ of {
//│ 	LH_C h⁹ t⁹ => f⁴(h⁹, foldr_lh_₁^467(f⁴, i⁰, t⁹))
//│ 	| LH_N  => i⁰}
//│ def fromJust_lh_₁(_lh_fromJust_arg1⁰) = case _lh_fromJust_arg1⁰ of {
//│ 	Just _lh_fromJust_Just_0⁰ => _lh_fromJust_Just_0⁰
//│ 	| _  => error⁰}
//│ def get_lh_₁ = [StateT (fun s⁵ -> [LH_C [LH_P2 s⁵ s⁵] [LH_N]])]
//│ def get_lh_₂ = [StateT (fun s⁴ -> [LH_C [LH_P2 s⁴ s⁴] [LH_N]])]
//│ def guard_lh_₁(_lh_guard_arg1⁰) = case _lh_guard_arg1⁰ of {
//│ 	True  => [StateT (fun s¹⁴ -> [LH_C [LH_P2 [Unit] s¹⁴] [LH_N]])]
//│ 	| False  => [StateT (fun s¹⁵ -> [LH_N])]
//│ 	| _  => error⁰}
//│ def length_lh_₁(ls¹³) = case ls¹³ of {
//│ 	LH_C h²⁰ t²⁰ => (1 + length_lh_₁^917(t²⁰))
//│ 	| LH_N  => 0}
//│ def lift_lh_₁(_lh_lift_arg1⁰) = [StateT (fun s¹ -> concat_lh_₇^38(map_lh_₇^39((fun x⁰ -> [LH_C [LH_P2 x⁰ s¹] [LH_N]]), _lh_lift_arg1⁰)))]
//│ def listDiff_lh_₁ = foldl_lh_₁^53(delete_lh_₁^54)
//│ def lookup_lh_₁(_lh_lookup_arg1², _lh_lookup_arg2²) = case _lh_lookup_arg2² of {
//│ 	LH_N  => [Nothing]
//│ 	| LH_C _lh_lookup_LH_C_0² _lh_lookup_LH_C_1² => case _lh_lookup_LH_C_0² of {
//│ 		LH_P2 _lh_lookup_LH_P2_0² _lh_lookup_LH_P2_1² => if polyEq⁰(_lh_lookup_arg1², _lh_lookup_LH_P2_0²) then [Just _lh_lookup_LH_P2_1²] else lookup_lh_₁^949(_lh_lookup_arg1², _lh_lookup_LH_C_1²)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def lookup_lh_₂(_lh_lookup_arg1¹, _lh_lookup_arg2¹) = case _lh_lookup_arg2¹ of {
//│ 	LH_N  => [Nothing]
//│ 	| LH_C _lh_lookup_LH_C_0¹ _lh_lookup_LH_C_1¹ => case _lh_lookup_LH_C_0¹ of {
//│ 		LH_P2 _lh_lookup_LH_P2_0¹ _lh_lookup_LH_P2_1¹ => if polyEq⁰(_lh_lookup_arg1¹, _lh_lookup_LH_P2_0¹) then [Just _lh_lookup_LH_P2_1¹] else lookup_lh_₂^272(_lh_lookup_arg1¹, _lh_lookup_LH_C_1¹)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def lookup_lh_₃(_lh_lookup_arg1⁰, _lh_lookup_arg2⁰) = case _lh_lookup_arg2⁰ of {
//│ 	LH_N  => [Nothing]
//│ 	| LH_C _lh_lookup_LH_C_0⁰ _lh_lookup_LH_C_1⁰ => case _lh_lookup_LH_C_0⁰ of {
//│ 		LH_P2 _lh_lookup_LH_P2_0⁰ _lh_lookup_LH_P2_1⁰ => if polyEq⁰(_lh_lookup_arg1⁰, _lh_lookup_LH_P2_0⁰) then [Just _lh_lookup_LH_P2_1⁰] else lookup_lh_₃^231(_lh_lookup_arg1⁰, _lh_lookup_LH_C_1⁰)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def mapM_lh_₁(_lh_mapM_arg1⁰, _lh_mapM_arg2⁰) = foldr_lh_₁^581((fun a² -> (fun r⁰ -> bind_lh_₆^582(_lh_mapM_arg1⁰(a²), (fun x¹ -> bind_lh_₆^587(r⁰, (fun xs⁴ -> return_lh_₅^590([LH_C x¹ xs⁴]))))))), return_lh_₅^602([LH_N]), _lh_mapM_arg2⁰)
//│ def map_lh_₁(f⁸, ls¹⁵) = case ls¹⁵ of {
//│ 	LH_C h²² t²² => [LH_C f⁸(h²²) map_lh_₁^993(f⁸, t²²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f⁶, ls⁷) = case ls⁷ of {
//│ 	LH_C h¹³ t¹³ => [LH_C f⁶(h¹³) map_lh_₂^525(f⁶, t¹³)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f⁵, ls⁶) = case ls⁶ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C f⁵(h¹⁰) map_lh_₃^484(f⁵, t¹⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f³, ls⁴) = case ls⁴ of {
//│ 	LH_C h⁷ t⁷ => [LH_C f³(h⁷) map_lh_₄^437(f³, t⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f², ls²) = case ls² of {
//│ 	LH_C h⁴ t⁴ => [LH_C f²(h⁴) map_lh_₅^388(f², t⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f¹, ls¹) = case ls¹ of {
//│ 	LH_C h² t² => [LH_C f¹(h²) map_lh_₆^95(f¹, t²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₇(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₇^60(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs⁸, ys⁵) = case xs⁸ of {
//│ 	LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁^1249(t²⁷, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mappend_lh_₂(xs⁷, ys⁴) = case xs⁷ of {
//│ 	LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₂^1216(t²⁶, ys⁴)]
//│ 	| LH_N  => ys⁴}
//│ def mappend_lh_₃(xs⁶, ys³) = case xs⁶ of {
//│ 	LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃^1187(t²⁴, ys³)]
//│ 	| LH_N  => ys³}
//│ def mappend_lh_₄(xs⁵, ys²) = case xs⁵ of {
//│ 	LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₄^963(t²¹, ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₅(xs³, ys¹) = case xs³ of {
//│ 	LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₅^563(t¹⁶, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₆(xs², ys⁰) = case xs² of {
//│ 	LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₆^537(t¹⁴, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def nub_lh_₁(_lh_nub_arg1⁰) = case _lh_nub_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_nub_LH_C_0⁰ _lh_nub_LH_C_1⁰ => [LH_C _lh_nub_LH_C_0⁰ nub_lh_₁^1229(filter_lh_₁^1230((fun y⁰ -> not⁰(polyEq⁰(_lh_nub_LH_C_0⁰, y⁰))), _lh_nub_LH_C_1⁰))]
//│ 	| _  => error⁰}
//│ def permute_lh_₁(_lh_permute_arg1¹) = bind_lh_₆^292(get_lh_₂^293, (fun st¹ -> bind_lh_₆^295(
//│ 	let xs¹ = digits_lh_₁^296(st¹)
//│ 	in lift_lh_₁^299(
//│ 		let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ listDiff_lh_₁^302(xs¹, [LH_C _lh_listcomp_fun_ls_h¹ [LH_N]])] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun¹(xs¹)), (fun iis¹ -> 
//│ 	let _lh_matchIdent² = iis¹
//│ 	in case _lh_matchIdent² of {
//│ 		LH_P2 _lh_permute_LH_P2_0¹ _lh_permute_LH_P2_1¹ => bind_lh_₆^326(put_lh_₁^327([Digits _lh_permute_LH_P2_1¹ [LH_C [LH_P2 _lh_permute_arg1¹ _lh_permute_LH_P2_0¹] digitEnv_lh_₄^332(st¹)]]), (fun _p¹ -> return_lh_₅^339(_lh_permute_LH_P2_0¹)))
//│ 		| _  => error⁰}))))
//│ def permute_lh_₂(_lh_permute_arg1⁰) = bind_lh_₆^161(get_lh_₂^162, (fun st⁰ -> bind_lh_₆^164(
//│ 	let xs⁰ = digits_lh_₁^165(st⁰)
//│ 	in lift_lh_₁^168(
//│ 		let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ listDiff_lh_₁^171(xs⁰, [LH_C _lh_listcomp_fun_ls_h⁰ [LH_N]])] _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁰(xs⁰)), (fun iis⁰ -> 
//│ 	let _lh_matchIdent¹ = iis⁰
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_P2 _lh_permute_LH_P2_0⁰ _lh_permute_LH_P2_1⁰ => bind_lh_₆^195(put_lh_₁^196([Digits _lh_permute_LH_P2_1⁰ [LH_C [LH_P2 _lh_permute_arg1⁰ _lh_permute_LH_P2_0⁰] digitEnv_lh_₄^201(st⁰)]]), (fun _p⁰ -> return_lh_₅^208(_lh_permute_LH_P2_0⁰)))
//│ 		| _  => error⁰}))))
//│ def put_lh_₁(_lh_put_arg1⁰) = [StateT (fun s⁰ -> [LH_C [LH_P2 [Unit] _lh_put_arg1⁰] [LH_N]])]
//│ def puzzle_lh_₁(_lh_puzzle_arg1⁰, _lh_puzzle_arg2⁰) = 
//│ 	let solution⁰ = solve_lh_₁^1259(transpose_lh_₁^1260(map_lh_₁^1261(reverse_lh_₂^1262, _lh_puzzle_arg1⁰)), reverse_lh_₁^1268(_lh_puzzle_arg2⁰), 0)
//│ 	in let answer⁰ = 	
//│ 		let _lh_matchIdent¹⁵ = execStateT_lh_₁^1274(solution⁰, [Digits enumFromTo_lh_₁^1277(0, 9) [LH_N]])
//│ 		in case _lh_matchIdent¹⁵ of {
//│ 			LH_C _lh_puzzle_LH_C_0⁰ _lh_puzzle_LH_C_1⁰ => _lh_puzzle_LH_C_0⁰
//│ 			| LH_N  => error⁰
//│ 			| _  => error⁰}
//│ 	in let env⁰ = digitEnv_lh_₂^1291(answer⁰)
//│ 	in let look⁰ = (fun c⁰ -> fromJust_lh_₁^1294(lookup_lh_₁^1295(c⁰, env⁰)))
//│ 	in let expand⁰ = (fun ls¹⁹ -> foldl_lh_₁^1302((fun a⁶ -> (fun b¹ -> ((a⁶ * 10) + look⁰(b¹)))), 0, ls¹⁹))
//│ 	in let topVal⁰ = sum_lh_₁^1322(
//│ 		let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 			LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C expand⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun³(_lh_puzzle_arg1⁰))
//│ 	in let botVal⁰ = expand⁰(_lh_puzzle_arg2⁰)
//│ 	in if (length_lh_₁^1343(nub_lh_₁^1344(mappend_lh_₂^1345(concat_lh_₁^1346(_lh_puzzle_arg1⁰), _lh_puzzle_arg2⁰))) > 10) then error⁰ else if (topVal⁰ /= botVal⁰) then error⁰ else unlines_lh_₁^1364(
//│ 		let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => case _lh_listcomp_fun_ls_h⁴ of {
//│ 				LH_P2 _lh_puzzle_LH_P2_0⁰ _lh_puzzle_LH_P2_1⁰ => [LH_C mappend_lh_₄^1367(mappend_lh_₃^1368([LH_C _lh_puzzle_LH_P2_0⁰ [LH_N]], [LH_C ' ' [LH_C '=' [LH_C '>' [LH_C ' ' [LH_N]]]]]), string_of_int⁰(_lh_puzzle_LH_P2_1⁰)) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]
//│ 				| _  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁴(digitEnv_lh_₁^1400(answer⁰)))
//│ def rest_lh_₁(_lh_rest_arg1⁰) = case _lh_rest_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_rest_LH_C_0⁰ _lh_rest_LH_C_1⁰ => _lh_rest_LH_C_1⁰
//│ 	| _  => error⁰}
//│ def return_lh_₁(_lh_return_arg1⁴) = [StateT (fun s¹³ -> [LH_C [LH_P2 _lh_return_arg1⁴ s¹³] [LH_N]])]
//│ def return_lh_₂(_lh_return_arg1³) = [StateT (fun s¹¹ -> [LH_C [LH_P2 _lh_return_arg1³ s¹¹] [LH_N]])]
//│ def return_lh_₃(_lh_return_arg1²) = [StateT (fun s⁸ -> [LH_C [LH_P2 _lh_return_arg1² s⁸] [LH_N]])]
//│ def return_lh_₄(_lh_return_arg1¹) = [StateT (fun s⁶ -> [LH_C [LH_P2 _lh_return_arg1¹ s⁶] [LH_N]])]
//│ def return_lh_₅(_lh_return_arg1⁰) = [StateT (fun s² -> [LH_C [LH_P2 _lh_return_arg1⁰ s²] [LH_N]])]
//│ def reverse_helper_lh_₁(ls¹¹, a⁴) = case ls¹¹ of {
//│ 	LH_C h¹⁸ t¹⁸ => reverse_helper_lh_₁^819(t¹⁸, [LH_C h¹⁸ a⁴])
//│ 	| LH_N  => a⁴}
//│ def reverse_helper_lh_₂(ls¹⁰, a³) = case ls¹⁰ of {
//│ 	LH_C h¹⁷ t¹⁷ => reverse_helper_lh_₂^807(t¹⁷, [LH_C h¹⁷ a³])
//│ 	| LH_N  => a³}
//│ def reverse_lh_₁(ls¹⁷) = reverse_helper_lh_₁^1113(ls¹⁷, [LH_N])
//│ def reverse_lh_₂(ls¹⁶) = reverse_helper_lh_₂^1107(ls¹⁶, [LH_N])
//│ def runStateT_lh_₁(_lh_runStateT_arg1⁷) = case _lh_runStateT_arg1⁷ of {
//│ 	StateT _lh_runStateT_StateT_0⁷ => _lh_runStateT_StateT_0⁷
//│ 	| _  => error⁰}
//│ def runStateT_lh_₂(_lh_runStateT_arg1⁶) = case _lh_runStateT_arg1⁶ of {
//│ 	StateT _lh_runStateT_StateT_0⁶ => _lh_runStateT_StateT_0⁶
//│ 	| _  => error⁰}
//│ def runStateT_lh_₃(_lh_runStateT_arg1⁵) = case _lh_runStateT_arg1⁵ of {
//│ 	StateT _lh_runStateT_StateT_0⁵ => _lh_runStateT_StateT_0⁵
//│ 	| _  => error⁰}
//│ def runStateT_lh_₄(_lh_runStateT_arg1⁴) = case _lh_runStateT_arg1⁴ of {
//│ 	StateT _lh_runStateT_StateT_0⁴ => _lh_runStateT_StateT_0⁴
//│ 	| _  => error⁰}
//│ def runStateT_lh_₅(_lh_runStateT_arg1³) = case _lh_runStateT_arg1³ of {
//│ 	StateT _lh_runStateT_StateT_0³ => _lh_runStateT_StateT_0³
//│ 	| _  => error⁰}
//│ def runStateT_lh_₆(_lh_runStateT_arg1²) = case _lh_runStateT_arg1² of {
//│ 	StateT _lh_runStateT_StateT_0² => _lh_runStateT_StateT_0²
//│ 	| _  => error⁰}
//│ def runStateT_lh_₇(_lh_runStateT_arg1¹) = case _lh_runStateT_arg1¹ of {
//│ 	StateT _lh_runStateT_StateT_0¹ => _lh_runStateT_StateT_0¹
//│ 	| _  => error⁰}
//│ def runStateT_lh_₈(_lh_runStateT_arg1⁰) = case _lh_runStateT_arg1⁰ of {
//│ 	StateT _lh_runStateT_StateT_0⁰ => _lh_runStateT_StateT_0⁰
//│ 	| _  => error⁰}
//│ def select_lh_₁(_lh_select_arg1¹) = bind_lh_₅^695(get_lh_₁^696, (fun st³ -> 
//│ 	let _lh_matchIdent⁷ = lookup_lh_₂^698(_lh_select_arg1¹, digitEnv_lh_₃^701(st³))
//│ 	in case _lh_matchIdent⁷ of {
//│ 		Just _lh_select_Just_0¹ => return_lh_₄^706(_lh_select_Just_0¹)
//│ 		| Nothing  => permute_lh_₁^709(_lh_select_arg1¹)
//│ 		| _  => error⁰}))
//│ def select_lh_₂(_lh_select_arg1⁰) = bind_lh_₆^664(get_lh_₂^665, (fun st² -> 
//│ 	let _lh_matchIdent⁶ = lookup_lh_₃^667(_lh_select_arg1⁰, digitEnv_lh_₄^670(st²))
//│ 	in case _lh_matchIdent⁶ of {
//│ 		Just _lh_select_Just_0⁰ => return_lh_₅^675(_lh_select_Just_0⁰)
//│ 		| Nothing  => permute_lh_₂^678(_lh_select_arg1⁰)
//│ 		| _  => error⁰}))
//│ def solve_lh_₁(_lh_solve_arg1⁰, _lh_solve_arg2⁰, _lh_solve_arg3⁰) = case _lh_solve_arg2⁰ of {
//│ 	LH_C _lh_solve_LH_C_0⁰ _lh_solve_LH_C_1⁰ => bind_lh_₁^1015(
//│ 		let _lh_matchIdent¹³ = _lh_solve_arg1⁰
//│ 		in case _lh_matchIdent¹³ of {
//│ 			LH_N  => return_lh_₂^1018(_lh_solve_arg3⁰)
//│ 			| LH_C _lh_solve_LH_C_0¹ _lh_solve_LH_C_1¹ => bind_lh_₃^1021(mapM_lh_₁^1022(select_lh_₂^1023, _lh_solve_LH_C_0¹), (fun topNS⁰ -> return_lh_₁^1028((sum_lh_₂^1030(topNS⁰) + _lh_solve_arg3⁰))))
//│ 			| _  => error⁰}, (fun topN⁰ -> bind_lh_₂^1043(select_lh_₁^1044(_lh_solve_LH_C_0⁰), (fun botN⁰ -> bind_lh_₄^1048(guard_lh_₁^1049(((topN⁰ % 10) == botN⁰)), (fun _s⁰ -> solve_lh_₁^1061(rest_lh_₁^1062(_lh_solve_arg1⁰), _lh_solve_LH_C_1⁰, div⁰(topN⁰, 10))))))))
//│ 	| _  => case _lh_solve_arg1⁰ of {
//│ 		LH_N  => case _lh_solve_arg2⁰ of {
//│ 			LH_N  => case _lh_solve_arg3⁰ of {
//│ 				0  => return_lh_₃^1083([Unit])
//│ 				| _  => [StateT (fun _p² -> [LH_N])]}
//│ 			| _  => [StateT (fun _p³ -> [LH_N])]}
//│ 		| _  => [StateT (fun _p⁴ -> [LH_N])]}}
//│ def sumAux_lh_₁(ls⁸, a¹) = case ls⁸ of {
//│ 	LH_N  => a¹
//│ 	| LH_C h¹⁵ t¹⁵ => sumAux_lh_₁^549(t¹⁵, (a¹ + h¹⁵))}
//│ def sumAux_lh_₂(ls³, a⁰) = case ls³ of {
//│ 	LH_N  => a⁰
//│ 	| LH_C h⁶ t⁶ => sumAux_lh_₂^416(t⁶, (a⁰ + h⁶))}
//│ def sum_lh_₁(ls¹⁴) = sumAux_lh_₁^978(ls¹⁴, 0)
//│ def sum_lh_₂(ls⁹) = sumAux_lh_₂^745(ls⁹, 0)
//│ def testCryptarithm2_nofib_lh_₁(_lh_testCryptarithm2_nofib_arg1⁰) = 
//│ 	let args⁰ = [LH_C [LH_C 'T' [LH_C 'H' [LH_C 'I' [LH_C 'R' [LH_C 'T' [LH_C 'Y' [LH_N]]]]]]] [LH_C [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]] [LH_C [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]] [LH_C [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]] [LH_C [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]] [LH_C mappend_lh_₁^1482([LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]], if (_lh_testCryptarithm2_nofib_arg1⁰ > 999999) then [LH_C '1' [LH_N]] else [LH_N]) [LH_N]]]]]]]
//│ 	in puzzle_lh_₁^1515(args⁰, [LH_C 'N' [LH_C 'I' [LH_C 'N' [LH_C 'E' [LH_C 'T' [LH_C 'Y' [LH_N]]]]]]])
//│ def transpose_lh_₁(_lh_transpose_arg1⁰) = case _lh_transpose_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_transpose_LH_C_0⁰ _lh_transpose_LH_C_1⁰ => case _lh_transpose_LH_C_0⁰ of {
//│ 		LH_N  => transpose_lh_₁^1122(_lh_transpose_LH_C_1⁰)
//│ 		| LH_C _lh_transpose_LH_C_0¹ _lh_transpose_LH_C_1¹ => 
//│ 			let _lh_matchIdent¹⁴ = unzip_lh_₁^1125(
//│ 				let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 					LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => case _lh_listcomp_fun_ls_h² of {
//│ 						LH_C _lh_transpose_LH_C_0² _lh_transpose_LH_C_1² => [LH_C [LH_P2 _lh_transpose_LH_C_0² _lh_transpose_LH_C_1²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]
//│ 						| _  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun²(_lh_transpose_LH_C_1⁰))
//│ 			in case _lh_matchIdent¹⁴ of {
//│ 				LH_P2 _lh_transpose_LH_P2_0⁰ _lh_transpose_LH_P2_1⁰ => combine_lh_₁^1148(_lh_transpose_LH_C_0¹, _lh_transpose_LH_P2_0⁰, _lh_transpose_LH_C_1¹, _lh_transpose_LH_P2_1⁰)
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = concat_lh_₂^924(map_lh_₂^925((fun l⁰ -> mappend_lh_₆^926(l⁰, [LH_C 'n' [LH_N]])), _lh_unlines_arg1⁰))
//│ def unzip_lh_₁(_lh_unzip_arg1⁰) = foldr_lh_₁^843((fun ab⁰ -> (fun asbs⁰ -> 
//│ 	let _lh_matchIdent¹⁰ = ab⁰
//│ 	in case _lh_matchIdent¹⁰ of {
//│ 		LH_P2 _lh_unzip_LH_P2_0⁰ _lh_unzip_LH_P2_1⁰ => 
//│ 			let _lh_matchIdent¹¹ = asbs⁰
//│ 			in case _lh_matchIdent¹¹ of {
//│ 				LH_P2 _lh_unzip_LH_P2_0¹ _lh_unzip_LH_P2_1¹ => [LH_P2 [LH_C _lh_unzip_LH_P2_0⁰ _lh_unzip_LH_P2_0¹] [LH_C _lh_unzip_LH_P2_1⁰ _lh_unzip_LH_P2_1¹]]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰})), [LH_P2 [LH_N] [LH_N]], _lh_unzip_arg1⁰)
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec filter_lh__d1 f_7 ls_1_2 =
//│ 		  (match ls_1_2 with
//│ 		    | `LH_C(h_1_9, t_1_9) -> 
//│ 		      (if (f_7 h_1_9) then
//│ 		        (`LH_C(h_1_9, ((filter_lh__d1 f_7) t_1_9)))
//│ 		      else
//│ 		        ((filter_lh__d1 f_7) t_1_9))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec nub_lh__d1 _lh_nub_arg1_0 =
//│ 		  (match _lh_nub_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_nub_LH_C_0_0, _lh_nub_LH_C_1_0) -> 
//│ 		      (`LH_C(_lh_nub_LH_C_0_0, (nub_lh__d1 ((filter_lh__d1 (fun y_0 -> 
//│ 		        (not (_lh_nub_LH_C_0_0 = y_0)))) _lh_nub_LH_C_1_0))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec lookup_lh__d1 _lh_lookup_arg1_2 _lh_lookup_arg2_2 =
//│ 		  (match _lh_lookup_arg2_2 with
//│ 		    | `LH_N -> 
//│ 		      (`Nothing)
//│ 		    | `LH_C(_lh_lookup_LH_C_0_2, _lh_lookup_LH_C_1_2) -> 
//│ 		      (match _lh_lookup_LH_C_0_2 with
//│ 		        | `LH_P2(_lh_lookup_LH_P2_0_2, _lh_lookup_LH_P2_1_2) -> 
//│ 		          (if (_lh_lookup_arg1_2 = _lh_lookup_LH_P2_0_2) then
//│ 		            (`Just(_lh_lookup_LH_P2_1_2))
//│ 		          else
//│ 		            ((lookup_lh__d1 _lh_lookup_arg1_2) _lh_lookup_LH_C_1_2))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec digitEnv_lh__d1 _lh_digitEnv_arg1_3 =
//│ 		  (match _lh_digitEnv_arg1_3 with
//│ 		    | `Digits(_lh_digitEnv_Digits_0_3, _lh_digitEnv_Digits_1_3) -> 
//│ 		      _lh_digitEnv_Digits_1_3
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec return_lh__d5 _lh_return_arg1_0 =
//│ 		  (`StateT((fun s_2 -> 
//│ 		    (`LH_C((`LH_P2(_lh_return_arg1_0, s_2)), (`LH_N))))));;
//│ 		let rec digitEnv_lh__d4 _lh_digitEnv_arg1_0 =
//│ 		  (match _lh_digitEnv_arg1_0 with
//│ 		    | `Digits(_lh_digitEnv_Digits_0_0, _lh_digitEnv_Digits_1_0) -> 
//│ 		      _lh_digitEnv_Digits_1_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec get_lh__d2 =
//│ 		  (`StateT((fun s_4 -> 
//│ 		    (`LH_C((`LH_P2(s_4, s_4)), (`LH_N))))));;
//│ 		let rec runStateT_lh__d8 _lh_runStateT_arg1_0 =
//│ 		  (match _lh_runStateT_arg1_0 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_0) -> 
//│ 		      _lh_runStateT_StateT_0_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mappend_lh__d6 xs_2 ys_0 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(h_1_4, t_1_4) -> 
//│ 		      (`LH_C(h_1_4, ((mappend_lh__d6 t_1_4) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec concat_lh__d7 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      ((mappend_lh__d6 h_1) (concat_lh__d7 t_1))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d7 f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C((f_0 h_0), ((map_lh__d7 f_0) t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec bind_lh__d6 _lh_bind_arg1_0 _lh_bind_arg2_0 =
//│ 		  (`StateT((fun s_3 -> 
//│ 		    (concat_lh__d7 ((map_lh__d7 (fun as_0 -> 
//│ 		      (let rec _lh_matchIdent_0 = as_0 in
//│ 		        (match _lh_matchIdent_0 with
//│ 		          | `LH_P2(_lh_bind_LH_P2_0_0, _lh_bind_LH_P2_1_0) -> 
//│ 		            ((runStateT_lh__d8 (_lh_bind_arg2_0 _lh_bind_LH_P2_0_0)) _lh_bind_LH_P2_1_0)
//│ 		          | _ -> 
//│ 		            (failwith "error"))))) ((runStateT_lh__d8 _lh_bind_arg1_0) s_3))))));;
//│ 		let rec lookup_lh__d3 _lh_lookup_arg1_0 _lh_lookup_arg2_0 =
//│ 		  (match _lh_lookup_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`Nothing)
//│ 		    | `LH_C(_lh_lookup_LH_C_0_0, _lh_lookup_LH_C_1_0) -> 
//│ 		      (match _lh_lookup_LH_C_0_0 with
//│ 		        | `LH_P2(_lh_lookup_LH_P2_0_0, _lh_lookup_LH_P2_1_0) -> 
//│ 		          (if (_lh_lookup_arg1_0 = _lh_lookup_LH_P2_0_0) then
//│ 		            (`Just(_lh_lookup_LH_P2_1_0))
//│ 		          else
//│ 		            ((lookup_lh__d3 _lh_lookup_arg1_0) _lh_lookup_LH_C_1_0))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec digits_lh__d1 _lh_digits_arg1_0 =
//│ 		  (match _lh_digits_arg1_0 with
//│ 		    | `Digits(_lh_digits_Digits_0_0, _lh_digits_Digits_1_0) -> 
//│ 		      _lh_digits_Digits_0_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec put_lh__d1 _lh_put_arg1_0 =
//│ 		  (`StateT((fun s_0 -> 
//│ 		    (`LH_C((`LH_P2((`Unit), _lh_put_arg1_0)), (`LH_N))))));;
//│ 		let rec lift_lh__d1 _lh_lift_arg1_0 =
//│ 		  (`StateT((fun s_1 -> 
//│ 		    (concat_lh__d7 ((map_lh__d7 (fun x_0 -> 
//│ 		      (`LH_C((`LH_P2(x_0, s_1)), (`LH_N))))) _lh_lift_arg1_0)))));;
//│ 		let rec foldl_lh__d1 f_9 i_1 ls_1_8 =
//│ 		  (match ls_1_8 with
//│ 		    | `LH_C(h_2_5, t_2_5) -> 
//│ 		      (((foldl_lh__d1 f_9) ((f_9 i_1) h_2_5)) t_2_5)
//│ 		    | `LH_N -> 
//│ 		      i_1);;
//│ 		let rec delete_lh__d1 _lh_delete_arg1_0 _lh_delete_arg2_0 =
//│ 		  (match _lh_delete_arg1_0 with
//│ 		    | `LH_C(_lh_delete_LH_C_0_0, _lh_delete_LH_C_1_0) -> 
//│ 		      (if (_lh_delete_LH_C_0_0 = _lh_delete_arg2_0) then
//│ 		        ((delete_lh__d1 _lh_delete_LH_C_1_0) _lh_delete_arg2_0)
//│ 		      else
//│ 		        (`LH_C(_lh_delete_LH_C_0_0, ((delete_lh__d1 _lh_delete_LH_C_1_0) _lh_delete_arg2_0))))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec listDiff_lh__d1 =
//│ 		  (foldl_lh__d1 delete_lh__d1);;
//│ 		let rec permute_lh__d2 _lh_permute_arg1_0 =
//│ 		  ((bind_lh__d6 get_lh__d2) (fun st_0 -> 
//│ 		    ((bind_lh__d6 (let rec xs_0 = (digits_lh__d1 st_0) in
//│ 		      (lift_lh__d1 (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		        (match _lh_listcomp_fun_para_0 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		            (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_0, ((listDiff_lh__d1 xs_0) (`LH_C(_lh_listcomp_fun_ls_h_0, (`LH_N)))))), (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_0 xs_0))))) (fun iis_0 -> 
//│ 		      (let rec _lh_matchIdent_1 = iis_0 in
//│ 		        (match _lh_matchIdent_1 with
//│ 		          | `LH_P2(_lh_permute_LH_P2_0_0, _lh_permute_LH_P2_1_0) -> 
//│ 		            ((bind_lh__d6 (put_lh__d1 (`Digits(_lh_permute_LH_P2_1_0, (`LH_C((`LH_P2(_lh_permute_arg1_0, _lh_permute_LH_P2_0_0)), (digitEnv_lh__d4 st_0))))))) (fun _p_0 -> 
//│ 		              (return_lh__d5 _lh_permute_LH_P2_0_0)))
//│ 		          | _ -> 
//│ 		            (failwith "error")))))));;
//│ 		let rec select_lh__d2 _lh_select_arg1_0 =
//│ 		  ((bind_lh__d6 get_lh__d2) (fun st_2 -> 
//│ 		    (let rec _lh_matchIdent_6 = ((lookup_lh__d3 _lh_select_arg1_0) (digitEnv_lh__d4 st_2)) in
//│ 		      (match _lh_matchIdent_6 with
//│ 		        | `Just(_lh_select_Just_0_0) -> 
//│ 		          (return_lh__d5 _lh_select_Just_0_0)
//│ 		        | `Nothing -> 
//│ 		          (permute_lh__d2 _lh_select_arg1_0)
//│ 		        | _ -> 
//│ 		          (failwith "error")))));;
//│ 		let rec digitEnv_lh__d3 _lh_digitEnv_arg1_1 =
//│ 		  (match _lh_digitEnv_arg1_1 with
//│ 		    | `Digits(_lh_digitEnv_Digits_0_1, _lh_digitEnv_Digits_1_1) -> 
//│ 		      _lh_digitEnv_Digits_1_1
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec lookup_lh__d2 _lh_lookup_arg1_1 _lh_lookup_arg2_1 =
//│ 		  (match _lh_lookup_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      (`Nothing)
//│ 		    | `LH_C(_lh_lookup_LH_C_0_1, _lh_lookup_LH_C_1_1) -> 
//│ 		      (match _lh_lookup_LH_C_0_1 with
//│ 		        | `LH_P2(_lh_lookup_LH_P2_0_1, _lh_lookup_LH_P2_1_1) -> 
//│ 		          (if (_lh_lookup_arg1_1 = _lh_lookup_LH_P2_0_1) then
//│ 		            (`Just(_lh_lookup_LH_P2_1_1))
//│ 		          else
//│ 		            ((lookup_lh__d2 _lh_lookup_arg1_1) _lh_lookup_LH_C_1_1))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec get_lh__d1 =
//│ 		  (`StateT((fun s_5 -> 
//│ 		    (`LH_C((`LH_P2(s_5, s_5)), (`LH_N))))));;
//│ 		let rec permute_lh__d1 _lh_permute_arg1_1 =
//│ 		  ((bind_lh__d6 get_lh__d2) (fun st_1 -> 
//│ 		    ((bind_lh__d6 (let rec xs_1 = (digits_lh__d1 st_1) in
//│ 		      (lift_lh__d1 (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		        (match _lh_listcomp_fun_para_1 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		            (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_1, ((listDiff_lh__d1 xs_1) (`LH_C(_lh_listcomp_fun_ls_h_1, (`LH_N)))))), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_1 xs_1))))) (fun iis_1 -> 
//│ 		      (let rec _lh_matchIdent_2 = iis_1 in
//│ 		        (match _lh_matchIdent_2 with
//│ 		          | `LH_P2(_lh_permute_LH_P2_0_1, _lh_permute_LH_P2_1_1) -> 
//│ 		            ((bind_lh__d6 (put_lh__d1 (`Digits(_lh_permute_LH_P2_1_1, (`LH_C((`LH_P2(_lh_permute_arg1_1, _lh_permute_LH_P2_0_1)), (digitEnv_lh__d4 st_1))))))) (fun _p_1 -> 
//│ 		              (return_lh__d5 _lh_permute_LH_P2_0_1)))
//│ 		          | _ -> 
//│ 		            (failwith "error")))))));;
//│ 		let rec return_lh__d4 _lh_return_arg1_1 =
//│ 		  (`StateT((fun s_6 -> 
//│ 		    (`LH_C((`LH_P2(_lh_return_arg1_1, s_6)), (`LH_N))))));;
//│ 		let rec bind_lh__d5 _lh_bind_arg1_1 _lh_bind_arg2_1 =
//│ 		  (`StateT((fun s_7 -> 
//│ 		    (concat_lh__d7 ((map_lh__d7 (fun as_1 -> 
//│ 		      (let rec _lh_matchIdent_3 = as_1 in
//│ 		        (match _lh_matchIdent_3 with
//│ 		          | `LH_P2(_lh_bind_LH_P2_0_1, _lh_bind_LH_P2_1_1) -> 
//│ 		            ((runStateT_lh__d8 (_lh_bind_arg2_1 _lh_bind_LH_P2_0_1)) _lh_bind_LH_P2_1_1)
//│ 		          | _ -> 
//│ 		            (failwith "error"))))) ((runStateT_lh__d8 _lh_bind_arg1_1) s_7))))));;
//│ 		let rec select_lh__d1 _lh_select_arg1_1 =
//│ 		  ((bind_lh__d5 get_lh__d1) (fun st_3 -> 
//│ 		    (let rec _lh_matchIdent_7 = ((lookup_lh__d2 _lh_select_arg1_1) (digitEnv_lh__d3 st_3)) in
//│ 		      (match _lh_matchIdent_7 with
//│ 		        | `Just(_lh_select_Just_0_1) -> 
//│ 		          (return_lh__d4 _lh_select_Just_0_1)
//│ 		        | `Nothing -> 
//│ 		          (permute_lh__d1 _lh_select_arg1_1)
//│ 		        | _ -> 
//│ 		          (failwith "error")))));;
//│ 		let rec guard_lh__d1 _lh_guard_arg1_0 =
//│ 		  (match _lh_guard_arg1_0 with
//│ 		    | true -> 
//│ 		      (`StateT((fun s_1_4 -> 
//│ 		        (`LH_C((`LH_P2((`Unit), s_1_4)), (`LH_N))))))
//│ 		    | false -> 
//│ 		      (`StateT((fun s_1_5 -> 
//│ 		        (`LH_N))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec concat_lh__d6 lss_1 =
//│ 		  (match lss_1 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      ((mappend_lh__d6 h_3) (concat_lh__d6 t_3))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec runStateT_lh__d6 _lh_runStateT_arg1_2 =
//│ 		  (match _lh_runStateT_arg1_2 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_2) -> 
//│ 		      _lh_runStateT_StateT_0_2
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec runStateT_lh__d7 _lh_runStateT_arg1_1 =
//│ 		  (match _lh_runStateT_arg1_1 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_1) -> 
//│ 		      _lh_runStateT_StateT_0_1
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec map_lh__d6 f_1 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C((f_1 h_2), ((map_lh__d6 f_1) t_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec bind_lh__d3 _lh_bind_arg1_3 _lh_bind_arg2_3 =
//│ 		  (`StateT((fun s_1_0 -> 
//│ 		    (concat_lh__d6 ((map_lh__d6 (fun as_3 -> 
//│ 		      (let rec _lh_matchIdent_5 = as_3 in
//│ 		        (match _lh_matchIdent_5 with
//│ 		          | `LH_P2(_lh_bind_LH_P2_0_3, _lh_bind_LH_P2_1_3) -> 
//│ 		            ((runStateT_lh__d7 (_lh_bind_arg2_3 _lh_bind_LH_P2_0_3)) _lh_bind_LH_P2_1_3)
//│ 		          | _ -> 
//│ 		            (failwith "error"))))) ((runStateT_lh__d6 _lh_bind_arg1_3) s_1_0))))));;
//│ 		let rec rest_lh__d1 _lh_rest_arg1_0 =
//│ 		  (match _lh_rest_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_rest_LH_C_0_0, _lh_rest_LH_C_1_0) -> 
//│ 		      _lh_rest_LH_C_1_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec runStateT_lh__d3 _lh_runStateT_arg1_5 =
//│ 		  (match _lh_runStateT_arg1_5 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_5) -> 
//│ 		      _lh_runStateT_StateT_0_5
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec concat_lh__d4 lss_3 =
//│ 		  (match lss_3 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      ((mappend_lh__d6 h_8) (concat_lh__d4 t_8))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec runStateT_lh__d2 _lh_runStateT_arg1_6 =
//│ 		  (match _lh_runStateT_arg1_6 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_6) -> 
//│ 		      _lh_runStateT_StateT_0_6
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec map_lh__d4 f_3 ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      (`LH_C((f_3 h_7), ((map_lh__d4 f_3) t_7)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec bind_lh__d1 _lh_bind_arg1_5 _lh_bind_arg2_5 =
//│ 		  (`StateT((fun s_1_6 -> 
//│ 		    (concat_lh__d4 ((map_lh__d4 (fun as_5 -> 
//│ 		      (let rec _lh_matchIdent_9 = as_5 in
//│ 		        (match _lh_matchIdent_9 with
//│ 		          | `LH_P2(_lh_bind_LH_P2_0_5, _lh_bind_LH_P2_1_5) -> 
//│ 		            ((runStateT_lh__d3 (_lh_bind_arg2_5 _lh_bind_LH_P2_0_5)) _lh_bind_LH_P2_1_5)
//│ 		          | _ -> 
//│ 		            (failwith "error"))))) ((runStateT_lh__d2 _lh_bind_arg1_5) s_1_6))))));;
//│ 		let rec return_lh__d3 _lh_return_arg1_2 =
//│ 		  (`StateT((fun s_8 -> 
//│ 		    (`LH_C((`LH_P2(_lh_return_arg1_2, s_8)), (`LH_N))))));;
//│ 		let rec return_lh__d2 _lh_return_arg1_3 =
//│ 		  (`StateT((fun s_1_1 -> 
//│ 		    (`LH_C((`LH_P2(_lh_return_arg1_3, s_1_1)), (`LH_N))))));;
//│ 		let rec bind_lh__d4 _lh_bind_arg1_2 _lh_bind_arg2_2 =
//│ 		  (`StateT((fun s_9 -> 
//│ 		    (concat_lh__d7 ((map_lh__d7 (fun as_2 -> 
//│ 		      (let rec _lh_matchIdent_4 = as_2 in
//│ 		        (match _lh_matchIdent_4 with
//│ 		          | `LH_P2(_lh_bind_LH_P2_0_2, _lh_bind_LH_P2_1_2) -> 
//│ 		            ((runStateT_lh__d8 (_lh_bind_arg2_2 _lh_bind_LH_P2_0_2)) _lh_bind_LH_P2_1_2)
//│ 		          | _ -> 
//│ 		            (failwith "error"))))) ((runStateT_lh__d8 _lh_bind_arg1_2) s_9))))));;
//│ 		let rec return_lh__d1 _lh_return_arg1_4 =
//│ 		  (`StateT((fun s_1_3 -> 
//│ 		    (`LH_C((`LH_P2(_lh_return_arg1_4, s_1_3)), (`LH_N))))));;
//│ 		let rec foldr_lh__d1 f_4 i_0 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_9, t_9) -> 
//│ 		      ((f_4 h_9) (((foldr_lh__d1 f_4) i_0) t_9))
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec mapM_lh__d1 _lh_mapM_arg1_0 _lh_mapM_arg2_0 =
//│ 		  (((foldr_lh__d1 (fun a_2 r_0 -> 
//│ 		    ((bind_lh__d6 (_lh_mapM_arg1_0 a_2)) (fun x_1 -> 
//│ 		      ((bind_lh__d6 r_0) (fun xs_4 -> 
//│ 		        (return_lh__d5 (`LH_C(x_1, xs_4))))))))) (return_lh__d5 (`LH_N))) _lh_mapM_arg2_0);;
//│ 		let rec sumAux_lh__d2 ls_3 a_0 =
//│ 		  (match ls_3 with
//│ 		    | `LH_N -> 
//│ 		      a_0
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      ((sumAux_lh__d2 t_6) (a_0 + h_6)));;
//│ 		let rec sum_lh__d2 ls_9 =
//│ 		  ((sumAux_lh__d2 ls_9) 0);;
//│ 		let rec concat_lh__d5 lss_2 =
//│ 		  (match lss_2 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      ((mappend_lh__d6 h_5) (concat_lh__d5 t_5))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d5 f_2 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      (`LH_C((f_2 h_4), ((map_lh__d5 f_2) t_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec runStateT_lh__d5 _lh_runStateT_arg1_3 =
//│ 		  (match _lh_runStateT_arg1_3 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_3) -> 
//│ 		      _lh_runStateT_StateT_0_3
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec runStateT_lh__d4 _lh_runStateT_arg1_4 =
//│ 		  (match _lh_runStateT_arg1_4 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_4) -> 
//│ 		      _lh_runStateT_StateT_0_4
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec bind_lh__d2 _lh_bind_arg1_4 _lh_bind_arg2_4 =
//│ 		  (`StateT((fun s_1_2 -> 
//│ 		    (concat_lh__d5 ((map_lh__d5 (fun as_4 -> 
//│ 		      (let rec _lh_matchIdent_8 = as_4 in
//│ 		        (match _lh_matchIdent_8 with
//│ 		          | `LH_P2(_lh_bind_LH_P2_0_4, _lh_bind_LH_P2_1_4) -> 
//│ 		            ((runStateT_lh__d5 (_lh_bind_arg2_4 _lh_bind_LH_P2_0_4)) _lh_bind_LH_P2_1_4)
//│ 		          | _ -> 
//│ 		            (failwith "error"))))) ((runStateT_lh__d4 _lh_bind_arg1_4) s_1_2))))));;
//│ 		let rec solve_lh__d1 _lh_solve_arg1_0 _lh_solve_arg2_0 _lh_solve_arg3_0 =
//│ 		  (match _lh_solve_arg2_0 with
//│ 		    | `LH_C(_lh_solve_LH_C_0_0, _lh_solve_LH_C_1_0) -> 
//│ 		      ((bind_lh__d1 (let rec _lh_matchIdent_1_3 = _lh_solve_arg1_0 in
//│ 		        (match _lh_matchIdent_1_3 with
//│ 		          | `LH_N -> 
//│ 		            (return_lh__d2 _lh_solve_arg3_0)
//│ 		          | `LH_C(_lh_solve_LH_C_0_1, _lh_solve_LH_C_1_1) -> 
//│ 		            ((bind_lh__d3 ((mapM_lh__d1 select_lh__d2) _lh_solve_LH_C_0_1)) (fun topNS_0 -> 
//│ 		              (return_lh__d1 ((sum_lh__d2 topNS_0) + _lh_solve_arg3_0))))
//│ 		          | _ -> 
//│ 		            (failwith "error")))) (fun topN_0 -> 
//│ 		        ((bind_lh__d2 (select_lh__d1 _lh_solve_LH_C_0_0)) (fun botN_0 -> 
//│ 		          ((bind_lh__d4 (guard_lh__d1 ((topN_0 mod 10) = botN_0))) (fun _s_0 -> 
//│ 		            (((solve_lh__d1 (rest_lh__d1 _lh_solve_arg1_0)) _lh_solve_LH_C_1_0) (topN_0 / 10))))))))
//│ 		    | _ -> 
//│ 		      (match _lh_solve_arg1_0 with
//│ 		        | `LH_N -> 
//│ 		          (match _lh_solve_arg2_0 with
//│ 		            | `LH_N -> 
//│ 		              (match _lh_solve_arg3_0 with
//│ 		                | 0 -> 
//│ 		                  (return_lh__d3 (`Unit))
//│ 		                | _ -> 
//│ 		                  (`StateT((fun _p_2 -> 
//│ 		                    (`LH_N)))))
//│ 		            | _ -> 
//│ 		              (`StateT((fun _p_3 -> 
//│ 		                (`LH_N)))))
//│ 		        | _ -> 
//│ 		          (`StateT((fun _p_4 -> 
//│ 		            (`LH_N))))));;
//│ 		let rec mappend_lh__d2 xs_7 ys_4 =
//│ 		  (match xs_7 with
//│ 		    | `LH_C(h_2_6, t_2_6) -> 
//│ 		      (`LH_C(h_2_6, ((mappend_lh__d2 t_2_6) ys_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_4);;
//│ 		let rec sumAux_lh__d1 ls_8 a_1 =
//│ 		  (match ls_8 with
//│ 		    | `LH_N -> 
//│ 		      a_1
//│ 		    | `LH_C(h_1_5, t_1_5) -> 
//│ 		      ((sumAux_lh__d1 t_1_5) (a_1 + h_1_5)));;
//│ 		let rec sum_lh__d1 ls_1_4 =
//│ 		  ((sumAux_lh__d1 ls_1_4) 0);;
//│ 		let rec mappend_lh__d4 xs_5 ys_2 =
//│ 		  (match xs_5 with
//│ 		    | `LH_C(h_2_1, t_2_1) -> 
//│ 		      (`LH_C(h_2_1, ((mappend_lh__d4 t_2_1) ys_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2);;
//│ 		let rec map_lh__d1 f_8 ls_1_5 =
//│ 		  (match ls_1_5 with
//│ 		    | `LH_C(h_2_2, t_2_2) -> 
//│ 		      (`LH_C((f_8 h_2_2), ((map_lh__d1 f_8) t_2_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec enumFromTo_lh__d1 a_5 b_0 =
//│ 		  (if (a_5 <= b_0) then
//│ 		    (`LH_C(a_5, ((enumFromTo_lh__d1 (a_5 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec digitEnv_lh__d2 _lh_digitEnv_arg1_2 =
//│ 		  (match _lh_digitEnv_arg1_2 with
//│ 		    | `Digits(_lh_digitEnv_Digits_0_2, _lh_digitEnv_Digits_1_2) -> 
//│ 		      _lh_digitEnv_Digits_1_2
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec concat_lh__d3 lss_4 =
//│ 		  (match lss_4 with
//│ 		    | `LH_C(h_1_1, t_1_1) -> 
//│ 		      ((mappend_lh__d6 h_1_1) (concat_lh__d3 t_1_1))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec runStateT_lh__d1 _lh_runStateT_arg1_7 =
//│ 		  (match _lh_runStateT_arg1_7 with
//│ 		    | `StateT(_lh_runStateT_StateT_0_7) -> 
//│ 		      _lh_runStateT_StateT_0_7
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec map_lh__d3 f_5 ls_6 =
//│ 		  (match ls_6 with
//│ 		    | `LH_C(h_1_0, t_1_0) -> 
//│ 		      (`LH_C((f_5 h_1_0), ((map_lh__d3 f_5) t_1_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec execStateT_lh__d1 _lh_execStateT_arg1_0 _lh_execStateT_arg2_0 =
//│ 		  (concat_lh__d3 ((map_lh__d3 (fun x_2 -> 
//│ 		    (let rec _lh_matchIdent_1_2 = x_2 in
//│ 		      (match _lh_matchIdent_1_2 with
//│ 		        | `LH_P2(_lh_execStateT_LH_P2_0_0, _lh_execStateT_LH_P2_1_0) -> 
//│ 		          (`LH_C(_lh_execStateT_LH_P2_1_0, (`LH_N)))
//│ 		        | _ -> 
//│ 		          (failwith "error"))))) ((runStateT_lh__d1 _lh_execStateT_arg1_0) _lh_execStateT_arg2_0)));;
//│ 		let rec length_lh__d1 ls_1_3 =
//│ 		  (match ls_1_3 with
//│ 		    | `LH_C(h_2_0, t_2_0) -> 
//│ 		      (1 + (length_lh__d1 t_2_0))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec unzip_lh__d1 _lh_unzip_arg1_0 =
//│ 		  (((foldr_lh__d1 (fun ab_0 asbs_0 -> 
//│ 		    (let rec _lh_matchIdent_1_0 = ab_0 in
//│ 		      (match _lh_matchIdent_1_0 with
//│ 		        | `LH_P2(_lh_unzip_LH_P2_0_0, _lh_unzip_LH_P2_1_0) -> 
//│ 		          (let rec _lh_matchIdent_1_1 = asbs_0 in
//│ 		            (match _lh_matchIdent_1_1 with
//│ 		              | `LH_P2(_lh_unzip_LH_P2_0_1, _lh_unzip_LH_P2_1_1) -> 
//│ 		                (`LH_P2((`LH_C(_lh_unzip_LH_P2_0_0, _lh_unzip_LH_P2_0_1)), (`LH_C(_lh_unzip_LH_P2_1_0, _lh_unzip_LH_P2_1_1))))
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        | _ -> 
//│ 		          (failwith "error"))))) (`LH_P2((`LH_N), (`LH_N)))) _lh_unzip_arg1_0);;
//│ 		let rec combine_lh__d1 _lh_combine_arg1_0 _lh_combine_arg2_0 _lh_combine_arg3_0 _lh_combine_arg4_0 =
//│ 		  (`LH_C((`LH_C(_lh_combine_arg1_0, _lh_combine_arg2_0)), (transpose_lh__d1 (`LH_C(_lh_combine_arg3_0, _lh_combine_arg4_0)))))
//│ 		and
//│ 		transpose_lh__d1 _lh_transpose_arg1_0 =
//│ 		  (match _lh_transpose_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_transpose_LH_C_0_0, _lh_transpose_LH_C_1_0) -> 
//│ 		      (match _lh_transpose_LH_C_0_0 with
//│ 		        | `LH_N -> 
//│ 		          (transpose_lh__d1 _lh_transpose_LH_C_1_0)
//│ 		        | `LH_C(_lh_transpose_LH_C_0_1, _lh_transpose_LH_C_1_1) -> 
//│ 		          (let rec _lh_matchIdent_1_4 = (unzip_lh__d1 (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		            (match _lh_listcomp_fun_para_2 with
//│ 		              | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		                (match _lh_listcomp_fun_ls_h_2 with
//│ 		                  | `LH_C(_lh_transpose_LH_C_0_2, _lh_transpose_LH_C_1_2) -> 
//│ 		                    (`LH_C((`LH_P2(_lh_transpose_LH_C_0_2, _lh_transpose_LH_C_1_2)), (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2)))
//│ 		                  | _ -> 
//│ 		                    (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2))
//│ 		              | `LH_N -> 
//│ 		                (`LH_N))) in
//│ 		            (_lh_listcomp_fun_2 _lh_transpose_LH_C_1_0))) in
//│ 		            (match _lh_matchIdent_1_4 with
//│ 		              | `LH_P2(_lh_transpose_LH_P2_0_0, _lh_transpose_LH_P2_1_0) -> 
//│ 		                ((((combine_lh__d1 _lh_transpose_LH_C_0_1) _lh_transpose_LH_P2_0_0) _lh_transpose_LH_C_1_1) _lh_transpose_LH_P2_1_0)
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec fromJust_lh__d1 _lh_fromJust_arg1_0 =
//│ 		  (match _lh_fromJust_arg1_0 with
//│ 		    | `Just(_lh_fromJust_Just_0_0) -> 
//│ 		      _lh_fromJust_Just_0_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec reverse_helper_lh__d2 ls_1_0 a_3 =
//│ 		  (match ls_1_0 with
//│ 		    | `LH_C(h_1_7, t_1_7) -> 
//│ 		      ((reverse_helper_lh__d2 t_1_7) (`LH_C(h_1_7, a_3)))
//│ 		    | `LH_N -> 
//│ 		      a_3);;
//│ 		let rec reverse_lh__d2 ls_1_6 =
//│ 		  ((reverse_helper_lh__d2 ls_1_6) (`LH_N));;
//│ 		let rec map_lh__d2 f_6 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_1_3, t_1_3) -> 
//│ 		      (`LH_C((f_6 h_1_3), ((map_lh__d2 f_6) t_1_3)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec concat_lh__d2 lss_5 =
//│ 		  (match lss_5 with
//│ 		    | `LH_C(h_1_2, t_1_2) -> 
//│ 		      ((mappend_lh__d6 h_1_2) (concat_lh__d2 t_1_2))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec unlines_lh__d1 _lh_unlines_arg1_0 =
//│ 		  (concat_lh__d2 ((map_lh__d2 (fun l_0 -> 
//│ 		    ((mappend_lh__d6 l_0) (`LH_C('n', (`LH_N)))))) _lh_unlines_arg1_0));;
//│ 		let rec mappend_lh__d3 xs_6 ys_3 =
//│ 		  (match xs_6 with
//│ 		    | `LH_C(h_2_4, t_2_4) -> 
//│ 		      (`LH_C(h_2_4, ((mappend_lh__d3 t_2_4) ys_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_3);;
//│ 		let rec mappend_lh__d5 xs_3 ys_1 =
//│ 		  (match xs_3 with
//│ 		    | `LH_C(h_1_6, t_1_6) -> 
//│ 		      (`LH_C(h_1_6, ((mappend_lh__d5 t_1_6) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec concat_lh__d1 lss_6 =
//│ 		  (match lss_6 with
//│ 		    | `LH_C(h_2_3, t_2_3) -> 
//│ 		      ((mappend_lh__d5 h_2_3) (concat_lh__d1 t_2_3))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec reverse_helper_lh__d1 ls_1_1 a_4 =
//│ 		  (match ls_1_1 with
//│ 		    | `LH_C(h_1_8, t_1_8) -> 
//│ 		      ((reverse_helper_lh__d1 t_1_8) (`LH_C(h_1_8, a_4)))
//│ 		    | `LH_N -> 
//│ 		      a_4);;
//│ 		let rec reverse_lh__d1 ls_1_7 =
//│ 		  ((reverse_helper_lh__d1 ls_1_7) (`LH_N));;
//│ 		let rec puzzle_lh__d1 _lh_puzzle_arg1_0 _lh_puzzle_arg2_0 =
//│ 		  (let rec solution_0 = (((solve_lh__d1 (transpose_lh__d1 ((map_lh__d1 reverse_lh__d2) _lh_puzzle_arg1_0))) (reverse_lh__d1 _lh_puzzle_arg2_0)) 0) in
//│ 		    (let rec answer_0 = (let rec _lh_matchIdent_1_5 = ((execStateT_lh__d1 solution_0) (`Digits(((enumFromTo_lh__d1 0) 9), (`LH_N)))) in
//│ 		      (match _lh_matchIdent_1_5 with
//│ 		        | `LH_C(_lh_puzzle_LH_C_0_0, _lh_puzzle_LH_C_1_0) -> 
//│ 		          _lh_puzzle_LH_C_0_0
//│ 		        | `LH_N -> 
//│ 		          (failwith "error")
//│ 		        | _ -> 
//│ 		          (failwith "error"))) in
//│ 		      (let rec env_0 = (digitEnv_lh__d2 answer_0) in
//│ 		        (let rec look_0 = (fun c_0 -> 
//│ 		          (fromJust_lh__d1 ((lookup_lh__d1 c_0) env_0))) in
//│ 		          (let rec expand_0 = (fun ls_1_9 -> 
//│ 		            (((foldl_lh__d1 (fun a_6 b_1 -> 
//│ 		              ((a_6 * 10) + (look_0 b_1)))) 0) ls_1_9)) in
//│ 		            (let rec topVal_0 = (sum_lh__d1 (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		              (match _lh_listcomp_fun_para_3 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_3, _lh_listcomp_fun_ls_t_3) -> 
//│ 		                  (`LH_C((expand_0 _lh_listcomp_fun_ls_h_3), (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3)))
//│ 		                | `LH_N -> 
//│ 		                  (`LH_N))) in
//│ 		              (_lh_listcomp_fun_3 _lh_puzzle_arg1_0))) in
//│ 		              (let rec botVal_0 = (expand_0 _lh_puzzle_arg2_0) in
//│ 		                (if ((length_lh__d1 (nub_lh__d1 ((mappend_lh__d2 (concat_lh__d1 _lh_puzzle_arg1_0)) _lh_puzzle_arg2_0))) > 10) then
//│ 		                  (failwith "error")
//│ 		                else
//│ 		                  (if (topVal_0 <> botVal_0) then
//│ 		                    (failwith "error")
//│ 		                  else
//│ 		                    (unlines_lh__d1 (let rec _lh_listcomp_fun_4 = (fun _lh_listcomp_fun_para_4 -> 
//│ 		                      (match _lh_listcomp_fun_para_4 with
//│ 		                        | `LH_C(_lh_listcomp_fun_ls_h_4, _lh_listcomp_fun_ls_t_4) -> 
//│ 		                          (match _lh_listcomp_fun_ls_h_4 with
//│ 		                            | `LH_P2(_lh_puzzle_LH_P2_0_0, _lh_puzzle_LH_P2_1_0) -> 
//│ 		                              (`LH_C(((mappend_lh__d4 ((mappend_lh__d3 (`LH_C(_lh_puzzle_LH_P2_0_0, (`LH_N)))) (`LH_C(' ', (`LH_C('=', (`LH_C('>', (`LH_C(' ', (`LH_N))))))))))) (string_of_int _lh_puzzle_LH_P2_1_0)), (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4)))
//│ 		                            | _ -> 
//│ 		                              (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4))
//│ 		                        | `LH_N -> 
//│ 		                          (`LH_N))) in
//│ 		                      (_lh_listcomp_fun_4 (digitEnv_lh__d1 answer_0)))))))))))));;
//│ 		let rec mappend_lh__d1 xs_8 ys_5 =
//│ 		  (match xs_8 with
//│ 		    | `LH_C(h_2_7, t_2_7) -> 
//│ 		      (`LH_C(h_2_7, ((mappend_lh__d1 t_2_7) ys_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_5);;
//│ 		let rec testCryptarithm2_nofib_lh__d1 _lh_testCryptarithm2_nofib_arg1_0 =
//│ 		  (let rec args_0 = (`LH_C((`LH_C('T', (`LH_C('H', (`LH_C('I', (`LH_C('R', (`LH_C('T', (`LH_C('Y', (`LH_N))))))))))))), (`LH_C((`LH_C('T', (`LH_C('W', (`LH_C('E', (`LH_C('L', (`LH_C('V', (`LH_C('E', (`LH_N))))))))))))), (`LH_C((`LH_C('T', (`LH_C('W', (`LH_C('E', (`LH_C('L', (`LH_C('V', (`LH_C('E', (`LH_N))))))))))))), (`LH_C((`LH_C('T', (`LH_C('W', (`LH_C('E', (`LH_C('L', (`LH_C('V', (`LH_C('E', (`LH_N))))))))))))), (`LH_C((`LH_C('T', (`LH_C('W', (`LH_C('E', (`LH_C('L', (`LH_C('V', (`LH_C('E', (`LH_N))))))))))))), (`LH_C(((mappend_lh__d1 (`LH_C('T', (`LH_C('W', (`LH_C('E', (`LH_C('L', (`LH_C('V', (`LH_C('E', (`LH_N)))))))))))))) (if (_lh_testCryptarithm2_nofib_arg1_0 > 999999) then
//│ 		    (`LH_C('1', (`LH_N)))
//│ 		  else
//│ 		    (`LH_N))), (`LH_N))))))))))))) in
//│ 		    ((puzzle_lh__d1 args_0) (`LH_C('N', (`LH_C('I', (`LH_C('N', (`LH_C('E', (`LH_C('T', (`LH_C('Y', (`LH_N)))))))))))))));;
//│ 		(testCryptarithm2_nofib_lh__d1 1500)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion strategies >>>>>>>
//│ [LH_C f⁰(h⁰) map_lh_₇(f⁰, t⁰)]: 65 --->
//│ 	case lss⁰ of {LH_C h¹ t¹ => mappend_lh_₆(h¹, concat_lh_₇(t¹)) | LH_N  => [LH_N]}: 84
//│ [LH_N]: 66 --->
//│ 	case lss⁰ of {LH_C h¹ t¹ => mappend_lh_₆(h¹, concat_lh_₇(t¹)) | LH_N  => [LH_N]}: 84
//│ [LH_C f¹(h²) map_lh_₆(f¹, t²)]: 100 --->
//│ 	case lss¹ of {LH_C h³ t³ => mappend_lh_₆(h³, concat_lh_₆(t³)) | LH_N  => [LH_N]}: 119
//│ [LH_N]: 101 --->
//│ 	case lss¹ of {LH_C h³ t³ => mappend_lh_₆(h³, concat_lh_₆(t³)) | LH_N  => [LH_N]}: 119
//│ [Nothing]: 222 --->
//│ 	case _lh_matchIdent⁶ of {Just _lh_select_Just_0⁰ => return_lh_₅(_lh_select_Just_0⁰) | Nothing  => permute_lh_₂(_lh_select_arg1⁰) | _  => error⁰}: 682
//│ [Just _lh_lookup_LH_P2_1⁰]: 230 --->
//│ 	case _lh_matchIdent⁶ of {Just _lh_select_Just_0⁰ => return_lh_₅(_lh_select_Just_0⁰) | Nothing  => permute_lh_₂(_lh_select_arg1⁰) | _  => error⁰}: 682
//│ [Nothing]: 263 --->
//│ 	case _lh_matchIdent⁷ of {Just _lh_select_Just_0¹ => return_lh_₄(_lh_select_Just_0¹) | Nothing  => permute_lh_₁(_lh_select_arg1¹) | _  => error⁰}: 713
//│ [Just _lh_lookup_LH_P2_1¹]: 271 --->
//│ 	case _lh_matchIdent⁷ of {Just _lh_select_Just_0¹ => return_lh_₄(_lh_select_Just_0¹) | Nothing  => permute_lh_₁(_lh_select_arg1¹) | _  => error⁰}: 713
//│ [StateT (fun s⁷ -> concat_lh_₇(map_lh_₇((fun as¹ -> let _lh_matchIdent³ = as¹
//│ in case _lh_matchIdent³ of {LH_P2 _lh_bind_LH_P2_0¹ _lh_bind_LH_P2_1¹ => runStateT_lh_₈(_lh_bind_arg2¹(_lh_bind_LH_P2_0¹), _lh_bind_LH_P2_1¹) | _  => error⁰}), runStateT_lh_₈(_lh_bind_arg1¹, s⁷))))]: 376 --->
//│ 	case _lh_runStateT_arg1⁴ of {StateT _lh_runStateT_StateT_0⁴ => _lh_runStateT_StateT_0⁴ | _  => error⁰}: 401
//│ [LH_C f²(h⁴) map_lh_₅(f², t⁴)]: 393 --->
//│ 	case lss² of {LH_C h⁵ t⁵ => mappend_lh_₆(h⁵, concat_lh_₅(t⁵)) | LH_N  => [LH_N]}: 412
//│ [LH_N]: 394 --->
//│ 	case lss² of {LH_C h⁵ t⁵ => mappend_lh_₆(h⁵, concat_lh_₅(t⁵)) | LH_N  => [LH_N]}: 412
//│ [LH_C f³(h⁷) map_lh_₄(f³, t⁷)]: 442 --->
//│ 	case lss³ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₄(t⁸)) | LH_N  => [LH_N]}: 461
//│ [LH_N]: 443 --->
//│ 	case lss³ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₄(t⁸)) | LH_N  => [LH_N]}: 461
//│ [LH_C f⁵(h¹⁰) map_lh_₃(f⁵, t¹⁰)]: 489 --->
//│ 	case lss⁴ of {LH_C h¹¹ t¹¹ => mappend_lh_₆(h¹¹, concat_lh_₃(t¹¹)) | LH_N  => [LH_N]}: 503
//│ [LH_N]: 490 --->
//│ 	case lss⁴ of {LH_C h¹¹ t¹¹ => mappend_lh_₆(h¹¹, concat_lh_₃(t¹¹)) | LH_N  => [LH_N]}: 503
//│ [LH_C f⁶(h¹³) map_lh_₂(f⁶, t¹³)]: 530 --->
//│ 	case lss⁵ of {LH_C h¹² t¹² => mappend_lh_₆(h¹², concat_lh_₂(t¹²)) | LH_N  => [LH_N]}: 519
//│ [LH_N]: 531 --->
//│ 	case lss⁵ of {LH_C h¹² t¹² => mappend_lh_₆(h¹², concat_lh_₂(t¹²)) | LH_N  => [LH_N]}: 519
//│ [LH_C h¹⁶ mappend_lh_₅(t¹⁶, ys¹)]: 568 --->
//│ 	case xs⁷ of {LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₂(t²⁶, ys⁴)] | LH_N  => ys⁴}: 1223
//│ [StateT (fun s⁹ -> concat_lh_₇(map_lh_₇((fun as² -> let _lh_matchIdent⁴ = as²
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_bind_LH_P2_0² _lh_bind_LH_P2_1² => runStateT_lh_₈(_lh_bind_arg2²(_lh_bind_LH_P2_0²), _lh_bind_LH_P2_1²) | _  => error⁰}), runStateT_lh_₈(_lh_bind_arg1², s⁹))))]: 634 --->
//│ 	case _lh_runStateT_arg1³ of {StateT _lh_runStateT_StateT_0³ => _lh_runStateT_StateT_0³ | _  => error⁰}: 382
//│ [StateT (fun s¹⁰ -> concat_lh_₆(map_lh_₆((fun as³ -> let _lh_matchIdent⁵ = as³
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_bind_LH_P2_0³ _lh_bind_LH_P2_1³ => runStateT_lh_₇(_lh_bind_arg2³(_lh_bind_LH_P2_0³), _lh_bind_LH_P2_1³) | _  => error⁰}), runStateT_lh_₆(_lh_bind_arg1³, s¹⁰))))]: 661 --->
//│ 	case _lh_runStateT_arg1⁶ of {StateT _lh_runStateT_StateT_0⁶ => _lh_runStateT_StateT_0⁶ | _  => error⁰}: 450
//│ [StateT (fun s¹¹ -> [LH_C [LH_P2 _lh_return_arg1³ s¹¹] [LH_N]])]: 693 --->
//│ 	case _lh_runStateT_arg1⁶ of {StateT _lh_runStateT_StateT_0⁶ => _lh_runStateT_StateT_0⁶ | _  => error⁰}: 450
//│ [StateT (fun s¹² -> concat_lh_₅(map_lh_₅((fun as⁴ -> let _lh_matchIdent⁸ = as⁴
//│ in case _lh_matchIdent⁸ of {LH_P2 _lh_bind_LH_P2_0⁴ _lh_bind_LH_P2_1⁴ => runStateT_lh_₅(_lh_bind_arg2⁴(_lh_bind_LH_P2_0⁴), _lh_bind_LH_P2_1⁴) | _  => error⁰}), runStateT_lh_₄(_lh_bind_arg1⁴, s¹²))))]: 742 --->
//│ 	case _lh_runStateT_arg1⁵ of {StateT _lh_runStateT_StateT_0⁵ => _lh_runStateT_StateT_0⁵ | _  => error⁰}: 431
//│ [StateT (fun s¹³ -> [LH_C [LH_P2 _lh_return_arg1⁴ s¹³] [LH_N]])]: 757 --->
//│ 	case _lh_runStateT_arg1¹ of {StateT _lh_runStateT_StateT_0¹ => _lh_runStateT_StateT_0¹ | _  => error⁰}: 89
//│ [Nothing]: 940 --->
//│ 	case _lh_fromJust_arg1⁰ of {Just _lh_fromJust_Just_0⁰ => _lh_fromJust_Just_0⁰ | _  => error⁰}: 976
//│ [Just _lh_lookup_LH_P2_1²]: 948 --->
//│ 	case _lh_fromJust_arg1⁰ of {Just _lh_fromJust_Just_0⁰ => _lh_fromJust_Just_0⁰ | _  => error⁰}: 976
//│ [LH_N]: 1011 --->
//│ 	case xs⁷ of {LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₂(t²⁶, ys⁴)] | LH_N  => ys⁴}: 1223
//│ [LH_C h²⁴ mappend_lh_₃(t²⁴, ys³)]: 1192 --->
//│ 	case xs⁵ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₄(t²¹, ys²)] | LH_N  => ys²}: 970
//│ [LH_N]: 1227 --->
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 922
//│ [LH_C _lh_nub_LH_C_0⁰ nub_lh_₁(filter_lh_₁((fun y⁰ -> not⁰(polyEq⁰(_lh_nub_LH_C_0⁰, y⁰))), _lh_nub_LH_C_1⁰))]: 1243 --->
//│ 	case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 922
//│ [LH_C expand⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 1330 --->
//│ 	case ls⁸ of {LH_N  => a¹ | LH_C h¹⁵ t¹⁵ => sumAux_lh_₁(t¹⁵, (a¹ + h¹⁵))}: 558
//│ [LH_N]: 1331 --->
//│ 	case ls⁸ of {LH_N  => a¹ | LH_C h¹⁵ t¹⁵ => sumAux_lh_₁(t¹⁵, (a¹ + h¹⁵))}: 558
//│ [LH_N]: 1370 --->
//│ 	case xs⁶ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys³)] | LH_N  => ys³}: 1194
//│ [LH_C _lh_puzzle_LH_P2_0⁰ [LH_N]]: 1371 --->
//│ 	case xs⁶ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys³)] | LH_N  => ys³}: 1194
//│ [LH_N]: 1377 --->
//│ 	case xs⁵ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₄(t²¹, ys²)] | LH_N  => ys²}: 970
//│ [LH_C ' ' [LH_N]]: 1378 --->
//│ 	case xs⁵ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₄(t²¹, ys²)] | LH_N  => ys²}: 970
//│ [LH_C '>' [LH_C ' ' [LH_N]]]: 1379 --->
//│ 	case xs⁵ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₄(t²¹, ys²)] | LH_N  => ys²}: 970
//│ [LH_C '=' [LH_C '>' [LH_C ' ' [LH_N]]]]: 1380 --->
//│ 	case xs⁵ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₄(t²¹, ys²)] | LH_N  => ys²}: 970
//│ [LH_C ' ' [LH_C '=' [LH_C '>' [LH_C ' ' [LH_N]]]]]: 1381 --->
//│ 	case xs⁵ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₄(t²¹, ys²)] | LH_N  => ys²}: 970
//│ [LH_C mappend_lh_₄(mappend_lh_₃([LH_C _lh_puzzle_LH_P2_0⁰ [LH_N]], [LH_C ' ' [LH_C '=' [LH_C '>' [LH_C ' ' [LH_N]]]]]), string_of_int⁰(_lh_puzzle_LH_P2_1⁰)) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 1391 --->
//│ 	case ls⁷ of {LH_C h¹³ t¹³ => [LH_C f⁶(h¹³) map_lh_₂(f⁶, t¹³)] | LH_N  => [LH_N]}: 532
//│ [LH_N]: 1396 --->
//│ 	case ls⁷ of {LH_C h¹³ t¹³ => [LH_C f⁶(h¹³) map_lh_₂(f⁶, t¹³)] | LH_N  => [LH_N]}: 532
//│ [LH_N]: 1489 --->
//│ 	case xs⁸ of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys⁵)] | LH_N  => ys⁵}: 1256
//│ [LH_C 'E' [LH_N]]: 1490 --->
//│ 	case xs⁸ of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys⁵)] | LH_N  => ys⁵}: 1256
//│ [LH_C 'V' [LH_C 'E' [LH_N]]]: 1491 --->
//│ 	case xs⁸ of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys⁵)] | LH_N  => ys⁵}: 1256
//│ [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]: 1492 --->
//│ 	case xs⁸ of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys⁵)] | LH_N  => ys⁵}: 1256
//│ [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]: 1493 --->
//│ 	case xs⁸ of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys⁵)] | LH_N  => ys⁵}: 1256
//│ [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]: 1494 --->
//│ 	case xs⁸ of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys⁵)] | LH_N  => ys⁵}: 1256
//│ [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]]: 1495 --->
//│ 	case xs⁸ of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys⁵)] | LH_N  => ys⁵}: 1256
//│ ------------------
//│ case lss⁰ of {LH_C h¹ t¹ => mappend_lh_₆(h¹, concat_lh_₇(t¹)) | LH_N  => [LH_N]}: 84 --->
//│ 	[LH_C f⁰(h⁰) map_lh_₇(f⁰, t⁰)]: 65
//│ 	[LH_N]: 66
//│ case _lh_runStateT_arg1¹ of {StateT _lh_runStateT_StateT_0¹ => _lh_runStateT_StateT_0¹ | _  => error⁰}: 89 --->
//│ 	[StateT (fun s¹³ -> [LH_C [LH_P2 _lh_return_arg1⁴ s¹³] [LH_N]])]: 757
//│ case lss¹ of {LH_C h³ t³ => mappend_lh_₆(h³, concat_lh_₆(t³)) | LH_N  => [LH_N]}: 119 --->
//│ 	[LH_C f¹(h²) map_lh_₆(f¹, t²)]: 100
//│ 	[LH_N]: 101
//│ case _lh_runStateT_arg1³ of {StateT _lh_runStateT_StateT_0³ => _lh_runStateT_StateT_0³ | _  => error⁰}: 382 --->
//│ 	[StateT (fun s⁹ -> concat_lh_₇(map_lh_₇((fun as² -> let _lh_matchIdent⁴ = as²
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_bind_LH_P2_0² _lh_bind_LH_P2_1² => runStateT_lh_₈(_lh_bind_arg2²(_lh_bind_LH_P2_0²), _lh_bind_LH_P2_1²) | _  => error⁰}), runStateT_lh_₈(_lh_bind_arg1², s⁹))))]: 634
//│ case _lh_runStateT_arg1⁴ of {StateT _lh_runStateT_StateT_0⁴ => _lh_runStateT_StateT_0⁴ | _  => error⁰}: 401 --->
//│ 	[StateT (fun s⁷ -> concat_lh_₇(map_lh_₇((fun as¹ -> let _lh_matchIdent³ = as¹
//│ in case _lh_matchIdent³ of {LH_P2 _lh_bind_LH_P2_0¹ _lh_bind_LH_P2_1¹ => runStateT_lh_₈(_lh_bind_arg2¹(_lh_bind_LH_P2_0¹), _lh_bind_LH_P2_1¹) | _  => error⁰}), runStateT_lh_₈(_lh_bind_arg1¹, s⁷))))]: 376
//│ case lss² of {LH_C h⁵ t⁵ => mappend_lh_₆(h⁵, concat_lh_₅(t⁵)) | LH_N  => [LH_N]}: 412 --->
//│ 	[LH_C f²(h⁴) map_lh_₅(f², t⁴)]: 393
//│ 	[LH_N]: 394
//│ case _lh_runStateT_arg1⁵ of {StateT _lh_runStateT_StateT_0⁵ => _lh_runStateT_StateT_0⁵ | _  => error⁰}: 431 --->
//│ 	[StateT (fun s¹² -> concat_lh_₅(map_lh_₅((fun as⁴ -> let _lh_matchIdent⁸ = as⁴
//│ in case _lh_matchIdent⁸ of {LH_P2 _lh_bind_LH_P2_0⁴ _lh_bind_LH_P2_1⁴ => runStateT_lh_₅(_lh_bind_arg2⁴(_lh_bind_LH_P2_0⁴), _lh_bind_LH_P2_1⁴) | _  => error⁰}), runStateT_lh_₄(_lh_bind_arg1⁴, s¹²))))]: 742
//│ case _lh_runStateT_arg1⁶ of {StateT _lh_runStateT_StateT_0⁶ => _lh_runStateT_StateT_0⁶ | _  => error⁰}: 450 --->
//│ 	[StateT (fun s¹⁰ -> concat_lh_₆(map_lh_₆((fun as³ -> let _lh_matchIdent⁵ = as³
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_bind_LH_P2_0³ _lh_bind_LH_P2_1³ => runStateT_lh_₇(_lh_bind_arg2³(_lh_bind_LH_P2_0³), _lh_bind_LH_P2_1³) | _  => error⁰}), runStateT_lh_₆(_lh_bind_arg1³, s¹⁰))))]: 661
//│ 	[StateT (fun s¹¹ -> [LH_C [LH_P2 _lh_return_arg1³ s¹¹] [LH_N]])]: 693
//│ case lss³ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₄(t⁸)) | LH_N  => [LH_N]}: 461 --->
//│ 	[LH_C f³(h⁷) map_lh_₄(f³, t⁷)]: 442
//│ 	[LH_N]: 443
//│ case lss⁴ of {LH_C h¹¹ t¹¹ => mappend_lh_₆(h¹¹, concat_lh_₃(t¹¹)) | LH_N  => [LH_N]}: 503 --->
//│ 	[LH_C f⁵(h¹⁰) map_lh_₃(f⁵, t¹⁰)]: 489
//│ 	[LH_N]: 490
//│ case lss⁵ of {LH_C h¹² t¹² => mappend_lh_₆(h¹², concat_lh_₂(t¹²)) | LH_N  => [LH_N]}: 519 --->
//│ 	[LH_C f⁶(h¹³) map_lh_₂(f⁶, t¹³)]: 530
//│ 	[LH_N]: 531
//│ case ls⁷ of {LH_C h¹³ t¹³ => [LH_C f⁶(h¹³) map_lh_₂(f⁶, t¹³)] | LH_N  => [LH_N]}: 532 --->
//│ 	[LH_C mappend_lh_₄(mappend_lh_₃([LH_C _lh_puzzle_LH_P2_0⁰ [LH_N]], [LH_C ' ' [LH_C '=' [LH_C '>' [LH_C ' ' [LH_N]]]]]), string_of_int⁰(_lh_puzzle_LH_P2_1⁰)) _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 1391
//│ 	[LH_N]: 1396
//│ case ls⁸ of {LH_N  => a¹ | LH_C h¹⁵ t¹⁵ => sumAux_lh_₁(t¹⁵, (a¹ + h¹⁵))}: 558 --->
//│ 	[LH_C expand⁰(_lh_listcomp_fun_ls_h³) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 1330
//│ 	[LH_N]: 1331
//│ case _lh_matchIdent⁶ of {Just _lh_select_Just_0⁰ => return_lh_₅(_lh_select_Just_0⁰) | Nothing  => permute_lh_₂(_lh_select_arg1⁰) | _  => error⁰}: 682 --->
//│ 	[Nothing]: 222
//│ 	[Just _lh_lookup_LH_P2_1⁰]: 230
//│ case _lh_matchIdent⁷ of {Just _lh_select_Just_0¹ => return_lh_₄(_lh_select_Just_0¹) | Nothing  => permute_lh_₁(_lh_select_arg1¹) | _  => error⁰}: 713 --->
//│ 	[Nothing]: 263
//│ 	[Just _lh_lookup_LH_P2_1¹]: 271
//│ case ls¹³ of {LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰)) | LH_N  => 0}: 922 --->
//│ 	[LH_N]: 1227
//│ 	[LH_C _lh_nub_LH_C_0⁰ nub_lh_₁(filter_lh_₁((fun y⁰ -> not⁰(polyEq⁰(_lh_nub_LH_C_0⁰, y⁰))), _lh_nub_LH_C_1⁰))]: 1243
//│ case xs⁵ of {LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₄(t²¹, ys²)] | LH_N  => ys²}: 970 --->
//│ 	[LH_C h²⁴ mappend_lh_₃(t²⁴, ys³)]: 1192
//│ 	[LH_N]: 1377
//│ 	[LH_C ' ' [LH_N]]: 1378
//│ 	[LH_C '>' [LH_C ' ' [LH_N]]]: 1379
//│ 	[LH_C '=' [LH_C '>' [LH_C ' ' [LH_N]]]]: 1380
//│ 	[LH_C ' ' [LH_C '=' [LH_C '>' [LH_C ' ' [LH_N]]]]]: 1381
//│ case _lh_fromJust_arg1⁰ of {Just _lh_fromJust_Just_0⁰ => _lh_fromJust_Just_0⁰ | _  => error⁰}: 976 --->
//│ 	[Nothing]: 940
//│ 	[Just _lh_lookup_LH_P2_1²]: 948
//│ case xs⁶ of {LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₃(t²⁴, ys³)] | LH_N  => ys³}: 1194 --->
//│ 	[LH_N]: 1370
//│ 	[LH_C _lh_puzzle_LH_P2_0⁰ [LH_N]]: 1371
//│ case xs⁷ of {LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₂(t²⁶, ys⁴)] | LH_N  => ys⁴}: 1223 --->
//│ 	[LH_C h¹⁶ mappend_lh_₅(t¹⁶, ys¹)]: 568
//│ 	[LH_N]: 1011
//│ case xs⁸ of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁(t²⁷, ys⁵)] | LH_N  => ys⁵}: 1256 --->
//│ 	[LH_N]: 1489
//│ 	[LH_C 'E' [LH_N]]: 1490
//│ 	[LH_C 'V' [LH_C 'E' [LH_N]]]: 1491
//│ 	[LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]: 1492
//│ 	[LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]: 1493
//│ 	[LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]: 1494
//│ 	[LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]]: 1495
//│ <<<<<<< fusion strategies <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testCryptarithm2_nofib_lh_₁(primId⁰(1500))
//│ def bind_lh_₁(_lh_bind_arg1¹¹, _lh_bind_arg2¹¹) = [StateT (fun s³³ -> concat_lh_₄(map_lh_₄((fun as¹¹ -> 
//│ 	let _lh_matchIdent³¹ = as¹¹
//│ 	in case _lh_matchIdent³¹ of {
//│ 		LH_P2 _lh_bind_LH_P2_0⁵ _lh_bind_LH_P2_1⁵ => runStateT_lh_₃(_lh_bind_arg2¹¹(_lh_bind_LH_P2_0⁵), _lh_bind_LH_P2_1⁵)
//│ 		| _  => error⁰}), runStateT_lh_₂(_lh_bind_arg1¹¹, s³³))))]
//│ def bind_lh_₂(_lh_bind_arg1⁷, _lh_bind_arg2⁷) = 
//│ 	let _lh_runStateT_StateT_0¹¹ = (fun s²³ -> concat_lh_₅(map_lh_₅((fun as⁷ -> 
//│ 		let _lh_matchIdent²⁰ = as⁷
//│ 		in case _lh_matchIdent²⁰ of {
//│ 			LH_P2 _lh_bind_LH_P2_0⁴ _lh_bind_LH_P2_1⁴ => runStateT_lh_₅(_lh_bind_arg2⁷(_lh_bind_LH_P2_0⁴), _lh_bind_LH_P2_1⁴)
//│ 			| _  => error⁰}), runStateT_lh_₄(_lh_bind_arg1⁷, s²³))))
//│ 	in _lh_runStateT_StateT_0¹¹
//│ def bind_lh_₃(_lh_bind_arg1⁹, _lh_bind_arg2⁹) = 
//│ 	let _lh_runStateT_StateT_0¹² = (fun s²⁸ -> concat_lh_₆(map_lh_₆((fun as⁹ -> 
//│ 		let _lh_matchIdent²⁴ = as⁹
//│ 		in case _lh_matchIdent²⁴ of {
//│ 			LH_P2 _lh_bind_LH_P2_0³ _lh_bind_LH_P2_1³ => runStateT_lh_₇(_lh_bind_arg2⁹(_lh_bind_LH_P2_0³), _lh_bind_LH_P2_1³)
//│ 			| _  => error⁰}), runStateT_lh_₆(_lh_bind_arg1⁹, s²⁸))))
//│ 	in _lh_runStateT_StateT_0¹²
//│ def bind_lh_₄(_lh_bind_arg1⁶, _lh_bind_arg2⁶) = 
//│ 	let _lh_runStateT_StateT_0⁹ = (fun s²⁰ -> concat_lh_₇(map_lh_₇((fun as⁶ -> 
//│ 		let _lh_matchIdent¹⁸ = as⁶
//│ 		in case _lh_matchIdent¹⁸ of {
//│ 			LH_P2 _lh_bind_LH_P2_0² _lh_bind_LH_P2_1² => runStateT_lh_₈(_lh_bind_arg2⁶(_lh_bind_LH_P2_0²), _lh_bind_LH_P2_1²)
//│ 			| _  => error⁰}), runStateT_lh_₈(_lh_bind_arg1⁶, s²⁰))))
//│ 	in _lh_runStateT_StateT_0⁹
//│ def bind_lh_₅(_lh_bind_arg1¹⁰, _lh_bind_arg2¹⁰) = 
//│ 	let _lh_runStateT_StateT_0¹³ = (fun s³² -> concat_lh_₇(map_lh_₇((fun as¹⁰ -> 
//│ 		let _lh_matchIdent³⁰ = as¹⁰
//│ 		in case _lh_matchIdent³⁰ of {
//│ 			LH_P2 _lh_bind_LH_P2_0¹ _lh_bind_LH_P2_1¹ => runStateT_lh_₈(_lh_bind_arg2¹⁰(_lh_bind_LH_P2_0¹), _lh_bind_LH_P2_1¹)
//│ 			| _  => error⁰}), runStateT_lh_₈(_lh_bind_arg1¹⁰, s³²))))
//│ 	in _lh_runStateT_StateT_0¹³
//│ def bind_lh_₆(_lh_bind_arg1⁸, _lh_bind_arg2⁸) = [StateT (fun s²⁷ -> concat_lh_₇(map_lh_₇((fun as⁸ -> 
//│ 	let _lh_matchIdent²³ = as⁸
//│ 	in case _lh_matchIdent²³ of {
//│ 		LH_P2 _lh_bind_LH_P2_0⁰ _lh_bind_LH_P2_1⁰ => runStateT_lh_₈(_lh_bind_arg2⁸(_lh_bind_LH_P2_0⁰), _lh_bind_LH_P2_1⁰)
//│ 		| _  => error⁰}), runStateT_lh_₈(_lh_bind_arg1⁸, s²⁷))))]
//│ def combine_lh_₁(_lh_combine_arg1¹, _lh_combine_arg2¹, _lh_combine_arg3¹, _lh_combine_arg4¹) = [LH_C [LH_C _lh_combine_arg1¹ _lh_combine_arg2¹] transpose_lh_₁([LH_C _lh_combine_arg3¹ _lh_combine_arg4¹])]
//│ def concat_lh_₁(lss¹³) = case lss¹³ of {
//│ 	LH_C h²³ t²³ => mappend_lh_₅(h²³, concat_lh_₁(t²³))
//│ 	| LH_N  => (fun ys²⁸ -> ys²⁸)}
//│ def concat_lh_₂(lss¹¹) = lss¹¹(99)
//│ def concat_lh_₃(lss¹⁰) = lss¹⁰(99)
//│ def concat_lh_₄(lss⁹) = lss⁹(99)
//│ def concat_lh_₅(lss⁷) = lss⁷(99)
//│ def concat_lh_₆(lss¹²) = lss¹²(99)
//│ def concat_lh_₇(lss⁸) = lss⁸(99)
//│ def delete_lh_₁(_lh_delete_arg1¹, _lh_delete_arg2¹) = case _lh_delete_arg1¹ of {
//│ 	LH_C _lh_delete_LH_C_0⁰ _lh_delete_LH_C_1⁰ => if polyEq⁰(_lh_delete_LH_C_0⁰, _lh_delete_arg2¹) then delete_lh_₁(_lh_delete_LH_C_1⁰, _lh_delete_arg2¹) else [LH_C _lh_delete_LH_C_0⁰ delete_lh_₁(_lh_delete_LH_C_1⁰, _lh_delete_arg2¹)]
//│ 	| LH_N  => [LH_N]
//│ 	| _  => error⁰}
//│ def digitEnv_lh_₁(_lh_digitEnv_arg1⁵) = case _lh_digitEnv_arg1⁵ of {
//│ 	Digits _lh_digitEnv_Digits_0³ _lh_digitEnv_Digits_1³ => _lh_digitEnv_Digits_1³
//│ 	| _  => error⁰}
//│ def digitEnv_lh_₂(_lh_digitEnv_arg1⁷) = case _lh_digitEnv_arg1⁷ of {
//│ 	Digits _lh_digitEnv_Digits_0² _lh_digitEnv_Digits_1² => _lh_digitEnv_Digits_1²
//│ 	| _  => error⁰}
//│ def digitEnv_lh_₃(_lh_digitEnv_arg1⁶) = case _lh_digitEnv_arg1⁶ of {
//│ 	Digits _lh_digitEnv_Digits_0¹ _lh_digitEnv_Digits_1¹ => _lh_digitEnv_Digits_1¹
//│ 	| _  => error⁰}
//│ def digitEnv_lh_₄(_lh_digitEnv_arg1⁴) = case _lh_digitEnv_arg1⁴ of {
//│ 	Digits _lh_digitEnv_Digits_0⁰ _lh_digitEnv_Digits_1⁰ => _lh_digitEnv_Digits_1⁰
//│ 	| _  => error⁰}
//│ def digits_lh_₁(_lh_digits_arg1¹) = case _lh_digits_arg1¹ of {
//│ 	Digits _lh_digits_Digits_0⁰ _lh_digits_Digits_1⁰ => _lh_digits_Digits_0⁰
//│ 	| _  => error⁰}
//│ def enumFromTo_lh_₁(a⁷, b²) = if (a⁷ <= b²) then [LH_C a⁷ enumFromTo_lh_₁((a⁷ + 1), b²)] else [LH_N]
//│ def execStateT_lh_₁(_lh_execStateT_arg1¹, _lh_execStateT_arg2¹) = concat_lh_₃(map_lh_₃((fun x⁵ -> 
//│ 	let _lh_matchIdent²⁷ = x⁵
//│ 	in case _lh_matchIdent²⁷ of {
//│ 		LH_P2 _lh_execStateT_LH_P2_0⁰ _lh_execStateT_LH_P2_1⁰ => [LH_C _lh_execStateT_LH_P2_1⁰ [LH_N]]
//│ 		| _  => error⁰}), runStateT_lh_₁(_lh_execStateT_arg1¹, _lh_execStateT_arg2¹)))
//│ def filter_lh_₁(f²⁰, ls³⁵) = case ls³⁵ of {
//│ 	LH_C h¹⁹ t¹⁹ => if f²⁰(h¹⁹) then [LH_C h¹⁹ filter_lh_₁(f²⁰, t¹⁹)] else filter_lh_₁(f²⁰, t¹⁹)
//│ 	| LH_N  => [LH_N]}
//│ def foldl_lh_₁(f¹¹, i², ls²¹) = case ls²¹ of {
//│ 	LH_C h²⁵ t²⁵ => foldl_lh_₁(f¹¹, f¹¹(i², h²⁵), t²⁵)
//│ 	| LH_N  => i²}
//│ def foldr_lh_₁(f¹³, i³, ls²⁶) = case ls²⁶ of {
//│ 	LH_C h⁹ t⁹ => f¹³(h⁹, foldr_lh_₁(f¹³, i³, t⁹))
//│ 	| LH_N  => i³}
//│ def fromJust_lh_₁(_lh_fromJust_arg1¹) = _lh_fromJust_arg1¹(99)
//│ def get_lh_₁ = [StateT (fun s³⁰ -> [LH_C [LH_P2 s³⁰ s³⁰] [LH_N]])]
//│ def get_lh_₂ = [StateT (fun s²⁶ -> [LH_C [LH_P2 s²⁶ s²⁶] [LH_N]])]
//│ def guard_lh_₁(_lh_guard_arg1¹) = case _lh_guard_arg1¹ of {
//│ 	True  => [StateT (fun s²⁴ -> [LH_C [LH_P2 [Unit] s²⁴] [LH_N]])]
//│ 	| False  => [StateT (fun s²⁵ -> [LH_N])]
//│ 	| _  => error⁰}
//│ def length_lh_₁(ls³⁴) = ls³⁴(99)
//│ def lift_lh_₁(_lh_lift_arg1¹) = [StateT (fun s²² -> concat_lh_₇(map_lh_₇((fun x⁴ -> [LH_C [LH_P2 x⁴ s²²] [LH_N]]), _lh_lift_arg1¹)))]
//│ def listDiff_lh_₁ = foldl_lh_₁(delete_lh_₁)
//│ def lookup_lh_₁(_lh_lookup_arg1³, _lh_lookup_arg2³) = case _lh_lookup_arg2³ of {
//│ 	LH_N  => (fun _lh_dummy⁶ -> error⁰)
//│ 	| LH_C _lh_lookup_LH_C_0² _lh_lookup_LH_C_1² => case _lh_lookup_LH_C_0² of {
//│ 		LH_P2 _lh_lookup_LH_P2_0² _lh_lookup_LH_P2_1² => if polyEq⁰(_lh_lookup_arg1³, _lh_lookup_LH_P2_0²) then 
//│ 			let _lh_fromJust_Just_0¹ = _lh_lookup_LH_P2_1²
//│ 			in (fun _lh_dummy⁷ -> _lh_fromJust_Just_0¹) else lookup_lh_₁(_lh_lookup_arg1³, _lh_lookup_LH_C_1²)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def lookup_lh_₂(_lh_lookup_arg1⁴, _lh_lookup_arg2⁴) = case _lh_lookup_arg2⁴ of {
//│ 	LH_N  => (fun _lh_select_arg1⁴ -> permute_lh_₁(_lh_select_arg1⁴))
//│ 	| LH_C _lh_lookup_LH_C_0¹ _lh_lookup_LH_C_1¹ => case _lh_lookup_LH_C_0¹ of {
//│ 		LH_P2 _lh_lookup_LH_P2_0¹ _lh_lookup_LH_P2_1¹ => if polyEq⁰(_lh_lookup_arg1⁴, _lh_lookup_LH_P2_0¹) then 
//│ 			let _lh_select_Just_0² = _lh_lookup_LH_P2_1¹
//│ 			in (fun _lh_select_arg1⁵ -> return_lh_₄(_lh_select_Just_0²)) else lookup_lh_₂(_lh_lookup_arg1⁴, _lh_lookup_LH_C_1¹)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def lookup_lh_₃(_lh_lookup_arg1⁵, _lh_lookup_arg2⁵) = case _lh_lookup_arg2⁵ of {
//│ 	LH_N  => (fun _lh_select_arg1⁶ -> permute_lh_₂(_lh_select_arg1⁶))
//│ 	| LH_C _lh_lookup_LH_C_0⁰ _lh_lookup_LH_C_1⁰ => case _lh_lookup_LH_C_0⁰ of {
//│ 		LH_P2 _lh_lookup_LH_P2_0⁰ _lh_lookup_LH_P2_1⁰ => if polyEq⁰(_lh_lookup_arg1⁵, _lh_lookup_LH_P2_0⁰) then 
//│ 			let _lh_select_Just_0³ = _lh_lookup_LH_P2_1⁰
//│ 			in (fun _lh_select_arg1⁷ -> return_lh_₅(_lh_select_Just_0³)) else lookup_lh_₃(_lh_lookup_arg1⁵, _lh_lookup_LH_C_1⁰)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def mapM_lh_₁(_lh_mapM_arg1¹, _lh_mapM_arg2¹) = foldr_lh_₁((fun a⁸ -> (fun r¹ -> bind_lh_₆(_lh_mapM_arg1¹(a⁸), (fun x³ -> bind_lh_₆(r¹, (fun xs¹⁰ -> return_lh_₅([LH_C x³ xs¹⁰]))))))), return_lh_₅([LH_N]), _lh_mapM_arg2¹)
//│ def map_lh_₁(f¹⁸, ls³¹) = case ls³¹ of {
//│ 	LH_C h²² t²² => [LH_C f¹⁸(h²²) map_lh_₁(f¹⁸, t²²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f¹⁵, ls²⁹) = ls²⁹(f¹⁵)
//│ def map_lh_₃(f¹⁰, ls²⁰) = case ls²⁰ of {
//│ 	LH_C h¹⁰ t¹⁰ => 
//│ 		let t²⁹ = map_lh_₃(f¹⁰, t¹⁰)
//│ 		in let h²⁹ = f¹⁰(h¹⁰)
//│ 		in (fun _lh_dummy² -> mappend_lh_₆(h²⁹, concat_lh_₃(t²⁹)))
//│ 	| LH_N  => (fun _lh_dummy³ -> [LH_N])}
//│ def map_lh_₄(f²¹, ls³⁶) = case ls³⁶ of {
//│ 	LH_C h⁷ t⁷ => 
//│ 		let t⁴⁹ = map_lh_₄(f²¹, t⁷)
//│ 		in let h⁴⁹ = f²¹(h⁷)
//│ 		in (fun _lh_dummy¹⁴ -> mappend_lh_₆(h⁴⁹, concat_lh_₄(t⁴⁹)))
//│ 	| LH_N  => (fun _lh_dummy¹⁵ -> [LH_N])}
//│ def map_lh_₅(f¹⁹, ls³³) = case ls³³ of {
//│ 	LH_C h⁴ t⁴ => 
//│ 		let t⁴² = map_lh_₅(f¹⁹, t⁴)
//│ 		in let h⁴² = f¹⁹(h⁴)
//│ 		in (fun _lh_dummy¹² -> mappend_lh_₆(h⁴², concat_lh_₅(t⁴²)))
//│ 	| LH_N  => (fun _lh_dummy¹³ -> [LH_N])}
//│ def map_lh_₆(f¹⁴, ls²⁸) = case ls²⁸ of {
//│ 	LH_C h² t² => 
//│ 		let t³² = map_lh_₆(f¹⁴, t²)
//│ 		in let h³² = f¹⁴(h²)
//│ 		in (fun _lh_dummy⁸ -> mappend_lh_₆(h³², concat_lh_₆(t³²)))
//│ 	| LH_N  => (fun _lh_dummy⁹ -> [LH_N])}
//│ def map_lh_₇(f¹², ls²²) = case ls²² of {
//│ 	LH_C h⁰ t⁰ => 
//│ 		let t³⁰ = map_lh_₇(f¹², t⁰)
//│ 		in let h³⁰ = f¹²(h⁰)
//│ 		in (fun _lh_dummy⁴ -> mappend_lh_₆(h³⁰, concat_lh_₇(t³⁰)))
//│ 	| LH_N  => (fun _lh_dummy⁵ -> [LH_N])}
//│ def mappend_lh_₁(xs¹¹, ys⁷) = xs¹¹(ys⁷)
//│ def mappend_lh_₂(xs¹², ys⁸) = xs¹²(ys⁸)
//│ def mappend_lh_₃(xs⁹, ys⁶) = xs⁹(ys⁶)
//│ def mappend_lh_₄(xs¹⁵, ys¹²) = xs¹⁵(ys¹²)
//│ def mappend_lh_₅(xs¹³, ys⁹) = case xs¹³ of {
//│ 	LH_C h¹⁶ t¹⁶ => 
//│ 		let t³¹ = mappend_lh_₅(t¹⁶, ys⁹)
//│ 		in let h³¹ = h¹⁶
//│ 		in (fun ys¹⁰ -> [LH_C h³¹ mappend_lh_₂(t³¹, ys¹⁰)])
//│ 	| LH_N  => ys⁹}
//│ def mappend_lh_₆(xs¹⁴, ys¹¹) = case xs¹⁴ of {
//│ 	LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₆(t¹⁴, ys¹¹)]
//│ 	| LH_N  => ys¹¹}
//│ def nub_lh_₁(_lh_nub_arg1¹) = case _lh_nub_arg1¹ of {
//│ 	LH_N  => (fun _lh_dummy⁰ -> 0)
//│ 	| LH_C _lh_nub_LH_C_0⁰ _lh_nub_LH_C_1⁰ => 
//│ 		let t²⁸ = nub_lh_₁(filter_lh_₁((fun y¹ -> not⁰(polyEq⁰(_lh_nub_LH_C_0⁰, y¹))), _lh_nub_LH_C_1⁰))
//│ 		in let h²⁸ = _lh_nub_LH_C_0⁰
//│ 		in (fun _lh_dummy¹ -> (1 + length_lh_₁(t²⁸)))
//│ 	| _  => error⁰}
//│ def permute_lh_₁(_lh_permute_arg1³) = bind_lh_₆(get_lh_₂, (fun st⁷ -> bind_lh_₆(
//│ 	let xs¹⁷ = digits_lh_₁(st⁷)
//│ 	in lift_lh_₁(
//│ 		let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ listDiff_lh_₁(xs¹⁷, [LH_C _lh_listcomp_fun_ls_h¹ [LH_N]])] _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t¹)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁹(xs¹⁷)), (fun iis³ -> 
//│ 	let _lh_matchIdent²⁹ = iis³
//│ 	in case _lh_matchIdent²⁹ of {
//│ 		LH_P2 _lh_permute_LH_P2_0¹ _lh_permute_LH_P2_1¹ => bind_lh_₆(put_lh_₁([Digits _lh_permute_LH_P2_1¹ [LH_C [LH_P2 _lh_permute_arg1³ _lh_permute_LH_P2_0¹] digitEnv_lh_₄(st⁷)]]), (fun _p⁹ -> return_lh_₅(_lh_permute_LH_P2_0¹)))
//│ 		| _  => error⁰}))))
//│ def permute_lh_₂(_lh_permute_arg1²) = bind_lh_₆(get_lh_₂, (fun st⁶ -> bind_lh_₆(
//│ 	let xs¹⁶ = digits_lh_₁(st⁶)
//│ 	in lift_lh_₁(
//│ 		let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ listDiff_lh_₁(xs¹⁶, [LH_C _lh_listcomp_fun_ls_h⁰ [LH_N]])] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁰)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁷(xs¹⁶)), (fun iis² -> 
//│ 	let _lh_matchIdent²⁶ = iis²
//│ 	in case _lh_matchIdent²⁶ of {
//│ 		LH_P2 _lh_permute_LH_P2_0⁰ _lh_permute_LH_P2_1⁰ => bind_lh_₆(put_lh_₁([Digits _lh_permute_LH_P2_1⁰ [LH_C [LH_P2 _lh_permute_arg1² _lh_permute_LH_P2_0⁰] digitEnv_lh_₄(st⁶)]]), (fun _p⁸ -> return_lh_₅(_lh_permute_LH_P2_0⁰)))
//│ 		| _  => error⁰}))))
//│ def put_lh_₁(_lh_put_arg1¹) = [StateT (fun s²⁹ -> [LH_C [LH_P2 [Unit] _lh_put_arg1¹] [LH_N]])]
//│ def puzzle_lh_₁(_lh_puzzle_arg1¹, _lh_puzzle_arg2¹) = 
//│ 	let solution¹ = solve_lh_₁(transpose_lh_₁(map_lh_₁(reverse_lh_₂, _lh_puzzle_arg1¹)), reverse_lh_₁(_lh_puzzle_arg2¹), 0)
//│ 	in let answer¹ = 	
//│ 		let _lh_matchIdent²⁵ = execStateT_lh_₁(solution¹, [Digits enumFromTo_lh_₁(0, 9) [LH_N]])
//│ 		in case _lh_matchIdent²⁵ of {
//│ 			LH_C _lh_puzzle_LH_C_0⁰ _lh_puzzle_LH_C_1⁰ => _lh_puzzle_LH_C_0⁰
//│ 			| LH_N  => error⁰
//│ 			| _  => error⁰}
//│ 	in let env¹ = digitEnv_lh_₂(answer¹)
//│ 	in let look¹ = (fun c¹ -> fromJust_lh_₁(lookup_lh_₁(c¹, env¹)))
//│ 	in let expand¹ = (fun ls³⁰ -> foldl_lh_₁((fun a¹¹ -> (fun b³ -> ((a¹¹ * 10) + look¹(b³)))), 0, ls³⁰))
//│ 	in let topVal¹ = sum_lh_₁(
//│ 		let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 			LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => 
//│ 				let t³³ = _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t³)
//│ 				in let h³³ = expand¹(_lh_listcomp_fun_ls_h³)
//│ 				in (fun a¹² -> sumAux_lh_₁(t³³, (a¹² + h³³)))
//│ 			| LH_N  => (fun a¹³ -> a¹³)})
//│ 		in _lh_listcomp_fun⁵(_lh_puzzle_arg1¹))
//│ 	in let botVal¹ = expand¹(_lh_puzzle_arg2¹)
//│ 	in if (length_lh_₁(nub_lh_₁(mappend_lh_₂(concat_lh_₁(_lh_puzzle_arg1¹), _lh_puzzle_arg2¹))) > 10) then error⁰ else if (topVal¹ /= botVal¹) then error⁰ else unlines_lh_₁(
//│ 		let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => case _lh_listcomp_fun_ls_h⁴ of {
//│ 				LH_P2 _lh_puzzle_LH_P2_0⁰ _lh_puzzle_LH_P2_1⁰ => 
//│ 					let t³⁴ = _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁴)
//│ 					in let h³⁴ = mappend_lh_₄(mappend_lh_₃(
//│ 						let t³⁶ = (fun ys¹⁵ -> ys¹⁵)
//│ 						in let h³⁶ = _lh_puzzle_LH_P2_0⁰
//│ 						in (fun ys¹³ -> 
//│ 							let t³⁷ = mappend_lh_₃(t³⁶, ys¹³)
//│ 							in let h³⁷ = h³⁶
//│ 							in (fun ys¹⁴ -> [LH_C h³⁷ mappend_lh_₄(t³⁷, ys¹⁴)])), 
//│ 						let t³⁸ = 	
//│ 							let t³⁹ = 	
//│ 								let t⁴⁰ = 	
//│ 									let t⁴¹ = (fun ys²⁰ -> ys²⁰)
//│ 									in let h⁴¹ = ' '
//│ 									in (fun ys¹⁹ -> [LH_C h⁴¹ mappend_lh_₄(t⁴¹, ys¹⁹)])
//│ 								in let h⁴⁰ = '>'
//│ 								in (fun ys¹⁸ -> [LH_C h⁴⁰ mappend_lh_₄(t⁴⁰, ys¹⁸)])
//│ 							in let h³⁹ = '='
//│ 							in (fun ys¹⁷ -> [LH_C h³⁹ mappend_lh_₄(t³⁹, ys¹⁷)])
//│ 						in let h³⁸ = ' '
//│ 						in (fun ys¹⁶ -> [LH_C h³⁸ mappend_lh_₄(t³⁸, ys¹⁶)])), string_of_int⁰(_lh_puzzle_LH_P2_1⁰))
//│ 					in (fun f¹⁶ -> 
//│ 						let t³⁵ = map_lh_₂(f¹⁶, t³⁴)
//│ 						in let h³⁵ = f¹⁶(h³⁴)
//│ 						in (fun _lh_dummy¹⁰ -> mappend_lh_₆(h³⁵, concat_lh_₂(t³⁵))))
//│ 				| _  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁴)}
//│ 			| LH_N  => (fun f¹⁷ -> (fun _lh_dummy¹¹ -> [LH_N]))})
//│ 		in _lh_listcomp_fun⁶(digitEnv_lh_₁(answer¹)))
//│ def rest_lh_₁(_lh_rest_arg1¹) = case _lh_rest_arg1¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_rest_LH_C_0⁰ _lh_rest_LH_C_1⁰ => _lh_rest_LH_C_1⁰
//│ 	| _  => error⁰}
//│ def return_lh_₁(_lh_return_arg1⁸) = 
//│ 	let _lh_runStateT_StateT_0¹⁰ = (fun s²¹ -> [LH_C [LH_P2 _lh_return_arg1⁸ s²¹] [LH_N]])
//│ 	in _lh_runStateT_StateT_0¹⁰
//│ def return_lh_₂(_lh_return_arg1⁶) = 
//│ 	let _lh_runStateT_StateT_0⁸ = (fun s¹⁸ -> [LH_C [LH_P2 _lh_return_arg1⁶ s¹⁸] [LH_N]])
//│ 	in _lh_runStateT_StateT_0⁸
//│ def return_lh_₃(_lh_return_arg1⁵) = [StateT (fun s¹⁷ -> [LH_C [LH_P2 _lh_return_arg1⁵ s¹⁷] [LH_N]])]
//│ def return_lh_₄(_lh_return_arg1⁹) = [StateT (fun s³¹ -> [LH_C [LH_P2 _lh_return_arg1⁹ s³¹] [LH_N]])]
//│ def return_lh_₅(_lh_return_arg1⁷) = [StateT (fun s¹⁹ -> [LH_C [LH_P2 _lh_return_arg1⁷ s¹⁹] [LH_N]])]
//│ def reverse_helper_lh_₁(ls²⁴, a¹⁰) = case ls²⁴ of {
//│ 	LH_C h¹⁸ t¹⁸ => reverse_helper_lh_₁(t¹⁸, [LH_C h¹⁸ a¹⁰])
//│ 	| LH_N  => a¹⁰}
//│ def reverse_helper_lh_₂(ls²³, a⁹) = case ls²³ of {
//│ 	LH_C h¹⁷ t¹⁷ => reverse_helper_lh_₂(t¹⁷, [LH_C h¹⁷ a⁹])
//│ 	| LH_N  => a⁹}
//│ def reverse_lh_₁(ls³⁷) = reverse_helper_lh_₁(ls³⁷, [LH_N])
//│ def reverse_lh_₂(ls³⁸) = reverse_helper_lh_₂(ls³⁸, [LH_N])
//│ def runStateT_lh_₁(_lh_runStateT_arg1⁹) = case _lh_runStateT_arg1⁹ of {
//│ 	StateT _lh_runStateT_StateT_0⁷ => _lh_runStateT_StateT_0⁷
//│ 	| _  => error⁰}
//│ def runStateT_lh_₂(_lh_runStateT_arg1¹¹) = _lh_runStateT_arg1¹¹
//│ def runStateT_lh_₃(_lh_runStateT_arg1¹³) = _lh_runStateT_arg1¹³
//│ def runStateT_lh_₄(_lh_runStateT_arg1¹⁴) = _lh_runStateT_arg1¹⁴
//│ def runStateT_lh_₅(_lh_runStateT_arg1⁸) = _lh_runStateT_arg1⁸
//│ def runStateT_lh_₆(_lh_runStateT_arg1¹⁰) = case _lh_runStateT_arg1¹⁰ of {
//│ 	StateT _lh_runStateT_StateT_0² => _lh_runStateT_StateT_0²
//│ 	| _  => error⁰}
//│ def runStateT_lh_₇(_lh_runStateT_arg1¹⁵) = _lh_runStateT_arg1¹⁵
//│ def runStateT_lh_₈(_lh_runStateT_arg1¹²) = case _lh_runStateT_arg1¹² of {
//│ 	StateT _lh_runStateT_StateT_0⁰ => _lh_runStateT_StateT_0⁰
//│ 	| _  => error⁰}
//│ def select_lh_₁(_lh_select_arg1³) = bind_lh_₅(get_lh_₁, (fun st⁵ -> 
//│ 	let _lh_matchIdent¹⁷ = lookup_lh_₂(_lh_select_arg1³, digitEnv_lh_₃(st⁵))
//│ 	in _lh_matchIdent¹⁷(_lh_select_arg1³)))
//│ def select_lh_₂(_lh_select_arg1²) = bind_lh_₆(get_lh_₂, (fun st⁴ -> 
//│ 	let _lh_matchIdent¹⁶ = lookup_lh_₃(_lh_select_arg1², digitEnv_lh_₄(st⁴))
//│ 	in _lh_matchIdent¹⁶(_lh_select_arg1²)))
//│ def solve_lh_₁(_lh_solve_arg1¹, _lh_solve_arg2¹, _lh_solve_arg3¹) = case _lh_solve_arg2¹ of {
//│ 	LH_C _lh_solve_LH_C_0⁰ _lh_solve_LH_C_1⁰ => bind_lh_₁(
//│ 		let _lh_matchIdent¹⁹ = _lh_solve_arg1¹
//│ 		in case _lh_matchIdent¹⁹ of {
//│ 			LH_N  => return_lh_₂(_lh_solve_arg3¹)
//│ 			| LH_C _lh_solve_LH_C_0¹ _lh_solve_LH_C_1¹ => bind_lh_₃(mapM_lh_₁(select_lh_₂, _lh_solve_LH_C_0¹), (fun topNS¹ -> return_lh_₁((sum_lh_₂(topNS¹) + _lh_solve_arg3¹))))
//│ 			| _  => error⁰}, (fun topN¹ -> bind_lh_₂(select_lh_₁(_lh_solve_LH_C_0⁰), (fun botN¹ -> bind_lh_₄(guard_lh_₁(((topN¹ % 10) == botN¹)), (fun _s¹ -> solve_lh_₁(rest_lh_₁(_lh_solve_arg1¹), _lh_solve_LH_C_1⁰, div⁰(topN¹, 10))))))))
//│ 	| _  => case _lh_solve_arg1¹ of {
//│ 		LH_N  => case _lh_solve_arg2¹ of {
//│ 			LH_N  => case _lh_solve_arg3¹ of {
//│ 				0  => return_lh_₃([Unit])
//│ 				| _  => [StateT (fun _p⁵ -> [LH_N])]}
//│ 			| _  => [StateT (fun _p⁶ -> [LH_N])]}
//│ 		| _  => [StateT (fun _p⁷ -> [LH_N])]}}
//│ def sumAux_lh_₁(ls³², a¹⁴) = ls³²(a¹⁴)
//│ def sumAux_lh_₂(ls³⁹, a¹⁵) = case ls³⁹ of {
//│ 	LH_N  => a¹⁵
//│ 	| LH_C h⁶ t⁶ => sumAux_lh_₂(t⁶, (a¹⁵ + h⁶))}
//│ def sum_lh_₁(ls²⁷) = sumAux_lh_₁(ls²⁷, 0)
//│ def sum_lh_₂(ls²⁵) = sumAux_lh_₂(ls²⁵, 0)
//│ def testCryptarithm2_nofib_lh_₁(_lh_testCryptarithm2_nofib_arg1¹) = 
//│ 	let args¹ = [LH_C [LH_C 'T' [LH_C 'H' [LH_C 'I' [LH_C 'R' [LH_C 'T' [LH_C 'Y' [LH_N]]]]]]] [LH_C [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]] [LH_C [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]] [LH_C [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]] [LH_C [LH_C 'T' [LH_C 'W' [LH_C 'E' [LH_C 'L' [LH_C 'V' [LH_C 'E' [LH_N]]]]]]] [LH_C mappend_lh_₁(
//│ 		let t⁴³ = 	
//│ 			let t⁴⁴ = 	
//│ 				let t⁴⁵ = 	
//│ 					let t⁴⁶ = 	
//│ 						let t⁴⁷ = 	
//│ 							let t⁴⁸ = (fun ys²⁷ -> ys²⁷)
//│ 							in let h⁴⁸ = 'E'
//│ 							in (fun ys²⁶ -> [LH_C h⁴⁸ mappend_lh_₁(t⁴⁸, ys²⁶)])
//│ 						in let h⁴⁷ = 'V'
//│ 						in (fun ys²⁵ -> [LH_C h⁴⁷ mappend_lh_₁(t⁴⁷, ys²⁵)])
//│ 					in let h⁴⁶ = 'L'
//│ 					in (fun ys²⁴ -> [LH_C h⁴⁶ mappend_lh_₁(t⁴⁶, ys²⁴)])
//│ 				in let h⁴⁵ = 'E'
//│ 				in (fun ys²³ -> [LH_C h⁴⁵ mappend_lh_₁(t⁴⁵, ys²³)])
//│ 			in let h⁴⁴ = 'W'
//│ 			in (fun ys²² -> [LH_C h⁴⁴ mappend_lh_₁(t⁴⁴, ys²²)])
//│ 		in let h⁴³ = 'T'
//│ 		in (fun ys²¹ -> [LH_C h⁴³ mappend_lh_₁(t⁴³, ys²¹)]), if (_lh_testCryptarithm2_nofib_arg1¹ > 999999) then [LH_C '1' [LH_N]] else [LH_N]) [LH_N]]]]]]]
//│ 	in puzzle_lh_₁(args¹, [LH_C 'N' [LH_C 'I' [LH_C 'N' [LH_C 'E' [LH_C 'T' [LH_C 'Y' [LH_N]]]]]]])
//│ def transpose_lh_₁(_lh_transpose_arg1¹) = case _lh_transpose_arg1¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_transpose_LH_C_0⁰ _lh_transpose_LH_C_1⁰ => case _lh_transpose_LH_C_0⁰ of {
//│ 		LH_N  => transpose_lh_₁(_lh_transpose_LH_C_1⁰)
//│ 		| LH_C _lh_transpose_LH_C_0¹ _lh_transpose_LH_C_1¹ => 
//│ 			let _lh_matchIdent²⁸ = unzip_lh_₁(
//│ 				let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {
//│ 					LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => case _lh_listcomp_fun_ls_h² of {
//│ 						LH_C _lh_transpose_LH_C_0² _lh_transpose_LH_C_1² => [LH_C [LH_P2 _lh_transpose_LH_C_0² _lh_transpose_LH_C_1²] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t²)]
//│ 						| _  => _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t²)}
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun⁸(_lh_transpose_LH_C_1⁰))
//│ 			in case _lh_matchIdent²⁸ of {
//│ 				LH_P2 _lh_transpose_LH_P2_0⁰ _lh_transpose_LH_P2_1⁰ => combine_lh_₁(_lh_transpose_LH_C_0¹, _lh_transpose_LH_P2_0⁰, _lh_transpose_LH_C_1¹, _lh_transpose_LH_P2_1⁰)
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def unlines_lh_₁(_lh_unlines_arg1¹) = concat_lh_₂(map_lh_₂((fun l¹ -> mappend_lh_₆(l¹, [LH_C 'n' [LH_N]])), _lh_unlines_arg1¹))
//│ def unzip_lh_₁(_lh_unzip_arg1¹) = foldr_lh_₁((fun ab¹ -> (fun asbs¹ -> 
//│ 	let _lh_matchIdent²¹ = ab¹
//│ 	in case _lh_matchIdent²¹ of {
//│ 		LH_P2 _lh_unzip_LH_P2_0⁰ _lh_unzip_LH_P2_1⁰ => 
//│ 			let _lh_matchIdent²² = asbs¹
//│ 			in case _lh_matchIdent²² of {
//│ 				LH_P2 _lh_unzip_LH_P2_0¹ _lh_unzip_LH_P2_1¹ => [LH_P2 [LH_C _lh_unzip_LH_P2_0⁰ _lh_unzip_LH_P2_0¹] [LH_C _lh_unzip_LH_P2_1⁰ _lh_unzip_LH_P2_1¹]]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰})), [LH_P2 [LH_N] [LH_N]], _lh_unzip_arg1¹)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
