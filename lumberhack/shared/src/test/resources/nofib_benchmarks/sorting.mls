


:lhInHaskell
:lhGenOCaml
compareList []     []     = EQ
compareList []     (_:_)  = LT
compareList (_:_)  []     = GT
compareList (x:xs) (y:ys) =
  if (int_of_char x) == (int_of_char y) then
    compareList xs ys
  else if (int_of_char x) < (int_of_char y) then
    LT
  else
    GT
gtList a b = case compareList a b of
  GT -> True
  _ -> False
leList a b = not (gtList a b)
ltList a b = case compareList a b of
  LT -> True
  _ -> False
geList a b = not (ltList a b)
eqList a b = polyEq (compareList a b) EQ
intersperse             :: a -> [a] -> [a]
intersperse _   []      = []
intersperse sep (x:xs)  = x : (prependToAll sep xs)
prependToAll            :: a -> [a] -> [a]
prependToAll _   []     = []
prependToAll sep (x:xs) = sep : (x : prependToAll sep xs)
break p [] = ([], [])
break p (x:xs) = if p x then ([], (x:xs)) else case (break p xs) of { (ys, zs) -> ((x:ys), zs) }
lines [] = []
lines s = case break (\x -> polyEq x '|') s of (l, s') -> (l:(case s' of { [] -> []; _:s'' -> lines s'' }))
unlines ls = concat $ map (\l -> l ++ "|") ls
odd x = (mod x 2) == 0
-- trying various sorts
hash :: String -> Int
hash str = foldl (\acc c -> (int_of_char c) + (acc*31)) 0 str
quickSort :: [[Char]] -> [[Char]]
quickSort2 :: [[Char]] -> [[Char]]
quickerSort :: [[Char]] -> [[Char]]
insertSort :: [[Char]] -> [[Char]]
treeSort :: [[Char]] -> [[Char]]
treeSort2 :: [[Char]] -> [[Char]]
heapSort :: [[Char]] -> [[Char]]
mergeSort :: [[Char]] -> [[Char]]
quickSort []   = []
quickSort (x:xs) = (quickSort [ y | y <- xs, leList y x ]) ++ (x : quickSort [ y | y <- xs, gtList y x ])
partition :: (a -> Bool) -> [a] -> ([a],[a])
partition p xs = foldr (select p) ([],[]) xs
select :: (a -> Bool) -> a -> ([a], [a]) -> ([a], [a])
select p x (ts,fs) = if p x then ((x:ts), fs) else (ts, (x:fs))
quickSort2 []   = []
quickSort2 (x:xs) =
  case (partition ((\x -> \y -> geList x y) x) xs) of { (lo, hi) -> (quickSort2 lo) ++ (x : (quickSort2 hi)) }
-- tail-recursive, etc., "quicker sort" [as per Meira thesis]
quickerSort []     = []
quickerSort [x]     = [x]
quickerSort (x:xs) = split x [] [] xs
  where
    split x lo hi []   = quickerSort lo ++ (x : quickerSort hi)
    split x lo hi (y:ys) = if leList y x then split x (y:lo) hi ys else split x lo (y:hi) ys
-------------------------------------------------------------
-- as per Meira thesis
insertSort []      = []
insertSort (x:xs)  = trins [] [x] xs
  where
    -- trins :: Ord a => [a] -> [a] -> [a] -> [a]
    trins rev []     (y:ys)    = trins [] ((reverse rev) ++ [y]) ys
    trins rev xs     []        = (reverse rev) ++ xs
    trins rev (x:xs) (y:ys) = if ltList x y then trins (x:rev) xs (y:ys) else trins [] (reverse rev ++ (y:(x:xs))) ys
-------------------------------------------------------------
-- again, as per Meira thesis
data Tree a = Tip | Branch a (Tree a) (Tree a) deriving ()
treeSort param = (readTree . mkTree) param
  where
    -- mkTree :: Ord a => [a] -> Tree a
    mkTree innerparam = foldr to_tree Tip innerparam
      where
        -- to_tree :: Ord a => a -> Tree a -> Tree a
        to_tree x Tip = Branch x Tip Tip
        to_tree x (Branch y l r) = if leList x y then Branch y (to_tree x l) r else Branch y l (to_tree x r)
    -- readTree :: Ord a => Tree a -> [a]
    readTree Tip      = []
    readTree (Branch x l r) = (readTree l) ++ (x : (readTree r))
-- try it w/ bushier trees
data Tree2 a = Tip2 | Twig2 a | Branch2 a (Tree2 a) (Tree2 a) deriving ()
treeSort2 param = (readTree . mkTree) param
  where
    -- mkTree :: Ord a => [a] -> Tree2 a
    mkTree innerparam = foldr to_tree Tip2 innerparam
      where
        -- to_tree :: Ord a => a -> Tree2 a -> Tree2 a
        to_tree x Tip2 = Twig2 x
        to_tree x (Twig2 y) = if leList x y then Branch2 y (Twig2 x) Tip2 else Branch2 y Tip2 (Twig2 x)
        to_tree x (Branch2 y l r) = if leList x y then Branch2 y (to_tree x l) r else Branch2 y l (to_tree x r)
    readTree :: Ord a => Tree2 a -> [a]
    readTree Tip2       = []
    readTree (Twig2 x)  = [x]
    readTree (Branch2 x l r) = (readTree l) ++ (x : (readTree r))
-------------------------------------------------------------
-- ditto, Meira thesis
heapSort xs = clear (heap 0 xs)
  where
    -- heap :: Ord a => Int -> [a] -> Tree a
    heap k [] = Tip
    heap k (x:xs) = to_heap k x (heap (k+1) xs)
    -- to_heap :: Ord a => Int -> a -> Tree a -> Tree a
    to_heap k x Tip = Branch x Tip Tip
    to_heap k x (Branch y l r) = if ((leList x y) && (odd k)) then Branch x (to_heap (div2 k) y l) r
                                 else if (leList x y) then Branch x l (to_heap (div2 k) y r)
                                 else if (odd k) then Branch y (to_heap (div2 k) x l) r
                                 else Branch y l (to_heap (div2 k) x r)
    -- clear :: Ord a => Tree a -> [a]
    clear Tip       = []
    clear (Branch x l r) = x : (clear (mix l r))
    -- mix :: Ord a => Tree a -> Tree a -> Tree a
    mix Tip r = r
    mix l Tip = l
    mix (Branch x l1 r1) (Branch y l2 r2) = if leList x y then Branch x (mix l1 r1) (Branch y l2 r2) else Branch y (Branch x l1 r1) (mix l2 r2)
    div2 :: Int -> Int
    div2 k = k `div` 2
-------------------------------------------------------------
-- ditto, Meira thesis
mergeSort param = (merge_lists . (runsplit [])) param
  where
    -- runsplit :: Ord a => [a] -> [a] -> [[a]]
    runsplit []     []      = []
    runsplit run    []      = [run]
    runsplit []     (x:xs)  = runsplit [x] xs
    runsplit (r:rs) (x:xs)  = case rs of {
      [] -> if gtList x r then runsplit [r,x] xs else if leList x r then runsplit (x:(r:rs)) xs else (r:rs) : (runsplit [x] xs);
      rs -> if leList x r then runsplit (x:(r:rs)) xs else (r:rs) : (runsplit [x] xs)
    }
    -- merge_lists :: Ord a => [[a]] -> [a]
    merge_lists []     = []
    merge_lists (x:xs) = merge x (merge_lists xs)
    -- merge :: Ord a => [a] -> [a] -> [a]
    merge [] ys = ys
    merge xs [] = xs
    merge (x:xs) (y:ys) = if eqList x y then x : (y : (merge xs ys))
                          else if ltList x y then x : (merge xs (y:ys))
                          else y : (merge (x:xs) ys)
mangle :: String -> String
mangle inpt
  = (unlines . sort . lines) inpt
  where
    sort param = foldr (\f -> \g -> f . g) (\x -> x) (intersperse reverse [heapSort, insertSort , mergeSort , quickSort , quickSort2 , quickerSort, treeSort, treeSort2]) param
testSorting_nofib dummy =
  let f = primId "module Main where||import Sort||import Control.Monad (replicateM_)|import Data.List (intersperse)|import System.Environment (getArgs)|import NofibUtils (hash)||main = do|  (n:_) <- getArgs|  replicateM_ (read n) $ do|    (_:s:_) <- getArgs|    f <- readFile s|    print (hash (mangle f))||mangle :: String{-input to sort-} -> String{-output-}|mangle inpt|  = (unlines . sort . lines) inpt|  where|    sort = foldr (.) id (intersperse reverse sorts)|    sorts =|      [ heapSort|      , insertSort|      , mergeSort|      , quickSort|      , quickSort2|      , quickerSort|      , treeSort|      , treeSort2|      ]|" in
  (hash (mangle f))
testSorting_nofib $ primId 0
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> after expansion >>>>>>>>>>
//│ testSorting_nofib_lh_₁^3051(primId⁰(0))
//│ def break_lh_₁(_lh_break_arg1⁰, _lh_break_arg2⁰) = case _lh_break_arg2⁰ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1⁰(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else 
//│ 		let _lh_matchIdent² = break_lh_₁^405(_lh_break_arg1⁰, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent² of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def compareList_lh_₁(_lh_compareList_arg1⁰, _lh_compareList_arg2⁰) = case _lh_compareList_arg1⁰ of {
//│ 	LH_N  => case _lh_compareList_arg2⁰ of {
//│ 		LH_N  => [EQ]
//│ 		| LH_C _lh_compareList_LH_C_0⁰ _lh_compareList_LH_C_1⁰ => [LT]
//│ 		| _  => error⁰}
//│ 	| LH_C _lh_compareList_LH_C_0¹ _lh_compareList_LH_C_1¹ => case _lh_compareList_arg2⁰ of {
//│ 		LH_N  => [GT]
//│ 		| LH_C _lh_compareList_LH_C_0² _lh_compareList_LH_C_1² => if (int_of_char⁰(_lh_compareList_LH_C_0¹) == int_of_char⁰(_lh_compareList_LH_C_0²)) then compareList_lh_₁^38(_lh_compareList_LH_C_1¹, _lh_compareList_LH_C_1²) else if (int_of_char⁰(_lh_compareList_LH_C_0¹) < int_of_char⁰(_lh_compareList_LH_C_0²)) then [LT] else [GT]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def concat_lh_₁(lss⁰) = case lss⁰ of {
//│ 	LH_C h¹² t¹² => mappend_lh_₁₀^568(h¹², concat_lh_₁^571(t¹²))
//│ 	| LH_N  => [LH_N]}
//│ def eqList_lh_₁(_lh_eqList_arg1⁰, _lh_eqList_arg2⁰) = polyEq⁰(compareList_lh_₁^437(_lh_eqList_arg1⁰, _lh_eqList_arg2⁰), [EQ])
//│ def foldl_lh_₁(f⁴, i³, ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h¹⁶ t¹⁶ => foldl_lh_₁^1722(f⁴, f⁴(i³, h¹⁶), t¹⁶)
//│ 	| LH_N  => i³}
//│ def foldr_lh_₁(f³, i², ls⁹) = case ls⁹ of {
//│ 	LH_C h¹⁵ t¹⁵ => f³(h¹⁵, foldr_lh_₁^1693(f³, i², t¹⁵))
//│ 	| LH_N  => i²}
//│ def foldr_lh_₂(f¹, i¹, ls⁶) = case ls⁶ of {
//│ 	LH_C h¹¹ t¹¹ => f¹(h¹¹, foldr_lh_₂^380(f¹, i¹, t¹¹))
//│ 	| LH_N  => i¹}
//│ def foldr_lh_₃(f⁰, i⁰, ls⁴) = case ls⁴ of {
//│ 	LH_C h⁴ t⁴ => f⁰(h⁴, foldr_lh_₃^159(f⁰, i⁰, t⁴))
//│ 	| LH_N  => i⁰}
//│ def geList_lh_₁(_lh_geList_arg1⁰, _lh_geList_arg2⁰) = not⁰(ltList_lh_₂^310(_lh_geList_arg1⁰, _lh_geList_arg2⁰))
//│ def gtList_lh_₁(_lh_gtList_arg1⁴, _lh_gtList_arg2⁴) = 
//│ 	let _lh_matchIdent⁶ = compareList_lh_₁^498(_lh_gtList_arg1⁴, _lh_gtList_arg2⁴)
//│ 	in case _lh_matchIdent⁶ of {
//│ 		GT  => [True]
//│ 		| _  => [False]}
//│ def gtList_lh_₂(_lh_gtList_arg1³, _lh_gtList_arg2³) = 
//│ 	let _lh_matchIdent⁵ = compareList_lh_₁^468(_lh_gtList_arg1³, _lh_gtList_arg2³)
//│ 	in case _lh_matchIdent⁵ of {
//│ 		GT  => [True]
//│ 		| _  => [False]}
//│ def gtList_lh_₃(_lh_gtList_arg1², _lh_gtList_arg2²) = 
//│ 	let _lh_matchIdent⁴ = compareList_lh_₁^456(_lh_gtList_arg1², _lh_gtList_arg2²)
//│ 	in case _lh_matchIdent⁴ of {
//│ 		GT  => [True]
//│ 		| _  => [False]}
//│ def gtList_lh_₄(_lh_gtList_arg1¹, _lh_gtList_arg2¹) = 
//│ 	let _lh_matchIdent³ = compareList_lh_₁^424(_lh_gtList_arg1¹, _lh_gtList_arg2¹)
//│ 	in case _lh_matchIdent³ of {
//│ 		GT  => [True]
//│ 		| _  => [False]}
//│ def gtList_lh_₅(_lh_gtList_arg1⁰, _lh_gtList_arg2⁰) = 
//│ 	let _lh_matchIdent¹ = compareList_lh_₁^288(_lh_gtList_arg1⁰, _lh_gtList_arg2⁰)
//│ 	in case _lh_matchIdent¹ of {
//│ 		GT  => [True]
//│ 		| _  => [False]}
//│ def hash_lh_₁(_lh_hash_arg1⁰) = foldl_lh_₁^1791((fun acc⁰ -> (fun c⁰ -> (int_of_char⁰(c⁰) + (acc⁰ * 31)))), 0, _lh_hash_arg1⁰)
//│ def heapSort_lh_₁(_lh_heapSort_arg1⁰) = 
//│ 	let div2⁰ = (fun _lh_div2_arg1⁰ -> div⁰(_lh_div2_arg1⁰, 2))
//│ 	and clear⁰ = (fun _lh_clear_arg1⁰ -> case _lh_clear_arg1⁰ of {
//│ 			Tip  => [LH_N]
//│ 			| Branch _lh_clear_Branch_0⁰ _lh_clear_Branch_1⁰ _lh_clear_Branch_2⁰ => [LH_C _lh_clear_Branch_0⁰ clear⁰(mix⁰(_lh_clear_Branch_1⁰, _lh_clear_Branch_2⁰))]
//│ 			| _  => error⁰})
//│ 	and mix⁰ = (fun _lh_mix_arg1⁰ -> (fun _lh_mix_arg2⁰ -> case _lh_mix_arg1⁰ of {
//│ 			Tip  => _lh_mix_arg2⁰
//│ 			| _  => case _lh_mix_arg2⁰ of {
//│ 				Tip  => _lh_mix_arg1⁰
//│ 				| _  => case _lh_mix_arg1⁰ of {
//│ 					Branch _lh_mix_Branch_0⁰ _lh_mix_Branch_1⁰ _lh_mix_Branch_2⁰ => case _lh_mix_arg2⁰ of {
//│ 						Branch _lh_mix_Branch_0¹ _lh_mix_Branch_1¹ _lh_mix_Branch_2¹ => if leList_lh_₁₁^914(_lh_mix_Branch_0⁰, _lh_mix_Branch_0¹) then [Branch _lh_mix_Branch_0⁰ mix⁰(_lh_mix_Branch_1⁰, _lh_mix_Branch_2⁰) [Branch _lh_mix_Branch_0¹ _lh_mix_Branch_1¹ _lh_mix_Branch_2¹]] else [Branch _lh_mix_Branch_0¹ [Branch _lh_mix_Branch_0⁰ _lh_mix_Branch_1⁰ _lh_mix_Branch_2⁰] mix⁰(_lh_mix_Branch_1¹, _lh_mix_Branch_2¹)]
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}}}))
//│ 	and heap⁰ = (fun _lh_heap_arg1⁰ -> (fun _lh_heap_arg2⁰ -> case _lh_heap_arg2⁰ of {
//│ 			LH_N  => [Tip]
//│ 			| LH_C _lh_heap_LH_C_0⁰ _lh_heap_LH_C_1⁰ => to_heap⁰(_lh_heap_arg1⁰, _lh_heap_LH_C_0⁰, heap⁰((_lh_heap_arg1⁰ + 1), _lh_heap_LH_C_1⁰))
//│ 			| _  => error⁰}))
//│ 	and to_heap⁰ = (fun _lh_to_heap_arg1⁰ -> (fun _lh_to_heap_arg2⁰ -> (fun _lh_to_heap_arg3⁰ -> case _lh_to_heap_arg3⁰ of {
//│ 			Tip  => [Branch _lh_to_heap_arg2⁰ [Tip] [Tip]]
//│ 			| Branch _lh_to_heap_Branch_0⁰ _lh_to_heap_Branch_1⁰ _lh_to_heap_Branch_2⁰ => if (leList_lh_₁₃^977(_lh_to_heap_arg2⁰, _lh_to_heap_Branch_0⁰) && odd_lh_₁^983(_lh_to_heap_arg1⁰)) then [Branch _lh_to_heap_arg2⁰ to_heap⁰(div2⁰(_lh_to_heap_arg1⁰), _lh_to_heap_Branch_0⁰, _lh_to_heap_Branch_1⁰) _lh_to_heap_Branch_2⁰] else if leList_lh_₁₂^999(_lh_to_heap_arg2⁰, _lh_to_heap_Branch_0⁰) then [Branch _lh_to_heap_arg2⁰ _lh_to_heap_Branch_1⁰ to_heap⁰(div2⁰(_lh_to_heap_arg1⁰), _lh_to_heap_Branch_0⁰, _lh_to_heap_Branch_2⁰)] else if odd_lh_₂^1016(_lh_to_heap_arg1⁰) then [Branch _lh_to_heap_Branch_0⁰ to_heap⁰(div2⁰(_lh_to_heap_arg1⁰), _lh_to_heap_arg2⁰, _lh_to_heap_Branch_1⁰) _lh_to_heap_Branch_2⁰] else [Branch _lh_to_heap_Branch_0⁰ _lh_to_heap_Branch_1⁰ to_heap⁰(div2⁰(_lh_to_heap_arg1⁰), _lh_to_heap_arg2⁰, _lh_to_heap_Branch_2⁰)]
//│ 			| _  => error⁰}))) 
//│ 	in clear⁰(heap⁰(0, _lh_heapSort_arg1⁰))
//│ def insertSort_lh_₁(_lh_insertSort_arg1⁰) = case _lh_insertSort_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_insertSort_LH_C_0⁰ _lh_insertSort_LH_C_1⁰ => 
//│ 		let trins⁰ = (fun _lh_trins_arg1⁰ -> (fun _lh_trins_arg2⁰ -> (fun _lh_trins_arg3⁰ -> case _lh_trins_arg2⁰ of {
//│ 			LH_N  => case _lh_trins_arg3⁰ of {
//│ 				LH_C _lh_trins_LH_C_0⁰ _lh_trins_LH_C_1⁰ => trins⁰([LH_N], mappend_lh_₉^611(reverse_lh_₅^612(_lh_trins_arg1⁰), [LH_C _lh_trins_LH_C_0⁰ [LH_N]]), _lh_trins_LH_C_1⁰)
//│ 				| _  => case _lh_trins_arg3⁰ of {
//│ 					LH_N  => mappend_lh_₁₀^624(reverse_lh_₅^625(_lh_trins_arg1⁰), _lh_trins_arg2⁰)
//│ 					| _  => case _lh_trins_arg2⁰ of {
//│ 						LH_C _lh_trins_LH_C_0¹ _lh_trins_LH_C_1¹ => case _lh_trins_arg3⁰ of {
//│ 							LH_C _lh_trins_LH_C_0² _lh_trins_LH_C_1² => if ltList_lh_₂^633(_lh_trins_LH_C_0¹, _lh_trins_LH_C_0²) then trins⁰([LH_C _lh_trins_LH_C_0¹ _lh_trins_arg1⁰], _lh_trins_LH_C_1¹, [LH_C _lh_trins_LH_C_0² _lh_trins_LH_C_1²]) else trins⁰([LH_N], mappend_lh_₁₀^652(reverse_lh_₂^653(_lh_trins_arg1⁰), [LH_C _lh_trins_LH_C_0² [LH_C _lh_trins_LH_C_0¹ _lh_trins_LH_C_1¹]]), _lh_trins_LH_C_1²)
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}}}
//│ 			| _  => case _lh_trins_arg3⁰ of {
//│ 				LH_N  => mappend_lh_₇^674(reverse_lh_₃^675(_lh_trins_arg1⁰), _lh_trins_arg2⁰)
//│ 				| _  => case _lh_trins_arg2⁰ of {
//│ 					LH_C _lh_trins_LH_C_0³ _lh_trins_LH_C_1³ => case _lh_trins_arg3⁰ of {
//│ 						LH_C _lh_trins_LH_C_0⁴ _lh_trins_LH_C_1⁴ => if ltList_lh_₂^683(_lh_trins_LH_C_0³, _lh_trins_LH_C_0⁴) then trins⁰([LH_C _lh_trins_LH_C_0³ _lh_trins_arg1⁰], _lh_trins_LH_C_1³, [LH_C _lh_trins_LH_C_0⁴ _lh_trins_LH_C_1⁴]) else trins⁰([LH_N], mappend_lh_₈^702(reverse_lh_₄^703(_lh_trins_arg1⁰), [LH_C _lh_trins_LH_C_0⁴ [LH_C _lh_trins_LH_C_0³ _lh_trins_LH_C_1³]]), _lh_trins_LH_C_1⁴)
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}}})))
//│ 		in trins⁰([LH_N], [LH_C _lh_insertSort_LH_C_0⁰ [LH_N]], _lh_insertSort_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def intersperse_lh_₁(_lh_intersperse_arg1⁰, _lh_intersperse_arg2⁰) = case _lh_intersperse_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_intersperse_LH_C_0⁰ _lh_intersperse_LH_C_1⁰ => [LH_C _lh_intersperse_LH_C_0⁰ prependToAll_lh_₁^1063(_lh_intersperse_arg1⁰, _lh_intersperse_LH_C_1⁰)]
//│ 	| _  => error⁰}
//│ def leList_lh_₁(_lh_leList_arg1¹⁵, _lh_leList_arg2¹⁵) = not⁰(gtList_lh_₅^559(_lh_leList_arg1¹⁵, _lh_leList_arg2¹⁵))
//│ def leList_lh_₁₀(_lh_leList_arg1⁶, _lh_leList_arg2⁶) = not⁰(gtList_lh_₅^301(_lh_leList_arg1⁶, _lh_leList_arg2⁶))
//│ def leList_lh_₁₁(_lh_leList_arg1⁵, _lh_leList_arg2⁵) = not⁰(gtList_lh_₅^253(_lh_leList_arg1⁵, _lh_leList_arg2⁵))
//│ def leList_lh_₁₂(_lh_leList_arg1⁴, _lh_leList_arg2⁴) = not⁰(gtList_lh_₅^244(_lh_leList_arg1⁴, _lh_leList_arg2⁴))
//│ def leList_lh_₁₃(_lh_leList_arg1³, _lh_leList_arg2³) = not⁰(gtList_lh_₅^225(_lh_leList_arg1³, _lh_leList_arg2³))
//│ def leList_lh_₁₄(_lh_leList_arg1², _lh_leList_arg2²) = not⁰(gtList_lh_₅^206(_lh_leList_arg1², _lh_leList_arg2²))
//│ def leList_lh_₁₅(_lh_leList_arg1¹, _lh_leList_arg2¹) = not⁰(gtList_lh_₅^185(_lh_leList_arg1¹, _lh_leList_arg2¹))
//│ def leList_lh_₁₆(_lh_leList_arg1⁰, _lh_leList_arg2⁰) = not⁰(gtList_lh_₅^147(_lh_leList_arg1⁰, _lh_leList_arg2⁰))
//│ def leList_lh_₂(_lh_leList_arg1¹⁴, _lh_leList_arg2¹⁴) = not⁰(gtList_lh_₅^550(_lh_leList_arg1¹⁴, _lh_leList_arg2¹⁴))
//│ def leList_lh_₃(_lh_leList_arg1¹³, _lh_leList_arg2¹³) = not⁰(gtList_lh_₅^541(_lh_leList_arg1¹³, _lh_leList_arg2¹³))
//│ def leList_lh_₄(_lh_leList_arg1¹², _lh_leList_arg2¹²) = not⁰(gtList_lh_₅^520(_lh_leList_arg1¹², _lh_leList_arg2¹²))
//│ def leList_lh_₅(_lh_leList_arg1¹¹, _lh_leList_arg2¹¹) = not⁰(gtList_lh_₅^511(_lh_leList_arg1¹¹, _lh_leList_arg2¹¹))
//│ def leList_lh_₆(_lh_leList_arg1¹⁰, _lh_leList_arg2¹⁰) = not⁰(gtList_lh_₅^490(_lh_leList_arg1¹⁰, _lh_leList_arg2¹⁰))
//│ def leList_lh_₇(_lh_leList_arg1⁹, _lh_leList_arg2⁹) = not⁰(gtList_lh_₅^481(_lh_leList_arg1⁹, _lh_leList_arg2⁹))
//│ def leList_lh_₈(_lh_leList_arg1⁸, _lh_leList_arg2⁸) = not⁰(gtList_lh_₅^448(_lh_leList_arg1⁸, _lh_leList_arg2⁸))
//│ def leList_lh_₉(_lh_leList_arg1⁷, _lh_leList_arg2⁷) = not⁰(gtList_lh_₅^356(_lh_leList_arg1⁷, _lh_leList_arg2⁷))
//│ def lines_lh_₁(_lh_lines_arg1⁰) = case _lh_lines_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| _  => 
//│ 		let _lh_matchIdent⁹ = break_lh_₁^1238((fun x¹ -> polyEq⁰(x¹, '|')), _lh_lines_arg1⁰)
//│ 		in case _lh_matchIdent⁹ of {
//│ 			LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ 
//│ 				let _lh_matchIdent¹⁰ = _lh_lines_LH_P2_1⁰
//│ 				in case _lh_matchIdent¹⁰ of {
//│ 					LH_N  => [LH_N]
//│ 					| LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁^1253(_lh_lines_LH_C_1⁰)
//│ 					| _  => error⁰}]
//│ 			| _  => error⁰}}
//│ def ltList_lh_₁(_lh_ltList_arg1¹, _lh_ltList_arg2¹) = 
//│ 	let _lh_matchIdent⁷ = compareList_lh_₁^528(_lh_ltList_arg1¹, _lh_ltList_arg2¹)
//│ 	in case _lh_matchIdent⁷ of {
//│ 		LT  => [True]
//│ 		| _  => [False]}
//│ def ltList_lh_₂(_lh_ltList_arg1⁰, _lh_ltList_arg2⁰) = 
//│ 	let _lh_matchIdent⁰ = compareList_lh_₁^62(_lh_ltList_arg1⁰, _lh_ltList_arg2⁰)
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LT  => [True]
//│ 		| _  => [False]}
//│ def mangle_lh_₁(_lh_mangle_arg1⁰) = 
//│ 	let sort⁰ = (fun _lh_sort_arg1⁰ -> foldr_lh_₁^1738((fun f⁵ -> (fun g⁰ -> (fun _lh_funcomp_x³ -> f⁵(g⁰(_lh_funcomp_x³))))), (fun x² -> x²), intersperse_lh_₁^1751(reverse_lh_₁^1752, [LH_C heapSort_lh_₁^1754 [LH_C insertSort_lh_₁^1755 [LH_C mergeSort_lh_₁^1756 [LH_C quickSort_lh_₁^1757 [LH_C quickSort2_lh_₁^1758 [LH_C quickerSort_lh_₁^1759 [LH_C treeSort_lh_₁^1760 [LH_C treeSort2_lh_₁^1761 [LH_N]]]]]]]]]), _lh_sort_arg1⁰))
//│ 	in (fun _lh_funcomp_x⁴ -> (fun _lh_funcomp_x⁵ -> unlines_lh_₁^1776(sort⁰(_lh_funcomp_x⁵)))(lines_lh_₁^1782(_lh_funcomp_x⁴)))(_lh_mangle_arg1⁰)
//│ def map_lh_₁(f², ls⁷) = case ls⁷ of {
//│ 	LH_C h¹³ t¹³ => [LH_C f²(h¹³) map_lh_₁^582(f², t¹³)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs⁹, ys⁹) = case xs⁹ of {
//│ 	LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₁^594(t¹⁴, ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_lh_₁₀(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₁₀^76(t⁰, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₂(xs⁸, ys⁸) = case xs⁸ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂^366(t¹⁰, ys⁸)]
//│ 	| LH_N  => ys⁸}
//│ def mappend_lh_₃(xs⁷, ys⁷) = case xs⁷ of {
//│ 	LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₃^333(t⁸, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₄(xs⁶, ys⁶) = case xs⁶ of {
//│ 	LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₄^278(t⁷, ys⁶)]
//│ 	| LH_N  => ys⁶}
//│ def mappend_lh_₅(xs⁵, ys⁵) = case xs⁵ of {
//│ 	LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₅^195(t⁶, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mappend_lh_₆(xs⁴, ys⁴) = case xs⁴ of {
//│ 	LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₆^174(t⁵, ys⁴)]
//│ 	| LH_N  => ys⁴}
//│ def mappend_lh_₇(xs³, ys³) = case xs³ of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh_₇^136(t³, ys³)]
//│ 	| LH_N  => ys³}
//│ def mappend_lh_₈(xs², ys²) = case xs² of {
//│ 	LH_C h² t² => [LH_C h² mappend_lh_₈^112(t², ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₉(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₉^94(t¹, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mergeSort_lh_₁(_lh_mergeSort_arg1⁰) = 
//│ 	let merge_lists⁰ = (fun _lh_merge_lists_arg1⁰ -> case _lh_merge_lists_arg1⁰ of {
//│ 			LH_N  => [LH_N]
//│ 			| LH_C _lh_merge_lists_LH_C_0⁰ _lh_merge_lists_LH_C_1⁰ => merge⁰(_lh_merge_lists_LH_C_0⁰, merge_lists⁰(_lh_merge_lists_LH_C_1⁰))
//│ 			| _  => error⁰})
//│ 	and runsplit⁰ = (fun _lh_runsplit_arg1⁰ -> (fun _lh_runsplit_arg2⁰ -> case _lh_runsplit_arg1⁰ of {
//│ 			LH_N  => case _lh_runsplit_arg2⁰ of {
//│ 				LH_N  => [LH_N]
//│ 				| _  => case _lh_runsplit_arg2⁰ of {
//│ 					LH_N  => [LH_C _lh_runsplit_arg1⁰ [LH_N]]
//│ 					| _  => case _lh_runsplit_arg1⁰ of {
//│ 						LH_N  => case _lh_runsplit_arg2⁰ of {
//│ 							LH_C _lh_runsplit_LH_C_0⁰ _lh_runsplit_LH_C_1⁰ => runsplit⁰([LH_C _lh_runsplit_LH_C_0⁰ [LH_N]], _lh_runsplit_LH_C_1⁰)
//│ 							| _  => case _lh_runsplit_arg1⁰ of {
//│ 								LH_C _lh_runsplit_LH_C_0¹ _lh_runsplit_LH_C_1¹ => case _lh_runsplit_arg2⁰ of {
//│ 									LH_C _lh_runsplit_LH_C_0² _lh_runsplit_LH_C_1² => 
//│ 										let _lh_matchIdent¹¹ = _lh_runsplit_LH_C_1¹
//│ 										in case _lh_matchIdent¹¹ of {
//│ 											LH_N  => if gtList_lh_₄^1297(_lh_runsplit_LH_C_0², _lh_runsplit_LH_C_0¹) then runsplit⁰([LH_C _lh_runsplit_LH_C_0¹ [LH_C _lh_runsplit_LH_C_0² [LH_N]]], _lh_runsplit_LH_C_1²) else if leList_lh_₄^1311(_lh_runsplit_LH_C_0², _lh_runsplit_LH_C_0¹) then runsplit⁰([LH_C _lh_runsplit_LH_C_0² [LH_C _lh_runsplit_LH_C_0¹ _lh_runsplit_LH_C_1¹]], _lh_runsplit_LH_C_1²) else [LH_C [LH_C _lh_runsplit_LH_C_0¹ _lh_runsplit_LH_C_1¹] runsplit⁰([LH_C _lh_runsplit_LH_C_0² [LH_N]], _lh_runsplit_LH_C_1²)]
//│ 											| _  => if leList_lh_₂^1338(_lh_runsplit_LH_C_0², _lh_runsplit_LH_C_0¹) then runsplit⁰([LH_C _lh_runsplit_LH_C_0² [LH_C _lh_runsplit_LH_C_0¹ _lh_matchIdent¹¹]], _lh_runsplit_LH_C_1²) else [LH_C [LH_C _lh_runsplit_LH_C_0¹ _lh_matchIdent¹¹] runsplit⁰([LH_C _lh_runsplit_LH_C_0² [LH_N]], _lh_runsplit_LH_C_1²)]}
//│ 									| _  => error⁰}
//│ 								| _  => error⁰}}
//│ 						| _  => case _lh_runsplit_arg1⁰ of {
//│ 							LH_C _lh_runsplit_LH_C_0³ _lh_runsplit_LH_C_1³ => case _lh_runsplit_arg2⁰ of {
//│ 								LH_C _lh_runsplit_LH_C_0⁴ _lh_runsplit_LH_C_1⁴ => 
//│ 									let _lh_matchIdent¹² = _lh_runsplit_LH_C_1³
//│ 									in case _lh_matchIdent¹² of {
//│ 										LH_N  => if gtList_lh_₃^1375(_lh_runsplit_LH_C_0⁴, _lh_runsplit_LH_C_0³) then runsplit⁰([LH_C _lh_runsplit_LH_C_0³ [LH_C _lh_runsplit_LH_C_0⁴ [LH_N]]], _lh_runsplit_LH_C_1⁴) else if leList_lh_₈^1389(_lh_runsplit_LH_C_0⁴, _lh_runsplit_LH_C_0³) then runsplit⁰([LH_C _lh_runsplit_LH_C_0⁴ [LH_C _lh_runsplit_LH_C_0³ _lh_runsplit_LH_C_1³]], _lh_runsplit_LH_C_1⁴) else [LH_C [LH_C _lh_runsplit_LH_C_0³ _lh_runsplit_LH_C_1³] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁴ [LH_N]], _lh_runsplit_LH_C_1⁴)]
//│ 										| _  => if leList_lh_₅^1416(_lh_runsplit_LH_C_0⁴, _lh_runsplit_LH_C_0³) then runsplit⁰([LH_C _lh_runsplit_LH_C_0⁴ [LH_C _lh_runsplit_LH_C_0³ _lh_matchIdent¹²]], _lh_runsplit_LH_C_1⁴) else [LH_C [LH_C _lh_runsplit_LH_C_0³ _lh_matchIdent¹²] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁴ [LH_N]], _lh_runsplit_LH_C_1⁴)]}
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}}}}
//│ 			| _  => case _lh_runsplit_arg2⁰ of {
//│ 				LH_N  => [LH_C _lh_runsplit_arg1⁰ [LH_N]]
//│ 				| _  => case _lh_runsplit_arg1⁰ of {
//│ 					LH_N  => case _lh_runsplit_arg2⁰ of {
//│ 						LH_C _lh_runsplit_LH_C_0⁵ _lh_runsplit_LH_C_1⁵ => runsplit⁰([LH_C _lh_runsplit_LH_C_0⁵ [LH_N]], _lh_runsplit_LH_C_1⁵)
//│ 						| _  => case _lh_runsplit_arg1⁰ of {
//│ 							LH_C _lh_runsplit_LH_C_0⁶ _lh_runsplit_LH_C_1⁶ => case _lh_runsplit_arg2⁰ of {
//│ 								LH_C _lh_runsplit_LH_C_0⁷ _lh_runsplit_LH_C_1⁷ => 
//│ 									let _lh_matchIdent¹³ = _lh_runsplit_LH_C_1⁶
//│ 									in case _lh_matchIdent¹³ of {
//│ 										LH_N  => if gtList_lh_₁^1468(_lh_runsplit_LH_C_0⁷, _lh_runsplit_LH_C_0⁶) then runsplit⁰([LH_C _lh_runsplit_LH_C_0⁶ [LH_C _lh_runsplit_LH_C_0⁷ [LH_N]]], _lh_runsplit_LH_C_1⁷) else if leList_lh_₁^1482(_lh_runsplit_LH_C_0⁷, _lh_runsplit_LH_C_0⁶) then runsplit⁰([LH_C _lh_runsplit_LH_C_0⁷ [LH_C _lh_runsplit_LH_C_0⁶ _lh_runsplit_LH_C_1⁶]], _lh_runsplit_LH_C_1⁷) else [LH_C [LH_C _lh_runsplit_LH_C_0⁶ _lh_runsplit_LH_C_1⁶] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁷ [LH_N]], _lh_runsplit_LH_C_1⁷)]
//│ 										| _  => if leList_lh_₃^1509(_lh_runsplit_LH_C_0⁷, _lh_runsplit_LH_C_0⁶) then runsplit⁰([LH_C _lh_runsplit_LH_C_0⁷ [LH_C _lh_runsplit_LH_C_0⁶ _lh_matchIdent¹³]], _lh_runsplit_LH_C_1⁷) else [LH_C [LH_C _lh_runsplit_LH_C_0⁶ _lh_matchIdent¹³] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁷ [LH_N]], _lh_runsplit_LH_C_1⁷)]}
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}}
//│ 					| _  => case _lh_runsplit_arg1⁰ of {
//│ 						LH_C _lh_runsplit_LH_C_0⁸ _lh_runsplit_LH_C_1⁸ => case _lh_runsplit_arg2⁰ of {
//│ 							LH_C _lh_runsplit_LH_C_0⁹ _lh_runsplit_LH_C_1⁹ => 
//│ 								let _lh_matchIdent¹⁴ = _lh_runsplit_LH_C_1⁸
//│ 								in case _lh_matchIdent¹⁴ of {
//│ 									LH_N  => if gtList_lh_₂^1546(_lh_runsplit_LH_C_0⁹, _lh_runsplit_LH_C_0⁸) then runsplit⁰([LH_C _lh_runsplit_LH_C_0⁸ [LH_C _lh_runsplit_LH_C_0⁹ [LH_N]]], _lh_runsplit_LH_C_1⁹) else if leList_lh_₇^1560(_lh_runsplit_LH_C_0⁹, _lh_runsplit_LH_C_0⁸) then runsplit⁰([LH_C _lh_runsplit_LH_C_0⁹ [LH_C _lh_runsplit_LH_C_0⁸ _lh_runsplit_LH_C_1⁸]], _lh_runsplit_LH_C_1⁹) else [LH_C [LH_C _lh_runsplit_LH_C_0⁸ _lh_runsplit_LH_C_1⁸] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁹ [LH_N]], _lh_runsplit_LH_C_1⁹)]
//│ 									| _  => if leList_lh_₆^1587(_lh_runsplit_LH_C_0⁹, _lh_runsplit_LH_C_0⁸) then runsplit⁰([LH_C _lh_runsplit_LH_C_0⁹ [LH_C _lh_runsplit_LH_C_0⁸ _lh_matchIdent¹⁴]], _lh_runsplit_LH_C_1⁹) else [LH_C [LH_C _lh_runsplit_LH_C_0⁸ _lh_matchIdent¹⁴] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁹ [LH_N]], _lh_runsplit_LH_C_1⁹)]}
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}}}}))
//│ 	and merge⁰ = (fun _lh_merge_arg1⁰ -> (fun _lh_merge_arg2⁰ -> case _lh_merge_arg1⁰ of {
//│ 			LH_N  => _lh_merge_arg2⁰
//│ 			| _  => case _lh_merge_arg2⁰ of {
//│ 				LH_N  => _lh_merge_arg1⁰
//│ 				| _  => case _lh_merge_arg1⁰ of {
//│ 					LH_C _lh_merge_LH_C_0⁰ _lh_merge_LH_C_1⁰ => case _lh_merge_arg2⁰ of {
//│ 						LH_C _lh_merge_LH_C_0¹ _lh_merge_LH_C_1¹ => if eqList_lh_₁^1630(_lh_merge_LH_C_0⁰, _lh_merge_LH_C_0¹) then [LH_C _lh_merge_LH_C_0⁰ [LH_C _lh_merge_LH_C_0¹ merge⁰(_lh_merge_LH_C_1⁰, _lh_merge_LH_C_1¹)]] else if ltList_lh_₁^1644(_lh_merge_LH_C_0⁰, _lh_merge_LH_C_0¹) then [LH_C _lh_merge_LH_C_0⁰ merge⁰(_lh_merge_LH_C_1⁰, [LH_C _lh_merge_LH_C_0¹ _lh_merge_LH_C_1¹])] else [LH_C _lh_merge_LH_C_0¹ merge⁰([LH_C _lh_merge_LH_C_0⁰ _lh_merge_LH_C_1⁰], _lh_merge_LH_C_1¹)]
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}}})) 
//│ 	in (fun _lh_funcomp_x² -> merge_lists⁰(runsplit⁰([LH_N], _lh_funcomp_x²)))(_lh_mergeSort_arg1⁰)
//│ def odd_lh_₁(_lh_odd_arg1¹) = ((_lh_odd_arg1¹ mod 2) == 0)
//│ def odd_lh_₂(_lh_odd_arg1⁰) = ((_lh_odd_arg1⁰ mod 2) == 0)
//│ def partition_lh_₁(_lh_partition_arg1⁰, _lh_partition_arg2⁰) = foldr_lh_₃^318(select_lh_₁^319(_lh_partition_arg1⁰), [LH_P2 [LH_N] [LH_N]], _lh_partition_arg2⁰)
//│ def prependToAll_lh_₁(_lh_prependToAll_arg1⁰, _lh_prependToAll_arg2⁰) = case _lh_prependToAll_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_prependToAll_LH_C_0⁰ _lh_prependToAll_LH_C_1⁰ => [LH_C _lh_prependToAll_arg1⁰ [LH_C _lh_prependToAll_LH_C_0⁰ prependToAll_lh_₁^265(_lh_prependToAll_arg1⁰, _lh_prependToAll_LH_C_1⁰)]]
//│ 	| _  => error⁰}
//│ def quickSort2_lh_₁(_lh_quickSort2_arg1⁰) = case _lh_quickSort2_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_quickSort2_LH_C_0⁰ _lh_quickSort2_LH_C_1⁰ => 
//│ 		let _lh_matchIdent⁸ = partition_lh_₁^1133((fun x⁰ -> (fun y⁰ -> geList_lh_₁^1134(x⁰, y⁰)))(_lh_quickSort2_LH_C_0⁰), _lh_quickSort2_LH_C_1⁰)
//│ 		in case _lh_matchIdent⁸ of {
//│ 			LH_P2 _lh_quickSort2_LH_P2_0⁰ _lh_quickSort2_LH_P2_1⁰ => mappend_lh_₃^1147(quickSort2_lh_₁^1148(_lh_quickSort2_LH_P2_0⁰), [LH_C _lh_quickSort2_LH_C_0⁰ quickSort2_lh_₁^1153(_lh_quickSort2_LH_P2_1⁰)])
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def quickSort_lh_₁(_lh_quickSort_arg1⁰) = case _lh_quickSort_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_quickSort_LH_C_0⁰ _lh_quickSort_LH_C_1⁰ => mappend_lh_₄^1075(quickSort_lh_₁^1076(
//│ 		let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if leList_lh_₁₀^1078(_lh_listcomp_fun_ls_h⁰, _lh_quickSort_LH_C_0⁰) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁰(_lh_quickSort_LH_C_1⁰)), [LH_C _lh_quickSort_LH_C_0⁰ quickSort_lh_₁^1102(
//│ 		let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if gtList_lh_₅^1104(_lh_listcomp_fun_ls_h¹, _lh_quickSort_LH_C_0⁰) then [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun¹(_lh_quickSort_LH_C_1⁰))])
//│ 	| _  => error⁰}
//│ def quickerSort_lh_₁(_lh_quickerSort_arg1⁰) = case _lh_quickerSort_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_quickerSort_LH_C_0⁰ _lh_quickerSort_LH_C_1⁰ => case _lh_quickerSort_LH_C_1⁰ of {
//│ 		LH_N  => [LH_C _lh_quickerSort_LH_C_0⁰ [LH_N]]
//│ 		| _  => 
//│ 			let split⁰ = (fun _lh_split_arg1⁰ -> (fun _lh_split_arg2⁰ -> (fun _lh_split_arg3⁰ -> (fun _lh_split_arg4⁰ -> case _lh_split_arg4⁰ of {
//│ 				LH_N  => mappend_lh_₅^829(quickerSort_lh_₁^830(_lh_split_arg2⁰), [LH_C _lh_split_arg1⁰ quickerSort_lh_₁^835(_lh_split_arg3⁰)])
//│ 				| LH_C _lh_split_LH_C_0⁰ _lh_split_LH_C_1⁰ => if leList_lh_₁₄^840(_lh_split_LH_C_0⁰, _lh_split_arg1⁰) then split⁰(_lh_split_arg1⁰, [LH_C _lh_split_LH_C_0⁰ _lh_split_arg2⁰], _lh_split_arg3⁰, _lh_split_LH_C_1⁰) else split⁰(_lh_split_arg1⁰, _lh_split_arg2⁰, [LH_C _lh_split_LH_C_0⁰ _lh_split_arg3⁰], _lh_split_LH_C_1⁰)
//│ 				| _  => error⁰}))))
//│ 			in split⁰(_lh_quickerSort_LH_C_0⁰, [LH_N], [LH_N], _lh_quickerSort_LH_C_1⁰)}
//│ 	| _  => error⁰}
//│ def reverse_helper_lh_₁(ls⁵, a⁰) = case ls⁵ of {
//│ 	LH_C h⁹ t⁹ => reverse_helper_lh_₁^344(t⁹, [LH_C h⁹ a⁰])
//│ 	| LH_N  => a⁰}
//│ def reverse_lh_₁(ls⁸) = reverse_helper_lh_₁^1164(ls⁸, [LH_N])
//│ def reverse_lh_₂(ls³) = reverse_helper_lh_₁^128(ls³, [LH_N])
//│ def reverse_lh_₃(ls²) = reverse_helper_lh_₁^122(ls², [LH_N])
//│ def reverse_lh_₄(ls¹) = reverse_helper_lh_₁^104(ls¹, [LH_N])
//│ def reverse_lh_₅(ls⁰) = reverse_helper_lh_₁^86(ls⁰, [LH_N])
//│ def select_lh_₁(_lh_select_arg1⁰, _lh_select_arg2⁰, _lh_select_arg3⁰) = case _lh_select_arg3⁰ of {
//│ 	LH_P2 _lh_select_LH_P2_0⁰ _lh_select_LH_P2_1⁰ => if _lh_select_arg1⁰(_lh_select_arg2⁰) then [LH_P2 [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰] _lh_select_LH_P2_1⁰] else [LH_P2 _lh_select_LH_P2_0⁰ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]]
//│ 	| _  => error⁰}
//│ def testSorting_nofib_lh_₁(_lh_testSorting_nofib_arg1⁰) = 
//│ 	let f⁶ = primId⁰([LH_C 'm' [LH_C 'o' [LH_C 'd' [LH_C 'u' [LH_C 'l' [LH_C 'e' [LH_C ' ' [LH_C 'M' [LH_C 'a' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 'e' [LH_C '|' [LH_C '|' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C ' ' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '|' [LH_C '|' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C ' ' [LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C 't' [LH_C 'r' [LH_C 'o' [LH_C 'l' [LH_C '.' [LH_C 'M' [LH_C 'o' [LH_C 'n' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C '(' [LH_C 'r' [LH_C 'e' [LH_C 'p' [LH_C 'l' [LH_C 'i' [LH_C 'c' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C 'M' [LH_C '_' [LH_C ')' [LH_C '|' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C ' ' [LH_C 'D' [LH_C 'a' [LH_C 't' [LH_C 'a' [LH_C '.' [LH_C 'L' [LH_C 'i' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C '(' [LH_C 'i' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_C 'p' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_C 'e' [LH_C ')' [LH_C '|' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C ' ' [LH_C 'S' [LH_C 'y' [LH_C 's' [LH_C 't' [LH_C 'e' [LH_C 'm' [LH_C '.' [LH_C 'E' [LH_C 'n' [LH_C 'v' [LH_C 'i' [LH_C 'r' [LH_C 'o' [LH_C 'n' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C '(' [LH_C 'g' [LH_C 'e' [LH_C 't' [LH_C 'A' [LH_C 'r' [LH_C 'g' [LH_C 's' [LH_C ')' [LH_C '|' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C ' ' [LH_C 'N' [LH_C 'o' [LH_C 'f' [LH_C 'i' [LH_C 'b' [LH_C 'U' [LH_C 't' [LH_C 'i' [LH_C 'l' [LH_C 's' [LH_C ' ' [LH_C '(' [LH_C 'h' [LH_C 'a' [LH_C 's' [LH_C 'h' [LH_C ')' [LH_C '|' [LH_C '|' [LH_C 'm' [LH_C 'a' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'd' [LH_C 'o' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C '(' [LH_C 'n' [LH_C ':' [LH_C '_' [LH_C ')' [LH_C ' ' [LH_C '<' [LH_C '-' [LH_C ' ' [LH_C 'g' [LH_C 'e' [LH_C 't' [LH_C 'A' [LH_C 'r' [LH_C 'g' [LH_C 's' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C 'r' [LH_C 'e' [LH_C 'p' [LH_C 'l' [LH_C 'i' [LH_C 'c' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C 'M' [LH_C '_' [LH_C ' ' [LH_C '(' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'n' [LH_C ')' [LH_C ' ' [LH_C '$' [LH_C ' ' [LH_C 'd' [LH_C 'o' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C '(' [LH_C '_' [LH_C ':' [LH_C 's' [LH_C ':' [LH_C '_' [LH_C ')' [LH_C ' ' [LH_C '<' [LH_C '-' [LH_C ' ' [LH_C 'g' [LH_C 'e' [LH_C 't' [LH_C 'A' [LH_C 'r' [LH_C 'g' [LH_C 's' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C 'f' [LH_C ' ' [LH_C '<' [LH_C '-' [LH_C ' ' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 'd' [LH_C 'F' [LH_C 'i' [LH_C 'l' [LH_C 'e' [LH_C ' ' [LH_C 's' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C '(' [LH_C 'h' [LH_C 'a' [LH_C 's' [LH_C 'h' [LH_C ' ' [LH_C '(' [LH_C 'm' [LH_C 'a' [LH_C 'n' [LH_C 'g' [LH_C 'l' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C ')' [LH_C ')' [LH_C '|' [LH_C '|' [LH_C 'm' [LH_C 'a' [LH_C 'n' [LH_C 'g' [LH_C 'l' [LH_C 'e' [LH_C ' ' [LH_C ':' [LH_C ':' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C '{' [LH_C '-' [LH_C 'i' [LH_C 'n' [LH_C 'p' [LH_C 'u' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '-' [LH_C '}' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C '{' [LH_C '-' [LH_C 'o' [LH_C 'u' [LH_C 't' [LH_C 'p' [LH_C 'u' [LH_C 't' [LH_C '-' [LH_C '}' [LH_C '|' [LH_C 'm' [LH_C 'a' [LH_C 'n' [LH_C 'g' [LH_C 'l' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C 'p' [LH_C 't' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C '(' [LH_C 'u' [LH_C 'n' [LH_C 'l' [LH_C 'i' [LH_C 'n' [LH_C 'e' [LH_C 's' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'l' [LH_C 'i' [LH_C 'n' [LH_C 'e' [LH_C 's' [LH_C ')' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C 'p' [LH_C 't' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 'e' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'l' [LH_C 'd' [LH_C 'r' [LH_C ' ' [LH_C '(' [LH_C '.' [LH_C ')' [LH_C ' ' [LH_C 'i' [LH_C 'd' [LH_C ' ' [LH_C '(' [LH_C 'i' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_C 'p' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_C 'e' [LH_C ' ' [LH_C 'r' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_C 'e' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C 's' [LH_C ')' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C '=' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C '[' [LH_C ' ' [LH_C 'h' [LH_C 'e' [LH_C 'a' [LH_C 'p' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C 's' [LH_C 'e' [LH_C 'r' [LH_C 't' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ',' [LH_C ' ' [LH_C 'm' [LH_C 'e' [LH_C 'r' [LH_C 'g' [LH_C 'e' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ',' [LH_C ' ' [LH_C 'q' [LH_C 'u' [LH_C 'i' [LH_C 'c' [LH_C 'k' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ',' [LH_C ' ' [LH_C 'q' [LH_C 'u' [LH_C 'i' [LH_C 'c' [LH_C 'k' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '2' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ',' [LH_C ' ' [LH_C 'q' [LH_C 'u' [LH_C 'i' [LH_C 'c' [LH_C 'k' [LH_C 'e' [LH_C 'r' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'r' [LH_C 'e' [LH_C 'e' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'r' [LH_C 'e' [LH_C 'e' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '2' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ']' [LH_C '|
//│ 	in hash_lh_₁^3044(mangle_lh_₁^3045(f⁶))
//│ def treeSort2_lh_₁(_lh_treeSort2_arg1⁰) = 
//│ 	let mkTree⁰ = (fun _lh_mkTree_arg1⁰ -> 
//│ 			let to_tree⁰ = (fun _lh_to_tree_arg1⁰ -> (fun _lh_to_tree_arg2⁰ -> case _lh_to_tree_arg2⁰ of {
//│ 				Tip2  => [Twig2 _lh_to_tree_arg1⁰]
//│ 				| Twig2 _lh_to_tree_Twig2_0⁰ => if leList_lh_₁₅^742(_lh_to_tree_arg1⁰, _lh_to_tree_Twig2_0⁰) then [Branch2 _lh_to_tree_Twig2_0⁰ [Twig2 _lh_to_tree_arg1⁰] [Tip2]] else [Branch2 _lh_to_tree_Twig2_0⁰ [Tip2] [Twig2 _lh_to_tree_arg1⁰]]
//│ 				| Branch2 _lh_to_tree_Branch2_0⁰ _lh_to_tree_Branch2_1⁰ _lh_to_tree_Branch2_2⁰ => if leList_lh_₁₆^758(_lh_to_tree_arg1⁰, _lh_to_tree_Branch2_0⁰) then [Branch2 _lh_to_tree_Branch2_0⁰ to_tree⁰(_lh_to_tree_arg1⁰, _lh_to_tree_Branch2_1⁰) _lh_to_tree_Branch2_2⁰] else [Branch2 _lh_to_tree_Branch2_0⁰ _lh_to_tree_Branch2_1⁰ to_tree⁰(_lh_to_tree_arg1⁰, _lh_to_tree_Branch2_2⁰)]
//│ 				| _  => error⁰}))
//│ 			in foldr_lh_₃^784(to_tree⁰, [Tip2], _lh_mkTree_arg1⁰))
//│ 	and readTree⁰ = (fun _lh_readTree_arg1⁰ -> case _lh_readTree_arg1⁰ of {
//│ 			Tip2  => [LH_N]
//│ 			| Twig2 _lh_readTree_Twig2_0⁰ => [LH_C _lh_readTree_Twig2_0⁰ [LH_N]]
//│ 			| Branch2 _lh_readTree_Branch2_0⁰ _lh_readTree_Branch2_1⁰ _lh_readTree_Branch2_2⁰ => mappend_lh_₆^798(readTree⁰(_lh_readTree_Branch2_1⁰), [LH_C _lh_readTree_Branch2_0⁰ readTree⁰(_lh_readTree_Branch2_2⁰)])
//│ 			| _  => error⁰}) 
//│ 	in (fun _lh_funcomp_x⁰ -> readTree⁰(mkTree⁰(_lh_funcomp_x⁰)))(_lh_treeSort2_arg1⁰)
//│ def treeSort_lh_₁(_lh_treeSort_arg1⁰) = 
//│ 	let mkTree¹ = (fun _lh_mkTree_arg1¹ -> 
//│ 			let to_tree¹ = (fun _lh_to_tree_arg1¹ -> (fun _lh_to_tree_arg2¹ -> case _lh_to_tree_arg2¹ of {
//│ 				Tip  => [Branch _lh_to_tree_arg1¹ [Tip] [Tip]]
//│ 				| Branch _lh_to_tree_Branch_0⁰ _lh_to_tree_Branch_1⁰ _lh_to_tree_Branch_2⁰ => if leList_lh_₉^1175(_lh_to_tree_arg1¹, _lh_to_tree_Branch_0⁰) then [Branch _lh_to_tree_Branch_0⁰ to_tree¹(_lh_to_tree_arg1¹, _lh_to_tree_Branch_1⁰) _lh_to_tree_Branch_2⁰] else [Branch _lh_to_tree_Branch_0⁰ _lh_to_tree_Branch_1⁰ to_tree¹(_lh_to_tree_arg1¹, _lh_to_tree_Branch_2⁰)]
//│ 				| _  => error⁰}))
//│ 			in foldr_lh_₂^1201(to_tree¹, [Tip], _lh_mkTree_arg1¹))
//│ 	and readTree¹ = (fun _lh_readTree_arg1¹ -> case _lh_readTree_arg1¹ of {
//│ 			Tip  => [LH_N]
//│ 			| Branch _lh_readTree_Branch_0⁰ _lh_readTree_Branch_1⁰ _lh_readTree_Branch_2⁰ => mappend_lh_₂^1212(readTree¹(_lh_readTree_Branch_1⁰), [LH_C _lh_readTree_Branch_0⁰ readTree¹(_lh_readTree_Branch_2⁰)])
//│ 			| _  => error⁰}) 
//│ 	in (fun _lh_funcomp_x¹ -> readTree¹(mkTree¹(_lh_funcomp_x¹)))(_lh_treeSort_arg1⁰)
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = concat_lh_₁^1706(map_lh_₁^1707((fun l⁰ -> mappend_lh_₁^1708(l⁰, [LH_C '|' [LH_N]])), _lh_unlines_arg1⁰))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec foldl_lh__d1 f_4 i_3 ls_1_0 =
//│ 		  (match ls_1_0 with
//│ 		    | `LH_C(h_1_6, t_1_6) -> 
//│ 		      (((foldl_lh__d1 f_4) ((f_4 i_3) h_1_6)) t_1_6)
//│ 		    | `LH_N -> 
//│ 		      i_3);;
//│ 		let rec hash_lh__d1 _lh_hash_arg1_0 =
//│ 		  (((foldl_lh__d1 (fun acc_0 c_0 -> 
//│ 		    ((int_of_char c_0) + (acc_0 * 31)))) 0) _lh_hash_arg1_0);;
//│ 		let rec mappend_lh__d5 xs_5 ys_5 =
//│ 		  (match xs_5 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      (`LH_C(h_6, ((mappend_lh__d5 t_6) ys_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_5);;
//│ 		let rec compareList_lh__d1 _lh_compareList_arg1_0 _lh_compareList_arg2_0 =
//│ 		  (match _lh_compareList_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (match _lh_compareList_arg2_0 with
//│ 		        | `LH_N -> 
//│ 		          (`EQ)
//│ 		        | `LH_C(_lh_compareList_LH_C_0_0, _lh_compareList_LH_C_1_0) -> 
//│ 		          (`LT)
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | `LH_C(_lh_compareList_LH_C_0_1, _lh_compareList_LH_C_1_1) -> 
//│ 		      (match _lh_compareList_arg2_0 with
//│ 		        | `LH_N -> 
//│ 		          (`GT)
//│ 		        | `LH_C(_lh_compareList_LH_C_0_2, _lh_compareList_LH_C_1_2) -> 
//│ 		          (if ((int_of_char _lh_compareList_LH_C_0_1) = (int_of_char _lh_compareList_LH_C_0_2)) then
//│ 		            ((compareList_lh__d1 _lh_compareList_LH_C_1_1) _lh_compareList_LH_C_1_2)
//│ 		          else
//│ 		            (if ((int_of_char _lh_compareList_LH_C_0_1) < (int_of_char _lh_compareList_LH_C_0_2)) then
//│ 		              (`LT)
//│ 		            else
//│ 		              (`GT)))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec gtList_lh__d5 _lh_gtList_arg1_0 _lh_gtList_arg2_0 =
//│ 		  (let rec _lh_matchIdent_1 = ((compareList_lh__d1 _lh_gtList_arg1_0) _lh_gtList_arg2_0) in
//│ 		    (match _lh_matchIdent_1 with
//│ 		      | `GT -> 
//│ 		        true
//│ 		      | _ -> 
//│ 		        false));;
//│ 		let rec leList_lh__d1_d4 _lh_leList_arg1_2 _lh_leList_arg2_2 =
//│ 		  (not ((gtList_lh__d5 _lh_leList_arg1_2) _lh_leList_arg2_2));;
//│ 		let rec quickerSort_lh__d1 _lh_quickerSort_arg1_0 =
//│ 		  (match _lh_quickerSort_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_quickerSort_LH_C_0_0, _lh_quickerSort_LH_C_1_0) -> 
//│ 		      (match _lh_quickerSort_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_C(_lh_quickerSort_LH_C_0_0, (`LH_N)))
//│ 		        | _ -> 
//│ 		          (let rec split_0 = (fun _lh_split_arg1_0 _lh_split_arg2_0 _lh_split_arg3_0 _lh_split_arg4_0 -> 
//│ 		            (match _lh_split_arg4_0 with
//│ 		              | `LH_N -> 
//│ 		                ((mappend_lh__d5 (quickerSort_lh__d1 _lh_split_arg2_0)) (`LH_C(_lh_split_arg1_0, (quickerSort_lh__d1 _lh_split_arg3_0))))
//│ 		              | `LH_C(_lh_split_LH_C_0_0, _lh_split_LH_C_1_0) -> 
//│ 		                (if ((leList_lh__d1_d4 _lh_split_LH_C_0_0) _lh_split_arg1_0) then
//│ 		                  ((((split_0 _lh_split_arg1_0) (`LH_C(_lh_split_LH_C_0_0, _lh_split_arg2_0))) _lh_split_arg3_0) _lh_split_LH_C_1_0)
//│ 		                else
//│ 		                  ((((split_0 _lh_split_arg1_0) _lh_split_arg2_0) (`LH_C(_lh_split_LH_C_0_0, _lh_split_arg3_0))) _lh_split_LH_C_1_0))
//│ 		              | _ -> 
//│ 		                (failwith "error"))) in
//│ 		            ((((split_0 _lh_quickerSort_LH_C_0_0) (`LH_N)) (`LH_N)) _lh_quickerSort_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec prependToAll_lh__d1 _lh_prependToAll_arg1_0 _lh_prependToAll_arg2_0 =
//│ 		  (match _lh_prependToAll_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_prependToAll_LH_C_0_0, _lh_prependToAll_LH_C_1_0) -> 
//│ 		      (`LH_C(_lh_prependToAll_arg1_0, (`LH_C(_lh_prependToAll_LH_C_0_0, ((prependToAll_lh__d1 _lh_prependToAll_arg1_0) _lh_prependToAll_LH_C_1_0)))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec intersperse_lh__d1 _lh_intersperse_arg1_0 _lh_intersperse_arg2_0 =
//│ 		  (match _lh_intersperse_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_intersperse_LH_C_0_0, _lh_intersperse_LH_C_1_0) -> 
//│ 		      (`LH_C(_lh_intersperse_LH_C_0_0, ((prependToAll_lh__d1 _lh_intersperse_arg1_0) _lh_intersperse_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mappend_lh__d8 xs_2 ys_2 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C(h_2, ((mappend_lh__d8 t_2) ys_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2);;
//│ 		let rec reverse_helper_lh__d1 ls_5 a_0 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_9, t_9) -> 
//│ 		      ((reverse_helper_lh__d1 t_9) (`LH_C(h_9, a_0)))
//│ 		    | `LH_N -> 
//│ 		      a_0);;
//│ 		let rec reverse_lh__d2 ls_3 =
//│ 		  ((reverse_helper_lh__d1 ls_3) (`LH_N));;
//│ 		let rec reverse_lh__d4 ls_1 =
//│ 		  ((reverse_helper_lh__d1 ls_1) (`LH_N));;
//│ 		let rec reverse_lh__d3 ls_2 =
//│ 		  ((reverse_helper_lh__d1 ls_2) (`LH_N));;
//│ 		let rec reverse_lh__d5 ls_0 =
//│ 		  ((reverse_helper_lh__d1 ls_0) (`LH_N));;
//│ 		let rec mappend_lh__d1_d0 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C(h_0, ((mappend_lh__d1_d0 t_0) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec mappend_lh__d7 xs_3 ys_3 =
//│ 		  (match xs_3 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      (`LH_C(h_3, ((mappend_lh__d7 t_3) ys_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_3);;
//│ 		let rec ltList_lh__d2 _lh_ltList_arg1_0 _lh_ltList_arg2_0 =
//│ 		  (let rec _lh_matchIdent_0 = ((compareList_lh__d1 _lh_ltList_arg1_0) _lh_ltList_arg2_0) in
//│ 		    (match _lh_matchIdent_0 with
//│ 		      | `LT -> 
//│ 		        true
//│ 		      | _ -> 
//│ 		        false));;
//│ 		let rec mappend_lh__d9 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (`LH_C(h_1, ((mappend_lh__d9 t_1) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec insertSort_lh__d1 _lh_insertSort_arg1_0 =
//│ 		  (match _lh_insertSort_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_insertSort_LH_C_0_0, _lh_insertSort_LH_C_1_0) -> 
//│ 		      (let rec trins_0 = (fun _lh_trins_arg1_0 _lh_trins_arg2_0 _lh_trins_arg3_0 -> 
//│ 		        (match _lh_trins_arg2_0 with
//│ 		          | `LH_N -> 
//│ 		            (match _lh_trins_arg3_0 with
//│ 		              | `LH_C(_lh_trins_LH_C_0_0, _lh_trins_LH_C_1_0) -> 
//│ 		                (((trins_0 (`LH_N)) ((mappend_lh__d9 (reverse_lh__d5 _lh_trins_arg1_0)) (`LH_C(_lh_trins_LH_C_0_0, (`LH_N))))) _lh_trins_LH_C_1_0)
//│ 		              | _ -> 
//│ 		                (match _lh_trins_arg3_0 with
//│ 		                  | `LH_N -> 
//│ 		                    ((mappend_lh__d1_d0 (reverse_lh__d5 _lh_trins_arg1_0)) _lh_trins_arg2_0)
//│ 		                  | _ -> 
//│ 		                    (match _lh_trins_arg2_0 with
//│ 		                      | `LH_C(_lh_trins_LH_C_0_1, _lh_trins_LH_C_1_1) -> 
//│ 		                        (match _lh_trins_arg3_0 with
//│ 		                          | `LH_C(_lh_trins_LH_C_0_2, _lh_trins_LH_C_1_2) -> 
//│ 		                            (if ((ltList_lh__d2 _lh_trins_LH_C_0_1) _lh_trins_LH_C_0_2) then
//│ 		                              (((trins_0 (`LH_C(_lh_trins_LH_C_0_1, _lh_trins_arg1_0))) _lh_trins_LH_C_1_1) (`LH_C(_lh_trins_LH_C_0_2, _lh_trins_LH_C_1_2)))
//│ 		                            else
//│ 		                              (((trins_0 (`LH_N)) ((mappend_lh__d1_d0 (reverse_lh__d2 _lh_trins_arg1_0)) (`LH_C(_lh_trins_LH_C_0_2, (`LH_C(_lh_trins_LH_C_0_1, _lh_trins_LH_C_1_1)))))) _lh_trins_LH_C_1_2))
//│ 		                          | _ -> 
//│ 		                            (failwith "error"))
//│ 		                      | _ -> 
//│ 		                        (failwith "error"))))
//│ 		          | _ -> 
//│ 		            (match _lh_trins_arg3_0 with
//│ 		              | `LH_N -> 
//│ 		                ((mappend_lh__d7 (reverse_lh__d3 _lh_trins_arg1_0)) _lh_trins_arg2_0)
//│ 		              | _ -> 
//│ 		                (match _lh_trins_arg2_0 with
//│ 		                  | `LH_C(_lh_trins_LH_C_0_3, _lh_trins_LH_C_1_3) -> 
//│ 		                    (match _lh_trins_arg3_0 with
//│ 		                      | `LH_C(_lh_trins_LH_C_0_4, _lh_trins_LH_C_1_4) -> 
//│ 		                        (if ((ltList_lh__d2 _lh_trins_LH_C_0_3) _lh_trins_LH_C_0_4) then
//│ 		                          (((trins_0 (`LH_C(_lh_trins_LH_C_0_3, _lh_trins_arg1_0))) _lh_trins_LH_C_1_3) (`LH_C(_lh_trins_LH_C_0_4, _lh_trins_LH_C_1_4)))
//│ 		                        else
//│ 		                          (((trins_0 (`LH_N)) ((mappend_lh__d8 (reverse_lh__d4 _lh_trins_arg1_0)) (`LH_C(_lh_trins_LH_C_0_4, (`LH_C(_lh_trins_LH_C_0_3, _lh_trins_LH_C_1_3)))))) _lh_trins_LH_C_1_4))
//│ 		                      | _ -> 
//│ 		                        (failwith "error"))
//│ 		                  | _ -> 
//│ 		                    (failwith "error"))))) in
//│ 		        (((trins_0 (`LH_N)) (`LH_C(_lh_insertSort_LH_C_0_0, (`LH_N)))) _lh_insertSort_LH_C_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec foldr_lh__d1 f_3 i_2 ls_9 =
//│ 		  (match ls_9 with
//│ 		    | `LH_C(h_1_5, t_1_5) -> 
//│ 		      ((f_3 h_1_5) (((foldr_lh__d1 f_3) i_2) t_1_5))
//│ 		    | `LH_N -> 
//│ 		      i_2);;
//│ 		let rec break_lh__d1 _lh_break_arg1_0 _lh_break_arg2_0 =
//│ 		  (match _lh_break_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2((`LH_N), (`LH_N)))
//│ 		    | `LH_C(_lh_break_LH_C_0_0, _lh_break_LH_C_1_0) -> 
//│ 		      (if (_lh_break_arg1_0 _lh_break_LH_C_0_0) then
//│ 		        (`LH_P2((`LH_N), (`LH_C(_lh_break_LH_C_0_0, _lh_break_LH_C_1_0))))
//│ 		      else
//│ 		        (let rec _lh_matchIdent_2 = ((break_lh__d1 _lh_break_arg1_0) _lh_break_LH_C_1_0) in
//│ 		          (match _lh_matchIdent_2 with
//│ 		            | `LH_P2(_lh_break_LH_P2_0_0, _lh_break_LH_P2_1_0) -> 
//│ 		              (`LH_P2((`LH_C(_lh_break_LH_C_0_0, _lh_break_LH_P2_0_0)), _lh_break_LH_P2_1_0))
//│ 		            | _ -> 
//│ 		              (failwith "error"))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec lines_lh__d1 _lh_lines_arg1_0 =
//│ 		  (match _lh_lines_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | _ -> 
//│ 		      (let rec _lh_matchIdent_9 = ((break_lh__d1 (fun x_1 -> 
//│ 		        (x_1 = '|'))) _lh_lines_arg1_0) in
//│ 		        (match _lh_matchIdent_9 with
//│ 		          | `LH_P2(_lh_lines_LH_P2_0_0, _lh_lines_LH_P2_1_0) -> 
//│ 		            (`LH_C(_lh_lines_LH_P2_0_0, (let rec _lh_matchIdent_1_0 = _lh_lines_LH_P2_1_0 in
//│ 		              (match _lh_matchIdent_1_0 with
//│ 		                | `LH_N -> 
//│ 		                  (`LH_N)
//│ 		                | `LH_C(_lh_lines_LH_C_0_0, _lh_lines_LH_C_1_0) -> 
//│ 		                  (lines_lh__d1 _lh_lines_LH_C_1_0)
//│ 		                | _ -> 
//│ 		                  (failwith "error")))))
//│ 		          | _ -> 
//│ 		            (failwith "error"))));;
//│ 		let rec mappend_lh__d3 xs_7 ys_7 =
//│ 		  (match xs_7 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      (`LH_C(h_8, ((mappend_lh__d3 t_8) ys_7)))
//│ 		    | `LH_N -> 
//│ 		      ys_7);;
//│ 		let rec select_lh__d1 _lh_select_arg1_0 _lh_select_arg2_0 _lh_select_arg3_0 =
//│ 		  (match _lh_select_arg3_0 with
//│ 		    | `LH_P2(_lh_select_LH_P2_0_0, _lh_select_LH_P2_1_0) -> 
//│ 		      (if (_lh_select_arg1_0 _lh_select_arg2_0) then
//│ 		        (`LH_P2((`LH_C(_lh_select_arg2_0, _lh_select_LH_P2_0_0)), _lh_select_LH_P2_1_0))
//│ 		      else
//│ 		        (`LH_P2(_lh_select_LH_P2_0_0, (`LH_C(_lh_select_arg2_0, _lh_select_LH_P2_1_0)))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec foldr_lh__d3 f_0 i_0 ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      ((f_0 h_4) (((foldr_lh__d3 f_0) i_0) t_4))
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec partition_lh__d1 _lh_partition_arg1_0 _lh_partition_arg2_0 =
//│ 		  (((foldr_lh__d3 (select_lh__d1 _lh_partition_arg1_0)) (`LH_P2((`LH_N), (`LH_N)))) _lh_partition_arg2_0);;
//│ 		let rec geList_lh__d1 _lh_geList_arg1_0 _lh_geList_arg2_0 =
//│ 		  (not ((ltList_lh__d2 _lh_geList_arg1_0) _lh_geList_arg2_0));;
//│ 		let rec quickSort2_lh__d1 _lh_quickSort2_arg1_0 =
//│ 		  (match _lh_quickSort2_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_quickSort2_LH_C_0_0, _lh_quickSort2_LH_C_1_0) -> 
//│ 		      (let rec _lh_matchIdent_8 = ((partition_lh__d1 ((fun x_0 y_0 -> 
//│ 		        ((geList_lh__d1 x_0) y_0)) _lh_quickSort2_LH_C_0_0)) _lh_quickSort2_LH_C_1_0) in
//│ 		        (match _lh_matchIdent_8 with
//│ 		          | `LH_P2(_lh_quickSort2_LH_P2_0_0, _lh_quickSort2_LH_P2_1_0) -> 
//│ 		            ((mappend_lh__d3 (quickSort2_lh__d1 _lh_quickSort2_LH_P2_0_0)) (`LH_C(_lh_quickSort2_LH_C_0_0, (quickSort2_lh__d1 _lh_quickSort2_LH_P2_1_0))))
//│ 		          | _ -> 
//│ 		            (failwith "error")))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec leList_lh__d9 _lh_leList_arg1_7 _lh_leList_arg2_7 =
//│ 		  (not ((gtList_lh__d5 _lh_leList_arg1_7) _lh_leList_arg2_7));;
//│ 		let rec foldr_lh__d2 f_1 i_1 ls_6 =
//│ 		  (match ls_6 with
//│ 		    | `LH_C(h_1_1, t_1_1) -> 
//│ 		      ((f_1 h_1_1) (((foldr_lh__d2 f_1) i_1) t_1_1))
//│ 		    | `LH_N -> 
//│ 		      i_1);;
//│ 		let rec mappend_lh__d2 xs_8 ys_8 =
//│ 		  (match xs_8 with
//│ 		    | `LH_C(h_1_0, t_1_0) -> 
//│ 		      (`LH_C(h_1_0, ((mappend_lh__d2 t_1_0) ys_8)))
//│ 		    | `LH_N -> 
//│ 		      ys_8);;
//│ 		let rec treeSort_lh__d1 _lh_treeSort_arg1_0 =
//│ 		  let rec mkTree_1 = (fun _lh_mkTree_arg1_1 -> 
//│ 		    (let rec to_tree_1 = (fun _lh_to_tree_arg1_1 _lh_to_tree_arg2_1 -> 
//│ 		      (match _lh_to_tree_arg2_1 with
//│ 		        | `Tip -> 
//│ 		          (`Branch(_lh_to_tree_arg1_1, (`Tip), (`Tip)))
//│ 		        | `Branch(_lh_to_tree_Branch_0_0, _lh_to_tree_Branch_1_0, _lh_to_tree_Branch_2_0) -> 
//│ 		          (if ((leList_lh__d9 _lh_to_tree_arg1_1) _lh_to_tree_Branch_0_0) then
//│ 		            (`Branch(_lh_to_tree_Branch_0_0, ((to_tree_1 _lh_to_tree_arg1_1) _lh_to_tree_Branch_1_0), _lh_to_tree_Branch_2_0))
//│ 		          else
//│ 		            (`Branch(_lh_to_tree_Branch_0_0, _lh_to_tree_Branch_1_0, ((to_tree_1 _lh_to_tree_arg1_1) _lh_to_tree_Branch_2_0))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))) in
//│ 		      (((foldr_lh__d2 to_tree_1) (`Tip)) _lh_mkTree_arg1_1)))
//│ 		  and readTree_1 = (fun _lh_readTree_arg1_1 -> 
//│ 		    (match _lh_readTree_arg1_1 with
//│ 		      | `Tip -> 
//│ 		        (`LH_N)
//│ 		      | `Branch(_lh_readTree_Branch_0_0, _lh_readTree_Branch_1_0, _lh_readTree_Branch_2_0) -> 
//│ 		        ((mappend_lh__d2 (readTree_1 _lh_readTree_Branch_1_0)) (`LH_C(_lh_readTree_Branch_0_0, (readTree_1 _lh_readTree_Branch_2_0))))
//│ 		      | _ -> 
//│ 		        (failwith "error")))
//│ 		  in ((fun _lh_funcomp_x_1 -> 
//│ 		    (readTree_1 (mkTree_1 _lh_funcomp_x_1))) _lh_treeSort_arg1_0);;
//│ 		let rec odd_lh__d2 _lh_odd_arg1_0 =
//│ 		  ((_lh_odd_arg1_0 mod 2) = 0);;
//│ 		let rec leList_lh__d1_d2 _lh_leList_arg1_4 _lh_leList_arg2_4 =
//│ 		  (not ((gtList_lh__d5 _lh_leList_arg1_4) _lh_leList_arg2_4));;
//│ 		let rec leList_lh__d1_d1 _lh_leList_arg1_5 _lh_leList_arg2_5 =
//│ 		  (not ((gtList_lh__d5 _lh_leList_arg1_5) _lh_leList_arg2_5));;
//│ 		let rec leList_lh__d1_d3 _lh_leList_arg1_3 _lh_leList_arg2_3 =
//│ 		  (not ((gtList_lh__d5 _lh_leList_arg1_3) _lh_leList_arg2_3));;
//│ 		let rec odd_lh__d1 _lh_odd_arg1_1 =
//│ 		  ((_lh_odd_arg1_1 mod 2) = 0);;
//│ 		let rec heapSort_lh__d1 _lh_heapSort_arg1_0 =
//│ 		  let rec div2_0 = (fun _lh_div2_arg1_0 -> 
//│ 		    (_lh_div2_arg1_0 / 2))
//│ 		  and clear_0 = (fun _lh_clear_arg1_0 -> 
//│ 		    (match _lh_clear_arg1_0 with
//│ 		      | `Tip -> 
//│ 		        (`LH_N)
//│ 		      | `Branch(_lh_clear_Branch_0_0, _lh_clear_Branch_1_0, _lh_clear_Branch_2_0) -> 
//│ 		        (`LH_C(_lh_clear_Branch_0_0, (clear_0 ((mix_0 _lh_clear_Branch_1_0) _lh_clear_Branch_2_0))))
//│ 		      | _ -> 
//│ 		        (failwith "error")))
//│ 		  and mix_0 = (fun _lh_mix_arg1_0 _lh_mix_arg2_0 -> 
//│ 		    (match _lh_mix_arg1_0 with
//│ 		      | `Tip -> 
//│ 		        _lh_mix_arg2_0
//│ 		      | _ -> 
//│ 		        (match _lh_mix_arg2_0 with
//│ 		          | `Tip -> 
//│ 		            _lh_mix_arg1_0
//│ 		          | _ -> 
//│ 		            (match _lh_mix_arg1_0 with
//│ 		              | `Branch(_lh_mix_Branch_0_0, _lh_mix_Branch_1_0, _lh_mix_Branch_2_0) -> 
//│ 		                (match _lh_mix_arg2_0 with
//│ 		                  | `Branch(_lh_mix_Branch_0_1, _lh_mix_Branch_1_1, _lh_mix_Branch_2_1) -> 
//│ 		                    (if ((leList_lh__d1_d1 _lh_mix_Branch_0_0) _lh_mix_Branch_0_1) then
//│ 		                      (`Branch(_lh_mix_Branch_0_0, ((mix_0 _lh_mix_Branch_1_0) _lh_mix_Branch_2_0), (`Branch(_lh_mix_Branch_0_1, _lh_mix_Branch_1_1, _lh_mix_Branch_2_1))))
//│ 		                    else
//│ 		                      (`Branch(_lh_mix_Branch_0_1, (`Branch(_lh_mix_Branch_0_0, _lh_mix_Branch_1_0, _lh_mix_Branch_2_0)), ((mix_0 _lh_mix_Branch_1_1) _lh_mix_Branch_2_1))))
//│ 		                  | _ -> 
//│ 		                    (failwith "error"))
//│ 		              | _ -> 
//│ 		                (failwith "error")))))
//│ 		  and heap_0 = (fun _lh_heap_arg1_0 _lh_heap_arg2_0 -> 
//│ 		    (match _lh_heap_arg2_0 with
//│ 		      | `LH_N -> 
//│ 		        (`Tip)
//│ 		      | `LH_C(_lh_heap_LH_C_0_0, _lh_heap_LH_C_1_0) -> 
//│ 		        (((to_heap_0 _lh_heap_arg1_0) _lh_heap_LH_C_0_0) ((heap_0 (_lh_heap_arg1_0 + 1)) _lh_heap_LH_C_1_0))
//│ 		      | _ -> 
//│ 		        (failwith "error")))
//│ 		  and to_heap_0 = (fun _lh_to_heap_arg1_0 _lh_to_heap_arg2_0 _lh_to_heap_arg3_0 -> 
//│ 		    (match _lh_to_heap_arg3_0 with
//│ 		      | `Tip -> 
//│ 		        (`Branch(_lh_to_heap_arg2_0, (`Tip), (`Tip)))
//│ 		      | `Branch(_lh_to_heap_Branch_0_0, _lh_to_heap_Branch_1_0, _lh_to_heap_Branch_2_0) -> 
//│ 		        (if (((leList_lh__d1_d3 _lh_to_heap_arg2_0) _lh_to_heap_Branch_0_0) && (odd_lh__d1 _lh_to_heap_arg1_0)) then
//│ 		          (`Branch(_lh_to_heap_arg2_0, (((to_heap_0 (div2_0 _lh_to_heap_arg1_0)) _lh_to_heap_Branch_0_0) _lh_to_heap_Branch_1_0), _lh_to_heap_Branch_2_0))
//│ 		        else
//│ 		          (if ((leList_lh__d1_d2 _lh_to_heap_arg2_0) _lh_to_heap_Branch_0_0) then
//│ 		            (`Branch(_lh_to_heap_arg2_0, _lh_to_heap_Branch_1_0, (((to_heap_0 (div2_0 _lh_to_heap_arg1_0)) _lh_to_heap_Branch_0_0) _lh_to_heap_Branch_2_0)))
//│ 		          else
//│ 		            (if (odd_lh__d2 _lh_to_heap_arg1_0) then
//│ 		              (`Branch(_lh_to_heap_Branch_0_0, (((to_heap_0 (div2_0 _lh_to_heap_arg1_0)) _lh_to_heap_arg2_0) _lh_to_heap_Branch_1_0), _lh_to_heap_Branch_2_0))
//│ 		            else
//│ 		              (`Branch(_lh_to_heap_Branch_0_0, _lh_to_heap_Branch_1_0, (((to_heap_0 (div2_0 _lh_to_heap_arg1_0)) _lh_to_heap_arg2_0) _lh_to_heap_Branch_2_0))))))
//│ 		      | _ -> 
//│ 		        (failwith "error")))
//│ 		  in (clear_0 ((heap_0 0) _lh_heapSort_arg1_0));;
//│ 		let rec mappend_lh__d6 xs_4 ys_4 =
//│ 		  (match xs_4 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      (`LH_C(h_5, ((mappend_lh__d6 t_5) ys_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_4);;
//│ 		let rec leList_lh__d1_d5 _lh_leList_arg1_1 _lh_leList_arg2_1 =
//│ 		  (not ((gtList_lh__d5 _lh_leList_arg1_1) _lh_leList_arg2_1));;
//│ 		let rec leList_lh__d1_d6 _lh_leList_arg1_0 _lh_leList_arg2_0 =
//│ 		  (not ((gtList_lh__d5 _lh_leList_arg1_0) _lh_leList_arg2_0));;
//│ 		let rec treeSort2_lh__d1 _lh_treeSort2_arg1_0 =
//│ 		  let rec mkTree_0 = (fun _lh_mkTree_arg1_0 -> 
//│ 		    (let rec to_tree_0 = (fun _lh_to_tree_arg1_0 _lh_to_tree_arg2_0 -> 
//│ 		      (match _lh_to_tree_arg2_0 with
//│ 		        | `Tip2 -> 
//│ 		          (`Twig2(_lh_to_tree_arg1_0))
//│ 		        | `Twig2(_lh_to_tree_Twig2_0_0) -> 
//│ 		          (if ((leList_lh__d1_d5 _lh_to_tree_arg1_0) _lh_to_tree_Twig2_0_0) then
//│ 		            (`Branch2(_lh_to_tree_Twig2_0_0, (`Twig2(_lh_to_tree_arg1_0)), (`Tip2)))
//│ 		          else
//│ 		            (`Branch2(_lh_to_tree_Twig2_0_0, (`Tip2), (`Twig2(_lh_to_tree_arg1_0)))))
//│ 		        | `Branch2(_lh_to_tree_Branch2_0_0, _lh_to_tree_Branch2_1_0, _lh_to_tree_Branch2_2_0) -> 
//│ 		          (if ((leList_lh__d1_d6 _lh_to_tree_arg1_0) _lh_to_tree_Branch2_0_0) then
//│ 		            (`Branch2(_lh_to_tree_Branch2_0_0, ((to_tree_0 _lh_to_tree_arg1_0) _lh_to_tree_Branch2_1_0), _lh_to_tree_Branch2_2_0))
//│ 		          else
//│ 		            (`Branch2(_lh_to_tree_Branch2_0_0, _lh_to_tree_Branch2_1_0, ((to_tree_0 _lh_to_tree_arg1_0) _lh_to_tree_Branch2_2_0))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))) in
//│ 		      (((foldr_lh__d3 to_tree_0) (`Tip2)) _lh_mkTree_arg1_0)))
//│ 		  and readTree_0 = (fun _lh_readTree_arg1_0 -> 
//│ 		    (match _lh_readTree_arg1_0 with
//│ 		      | `Tip2 -> 
//│ 		        (`LH_N)
//│ 		      | `Twig2(_lh_readTree_Twig2_0_0) -> 
//│ 		        (`LH_C(_lh_readTree_Twig2_0_0, (`LH_N)))
//│ 		      | `Branch2(_lh_readTree_Branch2_0_0, _lh_readTree_Branch2_1_0, _lh_readTree_Branch2_2_0) -> 
//│ 		        ((mappend_lh__d6 (readTree_0 _lh_readTree_Branch2_1_0)) (`LH_C(_lh_readTree_Branch2_0_0, (readTree_0 _lh_readTree_Branch2_2_0))))
//│ 		      | _ -> 
//│ 		        (failwith "error")))
//│ 		  in ((fun _lh_funcomp_x_0 -> 
//│ 		    (readTree_0 (mkTree_0 _lh_funcomp_x_0))) _lh_treeSort2_arg1_0);;
//│ 		let rec leList_lh__d8 _lh_leList_arg1_8 _lh_leList_arg2_8 =
//│ 		  (not ((gtList_lh__d5 _lh_leList_arg1_8) _lh_leList_arg2_8));;
//│ 		let rec gtList_lh__d1 _lh_gtList_arg1_4 _lh_gtList_arg2_4 =
//│ 		  (let rec _lh_matchIdent_6 = ((compareList_lh__d1 _lh_gtList_arg1_4) _lh_gtList_arg2_4) in
//│ 		    (match _lh_matchIdent_6 with
//│ 		      | `GT -> 
//│ 		        true
//│ 		      | _ -> 
//│ 		        false));;
//│ 		let rec gtList_lh__d4 _lh_gtList_arg1_1 _lh_gtList_arg2_1 =
//│ 		  (let rec _lh_matchIdent_3 = ((compareList_lh__d1 _lh_gtList_arg1_1) _lh_gtList_arg2_1) in
//│ 		    (match _lh_matchIdent_3 with
//│ 		      | `GT -> 
//│ 		        true
//│ 		      | _ -> 
//│ 		        false));;
//│ 		let rec leList_lh__d1 _lh_leList_arg1_1_5 _lh_leList_arg2_1_5 =
//│ 		  (not ((gtList_lh__d5 _lh_leList_arg1_1_5) _lh_leList_arg2_1_5));;
//│ 		let rec leList_lh__d6 _lh_leList_arg1_1_0 _lh_leList_arg2_1_0 =
//│ 		  (not ((gtList_lh__d5 _lh_leList_arg1_1_0) _lh_leList_arg2_1_0));;
//│ 		let rec gtList_lh__d2 _lh_gtList_arg1_3 _lh_gtList_arg2_3 =
//│ 		  (let rec _lh_matchIdent_5 = ((compareList_lh__d1 _lh_gtList_arg1_3) _lh_gtList_arg2_3) in
//│ 		    (match _lh_matchIdent_5 with
//│ 		      | `GT -> 
//│ 		        true
//│ 		      | _ -> 
//│ 		        false));;
//│ 		let rec ltList_lh__d1 _lh_ltList_arg1_1 _lh_ltList_arg2_1 =
//│ 		  (let rec _lh_matchIdent_7 = ((compareList_lh__d1 _lh_ltList_arg1_1) _lh_ltList_arg2_1) in
//│ 		    (match _lh_matchIdent_7 with
//│ 		      | `LT -> 
//│ 		        true
//│ 		      | _ -> 
//│ 		        false));;
//│ 		let rec leList_lh__d7 _lh_leList_arg1_9 _lh_leList_arg2_9 =
//│ 		  (not ((gtList_lh__d5 _lh_leList_arg1_9) _lh_leList_arg2_9));;
//│ 		let rec eqList_lh__d1 _lh_eqList_arg1_0 _lh_eqList_arg2_0 =
//│ 		  (((compareList_lh__d1 _lh_eqList_arg1_0) _lh_eqList_arg2_0) = (`EQ));;
//│ 		let rec leList_lh__d2 _lh_leList_arg1_1_4 _lh_leList_arg2_1_4 =
//│ 		  (not ((gtList_lh__d5 _lh_leList_arg1_1_4) _lh_leList_arg2_1_4));;
//│ 		let rec leList_lh__d5 _lh_leList_arg1_1_1 _lh_leList_arg2_1_1 =
//│ 		  (not ((gtList_lh__d5 _lh_leList_arg1_1_1) _lh_leList_arg2_1_1));;
//│ 		let rec gtList_lh__d3 _lh_gtList_arg1_2 _lh_gtList_arg2_2 =
//│ 		  (let rec _lh_matchIdent_4 = ((compareList_lh__d1 _lh_gtList_arg1_2) _lh_gtList_arg2_2) in
//│ 		    (match _lh_matchIdent_4 with
//│ 		      | `GT -> 
//│ 		        true
//│ 		      | _ -> 
//│ 		        false));;
//│ 		let rec leList_lh__d4 _lh_leList_arg1_1_2 _lh_leList_arg2_1_2 =
//│ 		  (not ((gtList_lh__d5 _lh_leList_arg1_1_2) _lh_leList_arg2_1_2));;
//│ 		let rec leList_lh__d3 _lh_leList_arg1_1_3 _lh_leList_arg2_1_3 =
//│ 		  (not ((gtList_lh__d5 _lh_leList_arg1_1_3) _lh_leList_arg2_1_3));;
//│ 		let rec mergeSort_lh__d1 _lh_mergeSort_arg1_0 =
//│ 		  let rec merge_lists_0 = (fun _lh_merge_lists_arg1_0 -> 
//│ 		    (match _lh_merge_lists_arg1_0 with
//│ 		      | `LH_N -> 
//│ 		        (`LH_N)
//│ 		      | `LH_C(_lh_merge_lists_LH_C_0_0, _lh_merge_lists_LH_C_1_0) -> 
//│ 		        ((merge_0 _lh_merge_lists_LH_C_0_0) (merge_lists_0 _lh_merge_lists_LH_C_1_0))
//│ 		      | _ -> 
//│ 		        (failwith "error")))
//│ 		  and runsplit_0 = (fun _lh_runsplit_arg1_0 _lh_runsplit_arg2_0 -> 
//│ 		    (match _lh_runsplit_arg1_0 with
//│ 		      | `LH_N -> 
//│ 		        (match _lh_runsplit_arg2_0 with
//│ 		          | `LH_N -> 
//│ 		            (`LH_N)
//│ 		          | _ -> 
//│ 		            (match _lh_runsplit_arg2_0 with
//│ 		              | `LH_N -> 
//│ 		                (`LH_C(_lh_runsplit_arg1_0, (`LH_N)))
//│ 		              | _ -> 
//│ 		                (match _lh_runsplit_arg1_0 with
//│ 		                  | `LH_N -> 
//│ 		                    (match _lh_runsplit_arg2_0 with
//│ 		                      | `LH_C(_lh_runsplit_LH_C_0_0, _lh_runsplit_LH_C_1_0) -> 
//│ 		                        ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_0, (`LH_N)))) _lh_runsplit_LH_C_1_0)
//│ 		                      | _ -> 
//│ 		                        (match _lh_runsplit_arg1_0 with
//│ 		                          | `LH_C(_lh_runsplit_LH_C_0_1, _lh_runsplit_LH_C_1_1) -> 
//│ 		                            (match _lh_runsplit_arg2_0 with
//│ 		                              | `LH_C(_lh_runsplit_LH_C_0_2, _lh_runsplit_LH_C_1_2) -> 
//│ 		                                (let rec _lh_matchIdent_1_1 = _lh_runsplit_LH_C_1_1 in
//│ 		                                  (match _lh_matchIdent_1_1 with
//│ 		                                    | `LH_N -> 
//│ 		                                      (if ((gtList_lh__d4 _lh_runsplit_LH_C_0_2) _lh_runsplit_LH_C_0_1) then
//│ 		                                        ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_1, (`LH_C(_lh_runsplit_LH_C_0_2, (`LH_N)))))) _lh_runsplit_LH_C_1_2)
//│ 		                                      else
//│ 		                                        (if ((leList_lh__d4 _lh_runsplit_LH_C_0_2) _lh_runsplit_LH_C_0_1) then
//│ 		                                          ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_2, (`LH_C(_lh_runsplit_LH_C_0_1, _lh_runsplit_LH_C_1_1))))) _lh_runsplit_LH_C_1_2)
//│ 		                                        else
//│ 		                                          (`LH_C((`LH_C(_lh_runsplit_LH_C_0_1, _lh_runsplit_LH_C_1_1)), ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_2, (`LH_N)))) _lh_runsplit_LH_C_1_2)))))
//│ 		                                    | _ -> 
//│ 		                                      (if ((leList_lh__d2 _lh_runsplit_LH_C_0_2) _lh_runsplit_LH_C_0_1) then
//│ 		                                        ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_2, (`LH_C(_lh_runsplit_LH_C_0_1, _lh_matchIdent_1_1))))) _lh_runsplit_LH_C_1_2)
//│ 		                                      else
//│ 		                                        (`LH_C((`LH_C(_lh_runsplit_LH_C_0_1, _lh_matchIdent_1_1)), ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_2, (`LH_N)))) _lh_runsplit_LH_C_1_2))))))
//│ 		                              | _ -> 
//│ 		                                (failwith "error"))
//│ 		                          | _ -> 
//│ 		                            (failwith "error")))
//│ 		                  | _ -> 
//│ 		                    (match _lh_runsplit_arg1_0 with
//│ 		                      | `LH_C(_lh_runsplit_LH_C_0_3, _lh_runsplit_LH_C_1_3) -> 
//│ 		                        (match _lh_runsplit_arg2_0 with
//│ 		                          | `LH_C(_lh_runsplit_LH_C_0_4, _lh_runsplit_LH_C_1_4) -> 
//│ 		                            (let rec _lh_matchIdent_1_2 = _lh_runsplit_LH_C_1_3 in
//│ 		                              (match _lh_matchIdent_1_2 with
//│ 		                                | `LH_N -> 
//│ 		                                  (if ((gtList_lh__d3 _lh_runsplit_LH_C_0_4) _lh_runsplit_LH_C_0_3) then
//│ 		                                    ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_3, (`LH_C(_lh_runsplit_LH_C_0_4, (`LH_N)))))) _lh_runsplit_LH_C_1_4)
//│ 		                                  else
//│ 		                                    (if ((leList_lh__d8 _lh_runsplit_LH_C_0_4) _lh_runsplit_LH_C_0_3) then
//│ 		                                      ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_4, (`LH_C(_lh_runsplit_LH_C_0_3, _lh_runsplit_LH_C_1_3))))) _lh_runsplit_LH_C_1_4)
//│ 		                                    else
//│ 		                                      (`LH_C((`LH_C(_lh_runsplit_LH_C_0_3, _lh_runsplit_LH_C_1_3)), ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_4, (`LH_N)))) _lh_runsplit_LH_C_1_4)))))
//│ 		                                | _ -> 
//│ 		                                  (if ((leList_lh__d5 _lh_runsplit_LH_C_0_4) _lh_runsplit_LH_C_0_3) then
//│ 		                                    ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_4, (`LH_C(_lh_runsplit_LH_C_0_3, _lh_matchIdent_1_2))))) _lh_runsplit_LH_C_1_4)
//│ 		                                  else
//│ 		                                    (`LH_C((`LH_C(_lh_runsplit_LH_C_0_3, _lh_matchIdent_1_2)), ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_4, (`LH_N)))) _lh_runsplit_LH_C_1_4))))))
//│ 		                          | _ -> 
//│ 		                            (failwith "error"))
//│ 		                      | _ -> 
//│ 		                        (failwith "error")))))
//│ 		      | _ -> 
//│ 		        (match _lh_runsplit_arg2_0 with
//│ 		          | `LH_N -> 
//│ 		            (`LH_C(_lh_runsplit_arg1_0, (`LH_N)))
//│ 		          | _ -> 
//│ 		            (match _lh_runsplit_arg1_0 with
//│ 		              | `LH_N -> 
//│ 		                (match _lh_runsplit_arg2_0 with
//│ 		                  | `LH_C(_lh_runsplit_LH_C_0_5, _lh_runsplit_LH_C_1_5) -> 
//│ 		                    ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_5, (`LH_N)))) _lh_runsplit_LH_C_1_5)
//│ 		                  | _ -> 
//│ 		                    (match _lh_runsplit_arg1_0 with
//│ 		                      | `LH_C(_lh_runsplit_LH_C_0_6, _lh_runsplit_LH_C_1_6) -> 
//│ 		                        (match _lh_runsplit_arg2_0 with
//│ 		                          | `LH_C(_lh_runsplit_LH_C_0_7, _lh_runsplit_LH_C_1_7) -> 
//│ 		                            (let rec _lh_matchIdent_1_3 = _lh_runsplit_LH_C_1_6 in
//│ 		                              (match _lh_matchIdent_1_3 with
//│ 		                                | `LH_N -> 
//│ 		                                  (if ((gtList_lh__d1 _lh_runsplit_LH_C_0_7) _lh_runsplit_LH_C_0_6) then
//│ 		                                    ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_6, (`LH_C(_lh_runsplit_LH_C_0_7, (`LH_N)))))) _lh_runsplit_LH_C_1_7)
//│ 		                                  else
//│ 		                                    (if ((leList_lh__d1 _lh_runsplit_LH_C_0_7) _lh_runsplit_LH_C_0_6) then
//│ 		                                      ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_7, (`LH_C(_lh_runsplit_LH_C_0_6, _lh_runsplit_LH_C_1_6))))) _lh_runsplit_LH_C_1_7)
//│ 		                                    else
//│ 		                                      (`LH_C((`LH_C(_lh_runsplit_LH_C_0_6, _lh_runsplit_LH_C_1_6)), ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_7, (`LH_N)))) _lh_runsplit_LH_C_1_7)))))
//│ 		                                | _ -> 
//│ 		                                  (if ((leList_lh__d3 _lh_runsplit_LH_C_0_7) _lh_runsplit_LH_C_0_6) then
//│ 		                                    ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_7, (`LH_C(_lh_runsplit_LH_C_0_6, _lh_matchIdent_1_3))))) _lh_runsplit_LH_C_1_7)
//│ 		                                  else
//│ 		                                    (`LH_C((`LH_C(_lh_runsplit_LH_C_0_6, _lh_matchIdent_1_3)), ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_7, (`LH_N)))) _lh_runsplit_LH_C_1_7))))))
//│ 		                          | _ -> 
//│ 		                            (failwith "error"))
//│ 		                      | _ -> 
//│ 		                        (failwith "error")))
//│ 		              | _ -> 
//│ 		                (match _lh_runsplit_arg1_0 with
//│ 		                  | `LH_C(_lh_runsplit_LH_C_0_8, _lh_runsplit_LH_C_1_8) -> 
//│ 		                    (match _lh_runsplit_arg2_0 with
//│ 		                      | `LH_C(_lh_runsplit_LH_C_0_9, _lh_runsplit_LH_C_1_9) -> 
//│ 		                        (let rec _lh_matchIdent_1_4 = _lh_runsplit_LH_C_1_8 in
//│ 		                          (match _lh_matchIdent_1_4 with
//│ 		                            | `LH_N -> 
//│ 		                              (if ((gtList_lh__d2 _lh_runsplit_LH_C_0_9) _lh_runsplit_LH_C_0_8) then
//│ 		                                ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_8, (`LH_C(_lh_runsplit_LH_C_0_9, (`LH_N)))))) _lh_runsplit_LH_C_1_9)
//│ 		                              else
//│ 		                                (if ((leList_lh__d7 _lh_runsplit_LH_C_0_9) _lh_runsplit_LH_C_0_8) then
//│ 		                                  ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_9, (`LH_C(_lh_runsplit_LH_C_0_8, _lh_runsplit_LH_C_1_8))))) _lh_runsplit_LH_C_1_9)
//│ 		                                else
//│ 		                                  (`LH_C((`LH_C(_lh_runsplit_LH_C_0_8, _lh_runsplit_LH_C_1_8)), ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_9, (`LH_N)))) _lh_runsplit_LH_C_1_9)))))
//│ 		                            | _ -> 
//│ 		                              (if ((leList_lh__d6 _lh_runsplit_LH_C_0_9) _lh_runsplit_LH_C_0_8) then
//│ 		                                ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_9, (`LH_C(_lh_runsplit_LH_C_0_8, _lh_matchIdent_1_4))))) _lh_runsplit_LH_C_1_9)
//│ 		                              else
//│ 		                                (`LH_C((`LH_C(_lh_runsplit_LH_C_0_8, _lh_matchIdent_1_4)), ((runsplit_0 (`LH_C(_lh_runsplit_LH_C_0_9, (`LH_N)))) _lh_runsplit_LH_C_1_9))))))
//│ 		                      | _ -> 
//│ 		                        (failwith "error"))
//│ 		                  | _ -> 
//│ 		                    (failwith "error"))))))
//│ 		  and merge_0 = (fun _lh_merge_arg1_0 _lh_merge_arg2_0 -> 
//│ 		    (match _lh_merge_arg1_0 with
//│ 		      | `LH_N -> 
//│ 		        _lh_merge_arg2_0
//│ 		      | _ -> 
//│ 		        (match _lh_merge_arg2_0 with
//│ 		          | `LH_N -> 
//│ 		            _lh_merge_arg1_0
//│ 		          | _ -> 
//│ 		            (match _lh_merge_arg1_0 with
//│ 		              | `LH_C(_lh_merge_LH_C_0_0, _lh_merge_LH_C_1_0) -> 
//│ 		                (match _lh_merge_arg2_0 with
//│ 		                  | `LH_C(_lh_merge_LH_C_0_1, _lh_merge_LH_C_1_1) -> 
//│ 		                    (if ((eqList_lh__d1 _lh_merge_LH_C_0_0) _lh_merge_LH_C_0_1) then
//│ 		                      (`LH_C(_lh_merge_LH_C_0_0, (`LH_C(_lh_merge_LH_C_0_1, ((merge_0 _lh_merge_LH_C_1_0) _lh_merge_LH_C_1_1)))))
//│ 		                    else
//│ 		                      (if ((ltList_lh__d1 _lh_merge_LH_C_0_0) _lh_merge_LH_C_0_1) then
//│ 		                        (`LH_C(_lh_merge_LH_C_0_0, ((merge_0 _lh_merge_LH_C_1_0) (`LH_C(_lh_merge_LH_C_0_1, _lh_merge_LH_C_1_1)))))
//│ 		                      else
//│ 		                        (`LH_C(_lh_merge_LH_C_0_1, ((merge_0 (`LH_C(_lh_merge_LH_C_0_0, _lh_merge_LH_C_1_0))) _lh_merge_LH_C_1_1)))))
//│ 		                  | _ -> 
//│ 		                    (failwith "error"))
//│ 		              | _ -> 
//│ 		                (failwith "error")))))
//│ 		  in ((fun _lh_funcomp_x_2 -> 
//│ 		    (merge_lists_0 ((runsplit_0 (`LH_N)) _lh_funcomp_x_2))) _lh_mergeSort_arg1_0);;
//│ 		let rec reverse_lh__d1 ls_8 =
//│ 		  ((reverse_helper_lh__d1 ls_8) (`LH_N));;
//│ 		let rec concat_lh__d1 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_1_2, t_1_2) -> 
//│ 		      ((mappend_lh__d1_d0 h_1_2) (concat_lh__d1 t_1_2))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d1 f_2 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_1_3, t_1_3) -> 
//│ 		      (`LH_C((f_2 h_1_3), ((map_lh__d1 f_2) t_1_3)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh__d1 xs_9 ys_9 =
//│ 		  (match xs_9 with
//│ 		    | `LH_C(h_1_4, t_1_4) -> 
//│ 		      (`LH_C(h_1_4, ((mappend_lh__d1 t_1_4) ys_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_9);;
//│ 		let rec unlines_lh__d1 _lh_unlines_arg1_0 =
//│ 		  (concat_lh__d1 ((map_lh__d1 (fun l_0 -> 
//│ 		    ((mappend_lh__d1 l_0) (`LH_C('|', (`LH_N)))))) _lh_unlines_arg1_0));;
//│ 		let rec leList_lh__d1_d0 _lh_leList_arg1_6 _lh_leList_arg2_6 =
//│ 		  (not ((gtList_lh__d5 _lh_leList_arg1_6) _lh_leList_arg2_6));;
//│ 		let rec mappend_lh__d4 xs_6 ys_6 =
//│ 		  (match xs_6 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      (`LH_C(h_7, ((mappend_lh__d4 t_7) ys_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_6);;
//│ 		let rec quickSort_lh__d1 _lh_quickSort_arg1_0 =
//│ 		  (match _lh_quickSort_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_quickSort_LH_C_0_0, _lh_quickSort_LH_C_1_0) -> 
//│ 		      ((mappend_lh__d4 (quickSort_lh__d1 (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		        (match _lh_listcomp_fun_para_0 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		            (if ((leList_lh__d1_d0 _lh_listcomp_fun_ls_h_0) _lh_quickSort_LH_C_0_0) then
//│ 		              (`LH_C(_lh_listcomp_fun_ls_h_0, (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		            else
//│ 		              (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_0 _lh_quickSort_LH_C_1_0)))) (`LH_C(_lh_quickSort_LH_C_0_0, (quickSort_lh__d1 (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		        (match _lh_listcomp_fun_para_1 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		            (if ((gtList_lh__d5 _lh_listcomp_fun_ls_h_1) _lh_quickSort_LH_C_0_0) then
//│ 		              (`LH_C(_lh_listcomp_fun_ls_h_1, (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		            else
//│ 		              (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_1 _lh_quickSort_LH_C_1_0))))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mangle_lh__d1 _lh_mangle_arg1_0 =
//│ 		  (let rec sort_0 = (fun _lh_sort_arg1_0 -> 
//│ 		    ((((foldr_lh__d1 (fun f_5 g_0 _lh_funcomp_x_3 -> 
//│ 		      (f_5 (g_0 _lh_funcomp_x_3)))) (fun x_2 -> 
//│ 		      x_2)) ((intersperse_lh__d1 reverse_lh__d1) (`LH_C(heapSort_lh__d1, (`LH_C(insertSort_lh__d1, (`LH_C(mergeSort_lh__d1, (`LH_C(quickSort_lh__d1, (`LH_C(quickSort2_lh__d1, (`LH_C(quickerSort_lh__d1, (`LH_C(treeSort_lh__d1, (`LH_C(treeSort2_lh__d1, (`LH_N))))))))))))))))))) _lh_sort_arg1_0)) in
//│ 		    ((fun _lh_funcomp_x_4 -> 
//│ 		      ((fun _lh_funcomp_x_5 -> 
//│ 		        (unlines_lh__d1 (sort_0 _lh_funcomp_x_5))) (lines_lh__d1 _lh_funcomp_x_4))) _lh_mangle_arg1_0));;
//│ 		let rec testSorting_nofib_lh__d1 _lh_testSorting_nofib_arg1_0 =
//│ 		  (let rec f_6 = (`LH_C('m', (`LH_C('o', (`LH_C('d', (`LH_C('u', (`LH_C('l', (`LH_C('e', (`LH_C(' ', (`LH_C('M', (`LH_C('a', (`LH_C('i', (`LH_C('n', (`LH_C(' ', (`LH_C('w', (`LH_C('h', (`LH_C('e', (`LH_C('r', (`LH_C('e', (`LH_C('|', (`LH_C('|', (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C(' ', (`LH_C('S', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C('|', (`LH_C('|', (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C(' ', (`LH_C('C', (`LH_C('o', (`LH_C('n', (`LH_C('t', (`LH_C('r', (`LH_C('o', (`LH_C('l', (`LH_C('.', (`LH_C('M', (`LH_C('o', (`LH_C('n', (`LH_C('a', (`LH_C('d', (`LH_C(' ', (`LH_C('(', (`LH_C('r', (`LH_C('e', (`LH_C('p', (`LH_C('l', (`LH_C('i', (`LH_C('c', (`LH_C('a', (`LH_C('t', (`LH_C('e', (`LH_C('M', (`LH_C('_', (`LH_C(')', (`LH_C('|', (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C(' ', (`LH_C('D', (`LH_C('a', (`LH_C('t', (`LH_C('a', (`LH_C('.', (`LH_C('L', (`LH_C('i', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('(', (`LH_C('i', (`LH_C('n', (`LH_C('t', (`LH_C('e', (`LH_C('r', (`LH_C('s', (`LH_C('p', (`LH_C('e', (`LH_C('r', (`LH_C('s', (`LH_C('e', (`LH_C(')', (`LH_C('|', (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C(' ', (`LH_C('S', (`LH_C('y', (`LH_C('s', (`LH_C('t', (`LH_C('e', (`LH_C('m', (`LH_C('.', (`LH_C('E', (`LH_C('n', (`LH_C('v', (`LH_C('i', (`LH_C('r', (`LH_C('o', (`LH_C('n', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(' ', (`LH_C('(', (`LH_C('g', (`LH_C('e', (`LH_C('t', (`LH_C('A', (`LH_C('r', (`LH_C('g', (`LH_C('s', (`LH_C(')', (`LH_C('|', (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C(' ', (`LH_C('N', (`LH_C('o', (`LH_C('f', (`LH_C('i', (`LH_C('b', (`LH_C('U', (`LH_C('t', (`LH_C('i', (`LH_C('l', (`LH_C('s', (`LH_C(' ', (`LH_C('(', (`LH_C('h', (`LH_C('a', (`LH_C('s', (`LH_C('h', (`LH_C(')', (`LH_C('|', (`LH_C('|', (`LH_C('m', (`LH_C('a', (`LH_C('i', (`LH_C('n', (`LH_C(' ', (`LH_C('=', (`LH_C(' ', (`LH_C('d', (`LH_C('o', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C('(', (`LH_C('n', (`LH_C(':', (`LH_C('_', (`LH_C(')', (`LH_C(' ', (`LH_C('<', (`LH_C('-', (`LH_C(' ', (`LH_C('g', (`LH_C('e', (`LH_C('t', (`LH_C('A', (`LH_C('r', (`LH_C('g', (`LH_C('s', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C('r', (`LH_C('e', (`LH_C('p', (`LH_C('l', (`LH_C('i', (`LH_C('c', (`LH_C('a', (`LH_C('t', (`LH_C('e', (`LH_C('M', (`LH_C('_', (`LH_C(' ', (`LH_C('(', (`LH_C('r', (`LH_C('e', (`LH_C('a', (`LH_C('d', (`LH_C(' ', (`LH_C('n', (`LH_C(')', (`LH_C(' ', (`LH_C('$', (`LH_C(' ', (`LH_C('d', (`LH_C('o', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C('(', (`LH_C('_', (`LH_C(':', (`LH_C('s', (`LH_C(':', (`LH_C('_', (`LH_C(')', (`LH_C(' ', (`LH_C('<', (`LH_C('-', (`LH_C(' ', (`LH_C('g', (`LH_C('e', (`LH_C('t', (`LH_C('A', (`LH_C('r', (`LH_C('g', (`LH_C('s', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C('f', (`LH_C(' ', (`LH_C('<', (`LH_C('-', (`LH_C(' ', (`LH_C('r', (`LH_C('e', (`LH_C('a', (`LH_C('d', (`LH_C('F', (`LH_C('i', (`LH_C('l', (`LH_C('e', (`LH_C(' ', (`LH_C('s', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C('p', (`LH_C('r', (`LH_C('i', (`LH_C('n', (`LH_C('t', (`LH_C(' ', (`LH_C('(', (`LH_C('h', (`LH_C('a', (`LH_C('s', (`LH_C('h', (`LH_C(' ', (`LH_C('(', (`LH_C('m', (`LH_C('a', (`LH_C('n', (`LH_C('g', (`LH_C('l', (`LH_C('e', (`LH_C(' ', (`LH_C('f', (`LH_C(')', (`LH_C(')', (`LH_C('|', (`LH_C('|', (`LH_C('m', (`LH_C('a', (`LH_C('n', (`LH_C('g', (`LH_C('l', (`LH_C('e', (`LH_C(' ', (`LH_C(':', (`LH_C(':', (`LH_C(' ', (`LH_C('S', (`LH_C('t', (`LH_C('r', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C('{', (`LH_C('-', (`LH_C('i', (`LH_C('n', (`LH_C('p', (`LH_C('u', (`LH_C('t', (`LH_C(' ', (`LH_C('t', (`LH_C('o', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C('-', (`LH_C('}', (`LH_C(' ', (`LH_C('-', (`LH_C('>', (`LH_C(' ', (`LH_C('S', (`LH_C('t', (`LH_C('r', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C('{', (`LH_C('-', (`LH_C('o', (`LH_C('u', (`LH_C('t', (`LH_C('p', (`LH_C('u', (`LH_C('t', (`LH_C('-', (`LH_C('}', (`LH_C('|', (`LH_C('m', (`LH_C('a', (`LH_C('n', (`LH_C('g', (`LH_C('l', (`LH_C('e', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C('p', (`LH_C('t', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C('=', (`LH_C(' ', (`LH_C('(', (`LH_C('u', (`LH_C('n', (`LH_C('l', (`LH_C('i', (`LH_C('n', (`LH_C('e', (`LH_C('s', (`LH_C(' ', (`LH_C('.', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C(' ', (`LH_C('.', (`LH_C(' ', (`LH_C('l', (`LH_C('i', (`LH_C('n', (`LH_C('e', (`LH_C('s', (`LH_C(')', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C('p', (`LH_C('t', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C('w', (`LH_C('h', (`LH_C('e', (`LH_C('r', (`LH_C('e', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C(' ', (`LH_C('=', (`LH_C(' ', (`LH_C('f', (`LH_C('o', (`LH_C('l', (`LH_C('d', (`LH_C('r', (`LH_C(' ', (`LH_C('(', (`LH_C('.', (`LH_C(')', (`LH_C(' ', (`LH_C('i', (`LH_C('d', (`LH_C(' ', (`LH_C('(', (`LH_C('i', (`LH_C('n', (`LH_C('t', (`LH_C('e', (`LH_C('r', (`LH_C('s', (`LH_C('p', (`LH_C('e', (`LH_C('r', (`LH_C('s', (`LH_C('e', (`LH_C(' ', (`LH_C('r', (`LH_C('e', (`LH_C('v', (`LH_C('e', (`LH_C('r', (`LH_C('s', (`LH_C('e', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C('s', (`LH_C(')', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C('s', (`LH_C(' ', (`LH_C('=', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C('[', (`LH_C(' ', (`LH_C('h', (`LH_C('e', (`LH_C('a', (`LH_C('p', (`LH_C('S', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(',', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C('s', (`LH_C('e', (`LH_C('r', (`LH_C('t', (`LH_C('S', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(',', (`LH_C(' ', (`LH_C('m', (`LH_C('e', (`LH_C('r', (`LH_C('g', (`LH_C('e', (`LH_C('S', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(',', (`LH_C(' ', (`LH_C('q', (`LH_C('u', (`LH_C('i', (`LH_C('c', (`LH_C('k', (`LH_C('S', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(',', (`LH_C(' ', (`LH_C('q', (`LH_C('u', (`LH_C('i', (`LH_C('c', (`LH_C('k', (`LH_C('S', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C('2', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(',', (`LH_C(' ', (`LH_C('q', (`LH_C('u', (`LH_C('i', (`LH_C('c', (`LH_C('k', (`LH_C('e', (`LH_C('r', (`LH_C('S', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(',', (`LH_C(' ', (`LH_C('t', (`LH_C('r', (`LH_C('e', (`LH_C('e', (`LH_C('S', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(',', (`LH_C(' ', (`LH_C('t', (`LH_C('r', (`LH_C('e', (`LH_C('e', (`LH_C('S', (`LH_C('o', (`LH_C('r', (`LH_C('t', (`LH_C('2', (`LH_C('|', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(' ', (`LH_C(']', (`LH_C('|', (`in
//│ 		    (hash_lh__d1 (mangle_lh__d1 f_6)));;
//│ 		(testSorting_nofib_lh__d1 0)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< after expansion <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 262 --->
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => f³(h¹⁵, foldr_lh_₁(f³, i², t¹⁵)) | LH_N  => i²}: 1702
//│ [LH_C _lh_prependToAll_LH_C_0⁰ prependToAll_lh_₁(_lh_prependToAll_arg1⁰, _lh_prependToAll_LH_C_1⁰)]: 270 --->
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => f³(h¹⁵, foldr_lh_₁(f³, i², t¹⁵)) | LH_N  => i²}: 1702
//│ [LH_C _lh_prependToAll_arg1⁰ [LH_C _lh_prependToAll_LH_C_0⁰ prependToAll_lh_₁(_lh_prependToAll_arg1⁰, _lh_prependToAll_LH_C_1⁰)]]: 271 --->
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => f³(h¹⁵, foldr_lh_₁(f³, i², t¹⁵)) | LH_N  => i²}: 1702
//│ [LH_N]: 395 --->
//│ 	case _lh_matchIdent¹⁰ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1257
//│ [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]: 403 --->
//│ 	case _lh_matchIdent¹⁰ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1257
//│ [LH_C f²(h¹³) map_lh_₁(f², t¹³)]: 587 --->
//│ 	case lss⁰ of {LH_C h¹² t¹² => mappend_lh_₁₀(h¹², concat_lh_₁(t¹²)) | LH_N  => [LH_N]}: 576
//│ [LH_N]: 588 --->
//│ 	case lss⁰ of {LH_C h¹² t¹² => mappend_lh_₁₀(h¹², concat_lh_₁(t¹²)) | LH_N  => [LH_N]}: 576
//│ [LH_N]: 1061 --->
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => f³(h¹⁵, foldr_lh_₁(f³, i², t¹⁵)) | LH_N  => i²}: 1702
//│ [LH_C _lh_intersperse_LH_C_0⁰ prependToAll_lh_₁(_lh_intersperse_arg1⁰, _lh_intersperse_LH_C_1⁰)]: 1068 --->
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => f³(h¹⁵, foldr_lh_₁(f³, i², t¹⁵)) | LH_N  => i²}: 1702
//│ [LH_N]: 1279 --->
//│ 	case _lh_merge_lists_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_merge_lists_LH_C_0⁰ _lh_merge_lists_LH_C_1⁰ => merge⁰(_lh_merge_lists_LH_C_0⁰, merge_lists⁰(_lh_merge_lists_LH_C_1⁰)) | _  => error⁰}: 1275
//│ [LH_N]: 1282 --->
//│ 	case _lh_merge_lists_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_merge_lists_LH_C_0⁰ _lh_merge_lists_LH_C_1⁰ => merge⁰(_lh_merge_lists_LH_C_0⁰, merge_lists⁰(_lh_merge_lists_LH_C_1⁰)) | _  => error⁰}: 1275
//│ [LH_C _lh_runsplit_arg1⁰ [LH_N]]: 1283 --->
//│ 	case _lh_merge_lists_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_merge_lists_LH_C_0⁰ _lh_merge_lists_LH_C_1⁰ => merge⁰(_lh_merge_lists_LH_C_0⁰, merge_lists⁰(_lh_merge_lists_LH_C_1⁰)) | _  => error⁰}: 1275
//│ [LH_C [LH_C _lh_runsplit_LH_C_0¹ _lh_runsplit_LH_C_1¹] runsplit⁰([LH_C _lh_runsplit_LH_C_0² [LH_N]], _lh_runsplit_LH_C_1²)]: 1335 --->
//│ 	case _lh_merge_lists_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_merge_lists_LH_C_0⁰ _lh_merge_lists_LH_C_1⁰ => merge⁰(_lh_merge_lists_LH_C_0⁰, merge_lists⁰(_lh_merge_lists_LH_C_1⁰)) | _  => error⁰}: 1275
//│ [LH_C [LH_C _lh_runsplit_LH_C_0¹ _lh_matchIdent¹¹] runsplit⁰([LH_C _lh_runsplit_LH_C_0² [LH_N]], _lh_runsplit_LH_C_1²)]: 1362 --->
//│ 	case _lh_merge_lists_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_merge_lists_LH_C_0⁰ _lh_merge_lists_LH_C_1⁰ => merge⁰(_lh_merge_lists_LH_C_0⁰, merge_lists⁰(_lh_merge_lists_LH_C_1⁰)) | _  => error⁰}: 1275
//│ [LH_C [LH_C _lh_runsplit_LH_C_0³ _lh_runsplit_LH_C_1³] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁴ [LH_N]], _lh_runsplit_LH_C_1⁴)]: 1413 --->
//│ 	case _lh_merge_lists_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_merge_lists_LH_C_0⁰ _lh_merge_lists_LH_C_1⁰ => merge⁰(_lh_merge_lists_LH_C_0⁰, merge_lists⁰(_lh_merge_lists_LH_C_1⁰)) | _  => error⁰}: 1275
//│ [LH_C [LH_C _lh_runsplit_LH_C_0³ _lh_matchIdent¹²] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁴ [LH_N]], _lh_runsplit_LH_C_1⁴)]: 1440 --->
//│ 	case _lh_merge_lists_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_merge_lists_LH_C_0⁰ _lh_merge_lists_LH_C_1⁰ => merge⁰(_lh_merge_lists_LH_C_0⁰, merge_lists⁰(_lh_merge_lists_LH_C_1⁰)) | _  => error⁰}: 1275
//│ [LH_N]: 1453 --->
//│ 	case _lh_merge_lists_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_merge_lists_LH_C_0⁰ _lh_merge_lists_LH_C_1⁰ => merge⁰(_lh_merge_lists_LH_C_0⁰, merge_lists⁰(_lh_merge_lists_LH_C_1⁰)) | _  => error⁰}: 1275
//│ [LH_C _lh_runsplit_arg1⁰ [LH_N]]: 1454 --->
//│ 	case _lh_merge_lists_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_merge_lists_LH_C_0⁰ _lh_merge_lists_LH_C_1⁰ => merge⁰(_lh_merge_lists_LH_C_0⁰, merge_lists⁰(_lh_merge_lists_LH_C_1⁰)) | _  => error⁰}: 1275
//│ [LH_C [LH_C _lh_runsplit_LH_C_0⁶ _lh_runsplit_LH_C_1⁶] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁷ [LH_N]], _lh_runsplit_LH_C_1⁷)]: 1506 --->
//│ 	case _lh_merge_lists_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_merge_lists_LH_C_0⁰ _lh_merge_lists_LH_C_1⁰ => merge⁰(_lh_merge_lists_LH_C_0⁰, merge_lists⁰(_lh_merge_lists_LH_C_1⁰)) | _  => error⁰}: 1275
//│ [LH_C [LH_C _lh_runsplit_LH_C_0⁶ _lh_matchIdent¹³] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁷ [LH_N]], _lh_runsplit_LH_C_1⁷)]: 1533 --->
//│ 	case _lh_merge_lists_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_merge_lists_LH_C_0⁰ _lh_merge_lists_LH_C_1⁰ => merge⁰(_lh_merge_lists_LH_C_0⁰, merge_lists⁰(_lh_merge_lists_LH_C_1⁰)) | _  => error⁰}: 1275
//│ [LH_C [LH_C _lh_runsplit_LH_C_0⁸ _lh_runsplit_LH_C_1⁸] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁹ [LH_N]], _lh_runsplit_LH_C_1⁹)]: 1584 --->
//│ 	case _lh_merge_lists_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_merge_lists_LH_C_0⁰ _lh_merge_lists_LH_C_1⁰ => merge⁰(_lh_merge_lists_LH_C_0⁰, merge_lists⁰(_lh_merge_lists_LH_C_1⁰)) | _  => error⁰}: 1275
//│ [LH_C [LH_C _lh_runsplit_LH_C_0⁸ _lh_matchIdent¹⁴] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁹ [LH_N]], _lh_runsplit_LH_C_1⁹)]: 1611 --->
//│ 	case _lh_merge_lists_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_merge_lists_LH_C_0⁰ _lh_merge_lists_LH_C_1⁰ => merge⁰(_lh_merge_lists_LH_C_0⁰, merge_lists⁰(_lh_merge_lists_LH_C_1⁰)) | _  => error⁰}: 1275
//│ [LH_N]: 1762 --->
//│ 	case _lh_prependToAll_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_prependToAll_LH_C_0⁰ _lh_prependToAll_LH_C_1⁰ => [LH_C _lh_prependToAll_arg1⁰ [LH_C _lh_prependToAll_LH_C_0⁰ prependToAll_lh_₁(_lh_prependToAll_arg1⁰, _lh_prependToAll_LH_C_1⁰)]] | _  => error⁰}: 273
//│ [LH_C treeSort2_lh_₁ [LH_N]]: 1763 --->
//│ 	case _lh_prependToAll_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_prependToAll_LH_C_0⁰ _lh_prependToAll_LH_C_1⁰ => [LH_C _lh_prependToAll_arg1⁰ [LH_C _lh_prependToAll_LH_C_0⁰ prependToAll_lh_₁(_lh_prependToAll_arg1⁰, _lh_prependToAll_LH_C_1⁰)]] | _  => error⁰}: 273
//│ [LH_C treeSort_lh_₁ [LH_C treeSort2_lh_₁ [LH_N]]]: 1764 --->
//│ 	case _lh_prependToAll_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_prependToAll_LH_C_0⁰ _lh_prependToAll_LH_C_1⁰ => [LH_C _lh_prependToAll_arg1⁰ [LH_C _lh_prependToAll_LH_C_0⁰ prependToAll_lh_₁(_lh_prependToAll_arg1⁰, _lh_prependToAll_LH_C_1⁰)]] | _  => error⁰}: 273
//│ [LH_C quickerSort_lh_₁ [LH_C treeSort_lh_₁ [LH_C treeSort2_lh_₁ [LH_N]]]]: 1765 --->
//│ 	case _lh_prependToAll_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_prependToAll_LH_C_0⁰ _lh_prependToAll_LH_C_1⁰ => [LH_C _lh_prependToAll_arg1⁰ [LH_C _lh_prependToAll_LH_C_0⁰ prependToAll_lh_₁(_lh_prependToAll_arg1⁰, _lh_prependToAll_LH_C_1⁰)]] | _  => error⁰}: 273
//│ [LH_C quickSort2_lh_₁ [LH_C quickerSort_lh_₁ [LH_C treeSort_lh_₁ [LH_C treeSort2_lh_₁ [LH_N]]]]]: 1766 --->
//│ 	case _lh_prependToAll_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_prependToAll_LH_C_0⁰ _lh_prependToAll_LH_C_1⁰ => [LH_C _lh_prependToAll_arg1⁰ [LH_C _lh_prependToAll_LH_C_0⁰ prependToAll_lh_₁(_lh_prependToAll_arg1⁰, _lh_prependToAll_LH_C_1⁰)]] | _  => error⁰}: 273
//│ [LH_C quickSort_lh_₁ [LH_C quickSort2_lh_₁ [LH_C quickerSort_lh_₁ [LH_C treeSort_lh_₁ [LH_C treeSort2_lh_₁ [LH_N]]]]]]: 1767 --->
//│ 	case _lh_prependToAll_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_prependToAll_LH_C_0⁰ _lh_prependToAll_LH_C_1⁰ => [LH_C _lh_prependToAll_arg1⁰ [LH_C _lh_prependToAll_LH_C_0⁰ prependToAll_lh_₁(_lh_prependToAll_arg1⁰, _lh_prependToAll_LH_C_1⁰)]] | _  => error⁰}: 273
//│ [LH_C mergeSort_lh_₁ [LH_C quickSort_lh_₁ [LH_C quickSort2_lh_₁ [LH_C quickerSort_lh_₁ [LH_C treeSort_lh_₁ [LH_C treeSort2_lh_₁ [LH_N]]]]]]]: 1768 --->
//│ 	case _lh_prependToAll_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_prependToAll_LH_C_0⁰ _lh_prependToAll_LH_C_1⁰ => [LH_C _lh_prependToAll_arg1⁰ [LH_C _lh_prependToAll_LH_C_0⁰ prependToAll_lh_₁(_lh_prependToAll_arg1⁰, _lh_prependToAll_LH_C_1⁰)]] | _  => error⁰}: 273
//│ [LH_C insertSort_lh_₁ [LH_C mergeSort_lh_₁ [LH_C quickSort_lh_₁ [LH_C quickSort2_lh_₁ [LH_C quickerSort_lh_₁ [LH_C treeSort_lh_₁ [LH_C treeSort2_lh_₁ [LH_N]]]]]]]]: 1769 --->
//│ 	case _lh_prependToAll_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_prependToAll_LH_C_0⁰ _lh_prependToAll_LH_C_1⁰ => [LH_C _lh_prependToAll_arg1⁰ [LH_C _lh_prependToAll_LH_C_0⁰ prependToAll_lh_₁(_lh_prependToAll_arg1⁰, _lh_prependToAll_LH_C_1⁰)]] | _  => error⁰}: 273
//│ [LH_C heapSort_lh_₁ [LH_C insertSort_lh_₁ [LH_C mergeSort_lh_₁ [LH_C quickSort_lh_₁ [LH_C quickSort2_lh_₁ [LH_C quickerSort_lh_₁ [LH_C treeSort_lh_₁ [LH_C treeSort2_lh_₁ [LH_N]]]]]]]]]: 1770 --->
//│ 	case _lh_intersperse_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_intersperse_LH_C_0⁰ _lh_intersperse_LH_C_1⁰ => [LH_C _lh_intersperse_LH_C_0⁰ prependToAll_lh_₁(_lh_intersperse_arg1⁰, _lh_intersperse_LH_C_1⁰)] | _  => error⁰}: 1070
//│ ------------------
//│ case _lh_prependToAll_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_prependToAll_LH_C_0⁰ _lh_prependToAll_LH_C_1⁰ => [LH_C _lh_prependToAll_arg1⁰ [LH_C _lh_prependToAll_LH_C_0⁰ prependToAll_lh_₁(_lh_prependToAll_arg1⁰, _lh_prependToAll_LH_C_1⁰)]] | _  => error⁰}: 273 --->
//│ 	[LH_N]: 1762
//│ 	[LH_C treeSort2_lh_₁ [LH_N]]: 1763
//│ 	[LH_C treeSort_lh_₁ [LH_C treeSort2_lh_₁ [LH_N]]]: 1764
//│ 	[LH_C quickerSort_lh_₁ [LH_C treeSort_lh_₁ [LH_C treeSort2_lh_₁ [LH_N]]]]: 1765
//│ 	[LH_C quickSort2_lh_₁ [LH_C quickerSort_lh_₁ [LH_C treeSort_lh_₁ [LH_C treeSort2_lh_₁ [LH_N]]]]]: 1766
//│ 	[LH_C quickSort_lh_₁ [LH_C quickSort2_lh_₁ [LH_C quickerSort_lh_₁ [LH_C treeSort_lh_₁ [LH_C treeSort2_lh_₁ [LH_N]]]]]]: 1767
//│ 	[LH_C mergeSort_lh_₁ [LH_C quickSort_lh_₁ [LH_C quickSort2_lh_₁ [LH_C quickerSort_lh_₁ [LH_C treeSort_lh_₁ [LH_C treeSort2_lh_₁ [LH_N]]]]]]]: 1768
//│ 	[LH_C insertSort_lh_₁ [LH_C mergeSort_lh_₁ [LH_C quickSort_lh_₁ [LH_C quickSort2_lh_₁ [LH_C quickerSort_lh_₁ [LH_C treeSort_lh_₁ [LH_C treeSort2_lh_₁ [LH_N]]]]]]]]: 1769
//│ case lss⁰ of {LH_C h¹² t¹² => mappend_lh_₁₀(h¹², concat_lh_₁(t¹²)) | LH_N  => [LH_N]}: 576 --->
//│ 	[LH_C f²(h¹³) map_lh_₁(f², t¹³)]: 587
//│ 	[LH_N]: 588
//│ case _lh_intersperse_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_intersperse_LH_C_0⁰ _lh_intersperse_LH_C_1⁰ => [LH_C _lh_intersperse_LH_C_0⁰ prependToAll_lh_₁(_lh_intersperse_arg1⁰, _lh_intersperse_LH_C_1⁰)] | _  => error⁰}: 1070 --->
//│ 	[LH_C heapSort_lh_₁ [LH_C insertSort_lh_₁ [LH_C mergeSort_lh_₁ [LH_C quickSort_lh_₁ [LH_C quickSort2_lh_₁ [LH_C quickerSort_lh_₁ [LH_C treeSort_lh_₁ [LH_C treeSort2_lh_₁ [LH_N]]]]]]]]]: 1770
//│ case _lh_matchIdent¹⁰ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1257 --->
//│ 	[LH_N]: 395
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]: 403
//│ case _lh_merge_lists_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_merge_lists_LH_C_0⁰ _lh_merge_lists_LH_C_1⁰ => merge⁰(_lh_merge_lists_LH_C_0⁰, merge_lists⁰(_lh_merge_lists_LH_C_1⁰)) | _  => error⁰}: 1275 --->
//│ 	[LH_N]: 1279
//│ 	[LH_N]: 1282
//│ 	[LH_C _lh_runsplit_arg1⁰ [LH_N]]: 1283
//│ 	[LH_C [LH_C _lh_runsplit_LH_C_0¹ _lh_runsplit_LH_C_1¹] runsplit⁰([LH_C _lh_runsplit_LH_C_0² [LH_N]], _lh_runsplit_LH_C_1²)]: 1335
//│ 	[LH_C [LH_C _lh_runsplit_LH_C_0¹ _lh_matchIdent¹¹] runsplit⁰([LH_C _lh_runsplit_LH_C_0² [LH_N]], _lh_runsplit_LH_C_1²)]: 1362
//│ 	[LH_C [LH_C _lh_runsplit_LH_C_0³ _lh_runsplit_LH_C_1³] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁴ [LH_N]], _lh_runsplit_LH_C_1⁴)]: 1413
//│ 	[LH_C [LH_C _lh_runsplit_LH_C_0³ _lh_matchIdent¹²] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁴ [LH_N]], _lh_runsplit_LH_C_1⁴)]: 1440
//│ 	[LH_N]: 1453
//│ 	[LH_C _lh_runsplit_arg1⁰ [LH_N]]: 1454
//│ 	[LH_C [LH_C _lh_runsplit_LH_C_0⁶ _lh_runsplit_LH_C_1⁶] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁷ [LH_N]], _lh_runsplit_LH_C_1⁷)]: 1506
//│ 	[LH_C [LH_C _lh_runsplit_LH_C_0⁶ _lh_matchIdent¹³] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁷ [LH_N]], _lh_runsplit_LH_C_1⁷)]: 1533
//│ 	[LH_C [LH_C _lh_runsplit_LH_C_0⁸ _lh_runsplit_LH_C_1⁸] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁹ [LH_N]], _lh_runsplit_LH_C_1⁹)]: 1584
//│ 	[LH_C [LH_C _lh_runsplit_LH_C_0⁸ _lh_matchIdent¹⁴] runsplit⁰([LH_C _lh_runsplit_LH_C_0⁹ [LH_N]], _lh_runsplit_LH_C_1⁹)]: 1611
//│ case ls⁹ of {LH_C h¹⁵ t¹⁵ => f³(h¹⁵, foldr_lh_₁(f³, i², t¹⁵)) | LH_N  => i²}: 1702 --->
//│ 	[LH_N]: 262
//│ 	[LH_C _lh_prependToAll_LH_C_0⁰ prependToAll_lh_₁(_lh_prependToAll_arg1⁰, _lh_prependToAll_LH_C_1⁰)]: 270
//│ 	[LH_C _lh_prependToAll_arg1⁰ [LH_C _lh_prependToAll_LH_C_0⁰ prependToAll_lh_₁(_lh_prependToAll_arg1⁰, _lh_prependToAll_LH_C_1⁰)]]: 271
//│ 	[LH_N]: 1061
//│ 	[LH_C _lh_intersperse_LH_C_0⁰ prependToAll_lh_₁(_lh_intersperse_arg1⁰, _lh_intersperse_LH_C_1⁰)]: 1068
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testSorting_nofib_lh_₁(primId⁰(0))
//│ def break_lh_₁(_lh_break_arg1⁰, _lh_break_arg2⁰) = case _lh_break_arg2⁰ of {
//│ 	LH_N  => [LH_P2 [LH_N] (fun _lh_dummy² -> [LH_N])]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1⁰(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] 
//│ 		let _lh_lines_LH_C_1⁰ = _lh_break_LH_C_1⁰
//│ 		in let _lh_lines_LH_C_0⁰ = _lh_break_LH_C_0⁰
//│ 		in (fun _lh_dummy³ -> lines_lh_₁(_lh_lines_LH_C_1⁰))] else 
//│ 		let _lh_matchIdent⁷ = break_lh_₁(_lh_break_arg1⁰, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent⁷ of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def compareList_lh_₁(_lh_compareList_arg1⁰, _lh_compareList_arg2⁰) = case _lh_compareList_arg1⁰ of {
//│ 	LH_N  => case _lh_compareList_arg2⁰ of {
//│ 		LH_N  => [EQ]
//│ 		| LH_C _lh_compareList_LH_C_0⁰ _lh_compareList_LH_C_1⁰ => [LT]
//│ 		| _  => error⁰}
//│ 	| LH_C _lh_compareList_LH_C_0¹ _lh_compareList_LH_C_1¹ => case _lh_compareList_arg2⁰ of {
//│ 		LH_N  => [GT]
//│ 		| LH_C _lh_compareList_LH_C_0² _lh_compareList_LH_C_1² => if (int_of_char⁰(_lh_compareList_LH_C_0¹) == int_of_char⁰(_lh_compareList_LH_C_0²)) then compareList_lh_₁(_lh_compareList_LH_C_1¹, _lh_compareList_LH_C_1²) else if (int_of_char⁰(_lh_compareList_LH_C_0¹) < int_of_char⁰(_lh_compareList_LH_C_0²)) then [LT] else [GT]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def concat_lh_₁(lss⁰) = lss⁰([lh_Unit])
//│ def eqList_lh_₁(_lh_eqList_arg1⁰, _lh_eqList_arg2⁰) = polyEq⁰(compareList_lh_₁(_lh_eqList_arg1⁰, _lh_eqList_arg2⁰), [EQ])
//│ def foldl_lh_₁(f⁰, i⁰, ls²) = case ls² of {
//│ 	LH_C h² t² => foldl_lh_₁(f⁰, f⁰(i⁰, h²), t²)
//│ 	| LH_N  => i⁰}
//│ def foldr_lh_₁(f¹, i¹, ls⁴) = ls⁴(f¹, i¹)
//│ def foldr_lh_₂(f², i², ls⁵) = case ls⁵ of {
//│ 	LH_C h⁷ t⁷ => f²(h⁷, foldr_lh_₂(f², i², t⁷))
//│ 	| LH_N  => i²}
//│ def foldr_lh_₃(f³, i³, ls⁶) = case ls⁶ of {
//│ 	LH_C h¹⁰ t¹⁰ => f³(h¹⁰, foldr_lh_₃(f³, i³, t¹⁰))
//│ 	| LH_N  => i³}
//│ def geList_lh_₁(_lh_geList_arg1⁰, _lh_geList_arg2⁰) = not⁰(ltList_lh_₂(_lh_geList_arg1⁰, _lh_geList_arg2⁰))
//│ def gtList_lh_₁(_lh_gtList_arg1⁰, _lh_gtList_arg2⁰) = 
//│ 	let _lh_matchIdent¹ = compareList_lh_₁(_lh_gtList_arg1⁰, _lh_gtList_arg2⁰)
//│ 	in case _lh_matchIdent¹ of {
//│ 		GT  => [True]
//│ 		| _  => [False]}
//│ def gtList_lh_₂(_lh_gtList_arg1⁴, _lh_gtList_arg2⁴) = 
//│ 	let _lh_matchIdent¹⁴ = compareList_lh_₁(_lh_gtList_arg1⁴, _lh_gtList_arg2⁴)
//│ 	in case _lh_matchIdent¹⁴ of {
//│ 		GT  => [True]
//│ 		| _  => [False]}
//│ def gtList_lh_₃(_lh_gtList_arg1², _lh_gtList_arg2²) = 
//│ 	let _lh_matchIdent⁸ = compareList_lh_₁(_lh_gtList_arg1², _lh_gtList_arg2²)
//│ 	in case _lh_matchIdent⁸ of {
//│ 		GT  => [True]
//│ 		| _  => [False]}
//│ def gtList_lh_₄(_lh_gtList_arg1¹, _lh_gtList_arg2¹) = 
//│ 	let _lh_matchIdent² = compareList_lh_₁(_lh_gtList_arg1¹, _lh_gtList_arg2¹)
//│ 	in case _lh_matchIdent² of {
//│ 		GT  => [True]
//│ 		| _  => [False]}
//│ def gtList_lh_₅(_lh_gtList_arg1³, _lh_gtList_arg2³) = 
//│ 	let _lh_matchIdent⁹ = compareList_lh_₁(_lh_gtList_arg1³, _lh_gtList_arg2³)
//│ 	in case _lh_matchIdent⁹ of {
//│ 		GT  => [True]
//│ 		| _  => [False]}
//│ def hash_lh_₁(_lh_hash_arg1⁰) = foldl_lh_₁((fun acc⁰ -> (fun c⁰ -> (int_of_char⁰(c⁰) + (acc⁰ * 31)))), 0, _lh_hash_arg1⁰)
//│ def heapSort_lh_₁(_lh_heapSort_arg1⁰) = 
//│ 	let div2⁰ = (fun _lh_div2_arg1⁰ -> div⁰(_lh_div2_arg1⁰, 2))
//│ 	and clear⁰ = (fun _lh_clear_arg1⁰ -> case _lh_clear_arg1⁰ of {
//│ 			Tip  => [LH_N]
//│ 			| Branch _lh_clear_Branch_0⁰ _lh_clear_Branch_1⁰ _lh_clear_Branch_2⁰ => [LH_C _lh_clear_Branch_0⁰ clear⁰(mix⁰(_lh_clear_Branch_1⁰, _lh_clear_Branch_2⁰))]
//│ 			| _  => error⁰})
//│ 	and mix⁰ = (fun _lh_mix_arg1⁰ -> (fun _lh_mix_arg2⁰ -> case _lh_mix_arg1⁰ of {
//│ 			Tip  => _lh_mix_arg2⁰
//│ 			| _  => case _lh_mix_arg2⁰ of {
//│ 				Tip  => _lh_mix_arg1⁰
//│ 				| _  => case _lh_mix_arg1⁰ of {
//│ 					Branch _lh_mix_Branch_0⁰ _lh_mix_Branch_1⁰ _lh_mix_Branch_2⁰ => case _lh_mix_arg2⁰ of {
//│ 						Branch _lh_mix_Branch_0¹ _lh_mix_Branch_1¹ _lh_mix_Branch_2¹ => if leList_lh_₁₁(_lh_mix_Branch_0⁰, _lh_mix_Branch_0¹) then [Branch _lh_mix_Branch_0⁰ mix⁰(_lh_mix_Branch_1⁰, _lh_mix_Branch_2⁰) [Branch _lh_mix_Branch_0¹ _lh_mix_Branch_1¹ _lh_mix_Branch_2¹]] else [Branch _lh_mix_Branch_0¹ [Branch _lh_mix_Branch_0⁰ _lh_mix_Branch_1⁰ _lh_mix_Branch_2⁰] mix⁰(_lh_mix_Branch_1¹, _lh_mix_Branch_2¹)]
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}}}))
//│ 	and heap⁰ = (fun _lh_heap_arg1⁰ -> (fun _lh_heap_arg2⁰ -> case _lh_heap_arg2⁰ of {
//│ 			LH_N  => [Tip]
//│ 			| LH_C _lh_heap_LH_C_0⁰ _lh_heap_LH_C_1⁰ => to_heap⁰(_lh_heap_arg1⁰, _lh_heap_LH_C_0⁰, heap⁰((_lh_heap_arg1⁰ + 1), _lh_heap_LH_C_1⁰))
//│ 			| _  => error⁰}))
//│ 	and to_heap⁰ = (fun _lh_to_heap_arg1⁰ -> (fun _lh_to_heap_arg2⁰ -> (fun _lh_to_heap_arg3⁰ -> case _lh_to_heap_arg3⁰ of {
//│ 			Tip  => [Branch _lh_to_heap_arg2⁰ [Tip] [Tip]]
//│ 			| Branch _lh_to_heap_Branch_0⁰ _lh_to_heap_Branch_1⁰ _lh_to_heap_Branch_2⁰ => if (leList_lh_₁₃(_lh_to_heap_arg2⁰, _lh_to_heap_Branch_0⁰) && odd_lh_₁(_lh_to_heap_arg1⁰)) then [Branch _lh_to_heap_arg2⁰ to_heap⁰(div2⁰(_lh_to_heap_arg1⁰), _lh_to_heap_Branch_0⁰, _lh_to_heap_Branch_1⁰) _lh_to_heap_Branch_2⁰] else if leList_lh_₁₂(_lh_to_heap_arg2⁰, _lh_to_heap_Branch_0⁰) then [Branch _lh_to_heap_arg2⁰ _lh_to_heap_Branch_1⁰ to_heap⁰(div2⁰(_lh_to_heap_arg1⁰), _lh_to_heap_Branch_0⁰, _lh_to_heap_Branch_2⁰)] else if odd_lh_₂(_lh_to_heap_arg1⁰) then [Branch _lh_to_heap_Branch_0⁰ to_heap⁰(div2⁰(_lh_to_heap_arg1⁰), _lh_to_heap_arg2⁰, _lh_to_heap_Branch_1⁰) _lh_to_heap_Branch_2⁰] else [Branch _lh_to_heap_Branch_0⁰ _lh_to_heap_Branch_1⁰ to_heap⁰(div2⁰(_lh_to_heap_arg1⁰), _lh_to_heap_arg2⁰, _lh_to_heap_Branch_2⁰)]
//│ 			| _  => error⁰}))) 
//│ 	in clear⁰(heap⁰(0, _lh_heapSort_arg1⁰))
//│ def insertSort_lh_₁(_lh_insertSort_arg1⁰) = case _lh_insertSort_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_insertSort_LH_C_0⁰ _lh_insertSort_LH_C_1⁰ => 
//│ 		let trins⁰ = (fun _lh_trins_arg1⁰ -> (fun _lh_trins_arg2⁰ -> (fun _lh_trins_arg3⁰ -> case _lh_trins_arg2⁰ of {
//│ 			LH_N  => case _lh_trins_arg3⁰ of {
//│ 				LH_C _lh_trins_LH_C_0⁰ _lh_trins_LH_C_1⁰ => trins⁰([LH_N], mappend_lh_₉(reverse_lh_₅(_lh_trins_arg1⁰), [LH_C _lh_trins_LH_C_0⁰ [LH_N]]), _lh_trins_LH_C_1⁰)
//│ 				| _  => case _lh_trins_arg3⁰ of {
//│ 					LH_N  => mappend_lh_₁₀(reverse_lh_₅(_lh_trins_arg1⁰), _lh_trins_arg2⁰)
//│ 					| _  => case _lh_trins_arg2⁰ of {
//│ 						LH_C _lh_trins_LH_C_0¹ _lh_trins_LH_C_1¹ => case _lh_trins_arg3⁰ of {
//│ 							LH_C _lh_trins_LH_C_0² _lh_trins_LH_C_1² => if ltList_lh_₂(_lh_trins_LH_C_0¹, _lh_trins_LH_C_0²) then trins⁰([LH_C _lh_trins_LH_C_0¹ _lh_trins_arg1⁰], _lh_trins_LH_C_1¹, [LH_C _lh_trins_LH_C_0² _lh_trins_LH_C_1²]) else trins⁰([LH_N], mappend_lh_₁₀(reverse_lh_₂(_lh_trins_arg1⁰), [LH_C _lh_trins_LH_C_0² [LH_C _lh_trins_LH_C_0¹ _lh_trins_LH_C_1¹]]), _lh_trins_LH_C_1²)
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}}}
//│ 			| _  => case _lh_trins_arg3⁰ of {
//│ 				LH_N  => mappend_lh_₇(reverse_lh_₃(_lh_trins_arg1⁰), _lh_trins_arg2⁰)
//│ 				| _  => case _lh_trins_arg2⁰ of {
//│ 					LH_C _lh_trins_LH_C_0³ _lh_trins_LH_C_1³ => case _lh_trins_arg3⁰ of {
//│ 						LH_C _lh_trins_LH_C_0⁴ _lh_trins_LH_C_1⁴ => if ltList_lh_₂(_lh_trins_LH_C_0³, _lh_trins_LH_C_0⁴) then trins⁰([LH_C _lh_trins_LH_C_0³ _lh_trins_arg1⁰], _lh_trins_LH_C_1³, [LH_C _lh_trins_LH_C_0⁴ _lh_trins_LH_C_1⁴]) else trins⁰([LH_N], mappend_lh_₈(reverse_lh_₄(_lh_trins_arg1⁰), [LH_C _lh_trins_LH_C_0⁴ [LH_C _lh_trins_LH_C_0³ _lh_trins_LH_C_1³]]), _lh_trins_LH_C_1⁴)
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}}})))
//│ 		in trins⁰([LH_N], [LH_C _lh_insertSort_LH_C_0⁰ [LH_N]], _lh_insertSort_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def intersperse_lh_₁(_lh_intersperse_arg1⁰, _lh_intersperse_arg2⁰) = _lh_intersperse_arg2⁰(_lh_intersperse_arg1⁰)
//│ def leList_lh_₁(_lh_leList_arg1⁷, _lh_leList_arg2⁷) = not⁰(gtList_lh_₅(_lh_leList_arg1⁷, _lh_leList_arg2⁷))
//│ def leList_lh_₁₀(_lh_leList_arg1⁵, _lh_leList_arg2⁵) = not⁰(gtList_lh_₅(_lh_leList_arg1⁵, _lh_leList_arg2⁵))
//│ def leList_lh_₁₁(_lh_leList_arg1⁶, _lh_leList_arg2⁶) = not⁰(gtList_lh_₅(_lh_leList_arg1⁶, _lh_leList_arg2⁶))
//│ def leList_lh_₁₂(_lh_leList_arg1³, _lh_leList_arg2³) = not⁰(gtList_lh_₅(_lh_leList_arg1³, _lh_leList_arg2³))
//│ def leList_lh_₁₃(_lh_leList_arg1⁸, _lh_leList_arg2⁸) = not⁰(gtList_lh_₅(_lh_leList_arg1⁸, _lh_leList_arg2⁸))
//│ def leList_lh_₁₄(_lh_leList_arg1⁰, _lh_leList_arg2⁰) = not⁰(gtList_lh_₅(_lh_leList_arg1⁰, _lh_leList_arg2⁰))
//│ def leList_lh_₁₅(_lh_leList_arg1⁴, _lh_leList_arg2⁴) = not⁰(gtList_lh_₅(_lh_leList_arg1⁴, _lh_leList_arg2⁴))
//│ def leList_lh_₁₆(_lh_leList_arg1¹², _lh_leList_arg2¹²) = not⁰(gtList_lh_₅(_lh_leList_arg1¹², _lh_leList_arg2¹²))
//│ def leList_lh_₂(_lh_leList_arg1⁹, _lh_leList_arg2⁹) = not⁰(gtList_lh_₅(_lh_leList_arg1⁹, _lh_leList_arg2⁹))
//│ def leList_lh_₃(_lh_leList_arg1¹⁵, _lh_leList_arg2¹⁵) = not⁰(gtList_lh_₅(_lh_leList_arg1¹⁵, _lh_leList_arg2¹⁵))
//│ def leList_lh_₄(_lh_leList_arg1¹⁴, _lh_leList_arg2¹⁴) = not⁰(gtList_lh_₅(_lh_leList_arg1¹⁴, _lh_leList_arg2¹⁴))
//│ def leList_lh_₅(_lh_leList_arg1¹¹, _lh_leList_arg2¹¹) = not⁰(gtList_lh_₅(_lh_leList_arg1¹¹, _lh_leList_arg2¹¹))
//│ def leList_lh_₆(_lh_leList_arg1¹⁰, _lh_leList_arg2¹⁰) = not⁰(gtList_lh_₅(_lh_leList_arg1¹⁰, _lh_leList_arg2¹⁰))
//│ def leList_lh_₇(_lh_leList_arg1¹, _lh_leList_arg2¹) = not⁰(gtList_lh_₅(_lh_leList_arg1¹, _lh_leList_arg2¹))
//│ def leList_lh_₈(_lh_leList_arg1², _lh_leList_arg2²) = not⁰(gtList_lh_₅(_lh_leList_arg1², _lh_leList_arg2²))
//│ def leList_lh_₉(_lh_leList_arg1¹³, _lh_leList_arg2¹³) = not⁰(gtList_lh_₅(_lh_leList_arg1¹³, _lh_leList_arg2¹³))
//│ def lines_lh_₁(_lh_lines_arg1⁰) = case _lh_lines_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| _  => 
//│ 		let _lh_matchIdent³ = break_lh_₁((fun x⁰ -> polyEq⁰(x⁰, '|')), _lh_lines_arg1⁰)
//│ 		in case _lh_matchIdent³ of {
//│ 			LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ 
//│ 				let _lh_matchIdent⁴ = _lh_lines_LH_P2_1⁰
//│ 				in _lh_matchIdent⁴([lh_Unit])]
//│ 			| _  => error⁰}}
//│ def ltList_lh_₁(_lh_ltList_arg1⁰, _lh_ltList_arg2⁰) = 
//│ 	let _lh_matchIdent⁰ = compareList_lh_₁(_lh_ltList_arg1⁰, _lh_ltList_arg2⁰)
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LT  => [True]
//│ 		| _  => [False]}
//│ def ltList_lh_₂(_lh_ltList_arg1¹, _lh_ltList_arg2¹) = 
//│ 	let _lh_matchIdent⁶ = compareList_lh_₁(_lh_ltList_arg1¹, _lh_ltList_arg2¹)
//│ 	in case _lh_matchIdent⁶ of {
//│ 		LT  => [True]
//│ 		| _  => [False]}
//│ def mangle_lh_₁(_lh_mangle_arg1⁰) = 
//│ 	let sort⁰ = (fun _lh_sort_arg1⁰ -> foldr_lh_₁((fun f⁶ -> (fun g⁰ -> (fun _lh_funcomp_x² -> f⁶(g⁰(_lh_funcomp_x²))))), (fun x² -> x²), intersperse_lh_₁(reverse_lh_₁, 
//│ 		let _lh_intersperse_LH_C_1⁰ = 	
//│ 			let _lh_prependToAll_LH_C_1⁰ = 	
//│ 				let _lh_prependToAll_LH_C_1¹ = 	
//│ 					let _lh_prependToAll_LH_C_1² = 	
//│ 						let _lh_prependToAll_LH_C_1³ = 	
//│ 							let _lh_prependToAll_LH_C_1⁴ = 	
//│ 								let _lh_prependToAll_LH_C_1⁵ = 	
//│ 									let _lh_prependToAll_LH_C_1⁶ = (fun _lh_prependToAll_arg1¹ -> (fun f⁷ -> (fun i⁴ -> i⁴)))
//│ 									in let _lh_prependToAll_LH_C_0⁰ = treeSort2_lh_₁
//│ 									in (fun _lh_prependToAll_arg1² -> 
//│ 										let t¹⁶ = 	
//│ 											let t¹⁷ = prependToAll_lh_₁(_lh_prependToAll_arg1², _lh_prependToAll_LH_C_1⁶)
//│ 											in let h¹⁶ = _lh_prependToAll_LH_C_0⁰
//│ 											in (fun f⁸ -> (fun i⁵ -> f⁸(h¹⁶, foldr_lh_₁(f⁸, i⁵, t¹⁷))))
//│ 										in let h¹⁷ = _lh_prependToAll_arg1²
//│ 										in (fun f⁹ -> (fun i⁶ -> f⁹(h¹⁷, foldr_lh_₁(f⁹, i⁶, t¹⁶)))))
//│ 								in let _lh_prependToAll_LH_C_0¹ = treeSort_lh_₁
//│ 								in (fun _lh_prependToAll_arg1³ -> 
//│ 									let t¹⁸ = 	
//│ 										let t¹⁹ = prependToAll_lh_₁(_lh_prependToAll_arg1³, _lh_prependToAll_LH_C_1⁵)
//│ 										in let h¹⁸ = _lh_prependToAll_LH_C_0¹
//│ 										in (fun f¹⁰ -> (fun i⁷ -> f¹⁰(h¹⁸, foldr_lh_₁(f¹⁰, i⁷, t¹⁹))))
//│ 									in let h¹⁹ = _lh_prependToAll_arg1³
//│ 									in (fun f¹¹ -> (fun i⁸ -> f¹¹(h¹⁹, foldr_lh_₁(f¹¹, i⁸, t¹⁸)))))
//│ 							in let _lh_prependToAll_LH_C_0² = quickerSort_lh_₁
//│ 							in (fun _lh_prependToAll_arg1⁴ -> 
//│ 								let t²⁰ = 	
//│ 									let t²¹ = prependToAll_lh_₁(_lh_prependToAll_arg1⁴, _lh_prependToAll_LH_C_1⁴)
//│ 									in let h²⁰ = _lh_prependToAll_LH_C_0²
//│ 									in (fun f¹² -> (fun i⁹ -> f¹²(h²⁰, foldr_lh_₁(f¹², i⁹, t²¹))))
//│ 								in let h²¹ = _lh_prependToAll_arg1⁴
//│ 								in (fun f¹³ -> (fun i¹⁰ -> f¹³(h²¹, foldr_lh_₁(f¹³, i¹⁰, t²⁰)))))
//│ 						in let _lh_prependToAll_LH_C_0³ = quickSort2_lh_₁
//│ 						in (fun _lh_prependToAll_arg1⁵ -> 
//│ 							let t²² = 	
//│ 								let t²³ = prependToAll_lh_₁(_lh_prependToAll_arg1⁵, _lh_prependToAll_LH_C_1³)
//│ 								in let h²² = _lh_prependToAll_LH_C_0³
//│ 								in (fun f¹⁴ -> (fun i¹¹ -> f¹⁴(h²², foldr_lh_₁(f¹⁴, i¹¹, t²³))))
//│ 							in let h²³ = _lh_prependToAll_arg1⁵
//│ 							in (fun f¹⁵ -> (fun i¹² -> f¹⁵(h²³, foldr_lh_₁(f¹⁵, i¹², t²²)))))
//│ 					in let _lh_prependToAll_LH_C_0⁴ = quickSort_lh_₁
//│ 					in (fun _lh_prependToAll_arg1⁶ -> 
//│ 						let t²⁴ = 	
//│ 							let t²⁵ = prependToAll_lh_₁(_lh_prependToAll_arg1⁶, _lh_prependToAll_LH_C_1²)
//│ 							in let h²⁴ = _lh_prependToAll_LH_C_0⁴
//│ 							in (fun f¹⁶ -> (fun i¹³ -> f¹⁶(h²⁴, foldr_lh_₁(f¹⁶, i¹³, t²⁵))))
//│ 						in let h²⁵ = _lh_prependToAll_arg1⁶
//│ 						in (fun f¹⁷ -> (fun i¹⁴ -> f¹⁷(h²⁵, foldr_lh_₁(f¹⁷, i¹⁴, t²⁴)))))
//│ 				in let _lh_prependToAll_LH_C_0⁵ = mergeSort_lh_₁
//│ 				in (fun _lh_prependToAll_arg1⁷ -> 
//│ 					let t²⁶ = 	
//│ 						let t²⁷ = prependToAll_lh_₁(_lh_prependToAll_arg1⁷, _lh_prependToAll_LH_C_1¹)
//│ 						in let h²⁶ = _lh_prependToAll_LH_C_0⁵
//│ 						in (fun f¹⁸ -> (fun i¹⁵ -> f¹⁸(h²⁶, foldr_lh_₁(f¹⁸, i¹⁵, t²⁷))))
//│ 					in let h²⁷ = _lh_prependToAll_arg1⁷
//│ 					in (fun f¹⁹ -> (fun i¹⁶ -> f¹⁹(h²⁷, foldr_lh_₁(f¹⁹, i¹⁶, t²⁶)))))
//│ 			in let _lh_prependToAll_LH_C_0⁶ = insertSort_lh_₁
//│ 			in (fun _lh_prependToAll_arg1⁸ -> 
//│ 				let t²⁸ = 	
//│ 					let t²⁹ = prependToAll_lh_₁(_lh_prependToAll_arg1⁸, _lh_prependToAll_LH_C_1⁰)
//│ 					in let h²⁸ = _lh_prependToAll_LH_C_0⁶
//│ 					in (fun f²⁰ -> (fun i¹⁷ -> f²⁰(h²⁸, foldr_lh_₁(f²⁰, i¹⁷, t²⁹))))
//│ 				in let h²⁹ = _lh_prependToAll_arg1⁸
//│ 				in (fun f²¹ -> (fun i¹⁸ -> f²¹(h²⁹, foldr_lh_₁(f²¹, i¹⁸, t²⁸)))))
//│ 		in let _lh_intersperse_LH_C_0⁰ = heapSort_lh_₁
//│ 		in (fun _lh_intersperse_arg1¹ -> 
//│ 			let t³⁰ = prependToAll_lh_₁(_lh_intersperse_arg1¹, _lh_intersperse_LH_C_1⁰)
//│ 			in let h³⁰ = _lh_intersperse_LH_C_0⁰
//│ 			in (fun f²² -> (fun i¹⁹ -> f²²(h³⁰, foldr_lh_₁(f²², i¹⁹, t³⁰)))))), _lh_sort_arg1⁰))
//│ 	in (fun _lh_funcomp_x³ -> (fun _lh_funcomp_x⁴ -> unlines_lh_₁(sort⁰(_lh_funcomp_x⁴)))(lines_lh_₁(_lh_funcomp_x³)))(_lh_mangle_arg1⁰)
//│ def map_lh_₁(f⁵, ls⁷, _lh_floatOutId_0⁰) = case ls⁷ of {
//│ 	LH_C h¹³ t¹³ => 
//│ 		let t¹⁴ = map_lh_₁(f⁵, t¹³)
//│ 		in let h¹⁴ = f⁵(h¹³)
//│ 		in mappend_lh_₁₀(h¹⁴, concat_lh_₁(t¹⁴))
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₁(t⁰, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₁₀(xs³, ys³) = case xs³ of {
//│ 	LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₀(t⁵, ys³)]
//│ 	| LH_N  => ys³}
//│ def mappend_lh_₂(xs⁵, ys⁵) = case xs⁵ of {
//│ 	LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₂(t⁸, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mappend_lh_₃(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₃(t¹, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₄(xs⁸, ys⁸) = case xs⁸ of {
//│ 	LH_C h¹² t¹² => [LH_C h¹² mappend_lh_₄(t¹², ys⁸)]
//│ 	| LH_N  => ys⁸}
//│ def mappend_lh_₅(xs⁶, ys⁶) = case xs⁶ of {
//│ 	LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₅(t⁹, ys⁶)]
//│ 	| LH_N  => ys⁶}
//│ def mappend_lh_₆(xs⁷, ys⁷) = case xs⁷ of {
//│ 	LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₆(t¹¹, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₇(xs⁴, ys⁴) = case xs⁴ of {
//│ 	LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₇(t⁶, ys⁴)]
//│ 	| LH_N  => ys⁴}
//│ def mappend_lh_₈(xs², ys²) = case xs² of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh_₈(t³, ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₉(xs⁹, ys⁹) = case xs⁹ of {
//│ 	LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₉(t¹⁵, ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mergeSort_lh_₁(_lh_mergeSort_arg1⁰) = 
//│ 	let merge_lists⁰ = (fun _lh_merge_lists_arg1⁰ -> _lh_merge_lists_arg1⁰(merge_lists⁰, merge⁰))
//│ 	and runsplit⁰ = (fun _lh_runsplit_arg1⁰ -> (fun _lh_runsplit_arg2⁰ -> case _lh_runsplit_arg1⁰ of {
//│ 			LH_N  => case _lh_runsplit_arg2⁰ of {
//│ 				LH_N  => (fun merge_lists¹ -> (fun merge¹ -> [LH_N]))
//│ 				| _  => case _lh_runsplit_arg2⁰ of {
//│ 					LH_N  => 
//│ 						let _lh_merge_lists_LH_C_1⁰ = (fun merge_lists² -> (fun merge² -> [LH_N]))
//│ 						in let _lh_merge_lists_LH_C_0⁰ = _lh_runsplit_arg1⁰
//│ 						in (fun merge_lists³ -> (fun merge³ -> merge³(_lh_merge_lists_LH_C_0⁰, merge_lists³(_lh_merge_lists_LH_C_1⁰))))
//│ 					| _  => case _lh_runsplit_arg1⁰ of {
//│ 						LH_N  => case _lh_runsplit_arg2⁰ of {
//│ 							LH_C _lh_runsplit_LH_C_0⁰ _lh_runsplit_LH_C_1⁰ => runsplit⁰([LH_C _lh_runsplit_LH_C_0⁰ [LH_N]], _lh_runsplit_LH_C_1⁰)
//│ 							| _  => case _lh_runsplit_arg1⁰ of {
//│ 								LH_C _lh_runsplit_LH_C_0¹ _lh_runsplit_LH_C_1¹ => case _lh_runsplit_arg2⁰ of {
//│ 									LH_C _lh_runsplit_LH_C_0² _lh_runsplit_LH_C_1² => 
//│ 										let _lh_matchIdent¹⁰ = _lh_runsplit_LH_C_1¹
//│ 										in case _lh_matchIdent¹⁰ of {
//│ 											LH_N  => if gtList_lh_₄(_lh_runsplit_LH_C_0², _lh_runsplit_LH_C_0¹) then runsplit⁰([LH_C _lh_runsplit_LH_C_0¹ [LH_C _lh_runsplit_LH_C_0² [LH_N]]], _lh_runsplit_LH_C_1²) else if leList_lh_₄(_lh_runsplit_LH_C_0², _lh_runsplit_LH_C_0¹) then runsplit⁰([LH_C _lh_runsplit_LH_C_0² [LH_C _lh_runsplit_LH_C_0¹ _lh_runsplit_LH_C_1¹]], _lh_runsplit_LH_C_1²) else 
//│ 												let _lh_merge_lists_LH_C_1¹ = runsplit⁰([LH_C _lh_runsplit_LH_C_0² [LH_N]], _lh_runsplit_LH_C_1²)
//│ 												in let _lh_merge_lists_LH_C_0¹ = [LH_C _lh_runsplit_LH_C_0¹ _lh_runsplit_LH_C_1¹]
//│ 												in (fun merge_lists⁴ -> (fun merge⁴ -> merge⁴(_lh_merge_lists_LH_C_0¹, merge_lists⁴(_lh_merge_lists_LH_C_1¹))))
//│ 											| _  => if leList_lh_₂(_lh_runsplit_LH_C_0², _lh_runsplit_LH_C_0¹) then runsplit⁰([LH_C _lh_runsplit_LH_C_0² [LH_C _lh_runsplit_LH_C_0¹ _lh_matchIdent¹⁰]], _lh_runsplit_LH_C_1²) else 
//│ 												let _lh_merge_lists_LH_C_1² = runsplit⁰([LH_C _lh_runsplit_LH_C_0² [LH_N]], _lh_runsplit_LH_C_1²)
//│ 												in let _lh_merge_lists_LH_C_0² = [LH_C _lh_runsplit_LH_C_0¹ _lh_matchIdent¹⁰]
//│ 												in (fun merge_lists⁵ -> (fun merge⁵ -> merge⁵(_lh_merge_lists_LH_C_0², merge_lists⁵(_lh_merge_lists_LH_C_1²))))}
//│ 									| _  => error⁰}
//│ 								| _  => error⁰}}
//│ 						| _  => case _lh_runsplit_arg1⁰ of {
//│ 							LH_C _lh_runsplit_LH_C_0³ _lh_runsplit_LH_C_1³ => case _lh_runsplit_arg2⁰ of {
//│ 								LH_C _lh_runsplit_LH_C_0⁴ _lh_runsplit_LH_C_1⁴ => 
//│ 									let _lh_matchIdent¹¹ = _lh_runsplit_LH_C_1³
//│ 									in case _lh_matchIdent¹¹ of {
//│ 										LH_N  => if gtList_lh_₃(_lh_runsplit_LH_C_0⁴, _lh_runsplit_LH_C_0³) then runsplit⁰([LH_C _lh_runsplit_LH_C_0³ [LH_C _lh_runsplit_LH_C_0⁴ [LH_N]]], _lh_runsplit_LH_C_1⁴) else if leList_lh_₈(_lh_runsplit_LH_C_0⁴, _lh_runsplit_LH_C_0³) then runsplit⁰([LH_C _lh_runsplit_LH_C_0⁴ [LH_C _lh_runsplit_LH_C_0³ _lh_runsplit_LH_C_1³]], _lh_runsplit_LH_C_1⁴) else 
//│ 											let _lh_merge_lists_LH_C_1³ = runsplit⁰([LH_C _lh_runsplit_LH_C_0⁴ [LH_N]], _lh_runsplit_LH_C_1⁴)
//│ 											in let _lh_merge_lists_LH_C_0³ = [LH_C _lh_runsplit_LH_C_0³ _lh_runsplit_LH_C_1³]
//│ 											in (fun merge_lists⁶ -> (fun merge⁶ -> merge⁶(_lh_merge_lists_LH_C_0³, merge_lists⁶(_lh_merge_lists_LH_C_1³))))
//│ 										| _  => if leList_lh_₅(_lh_runsplit_LH_C_0⁴, _lh_runsplit_LH_C_0³) then runsplit⁰([LH_C _lh_runsplit_LH_C_0⁴ [LH_C _lh_runsplit_LH_C_0³ _lh_matchIdent¹¹]], _lh_runsplit_LH_C_1⁴) else 
//│ 											let _lh_merge_lists_LH_C_1⁴ = runsplit⁰([LH_C _lh_runsplit_LH_C_0⁴ [LH_N]], _lh_runsplit_LH_C_1⁴)
//│ 											in let _lh_merge_lists_LH_C_0⁴ = [LH_C _lh_runsplit_LH_C_0³ _lh_matchIdent¹¹]
//│ 											in (fun merge_lists⁷ -> (fun merge⁷ -> merge⁷(_lh_merge_lists_LH_C_0⁴, merge_lists⁷(_lh_merge_lists_LH_C_1⁴))))}
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}}}}
//│ 			| _  => case _lh_runsplit_arg2⁰ of {
//│ 				LH_N  => 
//│ 					let _lh_merge_lists_LH_C_1⁵ = (fun merge_lists⁸ -> (fun merge⁸ -> [LH_N]))
//│ 					in let _lh_merge_lists_LH_C_0⁵ = _lh_runsplit_arg1⁰
//│ 					in (fun merge_lists⁹ -> (fun merge⁹ -> merge⁹(_lh_merge_lists_LH_C_0⁵, merge_lists⁹(_lh_merge_lists_LH_C_1⁵))))
//│ 				| _  => case _lh_runsplit_arg1⁰ of {
//│ 					LH_N  => case _lh_runsplit_arg2⁰ of {
//│ 						LH_C _lh_runsplit_LH_C_0⁵ _lh_runsplit_LH_C_1⁵ => runsplit⁰([LH_C _lh_runsplit_LH_C_0⁵ [LH_N]], _lh_runsplit_LH_C_1⁵)
//│ 						| _  => case _lh_runsplit_arg1⁰ of {
//│ 							LH_C _lh_runsplit_LH_C_0⁶ _lh_runsplit_LH_C_1⁶ => case _lh_runsplit_arg2⁰ of {
//│ 								LH_C _lh_runsplit_LH_C_0⁷ _lh_runsplit_LH_C_1⁷ => 
//│ 									let _lh_matchIdent¹² = _lh_runsplit_LH_C_1⁶
//│ 									in case _lh_matchIdent¹² of {
//│ 										LH_N  => if gtList_lh_₁(_lh_runsplit_LH_C_0⁷, _lh_runsplit_LH_C_0⁶) then runsplit⁰([LH_C _lh_runsplit_LH_C_0⁶ [LH_C _lh_runsplit_LH_C_0⁷ [LH_N]]], _lh_runsplit_LH_C_1⁷) else if leList_lh_₁(_lh_runsplit_LH_C_0⁷, _lh_runsplit_LH_C_0⁶) then runsplit⁰([LH_C _lh_runsplit_LH_C_0⁷ [LH_C _lh_runsplit_LH_C_0⁶ _lh_runsplit_LH_C_1⁶]], _lh_runsplit_LH_C_1⁷) else 
//│ 											let _lh_merge_lists_LH_C_1⁶ = runsplit⁰([LH_C _lh_runsplit_LH_C_0⁷ [LH_N]], _lh_runsplit_LH_C_1⁷)
//│ 											in let _lh_merge_lists_LH_C_0⁶ = [LH_C _lh_runsplit_LH_C_0⁶ _lh_runsplit_LH_C_1⁶]
//│ 											in (fun merge_lists¹⁰ -> (fun merge¹⁰ -> merge¹⁰(_lh_merge_lists_LH_C_0⁶, merge_lists¹⁰(_lh_merge_lists_LH_C_1⁶))))
//│ 										| _  => if leList_lh_₃(_lh_runsplit_LH_C_0⁷, _lh_runsplit_LH_C_0⁶) then runsplit⁰([LH_C _lh_runsplit_LH_C_0⁷ [LH_C _lh_runsplit_LH_C_0⁶ _lh_matchIdent¹²]], _lh_runsplit_LH_C_1⁷) else 
//│ 											let _lh_merge_lists_LH_C_1⁷ = runsplit⁰([LH_C _lh_runsplit_LH_C_0⁷ [LH_N]], _lh_runsplit_LH_C_1⁷)
//│ 											in let _lh_merge_lists_LH_C_0⁷ = [LH_C _lh_runsplit_LH_C_0⁶ _lh_matchIdent¹²]
//│ 											in (fun merge_lists¹¹ -> (fun merge¹¹ -> merge¹¹(_lh_merge_lists_LH_C_0⁷, merge_lists¹¹(_lh_merge_lists_LH_C_1⁷))))}
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}}
//│ 					| _  => case _lh_runsplit_arg1⁰ of {
//│ 						LH_C _lh_runsplit_LH_C_0⁸ _lh_runsplit_LH_C_1⁸ => case _lh_runsplit_arg2⁰ of {
//│ 							LH_C _lh_runsplit_LH_C_0⁹ _lh_runsplit_LH_C_1⁹ => 
//│ 								let _lh_matchIdent¹³ = _lh_runsplit_LH_C_1⁸
//│ 								in case _lh_matchIdent¹³ of {
//│ 									LH_N  => if gtList_lh_₂(_lh_runsplit_LH_C_0⁹, _lh_runsplit_LH_C_0⁸) then runsplit⁰([LH_C _lh_runsplit_LH_C_0⁸ [LH_C _lh_runsplit_LH_C_0⁹ [LH_N]]], _lh_runsplit_LH_C_1⁹) else if leList_lh_₇(_lh_runsplit_LH_C_0⁹, _lh_runsplit_LH_C_0⁸) then runsplit⁰([LH_C _lh_runsplit_LH_C_0⁹ [LH_C _lh_runsplit_LH_C_0⁸ _lh_runsplit_LH_C_1⁸]], _lh_runsplit_LH_C_1⁹) else 
//│ 										let _lh_merge_lists_LH_C_1⁸ = runsplit⁰([LH_C _lh_runsplit_LH_C_0⁹ [LH_N]], _lh_runsplit_LH_C_1⁹)
//│ 										in let _lh_merge_lists_LH_C_0⁸ = [LH_C _lh_runsplit_LH_C_0⁸ _lh_runsplit_LH_C_1⁸]
//│ 										in (fun merge_lists¹² -> (fun merge¹² -> merge¹²(_lh_merge_lists_LH_C_0⁸, merge_lists¹²(_lh_merge_lists_LH_C_1⁸))))
//│ 									| _  => if leList_lh_₆(_lh_runsplit_LH_C_0⁹, _lh_runsplit_LH_C_0⁸) then runsplit⁰([LH_C _lh_runsplit_LH_C_0⁹ [LH_C _lh_runsplit_LH_C_0⁸ _lh_matchIdent¹³]], _lh_runsplit_LH_C_1⁹) else 
//│ 										let _lh_merge_lists_LH_C_1⁹ = runsplit⁰([LH_C _lh_runsplit_LH_C_0⁹ [LH_N]], _lh_runsplit_LH_C_1⁹)
//│ 										in let _lh_merge_lists_LH_C_0⁹ = [LH_C _lh_runsplit_LH_C_0⁸ _lh_matchIdent¹³]
//│ 										in (fun merge_lists¹³ -> (fun merge¹³ -> merge¹³(_lh_merge_lists_LH_C_0⁹, merge_lists¹³(_lh_merge_lists_LH_C_1⁹))))}
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}}}}))
//│ 	and merge⁰ = (fun _lh_merge_arg1⁰ -> (fun _lh_merge_arg2⁰ -> case _lh_merge_arg1⁰ of {
//│ 			LH_N  => _lh_merge_arg2⁰
//│ 			| _  => case _lh_merge_arg2⁰ of {
//│ 				LH_N  => _lh_merge_arg1⁰
//│ 				| _  => case _lh_merge_arg1⁰ of {
//│ 					LH_C _lh_merge_LH_C_0⁰ _lh_merge_LH_C_1⁰ => case _lh_merge_arg2⁰ of {
//│ 						LH_C _lh_merge_LH_C_0¹ _lh_merge_LH_C_1¹ => if eqList_lh_₁(_lh_merge_LH_C_0⁰, _lh_merge_LH_C_0¹) then [LH_C _lh_merge_LH_C_0⁰ [LH_C _lh_merge_LH_C_0¹ merge⁰(_lh_merge_LH_C_1⁰, _lh_merge_LH_C_1¹)]] else if ltList_lh_₁(_lh_merge_LH_C_0⁰, _lh_merge_LH_C_0¹) then [LH_C _lh_merge_LH_C_0⁰ merge⁰(_lh_merge_LH_C_1⁰, [LH_C _lh_merge_LH_C_0¹ _lh_merge_LH_C_1¹])] else [LH_C _lh_merge_LH_C_0¹ merge⁰([LH_C _lh_merge_LH_C_0⁰ _lh_merge_LH_C_1⁰], _lh_merge_LH_C_1¹)]
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}}})) 
//│ 	in (fun _lh_funcomp_x⁵ -> merge_lists⁰(runsplit⁰([LH_N], _lh_funcomp_x⁵)))(_lh_mergeSort_arg1⁰)
//│ def odd_lh_₁(_lh_odd_arg1¹) = ((_lh_odd_arg1¹ mod 2) == 0)
//│ def odd_lh_₂(_lh_odd_arg1⁰) = ((_lh_odd_arg1⁰ mod 2) == 0)
//│ def partition_lh_₁(_lh_partition_arg1⁰, _lh_partition_arg2⁰) = foldr_lh_₃(select_lh_₁(_lh_partition_arg1⁰), [LH_P2 [LH_N] [LH_N]], _lh_partition_arg2⁰)
//│ def prependToAll_lh_₁(_lh_prependToAll_arg1⁰, _lh_prependToAll_arg2⁰) = _lh_prependToAll_arg2⁰(_lh_prependToAll_arg1⁰)
//│ def quickSort2_lh_₁(_lh_quickSort2_arg1⁰) = case _lh_quickSort2_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_quickSort2_LH_C_0⁰ _lh_quickSort2_LH_C_1⁰ => 
//│ 		let _lh_matchIdent⁵ = partition_lh_₁((fun x¹ -> (fun y⁰ -> geList_lh_₁(x¹, y⁰)))(_lh_quickSort2_LH_C_0⁰), _lh_quickSort2_LH_C_1⁰)
//│ 		in case _lh_matchIdent⁵ of {
//│ 			LH_P2 _lh_quickSort2_LH_P2_0⁰ _lh_quickSort2_LH_P2_1⁰ => mappend_lh_₃(quickSort2_lh_₁(_lh_quickSort2_LH_P2_0⁰), [LH_C _lh_quickSort2_LH_C_0⁰ quickSort2_lh_₁(_lh_quickSort2_LH_P2_1⁰)])
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def quickSort_lh_₁(_lh_quickSort_arg1⁰) = case _lh_quickSort_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_quickSort_LH_C_0⁰ _lh_quickSort_LH_C_1⁰ => mappend_lh_₄(quickSort_lh_₁(
//│ 		let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if leList_lh_₁₀(_lh_listcomp_fun_ls_h⁰, _lh_quickSort_LH_C_0⁰) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁰(_lh_quickSort_LH_C_1⁰)), [LH_C _lh_quickSort_LH_C_0⁰ quickSort_lh_₁(
//│ 		let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => if gtList_lh_₅(_lh_listcomp_fun_ls_h¹, _lh_quickSort_LH_C_0⁰) then [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun¹(_lh_quickSort_LH_C_1⁰))])
//│ 	| _  => error⁰}
//│ def quickerSort_lh_₁(_lh_quickerSort_arg1⁰) = case _lh_quickerSort_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_quickerSort_LH_C_0⁰ _lh_quickerSort_LH_C_1⁰ => case _lh_quickerSort_LH_C_1⁰ of {
//│ 		LH_N  => [LH_C _lh_quickerSort_LH_C_0⁰ [LH_N]]
//│ 		| _  => 
//│ 			let split⁰ = (fun _lh_split_arg1⁰ -> (fun _lh_split_arg2⁰ -> (fun _lh_split_arg3⁰ -> (fun _lh_split_arg4⁰ -> case _lh_split_arg4⁰ of {
//│ 				LH_N  => mappend_lh_₅(quickerSort_lh_₁(_lh_split_arg2⁰), [LH_C _lh_split_arg1⁰ quickerSort_lh_₁(_lh_split_arg3⁰)])
//│ 				| LH_C _lh_split_LH_C_0⁰ _lh_split_LH_C_1⁰ => if leList_lh_₁₄(_lh_split_LH_C_0⁰, _lh_split_arg1⁰) then split⁰(_lh_split_arg1⁰, [LH_C _lh_split_LH_C_0⁰ _lh_split_arg2⁰], _lh_split_arg3⁰, _lh_split_LH_C_1⁰) else split⁰(_lh_split_arg1⁰, _lh_split_arg2⁰, [LH_C _lh_split_LH_C_0⁰ _lh_split_arg3⁰], _lh_split_LH_C_1⁰)
//│ 				| _  => error⁰}))))
//│ 			in split⁰(_lh_quickerSort_LH_C_0⁰, [LH_N], [LH_N], _lh_quickerSort_LH_C_1⁰)}
//│ 	| _  => error⁰}
//│ def reverse_helper_lh_₁(ls³, a⁰) = case ls³ of {
//│ 	LH_C h⁴ t⁴ => reverse_helper_lh_₁(t⁴, [LH_C h⁴ a⁰])
//│ 	| LH_N  => a⁰}
//│ def reverse_lh_₁(ls⁸) = reverse_helper_lh_₁(ls⁸, [LH_N])
//│ def reverse_lh_₂(ls⁹) = reverse_helper_lh_₁(ls⁹, [LH_N])
//│ def reverse_lh_₃(ls⁰) = reverse_helper_lh_₁(ls⁰, [LH_N])
//│ def reverse_lh_₄(ls¹⁰) = reverse_helper_lh_₁(ls¹⁰, [LH_N])
//│ def reverse_lh_₅(ls¹) = reverse_helper_lh_₁(ls¹, [LH_N])
//│ def select_lh_₁(_lh_select_arg1⁰, _lh_select_arg2⁰, _lh_select_arg3⁰) = case _lh_select_arg3⁰ of {
//│ 	LH_P2 _lh_select_LH_P2_0⁰ _lh_select_LH_P2_1⁰ => if _lh_select_arg1⁰(_lh_select_arg2⁰) then [LH_P2 [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰] _lh_select_LH_P2_1⁰] else [LH_P2 _lh_select_LH_P2_0⁰ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]]
//│ 	| _  => error⁰}
//│ def testSorting_nofib_lh_₁(_lh_testSorting_nofib_arg1⁰) = 
//│ 	let f⁴ = primId⁰([LH_C 'm' [LH_C 'o' [LH_C 'd' [LH_C 'u' [LH_C 'l' [LH_C 'e' [LH_C ' ' [LH_C 'M' [LH_C 'a' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 'e' [LH_C '|' [LH_C '|' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C ' ' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '|' [LH_C '|' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C ' ' [LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C 't' [LH_C 'r' [LH_C 'o' [LH_C 'l' [LH_C '.' [LH_C 'M' [LH_C 'o' [LH_C 'n' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C '(' [LH_C 'r' [LH_C 'e' [LH_C 'p' [LH_C 'l' [LH_C 'i' [LH_C 'c' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C 'M' [LH_C '_' [LH_C ')' [LH_C '|' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C ' ' [LH_C 'D' [LH_C 'a' [LH_C 't' [LH_C 'a' [LH_C '.' [LH_C 'L' [LH_C 'i' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C '(' [LH_C 'i' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_C 'p' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_C 'e' [LH_C ')' [LH_C '|' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C ' ' [LH_C 'S' [LH_C 'y' [LH_C 's' [LH_C 't' [LH_C 'e' [LH_C 'm' [LH_C '.' [LH_C 'E' [LH_C 'n' [LH_C 'v' [LH_C 'i' [LH_C 'r' [LH_C 'o' [LH_C 'n' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C '(' [LH_C 'g' [LH_C 'e' [LH_C 't' [LH_C 'A' [LH_C 'r' [LH_C 'g' [LH_C 's' [LH_C ')' [LH_C '|' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C ' ' [LH_C 'N' [LH_C 'o' [LH_C 'f' [LH_C 'i' [LH_C 'b' [LH_C 'U' [LH_C 't' [LH_C 'i' [LH_C 'l' [LH_C 's' [LH_C ' ' [LH_C '(' [LH_C 'h' [LH_C 'a' [LH_C 's' [LH_C 'h' [LH_C ')' [LH_C '|' [LH_C '|' [LH_C 'm' [LH_C 'a' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'd' [LH_C 'o' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C '(' [LH_C 'n' [LH_C ':' [LH_C '_' [LH_C ')' [LH_C ' ' [LH_C '<' [LH_C '-' [LH_C ' ' [LH_C 'g' [LH_C 'e' [LH_C 't' [LH_C 'A' [LH_C 'r' [LH_C 'g' [LH_C 's' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C 'r' [LH_C 'e' [LH_C 'p' [LH_C 'l' [LH_C 'i' [LH_C 'c' [LH_C 'a' [LH_C 't' [LH_C 'e' [LH_C 'M' [LH_C '_' [LH_C ' ' [LH_C '(' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'n' [LH_C ')' [LH_C ' ' [LH_C '$' [LH_C ' ' [LH_C 'd' [LH_C 'o' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C '(' [LH_C '_' [LH_C ':' [LH_C 's' [LH_C ':' [LH_C '_' [LH_C ')' [LH_C ' ' [LH_C '<' [LH_C '-' [LH_C ' ' [LH_C 'g' [LH_C 'e' [LH_C 't' [LH_C 'A' [LH_C 'r' [LH_C 'g' [LH_C 's' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C 'f' [LH_C ' ' [LH_C '<' [LH_C '-' [LH_C ' ' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 'd' [LH_C 'F' [LH_C 'i' [LH_C 'l' [LH_C 'e' [LH_C ' ' [LH_C 's' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C '(' [LH_C 'h' [LH_C 'a' [LH_C 's' [LH_C 'h' [LH_C ' ' [LH_C '(' [LH_C 'm' [LH_C 'a' [LH_C 'n' [LH_C 'g' [LH_C 'l' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C ')' [LH_C ')' [LH_C '|' [LH_C '|' [LH_C 'm' [LH_C 'a' [LH_C 'n' [LH_C 'g' [LH_C 'l' [LH_C 'e' [LH_C ' ' [LH_C ':' [LH_C ':' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C '{' [LH_C '-' [LH_C 'i' [LH_C 'n' [LH_C 'p' [LH_C 'u' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '-' [LH_C '}' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C '{' [LH_C '-' [LH_C 'o' [LH_C 'u' [LH_C 't' [LH_C 'p' [LH_C 'u' [LH_C 't' [LH_C '-' [LH_C '}' [LH_C '|' [LH_C 'm' [LH_C 'a' [LH_C 'n' [LH_C 'g' [LH_C 'l' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C 'p' [LH_C 't' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C '(' [LH_C 'u' [LH_C 'n' [LH_C 'l' [LH_C 'i' [LH_C 'n' [LH_C 'e' [LH_C 's' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'l' [LH_C 'i' [LH_C 'n' [LH_C 'e' [LH_C 's' [LH_C ')' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C 'p' [LH_C 't' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 'e' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'l' [LH_C 'd' [LH_C 'r' [LH_C ' ' [LH_C '(' [LH_C '.' [LH_C ')' [LH_C ' ' [LH_C 'i' [LH_C 'd' [LH_C ' ' [LH_C '(' [LH_C 'i' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_C 'p' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_C 'e' [LH_C ' ' [LH_C 'r' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_C 'e' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C 's' [LH_C ')' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C '=' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C '[' [LH_C ' ' [LH_C 'h' [LH_C 'e' [LH_C 'a' [LH_C 'p' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C 's' [LH_C 'e' [LH_C 'r' [LH_C 't' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ',' [LH_C ' ' [LH_C 'm' [LH_C 'e' [LH_C 'r' [LH_C 'g' [LH_C 'e' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ',' [LH_C ' ' [LH_C 'q' [LH_C 'u' [LH_C 'i' [LH_C 'c' [LH_C 'k' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ',' [LH_C ' ' [LH_C 'q' [LH_C 'u' [LH_C 'i' [LH_C 'c' [LH_C 'k' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '2' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ',' [LH_C ' ' [LH_C 'q' [LH_C 'u' [LH_C 'i' [LH_C 'c' [LH_C 'k' [LH_C 'e' [LH_C 'r' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'r' [LH_C 'e' [LH_C 'e' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'r' [LH_C 'e' [LH_C 'e' [LH_C 'S' [LH_C 'o' [LH_C 'r' [LH_C 't' [LH_C '2' [LH_C '|' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ' ' [LH_C ']' [LH_C '|
//│ 	in hash_lh_₁(mangle_lh_₁(f⁴))
//│ def treeSort2_lh_₁(_lh_treeSort2_arg1⁰) = 
//│ 	let mkTree⁰ = (fun _lh_mkTree_arg1⁰ -> 
//│ 			let to_tree⁰ = (fun _lh_to_tree_arg1⁰ -> (fun _lh_to_tree_arg2⁰ -> case _lh_to_tree_arg2⁰ of {
//│ 				Tip2  => [Twig2 _lh_to_tree_arg1⁰]
//│ 				| Twig2 _lh_to_tree_Twig2_0⁰ => if leList_lh_₁₅(_lh_to_tree_arg1⁰, _lh_to_tree_Twig2_0⁰) then [Branch2 _lh_to_tree_Twig2_0⁰ [Twig2 _lh_to_tree_arg1⁰] [Tip2]] else [Branch2 _lh_to_tree_Twig2_0⁰ [Tip2] [Twig2 _lh_to_tree_arg1⁰]]
//│ 				| Branch2 _lh_to_tree_Branch2_0⁰ _lh_to_tree_Branch2_1⁰ _lh_to_tree_Branch2_2⁰ => if leList_lh_₁₆(_lh_to_tree_arg1⁰, _lh_to_tree_Branch2_0⁰) then [Branch2 _lh_to_tree_Branch2_0⁰ to_tree⁰(_lh_to_tree_arg1⁰, _lh_to_tree_Branch2_1⁰) _lh_to_tree_Branch2_2⁰] else [Branch2 _lh_to_tree_Branch2_0⁰ _lh_to_tree_Branch2_1⁰ to_tree⁰(_lh_to_tree_arg1⁰, _lh_to_tree_Branch2_2⁰)]
//│ 				| _  => error⁰}))
//│ 			in foldr_lh_₃(to_tree⁰, [Tip2], _lh_mkTree_arg1⁰))
//│ 	and readTree⁰ = (fun _lh_readTree_arg1⁰ -> case _lh_readTree_arg1⁰ of {
//│ 			Tip2  => [LH_N]
//│ 			| Twig2 _lh_readTree_Twig2_0⁰ => [LH_C _lh_readTree_Twig2_0⁰ [LH_N]]
//│ 			| Branch2 _lh_readTree_Branch2_0⁰ _lh_readTree_Branch2_1⁰ _lh_readTree_Branch2_2⁰ => mappend_lh_₆(readTree⁰(_lh_readTree_Branch2_1⁰), [LH_C _lh_readTree_Branch2_0⁰ readTree⁰(_lh_readTree_Branch2_2⁰)])
//│ 			| _  => error⁰}) 
//│ 	in (fun _lh_funcomp_x⁰ -> readTree⁰(mkTree⁰(_lh_funcomp_x⁰)))(_lh_treeSort2_arg1⁰)
//│ def treeSort_lh_₁(_lh_treeSort_arg1⁰) = 
//│ 	let mkTree¹ = (fun _lh_mkTree_arg1¹ -> 
//│ 			let to_tree¹ = (fun _lh_to_tree_arg1¹ -> (fun _lh_to_tree_arg2¹ -> case _lh_to_tree_arg2¹ of {
//│ 				Tip  => [Branch _lh_to_tree_arg1¹ [Tip] [Tip]]
//│ 				| Branch _lh_to_tree_Branch_0⁰ _lh_to_tree_Branch_1⁰ _lh_to_tree_Branch_2⁰ => if leList_lh_₉(_lh_to_tree_arg1¹, _lh_to_tree_Branch_0⁰) then [Branch _lh_to_tree_Branch_0⁰ to_tree¹(_lh_to_tree_arg1¹, _lh_to_tree_Branch_1⁰) _lh_to_tree_Branch_2⁰] else [Branch _lh_to_tree_Branch_0⁰ _lh_to_tree_Branch_1⁰ to_tree¹(_lh_to_tree_arg1¹, _lh_to_tree_Branch_2⁰)]
//│ 				| _  => error⁰}))
//│ 			in foldr_lh_₂(to_tree¹, [Tip], _lh_mkTree_arg1¹))
//│ 	and readTree¹ = (fun _lh_readTree_arg1¹ -> case _lh_readTree_arg1¹ of {
//│ 			Tip  => [LH_N]
//│ 			| Branch _lh_readTree_Branch_0⁰ _lh_readTree_Branch_1⁰ _lh_readTree_Branch_2⁰ => mappend_lh_₂(readTree¹(_lh_readTree_Branch_1⁰), [LH_C _lh_readTree_Branch_0⁰ readTree¹(_lh_readTree_Branch_2⁰)])
//│ 			| _  => error⁰}) 
//│ 	in (fun _lh_funcomp_x¹ -> readTree¹(mkTree¹(_lh_funcomp_x¹)))(_lh_treeSort_arg1⁰)
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = concat_lh_₁(map_lh_₁((fun l⁰ -> mappend_lh_₁(l⁰, [LH_C '|' [LH_N]])), _lh_unlines_arg1⁰))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
