:NewParser
:ParseOnly

:lhInHaskell
:lhGenOCaml
hash str = foldl (\acc -> \c -> int_of_char c + acc*31) 0 str
and [] = True
and (h:t) = if h then (and t) else False
copy 0 a = []
copy n a = a:(copy (n - 1) a)
unlines ls = concat (map (\l -> l ++ ['n']) ls)
even a = (a `mod` 2) == 0
drop n [] = []
drop n (h:t) = if n > 0 then (drop (n - 1) t) else (h:t)
encrypt n e = unlines . map (string_of_int . power e n . code) . collect (size n)
code ls = foldl (\x y -> (128 * x) + (int_of_char y)) 0 ls
collect 0 xs = []
collect n [] = []
collect n xs = (take n xs) : collect n (drop n xs)
size n = (length (string_of_int n) * 47) `div` 100
power 0 m x = 1
power n m x = if (even n) then ((sqr (power (n `div` 2) m x)) `mod` m) else ((x * (power (n-1) m x)) `mod` m)
sqr x = x * x
input = primId "module Rsa (encrypt, decrypt, makeKeys)whereencrypt, decrypt :: Integer -> Integer -> String -> Stringencrypt n e = unlines . map (show . power e n . code) . collect (size n)decrypt n d = concat . map (decode . power d n . read) . lines-------- Converting between Strings and Integers -----------code :: String -> Integercode = foldl accum 0where accum x y = (128 * x) + fromIntegral (fromEnum y)"
testRsa_nofib _ = hash (encrypt 6367 5189 input)
testRsa_nofib $ primId 0
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testRsa_nofib_lh_₁^1148(primId⁰(0))
//│ def code_lh_₁(_lh_code_arg1⁰) = foldl_lh_₂^172((fun x⁰ -> (fun y⁰ -> ((128 * x⁰) + int_of_char⁰(y⁰)))), 0, _lh_code_arg1⁰)
//│ def collect_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰) = case _lh_collect_arg1⁰ of {
//│ 	0  => [LH_N]
//│ 	| _  => case _lh_collect_arg2⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| _  => [LH_C take_lh_₁^271(_lh_collect_arg1⁰, _lh_collect_arg2⁰) collect_lh_₁^276(_lh_collect_arg1⁰, drop_lh_₁^279(_lh_collect_arg1⁰, _lh_collect_arg2⁰))]}}
//│ def concat_lh_₁(lss⁰) = case lss⁰ of {
//│ 	LH_C h⁴ t⁴ => mappend_lh_₂^70(h⁴, concat_lh_₁^73(t⁴))
//│ 	| LH_N  => [LH_N]}
//│ def drop_lh_₁(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ > 0) then drop_lh_₁^101((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) else [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]
//│ 	| _  => error⁰}
//│ def encrypt_lh_₁(_lh_encrypt_arg1⁰, _lh_encrypt_arg2⁰, _lh_funcomp_x⁰) = (fun _lh_funcomp_x¹ -> unlines_lh_₁^1105(map_lh_₁^1106((fun _lh_funcomp_x² -> (fun _lh_funcomp_x³ -> string_of_int⁰(power_lh_₁^1108(_lh_encrypt_arg2⁰, _lh_encrypt_arg1⁰, _lh_funcomp_x³)))(code_lh_₁^1117(_lh_funcomp_x²))), _lh_funcomp_x¹)))(collect_lh_₁^1127(size_lh_₁^1128(_lh_encrypt_arg1⁰), _lh_funcomp_x⁰))
//│ def even_lh_₁(_lh_even_arg1⁰) = ((_lh_even_arg1⁰ % 2) == 0)
//│ def foldl_lh_₁(f², i¹, ls⁴) = case ls⁴ of {
//│ 	LH_C h⁷ t⁷ => foldl_lh_₁^142(f², f²(i¹, h⁷), t⁷)
//│ 	| LH_N  => i¹}
//│ def foldl_lh_₂(f⁰, i⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h¹ t¹ => foldl_lh_₂^14(f⁰, f⁰(i⁰, h¹), t¹)
//│ 	| LH_N  => i⁰}
//│ def hash_lh_₁(_lh_hash_arg1⁰) = foldl_lh_₁^1085((fun acc⁰ -> (fun c⁰ -> ((int_of_char⁰(c⁰) + acc⁰) * 31))), 0, _lh_hash_arg1⁰)
//│ def input_lh_₁ = primId⁰([LH_C 'm' [LH_C 'o' [LH_C 'd' [LH_C 'u' [LH_C 'l' [LH_C 'e' [LH_C ' ' [LH_C 'R' [LH_C 's' [LH_C 'a' [LH_C ' ' [LH_C '(' [LH_C 'e' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'k' [LH_C 'e' [LH_C 'K' [LH_C 'e' [LH_C 'y' [LH_C 's' [LH_C ')' [LH_C 'w' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ' ' [LH_C ':' [LH_C ':' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C 'e' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C 'e' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'u' [LH_C 'n' [LH_C 'l' [LH_C 'i' [LH_C 'n' [LH_C 'e' [LH_C 's' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C '(' [LH_C 's' [LH_C 'h' [LH_C 'o' [LH_C 'w' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'e' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C ')' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'l' [LH_C 'l' [LH_C 'e' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C '(' [LH_C 's' [LH_C 'i' [LH_C 'z' [LH_C 'e' [LH_C ' ' [LH_C 'n' [LH_C ')' [LH_C 'd' [LH_C 'e' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C '(' [LH_C 'd' [LH_C 'e' [LH_C 'c' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'd' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 'd' [LH_C ')' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'l' [LH_C 'i' [LH_C 'n' [LH_C 'e' [LH_C 's' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C ' ' [LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C 's' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_C ' ' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C 'c' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C ' ' [LH_C ':' [LH_C ':' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'e' [LH_C 'r' [LH_C 'c' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'l' [LH_C 'd' [LH_C 'l' [LH_C ' ' [LH_C 'a' [LH_C 'c' [LH_C 'c' [LH_C 'u' [LH_C 'm' [LH_C ' ' [LH_C '0' [LH_C 'w' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'c' [LH_C 'c' [LH_C 'u' [LH_C 'm' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C 'y' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C '(' [LH_C '1' [LH_C '2' [LH_C '8' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ')' [LH_C ' ' [LH_C '+' [LH_C ' ' [LH_C 'f' [LH_C 'r' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C '(' [LH_C 'f' [LH_C 'r' [LH_C 'o' [LH_C 'm' [LH_C 'E' [LH_C 'n' [LH_C 'u' [LH_C 'm' [LH_C ' ' [LH_C 'y' [LH_C ')' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ def length_lh_₁(ls¹) = case ls¹ of {
//│ 	LH_C h² t² => (1 + length_lh_₁^50(t²))
//│ 	| LH_N  => 0}
//│ def map_lh_₁(f³, ls⁵) = case ls⁵ of {
//│ 	LH_C h⁸ t⁸ => [LH_C f³(h⁸) map_lh_₁^162(f³, t⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f¹, ls²) = case ls² of {
//│ 	LH_C h⁵ t⁵ => [LH_C f¹(h⁵) map_lh_₂^84(f¹, t⁵)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh_₁^59(t³, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₂(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂^3(t⁰, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def power_lh_₁(_lh_power_arg1⁰, _lh_power_arg2⁰, _lh_power_arg3⁰) = case _lh_power_arg1⁰ of {
//│ 	0  => 1
//│ 	| _  => if even_lh_₁^194(_lh_power_arg1⁰) then (sqr_lh_₁^198(power_lh_₁^199(div⁰(_lh_power_arg1⁰, 2), _lh_power_arg2⁰, _lh_power_arg3⁰)) % _lh_power_arg2⁰) else ((_lh_power_arg3⁰ * power_lh_₁^218((_lh_power_arg1⁰ - 1), _lh_power_arg2⁰, _lh_power_arg3⁰)) % _lh_power_arg2⁰)}
//│ def size_lh_₁(_lh_size_arg1⁰) = div⁰((length_lh_₁^240(string_of_int⁰(_lh_size_arg1⁰)) * 47), 100)
//│ def sqr_lh_₁(_lh_sqr_arg1⁰) = (_lh_sqr_arg1⁰ * _lh_sqr_arg1⁰)
//│ def take_lh_₁(n⁰, ls³) = if (n⁰ > 0) then case ls³ of {
//│ 	LH_C h⁶ t⁶ => [LH_C h⁶ take_lh_₁^125((n⁰ - 1), t⁶)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testRsa_nofib_lh_₁(_lh_testRsa_nofib_arg1⁰) = hash_lh_₁^1138(encrypt_lh_₁^1139(6367, 5189, input_lh_₁^1144))
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = concat_lh_₁^252(map_lh_₂^253((fun l⁰ -> mappend_lh_₁^254(l⁰, [LH_C 'n' [LH_N]])), _lh_unlines_arg1⁰))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec foldl_lh__d1 f_2 i_1 ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      (((foldl_lh__d1 f_2) ((f_2 i_1) h_7)) t_7)
//│ 		    | `LH_N -> 
//│ 		      i_1);;
//│ 		let rec hash_lh__d1 _lh_hash_arg1_0 =
//│ 		  (((foldl_lh__d1 (fun acc_0 c_0 -> 
//│ 		    (((int_of_char c_0) + acc_0) * 31))) 0) _lh_hash_arg1_0);;
//│ 		let rec input_lh__d1 =
//│ 		  (`LH_C('m', (`LH_C('o', (`LH_C('d', (`LH_C('u', (`LH_C('l', (`LH_C('e', (`LH_C(' ', (`LH_C('R', (`LH_C('s', (`LH_C('a', (`LH_C(' ', (`LH_C('(', (`LH_C('e', (`LH_C('n', (`LH_C('c', (`LH_C('r', (`LH_C('y', (`LH_C('p', (`LH_C('t', (`LH_C(',', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('c', (`LH_C('r', (`LH_C('y', (`LH_C('p', (`LH_C('t', (`LH_C(',', (`LH_C(' ', (`LH_C('m', (`LH_C('a', (`LH_C('k', (`LH_C('e', (`LH_C('K', (`LH_C('e', (`LH_C('y', (`LH_C('s', (`LH_C(')', (`LH_C('w', (`LH_C('h', (`LH_C('e', (`LH_C('r', (`LH_C('e', (`LH_C('e', (`LH_C('n', (`LH_C('c', (`LH_C('r', (`LH_C('y', (`LH_C('p', (`LH_C('t', (`LH_C(',', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('c', (`LH_C('r', (`LH_C('y', (`LH_C('p', (`LH_C('t', (`LH_C(' ', (`LH_C(':', (`LH_C(':', (`LH_C(' ', (`LH_C('I', (`LH_C('n', (`LH_C('t', (`LH_C('e', (`LH_C('g', (`LH_C('e', (`LH_C('r', (`LH_C(' ', (`LH_C('-', (`LH_C('>', (`LH_C(' ', (`LH_C('I', (`LH_C('n', (`LH_C('t', (`LH_C('e', (`LH_C('g', (`LH_C('e', (`LH_C('r', (`LH_C(' ', (`LH_C('-', (`LH_C('>', (`LH_C(' ', (`LH_C('S', (`LH_C('t', (`LH_C('r', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C(' ', (`LH_C('-', (`LH_C('>', (`LH_C(' ', (`LH_C('S', (`LH_C('t', (`LH_C('r', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C('e', (`LH_C('n', (`LH_C('c', (`LH_C('r', (`LH_C('y', (`LH_C('p', (`LH_C('t', (`LH_C(' ', (`LH_C('n', (`LH_C(' ', (`LH_C('e', (`LH_C(' ', (`LH_C('=', (`LH_C(' ', (`LH_C('u', (`LH_C('n', (`LH_C('l', (`LH_C('i', (`LH_C('n', (`LH_C('e', (`LH_C('s', (`LH_C(' ', (`LH_C('.', (`LH_C(' ', (`LH_C('m', (`LH_C('a', (`LH_C('p', (`LH_C(' ', (`LH_C('(', (`LH_C('s', (`LH_C('h', (`LH_C('o', (`LH_C('w', (`LH_C(' ', (`LH_C('.', (`LH_C(' ', (`LH_C('p', (`LH_C('o', (`LH_C('w', (`LH_C('e', (`LH_C('r', (`LH_C(' ', (`LH_C('e', (`LH_C(' ', (`LH_C('n', (`LH_C(' ', (`LH_C('.', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('d', (`LH_C('e', (`LH_C(')', (`LH_C(' ', (`LH_C('.', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('l', (`LH_C('l', (`LH_C('e', (`LH_C('c', (`LH_C('t', (`LH_C(' ', (`LH_C('(', (`LH_C('s', (`LH_C('i', (`LH_C('z', (`LH_C('e', (`LH_C(' ', (`LH_C('n', (`LH_C(')', (`LH_C('d', (`LH_C('e', (`LH_C('c', (`LH_C('r', (`LH_C('y', (`LH_C('p', (`LH_C('t', (`LH_C(' ', (`LH_C('n', (`LH_C(' ', (`LH_C('d', (`LH_C(' ', (`LH_C('=', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('c', (`LH_C('a', (`LH_C('t', (`LH_C(' ', (`LH_C('.', (`LH_C(' ', (`LH_C('m', (`LH_C('a', (`LH_C('p', (`LH_C(' ', (`LH_C('(', (`LH_C('d', (`LH_C('e', (`LH_C('c', (`LH_C('o', (`LH_C('d', (`LH_C('e', (`LH_C(' ', (`LH_C('.', (`LH_C(' ', (`LH_C('p', (`LH_C('o', (`LH_C('w', (`LH_C('e', (`LH_C('r', (`LH_C(' ', (`LH_C('d', (`LH_C(' ', (`LH_C('n', (`LH_C(' ', (`LH_C('.', (`LH_C(' ', (`LH_C('r', (`LH_C('e', (`LH_C('a', (`LH_C('d', (`LH_C(')', (`LH_C(' ', (`LH_C('.', (`LH_C(' ', (`LH_C('l', (`LH_C('i', (`LH_C('n', (`LH_C('e', (`LH_C('s', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C(' ', (`LH_C('C', (`LH_C('o', (`LH_C('n', (`LH_C('v', (`LH_C('e', (`LH_C('r', (`LH_C('t', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C(' ', (`LH_C('b', (`LH_C('e', (`LH_C('t', (`LH_C('w', (`LH_C('e', (`LH_C('e', (`LH_C('n', (`LH_C(' ', (`LH_C('S', (`LH_C('t', (`LH_C('r', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C('s', (`LH_C(' ', (`LH_C('a', (`LH_C('n', (`LH_C('d', (`LH_C(' ', (`LH_C('I', (`LH_C('n', (`LH_C('t', (`LH_C('e', (`LH_C('g', (`LH_C('e', (`LH_C('r', (`LH_C('s', (`LH_C(' ', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('-', (`LH_C('c', (`LH_C('o', (`LH_C('d', (`LH_C('e', (`LH_C(' ', (`LH_C(':', (`LH_C(':', (`LH_C(' ', (`LH_C('S', (`LH_C('t', (`LH_C('r', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C(' ', (`LH_C('-', (`LH_C('>', (`LH_C(' ', (`LH_C('I', (`LH_C('n', (`LH_C('t', (`LH_C('e', (`LH_C('g', (`LH_C('e', (`LH_C('r', (`LH_C('c', (`LH_C('o', (`LH_C('d', (`LH_C('e', (`LH_C(' ', (`LH_C('=', (`LH_C(' ', (`LH_C('f', (`LH_C('o', (`LH_C('l', (`LH_C('d', (`LH_C('l', (`LH_C(' ', (`LH_C('a', (`LH_C('c', (`LH_C('c', (`LH_C('u', (`LH_C('m', (`LH_C(' ', (`LH_C('0', (`LH_C('w', (`LH_C('h', (`LH_C('e', (`LH_C('r', (`LH_C('e', (`LH_C(' ', (`LH_C('a', (`LH_C('c', (`LH_C('c', (`LH_C('u', (`LH_C('m', (`LH_C(' ', (`LH_C('x', (`LH_C(' ', (`LH_C('y', (`LH_C(' ', (`LH_C('=', (`LH_C(' ', (`LH_C('(', (`LH_C('1', (`LH_C('2', (`LH_C('8', (`LH_C(' ', (`LH_C('*', (`LH_C(' ', (`LH_C('x', (`LH_C(')', (`LH_C(' ', (`LH_C('+', (`LH_C(' ', (`LH_C('f', (`LH_C('r', (`LH_C('o', (`LH_C('m', (`LH_C('I', (`LH_C('n', (`LH_C('t', (`LH_C('e', (`LH_C('g', (`LH_C('r', (`LH_C('a', (`LH_C('l', (`LH_C(' ', (`LH_C('(', (`LH_C('f', (`LH_C('r', (`LH_C('o', (`LH_C('m', (`LH_C('E', (`LH_C('n', (`LH_C('u', (`LH_C('m', (`LH_C(' ', (`LH_C('y', (`LH_C(')', (`
//│ 		let rec even_lh__d1 _lh_even_arg1_0 =
//│ 		  ((_lh_even_arg1_0 mod 2) = 0);;
//│ 		let rec sqr_lh__d1 _lh_sqr_arg1_0 =
//│ 		  (_lh_sqr_arg1_0 * _lh_sqr_arg1_0);;
//│ 		let rec power_lh__d1 _lh_power_arg1_0 _lh_power_arg2_0 _lh_power_arg3_0 =
//│ 		  (match _lh_power_arg1_0 with
//│ 		    | 0 -> 
//│ 		      1
//│ 		    | _ -> 
//│ 		      (if (even_lh__d1 _lh_power_arg1_0) then
//│ 		        ((sqr_lh__d1 (((power_lh__d1 (_lh_power_arg1_0 / 2)) _lh_power_arg2_0) _lh_power_arg3_0)) mod _lh_power_arg2_0)
//│ 		      else
//│ 		        ((_lh_power_arg3_0 * (((power_lh__d1 (_lh_power_arg1_0 - 1)) _lh_power_arg2_0) _lh_power_arg3_0)) mod _lh_power_arg2_0)));;
//│ 		let rec map_lh__d1 f_3 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      (`LH_C((f_3 h_8), ((map_lh__d1 f_3) t_8)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec drop_lh__d1 _lh_drop_arg1_0 _lh_drop_arg2_0 =
//│ 		  (match _lh_drop_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0) -> 
//│ 		      (if (_lh_drop_arg1_0 > 0) then
//│ 		        ((drop_lh__d1 (_lh_drop_arg1_0 - 1)) _lh_drop_LH_C_1_0)
//│ 		      else
//│ 		        (`LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec take_lh__d1 n_0 ls_3 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match ls_3 with
//│ 		      | `LH_C(h_6, t_6) -> 
//│ 		        (`LH_C(h_6, ((take_lh__d1 (n_0 - 1)) t_6)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec collect_lh__d1 _lh_collect_arg1_0 _lh_collect_arg2_0 =
//│ 		  (match _lh_collect_arg1_0 with
//│ 		    | 0 -> 
//│ 		      (`LH_N)
//│ 		    | _ -> 
//│ 		      (match _lh_collect_arg2_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_N)
//│ 		        | _ -> 
//│ 		          (`LH_C(((take_lh__d1 _lh_collect_arg1_0) _lh_collect_arg2_0), ((collect_lh__d1 _lh_collect_arg1_0) ((drop_lh__d1 _lh_collect_arg1_0) _lh_collect_arg2_0))))));;
//│ 		let rec foldl_lh__d2 f_0 i_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (((foldl_lh__d2 f_0) ((f_0 i_0) h_1)) t_1)
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec code_lh__d1 _lh_code_arg1_0 =
//│ 		  (((foldl_lh__d2 (fun x_0 y_0 -> 
//│ 		    ((128 * x_0) + (int_of_char y_0)))) 0) _lh_code_arg1_0);;
//│ 		let rec length_lh__d1 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (1 + (length_lh__d1 t_2))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec size_lh__d1 _lh_size_arg1_0 =
//│ 		  (((length_lh__d1 (string_of_int _lh_size_arg1_0)) * 47) / 100);;
//│ 		let rec mappend_lh__d1 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      (`LH_C(h_3, ((mappend_lh__d1 t_3) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec map_lh__d2 f_1 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      (`LH_C((f_1 h_5), ((map_lh__d2 f_1) t_5)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh__d2 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C(h_0, ((mappend_lh__d2 t_0) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec concat_lh__d1 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      ((mappend_lh__d2 h_4) (concat_lh__d1 t_4))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec unlines_lh__d1 _lh_unlines_arg1_0 =
//│ 		  (concat_lh__d1 ((map_lh__d2 (fun l_0 -> 
//│ 		    ((mappend_lh__d1 l_0) (`LH_C('n', (`LH_N)))))) _lh_unlines_arg1_0));;
//│ 		let rec encrypt_lh__d1 _lh_encrypt_arg1_0 _lh_encrypt_arg2_0 _lh_funcomp_x_0 =
//│ 		  ((fun _lh_funcomp_x_1 -> 
//│ 		    (unlines_lh__d1 ((map_lh__d1 (fun _lh_funcomp_x_2 -> 
//│ 		      ((fun _lh_funcomp_x_3 -> 
//│ 		        (string_of_int (((power_lh__d1 _lh_encrypt_arg2_0) _lh_encrypt_arg1_0) _lh_funcomp_x_3))) (code_lh__d1 _lh_funcomp_x_2)))) _lh_funcomp_x_1))) ((collect_lh__d1 (size_lh__d1 _lh_encrypt_arg1_0)) _lh_funcomp_x_0));;
//│ 		let rec testRsa_nofib_lh__d1 _lh_testRsa_nofib_arg1_0 =
//│ 		  (hash_lh__d1 (((encrypt_lh__d1 6367) 5189) input_lh__d1));;
//│ 		(testRsa_nofib_lh__d1 0)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)]: 8 --->
//│ 	case ls⁴ of {LH_C h⁷ t⁷ => foldl_lh_₁(f², f²(i¹, h⁷), t⁷) | LH_N  => i¹}: 154
//│ [LH_C h³ mappend_lh_₁(t³, ys¹)]: 64 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)] | LH_N  => ys⁰}: 10
//│ [LH_N]: 77 --->
//│ 	case ls⁴ of {LH_C h⁷ t⁷ => foldl_lh_₁(f², f²(i¹, h⁷), t⁷) | LH_N  => i¹}: 154
//│ [LH_C f¹(h⁵) map_lh_₂(f¹, t⁵)]: 89 --->
//│ 	case lss⁰ of {LH_C h⁴ t⁴ => mappend_lh_₂(h⁴, concat_lh_₁(t⁴)) | LH_N  => [LH_N]}: 78
//│ [LH_N]: 90 --->
//│ 	case lss⁰ of {LH_C h⁴ t⁴ => mappend_lh_₂(h⁴, concat_lh_₁(t⁴)) | LH_N  => [LH_N]}: 78
//│ [LH_N]: 95 --->
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ > 0) then drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) else [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] | _  => error⁰}: 115
//│ 	case ls³ of {LH_C h⁶ t⁶ => [LH_C h⁶ take_lh_₁((n⁰ - 1), t⁶)] | LH_N  => [LH_N]}: 136
//│ 	case _lh_collect_arg2⁰ of {LH_N  => [LH_N] | _  => [LH_C take_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰) collect_lh_₁(_lh_collect_arg1⁰, drop_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰))]}: 286
//│ [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 112 --->
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ > 0) then drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) else [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] | _  => error⁰}: 115
//│ 	case ls³ of {LH_C h⁶ t⁶ => [LH_C h⁶ take_lh_₁((n⁰ - 1), t⁶)] | LH_N  => [LH_N]}: 136
//│ 	case _lh_collect_arg2⁰ of {LH_N  => [LH_N] | _  => [LH_C take_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰) collect_lh_₁(_lh_collect_arg1⁰, drop_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰))]}: 286
//│ [LH_C h⁶ take_lh_₁((n⁰ - 1), t⁶)]: 134 --->
//│ 	case ls⁰ of {LH_C h¹ t¹ => foldl_lh_₂(f⁰, f⁰(i⁰, h¹), t¹) | LH_N  => i⁰}: 26
//│ [LH_N]: 135 --->
//│ 	case ls⁰ of {LH_C h¹ t¹ => foldl_lh_₂(f⁰, f⁰(i⁰, h¹), t¹) | LH_N  => i⁰}: 26
//│ [LH_N]: 137 --->
//│ 	case ls⁰ of {LH_C h¹ t¹ => foldl_lh_₂(f⁰, f⁰(i⁰, h¹), t¹) | LH_N  => i⁰}: 26
//│ [LH_C f³(h⁸) map_lh_₁(f³, t⁸)]: 167 --->
//│ 	case ls² of {LH_C h⁵ t⁵ => [LH_C f¹(h⁵) map_lh_₂(f¹, t⁵)] | LH_N  => [LH_N]}: 91
//│ [LH_N]: 168 --->
//│ 	case ls² of {LH_C h⁵ t⁵ => [LH_C f¹(h⁵) map_lh_₂(f¹, t⁵)] | LH_N  => [LH_N]}: 91
//│ [LH_N]: 258 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)] | LH_N  => ys⁰}: 10
//│ [LH_C 'n' [LH_N]]: 259 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)] | LH_N  => ys⁰}: 10
//│ [LH_N]: 268 --->
//│ 	case ls⁵ of {LH_C h⁸ t⁸ => [LH_C f³(h⁸) map_lh_₁(f³, t⁸)] | LH_N  => [LH_N]}: 169
//│ [LH_N]: 270 --->
//│ 	case ls⁵ of {LH_C h⁸ t⁸ => [LH_C f³(h⁸) map_lh_₁(f³, t⁸)] | LH_N  => [LH_N]}: 169
//│ [LH_C take_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰) collect_lh_₁(_lh_collect_arg1⁰, drop_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰))]: 285 --->
//│ 	case ls⁵ of {LH_C h⁸ t⁸ => [LH_C f³(h⁸) map_lh_₁(f³, t⁸)] | LH_N  => [LH_N]}: 169
//│ ------------------
//│ case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)] | LH_N  => ys⁰}: 10 --->
//│ 	[LH_C h³ mappend_lh_₁(t³, ys¹)]: 64
//│ 	[LH_N]: 258
//│ 	[LH_C 'n' [LH_N]]: 259
//│ case ls⁰ of {LH_C h¹ t¹ => foldl_lh_₂(f⁰, f⁰(i⁰, h¹), t¹) | LH_N  => i⁰}: 26 --->
//│ 	[LH_C h⁶ take_lh_₁((n⁰ - 1), t⁶)]: 134
//│ 	[LH_N]: 135
//│ 	[LH_N]: 137
//│ case lss⁰ of {LH_C h⁴ t⁴ => mappend_lh_₂(h⁴, concat_lh_₁(t⁴)) | LH_N  => [LH_N]}: 78 --->
//│ 	[LH_C f¹(h⁵) map_lh_₂(f¹, t⁵)]: 89
//│ 	[LH_N]: 90
//│ case ls² of {LH_C h⁵ t⁵ => [LH_C f¹(h⁵) map_lh_₂(f¹, t⁵)] | LH_N  => [LH_N]}: 91 --->
//│ 	[LH_C f³(h⁸) map_lh_₁(f³, t⁸)]: 167
//│ 	[LH_N]: 168
//│ case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ > 0) then drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) else [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] | _  => error⁰}: 115 --->
//│ 	NoProd
//│ 	[LH_N]: 95
//│ 	[LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 112
//│ case ls³ of {LH_C h⁶ t⁶ => [LH_C h⁶ take_lh_₁((n⁰ - 1), t⁶)] | LH_N  => [LH_N]}: 136 --->
//│ 	NoProd
//│ 	[LH_N]: 95
//│ 	[LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 112
//│ case ls⁴ of {LH_C h⁷ t⁷ => foldl_lh_₁(f², f²(i¹, h⁷), t⁷) | LH_N  => i¹}: 154 --->
//│ 	[LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)]: 8
//│ 	[LH_N]: 77
//│ case ls⁵ of {LH_C h⁸ t⁸ => [LH_C f³(h⁸) map_lh_₁(f³, t⁸)] | LH_N  => [LH_N]}: 169 --->
//│ 	[LH_N]: 268
//│ 	[LH_N]: 270
//│ 	[LH_C take_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰) collect_lh_₁(_lh_collect_arg1⁰, drop_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰))]: 285
//│ case _lh_collect_arg2⁰ of {LH_N  => [LH_N] | _  => [LH_C take_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰) collect_lh_₁(_lh_collect_arg1⁰, drop_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰))]}: 286 --->
//│ 	NoProd
//│ 	[LH_N]: 95
//│ 	[LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 112
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)]: 8 --->
//│ 	case ls⁴ of {LH_C h⁷ t⁷ => foldl_lh_₁(f², f²(i¹, h⁷), t⁷) | LH_N  => i¹}: 154
//│ [LH_C h³ mappend_lh_₁(t³, ys¹)]: 64 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)] | LH_N  => ys⁰}: 10
//│ [LH_N]: 77 --->
//│ 	case ls⁴ of {LH_C h⁷ t⁷ => foldl_lh_₁(f², f²(i¹, h⁷), t⁷) | LH_N  => i¹}: 154
//│ [LH_C f¹(h⁵) map_lh_₂(f¹, t⁵)]: 89 --->
//│ 	case lss⁰ of {LH_C h⁴ t⁴ => mappend_lh_₂(h⁴, concat_lh_₁(t⁴)) | LH_N  => [LH_N]}: 78
//│ [LH_N]: 90 --->
//│ 	case lss⁰ of {LH_C h⁴ t⁴ => mappend_lh_₂(h⁴, concat_lh_₁(t⁴)) | LH_N  => [LH_N]}: 78
//│ [LH_C h⁶ take_lh_₁((n⁰ - 1), t⁶)]: 134 --->
//│ 	case ls⁰ of {LH_C h¹ t¹ => foldl_lh_₂(f⁰, f⁰(i⁰, h¹), t¹) | LH_N  => i⁰}: 26
//│ [LH_N]: 135 --->
//│ 	case ls⁰ of {LH_C h¹ t¹ => foldl_lh_₂(f⁰, f⁰(i⁰, h¹), t¹) | LH_N  => i⁰}: 26
//│ [LH_N]: 137 --->
//│ 	case ls⁰ of {LH_C h¹ t¹ => foldl_lh_₂(f⁰, f⁰(i⁰, h¹), t¹) | LH_N  => i⁰}: 26
//│ [LH_C f³(h⁸) map_lh_₁(f³, t⁸)]: 167 --->
//│ 	case ls² of {LH_C h⁵ t⁵ => [LH_C f¹(h⁵) map_lh_₂(f¹, t⁵)] | LH_N  => [LH_N]}: 91
//│ [LH_N]: 168 --->
//│ 	case ls² of {LH_C h⁵ t⁵ => [LH_C f¹(h⁵) map_lh_₂(f¹, t⁵)] | LH_N  => [LH_N]}: 91
//│ [LH_N]: 258 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)] | LH_N  => ys⁰}: 10
//│ [LH_C 'n' [LH_N]]: 259 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)] | LH_N  => ys⁰}: 10
//│ [LH_N]: 268 --->
//│ 	case ls⁵ of {LH_C h⁸ t⁸ => [LH_C f³(h⁸) map_lh_₁(f³, t⁸)] | LH_N  => [LH_N]}: 169
//│ [LH_N]: 270 --->
//│ 	case ls⁵ of {LH_C h⁸ t⁸ => [LH_C f³(h⁸) map_lh_₁(f³, t⁸)] | LH_N  => [LH_N]}: 169
//│ [LH_C take_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰) collect_lh_₁(_lh_collect_arg1⁰, drop_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰))]: 285 --->
//│ 	case ls⁵ of {LH_C h⁸ t⁸ => [LH_C f³(h⁸) map_lh_₁(f³, t⁸)] | LH_N  => [LH_N]}: 169
//│ ------------------
//│ case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)] | LH_N  => ys⁰}: 10 --->
//│ 	[LH_C h³ mappend_lh_₁(t³, ys¹)]: 64
//│ 	[LH_N]: 258
//│ 	[LH_C 'n' [LH_N]]: 259
//│ case ls⁰ of {LH_C h¹ t¹ => foldl_lh_₂(f⁰, f⁰(i⁰, h¹), t¹) | LH_N  => i⁰}: 26 --->
//│ 	[LH_C h⁶ take_lh_₁((n⁰ - 1), t⁶)]: 134
//│ 	[LH_N]: 135
//│ 	[LH_N]: 137
//│ case lss⁰ of {LH_C h⁴ t⁴ => mappend_lh_₂(h⁴, concat_lh_₁(t⁴)) | LH_N  => [LH_N]}: 78 --->
//│ 	[LH_C f¹(h⁵) map_lh_₂(f¹, t⁵)]: 89
//│ 	[LH_N]: 90
//│ case ls² of {LH_C h⁵ t⁵ => [LH_C f¹(h⁵) map_lh_₂(f¹, t⁵)] | LH_N  => [LH_N]}: 91 --->
//│ 	[LH_C f³(h⁸) map_lh_₁(f³, t⁸)]: 167
//│ 	[LH_N]: 168
//│ case ls⁴ of {LH_C h⁷ t⁷ => foldl_lh_₁(f², f²(i¹, h⁷), t⁷) | LH_N  => i¹}: 154 --->
//│ 	[LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)]: 8
//│ 	[LH_N]: 77
//│ case ls⁵ of {LH_C h⁸ t⁸ => [LH_C f³(h⁸) map_lh_₁(f³, t⁸)] | LH_N  => [LH_N]}: 169 --->
//│ 	[LH_N]: 268
//│ 	[LH_N]: 270
//│ 	[LH_C take_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰) collect_lh_₁(_lh_collect_arg1⁰, drop_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰))]: 285
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testRsa_nofib_lh_₁(primId⁰(0))
//│ def code_lh_₁(_lh_code_arg1¹) = foldl_lh_₂((fun x¹ -> (fun y¹ -> ((128 * x¹) + int_of_char⁰(y¹)))), 0, _lh_code_arg1¹)
//│ def collect_lh_₁(_lh_collect_arg1¹, _lh_collect_arg2¹) = case _lh_collect_arg1¹ of {
//│ 	0  => (fun f⁷ -> (fun f⁸ -> (fun _lh_dummy⁰ -> (fun f⁹ -> (fun i⁴ -> i⁴)))))
//│ 	| _  => case _lh_collect_arg2¹ of {
//│ 		LH_N  => (fun f¹⁰ -> (fun f¹¹ -> (fun _lh_dummy¹ -> (fun f¹² -> (fun i⁵ -> i⁵)))))
//│ 		| _  => 
//│ 			let t⁹ = collect_lh_₁(_lh_collect_arg1¹, drop_lh_₁(_lh_collect_arg1¹, _lh_collect_arg2¹))
//│ 			in let h⁹ = take_lh_₁(_lh_collect_arg1¹, _lh_collect_arg2¹)
//│ 			in (fun f¹³ -> 
//│ 				let t¹⁰ = map_lh_₁(f¹³, t⁹)
//│ 				in let h¹⁰ = f¹³(h⁹)
//│ 				in (fun f¹⁴ -> 
//│ 					let t¹¹ = map_lh_₂(f¹⁴, t¹⁰)
//│ 					in let h¹¹ = f¹⁴(h¹⁰)
//│ 					in (fun _lh_dummy² -> mappend_lh_₂(h¹¹, concat_lh_₁(t¹¹)))))}}
//│ def concat_lh_₁(lss¹) = lss¹(99)
//│ def drop_lh_₁(_lh_drop_arg1¹, _lh_drop_arg2¹) = case _lh_drop_arg2¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1¹ > 0) then drop_lh_₁((_lh_drop_arg1¹ - 1), _lh_drop_LH_C_1⁰) else [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]
//│ 	| _  => error⁰}
//│ def encrypt_lh_₁(_lh_encrypt_arg1¹, _lh_encrypt_arg2¹, _lh_funcomp_x⁴) = (fun _lh_funcomp_x⁵ -> unlines_lh_₁(map_lh_₁((fun _lh_funcomp_x⁶ -> (fun _lh_funcomp_x⁷ -> string_of_int⁰(power_lh_₁(_lh_encrypt_arg2¹, _lh_encrypt_arg1¹, _lh_funcomp_x⁷)))(code_lh_₁(_lh_funcomp_x⁶))), _lh_funcomp_x⁵)))(collect_lh_₁(size_lh_₁(_lh_encrypt_arg1¹), _lh_funcomp_x⁴))
//│ def even_lh_₁(_lh_even_arg1¹) = ((_lh_even_arg1¹ % 2) == 0)
//│ def foldl_lh_₁(f⁵, i³, ls⁷) = ls⁷(f⁵, i³)
//│ def foldl_lh_₂(f⁴, i², ls⁶) = ls⁶(f⁴, i²)
//│ def hash_lh_₁(_lh_hash_arg1¹) = foldl_lh_₁((fun acc¹ -> (fun c¹ -> ((int_of_char⁰(c¹) + acc¹) * 31))), 0, _lh_hash_arg1¹)
//│ def input_lh_₁ = primId⁰([LH_C 'm' [LH_C 'o' [LH_C 'd' [LH_C 'u' [LH_C 'l' [LH_C 'e' [LH_C ' ' [LH_C 'R' [LH_C 's' [LH_C 'a' [LH_C ' ' [LH_C '(' [LH_C 'e' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'k' [LH_C 'e' [LH_C 'K' [LH_C 'e' [LH_C 'y' [LH_C 's' [LH_C ')' [LH_C 'w' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ' ' [LH_C ':' [LH_C ':' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C 'e' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C 'e' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'u' [LH_C 'n' [LH_C 'l' [LH_C 'i' [LH_C 'n' [LH_C 'e' [LH_C 's' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C '(' [LH_C 's' [LH_C 'h' [LH_C 'o' [LH_C 'w' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'e' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C ')' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'l' [LH_C 'l' [LH_C 'e' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C '(' [LH_C 's' [LH_C 'i' [LH_C 'z' [LH_C 'e' [LH_C ' ' [LH_C 'n' [LH_C ')' [LH_C 'd' [LH_C 'e' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C '(' [LH_C 'd' [LH_C 'e' [LH_C 'c' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'd' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 'd' [LH_C ')' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'l' [LH_C 'i' [LH_C 'n' [LH_C 'e' [LH_C 's' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C ' ' [LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C 's' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_C ' ' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C 'c' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C ' ' [LH_C ':' [LH_C ':' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'e' [LH_C 'r' [LH_C 'c' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'l' [LH_C 'd' [LH_C 'l' [LH_C ' ' [LH_C 'a' [LH_C 'c' [LH_C 'c' [LH_C 'u' [LH_C 'm' [LH_C ' ' [LH_C '0' [LH_C 'w' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'c' [LH_C 'c' [LH_C 'u' [LH_C 'm' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C 'y' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C '(' [LH_C '1' [LH_C '2' [LH_C '8' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ')' [LH_C ' ' [LH_C '+' [LH_C ' ' [LH_C 'f' [LH_C 'r' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C '(' [LH_C 'f' [LH_C 'r' [LH_C 'o' [LH_C 'm' [LH_C 'E' [LH_C 'n' [LH_C 'u' [LH_C 'm' [LH_C ' ' [LH_C 'y' [LH_C ')' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ def length_lh_₁(ls¹¹) = case ls¹¹ of {
//│ 	LH_C h² t² => (1 + length_lh_₁(t²))
//│ 	| LH_N  => 0}
//│ def map_lh_₁(f⁶, ls⁸) = ls⁸(f⁶)
//│ def map_lh_₂(f¹⁹, ls¹⁰) = ls¹⁰(f¹⁹)
//│ def mappend_lh_₁(xs², ys²) = case xs² of {
//│ 	LH_C h³ t³ => 
//│ 		let t¹² = mappend_lh_₁(t³, ys²)
//│ 		in let h¹² = h³
//│ 		in (fun ys³ -> 
//│ 			let t¹³ = mappend_lh_₂(t¹², ys³)
//│ 			in let h¹³ = h¹²
//│ 			in (fun f¹⁵ -> (fun i⁶ -> foldl_lh_₁(f¹⁵, f¹⁵(i⁶, h¹³), t¹³))))
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₂(xs³, ys⁴) = xs³(ys⁴)
//│ def power_lh_₁(_lh_power_arg1¹, _lh_power_arg2¹, _lh_power_arg3¹) = case _lh_power_arg1¹ of {
//│ 	0  => 1
//│ 	| _  => if even_lh_₁(_lh_power_arg1¹) then (sqr_lh_₁(power_lh_₁(div⁰(_lh_power_arg1¹, 2), _lh_power_arg2¹, _lh_power_arg3¹)) % _lh_power_arg2¹) else ((_lh_power_arg3¹ * power_lh_₁((_lh_power_arg1¹ - 1), _lh_power_arg2¹, _lh_power_arg3¹)) % _lh_power_arg2¹)}
//│ def size_lh_₁(_lh_size_arg1¹) = div⁰((length_lh_₁(string_of_int⁰(_lh_size_arg1¹)) * 47), 100)
//│ def sqr_lh_₁(_lh_sqr_arg1¹) = (_lh_sqr_arg1¹ * _lh_sqr_arg1¹)
//│ def take_lh_₁(n¹, ls⁹) = if (n¹ > 0) then case ls⁹ of {
//│ 	LH_C h⁶ t⁶ => 
//│ 		let t¹⁴ = take_lh_₁((n¹ - 1), t⁶)
//│ 		in let h¹⁴ = h⁶
//│ 		in (fun f¹⁶ -> (fun i⁷ -> foldl_lh_₂(f¹⁶, f¹⁶(i⁷, h¹⁴), t¹⁴)))
//│ 	| LH_N  => (fun f¹⁷ -> (fun i⁸ -> i⁸))} else (fun f¹⁸ -> (fun i⁹ -> i⁹))
//│ def testRsa_nofib_lh_₁(_lh_testRsa_nofib_arg1¹) = hash_lh_₁(encrypt_lh_₁(6367, 5189, input_lh_₁))
//│ def unlines_lh_₁(_lh_unlines_arg1¹) = concat_lh_₁(map_lh_₂((fun l¹ -> mappend_lh_₁(l¹, 
//│ 	let t¹⁵ = (fun ys⁶ -> ys⁶)
//│ 	in let h¹⁵ = 'n'
//│ 	in (fun ys⁵ -> 
//│ 		let t¹⁶ = mappend_lh_₂(t¹⁵, ys⁵)
//│ 		in let h¹⁶ = h¹⁵
//│ 		in (fun f²⁰ -> (fun i¹⁰ -> foldl_lh_₁(f²⁰, f²⁰(i¹⁰, h¹⁶), t¹⁶)))))), _lh_unlines_arg1¹))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ concat_lh_₁, foldl_lh_₂, map_lh_₂, foldl_lh_₁, map_lh_₁, mappend_lh_₂
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ collect_lh_₁ -> 2
//│ mappend_lh_₁ -> 2
//│ take_lh_₁ -> 2
//│ unlines_lh_₁ -> 1
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ testRsa_nofib_lh_₁(primId⁰(0))
//│ def code_lh_₁(_lh_code_arg1⁰) = _lh_code_arg1⁰((fun x⁰ -> (fun y⁰ -> ((128 * x⁰) + int_of_char⁰(y⁰)))), 0)
//│ def collect_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰) = case _lh_collect_arg1⁰ of {
//│ 	0  => (fun f³ -> (fun f⁴ -> (fun _lh_dummy⁰ -> (fun f⁵ -> (fun i² -> i²)))))
//│ 	| _  => case _lh_collect_arg2⁰ of {
//│ 		LH_N  => (fun f⁶ -> (fun f⁷ -> (fun _lh_dummy¹ -> (fun f⁸ -> (fun i³ -> i³)))))
//│ 		| _  => 
//│ 			let t⁰ = collect_lh_₁(_lh_collect_arg1⁰, drop_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰))
//│ 			in let h⁰ = take_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰)
//│ 			in (fun f⁹ -> 
//│ 				let t¹ = t⁰(f⁹)
//│ 				in let h¹ = f⁹(h⁰)
//│ 				in (fun f¹⁰ -> 
//│ 					let t² = t¹(f¹⁰)
//│ 					in let h² = f¹⁰(h¹)
//│ 					in (fun _lh_dummy² -> h²(t²(99)))))}}
//│ def concat_lh_₁(lss⁰) = lss⁰(99)
//│ def drop_lh_₁(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ > 0) then drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) else [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]
//│ 	| _  => error⁰}
//│ def encrypt_lh_₁(_lh_encrypt_arg1⁰, _lh_encrypt_arg2⁰, _lh_funcomp_x⁰) = (fun _lh_funcomp_x¹ -> unlines_lh_₁(_lh_funcomp_x¹((fun _lh_funcomp_x² -> (fun _lh_funcomp_x³ -> string_of_int⁰(power_lh_₁(_lh_encrypt_arg2⁰, _lh_encrypt_arg1⁰, _lh_funcomp_x³)))(code_lh_₁(_lh_funcomp_x²))))))(collect_lh_₁(size_lh_₁(_lh_encrypt_arg1⁰), _lh_funcomp_x⁰))
//│ def even_lh_₁(_lh_even_arg1⁰) = ((_lh_even_arg1⁰ % 2) == 0)
//│ def foldl_lh_₁(f¹, i¹, ls¹) = ls¹(f¹, i¹)
//│ def foldl_lh_₂(f⁰, i⁰, ls⁰) = ls⁰(f⁰, i⁰)
//│ def hash_lh_₁(_lh_hash_arg1⁰) = _lh_hash_arg1⁰((fun acc⁰ -> (fun c⁰ -> ((int_of_char⁰(c⁰) + acc⁰) * 31))), 0)
//│ def input_lh_₁ = primId⁰([LH_C 'm' [LH_C 'o' [LH_C 'd' [LH_C 'u' [LH_C 'l' [LH_C 'e' [LH_C ' ' [LH_C 'R' [LH_C 's' [LH_C 'a' [LH_C ' ' [LH_C '(' [LH_C 'e' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'k' [LH_C 'e' [LH_C 'K' [LH_C 'e' [LH_C 'y' [LH_C 's' [LH_C ')' [LH_C 'w' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ' ' [LH_C ':' [LH_C ':' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C 'e' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C 'e' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'u' [LH_C 'n' [LH_C 'l' [LH_C 'i' [LH_C 'n' [LH_C 'e' [LH_C 's' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C '(' [LH_C 's' [LH_C 'h' [LH_C 'o' [LH_C 'w' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'e' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C ')' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'l' [LH_C 'l' [LH_C 'e' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C '(' [LH_C 's' [LH_C 'i' [LH_C 'z' [LH_C 'e' [LH_C ' ' [LH_C 'n' [LH_C ')' [LH_C 'd' [LH_C 'e' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C '(' [LH_C 'd' [LH_C 'e' [LH_C 'c' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'd' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 'd' [LH_C ')' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'l' [LH_C 'i' [LH_C 'n' [LH_C 'e' [LH_C 's' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C ' ' [LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C 's' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_C ' ' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C 'c' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C ' ' [LH_C ':' [LH_C ':' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'e' [LH_C 'r' [LH_C 'c' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'l' [LH_C 'd' [LH_C 'l' [LH_C ' ' [LH_C 'a' [LH_C 'c' [LH_C 'c' [LH_C 'u' [LH_C 'm' [LH_C ' ' [LH_C '0' [LH_C 'w' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'c' [LH_C 'c' [LH_C 'u' [LH_C 'm' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C 'y' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C '(' [LH_C '1' [LH_C '2' [LH_C '8' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ')' [LH_C ' ' [LH_C '+' [LH_C ' ' [LH_C 'f' [LH_C 'r' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C '(' [LH_C 'f' [LH_C 'r' [LH_C 'o' [LH_C 'm' [LH_C 'E' [LH_C 'n' [LH_C 'u' [LH_C 'm' [LH_C ' ' [LH_C 'y' [LH_C ')' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ def length_lh_₁(ls⁵) = case ls⁵ of {
//│ 	LH_C h⁸ t⁸ => (1 + length_lh_₁(t⁸))
//│ 	| LH_N  => 0}
//│ def map_lh_₁(f², ls²) = ls²(f²)
//│ def map_lh_₂(f¹⁵, ls⁴) = ls⁴(f¹⁵)
//│ def mappend_lh_₁(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h³ t³ => 
//│ 		let t⁴ = mappend_lh_₁(t³, ys⁰)
//│ 		in let h⁴ = h³
//│ 		in (fun ys¹ -> 
//│ 			let t⁵ = t⁴(ys¹)
//│ 			in let h⁵ = h⁴
//│ 			in (fun f¹¹ -> (fun i⁴ -> t⁵(f¹¹, f¹¹(i⁴, h⁵)))))
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₂(xs¹, ys²) = xs¹(ys²)
//│ def power_lh_₁(_lh_power_arg1⁰, _lh_power_arg2⁰, _lh_power_arg3⁰) = case _lh_power_arg1⁰ of {
//│ 	0  => 1
//│ 	| _  => if even_lh_₁(_lh_power_arg1⁰) then (sqr_lh_₁(power_lh_₁(div⁰(_lh_power_arg1⁰, 2), _lh_power_arg2⁰, _lh_power_arg3⁰)) % _lh_power_arg2⁰) else ((_lh_power_arg3⁰ * power_lh_₁((_lh_power_arg1⁰ - 1), _lh_power_arg2⁰, _lh_power_arg3⁰)) % _lh_power_arg2⁰)}
//│ def size_lh_₁(_lh_size_arg1⁰) = div⁰((length_lh_₁(string_of_int⁰(_lh_size_arg1⁰)) * 47), 100)
//│ def sqr_lh_₁(_lh_sqr_arg1⁰) = (_lh_sqr_arg1⁰ * _lh_sqr_arg1⁰)
//│ def take_lh_₁(n⁰, ls³) = if (n⁰ > 0) then case ls³ of {
//│ 	LH_C h⁶ t⁶ => 
//│ 		let t⁷ = take_lh_₁((n⁰ - 1), t⁶)
//│ 		in let h⁷ = h⁶
//│ 		in (fun f¹² -> (fun i⁵ -> t⁷(f¹², f¹²(i⁵, h⁷))))
//│ 	| LH_N  => (fun f¹³ -> (fun i⁶ -> i⁶))} else (fun f¹⁴ -> (fun i⁷ -> i⁷))
//│ def testRsa_nofib_lh_₁(_lh_testRsa_nofib_arg1⁰) = hash_lh_₁(encrypt_lh_₁(6367, 5189, input_lh_₁))
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = _lh_unlines_arg1⁰((fun l⁰ -> mappend_lh_₁(l⁰, 
//│ 	let t⁹ = (fun ys³ -> ys³)
//│ 	in let h⁹ = 'n'
//│ 	in (fun ys⁴ -> 
//│ 		let t¹⁰ = t⁹(ys⁴)
//│ 		in let h¹⁰ = h⁹
//│ 		in (fun f¹⁶ -> (fun i⁸ -> t¹⁰(f¹⁶, f¹⁶(i⁸, h¹⁰))))))), 99)
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ testRsa_nofib_lh_₁(primId⁰(0))
//│ def code_lh_₁(_lh_code_arg1⁰) = _lh_code_arg1⁰((fun x⁰ -> (fun y⁰ -> ((128 * x⁰) + int_of_char⁰(y⁰)))), 0)
//│ def collect_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰) = case _lh_collect_arg1⁰ of {
//│ 	0  => (fun f³ -> (fun f⁴ -> (fun _lh_dummy⁰ -> (fun f⁵ -> (fun i² -> i²)))))
//│ 	| _  => case _lh_collect_arg2⁰ of {
//│ 		LH_N  => (fun f⁶ -> (fun f⁷ -> (fun _lh_dummy¹ -> (fun f⁸ -> (fun i³ -> i³)))))
//│ 		| _  => 
//│ 			let t⁰ = collect_lh_₁(_lh_collect_arg1⁰, drop_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰))
//│ 			in let h⁰ = take_lh_₁(_lh_collect_arg1⁰, _lh_collect_arg2⁰)
//│ 			in (fun f⁹ -> 
//│ 				let t¹ = t⁰(f⁹)
//│ 				in let h¹ = f⁹(h⁰)
//│ 				in (fun f¹⁰ -> 
//│ 					let t² = t¹(f¹⁰)
//│ 					in let h² = f¹⁰(h¹)
//│ 					in (fun _lh_dummy² -> h²(t²(99)))))}}
//│ def concat_lh_₁(lss⁰) = lss⁰(99)
//│ def drop_lh_₁(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ > 0) then drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) else [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]
//│ 	| _  => error⁰}
//│ def encrypt_lh_₁(_lh_encrypt_arg1⁰, _lh_encrypt_arg2⁰, _lh_funcomp_x⁰) = (fun _lh_funcomp_x¹ -> unlines_lh_₁(_lh_funcomp_x¹((fun _lh_funcomp_x² -> (fun _lh_funcomp_x³ -> string_of_int⁰(power_lh_₁(_lh_encrypt_arg2⁰, _lh_encrypt_arg1⁰, _lh_funcomp_x³)))(code_lh_₁(_lh_funcomp_x²))))))(collect_lh_₁(size_lh_₁(_lh_encrypt_arg1⁰), _lh_funcomp_x⁰))
//│ def even_lh_₁(_lh_even_arg1⁰) = ((_lh_even_arg1⁰ % 2) == 0)
//│ def foldl_lh_₁(f¹, i¹, ls¹) = ls¹(f¹, i¹)
//│ def foldl_lh_₂(f⁰, i⁰, ls⁰) = ls⁰(f⁰, i⁰)
//│ def hash_lh_₁(_lh_hash_arg1⁰) = _lh_hash_arg1⁰((fun acc⁰ -> (fun c⁰ -> ((int_of_char⁰(c⁰) + acc⁰) * 31))), 0)
//│ def input_lh_₁ = primId⁰([LH_C 'm' [LH_C 'o' [LH_C 'd' [LH_C 'u' [LH_C 'l' [LH_C 'e' [LH_C ' ' [LH_C 'R' [LH_C 's' [LH_C 'a' [LH_C ' ' [LH_C '(' [LH_C 'e' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'k' [LH_C 'e' [LH_C 'K' [LH_C 'e' [LH_C 'y' [LH_C 's' [LH_C ')' [LH_C 'w' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ' ' [LH_C ':' [LH_C ':' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C 'e' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C 'e' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'u' [LH_C 'n' [LH_C 'l' [LH_C 'i' [LH_C 'n' [LH_C 'e' [LH_C 's' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C '(' [LH_C 's' [LH_C 'h' [LH_C 'o' [LH_C 'w' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'e' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C ')' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'l' [LH_C 'l' [LH_C 'e' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C '(' [LH_C 's' [LH_C 'i' [LH_C 'z' [LH_C 'e' [LH_C ' ' [LH_C 'n' [LH_C ')' [LH_C 'd' [LH_C 'e' [LH_C 'c' [LH_C 'r' [LH_C 'y' [LH_C 'p' [LH_C 't' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C '(' [LH_C 'd' [LH_C 'e' [LH_C 'c' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'd' [LH_C ' ' [LH_C 'n' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 'd' [LH_C ')' [LH_C ' ' [LH_C '.' [LH_C ' ' [LH_C 'l' [LH_C 'i' [LH_C 'n' [LH_C 'e' [LH_C 's' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C ' ' [LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C 's' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'e' [LH_C 'r' [LH_C 's' [LH_C ' ' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C '-' [LH_C 'c' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C ' ' [LH_C ':' [LH_C ':' [LH_C ' ' [LH_C 'S' [LH_C 't' [LH_C 'r' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C '-' [LH_C '>' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'e' [LH_C 'r' [LH_C 'c' [LH_C 'o' [LH_C 'd' [LH_C 'e' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'l' [LH_C 'd' [LH_C 'l' [LH_C ' ' [LH_C 'a' [LH_C 'c' [LH_C 'c' [LH_C 'u' [LH_C 'm' [LH_C ' ' [LH_C '0' [LH_C 'w' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'c' [LH_C 'c' [LH_C 'u' [LH_C 'm' [LH_C ' ' [LH_C 'x' [LH_C ' ' [LH_C 'y' [LH_C ' ' [LH_C '=' [LH_C ' ' [LH_C '(' [LH_C '1' [LH_C '2' [LH_C '8' [LH_C ' ' [LH_C '*' [LH_C ' ' [LH_C 'x' [LH_C ')' [LH_C ' ' [LH_C '+' [LH_C ' ' [LH_C 'f' [LH_C 'r' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C '(' [LH_C 'f' [LH_C 'r' [LH_C 'o' [LH_C 'm' [LH_C 'E' [LH_C 'n' [LH_C 'u' [LH_C 'm' [LH_C ' ' [LH_C 'y' [LH_C ')' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ def length_lh_₁(ls⁵) = case ls⁵ of {
//│ 	LH_C h⁸ t⁸ => (1 + length_lh_₁(t⁸))
//│ 	| LH_N  => 0}
//│ def map_lh_₁(f², ls²) = ls²(f²)
//│ def map_lh_₂(f¹⁵, ls⁴) = ls⁴(f¹⁵)
//│ def mappend_lh_₁(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h³ t³ => 
//│ 		let t⁴ = mappend_lh_₁(t³, ys⁰)
//│ 		in let h⁴ = h³
//│ 		in (fun ys¹ -> 
//│ 			let t⁵ = t⁴(ys¹)
//│ 			in let h⁵ = h⁴
//│ 			in (fun f¹¹ -> (fun i⁴ -> t⁵(f¹¹, f¹¹(i⁴, h⁵)))))
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₂(xs¹, ys²) = xs¹(ys²)
//│ def power_lh_₁(_lh_power_arg1⁰, _lh_power_arg2⁰, _lh_power_arg3⁰) = case _lh_power_arg1⁰ of {
//│ 	0  => 1
//│ 	| _  => if even_lh_₁(_lh_power_arg1⁰) then (sqr_lh_₁(power_lh_₁(div⁰(_lh_power_arg1⁰, 2), _lh_power_arg2⁰, _lh_power_arg3⁰)) % _lh_power_arg2⁰) else ((_lh_power_arg3⁰ * power_lh_₁((_lh_power_arg1⁰ - 1), _lh_power_arg2⁰, _lh_power_arg3⁰)) % _lh_power_arg2⁰)}
//│ def size_lh_₁(_lh_size_arg1⁰) = div⁰((length_lh_₁(string_of_int⁰(_lh_size_arg1⁰)) * 47), 100)
//│ def sqr_lh_₁(_lh_sqr_arg1⁰) = (_lh_sqr_arg1⁰ * _lh_sqr_arg1⁰)
//│ def take_lh_₁(n⁰, ls³) = if (n⁰ > 0) then case ls³ of {
//│ 	LH_C h⁶ t⁶ => 
//│ 		let t⁷ = take_lh_₁((n⁰ - 1), t⁶)
//│ 		in let h⁷ = h⁶
//│ 		in (fun f¹² -> (fun i⁵ -> t⁷(f¹², f¹²(i⁵, h⁷))))
//│ 	| LH_N  => (fun f¹³ -> (fun i⁶ -> i⁶))} else (fun f¹⁴ -> (fun i⁷ -> i⁷))
//│ def testRsa_nofib_lh_₁(_lh_testRsa_nofib_arg1⁰) = hash_lh_₁(encrypt_lh_₁(6367, 5189, input_lh_₁))
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = _lh_unlines_arg1⁰((fun l⁰ -> mappend_lh_₁(l⁰, 
//│ 	let t⁹ = (fun ys³ -> ys³)
//│ 	in let h⁹ = 'n'
//│ 	in (fun ys⁴ -> 
//│ 		let t¹⁰ = t⁹(ys⁴)
//│ 		in let h¹⁰ = h⁹
//│ 		in (fun f¹⁶ -> (fun i⁸ -> t¹⁰(f¹⁶, f¹⁶(i⁸, h¹⁰))))))), 99)
//│ <<<<<<< after floating out <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<





