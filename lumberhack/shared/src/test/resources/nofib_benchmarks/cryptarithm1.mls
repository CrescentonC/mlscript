

:lhInHaskell
:lhGenOCaml
condition [t,h,i,r,y,w,e,l,v,n] =
  ((expand t h i r t y) + (5 * (expand t w e l v e))) == (expand n i n e t y)
expand a b c d e f = f + (e*10) + (d*100) + (c*1000) + (b*10000) + (a*100000)
addj j []     = [[j]]
addj j (k:ks) = (j:(k:ks)) : [(k:aks) | aks <- (addj j ks)]
permutations []     = [[]]
permutations (j:js) = [r | pjs <- permutations js, r <- (addj j pjs)]
testCryptarithm_nofib n = map (\i -> let p0 = (take 10 [0..9+i]) in (filter condition $ permutations p0)) [1..n]
testCryptarithm_nofib $ primId 1
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> after expansion >>>>>>>>>>
//│ testCryptarithm_nofib_lh_₁^425(primId⁰(1))
//│ def addj_lh_₁(_lh_addj_arg1⁰, _lh_addj_arg2⁰) = case _lh_addj_arg2⁰ of {
//│ 	LH_N  => [LH_C [LH_C _lh_addj_arg1⁰ [LH_N]] [LH_N]]
//│ 	| LH_C _lh_addj_LH_C_0⁰ _lh_addj_LH_C_1⁰ => [LH_C [LH_C _lh_addj_arg1⁰ [LH_C _lh_addj_LH_C_0⁰ _lh_addj_LH_C_1⁰]] 
//│ 		let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C [LH_C _lh_addj_LH_C_0⁰ _lh_listcomp_fun_ls_h⁰] _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁰(addj_lh_₁^165(_lh_addj_arg1⁰, _lh_addj_LH_C_1⁰))]
//│ 	| _  => error⁰}
//│ def condition_lh_₁(_lh_condition_arg1⁰) = case _lh_condition_arg1⁰ of {
//│ 	LH_C _lh_condition_LH_C_0⁰ _lh_condition_LH_C_1⁰ => case _lh_condition_LH_C_1⁰ of {
//│ 		LH_C _lh_condition_LH_C_0¹ _lh_condition_LH_C_1¹ => case _lh_condition_LH_C_1¹ of {
//│ 			LH_C _lh_condition_LH_C_0² _lh_condition_LH_C_1² => case _lh_condition_LH_C_1² of {
//│ 				LH_C _lh_condition_LH_C_0³ _lh_condition_LH_C_1³ => case _lh_condition_LH_C_1³ of {
//│ 					LH_C _lh_condition_LH_C_0⁴ _lh_condition_LH_C_1⁴ => case _lh_condition_LH_C_1⁴ of {
//│ 						LH_C _lh_condition_LH_C_0⁵ _lh_condition_LH_C_1⁵ => case _lh_condition_LH_C_1⁵ of {
//│ 							LH_C _lh_condition_LH_C_0⁶ _lh_condition_LH_C_1⁶ => case _lh_condition_LH_C_1⁶ of {
//│ 								LH_C _lh_condition_LH_C_0⁷ _lh_condition_LH_C_1⁷ => case _lh_condition_LH_C_1⁷ of {
//│ 									LH_C _lh_condition_LH_C_0⁸ _lh_condition_LH_C_1⁸ => case _lh_condition_LH_C_1⁸ of {
//│ 										LH_C _lh_condition_LH_C_0⁹ _lh_condition_LH_C_1⁹ => case _lh_condition_LH_C_1⁹ of {
//│ 											LH_N  => ((expand_lh_₃^234(_lh_condition_LH_C_0⁰, _lh_condition_LH_C_0¹, _lh_condition_LH_C_0², _lh_condition_LH_C_0³, _lh_condition_LH_C_0⁰, _lh_condition_LH_C_0⁴) + (5 * expand_lh_₁^251(_lh_condition_LH_C_0⁰, _lh_condition_LH_C_0⁵, _lh_condition_LH_C_0⁶, _lh_condition_LH_C_0⁷, _lh_condition_LH_C_0⁸, _lh_condition_LH_C_0⁶))) == expand_lh_₂^267(_lh_condition_LH_C_0⁹, _lh_condition_LH_C_0², _lh_condition_LH_C_0⁹, _lh_condition_LH_C_0⁶, _lh_condition_LH_C_0⁰, _lh_condition_LH_C_0⁴))
//│ 											| _  => error⁰}
//│ 										| _  => error⁰}
//│ 									| _  => error⁰}
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def enumFromTo_lh_₁(a¹, b¹) = if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh_₁^366((a¹ + 1), b¹)] else [LH_N]
//│ def enumFromTo_lh_₂(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh_₂^346((a⁰ + 1), b⁰)] else [LH_N]
//│ def expand_lh_₁(_lh_expand_arg1², _lh_expand_arg2², _lh_expand_arg3², _lh_expand_arg4², _lh_expand_arg5², _lh_expand_arg6²) = (((((_lh_expand_arg6² + (_lh_expand_arg5² * 10)) + (_lh_expand_arg4² * 100)) + (_lh_expand_arg3² * 1000)) + (_lh_expand_arg2² * 10000)) + (_lh_expand_arg1² * 100000))
//│ def expand_lh_₂(_lh_expand_arg1¹, _lh_expand_arg2¹, _lh_expand_arg3¹, _lh_expand_arg4¹, _lh_expand_arg5¹, _lh_expand_arg6¹) = (((((_lh_expand_arg6¹ + (_lh_expand_arg5¹ * 10)) + (_lh_expand_arg4¹ * 100)) + (_lh_expand_arg3¹ * 1000)) + (_lh_expand_arg2¹ * 10000)) + (_lh_expand_arg1¹ * 100000))
//│ def expand_lh_₃(_lh_expand_arg1⁰, _lh_expand_arg2⁰, _lh_expand_arg3⁰, _lh_expand_arg4⁰, _lh_expand_arg5⁰, _lh_expand_arg6⁰) = (((((_lh_expand_arg6⁰ + (_lh_expand_arg5⁰ * 10)) + (_lh_expand_arg4⁰ * 100)) + (_lh_expand_arg3⁰ * 1000)) + (_lh_expand_arg2⁰ * 10000)) + (_lh_expand_arg1⁰ * 100000))
//│ def filter_lh_₁(f⁰, ls¹) = case ls¹ of {
//│ 	LH_C h¹ t¹ => if f⁰(h¹) then [LH_C h¹ filter_lh_₁^205(f⁰, t¹)] else filter_lh_₁^211(f⁰, t¹)
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁(f¹, ls²) = case ls² of {
//│ 	LH_C h² t² => [LH_C f¹(h²) map_lh_₁^384(f¹, t²)]
//│ 	| LH_N  => [LH_N]}
//│ def permutations_lh_₁(_lh_permutations_arg1⁰) = case _lh_permutations_arg1⁰ of {
//│ 	LH_N  => [LH_C [LH_N] [LH_N]]
//│ 	| LH_C _lh_permutations_LH_C_0⁰ _lh_permutations_LH_C_1⁰ => 
//│ 		let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => 
//│ 				let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 					LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]
//│ 					| LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ 				in _lh_listcomp_fun²(addj_lh_₁^321(_lh_permutations_LH_C_0⁰, _lh_listcomp_fun_ls_h¹))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun¹(permutations_lh_₁^332(_lh_permutations_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def take_lh_₁(n⁰, ls⁰) = if (n⁰ > 0) then case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ take_lh_₁^184((n⁰ - 1), t⁰)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testCryptarithm_nofib_lh_₁(_lh_testCryptarithm_nofib_arg1⁰) = map_lh_₁^394((fun i⁰ -> 
//│ 	let p0⁰ = take_lh_₁^395(10, enumFromTo_lh_₂^398(0, (9 + i⁰)))
//│ 	in filter_lh_₁^408(condition_lh_₁^409, permutations_lh_₁^411(p0⁰))), enumFromTo_lh_₁^418(1, _lh_testCryptarithm_nofib_arg1⁰))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec addj_lh__d1 _lh_addj_arg1_0 _lh_addj_arg2_0 =
//│ 		  (match _lh_addj_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_C((`LH_C(_lh_addj_arg1_0, (`LH_N))), (`LH_N)))
//│ 		    | `LH_C(_lh_addj_LH_C_0_0, _lh_addj_LH_C_1_0) -> 
//│ 		      (`LH_C((`LH_C(_lh_addj_arg1_0, (`LH_C(_lh_addj_LH_C_0_0, _lh_addj_LH_C_1_0)))), (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		        (match _lh_listcomp_fun_para_0 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		            (`LH_C((`LH_C(_lh_addj_LH_C_0_0, _lh_listcomp_fun_ls_h_0)), (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_0 ((addj_lh__d1 _lh_addj_arg1_0) _lh_addj_LH_C_1_0)))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec permutations_lh__d1 _lh_permutations_arg1_0 =
//│ 		  (match _lh_permutations_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_C((`LH_N), (`LH_N)))
//│ 		    | `LH_C(_lh_permutations_LH_C_0_0, _lh_permutations_LH_C_1_0) -> 
//│ 		      (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		        (match _lh_listcomp_fun_para_1 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		            (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		              (match _lh_listcomp_fun_para_2 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		                  (`LH_C(_lh_listcomp_fun_ls_h_2, (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2)))
//│ 		                | `LH_N -> 
//│ 		                  (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))) in
//│ 		              (_lh_listcomp_fun_2 ((addj_lh__d1 _lh_permutations_LH_C_0_0) _lh_listcomp_fun_ls_h_1)))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_1 (permutations_lh__d1 _lh_permutations_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec enumFromTo_lh__d2 a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh__d2 (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec take_lh__d1 n_0 ls_0 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match ls_0 with
//│ 		      | `LH_C(h_0, t_0) -> 
//│ 		        (`LH_C(h_0, ((take_lh__d1 (n_0 - 1)) t_0)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec map_lh__d1 f_1 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C((f_1 h_2), ((map_lh__d1 f_1) t_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec enumFromTo_lh__d1 a_1 b_1 =
//│ 		  (if (a_1 <= b_1) then
//│ 		    (`LH_C(a_1, ((enumFromTo_lh__d1 (a_1 + 1)) b_1)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec expand_lh__d1 _lh_expand_arg1_2 _lh_expand_arg2_2 _lh_expand_arg3_2 _lh_expand_arg4_2 _lh_expand_arg5_2 _lh_expand_arg6_2 =
//│ 		  (((((_lh_expand_arg6_2 + (_lh_expand_arg5_2 * 10)) + (_lh_expand_arg4_2 * 100)) + (_lh_expand_arg3_2 * 1000)) + (_lh_expand_arg2_2 * 10000)) + (_lh_expand_arg1_2 * 100000));;
//│ 		let rec expand_lh__d2 _lh_expand_arg1_1 _lh_expand_arg2_1 _lh_expand_arg3_1 _lh_expand_arg4_1 _lh_expand_arg5_1 _lh_expand_arg6_1 =
//│ 		  (((((_lh_expand_arg6_1 + (_lh_expand_arg5_1 * 10)) + (_lh_expand_arg4_1 * 100)) + (_lh_expand_arg3_1 * 1000)) + (_lh_expand_arg2_1 * 10000)) + (_lh_expand_arg1_1 * 100000));;
//│ 		let rec expand_lh__d3 _lh_expand_arg1_0 _lh_expand_arg2_0 _lh_expand_arg3_0 _lh_expand_arg4_0 _lh_expand_arg5_0 _lh_expand_arg6_0 =
//│ 		  (((((_lh_expand_arg6_0 + (_lh_expand_arg5_0 * 10)) + (_lh_expand_arg4_0 * 100)) + (_lh_expand_arg3_0 * 1000)) + (_lh_expand_arg2_0 * 10000)) + (_lh_expand_arg1_0 * 100000));;
//│ 		let rec condition_lh__d1 _lh_condition_arg1_0 =
//│ 		  (match _lh_condition_arg1_0 with
//│ 		    | `LH_C(_lh_condition_LH_C_0_0, _lh_condition_LH_C_1_0) -> 
//│ 		      (match _lh_condition_LH_C_1_0 with
//│ 		        | `LH_C(_lh_condition_LH_C_0_1, _lh_condition_LH_C_1_1) -> 
//│ 		          (match _lh_condition_LH_C_1_1 with
//│ 		            | `LH_C(_lh_condition_LH_C_0_2, _lh_condition_LH_C_1_2) -> 
//│ 		              (match _lh_condition_LH_C_1_2 with
//│ 		                | `LH_C(_lh_condition_LH_C_0_3, _lh_condition_LH_C_1_3) -> 
//│ 		                  (match _lh_condition_LH_C_1_3 with
//│ 		                    | `LH_C(_lh_condition_LH_C_0_4, _lh_condition_LH_C_1_4) -> 
//│ 		                      (match _lh_condition_LH_C_1_4 with
//│ 		                        | `LH_C(_lh_condition_LH_C_0_5, _lh_condition_LH_C_1_5) -> 
//│ 		                          (match _lh_condition_LH_C_1_5 with
//│ 		                            | `LH_C(_lh_condition_LH_C_0_6, _lh_condition_LH_C_1_6) -> 
//│ 		                              (match _lh_condition_LH_C_1_6 with
//│ 		                                | `LH_C(_lh_condition_LH_C_0_7, _lh_condition_LH_C_1_7) -> 
//│ 		                                  (match _lh_condition_LH_C_1_7 with
//│ 		                                    | `LH_C(_lh_condition_LH_C_0_8, _lh_condition_LH_C_1_8) -> 
//│ 		                                      (match _lh_condition_LH_C_1_8 with
//│ 		                                        | `LH_C(_lh_condition_LH_C_0_9, _lh_condition_LH_C_1_9) -> 
//│ 		                                          (match _lh_condition_LH_C_1_9 with
//│ 		                                            | `LH_N -> 
//│ 		                                              ((((((((expand_lh__d3 _lh_condition_LH_C_0_0) _lh_condition_LH_C_0_1) _lh_condition_LH_C_0_2) _lh_condition_LH_C_0_3) _lh_condition_LH_C_0_0) _lh_condition_LH_C_0_4) + (5 * ((((((expand_lh__d1 _lh_condition_LH_C_0_0) _lh_condition_LH_C_0_5) _lh_condition_LH_C_0_6) _lh_condition_LH_C_0_7) _lh_condition_LH_C_0_8) _lh_condition_LH_C_0_6))) = ((((((expand_lh__d2 _lh_condition_LH_C_0_9) _lh_condition_LH_C_0_2) _lh_condition_LH_C_0_9) _lh_condition_LH_C_0_6) _lh_condition_LH_C_0_0) _lh_condition_LH_C_0_4))
//│ 		                                            | _ -> 
//│ 		                                              (failwith "error"))
//│ 		                                        | _ -> 
//│ 		                                          (failwith "error"))
//│ 		                                    | _ -> 
//│ 		                                      (failwith "error"))
//│ 		                                | _ -> 
//│ 		                                  (failwith "error"))
//│ 		                            | _ -> 
//│ 		                              (failwith "error"))
//│ 		                        | _ -> 
//│ 		                          (failwith "error"))
//│ 		                    | _ -> 
//│ 		                      (failwith "error"))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))
//│ 		            | _ -> 
//│ 		              (failwith "error"))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec filter_lh__d1 f_0 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (if (f_0 h_1) then
//│ 		        (`LH_C(h_1, ((filter_lh__d1 f_0) t_1)))
//│ 		      else
//│ 		        ((filter_lh__d1 f_0) t_1))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec testCryptarithm_nofib_lh__d1 _lh_testCryptarithm_nofib_arg1_0 =
//│ 		  ((map_lh__d1 (fun i_0 -> 
//│ 		    (let rec p0_0 = ((take_lh__d1 10) ((enumFromTo_lh__d2 0) (9 + i_0))) in
//│ 		      ((filter_lh__d1 condition_lh__d1) (permutations_lh__d1 p0_0))))) ((enumFromTo_lh__d1 1) _lh_testCryptarithm_nofib_arg1_0));;
//│ 		(testCryptarithm_nofib_lh__d1 1)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< after expansion <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C h⁰ take_lh_₁((n⁰ - 1), t⁰)]: 193 --->
//│ 	case _lh_permutations_arg1⁰ of {LH_N  => [LH_C [LH_N] [LH_N]] | LH_C _lh_permutations_LH_C_0⁰ _lh_permutations_LH_C_1⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(addj_lh_₁(_lh_permutations_LH_C_0⁰, _lh_listcomp_fun_ls_h¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(permutations_lh_₁(_lh_permutations_LH_C_1⁰)) | _  => error⁰}: 338
//│ [LH_N]: 194 --->
//│ 	case _lh_permutations_arg1⁰ of {LH_N  => [LH_C [LH_N] [LH_N]] | LH_C _lh_permutations_LH_C_0⁰ _lh_permutations_LH_C_1⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(addj_lh_₁(_lh_permutations_LH_C_0⁰, _lh_listcomp_fun_ls_h¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(permutations_lh_₁(_lh_permutations_LH_C_1⁰)) | _  => error⁰}: 338
//│ [LH_N]: 196 --->
//│ 	case _lh_permutations_arg1⁰ of {LH_N  => [LH_C [LH_N] [LH_N]] | LH_C _lh_permutations_LH_C_0⁰ _lh_permutations_LH_C_1⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(addj_lh_₁(_lh_permutations_LH_C_0⁰, _lh_listcomp_fun_ls_h¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(permutations_lh_₁(_lh_permutations_LH_C_1⁰)) | _  => error⁰}: 338
//│ [LH_C a⁰ enumFromTo_lh_₂((a⁰ + 1), b⁰)]: 355 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ take_lh_₁((n⁰ - 1), t⁰)] | LH_N  => [LH_N]}: 195
//│ [LH_N]: 356 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ take_lh_₁((n⁰ - 1), t⁰)] | LH_N  => [LH_N]}: 195
//│ [LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)]: 375 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f¹(h²) map_lh_₁(f¹, t²)] | LH_N  => [LH_N]}: 391
//│ [LH_N]: 376 --->
//│ 	case ls² of {LH_C h² t² => [LH_C f¹(h²) map_lh_₁(f¹, t²)] | LH_N  => [LH_N]}: 391
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ take_lh_₁((n⁰ - 1), t⁰)] | LH_N  => [LH_N]}: 195 --->
//│ 	[LH_C a⁰ enumFromTo_lh_₂((a⁰ + 1), b⁰)]: 355
//│ 	[LH_N]: 356
//│ case _lh_permutations_arg1⁰ of {LH_N  => [LH_C [LH_N] [LH_N]] | LH_C _lh_permutations_LH_C_0⁰ _lh_permutations_LH_C_1⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(addj_lh_₁(_lh_permutations_LH_C_0⁰, _lh_listcomp_fun_ls_h¹)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(permutations_lh_₁(_lh_permutations_LH_C_1⁰)) | _  => error⁰}: 338 --->
//│ 	[LH_C h⁰ take_lh_₁((n⁰ - 1), t⁰)]: 193
//│ 	[LH_N]: 194
//│ 	[LH_N]: 196
//│ case ls² of {LH_C h² t² => [LH_C f¹(h²) map_lh_₁(f¹, t²)] | LH_N  => [LH_N]}: 391 --->
//│ 	[LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)]: 375
//│ 	[LH_N]: 376
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testCryptarithm_nofib_lh_₁(primId⁰(1))
//│ def addj_lh_₁(_lh_addj_arg1⁰, _lh_addj_arg2⁰) = case _lh_addj_arg2⁰ of {
//│ 	LH_N  => [LH_C [LH_C _lh_addj_arg1⁰ [LH_N]] [LH_N]]
//│ 	| LH_C _lh_addj_LH_C_0⁰ _lh_addj_LH_C_1⁰ => [LH_C [LH_C _lh_addj_arg1⁰ [LH_C _lh_addj_LH_C_0⁰ _lh_addj_LH_C_1⁰]] 
//│ 		let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 			LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_C _lh_addj_LH_C_0⁰ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²(addj_lh_₁(_lh_addj_arg1⁰, _lh_addj_LH_C_1⁰))]
//│ 	| _  => error⁰}
//│ def condition_lh_₁(_lh_condition_arg1⁰) = case _lh_condition_arg1⁰ of {
//│ 	LH_C _lh_condition_LH_C_0⁰ _lh_condition_LH_C_1⁰ => case _lh_condition_LH_C_1⁰ of {
//│ 		LH_C _lh_condition_LH_C_0¹ _lh_condition_LH_C_1¹ => case _lh_condition_LH_C_1¹ of {
//│ 			LH_C _lh_condition_LH_C_0² _lh_condition_LH_C_1² => case _lh_condition_LH_C_1² of {
//│ 				LH_C _lh_condition_LH_C_0³ _lh_condition_LH_C_1³ => case _lh_condition_LH_C_1³ of {
//│ 					LH_C _lh_condition_LH_C_0⁴ _lh_condition_LH_C_1⁴ => case _lh_condition_LH_C_1⁴ of {
//│ 						LH_C _lh_condition_LH_C_0⁵ _lh_condition_LH_C_1⁵ => case _lh_condition_LH_C_1⁵ of {
//│ 							LH_C _lh_condition_LH_C_0⁶ _lh_condition_LH_C_1⁶ => case _lh_condition_LH_C_1⁶ of {
//│ 								LH_C _lh_condition_LH_C_0⁷ _lh_condition_LH_C_1⁷ => case _lh_condition_LH_C_1⁷ of {
//│ 									LH_C _lh_condition_LH_C_0⁸ _lh_condition_LH_C_1⁸ => case _lh_condition_LH_C_1⁸ of {
//│ 										LH_C _lh_condition_LH_C_0⁹ _lh_condition_LH_C_1⁹ => case _lh_condition_LH_C_1⁹ of {
//│ 											LH_N  => ((expand_lh_₃(_lh_condition_LH_C_0⁰, _lh_condition_LH_C_0¹, _lh_condition_LH_C_0², _lh_condition_LH_C_0³, _lh_condition_LH_C_0⁰, _lh_condition_LH_C_0⁴) + (5 * expand_lh_₁(_lh_condition_LH_C_0⁰, _lh_condition_LH_C_0⁵, _lh_condition_LH_C_0⁶, _lh_condition_LH_C_0⁷, _lh_condition_LH_C_0⁸, _lh_condition_LH_C_0⁶))) == expand_lh_₂(_lh_condition_LH_C_0⁹, _lh_condition_LH_C_0², _lh_condition_LH_C_0⁹, _lh_condition_LH_C_0⁶, _lh_condition_LH_C_0⁰, _lh_condition_LH_C_0⁴))
//│ 											| _  => error⁰}
//│ 										| _  => error⁰}
//│ 									| _  => error⁰}
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def enumFromTo_lh_₁(a¹, b¹, _lh_floatOutId_0¹) = if (a¹ <= b¹) then 
//│ 	let t¹ = enumFromTo_lh_₁((a¹ + 1), b¹)
//│ 	in let h¹ = a¹
//│ 	in [LH_C _lh_floatOutId_0¹(h¹) map_lh_₁(_lh_floatOutId_0¹, t¹)] else [LH_N]
//│ def enumFromTo_lh_₂(a⁰, b⁰, _lh_floatOutId_0⁰, _lh_floatOutId_1⁰) = if (a⁰ <= b⁰) then 
//│ 	let t⁰ = enumFromTo_lh_₂((a⁰ + 1), b⁰)
//│ 	in let h⁰ = a⁰
//│ 	in let _lh_permutations_LH_C_1⁰ = take_lh_₁((_lh_floatOutId_0⁰ - 1), t⁰)
//│ 	in let _lh_permutations_LH_C_0⁰ = h⁰
//│ 	in let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 			let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 				LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 				| LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ 			in _lh_listcomp_fun¹(addj_lh_₁(_lh_permutations_LH_C_0⁰, _lh_listcomp_fun_ls_h⁰))
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰(permutations_lh_₁(_lh_permutations_LH_C_1⁰)) else [LH_C [LH_N] [LH_N]]
//│ def expand_lh_₁(_lh_expand_arg1², _lh_expand_arg2², _lh_expand_arg3², _lh_expand_arg4², _lh_expand_arg5², _lh_expand_arg6²) = (((((_lh_expand_arg6² + (_lh_expand_arg5² * 10)) + (_lh_expand_arg4² * 100)) + (_lh_expand_arg3² * 1000)) + (_lh_expand_arg2² * 10000)) + (_lh_expand_arg1² * 100000))
//│ def expand_lh_₂(_lh_expand_arg1¹, _lh_expand_arg2¹, _lh_expand_arg3¹, _lh_expand_arg4¹, _lh_expand_arg5¹, _lh_expand_arg6¹) = (((((_lh_expand_arg6¹ + (_lh_expand_arg5¹ * 10)) + (_lh_expand_arg4¹ * 100)) + (_lh_expand_arg3¹ * 1000)) + (_lh_expand_arg2¹ * 10000)) + (_lh_expand_arg1¹ * 100000))
//│ def expand_lh_₃(_lh_expand_arg1⁰, _lh_expand_arg2⁰, _lh_expand_arg3⁰, _lh_expand_arg4⁰, _lh_expand_arg5⁰, _lh_expand_arg6⁰) = (((((_lh_expand_arg6⁰ + (_lh_expand_arg5⁰ * 10)) + (_lh_expand_arg4⁰ * 100)) + (_lh_expand_arg3⁰ * 1000)) + (_lh_expand_arg2⁰ * 10000)) + (_lh_expand_arg1⁰ * 100000))
//│ def filter_lh_₁(f³, ls²) = case ls² of {
//│ 	LH_C h² t² => if f³(h²) then [LH_C h² filter_lh_₁(f³, t²)] else filter_lh_₁(f³, t²)
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁(f⁰, ls¹) = ls¹(f⁰)
//│ def permutations_lh_₁(_lh_permutations_arg1⁰) = _lh_permutations_arg1⁰([lh_Unit])
//│ def take_lh_₁(n², ls⁰) = if (n² > 0) then ls⁰(n²) else (fun _lh_dummy² -> [LH_C [LH_N] [LH_N]])
//│ def testCryptarithm_nofib_lh_₁(_lh_testCryptarithm_nofib_arg1⁰) = map_lh_₁((fun i⁰ -> 
//│ 	let p0⁰ = take_lh_₁(10, enumFromTo_lh_₂(0, (9 + i⁰)))
//│ 	in filter_lh_₁(condition_lh_₁, permutations_lh_₁(p0⁰))), enumFromTo_lh_₁(1, _lh_testCryptarithm_nofib_arg1⁰))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
