:NewParser
:ParseOnly

:lhNoIter
:lhInHaskell
:lhGenOCaml
dropWhile f [] = []
dropWhile f (h:t) = if (f h) then dropWhile f t else (h:t)
drop n []      = []
drop n (h:t)   = if n <= 0 then (h:t) else (drop (n - 1) t)
splitAt n ls = (take n ls, drop n ls)
unwords []              =  ""
unwords (w:ws)          = w ++ go ws
  where
    go []     = ""
    go (v:vs) = ' ' : (v ++ (go vs))
break p [] = ([], [])
break p (x:xs) = if p x then ([], (x:xs)) else case (break p xs) of { (ys, zs) -> ((x:ys), zs) }
isSpace c = polyEq c ' '
words s = case (dropWhile isSpace s) of
          [] -> []
          (h:t) -> case (break isSpace (h:t)) of (w, s'') -> (w : (words s''))
lines s = case break (\x -> polyEq x '|') s of
                  (l, s') -> (l:(case s' of { [] -> []; _:s'' -> lines s'' }))
unlines ls = concat $ map (\l -> l ++ "|") ls
min a b = if a > b then b else a
null [] = True
null (h:t) = False
all f [] = True
all f (h:t) = if f h then all f t else False
fold1 :: (a->b->b) -> (a->b) -> [a] -> b
fold1 f g [a]   = g a
fold1 f g (a:x) = f a (fold1 f g x)
scan1 :: (a->b->b) -> (a->b) -> [a] -> [b]
scan1 f g = fold1 (\a -> \s -> ((f a (head s)) : s)) (\a -> [g a])
tails :: [a] -> [[a]]
tails = scan1 (\x -> \y -> x:y) (\x -> x:[])
single :: [a] -> Bool
single [a] = True
single _   = False
minWith :: (a->Int) -> [a] -> a
minWith f = fold1 (\a -> \b -> if ((f a) < (f b)) then a else b) (\x -> x)
type Txt = [Word]
type Word = String
type Paragraph = [Line]
type Line = [Word]
par0 :: Txt -> Paragraph
par0 x = ((minWith cost) . (filter feasible) . formats) x
formats :: Txt -> [Paragraph]
formats = fold1 (\w -> \ps -> (map (new w) ps) ++ (map (glue w) ps)) (\x -> [ [[x]] ])
new w ls      = [w]:ls
glue w (l:ls) = (w:l):ls
feasible :: Paragraph -> Bool
feasible a = all fits a
maxw :: Int
maxw = 70
fits :: Line -> Bool
fits xs = ((width xs) <= maxw)
width :: Line -> Int
width ls = fold1 plus length ls
  where plus w n = length w + 1 + n
optw :: Int
optw = 63
cost :: Paragraph -> Int
cost ls = fold1 plus (\_dum -> 0) ls
       where plus l n = linc l + n
             linc l = let a = (optw - (width l)) in a * a
fitH ls = (fits . head) ls
type Par    = (Width,Cost,Length)
type Width  = Int
type Cost   = Int
type Length = Int
width_tl x = fst3 x
cost_tl  x = snd3 x
len_tl   x = thd3 x
fst3 (a,b,c) = a
snd3 (a,b,c) = b
thd3 (a,b,c) = c
tile :: Txt -> ([Length],Length) -> Paragraph
tile ws ([],n)   = []
tile ws (m:ms,n) =
  let l = n - m in
  case (splitAt l ws) of { (ws1,ws2) ->
    ws1 : (tile ws2 (drop l (m:ms),m))
  }            
par3 :: Txt -> Paragraph
par3 ws =
  let zs = scan1 stepr startr (map length ws) in
  tile ws (map (len_tl . last' . fst3) zs, thd3 (head zs))
startr :: Length -> (SymList Par, Width, Length)
startr a = if a <= maxw then (cons' (0,0,0) nil',a,1) else error "startr param error"
stepr :: Length -> (SymList Par, Cost, Length) -> (SymList Par, Cost, Length)
stepr w (ps,tw,tl) =
  let tot_width = w + 1 + tw in
  let tot_len = 1 + tl in
  let single = \p -> (len_tl p) == 0 in
  let width_hd = \p -> if (single p) then tot_width else tot_width - (width_tl p) - 1 in
  let cost = \p -> if (single p) then 0 else (cost_tl p) + (let a = (optw - (width_hd p)) in a*a) in
  let old_width_hd = \p -> if (single p) then tw else tw - (width_tl p) - 1 in 
  let new = \p -> if (single p) then (tw,0,tl) else (tw, (cost_tl p) + (let x = (optw-(old_width_hd p)) in x*x), tl) in
  let trim = \ps_pq ->
                if null' ps_pq then
                  ps_pq
                else if single' ps_pq then
                  ps_pq
                else
                  let ps_p = init' ps_pq in
                  let q    = last' ps_pq in
                  let p    = last' ps_p in
                  if (cost p) <= (cost q) then
                    trim ps_p
                  else
                    ps_pq
  in
  let drop_nofit = \ps_p ->
                      if null' ps_p then
                        ps_p
                      else if (width_hd (last' ps_p)) > maxw then
                        drop_nofit (init' ps_p)
                      else 
                        ps_p
  in
  let bf = \p -> \q ->
            let wqh = width_hd q in
            let rqh = maxw - wqh + 1 in
            if (single q) && ((cost_tl p) == 0) then
              min (optw - (width_hd p)) rqh
            else if single q then
              rqh
            else
              (ceildiv ((cost p)-(cost q)) (2*(wqh-(width_hd p)))) `min` rqh
  in
  let myAdd = \p -> \qr_rs ->
                if (single' qr_rs) || (null' qr_rs) then
                  cons' p qr_rs
                else
                  let q = head' qr_rs in
                  let r_rs = tail' qr_rs in
                  let r  = head' r_rs in
                  if (bf p q) <= (bf q r) then
                    myAdd p r_rs
                  else
                    cons' p qr_rs
  in
  (trim (drop_nofit (new (last' ps) `myAdd` ps)), tot_width, tot_len)
ceildiv n m = (n+m-1) `div` m
fmt x = (unparse . (map (par3 . concat)) . parse) x
fmtWith par = unparse . (map (par . concat)) . parse
type SymList a = ([a],[a])
single' (x,y) = ((null x) && (single y)) || ((single x) && (null y))
null' ([],[]) = True
null' _       = False
nil' = ([],[])
head' (x,y) = if not (null x) then head x else head y
last' (y,x) = if not (null x) then head x else head y
cons' a (x,y) = if not (null y) then (a:x,y) else ([a],x)
snoc' a (y,x) = if not (null y) then (y,a:x) else (x,[a])
tail' (x,y) =
  if null x then
    ([],[])
  else if single x then
    case (splitAt ((length y) `div` 2) y) of {(y0,y1) -> (reverse y1, y0) }
  else
    (tail x, y)
init' (y,x) =
  if null x then
    ([],[])
  else if single x then
    case (splitAt ((length y) `div` 2) y) of { (y0,y1) -> (y0, reverse y1) }
  else
    (y, tail x)
unformat :: a -> [[a]] -> [a]
unformat a = fold1 (\xs -> \ys -> xs ++ [a] ++ ys) (\x -> x)
format :: Eq a => a -> [a] -> [[a]]
format a [] = [[]]
format a x = fold1 (break a) (start a) x
  where break a b xs = if polyEq a b then []:xs else (b:(head xs)):(tail xs)
        start a b = break a b [[]]
unparas :: [[[String]]] -> [[String]]
unparas ls = unformat [] ls
paras :: [[String]] -> [[[String]]]
paras ls   = ((filter (\x -> polyNeq [] x)) . (format [])) ls
parse ls   = (paras . (map words) . lines) ls
unparse ls = (unlines . (map unwords) . unparas) ls
test dummy =
  primId ("In the constructive programming community it is commonplace to see ") ++
  primId ("formal developments of textbook algorithms. In the algorithm design ") ++
  primId ("community, on the other hand, it may be well known that the textbook ") ++
  primId ("solution to a problem is not the most efficient possible. However, in ") ++
  primId ("presenting the more efficient solution, the algorithm designer will ") ++
  primId ("usually omit some of the implementation details, this creating an ") ++
  primId ("algorithm gap between the abstract algorithm and its concrete ") ++
  primId ("implementation. This is in contrast to the formal development, which ") ++
  primId ("usually presents the complete concrete implementation of the less ") ++
  primId ("efficient solution.| |")
testPara_nofib dummy = if null (test 0) then [] else (fmt (test 0))
testPara_nofib $ primId 0
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testPara_nofib_lh^2527(primId⁰(0))
//│ def break_lh(_lh_break_arg1¹, _lh_break_arg2¹) = case _lh_break_arg2¹ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else 
//│ 		let _lh_matchIdent² = break_lh^2064(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent² of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def ceildiv_lh(_lh_ceildiv_arg1⁰, _lh_ceildiv_arg2⁰) = div⁰(((_lh_ceildiv_arg1⁰ + _lh_ceildiv_arg2⁰) - 1), _lh_ceildiv_arg2⁰)
//│ def concat_lh(lss⁰) = case lss⁰ of {
//│ 	LH_C h⁷ t⁷ => mappend_lh^93(h⁷, concat_lh^96(t⁷))
//│ 	| LH_N  => [LH_N]}
//│ def cons'_lh(_lh_cons'_arg1⁰, _lh_cons'_arg2⁰) = case _lh_cons'_arg2⁰ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh^2351(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]
//│ 	| _  => error⁰}
//│ def cost_tl_lh(_lh_cost_tl_arg1⁰) = snd3_lh^2429(_lh_cost_tl_arg1⁰)
//│ def dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh^455(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]
//│ 	| _  => error⁰}
//│ def drop_lh(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh^516((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def filter_lh(f¹, ls¹) = case ls¹ of {
//│ 	LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh^20(f¹, t¹)] else filter_lh^26(f¹, t¹)
//│ 	| LH_N  => [LH_N]}
//│ def fmt_lh(_lh_fmt_arg1⁰) = (fun _lh_funcomp_x⁷ -> (fun _lh_funcomp_x⁸ -> unparse_lh^2450(map_lh^2451((fun _lh_funcomp_x⁹ -> par3_lh^2452(concat_lh^2453(_lh_funcomp_x⁹))), _lh_funcomp_x⁸)))(parse_lh^2463(_lh_funcomp_x⁷)))(_lh_fmt_arg1⁰)
//│ def fold1_lh(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_arg3⁰) = case _lh_fold1_arg3⁰ of {
//│ 	LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {
//│ 		LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰)
//│ 		| _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh^2479(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}
//│ 	| _  => error⁰}
//│ def format_lh(_lh_format_arg1⁰, _lh_format_arg2⁰) = case _lh_format_arg2⁰ of {
//│ 	LH_N  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let break⁰ = (fun _lh_break_arg1⁰ -> (fun _lh_break_arg2⁰ -> (fun _lh_break_arg3⁰ -> if polyEq⁰(_lh_break_arg1⁰, _lh_break_arg2⁰) then [LH_C [LH_N] _lh_break_arg3⁰] else [LH_C [LH_C _lh_break_arg2⁰ head_lh^623(_lh_break_arg3⁰)] tail_lh^627(_lh_break_arg3⁰)])))
//│ 		and start⁰ = (fun _lh_start_arg1⁰ -> (fun _lh_start_arg2⁰ -> break⁰(_lh_start_arg1⁰, _lh_start_arg2⁰, [LH_C [LH_N] [LH_N]]))) 
//│ 		in fold1_lh^646(break⁰(_lh_format_arg1⁰), start⁰(_lh_format_arg1⁰), _lh_format_arg2⁰)}
//│ def fst3_lh(_lh_fst3_arg1⁰) = case _lh_fst3_arg1⁰ of {
//│ 	LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰
//│ 	| _  => error⁰}
//│ def head'_lh(_lh_head'_arg1⁰) = case _lh_head'_arg1⁰ of {
//│ 	LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh^492(_lh_head'_LH_P2_0⁰)) then head_lh^496(_lh_head'_LH_P2_0⁰) else head_lh^499(_lh_head'_LH_P2_1⁰)
//│ 	| _  => error⁰}
//│ def head_lh(ls²) = case ls² of {
//│ 	LH_C h² t² => h²
//│ 	| LH_N  => error⁰}
//│ def init'_lh(_lh_init'_arg1⁰) = case _lh_init'_arg1⁰ of {
//│ 	LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh^2000(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh^2006(_lh_init'_LH_P2_1⁰) then 
//│ 		let _lh_matchIdent¹ = splitAt_lh^2009(div⁰(length_lh^2011(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ 		in case _lh_matchIdent¹ of {
//│ 			LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh^2022(_lh_init'_LH_P2_1¹)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh^2030(_lh_init'_LH_P2_1⁰)]
//│ 	| _  => error⁰}
//│ def isSpace_lh(_lh_isSpace_arg1⁰) = polyEq⁰(_lh_isSpace_arg1⁰, ' ')
//│ def last'_lh(_lh_last'_arg1⁰) = case _lh_last'_arg1⁰ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh^532(_lh_last'_LH_P2_1⁰)) then head_lh^536(_lh_last'_LH_P2_1⁰) else head_lh^539(_lh_last'_LH_P2_0⁰)
//│ 	| _  => error⁰}
//│ def len_tl_lh(_lh_len_tl_arg1⁰) = thd3_lh^2112(_lh_len_tl_arg1⁰)
//│ def length_lh(ls⁵) = case ls⁵ of {
//│ 	LH_C h⁵ t⁵ => (1 + length_lh^73(t⁵))
//│ 	| LH_N  => 0}
//│ def lines_lh(_lh_lines_arg1⁰) = 
//│ 	let _lh_matchIdent⁶ = break_lh^2496((fun x³ -> polyEq⁰(x³, '|')), _lh_lines_arg1⁰)
//│ 	in case _lh_matchIdent⁶ of {
//│ 		LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ 
//│ 			let _lh_matchIdent⁷ = _lh_lines_LH_P2_1⁰
//│ 			in case _lh_matchIdent⁷ of {
//│ 				LH_N  => [LH_N]
//│ 				| LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh^2511(_lh_lines_LH_C_1⁰)
//│ 				| _  => error⁰}]
//│ 		| _  => error⁰}
//│ def map_lh(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh^5(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh^82(t⁶, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def maxw_lh = 70
//│ def min_lh(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ > _lh_min_arg2⁰) then _lh_min_arg2⁰ else _lh_min_arg1⁰
//│ def nil'_lh = [LH_P2 [LH_N] [LH_N]]
//│ def null'_lh(_lh_null'_arg1⁰) = case _lh_null'_arg1⁰ of {
//│ 	LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1⁰ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null_lh(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def optw_lh = 63
//│ def par3_lh(_lh_par3_arg1⁰) = 
//│ 	let zs⁰ = scan1_lh^2234(stepr_lh^2235, startr_lh^2237, map_lh^2239(length_lh^2240, _lh_par3_arg1⁰))
//│ 	in tile_lh^2245(_lh_par3_arg1⁰, [LH_P2 map_lh^2248((fun _lh_funcomp_x³ -> (fun _lh_funcomp_x⁴ -> len_tl_lh^2249(last'_lh^2250(_lh_funcomp_x⁴)))(fst3_lh^2255(_lh_funcomp_x³))), zs⁰) thd3_lh^2263(head_lh^2264(zs⁰))])
//│ def paras_lh(_lh_paras_arg1⁰) = (fun _lh_funcomp_x² -> filter_lh^2182((fun x² -> polyNeq⁰([LH_N], x²)), format_lh^2190([LH_N], _lh_funcomp_x²)))(_lh_paras_arg1⁰)
//│ def parse_lh(_lh_parse_arg1⁰) = (fun _lh_funcomp_x⁵ -> (fun _lh_funcomp_x⁶ -> paras_lh^2333(map_lh^2334(words_lh^2335, _lh_funcomp_x⁶)))(lines_lh^2341(_lh_funcomp_x⁵)))(_lh_parse_arg1⁰)
//│ def reverse_helper_lh(ls⁷, a⁰) = case ls⁷ of {
//│ 	LH_C h⁸ t⁸ => reverse_helper_lh^110(t⁸, [LH_C h⁸ a⁰])
//│ 	| LH_N  => a⁰}
//│ def reverse_lh(ls⁶) = reverse_helper_lh^103(ls⁶, [LH_N])
//│ def scan1_lh(_lh_scan1_arg1⁰, _lh_scan1_arg2⁰) = fold1_lh^468((fun a² -> (fun s⁰ -> [LH_C _lh_scan1_arg1⁰(a², head_lh^472(s⁰)) s⁰])), (fun a³ -> [LH_C _lh_scan1_arg2⁰(a³) [LH_N]]))
//│ def single'_lh(_lh_single'_arg1⁰) = case _lh_single'_arg1⁰ of {
//│ 	LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh^1977(_lh_single'_LH_P2_0⁰) && single_lh^1981(_lh_single'_LH_P2_1⁰)) || (single_lh^1987(_lh_single'_LH_P2_0⁰) && null_lh^1991(_lh_single'_LH_P2_1⁰)))
//│ 	| _  => error⁰}
//│ def single_lh(_lh_single_arg1⁰) = case _lh_single_arg1⁰ of {
//│ 	LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def snd3_lh(_lh_snd3_arg1⁰) = case _lh_snd3_arg1⁰ of {
//│ 	LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰
//│ 	| _  => error⁰}
//│ def splitAt_lh(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) = [LH_P2 take_lh^2039(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh^2044(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]
//│ def startr_lh(_lh_startr_arg1⁰) = if (_lh_startr_arg1⁰ <= maxw_lh^2279) then [LH_P3 cons'_lh^2281([LH_P3 0 0 0], nil'_lh^2287) _lh_startr_arg1⁰ 1] else error⁰([LH_C 's' [LH_C 't' [LH_C 'a' [LH_C 'r' [LH_C 't' [LH_C 'r' [LH_C ' ' [LH_C 'p' [LH_C 'a' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]]]]]]])
//│ def stepr_lh(_lh_stepr_arg1⁰, _lh_stepr_arg2⁰) = case _lh_stepr_arg2⁰ of {
//│ 	LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => 
//│ 		let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ 		in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ 		in let single⁰ = (fun p⁰ -> (len_tl_lh^137(p⁰) == 0))
//│ 		in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh^152(p¹)) - 1))
//│ 		in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh^166(p²) + 
//│ 			let a¹ = (optw_lh^171 - width_hd⁰(p²))
//│ 			in (a¹ * a¹)))
//│ 		in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh^194(p³)) - 1))
//│ 		in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh^212(p⁴) + 
//│ 			let x⁰ = (optw_lh^217 - old_width_hd⁰(p⁴))
//│ 			in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ 		in let trim⁰ = (fun ps_pq⁰ -> if null'_lh^234(ps_pq⁰) then ps_pq⁰ else if single'_lh^238(ps_pq⁰) then ps_pq⁰ else 
//│ 			let ps_p⁰ = init'_lh^242(ps_pq⁰)
//│ 			in let q⁰ = last'_lh^245(ps_pq⁰)
//│ 			in let p⁵ = last'_lh^248(ps_p⁰)
//│ 			in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ 		in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh^271(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh^277(ps_p¹)) > maxw_lh^282) then drop_nofit⁰(init'_lh^285(ps_p¹)) else ps_p¹)
//│ 		in let bf⁰ = (fun p⁶ -> (fun q¹ -> 
//│ 			let wqh⁰ = width_hd⁰(q¹)
//│ 			in let rqh⁰ = ((maxw_lh^298 - wqh⁰) + 1)
//│ 			in if (single⁰(q¹) && (cost_tl_lh^311(p⁶) == 0)) then min_lh^318((optw_lh^320 - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh^333(ceildiv_lh^334((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ 		in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh^367(qr_rs⁰) || null'_lh^371(qr_rs⁰)) then cons'_lh^375(p⁷, qr_rs⁰) else 
//│ 			let q² = head'_lh^380(qr_rs⁰)
//│ 			in let r_rs⁰ = tail'_lh^383(qr_rs⁰)
//│ 			in let r⁰ = head'_lh^386(r_rs⁰)
//│ 			in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh^407(p⁷, qr_rs⁰)))
//│ 		in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh^423(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]
//│ 	| _  => error⁰}
//│ def tail'_lh(_lh_tail'_arg1⁰) = case _lh_tail'_arg1⁰ of {
//│ 	LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh^2117(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh^2123(_lh_tail'_LH_P2_0⁰) then 
//│ 		let _lh_matchIdent³ = splitAt_lh^2126(div⁰(length_lh^2128(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ 		in case _lh_matchIdent³ of {
//│ 			LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh^2138(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]
//│ 			| _  => error⁰} else [LH_P2 tail_lh^2146(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]
//│ 	| _  => error⁰}
//│ def tail_lh(ls³) = case ls³ of {
//│ 	LH_C h³ t³ => t³
//│ 	| LH_N  => error⁰}
//│ def take_lh(n⁰, ls⁴) = if (n⁰ > 0) then case ls⁴ of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ take_lh^53((n⁰ - 1), t⁴)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPara_nofib_lh(_lh_testPara_nofib_arg1⁰) = if null_lh^2099(test_lh^2100(0)) then [LH_N] else fmt_lh^2105(test_lh^2106(0))
//│ def test_lh(_lh_test_arg1⁰) = mappend_lh^661(mappend_lh^662(mappend_lh^663(mappend_lh^664(mappend_lh^665(mappend_lh^666(mappend_lh^667(mappend_lh^668(mappend_lh^669(primId⁰([LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'u' [LH_C 'c' [LH_C 't' [LH_C 'i' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C 'm' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'o' [LH_C 'n' [LH_C 'p' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]), primId⁰([LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C 's' [LH_C '.' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ',' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'h' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'y' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C ' ' [LH_C 'w' [LH_C 'e' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_C 'k' [LH_C 'n' [LH_C 'o' [LH_C 'w' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 's' [LH_C 'i' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C '.' [LH_C ' ' [LH_C 'H' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'o' [LH_C 'm' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'm' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 't' [LH_C 'a' [LH_C 'i' [LH_C 'l' [LH_C 's' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'g' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'b' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C ' ' [LH_C 'T' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'i' [LH_C 'c' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'l' [LH_C 'e' [LH_C 's' [LH_C 's' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C '|' [LH_C ' ' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]))
//│ def thd3_lh(_lh_thd3_arg1⁰) = case _lh_thd3_arg1⁰ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰
//│ 	| _  => error⁰}
//│ def tile_lh(_lh_tile_arg1⁰, _lh_tile_arg2⁰) = case _lh_tile_arg2⁰ of {
//│ 	LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => 
//│ 			let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ 			in let _lh_matchIdent⁰ = splitAt_lh^560(l⁰, _lh_tile_arg1⁰)
//│ 			in case _lh_matchIdent⁰ of {
//│ 				LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh^567(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh^570(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def unformat_lh(_lh_unformat_arg1⁰) = fold1_lh^591((fun xs¹ -> (fun ys¹ -> mappend_lh^592(mappend_lh^593(xs¹, [LH_C _lh_unformat_arg1⁰ [LH_N]]), ys¹))), (fun x¹ -> x¹))
//│ def unlines_lh(_lh_unlines_arg1⁰) = concat_lh^2156(map_lh^2157((fun l¹ -> mappend_lh^2158(l¹, [LH_C '|' [LH_N]])), _lh_unlines_arg1⁰))
//│ def unparas_lh(_lh_unparas_arg1⁰) = unformat_lh^546([LH_N], _lh_unparas_arg1⁰)
//│ def unparse_lh(_lh_unparse_arg1⁰) = (fun _lh_funcomp_x⁰ -> (fun _lh_funcomp_x¹ -> unlines_lh^2083(map_lh^2084(unwords_lh^2085, _lh_funcomp_x¹)))(unparas_lh^2091(_lh_funcomp_x⁰)))(_lh_unparse_arg1⁰)
//│ def unwords_lh(_lh_unwords_arg1⁰) = case _lh_unwords_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => 
//│ 		let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {
//│ 			LH_N  => [LH_N]
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh^2380(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]
//│ 			| _  => error⁰})
//│ 		in mappend_lh^2391(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def width_tl_lh(_lh_width_tl_arg1⁰) = fst3_lh^2272(_lh_width_tl_arg1⁰)
//│ def words_lh(_lh_words_arg1⁰) = 
//│ 	let _lh_matchIdent⁴ = dropWhile_lh^2402(isSpace_lh^2403, _lh_words_arg1⁰)
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => 
//│ 			let _lh_matchIdent⁵ = break_lh^2409(isSpace_lh^2410, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ 			in case _lh_matchIdent⁵ of {
//│ 				LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh^2418(_lh_words_LH_P2_1⁰)]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec mappend_lh xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      (`LH_C(h_6, ((mappend_lh t_6) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec test_lh _lh_test_arg1_0 =
//│ 		  ((mappend_lh ((mappend_lh ((mappend_lh ((mappend_lh ((mappend_lh ((mappend_lh ((mappend_lh ((mappend_lh ((mappend_lh (`LH_C('I', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('s', (`LH_C('t', (`LH_C('r', (`LH_C('u', (`LH_C('c', (`LH_C('t', (`LH_C('i', (`LH_C('v', (`LH_C('e', (`LH_C(' ', (`LH_C('p', (`LH_C('r', (`LH_C('o', (`LH_C('g', (`LH_C('r', (`LH_C('a', (`LH_C('m', (`LH_C('m', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('m', (`LH_C('u', (`LH_C('n', (`LH_C('i', (`LH_C('t', (`LH_C('y', (`LH_C(' ', (`LH_C('i', (`LH_C('t', (`LH_C(' ', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('m', (`LH_C('o', (`LH_C('n', (`LH_C('p', (`LH_C('l', (`LH_C('a', (`LH_C('c', (`LH_C('e', (`LH_C(' ', (`LH_C('t', (`LH_C('o', (`LH_C(' ', (`LH_C('s', (`LH_C('e', (`LH_C('e', (`LH_C(' ', (`LH_N)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('f', (`LH_C('o', (`LH_C('r', (`LH_C('m', (`LH_C('a', (`LH_C('l', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('v', (`LH_C('e', (`LH_C('l', (`LH_C('o', (`LH_C('p', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('s', (`LH_C(' ', (`LH_C('o', (`LH_C('f', (`LH_C(' ', (`LH_C('t', (`LH_C('e', (`LH_C('x', (`LH_C('t', (`LH_C('b', (`LH_C('o', (`LH_C('o', (`LH_C('k', (`LH_C(' ', (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C('s', (`LH_C('.', (`LH_C(' ', (`LH_C('I', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('s', (`LH_C('i', (`LH_C('g', (`LH_C('n', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('m', (`LH_C('u', (`LH_C('n', (`LH_C('i', (`LH_C('t', (`LH_C('y', (`LH_C(',', (`LH_C(' ', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('o', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C('r', (`LH_C(' ', (`LH_C('h', (`LH_C('a', (`LH_C('n', (`LH_C('d', (`LH_C(',', (`LH_C(' ', (`LH_C('i', (`LH_C('t', (`LH_C(' ', (`LH_C('m', (`LH_C('a', (`LH_C('y', (`LH_C(' ', (`LH_C('b', (`LH_C('e', (`LH_C(' ', (`LH_C('w', (`LH_C('e', (`LH_C('l', (`LH_C('l', (`LH_C(' ', (`LH_C('k', (`LH_C('n', (`LH_C('o', (`LH_C('w', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('a', (`LH_C('t', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('t', (`LH_C('e', (`LH_C('x', (`LH_C('t', (`LH_C('b', (`LH_C('o', (`LH_C('o', (`LH_C('k', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('s', (`LH_C('o', (`LH_C('l', (`LH_C('u', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('o', (`LH_C(' ', (`LH_C('a', (`LH_C(' ', (`LH_C('p', (`LH_C('r', (`LH_C('o', (`LH_C('b', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C(' ', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('n', (`LH_C('o', (`LH_C('t', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('m', (`LH_C('o', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('e', (`LH_C('f', (`LH_C('f', (`LH_C('i', (`LH_C('c', (`LH_C('i', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(' ', (`LH_C('p', (`LH_C('o', (`LH_C('s', (`LH_C('s', (`LH_C('i', (`LH_C('b', (`LH_C('l', (`LH_C('e', (`LH_C('.', (`LH_C(' ', (`LH_C('H', (`LH_C('o', (`LH_C('w', (`LH_C('e', (`LH_C('v', (`LH_C('e', (`LH_C('r', (`LH_C(',', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('p', (`LH_C('r', (`LH_C('e', (`LH_C('s', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('m', (`LH_C('o', (`LH_C('r', (`LH_C('e', (`LH_C(' ', (`LH_C('e', (`LH_C('f', (`LH_C('f', (`LH_C('i', (`LH_C('c', (`LH_C('i', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('l', (`LH_C('u', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(',', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('s', (`LH_C('i', (`LH_C('g', (`LH_C('n', (`LH_C('e', (`LH_C('r', (`LH_C(' ', (`LH_C('w', (`LH_C('i', (`LH_C('l', (`LH_C('l', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('u', (`LH_C('s', (`LH_C('u', (`LH_C('a', (`LH_C('l', (`LH_C('l', (`LH_C('y', (`LH_C(' ', (`LH_C('o', (`LH_C('m', (`LH_C('i', (`LH_C('t', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('m', (`LH_C('e', (`LH_C(' ', (`LH_C('o', (`LH_C('f', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('t', (`LH_C('a', (`LH_C('i', (`LH_C('l', (`LH_C('s', (`LH_C(',', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('c', (`LH_C('r', (`LH_C('e', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C(' ', (`LH_C('a', (`LH_C('n', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C(' ', (`LH_C('g', (`LH_C('a', (`LH_C('p', (`LH_C(' ', (`LH_C('b', (`LH_C('e', (`LH_C('t', (`LH_C('w', (`LH_C('e', (`LH_C('e', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('a', (`LH_C('b', (`LH_C('s', (`LH_C('t', (`LH_C('r', (`LH_C('a', (`LH_C('c', (`LH_C('t', (`LH_C(' ', (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C(' ', (`LH_C('a', (`LH_C('n', (`LH_C('d', (`LH_C(' ', (`LH_C('i', (`LH_C('t', (`LH_C('s', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('c', (`LH_C('r', (`LH_C('e', (`LH_C('t', (`LH_C('e', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C('.', (`LH_C(' ', (`LH_C('T', (`LH_C('h', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('t', (`LH_C('r', (`LH_C('a', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('t', (`LH_C('o', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('f', (`LH_C('o', (`LH_C('r', (`LH_C('m', (`LH_C('a', (`LH_C('l', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('v', (`LH_C('e', (`LH_C('l', (`LH_C('o', (`LH_C('p', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(',', (`LH_C(' ', (`LH_C('w', (`LH_C('h', (`LH_C('i', (`LH_C('c', (`LH_C('h', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('u', (`LH_C('s', (`LH_C('u', (`LH_C('a', (`LH_C('l', (`LH_C('l', (`LH_C('y', (`LH_C(' ', (`LH_C('p', (`LH_C('r', (`LH_C('e', (`LH_C('s', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('s', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('t', (`LH_C('e', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('c', (`LH_C('r', (`LH_C('e', (`LH_C('t', (`LH_C('e', (`LH_C(' ', (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('o', (`LH_C('f', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('l', (`LH_C('e', (`LH_C('s', (`LH_C('s', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('e', (`LH_C('f', (`LH_C('f', (`LH_C('i', (`LH_C('c', (`LH_C('i', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('l', (`LH_C('u', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C('.', (`LH_C('|', (`LH_C(' ', (`LH_C('|', (`LH_N))))))))))))))))))))))))))))))))))))))))))))));;
//│ 		let rec null_lh _lh_null_arg1_0 =
//│ 		  (match _lh_null_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_0, _lh_null_LH_C_1_0) -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec unwords_lh _lh_unwords_arg1_0 =
//│ 		  (match _lh_unwords_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_unwords_LH_C_0_0, _lh_unwords_LH_C_1_0) -> 
//│ 		      (let rec go_0 = (fun _lh_go_arg1_0 -> 
//│ 		        (match _lh_go_arg1_0 with
//│ 		          | `LH_N -> 
//│ 		            (`LH_N)
//│ 		          | `LH_C(_lh_go_LH_C_0_0, _lh_go_LH_C_1_0) -> 
//│ 		            (`LH_C(' ', ((mappend_lh _lh_go_LH_C_0_0) (go_0 _lh_go_LH_C_1_0))))
//│ 		          | _ -> 
//│ 		            (failwith "error"))) in
//│ 		        ((mappend_lh _lh_unwords_LH_C_0_0) (go_0 _lh_unwords_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec map_lh f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C((f_0 h_0), ((map_lh f_0) t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec concat_lh lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      ((mappend_lh h_7) (concat_lh t_7))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec unlines_lh _lh_unlines_arg1_0 =
//│ 		  (concat_lh ((map_lh (fun l_1 -> 
//│ 		    ((mappend_lh l_1) (`LH_C('|', (`LH_N)))))) _lh_unlines_arg1_0));;
//│ 		let rec fold1_lh _lh_fold1_arg1_0 _lh_fold1_arg2_0 _lh_fold1_arg3_0 =
//│ 		  (match _lh_fold1_arg3_0 with
//│ 		    | `LH_C(_lh_fold1_LH_C_0_0, _lh_fold1_LH_C_1_0) -> 
//│ 		      (match _lh_fold1_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (_lh_fold1_arg2_0 _lh_fold1_LH_C_0_0)
//│ 		        | _ -> 
//│ 		          ((_lh_fold1_arg1_0 _lh_fold1_LH_C_0_0) (((fold1_lh _lh_fold1_arg1_0) _lh_fold1_arg2_0) _lh_fold1_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec unformat_lh _lh_unformat_arg1_0 =
//│ 		  ((fold1_lh (fun xs_1 ys_1 -> 
//│ 		    ((mappend_lh ((mappend_lh xs_1) (`LH_C(_lh_unformat_arg1_0, (`LH_N))))) ys_1))) (fun x_1 -> 
//│ 		    x_1));;
//│ 		let rec unparas_lh _lh_unparas_arg1_0 =
//│ 		  ((unformat_lh (`LH_N)) _lh_unparas_arg1_0);;
//│ 		let rec unparse_lh _lh_unparse_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_0 -> 
//│ 		    ((fun _lh_funcomp_x_1 -> 
//│ 		      (unlines_lh ((map_lh unwords_lh) _lh_funcomp_x_1))) (unparas_lh _lh_funcomp_x_0))) _lh_unparse_arg1_0);;
//│ 		let rec drop_lh _lh_drop_arg1_0 _lh_drop_arg2_0 =
//│ 		  (match _lh_drop_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0) -> 
//│ 		      (if (_lh_drop_arg1_0 <= 0) then
//│ 		        (`LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0))
//│ 		      else
//│ 		        ((drop_lh (_lh_drop_arg1_0 - 1)) _lh_drop_LH_C_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec take_lh n_0 ls_4 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match ls_4 with
//│ 		      | `LH_C(h_4, t_4) -> 
//│ 		        (`LH_C(h_4, ((take_lh (n_0 - 1)) t_4)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec splitAt_lh _lh_splitAt_arg1_0 _lh_splitAt_arg2_0 =
//│ 		  (`LH_P2(((take_lh _lh_splitAt_arg1_0) _lh_splitAt_arg2_0), ((drop_lh _lh_splitAt_arg1_0) _lh_splitAt_arg2_0)));;
//│ 		let rec tile_lh _lh_tile_arg1_0 _lh_tile_arg2_0 =
//│ 		  (match _lh_tile_arg2_0 with
//│ 		    | `LH_P2(_lh_tile_LH_P2_0_0, _lh_tile_LH_P2_1_0) -> 
//│ 		      (match _lh_tile_LH_P2_0_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_N)
//│ 		        | `LH_C(_lh_tile_LH_C_0_0, _lh_tile_LH_C_1_0) -> 
//│ 		          (let rec l_0 = (_lh_tile_LH_P2_1_0 - _lh_tile_LH_C_0_0) in
//│ 		            (let rec _lh_matchIdent_0 = ((splitAt_lh l_0) _lh_tile_arg1_0) in
//│ 		              (match _lh_matchIdent_0 with
//│ 		                | `LH_P2(_lh_tile_LH_P2_0_1, _lh_tile_LH_P2_1_1) -> 
//│ 		                  (`LH_C(_lh_tile_LH_P2_0_1, ((tile_lh _lh_tile_LH_P2_1_1) (`LH_P2(((drop_lh l_0) (`LH_C(_lh_tile_LH_C_0_0, _lh_tile_LH_C_1_0))), _lh_tile_LH_C_0_0)))))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec head_lh ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      h_2
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec last'_lh _lh_last'_arg1_0 =
//│ 		  (match _lh_last'_arg1_0 with
//│ 		    | `LH_P2(_lh_last'_LH_P2_0_0, _lh_last'_LH_P2_1_0) -> 
//│ 		      (if (not (null_lh _lh_last'_LH_P2_1_0)) then
//│ 		        (head_lh _lh_last'_LH_P2_1_0)
//│ 		      else
//│ 		        (head_lh _lh_last'_LH_P2_0_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec length_lh ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      (1 + (length_lh t_5))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec thd3_lh _lh_thd3_arg1_0 =
//│ 		  (match _lh_thd3_arg1_0 with
//│ 		    | `LH_P3(_lh_thd3_LH_P3_0_0, _lh_thd3_LH_P3_1_0, _lh_thd3_LH_P3_2_0) -> 
//│ 		      _lh_thd3_LH_P3_2_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec fst3_lh _lh_fst3_arg1_0 =
//│ 		  (match _lh_fst3_arg1_0 with
//│ 		    | `LH_P3(_lh_fst3_LH_P3_0_0, _lh_fst3_LH_P3_1_0, _lh_fst3_LH_P3_2_0) -> 
//│ 		      _lh_fst3_LH_P3_0_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec width_tl_lh _lh_width_tl_arg1_0 =
//│ 		  (fst3_lh _lh_width_tl_arg1_0);;
//│ 		let rec head'_lh _lh_head'_arg1_0 =
//│ 		  (match _lh_head'_arg1_0 with
//│ 		    | `LH_P2(_lh_head'_LH_P2_0_0, _lh_head'_LH_P2_1_0) -> 
//│ 		      (if (not (null_lh _lh_head'_LH_P2_0_0)) then
//│ 		        (head_lh _lh_head'_LH_P2_0_0)
//│ 		      else
//│ 		        (head_lh _lh_head'_LH_P2_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec null'_lh _lh_null'_arg1_0 =
//│ 		  (match _lh_null'_arg1_0 with
//│ 		    | `LH_P2(_lh_null'_LH_P2_0_0, _lh_null'_LH_P2_1_0) -> 
//│ 		      (match _lh_null'_LH_P2_0_0 with
//│ 		        | `LH_N -> 
//│ 		          (match _lh_null'_LH_P2_1_0 with
//│ 		            | `LH_N -> 
//│ 		              true
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec len_tl_lh _lh_len_tl_arg1_0 =
//│ 		  (thd3_lh _lh_len_tl_arg1_0);;
//│ 		let rec tail_lh ls_3 =
//│ 		  (match ls_3 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      t_3
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec reverse_helper_lh ls_7 a_0 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      ((reverse_helper_lh t_8) (`LH_C(h_8, a_0)))
//│ 		    | `LH_N -> 
//│ 		      a_0);;
//│ 		let rec reverse_lh ls_6 =
//│ 		  ((reverse_helper_lh ls_6) (`LH_N));;
//│ 		let rec single_lh _lh_single_arg1_0 =
//│ 		  (match _lh_single_arg1_0 with
//│ 		    | `LH_C(_lh_single_LH_C_0_0, _lh_single_LH_C_1_0) -> 
//│ 		      (match _lh_single_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec init'_lh _lh_init'_arg1_0 =
//│ 		  (match _lh_init'_arg1_0 with
//│ 		    | `LH_P2(_lh_init'_LH_P2_0_0, _lh_init'_LH_P2_1_0) -> 
//│ 		      (if (null_lh _lh_init'_LH_P2_1_0) then
//│ 		        (`LH_P2((`LH_N), (`LH_N)))
//│ 		      else
//│ 		        (if (single_lh _lh_init'_LH_P2_1_0) then
//│ 		          (let rec _lh_matchIdent_1 = ((splitAt_lh ((length_lh _lh_init'_LH_P2_0_0) / 2)) _lh_init'_LH_P2_0_0) in
//│ 		            (match _lh_matchIdent_1 with
//│ 		              | `LH_P2(_lh_init'_LH_P2_0_1, _lh_init'_LH_P2_1_1) -> 
//│ 		                (`LH_P2(_lh_init'_LH_P2_0_1, (reverse_lh _lh_init'_LH_P2_1_1)))
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        else
//│ 		          (`LH_P2(_lh_init'_LH_P2_0_0, (tail_lh _lh_init'_LH_P2_1_0)))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec cons'_lh _lh_cons'_arg1_0 _lh_cons'_arg2_0 =
//│ 		  (match _lh_cons'_arg2_0 with
//│ 		    | `LH_P2(_lh_cons'_LH_P2_0_0, _lh_cons'_LH_P2_1_0) -> 
//│ 		      (if (not (null_lh _lh_cons'_LH_P2_1_0)) then
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_0, _lh_cons'_LH_P2_0_0)), _lh_cons'_LH_P2_1_0))
//│ 		      else
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_0, (`LH_N))), _lh_cons'_LH_P2_0_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec ceildiv_lh _lh_ceildiv_arg1_0 _lh_ceildiv_arg2_0 =
//│ 		  (((_lh_ceildiv_arg1_0 + _lh_ceildiv_arg2_0) - 1) / _lh_ceildiv_arg2_0);;
//│ 		let rec tail'_lh _lh_tail'_arg1_0 =
//│ 		  (match _lh_tail'_arg1_0 with
//│ 		    | `LH_P2(_lh_tail'_LH_P2_0_0, _lh_tail'_LH_P2_1_0) -> 
//│ 		      (if (null_lh _lh_tail'_LH_P2_0_0) then
//│ 		        (`LH_P2((`LH_N), (`LH_N)))
//│ 		      else
//│ 		        (if (single_lh _lh_tail'_LH_P2_0_0) then
//│ 		          (let rec _lh_matchIdent_3 = ((splitAt_lh ((length_lh _lh_tail'_LH_P2_1_0) / 2)) _lh_tail'_LH_P2_1_0) in
//│ 		            (match _lh_matchIdent_3 with
//│ 		              | `LH_P2(_lh_tail'_LH_P2_0_1, _lh_tail'_LH_P2_1_1) -> 
//│ 		                (`LH_P2((reverse_lh _lh_tail'_LH_P2_1_1), _lh_tail'_LH_P2_0_1))
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        else
//│ 		          (`LH_P2((tail_lh _lh_tail'_LH_P2_0_0), _lh_tail'_LH_P2_1_0))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec optw_lh =
//│ 		  63;;
//│ 		let rec snd3_lh _lh_snd3_arg1_0 =
//│ 		  (match _lh_snd3_arg1_0 with
//│ 		    | `LH_P3(_lh_snd3_LH_P3_0_0, _lh_snd3_LH_P3_1_0, _lh_snd3_LH_P3_2_0) -> 
//│ 		      _lh_snd3_LH_P3_1_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec cost_tl_lh _lh_cost_tl_arg1_0 =
//│ 		  (snd3_lh _lh_cost_tl_arg1_0);;
//│ 		let rec min_lh _lh_min_arg1_0 _lh_min_arg2_0 =
//│ 		  (if (_lh_min_arg1_0 > _lh_min_arg2_0) then
//│ 		    _lh_min_arg2_0
//│ 		  else
//│ 		    _lh_min_arg1_0);;
//│ 		let rec maxw_lh =
//│ 		  70;;
//│ 		let rec single'_lh _lh_single'_arg1_0 =
//│ 		  (match _lh_single'_arg1_0 with
//│ 		    | `LH_P2(_lh_single'_LH_P2_0_0, _lh_single'_LH_P2_1_0) -> 
//│ 		      (((null_lh _lh_single'_LH_P2_0_0) && (single_lh _lh_single'_LH_P2_1_0)) || ((single_lh _lh_single'_LH_P2_0_0) && (null_lh _lh_single'_LH_P2_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec stepr_lh _lh_stepr_arg1_0 _lh_stepr_arg2_0 =
//│ 		  (match _lh_stepr_arg2_0 with
//│ 		    | `LH_P3(_lh_stepr_LH_P3_0_0, _lh_stepr_LH_P3_1_0, _lh_stepr_LH_P3_2_0) -> 
//│ 		      (let rec tot_width_0 = ((_lh_stepr_arg1_0 + 1) + _lh_stepr_LH_P3_1_0) in
//│ 		        (let rec tot_len_0 = (1 + _lh_stepr_LH_P3_2_0) in
//│ 		          (let rec single_0 = (fun p_0 -> 
//│ 		            ((len_tl_lh p_0) = 0)) in
//│ 		            (let rec width_hd_0 = (fun p_1 -> 
//│ 		              (if (single_0 p_1) then
//│ 		                tot_width_0
//│ 		              else
//│ 		                ((tot_width_0 - (width_tl_lh p_1)) - 1))) in
//│ 		              (let rec cost_0 = (fun p_2 -> 
//│ 		                (if (single_0 p_2) then
//│ 		                  0
//│ 		                else
//│ 		                  ((cost_tl_lh p_2) + (let rec a_1 = (optw_lh - (width_hd_0 p_2)) in
//│ 		                    (a_1 * a_1))))) in
//│ 		                (let rec old_width_hd_0 = (fun p_3 -> 
//│ 		                  (if (single_0 p_3) then
//│ 		                    _lh_stepr_LH_P3_1_0
//│ 		                  else
//│ 		                    ((_lh_stepr_LH_P3_1_0 - (width_tl_lh p_3)) - 1))) in
//│ 		                  (let rec new_0 = (fun p_4 -> 
//│ 		                    (if (single_0 p_4) then
//│ 		                      (`LH_P3(_lh_stepr_LH_P3_1_0, 0, _lh_stepr_LH_P3_2_0))
//│ 		                    else
//│ 		                      (`LH_P3(_lh_stepr_LH_P3_1_0, ((cost_tl_lh p_4) + (let rec x_0 = (optw_lh - (old_width_hd_0 p_4)) in
//│ 		                        (x_0 * x_0))), _lh_stepr_LH_P3_2_0)))) in
//│ 		                    (let rec trim_0 = (fun ps_pq_0 -> 
//│ 		                      (if (null'_lh ps_pq_0) then
//│ 		                        ps_pq_0
//│ 		                      else
//│ 		                        (if (single'_lh ps_pq_0) then
//│ 		                          ps_pq_0
//│ 		                        else
//│ 		                          (let rec ps_p_0 = (init'_lh ps_pq_0) in
//│ 		                            (let rec q_0 = (last'_lh ps_pq_0) in
//│ 		                              (let rec p_5 = (last'_lh ps_p_0) in
//│ 		                                (if ((cost_0 p_5) <= (cost_0 q_0)) then
//│ 		                                  (trim_0 ps_p_0)
//│ 		                                else
//│ 		                                  ps_pq_0))))))) in
//│ 		                      (let rec drop_nofit_0 = (fun ps_p_1 -> 
//│ 		                        (if (null'_lh ps_p_1) then
//│ 		                          ps_p_1
//│ 		                        else
//│ 		                          (if ((width_hd_0 (last'_lh ps_p_1)) > maxw_lh) then
//│ 		                            (drop_nofit_0 (init'_lh ps_p_1))
//│ 		                          else
//│ 		                            ps_p_1))) in
//│ 		                        (let rec bf_0 = (fun p_6 q_1 -> 
//│ 		                          (let rec wqh_0 = (width_hd_0 q_1) in
//│ 		                            (let rec rqh_0 = ((maxw_lh - wqh_0) + 1) in
//│ 		                              (if ((single_0 q_1) && ((cost_tl_lh p_6) = 0)) then
//│ 		                                ((min_lh (optw_lh - (width_hd_0 p_6))) rqh_0)
//│ 		                              else
//│ 		                                (if (single_0 q_1) then
//│ 		                                  rqh_0
//│ 		                                else
//│ 		                                  ((min_lh ((ceildiv_lh ((cost_0 p_6) - (cost_0 q_1))) (2 * (wqh_0 - (width_hd_0 p_6))))) rqh_0)))))) in
//│ 		                          (let rec myAdd_0 = (fun p_7 qr_rs_0 -> 
//│ 		                            (if ((single'_lh qr_rs_0) || (null'_lh qr_rs_0)) then
//│ 		                              ((cons'_lh p_7) qr_rs_0)
//│ 		                            else
//│ 		                              (let rec q_2 = (head'_lh qr_rs_0) in
//│ 		                                (let rec r_rs_0 = (tail'_lh qr_rs_0) in
//│ 		                                  (let rec r_0 = (head'_lh r_rs_0) in
//│ 		                                    (if (((bf_0 p_7) q_2) <= ((bf_0 q_2) r_0)) then
//│ 		                                      ((myAdd_0 p_7) r_rs_0)
//│ 		                                    else
//│ 		                                      ((cons'_lh p_7) qr_rs_0))))))) in
//│ 		                            (`LH_P3((trim_0 (drop_nofit_0 ((myAdd_0 (new_0 (last'_lh _lh_stepr_LH_P3_0_0))) _lh_stepr_LH_P3_0_0))), tot_width_0, tot_len_0)))))))))))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec nil'_lh =
//│ 		  (`LH_P2((`LH_N), (`LH_N)));;
//│ 		let rec startr_lh _lh_startr_arg1_0 =
//│ 		  (if (_lh_startr_arg1_0 <= maxw_lh) then
//│ 		    (`LH_P3(((cons'_lh (`LH_P3(0, 0, 0))) nil'_lh), _lh_startr_arg1_0, 1))
//│ 		  else
//│ 		    ((failwith "error") (`LH_C('s', (`LH_C('t', (`LH_C('a', (`LH_C('r', (`LH_C('t', (`LH_C('r', (`LH_C(' ', (`LH_C('p', (`LH_C('a', (`LH_C('r', (`LH_C('a', (`LH_C('m', (`LH_C(' ', (`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_N)))))))))))))))))))))))))))))))))))))));;
//│ 		let rec scan1_lh _lh_scan1_arg1_0 _lh_scan1_arg2_0 =
//│ 		  ((fold1_lh (fun a_2 s_0 -> 
//│ 		    (`LH_C(((_lh_scan1_arg1_0 a_2) (head_lh s_0)), s_0)))) (fun a_3 -> 
//│ 		    (`LH_C((_lh_scan1_arg2_0 a_3), (`LH_N)))));;
//│ 		let rec par3_lh _lh_par3_arg1_0 =
//│ 		  (let rec zs_0 = (((scan1_lh stepr_lh) startr_lh) ((map_lh length_lh) _lh_par3_arg1_0)) in
//│ 		    ((tile_lh _lh_par3_arg1_0) (`LH_P2(((map_lh (fun _lh_funcomp_x_3 -> 
//│ 		      ((fun _lh_funcomp_x_4 -> 
//│ 		        (len_tl_lh (last'_lh _lh_funcomp_x_4))) (fst3_lh _lh_funcomp_x_3)))) zs_0), (thd3_lh (head_lh zs_0))))));;
//│ 		let rec break_lh _lh_break_arg1_1 _lh_break_arg2_1 =
//│ 		  (match _lh_break_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2((`LH_N), (`LH_N)))
//│ 		    | `LH_C(_lh_break_LH_C_0_0, _lh_break_LH_C_1_0) -> 
//│ 		      (if (_lh_break_arg1_1 _lh_break_LH_C_0_0) then
//│ 		        (`LH_P2((`LH_N), (`LH_C(_lh_break_LH_C_0_0, _lh_break_LH_C_1_0))))
//│ 		      else
//│ 		        (let rec _lh_matchIdent_2 = ((break_lh _lh_break_arg1_1) _lh_break_LH_C_1_0) in
//│ 		          (match _lh_matchIdent_2 with
//│ 		            | `LH_P2(_lh_break_LH_P2_0_0, _lh_break_LH_P2_1_0) -> 
//│ 		              (`LH_P2((`LH_C(_lh_break_LH_C_0_0, _lh_break_LH_P2_0_0)), _lh_break_LH_P2_1_0))
//│ 		            | _ -> 
//│ 		              (failwith "error"))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec lines_lh _lh_lines_arg1_0 =
//│ 		  (let rec _lh_matchIdent_6 = ((break_lh (fun x_3 -> 
//│ 		    (x_3 = '|'))) _lh_lines_arg1_0) in
//│ 		    (match _lh_matchIdent_6 with
//│ 		      | `LH_P2(_lh_lines_LH_P2_0_0, _lh_lines_LH_P2_1_0) -> 
//│ 		        (`LH_C(_lh_lines_LH_P2_0_0, (let rec _lh_matchIdent_7 = _lh_lines_LH_P2_1_0 in
//│ 		          (match _lh_matchIdent_7 with
//│ 		            | `LH_N -> 
//│ 		              (`LH_N)
//│ 		            | `LH_C(_lh_lines_LH_C_0_0, _lh_lines_LH_C_1_0) -> 
//│ 		              (lines_lh _lh_lines_LH_C_1_0)
//│ 		            | _ -> 
//│ 		              (failwith "error")))))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec filter_lh f_1 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (if (f_1 h_1) then
//│ 		        (`LH_C(h_1, ((filter_lh f_1) t_1)))
//│ 		      else
//│ 		        ((filter_lh f_1) t_1))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec format_lh _lh_format_arg1_0 _lh_format_arg2_0 =
//│ 		  (match _lh_format_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_C((`LH_N), (`LH_N)))
//│ 		    | _ -> 
//│ 		      let rec break_0 = (fun _lh_break_arg1_0 _lh_break_arg2_0 _lh_break_arg3_0 -> 
//│ 		        (if (_lh_break_arg1_0 = _lh_break_arg2_0) then
//│ 		          (`LH_C((`LH_N), _lh_break_arg3_0))
//│ 		        else
//│ 		          (`LH_C((`LH_C(_lh_break_arg2_0, (head_lh _lh_break_arg3_0))), (tail_lh _lh_break_arg3_0)))))
//│ 		      and start_0 = (fun _lh_start_arg1_0 _lh_start_arg2_0 -> 
//│ 		        (((break_0 _lh_start_arg1_0) _lh_start_arg2_0) (`LH_C((`LH_N), (`LH_N)))))
//│ 		      in (((fold1_lh (break_0 _lh_format_arg1_0)) (start_0 _lh_format_arg1_0)) _lh_format_arg2_0));;
//│ 		let rec paras_lh _lh_paras_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_2 -> 
//│ 		    ((filter_lh (fun x_2 -> 
//│ 		      ((`LH_N) <> x_2))) ((format_lh (`LH_N)) _lh_funcomp_x_2))) _lh_paras_arg1_0);;
//│ 		let rec dropWhile_lh _lh_dropWhile_arg1_0 _lh_dropWhile_arg2_0 =
//│ 		  (match _lh_dropWhile_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_dropWhile_LH_C_0_0, _lh_dropWhile_LH_C_1_0) -> 
//│ 		      (if (_lh_dropWhile_arg1_0 _lh_dropWhile_LH_C_0_0) then
//│ 		        ((dropWhile_lh _lh_dropWhile_arg1_0) _lh_dropWhile_LH_C_1_0)
//│ 		      else
//│ 		        (`LH_C(_lh_dropWhile_LH_C_0_0, _lh_dropWhile_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec isSpace_lh _lh_isSpace_arg1_0 =
//│ 		  (_lh_isSpace_arg1_0 = ' ');;
//│ 		let rec words_lh _lh_words_arg1_0 =
//│ 		  (let rec _lh_matchIdent_4 = ((dropWhile_lh isSpace_lh) _lh_words_arg1_0) in
//│ 		    (match _lh_matchIdent_4 with
//│ 		      | `LH_N -> 
//│ 		        (`LH_N)
//│ 		      | `LH_C(_lh_words_LH_C_0_0, _lh_words_LH_C_1_0) -> 
//│ 		        (let rec _lh_matchIdent_5 = ((break_lh isSpace_lh) (`LH_C(_lh_words_LH_C_0_0, _lh_words_LH_C_1_0))) in
//│ 		          (match _lh_matchIdent_5 with
//│ 		            | `LH_P2(_lh_words_LH_P2_0_0, _lh_words_LH_P2_1_0) -> 
//│ 		              (`LH_C(_lh_words_LH_P2_0_0, (words_lh _lh_words_LH_P2_1_0)))
//│ 		            | _ -> 
//│ 		              (failwith "error")))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec parse_lh _lh_parse_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_5 -> 
//│ 		    ((fun _lh_funcomp_x_6 -> 
//│ 		      (paras_lh ((map_lh words_lh) _lh_funcomp_x_6))) (lines_lh _lh_funcomp_x_5))) _lh_parse_arg1_0);;
//│ 		let rec fmt_lh _lh_fmt_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_7 -> 
//│ 		    ((fun _lh_funcomp_x_8 -> 
//│ 		      (unparse_lh ((map_lh (fun _lh_funcomp_x_9 -> 
//│ 		        (par3_lh (concat_lh _lh_funcomp_x_9)))) _lh_funcomp_x_8))) (parse_lh _lh_funcomp_x_7))) _lh_fmt_arg1_0);;
//│ 		let rec testPara_nofib_lh _lh_testPara_nofib_arg1_0 =
//│ 		  (if (null_lh (test_lh 0)) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (fmt_lh (test_lh 0)));;
//│ 		(testPara_nofib_lh 0)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁰ = splitAt_lh(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰}: 586
//│ 	case _lh_format_arg2⁰ of {LH_N  => [LH_C [LH_N] [LH_N]] | _  => SINGLE_LINE_LET_GROUP_STUB}: 658
//│ 	case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}: 2487
//│ 	case _lh_fold1_arg3⁰ of {LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))} | _  => error⁰}: 2489
//│ [LH_N]: 11 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁰ = splitAt_lh(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰}: 586
//│ 	case _lh_format_arg2⁰ of {LH_N  => [LH_C [LH_N] [LH_N]] | _  => SINGLE_LINE_LET_GROUP_STUB}: 658
//│ 	case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}: 2487
//│ 	case _lh_fold1_arg3⁰ of {LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))} | _  => error⁰}: 2489
//│ [LH_C h¹ filter_lh(f¹, t¹)]: 25 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_N]: 32 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_N]: 63 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_N]: 65 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_N]: 100 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_N]: 106 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ [LH_C h⁸ a⁰]: 115 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 209 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰]: 231 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 434 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_N]: 451 --->
//│ 	case _lh_matchIdent⁴ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁵ = break_lh(isSpace_lh, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 2426
//│ [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]: 462 --->
//│ 	case _lh_matchIdent⁴ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁵ = break_lh(isSpace_lh, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 2426
//│ [LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_N]: 484 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ [LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_N]: 507 --->
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁰ = splitAt_lh(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰}: 586
//│ [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 515 --->
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁰ = splitAt_lh(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰}: 586
//│ [LH_N]: 547 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_N]: 554 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]: 575 --->
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰]: 578 --->
//│ 	case _lh_tile_arg2⁰ of {LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁰ = splitAt_lh(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰} | _  => error⁰}: 588
//│ [LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_N]: 597 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ [LH_C _lh_unformat_arg1⁰ [LH_N]]: 598 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_N]: 611 --->
//│ 	NoCons
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ [LH_N]: 612 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ [LH_C [LH_N] [LH_N]]: 613 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ [LH_N]: 619 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_C [LH_N] _lh_break_arg3⁰]: 621 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)]: 626 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_N]: 640 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_N]: 641 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ [LH_C [LH_N] [LH_N]]: 642 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ [LH_N]: 2003 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ [LH_N]: 2004 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ [LH_P2 [LH_N] [LH_N]]: 2005 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent¹ = splitAt_lh(div⁰(length_lh(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 2037
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)]: 2025 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent¹ = splitAt_lh(div⁰(length_lh(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 2037
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh(_lh_init'_LH_P2_1⁰)]: 2033 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent¹ = splitAt_lh(div⁰(length_lh(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 2037
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ [LH_P2 take_lh(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]: 2049 --->
//│ 	case _lh_matchIdent⁰ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰}: 582
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)] | _  => error⁰}: 2027
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰}: 2144
//│ [LH_N]: 2053 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_N]: 2054 --->
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_matchIdent⁷ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh(_lh_lines_LH_C_1⁰) | _  => error⁰}: 2515
//│ [LH_P2 [LH_N] [LH_N]]: 2055 --->
//│ 	case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰}: 2076
//│ 	case _lh_matchIdent⁵ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)] | _  => error⁰}: 2423
//│ 	case _lh_matchIdent⁶ of {LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁷ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁷ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh(_lh_lines_LH_C_1⁰) | _  => error⁰}] | _  => error⁰}: 2519
//│ [LH_N]: 2059 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]: 2062 --->
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_matchIdent⁷ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh(_lh_lines_LH_C_1⁰) | _  => error⁰}: 2515
//│ [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]]: 2063 --->
//│ 	case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰}: 2076
//│ 	case _lh_matchIdent⁵ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)] | _  => error⁰}: 2423
//│ 	case _lh_matchIdent⁶ of {LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁷ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁷ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh(_lh_lines_LH_C_1⁰) | _  => error⁰}] | _  => error⁰}: 2519
//│ [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 2072 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]: 2074 --->
//│ 	case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰}: 2076
//│ 	case _lh_matchIdent⁵ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)] | _  => error⁰}: 2423
//│ 	case _lh_matchIdent⁶ of {LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁷ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁷ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh(_lh_lines_LH_C_1⁰) | _  => error⁰}] | _  => error⁰}: 2519
//│ [LH_N]: 2120 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ [LH_N]: 2121 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ [LH_P2 [LH_N] [LH_N]]: 2122 --->
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 2142 --->
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 2150 --->
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ [LH_N]: 2162 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ [LH_C '|' [LH_N]]: 2163 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_P2 map_lh((fun _lh_funcomp_x³ -> (fun _lh_funcomp_x⁴ -> len_tl_lh(last'_lh(_lh_funcomp_x⁴)))(fst3_lh(_lh_funcomp_x³))), zs⁰) thd3_lh(head_lh(zs⁰))]: 2268 --->
//│ 	case _lh_tile_arg2⁰ of {LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁰ = splitAt_lh(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰} | _  => error⁰}: 588
//│ [LH_P3 0 0 0]: 2285 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_P3 cons'_lh([LH_P3 0 0 0], nil'_lh) _lh_startr_arg1⁰ 1]: 2291 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 2359 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent¹ = splitAt_lh(div⁰(length_lh(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 2037
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ [LH_N]: 2361 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ [LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 2364 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent¹ = splitAt_lh(div⁰(length_lh(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 2037
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ [LH_N]: 2376 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_N]: 2378 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_N]: 2408 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰]: 2414 --->
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ [LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525
//│ [LH_N]: 2493 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446
//│ [LH_N]: 2494 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39
//│ 	case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64
//│ 	case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444
//│ [LH_P2 [LH_N] [LH_N]]: 2495 --->
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367
//│ [LH_N]: 2510 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁷ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁷ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh(_lh_lines_LH_C_1⁰) | _  => error⁰}]: 2517 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C h¹ filter_lh(f¹, t¹)]: 25
//│ 	[LH_N]: 32
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ 	[LH_N]: 2510
//│ 	[LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁷ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁷ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh(_lh_lines_LH_C_1⁰) | _  => error⁰}]: 2517
//│ case ls¹ of {LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lh(f¹, t¹)] else filter_lh(f¹, t¹) | LH_N  => [LH_N]}: 33 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_N]: 612
//│ 	[LH_C [LH_N] [LH_N]]: 613
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 39 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2004
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2121
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ 	[LH_N]: 2494
//│ case ls³ of {LH_C h³ t³ => t³ | LH_N  => error⁰}: 44 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2004
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2121
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ 	[LH_N]: 2494
//│ case ls⁴ of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 64 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 515
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2004
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2121
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ 	[LH_N]: 2494
//│ case ls⁵ of {LH_C h⁵ t⁵ => (1 + length_lh(t⁵)) | LH_N  => 0}: 78 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 547
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_N]: 611
//│ 	[LH_N]: 619
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)]: 626
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 640
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2004
//│ 	[LH_N]: 2053
//│ 	[LH_N]: 2059
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 2072
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2121
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ 	[LH_N]: 2494
//│ case xs⁰ of {LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys⁰)] | LH_N  => ys⁰}: 89 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 547
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_N]: 611
//│ 	[LH_N]: 619
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)]: 626
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 640
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2053
//│ 	[LH_N]: 2059
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 2072
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ case lss⁰ of {LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷)) | LH_N  => [LH_N]}: 101 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 547
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_N]: 611
//│ 	[LH_N]: 619
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)]: 626
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 640
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2053
//│ 	[LH_N]: 2059
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 2072
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ case ls⁷ of {LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁰]) | LH_N  => a⁰}: 118 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 515
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh(p²) + let a¹ = (optw_lh - width_hd⁰(p²))
//│ in (a¹ * a¹)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh(ps_pq⁰) then ps_pq⁰ else if single'_lh(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh(ps_pq⁰)
//│ in let q⁰ = last'_lh(ps_pq⁰)
//│ in let p⁵ = last'_lh(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh(ps_p¹)) > maxw_lh) then drop_nofit⁰(init'_lh(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh(p⁶) == 0)) then min_lh((optw_lh - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh(ceildiv_lh((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh(qr_rs⁰) || null'_lh(qr_rs⁰)) then cons'_lh(p⁷, qr_rs⁰) else let q² = head'_lh(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh(qr_rs⁰)
//│ in let r⁰ = head'_lh(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 447 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 209
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰]: 231
//│ 	[LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 434
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 547
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_N]: 619
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)]: 626
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 640
//│ 	[LH_N]: 2053
//│ 	[LH_N]: 2059
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 2072
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_P3 0 0 0]: 2285
//│ 	[LH_P3 cons'_lh([LH_P3 0 0 0], nil'_lh) _lh_startr_arg1⁰ 1]: 2291
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 465 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 209
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰]: 231
//│ 	[LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 434
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 547
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_N]: 611
//│ 	[LH_N]: 619
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)]: 626
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 640
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2053
//│ 	[LH_N]: 2054
//│ 	[LH_N]: 2059
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]: 2062
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 2072
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_P3 0 0 0]: 2285
//│ 	[LH_P3 cons'_lh([LH_P3 0 0 0], nil'_lh) _lh_startr_arg1⁰ 1]: 2291
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 504 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_P2 [LH_N] [LH_N]]: 2005
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)]: 2025
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh(_lh_init'_LH_P2_1⁰)]: 2033
//│ 	[LH_P2 [LH_N] [LH_N]]: 2122
//│ 	[LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 2142
//│ 	[LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 2150
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 2359
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 2364
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 527 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 515
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]: 575
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2004
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2121
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ 	[LH_N]: 2494
//│ case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 544 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_P2 [LH_N] [LH_N]]: 2005
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)]: 2025
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh(_lh_init'_LH_P2_1⁰)]: 2033
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 2359
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 2364
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ case _lh_matchIdent⁰ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰}: 582 --->
//│ 	[LH_P2 take_lh(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]: 2049
//│ case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁰ = splitAt_lh(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰}: 586 --->
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 515
//│ case _lh_tile_arg2⁰ of {LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁰ = splitAt_lh(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰} | _  => error⁰}: 588 --->
//│ 	[LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰]: 578
//│ 	[LH_P2 map_lh((fun _lh_funcomp_x³ -> (fun _lh_funcomp_x⁴ -> len_tl_lh(last'_lh(_lh_funcomp_x⁴)))(fst3_lh(_lh_funcomp_x³))), zs⁰) thd3_lh(head_lh(zs⁰))]: 2268
//│ case _lh_format_arg2⁰ of {LH_N  => [LH_C [LH_N] [LH_N]] | _  => SINGLE_LINE_LET_GROUP_STUB}: 658 --->
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 1997 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_P2 [LH_N] [LH_N]]: 2005
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)]: 2025
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh(_lh_init'_LH_P2_1⁰)]: 2033
//│ 	[LH_P2 [LH_N] [LH_N]]: 2122
//│ 	[LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 2142
//│ 	[LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 2150
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 2359
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 2364
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)] | _  => error⁰}: 2027 --->
//│ 	[LH_P2 take_lh(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]: 2049
//│ case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent¹ = splitAt_lh(div⁰(length_lh(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 2037 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 2005
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)]: 2025
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh(_lh_init'_LH_P2_1⁰)]: 2033
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 2359
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 2364
//│ case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰}: 2076 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 2055
//│ 	[LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]]: 2063
//│ 	[LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]: 2074
//│ case _lh_break_arg2¹ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent² = break_lh(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 2080 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 209
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰]: 231
//│ 	[LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 434
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 547
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_N]: 619
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)]: 626
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 640
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2053
//│ 	[LH_N]: 2059
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 2072
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_P3 0 0 0]: 2285
//│ 	[LH_P3 cons'_lh([LH_P3 0 0 0], nil'_lh) _lh_startr_arg1⁰ 1]: 2291
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰]: 2414
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰}: 2144 --->
//│ 	[LH_P2 take_lh(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]: 2049
//│ case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent³ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 2154 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_P2 [LH_N] [LH_N]]: 2005
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)]: 2025
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh(_lh_init'_LH_P2_1⁰)]: 2033
//│ 	[LH_P2 [LH_N] [LH_N]]: 2122
//│ 	[LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 2142
//│ 	[LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 2150
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 2359
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 2364
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 2219 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2004
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2121
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ 	[LH_N]: 2494
//│ case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 2224 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 209
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰]: 231
//│ 	[LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 434
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 547
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_N]: 619
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)]: 626
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 640
//│ 	[LH_N]: 2053
//│ 	[LH_N]: 2059
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 2072
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_P3 0 0 0]: 2285
//│ 	[LH_P3 cons'_lh([LH_P3 0 0 0], nil'_lh) _lh_startr_arg1⁰ 1]: 2291
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 2230 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2232 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2004
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2121
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ 	[LH_N]: 2494
//│ case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 2367 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_P2 [LH_N] [LH_N]]: 2005
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)]: 2025
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh(_lh_init'_LH_P2_1⁰)]: 2033
//│ 	[LH_P2 [LH_N] [LH_N]]: 2122
//│ 	[LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 2142
//│ 	[LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 2150
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 2359
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 2364
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_P2 [LH_N] [LH_N]]: 2495
//│ case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 2373 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 209
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰]: 231
//│ 	[LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 434
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 547
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_N]: 611
//│ 	[LH_N]: 619
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)]: 626
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 640
//│ 	[LH_N]: 2053
//│ 	[LH_N]: 2059
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 2072
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_P3 0 0 0]: 2285
//│ 	[LH_P3 cons'_lh([LH_P3 0 0 0], nil'_lh) _lh_startr_arg1⁰ 1]: 2291
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 2389 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 209
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰]: 231
//│ 	[LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 434
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 547
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_N]: 619
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)]: 626
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 640
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2053
//│ 	[LH_N]: 2059
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 2072
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_P3 0 0 0]: 2285
//│ 	[LH_P3 cons'_lh([LH_P3 0 0 0], nil'_lh) _lh_startr_arg1⁰ 1]: 2291
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 2400 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 209
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰]: 231
//│ 	[LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 434
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 547
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_N]: 611
//│ 	[LH_N]: 619
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)]: 626
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 640
//│ 	[LH_N]: 2053
//│ 	[LH_N]: 2059
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 2072
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_P3 0 0 0]: 2285
//│ 	[LH_P3 cons'_lh([LH_P3 0 0 0], nil'_lh) _lh_startr_arg1⁰ 1]: 2291
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ case _lh_matchIdent⁵ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)] | _  => error⁰}: 2423 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 2055
//│ 	[LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]]: 2063
//│ 	[LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]: 2074
//│ case _lh_matchIdent⁴ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁵ = break_lh(isSpace_lh, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 2426 --->
//│ 	[LH_N]: 451
//│ 	[LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]: 462
//│ case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 2444 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2004
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2121
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ 	[LH_N]: 2494
//│ case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 2446 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 106
//│ 	[LH_C h⁸ a⁰]: 115
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_N]: 484
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_N]: 597
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 641
//│ 	[LH_C [LH_N] [LH_N]]: 642
//│ 	[LH_N]: 2003
//│ 	[LH_N]: 2120
//│ 	[LH_N]: 2162
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 2357
//│ 	[LH_N]: 2361
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 2362
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ 	[LH_N]: 2493
//│ case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 2448 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_P2 [LH_N] [LH_N]]: 2005
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)]: 2025
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh(_lh_init'_LH_P2_1⁰)]: 2033
//│ 	[LH_P2 [LH_N] [LH_N]]: 2122
//│ 	[LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 2142
//│ 	[LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 2150
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 2359
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 2364
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}: 2487 --->
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ case _lh_fold1_arg3⁰ of {LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))} | _  => error⁰}: 2489 --->
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ case _lh_matchIdent⁷ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh(_lh_lines_LH_C_1⁰) | _  => error⁰}: 2515 --->
//│ 	[LH_N]: 2054
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]: 2062
//│ case _lh_matchIdent⁶ of {LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁷ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁷ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh(_lh_lines_LH_C_1⁰) | _  => error⁰}] | _  => error⁰}: 2519 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 2055
//│ 	[LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]]: 2063
//│ 	[LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]: 2074
//│ case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 2525 --->
//│ 	NoProd
//│ 	DeadCodeProd
//│ 	[LH_C h⁴ take_lh((n⁰ - 1), t⁴)]: 62
//│ 	[LH_N]: 63
//│ 	[LH_N]: 65
//│ 	[LH_C h⁶ mappend_lh(t⁶, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 209
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p⁴) + let x⁰ = (optw_lh - old_width_hd⁰(p⁴))
//│ in (x⁰ * x⁰)) _lh_stepr_LH_P3_2⁰]: 231
//│ 	[LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 434
//│ 	[LH_C _lh_scan1_arg1⁰(a², head_lh(s⁰)) s⁰]: 477
//│ 	[LH_C _lh_scan1_arg2⁰(a³) [LH_N]]: 485
//│ 	[LH_N]: 547
//│ 	[LH_N]: 554
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 580
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 598
//│ 	[LH_N]: 619
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 621
//│ 	[LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)]: 626
//│ 	[LH_C [LH_C _lh_break_arg2⁰ head_lh(_lh_break_arg3⁰)] tail_lh(_lh_break_arg3⁰)]: 630
//│ 	[LH_N]: 640
//│ 	[LH_N]: 2053
//│ 	[LH_N]: 2059
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 2072
//│ 	[LH_C '|' [LH_N]]: 2163
//│ 	[LH_P3 0 0 0]: 2285
//│ 	[LH_P3 cons'_lh([LH_P3 0 0 0], nil'_lh) _lh_startr_arg1⁰ 1]: 2291
//│ 	[LH_N]: 2376
//│ 	[LH_N]: 2378
//│ 	[LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 2387
//│ 	[LH_N]: 2408
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]: 2421
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_N]: 451 --->
//│ 	case _lh_matchIdent⁴ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁵ = break_lh(isSpace_lh, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 2426
//│ [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]: 462 --->
//│ 	case _lh_matchIdent⁴ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁵ = break_lh(isSpace_lh, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 2426
//│ ------------------
//│ case _lh_matchIdent⁴ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁵ = break_lh(isSpace_lh, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 2426 --->
//│ 	[LH_N]: 451
//│ 	[LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]: 462
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testPara_nofib_lh(primId⁰(0))
//│ def break_lh(_lh_break_arg1², _lh_break_arg2²) = case _lh_break_arg2² of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1²(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else 
//│ 		let _lh_matchIdent¹³ = break_lh(_lh_break_arg1², _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent¹³ of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def ceildiv_lh(_lh_ceildiv_arg1¹, _lh_ceildiv_arg2¹) = div⁰(((_lh_ceildiv_arg1¹ + _lh_ceildiv_arg2¹) - 1), _lh_ceildiv_arg2¹)
//│ def concat_lh(lss¹) = case lss¹ of {
//│ 	LH_C h⁷ t⁷ => mappend_lh(h⁷, concat_lh(t⁷))
//│ 	| LH_N  => [LH_N]}
//│ def cons'_lh(_lh_cons'_arg1¹, _lh_cons'_arg2¹) = case _lh_cons'_arg2¹ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0⁰]
//│ 	| _  => error⁰}
//│ def cost_tl_lh(_lh_cost_tl_arg1¹) = snd3_lh(_lh_cost_tl_arg1¹)
//│ def dropWhile_lh(_lh_dropWhile_arg1¹, _lh_dropWhile_arg2¹) = case _lh_dropWhile_arg2¹ of {
//│ 	LH_N  => (fun _lh_dummy⁰ -> [LH_N])
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1¹(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh(_lh_dropWhile_arg1¹, _lh_dropWhile_LH_C_1⁰) else 
//│ 		let _lh_words_LH_C_1¹ = _lh_dropWhile_LH_C_1⁰
//│ 		in let _lh_words_LH_C_0¹ = _lh_dropWhile_LH_C_0⁰
//│ 		in (fun _lh_dummy¹ -> 
//│ 			let _lh_matchIdent¹¹ = break_lh(isSpace_lh, [LH_C _lh_words_LH_C_0¹ _lh_words_LH_C_1¹])
//│ 			in case _lh_matchIdent¹¹ of {
//│ 				LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh(_lh_words_LH_P2_1⁰)]
//│ 				| _  => error⁰})
//│ 	| _  => error⁰}
//│ def drop_lh(_lh_drop_arg1¹, _lh_drop_arg2¹) = case _lh_drop_arg2¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1¹ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh((_lh_drop_arg1¹ - 1), _lh_drop_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def filter_lh(f³, ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h¹ t¹ => if f³(h¹) then [LH_C h¹ filter_lh(f³, t¹)] else filter_lh(f³, t¹)
//│ 	| LH_N  => [LH_N]}
//│ def fmt_lh(_lh_fmt_arg1¹) = (fun _lh_funcomp_x¹⁷ -> (fun _lh_funcomp_x¹⁸ -> unparse_lh(map_lh((fun _lh_funcomp_x¹⁹ -> par3_lh(concat_lh(_lh_funcomp_x¹⁹))), _lh_funcomp_x¹⁸)))(parse_lh(_lh_funcomp_x¹⁷)))(_lh_fmt_arg1¹)
//│ def fold1_lh(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_arg3¹) = case _lh_fold1_arg3¹ of {
//│ 	LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {
//│ 		LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0⁰)
//│ 		| _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0⁰, fold1_lh(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1⁰))}
//│ 	| _  => error⁰}
//│ def format_lh(_lh_format_arg1¹, _lh_format_arg2¹) = case _lh_format_arg2¹ of {
//│ 	LH_N  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let break¹ = (fun _lh_break_arg1³ -> (fun _lh_break_arg2³ -> (fun _lh_break_arg3¹ -> if polyEq⁰(_lh_break_arg1³, _lh_break_arg2³) then [LH_C [LH_N] _lh_break_arg3¹] else [LH_C [LH_C _lh_break_arg2³ head_lh(_lh_break_arg3¹)] tail_lh(_lh_break_arg3¹)])))
//│ 		and start¹ = (fun _lh_start_arg1¹ -> (fun _lh_start_arg2¹ -> break¹(_lh_start_arg1¹, _lh_start_arg2¹, [LH_C [LH_N] [LH_N]]))) 
//│ 		in fold1_lh(break¹(_lh_format_arg1¹), start¹(_lh_format_arg1¹), _lh_format_arg2¹)}
//│ def fst3_lh(_lh_fst3_arg1¹) = case _lh_fst3_arg1¹ of {
//│ 	LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰
//│ 	| _  => error⁰}
//│ def head'_lh(_lh_head'_arg1¹) = case _lh_head'_arg1¹ of {
//│ 	LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh(_lh_head'_LH_P2_0⁰)) then head_lh(_lh_head'_LH_P2_0⁰) else head_lh(_lh_head'_LH_P2_1⁰)
//│ 	| _  => error⁰}
//│ def head_lh(ls¹¹) = case ls¹¹ of {
//│ 	LH_C h² t² => h²
//│ 	| LH_N  => error⁰}
//│ def init'_lh(_lh_init'_arg1¹) = case _lh_init'_arg1¹ of {
//│ 	LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_init'_LH_P2_1⁰) then 
//│ 		let _lh_matchIdent¹⁴ = splitAt_lh(div⁰(length_lh(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ 		in case _lh_matchIdent¹⁴ of {
//│ 			LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh(_lh_init'_LH_P2_1¹)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh(_lh_init'_LH_P2_1⁰)]
//│ 	| _  => error⁰}
//│ def isSpace_lh(_lh_isSpace_arg1¹) = polyEq⁰(_lh_isSpace_arg1¹, ' ')
//│ def last'_lh(_lh_last'_arg1¹) = case _lh_last'_arg1¹ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh(_lh_last'_LH_P2_1⁰)) then head_lh(_lh_last'_LH_P2_1⁰) else head_lh(_lh_last'_LH_P2_0⁰)
//│ 	| _  => error⁰}
//│ def len_tl_lh(_lh_len_tl_arg1¹) = thd3_lh(_lh_len_tl_arg1¹)
//│ def length_lh(ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h⁵ t⁵ => (1 + length_lh(t⁵))
//│ 	| LH_N  => 0}
//│ def lines_lh(_lh_lines_arg1¹) = 
//│ 	let _lh_matchIdent⁸ = break_lh((fun x⁴ -> polyEq⁰(x⁴, '|')), _lh_lines_arg1¹)
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ 
//│ 			let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ 			in case _lh_matchIdent⁹ of {
//│ 				LH_N  => [LH_N]
//│ 				| LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh(_lh_lines_LH_C_1⁰)
//│ 				| _  => error⁰}]
//│ 		| _  => error⁰}
//│ def map_lh(f², ls¹²) = case ls¹² of {
//│ 	LH_C h⁰ t⁰ => [LH_C f²(h⁰) map_lh(f², t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh(xs³, ys³) = case xs³ of {
//│ 	LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh(t⁶, ys³)]
//│ 	| LH_N  => ys³}
//│ def maxw_lh = 70
//│ def min_lh(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ def nil'_lh = [LH_P2 [LH_N] [LH_N]]
//│ def null'_lh(_lh_null'_arg1¹) = case _lh_null'_arg1¹ of {
//│ 	LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1⁰ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null_lh(_lh_null_arg1¹) = case _lh_null_arg1¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def optw_lh = 63
//│ def par3_lh(_lh_par3_arg1¹) = 
//│ 	let zs¹ = scan1_lh(stepr_lh, startr_lh, map_lh(length_lh, _lh_par3_arg1¹))
//│ 	in tile_lh(_lh_par3_arg1¹, [LH_P2 map_lh((fun _lh_funcomp_x¹² -> (fun _lh_funcomp_x¹³ -> len_tl_lh(last'_lh(_lh_funcomp_x¹³)))(fst3_lh(_lh_funcomp_x¹²))), zs¹) thd3_lh(head_lh(zs¹))])
//│ def paras_lh(_lh_paras_arg1¹) = (fun _lh_funcomp_x¹⁴ -> filter_lh((fun x⁷ -> polyNeq⁰([LH_N], x⁷)), format_lh([LH_N], _lh_funcomp_x¹⁴)))(_lh_paras_arg1¹)
//│ def parse_lh(_lh_parse_arg1¹) = (fun _lh_funcomp_x¹⁵ -> (fun _lh_funcomp_x¹⁶ -> paras_lh(map_lh(words_lh, _lh_funcomp_x¹⁶)))(lines_lh(_lh_funcomp_x¹⁵)))(_lh_parse_arg1¹)
//│ def reverse_helper_lh(ls¹⁵, a⁷) = case ls¹⁵ of {
//│ 	LH_C h⁸ t⁸ => reverse_helper_lh(t⁸, [LH_C h⁸ a⁷])
//│ 	| LH_N  => a⁷}
//│ def reverse_lh(ls⁸) = reverse_helper_lh(ls⁸, [LH_N])
//│ def scan1_lh(_lh_scan1_arg1¹, _lh_scan1_arg2¹) = fold1_lh((fun a⁵ -> (fun s¹ -> [LH_C _lh_scan1_arg1¹(a⁵, head_lh(s¹)) s¹])), (fun a⁶ -> [LH_C _lh_scan1_arg2¹(a⁶) [LH_N]]))
//│ def single'_lh(_lh_single'_arg1¹) = case _lh_single'_arg1¹ of {
//│ 	LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh(_lh_single'_LH_P2_0⁰) && single_lh(_lh_single'_LH_P2_1⁰)) || (single_lh(_lh_single'_LH_P2_0⁰) && null_lh(_lh_single'_LH_P2_1⁰)))
//│ 	| _  => error⁰}
//│ def single_lh(_lh_single_arg1¹) = case _lh_single_arg1¹ of {
//│ 	LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def snd3_lh(_lh_snd3_arg1¹) = case _lh_snd3_arg1¹ of {
//│ 	LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰
//│ 	| _  => error⁰}
//│ def splitAt_lh(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹) = [LH_P2 take_lh(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹) drop_lh(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹)]
//│ def startr_lh(_lh_startr_arg1¹) = if (_lh_startr_arg1¹ <= maxw_lh) then [LH_P3 cons'_lh([LH_P3 0 0 0], nil'_lh) _lh_startr_arg1¹ 1] else error⁰([LH_C 's' [LH_C 't' [LH_C 'a' [LH_C 'r' [LH_C 't' [LH_C 'r' [LH_C ' ' [LH_C 'p' [LH_C 'a' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]]]]]]])
//│ def stepr_lh(_lh_stepr_arg1¹, _lh_stepr_arg2¹) = case _lh_stepr_arg2¹ of {
//│ 	LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => 
//│ 		let tot_width¹ = ((_lh_stepr_arg1¹ + 1) + _lh_stepr_LH_P3_1⁰)
//│ 		in let tot_len¹ = (1 + _lh_stepr_LH_P3_2⁰)
//│ 		in let single¹ = (fun p⁸ -> (len_tl_lh(p⁸) == 0))
//│ 		in let width_hd¹ = (fun p⁹ -> if single¹(p⁹) then tot_width¹ else ((tot_width¹ - width_tl_lh(p⁹)) - 1))
//│ 		in let cost¹ = (fun p¹⁰ -> if single¹(p¹⁰) then 0 else (cost_tl_lh(p¹⁰) + 
//│ 			let a⁴ = (optw_lh - width_hd¹(p¹⁰))
//│ 			in (a⁴ * a⁴)))
//│ 		in let old_width_hd¹ = (fun p¹¹ -> if single¹(p¹¹) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh(p¹¹)) - 1))
//│ 		in let new¹ = (fun p¹² -> if single¹(p¹²) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh(p¹²) + 
//│ 			let x⁵ = (optw_lh - old_width_hd¹(p¹²))
//│ 			in (x⁵ * x⁵)) _lh_stepr_LH_P3_2⁰])
//│ 		in let trim¹ = (fun ps_pq¹ -> if null'_lh(ps_pq¹) then ps_pq¹ else if single'_lh(ps_pq¹) then ps_pq¹ else 
//│ 			let ps_p² = init'_lh(ps_pq¹)
//│ 			in let q³ = last'_lh(ps_pq¹)
//│ 			in let p¹³ = last'_lh(ps_p²)
//│ 			in if (cost¹(p¹³) <= cost¹(q³)) then trim¹(ps_p²) else ps_pq¹)
//│ 		in let drop_nofit¹ = (fun ps_p³ -> if null'_lh(ps_p³) then ps_p³ else if (width_hd¹(last'_lh(ps_p³)) > maxw_lh) then drop_nofit¹(init'_lh(ps_p³)) else ps_p³)
//│ 		in let bf¹ = (fun p¹⁴ -> (fun q⁴ -> 
//│ 			let wqh¹ = width_hd¹(q⁴)
//│ 			in let rqh¹ = ((maxw_lh - wqh¹) + 1)
//│ 			in if (single¹(q⁴) && (cost_tl_lh(p¹⁴) == 0)) then min_lh((optw_lh - width_hd¹(p¹⁴)), rqh¹) else if single¹(q⁴) then rqh¹ else min_lh(ceildiv_lh((cost¹(p¹⁴) - cost¹(q⁴)), (2 * (wqh¹ - width_hd¹(p¹⁴)))), rqh¹)))
//│ 		in let myAdd¹ = (fun p¹⁵ -> (fun qr_rs¹ -> if (single'_lh(qr_rs¹) || null'_lh(qr_rs¹)) then cons'_lh(p¹⁵, qr_rs¹) else 
//│ 			let q⁵ = head'_lh(qr_rs¹)
//│ 			in let r_rs¹ = tail'_lh(qr_rs¹)
//│ 			in let r¹ = head'_lh(r_rs¹)
//│ 			in if (bf¹(p¹⁵, q⁵) <= bf¹(q⁵, r¹)) then myAdd¹(p¹⁵, r_rs¹) else cons'_lh(p¹⁵, qr_rs¹)))
//│ 		in [LH_P3 trim¹(drop_nofit¹(myAdd¹(new¹(last'_lh(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width¹ tot_len¹]
//│ 	| _  => error⁰}
//│ def tail'_lh(_lh_tail'_arg1¹) = case _lh_tail'_arg1¹ of {
//│ 	LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh(_lh_tail'_LH_P2_0⁰) then 
//│ 		let _lh_matchIdent¹⁵ = splitAt_lh(div⁰(length_lh(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ 		in case _lh_matchIdent¹⁵ of {
//│ 			LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]
//│ 			| _  => error⁰} else [LH_P2 tail_lh(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]
//│ 	| _  => error⁰}
//│ def tail_lh(ls⁹) = case ls⁹ of {
//│ 	LH_C h³ t³ => t³
//│ 	| LH_N  => error⁰}
//│ def take_lh(n¹, ls¹³) = if (n¹ > 0) then case ls¹³ of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ take_lh((n¹ - 1), t⁴)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPara_nofib_lh(_lh_testPara_nofib_arg1¹) = if null_lh(test_lh(0)) then [LH_N] else fmt_lh(test_lh(0))
//│ def test_lh(_lh_test_arg1¹) = mappend_lh(mappend_lh(mappend_lh(mappend_lh(mappend_lh(mappend_lh(mappend_lh(mappend_lh(mappend_lh(primId⁰([LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'u' [LH_C 'c' [LH_C 't' [LH_C 'i' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C 'm' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'o' [LH_C 'n' [LH_C 'p' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]), primId⁰([LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C 's' [LH_C '.' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ',' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'h' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'y' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C ' ' [LH_C 'w' [LH_C 'e' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_C 'k' [LH_C 'n' [LH_C 'o' [LH_C 'w' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 's' [LH_C 'i' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C '.' [LH_C ' ' [LH_C 'H' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'o' [LH_C 'm' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'm' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 't' [LH_C 'a' [LH_C 'i' [LH_C 'l' [LH_C 's' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'g' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'b' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C ' ' [LH_C 'T' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'i' [LH_C 'c' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'l' [LH_C 'e' [LH_C 's' [LH_C 's' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C '|' [LH_C ' ' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]))
//│ def thd3_lh(_lh_thd3_arg1¹) = case _lh_thd3_arg1¹ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰
//│ 	| _  => error⁰}
//│ def tile_lh(_lh_tile_arg1¹, _lh_tile_arg2¹) = case _lh_tile_arg2¹ of {
//│ 	LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => 
//│ 			let l² = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ 			in let _lh_matchIdent¹⁰ = splitAt_lh(l², _lh_tile_arg1¹)
//│ 			in case _lh_matchIdent¹⁰ of {
//│ 				LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh(l², [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def unformat_lh(_lh_unformat_arg1¹) = fold1_lh((fun xs² -> (fun ys² -> mappend_lh(mappend_lh(xs², [LH_C _lh_unformat_arg1¹ [LH_N]]), ys²))), (fun x⁶ -> x⁶))
//│ def unlines_lh(_lh_unlines_arg1¹) = concat_lh(map_lh((fun l³ -> mappend_lh(l³, [LH_C '|' [LH_N]])), _lh_unlines_arg1¹))
//│ def unparas_lh(_lh_unparas_arg1¹) = unformat_lh([LH_N], _lh_unparas_arg1¹)
//│ def unparse_lh(_lh_unparse_arg1¹) = (fun _lh_funcomp_x¹⁰ -> (fun _lh_funcomp_x¹¹ -> unlines_lh(map_lh(unwords_lh, _lh_funcomp_x¹¹)))(unparas_lh(_lh_funcomp_x¹⁰)))(_lh_unparse_arg1¹)
//│ def unwords_lh(_lh_unwords_arg1¹) = case _lh_unwords_arg1¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => 
//│ 		let go¹ = (fun _lh_go_arg1¹ -> case _lh_go_arg1¹ of {
//│ 			LH_N  => [LH_N]
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh(_lh_go_LH_C_0⁰, go¹(_lh_go_LH_C_1⁰))]
//│ 			| _  => error⁰})
//│ 		in mappend_lh(_lh_unwords_LH_C_0⁰, go¹(_lh_unwords_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def width_tl_lh(_lh_width_tl_arg1¹) = fst3_lh(_lh_width_tl_arg1¹)
//│ def words_lh(_lh_words_arg1¹) = 
//│ 	let _lh_matchIdent¹² = dropWhile_lh(isSpace_lh, _lh_words_arg1¹)
//│ 	in _lh_matchIdent¹²(99)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
