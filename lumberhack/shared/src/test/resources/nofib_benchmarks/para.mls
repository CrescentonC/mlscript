:NewParser
:ParseOnly

:lhNoIter
:lhInHaskell
:lhGenOCaml
dropWhile f [] = []
dropWhile f (h:t) = if (f h) then dropWhile f t else (h:t)
drop n []      = []
drop n (h:t)   = if n <= 0 then (h:t) else (drop (n - 1) t)
splitAt n ls = (take n ls, drop n ls)
unwords []              =  ""
unwords (w:ws)          = w ++ go ws
  where
    go []     = ""
    go (v:vs) = ' ' : (v ++ (go vs))
break p [] = ([], [])
break p (x:xs) = if p x then ([], (x:xs)) else case (break p xs) of { (ys, zs) -> ((x:ys), zs) }
isSpace c = polyEq c ' '
words s = case (dropWhile isSpace s) of
          [] -> []
          (h:t) -> case (break isSpace (h:t)) of (w, s'') -> (w : (words s''))
lines s = case break (\x -> polyEq x '|') s of
                  (l, s') -> (l:(case s' of { [] -> []; _:s'' -> lines s'' }))
unlines ls = concat $ map (\l -> l ++ "|") ls
min a b = if a > b then b else a
null [] = True
null (h:t) = False
all f [] = True
all f (h:t) = if f h then all f t else False
fold1 :: (a->b->b) -> (a->b) -> [a] -> b
fold1 f g [a]   = g a
fold1 f g (a:x) = f a (fold1 f g x)
scan1 :: (a->b->b) -> (a->b) -> [a] -> [b]
scan1 f g = fold1 (\a -> \s -> ((f a (head s)) : s)) (\a -> [g a])
tails :: [a] -> [[a]]
tails = scan1 (\x -> \y -> x:y) (\x -> x:[])
single :: [a] -> Bool
single [a] = True
single _   = False
minWith :: (a->Int) -> [a] -> a
minWith f = fold1 (\a -> \b -> if ((f a) < (f b)) then a else b) (\x -> x)
type Txt = [Word]
type Word = String
type Paragraph = [Line]
type Line = [Word]
par0 :: Txt -> Paragraph
par0 x = ((minWith cost) . (filter feasible) . formats) x
formats :: Txt -> [Paragraph]
formats = fold1 (\w -> \ps -> (map (new w) ps) ++ (map (glue w) ps)) (\x -> [ [[x]] ])
new w ls      = [w]:ls
glue w (l:ls) = (w:l):ls
feasible :: Paragraph -> Bool
feasible a = all fits a
maxw :: Int
maxw = 70
fits :: Line -> Bool
fits xs = ((width xs) <= maxw)
width :: Line -> Int
width ls = fold1 plus length ls
  where plus w n = length w + 1 + n
optw :: Int
optw = 63
cost :: Paragraph -> Int
cost ls = fold1 plus (\_dum -> 0) ls
       where plus l n = linc l + n
             linc l = let a = (optw - (width l)) in a * a
fitH ls = (fits . head) ls
type Par    = (Width,Cost,Length)
type Width  = Int
type Cost   = Int
type Length = Int
width_tl x = fst3 x
cost_tl  x = snd3 x
len_tl   x = thd3 x
fst3 (a,b,c) = a
snd3 (a,b,c) = b
thd3 (a,b,c) = c
tile :: Txt -> ([Length],Length) -> Paragraph
tile ws ([],n)   = []
tile ws (m:ms,n) =
  let l = n - m in
  case (splitAt l ws) of { (ws1,ws2) ->
    ws1 : (tile ws2 (drop l (m:ms),m))
  }            
par3 :: Txt -> Paragraph
par3 ws =
  let zs = scan1 stepr startr (map length ws) in
  tile ws (map (len_tl . last' . fst3) zs, thd3 (head zs))
startr :: Length -> (SymList Par, Width, Length)
startr a = if a <= maxw then (cons' (0,0,0) nil',a,1) else error "startr param error"
stepr :: Length -> (SymList Par, Cost, Length) -> (SymList Par, Cost, Length)
stepr w (ps,tw,tl) =
  let tot_width = w + 1 + tw in
  let tot_len = 1 + tl in
  let single = \p -> (len_tl p) == 0 in
  let width_hd = \p -> if (single p) then tot_width else tot_width - (width_tl p) - 1 in
  let cost = \p -> if (single p) then 0 else (cost_tl p) + (let a = (optw - (width_hd p)) in a*a) in
  let old_width_hd = \p -> if (single p) then tw else tw - (width_tl p) - 1 in 
  let new = \p -> if (single p) then (tw,0,tl) else (tw, (cost_tl p) + (let x = (optw-(old_width_hd p)) in x*x), tl) in
  let trim = \ps_pq ->
                if null' ps_pq then
                  ps_pq
                else if single' ps_pq then
                  ps_pq
                else
                  let ps_p = init' ps_pq in
                  let q    = last' ps_pq in
                  let p    = last' ps_p in
                  if (cost p) <= (cost q) then
                    trim ps_p
                  else
                    ps_pq
  in
  let drop_nofit = \ps_p ->
                      if null' ps_p then
                        ps_p
                      else if (width_hd (last' ps_p)) > maxw then
                        drop_nofit (init' ps_p)
                      else 
                        ps_p
  in
  let bf = \p -> \q ->
            let wqh = width_hd q in
            let rqh = maxw - wqh + 1 in
            if (single q) && ((cost_tl p) == 0) then
              min (optw - (width_hd p)) rqh
            else if single q then
              rqh
            else
              (ceildiv ((cost p)-(cost q)) (2*(wqh-(width_hd p)))) `min` rqh
  in
  let myAdd = \p -> \qr_rs ->
                if (single' qr_rs) || (null' qr_rs) then
                  cons' p qr_rs
                else
                  let q = head' qr_rs in
                  let r_rs = tail' qr_rs in
                  let r  = head' r_rs in
                  if (bf p q) <= (bf q r) then
                    myAdd p r_rs
                  else
                    cons' p qr_rs
  in
  (trim (drop_nofit (new (last' ps) `myAdd` ps)), tot_width, tot_len)
ceildiv n m = (n+m-1) `div` m
fmt x = (unparse . (map (par3 . concat)) . parse) x
fmtWith par = unparse . (map (par . concat)) . parse
type SymList a = ([a],[a])
single' (x,y) = ((null x) && (single y)) || ((single x) && (null y))
null' ([],[]) = True
null' _       = False
nil' = ([],[])
head' (x,y) = if not (null x) then head x else head y
last' (y,x) = if not (null x) then head x else head y
cons' a (x,y) = if not (null y) then (a:x,y) else ([a],x)
snoc' a (y,x) = if not (null y) then (y,a:x) else (x,[a])
tail' (x,y) =
  if null x then
    ([],[])
  else if single x then
    case (splitAt ((length y) `div` 2) y) of {(y0,y1) -> (reverse y1, y0) }
  else
    (tail x, y)
init' (y,x) =
  if null x then
    ([],[])
  else if single x then
    case (splitAt ((length y) `div` 2) y) of { (y0,y1) -> (y0, reverse y1) }
  else
    (y, tail x)
unformat :: a -> [[a]] -> [a]
unformat a = fold1 (\xs -> \ys -> xs ++ [a] ++ ys) (\x -> x)
format :: Eq a => a -> [a] -> [[a]]
format a [] = [[]]
format a x = fold1 (break a) (start a) x
  where break a b xs = if polyEq a b then []:xs else (b:(head xs)):(tail xs)
        start a b = break a b [[]]
unparas :: [[[String]]] -> [[String]]
unparas ls = unformat [] ls
paras :: [[String]] -> [[[String]]]
paras ls   = ((filter (\x -> polyNeq [] x)) . (format [])) ls
parse ls   = (paras . (map words) . lines) ls
unparse ls = (unlines . (map unwords) . unparas) ls
test dummy =
  primId ("In the constructive programming community it is commonplace to see ") ++
  primId ("formal developments of textbook algorithms. In the algorithm design ") ++
  primId ("community, on the other hand, it may be well known that the textbook ") ++
  primId ("solution to a problem is not the most efficient possible. However, in ") ++
  primId ("presenting the more efficient solution, the algorithm designer will ") ++
  primId ("usually omit some of the implementation details, this creating an ") ++
  primId ("algorithm gap between the abstract algorithm and its concrete ") ++
  primId ("implementation. This is in contrast to the formal development, which ") ++
  primId ("usually presents the complete concrete implementation of the less ") ++
  primId ("efficient solution.| |")
testPara_nofib dummy = if null (test 0) then [] else (fmt (test 0))
testPara_nofib $ primId 0
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testPara_nofib_lh_₁^4559(primId⁰(0))
//│ def break_lh_₁(_lh_break_arg1², _lh_break_arg2²) = case _lh_break_arg2² of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1²(_lh_break_LH_C_0¹) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]] else 
//│ 		let _lh_matchIdent⁴ = break_lh_₁^885(_lh_break_arg1², _lh_break_LH_C_1¹)
//│ 		in case _lh_matchIdent⁴ of {
//│ 			LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def break_lh_₂(_lh_break_arg1⁰, _lh_break_arg2⁰) = case _lh_break_arg2⁰ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1⁰(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else 
//│ 		let _lh_matchIdent³ = break_lh_₂^770(_lh_break_arg1⁰, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent³ of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def ceildiv_lh_₁(_lh_ceildiv_arg1⁰, _lh_ceildiv_arg2⁰) = div⁰(((_lh_ceildiv_arg1⁰ + _lh_ceildiv_arg2⁰) - 1), _lh_ceildiv_arg2⁰)
//│ def concat_lh_₁(lss¹) = case lss¹ of {
//│ 	LH_C h²⁴ t²⁴ => mappend_lh_₁₉^1637(h²⁴, concat_lh_₁^1640(t²⁴))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₂(lss⁰) = case lss⁰ of {
//│ 	LH_C h¹² t¹² => mappend_lh_₂₃^706(h¹², concat_lh_₂^709(t¹²))
//│ 	| LH_N  => [LH_N]}
//│ def cons'_lh_₁(_lh_cons'_arg1², _lh_cons'_arg2²) = case _lh_cons'_arg2² of {
//│ 	LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂^641(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]
//│ 	| _  => error⁰}
//│ def cons'_lh_₂(_lh_cons'_arg1¹, _lh_cons'_arg2¹) = case _lh_cons'_arg2¹ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂^497(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]
//│ 	| _  => error⁰}
//│ def cons'_lh_₃(_lh_cons'_arg1⁰, _lh_cons'_arg2⁰) = case _lh_cons'_arg2⁰ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₂^209(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]
//│ 	| _  => error⁰}
//│ def cost_tl_lh_₁(_lh_cost_tl_arg1²) = snd3_lh_₁^407(_lh_cost_tl_arg1²)
//│ def cost_tl_lh_₂(_lh_cost_tl_arg1¹) = snd3_lh_₁^403(_lh_cost_tl_arg1¹)
//│ def cost_tl_lh_₃(_lh_cost_tl_arg1⁰) = snd3_lh_₁^395(_lh_cost_tl_arg1⁰)
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁^745(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]
//│ 	| _  => error⁰}
//│ def drop_lh_₁(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁^168((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def filter_lh_₁(f¹, ls⁹) = case ls⁹ of {
//│ 	LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁^857(f¹, t¹⁵)] else filter_lh_₁^863(f¹, t¹⁵)
//│ 	| LH_N  => [LH_N]}
//│ def fmt_lh_₁(_lh_fmt_arg1⁰) = (fun _lh_funcomp_x⁷ -> (fun _lh_funcomp_x⁸ -> unparse_lh_₁^1895(map_lh_₁^1896((fun _lh_funcomp_x⁹ -> par3_lh_₁^1897(concat_lh_₁^1898(_lh_funcomp_x⁹))), _lh_funcomp_x⁸)))(parse_lh_₁^1908(_lh_funcomp_x⁷)))(_lh_fmt_arg1⁰)
//│ def fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_arg3²) = case _lh_fold1_arg3² of {
//│ 	LH_C _lh_fold1_LH_C_0² _lh_fold1_LH_C_1² => case _lh_fold1_LH_C_1² of {
//│ 		LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²)
//│ 		| _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁^236(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_arg3¹) = case _lh_fold1_arg3¹ of {
//│ 	LH_C _lh_fold1_LH_C_0¹ _lh_fold1_LH_C_1¹ => case _lh_fold1_LH_C_1¹ of {
//│ 		LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹)
//│ 		| _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂^131(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_arg3⁰) = case _lh_fold1_arg3⁰ of {
//│ 	LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {
//│ 		LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰)
//│ 		| _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃^75(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}
//│ 	| _  => error⁰}
//│ def format_lh_₁(_lh_format_arg1⁰, _lh_format_arg2⁰) = case _lh_format_arg2⁰ of {
//│ 	LH_N  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let break⁰ = (fun _lh_break_arg1¹ -> (fun _lh_break_arg2¹ -> (fun _lh_break_arg3⁰ -> if polyEq⁰(_lh_break_arg1¹, _lh_break_arg2¹) then [LH_C [LH_N] _lh_break_arg3⁰] else [LH_C [LH_C _lh_break_arg2¹ head_lh_₅^814(_lh_break_arg3⁰)] tail_lh_₁^818(_lh_break_arg3⁰)])))
//│ 		and start⁰ = (fun _lh_start_arg1⁰ -> (fun _lh_start_arg2⁰ -> break⁰(_lh_start_arg1⁰, _lh_start_arg2⁰, [LH_C [LH_N] [LH_N]]))) 
//│ 		in fold1_lh_₂^837(break⁰(_lh_format_arg1⁰), start⁰(_lh_format_arg1⁰), _lh_format_arg2⁰)}
//│ def fst3_lh_₁(_lh_fst3_arg1⁰) = case _lh_fst3_arg1⁰ of {
//│ 	LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰
//│ 	| _  => error⁰}
//│ def head'_lh_₁(_lh_head'_arg1¹) = case _lh_head'_arg1¹ of {
//│ 	LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₂^273(_lh_head'_LH_P2_0¹)) then head_lh_₅^277(_lh_head'_LH_P2_0¹) else head_lh_₅^280(_lh_head'_LH_P2_1¹)
//│ 	| _  => error⁰}
//│ def head'_lh_₂(_lh_head'_arg1⁰) = case _lh_head'_arg1⁰ of {
//│ 	LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂^257(_lh_head'_LH_P2_0⁰)) then head_lh_₅^261(_lh_head'_LH_P2_0⁰) else head_lh_₅^264(_lh_head'_LH_P2_1⁰)
//│ 	| _  => error⁰}
//│ def head_lh_₁(ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h¹⁶ t¹⁶ => h¹⁶
//│ 	| LH_N  => error⁰}
//│ def head_lh_₂(ls⁷) = case ls⁷ of {
//│ 	LH_C h⁹ t⁹ => h⁹
//│ 	| LH_N  => error⁰}
//│ def head_lh_₃(ls⁶) = case ls⁶ of {
//│ 	LH_C h⁸ t⁸ => h⁸
//│ 	| LH_N  => error⁰}
//│ def head_lh_₄(ls⁵) = case ls⁵ of {
//│ 	LH_C h⁷ t⁷ => h⁷
//│ 	| LH_N  => error⁰}
//│ def head_lh_₅(ls⁴) = case ls⁴ of {
//│ 	LH_C h⁶ t⁶ => h⁶
//│ 	| LH_N  => error⁰}
//│ def init'_lh_₁(_lh_init'_arg1¹) = case _lh_init'_arg1¹ of {
//│ 	LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₂^531(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁^537(_lh_init'_LH_P2_1²) then 
//│ 		let _lh_matchIdent¹ = splitAt_lh_₁^540(div⁰(length_lh_₁^542(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ 		in case _lh_matchIdent¹ of {
//│ 			LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁^553(_lh_init'_LH_P2_1³)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁^561(_lh_init'_LH_P2_1²)]
//│ 	| _  => error⁰}
//│ def init'_lh_₂(_lh_init'_arg1⁰) = case _lh_init'_arg1⁰ of {
//│ 	LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₂^288(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁^294(_lh_init'_LH_P2_1⁰) then 
//│ 		let _lh_matchIdent⁰ = splitAt_lh_₁^297(div⁰(length_lh_₁^299(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁^310(_lh_init'_LH_P2_1¹)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁^318(_lh_init'_LH_P2_1⁰)]
//│ 	| _  => error⁰}
//│ def isSpace_lh_₁(_lh_isSpace_arg1¹) = polyEq⁰(_lh_isSpace_arg1¹, ' ')
//│ def isSpace_lh_₂(_lh_isSpace_arg1⁰) = polyEq⁰(_lh_isSpace_arg1⁰, ' ')
//│ def last'_lh_₁(_lh_last'_arg1⁴) = case _lh_last'_arg1⁴ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂^955(_lh_last'_LH_P2_1⁴)) then head_lh_₃^959(_lh_last'_LH_P2_1⁴) else head_lh_₄^962(_lh_last'_LH_P2_0⁴)
//│ 	| _  => error⁰}
//│ def last'_lh_₂(_lh_last'_arg1³) = case _lh_last'_arg1³ of {
//│ 	LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₂^572(_lh_last'_LH_P2_1³)) then head_lh_₅^576(_lh_last'_LH_P2_1³) else head_lh_₅^579(_lh_last'_LH_P2_0³)
//│ 	| _  => error⁰}
//│ def last'_lh_₃(_lh_last'_arg1²) = case _lh_last'_arg1² of {
//│ 	LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₂^444(_lh_last'_LH_P2_1²)) then head_lh_₅^448(_lh_last'_LH_P2_1²) else head_lh_₅^451(_lh_last'_LH_P2_0²)
//│ 	| _  => error⁰}
//│ def last'_lh_₄(_lh_last'_arg1¹) = case _lh_last'_arg1¹ of {
//│ 	LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂^428(_lh_last'_LH_P2_1¹)) then head_lh_₅^432(_lh_last'_LH_P2_1¹) else head_lh_₅^435(_lh_last'_LH_P2_0¹)
//│ 	| _  => error⁰}
//│ def last'_lh_₅(_lh_last'_arg1⁰) = case _lh_last'_arg1⁰ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₂^344(_lh_last'_LH_P2_1⁰)) then head_lh_₅^348(_lh_last'_LH_P2_1⁰) else head_lh_₅^351(_lh_last'_LH_P2_0⁰)
//│ 	| _  => error⁰}
//│ def len_tl_lh_₁(_lh_len_tl_arg1¹) = thd3_lh_₂^999(_lh_len_tl_arg1¹)
//│ def len_tl_lh_₂(_lh_len_tl_arg1⁰) = thd3_lh_₂^516(_lh_len_tl_arg1⁰)
//│ def length_lh_₁(ls¹¹) = case ls¹¹ of {
//│ 	LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁^978(t¹⁷))
//│ 	| LH_N  => 0}
//│ def lines_lh_₁(_lh_lines_arg1⁰) = 
//│ 	let _lh_matchIdent⁸ = break_lh_₁^1544((fun x³ -> polyEq⁰(x³, '|')), _lh_lines_arg1⁰)
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ 
//│ 			let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ 			in case _lh_matchIdent⁹ of {
//│ 				LH_N  => [LH_N]
//│ 				| LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁^1559(_lh_lines_LH_C_1⁰)
//│ 				| _  => error⁰}]
//│ 		| _  => error⁰}
//│ def map_lh_₁(f⁶, ls¹⁶) = case ls¹⁶ of {
//│ 	LH_C h²³ t²³ => [LH_C f⁶(h²³) map_lh_₁^1626(f⁶, t²³)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f⁵, ls¹⁵) = case ls¹⁵ of {
//│ 	LH_C h²² t²² => [LH_C f⁵(h²²) map_lh_₂^1574(f⁵, t²²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f⁴, ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h²¹ t²¹ => [LH_C f⁴(h²¹) map_lh_₃^1462(f⁴, t²¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f³, ls¹³) = case ls¹³ of {
//│ 	LH_C h¹⁹ t¹⁹ => [LH_C f³(h¹⁹) map_lh_₄^1415(f³, t¹⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f², ls¹²) = case ls¹² of {
//│ 	LH_C h¹⁸ t¹⁸ => [LH_C f²(h¹⁸) map_lh_₅^989(f², t¹⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f⁰, ls⁸) = case ls⁸ of {
//│ 	LH_C h¹¹ t¹¹ => [LH_C f⁰(h¹¹) map_lh_₆^695(f⁰, t¹¹)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs²⁵, ys²⁵) = case xs²⁵ of {
//│ 	LH_C h⁴² t⁴² => [LH_C h⁴² mappend_lh_₁^1885(t⁴², ys²⁵)]
//│ 	| LH_N  => ys²⁵}
//│ def mappend_lh_₁₀(xs¹⁶, ys¹⁶) = case xs¹⁶ of {
//│ 	LH_C h³³ t³³ => [LH_C h³³ mappend_lh_₁₀^1777(t³³, ys¹⁶)]
//│ 	| LH_N  => ys¹⁶}
//│ def mappend_lh_₁₁(xs¹⁵, ys¹⁵) = case xs¹⁵ of {
//│ 	LH_C h³² t³² => [LH_C h³² mappend_lh_₁₁^1765(t³², ys¹⁵)]
//│ 	| LH_N  => ys¹⁵}
//│ def mappend_lh_₁₂(xs¹⁴, ys¹⁴) = case xs¹⁴ of {
//│ 	LH_C h³¹ t³¹ => [LH_C h³¹ mappend_lh_₁₂^1753(t³¹, ys¹⁴)]
//│ 	| LH_N  => ys¹⁴}
//│ def mappend_lh_₁₃(xs¹³, ys¹³) = case xs¹³ of {
//│ 	LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₁₃^1741(t³⁰, ys¹³)]
//│ 	| LH_N  => ys¹³}
//│ def mappend_lh_₁₄(xs¹², ys¹²) = case xs¹² of {
//│ 	LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₁₄^1729(t²⁹, ys¹²)]
//│ 	| LH_N  => ys¹²}
//│ def mappend_lh_₁₅(xs¹¹, ys¹¹) = case xs¹¹ of {
//│ 	LH_C h²⁸ t²⁸ => [LH_C h²⁸ mappend_lh_₁₅^1717(t²⁸, ys¹¹)]
//│ 	| LH_N  => ys¹¹}
//│ def mappend_lh_₁₆(xs¹⁰, ys¹⁰) = case xs¹⁰ of {
//│ 	LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁₆^1705(t²⁷, ys¹⁰)]
//│ 	| LH_N  => ys¹⁰}
//│ def mappend_lh_₁₇(xs⁹, ys⁹) = case xs⁹ of {
//│ 	LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₁₇^1693(t²⁶, ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_lh_₁₈(xs⁸, ys⁸) = case xs⁸ of {
//│ 	LH_C h²⁵ t²⁵ => [LH_C h²⁵ mappend_lh_₁₈^1681(t²⁵, ys⁸)]
//│ 	| LH_N  => ys⁸}
//│ def mappend_lh_₁₉(xs⁷, ys⁷) = case xs⁷ of {
//│ 	LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₁₉^1427(t²⁰, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₂(xs²⁴, ys²⁴) = case xs²⁴ of {
//│ 	LH_C h⁴¹ t⁴¹ => [LH_C h⁴¹ mappend_lh_₂^1873(t⁴¹, ys²⁴)]
//│ 	| LH_N  => ys²⁴}
//│ def mappend_lh_₂₀(xs⁶, ys⁶) = case xs⁶ of {
//│ 	LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₂₀^730(t¹⁴, ys⁶)]
//│ 	| LH_N  => ys⁶}
//│ def mappend_lh_₂₁(xs⁵, ys⁵) = case xs⁵ of {
//│ 	LH_C h¹³ t¹³ => [LH_C h¹³ mappend_lh_₂₁^718(t¹³, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mappend_lh_₂₂(xs⁴, ys⁴) = case xs⁴ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂₂^681(t¹⁰, ys⁴)]
//│ 	| LH_N  => ys⁴}
//│ def mappend_lh_₂₃(xs², ys²) = case xs² of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₂₃^103(t⁴, ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₂₄(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh_₂₄^91(t³, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₂₅(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h² t² => [LH_C h² mappend_lh_₂₅^57(t², ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₃(xs²³, ys²³) = case xs²³ of {
//│ 	LH_C h⁴⁰ t⁴⁰ => [LH_C h⁴⁰ mappend_lh_₃^1861(t⁴⁰, ys²³)]
//│ 	| LH_N  => ys²³}
//│ def mappend_lh_₄(xs²², ys²²) = case xs²² of {
//│ 	LH_C h³⁹ t³⁹ => [LH_C h³⁹ mappend_lh_₄^1849(t³⁹, ys²²)]
//│ 	| LH_N  => ys²²}
//│ def mappend_lh_₅(xs²¹, ys²¹) = case xs²¹ of {
//│ 	LH_C h³⁸ t³⁸ => [LH_C h³⁸ mappend_lh_₅^1837(t³⁸, ys²¹)]
//│ 	| LH_N  => ys²¹}
//│ def mappend_lh_₆(xs²⁰, ys²⁰) = case xs²⁰ of {
//│ 	LH_C h³⁷ t³⁷ => [LH_C h³⁷ mappend_lh_₆^1825(t³⁷, ys²⁰)]
//│ 	| LH_N  => ys²⁰}
//│ def mappend_lh_₇(xs¹⁹, ys¹⁹) = case xs¹⁹ of {
//│ 	LH_C h³⁶ t³⁶ => [LH_C h³⁶ mappend_lh_₇^1813(t³⁶, ys¹⁹)]
//│ 	| LH_N  => ys¹⁹}
//│ def mappend_lh_₈(xs¹⁸, ys¹⁸) = case xs¹⁸ of {
//│ 	LH_C h³⁵ t³⁵ => [LH_C h³⁵ mappend_lh_₈^1801(t³⁵, ys¹⁸)]
//│ 	| LH_N  => ys¹⁸}
//│ def mappend_lh_₉(xs¹⁷, ys¹⁷) = case xs¹⁷ of {
//│ 	LH_C h³⁴ t³⁴ => [LH_C h³⁴ mappend_lh_₉^1789(t³⁴, ys¹⁷)]
//│ 	| LH_N  => ys¹⁷}
//│ def maxw_lh_₁ = 70
//│ def maxw_lh_₂ = 70
//│ def maxw_lh_₃ = 70
//│ def min_lh_₁(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ def min_lh_₂(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ > _lh_min_arg2⁰) then _lh_min_arg2⁰ else _lh_min_arg1⁰
//│ def nil'_lh_₁ = [LH_P2 [LH_N] [LH_N]]
//│ def null'_lh_₁(_lh_null'_arg1²) = case _lh_null'_arg1² of {
//│ 	LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {
//│ 		LH_N  => case _lh_null'_LH_P2_1² of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₂(_lh_null'_arg1¹) = case _lh_null'_arg1¹ of {
//│ 	LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1¹ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₃(_lh_null'_arg1⁰) = case _lh_null'_arg1⁰ of {
//│ 	LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1⁰ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null_lh_₁(_lh_null_arg1¹) = case _lh_null_arg1¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₂(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def optw_lh_₁ = 63
//│ def optw_lh_₂ = 63
//│ def optw_lh_₃ = 63
//│ def par3_lh_₁(_lh_par3_arg1⁰) = 
//│ 	let zs⁰ = scan1_lh_₁^1584(stepr_lh_₁^1585, startr_lh_₁^1587, map_lh_₅^1589(length_lh_₁^1590, _lh_par3_arg1⁰))
//│ 	in tile_lh_₁^1595(_lh_par3_arg1⁰, [LH_P2 map_lh_₄^1598((fun _lh_funcomp_x¹ -> (fun _lh_funcomp_x² -> len_tl_lh_₁^1599(last'_lh_₁^1600(_lh_funcomp_x²)))(fst3_lh_₁^1605(_lh_funcomp_x¹))), zs⁰) thd3_lh_₁^1613(head_lh_₁^1614(zs⁰))])
//│ def paras_lh_₁(_lh_paras_arg1⁰) = (fun _lh_funcomp_x⁰ -> filter_lh_₁^1526((fun x² -> polyNeq⁰([LH_N], x²)), format_lh_₁^1534([LH_N], _lh_funcomp_x⁰)))(_lh_paras_arg1⁰)
//│ def parse_lh_₁(_lh_parse_arg1⁰) = (fun _lh_funcomp_x⁵ -> (fun _lh_funcomp_x⁶ -> paras_lh_₁^1663(map_lh_₂^1664(words_lh_₁^1665, _lh_funcomp_x⁶)))(lines_lh_₁^1671(_lh_funcomp_x⁵)))(_lh_parse_arg1⁰)
//│ def reverse_helper_lh_₁(ls⁰, a⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => reverse_helper_lh_₁^2(t⁰, [LH_C h⁰ a⁰])
//│ 	| LH_N  => a⁰}
//│ def reverse_lh_₁(ls²) = reverse_helper_lh_₁^41(ls², [LH_N])
//│ def scan1_lh_₁(_lh_scan1_arg1⁰, _lh_scan1_arg2⁰) = fold1_lh_₁^1060((fun a¹ -> (fun s⁰ -> [LH_C _lh_scan1_arg1⁰(a¹, head_lh_₂^1064(s⁰)) s⁰])), (fun a² -> [LH_C _lh_scan1_arg2⁰(a²) [LH_N]]))
//│ def single'_lh_₁(_lh_single'_arg1¹) = case _lh_single'_arg1¹ of {
//│ 	LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂^472(_lh_single'_LH_P2_0¹) && single_lh_₁^476(_lh_single'_LH_P2_1¹)) || (single_lh_₁^482(_lh_single'_LH_P2_0¹) && null_lh_₂^486(_lh_single'_LH_P2_1¹)))
//│ 	| _  => error⁰}
//│ def single'_lh_₂(_lh_single'_arg1⁰) = case _lh_single'_arg1⁰ of {
//│ 	LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₂^373(_lh_single'_LH_P2_0⁰) && single_lh_₁^377(_lh_single'_LH_P2_1⁰)) || (single_lh_₁^383(_lh_single'_LH_P2_0⁰) && null_lh_₂^387(_lh_single'_LH_P2_1⁰)))
//│ 	| _  => error⁰}
//│ def single_lh_₁(_lh_single_arg1⁰) = case _lh_single_arg1⁰ of {
//│ 	LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def snd3_lh_₁(_lh_snd3_arg1⁰) = case _lh_snd3_arg1⁰ of {
//│ 	LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰
//│ 	| _  => error⁰}
//│ def splitAt_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) = [LH_P2 take_lh_₁^145(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁^150(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]
//│ def startr_lh_₁(_lh_startr_arg1⁰) = if (_lh_startr_arg1⁰ <= maxw_lh_₃^1006) then [LH_P3 cons'_lh_₃^1008([LH_P3 0 0 0], nil'_lh_₁^1014) _lh_startr_arg1⁰ 1] else error⁰([LH_C 's' [LH_C 't' [LH_C 'a' [LH_C 'r' [LH_C 't' [LH_C 'r' [LH_C ' ' [LH_C 'p' [LH_C 'a' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]]]]]]])
//│ def stepr_lh_₁(_lh_stepr_arg1⁰, _lh_stepr_arg2⁰) = case _lh_stepr_arg2⁰ of {
//│ 	LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => 
//│ 		let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ 		in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ 		in let single⁰ = (fun p⁰ -> (len_tl_lh_₂^1098(p⁰) == 0))
//│ 		in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh_₁^1113(p¹)) - 1))
//│ 		in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh_₃^1127(p²) + 
//│ 			let a³ = (optw_lh_₁^1132 - width_hd⁰(p²))
//│ 			in (a³ * a³)))
//│ 		in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh_₂^1155(p³)) - 1))
//│ 		in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂^1173(p⁴) + 
//│ 			let x¹ = (optw_lh_₂^1178 - old_width_hd⁰(p⁴))
//│ 			in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰])
//│ 		in let trim⁰ = (fun ps_pq⁰ -> if null'_lh_₁^1195(ps_pq⁰) then ps_pq⁰ else if single'_lh_₂^1199(ps_pq⁰) then ps_pq⁰ else 
//│ 			let ps_p⁰ = init'_lh_₁^1203(ps_pq⁰)
//│ 			in let q⁰ = last'_lh_₅^1206(ps_pq⁰)
//│ 			in let p⁵ = last'_lh_₃^1209(ps_p⁰)
//│ 			in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ 		in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh_₂^1232(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh_₂^1238(ps_p¹)) > maxw_lh_₂^1243) then drop_nofit⁰(init'_lh_₂^1246(ps_p¹)) else ps_p¹)
//│ 		in let bf⁰ = (fun p⁶ -> (fun q¹ -> 
//│ 			let wqh⁰ = width_hd⁰(q¹)
//│ 			in let rqh⁰ = ((maxw_lh_₁^1259 - wqh⁰) + 1)
//│ 			in if (single⁰(q¹) && (cost_tl_lh_₁^1272(p⁶) == 0)) then min_lh_₂^1279((optw_lh_₃^1281 - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh_₁^1294(ceildiv_lh_₁^1295((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ 		in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh_₁^1328(qr_rs⁰) || null'_lh_₃^1332(qr_rs⁰)) then cons'_lh_₂^1336(p⁷, qr_rs⁰) else 
//│ 			let q² = head'_lh_₂^1341(qr_rs⁰)
//│ 			in let r_rs⁰ = tail'_lh_₁^1344(qr_rs⁰)
//│ 			in let r⁰ = head'_lh_₁^1347(r_rs⁰)
//│ 			in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh_₁^1368(p⁷, qr_rs⁰)))
//│ 		in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₄^1384(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]
//│ 	| _  => error⁰}
//│ def tail'_lh_₁(_lh_tail'_arg1⁰) = case _lh_tail'_arg1⁰ of {
//│ 	LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂^599(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁^605(_lh_tail'_LH_P2_0⁰) then 
//│ 		let _lh_matchIdent² = splitAt_lh_₁^608(div⁰(length_lh_₁^610(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ 		in case _lh_matchIdent² of {
//│ 			LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁^620(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]
//│ 			| _  => error⁰} else [LH_P2 tail_lh_₁^628(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]
//│ 	| _  => error⁰}
//│ def tail_lh_₁(ls³) = case ls³ of {
//│ 	LH_C h⁵ t⁵ => t⁵
//│ 	| LH_N  => error⁰}
//│ def take_lh_₁(n⁰, ls¹) = if (n⁰ > 0) then case ls¹ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ take_lh_₁^20((n⁰ - 1), t¹)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPara_nofib_lh_₁(_lh_testPara_nofib_arg1⁰) = if null_lh_₁^4546(test_lh_₂^4547(0)) then [LH_N] else fmt_lh_₁^4552(test_lh_₁^4553(0))
//│ def test_lh_₁(_lh_test_arg1¹) = mappend_lh_₂^3234(mappend_lh_₈^3235(mappend_lh_₁^3236(mappend_lh_₇^3237(mappend_lh_₄^3238(mappend_lh_₉^3239(mappend_lh_₅^3240(mappend_lh_₃^3241(mappend_lh_₆^3242(primId⁰([LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'u' [LH_C 'c' [LH_C 't' [LH_C 'i' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C 'm' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'o' [LH_C 'n' [LH_C 'p' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]), primId⁰([LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C 's' [LH_C '.' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ',' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'h' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'y' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C ' ' [LH_C 'w' [LH_C 'e' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_C 'k' [LH_C 'n' [LH_C 'o' [LH_C 'w' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 's' [LH_C 'i' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C '.' [LH_C ' ' [LH_C 'H' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'o' [LH_C 'm' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'm' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 't' [LH_C 'a' [LH_C 'i' [LH_C 'l' [LH_C 's' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'g' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'b' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C ' ' [LH_C 'T' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'i' [LH_C 'c' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'l' [LH_C 'e' [LH_C 's' [LH_C 's' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C '|' [LH_C ' ' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]))
//│ def test_lh_₂(_lh_test_arg1⁰) = mappend_lh_₁₆^1922(mappend_lh_₁₇^1923(mappend_lh_₁₅^1924(mappend_lh_₁₃^1925(mappend_lh_₁₀^1926(mappend_lh_₁₂^1927(mappend_lh_₁₄^1928(mappend_lh_₁₁^1929(mappend_lh_₁₈^1930(primId⁰([LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'u' [LH_C 'c' [LH_C 't' [LH_C 'i' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C 'm' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'o' [LH_C 'n' [LH_C 'p' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]), primId⁰([LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C 's' [LH_C '.' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ',' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'h' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'y' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C ' ' [LH_C 'w' [LH_C 'e' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_C 'k' [LH_C 'n' [LH_C 'o' [LH_C 'w' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 's' [LH_C 'i' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C '.' [LH_C ' ' [LH_C 'H' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'o' [LH_C 'm' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'm' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 't' [LH_C 'a' [LH_C 'i' [LH_C 'l' [LH_C 's' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'g' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'b' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C ' ' [LH_C 'T' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'i' [LH_C 'c' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'l' [LH_C 'e' [LH_C 's' [LH_C 's' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C '|' [LH_C ' ' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]))
//│ def thd3_lh_₁(_lh_thd3_arg1¹) = case _lh_thd3_arg1¹ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0¹ _lh_thd3_LH_P3_1¹ _lh_thd3_LH_P3_2¹ => _lh_thd3_LH_P3_2¹
//│ 	| _  => error⁰}
//│ def thd3_lh_₂(_lh_thd3_arg1⁰) = case _lh_thd3_arg1⁰ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰
//│ 	| _  => error⁰}
//│ def tile_lh_₁(_lh_tile_arg1⁰, _lh_tile_arg2⁰) = case _lh_tile_arg2⁰ of {
//│ 	LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => 
//│ 			let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ 			in let _lh_matchIdent⁵ = splitAt_lh_₁^912(l⁰, _lh_tile_arg1⁰)
//│ 			in case _lh_matchIdent⁵ of {
//│ 				LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁^919(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁^922(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def unformat_lh_₁(_lh_unformat_arg1⁰) = fold1_lh_₃^660((fun xs³ -> (fun ys³ -> mappend_lh_₂₅^661(mappend_lh_₂₄^662(xs³, [LH_C _lh_unformat_arg1⁰ [LH_N]]), ys³))), (fun x⁰ -> x⁰))
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = concat_lh_₂^1443(map_lh_₆^1444((fun l¹ -> mappend_lh_₂₂^1445(l¹, [LH_C '|' [LH_N]])), _lh_unlines_arg1⁰))
//│ def unparas_lh_₁(_lh_unparas_arg1⁰) = unformat_lh_₁^1437([LH_N], _lh_unparas_arg1⁰)
//│ def unparse_lh_₁(_lh_unparse_arg1⁰) = (fun _lh_funcomp_x³ -> (fun _lh_funcomp_x⁴ -> unlines_lh_₁^1647(map_lh_₃^1648(unwords_lh_₁^1649, _lh_funcomp_x⁴)))(unparas_lh_₁^1655(_lh_funcomp_x³)))(_lh_unparse_arg1⁰)
//│ def unwords_lh_₁(_lh_unwords_arg1⁰) = case _lh_unwords_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => 
//│ 		let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {
//│ 			LH_N  => [LH_N]
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₂₁^1477(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]
//│ 			| _  => error⁰})
//│ 		in mappend_lh_₂₀^1488(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def width_tl_lh_₁(_lh_width_tl_arg1¹) = fst3_lh_₁^422(_lh_width_tl_arg1¹)
//│ def width_tl_lh_₂(_lh_width_tl_arg1⁰) = fst3_lh_₁^399(_lh_width_tl_arg1⁰)
//│ def words_lh_₁(_lh_words_arg1⁰) = 
//│ 	let _lh_matchIdent⁶ = dropWhile_lh_₁^1499(isSpace_lh_₁^1500, _lh_words_arg1⁰)
//│ 	in case _lh_matchIdent⁶ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => 
//│ 			let _lh_matchIdent⁷ = break_lh_₂^1506(isSpace_lh_₂^1507, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ 			in case _lh_matchIdent⁷ of {
//│ 				LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁^1515(_lh_words_LH_P2_1⁰)]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec mappend_lh__d1_d6 xs_1_0 ys_1_0 =
//│ 		  (match xs_1_0 with
//│ 		    | `LH_C(h_2_7, t_2_7) -> 
//│ 		      (`LH_C(h_2_7, ((mappend_lh__d1_d6 t_2_7) ys_1_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_0);;
//│ 		let rec mappend_lh__d1_d8 xs_8 ys_8 =
//│ 		  (match xs_8 with
//│ 		    | `LH_C(h_2_5, t_2_5) -> 
//│ 		      (`LH_C(h_2_5, ((mappend_lh__d1_d8 t_2_5) ys_8)))
//│ 		    | `LH_N -> 
//│ 		      ys_8);;
//│ 		let rec mappend_lh__d1_d0 xs_1_6 ys_1_6 =
//│ 		  (match xs_1_6 with
//│ 		    | `LH_C(h_3_3, t_3_3) -> 
//│ 		      (`LH_C(h_3_3, ((mappend_lh__d1_d0 t_3_3) ys_1_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_6);;
//│ 		let rec mappend_lh__d1_d4 xs_1_2 ys_1_2 =
//│ 		  (match xs_1_2 with
//│ 		    | `LH_C(h_2_9, t_2_9) -> 
//│ 		      (`LH_C(h_2_9, ((mappend_lh__d1_d4 t_2_9) ys_1_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_2);;
//│ 		let rec mappend_lh__d1_d1 xs_1_5 ys_1_5 =
//│ 		  (match xs_1_5 with
//│ 		    | `LH_C(h_3_2, t_3_2) -> 
//│ 		      (`LH_C(h_3_2, ((mappend_lh__d1_d1 t_3_2) ys_1_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_5);;
//│ 		let rec mappend_lh__d1_d3 xs_1_3 ys_1_3 =
//│ 		  (match xs_1_3 with
//│ 		    | `LH_C(h_3_0, t_3_0) -> 
//│ 		      (`LH_C(h_3_0, ((mappend_lh__d1_d3 t_3_0) ys_1_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_3);;
//│ 		let rec mappend_lh__d1_d5 xs_1_1 ys_1_1 =
//│ 		  (match xs_1_1 with
//│ 		    | `LH_C(h_2_8, t_2_8) -> 
//│ 		      (`LH_C(h_2_8, ((mappend_lh__d1_d5 t_2_8) ys_1_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_1);;
//│ 		let rec mappend_lh__d1_d7 xs_9 ys_9 =
//│ 		  (match xs_9 with
//│ 		    | `LH_C(h_2_6, t_2_6) -> 
//│ 		      (`LH_C(h_2_6, ((mappend_lh__d1_d7 t_2_6) ys_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_9);;
//│ 		let rec mappend_lh__d1_d2 xs_1_4 ys_1_4 =
//│ 		  (match xs_1_4 with
//│ 		    | `LH_C(h_3_1, t_3_1) -> 
//│ 		      (`LH_C(h_3_1, ((mappend_lh__d1_d2 t_3_1) ys_1_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_4);;
//│ 		let rec test_lh__d2 _lh_test_arg1_0 =
//│ 		  ((mappend_lh__d1_d6 ((mappend_lh__d1_d7 ((mappend_lh__d1_d5 ((mappend_lh__d1_d3 ((mappend_lh__d1_d0 ((mappend_lh__d1_d2 ((mappend_lh__d1_d4 ((mappend_lh__d1_d1 ((mappend_lh__d1_d8 (`LH_C('I', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('s', (`LH_C('t', (`LH_C('r', (`LH_C('u', (`LH_C('c', (`LH_C('t', (`LH_C('i', (`LH_C('v', (`LH_C('e', (`LH_C(' ', (`LH_C('p', (`LH_C('r', (`LH_C('o', (`LH_C('g', (`LH_C('r', (`LH_C('a', (`LH_C('m', (`LH_C('m', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('m', (`LH_C('u', (`LH_C('n', (`LH_C('i', (`LH_C('t', (`LH_C('y', (`LH_C(' ', (`LH_C('i', (`LH_C('t', (`LH_C(' ', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('m', (`LH_C('o', (`LH_C('n', (`LH_C('p', (`LH_C('l', (`LH_C('a', (`LH_C('c', (`LH_C('e', (`LH_C(' ', (`LH_C('t', (`LH_C('o', (`LH_C(' ', (`LH_C('s', (`LH_C('e', (`LH_C('e', (`LH_C(' ', (`LH_N)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('f', (`LH_C('o', (`LH_C('r', (`LH_C('m', (`LH_C('a', (`LH_C('l', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('v', (`LH_C('e', (`LH_C('l', (`LH_C('o', (`LH_C('p', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('s', (`LH_C(' ', (`LH_C('o', (`LH_C('f', (`LH_C(' ', (`LH_C('t', (`LH_C('e', (`LH_C('x', (`LH_C('t', (`LH_C('b', (`LH_C('o', (`LH_C('o', (`LH_C('k', (`LH_C(' ', (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C('s', (`LH_C('.', (`LH_C(' ', (`LH_C('I', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('s', (`LH_C('i', (`LH_C('g', (`LH_C('n', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('m', (`LH_C('u', (`LH_C('n', (`LH_C('i', (`LH_C('t', (`LH_C('y', (`LH_C(',', (`LH_C(' ', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('o', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C('r', (`LH_C(' ', (`LH_C('h', (`LH_C('a', (`LH_C('n', (`LH_C('d', (`LH_C(',', (`LH_C(' ', (`LH_C('i', (`LH_C('t', (`LH_C(' ', (`LH_C('m', (`LH_C('a', (`LH_C('y', (`LH_C(' ', (`LH_C('b', (`LH_C('e', (`LH_C(' ', (`LH_C('w', (`LH_C('e', (`LH_C('l', (`LH_C('l', (`LH_C(' ', (`LH_C('k', (`LH_C('n', (`LH_C('o', (`LH_C('w', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('a', (`LH_C('t', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('t', (`LH_C('e', (`LH_C('x', (`LH_C('t', (`LH_C('b', (`LH_C('o', (`LH_C('o', (`LH_C('k', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('s', (`LH_C('o', (`LH_C('l', (`LH_C('u', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('o', (`LH_C(' ', (`LH_C('a', (`LH_C(' ', (`LH_C('p', (`LH_C('r', (`LH_C('o', (`LH_C('b', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C(' ', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('n', (`LH_C('o', (`LH_C('t', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('m', (`LH_C('o', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('e', (`LH_C('f', (`LH_C('f', (`LH_C('i', (`LH_C('c', (`LH_C('i', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(' ', (`LH_C('p', (`LH_C('o', (`LH_C('s', (`LH_C('s', (`LH_C('i', (`LH_C('b', (`LH_C('l', (`LH_C('e', (`LH_C('.', (`LH_C(' ', (`LH_C('H', (`LH_C('o', (`LH_C('w', (`LH_C('e', (`LH_C('v', (`LH_C('e', (`LH_C('r', (`LH_C(',', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('p', (`LH_C('r', (`LH_C('e', (`LH_C('s', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('m', (`LH_C('o', (`LH_C('r', (`LH_C('e', (`LH_C(' ', (`LH_C('e', (`LH_C('f', (`LH_C('f', (`LH_C('i', (`LH_C('c', (`LH_C('i', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('l', (`LH_C('u', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(',', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('s', (`LH_C('i', (`LH_C('g', (`LH_C('n', (`LH_C('e', (`LH_C('r', (`LH_C(' ', (`LH_C('w', (`LH_C('i', (`LH_C('l', (`LH_C('l', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('u', (`LH_C('s', (`LH_C('u', (`LH_C('a', (`LH_C('l', (`LH_C('l', (`LH_C('y', (`LH_C(' ', (`LH_C('o', (`LH_C('m', (`LH_C('i', (`LH_C('t', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('m', (`LH_C('e', (`LH_C(' ', (`LH_C('o', (`LH_C('f', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('t', (`LH_C('a', (`LH_C('i', (`LH_C('l', (`LH_C('s', (`LH_C(',', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('c', (`LH_C('r', (`LH_C('e', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C(' ', (`LH_C('a', (`LH_C('n', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C(' ', (`LH_C('g', (`LH_C('a', (`LH_C('p', (`LH_C(' ', (`LH_C('b', (`LH_C('e', (`LH_C('t', (`LH_C('w', (`LH_C('e', (`LH_C('e', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('a', (`LH_C('b', (`LH_C('s', (`LH_C('t', (`LH_C('r', (`LH_C('a', (`LH_C('c', (`LH_C('t', (`LH_C(' ', (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C(' ', (`LH_C('a', (`LH_C('n', (`LH_C('d', (`LH_C(' ', (`LH_C('i', (`LH_C('t', (`LH_C('s', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('c', (`LH_C('r', (`LH_C('e', (`LH_C('t', (`LH_C('e', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C('.', (`LH_C(' ', (`LH_C('T', (`LH_C('h', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('t', (`LH_C('r', (`LH_C('a', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('t', (`LH_C('o', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('f', (`LH_C('o', (`LH_C('r', (`LH_C('m', (`LH_C('a', (`LH_C('l', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('v', (`LH_C('e', (`LH_C('l', (`LH_C('o', (`LH_C('p', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(',', (`LH_C(' ', (`LH_C('w', (`LH_C('h', (`LH_C('i', (`LH_C('c', (`LH_C('h', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('u', (`LH_C('s', (`LH_C('u', (`LH_C('a', (`LH_C('l', (`LH_C('l', (`LH_C('y', (`LH_C(' ', (`LH_C('p', (`LH_C('r', (`LH_C('e', (`LH_C('s', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('s', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('t', (`LH_C('e', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('c', (`LH_C('r', (`LH_C('e', (`LH_C('t', (`LH_C('e', (`LH_C(' ', (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('o', (`LH_C('f', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('l', (`LH_C('e', (`LH_C('s', (`LH_C('s', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('e', (`LH_C('f', (`LH_C('f', (`LH_C('i', (`LH_C('c', (`LH_C('i', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('l', (`LH_C('u', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C('.', (`LH_C('|', (`LH_C(' ', (`LH_C('|', (`LH_N))))))))))))))))))))))))))))))))))))))))))))));;
//│ 		let rec null_lh__d2 _lh_null_arg1_0 =
//│ 		  (match _lh_null_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_0, _lh_null_LH_C_1_0) -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec cons'_lh__d3 _lh_cons'_arg1_0 _lh_cons'_arg2_0 =
//│ 		  (match _lh_cons'_arg2_0 with
//│ 		    | `LH_P2(_lh_cons'_LH_P2_0_0, _lh_cons'_LH_P2_1_0) -> 
//│ 		      (if (not (null_lh__d2 _lh_cons'_LH_P2_1_0)) then
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_0, _lh_cons'_LH_P2_0_0)), _lh_cons'_LH_P2_1_0))
//│ 		      else
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_0, (`LH_N))), _lh_cons'_LH_P2_0_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec nil'_lh__d1 =
//│ 		  (`LH_P2((`LH_N), (`LH_N)));;
//│ 		let rec maxw_lh__d3 =
//│ 		  70;;
//│ 		let rec startr_lh__d1 _lh_startr_arg1_0 =
//│ 		  (if (_lh_startr_arg1_0 <= maxw_lh__d3) then
//│ 		    (`LH_P3(((cons'_lh__d3 (`LH_P3(0, 0, 0))) nil'_lh__d1), _lh_startr_arg1_0, 1))
//│ 		  else
//│ 		    ((failwith "error") (`LH_C('s', (`LH_C('t', (`LH_C('a', (`LH_C('r', (`LH_C('t', (`LH_C('r', (`LH_C(' ', (`LH_C('p', (`LH_C('a', (`LH_C('r', (`LH_C('a', (`LH_C('m', (`LH_C(' ', (`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_N)))))))))))))))))))))))))))))))))))))));;
//│ 		let rec fst3_lh__d1 _lh_fst3_arg1_0 =
//│ 		  (match _lh_fst3_arg1_0 with
//│ 		    | `LH_P3(_lh_fst3_LH_P3_0_0, _lh_fst3_LH_P3_1_0, _lh_fst3_LH_P3_2_0) -> 
//│ 		      _lh_fst3_LH_P3_0_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec thd3_lh__d1 _lh_thd3_arg1_1 =
//│ 		  (match _lh_thd3_arg1_1 with
//│ 		    | `LH_P3(_lh_thd3_LH_P3_0_1, _lh_thd3_LH_P3_1_1, _lh_thd3_LH_P3_2_1) -> 
//│ 		      _lh_thd3_LH_P3_2_1
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec head_lh__d5 ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      h_6
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec head'_lh__d1 _lh_head'_arg1_1 =
//│ 		  (match _lh_head'_arg1_1 with
//│ 		    | `LH_P2(_lh_head'_LH_P2_0_1, _lh_head'_LH_P2_1_1) -> 
//│ 		      (if (not (null_lh__d2 _lh_head'_LH_P2_0_1)) then
//│ 		        (head_lh__d5 _lh_head'_LH_P2_0_1)
//│ 		      else
//│ 		        (head_lh__d5 _lh_head'_LH_P2_1_1))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec cons'_lh__d2 _lh_cons'_arg1_1 _lh_cons'_arg2_1 =
//│ 		  (match _lh_cons'_arg2_1 with
//│ 		    | `LH_P2(_lh_cons'_LH_P2_0_1, _lh_cons'_LH_P2_1_1) -> 
//│ 		      (if (not (null_lh__d2 _lh_cons'_LH_P2_1_1)) then
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_1, _lh_cons'_LH_P2_0_1)), _lh_cons'_LH_P2_1_1))
//│ 		      else
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_1, (`LH_N))), _lh_cons'_LH_P2_0_1)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec snd3_lh__d1 _lh_snd3_arg1_0 =
//│ 		  (match _lh_snd3_arg1_0 with
//│ 		    | `LH_P3(_lh_snd3_LH_P3_0_0, _lh_snd3_LH_P3_1_0, _lh_snd3_LH_P3_2_0) -> 
//│ 		      _lh_snd3_LH_P3_1_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec cost_tl_lh__d3 _lh_cost_tl_arg1_0 =
//│ 		  (snd3_lh__d1 _lh_cost_tl_arg1_0);;
//│ 		let rec width_tl_lh__d2 _lh_width_tl_arg1_0 =
//│ 		  (fst3_lh__d1 _lh_width_tl_arg1_0);;
//│ 		let rec null'_lh__d1 _lh_null'_arg1_2 =
//│ 		  (match _lh_null'_arg1_2 with
//│ 		    | `LH_P2(_lh_null'_LH_P2_0_2, _lh_null'_LH_P2_1_2) -> 
//│ 		      (match _lh_null'_LH_P2_0_2 with
//│ 		        | `LH_N -> 
//│ 		          (match _lh_null'_LH_P2_1_2 with
//│ 		            | `LH_N -> 
//│ 		              true
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec null'_lh__d3 _lh_null'_arg1_0 =
//│ 		  (match _lh_null'_arg1_0 with
//│ 		    | `LH_P2(_lh_null'_LH_P2_0_0, _lh_null'_LH_P2_1_0) -> 
//│ 		      (match _lh_null'_LH_P2_0_0 with
//│ 		        | `LH_N -> 
//│ 		          (match _lh_null'_LH_P2_1_0 with
//│ 		            | `LH_N -> 
//│ 		              true
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec drop_lh__d1 _lh_drop_arg1_0 _lh_drop_arg2_0 =
//│ 		  (match _lh_drop_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0) -> 
//│ 		      (if (_lh_drop_arg1_0 <= 0) then
//│ 		        (`LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0))
//│ 		      else
//│ 		        ((drop_lh__d1 (_lh_drop_arg1_0 - 1)) _lh_drop_LH_C_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec take_lh__d1 n_0 ls_1 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match ls_1 with
//│ 		      | `LH_C(h_1, t_1) -> 
//│ 		        (`LH_C(h_1, ((take_lh__d1 (n_0 - 1)) t_1)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec splitAt_lh__d1 _lh_splitAt_arg1_0 _lh_splitAt_arg2_0 =
//│ 		  (`LH_P2(((take_lh__d1 _lh_splitAt_arg1_0) _lh_splitAt_arg2_0), ((drop_lh__d1 _lh_splitAt_arg1_0) _lh_splitAt_arg2_0)));;
//│ 		let rec single_lh__d1 _lh_single_arg1_0 =
//│ 		  (match _lh_single_arg1_0 with
//│ 		    | `LH_C(_lh_single_LH_C_0_0, _lh_single_LH_C_1_0) -> 
//│ 		      (match _lh_single_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec tail_lh__d1 ls_3 =
//│ 		  (match ls_3 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      t_5
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec length_lh__d1 ls_1_1 =
//│ 		  (match ls_1_1 with
//│ 		    | `LH_C(h_1_7, t_1_7) -> 
//│ 		      (1 + (length_lh__d1 t_1_7))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec reverse_helper_lh__d1 ls_0 a_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      ((reverse_helper_lh__d1 t_0) (`LH_C(h_0, a_0)))
//│ 		    | `LH_N -> 
//│ 		      a_0);;
//│ 		let rec reverse_lh__d1 ls_2 =
//│ 		  ((reverse_helper_lh__d1 ls_2) (`LH_N));;
//│ 		let rec init'_lh__d1 _lh_init'_arg1_1 =
//│ 		  (match _lh_init'_arg1_1 with
//│ 		    | `LH_P2(_lh_init'_LH_P2_0_2, _lh_init'_LH_P2_1_2) -> 
//│ 		      (if (null_lh__d2 _lh_init'_LH_P2_1_2) then
//│ 		        (`LH_P2((`LH_N), (`LH_N)))
//│ 		      else
//│ 		        (if (single_lh__d1 _lh_init'_LH_P2_1_2) then
//│ 		          (let rec _lh_matchIdent_1 = ((splitAt_lh__d1 ((length_lh__d1 _lh_init'_LH_P2_0_2) / 2)) _lh_init'_LH_P2_0_2) in
//│ 		            (match _lh_matchIdent_1 with
//│ 		              | `LH_P2(_lh_init'_LH_P2_0_3, _lh_init'_LH_P2_1_3) -> 
//│ 		                (`LH_P2(_lh_init'_LH_P2_0_3, (reverse_lh__d1 _lh_init'_LH_P2_1_3)))
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        else
//│ 		          (`LH_P2(_lh_init'_LH_P2_0_2, (tail_lh__d1 _lh_init'_LH_P2_1_2)))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec min_lh__d2 _lh_min_arg1_0 _lh_min_arg2_0 =
//│ 		  (if (_lh_min_arg1_0 > _lh_min_arg2_0) then
//│ 		    _lh_min_arg2_0
//│ 		  else
//│ 		    _lh_min_arg1_0);;
//│ 		let rec last'_lh__d5 _lh_last'_arg1_0 =
//│ 		  (match _lh_last'_arg1_0 with
//│ 		    | `LH_P2(_lh_last'_LH_P2_0_0, _lh_last'_LH_P2_1_0) -> 
//│ 		      (if (not (null_lh__d2 _lh_last'_LH_P2_1_0)) then
//│ 		        (head_lh__d5 _lh_last'_LH_P2_1_0)
//│ 		      else
//│ 		        (head_lh__d5 _lh_last'_LH_P2_0_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec head'_lh__d2 _lh_head'_arg1_0 =
//│ 		  (match _lh_head'_arg1_0 with
//│ 		    | `LH_P2(_lh_head'_LH_P2_0_0, _lh_head'_LH_P2_1_0) -> 
//│ 		      (if (not (null_lh__d2 _lh_head'_LH_P2_0_0)) then
//│ 		        (head_lh__d5 _lh_head'_LH_P2_0_0)
//│ 		      else
//│ 		        (head_lh__d5 _lh_head'_LH_P2_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec optw_lh__d3 =
//│ 		  63;;
//│ 		let rec last'_lh__d4 _lh_last'_arg1_1 =
//│ 		  (match _lh_last'_arg1_1 with
//│ 		    | `LH_P2(_lh_last'_LH_P2_0_1, _lh_last'_LH_P2_1_1) -> 
//│ 		      (if (not (null_lh__d2 _lh_last'_LH_P2_1_1)) then
//│ 		        (head_lh__d5 _lh_last'_LH_P2_1_1)
//│ 		      else
//│ 		        (head_lh__d5 _lh_last'_LH_P2_0_1))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec null'_lh__d2 _lh_null'_arg1_1 =
//│ 		  (match _lh_null'_arg1_1 with
//│ 		    | `LH_P2(_lh_null'_LH_P2_0_1, _lh_null'_LH_P2_1_1) -> 
//│ 		      (match _lh_null'_LH_P2_0_1 with
//│ 		        | `LH_N -> 
//│ 		          (match _lh_null'_LH_P2_1_1 with
//│ 		            | `LH_N -> 
//│ 		              true
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec single'_lh__d1 _lh_single'_arg1_1 =
//│ 		  (match _lh_single'_arg1_1 with
//│ 		    | `LH_P2(_lh_single'_LH_P2_0_1, _lh_single'_LH_P2_1_1) -> 
//│ 		      (((null_lh__d2 _lh_single'_LH_P2_0_1) && (single_lh__d1 _lh_single'_LH_P2_1_1)) || ((single_lh__d1 _lh_single'_LH_P2_0_1) && (null_lh__d2 _lh_single'_LH_P2_1_1)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec width_tl_lh__d1 _lh_width_tl_arg1_1 =
//│ 		  (fst3_lh__d1 _lh_width_tl_arg1_1);;
//│ 		let rec optw_lh__d2 =
//│ 		  63;;
//│ 		let rec cost_tl_lh__d2 _lh_cost_tl_arg1_1 =
//│ 		  (snd3_lh__d1 _lh_cost_tl_arg1_1);;
//│ 		let rec ceildiv_lh__d1 _lh_ceildiv_arg1_0 _lh_ceildiv_arg2_0 =
//│ 		  (((_lh_ceildiv_arg1_0 + _lh_ceildiv_arg2_0) - 1) / _lh_ceildiv_arg2_0);;
//│ 		let rec single'_lh__d2 _lh_single'_arg1_0 =
//│ 		  (match _lh_single'_arg1_0 with
//│ 		    | `LH_P2(_lh_single'_LH_P2_0_0, _lh_single'_LH_P2_1_0) -> 
//│ 		      (((null_lh__d2 _lh_single'_LH_P2_0_0) && (single_lh__d1 _lh_single'_LH_P2_1_0)) || ((single_lh__d1 _lh_single'_LH_P2_0_0) && (null_lh__d2 _lh_single'_LH_P2_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec init'_lh__d2 _lh_init'_arg1_0 =
//│ 		  (match _lh_init'_arg1_0 with
//│ 		    | `LH_P2(_lh_init'_LH_P2_0_0, _lh_init'_LH_P2_1_0) -> 
//│ 		      (if (null_lh__d2 _lh_init'_LH_P2_1_0) then
//│ 		        (`LH_P2((`LH_N), (`LH_N)))
//│ 		      else
//│ 		        (if (single_lh__d1 _lh_init'_LH_P2_1_0) then
//│ 		          (let rec _lh_matchIdent_0 = ((splitAt_lh__d1 ((length_lh__d1 _lh_init'_LH_P2_0_0) / 2)) _lh_init'_LH_P2_0_0) in
//│ 		            (match _lh_matchIdent_0 with
//│ 		              | `LH_P2(_lh_init'_LH_P2_0_1, _lh_init'_LH_P2_1_1) -> 
//│ 		                (`LH_P2(_lh_init'_LH_P2_0_1, (reverse_lh__d1 _lh_init'_LH_P2_1_1)))
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        else
//│ 		          (`LH_P2(_lh_init'_LH_P2_0_0, (tail_lh__d1 _lh_init'_LH_P2_1_0)))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec last'_lh__d3 _lh_last'_arg1_2 =
//│ 		  (match _lh_last'_arg1_2 with
//│ 		    | `LH_P2(_lh_last'_LH_P2_0_2, _lh_last'_LH_P2_1_2) -> 
//│ 		      (if (not (null_lh__d2 _lh_last'_LH_P2_1_2)) then
//│ 		        (head_lh__d5 _lh_last'_LH_P2_1_2)
//│ 		      else
//│ 		        (head_lh__d5 _lh_last'_LH_P2_0_2))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec cons'_lh__d1 _lh_cons'_arg1_2 _lh_cons'_arg2_2 =
//│ 		  (match _lh_cons'_arg2_2 with
//│ 		    | `LH_P2(_lh_cons'_LH_P2_0_2, _lh_cons'_LH_P2_1_2) -> 
//│ 		      (if (not (null_lh__d2 _lh_cons'_LH_P2_1_2)) then
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_2, _lh_cons'_LH_P2_0_2)), _lh_cons'_LH_P2_1_2))
//│ 		      else
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_2, (`LH_N))), _lh_cons'_LH_P2_0_2)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec maxw_lh__d2 =
//│ 		  70;;
//│ 		let rec cost_tl_lh__d1 _lh_cost_tl_arg1_2 =
//│ 		  (snd3_lh__d1 _lh_cost_tl_arg1_2);;
//│ 		let rec optw_lh__d1 =
//│ 		  63;;
//│ 		let rec min_lh__d1 _lh_min_arg1_1 _lh_min_arg2_1 =
//│ 		  (if (_lh_min_arg1_1 > _lh_min_arg2_1) then
//│ 		    _lh_min_arg2_1
//│ 		  else
//│ 		    _lh_min_arg1_1);;
//│ 		let rec last'_lh__d2 _lh_last'_arg1_3 =
//│ 		  (match _lh_last'_arg1_3 with
//│ 		    | `LH_P2(_lh_last'_LH_P2_0_3, _lh_last'_LH_P2_1_3) -> 
//│ 		      (if (not (null_lh__d2 _lh_last'_LH_P2_1_3)) then
//│ 		        (head_lh__d5 _lh_last'_LH_P2_1_3)
//│ 		      else
//│ 		        (head_lh__d5 _lh_last'_LH_P2_0_3))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec thd3_lh__d2 _lh_thd3_arg1_0 =
//│ 		  (match _lh_thd3_arg1_0 with
//│ 		    | `LH_P3(_lh_thd3_LH_P3_0_0, _lh_thd3_LH_P3_1_0, _lh_thd3_LH_P3_2_0) -> 
//│ 		      _lh_thd3_LH_P3_2_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec len_tl_lh__d2 _lh_len_tl_arg1_0 =
//│ 		  (thd3_lh__d2 _lh_len_tl_arg1_0);;
//│ 		let rec maxw_lh__d1 =
//│ 		  70;;
//│ 		let rec tail'_lh__d1 _lh_tail'_arg1_0 =
//│ 		  (match _lh_tail'_arg1_0 with
//│ 		    | `LH_P2(_lh_tail'_LH_P2_0_0, _lh_tail'_LH_P2_1_0) -> 
//│ 		      (if (null_lh__d2 _lh_tail'_LH_P2_0_0) then
//│ 		        (`LH_P2((`LH_N), (`LH_N)))
//│ 		      else
//│ 		        (if (single_lh__d1 _lh_tail'_LH_P2_0_0) then
//│ 		          (let rec _lh_matchIdent_2 = ((splitAt_lh__d1 ((length_lh__d1 _lh_tail'_LH_P2_1_0) / 2)) _lh_tail'_LH_P2_1_0) in
//│ 		            (match _lh_matchIdent_2 with
//│ 		              | `LH_P2(_lh_tail'_LH_P2_0_1, _lh_tail'_LH_P2_1_1) -> 
//│ 		                (`LH_P2((reverse_lh__d1 _lh_tail'_LH_P2_1_1), _lh_tail'_LH_P2_0_1))
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        else
//│ 		          (`LH_P2((tail_lh__d1 _lh_tail'_LH_P2_0_0), _lh_tail'_LH_P2_1_0))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec stepr_lh__d1 _lh_stepr_arg1_0 _lh_stepr_arg2_0 =
//│ 		  (match _lh_stepr_arg2_0 with
//│ 		    | `LH_P3(_lh_stepr_LH_P3_0_0, _lh_stepr_LH_P3_1_0, _lh_stepr_LH_P3_2_0) -> 
//│ 		      (let rec tot_width_0 = ((_lh_stepr_arg1_0 + 1) + _lh_stepr_LH_P3_1_0) in
//│ 		        (let rec tot_len_0 = (1 + _lh_stepr_LH_P3_2_0) in
//│ 		          (let rec single_0 = (fun p_0 -> 
//│ 		            ((len_tl_lh__d2 p_0) = 0)) in
//│ 		            (let rec width_hd_0 = (fun p_1 -> 
//│ 		              (if (single_0 p_1) then
//│ 		                tot_width_0
//│ 		              else
//│ 		                ((tot_width_0 - (width_tl_lh__d1 p_1)) - 1))) in
//│ 		              (let rec cost_0 = (fun p_2 -> 
//│ 		                (if (single_0 p_2) then
//│ 		                  0
//│ 		                else
//│ 		                  ((cost_tl_lh__d3 p_2) + (let rec a_3 = (optw_lh__d1 - (width_hd_0 p_2)) in
//│ 		                    (a_3 * a_3))))) in
//│ 		                (let rec old_width_hd_0 = (fun p_3 -> 
//│ 		                  (if (single_0 p_3) then
//│ 		                    _lh_stepr_LH_P3_1_0
//│ 		                  else
//│ 		                    ((_lh_stepr_LH_P3_1_0 - (width_tl_lh__d2 p_3)) - 1))) in
//│ 		                  (let rec new_0 = (fun p_4 -> 
//│ 		                    (if (single_0 p_4) then
//│ 		                      (`LH_P3(_lh_stepr_LH_P3_1_0, 0, _lh_stepr_LH_P3_2_0))
//│ 		                    else
//│ 		                      (`LH_P3(_lh_stepr_LH_P3_1_0, ((cost_tl_lh__d2 p_4) + (let rec x_1 = (optw_lh__d2 - (old_width_hd_0 p_4)) in
//│ 		                        (x_1 * x_1))), _lh_stepr_LH_P3_2_0)))) in
//│ 		                    (let rec trim_0 = (fun ps_pq_0 -> 
//│ 		                      (if (null'_lh__d1 ps_pq_0) then
//│ 		                        ps_pq_0
//│ 		                      else
//│ 		                        (if (single'_lh__d2 ps_pq_0) then
//│ 		                          ps_pq_0
//│ 		                        else
//│ 		                          (let rec ps_p_0 = (init'_lh__d1 ps_pq_0) in
//│ 		                            (let rec q_0 = (last'_lh__d5 ps_pq_0) in
//│ 		                              (let rec p_5 = (last'_lh__d3 ps_p_0) in
//│ 		                                (if ((cost_0 p_5) <= (cost_0 q_0)) then
//│ 		                                  (trim_0 ps_p_0)
//│ 		                                else
//│ 		                                  ps_pq_0))))))) in
//│ 		                      (let rec drop_nofit_0 = (fun ps_p_1 -> 
//│ 		                        (if (null'_lh__d2 ps_p_1) then
//│ 		                          ps_p_1
//│ 		                        else
//│ 		                          (if ((width_hd_0 (last'_lh__d2 ps_p_1)) > maxw_lh__d2) then
//│ 		                            (drop_nofit_0 (init'_lh__d2 ps_p_1))
//│ 		                          else
//│ 		                            ps_p_1))) in
//│ 		                        (let rec bf_0 = (fun p_6 q_1 -> 
//│ 		                          (let rec wqh_0 = (width_hd_0 q_1) in
//│ 		                            (let rec rqh_0 = ((maxw_lh__d1 - wqh_0) + 1) in
//│ 		                              (if ((single_0 q_1) && ((cost_tl_lh__d1 p_6) = 0)) then
//│ 		                                ((min_lh__d2 (optw_lh__d3 - (width_hd_0 p_6))) rqh_0)
//│ 		                              else
//│ 		                                (if (single_0 q_1) then
//│ 		                                  rqh_0
//│ 		                                else
//│ 		                                  ((min_lh__d1 ((ceildiv_lh__d1 ((cost_0 p_6) - (cost_0 q_1))) (2 * (wqh_0 - (width_hd_0 p_6))))) rqh_0)))))) in
//│ 		                          (let rec myAdd_0 = (fun p_7 qr_rs_0 -> 
//│ 		                            (if ((single'_lh__d1 qr_rs_0) || (null'_lh__d3 qr_rs_0)) then
//│ 		                              ((cons'_lh__d2 p_7) qr_rs_0)
//│ 		                            else
//│ 		                              (let rec q_2 = (head'_lh__d2 qr_rs_0) in
//│ 		                                (let rec r_rs_0 = (tail'_lh__d1 qr_rs_0) in
//│ 		                                  (let rec r_0 = (head'_lh__d1 r_rs_0) in
//│ 		                                    (if (((bf_0 p_7) q_2) <= ((bf_0 q_2) r_0)) then
//│ 		                                      ((myAdd_0 p_7) r_rs_0)
//│ 		                                    else
//│ 		                                      ((cons'_lh__d1 p_7) qr_rs_0))))))) in
//│ 		                            (`LH_P3((trim_0 (drop_nofit_0 ((myAdd_0 (new_0 (last'_lh__d4 _lh_stepr_LH_P3_0_0))) _lh_stepr_LH_P3_0_0))), tot_width_0, tot_len_0)))))))))))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec head_lh__d2 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_9, t_9) -> 
//│ 		      h_9
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec fold1_lh__d1 _lh_fold1_arg1_2 _lh_fold1_arg2_2 _lh_fold1_arg3_2 =
//│ 		  (match _lh_fold1_arg3_2 with
//│ 		    | `LH_C(_lh_fold1_LH_C_0_2, _lh_fold1_LH_C_1_2) -> 
//│ 		      (match _lh_fold1_LH_C_1_2 with
//│ 		        | `LH_N -> 
//│ 		          (_lh_fold1_arg2_2 _lh_fold1_LH_C_0_2)
//│ 		        | _ -> 
//│ 		          ((_lh_fold1_arg1_2 _lh_fold1_LH_C_0_2) (((fold1_lh__d1 _lh_fold1_arg1_2) _lh_fold1_arg2_2) _lh_fold1_LH_C_1_2)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec scan1_lh__d1 _lh_scan1_arg1_0 _lh_scan1_arg2_0 =
//│ 		  ((fold1_lh__d1 (fun a_1 s_0 -> 
//│ 		    (`LH_C(((_lh_scan1_arg1_0 a_1) (head_lh__d2 s_0)), s_0)))) (fun a_2 -> 
//│ 		    (`LH_C((_lh_scan1_arg2_0 a_2), (`LH_N)))));;
//│ 		let rec len_tl_lh__d1 _lh_len_tl_arg1_1 =
//│ 		  (thd3_lh__d2 _lh_len_tl_arg1_1);;
//│ 		let rec map_lh__d4 f_3 ls_1_3 =
//│ 		  (match ls_1_3 with
//│ 		    | `LH_C(h_1_9, t_1_9) -> 
//│ 		      (`LH_C((f_3 h_1_9), ((map_lh__d4 f_3) t_1_9)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec head_lh__d1 ls_1_0 =
//│ 		  (match ls_1_0 with
//│ 		    | `LH_C(h_1_6, t_1_6) -> 
//│ 		      h_1_6
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec head_lh__d4 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      h_7
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec head_lh__d3 ls_6 =
//│ 		  (match ls_6 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      h_8
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec last'_lh__d1 _lh_last'_arg1_4 =
//│ 		  (match _lh_last'_arg1_4 with
//│ 		    | `LH_P2(_lh_last'_LH_P2_0_4, _lh_last'_LH_P2_1_4) -> 
//│ 		      (if (not (null_lh__d2 _lh_last'_LH_P2_1_4)) then
//│ 		        (head_lh__d3 _lh_last'_LH_P2_1_4)
//│ 		      else
//│ 		        (head_lh__d4 _lh_last'_LH_P2_0_4))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec tile_lh__d1 _lh_tile_arg1_0 _lh_tile_arg2_0 =
//│ 		  (match _lh_tile_arg2_0 with
//│ 		    | `LH_P2(_lh_tile_LH_P2_0_0, _lh_tile_LH_P2_1_0) -> 
//│ 		      (match _lh_tile_LH_P2_0_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_N)
//│ 		        | `LH_C(_lh_tile_LH_C_0_0, _lh_tile_LH_C_1_0) -> 
//│ 		          (let rec l_0 = (_lh_tile_LH_P2_1_0 - _lh_tile_LH_C_0_0) in
//│ 		            (let rec _lh_matchIdent_5 = ((splitAt_lh__d1 l_0) _lh_tile_arg1_0) in
//│ 		              (match _lh_matchIdent_5 with
//│ 		                | `LH_P2(_lh_tile_LH_P2_0_1, _lh_tile_LH_P2_1_1) -> 
//│ 		                  (`LH_C(_lh_tile_LH_P2_0_1, ((tile_lh__d1 _lh_tile_LH_P2_1_1) (`LH_P2(((drop_lh__d1 l_0) (`LH_C(_lh_tile_LH_C_0_0, _lh_tile_LH_C_1_0))), _lh_tile_LH_C_0_0)))))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec map_lh__d5 f_2 ls_1_2 =
//│ 		  (match ls_1_2 with
//│ 		    | `LH_C(h_1_8, t_1_8) -> 
//│ 		      (`LH_C((f_2 h_1_8), ((map_lh__d5 f_2) t_1_8)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec par3_lh__d1 _lh_par3_arg1_0 =
//│ 		  (let rec zs_0 = (((scan1_lh__d1 stepr_lh__d1) startr_lh__d1) ((map_lh__d5 length_lh__d1) _lh_par3_arg1_0)) in
//│ 		    ((tile_lh__d1 _lh_par3_arg1_0) (`LH_P2(((map_lh__d4 (fun _lh_funcomp_x_1 -> 
//│ 		      ((fun _lh_funcomp_x_2 -> 
//│ 		        (len_tl_lh__d1 (last'_lh__d1 _lh_funcomp_x_2))) (fst3_lh__d1 _lh_funcomp_x_1)))) zs_0), (thd3_lh__d1 (head_lh__d1 zs_0))))));;
//│ 		let rec dropWhile_lh__d1 _lh_dropWhile_arg1_0 _lh_dropWhile_arg2_0 =
//│ 		  (match _lh_dropWhile_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_dropWhile_LH_C_0_0, _lh_dropWhile_LH_C_1_0) -> 
//│ 		      (if (_lh_dropWhile_arg1_0 _lh_dropWhile_LH_C_0_0) then
//│ 		        ((dropWhile_lh__d1 _lh_dropWhile_arg1_0) _lh_dropWhile_LH_C_1_0)
//│ 		      else
//│ 		        (`LH_C(_lh_dropWhile_LH_C_0_0, _lh_dropWhile_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec isSpace_lh__d1 _lh_isSpace_arg1_1 =
//│ 		  (_lh_isSpace_arg1_1 = ' ');;
//│ 		let rec isSpace_lh__d2 _lh_isSpace_arg1_0 =
//│ 		  (_lh_isSpace_arg1_0 = ' ');;
//│ 		let rec break_lh__d2 _lh_break_arg1_0 _lh_break_arg2_0 =
//│ 		  (match _lh_break_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2((`LH_N), (`LH_N)))
//│ 		    | `LH_C(_lh_break_LH_C_0_0, _lh_break_LH_C_1_0) -> 
//│ 		      (if (_lh_break_arg1_0 _lh_break_LH_C_0_0) then
//│ 		        (`LH_P2((`LH_N), (`LH_C(_lh_break_LH_C_0_0, _lh_break_LH_C_1_0))))
//│ 		      else
//│ 		        (let rec _lh_matchIdent_3 = ((break_lh__d2 _lh_break_arg1_0) _lh_break_LH_C_1_0) in
//│ 		          (match _lh_matchIdent_3 with
//│ 		            | `LH_P2(_lh_break_LH_P2_0_0, _lh_break_LH_P2_1_0) -> 
//│ 		              (`LH_P2((`LH_C(_lh_break_LH_C_0_0, _lh_break_LH_P2_0_0)), _lh_break_LH_P2_1_0))
//│ 		            | _ -> 
//│ 		              (failwith "error"))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec words_lh__d1 _lh_words_arg1_0 =
//│ 		  (let rec _lh_matchIdent_6 = ((dropWhile_lh__d1 isSpace_lh__d1) _lh_words_arg1_0) in
//│ 		    (match _lh_matchIdent_6 with
//│ 		      | `LH_N -> 
//│ 		        (`LH_N)
//│ 		      | `LH_C(_lh_words_LH_C_0_0, _lh_words_LH_C_1_0) -> 
//│ 		        (let rec _lh_matchIdent_7 = ((break_lh__d2 isSpace_lh__d2) (`LH_C(_lh_words_LH_C_0_0, _lh_words_LH_C_1_0))) in
//│ 		          (match _lh_matchIdent_7 with
//│ 		            | `LH_P2(_lh_words_LH_P2_0_0, _lh_words_LH_P2_1_0) -> 
//│ 		              (`LH_C(_lh_words_LH_P2_0_0, (words_lh__d1 _lh_words_LH_P2_1_0)))
//│ 		            | _ -> 
//│ 		              (failwith "error")))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec filter_lh__d1 f_1 ls_9 =
//│ 		  (match ls_9 with
//│ 		    | `LH_C(h_1_5, t_1_5) -> 
//│ 		      (if (f_1 h_1_5) then
//│ 		        (`LH_C(h_1_5, ((filter_lh__d1 f_1) t_1_5)))
//│ 		      else
//│ 		        ((filter_lh__d1 f_1) t_1_5))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec fold1_lh__d2 _lh_fold1_arg1_1 _lh_fold1_arg2_1 _lh_fold1_arg3_1 =
//│ 		  (match _lh_fold1_arg3_1 with
//│ 		    | `LH_C(_lh_fold1_LH_C_0_1, _lh_fold1_LH_C_1_1) -> 
//│ 		      (match _lh_fold1_LH_C_1_1 with
//│ 		        | `LH_N -> 
//│ 		          (_lh_fold1_arg2_1 _lh_fold1_LH_C_0_1)
//│ 		        | _ -> 
//│ 		          ((_lh_fold1_arg1_1 _lh_fold1_LH_C_0_1) (((fold1_lh__d2 _lh_fold1_arg1_1) _lh_fold1_arg2_1) _lh_fold1_LH_C_1_1)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec format_lh__d1 _lh_format_arg1_0 _lh_format_arg2_0 =
//│ 		  (match _lh_format_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_C((`LH_N), (`LH_N)))
//│ 		    | _ -> 
//│ 		      let rec break_0 = (fun _lh_break_arg1_1 _lh_break_arg2_1 _lh_break_arg3_0 -> 
//│ 		        (if (_lh_break_arg1_1 = _lh_break_arg2_1) then
//│ 		          (`LH_C((`LH_N), _lh_break_arg3_0))
//│ 		        else
//│ 		          (`LH_C((`LH_C(_lh_break_arg2_1, (head_lh__d5 _lh_break_arg3_0))), (tail_lh__d1 _lh_break_arg3_0)))))
//│ 		      and start_0 = (fun _lh_start_arg1_0 _lh_start_arg2_0 -> 
//│ 		        (((break_0 _lh_start_arg1_0) _lh_start_arg2_0) (`LH_C((`LH_N), (`LH_N)))))
//│ 		      in (((fold1_lh__d2 (break_0 _lh_format_arg1_0)) (start_0 _lh_format_arg1_0)) _lh_format_arg2_0));;
//│ 		let rec paras_lh__d1 _lh_paras_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_0 -> 
//│ 		    ((filter_lh__d1 (fun x_2 -> 
//│ 		      ((`LH_N) <> x_2))) ((format_lh__d1 (`LH_N)) _lh_funcomp_x_0))) _lh_paras_arg1_0);;
//│ 		let rec break_lh__d1 _lh_break_arg1_2 _lh_break_arg2_2 =
//│ 		  (match _lh_break_arg2_2 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2((`LH_N), (`LH_N)))
//│ 		    | `LH_C(_lh_break_LH_C_0_1, _lh_break_LH_C_1_1) -> 
//│ 		      (if (_lh_break_arg1_2 _lh_break_LH_C_0_1) then
//│ 		        (`LH_P2((`LH_N), (`LH_C(_lh_break_LH_C_0_1, _lh_break_LH_C_1_1))))
//│ 		      else
//│ 		        (let rec _lh_matchIdent_4 = ((break_lh__d1 _lh_break_arg1_2) _lh_break_LH_C_1_1) in
//│ 		          (match _lh_matchIdent_4 with
//│ 		            | `LH_P2(_lh_break_LH_P2_0_1, _lh_break_LH_P2_1_1) -> 
//│ 		              (`LH_P2((`LH_C(_lh_break_LH_C_0_1, _lh_break_LH_P2_0_1)), _lh_break_LH_P2_1_1))
//│ 		            | _ -> 
//│ 		              (failwith "error"))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec lines_lh__d1 _lh_lines_arg1_0 =
//│ 		  (let rec _lh_matchIdent_8 = ((break_lh__d1 (fun x_3 -> 
//│ 		    (x_3 = '|'))) _lh_lines_arg1_0) in
//│ 		    (match _lh_matchIdent_8 with
//│ 		      | `LH_P2(_lh_lines_LH_P2_0_0, _lh_lines_LH_P2_1_0) -> 
//│ 		        (`LH_C(_lh_lines_LH_P2_0_0, (let rec _lh_matchIdent_9 = _lh_lines_LH_P2_1_0 in
//│ 		          (match _lh_matchIdent_9 with
//│ 		            | `LH_N -> 
//│ 		              (`LH_N)
//│ 		            | `LH_C(_lh_lines_LH_C_0_0, _lh_lines_LH_C_1_0) -> 
//│ 		              (lines_lh__d1 _lh_lines_LH_C_1_0)
//│ 		            | _ -> 
//│ 		              (failwith "error")))))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec map_lh__d2 f_5 ls_1_5 =
//│ 		  (match ls_1_5 with
//│ 		    | `LH_C(h_2_2, t_2_2) -> 
//│ 		      (`LH_C((f_5 h_2_2), ((map_lh__d2 f_5) t_2_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec parse_lh__d1 _lh_parse_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_5 -> 
//│ 		    ((fun _lh_funcomp_x_6 -> 
//│ 		      (paras_lh__d1 ((map_lh__d2 words_lh__d1) _lh_funcomp_x_6))) (lines_lh__d1 _lh_funcomp_x_5))) _lh_parse_arg1_0);;
//│ 		let rec map_lh__d3 f_4 ls_1_4 =
//│ 		  (match ls_1_4 with
//│ 		    | `LH_C(h_2_1, t_2_1) -> 
//│ 		      (`LH_C((f_4 h_2_1), ((map_lh__d3 f_4) t_2_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh__d2_d3 xs_2 ys_2 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      (`LH_C(h_4, ((mappend_lh__d2_d3 t_4) ys_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2);;
//│ 		let rec concat_lh__d2 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_1_2, t_1_2) -> 
//│ 		      ((mappend_lh__d2_d3 h_1_2) (concat_lh__d2 t_1_2))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d6 f_0 ls_8 =
//│ 		  (match ls_8 with
//│ 		    | `LH_C(h_1_1, t_1_1) -> 
//│ 		      (`LH_C((f_0 h_1_1), ((map_lh__d6 f_0) t_1_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh__d2_d2 xs_4 ys_4 =
//│ 		  (match xs_4 with
//│ 		    | `LH_C(h_1_0, t_1_0) -> 
//│ 		      (`LH_C(h_1_0, ((mappend_lh__d2_d2 t_1_0) ys_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_4);;
//│ 		let rec unlines_lh__d1 _lh_unlines_arg1_0 =
//│ 		  (concat_lh__d2 ((map_lh__d6 (fun l_1 -> 
//│ 		    ((mappend_lh__d2_d2 l_1) (`LH_C('|', (`LH_N)))))) _lh_unlines_arg1_0));;
//│ 		let rec mappend_lh__d2_d5 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C(h_2, ((mappend_lh__d2_d5 t_2) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec mappend_lh__d2_d4 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      (`LH_C(h_3, ((mappend_lh__d2_d4 t_3) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec fold1_lh__d3 _lh_fold1_arg1_0 _lh_fold1_arg2_0 _lh_fold1_arg3_0 =
//│ 		  (match _lh_fold1_arg3_0 with
//│ 		    | `LH_C(_lh_fold1_LH_C_0_0, _lh_fold1_LH_C_1_0) -> 
//│ 		      (match _lh_fold1_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (_lh_fold1_arg2_0 _lh_fold1_LH_C_0_0)
//│ 		        | _ -> 
//│ 		          ((_lh_fold1_arg1_0 _lh_fold1_LH_C_0_0) (((fold1_lh__d3 _lh_fold1_arg1_0) _lh_fold1_arg2_0) _lh_fold1_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec unformat_lh__d1 _lh_unformat_arg1_0 =
//│ 		  ((fold1_lh__d3 (fun xs_3 ys_3 -> 
//│ 		    ((mappend_lh__d2_d5 ((mappend_lh__d2_d4 xs_3) (`LH_C(_lh_unformat_arg1_0, (`LH_N))))) ys_3))) (fun x_0 -> 
//│ 		    x_0));;
//│ 		let rec unparas_lh__d1 _lh_unparas_arg1_0 =
//│ 		  ((unformat_lh__d1 (`LH_N)) _lh_unparas_arg1_0);;
//│ 		let rec mappend_lh__d2_d1 xs_5 ys_5 =
//│ 		  (match xs_5 with
//│ 		    | `LH_C(h_1_3, t_1_3) -> 
//│ 		      (`LH_C(h_1_3, ((mappend_lh__d2_d1 t_1_3) ys_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_5);;
//│ 		let rec mappend_lh__d2_d0 xs_6 ys_6 =
//│ 		  (match xs_6 with
//│ 		    | `LH_C(h_1_4, t_1_4) -> 
//│ 		      (`LH_C(h_1_4, ((mappend_lh__d2_d0 t_1_4) ys_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_6);;
//│ 		let rec unwords_lh__d1 _lh_unwords_arg1_0 =
//│ 		  (match _lh_unwords_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_unwords_LH_C_0_0, _lh_unwords_LH_C_1_0) -> 
//│ 		      (let rec go_0 = (fun _lh_go_arg1_0 -> 
//│ 		        (match _lh_go_arg1_0 with
//│ 		          | `LH_N -> 
//│ 		            (`LH_N)
//│ 		          | `LH_C(_lh_go_LH_C_0_0, _lh_go_LH_C_1_0) -> 
//│ 		            (`LH_C(' ', ((mappend_lh__d2_d1 _lh_go_LH_C_0_0) (go_0 _lh_go_LH_C_1_0))))
//│ 		          | _ -> 
//│ 		            (failwith "error"))) in
//│ 		        ((mappend_lh__d2_d0 _lh_unwords_LH_C_0_0) (go_0 _lh_unwords_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec unparse_lh__d1 _lh_unparse_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_3 -> 
//│ 		    ((fun _lh_funcomp_x_4 -> 
//│ 		      (unlines_lh__d1 ((map_lh__d3 unwords_lh__d1) _lh_funcomp_x_4))) (unparas_lh__d1 _lh_funcomp_x_3))) _lh_unparse_arg1_0);;
//│ 		let rec map_lh__d1 f_6 ls_1_6 =
//│ 		  (match ls_1_6 with
//│ 		    | `LH_C(h_2_3, t_2_3) -> 
//│ 		      (`LH_C((f_6 h_2_3), ((map_lh__d1 f_6) t_2_3)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh__d1_d9 xs_7 ys_7 =
//│ 		  (match xs_7 with
//│ 		    | `LH_C(h_2_0, t_2_0) -> 
//│ 		      (`LH_C(h_2_0, ((mappend_lh__d1_d9 t_2_0) ys_7)))
//│ 		    | `LH_N -> 
//│ 		      ys_7);;
//│ 		let rec concat_lh__d1 lss_1 =
//│ 		  (match lss_1 with
//│ 		    | `LH_C(h_2_4, t_2_4) -> 
//│ 		      ((mappend_lh__d1_d9 h_2_4) (concat_lh__d1 t_2_4))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec fmt_lh__d1 _lh_fmt_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_7 -> 
//│ 		    ((fun _lh_funcomp_x_8 -> 
//│ 		      (unparse_lh__d1 ((map_lh__d1 (fun _lh_funcomp_x_9 -> 
//│ 		        (par3_lh__d1 (concat_lh__d1 _lh_funcomp_x_9)))) _lh_funcomp_x_8))) (parse_lh__d1 _lh_funcomp_x_7))) _lh_fmt_arg1_0);;
//│ 		let rec null_lh__d1 _lh_null_arg1_1 =
//│ 		  (match _lh_null_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_1, _lh_null_LH_C_1_1) -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mappend_lh__d3 xs_2_3 ys_2_3 =
//│ 		  (match xs_2_3 with
//│ 		    | `LH_C(h_4_0, t_4_0) -> 
//│ 		      (`LH_C(h_4_0, ((mappend_lh__d3 t_4_0) ys_2_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_3);;
//│ 		let rec mappend_lh__d1 xs_2_5 ys_2_5 =
//│ 		  (match xs_2_5 with
//│ 		    | `LH_C(h_4_2, t_4_2) -> 
//│ 		      (`LH_C(h_4_2, ((mappend_lh__d1 t_4_2) ys_2_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_5);;
//│ 		let rec mappend_lh__d8 xs_1_8 ys_1_8 =
//│ 		  (match xs_1_8 with
//│ 		    | `LH_C(h_3_5, t_3_5) -> 
//│ 		      (`LH_C(h_3_5, ((mappend_lh__d8 t_3_5) ys_1_8)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_8);;
//│ 		let rec mappend_lh__d5 xs_2_1 ys_2_1 =
//│ 		  (match xs_2_1 with
//│ 		    | `LH_C(h_3_8, t_3_8) -> 
//│ 		      (`LH_C(h_3_8, ((mappend_lh__d5 t_3_8) ys_2_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_1);;
//│ 		let rec mappend_lh__d6 xs_2_0 ys_2_0 =
//│ 		  (match xs_2_0 with
//│ 		    | `LH_C(h_3_7, t_3_7) -> 
//│ 		      (`LH_C(h_3_7, ((mappend_lh__d6 t_3_7) ys_2_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_0);;
//│ 		let rec mappend_lh__d4 xs_2_2 ys_2_2 =
//│ 		  (match xs_2_2 with
//│ 		    | `LH_C(h_3_9, t_3_9) -> 
//│ 		      (`LH_C(h_3_9, ((mappend_lh__d4 t_3_9) ys_2_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_2);;
//│ 		let rec mappend_lh__d9 xs_1_7 ys_1_7 =
//│ 		  (match xs_1_7 with
//│ 		    | `LH_C(h_3_4, t_3_4) -> 
//│ 		      (`LH_C(h_3_4, ((mappend_lh__d9 t_3_4) ys_1_7)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_7);;
//│ 		let rec mappend_lh__d7 xs_1_9 ys_1_9 =
//│ 		  (match xs_1_9 with
//│ 		    | `LH_C(h_3_6, t_3_6) -> 
//│ 		      (`LH_C(h_3_6, ((mappend_lh__d7 t_3_6) ys_1_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_9);;
//│ 		let rec mappend_lh__d2 xs_2_4 ys_2_4 =
//│ 		  (match xs_2_4 with
//│ 		    | `LH_C(h_4_1, t_4_1) -> 
//│ 		      (`LH_C(h_4_1, ((mappend_lh__d2 t_4_1) ys_2_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_4);;
//│ 		let rec test_lh__d1 _lh_test_arg1_1 =
//│ 		  ((mappend_lh__d2 ((mappend_lh__d8 ((mappend_lh__d1 ((mappend_lh__d7 ((mappend_lh__d4 ((mappend_lh__d9 ((mappend_lh__d5 ((mappend_lh__d3 ((mappend_lh__d6 (`LH_C('I', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('s', (`LH_C('t', (`LH_C('r', (`LH_C('u', (`LH_C('c', (`LH_C('t', (`LH_C('i', (`LH_C('v', (`LH_C('e', (`LH_C(' ', (`LH_C('p', (`LH_C('r', (`LH_C('o', (`LH_C('g', (`LH_C('r', (`LH_C('a', (`LH_C('m', (`LH_C('m', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('m', (`LH_C('u', (`LH_C('n', (`LH_C('i', (`LH_C('t', (`LH_C('y', (`LH_C(' ', (`LH_C('i', (`LH_C('t', (`LH_C(' ', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('m', (`LH_C('o', (`LH_C('n', (`LH_C('p', (`LH_C('l', (`LH_C('a', (`LH_C('c', (`LH_C('e', (`LH_C(' ', (`LH_C('t', (`LH_C('o', (`LH_C(' ', (`LH_C('s', (`LH_C('e', (`LH_C('e', (`LH_C(' ', (`LH_N)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('f', (`LH_C('o', (`LH_C('r', (`LH_C('m', (`LH_C('a', (`LH_C('l', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('v', (`LH_C('e', (`LH_C('l', (`LH_C('o', (`LH_C('p', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('s', (`LH_C(' ', (`LH_C('o', (`LH_C('f', (`LH_C(' ', (`LH_C('t', (`LH_C('e', (`LH_C('x', (`LH_C('t', (`LH_C('b', (`LH_C('o', (`LH_C('o', (`LH_C('k', (`LH_C(' ', (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C('s', (`LH_C('.', (`LH_C(' ', (`LH_C('I', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('s', (`LH_C('i', (`LH_C('g', (`LH_C('n', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('m', (`LH_C('u', (`LH_C('n', (`LH_C('i', (`LH_C('t', (`LH_C('y', (`LH_C(',', (`LH_C(' ', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('o', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C('r', (`LH_C(' ', (`LH_C('h', (`LH_C('a', (`LH_C('n', (`LH_C('d', (`LH_C(',', (`LH_C(' ', (`LH_C('i', (`LH_C('t', (`LH_C(' ', (`LH_C('m', (`LH_C('a', (`LH_C('y', (`LH_C(' ', (`LH_C('b', (`LH_C('e', (`LH_C(' ', (`LH_C('w', (`LH_C('e', (`LH_C('l', (`LH_C('l', (`LH_C(' ', (`LH_C('k', (`LH_C('n', (`LH_C('o', (`LH_C('w', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('a', (`LH_C('t', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('t', (`LH_C('e', (`LH_C('x', (`LH_C('t', (`LH_C('b', (`LH_C('o', (`LH_C('o', (`LH_C('k', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('s', (`LH_C('o', (`LH_C('l', (`LH_C('u', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('o', (`LH_C(' ', (`LH_C('a', (`LH_C(' ', (`LH_C('p', (`LH_C('r', (`LH_C('o', (`LH_C('b', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C(' ', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('n', (`LH_C('o', (`LH_C('t', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('m', (`LH_C('o', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('e', (`LH_C('f', (`LH_C('f', (`LH_C('i', (`LH_C('c', (`LH_C('i', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(' ', (`LH_C('p', (`LH_C('o', (`LH_C('s', (`LH_C('s', (`LH_C('i', (`LH_C('b', (`LH_C('l', (`LH_C('e', (`LH_C('.', (`LH_C(' ', (`LH_C('H', (`LH_C('o', (`LH_C('w', (`LH_C('e', (`LH_C('v', (`LH_C('e', (`LH_C('r', (`LH_C(',', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('p', (`LH_C('r', (`LH_C('e', (`LH_C('s', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('m', (`LH_C('o', (`LH_C('r', (`LH_C('e', (`LH_C(' ', (`LH_C('e', (`LH_C('f', (`LH_C('f', (`LH_C('i', (`LH_C('c', (`LH_C('i', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('l', (`LH_C('u', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(',', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('s', (`LH_C('i', (`LH_C('g', (`LH_C('n', (`LH_C('e', (`LH_C('r', (`LH_C(' ', (`LH_C('w', (`LH_C('i', (`LH_C('l', (`LH_C('l', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('u', (`LH_C('s', (`LH_C('u', (`LH_C('a', (`LH_C('l', (`LH_C('l', (`LH_C('y', (`LH_C(' ', (`LH_C('o', (`LH_C('m', (`LH_C('i', (`LH_C('t', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('m', (`LH_C('e', (`LH_C(' ', (`LH_C('o', (`LH_C('f', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('t', (`LH_C('a', (`LH_C('i', (`LH_C('l', (`LH_C('s', (`LH_C(',', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('c', (`LH_C('r', (`LH_C('e', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('n', (`LH_C('g', (`LH_C(' ', (`LH_C('a', (`LH_C('n', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C(' ', (`LH_C('g', (`LH_C('a', (`LH_C('p', (`LH_C(' ', (`LH_C('b', (`LH_C('e', (`LH_C('t', (`LH_C('w', (`LH_C('e', (`LH_C('e', (`LH_C('n', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('a', (`LH_C('b', (`LH_C('s', (`LH_C('t', (`LH_C('r', (`LH_C('a', (`LH_C('c', (`LH_C('t', (`LH_C(' ', (`LH_C('a', (`LH_C('l', (`LH_C('g', (`LH_C('o', (`LH_C('r', (`LH_C('i', (`LH_C('t', (`LH_C('h', (`LH_C('m', (`LH_C(' ', (`LH_C('a', (`LH_C('n', (`LH_C('d', (`LH_C(' ', (`LH_C('i', (`LH_C('t', (`LH_C('s', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('c', (`LH_C('r', (`LH_C('e', (`LH_C('t', (`LH_C('e', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C('.', (`LH_C(' ', (`LH_C('T', (`LH_C('h', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('i', (`LH_C('s', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('t', (`LH_C('r', (`LH_C('a', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('t', (`LH_C('o', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('f', (`LH_C('o', (`LH_C('r', (`LH_C('m', (`LH_C('a', (`LH_C('l', (`LH_C(' ', (`LH_C('d', (`LH_C('e', (`LH_C('v', (`LH_C('e', (`LH_C('l', (`LH_C('o', (`LH_C('p', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(',', (`LH_C(' ', (`LH_C('w', (`LH_C('h', (`LH_C('i', (`LH_C('c', (`LH_C('h', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('u', (`LH_C('s', (`LH_C('u', (`LH_C('a', (`LH_C('l', (`LH_C('l', (`LH_C('y', (`LH_C(' ', (`LH_C('p', (`LH_C('r', (`LH_C('e', (`LH_C('s', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('s', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('t', (`LH_C('e', (`LH_C(' ', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('c', (`LH_C('r', (`LH_C('e', (`LH_C('t', (`LH_C('e', (`LH_C(' ', (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_C('o', (`LH_C('f', (`LH_C(' ', (`LH_C('t', (`LH_C('h', (`LH_C('e', (`LH_C(' ', (`LH_C('l', (`LH_C('e', (`LH_C('s', (`LH_C('s', (`LH_C(' ', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (`LH_C('e', (`LH_C('f', (`LH_C('f', (`LH_C('i', (`LH_C('c', (`LH_C('i', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C(' ', (`LH_C('s', (`LH_C('o', (`LH_C('l', (`LH_C('u', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C('.', (`LH_C('|', (`LH_C(' ', (`LH_C('|', (`LH_N))))))))))))))))))))))))))))))))))))))))))))));;
//│ 		let rec testPara_nofib_lh__d1 _lh_testPara_nofib_arg1_0 =
//│ 		  (if (null_lh__d1 (test_lh__d2 0)) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (fmt_lh__d1 (test_lh__d1 0)));;
//│ 		(testPara_nofib_lh__d1 0)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C h⁰ a⁰]: 7 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁵ of {LH_C h⁷ t⁷ => h⁷ | LH_N  => error⁰}: 185
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 418
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 593
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₂₁(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 1486
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₂₁(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh_₂₀(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 1497
//│ [LH_N]: 30 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁵ of {LH_C h⁷ t⁷ => h⁷ | LH_N  => error⁰}: 185
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 418
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 593
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₂₁(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 1486
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₂₁(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh_₂₀(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 1497
//│ [LH_N]: 32 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁵ of {LH_C h⁷ t⁷ => h⁷ | LH_N  => error⁰}: 185
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 418
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 593
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ 	case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₂₁(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 1486
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₂₁(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh_₂₀(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 1497
//│ [LH_N]: 44 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_C h² mappend_lh_₂₅(t², ys⁰)]: 62 --->
//│ 	case ls¹⁴ of {LH_C h²¹ t²¹ => [LH_C f⁴(h²¹) map_lh_₃(f⁴, t²¹)] | LH_N  => [LH_N]}: 1469
//│ [LH_C h³ mappend_lh_₂₄(t³, ys¹)]: 96 --->
//│ 	case xs⁰ of {LH_C h² t² => [LH_C h² mappend_lh_₂₅(t², ys⁰)] | LH_N  => ys⁰}: 64
//│ [LH_P2 take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]: 155 --->
//│ 	case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰}: 315
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰}: 558
//│ 	case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰}: 626
//│ 	case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰}: 934
//│ [LH_N]: 159 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰}: 938
//│ [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 167 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰}: 938
//│ [LH_N]: 203 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_N]: 204 --->
//│ 	DeadCodeCons
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_P2 [LH_N] [LH_N]]: 205 --->
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 225
//│ [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁵ of {LH_C h⁷ t⁷ => h⁷ | LH_N  => error⁰}: 185
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 217 --->
//│ 	DeadCodeCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 269
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 368
//│ 	case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1¹)) then head_lh_₅(_lh_last'_LH_P2_1¹) else head_lh_₅(_lh_last'_LH_P2_0¹) | _  => error⁰}: 440
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 492
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 513
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 657
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 967
//│ [LH_N]: 219 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_C _lh_cons'_arg1⁰ [LH_N]]: 220 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁵ of {LH_C h⁷ t⁷ => h⁷ | LH_N  => error⁰}: 185
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 222 --->
//│ 	DeadCodeCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 269
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 368
//│ 	case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1¹)) then head_lh_₅(_lh_last'_LH_P2_1¹) else head_lh_₅(_lh_last'_LH_P2_0¹) | _  => error⁰}: 440
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 492
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 513
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 657
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 967
//│ [LH_N]: 291 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁵ of {LH_C h⁷ t⁷ => h⁷ | LH_N  => error⁰}: 185
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 418
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 593
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_N]: 292 --->
//│ 	DeadCodeCons
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_P2 [LH_N] [LH_N]]: 293 --->
//│ 	DeadCodeCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 269
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₂(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 325
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁰)) then head_lh_₅(_lh_last'_LH_P2_1⁰) else head_lh_₅(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 356
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 368
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₂(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₂(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 393
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 420
//│ 	case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1¹)) then head_lh_₅(_lh_last'_LH_P2_1¹) else head_lh_₅(_lh_last'_LH_P2_0¹) | _  => error⁰}: 440
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 492
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 513
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₂(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)] | _  => error⁰}: 568
//│ 	case _lh_last'_arg1³ of {LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1³)) then head_lh_₅(_lh_last'_LH_P2_1³) else head_lh_₅(_lh_last'_LH_P2_0³) | _  => error⁰}: 584
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 595
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 657
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 967
//│ [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 313 --->
//│ 	DeadCodeCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 269
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₂(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 325
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁰)) then head_lh_₅(_lh_last'_LH_P2_1⁰) else head_lh_₅(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 356
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 368
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₂(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₂(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 393
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 420
//│ 	case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1¹)) then head_lh_₅(_lh_last'_LH_P2_1¹) else head_lh_₅(_lh_last'_LH_P2_0¹) | _  => error⁰}: 440
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 492
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 513
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₂(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)] | _  => error⁰}: 568
//│ 	case _lh_last'_arg1³ of {LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1³)) then head_lh_₅(_lh_last'_LH_P2_1³) else head_lh_₅(_lh_last'_LH_P2_0³) | _  => error⁰}: 584
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 595
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 657
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 967
//│ [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]: 321 --->
//│ 	DeadCodeCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 269
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₂(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 325
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁰)) then head_lh_₅(_lh_last'_LH_P2_1⁰) else head_lh_₅(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 356
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 368
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₂(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₂(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 393
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 420
//│ 	case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1¹)) then head_lh_₅(_lh_last'_LH_P2_1¹) else head_lh_₅(_lh_last'_LH_P2_0¹) | _  => error⁰}: 440
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 492
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 513
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₂(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)] | _  => error⁰}: 568
//│ 	case _lh_last'_arg1³ of {LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1³)) then head_lh_₅(_lh_last'_LH_P2_1³) else head_lh_₅(_lh_last'_LH_P2_0³) | _  => error⁰}: 584
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 595
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 657
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 967
//│ [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁵ of {LH_C h⁷ t⁷ => h⁷ | LH_N  => error⁰}: 185
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 418
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 593
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 505 --->
//│ 	DeadCodeCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 269
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₂(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 325
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁰)) then head_lh_₅(_lh_last'_LH_P2_1⁰) else head_lh_₅(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 356
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 368
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₂(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₂(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 393
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 420
//│ 	case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1¹)) then head_lh_₅(_lh_last'_LH_P2_1¹) else head_lh_₅(_lh_last'_LH_P2_0¹) | _  => error⁰}: 440
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 492
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 513
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₂(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)] | _  => error⁰}: 568
//│ 	case _lh_last'_arg1³ of {LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1³)) then head_lh_₅(_lh_last'_LH_P2_1³) else head_lh_₅(_lh_last'_LH_P2_0³) | _  => error⁰}: 584
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 595
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 657
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 967
//│ [LH_N]: 507 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_C _lh_cons'_arg1¹ [LH_N]]: 508 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁵ of {LH_C h⁷ t⁷ => h⁷ | LH_N  => error⁰}: 185
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 418
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 593
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 510 --->
//│ 	DeadCodeCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 269
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₂(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 325
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁰)) then head_lh_₅(_lh_last'_LH_P2_1⁰) else head_lh_₅(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 356
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 368
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₂(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₂(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 393
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 420
//│ 	case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1¹)) then head_lh_₅(_lh_last'_LH_P2_1¹) else head_lh_₅(_lh_last'_LH_P2_0¹) | _  => error⁰}: 440
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 492
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 513
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₂(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)] | _  => error⁰}: 568
//│ 	case _lh_last'_arg1³ of {LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1³)) then head_lh_₅(_lh_last'_LH_P2_1³) else head_lh_₅(_lh_last'_LH_P2_0³) | _  => error⁰}: 584
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 595
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 657
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 967
//│ [LH_N]: 534 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁵ of {LH_C h⁷ t⁷ => h⁷ | LH_N  => error⁰}: 185
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 593
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_N]: 535 --->
//│ 	DeadCodeCons
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_P2 [LH_N] [LH_N]]: 536 --->
//│ 	DeadCodeCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 269
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁰)) then head_lh_₅(_lh_last'_LH_P2_1⁰) else head_lh_₅(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 356
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 368
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₂(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₂(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 393
//│ 	case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1¹)) then head_lh_₅(_lh_last'_LH_P2_1¹) else head_lh_₅(_lh_last'_LH_P2_0¹) | _  => error⁰}: 440
//│ 	case _lh_last'_arg1² of {LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₂(_lh_last'_LH_P2_1²)) then head_lh_₅(_lh_last'_LH_P2_1²) else head_lh_₅(_lh_last'_LH_P2_0²) | _  => error⁰}: 456
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 492
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 513
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₂(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)] | _  => error⁰}: 568
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 595
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 657
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 967
//│ [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 556 --->
//│ 	DeadCodeCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 269
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁰)) then head_lh_₅(_lh_last'_LH_P2_1⁰) else head_lh_₅(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 356
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 368
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₂(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₂(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 393
//│ 	case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1¹)) then head_lh_₅(_lh_last'_LH_P2_1¹) else head_lh_₅(_lh_last'_LH_P2_0¹) | _  => error⁰}: 440
//│ 	case _lh_last'_arg1² of {LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₂(_lh_last'_LH_P2_1²)) then head_lh_₅(_lh_last'_LH_P2_1²) else head_lh_₅(_lh_last'_LH_P2_0²) | _  => error⁰}: 456
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 492
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 513
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₂(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)] | _  => error⁰}: 568
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 595
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 657
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 967
//│ [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]: 564 --->
//│ 	DeadCodeCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 269
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁰)) then head_lh_₅(_lh_last'_LH_P2_1⁰) else head_lh_₅(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 356
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 368
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₂(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₂(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 393
//│ 	case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1¹)) then head_lh_₅(_lh_last'_LH_P2_1¹) else head_lh_₅(_lh_last'_LH_P2_0¹) | _  => error⁰}: 440
//│ 	case _lh_last'_arg1² of {LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₂(_lh_last'_LH_P2_1²)) then head_lh_₅(_lh_last'_LH_P2_1²) else head_lh_₅(_lh_last'_LH_P2_0²) | _  => error⁰}: 456
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 492
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 513
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₂(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)] | _  => error⁰}: 568
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 595
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 657
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 967
//│ [LH_N]: 602 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_N]: 603 --->
//│ 	DeadCodeCons
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_P2 [LH_N] [LH_N]]: 604 --->
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 269
//│ 	case _lh_head'_arg1¹ of {LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0¹)) then head_lh_₅(_lh_head'_LH_P2_0¹) else head_lh_₅(_lh_head'_LH_P2_1¹) | _  => error⁰}: 285
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 368
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 492
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 513
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 657
//│ [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 624 --->
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 269
//│ 	case _lh_head'_arg1¹ of {LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0¹)) then head_lh_₅(_lh_head'_LH_P2_0¹) else head_lh_₅(_lh_head'_LH_P2_1¹) | _  => error⁰}: 285
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 368
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 492
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 513
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 657
//│ [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 632 --->
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 269
//│ 	case _lh_head'_arg1¹ of {LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0¹)) then head_lh_₅(_lh_head'_LH_P2_0¹) else head_lh_₅(_lh_head'_LH_P2_1¹) | _  => error⁰}: 285
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 368
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 492
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 513
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 657
//│ [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁵ of {LH_C h⁷ t⁷ => h⁷ | LH_N  => error⁰}: 185
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 418
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 593
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 649 --->
//│ 	DeadCodeCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 269
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₂(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 325
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁰)) then head_lh_₅(_lh_last'_LH_P2_1⁰) else head_lh_₅(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 356
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 368
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₂(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₂(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 393
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 420
//│ 	case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1¹)) then head_lh_₅(_lh_last'_LH_P2_1¹) else head_lh_₅(_lh_last'_LH_P2_0¹) | _  => error⁰}: 440
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 492
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 513
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₂(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)] | _  => error⁰}: 568
//│ 	case _lh_last'_arg1³ of {LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1³)) then head_lh_₅(_lh_last'_LH_P2_1³) else head_lh_₅(_lh_last'_LH_P2_0³) | _  => error⁰}: 584
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 595
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 657
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 967
//│ [LH_N]: 651 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_C _lh_cons'_arg1² [LH_N]]: 652 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁵ of {LH_C h⁷ t⁷ => h⁷ | LH_N  => error⁰}: 185
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 418
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 593
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 654 --->
//│ 	DeadCodeCons
//│ 	case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 269
//│ 	case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₂(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 325
//│ 	case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁰)) then head_lh_₅(_lh_last'_LH_P2_1⁰) else head_lh_₅(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 356
//│ 	case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 368
//│ 	case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₂(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₂(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 393
//│ 	case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 420
//│ 	case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1¹)) then head_lh_₅(_lh_last'_LH_P2_1¹) else head_lh_₅(_lh_last'_LH_P2_0¹) | _  => error⁰}: 440
//│ 	case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 492
//│ 	case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 513
//│ 	case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₂(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)] | _  => error⁰}: 568
//│ 	case _lh_last'_arg1³ of {LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1³)) then head_lh_₅(_lh_last'_LH_P2_1³) else head_lh_₅(_lh_last'_LH_P2_0³) | _  => error⁰}: 584
//│ 	case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 595
//│ 	case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 657
//│ 	case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 967
//│ [LH_N]: 666 --->
//│ 	case xs⁰ of {LH_C h² t² => [LH_C h² mappend_lh_₂₅(t², ys⁰)] | LH_N  => ys⁰}: 64
//│ [LH_C _lh_unformat_arg1⁰ [LH_N]]: 667 --->
//│ 	case xs⁰ of {LH_C h² t² => [LH_C h² mappend_lh_₂₅(t², ys⁰)] | LH_N  => ys⁰}: 64
//│ [LH_C h¹⁰ mappend_lh_₂₂(t¹⁰, ys⁴)]: 686 --->
//│ 	case xs² of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₂₃(t⁴, ys²)] | LH_N  => ys²}: 110
//│ [LH_C f⁰(h¹¹) map_lh_₆(f⁰, t¹¹)]: 700 --->
//│ 	case lss⁰ of {LH_C h¹² t¹² => mappend_lh_₂₃(h¹², concat_lh_₂(t¹²)) | LH_N  => [LH_N]}: 714
//│ [LH_N]: 701 --->
//│ 	case lss⁰ of {LH_C h¹² t¹² => mappend_lh_₂₃(h¹², concat_lh_₂(t¹²)) | LH_N  => [LH_N]}: 714
//│ [LH_C h¹³ mappend_lh_₂₁(t¹³, ys⁵)]: 723 --->
//│ 	case xs⁴ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂₂(t¹⁰, ys⁴)] | LH_N  => ys⁴}: 688
//│ [LH_C h¹⁴ mappend_lh_₂₀(t¹⁴, ys⁶)]: 735 --->
//│ 	case xs⁴ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂₂(t¹⁰, ys⁴)] | LH_N  => ys⁴}: 688
//│ [LH_N]: 741 --->
//│ 	case _lh_matchIdent⁶ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁷ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 1523
//│ [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]: 752 --->
//│ 	case _lh_matchIdent⁶ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁷ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 1523
//│ [LH_N]: 759 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 201
//│ 	case xs⁵ of {LH_C h¹³ t¹³ => [LH_C h¹³ mappend_lh_₂₁(t¹³, ys⁵)] | LH_N  => ys⁵}: 725
//│ 	case xs⁶ of {LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₂₀(t¹⁴, ys⁶)] | LH_N  => ys⁶}: 737
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 951
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ 	case lss¹ of {LH_C h²⁴ t²⁴ => mappend_lh_₁₉(h²⁴, concat_lh_₁(t²⁴)) | LH_N  => [LH_N]}: 1645
//│ [LH_N]: 760 --->
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 755
//│ [LH_P2 [LH_N] [LH_N]]: 761 --->
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰}: 782
//│ 	case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰}: 1520
//│ [LH_N]: 765 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 201
//│ 	case xs⁵ of {LH_C h¹³ t¹³ => [LH_C h¹³ mappend_lh_₂₁(t¹³, ys⁵)] | LH_N  => ys⁵}: 725
//│ 	case xs⁶ of {LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₂₀(t¹⁴, ys⁶)] | LH_N  => ys⁶}: 737
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 951
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ 	case lss¹ of {LH_C h²⁴ t²⁴ => mappend_lh_₁₉(h²⁴, concat_lh_₁(t²⁴)) | LH_N  => [LH_N]}: 1645
//│ [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]: 768 --->
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 755
//│ [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]]: 769 --->
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰}: 782
//│ 	case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰}: 1520
//│ [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 778 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 201
//│ 	case xs⁵ of {LH_C h¹³ t¹³ => [LH_C h¹³ mappend_lh_₂₁(t¹³, ys⁵)] | LH_N  => ys⁵}: 725
//│ 	case xs⁶ of {LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₂₀(t¹⁴, ys⁶)] | LH_N  => ys⁶}: 737
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 951
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ 	case lss¹ of {LH_C h²⁴ t²⁴ => mappend_lh_₁₉(h²⁴, concat_lh_₁(t²⁴)) | LH_N  => [LH_N]}: 1645
//│ [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]: 780 --->
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰}: 782
//│ 	case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰}: 1520
//│ [LH_N]: 802 --->
//│ 	NoCons
//│ 	case lss¹ of {LH_C h²⁴ t²⁴ => mappend_lh_₁₉(h²⁴, concat_lh_₁(t²⁴)) | LH_N  => [LH_N]}: 1645
//│ [LH_N]: 803 --->
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ [LH_C [LH_N] [LH_N]]: 804 --->
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ [LH_N]: 810 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 201
//│ 	case xs⁵ of {LH_C h¹³ t¹³ => [LH_C h¹³ mappend_lh_₂₁(t¹³, ys⁵)] | LH_N  => ys⁵}: 725
//│ 	case xs⁶ of {LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₂₀(t¹⁴, ys⁶)] | LH_N  => ys⁶}: 737
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 951
//│ 	case lss¹ of {LH_C h²⁴ t²⁴ => mappend_lh_₁₉(h²⁴, concat_lh_₁(t²⁴)) | LH_N  => [LH_N]}: 1645
//│ [LH_C [LH_N] _lh_break_arg3⁰]: 812 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)]: 817 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 201
//│ 	case xs⁵ of {LH_C h¹³ t¹³ => [LH_C h¹³ mappend_lh_₂₁(t¹³, ys⁵)] | LH_N  => ys⁵}: 725
//│ 	case xs⁶ of {LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₂₀(t¹⁴, ys⁶)] | LH_N  => ys⁶}: 737
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 951
//│ 	case lss¹ of {LH_C h²⁴ t²⁴ => mappend_lh_₁₉(h²⁴, concat_lh_₁(t²⁴)) | LH_N  => [LH_N]}: 1645
//│ [LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 821 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_N]: 831 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 201
//│ 	case xs⁵ of {LH_C h¹³ t¹³ => [LH_C h¹³ mappend_lh_₂₁(t¹³, ys⁵)] | LH_N  => ys⁵}: 725
//│ 	case xs⁶ of {LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₂₀(t¹⁴, ys⁶)] | LH_N  => ys⁶}: 737
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 951
//│ 	case lss¹ of {LH_C h²⁴ t²⁴ => mappend_lh_₁₉(h²⁴, concat_lh_₁(t²⁴)) | LH_N  => [LH_N]}: 1645
//│ [LH_N]: 832 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_C [LH_N] [LH_N]]: 833 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51
//│ 	case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53
//│ 	case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196
//│ 	case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364
//│ 	case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366
//│ 	case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416
//│ 	case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591
//│ 	case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870
//│ 	case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983
//│ [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)]: 862 --->
//│ 	case ls¹⁶ of {LH_C h²³ t²³ => [LH_C f⁶(h²³) map_lh_₁(f⁶, t²³)] | LH_N  => [LH_N]}: 1633
//│ [LH_N]: 869 --->
//│ 	case ls¹⁶ of {LH_C h²³ t²³ => [LH_C f⁶(h²³) map_lh_₁(f⁶, t²³)] | LH_N  => [LH_N]}: 1633
//│ [LH_N]: 874 --->
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 755
//│ 	case _lh_break_arg2⁰ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1⁰(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent³ = break_lh_₂(_lh_break_arg1⁰, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 786
//│ [LH_N]: 875 --->
//│ 	case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1563
//│ [LH_P2 [LH_N] [LH_N]]: 876 --->
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹] | _  => error⁰}: 897
//│ 	case _lh_matchIdent⁸ of {LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}] | _  => error⁰}: 1567
//│ [LH_N]: 880 --->
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 755
//│ 	case _lh_break_arg2⁰ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1⁰(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent³ = break_lh_₂(_lh_break_arg1⁰, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 786
//│ [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]: 883 --->
//│ 	case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1563
//│ [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]]: 884 --->
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹] | _  => error⁰}: 897
//│ 	case _lh_matchIdent⁸ of {LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}] | _  => error⁰}: 1567
//│ [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹]: 893 --->
//│ 	case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 755
//│ 	case _lh_break_arg2⁰ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1⁰(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent³ = break_lh_₂(_lh_break_arg1⁰, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 786
//│ [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]: 895 --->
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹] | _  => error⁰}: 897
//│ 	case _lh_matchIdent⁸ of {LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}] | _  => error⁰}: 1567
//│ [LH_N]: 906 --->
//│ 	case xs¹ of {LH_C h³ t³ => [LH_C h³ mappend_lh_₂₄(t³, ys¹)] | LH_N  => ys¹}: 98
//│ 	case ls¹⁴ of {LH_C h²¹ t²¹ => [LH_C f⁴(h²¹) map_lh_₃(f⁴, t²¹)] | LH_N  => [LH_N]}: 1469
//│ [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]: 927 --->
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰]: 930 --->
//│ 	case _lh_tile_arg2⁰ of {LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰} | _  => error⁰}: 940
//│ [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 932 --->
//│ 	case xs¹ of {LH_C h³ t³ => [LH_C h³ mappend_lh_₂₄(t³, ys¹)] | LH_N  => ys¹}: 98
//│ 	case ls¹⁴ of {LH_C h²¹ t²¹ => [LH_C f⁴(h²¹) map_lh_₃(f⁴, t²¹)] | LH_N  => [LH_N]}: 1469
//│ [LH_C f²(h¹⁸) map_lh_₅(f², t¹⁸)]: 994 --->
//│ 	case _lh_fold1_LH_C_1² of {LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²) | _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))}: 244
//│ 	case _lh_fold1_arg3² of {LH_C _lh_fold1_LH_C_0² _lh_fold1_LH_C_1² => case _lh_fold1_LH_C_1² of {LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²) | _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))} | _  => error⁰}: 246
//│ [LH_N]: 995 --->
//│ 	case _lh_fold1_LH_C_1² of {LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²) | _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))}: 244
//│ 	case _lh_fold1_arg3² of {LH_C _lh_fold1_LH_C_0² _lh_fold1_LH_C_1² => case _lh_fold1_LH_C_1² of {LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²) | _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))} | _  => error⁰}: 246
//│ [LH_P3 0 0 0]: 1012 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 201
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 951
//│ [LH_P3 cons'_lh_₃([LH_P3 0 0 0], nil'_lh_₁) _lh_startr_arg1⁰ 1]: 1018 --->
//│ 	DeadCodeCons
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 951
//│ 	case _lh_thd3_arg1¹ of {LH_P3 _lh_thd3_LH_P3_0¹ _lh_thd3_LH_P3_1¹ _lh_thd3_LH_P3_2¹ => _lh_thd3_LH_P3_2¹ | _  => error⁰}: 972
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh_₂(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh_₁(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh_₃(p²) + let a³ = (optw_lh_₁ - width_hd⁰(p²))
//│ in (a³ * a³)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh_₂(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + let x¹ = (optw_lh_₂ - old_width_hd⁰(p⁴))
//│ in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh_₁(ps_pq⁰) then ps_pq⁰ else if single'_lh_₂(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh_₁(ps_pq⁰)
//│ in let q⁰ = last'_lh_₅(ps_pq⁰)
//│ in let p⁵ = last'_lh_₃(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh_₂(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh_₂(ps_p¹)) > maxw_lh_₂) then drop_nofit⁰(init'_lh_₂(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh_₁ - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh_₁(p⁶) == 0)) then min_lh_₂((optw_lh_₃ - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh_₁(ceildiv_lh_₁((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh_₁(qr_rs⁰) || null'_lh_₃(qr_rs⁰)) then cons'_lh_₂(p⁷, qr_rs⁰) else let q² = head'_lh_₂(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh_₁(qr_rs⁰)
//│ in let r⁰ = head'_lh_₁(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh_₁(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₄(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 1408
//│ [LH_C _lh_scan1_arg1⁰(a¹, head_lh_₂(s⁰)) s⁰]: 1069 --->
//│ 	DeadCodeCons
//│ 	case ls⁷ of {LH_C h⁹ t⁹ => h⁹ | LH_N  => error⁰}: 253
//│ 	case ls¹⁰ of {LH_C h¹⁶ t¹⁶ => h¹⁶ | LH_N  => error⁰}: 946
//│ 	case ls¹³ of {LH_C h¹⁹ t¹⁹ => [LH_C f³(h¹⁹) map_lh_₄(f³, t¹⁹)] | LH_N  => [LH_N]}: 1422
//│ [LH_N]: 1076 --->
//│ 	DeadCodeCons
//│ 	case ls¹³ of {LH_C h¹⁹ t¹⁹ => [LH_C f³(h¹⁹) map_lh_₄(f³, t¹⁹)] | LH_N  => [LH_N]}: 1422
//│ [LH_C _lh_scan1_arg2⁰(a²) [LH_N]]: 1077 --->
//│ 	DeadCodeCons
//│ 	case ls⁷ of {LH_C h⁹ t⁹ => h⁹ | LH_N  => error⁰}: 253
//│ 	case ls¹⁰ of {LH_C h¹⁶ t¹⁶ => h¹⁶ | LH_N  => error⁰}: 946
//│ 	case ls¹³ of {LH_C h¹⁹ t¹⁹ => [LH_C f³(h¹⁹) map_lh_₄(f³, t¹⁹)] | LH_N  => [LH_N]}: 1422
//│ [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 1170 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 201
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 951
//│ [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + let x¹ = (optw_lh_₂ - old_width_hd⁰(p⁴))
//│ in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰]: 1192 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39
//│ 	case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 201
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 951
//│ [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₄(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 1395 --->
//│ 	DeadCodeCons
//│ 	case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 951
//│ 	case _lh_thd3_arg1¹ of {LH_P3 _lh_thd3_LH_P3_0¹ _lh_thd3_LH_P3_1¹ _lh_thd3_LH_P3_2¹ => _lh_thd3_LH_P3_2¹ | _  => error⁰}: 972
//│ 	case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh_₂(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh_₁(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh_₃(p²) + let a³ = (optw_lh_₁ - width_hd⁰(p²))
//│ in (a³ * a³)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh_₂(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + let x¹ = (optw_lh_₂ - old_width_hd⁰(p⁴))
//│ in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh_₁(ps_pq⁰) then ps_pq⁰ else if single'_lh_₂(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh_₁(ps_pq⁰)
//│ in let q⁰ = last'_lh_₅(ps_pq⁰)
//│ in let p⁵ = last'_lh_₃(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh_₂(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh_₂(ps_p¹)) > maxw_lh_₂) then drop_nofit⁰(init'_lh_₂(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh_₁ - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh_₁(p⁶) == 0)) then min_lh_₂((optw_lh_₃ - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh_₁(ceildiv_lh_₁((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh_₁(qr_rs⁰) || null'_lh_₃(qr_rs⁰)) then cons'_lh_₂(p⁷, qr_rs⁰) else let q² = head'_lh_₂(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh_₁(qr_rs⁰)
//│ in let r⁰ = head'_lh_₁(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh_₁(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₄(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 1408
//│ [LH_C f³(h¹⁹) map_lh_₄(f³, t¹⁹)]: 1420 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰}: 938
//│ [LH_N]: 1421 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰}: 938
//│ [LH_C h²⁰ mappend_lh_₁₉(t²⁰, ys⁷)]: 1432 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls¹² of {LH_C h¹⁸ t¹⁸ => [LH_C f²(h¹⁸) map_lh_₅(f², t¹⁸)] | LH_N  => [LH_N]}: 996
//│ [LH_N]: 1438 --->
//│ 	case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₂₁(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh_₂₀(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 1497
//│ [LH_N]: 1449 --->
//│ 	case xs² of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₂₃(t⁴, ys²)] | LH_N  => ys²}: 110
//│ [LH_C '|' [LH_N]]: 1450 --->
//│ 	case xs² of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₂₃(t⁴, ys²)] | LH_N  => ys²}: 110
//│ [LH_C f⁴(h²¹) map_lh_₃(f⁴, t²¹)]: 1467 --->
//│ 	case ls⁸ of {LH_C h¹¹ t¹¹ => [LH_C f⁰(h¹¹) map_lh_₆(f⁰, t¹¹)] | LH_N  => [LH_N]}: 702
//│ [LH_N]: 1468 --->
//│ 	case ls⁸ of {LH_C h¹¹ t¹¹ => [LH_C f⁰(h¹¹) map_lh_₆(f⁰, t¹¹)] | LH_N  => [LH_N]}: 702
//│ [LH_N]: 1473 --->
//│ 	case xs⁴ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂₂(t¹⁰, ys⁴)] | LH_N  => ys⁴}: 688
//│ [LH_N]: 1475 --->
//│ 	case xs⁴ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂₂(t¹⁰, ys⁴)] | LH_N  => ys⁴}: 688
//│ [LH_C ' ' mappend_lh_₂₁(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 1484 --->
//│ 	case xs⁴ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂₂(t¹⁰, ys⁴)] | LH_N  => ys⁴}: 688
//│ [LH_N]: 1505 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case xs⁷ of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₁₉(t²⁰, ys⁷)] | LH_N  => ys⁷}: 1434
//│ [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰]: 1511 --->
//│ 	case _lh_break_arg2⁰ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1⁰(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent³ = break_lh_₂(_lh_break_arg1⁰, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 786
//│ [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)]: 1518 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case xs⁷ of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₁₉(t²⁰, ys⁷)] | LH_N  => ys⁷}: 1434
//│ [LH_N]: 1558 --->
//│ 	case ls¹⁵ of {LH_C h²² t²² => [LH_C f⁵(h²²) map_lh_₂(f⁵, t²²)] | LH_N  => [LH_N]}: 1581
//│ [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}]: 1565 --->
//│ 	case ls¹⁵ of {LH_C h²² t²² => [LH_C f⁵(h²²) map_lh_₂(f⁵, t²²)] | LH_N  => [LH_N]}: 1581
//│ [LH_C f⁵(h²²) map_lh_₂(f⁵, t²²)]: 1579 --->
//│ 	case _lh_fold1_LH_C_1¹ of {LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹) | _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))}: 139
//│ 	case _lh_fold1_arg3¹ of {LH_C _lh_fold1_LH_C_0¹ _lh_fold1_LH_C_1¹ => case _lh_fold1_LH_C_1¹ of {LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹) | _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))} | _  => error⁰}: 141
//│ 	case _lh_format_arg2⁰ of {LH_N  => [LH_C [LH_N] [LH_N]] | _  => SINGLE_LINE_LET_GROUP_STUB}: 849
//│ [LH_N]: 1580 --->
//│ 	case _lh_fold1_LH_C_1¹ of {LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹) | _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))}: 139
//│ 	case _lh_fold1_arg3¹ of {LH_C _lh_fold1_LH_C_0¹ _lh_fold1_LH_C_1¹ => case _lh_fold1_LH_C_1¹ of {LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹) | _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))} | _  => error⁰}: 141
//│ 	case _lh_format_arg2⁰ of {LH_N  => [LH_C [LH_N] [LH_N]] | _  => SINGLE_LINE_LET_GROUP_STUB}: 849
//│ [LH_P2 map_lh_₄((fun _lh_funcomp_x¹ -> (fun _lh_funcomp_x² -> len_tl_lh_₁(last'_lh_₁(_lh_funcomp_x²)))(fst3_lh_₁(_lh_funcomp_x¹))), zs⁰) thd3_lh_₁(head_lh_₁(zs⁰))]: 1618 --->
//│ 	case _lh_tile_arg2⁰ of {LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰} | _  => error⁰}: 940
//│ [LH_C f⁶(h²³) map_lh_₁(f⁶, t²³)]: 1631 --->
//│ 	case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}: 83
//│ 	case _lh_fold1_arg3⁰ of {LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))} | _  => error⁰}: 85
//│ [LH_N]: 1632 --->
//│ 	case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}: 83
//│ 	case _lh_fold1_arg3⁰ of {LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))} | _  => error⁰}: 85
//│ [LH_N]: 1644 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31
//│ 	case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179
//│ 	case ls¹² of {LH_C h¹⁸ t¹⁸ => [LH_C f²(h¹⁸) map_lh_₅(f², t¹⁸)] | LH_N  => [LH_N]}: 996
//│ [LH_C h²⁵ mappend_lh_₁₈(t²⁵, ys⁸)]: 1686 --->
//│ 	case xs¹⁵ of {LH_C h³² t³² => [LH_C h³² mappend_lh_₁₁(t³², ys¹⁵)] | LH_N  => ys¹⁵}: 1772
//│ [LH_C h²⁶ mappend_lh_₁₇(t²⁶, ys⁹)]: 1698 --->
//│ 	case xs¹⁰ of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁₆(t²⁷, ys¹⁰)] | LH_N  => ys¹⁰}: 1712
//│ [LH_C h²⁷ mappend_lh_₁₆(t²⁷, ys¹⁰)]: 1710 --->
//│ 	DeadCodeCons
//│ 	case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 1920
//│ [LH_C h²⁸ mappend_lh_₁₅(t²⁸, ys¹¹)]: 1722 --->
//│ 	case xs⁹ of {LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₁₇(t²⁶, ys⁹)] | LH_N  => ys⁹}: 1700
//│ [LH_C h²⁹ mappend_lh_₁₄(t²⁹, ys¹²)]: 1734 --->
//│ 	case xs¹⁴ of {LH_C h³¹ t³¹ => [LH_C h³¹ mappend_lh_₁₂(t³¹, ys¹⁴)] | LH_N  => ys¹⁴}: 1760
//│ [LH_C h³⁰ mappend_lh_₁₃(t³⁰, ys¹³)]: 1746 --->
//│ 	case xs¹¹ of {LH_C h²⁸ t²⁸ => [LH_C h²⁸ mappend_lh_₁₅(t²⁸, ys¹¹)] | LH_N  => ys¹¹}: 1724
//│ [LH_C h³¹ mappend_lh_₁₂(t³¹, ys¹⁴)]: 1758 --->
//│ 	case xs¹⁶ of {LH_C h³³ t³³ => [LH_C h³³ mappend_lh_₁₀(t³³, ys¹⁶)] | LH_N  => ys¹⁶}: 1784
//│ [LH_C h³² mappend_lh_₁₁(t³², ys¹⁵)]: 1770 --->
//│ 	case xs¹² of {LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₁₄(t²⁹, ys¹²)] | LH_N  => ys¹²}: 1736
//│ [LH_C h³³ mappend_lh_₁₀(t³³, ys¹⁶)]: 1782 --->
//│ 	case xs¹³ of {LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₁₃(t³⁰, ys¹³)] | LH_N  => ys¹³}: 1748
//│ [LH_C h³⁴ mappend_lh_₉(t³⁴, ys¹⁷)]: 1794 --->
//│ 	case xs²² of {LH_C h³⁹ t³⁹ => [LH_C h³⁹ mappend_lh_₄(t³⁹, ys²²)] | LH_N  => ys²²}: 1856
//│ [LH_C h³⁵ mappend_lh_₈(t³⁵, ys¹⁸)]: 1806 --->
//│ 	case xs²⁴ of {LH_C h⁴¹ t⁴¹ => [LH_C h⁴¹ mappend_lh_₂(t⁴¹, ys²⁴)] | LH_N  => ys²⁴}: 1880
//│ [LH_C h³⁶ mappend_lh_₇(t³⁶, ys¹⁹)]: 1818 --->
//│ 	case xs²⁵ of {LH_C h⁴² t⁴² => [LH_C h⁴² mappend_lh_₁(t⁴², ys²⁵)] | LH_N  => ys²⁵}: 1892
//│ [LH_C h³⁷ mappend_lh_₆(t³⁷, ys²⁰)]: 1830 --->
//│ 	case xs²³ of {LH_C h⁴⁰ t⁴⁰ => [LH_C h⁴⁰ mappend_lh_₃(t⁴⁰, ys²³)] | LH_N  => ys²³}: 1868
//│ [LH_C h³⁸ mappend_lh_₅(t³⁸, ys²¹)]: 1842 --->
//│ 	case xs¹⁷ of {LH_C h³⁴ t³⁴ => [LH_C h³⁴ mappend_lh_₉(t³⁴, ys¹⁷)] | LH_N  => ys¹⁷}: 1796
//│ [LH_C h³⁹ mappend_lh_₄(t³⁹, ys²²)]: 1854 --->
//│ 	case xs¹⁹ of {LH_C h³⁶ t³⁶ => [LH_C h³⁶ mappend_lh_₇(t³⁶, ys¹⁹)] | LH_N  => ys¹⁹}: 1820
//│ [LH_C h⁴⁰ mappend_lh_₃(t⁴⁰, ys²³)]: 1866 --->
//│ 	case xs²¹ of {LH_C h³⁸ t³⁸ => [LH_C h³⁸ mappend_lh_₅(t³⁸, ys²¹)] | LH_N  => ys²¹}: 1844
//│ [LH_C h⁴¹ mappend_lh_₂(t⁴¹, ys²⁴)]: 1878 --->
//│ 	case _lh_break_arg2² of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1²(_lh_break_LH_C_0¹) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]] else let _lh_matchIdent⁴ = break_lh_₁(_lh_break_arg1², _lh_break_LH_C_1¹)
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹] | _  => error⁰} | _  => error⁰}: 901
//│ [LH_C h⁴² mappend_lh_₁(t⁴², ys²⁵)]: 1890 --->
//│ 	case xs¹⁸ of {LH_C h³⁵ t³⁵ => [LH_C h³⁵ mappend_lh_₈(t³⁵, ys¹⁸)] | LH_N  => ys¹⁸}: 1808
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰]) | LH_N  => a⁰}: 10 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 44
//│ 	[LH_N]: 159
//│ 	[LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 167
//│ 	[LH_N]: 203
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215
//│ 	[LH_N]: 219
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 220
//│ 	[LH_N]: 291
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_N]: 602
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_N]: 651
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 812
//│ 	[LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 821
//│ 	[LH_N]: 832
//│ 	[LH_C [LH_N] [LH_N]]: 833
//│ 	[LH_C f³(h¹⁹) map_lh_₄(f³, t¹⁹)]: 1420
//│ 	[LH_N]: 1421
//│ 	[LH_C h²⁰ mappend_lh_₁₉(t²⁰, ys⁷)]: 1432
//│ 	[LH_N]: 1644
//│ case ls¹ of {LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n⁰ - 1), t¹)] | LH_N  => [LH_N]}: 31 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 44
//│ 	[LH_N]: 159
//│ 	[LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 167
//│ 	[LH_N]: 203
//│ 	[LH_N]: 204
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215
//│ 	[LH_N]: 219
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 220
//│ 	[LH_N]: 291
//│ 	[LH_N]: 292
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_N]: 535
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_N]: 651
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 812
//│ 	[LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 821
//│ 	[LH_N]: 832
//│ 	[LH_C [LH_N] [LH_N]]: 833
//│ 	[LH_C f³(h¹⁹) map_lh_₄(f³, t¹⁹)]: 1420
//│ 	[LH_N]: 1421
//│ 	[LH_C h²⁰ mappend_lh_₁₉(t²⁰, ys⁷)]: 1432
//│ 	[LH_N]: 1644
//│ case _lh_snd3_arg1⁰ of {LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰ | _  => error⁰}: 39 --->
//│ 	NoProd
//│ 	[LH_N]: 759
//│ 	[LH_N]: 765
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 778
//│ 	[LH_N]: 810
//│ 	[LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)]: 817
//│ 	[LH_N]: 831
//│ 	[LH_P3 0 0 0]: 1012
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 1170
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + let x¹ = (optw_lh_₂ - old_width_hd⁰(p⁴))
//│ in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰]: 1192
//│ case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]}: 51 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 44
//│ 	[LH_N]: 203
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215
//│ 	[LH_N]: 219
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 220
//│ 	[LH_N]: 291
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_N]: 602
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_N]: 651
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 812
//│ 	[LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 821
//│ 	[LH_N]: 832
//│ 	[LH_C [LH_N] [LH_N]]: 833
//│ case _lh_single_arg1⁰ of {LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 53 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 44
//│ 	[LH_N]: 203
//│ 	[LH_N]: 204
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215
//│ 	[LH_N]: 219
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 220
//│ 	[LH_N]: 291
//│ 	[LH_N]: 292
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_N]: 535
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_N]: 651
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 812
//│ 	[LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 821
//│ 	[LH_N]: 832
//│ 	[LH_C [LH_N] [LH_N]]: 833
//│ case xs⁰ of {LH_C h² t² => [LH_C h² mappend_lh_₂₅(t², ys⁰)] | LH_N  => ys⁰}: 64 --->
//│ 	[LH_C h³ mappend_lh_₂₄(t³, ys¹)]: 96
//│ 	[LH_N]: 666
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 667
//│ case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}: 83 --->
//│ 	[LH_C f⁶(h²³) map_lh_₁(f⁶, t²³)]: 1631
//│ 	[LH_N]: 1632
//│ case _lh_fold1_arg3⁰ of {LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰) | _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))} | _  => error⁰}: 85 --->
//│ 	[LH_C f⁶(h²³) map_lh_₁(f⁶, t²³)]: 1631
//│ 	[LH_N]: 1632
//│ case xs¹ of {LH_C h³ t³ => [LH_C h³ mappend_lh_₂₄(t³, ys¹)] | LH_N  => ys¹}: 98 --->
//│ 	[LH_N]: 906
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 932
//│ case xs² of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₂₃(t⁴, ys²)] | LH_N  => ys²}: 110 --->
//│ 	[LH_C h¹⁰ mappend_lh_₂₂(t¹⁰, ys⁴)]: 686
//│ 	[LH_N]: 1449
//│ 	[LH_C '|' [LH_N]]: 1450
//│ case ls³ of {LH_C h⁵ t⁵ => t⁵ | LH_N  => error⁰}: 116 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 44
//│ 	[LH_N]: 203
//│ 	[LH_N]: 204
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215
//│ 	[LH_N]: 219
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 220
//│ 	[LH_N]: 291
//│ 	[LH_N]: 292
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_N]: 535
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_N]: 651
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 812
//│ 	[LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 821
//│ 	[LH_N]: 832
//│ 	[LH_C [LH_N] [LH_N]]: 833
//│ case ls⁴ of {LH_C h⁶ t⁶ => h⁶ | LH_N  => error⁰}: 121 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 44
//│ 	[LH_N]: 203
//│ 	[LH_N]: 204
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215
//│ 	[LH_N]: 219
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 220
//│ 	[LH_N]: 291
//│ 	[LH_N]: 292
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_N]: 535
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_N]: 651
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 812
//│ 	[LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 821
//│ 	[LH_N]: 832
//│ 	[LH_C [LH_N] [LH_N]]: 833
//│ case _lh_fold1_LH_C_1¹ of {LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹) | _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))}: 139 --->
//│ 	[LH_C f⁵(h²²) map_lh_₂(f⁵, t²²)]: 1579
//│ 	[LH_N]: 1580
//│ case _lh_fold1_arg3¹ of {LH_C _lh_fold1_LH_C_0¹ _lh_fold1_LH_C_1¹ => case _lh_fold1_LH_C_1¹ of {LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹) | _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))} | _  => error⁰}: 141 --->
//│ 	[LH_C f⁵(h²²) map_lh_₂(f⁵, t²²)]: 1579
//│ 	[LH_N]: 1580
//│ case _lh_drop_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) | _  => error⁰}: 179 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 44
//│ 	[LH_N]: 159
//│ 	[LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 167
//│ 	[LH_N]: 203
//│ 	[LH_N]: 204
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215
//│ 	[LH_N]: 219
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 220
//│ 	[LH_N]: 291
//│ 	[LH_N]: 292
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_N]: 535
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_N]: 651
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 812
//│ 	[LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 821
//│ 	[LH_N]: 832
//│ 	[LH_C [LH_N] [LH_N]]: 833
//│ 	[LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]: 927
//│ 	[LH_C f³(h¹⁹) map_lh_₄(f³, t¹⁹)]: 1420
//│ 	[LH_N]: 1421
//│ 	[LH_C h²⁰ mappend_lh_₁₉(t²⁰, ys⁷)]: 1432
//│ 	[LH_N]: 1644
//│ case ls⁵ of {LH_C h⁷ t⁷ => h⁷ | LH_N  => error⁰}: 185 --->
//│ 	NoProd
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 220
//│ 	[LH_N]: 291
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ case ls⁶ of {LH_C h⁸ t⁸ => h⁸ | LH_N  => error⁰}: 190 --->
//│ 	NoProd
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 44
//│ 	[LH_N]: 203
//│ 	[LH_N]: 204
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215
//│ 	[LH_N]: 219
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 220
//│ 	[LH_N]: 291
//│ 	[LH_N]: 292
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_N]: 535
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_N]: 651
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 812
//│ 	[LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 821
//│ 	[LH_N]: 832
//│ 	[LH_C [LH_N] [LH_N]]: 833
//│ case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 196 --->
//│ 	NoProd
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 44
//│ 	[LH_N]: 203
//│ 	[LH_N]: 204
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215
//│ 	[LH_N]: 219
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 220
//│ 	[LH_N]: 291
//│ 	[LH_N]: 292
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_N]: 535
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_N]: 651
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 812
//│ 	[LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 821
//│ 	[LH_N]: 832
//│ 	[LH_C [LH_N] [LH_N]]: 833
//│ case _lh_thd3_arg1⁰ of {LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰ | _  => error⁰}: 201 --->
//│ 	NoProd
//│ 	[LH_N]: 759
//│ 	[LH_N]: 765
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 778
//│ 	[LH_N]: 810
//│ 	[LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)]: 817
//│ 	[LH_N]: 831
//│ 	[LH_P3 0 0 0]: 1012
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 1170
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + let x¹ = (optw_lh_₂ - old_width_hd⁰(p⁴))
//│ in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰]: 1192
//│ case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 225 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 205
//│ case _lh_fold1_LH_C_1² of {LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²) | _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))}: 244 --->
//│ 	[LH_C f²(h¹⁸) map_lh_₅(f², t¹⁸)]: 994
//│ 	[LH_N]: 995
//│ case _lh_fold1_arg3² of {LH_C _lh_fold1_LH_C_0² _lh_fold1_LH_C_1² => case _lh_fold1_LH_C_1² of {LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²) | _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))} | _  => error⁰}: 246 --->
//│ 	[LH_C f²(h¹⁸) map_lh_₅(f², t¹⁸)]: 994
//│ 	[LH_N]: 995
//│ case ls⁷ of {LH_C h⁹ t⁹ => h⁹ | LH_N  => error⁰}: 253 --->
//│ 	[LH_C _lh_scan1_arg1⁰(a¹, head_lh_₂(s⁰)) s⁰]: 1069
//│ 	[LH_C _lh_scan1_arg2⁰(a²) [LH_N]]: 1077
//│ case _lh_head'_arg1⁰ of {LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰) | _  => error⁰}: 269 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 217
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 222
//│ 	[LH_P2 [LH_N] [LH_N]]: 293
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 313
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 505
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 510
//│ 	[LH_P2 [LH_N] [LH_N]]: 536
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 556
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]: 564
//│ 	[LH_P2 [LH_N] [LH_N]]: 604
//│ 	[LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 624
//│ 	[LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 632
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 649
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 654
//│ case _lh_head'_arg1¹ of {LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0¹)) then head_lh_₅(_lh_head'_LH_P2_0¹) else head_lh_₅(_lh_head'_LH_P2_1¹) | _  => error⁰}: 285 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 604
//│ 	[LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 624
//│ 	[LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 632
//│ case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰}: 315 --->
//│ 	[LH_P2 take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]: 155
//│ case _lh_init'_arg1⁰ of {LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₂(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then let _lh_matchIdent⁰ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)] | _  => error⁰}: 325 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 293
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 313
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 505
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 510
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 649
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 654
//│ case _lh_last'_arg1⁰ of {LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁰)) then head_lh_₅(_lh_last'_LH_P2_1⁰) else head_lh_₅(_lh_last'_LH_P2_0⁰) | _  => error⁰}: 356 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 293
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 313
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 505
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 510
//│ 	[LH_P2 [LH_N] [LH_N]]: 536
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 556
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]: 564
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 649
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 654
//│ case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]}: 364 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 44
//│ 	[LH_N]: 203
//│ 	[LH_N]: 204
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215
//│ 	[LH_N]: 219
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 220
//│ 	[LH_N]: 291
//│ 	[LH_N]: 292
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_N]: 535
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_N]: 651
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 812
//│ 	[LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 821
//│ 	[LH_N]: 832
//│ 	[LH_C [LH_N] [LH_N]]: 833
//│ case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 366 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 44
//│ 	[LH_N]: 203
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215
//│ 	[LH_N]: 219
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 220
//│ 	[LH_N]: 291
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_N]: 602
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_N]: 651
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 812
//│ 	[LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 821
//│ 	[LH_N]: 832
//│ 	[LH_C [LH_N] [LH_N]]: 833
//│ case _lh_null'_arg1⁰ of {LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {LH_N  => case _lh_null'_LH_P2_1⁰ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 368 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 217
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 222
//│ 	[LH_P2 [LH_N] [LH_N]]: 293
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 313
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 505
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 510
//│ 	[LH_P2 [LH_N] [LH_N]]: 536
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 556
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]: 564
//│ 	[LH_P2 [LH_N] [LH_N]]: 604
//│ 	[LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 624
//│ 	[LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 632
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 649
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 654
//│ case _lh_single'_arg1⁰ of {LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₂(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₂(_lh_single'_LH_P2_1⁰))) | _  => error⁰}: 393 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 293
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 313
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 505
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 510
//│ 	[LH_P2 [LH_N] [LH_N]]: 536
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 556
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]: 564
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 649
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 654
//│ case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]}: 416 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 44
//│ 	[LH_N]: 203
//│ 	[LH_N]: 204
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215
//│ 	[LH_N]: 219
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 220
//│ 	[LH_N]: 291
//│ 	[LH_N]: 292
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_N]: 535
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_N]: 651
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 812
//│ 	[LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 821
//│ 	[LH_N]: 832
//│ 	[LH_C [LH_N] [LH_N]]: 833
//│ case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]}: 418 --->
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 291
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ case _lh_null'_arg1¹ of {LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {LH_N  => case _lh_null'_LH_P2_1¹ of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 420 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 293
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 313
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 505
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 510
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 649
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 654
//│ case _lh_last'_arg1¹ of {LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1¹)) then head_lh_₅(_lh_last'_LH_P2_1¹) else head_lh_₅(_lh_last'_LH_P2_0¹) | _  => error⁰}: 440 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 217
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 222
//│ 	[LH_P2 [LH_N] [LH_N]]: 293
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 313
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 505
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 510
//│ 	[LH_P2 [LH_N] [LH_N]]: 536
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 556
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]: 564
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 649
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 654
//│ case _lh_last'_arg1² of {LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₂(_lh_last'_LH_P2_1²)) then head_lh_₅(_lh_last'_LH_P2_1²) else head_lh_₅(_lh_last'_LH_P2_0²) | _  => error⁰}: 456 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 536
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 556
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]: 564
//│ case _lh_single'_arg1¹ of {LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹))) | _  => error⁰}: 492 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 217
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 222
//│ 	[LH_P2 [LH_N] [LH_N]]: 293
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 313
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 505
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 510
//│ 	[LH_P2 [LH_N] [LH_N]]: 536
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 556
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]: 564
//│ 	[LH_P2 [LH_N] [LH_N]]: 604
//│ 	[LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 624
//│ 	[LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 632
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 649
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 654
//│ case _lh_cons'_arg2¹ of {LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹] | _  => error⁰}: 513 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 217
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 222
//│ 	[LH_P2 [LH_N] [LH_N]]: 293
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 313
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 505
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 510
//│ 	[LH_P2 [LH_N] [LH_N]]: 536
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 556
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]: 564
//│ 	[LH_P2 [LH_N] [LH_N]]: 604
//│ 	[LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 624
//│ 	[LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 632
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 649
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 654
//│ case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰}: 558 --->
//│ 	[LH_P2 take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]: 155
//│ case _lh_init'_arg1¹ of {LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₂(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then let _lh_matchIdent¹ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)] | _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)] | _  => error⁰}: 568 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 293
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 313
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 505
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 510
//│ 	[LH_P2 [LH_N] [LH_N]]: 536
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 556
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]: 564
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 649
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 654
//│ case _lh_last'_arg1³ of {LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1³)) then head_lh_₅(_lh_last'_LH_P2_1³) else head_lh_₅(_lh_last'_LH_P2_0³) | _  => error⁰}: 584 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 293
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 313
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 505
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 510
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 649
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 654
//│ case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]}: 591 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 44
//│ 	[LH_N]: 203
//│ 	[LH_N]: 204
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215
//│ 	[LH_N]: 219
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 220
//│ 	[LH_N]: 291
//│ 	[LH_N]: 292
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_N]: 535
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_N]: 651
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 812
//│ 	[LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 821
//│ 	[LH_N]: 832
//│ 	[LH_C [LH_N] [LH_N]]: 833
//│ case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]}: 593 --->
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 291
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ case _lh_null'_arg1² of {LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {LH_N  => case _lh_null'_LH_P2_1² of {LH_N  => [True] | _  => [False]} | _  => [False]} | _  => [False]}: 595 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 293
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 313
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 505
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 510
//│ 	[LH_P2 [LH_N] [LH_N]]: 536
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 556
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]: 564
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 649
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 654
//│ case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰}: 626 --->
//│ 	[LH_P2 take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]: 155
//│ case _lh_tail'_arg1⁰ of {LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹] | _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰] | _  => error⁰}: 636 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 217
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 222
//│ 	[LH_P2 [LH_N] [LH_N]]: 293
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 313
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 505
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 510
//│ 	[LH_P2 [LH_N] [LH_N]]: 536
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 556
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]: 564
//│ 	[LH_P2 [LH_N] [LH_N]]: 604
//│ 	[LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 624
//│ 	[LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 632
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 649
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 654
//│ case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 657 --->
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 217
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 222
//│ 	[LH_P2 [LH_N] [LH_N]]: 293
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 313
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 505
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 510
//│ 	[LH_P2 [LH_N] [LH_N]]: 536
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 556
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]: 564
//│ 	[LH_P2 [LH_N] [LH_N]]: 604
//│ 	[LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]: 624
//│ 	[LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]: 632
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 649
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 654
//│ case xs⁴ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂₂(t¹⁰, ys⁴)] | LH_N  => ys⁴}: 688 --->
//│ 	[LH_C h¹³ mappend_lh_₂₁(t¹³, ys⁵)]: 723
//│ 	[LH_C h¹⁴ mappend_lh_₂₀(t¹⁴, ys⁶)]: 735
//│ 	[LH_N]: 1473
//│ 	[LH_N]: 1475
//│ 	[LH_C ' ' mappend_lh_₂₁(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 1484
//│ case ls⁸ of {LH_C h¹¹ t¹¹ => [LH_C f⁰(h¹¹) map_lh_₆(f⁰, t¹¹)] | LH_N  => [LH_N]}: 702 --->
//│ 	[LH_C f⁴(h²¹) map_lh_₃(f⁴, t²¹)]: 1467
//│ 	[LH_N]: 1468
//│ case lss⁰ of {LH_C h¹² t¹² => mappend_lh_₂₃(h¹², concat_lh_₂(t¹²)) | LH_N  => [LH_N]}: 714 --->
//│ 	[LH_C f⁰(h¹¹) map_lh_₆(f⁰, t¹¹)]: 700
//│ 	[LH_N]: 701
//│ case xs⁵ of {LH_C h¹³ t¹³ => [LH_C h¹³ mappend_lh_₂₁(t¹³, ys⁵)] | LH_N  => ys⁵}: 725 --->
//│ 	NoProd
//│ 	[LH_N]: 759
//│ 	[LH_N]: 765
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 778
//│ 	[LH_N]: 810
//│ 	[LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)]: 817
//│ 	[LH_N]: 831
//│ case xs⁶ of {LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₂₀(t¹⁴, ys⁶)] | LH_N  => ys⁶}: 737 --->
//│ 	NoProd
//│ 	[LH_N]: 759
//│ 	[LH_N]: 765
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 778
//│ 	[LH_N]: 810
//│ 	[LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)]: 817
//│ 	[LH_N]: 831
//│ case _lh_dropWhile_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰] | _  => error⁰}: 755 --->
//│ 	[LH_N]: 760
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]: 768
//│ 	[LH_N]: 874
//│ 	[LH_N]: 880
//│ 	[LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹]: 893
//│ case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰}: 782 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 761
//│ 	[LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]]: 769
//│ 	[LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]: 780
//│ case _lh_break_arg2⁰ of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1⁰(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else let _lh_matchIdent³ = break_lh_₂(_lh_break_arg1⁰, _lh_break_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 786 --->
//│ 	[LH_N]: 874
//│ 	[LH_N]: 880
//│ 	[LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹]: 893
//│ 	[LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰]: 1511
//│ case _lh_format_arg2⁰ of {LH_N  => [LH_C [LH_N] [LH_N]] | _  => SINGLE_LINE_LET_GROUP_STUB}: 849 --->
//│ 	[LH_C f⁵(h²²) map_lh_₂(f⁵, t²²)]: 1579
//│ 	[LH_N]: 1580
//│ case ls⁹ of {LH_C h¹⁵ t¹⁵ => if f¹(h¹⁵) then [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)] else filter_lh_₁(f¹, t¹⁵) | LH_N  => [LH_N]}: 870 --->
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 44
//│ 	[LH_N]: 203
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215
//│ 	[LH_N]: 219
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 220
//│ 	[LH_N]: 291
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_N]: 602
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_N]: 651
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ 	[LH_N]: 803
//│ 	[LH_C [LH_N] [LH_N]]: 804
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 812
//│ 	[LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 821
//│ 	[LH_N]: 832
//│ 	[LH_C [LH_N] [LH_N]]: 833
//│ case _lh_matchIdent⁴ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹] | _  => error⁰}: 897 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 876
//│ 	[LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]]: 884
//│ 	[LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]: 895
//│ case _lh_break_arg2² of {LH_N  => [LH_P2 [LH_N] [LH_N]] | LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1²(_lh_break_LH_C_0¹) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]] else let _lh_matchIdent⁴ = break_lh_₁(_lh_break_arg1², _lh_break_LH_C_1¹)
//│ in case _lh_matchIdent⁴ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹] | _  => error⁰} | _  => error⁰}: 901 --->
//│ 	NoProd
//│ 	[LH_C h⁴¹ mappend_lh_₂(t⁴¹, ys²⁴)]: 1878
//│ case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰}: 934 --->
//│ 	[LH_P2 take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]: 155
//│ case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰}: 938 --->
//│ 	[LH_N]: 159
//│ 	[LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰]: 167
//│ 	[LH_C f³(h¹⁹) map_lh_₄(f³, t¹⁹)]: 1420
//│ 	[LH_N]: 1421
//│ case _lh_tile_arg2⁰ of {LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {LH_N  => [LH_N] | LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])] | _  => error⁰} | _  => error⁰} | _  => error⁰}: 940 --->
//│ 	[LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰]: 930
//│ 	[LH_P2 map_lh_₄((fun _lh_funcomp_x¹ -> (fun _lh_funcomp_x² -> len_tl_lh_₁(last'_lh_₁(_lh_funcomp_x²)))(fst3_lh_₁(_lh_funcomp_x¹))), zs⁰) thd3_lh_₁(head_lh_₁(zs⁰))]: 1618
//│ case ls¹⁰ of {LH_C h¹⁶ t¹⁶ => h¹⁶ | LH_N  => error⁰}: 946 --->
//│ 	[LH_C _lh_scan1_arg1⁰(a¹, head_lh_₂(s⁰)) s⁰]: 1069
//│ 	[LH_C _lh_scan1_arg2⁰(a²) [LH_N]]: 1077
//│ case _lh_fst3_arg1⁰ of {LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰ | _  => error⁰}: 951 --->
//│ 	NoProd
//│ 	[LH_N]: 759
//│ 	[LH_N]: 765
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 778
//│ 	[LH_N]: 810
//│ 	[LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)]: 817
//│ 	[LH_N]: 831
//│ 	[LH_P3 0 0 0]: 1012
//│ 	[LH_P3 cons'_lh_₃([LH_P3 0 0 0], nil'_lh_₁) _lh_startr_arg1⁰ 1]: 1018
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰]: 1170
//│ 	[LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + let x¹ = (optw_lh_₂ - old_width_hd⁰(p⁴))
//│ in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰]: 1192
//│ 	[LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₄(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 1395
//│ case _lh_last'_arg1⁴ of {LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴) | _  => error⁰}: 967 --->
//│ 	NoProd
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰]: 217
//│ 	[LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]: 222
//│ 	[LH_P2 [LH_N] [LH_N]]: 293
//│ 	[LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]: 313
//│ 	[LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]: 321
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹]: 505
//│ 	[LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]: 510
//│ 	[LH_P2 [LH_N] [LH_N]]: 536
//│ 	[LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]: 556
//│ 	[LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]: 564
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²]: 649
//│ 	[LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]: 654
//│ case _lh_thd3_arg1¹ of {LH_P3 _lh_thd3_LH_P3_0¹ _lh_thd3_LH_P3_1¹ _lh_thd3_LH_P3_2¹ => _lh_thd3_LH_P3_2¹ | _  => error⁰}: 972 --->
//│ 	[LH_P3 cons'_lh_₃([LH_P3 0 0 0], nil'_lh_₁) _lh_startr_arg1⁰ 1]: 1018
//│ 	[LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₄(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 1395
//│ case ls¹¹ of {LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷)) | LH_N  => 0}: 983 --->
//│ 	NoProd
//│ 	[LH_C h⁰ a⁰]: 7
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 44
//│ 	[LH_N]: 203
//│ 	[LH_N]: 204
//│ 	[LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰]: 215
//│ 	[LH_N]: 219
//│ 	[LH_C _lh_cons'_arg1⁰ [LH_N]]: 220
//│ 	[LH_N]: 291
//│ 	[LH_N]: 292
//│ 	[LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹]: 503
//│ 	[LH_N]: 507
//│ 	[LH_C _lh_cons'_arg1¹ [LH_N]]: 508
//│ 	[LH_N]: 534
//│ 	[LH_N]: 535
//│ 	[LH_N]: 602
//│ 	[LH_N]: 603
//│ 	[LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²]: 647
//│ 	[LH_N]: 651
//│ 	[LH_C _lh_cons'_arg1² [LH_N]]: 652
//│ 	[LH_N]: 759
//│ 	[LH_N]: 765
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 778
//│ 	[LH_C [LH_N] _lh_break_arg3⁰]: 812
//│ 	[LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)]: 821
//│ 	[LH_N]: 832
//│ 	[LH_C [LH_N] [LH_N]]: 833
//│ case ls¹² of {LH_C h¹⁸ t¹⁸ => [LH_C f²(h¹⁸) map_lh_₅(f², t¹⁸)] | LH_N  => [LH_N]}: 996 --->
//│ 	[LH_C h²⁰ mappend_lh_₁₉(t²⁰, ys⁷)]: 1432
//│ 	[LH_N]: 1644
//│ case _lh_stepr_arg2⁰ of {LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ in let single⁰ = (fun p⁰ -> (len_tl_lh_₂(p⁰) == 0))
//│ in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh_₁(p¹)) - 1))
//│ in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh_₃(p²) + let a³ = (optw_lh_₁ - width_hd⁰(p²))
//│ in (a³ * a³)))
//│ in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh_₂(p³)) - 1))
//│ in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + let x¹ = (optw_lh_₂ - old_width_hd⁰(p⁴))
//│ in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰])
//│ in let trim⁰ = (fun ps_pq⁰ -> if null'_lh_₁(ps_pq⁰) then ps_pq⁰ else if single'_lh_₂(ps_pq⁰) then ps_pq⁰ else let ps_p⁰ = init'_lh_₁(ps_pq⁰)
//│ in let q⁰ = last'_lh_₅(ps_pq⁰)
//│ in let p⁵ = last'_lh_₃(ps_p⁰)
//│ in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh_₂(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh_₂(ps_p¹)) > maxw_lh_₂) then drop_nofit⁰(init'_lh_₂(ps_p¹)) else ps_p¹)
//│ in let bf⁰ = (fun p⁶ -> (fun q¹ -> let wqh⁰ = width_hd⁰(q¹)
//│ in let rqh⁰ = ((maxw_lh_₁ - wqh⁰) + 1)
//│ in if (single⁰(q¹) && (cost_tl_lh_₁(p⁶) == 0)) then min_lh_₂((optw_lh_₃ - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh_₁(ceildiv_lh_₁((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh_₁(qr_rs⁰) || null'_lh_₃(qr_rs⁰)) then cons'_lh_₂(p⁷, qr_rs⁰) else let q² = head'_lh_₂(qr_rs⁰)
//│ in let r_rs⁰ = tail'_lh_₁(qr_rs⁰)
//│ in let r⁰ = head'_lh_₁(r_rs⁰)
//│ in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh_₁(p⁷, qr_rs⁰)))
//│ in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₄(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰] | _  => error⁰}: 1408 --->
//│ 	[LH_P3 cons'_lh_₃([LH_P3 0 0 0], nil'_lh_₁) _lh_startr_arg1⁰ 1]: 1018
//│ 	[LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₄(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]: 1395
//│ case ls¹³ of {LH_C h¹⁹ t¹⁹ => [LH_C f³(h¹⁹) map_lh_₄(f³, t¹⁹)] | LH_N  => [LH_N]}: 1422 --->
//│ 	[LH_C _lh_scan1_arg1⁰(a¹, head_lh_₂(s⁰)) s⁰]: 1069
//│ 	[LH_N]: 1076
//│ 	[LH_C _lh_scan1_arg2⁰(a²) [LH_N]]: 1077
//│ case xs⁷ of {LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₁₉(t²⁰, ys⁷)] | LH_N  => ys⁷}: 1434 --->
//│ 	NoProd
//│ 	[LH_N]: 1505
//│ 	[LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)]: 1518
//│ case ls¹⁴ of {LH_C h²¹ t²¹ => [LH_C f⁴(h²¹) map_lh_₃(f⁴, t²¹)] | LH_N  => [LH_N]}: 1469 --->
//│ 	[LH_C h² mappend_lh_₂₅(t², ys⁰)]: 62
//│ 	[LH_N]: 906
//│ 	[LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]: 932
//│ case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₂₁(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰}: 1486 --->
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ case _lh_unwords_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {LH_N  => [LH_N] | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₂₁(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))] | _  => error⁰})
//│ in mappend_lh_₂₀(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰)) | _  => error⁰}: 1497 --->
//│ 	[LH_C h¹ take_lh_₁((n⁰ - 1), t¹)]: 29
//│ 	[LH_N]: 30
//│ 	[LH_N]: 32
//│ 	[LH_N]: 1438
//│ case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰}: 1520 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 761
//│ 	[LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]]: 769
//│ 	[LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]: 780
//│ case _lh_matchIdent⁶ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁷ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 1523 --->
//│ 	[LH_N]: 741
//│ 	[LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]: 752
//│ case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1563 --->
//│ 	[LH_N]: 875
//│ 	[LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]: 883
//│ case _lh_matchIdent⁸ of {LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}] | _  => error⁰}: 1567 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 876
//│ 	[LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]]: 884
//│ 	[LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]: 895
//│ case ls¹⁵ of {LH_C h²² t²² => [LH_C f⁵(h²²) map_lh_₂(f⁵, t²²)] | LH_N  => [LH_N]}: 1581 --->
//│ 	[LH_N]: 1558
//│ 	[LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}]: 1565
//│ case ls¹⁶ of {LH_C h²³ t²³ => [LH_C f⁶(h²³) map_lh_₁(f⁶, t²³)] | LH_N  => [LH_N]}: 1633 --->
//│ 	[LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)]: 862
//│ 	[LH_N]: 869
//│ case lss¹ of {LH_C h²⁴ t²⁴ => mappend_lh_₁₉(h²⁴, concat_lh_₁(t²⁴)) | LH_N  => [LH_N]}: 1645 --->
//│ 	NoProd
//│ 	[LH_N]: 759
//│ 	[LH_N]: 765
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 778
//│ 	[LH_N]: 802
//│ 	[LH_N]: 810
//│ 	[LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)]: 817
//│ 	[LH_N]: 831
//│ case xs⁹ of {LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₁₇(t²⁶, ys⁹)] | LH_N  => ys⁹}: 1700 --->
//│ 	NoProd
//│ 	[LH_C h²⁸ mappend_lh_₁₅(t²⁸, ys¹¹)]: 1722
//│ case xs¹⁰ of {LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁₆(t²⁷, ys¹⁰)] | LH_N  => ys¹⁰}: 1712 --->
//│ 	NoProd
//│ 	[LH_C h²⁶ mappend_lh_₁₇(t²⁶, ys⁹)]: 1698
//│ case xs¹¹ of {LH_C h²⁸ t²⁸ => [LH_C h²⁸ mappend_lh_₁₅(t²⁸, ys¹¹)] | LH_N  => ys¹¹}: 1724 --->
//│ 	NoProd
//│ 	[LH_C h³⁰ mappend_lh_₁₃(t³⁰, ys¹³)]: 1746
//│ case xs¹² of {LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₁₄(t²⁹, ys¹²)] | LH_N  => ys¹²}: 1736 --->
//│ 	NoProd
//│ 	[LH_C h³² mappend_lh_₁₁(t³², ys¹⁵)]: 1770
//│ case xs¹³ of {LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₁₃(t³⁰, ys¹³)] | LH_N  => ys¹³}: 1748 --->
//│ 	NoProd
//│ 	[LH_C h³³ mappend_lh_₁₀(t³³, ys¹⁶)]: 1782
//│ case xs¹⁴ of {LH_C h³¹ t³¹ => [LH_C h³¹ mappend_lh_₁₂(t³¹, ys¹⁴)] | LH_N  => ys¹⁴}: 1760 --->
//│ 	NoProd
//│ 	[LH_C h²⁹ mappend_lh_₁₄(t²⁹, ys¹²)]: 1734
//│ case xs¹⁵ of {LH_C h³² t³² => [LH_C h³² mappend_lh_₁₁(t³², ys¹⁵)] | LH_N  => ys¹⁵}: 1772 --->
//│ 	NoProd
//│ 	[LH_C h²⁵ mappend_lh_₁₈(t²⁵, ys⁸)]: 1686
//│ case xs¹⁶ of {LH_C h³³ t³³ => [LH_C h³³ mappend_lh_₁₀(t³³, ys¹⁶)] | LH_N  => ys¹⁶}: 1784 --->
//│ 	NoProd
//│ 	[LH_C h³¹ mappend_lh_₁₂(t³¹, ys¹⁴)]: 1758
//│ case xs¹⁷ of {LH_C h³⁴ t³⁴ => [LH_C h³⁴ mappend_lh_₉(t³⁴, ys¹⁷)] | LH_N  => ys¹⁷}: 1796 --->
//│ 	NoProd
//│ 	[LH_C h³⁸ mappend_lh_₅(t³⁸, ys²¹)]: 1842
//│ case xs¹⁸ of {LH_C h³⁵ t³⁵ => [LH_C h³⁵ mappend_lh_₈(t³⁵, ys¹⁸)] | LH_N  => ys¹⁸}: 1808 --->
//│ 	NoProd
//│ 	[LH_C h⁴² mappend_lh_₁(t⁴², ys²⁵)]: 1890
//│ case xs¹⁹ of {LH_C h³⁶ t³⁶ => [LH_C h³⁶ mappend_lh_₇(t³⁶, ys¹⁹)] | LH_N  => ys¹⁹}: 1820 --->
//│ 	NoProd
//│ 	[LH_C h³⁹ mappend_lh_₄(t³⁹, ys²²)]: 1854
//│ case xs²¹ of {LH_C h³⁸ t³⁸ => [LH_C h³⁸ mappend_lh_₅(t³⁸, ys²¹)] | LH_N  => ys²¹}: 1844 --->
//│ 	NoProd
//│ 	[LH_C h⁴⁰ mappend_lh_₃(t⁴⁰, ys²³)]: 1866
//│ case xs²² of {LH_C h³⁹ t³⁹ => [LH_C h³⁹ mappend_lh_₄(t³⁹, ys²²)] | LH_N  => ys²²}: 1856 --->
//│ 	NoProd
//│ 	[LH_C h³⁴ mappend_lh_₉(t³⁴, ys¹⁷)]: 1794
//│ case xs²³ of {LH_C h⁴⁰ t⁴⁰ => [LH_C h⁴⁰ mappend_lh_₃(t⁴⁰, ys²³)] | LH_N  => ys²³}: 1868 --->
//│ 	NoProd
//│ 	[LH_C h³⁷ mappend_lh_₆(t³⁷, ys²⁰)]: 1830
//│ case xs²⁴ of {LH_C h⁴¹ t⁴¹ => [LH_C h⁴¹ mappend_lh_₂(t⁴¹, ys²⁴)] | LH_N  => ys²⁴}: 1880 --->
//│ 	NoProd
//│ 	[LH_C h³⁵ mappend_lh_₈(t³⁵, ys¹⁸)]: 1806
//│ case xs²⁵ of {LH_C h⁴² t⁴² => [LH_C h⁴² mappend_lh_₁(t⁴², ys²⁵)] | LH_N  => ys²⁵}: 1892 --->
//│ 	NoProd
//│ 	[LH_C h³⁶ mappend_lh_₇(t³⁶, ys¹⁹)]: 1818
//│ case _lh_null_arg1¹ of {LH_N  => [True] | LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False] | _  => error⁰}: 1920 --->
//│ 	NoProd
//│ 	[LH_C h²⁷ mappend_lh_₁₆(t²⁷, ys¹⁰)]: 1710
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C h³ mappend_lh_₂₄(t³, ys¹)]: 96 --->
//│ 	case xs⁰ of {LH_C h² t² => [LH_C h² mappend_lh_₂₅(t², ys⁰)] | LH_N  => ys⁰}: 64
//│ [LH_P2 [LH_N] [LH_N]]: 205 --->
//│ 	case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 225
//│ [LH_N]: 666 --->
//│ 	case xs⁰ of {LH_C h² t² => [LH_C h² mappend_lh_₂₅(t², ys⁰)] | LH_N  => ys⁰}: 64
//│ [LH_C _lh_unformat_arg1⁰ [LH_N]]: 667 --->
//│ 	case xs⁰ of {LH_C h² t² => [LH_C h² mappend_lh_₂₅(t², ys⁰)] | LH_N  => ys⁰}: 64
//│ [LH_C h¹⁰ mappend_lh_₂₂(t¹⁰, ys⁴)]: 686 --->
//│ 	case xs² of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₂₃(t⁴, ys²)] | LH_N  => ys²}: 110
//│ [LH_C f⁰(h¹¹) map_lh_₆(f⁰, t¹¹)]: 700 --->
//│ 	case lss⁰ of {LH_C h¹² t¹² => mappend_lh_₂₃(h¹², concat_lh_₂(t¹²)) | LH_N  => [LH_N]}: 714
//│ [LH_N]: 701 --->
//│ 	case lss⁰ of {LH_C h¹² t¹² => mappend_lh_₂₃(h¹², concat_lh_₂(t¹²)) | LH_N  => [LH_N]}: 714
//│ [LH_C h¹³ mappend_lh_₂₁(t¹³, ys⁵)]: 723 --->
//│ 	case xs⁴ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂₂(t¹⁰, ys⁴)] | LH_N  => ys⁴}: 688
//│ [LH_C h¹⁴ mappend_lh_₂₀(t¹⁴, ys⁶)]: 735 --->
//│ 	case xs⁴ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂₂(t¹⁰, ys⁴)] | LH_N  => ys⁴}: 688
//│ [LH_N]: 741 --->
//│ 	case _lh_matchIdent⁶ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁷ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 1523
//│ [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]: 752 --->
//│ 	case _lh_matchIdent⁶ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁷ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 1523
//│ [LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)]: 862 --->
//│ 	case ls¹⁶ of {LH_C h²³ t²³ => [LH_C f⁶(h²³) map_lh_₁(f⁶, t²³)] | LH_N  => [LH_N]}: 1633
//│ [LH_N]: 869 --->
//│ 	case ls¹⁶ of {LH_C h²³ t²³ => [LH_C f⁶(h²³) map_lh_₁(f⁶, t²³)] | LH_N  => [LH_N]}: 1633
//│ [LH_N]: 875 --->
//│ 	case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1563
//│ [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]: 883 --->
//│ 	case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1563
//│ [LH_N]: 1449 --->
//│ 	case xs² of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₂₃(t⁴, ys²)] | LH_N  => ys²}: 110
//│ [LH_C '|' [LH_N]]: 1450 --->
//│ 	case xs² of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₂₃(t⁴, ys²)] | LH_N  => ys²}: 110
//│ [LH_C f⁴(h²¹) map_lh_₃(f⁴, t²¹)]: 1467 --->
//│ 	case ls⁸ of {LH_C h¹¹ t¹¹ => [LH_C f⁰(h¹¹) map_lh_₆(f⁰, t¹¹)] | LH_N  => [LH_N]}: 702
//│ [LH_N]: 1468 --->
//│ 	case ls⁸ of {LH_C h¹¹ t¹¹ => [LH_C f⁰(h¹¹) map_lh_₆(f⁰, t¹¹)] | LH_N  => [LH_N]}: 702
//│ [LH_N]: 1473 --->
//│ 	case xs⁴ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂₂(t¹⁰, ys⁴)] | LH_N  => ys⁴}: 688
//│ [LH_N]: 1475 --->
//│ 	case xs⁴ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂₂(t¹⁰, ys⁴)] | LH_N  => ys⁴}: 688
//│ [LH_C ' ' mappend_lh_₂₁(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 1484 --->
//│ 	case xs⁴ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂₂(t¹⁰, ys⁴)] | LH_N  => ys⁴}: 688
//│ [LH_N]: 1558 --->
//│ 	case ls¹⁵ of {LH_C h²² t²² => [LH_C f⁵(h²²) map_lh_₂(f⁵, t²²)] | LH_N  => [LH_N]}: 1581
//│ [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}]: 1565 --->
//│ 	case ls¹⁵ of {LH_C h²² t²² => [LH_C f⁵(h²²) map_lh_₂(f⁵, t²²)] | LH_N  => [LH_N]}: 1581
//│ ------------------
//│ case xs⁰ of {LH_C h² t² => [LH_C h² mappend_lh_₂₅(t², ys⁰)] | LH_N  => ys⁰}: 64 --->
//│ 	[LH_C h³ mappend_lh_₂₄(t³, ys¹)]: 96
//│ 	[LH_N]: 666
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 667
//│ case xs² of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₂₃(t⁴, ys²)] | LH_N  => ys²}: 110 --->
//│ 	[LH_C h¹⁰ mappend_lh_₂₂(t¹⁰, ys⁴)]: 686
//│ 	[LH_N]: 1449
//│ 	[LH_C '|' [LH_N]]: 1450
//│ case _lh_cons'_arg2⁰ of {LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰] | _  => error⁰}: 225 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 205
//│ case xs⁴ of {LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂₂(t¹⁰, ys⁴)] | LH_N  => ys⁴}: 688 --->
//│ 	[LH_C h¹³ mappend_lh_₂₁(t¹³, ys⁵)]: 723
//│ 	[LH_C h¹⁴ mappend_lh_₂₀(t¹⁴, ys⁶)]: 735
//│ 	[LH_N]: 1473
//│ 	[LH_N]: 1475
//│ 	[LH_C ' ' mappend_lh_₂₁(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 1484
//│ case ls⁸ of {LH_C h¹¹ t¹¹ => [LH_C f⁰(h¹¹) map_lh_₆(f⁰, t¹¹)] | LH_N  => [LH_N]}: 702 --->
//│ 	[LH_C f⁴(h²¹) map_lh_₃(f⁴, t²¹)]: 1467
//│ 	[LH_N]: 1468
//│ case lss⁰ of {LH_C h¹² t¹² => mappend_lh_₂₃(h¹², concat_lh_₂(t¹²)) | LH_N  => [LH_N]}: 714 --->
//│ 	[LH_C f⁰(h¹¹) map_lh_₆(f⁰, t¹¹)]: 700
//│ 	[LH_N]: 701
//│ case _lh_matchIdent⁶ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁷ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁷ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 1523 --->
//│ 	[LH_N]: 741
//│ 	[LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]: 752
//│ case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1563 --->
//│ 	[LH_N]: 875
//│ 	[LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]: 883
//│ case ls¹⁵ of {LH_C h²² t²² => [LH_C f⁵(h²²) map_lh_₂(f⁵, t²²)] | LH_N  => [LH_N]}: 1581 --->
//│ 	[LH_N]: 1558
//│ 	[LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}]: 1565
//│ case ls¹⁶ of {LH_C h²³ t²³ => [LH_C f⁶(h²³) map_lh_₁(f⁶, t²³)] | LH_N  => [LH_N]}: 1633 --->
//│ 	[LH_C h¹⁵ filter_lh_₁(f¹, t¹⁵)]: 862
//│ 	[LH_N]: 869
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testPara_nofib_lh_₁(primId⁰(0))
//│ def break_lh_₁(_lh_break_arg1⁵, _lh_break_arg2⁵) = case _lh_break_arg2⁵ of {
//│ 	LH_N  => [LH_P2 [LH_N] (fun _lh_dummy² -> (fun f¹² -> [LH_N]))]
//│ 	| LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1⁵(_lh_break_LH_C_0¹) then [LH_P2 [LH_N] 
//│ 		let _lh_lines_LH_C_1¹ = _lh_break_LH_C_1¹
//│ 		in (fun _lh_dummy³ -> lines_lh_₁(_lh_lines_LH_C_1¹))] else 
//│ 		let _lh_matchIdent¹⁸ = break_lh_₁(_lh_break_arg1⁵, _lh_break_LH_C_1¹)
//│ 		in case _lh_matchIdent¹⁸ of {
//│ 			LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def break_lh_₂(_lh_break_arg1³, _lh_break_arg2³) = case _lh_break_arg2³ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1³(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else 
//│ 		let _lh_matchIdent¹² = break_lh_₂(_lh_break_arg1³, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent¹² of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def ceildiv_lh_₁(_lh_ceildiv_arg1¹, _lh_ceildiv_arg2¹) = div⁰(((_lh_ceildiv_arg1¹ + _lh_ceildiv_arg2¹) - 1), _lh_ceildiv_arg2¹)
//│ def concat_lh_₁(lss³) = case lss³ of {
//│ 	LH_C h²⁴ t²⁴ => mappend_lh_₁₉(h²⁴, concat_lh_₁(t²⁴))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₂(lss²) = lss²(99)
//│ def cons'_lh_₁(_lh_cons'_arg1⁵, _lh_cons'_arg2⁵) = case _lh_cons'_arg2⁵ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1⁵ _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1⁵ [LH_N]] _lh_cons'_LH_P2_0²]
//│ 	| _  => error⁰}
//│ def cons'_lh_₂(_lh_cons'_arg1³, _lh_cons'_arg2³) = case _lh_cons'_arg2³ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1³ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1³ [LH_N]] _lh_cons'_LH_P2_0¹]
//│ 	| _  => error⁰}
//│ def cons'_lh_₃(_lh_cons'_arg1⁴, _lh_cons'_arg2⁴) = _lh_cons'_arg2⁴(_lh_cons'_arg1⁴)
//│ def cost_tl_lh_₁(_lh_cost_tl_arg1⁵) = snd3_lh_₁(_lh_cost_tl_arg1⁵)
//│ def cost_tl_lh_₂(_lh_cost_tl_arg1⁴) = snd3_lh_₁(_lh_cost_tl_arg1⁴)
//│ def cost_tl_lh_₃(_lh_cost_tl_arg1³) = snd3_lh_₁(_lh_cost_tl_arg1³)
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1¹, _lh_dropWhile_arg2¹) = case _lh_dropWhile_arg2¹ of {
//│ 	LH_N  => (fun _lh_dummy⁰ -> [LH_N])
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1¹(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1¹, _lh_dropWhile_LH_C_1⁰) else 
//│ 		let _lh_words_LH_C_1¹ = _lh_dropWhile_LH_C_1⁰
//│ 		in let _lh_words_LH_C_0¹ = _lh_dropWhile_LH_C_0⁰
//│ 		in (fun _lh_dummy¹ -> 
//│ 			let _lh_matchIdent¹⁶ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0¹ _lh_words_LH_C_1¹])
//│ 			in case _lh_matchIdent¹⁶ of {
//│ 				LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)]
//│ 				| _  => error⁰})
//│ 	| _  => error⁰}
//│ def drop_lh_₁(_lh_drop_arg1¹, _lh_drop_arg2¹) = case _lh_drop_arg2¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1¹ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1¹ - 1), _lh_drop_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def filter_lh_₁(f¹⁶, ls²⁹) = case ls²⁹ of {
//│ 	LH_C h¹⁵ t¹⁵ => if f¹⁶(h¹⁵) then 
//│ 		let t⁵³ = filter_lh_₁(f¹⁶, t¹⁵)
//│ 		in let h⁵³ = h¹⁵
//│ 		in (fun f¹⁷ -> [LH_C f¹⁷(h⁵³) map_lh_₁(f¹⁷, t⁵³)]) else filter_lh_₁(f¹⁶, t¹⁵)
//│ 	| LH_N  => (fun f¹⁸ -> [LH_N])}
//│ def fmt_lh_₁(_lh_fmt_arg1¹) = (fun _lh_funcomp_x¹³ -> (fun _lh_funcomp_x¹⁴ -> unparse_lh_₁(map_lh_₁((fun _lh_funcomp_x¹⁵ -> par3_lh_₁(concat_lh_₁(_lh_funcomp_x¹⁵))), _lh_funcomp_x¹⁴)))(parse_lh_₁(_lh_funcomp_x¹³)))(_lh_fmt_arg1¹)
//│ def fold1_lh_₁(_lh_fold1_arg1⁵, _lh_fold1_arg2⁵, _lh_fold1_arg3⁵) = case _lh_fold1_arg3⁵ of {
//│ 	LH_C _lh_fold1_LH_C_0² _lh_fold1_LH_C_1² => case _lh_fold1_LH_C_1² of {
//│ 		LH_N  => _lh_fold1_arg2⁵(_lh_fold1_LH_C_0²)
//│ 		| _  => _lh_fold1_arg1⁵(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1⁵, _lh_fold1_arg2⁵, _lh_fold1_LH_C_1²))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₂(_lh_fold1_arg1⁴, _lh_fold1_arg2⁴, _lh_fold1_arg3⁴) = case _lh_fold1_arg3⁴ of {
//│ 	LH_C _lh_fold1_LH_C_0¹ _lh_fold1_LH_C_1¹ => case _lh_fold1_LH_C_1¹ of {
//│ 		LH_N  => _lh_fold1_arg2⁴(_lh_fold1_LH_C_0¹)
//│ 		| _  => _lh_fold1_arg1⁴(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1⁴, _lh_fold1_arg2⁴, _lh_fold1_LH_C_1¹))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₃(_lh_fold1_arg1³, _lh_fold1_arg2³, _lh_fold1_arg3³) = case _lh_fold1_arg3³ of {
//│ 	LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {
//│ 		LH_N  => _lh_fold1_arg2³(_lh_fold1_LH_C_0⁰)
//│ 		| _  => _lh_fold1_arg1³(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1³, _lh_fold1_arg2³, _lh_fold1_LH_C_1⁰))}
//│ 	| _  => error⁰}
//│ def format_lh_₁(_lh_format_arg1¹, _lh_format_arg2¹) = case _lh_format_arg2¹ of {
//│ 	LH_N  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let break¹ = (fun _lh_break_arg1⁴ -> (fun _lh_break_arg2⁴ -> (fun _lh_break_arg3¹ -> if polyEq⁰(_lh_break_arg1⁴, _lh_break_arg2⁴) then [LH_C [LH_N] _lh_break_arg3¹] else [LH_C [LH_C _lh_break_arg2⁴ head_lh_₅(_lh_break_arg3¹)] tail_lh_₁(_lh_break_arg3¹)])))
//│ 		and start¹ = (fun _lh_start_arg1¹ -> (fun _lh_start_arg2¹ -> break¹(_lh_start_arg1¹, _lh_start_arg2¹, [LH_C [LH_N] [LH_N]]))) 
//│ 		in fold1_lh_₂(break¹(_lh_format_arg1¹), start¹(_lh_format_arg1¹), _lh_format_arg2¹)}
//│ def fst3_lh_₁(_lh_fst3_arg1¹) = case _lh_fst3_arg1¹ of {
//│ 	LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰
//│ 	| _  => error⁰}
//│ def head'_lh_₁(_lh_head'_arg1²) = case _lh_head'_arg1² of {
//│ 	LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0¹)) then head_lh_₅(_lh_head'_LH_P2_0¹) else head_lh_₅(_lh_head'_LH_P2_1¹)
//│ 	| _  => error⁰}
//│ def head'_lh_₂(_lh_head'_arg1³) = case _lh_head'_arg1³ of {
//│ 	LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰)
//│ 	| _  => error⁰}
//│ def head_lh_₁(ls³²) = case ls³² of {
//│ 	LH_C h¹⁶ t¹⁶ => h¹⁶
//│ 	| LH_N  => error⁰}
//│ def head_lh_₂(ls¹⁷) = case ls¹⁷ of {
//│ 	LH_C h⁹ t⁹ => h⁹
//│ 	| LH_N  => error⁰}
//│ def head_lh_₃(ls³⁰) = case ls³⁰ of {
//│ 	LH_C h⁸ t⁸ => h⁸
//│ 	| LH_N  => error⁰}
//│ def head_lh_₄(ls²⁰) = case ls²⁰ of {
//│ 	LH_C h⁷ t⁷ => h⁷
//│ 	| LH_N  => error⁰}
//│ def head_lh_₅(ls¹⁹) = case ls¹⁹ of {
//│ 	LH_C h⁶ t⁶ => h⁶
//│ 	| LH_N  => error⁰}
//│ def init'_lh_₁(_lh_init'_arg1³) = case _lh_init'_arg1³ of {
//│ 	LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₂(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then 
//│ 		let _lh_matchIdent¹⁷ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ 		in case _lh_matchIdent¹⁷ of {
//│ 			LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]
//│ 	| _  => error⁰}
//│ def init'_lh_₂(_lh_init'_arg1²) = case _lh_init'_arg1² of {
//│ 	LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₂(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then 
//│ 		let _lh_matchIdent¹⁰ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ 		in case _lh_matchIdent¹⁰ of {
//│ 			LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]
//│ 	| _  => error⁰}
//│ def isSpace_lh_₁(_lh_isSpace_arg1³) = polyEq⁰(_lh_isSpace_arg1³, ' ')
//│ def isSpace_lh_₂(_lh_isSpace_arg1²) = polyEq⁰(_lh_isSpace_arg1², ' ')
//│ def last'_lh_₁(_lh_last'_arg1⁷) = case _lh_last'_arg1⁷ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₃(_lh_last'_LH_P2_1⁴) else head_lh_₄(_lh_last'_LH_P2_0⁴)
//│ 	| _  => error⁰}
//│ def last'_lh_₂(_lh_last'_arg1⁸) = case _lh_last'_arg1⁸ of {
//│ 	LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1³)) then head_lh_₅(_lh_last'_LH_P2_1³) else head_lh_₅(_lh_last'_LH_P2_0³)
//│ 	| _  => error⁰}
//│ def last'_lh_₃(_lh_last'_arg1⁶) = case _lh_last'_arg1⁶ of {
//│ 	LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₂(_lh_last'_LH_P2_1²)) then head_lh_₅(_lh_last'_LH_P2_1²) else head_lh_₅(_lh_last'_LH_P2_0²)
//│ 	| _  => error⁰}
//│ def last'_lh_₄(_lh_last'_arg1⁵) = case _lh_last'_arg1⁵ of {
//│ 	LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1¹)) then head_lh_₅(_lh_last'_LH_P2_1¹) else head_lh_₅(_lh_last'_LH_P2_0¹)
//│ 	| _  => error⁰}
//│ def last'_lh_₅(_lh_last'_arg1⁹) = case _lh_last'_arg1⁹ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁰)) then head_lh_₅(_lh_last'_LH_P2_1⁰) else head_lh_₅(_lh_last'_LH_P2_0⁰)
//│ 	| _  => error⁰}
//│ def len_tl_lh_₁(_lh_len_tl_arg1³) = thd3_lh_₂(_lh_len_tl_arg1³)
//│ def len_tl_lh_₂(_lh_len_tl_arg1²) = thd3_lh_₂(_lh_len_tl_arg1²)
//│ def length_lh_₁(ls²⁷) = case ls²⁷ of {
//│ 	LH_C h¹⁷ t¹⁷ => (1 + length_lh_₁(t¹⁷))
//│ 	| LH_N  => 0}
//│ def lines_lh_₁(_lh_lines_arg1¹) = 
//│ 	let _lh_matchIdent¹⁴ = break_lh_₁((fun x⁵ -> polyEq⁰(x⁵, '|')), _lh_lines_arg1¹)
//│ 	in case _lh_matchIdent¹⁴ of {
//│ 		LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => 
//│ 			let t⁴⁷ = 	
//│ 				let _lh_matchIdent¹⁵ = _lh_lines_LH_P2_1⁰
//│ 				in _lh_matchIdent¹⁵(99)
//│ 			in let h⁴⁷ = _lh_lines_LH_P2_0⁰
//│ 			in (fun f⁷ -> [LH_C f⁷(h⁴⁷) map_lh_₂(f⁷, t⁴⁷)])
//│ 		| _  => error⁰}
//│ def map_lh_₁(f¹⁰, ls²⁵) = ls²⁵(f¹⁰)
//│ def map_lh_₂(f⁹, ls²²) = ls²²(f⁹)
//│ def map_lh_₃(f¹³, ls²⁸) = case ls²⁸ of {
//│ 	LH_C h²¹ t²¹ => 
//│ 		let t⁵¹ = map_lh_₃(f¹³, t²¹)
//│ 		in let h⁵¹ = f¹³(h²¹)
//│ 		in (fun f¹⁴ -> 
//│ 			let t⁵² = map_lh_₆(f¹⁴, t⁵¹)
//│ 			in let h⁵² = f¹⁴(h⁵¹)
//│ 			in (fun _lh_dummy⁴ -> mappend_lh_₂₃(h⁵², concat_lh_₂(t⁵²))))
//│ 	| LH_N  => (fun f¹⁵ -> (fun _lh_dummy⁵ -> [LH_N]))}
//│ def map_lh_₄(f¹⁹, ls³¹) = case ls³¹ of {
//│ 	LH_C h¹⁹ t¹⁹ => [LH_C f¹⁹(h¹⁹) map_lh_₄(f¹⁹, t¹⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f¹¹, ls²⁶) = case ls²⁶ of {
//│ 	LH_C h¹⁸ t¹⁸ => [LH_C f¹¹(h¹⁸) map_lh_₅(f¹¹, t¹⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f⁸, ls²¹) = ls²¹(f⁸)
//│ def mappend_lh_₁(xs³⁰, ys³⁶) = case xs³⁰ of {
//│ 	LH_C h⁴² t⁴² => [LH_C h⁴² mappend_lh_₁(t⁴², ys³⁶)]
//│ 	| LH_N  => ys³⁶}
//│ def mappend_lh_₁₀(xs³³, ys³⁹) = case xs³³ of {
//│ 	LH_C h³³ t³³ => [LH_C h³³ mappend_lh_₁₀(t³³, ys³⁹)]
//│ 	| LH_N  => ys³⁹}
//│ def mappend_lh_₁₁(xs⁴⁰, ys⁴⁶) = case xs⁴⁰ of {
//│ 	LH_C h³² t³² => [LH_C h³² mappend_lh_₁₁(t³², ys⁴⁶)]
//│ 	| LH_N  => ys⁴⁶}
//│ def mappend_lh_₁₂(xs⁵⁰, ys⁶¹) = case xs⁵⁰ of {
//│ 	LH_C h³¹ t³¹ => [LH_C h³¹ mappend_lh_₁₂(t³¹, ys⁶¹)]
//│ 	| LH_N  => ys⁶¹}
//│ def mappend_lh_₁₃(xs⁴⁵, ys⁵⁵) = case xs⁴⁵ of {
//│ 	LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₁₃(t³⁰, ys⁵⁵)]
//│ 	| LH_N  => ys⁵⁵}
//│ def mappend_lh_₁₄(xs³⁸, ys⁴⁴) = case xs³⁸ of {
//│ 	LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₁₄(t²⁹, ys⁴⁴)]
//│ 	| LH_N  => ys⁴⁴}
//│ def mappend_lh_₁₅(xs⁴⁷, ys⁵⁷) = case xs⁴⁷ of {
//│ 	LH_C h²⁸ t²⁸ => [LH_C h²⁸ mappend_lh_₁₅(t²⁸, ys⁵⁷)]
//│ 	| LH_N  => ys⁵⁷}
//│ def mappend_lh_₁₆(xs²⁷, ys²⁷) = case xs²⁷ of {
//│ 	LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₁₆(t²⁷, ys²⁷)]
//│ 	| LH_N  => ys²⁷}
//│ def mappend_lh_₁₇(xs⁴⁹, ys⁶⁰) = case xs⁴⁹ of {
//│ 	LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₁₇(t²⁶, ys⁶⁰)]
//│ 	| LH_N  => ys⁶⁰}
//│ def mappend_lh_₁₈(xs³¹, ys³⁷) = case xs³¹ of {
//│ 	LH_C h²⁵ t²⁵ => [LH_C h²⁵ mappend_lh_₁₈(t²⁵, ys³⁷)]
//│ 	| LH_N  => ys³⁷}
//│ def mappend_lh_₁₉(xs³², ys³⁸) = case xs³² of {
//│ 	LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₁₉(t²⁰, ys³⁸)]
//│ 	| LH_N  => ys³⁸}
//│ def mappend_lh_₂(xs³⁵, ys⁴¹) = case xs³⁵ of {
//│ 	LH_C h⁴¹ t⁴¹ => [LH_C h⁴¹ mappend_lh_₂(t⁴¹, ys⁴¹)]
//│ 	| LH_N  => ys⁴¹}
//│ def mappend_lh_₂₀(xs⁴², ys⁴⁸) = case xs⁴² of {
//│ 	LH_C h¹⁴ t¹⁴ => 
//│ 		let t⁴⁸ = mappend_lh_₂₀(t¹⁴, ys⁴⁸)
//│ 		in let h⁴⁸ = h¹⁴
//│ 		in (fun ys⁴⁹ -> 
//│ 			let t⁴⁹ = mappend_lh_₂₂(t⁴⁸, ys⁴⁹)
//│ 			in let h⁴⁹ = h⁴⁸
//│ 			in (fun ys⁵⁰ -> [LH_C h⁴⁹ mappend_lh_₂₃(t⁴⁹, ys⁵⁰)]))
//│ 	| LH_N  => ys⁴⁸}
//│ def mappend_lh_₂₁(xs²⁸, ys²⁸) = case xs²⁸ of {
//│ 	LH_C h¹³ t¹³ => 
//│ 		let t⁴³ = mappend_lh_₂₁(t¹³, ys²⁸)
//│ 		in let h⁴³ = h¹³
//│ 		in (fun ys²⁹ -> 
//│ 			let t⁴⁴ = mappend_lh_₂₂(t⁴³, ys²⁹)
//│ 			in let h⁴⁴ = h⁴³
//│ 			in (fun ys³⁰ -> [LH_C h⁴⁴ mappend_lh_₂₃(t⁴⁴, ys³⁰)]))
//│ 	| LH_N  => ys²⁸}
//│ def mappend_lh_₂₂(xs⁵¹, ys⁶²) = xs⁵¹(ys⁶²)
//│ def mappend_lh_₂₃(xs³⁶, ys⁴²) = xs³⁶(ys⁴²)
//│ def mappend_lh_₂₄(xs⁴⁸, ys⁵⁸) = case xs⁴⁸ of {
//│ 	LH_C h³ t³ => 
//│ 		let t⁵⁴ = mappend_lh_₂₄(t³, ys⁵⁸)
//│ 		in let h⁵⁴ = h³
//│ 		in (fun ys⁵⁹ -> [LH_C h⁵⁴ mappend_lh_₂₅(t⁵⁴, ys⁵⁹)])
//│ 	| LH_N  => ys⁵⁸}
//│ def mappend_lh_₂₅(xs⁴⁴, ys⁵⁴) = xs⁴⁴(ys⁵⁴)
//│ def mappend_lh_₃(xs²⁹, ys³⁵) = case xs²⁹ of {
//│ 	LH_C h⁴⁰ t⁴⁰ => [LH_C h⁴⁰ mappend_lh_₃(t⁴⁰, ys³⁵)]
//│ 	| LH_N  => ys³⁵}
//│ def mappend_lh_₄(xs⁴¹, ys⁴⁷) = case xs⁴¹ of {
//│ 	LH_C h³⁹ t³⁹ => [LH_C h³⁹ mappend_lh_₄(t³⁹, ys⁴⁷)]
//│ 	| LH_N  => ys⁴⁷}
//│ def mappend_lh_₅(xs³⁷, ys⁴³) = case xs³⁷ of {
//│ 	LH_C h³⁸ t³⁸ => [LH_C h³⁸ mappend_lh_₅(t³⁸, ys⁴³)]
//│ 	| LH_N  => ys⁴³}
//│ def mappend_lh_₆(xs³⁹, ys⁴⁵) = case xs³⁹ of {
//│ 	LH_C h³⁷ t³⁷ => [LH_C h³⁷ mappend_lh_₆(t³⁷, ys⁴⁵)]
//│ 	| LH_N  => ys⁴⁵}
//│ def mappend_lh_₇(xs³⁴, ys⁴⁰) = case xs³⁴ of {
//│ 	LH_C h³⁶ t³⁶ => [LH_C h³⁶ mappend_lh_₇(t³⁶, ys⁴⁰)]
//│ 	| LH_N  => ys⁴⁰}
//│ def mappend_lh_₈(xs²⁶, ys²⁶) = case xs²⁶ of {
//│ 	LH_C h³⁵ t³⁵ => [LH_C h³⁵ mappend_lh_₈(t³⁵, ys²⁶)]
//│ 	| LH_N  => ys²⁶}
//│ def mappend_lh_₉(xs⁴⁶, ys⁵⁶) = case xs⁴⁶ of {
//│ 	LH_C h³⁴ t³⁴ => [LH_C h³⁴ mappend_lh_₉(t³⁴, ys⁵⁶)]
//│ 	| LH_N  => ys⁵⁶}
//│ def maxw_lh_₁ = 70
//│ def maxw_lh_₂ = 70
//│ def maxw_lh_₃ = 70
//│ def min_lh_₁(_lh_min_arg1², _lh_min_arg2²) = if (_lh_min_arg1² > _lh_min_arg2²) then _lh_min_arg2² else _lh_min_arg1²
//│ def min_lh_₂(_lh_min_arg1³, _lh_min_arg2³) = if (_lh_min_arg1³ > _lh_min_arg2³) then _lh_min_arg2³ else _lh_min_arg1³
//│ def nil'_lh_₁ = 
//│ 	let _lh_cons'_LH_P2_1³ = [LH_N]
//│ 	in let _lh_cons'_LH_P2_0³ = [LH_N]
//│ 	in (fun _lh_cons'_arg1⁶ -> if not⁰(null_lh_₂(_lh_cons'_LH_P2_1³)) then [LH_P2 [LH_C _lh_cons'_arg1⁶ _lh_cons'_LH_P2_0³] _lh_cons'_LH_P2_1³] else [LH_P2 [LH_C _lh_cons'_arg1⁶ [LH_N]] _lh_cons'_LH_P2_0³])
//│ def null'_lh_₁(_lh_null'_arg1⁴) = case _lh_null'_arg1⁴ of {
//│ 	LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {
//│ 		LH_N  => case _lh_null'_LH_P2_1² of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₂(_lh_null'_arg1³) = case _lh_null'_arg1³ of {
//│ 	LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1¹ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₃(_lh_null'_arg1⁵) = case _lh_null'_arg1⁵ of {
//│ 	LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1⁰ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null_lh_₁(_lh_null_arg1²) = case _lh_null_arg1² of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₂(_lh_null_arg1³) = case _lh_null_arg1³ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def optw_lh_₁ = 63
//│ def optw_lh_₂ = 63
//│ def optw_lh_₃ = 63
//│ def par3_lh_₁(_lh_par3_arg1¹) = 
//│ 	let zs¹ = scan1_lh_₁(stepr_lh_₁, startr_lh_₁, map_lh_₅(length_lh_₁, _lh_par3_arg1¹))
//│ 	in tile_lh_₁(_lh_par3_arg1¹, [LH_P2 map_lh_₄((fun _lh_funcomp_x¹¹ -> (fun _lh_funcomp_x¹² -> len_tl_lh_₁(last'_lh_₁(_lh_funcomp_x¹²)))(fst3_lh_₁(_lh_funcomp_x¹¹))), zs¹) thd3_lh_₁(head_lh_₁(zs¹))])
//│ def paras_lh_₁(_lh_paras_arg1¹) = (fun _lh_funcomp_x¹⁰ -> filter_lh_₁((fun x⁴ -> polyNeq⁰([LH_N], x⁴)), format_lh_₁([LH_N], _lh_funcomp_x¹⁰)))(_lh_paras_arg1¹)
//│ def parse_lh_₁(_lh_parse_arg1¹) = (fun _lh_funcomp_x¹⁶ -> (fun _lh_funcomp_x¹⁷ -> paras_lh_₁(map_lh_₂(words_lh_₁, _lh_funcomp_x¹⁷)))(lines_lh_₁(_lh_funcomp_x¹⁶)))(_lh_parse_arg1¹)
//│ def reverse_helper_lh_₁(ls¹⁸, a⁴) = case ls¹⁸ of {
//│ 	LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁴])
//│ 	| LH_N  => a⁴}
//│ def reverse_lh_₁(ls³³) = reverse_helper_lh_₁(ls³³, [LH_N])
//│ def scan1_lh_₁(_lh_scan1_arg1¹, _lh_scan1_arg2¹) = fold1_lh_₁((fun a⁶ -> (fun s¹ -> [LH_C _lh_scan1_arg1¹(a⁶, head_lh_₂(s¹)) s¹])), (fun a⁷ -> [LH_C _lh_scan1_arg2¹(a⁷) [LH_N]]))
//│ def single'_lh_₁(_lh_single'_arg1²) = case _lh_single'_arg1² of {
//│ 	LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹)))
//│ 	| _  => error⁰}
//│ def single'_lh_₂(_lh_single'_arg1³) = case _lh_single'_arg1³ of {
//│ 	LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₂(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₂(_lh_single'_LH_P2_1⁰)))
//│ 	| _  => error⁰}
//│ def single_lh_₁(_lh_single_arg1¹) = case _lh_single_arg1¹ of {
//│ 	LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def snd3_lh_₁(_lh_snd3_arg1¹) = case _lh_snd3_arg1¹ of {
//│ 	LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰
//│ 	| _  => error⁰}
//│ def splitAt_lh_₁(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹) = [LH_P2 take_lh_₁(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹) drop_lh_₁(_lh_splitAt_arg1¹, _lh_splitAt_arg2¹)]
//│ def startr_lh_₁(_lh_startr_arg1¹) = if (_lh_startr_arg1¹ <= maxw_lh_₃) then [LH_P3 cons'_lh_₃([LH_P3 0 0 0], nil'_lh_₁) _lh_startr_arg1¹ 1] else error⁰([LH_C 's' [LH_C 't' [LH_C 'a' [LH_C 'r' [LH_C 't' [LH_C 'r' [LH_C ' ' [LH_C 'p' [LH_C 'a' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]]]]]]])
//│ def stepr_lh_₁(_lh_stepr_arg1¹, _lh_stepr_arg2¹) = case _lh_stepr_arg2¹ of {
//│ 	LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => 
//│ 		let tot_width¹ = ((_lh_stepr_arg1¹ + 1) + _lh_stepr_LH_P3_1⁰)
//│ 		in let tot_len¹ = (1 + _lh_stepr_LH_P3_2⁰)
//│ 		in let single¹ = (fun p⁸ -> (len_tl_lh_₂(p⁸) == 0))
//│ 		in let width_hd¹ = (fun p⁹ -> if single¹(p⁹) then tot_width¹ else ((tot_width¹ - width_tl_lh_₁(p⁹)) - 1))
//│ 		in let cost¹ = (fun p¹⁰ -> if single¹(p¹⁰) then 0 else (cost_tl_lh_₃(p¹⁰) + 
//│ 			let a⁵ = (optw_lh_₁ - width_hd¹(p¹⁰))
//│ 			in (a⁵ * a⁵)))
//│ 		in let old_width_hd¹ = (fun p¹¹ -> if single¹(p¹¹) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh_₂(p¹¹)) - 1))
//│ 		in let new¹ = (fun p¹² -> if single¹(p¹²) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p¹²) + 
//│ 			let x⁷ = (optw_lh_₂ - old_width_hd¹(p¹²))
//│ 			in (x⁷ * x⁷)) _lh_stepr_LH_P3_2⁰])
//│ 		in let trim¹ = (fun ps_pq¹ -> if null'_lh_₁(ps_pq¹) then ps_pq¹ else if single'_lh_₂(ps_pq¹) then ps_pq¹ else 
//│ 			let ps_p² = init'_lh_₁(ps_pq¹)
//│ 			in let q³ = last'_lh_₅(ps_pq¹)
//│ 			in let p¹³ = last'_lh_₃(ps_p²)
//│ 			in if (cost¹(p¹³) <= cost¹(q³)) then trim¹(ps_p²) else ps_pq¹)
//│ 		in let drop_nofit¹ = (fun ps_p³ -> if null'_lh_₂(ps_p³) then ps_p³ else if (width_hd¹(last'_lh_₂(ps_p³)) > maxw_lh_₂) then drop_nofit¹(init'_lh_₂(ps_p³)) else ps_p³)
//│ 		in let bf¹ = (fun p¹⁴ -> (fun q⁴ -> 
//│ 			let wqh¹ = width_hd¹(q⁴)
//│ 			in let rqh¹ = ((maxw_lh_₁ - wqh¹) + 1)
//│ 			in if (single¹(q⁴) && (cost_tl_lh_₁(p¹⁴) == 0)) then min_lh_₂((optw_lh_₃ - width_hd¹(p¹⁴)), rqh¹) else if single¹(q⁴) then rqh¹ else min_lh_₁(ceildiv_lh_₁((cost¹(p¹⁴) - cost¹(q⁴)), (2 * (wqh¹ - width_hd¹(p¹⁴)))), rqh¹)))
//│ 		in let myAdd¹ = (fun p¹⁵ -> (fun qr_rs¹ -> if (single'_lh_₁(qr_rs¹) || null'_lh_₃(qr_rs¹)) then cons'_lh_₂(p¹⁵, qr_rs¹) else 
//│ 			let q⁵ = head'_lh_₂(qr_rs¹)
//│ 			in let r_rs¹ = tail'_lh_₁(qr_rs¹)
//│ 			in let r¹ = head'_lh_₁(r_rs¹)
//│ 			in if (bf¹(p¹⁵, q⁵) <= bf¹(q⁵, r¹)) then myAdd¹(p¹⁵, r_rs¹) else cons'_lh_₁(p¹⁵, qr_rs¹)))
//│ 		in [LH_P3 trim¹(drop_nofit¹(myAdd¹(new¹(last'_lh_₄(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width¹ tot_len¹]
//│ 	| _  => error⁰}
//│ def tail'_lh_₁(_lh_tail'_arg1¹) = case _lh_tail'_arg1¹ of {
//│ 	LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then 
//│ 		let _lh_matchIdent¹⁹ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ 		in case _lh_matchIdent¹⁹ of {
//│ 			LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]
//│ 			| _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]
//│ 	| _  => error⁰}
//│ def tail_lh_₁(ls²³) = case ls²³ of {
//│ 	LH_C h⁵ t⁵ => t⁵
//│ 	| LH_N  => error⁰}
//│ def take_lh_₁(n¹, ls²⁴) = if (n¹ > 0) then case ls²⁴ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ take_lh_₁((n¹ - 1), t¹)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPara_nofib_lh_₁(_lh_testPara_nofib_arg1¹) = if null_lh_₁(test_lh_₂(0)) then [LH_N] else fmt_lh_₁(test_lh_₁(0))
//│ def test_lh_₁(_lh_test_arg1²) = mappend_lh_₂(mappend_lh_₈(mappend_lh_₁(mappend_lh_₇(mappend_lh_₄(mappend_lh_₉(mappend_lh_₅(mappend_lh_₃(mappend_lh_₆(primId⁰([LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'u' [LH_C 'c' [LH_C 't' [LH_C 'i' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C 'm' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'o' [LH_C 'n' [LH_C 'p' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]), primId⁰([LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C 's' [LH_C '.' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ',' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'h' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'y' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C ' ' [LH_C 'w' [LH_C 'e' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_C 'k' [LH_C 'n' [LH_C 'o' [LH_C 'w' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 's' [LH_C 'i' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C '.' [LH_C ' ' [LH_C 'H' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'o' [LH_C 'm' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'm' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 't' [LH_C 'a' [LH_C 'i' [LH_C 'l' [LH_C 's' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'g' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'b' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C ' ' [LH_C 'T' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'i' [LH_C 'c' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'l' [LH_C 'e' [LH_C 's' [LH_C 's' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C '|' [LH_C ' ' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]))
//│ def test_lh_₂(_lh_test_arg1³) = mappend_lh_₁₆(mappend_lh_₁₇(mappend_lh_₁₅(mappend_lh_₁₃(mappend_lh_₁₀(mappend_lh_₁₂(mappend_lh_₁₄(mappend_lh_₁₁(mappend_lh_₁₈(primId⁰([LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'u' [LH_C 'c' [LH_C 't' [LH_C 'i' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C 'm' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'o' [LH_C 'n' [LH_C 'p' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]), primId⁰([LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C 's' [LH_C '.' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ',' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'h' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'y' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C ' ' [LH_C 'w' [LH_C 'e' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_C 'k' [LH_C 'n' [LH_C 'o' [LH_C 'w' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 's' [LH_C 'i' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C '.' [LH_C ' ' [LH_C 'H' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'o' [LH_C 'm' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'm' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 't' [LH_C 'a' [LH_C 'i' [LH_C 'l' [LH_C 's' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'g' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'b' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C ' ' [LH_C 'T' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'i' [LH_C 'c' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'l' [LH_C 'e' [LH_C 's' [LH_C 's' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C '|' [LH_C ' ' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]))
//│ def thd3_lh_₁(_lh_thd3_arg1³) = case _lh_thd3_arg1³ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0¹ _lh_thd3_LH_P3_1¹ _lh_thd3_LH_P3_2¹ => _lh_thd3_LH_P3_2¹
//│ 	| _  => error⁰}
//│ def thd3_lh_₂(_lh_thd3_arg1²) = case _lh_thd3_arg1² of {
//│ 	LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰
//│ 	| _  => error⁰}
//│ def tile_lh_₁(_lh_tile_arg1¹, _lh_tile_arg2¹) = case _lh_tile_arg2¹ of {
//│ 	LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => 
//│ 			let l² = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ 			in let _lh_matchIdent¹³ = splitAt_lh_₁(l², _lh_tile_arg1¹)
//│ 			in case _lh_matchIdent¹³ of {
//│ 				LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l², [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def unformat_lh_₁(_lh_unformat_arg1¹) = fold1_lh_₃((fun xs⁴³ -> (fun ys⁵¹ -> mappend_lh_₂₅(mappend_lh_₂₄(xs⁴³, 
//│ 	let t⁵⁰ = (fun ys⁵³ -> ys⁵³)
//│ 	in let h⁵⁰ = _lh_unformat_arg1¹
//│ 	in (fun ys⁵² -> [LH_C h⁵⁰ mappend_lh_₂₅(t⁵⁰, ys⁵²)])), ys⁵¹))), (fun x⁶ -> x⁶))
//│ def unlines_lh_₁(_lh_unlines_arg1¹) = concat_lh_₂(map_lh_₆((fun l³ -> mappend_lh_₂₂(l³, 
//│ 	let t⁵⁵ = (fun ys⁶⁴ -> ys⁶⁴)
//│ 	in let h⁵⁵ = '|'
//│ 	in (fun ys⁶³ -> [LH_C h⁵⁵ mappend_lh_₂₃(t⁵⁵, ys⁶³)]))), _lh_unlines_arg1¹))
//│ def unparas_lh_₁(_lh_unparas_arg1¹) = unformat_lh_₁([LH_N], _lh_unparas_arg1¹)
//│ def unparse_lh_₁(_lh_unparse_arg1¹) = (fun _lh_funcomp_x¹⁸ -> (fun _lh_funcomp_x¹⁹ -> unlines_lh_₁(map_lh_₃(unwords_lh_₁, _lh_funcomp_x¹⁹)))(unparas_lh_₁(_lh_funcomp_x¹⁸)))(_lh_unparse_arg1¹)
//│ def unwords_lh_₁(_lh_unwords_arg1¹) = case _lh_unwords_arg1¹ of {
//│ 	LH_N  => (fun ys³¹ -> ys³¹)
//│ 	| LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => 
//│ 		let go¹ = (fun _lh_go_arg1¹ -> case _lh_go_arg1¹ of {
//│ 			LH_N  => (fun ys³² -> ys³²)
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => 
//│ 				let t⁴⁵ = mappend_lh_₂₁(_lh_go_LH_C_0⁰, go¹(_lh_go_LH_C_1⁰))
//│ 				in let h⁴⁵ = ' '
//│ 				in (fun ys³³ -> 
//│ 					let t⁴⁶ = mappend_lh_₂₂(t⁴⁵, ys³³)
//│ 					in let h⁴⁶ = h⁴⁵
//│ 					in (fun ys³⁴ -> [LH_C h⁴⁶ mappend_lh_₂₃(t⁴⁶, ys³⁴)]))
//│ 			| _  => error⁰})
//│ 		in mappend_lh_₂₀(_lh_unwords_LH_C_0⁰, go¹(_lh_unwords_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def width_tl_lh_₁(_lh_width_tl_arg1²) = fst3_lh_₁(_lh_width_tl_arg1²)
//│ def width_tl_lh_₂(_lh_width_tl_arg1³) = fst3_lh_₁(_lh_width_tl_arg1³)
//│ def words_lh_₁(_lh_words_arg1¹) = 
//│ 	let _lh_matchIdent¹¹ = dropWhile_lh_₁(isSpace_lh_₁, _lh_words_arg1¹)
//│ 	in _lh_matchIdent¹¹(99)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ cons'_lh_₃, lines_lh_₁, map_lh_₆, map_lh_₂, map_lh_₁, words_lh_₁, concat_lh_₂, mappend_lh_₂₃, mappend_lh_₂₂, mappend_lh_₂₅
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ break_lh_₁ -> 2
//│ map_lh_₃ -> 2
//│ filter_lh_₁ -> 2
//│ mappend_lh_₂₄ -> 3
//│ unlines_lh_₁ -> 1
//│ mappend_lh_₂₁ -> 2
//│ unwords_lh_₁ -> 0
//│ nil'_lh_₁ -> 1
//│ dropWhile_lh_₁ -> 2
//│ mappend_lh_₂₀ -> 2
//│ unformat_lh_₁ -> 2
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ testPara_nofib_lh_₁(primId⁰(0))
//│ def break_lh_₁(_lh_break_arg1², _lh_break_arg2²) = case _lh_break_arg2² of {
//│ 	LH_N  => [LH_P2 [LH_N] (fun _lh_dummy² -> (fun f⁶ -> [LH_N]))]
//│ 	| LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1²(_lh_break_LH_C_0¹) then [LH_P2 [LH_N] 
//│ 		let _lh_lines_LH_C_1⁰ = _lh_break_LH_C_1¹
//│ 		in (fun _lh_dummy³ -> 
//│ 			let _lh_matchIdent¹¹ = break_lh_₁((fun x⁵ -> polyEq⁰(x⁵, '|')), _lh_lines_LH_C_1⁰)
//│ 			in case _lh_matchIdent¹¹ of {
//│ 				LH_P2 _lh_lines_LH_P2_0² _lh_lines_LH_P2_1² => 
//│ 					let t³⁵ = 	
//│ 						let _lh_matchIdent¹² = _lh_lines_LH_P2_1²
//│ 						in _lh_matchIdent¹²(99)
//│ 					in let h³⁵ = _lh_lines_LH_P2_0²
//│ 					in (fun f⁷ -> [LH_C f⁷(h³⁵) t³⁵(f⁷)])
//│ 				| _  => error⁰})] else 
//│ 		let _lh_matchIdent¹³ = break_lh_₁(_lh_break_arg1², _lh_break_LH_C_1¹)
//│ 		in case _lh_matchIdent¹³ of {
//│ 			LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def break_lh_₂(_lh_break_arg1⁰, _lh_break_arg2⁰) = case _lh_break_arg2⁰ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1⁰(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else 
//│ 		let _lh_matchIdent² = break_lh_₂(_lh_break_arg1⁰, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent² of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def ceildiv_lh_₁(_lh_ceildiv_arg1⁰, _lh_ceildiv_arg2⁰) = div⁰(((_lh_ceildiv_arg1⁰ + _lh_ceildiv_arg2⁰) - 1), _lh_ceildiv_arg2⁰)
//│ def concat_lh_₁(lss¹) = case lss¹ of {
//│ 	LH_C h⁴⁸ t⁴⁸ => mappend_lh_₁₉(h⁴⁸, concat_lh_₁(t⁴⁸))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₂(lss⁰) = lss⁰(99)
//│ def cons'_lh_₁(_lh_cons'_arg1², _lh_cons'_arg2²) = case _lh_cons'_arg2² of {
//│ 	LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0¹]
//│ 	| _  => error⁰}
//│ def cons'_lh_₂(_lh_cons'_arg1⁰, _lh_cons'_arg2⁰) = case _lh_cons'_arg2⁰ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]
//│ 	| _  => error⁰}
//│ def cons'_lh_₃(_lh_cons'_arg1¹, _lh_cons'_arg2¹) = _lh_cons'_arg2¹(_lh_cons'_arg1¹)
//│ def cost_tl_lh_₁(_lh_cost_tl_arg1²) = snd3_lh_₁(_lh_cost_tl_arg1²)
//│ def cost_tl_lh_₂(_lh_cost_tl_arg1¹) = snd3_lh_₁(_lh_cost_tl_arg1¹)
//│ def cost_tl_lh_₃(_lh_cost_tl_arg1⁰) = snd3_lh_₁(_lh_cost_tl_arg1⁰)
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => (fun _lh_dummy⁰ -> [LH_N])
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else 
//│ 		let _lh_words_LH_C_1⁰ = _lh_dropWhile_LH_C_1⁰
//│ 		in let _lh_words_LH_C_0⁰ = _lh_dropWhile_LH_C_0⁰
//│ 		in (fun _lh_dummy¹ -> 
//│ 			let _lh_matchIdent⁸ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ 			in case _lh_matchIdent⁸ of {
//│ 				LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ 
//│ 					let _lh_matchIdent⁹ = dropWhile_lh_₁(isSpace_lh_₁, _lh_words_LH_P2_1⁰)
//│ 					in _lh_matchIdent⁹(99)]
//│ 				| _  => error⁰})
//│ 	| _  => error⁰}
//│ def drop_lh_₁(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def filter_lh_₁(f¹¹, ls¹²) = case ls¹² of {
//│ 	LH_C h⁴⁰ t⁴⁰ => if f¹¹(h⁴⁰) then 
//│ 		let t⁴¹ = filter_lh_₁(f¹¹, t⁴⁰)
//│ 		in let h⁴¹ = h⁴⁰
//│ 		in (fun f¹² -> [LH_C f¹²(h⁴¹) t⁴¹(f¹²)]) else filter_lh_₁(f¹¹, t⁴⁰)
//│ 	| LH_N  => (fun f¹³ -> [LH_N])}
//│ def fmt_lh_₁(_lh_fmt_arg1⁰) = (fun _lh_funcomp_x³ -> (fun _lh_funcomp_x⁴ -> unparse_lh_₁(_lh_funcomp_x⁴((fun _lh_funcomp_x⁵ -> par3_lh_₁(concat_lh_₁(_lh_funcomp_x⁵))))))(parse_lh_₁(_lh_funcomp_x³)))(_lh_fmt_arg1⁰)
//│ def fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_arg3²) = case _lh_fold1_arg3² of {
//│ 	LH_C _lh_fold1_LH_C_0² _lh_fold1_LH_C_1² => case _lh_fold1_LH_C_1² of {
//│ 		LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²)
//│ 		| _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_arg3¹) = case _lh_fold1_arg3¹ of {
//│ 	LH_C _lh_fold1_LH_C_0¹ _lh_fold1_LH_C_1¹ => case _lh_fold1_LH_C_1¹ of {
//│ 		LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹)
//│ 		| _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_arg3⁰) = case _lh_fold1_arg3⁰ of {
//│ 	LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {
//│ 		LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰)
//│ 		| _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}
//│ 	| _  => error⁰}
//│ def format_lh_₁(_lh_format_arg1⁰, _lh_format_arg2⁰) = case _lh_format_arg2⁰ of {
//│ 	LH_N  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let break⁰ = (fun _lh_break_arg1¹ -> (fun _lh_break_arg2¹ -> (fun _lh_break_arg3⁰ -> if polyEq⁰(_lh_break_arg1¹, _lh_break_arg2¹) then [LH_C [LH_N] _lh_break_arg3⁰] else [LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)])))
//│ 		and start⁰ = (fun _lh_start_arg1⁰ -> (fun _lh_start_arg2⁰ -> break⁰(_lh_start_arg1⁰, _lh_start_arg2⁰, [LH_C [LH_N] [LH_N]]))) 
//│ 		in fold1_lh_₂(break⁰(_lh_format_arg1⁰), start⁰(_lh_format_arg1⁰), _lh_format_arg2⁰)}
//│ def fst3_lh_₁(_lh_fst3_arg1⁰) = case _lh_fst3_arg1⁰ of {
//│ 	LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰
//│ 	| _  => error⁰}
//│ def head'_lh_₁(_lh_head'_arg1⁰) = case _lh_head'_arg1⁰ of {
//│ 	LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰)
//│ 	| _  => error⁰}
//│ def head'_lh_₂(_lh_head'_arg1¹) = case _lh_head'_arg1¹ of {
//│ 	LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0¹)) then head_lh_₅(_lh_head'_LH_P2_0¹) else head_lh_₅(_lh_head'_LH_P2_1¹)
//│ 	| _  => error⁰}
//│ def head_lh_₁(ls¹⁵) = case ls¹⁵ of {
//│ 	LH_C h⁴⁶ t⁴⁶ => h⁴⁶
//│ 	| LH_N  => error⁰}
//│ def head_lh_₂(ls⁰) = case ls⁰ of {
//│ 	LH_C h⁹ t⁹ => h⁹
//│ 	| LH_N  => error⁰}
//│ def head_lh_₃(ls¹³) = case ls¹³ of {
//│ 	LH_C h⁴² t⁴² => h⁴²
//│ 	| LH_N  => error⁰}
//│ def head_lh_₄(ls³) = case ls³ of {
//│ 	LH_C h²³ t²³ => h²³
//│ 	| LH_N  => error⁰}
//│ def head_lh_₅(ls²) = case ls² of {
//│ 	LH_C h¹⁹ t¹⁹ => h¹⁹
//│ 	| LH_N  => error⁰}
//│ def init'_lh_₁(_lh_init'_arg1¹) = case _lh_init'_arg1¹ of {
//│ 	LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₂(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then 
//│ 		let _lh_matchIdent¹⁰ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ 		in case _lh_matchIdent¹⁰ of {
//│ 			LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]
//│ 	| _  => error⁰}
//│ def init'_lh_₂(_lh_init'_arg1⁰) = case _lh_init'_arg1⁰ of {
//│ 	LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₂(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then 
//│ 		let _lh_matchIdent⁰ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]
//│ 	| _  => error⁰}
//│ def isSpace_lh_₁(_lh_isSpace_arg1¹) = polyEq⁰(_lh_isSpace_arg1¹, ' ')
//│ def isSpace_lh_₂(_lh_isSpace_arg1⁰) = polyEq⁰(_lh_isSpace_arg1⁰, ' ')
//│ def last'_lh_₁(_lh_last'_arg1²) = case _lh_last'_arg1² of {
//│ 	LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₂(_lh_last'_LH_P2_1²)) then head_lh_₃(_lh_last'_LH_P2_1²) else head_lh_₄(_lh_last'_LH_P2_0²)
//│ 	| _  => error⁰}
//│ def last'_lh_₂(_lh_last'_arg1³) = case _lh_last'_arg1³ of {
//│ 	LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1³)) then head_lh_₅(_lh_last'_LH_P2_1³) else head_lh_₅(_lh_last'_LH_P2_0³)
//│ 	| _  => error⁰}
//│ def last'_lh_₃(_lh_last'_arg1¹) = case _lh_last'_arg1¹ of {
//│ 	LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1¹)) then head_lh_₅(_lh_last'_LH_P2_1¹) else head_lh_₅(_lh_last'_LH_P2_0¹)
//│ 	| _  => error⁰}
//│ def last'_lh_₄(_lh_last'_arg1⁰) = case _lh_last'_arg1⁰ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁰)) then head_lh_₅(_lh_last'_LH_P2_1⁰) else head_lh_₅(_lh_last'_LH_P2_0⁰)
//│ 	| _  => error⁰}
//│ def last'_lh_₅(_lh_last'_arg1⁴) = case _lh_last'_arg1⁴ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₅(_lh_last'_LH_P2_1⁴) else head_lh_₅(_lh_last'_LH_P2_0⁴)
//│ 	| _  => error⁰}
//│ def len_tl_lh_₁(_lh_len_tl_arg1¹) = thd3_lh_₂(_lh_len_tl_arg1¹)
//│ def len_tl_lh_₂(_lh_len_tl_arg1⁰) = thd3_lh_₂(_lh_len_tl_arg1⁰)
//│ def length_lh_₁(ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h³⁶ t³⁶ => (1 + length_lh_₁(t³⁶))
//│ 	| LH_N  => 0}
//│ def lines_lh_₁(_lh_lines_arg1⁰) = 
//│ 	let _lh_matchIdent⁴ = break_lh_₁((fun x¹ -> polyEq⁰(x¹, '|')), _lh_lines_arg1⁰)
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => 
//│ 			let t¹⁷ = 	
//│ 				let _lh_matchIdent⁵ = _lh_lines_LH_P2_1⁰
//│ 				in _lh_matchIdent⁵(99)
//│ 			in let h¹⁷ = _lh_lines_LH_P2_0⁰
//│ 			in (fun f⁰ -> [LH_C f⁰(h¹⁷) t¹⁷(f⁰)])
//│ 		| _  => error⁰}
//│ def map_lh_₁(f⁴, ls⁸) = ls⁸(f⁴)
//│ def map_lh_₂(f³, ls⁵) = ls⁵(f³)
//│ def map_lh_₃(f⁸, ls¹¹) = case ls¹¹ of {
//│ 	LH_C h³⁷ t³⁷ => 
//│ 		let t³⁸ = map_lh_₃(f⁸, t³⁷)
//│ 		in let h³⁸ = f⁸(h³⁷)
//│ 		in (fun f⁹ -> 
//│ 			let t³⁹ = t³⁸(f⁹)
//│ 			in let h³⁹ = f⁹(h³⁸)
//│ 			in (fun _lh_dummy⁴ -> h³⁹(t³⁹(99))))
//│ 	| LH_N  => (fun f¹⁰ -> (fun _lh_dummy⁵ -> [LH_N]))}
//│ def map_lh_₄(f¹⁴, ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h⁴⁵ t⁴⁵ => [LH_C f¹⁴(h⁴⁵) map_lh_₄(f¹⁴, t⁴⁵)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f⁵, ls⁹) = case ls⁹ of {
//│ 	LH_C h³⁴ t³⁴ => [LH_C f⁵(h³⁴) map_lh_₅(f⁵, t³⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f², ls⁴) = ls⁴(f²)
//│ def mappend_lh_₁(xs⁴, ys¹⁰) = case xs⁴ of {
//│ 	LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₁(t⁸, ys¹⁰)]
//│ 	| LH_N  => ys¹⁰}
//│ def mappend_lh_₁₀(xs⁷, ys¹³) = case xs⁷ of {
//│ 	LH_C h¹³ t¹³ => [LH_C h¹³ mappend_lh_₁₀(t¹³, ys¹³)]
//│ 	| LH_N  => ys¹³}
//│ def mappend_lh_₁₁(xs¹⁴, ys²⁰) = case xs¹⁴ of {
//│ 	LH_C h²² t²² => [LH_C h²² mappend_lh_₁₁(t²², ys²⁰)]
//│ 	| LH_N  => ys²⁰}
//│ def mappend_lh_₁₂(xs²⁴, ys³⁵) = case xs²⁴ of {
//│ 	LH_C h⁴⁹ t⁴⁹ => [LH_C h⁴⁹ mappend_lh_₁₂(t⁴⁹, ys³⁵)]
//│ 	| LH_N  => ys³⁵}
//│ def mappend_lh_₁₃(xs¹⁹, ys²⁹) = case xs¹⁹ of {
//│ 	LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₁₃(t³⁰, ys²⁹)]
//│ 	| LH_N  => ys²⁹}
//│ def mappend_lh_₁₄(xs¹², ys¹⁸) = case xs¹² of {
//│ 	LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₁₄(t²⁰, ys¹⁸)]
//│ 	| LH_N  => ys¹⁸}
//│ def mappend_lh_₁₅(xs²¹, ys³¹) = case xs²¹ of {
//│ 	LH_C h³³ t³³ => [LH_C h³³ mappend_lh_₁₅(t³³, ys³¹)]
//│ 	| LH_N  => ys³¹}
//│ def mappend_lh_₁₆(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₁₆(t¹, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₁₇(xs²³, ys³⁴) = case xs²³ of {
//│ 	LH_C h⁴⁷ t⁴⁷ => [LH_C h⁴⁷ mappend_lh_₁₇(t⁴⁷, ys³⁴)]
//│ 	| LH_N  => ys³⁴}
//│ def mappend_lh_₁₈(xs⁵, ys¹¹) = case xs⁵ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₈(t¹⁰, ys¹¹)]
//│ 	| LH_N  => ys¹¹}
//│ def mappend_lh_₁₉(xs⁶, ys¹²) = case xs⁶ of {
//│ 	LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₁₉(t¹¹, ys¹²)]
//│ 	| LH_N  => ys¹²}
//│ def mappend_lh_₂(xs⁹, ys¹⁵) = case xs⁹ of {
//│ 	LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₂(t¹⁵, ys¹⁵)]
//│ 	| LH_N  => ys¹⁵}
//│ def mappend_lh_₂₀(xs¹⁶, ys²²) = case xs¹⁶ of {
//│ 	LH_C h²⁵ t²⁵ => 
//│ 		let t²⁶ = mappend_lh_₂₀(t²⁵, ys²²)
//│ 		in let h²⁶ = h²⁵
//│ 		in (fun ys²³ -> 
//│ 			let t²⁷ = t²⁶(ys²³)
//│ 			in let h²⁷ = h²⁶
//│ 			in (fun ys²⁴ -> [LH_C h²⁷ t²⁷(ys²⁴)]))
//│ 	| LH_N  => ys²²}
//│ def mappend_lh_₂₁(xs², ys²) = case xs² of {
//│ 	LH_C h² t² => 
//│ 		let t³ = mappend_lh_₂₁(t², ys²)
//│ 		in let h³ = h²
//│ 		in (fun ys³ -> 
//│ 			let t⁴ = t³(ys³)
//│ 			in let h⁴ = h³
//│ 			in (fun ys⁴ -> [LH_C h⁴ t⁴(ys⁴)]))
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₂₂(xs²⁵, ys³⁶) = xs²⁵(ys³⁶)
//│ def mappend_lh_₂₃(xs¹⁰, ys¹⁶) = xs¹⁰(ys¹⁶)
//│ def mappend_lh_₂₄(xs²², ys³²) = case xs²² of {
//│ 	LH_C h⁴³ t⁴³ => 
//│ 		let t⁴⁴ = mappend_lh_₂₄(t⁴³, ys³²)
//│ 		in let h⁴⁴ = h⁴³
//│ 		in (fun ys³³ -> [LH_C h⁴⁴ t⁴⁴(ys³³)])
//│ 	| LH_N  => ys³²}
//│ def mappend_lh_₂₅(xs¹⁸, ys²⁸) = xs¹⁸(ys²⁸)
//│ def mappend_lh_₃(xs³, ys⁹) = case xs³ of {
//│ 	LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₃(t⁷, ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_lh_₄(xs¹⁵, ys²¹) = case xs¹⁵ of {
//│ 	LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₄(t²⁴, ys²¹)]
//│ 	| LH_N  => ys²¹}
//│ def mappend_lh_₅(xs¹¹, ys¹⁷) = case xs¹¹ of {
//│ 	LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₅(t¹⁶, ys¹⁷)]
//│ 	| LH_N  => ys¹⁷}
//│ def mappend_lh_₆(xs¹³, ys¹⁹) = case xs¹³ of {
//│ 	LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₆(t²¹, ys¹⁹)]
//│ 	| LH_N  => ys¹⁹}
//│ def mappend_lh_₇(xs⁸, ys¹⁴) = case xs⁸ of {
//│ 	LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₇(t¹⁴, ys¹⁴)]
//│ 	| LH_N  => ys¹⁴}
//│ def mappend_lh_₈(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₈(t⁰, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₉(xs²⁰, ys³⁰) = case xs²⁰ of {
//│ 	LH_C h³² t³² => [LH_C h³² mappend_lh_₉(t³², ys³⁰)]
//│ 	| LH_N  => ys³⁰}
//│ def maxw_lh_₁ = 70
//│ def maxw_lh_₂ = 70
//│ def maxw_lh_₃ = 70
//│ def min_lh_₁(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ > _lh_min_arg2⁰) then _lh_min_arg2⁰ else _lh_min_arg1⁰
//│ def min_lh_₂(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ def nil'_lh_₁ = 
//│ 	let _lh_cons'_LH_P2_1² = [LH_N]
//│ 	in let _lh_cons'_LH_P2_0² = [LH_N]
//│ 	in (fun _lh_cons'_arg1³ -> if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1³ _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1³ [LH_N]] _lh_cons'_LH_P2_0²])
//│ def null'_lh_₁(_lh_null'_arg1¹) = case _lh_null'_arg1¹ of {
//│ 	LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1¹ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₂(_lh_null'_arg1⁰) = case _lh_null'_arg1⁰ of {
//│ 	LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1⁰ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₃(_lh_null'_arg1²) = case _lh_null'_arg1² of {
//│ 	LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {
//│ 		LH_N  => case _lh_null'_LH_P2_1² of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null_lh_₁(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₂(_lh_null_arg1¹) = case _lh_null_arg1¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False]
//│ 	| _  => error⁰}
//│ def optw_lh_₁ = 63
//│ def optw_lh_₂ = 63
//│ def optw_lh_₃ = 63
//│ def par3_lh_₁(_lh_par3_arg1⁰) = 
//│ 	let zs⁰ = scan1_lh_₁(stepr_lh_₁, startr_lh_₁, map_lh_₅(length_lh_₁, _lh_par3_arg1⁰))
//│ 	in tile_lh_₁(_lh_par3_arg1⁰, [LH_P2 map_lh_₄((fun _lh_funcomp_x¹ -> (fun _lh_funcomp_x² -> len_tl_lh_₁(last'_lh_₁(_lh_funcomp_x²)))(fst3_lh_₁(_lh_funcomp_x¹))), zs⁰) thd3_lh_₁(head_lh_₁(zs⁰))])
//│ def paras_lh_₁(_lh_paras_arg1⁰) = (fun _lh_funcomp_x⁰ -> filter_lh_₁((fun x⁰ -> polyNeq⁰([LH_N], x⁰)), format_lh_₁([LH_N], _lh_funcomp_x⁰)))(_lh_paras_arg1⁰)
//│ def parse_lh_₁(_lh_parse_arg1⁰) = (fun _lh_funcomp_x⁶ -> (fun _lh_funcomp_x⁷ -> paras_lh_₁(_lh_funcomp_x⁷(words_lh_₁)))(
//│ 	let _lh_matchIdent⁶ = break_lh_₁((fun x² -> polyEq⁰(x², '|')), _lh_funcomp_x⁶)
//│ 	in case _lh_matchIdent⁶ of {
//│ 		LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => 
//│ 			let t¹⁸ = 	
//│ 				let _lh_matchIdent⁷ = _lh_lines_LH_P2_1¹
//│ 				in _lh_matchIdent⁷(99)
//│ 			in let h¹⁸ = _lh_lines_LH_P2_0¹
//│ 			in (fun f¹ -> [LH_C f¹(h¹⁸) t¹⁸(f¹)])
//│ 		| _  => error⁰}))(_lh_parse_arg1⁰)
//│ def reverse_helper_lh_₁(ls¹, a⁰) = case ls¹ of {
//│ 	LH_C h¹² t¹² => reverse_helper_lh_₁(t¹², [LH_C h¹² a⁰])
//│ 	| LH_N  => a⁰}
//│ def reverse_lh_₁(ls¹⁶) = reverse_helper_lh_₁(ls¹⁶, [LH_N])
//│ def scan1_lh_₁(_lh_scan1_arg1⁰, _lh_scan1_arg2⁰) = fold1_lh_₁((fun a² -> (fun s⁰ -> [LH_C _lh_scan1_arg1⁰(a², head_lh_₂(s⁰)) s⁰])), (fun a³ -> [LH_C _lh_scan1_arg2⁰(a³) [LH_N]]))
//│ def single'_lh_₁(_lh_single'_arg1⁰) = case _lh_single'_arg1⁰ of {
//│ 	LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₂(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₂(_lh_single'_LH_P2_1⁰)))
//│ 	| _  => error⁰}
//│ def single'_lh_₂(_lh_single'_arg1¹) = case _lh_single'_arg1¹ of {
//│ 	LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹)))
//│ 	| _  => error⁰}
//│ def single_lh_₁(_lh_single_arg1⁰) = case _lh_single_arg1⁰ of {
//│ 	LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def snd3_lh_₁(_lh_snd3_arg1⁰) = case _lh_snd3_arg1⁰ of {
//│ 	LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰
//│ 	| _  => error⁰}
//│ def splitAt_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) = [LH_P2 take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]
//│ def startr_lh_₁(_lh_startr_arg1⁰) = if (_lh_startr_arg1⁰ <= maxw_lh_₃) then [LH_P3 nil'_lh_₁([LH_P3 0 0 0]) _lh_startr_arg1⁰ 1] else error⁰([LH_C 's' [LH_C 't' [LH_C 'a' [LH_C 'r' [LH_C 't' [LH_C 'r' [LH_C ' ' [LH_C 'p' [LH_C 'a' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]]]]]]])
//│ def stepr_lh_₁(_lh_stepr_arg1⁰, _lh_stepr_arg2⁰) = case _lh_stepr_arg2⁰ of {
//│ 	LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => 
//│ 		let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ 		in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ 		in let single⁰ = (fun p⁰ -> (len_tl_lh_₂(p⁰) == 0))
//│ 		in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh_₁(p¹)) - 1))
//│ 		in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh_₃(p²) + 
//│ 			let a¹ = (optw_lh_₁ - width_hd⁰(p²))
//│ 			in (a¹ * a¹)))
//│ 		in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh_₂(p³)) - 1))
//│ 		in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + 
//│ 			let x⁴ = (optw_lh_₂ - old_width_hd⁰(p⁴))
//│ 			in (x⁴ * x⁴)) _lh_stepr_LH_P3_2⁰])
//│ 		in let trim⁰ = (fun ps_pq⁰ -> if null'_lh_₁(ps_pq⁰) then ps_pq⁰ else if single'_lh_₂(ps_pq⁰) then ps_pq⁰ else 
//│ 			let ps_p⁰ = init'_lh_₁(ps_pq⁰)
//│ 			in let q⁰ = last'_lh_₅(ps_pq⁰)
//│ 			in let p⁵ = last'_lh_₃(ps_p⁰)
//│ 			in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ 		in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh_₂(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh_₂(ps_p¹)) > maxw_lh_₂) then drop_nofit⁰(init'_lh_₂(ps_p¹)) else ps_p¹)
//│ 		in let bf⁰ = (fun p⁶ -> (fun q¹ -> 
//│ 			let wqh⁰ = width_hd⁰(q¹)
//│ 			in let rqh⁰ = ((maxw_lh_₁ - wqh⁰) + 1)
//│ 			in if (single⁰(q¹) && (cost_tl_lh_₁(p⁶) == 0)) then min_lh_₂((optw_lh_₃ - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh_₁(ceildiv_lh_₁((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ 		in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh_₁(qr_rs⁰) || null'_lh_₃(qr_rs⁰)) then cons'_lh_₂(p⁷, qr_rs⁰) else 
//│ 			let q² = head'_lh_₂(qr_rs⁰)
//│ 			in let r_rs⁰ = tail'_lh_₁(qr_rs⁰)
//│ 			in let r⁰ = head'_lh_₁(r_rs⁰)
//│ 			in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh_₁(p⁷, qr_rs⁰)))
//│ 		in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₄(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]
//│ 	| _  => error⁰}
//│ def tail'_lh_₁(_lh_tail'_arg1⁰) = case _lh_tail'_arg1⁰ of {
//│ 	LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then 
//│ 		let _lh_matchIdent¹⁴ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ 		in case _lh_matchIdent¹⁴ of {
//│ 			LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]
//│ 			| _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]
//│ 	| _  => error⁰}
//│ def tail_lh_₁(ls⁶) = case ls⁶ of {
//│ 	LH_C h²⁹ t²⁹ => t²⁹
//│ 	| LH_N  => error⁰}
//│ def take_lh_₁(n⁰, ls⁷) = if (n⁰ > 0) then case ls⁷ of {
//│ 	LH_C h³¹ t³¹ => [LH_C h³¹ take_lh_₁((n⁰ - 1), t³¹)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPara_nofib_lh_₁(_lh_testPara_nofib_arg1⁰) = if null_lh_₁(test_lh_₂(0)) then [LH_N] else fmt_lh_₁(test_lh_₁(0))
//│ def test_lh_₁(_lh_test_arg1⁰) = mappend_lh_₂(mappend_lh_₈(mappend_lh_₁(mappend_lh_₇(mappend_lh_₄(mappend_lh_₉(mappend_lh_₅(mappend_lh_₃(mappend_lh_₆(primId⁰([LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'u' [LH_C 'c' [LH_C 't' [LH_C 'i' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C 'm' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'o' [LH_C 'n' [LH_C 'p' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]), primId⁰([LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C 's' [LH_C '.' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ',' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'h' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'y' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C ' ' [LH_C 'w' [LH_C 'e' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_C 'k' [LH_C 'n' [LH_C 'o' [LH_C 'w' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 's' [LH_C 'i' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C '.' [LH_C ' ' [LH_C 'H' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'o' [LH_C 'm' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'm' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 't' [LH_C 'a' [LH_C 'i' [LH_C 'l' [LH_C 's' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'g' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'b' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C ' ' [LH_C 'T' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'i' [LH_C 'c' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'l' [LH_C 'e' [LH_C 's' [LH_C 's' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C '|' [LH_C ' ' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]))
//│ def test_lh_₂(_lh_test_arg1¹) = mappend_lh_₁₆(mappend_lh_₁₇(mappend_lh_₁₅(mappend_lh_₁₃(mappend_lh_₁₀(mappend_lh_₁₂(mappend_lh_₁₄(mappend_lh_₁₁(mappend_lh_₁₈(primId⁰([LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'u' [LH_C 'c' [LH_C 't' [LH_C 'i' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C 'm' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'o' [LH_C 'n' [LH_C 'p' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]), primId⁰([LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C 's' [LH_C '.' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ',' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'h' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'y' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C ' ' [LH_C 'w' [LH_C 'e' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_C 'k' [LH_C 'n' [LH_C 'o' [LH_C 'w' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 's' [LH_C 'i' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C '.' [LH_C ' ' [LH_C 'H' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'o' [LH_C 'm' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'm' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 't' [LH_C 'a' [LH_C 'i' [LH_C 'l' [LH_C 's' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'g' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'b' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C ' ' [LH_C 'T' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'i' [LH_C 'c' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'l' [LH_C 'e' [LH_C 's' [LH_C 's' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C '|' [LH_C ' ' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]))
//│ def thd3_lh_₁(_lh_thd3_arg1¹) = case _lh_thd3_arg1¹ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0¹ _lh_thd3_LH_P3_1¹ _lh_thd3_LH_P3_2¹ => _lh_thd3_LH_P3_2¹
//│ 	| _  => error⁰}
//│ def thd3_lh_₂(_lh_thd3_arg1⁰) = case _lh_thd3_arg1⁰ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰
//│ 	| _  => error⁰}
//│ def tile_lh_₁(_lh_tile_arg1⁰, _lh_tile_arg2⁰) = case _lh_tile_arg2⁰ of {
//│ 	LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => 
//│ 			let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ 			in let _lh_matchIdent³ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ 			in case _lh_matchIdent³ of {
//│ 				LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def unformat_lh_₁(_lh_unformat_arg1⁰) = fold1_lh_₃((fun xs¹⁷ -> (fun ys²⁵ -> mappend_lh_₂₄(xs¹⁷, 
//│ 	let t²⁸ = (fun ys²⁶ -> ys²⁶)
//│ 	in let h²⁸ = _lh_unformat_arg1⁰
//│ 	in (fun ys²⁷ -> [LH_C h²⁸ t²⁸(ys²⁷)]), ys²⁵))), (fun x³ -> x³))
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = _lh_unlines_arg1⁰((fun l¹ -> l¹(
//│ 	let t⁵⁰ = (fun ys³⁷ -> ys³⁷)
//│ 	in let h⁵⁰ = '|'
//│ 	in (fun ys³⁸ -> [LH_C h⁵⁰ t⁵⁰(ys³⁸)]))), 99)
//│ def unparas_lh_₁(_lh_unparas_arg1⁰) = unformat_lh_₁([LH_N], _lh_unparas_arg1⁰)
//│ def unparse_lh_₁(_lh_unparse_arg1⁰) = (fun _lh_funcomp_x⁸ -> (fun _lh_funcomp_x⁹ -> unlines_lh_₁(map_lh_₃(unwords_lh_₁, _lh_funcomp_x⁹)))(unparas_lh_₁(_lh_funcomp_x⁸)))(_lh_unparse_arg1⁰)
//│ def unwords_lh_₁(_lh_unwords_arg1⁰) = case _lh_unwords_arg1⁰ of {
//│ 	LH_N  => (fun ys⁵ -> ys⁵)
//│ 	| LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => 
//│ 		let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {
//│ 			LH_N  => (fun ys⁶ -> ys⁶)
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => 
//│ 				let t⁵ = mappend_lh_₂₁(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))
//│ 				in let h⁵ = ' '
//│ 				in (fun ys⁷ -> 
//│ 					let t⁶ = t⁵(ys⁷)
//│ 					in let h⁶ = h⁵
//│ 					in (fun ys⁸ -> [LH_C h⁶ t⁶(ys⁸)]))
//│ 			| _  => error⁰})
//│ 		in mappend_lh_₂₀(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def width_tl_lh_₁(_lh_width_tl_arg1⁰) = fst3_lh_₁(_lh_width_tl_arg1⁰)
//│ def width_tl_lh_₂(_lh_width_tl_arg1¹) = fst3_lh_₁(_lh_width_tl_arg1¹)
//│ def words_lh_₁(_lh_words_arg1⁰) = 
//│ 	let _lh_matchIdent¹ = dropWhile_lh_₁(isSpace_lh_₁, _lh_words_arg1⁰)
//│ 	in _lh_matchIdent¹(99)
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ testPara_nofib_lh_₁(primId⁰(0))
//│ def break_lh_₁(_lh_break_arg1², _lh_break_arg2²) = case _lh_break_arg2² of {
//│ 	LH_N  => [LH_P2 [LH_N] (fun _lh_dummy² -> (fun f⁶ -> [LH_N]))]
//│ 	| LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1²(_lh_break_LH_C_0¹) then [LH_P2 [LH_N] 
//│ 		let _lh_lines_LH_C_1⁰ = _lh_break_LH_C_1¹
//│ 		in (fun _lh_dummy³ -> 
//│ 			let _lh_matchIdent¹¹ = break_lh_₁((fun x⁵ -> polyEq⁰(x⁵, '|')), _lh_lines_LH_C_1⁰)
//│ 			in case _lh_matchIdent¹¹ of {
//│ 				LH_P2 _lh_lines_LH_P2_0² _lh_lines_LH_P2_1² => 
//│ 					let t³⁵ = 	
//│ 						let _lh_matchIdent¹² = _lh_lines_LH_P2_1²
//│ 						in _lh_matchIdent¹²(99)
//│ 					in let h³⁵ = _lh_lines_LH_P2_0²
//│ 					in (fun f⁷ -> [LH_C f⁷(h³⁵) t³⁵(f⁷)])
//│ 				| _  => error⁰})] else 
//│ 		let _lh_matchIdent¹³ = break_lh_₁(_lh_break_arg1², _lh_break_LH_C_1¹)
//│ 		in case _lh_matchIdent¹³ of {
//│ 			LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def break_lh_₂(_lh_break_arg1⁰, _lh_break_arg2⁰) = case _lh_break_arg2⁰ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1⁰(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else 
//│ 		let _lh_matchIdent² = break_lh_₂(_lh_break_arg1⁰, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent² of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def ceildiv_lh_₁(_lh_ceildiv_arg1⁰, _lh_ceildiv_arg2⁰) = div⁰(((_lh_ceildiv_arg1⁰ + _lh_ceildiv_arg2⁰) - 1), _lh_ceildiv_arg2⁰)
//│ def concat_lh_₁(lss¹) = case lss¹ of {
//│ 	LH_C h⁴⁸ t⁴⁸ => mappend_lh_₁₉(h⁴⁸, concat_lh_₁(t⁴⁸))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₂(lss⁰) = lss⁰(99)
//│ def cons'_lh_₁(_lh_cons'_arg1², _lh_cons'_arg2²) = case _lh_cons'_arg2² of {
//│ 	LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0¹]
//│ 	| _  => error⁰}
//│ def cons'_lh_₂(_lh_cons'_arg1⁰, _lh_cons'_arg2⁰) = case _lh_cons'_arg2⁰ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]
//│ 	| _  => error⁰}
//│ def cons'_lh_₃(_lh_cons'_arg1¹, _lh_cons'_arg2¹) = _lh_cons'_arg2¹(_lh_cons'_arg1¹)
//│ def cost_tl_lh_₁(_lh_cost_tl_arg1²) = snd3_lh_₁(_lh_cost_tl_arg1²)
//│ def cost_tl_lh_₂(_lh_cost_tl_arg1¹) = snd3_lh_₁(_lh_cost_tl_arg1¹)
//│ def cost_tl_lh_₃(_lh_cost_tl_arg1⁰) = snd3_lh_₁(_lh_cost_tl_arg1⁰)
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => (fun _lh_dummy⁰ -> [LH_N])
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else 
//│ 		let _lh_words_LH_C_1⁰ = _lh_dropWhile_LH_C_1⁰
//│ 		in let _lh_words_LH_C_0⁰ = _lh_dropWhile_LH_C_0⁰
//│ 		in (fun _lh_dummy¹ -> 
//│ 			let _lh_matchIdent⁸ = break_lh_₂(isSpace_lh_₂, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ 			in case _lh_matchIdent⁸ of {
//│ 				LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ 
//│ 					let _lh_matchIdent⁹ = dropWhile_lh_₁(isSpace_lh_₁, _lh_words_LH_P2_1⁰)
//│ 					in _lh_matchIdent⁹(99)]
//│ 				| _  => error⁰})
//│ 	| _  => error⁰}
//│ def drop_lh_₁(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def filter_lh_₁(f¹¹, ls¹²) = case ls¹² of {
//│ 	LH_C h⁴⁰ t⁴⁰ => if f¹¹(h⁴⁰) then 
//│ 		let t⁴¹ = filter_lh_₁(f¹¹, t⁴⁰)
//│ 		in let h⁴¹ = h⁴⁰
//│ 		in (fun f¹² -> [LH_C f¹²(h⁴¹) t⁴¹(f¹²)]) else filter_lh_₁(f¹¹, t⁴⁰)
//│ 	| LH_N  => (fun f¹³ -> [LH_N])}
//│ def fmt_lh_₁(_lh_fmt_arg1⁰) = (fun _lh_funcomp_x³ -> (fun _lh_funcomp_x⁴ -> unparse_lh_₁(_lh_funcomp_x⁴((fun _lh_funcomp_x⁵ -> par3_lh_₁(concat_lh_₁(_lh_funcomp_x⁵))))))(parse_lh_₁(_lh_funcomp_x³)))(_lh_fmt_arg1⁰)
//│ def fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_arg3²) = case _lh_fold1_arg3² of {
//│ 	LH_C _lh_fold1_LH_C_0² _lh_fold1_LH_C_1² => case _lh_fold1_LH_C_1² of {
//│ 		LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²)
//│ 		| _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_arg3¹) = case _lh_fold1_arg3¹ of {
//│ 	LH_C _lh_fold1_LH_C_0¹ _lh_fold1_LH_C_1¹ => case _lh_fold1_LH_C_1¹ of {
//│ 		LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹)
//│ 		| _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_arg3⁰) = case _lh_fold1_arg3⁰ of {
//│ 	LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {
//│ 		LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰)
//│ 		| _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}
//│ 	| _  => error⁰}
//│ def format_lh_₁(_lh_format_arg1⁰, _lh_format_arg2⁰) = case _lh_format_arg2⁰ of {
//│ 	LH_N  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let break⁰ = (fun _lh_break_arg1¹ -> (fun _lh_break_arg2¹ -> (fun _lh_break_arg3⁰ -> if polyEq⁰(_lh_break_arg1¹, _lh_break_arg2¹) then [LH_C [LH_N] _lh_break_arg3⁰] else [LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)])))
//│ 		and start⁰ = (fun _lh_start_arg1⁰ -> (fun _lh_start_arg2⁰ -> break⁰(_lh_start_arg1⁰, _lh_start_arg2⁰, [LH_C [LH_N] [LH_N]]))) 
//│ 		in fold1_lh_₂(break⁰(_lh_format_arg1⁰), start⁰(_lh_format_arg1⁰), _lh_format_arg2⁰)}
//│ def fst3_lh_₁(_lh_fst3_arg1⁰) = case _lh_fst3_arg1⁰ of {
//│ 	LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰
//│ 	| _  => error⁰}
//│ def head'_lh_₁(_lh_head'_arg1⁰) = case _lh_head'_arg1⁰ of {
//│ 	LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0⁰)) then head_lh_₅(_lh_head'_LH_P2_0⁰) else head_lh_₅(_lh_head'_LH_P2_1⁰)
//│ 	| _  => error⁰}
//│ def head'_lh_₂(_lh_head'_arg1¹) = case _lh_head'_arg1¹ of {
//│ 	LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_head'_LH_P2_0¹)) then head_lh_₅(_lh_head'_LH_P2_0¹) else head_lh_₅(_lh_head'_LH_P2_1¹)
//│ 	| _  => error⁰}
//│ def head_lh_₁(ls¹⁵) = case ls¹⁵ of {
//│ 	LH_C h⁴⁶ t⁴⁶ => h⁴⁶
//│ 	| LH_N  => error⁰}
//│ def head_lh_₂(ls⁰) = case ls⁰ of {
//│ 	LH_C h⁹ t⁹ => h⁹
//│ 	| LH_N  => error⁰}
//│ def head_lh_₃(ls¹³) = case ls¹³ of {
//│ 	LH_C h⁴² t⁴² => h⁴²
//│ 	| LH_N  => error⁰}
//│ def head_lh_₄(ls³) = case ls³ of {
//│ 	LH_C h²³ t²³ => h²³
//│ 	| LH_N  => error⁰}
//│ def head_lh_₅(ls²) = case ls² of {
//│ 	LH_C h¹⁹ t¹⁹ => h¹⁹
//│ 	| LH_N  => error⁰}
//│ def init'_lh_₁(_lh_init'_arg1¹) = case _lh_init'_arg1¹ of {
//│ 	LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₂(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1²) then 
//│ 		let _lh_matchIdent¹⁰ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ 		in case _lh_matchIdent¹⁰ of {
//│ 			LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]
//│ 	| _  => error⁰}
//│ def init'_lh_₂(_lh_init'_arg1⁰) = case _lh_init'_arg1⁰ of {
//│ 	LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₂(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_init'_LH_P2_1⁰) then 
//│ 		let _lh_matchIdent⁰ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]
//│ 	| _  => error⁰}
//│ def isSpace_lh_₁(_lh_isSpace_arg1¹) = polyEq⁰(_lh_isSpace_arg1¹, ' ')
//│ def isSpace_lh_₂(_lh_isSpace_arg1⁰) = polyEq⁰(_lh_isSpace_arg1⁰, ' ')
//│ def last'_lh_₁(_lh_last'_arg1²) = case _lh_last'_arg1² of {
//│ 	LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₂(_lh_last'_LH_P2_1²)) then head_lh_₃(_lh_last'_LH_P2_1²) else head_lh_₄(_lh_last'_LH_P2_0²)
//│ 	| _  => error⁰}
//│ def last'_lh_₂(_lh_last'_arg1³) = case _lh_last'_arg1³ of {
//│ 	LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1³)) then head_lh_₅(_lh_last'_LH_P2_1³) else head_lh_₅(_lh_last'_LH_P2_0³)
//│ 	| _  => error⁰}
//│ def last'_lh_₃(_lh_last'_arg1¹) = case _lh_last'_arg1¹ of {
//│ 	LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1¹)) then head_lh_₅(_lh_last'_LH_P2_1¹) else head_lh_₅(_lh_last'_LH_P2_0¹)
//│ 	| _  => error⁰}
//│ def last'_lh_₄(_lh_last'_arg1⁰) = case _lh_last'_arg1⁰ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁰)) then head_lh_₅(_lh_last'_LH_P2_1⁰) else head_lh_₅(_lh_last'_LH_P2_0⁰)
//│ 	| _  => error⁰}
//│ def last'_lh_₅(_lh_last'_arg1⁴) = case _lh_last'_arg1⁴ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₅(_lh_last'_LH_P2_1⁴) else head_lh_₅(_lh_last'_LH_P2_0⁴)
//│ 	| _  => error⁰}
//│ def len_tl_lh_₁(_lh_len_tl_arg1¹) = thd3_lh_₂(_lh_len_tl_arg1¹)
//│ def len_tl_lh_₂(_lh_len_tl_arg1⁰) = thd3_lh_₂(_lh_len_tl_arg1⁰)
//│ def length_lh_₁(ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h³⁶ t³⁶ => (1 + length_lh_₁(t³⁶))
//│ 	| LH_N  => 0}
//│ def lines_lh_₁(_lh_lines_arg1⁰) = 
//│ 	let _lh_matchIdent⁴ = break_lh_₁((fun x¹ -> polyEq⁰(x¹, '|')), _lh_lines_arg1⁰)
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => 
//│ 			let t¹⁷ = 	
//│ 				let _lh_matchIdent⁵ = _lh_lines_LH_P2_1⁰
//│ 				in _lh_matchIdent⁵(99)
//│ 			in let h¹⁷ = _lh_lines_LH_P2_0⁰
//│ 			in (fun f⁰ -> [LH_C f⁰(h¹⁷) t¹⁷(f⁰)])
//│ 		| _  => error⁰}
//│ def map_lh_₁(f⁴, ls⁸) = ls⁸(f⁴)
//│ def map_lh_₂(f³, ls⁵) = ls⁵(f³)
//│ def map_lh_₃(f⁸, ls¹¹) = case ls¹¹ of {
//│ 	LH_C h³⁷ t³⁷ => 
//│ 		let t³⁸ = map_lh_₃(f⁸, t³⁷)
//│ 		in let h³⁸ = f⁸(h³⁷)
//│ 		in (fun f⁹ -> 
//│ 			let t³⁹ = t³⁸(f⁹)
//│ 			in let h³⁹ = f⁹(h³⁸)
//│ 			in (fun _lh_dummy⁴ -> h³⁹(t³⁹(99))))
//│ 	| LH_N  => (fun f¹⁰ -> (fun _lh_dummy⁵ -> [LH_N]))}
//│ def map_lh_₄(f¹⁴, ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h⁴⁵ t⁴⁵ => [LH_C f¹⁴(h⁴⁵) map_lh_₄(f¹⁴, t⁴⁵)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f⁵, ls⁹) = case ls⁹ of {
//│ 	LH_C h³⁴ t³⁴ => [LH_C f⁵(h³⁴) map_lh_₅(f⁵, t³⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f², ls⁴) = ls⁴(f²)
//│ def mappend_lh_₁(xs⁴, ys¹⁰) = case xs⁴ of {
//│ 	LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₁(t⁸, ys¹⁰)]
//│ 	| LH_N  => ys¹⁰}
//│ def mappend_lh_₁₀(xs⁷, ys¹³) = case xs⁷ of {
//│ 	LH_C h¹³ t¹³ => [LH_C h¹³ mappend_lh_₁₀(t¹³, ys¹³)]
//│ 	| LH_N  => ys¹³}
//│ def mappend_lh_₁₁(xs¹⁴, ys²⁰) = case xs¹⁴ of {
//│ 	LH_C h²² t²² => [LH_C h²² mappend_lh_₁₁(t²², ys²⁰)]
//│ 	| LH_N  => ys²⁰}
//│ def mappend_lh_₁₂(xs²⁴, ys³⁵) = case xs²⁴ of {
//│ 	LH_C h⁴⁹ t⁴⁹ => [LH_C h⁴⁹ mappend_lh_₁₂(t⁴⁹, ys³⁵)]
//│ 	| LH_N  => ys³⁵}
//│ def mappend_lh_₁₃(xs¹⁹, ys²⁹) = case xs¹⁹ of {
//│ 	LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₁₃(t³⁰, ys²⁹)]
//│ 	| LH_N  => ys²⁹}
//│ def mappend_lh_₁₄(xs¹², ys¹⁸) = case xs¹² of {
//│ 	LH_C h²⁰ t²⁰ => [LH_C h²⁰ mappend_lh_₁₄(t²⁰, ys¹⁸)]
//│ 	| LH_N  => ys¹⁸}
//│ def mappend_lh_₁₅(xs²¹, ys³¹) = case xs²¹ of {
//│ 	LH_C h³³ t³³ => [LH_C h³³ mappend_lh_₁₅(t³³, ys³¹)]
//│ 	| LH_N  => ys³¹}
//│ def mappend_lh_₁₆(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₁₆(t¹, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₁₇(xs²³, ys³⁴) = case xs²³ of {
//│ 	LH_C h⁴⁷ t⁴⁷ => [LH_C h⁴⁷ mappend_lh_₁₇(t⁴⁷, ys³⁴)]
//│ 	| LH_N  => ys³⁴}
//│ def mappend_lh_₁₈(xs⁵, ys¹¹) = case xs⁵ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₈(t¹⁰, ys¹¹)]
//│ 	| LH_N  => ys¹¹}
//│ def mappend_lh_₁₉(xs⁶, ys¹²) = case xs⁶ of {
//│ 	LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₁₉(t¹¹, ys¹²)]
//│ 	| LH_N  => ys¹²}
//│ def mappend_lh_₂(xs⁹, ys¹⁵) = case xs⁹ of {
//│ 	LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₂(t¹⁵, ys¹⁵)]
//│ 	| LH_N  => ys¹⁵}
//│ def mappend_lh_₂₀(xs¹⁶, ys²²) = case xs¹⁶ of {
//│ 	LH_C h²⁵ t²⁵ => 
//│ 		let t²⁶ = mappend_lh_₂₀(t²⁵, ys²²)
//│ 		in let h²⁶ = h²⁵
//│ 		in (fun ys²³ -> 
//│ 			let t²⁷ = t²⁶(ys²³)
//│ 			in let h²⁷ = h²⁶
//│ 			in (fun ys²⁴ -> [LH_C h²⁷ t²⁷(ys²⁴)]))
//│ 	| LH_N  => ys²²}
//│ def mappend_lh_₂₁(xs², ys²) = case xs² of {
//│ 	LH_C h² t² => 
//│ 		let t³ = mappend_lh_₂₁(t², ys²)
//│ 		in let h³ = h²
//│ 		in (fun ys³ -> 
//│ 			let t⁴ = t³(ys³)
//│ 			in let h⁴ = h³
//│ 			in (fun ys⁴ -> [LH_C h⁴ t⁴(ys⁴)]))
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₂₂(xs²⁵, ys³⁶) = xs²⁵(ys³⁶)
//│ def mappend_lh_₂₃(xs¹⁰, ys¹⁶) = xs¹⁰(ys¹⁶)
//│ def mappend_lh_₂₄(xs²², ys³²) = case xs²² of {
//│ 	LH_C h⁴³ t⁴³ => 
//│ 		let t⁴⁴ = mappend_lh_₂₄(t⁴³, ys³²)
//│ 		in let h⁴⁴ = h⁴³
//│ 		in (fun ys³³ -> [LH_C h⁴⁴ t⁴⁴(ys³³)])
//│ 	| LH_N  => ys³²}
//│ def mappend_lh_₂₅(xs¹⁸, ys²⁸) = xs¹⁸(ys²⁸)
//│ def mappend_lh_₃(xs³, ys⁹) = case xs³ of {
//│ 	LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₃(t⁷, ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_lh_₄(xs¹⁵, ys²¹) = case xs¹⁵ of {
//│ 	LH_C h²⁴ t²⁴ => [LH_C h²⁴ mappend_lh_₄(t²⁴, ys²¹)]
//│ 	| LH_N  => ys²¹}
//│ def mappend_lh_₅(xs¹¹, ys¹⁷) = case xs¹¹ of {
//│ 	LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₅(t¹⁶, ys¹⁷)]
//│ 	| LH_N  => ys¹⁷}
//│ def mappend_lh_₆(xs¹³, ys¹⁹) = case xs¹³ of {
//│ 	LH_C h²¹ t²¹ => [LH_C h²¹ mappend_lh_₆(t²¹, ys¹⁹)]
//│ 	| LH_N  => ys¹⁹}
//│ def mappend_lh_₇(xs⁸, ys¹⁴) = case xs⁸ of {
//│ 	LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₇(t¹⁴, ys¹⁴)]
//│ 	| LH_N  => ys¹⁴}
//│ def mappend_lh_₈(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₈(t⁰, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₉(xs²⁰, ys³⁰) = case xs²⁰ of {
//│ 	LH_C h³² t³² => [LH_C h³² mappend_lh_₉(t³², ys³⁰)]
//│ 	| LH_N  => ys³⁰}
//│ def maxw_lh_₁ = 70
//│ def maxw_lh_₂ = 70
//│ def maxw_lh_₃ = 70
//│ def min_lh_₁(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ > _lh_min_arg2⁰) then _lh_min_arg2⁰ else _lh_min_arg1⁰
//│ def min_lh_₂(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ def nil'_lh_₁(_lh_cons'_arg1³) = 
//│ 	let _lh_cons'_LH_P2_1² = [LH_N]
//│ 	in let _lh_cons'_LH_P2_0² = [LH_N]
//│ 	in if not⁰(null_lh_₂(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1³ _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1³ [LH_N]] _lh_cons'_LH_P2_0²]
//│ def null'_lh_₁(_lh_null'_arg1¹) = case _lh_null'_arg1¹ of {
//│ 	LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1¹ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₂(_lh_null'_arg1⁰) = case _lh_null'_arg1⁰ of {
//│ 	LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1⁰ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₃(_lh_null'_arg1²) = case _lh_null'_arg1² of {
//│ 	LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {
//│ 		LH_N  => case _lh_null'_LH_P2_1² of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null_lh_₁(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₂(_lh_null_arg1¹) = case _lh_null_arg1¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False]
//│ 	| _  => error⁰}
//│ def optw_lh_₁ = 63
//│ def optw_lh_₂ = 63
//│ def optw_lh_₃ = 63
//│ def par3_lh_₁(_lh_par3_arg1⁰) = 
//│ 	let zs⁰ = scan1_lh_₁(stepr_lh_₁, startr_lh_₁, map_lh_₅(length_lh_₁, _lh_par3_arg1⁰))
//│ 	in tile_lh_₁(_lh_par3_arg1⁰, [LH_P2 map_lh_₄((fun _lh_funcomp_x¹ -> (fun _lh_funcomp_x² -> len_tl_lh_₁(last'_lh_₁(_lh_funcomp_x²)))(fst3_lh_₁(_lh_funcomp_x¹))), zs⁰) thd3_lh_₁(head_lh_₁(zs⁰))])
//│ def paras_lh_₁(_lh_paras_arg1⁰) = (fun _lh_funcomp_x⁰ -> filter_lh_₁((fun x⁰ -> polyNeq⁰([LH_N], x⁰)), format_lh_₁([LH_N], _lh_funcomp_x⁰)))(_lh_paras_arg1⁰)
//│ def parse_lh_₁(_lh_parse_arg1⁰) = (fun _lh_funcomp_x⁶ -> (fun _lh_funcomp_x⁷ -> paras_lh_₁(_lh_funcomp_x⁷(words_lh_₁)))(
//│ 	let _lh_matchIdent⁶ = break_lh_₁((fun x² -> polyEq⁰(x², '|')), _lh_funcomp_x⁶)
//│ 	in case _lh_matchIdent⁶ of {
//│ 		LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => 
//│ 			let t¹⁸ = 	
//│ 				let _lh_matchIdent⁷ = _lh_lines_LH_P2_1¹
//│ 				in _lh_matchIdent⁷(99)
//│ 			in let h¹⁸ = _lh_lines_LH_P2_0¹
//│ 			in (fun f¹ -> [LH_C f¹(h¹⁸) t¹⁸(f¹)])
//│ 		| _  => error⁰}))(_lh_parse_arg1⁰)
//│ def reverse_helper_lh_₁(ls¹, a⁰) = case ls¹ of {
//│ 	LH_C h¹² t¹² => reverse_helper_lh_₁(t¹², [LH_C h¹² a⁰])
//│ 	| LH_N  => a⁰}
//│ def reverse_lh_₁(ls¹⁶) = reverse_helper_lh_₁(ls¹⁶, [LH_N])
//│ def scan1_lh_₁(_lh_scan1_arg1⁰, _lh_scan1_arg2⁰) = fold1_lh_₁((fun a² -> (fun s⁰ -> [LH_C _lh_scan1_arg1⁰(a², head_lh_₂(s⁰)) s⁰])), (fun a³ -> [LH_C _lh_scan1_arg2⁰(a³) [LH_N]]))
//│ def single'_lh_₁(_lh_single'_arg1⁰) = case _lh_single'_arg1⁰ of {
//│ 	LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₂(_lh_single'_LH_P2_0⁰) && single_lh_₁(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₂(_lh_single'_LH_P2_1⁰)))
//│ 	| _  => error⁰}
//│ def single'_lh_₂(_lh_single'_arg1¹) = case _lh_single'_arg1¹ of {
//│ 	LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₂(_lh_single'_LH_P2_0¹) && single_lh_₁(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₂(_lh_single'_LH_P2_1¹)))
//│ 	| _  => error⁰}
//│ def single_lh_₁(_lh_single_arg1⁰) = case _lh_single_arg1⁰ of {
//│ 	LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def snd3_lh_₁(_lh_snd3_arg1⁰) = case _lh_snd3_arg1⁰ of {
//│ 	LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰
//│ 	| _  => error⁰}
//│ def splitAt_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) = [LH_P2 take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]
//│ def startr_lh_₁(_lh_startr_arg1⁰) = if (_lh_startr_arg1⁰ <= maxw_lh_₃) then [LH_P3 nil'_lh_₁([LH_P3 0 0 0]) _lh_startr_arg1⁰ 1] else error⁰([LH_C 's' [LH_C 't' [LH_C 'a' [LH_C 'r' [LH_C 't' [LH_C 'r' [LH_C ' ' [LH_C 'p' [LH_C 'a' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]]]]]]])
//│ def stepr_lh_₁(_lh_stepr_arg1⁰, _lh_stepr_arg2⁰) = case _lh_stepr_arg2⁰ of {
//│ 	LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => 
//│ 		let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ 		in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ 		in let single⁰ = (fun p⁰ -> (len_tl_lh_₂(p⁰) == 0))
//│ 		in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh_₁(p¹)) - 1))
//│ 		in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh_₃(p²) + 
//│ 			let a¹ = (optw_lh_₁ - width_hd⁰(p²))
//│ 			in (a¹ * a¹)))
//│ 		in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh_₂(p³)) - 1))
//│ 		in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₂(p⁴) + 
//│ 			let x⁴ = (optw_lh_₂ - old_width_hd⁰(p⁴))
//│ 			in (x⁴ * x⁴)) _lh_stepr_LH_P3_2⁰])
//│ 		in let trim⁰ = (fun ps_pq⁰ -> if null'_lh_₁(ps_pq⁰) then ps_pq⁰ else if single'_lh_₂(ps_pq⁰) then ps_pq⁰ else 
//│ 			let ps_p⁰ = init'_lh_₁(ps_pq⁰)
//│ 			in let q⁰ = last'_lh_₅(ps_pq⁰)
//│ 			in let p⁵ = last'_lh_₃(ps_p⁰)
//│ 			in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ 		in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh_₂(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh_₂(ps_p¹)) > maxw_lh_₂) then drop_nofit⁰(init'_lh_₂(ps_p¹)) else ps_p¹)
//│ 		in let bf⁰ = (fun p⁶ -> (fun q¹ -> 
//│ 			let wqh⁰ = width_hd⁰(q¹)
//│ 			in let rqh⁰ = ((maxw_lh_₁ - wqh⁰) + 1)
//│ 			in if (single⁰(q¹) && (cost_tl_lh_₁(p⁶) == 0)) then min_lh_₂((optw_lh_₃ - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh_₁(ceildiv_lh_₁((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ 		in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh_₁(qr_rs⁰) || null'_lh_₃(qr_rs⁰)) then cons'_lh_₂(p⁷, qr_rs⁰) else 
//│ 			let q² = head'_lh_₂(qr_rs⁰)
//│ 			in let r_rs⁰ = tail'_lh_₁(qr_rs⁰)
//│ 			in let r⁰ = head'_lh_₁(r_rs⁰)
//│ 			in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh_₁(p⁷, qr_rs⁰)))
//│ 		in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₄(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]
//│ 	| _  => error⁰}
//│ def tail'_lh_₁(_lh_tail'_arg1⁰) = case _lh_tail'_arg1⁰ of {
//│ 	LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₂(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₁(_lh_tail'_LH_P2_0⁰) then 
//│ 		let _lh_matchIdent¹⁴ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ 		in case _lh_matchIdent¹⁴ of {
//│ 			LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]
//│ 			| _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]
//│ 	| _  => error⁰}
//│ def tail_lh_₁(ls⁶) = case ls⁶ of {
//│ 	LH_C h²⁹ t²⁹ => t²⁹
//│ 	| LH_N  => error⁰}
//│ def take_lh_₁(n⁰, ls⁷) = if (n⁰ > 0) then case ls⁷ of {
//│ 	LH_C h³¹ t³¹ => [LH_C h³¹ take_lh_₁((n⁰ - 1), t³¹)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPara_nofib_lh_₁(_lh_testPara_nofib_arg1⁰) = if null_lh_₁(test_lh_₂(0)) then [LH_N] else fmt_lh_₁(test_lh_₁(0))
//│ def test_lh_₁(_lh_test_arg1⁰) = mappend_lh_₂(mappend_lh_₈(mappend_lh_₁(mappend_lh_₇(mappend_lh_₄(mappend_lh_₉(mappend_lh_₅(mappend_lh_₃(mappend_lh_₆(primId⁰([LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'u' [LH_C 'c' [LH_C 't' [LH_C 'i' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C 'm' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'o' [LH_C 'n' [LH_C 'p' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]), primId⁰([LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C 's' [LH_C '.' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ',' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'h' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'y' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C ' ' [LH_C 'w' [LH_C 'e' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_C 'k' [LH_C 'n' [LH_C 'o' [LH_C 'w' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 's' [LH_C 'i' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C '.' [LH_C ' ' [LH_C 'H' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'o' [LH_C 'm' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'm' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 't' [LH_C 'a' [LH_C 'i' [LH_C 'l' [LH_C 's' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'g' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'b' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C ' ' [LH_C 'T' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'i' [LH_C 'c' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'l' [LH_C 'e' [LH_C 's' [LH_C 's' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C '|' [LH_C ' ' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]))
//│ def test_lh_₂(_lh_test_arg1¹) = mappend_lh_₁₆(mappend_lh_₁₇(mappend_lh_₁₅(mappend_lh_₁₃(mappend_lh_₁₀(mappend_lh_₁₂(mappend_lh_₁₄(mappend_lh_₁₁(mappend_lh_₁₈(primId⁰([LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'u' [LH_C 'c' [LH_C 't' [LH_C 'i' [LH_C 'v' [LH_C 'e' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'g' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C 'm' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'o' [LH_C 'n' [LH_C 'p' [LH_C 'l' [LH_C 'a' [LH_C 'c' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]), primId⁰([LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C 's' [LH_C '.' [LH_C ' ' [LH_C 'I' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'm' [LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 't' [LH_C 'y' [LH_C ',' [LH_C ' ' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'h' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 'm' [LH_C 'a' [LH_C 'y' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C ' ' [LH_C 'w' [LH_C 'e' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_C 'k' [LH_C 'n' [LH_C 'o' [LH_C 'w' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'a' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 't' [LH_C 'e' [LH_C 'x' [LH_C 't' [LH_C 'b' [LH_C 'o' [LH_C 'o' [LH_C 'k' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'n' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 's' [LH_C 'i' [LH_C 'b' [LH_C 'l' [LH_C 'e' [LH_C '.' [LH_C ' ' [LH_C 'H' [LH_C 'o' [LH_C 'w' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'r' [LH_C ',' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'm' [LH_C 'o' [LH_C 'r' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 's' [LH_C 'i' [LH_C 'g' [LH_C 'n' [LH_C 'e' [LH_C 'r' [LH_C ' ' [LH_C 'w' [LH_C 'i' [LH_C 'l' [LH_C 'l' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'o' [LH_C 'm' [LH_C 'i' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'm' [LH_C 'e' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 't' [LH_C 'a' [LH_C 'i' [LH_C 'l' [LH_C 's' [LH_C ',' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'n' [LH_C 'g' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'g' [LH_C 'a' [LH_C 'p' [LH_C ' ' [LH_C 'b' [LH_C 'e' [LH_C 't' [LH_C 'w' [LH_C 'e' [LH_C 'e' [LH_C 'n' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'a' [LH_C 'b' [LH_C 's' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 'c' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C 'l' [LH_C 'g' [LH_C 'o' [LH_C 'r' [LH_C 'i' [LH_C 't' [LH_C 'h' [LH_C 'm' [LH_C ' ' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'i' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C ' ' [LH_C 'T' [LH_C 'h' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 's' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 't' [LH_C 'r' [LH_C 'a' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 't' [LH_C 'o' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'f' [LH_C 'o' [LH_C 'r' [LH_C 'm' [LH_C 'a' [LH_C 'l' [LH_C ' ' [LH_C 'd' [LH_C 'e' [LH_C 'v' [LH_C 'e' [LH_C 'l' [LH_C 'o' [LH_C 'p' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ',' [LH_C ' ' [LH_C 'w' [LH_C 'h' [LH_C 'i' [LH_C 'c' [LH_C 'h' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'u' [LH_C 's' [LH_C 'u' [LH_C 'a' [LH_C 'l' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'e' [LH_C 's' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'c' [LH_C 'r' [LH_C 'e' [LH_C 't' [LH_C 'e' [LH_C ' ' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 't' [LH_C 'h' [LH_C 'e' [LH_C ' ' [LH_C 'l' [LH_C 'e' [LH_C 's' [LH_C 's' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])), primId⁰([LH_C 'e' [LH_C 'f' [LH_C 'f' [LH_C 'i' [LH_C 'c' [LH_C 'i' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'o' [LH_C 'l' [LH_C 'u' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C '.' [LH_C '|' [LH_C ' ' [LH_C '|' [LH_N]]]]]]]]]]]]]]]]]]]]]]]))
//│ def thd3_lh_₁(_lh_thd3_arg1¹) = case _lh_thd3_arg1¹ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0¹ _lh_thd3_LH_P3_1¹ _lh_thd3_LH_P3_2¹ => _lh_thd3_LH_P3_2¹
//│ 	| _  => error⁰}
//│ def thd3_lh_₂(_lh_thd3_arg1⁰) = case _lh_thd3_arg1⁰ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰
//│ 	| _  => error⁰}
//│ def tile_lh_₁(_lh_tile_arg1⁰, _lh_tile_arg2⁰) = case _lh_tile_arg2⁰ of {
//│ 	LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => 
//│ 			let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ 			in let _lh_matchIdent³ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ 			in case _lh_matchIdent³ of {
//│ 				LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def unformat_lh_₁(_lh_unformat_arg1⁰) = fold1_lh_₃((fun xs¹⁷ -> (fun ys²⁵ -> mappend_lh_₂₄(xs¹⁷, 
//│ 	let t²⁸ = (fun ys²⁶ -> ys²⁶)
//│ 	in let h²⁸ = _lh_unformat_arg1⁰
//│ 	in (fun ys²⁷ -> [LH_C h²⁸ t²⁸(ys²⁷)]), ys²⁵))), (fun x³ -> x³))
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = _lh_unlines_arg1⁰((fun l¹ -> l¹(
//│ 	let t⁵⁰ = (fun ys³⁷ -> ys³⁷)
//│ 	in let h⁵⁰ = '|'
//│ 	in (fun ys³⁸ -> [LH_C h⁵⁰ t⁵⁰(ys³⁸)]))), 99)
//│ def unparas_lh_₁(_lh_unparas_arg1⁰) = unformat_lh_₁([LH_N], _lh_unparas_arg1⁰)
//│ def unparse_lh_₁(_lh_unparse_arg1⁰) = (fun _lh_funcomp_x⁸ -> (fun _lh_funcomp_x⁹ -> unlines_lh_₁(map_lh_₃(unwords_lh_₁, _lh_funcomp_x⁹)))(unparas_lh_₁(_lh_funcomp_x⁸)))(_lh_unparse_arg1⁰)
//│ def unwords_lh_₁(_lh_unwords_arg1⁰) = case _lh_unwords_arg1⁰ of {
//│ 	LH_N  => (fun ys⁵ -> ys⁵)
//│ 	| LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => 
//│ 		let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {
//│ 			LH_N  => (fun ys⁶ -> ys⁶)
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => 
//│ 				let t⁵ = mappend_lh_₂₁(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))
//│ 				in let h⁵ = ' '
//│ 				in (fun ys⁷ -> 
//│ 					let t⁶ = t⁵(ys⁷)
//│ 					in let h⁶ = h⁵
//│ 					in (fun ys⁸ -> [LH_C h⁶ t⁶(ys⁸)]))
//│ 			| _  => error⁰})
//│ 		in mappend_lh_₂₀(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def width_tl_lh_₁(_lh_width_tl_arg1⁰) = fst3_lh_₁(_lh_width_tl_arg1⁰)
//│ def width_tl_lh_₂(_lh_width_tl_arg1¹) = fst3_lh_₁(_lh_width_tl_arg1¹)
//│ def words_lh_₁(_lh_words_arg1⁰) = 
//│ 	let _lh_matchIdent¹ = dropWhile_lh_₁(isSpace_lh_₁, _lh_words_arg1⁰)
//│ 	in _lh_matchIdent¹(99)
//│ <<<<<<< after floating out <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
