

:lhInHaskell
:lhGenOCaml
dropWhile f [] = []
dropWhile f (h:t) = if (f h) then dropWhile f t else (h:t)
drop n []      = []
drop n (h:t)   = if n <= 0 then (h:t) else (drop (n - 1) t)
splitAt n ls = (take n ls, drop n ls)
unwords []              =  ""
unwords (w:ws)          = w ++ go ws
  where
    go []     = ""
    go (v:vs) = ' ' : (v ++ (go vs))
break p [] = ([], [])
break p (x:xs) = if p x then ([], (x:xs)) else case (break p xs) of { (ys, zs) -> ((x:ys), zs) }
isSpace c = polyEq c ' '
words s = case (dropWhile isSpace s) of
          [] -> []
          (h:t) -> case (break isSpace (h:t)) of (w, s'') -> (w : (words s''))
lines s = case break (\x -> polyEq x '|') s of
                  (l, s') -> (l:(case s' of { [] -> []; _:s'' -> lines s'' }))
unlines ls = concat $ map (\l -> l ++ "|") ls
min a b = if a > b then b else a
null [] = True
null (h:t) = False
all f [] = True
all f (h:t) = if f h then all f t else False
fold1 :: (a->b->b) -> (a->b) -> [a] -> b
fold1 f g [a]   = g a
fold1 f g (a:x) = f a (fold1 f g x)
scan1 :: (a->b->b) -> (a->b) -> [a] -> [b]
scan1 f g = fold1 (\a -> \s -> ((f a (head s)) : s)) (\a -> [g a])
tails :: [a] -> [[a]]
tails = scan1 (\x -> \y -> x:y) (\x -> x:[])
single :: [a] -> Bool
single [a] = True
single _   = False
minWith :: (a->Int) -> [a] -> a
minWith f = fold1 (\a -> \b -> if ((f a) < (f b)) then a else b) (\x -> x)
type Txt = [Word]
type Word = String
type Paragraph = [Line]
type Line = [Word]
par0 :: Txt -> Paragraph
par0 x = ((minWith cost) . (filter feasible) . formats) x
formats :: Txt -> [Paragraph]
formats = fold1 (\w -> \ps -> (map (new w) ps) ++ (map (glue w) ps)) (\x -> [ [[x]] ])
new w ls      = [w]:ls
glue w (l:ls) = (w:l):ls
feasible :: Paragraph -> Bool
feasible a = all fits a
maxw :: Int
maxw = 70
fits :: Line -> Bool
fits xs = ((width xs) <= maxw)
width :: Line -> Int
width ls = fold1 plus length ls
  where plus w n = length w + 1 + n
optw :: Int
optw = 63
cost :: Paragraph -> Int
cost ls = fold1 plus (\_dum -> 0) ls
       where plus l n = linc l + n
             linc l = let a = (optw - (width l)) in a * a
fitH ls = (fits . head) ls
type Par    = (Width,Cost,Length)
type Width  = Int
type Cost   = Int
type Length = Int
width_tl x = fst3 x
cost_tl  x = snd3 x
len_tl   x = thd3 x
fst3 (a,b,c) = a
snd3 (a,b,c) = b
thd3 (a,b,c) = c
tile :: Txt -> ([Length],Length) -> Paragraph
tile ws ([],n)   = []
tile ws (m:ms,n) =
  let l = n - m in
  case (splitAt l ws) of { (ws1,ws2) ->
    ws1 : (tile ws2 (drop l (m:ms),m))
  }            
par3 :: Txt -> Paragraph
par3 ws =
  let zs = scan1 stepr startr (map length ws) in
  tile ws (map (len_tl . last' . fst3) zs, thd3 (head zs))
startr :: Length -> (SymList Par, Width, Length)
startr a = if a <= maxw then (cons' (0,0,0) nil',a,1) else error "startr param error"
stepr :: Length -> (SymList Par, Cost, Length) -> (SymList Par, Cost, Length)
stepr w (ps,tw,tl) =
  let tot_width = w + 1 + tw in
  let tot_len = 1 + tl in
  let single = \p -> (len_tl p) == 0 in
  let width_hd = \p -> if (single p) then tot_width else tot_width - (width_tl p) - 1 in
  let cost = \p -> if (single p) then 0 else (cost_tl p) + (let a = (optw - (width_hd p)) in a*a) in
  let old_width_hd = \p -> if (single p) then tw else tw - (width_tl p) - 1 in 
  let new = \p -> if (single p) then (tw,0,tl) else (tw, (cost_tl p) + (let x = (optw-(old_width_hd p)) in x*x), tl) in
  let trim = \ps_pq ->
                if null' ps_pq then
                  ps_pq
                else if single' ps_pq then
                  ps_pq
                else
                  let ps_p = init' ps_pq in
                  let q    = last' ps_pq in
                  let p    = last' ps_p in
                  if (cost p) <= (cost q) then
                    trim ps_p
                  else
                    ps_pq
  in
  let drop_nofit = \ps_p ->
                      if null' ps_p then
                        ps_p
                      else if (width_hd (last' ps_p)) > maxw then
                        drop_nofit (init' ps_p)
                      else 
                        ps_p
  in
  let bf = \p -> \q ->
            let wqh = width_hd q in
            let rqh = maxw - wqh + 1 in
            if (single q) && ((cost_tl p) == 0) then
              min (optw - (width_hd p)) rqh
            else if single q then
              rqh
            else
              (ceildiv ((cost p)-(cost q)) (2*(wqh-(width_hd p)))) `min` rqh
  in
  let myAdd = \p -> \qr_rs ->
                if (single' qr_rs) || (null' qr_rs) then
                  cons' p qr_rs
                else
                  let q = head' qr_rs in
                  let r_rs = tail' qr_rs in
                  let r  = head' r_rs in
                  if (bf p q) <= (bf q r) then
                    myAdd p r_rs
                  else
                    cons' p qr_rs
  in
  (trim (drop_nofit (new (last' ps) `myAdd` ps)), tot_width, tot_len)
ceildiv n m = (n+m-1) `div` m
fmt x = (unparse . (map (par3 . concat)) . parse) x
fmtWith par = unparse . (map (par . concat)) . parse
type SymList a = ([a],[a])
single' (x,y) = ((null x) && (single y)) || ((single x) && (null y))
null' ([],[]) = True
null' _       = False
nil' = ([],[])
head' (x,y) = if not (null x) then head x else head y
last' (y,x) = if not (null x) then head x else head y
cons' a (x,y) = if not (null y) then (a:x,y) else ([a],x)
snoc' a (y,x) = if not (null y) then (y,a:x) else (x,[a])
tail' (x,y) =
  if null x then
    ([],[])
  else if single x then
    case (splitAt ((length y) `div` 2) y) of {(y0,y1) -> (reverse y1, y0) }
  else
    (tail x, y)
init' (y,x) =
  if null x then
    ([],[])
  else if single x then
    case (splitAt ((length y) `div` 2) y) of { (y0,y1) -> (y0, reverse y1) }
  else
    (y, tail x)
unformat :: a -> [[a]] -> [a]
unformat a = fold1 (\xs -> \ys -> xs ++ [a] ++ ys) (\x -> x)
format :: Eq a => a -> [a] -> [[a]]
format a [] = [[]]
format a x = fold1 (break a) (start a) x
  where break a b xs = if polyEq a b then []:xs else (b:(head xs)):(tail xs)
        start a b = break a b [[]]
unparas :: [[[String]]] -> [[String]]
unparas ls = unformat [] ls
paras :: [[String]] -> [[[String]]]
paras ls   = ((filter (\x -> polyNeq [] x)) . (format [])) ls
parse ls   = (paras . (map words) . lines) ls
unparse ls = (unlines . (map unwords) . unparas) ls
testPara_nofib dummy =
  let test = (from_large_str "In the constructive programming community it is commonplace to see ") ++
             (from_large_str "formal developments of textbook algorithms. In the algorithm design ") ++
             (from_large_str "community, on the other hand, it may be well known that the textbook ") ++
             (from_large_str "solution to a problem is not the most efficient possible. However, in ") ++
             (from_large_str "presenting the more efficient solution, the algorithm designer will ") ++
             (from_large_str "usually omit some of the implementation details, this creating an ") ++
             (from_large_str "algorithm gap between the abstract algorithm and its concrete ") ++
             (from_large_str "implementation. This is in contrast to the formal development, which ") ++
             (from_large_str "usually presents the complete concrete implementation of the less ") ++
             (from_large_str "efficient solution.| |")
  in
  if null (test) then [] else (fmt (test))
testPara_nofib $ primId 0
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> after expansion >>>>>>>>>>
//│ testPara_nofib_lh_₁(primId⁰(0))
//│ def break_lh_₁(_lh_break_arg1², _lh_break_arg2²) = case _lh_break_arg2² of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1²(_lh_break_LH_C_0¹) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]] else 
//│ 		let _lh_matchIdent⁴ = break_lh_₁(_lh_break_arg1², _lh_break_LH_C_1¹)
//│ 		in case _lh_matchIdent⁴ of {
//│ 			LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def break_lh_₂(_lh_break_arg1¹, _lh_break_arg2¹) = case _lh_break_arg2¹ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else 
//│ 		let _lh_matchIdent³ = break_lh_₂(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent³ of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def ceildiv_lh_₁(_lh_ceildiv_arg1⁰, _lh_ceildiv_arg2⁰) = div⁰(((_lh_ceildiv_arg1⁰ + _lh_ceildiv_arg2⁰) - 1), _lh_ceildiv_arg2⁰)
//│ def concat_lh_₁(lss¹) = case lss¹ of {
//│ 	LH_C h²⁵ t²⁵ => mappend_lh_₁₀(h²⁵, concat_lh_₁(t²⁵))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₂(lss⁰) = case lss⁰ of {
//│ 	LH_C h¹⁶ t¹⁶ => mappend_lh_₁₄(h¹⁶, concat_lh_₂(t¹⁶))
//│ 	| LH_N  => [LH_N]}
//│ def cons'_lh_₁(_lh_cons'_arg1², _lh_cons'_arg2²) = case _lh_cons'_arg2² of {
//│ 	LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₃(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²]
//│ 	| _  => error⁰}
//│ def cons'_lh_₂(_lh_cons'_arg1¹, _lh_cons'_arg2¹) = case _lh_cons'_arg2¹ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₆(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]
//│ 	| _  => error⁰}
//│ def cons'_lh_₃(_lh_cons'_arg1⁰, _lh_cons'_arg2⁰) = case _lh_cons'_arg2⁰ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₆(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]
//│ 	| _  => error⁰}
//│ def cost_tl_lh_₁(_lh_cost_tl_arg1²) = snd3_lh_₁(_lh_cost_tl_arg1²)
//│ def cost_tl_lh_₂(_lh_cost_tl_arg1¹) = snd3_lh_₁(_lh_cost_tl_arg1¹)
//│ def cost_tl_lh_₃(_lh_cost_tl_arg1⁰) = snd3_lh_₁(_lh_cost_tl_arg1⁰)
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]
//│ 	| _  => error⁰}
//│ def drop_lh_₁(_lh_drop_arg1¹, _lh_drop_arg2¹) = case _lh_drop_arg2¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0¹ _lh_drop_LH_C_1¹ => if (_lh_drop_arg1¹ <= 0) then [LH_C _lh_drop_LH_C_0¹ _lh_drop_LH_C_1¹] else drop_lh_₁((_lh_drop_arg1¹ - 1), _lh_drop_LH_C_1¹)
//│ 	| _  => error⁰}
//│ def drop_lh_₂(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₂((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def filter_lh_₁(f⁰, ls⁹) = case ls⁹ of {
//│ 	LH_C h¹¹ t¹¹ => if f⁰(h¹¹) then [LH_C h¹¹ filter_lh_₁(f⁰, t¹¹)] else filter_lh_₁(f⁰, t¹¹)
//│ 	| LH_N  => [LH_N]}
//│ def fmt_lh_₁(_lh_fmt_arg1⁰) = (fun _lh_funcomp_x⁷ -> (fun _lh_funcomp_x⁸ -> unparse_lh_₁(map_lh_₁((fun _lh_funcomp_x⁹ -> par3_lh_₁(concat_lh_₁(_lh_funcomp_x⁹))), _lh_funcomp_x⁸)))(parse_lh_₁(_lh_funcomp_x⁷)))(_lh_fmt_arg1⁰)
//│ def fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_arg3²) = case _lh_fold1_arg3² of {
//│ 	LH_C _lh_fold1_LH_C_0² _lh_fold1_LH_C_1² => case _lh_fold1_LH_C_1² of {
//│ 		LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²)
//│ 		| _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_arg3¹) = case _lh_fold1_arg3¹ of {
//│ 	LH_C _lh_fold1_LH_C_0¹ _lh_fold1_LH_C_1¹ => case _lh_fold1_LH_C_1¹ of {
//│ 		LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹)
//│ 		| _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_arg3⁰) = case _lh_fold1_arg3⁰ of {
//│ 	LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {
//│ 		LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰)
//│ 		| _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}
//│ 	| _  => error⁰}
//│ def format_lh_₁(_lh_format_arg1⁰, _lh_format_arg2⁰) = case _lh_format_arg2⁰ of {
//│ 	LH_N  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let break⁰ = (fun _lh_break_arg1⁰ -> (fun _lh_break_arg2⁰ -> (fun _lh_break_arg3⁰ -> if polyEq⁰(_lh_break_arg1⁰, _lh_break_arg2⁰) then [LH_C [LH_N] _lh_break_arg3⁰] else [LH_C [LH_C _lh_break_arg2⁰ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)])))
//│ 		and start⁰ = (fun _lh_start_arg1⁰ -> (fun _lh_start_arg2⁰ -> break⁰(_lh_start_arg1⁰, _lh_start_arg2⁰, [LH_C [LH_N] [LH_N]]))) 
//│ 		in fold1_lh_₃(break⁰(_lh_format_arg1⁰), start⁰(_lh_format_arg1⁰), _lh_format_arg2⁰)}
//│ def fst3_lh_₁(_lh_fst3_arg1⁰) = case _lh_fst3_arg1⁰ of {
//│ 	LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰
//│ 	| _  => error⁰}
//│ def head'_lh_₁(_lh_head'_arg1¹) = case _lh_head'_arg1¹ of {
//│ 	LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₆(_lh_head'_LH_P2_0¹)) then head_lh_₆(_lh_head'_LH_P2_0¹) else head_lh_₆(_lh_head'_LH_P2_1¹)
//│ 	| _  => error⁰}
//│ def head'_lh_₂(_lh_head'_arg1⁰) = case _lh_head'_arg1⁰ of {
//│ 	LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₆(_lh_head'_LH_P2_0⁰)) then head_lh_₆(_lh_head'_LH_P2_0⁰) else head_lh_₆(_lh_head'_LH_P2_1⁰)
//│ 	| _  => error⁰}
//│ def head_lh_₁(ls¹²) = case ls¹² of {
//│ 	LH_C h¹⁸ t¹⁸ => h¹⁸
//│ 	| LH_N  => error⁰}
//│ def head_lh_₂(ls⁸) = case ls⁸ of {
//│ 	LH_C h¹⁰ t¹⁰ => h¹⁰
//│ 	| LH_N  => error⁰}
//│ def head_lh_₃(ls⁷) = case ls⁷ of {
//│ 	LH_C h⁹ t⁹ => h⁹
//│ 	| LH_N  => error⁰}
//│ def head_lh_₄(ls⁶) = case ls⁶ of {
//│ 	LH_C h⁸ t⁸ => h⁸
//│ 	| LH_N  => error⁰}
//│ def head_lh_₅(ls⁵) = case ls⁵ of {
//│ 	LH_C h⁴ t⁴ => h⁴
//│ 	| LH_N  => error⁰}
//│ def head_lh_₆(ls²) = case ls² of {
//│ 	LH_C h¹ t¹ => h¹
//│ 	| LH_N  => error⁰}
//│ def init'_lh_₁(_lh_init'_arg1¹) = case _lh_init'_arg1¹ of {
//│ 	LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₆(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₂(_lh_init'_LH_P2_1²) then 
//│ 		let _lh_matchIdent² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ 		in case _lh_matchIdent² of {
//│ 			LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]
//│ 	| _  => error⁰}
//│ def init'_lh_₂(_lh_init'_arg1⁰) = case _lh_init'_arg1⁰ of {
//│ 	LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₆(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₂(_lh_init'_LH_P2_1⁰) then 
//│ 		let _lh_matchIdent⁰ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]
//│ 	| _  => error⁰}
//│ def isSpace_lh_₁(_lh_isSpace_arg1¹) = polyEq⁰(_lh_isSpace_arg1¹, ' ')
//│ def isSpace_lh_₂(_lh_isSpace_arg1⁰) = polyEq⁰(_lh_isSpace_arg1⁰, ' ')
//│ def last'_lh_₁(_lh_last'_arg1⁴) = case _lh_last'_arg1⁴ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₂(_lh_last'_LH_P2_1⁴)) then head_lh_₂(_lh_last'_LH_P2_1⁴) else head_lh_₃(_lh_last'_LH_P2_0⁴)
//│ 	| _  => error⁰}
//│ def last'_lh_₂(_lh_last'_arg1³) = case _lh_last'_arg1³ of {
//│ 	LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₆(_lh_last'_LH_P2_1³)) then head_lh_₆(_lh_last'_LH_P2_1³) else head_lh_₆(_lh_last'_LH_P2_0³)
//│ 	| _  => error⁰}
//│ def last'_lh_₃(_lh_last'_arg1²) = case _lh_last'_arg1² of {
//│ 	LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₆(_lh_last'_LH_P2_1²)) then head_lh_₆(_lh_last'_LH_P2_1²) else head_lh_₆(_lh_last'_LH_P2_0²)
//│ 	| _  => error⁰}
//│ def last'_lh_₄(_lh_last'_arg1¹) = case _lh_last'_arg1¹ of {
//│ 	LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₆(_lh_last'_LH_P2_1¹)) then head_lh_₆(_lh_last'_LH_P2_1¹) else head_lh_₆(_lh_last'_LH_P2_0¹)
//│ 	| _  => error⁰}
//│ def last'_lh_₅(_lh_last'_arg1⁰) = case _lh_last'_arg1⁰ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₆(_lh_last'_LH_P2_1⁰)) then head_lh_₆(_lh_last'_LH_P2_1⁰) else head_lh_₆(_lh_last'_LH_P2_0⁰)
//│ 	| _  => error⁰}
//│ def len_tl_lh_₁(_lh_len_tl_arg1¹) = thd3_lh_₂(_lh_len_tl_arg1¹)
//│ def len_tl_lh_₂(_lh_len_tl_arg1⁰) = thd3_lh_₂(_lh_len_tl_arg1⁰)
//│ def length_lh_₁(ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h²⁰ t²⁰ => (1 + length_lh_₁(t²⁰))
//│ 	| LH_N  => 0}
//│ def lines_lh_₁(_lh_lines_arg1⁰) = 
//│ 	let _lh_matchIdent⁶ = break_lh_₂((fun x³ -> polyEq⁰(x³, '|')), _lh_lines_arg1⁰)
//│ 	in case _lh_matchIdent⁶ of {
//│ 		LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ 
//│ 			let _lh_matchIdent⁷ = _lh_lines_LH_P2_1⁰
//│ 			in case _lh_matchIdent⁷ of {
//│ 				LH_N  => [LH_N]
//│ 				| LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰)
//│ 				| _  => error⁰}]
//│ 		| _  => error⁰}
//│ def map_lh_₁(f⁶, ls¹⁷) = case ls¹⁷ of {
//│ 	LH_C h²⁴ t²⁴ => [LH_C f⁶(h²⁴) map_lh_₁(f⁶, t²⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f⁵, ls¹⁶) = case ls¹⁶ of {
//│ 	LH_C h²² t²² => [LH_C f⁵(h²²) map_lh_₂(f⁵, t²²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f⁴, ls¹⁵) = case ls¹⁵ of {
//│ 	LH_C h²¹ t²¹ => [LH_C f⁴(h²¹) map_lh_₃(f⁴, t²¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f³, ls¹³) = case ls¹³ of {
//│ 	LH_C h¹⁹ t¹⁹ => [LH_C f³(h¹⁹) map_lh_₄(f³, t¹⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f², ls¹¹) = case ls¹¹ of {
//│ 	LH_C h¹⁷ t¹⁷ => [LH_C f²(h¹⁷) map_lh_₅(f², t¹⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f¹, ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h¹⁴ t¹⁴ => [LH_C f¹(h¹⁴) map_lh_₆(f¹, t¹⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs¹⁶, ys¹⁶) = case xs¹⁶ of {
//│ 	LH_C h³⁴ t³⁴ => [LH_C h³⁴ mappend_lh_₁(t³⁴, ys¹⁶)]
//│ 	| LH_N  => ys¹⁶}
//│ def mappend_lh_₁₀(xs⁷, ys⁷) = case xs⁷ of {
//│ 	LH_C h²³ t²³ => [LH_C h²³ mappend_lh_₁₀(t²³, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₁₁(xs⁶, ys⁶) = case xs⁶ of {
//│ 	LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₁₁(t¹⁵, ys⁶)]
//│ 	| LH_N  => ys⁶}
//│ def mappend_lh_₁₂(xs⁴, ys⁴) = case xs⁴ of {
//│ 	LH_C h¹³ t¹³ => [LH_C h¹³ mappend_lh_₁₂(t¹³, ys⁴)]
//│ 	| LH_N  => ys⁴}
//│ def mappend_lh_₁₃(xs³, ys³) = case xs³ of {
//│ 	LH_C h¹² t¹² => [LH_C h¹² mappend_lh_₁₃(t¹², ys³)]
//│ 	| LH_N  => ys³}
//│ def mappend_lh_₁₄(xs², ys²) = case xs² of {
//│ 	LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₄(t⁷, ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₁₅(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁₅(t⁶, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₁₆(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₆(t⁵, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₂(xs¹⁵, ys¹⁵) = case xs¹⁵ of {
//│ 	LH_C h³³ t³³ => [LH_C h³³ mappend_lh_₂(t³³, ys¹⁵)]
//│ 	| LH_N  => ys¹⁵}
//│ def mappend_lh_₃(xs¹⁴, ys¹⁴) = case xs¹⁴ of {
//│ 	LH_C h³² t³² => [LH_C h³² mappend_lh_₃(t³², ys¹⁴)]
//│ 	| LH_N  => ys¹⁴}
//│ def mappend_lh_₄(xs¹³, ys¹³) = case xs¹³ of {
//│ 	LH_C h³¹ t³¹ => [LH_C h³¹ mappend_lh_₄(t³¹, ys¹³)]
//│ 	| LH_N  => ys¹³}
//│ def mappend_lh_₅(xs¹², ys¹²) = case xs¹² of {
//│ 	LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₅(t³⁰, ys¹²)]
//│ 	| LH_N  => ys¹²}
//│ def mappend_lh_₆(xs¹¹, ys¹¹) = case xs¹¹ of {
//│ 	LH_C h²⁹ t²⁹ => [LH_C h²⁹ mappend_lh_₆(t²⁹, ys¹¹)]
//│ 	| LH_N  => ys¹¹}
//│ def mappend_lh_₇(xs¹⁰, ys¹⁰) = case xs¹⁰ of {
//│ 	LH_C h²⁸ t²⁸ => [LH_C h²⁸ mappend_lh_₇(t²⁸, ys¹⁰)]
//│ 	| LH_N  => ys¹⁰}
//│ def mappend_lh_₈(xs⁹, ys⁹) = case xs⁹ of {
//│ 	LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₈(t²⁷, ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_lh_₉(xs⁸, ys⁸) = case xs⁸ of {
//│ 	LH_C h²⁶ t²⁶ => [LH_C h²⁶ mappend_lh_₉(t²⁶, ys⁸)]
//│ 	| LH_N  => ys⁸}
//│ def maxw_lh_₁ = 70
//│ def maxw_lh_₂ = 70
//│ def maxw_lh_₃ = 70
//│ def min_lh_₁(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ def min_lh_₂(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ > _lh_min_arg2⁰) then _lh_min_arg2⁰ else _lh_min_arg1⁰
//│ def nil'_lh_₁ = [LH_P2 [LH_N] [LH_N]]
//│ def null'_lh_₁(_lh_null'_arg1²) = case _lh_null'_arg1² of {
//│ 	LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {
//│ 		LH_N  => case _lh_null'_LH_P2_1² of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₂(_lh_null'_arg1¹) = case _lh_null'_arg1¹ of {
//│ 	LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1¹ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₃(_lh_null'_arg1⁰) = case _lh_null'_arg1⁰ of {
//│ 	LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1⁰ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null_lh_₁(_lh_null_arg1⁵) = case _lh_null_arg1⁵ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁵ _lh_null_LH_C_1⁵ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₂(_lh_null_arg1⁴) = case _lh_null_arg1⁴ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁴ _lh_null_LH_C_1⁴ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₃(_lh_null_arg1³) = case _lh_null_arg1³ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₄(_lh_null_arg1²) = case _lh_null_arg1² of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0² _lh_null_LH_C_1² => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₅(_lh_null_arg1¹) = case _lh_null_arg1¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₆(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def optw_lh_₁ = 63
//│ def optw_lh_₂ = 63
//│ def optw_lh_₃ = 63
//│ def par3_lh_₁(_lh_par3_arg1⁰) = 
//│ 	let zs⁰ = scan1_lh_₁(stepr_lh_₁, startr_lh_₁, map_lh_₅(length_lh_₁, _lh_par3_arg1⁰))
//│ 	in tile_lh_₁(_lh_par3_arg1⁰, [LH_P2 map_lh_₄((fun _lh_funcomp_x¹ -> (fun _lh_funcomp_x² -> len_tl_lh_₁(last'_lh_₁(_lh_funcomp_x²)))(fst3_lh_₁(_lh_funcomp_x¹))), zs⁰) thd3_lh_₁(head_lh_₁(zs⁰))])
//│ def paras_lh_₁(_lh_paras_arg1⁰) = (fun _lh_funcomp_x⁰ -> filter_lh_₁((fun x² -> polyNeq⁰([LH_N], x²)), format_lh_₁([LH_N], _lh_funcomp_x⁰)))(_lh_paras_arg1⁰)
//│ def parse_lh_₁(_lh_parse_arg1⁰) = (fun _lh_funcomp_x³ -> (fun _lh_funcomp_x⁴ -> paras_lh_₁(map_lh_₃(words_lh_₁, _lh_funcomp_x⁴)))(lines_lh_₁(_lh_funcomp_x³)))(_lh_parse_arg1⁰)
//│ def reverse_helper_lh_₁(ls⁰, a⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => reverse_helper_lh_₁(t⁰, [LH_C h⁰ a⁰])
//│ 	| LH_N  => a⁰}
//│ def reverse_lh_₁(ls¹) = reverse_helper_lh_₁(ls¹, [LH_N])
//│ def scan1_lh_₁(_lh_scan1_arg1⁰, _lh_scan1_arg2⁰) = fold1_lh_₁((fun a¹ -> (fun s⁰ -> [LH_C _lh_scan1_arg1⁰(a¹, head_lh_₄(s⁰)) s⁰])), (fun a² -> [LH_C _lh_scan1_arg2⁰(a²) [LH_N]]))
//│ def single'_lh_₁(_lh_single'_arg1¹) = case _lh_single'_arg1¹ of {
//│ 	LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₅(_lh_single'_LH_P2_0¹) && single_lh_₂(_lh_single'_LH_P2_1¹)) || (single_lh_₁(_lh_single'_LH_P2_0¹) && null_lh_₄(_lh_single'_LH_P2_1¹)))
//│ 	| _  => error⁰}
//│ def single'_lh_₂(_lh_single'_arg1⁰) = case _lh_single'_arg1⁰ of {
//│ 	LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₆(_lh_single'_LH_P2_0⁰) && single_lh_₂(_lh_single'_LH_P2_1⁰)) || (single_lh_₂(_lh_single'_LH_P2_0⁰) && null_lh_₆(_lh_single'_LH_P2_1⁰)))
//│ 	| _  => error⁰}
//│ def single_lh_₁(_lh_single_arg1¹) = case _lh_single_arg1¹ of {
//│ 	LH_C _lh_single_LH_C_0¹ _lh_single_LH_C_1¹ => case _lh_single_LH_C_1¹ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def single_lh_₂(_lh_single_arg1⁰) = case _lh_single_arg1⁰ of {
//│ 	LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def snd3_lh_₁(_lh_snd3_arg1⁰) = case _lh_snd3_arg1⁰ of {
//│ 	LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰
//│ 	| _  => error⁰}
//│ def splitAt_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) = [LH_P2 take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₂(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]
//│ def startr_lh_₁(_lh_startr_arg1⁰) = if (_lh_startr_arg1⁰ <= maxw_lh_₁) then [LH_P3 cons'_lh_₁([LH_P3 0 0 0], nil'_lh_₁) _lh_startr_arg1⁰ 1] else error⁰([LH_C 's' [LH_C 't' [LH_C 'a' [LH_C 'r' [LH_C 't' [LH_C 'r' [LH_C ' ' [LH_C 'p' [LH_C 'a' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]]]]]]])
//│ def stepr_lh_₁(_lh_stepr_arg1⁰, _lh_stepr_arg2⁰) = case _lh_stepr_arg2⁰ of {
//│ 	LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => 
//│ 		let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ 		in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ 		in let single⁰ = (fun p⁰ -> (len_tl_lh_₂(p⁰) == 0))
//│ 		in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh_₂(p¹)) - 1))
//│ 		in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh_₁(p²) + 
//│ 			let a³ = (optw_lh_₃ - width_hd⁰(p²))
//│ 			in (a³ * a³)))
//│ 		in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh_₁(p³)) - 1))
//│ 		in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₃(p⁴) + 
//│ 			let x¹ = (optw_lh_₁ - old_width_hd⁰(p⁴))
//│ 			in (x¹ * x¹)) _lh_stepr_LH_P3_2⁰])
//│ 		in let trim⁰ = (fun ps_pq⁰ -> if null'_lh_₁(ps_pq⁰) then ps_pq⁰ else if single'_lh_₁(ps_pq⁰) then ps_pq⁰ else 
//│ 			let ps_p⁰ = init'_lh_₁(ps_pq⁰)
//│ 			in let q⁰ = last'_lh_₂(ps_pq⁰)
//│ 			in let p⁵ = last'_lh_₅(ps_p⁰)
//│ 			in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ 		in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh_₂(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh_₃(ps_p¹)) > maxw_lh_₂) then drop_nofit⁰(init'_lh_₂(ps_p¹)) else ps_p¹)
//│ 		in let bf⁰ = (fun p⁶ -> (fun q¹ -> 
//│ 			let wqh⁰ = width_hd⁰(q¹)
//│ 			in let rqh⁰ = ((maxw_lh_₃ - wqh⁰) + 1)
//│ 			in if (single⁰(q¹) && (cost_tl_lh_₂(p⁶) == 0)) then min_lh_₂((optw_lh_₂ - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh_₁(ceildiv_lh_₁((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ 		in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh_₂(qr_rs⁰) || null'_lh_₃(qr_rs⁰)) then cons'_lh_₂(p⁷, qr_rs⁰) else 
//│ 			let q² = head'_lh_₂(qr_rs⁰)
//│ 			in let r_rs⁰ = tail'_lh_₁(qr_rs⁰)
//│ 			in let r⁰ = head'_lh_₁(r_rs⁰)
//│ 			in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh_₃(p⁷, qr_rs⁰)))
//│ 		in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₄(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]
//│ 	| _  => error⁰}
//│ def tail'_lh_₁(_lh_tail'_arg1⁰) = case _lh_tail'_arg1⁰ of {
//│ 	LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₆(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₂(_lh_tail'_LH_P2_0⁰) then 
//│ 		let _lh_matchIdent¹ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ 		in case _lh_matchIdent¹ of {
//│ 			LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]
//│ 			| _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]
//│ 	| _  => error⁰}
//│ def tail_lh_₁(ls⁴) = case ls⁴ of {
//│ 	LH_C h³ t³ => t³
//│ 	| LH_N  => error⁰}
//│ def take_lh_₁(n⁰, ls³) = if (n⁰ > 0) then case ls³ of {
//│ 	LH_C h² t² => [LH_C h² take_lh_₁((n⁰ - 1), t²)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPara_nofib_lh_₁(_lh_testPara_nofib_arg1⁰) = 
//│ 	let test⁰ = mappend_lh_₂(mappend_lh_₈(mappend_lh_₆(mappend_lh_₇(mappend_lh_₅(mappend_lh_₄(mappend_lh_₉(mappend_lh_₃(mappend_lh_₁(from_large_str⁰("In the constructive programming community it is commonplace to see "), from_large_str⁰("formal developments of textbook algorithms. In the algorithm design ")), from_large_str⁰("community, on the other hand, it may be well known that the textbook ")), from_large_str⁰("solution to a problem is not the most efficient possible. However, in ")), from_large_str⁰("presenting the more efficient solution, the algorithm designer will ")), from_large_str⁰("usually omit some of the implementation details, this creating an ")), from_large_str⁰("algorithm gap between the abstract algorithm and its concrete ")), from_large_str⁰("implementation. This is in contrast to the formal development, which ")), from_large_str⁰("usually presents the complete concrete implementation of the less ")), from_large_str⁰("efficient solution.| |"))
//│ 	in if null_lh_₁(test⁰) then [LH_N] else fmt_lh_₁(test⁰)
//│ def thd3_lh_₁(_lh_thd3_arg1¹) = case _lh_thd3_arg1¹ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0¹ _lh_thd3_LH_P3_1¹ _lh_thd3_LH_P3_2¹ => _lh_thd3_LH_P3_2¹
//│ 	| _  => error⁰}
//│ def thd3_lh_₂(_lh_thd3_arg1⁰) = case _lh_thd3_arg1⁰ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰
//│ 	| _  => error⁰}
//│ def tile_lh_₁(_lh_tile_arg1⁰, _lh_tile_arg2⁰) = case _lh_tile_arg2⁰ of {
//│ 	LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => 
//│ 			let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ 			in let _lh_matchIdent⁵ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ 			in case _lh_matchIdent⁵ of {
//│ 				LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def unformat_lh_₁(_lh_unformat_arg1⁰) = fold1_lh_₂((fun xs⁵ -> (fun ys⁵ -> mappend_lh_₁₆(mappend_lh_₁₅(xs⁵, [LH_C _lh_unformat_arg1⁰ [LH_N]]), ys⁵))), (fun x⁰ -> x⁰))
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = concat_lh_₂(map_lh_₆((fun l¹ -> mappend_lh_₁₁(l¹, [LH_C '|' [LH_N]])), _lh_unlines_arg1⁰))
//│ def unparas_lh_₁(_lh_unparas_arg1⁰) = unformat_lh_₁([LH_N], _lh_unparas_arg1⁰)
//│ def unparse_lh_₁(_lh_unparse_arg1⁰) = (fun _lh_funcomp_x⁵ -> (fun _lh_funcomp_x⁶ -> unlines_lh_₁(map_lh_₂(unwords_lh_₁, _lh_funcomp_x⁶)))(unparas_lh_₁(_lh_funcomp_x⁵)))(_lh_unparse_arg1⁰)
//│ def unwords_lh_₁(_lh_unwords_arg1⁰) = case _lh_unwords_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => 
//│ 		let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {
//│ 			LH_N  => [LH_N]
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => [LH_C ' ' mappend_lh_₁₃(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]
//│ 			| _  => error⁰})
//│ 		in mappend_lh_₁₂(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def width_tl_lh_₁(_lh_width_tl_arg1¹) = fst3_lh_₁(_lh_width_tl_arg1¹)
//│ def width_tl_lh_₂(_lh_width_tl_arg1⁰) = fst3_lh_₁(_lh_width_tl_arg1⁰)
//│ def words_lh_₁(_lh_words_arg1⁰) = 
//│ 	let _lh_matchIdent⁸ = dropWhile_lh_₁(isSpace_lh_₂, _lh_words_arg1⁰)
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => 
//│ 			let _lh_matchIdent⁹ = break_lh_₁(isSpace_lh_₁, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ 			in case _lh_matchIdent⁹ of {
//│ 				LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec mappend_lh__d3 xs_1_4 ys_1_4 =
//│ 		  (match xs_1_4 with
//│ 		    | `LH_C(h_3_2, t_3_2) -> 
//│ 		      (`LH_C(h_3_2, ((mappend_lh__d3 t_3_2) ys_1_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_4);;
//│ 		let rec mappend_lh__d1 xs_1_6 ys_1_6 =
//│ 		  (match xs_1_6 with
//│ 		    | `LH_C(h_3_4, t_3_4) -> 
//│ 		      (`LH_C(h_3_4, ((mappend_lh__d1 t_3_4) ys_1_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_6);;
//│ 		let rec mappend_lh__d8 xs_9 ys_9 =
//│ 		  (match xs_9 with
//│ 		    | `LH_C(h_2_7, t_2_7) -> 
//│ 		      (`LH_C(h_2_7, ((mappend_lh__d8 t_2_7) ys_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_9);;
//│ 		let rec maxw_lh__d1 =
//│ 		  70;;
//│ 		let rec null_lh__d3 _lh_null_arg1_3 =
//│ 		  (match _lh_null_arg1_3 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_3, _lh_null_LH_C_1_3) -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec cons'_lh__d1 _lh_cons'_arg1_2 _lh_cons'_arg2_2 =
//│ 		  (match _lh_cons'_arg2_2 with
//│ 		    | `LH_P2(_lh_cons'_LH_P2_0_2, _lh_cons'_LH_P2_1_2) -> 
//│ 		      (if (not (null_lh__d3 _lh_cons'_LH_P2_1_2)) then
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_2, _lh_cons'_LH_P2_0_2)), _lh_cons'_LH_P2_1_2))
//│ 		      else
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_2, (`LH_N))), _lh_cons'_LH_P2_0_2)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec nil'_lh__d1 =
//│ 		  (`LH_P2((`LH_N), (`LH_N)));;
//│ 		let rec startr_lh__d1 _lh_startr_arg1_0 =
//│ 		  (if (_lh_startr_arg1_0 <= maxw_lh__d1) then
//│ 		    (`LH_P3(((cons'_lh__d1 (`LH_P3(0, 0, 0))) nil'_lh__d1), _lh_startr_arg1_0, 1))
//│ 		  else
//│ 		    ((failwith "error") (`LH_C('s', (`LH_C('t', (`LH_C('a', (`LH_C('r', (`LH_C('t', (`LH_C('r', (`LH_C(' ', (`LH_C('p', (`LH_C('a', (`LH_C('r', (`LH_C('a', (`LH_C('m', (`LH_C(' ', (`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_N)))))))))))))))))))))))))))))))))))))));;
//│ 		let rec fst3_lh__d1 _lh_fst3_arg1_0 =
//│ 		  (match _lh_fst3_arg1_0 with
//│ 		    | `LH_P3(_lh_fst3_LH_P3_0_0, _lh_fst3_LH_P3_1_0, _lh_fst3_LH_P3_2_0) -> 
//│ 		      _lh_fst3_LH_P3_0_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec thd3_lh__d1 _lh_thd3_arg1_1 =
//│ 		  (match _lh_thd3_arg1_1 with
//│ 		    | `LH_P3(_lh_thd3_LH_P3_0_1, _lh_thd3_LH_P3_1_1, _lh_thd3_LH_P3_2_1) -> 
//│ 		      _lh_thd3_LH_P3_2_1
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec null_lh__d6 _lh_null_arg1_0 =
//│ 		  (match _lh_null_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_0, _lh_null_LH_C_1_0) -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec head_lh__d6 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      h_1
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec head'_lh__d1 _lh_head'_arg1_1 =
//│ 		  (match _lh_head'_arg1_1 with
//│ 		    | `LH_P2(_lh_head'_LH_P2_0_1, _lh_head'_LH_P2_1_1) -> 
//│ 		      (if (not (null_lh__d6 _lh_head'_LH_P2_0_1)) then
//│ 		        (head_lh__d6 _lh_head'_LH_P2_0_1)
//│ 		      else
//│ 		        (head_lh__d6 _lh_head'_LH_P2_1_1))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec cons'_lh__d2 _lh_cons'_arg1_1 _lh_cons'_arg2_1 =
//│ 		  (match _lh_cons'_arg2_1 with
//│ 		    | `LH_P2(_lh_cons'_LH_P2_0_1, _lh_cons'_LH_P2_1_1) -> 
//│ 		      (if (not (null_lh__d6 _lh_cons'_LH_P2_1_1)) then
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_1, _lh_cons'_LH_P2_0_1)), _lh_cons'_LH_P2_1_1))
//│ 		      else
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_1, (`LH_N))), _lh_cons'_LH_P2_0_1)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec snd3_lh__d1 _lh_snd3_arg1_0 =
//│ 		  (match _lh_snd3_arg1_0 with
//│ 		    | `LH_P3(_lh_snd3_LH_P3_0_0, _lh_snd3_LH_P3_1_0, _lh_snd3_LH_P3_2_0) -> 
//│ 		      _lh_snd3_LH_P3_1_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec cost_tl_lh__d3 _lh_cost_tl_arg1_0 =
//│ 		  (snd3_lh__d1 _lh_cost_tl_arg1_0);;
//│ 		let rec last'_lh__d3 _lh_last'_arg1_2 =
//│ 		  (match _lh_last'_arg1_2 with
//│ 		    | `LH_P2(_lh_last'_LH_P2_0_2, _lh_last'_LH_P2_1_2) -> 
//│ 		      (if (not (null_lh__d6 _lh_last'_LH_P2_1_2)) then
//│ 		        (head_lh__d6 _lh_last'_LH_P2_1_2)
//│ 		      else
//│ 		        (head_lh__d6 _lh_last'_LH_P2_0_2))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec width_tl_lh__d2 _lh_width_tl_arg1_0 =
//│ 		  (fst3_lh__d1 _lh_width_tl_arg1_0);;
//│ 		let rec maxw_lh__d3 =
//│ 		  70;;
//│ 		let rec null'_lh__d1 _lh_null'_arg1_2 =
//│ 		  (match _lh_null'_arg1_2 with
//│ 		    | `LH_P2(_lh_null'_LH_P2_0_2, _lh_null'_LH_P2_1_2) -> 
//│ 		      (match _lh_null'_LH_P2_0_2 with
//│ 		        | `LH_N -> 
//│ 		          (match _lh_null'_LH_P2_1_2 with
//│ 		            | `LH_N -> 
//│ 		              true
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec null'_lh__d3 _lh_null'_arg1_0 =
//│ 		  (match _lh_null'_arg1_0 with
//│ 		    | `LH_P2(_lh_null'_LH_P2_0_0, _lh_null'_LH_P2_1_0) -> 
//│ 		      (match _lh_null'_LH_P2_0_0 with
//│ 		        | `LH_N -> 
//│ 		          (match _lh_null'_LH_P2_1_0 with
//│ 		            | `LH_N -> 
//│ 		              true
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec drop_lh__d2 _lh_drop_arg1_0 _lh_drop_arg2_0 =
//│ 		  (match _lh_drop_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0) -> 
//│ 		      (if (_lh_drop_arg1_0 <= 0) then
//│ 		        (`LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0))
//│ 		      else
//│ 		        ((drop_lh__d2 (_lh_drop_arg1_0 - 1)) _lh_drop_LH_C_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec take_lh__d1 n_0 ls_3 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match ls_3 with
//│ 		      | `LH_C(h_2, t_2) -> 
//│ 		        (`LH_C(h_2, ((take_lh__d1 (n_0 - 1)) t_2)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec splitAt_lh__d1 _lh_splitAt_arg1_0 _lh_splitAt_arg2_0 =
//│ 		  (`LH_P2(((take_lh__d1 _lh_splitAt_arg1_0) _lh_splitAt_arg2_0), ((drop_lh__d2 _lh_splitAt_arg1_0) _lh_splitAt_arg2_0)));;
//│ 		let rec tail_lh__d1 ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      t_3
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec single_lh__d2 _lh_single_arg1_0 =
//│ 		  (match _lh_single_arg1_0 with
//│ 		    | `LH_C(_lh_single_LH_C_0_0, _lh_single_LH_C_1_0) -> 
//│ 		      (match _lh_single_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec length_lh__d1 ls_1_4 =
//│ 		  (match ls_1_4 with
//│ 		    | `LH_C(h_2_0, t_2_0) -> 
//│ 		      (1 + (length_lh__d1 t_2_0))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec reverse_helper_lh__d1 ls_0 a_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      ((reverse_helper_lh__d1 t_0) (`LH_C(h_0, a_0)))
//│ 		    | `LH_N -> 
//│ 		      a_0);;
//│ 		let rec reverse_lh__d1 ls_1 =
//│ 		  ((reverse_helper_lh__d1 ls_1) (`LH_N));;
//│ 		let rec init'_lh__d1 _lh_init'_arg1_1 =
//│ 		  (match _lh_init'_arg1_1 with
//│ 		    | `LH_P2(_lh_init'_LH_P2_0_2, _lh_init'_LH_P2_1_2) -> 
//│ 		      (if (null_lh__d6 _lh_init'_LH_P2_1_2) then
//│ 		        (`LH_P2((`LH_N), (`LH_N)))
//│ 		      else
//│ 		        (if (single_lh__d2 _lh_init'_LH_P2_1_2) then
//│ 		          (let rec _lh_matchIdent_2 = ((splitAt_lh__d1 ((length_lh__d1 _lh_init'_LH_P2_0_2) / 2)) _lh_init'_LH_P2_0_2) in
//│ 		            (match _lh_matchIdent_2 with
//│ 		              | `LH_P2(_lh_init'_LH_P2_0_3, _lh_init'_LH_P2_1_3) -> 
//│ 		                (`LH_P2(_lh_init'_LH_P2_0_3, (reverse_lh__d1 _lh_init'_LH_P2_1_3)))
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        else
//│ 		          (`LH_P2(_lh_init'_LH_P2_0_2, (tail_lh__d1 _lh_init'_LH_P2_1_2)))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec min_lh__d2 _lh_min_arg1_0 _lh_min_arg2_0 =
//│ 		  (if (_lh_min_arg1_0 > _lh_min_arg2_0) then
//│ 		    _lh_min_arg2_0
//│ 		  else
//│ 		    _lh_min_arg1_0);;
//│ 		let rec tail'_lh__d1 _lh_tail'_arg1_0 =
//│ 		  (match _lh_tail'_arg1_0 with
//│ 		    | `LH_P2(_lh_tail'_LH_P2_0_0, _lh_tail'_LH_P2_1_0) -> 
//│ 		      (if (null_lh__d6 _lh_tail'_LH_P2_0_0) then
//│ 		        (`LH_P2((`LH_N), (`LH_N)))
//│ 		      else
//│ 		        (if (single_lh__d2 _lh_tail'_LH_P2_0_0) then
//│ 		          (let rec _lh_matchIdent_1 = ((splitAt_lh__d1 ((length_lh__d1 _lh_tail'_LH_P2_1_0) / 2)) _lh_tail'_LH_P2_1_0) in
//│ 		            (match _lh_matchIdent_1 with
//│ 		              | `LH_P2(_lh_tail'_LH_P2_0_1, _lh_tail'_LH_P2_1_1) -> 
//│ 		                (`LH_P2((reverse_lh__d1 _lh_tail'_LH_P2_1_1), _lh_tail'_LH_P2_0_1))
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        else
//│ 		          (`LH_P2((tail_lh__d1 _lh_tail'_LH_P2_0_0), _lh_tail'_LH_P2_1_0))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec last'_lh__d5 _lh_last'_arg1_0 =
//│ 		  (match _lh_last'_arg1_0 with
//│ 		    | `LH_P2(_lh_last'_LH_P2_0_0, _lh_last'_LH_P2_1_0) -> 
//│ 		      (if (not (null_lh__d6 _lh_last'_LH_P2_1_0)) then
//│ 		        (head_lh__d6 _lh_last'_LH_P2_1_0)
//│ 		      else
//│ 		        (head_lh__d6 _lh_last'_LH_P2_0_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec head'_lh__d2 _lh_head'_arg1_0 =
//│ 		  (match _lh_head'_arg1_0 with
//│ 		    | `LH_P2(_lh_head'_LH_P2_0_0, _lh_head'_LH_P2_1_0) -> 
//│ 		      (if (not (null_lh__d6 _lh_head'_LH_P2_0_0)) then
//│ 		        (head_lh__d6 _lh_head'_LH_P2_0_0)
//│ 		      else
//│ 		        (head_lh__d6 _lh_head'_LH_P2_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec optw_lh__d3 =
//│ 		  63;;
//│ 		let rec last'_lh__d4 _lh_last'_arg1_1 =
//│ 		  (match _lh_last'_arg1_1 with
//│ 		    | `LH_P2(_lh_last'_LH_P2_0_1, _lh_last'_LH_P2_1_1) -> 
//│ 		      (if (not (null_lh__d6 _lh_last'_LH_P2_1_1)) then
//│ 		        (head_lh__d6 _lh_last'_LH_P2_1_1)
//│ 		      else
//│ 		        (head_lh__d6 _lh_last'_LH_P2_0_1))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec null'_lh__d2 _lh_null'_arg1_1 =
//│ 		  (match _lh_null'_arg1_1 with
//│ 		    | `LH_P2(_lh_null'_LH_P2_0_1, _lh_null'_LH_P2_1_1) -> 
//│ 		      (match _lh_null'_LH_P2_0_1 with
//│ 		        | `LH_N -> 
//│ 		          (match _lh_null'_LH_P2_1_1 with
//│ 		            | `LH_N -> 
//│ 		              true
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec single_lh__d1 _lh_single_arg1_1 =
//│ 		  (match _lh_single_arg1_1 with
//│ 		    | `LH_C(_lh_single_LH_C_0_1, _lh_single_LH_C_1_1) -> 
//│ 		      (match _lh_single_LH_C_1_1 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec null_lh__d4 _lh_null_arg1_2 =
//│ 		  (match _lh_null_arg1_2 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_2, _lh_null_LH_C_1_2) -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec null_lh__d5 _lh_null_arg1_1 =
//│ 		  (match _lh_null_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_1, _lh_null_LH_C_1_1) -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec single'_lh__d1 _lh_single'_arg1_1 =
//│ 		  (match _lh_single'_arg1_1 with
//│ 		    | `LH_P2(_lh_single'_LH_P2_0_1, _lh_single'_LH_P2_1_1) -> 
//│ 		      (((null_lh__d5 _lh_single'_LH_P2_0_1) && (single_lh__d2 _lh_single'_LH_P2_1_1)) || ((single_lh__d1 _lh_single'_LH_P2_0_1) && (null_lh__d4 _lh_single'_LH_P2_1_1)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec width_tl_lh__d1 _lh_width_tl_arg1_1 =
//│ 		  (fst3_lh__d1 _lh_width_tl_arg1_1);;
//│ 		let rec optw_lh__d2 =
//│ 		  63;;
//│ 		let rec cost_tl_lh__d2 _lh_cost_tl_arg1_1 =
//│ 		  (snd3_lh__d1 _lh_cost_tl_arg1_1);;
//│ 		let rec ceildiv_lh__d1 _lh_ceildiv_arg1_0 _lh_ceildiv_arg2_0 =
//│ 		  (((_lh_ceildiv_arg1_0 + _lh_ceildiv_arg2_0) - 1) / _lh_ceildiv_arg2_0);;
//│ 		let rec single'_lh__d2 _lh_single'_arg1_0 =
//│ 		  (match _lh_single'_arg1_0 with
//│ 		    | `LH_P2(_lh_single'_LH_P2_0_0, _lh_single'_LH_P2_1_0) -> 
//│ 		      (((null_lh__d6 _lh_single'_LH_P2_0_0) && (single_lh__d2 _lh_single'_LH_P2_1_0)) || ((single_lh__d2 _lh_single'_LH_P2_0_0) && (null_lh__d6 _lh_single'_LH_P2_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec cons'_lh__d3 _lh_cons'_arg1_0 _lh_cons'_arg2_0 =
//│ 		  (match _lh_cons'_arg2_0 with
//│ 		    | `LH_P2(_lh_cons'_LH_P2_0_0, _lh_cons'_LH_P2_1_0) -> 
//│ 		      (if (not (null_lh__d6 _lh_cons'_LH_P2_1_0)) then
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_0, _lh_cons'_LH_P2_0_0)), _lh_cons'_LH_P2_1_0))
//│ 		      else
//│ 		        (`LH_P2((`LH_C(_lh_cons'_arg1_0, (`LH_N))), _lh_cons'_LH_P2_0_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec init'_lh__d2 _lh_init'_arg1_0 =
//│ 		  (match _lh_init'_arg1_0 with
//│ 		    | `LH_P2(_lh_init'_LH_P2_0_0, _lh_init'_LH_P2_1_0) -> 
//│ 		      (if (null_lh__d6 _lh_init'_LH_P2_1_0) then
//│ 		        (`LH_P2((`LH_N), (`LH_N)))
//│ 		      else
//│ 		        (if (single_lh__d2 _lh_init'_LH_P2_1_0) then
//│ 		          (let rec _lh_matchIdent_0 = ((splitAt_lh__d1 ((length_lh__d1 _lh_init'_LH_P2_0_0) / 2)) _lh_init'_LH_P2_0_0) in
//│ 		            (match _lh_matchIdent_0 with
//│ 		              | `LH_P2(_lh_init'_LH_P2_0_1, _lh_init'_LH_P2_1_1) -> 
//│ 		                (`LH_P2(_lh_init'_LH_P2_0_1, (reverse_lh__d1 _lh_init'_LH_P2_1_1)))
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        else
//│ 		          (`LH_P2(_lh_init'_LH_P2_0_0, (tail_lh__d1 _lh_init'_LH_P2_1_0)))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec maxw_lh__d2 =
//│ 		  70;;
//│ 		let rec cost_tl_lh__d1 _lh_cost_tl_arg1_2 =
//│ 		  (snd3_lh__d1 _lh_cost_tl_arg1_2);;
//│ 		let rec optw_lh__d1 =
//│ 		  63;;
//│ 		let rec min_lh__d1 _lh_min_arg1_1 _lh_min_arg2_1 =
//│ 		  (if (_lh_min_arg1_1 > _lh_min_arg2_1) then
//│ 		    _lh_min_arg2_1
//│ 		  else
//│ 		    _lh_min_arg1_1);;
//│ 		let rec last'_lh__d2 _lh_last'_arg1_3 =
//│ 		  (match _lh_last'_arg1_3 with
//│ 		    | `LH_P2(_lh_last'_LH_P2_0_3, _lh_last'_LH_P2_1_3) -> 
//│ 		      (if (not (null_lh__d6 _lh_last'_LH_P2_1_3)) then
//│ 		        (head_lh__d6 _lh_last'_LH_P2_1_3)
//│ 		      else
//│ 		        (head_lh__d6 _lh_last'_LH_P2_0_3))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec thd3_lh__d2 _lh_thd3_arg1_0 =
//│ 		  (match _lh_thd3_arg1_0 with
//│ 		    | `LH_P3(_lh_thd3_LH_P3_0_0, _lh_thd3_LH_P3_1_0, _lh_thd3_LH_P3_2_0) -> 
//│ 		      _lh_thd3_LH_P3_2_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec len_tl_lh__d2 _lh_len_tl_arg1_0 =
//│ 		  (thd3_lh__d2 _lh_len_tl_arg1_0);;
//│ 		let rec stepr_lh__d1 _lh_stepr_arg1_0 _lh_stepr_arg2_0 =
//│ 		  (match _lh_stepr_arg2_0 with
//│ 		    | `LH_P3(_lh_stepr_LH_P3_0_0, _lh_stepr_LH_P3_1_0, _lh_stepr_LH_P3_2_0) -> 
//│ 		      (let rec tot_width_0 = ((_lh_stepr_arg1_0 + 1) + _lh_stepr_LH_P3_1_0) in
//│ 		        (let rec tot_len_0 = (1 + _lh_stepr_LH_P3_2_0) in
//│ 		          (let rec single_0 = (fun p_0 -> 
//│ 		            ((len_tl_lh__d2 p_0) = 0)) in
//│ 		            (let rec width_hd_0 = (fun p_1 -> 
//│ 		              (if (single_0 p_1) then
//│ 		                tot_width_0
//│ 		              else
//│ 		                ((tot_width_0 - (width_tl_lh__d2 p_1)) - 1))) in
//│ 		              (let rec cost_0 = (fun p_2 -> 
//│ 		                (if (single_0 p_2) then
//│ 		                  0
//│ 		                else
//│ 		                  ((cost_tl_lh__d1 p_2) + (let rec a_3 = (optw_lh__d3 - (width_hd_0 p_2)) in
//│ 		                    (a_3 * a_3))))) in
//│ 		                (let rec old_width_hd_0 = (fun p_3 -> 
//│ 		                  (if (single_0 p_3) then
//│ 		                    _lh_stepr_LH_P3_1_0
//│ 		                  else
//│ 		                    ((_lh_stepr_LH_P3_1_0 - (width_tl_lh__d1 p_3)) - 1))) in
//│ 		                  (let rec new_0 = (fun p_4 -> 
//│ 		                    (if (single_0 p_4) then
//│ 		                      (`LH_P3(_lh_stepr_LH_P3_1_0, 0, _lh_stepr_LH_P3_2_0))
//│ 		                    else
//│ 		                      (`LH_P3(_lh_stepr_LH_P3_1_0, ((cost_tl_lh__d3 p_4) + (let rec x_1 = (optw_lh__d1 - (old_width_hd_0 p_4)) in
//│ 		                        (x_1 * x_1))), _lh_stepr_LH_P3_2_0)))) in
//│ 		                    (let rec trim_0 = (fun ps_pq_0 -> 
//│ 		                      (if (null'_lh__d1 ps_pq_0) then
//│ 		                        ps_pq_0
//│ 		                      else
//│ 		                        (if (single'_lh__d1 ps_pq_0) then
//│ 		                          ps_pq_0
//│ 		                        else
//│ 		                          (let rec ps_p_0 = (init'_lh__d1 ps_pq_0) in
//│ 		                            (let rec q_0 = (last'_lh__d2 ps_pq_0) in
//│ 		                              (let rec p_5 = (last'_lh__d5 ps_p_0) in
//│ 		                                (if ((cost_0 p_5) <= (cost_0 q_0)) then
//│ 		                                  (trim_0 ps_p_0)
//│ 		                                else
//│ 		                                  ps_pq_0))))))) in
//│ 		                      (let rec drop_nofit_0 = (fun ps_p_1 -> 
//│ 		                        (if (null'_lh__d2 ps_p_1) then
//│ 		                          ps_p_1
//│ 		                        else
//│ 		                          (if ((width_hd_0 (last'_lh__d3 ps_p_1)) > maxw_lh__d2) then
//│ 		                            (drop_nofit_0 (init'_lh__d2 ps_p_1))
//│ 		                          else
//│ 		                            ps_p_1))) in
//│ 		                        (let rec bf_0 = (fun p_6 q_1 -> 
//│ 		                          (let rec wqh_0 = (width_hd_0 q_1) in
//│ 		                            (let rec rqh_0 = ((maxw_lh__d3 - wqh_0) + 1) in
//│ 		                              (if ((single_0 q_1) && ((cost_tl_lh__d2 p_6) = 0)) then
//│ 		                                ((min_lh__d2 (optw_lh__d2 - (width_hd_0 p_6))) rqh_0)
//│ 		                              else
//│ 		                                (if (single_0 q_1) then
//│ 		                                  rqh_0
//│ 		                                else
//│ 		                                  ((min_lh__d1 ((ceildiv_lh__d1 ((cost_0 p_6) - (cost_0 q_1))) (2 * (wqh_0 - (width_hd_0 p_6))))) rqh_0)))))) in
//│ 		                          (let rec myAdd_0 = (fun p_7 qr_rs_0 -> 
//│ 		                            (if ((single'_lh__d2 qr_rs_0) || (null'_lh__d3 qr_rs_0)) then
//│ 		                              ((cons'_lh__d2 p_7) qr_rs_0)
//│ 		                            else
//│ 		                              (let rec q_2 = (head'_lh__d2 qr_rs_0) in
//│ 		                                (let rec r_rs_0 = (tail'_lh__d1 qr_rs_0) in
//│ 		                                  (let rec r_0 = (head'_lh__d1 r_rs_0) in
//│ 		                                    (if (((bf_0 p_7) q_2) <= ((bf_0 q_2) r_0)) then
//│ 		                                      ((myAdd_0 p_7) r_rs_0)
//│ 		                                    else
//│ 		                                      ((cons'_lh__d3 p_7) qr_rs_0))))))) in
//│ 		                            (`LH_P3((trim_0 (drop_nofit_0 ((myAdd_0 (new_0 (last'_lh__d4 _lh_stepr_LH_P3_0_0))) _lh_stepr_LH_P3_0_0))), tot_width_0, tot_len_0)))))))))))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec fold1_lh__d1 _lh_fold1_arg1_2 _lh_fold1_arg2_2 _lh_fold1_arg3_2 =
//│ 		  (match _lh_fold1_arg3_2 with
//│ 		    | `LH_C(_lh_fold1_LH_C_0_2, _lh_fold1_LH_C_1_2) -> 
//│ 		      (match _lh_fold1_LH_C_1_2 with
//│ 		        | `LH_N -> 
//│ 		          (_lh_fold1_arg2_2 _lh_fold1_LH_C_0_2)
//│ 		        | _ -> 
//│ 		          ((_lh_fold1_arg1_2 _lh_fold1_LH_C_0_2) (((fold1_lh__d1 _lh_fold1_arg1_2) _lh_fold1_arg2_2) _lh_fold1_LH_C_1_2)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec head_lh__d4 ls_6 =
//│ 		  (match ls_6 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      h_8
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec scan1_lh__d1 _lh_scan1_arg1_0 _lh_scan1_arg2_0 =
//│ 		  ((fold1_lh__d1 (fun a_1 s_0 -> 
//│ 		    (`LH_C(((_lh_scan1_arg1_0 a_1) (head_lh__d4 s_0)), s_0)))) (fun a_2 -> 
//│ 		    (`LH_C((_lh_scan1_arg2_0 a_2), (`LH_N)))));;
//│ 		let rec len_tl_lh__d1 _lh_len_tl_arg1_1 =
//│ 		  (thd3_lh__d2 _lh_len_tl_arg1_1);;
//│ 		let rec map_lh__d4 f_3 ls_1_3 =
//│ 		  (match ls_1_3 with
//│ 		    | `LH_C(h_1_9, t_1_9) -> 
//│ 		      (`LH_C((f_3 h_1_9), ((map_lh__d4 f_3) t_1_9)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec head_lh__d1 ls_1_2 =
//│ 		  (match ls_1_2 with
//│ 		    | `LH_C(h_1_8, t_1_8) -> 
//│ 		      h_1_8
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec null_lh__d2 _lh_null_arg1_4 =
//│ 		  (match _lh_null_arg1_4 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_4, _lh_null_LH_C_1_4) -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec head_lh__d3 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_9, t_9) -> 
//│ 		      h_9
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec head_lh__d2 ls_8 =
//│ 		  (match ls_8 with
//│ 		    | `LH_C(h_1_0, t_1_0) -> 
//│ 		      h_1_0
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec last'_lh__d1 _lh_last'_arg1_4 =
//│ 		  (match _lh_last'_arg1_4 with
//│ 		    | `LH_P2(_lh_last'_LH_P2_0_4, _lh_last'_LH_P2_1_4) -> 
//│ 		      (if (not (null_lh__d2 _lh_last'_LH_P2_1_4)) then
//│ 		        (head_lh__d2 _lh_last'_LH_P2_1_4)
//│ 		      else
//│ 		        (head_lh__d3 _lh_last'_LH_P2_0_4))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec drop_lh__d1 _lh_drop_arg1_1 _lh_drop_arg2_1 =
//│ 		  (match _lh_drop_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_drop_LH_C_0_1, _lh_drop_LH_C_1_1) -> 
//│ 		      (if (_lh_drop_arg1_1 <= 0) then
//│ 		        (`LH_C(_lh_drop_LH_C_0_1, _lh_drop_LH_C_1_1))
//│ 		      else
//│ 		        ((drop_lh__d1 (_lh_drop_arg1_1 - 1)) _lh_drop_LH_C_1_1))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec tile_lh__d1 _lh_tile_arg1_0 _lh_tile_arg2_0 =
//│ 		  (match _lh_tile_arg2_0 with
//│ 		    | `LH_P2(_lh_tile_LH_P2_0_0, _lh_tile_LH_P2_1_0) -> 
//│ 		      (match _lh_tile_LH_P2_0_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_N)
//│ 		        | `LH_C(_lh_tile_LH_C_0_0, _lh_tile_LH_C_1_0) -> 
//│ 		          (let rec l_0 = (_lh_tile_LH_P2_1_0 - _lh_tile_LH_C_0_0) in
//│ 		            (let rec _lh_matchIdent_5 = ((splitAt_lh__d1 l_0) _lh_tile_arg1_0) in
//│ 		              (match _lh_matchIdent_5 with
//│ 		                | `LH_P2(_lh_tile_LH_P2_0_1, _lh_tile_LH_P2_1_1) -> 
//│ 		                  (`LH_C(_lh_tile_LH_P2_0_1, ((tile_lh__d1 _lh_tile_LH_P2_1_1) (`LH_P2(((drop_lh__d1 l_0) (`LH_C(_lh_tile_LH_C_0_0, _lh_tile_LH_C_1_0))), _lh_tile_LH_C_0_0)))))
//│ 		                | _ -> 
//│ 		                  (failwith "error"))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec map_lh__d5 f_2 ls_1_1 =
//│ 		  (match ls_1_1 with
//│ 		    | `LH_C(h_1_7, t_1_7) -> 
//│ 		      (`LH_C((f_2 h_1_7), ((map_lh__d5 f_2) t_1_7)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec par3_lh__d1 _lh_par3_arg1_0 =
//│ 		  (let rec zs_0 = (((scan1_lh__d1 stepr_lh__d1) startr_lh__d1) ((map_lh__d5 length_lh__d1) _lh_par3_arg1_0)) in
//│ 		    ((tile_lh__d1 _lh_par3_arg1_0) (`LH_P2(((map_lh__d4 (fun _lh_funcomp_x_1 -> 
//│ 		      ((fun _lh_funcomp_x_2 -> 
//│ 		        (len_tl_lh__d1 (last'_lh__d1 _lh_funcomp_x_2))) (fst3_lh__d1 _lh_funcomp_x_1)))) zs_0), (thd3_lh__d1 (head_lh__d1 zs_0))))));;
//│ 		let rec dropWhile_lh__d1 _lh_dropWhile_arg1_0 _lh_dropWhile_arg2_0 =
//│ 		  (match _lh_dropWhile_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_dropWhile_LH_C_0_0, _lh_dropWhile_LH_C_1_0) -> 
//│ 		      (if (_lh_dropWhile_arg1_0 _lh_dropWhile_LH_C_0_0) then
//│ 		        ((dropWhile_lh__d1 _lh_dropWhile_arg1_0) _lh_dropWhile_LH_C_1_0)
//│ 		      else
//│ 		        (`LH_C(_lh_dropWhile_LH_C_0_0, _lh_dropWhile_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec isSpace_lh__d1 _lh_isSpace_arg1_1 =
//│ 		  (_lh_isSpace_arg1_1 = ' ');;
//│ 		let rec isSpace_lh__d2 _lh_isSpace_arg1_0 =
//│ 		  (_lh_isSpace_arg1_0 = ' ');;
//│ 		let rec break_lh__d1 _lh_break_arg1_2 _lh_break_arg2_2 =
//│ 		  (match _lh_break_arg2_2 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2((`LH_N), (`LH_N)))
//│ 		    | `LH_C(_lh_break_LH_C_0_1, _lh_break_LH_C_1_1) -> 
//│ 		      (if (_lh_break_arg1_2 _lh_break_LH_C_0_1) then
//│ 		        (`LH_P2((`LH_N), (`LH_C(_lh_break_LH_C_0_1, _lh_break_LH_C_1_1))))
//│ 		      else
//│ 		        (let rec _lh_matchIdent_4 = ((break_lh__d1 _lh_break_arg1_2) _lh_break_LH_C_1_1) in
//│ 		          (match _lh_matchIdent_4 with
//│ 		            | `LH_P2(_lh_break_LH_P2_0_1, _lh_break_LH_P2_1_1) -> 
//│ 		              (`LH_P2((`LH_C(_lh_break_LH_C_0_1, _lh_break_LH_P2_0_1)), _lh_break_LH_P2_1_1))
//│ 		            | _ -> 
//│ 		              (failwith "error"))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec words_lh__d1 _lh_words_arg1_0 =
//│ 		  (let rec _lh_matchIdent_8 = ((dropWhile_lh__d1 isSpace_lh__d2) _lh_words_arg1_0) in
//│ 		    (match _lh_matchIdent_8 with
//│ 		      | `LH_N -> 
//│ 		        (`LH_N)
//│ 		      | `LH_C(_lh_words_LH_C_0_0, _lh_words_LH_C_1_0) -> 
//│ 		        (let rec _lh_matchIdent_9 = ((break_lh__d1 isSpace_lh__d1) (`LH_C(_lh_words_LH_C_0_0, _lh_words_LH_C_1_0))) in
//│ 		          (match _lh_matchIdent_9 with
//│ 		            | `LH_P2(_lh_words_LH_P2_0_0, _lh_words_LH_P2_1_0) -> 
//│ 		              (`LH_C(_lh_words_LH_P2_0_0, (words_lh__d1 _lh_words_LH_P2_1_0)))
//│ 		            | _ -> 
//│ 		              (failwith "error")))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec filter_lh__d1 f_0 ls_9 =
//│ 		  (match ls_9 with
//│ 		    | `LH_C(h_1_1, t_1_1) -> 
//│ 		      (if (f_0 h_1_1) then
//│ 		        (`LH_C(h_1_1, ((filter_lh__d1 f_0) t_1_1)))
//│ 		      else
//│ 		        ((filter_lh__d1 f_0) t_1_1))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec head_lh__d5 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      h_4
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec fold1_lh__d3 _lh_fold1_arg1_0 _lh_fold1_arg2_0 _lh_fold1_arg3_0 =
//│ 		  (match _lh_fold1_arg3_0 with
//│ 		    | `LH_C(_lh_fold1_LH_C_0_0, _lh_fold1_LH_C_1_0) -> 
//│ 		      (match _lh_fold1_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (_lh_fold1_arg2_0 _lh_fold1_LH_C_0_0)
//│ 		        | _ -> 
//│ 		          ((_lh_fold1_arg1_0 _lh_fold1_LH_C_0_0) (((fold1_lh__d3 _lh_fold1_arg1_0) _lh_fold1_arg2_0) _lh_fold1_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec format_lh__d1 _lh_format_arg1_0 _lh_format_arg2_0 =
//│ 		  (match _lh_format_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_C((`LH_N), (`LH_N)))
//│ 		    | _ -> 
//│ 		      let rec break_0 = (fun _lh_break_arg1_0 _lh_break_arg2_0 _lh_break_arg3_0 -> 
//│ 		        (if (_lh_break_arg1_0 = _lh_break_arg2_0) then
//│ 		          (`LH_C((`LH_N), _lh_break_arg3_0))
//│ 		        else
//│ 		          (`LH_C((`LH_C(_lh_break_arg2_0, (head_lh__d5 _lh_break_arg3_0))), (tail_lh__d1 _lh_break_arg3_0)))))
//│ 		      and start_0 = (fun _lh_start_arg1_0 _lh_start_arg2_0 -> 
//│ 		        (((break_0 _lh_start_arg1_0) _lh_start_arg2_0) (`LH_C((`LH_N), (`LH_N)))))
//│ 		      in (((fold1_lh__d3 (break_0 _lh_format_arg1_0)) (start_0 _lh_format_arg1_0)) _lh_format_arg2_0));;
//│ 		let rec paras_lh__d1 _lh_paras_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_0 -> 
//│ 		    ((filter_lh__d1 (fun x_2 -> 
//│ 		      ((`LH_N) <> x_2))) ((format_lh__d1 (`LH_N)) _lh_funcomp_x_0))) _lh_paras_arg1_0);;
//│ 		let rec map_lh__d3 f_4 ls_1_5 =
//│ 		  (match ls_1_5 with
//│ 		    | `LH_C(h_2_1, t_2_1) -> 
//│ 		      (`LH_C((f_4 h_2_1), ((map_lh__d3 f_4) t_2_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec break_lh__d2 _lh_break_arg1_1 _lh_break_arg2_1 =
//│ 		  (match _lh_break_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2((`LH_N), (`LH_N)))
//│ 		    | `LH_C(_lh_break_LH_C_0_0, _lh_break_LH_C_1_0) -> 
//│ 		      (if (_lh_break_arg1_1 _lh_break_LH_C_0_0) then
//│ 		        (`LH_P2((`LH_N), (`LH_C(_lh_break_LH_C_0_0, _lh_break_LH_C_1_0))))
//│ 		      else
//│ 		        (let rec _lh_matchIdent_3 = ((break_lh__d2 _lh_break_arg1_1) _lh_break_LH_C_1_0) in
//│ 		          (match _lh_matchIdent_3 with
//│ 		            | `LH_P2(_lh_break_LH_P2_0_0, _lh_break_LH_P2_1_0) -> 
//│ 		              (`LH_P2((`LH_C(_lh_break_LH_C_0_0, _lh_break_LH_P2_0_0)), _lh_break_LH_P2_1_0))
//│ 		            | _ -> 
//│ 		              (failwith "error"))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec lines_lh__d1 _lh_lines_arg1_0 =
//│ 		  (let rec _lh_matchIdent_6 = ((break_lh__d2 (fun x_3 -> 
//│ 		    (x_3 = '|'))) _lh_lines_arg1_0) in
//│ 		    (match _lh_matchIdent_6 with
//│ 		      | `LH_P2(_lh_lines_LH_P2_0_0, _lh_lines_LH_P2_1_0) -> 
//│ 		        (`LH_C(_lh_lines_LH_P2_0_0, (let rec _lh_matchIdent_7 = _lh_lines_LH_P2_1_0 in
//│ 		          (match _lh_matchIdent_7 with
//│ 		            | `LH_N -> 
//│ 		              (`LH_N)
//│ 		            | `LH_C(_lh_lines_LH_C_0_0, _lh_lines_LH_C_1_0) -> 
//│ 		              (lines_lh__d1 _lh_lines_LH_C_1_0)
//│ 		            | _ -> 
//│ 		              (failwith "error")))))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec parse_lh__d1 _lh_parse_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_3 -> 
//│ 		    ((fun _lh_funcomp_x_4 -> 
//│ 		      (paras_lh__d1 ((map_lh__d3 words_lh__d1) _lh_funcomp_x_4))) (lines_lh__d1 _lh_funcomp_x_3))) _lh_parse_arg1_0);;
//│ 		let rec mappend_lh__d1_d6 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      (`LH_C(h_5, ((mappend_lh__d1_d6 t_5) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec fold1_lh__d2 _lh_fold1_arg1_1 _lh_fold1_arg2_1 _lh_fold1_arg3_1 =
//│ 		  (match _lh_fold1_arg3_1 with
//│ 		    | `LH_C(_lh_fold1_LH_C_0_1, _lh_fold1_LH_C_1_1) -> 
//│ 		      (match _lh_fold1_LH_C_1_1 with
//│ 		        | `LH_N -> 
//│ 		          (_lh_fold1_arg2_1 _lh_fold1_LH_C_0_1)
//│ 		        | _ -> 
//│ 		          ((_lh_fold1_arg1_1 _lh_fold1_LH_C_0_1) (((fold1_lh__d2 _lh_fold1_arg1_1) _lh_fold1_arg2_1) _lh_fold1_LH_C_1_1)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mappend_lh__d1_d5 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      (`LH_C(h_6, ((mappend_lh__d1_d5 t_6) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec unformat_lh__d1 _lh_unformat_arg1_0 =
//│ 		  ((fold1_lh__d2 (fun xs_5 ys_5 -> 
//│ 		    ((mappend_lh__d1_d6 ((mappend_lh__d1_d5 xs_5) (`LH_C(_lh_unformat_arg1_0, (`LH_N))))) ys_5))) (fun x_0 -> 
//│ 		    x_0));;
//│ 		let rec unparas_lh__d1 _lh_unparas_arg1_0 =
//│ 		  ((unformat_lh__d1 (`LH_N)) _lh_unparas_arg1_0);;
//│ 		let rec mappend_lh__d1_d3 xs_3 ys_3 =
//│ 		  (match xs_3 with
//│ 		    | `LH_C(h_1_2, t_1_2) -> 
//│ 		      (`LH_C(h_1_2, ((mappend_lh__d1_d3 t_1_2) ys_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_3);;
//│ 		let rec mappend_lh__d1_d2 xs_4 ys_4 =
//│ 		  (match xs_4 with
//│ 		    | `LH_C(h_1_3, t_1_3) -> 
//│ 		      (`LH_C(h_1_3, ((mappend_lh__d1_d2 t_1_3) ys_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_4);;
//│ 		let rec unwords_lh__d1 _lh_unwords_arg1_0 =
//│ 		  (match _lh_unwords_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_unwords_LH_C_0_0, _lh_unwords_LH_C_1_0) -> 
//│ 		      (let rec go_0 = (fun _lh_go_arg1_0 -> 
//│ 		        (match _lh_go_arg1_0 with
//│ 		          | `LH_N -> 
//│ 		            (`LH_N)
//│ 		          | `LH_C(_lh_go_LH_C_0_0, _lh_go_LH_C_1_0) -> 
//│ 		            (`LH_C(' ', ((mappend_lh__d1_d3 _lh_go_LH_C_0_0) (go_0 _lh_go_LH_C_1_0))))
//│ 		          | _ -> 
//│ 		            (failwith "error"))) in
//│ 		        ((mappend_lh__d1_d2 _lh_unwords_LH_C_0_0) (go_0 _lh_unwords_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec map_lh__d2 f_5 ls_1_6 =
//│ 		  (match ls_1_6 with
//│ 		    | `LH_C(h_2_2, t_2_2) -> 
//│ 		      (`LH_C((f_5 h_2_2), ((map_lh__d2 f_5) t_2_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh__d1_d4 xs_2 ys_2 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      (`LH_C(h_7, ((mappend_lh__d1_d4 t_7) ys_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2);;
//│ 		let rec concat_lh__d2 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_1_6, t_1_6) -> 
//│ 		      ((mappend_lh__d1_d4 h_1_6) (concat_lh__d2 t_1_6))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh__d1_d1 xs_6 ys_6 =
//│ 		  (match xs_6 with
//│ 		    | `LH_C(h_1_5, t_1_5) -> 
//│ 		      (`LH_C(h_1_5, ((mappend_lh__d1_d1 t_1_5) ys_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_6);;
//│ 		let rec map_lh__d6 f_1 ls_1_0 =
//│ 		  (match ls_1_0 with
//│ 		    | `LH_C(h_1_4, t_1_4) -> 
//│ 		      (`LH_C((f_1 h_1_4), ((map_lh__d6 f_1) t_1_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec unlines_lh__d1 _lh_unlines_arg1_0 =
//│ 		  (concat_lh__d2 ((map_lh__d6 (fun l_1 -> 
//│ 		    ((mappend_lh__d1_d1 l_1) (`LH_C('|', (`LH_N)))))) _lh_unlines_arg1_0));;
//│ 		let rec unparse_lh__d1 _lh_unparse_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_5 -> 
//│ 		    ((fun _lh_funcomp_x_6 -> 
//│ 		      (unlines_lh__d1 ((map_lh__d2 unwords_lh__d1) _lh_funcomp_x_6))) (unparas_lh__d1 _lh_funcomp_x_5))) _lh_unparse_arg1_0);;
//│ 		let rec map_lh__d1 f_6 ls_1_7 =
//│ 		  (match ls_1_7 with
//│ 		    | `LH_C(h_2_4, t_2_4) -> 
//│ 		      (`LH_C((f_6 h_2_4), ((map_lh__d1 f_6) t_2_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh__d1_d0 xs_7 ys_7 =
//│ 		  (match xs_7 with
//│ 		    | `LH_C(h_2_3, t_2_3) -> 
//│ 		      (`LH_C(h_2_3, ((mappend_lh__d1_d0 t_2_3) ys_7)))
//│ 		    | `LH_N -> 
//│ 		      ys_7);;
//│ 		let rec concat_lh__d1 lss_1 =
//│ 		  (match lss_1 with
//│ 		    | `LH_C(h_2_5, t_2_5) -> 
//│ 		      ((mappend_lh__d1_d0 h_2_5) (concat_lh__d1 t_2_5))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec fmt_lh__d1 _lh_fmt_arg1_0 =
//│ 		  ((fun _lh_funcomp_x_7 -> 
//│ 		    ((fun _lh_funcomp_x_8 -> 
//│ 		      (unparse_lh__d1 ((map_lh__d1 (fun _lh_funcomp_x_9 -> 
//│ 		        (par3_lh__d1 (concat_lh__d1 _lh_funcomp_x_9)))) _lh_funcomp_x_8))) (parse_lh__d1 _lh_funcomp_x_7))) _lh_fmt_arg1_0);;
//│ 		let rec mappend_lh__d5 xs_1_2 ys_1_2 =
//│ 		  (match xs_1_2 with
//│ 		    | `LH_C(h_3_0, t_3_0) -> 
//│ 		      (`LH_C(h_3_0, ((mappend_lh__d5 t_3_0) ys_1_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_2);;
//│ 		let rec mappend_lh__d6 xs_1_1 ys_1_1 =
//│ 		  (match xs_1_1 with
//│ 		    | `LH_C(h_2_9, t_2_9) -> 
//│ 		      (`LH_C(h_2_9, ((mappend_lh__d6 t_2_9) ys_1_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_1);;
//│ 		let rec mappend_lh__d4 xs_1_3 ys_1_3 =
//│ 		  (match xs_1_3 with
//│ 		    | `LH_C(h_3_1, t_3_1) -> 
//│ 		      (`LH_C(h_3_1, ((mappend_lh__d4 t_3_1) ys_1_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_3);;
//│ 		let rec mappend_lh__d9 xs_8 ys_8 =
//│ 		  (match xs_8 with
//│ 		    | `LH_C(h_2_6, t_2_6) -> 
//│ 		      (`LH_C(h_2_6, ((mappend_lh__d9 t_2_6) ys_8)))
//│ 		    | `LH_N -> 
//│ 		      ys_8);;
//│ 		let rec null_lh__d1 _lh_null_arg1_5 =
//│ 		  (match _lh_null_arg1_5 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_5, _lh_null_LH_C_1_5) -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mappend_lh__d7 xs_1_0 ys_1_0 =
//│ 		  (match xs_1_0 with
//│ 		    | `LH_C(h_2_8, t_2_8) -> 
//│ 		      (`LH_C(h_2_8, ((mappend_lh__d7 t_2_8) ys_1_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_0);;
//│ 		let rec mappend_lh__d2 xs_1_5 ys_1_5 =
//│ 		  (match xs_1_5 with
//│ 		    | `LH_C(h_3_3, t_3_3) -> 
//│ 		      (`LH_C(h_3_3, ((mappend_lh__d2 t_3_3) ys_1_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_5);;
//│ 		let rec testPara_nofib_lh__d1 _lh_testPara_nofib_arg1_0 =
//│ 		  (let rec test_0 = ((mappend_lh__d2 ((mappend_lh__d8 ((mappend_lh__d6 ((mappend_lh__d7 ((mappend_lh__d5 ((mappend_lh__d4 ((mappend_lh__d9 ((mappend_lh__d3 ((mappend_lh__d1 lh_large_str_0) lh_large_str_1)) lh_large_str_2)) lh_large_str_3)) lh_large_str_4)) lh_large_str_5)) lh_large_str_6)) lh_large_str_7)) lh_large_str_8)) lh_large_str_9) in
//│ 		    (if (null_lh__d1 test_0) then
//│ 		      (`LH_N)
//│ 		    else
//│ 		      (fmt_lh__d1 test_0)));;
//│ 		(testPara_nofib_lh__d1 0)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< after expansion <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C h⁶ mappend_lh_₁₅(t⁶, ys¹)]: 189 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₆(t⁵, ys⁰)] | LH_N  => ys⁰}: 157
//│ [LH_P2 [LH_N] [LH_N]]: 715 --->
//│ 	case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₃(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 710
//│ [LH_C h¹¹ filter_lh_₁(f⁰, t¹¹)]: 782 --->
//│ 	case ls¹⁷ of {LH_C h²⁴ t²⁴ => [LH_C f⁶(h²⁴) map_lh_₁(f⁶, t²⁴)] | LH_N  => [LH_N]}: 1710
//│ [LH_N]: 789 --->
//│ 	case ls¹⁷ of {LH_C h²⁴ t²⁴ => [LH_C f⁶(h²⁴) map_lh_₁(f⁶, t²⁴)] | LH_N  => [LH_N]}: 1710
//│ [LH_N]: 795 --->
//│ 	case _lh_matchIdent⁷ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1523
//│ [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]: 803 --->
//│ 	case _lh_matchIdent⁷ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1523
//│ [LH_N]: 831 --->
//│ 	case _lh_matchIdent⁸ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁹ = break_lh_₁(isSpace_lh_₁, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁹ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 1568
//│ [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]: 842 --->
//│ 	case _lh_matchIdent⁸ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁹ = break_lh_₁(isSpace_lh_₁, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁹ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 1568
//│ [LH_C h¹² mappend_lh_₁₃(t¹², ys³)]: 892 --->
//│ 	case xs⁶ of {LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₁₁(t¹⁵, ys⁶)] | LH_N  => ys⁶}: 951
//│ [LH_C h¹³ mappend_lh_₁₂(t¹³, ys⁴)]: 904 --->
//│ 	case xs⁶ of {LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₁₁(t¹⁵, ys⁶)] | LH_N  => ys⁶}: 951
//│ [LH_N]: 915 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₆(t⁵, ys⁰)] | LH_N  => ys⁰}: 157
//│ [LH_C _lh_unformat_arg1⁰ [LH_N]]: 916 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₆(t⁵, ys⁰)] | LH_N  => ys⁰}: 157
//│ [LH_C f¹(h¹⁴) map_lh_₆(f¹, t¹⁴)]: 937 --->
//│ 	case lss⁰ of {LH_C h¹⁶ t¹⁶ => mappend_lh_₁₄(h¹⁶, concat_lh_₂(t¹⁶)) | LH_N  => [LH_N]}: 963
//│ [LH_N]: 938 --->
//│ 	case lss⁰ of {LH_C h¹⁶ t¹⁶ => mappend_lh_₁₄(h¹⁶, concat_lh_₂(t¹⁶)) | LH_N  => [LH_N]}: 963
//│ [LH_C h¹⁵ mappend_lh_₁₁(t¹⁵, ys⁶)]: 949 --->
//│ 	case xs² of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₄(t⁷, ys²)] | LH_N  => ys²}: 203
//│ [LH_N]: 1518 --->
//│ 	case ls¹⁵ of {LH_C h²¹ t²¹ => [LH_C f⁴(h²¹) map_lh_₃(f⁴, t²¹)] | LH_N  => [LH_N]}: 1541
//│ [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁷ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁷ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}]: 1525 --->
//│ 	case ls¹⁵ of {LH_C h²¹ t²¹ => [LH_C f⁴(h²¹) map_lh_₃(f⁴, t²¹)] | LH_N  => [LH_N]}: 1541
//│ [LH_C f⁵(h²²) map_lh_₂(f⁵, t²²)]: 1580 --->
//│ 	case ls¹⁰ of {LH_C h¹⁴ t¹⁴ => [LH_C f¹(h¹⁴) map_lh_₆(f¹, t¹⁴)] | LH_N  => [LH_N]}: 939
//│ [LH_N]: 1581 --->
//│ 	case ls¹⁰ of {LH_C h¹⁴ t¹⁴ => [LH_C f¹(h¹⁴) map_lh_₆(f¹, t¹⁴)] | LH_N  => [LH_N]}: 939
//│ [LH_N]: 1586 --->
//│ 	case xs⁶ of {LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₁₁(t¹⁵, ys⁶)] | LH_N  => ys⁶}: 951
//│ [LH_N]: 1588 --->
//│ 	case xs⁶ of {LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₁₁(t¹⁵, ys⁶)] | LH_N  => ys⁶}: 951
//│ [LH_C ' ' mappend_lh_₁₃(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 1597 --->
//│ 	case xs⁶ of {LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₁₁(t¹⁵, ys⁶)] | LH_N  => ys⁶}: 951
//│ [LH_N]: 1624 --->
//│ 	case xs² of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₄(t⁷, ys²)] | LH_N  => ys²}: 203
//│ [LH_C '|' [LH_N]]: 1625 --->
//│ 	case xs² of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₄(t⁷, ys²)] | LH_N  => ys²}: 203
//│ ------------------
//│ case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₁₆(t⁵, ys⁰)] | LH_N  => ys⁰}: 157 --->
//│ 	[LH_C h⁶ mappend_lh_₁₅(t⁶, ys¹)]: 189
//│ 	[LH_N]: 915
//│ 	[LH_C _lh_unformat_arg1⁰ [LH_N]]: 916
//│ case xs² of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₄(t⁷, ys²)] | LH_N  => ys²}: 203 --->
//│ 	[LH_C h¹⁵ mappend_lh_₁₁(t¹⁵, ys⁶)]: 949
//│ 	[LH_N]: 1624
//│ 	[LH_C '|' [LH_N]]: 1625
//│ case _lh_cons'_arg2² of {LH_P2 _lh_cons'_LH_P2_0² _lh_cons'_LH_P2_1² => if not⁰(null_lh_₃(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1² _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1² [LH_N]] _lh_cons'_LH_P2_0²] | _  => error⁰}: 710 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 715
//│ case ls¹⁰ of {LH_C h¹⁴ t¹⁴ => [LH_C f¹(h¹⁴) map_lh_₆(f¹, t¹⁴)] | LH_N  => [LH_N]}: 939 --->
//│ 	[LH_C f⁵(h²²) map_lh_₂(f⁵, t²²)]: 1580
//│ 	[LH_N]: 1581
//│ case xs⁶ of {LH_C h¹⁵ t¹⁵ => [LH_C h¹⁵ mappend_lh_₁₁(t¹⁵, ys⁶)] | LH_N  => ys⁶}: 951 --->
//│ 	[LH_C h¹² mappend_lh_₁₃(t¹², ys³)]: 892
//│ 	[LH_C h¹³ mappend_lh_₁₂(t¹³, ys⁴)]: 904
//│ 	[LH_N]: 1586
//│ 	[LH_N]: 1588
//│ 	[LH_C ' ' mappend_lh_₁₃(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))]: 1597
//│ case lss⁰ of {LH_C h¹⁶ t¹⁶ => mappend_lh_₁₄(h¹⁶, concat_lh_₂(t¹⁶)) | LH_N  => [LH_N]}: 963 --->
//│ 	[LH_C f¹(h¹⁴) map_lh_₆(f¹, t¹⁴)]: 937
//│ 	[LH_N]: 938
//│ case _lh_matchIdent⁷ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1523 --->
//│ 	[LH_N]: 795
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]: 803
//│ case ls¹⁵ of {LH_C h²¹ t²¹ => [LH_C f⁴(h²¹) map_lh_₃(f⁴, t²¹)] | LH_N  => [LH_N]}: 1541 --->
//│ 	[LH_N]: 1518
//│ 	[LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent⁷ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent⁷ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}]: 1525
//│ case _lh_matchIdent⁸ of {LH_N  => [LH_N] | LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰ => let _lh_matchIdent⁹ = break_lh_₁(isSpace_lh_₁, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ in case _lh_matchIdent⁹ of {LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)] | _  => error⁰} | _  => error⁰}: 1568 --->
//│ 	[LH_N]: 831
//│ 	[LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]: 842
//│ case ls¹⁷ of {LH_C h²⁴ t²⁴ => [LH_C f⁶(h²⁴) map_lh_₁(f⁶, t²⁴)] | LH_N  => [LH_N]}: 1710 --->
//│ 	[LH_C h¹¹ filter_lh_₁(f⁰, t¹¹)]: 782
//│ 	[LH_N]: 789
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testPara_nofib_lh_₁(primId⁰(0))
//│ def break_lh_₁(_lh_break_arg1², _lh_break_arg2²) = case _lh_break_arg2² of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1²(_lh_break_LH_C_0¹) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]] else 
//│ 		let _lh_matchIdent⁸ = break_lh_₁(_lh_break_arg1², _lh_break_LH_C_1¹)
//│ 		in case _lh_matchIdent⁸ of {
//│ 			LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def break_lh_₂(_lh_break_arg1⁰, _lh_break_arg2⁰) = case _lh_break_arg2⁰ of {
//│ 	LH_N  => [LH_P2 [LH_N] (fun _lh_dummy⁰ -> (fun f¹ -> [LH_N]))]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1⁰(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] 
//│ 		let _lh_lines_LH_C_1⁰ = _lh_break_LH_C_1⁰
//│ 		in let _lh_lines_LH_C_0⁰ = _lh_break_LH_C_0⁰
//│ 		in (fun _lh_dummy¹ -> lines_lh_₁(_lh_lines_LH_C_1⁰))] else 
//│ 		let _lh_matchIdent² = break_lh_₂(_lh_break_arg1⁰, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent² of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def ceildiv_lh_₁(_lh_ceildiv_arg1⁰, _lh_ceildiv_arg2⁰) = div⁰(((_lh_ceildiv_arg1⁰ + _lh_ceildiv_arg2⁰) - 1), _lh_ceildiv_arg2⁰)
//│ def concat_lh_₁(lss¹) = case lss¹ of {
//│ 	LH_C h³⁶ t³⁶ => mappend_lh_₁₀(h³⁶, concat_lh_₁(t³⁶))
//│ 	| LH_N  => [LH_N]}
//│ def concat_lh_₂(lss⁰) = lss⁰([lh_Unit])
//│ def cons'_lh_₁(_lh_cons'_arg1², _lh_cons'_arg2²) = _lh_cons'_arg2²(_lh_cons'_arg1²)
//│ def cons'_lh_₂(_lh_cons'_arg1⁰, _lh_cons'_arg2⁰) = case _lh_cons'_arg2⁰ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0⁰ _lh_cons'_LH_P2_1⁰ => if not⁰(null_lh_₆(_lh_cons'_LH_P2_1⁰)) then [LH_P2 [LH_C _lh_cons'_arg1⁰ _lh_cons'_LH_P2_0⁰] _lh_cons'_LH_P2_1⁰] else [LH_P2 [LH_C _lh_cons'_arg1⁰ [LH_N]] _lh_cons'_LH_P2_0⁰]
//│ 	| _  => error⁰}
//│ def cons'_lh_₃(_lh_cons'_arg1¹, _lh_cons'_arg2¹) = case _lh_cons'_arg2¹ of {
//│ 	LH_P2 _lh_cons'_LH_P2_0¹ _lh_cons'_LH_P2_1¹ => if not⁰(null_lh_₆(_lh_cons'_LH_P2_1¹)) then [LH_P2 [LH_C _lh_cons'_arg1¹ _lh_cons'_LH_P2_0¹] _lh_cons'_LH_P2_1¹] else [LH_P2 [LH_C _lh_cons'_arg1¹ [LH_N]] _lh_cons'_LH_P2_0¹]
//│ 	| _  => error⁰}
//│ def cost_tl_lh_₁(_lh_cost_tl_arg1²) = snd3_lh_₁(_lh_cost_tl_arg1²)
//│ def cost_tl_lh_₂(_lh_cost_tl_arg1⁰) = snd3_lh_₁(_lh_cost_tl_arg1⁰)
//│ def cost_tl_lh_₃(_lh_cost_tl_arg1¹) = snd3_lh_₁(_lh_cost_tl_arg1¹)
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => (fun _lh_dummy² -> [LH_N])
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else 
//│ 		let _lh_words_LH_C_1⁰ = _lh_dropWhile_LH_C_1⁰
//│ 		in let _lh_words_LH_C_0⁰ = _lh_dropWhile_LH_C_0⁰
//│ 		in (fun _lh_dummy³ -> 
//│ 			let _lh_matchIdent⁶ = break_lh_₁(isSpace_lh_₁, [LH_C _lh_words_LH_C_0⁰ _lh_words_LH_C_1⁰])
//│ 			in case _lh_matchIdent⁶ of {
//│ 				LH_P2 _lh_words_LH_P2_0⁰ _lh_words_LH_P2_1⁰ => [LH_C _lh_words_LH_P2_0⁰ words_lh_₁(_lh_words_LH_P2_1⁰)]
//│ 				| _  => error⁰})
//│ 	| _  => error⁰}
//│ def drop_lh_₁(_lh_drop_arg1¹, _lh_drop_arg2¹) = case _lh_drop_arg2¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0¹ _lh_drop_LH_C_1¹ => if (_lh_drop_arg1¹ <= 0) then [LH_C _lh_drop_LH_C_0¹ _lh_drop_LH_C_1¹] else drop_lh_₁((_lh_drop_arg1¹ - 1), _lh_drop_LH_C_1¹)
//│ 	| _  => error⁰}
//│ def drop_lh_₂(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₂((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def filter_lh_₁(f¹⁰, ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h³² t³² => if f¹⁰(h³²) then 
//│ 		let t³³ = filter_lh_₁(f¹⁰, t³²)
//│ 		in let h³³ = h³²
//│ 		in (fun f¹¹ -> [LH_C f¹¹(h³³) map_lh_₁(f¹¹, t³³)]) else filter_lh_₁(f¹⁰, t³²)
//│ 	| LH_N  => (fun f¹² -> [LH_N])}
//│ def fmt_lh_₁(_lh_fmt_arg1⁰) = (fun _lh_funcomp_x³ -> (fun _lh_funcomp_x⁴ -> unparse_lh_₁(map_lh_₁((fun _lh_funcomp_x⁵ -> par3_lh_₁(concat_lh_₁(_lh_funcomp_x⁵))), _lh_funcomp_x⁴)))(parse_lh_₁(_lh_funcomp_x³)))(_lh_fmt_arg1⁰)
//│ def fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_arg3²) = case _lh_fold1_arg3² of {
//│ 	LH_C _lh_fold1_LH_C_0² _lh_fold1_LH_C_1² => case _lh_fold1_LH_C_1² of {
//│ 		LH_N  => _lh_fold1_arg2²(_lh_fold1_LH_C_0²)
//│ 		| _  => _lh_fold1_arg1²(_lh_fold1_LH_C_0², fold1_lh_₁(_lh_fold1_arg1², _lh_fold1_arg2², _lh_fold1_LH_C_1²))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_arg3¹) = case _lh_fold1_arg3¹ of {
//│ 	LH_C _lh_fold1_LH_C_0¹ _lh_fold1_LH_C_1¹ => case _lh_fold1_LH_C_1¹ of {
//│ 		LH_N  => _lh_fold1_arg2¹(_lh_fold1_LH_C_0¹)
//│ 		| _  => _lh_fold1_arg1¹(_lh_fold1_LH_C_0¹, fold1_lh_₂(_lh_fold1_arg1¹, _lh_fold1_arg2¹, _lh_fold1_LH_C_1¹))}
//│ 	| _  => error⁰}
//│ def fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_arg3⁰) = case _lh_fold1_arg3⁰ of {
//│ 	LH_C _lh_fold1_LH_C_0⁰ _lh_fold1_LH_C_1⁰ => case _lh_fold1_LH_C_1⁰ of {
//│ 		LH_N  => _lh_fold1_arg2⁰(_lh_fold1_LH_C_0⁰)
//│ 		| _  => _lh_fold1_arg1⁰(_lh_fold1_LH_C_0⁰, fold1_lh_₃(_lh_fold1_arg1⁰, _lh_fold1_arg2⁰, _lh_fold1_LH_C_1⁰))}
//│ 	| _  => error⁰}
//│ def format_lh_₁(_lh_format_arg1⁰, _lh_format_arg2⁰) = case _lh_format_arg2⁰ of {
//│ 	LH_N  => [LH_C [LH_N] [LH_N]]
//│ 	| _  => 
//│ 		let break⁰ = (fun _lh_break_arg1¹ -> (fun _lh_break_arg2¹ -> (fun _lh_break_arg3⁰ -> if polyEq⁰(_lh_break_arg1¹, _lh_break_arg2¹) then [LH_C [LH_N] _lh_break_arg3⁰] else [LH_C [LH_C _lh_break_arg2¹ head_lh_₅(_lh_break_arg3⁰)] tail_lh_₁(_lh_break_arg3⁰)])))
//│ 		and start⁰ = (fun _lh_start_arg1⁰ -> (fun _lh_start_arg2⁰ -> break⁰(_lh_start_arg1⁰, _lh_start_arg2⁰, [LH_C [LH_N] [LH_N]]))) 
//│ 		in fold1_lh_₃(break⁰(_lh_format_arg1⁰), start⁰(_lh_format_arg1⁰), _lh_format_arg2⁰)}
//│ def fst3_lh_₁(_lh_fst3_arg1⁰) = case _lh_fst3_arg1⁰ of {
//│ 	LH_P3 _lh_fst3_LH_P3_0⁰ _lh_fst3_LH_P3_1⁰ _lh_fst3_LH_P3_2⁰ => _lh_fst3_LH_P3_0⁰
//│ 	| _  => error⁰}
//│ def head'_lh_₁(_lh_head'_arg1⁰) = case _lh_head'_arg1⁰ of {
//│ 	LH_P2 _lh_head'_LH_P2_0⁰ _lh_head'_LH_P2_1⁰ => if not⁰(null_lh_₆(_lh_head'_LH_P2_0⁰)) then head_lh_₆(_lh_head'_LH_P2_0⁰) else head_lh_₆(_lh_head'_LH_P2_1⁰)
//│ 	| _  => error⁰}
//│ def head'_lh_₂(_lh_head'_arg1¹) = case _lh_head'_arg1¹ of {
//│ 	LH_P2 _lh_head'_LH_P2_0¹ _lh_head'_LH_P2_1¹ => if not⁰(null_lh_₆(_lh_head'_LH_P2_0¹)) then head_lh_₆(_lh_head'_LH_P2_0¹) else head_lh_₆(_lh_head'_LH_P2_1¹)
//│ 	| _  => error⁰}
//│ def head_lh_₁(ls¹⁶) = case ls¹⁶ of {
//│ 	LH_C h³⁵ t³⁵ => h³⁵
//│ 	| LH_N  => error⁰}
//│ def head_lh_₂(ls¹) = case ls¹ of {
//│ 	LH_C h⁵ t⁵ => h⁵
//│ 	| LH_N  => error⁰}
//│ def head_lh_₃(ls¹⁵) = case ls¹⁵ of {
//│ 	LH_C h³⁴ t³⁴ => h³⁴
//│ 	| LH_N  => error⁰}
//│ def head_lh_₄(ls⁴) = case ls⁴ of {
//│ 	LH_C h¹⁵ t¹⁵ => h¹⁵
//│ 	| LH_N  => error⁰}
//│ def head_lh_₅(ls³) = case ls³ of {
//│ 	LH_C h¹³ t¹³ => h¹³
//│ 	| LH_N  => error⁰}
//│ def head_lh_₆(ls⁹) = case ls⁹ of {
//│ 	LH_C h²⁶ t²⁶ => h²⁶
//│ 	| LH_N  => error⁰}
//│ def init'_lh_₁(_lh_init'_arg1¹) = case _lh_init'_arg1¹ of {
//│ 	LH_P2 _lh_init'_LH_P2_0² _lh_init'_LH_P2_1² => if null_lh_₆(_lh_init'_LH_P2_1²) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₂(_lh_init'_LH_P2_1²) then 
//│ 		let _lh_matchIdent⁷ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0²), 2), _lh_init'_LH_P2_0²)
//│ 		in case _lh_matchIdent⁷ of {
//│ 			LH_P2 _lh_init'_LH_P2_0³ _lh_init'_LH_P2_1³ => [LH_P2 _lh_init'_LH_P2_0³ reverse_lh_₁(_lh_init'_LH_P2_1³)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0² tail_lh_₁(_lh_init'_LH_P2_1²)]
//│ 	| _  => error⁰}
//│ def init'_lh_₂(_lh_init'_arg1⁰) = case _lh_init'_arg1⁰ of {
//│ 	LH_P2 _lh_init'_LH_P2_0⁰ _lh_init'_LH_P2_1⁰ => if null_lh_₆(_lh_init'_LH_P2_1⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₂(_lh_init'_LH_P2_1⁰) then 
//│ 		let _lh_matchIdent⁰ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_init'_LH_P2_0⁰), 2), _lh_init'_LH_P2_0⁰)
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_P2 _lh_init'_LH_P2_0¹ _lh_init'_LH_P2_1¹ => [LH_P2 _lh_init'_LH_P2_0¹ reverse_lh_₁(_lh_init'_LH_P2_1¹)]
//│ 			| _  => error⁰} else [LH_P2 _lh_init'_LH_P2_0⁰ tail_lh_₁(_lh_init'_LH_P2_1⁰)]
//│ 	| _  => error⁰}
//│ def isSpace_lh_₁(_lh_isSpace_arg1⁰) = polyEq⁰(_lh_isSpace_arg1⁰, ' ')
//│ def isSpace_lh_₂(_lh_isSpace_arg1¹) = polyEq⁰(_lh_isSpace_arg1¹, ' ')
//│ def last'_lh_₁(_lh_last'_arg1²) = case _lh_last'_arg1² of {
//│ 	LH_P2 _lh_last'_LH_P2_0² _lh_last'_LH_P2_1² => if not⁰(null_lh_₂(_lh_last'_LH_P2_1²)) then head_lh_₂(_lh_last'_LH_P2_1²) else head_lh_₃(_lh_last'_LH_P2_0²)
//│ 	| _  => error⁰}
//│ def last'_lh_₂(_lh_last'_arg1³) = case _lh_last'_arg1³ of {
//│ 	LH_P2 _lh_last'_LH_P2_0³ _lh_last'_LH_P2_1³ => if not⁰(null_lh_₆(_lh_last'_LH_P2_1³)) then head_lh_₆(_lh_last'_LH_P2_1³) else head_lh_₆(_lh_last'_LH_P2_0³)
//│ 	| _  => error⁰}
//│ def last'_lh_₃(_lh_last'_arg1¹) = case _lh_last'_arg1¹ of {
//│ 	LH_P2 _lh_last'_LH_P2_0¹ _lh_last'_LH_P2_1¹ => if not⁰(null_lh_₆(_lh_last'_LH_P2_1¹)) then head_lh_₆(_lh_last'_LH_P2_1¹) else head_lh_₆(_lh_last'_LH_P2_0¹)
//│ 	| _  => error⁰}
//│ def last'_lh_₄(_lh_last'_arg1⁰) = case _lh_last'_arg1⁰ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁰ _lh_last'_LH_P2_1⁰ => if not⁰(null_lh_₆(_lh_last'_LH_P2_1⁰)) then head_lh_₆(_lh_last'_LH_P2_1⁰) else head_lh_₆(_lh_last'_LH_P2_0⁰)
//│ 	| _  => error⁰}
//│ def last'_lh_₅(_lh_last'_arg1⁴) = case _lh_last'_arg1⁴ of {
//│ 	LH_P2 _lh_last'_LH_P2_0⁴ _lh_last'_LH_P2_1⁴ => if not⁰(null_lh_₆(_lh_last'_LH_P2_1⁴)) then head_lh_₆(_lh_last'_LH_P2_1⁴) else head_lh_₆(_lh_last'_LH_P2_0⁴)
//│ 	| _  => error⁰}
//│ def len_tl_lh_₁(_lh_len_tl_arg1¹) = thd3_lh_₂(_lh_len_tl_arg1¹)
//│ def len_tl_lh_₂(_lh_len_tl_arg1⁰) = thd3_lh_₂(_lh_len_tl_arg1⁰)
//│ def length_lh_₁(ls¹²) = case ls¹² of {
//│ 	LH_C h³¹ t³¹ => (1 + length_lh_₁(t³¹))
//│ 	| LH_N  => 0}
//│ def lines_lh_₁(_lh_lines_arg1⁰) = 
//│ 	let _lh_matchIdent⁴ = break_lh_₂((fun x¹ -> polyEq⁰(x¹, '|')), _lh_lines_arg1⁰)
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => 
//│ 			let t¹² = 	
//│ 				let _lh_matchIdent⁵ = _lh_lines_LH_P2_1⁰
//│ 				in _lh_matchIdent⁵([lh_Unit])
//│ 			in let h¹² = _lh_lines_LH_P2_0⁰
//│ 			in (fun f² -> [LH_C f²(h¹²) map_lh_₃(f², t¹²)])
//│ 		| _  => error⁰}
//│ def map_lh_₁(f⁷, ls¹⁰) = ls¹⁰(f⁷)
//│ def map_lh_₂(f⁴, ls⁶, _lh_floatOutId_0⁰, _lh_floatOutId_1⁰) = case ls⁶ of {
//│ 	LH_C h¹⁷ t¹⁷ => 
//│ 		let t¹⁸ = map_lh_₂(f⁴, t¹⁷)
//│ 		in let h¹⁸ = f⁴(h¹⁷)
//│ 		in let t¹⁹ = map_lh_₆(_lh_floatOutId_0⁰, t¹⁸)
//│ 		in let h¹⁹ = _lh_floatOutId_0⁰(h¹⁸)
//│ 		in mappend_lh_₁₄(h¹⁹, concat_lh_₂(t¹⁹))
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f⁹, ls¹³) = ls¹³(f⁹)
//│ def map_lh_₄(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₄(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f⁸, ls¹¹) = case ls¹¹ of {
//│ 	LH_C h³⁰ t³⁰ => [LH_C f⁸(h³⁰) map_lh_₅(f⁸, t³⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f³, ls⁵) = ls⁵(f³)
//│ def mappend_lh_₁(xs², ys⁶) = case xs² of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₁(t⁴, ys⁶)]
//│ 	| LH_N  => ys⁶}
//│ def mappend_lh_₁₀(xs⁴, ys⁸) = case xs⁴ of {
//│ 	LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₁₀(t⁸, ys⁸)]
//│ 	| LH_N  => ys⁸}
//│ def mappend_lh_₁₁(xs¹⁰, ys¹⁴) = xs¹⁰(ys¹⁴)
//│ def mappend_lh_₁₂(xs¹⁶, ys²⁵) = case xs¹⁶ of {
//│ 	LH_C h³⁷ t³⁷ => 
//│ 		let t³⁸ = mappend_lh_₁₂(t³⁷, ys²⁵)
//│ 		in let h³⁸ = h³⁷
//│ 		in (fun ys²⁶ -> 
//│ 			let t³⁹ = mappend_lh_₁₁(t³⁸, ys²⁶)
//│ 			in let h³⁹ = h³⁸
//│ 			in (fun ys²⁷ -> [LH_C h³⁹ mappend_lh_₁₄(t³⁹, ys²⁷)]))
//│ 	| LH_N  => ys²⁵}
//│ def mappend_lh_₁₃(xs¹³, ys¹⁹) = case xs¹³ of {
//│ 	LH_C h²² t²² => 
//│ 		let t²³ = mappend_lh_₁₃(t²², ys¹⁹)
//│ 		in let h²³ = h²²
//│ 		in (fun ys²⁰ -> 
//│ 			let t²⁴ = mappend_lh_₁₁(t²³, ys²⁰)
//│ 			in let h²⁴ = h²³
//│ 			in (fun ys²¹ -> [LH_C h²⁴ mappend_lh_₁₄(t²⁴, ys²¹)]))
//│ 	| LH_N  => ys¹⁹}
//│ def mappend_lh_₁₄(xs⁸, ys¹²) = xs⁸(ys¹²)
//│ def mappend_lh_₁₅(xs¹⁵, ys²³) = case xs¹⁵ of {
//│ 	LH_C h²⁸ t²⁸ => 
//│ 		let t²⁹ = mappend_lh_₁₅(t²⁸, ys²³)
//│ 		in let h²⁹ = h²⁸
//│ 		in (fun ys²⁴ -> [LH_C h²⁹ mappend_lh_₁₆(t²⁹, ys²⁴)])
//│ 	| LH_N  => ys²³}
//│ def mappend_lh_₁₆(xs⁰, ys⁰) = xs⁰(ys⁰)
//│ def mappend_lh_₂(xs⁶, ys¹⁰) = case xs⁶ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₂(t¹⁰, ys¹⁰)]
//│ 	| LH_N  => ys¹⁰}
//│ def mappend_lh_₃(xs¹, ys⁵) = case xs¹ of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh_₃(t³, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mappend_lh_₄(xs¹¹, ys¹⁵) = case xs¹¹ of {
//│ 	LH_C h¹⁶ t¹⁶ => [LH_C h¹⁶ mappend_lh_₄(t¹⁶, ys¹⁵)]
//│ 	| LH_N  => ys¹⁵}
//│ def mappend_lh_₅(xs⁷, ys¹¹) = case xs⁷ of {
//│ 	LH_C h¹¹ t¹¹ => [LH_C h¹¹ mappend_lh_₅(t¹¹, ys¹¹)]
//│ 	| LH_N  => ys¹¹}
//│ def mappend_lh_₆(xs⁹, ys¹³) = case xs⁹ of {
//│ 	LH_C h¹⁴ t¹⁴ => [LH_C h¹⁴ mappend_lh_₆(t¹⁴, ys¹³)]
//│ 	| LH_N  => ys¹³}
//│ def mappend_lh_₇(xs⁵, ys⁹) = case xs⁵ of {
//│ 	LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₇(t⁹, ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_lh_₈(xs³, ys⁷) = case xs³ of {
//│ 	LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₈(t⁶, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₉(xs¹⁴, ys²²) = case xs¹⁴ of {
//│ 	LH_C h²⁷ t²⁷ => [LH_C h²⁷ mappend_lh_₉(t²⁷, ys²²)]
//│ 	| LH_N  => ys²²}
//│ def maxw_lh_₁ = 70
//│ def maxw_lh_₂ = 70
//│ def maxw_lh_₃ = 70
//│ def min_lh_₁(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ > _lh_min_arg2⁰) then _lh_min_arg2⁰ else _lh_min_arg1⁰
//│ def min_lh_₂(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ def nil'_lh_₁(_lh_cons'_arg1³) = 
//│ 	let _lh_cons'_LH_P2_1² = [LH_N]
//│ 	in let _lh_cons'_LH_P2_0² = [LH_N]
//│ 	in if not⁰(null_lh_₃(_lh_cons'_LH_P2_1²)) then [LH_P2 [LH_C _lh_cons'_arg1³ _lh_cons'_LH_P2_0²] _lh_cons'_LH_P2_1²] else [LH_P2 [LH_C _lh_cons'_arg1³ [LH_N]] _lh_cons'_LH_P2_0²]
//│ def null'_lh_₁(_lh_null'_arg1¹) = case _lh_null'_arg1¹ of {
//│ 	LH_P2 _lh_null'_LH_P2_0¹ _lh_null'_LH_P2_1¹ => case _lh_null'_LH_P2_0¹ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1¹ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₂(_lh_null'_arg1⁰) = case _lh_null'_arg1⁰ of {
//│ 	LH_P2 _lh_null'_LH_P2_0⁰ _lh_null'_LH_P2_1⁰ => case _lh_null'_LH_P2_0⁰ of {
//│ 		LH_N  => case _lh_null'_LH_P2_1⁰ of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null'_lh_₃(_lh_null'_arg1²) = case _lh_null'_arg1² of {
//│ 	LH_P2 _lh_null'_LH_P2_0² _lh_null'_LH_P2_1² => case _lh_null'_LH_P2_0² of {
//│ 		LH_N  => case _lh_null'_LH_P2_1² of {
//│ 			LH_N  => [True]
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def null_lh_₁(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₂(_lh_null_arg1³) = case _lh_null_arg1³ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0³ _lh_null_LH_C_1³ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₃(_lh_null_arg1⁴) = case _lh_null_arg1⁴ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁴ _lh_null_LH_C_1⁴ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₄(_lh_null_arg1²) = case _lh_null_arg1² of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0² _lh_null_LH_C_1² => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₅(_lh_null_arg1⁵) = case _lh_null_arg1⁵ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁵ _lh_null_LH_C_1⁵ => [False]
//│ 	| _  => error⁰}
//│ def null_lh_₆(_lh_null_arg1¹) = case _lh_null_arg1¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False]
//│ 	| _  => error⁰}
//│ def optw_lh_₁ = 63
//│ def optw_lh_₂ = 63
//│ def optw_lh_₃ = 63
//│ def par3_lh_₁(_lh_par3_arg1⁰) = 
//│ 	let zs⁰ = scan1_lh_₁(stepr_lh_₁, startr_lh_₁, map_lh_₅(length_lh_₁, _lh_par3_arg1⁰))
//│ 	in tile_lh_₁(_lh_par3_arg1⁰, [LH_P2 map_lh_₄((fun _lh_funcomp_x¹ -> (fun _lh_funcomp_x² -> len_tl_lh_₁(last'_lh_₁(_lh_funcomp_x²)))(fst3_lh_₁(_lh_funcomp_x¹))), zs⁰) thd3_lh_₁(head_lh_₁(zs⁰))])
//│ def paras_lh_₁(_lh_paras_arg1⁰) = (fun _lh_funcomp_x⁰ -> filter_lh_₁((fun x⁰ -> polyNeq⁰([LH_N], x⁰)), format_lh_₁([LH_N], _lh_funcomp_x⁰)))(_lh_paras_arg1⁰)
//│ def parse_lh_₁(_lh_parse_arg1⁰) = (fun _lh_funcomp_x⁶ -> (fun _lh_funcomp_x⁷ -> paras_lh_₁(map_lh_₃(words_lh_₁, _lh_funcomp_x⁷)))(lines_lh_₁(_lh_funcomp_x⁶)))(_lh_parse_arg1⁰)
//│ def reverse_helper_lh_₁(ls², a⁰) = case ls² of {
//│ 	LH_C h⁷ t⁷ => reverse_helper_lh_₁(t⁷, [LH_C h⁷ a⁰])
//│ 	| LH_N  => a⁰}
//│ def reverse_lh_₁(ls¹⁷) = reverse_helper_lh_₁(ls¹⁷, [LH_N])
//│ def scan1_lh_₁(_lh_scan1_arg1⁰, _lh_scan1_arg2⁰) = fold1_lh_₁((fun a² -> (fun s⁰ -> [LH_C _lh_scan1_arg1⁰(a², head_lh_₄(s⁰)) s⁰])), (fun a³ -> [LH_C _lh_scan1_arg2⁰(a³) [LH_N]]))
//│ def single'_lh_₁(_lh_single'_arg1⁰) = case _lh_single'_arg1⁰ of {
//│ 	LH_P2 _lh_single'_LH_P2_0⁰ _lh_single'_LH_P2_1⁰ => ((null_lh_₅(_lh_single'_LH_P2_0⁰) && single_lh_₂(_lh_single'_LH_P2_1⁰)) || (single_lh_₁(_lh_single'_LH_P2_0⁰) && null_lh_₄(_lh_single'_LH_P2_1⁰)))
//│ 	| _  => error⁰}
//│ def single'_lh_₂(_lh_single'_arg1¹) = case _lh_single'_arg1¹ of {
//│ 	LH_P2 _lh_single'_LH_P2_0¹ _lh_single'_LH_P2_1¹ => ((null_lh_₆(_lh_single'_LH_P2_0¹) && single_lh_₂(_lh_single'_LH_P2_1¹)) || (single_lh_₂(_lh_single'_LH_P2_0¹) && null_lh_₆(_lh_single'_LH_P2_1¹)))
//│ 	| _  => error⁰}
//│ def single_lh_₁(_lh_single_arg1⁰) = case _lh_single_arg1⁰ of {
//│ 	LH_C _lh_single_LH_C_0⁰ _lh_single_LH_C_1⁰ => case _lh_single_LH_C_1⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def single_lh_₂(_lh_single_arg1¹) = case _lh_single_arg1¹ of {
//│ 	LH_C _lh_single_LH_C_0¹ _lh_single_LH_C_1¹ => case _lh_single_LH_C_1¹ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def snd3_lh_₁(_lh_snd3_arg1⁰) = case _lh_snd3_arg1⁰ of {
//│ 	LH_P3 _lh_snd3_LH_P3_0⁰ _lh_snd3_LH_P3_1⁰ _lh_snd3_LH_P3_2⁰ => _lh_snd3_LH_P3_1⁰
//│ 	| _  => error⁰}
//│ def splitAt_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) = [LH_P2 take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₂(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]
//│ def startr_lh_₁(_lh_startr_arg1⁰) = if (_lh_startr_arg1⁰ <= maxw_lh_₁) then [LH_P3 cons'_lh_₁([LH_P3 0 0 0], nil'_lh_₁) _lh_startr_arg1⁰ 1] else error⁰([LH_C 's' [LH_C 't' [LH_C 'a' [LH_C 'r' [LH_C 't' [LH_C 'r' [LH_C ' ' [LH_C 'p' [LH_C 'a' [LH_C 'r' [LH_C 'a' [LH_C 'm' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_N]]]]]]]]]]]]]]]]]]])
//│ def stepr_lh_₁(_lh_stepr_arg1⁰, _lh_stepr_arg2⁰) = case _lh_stepr_arg2⁰ of {
//│ 	LH_P3 _lh_stepr_LH_P3_0⁰ _lh_stepr_LH_P3_1⁰ _lh_stepr_LH_P3_2⁰ => 
//│ 		let tot_width⁰ = ((_lh_stepr_arg1⁰ + 1) + _lh_stepr_LH_P3_1⁰)
//│ 		in let tot_len⁰ = (1 + _lh_stepr_LH_P3_2⁰)
//│ 		in let single⁰ = (fun p⁰ -> (len_tl_lh_₂(p⁰) == 0))
//│ 		in let width_hd⁰ = (fun p¹ -> if single⁰(p¹) then tot_width⁰ else ((tot_width⁰ - width_tl_lh_₂(p¹)) - 1))
//│ 		in let cost⁰ = (fun p² -> if single⁰(p²) then 0 else (cost_tl_lh_₁(p²) + 
//│ 			let a¹ = (optw_lh_₃ - width_hd⁰(p²))
//│ 			in (a¹ * a¹)))
//│ 		in let old_width_hd⁰ = (fun p³ -> if single⁰(p³) then _lh_stepr_LH_P3_1⁰ else ((_lh_stepr_LH_P3_1⁰ - width_tl_lh_₁(p³)) - 1))
//│ 		in let new⁰ = (fun p⁴ -> if single⁰(p⁴) then [LH_P3 _lh_stepr_LH_P3_1⁰ 0 _lh_stepr_LH_P3_2⁰] else [LH_P3 _lh_stepr_LH_P3_1⁰ (cost_tl_lh_₃(p⁴) + 
//│ 			let x³ = (optw_lh_₁ - old_width_hd⁰(p⁴))
//│ 			in (x³ * x³)) _lh_stepr_LH_P3_2⁰])
//│ 		in let trim⁰ = (fun ps_pq⁰ -> if null'_lh_₁(ps_pq⁰) then ps_pq⁰ else if single'_lh_₁(ps_pq⁰) then ps_pq⁰ else 
//│ 			let ps_p⁰ = init'_lh_₁(ps_pq⁰)
//│ 			in let q⁰ = last'_lh_₂(ps_pq⁰)
//│ 			in let p⁵ = last'_lh_₅(ps_p⁰)
//│ 			in if (cost⁰(p⁵) <= cost⁰(q⁰)) then trim⁰(ps_p⁰) else ps_pq⁰)
//│ 		in let drop_nofit⁰ = (fun ps_p¹ -> if null'_lh_₂(ps_p¹) then ps_p¹ else if (width_hd⁰(last'_lh_₃(ps_p¹)) > maxw_lh_₂) then drop_nofit⁰(init'_lh_₂(ps_p¹)) else ps_p¹)
//│ 		in let bf⁰ = (fun p⁶ -> (fun q¹ -> 
//│ 			let wqh⁰ = width_hd⁰(q¹)
//│ 			in let rqh⁰ = ((maxw_lh_₃ - wqh⁰) + 1)
//│ 			in if (single⁰(q¹) && (cost_tl_lh_₂(p⁶) == 0)) then min_lh_₂((optw_lh_₂ - width_hd⁰(p⁶)), rqh⁰) else if single⁰(q¹) then rqh⁰ else min_lh_₁(ceildiv_lh_₁((cost⁰(p⁶) - cost⁰(q¹)), (2 * (wqh⁰ - width_hd⁰(p⁶)))), rqh⁰)))
//│ 		in let myAdd⁰ = (fun p⁷ -> (fun qr_rs⁰ -> if (single'_lh_₂(qr_rs⁰) || null'_lh_₃(qr_rs⁰)) then cons'_lh_₂(p⁷, qr_rs⁰) else 
//│ 			let q² = head'_lh_₂(qr_rs⁰)
//│ 			in let r_rs⁰ = tail'_lh_₁(qr_rs⁰)
//│ 			in let r⁰ = head'_lh_₁(r_rs⁰)
//│ 			in if (bf⁰(p⁷, q²) <= bf⁰(q², r⁰)) then myAdd⁰(p⁷, r_rs⁰) else cons'_lh_₃(p⁷, qr_rs⁰)))
//│ 		in [LH_P3 trim⁰(drop_nofit⁰(myAdd⁰(new⁰(last'_lh_₄(_lh_stepr_LH_P3_0⁰)), _lh_stepr_LH_P3_0⁰))) tot_width⁰ tot_len⁰]
//│ 	| _  => error⁰}
//│ def tail'_lh_₁(_lh_tail'_arg1⁰) = case _lh_tail'_arg1⁰ of {
//│ 	LH_P2 _lh_tail'_LH_P2_0⁰ _lh_tail'_LH_P2_1⁰ => if null_lh_₆(_lh_tail'_LH_P2_0⁰) then [LH_P2 [LH_N] [LH_N]] else if single_lh_₂(_lh_tail'_LH_P2_0⁰) then 
//│ 		let _lh_matchIdent⁹ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_tail'_LH_P2_1⁰), 2), _lh_tail'_LH_P2_1⁰)
//│ 		in case _lh_matchIdent⁹ of {
//│ 			LH_P2 _lh_tail'_LH_P2_0¹ _lh_tail'_LH_P2_1¹ => [LH_P2 reverse_lh_₁(_lh_tail'_LH_P2_1¹) _lh_tail'_LH_P2_0¹]
//│ 			| _  => error⁰} else [LH_P2 tail_lh_₁(_lh_tail'_LH_P2_0⁰) _lh_tail'_LH_P2_1⁰]
//│ 	| _  => error⁰}
//│ def tail_lh_₁(ls⁷) = case ls⁷ of {
//│ 	LH_C h²¹ t²¹ => t²¹
//│ 	| LH_N  => error⁰}
//│ def take_lh_₁(n⁰, ls⁸) = if (n⁰ > 0) then case ls⁸ of {
//│ 	LH_C h²⁵ t²⁵ => [LH_C h²⁵ take_lh_₁((n⁰ - 1), t²⁵)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPara_nofib_lh_₁(_lh_testPara_nofib_arg1⁰) = 
//│ 	let test⁰ = mappend_lh_₂(mappend_lh_₈(mappend_lh_₆(mappend_lh_₇(mappend_lh_₅(mappend_lh_₄(mappend_lh_₉(mappend_lh_₃(mappend_lh_₁(from_large_str⁰("In the constructive programming community it is commonplace to see "), from_large_str⁰("formal developments of textbook algorithms. In the algorithm design ")), from_large_str⁰("community, on the other hand, it may be well known that the textbook ")), from_large_str⁰("solution to a problem is not the most efficient possible. However, in ")), from_large_str⁰("presenting the more efficient solution, the algorithm designer will ")), from_large_str⁰("usually omit some of the implementation details, this creating an ")), from_large_str⁰("algorithm gap between the abstract algorithm and its concrete ")), from_large_str⁰("implementation. This is in contrast to the formal development, which ")), from_large_str⁰("usually presents the complete concrete implementation of the less ")), from_large_str⁰("efficient solution.| |"))
//│ 	in if null_lh_₁(test⁰) then [LH_N] else fmt_lh_₁(test⁰)
//│ def thd3_lh_₁(_lh_thd3_arg1¹) = case _lh_thd3_arg1¹ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0¹ _lh_thd3_LH_P3_1¹ _lh_thd3_LH_P3_2¹ => _lh_thd3_LH_P3_2¹
//│ 	| _  => error⁰}
//│ def thd3_lh_₂(_lh_thd3_arg1⁰) = case _lh_thd3_arg1⁰ of {
//│ 	LH_P3 _lh_thd3_LH_P3_0⁰ _lh_thd3_LH_P3_1⁰ _lh_thd3_LH_P3_2⁰ => _lh_thd3_LH_P3_2⁰
//│ 	| _  => error⁰}
//│ def tile_lh_₁(_lh_tile_arg1⁰, _lh_tile_arg2⁰) = case _lh_tile_arg2⁰ of {
//│ 	LH_P2 _lh_tile_LH_P2_0⁰ _lh_tile_LH_P2_1⁰ => case _lh_tile_LH_P2_0⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰ => 
//│ 			let l⁰ = (_lh_tile_LH_P2_1⁰ - _lh_tile_LH_C_0⁰)
//│ 			in let _lh_matchIdent³ = splitAt_lh_₁(l⁰, _lh_tile_arg1⁰)
//│ 			in case _lh_matchIdent³ of {
//│ 				LH_P2 _lh_tile_LH_P2_0¹ _lh_tile_LH_P2_1¹ => [LH_C _lh_tile_LH_P2_0¹ tile_lh_₁(_lh_tile_LH_P2_1¹, [LH_P2 drop_lh_₁(l⁰, [LH_C _lh_tile_LH_C_0⁰ _lh_tile_LH_C_1⁰]) _lh_tile_LH_C_0⁰])]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def unformat_lh_₁(_lh_unformat_arg1⁰) = fold1_lh_₂((fun xs¹² -> (fun ys¹⁶ -> mappend_lh_₁₆(mappend_lh_₁₅(xs¹², 
//│ 	let t²⁰ = (fun ys¹⁷ -> ys¹⁷)
//│ 	in let h²⁰ = _lh_unformat_arg1⁰
//│ 	in (fun ys¹⁸ -> [LH_C h²⁰ mappend_lh_₁₆(t²⁰, ys¹⁸)])), ys¹⁶))), (fun x² -> x²))
//│ def unlines_lh_₁(_lh_unlines_arg1⁰) = concat_lh_₂(map_lh_₆((fun l¹ -> mappend_lh_₁₁(l¹, 
//│ 	let t⁴⁰ = (fun ys²⁸ -> ys²⁸)
//│ 	in let h⁴⁰ = '|'
//│ 	in (fun ys²⁹ -> [LH_C h⁴⁰ mappend_lh_₁₄(t⁴⁰, ys²⁹)]))), _lh_unlines_arg1⁰))
//│ def unparas_lh_₁(_lh_unparas_arg1⁰) = unformat_lh_₁([LH_N], _lh_unparas_arg1⁰)
//│ def unparse_lh_₁(_lh_unparse_arg1⁰) = (fun _lh_funcomp_x⁸ -> (fun _lh_funcomp_x⁹ -> unlines_lh_₁(map_lh_₂(unwords_lh_₁, _lh_funcomp_x⁹)))(unparas_lh_₁(_lh_funcomp_x⁸)))(_lh_unparse_arg1⁰)
//│ def unwords_lh_₁(_lh_unwords_arg1⁰) = case _lh_unwords_arg1⁰ of {
//│ 	LH_N  => (fun ys¹ -> ys¹)
//│ 	| LH_C _lh_unwords_LH_C_0⁰ _lh_unwords_LH_C_1⁰ => 
//│ 		let go⁰ = (fun _lh_go_arg1⁰ -> case _lh_go_arg1⁰ of {
//│ 			LH_N  => (fun ys² -> ys²)
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => 
//│ 				let t¹ = mappend_lh_₁₃(_lh_go_LH_C_0⁰, go⁰(_lh_go_LH_C_1⁰))
//│ 				in let h¹ = ' '
//│ 				in (fun ys³ -> 
//│ 					let t² = mappend_lh_₁₁(t¹, ys³)
//│ 					in let h² = h¹
//│ 					in (fun ys⁴ -> [LH_C h² mappend_lh_₁₄(t², ys⁴)]))
//│ 			| _  => error⁰})
//│ 		in mappend_lh_₁₂(_lh_unwords_LH_C_0⁰, go⁰(_lh_unwords_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def width_tl_lh_₁(_lh_width_tl_arg1⁰) = fst3_lh_₁(_lh_width_tl_arg1⁰)
//│ def width_tl_lh_₂(_lh_width_tl_arg1¹) = fst3_lh_₁(_lh_width_tl_arg1¹)
//│ def words_lh_₁(_lh_words_arg1⁰) = 
//│ 	let _lh_matchIdent¹ = dropWhile_lh_₁(isSpace_lh_₂, _lh_words_arg1⁰)
//│ 	in _lh_matchIdent¹([lh_Unit])
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
