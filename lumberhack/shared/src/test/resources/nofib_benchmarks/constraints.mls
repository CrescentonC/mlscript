

:lhInHaskell
:lhGenOCaml
-----------------------------
-- Figure 1. CSPs in Haskell.
-----------------------------
type Var = Int
type Value = Int
data Assign = Assign Var Value deriving (Eq, Ord, Show)
type Relation = Assign -> Assign -> Bool
data CSP = CSP Int Int Relation
type State = [Assign]
flip f x y = f y x
all p [] = True
all p (h:t) = if p h then all p t else False
abs x = if x > 0 then x else (0 - x)
nubBy eq []             =  []
nubBy eq (x:xs)         =  x : nubBy eq (filter (\y -> not (eq x y)) xs)
deleteBy                :: (a -> a -> Bool) -> a -> [a] -> [a]
deleteBy _  _ []        = []
deleteBy eq x (y:ys)    = if eq x y then ys else y : deleteBy eq x ys
unionBy eq xs ys        = xs ++ foldl (flip (deleteBy eq)) (nubBy eq ys) xs
union xs ys = unionBy (\a b -> polyEq a b) xs ys
compareTuple2 (a, b) (c, d) = a <= c
qsort le []     r = r
qsort le [x]    r = x:r
qsort le (x:xs) r = qpart le x xs [] [] r
qpart le x [] rlt rge r =
    rqsort le rlt (x:rqsort le rge r)
qpart le x (y:ys) rlt rge r =
    if le x y then
    qpart le x ys rlt (y:rge) r
    else
    qpart le x ys (y:rlt) rge r
rqsort le []     r = r
rqsort le [x]    r = x:r
rqsort le (x:xs) r = rqpart le x xs [] [] r
rqpart le x [] rle rgt r =
    qsort le rle (x:qsort le rgt r)
rqpart le x (y:ys) rle rgt r =
    if le y x then
    rqpart le x ys (y:rle) rgt r
    else
    rqpart le x ys rle (y:rgt) r
notElem x [] = True
notElem x (h:t) = if polyEq x h then False else (notElem x t)
fst (a, b) = a
snd (a, b) = b
null [] = True
null (h:t) = False
level :: Assign -> Var
level (Assign var val) = var
value :: Assign -> Value
value (Assign var val) = val
maxLevel :: State -> Var
maxLevel [] = 0
maxLevel ((Assign var val):_) = var
complete :: CSP -> State -> Bool
complete (CSP vars vals rel) s = (maxLevel s) == vars
generate :: CSP -> [State]
generate (CSP vars vals rel) = g vals vars
  where g vals 0 = [[]]
        g vals var = [ (Assign var val):st | val <- [1..vals], st <- g vals (var-1) ]
inconsistencies :: CSP -> State -> [(Var,Var)]
inconsistencies (CSP vars vals rel) as = [ (level a, level b) | a <- as, b <- reverse as, a > b, not (rel a b) ]
consistent :: CSP -> State -> Bool
consistent csp = null . (inconsistencies csp)
test :: CSP -> [State] -> [State]
test csp = filter (consistent csp)
solver :: CSP -> [State]
solver csp  = test csp (generate csp)
safe (Assign i m) (Assign j n) = (m /= n) && ((abs (i - j)) /= (abs (m - n)))
queens :: Int -> CSP
queens n = CSP n n safe
-------------------------------
-- Figure 2.  Trees in Haskell.
-------------------------------
data Tree a = Node a [Tree a]
label :: Tree a -> a
label (Node lab _) = lab
type Transform a b = Tree a -> Tree b
mapTree  :: (a -> b) -> Transform a b
mapTree f (Node a cs) = Node (f a) (map (mapTree f) cs)
foldTree :: (a -> [b] -> b) -> Tree a -> b
foldTree f (Node a cs) = f a (map (foldTree f) cs)
filterTree :: (a -> Bool) -> Transform a a
filterTree p = let f = \a cs -> Node a (filter (p . label) cs) in foldTree f
prune :: (a -> Bool) -> Transform a a
prune p = filterTree (not . p)
leaves :: Tree a -> [a]
leaves (Node leaf []) = [leaf]
leaves (Node _ cs) = concat (map leaves cs)
initTree :: (a -> [a]) -> a -> Tree a
initTree f a = Node a (map (initTree f) (f a))
--------------------------------------------------
-- Figure 3.  Simple backtracking solver for CSPs.
--------------------------------------------------
mkTree :: CSP -> Tree State
mkTree (CSP vars vals rel) =
  let next = \ss -> [ (Assign ((maxLevel ss) + 1) j):ss | (maxLevel ss) < vars, j <- [1..vals] ] in
  initTree next []
earliestInconsistency :: CSP -> State -> Maybe (Var,Var)
earliestInconsistency (CSP vars vals rel) [] = Nothing
earliestInconsistency (CSP vars vals rel) (a:as) =
        case filter (not . rel a) (reverse as) of
          [] -> Nothing
          (b:_) -> Just (level a, level b)
labelInconsistencies :: CSP -> Transform State (State,Maybe (Var,Var))
labelInconsistencies csp =
  let f = \s -> (s,earliestInconsistency csp s) in
  mapTree f
btsolver0 :: CSP -> [State]
btsolver0 csp =
  (filter (complete csp) . leaves . (mapTree fst) . prune ((\x -> x /= Nothing) . snd)
                                            . (labelInconsistencies csp) .  mkTree) csp
-----------------------------------------------
-- Figure 6. Conflict-directed solving of CSPs.
-----------------------------------------------
data ConflictSet = Known [Var] | Unknown deriving Eq
knownConflict :: ConflictSet -> Bool
knownConflict (Known (a:as)) = True
knownConflict _              = False
knownSolution :: ConflictSet -> Bool
knownSolution (Known []) = True
knownSolution _          = False
checkComplete :: CSP -> State -> ConflictSet
checkComplete csp s = if complete csp s then Known [] else Unknown
type Labeler = CSP -> Transform State (State, ConflictSet)
search :: Labeler -> CSP -> [State]
search labeler csp =
  (map fst . filter (knownSolution . snd) . leaves . prune (knownConflict . snd) . labeler csp . mkTree) csp
bt :: Labeler
bt csp =
  let f = \s -> (s, case (earliestInconsistency csp s) of {Nothing    -> checkComplete csp s; Just (a,b) -> Known [a,b]}) in
  mapTree f
-------------------------
-- Figure 8. Backmarking.
-------------------------
type Table = [Row]       -- indexed by Var
type Row = [ConflictSet] -- indexed by Value
bm :: Labeler
bm csp = mapTree fst . lookupCache csp . cacheChecks csp (emptyTable csp)
emptyTable :: CSP -> Table
emptyTable (CSP vars vals rel) = []:[[Unknown | m <- [1..vals]] | n <- [1..vars]]
cacheChecks :: CSP -> Table -> Transform State (State, Table)
cacheChecks csp tbl (Node s cs) =
  Node (s, tbl) (map (cacheChecks csp (fillTable s csp (tail tbl))) cs)
fillTable :: State -> CSP -> Table -> Table
fillTable [] csp tbl = tbl
fillTable ((Assign var' val'):as) (CSP vars vals rel) tbl =
  let f = \cs varval -> case varval of { (var, val) -> if (polyEq cs Unknown) && (not (rel (Assign var' val') (Assign var val))) then Known [var',var] else cs } in
  zipWith (zipWith f) tbl [[(var,val) | val <- [1..vals]] | var <- [var'+1..vars]]
lookupCache :: CSP -> Transform (State, Table) ((State, ConflictSet), Table)
lookupCache csp t = mapTree (f csp) t
  where f csp ([], tbl)      = (([], Unknown), tbl)
        f csp ((a:as), tbl) =
          let tableEntry = atIndex (value a-1) (head tbl) in
          let cs = (if polyEq tableEntry Unknown then checkComplete csp (a:as) else tableEntry) in
          ((a:as, cs), tbl)
--------------------------------------------
-- Figure 10. Conflict-directed backjumping.
--------------------------------------------
bjbt :: Labeler
bjbt csp = bj csp . bt csp
bjbt' :: Labeler
bjbt' csp = bj' csp . bt csp
bj :: CSP -> Transform (State, ConflictSet) (State, ConflictSet)
bj csp = foldTree f
  where f (a, Known cs) chs = Node (a,Known cs) chs
        f (a, Unknown)  chs = Node (a,Known (combine (map label chs) [])) chs
combine :: [(State, ConflictSet)] -> [Var] -> [Var]
combine []                  acc = acc
combine ((s, Known cs):css) acc =
  if notElem (maxLevel s) cs then cs else combine css (union cs acc)
combine ((_, _):_)          acc = error
bj' :: CSP -> Transform (State, ConflictSet) (State, ConflictSet)
bj' csp = foldTree f
  where f (a, Known cs) chs = Node (a,Known cs) chs
        f (a, Unknown) chs =
          let cs' = Known (combine (map label chs) []) in
          if knownConflict cs' then Node (a,cs') [] else Node (a,cs') chs
-------------------------------
-- Figure 11. Forward checking.
-------------------------------
fc :: Labeler
fc csp = domainWipeOut csp . lookupCache csp . cacheChecks csp (emptyTable csp)
collect :: [ConflictSet] -> [Var]
collect [] = []
collect ((Known cs):css) = union cs (collect css)
collect (_:css) = error
domainWipeOut :: CSP -> Transform ((State, ConflictSet), Table) (State, ConflictSet)
domainWipeOut (CSP vars vals rel) t = mapTree f t
  where
    f ((as, cs), tbl) =
      let wipedDomains = ([vs | vs <- tbl, all (knownConflict) vs]) in
      let cs' = if null wipedDomains then cs else Known (collect (head wipedDomains)) in
      (as, cs')
try n algorithm = length (search algorithm (queens n))
testConstraints_nofib n = map (try n) [bt, bm, bjbt, bjbt', fc]
testConstraints_nofib $ primId 6
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> after expansion >>>>>>>>>>
//│ testConstraints_nofib_lh_₁(primId⁰(6))
//│ def abs_lh_₁(_lh_abs_arg1⁰) = if (_lh_abs_arg1⁰ > 0) then _lh_abs_arg1⁰ else (0 - _lh_abs_arg1⁰)
//│ def all_lh_₁(_lh_all_arg1⁰, _lh_all_arg2⁰) = case _lh_all_arg2⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0⁰ _lh_all_LH_C_1⁰ => if _lh_all_arg1⁰(_lh_all_LH_C_0⁰) then all_lh_₁(_lh_all_arg1⁰, _lh_all_LH_C_1⁰) else [False]}
//│ def atIndex_lh_₁(n¹, ls²²) = if (n¹ < 0) then error⁰ else case ls²² of {
//│ 	LH_C h²³ t²³ => if (n¹ == 0) then h²³ else atIndex_lh_₁((n¹ - 1), t²³)
//│ 	| LH_N  => error⁰}
//│ def atIndex_lh_₂(n⁰, ls¹⁷) = if (n⁰ < 0) then error⁰ else case ls¹⁷ of {
//│ 	LH_C h¹⁸ t¹⁸ => if (n⁰ == 0) then h¹⁸ else atIndex_lh_₂((n⁰ - 1), t¹⁸)
//│ 	| LH_N  => error⁰}
//│ def bj'_lh_₁(_lh_bj'_arg1⁰) = 
//│ 	let f²⁶ = (fun _lh_f_arg1¹ -> (fun _lh_f_arg2¹ -> case _lh_f_arg1¹ of {
//│ 		LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => case _lh_f_LH_P2_1¹ of {
//│ 			Known _lh_f_Known_0¹ => [Node [LH_P2 _lh_f_LH_P2_0¹ [Known _lh_f_Known_0¹]] _lh_f_arg2¹]
//│ 			| Unknown  => 
//│ 				let cs'⁰ = [Known combine_lh_₁(map_lh_₆(label_lh_₁, _lh_f_arg2¹), [LH_N])]
//│ 				in if knownConflict_lh_₂(cs'⁰) then [Node [LH_P2 _lh_f_LH_P2_0¹ cs'⁰] [LH_N]] else [Node [LH_P2 _lh_f_LH_P2_0¹ cs'⁰] _lh_f_arg2¹]}}))
//│ 	in foldTree_lh_₁(f²⁶)
//│ def bj_lh_₁(_lh_bj_arg1⁰) = 
//│ 	let f²⁵ = (fun _lh_f_arg1⁰ -> (fun _lh_f_arg2⁰ -> case _lh_f_arg1⁰ of {
//│ 		LH_P2 _lh_f_LH_P2_0⁰ _lh_f_LH_P2_1⁰ => case _lh_f_LH_P2_1⁰ of {
//│ 			Known _lh_f_Known_0⁰ => [Node [LH_P2 _lh_f_LH_P2_0⁰ [Known _lh_f_Known_0⁰]] _lh_f_arg2⁰]
//│ 			| Unknown  => [Node [LH_P2 _lh_f_LH_P2_0⁰ [Known combine_lh_₂(map_lh_₈(label_lh_₂, _lh_f_arg2⁰), [LH_N])]] _lh_f_arg2⁰]}}))
//│ 	in foldTree_lh_₂(f²⁵)
//│ def bjbt'_lh_₁(_lh_bjbt'_arg1⁰, _lh_funcomp_x¹³) = bj'_lh_₁(_lh_bjbt'_arg1⁰, bt_lh_₂(_lh_bjbt'_arg1⁰, _lh_funcomp_x¹³))
//│ def bjbt_lh_₁(_lh_bjbt_arg1⁰, _lh_funcomp_x¹²) = bj_lh_₁(_lh_bjbt_arg1⁰, bt_lh_₃(_lh_bjbt_arg1⁰, _lh_funcomp_x¹²))
//│ def bm_lh_₁(_lh_bm_arg1⁰, _lh_funcomp_x¹⁶) = (fun _lh_funcomp_x¹⁷ -> mapTree_lh_₂(fst_lh_₁, lookupCache_lh_₁(_lh_bm_arg1⁰, _lh_funcomp_x¹⁷)))(cacheChecks_lh_₁(_lh_bm_arg1⁰, emptyTable_lh_₁(_lh_bm_arg1⁰), _lh_funcomp_x¹⁶))
//│ def bt_lh_₁(_lh_bt_arg1²) = 
//│ 	let f³¹ = (fun s² -> [LH_P2 s² 
//│ 		let _lh_matchIdent⁷ = earliestInconsistency_lh_₁(_lh_bt_arg1², s²)
//│ 		in case _lh_matchIdent⁷ of {
//│ 			Nothing  => checkComplete_lh_₁(_lh_bt_arg1², s²)
//│ 			| Just _lh_bt_Just_0² => case _lh_bt_Just_0² of {
//│ 				LH_P2 _lh_bt_LH_P2_0² _lh_bt_LH_P2_1² => [Known [LH_C _lh_bt_LH_P2_0² [LH_C _lh_bt_LH_P2_1² [LH_N]]]]}}])
//│ 	in mapTree_lh_₁(f³¹)
//│ def bt_lh_₂(_lh_bt_arg1¹) = 
//│ 	let f²⁷ = (fun s¹ -> [LH_P2 s¹ 
//│ 		let _lh_matchIdent⁵ = earliestInconsistency_lh_₂(_lh_bt_arg1¹, s¹)
//│ 		in case _lh_matchIdent⁵ of {
//│ 			Nothing  => checkComplete_lh_₄(_lh_bt_arg1¹, s¹)
//│ 			| Just _lh_bt_Just_0¹ => case _lh_bt_Just_0¹ of {
//│ 				LH_P2 _lh_bt_LH_P2_0¹ _lh_bt_LH_P2_1¹ => [Known [LH_C _lh_bt_LH_P2_0¹ [LH_C _lh_bt_LH_P2_1¹ [LH_N]]]]}}])
//│ 	in mapTree_lh_₆(f²⁷)
//│ def bt_lh_₃(_lh_bt_arg1⁰) = 
//│ 	let f²⁴ = (fun s⁰ -> [LH_P2 s⁰ 
//│ 		let _lh_matchIdent⁴ = earliestInconsistency_lh_₃(_lh_bt_arg1⁰, s⁰)
//│ 		in case _lh_matchIdent⁴ of {
//│ 			Nothing  => checkComplete_lh_₅(_lh_bt_arg1⁰, s⁰)
//│ 			| Just _lh_bt_Just_0⁰ => case _lh_bt_Just_0⁰ of {
//│ 				LH_P2 _lh_bt_LH_P2_0⁰ _lh_bt_LH_P2_1⁰ => [Known [LH_C _lh_bt_LH_P2_0⁰ [LH_C _lh_bt_LH_P2_1⁰ [LH_N]]]]}}])
//│ 	in mapTree_lh_₇(f²⁴)
//│ def cacheChecks_lh_₁(_lh_cacheChecks_arg1¹, _lh_cacheChecks_arg2¹, _lh_cacheChecks_arg3¹) = case _lh_cacheChecks_arg3¹ of {
//│ 	Node _lh_cacheChecks_Node_0¹ _lh_cacheChecks_Node_1¹ => [Node [LH_P2 _lh_cacheChecks_Node_0¹ _lh_cacheChecks_arg2¹] map_lh_₃(cacheChecks_lh_₁(_lh_cacheChecks_arg1¹, fillTable_lh_₁(_lh_cacheChecks_Node_0¹, _lh_cacheChecks_arg1¹, tail_lh_₁(_lh_cacheChecks_arg2¹))), _lh_cacheChecks_Node_1¹)]}
//│ def cacheChecks_lh_₂(_lh_cacheChecks_arg1⁰, _lh_cacheChecks_arg2⁰, _lh_cacheChecks_arg3⁰) = case _lh_cacheChecks_arg3⁰ of {
//│ 	Node _lh_cacheChecks_Node_0⁰ _lh_cacheChecks_Node_1⁰ => [Node [LH_P2 _lh_cacheChecks_Node_0⁰ _lh_cacheChecks_arg2⁰] map_lh_₅(cacheChecks_lh_₂(_lh_cacheChecks_arg1⁰, fillTable_lh_₂(_lh_cacheChecks_Node_0⁰, _lh_cacheChecks_arg1⁰, tail_lh_₂(_lh_cacheChecks_arg2⁰))), _lh_cacheChecks_Node_1⁰)]}
//│ def checkComplete_lh_₁(_lh_checkComplete_arg1⁴, _lh_checkComplete_arg2⁴) = if complete_lh_₁(_lh_checkComplete_arg1⁴, _lh_checkComplete_arg2⁴) then [Known [LH_N]] else [Unknown]
//│ def checkComplete_lh_₂(_lh_checkComplete_arg1³, _lh_checkComplete_arg2³) = if complete_lh_₂(_lh_checkComplete_arg1³, _lh_checkComplete_arg2³) then [Known [LH_N]] else [Unknown]
//│ def checkComplete_lh_₃(_lh_checkComplete_arg1², _lh_checkComplete_arg2²) = if complete_lh_₃(_lh_checkComplete_arg1², _lh_checkComplete_arg2²) then [Known [LH_N]] else [Unknown]
//│ def checkComplete_lh_₄(_lh_checkComplete_arg1¹, _lh_checkComplete_arg2¹) = if complete_lh_₄(_lh_checkComplete_arg1¹, _lh_checkComplete_arg2¹) then [Known [LH_N]] else [Unknown]
//│ def checkComplete_lh_₅(_lh_checkComplete_arg1⁰, _lh_checkComplete_arg2⁰) = if complete_lh_₄(_lh_checkComplete_arg1⁰, _lh_checkComplete_arg2⁰) then [Known [LH_N]] else [Unknown]
//│ def collect_lh_₁(_lh_collect_arg1⁰) = case _lh_collect_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_collect_LH_C_0⁰ _lh_collect_LH_C_1⁰ => case _lh_collect_LH_C_0⁰ of {
//│ 		Known _lh_collect_Known_0⁰ => union_lh_₁(_lh_collect_Known_0⁰, collect_lh_₁(_lh_collect_LH_C_1⁰))
//│ 		| _  => error⁰}}
//│ def combine_lh_₁(_lh_combine_arg1¹, _lh_combine_arg2¹) = case _lh_combine_arg1¹ of {
//│ 	LH_N  => _lh_combine_arg2¹
//│ 	| LH_C _lh_combine_LH_C_0¹ _lh_combine_LH_C_1¹ => case _lh_combine_LH_C_0¹ of {
//│ 		LH_P2 _lh_combine_LH_P2_0¹ _lh_combine_LH_P2_1¹ => case _lh_combine_LH_P2_1¹ of {
//│ 			Known _lh_combine_Known_0¹ => if notElem_lh_₁(maxLevel_lh_₂(_lh_combine_LH_P2_0¹), _lh_combine_Known_0¹) then _lh_combine_Known_0¹ else combine_lh_₁(_lh_combine_LH_C_1¹, union_lh_₂(_lh_combine_Known_0¹, _lh_combine_arg2¹))
//│ 			| _  => error⁰}}}
//│ def combine_lh_₂(_lh_combine_arg1⁰, _lh_combine_arg2⁰) = case _lh_combine_arg1⁰ of {
//│ 	LH_N  => _lh_combine_arg2⁰
//│ 	| LH_C _lh_combine_LH_C_0⁰ _lh_combine_LH_C_1⁰ => case _lh_combine_LH_C_0⁰ of {
//│ 		LH_P2 _lh_combine_LH_P2_0⁰ _lh_combine_LH_P2_1⁰ => case _lh_combine_LH_P2_1⁰ of {
//│ 			Known _lh_combine_Known_0⁰ => if notElem_lh_₁(maxLevel_lh_₄(_lh_combine_LH_P2_0⁰), _lh_combine_Known_0⁰) then _lh_combine_Known_0⁰ else combine_lh_₂(_lh_combine_LH_C_1⁰, union_lh_₂(_lh_combine_Known_0⁰, _lh_combine_arg2⁰))
//│ 			| _  => error⁰}}}
//│ def complete_lh_₁(_lh_complete_arg1³, _lh_complete_arg2³) = case _lh_complete_arg1³ of {
//│ 	CSP _lh_complete_CSP_0³ _lh_complete_CSP_1³ _lh_complete_CSP_2³ => (maxLevel_lh_₁(_lh_complete_arg2³) == _lh_complete_CSP_0³)}
//│ def complete_lh_₂(_lh_complete_arg1², _lh_complete_arg2²) = case _lh_complete_arg1² of {
//│ 	CSP _lh_complete_CSP_0² _lh_complete_CSP_1² _lh_complete_CSP_2² => (maxLevel_lh_₄(_lh_complete_arg2²) == _lh_complete_CSP_0²)}
//│ def complete_lh_₃(_lh_complete_arg1¹, _lh_complete_arg2¹) = case _lh_complete_arg1¹ of {
//│ 	CSP _lh_complete_CSP_0¹ _lh_complete_CSP_1¹ _lh_complete_CSP_2¹ => (maxLevel_lh_₄(_lh_complete_arg2¹) == _lh_complete_CSP_0¹)}
//│ def complete_lh_₄(_lh_complete_arg1⁰, _lh_complete_arg2⁰) = case _lh_complete_arg1⁰ of {
//│ 	CSP _lh_complete_CSP_0⁰ _lh_complete_CSP_1⁰ _lh_complete_CSP_2⁰ => (maxLevel_lh_₄(_lh_complete_arg2⁰) == _lh_complete_CSP_0⁰)}
//│ def concat_lh_₁(lss⁰) = case lss⁰ of {
//│ 	LH_C h³ t³ => mappend_lh_₁(h³, concat_lh_₁(t³))
//│ 	| LH_N  => [LH_N]}
//│ def deleteBy_lh_₁(_lh_deleteBy_arg1⁰, _lh_deleteBy_arg2⁰, _lh_deleteBy_arg3⁰) = case _lh_deleteBy_arg3⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_deleteBy_LH_C_0⁰ _lh_deleteBy_LH_C_1⁰ => if _lh_deleteBy_arg1⁰(_lh_deleteBy_arg2⁰, _lh_deleteBy_LH_C_0⁰) then _lh_deleteBy_LH_C_1⁰ else [LH_C _lh_deleteBy_LH_C_0⁰ deleteBy_lh_₁(_lh_deleteBy_arg1⁰, _lh_deleteBy_arg2⁰, _lh_deleteBy_LH_C_1⁰)]}
//│ def domainWipeOut_lh_₁(_lh_domainWipeOut_arg1⁰, _lh_domainWipeOut_arg2⁰) = case _lh_domainWipeOut_arg1⁰ of {
//│ 	CSP _lh_domainWipeOut_CSP_0⁰ _lh_domainWipeOut_CSP_1⁰ _lh_domainWipeOut_CSP_2⁰ => 
//│ 		let f²⁸ = (fun _lh_f_arg1² -> case _lh_f_arg1² of {
//│ 			LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1² => case _lh_f_LH_P2_0² of {
//│ 				LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => 
//│ 					let wipedDomains⁰ = 	
//│ 						let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 							LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => if all_lh_₁(knownConflict_lh_₁, _lh_listcomp_fun_ls_h⁷) then [LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)
//│ 							| LH_N  => [LH_N]})
//│ 						in _lh_listcomp_fun⁷(_lh_f_LH_P2_1²)
//│ 					in let cs'¹ = if null_lh_₁(wipedDomains⁰) then _lh_f_LH_P2_1³ else [Known collect_lh_₁(head_lh_₃(wipedDomains⁰))]
//│ 					in [LH_P2 _lh_f_LH_P2_0³ cs'¹]}})
//│ 		in mapTree_lh_₅(f²⁸, _lh_domainWipeOut_arg2⁰)}
//│ def earliestInconsistency_lh_₁(_lh_earliestInconsistency_arg1², _lh_earliestInconsistency_arg2²) = case _lh_earliestInconsistency_arg1² of {
//│ 	CSP _lh_earliestInconsistency_CSP_0² _lh_earliestInconsistency_CSP_1² _lh_earliestInconsistency_CSP_2² => case _lh_earliestInconsistency_arg2² of {
//│ 		LH_N  => [Nothing]
//│ 		| LH_C _lh_earliestInconsistency_LH_C_0⁴ _lh_earliestInconsistency_LH_C_1⁴ => 
//│ 			let _lh_matchIdent⁶ = filter_lh_₁((fun _lh_funcomp_x¹¹ -> not⁰(_lh_earliestInconsistency_CSP_2²(_lh_earliestInconsistency_LH_C_0⁴, _lh_funcomp_x¹¹))), reverse_lh_₁(_lh_earliestInconsistency_LH_C_1⁴))
//│ 			in case _lh_matchIdent⁶ of {
//│ 				LH_N  => [Nothing]
//│ 				| LH_C _lh_earliestInconsistency_LH_C_0⁵ _lh_earliestInconsistency_LH_C_1⁵ => [Just [LH_P2 level_lh_₁(_lh_earliestInconsistency_LH_C_0⁴) level_lh_₂(_lh_earliestInconsistency_LH_C_0⁵)]]}}}
//│ def earliestInconsistency_lh_₂(_lh_earliestInconsistency_arg1¹, _lh_earliestInconsistency_arg2¹) = case _lh_earliestInconsistency_arg1¹ of {
//│ 	CSP _lh_earliestInconsistency_CSP_0¹ _lh_earliestInconsistency_CSP_1¹ _lh_earliestInconsistency_CSP_2¹ => case _lh_earliestInconsistency_arg2¹ of {
//│ 		LH_N  => [Nothing]
//│ 		| LH_C _lh_earliestInconsistency_LH_C_0² _lh_earliestInconsistency_LH_C_1² => 
//│ 			let _lh_matchIdent¹ = filter_lh_₃((fun _lh_funcomp_x³ -> not⁰(_lh_earliestInconsistency_CSP_2¹(_lh_earliestInconsistency_LH_C_0², _lh_funcomp_x³))), reverse_lh_₂(_lh_earliestInconsistency_LH_C_1²))
//│ 			in case _lh_matchIdent¹ of {
//│ 				LH_N  => [Nothing]
//│ 				| LH_C _lh_earliestInconsistency_LH_C_0³ _lh_earliestInconsistency_LH_C_1³ => [Just [LH_P2 level_lh_₃(_lh_earliestInconsistency_LH_C_0²) level_lh_₄(_lh_earliestInconsistency_LH_C_0³)]]}}}
//│ def earliestInconsistency_lh_₃(_lh_earliestInconsistency_arg1⁰, _lh_earliestInconsistency_arg2⁰) = case _lh_earliestInconsistency_arg1⁰ of {
//│ 	CSP _lh_earliestInconsistency_CSP_0⁰ _lh_earliestInconsistency_CSP_1⁰ _lh_earliestInconsistency_CSP_2⁰ => case _lh_earliestInconsistency_arg2⁰ of {
//│ 		LH_N  => [Nothing]
//│ 		| LH_C _lh_earliestInconsistency_LH_C_0⁰ _lh_earliestInconsistency_LH_C_1⁰ => 
//│ 			let _lh_matchIdent⁰ = filter_lh_₃((fun _lh_funcomp_x¹ -> not⁰(_lh_earliestInconsistency_CSP_2⁰(_lh_earliestInconsistency_LH_C_0⁰, _lh_funcomp_x¹))), reverse_lh_₂(_lh_earliestInconsistency_LH_C_1⁰))
//│ 			in case _lh_matchIdent⁰ of {
//│ 				LH_N  => [Nothing]
//│ 				| LH_C _lh_earliestInconsistency_LH_C_0¹ _lh_earliestInconsistency_LH_C_1¹ => [Just [LH_P2 level_lh_₄(_lh_earliestInconsistency_LH_C_0⁰) level_lh_₄(_lh_earliestInconsistency_LH_C_0¹)]]}}}
//│ def emptyTable_lh_₁(_lh_emptyTable_arg1¹) = case _lh_emptyTable_arg1¹ of {
//│ 	CSP _lh_emptyTable_CSP_0¹ _lh_emptyTable_CSP_1¹ _lh_emptyTable_CSP_2¹ => [LH_C [LH_N] 
//│ 		let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C 
//│ 				let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {
//│ 					LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => [LH_C [Unknown] _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)]
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun⁹(enumFromTo_lh_₂(1, _lh_emptyTable_CSP_1¹)) _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁸(enumFromTo_lh_₁(1, _lh_emptyTable_CSP_0¹))]}
//│ def emptyTable_lh_₂(_lh_emptyTable_arg1⁰) = case _lh_emptyTable_arg1⁰ of {
//│ 	CSP _lh_emptyTable_CSP_0⁰ _lh_emptyTable_CSP_1⁰ _lh_emptyTable_CSP_2⁰ => [LH_C [LH_N] 
//│ 		let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => [LH_C 
//│ 				let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 					LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [Unknown] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)]
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun⁶(enumFromTo_lh_₄(1, _lh_emptyTable_CSP_1⁰)) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁵(enumFromTo_lh_₃(1, _lh_emptyTable_CSP_0⁰))]}
//│ def enumFromTo_lh_₁(a¹², b¹⁰) = if (a¹² <= b¹⁰) then [LH_C a¹² enumFromTo_lh_₁((a¹² + 1), b¹⁰)] else [LH_N]
//│ def enumFromTo_lh_₂(a¹¹, b⁹) = if (a¹¹ <= b⁹) then [LH_C a¹¹ enumFromTo_lh_₂((a¹¹ + 1), b⁹)] else [LH_N]
//│ def enumFromTo_lh_₃(a¹⁰, b⁸) = if (a¹⁰ <= b⁸) then [LH_C a¹⁰ enumFromTo_lh_₃((a¹⁰ + 1), b⁸)] else [LH_N]
//│ def enumFromTo_lh_₄(a⁹, b⁷) = if (a⁹ <= b⁷) then [LH_C a⁹ enumFromTo_lh_₄((a⁹ + 1), b⁷)] else [LH_N]
//│ def enumFromTo_lh_₅(a⁷, b⁶) = if (a⁷ <= b⁶) then [LH_C a⁷ enumFromTo_lh_₅((a⁷ + 1), b⁶)] else [LH_N]
//│ def enumFromTo_lh_₆(a⁶, b⁵) = if (a⁶ <= b⁵) then [LH_C a⁶ enumFromTo_lh_₆((a⁶ + 1), b⁵)] else [LH_N]
//│ def enumFromTo_lh_₇(a⁵, b⁴) = if (a⁵ <= b⁴) then [LH_C a⁵ enumFromTo_lh_₇((a⁵ + 1), b⁴)] else [LH_N]
//│ def enumFromTo_lh_₈(a⁴, b³) = if (a⁴ <= b³) then [LH_C a⁴ enumFromTo_lh_₈((a⁴ + 1), b³)] else [LH_N]
//│ def enumFromTo_lh_₉(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh_₉((a⁰ + 1), b⁰)] else [LH_N]
//│ def fc_lh_₁(_lh_fc_arg1⁰, _lh_funcomp_x¹⁴) = (fun _lh_funcomp_x¹⁵ -> domainWipeOut_lh_₁(_lh_fc_arg1⁰, lookupCache_lh_₂(_lh_fc_arg1⁰, _lh_funcomp_x¹⁵)))(cacheChecks_lh_₂(_lh_fc_arg1⁰, emptyTable_lh_₂(_lh_fc_arg1⁰), _lh_funcomp_x¹⁴))
//│ def fillTable_lh_₁(_lh_fillTable_arg1¹, _lh_fillTable_arg2¹, _lh_fillTable_arg3¹) = case _lh_fillTable_arg1¹ of {
//│ 	LH_N  => _lh_fillTable_arg3¹
//│ 	| LH_C _lh_fillTable_LH_C_0¹ _lh_fillTable_LH_C_1¹ => case _lh_fillTable_LH_C_0¹ of {
//│ 		Assign _lh_fillTable_Assign_0¹ _lh_fillTable_Assign_1¹ => case _lh_fillTable_arg2¹ of {
//│ 			CSP _lh_fillTable_CSP_0¹ _lh_fillTable_CSP_1¹ _lh_fillTable_CSP_2¹ => 
//│ 				let f²¹ = (fun cs² -> (fun varval¹ -> 
//│ 					let _lh_matchIdent³ = varval¹
//│ 					in case _lh_matchIdent³ of {
//│ 						LH_P2 _lh_fillTable_LH_P2_0¹ _lh_fillTable_LH_P2_1¹ => if (polyEq⁰(cs², [Unknown]) && not⁰(_lh_fillTable_CSP_2¹([Assign _lh_fillTable_Assign_0¹ _lh_fillTable_Assign_1¹], [Assign _lh_fillTable_LH_P2_0¹ _lh_fillTable_LH_P2_1¹]))) then [Known [LH_C _lh_fillTable_Assign_0¹ [LH_C _lh_fillTable_LH_P2_0¹ [LH_N]]]] else cs²}))
//│ 				in zipWith_lh_₁(zipWith_lh_₂(f²¹), _lh_fillTable_arg3¹, 
//│ 					let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 						LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C 
//│ 							let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 								LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]
//│ 								| LH_N  => [LH_N]})
//│ 							in _lh_listcomp_fun⁴(enumFromTo_lh_₅(1, _lh_fillTable_CSP_1¹)) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun³(enumFromTo_lh_₆((_lh_fillTable_Assign_0¹ + 1), _lh_fillTable_CSP_0¹)))}}}
//│ def fillTable_lh_₂(_lh_fillTable_arg1⁰, _lh_fillTable_arg2⁰, _lh_fillTable_arg3⁰) = case _lh_fillTable_arg1⁰ of {
//│ 	LH_N  => _lh_fillTable_arg3⁰
//│ 	| LH_C _lh_fillTable_LH_C_0⁰ _lh_fillTable_LH_C_1⁰ => case _lh_fillTable_LH_C_0⁰ of {
//│ 		Assign _lh_fillTable_Assign_0⁰ _lh_fillTable_Assign_1⁰ => case _lh_fillTable_arg2⁰ of {
//│ 			CSP _lh_fillTable_CSP_0⁰ _lh_fillTable_CSP_1⁰ _lh_fillTable_CSP_2⁰ => 
//│ 				let f¹⁸ = (fun cs¹ -> (fun varval⁰ -> 
//│ 					let _lh_matchIdent² = varval⁰
//│ 					in case _lh_matchIdent² of {
//│ 						LH_P2 _lh_fillTable_LH_P2_0⁰ _lh_fillTable_LH_P2_1⁰ => if (polyEq⁰(cs¹, [Unknown]) && not⁰(_lh_fillTable_CSP_2⁰([Assign _lh_fillTable_Assign_0⁰ _lh_fillTable_Assign_1⁰], [Assign _lh_fillTable_LH_P2_0⁰ _lh_fillTable_LH_P2_1⁰]))) then [Known [LH_C _lh_fillTable_Assign_0⁰ [LH_C _lh_fillTable_LH_P2_0⁰ [LH_N]]]] else cs¹}))
//│ 				in zipWith_lh_₃(zipWith_lh_₄(f¹⁸), _lh_fillTable_arg3⁰, 
//│ 					let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 						LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C 
//│ 							let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 								LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]
//│ 								| LH_N  => [LH_N]})
//│ 							in _lh_listcomp_fun²(enumFromTo_lh_₇(1, _lh_fillTable_CSP_1⁰)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun¹(enumFromTo_lh_₈((_lh_fillTable_Assign_0⁰ + 1), _lh_fillTable_CSP_0⁰)))}}}
//│ def filterTree_lh_₁(_lh_filterTree_arg1⁰) = 
//│ 	let f¹ = (fun a¹ -> (fun cs⁰ -> [Node a¹ filter_lh_₃((fun _lh_funcomp_x⁰ -> _lh_filterTree_arg1⁰(label_lh_₂(_lh_funcomp_x⁰))), cs⁰)]))
//│ 	in foldTree_lh_₂(f¹)
//│ def filter_lh_₁(f²³, ls²⁶) = case ls²⁶ of {
//│ 	LH_C h²⁶ t²⁶ => if f²³(h²⁶) then [LH_C h²⁶ filter_lh_₁(f²³, t²⁶)] else filter_lh_₁(f²³, t²⁶)
//│ 	| LH_N  => [LH_N]}
//│ def filter_lh_₂(f¹⁴, ls¹¹) = case ls¹¹ of {
//│ 	LH_C h¹² t¹² => if f¹⁴(h¹²) then [LH_C h¹² filter_lh_₂(f¹⁴, t¹²)] else filter_lh_₂(f¹⁴, t¹²)
//│ 	| LH_N  => [LH_N]}
//│ def filter_lh_₃(f⁵, ls⁵) = case ls⁵ of {
//│ 	LH_C h⁶ t⁶ => if f⁵(h⁶) then [LH_C h⁶ filter_lh_₃(f⁵, t⁶)] else filter_lh_₃(f⁵, t⁶)
//│ 	| LH_N  => [LH_N]}
//│ def flip_lh_₁(_lh_flip_arg1⁰, _lh_flip_arg2⁰, _lh_flip_arg3⁰) = _lh_flip_arg1⁰(_lh_flip_arg3⁰, _lh_flip_arg2⁰)
//│ def foldTree_lh_₁(_lh_foldTree_arg1¹, _lh_foldTree_arg2¹) = case _lh_foldTree_arg2¹ of {
//│ 	Node _lh_foldTree_Node_0¹ _lh_foldTree_Node_1¹ => _lh_foldTree_arg1¹(_lh_foldTree_Node_0¹, map_lh_₁₃(foldTree_lh_₁(_lh_foldTree_arg1¹), _lh_foldTree_Node_1¹))}
//│ def foldTree_lh_₂(_lh_foldTree_arg1⁰, _lh_foldTree_arg2⁰) = case _lh_foldTree_arg2⁰ of {
//│ 	Node _lh_foldTree_Node_0⁰ _lh_foldTree_Node_1⁰ => _lh_foldTree_arg1⁰(_lh_foldTree_Node_0⁰, map_lh_₁₄(foldTree_lh_₂(_lh_foldTree_arg1⁰), _lh_foldTree_Node_1⁰))}
//│ def foldl_lh_₁(f⁰, i⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => foldl_lh_₁(f⁰, f⁰(i⁰, h⁰), t⁰)
//│ 	| LH_N  => i⁰}
//│ def fst_lh_₁(_lh_fst_arg1¹) = case _lh_fst_arg1¹ of {
//│ 	LH_P2 _lh_fst_LH_P2_0¹ _lh_fst_LH_P2_1¹ => _lh_fst_LH_P2_0¹}
//│ def fst_lh_₂(_lh_fst_arg1⁰) = case _lh_fst_arg1⁰ of {
//│ 	LH_P2 _lh_fst_LH_P2_0⁰ _lh_fst_LH_P2_1⁰ => _lh_fst_LH_P2_0⁰}
//│ def head_lh_₁(ls²³) = case ls²³ of {
//│ 	LH_C h²⁴ t²⁴ => h²⁴
//│ 	| LH_N  => error⁰}
//│ def head_lh_₂(ls¹⁸) = case ls¹⁸ of {
//│ 	LH_C h¹⁹ t¹⁹ => h¹⁹
//│ 	| LH_N  => error⁰}
//│ def head_lh_₃(ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h¹⁵ t¹⁵ => h¹⁵
//│ 	| LH_N  => error⁰}
//│ def initTree_lh_₁(_lh_initTree_arg1⁰, _lh_initTree_arg2⁰) = [Node _lh_initTree_arg2⁰ map_lh_₁₄(initTree_lh_₁(_lh_initTree_arg1⁰), _lh_initTree_arg1⁰(_lh_initTree_arg2⁰))]
//│ def knownConflict_lh_₁(_lh_knownConflict_arg1²) = case _lh_knownConflict_arg1² of {
//│ 	Known _lh_knownConflict_Known_0² => case _lh_knownConflict_Known_0² of {
//│ 		LH_C _lh_knownConflict_LH_C_0² _lh_knownConflict_LH_C_1² => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def knownConflict_lh_₂(_lh_knownConflict_arg1¹) = case _lh_knownConflict_arg1¹ of {
//│ 	Known _lh_knownConflict_Known_0¹ => case _lh_knownConflict_Known_0¹ of {
//│ 		LH_C _lh_knownConflict_LH_C_0¹ _lh_knownConflict_LH_C_1¹ => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def knownConflict_lh_₃(_lh_knownConflict_arg1⁰) = case _lh_knownConflict_arg1⁰ of {
//│ 	Known _lh_knownConflict_Known_0⁰ => case _lh_knownConflict_Known_0⁰ of {
//│ 		LH_C _lh_knownConflict_LH_C_0⁰ _lh_knownConflict_LH_C_1⁰ => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def knownSolution_lh_₁(_lh_knownSolution_arg1⁰) = case _lh_knownSolution_arg1⁰ of {
//│ 	Known _lh_knownSolution_Known_0⁰ => case _lh_knownSolution_Known_0⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def label_lh_₁(_lh_label_arg1¹) = case _lh_label_arg1¹ of {
//│ 	Node _lh_label_Node_0¹ _lh_label_Node_1¹ => _lh_label_Node_0¹}
//│ def label_lh_₂(_lh_label_arg1⁰) = case _lh_label_arg1⁰ of {
//│ 	Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => _lh_label_Node_0⁰}
//│ def leaves_lh_₁(_lh_leaves_arg1⁰) = case _lh_leaves_arg1⁰ of {
//│ 	Node _lh_leaves_Node_0⁰ _lh_leaves_Node_1⁰ => case _lh_leaves_Node_1⁰ of {
//│ 		LH_N  => [LH_C _lh_leaves_Node_0⁰ [LH_N]]
//│ 		| _  => concat_lh_₁(map_lh_₁₄(leaves_lh_₁, _lh_leaves_Node_1⁰))}}
//│ def length_lh_₁(ls²⁷) = case ls²⁷ of {
//│ 	LH_C h²⁷ t²⁷ => (1 + length_lh_₁(t²⁷))
//│ 	| LH_N  => 0}
//│ def level_lh_₁(_lh_level_arg1³) = case _lh_level_arg1³ of {
//│ 	Assign _lh_level_Assign_0³ _lh_level_Assign_1³ => _lh_level_Assign_0³}
//│ def level_lh_₂(_lh_level_arg1²) = case _lh_level_arg1² of {
//│ 	Assign _lh_level_Assign_0² _lh_level_Assign_1² => _lh_level_Assign_0²}
//│ def level_lh_₃(_lh_level_arg1¹) = case _lh_level_arg1¹ of {
//│ 	Assign _lh_level_Assign_0¹ _lh_level_Assign_1¹ => _lh_level_Assign_0¹}
//│ def level_lh_₄(_lh_level_arg1⁰) = case _lh_level_arg1⁰ of {
//│ 	Assign _lh_level_Assign_0⁰ _lh_level_Assign_1⁰ => _lh_level_Assign_0⁰}
//│ def lookupCache_lh_₁(_lh_lookupCache_arg1¹, _lh_lookupCache_arg2¹) = 
//│ 	let f³⁰ = (fun _lh_f_arg1⁴ -> (fun _lh_f_arg2³ -> case _lh_f_arg2³ of {
//│ 		LH_P2 _lh_f_LH_P2_0⁵ _lh_f_LH_P2_1⁵ => case _lh_f_LH_P2_0⁵ of {
//│ 			LH_N  => [LH_P2 [LH_P2 [LH_N] [Unknown]] _lh_f_LH_P2_1⁵]
//│ 			| LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹ => 
//│ 				let tableEntry¹ = atIndex_lh_₁((value_lh_₁(_lh_f_LH_C_0¹) - 1), head_lh_₁(_lh_f_LH_P2_1⁵))
//│ 				in let cs⁴ = if polyEq⁰(tableEntry¹, [Unknown]) then checkComplete_lh_₂(_lh_f_arg1⁴, [LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹]) else tableEntry¹
//│ 				in [LH_P2 [LH_P2 [LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹] cs⁴] _lh_f_LH_P2_1⁵]}}))
//│ 	in mapTree_lh_₃(f³⁰(_lh_lookupCache_arg1¹), _lh_lookupCache_arg2¹)
//│ def lookupCache_lh_₂(_lh_lookupCache_arg1⁰, _lh_lookupCache_arg2⁰) = 
//│ 	let f²⁹ = (fun _lh_f_arg1³ -> (fun _lh_f_arg2² -> case _lh_f_arg2² of {
//│ 		LH_P2 _lh_f_LH_P2_0⁴ _lh_f_LH_P2_1⁴ => case _lh_f_LH_P2_0⁴ of {
//│ 			LH_N  => [LH_P2 [LH_P2 [LH_N] [Unknown]] _lh_f_LH_P2_1⁴]
//│ 			| LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰ => 
//│ 				let tableEntry⁰ = atIndex_lh_₂((value_lh_₂(_lh_f_LH_C_0⁰) - 1), head_lh_₂(_lh_f_LH_P2_1⁴))
//│ 				in let cs³ = if polyEq⁰(tableEntry⁰, [Unknown]) then checkComplete_lh_₃(_lh_f_arg1³, [LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰]) else tableEntry⁰
//│ 				in [LH_P2 [LH_P2 [LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰] cs³] _lh_f_LH_P2_1⁴]}}))
//│ 	in mapTree_lh_₄(f²⁹(_lh_lookupCache_arg1⁰), _lh_lookupCache_arg2⁰)
//│ def mapTree_lh_₁(_lh_mapTree_arg1⁶, _lh_mapTree_arg2⁶) = case _lh_mapTree_arg2⁶ of {
//│ 	Node _lh_mapTree_Node_0⁶ _lh_mapTree_Node_1⁶ => [Node _lh_mapTree_arg1⁶(_lh_mapTree_Node_0⁶) map_lh_₂(mapTree_lh_₁(_lh_mapTree_arg1⁶), _lh_mapTree_Node_1⁶)]}
//│ def mapTree_lh_₂(_lh_mapTree_arg1⁵, _lh_mapTree_arg2⁵) = case _lh_mapTree_arg2⁵ of {
//│ 	Node _lh_mapTree_Node_0⁵ _lh_mapTree_Node_1⁵ => [Node _lh_mapTree_arg1⁵(_lh_mapTree_Node_0⁵) map_lh_₄(mapTree_lh_₂(_lh_mapTree_arg1⁵), _lh_mapTree_Node_1⁵)]}
//│ def mapTree_lh_₃(_lh_mapTree_arg1⁴, _lh_mapTree_arg2⁴) = case _lh_mapTree_arg2⁴ of {
//│ 	Node _lh_mapTree_Node_0⁴ _lh_mapTree_Node_1⁴ => [Node _lh_mapTree_arg1⁴(_lh_mapTree_Node_0⁴) map_lh_₉(mapTree_lh_₃(_lh_mapTree_arg1⁴), _lh_mapTree_Node_1⁴)]}
//│ def mapTree_lh_₄(_lh_mapTree_arg1³, _lh_mapTree_arg2³) = case _lh_mapTree_arg2³ of {
//│ 	Node _lh_mapTree_Node_0³ _lh_mapTree_Node_1³ => [Node _lh_mapTree_arg1³(_lh_mapTree_Node_0³) map_lh_₁₀(mapTree_lh_₄(_lh_mapTree_arg1³), _lh_mapTree_Node_1³)]}
//│ def mapTree_lh_₅(_lh_mapTree_arg1², _lh_mapTree_arg2²) = case _lh_mapTree_arg2² of {
//│ 	Node _lh_mapTree_Node_0² _lh_mapTree_Node_1² => [Node _lh_mapTree_arg1²(_lh_mapTree_Node_0²) map_lh_₁₁(mapTree_lh_₅(_lh_mapTree_arg1²), _lh_mapTree_Node_1²)]}
//│ def mapTree_lh_₆(_lh_mapTree_arg1¹, _lh_mapTree_arg2¹) = case _lh_mapTree_arg2¹ of {
//│ 	Node _lh_mapTree_Node_0¹ _lh_mapTree_Node_1¹ => [Node _lh_mapTree_arg1¹(_lh_mapTree_Node_0¹) map_lh_₁₂(mapTree_lh_₆(_lh_mapTree_arg1¹), _lh_mapTree_Node_1¹)]}
//│ def mapTree_lh_₇(_lh_mapTree_arg1⁰, _lh_mapTree_arg2⁰) = case _lh_mapTree_arg2⁰ of {
//│ 	Node _lh_mapTree_Node_0⁰ _lh_mapTree_Node_1⁰ => [Node _lh_mapTree_arg1⁰(_lh_mapTree_Node_0⁰) map_lh_₁₄(mapTree_lh_₇(_lh_mapTree_arg1⁰), _lh_mapTree_Node_1⁰)]}
//│ def map_lh_₁(f³², ls²⁸) = case ls²⁸ of {
//│ 	LH_C h²⁸ t²⁸ => [LH_C f³²(h²⁸) map_lh_₁(f³², t²⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₀(f⁹, ls⁷) = case ls⁷ of {
//│ 	LH_C h⁸ t⁸ => [LH_C f⁹(h⁸) map_lh_₁₀(f⁹, t⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₁(f⁶, ls⁶) = case ls⁶ of {
//│ 	LH_C h⁷ t⁷ => [LH_C f⁶(h⁷) map_lh_₁₁(f⁶, t⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₂(f⁴, ls³) = case ls³ of {
//│ 	LH_C h⁵ t⁵ => [LH_C f⁴(h⁵) map_lh_₁₂(f⁴, t⁵)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₃(f³, ls²) = case ls² of {
//│ 	LH_C h⁴ t⁴ => [LH_C f³(h⁴) map_lh_₁₃(f³, t⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₄(f², ls¹) = case ls¹ of {
//│ 	LH_C h² t² => [LH_C f²(h²) map_lh_₁₄(f², t²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f²², ls²⁴) = case ls²⁴ of {
//│ 	LH_C h²⁵ t²⁵ => [LH_C f²²(h²⁵) map_lh_₂(f²², t²⁵)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f²⁰, ls²⁰) = case ls²⁰ of {
//│ 	LH_C h²¹ t²¹ => [LH_C f²⁰(h²¹) map_lh_₃(f²⁰, t²¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f¹⁹, ls¹⁹) = case ls¹⁹ of {
//│ 	LH_C h²⁰ t²⁰ => [LH_C f¹⁹(h²⁰) map_lh_₄(f¹⁹, t²⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f¹⁷, ls¹⁵) = case ls¹⁵ of {
//│ 	LH_C h¹⁶ t¹⁶ => [LH_C f¹⁷(h¹⁶) map_lh_₅(f¹⁷, t¹⁶)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f¹⁶, ls¹³) = case ls¹³ of {
//│ 	LH_C h¹⁴ t¹⁴ => [LH_C f¹⁶(h¹⁴) map_lh_₆(f¹⁶, t¹⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₇(f¹⁵, ls¹²) = case ls¹² of {
//│ 	LH_C h¹³ t¹³ => [LH_C f¹⁵(h¹³) map_lh_₇(f¹⁵, t¹³)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₈(f¹³, ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h¹¹ t¹¹ => [LH_C f¹³(h¹¹) map_lh_₈(f¹³, t¹¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₉(f¹², ls⁸) = case ls⁸ of {
//│ 	LH_C h⁹ t⁹ => [LH_C f¹²(h⁹) map_lh_₉(f¹², t⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₁(t¹, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def maxLevel_lh_₁(_lh_maxLevel_arg1³) = case _lh_maxLevel_arg1³ of {
//│ 	LH_N  => 0
//│ 	| LH_C _lh_maxLevel_LH_C_0³ _lh_maxLevel_LH_C_1³ => case _lh_maxLevel_LH_C_0³ of {
//│ 		Assign _lh_maxLevel_Assign_0³ _lh_maxLevel_Assign_1³ => _lh_maxLevel_Assign_0³}}
//│ def maxLevel_lh_₂(_lh_maxLevel_arg1²) = case _lh_maxLevel_arg1² of {
//│ 	LH_N  => 0
//│ 	| LH_C _lh_maxLevel_LH_C_0² _lh_maxLevel_LH_C_1² => case _lh_maxLevel_LH_C_0² of {
//│ 		Assign _lh_maxLevel_Assign_0² _lh_maxLevel_Assign_1² => _lh_maxLevel_Assign_0²}}
//│ def maxLevel_lh_₃(_lh_maxLevel_arg1¹) = case _lh_maxLevel_arg1¹ of {
//│ 	LH_N  => 0
//│ 	| LH_C _lh_maxLevel_LH_C_0¹ _lh_maxLevel_LH_C_1¹ => case _lh_maxLevel_LH_C_0¹ of {
//│ 		Assign _lh_maxLevel_Assign_0¹ _lh_maxLevel_Assign_1¹ => _lh_maxLevel_Assign_0¹}}
//│ def maxLevel_lh_₄(_lh_maxLevel_arg1⁰) = case _lh_maxLevel_arg1⁰ of {
//│ 	LH_N  => 0
//│ 	| LH_C _lh_maxLevel_LH_C_0⁰ _lh_maxLevel_LH_C_1⁰ => case _lh_maxLevel_LH_C_0⁰ of {
//│ 		Assign _lh_maxLevel_Assign_0⁰ _lh_maxLevel_Assign_1⁰ => _lh_maxLevel_Assign_0⁰}}
//│ def mkTree_lh_₁(_lh_mkTree_arg1⁰) = case _lh_mkTree_arg1⁰ of {
//│ 	CSP _lh_mkTree_CSP_0⁰ _lh_mkTree_CSP_1⁰ _lh_mkTree_CSP_2⁰ => 
//│ 		let next⁰ = (fun ss⁰ -> if (maxLevel_lh_₃(ss⁰) < _lh_mkTree_CSP_0⁰) then 
//│ 			let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 				LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C [LH_C [Assign (maxLevel_lh_₄(ss⁰) + 1) _lh_listcomp_fun_ls_h⁰] ss⁰] _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 				| LH_N  => [LH_N]})
//│ 			in _lh_listcomp_fun⁰(enumFromTo_lh_₉(1, _lh_mkTree_CSP_1⁰)) else [LH_N])
//│ 		in initTree_lh_₁(next⁰, [LH_N])}
//│ def notElem_lh_₁(_lh_notElem_arg1⁰, _lh_notElem_arg2⁰) = case _lh_notElem_arg2⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_notElem_LH_C_0⁰ _lh_notElem_LH_C_1⁰ => if polyEq⁰(_lh_notElem_arg1⁰, _lh_notElem_LH_C_0⁰) then [False] else notElem_lh_₁(_lh_notElem_arg1⁰, _lh_notElem_LH_C_1⁰)}
//│ def nubBy_lh_₁(_lh_nubBy_arg1⁰, _lh_nubBy_arg2⁰) = case _lh_nubBy_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_nubBy_LH_C_0⁰ _lh_nubBy_LH_C_1⁰ => [LH_C _lh_nubBy_LH_C_0⁰ nubBy_lh_₁(_lh_nubBy_arg1⁰, filter_lh_₃((fun y⁰ -> not⁰(_lh_nubBy_arg1⁰(_lh_nubBy_LH_C_0⁰, y⁰))), _lh_nubBy_LH_C_1⁰))]}
//│ def null_lh_₁(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]}
//│ def prune_lh_₁(_lh_prune_arg1⁰) = filterTree_lh_₁((fun _lh_funcomp_x² -> not⁰(_lh_prune_arg1⁰(_lh_funcomp_x²))))
//│ def queens_lh_₁(_lh_queens_arg1⁰) = [CSP _lh_queens_arg1⁰ _lh_queens_arg1⁰ safe_lh_₁]
//│ def reverse_helper_lh_₁(ls⁹, a⁸) = case ls⁹ of {
//│ 	LH_C h¹⁰ t¹⁰ => reverse_helper_lh_₁(t¹⁰, [LH_C h¹⁰ a⁸])
//│ 	| LH_N  => a⁸}
//│ def reverse_lh_₁(ls²⁵) = reverse_helper_lh_₁(ls²⁵, [LH_N])
//│ def reverse_lh_₂(ls⁴) = reverse_helper_lh_₁(ls⁴, [LH_N])
//│ def safe_lh_₁(_lh_safe_arg1⁰, _lh_safe_arg2⁰) = case _lh_safe_arg1⁰ of {
//│ 	Assign _lh_safe_Assign_0⁰ _lh_safe_Assign_1⁰ => case _lh_safe_arg2⁰ of {
//│ 		Assign _lh_safe_Assign_0¹ _lh_safe_Assign_1¹ => ((_lh_safe_Assign_1⁰ /= _lh_safe_Assign_1¹) && (abs_lh_₁((_lh_safe_Assign_0⁰ - _lh_safe_Assign_0¹)) /= abs_lh_₁((_lh_safe_Assign_1⁰ - _lh_safe_Assign_1¹))))}}
//│ def search_lh_₁(_lh_search_arg1⁰, _lh_search_arg2⁰) = (fun _lh_funcomp_x⁴ -> (fun _lh_funcomp_x⁵ -> (fun _lh_funcomp_x⁶ -> (fun _lh_funcomp_x⁷ -> (fun _lh_funcomp_x⁸ -> map_lh_₇(fst_lh_₂, filter_lh_₂((fun _lh_funcomp_x⁹ -> knownSolution_lh_₁(snd_lh_₁(_lh_funcomp_x⁹))), _lh_funcomp_x⁸)))(leaves_lh_₁(_lh_funcomp_x⁷)))(prune_lh_₁((fun _lh_funcomp_x¹⁰ -> knownConflict_lh_₃(snd_lh_₂(_lh_funcomp_x¹⁰))), _lh_funcomp_x⁶)))(_lh_search_arg1⁰(_lh_search_arg2⁰, _lh_funcomp_x⁵)))(mkTree_lh_₁(_lh_funcomp_x⁴)))(_lh_search_arg2⁰)
//│ def snd_lh_₁(_lh_snd_arg1¹) = case _lh_snd_arg1¹ of {
//│ 	LH_P2 _lh_snd_LH_P2_0¹ _lh_snd_LH_P2_1¹ => _lh_snd_LH_P2_1¹}
//│ def snd_lh_₂(_lh_snd_arg1⁰) = case _lh_snd_arg1⁰ of {
//│ 	LH_P2 _lh_snd_LH_P2_0⁰ _lh_snd_LH_P2_1⁰ => _lh_snd_LH_P2_1⁰}
//│ def tail_lh_₁(ls²¹) = case ls²¹ of {
//│ 	LH_C h²² t²² => t²²
//│ 	| LH_N  => error⁰}
//│ def tail_lh_₂(ls¹⁶) = case ls¹⁶ of {
//│ 	LH_C h¹⁷ t¹⁷ => t¹⁷
//│ 	| LH_N  => error⁰}
//│ def testConstraints_nofib_lh_₁(_lh_testConstraints_nofib_arg1⁰) = map_lh_₁(try_lh_₁(_lh_testConstraints_nofib_arg1⁰), [LH_C bt_lh_₁ [LH_C bm_lh_₁ [LH_C bjbt_lh_₁ [LH_C bjbt'_lh_₁ [LH_C fc_lh_₁ [LH_N]]]]]])
//│ def try_lh_₁(_lh_try_arg1⁰, _lh_try_arg2⁰) = length_lh_₁(search_lh_₁(_lh_try_arg2⁰, queens_lh_₁(_lh_try_arg1⁰)))
//│ def unionBy_lh_₁(_lh_unionBy_arg1⁰, _lh_unionBy_arg2⁰, _lh_unionBy_arg3⁰) = mappend_lh_₁(_lh_unionBy_arg2⁰, foldl_lh_₁(flip_lh_₁(deleteBy_lh_₁(_lh_unionBy_arg1⁰)), nubBy_lh_₁(_lh_unionBy_arg1⁰, _lh_unionBy_arg3⁰), _lh_unionBy_arg2⁰))
//│ def union_lh_₁(_lh_union_arg1¹, _lh_union_arg2¹) = unionBy_lh_₁((fun a³ -> (fun b² -> polyEq⁰(a³, b²))), _lh_union_arg1¹, _lh_union_arg2¹)
//│ def union_lh_₂(_lh_union_arg1⁰, _lh_union_arg2⁰) = unionBy_lh_₁((fun a² -> (fun b¹ -> polyEq⁰(a², b¹))), _lh_union_arg1⁰, _lh_union_arg2⁰)
//│ def value_lh_₁(_lh_value_arg1¹) = case _lh_value_arg1¹ of {
//│ 	Assign _lh_value_Assign_0¹ _lh_value_Assign_1¹ => _lh_value_Assign_1¹}
//│ def value_lh_₂(_lh_value_arg1⁰) = case _lh_value_arg1⁰ of {
//│ 	Assign _lh_value_Assign_0⁰ _lh_value_Assign_1⁰ => _lh_value_Assign_1⁰}
//│ def zipWith_lh_₁(f¹¹, xs⁴, ys⁴) = case xs⁴ of {
//│ 	LH_C hx³ tx³ => case ys⁴ of {
//│ 		LH_C hy³ ty³ => [LH_C f¹¹(hx³, hy³) zipWith_lh_₁(f¹¹, tx³, ty³)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lh_₂(f¹⁰, xs³, ys³) = case xs³ of {
//│ 	LH_C hx² tx² => case ys³ of {
//│ 		LH_C hy² ty² => [LH_C f¹⁰(hx², hy²) zipWith_lh_₂(f¹⁰, tx², ty²)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lh_₃(f⁸, xs², ys²) = case xs² of {
//│ 	LH_C hx¹ tx¹ => case ys² of {
//│ 		LH_C hy¹ ty¹ => [LH_C f⁸(hx¹, hy¹) zipWith_lh_₃(f⁸, tx¹, ty¹)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lh_₄(f⁷, xs¹, ys¹) = case xs¹ of {
//│ 	LH_C hx⁰ tx⁰ => case ys¹ of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C f⁷(hx⁰, hy⁰) zipWith_lh_₄(f⁷, tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec reverse_helper_lh__d1 ls_9 a_8 =
//│ 		  (match ls_9 with
//│ 		    | `LH_C(h_1_0, t_1_0) -> 
//│ 		      ((reverse_helper_lh__d1 t_1_0) (`LH_C(h_1_0, a_8)))
//│ 		    | `LH_N -> 
//│ 		      a_8);;
//│ 		let rec reverse_lh__d1 ls_2_5 =
//│ 		  ((reverse_helper_lh__d1 ls_2_5) (`LH_N));;
//│ 		let rec level_lh__d1 _lh_level_arg1_3 =
//│ 		  (match _lh_level_arg1_3 with
//│ 		    | `Assign(_lh_level_Assign_0_3, _lh_level_Assign_1_3) -> 
//│ 		      _lh_level_Assign_0_3);;
//│ 		let rec filter_lh__d1 f_2_3 ls_2_6 =
//│ 		  (match ls_2_6 with
//│ 		    | `LH_C(h_2_6, t_2_6) -> 
//│ 		      (if (f_2_3 h_2_6) then
//│ 		        (`LH_C(h_2_6, ((filter_lh__d1 f_2_3) t_2_6)))
//│ 		      else
//│ 		        ((filter_lh__d1 f_2_3) t_2_6))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec level_lh__d2 _lh_level_arg1_2 =
//│ 		  (match _lh_level_arg1_2 with
//│ 		    | `Assign(_lh_level_Assign_0_2, _lh_level_Assign_1_2) -> 
//│ 		      _lh_level_Assign_0_2);;
//│ 		let rec earliestInconsistency_lh__d1 _lh_earliestInconsistency_arg1_2 _lh_earliestInconsistency_arg2_2 =
//│ 		  (match _lh_earliestInconsistency_arg1_2 with
//│ 		    | `CSP(_lh_earliestInconsistency_CSP_0_2, _lh_earliestInconsistency_CSP_1_2, _lh_earliestInconsistency_CSP_2_2) -> 
//│ 		      (match _lh_earliestInconsistency_arg2_2 with
//│ 		        | `LH_N -> 
//│ 		          (`Nothing)
//│ 		        | `LH_C(_lh_earliestInconsistency_LH_C_0_4, _lh_earliestInconsistency_LH_C_1_4) -> 
//│ 		          (let rec _lh_matchIdent_6 = ((filter_lh__d1 (fun _lh_funcomp_x_1_1 -> 
//│ 		            (not ((_lh_earliestInconsistency_CSP_2_2 _lh_earliestInconsistency_LH_C_0_4) _lh_funcomp_x_1_1)))) (reverse_lh__d1 _lh_earliestInconsistency_LH_C_1_4)) in
//│ 		            (match _lh_matchIdent_6 with
//│ 		              | `LH_N -> 
//│ 		                (`Nothing)
//│ 		              | `LH_C(_lh_earliestInconsistency_LH_C_0_5, _lh_earliestInconsistency_LH_C_1_5) -> 
//│ 		                (`Just((`LH_P2((level_lh__d1 _lh_earliestInconsistency_LH_C_0_4), (level_lh__d2 _lh_earliestInconsistency_LH_C_0_5)))))))));;
//│ 		let rec maxLevel_lh__d1 _lh_maxLevel_arg1_3 =
//│ 		  (match _lh_maxLevel_arg1_3 with
//│ 		    | `LH_N -> 
//│ 		      0
//│ 		    | `LH_C(_lh_maxLevel_LH_C_0_3, _lh_maxLevel_LH_C_1_3) -> 
//│ 		      (match _lh_maxLevel_LH_C_0_3 with
//│ 		        | `Assign(_lh_maxLevel_Assign_0_3, _lh_maxLevel_Assign_1_3) -> 
//│ 		          _lh_maxLevel_Assign_0_3));;
//│ 		let rec complete_lh__d1 _lh_complete_arg1_3 _lh_complete_arg2_3 =
//│ 		  (match _lh_complete_arg1_3 with
//│ 		    | `CSP(_lh_complete_CSP_0_3, _lh_complete_CSP_1_3, _lh_complete_CSP_2_3) -> 
//│ 		      ((maxLevel_lh__d1 _lh_complete_arg2_3) = _lh_complete_CSP_0_3));;
//│ 		let rec checkComplete_lh__d1 _lh_checkComplete_arg1_4 _lh_checkComplete_arg2_4 =
//│ 		  (if ((complete_lh__d1 _lh_checkComplete_arg1_4) _lh_checkComplete_arg2_4) then
//│ 		    (`Known((`LH_N)))
//│ 		  else
//│ 		    (`Unknown));;
//│ 		let rec map_lh__d2 f_2_2 ls_2_4 =
//│ 		  (match ls_2_4 with
//│ 		    | `LH_C(h_2_5, t_2_5) -> 
//│ 		      (`LH_C((f_2_2 h_2_5), ((map_lh__d2 f_2_2) t_2_5)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mapTree_lh__d1 _lh_mapTree_arg1_6 _lh_mapTree_arg2_6 =
//│ 		  (match _lh_mapTree_arg2_6 with
//│ 		    | `Node(_lh_mapTree_Node_0_6, _lh_mapTree_Node_1_6) -> 
//│ 		      (`Node((_lh_mapTree_arg1_6 _lh_mapTree_Node_0_6), ((map_lh__d2 (mapTree_lh__d1 _lh_mapTree_arg1_6)) _lh_mapTree_Node_1_6))));;
//│ 		let rec bt_lh__d1 _lh_bt_arg1_2 =
//│ 		  (let rec f_3_1 = (fun s_2 -> 
//│ 		    (`LH_P2(s_2, (let rec _lh_matchIdent_7 = ((earliestInconsistency_lh__d1 _lh_bt_arg1_2) s_2) in
//│ 		      (match _lh_matchIdent_7 with
//│ 		        | `Nothing -> 
//│ 		          ((checkComplete_lh__d1 _lh_bt_arg1_2) s_2)
//│ 		        | `Just(_lh_bt_Just_0_2) -> 
//│ 		          (match _lh_bt_Just_0_2 with
//│ 		            | `LH_P2(_lh_bt_LH_P2_0_2, _lh_bt_LH_P2_1_2) -> 
//│ 		              (`Known((`LH_C(_lh_bt_LH_P2_0_2, (`LH_C(_lh_bt_LH_P2_1_2, (`LH_N))))))))))))) in
//│ 		    (mapTree_lh__d1 f_3_1));;
//│ 		let rec map_lh__d1 f_3_2 ls_2_8 =
//│ 		  (match ls_2_8 with
//│ 		    | `LH_C(h_2_8, t_2_8) -> 
//│ 		      (`LH_C((f_3_2 h_2_8), ((map_lh__d1 f_3_2) t_2_8)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec knownConflict_lh__d1 _lh_knownConflict_arg1_2 =
//│ 		  (match _lh_knownConflict_arg1_2 with
//│ 		    | `Known(_lh_knownConflict_Known_0_2) -> 
//│ 		      (match _lh_knownConflict_Known_0_2 with
//│ 		        | `LH_C(_lh_knownConflict_LH_C_0_2, _lh_knownConflict_LH_C_1_2) -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec map_lh__d1_d1 f_6 ls_6 =
//│ 		  (match ls_6 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      (`LH_C((f_6 h_7), ((map_lh__d1_d1 f_6) t_7)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mapTree_lh__d5 _lh_mapTree_arg1_2 _lh_mapTree_arg2_2 =
//│ 		  (match _lh_mapTree_arg2_2 with
//│ 		    | `Node(_lh_mapTree_Node_0_2, _lh_mapTree_Node_1_2) -> 
//│ 		      (`Node((_lh_mapTree_arg1_2 _lh_mapTree_Node_0_2), ((map_lh__d1_d1 (mapTree_lh__d5 _lh_mapTree_arg1_2)) _lh_mapTree_Node_1_2))));;
//│ 		let rec filter_lh__d3 f_5 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      (if (f_5 h_6) then
//│ 		        (`LH_C(h_6, ((filter_lh__d3 f_5) t_6)))
//│ 		      else
//│ 		        ((filter_lh__d3 f_5) t_6))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec nubBy_lh__d1 _lh_nubBy_arg1_0 _lh_nubBy_arg2_0 =
//│ 		  (match _lh_nubBy_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_nubBy_LH_C_0_0, _lh_nubBy_LH_C_1_0) -> 
//│ 		      (`LH_C(_lh_nubBy_LH_C_0_0, ((nubBy_lh__d1 _lh_nubBy_arg1_0) ((filter_lh__d3 (fun y_0 -> 
//│ 		        (not ((_lh_nubBy_arg1_0 _lh_nubBy_LH_C_0_0) y_0)))) _lh_nubBy_LH_C_1_0)))));;
//│ 		let rec foldl_lh__d1 f_0 i_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (((foldl_lh__d1 f_0) ((f_0 i_0) h_0)) t_0)
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec mappend_lh__d1 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (`LH_C(h_1, ((mappend_lh__d1 t_1) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec flip_lh__d1 _lh_flip_arg1_0 _lh_flip_arg2_0 _lh_flip_arg3_0 =
//│ 		  ((_lh_flip_arg1_0 _lh_flip_arg3_0) _lh_flip_arg2_0);;
//│ 		let rec deleteBy_lh__d1 _lh_deleteBy_arg1_0 _lh_deleteBy_arg2_0 _lh_deleteBy_arg3_0 =
//│ 		  (match _lh_deleteBy_arg3_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_deleteBy_LH_C_0_0, _lh_deleteBy_LH_C_1_0) -> 
//│ 		      (if ((_lh_deleteBy_arg1_0 _lh_deleteBy_arg2_0) _lh_deleteBy_LH_C_0_0) then
//│ 		        _lh_deleteBy_LH_C_1_0
//│ 		      else
//│ 		        (`LH_C(_lh_deleteBy_LH_C_0_0, (((deleteBy_lh__d1 _lh_deleteBy_arg1_0) _lh_deleteBy_arg2_0) _lh_deleteBy_LH_C_1_0)))));;
//│ 		let rec unionBy_lh__d1 _lh_unionBy_arg1_0 _lh_unionBy_arg2_0 _lh_unionBy_arg3_0 =
//│ 		  ((mappend_lh__d1 _lh_unionBy_arg2_0) (((foldl_lh__d1 (flip_lh__d1 (deleteBy_lh__d1 _lh_unionBy_arg1_0))) ((nubBy_lh__d1 _lh_unionBy_arg1_0) _lh_unionBy_arg3_0)) _lh_unionBy_arg2_0));;
//│ 		let rec union_lh__d1 _lh_union_arg1_1 _lh_union_arg2_1 =
//│ 		  (((unionBy_lh__d1 (fun a_3 b_2 -> 
//│ 		    (a_3 = b_2))) _lh_union_arg1_1) _lh_union_arg2_1);;
//│ 		let rec collect_lh__d1 _lh_collect_arg1_0 =
//│ 		  (match _lh_collect_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_collect_LH_C_0_0, _lh_collect_LH_C_1_0) -> 
//│ 		      (match _lh_collect_LH_C_0_0 with
//│ 		        | `Known(_lh_collect_Known_0_0) -> 
//│ 		          ((union_lh__d1 _lh_collect_Known_0_0) (collect_lh__d1 _lh_collect_LH_C_1_0))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error")));;
//│ 		let rec all_lh__d1 _lh_all_arg1_0 _lh_all_arg2_0 =
//│ 		  (match _lh_all_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_all_LH_C_0_0, _lh_all_LH_C_1_0) -> 
//│ 		      (if (_lh_all_arg1_0 _lh_all_LH_C_0_0) then
//│ 		        ((all_lh__d1 _lh_all_arg1_0) _lh_all_LH_C_1_0)
//│ 		      else
//│ 		        false));;
//│ 		let rec head_lh__d3 ls_1_4 =
//│ 		  (match ls_1_4 with
//│ 		    | `LH_C(h_1_5, t_1_5) -> 
//│ 		      h_1_5
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec null_lh__d1 _lh_null_arg1_0 =
//│ 		  (match _lh_null_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_0, _lh_null_LH_C_1_0) -> 
//│ 		      false);;
//│ 		let rec domainWipeOut_lh__d1 _lh_domainWipeOut_arg1_0 _lh_domainWipeOut_arg2_0 =
//│ 		  (match _lh_domainWipeOut_arg1_0 with
//│ 		    | `CSP(_lh_domainWipeOut_CSP_0_0, _lh_domainWipeOut_CSP_1_0, _lh_domainWipeOut_CSP_2_0) -> 
//│ 		      (let rec f_2_8 = (fun _lh_f_arg1_2 -> 
//│ 		        (match _lh_f_arg1_2 with
//│ 		          | `LH_P2(_lh_f_LH_P2_0_2, _lh_f_LH_P2_1_2) -> 
//│ 		            (match _lh_f_LH_P2_0_2 with
//│ 		              | `LH_P2(_lh_f_LH_P2_0_3, _lh_f_LH_P2_1_3) -> 
//│ 		                (let rec wipedDomains_0 = (let rec _lh_listcomp_fun_7 = (fun _lh_listcomp_fun_para_7 -> 
//│ 		                  (match _lh_listcomp_fun_para_7 with
//│ 		                    | `LH_C(_lh_listcomp_fun_ls_h_7, _lh_listcomp_fun_ls_t_7) -> 
//│ 		                      (if ((all_lh__d1 knownConflict_lh__d1) _lh_listcomp_fun_ls_h_7) then
//│ 		                        (`LH_C(_lh_listcomp_fun_ls_h_7, (_lh_listcomp_fun_7 _lh_listcomp_fun_ls_t_7)))
//│ 		                      else
//│ 		                        (_lh_listcomp_fun_7 _lh_listcomp_fun_ls_t_7))
//│ 		                    | `LH_N -> 
//│ 		                      (`LH_N))) in
//│ 		                  (_lh_listcomp_fun_7 _lh_f_LH_P2_1_2)) in
//│ 		                  (let rec cs'_1 = (if (null_lh__d1 wipedDomains_0) then
//│ 		                    _lh_f_LH_P2_1_3
//│ 		                  else
//│ 		                    (`Known((collect_lh__d1 (head_lh__d3 wipedDomains_0))))) in
//│ 		                    (`LH_P2(_lh_f_LH_P2_0_3, cs'_1))))))) in
//│ 		        ((mapTree_lh__d5 f_2_8) _lh_domainWipeOut_arg2_0)));;
//│ 		let rec tail_lh__d2 ls_1_6 =
//│ 		  (match ls_1_6 with
//│ 		    | `LH_C(h_1_7, t_1_7) -> 
//│ 		      t_1_7
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec enumFromTo_lh__d7 a_5 b_4 =
//│ 		  (if (a_5 <= b_4) then
//│ 		    (`LH_C(a_5, ((enumFromTo_lh__d7 (a_5 + 1)) b_4)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec enumFromTo_lh__d8 a_4 b_3 =
//│ 		  (if (a_4 <= b_3) then
//│ 		    (`LH_C(a_4, ((enumFromTo_lh__d8 (a_4 + 1)) b_3)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec zipWith_lh__d3 f_8 xs_2 ys_2 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(hx_1, tx_1) -> 
//│ 		      (match ys_2 with
//│ 		        | `LH_C(hy_1, ty_1) -> 
//│ 		          (`LH_C(((f_8 hx_1) hy_1), (((zipWith_lh__d3 f_8) tx_1) ty_1)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec zipWith_lh__d4 f_7 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(hx_0, tx_0) -> 
//│ 		      (match ys_1 with
//│ 		        | `LH_C(hy_0, ty_0) -> 
//│ 		          (`LH_C(((f_7 hx_0) hy_0), (((zipWith_lh__d4 f_7) tx_0) ty_0)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec fillTable_lh__d2 _lh_fillTable_arg1_0 _lh_fillTable_arg2_0 _lh_fillTable_arg3_0 =
//│ 		  (match _lh_fillTable_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      _lh_fillTable_arg3_0
//│ 		    | `LH_C(_lh_fillTable_LH_C_0_0, _lh_fillTable_LH_C_1_0) -> 
//│ 		      (match _lh_fillTable_LH_C_0_0 with
//│ 		        | `Assign(_lh_fillTable_Assign_0_0, _lh_fillTable_Assign_1_0) -> 
//│ 		          (match _lh_fillTable_arg2_0 with
//│ 		            | `CSP(_lh_fillTable_CSP_0_0, _lh_fillTable_CSP_1_0, _lh_fillTable_CSP_2_0) -> 
//│ 		              (let rec f_1_8 = (fun cs_1 varval_0 -> 
//│ 		                (let rec _lh_matchIdent_2 = varval_0 in
//│ 		                  (match _lh_matchIdent_2 with
//│ 		                    | `LH_P2(_lh_fillTable_LH_P2_0_0, _lh_fillTable_LH_P2_1_0) -> 
//│ 		                      (if ((cs_1 = (`Unknown)) && (not ((_lh_fillTable_CSP_2_0 (`Assign(_lh_fillTable_Assign_0_0, _lh_fillTable_Assign_1_0))) (`Assign(_lh_fillTable_LH_P2_0_0, _lh_fillTable_LH_P2_1_0))))) then
//│ 		                        (`Known((`LH_C(_lh_fillTable_Assign_0_0, (`LH_C(_lh_fillTable_LH_P2_0_0, (`LH_N)))))))
//│ 		                      else
//│ 		                        cs_1)))) in
//│ 		                (((zipWith_lh__d3 (zipWith_lh__d4 f_1_8)) _lh_fillTable_arg3_0) (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		                  (match _lh_listcomp_fun_para_1 with
//│ 		                    | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		                      (`LH_C((let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		                        (match _lh_listcomp_fun_para_2 with
//│ 		                          | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		                            (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_h_2)), (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2)))
//│ 		                          | `LH_N -> 
//│ 		                            (`LH_N))) in
//│ 		                        (_lh_listcomp_fun_2 ((enumFromTo_lh__d7 1) _lh_fillTable_CSP_1_0))), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		                    | `LH_N -> 
//│ 		                      (`LH_N))) in
//│ 		                  (_lh_listcomp_fun_1 ((enumFromTo_lh__d8 (_lh_fillTable_Assign_0_0 + 1)) _lh_fillTable_CSP_0_0))))))));;
//│ 		let rec map_lh__d5 f_1_7 ls_1_5 =
//│ 		  (match ls_1_5 with
//│ 		    | `LH_C(h_1_6, t_1_6) -> 
//│ 		      (`LH_C((f_1_7 h_1_6), ((map_lh__d5 f_1_7) t_1_6)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec cacheChecks_lh__d2 _lh_cacheChecks_arg1_0 _lh_cacheChecks_arg2_0 _lh_cacheChecks_arg3_0 =
//│ 		  (match _lh_cacheChecks_arg3_0 with
//│ 		    | `Node(_lh_cacheChecks_Node_0_0, _lh_cacheChecks_Node_1_0) -> 
//│ 		      (`Node((`LH_P2(_lh_cacheChecks_Node_0_0, _lh_cacheChecks_arg2_0)), ((map_lh__d5 ((cacheChecks_lh__d2 _lh_cacheChecks_arg1_0) (((fillTable_lh__d2 _lh_cacheChecks_Node_0_0) _lh_cacheChecks_arg1_0) (tail_lh__d2 _lh_cacheChecks_arg2_0)))) _lh_cacheChecks_Node_1_0))));;
//│ 		let rec head_lh__d2 ls_1_8 =
//│ 		  (match ls_1_8 with
//│ 		    | `LH_C(h_1_9, t_1_9) -> 
//│ 		      h_1_9
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec maxLevel_lh__d4 _lh_maxLevel_arg1_0 =
//│ 		  (match _lh_maxLevel_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      0
//│ 		    | `LH_C(_lh_maxLevel_LH_C_0_0, _lh_maxLevel_LH_C_1_0) -> 
//│ 		      (match _lh_maxLevel_LH_C_0_0 with
//│ 		        | `Assign(_lh_maxLevel_Assign_0_0, _lh_maxLevel_Assign_1_0) -> 
//│ 		          _lh_maxLevel_Assign_0_0));;
//│ 		let rec complete_lh__d3 _lh_complete_arg1_1 _lh_complete_arg2_1 =
//│ 		  (match _lh_complete_arg1_1 with
//│ 		    | `CSP(_lh_complete_CSP_0_1, _lh_complete_CSP_1_1, _lh_complete_CSP_2_1) -> 
//│ 		      ((maxLevel_lh__d4 _lh_complete_arg2_1) = _lh_complete_CSP_0_1));;
//│ 		let rec checkComplete_lh__d3 _lh_checkComplete_arg1_2 _lh_checkComplete_arg2_2 =
//│ 		  (if ((complete_lh__d3 _lh_checkComplete_arg1_2) _lh_checkComplete_arg2_2) then
//│ 		    (`Known((`LH_N)))
//│ 		  else
//│ 		    (`Unknown));;
//│ 		let rec value_lh__d2 _lh_value_arg1_0 =
//│ 		  (match _lh_value_arg1_0 with
//│ 		    | `Assign(_lh_value_Assign_0_0, _lh_value_Assign_1_0) -> 
//│ 		      _lh_value_Assign_1_0);;
//│ 		let rec map_lh__d1_d0 f_9 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      (`LH_C((f_9 h_8), ((map_lh__d1_d0 f_9) t_8)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mapTree_lh__d4 _lh_mapTree_arg1_3 _lh_mapTree_arg2_3 =
//│ 		  (match _lh_mapTree_arg2_3 with
//│ 		    | `Node(_lh_mapTree_Node_0_3, _lh_mapTree_Node_1_3) -> 
//│ 		      (`Node((_lh_mapTree_arg1_3 _lh_mapTree_Node_0_3), ((map_lh__d1_d0 (mapTree_lh__d4 _lh_mapTree_arg1_3)) _lh_mapTree_Node_1_3))));;
//│ 		let rec atIndex_lh__d2 n_0 ls_1_7 =
//│ 		  (if (n_0 < 0) then
//│ 		    (failwith "lh_default_error")
//│ 		  else
//│ 		    (match ls_1_7 with
//│ 		      | `LH_C(h_1_8, t_1_8) -> 
//│ 		        (if (n_0 = 0) then
//│ 		          h_1_8
//│ 		        else
//│ 		          ((atIndex_lh__d2 (n_0 - 1)) t_1_8))
//│ 		      | `LH_N -> 
//│ 		        (failwith "lh_default_error")));;
//│ 		let rec lookupCache_lh__d2 _lh_lookupCache_arg1_0 _lh_lookupCache_arg2_0 =
//│ 		  (let rec f_2_9 = (fun _lh_f_arg1_3 _lh_f_arg2_2 -> 
//│ 		    (match _lh_f_arg2_2 with
//│ 		      | `LH_P2(_lh_f_LH_P2_0_4, _lh_f_LH_P2_1_4) -> 
//│ 		        (match _lh_f_LH_P2_0_4 with
//│ 		          | `LH_N -> 
//│ 		            (`LH_P2((`LH_P2((`LH_N), (`Unknown))), _lh_f_LH_P2_1_4))
//│ 		          | `LH_C(_lh_f_LH_C_0_0, _lh_f_LH_C_1_0) -> 
//│ 		            (let rec tableEntry_0 = ((atIndex_lh__d2 ((value_lh__d2 _lh_f_LH_C_0_0) - 1)) (head_lh__d2 _lh_f_LH_P2_1_4)) in
//│ 		              (let rec cs_3 = (if (tableEntry_0 = (`Unknown)) then
//│ 		                ((checkComplete_lh__d3 _lh_f_arg1_3) (`LH_C(_lh_f_LH_C_0_0, _lh_f_LH_C_1_0)))
//│ 		              else
//│ 		                tableEntry_0) in
//│ 		                (`LH_P2((`LH_P2((`LH_C(_lh_f_LH_C_0_0, _lh_f_LH_C_1_0)), cs_3)), _lh_f_LH_P2_1_4))))))) in
//│ 		    ((mapTree_lh__d4 (f_2_9 _lh_lookupCache_arg1_0)) _lh_lookupCache_arg2_0));;
//│ 		let rec enumFromTo_lh__d3 a_1_0 b_8 =
//│ 		  (if (a_1_0 <= b_8) then
//│ 		    (`LH_C(a_1_0, ((enumFromTo_lh__d3 (a_1_0 + 1)) b_8)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec enumFromTo_lh__d4 a_9 b_7 =
//│ 		  (if (a_9 <= b_7) then
//│ 		    (`LH_C(a_9, ((enumFromTo_lh__d4 (a_9 + 1)) b_7)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec emptyTable_lh__d2 _lh_emptyTable_arg1_0 =
//│ 		  (match _lh_emptyTable_arg1_0 with
//│ 		    | `CSP(_lh_emptyTable_CSP_0_0, _lh_emptyTable_CSP_1_0, _lh_emptyTable_CSP_2_0) -> 
//│ 		      (`LH_C((`LH_N), (let rec _lh_listcomp_fun_5 = (fun _lh_listcomp_fun_para_5 -> 
//│ 		        (match _lh_listcomp_fun_para_5 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_5, _lh_listcomp_fun_ls_t_5) -> 
//│ 		            (`LH_C((let rec _lh_listcomp_fun_6 = (fun _lh_listcomp_fun_para_6 -> 
//│ 		              (match _lh_listcomp_fun_para_6 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_6, _lh_listcomp_fun_ls_t_6) -> 
//│ 		                  (`LH_C((`Unknown), (_lh_listcomp_fun_6 _lh_listcomp_fun_ls_t_6)))
//│ 		                | `LH_N -> 
//│ 		                  (`LH_N))) in
//│ 		              (_lh_listcomp_fun_6 ((enumFromTo_lh__d4 1) _lh_emptyTable_CSP_1_0))), (_lh_listcomp_fun_5 _lh_listcomp_fun_ls_t_5)))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_5 ((enumFromTo_lh__d3 1) _lh_emptyTable_CSP_0_0))))));;
//│ 		let rec fc_lh__d1 _lh_fc_arg1_0 _lh_funcomp_x_1_4 =
//│ 		  ((fun _lh_funcomp_x_1_5 -> 
//│ 		    ((domainWipeOut_lh__d1 _lh_fc_arg1_0) ((lookupCache_lh__d2 _lh_fc_arg1_0) _lh_funcomp_x_1_5))) (((cacheChecks_lh__d2 _lh_fc_arg1_0) (emptyTable_lh__d2 _lh_fc_arg1_0)) _lh_funcomp_x_1_4));;
//│ 		let rec length_lh__d1 ls_2_7 =
//│ 		  (match ls_2_7 with
//│ 		    | `LH_C(h_2_7, t_2_7) -> 
//│ 		      (1 + (length_lh__d1 t_2_7))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec map_lh__d1_d4 f_2 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C((f_2 h_2), ((map_lh__d1_d4 f_2) t_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec foldTree_lh__d2 _lh_foldTree_arg1_0 _lh_foldTree_arg2_0 =
//│ 		  (match _lh_foldTree_arg2_0 with
//│ 		    | `Node(_lh_foldTree_Node_0_0, _lh_foldTree_Node_1_0) -> 
//│ 		      ((_lh_foldTree_arg1_0 _lh_foldTree_Node_0_0) ((map_lh__d1_d4 (foldTree_lh__d2 _lh_foldTree_arg1_0)) _lh_foldTree_Node_1_0)));;
//│ 		let rec label_lh__d2 _lh_label_arg1_0 =
//│ 		  (match _lh_label_arg1_0 with
//│ 		    | `Node(_lh_label_Node_0_0, _lh_label_Node_1_0) -> 
//│ 		      _lh_label_Node_0_0);;
//│ 		let rec filterTree_lh__d1 _lh_filterTree_arg1_0 =
//│ 		  (let rec f_1 = (fun a_1 cs_0 -> 
//│ 		    (`Node(a_1, ((filter_lh__d3 (fun _lh_funcomp_x_0 -> 
//│ 		      (_lh_filterTree_arg1_0 (label_lh__d2 _lh_funcomp_x_0)))) cs_0)))) in
//│ 		    (foldTree_lh__d2 f_1));;
//│ 		let rec prune_lh__d1 _lh_prune_arg1_0 =
//│ 		  (filterTree_lh__d1 (fun _lh_funcomp_x_2 -> 
//│ 		    (not (_lh_prune_arg1_0 _lh_funcomp_x_2))));;
//│ 		let rec maxLevel_lh__d3 _lh_maxLevel_arg1_1 =
//│ 		  (match _lh_maxLevel_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      0
//│ 		    | `LH_C(_lh_maxLevel_LH_C_0_1, _lh_maxLevel_LH_C_1_1) -> 
//│ 		      (match _lh_maxLevel_LH_C_0_1 with
//│ 		        | `Assign(_lh_maxLevel_Assign_0_1, _lh_maxLevel_Assign_1_1) -> 
//│ 		          _lh_maxLevel_Assign_0_1));;
//│ 		let rec enumFromTo_lh__d9 a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh__d9 (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec initTree_lh__d1 _lh_initTree_arg1_0 _lh_initTree_arg2_0 =
//│ 		  (`Node(_lh_initTree_arg2_0, ((map_lh__d1_d4 (initTree_lh__d1 _lh_initTree_arg1_0)) (_lh_initTree_arg1_0 _lh_initTree_arg2_0))));;
//│ 		let rec mkTree_lh__d1 _lh_mkTree_arg1_0 =
//│ 		  (match _lh_mkTree_arg1_0 with
//│ 		    | `CSP(_lh_mkTree_CSP_0_0, _lh_mkTree_CSP_1_0, _lh_mkTree_CSP_2_0) -> 
//│ 		      (let rec next_0 = (fun ss_0 -> 
//│ 		        (if ((maxLevel_lh__d3 ss_0) < _lh_mkTree_CSP_0_0) then
//│ 		          (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		            (match _lh_listcomp_fun_para_0 with
//│ 		              | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		                (`LH_C((`LH_C((`Assign(((maxLevel_lh__d4 ss_0) + 1), _lh_listcomp_fun_ls_h_0)), ss_0)), (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		              | `LH_N -> 
//│ 		                (`LH_N))) in
//│ 		            (_lh_listcomp_fun_0 ((enumFromTo_lh__d9 1) _lh_mkTree_CSP_1_0)))
//│ 		        else
//│ 		          (`LH_N))) in
//│ 		        ((initTree_lh__d1 next_0) (`LH_N))));;
//│ 		let rec fst_lh__d2 _lh_fst_arg1_0 =
//│ 		  (match _lh_fst_arg1_0 with
//│ 		    | `LH_P2(_lh_fst_LH_P2_0_0, _lh_fst_LH_P2_1_0) -> 
//│ 		      _lh_fst_LH_P2_0_0);;
//│ 		let rec snd_lh__d1 _lh_snd_arg1_1 =
//│ 		  (match _lh_snd_arg1_1 with
//│ 		    | `LH_P2(_lh_snd_LH_P2_0_1, _lh_snd_LH_P2_1_1) -> 
//│ 		      _lh_snd_LH_P2_1_1);;
//│ 		let rec knownConflict_lh__d3 _lh_knownConflict_arg1_0 =
//│ 		  (match _lh_knownConflict_arg1_0 with
//│ 		    | `Known(_lh_knownConflict_Known_0_0) -> 
//│ 		      (match _lh_knownConflict_Known_0_0 with
//│ 		        | `LH_C(_lh_knownConflict_LH_C_0_0, _lh_knownConflict_LH_C_1_0) -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec knownSolution_lh__d1 _lh_knownSolution_arg1_0 =
//│ 		  (match _lh_knownSolution_arg1_0 with
//│ 		    | `Known(_lh_knownSolution_Known_0_0) -> 
//│ 		      (match _lh_knownSolution_Known_0_0 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec snd_lh__d2 _lh_snd_arg1_0 =
//│ 		  (match _lh_snd_arg1_0 with
//│ 		    | `LH_P2(_lh_snd_LH_P2_0_0, _lh_snd_LH_P2_1_0) -> 
//│ 		      _lh_snd_LH_P2_1_0);;
//│ 		let rec map_lh__d7 f_1_5 ls_1_2 =
//│ 		  (match ls_1_2 with
//│ 		    | `LH_C(h_1_3, t_1_3) -> 
//│ 		      (`LH_C((f_1_5 h_1_3), ((map_lh__d7 f_1_5) t_1_3)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec concat_lh__d1 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      ((mappend_lh__d1 h_3) (concat_lh__d1 t_3))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec leaves_lh__d1 _lh_leaves_arg1_0 =
//│ 		  (match _lh_leaves_arg1_0 with
//│ 		    | `Node(_lh_leaves_Node_0_0, _lh_leaves_Node_1_0) -> 
//│ 		      (match _lh_leaves_Node_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_C(_lh_leaves_Node_0_0, (`LH_N)))
//│ 		        | _ -> 
//│ 		          (concat_lh__d1 ((map_lh__d1_d4 leaves_lh__d1) _lh_leaves_Node_1_0))));;
//│ 		let rec filter_lh__d2 f_1_4 ls_1_1 =
//│ 		  (match ls_1_1 with
//│ 		    | `LH_C(h_1_2, t_1_2) -> 
//│ 		      (if (f_1_4 h_1_2) then
//│ 		        (`LH_C(h_1_2, ((filter_lh__d2 f_1_4) t_1_2)))
//│ 		      else
//│ 		        ((filter_lh__d2 f_1_4) t_1_2))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec search_lh__d1 _lh_search_arg1_0 _lh_search_arg2_0 =
//│ 		  ((fun _lh_funcomp_x_4 -> 
//│ 		    ((fun _lh_funcomp_x_5 -> 
//│ 		      ((fun _lh_funcomp_x_6 -> 
//│ 		        ((fun _lh_funcomp_x_7 -> 
//│ 		          ((fun _lh_funcomp_x_8 -> 
//│ 		            ((map_lh__d7 fst_lh__d2) ((filter_lh__d2 (fun _lh_funcomp_x_9 -> 
//│ 		              (knownSolution_lh__d1 (snd_lh__d1 _lh_funcomp_x_9)))) _lh_funcomp_x_8))) (leaves_lh__d1 _lh_funcomp_x_7))) ((prune_lh__d1 (fun _lh_funcomp_x_1_0 -> 
//│ 		          (knownConflict_lh__d3 (snd_lh__d2 _lh_funcomp_x_1_0)))) _lh_funcomp_x_6))) ((_lh_search_arg1_0 _lh_search_arg2_0) _lh_funcomp_x_5))) (mkTree_lh__d1 _lh_funcomp_x_4))) _lh_search_arg2_0);;
//│ 		let rec abs_lh__d1 _lh_abs_arg1_0 =
//│ 		  (if (_lh_abs_arg1_0 > 0) then
//│ 		    _lh_abs_arg1_0
//│ 		  else
//│ 		    (0 - _lh_abs_arg1_0));;
//│ 		let rec safe_lh__d1 _lh_safe_arg1_0 _lh_safe_arg2_0 =
//│ 		  (match _lh_safe_arg1_0 with
//│ 		    | `Assign(_lh_safe_Assign_0_0, _lh_safe_Assign_1_0) -> 
//│ 		      (match _lh_safe_arg2_0 with
//│ 		        | `Assign(_lh_safe_Assign_0_1, _lh_safe_Assign_1_1) -> 
//│ 		          ((_lh_safe_Assign_1_0 <> _lh_safe_Assign_1_1) && ((abs_lh__d1 (_lh_safe_Assign_0_0 - _lh_safe_Assign_0_1)) <> (abs_lh__d1 (_lh_safe_Assign_1_0 - _lh_safe_Assign_1_1))))));;
//│ 		let rec queens_lh__d1 _lh_queens_arg1_0 =
//│ 		  (`CSP(_lh_queens_arg1_0, _lh_queens_arg1_0, safe_lh__d1));;
//│ 		let rec try_lh__d1 _lh_try_arg1_0 _lh_try_arg2_0 =
//│ 		  (length_lh__d1 ((search_lh__d1 _lh_try_arg2_0) (queens_lh__d1 _lh_try_arg1_0)));;
//│ 		let rec map_lh__d8 f_1_3 ls_1_0 =
//│ 		  (match ls_1_0 with
//│ 		    | `LH_C(h_1_1, t_1_1) -> 
//│ 		      (`LH_C((f_1_3 h_1_1), ((map_lh__d8 f_1_3) t_1_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec notElem_lh__d1 _lh_notElem_arg1_0 _lh_notElem_arg2_0 =
//│ 		  (match _lh_notElem_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_notElem_LH_C_0_0, _lh_notElem_LH_C_1_0) -> 
//│ 		      (if (_lh_notElem_arg1_0 = _lh_notElem_LH_C_0_0) then
//│ 		        false
//│ 		      else
//│ 		        ((notElem_lh__d1 _lh_notElem_arg1_0) _lh_notElem_LH_C_1_0)));;
//│ 		let rec union_lh__d2 _lh_union_arg1_0 _lh_union_arg2_0 =
//│ 		  (((unionBy_lh__d1 (fun a_2 b_1 -> 
//│ 		    (a_2 = b_1))) _lh_union_arg1_0) _lh_union_arg2_0);;
//│ 		let rec combine_lh__d2 _lh_combine_arg1_0 _lh_combine_arg2_0 =
//│ 		  (match _lh_combine_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      _lh_combine_arg2_0
//│ 		    | `LH_C(_lh_combine_LH_C_0_0, _lh_combine_LH_C_1_0) -> 
//│ 		      (match _lh_combine_LH_C_0_0 with
//│ 		        | `LH_P2(_lh_combine_LH_P2_0_0, _lh_combine_LH_P2_1_0) -> 
//│ 		          (match _lh_combine_LH_P2_1_0 with
//│ 		            | `Known(_lh_combine_Known_0_0) -> 
//│ 		              (if ((notElem_lh__d1 (maxLevel_lh__d4 _lh_combine_LH_P2_0_0)) _lh_combine_Known_0_0) then
//│ 		                _lh_combine_Known_0_0
//│ 		              else
//│ 		                ((combine_lh__d2 _lh_combine_LH_C_1_0) ((union_lh__d2 _lh_combine_Known_0_0) _lh_combine_arg2_0)))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))));;
//│ 		let rec bj_lh__d1 _lh_bj_arg1_0 =
//│ 		  (let rec f_2_5 = (fun _lh_f_arg1_0 _lh_f_arg2_0 -> 
//│ 		    (match _lh_f_arg1_0 with
//│ 		      | `LH_P2(_lh_f_LH_P2_0_0, _lh_f_LH_P2_1_0) -> 
//│ 		        (match _lh_f_LH_P2_1_0 with
//│ 		          | `Known(_lh_f_Known_0_0) -> 
//│ 		            (`Node((`LH_P2(_lh_f_LH_P2_0_0, (`Known(_lh_f_Known_0_0)))), _lh_f_arg2_0))
//│ 		          | `Unknown -> 
//│ 		            (`Node((`LH_P2(_lh_f_LH_P2_0_0, (`Known(((combine_lh__d2 ((map_lh__d8 label_lh__d2) _lh_f_arg2_0)) (`LH_N)))))), _lh_f_arg2_0))))) in
//│ 		    (foldTree_lh__d2 f_2_5));;
//│ 		let rec mapTree_lh__d7 _lh_mapTree_arg1_0 _lh_mapTree_arg2_0 =
//│ 		  (match _lh_mapTree_arg2_0 with
//│ 		    | `Node(_lh_mapTree_Node_0_0, _lh_mapTree_Node_1_0) -> 
//│ 		      (`Node((_lh_mapTree_arg1_0 _lh_mapTree_Node_0_0), ((map_lh__d1_d4 (mapTree_lh__d7 _lh_mapTree_arg1_0)) _lh_mapTree_Node_1_0))));;
//│ 		let rec complete_lh__d4 _lh_complete_arg1_0 _lh_complete_arg2_0 =
//│ 		  (match _lh_complete_arg1_0 with
//│ 		    | `CSP(_lh_complete_CSP_0_0, _lh_complete_CSP_1_0, _lh_complete_CSP_2_0) -> 
//│ 		      ((maxLevel_lh__d4 _lh_complete_arg2_0) = _lh_complete_CSP_0_0));;
//│ 		let rec checkComplete_lh__d5 _lh_checkComplete_arg1_0 _lh_checkComplete_arg2_0 =
//│ 		  (if ((complete_lh__d4 _lh_checkComplete_arg1_0) _lh_checkComplete_arg2_0) then
//│ 		    (`Known((`LH_N)))
//│ 		  else
//│ 		    (`Unknown));;
//│ 		let rec level_lh__d4 _lh_level_arg1_0 =
//│ 		  (match _lh_level_arg1_0 with
//│ 		    | `Assign(_lh_level_Assign_0_0, _lh_level_Assign_1_0) -> 
//│ 		      _lh_level_Assign_0_0);;
//│ 		let rec reverse_lh__d2 ls_4 =
//│ 		  ((reverse_helper_lh__d1 ls_4) (`LH_N));;
//│ 		let rec earliestInconsistency_lh__d3 _lh_earliestInconsistency_arg1_0 _lh_earliestInconsistency_arg2_0 =
//│ 		  (match _lh_earliestInconsistency_arg1_0 with
//│ 		    | `CSP(_lh_earliestInconsistency_CSP_0_0, _lh_earliestInconsistency_CSP_1_0, _lh_earliestInconsistency_CSP_2_0) -> 
//│ 		      (match _lh_earliestInconsistency_arg2_0 with
//│ 		        | `LH_N -> 
//│ 		          (`Nothing)
//│ 		        | `LH_C(_lh_earliestInconsistency_LH_C_0_0, _lh_earliestInconsistency_LH_C_1_0) -> 
//│ 		          (let rec _lh_matchIdent_0 = ((filter_lh__d3 (fun _lh_funcomp_x_1 -> 
//│ 		            (not ((_lh_earliestInconsistency_CSP_2_0 _lh_earliestInconsistency_LH_C_0_0) _lh_funcomp_x_1)))) (reverse_lh__d2 _lh_earliestInconsistency_LH_C_1_0)) in
//│ 		            (match _lh_matchIdent_0 with
//│ 		              | `LH_N -> 
//│ 		                (`Nothing)
//│ 		              | `LH_C(_lh_earliestInconsistency_LH_C_0_1, _lh_earliestInconsistency_LH_C_1_1) -> 
//│ 		                (`Just((`LH_P2((level_lh__d4 _lh_earliestInconsistency_LH_C_0_0), (level_lh__d4 _lh_earliestInconsistency_LH_C_0_1)))))))));;
//│ 		let rec bt_lh__d3 _lh_bt_arg1_0 =
//│ 		  (let rec f_2_4 = (fun s_0 -> 
//│ 		    (`LH_P2(s_0, (let rec _lh_matchIdent_4 = ((earliestInconsistency_lh__d3 _lh_bt_arg1_0) s_0) in
//│ 		      (match _lh_matchIdent_4 with
//│ 		        | `Nothing -> 
//│ 		          ((checkComplete_lh__d5 _lh_bt_arg1_0) s_0)
//│ 		        | `Just(_lh_bt_Just_0_0) -> 
//│ 		          (match _lh_bt_Just_0_0 with
//│ 		            | `LH_P2(_lh_bt_LH_P2_0_0, _lh_bt_LH_P2_1_0) -> 
//│ 		              (`Known((`LH_C(_lh_bt_LH_P2_0_0, (`LH_C(_lh_bt_LH_P2_1_0, (`LH_N))))))))))))) in
//│ 		    (mapTree_lh__d7 f_2_4));;
//│ 		let rec bjbt_lh__d1 _lh_bjbt_arg1_0 _lh_funcomp_x_1_2 =
//│ 		  ((bj_lh__d1 _lh_bjbt_arg1_0) ((bt_lh__d3 _lh_bjbt_arg1_0) _lh_funcomp_x_1_2));;
//│ 		let rec checkComplete_lh__d4 _lh_checkComplete_arg1_1 _lh_checkComplete_arg2_1 =
//│ 		  (if ((complete_lh__d4 _lh_checkComplete_arg1_1) _lh_checkComplete_arg2_1) then
//│ 		    (`Known((`LH_N)))
//│ 		  else
//│ 		    (`Unknown));;
//│ 		let rec level_lh__d3 _lh_level_arg1_1 =
//│ 		  (match _lh_level_arg1_1 with
//│ 		    | `Assign(_lh_level_Assign_0_1, _lh_level_Assign_1_1) -> 
//│ 		      _lh_level_Assign_0_1);;
//│ 		let rec earliestInconsistency_lh__d2 _lh_earliestInconsistency_arg1_1 _lh_earliestInconsistency_arg2_1 =
//│ 		  (match _lh_earliestInconsistency_arg1_1 with
//│ 		    | `CSP(_lh_earliestInconsistency_CSP_0_1, _lh_earliestInconsistency_CSP_1_1, _lh_earliestInconsistency_CSP_2_1) -> 
//│ 		      (match _lh_earliestInconsistency_arg2_1 with
//│ 		        | `LH_N -> 
//│ 		          (`Nothing)
//│ 		        | `LH_C(_lh_earliestInconsistency_LH_C_0_2, _lh_earliestInconsistency_LH_C_1_2) -> 
//│ 		          (let rec _lh_matchIdent_1 = ((filter_lh__d3 (fun _lh_funcomp_x_3 -> 
//│ 		            (not ((_lh_earliestInconsistency_CSP_2_1 _lh_earliestInconsistency_LH_C_0_2) _lh_funcomp_x_3)))) (reverse_lh__d2 _lh_earliestInconsistency_LH_C_1_2)) in
//│ 		            (match _lh_matchIdent_1 with
//│ 		              | `LH_N -> 
//│ 		                (`Nothing)
//│ 		              | `LH_C(_lh_earliestInconsistency_LH_C_0_3, _lh_earliestInconsistency_LH_C_1_3) -> 
//│ 		                (`Just((`LH_P2((level_lh__d3 _lh_earliestInconsistency_LH_C_0_2), (level_lh__d4 _lh_earliestInconsistency_LH_C_0_3)))))))));;
//│ 		let rec map_lh__d1_d2 f_4 ls_3 =
//│ 		  (match ls_3 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      (`LH_C((f_4 h_5), ((map_lh__d1_d2 f_4) t_5)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mapTree_lh__d6 _lh_mapTree_arg1_1 _lh_mapTree_arg2_1 =
//│ 		  (match _lh_mapTree_arg2_1 with
//│ 		    | `Node(_lh_mapTree_Node_0_1, _lh_mapTree_Node_1_1) -> 
//│ 		      (`Node((_lh_mapTree_arg1_1 _lh_mapTree_Node_0_1), ((map_lh__d1_d2 (mapTree_lh__d6 _lh_mapTree_arg1_1)) _lh_mapTree_Node_1_1))));;
//│ 		let rec bt_lh__d2 _lh_bt_arg1_1 =
//│ 		  (let rec f_2_7 = (fun s_1 -> 
//│ 		    (`LH_P2(s_1, (let rec _lh_matchIdent_5 = ((earliestInconsistency_lh__d2 _lh_bt_arg1_1) s_1) in
//│ 		      (match _lh_matchIdent_5 with
//│ 		        | `Nothing -> 
//│ 		          ((checkComplete_lh__d4 _lh_bt_arg1_1) s_1)
//│ 		        | `Just(_lh_bt_Just_0_1) -> 
//│ 		          (match _lh_bt_Just_0_1 with
//│ 		            | `LH_P2(_lh_bt_LH_P2_0_1, _lh_bt_LH_P2_1_1) -> 
//│ 		              (`Known((`LH_C(_lh_bt_LH_P2_0_1, (`LH_C(_lh_bt_LH_P2_1_1, (`LH_N))))))))))))) in
//│ 		    (mapTree_lh__d6 f_2_7));;
//│ 		let rec map_lh__d1_d3 f_3 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      (`LH_C((f_3 h_4), ((map_lh__d1_d3 f_3) t_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec foldTree_lh__d1 _lh_foldTree_arg1_1 _lh_foldTree_arg2_1 =
//│ 		  (match _lh_foldTree_arg2_1 with
//│ 		    | `Node(_lh_foldTree_Node_0_1, _lh_foldTree_Node_1_1) -> 
//│ 		      ((_lh_foldTree_arg1_1 _lh_foldTree_Node_0_1) ((map_lh__d1_d3 (foldTree_lh__d1 _lh_foldTree_arg1_1)) _lh_foldTree_Node_1_1)));;
//│ 		let rec knownConflict_lh__d2 _lh_knownConflict_arg1_1 =
//│ 		  (match _lh_knownConflict_arg1_1 with
//│ 		    | `Known(_lh_knownConflict_Known_0_1) -> 
//│ 		      (match _lh_knownConflict_Known_0_1 with
//│ 		        | `LH_C(_lh_knownConflict_LH_C_0_1, _lh_knownConflict_LH_C_1_1) -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec maxLevel_lh__d2 _lh_maxLevel_arg1_2 =
//│ 		  (match _lh_maxLevel_arg1_2 with
//│ 		    | `LH_N -> 
//│ 		      0
//│ 		    | `LH_C(_lh_maxLevel_LH_C_0_2, _lh_maxLevel_LH_C_1_2) -> 
//│ 		      (match _lh_maxLevel_LH_C_0_2 with
//│ 		        | `Assign(_lh_maxLevel_Assign_0_2, _lh_maxLevel_Assign_1_2) -> 
//│ 		          _lh_maxLevel_Assign_0_2));;
//│ 		let rec combine_lh__d1 _lh_combine_arg1_1 _lh_combine_arg2_1 =
//│ 		  (match _lh_combine_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      _lh_combine_arg2_1
//│ 		    | `LH_C(_lh_combine_LH_C_0_1, _lh_combine_LH_C_1_1) -> 
//│ 		      (match _lh_combine_LH_C_0_1 with
//│ 		        | `LH_P2(_lh_combine_LH_P2_0_1, _lh_combine_LH_P2_1_1) -> 
//│ 		          (match _lh_combine_LH_P2_1_1 with
//│ 		            | `Known(_lh_combine_Known_0_1) -> 
//│ 		              (if ((notElem_lh__d1 (maxLevel_lh__d2 _lh_combine_LH_P2_0_1)) _lh_combine_Known_0_1) then
//│ 		                _lh_combine_Known_0_1
//│ 		              else
//│ 		                ((combine_lh__d1 _lh_combine_LH_C_1_1) ((union_lh__d2 _lh_combine_Known_0_1) _lh_combine_arg2_1)))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))));;
//│ 		let rec map_lh__d6 f_1_6 ls_1_3 =
//│ 		  (match ls_1_3 with
//│ 		    | `LH_C(h_1_4, t_1_4) -> 
//│ 		      (`LH_C((f_1_6 h_1_4), ((map_lh__d6 f_1_6) t_1_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec label_lh__d1 _lh_label_arg1_1 =
//│ 		  (match _lh_label_arg1_1 with
//│ 		    | `Node(_lh_label_Node_0_1, _lh_label_Node_1_1) -> 
//│ 		      _lh_label_Node_0_1);;
//│ 		let rec bj'_lh__d1 _lh_bj'_arg1_0 =
//│ 		  (let rec f_2_6 = (fun _lh_f_arg1_1 _lh_f_arg2_1 -> 
//│ 		    (match _lh_f_arg1_1 with
//│ 		      | `LH_P2(_lh_f_LH_P2_0_1, _lh_f_LH_P2_1_1) -> 
//│ 		        (match _lh_f_LH_P2_1_1 with
//│ 		          | `Known(_lh_f_Known_0_1) -> 
//│ 		            (`Node((`LH_P2(_lh_f_LH_P2_0_1, (`Known(_lh_f_Known_0_1)))), _lh_f_arg2_1))
//│ 		          | `Unknown -> 
//│ 		            (let rec cs'_0 = (`Known(((combine_lh__d1 ((map_lh__d6 label_lh__d1) _lh_f_arg2_1)) (`LH_N)))) in
//│ 		              (if (knownConflict_lh__d2 cs'_0) then
//│ 		                (`Node((`LH_P2(_lh_f_LH_P2_0_1, cs'_0)), (`LH_N)))
//│ 		              else
//│ 		                (`Node((`LH_P2(_lh_f_LH_P2_0_1, cs'_0)), _lh_f_arg2_1))))))) in
//│ 		    (foldTree_lh__d1 f_2_6));;
//│ 		let rec bjbt'_lh__d1 _lh_bjbt'_arg1_0 _lh_funcomp_x_1_3 =
//│ 		  ((bj'_lh__d1 _lh_bjbt'_arg1_0) ((bt_lh__d2 _lh_bjbt'_arg1_0) _lh_funcomp_x_1_3));;
//│ 		let rec fst_lh__d1 _lh_fst_arg1_1 =
//│ 		  (match _lh_fst_arg1_1 with
//│ 		    | `LH_P2(_lh_fst_LH_P2_0_1, _lh_fst_LH_P2_1_1) -> 
//│ 		      _lh_fst_LH_P2_0_1);;
//│ 		let rec value_lh__d1 _lh_value_arg1_1 =
//│ 		  (match _lh_value_arg1_1 with
//│ 		    | `Assign(_lh_value_Assign_0_1, _lh_value_Assign_1_1) -> 
//│ 		      _lh_value_Assign_1_1);;
//│ 		let rec map_lh__d9 f_1_2 ls_8 =
//│ 		  (match ls_8 with
//│ 		    | `LH_C(h_9, t_9) -> 
//│ 		      (`LH_C((f_1_2 h_9), ((map_lh__d9 f_1_2) t_9)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mapTree_lh__d3 _lh_mapTree_arg1_4 _lh_mapTree_arg2_4 =
//│ 		  (match _lh_mapTree_arg2_4 with
//│ 		    | `Node(_lh_mapTree_Node_0_4, _lh_mapTree_Node_1_4) -> 
//│ 		      (`Node((_lh_mapTree_arg1_4 _lh_mapTree_Node_0_4), ((map_lh__d9 (mapTree_lh__d3 _lh_mapTree_arg1_4)) _lh_mapTree_Node_1_4))));;
//│ 		let rec complete_lh__d2 _lh_complete_arg1_2 _lh_complete_arg2_2 =
//│ 		  (match _lh_complete_arg1_2 with
//│ 		    | `CSP(_lh_complete_CSP_0_2, _lh_complete_CSP_1_2, _lh_complete_CSP_2_2) -> 
//│ 		      ((maxLevel_lh__d4 _lh_complete_arg2_2) = _lh_complete_CSP_0_2));;
//│ 		let rec checkComplete_lh__d2 _lh_checkComplete_arg1_3 _lh_checkComplete_arg2_3 =
//│ 		  (if ((complete_lh__d2 _lh_checkComplete_arg1_3) _lh_checkComplete_arg2_3) then
//│ 		    (`Known((`LH_N)))
//│ 		  else
//│ 		    (`Unknown));;
//│ 		let rec head_lh__d1 ls_2_3 =
//│ 		  (match ls_2_3 with
//│ 		    | `LH_C(h_2_4, t_2_4) -> 
//│ 		      h_2_4
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec atIndex_lh__d1 n_1 ls_2_2 =
//│ 		  (if (n_1 < 0) then
//│ 		    (failwith "lh_default_error")
//│ 		  else
//│ 		    (match ls_2_2 with
//│ 		      | `LH_C(h_2_3, t_2_3) -> 
//│ 		        (if (n_1 = 0) then
//│ 		          h_2_3
//│ 		        else
//│ 		          ((atIndex_lh__d1 (n_1 - 1)) t_2_3))
//│ 		      | `LH_N -> 
//│ 		        (failwith "lh_default_error")));;
//│ 		let rec lookupCache_lh__d1 _lh_lookupCache_arg1_1 _lh_lookupCache_arg2_1 =
//│ 		  (let rec f_3_0 = (fun _lh_f_arg1_4 _lh_f_arg2_3 -> 
//│ 		    (match _lh_f_arg2_3 with
//│ 		      | `LH_P2(_lh_f_LH_P2_0_5, _lh_f_LH_P2_1_5) -> 
//│ 		        (match _lh_f_LH_P2_0_5 with
//│ 		          | `LH_N -> 
//│ 		            (`LH_P2((`LH_P2((`LH_N), (`Unknown))), _lh_f_LH_P2_1_5))
//│ 		          | `LH_C(_lh_f_LH_C_0_1, _lh_f_LH_C_1_1) -> 
//│ 		            (let rec tableEntry_1 = ((atIndex_lh__d1 ((value_lh__d1 _lh_f_LH_C_0_1) - 1)) (head_lh__d1 _lh_f_LH_P2_1_5)) in
//│ 		              (let rec cs_4 = (if (tableEntry_1 = (`Unknown)) then
//│ 		                ((checkComplete_lh__d2 _lh_f_arg1_4) (`LH_C(_lh_f_LH_C_0_1, _lh_f_LH_C_1_1)))
//│ 		              else
//│ 		                tableEntry_1) in
//│ 		                (`LH_P2((`LH_P2((`LH_C(_lh_f_LH_C_0_1, _lh_f_LH_C_1_1)), cs_4)), _lh_f_LH_P2_1_5))))))) in
//│ 		    ((mapTree_lh__d3 (f_3_0 _lh_lookupCache_arg1_1)) _lh_lookupCache_arg2_1));;
//│ 		let rec zipWith_lh__d2 f_1_0 xs_3 ys_3 =
//│ 		  (match xs_3 with
//│ 		    | `LH_C(hx_2, tx_2) -> 
//│ 		      (match ys_3 with
//│ 		        | `LH_C(hy_2, ty_2) -> 
//│ 		          (`LH_C(((f_1_0 hx_2) hy_2), (((zipWith_lh__d2 f_1_0) tx_2) ty_2)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec zipWith_lh__d1 f_1_1 xs_4 ys_4 =
//│ 		  (match xs_4 with
//│ 		    | `LH_C(hx_3, tx_3) -> 
//│ 		      (match ys_4 with
//│ 		        | `LH_C(hy_3, ty_3) -> 
//│ 		          (`LH_C(((f_1_1 hx_3) hy_3), (((zipWith_lh__d1 f_1_1) tx_3) ty_3)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec enumFromTo_lh__d5 a_7 b_6 =
//│ 		  (if (a_7 <= b_6) then
//│ 		    (`LH_C(a_7, ((enumFromTo_lh__d5 (a_7 + 1)) b_6)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec enumFromTo_lh__d6 a_6 b_5 =
//│ 		  (if (a_6 <= b_5) then
//│ 		    (`LH_C(a_6, ((enumFromTo_lh__d6 (a_6 + 1)) b_5)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec fillTable_lh__d1 _lh_fillTable_arg1_1 _lh_fillTable_arg2_1 _lh_fillTable_arg3_1 =
//│ 		  (match _lh_fillTable_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      _lh_fillTable_arg3_1
//│ 		    | `LH_C(_lh_fillTable_LH_C_0_1, _lh_fillTable_LH_C_1_1) -> 
//│ 		      (match _lh_fillTable_LH_C_0_1 with
//│ 		        | `Assign(_lh_fillTable_Assign_0_1, _lh_fillTable_Assign_1_1) -> 
//│ 		          (match _lh_fillTable_arg2_1 with
//│ 		            | `CSP(_lh_fillTable_CSP_0_1, _lh_fillTable_CSP_1_1, _lh_fillTable_CSP_2_1) -> 
//│ 		              (let rec f_2_1 = (fun cs_2 varval_1 -> 
//│ 		                (let rec _lh_matchIdent_3 = varval_1 in
//│ 		                  (match _lh_matchIdent_3 with
//│ 		                    | `LH_P2(_lh_fillTable_LH_P2_0_1, _lh_fillTable_LH_P2_1_1) -> 
//│ 		                      (if ((cs_2 = (`Unknown)) && (not ((_lh_fillTable_CSP_2_1 (`Assign(_lh_fillTable_Assign_0_1, _lh_fillTable_Assign_1_1))) (`Assign(_lh_fillTable_LH_P2_0_1, _lh_fillTable_LH_P2_1_1))))) then
//│ 		                        (`Known((`LH_C(_lh_fillTable_Assign_0_1, (`LH_C(_lh_fillTable_LH_P2_0_1, (`LH_N)))))))
//│ 		                      else
//│ 		                        cs_2)))) in
//│ 		                (((zipWith_lh__d1 (zipWith_lh__d2 f_2_1)) _lh_fillTable_arg3_1) (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		                  (match _lh_listcomp_fun_para_3 with
//│ 		                    | `LH_C(_lh_listcomp_fun_ls_h_3, _lh_listcomp_fun_ls_t_3) -> 
//│ 		                      (`LH_C((let rec _lh_listcomp_fun_4 = (fun _lh_listcomp_fun_para_4 -> 
//│ 		                        (match _lh_listcomp_fun_para_4 with
//│ 		                          | `LH_C(_lh_listcomp_fun_ls_h_4, _lh_listcomp_fun_ls_t_4) -> 
//│ 		                            (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_3, _lh_listcomp_fun_ls_h_4)), (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4)))
//│ 		                          | `LH_N -> 
//│ 		                            (`LH_N))) in
//│ 		                        (_lh_listcomp_fun_4 ((enumFromTo_lh__d5 1) _lh_fillTable_CSP_1_1))), (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3)))
//│ 		                    | `LH_N -> 
//│ 		                      (`LH_N))) in
//│ 		                  (_lh_listcomp_fun_3 ((enumFromTo_lh__d6 (_lh_fillTable_Assign_0_1 + 1)) _lh_fillTable_CSP_0_1))))))));;
//│ 		let rec tail_lh__d1 ls_2_1 =
//│ 		  (match ls_2_1 with
//│ 		    | `LH_C(h_2_2, t_2_2) -> 
//│ 		      t_2_2
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec map_lh__d3 f_2_0 ls_2_0 =
//│ 		  (match ls_2_0 with
//│ 		    | `LH_C(h_2_1, t_2_1) -> 
//│ 		      (`LH_C((f_2_0 h_2_1), ((map_lh__d3 f_2_0) t_2_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec cacheChecks_lh__d1 _lh_cacheChecks_arg1_1 _lh_cacheChecks_arg2_1 _lh_cacheChecks_arg3_1 =
//│ 		  (match _lh_cacheChecks_arg3_1 with
//│ 		    | `Node(_lh_cacheChecks_Node_0_1, _lh_cacheChecks_Node_1_1) -> 
//│ 		      (`Node((`LH_P2(_lh_cacheChecks_Node_0_1, _lh_cacheChecks_arg2_1)), ((map_lh__d3 ((cacheChecks_lh__d1 _lh_cacheChecks_arg1_1) (((fillTable_lh__d1 _lh_cacheChecks_Node_0_1) _lh_cacheChecks_arg1_1) (tail_lh__d1 _lh_cacheChecks_arg2_1)))) _lh_cacheChecks_Node_1_1))));;
//│ 		let rec map_lh__d4 f_1_9 ls_1_9 =
//│ 		  (match ls_1_9 with
//│ 		    | `LH_C(h_2_0, t_2_0) -> 
//│ 		      (`LH_C((f_1_9 h_2_0), ((map_lh__d4 f_1_9) t_2_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mapTree_lh__d2 _lh_mapTree_arg1_5 _lh_mapTree_arg2_5 =
//│ 		  (match _lh_mapTree_arg2_5 with
//│ 		    | `Node(_lh_mapTree_Node_0_5, _lh_mapTree_Node_1_5) -> 
//│ 		      (`Node((_lh_mapTree_arg1_5 _lh_mapTree_Node_0_5), ((map_lh__d4 (mapTree_lh__d2 _lh_mapTree_arg1_5)) _lh_mapTree_Node_1_5))));;
//│ 		let rec enumFromTo_lh__d2 a_1_1 b_9 =
//│ 		  (if (a_1_1 <= b_9) then
//│ 		    (`LH_C(a_1_1, ((enumFromTo_lh__d2 (a_1_1 + 1)) b_9)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec enumFromTo_lh__d1 a_1_2 b_1_0 =
//│ 		  (if (a_1_2 <= b_1_0) then
//│ 		    (`LH_C(a_1_2, ((enumFromTo_lh__d1 (a_1_2 + 1)) b_1_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec emptyTable_lh__d1 _lh_emptyTable_arg1_1 =
//│ 		  (match _lh_emptyTable_arg1_1 with
//│ 		    | `CSP(_lh_emptyTable_CSP_0_1, _lh_emptyTable_CSP_1_1, _lh_emptyTable_CSP_2_1) -> 
//│ 		      (`LH_C((`LH_N), (let rec _lh_listcomp_fun_8 = (fun _lh_listcomp_fun_para_8 -> 
//│ 		        (match _lh_listcomp_fun_para_8 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_8, _lh_listcomp_fun_ls_t_8) -> 
//│ 		            (`LH_C((let rec _lh_listcomp_fun_9 = (fun _lh_listcomp_fun_para_9 -> 
//│ 		              (match _lh_listcomp_fun_para_9 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_9, _lh_listcomp_fun_ls_t_9) -> 
//│ 		                  (`LH_C((`Unknown), (_lh_listcomp_fun_9 _lh_listcomp_fun_ls_t_9)))
//│ 		                | `LH_N -> 
//│ 		                  (`LH_N))) in
//│ 		              (_lh_listcomp_fun_9 ((enumFromTo_lh__d2 1) _lh_emptyTable_CSP_1_1))), (_lh_listcomp_fun_8 _lh_listcomp_fun_ls_t_8)))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_8 ((enumFromTo_lh__d1 1) _lh_emptyTable_CSP_0_1))))));;
//│ 		let rec bm_lh__d1 _lh_bm_arg1_0 _lh_funcomp_x_1_6 =
//│ 		  ((fun _lh_funcomp_x_1_7 -> 
//│ 		    ((mapTree_lh__d2 fst_lh__d1) ((lookupCache_lh__d1 _lh_bm_arg1_0) _lh_funcomp_x_1_7))) (((cacheChecks_lh__d1 _lh_bm_arg1_0) (emptyTable_lh__d1 _lh_bm_arg1_0)) _lh_funcomp_x_1_6));;
//│ 		let rec testConstraints_nofib_lh__d1 _lh_testConstraints_nofib_arg1_0 =
//│ 		  ((map_lh__d1 (try_lh__d1 _lh_testConstraints_nofib_arg1_0)) (`LH_C(bt_lh__d1, (`LH_C(bm_lh__d1, (`LH_C(bjbt_lh__d1, (`LH_C(bjbt'_lh__d1, (`LH_C(fc_lh__d1, (`LH_N))))))))))));;
//│ 		(testConstraints_nofib_lh__d1 6)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< after expansion <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C a⁰ enumFromTo_lh_₉((a⁰ + 1), b⁰)]: 146 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C [LH_C [Assign (maxLevel_lh_₄(ss⁰) + 1) _lh_listcomp_fun_ls_h⁰] ss⁰] _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | LH_N  => [LH_N]}: 764
//│ [LH_N]: 147 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C [LH_C [Assign (maxLevel_lh_₄(ss⁰) + 1) _lh_listcomp_fun_ls_h⁰] ss⁰] _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | LH_N  => [LH_N]}: 764
//│ [LH_C f⁴(h⁵) map_lh_₁₂(f⁴, t⁵)]: 271 --->
//│ 	case ls² of {LH_C h⁴ t⁴ => [LH_C f³(h⁴) map_lh_₁₃(f³, t⁴)] | LH_N  => [LH_N]}: 259
//│ [LH_N]: 272 --->
//│ 	case ls² of {LH_C h⁴ t⁴ => [LH_C f³(h⁴) map_lh_₁₃(f³, t⁴)] | LH_N  => [LH_N]}: 259
//│ [LH_C a⁴ enumFromTo_lh_₈((a⁴ + 1), b³)]: 388 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun²(enumFromTo_lh_₇(1, _lh_fillTable_CSP_1⁰)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 1190
//│ [LH_N]: 389 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun²(enumFromTo_lh_₇(1, _lh_fillTable_CSP_1⁰)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 1190
//│ [LH_C a⁵ enumFromTo_lh_₇((a⁵ + 1), b⁴)]: 430 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => [LH_N]}: 1175
//│ [LH_N]: 431 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => [LH_N]}: 1175
//│ [LH_C f⁹(h⁸) map_lh_₁₀(f⁹, t⁸)]: 455 --->
//│ 	case ls⁶ of {LH_C h⁷ t⁷ => [LH_C f⁶(h⁷) map_lh_₁₁(f⁶, t⁷)] | LH_N  => [LH_N]}: 333
//│ [LH_N]: 456 --->
//│ 	case ls⁶ of {LH_C h⁷ t⁷ => [LH_C f⁶(h⁷) map_lh_₁₁(f⁶, t⁷)] | LH_N  => [LH_N]}: 333
//│ [LH_C a⁶ enumFromTo_lh_₆((a⁶ + 1), b⁵)]: 497 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁴(enumFromTo_lh_₅(1, _lh_fillTable_CSP_1¹)) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => [LH_N]}: 1417
//│ [LH_N]: 498 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁴(enumFromTo_lh_₅(1, _lh_fillTable_CSP_1¹)) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => [LH_N]}: 1417
//│ [LH_C a⁷ enumFromTo_lh_₅((a⁷ + 1), b⁶)]: 539 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => [LH_N]}: 1402
//│ [LH_N]: 540 --->
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => [LH_N]}: 1402
//│ [LH_C f¹²(h⁹) map_lh_₉(f¹², t⁹)]: 553 --->
//│ 	case ls¹⁹ of {LH_C h²⁰ t²⁰ => [LH_C f¹⁹(h²⁰) map_lh_₄(f¹⁹, t²⁰)] | LH_N  => [LH_N]}: 1326
//│ [LH_N]: 554 --->
//│ 	case ls¹⁹ of {LH_C h²⁰ t²⁰ => [LH_C f¹⁹(h²⁰) map_lh_₄(f¹⁹, t²⁰)] | LH_N  => [LH_N]}: 1326
//│ [Nothing]: 605 --->
//│ 	case _lh_matchIdent⁴ of {Nothing  => checkComplete_lh_₅(_lh_bt_arg1⁰, s⁰) | Just _lh_bt_Just_0⁰ => case _lh_bt_Just_0⁰ of {LH_P2 _lh_bt_LH_P2_0⁰ _lh_bt_LH_P2_1⁰ => [Known [LH_C _lh_bt_LH_P2_0⁰ [LH_C _lh_bt_LH_P2_1⁰ [LH_N]]]]}}: 1582
//│ [Nothing]: 621 --->
//│ 	case _lh_matchIdent⁴ of {Nothing  => checkComplete_lh_₅(_lh_bt_arg1⁰, s⁰) | Just _lh_bt_Just_0⁰ => case _lh_bt_Just_0⁰ of {LH_P2 _lh_bt_LH_P2_0⁰ _lh_bt_LH_P2_1⁰ => [Known [LH_C _lh_bt_LH_P2_0⁰ [LH_C _lh_bt_LH_P2_1⁰ [LH_N]]]]}}: 1582
//│ [LH_P2 level_lh_₄(_lh_earliestInconsistency_LH_C_0⁰) level_lh_₄(_lh_earliestInconsistency_LH_C_0¹)]: 628 --->
//│ 	case _lh_bt_Just_0⁰ of {LH_P2 _lh_bt_LH_P2_0⁰ _lh_bt_LH_P2_1⁰ => [Known [LH_C _lh_bt_LH_P2_0⁰ [LH_C _lh_bt_LH_P2_1⁰ [LH_N]]]]}: 1581
//│ [Just [LH_P2 level_lh_₄(_lh_earliestInconsistency_LH_C_0⁰) level_lh_₄(_lh_earliestInconsistency_LH_C_0¹)]]: 629 --->
//│ 	case _lh_matchIdent⁴ of {Nothing  => checkComplete_lh_₅(_lh_bt_arg1⁰, s⁰) | Just _lh_bt_Just_0⁰ => case _lh_bt_Just_0⁰ of {LH_P2 _lh_bt_LH_P2_0⁰ _lh_bt_LH_P2_1⁰ => [Known [LH_C _lh_bt_LH_P2_0⁰ [LH_C _lh_bt_LH_P2_1⁰ [LH_N]]]]}}: 1582
//│ [LH_C f¹³(h¹¹) map_lh_₈(f¹³, t¹¹)]: 671 --->
//│ 	case _lh_combine_arg1⁰ of {LH_N  => _lh_combine_arg2⁰ | LH_C _lh_combine_LH_C_0⁰ _lh_combine_LH_C_1⁰ => case _lh_combine_LH_C_0⁰ of {LH_P2 _lh_combine_LH_P2_0⁰ _lh_combine_LH_P2_1⁰ => case _lh_combine_LH_P2_1⁰ of {Known _lh_combine_Known_0⁰ => if notElem_lh_₁(maxLevel_lh_₄(_lh_combine_LH_P2_0⁰), _lh_combine_Known_0⁰) then _lh_combine_Known_0⁰ else combine_lh_₂(_lh_combine_LH_C_1⁰, union_lh_₂(_lh_combine_Known_0⁰, _lh_combine_arg2⁰)) | _  => error⁰}}}: 701
//│ [LH_N]: 672 --->
//│ 	case _lh_combine_arg1⁰ of {LH_N  => _lh_combine_arg2⁰ | LH_C _lh_combine_LH_C_0⁰ _lh_combine_LH_C_1⁰ => case _lh_combine_LH_C_0⁰ of {LH_P2 _lh_combine_LH_P2_0⁰ _lh_combine_LH_P2_1⁰ => case _lh_combine_LH_P2_1⁰ of {Known _lh_combine_Known_0⁰ => if notElem_lh_₁(maxLevel_lh_₄(_lh_combine_LH_P2_0⁰), _lh_combine_Known_0⁰) then _lh_combine_Known_0⁰ else combine_lh_₂(_lh_combine_LH_C_1⁰, union_lh_₂(_lh_combine_Known_0⁰, _lh_combine_arg2⁰)) | _  => error⁰}}}: 701
//│ [LH_C h¹² filter_lh_₂(f¹⁴, t¹²)]: 795 --->
//│ 	case ls¹² of {LH_C h¹³ t¹³ => [LH_C f¹⁵(h¹³) map_lh_₇(f¹⁵, t¹³)] | LH_N  => [LH_N]}: 826
//│ [LH_N]: 802 --->
//│ 	case ls¹² of {LH_C h¹³ t¹³ => [LH_C f¹⁵(h¹³) map_lh_₇(f¹⁵, t¹³)] | LH_N  => [LH_N]}: 826
//│ [LH_C f¹⁵(h¹³) map_lh_₇(f¹⁵, t¹³)]: 824 --->
//│ 	case ls²⁷ of {LH_C h²⁷ t²⁷ => (1 + length_lh_₁(t²⁷)) | LH_N  => 0}: 1631
//│ [LH_N]: 825 --->
//│ 	case ls²⁷ of {LH_C h²⁷ t²⁷ => (1 + length_lh_₁(t²⁷)) | LH_N  => 0}: 1631
//│ [LH_C f¹⁶(h¹⁴) map_lh_₆(f¹⁶, t¹⁴)]: 909 --->
//│ 	case _lh_combine_arg1¹ of {LH_N  => _lh_combine_arg2¹ | LH_C _lh_combine_LH_C_0¹ _lh_combine_LH_C_1¹ => case _lh_combine_LH_C_0¹ of {LH_P2 _lh_combine_LH_P2_0¹ _lh_combine_LH_P2_1¹ => case _lh_combine_LH_P2_1¹ of {Known _lh_combine_Known_0¹ => if notElem_lh_₁(maxLevel_lh_₂(_lh_combine_LH_P2_0¹), _lh_combine_Known_0¹) then _lh_combine_Known_0¹ else combine_lh_₁(_lh_combine_LH_C_1¹, union_lh_₂(_lh_combine_Known_0¹, _lh_combine_arg2¹)) | _  => error⁰}}}: 897
//│ [LH_N]: 910 --->
//│ 	case _lh_combine_arg1¹ of {LH_N  => _lh_combine_arg2¹ | LH_C _lh_combine_LH_C_0¹ _lh_combine_LH_C_1¹ => case _lh_combine_LH_C_0¹ of {LH_P2 _lh_combine_LH_P2_0¹ _lh_combine_LH_P2_1¹ => case _lh_combine_LH_P2_1¹ of {Known _lh_combine_Known_0¹ => if notElem_lh_₁(maxLevel_lh_₂(_lh_combine_LH_P2_0¹), _lh_combine_Known_0¹) then _lh_combine_Known_0¹ else combine_lh_₁(_lh_combine_LH_C_1¹, union_lh_₂(_lh_combine_Known_0¹, _lh_combine_arg2¹)) | _  => error⁰}}}: 897
//│ [Node _lh_mapTree_arg1¹(_lh_mapTree_Node_0¹) map_lh_₁₂(mapTree_lh_₆(_lh_mapTree_arg1¹), _lh_mapTree_Node_1¹)]: 952 --->
//│ 	case _lh_foldTree_arg2¹ of {Node _lh_foldTree_Node_0¹ _lh_foldTree_Node_1¹ => _lh_foldTree_arg1¹(_lh_foldTree_Node_0¹, map_lh_₁₃(foldTree_lh_₁(_lh_foldTree_arg1¹), _lh_foldTree_Node_1¹))}: 926
//│ [Nothing]: 958 --->
//│ 	case _lh_matchIdent⁵ of {Nothing  => checkComplete_lh_₄(_lh_bt_arg1¹, s¹) | Just _lh_bt_Just_0¹ => case _lh_bt_Just_0¹ of {LH_P2 _lh_bt_LH_P2_0¹ _lh_bt_LH_P2_1¹ => [Known [LH_C _lh_bt_LH_P2_0¹ [LH_C _lh_bt_LH_P2_1¹ [LH_N]]]]}}: 1748
//│ [Nothing]: 974 --->
//│ 	case _lh_matchIdent⁵ of {Nothing  => checkComplete_lh_₄(_lh_bt_arg1¹, s¹) | Just _lh_bt_Just_0¹ => case _lh_bt_Just_0¹ of {LH_P2 _lh_bt_LH_P2_0¹ _lh_bt_LH_P2_1¹ => [Known [LH_C _lh_bt_LH_P2_0¹ [LH_C _lh_bt_LH_P2_1¹ [LH_N]]]]}}: 1748
//│ [LH_P2 level_lh_₃(_lh_earliestInconsistency_LH_C_0²) level_lh_₄(_lh_earliestInconsistency_LH_C_0³)]: 981 --->
//│ 	case _lh_bt_Just_0¹ of {LH_P2 _lh_bt_LH_P2_0¹ _lh_bt_LH_P2_1¹ => [Known [LH_C _lh_bt_LH_P2_0¹ [LH_C _lh_bt_LH_P2_1¹ [LH_N]]]]}: 1747
//│ [Just [LH_P2 level_lh_₃(_lh_earliestInconsistency_LH_C_0²) level_lh_₄(_lh_earliestInconsistency_LH_C_0³)]]: 982 --->
//│ 	case _lh_matchIdent⁵ of {Nothing  => checkComplete_lh_₄(_lh_bt_arg1¹, s¹) | Just _lh_bt_Just_0¹ => case _lh_bt_Just_0¹ of {LH_P2 _lh_bt_LH_P2_0¹ _lh_bt_LH_P2_1¹ => [Known [LH_C _lh_bt_LH_P2_0¹ [LH_C _lh_bt_LH_P2_1¹ [LH_N]]]]}}: 1748
//│ [Known [LH_N]]: 995 --->
//│ 	case _lh_f_LH_P2_1¹ of {Known _lh_f_Known_0¹ => [Node [LH_P2 _lh_f_LH_P2_0¹ [Known _lh_f_Known_0¹]] _lh_f_arg2¹] | Unknown  => let cs'⁰ = [Known combine_lh_₁(map_lh_₆(label_lh_₁, _lh_f_arg2¹), [LH_N])]
//│ in if knownConflict_lh_₂(cs'⁰) then [Node [LH_P2 _lh_f_LH_P2_0¹ cs'⁰] [LH_N]] else [Node [LH_P2 _lh_f_LH_P2_0¹ cs'⁰] _lh_f_arg2¹]}: 1719
//│ [Unknown]: 996 --->
//│ 	case _lh_f_LH_P2_1¹ of {Known _lh_f_Known_0¹ => [Node [LH_P2 _lh_f_LH_P2_0¹ [Known _lh_f_Known_0¹]] _lh_f_arg2¹] | Unknown  => let cs'⁰ = [Known combine_lh_₁(map_lh_₆(label_lh_₁, _lh_f_arg2¹), [LH_N])]
//│ in if knownConflict_lh_₂(cs'⁰) then [Node [LH_P2 _lh_f_LH_P2_0¹ cs'⁰] [LH_N]] else [Node [LH_P2 _lh_f_LH_P2_0¹ cs'⁰] _lh_f_arg2¹]}: 1719
//│ [LH_C a⁹ enumFromTo_lh_₄((a⁹ + 1), b⁷)]: 1015 --->
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [Unknown] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => [LH_N]}: 1767
//│ [LH_N]: 1016 --->
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [Unknown] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => [LH_N]}: 1767
//│ [LH_C a¹⁰ enumFromTo_lh_₃((a¹⁰ + 1), b⁸)]: 1035 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => [LH_C let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [Unknown] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁶(enumFromTo_lh_₄(1, _lh_emptyTable_CSP_1⁰)) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] | LH_N  => [LH_N]}: 1782
//│ [LH_N]: 1036 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => [LH_C let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [Unknown] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁶(enumFromTo_lh_₄(1, _lh_emptyTable_CSP_1⁰)) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] | LH_N  => [LH_N]}: 1782
//│ [LH_C f¹⁷(h¹⁶) map_lh_₅(f¹⁷, t¹⁶)]: 1111 --->
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => [LH_C f⁹(h⁸) map_lh_₁₀(f⁹, t⁸)] | LH_N  => [LH_N]}: 457
//│ [LH_N]: 1112 --->
//│ 	case ls⁷ of {LH_C h⁸ t⁸ => [LH_C f⁹(h⁸) map_lh_₁₀(f⁹, t⁸)] | LH_N  => [LH_N]}: 457
//│ [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²]: 1169 --->
//│ 	case _lh_matchIdent² of {LH_P2 _lh_fillTable_LH_P2_0⁰ _lh_fillTable_LH_P2_1⁰ => if (polyEq⁰(cs¹, [Unknown]) && not⁰(_lh_fillTable_CSP_2⁰([Assign _lh_fillTable_Assign_0⁰ _lh_fillTable_Assign_1⁰], [Assign _lh_fillTable_LH_P2_0⁰ _lh_fillTable_LH_P2_1⁰]))) then [Known [LH_C _lh_fillTable_Assign_0⁰ [LH_C _lh_fillTable_LH_P2_0⁰ [LH_N]]]] else cs¹}: 1154
//│ [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 1173 --->
//│ 	case ys¹ of {LH_C hy⁰ ty⁰ => [LH_C f⁷(hx⁰, hy⁰) zipWith_lh_₄(f⁷, tx⁰, ty⁰)] | LH_N  => [LH_N]}: 367
//│ [LH_N]: 1174 --->
//│ 	case ys¹ of {LH_C hy⁰ ty⁰ => [LH_C f⁷(hx⁰, hy⁰) zipWith_lh_₄(f⁷, tx⁰, ty⁰)] | LH_N  => [LH_N]}: 367
//│ [LH_C let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun²(enumFromTo_lh_₇(1, _lh_fillTable_CSP_1⁰)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 1188 --->
//│ 	case ys² of {LH_C hy¹ ty¹ => [LH_C f⁸(hx¹, hy¹) zipWith_lh_₃(f⁸, tx¹, ty¹)] | LH_N  => [LH_N]}: 409
//│ [LH_N]: 1189 --->
//│ 	case ys² of {LH_C hy¹ ty¹ => [LH_C f⁸(hx¹, hy¹) zipWith_lh_₃(f⁸, tx¹, ty¹)] | LH_N  => [LH_N]}: 409
//│ [Node _lh_mapTree_arg1³(_lh_mapTree_Node_0³) map_lh_₁₀(mapTree_lh_₄(_lh_mapTree_arg1³), _lh_mapTree_Node_1³)]: 1271 --->
//│ 	case _lh_mapTree_arg2² of {Node _lh_mapTree_Node_0² _lh_mapTree_Node_1² => [Node _lh_mapTree_arg1²(_lh_mapTree_Node_0²) map_lh_₁₁(mapTree_lh_₅(_lh_mapTree_arg1²), _lh_mapTree_Node_1²)]}: 1070
//│ [LH_C a¹¹ enumFromTo_lh_₂((a¹¹ + 1), b⁹)]: 1290 --->
//│ 	case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => [LH_C [Unknown] _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)] | LH_N  => [LH_N]}: 1945
//│ [LH_N]: 1291 --->
//│ 	case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => [LH_C [Unknown] _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)] | LH_N  => [LH_N]}: 1945
//│ [LH_C a¹² enumFromTo_lh_₁((a¹² + 1), b¹⁰)]: 1310 --->
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => [LH_C [Unknown] _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)] | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁹(enumFromTo_lh_₂(1, _lh_emptyTable_CSP_1¹)) _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] | LH_N  => [LH_N]}: 1960
//│ [LH_N]: 1311 --->
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => [LH_C [Unknown] _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)] | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁹(enumFromTo_lh_₂(1, _lh_emptyTable_CSP_1¹)) _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] | LH_N  => [LH_N]}: 1960
//│ [LH_C f²⁰(h²¹) map_lh_₃(f²⁰, t²¹)]: 1338 --->
//│ 	case ls⁸ of {LH_C h⁹ t⁹ => [LH_C f¹²(h⁹) map_lh_₉(f¹², t⁹)] | LH_N  => [LH_N]}: 555
//│ [LH_N]: 1339 --->
//│ 	case ls⁸ of {LH_C h⁹ t⁹ => [LH_C f¹²(h⁹) map_lh_₉(f¹², t⁹)] | LH_N  => [LH_N]}: 555
//│ [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h⁴]: 1396 --->
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_fillTable_LH_P2_0¹ _lh_fillTable_LH_P2_1¹ => if (polyEq⁰(cs², [Unknown]) && not⁰(_lh_fillTable_CSP_2¹([Assign _lh_fillTable_Assign_0¹ _lh_fillTable_Assign_1¹], [Assign _lh_fillTable_LH_P2_0¹ _lh_fillTable_LH_P2_1¹]))) then [Known [LH_C _lh_fillTable_Assign_0¹ [LH_C _lh_fillTable_LH_P2_0¹ [LH_N]]]] else cs²}: 1381
//│ [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 1400 --->
//│ 	case ys³ of {LH_C hy² ty² => [LH_C f¹⁰(hx², hy²) zipWith_lh_₂(f¹⁰, tx², ty²)] | LH_N  => [LH_N]}: 476
//│ [LH_N]: 1401 --->
//│ 	case ys³ of {LH_C hy² ty² => [LH_C f¹⁰(hx², hy²) zipWith_lh_₂(f¹⁰, tx², ty²)] | LH_N  => [LH_N]}: 476
//│ [LH_C let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁴(enumFromTo_lh_₅(1, _lh_fillTable_CSP_1¹)) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 1415 --->
//│ 	case ys⁴ of {LH_C hy³ ty³ => [LH_C f¹¹(hx³, hy³) zipWith_lh_₁(f¹¹, tx³, ty³)] | LH_N  => [LH_N]}: 518
//│ [LH_N]: 1416 --->
//│ 	case ys⁴ of {LH_C hy³ ty³ => [LH_C f¹¹(hx³, hy³) zipWith_lh_₁(f¹¹, tx³, ty³)] | LH_N  => [LH_N]}: 518
//│ [Node _lh_mapTree_arg1⁴(_lh_mapTree_Node_0⁴) map_lh_₉(mapTree_lh_₃(_lh_mapTree_arg1⁴), _lh_mapTree_Node_1⁴)]: 1487 --->
//│ 	case _lh_mapTree_arg2⁵ of {Node _lh_mapTree_Node_0⁵ _lh_mapTree_Node_1⁵ => [Node _lh_mapTree_arg1⁵(_lh_mapTree_Node_0⁵) map_lh_₄(mapTree_lh_₂(_lh_mapTree_arg1⁵), _lh_mapTree_Node_1⁵)]}: 1985
//│ [Known [LH_C _lh_bt_LH_P2_0¹ [LH_C _lh_bt_LH_P2_1¹ [LH_N]]]]: 1746 --->
//│ 	case _lh_f_LH_P2_1¹ of {Known _lh_f_Known_0¹ => [Node [LH_P2 _lh_f_LH_P2_0¹ [Known _lh_f_Known_0¹]] _lh_f_arg2¹] | Unknown  => let cs'⁰ = [Known combine_lh_₁(map_lh_₆(label_lh_₁, _lh_f_arg2¹), [LH_N])]
//│ in if knownConflict_lh_₂(cs'⁰) then [Node [LH_P2 _lh_f_LH_P2_0¹ cs'⁰] [LH_N]] else [Node [LH_P2 _lh_f_LH_P2_0¹ cs'⁰] _lh_f_arg2¹]}: 1719
//│ [LH_P2 s¹ let _lh_matchIdent⁵ = earliestInconsistency_lh_₂(_lh_bt_arg1¹, s¹)
//│ in case _lh_matchIdent⁵ of {Nothing  => checkComplete_lh_₄(_lh_bt_arg1¹, s¹) | Just _lh_bt_Just_0¹ => case _lh_bt_Just_0¹ of {LH_P2 _lh_bt_LH_P2_0¹ _lh_bt_LH_P2_1¹ => [Known [LH_C _lh_bt_LH_P2_0¹ [LH_C _lh_bt_LH_P2_1¹ [LH_N]]]]}}]: 1750 --->
//│ 	case _lh_f_arg1¹ of {LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => case _lh_f_LH_P2_1¹ of {Known _lh_f_Known_0¹ => [Node [LH_P2 _lh_f_LH_P2_0¹ [Known _lh_f_Known_0¹]] _lh_f_arg2¹] | Unknown  => let cs'⁰ = [Known combine_lh_₁(map_lh_₆(label_lh_₁, _lh_f_arg2¹), [LH_N])]
//│ in if knownConflict_lh_₂(cs'⁰) then [Node [LH_P2 _lh_f_LH_P2_0¹ cs'⁰] [LH_N]] else [Node [LH_P2 _lh_f_LH_P2_0¹ cs'⁰] _lh_f_arg2¹]}}: 1720
//│ [LH_P2 _lh_cacheChecks_Node_0⁰ _lh_cacheChecks_arg2⁰]: 1851 --->
//│ 	case _lh_f_arg2² of {LH_P2 _lh_f_LH_P2_0⁴ _lh_f_LH_P2_1⁴ => case _lh_f_LH_P2_0⁴ of {LH_N  => [LH_P2 [LH_P2 [LH_N] [Unknown]] _lh_f_LH_P2_1⁴] | LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰ => let tableEntry⁰ = atIndex_lh_₂((value_lh_₂(_lh_f_LH_C_0⁰) - 1), head_lh_₂(_lh_f_LH_P2_1⁴))
//│ in let cs³ = if polyEq⁰(tableEntry⁰, [Unknown]) then checkComplete_lh_₃(_lh_f_arg1³, [LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰]) else tableEntry⁰
//│ in [LH_P2 [LH_P2 [LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰] cs³] _lh_f_LH_P2_1⁴]}}: 1918
//│ [Node [LH_P2 _lh_cacheChecks_Node_0⁰ _lh_cacheChecks_arg2⁰] map_lh_₅(cacheChecks_lh_₂(_lh_cacheChecks_arg1⁰, fillTable_lh_₂(_lh_cacheChecks_Node_0⁰, _lh_cacheChecks_arg1⁰, tail_lh_₂(_lh_cacheChecks_arg2⁰))), _lh_cacheChecks_Node_1⁰)]: 1869 --->
//│ 	case _lh_mapTree_arg2³ of {Node _lh_mapTree_Node_0³ _lh_mapTree_Node_1³ => [Node _lh_mapTree_arg1³(_lh_mapTree_Node_0³) map_lh_₁₀(mapTree_lh_₄(_lh_mapTree_arg1³), _lh_mapTree_Node_1³)]}: 1272
//│ [LH_P2 [LH_N] [Unknown]]: 1878 --->
//│ 	case _lh_f_LH_P2_0² of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => let wipedDomains⁰ = let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => if all_lh_₁(knownConflict_lh_₁, _lh_listcomp_fun_ls_h⁷) then [LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁷(_lh_f_LH_P2_1²)
//│ in let cs'¹ = if null_lh_₁(wipedDomains⁰) then _lh_f_LH_P2_1³ else [Known collect_lh_₁(head_lh_₃(wipedDomains⁰))]
//│ in [LH_P2 _lh_f_LH_P2_0³ cs'¹]}: 1836
//│ [LH_P2 [LH_P2 [LH_N] [Unknown]] _lh_f_LH_P2_1⁴]: 1880 --->
//│ 	case _lh_f_arg1² of {LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1² => case _lh_f_LH_P2_0² of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => let wipedDomains⁰ = let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => if all_lh_₁(knownConflict_lh_₁, _lh_listcomp_fun_ls_h⁷) then [LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁷(_lh_f_LH_P2_1²)
//│ in let cs'¹ = if null_lh_₁(wipedDomains⁰) then _lh_f_LH_P2_1³ else [Known collect_lh_₁(head_lh_₃(wipedDomains⁰))]
//│ in [LH_P2 _lh_f_LH_P2_0³ cs'¹]}}: 1837
//│ [LH_P2 [LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰] cs³]: 1912 --->
//│ 	case _lh_f_LH_P2_0² of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => let wipedDomains⁰ = let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => if all_lh_₁(knownConflict_lh_₁, _lh_listcomp_fun_ls_h⁷) then [LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁷(_lh_f_LH_P2_1²)
//│ in let cs'¹ = if null_lh_₁(wipedDomains⁰) then _lh_f_LH_P2_1³ else [Known collect_lh_₁(head_lh_₃(wipedDomains⁰))]
//│ in [LH_P2 _lh_f_LH_P2_0³ cs'¹]}: 1836
//│ [LH_P2 [LH_P2 [LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰] cs³] _lh_f_LH_P2_1⁴]: 1914 --->
//│ 	case _lh_f_arg1² of {LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1² => case _lh_f_LH_P2_0² of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => let wipedDomains⁰ = let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => if all_lh_₁(knownConflict_lh_₁, _lh_listcomp_fun_ls_h⁷) then [LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁷(_lh_f_LH_P2_1²)
//│ in let cs'¹ = if null_lh_₁(wipedDomains⁰) then _lh_f_LH_P2_1³ else [Known collect_lh_₁(head_lh_₃(wipedDomains⁰))]
//│ in [LH_P2 _lh_f_LH_P2_0³ cs'¹]}}: 1837
//│ [LH_P2 _lh_cacheChecks_Node_0¹ _lh_cacheChecks_arg2¹]: 1991 --->
//│ 	case _lh_f_arg2³ of {LH_P2 _lh_f_LH_P2_0⁵ _lh_f_LH_P2_1⁵ => case _lh_f_LH_P2_0⁵ of {LH_N  => [LH_P2 [LH_P2 [LH_N] [Unknown]] _lh_f_LH_P2_1⁵] | LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹ => let tableEntry¹ = atIndex_lh_₁((value_lh_₁(_lh_f_LH_C_0¹) - 1), head_lh_₁(_lh_f_LH_P2_1⁵))
//│ in let cs⁴ = if polyEq⁰(tableEntry¹, [Unknown]) then checkComplete_lh_₂(_lh_f_arg1⁴, [LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹]) else tableEntry¹
//│ in [LH_P2 [LH_P2 [LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹] cs⁴] _lh_f_LH_P2_1⁵]}}: 2058
//│ [Node [LH_P2 _lh_cacheChecks_Node_0¹ _lh_cacheChecks_arg2¹] map_lh_₃(cacheChecks_lh_₁(_lh_cacheChecks_arg1¹, fillTable_lh_₁(_lh_cacheChecks_Node_0¹, _lh_cacheChecks_arg1¹, tail_lh_₁(_lh_cacheChecks_arg2¹))), _lh_cacheChecks_Node_1¹)]: 2009 --->
//│ 	case _lh_mapTree_arg2⁴ of {Node _lh_mapTree_Node_0⁴ _lh_mapTree_Node_1⁴ => [Node _lh_mapTree_arg1⁴(_lh_mapTree_Node_0⁴) map_lh_₉(mapTree_lh_₃(_lh_mapTree_arg1⁴), _lh_mapTree_Node_1⁴)]}: 1488
//│ [LH_P2 [LH_P2 [LH_N] [Unknown]] _lh_f_LH_P2_1⁵]: 2020 --->
//│ 	case _lh_fst_arg1¹ of {LH_P2 _lh_fst_LH_P2_0¹ _lh_fst_LH_P2_1¹ => _lh_fst_LH_P2_0¹}: 1933
//│ [LH_P2 [LH_P2 [LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹] cs⁴] _lh_f_LH_P2_1⁵]: 2054 --->
//│ 	case _lh_fst_arg1¹ of {LH_P2 _lh_fst_LH_P2_0¹ _lh_fst_LH_P2_1¹ => _lh_fst_LH_P2_0¹}: 1933
//│ [Nothing]: 2088 --->
//│ 	case _lh_matchIdent⁷ of {Nothing  => checkComplete_lh_₁(_lh_bt_arg1², s²) | Just _lh_bt_Just_0² => case _lh_bt_Just_0² of {LH_P2 _lh_bt_LH_P2_0² _lh_bt_LH_P2_1² => [Known [LH_C _lh_bt_LH_P2_0² [LH_C _lh_bt_LH_P2_1² [LH_N]]]]}}: 2227
//│ [Nothing]: 2104 --->
//│ 	case _lh_matchIdent⁷ of {Nothing  => checkComplete_lh_₁(_lh_bt_arg1², s²) | Just _lh_bt_Just_0² => case _lh_bt_Just_0² of {LH_P2 _lh_bt_LH_P2_0² _lh_bt_LH_P2_1² => [Known [LH_C _lh_bt_LH_P2_0² [LH_C _lh_bt_LH_P2_1² [LH_N]]]]}}: 2227
//│ [LH_P2 level_lh_₁(_lh_earliestInconsistency_LH_C_0⁴) level_lh_₂(_lh_earliestInconsistency_LH_C_0⁵)]: 2111 --->
//│ 	case _lh_bt_Just_0² of {LH_P2 _lh_bt_LH_P2_0² _lh_bt_LH_P2_1² => [Known [LH_C _lh_bt_LH_P2_0² [LH_C _lh_bt_LH_P2_1² [LH_N]]]]}: 2226
//│ [Just [LH_P2 level_lh_₁(_lh_earliestInconsistency_LH_C_0⁴) level_lh_₂(_lh_earliestInconsistency_LH_C_0⁵)]]: 2112 --->
//│ 	case _lh_matchIdent⁷ of {Nothing  => checkComplete_lh_₁(_lh_bt_arg1², s²) | Just _lh_bt_Just_0² => case _lh_bt_Just_0² of {LH_P2 _lh_bt_LH_P2_0² _lh_bt_LH_P2_1² => [Known [LH_C _lh_bt_LH_P2_0² [LH_C _lh_bt_LH_P2_1² [LH_N]]]]}}: 2227
//│ [LH_N]: 2260 --->
//│ 	case ls²⁸ of {LH_C h²⁸ t²⁸ => [LH_C f³²(h²⁸) map_lh_₁(f³², t²⁸)] | LH_N  => [LH_N]}: 2247
//│ [LH_C fc_lh_₁ [LH_N]]: 2261 --->
//│ 	case ls²⁸ of {LH_C h²⁸ t²⁸ => [LH_C f³²(h²⁸) map_lh_₁(f³², t²⁸)] | LH_N  => [LH_N]}: 2247
//│ [LH_C bjbt'_lh_₁ [LH_C fc_lh_₁ [LH_N]]]: 2262 --->
//│ 	case ls²⁸ of {LH_C h²⁸ t²⁸ => [LH_C f³²(h²⁸) map_lh_₁(f³², t²⁸)] | LH_N  => [LH_N]}: 2247
//│ [LH_C bjbt_lh_₁ [LH_C bjbt'_lh_₁ [LH_C fc_lh_₁ [LH_N]]]]: 2263 --->
//│ 	case ls²⁸ of {LH_C h²⁸ t²⁸ => [LH_C f³²(h²⁸) map_lh_₁(f³², t²⁸)] | LH_N  => [LH_N]}: 2247
//│ [LH_C bm_lh_₁ [LH_C bjbt_lh_₁ [LH_C bjbt'_lh_₁ [LH_C fc_lh_₁ [LH_N]]]]]: 2264 --->
//│ 	case ls²⁸ of {LH_C h²⁸ t²⁸ => [LH_C f³²(h²⁸) map_lh_₁(f³², t²⁸)] | LH_N  => [LH_N]}: 2247
//│ [LH_C bt_lh_₁ [LH_C bm_lh_₁ [LH_C bjbt_lh_₁ [LH_C bjbt'_lh_₁ [LH_C fc_lh_₁ [LH_N]]]]]]: 2265 --->
//│ 	case ls²⁸ of {LH_C h²⁸ t²⁸ => [LH_C f³²(h²⁸) map_lh_₁(f³², t²⁸)] | LH_N  => [LH_N]}: 2247
//│ ------------------
//│ case ls² of {LH_C h⁴ t⁴ => [LH_C f³(h⁴) map_lh_₁₃(f³, t⁴)] | LH_N  => [LH_N]}: 259 --->
//│ 	[LH_C f⁴(h⁵) map_lh_₁₂(f⁴, t⁵)]: 271
//│ 	[LH_N]: 272
//│ case ls⁶ of {LH_C h⁷ t⁷ => [LH_C f⁶(h⁷) map_lh_₁₁(f⁶, t⁷)] | LH_N  => [LH_N]}: 333 --->
//│ 	[LH_C f⁹(h⁸) map_lh_₁₀(f⁹, t⁸)]: 455
//│ 	[LH_N]: 456
//│ case ys¹ of {LH_C hy⁰ ty⁰ => [LH_C f⁷(hx⁰, hy⁰) zipWith_lh_₄(f⁷, tx⁰, ty⁰)] | LH_N  => [LH_N]}: 367 --->
//│ 	[LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 1173
//│ 	[LH_N]: 1174
//│ case ys² of {LH_C hy¹ ty¹ => [LH_C f⁸(hx¹, hy¹) zipWith_lh_₃(f⁸, tx¹, ty¹)] | LH_N  => [LH_N]}: 409 --->
//│ 	[LH_C let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun²(enumFromTo_lh_₇(1, _lh_fillTable_CSP_1⁰)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 1188
//│ 	[LH_N]: 1189
//│ case ls⁷ of {LH_C h⁸ t⁸ => [LH_C f⁹(h⁸) map_lh_₁₀(f⁹, t⁸)] | LH_N  => [LH_N]}: 457 --->
//│ 	[LH_C f¹⁷(h¹⁶) map_lh_₅(f¹⁷, t¹⁶)]: 1111
//│ 	[LH_N]: 1112
//│ case ys³ of {LH_C hy² ty² => [LH_C f¹⁰(hx², hy²) zipWith_lh_₂(f¹⁰, tx², ty²)] | LH_N  => [LH_N]}: 476 --->
//│ 	[LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]: 1400
//│ 	[LH_N]: 1401
//│ case ys⁴ of {LH_C hy³ ty³ => [LH_C f¹¹(hx³, hy³) zipWith_lh_₁(f¹¹, tx³, ty³)] | LH_N  => [LH_N]}: 518 --->
//│ 	[LH_C let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁴(enumFromTo_lh_₅(1, _lh_fillTable_CSP_1¹)) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 1415
//│ 	[LH_N]: 1416
//│ case ls⁸ of {LH_C h⁹ t⁹ => [LH_C f¹²(h⁹) map_lh_₉(f¹², t⁹)] | LH_N  => [LH_N]}: 555 --->
//│ 	[LH_C f²⁰(h²¹) map_lh_₃(f²⁰, t²¹)]: 1338
//│ 	[LH_N]: 1339
//│ case _lh_combine_arg1⁰ of {LH_N  => _lh_combine_arg2⁰ | LH_C _lh_combine_LH_C_0⁰ _lh_combine_LH_C_1⁰ => case _lh_combine_LH_C_0⁰ of {LH_P2 _lh_combine_LH_P2_0⁰ _lh_combine_LH_P2_1⁰ => case _lh_combine_LH_P2_1⁰ of {Known _lh_combine_Known_0⁰ => if notElem_lh_₁(maxLevel_lh_₄(_lh_combine_LH_P2_0⁰), _lh_combine_Known_0⁰) then _lh_combine_Known_0⁰ else combine_lh_₂(_lh_combine_LH_C_1⁰, union_lh_₂(_lh_combine_Known_0⁰, _lh_combine_arg2⁰)) | _  => error⁰}}}: 701 --->
//│ 	[LH_C f¹³(h¹¹) map_lh_₈(f¹³, t¹¹)]: 671
//│ 	[LH_N]: 672
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C [LH_C [Assign (maxLevel_lh_₄(ss⁰) + 1) _lh_listcomp_fun_ls_h⁰] ss⁰] _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | LH_N  => [LH_N]}: 764 --->
//│ 	[LH_C a⁰ enumFromTo_lh_₉((a⁰ + 1), b⁰)]: 146
//│ 	[LH_N]: 147
//│ case ls¹² of {LH_C h¹³ t¹³ => [LH_C f¹⁵(h¹³) map_lh_₇(f¹⁵, t¹³)] | LH_N  => [LH_N]}: 826 --->
//│ 	[LH_C h¹² filter_lh_₂(f¹⁴, t¹²)]: 795
//│ 	[LH_N]: 802
//│ case _lh_combine_arg1¹ of {LH_N  => _lh_combine_arg2¹ | LH_C _lh_combine_LH_C_0¹ _lh_combine_LH_C_1¹ => case _lh_combine_LH_C_0¹ of {LH_P2 _lh_combine_LH_P2_0¹ _lh_combine_LH_P2_1¹ => case _lh_combine_LH_P2_1¹ of {Known _lh_combine_Known_0¹ => if notElem_lh_₁(maxLevel_lh_₂(_lh_combine_LH_P2_0¹), _lh_combine_Known_0¹) then _lh_combine_Known_0¹ else combine_lh_₁(_lh_combine_LH_C_1¹, union_lh_₂(_lh_combine_Known_0¹, _lh_combine_arg2¹)) | _  => error⁰}}}: 897 --->
//│ 	[LH_C f¹⁶(h¹⁴) map_lh_₆(f¹⁶, t¹⁴)]: 909
//│ 	[LH_N]: 910
//│ case _lh_foldTree_arg2¹ of {Node _lh_foldTree_Node_0¹ _lh_foldTree_Node_1¹ => _lh_foldTree_arg1¹(_lh_foldTree_Node_0¹, map_lh_₁₃(foldTree_lh_₁(_lh_foldTree_arg1¹), _lh_foldTree_Node_1¹))}: 926 --->
//│ 	[Node _lh_mapTree_arg1¹(_lh_mapTree_Node_0¹) map_lh_₁₂(mapTree_lh_₆(_lh_mapTree_arg1¹), _lh_mapTree_Node_1¹)]: 952
//│ case _lh_mapTree_arg2² of {Node _lh_mapTree_Node_0² _lh_mapTree_Node_1² => [Node _lh_mapTree_arg1²(_lh_mapTree_Node_0²) map_lh_₁₁(mapTree_lh_₅(_lh_mapTree_arg1²), _lh_mapTree_Node_1²)]}: 1070 --->
//│ 	[Node _lh_mapTree_arg1³(_lh_mapTree_Node_0³) map_lh_₁₀(mapTree_lh_₄(_lh_mapTree_arg1³), _lh_mapTree_Node_1³)]: 1271
//│ case _lh_matchIdent² of {LH_P2 _lh_fillTable_LH_P2_0⁰ _lh_fillTable_LH_P2_1⁰ => if (polyEq⁰(cs¹, [Unknown]) && not⁰(_lh_fillTable_CSP_2⁰([Assign _lh_fillTable_Assign_0⁰ _lh_fillTable_Assign_1⁰], [Assign _lh_fillTable_LH_P2_0⁰ _lh_fillTable_LH_P2_1⁰]))) then [Known [LH_C _lh_fillTable_Assign_0⁰ [LH_C _lh_fillTable_LH_P2_0⁰ [LH_N]]]] else cs¹}: 1154 --->
//│ 	[LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²]: 1169
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => [LH_N]}: 1175 --->
//│ 	[LH_C a⁵ enumFromTo_lh_₇((a⁵ + 1), b⁴)]: 430
//│ 	[LH_N]: 431
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun²(enumFromTo_lh_₇(1, _lh_fillTable_CSP_1⁰)) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 1190 --->
//│ 	[LH_C a⁴ enumFromTo_lh_₈((a⁴ + 1), b³)]: 388
//│ 	[LH_N]: 389
//│ case _lh_mapTree_arg2³ of {Node _lh_mapTree_Node_0³ _lh_mapTree_Node_1³ => [Node _lh_mapTree_arg1³(_lh_mapTree_Node_0³) map_lh_₁₀(mapTree_lh_₄(_lh_mapTree_arg1³), _lh_mapTree_Node_1³)]}: 1272 --->
//│ 	[Node [LH_P2 _lh_cacheChecks_Node_0⁰ _lh_cacheChecks_arg2⁰] map_lh_₅(cacheChecks_lh_₂(_lh_cacheChecks_arg1⁰, fillTable_lh_₂(_lh_cacheChecks_Node_0⁰, _lh_cacheChecks_arg1⁰, tail_lh_₂(_lh_cacheChecks_arg2⁰))), _lh_cacheChecks_Node_1⁰)]: 1869
//│ case ls¹⁹ of {LH_C h²⁰ t²⁰ => [LH_C f¹⁹(h²⁰) map_lh_₄(f¹⁹, t²⁰)] | LH_N  => [LH_N]}: 1326 --->
//│ 	[LH_C f¹²(h⁹) map_lh_₉(f¹², t⁹)]: 553
//│ 	[LH_N]: 554
//│ case _lh_matchIdent³ of {LH_P2 _lh_fillTable_LH_P2_0¹ _lh_fillTable_LH_P2_1¹ => if (polyEq⁰(cs², [Unknown]) && not⁰(_lh_fillTable_CSP_2¹([Assign _lh_fillTable_Assign_0¹ _lh_fillTable_Assign_1¹], [Assign _lh_fillTable_LH_P2_0¹ _lh_fillTable_LH_P2_1¹]))) then [Known [LH_C _lh_fillTable_Assign_0¹ [LH_C _lh_fillTable_LH_P2_0¹ [LH_N]]]] else cs²}: 1381 --->
//│ 	[LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h⁴]: 1396
//│ case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => [LH_N]}: 1402 --->
//│ 	[LH_C a⁷ enumFromTo_lh_₅((a⁷ + 1), b⁶)]: 539
//│ 	[LH_N]: 540
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_h⁴] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)] | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁴(enumFromTo_lh_₅(1, _lh_fillTable_CSP_1¹)) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => [LH_N]}: 1417 --->
//│ 	[LH_C a⁶ enumFromTo_lh_₆((a⁶ + 1), b⁵)]: 497
//│ 	[LH_N]: 498
//│ case _lh_mapTree_arg2⁴ of {Node _lh_mapTree_Node_0⁴ _lh_mapTree_Node_1⁴ => [Node _lh_mapTree_arg1⁴(_lh_mapTree_Node_0⁴) map_lh_₉(mapTree_lh_₃(_lh_mapTree_arg1⁴), _lh_mapTree_Node_1⁴)]}: 1488 --->
//│ 	[Node [LH_P2 _lh_cacheChecks_Node_0¹ _lh_cacheChecks_arg2¹] map_lh_₃(cacheChecks_lh_₁(_lh_cacheChecks_arg1¹, fillTable_lh_₁(_lh_cacheChecks_Node_0¹, _lh_cacheChecks_arg1¹, tail_lh_₁(_lh_cacheChecks_arg2¹))), _lh_cacheChecks_Node_1¹)]: 2009
//│ case _lh_bt_Just_0⁰ of {LH_P2 _lh_bt_LH_P2_0⁰ _lh_bt_LH_P2_1⁰ => [Known [LH_C _lh_bt_LH_P2_0⁰ [LH_C _lh_bt_LH_P2_1⁰ [LH_N]]]]}: 1581 --->
//│ 	[LH_P2 level_lh_₄(_lh_earliestInconsistency_LH_C_0⁰) level_lh_₄(_lh_earliestInconsistency_LH_C_0¹)]: 628
//│ case _lh_matchIdent⁴ of {Nothing  => checkComplete_lh_₅(_lh_bt_arg1⁰, s⁰) | Just _lh_bt_Just_0⁰ => case _lh_bt_Just_0⁰ of {LH_P2 _lh_bt_LH_P2_0⁰ _lh_bt_LH_P2_1⁰ => [Known [LH_C _lh_bt_LH_P2_0⁰ [LH_C _lh_bt_LH_P2_1⁰ [LH_N]]]]}}: 1582 --->
//│ 	[Nothing]: 605
//│ 	[Nothing]: 621
//│ 	[Just [LH_P2 level_lh_₄(_lh_earliestInconsistency_LH_C_0⁰) level_lh_₄(_lh_earliestInconsistency_LH_C_0¹)]]: 629
//│ case ls²⁷ of {LH_C h²⁷ t²⁷ => (1 + length_lh_₁(t²⁷)) | LH_N  => 0}: 1631 --->
//│ 	[LH_C f¹⁵(h¹³) map_lh_₇(f¹⁵, t¹³)]: 824
//│ 	[LH_N]: 825
//│ case _lh_f_LH_P2_1¹ of {Known _lh_f_Known_0¹ => [Node [LH_P2 _lh_f_LH_P2_0¹ [Known _lh_f_Known_0¹]] _lh_f_arg2¹] | Unknown  => let cs'⁰ = [Known combine_lh_₁(map_lh_₆(label_lh_₁, _lh_f_arg2¹), [LH_N])]
//│ in if knownConflict_lh_₂(cs'⁰) then [Node [LH_P2 _lh_f_LH_P2_0¹ cs'⁰] [LH_N]] else [Node [LH_P2 _lh_f_LH_P2_0¹ cs'⁰] _lh_f_arg2¹]}: 1719 --->
//│ 	[Known [LH_N]]: 995
//│ 	[Unknown]: 996
//│ 	[Known [LH_C _lh_bt_LH_P2_0¹ [LH_C _lh_bt_LH_P2_1¹ [LH_N]]]]: 1746
//│ case _lh_f_arg1¹ of {LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => case _lh_f_LH_P2_1¹ of {Known _lh_f_Known_0¹ => [Node [LH_P2 _lh_f_LH_P2_0¹ [Known _lh_f_Known_0¹]] _lh_f_arg2¹] | Unknown  => let cs'⁰ = [Known combine_lh_₁(map_lh_₆(label_lh_₁, _lh_f_arg2¹), [LH_N])]
//│ in if knownConflict_lh_₂(cs'⁰) then [Node [LH_P2 _lh_f_LH_P2_0¹ cs'⁰] [LH_N]] else [Node [LH_P2 _lh_f_LH_P2_0¹ cs'⁰] _lh_f_arg2¹]}}: 1720 --->
//│ 	[LH_P2 s¹ let _lh_matchIdent⁵ = earliestInconsistency_lh_₂(_lh_bt_arg1¹, s¹)
//│ in case _lh_matchIdent⁵ of {Nothing  => checkComplete_lh_₄(_lh_bt_arg1¹, s¹) | Just _lh_bt_Just_0¹ => case _lh_bt_Just_0¹ of {LH_P2 _lh_bt_LH_P2_0¹ _lh_bt_LH_P2_1¹ => [Known [LH_C _lh_bt_LH_P2_0¹ [LH_C _lh_bt_LH_P2_1¹ [LH_N]]]]}}]: 1750
//│ case _lh_bt_Just_0¹ of {LH_P2 _lh_bt_LH_P2_0¹ _lh_bt_LH_P2_1¹ => [Known [LH_C _lh_bt_LH_P2_0¹ [LH_C _lh_bt_LH_P2_1¹ [LH_N]]]]}: 1747 --->
//│ 	[LH_P2 level_lh_₃(_lh_earliestInconsistency_LH_C_0²) level_lh_₄(_lh_earliestInconsistency_LH_C_0³)]: 981
//│ case _lh_matchIdent⁵ of {Nothing  => checkComplete_lh_₄(_lh_bt_arg1¹, s¹) | Just _lh_bt_Just_0¹ => case _lh_bt_Just_0¹ of {LH_P2 _lh_bt_LH_P2_0¹ _lh_bt_LH_P2_1¹ => [Known [LH_C _lh_bt_LH_P2_0¹ [LH_C _lh_bt_LH_P2_1¹ [LH_N]]]]}}: 1748 --->
//│ 	[Nothing]: 958
//│ 	[Nothing]: 974
//│ 	[Just [LH_P2 level_lh_₃(_lh_earliestInconsistency_LH_C_0²) level_lh_₄(_lh_earliestInconsistency_LH_C_0³)]]: 982
//│ case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [Unknown] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => [LH_N]}: 1767 --->
//│ 	[LH_C a⁹ enumFromTo_lh_₄((a⁹ + 1), b⁷)]: 1015
//│ 	[LH_N]: 1016
//│ case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => [LH_C let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => [LH_C [Unknown] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)] | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁶(enumFromTo_lh_₄(1, _lh_emptyTable_CSP_1⁰)) _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] | LH_N  => [LH_N]}: 1782 --->
//│ 	[LH_C a¹⁰ enumFromTo_lh_₃((a¹⁰ + 1), b⁸)]: 1035
//│ 	[LH_N]: 1036
//│ case _lh_f_LH_P2_0² of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => let wipedDomains⁰ = let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => if all_lh_₁(knownConflict_lh_₁, _lh_listcomp_fun_ls_h⁷) then [LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁷(_lh_f_LH_P2_1²)
//│ in let cs'¹ = if null_lh_₁(wipedDomains⁰) then _lh_f_LH_P2_1³ else [Known collect_lh_₁(head_lh_₃(wipedDomains⁰))]
//│ in [LH_P2 _lh_f_LH_P2_0³ cs'¹]}: 1836 --->
//│ 	[LH_P2 [LH_N] [Unknown]]: 1878
//│ 	[LH_P2 [LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰] cs³]: 1912
//│ case _lh_f_arg1² of {LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1² => case _lh_f_LH_P2_0² of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => let wipedDomains⁰ = let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => if all_lh_₁(knownConflict_lh_₁, _lh_listcomp_fun_ls_h⁷) then [LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁷(_lh_f_LH_P2_1²)
//│ in let cs'¹ = if null_lh_₁(wipedDomains⁰) then _lh_f_LH_P2_1³ else [Known collect_lh_₁(head_lh_₃(wipedDomains⁰))]
//│ in [LH_P2 _lh_f_LH_P2_0³ cs'¹]}}: 1837 --->
//│ 	[LH_P2 [LH_P2 [LH_N] [Unknown]] _lh_f_LH_P2_1⁴]: 1880
//│ 	[LH_P2 [LH_P2 [LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰] cs³] _lh_f_LH_P2_1⁴]: 1914
//│ case _lh_f_arg2² of {LH_P2 _lh_f_LH_P2_0⁴ _lh_f_LH_P2_1⁴ => case _lh_f_LH_P2_0⁴ of {LH_N  => [LH_P2 [LH_P2 [LH_N] [Unknown]] _lh_f_LH_P2_1⁴] | LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰ => let tableEntry⁰ = atIndex_lh_₂((value_lh_₂(_lh_f_LH_C_0⁰) - 1), head_lh_₂(_lh_f_LH_P2_1⁴))
//│ in let cs³ = if polyEq⁰(tableEntry⁰, [Unknown]) then checkComplete_lh_₃(_lh_f_arg1³, [LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰]) else tableEntry⁰
//│ in [LH_P2 [LH_P2 [LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰] cs³] _lh_f_LH_P2_1⁴]}}: 1918 --->
//│ 	[LH_P2 _lh_cacheChecks_Node_0⁰ _lh_cacheChecks_arg2⁰]: 1851
//│ case _lh_fst_arg1¹ of {LH_P2 _lh_fst_LH_P2_0¹ _lh_fst_LH_P2_1¹ => _lh_fst_LH_P2_0¹}: 1933 --->
//│ 	[LH_P2 [LH_P2 [LH_N] [Unknown]] _lh_f_LH_P2_1⁵]: 2020
//│ 	[LH_P2 [LH_P2 [LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹] cs⁴] _lh_f_LH_P2_1⁵]: 2054
//│ case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => [LH_C [Unknown] _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)] | LH_N  => [LH_N]}: 1945 --->
//│ 	[LH_C a¹¹ enumFromTo_lh_₂((a¹¹ + 1), b⁹)]: 1290
//│ 	[LH_N]: 1291
//│ case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => [LH_C let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => [LH_C [Unknown] _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)] | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁹(enumFromTo_lh_₂(1, _lh_emptyTable_CSP_1¹)) _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] | LH_N  => [LH_N]}: 1960 --->
//│ 	[LH_C a¹² enumFromTo_lh_₁((a¹² + 1), b¹⁰)]: 1310
//│ 	[LH_N]: 1311
//│ case _lh_mapTree_arg2⁵ of {Node _lh_mapTree_Node_0⁵ _lh_mapTree_Node_1⁵ => [Node _lh_mapTree_arg1⁵(_lh_mapTree_Node_0⁵) map_lh_₄(mapTree_lh_₂(_lh_mapTree_arg1⁵), _lh_mapTree_Node_1⁵)]}: 1985 --->
//│ 	[Node _lh_mapTree_arg1⁴(_lh_mapTree_Node_0⁴) map_lh_₉(mapTree_lh_₃(_lh_mapTree_arg1⁴), _lh_mapTree_Node_1⁴)]: 1487
//│ case _lh_f_arg2³ of {LH_P2 _lh_f_LH_P2_0⁵ _lh_f_LH_P2_1⁵ => case _lh_f_LH_P2_0⁵ of {LH_N  => [LH_P2 [LH_P2 [LH_N] [Unknown]] _lh_f_LH_P2_1⁵] | LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹ => let tableEntry¹ = atIndex_lh_₁((value_lh_₁(_lh_f_LH_C_0¹) - 1), head_lh_₁(_lh_f_LH_P2_1⁵))
//│ in let cs⁴ = if polyEq⁰(tableEntry¹, [Unknown]) then checkComplete_lh_₂(_lh_f_arg1⁴, [LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹]) else tableEntry¹
//│ in [LH_P2 [LH_P2 [LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹] cs⁴] _lh_f_LH_P2_1⁵]}}: 2058 --->
//│ 	[LH_P2 _lh_cacheChecks_Node_0¹ _lh_cacheChecks_arg2¹]: 1991
//│ case _lh_bt_Just_0² of {LH_P2 _lh_bt_LH_P2_0² _lh_bt_LH_P2_1² => [Known [LH_C _lh_bt_LH_P2_0² [LH_C _lh_bt_LH_P2_1² [LH_N]]]]}: 2226 --->
//│ 	[LH_P2 level_lh_₁(_lh_earliestInconsistency_LH_C_0⁴) level_lh_₂(_lh_earliestInconsistency_LH_C_0⁵)]: 2111
//│ case _lh_matchIdent⁷ of {Nothing  => checkComplete_lh_₁(_lh_bt_arg1², s²) | Just _lh_bt_Just_0² => case _lh_bt_Just_0² of {LH_P2 _lh_bt_LH_P2_0² _lh_bt_LH_P2_1² => [Known [LH_C _lh_bt_LH_P2_0² [LH_C _lh_bt_LH_P2_1² [LH_N]]]]}}: 2227 --->
//│ 	[Nothing]: 2088
//│ 	[Nothing]: 2104
//│ 	[Just [LH_P2 level_lh_₁(_lh_earliestInconsistency_LH_C_0⁴) level_lh_₂(_lh_earliestInconsistency_LH_C_0⁵)]]: 2112
//│ case ls²⁸ of {LH_C h²⁸ t²⁸ => [LH_C f³²(h²⁸) map_lh_₁(f³², t²⁸)] | LH_N  => [LH_N]}: 2247 --->
//│ 	[LH_N]: 2260
//│ 	[LH_C fc_lh_₁ [LH_N]]: 2261
//│ 	[LH_C bjbt'_lh_₁ [LH_C fc_lh_₁ [LH_N]]]: 2262
//│ 	[LH_C bjbt_lh_₁ [LH_C bjbt'_lh_₁ [LH_C fc_lh_₁ [LH_N]]]]: 2263
//│ 	[LH_C bm_lh_₁ [LH_C bjbt_lh_₁ [LH_C bjbt'_lh_₁ [LH_C fc_lh_₁ [LH_N]]]]]: 2264
//│ 	[LH_C bt_lh_₁ [LH_C bm_lh_₁ [LH_C bjbt_lh_₁ [LH_C bjbt'_lh_₁ [LH_C fc_lh_₁ [LH_N]]]]]]: 2265
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testConstraints_nofib_lh_₁(primId⁰(6))
//│ def abs_lh_₁(_lh_abs_arg1⁰) = if (_lh_abs_arg1⁰ > 0) then _lh_abs_arg1⁰ else (0 - _lh_abs_arg1⁰)
//│ def all_lh_₁(_lh_all_arg1⁰, _lh_all_arg2⁰) = case _lh_all_arg2⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0⁰ _lh_all_LH_C_1⁰ => if _lh_all_arg1⁰(_lh_all_LH_C_0⁰) then all_lh_₁(_lh_all_arg1⁰, _lh_all_LH_C_1⁰) else [False]}
//│ def atIndex_lh_₁(n¹, ls²⁷) = if (n¹ < 0) then error⁰ else case ls²⁷ of {
//│ 	LH_C h³¹ t³¹ => if (n¹ == 0) then h³¹ else atIndex_lh_₁((n¹ - 1), t³¹)
//│ 	| LH_N  => error⁰}
//│ def atIndex_lh_₂(n⁰, ls²⁵) = if (n⁰ < 0) then error⁰ else case ls²⁵ of {
//│ 	LH_C h³⁰ t³⁰ => if (n⁰ == 0) then h³⁰ else atIndex_lh_₂((n⁰ - 1), t³⁰)
//│ 	| LH_N  => error⁰}
//│ def bj'_lh_₁(_lh_bj'_arg1⁰) = 
//│ 	let f³⁹ = (fun _lh_f_arg1⁴ -> (fun _lh_f_arg2⁶ -> _lh_f_arg1⁴(_lh_f_arg2⁶)))
//│ 	in foldTree_lh_₁(f³⁹)
//│ def bj_lh_₁(_lh_bj_arg1⁰) = 
//│ 	let f¹² = (fun _lh_f_arg1¹ -> (fun _lh_f_arg2¹ -> case _lh_f_arg1¹ of {
//│ 		LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1⁰ => case _lh_f_LH_P2_1⁰ of {
//│ 			Known _lh_f_Known_0¹ => [Node [LH_P2 _lh_f_LH_P2_0¹ [Known _lh_f_Known_0¹]] _lh_f_arg2¹]
//│ 			| Unknown  => [Node [LH_P2 _lh_f_LH_P2_0¹ [Known combine_lh_₂(map_lh_₈(label_lh_₂, _lh_f_arg2¹), [LH_N])]] _lh_f_arg2¹]}}))
//│ 	in foldTree_lh_₂(f¹²)
//│ def bjbt'_lh_₁(_lh_bjbt'_arg1⁰, _lh_funcomp_x³) = bj'_lh_₁(_lh_bjbt'_arg1⁰, bt_lh_₂(_lh_bjbt'_arg1⁰, _lh_funcomp_x³))
//│ def bjbt_lh_₁(_lh_bjbt_arg1⁰, _lh_funcomp_x¹⁷) = bj_lh_₁(_lh_bjbt_arg1⁰, bt_lh_₃(_lh_bjbt_arg1⁰, _lh_funcomp_x¹⁷))
//│ def bm_lh_₁(_lh_bm_arg1⁰, _lh_funcomp_x⁴) = (fun _lh_funcomp_x⁵ -> mapTree_lh_₂(fst_lh_₁, lookupCache_lh_₁(_lh_bm_arg1⁰, _lh_funcomp_x⁵)))(cacheChecks_lh_₁(_lh_bm_arg1⁰, emptyTable_lh_₁(_lh_bm_arg1⁰), _lh_funcomp_x⁴))
//│ def bt_lh_₁(_lh_bt_arg1⁵) = 
//│ 	let f¹⁵ = (fun s⁵ -> [LH_P2 s⁵ 
//│ 		let _lh_matchIdent⁴ = earliestInconsistency_lh_₁(_lh_bt_arg1⁵, s⁵)
//│ 		in _lh_matchIdent⁴(_lh_bt_arg1⁵, s⁵)])
//│ 	in mapTree_lh_₁(f¹⁵)
//│ def bt_lh_₂(_lh_bt_arg1⁴) = 
//│ 	let f¹³ = (fun s⁴ -> 
//│ 		let _lh_f_LH_P2_1¹ = 	
//│ 			let _lh_matchIdent³ = earliestInconsistency_lh_₂(_lh_bt_arg1⁴, s⁴)
//│ 			in _lh_matchIdent³(_lh_bt_arg1⁴, s⁴)
//│ 		in let _lh_f_LH_P2_0² = s⁴
//│ 		in (fun _lh_f_arg2² -> _lh_f_LH_P2_1¹(_lh_f_LH_P2_0², _lh_f_arg2²)))
//│ 	in mapTree_lh_₆(f¹³)
//│ def bt_lh_₃(_lh_bt_arg1³) = 
//│ 	let f⁸ = (fun s³ -> [LH_P2 s³ 
//│ 		let _lh_matchIdent² = earliestInconsistency_lh_₃(_lh_bt_arg1³, s³)
//│ 		in _lh_matchIdent²(_lh_bt_arg1³, s³)])
//│ 	in mapTree_lh_₇(f⁸)
//│ def cacheChecks_lh_₁(_lh_cacheChecks_arg1¹, _lh_cacheChecks_arg2¹, _lh_cacheChecks_arg3¹, _lh_floatOutId_0²⁴, _lh_floatOutId_1¹⁹) = case _lh_cacheChecks_arg3¹ of {
//│ 	Node _lh_cacheChecks_Node_0¹ _lh_cacheChecks_Node_1¹ => 
//│ 		let _lh_mapTree_Node_1⁴ = map_lh_₃(cacheChecks_lh_₁(_lh_cacheChecks_arg1¹, fillTable_lh_₁(_lh_cacheChecks_Node_0¹, _lh_cacheChecks_arg1¹, tail_lh_₁(_lh_cacheChecks_arg2¹))), _lh_cacheChecks_Node_1¹)
//│ 		in let _lh_mapTree_Node_0⁴ = 	
//│ 			let _lh_f_LH_P2_1⁹ = _lh_cacheChecks_arg2¹
//│ 			in let _lh_f_LH_P2_0¹⁰ = _lh_cacheChecks_Node_0¹
//│ 			in (fun _lh_f_arg1⁵ -> case _lh_f_LH_P2_0¹⁰ of {
//│ 				LH_N  => 
//│ 					let _lh_fst_LH_P2_1¹ = _lh_f_LH_P2_1⁹
//│ 					in let _lh_fst_LH_P2_0¹ = [LH_P2 [LH_N] [Unknown]]
//│ 					in _lh_fst_LH_P2_0¹
//│ 				| LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹ => 
//│ 					let tableEntry¹ = atIndex_lh_₁((value_lh_₁(_lh_f_LH_C_0¹) - 1), head_lh_₁(_lh_f_LH_P2_1⁹))
//│ 					in let cs⁵ = if polyEq⁰(tableEntry¹, [Unknown]) then checkComplete_lh_₂(_lh_f_arg1⁵, [LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹]) else tableEntry¹
//│ 					in let _lh_fst_LH_P2_1² = _lh_f_LH_P2_1⁹
//│ 					in let _lh_fst_LH_P2_0² = [LH_P2 [LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹] cs⁵]
//│ 					in _lh_fst_LH_P2_0²})
//│ 		in let _lh_mapTree_Node_1⁵ = map_lh_₉(mapTree_lh_₃(_lh_floatOutId_0²⁴), _lh_mapTree_Node_1⁴)
//│ 		in let _lh_mapTree_Node_0⁵ = _lh_floatOutId_0²⁴(_lh_mapTree_Node_0⁴)
//│ 		in [Node _lh_floatOutId_1¹⁹(_lh_mapTree_Node_0⁵) map_lh_₄(mapTree_lh_₂(_lh_floatOutId_1¹⁹), _lh_mapTree_Node_1⁵)]}
//│ def cacheChecks_lh_₂(_lh_cacheChecks_arg1⁰, _lh_cacheChecks_arg2⁰, _lh_cacheChecks_arg3⁰, _lh_floatOutId_0¹⁸, _lh_floatOutId_1¹³) = case _lh_cacheChecks_arg3⁰ of {
//│ 	Node _lh_cacheChecks_Node_0⁰ _lh_cacheChecks_Node_1⁰ => 
//│ 		let _lh_mapTree_Node_1¹ = map_lh_₅(cacheChecks_lh_₂(_lh_cacheChecks_arg1⁰, fillTable_lh_₂(_lh_cacheChecks_Node_0⁰, _lh_cacheChecks_arg1⁰, tail_lh_₂(_lh_cacheChecks_arg2⁰))), _lh_cacheChecks_Node_1⁰)
//│ 		in let _lh_mapTree_Node_0¹ = 	
//│ 			let _lh_f_LH_P2_1² = _lh_cacheChecks_arg2⁰
//│ 			in let _lh_f_LH_P2_0⁵ = _lh_cacheChecks_Node_0⁰
//│ 			in (fun _lh_f_arg1³ -> case _lh_f_LH_P2_0⁵ of {
//│ 				LH_N  => 
//│ 					let _lh_f_LH_P2_1³ = _lh_f_LH_P2_1²
//│ 					in let _lh_f_LH_P2_0⁶ = 	
//│ 						let _lh_f_LH_P2_1⁴ = [Unknown]
//│ 						in let _lh_f_LH_P2_0⁷ = [LH_N]
//│ 						in (fun _lh_f_LH_P2_1⁵ -> 
//│ 							let wipedDomains⁰ = 	
//│ 								let _lh_listcomp_fun¹⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 									LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if all_lh_₁(knownConflict_lh_₁, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun¹⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun¹⁵(_lh_listcomp_fun_ls_t⁵)
//│ 									| LH_N  => [LH_N]})
//│ 								in _lh_listcomp_fun¹⁵(_lh_f_LH_P2_1⁵)
//│ 							in let cs'¹ = if null_lh_₁(wipedDomains⁰) then _lh_f_LH_P2_1⁴ else [Known collect_lh_₁(head_lh_₃(wipedDomains⁰))]
//│ 							in [LH_P2 _lh_f_LH_P2_0⁷ cs'¹])
//│ 					in (fun _lh_dummy³ -> _lh_f_LH_P2_0⁶(_lh_f_LH_P2_1³))
//│ 				| LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰ => 
//│ 					let tableEntry⁰ = atIndex_lh_₂((value_lh_₂(_lh_f_LH_C_0⁰) - 1), head_lh_₂(_lh_f_LH_P2_1²))
//│ 					in let cs² = if polyEq⁰(tableEntry⁰, [Unknown]) then checkComplete_lh_₃(_lh_f_arg1³, [LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰]) else tableEntry⁰
//│ 					in let _lh_f_LH_P2_1⁶ = _lh_f_LH_P2_1²
//│ 					in let _lh_f_LH_P2_0⁸ = 	
//│ 						let _lh_f_LH_P2_1⁷ = cs²
//│ 						in let _lh_f_LH_P2_0⁹ = [LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰]
//│ 						in (fun _lh_f_LH_P2_1⁸ -> 
//│ 							let wipedDomains¹ = 	
//│ 								let _lh_listcomp_fun¹⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 									LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => if all_lh_₁(knownConflict_lh_₁, _lh_listcomp_fun_ls_h⁶) then [LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun¹⁶(_lh_listcomp_fun_ls_t⁶)] else _lh_listcomp_fun¹⁶(_lh_listcomp_fun_ls_t⁶)
//│ 									| LH_N  => [LH_N]})
//│ 								in _lh_listcomp_fun¹⁶(_lh_f_LH_P2_1⁸)
//│ 							in let cs'² = if null_lh_₁(wipedDomains¹) then _lh_f_LH_P2_1⁷ else [Known collect_lh_₁(head_lh_₃(wipedDomains¹))]
//│ 							in [LH_P2 _lh_f_LH_P2_0⁹ cs'²])
//│ 					in (fun _lh_dummy⁴ -> _lh_f_LH_P2_0⁸(_lh_f_LH_P2_1⁶))})
//│ 		in let _lh_mapTree_Node_1² = map_lh_₁₀(mapTree_lh_₄(_lh_floatOutId_0¹⁸), _lh_mapTree_Node_1¹)
//│ 		in let _lh_mapTree_Node_0² = _lh_floatOutId_0¹⁸(_lh_mapTree_Node_0¹)
//│ 		in [Node _lh_floatOutId_1¹³(_lh_mapTree_Node_0²) map_lh_₁₁(mapTree_lh_₅(_lh_floatOutId_1¹³), _lh_mapTree_Node_1²)]}
//│ def checkComplete_lh_₁(_lh_checkComplete_arg1², _lh_checkComplete_arg2²) = if complete_lh_₁(_lh_checkComplete_arg1², _lh_checkComplete_arg2²) then [Known [LH_N]] else [Unknown]
//│ def checkComplete_lh_₂(_lh_checkComplete_arg1⁴, _lh_checkComplete_arg2⁴) = if complete_lh_₂(_lh_checkComplete_arg1⁴, _lh_checkComplete_arg2⁴) then [Known [LH_N]] else [Unknown]
//│ def checkComplete_lh_₃(_lh_checkComplete_arg1⁰, _lh_checkComplete_arg2⁰) = if complete_lh_₃(_lh_checkComplete_arg1⁰, _lh_checkComplete_arg2⁰) then [Known [LH_N]] else [Unknown]
//│ def checkComplete_lh_₄(_lh_checkComplete_arg1³, _lh_checkComplete_arg2³, _lh_floatOutId_0¹⁶, _lh_floatOutId_1¹¹) = if complete_lh_₄(_lh_checkComplete_arg1³, _lh_checkComplete_arg2³) then 
//│ 	let _lh_f_Known_0² = [LH_N]
//│ 	in [Node [LH_P2 _lh_floatOutId_0¹⁶ [Known _lh_f_Known_0²]] _lh_floatOutId_1¹¹] else 
//│ 	let cs'⁰ = [Known combine_lh_₁(map_lh_₆(label_lh_₁, _lh_floatOutId_1¹¹), [LH_N])]
//│ 	in if knownConflict_lh_₂(cs'⁰) then [Node [LH_P2 _lh_floatOutId_0¹⁶ cs'⁰] [LH_N]] else [Node [LH_P2 _lh_floatOutId_0¹⁶ cs'⁰] _lh_floatOutId_1¹¹]
//│ def checkComplete_lh_₅(_lh_checkComplete_arg1¹, _lh_checkComplete_arg2¹) = if complete_lh_₄(_lh_checkComplete_arg1¹, _lh_checkComplete_arg2¹) then [Known [LH_N]] else [Unknown]
//│ def collect_lh_₁(_lh_collect_arg1⁰) = case _lh_collect_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_collect_LH_C_0⁰ _lh_collect_LH_C_1⁰ => case _lh_collect_LH_C_0⁰ of {
//│ 		Known _lh_collect_Known_0⁰ => union_lh_₁(_lh_collect_Known_0⁰, collect_lh_₁(_lh_collect_LH_C_1⁰))
//│ 		| _  => error⁰}}
//│ def combine_lh_₁(_lh_combine_arg1¹, _lh_combine_arg2¹) = _lh_combine_arg1¹(_lh_combine_arg2¹)
//│ def combine_lh_₂(_lh_combine_arg1⁰, _lh_combine_arg2⁰) = _lh_combine_arg1⁰(_lh_combine_arg2⁰)
//│ def complete_lh_₁(_lh_complete_arg1⁰, _lh_complete_arg2⁰) = case _lh_complete_arg1⁰ of {
//│ 	CSP _lh_complete_CSP_0⁰ _lh_complete_CSP_1⁰ _lh_complete_CSP_2⁰ => (maxLevel_lh_₁(_lh_complete_arg2⁰) == _lh_complete_CSP_0⁰)}
//│ def complete_lh_₂(_lh_complete_arg1³, _lh_complete_arg2³) = case _lh_complete_arg1³ of {
//│ 	CSP _lh_complete_CSP_0³ _lh_complete_CSP_1³ _lh_complete_CSP_2³ => (maxLevel_lh_₄(_lh_complete_arg2³) == _lh_complete_CSP_0³)}
//│ def complete_lh_₃(_lh_complete_arg1¹, _lh_complete_arg2¹) = case _lh_complete_arg1¹ of {
//│ 	CSP _lh_complete_CSP_0¹ _lh_complete_CSP_1¹ _lh_complete_CSP_2¹ => (maxLevel_lh_₄(_lh_complete_arg2¹) == _lh_complete_CSP_0¹)}
//│ def complete_lh_₄(_lh_complete_arg1², _lh_complete_arg2²) = case _lh_complete_arg1² of {
//│ 	CSP _lh_complete_CSP_0² _lh_complete_CSP_1² _lh_complete_CSP_2² => (maxLevel_lh_₄(_lh_complete_arg2²) == _lh_complete_CSP_0²)}
//│ def concat_lh_₁(lss⁰) = case lss⁰ of {
//│ 	LH_C h²⁶ t²⁶ => mappend_lh_₁(h²⁶, concat_lh_₁(t²⁶))
//│ 	| LH_N  => [LH_N]}
//│ def deleteBy_lh_₁(_lh_deleteBy_arg1⁰, _lh_deleteBy_arg2⁰, _lh_deleteBy_arg3⁰) = case _lh_deleteBy_arg3⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_deleteBy_LH_C_0⁰ _lh_deleteBy_LH_C_1⁰ => if _lh_deleteBy_arg1⁰(_lh_deleteBy_arg2⁰, _lh_deleteBy_LH_C_0⁰) then _lh_deleteBy_LH_C_1⁰ else [LH_C _lh_deleteBy_LH_C_0⁰ deleteBy_lh_₁(_lh_deleteBy_arg1⁰, _lh_deleteBy_arg2⁰, _lh_deleteBy_LH_C_1⁰)]}
//│ def domainWipeOut_lh_₁(_lh_domainWipeOut_arg1⁰, _lh_domainWipeOut_arg2⁰) = case _lh_domainWipeOut_arg1⁰ of {
//│ 	CSP _lh_domainWipeOut_CSP_0⁰ _lh_domainWipeOut_CSP_1⁰ _lh_domainWipeOut_CSP_2⁰ => 
//│ 		let f⁰ = (fun _lh_f_arg1⁰ -> _lh_f_arg1⁰([lh_Unit]))
//│ 		in mapTree_lh_₅(f⁰, _lh_domainWipeOut_arg2⁰)}
//│ def earliestInconsistency_lh_₁(_lh_earliestInconsistency_arg1², _lh_earliestInconsistency_arg2², _lh_floatOutId_0¹⁵, _lh_floatOutId_1¹⁰) = case _lh_earliestInconsistency_arg1² of {
//│ 	CSP _lh_earliestInconsistency_CSP_0² _lh_earliestInconsistency_CSP_1² _lh_earliestInconsistency_CSP_2² => case _lh_earliestInconsistency_arg2² of {
//│ 		LH_N  => checkComplete_lh_₁(_lh_floatOutId_0¹⁵, _lh_floatOutId_1¹⁰)
//│ 		| LH_C _lh_earliestInconsistency_LH_C_0⁴ _lh_earliestInconsistency_LH_C_1⁴ => 
//│ 			let _lh_matchIdent⁶ = filter_lh_₁((fun _lh_funcomp_x⁷ -> not⁰(_lh_earliestInconsistency_CSP_2²(_lh_earliestInconsistency_LH_C_0⁴, _lh_funcomp_x⁷))), reverse_lh_₁(_lh_earliestInconsistency_LH_C_1⁴))
//│ 			in case _lh_matchIdent⁶ of {
//│ 				LH_N  => checkComplete_lh_₁(_lh_floatOutId_0¹⁵, _lh_floatOutId_1¹⁰)
//│ 				| LH_C _lh_earliestInconsistency_LH_C_0⁵ _lh_earliestInconsistency_LH_C_1⁵ => 
//│ 					let _lh_bt_Just_0² = 	
//│ 						let _lh_bt_LH_P2_1² = level_lh_₂(_lh_earliestInconsistency_LH_C_0⁵)
//│ 						in let _lh_bt_LH_P2_0² = level_lh_₁(_lh_earliestInconsistency_LH_C_0⁴)
//│ 						in (fun _lh_dummy² -> [Known [LH_C _lh_bt_LH_P2_0² [LH_C _lh_bt_LH_P2_1² [LH_N]]]])
//│ 					in _lh_bt_Just_0²([lh_Unit])}}}
//│ def earliestInconsistency_lh_₂(_lh_earliestInconsistency_arg1⁰, _lh_earliestInconsistency_arg2⁰, _lh_floatOutId_0², _lh_floatOutId_1²) = case _lh_earliestInconsistency_arg1⁰ of {
//│ 	CSP _lh_earliestInconsistency_CSP_0⁰ _lh_earliestInconsistency_CSP_1⁰ _lh_earliestInconsistency_CSP_2⁰ => case _lh_earliestInconsistency_arg2⁰ of {
//│ 		LH_N  => checkComplete_lh_₄(_lh_floatOutId_0², _lh_floatOutId_1²)
//│ 		| LH_C _lh_earliestInconsistency_LH_C_0⁰ _lh_earliestInconsistency_LH_C_1⁰ => 
//│ 			let _lh_matchIdent¹ = filter_lh_₃((fun _lh_funcomp_x² -> not⁰(_lh_earliestInconsistency_CSP_2⁰(_lh_earliestInconsistency_LH_C_0⁰, _lh_funcomp_x²))), reverse_lh_₂(_lh_earliestInconsistency_LH_C_1⁰))
//│ 			in case _lh_matchIdent¹ of {
//│ 				LH_N  => checkComplete_lh_₄(_lh_floatOutId_0², _lh_floatOutId_1²)
//│ 				| LH_C _lh_earliestInconsistency_LH_C_0¹ _lh_earliestInconsistency_LH_C_1¹ => 
//│ 					let _lh_bt_Just_0⁰ = 	
//│ 						let _lh_bt_LH_P2_1⁰ = level_lh_₄(_lh_earliestInconsistency_LH_C_0¹)
//│ 						in let _lh_bt_LH_P2_0⁰ = level_lh_₃(_lh_earliestInconsistency_LH_C_0⁰)
//│ 						in (fun _lh_dummy⁰ -> 
//│ 							let _lh_f_Known_0⁰ = [LH_C _lh_bt_LH_P2_0⁰ [LH_C _lh_bt_LH_P2_1⁰ [LH_N]]]
//│ 							in (fun _lh_f_LH_P2_0⁰ -> (fun _lh_f_arg2⁰ -> [Node [LH_P2 _lh_f_LH_P2_0⁰ [Known _lh_f_Known_0⁰]] _lh_f_arg2⁰])))
//│ 					in _lh_bt_Just_0⁰([lh_Unit])}}}
//│ def earliestInconsistency_lh_₃(_lh_earliestInconsistency_arg1¹, _lh_earliestInconsistency_arg2¹, _lh_floatOutId_0⁹, _lh_floatOutId_1⁶) = case _lh_earliestInconsistency_arg1¹ of {
//│ 	CSP _lh_earliestInconsistency_CSP_0¹ _lh_earliestInconsistency_CSP_1¹ _lh_earliestInconsistency_CSP_2¹ => case _lh_earliestInconsistency_arg2¹ of {
//│ 		LH_N  => checkComplete_lh_₅(_lh_floatOutId_0⁹, _lh_floatOutId_1⁶)
//│ 		| LH_C _lh_earliestInconsistency_LH_C_0² _lh_earliestInconsistency_LH_C_1² => 
//│ 			let _lh_matchIdent⁵ = filter_lh_₃((fun _lh_funcomp_x⁶ -> not⁰(_lh_earliestInconsistency_CSP_2¹(_lh_earliestInconsistency_LH_C_0², _lh_funcomp_x⁶))), reverse_lh_₂(_lh_earliestInconsistency_LH_C_1²))
//│ 			in case _lh_matchIdent⁵ of {
//│ 				LH_N  => checkComplete_lh_₅(_lh_floatOutId_0⁹, _lh_floatOutId_1⁶)
//│ 				| LH_C _lh_earliestInconsistency_LH_C_0³ _lh_earliestInconsistency_LH_C_1³ => 
//│ 					let _lh_bt_Just_0¹ = 	
//│ 						let _lh_bt_LH_P2_1¹ = level_lh_₄(_lh_earliestInconsistency_LH_C_0³)
//│ 						in let _lh_bt_LH_P2_0¹ = level_lh_₄(_lh_earliestInconsistency_LH_C_0²)
//│ 						in (fun _lh_dummy¹ -> [Known [LH_C _lh_bt_LH_P2_0¹ [LH_C _lh_bt_LH_P2_1¹ [LH_N]]]])
//│ 					in _lh_bt_Just_0¹([lh_Unit])}}}
//│ def emptyTable_lh_₁(_lh_emptyTable_arg1¹) = case _lh_emptyTable_arg1¹ of {
//│ 	CSP _lh_emptyTable_CSP_0¹ _lh_emptyTable_CSP_1⁵ _lh_emptyTable_CSP_2¹ => [LH_C [LH_N] 
//│ 		let _lh_listcomp_fun²⁴ = (fun _lh_listcomp_fun_para⁸ -> _lh_listcomp_fun_para⁸(_lh_emptyTable_CSP_1⁵, _lh_listcomp_fun²⁴))
//│ 		in _lh_listcomp_fun²⁴(enumFromTo_lh_₁(1, _lh_emptyTable_CSP_0¹))]}
//│ def emptyTable_lh_₂(_lh_emptyTable_arg1⁰) = case _lh_emptyTable_arg1⁰ of {
//│ 	CSP _lh_emptyTable_CSP_0⁰ _lh_emptyTable_CSP_1⁰ _lh_emptyTable_CSP_2⁰ => [LH_C [LH_N] 
//│ 		let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para³ -> _lh_listcomp_fun_para³(_lh_emptyTable_CSP_1⁰, _lh_listcomp_fun¹¹))
//│ 		in _lh_listcomp_fun¹¹(enumFromTo_lh_₃(1, _lh_emptyTable_CSP_0⁰))]}
//│ def enumFromTo_lh_₁(a⁷, b⁵, _lh_floatOutId_0¹⁷, _lh_floatOutId_1¹²) = if (a⁷ <= b⁵) then 
//│ 	let _lh_listcomp_fun_ls_t⁴ = enumFromTo_lh_₁((a⁷ + 1), b⁵)
//│ 	in let _lh_listcomp_fun_ls_h⁴ = a⁷
//│ 	in [LH_C 
//│ 		let _lh_listcomp_fun¹³ = (fun _lh_listcomp_fun_para⁴ -> _lh_listcomp_fun_para⁴(_lh_listcomp_fun¹³))
//│ 		in _lh_listcomp_fun¹³(enumFromTo_lh_₂(1, _lh_floatOutId_0¹⁷)) _lh_floatOutId_1¹²(_lh_listcomp_fun_ls_t⁴)] else [LH_N]
//│ def enumFromTo_lh_₂(a⁵, b³, _lh_floatOutId_0⁶) = if (a⁵ <= b³) then 
//│ 	let _lh_listcomp_fun_ls_t² = enumFromTo_lh_₂((a⁵ + 1), b³)
//│ 	in let _lh_listcomp_fun_ls_h² = a⁵
//│ 	in [LH_C [Unknown] _lh_floatOutId_0⁶(_lh_listcomp_fun_ls_t²)] else [LH_N]
//│ def enumFromTo_lh_₃(a¹⁰, b⁸, _lh_floatOutId_0²², _lh_floatOutId_1¹⁷) = if (a¹⁰ <= b⁸) then 
//│ 	let _lh_listcomp_fun_ls_t⁹ = enumFromTo_lh_₃((a¹⁰ + 1), b⁸)
//│ 	in let _lh_listcomp_fun_ls_h¹³ = a¹⁰
//│ 	in [LH_C 
//│ 		let _lh_listcomp_fun²² = (fun _lh_listcomp_fun_para⁷ -> _lh_listcomp_fun_para⁷(_lh_listcomp_fun²²))
//│ 		in _lh_listcomp_fun²²(enumFromTo_lh_₄(1, _lh_floatOutId_0²²)) _lh_floatOutId_1¹⁷(_lh_listcomp_fun_ls_t⁹)] else [LH_N]
//│ def enumFromTo_lh_₄(a², b¹, _lh_floatOutId_0⁴) = if (a² <= b¹) then 
//│ 	let _lh_listcomp_fun_ls_t⁰ = enumFromTo_lh_₄((a² + 1), b¹)
//│ 	in let _lh_listcomp_fun_ls_h⁰ = a²
//│ 	in [LH_C [Unknown] _lh_floatOutId_0⁴(_lh_listcomp_fun_ls_t⁰)] else [LH_N]
//│ def enumFromTo_lh_₅(a⁹, b⁷, _lh_floatOutId_0²⁰, _lh_floatOutId_1¹⁵, _lh_floatOutId_2², _lh_floatOutId_3², _lh_floatOutId_4²) = if (a⁹ <= b⁷) then 
//│ 	let _lh_listcomp_fun_ls_t⁸ = enumFromTo_lh_₅((a⁹ + 1), b⁷)
//│ 	in let _lh_listcomp_fun_ls_h¹⁰ = a⁹
//│ 	in let ty² = _lh_floatOutId_1¹⁵(_lh_listcomp_fun_ls_t⁸)
//│ 	in let hy² = 	
//│ 		let _lh_fillTable_LH_P2_1¹ = _lh_listcomp_fun_ls_h¹⁰
//│ 		in let _lh_fillTable_LH_P2_0¹ = _lh_floatOutId_0²⁰
//│ 		in (fun _lh_fillTable_Assign_0² -> (fun _lh_fillTable_Assign_1² -> (fun _lh_fillTable_CSP_2² -> (fun cs⁴ -> if (polyEq⁰(cs⁴, [Unknown]) && not⁰(_lh_fillTable_CSP_2²([Assign _lh_fillTable_Assign_0² _lh_fillTable_Assign_1²], [Assign _lh_fillTable_LH_P2_0¹ _lh_fillTable_LH_P2_1¹]))) then [Known [LH_C _lh_fillTable_Assign_0² [LH_C _lh_fillTable_LH_P2_0¹ [LH_N]]]] else cs⁴))))
//│ 	in [LH_C _lh_floatOutId_2²(_lh_floatOutId_3², hy²) zipWith_lh_₂(_lh_floatOutId_2², _lh_floatOutId_4², ty²)] else [LH_N]
//│ def enumFromTo_lh_₆(a³, b², _lh_floatOutId_0⁵, _lh_floatOutId_1³, _lh_floatOutId_2⁰, _lh_floatOutId_3⁰, _lh_floatOutId_4⁰) = if (a³ <= b²) then 
//│ 	let _lh_listcomp_fun_ls_t¹ = enumFromTo_lh_₆((a³ + 1), b²)
//│ 	in let _lh_listcomp_fun_ls_h¹ = a³
//│ 	in let ty⁰ = _lh_floatOutId_1³(_lh_listcomp_fun_ls_t¹)
//│ 	in let hy⁰ = 	
//│ 		let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para¹ -> _lh_listcomp_fun_para¹(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun⁴))
//│ 		in _lh_listcomp_fun⁴(enumFromTo_lh_₅(1, _lh_floatOutId_0⁵))
//│ 	in [LH_C _lh_floatOutId_2⁰(_lh_floatOutId_3⁰, hy⁰) zipWith_lh_₁(_lh_floatOutId_2⁰, _lh_floatOutId_4⁰, ty⁰)] else [LH_N]
//│ def enumFromTo_lh_₇(a⁸, b⁶, _lh_floatOutId_0¹⁹, _lh_floatOutId_1¹⁴, _lh_floatOutId_2¹, _lh_floatOutId_3¹, _lh_floatOutId_4¹) = if (a⁸ <= b⁶) then 
//│ 	let _lh_listcomp_fun_ls_t⁷ = enumFromTo_lh_₇((a⁸ + 1), b⁶)
//│ 	in let _lh_listcomp_fun_ls_h⁷ = a⁸
//│ 	in let ty¹ = _lh_floatOutId_1¹⁴(_lh_listcomp_fun_ls_t⁷)
//│ 	in let hy¹ = 	
//│ 		let _lh_fillTable_LH_P2_1⁰ = _lh_listcomp_fun_ls_h⁷
//│ 		in let _lh_fillTable_LH_P2_0⁰ = _lh_floatOutId_0¹⁹
//│ 		in (fun _lh_fillTable_Assign_0¹ -> (fun _lh_fillTable_Assign_1¹ -> (fun _lh_fillTable_CSP_2¹ -> (fun cs³ -> if (polyEq⁰(cs³, [Unknown]) && not⁰(_lh_fillTable_CSP_2¹([Assign _lh_fillTable_Assign_0¹ _lh_fillTable_Assign_1¹], [Assign _lh_fillTable_LH_P2_0⁰ _lh_fillTable_LH_P2_1⁰]))) then [Known [LH_C _lh_fillTable_Assign_0¹ [LH_C _lh_fillTable_LH_P2_0⁰ [LH_N]]]] else cs³))))
//│ 	in [LH_C _lh_floatOutId_2¹(_lh_floatOutId_3¹, hy¹) zipWith_lh_₄(_lh_floatOutId_2¹, _lh_floatOutId_4¹, ty¹)] else [LH_N]
//│ def enumFromTo_lh_₈(a¹¹, b⁹, _lh_floatOutId_0²⁵, _lh_floatOutId_1²⁰, _lh_floatOutId_2³, _lh_floatOutId_3³, _lh_floatOutId_4³) = if (a¹¹ <= b⁹) then 
//│ 	let _lh_listcomp_fun_ls_t¹⁰ = enumFromTo_lh_₈((a¹¹ + 1), b⁹)
//│ 	in let _lh_listcomp_fun_ls_h¹⁴ = a¹¹
//│ 	in let ty³ = _lh_floatOutId_1²⁰(_lh_listcomp_fun_ls_t¹⁰)
//│ 	in let hy³ = 	
//│ 		let _lh_listcomp_fun²⁶ = (fun _lh_listcomp_fun_para⁹ -> _lh_listcomp_fun_para⁹(_lh_listcomp_fun_ls_h¹⁴, _lh_listcomp_fun²⁶))
//│ 		in _lh_listcomp_fun²⁶(enumFromTo_lh_₇(1, _lh_floatOutId_0²⁵))
//│ 	in [LH_C _lh_floatOutId_2³(_lh_floatOutId_3³, hy³) zipWith_lh_₃(_lh_floatOutId_2³, _lh_floatOutId_4³, ty³)] else [LH_N]
//│ def enumFromTo_lh_₉(a⁶, b⁴, _lh_floatOutId_0¹², _lh_floatOutId_1⁷) = if (a⁶ <= b⁴) then 
//│ 	let _lh_listcomp_fun_ls_t³ = enumFromTo_lh_₉((a⁶ + 1), b⁴)
//│ 	in let _lh_listcomp_fun_ls_h³ = a⁶
//│ 	in [LH_C [LH_C [Assign (maxLevel_lh_₄(_lh_floatOutId_1⁷) + 1) _lh_listcomp_fun_ls_h³] _lh_floatOutId_1⁷] _lh_floatOutId_0¹²(_lh_listcomp_fun_ls_t³)] else [LH_N]
//│ def fc_lh_₁(_lh_fc_arg1⁰, _lh_funcomp_x⁸) = (fun _lh_funcomp_x⁹ -> domainWipeOut_lh_₁(_lh_fc_arg1⁰, lookupCache_lh_₂(_lh_fc_arg1⁰, _lh_funcomp_x⁹)))(cacheChecks_lh_₂(_lh_fc_arg1⁰, emptyTable_lh_₂(_lh_fc_arg1⁰), _lh_funcomp_x⁸))
//│ def fillTable_lh_₁(_lh_fillTable_arg1⁰, _lh_fillTable_arg2⁰, _lh_fillTable_arg3⁰) = case _lh_fillTable_arg1⁰ of {
//│ 	LH_N  => _lh_fillTable_arg3⁰
//│ 	| LH_C _lh_fillTable_LH_C_0⁰ _lh_fillTable_LH_C_1⁰ => case _lh_fillTable_LH_C_0⁰ of {
//│ 		Assign _lh_fillTable_Assign_0⁰ _lh_fillTable_Assign_1⁰ => case _lh_fillTable_arg2⁰ of {
//│ 			CSP _lh_fillTable_CSP_0⁰ _lh_fillTable_CSP_1⁰ _lh_fillTable_CSP_2⁰ => 
//│ 				let f¹ = (fun cs⁰ -> (fun varval⁰ -> 
//│ 					let _lh_matchIdent⁰ = varval⁰
//│ 					in _lh_matchIdent⁰(_lh_fillTable_Assign_0⁰, _lh_fillTable_Assign_1⁰, _lh_fillTable_CSP_2⁰, cs⁰)))
//│ 				in zipWith_lh_₁(zipWith_lh_₂(f¹), _lh_fillTable_arg3⁰, 
//│ 					let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> _lh_listcomp_fun_para⁰(_lh_fillTable_CSP_1⁰, _lh_listcomp_fun⁰))
//│ 					in _lh_listcomp_fun⁰(enumFromTo_lh_₆((_lh_fillTable_Assign_0⁰ + 1), _lh_fillTable_CSP_0⁰)))}}}
//│ def fillTable_lh_₂(_lh_fillTable_arg1¹, _lh_fillTable_arg2¹, _lh_fillTable_arg3¹) = case _lh_fillTable_arg1¹ of {
//│ 	LH_N  => _lh_fillTable_arg3¹
//│ 	| LH_C _lh_fillTable_LH_C_0¹ _lh_fillTable_LH_C_1¹ => case _lh_fillTable_LH_C_0¹ of {
//│ 		Assign _lh_fillTable_Assign_0³ _lh_fillTable_Assign_1³ => case _lh_fillTable_arg2¹ of {
//│ 			CSP _lh_fillTable_CSP_0¹ _lh_fillTable_CSP_1⁵ _lh_fillTable_CSP_2³ => 
//│ 				let f⁵¹ = (fun cs⁶ -> (fun varval¹ -> 
//│ 					let _lh_matchIdent⁷ = varval¹
//│ 					in _lh_matchIdent⁷(_lh_fillTable_Assign_0³, _lh_fillTable_Assign_1³, _lh_fillTable_CSP_2³, cs⁶)))
//│ 				in zipWith_lh_₃(zipWith_lh_₄(f⁵¹), _lh_fillTable_arg3¹, 
//│ 					let _lh_listcomp_fun²⁸ = (fun _lh_listcomp_fun_para¹⁰ -> _lh_listcomp_fun_para¹⁰(_lh_fillTable_CSP_1⁵, _lh_listcomp_fun²⁸))
//│ 					in _lh_listcomp_fun²⁸(enumFromTo_lh_₈((_lh_fillTable_Assign_0³ + 1), _lh_fillTable_CSP_0¹)))}}}
//│ def filterTree_lh_₁(_lh_filterTree_arg1⁰) = 
//│ 	let f² = (fun a¹ -> (fun cs¹ -> [Node a¹ filter_lh_₃((fun _lh_funcomp_x¹ -> _lh_filterTree_arg1⁰(label_lh_₂(_lh_funcomp_x¹))), cs¹)]))
//│ 	in foldTree_lh_₂(f²)
//│ def filter_lh_₁(f⁴⁶, ls¹⁸) = case ls¹⁸ of {
//│ 	LH_C h²³ t²³ => if f⁴⁶(h²³) then [LH_C h²³ filter_lh_₁(f⁴⁶, t²³)] else filter_lh_₁(f⁴⁶, t²³)
//│ 	| LH_N  => [LH_N]}
//│ def filter_lh_₂(f⁵³, ls²⁴) = case ls²⁴ of {
//│ 	LH_C h²⁷ t²⁷ => if f⁵³(h²⁷) then 
//│ 		let t²⁸ = filter_lh_₂(f⁵³, t²⁷)
//│ 		in let h²⁸ = h²⁷
//│ 		in (fun f⁵⁴ -> 
//│ 			let t²⁹ = map_lh_₇(f⁵⁴, t²⁸)
//│ 			in let h²⁹ = f⁵⁴(h²⁸)
//│ 			in (fun _lh_dummy⁵ -> (1 + length_lh_₁(t²⁹)))) else filter_lh_₂(f⁵³, t²⁷)
//│ 	| LH_N  => (fun f⁵⁵ -> (fun _lh_dummy⁶ -> 0))}
//│ def filter_lh_₃(f³, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => if f³(h⁰) then [LH_C h⁰ filter_lh_₃(f³, t⁰)] else filter_lh_₃(f³, t⁰)
//│ 	| LH_N  => [LH_N]}
//│ def flip_lh_₁(_lh_flip_arg1⁰, _lh_flip_arg2⁰, _lh_flip_arg3⁰) = _lh_flip_arg1⁰(_lh_flip_arg3⁰, _lh_flip_arg2⁰)
//│ def foldTree_lh_₁(_lh_foldTree_arg1⁰, _lh_foldTree_arg2⁰) = _lh_foldTree_arg2⁰(_lh_foldTree_arg1⁰)
//│ def foldTree_lh_₂(_lh_foldTree_arg1¹, _lh_foldTree_arg2¹) = case _lh_foldTree_arg2¹ of {
//│ 	Node _lh_foldTree_Node_0⁰ _lh_foldTree_Node_1⁰ => _lh_foldTree_arg1¹(_lh_foldTree_Node_0⁰, map_lh_₁₄(foldTree_lh_₂(_lh_foldTree_arg1¹), _lh_foldTree_Node_1⁰))}
//│ def foldl_lh_₁(f⁵, i⁰, ls²) = case ls² of {
//│ 	LH_C h¹ t¹ => foldl_lh_₁(f⁵, f⁵(i⁰, h¹), t¹)
//│ 	| LH_N  => i⁰}
//│ def fst_lh_₁(_lh_fst_arg1¹) = _lh_fst_arg1¹
//│ def fst_lh_₂(_lh_fst_arg1⁰) = case _lh_fst_arg1⁰ of {
//│ 	LH_P2 _lh_fst_LH_P2_0⁰ _lh_fst_LH_P2_1⁰ => _lh_fst_LH_P2_0⁰}
//│ def head_lh_₁(ls²¹) = case ls²¹ of {
//│ 	LH_C h²⁵ t²⁵ => h²⁵
//│ 	| LH_N  => error⁰}
//│ def head_lh_₂(ls⁴) = case ls⁴ of {
//│ 	LH_C h³ t³ => h³
//│ 	| LH_N  => error⁰}
//│ def head_lh_₃(ls¹⁹) = case ls¹⁹ of {
//│ 	LH_C h²⁴ t²⁴ => h²⁴
//│ 	| LH_N  => error⁰}
//│ def initTree_lh_₁(_lh_initTree_arg1⁰, _lh_initTree_arg2⁰) = [Node _lh_initTree_arg2⁰ map_lh_₁₄(initTree_lh_₁(_lh_initTree_arg1⁰), _lh_initTree_arg1⁰(_lh_initTree_arg2⁰))]
//│ def knownConflict_lh_₁(_lh_knownConflict_arg1⁰) = case _lh_knownConflict_arg1⁰ of {
//│ 	Known _lh_knownConflict_Known_0⁰ => case _lh_knownConflict_Known_0⁰ of {
//│ 		LH_C _lh_knownConflict_LH_C_0⁰ _lh_knownConflict_LH_C_1⁰ => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def knownConflict_lh_₂(_lh_knownConflict_arg1¹) = case _lh_knownConflict_arg1¹ of {
//│ 	Known _lh_knownConflict_Known_0¹ => case _lh_knownConflict_Known_0¹ of {
//│ 		LH_C _lh_knownConflict_LH_C_0¹ _lh_knownConflict_LH_C_1¹ => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def knownConflict_lh_₃(_lh_knownConflict_arg1²) = case _lh_knownConflict_arg1² of {
//│ 	Known _lh_knownConflict_Known_0² => case _lh_knownConflict_Known_0² of {
//│ 		LH_C _lh_knownConflict_LH_C_0² _lh_knownConflict_LH_C_1² => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def knownSolution_lh_₁(_lh_knownSolution_arg1⁰) = case _lh_knownSolution_arg1⁰ of {
//│ 	Known _lh_knownSolution_Known_0⁰ => case _lh_knownSolution_Known_0⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def label_lh_₁(_lh_label_arg1¹) = case _lh_label_arg1¹ of {
//│ 	Node _lh_label_Node_0¹ _lh_label_Node_1¹ => _lh_label_Node_0¹}
//│ def label_lh_₂(_lh_label_arg1⁰) = case _lh_label_arg1⁰ of {
//│ 	Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => _lh_label_Node_0⁰}
//│ def leaves_lh_₁(_lh_leaves_arg1⁰) = case _lh_leaves_arg1⁰ of {
//│ 	Node _lh_leaves_Node_0⁰ _lh_leaves_Node_1⁰ => case _lh_leaves_Node_1⁰ of {
//│ 		LH_N  => [LH_C _lh_leaves_Node_0⁰ [LH_N]]
//│ 		| _  => concat_lh_₁(map_lh_₁₄(leaves_lh_₁, _lh_leaves_Node_1⁰))}}
//│ def length_lh_₁(ls¹⁵) = ls¹⁵([lh_Unit])
//│ def level_lh_₁(_lh_level_arg1³) = case _lh_level_arg1³ of {
//│ 	Assign _lh_level_Assign_0³ _lh_level_Assign_1³ => _lh_level_Assign_0³}
//│ def level_lh_₂(_lh_level_arg1¹) = case _lh_level_arg1¹ of {
//│ 	Assign _lh_level_Assign_0¹ _lh_level_Assign_1¹ => _lh_level_Assign_0¹}
//│ def level_lh_₃(_lh_level_arg1²) = case _lh_level_arg1² of {
//│ 	Assign _lh_level_Assign_0² _lh_level_Assign_1² => _lh_level_Assign_0²}
//│ def level_lh_₄(_lh_level_arg1⁰) = case _lh_level_arg1⁰ of {
//│ 	Assign _lh_level_Assign_0⁰ _lh_level_Assign_1⁰ => _lh_level_Assign_0⁰}
//│ def lookupCache_lh_₁(_lh_lookupCache_arg1⁰, _lh_lookupCache_arg2⁰) = 
//│ 	let f²⁸ = (fun _lh_f_arg1² -> (fun _lh_f_arg2⁵ -> _lh_f_arg2⁵(_lh_f_arg1²)))
//│ 	in mapTree_lh_₃(f²⁸(_lh_lookupCache_arg1⁰), _lh_lookupCache_arg2⁰)
//│ def lookupCache_lh_₂(_lh_lookupCache_arg1¹, _lh_lookupCache_arg2¹) = 
//│ 	let f⁵⁷ = (fun _lh_f_arg1⁶ -> (fun _lh_f_arg2⁷ -> _lh_f_arg2⁷(_lh_f_arg1⁶)))
//│ 	in mapTree_lh_₄(f⁵⁷(_lh_lookupCache_arg1¹), _lh_lookupCache_arg2¹)
//│ def mapTree_lh_₁(_lh_mapTree_arg1¹⁰, _lh_mapTree_arg2⁶) = case _lh_mapTree_arg2⁶ of {
//│ 	Node _lh_mapTree_Node_0⁶ _lh_mapTree_Node_1⁶ => [Node _lh_mapTree_arg1¹⁰(_lh_mapTree_Node_0⁶) map_lh_₂(mapTree_lh_₁(_lh_mapTree_arg1¹⁰), _lh_mapTree_Node_1⁶)]}
//│ def mapTree_lh_₂(_lh_mapTree_arg1⁹, _lh_mapTree_arg2⁵) = _lh_mapTree_arg2⁵(_lh_mapTree_arg1⁹)
//│ def mapTree_lh_₃(_lh_mapTree_arg1², _lh_mapTree_arg2²) = _lh_mapTree_arg2²(_lh_mapTree_arg1²)
//│ def mapTree_lh_₄(_lh_mapTree_arg1⁵, _lh_mapTree_arg2³) = _lh_mapTree_arg2³(_lh_mapTree_arg1⁵)
//│ def mapTree_lh_₅(_lh_mapTree_arg1¹, _lh_mapTree_arg2¹) = _lh_mapTree_arg2¹(_lh_mapTree_arg1¹)
//│ def mapTree_lh_₆(_lh_mapTree_arg1⁰, _lh_mapTree_arg2⁰, _lh_floatOutId_0³) = case _lh_mapTree_arg2⁰ of {
//│ 	Node _lh_mapTree_Node_0⁰ _lh_mapTree_Node_1⁰ => 
//│ 		let _lh_foldTree_Node_1¹ = map_lh_₁₂(mapTree_lh_₆(_lh_mapTree_arg1⁰), _lh_mapTree_Node_1⁰)
//│ 		in let _lh_foldTree_Node_0¹ = _lh_mapTree_arg1⁰(_lh_mapTree_Node_0⁰)
//│ 		in _lh_floatOutId_0³(_lh_foldTree_Node_0¹, map_lh_₁₃(foldTree_lh_₁(_lh_floatOutId_0³), _lh_foldTree_Node_1¹))}
//│ def mapTree_lh_₇(_lh_mapTree_arg1⁶, _lh_mapTree_arg2⁴) = case _lh_mapTree_arg2⁴ of {
//│ 	Node _lh_mapTree_Node_0³ _lh_mapTree_Node_1³ => [Node _lh_mapTree_arg1⁶(_lh_mapTree_Node_0³) map_lh_₁₄(mapTree_lh_₇(_lh_mapTree_arg1⁶), _lh_mapTree_Node_1³)]}
//│ def map_lh_₁(f²⁷, ls¹³) = ls¹³(f²⁷)
//│ def map_lh_₁₀(f⁵², ls²³) = ls²³(f⁵²)
//│ def map_lh_₁₁(f⁷, ls⁵) = ls⁵(f⁷)
//│ def map_lh_₁₂(f¹⁷, ls¹⁰, _lh_floatOutId_0¹¹) = case ls¹⁰ of {
//│ 	LH_C h⁷ t⁷ => 
//│ 		let t⁸ = map_lh_₁₂(f¹⁷, t⁷)
//│ 		in let h⁸ = f¹⁷(h⁷)
//│ 		in [LH_C _lh_floatOutId_0¹¹(h⁸) map_lh_₁₃(_lh_floatOutId_0¹¹, t⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₃(f¹¹, ls⁷) = ls⁷(f¹¹)
//│ def map_lh_₁₄(f⁴⁰, ls¹⁶) = case ls¹⁶ of {
//│ 	LH_C h¹⁹ t¹⁹ => [LH_C f⁴⁰(h¹⁹) map_lh_₁₄(f⁴⁰, t¹⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f²⁰, ls¹¹) = case ls¹¹ of {
//│ 	LH_C h⁹ t⁹ => [LH_C f²⁰(h⁹) map_lh_₂(f²⁰, t⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f⁴¹, ls¹⁷, _lh_floatOutId_0²³, _lh_floatOutId_1¹⁸) = case ls¹⁷ of {
//│ 	LH_C h²⁰ t²⁰ => 
//│ 		let t²¹ = map_lh_₃(f⁴¹, t²⁰)
//│ 		in let h²¹ = f⁴¹(h²⁰)
//│ 		in let t²² = map_lh_₉(_lh_floatOutId_0²³, t²¹)
//│ 		in let h²² = _lh_floatOutId_0²³(h²¹)
//│ 		in [LH_C _lh_floatOutId_1¹⁸(h²²) map_lh_₄(_lh_floatOutId_1¹⁸, t²²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f⁴⁷, ls²⁰) = ls²⁰(f⁴⁷)
//│ def map_lh_₅(f³³, ls¹⁴, _lh_floatOutId_0²¹, _lh_floatOutId_1¹⁶) = case ls¹⁴ of {
//│ 	LH_C h¹⁶ t¹⁶ => 
//│ 		let t¹⁷ = map_lh_₅(f³³, t¹⁶)
//│ 		in let h¹⁷ = f³³(h¹⁶)
//│ 		in let t¹⁸ = map_lh_₁₀(_lh_floatOutId_0²¹, t¹⁷)
//│ 		in let h¹⁸ = _lh_floatOutId_0²¹(h¹⁷)
//│ 		in [LH_C _lh_floatOutId_1¹⁶(h¹⁸) map_lh_₁₁(_lh_floatOutId_1¹⁶, t¹⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f¹⁶, ls⁹, _lh_floatOutId_0¹⁰) = case ls⁹ of {
//│ 	LH_C h⁶ t⁶ => 
//│ 		let _lh_combine_LH_C_1⁰ = map_lh_₆(f¹⁶, t⁶)
//│ 		in let _lh_combine_LH_C_0⁰ = f¹⁶(h⁶)
//│ 		in case _lh_combine_LH_C_0⁰ of {
//│ 			LH_P2 _lh_combine_LH_P2_0⁰ _lh_combine_LH_P2_1⁰ => case _lh_combine_LH_P2_1⁰ of {
//│ 				Known _lh_combine_Known_0⁰ => if notElem_lh_₁(maxLevel_lh_₂(_lh_combine_LH_P2_0⁰), _lh_combine_Known_0⁰) then _lh_combine_Known_0⁰ else combine_lh_₁(_lh_combine_LH_C_1⁰, union_lh_₂(_lh_combine_Known_0⁰, _lh_floatOutId_0¹⁰))
//│ 				| _  => error⁰}}
//│ 	| LH_N  => _lh_floatOutId_0¹⁰}
//│ def map_lh_₇(f⁶, ls³) = ls³(f⁶)
//│ def map_lh_₈(f⁵⁸, ls²⁸, _lh_floatOutId_0²⁶) = case ls²⁸ of {
//│ 	LH_C h³² t³² => 
//│ 		let _lh_combine_LH_C_1¹ = map_lh_₈(f⁵⁸, t³²)
//│ 		in let _lh_combine_LH_C_0¹ = f⁵⁸(h³²)
//│ 		in case _lh_combine_LH_C_0¹ of {
//│ 			LH_P2 _lh_combine_LH_P2_0¹ _lh_combine_LH_P2_1¹ => case _lh_combine_LH_P2_1¹ of {
//│ 				Known _lh_combine_Known_0¹ => if notElem_lh_₁(maxLevel_lh_₄(_lh_combine_LH_P2_0¹), _lh_combine_Known_0¹) then _lh_combine_Known_0¹ else combine_lh_₂(_lh_combine_LH_C_1¹, union_lh_₂(_lh_combine_Known_0¹, _lh_floatOutId_0²⁶))
//│ 				| _  => error⁰}}
//│ 	| LH_N  => _lh_floatOutId_0²⁶}
//│ def map_lh_₉(f⁴, ls¹) = ls¹(f⁴)
//│ def mappend_lh_₁(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h² t² => [LH_C h² mappend_lh_₁(t², ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def maxLevel_lh_₁(_lh_maxLevel_arg1⁰) = case _lh_maxLevel_arg1⁰ of {
//│ 	LH_N  => 0
//│ 	| LH_C _lh_maxLevel_LH_C_0⁰ _lh_maxLevel_LH_C_1⁰ => case _lh_maxLevel_LH_C_0⁰ of {
//│ 		Assign _lh_maxLevel_Assign_0⁰ _lh_maxLevel_Assign_1⁰ => _lh_maxLevel_Assign_0⁰}}
//│ def maxLevel_lh_₂(_lh_maxLevel_arg1²) = case _lh_maxLevel_arg1² of {
//│ 	LH_N  => 0
//│ 	| LH_C _lh_maxLevel_LH_C_0² _lh_maxLevel_LH_C_1² => case _lh_maxLevel_LH_C_0² of {
//│ 		Assign _lh_maxLevel_Assign_0² _lh_maxLevel_Assign_1² => _lh_maxLevel_Assign_0²}}
//│ def maxLevel_lh_₃(_lh_maxLevel_arg1¹) = case _lh_maxLevel_arg1¹ of {
//│ 	LH_N  => 0
//│ 	| LH_C _lh_maxLevel_LH_C_0¹ _lh_maxLevel_LH_C_1¹ => case _lh_maxLevel_LH_C_0¹ of {
//│ 		Assign _lh_maxLevel_Assign_0¹ _lh_maxLevel_Assign_1¹ => _lh_maxLevel_Assign_0¹}}
//│ def maxLevel_lh_₄(_lh_maxLevel_arg1³) = case _lh_maxLevel_arg1³ of {
//│ 	LH_N  => 0
//│ 	| LH_C _lh_maxLevel_LH_C_0³ _lh_maxLevel_LH_C_1³ => case _lh_maxLevel_LH_C_0³ of {
//│ 		Assign _lh_maxLevel_Assign_0³ _lh_maxLevel_Assign_1³ => _lh_maxLevel_Assign_0³}}
//│ def mkTree_lh_₁(_lh_mkTree_arg1⁰) = case _lh_mkTree_arg1⁰ of {
//│ 	CSP _lh_mkTree_CSP_0⁰ _lh_mkTree_CSP_1⁰ _lh_mkTree_CSP_2⁰ => 
//│ 		let next⁰ = (fun ss⁰ -> if (maxLevel_lh_₃(ss⁰) < _lh_mkTree_CSP_0⁰) then 
//│ 			let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun⁶, ss⁰))
//│ 			in _lh_listcomp_fun⁶(enumFromTo_lh_₉(1, _lh_mkTree_CSP_1⁰)) else [LH_N])
//│ 		in initTree_lh_₁(next⁰, [LH_N])}
//│ def notElem_lh_₁(_lh_notElem_arg1⁰, _lh_notElem_arg2⁰) = case _lh_notElem_arg2⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_notElem_LH_C_0⁰ _lh_notElem_LH_C_1⁰ => if polyEq⁰(_lh_notElem_arg1⁰, _lh_notElem_LH_C_0⁰) then [False] else notElem_lh_₁(_lh_notElem_arg1⁰, _lh_notElem_LH_C_1⁰)}
//│ def nubBy_lh_₁(_lh_nubBy_arg1⁰, _lh_nubBy_arg2⁰) = case _lh_nubBy_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_nubBy_LH_C_0⁰ _lh_nubBy_LH_C_1⁰ => [LH_C _lh_nubBy_LH_C_0⁰ nubBy_lh_₁(_lh_nubBy_arg1⁰, filter_lh_₃((fun y⁰ -> not⁰(_lh_nubBy_arg1⁰(_lh_nubBy_LH_C_0⁰, y⁰))), _lh_nubBy_LH_C_1⁰))]}
//│ def null_lh_₁(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]}
//│ def prune_lh_₁(_lh_prune_arg1⁰) = filterTree_lh_₁((fun _lh_funcomp_x⁰ -> not⁰(_lh_prune_arg1⁰(_lh_funcomp_x⁰))))
//│ def queens_lh_₁(_lh_queens_arg1⁰) = [CSP _lh_queens_arg1⁰ _lh_queens_arg1⁰ safe_lh_₁]
//│ def reverse_helper_lh_₁(ls⁶, a⁴) = case ls⁶ of {
//│ 	LH_C h⁴ t⁴ => reverse_helper_lh_₁(t⁴, [LH_C h⁴ a⁴])
//│ 	| LH_N  => a⁴}
//│ def reverse_lh_₁(ls²²) = reverse_helper_lh_₁(ls²², [LH_N])
//│ def reverse_lh_₂(ls²⁶) = reverse_helper_lh_₁(ls²⁶, [LH_N])
//│ def safe_lh_₁(_lh_safe_arg1⁰, _lh_safe_arg2⁰) = case _lh_safe_arg1⁰ of {
//│ 	Assign _lh_safe_Assign_0⁰ _lh_safe_Assign_1⁰ => case _lh_safe_arg2⁰ of {
//│ 		Assign _lh_safe_Assign_0¹ _lh_safe_Assign_1¹ => ((_lh_safe_Assign_1⁰ /= _lh_safe_Assign_1¹) && (abs_lh_₁((_lh_safe_Assign_0⁰ - _lh_safe_Assign_0¹)) /= abs_lh_₁((_lh_safe_Assign_1⁰ - _lh_safe_Assign_1¹))))}}
//│ def search_lh_₁(_lh_search_arg1⁰, _lh_search_arg2⁰) = (fun _lh_funcomp_x¹⁰ -> (fun _lh_funcomp_x¹¹ -> (fun _lh_funcomp_x¹² -> (fun _lh_funcomp_x¹³ -> (fun _lh_funcomp_x¹⁴ -> map_lh_₇(fst_lh_₂, filter_lh_₂((fun _lh_funcomp_x¹⁵ -> knownSolution_lh_₁(snd_lh_₁(_lh_funcomp_x¹⁵))), _lh_funcomp_x¹⁴)))(leaves_lh_₁(_lh_funcomp_x¹³)))(prune_lh_₁((fun _lh_funcomp_x¹⁶ -> knownConflict_lh_₃(snd_lh_₂(_lh_funcomp_x¹⁶))), _lh_funcomp_x¹²)))(_lh_search_arg1⁰(_lh_search_arg2⁰, _lh_funcomp_x¹¹)))(mkTree_lh_₁(_lh_funcomp_x¹⁰)))(_lh_search_arg2⁰)
//│ def snd_lh_₁(_lh_snd_arg1¹) = case _lh_snd_arg1¹ of {
//│ 	LH_P2 _lh_snd_LH_P2_0¹ _lh_snd_LH_P2_1¹ => _lh_snd_LH_P2_1¹}
//│ def snd_lh_₂(_lh_snd_arg1⁰) = case _lh_snd_arg1⁰ of {
//│ 	LH_P2 _lh_snd_LH_P2_0⁰ _lh_snd_LH_P2_1⁰ => _lh_snd_LH_P2_1⁰}
//│ def tail_lh_₁(ls¹²) = case ls¹² of {
//│ 	LH_C h¹⁵ t¹⁵ => t¹⁵
//│ 	| LH_N  => error⁰}
//│ def tail_lh_₂(ls⁸) = case ls⁸ of {
//│ 	LH_C h⁵ t⁵ => t⁵
//│ 	| LH_N  => error⁰}
//│ def testConstraints_nofib_lh_₁(_lh_testConstraints_nofib_arg1⁰) = map_lh_₁(try_lh_₁(_lh_testConstraints_nofib_arg1⁰), 
//│ 	let t¹⁰ = 	
//│ 		let t¹¹ = 	
//│ 			let t¹² = 	
//│ 				let t¹³ = 	
//│ 					let t¹⁴ = (fun f²¹ -> [LH_N])
//│ 					in let h¹⁰ = fc_lh_₁
//│ 					in (fun f²² -> [LH_C f²²(h¹⁰) map_lh_₁(f²², t¹⁴)])
//│ 				in let h¹¹ = bjbt'_lh_₁
//│ 				in (fun f²³ -> [LH_C f²³(h¹¹) map_lh_₁(f²³, t¹³)])
//│ 			in let h¹² = bjbt_lh_₁
//│ 			in (fun f²⁴ -> [LH_C f²⁴(h¹²) map_lh_₁(f²⁴, t¹²)])
//│ 		in let h¹³ = bm_lh_₁
//│ 		in (fun f²⁵ -> [LH_C f²⁵(h¹³) map_lh_₁(f²⁵, t¹¹)])
//│ 	in let h¹⁴ = bt_lh_₁
//│ 	in (fun f²⁶ -> [LH_C f²⁶(h¹⁴) map_lh_₁(f²⁶, t¹⁰)]))
//│ def try_lh_₁(_lh_try_arg1⁰, _lh_try_arg2⁰) = length_lh_₁(search_lh_₁(_lh_try_arg2⁰, queens_lh_₁(_lh_try_arg1⁰)))
//│ def unionBy_lh_₁(_lh_unionBy_arg1⁰, _lh_unionBy_arg2⁰, _lh_unionBy_arg3⁰) = mappend_lh_₁(_lh_unionBy_arg2⁰, foldl_lh_₁(flip_lh_₁(deleteBy_lh_₁(_lh_unionBy_arg1⁰)), nubBy_lh_₁(_lh_unionBy_arg1⁰, _lh_unionBy_arg3⁰), _lh_unionBy_arg2⁰))
//│ def union_lh_₁(_lh_union_arg1⁰, _lh_union_arg2⁰) = unionBy_lh_₁((fun a⁰ -> (fun b⁰ -> polyEq⁰(a⁰, b⁰))), _lh_union_arg1⁰, _lh_union_arg2⁰)
//│ def union_lh_₂(_lh_union_arg1¹, _lh_union_arg2¹) = unionBy_lh_₁((fun a¹² -> (fun b¹⁰ -> polyEq⁰(a¹², b¹⁰))), _lh_union_arg1¹, _lh_union_arg2¹)
//│ def value_lh_₁(_lh_value_arg1⁰) = case _lh_value_arg1⁰ of {
//│ 	Assign _lh_value_Assign_0⁰ _lh_value_Assign_1⁰ => _lh_value_Assign_1⁰}
//│ def value_lh_₂(_lh_value_arg1¹) = case _lh_value_arg1¹ of {
//│ 	Assign _lh_value_Assign_0¹ _lh_value_Assign_1¹ => _lh_value_Assign_1¹}
//│ def zipWith_lh_₁(f³⁸, xs², ys²) = case xs² of {
//│ 	LH_C hx⁷ tx⁷ => ys²(f³⁸, hx⁷, tx⁷)
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lh_₂(f¹⁴, xs¹, ys¹) = case xs¹ of {
//│ 	LH_C hx² tx² => ys¹(f¹⁴, hx², tx²)
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lh_₃(f⁴⁸, xs³, ys³) = case xs³ of {
//│ 	LH_C hx⁸ tx⁸ => ys³(f⁴⁸, hx⁸, tx⁸)
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lh_₄(f⁵⁶, xs⁴, ys⁴) = case xs⁴ of {
//│ 	LH_C hx¹¹ tx¹¹ => ys⁴(f⁵⁶, hx¹¹, tx¹¹)
//│ 	| LH_N  => [LH_N]}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
