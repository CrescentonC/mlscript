:NewParser
:ParseOnly

:lhNoIter
:lhInHaskell
:lhGenOCaml
scanl f q ls = q:(case ls of { [] -> []; (x:xs) -> scanl f (f q x) xs })
scanr _ q0 [] = [q0]
scanr f q0 (x:xs) = case (scanr f q0 xs) of {
  (q:t) -> (f x q):(q:t)
}
id x = x
null [] = True
null (x:xs) = False
dropWhile f [] = []
dropWhile f (h:t) = if (f h) then dropWhile f t else (h:t)
inList x (h:t) = if x == h then True else inList x t
inList x [] = False
-- General purpose state monad -----------------------------------------------
type SM s a       = s -> (s, a)
-- Primitive monad operators -------------------------------------------------
retURN           :: a -> SM s a
retURN x          = \s -> (s, x)
bind             :: SM s a -> (a -> SM s b) -> SM s b
bind m f          = \s -> case (m s) of { (s', a) -> f a s' }
join             :: SM s (SM s a) -> SM s a
join m            = \s -> case (m s) of { (s', ma) -> ma s' } 
mmap             :: (a -> b) -> (SM s a -> SM s b)
mmap f m          = \s -> case (m s) of { (s', a) -> (s', f a) }
-- General monad operators ---------------------------------------------------
mmapl            :: (a -> SM s b) -> ([a] -> SM s [b])
mmapl f []        = retURN []
mmapl f (a:as)    = f a             `bind` \b ->
                    mmapl f as      `bind` \bs ->
                    retURN (b:bs)
mmapr            :: (a -> SM s b) -> ([a] -> SM s [b])
mmapr f []        = retURN []
mmapr f (x:xs)    = mmapr f xs      `bind` \ys ->
                    f x             `bind` \y  ->
                    retURN (y:ys)
mfoldl           :: (a -> b -> SM s a) -> a -> [b] -> SM s a
mfoldl f a []     = retURN a
mfoldl f a (x:xs) = f a x           `bind` \fax ->
                    mfoldl f fax xs
mfoldr           :: (a -> b -> SM s b) -> b -> [a] -> SM s b
mfoldr f a []     = retURN a
mfoldr f a (x:xs) = mfoldr f a xs   `bind` \y ->
                    f x y
mif              :: SM s Bool -> SM s a -> SM s a -> SM s a
mif c t f         = c               `bind` \cond ->
                    if cond then t
                            else f
-- Specific utilities for state monads ---------------------------------------
startingWith      :: SM s a -> s -> a
startingWith m v   = case (m v) of { (final, answer) -> answer }
fetch             :: SM s s
fetch              = \s -> (s,s)
fetchWith         :: (s -> a) -> SM s a
fetchWith f        = \s -> (s, f s)
update            :: (s -> s) -> SM s s
update f           = \s -> (f s, s)
set               :: s -> SM s s
set s'             = \s -> (s',s)
-- Common use of state monad: counter ----------------------------------------
incr              :: a -> SM Int Int
incr _             = update (\x -> 1+x)
-- Data type definitions: ----------------------------------------------------
data GenTree a  = Node a [GenTree a]
type LabGraph a = [ (Label, a, [Label]) ]
type Label      = Int
-- Add distinct (integer) labels to each node of a tree: ---------------------
labelTree   :: GenTree a -> GenTree (Label,a)
labelTree t  = (label t) `startingWith` 0
               where label (Node x xs) = (incr 0)           `bind` \n  ->
                                         mmapl label xs `bind` \ts ->
                                         retURN (Node (n,x) ts)
-- Convert tree after labelling each node to a labelled graph: ---------------
ltGraph                :: GenTree (Label,a) -> LabGraph a
ltGraph (Node (n,x) xs) = (n, x, map labelOf xs) : (concat (map ltGraph xs))
                          where labelOf (Node (n,x) xs) = n
-- Build tree from labelled graph: -------------------------------------------
unGraph              :: LabGraph a -> GenTree a
unGraph ((n,x,cs):ts) = 
  let find = \c -> dropWhile (\d__ -> case d__ of (d, _, _) -> c/=d) ts in
  Node x (map (unGraph . find) cs)
-- Build tree but avoid duplicating shared parts: ----------------------------
unGraph'     :: LabGraph String -> GenTree (Int,String)
unGraph' lg =
  (ung lg) `startingWith` []
    where
      ung ((n,x,cs):ts) =
        let find = \c -> dropWhile (\d__ -> case d__ of (d, _, _) -> c/=d) ts in
        mif (visited n) (retURN (Node (n,"<>") [])) (mmapl (ung . find) cs `bind` \ts -> retURN (Node (n,x) ts))
visited      :: Label -> SM [Label] Bool
visited n     = fetch                               `bind` \us ->
                if inList n us then retURN True
                               else set (n:us)      `bind` \_p ->
                                    retURN False
-- Find (and eliminate) repeated subtrees in a labelled graph: ---------------
-- Described as a transformation on labelled graphs:  During the calculation
-- we use a pair (r,lg) :: (Label->Label, LabGraph a) where lg contains the
-- simplified portion of the graph calculated so far and r is a renaming (or
-- replacement?) which maps node labels in the original graph to the approp.
-- labels in the new graph.
findCommon :: Eq a => LabGraph a -> LabGraph a
findCommon ls = case (foldr sim (id,[]) ls) of { (a, b) -> b }
  where
    -- sim ::
    --   Eq a => (Label,a,[Label]) -> (Label -> Label, LabGraph a) ->
    --   (Label -> Label, LabGraph a)
    sim (n,s,cs) (r,lg) =
      let rcs = map r cs in
      let ms = [m | (m,s',cs')<-lg, polyEq s s', polyEq cs' rcs] in
      if null ms then
        (r, [(n,s,rcs)] ++ lg)
      else
        ((newlyDefined n (head ms)) r, lg)
newlyDefined :: Eq a => a -> b -> (a -> b) -> (a -> b)
newlyDefined x fx f y  = if polyEq x y then fx else f y
-- Common subexpression elimination: -----------------------------------------
cse :: Eq a => GenTree a -> LabGraph a
cse t = findCommon (ltGraph $ labelTree t)
-- Examples: -----------------------------------------------------------------
plus_ x y = Node "+" [x,y]
mult_ x y = Node "*" [x,y]
prod xs  = Node "X" xs
zerO 0     = Node "0" []
a        = Node "a" []
b        = Node "b" []
c        = Node "c" []
d        = Node "d" []
example0 _ = a
example1 _ = plus_ a a
example2 _ = plus_ (mult_ a b) (mult_ a b)
example3 _ = plus_ (mult_ (plus_ a b) c) (plus_ a b)
example4 _ = prod (scanl plus_ (zerO 0) [a,b,c,d])
example5 _ = prod (scanr plus_ (zerO 0) [a,b,c,d])
testCse_nofib n = map (\i -> (map cse (take (i `mod` 6) [(example0 0), (example1 0), (example2 0), (example3 0), (example4 0), (example5 0)]))) [1..n]
testCse_nofib $ primId 1000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testCse_nofib_lh^605(primId⁰(1000))
//│ def a_lh = [Node [LH_C 'a' [LH_N]] [LH_N]]
//│ def b_lh = [Node [LH_C 'b' [LH_N]] [LH_N]]
//│ def bind_lh(_lh_bind_arg1⁰, _lh_bind_arg2⁰, s¹) = 
//│ 	let _lh_matchIdent¹ = _lh_bind_arg1⁰(s¹)
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_P2 _lh_bind_LH_P2_0⁰ _lh_bind_LH_P2_1⁰ => _lh_bind_arg2⁰(_lh_bind_LH_P2_1⁰, _lh_bind_LH_P2_0⁰)
//│ 		| _  => error⁰}
//│ def c_lh = [Node [LH_C 'c' [LH_N]] [LH_N]]
//│ def concat_lh(lss⁰) = case lss⁰ of {
//│ 	LH_C h⁵ t⁵ => mappend_lh^93(h⁵, concat_lh^96(t⁵))
//│ 	| LH_N  => [LH_N]}
//│ def cse_lh(_lh_cse_arg1⁰) = findCommon_lh^310(ltGraph_lh^311(labelTree_lh^312(_lh_cse_arg1⁰)))
//│ def d_lh = [Node [LH_C 'd' [LH_N]] [LH_N]]
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^43((a⁰ + 1), b⁰)] else [LH_N]
//│ def example0_lh(_lh_example0_arg1⁰) = a_lh^383
//│ def example1_lh(_lh_example1_arg1⁰) = plus__lh^137(a_lh^138, a_lh^140)
//│ def example2_lh(_lh_example2_arg1⁰) = plus__lh^187(mult__lh^188(a_lh^189, b_lh^191), mult__lh^194(a_lh^195, b_lh^197))
//│ def example3_lh(_lh_example3_arg1⁰) = plus__lh^243(mult__lh^244(plus__lh^245(a_lh^246, b_lh^248), c_lh^251), plus__lh^254(a_lh^255, b_lh^257))
//│ def example4_lh(_lh_example4_arg1⁰) = prod_lh^201(scanl_lh^202(plus__lh^203, zerO_lh^205(0), [LH_C a_lh^209 [LH_C b_lh^210 [LH_C c_lh^211 [LH_C d_lh^212 [LH_N]]]]]))
//│ def example5_lh(_lh_example5_arg1⁰) = prod_lh^414(scanr_lh^415(plus__lh^416, zerO_lh^418(0), [LH_C a_lh^422 [LH_C b_lh^423 [LH_C c_lh^424 [LH_C d_lh^425 [LH_N]]]]]))
//│ def findCommon_lh(_lh_findCommon_arg1⁰) = 
//│ 	let sim⁰ = (fun _lh_sim_arg1⁰ -> (fun _lh_sim_arg2⁰ -> case _lh_sim_arg1⁰ of {
//│ 		LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {
//│ 			LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => 
//│ 				let rcs⁰ = map_lh^508(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ 				in let ms⁰ = 	
//│ 					let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 						LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {
//│ 							LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)
//│ 							| _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ 				in if null_lh^549(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh^553([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh^564(_lh_sim_LH_P3_0⁰, head_lh^567(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}))
//│ 	in let _lh_matchIdent⁴ = foldr_lh^584(sim⁰, [LH_P2 id_lh^587 [LH_N]], _lh_findCommon_arg1⁰)
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_P2 _lh_findCommon_LH_P2_0⁰ _lh_findCommon_LH_P2_1⁰ => _lh_findCommon_LH_P2_1⁰
//│ 		| _  => error⁰}
//│ def foldr_lh(f¹, i⁰, ls¹) = case ls¹ of {
//│ 	LH_C h¹ t¹ => f¹(h¹, foldr_lh^19(f¹, i⁰, t¹))
//│ 	| LH_N  => i⁰}
//│ def head_lh(ls²) = case ls² of {
//│ 	LH_C h² t² => h²
//│ 	| LH_N  => error⁰}
//│ def id_lh(_lh_id_arg1⁰) = _lh_id_arg1⁰
//│ def incr_lh(_lh_incr_arg1⁰) = update_lh^434((fun x⁰ -> (1 + x⁰)))
//│ def labelTree_lh(_lh_labelTree_arg1⁰) = 
//│ 	let label⁰ = (fun _lh_label_arg1⁰ -> case _lh_label_arg1⁰ of {
//│ 		Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh^348(incr_lh^349(0), (fun n¹ -> bind_lh^353(mmapl_lh^354(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh^360([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰])))))
//│ 		| _  => error⁰})
//│ 	in startingWith_lh^374(label⁰(_lh_labelTree_arg1⁰), 0)
//│ def ltGraph_lh(_lh_ltGraph_arg1⁰) = case _lh_ltGraph_arg1⁰ of {
//│ 	Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {
//│ 		LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => 
//│ 			let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {
//│ 				Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {
//│ 					LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 			in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh^155(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh^161(map_lh^162(ltGraph_lh^163, _lh_ltGraph_Node_1⁰))]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def map_lh(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh^5(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh^82(t⁴, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_arg2⁰) = case _lh_mmapl_arg2⁰ of {
//│ 	LH_N  => retURN_lh^282([LH_N])
//│ 	| LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh^285(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh^290(mmapl_lh^291(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh^297([LH_C b¹ bs⁰])))))
//│ 	| _  => error⁰}
//│ def mult__lh(_lh_mult__arg1⁰, _lh_mult__arg2⁰) = [Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]]
//│ def newlyDefined_lh(_lh_newlyDefined_arg1⁰, _lh_newlyDefined_arg2⁰, _lh_newlyDefined_arg3⁰, _lh_newlyDefined_arg4⁰) = if polyEq⁰(_lh_newlyDefined_arg1⁰, _lh_newlyDefined_arg4⁰) then _lh_newlyDefined_arg2⁰ else _lh_newlyDefined_arg3⁰(_lh_newlyDefined_arg4⁰)
//│ def null_lh(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def plus__lh(_lh_plus__arg1⁰, _lh_plus__arg2⁰) = [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]]
//│ def prod_lh(_lh_prod_arg1⁰) = [Node [LH_C 'X' [LH_N]] _lh_prod_arg1⁰]
//│ def retURN_lh(_lh_retURN_arg1⁰, s²) = [LH_P2 s² _lh_retURN_arg1⁰]
//│ def scanl_lh(_lh_scanl_arg1⁰, _lh_scanl_arg2⁰, _lh_scanl_arg3⁰) = [LH_C _lh_scanl_arg2⁰ 
//│ 	let _lh_matchIdent⁰ = _lh_scanl_arg3⁰
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh^225(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰)
//│ 		| _  => error⁰}]
//│ def scanr_lh(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_arg3⁰) = case _lh_scanr_arg3⁰ of {
//│ 	LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]]
//│ 	| LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => 
//│ 		let _lh_matchIdent² = scanr_lh^322(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ 		in case _lh_matchIdent² of {
//│ 			LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def startingWith_lh(_lh_startingWith_arg1⁰, _lh_startingWith_arg2⁰) = 
//│ 	let _lh_matchIdent³ = _lh_startingWith_arg1⁰(_lh_startingWith_arg2⁰)
//│ 	in case _lh_matchIdent³ of {
//│ 		LH_P2 _lh_startingWith_LH_P2_0⁰ _lh_startingWith_LH_P2_1⁰ => _lh_startingWith_LH_P2_1⁰
//│ 		| _  => error⁰}
//│ def take_lh(n⁰, ls³) = if (n⁰ > 0) then case ls³ of {
//│ 	LH_C h³ t³ => [LH_C h³ take_lh^64((n⁰ - 1), t³)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testCse_nofib_lh(_lh_testCse_nofib_arg1⁰) = map_lh^443((fun i¹ -> map_lh^444(cse_lh^445, take_lh^447((i¹ % 6), [LH_C example0_lh^454(0) [LH_C example1_lh^457(0) [LH_C example2_lh^460(0) [LH_C example3_lh^463(0) [LH_C example4_lh^466(0) [LH_C example5_lh^469(0) [LH_N]]]]]]]))), enumFromTo_lh^483(1, _lh_testCse_nofib_arg1⁰))
//│ def update_lh(_lh_update_arg1⁰, s⁰) = [LH_P2 _lh_update_arg1⁰(s⁰) s⁰]
//│ def zerO_lh(_lh_zerO_arg1⁰) = case _lh_zerO_arg1⁰ of {
//│ 	0  => [Node [LH_C '0' [LH_N]] [LH_N]]
//│ 	| _  => error⁰}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo_lh a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec a_lh =
//│ 		  (`Node((`LH_C('a', (`LH_N))), (`LH_N)));;
//│ 		let rec mult__lh _lh_mult__arg1_0 _lh_mult__arg2_0 =
//│ 		  (`Node((`LH_C('*', (`LH_N))), (`LH_C(_lh_mult__arg1_0, (`LH_C(_lh_mult__arg2_0, (`LH_N)))))));;
//│ 		let rec b_lh =
//│ 		  (`Node((`LH_C('b', (`LH_N))), (`LH_N)));;
//│ 		let rec plus__lh _lh_plus__arg1_0 _lh_plus__arg2_0 =
//│ 		  (`Node((`LH_C('+', (`LH_N))), (`LH_C(_lh_plus__arg1_0, (`LH_C(_lh_plus__arg2_0, (`LH_N)))))));;
//│ 		let rec example2_lh _lh_example2_arg1_0 =
//│ 		  ((plus__lh ((mult__lh a_lh) b_lh)) ((mult__lh a_lh) b_lh));;
//│ 		let rec c_lh =
//│ 		  (`Node((`LH_C('c', (`LH_N))), (`LH_N)));;
//│ 		let rec example3_lh _lh_example3_arg1_0 =
//│ 		  ((plus__lh ((mult__lh ((plus__lh a_lh) b_lh)) c_lh)) ((plus__lh a_lh) b_lh));;
//│ 		let rec scanr_lh _lh_scanr_arg1_0 _lh_scanr_arg2_0 _lh_scanr_arg3_0 =
//│ 		  (match _lh_scanr_arg3_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_C(_lh_scanr_arg2_0, (`LH_N)))
//│ 		    | `LH_C(_lh_scanr_LH_C_0_0, _lh_scanr_LH_C_1_0) -> 
//│ 		      (let rec _lh_matchIdent_2 = (((scanr_lh _lh_scanr_arg1_0) _lh_scanr_arg2_0) _lh_scanr_LH_C_1_0) in
//│ 		        (match _lh_matchIdent_2 with
//│ 		          | `LH_C(_lh_scanr_LH_C_0_1, _lh_scanr_LH_C_1_1) -> 
//│ 		            (`LH_C(((_lh_scanr_arg1_0 _lh_scanr_LH_C_0_0) _lh_scanr_LH_C_0_1), (`LH_C(_lh_scanr_LH_C_0_1, _lh_scanr_LH_C_1_1))))
//│ 		          | _ -> 
//│ 		            (failwith "error")))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec prod_lh _lh_prod_arg1_0 =
//│ 		  (`Node((`LH_C('X', (`LH_N))), _lh_prod_arg1_0));;
//│ 		let rec d_lh =
//│ 		  (`Node((`LH_C('d', (`LH_N))), (`LH_N)));;
//│ 		let rec zerO_lh _lh_zerO_arg1_0 =
//│ 		  (match _lh_zerO_arg1_0 with
//│ 		    | 0 -> 
//│ 		      (`Node((`LH_C('0', (`LH_N))), (`LH_N)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec example5_lh _lh_example5_arg1_0 =
//│ 		  (prod_lh (((scanr_lh plus__lh) (zerO_lh 0)) (`LH_C(a_lh, (`LH_C(b_lh, (`LH_C(c_lh, (`LH_C(d_lh, (`LH_N)))))))))));;
//│ 		let rec example0_lh _lh_example0_arg1_0 =
//│ 		  a_lh;;
//│ 		let rec scanl_lh _lh_scanl_arg1_0 _lh_scanl_arg2_0 _lh_scanl_arg3_0 =
//│ 		  (`LH_C(_lh_scanl_arg2_0, (let rec _lh_matchIdent_0 = _lh_scanl_arg3_0 in
//│ 		    (match _lh_matchIdent_0 with
//│ 		      | `LH_N -> 
//│ 		        (`LH_N)
//│ 		      | `LH_C(_lh_scanl_LH_C_0_0, _lh_scanl_LH_C_1_0) -> 
//│ 		        (((scanl_lh _lh_scanl_arg1_0) ((_lh_scanl_arg1_0 _lh_scanl_arg2_0) _lh_scanl_LH_C_0_0)) _lh_scanl_LH_C_1_0)
//│ 		      | _ -> 
//│ 		        (failwith "error")))));;
//│ 		let rec example4_lh _lh_example4_arg1_0 =
//│ 		  (prod_lh (((scanl_lh plus__lh) (zerO_lh 0)) (`LH_C(a_lh, (`LH_C(b_lh, (`LH_C(c_lh, (`LH_C(d_lh, (`LH_N)))))))))));;
//│ 		let rec map_lh f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C((f_0 h_0), ((map_lh f_0) t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      (`LH_C(h_4, ((mappend_lh t_4) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec id_lh _lh_id_arg1_0 =
//│ 		  _lh_id_arg1_0;;
//│ 		let rec newlyDefined_lh _lh_newlyDefined_arg1_0 _lh_newlyDefined_arg2_0 _lh_newlyDefined_arg3_0 _lh_newlyDefined_arg4_0 =
//│ 		  (if (_lh_newlyDefined_arg1_0 = _lh_newlyDefined_arg4_0) then
//│ 		    _lh_newlyDefined_arg2_0
//│ 		  else
//│ 		    (_lh_newlyDefined_arg3_0 _lh_newlyDefined_arg4_0));;
//│ 		let rec head_lh ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      h_2
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec null_lh _lh_null_arg1_0 =
//│ 		  (match _lh_null_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_0, _lh_null_LH_C_1_0) -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec foldr_lh f_1 i_0 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      ((f_1 h_1) (((foldr_lh f_1) i_0) t_1))
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec findCommon_lh _lh_findCommon_arg1_0 =
//│ 		  (let rec sim_0 = (fun _lh_sim_arg1_0 _lh_sim_arg2_0 -> 
//│ 		    (match _lh_sim_arg1_0 with
//│ 		      | `LH_P3(_lh_sim_LH_P3_0_0, _lh_sim_LH_P3_1_0, _lh_sim_LH_P3_2_0) -> 
//│ 		        (match _lh_sim_arg2_0 with
//│ 		          | `LH_P2(_lh_sim_LH_P2_0_0, _lh_sim_LH_P2_1_0) -> 
//│ 		            (let rec rcs_0 = ((map_lh _lh_sim_LH_P2_0_0) _lh_sim_LH_P3_2_0) in
//│ 		              (let rec ms_0 = (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		                (match _lh_listcomp_fun_para_0 with
//│ 		                  | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		                    (match _lh_listcomp_fun_ls_h_0 with
//│ 		                      | `LH_P3(_lh_sim_LH_P3_0_1, _lh_sim_LH_P3_1_1, _lh_sim_LH_P3_2_1) -> 
//│ 		                        (if (_lh_sim_LH_P3_1_0 = _lh_sim_LH_P3_1_1) then
//│ 		                          (if (_lh_sim_LH_P3_2_1 = rcs_0) then
//│ 		                            (`LH_C(_lh_sim_LH_P3_0_1, (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		                          else
//│ 		                            (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│ 		                        else
//│ 		                          (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│ 		                      | _ -> 
//│ 		                        (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│ 		                  | `LH_N -> 
//│ 		                    (`LH_N))) in
//│ 		                (_lh_listcomp_fun_0 _lh_sim_LH_P2_1_0)) in
//│ 		                (if (null_lh ms_0) then
//│ 		                  (`LH_P2(_lh_sim_LH_P2_0_0, ((mappend_lh (`LH_C((`LH_P3(_lh_sim_LH_P3_0_0, _lh_sim_LH_P3_1_0, rcs_0)), (`LH_N)))) _lh_sim_LH_P2_1_0)))
//│ 		                else
//│ 		                  (`LH_P2((((newlyDefined_lh _lh_sim_LH_P3_0_0) (head_lh ms_0)) _lh_sim_LH_P2_0_0), _lh_sim_LH_P2_1_0)))))
//│ 		          | _ -> 
//│ 		            (failwith "error"))
//│ 		      | _ -> 
//│ 		        (failwith "error"))) in
//│ 		    (let rec _lh_matchIdent_4 = (((foldr_lh sim_0) (`LH_P2(id_lh, (`LH_N)))) _lh_findCommon_arg1_0) in
//│ 		      (match _lh_matchIdent_4 with
//│ 		        | `LH_P2(_lh_findCommon_LH_P2_0_0, _lh_findCommon_LH_P2_1_0) -> 
//│ 		          _lh_findCommon_LH_P2_1_0
//│ 		        | _ -> 
//│ 		          (failwith "error"))));;
//│ 		let rec concat_lh lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      ((mappend_lh h_5) (concat_lh t_5))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec ltGraph_lh _lh_ltGraph_arg1_0 =
//│ 		  (match _lh_ltGraph_arg1_0 with
//│ 		    | `Node(_lh_ltGraph_Node_0_0, _lh_ltGraph_Node_1_0) -> 
//│ 		      (match _lh_ltGraph_Node_0_0 with
//│ 		        | `LH_P2(_lh_ltGraph_LH_P2_0_0, _lh_ltGraph_LH_P2_1_0) -> 
//│ 		          (let rec labelOf_0 = (fun _lh_labelOf_arg1_0 -> 
//│ 		            (match _lh_labelOf_arg1_0 with
//│ 		              | `Node(_lh_labelOf_Node_0_0, _lh_labelOf_Node_1_0) -> 
//│ 		                (match _lh_labelOf_Node_0_0 with
//│ 		                  | `LH_P2(_lh_labelOf_LH_P2_0_0, _lh_labelOf_LH_P2_1_0) -> 
//│ 		                    _lh_labelOf_LH_P2_0_0
//│ 		                  | _ -> 
//│ 		                    (failwith "error"))
//│ 		              | _ -> 
//│ 		                (failwith "error"))) in
//│ 		            (`LH_C((`LH_P3(_lh_ltGraph_LH_P2_0_0, _lh_ltGraph_LH_P2_1_0, ((map_lh labelOf_0) _lh_ltGraph_Node_1_0))), (concat_lh ((map_lh ltGraph_lh) _lh_ltGraph_Node_1_0)))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec retURN_lh _lh_retURN_arg1_0 s_2 =
//│ 		  (`LH_P2(s_2, _lh_retURN_arg1_0));;
//│ 		let rec bind_lh _lh_bind_arg1_0 _lh_bind_arg2_0 s_1 =
//│ 		  (let rec _lh_matchIdent_1 = (_lh_bind_arg1_0 s_1) in
//│ 		    (match _lh_matchIdent_1 with
//│ 		      | `LH_P2(_lh_bind_LH_P2_0_0, _lh_bind_LH_P2_1_0) -> 
//│ 		        ((_lh_bind_arg2_0 _lh_bind_LH_P2_1_0) _lh_bind_LH_P2_0_0)
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec mmapl_lh _lh_mmapl_arg1_0 _lh_mmapl_arg2_0 =
//│ 		  (match _lh_mmapl_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (retURN_lh (`LH_N))
//│ 		    | `LH_C(_lh_mmapl_LH_C_0_0, _lh_mmapl_LH_C_1_0) -> 
//│ 		      ((bind_lh (_lh_mmapl_arg1_0 _lh_mmapl_LH_C_0_0)) (fun b_1 -> 
//│ 		        ((bind_lh ((mmapl_lh _lh_mmapl_arg1_0) _lh_mmapl_LH_C_1_0)) (fun bs_0 -> 
//│ 		          (retURN_lh (`LH_C(b_1, bs_0)))))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec startingWith_lh _lh_startingWith_arg1_0 _lh_startingWith_arg2_0 =
//│ 		  (let rec _lh_matchIdent_3 = (_lh_startingWith_arg1_0 _lh_startingWith_arg2_0) in
//│ 		    (match _lh_matchIdent_3 with
//│ 		      | `LH_P2(_lh_startingWith_LH_P2_0_0, _lh_startingWith_LH_P2_1_0) -> 
//│ 		        _lh_startingWith_LH_P2_1_0
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec update_lh _lh_update_arg1_0 s_0 =
//│ 		  (`LH_P2((_lh_update_arg1_0 s_0), s_0));;
//│ 		let rec incr_lh _lh_incr_arg1_0 =
//│ 		  (update_lh (fun x_0 -> 
//│ 		    (1 + x_0)));;
//│ 		let rec labelTree_lh _lh_labelTree_arg1_0 =
//│ 		  (let rec label_0 = (fun _lh_label_arg1_0 -> 
//│ 		    (match _lh_label_arg1_0 with
//│ 		      | `Node(_lh_label_Node_0_0, _lh_label_Node_1_0) -> 
//│ 		        ((bind_lh (incr_lh 0)) (fun n_1 -> 
//│ 		          ((bind_lh ((mmapl_lh label_0) _lh_label_Node_1_0)) (fun ts_0 -> 
//│ 		            (retURN_lh (`Node((`LH_P2(n_1, _lh_label_Node_0_0)), ts_0)))))))
//│ 		      | _ -> 
//│ 		        (failwith "error"))) in
//│ 		    ((startingWith_lh (label_0 _lh_labelTree_arg1_0)) 0));;
//│ 		let rec cse_lh _lh_cse_arg1_0 =
//│ 		  (findCommon_lh (ltGraph_lh (labelTree_lh _lh_cse_arg1_0)));;
//│ 		let rec example1_lh _lh_example1_arg1_0 =
//│ 		  ((plus__lh a_lh) a_lh);;
//│ 		let rec take_lh n_0 ls_3 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match ls_3 with
//│ 		      | `LH_C(h_3, t_3) -> 
//│ 		        (`LH_C(h_3, ((take_lh (n_0 - 1)) t_3)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec testCse_nofib_lh _lh_testCse_nofib_arg1_0 =
//│ 		  ((map_lh (fun i_1 -> 
//│ 		    ((map_lh cse_lh) ((take_lh (i_1 mod 6)) (`LH_C((example0_lh 0), (`LH_C((example1_lh 0), (`LH_C((example2_lh 0), (`LH_C((example3_lh 0), (`LH_C((example4_lh 0), (`LH_C((example5_lh 0), (`LH_N))))))))))))))))) ((enumFromTo_lh 1) _lh_testCse_nofib_arg1_0));;
//│ 		(testCse_nofib_lh 1000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case xs⁰ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh(t⁴, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁵ t⁵ => mappend_lh(h⁵, concat_lh(t⁵)) | LH_N  => [LH_N]}: 101
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_N]: 11 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case xs⁰ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh(t⁴, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case lss⁰ of {LH_C h⁵ t⁵ => mappend_lh(h⁵, concat_lh(t⁵)) | LH_N  => [LH_N]}: 101
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 52 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_N]: 53 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_C h³ take_lh((n⁰ - 1), t³)]: 73 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_N]: 74 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_N]: 76 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_C h⁴ mappend_lh(t⁴, ys⁰)]: 87 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case xs⁰ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh(t⁴, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 543
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_N]: 100 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case xs⁰ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh(t⁴, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 543
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_C '0' [LH_N]]: 106 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰}: 149
//│ 	case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰}: 171
//│ [LH_N]: 107 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ [Node [LH_C '0' [LH_N]] [LH_N]]: 108 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_C 'b' [LH_N]]: 134 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰}: 149
//│ 	case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰}: 171
//│ [LH_N]: 135 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ [Node [LH_C 'b' [LH_N]] [LH_N]]: 136 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)]: 160 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))]: 168 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case xs⁰ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh(t⁴, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_C 'c' [LH_N]]: 177 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰}: 149
//│ 	case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰}: 171
//│ [LH_N]: 178 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ [Node [LH_C 'c' [LH_N]] [LH_N]]: 179 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_P2 _lh_update_arg1⁰(s⁰) s⁰]: 184 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_bind_LH_P2_0⁰ _lh_bind_LH_P2_1⁰ => _lh_bind_arg2⁰(_lh_bind_LH_P2_1⁰, _lh_bind_LH_P2_0⁰) | _  => error⁰}: 276
//│ [LH_N]: 213 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 237
//│ [LH_C d_lh [LH_N]]: 214 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 237
//│ [LH_C c_lh [LH_C d_lh [LH_N]]]: 215 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 237
//│ [LH_C b_lh [LH_C c_lh [LH_C d_lh [LH_N]]]]: 216 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 237
//│ [LH_C a_lh [LH_C b_lh [LH_C c_lh [LH_C d_lh [LH_N]]]]]: 217 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 237
//│ [LH_N]: 224 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ [LH_C _lh_scanl_arg2⁰ let _lh_matchIdent⁰ = _lh_scanl_arg3⁰
//│ in case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}]: 239 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ [LH_C 'a' [LH_N]]: 263 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰}: 149
//│ 	case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰}: 171
//│ [LH_N]: 264 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 265 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_N]: 283 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case xs⁰ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh(t⁴, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_C b¹ bs⁰]: 300 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case xs⁰ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh(t⁴, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_N]: 320 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ [LH_C _lh_scanr_arg2⁰ [LH_N]]: 321 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ 	case _lh_matchIdent² of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰}: 340
//│ [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]: 337 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]: 338 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ 	case _lh_matchIdent² of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰}: 340
//│ [LH_P2 n¹ _lh_label_Node_0⁰]: 363 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰}: 149
//│ 	case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰}: 171
//│ [Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]: 365 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_C '*' [LH_N]]: 399 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰}: 149
//│ 	case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰}: 171
//│ [LH_N]: 402 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ [LH_C _lh_mult__arg2⁰ [LH_N]]: 403 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ [LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]: 404 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ [Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]]: 405 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_C 'X' [LH_N]]: 410 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰}: 149
//│ 	case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰}: 171
//│ [Node [LH_C 'X' [LH_N]] _lh_prod_arg1⁰]: 412 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_N]: 426 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent² = scanr_lh(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 343
//│ [LH_C d_lh [LH_N]]: 427 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent² = scanr_lh(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 343
//│ [LH_C c_lh [LH_C d_lh [LH_N]]]: 428 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent² = scanr_lh(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 343
//│ [LH_C b_lh [LH_C c_lh [LH_C d_lh [LH_N]]]]: 429 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent² = scanr_lh(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 343
//│ [LH_C a_lh [LH_C b_lh [LH_C c_lh [LH_C d_lh [LH_N]]]]]: 430 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent² = scanr_lh(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 343
//│ [LH_N]: 472 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ [LH_C example5_lh(0) [LH_N]]: 473 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]: 474 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ [LH_C example3_lh(0) [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]]: 475 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ [LH_C example2_lh(0) [LH_C example3_lh(0) [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]]]: 476 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ [LH_C example1_lh(0) [LH_C example2_lh(0) [LH_C example3_lh(0) [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]]]]: 477 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ [LH_C example0_lh(0) [LH_C example1_lh(0) [LH_C example2_lh(0) [LH_C example3_lh(0) [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]]]]]: 478 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ [LH_C '+' [LH_N]]: 492 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰}: 149
//│ 	case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰}: 171
//│ [LH_N]: 495 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ [LH_C _lh_plus__arg2⁰ [LH_N]]: 496 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ [LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]: 497 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]]: 498 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_P2 s² _lh_retURN_arg1⁰]: 503 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_bind_LH_P2_0⁰ _lh_bind_LH_P2_1⁰ => _lh_bind_arg2⁰(_lh_bind_LH_P2_1⁰, _lh_bind_LH_P2_0⁰) | _  => error⁰}: 276
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_startingWith_LH_P2_0⁰ _lh_startingWith_LH_P2_1⁰ => _lh_startingWith_LH_P2_1⁰ | _  => error⁰}: 391
//│ [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 529 --->
//│ 	DeadCodeCons
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 35
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 116
//│ [LH_N]: 542 --->
//│ 	DeadCodeCons
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 35
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 116
//│ [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰]: 557 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_N]: 558 --->
//│ 	case xs⁰ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh(t⁴, ys⁰)] | LH_N  => ys⁰}: 89
//│ [LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]]: 559 --->
//│ 	case xs⁰ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh(t⁴, ys⁰)] | LH_N  => ys⁰}: 89
//│ [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)]: 563 --->
//│ 	case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰}: 579
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_findCommon_LH_P2_0⁰ _lh_findCommon_LH_P2_1⁰ => _lh_findCommon_LH_P2_1⁰ | _  => error⁰}: 596
//│ [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰]: 574 --->
//│ 	case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰}: 579
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_findCommon_LH_P2_0⁰ _lh_findCommon_LH_P2_1⁰ => _lh_findCommon_LH_P2_1⁰ | _  => error⁰}: 596
//│ [LH_N]: 588 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case xs⁰ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh(t⁴, ys⁰)] | LH_N  => ys⁰}: 89
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 543
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ [LH_P2 id_lh [LH_N]]: 589 --->
//│ 	case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰}: 579
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_findCommon_LH_P2_0⁰ _lh_findCommon_LH_P2_1⁰ => _lh_findCommon_LH_P2_1⁰ | _  => error⁰}: 596
//│ [LH_C 'd' [LH_N]]: 602 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰}: 149
//│ 	case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰}: 171
//│ [LH_N]: 603 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307
//│ [Node [LH_C 'd' [LH_N]] [LH_N]]: 604 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12 --->
//│ 	DeadCodeProd
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 52
//│ 	[LH_N]: 53
//│ 	[LH_C h³ take_lh((n⁰ - 1), t³)]: 73
//│ 	[LH_N]: 74
//│ 	[LH_N]: 76
//│ 	[LH_N]: 107
//│ 	[LH_N]: 135
//│ 	[LH_N]: 178
//│ 	[LH_N]: 224
//│ 	[LH_C _lh_scanl_arg2⁰ let _lh_matchIdent⁰ = _lh_scanl_arg3⁰
//│ in case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}]: 239
//│ 	[LH_N]: 264
//│ 	[LH_N]: 283
//│ 	[LH_C b¹ bs⁰]: 300
//│ 	[LH_N]: 320
//│ 	[LH_C _lh_scanr_arg2⁰ [LH_N]]: 321
//│ 	[LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]: 337
//│ 	[LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]: 338
//│ 	[LH_N]: 402
//│ 	[LH_C _lh_mult__arg2⁰ [LH_N]]: 403
//│ 	[LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]: 404
//│ 	[LH_N]: 495
//│ 	[LH_C _lh_plus__arg2⁰ [LH_N]]: 496
//│ 	[LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]: 497
//│ 	[LH_N]: 603
//│ case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28 --->
//│ 	[LH_C h⁴ mappend_lh(t⁴, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))]: 168
//│ 	[LH_N]: 588
//│ case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 35 --->
//│ 	[LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 529
//│ 	[LH_N]: 542
//│ case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75 --->
//│ 	[LH_N]: 472
//│ 	[LH_C example5_lh(0) [LH_N]]: 473
//│ 	[LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]: 474
//│ 	[LH_C example3_lh(0) [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]]: 475
//│ 	[LH_C example2_lh(0) [LH_C example3_lh(0) [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]]]: 476
//│ 	[LH_C example1_lh(0) [LH_C example2_lh(0) [LH_C example3_lh(0) [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]]]]: 477
//│ 	[LH_C example0_lh(0) [LH_C example1_lh(0) [LH_C example2_lh(0) [LH_C example3_lh(0) [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]]]]]: 478
//│ case xs⁰ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh(t⁴, ys⁰)] | LH_N  => ys⁰}: 89 --->
//│ 	DeadCodeProd
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C h⁴ mappend_lh(t⁴, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))]: 168
//│ 	[LH_N]: 283
//│ 	[LH_C b¹ bs⁰]: 300
//│ 	[LH_N]: 558
//│ 	[LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]]: 559
//│ 	[LH_N]: 588
//│ case lss⁰ of {LH_C h⁵ t⁵ => mappend_lh(h⁵, concat_lh(t⁵)) | LH_N  => [LH_N]}: 101 --->
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 116 --->
//│ 	[LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 529
//│ 	[LH_N]: 542
//│ case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰}: 149 --->
//│ 	DeadCodeProd
//│ 	[LH_C '0' [LH_N]]: 106
//│ 	[LH_C 'b' [LH_N]]: 134
//│ 	[LH_C 'c' [LH_N]]: 177
//│ 	[LH_C 'a' [LH_N]]: 263
//│ 	[LH_P2 n¹ _lh_label_Node_0⁰]: 363
//│ 	[LH_C '*' [LH_N]]: 399
//│ 	[LH_C 'X' [LH_N]]: 410
//│ 	[LH_C '+' [LH_N]]: 492
//│ 	[LH_C 'd' [LH_N]]: 602
//│ case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 151 --->
//│ 	DeadCodeProd
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C h⁴ mappend_lh(t⁴, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[Node [LH_C '0' [LH_N]] [LH_N]]: 108
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 136
//│ 	[LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))]: 168
//│ 	[Node [LH_C 'c' [LH_N]] [LH_N]]: 179
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 265
//│ 	[LH_N]: 283
//│ 	[LH_C b¹ bs⁰]: 300
//│ 	[Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]: 365
//│ 	[Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]]: 405
//│ 	[Node [LH_C 'X' [LH_N]] _lh_prod_arg1⁰]: 412
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]]: 498
//│ 	[LH_N]: 588
//│ 	[Node [LH_C 'd' [LH_N]] [LH_N]]: 604
//│ case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰}: 171 --->
//│ 	DeadCodeProd
//│ 	[LH_C '0' [LH_N]]: 106
//│ 	[LH_C 'b' [LH_N]]: 134
//│ 	[LH_C 'c' [LH_N]]: 177
//│ 	[LH_C 'a' [LH_N]]: 263
//│ 	[LH_P2 n¹ _lh_label_Node_0⁰]: 363
//│ 	[LH_C '*' [LH_N]]: 399
//│ 	[LH_C 'X' [LH_N]]: 410
//│ 	[LH_C '+' [LH_N]]: 492
//│ 	[LH_C 'd' [LH_N]]: 602
//│ case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 173 --->
//│ 	DeadCodeProd
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C h⁴ mappend_lh(t⁴, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[Node [LH_C '0' [LH_N]] [LH_N]]: 108
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 136
//│ 	[LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))]: 168
//│ 	[Node [LH_C 'c' [LH_N]] [LH_N]]: 179
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 265
//│ 	[LH_N]: 283
//│ 	[LH_C b¹ bs⁰]: 300
//│ 	[Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]: 365
//│ 	[Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]]: 405
//│ 	[Node [LH_C 'X' [LH_N]] _lh_prod_arg1⁰]: 412
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]]: 498
//│ 	[LH_N]: 588
//│ 	[Node [LH_C 'd' [LH_N]] [LH_N]]: 604
//│ case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 237 --->
//│ 	[LH_N]: 213
//│ 	[LH_C d_lh [LH_N]]: 214
//│ 	[LH_C c_lh [LH_C d_lh [LH_N]]]: 215
//│ 	[LH_C b_lh [LH_C c_lh [LH_C d_lh [LH_N]]]]: 216
//│ 	[LH_C a_lh [LH_C b_lh [LH_C c_lh [LH_C d_lh [LH_N]]]]]: 217
//│ case _lh_matchIdent¹ of {LH_P2 _lh_bind_LH_P2_0⁰ _lh_bind_LH_P2_1⁰ => _lh_bind_arg2⁰(_lh_bind_LH_P2_1⁰, _lh_bind_LH_P2_0⁰) | _  => error⁰}: 276 --->
//│ 	[LH_P2 _lh_update_arg1⁰(s⁰) s⁰]: 184
//│ 	[LH_P2 s² _lh_retURN_arg1⁰]: 503
//│ case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b¹ -> bind_lh(mmapl_lh(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh([LH_C b¹ bs⁰]))))) | _  => error⁰}: 307 --->
//│ 	DeadCodeProd
//│ 	[LH_N]: 107
//│ 	[LH_N]: 135
//│ 	[LH_N]: 178
//│ 	[LH_N]: 224
//│ 	[LH_C _lh_scanl_arg2⁰ let _lh_matchIdent⁰ = _lh_scanl_arg3⁰
//│ in case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}]: 239
//│ 	[LH_N]: 264
//│ 	[LH_N]: 283
//│ 	[LH_C b¹ bs⁰]: 300
//│ 	[LH_N]: 320
//│ 	[LH_C _lh_scanr_arg2⁰ [LH_N]]: 321
//│ 	[LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]: 337
//│ 	[LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]: 338
//│ 	[Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]: 365
//│ 	[LH_N]: 402
//│ 	[LH_C _lh_mult__arg2⁰ [LH_N]]: 403
//│ 	[LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]: 404
//│ 	[LH_N]: 495
//│ 	[LH_C _lh_plus__arg2⁰ [LH_N]]: 496
//│ 	[LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]: 497
//│ 	[LH_N]: 603
//│ case _lh_matchIdent² of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰}: 340 --->
//│ 	[LH_C _lh_scanr_arg2⁰ [LH_N]]: 321
//│ 	[LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]: 338
//│ case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent² = scanr_lh(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 343 --->
//│ 	[LH_N]: 426
//│ 	[LH_C d_lh [LH_N]]: 427
//│ 	[LH_C c_lh [LH_C d_lh [LH_N]]]: 428
//│ 	[LH_C b_lh [LH_C c_lh [LH_C d_lh [LH_N]]]]: 429
//│ 	[LH_C a_lh [LH_C b_lh [LH_C c_lh [LH_C d_lh [LH_N]]]]]: 430
//│ case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n¹ -> bind_lh(mmapl_lh(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh([Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 372 --->
//│ 	DeadCodeProd
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C h⁴ mappend_lh(t⁴, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[Node [LH_C '0' [LH_N]] [LH_N]]: 108
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 136
//│ 	[LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))]: 168
//│ 	[Node [LH_C 'c' [LH_N]] [LH_N]]: 179
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 265
//│ 	[LH_N]: 283
//│ 	[LH_C b¹ bs⁰]: 300
//│ 	[Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]: 365
//│ 	[Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]]: 405
//│ 	[Node [LH_C 'X' [LH_N]] _lh_prod_arg1⁰]: 412
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]]: 498
//│ 	[LH_N]: 588
//│ 	[Node [LH_C 'd' [LH_N]] [LH_N]]: 604
//│ case _lh_matchIdent³ of {LH_P2 _lh_startingWith_LH_P2_0⁰ _lh_startingWith_LH_P2_1⁰ => _lh_startingWith_LH_P2_1⁰ | _  => error⁰}: 391 --->
//│ 	[LH_P2 s² _lh_retURN_arg1⁰]: 503
//│ case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 541 --->
//│ 	DeadCodeProd
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C h⁴ mappend_lh(t⁴, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[Node [LH_C '0' [LH_N]] [LH_N]]: 108
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 136
//│ 	[LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)]: 160
//│ 	[LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))]: 168
//│ 	[Node [LH_C 'c' [LH_N]] [LH_N]]: 179
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 265
//│ 	[LH_N]: 283
//│ 	[LH_C b¹ bs⁰]: 300
//│ 	[Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]: 365
//│ 	[Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]]: 405
//│ 	[Node [LH_C 'X' [LH_N]] _lh_prod_arg1⁰]: 412
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]]: 498
//│ 	[LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰]: 557
//│ 	[LH_N]: 588
//│ 	[Node [LH_C 'd' [LH_N]] [LH_N]]: 604
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 543 --->
//│ 	[LH_C h⁴ mappend_lh(t⁴, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[LH_N]: 588
//│ case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰}: 579 --->
//│ 	[LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)]: 563
//│ 	[LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰]: 574
//│ 	[LH_P2 id_lh [LH_N]]: 589
//│ case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 581 --->
//│ 	DeadCodeProd
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C h⁴ mappend_lh(t⁴, ys⁰)]: 87
//│ 	[LH_N]: 100
//│ 	[Node [LH_C '0' [LH_N]] [LH_N]]: 108
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 136
//│ 	[LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)]: 160
//│ 	[LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))]: 168
//│ 	[Node [LH_C 'c' [LH_N]] [LH_N]]: 179
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 265
//│ 	[LH_N]: 283
//│ 	[LH_C b¹ bs⁰]: 300
//│ 	[Node [LH_P2 n¹ _lh_label_Node_0⁰] ts⁰]: 365
//│ 	[Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]]: 405
//│ 	[Node [LH_C 'X' [LH_N]] _lh_prod_arg1⁰]: 412
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]]: 498
//│ 	[LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰]: 557
//│ 	[LH_N]: 588
//│ 	[Node [LH_C 'd' [LH_N]] [LH_N]]: 604
//│ case _lh_matchIdent⁴ of {LH_P2 _lh_findCommon_LH_P2_0⁰ _lh_findCommon_LH_P2_1⁰ => _lh_findCommon_LH_P2_1⁰ | _  => error⁰}: 596 --->
//│ 	[LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)]: 563
//│ 	[LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰]: 574
//│ 	[LH_P2 id_lh [LH_N]]: 589
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_N]: 213 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 237
//│ [LH_C d_lh [LH_N]]: 214 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 237
//│ [LH_C c_lh [LH_C d_lh [LH_N]]]: 215 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 237
//│ [LH_C b_lh [LH_C c_lh [LH_C d_lh [LH_N]]]]: 216 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 237
//│ [LH_C a_lh [LH_C b_lh [LH_C c_lh [LH_C d_lh [LH_N]]]]]: 217 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 237
//│ [LH_N]: 426 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent² = scanr_lh(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 343
//│ [LH_C d_lh [LH_N]]: 427 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent² = scanr_lh(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 343
//│ [LH_C c_lh [LH_C d_lh [LH_N]]]: 428 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent² = scanr_lh(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 343
//│ [LH_C b_lh [LH_C c_lh [LH_C d_lh [LH_N]]]]: 429 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent² = scanr_lh(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 343
//│ [LH_C a_lh [LH_C b_lh [LH_C c_lh [LH_C d_lh [LH_N]]]]]: 430 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent² = scanr_lh(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 343
//│ [LH_N]: 472 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ [LH_C example5_lh(0) [LH_N]]: 473 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]: 474 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ [LH_C example3_lh(0) [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]]: 475 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ [LH_C example2_lh(0) [LH_C example3_lh(0) [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]]]: 476 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ [LH_C example1_lh(0) [LH_C example2_lh(0) [LH_C example3_lh(0) [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]]]]: 477 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ [LH_C example0_lh(0) [LH_C example1_lh(0) [LH_C example2_lh(0) [LH_C example3_lh(0) [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]]]]]: 478 --->
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ ------------------
//│ case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75 --->
//│ 	[LH_N]: 472
//│ 	[LH_C example5_lh(0) [LH_N]]: 473
//│ 	[LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]: 474
//│ 	[LH_C example3_lh(0) [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]]: 475
//│ 	[LH_C example2_lh(0) [LH_C example3_lh(0) [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]]]: 476
//│ 	[LH_C example1_lh(0) [LH_C example2_lh(0) [LH_C example3_lh(0) [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]]]]: 477
//│ 	[LH_C example0_lh(0) [LH_C example1_lh(0) [LH_C example2_lh(0) [LH_C example3_lh(0) [LH_C example4_lh(0) [LH_C example5_lh(0) [LH_N]]]]]]]: 478
//│ case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 237 --->
//│ 	[LH_N]: 213
//│ 	[LH_C d_lh [LH_N]]: 214
//│ 	[LH_C c_lh [LH_C d_lh [LH_N]]]: 215
//│ 	[LH_C b_lh [LH_C c_lh [LH_C d_lh [LH_N]]]]: 216
//│ 	[LH_C a_lh [LH_C b_lh [LH_C c_lh [LH_C d_lh [LH_N]]]]]: 217
//│ case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent² = scanr_lh(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent² of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 343 --->
//│ 	[LH_N]: 426
//│ 	[LH_C d_lh [LH_N]]: 427
//│ 	[LH_C c_lh [LH_C d_lh [LH_N]]]: 428
//│ 	[LH_C b_lh [LH_C c_lh [LH_C d_lh [LH_N]]]]: 429
//│ 	[LH_C a_lh [LH_C b_lh [LH_C c_lh [LH_C d_lh [LH_N]]]]]: 430
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testCse_nofib_lh(primId⁰(1000))
//│ def a_lh = [Node [LH_C 'a' [LH_N]] [LH_N]]
//│ def b_lh = [Node [LH_C 'b' [LH_N]] [LH_N]]
//│ def bind_lh(_lh_bind_arg1¹, _lh_bind_arg2¹, s³) = 
//│ 	let _lh_matchIdent¹⁰ = _lh_bind_arg1¹(s³)
//│ 	in case _lh_matchIdent¹⁰ of {
//│ 		LH_P2 _lh_bind_LH_P2_0⁰ _lh_bind_LH_P2_1⁰ => _lh_bind_arg2¹(_lh_bind_LH_P2_1⁰, _lh_bind_LH_P2_0⁰)
//│ 		| _  => error⁰}
//│ def c_lh = [Node [LH_C 'c' [LH_N]] [LH_N]]
//│ def concat_lh(lss¹) = case lss¹ of {
//│ 	LH_C h⁵ t⁵ => mappend_lh(h⁵, concat_lh(t⁵))
//│ 	| LH_N  => [LH_N]}
//│ def cse_lh(_lh_cse_arg1¹) = findCommon_lh(ltGraph_lh(labelTree_lh(_lh_cse_arg1¹)))
//│ def d_lh = [Node [LH_C 'd' [LH_N]] [LH_N]]
//│ def enumFromTo_lh(a¹, b²) = if (a¹ <= b²) then [LH_C a¹ enumFromTo_lh((a¹ + 1), b²)] else [LH_N]
//│ def example0_lh(_lh_example0_arg1¹) = a_lh
//│ def example1_lh(_lh_example1_arg1¹) = plus__lh(a_lh, a_lh)
//│ def example2_lh(_lh_example2_arg1¹) = plus__lh(mult__lh(a_lh, b_lh), mult__lh(a_lh, b_lh))
//│ def example3_lh(_lh_example3_arg1¹) = plus__lh(mult__lh(plus__lh(a_lh, b_lh), c_lh), plus__lh(a_lh, b_lh))
//│ def example4_lh(_lh_example4_arg1¹) = prod_lh(scanl_lh(plus__lh, zerO_lh(0), 
//│ 	let _lh_scanl_LH_C_1¹ = 	
//│ 		let _lh_scanl_LH_C_1² = 	
//│ 			let _lh_scanl_LH_C_1³ = 	
//│ 				let _lh_scanl_LH_C_1⁴ = (fun _lh_scanl_arg1⁵ -> (fun _lh_scanl_arg2⁵ -> [LH_N]))
//│ 				in let _lh_scanl_LH_C_0⁴ = d_lh
//│ 				in (fun _lh_scanl_arg1⁴ -> (fun _lh_scanl_arg2⁴ -> scanl_lh(_lh_scanl_arg1⁴, _lh_scanl_arg1⁴(_lh_scanl_arg2⁴, _lh_scanl_LH_C_0⁴), _lh_scanl_LH_C_1⁴)))
//│ 			in let _lh_scanl_LH_C_0³ = c_lh
//│ 			in (fun _lh_scanl_arg1³ -> (fun _lh_scanl_arg2³ -> scanl_lh(_lh_scanl_arg1³, _lh_scanl_arg1³(_lh_scanl_arg2³, _lh_scanl_LH_C_0³), _lh_scanl_LH_C_1³)))
//│ 		in let _lh_scanl_LH_C_0² = b_lh
//│ 		in (fun _lh_scanl_arg1² -> (fun _lh_scanl_arg2² -> scanl_lh(_lh_scanl_arg1², _lh_scanl_arg1²(_lh_scanl_arg2², _lh_scanl_LH_C_0²), _lh_scanl_LH_C_1²)))
//│ 	in let _lh_scanl_LH_C_0¹ = a_lh
//│ 	in (fun _lh_scanl_arg1¹ -> (fun _lh_scanl_arg2¹ -> scanl_lh(_lh_scanl_arg1¹, _lh_scanl_arg1¹(_lh_scanl_arg2¹, _lh_scanl_LH_C_0¹), _lh_scanl_LH_C_1¹)))))
//│ def example5_lh(_lh_example5_arg1¹) = prod_lh(scanr_lh(plus__lh, zerO_lh(0), 
//│ 	let _lh_scanr_LH_C_1² = 	
//│ 		let _lh_scanr_LH_C_1³ = 	
//│ 			let _lh_scanr_LH_C_1⁴ = 	
//│ 				let _lh_scanr_LH_C_1⁵ = (fun _lh_scanr_arg2⁶ -> (fun _lh_scanr_arg1⁶ -> [LH_C _lh_scanr_arg2⁶ [LH_N]]))
//│ 				in let _lh_scanr_LH_C_0⁵ = d_lh
//│ 				in (fun _lh_scanr_arg2⁵ -> (fun _lh_scanr_arg1⁵ -> 
//│ 					let _lh_matchIdent⁹ = scanr_lh(_lh_scanr_arg1⁵, _lh_scanr_arg2⁵, _lh_scanr_LH_C_1⁵)
//│ 					in case _lh_matchIdent⁹ of {
//│ 						LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁵(_lh_scanr_LH_C_0⁵, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]
//│ 						| _  => error⁰}))
//│ 			in let _lh_scanr_LH_C_0⁴ = c_lh
//│ 			in (fun _lh_scanr_arg2⁴ -> (fun _lh_scanr_arg1⁴ -> 
//│ 				let _lh_matchIdent⁸ = scanr_lh(_lh_scanr_arg1⁴, _lh_scanr_arg2⁴, _lh_scanr_LH_C_1⁴)
//│ 				in case _lh_matchIdent⁸ of {
//│ 					LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁴(_lh_scanr_LH_C_0⁴, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]
//│ 					| _  => error⁰}))
//│ 		in let _lh_scanr_LH_C_0³ = b_lh
//│ 		in (fun _lh_scanr_arg2³ -> (fun _lh_scanr_arg1³ -> 
//│ 			let _lh_matchIdent⁷ = scanr_lh(_lh_scanr_arg1³, _lh_scanr_arg2³, _lh_scanr_LH_C_1³)
//│ 			in case _lh_matchIdent⁷ of {
//│ 				LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1³(_lh_scanr_LH_C_0³, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]
//│ 				| _  => error⁰}))
//│ 	in let _lh_scanr_LH_C_0² = a_lh
//│ 	in (fun _lh_scanr_arg2² -> (fun _lh_scanr_arg1² -> 
//│ 		let _lh_matchIdent⁶ = scanr_lh(_lh_scanr_arg1², _lh_scanr_arg2², _lh_scanr_LH_C_1²)
//│ 		in case _lh_matchIdent⁶ of {
//│ 			LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1²(_lh_scanr_LH_C_0², _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]
//│ 			| _  => error⁰}))))
//│ def findCommon_lh(_lh_findCommon_arg1¹) = 
//│ 	let sim¹ = (fun _lh_sim_arg1¹ -> (fun _lh_sim_arg2¹ -> case _lh_sim_arg1¹ of {
//│ 		LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2¹ of {
//│ 			LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => 
//│ 				let rcs¹ = map_lh(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ 				in let ms¹ = 	
//│ 					let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 						LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {
//│ 							LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs¹) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t⁰)
//│ 							| _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t⁰)}
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun¹(_lh_sim_LH_P2_1⁰)
//│ 				in if null_lh(ms¹) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs¹] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh(_lh_sim_LH_P3_0⁰, head_lh(ms¹), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}))
//│ 	in let _lh_matchIdent⁵ = foldr_lh(sim¹, [LH_P2 id_lh [LH_N]], _lh_findCommon_arg1¹)
//│ 	in case _lh_matchIdent⁵ of {
//│ 		LH_P2 _lh_findCommon_LH_P2_0⁰ _lh_findCommon_LH_P2_1⁰ => _lh_findCommon_LH_P2_1⁰
//│ 		| _  => error⁰}
//│ def foldr_lh(f², i³, ls⁵) = case ls⁵ of {
//│ 	LH_C h¹ t¹ => f²(h¹, foldr_lh(f², i³, t¹))
//│ 	| LH_N  => i³}
//│ def head_lh(ls⁴) = case ls⁴ of {
//│ 	LH_C h² t² => h²
//│ 	| LH_N  => error⁰}
//│ def id_lh(_lh_id_arg1¹) = _lh_id_arg1¹
//│ def incr_lh(_lh_incr_arg1¹) = update_lh((fun x¹ -> (1 + x¹)))
//│ def labelTree_lh(_lh_labelTree_arg1¹) = 
//│ 	let label¹ = (fun _lh_label_arg1¹ -> case _lh_label_arg1¹ of {
//│ 		Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh(incr_lh(0), (fun n⁹ -> bind_lh(mmapl_lh(label¹, _lh_label_Node_1⁰), (fun ts¹ -> retURN_lh([Node [LH_P2 n⁹ _lh_label_Node_0⁰] ts¹])))))
//│ 		| _  => error⁰})
//│ 	in startingWith_lh(label¹(_lh_labelTree_arg1¹), 0)
//│ def ltGraph_lh(_lh_ltGraph_arg1¹) = case _lh_ltGraph_arg1¹ of {
//│ 	Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {
//│ 		LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => 
//│ 			let labelOf¹ = (fun _lh_labelOf_arg1¹ -> case _lh_labelOf_arg1¹ of {
//│ 				Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {
//│ 					LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 			in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh(labelOf¹, _lh_ltGraph_Node_1⁰)] concat_lh(map_lh(ltGraph_lh, _lh_ltGraph_Node_1⁰))]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def map_lh(f³, ls⁶) = case ls⁶ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f³(h⁰) map_lh(f³, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh(t⁴, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mmapl_lh(_lh_mmapl_arg1¹, _lh_mmapl_arg2¹) = case _lh_mmapl_arg2¹ of {
//│ 	LH_N  => retURN_lh([LH_N])
//│ 	| LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh(_lh_mmapl_arg1¹(_lh_mmapl_LH_C_0⁰), (fun b³ -> bind_lh(mmapl_lh(_lh_mmapl_arg1¹, _lh_mmapl_LH_C_1⁰), (fun bs¹ -> retURN_lh([LH_C b³ bs¹])))))
//│ 	| _  => error⁰}
//│ def mult__lh(_lh_mult__arg1¹, _lh_mult__arg2¹) = [Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1¹ [LH_C _lh_mult__arg2¹ [LH_N]]]]
//│ def newlyDefined_lh(_lh_newlyDefined_arg1¹, _lh_newlyDefined_arg2¹, _lh_newlyDefined_arg3¹, _lh_newlyDefined_arg4¹) = if polyEq⁰(_lh_newlyDefined_arg1¹, _lh_newlyDefined_arg4¹) then _lh_newlyDefined_arg2¹ else _lh_newlyDefined_arg3¹(_lh_newlyDefined_arg4¹)
//│ def null_lh(_lh_null_arg1¹) = case _lh_null_arg1¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def plus__lh(_lh_plus__arg1¹, _lh_plus__arg2¹) = [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1¹ [LH_C _lh_plus__arg2¹ [LH_N]]]]
//│ def prod_lh(_lh_prod_arg1¹) = [Node [LH_C 'X' [LH_N]] _lh_prod_arg1¹]
//│ def retURN_lh(_lh_retURN_arg1¹, s⁵) = [LH_P2 s⁵ _lh_retURN_arg1¹]
//│ def scanl_lh(_lh_scanl_arg1⁶, _lh_scanl_arg2⁶, _lh_scanl_arg3¹) = [LH_C _lh_scanl_arg2⁶ 
//│ 	let _lh_matchIdent¹² = _lh_scanl_arg3¹
//│ 	in _lh_matchIdent¹²(_lh_scanl_arg1⁶, _lh_scanl_arg2⁶)]
//│ def scanr_lh(_lh_scanr_arg1¹, _lh_scanr_arg2¹, _lh_scanr_arg3¹) = _lh_scanr_arg3¹(_lh_scanr_arg2¹, _lh_scanr_arg1¹)
//│ def startingWith_lh(_lh_startingWith_arg1¹, _lh_startingWith_arg2¹) = 
//│ 	let _lh_matchIdent¹¹ = _lh_startingWith_arg1¹(_lh_startingWith_arg2¹)
//│ 	in case _lh_matchIdent¹¹ of {
//│ 		LH_P2 _lh_startingWith_LH_P2_0⁰ _lh_startingWith_LH_P2_1⁰ => _lh_startingWith_LH_P2_1⁰
//│ 		| _  => error⁰}
//│ def take_lh(n¹⁰, ls⁷) = if (n¹⁰ > 0) then ls⁷(n¹⁰) else [LH_N]
//│ def testCse_nofib_lh(_lh_testCse_nofib_arg1¹) = map_lh((fun i² -> map_lh(cse_lh, take_lh((i² % 6), 
//│ 	let t⁶ = 	
//│ 		let t⁷ = 	
//│ 			let t⁸ = 	
//│ 				let t⁹ = 	
//│ 					let t¹⁰ = 	
//│ 						let t¹¹ = (fun n⁸ -> [LH_N])
//│ 						in let h¹¹ = example5_lh(0)
//│ 						in (fun n⁷ -> [LH_C h¹¹ take_lh((n⁷ - 1), t¹¹)])
//│ 					in let h¹⁰ = example4_lh(0)
//│ 					in (fun n⁶ -> [LH_C h¹⁰ take_lh((n⁶ - 1), t¹⁰)])
//│ 				in let h⁹ = example3_lh(0)
//│ 				in (fun n⁵ -> [LH_C h⁹ take_lh((n⁵ - 1), t⁹)])
//│ 			in let h⁸ = example2_lh(0)
//│ 			in (fun n⁴ -> [LH_C h⁸ take_lh((n⁴ - 1), t⁸)])
//│ 		in let h⁷ = example1_lh(0)
//│ 		in (fun n³ -> [LH_C h⁷ take_lh((n³ - 1), t⁷)])
//│ 	in let h⁶ = example0_lh(0)
//│ 	in (fun n² -> [LH_C h⁶ take_lh((n² - 1), t⁶)])))), enumFromTo_lh(1, _lh_testCse_nofib_arg1¹))
//│ def update_lh(_lh_update_arg1¹, s⁴) = [LH_P2 _lh_update_arg1¹(s⁴) s⁴]
//│ def zerO_lh(_lh_zerO_arg1¹) = case _lh_zerO_arg1¹ of {
//│ 	0  => [Node [LH_C '0' [LH_N]] [LH_N]]
//│ 	| _  => error⁰}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
