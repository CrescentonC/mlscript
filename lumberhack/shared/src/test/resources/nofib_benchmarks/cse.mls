:NewParser
:ParseOnly


:lhNoIter
:lhInHaskell
:lhGenOCaml
scanl f q ls = q:(case ls of { [] -> []; (x:xs) -> scanl f (f q x) xs })
scanr _ q0 [] = [q0]
scanr f q0 (x:xs) = case (scanr f q0 xs) of {
  (q:t) -> (f x q):(q:t)
}
id x = x
null [] = True
null (x:xs) = False
dropWhile f [] = []
dropWhile f (h:t) = if (f h) then dropWhile f t else (h:t)
inList x (h:t) = if x == h then True else inList x t
inList x [] = False
-- General purpose state monad -----------------------------------------------
type SM s a       = s -> (s, a)
-- Primitive monad operators -------------------------------------------------
retURN           :: a -> SM s a
retURN x          = \s -> (s, x)
bind             :: SM s a -> (a -> SM s b) -> SM s b
bind m f          = \s -> case (m s) of { (s', a) -> f a s' }
join             :: SM s (SM s a) -> SM s a
join m            = \s -> case (m s) of { (s', ma) -> ma s' } 
mmap             :: (a -> b) -> (SM s a -> SM s b)
mmap f m          = \s -> case (m s) of { (s', a) -> (s', f a) }
-- General monad operators ---------------------------------------------------
mmapl            :: (a -> SM s b) -> ([a] -> SM s [b])
mmapl f []        = retURN []
mmapl f (a:as)    = f a             `bind` \b ->
                    mmapl f as      `bind` \bs ->
                    retURN (b:bs)
mmapr            :: (a -> SM s b) -> ([a] -> SM s [b])
mmapr f []        = retURN []
mmapr f (x:xs)    = mmapr f xs      `bind` \ys ->
                    f x             `bind` \y  ->
                    retURN (y:ys)
mfoldl           :: (a -> b -> SM s a) -> a -> [b] -> SM s a
mfoldl f a []     = retURN a
mfoldl f a (x:xs) = f a x           `bind` \fax ->
                    mfoldl f fax xs
mfoldr           :: (a -> b -> SM s b) -> b -> [a] -> SM s b
mfoldr f a []     = retURN a
mfoldr f a (x:xs) = mfoldr f a xs   `bind` \y ->
                    f x y
mif              :: SM s Bool -> SM s a -> SM s a -> SM s a
mif c t f         = c               `bind` \cond ->
                    if cond then t
                            else f
-- Specific utilities for state monads ---------------------------------------
startingWith      :: SM s a -> s -> a
startingWith m v   = case (m v) of { (final, answer) -> answer }
fetch             :: SM s s
fetch              = \s -> (s,s)
fetchWith         :: (s -> a) -> SM s a
fetchWith f        = \s -> (s, f s)
update            :: (s -> s) -> SM s s
update f           = \s -> (f s, s)
set               :: s -> SM s s
set s'             = \s -> (s',s)
-- Common use of state monad: counter ----------------------------------------
incr              :: a -> SM Int Int
incr _             = update (\x -> 1+x)
-- Data type definitions: ----------------------------------------------------
data GenTree a  = Node a [GenTree a]
type LabGraph a = [ (Label, a, [Label]) ]
type Label      = Int
-- Add distinct (integer) labels to each node of a tree: ---------------------
labelTree   :: GenTree a -> GenTree (Label,a)
labelTree t  = (label t) `startingWith` 0
               where label (Node x xs) = (incr 0)           `bind` \n  ->
                                         mmapl label xs `bind` \ts ->
                                         retURN (Node (n,x) ts)
-- Convert tree after labelling each node to a labelled graph: ---------------
ltGraph                :: GenTree (Label,a) -> LabGraph a
ltGraph (Node (n,x) xs) = (n, x, map labelOf xs) : (concat (map ltGraph xs))
                          where labelOf (Node (n,x) xs) = n
-- Build tree from labelled graph: -------------------------------------------
unGraph              :: LabGraph a -> GenTree a
unGraph ((n,x,cs):ts) = 
  let find = \c -> dropWhile (\d__ -> case d__ of (d, _, _) -> c/=d) ts in
  Node x (map (unGraph . find) cs)
-- Build tree but avoid duplicating shared parts: ----------------------------
unGraph'     :: LabGraph String -> GenTree (Int,String)
unGraph' lg =
  (ung lg) `startingWith` []
    where
      ung ((n,x,cs):ts) =
        let find = \c -> dropWhile (\d__ -> case d__ of (d, _, _) -> c/=d) ts in
        mif (visited n) (retURN (Node (n,"<>") [])) (mmapl (ung . find) cs `bind` \ts -> retURN (Node (n,x) ts))
visited      :: Label -> SM [Label] Bool
visited n     = fetch                               `bind` \us ->
                if inList n us then retURN True
                               else set (n:us)      `bind` \_p ->
                                    retURN False
-- Find (and eliminate) repeated subtrees in a labelled graph: ---------------
-- Described as a transformation on labelled graphs:  During the calculation
-- we use a pair (r,lg) :: (Label->Label, LabGraph a) where lg contains the
-- simplified portion of the graph calculated so far and r is a renaming (or
-- replacement?) which maps node labels in the original graph to the approp.
-- labels in the new graph.
findCommon :: Eq a => LabGraph a -> LabGraph a
findCommon ls = case (foldr sim (id,[]) ls) of { (a, b) -> b }
  where
    -- sim ::
    --   Eq a => (Label,a,[Label]) -> (Label -> Label, LabGraph a) ->
    --   (Label -> Label, LabGraph a)
    sim (n,s,cs) (r,lg) =
      let rcs = map r cs in
      let ms = [m | (m,s',cs')<-lg, polyEq s s', polyEq cs' rcs] in
      if null ms then
        (r, [(n,s,rcs)] ++ lg)
      else
        ((newlyDefined n (head ms)) r, lg)
newlyDefined :: Eq a => a -> b -> (a -> b) -> (a -> b)
newlyDefined x fx f y  = if polyEq x y then fx else f y
-- Common subexpression elimination: -----------------------------------------
cse :: Eq a => GenTree a -> LabGraph a
cse t = findCommon (ltGraph $ labelTree t)
-- Examples: -----------------------------------------------------------------
plus_ x y = Node "+" [x,y]
mult_ x y = Node "*" [x,y]
prod xs  = Node "X" xs
zerO 0     = Node "0" []
a        = Node "a" []
b        = Node "b" []
c        = Node "c" []
d        = Node "d" []
example0 _ = a
example1 _ = plus_ a a
example2 _ = plus_ (mult_ a b) (mult_ a b)
example3 _ = plus_ (mult_ (plus_ a b) c) (plus_ a b)
example4 _ = prod (scanl plus_ (zerO 0) [a,b,c,d])
example5 _ = prod (scanr plus_ (zerO 0) [a,b,c,d])
testCse_nofib n = map (\i -> (map cse (take (i `mod` 6) [(example0 0), (example1 0), (example2 0), (example3 0), (example4 0), (example5 0)]))) (primId [1..n])
testCse_nofib $ primId 1000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testCse_nofib_lh_₁^913(primId⁰(1000))
//│ def a_lh_₁ = [Node [LH_C 'a' [LH_N]] [LH_N]]
//│ def a_lh_₂ = [Node [LH_C 'a' [LH_N]] [LH_N]]
//│ def a_lh_₃ = [Node [LH_C 'a' [LH_N]] [LH_N]]
//│ def a_lh_₄ = [Node [LH_C 'a' [LH_N]] [LH_N]]
//│ def a_lh_₅ = [Node [LH_C 'a' [LH_N]] [LH_N]]
//│ def a_lh_₆ = [Node [LH_C 'a' [LH_N]] [LH_N]]
//│ def a_lh_₇ = [Node [LH_C 'a' [LH_N]] [LH_N]]
//│ def a_lh_₈ = [Node [LH_C 'a' [LH_N]] [LH_N]]
//│ def a_lh_₉ = [Node [LH_C 'a' [LH_N]] [LH_N]]
//│ def b_lh_₁ = [Node [LH_C 'b' [LH_N]] [LH_N]]
//│ def b_lh_₂ = [Node [LH_C 'b' [LH_N]] [LH_N]]
//│ def b_lh_₃ = [Node [LH_C 'b' [LH_N]] [LH_N]]
//│ def b_lh_₄ = [Node [LH_C 'b' [LH_N]] [LH_N]]
//│ def b_lh_₅ = [Node [LH_C 'b' [LH_N]] [LH_N]]
//│ def b_lh_₆ = [Node [LH_C 'b' [LH_N]] [LH_N]]
//│ def bind_lh_₁(_lh_bind_arg1³, _lh_bind_arg2³, s⁷) = 
//│ 	let _lh_matchIdent³ = _lh_bind_arg1³(s⁷)
//│ 	in case _lh_matchIdent³ of {
//│ 		LH_P2 _lh_bind_LH_P2_0³ _lh_bind_LH_P2_1³ => _lh_bind_arg2³(_lh_bind_LH_P2_1³, _lh_bind_LH_P2_0³)
//│ 		| _  => error⁰}
//│ def bind_lh_₂(_lh_bind_arg1², _lh_bind_arg2², s⁶) = 
//│ 	let _lh_matchIdent² = _lh_bind_arg1²(s⁶)
//│ 	in case _lh_matchIdent² of {
//│ 		LH_P2 _lh_bind_LH_P2_0² _lh_bind_LH_P2_1² => _lh_bind_arg2²(_lh_bind_LH_P2_1², _lh_bind_LH_P2_0²)
//│ 		| _  => error⁰}
//│ def bind_lh_₃(_lh_bind_arg1¹, _lh_bind_arg2¹, s³) = 
//│ 	let _lh_matchIdent¹ = _lh_bind_arg1¹(s³)
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_P2 _lh_bind_LH_P2_0¹ _lh_bind_LH_P2_1¹ => _lh_bind_arg2¹(_lh_bind_LH_P2_1¹, _lh_bind_LH_P2_0¹)
//│ 		| _  => error⁰}
//│ def bind_lh_₄(_lh_bind_arg1⁰, _lh_bind_arg2⁰, s²) = 
//│ 	let _lh_matchIdent⁰ = _lh_bind_arg1⁰(s²)
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_P2 _lh_bind_LH_P2_0⁰ _lh_bind_LH_P2_1⁰ => _lh_bind_arg2⁰(_lh_bind_LH_P2_1⁰, _lh_bind_LH_P2_0⁰)
//│ 		| _  => error⁰}
//│ def c_lh_₁ = [Node [LH_C 'c' [LH_N]] [LH_N]]
//│ def c_lh_₂ = [Node [LH_C 'c' [LH_N]] [LH_N]]
//│ def c_lh_₃ = [Node [LH_C 'c' [LH_N]] [LH_N]]
//│ def concat_lh_₁(lss⁰) = case lss⁰ of {
//│ 	LH_C h³ t³ => mappend_lh_₂^172(h³, concat_lh_₁^175(t³))
//│ 	| LH_N  => [LH_N]}
//│ def cse_lh_₁(_lh_cse_arg1⁰) = findCommon_lh_₁^822(ltGraph_lh_₁^823(labelTree_lh_₁^824(_lh_cse_arg1⁰)))
//│ def d_lh_₁ = [Node [LH_C 'd' [LH_N]] [LH_N]]
//│ def d_lh_₂ = [Node [LH_C 'd' [LH_N]] [LH_N]]
//│ def enumFromTo_lh_₁(a⁰, b¹) = if (a⁰ <= b¹) then [LH_C a⁰ enumFromTo_lh_₁^808((a⁰ + 1), b¹)] else [LH_N]
//│ def example0_lh_₁(_lh_example0_arg1⁰) = a_lh_₃^830
//│ def example1_lh_₁(_lh_example1_arg1⁰) = plus__lh_₇^719(a_lh_₉^720, a_lh_₈^722)
//│ def example2_lh_₁(_lh_example2_arg1⁰) = plus__lh_₄^788(mult__lh_₂^789(a_lh_₅^790, b_lh_₄^792), mult__lh_₃^795(a_lh_₄^796, b_lh_₃^798))
//│ def example3_lh_₁(_lh_example3_arg1⁰) = plus__lh_₃^832(mult__lh_₁^833(plus__lh_₁^834(a_lh_₂^835, b_lh_₁^837), c_lh_₁^840), plus__lh_₂^843(a_lh_₁^844, b_lh_₂^846))
//│ def example4_lh_₁(_lh_example4_arg1⁰) = prod_lh_₂^725(scanl_lh_₁^726(plus__lh_₆^727, zerO_lh_₂^729(0), [LH_C a_lh_₇^733 [LH_C b_lh_₆^734 [LH_C c_lh_₃^735 [LH_C d_lh_₂^736 [LH_N]]]]]))
//│ def example5_lh_₁(_lh_example5_arg1⁰) = prod_lh_₁^768(scanr_lh_₁^769(plus__lh_₅^770, zerO_lh_₁^772(0), [LH_C a_lh_₆^776 [LH_C b_lh_₅^777 [LH_C c_lh_₂^778 [LH_C d_lh_₁^779 [LH_N]]]]]))
//│ def findCommon_lh_₁(_lh_findCommon_arg1⁰) = 
//│ 	let sim⁰ = (fun _lh_sim_arg1⁰ -> (fun _lh_sim_arg2⁰ -> case _lh_sim_arg1⁰ of {
//│ 		LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {
//│ 			LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => 
//│ 				let rcs⁰ = map_lh_₃^539(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ 				in let ms⁰ = 	
//│ 					let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 						LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {
//│ 							LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)
//│ 							| _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ 				in if null_lh_₁^580(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh_₁^584([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh_₁^595(_lh_sim_LH_P3_0⁰, head_lh_₁^598(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}))
//│ 	in let _lh_matchIdent⁷ = foldr_lh_₁^615(sim⁰, [LH_P2 id_lh_₁^618 [LH_N]], _lh_findCommon_arg1⁰)
//│ 	in case _lh_matchIdent⁷ of {
//│ 		LH_P2 _lh_findCommon_LH_P2_0⁰ _lh_findCommon_LH_P2_1⁰ => _lh_findCommon_LH_P2_1⁰
//│ 		| _  => error⁰}
//│ def foldr_lh_₁(f³, i⁰, ls⁴) = case ls⁴ of {
//│ 	LH_C h⁶ t⁶ => f³(h⁶, foldr_lh_₁^211(f³, i⁰, t⁶))
//│ 	| LH_N  => i⁰}
//│ def head_lh_₁(ls²) = case ls² of {
//│ 	LH_C h⁴ t⁴ => h⁴
//│ 	| LH_N  => error⁰}
//│ def id_lh_₁(_lh_id_arg1⁰) = _lh_id_arg1⁰
//│ def incr_lh_₁(_lh_incr_arg1⁰) = update_lh_₁^95((fun x⁰ -> (1 + x⁰)))
//│ def labelTree_lh_₁(_lh_labelTree_arg1⁰) = 
//│ 	let label⁰ = (fun _lh_label_arg1⁰ -> case _lh_label_arg1⁰ of {
//│ 		Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁^470(incr_lh_₁^471(0), (fun n⁰ -> bind_lh_₂^475(mmapl_lh_₁^476(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁^482([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰])))))
//│ 		| _  => error⁰})
//│ 	in startingWith_lh_₁^496(label⁰(_lh_labelTree_arg1⁰), 0)
//│ def ltGraph_lh_₁(_lh_ltGraph_arg1⁰) = case _lh_ltGraph_arg1⁰ of {
//│ 	Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {
//│ 		LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => 
//│ 			let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {
//│ 				Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {
//│ 					LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 			in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh_₄^517(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh_₁^523(map_lh_₅^524(ltGraph_lh_₁^525, _lh_ltGraph_Node_1⁰))]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def map_lh_₁(f⁵, ls⁷) = case ls⁷ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C f⁵(h¹⁰) map_lh_₁^854(f⁵, t¹⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f⁴, ls⁵) = case ls⁵ of {
//│ 	LH_C h⁸ t⁸ => [LH_C f⁴(h⁸) map_lh_₂^709(f⁴, t⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f², ls³) = case ls³ of {
//│ 	LH_C h⁵ t⁵ => [LH_C f²(h⁵) map_lh_₃^197(f², t⁵)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f¹, ls¹) = case ls¹ of {
//│ 	LH_C h² t² => [LH_C f¹(h²) map_lh_₄^161(f¹, t²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h¹ t¹ => [LH_C f⁰(h¹) map_lh_₅^147(f⁰, t¹)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁^226(t⁷, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₂(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂^50(t⁰, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_arg2⁰) = case _lh_mmapl_arg2⁰ of {
//│ 	LH_N  => retURN_lh_₃^105([LH_N])
//│ 	| LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄^108(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃^113(mmapl_lh_₁^114(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂^120([LH_C b⁰ bs⁰])))))
//│ 	| _  => error⁰}
//│ def mult__lh_₁(_lh_mult__arg1², _lh_mult__arg2²) = [Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1² [LH_C _lh_mult__arg2² [LH_N]]]]
//│ def mult__lh_₂(_lh_mult__arg1¹, _lh_mult__arg2¹) = [Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1¹ [LH_C _lh_mult__arg2¹ [LH_N]]]]
//│ def mult__lh_₃(_lh_mult__arg1⁰, _lh_mult__arg2⁰) = [Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]]
//│ def newlyDefined_lh_₁(_lh_newlyDefined_arg1⁰, _lh_newlyDefined_arg2⁰, _lh_newlyDefined_arg3⁰, _lh_newlyDefined_arg4⁰) = if polyEq⁰(_lh_newlyDefined_arg1⁰, _lh_newlyDefined_arg4⁰) then _lh_newlyDefined_arg2⁰ else _lh_newlyDefined_arg3⁰(_lh_newlyDefined_arg4⁰)
//│ def null_lh_₁(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def plus__lh_₁(_lh_plus__arg1⁶, _lh_plus__arg2⁶) = [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁶ [LH_C _lh_plus__arg2⁶ [LH_N]]]]
//│ def plus__lh_₂(_lh_plus__arg1⁵, _lh_plus__arg2⁵) = [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁵ [LH_C _lh_plus__arg2⁵ [LH_N]]]]
//│ def plus__lh_₃(_lh_plus__arg1⁴, _lh_plus__arg2⁴) = [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁴ [LH_C _lh_plus__arg2⁴ [LH_N]]]]
//│ def plus__lh_₄(_lh_plus__arg1³, _lh_plus__arg2³) = [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1³ [LH_C _lh_plus__arg2³ [LH_N]]]]
//│ def plus__lh_₅(_lh_plus__arg1², _lh_plus__arg2²) = [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1² [LH_C _lh_plus__arg2² [LH_N]]]]
//│ def plus__lh_₆(_lh_plus__arg1¹, _lh_plus__arg2¹) = [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1¹ [LH_C _lh_plus__arg2¹ [LH_N]]]]
//│ def plus__lh_₇(_lh_plus__arg1⁰, _lh_plus__arg2⁰) = [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]]
//│ def prod_lh_₁(_lh_prod_arg1¹) = [Node [LH_C 'X' [LH_N]] _lh_prod_arg1¹]
//│ def prod_lh_₂(_lh_prod_arg1⁰) = [Node [LH_C 'X' [LH_N]] _lh_prod_arg1⁰]
//│ def retURN_lh_₁(_lh_retURN_arg1², s⁵) = [LH_P2 s⁵ _lh_retURN_arg1²]
//│ def retURN_lh_₂(_lh_retURN_arg1¹, s⁴) = [LH_P2 s⁴ _lh_retURN_arg1¹]
//│ def retURN_lh_₃(_lh_retURN_arg1⁰, s¹) = [LH_P2 s¹ _lh_retURN_arg1⁰]
//│ def scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg2⁰, _lh_scanl_arg3⁰) = [LH_C _lh_scanl_arg2⁰ 
//│ 	let _lh_matchIdent⁵ = _lh_scanl_arg3⁰
//│ 	in case _lh_matchIdent⁵ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁^312(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰)
//│ 		| _  => error⁰}]
//│ def scanr_lh_₁(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_arg3⁰) = case _lh_scanr_arg3⁰ of {
//│ 	LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]]
//│ 	| LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => 
//│ 		let _lh_matchIdent⁶ = scanr_lh_₁^350(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ 		in case _lh_matchIdent⁶ of {
//│ 			LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def startingWith_lh_₁(_lh_startingWith_arg1⁰, _lh_startingWith_arg2⁰) = 
//│ 	let _lh_matchIdent⁴ = _lh_startingWith_arg1⁰(_lh_startingWith_arg2⁰)
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_P2 _lh_startingWith_LH_P2_0⁰ _lh_startingWith_LH_P2_1⁰ => _lh_startingWith_LH_P2_1⁰
//│ 		| _  => error⁰}
//│ def take_lh_₁(n¹, ls⁶) = if (n¹ > 0) then case ls⁶ of {
//│ 	LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁^752((n¹ - 1), t⁹)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testCse_nofib_lh_₁(_lh_testCse_nofib_arg1⁰) = map_lh_₁^864((fun i¹ -> map_lh_₂^865(cse_lh_₁^866, take_lh_₁^868((i¹ % 6), [LH_C example0_lh_₁^875(0) [LH_C example1_lh_₁^878(0) [LH_C example2_lh_₁^881(0) [LH_C example3_lh_₁^884(0) [LH_C example4_lh_₁^887(0) [LH_C example5_lh_₁^890(0) [LH_N]]]]]]]))), primId⁰(enumFromTo_lh_₁^905(1, _lh_testCse_nofib_arg1⁰)))
//│ def update_lh_₁(_lh_update_arg1⁰, s⁰) = [LH_P2 _lh_update_arg1⁰(s⁰) s⁰]
//│ def zerO_lh_₁(_lh_zerO_arg1¹) = case _lh_zerO_arg1¹ of {
//│ 	0  => [Node [LH_C '0' [LH_N]] [LH_N]]
//│ 	| _  => error⁰}
//│ def zerO_lh_₂(_lh_zerO_arg1⁰) = case _lh_zerO_arg1⁰ of {
//│ 	0  => [Node [LH_C '0' [LH_N]] [LH_N]]
//│ 	| _  => error⁰}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec c_lh__d2 =
//│ 		  (`Node((`LH_C('c', (`LH_N))), (`LH_N)));;
//│ 		let rec prod_lh__d1 _lh_prod_arg1_1 =
//│ 		  (`Node((`LH_C('X', (`LH_N))), _lh_prod_arg1_1));;
//│ 		let rec b_lh__d5 =
//│ 		  (`Node((`LH_C('b', (`LH_N))), (`LH_N)));;
//│ 		let rec zerO_lh__d1 _lh_zerO_arg1_1 =
//│ 		  (match _lh_zerO_arg1_1 with
//│ 		    | 0 -> 
//│ 		      (`Node((`LH_C('0', (`LH_N))), (`LH_N)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec plus__lh__d5 _lh_plus__arg1_2 _lh_plus__arg2_2 =
//│ 		  (`Node((`LH_C('+', (`LH_N))), (`LH_C(_lh_plus__arg1_2, (`LH_C(_lh_plus__arg2_2, (`LH_N)))))));;
//│ 		let rec d_lh__d1 =
//│ 		  (`Node((`LH_C('d', (`LH_N))), (`LH_N)));;
//│ 		let rec scanr_lh__d1 _lh_scanr_arg1_0 _lh_scanr_arg2_0 _lh_scanr_arg3_0 =
//│ 		  (match _lh_scanr_arg3_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_C(_lh_scanr_arg2_0, (`LH_N)))
//│ 		    | `LH_C(_lh_scanr_LH_C_0_0, _lh_scanr_LH_C_1_0) -> 
//│ 		      (let rec _lh_matchIdent_6 = (((scanr_lh__d1 _lh_scanr_arg1_0) _lh_scanr_arg2_0) _lh_scanr_LH_C_1_0) in
//│ 		        (match _lh_matchIdent_6 with
//│ 		          | `LH_C(_lh_scanr_LH_C_0_1, _lh_scanr_LH_C_1_1) -> 
//│ 		            (`LH_C(((_lh_scanr_arg1_0 _lh_scanr_LH_C_0_0) _lh_scanr_LH_C_0_1), (`LH_C(_lh_scanr_LH_C_0_1, _lh_scanr_LH_C_1_1))))
//│ 		          | _ -> 
//│ 		            (failwith "error")))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec a_lh__d6 =
//│ 		  (`Node((`LH_C('a', (`LH_N))), (`LH_N)));;
//│ 		let rec example5_lh__d1 _lh_example5_arg1_0 =
//│ 		  (prod_lh__d1 (((scanr_lh__d1 plus__lh__d5) (zerO_lh__d1 0)) (`LH_C(a_lh__d6, (`LH_C(b_lh__d5, (`LH_C(c_lh__d2, (`LH_C(d_lh__d1, (`LH_N)))))))))));;
//│ 		let rec a_lh__d9 =
//│ 		  (`Node((`LH_C('a', (`LH_N))), (`LH_N)));;
//│ 		let rec plus__lh__d7 _lh_plus__arg1_0 _lh_plus__arg2_0 =
//│ 		  (`Node((`LH_C('+', (`LH_N))), (`LH_C(_lh_plus__arg1_0, (`LH_C(_lh_plus__arg2_0, (`LH_N)))))));;
//│ 		let rec a_lh__d8 =
//│ 		  (`Node((`LH_C('a', (`LH_N))), (`LH_N)));;
//│ 		let rec example1_lh__d1 _lh_example1_arg1_0 =
//│ 		  ((plus__lh__d7 a_lh__d9) a_lh__d8);;
//│ 		let rec c_lh__d1 =
//│ 		  (`Node((`LH_C('c', (`LH_N))), (`LH_N)));;
//│ 		let rec a_lh__d1 =
//│ 		  (`Node((`LH_C('a', (`LH_N))), (`LH_N)));;
//│ 		let rec plus__lh__d1 _lh_plus__arg1_6 _lh_plus__arg2_6 =
//│ 		  (`Node((`LH_C('+', (`LH_N))), (`LH_C(_lh_plus__arg1_6, (`LH_C(_lh_plus__arg2_6, (`LH_N)))))));;
//│ 		let rec a_lh__d2 =
//│ 		  (`Node((`LH_C('a', (`LH_N))), (`LH_N)));;
//│ 		let rec b_lh__d2 =
//│ 		  (`Node((`LH_C('b', (`LH_N))), (`LH_N)));;
//│ 		let rec plus__lh__d3 _lh_plus__arg1_4 _lh_plus__arg2_4 =
//│ 		  (`Node((`LH_C('+', (`LH_N))), (`LH_C(_lh_plus__arg1_4, (`LH_C(_lh_plus__arg2_4, (`LH_N)))))));;
//│ 		let rec plus__lh__d2 _lh_plus__arg1_5 _lh_plus__arg2_5 =
//│ 		  (`Node((`LH_C('+', (`LH_N))), (`LH_C(_lh_plus__arg1_5, (`LH_C(_lh_plus__arg2_5, (`LH_N)))))));;
//│ 		let rec b_lh__d1 =
//│ 		  (`Node((`LH_C('b', (`LH_N))), (`LH_N)));;
//│ 		let rec mult__lh__d1 _lh_mult__arg1_2 _lh_mult__arg2_2 =
//│ 		  (`Node((`LH_C('*', (`LH_N))), (`LH_C(_lh_mult__arg1_2, (`LH_C(_lh_mult__arg2_2, (`LH_N)))))));;
//│ 		let rec example3_lh__d1 _lh_example3_arg1_0 =
//│ 		  ((plus__lh__d3 ((mult__lh__d1 ((plus__lh__d1 a_lh__d2) b_lh__d1)) c_lh__d1)) ((plus__lh__d2 a_lh__d1) b_lh__d2));;
//│ 		let rec map_lh__d1 f_5 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_1_0, t_1_0) -> 
//│ 		      (`LH_C((f_5 h_1_0), ((map_lh__d1 f_5) t_1_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec a_lh__d3 =
//│ 		  (`Node((`LH_C('a', (`LH_N))), (`LH_N)));;
//│ 		let rec example0_lh__d1 _lh_example0_arg1_0 =
//│ 		  a_lh__d3;;
//│ 		let rec map_lh__d4 f_1 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C((f_1 h_2), ((map_lh__d4 f_1) t_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d5 f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (`LH_C((f_0 h_1), ((map_lh__d5 f_0) t_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh__d2 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C(h_0, ((mappend_lh__d2 t_0) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec concat_lh__d1 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      ((mappend_lh__d2 h_3) (concat_lh__d1 t_3))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec ltGraph_lh__d1 _lh_ltGraph_arg1_0 =
//│ 		  (match _lh_ltGraph_arg1_0 with
//│ 		    | `Node(_lh_ltGraph_Node_0_0, _lh_ltGraph_Node_1_0) -> 
//│ 		      (match _lh_ltGraph_Node_0_0 with
//│ 		        | `LH_P2(_lh_ltGraph_LH_P2_0_0, _lh_ltGraph_LH_P2_1_0) -> 
//│ 		          (let rec labelOf_0 = (fun _lh_labelOf_arg1_0 -> 
//│ 		            (match _lh_labelOf_arg1_0 with
//│ 		              | `Node(_lh_labelOf_Node_0_0, _lh_labelOf_Node_1_0) -> 
//│ 		                (match _lh_labelOf_Node_0_0 with
//│ 		                  | `LH_P2(_lh_labelOf_LH_P2_0_0, _lh_labelOf_LH_P2_1_0) -> 
//│ 		                    _lh_labelOf_LH_P2_0_0
//│ 		                  | _ -> 
//│ 		                    (failwith "error"))
//│ 		              | _ -> 
//│ 		                (failwith "error"))) in
//│ 		            (`LH_C((`LH_P3(_lh_ltGraph_LH_P2_0_0, _lh_ltGraph_LH_P2_1_0, ((map_lh__d4 labelOf_0) _lh_ltGraph_Node_1_0))), (concat_lh__d1 ((map_lh__d5 ltGraph_lh__d1) _lh_ltGraph_Node_1_0)))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec retURN_lh__d2 _lh_retURN_arg1_1 s_4 =
//│ 		  (`LH_P2(s_4, _lh_retURN_arg1_1));;
//│ 		let rec bind_lh__d3 _lh_bind_arg1_1 _lh_bind_arg2_1 s_3 =
//│ 		  (let rec _lh_matchIdent_1 = (_lh_bind_arg1_1 s_3) in
//│ 		    (match _lh_matchIdent_1 with
//│ 		      | `LH_P2(_lh_bind_LH_P2_0_1, _lh_bind_LH_P2_1_1) -> 
//│ 		        ((_lh_bind_arg2_1 _lh_bind_LH_P2_1_1) _lh_bind_LH_P2_0_1)
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec retURN_lh__d3 _lh_retURN_arg1_0 s_1 =
//│ 		  (`LH_P2(s_1, _lh_retURN_arg1_0));;
//│ 		let rec bind_lh__d4 _lh_bind_arg1_0 _lh_bind_arg2_0 s_2 =
//│ 		  (let rec _lh_matchIdent_0 = (_lh_bind_arg1_0 s_2) in
//│ 		    (match _lh_matchIdent_0 with
//│ 		      | `LH_P2(_lh_bind_LH_P2_0_0, _lh_bind_LH_P2_1_0) -> 
//│ 		        ((_lh_bind_arg2_0 _lh_bind_LH_P2_1_0) _lh_bind_LH_P2_0_0)
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec mmapl_lh__d1 _lh_mmapl_arg1_0 _lh_mmapl_arg2_0 =
//│ 		  (match _lh_mmapl_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (retURN_lh__d3 (`LH_N))
//│ 		    | `LH_C(_lh_mmapl_LH_C_0_0, _lh_mmapl_LH_C_1_0) -> 
//│ 		      ((bind_lh__d4 (_lh_mmapl_arg1_0 _lh_mmapl_LH_C_0_0)) (fun b_0 -> 
//│ 		        ((bind_lh__d3 ((mmapl_lh__d1 _lh_mmapl_arg1_0) _lh_mmapl_LH_C_1_0)) (fun bs_0 -> 
//│ 		          (retURN_lh__d2 (`LH_C(b_0, bs_0)))))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec retURN_lh__d1 _lh_retURN_arg1_2 s_5 =
//│ 		  (`LH_P2(s_5, _lh_retURN_arg1_2));;
//│ 		let rec startingWith_lh__d1 _lh_startingWith_arg1_0 _lh_startingWith_arg2_0 =
//│ 		  (let rec _lh_matchIdent_4 = (_lh_startingWith_arg1_0 _lh_startingWith_arg2_0) in
//│ 		    (match _lh_matchIdent_4 with
//│ 		      | `LH_P2(_lh_startingWith_LH_P2_0_0, _lh_startingWith_LH_P2_1_0) -> 
//│ 		        _lh_startingWith_LH_P2_1_0
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec bind_lh__d1 _lh_bind_arg1_3 _lh_bind_arg2_3 s_7 =
//│ 		  (let rec _lh_matchIdent_3 = (_lh_bind_arg1_3 s_7) in
//│ 		    (match _lh_matchIdent_3 with
//│ 		      | `LH_P2(_lh_bind_LH_P2_0_3, _lh_bind_LH_P2_1_3) -> 
//│ 		        ((_lh_bind_arg2_3 _lh_bind_LH_P2_1_3) _lh_bind_LH_P2_0_3)
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec update_lh__d1 _lh_update_arg1_0 s_0 =
//│ 		  (`LH_P2((_lh_update_arg1_0 s_0), s_0));;
//│ 		let rec incr_lh__d1 _lh_incr_arg1_0 =
//│ 		  (update_lh__d1 (fun x_0 -> 
//│ 		    (1 + x_0)));;
//│ 		let rec bind_lh__d2 _lh_bind_arg1_2 _lh_bind_arg2_2 s_6 =
//│ 		  (let rec _lh_matchIdent_2 = (_lh_bind_arg1_2 s_6) in
//│ 		    (match _lh_matchIdent_2 with
//│ 		      | `LH_P2(_lh_bind_LH_P2_0_2, _lh_bind_LH_P2_1_2) -> 
//│ 		        ((_lh_bind_arg2_2 _lh_bind_LH_P2_1_2) _lh_bind_LH_P2_0_2)
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec labelTree_lh__d1 _lh_labelTree_arg1_0 =
//│ 		  (let rec label_0 = (fun _lh_label_arg1_0 -> 
//│ 		    (match _lh_label_arg1_0 with
//│ 		      | `Node(_lh_label_Node_0_0, _lh_label_Node_1_0) -> 
//│ 		        ((bind_lh__d1 (incr_lh__d1 0)) (fun n_0 -> 
//│ 		          ((bind_lh__d2 ((mmapl_lh__d1 label_0) _lh_label_Node_1_0)) (fun ts_0 -> 
//│ 		            (retURN_lh__d1 (`Node((`LH_P2(n_0, _lh_label_Node_0_0)), ts_0)))))))
//│ 		      | _ -> 
//│ 		        (failwith "error"))) in
//│ 		    ((startingWith_lh__d1 (label_0 _lh_labelTree_arg1_0)) 0));;
//│ 		let rec mappend_lh__d1 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      (`LH_C(h_7, ((mappend_lh__d1 t_7) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec foldr_lh__d1 f_3 i_0 ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      ((f_3 h_6) (((foldr_lh__d1 f_3) i_0) t_6))
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec map_lh__d3 f_2 ls_3 =
//│ 		  (match ls_3 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      (`LH_C((f_2 h_5), ((map_lh__d3 f_2) t_5)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec null_lh__d1 _lh_null_arg1_0 =
//│ 		  (match _lh_null_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_0, _lh_null_LH_C_1_0) -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec id_lh__d1 _lh_id_arg1_0 =
//│ 		  _lh_id_arg1_0;;
//│ 		let rec head_lh__d1 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      h_4
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec newlyDefined_lh__d1 _lh_newlyDefined_arg1_0 _lh_newlyDefined_arg2_0 _lh_newlyDefined_arg3_0 _lh_newlyDefined_arg4_0 =
//│ 		  (if (_lh_newlyDefined_arg1_0 = _lh_newlyDefined_arg4_0) then
//│ 		    _lh_newlyDefined_arg2_0
//│ 		  else
//│ 		    (_lh_newlyDefined_arg3_0 _lh_newlyDefined_arg4_0));;
//│ 		let rec findCommon_lh__d1 _lh_findCommon_arg1_0 =
//│ 		  (let rec sim_0 = (fun _lh_sim_arg1_0 _lh_sim_arg2_0 -> 
//│ 		    (match _lh_sim_arg1_0 with
//│ 		      | `LH_P3(_lh_sim_LH_P3_0_0, _lh_sim_LH_P3_1_0, _lh_sim_LH_P3_2_0) -> 
//│ 		        (match _lh_sim_arg2_0 with
//│ 		          | `LH_P2(_lh_sim_LH_P2_0_0, _lh_sim_LH_P2_1_0) -> 
//│ 		            (let rec rcs_0 = ((map_lh__d3 _lh_sim_LH_P2_0_0) _lh_sim_LH_P3_2_0) in
//│ 		              (let rec ms_0 = (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		                (match _lh_listcomp_fun_para_0 with
//│ 		                  | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		                    (match _lh_listcomp_fun_ls_h_0 with
//│ 		                      | `LH_P3(_lh_sim_LH_P3_0_1, _lh_sim_LH_P3_1_1, _lh_sim_LH_P3_2_1) -> 
//│ 		                        (if (_lh_sim_LH_P3_1_0 = _lh_sim_LH_P3_1_1) then
//│ 		                          (if (_lh_sim_LH_P3_2_1 = rcs_0) then
//│ 		                            (`LH_C(_lh_sim_LH_P3_0_1, (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		                          else
//│ 		                            (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│ 		                        else
//│ 		                          (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│ 		                      | _ -> 
//│ 		                        (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│ 		                  | `LH_N -> 
//│ 		                    (`LH_N))) in
//│ 		                (_lh_listcomp_fun_0 _lh_sim_LH_P2_1_0)) in
//│ 		                (if (null_lh__d1 ms_0) then
//│ 		                  (`LH_P2(_lh_sim_LH_P2_0_0, ((mappend_lh__d1 (`LH_C((`LH_P3(_lh_sim_LH_P3_0_0, _lh_sim_LH_P3_1_0, rcs_0)), (`LH_N)))) _lh_sim_LH_P2_1_0)))
//│ 		                else
//│ 		                  (`LH_P2((((newlyDefined_lh__d1 _lh_sim_LH_P3_0_0) (head_lh__d1 ms_0)) _lh_sim_LH_P2_0_0), _lh_sim_LH_P2_1_0)))))
//│ 		          | _ -> 
//│ 		            (failwith "error"))
//│ 		      | _ -> 
//│ 		        (failwith "error"))) in
//│ 		    (let rec _lh_matchIdent_7 = (((foldr_lh__d1 sim_0) (`LH_P2(id_lh__d1, (`LH_N)))) _lh_findCommon_arg1_0) in
//│ 		      (match _lh_matchIdent_7 with
//│ 		        | `LH_P2(_lh_findCommon_LH_P2_0_0, _lh_findCommon_LH_P2_1_0) -> 
//│ 		          _lh_findCommon_LH_P2_1_0
//│ 		        | _ -> 
//│ 		          (failwith "error"))));;
//│ 		let rec cse_lh__d1 _lh_cse_arg1_0 =
//│ 		  (findCommon_lh__d1 (ltGraph_lh__d1 (labelTree_lh__d1 _lh_cse_arg1_0)));;
//│ 		let rec take_lh__d1 n_1 ls_6 =
//│ 		  (if (n_1 > 0) then
//│ 		    (match ls_6 with
//│ 		      | `LH_C(h_9, t_9) -> 
//│ 		        (`LH_C(h_9, ((take_lh__d1 (n_1 - 1)) t_9)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec map_lh__d2 f_4 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      (`LH_C((f_4 h_8), ((map_lh__d2 f_4) t_8)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec plus__lh__d6 _lh_plus__arg1_1 _lh_plus__arg2_1 =
//│ 		  (`Node((`LH_C('+', (`LH_N))), (`LH_C(_lh_plus__arg1_1, (`LH_C(_lh_plus__arg2_1, (`LH_N)))))));;
//│ 		let rec b_lh__d6 =
//│ 		  (`Node((`LH_C('b', (`LH_N))), (`LH_N)));;
//│ 		let rec prod_lh__d2 _lh_prod_arg1_0 =
//│ 		  (`Node((`LH_C('X', (`LH_N))), _lh_prod_arg1_0));;
//│ 		let rec a_lh__d7 =
//│ 		  (`Node((`LH_C('a', (`LH_N))), (`LH_N)));;
//│ 		let rec scanl_lh__d1 _lh_scanl_arg1_0 _lh_scanl_arg2_0 _lh_scanl_arg3_0 =
//│ 		  (`LH_C(_lh_scanl_arg2_0, (let rec _lh_matchIdent_5 = _lh_scanl_arg3_0 in
//│ 		    (match _lh_matchIdent_5 with
//│ 		      | `LH_N -> 
//│ 		        (`LH_N)
//│ 		      | `LH_C(_lh_scanl_LH_C_0_0, _lh_scanl_LH_C_1_0) -> 
//│ 		        (((scanl_lh__d1 _lh_scanl_arg1_0) ((_lh_scanl_arg1_0 _lh_scanl_arg2_0) _lh_scanl_LH_C_0_0)) _lh_scanl_LH_C_1_0)
//│ 		      | _ -> 
//│ 		        (failwith "error")))));;
//│ 		let rec c_lh__d3 =
//│ 		  (`Node((`LH_C('c', (`LH_N))), (`LH_N)));;
//│ 		let rec zerO_lh__d2 _lh_zerO_arg1_0 =
//│ 		  (match _lh_zerO_arg1_0 with
//│ 		    | 0 -> 
//│ 		      (`Node((`LH_C('0', (`LH_N))), (`LH_N)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec d_lh__d2 =
//│ 		  (`Node((`LH_C('d', (`LH_N))), (`LH_N)));;
//│ 		let rec example4_lh__d1 _lh_example4_arg1_0 =
//│ 		  (prod_lh__d2 (((scanl_lh__d1 plus__lh__d6) (zerO_lh__d2 0)) (`LH_C(a_lh__d7, (`LH_C(b_lh__d6, (`LH_C(c_lh__d3, (`LH_C(d_lh__d2, (`LH_N)))))))))));;
//│ 		let rec a_lh__d5 =
//│ 		  (`Node((`LH_C('a', (`LH_N))), (`LH_N)));;
//│ 		let rec mult__lh__d3 _lh_mult__arg1_0 _lh_mult__arg2_0 =
//│ 		  (`Node((`LH_C('*', (`LH_N))), (`LH_C(_lh_mult__arg1_0, (`LH_C(_lh_mult__arg2_0, (`LH_N)))))));;
//│ 		let rec a_lh__d4 =
//│ 		  (`Node((`LH_C('a', (`LH_N))), (`LH_N)));;
//│ 		let rec b_lh__d4 =
//│ 		  (`Node((`LH_C('b', (`LH_N))), (`LH_N)));;
//│ 		let rec b_lh__d3 =
//│ 		  (`Node((`LH_C('b', (`LH_N))), (`LH_N)));;
//│ 		let rec plus__lh__d4 _lh_plus__arg1_3 _lh_plus__arg2_3 =
//│ 		  (`Node((`LH_C('+', (`LH_N))), (`LH_C(_lh_plus__arg1_3, (`LH_C(_lh_plus__arg2_3, (`LH_N)))))));;
//│ 		let rec mult__lh__d2 _lh_mult__arg1_1 _lh_mult__arg2_1 =
//│ 		  (`Node((`LH_C('*', (`LH_N))), (`LH_C(_lh_mult__arg1_1, (`LH_C(_lh_mult__arg2_1, (`LH_N)))))));;
//│ 		let rec example2_lh__d1 _lh_example2_arg1_0 =
//│ 		  ((plus__lh__d4 ((mult__lh__d2 a_lh__d5) b_lh__d4)) ((mult__lh__d3 a_lh__d4) b_lh__d3));;
//│ 		let rec enumFromTo_lh__d1 a_0 b_1 =
//│ 		  (if (a_0 <= b_1) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh__d1 (a_0 + 1)) b_1)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec testCse_nofib_lh__d1 _lh_testCse_nofib_arg1_0 =
//│ 		  ((map_lh__d1 (fun i_1 -> 
//│ 		    ((map_lh__d2 cse_lh__d1) ((take_lh__d1 (i_1 mod 6)) (`LH_C((example0_lh__d1 0), (`LH_C((example1_lh__d1 0), (`LH_C((example2_lh__d1 0), (`LH_C((example3_lh__d1 0), (`LH_C((example4_lh__d1 0), (`LH_C((example5_lh__d1 0), (`LH_N))))))))))))))))) ((enumFromTo_lh__d1 1) _lh_testCse_nofib_arg1_0));;
//│ 		(testCse_nofib_lh__d1 1000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_P2 _lh_update_arg1⁰(s⁰) s⁰]: 5 --->
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_bind_LH_P2_0³ _lh_bind_LH_P2_1³ => _lh_bind_arg2³(_lh_bind_LH_P2_1³, _lh_bind_LH_P2_0³) | _  => error⁰}: 90
//│ [LH_P2 s¹ _lh_retURN_arg1⁰]: 10 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_bind_LH_P2_0¹ _lh_bind_LH_P2_1¹ => _lh_bind_arg2¹(_lh_bind_LH_P2_1¹, _lh_bind_LH_P2_0¹) | _  => error⁰}: 38
//│ 	case _lh_matchIdent² of {LH_P2 _lh_bind_LH_P2_0² _lh_bind_LH_P2_1² => _lh_bind_arg2²(_lh_bind_LH_P2_1², _lh_bind_LH_P2_0²) | _  => error⁰}: 75
//│ [LH_P2 s⁴ _lh_retURN_arg1¹]: 45 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_bind_LH_P2_0¹ _lh_bind_LH_P2_1¹ => _lh_bind_arg2¹(_lh_bind_LH_P2_1¹, _lh_bind_LH_P2_0¹) | _  => error⁰}: 38
//│ 	case _lh_matchIdent² of {LH_P2 _lh_bind_LH_P2_0² _lh_bind_LH_P2_1² => _lh_bind_arg2²(_lh_bind_LH_P2_1², _lh_bind_LH_P2_0²) | _  => error⁰}: 75
//│ [LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)]: 55 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)] | LH_N  => ys⁰}: 57
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => f³(h⁶, foldr_lh_₁(f³, i⁰, t⁶)) | LH_N  => i⁰}: 220
//│ [LH_P2 s⁵ _lh_retURN_arg1²]: 62 --->
//│ 	case _lh_matchIdent⁰ of {LH_P2 _lh_bind_LH_P2_0⁰ _lh_bind_LH_P2_1⁰ => _lh_bind_arg2⁰(_lh_bind_LH_P2_1⁰, _lh_bind_LH_P2_0⁰) | _  => error⁰}: 23
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_startingWith_LH_P2_0⁰ _lh_startingWith_LH_P2_1⁰ => _lh_startingWith_LH_P2_1⁰ | _  => error⁰}: 139
//│ [LH_N]: 106 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h¹ t¹ => [LH_C f⁰(h¹) map_lh_₅(f⁰, t¹)] | LH_N  => [LH_N]}: 154
//│ 	case ls¹ of {LH_C h² t² => [LH_C f¹(h²) map_lh_₄(f¹, t²)] | LH_N  => [LH_N]}: 168
//│ [LH_C b⁰ bs⁰]: 123 --->
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h¹ t¹ => [LH_C f⁰(h¹) map_lh_₅(f⁰, t¹)] | LH_N  => [LH_N]}: 154
//│ 	case ls¹ of {LH_C h² t² => [LH_C f¹(h²) map_lh_₄(f¹, t²)] | LH_N  => [LH_N]}: 168
//│ [LH_C f⁰(h¹) map_lh_₅(f⁰, t¹)]: 152 --->
//│ 	case lss⁰ of {LH_C h³ t³ => mappend_lh_₂(h³, concat_lh_₁(t³)) | LH_N  => [LH_N]}: 180
//│ [LH_N]: 153 --->
//│ 	case lss⁰ of {LH_C h³ t³ => mappend_lh_₂(h³, concat_lh_₁(t³)) | LH_N  => [LH_N]}: 180
//│ [LH_C f¹(h²) map_lh_₄(f¹, t²)]: 166 --->
//│ 	case ls³ of {LH_C h⁵ t⁵ => [LH_C f²(h⁵) map_lh_₃(f², t⁵)] | LH_N  => [LH_N]}: 204
//│ [LH_N]: 167 --->
//│ 	case ls³ of {LH_C h⁵ t⁵ => [LH_C f²(h⁵) map_lh_₃(f², t⁵)] | LH_N  => [LH_N]}: 204
//│ [LH_N]: 179 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)] | LH_N  => ys⁰}: 57
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => f³(h⁶, foldr_lh_₁(f³, i⁰, t⁶)) | LH_N  => i⁰}: 220
//│ [LH_C h⁷ mappend_lh_₁(t⁷, ys¹)]: 231 --->
//│ 	NoCons
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 574
//│ [LH_N]: 255 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 256 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 260 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 261 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 267 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_plus__arg2⁰ [LH_N]]: 268 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]: 269 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]]: 270 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 276 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'd' [LH_N]] [LH_N]]: 277 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 282 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C '0' [LH_N]] [LH_N]]: 283 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 290 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'c' [LH_N]] [LH_N]]: 291 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 297 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_plus__arg2¹ [LH_N]]: 298 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_plus__arg1¹ [LH_C _lh_plus__arg2¹ [LH_N]]]: 299 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1¹ [LH_C _lh_plus__arg2¹ [LH_N]]]]: 300 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 306 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'b' [LH_N]] [LH_N]]: 307 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 311 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_scanl_arg2⁰ let _lh_matchIdent⁵ = _lh_scanl_arg3⁰
//│ in case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}]: 326 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'X' [LH_N]] _lh_prod_arg1⁰]: 334 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 339 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 340 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 344 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 345 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 348 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_scanr_arg2⁰ [LH_N]]: 349 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ 	case _lh_matchIdent⁶ of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰}: 368
//│ [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]: 365 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]: 366 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ 	case _lh_matchIdent⁶ of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰}: 368
//│ [LH_N]: 378 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'c' [LH_N]] [LH_N]]: 379 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 385 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_plus__arg2² [LH_N]]: 386 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_plus__arg1² [LH_C _lh_plus__arg2² [LH_N]]]: 387 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1² [LH_C _lh_plus__arg2² [LH_N]]]]: 388 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 394 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'b' [LH_N]] [LH_N]]: 395 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 399 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'd' [LH_N]] [LH_N]]: 400 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'X' [LH_N]] _lh_prod_arg1¹]: 405 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 411 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C '0' [LH_N]] [LH_N]]: 412 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 419 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 420 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 424 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'b' [LH_N]] [LH_N]]: 425 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 429 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'b' [LH_N]] [LH_N]]: 430 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 434 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 435 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 441 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_mult__arg2⁰ [LH_N]]: 442 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]: 443 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]]: 444 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 452 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_mult__arg2¹ [LH_N]]: 453 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_mult__arg1¹ [LH_C _lh_mult__arg2¹ [LH_N]]]: 454 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1¹ [LH_C _lh_mult__arg2¹ [LH_N]]]]: 455 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 463 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_plus__arg2³ [LH_N]]: 464 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_plus__arg1³ [LH_C _lh_plus__arg2³ [LH_N]]]: 465 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1³ [LH_C _lh_plus__arg2³ [LH_N]]]]: 466 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_P2 n⁰ _lh_label_Node_0⁰]: 485 --->
//│ 	DeadCodeCons
//│ 	case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰}: 511
//│ 	case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh_₄(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh_₁(map_lh_₅(ltGraph_lh_₁, _lh_ltGraph_Node_1⁰))] | _  => error⁰}: 533
//│ [Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]: 487 --->
//│ 	DeadCodeCons
//│ 	case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 513
//│ 	case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh_₄(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh_₁(map_lh_₅(ltGraph_lh_₁, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 535
//│ [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh_₄(labelOf⁰, _lh_ltGraph_Node_1⁰)]: 522 --->
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh_₃(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh_₁(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh_₁([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh_₁(_lh_sim_LH_P3_0⁰, head_lh_₁(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 612
//│ [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh_₄(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh_₁(map_lh_₅(ltGraph_lh_₁, _lh_ltGraph_Node_1⁰))]: 530 --->
//│ 	case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)] | LH_N  => ys⁰}: 57
//│ 	case ls⁴ of {LH_C h⁶ t⁶ => f³(h⁶, foldr_lh_₁(f³, i⁰, t⁶)) | LH_N  => i⁰}: 220
//│ [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 560 --->
//│ 	DeadCodeCons
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 186
//│ 	case ls² of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 191
//│ [LH_N]: 573 --->
//│ 	DeadCodeCons
//│ 	case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 186
//│ 	case ls² of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 191
//│ [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰]: 588 --->
//│ 	NoCons
//│ 	case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 572
//│ [LH_N]: 589 --->
//│ 	case xs¹ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁(t⁷, ys¹)] | LH_N  => ys¹}: 233
//│ [LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]]: 590 --->
//│ 	case xs¹ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁(t⁷, ys¹)] | LH_N  => ys¹}: 233
//│ [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh_₁([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)]: 594 --->
//│ 	case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh_₃(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh_₁(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh_₁([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh_₁(_lh_sim_LH_P3_0⁰, head_lh_₁(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰}: 610
//│ 	case _lh_matchIdent⁷ of {LH_P2 _lh_findCommon_LH_P2_0⁰ _lh_findCommon_LH_P2_1⁰ => _lh_findCommon_LH_P2_1⁰ | _  => error⁰}: 627
//│ [LH_P2 newlyDefined_lh_₁(_lh_sim_LH_P3_0⁰, head_lh_₁(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰]: 605 --->
//│ 	case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh_₃(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh_₁(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh_₁([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh_₁(_lh_sim_LH_P3_0⁰, head_lh_₁(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰}: 610
//│ 	case _lh_matchIdent⁷ of {LH_P2 _lh_findCommon_LH_P2_0⁰ _lh_findCommon_LH_P2_1⁰ => _lh_findCommon_LH_P2_1⁰ | _  => error⁰}: 627
//│ [LH_N]: 619 --->
//│ 	NoCons
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 574
//│ [LH_P2 id_lh_₁ [LH_N]]: 620 --->
//│ 	case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh_₃(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh_₁(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh_₁([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh_₁(_lh_sim_LH_P3_0⁰, head_lh_₁(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰}: 610
//│ 	case _lh_matchIdent⁷ of {LH_P2 _lh_findCommon_LH_P2_0⁰ _lh_findCommon_LH_P2_1⁰ => _lh_findCommon_LH_P2_1⁰ | _  => error⁰}: 627
//│ [LH_N]: 634 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 635 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 639 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'b' [LH_N]] [LH_N]]: 640 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 644 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'c' [LH_N]] [LH_N]]: 645 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 649 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'b' [LH_N]] [LH_N]]: 650 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 654 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 655 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 661 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_plus__arg2⁴ [LH_N]]: 662 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_plus__arg1⁴ [LH_C _lh_plus__arg2⁴ [LH_N]]]: 663 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁴ [LH_C _lh_plus__arg2⁴ [LH_N]]]]: 664 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 670 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 671 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 677 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_plus__arg2⁵ [LH_N]]: 678 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_plus__arg1⁵ [LH_C _lh_plus__arg2⁵ [LH_N]]]: 679 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁵ [LH_C _lh_plus__arg2⁵ [LH_N]]]]: 680 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 688 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_plus__arg2⁶ [LH_N]]: 689 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_plus__arg1⁶ [LH_C _lh_plus__arg2⁶ [LH_N]]]: 690 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁶ [LH_C _lh_plus__arg2⁶ [LH_N]]]]: 691 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 699 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_mult__arg2² [LH_N]]: 700 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [LH_C _lh_mult__arg1² [LH_C _lh_mult__arg2² [LH_N]]]: 701 --->
//│ 	case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130
//│ [Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1² [LH_C _lh_mult__arg2² [LH_N]]]]: 702 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 737 --->
//│ 	case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 324
//│ [LH_C d_lh_₂ [LH_N]]: 738 --->
//│ 	case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 324
//│ [LH_C c_lh_₃ [LH_C d_lh_₂ [LH_N]]]: 739 --->
//│ 	case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 324
//│ [LH_C b_lh_₆ [LH_C c_lh_₃ [LH_C d_lh_₂ [LH_N]]]]: 740 --->
//│ 	case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 324
//│ [LH_C a_lh_₇ [LH_C b_lh_₆ [LH_C c_lh_₃ [LH_C d_lh_₂ [LH_N]]]]]: 741 --->
//│ 	case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 324
//│ [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)]: 761 --->
//│ 	case ls⁵ of {LH_C h⁸ t⁸ => [LH_C f⁴(h⁸) map_lh_₂(f⁴, t⁸)] | LH_N  => [LH_N]}: 716
//│ [LH_N]: 762 --->
//│ 	case ls⁵ of {LH_C h⁸ t⁸ => [LH_C f⁴(h⁸) map_lh_₂(f⁴, t⁸)] | LH_N  => [LH_N]}: 716
//│ [LH_N]: 764 --->
//│ 	case ls⁵ of {LH_C h⁸ t⁸ => [LH_C f⁴(h⁸) map_lh_₂(f⁴, t⁸)] | LH_N  => [LH_N]}: 716
//│ [LH_N]: 780 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent⁶ = scanr_lh_₁(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent⁶ of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 371
//│ [LH_C d_lh_₁ [LH_N]]: 781 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent⁶ = scanr_lh_₁(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent⁶ of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 371
//│ [LH_C c_lh_₂ [LH_C d_lh_₁ [LH_N]]]: 782 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent⁶ = scanr_lh_₁(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent⁶ of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 371
//│ [LH_C b_lh_₅ [LH_C c_lh_₂ [LH_C d_lh_₁ [LH_N]]]]: 783 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent⁶ = scanr_lh_₁(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent⁶ of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 371
//│ [LH_C a_lh_₆ [LH_C b_lh_₅ [LH_C c_lh_₂ [LH_C d_lh_₁ [LH_N]]]]]: 784 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent⁶ = scanr_lh_₁(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent⁶ of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 371
//│ [LH_N]: 893 --->
//│ 	case ls⁶ of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)] | LH_N  => [LH_N]}: 763
//│ [LH_C example5_lh_₁(0) [LH_N]]: 894 --->
//│ 	case ls⁶ of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)] | LH_N  => [LH_N]}: 763
//│ [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]: 895 --->
//│ 	case ls⁶ of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)] | LH_N  => [LH_N]}: 763
//│ [LH_C example3_lh_₁(0) [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]]: 896 --->
//│ 	case ls⁶ of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)] | LH_N  => [LH_N]}: 763
//│ [LH_C example2_lh_₁(0) [LH_C example3_lh_₁(0) [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]]]: 897 --->
//│ 	case ls⁶ of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)] | LH_N  => [LH_N]}: 763
//│ [LH_C example1_lh_₁(0) [LH_C example2_lh_₁(0) [LH_C example3_lh_₁(0) [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]]]]: 898 --->
//│ 	case ls⁶ of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)] | LH_N  => [LH_N]}: 763
//│ [LH_C example0_lh_₁(0) [LH_C example1_lh_₁(0) [LH_C example2_lh_₁(0) [LH_C example3_lh_₁(0) [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]]]]]: 899 --->
//│ 	case ls⁶ of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)] | LH_N  => [LH_N]}: 763
//│ ------------------
//│ case _lh_matchIdent⁰ of {LH_P2 _lh_bind_LH_P2_0⁰ _lh_bind_LH_P2_1⁰ => _lh_bind_arg2⁰(_lh_bind_LH_P2_1⁰, _lh_bind_LH_P2_0⁰) | _  => error⁰}: 23 --->
//│ 	[LH_P2 s⁵ _lh_retURN_arg1²]: 62
//│ case _lh_matchIdent¹ of {LH_P2 _lh_bind_LH_P2_0¹ _lh_bind_LH_P2_1¹ => _lh_bind_arg2¹(_lh_bind_LH_P2_1¹, _lh_bind_LH_P2_0¹) | _  => error⁰}: 38 --->
//│ 	[LH_P2 s¹ _lh_retURN_arg1⁰]: 10
//│ 	[LH_P2 s⁴ _lh_retURN_arg1¹]: 45
//│ case xs⁰ of {LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)] | LH_N  => ys⁰}: 57 --->
//│ 	[LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)]: 55
//│ 	[LH_N]: 179
//│ 	[LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh_₄(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh_₁(map_lh_₅(ltGraph_lh_₁, _lh_ltGraph_Node_1⁰))]: 530
//│ case _lh_matchIdent² of {LH_P2 _lh_bind_LH_P2_0² _lh_bind_LH_P2_1² => _lh_bind_arg2²(_lh_bind_LH_P2_1², _lh_bind_LH_P2_0²) | _  => error⁰}: 75 --->
//│ 	[LH_P2 s¹ _lh_retURN_arg1⁰]: 10
//│ 	[LH_P2 s⁴ _lh_retURN_arg1¹]: 45
//│ case _lh_matchIdent³ of {LH_P2 _lh_bind_LH_P2_0³ _lh_bind_LH_P2_1³ => _lh_bind_arg2³(_lh_bind_LH_P2_1³, _lh_bind_LH_P2_0³) | _  => error⁰}: 90 --->
//│ 	[LH_P2 _lh_update_arg1⁰(s⁰) s⁰]: 5
//│ case _lh_mmapl_arg2⁰ of {LH_N  => retURN_lh_₃([LH_N]) | LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰]))))) | _  => error⁰}: 130 --->
//│ 	[LH_N]: 255
//│ 	[LH_N]: 260
//│ 	[LH_N]: 267
//│ 	[LH_C _lh_plus__arg2⁰ [LH_N]]: 268
//│ 	[LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]: 269
//│ 	[LH_N]: 276
//│ 	[LH_N]: 282
//│ 	[LH_N]: 290
//│ 	[LH_N]: 297
//│ 	[LH_C _lh_plus__arg2¹ [LH_N]]: 298
//│ 	[LH_C _lh_plus__arg1¹ [LH_C _lh_plus__arg2¹ [LH_N]]]: 299
//│ 	[LH_N]: 306
//│ 	[LH_N]: 311
//│ 	[LH_C _lh_scanl_arg2⁰ let _lh_matchIdent⁵ = _lh_scanl_arg3⁰
//│ in case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}]: 326
//│ 	[LH_N]: 339
//│ 	[LH_N]: 344
//│ 	[LH_N]: 348
//│ 	[LH_C _lh_scanr_arg2⁰ [LH_N]]: 349
//│ 	[LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]: 365
//│ 	[LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]: 366
//│ 	[LH_N]: 378
//│ 	[LH_N]: 385
//│ 	[LH_C _lh_plus__arg2² [LH_N]]: 386
//│ 	[LH_C _lh_plus__arg1² [LH_C _lh_plus__arg2² [LH_N]]]: 387
//│ 	[LH_N]: 394
//│ 	[LH_N]: 399
//│ 	[LH_N]: 411
//│ 	[LH_N]: 419
//│ 	[LH_N]: 424
//│ 	[LH_N]: 429
//│ 	[LH_N]: 434
//│ 	[LH_N]: 441
//│ 	[LH_C _lh_mult__arg2⁰ [LH_N]]: 442
//│ 	[LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]: 443
//│ 	[LH_N]: 452
//│ 	[LH_C _lh_mult__arg2¹ [LH_N]]: 453
//│ 	[LH_C _lh_mult__arg1¹ [LH_C _lh_mult__arg2¹ [LH_N]]]: 454
//│ 	[LH_N]: 463
//│ 	[LH_C _lh_plus__arg2³ [LH_N]]: 464
//│ 	[LH_C _lh_plus__arg1³ [LH_C _lh_plus__arg2³ [LH_N]]]: 465
//│ 	[LH_N]: 634
//│ 	[LH_N]: 639
//│ 	[LH_N]: 644
//│ 	[LH_N]: 649
//│ 	[LH_N]: 654
//│ 	[LH_N]: 661
//│ 	[LH_C _lh_plus__arg2⁴ [LH_N]]: 662
//│ 	[LH_C _lh_plus__arg1⁴ [LH_C _lh_plus__arg2⁴ [LH_N]]]: 663
//│ 	[LH_N]: 670
//│ 	[LH_N]: 677
//│ 	[LH_C _lh_plus__arg2⁵ [LH_N]]: 678
//│ 	[LH_C _lh_plus__arg1⁵ [LH_C _lh_plus__arg2⁵ [LH_N]]]: 679
//│ 	[LH_N]: 688
//│ 	[LH_C _lh_plus__arg2⁶ [LH_N]]: 689
//│ 	[LH_C _lh_plus__arg1⁶ [LH_C _lh_plus__arg2⁶ [LH_N]]]: 690
//│ 	[LH_N]: 699
//│ 	[LH_C _lh_mult__arg2² [LH_N]]: 700
//│ 	[LH_C _lh_mult__arg1² [LH_C _lh_mult__arg2² [LH_N]]]: 701
//│ case _lh_matchIdent⁴ of {LH_P2 _lh_startingWith_LH_P2_0⁰ _lh_startingWith_LH_P2_1⁰ => _lh_startingWith_LH_P2_1⁰ | _  => error⁰}: 139 --->
//│ 	[LH_P2 s⁵ _lh_retURN_arg1²]: 62
//│ case ls⁰ of {LH_C h¹ t¹ => [LH_C f⁰(h¹) map_lh_₅(f⁰, t¹)] | LH_N  => [LH_N]}: 154 --->
//│ 	[LH_N]: 106
//│ 	[LH_C b⁰ bs⁰]: 123
//│ case ls¹ of {LH_C h² t² => [LH_C f¹(h²) map_lh_₄(f¹, t²)] | LH_N  => [LH_N]}: 168 --->
//│ 	[LH_N]: 106
//│ 	[LH_C b⁰ bs⁰]: 123
//│ case lss⁰ of {LH_C h³ t³ => mappend_lh_₂(h³, concat_lh_₁(t³)) | LH_N  => [LH_N]}: 180 --->
//│ 	[LH_C f⁰(h¹) map_lh_₅(f⁰, t¹)]: 152
//│ 	[LH_N]: 153
//│ case _lh_null_arg1⁰ of {LH_N  => [True] | LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False] | _  => error⁰}: 186 --->
//│ 	[LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 560
//│ 	[LH_N]: 573
//│ case ls² of {LH_C h⁴ t⁴ => h⁴ | LH_N  => error⁰}: 191 --->
//│ 	[LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 560
//│ 	[LH_N]: 573
//│ case ls³ of {LH_C h⁵ t⁵ => [LH_C f²(h⁵) map_lh_₃(f², t⁵)] | LH_N  => [LH_N]}: 204 --->
//│ 	[LH_C f¹(h²) map_lh_₄(f¹, t²)]: 166
//│ 	[LH_N]: 167
//│ case ls⁴ of {LH_C h⁶ t⁶ => f³(h⁶, foldr_lh_₁(f³, i⁰, t⁶)) | LH_N  => i⁰}: 220 --->
//│ 	[LH_C h⁰ mappend_lh_₂(t⁰, ys⁰)]: 55
//│ 	[LH_N]: 179
//│ 	[LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh_₄(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh_₁(map_lh_₅(ltGraph_lh_₁, _lh_ltGraph_Node_1⁰))]: 530
//│ case xs¹ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁(t⁷, ys¹)] | LH_N  => ys¹}: 233 --->
//│ 	[LH_N]: 589
//│ 	[LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]]: 590
//│ case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 324 --->
//│ 	[LH_N]: 737
//│ 	[LH_C d_lh_₂ [LH_N]]: 738
//│ 	[LH_C c_lh_₃ [LH_C d_lh_₂ [LH_N]]]: 739
//│ 	[LH_C b_lh_₆ [LH_C c_lh_₃ [LH_C d_lh_₂ [LH_N]]]]: 740
//│ 	[LH_C a_lh_₇ [LH_C b_lh_₆ [LH_C c_lh_₃ [LH_C d_lh_₂ [LH_N]]]]]: 741
//│ case _lh_matchIdent⁶ of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰}: 368 --->
//│ 	[LH_C _lh_scanr_arg2⁰ [LH_N]]: 349
//│ 	[LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]: 366
//│ case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent⁶ = scanr_lh_₁(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent⁶ of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 371 --->
//│ 	[LH_N]: 780
//│ 	[LH_C d_lh_₁ [LH_N]]: 781
//│ 	[LH_C c_lh_₂ [LH_C d_lh_₁ [LH_N]]]: 782
//│ 	[LH_C b_lh_₅ [LH_C c_lh_₂ [LH_C d_lh_₁ [LH_N]]]]: 783
//│ 	[LH_C a_lh_₆ [LH_C b_lh_₅ [LH_C c_lh_₂ [LH_C d_lh_₁ [LH_N]]]]]: 784
//│ case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494 --->
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 256
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 261
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]]: 270
//│ 	[Node [LH_C 'd' [LH_N]] [LH_N]]: 277
//│ 	[Node [LH_C '0' [LH_N]] [LH_N]]: 283
//│ 	[Node [LH_C 'c' [LH_N]] [LH_N]]: 291
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1¹ [LH_C _lh_plus__arg2¹ [LH_N]]]]: 300
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 307
//│ 	[Node [LH_C 'X' [LH_N]] _lh_prod_arg1⁰]: 334
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 340
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 345
//│ 	[Node [LH_C 'c' [LH_N]] [LH_N]]: 379
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1² [LH_C _lh_plus__arg2² [LH_N]]]]: 388
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 395
//│ 	[Node [LH_C 'd' [LH_N]] [LH_N]]: 400
//│ 	[Node [LH_C 'X' [LH_N]] _lh_prod_arg1¹]: 405
//│ 	[Node [LH_C '0' [LH_N]] [LH_N]]: 412
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 420
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 425
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 430
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 435
//│ 	[Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]]: 444
//│ 	[Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1¹ [LH_C _lh_mult__arg2¹ [LH_N]]]]: 455
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1³ [LH_C _lh_plus__arg2³ [LH_N]]]]: 466
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 635
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 640
//│ 	[Node [LH_C 'c' [LH_N]] [LH_N]]: 645
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 650
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 655
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁴ [LH_C _lh_plus__arg2⁴ [LH_N]]]]: 664
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 671
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁵ [LH_C _lh_plus__arg2⁵ [LH_N]]]]: 680
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁶ [LH_C _lh_plus__arg2⁶ [LH_N]]]]: 691
//│ 	[Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1² [LH_C _lh_mult__arg2² [LH_N]]]]: 702
//│ case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰}: 511 --->
//│ 	[LH_P2 n⁰ _lh_label_Node_0⁰]: 485
//│ case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰}: 513 --->
//│ 	[Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]: 487
//│ case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh_₄(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh_₁(map_lh_₅(ltGraph_lh_₁, _lh_ltGraph_Node_1⁰))] | _  => error⁰}: 533 --->
//│ 	[LH_P2 n⁰ _lh_label_Node_0⁰]: 485
//│ case _lh_ltGraph_arg1⁰ of {Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰ | _  => error⁰} | _  => error⁰})
//│ in [LH_C [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh_₄(labelOf⁰, _lh_ltGraph_Node_1⁰)] concat_lh_₁(map_lh_₅(ltGraph_lh_₁, _lh_ltGraph_Node_1⁰))] | _  => error⁰} | _  => error⁰}: 535 --->
//│ 	[Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]: 487
//│ case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 572 --->
//│ 	[LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰]: 588
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]}: 574 --->
//│ 	[LH_C h⁷ mappend_lh_₁(t⁷, ys¹)]: 231
//│ 	[LH_N]: 619
//│ case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh_₃(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh_₁(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh_₁([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh_₁(_lh_sim_LH_P3_0⁰, head_lh_₁(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰}: 610 --->
//│ 	[LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh_₁([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)]: 594
//│ 	[LH_P2 newlyDefined_lh_₁(_lh_sim_LH_P3_0⁰, head_lh_₁(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰]: 605
//│ 	[LH_P2 id_lh_₁ [LH_N]]: 620
//│ case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh_₃(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh_₁(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh_₁([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh_₁(_lh_sim_LH_P3_0⁰, head_lh_₁(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 612 --->
//│ 	[LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh_₄(labelOf⁰, _lh_ltGraph_Node_1⁰)]: 522
//│ case _lh_matchIdent⁷ of {LH_P2 _lh_findCommon_LH_P2_0⁰ _lh_findCommon_LH_P2_1⁰ => _lh_findCommon_LH_P2_1⁰ | _  => error⁰}: 627 --->
//│ 	[LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh_₁([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)]: 594
//│ 	[LH_P2 newlyDefined_lh_₁(_lh_sim_LH_P3_0⁰, head_lh_₁(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰]: 605
//│ 	[LH_P2 id_lh_₁ [LH_N]]: 620
//│ case ls⁵ of {LH_C h⁸ t⁸ => [LH_C f⁴(h⁸) map_lh_₂(f⁴, t⁸)] | LH_N  => [LH_N]}: 716 --->
//│ 	[LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)]: 761
//│ 	[LH_N]: 762
//│ 	[LH_N]: 764
//│ case ls⁶ of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)] | LH_N  => [LH_N]}: 763 --->
//│ 	[LH_N]: 893
//│ 	[LH_C example5_lh_₁(0) [LH_N]]: 894
//│ 	[LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]: 895
//│ 	[LH_C example3_lh_₁(0) [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]]: 896
//│ 	[LH_C example2_lh_₁(0) [LH_C example3_lh_₁(0) [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]]]: 897
//│ 	[LH_C example1_lh_₁(0) [LH_C example2_lh_₁(0) [LH_C example3_lh_₁(0) [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]]]]: 898
//│ 	[LH_C example0_lh_₁(0) [LH_C example1_lh_₁(0) [LH_C example2_lh_₁(0) [LH_C example3_lh_₁(0) [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]]]]]: 899
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_P2 _lh_update_arg1⁰(s⁰) s⁰]: 5 --->
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_bind_LH_P2_0³ _lh_bind_LH_P2_1³ => _lh_bind_arg2³(_lh_bind_LH_P2_1³, _lh_bind_LH_P2_0³) | _  => error⁰}: 90
//│ [LH_C f⁰(h¹) map_lh_₅(f⁰, t¹)]: 152 --->
//│ 	case lss⁰ of {LH_C h³ t³ => mappend_lh_₂(h³, concat_lh_₁(t³)) | LH_N  => [LH_N]}: 180
//│ [LH_N]: 153 --->
//│ 	case lss⁰ of {LH_C h³ t³ => mappend_lh_₂(h³, concat_lh_₁(t³)) | LH_N  => [LH_N]}: 180
//│ [LH_C f¹(h²) map_lh_₄(f¹, t²)]: 166 --->
//│ 	case ls³ of {LH_C h⁵ t⁵ => [LH_C f²(h⁵) map_lh_₃(f², t⁵)] | LH_N  => [LH_N]}: 204
//│ [LH_N]: 167 --->
//│ 	case ls³ of {LH_C h⁵ t⁵ => [LH_C f²(h⁵) map_lh_₃(f², t⁵)] | LH_N  => [LH_N]}: 204
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 256 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 261 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]]: 270 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'd' [LH_N]] [LH_N]]: 277 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C '0' [LH_N]] [LH_N]]: 283 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'c' [LH_N]] [LH_N]]: 291 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1¹ [LH_C _lh_plus__arg2¹ [LH_N]]]]: 300 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'b' [LH_N]] [LH_N]]: 307 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'X' [LH_N]] _lh_prod_arg1⁰]: 334 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 340 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 345 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'c' [LH_N]] [LH_N]]: 379 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1² [LH_C _lh_plus__arg2² [LH_N]]]]: 388 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'b' [LH_N]] [LH_N]]: 395 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'd' [LH_N]] [LH_N]]: 400 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'X' [LH_N]] _lh_prod_arg1¹]: 405 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C '0' [LH_N]] [LH_N]]: 412 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 420 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'b' [LH_N]] [LH_N]]: 425 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'b' [LH_N]] [LH_N]]: 430 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 435 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]]: 444 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1¹ [LH_C _lh_mult__arg2¹ [LH_N]]]]: 455 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1³ [LH_C _lh_plus__arg2³ [LH_N]]]]: 466 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh_₄(labelOf⁰, _lh_ltGraph_Node_1⁰)]: 522 --->
//│ 	case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh_₃(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh_₁(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh_₁([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh_₁(_lh_sim_LH_P3_0⁰, head_lh_₁(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 612
//│ [LH_N]: 589 --->
//│ 	case xs¹ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁(t⁷, ys¹)] | LH_N  => ys¹}: 233
//│ [LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]]: 590 --->
//│ 	case xs¹ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁(t⁷, ys¹)] | LH_N  => ys¹}: 233
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 635 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'b' [LH_N]] [LH_N]]: 640 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'c' [LH_N]] [LH_N]]: 645 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'b' [LH_N]] [LH_N]]: 650 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 655 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁴ [LH_C _lh_plus__arg2⁴ [LH_N]]]]: 664 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C 'a' [LH_N]] [LH_N]]: 671 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁵ [LH_C _lh_plus__arg2⁵ [LH_N]]]]: 680 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁶ [LH_C _lh_plus__arg2⁶ [LH_N]]]]: 691 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1² [LH_C _lh_mult__arg2² [LH_N]]]]: 702 --->
//│ 	case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494
//│ [LH_N]: 737 --->
//│ 	case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 324
//│ [LH_C d_lh_₂ [LH_N]]: 738 --->
//│ 	case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 324
//│ [LH_C c_lh_₃ [LH_C d_lh_₂ [LH_N]]]: 739 --->
//│ 	case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 324
//│ [LH_C b_lh_₆ [LH_C c_lh_₃ [LH_C d_lh_₂ [LH_N]]]]: 740 --->
//│ 	case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 324
//│ [LH_C a_lh_₇ [LH_C b_lh_₆ [LH_C c_lh_₃ [LH_C d_lh_₂ [LH_N]]]]]: 741 --->
//│ 	case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 324
//│ [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)]: 761 --->
//│ 	case ls⁵ of {LH_C h⁸ t⁸ => [LH_C f⁴(h⁸) map_lh_₂(f⁴, t⁸)] | LH_N  => [LH_N]}: 716
//│ [LH_N]: 762 --->
//│ 	case ls⁵ of {LH_C h⁸ t⁸ => [LH_C f⁴(h⁸) map_lh_₂(f⁴, t⁸)] | LH_N  => [LH_N]}: 716
//│ [LH_N]: 764 --->
//│ 	case ls⁵ of {LH_C h⁸ t⁸ => [LH_C f⁴(h⁸) map_lh_₂(f⁴, t⁸)] | LH_N  => [LH_N]}: 716
//│ [LH_N]: 780 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent⁶ = scanr_lh_₁(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent⁶ of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 371
//│ [LH_C d_lh_₁ [LH_N]]: 781 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent⁶ = scanr_lh_₁(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent⁶ of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 371
//│ [LH_C c_lh_₂ [LH_C d_lh_₁ [LH_N]]]: 782 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent⁶ = scanr_lh_₁(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent⁶ of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 371
//│ [LH_C b_lh_₅ [LH_C c_lh_₂ [LH_C d_lh_₁ [LH_N]]]]: 783 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent⁶ = scanr_lh_₁(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent⁶ of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 371
//│ [LH_C a_lh_₆ [LH_C b_lh_₅ [LH_C c_lh_₂ [LH_C d_lh_₁ [LH_N]]]]]: 784 --->
//│ 	case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent⁶ = scanr_lh_₁(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent⁶ of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 371
//│ [LH_N]: 893 --->
//│ 	case ls⁶ of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)] | LH_N  => [LH_N]}: 763
//│ [LH_C example5_lh_₁(0) [LH_N]]: 894 --->
//│ 	case ls⁶ of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)] | LH_N  => [LH_N]}: 763
//│ [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]: 895 --->
//│ 	case ls⁶ of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)] | LH_N  => [LH_N]}: 763
//│ [LH_C example3_lh_₁(0) [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]]: 896 --->
//│ 	case ls⁶ of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)] | LH_N  => [LH_N]}: 763
//│ [LH_C example2_lh_₁(0) [LH_C example3_lh_₁(0) [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]]]: 897 --->
//│ 	case ls⁶ of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)] | LH_N  => [LH_N]}: 763
//│ [LH_C example1_lh_₁(0) [LH_C example2_lh_₁(0) [LH_C example3_lh_₁(0) [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]]]]: 898 --->
//│ 	case ls⁶ of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)] | LH_N  => [LH_N]}: 763
//│ [LH_C example0_lh_₁(0) [LH_C example1_lh_₁(0) [LH_C example2_lh_₁(0) [LH_C example3_lh_₁(0) [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]]]]]: 899 --->
//│ 	case ls⁶ of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)] | LH_N  => [LH_N]}: 763
//│ ------------------
//│ case _lh_matchIdent³ of {LH_P2 _lh_bind_LH_P2_0³ _lh_bind_LH_P2_1³ => _lh_bind_arg2³(_lh_bind_LH_P2_1³, _lh_bind_LH_P2_0³) | _  => error⁰}: 90 --->
//│ 	[LH_P2 _lh_update_arg1⁰(s⁰) s⁰]: 5
//│ case lss⁰ of {LH_C h³ t³ => mappend_lh_₂(h³, concat_lh_₁(t³)) | LH_N  => [LH_N]}: 180 --->
//│ 	[LH_C f⁰(h¹) map_lh_₅(f⁰, t¹)]: 152
//│ 	[LH_N]: 153
//│ case ls³ of {LH_C h⁵ t⁵ => [LH_C f²(h⁵) map_lh_₃(f², t⁵)] | LH_N  => [LH_N]}: 204 --->
//│ 	[LH_C f¹(h²) map_lh_₄(f¹, t²)]: 166
//│ 	[LH_N]: 167
//│ case xs¹ of {LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁(t⁷, ys¹)] | LH_N  => ys¹}: 233 --->
//│ 	[LH_N]: 589
//│ 	[LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]]: 590
//│ case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) | _  => error⁰}: 324 --->
//│ 	[LH_N]: 737
//│ 	[LH_C d_lh_₂ [LH_N]]: 738
//│ 	[LH_C c_lh_₃ [LH_C d_lh_₂ [LH_N]]]: 739
//│ 	[LH_C b_lh_₆ [LH_C c_lh_₃ [LH_C d_lh_₂ [LH_N]]]]: 740
//│ 	[LH_C a_lh_₇ [LH_C b_lh_₆ [LH_C c_lh_₃ [LH_C d_lh_₂ [LH_N]]]]]: 741
//│ case _lh_scanr_arg3⁰ of {LH_N  => [LH_C _lh_scanr_arg2⁰ [LH_N]] | LH_C _lh_scanr_LH_C_0⁰ _lh_scanr_LH_C_1⁰ => let _lh_matchIdent⁶ = scanr_lh_₁(_lh_scanr_arg1⁰, _lh_scanr_arg2⁰, _lh_scanr_LH_C_1⁰)
//│ in case _lh_matchIdent⁶ of {LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁰(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]] | _  => error⁰} | _  => error⁰}: 371 --->
//│ 	[LH_N]: 780
//│ 	[LH_C d_lh_₁ [LH_N]]: 781
//│ 	[LH_C c_lh_₂ [LH_C d_lh_₁ [LH_N]]]: 782
//│ 	[LH_C b_lh_₅ [LH_C c_lh_₂ [LH_C d_lh_₁ [LH_N]]]]: 783
//│ 	[LH_C a_lh_₆ [LH_C b_lh_₅ [LH_C c_lh_₂ [LH_C d_lh_₁ [LH_N]]]]]: 784
//│ case _lh_label_arg1⁰ of {Node _lh_label_Node_0⁰ _lh_label_Node_1⁰ => bind_lh_₁(incr_lh_₁(0), (fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰]))))) | _  => error⁰}: 494 --->
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 256
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 261
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]]: 270
//│ 	[Node [LH_C 'd' [LH_N]] [LH_N]]: 277
//│ 	[Node [LH_C '0' [LH_N]] [LH_N]]: 283
//│ 	[Node [LH_C 'c' [LH_N]] [LH_N]]: 291
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1¹ [LH_C _lh_plus__arg2¹ [LH_N]]]]: 300
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 307
//│ 	[Node [LH_C 'X' [LH_N]] _lh_prod_arg1⁰]: 334
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 340
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 345
//│ 	[Node [LH_C 'c' [LH_N]] [LH_N]]: 379
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1² [LH_C _lh_plus__arg2² [LH_N]]]]: 388
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 395
//│ 	[Node [LH_C 'd' [LH_N]] [LH_N]]: 400
//│ 	[Node [LH_C 'X' [LH_N]] _lh_prod_arg1¹]: 405
//│ 	[Node [LH_C '0' [LH_N]] [LH_N]]: 412
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 420
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 425
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 430
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 435
//│ 	[Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]]: 444
//│ 	[Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1¹ [LH_C _lh_mult__arg2¹ [LH_N]]]]: 455
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1³ [LH_C _lh_plus__arg2³ [LH_N]]]]: 466
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 635
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 640
//│ 	[Node [LH_C 'c' [LH_N]] [LH_N]]: 645
//│ 	[Node [LH_C 'b' [LH_N]] [LH_N]]: 650
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 655
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁴ [LH_C _lh_plus__arg2⁴ [LH_N]]]]: 664
//│ 	[Node [LH_C 'a' [LH_N]] [LH_N]]: 671
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁵ [LH_C _lh_plus__arg2⁵ [LH_N]]]]: 680
//│ 	[Node [LH_C '+' [LH_N]] [LH_C _lh_plus__arg1⁶ [LH_C _lh_plus__arg2⁶ [LH_N]]]]: 691
//│ 	[Node [LH_C '*' [LH_N]] [LH_C _lh_mult__arg1² [LH_C _lh_mult__arg2² [LH_N]]]]: 702
//│ case _lh_sim_arg1⁰ of {LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ _lh_sim_LH_P3_2⁰ => case _lh_sim_arg2⁰ of {LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => let rcs⁰ = map_lh_₃(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2⁰)
//│ in let ms⁰ = let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)} | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ in if null_lh_₁(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh_₁([LH_C [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰] [LH_N]], _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh_₁(_lh_sim_LH_P3_0⁰, head_lh_₁(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 612 --->
//│ 	[LH_P3 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ map_lh_₄(labelOf⁰, _lh_ltGraph_Node_1⁰)]: 522
//│ case ls⁵ of {LH_C h⁸ t⁸ => [LH_C f⁴(h⁸) map_lh_₂(f⁴, t⁸)] | LH_N  => [LH_N]}: 716 --->
//│ 	[LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)]: 761
//│ 	[LH_N]: 762
//│ 	[LH_N]: 764
//│ case ls⁶ of {LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₁((n¹ - 1), t⁹)] | LH_N  => [LH_N]}: 763 --->
//│ 	[LH_N]: 893
//│ 	[LH_C example5_lh_₁(0) [LH_N]]: 894
//│ 	[LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]: 895
//│ 	[LH_C example3_lh_₁(0) [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]]: 896
//│ 	[LH_C example2_lh_₁(0) [LH_C example3_lh_₁(0) [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]]]: 897
//│ 	[LH_C example1_lh_₁(0) [LH_C example2_lh_₁(0) [LH_C example3_lh_₁(0) [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]]]]: 898
//│ 	[LH_C example0_lh_₁(0) [LH_C example1_lh_₁(0) [LH_C example2_lh_₁(0) [LH_C example3_lh_₁(0) [LH_C example4_lh_₁(0) [LH_C example5_lh_₁(0) [LH_N]]]]]]]: 899
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testCse_nofib_lh_₁(primId⁰(1000))
//│ def a_lh_₁ = 
//│ 	let _lh_label_Node_1¹³ = [LH_N]
//│ 	in let _lh_label_Node_0¹³ = [LH_C 'a' [LH_N]]
//│ 	in (fun label¹⁴ -> bind_lh_₁(incr_lh_₁(0), (fun n¹⁴ -> bind_lh_₂(mmapl_lh_₁(label¹⁴, _lh_label_Node_1¹³), (fun ts¹³ -> retURN_lh_₁([Node [LH_P2 n¹⁴ _lh_label_Node_0¹³] ts¹³]))))))
//│ def a_lh_₂ = 
//│ 	let _lh_label_Node_1¹⁹ = [LH_N]
//│ 	in let _lh_label_Node_0¹⁹ = [LH_C 'a' [LH_N]]
//│ 	in (fun label²⁰ -> bind_lh_₁(incr_lh_₁(0), (fun n²¹ -> bind_lh_₂(mmapl_lh_₁(label²⁰, _lh_label_Node_1¹⁹), (fun ts¹⁹ -> retURN_lh_₁([Node [LH_P2 n²¹ _lh_label_Node_0¹⁹] ts¹⁹]))))))
//│ def a_lh_₃ = 
//│ 	let _lh_label_Node_1⁹ = [LH_N]
//│ 	in let _lh_label_Node_0⁹ = [LH_C 'a' [LH_N]]
//│ 	in (fun label⁹ -> bind_lh_₁(incr_lh_₁(0), (fun n¹⁰ -> bind_lh_₂(mmapl_lh_₁(label⁹, _lh_label_Node_1⁹), (fun ts⁹ -> retURN_lh_₁([Node [LH_P2 n¹⁰ _lh_label_Node_0⁹] ts⁹]))))))
//│ def a_lh_₄ = 
//│ 	let _lh_label_Node_1¹⁴ = [LH_N]
//│ 	in let _lh_label_Node_0¹⁴ = [LH_C 'a' [LH_N]]
//│ 	in (fun label¹⁵ -> bind_lh_₁(incr_lh_₁(0), (fun n¹⁶ -> bind_lh_₂(mmapl_lh_₁(label¹⁵, _lh_label_Node_1¹⁴), (fun ts¹⁴ -> retURN_lh_₁([Node [LH_P2 n¹⁶ _lh_label_Node_0¹⁴] ts¹⁴]))))))
//│ def a_lh_₅ = 
//│ 	let _lh_label_Node_1⁷ = [LH_N]
//│ 	in let _lh_label_Node_0⁷ = [LH_C 'a' [LH_N]]
//│ 	in (fun label⁷ -> bind_lh_₁(incr_lh_₁(0), (fun n⁸ -> bind_lh_₂(mmapl_lh_₁(label⁷, _lh_label_Node_1⁷), (fun ts⁷ -> retURN_lh_₁([Node [LH_P2 n⁸ _lh_label_Node_0⁷] ts⁷]))))))
//│ def a_lh_₆ = 
//│ 	let _lh_label_Node_1³² = [LH_N]
//│ 	in let _lh_label_Node_0³² = [LH_C 'a' [LH_N]]
//│ 	in (fun label³³ -> bind_lh_₁(incr_lh_₁(0), (fun n⁴¹ -> bind_lh_₂(mmapl_lh_₁(label³³, _lh_label_Node_1³²), (fun ts³² -> retURN_lh_₁([Node [LH_P2 n⁴¹ _lh_label_Node_0³²] ts³²]))))))
//│ def a_lh_₇ = 
//│ 	let _lh_label_Node_1²⁵ = [LH_N]
//│ 	in let _lh_label_Node_0²⁵ = [LH_C 'a' [LH_N]]
//│ 	in (fun label²⁶ -> bind_lh_₁(incr_lh_₁(0), (fun n²⁷ -> bind_lh_₂(mmapl_lh_₁(label²⁶, _lh_label_Node_1²⁵), (fun ts²⁵ -> retURN_lh_₁([Node [LH_P2 n²⁷ _lh_label_Node_0²⁵] ts²⁵]))))))
//│ def a_lh_₈ = 
//│ 	let _lh_label_Node_1⁶ = [LH_N]
//│ 	in let _lh_label_Node_0⁶ = [LH_C 'a' [LH_N]]
//│ 	in (fun label⁶ -> bind_lh_₁(incr_lh_₁(0), (fun n⁷ -> bind_lh_₂(mmapl_lh_₁(label⁶, _lh_label_Node_1⁶), (fun ts⁶ -> retURN_lh_₁([Node [LH_P2 n⁷ _lh_label_Node_0⁶] ts⁶]))))))
//│ def a_lh_₉ = 
//│ 	let _lh_label_Node_1³ = [LH_N]
//│ 	in let _lh_label_Node_0³ = [LH_C 'a' [LH_N]]
//│ 	in (fun label³ -> bind_lh_₁(incr_lh_₁(0), (fun n⁴ -> bind_lh_₂(mmapl_lh_₁(label³, _lh_label_Node_1³), (fun ts³ -> retURN_lh_₁([Node [LH_P2 n⁴ _lh_label_Node_0³] ts³]))))))
//│ def b_lh_₁ = 
//│ 	let _lh_label_Node_1⁸ = [LH_N]
//│ 	in let _lh_label_Node_0⁸ = [LH_C 'b' [LH_N]]
//│ 	in (fun label⁸ -> bind_lh_₁(incr_lh_₁(0), (fun n⁹ -> bind_lh_₂(mmapl_lh_₁(label⁸, _lh_label_Node_1⁸), (fun ts⁸ -> retURN_lh_₁([Node [LH_P2 n⁹ _lh_label_Node_0⁸] ts⁸]))))))
//│ def b_lh_₂ = 
//│ 	let _lh_label_Node_1²¹ = [LH_N]
//│ 	in let _lh_label_Node_0²¹ = [LH_C 'b' [LH_N]]
//│ 	in (fun label²² -> bind_lh_₁(incr_lh_₁(0), (fun n²³ -> bind_lh_₂(mmapl_lh_₁(label²², _lh_label_Node_1²¹), (fun ts²¹ -> retURN_lh_₁([Node [LH_P2 n²³ _lh_label_Node_0²¹] ts²¹]))))))
//│ def b_lh_₃ = 
//│ 	let _lh_label_Node_1²⁰ = [LH_N]
//│ 	in let _lh_label_Node_0²⁰ = [LH_C 'b' [LH_N]]
//│ 	in (fun label²¹ -> bind_lh_₁(incr_lh_₁(0), (fun n²² -> bind_lh_₂(mmapl_lh_₁(label²¹, _lh_label_Node_1²⁰), (fun ts²⁰ -> retURN_lh_₁([Node [LH_P2 n²² _lh_label_Node_0²⁰] ts²⁰]))))))
//│ def b_lh_₄ = 
//│ 	let _lh_label_Node_1¹⁸ = [LH_N]
//│ 	in let _lh_label_Node_0¹⁸ = [LH_C 'b' [LH_N]]
//│ 	in (fun label¹⁹ -> bind_lh_₁(incr_lh_₁(0), (fun n²⁰ -> bind_lh_₂(mmapl_lh_₁(label¹⁹, _lh_label_Node_1¹⁸), (fun ts¹⁸ -> retURN_lh_₁([Node [LH_P2 n²⁰ _lh_label_Node_0¹⁸] ts¹⁸]))))))
//│ def b_lh_₅ = 
//│ 	let _lh_label_Node_1¹¹ = [LH_N]
//│ 	in let _lh_label_Node_0¹¹ = [LH_C 'b' [LH_N]]
//│ 	in (fun label¹¹ -> bind_lh_₁(incr_lh_₁(0), (fun n¹² -> bind_lh_₂(mmapl_lh_₁(label¹¹, _lh_label_Node_1¹¹), (fun ts¹¹ -> retURN_lh_₁([Node [LH_P2 n¹² _lh_label_Node_0¹¹] ts¹¹]))))))
//│ def b_lh_₆ = 
//│ 	let _lh_label_Node_1¹⁶ = [LH_N]
//│ 	in let _lh_label_Node_0¹⁶ = [LH_C 'b' [LH_N]]
//│ 	in (fun label¹⁷ -> bind_lh_₁(incr_lh_₁(0), (fun n¹⁸ -> bind_lh_₂(mmapl_lh_₁(label¹⁷, _lh_label_Node_1¹⁶), (fun ts¹⁶ -> retURN_lh_₁([Node [LH_P2 n¹⁸ _lh_label_Node_0¹⁶] ts¹⁶]))))))
//│ def bind_lh_₁(_lh_bind_arg1⁷, _lh_bind_arg2⁸, s¹⁵) = 
//│ 	let _lh_matchIdent¹⁷ = _lh_bind_arg1⁷(s¹⁵)
//│ 	in _lh_matchIdent¹⁷(_lh_bind_arg2⁸)
//│ def bind_lh_₂(_lh_bind_arg1⁵, _lh_bind_arg2⁵, s¹¹) = 
//│ 	let _lh_matchIdent¹³ = _lh_bind_arg1⁵(s¹¹)
//│ 	in case _lh_matchIdent¹³ of {
//│ 		LH_P2 _lh_bind_LH_P2_0² _lh_bind_LH_P2_1² => _lh_bind_arg2⁵(_lh_bind_LH_P2_1², _lh_bind_LH_P2_0²)
//│ 		| _  => error⁰}
//│ def bind_lh_₃(_lh_bind_arg1⁶, _lh_bind_arg2⁶, s¹²) = 
//│ 	let _lh_matchIdent¹⁵ = _lh_bind_arg1⁶(s¹²)
//│ 	in case _lh_matchIdent¹⁵ of {
//│ 		LH_P2 _lh_bind_LH_P2_0¹ _lh_bind_LH_P2_1¹ => _lh_bind_arg2⁶(_lh_bind_LH_P2_1¹, _lh_bind_LH_P2_0¹)
//│ 		| _  => error⁰}
//│ def bind_lh_₄(_lh_bind_arg1⁴, _lh_bind_arg2⁴, s¹⁰) = 
//│ 	let _lh_matchIdent¹² = _lh_bind_arg1⁴(s¹⁰)
//│ 	in case _lh_matchIdent¹² of {
//│ 		LH_P2 _lh_bind_LH_P2_0⁰ _lh_bind_LH_P2_1⁰ => _lh_bind_arg2⁴(_lh_bind_LH_P2_1⁰, _lh_bind_LH_P2_0⁰)
//│ 		| _  => error⁰}
//│ def c_lh_₁ = 
//│ 	let _lh_label_Node_1² = [LH_N]
//│ 	in let _lh_label_Node_0² = [LH_C 'c' [LH_N]]
//│ 	in (fun label² -> bind_lh_₁(incr_lh_₁(0), (fun n³ -> bind_lh_₂(mmapl_lh_₁(label², _lh_label_Node_1²), (fun ts² -> retURN_lh_₁([Node [LH_P2 n³ _lh_label_Node_0²] ts²]))))))
//│ def c_lh_₂ = 
//│ 	let _lh_label_Node_1⁴ = [LH_N]
//│ 	in let _lh_label_Node_0⁴ = [LH_C 'c' [LH_N]]
//│ 	in (fun label⁴ -> bind_lh_₁(incr_lh_₁(0), (fun n⁵ -> bind_lh_₂(mmapl_lh_₁(label⁴, _lh_label_Node_1⁴), (fun ts⁴ -> retURN_lh_₁([Node [LH_P2 n⁵ _lh_label_Node_0⁴] ts⁴]))))))
//│ def c_lh_₃ = 
//│ 	let _lh_label_Node_1³⁴ = [LH_N]
//│ 	in let _lh_label_Node_0³⁴ = [LH_C 'c' [LH_N]]
//│ 	in (fun label³⁵ -> bind_lh_₁(incr_lh_₁(0), (fun n⁴³ -> bind_lh_₂(mmapl_lh_₁(label³⁵, _lh_label_Node_1³⁴), (fun ts³⁴ -> retURN_lh_₁([Node [LH_P2 n⁴³ _lh_label_Node_0³⁴] ts³⁴]))))))
//│ def concat_lh_₁(lss¹) = lss¹(99)
//│ def cse_lh_₁(_lh_cse_arg1¹) = findCommon_lh_₁(ltGraph_lh_₁(labelTree_lh_₁(_lh_cse_arg1¹)))
//│ def d_lh_₁ = 
//│ 	let _lh_label_Node_1³¹ = [LH_N]
//│ 	in let _lh_label_Node_0³¹ = [LH_C 'd' [LH_N]]
//│ 	in (fun label³² -> bind_lh_₁(incr_lh_₁(0), (fun n⁴⁰ -> bind_lh_₂(mmapl_lh_₁(label³², _lh_label_Node_1³¹), (fun ts³¹ -> retURN_lh_₁([Node [LH_P2 n⁴⁰ _lh_label_Node_0³¹] ts³¹]))))))
//│ def d_lh_₂ = 
//│ 	let _lh_label_Node_1²⁶ = [LH_N]
//│ 	in let _lh_label_Node_0²⁶ = [LH_C 'd' [LH_N]]
//│ 	in (fun label²⁷ -> bind_lh_₁(incr_lh_₁(0), (fun n²⁸ -> bind_lh_₂(mmapl_lh_₁(label²⁷, _lh_label_Node_1²⁶), (fun ts²⁶ -> retURN_lh_₁([Node [LH_P2 n²⁸ _lh_label_Node_0²⁶] ts²⁶]))))))
//│ def enumFromTo_lh_₁(a¹, b³) = if (a¹ <= b³) then [LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b³)] else [LH_N]
//│ def example0_lh_₁(_lh_example0_arg1¹) = a_lh_₃
//│ def example1_lh_₁(_lh_example1_arg1¹) = plus__lh_₇(a_lh_₉, a_lh_₈)
//│ def example2_lh_₁(_lh_example2_arg1¹) = plus__lh_₄(mult__lh_₂(a_lh_₅, b_lh_₄), mult__lh_₃(a_lh_₄, b_lh_₃))
//│ def example3_lh_₁(_lh_example3_arg1¹) = plus__lh_₃(mult__lh_₁(plus__lh_₁(a_lh_₂, b_lh_₁), c_lh_₁), plus__lh_₂(a_lh_₁, b_lh_₂))
//│ def example4_lh_₁(_lh_example4_arg1¹) = prod_lh_₂(scanl_lh_₁(plus__lh_₆, zerO_lh_₂(0), 
//│ 	let _lh_scanl_LH_C_1¹ = 	
//│ 		let _lh_scanl_LH_C_1² = 	
//│ 			let _lh_scanl_LH_C_1³ = 	
//│ 				let _lh_scanl_LH_C_1⁴ = (fun _lh_scanl_arg1⁵ -> (fun _lh_scanl_arg2⁵ -> [LH_N]))
//│ 				in let _lh_scanl_LH_C_0⁴ = d_lh_₂
//│ 				in (fun _lh_scanl_arg1⁴ -> (fun _lh_scanl_arg2⁴ -> scanl_lh_₁(_lh_scanl_arg1⁴, _lh_scanl_arg1⁴(_lh_scanl_arg2⁴, _lh_scanl_LH_C_0⁴), _lh_scanl_LH_C_1⁴)))
//│ 			in let _lh_scanl_LH_C_0³ = c_lh_₃
//│ 			in (fun _lh_scanl_arg1³ -> (fun _lh_scanl_arg2³ -> scanl_lh_₁(_lh_scanl_arg1³, _lh_scanl_arg1³(_lh_scanl_arg2³, _lh_scanl_LH_C_0³), _lh_scanl_LH_C_1³)))
//│ 		in let _lh_scanl_LH_C_0² = b_lh_₆
//│ 		in (fun _lh_scanl_arg1² -> (fun _lh_scanl_arg2² -> scanl_lh_₁(_lh_scanl_arg1², _lh_scanl_arg1²(_lh_scanl_arg2², _lh_scanl_LH_C_0²), _lh_scanl_LH_C_1²)))
//│ 	in let _lh_scanl_LH_C_0¹ = a_lh_₇
//│ 	in (fun _lh_scanl_arg1¹ -> (fun _lh_scanl_arg2¹ -> scanl_lh_₁(_lh_scanl_arg1¹, _lh_scanl_arg1¹(_lh_scanl_arg2¹, _lh_scanl_LH_C_0¹), _lh_scanl_LH_C_1¹)))))
//│ def example5_lh_₁(_lh_example5_arg1¹) = prod_lh_₁(scanr_lh_₁(plus__lh_₅, zerO_lh_₁(0), 
//│ 	let _lh_scanr_LH_C_1² = 	
//│ 		let _lh_scanr_LH_C_1³ = 	
//│ 			let _lh_scanr_LH_C_1⁴ = 	
//│ 				let _lh_scanr_LH_C_1⁵ = (fun _lh_scanr_arg2⁵ -> (fun _lh_scanr_arg1⁵ -> [LH_C _lh_scanr_arg2⁵ [LH_N]]))
//│ 				in let _lh_scanr_LH_C_0⁵ = d_lh_₁
//│ 				in (fun _lh_scanr_arg2⁴ -> (fun _lh_scanr_arg1⁴ -> 
//│ 					let _lh_matchIdent¹¹ = scanr_lh_₁(_lh_scanr_arg1⁴, _lh_scanr_arg2⁴, _lh_scanr_LH_C_1⁵)
//│ 					in case _lh_matchIdent¹¹ of {
//│ 						LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1⁴(_lh_scanr_LH_C_0⁵, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]
//│ 						| _  => error⁰}))
//│ 			in let _lh_scanr_LH_C_0⁴ = c_lh_₂
//│ 			in (fun _lh_scanr_arg2³ -> (fun _lh_scanr_arg1³ -> 
//│ 				let _lh_matchIdent¹⁰ = scanr_lh_₁(_lh_scanr_arg1³, _lh_scanr_arg2³, _lh_scanr_LH_C_1⁴)
//│ 				in case _lh_matchIdent¹⁰ of {
//│ 					LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1³(_lh_scanr_LH_C_0⁴, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]
//│ 					| _  => error⁰}))
//│ 		in let _lh_scanr_LH_C_0³ = b_lh_₅
//│ 		in (fun _lh_scanr_arg2² -> (fun _lh_scanr_arg1² -> 
//│ 			let _lh_matchIdent⁹ = scanr_lh_₁(_lh_scanr_arg1², _lh_scanr_arg2², _lh_scanr_LH_C_1³)
//│ 			in case _lh_matchIdent⁹ of {
//│ 				LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1²(_lh_scanr_LH_C_0³, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]
//│ 				| _  => error⁰}))
//│ 	in let _lh_scanr_LH_C_0² = a_lh_₆
//│ 	in (fun _lh_scanr_arg2¹ -> (fun _lh_scanr_arg1¹ -> 
//│ 		let _lh_matchIdent⁸ = scanr_lh_₁(_lh_scanr_arg1¹, _lh_scanr_arg2¹, _lh_scanr_LH_C_1²)
//│ 		in case _lh_matchIdent⁸ of {
//│ 			LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹ => [LH_C _lh_scanr_arg1¹(_lh_scanr_LH_C_0², _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1¹]]
//│ 			| _  => error⁰}))))
//│ def findCommon_lh_₁(_lh_findCommon_arg1¹) = 
//│ 	let sim¹ = (fun _lh_sim_arg1¹ -> (fun _lh_sim_arg2² -> _lh_sim_arg1¹(_lh_sim_arg2²)))
//│ 	in let _lh_matchIdent¹⁸ = foldr_lh_₁(sim¹, [LH_P2 id_lh_₁ [LH_N]], _lh_findCommon_arg1¹)
//│ 	in case _lh_matchIdent¹⁸ of {
//│ 		LH_P2 _lh_findCommon_LH_P2_0⁰ _lh_findCommon_LH_P2_1⁰ => _lh_findCommon_LH_P2_1⁰
//│ 		| _  => error⁰}
//│ def foldr_lh_₁(f⁶, i², ls⁹) = case ls⁹ of {
//│ 	LH_C h⁶ t⁶ => f⁶(h⁶, foldr_lh_₁(f⁶, i², t⁶))
//│ 	| LH_N  => i²}
//│ def head_lh_₁(ls⁸) = case ls⁸ of {
//│ 	LH_C h⁴ t⁴ => h⁴
//│ 	| LH_N  => error⁰}
//│ def id_lh_₁(_lh_id_arg1¹) = _lh_id_arg1¹
//│ def incr_lh_₁(_lh_incr_arg1¹) = update_lh_₁((fun x¹ -> (1 + x¹)))
//│ def labelTree_lh_₁(_lh_labelTree_arg1¹) = 
//│ 	let label¹³ = (fun _lh_label_arg1¹ -> _lh_label_arg1¹(label¹³))
//│ 	in startingWith_lh_₁(label¹³(_lh_labelTree_arg1¹), 0)
//│ def ltGraph_lh_₁(_lh_ltGraph_arg1¹) = case _lh_ltGraph_arg1¹ of {
//│ 	Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {
//│ 		LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => 
//│ 			let labelOf¹ = (fun _lh_labelOf_arg1¹ -> case _lh_labelOf_arg1¹ of {
//│ 				Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {
//│ 					LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 			in [LH_C 
//│ 				let _lh_sim_LH_P3_2² = map_lh_₄(labelOf¹, _lh_ltGraph_Node_1⁰)
//│ 				in let _lh_sim_LH_P3_1² = _lh_ltGraph_LH_P2_1⁰
//│ 				in let _lh_sim_LH_P3_0² = _lh_ltGraph_LH_P2_0⁰
//│ 				in (fun _lh_sim_arg2¹ -> case _lh_sim_arg2¹ of {
//│ 					LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => 
//│ 						let rcs¹ = map_lh_₃(_lh_sim_LH_P2_0⁰, _lh_sim_LH_P3_2²)
//│ 						in let ms¹ = 	
//│ 							let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 								LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {
//│ 									LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1², _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs¹) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t⁰)
//│ 									| _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t⁰)}
//│ 								| LH_N  => [LH_N]})
//│ 							in _lh_listcomp_fun¹(_lh_sim_LH_P2_1⁰)
//│ 						in if null_lh_₁(ms¹) then [LH_P2 _lh_sim_LH_P2_0⁰ mappend_lh_₁(
//│ 							let t¹¹ = (fun ys⁴ -> ys⁴)
//│ 							in let h¹¹ = [LH_P3 _lh_sim_LH_P3_0² _lh_sim_LH_P3_1² rcs¹]
//│ 							in (fun ys³ -> [LH_C h¹¹ mappend_lh_₁(t¹¹, ys³)]), _lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh_₁(_lh_sim_LH_P3_0², head_lh_₁(ms¹), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰]
//│ 					| _  => error⁰}) concat_lh_₁(map_lh_₅(ltGraph_lh_₁, _lh_ltGraph_Node_1⁰))]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def map_lh_₁(f⁹, ls¹²) = case ls¹² of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C f⁹(h¹⁰) map_lh_₁(f⁹, t¹⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f⁸, ls¹¹) = ls¹¹(f⁸)
//│ def map_lh_₃(f¹¹, ls¹⁴) = ls¹⁴(f¹¹)
//│ def map_lh_₄(f¹⁹, ls¹⁵) = case ls¹⁵ of {
//│ 	LH_C h² t² => 
//│ 		let t²⁵ = map_lh_₄(f¹⁹, t²)
//│ 		in let h²⁵ = f¹⁹(h²)
//│ 		in (fun f²⁰ -> [LH_C f²⁰(h²⁵) map_lh_₃(f²⁰, t²⁵)])
//│ 	| LH_N  => (fun f²¹ -> [LH_N])}
//│ def map_lh_₅(f¹⁰, ls¹³) = case ls¹³ of {
//│ 	LH_C h¹ t¹ => 
//│ 		let t¹² = map_lh_₅(f¹⁰, t¹)
//│ 		in let h¹² = f¹⁰(h¹)
//│ 		in (fun _lh_dummy⁰ -> mappend_lh_₂(h¹², concat_lh_₁(t¹²)))
//│ 	| LH_N  => (fun _lh_dummy¹ -> [LH_N])}
//│ def mappend_lh_₁(xs², ys²) = xs²(ys²)
//│ def mappend_lh_₂(xs³, ys⁵) = case xs³ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂(t⁰, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mmapl_lh_₁(_lh_mmapl_arg1¹, _lh_mmapl_arg2¹) = case _lh_mmapl_arg2¹ of {
//│ 	LH_N  => retURN_lh_₃([LH_N])
//│ 	| LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1¹(_lh_mmapl_LH_C_0⁰), (fun b² -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1¹, _lh_mmapl_LH_C_1⁰), (fun bs¹ -> retURN_lh_₂([LH_C b² bs¹])))))
//│ 	| _  => error⁰}
//│ def mult__lh_₁(_lh_mult__arg1³, _lh_mult__arg2³) = 
//│ 	let _lh_label_Node_1¹⁰ = [LH_C _lh_mult__arg1³ [LH_C _lh_mult__arg2³ [LH_N]]]
//│ 	in let _lh_label_Node_0¹⁰ = [LH_C '*' [LH_N]]
//│ 	in (fun label¹⁰ -> bind_lh_₁(incr_lh_₁(0), (fun n¹¹ -> bind_lh_₂(mmapl_lh_₁(label¹⁰, _lh_label_Node_1¹⁰), (fun ts¹⁰ -> retURN_lh_₁([Node [LH_P2 n¹¹ _lh_label_Node_0¹⁰] ts¹⁰]))))))
//│ def mult__lh_₂(_lh_mult__arg1⁵, _lh_mult__arg2⁵) = 
//│ 	let _lh_label_Node_1³⁰ = [LH_C _lh_mult__arg1⁵ [LH_C _lh_mult__arg2⁵ [LH_N]]]
//│ 	in let _lh_label_Node_0³⁰ = [LH_C '*' [LH_N]]
//│ 	in (fun label³¹ -> bind_lh_₁(incr_lh_₁(0), (fun n³² -> bind_lh_₂(mmapl_lh_₁(label³¹, _lh_label_Node_1³⁰), (fun ts³⁰ -> retURN_lh_₁([Node [LH_P2 n³² _lh_label_Node_0³⁰] ts³⁰]))))))
//│ def mult__lh_₃(_lh_mult__arg1⁴, _lh_mult__arg2⁴) = 
//│ 	let _lh_label_Node_1¹² = [LH_C _lh_mult__arg1⁴ [LH_C _lh_mult__arg2⁴ [LH_N]]]
//│ 	in let _lh_label_Node_0¹² = [LH_C '*' [LH_N]]
//│ 	in (fun label¹² -> bind_lh_₁(incr_lh_₁(0), (fun n¹³ -> bind_lh_₂(mmapl_lh_₁(label¹², _lh_label_Node_1¹²), (fun ts¹² -> retURN_lh_₁([Node [LH_P2 n¹³ _lh_label_Node_0¹²] ts¹²]))))))
//│ def newlyDefined_lh_₁(_lh_newlyDefined_arg1¹, _lh_newlyDefined_arg2¹, _lh_newlyDefined_arg3¹, _lh_newlyDefined_arg4¹) = if polyEq⁰(_lh_newlyDefined_arg1¹, _lh_newlyDefined_arg4¹) then _lh_newlyDefined_arg2¹ else _lh_newlyDefined_arg3¹(_lh_newlyDefined_arg4¹)
//│ def null_lh_₁(_lh_null_arg1¹) = case _lh_null_arg1¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def plus__lh_₁(_lh_plus__arg1⁸, _lh_plus__arg2⁸) = 
//│ 	let _lh_label_Node_1¹⁵ = [LH_C _lh_plus__arg1⁸ [LH_C _lh_plus__arg2⁸ [LH_N]]]
//│ 	in let _lh_label_Node_0¹⁵ = [LH_C '+' [LH_N]]
//│ 	in (fun label¹⁶ -> bind_lh_₁(incr_lh_₁(0), (fun n¹⁷ -> bind_lh_₂(mmapl_lh_₁(label¹⁶, _lh_label_Node_1¹⁵), (fun ts¹⁵ -> retURN_lh_₁([Node [LH_P2 n¹⁷ _lh_label_Node_0¹⁵] ts¹⁵]))))))
//│ def plus__lh_₂(_lh_plus__arg1¹¹, _lh_plus__arg2¹¹) = 
//│ 	let _lh_label_Node_1²⁷ = [LH_C _lh_plus__arg1¹¹ [LH_C _lh_plus__arg2¹¹ [LH_N]]]
//│ 	in let _lh_label_Node_0²⁷ = [LH_C '+' [LH_N]]
//│ 	in (fun label²⁸ -> bind_lh_₁(incr_lh_₁(0), (fun n²⁹ -> bind_lh_₂(mmapl_lh_₁(label²⁸, _lh_label_Node_1²⁷), (fun ts²⁷ -> retURN_lh_₁([Node [LH_P2 n²⁹ _lh_label_Node_0²⁷] ts²⁷]))))))
//│ def plus__lh_₃(_lh_plus__arg1⁹, _lh_plus__arg2⁹) = 
//│ 	let _lh_label_Node_1²² = [LH_C _lh_plus__arg1⁹ [LH_C _lh_plus__arg2⁹ [LH_N]]]
//│ 	in let _lh_label_Node_0²² = [LH_C '+' [LH_N]]
//│ 	in (fun label²³ -> bind_lh_₁(incr_lh_₁(0), (fun n²⁴ -> bind_lh_₂(mmapl_lh_₁(label²³, _lh_label_Node_1²²), (fun ts²² -> retURN_lh_₁([Node [LH_P2 n²⁴ _lh_label_Node_0²²] ts²²]))))))
//│ def plus__lh_₄(_lh_plus__arg1¹², _lh_plus__arg2¹²) = 
//│ 	let _lh_label_Node_1²⁹ = [LH_C _lh_plus__arg1¹² [LH_C _lh_plus__arg2¹² [LH_N]]]
//│ 	in let _lh_label_Node_0²⁹ = [LH_C '+' [LH_N]]
//│ 	in (fun label³⁰ -> bind_lh_₁(incr_lh_₁(0), (fun n³¹ -> bind_lh_₂(mmapl_lh_₁(label³⁰, _lh_label_Node_1²⁹), (fun ts²⁹ -> retURN_lh_₁([Node [LH_P2 n³¹ _lh_label_Node_0²⁹] ts²⁹]))))))
//│ def plus__lh_₅(_lh_plus__arg1¹⁰, _lh_plus__arg2¹⁰) = 
//│ 	let _lh_label_Node_1²⁴ = [LH_C _lh_plus__arg1¹⁰ [LH_C _lh_plus__arg2¹⁰ [LH_N]]]
//│ 	in let _lh_label_Node_0²⁴ = [LH_C '+' [LH_N]]
//│ 	in (fun label²⁵ -> bind_lh_₁(incr_lh_₁(0), (fun n²⁶ -> bind_lh_₂(mmapl_lh_₁(label²⁵, _lh_label_Node_1²⁴), (fun ts²⁴ -> retURN_lh_₁([Node [LH_P2 n²⁶ _lh_label_Node_0²⁴] ts²⁴]))))))
//│ def plus__lh_₆(_lh_plus__arg1⁷, _lh_plus__arg2⁷) = 
//│ 	let _lh_label_Node_1¹ = [LH_C _lh_plus__arg1⁷ [LH_C _lh_plus__arg2⁷ [LH_N]]]
//│ 	in let _lh_label_Node_0¹ = [LH_C '+' [LH_N]]
//│ 	in (fun label¹ -> bind_lh_₁(incr_lh_₁(0), (fun n² -> bind_lh_₂(mmapl_lh_₁(label¹, _lh_label_Node_1¹), (fun ts¹ -> retURN_lh_₁([Node [LH_P2 n² _lh_label_Node_0¹] ts¹]))))))
//│ def plus__lh_₇(_lh_plus__arg1¹³, _lh_plus__arg2¹³) = 
//│ 	let _lh_label_Node_1³³ = [LH_C _lh_plus__arg1¹³ [LH_C _lh_plus__arg2¹³ [LH_N]]]
//│ 	in let _lh_label_Node_0³³ = [LH_C '+' [LH_N]]
//│ 	in (fun label³⁴ -> bind_lh_₁(incr_lh_₁(0), (fun n⁴² -> bind_lh_₂(mmapl_lh_₁(label³⁴, _lh_label_Node_1³³), (fun ts³³ -> retURN_lh_₁([Node [LH_P2 n⁴² _lh_label_Node_0³³] ts³³]))))))
//│ def prod_lh_₁(_lh_prod_arg1²) = 
//│ 	let _lh_label_Node_1⁵ = _lh_prod_arg1²
//│ 	in let _lh_label_Node_0⁵ = [LH_C 'X' [LH_N]]
//│ 	in (fun label⁵ -> bind_lh_₁(incr_lh_₁(0), (fun n⁶ -> bind_lh_₂(mmapl_lh_₁(label⁵, _lh_label_Node_1⁵), (fun ts⁵ -> retURN_lh_₁([Node [LH_P2 n⁶ _lh_label_Node_0⁵] ts⁵]))))))
//│ def prod_lh_₂(_lh_prod_arg1³) = 
//│ 	let _lh_label_Node_1²³ = _lh_prod_arg1³
//│ 	in let _lh_label_Node_0²³ = [LH_C 'X' [LH_N]]
//│ 	in (fun label²⁴ -> bind_lh_₁(incr_lh_₁(0), (fun n²⁵ -> bind_lh_₂(mmapl_lh_₁(label²⁴, _lh_label_Node_1²³), (fun ts²³ -> retURN_lh_₁([Node [LH_P2 n²⁵ _lh_label_Node_0²³] ts²³]))))))
//│ def retURN_lh_₁(_lh_retURN_arg1⁴, s⁹) = [LH_P2 s⁹ _lh_retURN_arg1⁴]
//│ def retURN_lh_₂(_lh_retURN_arg1³, s⁸) = [LH_P2 s⁸ _lh_retURN_arg1³]
//│ def retURN_lh_₃(_lh_retURN_arg1⁵, s¹³) = [LH_P2 s¹³ _lh_retURN_arg1⁵]
//│ def scanl_lh_₁(_lh_scanl_arg1⁶, _lh_scanl_arg2⁶, _lh_scanl_arg3¹) = [LH_C _lh_scanl_arg2⁶ 
//│ 	let _lh_matchIdent¹⁶ = _lh_scanl_arg3¹
//│ 	in _lh_matchIdent¹⁶(_lh_scanl_arg1⁶, _lh_scanl_arg2⁶)]
//│ def scanr_lh_₁(_lh_scanr_arg1⁶, _lh_scanr_arg2⁶, _lh_scanr_arg3¹) = _lh_scanr_arg3¹(_lh_scanr_arg2⁶, _lh_scanr_arg1⁶)
//│ def startingWith_lh_₁(_lh_startingWith_arg1¹, _lh_startingWith_arg2¹) = 
//│ 	let _lh_matchIdent¹⁴ = _lh_startingWith_arg1¹(_lh_startingWith_arg2¹)
//│ 	in case _lh_matchIdent¹⁴ of {
//│ 		LH_P2 _lh_startingWith_LH_P2_0⁰ _lh_startingWith_LH_P2_1⁰ => _lh_startingWith_LH_P2_1⁰
//│ 		| _  => error⁰}
//│ def take_lh_₁(n¹⁵, ls¹⁰) = if (n¹⁵ > 0) then ls¹⁰(n¹⁵) else (fun f⁷ -> [LH_N])
//│ def testCse_nofib_lh_₁(_lh_testCse_nofib_arg1¹) = map_lh_₁((fun i³ -> map_lh_₂(cse_lh_₁, take_lh_₁((i³ % 6), 
//│ 	let t¹³ = 	
//│ 		let t¹⁵ = 	
//│ 			let t¹⁷ = 	
//│ 				let t¹⁹ = 	
//│ 					let t²¹ = 	
//│ 						let t²³ = (fun n³⁹ -> (fun f¹⁸ -> [LH_N]))
//│ 						in let h²³ = example5_lh_₁(0)
//│ 						in (fun n³⁸ -> 
//│ 							let t²⁴ = take_lh_₁((n³⁸ - 1), t²³)
//│ 							in let h²⁴ = h²³
//│ 							in (fun f¹⁷ -> [LH_C f¹⁷(h²⁴) map_lh_₂(f¹⁷, t²⁴)]))
//│ 					in let h²¹ = example4_lh_₁(0)
//│ 					in (fun n³⁷ -> 
//│ 						let t²² = take_lh_₁((n³⁷ - 1), t²¹)
//│ 						in let h²² = h²¹
//│ 						in (fun f¹⁶ -> [LH_C f¹⁶(h²²) map_lh_₂(f¹⁶, t²²)]))
//│ 				in let h¹⁹ = example3_lh_₁(0)
//│ 				in (fun n³⁶ -> 
//│ 					let t²⁰ = take_lh_₁((n³⁶ - 1), t¹⁹)
//│ 					in let h²⁰ = h¹⁹
//│ 					in (fun f¹⁵ -> [LH_C f¹⁵(h²⁰) map_lh_₂(f¹⁵, t²⁰)]))
//│ 			in let h¹⁷ = example2_lh_₁(0)
//│ 			in (fun n³⁵ -> 
//│ 				let t¹⁸ = take_lh_₁((n³⁵ - 1), t¹⁷)
//│ 				in let h¹⁸ = h¹⁷
//│ 				in (fun f¹⁴ -> [LH_C f¹⁴(h¹⁸) map_lh_₂(f¹⁴, t¹⁸)]))
//│ 		in let h¹⁵ = example1_lh_₁(0)
//│ 		in (fun n³⁴ -> 
//│ 			let t¹⁶ = take_lh_₁((n³⁴ - 1), t¹⁵)
//│ 			in let h¹⁶ = h¹⁵
//│ 			in (fun f¹³ -> [LH_C f¹³(h¹⁶) map_lh_₂(f¹³, t¹⁶)]))
//│ 	in let h¹³ = example0_lh_₁(0)
//│ 	in (fun n³³ -> 
//│ 		let t¹⁴ = take_lh_₁((n³³ - 1), t¹³)
//│ 		in let h¹⁴ = h¹³
//│ 		in (fun f¹² -> [LH_C f¹²(h¹⁴) map_lh_₂(f¹², t¹⁴)]))))), primId⁰(enumFromTo_lh_₁(1, _lh_testCse_nofib_arg1¹)))
//│ def update_lh_₁(_lh_update_arg1¹, s¹⁴) = 
//│ 	let _lh_bind_LH_P2_1⁴ = s¹⁴
//│ 	in let _lh_bind_LH_P2_0⁴ = _lh_update_arg1¹(s¹⁴)
//│ 	in (fun _lh_bind_arg2⁷ -> _lh_bind_arg2⁷(_lh_bind_LH_P2_1⁴, _lh_bind_LH_P2_0⁴))
//│ def zerO_lh_₁(_lh_zerO_arg1²) = case _lh_zerO_arg1² of {
//│ 	0  => 
//│ 		let _lh_label_Node_1¹⁷ = [LH_N]
//│ 		in let _lh_label_Node_0¹⁷ = [LH_C '0' [LH_N]]
//│ 		in (fun label¹⁸ -> bind_lh_₁(incr_lh_₁(0), (fun n¹⁹ -> bind_lh_₂(mmapl_lh_₁(label¹⁸, _lh_label_Node_1¹⁷), (fun ts¹⁷ -> retURN_lh_₁([Node [LH_P2 n¹⁹ _lh_label_Node_0¹⁷] ts¹⁷]))))))
//│ 	| _  => error⁰}
//│ def zerO_lh_₂(_lh_zerO_arg1³) = case _lh_zerO_arg1³ of {
//│ 	0  => 
//│ 		let _lh_label_Node_1²⁸ = [LH_N]
//│ 		in let _lh_label_Node_0²⁸ = [LH_C '0' [LH_N]]
//│ 		in (fun label²⁹ -> bind_lh_₁(incr_lh_₁(0), (fun n³⁰ -> bind_lh_₂(mmapl_lh_₁(label²⁹, _lh_label_Node_1²⁸), (fun ts²⁸ -> retURN_lh_₁([Node [LH_P2 n³⁰ _lh_label_Node_0²⁸] ts²⁸]))))))
//│ 	| _  => error⁰}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ take_lh_₁, map_lh_₃, mappend_lh_₁, scanl_lh_₁, map_lh_₂, bind_lh_₁, concat_lh_₁, findCommon_lh_₁, labelTree_lh_₁, scanr_lh_₁
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ plus__lh_₆ -> 0
//│ example5_lh_₁ -> 1
//│ c_lh_₁ -> 0
//│ c_lh_₂ -> 0
//│ a_lh_₉ -> 0
//│ a_lh_₁ -> 0
//│ b_lh_₂ -> 0
//│ testCse_nofib_lh_₁ -> 1
//│ a_lh_₆ -> 0
//│ ltGraph_lh_₁ -> 0
//│ prod_lh_₁ -> 1
//│ a_lh_₈ -> 0
//│ a_lh_₅ -> 0
//│ b_lh_₁ -> 0
//│ a_lh_₃ -> 0
//│ mult__lh_₁ -> 2
//│ b_lh_₅ -> 0
//│ mult__lh_₃ -> 2
//│ a_lh_₄ -> 0
//│ plus__lh_₁ -> 2
//│ example4_lh_₁ -> 1
//│ b_lh_₆ -> 0
//│ zerO_lh_₁ -> 1
//│ b_lh_₄ -> 0
//│ a_lh_₂ -> 0
//│ b_lh_₃ -> 0
//│ plus__lh_₃ -> 2
//│ prod_lh_₂ -> 1
//│ update_lh_₁ -> 1
//│ plus__lh_₅ -> 0
//│ map_lh_₅ -> 3
//│ a_lh_₇ -> 0
//│ zerO_lh_₂ -> 1
//│ d_lh_₂ -> 0
//│ plus__lh_₂ -> 2
//│ plus__lh_₄ -> 2
//│ mult__lh_₂ -> 2
//│ d_lh_₁ -> 0
//│ map_lh_₄ -> 2
//│ plus__lh_₇ -> 2
//│ c_lh_₃ -> 0
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ testCse_nofib_lh_₁(primId⁰(1000))
//│ def a_lh_₁ = 
//│ 	let _lh_label_Node_1¹² = [LH_N]
//│ 	in let _lh_label_Node_0¹² = [LH_C 'a' [LH_N]]
//│ 	in (fun label¹⁴ -> (fun s¹⁶ -> 
//│ 		let _lh_matchIdent²⁰ = incr_lh_₁(0, s¹⁶)
//│ 		in _lh_matchIdent²⁰((fun n¹² -> bind_lh_₂(mmapl_lh_₁(label¹⁴, _lh_label_Node_1¹²), (fun ts¹² -> retURN_lh_₁([Node [LH_P2 n¹² _lh_label_Node_0¹²] ts¹²])))))))
//│ def a_lh_₂ = 
//│ 	let _lh_label_Node_1¹⁸ = [LH_N]
//│ 	in let _lh_label_Node_0¹⁸ = [LH_C 'a' [LH_N]]
//│ 	in (fun label²⁰ -> (fun s²³ -> 
//│ 		let _lh_matchIdent³² = incr_lh_₁(0, s²³)
//│ 		in _lh_matchIdent³²((fun n¹⁹ -> bind_lh_₂(mmapl_lh_₁(label²⁰, _lh_label_Node_1¹⁸), (fun ts¹⁸ -> retURN_lh_₁([Node [LH_P2 n¹⁹ _lh_label_Node_0¹⁸] ts¹⁸])))))))
//│ def a_lh_₃ = 
//│ 	let _lh_label_Node_1⁸ = [LH_N]
//│ 	in let _lh_label_Node_0⁸ = [LH_C 'a' [LH_N]]
//│ 	in (fun label⁹ -> (fun s¹² -> 
//│ 		let _lh_matchIdent¹⁵ = incr_lh_₁(0, s¹²)
//│ 		in _lh_matchIdent¹⁵((fun n⁸ -> bind_lh_₂(mmapl_lh_₁(label⁹, _lh_label_Node_1⁸), (fun ts⁸ -> retURN_lh_₁([Node [LH_P2 n⁸ _lh_label_Node_0⁸] ts⁸])))))))
//│ def a_lh_₄ = 
//│ 	let _lh_label_Node_1¹³ = [LH_N]
//│ 	in let _lh_label_Node_0¹³ = [LH_C 'a' [LH_N]]
//│ 	in (fun label¹⁵ -> (fun s¹⁸ -> 
//│ 		let _lh_matchIdent²² = incr_lh_₁(0, s¹⁸)
//│ 		in _lh_matchIdent²²((fun n¹⁴ -> bind_lh_₂(mmapl_lh_₁(label¹⁵, _lh_label_Node_1¹³), (fun ts¹³ -> retURN_lh_₁([Node [LH_P2 n¹⁴ _lh_label_Node_0¹³] ts¹³])))))))
//│ def a_lh_₅ = 
//│ 	let _lh_label_Node_1⁶ = [LH_N]
//│ 	in let _lh_label_Node_0⁶ = [LH_C 'a' [LH_N]]
//│ 	in (fun label⁷ -> (fun s¹⁰ -> 
//│ 		let _lh_matchIdent¹³ = incr_lh_₁(0, s¹⁰)
//│ 		in _lh_matchIdent¹³((fun n⁶ -> bind_lh_₂(mmapl_lh_₁(label⁷, _lh_label_Node_1⁶), (fun ts⁶ -> retURN_lh_₁([Node [LH_P2 n⁶ _lh_label_Node_0⁶] ts⁶])))))))
//│ def a_lh_₆ = 
//│ 	let _lh_label_Node_1³¹ = [LH_N]
//│ 	in let _lh_label_Node_0³¹ = [LH_C 'a' [LH_N]]
//│ 	in (fun label³³ -> (fun s³⁸ -> 
//│ 		let _lh_matchIdent⁴⁵ = incr_lh_₁(0, s³⁸)
//│ 		in _lh_matchIdent⁴⁵((fun n³⁹ -> bind_lh_₂(mmapl_lh_₁(label³³, _lh_label_Node_1³¹), (fun ts³¹ -> retURN_lh_₁([Node [LH_P2 n³⁹ _lh_label_Node_0³¹] ts³¹])))))))
//│ def a_lh_₇ = 
//│ 	let _lh_label_Node_1²⁴ = [LH_N]
//│ 	in let _lh_label_Node_0²⁴ = [LH_C 'a' [LH_N]]
//│ 	in (fun label²⁶ -> (fun s³¹ -> 
//│ 		let _lh_matchIdent³⁸ = incr_lh_₁(0, s³¹)
//│ 		in _lh_matchIdent³⁸((fun n²⁵ -> bind_lh_₂(mmapl_lh_₁(label²⁶, _lh_label_Node_1²⁴), (fun ts²⁴ -> retURN_lh_₁([Node [LH_P2 n²⁵ _lh_label_Node_0²⁴] ts²⁴])))))))
//│ def a_lh_₈ = 
//│ 	let _lh_label_Node_1⁵ = [LH_N]
//│ 	in let _lh_label_Node_0⁵ = [LH_C 'a' [LH_N]]
//│ 	in (fun label⁶ -> (fun s⁹ -> 
//│ 		let _lh_matchIdent¹² = incr_lh_₁(0, s⁹)
//│ 		in _lh_matchIdent¹²((fun n⁵ -> bind_lh_₂(mmapl_lh_₁(label⁶, _lh_label_Node_1⁵), (fun ts⁵ -> retURN_lh_₁([Node [LH_P2 n⁵ _lh_label_Node_0⁵] ts⁵])))))))
//│ def a_lh_₉ = 
//│ 	let _lh_label_Node_1² = [LH_N]
//│ 	in let _lh_label_Node_0² = [LH_C 'a' [LH_N]]
//│ 	in (fun label² -> (fun s⁴ -> 
//│ 		let _lh_matchIdent⁶ = incr_lh_₁(0, s⁴)
//│ 		in _lh_matchIdent⁶((fun n² -> bind_lh_₂(mmapl_lh_₁(label², _lh_label_Node_1²), (fun ts² -> retURN_lh_₁([Node [LH_P2 n² _lh_label_Node_0²] ts²])))))))
//│ def b_lh_₁ = 
//│ 	let _lh_label_Node_1⁷ = [LH_N]
//│ 	in let _lh_label_Node_0⁷ = [LH_C 'b' [LH_N]]
//│ 	in (fun label⁸ -> (fun s¹¹ -> 
//│ 		let _lh_matchIdent¹⁴ = incr_lh_₁(0, s¹¹)
//│ 		in _lh_matchIdent¹⁴((fun n⁷ -> bind_lh_₂(mmapl_lh_₁(label⁸, _lh_label_Node_1⁷), (fun ts⁷ -> retURN_lh_₁([Node [LH_P2 n⁷ _lh_label_Node_0⁷] ts⁷])))))))
//│ def b_lh_₂ = 
//│ 	let _lh_label_Node_1²⁰ = [LH_N]
//│ 	in let _lh_label_Node_0²⁰ = [LH_C 'b' [LH_N]]
//│ 	in (fun label²² -> (fun s²⁵ -> 
//│ 		let _lh_matchIdent³⁴ = incr_lh_₁(0, s²⁵)
//│ 		in _lh_matchIdent³⁴((fun n²¹ -> bind_lh_₂(mmapl_lh_₁(label²², _lh_label_Node_1²⁰), (fun ts²⁰ -> retURN_lh_₁([Node [LH_P2 n²¹ _lh_label_Node_0²⁰] ts²⁰])))))))
//│ def b_lh_₃ = 
//│ 	let _lh_label_Node_1¹⁹ = [LH_N]
//│ 	in let _lh_label_Node_0¹⁹ = [LH_C 'b' [LH_N]]
//│ 	in (fun label²¹ -> (fun s²⁴ -> 
//│ 		let _lh_matchIdent³³ = incr_lh_₁(0, s²⁴)
//│ 		in _lh_matchIdent³³((fun n²⁰ -> bind_lh_₂(mmapl_lh_₁(label²¹, _lh_label_Node_1¹⁹), (fun ts¹⁹ -> retURN_lh_₁([Node [LH_P2 n²⁰ _lh_label_Node_0¹⁹] ts¹⁹])))))))
//│ def b_lh_₄ = 
//│ 	let _lh_label_Node_1¹⁷ = [LH_N]
//│ 	in let _lh_label_Node_0¹⁷ = [LH_C 'b' [LH_N]]
//│ 	in (fun label¹⁹ -> (fun s²² -> 
//│ 		let _lh_matchIdent³¹ = incr_lh_₁(0, s²²)
//│ 		in _lh_matchIdent³¹((fun n¹⁸ -> bind_lh_₂(mmapl_lh_₁(label¹⁹, _lh_label_Node_1¹⁷), (fun ts¹⁷ -> retURN_lh_₁([Node [LH_P2 n¹⁸ _lh_label_Node_0¹⁷] ts¹⁷])))))))
//│ def b_lh_₅ = 
//│ 	let _lh_label_Node_1¹⁰ = [LH_N]
//│ 	in let _lh_label_Node_0¹⁰ = [LH_C 'b' [LH_N]]
//│ 	in (fun label¹¹ -> (fun s¹⁴ -> 
//│ 		let _lh_matchIdent¹⁷ = incr_lh_₁(0, s¹⁴)
//│ 		in _lh_matchIdent¹⁷((fun n¹⁰ -> bind_lh_₂(mmapl_lh_₁(label¹¹, _lh_label_Node_1¹⁰), (fun ts¹⁰ -> retURN_lh_₁([Node [LH_P2 n¹⁰ _lh_label_Node_0¹⁰] ts¹⁰])))))))
//│ def b_lh_₆ = 
//│ 	let _lh_label_Node_1¹⁵ = [LH_N]
//│ 	in let _lh_label_Node_0¹⁵ = [LH_C 'b' [LH_N]]
//│ 	in (fun label¹⁷ -> (fun s²⁰ -> 
//│ 		let _lh_matchIdent²⁹ = incr_lh_₁(0, s²⁰)
//│ 		in _lh_matchIdent²⁹((fun n¹⁶ -> bind_lh_₂(mmapl_lh_₁(label¹⁷, _lh_label_Node_1¹⁵), (fun ts¹⁵ -> retURN_lh_₁([Node [LH_P2 n¹⁶ _lh_label_Node_0¹⁵] ts¹⁵])))))))
//│ def bind_lh_₁(_lh_bind_arg1³, _lh_bind_arg2⁴, s³⁹) = 
//│ 	let _lh_matchIdent⁴⁷ = _lh_bind_arg1³(s³⁹)
//│ 	in _lh_matchIdent⁴⁷(_lh_bind_arg2⁴)
//│ def bind_lh_₂(_lh_bind_arg1¹, _lh_bind_arg2¹, s⁸) = 
//│ 	let _lh_matchIdent¹¹ = _lh_bind_arg1¹(s⁸)
//│ 	in case _lh_matchIdent¹¹ of {
//│ 		LH_P2 _lh_bind_LH_P2_0¹ _lh_bind_LH_P2_1¹ => _lh_bind_arg2¹(_lh_bind_LH_P2_1¹, _lh_bind_LH_P2_0¹)
//│ 		| _  => error⁰}
//│ def bind_lh_₃(_lh_bind_arg1², _lh_bind_arg2², s¹⁷) = 
//│ 	let _lh_matchIdent²¹ = _lh_bind_arg1²(s¹⁷)
//│ 	in case _lh_matchIdent²¹ of {
//│ 		LH_P2 _lh_bind_LH_P2_0² _lh_bind_LH_P2_1² => _lh_bind_arg2²(_lh_bind_LH_P2_1², _lh_bind_LH_P2_0²)
//│ 		| _  => error⁰}
//│ def bind_lh_₄(_lh_bind_arg1⁰, _lh_bind_arg2⁰, s⁵) = 
//│ 	let _lh_matchIdent⁸ = _lh_bind_arg1⁰(s⁵)
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_P2 _lh_bind_LH_P2_0⁰ _lh_bind_LH_P2_1⁰ => _lh_bind_arg2⁰(_lh_bind_LH_P2_1⁰, _lh_bind_LH_P2_0⁰)
//│ 		| _  => error⁰}
//│ def c_lh_₁ = 
//│ 	let _lh_label_Node_1¹ = [LH_N]
//│ 	in let _lh_label_Node_0¹ = [LH_C 'c' [LH_N]]
//│ 	in (fun label¹ -> (fun s¹ -> 
//│ 		let _lh_matchIdent⁵ = incr_lh_₁(0, s¹)
//│ 		in _lh_matchIdent⁵((fun n¹ -> bind_lh_₂(mmapl_lh_₁(label¹, _lh_label_Node_1¹), (fun ts¹ -> retURN_lh_₁([Node [LH_P2 n¹ _lh_label_Node_0¹] ts¹])))))))
//│ def c_lh_₂ = 
//│ 	let _lh_label_Node_1³ = [LH_N]
//│ 	in let _lh_label_Node_0³ = [LH_C 'c' [LH_N]]
//│ 	in (fun label⁴ -> (fun s⁶ -> 
//│ 		let _lh_matchIdent⁹ = incr_lh_₁(0, s⁶)
//│ 		in _lh_matchIdent⁹((fun n³ -> bind_lh_₂(mmapl_lh_₁(label⁴, _lh_label_Node_1³), (fun ts³ -> retURN_lh_₁([Node [LH_P2 n³ _lh_label_Node_0³] ts³])))))))
//│ def c_lh_₃ = 
//│ 	let _lh_label_Node_1³³ = [LH_N]
//│ 	in let _lh_label_Node_0³³ = [LH_C 'c' [LH_N]]
//│ 	in (fun label³⁵ -> (fun s⁴¹ -> 
//│ 		let _lh_matchIdent⁵⁰ = incr_lh_₁(0, s⁴¹)
//│ 		in _lh_matchIdent⁵⁰((fun n⁴¹ -> bind_lh_₂(mmapl_lh_₁(label³⁵, _lh_label_Node_1³³), (fun ts³³ -> retURN_lh_₁([Node [LH_P2 n⁴¹ _lh_label_Node_0³³] ts³³])))))))
//│ def concat_lh_₁(lss⁰) = lss⁰(99)
//│ def cse_lh_₁(_lh_cse_arg1⁰) = 
//│ 	let sim⁰ = (fun _lh_sim_arg1⁰ -> (fun _lh_sim_arg2⁰ -> _lh_sim_arg1⁰(_lh_sim_arg2⁰)))
//│ 	in let _lh_matchIdent⁷ = foldr_lh_₁(sim⁰, [LH_P2 id_lh_₁ [LH_N]], ltGraph_lh_₁(
//│ 		let label³ = (fun _lh_label_arg1⁰ -> _lh_label_arg1⁰(label³))
//│ 		in startingWith_lh_₁(label³(_lh_cse_arg1⁰), 0)))
//│ 	in case _lh_matchIdent⁷ of {
//│ 		LH_P2 _lh_findCommon_LH_P2_0⁰ _lh_findCommon_LH_P2_1⁰ => _lh_findCommon_LH_P2_1⁰
//│ 		| _  => error⁰}
//│ def d_lh_₁ = 
//│ 	let _lh_label_Node_1³⁰ = [LH_N]
//│ 	in let _lh_label_Node_0³⁰ = [LH_C 'd' [LH_N]]
//│ 	in (fun label³² -> (fun s³⁷ -> 
//│ 		let _lh_matchIdent⁴⁴ = incr_lh_₁(0, s³⁷)
//│ 		in _lh_matchIdent⁴⁴((fun n³⁸ -> bind_lh_₂(mmapl_lh_₁(label³², _lh_label_Node_1³⁰), (fun ts³⁰ -> retURN_lh_₁([Node [LH_P2 n³⁸ _lh_label_Node_0³⁰] ts³⁰])))))))
//│ def d_lh_₂ = 
//│ 	let _lh_label_Node_1²⁵ = [LH_N]
//│ 	in let _lh_label_Node_0²⁵ = [LH_C 'd' [LH_N]]
//│ 	in (fun label²⁷ -> (fun s³² -> 
//│ 		let _lh_matchIdent³⁹ = incr_lh_₁(0, s³²)
//│ 		in _lh_matchIdent³⁹((fun n²⁶ -> bind_lh_₂(mmapl_lh_₁(label²⁷, _lh_label_Node_1²⁵), (fun ts²⁵ -> retURN_lh_₁([Node [LH_P2 n²⁶ _lh_label_Node_0²⁵] ts²⁵])))))))
//│ def enumFromTo_lh_₁(a⁰, b¹) = if (a⁰ <= b¹) then [LH_C a⁰ enumFromTo_lh_₁((a⁰ + 1), b¹)] else [LH_N]
//│ def example0_lh_₁(_lh_example0_arg1⁰) = a_lh_₃
//│ def example1_lh_₁(_lh_example1_arg1⁰) = plus__lh_₇(a_lh_₉, a_lh_₈)
//│ def example2_lh_₁(_lh_example2_arg1⁰) = plus__lh_₄(mult__lh_₂(a_lh_₅, b_lh_₄), mult__lh_₃(a_lh_₄, b_lh_₃))
//│ def example3_lh_₁(_lh_example3_arg1⁰) = plus__lh_₃(mult__lh_₁(plus__lh_₁(a_lh_₂, b_lh_₁), c_lh_₁), plus__lh_₂(a_lh_₁, b_lh_₂))
//│ def example4_lh_₁(_lh_example4_arg1⁰) = prod_lh_₂([LH_C zerO_lh_₂(0) 
//│ 	let _lh_matchIdent²⁴ = 	
//│ 		let _lh_scanl_LH_C_1⁰ = 	
//│ 			let _lh_scanl_LH_C_1¹ = 	
//│ 				let _lh_scanl_LH_C_1² = 	
//│ 					let _lh_scanl_LH_C_1³ = (fun _lh_scanl_arg1⁰ -> (fun _lh_scanl_arg2⁰ -> [LH_N]))
//│ 					in let _lh_scanl_LH_C_0⁰ = d_lh_₂
//│ 					in (fun _lh_scanl_arg1¹ -> (fun _lh_scanl_arg2¹ -> [LH_C _lh_scanl_arg1¹(_lh_scanl_arg2¹, _lh_scanl_LH_C_0⁰) 
//│ 						let _lh_matchIdent²⁵ = _lh_scanl_LH_C_1³
//│ 						in _lh_matchIdent²⁵(_lh_scanl_arg1¹, _lh_scanl_arg1¹(_lh_scanl_arg2¹, _lh_scanl_LH_C_0⁰))]))
//│ 				in let _lh_scanl_LH_C_0¹ = c_lh_₃
//│ 				in (fun _lh_scanl_arg1² -> (fun _lh_scanl_arg2² -> [LH_C _lh_scanl_arg1²(_lh_scanl_arg2², _lh_scanl_LH_C_0¹) 
//│ 					let _lh_matchIdent²⁶ = _lh_scanl_LH_C_1²
//│ 					in _lh_matchIdent²⁶(_lh_scanl_arg1², _lh_scanl_arg1²(_lh_scanl_arg2², _lh_scanl_LH_C_0¹))]))
//│ 			in let _lh_scanl_LH_C_0² = b_lh_₆
//│ 			in (fun _lh_scanl_arg1³ -> (fun _lh_scanl_arg2³ -> [LH_C _lh_scanl_arg1³(_lh_scanl_arg2³, _lh_scanl_LH_C_0²) 
//│ 				let _lh_matchIdent²⁷ = _lh_scanl_LH_C_1¹
//│ 				in _lh_matchIdent²⁷(_lh_scanl_arg1³, _lh_scanl_arg1³(_lh_scanl_arg2³, _lh_scanl_LH_C_0²))]))
//│ 		in let _lh_scanl_LH_C_0³ = a_lh_₇
//│ 		in (fun _lh_scanl_arg1⁴ -> (fun _lh_scanl_arg2⁴ -> [LH_C _lh_scanl_arg1⁴(_lh_scanl_arg2⁴, _lh_scanl_LH_C_0³) 
//│ 			let _lh_matchIdent²⁸ = _lh_scanl_LH_C_1⁰
//│ 			in _lh_matchIdent²⁸(_lh_scanl_arg1⁴, _lh_scanl_arg1⁴(_lh_scanl_arg2⁴, _lh_scanl_LH_C_0³))]))
//│ 	in _lh_matchIdent²⁴(plus__lh_₆, zerO_lh_₂(0))])
//│ def example5_lh_₁(_lh_example5_arg1⁰) = prod_lh_₁(
//│ 	let _lh_scanr_LH_C_1⁰ = 	
//│ 		let _lh_scanr_LH_C_1¹ = 	
//│ 			let _lh_scanr_LH_C_1² = 	
//│ 				let _lh_scanr_LH_C_1³ = (fun _lh_scanr_arg2⁰ -> (fun _lh_scanr_arg1⁰ -> [LH_C _lh_scanr_arg2⁰ [LH_N]]))
//│ 				in let _lh_scanr_LH_C_0⁰ = d_lh_₁
//│ 				in (fun _lh_scanr_arg2¹ -> (fun _lh_scanr_arg1¹ -> 
//│ 					let _lh_matchIdent¹ = _lh_scanr_LH_C_1³(_lh_scanr_arg2¹, _lh_scanr_arg1¹)
//│ 					in case _lh_matchIdent¹ of {
//│ 						LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1⁴ => [LH_C _lh_scanr_arg1¹(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1⁴]]
//│ 						| _  => error⁰}))
//│ 			in let _lh_scanr_LH_C_0² = c_lh_₂
//│ 			in (fun _lh_scanr_arg2² -> (fun _lh_scanr_arg1² -> 
//│ 				let _lh_matchIdent² = _lh_scanr_LH_C_1²(_lh_scanr_arg2², _lh_scanr_arg1²)
//│ 				in case _lh_matchIdent² of {
//│ 					LH_C _lh_scanr_LH_C_0³ _lh_scanr_LH_C_1⁵ => [LH_C _lh_scanr_arg1²(_lh_scanr_LH_C_0², _lh_scanr_LH_C_0³) [LH_C _lh_scanr_LH_C_0³ _lh_scanr_LH_C_1⁵]]
//│ 					| _  => error⁰}))
//│ 		in let _lh_scanr_LH_C_0⁴ = b_lh_₅
//│ 		in (fun _lh_scanr_arg2³ -> (fun _lh_scanr_arg1³ -> 
//│ 			let _lh_matchIdent³ = _lh_scanr_LH_C_1¹(_lh_scanr_arg2³, _lh_scanr_arg1³)
//│ 			in case _lh_matchIdent³ of {
//│ 				LH_C _lh_scanr_LH_C_0⁵ _lh_scanr_LH_C_1⁶ => [LH_C _lh_scanr_arg1³(_lh_scanr_LH_C_0⁴, _lh_scanr_LH_C_0⁵) [LH_C _lh_scanr_LH_C_0⁵ _lh_scanr_LH_C_1⁶]]
//│ 				| _  => error⁰}))
//│ 	in let _lh_scanr_LH_C_0⁶ = a_lh_₆
//│ 	in (fun _lh_scanr_arg2⁴ -> (fun _lh_scanr_arg1⁴ -> 
//│ 		let _lh_matchIdent⁴ = _lh_scanr_LH_C_1⁰(_lh_scanr_arg2⁴, _lh_scanr_arg1⁴)
//│ 		in case _lh_matchIdent⁴ of {
//│ 			LH_C _lh_scanr_LH_C_0⁷ _lh_scanr_LH_C_1⁷ => [LH_C _lh_scanr_arg1⁴(_lh_scanr_LH_C_0⁶, _lh_scanr_LH_C_0⁷) [LH_C _lh_scanr_LH_C_0⁷ _lh_scanr_LH_C_1⁷]]
//│ 			| _  => error⁰}))(zerO_lh_₁(0), plus__lh_₅))
//│ def findCommon_lh_₁(_lh_findCommon_arg1⁰) = 
//│ 	let sim¹ = (fun _lh_sim_arg1¹ -> (fun _lh_sim_arg2² -> _lh_sim_arg1¹(_lh_sim_arg2²)))
//│ 	in let _lh_matchIdent⁴⁸ = foldr_lh_₁(sim¹, [LH_P2 id_lh_₁ [LH_N]], _lh_findCommon_arg1⁰)
//│ 	in case _lh_matchIdent⁴⁸ of {
//│ 		LH_P2 _lh_findCommon_LH_P2_0¹ _lh_findCommon_LH_P2_1¹ => _lh_findCommon_LH_P2_1¹
//│ 		| _  => error⁰}
//│ def foldr_lh_₁(f⁰, i⁰, ls¹) = case ls¹ of {
//│ 	LH_C h² t² => f⁰(h², foldr_lh_₁(f⁰, i⁰, t²))
//│ 	| LH_N  => i⁰}
//│ def head_lh_₁(ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => h⁰
//│ 	| LH_N  => error⁰}
//│ def id_lh_₁(_lh_id_arg1⁰) = _lh_id_arg1⁰
//│ def incr_lh_₁(_lh_incr_arg1⁰) = update_lh_₁((fun x⁰ -> (1 + x⁰)))
//│ def labelTree_lh_₁(_lh_labelTree_arg1⁰) = 
//│ 	let label¹³ = (fun _lh_label_arg1¹ -> _lh_label_arg1¹(label¹³))
//│ 	in startingWith_lh_₁(label¹³(_lh_labelTree_arg1⁰), 0)
//│ def ltGraph_lh_₁(_lh_ltGraph_arg1⁰) = case _lh_ltGraph_arg1⁰ of {
//│ 	Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {
//│ 		LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => 
//│ 			let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {
//│ 				Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {
//│ 					LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 			in [LH_C 
//│ 				let _lh_sim_LH_P3_2⁰ = map_lh_₄(labelOf⁰, _lh_ltGraph_Node_1⁰)
//│ 				in let _lh_sim_LH_P3_1⁰ = _lh_ltGraph_LH_P2_1⁰
//│ 				in let _lh_sim_LH_P3_0⁰ = _lh_ltGraph_LH_P2_0⁰
//│ 				in (fun _lh_sim_arg2¹ -> case _lh_sim_arg2¹ of {
//│ 					LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => 
//│ 						let rcs⁰ = _lh_sim_LH_P3_2⁰(_lh_sim_LH_P2_0⁰)
//│ 						in let ms⁰ = 	
//│ 							let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 								LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {
//│ 									LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)
//│ 									| _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}
//│ 								| LH_N  => [LH_N]})
//│ 							in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ 						in if null_lh_₁(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ 
//│ 							let t¹ = (fun ys¹ -> ys¹)
//│ 							in let h¹ = [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰]
//│ 							in (fun ys² -> [LH_C h¹ t¹(ys²)])(_lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh_₁(_lh_sim_LH_P3_0⁰, head_lh_₁(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰]
//│ 					| _  => error⁰}) map_lh_₅(ltGraph_lh_₁, _lh_ltGraph_Node_1⁰, 99)]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def map_lh_₁(f³, ls⁴) = case ls⁴ of {
//│ 	LH_C h⁴ t⁴ => [LH_C f³(h⁴) map_lh_₁(f³, t⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f², ls³) = ls³(f²)
//│ def map_lh_₃(f⁵, ls⁶) = ls⁶(f⁵)
//│ def map_lh_₄(f²⁰, ls⁷) = case ls⁷ of {
//│ 	LH_C h¹⁹ t¹⁹ => 
//│ 		let t²⁰ = map_lh_₄(f²⁰, t¹⁹)
//│ 		in let h²⁰ = f²⁰(h¹⁹)
//│ 		in (fun f²¹ -> [LH_C f²¹(h²⁰) t²⁰(f²¹)])
//│ 	| LH_N  => (fun f²² -> [LH_N])}
//│ def map_lh_₅(f⁴, ls⁵) = case ls⁵ of {
//│ 	LH_C h⁵ t⁵ => 
//│ 		let t⁶ = map_lh_₅(f⁴, t⁵)
//│ 		in let h⁶ = f⁴(h⁵)
//│ 		in (fun _lh_dummy⁰ -> mappend_lh_₂(h⁶, t⁶(99)))
//│ 	| LH_N  => (fun _lh_dummy¹ -> [LH_N])}
//│ def mappend_lh_₁(xs⁰, ys⁰) = xs⁰(ys⁰)
//│ def mappend_lh_₂(xs¹, ys³) = case xs¹ of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh_₂(t³, ys³)]
//│ 	| LH_N  => ys³}
//│ def mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_arg2⁰) = case _lh_mmapl_arg2⁰ of {
//│ 	LH_N  => retURN_lh_₃([LH_N])
//│ 	| LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰])))))
//│ 	| _  => error⁰}
//│ def mult__lh_₁(_lh_mult__arg1⁰, _lh_mult__arg2⁰) = 
//│ 	let _lh_label_Node_1⁹ = [LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]
//│ 	in let _lh_label_Node_0⁹ = [LH_C '*' [LH_N]]
//│ 	in (fun label¹⁰ -> (fun s¹³ -> 
//│ 		let _lh_matchIdent¹⁶ = incr_lh_₁(0, s¹³)
//│ 		in _lh_matchIdent¹⁶((fun n⁹ -> bind_lh_₂(mmapl_lh_₁(label¹⁰, _lh_label_Node_1⁹), (fun ts⁹ -> retURN_lh_₁([Node [LH_P2 n⁹ _lh_label_Node_0⁹] ts⁹])))))))
//│ def mult__lh_₂(_lh_mult__arg1², _lh_mult__arg2²) = 
//│ 	let _lh_label_Node_1²⁹ = [LH_C _lh_mult__arg1² [LH_C _lh_mult__arg2² [LH_N]]]
//│ 	in let _lh_label_Node_0²⁹ = [LH_C '*' [LH_N]]
//│ 	in (fun label³¹ -> (fun s³⁶ -> 
//│ 		let _lh_matchIdent⁴³ = incr_lh_₁(0, s³⁶)
//│ 		in _lh_matchIdent⁴³((fun n³⁰ -> bind_lh_₂(mmapl_lh_₁(label³¹, _lh_label_Node_1²⁹), (fun ts²⁹ -> retURN_lh_₁([Node [LH_P2 n³⁰ _lh_label_Node_0²⁹] ts²⁹])))))))
//│ def mult__lh_₃(_lh_mult__arg1¹, _lh_mult__arg2¹) = 
//│ 	let _lh_label_Node_1¹¹ = [LH_C _lh_mult__arg1¹ [LH_C _lh_mult__arg2¹ [LH_N]]]
//│ 	in let _lh_label_Node_0¹¹ = [LH_C '*' [LH_N]]
//│ 	in (fun label¹² -> (fun s¹⁵ -> 
//│ 		let _lh_matchIdent¹⁸ = incr_lh_₁(0, s¹⁵)
//│ 		in _lh_matchIdent¹⁸((fun n¹¹ -> bind_lh_₂(mmapl_lh_₁(label¹², _lh_label_Node_1¹¹), (fun ts¹¹ -> retURN_lh_₁([Node [LH_P2 n¹¹ _lh_label_Node_0¹¹] ts¹¹])))))))
//│ def newlyDefined_lh_₁(_lh_newlyDefined_arg1⁰, _lh_newlyDefined_arg2⁰, _lh_newlyDefined_arg3⁰, _lh_newlyDefined_arg4⁰) = if polyEq⁰(_lh_newlyDefined_arg1⁰, _lh_newlyDefined_arg4⁰) then _lh_newlyDefined_arg2⁰ else _lh_newlyDefined_arg3⁰(_lh_newlyDefined_arg4⁰)
//│ def null_lh_₁(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def plus__lh_₁(_lh_plus__arg1¹, _lh_plus__arg2¹) = 
//│ 	let _lh_label_Node_1¹⁴ = [LH_C _lh_plus__arg1¹ [LH_C _lh_plus__arg2¹ [LH_N]]]
//│ 	in let _lh_label_Node_0¹⁴ = [LH_C '+' [LH_N]]
//│ 	in (fun label¹⁶ -> (fun s¹⁹ -> 
//│ 		let _lh_matchIdent²³ = incr_lh_₁(0, s¹⁹)
//│ 		in _lh_matchIdent²³((fun n¹⁵ -> bind_lh_₂(mmapl_lh_₁(label¹⁶, _lh_label_Node_1¹⁴), (fun ts¹⁴ -> retURN_lh_₁([Node [LH_P2 n¹⁵ _lh_label_Node_0¹⁴] ts¹⁴])))))))
//│ def plus__lh_₂(_lh_plus__arg1⁴, _lh_plus__arg2⁴) = 
//│ 	let _lh_label_Node_1²⁶ = [LH_C _lh_plus__arg1⁴ [LH_C _lh_plus__arg2⁴ [LH_N]]]
//│ 	in let _lh_label_Node_0²⁶ = [LH_C '+' [LH_N]]
//│ 	in (fun label²⁸ -> (fun s³³ -> 
//│ 		let _lh_matchIdent⁴⁰ = incr_lh_₁(0, s³³)
//│ 		in _lh_matchIdent⁴⁰((fun n²⁷ -> bind_lh_₂(mmapl_lh_₁(label²⁸, _lh_label_Node_1²⁶), (fun ts²⁶ -> retURN_lh_₁([Node [LH_P2 n²⁷ _lh_label_Node_0²⁶] ts²⁶])))))))
//│ def plus__lh_₃(_lh_plus__arg1², _lh_plus__arg2²) = 
//│ 	let _lh_label_Node_1²¹ = [LH_C _lh_plus__arg1² [LH_C _lh_plus__arg2² [LH_N]]]
//│ 	in let _lh_label_Node_0²¹ = [LH_C '+' [LH_N]]
//│ 	in (fun label²³ -> (fun s²⁷ -> 
//│ 		let _lh_matchIdent³⁵ = incr_lh_₁(0, s²⁷)
//│ 		in _lh_matchIdent³⁵((fun n²² -> bind_lh_₂(mmapl_lh_₁(label²³, _lh_label_Node_1²¹), (fun ts²¹ -> retURN_lh_₁([Node [LH_P2 n²² _lh_label_Node_0²¹] ts²¹])))))))
//│ def plus__lh_₄(_lh_plus__arg1⁵, _lh_plus__arg2⁵) = 
//│ 	let _lh_label_Node_1²⁸ = [LH_C _lh_plus__arg1⁵ [LH_C _lh_plus__arg2⁵ [LH_N]]]
//│ 	in let _lh_label_Node_0²⁸ = [LH_C '+' [LH_N]]
//│ 	in (fun label³⁰ -> (fun s³⁵ -> 
//│ 		let _lh_matchIdent⁴² = incr_lh_₁(0, s³⁵)
//│ 		in _lh_matchIdent⁴²((fun n²⁹ -> bind_lh_₂(mmapl_lh_₁(label³⁰, _lh_label_Node_1²⁸), (fun ts²⁸ -> retURN_lh_₁([Node [LH_P2 n²⁹ _lh_label_Node_0²⁸] ts²⁸])))))))
//│ def plus__lh_₅(_lh_plus__arg1³, _lh_plus__arg2³) = 
//│ 	let _lh_label_Node_1²³ = [LH_C _lh_plus__arg1³ [LH_C _lh_plus__arg2³ [LH_N]]]
//│ 	in let _lh_label_Node_0²³ = [LH_C '+' [LH_N]]
//│ 	in (fun label²⁵ -> (fun s³⁰ -> 
//│ 		let _lh_matchIdent³⁷ = incr_lh_₁(0, s³⁰)
//│ 		in _lh_matchIdent³⁷((fun n²⁴ -> bind_lh_₂(mmapl_lh_₁(label²⁵, _lh_label_Node_1²³), (fun ts²³ -> retURN_lh_₁([Node [LH_P2 n²⁴ _lh_label_Node_0²³] ts²³])))))))
//│ def plus__lh_₆(_lh_plus__arg1⁰, _lh_plus__arg2⁰) = 
//│ 	let _lh_label_Node_1⁰ = [LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]
//│ 	in let _lh_label_Node_0⁰ = [LH_C '+' [LH_N]]
//│ 	in (fun label⁰ -> (fun s⁰ -> 
//│ 		let _lh_matchIdent⁰ = incr_lh_₁(0, s⁰)
//│ 		in _lh_matchIdent⁰((fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰])))))))
//│ def plus__lh_₇(_lh_plus__arg1⁶, _lh_plus__arg2⁶) = 
//│ 	let _lh_label_Node_1³² = [LH_C _lh_plus__arg1⁶ [LH_C _lh_plus__arg2⁶ [LH_N]]]
//│ 	in let _lh_label_Node_0³² = [LH_C '+' [LH_N]]
//│ 	in (fun label³⁴ -> (fun s⁴⁰ -> 
//│ 		let _lh_matchIdent⁴⁹ = incr_lh_₁(0, s⁴⁰)
//│ 		in _lh_matchIdent⁴⁹((fun n⁴⁰ -> bind_lh_₂(mmapl_lh_₁(label³⁴, _lh_label_Node_1³²), (fun ts³² -> retURN_lh_₁([Node [LH_P2 n⁴⁰ _lh_label_Node_0³²] ts³²])))))))
//│ def prod_lh_₁(_lh_prod_arg1⁰) = 
//│ 	let _lh_label_Node_1⁴ = _lh_prod_arg1⁰
//│ 	in let _lh_label_Node_0⁴ = [LH_C 'X' [LH_N]]
//│ 	in (fun label⁵ -> (fun s⁷ -> 
//│ 		let _lh_matchIdent¹⁰ = incr_lh_₁(0, s⁷)
//│ 		in _lh_matchIdent¹⁰((fun n⁴ -> bind_lh_₂(mmapl_lh_₁(label⁵, _lh_label_Node_1⁴), (fun ts⁴ -> retURN_lh_₁([Node [LH_P2 n⁴ _lh_label_Node_0⁴] ts⁴])))))))
//│ def prod_lh_₂(_lh_prod_arg1¹) = 
//│ 	let _lh_label_Node_1²² = _lh_prod_arg1¹
//│ 	in let _lh_label_Node_0²² = [LH_C 'X' [LH_N]]
//│ 	in (fun label²⁴ -> (fun s²⁸ -> 
//│ 		let _lh_matchIdent³⁶ = incr_lh_₁(0, s²⁸)
//│ 		in _lh_matchIdent³⁶((fun n²³ -> bind_lh_₂(mmapl_lh_₁(label²⁴, _lh_label_Node_1²²), (fun ts²² -> retURN_lh_₁([Node [LH_P2 n²³ _lh_label_Node_0²²] ts²²])))))))
//│ def retURN_lh_₁(_lh_retURN_arg1¹, s³) = [LH_P2 s³ _lh_retURN_arg1¹]
//│ def retURN_lh_₂(_lh_retURN_arg1⁰, s²) = [LH_P2 s² _lh_retURN_arg1⁰]
//│ def retURN_lh_₃(_lh_retURN_arg1², s²⁶) = [LH_P2 s²⁶ _lh_retURN_arg1²]
//│ def scanl_lh_₁(_lh_scanl_arg1⁵, _lh_scanl_arg2⁵, _lh_scanl_arg3⁰) = [LH_C _lh_scanl_arg2⁵ 
//│ 	let _lh_matchIdent⁴⁶ = _lh_scanl_arg3⁰
//│ 	in _lh_matchIdent⁴⁶(_lh_scanl_arg1⁵, _lh_scanl_arg2⁵)]
//│ def scanr_lh_₁(_lh_scanr_arg1⁵, _lh_scanr_arg2⁵, _lh_scanr_arg3⁰) = _lh_scanr_arg3⁰(_lh_scanr_arg2⁵, _lh_scanr_arg1⁵)
//│ def startingWith_lh_₁(_lh_startingWith_arg1⁰, _lh_startingWith_arg2⁰) = 
//│ 	let _lh_matchIdent¹⁹ = _lh_startingWith_arg1⁰(_lh_startingWith_arg2⁰)
//│ 	in case _lh_matchIdent¹⁹ of {
//│ 		LH_P2 _lh_startingWith_LH_P2_0⁰ _lh_startingWith_LH_P2_1⁰ => _lh_startingWith_LH_P2_1⁰
//│ 		| _  => error⁰}
//│ def take_lh_₁(n¹³, ls²) = if (n¹³ > 0) then ls²(n¹³) else (fun f¹ -> [LH_N])
//│ def testCse_nofib_lh_₁(_lh_testCse_nofib_arg1⁰) = map_lh_₁((fun i¹ -> if ((i¹ % 6) > 0) then 
//│ 	let t⁷ = 	
//│ 		let t⁸ = 	
//│ 			let t⁹ = 	
//│ 				let t¹⁰ = 	
//│ 					let t¹¹ = 	
//│ 						let t¹² = (fun n³¹ -> (fun f⁶ -> [LH_N]))
//│ 						in let h⁷ = example5_lh_₁(0)
//│ 						in (fun n³² -> 
//│ 							let t¹³ = if ((n³² - 1) > 0) then t¹²((n³² - 1)) else (fun f⁷ -> [LH_N])
//│ 							in let h⁸ = h⁷
//│ 							in (fun f⁸ -> [LH_C f⁸(h⁸) t¹³(f⁸)]))
//│ 					in let h⁹ = example4_lh_₁(0)
//│ 					in (fun n³³ -> 
//│ 						let t¹⁴ = if ((n³³ - 1) > 0) then t¹¹((n³³ - 1)) else (fun f⁹ -> [LH_N])
//│ 						in let h¹⁰ = h⁹
//│ 						in (fun f¹⁰ -> [LH_C f¹⁰(h¹⁰) t¹⁴(f¹⁰)]))
//│ 				in let h¹¹ = example3_lh_₁(0)
//│ 				in (fun n³⁴ -> 
//│ 					let t¹⁵ = if ((n³⁴ - 1) > 0) then t¹⁰((n³⁴ - 1)) else (fun f¹¹ -> [LH_N])
//│ 					in let h¹² = h¹¹
//│ 					in (fun f¹² -> [LH_C f¹²(h¹²) t¹⁵(f¹²)]))
//│ 			in let h¹³ = example2_lh_₁(0)
//│ 			in (fun n³⁵ -> 
//│ 				let t¹⁶ = if ((n³⁵ - 1) > 0) then t⁹((n³⁵ - 1)) else (fun f¹³ -> [LH_N])
//│ 				in let h¹⁴ = h¹³
//│ 				in (fun f¹⁴ -> [LH_C f¹⁴(h¹⁴) t¹⁶(f¹⁴)]))
//│ 		in let h¹⁵ = example1_lh_₁(0)
//│ 		in (fun n³⁶ -> 
//│ 			let t¹⁷ = if ((n³⁶ - 1) > 0) then t⁸((n³⁶ - 1)) else (fun f¹⁵ -> [LH_N])
//│ 			in let h¹⁶ = h¹⁵
//│ 			in (fun f¹⁶ -> [LH_C f¹⁶(h¹⁶) t¹⁷(f¹⁶)]))
//│ 	in let h¹⁷ = example0_lh_₁(0)
//│ 	in (fun n³⁷ -> 
//│ 		let t¹⁸ = if ((n³⁷ - 1) > 0) then t⁷((n³⁷ - 1)) else (fun f¹⁷ -> [LH_N])
//│ 		in let h¹⁸ = h¹⁷
//│ 		in (fun f¹⁸ -> [LH_C f¹⁸(h¹⁸) t¹⁸(f¹⁸)]))((i¹ % 6)) else (fun f¹⁹ -> [LH_N])(cse_lh_₁)), primId⁰(enumFromTo_lh_₁(1, _lh_testCse_nofib_arg1⁰)))
//│ def update_lh_₁(_lh_update_arg1⁰, s²⁹) = 
//│ 	let _lh_bind_LH_P2_1³ = s²⁹
//│ 	in let _lh_bind_LH_P2_0³ = _lh_update_arg1⁰(s²⁹)
//│ 	in (fun _lh_bind_arg2³ -> _lh_bind_arg2³(_lh_bind_LH_P2_1³, _lh_bind_LH_P2_0³))
//│ def zerO_lh_₁(_lh_zerO_arg1⁰) = case _lh_zerO_arg1⁰ of {
//│ 	0  => 
//│ 		let _lh_label_Node_1¹⁶ = [LH_N]
//│ 		in let _lh_label_Node_0¹⁶ = [LH_C '0' [LH_N]]
//│ 		in (fun label¹⁸ -> (fun s²¹ -> 
//│ 			let _lh_matchIdent³⁰ = incr_lh_₁(0, s²¹)
//│ 			in _lh_matchIdent³⁰((fun n¹⁷ -> bind_lh_₂(mmapl_lh_₁(label¹⁸, _lh_label_Node_1¹⁶), (fun ts¹⁶ -> retURN_lh_₁([Node [LH_P2 n¹⁷ _lh_label_Node_0¹⁶] ts¹⁶])))))))
//│ 	| _  => error⁰}
//│ def zerO_lh_₂(_lh_zerO_arg1¹) = case _lh_zerO_arg1¹ of {
//│ 	0  => 
//│ 		let _lh_label_Node_1²⁷ = [LH_N]
//│ 		in let _lh_label_Node_0²⁷ = [LH_C '0' [LH_N]]
//│ 		in (fun label²⁹ -> (fun s³⁴ -> 
//│ 			let _lh_matchIdent⁴¹ = incr_lh_₁(0, s³⁴)
//│ 			in _lh_matchIdent⁴¹((fun n²⁸ -> bind_lh_₂(mmapl_lh_₁(label²⁹, _lh_label_Node_1²⁷), (fun ts²⁷ -> retURN_lh_₁([Node [LH_P2 n²⁸ _lh_label_Node_0²⁷] ts²⁷])))))))
//│ 	| _  => error⁰}
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ testCse_nofib_lh_₁(primId⁰(1000))
//│ def a_lh_₁ = 
//│ 	let _lh_label_Node_1¹² = [LH_N]
//│ 	in let _lh_label_Node_0¹² = [LH_C 'a' [LH_N]]
//│ 	in (fun label¹⁴ -> (fun s¹⁶ -> 
//│ 		let _lh_matchIdent²⁰ = incr_lh_₁(0, s¹⁶)
//│ 		in _lh_matchIdent²⁰((fun n¹² -> bind_lh_₂(mmapl_lh_₁(label¹⁴, _lh_label_Node_1¹²), (fun ts¹² -> retURN_lh_₁([Node [LH_P2 n¹² _lh_label_Node_0¹²] ts¹²])))))))
//│ def a_lh_₂ = 
//│ 	let _lh_label_Node_1¹⁸ = [LH_N]
//│ 	in let _lh_label_Node_0¹⁸ = [LH_C 'a' [LH_N]]
//│ 	in (fun label²⁰ -> (fun s²³ -> 
//│ 		let _lh_matchIdent³² = incr_lh_₁(0, s²³)
//│ 		in _lh_matchIdent³²((fun n¹⁹ -> bind_lh_₂(mmapl_lh_₁(label²⁰, _lh_label_Node_1¹⁸), (fun ts¹⁸ -> retURN_lh_₁([Node [LH_P2 n¹⁹ _lh_label_Node_0¹⁸] ts¹⁸])))))))
//│ def a_lh_₃ = 
//│ 	let _lh_label_Node_1⁸ = [LH_N]
//│ 	in let _lh_label_Node_0⁸ = [LH_C 'a' [LH_N]]
//│ 	in (fun label⁹ -> (fun s¹² -> 
//│ 		let _lh_matchIdent¹⁵ = incr_lh_₁(0, s¹²)
//│ 		in _lh_matchIdent¹⁵((fun n⁸ -> bind_lh_₂(mmapl_lh_₁(label⁹, _lh_label_Node_1⁸), (fun ts⁸ -> retURN_lh_₁([Node [LH_P2 n⁸ _lh_label_Node_0⁸] ts⁸])))))))
//│ def a_lh_₄ = 
//│ 	let _lh_label_Node_1¹³ = [LH_N]
//│ 	in let _lh_label_Node_0¹³ = [LH_C 'a' [LH_N]]
//│ 	in (fun label¹⁵ -> (fun s¹⁸ -> 
//│ 		let _lh_matchIdent²² = incr_lh_₁(0, s¹⁸)
//│ 		in _lh_matchIdent²²((fun n¹⁴ -> bind_lh_₂(mmapl_lh_₁(label¹⁵, _lh_label_Node_1¹³), (fun ts¹³ -> retURN_lh_₁([Node [LH_P2 n¹⁴ _lh_label_Node_0¹³] ts¹³])))))))
//│ def a_lh_₅ = 
//│ 	let _lh_label_Node_1⁶ = [LH_N]
//│ 	in let _lh_label_Node_0⁶ = [LH_C 'a' [LH_N]]
//│ 	in (fun label⁷ -> (fun s¹⁰ -> 
//│ 		let _lh_matchIdent¹³ = incr_lh_₁(0, s¹⁰)
//│ 		in _lh_matchIdent¹³((fun n⁶ -> bind_lh_₂(mmapl_lh_₁(label⁷, _lh_label_Node_1⁶), (fun ts⁶ -> retURN_lh_₁([Node [LH_P2 n⁶ _lh_label_Node_0⁶] ts⁶])))))))
//│ def a_lh_₆ = 
//│ 	let _lh_label_Node_1³¹ = [LH_N]
//│ 	in let _lh_label_Node_0³¹ = [LH_C 'a' [LH_N]]
//│ 	in (fun label³³ -> (fun s³⁸ -> 
//│ 		let _lh_matchIdent⁴⁵ = incr_lh_₁(0, s³⁸)
//│ 		in _lh_matchIdent⁴⁵((fun n³⁹ -> bind_lh_₂(mmapl_lh_₁(label³³, _lh_label_Node_1³¹), (fun ts³¹ -> retURN_lh_₁([Node [LH_P2 n³⁹ _lh_label_Node_0³¹] ts³¹])))))))
//│ def a_lh_₇ = 
//│ 	let _lh_label_Node_1²⁴ = [LH_N]
//│ 	in let _lh_label_Node_0²⁴ = [LH_C 'a' [LH_N]]
//│ 	in (fun label²⁶ -> (fun s³¹ -> 
//│ 		let _lh_matchIdent³⁸ = incr_lh_₁(0, s³¹)
//│ 		in _lh_matchIdent³⁸((fun n²⁵ -> bind_lh_₂(mmapl_lh_₁(label²⁶, _lh_label_Node_1²⁴), (fun ts²⁴ -> retURN_lh_₁([Node [LH_P2 n²⁵ _lh_label_Node_0²⁴] ts²⁴])))))))
//│ def a_lh_₈ = 
//│ 	let _lh_label_Node_1⁵ = [LH_N]
//│ 	in let _lh_label_Node_0⁵ = [LH_C 'a' [LH_N]]
//│ 	in (fun label⁶ -> (fun s⁹ -> 
//│ 		let _lh_matchIdent¹² = incr_lh_₁(0, s⁹)
//│ 		in _lh_matchIdent¹²((fun n⁵ -> bind_lh_₂(mmapl_lh_₁(label⁶, _lh_label_Node_1⁵), (fun ts⁵ -> retURN_lh_₁([Node [LH_P2 n⁵ _lh_label_Node_0⁵] ts⁵])))))))
//│ def a_lh_₉ = 
//│ 	let _lh_label_Node_1² = [LH_N]
//│ 	in let _lh_label_Node_0² = [LH_C 'a' [LH_N]]
//│ 	in (fun label² -> (fun s⁴ -> 
//│ 		let _lh_matchIdent⁶ = incr_lh_₁(0, s⁴)
//│ 		in _lh_matchIdent⁶((fun n² -> bind_lh_₂(mmapl_lh_₁(label², _lh_label_Node_1²), (fun ts² -> retURN_lh_₁([Node [LH_P2 n² _lh_label_Node_0²] ts²])))))))
//│ def b_lh_₁ = 
//│ 	let _lh_label_Node_1⁷ = [LH_N]
//│ 	in let _lh_label_Node_0⁷ = [LH_C 'b' [LH_N]]
//│ 	in (fun label⁸ -> (fun s¹¹ -> 
//│ 		let _lh_matchIdent¹⁴ = incr_lh_₁(0, s¹¹)
//│ 		in _lh_matchIdent¹⁴((fun n⁷ -> bind_lh_₂(mmapl_lh_₁(label⁸, _lh_label_Node_1⁷), (fun ts⁷ -> retURN_lh_₁([Node [LH_P2 n⁷ _lh_label_Node_0⁷] ts⁷])))))))
//│ def b_lh_₂ = 
//│ 	let _lh_label_Node_1²⁰ = [LH_N]
//│ 	in let _lh_label_Node_0²⁰ = [LH_C 'b' [LH_N]]
//│ 	in (fun label²² -> (fun s²⁵ -> 
//│ 		let _lh_matchIdent³⁴ = incr_lh_₁(0, s²⁵)
//│ 		in _lh_matchIdent³⁴((fun n²¹ -> bind_lh_₂(mmapl_lh_₁(label²², _lh_label_Node_1²⁰), (fun ts²⁰ -> retURN_lh_₁([Node [LH_P2 n²¹ _lh_label_Node_0²⁰] ts²⁰])))))))
//│ def b_lh_₃ = 
//│ 	let _lh_label_Node_1¹⁹ = [LH_N]
//│ 	in let _lh_label_Node_0¹⁹ = [LH_C 'b' [LH_N]]
//│ 	in (fun label²¹ -> (fun s²⁴ -> 
//│ 		let _lh_matchIdent³³ = incr_lh_₁(0, s²⁴)
//│ 		in _lh_matchIdent³³((fun n²⁰ -> bind_lh_₂(mmapl_lh_₁(label²¹, _lh_label_Node_1¹⁹), (fun ts¹⁹ -> retURN_lh_₁([Node [LH_P2 n²⁰ _lh_label_Node_0¹⁹] ts¹⁹])))))))
//│ def b_lh_₄ = 
//│ 	let _lh_label_Node_1¹⁷ = [LH_N]
//│ 	in let _lh_label_Node_0¹⁷ = [LH_C 'b' [LH_N]]
//│ 	in (fun label¹⁹ -> (fun s²² -> 
//│ 		let _lh_matchIdent³¹ = incr_lh_₁(0, s²²)
//│ 		in _lh_matchIdent³¹((fun n¹⁸ -> bind_lh_₂(mmapl_lh_₁(label¹⁹, _lh_label_Node_1¹⁷), (fun ts¹⁷ -> retURN_lh_₁([Node [LH_P2 n¹⁸ _lh_label_Node_0¹⁷] ts¹⁷])))))))
//│ def b_lh_₅ = 
//│ 	let _lh_label_Node_1¹⁰ = [LH_N]
//│ 	in let _lh_label_Node_0¹⁰ = [LH_C 'b' [LH_N]]
//│ 	in (fun label¹¹ -> (fun s¹⁴ -> 
//│ 		let _lh_matchIdent¹⁷ = incr_lh_₁(0, s¹⁴)
//│ 		in _lh_matchIdent¹⁷((fun n¹⁰ -> bind_lh_₂(mmapl_lh_₁(label¹¹, _lh_label_Node_1¹⁰), (fun ts¹⁰ -> retURN_lh_₁([Node [LH_P2 n¹⁰ _lh_label_Node_0¹⁰] ts¹⁰])))))))
//│ def b_lh_₆ = 
//│ 	let _lh_label_Node_1¹⁵ = [LH_N]
//│ 	in let _lh_label_Node_0¹⁵ = [LH_C 'b' [LH_N]]
//│ 	in (fun label¹⁷ -> (fun s²⁰ -> 
//│ 		let _lh_matchIdent²⁹ = incr_lh_₁(0, s²⁰)
//│ 		in _lh_matchIdent²⁹((fun n¹⁶ -> bind_lh_₂(mmapl_lh_₁(label¹⁷, _lh_label_Node_1¹⁵), (fun ts¹⁵ -> retURN_lh_₁([Node [LH_P2 n¹⁶ _lh_label_Node_0¹⁵] ts¹⁵])))))))
//│ def bind_lh_₁(_lh_bind_arg1³, _lh_bind_arg2⁴, s³⁹) = 
//│ 	let _lh_matchIdent⁴⁷ = _lh_bind_arg1³(s³⁹)
//│ 	in _lh_matchIdent⁴⁷(_lh_bind_arg2⁴)
//│ def bind_lh_₂(_lh_bind_arg1¹, _lh_bind_arg2¹, s⁸) = 
//│ 	let _lh_matchIdent¹¹ = _lh_bind_arg1¹(s⁸)
//│ 	in case _lh_matchIdent¹¹ of {
//│ 		LH_P2 _lh_bind_LH_P2_0¹ _lh_bind_LH_P2_1¹ => _lh_bind_arg2¹(_lh_bind_LH_P2_1¹, _lh_bind_LH_P2_0¹)
//│ 		| _  => error⁰}
//│ def bind_lh_₃(_lh_bind_arg1², _lh_bind_arg2², s¹⁷) = 
//│ 	let _lh_matchIdent²¹ = _lh_bind_arg1²(s¹⁷)
//│ 	in case _lh_matchIdent²¹ of {
//│ 		LH_P2 _lh_bind_LH_P2_0² _lh_bind_LH_P2_1² => _lh_bind_arg2²(_lh_bind_LH_P2_1², _lh_bind_LH_P2_0²)
//│ 		| _  => error⁰}
//│ def bind_lh_₄(_lh_bind_arg1⁰, _lh_bind_arg2⁰, s⁵) = 
//│ 	let _lh_matchIdent⁸ = _lh_bind_arg1⁰(s⁵)
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_P2 _lh_bind_LH_P2_0⁰ _lh_bind_LH_P2_1⁰ => _lh_bind_arg2⁰(_lh_bind_LH_P2_1⁰, _lh_bind_LH_P2_0⁰)
//│ 		| _  => error⁰}
//│ def c_lh_₁ = 
//│ 	let _lh_label_Node_1¹ = [LH_N]
//│ 	in let _lh_label_Node_0¹ = [LH_C 'c' [LH_N]]
//│ 	in (fun label¹ -> (fun s¹ -> 
//│ 		let _lh_matchIdent⁵ = incr_lh_₁(0, s¹)
//│ 		in _lh_matchIdent⁵((fun n¹ -> bind_lh_₂(mmapl_lh_₁(label¹, _lh_label_Node_1¹), (fun ts¹ -> retURN_lh_₁([Node [LH_P2 n¹ _lh_label_Node_0¹] ts¹])))))))
//│ def c_lh_₂ = 
//│ 	let _lh_label_Node_1³ = [LH_N]
//│ 	in let _lh_label_Node_0³ = [LH_C 'c' [LH_N]]
//│ 	in (fun label⁴ -> (fun s⁶ -> 
//│ 		let _lh_matchIdent⁹ = incr_lh_₁(0, s⁶)
//│ 		in _lh_matchIdent⁹((fun n³ -> bind_lh_₂(mmapl_lh_₁(label⁴, _lh_label_Node_1³), (fun ts³ -> retURN_lh_₁([Node [LH_P2 n³ _lh_label_Node_0³] ts³])))))))
//│ def c_lh_₃ = 
//│ 	let _lh_label_Node_1³³ = [LH_N]
//│ 	in let _lh_label_Node_0³³ = [LH_C 'c' [LH_N]]
//│ 	in (fun label³⁵ -> (fun s⁴¹ -> 
//│ 		let _lh_matchIdent⁵⁰ = incr_lh_₁(0, s⁴¹)
//│ 		in _lh_matchIdent⁵⁰((fun n⁴¹ -> bind_lh_₂(mmapl_lh_₁(label³⁵, _lh_label_Node_1³³), (fun ts³³ -> retURN_lh_₁([Node [LH_P2 n⁴¹ _lh_label_Node_0³³] ts³³])))))))
//│ def concat_lh_₁(lss⁰) = lss⁰(99)
//│ def cse_lh_₁(_lh_cse_arg1⁰) = 
//│ 	let sim⁰ = (fun _lh_sim_arg1⁰ -> (fun _lh_sim_arg2⁰ -> _lh_sim_arg1⁰(_lh_sim_arg2⁰)))
//│ 	in let _lh_matchIdent⁷ = foldr_lh_₁(sim⁰, [LH_P2 id_lh_₁ [LH_N]], ltGraph_lh_₁(
//│ 		let label³ = (fun _lh_label_arg1⁰ -> _lh_label_arg1⁰(label³))
//│ 		in startingWith_lh_₁(label³(_lh_cse_arg1⁰), 0)))
//│ 	in case _lh_matchIdent⁷ of {
//│ 		LH_P2 _lh_findCommon_LH_P2_0⁰ _lh_findCommon_LH_P2_1⁰ => _lh_findCommon_LH_P2_1⁰
//│ 		| _  => error⁰}
//│ def d_lh_₁ = 
//│ 	let _lh_label_Node_1³⁰ = [LH_N]
//│ 	in let _lh_label_Node_0³⁰ = [LH_C 'd' [LH_N]]
//│ 	in (fun label³² -> (fun s³⁷ -> 
//│ 		let _lh_matchIdent⁴⁴ = incr_lh_₁(0, s³⁷)
//│ 		in _lh_matchIdent⁴⁴((fun n³⁸ -> bind_lh_₂(mmapl_lh_₁(label³², _lh_label_Node_1³⁰), (fun ts³⁰ -> retURN_lh_₁([Node [LH_P2 n³⁸ _lh_label_Node_0³⁰] ts³⁰])))))))
//│ def d_lh_₂ = 
//│ 	let _lh_label_Node_1²⁵ = [LH_N]
//│ 	in let _lh_label_Node_0²⁵ = [LH_C 'd' [LH_N]]
//│ 	in (fun label²⁷ -> (fun s³² -> 
//│ 		let _lh_matchIdent³⁹ = incr_lh_₁(0, s³²)
//│ 		in _lh_matchIdent³⁹((fun n²⁶ -> bind_lh_₂(mmapl_lh_₁(label²⁷, _lh_label_Node_1²⁵), (fun ts²⁵ -> retURN_lh_₁([Node [LH_P2 n²⁶ _lh_label_Node_0²⁵] ts²⁵])))))))
//│ def enumFromTo_lh_₁(a⁰, b¹) = if (a⁰ <= b¹) then [LH_C a⁰ enumFromTo_lh_₁((a⁰ + 1), b¹)] else [LH_N]
//│ def example0_lh_₁(_lh_example0_arg1⁰) = a_lh_₃
//│ def example1_lh_₁(_lh_example1_arg1⁰) = plus__lh_₇(a_lh_₉, a_lh_₈)
//│ def example2_lh_₁(_lh_example2_arg1⁰) = plus__lh_₄(mult__lh_₂(a_lh_₅, b_lh_₄), mult__lh_₃(a_lh_₄, b_lh_₃))
//│ def example3_lh_₁(_lh_example3_arg1⁰) = plus__lh_₃(mult__lh_₁(plus__lh_₁(a_lh_₂, b_lh_₁), c_lh_₁), plus__lh_₂(a_lh_₁, b_lh_₂))
//│ def example4_lh_₁(_lh_example4_arg1⁰) = prod_lh_₂([LH_C zerO_lh_₂(0) 
//│ 	let _lh_matchIdent²⁴ = 	
//│ 		let _lh_scanl_LH_C_1⁰ = 	
//│ 			let _lh_scanl_LH_C_1¹ = 	
//│ 				let _lh_scanl_LH_C_1² = 	
//│ 					let _lh_scanl_LH_C_1³ = (fun _lh_scanl_arg1⁰ -> (fun _lh_scanl_arg2⁰ -> [LH_N]))
//│ 					in let _lh_scanl_LH_C_0⁰ = d_lh_₂
//│ 					in (fun _lh_scanl_arg1¹ -> (fun _lh_scanl_arg2¹ -> [LH_C _lh_scanl_arg1¹(_lh_scanl_arg2¹, _lh_scanl_LH_C_0⁰) 
//│ 						let _lh_matchIdent²⁵ = _lh_scanl_LH_C_1³
//│ 						in _lh_matchIdent²⁵(_lh_scanl_arg1¹, _lh_scanl_arg1¹(_lh_scanl_arg2¹, _lh_scanl_LH_C_0⁰))]))
//│ 				in let _lh_scanl_LH_C_0¹ = c_lh_₃
//│ 				in (fun _lh_scanl_arg1² -> (fun _lh_scanl_arg2² -> [LH_C _lh_scanl_arg1²(_lh_scanl_arg2², _lh_scanl_LH_C_0¹) 
//│ 					let _lh_matchIdent²⁶ = _lh_scanl_LH_C_1²
//│ 					in _lh_matchIdent²⁶(_lh_scanl_arg1², _lh_scanl_arg1²(_lh_scanl_arg2², _lh_scanl_LH_C_0¹))]))
//│ 			in let _lh_scanl_LH_C_0² = b_lh_₆
//│ 			in (fun _lh_scanl_arg1³ -> (fun _lh_scanl_arg2³ -> [LH_C _lh_scanl_arg1³(_lh_scanl_arg2³, _lh_scanl_LH_C_0²) 
//│ 				let _lh_matchIdent²⁷ = _lh_scanl_LH_C_1¹
//│ 				in _lh_matchIdent²⁷(_lh_scanl_arg1³, _lh_scanl_arg1³(_lh_scanl_arg2³, _lh_scanl_LH_C_0²))]))
//│ 		in let _lh_scanl_LH_C_0³ = a_lh_₇
//│ 		in (fun _lh_scanl_arg1⁴ -> (fun _lh_scanl_arg2⁴ -> [LH_C _lh_scanl_arg1⁴(_lh_scanl_arg2⁴, _lh_scanl_LH_C_0³) 
//│ 			let _lh_matchIdent²⁸ = _lh_scanl_LH_C_1⁰
//│ 			in _lh_matchIdent²⁸(_lh_scanl_arg1⁴, _lh_scanl_arg1⁴(_lh_scanl_arg2⁴, _lh_scanl_LH_C_0³))]))
//│ 	in _lh_matchIdent²⁴(plus__lh_₆, zerO_lh_₂(0))])
//│ def example5_lh_₁(_lh_example5_arg1⁰) = prod_lh_₁(
//│ 	let _lh_scanr_LH_C_1⁰ = 	
//│ 		let _lh_scanr_LH_C_1¹ = 	
//│ 			let _lh_scanr_LH_C_1² = 	
//│ 				let _lh_scanr_LH_C_1³ = (fun _lh_scanr_arg2⁰ -> (fun _lh_scanr_arg1⁰ -> [LH_C _lh_scanr_arg2⁰ [LH_N]]))
//│ 				in let _lh_scanr_LH_C_0⁰ = d_lh_₁
//│ 				in (fun _lh_scanr_arg2¹ -> (fun _lh_scanr_arg1¹ -> 
//│ 					let _lh_matchIdent¹ = _lh_scanr_LH_C_1³(_lh_scanr_arg2¹, _lh_scanr_arg1¹)
//│ 					in case _lh_matchIdent¹ of {
//│ 						LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1⁴ => [LH_C _lh_scanr_arg1¹(_lh_scanr_LH_C_0⁰, _lh_scanr_LH_C_0¹) [LH_C _lh_scanr_LH_C_0¹ _lh_scanr_LH_C_1⁴]]
//│ 						| _  => error⁰}))
//│ 			in let _lh_scanr_LH_C_0² = c_lh_₂
//│ 			in (fun _lh_scanr_arg2² -> (fun _lh_scanr_arg1² -> 
//│ 				let _lh_matchIdent² = _lh_scanr_LH_C_1²(_lh_scanr_arg2², _lh_scanr_arg1²)
//│ 				in case _lh_matchIdent² of {
//│ 					LH_C _lh_scanr_LH_C_0³ _lh_scanr_LH_C_1⁵ => [LH_C _lh_scanr_arg1²(_lh_scanr_LH_C_0², _lh_scanr_LH_C_0³) [LH_C _lh_scanr_LH_C_0³ _lh_scanr_LH_C_1⁵]]
//│ 					| _  => error⁰}))
//│ 		in let _lh_scanr_LH_C_0⁴ = b_lh_₅
//│ 		in (fun _lh_scanr_arg2³ -> (fun _lh_scanr_arg1³ -> 
//│ 			let _lh_matchIdent³ = _lh_scanr_LH_C_1¹(_lh_scanr_arg2³, _lh_scanr_arg1³)
//│ 			in case _lh_matchIdent³ of {
//│ 				LH_C _lh_scanr_LH_C_0⁵ _lh_scanr_LH_C_1⁶ => [LH_C _lh_scanr_arg1³(_lh_scanr_LH_C_0⁴, _lh_scanr_LH_C_0⁵) [LH_C _lh_scanr_LH_C_0⁵ _lh_scanr_LH_C_1⁶]]
//│ 				| _  => error⁰}))
//│ 	in let _lh_scanr_LH_C_0⁶ = a_lh_₆
//│ 	in (fun _lh_scanr_arg2⁴ -> (fun _lh_scanr_arg1⁴ -> 
//│ 		let _lh_matchIdent⁴ = _lh_scanr_LH_C_1⁰(_lh_scanr_arg2⁴, _lh_scanr_arg1⁴)
//│ 		in case _lh_matchIdent⁴ of {
//│ 			LH_C _lh_scanr_LH_C_0⁷ _lh_scanr_LH_C_1⁷ => [LH_C _lh_scanr_arg1⁴(_lh_scanr_LH_C_0⁶, _lh_scanr_LH_C_0⁷) [LH_C _lh_scanr_LH_C_0⁷ _lh_scanr_LH_C_1⁷]]
//│ 			| _  => error⁰}))(zerO_lh_₁(0), plus__lh_₅))
//│ def findCommon_lh_₁(_lh_findCommon_arg1⁰) = 
//│ 	let sim¹ = (fun _lh_sim_arg1¹ -> (fun _lh_sim_arg2² -> _lh_sim_arg1¹(_lh_sim_arg2²)))
//│ 	in let _lh_matchIdent⁴⁸ = foldr_lh_₁(sim¹, [LH_P2 id_lh_₁ [LH_N]], _lh_findCommon_arg1⁰)
//│ 	in case _lh_matchIdent⁴⁸ of {
//│ 		LH_P2 _lh_findCommon_LH_P2_0¹ _lh_findCommon_LH_P2_1¹ => _lh_findCommon_LH_P2_1¹
//│ 		| _  => error⁰}
//│ def foldr_lh_₁(f⁰, i⁰, ls¹) = case ls¹ of {
//│ 	LH_C h² t² => f⁰(h², foldr_lh_₁(f⁰, i⁰, t²))
//│ 	| LH_N  => i⁰}
//│ def head_lh_₁(ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => h⁰
//│ 	| LH_N  => error⁰}
//│ def id_lh_₁(_lh_id_arg1⁰) = _lh_id_arg1⁰
//│ def incr_lh_₁(_lh_incr_arg1⁰) = update_lh_₁((fun x⁰ -> (1 + x⁰)))
//│ def labelTree_lh_₁(_lh_labelTree_arg1⁰) = 
//│ 	let label¹³ = (fun _lh_label_arg1¹ -> _lh_label_arg1¹(label¹³))
//│ 	in startingWith_lh_₁(label¹³(_lh_labelTree_arg1⁰), 0)
//│ def ltGraph_lh_₁(_lh_ltGraph_arg1⁰) = case _lh_ltGraph_arg1⁰ of {
//│ 	Node _lh_ltGraph_Node_0⁰ _lh_ltGraph_Node_1⁰ => case _lh_ltGraph_Node_0⁰ of {
//│ 		LH_P2 _lh_ltGraph_LH_P2_0⁰ _lh_ltGraph_LH_P2_1⁰ => 
//│ 			let labelOf⁰ = (fun _lh_labelOf_arg1⁰ -> case _lh_labelOf_arg1⁰ of {
//│ 				Node _lh_labelOf_Node_0⁰ _lh_labelOf_Node_1⁰ => case _lh_labelOf_Node_0⁰ of {
//│ 					LH_P2 _lh_labelOf_LH_P2_0⁰ _lh_labelOf_LH_P2_1⁰ => _lh_labelOf_LH_P2_0⁰
//│ 					| _  => error⁰}
//│ 				| _  => error⁰})
//│ 			in [LH_C 
//│ 				let _lh_sim_LH_P3_2⁰ = map_lh_₄(labelOf⁰, _lh_ltGraph_Node_1⁰)
//│ 				in let _lh_sim_LH_P3_1⁰ = _lh_ltGraph_LH_P2_1⁰
//│ 				in let _lh_sim_LH_P3_0⁰ = _lh_ltGraph_LH_P2_0⁰
//│ 				in (fun _lh_sim_arg2¹ -> case _lh_sim_arg2¹ of {
//│ 					LH_P2 _lh_sim_LH_P2_0⁰ _lh_sim_LH_P2_1⁰ => 
//│ 						let rcs⁰ = _lh_sim_LH_P3_2⁰(_lh_sim_LH_P2_0⁰)
//│ 						in let ms⁰ = 	
//│ 							let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 								LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {
//│ 									LH_P3 _lh_sim_LH_P3_0¹ _lh_sim_LH_P3_1¹ _lh_sim_LH_P3_2¹ => if polyEq⁰(_lh_sim_LH_P3_1⁰, _lh_sim_LH_P3_1¹) then if polyEq⁰(_lh_sim_LH_P3_2¹, rcs⁰) then [LH_C _lh_sim_LH_P3_0¹ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)
//│ 									| _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}
//│ 								| LH_N  => [LH_N]})
//│ 							in _lh_listcomp_fun⁰(_lh_sim_LH_P2_1⁰)
//│ 						in if null_lh_₁(ms⁰) then [LH_P2 _lh_sim_LH_P2_0⁰ 
//│ 							let t¹ = (fun ys¹ -> ys¹)
//│ 							in let h¹ = [LH_P3 _lh_sim_LH_P3_0⁰ _lh_sim_LH_P3_1⁰ rcs⁰]
//│ 							in (fun ys² -> [LH_C h¹ t¹(ys²)])(_lh_sim_LH_P2_1⁰)] else [LH_P2 newlyDefined_lh_₁(_lh_sim_LH_P3_0⁰, head_lh_₁(ms⁰), _lh_sim_LH_P2_0⁰) _lh_sim_LH_P2_1⁰]
//│ 					| _  => error⁰}) map_lh_₅(ltGraph_lh_₁, _lh_ltGraph_Node_1⁰, 99)]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def map_lh_₁(f³, ls⁴) = case ls⁴ of {
//│ 	LH_C h⁴ t⁴ => [LH_C f³(h⁴) map_lh_₁(f³, t⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f², ls³) = ls³(f²)
//│ def map_lh_₃(f⁵, ls⁶) = ls⁶(f⁵)
//│ def map_lh_₄(f²⁰, ls⁷) = case ls⁷ of {
//│ 	LH_C h¹⁹ t¹⁹ => 
//│ 		let t²⁰ = map_lh_₄(f²⁰, t¹⁹)
//│ 		in let h²⁰ = f²⁰(h¹⁹)
//│ 		in (fun f²¹ -> [LH_C f²¹(h²⁰) t²⁰(f²¹)])
//│ 	| LH_N  => (fun f²² -> [LH_N])}
//│ def map_lh_₅(f⁴, ls⁵, _lh_popOutId_0⁰) = case ls⁵ of {
//│ 	LH_C h⁵ t⁵ => 
//│ 		let t⁶ = map_lh_₅(f⁴, t⁵)
//│ 		in let h⁶ = f⁴(h⁵)
//│ 		in mappend_lh_₂(h⁶, t⁶(99))
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs⁰, ys⁰) = xs⁰(ys⁰)
//│ def mappend_lh_₂(xs¹, ys³) = case xs¹ of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh_₂(t³, ys³)]
//│ 	| LH_N  => ys³}
//│ def mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_arg2⁰) = case _lh_mmapl_arg2⁰ of {
//│ 	LH_N  => retURN_lh_₃([LH_N])
//│ 	| LH_C _lh_mmapl_LH_C_0⁰ _lh_mmapl_LH_C_1⁰ => bind_lh_₄(_lh_mmapl_arg1⁰(_lh_mmapl_LH_C_0⁰), (fun b⁰ -> bind_lh_₃(mmapl_lh_₁(_lh_mmapl_arg1⁰, _lh_mmapl_LH_C_1⁰), (fun bs⁰ -> retURN_lh_₂([LH_C b⁰ bs⁰])))))
//│ 	| _  => error⁰}
//│ def mult__lh_₁(_lh_mult__arg1⁰, _lh_mult__arg2⁰) = 
//│ 	let _lh_label_Node_1⁹ = [LH_C _lh_mult__arg1⁰ [LH_C _lh_mult__arg2⁰ [LH_N]]]
//│ 	in let _lh_label_Node_0⁹ = [LH_C '*' [LH_N]]
//│ 	in (fun label¹⁰ -> (fun s¹³ -> 
//│ 		let _lh_matchIdent¹⁶ = incr_lh_₁(0, s¹³)
//│ 		in _lh_matchIdent¹⁶((fun n⁹ -> bind_lh_₂(mmapl_lh_₁(label¹⁰, _lh_label_Node_1⁹), (fun ts⁹ -> retURN_lh_₁([Node [LH_P2 n⁹ _lh_label_Node_0⁹] ts⁹])))))))
//│ def mult__lh_₂(_lh_mult__arg1², _lh_mult__arg2²) = 
//│ 	let _lh_label_Node_1²⁹ = [LH_C _lh_mult__arg1² [LH_C _lh_mult__arg2² [LH_N]]]
//│ 	in let _lh_label_Node_0²⁹ = [LH_C '*' [LH_N]]
//│ 	in (fun label³¹ -> (fun s³⁶ -> 
//│ 		let _lh_matchIdent⁴³ = incr_lh_₁(0, s³⁶)
//│ 		in _lh_matchIdent⁴³((fun n³⁰ -> bind_lh_₂(mmapl_lh_₁(label³¹, _lh_label_Node_1²⁹), (fun ts²⁹ -> retURN_lh_₁([Node [LH_P2 n³⁰ _lh_label_Node_0²⁹] ts²⁹])))))))
//│ def mult__lh_₃(_lh_mult__arg1¹, _lh_mult__arg2¹) = 
//│ 	let _lh_label_Node_1¹¹ = [LH_C _lh_mult__arg1¹ [LH_C _lh_mult__arg2¹ [LH_N]]]
//│ 	in let _lh_label_Node_0¹¹ = [LH_C '*' [LH_N]]
//│ 	in (fun label¹² -> (fun s¹⁵ -> 
//│ 		let _lh_matchIdent¹⁸ = incr_lh_₁(0, s¹⁵)
//│ 		in _lh_matchIdent¹⁸((fun n¹¹ -> bind_lh_₂(mmapl_lh_₁(label¹², _lh_label_Node_1¹¹), (fun ts¹¹ -> retURN_lh_₁([Node [LH_P2 n¹¹ _lh_label_Node_0¹¹] ts¹¹])))))))
//│ def newlyDefined_lh_₁(_lh_newlyDefined_arg1⁰, _lh_newlyDefined_arg2⁰, _lh_newlyDefined_arg3⁰, _lh_newlyDefined_arg4⁰) = if polyEq⁰(_lh_newlyDefined_arg1⁰, _lh_newlyDefined_arg4⁰) then _lh_newlyDefined_arg2⁰ else _lh_newlyDefined_arg3⁰(_lh_newlyDefined_arg4⁰)
//│ def null_lh_₁(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]
//│ 	| _  => error⁰}
//│ def plus__lh_₁(_lh_plus__arg1¹, _lh_plus__arg2¹) = 
//│ 	let _lh_label_Node_1¹⁴ = [LH_C _lh_plus__arg1¹ [LH_C _lh_plus__arg2¹ [LH_N]]]
//│ 	in let _lh_label_Node_0¹⁴ = [LH_C '+' [LH_N]]
//│ 	in (fun label¹⁶ -> (fun s¹⁹ -> 
//│ 		let _lh_matchIdent²³ = incr_lh_₁(0, s¹⁹)
//│ 		in _lh_matchIdent²³((fun n¹⁵ -> bind_lh_₂(mmapl_lh_₁(label¹⁶, _lh_label_Node_1¹⁴), (fun ts¹⁴ -> retURN_lh_₁([Node [LH_P2 n¹⁵ _lh_label_Node_0¹⁴] ts¹⁴])))))))
//│ def plus__lh_₂(_lh_plus__arg1⁴, _lh_plus__arg2⁴) = 
//│ 	let _lh_label_Node_1²⁶ = [LH_C _lh_plus__arg1⁴ [LH_C _lh_plus__arg2⁴ [LH_N]]]
//│ 	in let _lh_label_Node_0²⁶ = [LH_C '+' [LH_N]]
//│ 	in (fun label²⁸ -> (fun s³³ -> 
//│ 		let _lh_matchIdent⁴⁰ = incr_lh_₁(0, s³³)
//│ 		in _lh_matchIdent⁴⁰((fun n²⁷ -> bind_lh_₂(mmapl_lh_₁(label²⁸, _lh_label_Node_1²⁶), (fun ts²⁶ -> retURN_lh_₁([Node [LH_P2 n²⁷ _lh_label_Node_0²⁶] ts²⁶])))))))
//│ def plus__lh_₃(_lh_plus__arg1², _lh_plus__arg2²) = 
//│ 	let _lh_label_Node_1²¹ = [LH_C _lh_plus__arg1² [LH_C _lh_plus__arg2² [LH_N]]]
//│ 	in let _lh_label_Node_0²¹ = [LH_C '+' [LH_N]]
//│ 	in (fun label²³ -> (fun s²⁷ -> 
//│ 		let _lh_matchIdent³⁵ = incr_lh_₁(0, s²⁷)
//│ 		in _lh_matchIdent³⁵((fun n²² -> bind_lh_₂(mmapl_lh_₁(label²³, _lh_label_Node_1²¹), (fun ts²¹ -> retURN_lh_₁([Node [LH_P2 n²² _lh_label_Node_0²¹] ts²¹])))))))
//│ def plus__lh_₄(_lh_plus__arg1⁵, _lh_plus__arg2⁵) = 
//│ 	let _lh_label_Node_1²⁸ = [LH_C _lh_plus__arg1⁵ [LH_C _lh_plus__arg2⁵ [LH_N]]]
//│ 	in let _lh_label_Node_0²⁸ = [LH_C '+' [LH_N]]
//│ 	in (fun label³⁰ -> (fun s³⁵ -> 
//│ 		let _lh_matchIdent⁴² = incr_lh_₁(0, s³⁵)
//│ 		in _lh_matchIdent⁴²((fun n²⁹ -> bind_lh_₂(mmapl_lh_₁(label³⁰, _lh_label_Node_1²⁸), (fun ts²⁸ -> retURN_lh_₁([Node [LH_P2 n²⁹ _lh_label_Node_0²⁸] ts²⁸])))))))
//│ def plus__lh_₅(_lh_plus__arg1³, _lh_plus__arg2³) = 
//│ 	let _lh_label_Node_1²³ = [LH_C _lh_plus__arg1³ [LH_C _lh_plus__arg2³ [LH_N]]]
//│ 	in let _lh_label_Node_0²³ = [LH_C '+' [LH_N]]
//│ 	in (fun label²⁵ -> (fun s³⁰ -> 
//│ 		let _lh_matchIdent³⁷ = incr_lh_₁(0, s³⁰)
//│ 		in _lh_matchIdent³⁷((fun n²⁴ -> bind_lh_₂(mmapl_lh_₁(label²⁵, _lh_label_Node_1²³), (fun ts²³ -> retURN_lh_₁([Node [LH_P2 n²⁴ _lh_label_Node_0²³] ts²³])))))))
//│ def plus__lh_₆(_lh_plus__arg1⁰, _lh_plus__arg2⁰) = 
//│ 	let _lh_label_Node_1⁰ = [LH_C _lh_plus__arg1⁰ [LH_C _lh_plus__arg2⁰ [LH_N]]]
//│ 	in let _lh_label_Node_0⁰ = [LH_C '+' [LH_N]]
//│ 	in (fun label⁰ -> (fun s⁰ -> 
//│ 		let _lh_matchIdent⁰ = incr_lh_₁(0, s⁰)
//│ 		in _lh_matchIdent⁰((fun n⁰ -> bind_lh_₂(mmapl_lh_₁(label⁰, _lh_label_Node_1⁰), (fun ts⁰ -> retURN_lh_₁([Node [LH_P2 n⁰ _lh_label_Node_0⁰] ts⁰])))))))
//│ def plus__lh_₇(_lh_plus__arg1⁶, _lh_plus__arg2⁶) = 
//│ 	let _lh_label_Node_1³² = [LH_C _lh_plus__arg1⁶ [LH_C _lh_plus__arg2⁶ [LH_N]]]
//│ 	in let _lh_label_Node_0³² = [LH_C '+' [LH_N]]
//│ 	in (fun label³⁴ -> (fun s⁴⁰ -> 
//│ 		let _lh_matchIdent⁴⁹ = incr_lh_₁(0, s⁴⁰)
//│ 		in _lh_matchIdent⁴⁹((fun n⁴⁰ -> bind_lh_₂(mmapl_lh_₁(label³⁴, _lh_label_Node_1³²), (fun ts³² -> retURN_lh_₁([Node [LH_P2 n⁴⁰ _lh_label_Node_0³²] ts³²])))))))
//│ def prod_lh_₁(_lh_prod_arg1⁰) = 
//│ 	let _lh_label_Node_1⁴ = _lh_prod_arg1⁰
//│ 	in let _lh_label_Node_0⁴ = [LH_C 'X' [LH_N]]
//│ 	in (fun label⁵ -> (fun s⁷ -> 
//│ 		let _lh_matchIdent¹⁰ = incr_lh_₁(0, s⁷)
//│ 		in _lh_matchIdent¹⁰((fun n⁴ -> bind_lh_₂(mmapl_lh_₁(label⁵, _lh_label_Node_1⁴), (fun ts⁴ -> retURN_lh_₁([Node [LH_P2 n⁴ _lh_label_Node_0⁴] ts⁴])))))))
//│ def prod_lh_₂(_lh_prod_arg1¹) = 
//│ 	let _lh_label_Node_1²² = _lh_prod_arg1¹
//│ 	in let _lh_label_Node_0²² = [LH_C 'X' [LH_N]]
//│ 	in (fun label²⁴ -> (fun s²⁸ -> 
//│ 		let _lh_matchIdent³⁶ = incr_lh_₁(0, s²⁸)
//│ 		in _lh_matchIdent³⁶((fun n²³ -> bind_lh_₂(mmapl_lh_₁(label²⁴, _lh_label_Node_1²²), (fun ts²² -> retURN_lh_₁([Node [LH_P2 n²³ _lh_label_Node_0²²] ts²²])))))))
//│ def retURN_lh_₁(_lh_retURN_arg1¹, s³) = [LH_P2 s³ _lh_retURN_arg1¹]
//│ def retURN_lh_₂(_lh_retURN_arg1⁰, s²) = [LH_P2 s² _lh_retURN_arg1⁰]
//│ def retURN_lh_₃(_lh_retURN_arg1², s²⁶) = [LH_P2 s²⁶ _lh_retURN_arg1²]
//│ def scanl_lh_₁(_lh_scanl_arg1⁵, _lh_scanl_arg2⁵, _lh_scanl_arg3⁰) = [LH_C _lh_scanl_arg2⁵ 
//│ 	let _lh_matchIdent⁴⁶ = _lh_scanl_arg3⁰
//│ 	in _lh_matchIdent⁴⁶(_lh_scanl_arg1⁵, _lh_scanl_arg2⁵)]
//│ def scanr_lh_₁(_lh_scanr_arg1⁵, _lh_scanr_arg2⁵, _lh_scanr_arg3⁰) = _lh_scanr_arg3⁰(_lh_scanr_arg2⁵, _lh_scanr_arg1⁵)
//│ def startingWith_lh_₁(_lh_startingWith_arg1⁰, _lh_startingWith_arg2⁰) = 
//│ 	let _lh_matchIdent¹⁹ = _lh_startingWith_arg1⁰(_lh_startingWith_arg2⁰)
//│ 	in case _lh_matchIdent¹⁹ of {
//│ 		LH_P2 _lh_startingWith_LH_P2_0⁰ _lh_startingWith_LH_P2_1⁰ => _lh_startingWith_LH_P2_1⁰
//│ 		| _  => error⁰}
//│ def take_lh_₁(n¹³, ls²) = if (n¹³ > 0) then ls²(n¹³) else (fun f¹ -> [LH_N])
//│ def testCse_nofib_lh_₁(_lh_testCse_nofib_arg1⁰) = map_lh_₁((fun i¹ -> if ((i¹ % 6) > 0) then 
//│ 	let t⁷ = 	
//│ 		let t⁸ = 	
//│ 			let t⁹ = 	
//│ 				let t¹⁰ = 	
//│ 					let t¹¹ = 	
//│ 						let t¹² = (fun n³¹ -> (fun f⁶ -> [LH_N]))
//│ 						in let h⁷ = example5_lh_₁(0)
//│ 						in (fun n³² -> 
//│ 							let t¹³ = if ((n³² - 1) > 0) then t¹²((n³² - 1)) else (fun f⁷ -> [LH_N])
//│ 							in let h⁸ = h⁷
//│ 							in (fun f⁸ -> [LH_C f⁸(h⁸) t¹³(f⁸)]))
//│ 					in let h⁹ = example4_lh_₁(0)
//│ 					in (fun n³³ -> 
//│ 						let t¹⁴ = if ((n³³ - 1) > 0) then t¹¹((n³³ - 1)) else (fun f⁹ -> [LH_N])
//│ 						in let h¹⁰ = h⁹
//│ 						in (fun f¹⁰ -> [LH_C f¹⁰(h¹⁰) t¹⁴(f¹⁰)]))
//│ 				in let h¹¹ = example3_lh_₁(0)
//│ 				in (fun n³⁴ -> 
//│ 					let t¹⁵ = if ((n³⁴ - 1) > 0) then t¹⁰((n³⁴ - 1)) else (fun f¹¹ -> [LH_N])
//│ 					in let h¹² = h¹¹
//│ 					in (fun f¹² -> [LH_C f¹²(h¹²) t¹⁵(f¹²)]))
//│ 			in let h¹³ = example2_lh_₁(0)
//│ 			in (fun n³⁵ -> 
//│ 				let t¹⁶ = if ((n³⁵ - 1) > 0) then t⁹((n³⁵ - 1)) else (fun f¹³ -> [LH_N])
//│ 				in let h¹⁴ = h¹³
//│ 				in (fun f¹⁴ -> [LH_C f¹⁴(h¹⁴) t¹⁶(f¹⁴)]))
//│ 		in let h¹⁵ = example1_lh_₁(0)
//│ 		in (fun n³⁶ -> 
//│ 			let t¹⁷ = if ((n³⁶ - 1) > 0) then t⁸((n³⁶ - 1)) else (fun f¹⁵ -> [LH_N])
//│ 			in let h¹⁶ = h¹⁵
//│ 			in (fun f¹⁶ -> [LH_C f¹⁶(h¹⁶) t¹⁷(f¹⁶)]))
//│ 	in let h¹⁷ = example0_lh_₁(0)
//│ 	in (fun n³⁷ -> 
//│ 		let t¹⁸ = if ((n³⁷ - 1) > 0) then t⁷((n³⁷ - 1)) else (fun f¹⁷ -> [LH_N])
//│ 		in let h¹⁸ = h¹⁷
//│ 		in (fun f¹⁸ -> [LH_C f¹⁸(h¹⁸) t¹⁸(f¹⁸)]))((i¹ % 6)) else (fun f¹⁹ -> [LH_N])(cse_lh_₁)), primId⁰(enumFromTo_lh_₁(1, _lh_testCse_nofib_arg1⁰)))
//│ def update_lh_₁(_lh_update_arg1⁰, s²⁹) = 
//│ 	let _lh_bind_LH_P2_1³ = s²⁹
//│ 	in let _lh_bind_LH_P2_0³ = _lh_update_arg1⁰(s²⁹)
//│ 	in (fun _lh_bind_arg2³ -> _lh_bind_arg2³(_lh_bind_LH_P2_1³, _lh_bind_LH_P2_0³))
//│ def zerO_lh_₁(_lh_zerO_arg1⁰) = case _lh_zerO_arg1⁰ of {
//│ 	0  => 
//│ 		let _lh_label_Node_1¹⁶ = [LH_N]
//│ 		in let _lh_label_Node_0¹⁶ = [LH_C '0' [LH_N]]
//│ 		in (fun label¹⁸ -> (fun s²¹ -> 
//│ 			let _lh_matchIdent³⁰ = incr_lh_₁(0, s²¹)
//│ 			in _lh_matchIdent³⁰((fun n¹⁷ -> bind_lh_₂(mmapl_lh_₁(label¹⁸, _lh_label_Node_1¹⁶), (fun ts¹⁶ -> retURN_lh_₁([Node [LH_P2 n¹⁷ _lh_label_Node_0¹⁶] ts¹⁶])))))))
//│ 	| _  => error⁰}
//│ def zerO_lh_₂(_lh_zerO_arg1¹) = case _lh_zerO_arg1¹ of {
//│ 	0  => 
//│ 		let _lh_label_Node_1²⁷ = [LH_N]
//│ 		in let _lh_label_Node_0²⁷ = [LH_C '0' [LH_N]]
//│ 		in (fun label²⁹ -> (fun s³⁴ -> 
//│ 			let _lh_matchIdent⁴¹ = incr_lh_₁(0, s³⁴)
//│ 			in _lh_matchIdent⁴¹((fun n²⁸ -> bind_lh_₂(mmapl_lh_₁(label²⁹, _lh_label_Node_1²⁷), (fun ts²⁷ -> retURN_lh_₁([Node [LH_P2 n²⁸ _lh_label_Node_0²⁷] ts²⁷])))))))
//│ 	| _  => error⁰}
//│ <<<<<<< after floating out <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
