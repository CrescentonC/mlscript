

:lhInHaskell
:lhGenOCaml
null [] = True
null (h:t) = False
flatMap f [] = []
flatMap f (h:t) = (f h) ++ (flatMap f t)
lookup k [] = Nothing
lookup k ((x, v):t) = if eqList k x then Just v else lookup k t
data MyState s a = MyState (s -> (s, a))
myRunState :: MyState s a -> s -> (s, a)
myRunState (MyState f) = f
myBind :: MyState s a -> (a -> MyState s b) -> MyState s b
myBind m f = MyState (\s -> case (myRunState m s) of { (s, a) -> myRunState (f a) s })
myReturn :: a -> MyState s a
myReturn a = MyState (\s -> (s, a))
myGet :: MyState s s
myGet = MyState (\s -> (s, s))
myEvalState :: MyState s a -> s -> a
myEvalState m s = case (myRunState m s) of (s, a) -> a
-- start below
mainSimple args =
        if null args
           then error "Args: number-to-sum-up-to"
           else (showTerm (simpleEval [] (App sum0 (Con ((head args))))))
mainMonad args =
        if null args
           then error "Args: number-to-sum-up-to"
           else (ev (App sum0 (Con ((head args)))))
------------------------------------------------------------
-- Data structures
------------------------------------------------------------
--instance Show (a -> b) where
--    show f = "<function>"
data Term
    = Var String
    | Con Int
    | Incr
    | Add Term Term
    | Lam String Term
    | App Term Term
    | IfZero Term Term Term
    -- the following terms are used internally
    | Thunk Term Env  -- a closure
showTerm (Con a) = "Con " ++ (string_of_int a)
showTerm _ = error "unimplemented"
eqTerm (Var a) (Var b) = eqList a b
eqTerm (Con a) (Con b) = a == b
eqTerm (Incr) (Incr) = True
eqTerm (Add a b) (Add c d) = (eqTerm a c) && (eqTerm b d)
eqTerm (Lam a b) (Lam c d) = (eqList a c) && (eqTerm b d)
eqTerm (App a b) (App c d) = (eqTerm a c) && (eqTerm b d)
eqTerm (IfZero a b c) (IfZero d e f) = (eqTerm a d) && (eqTerm b e) && (eqTerm c f)
eqTerm (Thunk a b) (Thunk c d) = (eqTerm a c) && (eqEnv b d)
eqTerm _ _ = False
eqEnv [] [] = True
eqEnv ((s1, t1):b) ((s2, t2):d) = if ((eqList s1 s2) && (eqTerm t1 t2)) then eqEnv b d else False
eqEnv _ _ = False
eqList [] [] = True
eqList (a:b) (c:d) = if (polyEq a c) then eqList b d else False
eqList _ _ = False
type Env = [(String,Term)]
----------------------------------------------------------------------
-- Evaluate a term
----------------------------------------------------------------------
ev :: Term -> String
ev t =
    let envt2 = myRunState (traverseTerm t) [] in
    case envt2 of (env, t2) -> (pp t2) ++ "  " ++ (ppenv env)
-----------------------------------------------------------------
-- This class extends Monad to have the standard features
-- we expect while evaluating/manipulating expressions.
----------------------------------------------------
-- class (Monad m) => EvalEnvMonad m where
incr :: a -> MyState Env Unit     -- example of a state update function
-- these defines the traversal!
traverseTerm :: Term -> MyState Env Term
--traversePred :: Pred -> m Pred
lookupVar :: String -> MyState Env Term
pushVar   :: String -> Term -> MyState Env a -> MyState Env a
-- currEnv   :: MyState Env Env         -- returns the current environment
withEnv   :: Env -> MyState Env a -> MyState Env a  -- uses the given environment
myMaybe d f Nothing = d 99
myMaybe d f (Just x) = f x
pushVar v t m = myBind myGet (\env -> withEnv ((v,t):env) m)
incr = myReturn Unit
traverseTerm t = eval t
lookupVar v =
    let lookup2 = \env -> myMaybe (\_dummy -> error ("undefined var: " ++ v)) (\x -> x) (lookup v env) in
    myBind myGet (\env -> myReturn (lookup2 env))
-- currEnv = myGet
withEnv tmp m = myReturn (myEvalState m tmp)
-- traverseCon :: (EvalEnvMonad m) => Term -> m Int
traverseCon t =
    myBind (traverseTerm t) (\t' ->
       case t' of
           Con c -> myReturn c
           _ -> error ("Not a Con: " ++ (showTerm t'))
    )
-- eval :: (EvalEnvMonad m) => Term -> m Term
eval (Var x) =
    myBind myGet (\e ->
        myBind (lookupVar x) (\t ->
            traverseTerm t
        )
    )
eval (Add u v) =
        myBind (traverseCon u) (\u' ->
            myBind (traverseCon v) (\v' ->
                myReturn (Con (u' + v'))
            )
        )
eval (Thunk t e) = withEnv e (traverseTerm t)
eval (Lam x b) =
    myBind myGet (\env ->
        myReturn (Thunk (Lam x b) env)
    )
eval (App u v) =
        myBind (traverseTerm u) (\u' ->
            apply u' v
        )
eval (IfZero c a b) =
        myBind (traverseTerm c) (\val ->
            if eqTerm val (Con 0)
                then traverseTerm a
                else traverseTerm b
        )
eval (Con i)   = myReturn (Con i)
eval (Incr)    = myBind (incr) (\_dummy -> myReturn (Con 0))
--apply :: Term -> Term -> StateMonad2 Term
apply (Thunk (Lam x b) e) a =
        myBind myGet (\orig ->
            withEnv e (pushVar x (Thunk a orig) (traverseTerm b))
        )
apply a b         = error ("bad application: " ++ (pp a) ++ "  [ " ++ (pp b) ++ " ].")
----------------------------------------------------------------------
-- A directly recursive Eval, with explicit environment
----------------------------------------------------------------------
-- A trivial monad so that we can use monad syntax.
-- newtype Id a = Id (Identity a)
--     deriving (Applicative, Functor, Monad)
-- instance Show a => Show (Id a) where
--     show (Id i) = show (runIdentity i)
type Id a = a
simpleEvalCon :: Env -> Term -> Id Int
simpleEvalCon env e =
    let e' = simpleEval env e in
    case e' of
        Con c -> c
        _ -> error ("Not a Con: " ++ showTerm e')
simpleEval :: Env -> Term -> Id Term
simpleEval env (Var v) =
    simpleEval env (myMaybe (\_dummy -> error ("undefined var: " ++ v)) (\x -> x) (lookup v env))
simpleEval env (Con e) = Con e
simpleEval env Incr = (Con 0)
simpleEval env (Add u v) =
    let u' = simpleEvalCon env u in
    let v' = simpleEvalCon env v in
    (Con (u' + v'))
    where
    addCons (Con a) (Con b) = (Con (a+b))
    addCons (Con _) b = error ("type error in second arg of Add: " ++ (pp b))
    addCons a (Con _) = error ("type error in first arg of Add: " ++ (pp a))
simpleEval env (Lam x b) = (Thunk (Lam x b) env)  -- return a closure!
simpleEval env (App u v) =
    let u' = simpleEval env u in
    simpleApply env u' v
simpleEval env (IfZero c a b) =
    let val = simpleEval env c in
    if eqTerm val (Con 0)
       then simpleEval env a
       else simpleEval env b
simpleEval env (Thunk t e) =
    simpleEval e t
simpleApply :: Env -> Term -> Term -> Id Term
simpleApply env (Thunk (Lam x b) e) a = simpleEval ((x, Thunk a env) : e) b
simpleApply env a b         = error ("bad application: " ++ (pp a) ++ "  [ " ++ (pp b) ++ " ].")
------------------------------------------------------------
-- Utility functions for printing terms and envs.
------------------------------------------------------------
ppenv env = "[" ++ (flatMap (\vt -> case vt of (v,t) -> v ++ "=" ++ (pp t) ++ ", ") env) ++ "]"
pp :: Term -> String
pp t = ppn 0 t
-- Precedences:
--   0 = Lam and If (contents never bracketed)
--   1 = Add
--   2 = App
--   3 = atomic and bracketed things
ppn :: Int -> Term -> String
ppn _ (Var v) = v
ppn _ (Con i) = string_of_int i
ppn _ (Incr)  = "INCR"
ppn n (Lam v t) = bracket n 0 ("@" ++ v ++ ". " ++ ppn (0-1) t)
ppn n (Add a b) = bracket n 1 (ppn 1 a ++ " + " ++ ppn 1 b)
ppn n (App a b) = bracket n 2 (ppn 2 a ++ " " ++ ppn 2 b)
ppn n (IfZero c a b) = bracket n 0
    ("IF " ++ ppn 0 c ++ " THEN " ++ ppn 0 a ++ " ELSE " ++ ppn 0 b)
ppn n (Thunk t e) = bracket n 0 (ppn 3 t ++ "::" ++ ppenv e)
bracket outer this t = if this <= outer then "(" ++ t ++ ")" else t
------------------------------------------------------------
-- Test Data
------------------------------------------------------------
-- x  = (Var "x")
-- y  = (Var "y")
-- a1 = (Lam "x" (Add (Var "x") (Con 1)))
-- aa = (Lam "x" (Add (Var "x") (Var "x")))
-- These should all return 1
-- iftrue = (IfZero (Con 0) (Con 1) (Con 2))
-- iffalse = (IfZero (Con 1) (Con 2) (Con 1))
-- This function sums all the numbers from 0 upto its argument.
sum0 :: Term
sum0 = (App fix partialSum0)
partialSum0 = (Lam "sum"
          (Lam "n"
           (IfZero (Var "n")
            (Con 0)
            (Add (Var "n") (App (Var "sum") nMinus1)))))
nMinus1 = (Add (Var "n") (Con (0-1)))
lfxx :: Term
lfxx = (Lam "x" (App (Var "F") (App (Var "x") (Var "x"))))
-- This is the fix point combinator:  Y
fix :: Term
fix = (Lam "F" (App lfxx lfxx))
testLambda_nofib n = (mainSimple [n], mainMonad [n])
testLambda_nofib $ primId 80
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> after expansion >>>>>>>>>>
//│ testLambda_nofib_lh_₁(primId⁰(80))
//│ def apply_lh_₁(_lh_apply_arg1⁰, _lh_apply_arg2⁰) = case _lh_apply_arg1⁰ of {
//│ 	Thunk _lh_apply_Thunk_0⁰ _lh_apply_Thunk_1⁰ => case _lh_apply_Thunk_0⁰ of {
//│ 		Lam _lh_apply_Lam_0⁰ _lh_apply_Lam_1⁰ => myBind_lh_₁(myGet_lh_₁, (fun orig⁰ -> withEnv_lh_₁(_lh_apply_Thunk_1⁰, pushVar_lh_₁(_lh_apply_Lam_0⁰, [Thunk _lh_apply_arg2⁰ orig⁰], traverseTerm_lh_₁(_lh_apply_Lam_1⁰)))))
//│ 		| _  => error⁰(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇([LH_C 'b' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'i' [LH_C 'c' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]], pp_lh_₈(_lh_apply_arg1⁰)), [LH_C ' ' [LH_C ' ' [LH_C '[' [LH_C ' ' [LH_N]]]]]), pp_lh_₈(_lh_apply_arg2⁰)), [LH_C ' ' [LH_C ']' [LH_C '.' [LH_N]]]]))}
//│ 	| _  => error⁰(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇([LH_C 'b' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'i' [LH_C 'c' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]], pp_lh_₈(_lh_apply_arg1⁰)), [LH_C ' ' [LH_C ' ' [LH_C '[' [LH_C ' ' [LH_N]]]]]), pp_lh_₈(_lh_apply_arg2⁰)), [LH_C ' ' [LH_C ']' [LH_C '.' [LH_N]]]]))}
//│ def bracket_lh_₁(_lh_bracket_arg1¹, _lh_bracket_arg2¹, _lh_bracket_arg3¹) = if (_lh_bracket_arg2¹ <= _lh_bracket_arg1¹) then mappend_lh_₂₇(mappend_lh_₂₇([LH_C '(' [LH_N]], _lh_bracket_arg3¹), [LH_C ')' [LH_N]]) else _lh_bracket_arg3¹
//│ def bracket_lh_₂(_lh_bracket_arg1⁰, _lh_bracket_arg2⁰, _lh_bracket_arg3⁰) = if (_lh_bracket_arg2⁰ <= _lh_bracket_arg1⁰) then mappend_lh_₂₇(mappend_lh_₂₇([LH_C '(' [LH_N]], _lh_bracket_arg3⁰), [LH_C ')' [LH_N]]) else _lh_bracket_arg3⁰
//│ def eqEnv_lh_₁(_lh_eqEnv_arg1⁰, _lh_eqEnv_arg2⁰) = case _lh_eqEnv_arg1⁰ of {
//│ 	LH_N  => case _lh_eqEnv_arg2⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| LH_C _lh_eqEnv_LH_C_0⁰ _lh_eqEnv_LH_C_1⁰ => case _lh_eqEnv_LH_C_0⁰ of {
//│ 		LH_P2 _lh_eqEnv_LH_P2_0⁰ _lh_eqEnv_LH_P2_1⁰ => case _lh_eqEnv_arg2⁰ of {
//│ 			LH_C _lh_eqEnv_LH_C_0¹ _lh_eqEnv_LH_C_1¹ => case _lh_eqEnv_LH_C_0¹ of {
//│ 				LH_P2 _lh_eqEnv_LH_P2_0¹ _lh_eqEnv_LH_P2_1¹ => if (eqList_lh_₃(_lh_eqEnv_LH_P2_0⁰, _lh_eqEnv_LH_P2_0¹) && eqTerm_lh_₁(_lh_eqEnv_LH_P2_1⁰, _lh_eqEnv_LH_P2_1¹)) then eqEnv_lh_₁(_lh_eqEnv_LH_C_1⁰, _lh_eqEnv_LH_C_1¹) else [False]
//│ 				| _  => [False]}
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqList_lh_₁(_lh_eqList_arg1², _lh_eqList_arg2²) = case _lh_eqList_arg1² of {
//│ 	LH_N  => case _lh_eqList_arg2² of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| LH_C _lh_eqList_LH_C_0⁴ _lh_eqList_LH_C_1⁴ => case _lh_eqList_arg2² of {
//│ 		LH_C _lh_eqList_LH_C_0⁵ _lh_eqList_LH_C_1⁵ => if polyEq⁰(_lh_eqList_LH_C_0⁴, _lh_eqList_LH_C_0⁵) then eqList_lh_₁(_lh_eqList_LH_C_1⁴, _lh_eqList_LH_C_1⁵) else [False]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqList_lh_₂(_lh_eqList_arg1¹, _lh_eqList_arg2¹) = case _lh_eqList_arg1¹ of {
//│ 	LH_N  => case _lh_eqList_arg2¹ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| LH_C _lh_eqList_LH_C_0² _lh_eqList_LH_C_1² => case _lh_eqList_arg2¹ of {
//│ 		LH_C _lh_eqList_LH_C_0³ _lh_eqList_LH_C_1³ => if polyEq⁰(_lh_eqList_LH_C_0², _lh_eqList_LH_C_0³) then eqList_lh_₂(_lh_eqList_LH_C_1², _lh_eqList_LH_C_1³) else [False]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqList_lh_₃(_lh_eqList_arg1⁰, _lh_eqList_arg2⁰) = case _lh_eqList_arg1⁰ of {
//│ 	LH_N  => case _lh_eqList_arg2⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| LH_C _lh_eqList_LH_C_0⁰ _lh_eqList_LH_C_1⁰ => case _lh_eqList_arg2⁰ of {
//│ 		LH_C _lh_eqList_LH_C_0¹ _lh_eqList_LH_C_1¹ => if polyEq⁰(_lh_eqList_LH_C_0⁰, _lh_eqList_LH_C_0¹) then eqList_lh_₃(_lh_eqList_LH_C_1⁰, _lh_eqList_LH_C_1¹) else [False]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqTerm_lh_₁(_lh_eqTerm_arg1⁰, _lh_eqTerm_arg2⁰) = case _lh_eqTerm_arg1⁰ of {
//│ 	Var _lh_eqTerm_Var_0⁰ => case _lh_eqTerm_arg2⁰ of {
//│ 		Var _lh_eqTerm_Var_0¹ => eqList_lh_₂(_lh_eqTerm_Var_0⁰, _lh_eqTerm_Var_0¹)
//│ 		| _  => [False]}
//│ 	| Con _lh_eqTerm_Con_0⁰ => case _lh_eqTerm_arg2⁰ of {
//│ 		Con _lh_eqTerm_Con_0¹ => (_lh_eqTerm_Con_0⁰ == _lh_eqTerm_Con_0¹)
//│ 		| _  => [False]}
//│ 	| Incr  => case _lh_eqTerm_arg2⁰ of {
//│ 		Incr  => [True]
//│ 		| _  => [False]}
//│ 	| Add _lh_eqTerm_Add_0⁰ _lh_eqTerm_Add_1⁰ => case _lh_eqTerm_arg2⁰ of {
//│ 		Add _lh_eqTerm_Add_0¹ _lh_eqTerm_Add_1¹ => (eqTerm_lh_₁(_lh_eqTerm_Add_0⁰, _lh_eqTerm_Add_0¹) && eqTerm_lh_₁(_lh_eqTerm_Add_1⁰, _lh_eqTerm_Add_1¹))
//│ 		| _  => [False]}
//│ 	| Lam _lh_eqTerm_Lam_0⁰ _lh_eqTerm_Lam_1⁰ => case _lh_eqTerm_arg2⁰ of {
//│ 		Lam _lh_eqTerm_Lam_0¹ _lh_eqTerm_Lam_1¹ => (eqList_lh_₃(_lh_eqTerm_Lam_0⁰, _lh_eqTerm_Lam_0¹) && eqTerm_lh_₁(_lh_eqTerm_Lam_1⁰, _lh_eqTerm_Lam_1¹))
//│ 		| _  => [False]}
//│ 	| App _lh_eqTerm_App_0⁰ _lh_eqTerm_App_1⁰ => case _lh_eqTerm_arg2⁰ of {
//│ 		App _lh_eqTerm_App_0¹ _lh_eqTerm_App_1¹ => (eqTerm_lh_₁(_lh_eqTerm_App_0⁰, _lh_eqTerm_App_0¹) && eqTerm_lh_₁(_lh_eqTerm_App_1⁰, _lh_eqTerm_App_1¹))
//│ 		| _  => [False]}
//│ 	| IfZero _lh_eqTerm_IfZero_0⁰ _lh_eqTerm_IfZero_1⁰ _lh_eqTerm_IfZero_2⁰ => case _lh_eqTerm_arg2⁰ of {
//│ 		IfZero _lh_eqTerm_IfZero_0¹ _lh_eqTerm_IfZero_1¹ _lh_eqTerm_IfZero_2¹ => ((eqTerm_lh_₁(_lh_eqTerm_IfZero_0⁰, _lh_eqTerm_IfZero_0¹) && eqTerm_lh_₁(_lh_eqTerm_IfZero_1⁰, _lh_eqTerm_IfZero_1¹)) && eqTerm_lh_₁(_lh_eqTerm_IfZero_2⁰, _lh_eqTerm_IfZero_2¹))
//│ 		| _  => [False]}
//│ 	| Thunk _lh_eqTerm_Thunk_0⁰ _lh_eqTerm_Thunk_1⁰ => case _lh_eqTerm_arg2⁰ of {
//│ 		Thunk _lh_eqTerm_Thunk_0¹ _lh_eqTerm_Thunk_1¹ => (eqTerm_lh_₁(_lh_eqTerm_Thunk_0⁰, _lh_eqTerm_Thunk_0¹) && eqEnv_lh_₁(_lh_eqTerm_Thunk_1⁰, _lh_eqTerm_Thunk_1¹))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def ev_lh_₁(_lh_ev_arg1⁰) = 
//│ 	let envt2⁰ = myRunState_lh_₁(traverseTerm_lh_₁(_lh_ev_arg1⁰), [LH_N])
//│ 	in let _lh_matchIdent⁷ = envt2⁰
//│ 	in case _lh_matchIdent⁷ of {
//│ 		LH_P2 _lh_ev_LH_P2_0⁰ _lh_ev_LH_P2_1⁰ => mappend_lh_₆(mappend_lh_₅(pp_lh_₃(_lh_ev_LH_P2_1⁰), [LH_C ' ' [LH_C ' ' [LH_N]]]), ppenv_lh_₁(_lh_ev_LH_P2_0⁰))}
//│ def eval_lh_₁(_lh_eval_arg1⁰) = case _lh_eval_arg1⁰ of {
//│ 	Var _lh_eval_Var_0⁰ => myBind_lh_₁(myGet_lh_₁, (fun e⁰ -> myBind_lh_₁(lookupVar_lh_₁(_lh_eval_Var_0⁰), (fun t¹¹ -> traverseTerm_lh_₁(t¹¹)))))
//│ 	| Add _lh_eval_Add_0⁰ _lh_eval_Add_1⁰ => myBind_lh_₁(traverseCon_lh_₁(_lh_eval_Add_0⁰), (fun u'⁰ -> myBind_lh_₁(traverseCon_lh_₁(_lh_eval_Add_1⁰), (fun v'⁰ -> myReturn_lh_₁([Con (u'⁰ + v'⁰)])))))
//│ 	| Thunk _lh_eval_Thunk_0⁰ _lh_eval_Thunk_1⁰ => withEnv_lh_₁(_lh_eval_Thunk_1⁰, traverseTerm_lh_₁(_lh_eval_Thunk_0⁰))
//│ 	| Lam _lh_eval_Lam_0⁰ _lh_eval_Lam_1⁰ => myBind_lh_₁(myGet_lh_₁, (fun env³ -> myReturn_lh_₁([Thunk [Lam _lh_eval_Lam_0⁰ _lh_eval_Lam_1⁰] env³])))
//│ 	| App _lh_eval_App_0⁰ _lh_eval_App_1⁰ => myBind_lh_₁(traverseTerm_lh_₁(_lh_eval_App_0⁰), (fun u'¹ -> apply_lh_₁(u'¹, _lh_eval_App_1⁰)))
//│ 	| IfZero _lh_eval_IfZero_0⁰ _lh_eval_IfZero_1⁰ _lh_eval_IfZero_2⁰ => myBind_lh_₁(traverseTerm_lh_₁(_lh_eval_IfZero_0⁰), (fun val⁰ -> if eqTerm_lh_₁(val⁰, [Con 0]) then traverseTerm_lh_₁(_lh_eval_IfZero_1⁰) else traverseTerm_lh_₁(_lh_eval_IfZero_2⁰)))
//│ 	| Con _lh_eval_Con_0⁰ => myReturn_lh_₁([Con _lh_eval_Con_0⁰])
//│ 	| Incr  => myBind_lh_₁(incr_lh_₁, (fun _dummy¹ -> myReturn_lh_₁([Con 0])))}
//│ def fix_lh_₁ = [Lam [LH_C 'F' [LH_N]] [App lfxx_lh_₁ lfxx_lh_₂]]
//│ def fix_lh_₂ = [Lam [LH_C 'F' [LH_N]] [App lfxx_lh_₃ lfxx_lh_₄]]
//│ def flatMap_lh_₁(_lh_flatMap_arg1⁰, _lh_flatMap_arg2⁰) = case _lh_flatMap_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => mappend_lh_₂₇(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh_₁(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰))}
//│ def head_lh_₁(ls¹) = case ls¹ of {
//│ 	LH_C h²⁸ t²⁹ => h²⁸
//│ 	| LH_N  => error⁰}
//│ def head_lh_₂(ls⁰) = case ls⁰ of {
//│ 	LH_C h²⁷ t²⁸ => h²⁷
//│ 	| LH_N  => error⁰}
//│ def incr_lh_₁ = myReturn_lh_₁([Unit])
//│ def lfxx_lh_₁ = [Lam [LH_C 'x' [LH_N]] [App [Var [LH_C 'F' [LH_N]]] [App [Var [LH_C 'x' [LH_N]]] [Var [LH_C 'x' [LH_N]]]]]]
//│ def lfxx_lh_₂ = [Lam [LH_C 'x' [LH_N]] [App [Var [LH_C 'F' [LH_N]]] [App [Var [LH_C 'x' [LH_N]]] [Var [LH_C 'x' [LH_N]]]]]]
//│ def lfxx_lh_₃ = [Lam [LH_C 'x' [LH_N]] [App [Var [LH_C 'F' [LH_N]]] [App [Var [LH_C 'x' [LH_N]]] [Var [LH_C 'x' [LH_N]]]]]]
//│ def lfxx_lh_₄ = [Lam [LH_C 'x' [LH_N]] [App [Var [LH_C 'F' [LH_N]]] [App [Var [LH_C 'x' [LH_N]]] [Var [LH_C 'x' [LH_N]]]]]]
//│ def lookupVar_lh_₁(_lh_lookupVar_arg1⁰) = 
//│ 	let lookup2⁰ = (fun env¹ -> myMaybe_lh_₁((fun _dummy⁰ -> error⁰(mappend_lh_₂₇([LH_C 'u' [LH_C 'n' [LH_C 'd' [LH_C 'e' [LH_C 'f' [LH_C 'i' [LH_C 'n' [LH_C 'e' [LH_C 'd' [LH_C ' ' [LH_C 'v' [LH_C 'a' [LH_C 'r' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]], _lh_lookupVar_arg1⁰))), (fun x⁰ -> x⁰), lookup_lh_₁(_lh_lookupVar_arg1⁰, env¹)))
//│ 	in myBind_lh_₁(myGet_lh_₁, (fun env² -> myReturn_lh_₁(lookup2⁰(env²))))
//│ def lookup_lh_₁(_lh_lookup_arg1⁰, _lh_lookup_arg2⁰) = case _lh_lookup_arg2⁰ of {
//│ 	LH_N  => [Nothing]
//│ 	| LH_C _lh_lookup_LH_C_0⁰ _lh_lookup_LH_C_1⁰ => case _lh_lookup_LH_C_0⁰ of {
//│ 		LH_P2 _lh_lookup_LH_P2_0⁰ _lh_lookup_LH_P2_1⁰ => if eqList_lh_₁(_lh_lookup_arg1⁰, _lh_lookup_LH_P2_0⁰) then [Just _lh_lookup_LH_P2_1⁰] else lookup_lh_₁(_lh_lookup_arg1⁰, _lh_lookup_LH_C_1⁰)}}
//│ def mainMonad_lh_₁(_lh_mainMonad_arg1⁰) = if null_lh_₂(_lh_mainMonad_arg1⁰) then error⁰([LH_C 'A' [LH_C 'r' [LH_C 'g' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'n' [LH_C 'u' [LH_C 'm' [LH_C 'b' [LH_C 'e' [LH_C 'r' [LH_C '-' [LH_C 't' [LH_C 'o' [LH_C '-' [LH_C 's' [LH_C 'u' [LH_C 'm' [LH_C '-' [LH_C 'u' [LH_C 'p' [LH_C '-' [LH_C 't' [LH_C 'o' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]) else ev_lh_₁([App sum0_lh_₂ [Con head_lh_₂(_lh_mainMonad_arg1⁰)]])
//│ def mainSimple_lh_₁(_lh_mainSimple_arg1⁰) = if null_lh_₁(_lh_mainSimple_arg1⁰) then error⁰([LH_C 'A' [LH_C 'r' [LH_C 'g' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'n' [LH_C 'u' [LH_C 'm' [LH_C 'b' [LH_C 'e' [LH_C 'r' [LH_C '-' [LH_C 't' [LH_C 'o' [LH_C '-' [LH_C 's' [LH_C 'u' [LH_C 'm' [LH_C '-' [LH_C 'u' [LH_C 'p' [LH_C '-' [LH_C 't' [LH_C 'o' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]) else showTerm_lh_₁(simpleEval_lh_₁([LH_N], [App sum0_lh_₁ [Con head_lh_₁(_lh_mainSimple_arg1⁰)]]))
//│ def mappend_lh_₁(xs²⁶, ys²⁶) = case xs²⁶ of {
//│ 	LH_C h²⁶ t²⁷ => [LH_C h²⁶ mappend_lh_₁(t²⁷, ys²⁶)]
//│ 	| LH_N  => ys²⁶}
//│ def mappend_lh_₁₀(xs¹⁷, ys¹⁷) = case xs¹⁷ of {
//│ 	LH_C h¹⁷ t¹⁸ => [LH_C h¹⁷ mappend_lh_₁₀(t¹⁸, ys¹⁷)]
//│ 	| LH_N  => ys¹⁷}
//│ def mappend_lh_₁₁(xs¹⁶, ys¹⁶) = case xs¹⁶ of {
//│ 	LH_C h¹⁶ t¹⁷ => [LH_C h¹⁶ mappend_lh_₁₁(t¹⁷, ys¹⁶)]
//│ 	| LH_N  => ys¹⁶}
//│ def mappend_lh_₁₂(xs¹⁵, ys¹⁵) = case xs¹⁵ of {
//│ 	LH_C h¹⁵ t¹⁶ => [LH_C h¹⁵ mappend_lh_₁₂(t¹⁶, ys¹⁵)]
//│ 	| LH_N  => ys¹⁵}
//│ def mappend_lh_₁₃(xs¹⁴, ys¹⁴) = case xs¹⁴ of {
//│ 	LH_C h¹⁴ t¹⁵ => [LH_C h¹⁴ mappend_lh_₁₃(t¹⁵, ys¹⁴)]
//│ 	| LH_N  => ys¹⁴}
//│ def mappend_lh_₁₄(xs¹³, ys¹³) = case xs¹³ of {
//│ 	LH_C h¹³ t¹⁴ => [LH_C h¹³ mappend_lh_₁₄(t¹⁴, ys¹³)]
//│ 	| LH_N  => ys¹³}
//│ def mappend_lh_₁₅(xs¹², ys¹²) = case xs¹² of {
//│ 	LH_C h¹² t¹³ => [LH_C h¹² mappend_lh_₁₅(t¹³, ys¹²)]
//│ 	| LH_N  => ys¹²}
//│ def mappend_lh_₁₆(xs¹¹, ys¹¹) = case xs¹¹ of {
//│ 	LH_C h¹¹ t¹² => [LH_C h¹¹ mappend_lh_₁₆(t¹², ys¹¹)]
//│ 	| LH_N  => ys¹¹}
//│ def mappend_lh_₁₇(xs¹⁰, ys¹⁰) = case xs¹⁰ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ mappend_lh_₁₇(t¹⁰, ys¹⁰)]
//│ 	| LH_N  => ys¹⁰}
//│ def mappend_lh_₁₈(xs⁹, ys⁹) = case xs⁹ of {
//│ 	LH_C h⁹ t⁹ => [LH_C h⁹ mappend_lh_₁₈(t⁹, ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_lh_₁₉(xs⁸, ys⁸) = case xs⁸ of {
//│ 	LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₁₉(t⁸, ys⁸)]
//│ 	| LH_N  => ys⁸}
//│ def mappend_lh_₂(xs²⁵, ys²⁵) = case xs²⁵ of {
//│ 	LH_C h²⁵ t²⁶ => [LH_C h²⁵ mappend_lh_₂(t²⁶, ys²⁵)]
//│ 	| LH_N  => ys²⁵}
//│ def mappend_lh_₂₀(xs⁷, ys⁷) = case xs⁷ of {
//│ 	LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₂₀(t⁷, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₂₁(xs⁶, ys⁶) = case xs⁶ of {
//│ 	LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₂₁(t⁶, ys⁶)]
//│ 	| LH_N  => ys⁶}
//│ def mappend_lh_₂₂(xs⁵, ys⁵) = case xs⁵ of {
//│ 	LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₂₂(t⁵, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mappend_lh_₂₃(xs⁴, ys⁴) = case xs⁴ of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₂₃(t⁴, ys⁴)]
//│ 	| LH_N  => ys⁴}
//│ def mappend_lh_₂₄(xs³, ys³) = case xs³ of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh_₂₄(t³, ys³)]
//│ 	| LH_N  => ys³}
//│ def mappend_lh_₂₅(xs², ys²) = case xs² of {
//│ 	LH_C h² t² => [LH_C h² mappend_lh_₂₅(t², ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₂₆(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₂₆(t¹, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₂₇(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₂₇(t⁰, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def mappend_lh_₃(xs²⁴, ys²⁴) = case xs²⁴ of {
//│ 	LH_C h²⁴ t²⁵ => [LH_C h²⁴ mappend_lh_₃(t²⁵, ys²⁴)]
//│ 	| LH_N  => ys²⁴}
//│ def mappend_lh_₄(xs²³, ys²³) = case xs²³ of {
//│ 	LH_C h²³ t²⁴ => [LH_C h²³ mappend_lh_₄(t²⁴, ys²³)]
//│ 	| LH_N  => ys²³}
//│ def mappend_lh_₅(xs²², ys²²) = case xs²² of {
//│ 	LH_C h²² t²³ => [LH_C h²² mappend_lh_₅(t²³, ys²²)]
//│ 	| LH_N  => ys²²}
//│ def mappend_lh_₆(xs²¹, ys²¹) = case xs²¹ of {
//│ 	LH_C h²¹ t²² => [LH_C h²¹ mappend_lh_₆(t²², ys²¹)]
//│ 	| LH_N  => ys²¹}
//│ def mappend_lh_₇(xs²⁰, ys²⁰) = case xs²⁰ of {
//│ 	LH_C h²⁰ t²¹ => [LH_C h²⁰ mappend_lh_₇(t²¹, ys²⁰)]
//│ 	| LH_N  => ys²⁰}
//│ def mappend_lh_₈(xs¹⁹, ys¹⁹) = case xs¹⁹ of {
//│ 	LH_C h¹⁹ t²⁰ => [LH_C h¹⁹ mappend_lh_₈(t²⁰, ys¹⁹)]
//│ 	| LH_N  => ys¹⁹}
//│ def mappend_lh_₉(xs¹⁸, ys¹⁸) = case xs¹⁸ of {
//│ 	LH_C h¹⁸ t¹⁹ => [LH_C h¹⁸ mappend_lh_₉(t¹⁹, ys¹⁸)]
//│ 	| LH_N  => ys¹⁸}
//│ def myBind_lh_₁(_lh_myBind_arg1⁰, _lh_myBind_arg2⁰) = [MyState (fun s² -> 
//│ 	let _lh_matchIdent² = myRunState_lh_₁(_lh_myBind_arg1⁰, s²)
//│ 	in case _lh_matchIdent² of {
//│ 		LH_P2 _lh_myBind_LH_P2_0⁰ _lh_myBind_LH_P2_1⁰ => myRunState_lh_₁(_lh_myBind_arg2⁰(_lh_myBind_LH_P2_1⁰), _lh_myBind_LH_P2_0⁰)})]
//│ def myEvalState_lh_₁(_lh_myEvalState_arg1⁰, _lh_myEvalState_arg2⁰) = 
//│ 	let _lh_matchIdent⁰ = myRunState_lh_₁(_lh_myEvalState_arg1⁰, _lh_myEvalState_arg2⁰)
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_P2 _lh_myEvalState_LH_P2_0⁰ _lh_myEvalState_LH_P2_1⁰ => _lh_myEvalState_LH_P2_1⁰}
//│ def myGet_lh_₁ = [MyState (fun s¹ -> [LH_P2 s¹ s¹])]
//│ def myMaybe_lh_₁(_lh_myMaybe_arg1⁰, _lh_myMaybe_arg2⁰, _lh_myMaybe_arg3⁰) = case _lh_myMaybe_arg3⁰ of {
//│ 	Nothing  => _lh_myMaybe_arg1⁰(99)
//│ 	| Just _lh_myMaybe_Just_0⁰ => _lh_myMaybe_arg2⁰(_lh_myMaybe_Just_0⁰)}
//│ def myReturn_lh_₁(_lh_myReturn_arg1⁰) = [MyState (fun s⁰ -> [LH_P2 s⁰ _lh_myReturn_arg1⁰])]
//│ def myRunState_lh_₁(_lh_myRunState_arg1⁰) = case _lh_myRunState_arg1⁰ of {
//│ 	MyState _lh_myRunState_MyState_0⁰ => _lh_myRunState_MyState_0⁰}
//│ def nMinus1_lh_₁ = [Add [Var [LH_C 'n' [LH_N]]] [Con (0 - 1)]]
//│ def nMinus1_lh_₂ = [Add [Var [LH_C 'n' [LH_N]]] [Con (0 - 1)]]
//│ def null_lh_₁(_lh_null_arg1¹) = case _lh_null_arg1¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False]}
//│ def null_lh_₂(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]}
//│ def partialSum0_lh_₁ = [Lam [LH_C 's' [LH_C 'u' [LH_C 'm' [LH_N]]]] [Lam [LH_C 'n' [LH_N]] [IfZero [Var [LH_C 'n' [LH_N]]] [Con 0] [Add [Var [LH_C 'n' [LH_N]]] [App [Var [LH_C 's' [LH_C 'u' [LH_C 'm' [LH_N]]]]] nMinus1_lh_₁]]]]]
//│ def partialSum0_lh_₂ = [Lam [LH_C 's' [LH_C 'u' [LH_C 'm' [LH_N]]]] [Lam [LH_C 'n' [LH_N]] [IfZero [Var [LH_C 'n' [LH_N]]] [Con 0] [Add [Var [LH_C 'n' [LH_N]]] [App [Var [LH_C 's' [LH_C 'u' [LH_C 'm' [LH_N]]]]] nMinus1_lh_₂]]]]]
//│ def pp_lh_₁(_lh_pp_arg1⁷) = ppn_lh_₁(0, _lh_pp_arg1⁷)
//│ def pp_lh_₂(_lh_pp_arg1⁶) = ppn_lh_₂(0, _lh_pp_arg1⁶)
//│ def pp_lh_₃(_lh_pp_arg1⁵) = ppn_lh_₃(0, _lh_pp_arg1⁵)
//│ def pp_lh_₄(_lh_pp_arg1⁴) = ppn_lh_₃(0, _lh_pp_arg1⁴)
//│ def pp_lh_₅(_lh_pp_arg1³) = ppn_lh_₃(0, _lh_pp_arg1³)
//│ def pp_lh_₆(_lh_pp_arg1²) = ppn_lh_₃(0, _lh_pp_arg1²)
//│ def pp_lh_₇(_lh_pp_arg1¹) = ppn_lh_₃(0, _lh_pp_arg1¹)
//│ def pp_lh_₈(_lh_pp_arg1⁰) = ppn_lh_₃(0, _lh_pp_arg1⁰)
//│ def ppenv_lh_₁(_lh_ppenv_arg1¹) = mappend_lh_₂₁(mappend_lh_₁₇([LH_C '[' [LH_N]], flatMap_lh_₁((fun vt¹ -> 
//│ 	let _lh_matchIdent⁴ = vt¹
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_P2 _lh_ppenv_LH_P2_0¹ _lh_ppenv_LH_P2_1¹ => mappend_lh_₁₈(mappend_lh_₁₉(mappend_lh_₂₀(_lh_ppenv_LH_P2_0¹, [LH_C '=' [LH_N]]), pp_lh_₈(_lh_ppenv_LH_P2_1¹)), [LH_C ',' [LH_C ' ' [LH_N]]])}), _lh_ppenv_arg1¹)), [LH_C ']' [LH_N]])
//│ def ppenv_lh_₂(_lh_ppenv_arg1⁰) = mappend_lh_₂₇(mappend_lh_₂₇([LH_C '[' [LH_N]], flatMap_lh_₁((fun vt⁰ -> 
//│ 	let _lh_matchIdent³ = vt⁰
//│ 	in case _lh_matchIdent³ of {
//│ 		LH_P2 _lh_ppenv_LH_P2_0⁰ _lh_ppenv_LH_P2_1⁰ => mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇(_lh_ppenv_LH_P2_0⁰, [LH_C '=' [LH_N]]), pp_lh_₁(_lh_ppenv_LH_P2_1⁰)), [LH_C ',' [LH_C ' ' [LH_N]]])}), _lh_ppenv_arg1⁰)), [LH_C ']' [LH_N]])
//│ def ppn_lh_₁(_lh_ppn_arg1², _lh_ppn_arg2²) = case _lh_ppn_arg2² of {
//│ 	Var _lh_ppn_Var_0² => _lh_ppn_Var_0²
//│ 	| Con _lh_ppn_Con_0² => string_of_int⁰(_lh_ppn_Con_0²)
//│ 	| Incr  => [LH_C 'I' [LH_C 'N' [LH_C 'C' [LH_C 'R' [LH_N]]]]]
//│ 	| Lam _lh_ppn_Lam_0² _lh_ppn_Lam_1² => bracket_lh_₂(_lh_ppn_arg1², 0, mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₄([LH_C '@' [LH_N]], _lh_ppn_Lam_0²), [LH_C '.' [LH_C ' ' [LH_N]]]), ppn_lh_₁((0 - 1), _lh_ppn_Lam_1²)))
//│ 	| Add _lh_ppn_Add_0² _lh_ppn_Add_1² => bracket_lh_₁(_lh_ppn_arg1², 1, mappend_lh_₂₇(mappend_lh_₂₇(ppn_lh_₁(1, _lh_ppn_Add_0²), [LH_C ' ' [LH_C '+' [LH_C ' ' [LH_N]]]]), ppn_lh_₁(1, _lh_ppn_Add_1²)))
//│ 	| App _lh_ppn_App_0² _lh_ppn_App_1² => bracket_lh_₂(_lh_ppn_arg1², 2, mappend_lh_₂₇(mappend_lh_₂₇(ppn_lh_₁(2, _lh_ppn_App_0²), [LH_C ' ' [LH_N]]), ppn_lh_₁(2, _lh_ppn_App_1²)))
//│ 	| IfZero _lh_ppn_IfZero_0² _lh_ppn_IfZero_1² _lh_ppn_IfZero_2² => bracket_lh_₂(_lh_ppn_arg1², 0, mappend_lh_₂₆(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₅(mappend_lh_₂₂([LH_C 'I' [LH_C 'F' [LH_C ' ' [LH_N]]]], ppn_lh_₁(0, _lh_ppn_IfZero_0²)), [LH_C ' ' [LH_C 'T' [LH_C 'H' [LH_C 'E' [LH_C 'N' [LH_C ' ' [LH_N]]]]]]]), ppn_lh_₁(0, _lh_ppn_IfZero_1²)), [LH_C ' ' [LH_C 'E' [LH_C 'L' [LH_C 'S' [LH_C 'E' [LH_C ' ' [LH_N]]]]]]]), ppn_lh_₁(0, _lh_ppn_IfZero_2²)))
//│ 	| Thunk _lh_ppn_Thunk_0² _lh_ppn_Thunk_1² => bracket_lh_₂(_lh_ppn_arg1², 0, mappend_lh_₂₇(mappend_lh_₂₃(ppn_lh_₁(3, _lh_ppn_Thunk_0²), [LH_C ':' [LH_C ':' [LH_N]]]), ppenv_lh_₂(_lh_ppn_Thunk_1²)))}
//│ def ppn_lh_₂(_lh_ppn_arg1¹, _lh_ppn_arg2¹) = case _lh_ppn_arg2¹ of {
//│ 	Var _lh_ppn_Var_0¹ => _lh_ppn_Var_0¹
//│ 	| Con _lh_ppn_Con_0¹ => string_of_int⁰(_lh_ppn_Con_0¹)
//│ 	| Incr  => [LH_C 'I' [LH_C 'N' [LH_C 'C' [LH_C 'R' [LH_N]]]]]
//│ 	| Lam _lh_ppn_Lam_0¹ _lh_ppn_Lam_1¹ => bracket_lh_₂(_lh_ppn_arg1¹, 0, mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇([LH_C '@' [LH_N]], _lh_ppn_Lam_0¹), [LH_C '.' [LH_C ' ' [LH_N]]]), ppn_lh_₂((0 - 1), _lh_ppn_Lam_1¹)))
//│ 	| Add _lh_ppn_Add_0¹ _lh_ppn_Add_1¹ => bracket_lh_₂(_lh_ppn_arg1¹, 1, mappend_lh_₂₇(mappend_lh_₂₇(ppn_lh_₂(1, _lh_ppn_Add_0¹), [LH_C ' ' [LH_C '+' [LH_C ' ' [LH_N]]]]), ppn_lh_₂(1, _lh_ppn_Add_1¹)))
//│ 	| App _lh_ppn_App_0¹ _lh_ppn_App_1¹ => bracket_lh_₂(_lh_ppn_arg1¹, 2, mappend_lh_₂₇(mappend_lh_₂₇(ppn_lh_₂(2, _lh_ppn_App_0¹), [LH_C ' ' [LH_N]]), ppn_lh_₂(2, _lh_ppn_App_1¹)))
//│ 	| IfZero _lh_ppn_IfZero_0¹ _lh_ppn_IfZero_1¹ _lh_ppn_IfZero_2¹ => bracket_lh_₂(_lh_ppn_arg1¹, 0, mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇([LH_C 'I' [LH_C 'F' [LH_C ' ' [LH_N]]]], ppn_lh_₂(0, _lh_ppn_IfZero_0¹)), [LH_C ' ' [LH_C 'T' [LH_C 'H' [LH_C 'E' [LH_C 'N' [LH_C ' ' [LH_N]]]]]]]), ppn_lh_₂(0, _lh_ppn_IfZero_1¹)), [LH_C ' ' [LH_C 'E' [LH_C 'L' [LH_C 'S' [LH_C 'E' [LH_C ' ' [LH_N]]]]]]]), ppn_lh_₂(0, _lh_ppn_IfZero_2¹)))
//│ 	| Thunk _lh_ppn_Thunk_0¹ _lh_ppn_Thunk_1¹ => bracket_lh_₂(_lh_ppn_arg1¹, 0, mappend_lh_₂₇(mappend_lh_₂₇(ppn_lh_₂(3, _lh_ppn_Thunk_0¹), [LH_C ':' [LH_C ':' [LH_N]]]), ppenv_lh_₂(_lh_ppn_Thunk_1¹)))}
//│ def ppn_lh_₃(_lh_ppn_arg1⁰, _lh_ppn_arg2⁰) = case _lh_ppn_arg2⁰ of {
//│ 	Var _lh_ppn_Var_0⁰ => _lh_ppn_Var_0⁰
//│ 	| Con _lh_ppn_Con_0⁰ => string_of_int⁰(_lh_ppn_Con_0⁰)
//│ 	| Incr  => [LH_C 'I' [LH_C 'N' [LH_C 'C' [LH_C 'R' [LH_N]]]]]
//│ 	| Lam _lh_ppn_Lam_0⁰ _lh_ppn_Lam_1⁰ => bracket_lh_₂(_lh_ppn_arg1⁰, 0, mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇([LH_C '@' [LH_N]], _lh_ppn_Lam_0⁰), [LH_C '.' [LH_C ' ' [LH_N]]]), ppn_lh_₃((0 - 1), _lh_ppn_Lam_1⁰)))
//│ 	| Add _lh_ppn_Add_0⁰ _lh_ppn_Add_1⁰ => bracket_lh_₂(_lh_ppn_arg1⁰, 1, mappend_lh_₂₇(mappend_lh_₂₇(ppn_lh_₃(1, _lh_ppn_Add_0⁰), [LH_C ' ' [LH_C '+' [LH_C ' ' [LH_N]]]]), ppn_lh_₃(1, _lh_ppn_Add_1⁰)))
//│ 	| App _lh_ppn_App_0⁰ _lh_ppn_App_1⁰ => bracket_lh_₂(_lh_ppn_arg1⁰, 2, mappend_lh_₂₇(mappend_lh_₂₇(ppn_lh_₃(2, _lh_ppn_App_0⁰), [LH_C ' ' [LH_N]]), ppn_lh_₃(2, _lh_ppn_App_1⁰)))
//│ 	| IfZero _lh_ppn_IfZero_0⁰ _lh_ppn_IfZero_1⁰ _lh_ppn_IfZero_2⁰ => bracket_lh_₂(_lh_ppn_arg1⁰, 0, mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇([LH_C 'I' [LH_C 'F' [LH_C ' ' [LH_N]]]], ppn_lh_₃(0, _lh_ppn_IfZero_0⁰)), [LH_C ' ' [LH_C 'T' [LH_C 'H' [LH_C 'E' [LH_C 'N' [LH_C ' ' [LH_N]]]]]]]), ppn_lh_₃(0, _lh_ppn_IfZero_1⁰)), [LH_C ' ' [LH_C 'E' [LH_C 'L' [LH_C 'S' [LH_C 'E' [LH_C ' ' [LH_N]]]]]]]), ppn_lh_₃(0, _lh_ppn_IfZero_2⁰)))
//│ 	| Thunk _lh_ppn_Thunk_0⁰ _lh_ppn_Thunk_1⁰ => bracket_lh_₂(_lh_ppn_arg1⁰, 0, mappend_lh_₂₇(mappend_lh_₂₇(ppn_lh_₃(3, _lh_ppn_Thunk_0⁰), [LH_C ':' [LH_C ':' [LH_N]]]), ppenv_lh_₂(_lh_ppn_Thunk_1⁰)))}
//│ def pushVar_lh_₁(_lh_pushVar_arg1⁰, _lh_pushVar_arg2⁰, _lh_pushVar_arg3⁰) = myBind_lh_₁(myGet_lh_₁, (fun env⁰ -> withEnv_lh_₁([LH_C [LH_P2 _lh_pushVar_arg1⁰ _lh_pushVar_arg2⁰] env⁰], _lh_pushVar_arg3⁰)))
//│ def showTerm_lh_₁(_lh_showTerm_arg1²) = case _lh_showTerm_arg1² of {
//│ 	Con _lh_showTerm_Con_0² => mappend_lh_₁([LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_N]]]]], string_of_int⁰(_lh_showTerm_Con_0²))
//│ 	| _  => error⁰([LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'd' [LH_N]]]]]]]]]]]]]])}
//│ def showTerm_lh_₂(_lh_showTerm_arg1¹) = case _lh_showTerm_arg1¹ of {
//│ 	Con _lh_showTerm_Con_0¹ => mappend_lh_₂₇([LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_N]]]]], string_of_int⁰(_lh_showTerm_Con_0¹))
//│ 	| _  => error⁰([LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'd' [LH_N]]]]]]]]]]]]]])}
//│ def showTerm_lh_₃(_lh_showTerm_arg1⁰) = case _lh_showTerm_arg1⁰ of {
//│ 	Con _lh_showTerm_Con_0⁰ => mappend_lh_₂₇([LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_N]]]]], string_of_int⁰(_lh_showTerm_Con_0⁰))
//│ 	| _  => error⁰([LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'd' [LH_N]]]]]]]]]]]]]])}
//│ def simpleApply_lh_₁(_lh_simpleApply_arg1⁰, _lh_simpleApply_arg2⁰, _lh_simpleApply_arg3⁰) = case _lh_simpleApply_arg2⁰ of {
//│ 	Thunk _lh_simpleApply_Thunk_0⁰ _lh_simpleApply_Thunk_1⁰ => case _lh_simpleApply_Thunk_0⁰ of {
//│ 		Lam _lh_simpleApply_Lam_0⁰ _lh_simpleApply_Lam_1⁰ => simpleEval_lh_₁([LH_C [LH_P2 _lh_simpleApply_Lam_0⁰ [Thunk _lh_simpleApply_arg3⁰ _lh_simpleApply_arg1⁰]] _lh_simpleApply_Thunk_1⁰], _lh_simpleApply_Lam_1⁰)
//│ 		| _  => error⁰(mappend_lh_₁₃(mappend_lh_₈(mappend_lh_₁₀(mappend_lh_₁₄([LH_C 'b' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'i' [LH_C 'c' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]], pp_lh_₇(_lh_simpleApply_arg2⁰)), [LH_C ' ' [LH_C ' ' [LH_C '[' [LH_C ' ' [LH_N]]]]]), pp_lh_₆(_lh_simpleApply_arg3⁰)), [LH_C ' ' [LH_C ']' [LH_C '.' [LH_N]]]]))}
//│ 	| _  => error⁰(mappend_lh_₉(mappend_lh_₁₁(mappend_lh_₁₂(mappend_lh_₁₅([LH_C 'b' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'i' [LH_C 'c' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]], pp_lh_₅(_lh_simpleApply_arg2⁰)), [LH_C ' ' [LH_C ' ' [LH_C '[' [LH_C ' ' [LH_N]]]]]), pp_lh_₄(_lh_simpleApply_arg3⁰)), [LH_C ' ' [LH_C ']' [LH_C '.' [LH_N]]]]))}
//│ def simpleEvalCon_lh_₁(_lh_simpleEvalCon_arg1¹, _lh_simpleEvalCon_arg2¹) = 
//│ 	let e'¹ = simpleEval_lh_₁(_lh_simpleEvalCon_arg1¹, _lh_simpleEvalCon_arg2¹)
//│ 	in let _lh_matchIdent⁶ = e'¹
//│ 	in case _lh_matchIdent⁶ of {
//│ 		Con _lh_simpleEvalCon_Con_0¹ => _lh_simpleEvalCon_Con_0¹
//│ 		| _  => error⁰(mappend_lh_₇([LH_C 'N' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]], showTerm_lh_₂(e'¹)))}
//│ def simpleEvalCon_lh_₂(_lh_simpleEvalCon_arg1⁰, _lh_simpleEvalCon_arg2⁰) = 
//│ 	let e'⁰ = simpleEval_lh_₁(_lh_simpleEvalCon_arg1⁰, _lh_simpleEvalCon_arg2⁰)
//│ 	in let _lh_matchIdent⁵ = e'⁰
//│ 	in case _lh_matchIdent⁵ of {
//│ 		Con _lh_simpleEvalCon_Con_0⁰ => _lh_simpleEvalCon_Con_0⁰
//│ 		| _  => error⁰(mappend_lh_₁₆([LH_C 'N' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]], showTerm_lh_₃(e'⁰)))}
//│ def simpleEval_lh_₁(_lh_simpleEval_arg1⁰, _lh_simpleEval_arg2⁰) = case _lh_simpleEval_arg2⁰ of {
//│ 	Var _lh_simpleEval_Var_0⁰ => simpleEval_lh_₁(_lh_simpleEval_arg1⁰, myMaybe_lh_₁((fun _dummy² -> error⁰(mappend_lh_₃([LH_C 'u' [LH_C 'n' [LH_C 'd' [LH_C 'e' [LH_C 'f' [LH_C 'i' [LH_C 'n' [LH_C 'e' [LH_C 'd' [LH_C ' ' [LH_C 'v' [LH_C 'a' [LH_C 'r' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]], _lh_simpleEval_Var_0⁰))), (fun x¹ -> x¹), lookup_lh_₁(_lh_simpleEval_Var_0⁰, _lh_simpleEval_arg1⁰)))
//│ 	| Con _lh_simpleEval_Con_0⁰ => [Con _lh_simpleEval_Con_0⁰]
//│ 	| Incr  => [Con 0]
//│ 	| Add _lh_simpleEval_Add_0⁰ _lh_simpleEval_Add_1⁰ => 
//│ 		let addCons⁰ = (fun _lh_addCons_arg1⁰ -> (fun _lh_addCons_arg2⁰ -> case _lh_addCons_arg1⁰ of {
//│ 			Con _lh_addCons_Con_0⁰ => case _lh_addCons_arg2⁰ of {
//│ 				Con _lh_addCons_Con_0¹ => [Con (_lh_addCons_Con_0⁰ + _lh_addCons_Con_0¹)]
//│ 				| _  => error⁰(mappend_lh_₂([LH_C 't' [LH_C 'y' [LH_C 'p' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'a' [LH_C 'r' [LH_C 'g' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 'A' [LH_C 'd' [LH_C 'd' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], pp_lh_₁(_lh_addCons_arg2⁰)))}
//│ 			| _  => case _lh_addCons_arg2⁰ of {
//│ 				Con _lh_addCons_Con_0² => error⁰(mappend_lh_₄([LH_C 't' [LH_C 'y' [LH_C 'p' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'f' [LH_C 'i' [LH_C 'r' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C 'r' [LH_C 'g' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 'A' [LH_C 'd' [LH_C 'd' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], pp_lh_₂(_lh_addCons_arg1⁰)))}}))
//│ 		in let u'² = simpleEvalCon_lh_₁(_lh_simpleEval_arg1⁰, _lh_simpleEval_Add_0⁰)
//│ 		in let v'¹ = simpleEvalCon_lh_₂(_lh_simpleEval_arg1⁰, _lh_simpleEval_Add_1⁰)
//│ 		in [Con (u'² + v'¹)]
//│ 	| Lam _lh_simpleEval_Lam_0⁰ _lh_simpleEval_Lam_1⁰ => [Thunk [Lam _lh_simpleEval_Lam_0⁰ _lh_simpleEval_Lam_1⁰] _lh_simpleEval_arg1⁰]
//│ 	| App _lh_simpleEval_App_0⁰ _lh_simpleEval_App_1⁰ => 
//│ 		let u'³ = simpleEval_lh_₁(_lh_simpleEval_arg1⁰, _lh_simpleEval_App_0⁰)
//│ 		in simpleApply_lh_₁(_lh_simpleEval_arg1⁰, u'³, _lh_simpleEval_App_1⁰)
//│ 	| IfZero _lh_simpleEval_IfZero_0⁰ _lh_simpleEval_IfZero_1⁰ _lh_simpleEval_IfZero_2⁰ => 
//│ 		let val¹ = simpleEval_lh_₁(_lh_simpleEval_arg1⁰, _lh_simpleEval_IfZero_0⁰)
//│ 		in if eqTerm_lh_₁(val¹, [Con 0]) then simpleEval_lh_₁(_lh_simpleEval_arg1⁰, _lh_simpleEval_IfZero_1⁰) else simpleEval_lh_₁(_lh_simpleEval_arg1⁰, _lh_simpleEval_IfZero_2⁰)
//│ 	| Thunk _lh_simpleEval_Thunk_0⁰ _lh_simpleEval_Thunk_1⁰ => simpleEval_lh_₁(_lh_simpleEval_Thunk_1⁰, _lh_simpleEval_Thunk_0⁰)}
//│ def sum0_lh_₁ = [App fix_lh_₁ partialSum0_lh_₁]
//│ def sum0_lh_₂ = [App fix_lh_₂ partialSum0_lh_₂]
//│ def testLambda_nofib_lh_₁(_lh_testLambda_nofib_arg1⁰) = [LH_P2 mainSimple_lh_₁([LH_C _lh_testLambda_nofib_arg1⁰ [LH_N]]) mainMonad_lh_₁([LH_C _lh_testLambda_nofib_arg1⁰ [LH_N]])]
//│ def traverseCon_lh_₁(_lh_traverseCon_arg1⁰) = myBind_lh_₁(traverseTerm_lh_₁(_lh_traverseCon_arg1⁰), (fun t'⁰ -> 
//│ 	let _lh_matchIdent¹ = t'⁰
//│ 	in case _lh_matchIdent¹ of {
//│ 		Con _lh_traverseCon_Con_0⁰ => myReturn_lh_₁(_lh_traverseCon_Con_0⁰)
//│ 		| _  => error⁰(mappend_lh_₂₇([LH_C 'N' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]], showTerm_lh_₃(t'⁰)))}))
//│ def traverseTerm_lh_₁(_lh_traverseTerm_arg1⁰) = eval_lh_₁(_lh_traverseTerm_arg1⁰)
//│ def withEnv_lh_₁(_lh_withEnv_arg1⁰, _lh_withEnv_arg2⁰) = myReturn_lh_₁(myEvalState_lh_₁(_lh_withEnv_arg2⁰, _lh_withEnv_arg1⁰))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec mappend_lh__d1_d6 xs_1_1 ys_1_1 =
//│ 		  (match xs_1_1 with
//│ 		    | `LH_C(h_1_1, t_1_2) -> 
//│ 		      (`LH_C(h_1_1, ((mappend_lh__d1_d6 t_1_2) ys_1_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_1);;
//│ 		let rec mappend_lh__d2_d7 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C(h_0, ((mappend_lh__d2_d7 t_0) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec showTerm_lh__d3 _lh_showTerm_arg1_0 =
//│ 		  (match _lh_showTerm_arg1_0 with
//│ 		    | `Con(_lh_showTerm_Con_0_0) -> 
//│ 		      ((mappend_lh__d2_d7 (`LH_C('C', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_N)))))))))) (string_of_int _lh_showTerm_Con_0_0))
//│ 		    | _ -> 
//│ 		      (failwith "msg"(`LH_C('u', (`LH_C('n', (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('e', (`LH_C('d', (`LH_N)))))))))))))))))))))))))))));;
//│ 		let rec mappend_lh__d3 xs_2_4 ys_2_4 =
//│ 		  (match xs_2_4 with
//│ 		    | `LH_C(h_2_4, t_2_5) -> 
//│ 		      (`LH_C(h_2_4, ((mappend_lh__d3 t_2_5) ys_2_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_4);;
//│ 		let rec eqList_lh__d1 _lh_eqList_arg1_2 _lh_eqList_arg2_2 =
//│ 		  (match _lh_eqList_arg1_2 with
//│ 		    | `LH_N -> 
//│ 		      (match _lh_eqList_arg2_2 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `LH_C(_lh_eqList_LH_C_0_4, _lh_eqList_LH_C_1_4) -> 
//│ 		      (match _lh_eqList_arg2_2 with
//│ 		        | `LH_C(_lh_eqList_LH_C_0_5, _lh_eqList_LH_C_1_5) -> 
//│ 		          (if (_lh_eqList_LH_C_0_4 = _lh_eqList_LH_C_0_5) then
//│ 		            ((eqList_lh__d1 _lh_eqList_LH_C_1_4) _lh_eqList_LH_C_1_5)
//│ 		          else
//│ 		            false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec lookup_lh__d1 _lh_lookup_arg1_0 _lh_lookup_arg2_0 =
//│ 		  (match _lh_lookup_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`Nothing)
//│ 		    | `LH_C(_lh_lookup_LH_C_0_0, _lh_lookup_LH_C_1_0) -> 
//│ 		      (match _lh_lookup_LH_C_0_0 with
//│ 		        | `LH_P2(_lh_lookup_LH_P2_0_0, _lh_lookup_LH_P2_1_0) -> 
//│ 		          (if ((eqList_lh__d1 _lh_lookup_arg1_0) _lh_lookup_LH_P2_0_0) then
//│ 		            (`Just(_lh_lookup_LH_P2_1_0))
//│ 		          else
//│ 		            ((lookup_lh__d1 _lh_lookup_arg1_0) _lh_lookup_LH_C_1_0))));;
//│ 		let rec mappend_lh__d8 xs_1_9 ys_1_9 =
//│ 		  (match xs_1_9 with
//│ 		    | `LH_C(h_1_9, t_2_0) -> 
//│ 		      (`LH_C(h_1_9, ((mappend_lh__d8 t_2_0) ys_1_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_9);;
//│ 		let rec mappend_lh__d1_d0 xs_1_7 ys_1_7 =
//│ 		  (match xs_1_7 with
//│ 		    | `LH_C(h_1_7, t_1_8) -> 
//│ 		      (`LH_C(h_1_7, ((mappend_lh__d1_d0 t_1_8) ys_1_7)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_7);;
//│ 		let rec mappend_lh__d1_d4 xs_1_3 ys_1_3 =
//│ 		  (match xs_1_3 with
//│ 		    | `LH_C(h_1_3, t_1_4) -> 
//│ 		      (`LH_C(h_1_3, ((mappend_lh__d1_d4 t_1_4) ys_1_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_3);;
//│ 		let rec mappend_lh__d1_d1 xs_1_6 ys_1_6 =
//│ 		  (match xs_1_6 with
//│ 		    | `LH_C(h_1_6, t_1_7) -> 
//│ 		      (`LH_C(h_1_6, ((mappend_lh__d1_d1 t_1_7) ys_1_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_6);;
//│ 		let rec mappend_lh__d1_d3 xs_1_4 ys_1_4 =
//│ 		  (match xs_1_4 with
//│ 		    | `LH_C(h_1_4, t_1_5) -> 
//│ 		      (`LH_C(h_1_4, ((mappend_lh__d1_d3 t_1_5) ys_1_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_4);;
//│ 		let rec mappend_lh__d9 xs_1_8 ys_1_8 =
//│ 		  (match xs_1_8 with
//│ 		    | `LH_C(h_1_8, t_1_9) -> 
//│ 		      (`LH_C(h_1_8, ((mappend_lh__d9 t_1_9) ys_1_8)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_8);;
//│ 		let rec mappend_lh__d1_d5 xs_1_2 ys_1_2 =
//│ 		  (match xs_1_2 with
//│ 		    | `LH_C(h_1_2, t_1_3) -> 
//│ 		      (`LH_C(h_1_2, ((mappend_lh__d1_d5 t_1_3) ys_1_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_2);;
//│ 		let rec bracket_lh__d2 _lh_bracket_arg1_0 _lh_bracket_arg2_0 _lh_bracket_arg3_0 =
//│ 		  (if (_lh_bracket_arg2_0 <= _lh_bracket_arg1_0) then
//│ 		    ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 (`LH_C('(', (`LH_N)))) _lh_bracket_arg3_0)) (`LH_C(')', (`LH_N))))
//│ 		  else
//│ 		    _lh_bracket_arg3_0);;
//│ 		let rec mappend_lh__d2_d3 xs_4 ys_4 =
//│ 		  (match xs_4 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      (`LH_C(h_4, ((mappend_lh__d2_d3 t_4) ys_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_4);;
//│ 		let rec mappend_lh__d2_d5 xs_2 ys_2 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C(h_2, ((mappend_lh__d2_d5 t_2) ys_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2);;
//│ 		let rec mappend_lh__d2_d4 xs_3 ys_3 =
//│ 		  (match xs_3 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      (`LH_C(h_3, ((mappend_lh__d2_d4 t_3) ys_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_3);;
//│ 		let rec mappend_lh__d2_d6 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (`LH_C(h_1, ((mappend_lh__d2_d6 t_1) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec bracket_lh__d1 _lh_bracket_arg1_1 _lh_bracket_arg2_1 _lh_bracket_arg3_1 =
//│ 		  (if (_lh_bracket_arg2_1 <= _lh_bracket_arg1_1) then
//│ 		    ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 (`LH_C('(', (`LH_N)))) _lh_bracket_arg3_1)) (`LH_C(')', (`LH_N))))
//│ 		  else
//│ 		    _lh_bracket_arg3_1);;
//│ 		let rec mappend_lh__d2_d2 xs_5 ys_5 =
//│ 		  (match xs_5 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      (`LH_C(h_5, ((mappend_lh__d2_d2 t_5) ys_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_5);;
//│ 		let rec flatMap_lh__d1 _lh_flatMap_arg1_0 _lh_flatMap_arg2_0 =
//│ 		  (match _lh_flatMap_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_flatMap_LH_C_0_0, _lh_flatMap_LH_C_1_0) -> 
//│ 		      ((mappend_lh__d2_d7 (_lh_flatMap_arg1_0 _lh_flatMap_LH_C_0_0)) ((flatMap_lh__d1 _lh_flatMap_arg1_0) _lh_flatMap_LH_C_1_0)));;
//│ 		let rec pp_lh__d1 _lh_pp_arg1_7 =
//│ 		  ((ppn_lh__d1 0) _lh_pp_arg1_7)
//│ 		and
//│ 		ppenv_lh__d2 _lh_ppenv_arg1_0 =
//│ 		  ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 (`LH_C('[', (`LH_N)))) ((flatMap_lh__d1 (fun vt_0 -> 
//│ 		    (let rec _lh_matchIdent_3 = vt_0 in
//│ 		      (match _lh_matchIdent_3 with
//│ 		        | `LH_P2(_lh_ppenv_LH_P2_0_0, _lh_ppenv_LH_P2_1_0) -> 
//│ 		          ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 _lh_ppenv_LH_P2_0_0) (`LH_C('=', (`LH_N))))) (pp_lh__d1 _lh_ppenv_LH_P2_1_0))) (`LH_C(',', (`LH_C(' ', (`LH_N)))))))))) _lh_ppenv_arg1_0))) (`LH_C(']', (`LH_N))))
//│ 		and
//│ 		ppn_lh__d1 _lh_ppn_arg1_2 _lh_ppn_arg2_2 =
//│ 		  (match _lh_ppn_arg2_2 with
//│ 		    | `Var(_lh_ppn_Var_0_2) -> 
//│ 		      _lh_ppn_Var_0_2
//│ 		    | `Con(_lh_ppn_Con_0_2) -> 
//│ 		      (string_of_int _lh_ppn_Con_0_2)
//│ 		    | `Incr -> 
//│ 		      (`LH_C('I', (`LH_C('N', (`LH_C('C', (`LH_C('R', (`LH_N)))))))))
//│ 		    | `Lam(_lh_ppn_Lam_0_2, _lh_ppn_Lam_1_2) -> 
//│ 		      (((bracket_lh__d2 _lh_ppn_arg1_2) 0) ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((mappend_lh__d2_d4 (`LH_C('@', (`LH_N)))) _lh_ppn_Lam_0_2)) (`LH_C('.', (`LH_C(' ', (`LH_N))))))) ((ppn_lh__d1 (0 - 1)) _lh_ppn_Lam_1_2)))
//│ 		    | `Add(_lh_ppn_Add_0_2, _lh_ppn_Add_1_2) -> 
//│ 		      (((bracket_lh__d1 _lh_ppn_arg1_2) 1) ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((ppn_lh__d1 1) _lh_ppn_Add_0_2)) (`LH_C(' ', (`LH_C('+', (`LH_C(' ', (`LH_N))))))))) ((ppn_lh__d1 1) _lh_ppn_Add_1_2)))
//│ 		    | `App(_lh_ppn_App_0_2, _lh_ppn_App_1_2) -> 
//│ 		      (((bracket_lh__d2 _lh_ppn_arg1_2) 2) ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((ppn_lh__d1 2) _lh_ppn_App_0_2)) (`LH_C(' ', (`LH_N))))) ((ppn_lh__d1 2) _lh_ppn_App_1_2)))
//│ 		    | `IfZero(_lh_ppn_IfZero_0_2, _lh_ppn_IfZero_1_2, _lh_ppn_IfZero_2_2) -> 
//│ 		      (((bracket_lh__d2 _lh_ppn_arg1_2) 0) ((mappend_lh__d2_d6 ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((mappend_lh__d2_d5 ((mappend_lh__d2_d2 (`LH_C('I', (`LH_C('F', (`LH_C(' ', (`LH_N)))))))) ((ppn_lh__d1 0) _lh_ppn_IfZero_0_2))) (`LH_C(' ', (`LH_C('T', (`LH_C('H', (`LH_C('E', (`LH_C('N', (`LH_C(' ', (`LH_N))))))))))))))) ((ppn_lh__d1 0) _lh_ppn_IfZero_1_2))) (`LH_C(' ', (`LH_C('E', (`LH_C('L', (`LH_C('S', (`LH_C('E', (`LH_C(' ', (`LH_N))))))))))))))) ((ppn_lh__d1 0) _lh_ppn_IfZero_2_2)))
//│ 		    | `Thunk(_lh_ppn_Thunk_0_2, _lh_ppn_Thunk_1_2) -> 
//│ 		      (((bracket_lh__d2 _lh_ppn_arg1_2) 0) ((mappend_lh__d2_d7 ((mappend_lh__d2_d3 ((ppn_lh__d1 3) _lh_ppn_Thunk_0_2)) (`LH_C(':', (`LH_C(':', (`LH_N))))))) (ppenv_lh__d2 _lh_ppn_Thunk_1_2))));;
//│ 		let rec ppn_lh__d3 _lh_ppn_arg1_0 _lh_ppn_arg2_0 =
//│ 		  (match _lh_ppn_arg2_0 with
//│ 		    | `Var(_lh_ppn_Var_0_0) -> 
//│ 		      _lh_ppn_Var_0_0
//│ 		    | `Con(_lh_ppn_Con_0_0) -> 
//│ 		      (string_of_int _lh_ppn_Con_0_0)
//│ 		    | `Incr -> 
//│ 		      (`LH_C('I', (`LH_C('N', (`LH_C('C', (`LH_C('R', (`LH_N)))))))))
//│ 		    | `Lam(_lh_ppn_Lam_0_0, _lh_ppn_Lam_1_0) -> 
//│ 		      (((bracket_lh__d2 _lh_ppn_arg1_0) 0) ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 (`LH_C('@', (`LH_N)))) _lh_ppn_Lam_0_0)) (`LH_C('.', (`LH_C(' ', (`LH_N))))))) ((ppn_lh__d3 (0 - 1)) _lh_ppn_Lam_1_0)))
//│ 		    | `Add(_lh_ppn_Add_0_0, _lh_ppn_Add_1_0) -> 
//│ 		      (((bracket_lh__d2 _lh_ppn_arg1_0) 1) ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((ppn_lh__d3 1) _lh_ppn_Add_0_0)) (`LH_C(' ', (`LH_C('+', (`LH_C(' ', (`LH_N))))))))) ((ppn_lh__d3 1) _lh_ppn_Add_1_0)))
//│ 		    | `App(_lh_ppn_App_0_0, _lh_ppn_App_1_0) -> 
//│ 		      (((bracket_lh__d2 _lh_ppn_arg1_0) 2) ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((ppn_lh__d3 2) _lh_ppn_App_0_0)) (`LH_C(' ', (`LH_N))))) ((ppn_lh__d3 2) _lh_ppn_App_1_0)))
//│ 		    | `IfZero(_lh_ppn_IfZero_0_0, _lh_ppn_IfZero_1_0, _lh_ppn_IfZero_2_0) -> 
//│ 		      (((bracket_lh__d2 _lh_ppn_arg1_0) 0) ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 (`LH_C('I', (`LH_C('F', (`LH_C(' ', (`LH_N)))))))) ((ppn_lh__d3 0) _lh_ppn_IfZero_0_0))) (`LH_C(' ', (`LH_C('T', (`LH_C('H', (`LH_C('E', (`LH_C('N', (`LH_C(' ', (`LH_N))))))))))))))) ((ppn_lh__d3 0) _lh_ppn_IfZero_1_0))) (`LH_C(' ', (`LH_C('E', (`LH_C('L', (`LH_C('S', (`LH_C('E', (`LH_C(' ', (`LH_N))))))))))))))) ((ppn_lh__d3 0) _lh_ppn_IfZero_2_0)))
//│ 		    | `Thunk(_lh_ppn_Thunk_0_0, _lh_ppn_Thunk_1_0) -> 
//│ 		      (((bracket_lh__d2 _lh_ppn_arg1_0) 0) ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((ppn_lh__d3 3) _lh_ppn_Thunk_0_0)) (`LH_C(':', (`LH_C(':', (`LH_N))))))) (ppenv_lh__d2 _lh_ppn_Thunk_1_0))));;
//│ 		let rec pp_lh__d4 _lh_pp_arg1_4 =
//│ 		  ((ppn_lh__d3 0) _lh_pp_arg1_4);;
//│ 		let rec mappend_lh__d1_d2 xs_1_5 ys_1_5 =
//│ 		  (match xs_1_5 with
//│ 		    | `LH_C(h_1_5, t_1_6) -> 
//│ 		      (`LH_C(h_1_5, ((mappend_lh__d1_d2 t_1_6) ys_1_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_5);;
//│ 		let rec pp_lh__d5 _lh_pp_arg1_3 =
//│ 		  ((ppn_lh__d3 0) _lh_pp_arg1_3);;
//│ 		let rec pp_lh__d7 _lh_pp_arg1_1 =
//│ 		  ((ppn_lh__d3 0) _lh_pp_arg1_1);;
//│ 		let rec pp_lh__d6 _lh_pp_arg1_2 =
//│ 		  ((ppn_lh__d3 0) _lh_pp_arg1_2);;
//│ 		let rec mappend_lh__d2 xs_2_5 ys_2_5 =
//│ 		  (match xs_2_5 with
//│ 		    | `LH_C(h_2_5, t_2_6) -> 
//│ 		      (`LH_C(h_2_5, ((mappend_lh__d2 t_2_6) ys_2_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_5);;
//│ 		let rec eqList_lh__d3 _lh_eqList_arg1_0 _lh_eqList_arg2_0 =
//│ 		  (match _lh_eqList_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (match _lh_eqList_arg2_0 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `LH_C(_lh_eqList_LH_C_0_0, _lh_eqList_LH_C_1_0) -> 
//│ 		      (match _lh_eqList_arg2_0 with
//│ 		        | `LH_C(_lh_eqList_LH_C_0_1, _lh_eqList_LH_C_1_1) -> 
//│ 		          (if (_lh_eqList_LH_C_0_0 = _lh_eqList_LH_C_0_1) then
//│ 		            ((eqList_lh__d3 _lh_eqList_LH_C_1_0) _lh_eqList_LH_C_1_1)
//│ 		          else
//│ 		            false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec eqList_lh__d2 _lh_eqList_arg1_1 _lh_eqList_arg2_1 =
//│ 		  (match _lh_eqList_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      (match _lh_eqList_arg2_1 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `LH_C(_lh_eqList_LH_C_0_2, _lh_eqList_LH_C_1_2) -> 
//│ 		      (match _lh_eqList_arg2_1 with
//│ 		        | `LH_C(_lh_eqList_LH_C_0_3, _lh_eqList_LH_C_1_3) -> 
//│ 		          (if (_lh_eqList_LH_C_0_2 = _lh_eqList_LH_C_0_3) then
//│ 		            ((eqList_lh__d2 _lh_eqList_LH_C_1_2) _lh_eqList_LH_C_1_3)
//│ 		          else
//│ 		            false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec eqEnv_lh__d1 _lh_eqEnv_arg1_0 _lh_eqEnv_arg2_0 =
//│ 		  (match _lh_eqEnv_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (match _lh_eqEnv_arg2_0 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `LH_C(_lh_eqEnv_LH_C_0_0, _lh_eqEnv_LH_C_1_0) -> 
//│ 		      (match _lh_eqEnv_LH_C_0_0 with
//│ 		        | `LH_P2(_lh_eqEnv_LH_P2_0_0, _lh_eqEnv_LH_P2_1_0) -> 
//│ 		          (match _lh_eqEnv_arg2_0 with
//│ 		            | `LH_C(_lh_eqEnv_LH_C_0_1, _lh_eqEnv_LH_C_1_1) -> 
//│ 		              (match _lh_eqEnv_LH_C_0_1 with
//│ 		                | `LH_P2(_lh_eqEnv_LH_P2_0_1, _lh_eqEnv_LH_P2_1_1) -> 
//│ 		                  (if (((eqList_lh__d3 _lh_eqEnv_LH_P2_0_0) _lh_eqEnv_LH_P2_0_1) && ((eqTerm_lh__d1 _lh_eqEnv_LH_P2_1_0) _lh_eqEnv_LH_P2_1_1)) then
//│ 		                    ((eqEnv_lh__d1 _lh_eqEnv_LH_C_1_0) _lh_eqEnv_LH_C_1_1)
//│ 		                  else
//│ 		                    false)
//│ 		                | _ -> 
//│ 		                  false)
//│ 		            | _ -> 
//│ 		              false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false)
//│ 		and
//│ 		eqTerm_lh__d1 _lh_eqTerm_arg1_0 _lh_eqTerm_arg2_0 =
//│ 		  (match _lh_eqTerm_arg1_0 with
//│ 		    | `Var(_lh_eqTerm_Var_0_0) -> 
//│ 		      (match _lh_eqTerm_arg2_0 with
//│ 		        | `Var(_lh_eqTerm_Var_0_1) -> 
//│ 		          ((eqList_lh__d2 _lh_eqTerm_Var_0_0) _lh_eqTerm_Var_0_1)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Con(_lh_eqTerm_Con_0_0) -> 
//│ 		      (match _lh_eqTerm_arg2_0 with
//│ 		        | `Con(_lh_eqTerm_Con_0_1) -> 
//│ 		          (_lh_eqTerm_Con_0_0 = _lh_eqTerm_Con_0_1)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Incr -> 
//│ 		      (match _lh_eqTerm_arg2_0 with
//│ 		        | `Incr -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Add(_lh_eqTerm_Add_0_0, _lh_eqTerm_Add_1_0) -> 
//│ 		      (match _lh_eqTerm_arg2_0 with
//│ 		        | `Add(_lh_eqTerm_Add_0_1, _lh_eqTerm_Add_1_1) -> 
//│ 		          (((eqTerm_lh__d1 _lh_eqTerm_Add_0_0) _lh_eqTerm_Add_0_1) && ((eqTerm_lh__d1 _lh_eqTerm_Add_1_0) _lh_eqTerm_Add_1_1))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Lam(_lh_eqTerm_Lam_0_0, _lh_eqTerm_Lam_1_0) -> 
//│ 		      (match _lh_eqTerm_arg2_0 with
//│ 		        | `Lam(_lh_eqTerm_Lam_0_1, _lh_eqTerm_Lam_1_1) -> 
//│ 		          (((eqList_lh__d3 _lh_eqTerm_Lam_0_0) _lh_eqTerm_Lam_0_1) && ((eqTerm_lh__d1 _lh_eqTerm_Lam_1_0) _lh_eqTerm_Lam_1_1))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `App(_lh_eqTerm_App_0_0, _lh_eqTerm_App_1_0) -> 
//│ 		      (match _lh_eqTerm_arg2_0 with
//│ 		        | `App(_lh_eqTerm_App_0_1, _lh_eqTerm_App_1_1) -> 
//│ 		          (((eqTerm_lh__d1 _lh_eqTerm_App_0_0) _lh_eqTerm_App_0_1) && ((eqTerm_lh__d1 _lh_eqTerm_App_1_0) _lh_eqTerm_App_1_1))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `IfZero(_lh_eqTerm_IfZero_0_0, _lh_eqTerm_IfZero_1_0, _lh_eqTerm_IfZero_2_0) -> 
//│ 		      (match _lh_eqTerm_arg2_0 with
//│ 		        | `IfZero(_lh_eqTerm_IfZero_0_1, _lh_eqTerm_IfZero_1_1, _lh_eqTerm_IfZero_2_1) -> 
//│ 		          ((((eqTerm_lh__d1 _lh_eqTerm_IfZero_0_0) _lh_eqTerm_IfZero_0_1) && ((eqTerm_lh__d1 _lh_eqTerm_IfZero_1_0) _lh_eqTerm_IfZero_1_1)) && ((eqTerm_lh__d1 _lh_eqTerm_IfZero_2_0) _lh_eqTerm_IfZero_2_1))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Thunk(_lh_eqTerm_Thunk_0_0, _lh_eqTerm_Thunk_1_0) -> 
//│ 		      (match _lh_eqTerm_arg2_0 with
//│ 		        | `Thunk(_lh_eqTerm_Thunk_0_1, _lh_eqTerm_Thunk_1_1) -> 
//│ 		          (((eqTerm_lh__d1 _lh_eqTerm_Thunk_0_0) _lh_eqTerm_Thunk_0_1) && ((eqEnv_lh__d1 _lh_eqTerm_Thunk_1_0) _lh_eqTerm_Thunk_1_1))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec mappend_lh__d4 xs_2_3 ys_2_3 =
//│ 		  (match xs_2_3 with
//│ 		    | `LH_C(h_2_3, t_2_4) -> 
//│ 		      (`LH_C(h_2_3, ((mappend_lh__d4 t_2_4) ys_2_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_3);;
//│ 		let rec myMaybe_lh__d1 _lh_myMaybe_arg1_0 _lh_myMaybe_arg2_0 _lh_myMaybe_arg3_0 =
//│ 		  (match _lh_myMaybe_arg3_0 with
//│ 		    | `Nothing -> 
//│ 		      (_lh_myMaybe_arg1_0 99)
//│ 		    | `Just(_lh_myMaybe_Just_0_0) -> 
//│ 		      (_lh_myMaybe_arg2_0 _lh_myMaybe_Just_0_0));;
//│ 		let rec ppn_lh__d2 _lh_ppn_arg1_1 _lh_ppn_arg2_1 =
//│ 		  (match _lh_ppn_arg2_1 with
//│ 		    | `Var(_lh_ppn_Var_0_1) -> 
//│ 		      _lh_ppn_Var_0_1
//│ 		    | `Con(_lh_ppn_Con_0_1) -> 
//│ 		      (string_of_int _lh_ppn_Con_0_1)
//│ 		    | `Incr -> 
//│ 		      (`LH_C('I', (`LH_C('N', (`LH_C('C', (`LH_C('R', (`LH_N)))))))))
//│ 		    | `Lam(_lh_ppn_Lam_0_1, _lh_ppn_Lam_1_1) -> 
//│ 		      (((bracket_lh__d2 _lh_ppn_arg1_1) 0) ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 (`LH_C('@', (`LH_N)))) _lh_ppn_Lam_0_1)) (`LH_C('.', (`LH_C(' ', (`LH_N))))))) ((ppn_lh__d2 (0 - 1)) _lh_ppn_Lam_1_1)))
//│ 		    | `Add(_lh_ppn_Add_0_1, _lh_ppn_Add_1_1) -> 
//│ 		      (((bracket_lh__d2 _lh_ppn_arg1_1) 1) ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((ppn_lh__d2 1) _lh_ppn_Add_0_1)) (`LH_C(' ', (`LH_C('+', (`LH_C(' ', (`LH_N))))))))) ((ppn_lh__d2 1) _lh_ppn_Add_1_1)))
//│ 		    | `App(_lh_ppn_App_0_1, _lh_ppn_App_1_1) -> 
//│ 		      (((bracket_lh__d2 _lh_ppn_arg1_1) 2) ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((ppn_lh__d2 2) _lh_ppn_App_0_1)) (`LH_C(' ', (`LH_N))))) ((ppn_lh__d2 2) _lh_ppn_App_1_1)))
//│ 		    | `IfZero(_lh_ppn_IfZero_0_1, _lh_ppn_IfZero_1_1, _lh_ppn_IfZero_2_1) -> 
//│ 		      (((bracket_lh__d2 _lh_ppn_arg1_1) 0) ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 (`LH_C('I', (`LH_C('F', (`LH_C(' ', (`LH_N)))))))) ((ppn_lh__d2 0) _lh_ppn_IfZero_0_1))) (`LH_C(' ', (`LH_C('T', (`LH_C('H', (`LH_C('E', (`LH_C('N', (`LH_C(' ', (`LH_N))))))))))))))) ((ppn_lh__d2 0) _lh_ppn_IfZero_1_1))) (`LH_C(' ', (`LH_C('E', (`LH_C('L', (`LH_C('S', (`LH_C('E', (`LH_C(' ', (`LH_N))))))))))))))) ((ppn_lh__d2 0) _lh_ppn_IfZero_2_1)))
//│ 		    | `Thunk(_lh_ppn_Thunk_0_1, _lh_ppn_Thunk_1_1) -> 
//│ 		      (((bracket_lh__d2 _lh_ppn_arg1_1) 0) ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((ppn_lh__d2 3) _lh_ppn_Thunk_0_1)) (`LH_C(':', (`LH_C(':', (`LH_N))))))) (ppenv_lh__d2 _lh_ppn_Thunk_1_1))));;
//│ 		let rec pp_lh__d2 _lh_pp_arg1_6 =
//│ 		  ((ppn_lh__d2 0) _lh_pp_arg1_6);;
//│ 		let rec showTerm_lh__d2 _lh_showTerm_arg1_1 =
//│ 		  (match _lh_showTerm_arg1_1 with
//│ 		    | `Con(_lh_showTerm_Con_0_1) -> 
//│ 		      ((mappend_lh__d2_d7 (`LH_C('C', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_N)))))))))) (string_of_int _lh_showTerm_Con_0_1))
//│ 		    | _ -> 
//│ 		      (failwith "msg"(`LH_C('u', (`LH_C('n', (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('e', (`LH_C('d', (`LH_N)))))))))))))))))))))))))))));;
//│ 		let rec mappend_lh__d7 xs_2_0 ys_2_0 =
//│ 		  (match xs_2_0 with
//│ 		    | `LH_C(h_2_0, t_2_1) -> 
//│ 		      (`LH_C(h_2_0, ((mappend_lh__d7 t_2_1) ys_2_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_0);;
//│ 		let rec simpleApply_lh__d1 _lh_simpleApply_arg1_0 _lh_simpleApply_arg2_0 _lh_simpleApply_arg3_0 =
//│ 		  (match _lh_simpleApply_arg2_0 with
//│ 		    | `Thunk(_lh_simpleApply_Thunk_0_0, _lh_simpleApply_Thunk_1_0) -> 
//│ 		      (match _lh_simpleApply_Thunk_0_0 with
//│ 		        | `Lam(_lh_simpleApply_Lam_0_0, _lh_simpleApply_Lam_1_0) -> 
//│ 		          ((simpleEval_lh__d1 (`LH_C((`LH_P2(_lh_simpleApply_Lam_0_0, (`Thunk(_lh_simpleApply_arg3_0, _lh_simpleApply_arg1_0)))), _lh_simpleApply_Thunk_1_0))) _lh_simpleApply_Lam_1_0)
//│ 		        | _ -> 
//│ 		          (failwith "msg"((mappend_lh__d1_d3 ((mappend_lh__d8 ((mappend_lh__d1_d0 ((mappend_lh__d1_d4 (`LH_C('b', (`LH_C('a', (`LH_C('d', (`LH_C(' ', (`LH_C('a', (`LH_C('p', (`LH_C('p', (`LH_C('l', (`LH_C('i', (`LH_C('c', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(':', (`LH_C(' ', (`LH_N)))))))))))))))))))))))))))))))))))) (pp_lh__d7 _lh_simpleApply_arg2_0))) (`LH_C(' ', (`LH_C(' ', (`LH_C('[', (`LH_C(' ', (`LH_N))))))))))) (pp_lh__d6 _lh_simpleApply_arg3_0))) (`LH_C(' ', (`LH_C(']', (`LH_C('.', (`LH_N))))))))))
//│ 		    | _ -> 
//│ 		      (failwith "msg"((mappend_lh__d9 ((mappend_lh__d1_d1 ((mappend_lh__d1_d2 ((mappend_lh__d1_d5 (`LH_C('b', (`LH_C('a', (`LH_C('d', (`LH_C(' ', (`LH_C('a', (`LH_C('p', (`LH_C('p', (`LH_C('l', (`LH_C('i', (`LH_C('c', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(':', (`LH_C(' ', (`LH_N)))))))))))))))))))))))))))))))))))) (pp_lh__d5 _lh_simpleApply_arg2_0))) (`LH_C(' ', (`LH_C(' ', (`LH_C('[', (`LH_C(' ', (`LH_N))))))))))) (pp_lh__d4 _lh_simpleApply_arg3_0))) (`LH_C(' ', (`LH_C(']', (`LH_C('.', (`LH_N))))))))))
//│ 		and
//│ 		simpleEvalCon_lh__d1 _lh_simpleEvalCon_arg1_1 _lh_simpleEvalCon_arg2_1 =
//│ 		  (let rec e'_1 = ((simpleEval_lh__d1 _lh_simpleEvalCon_arg1_1) _lh_simpleEvalCon_arg2_1) in
//│ 		    (let rec _lh_matchIdent_6 = e'_1 in
//│ 		      (match _lh_matchIdent_6 with
//│ 		        | `Con(_lh_simpleEvalCon_Con_0_1) -> 
//│ 		          _lh_simpleEvalCon_Con_0_1
//│ 		        | _ -> 
//│ 		          (failwith "msg"((mappend_lh__d7 (`LH_C('N', (`LH_C('o', (`LH_C('t', (`LH_C(' ', (`LH_C('a', (`LH_C(' ', (`LH_C('C', (`LH_C('o', (`LH_C('n', (`LH_C(':', (`LH_C(' ', (`LH_N)))))))))))))))))))))))) (showTerm_lh__d2 e'_1))))))
//│ 		and
//│ 		simpleEvalCon_lh__d2 _lh_simpleEvalCon_arg1_0 _lh_simpleEvalCon_arg2_0 =
//│ 		  (let rec e'_0 = ((simpleEval_lh__d1 _lh_simpleEvalCon_arg1_0) _lh_simpleEvalCon_arg2_0) in
//│ 		    (let rec _lh_matchIdent_5 = e'_0 in
//│ 		      (match _lh_matchIdent_5 with
//│ 		        | `Con(_lh_simpleEvalCon_Con_0_0) -> 
//│ 		          _lh_simpleEvalCon_Con_0_0
//│ 		        | _ -> 
//│ 		          (failwith "msg"((mappend_lh__d1_d6 (`LH_C('N', (`LH_C('o', (`LH_C('t', (`LH_C(' ', (`LH_C('a', (`LH_C(' ', (`LH_C('C', (`LH_C('o', (`LH_C('n', (`LH_C(':', (`LH_C(' ', (`LH_N)))))))))))))))))))))))) (showTerm_lh__d3 e'_0))))))
//│ 		and
//│ 		simpleEval_lh__d1 _lh_simpleEval_arg1_0 _lh_simpleEval_arg2_0 =
//│ 		  (match _lh_simpleEval_arg2_0 with
//│ 		    | `Var(_lh_simpleEval_Var_0_0) -> 
//│ 		      ((simpleEval_lh__d1 _lh_simpleEval_arg1_0) (((myMaybe_lh__d1 (fun _dummy_2 -> 
//│ 		        (failwith "msg"((mappend_lh__d3 (`LH_C('u', (`LH_C('n', (`LH_C('d', (`LH_C('e', (`LH_C('f', (`LH_C('i', (`LH_C('n', (`LH_C('e', (`LH_C('d', (`LH_C(' ', (`LH_C('v', (`LH_C('a', (`LH_C('r', (`LH_C(':', (`LH_C(' ', (`LH_N)))))))))))))))))))))))))))))))) _lh_simpleEval_Var_0_0)))) (fun x_1 -> 
//│ 		        x_1)) ((lookup_lh__d1 _lh_simpleEval_Var_0_0) _lh_simpleEval_arg1_0)))
//│ 		    | `Con(_lh_simpleEval_Con_0_0) -> 
//│ 		      (`Con(_lh_simpleEval_Con_0_0))
//│ 		    | `Incr -> 
//│ 		      (`Con(0))
//│ 		    | `Add(_lh_simpleEval_Add_0_0, _lh_simpleEval_Add_1_0) -> 
//│ 		      (let rec addCons_0 = (fun _lh_addCons_arg1_0 _lh_addCons_arg2_0 -> 
//│ 		        (match _lh_addCons_arg1_0 with
//│ 		          | `Con(_lh_addCons_Con_0_0) -> 
//│ 		            (match _lh_addCons_arg2_0 with
//│ 		              | `Con(_lh_addCons_Con_0_1) -> 
//│ 		                (`Con((_lh_addCons_Con_0_0 + _lh_addCons_Con_0_1)))
//│ 		              | _ -> 
//│ 		                (failwith "msg"((mappend_lh__d2 (`LH_C('t', (`LH_C('y', (`LH_C('p', (`LH_C('e', (`LH_C(' ', (`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C(' ', (`LH_C('s', (`LH_C('e', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('d', (`LH_C(' ', (`LH_C('a', (`LH_C('r', (`LH_C('g', (`LH_C(' ', (`LH_C('o', (`LH_C('f', (`LH_C(' ', (`LH_C('A', (`LH_C('d', (`LH_C('d', (`LH_C(':', (`LH_C(' ', (`LH_N)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (pp_lh__d1 _lh_addCons_arg2_0))))
//│ 		          | _ -> 
//│ 		            (match _lh_addCons_arg2_0 with
//│ 		              | `Con(_lh_addCons_Con_0_2) -> 
//│ 		                (failwith "msg"((mappend_lh__d4 (`LH_C('t', (`LH_C('y', (`LH_C('p', (`LH_C('e', (`LH_C(' ', (`LH_C('e', (`LH_C('r', (`LH_C('r', (`LH_C('o', (`LH_C('r', (`LH_C(' ', (`LH_C('i', (`LH_C('n', (`LH_C(' ', (`LH_C('f', (`LH_C('i', (`LH_C('r', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('a', (`LH_C('r', (`LH_C('g', (`LH_C(' ', (`LH_C('o', (`LH_C('f', (`LH_C(' ', (`LH_C('A', (`LH_C('d', (`LH_C('d', (`LH_C(':', (`LH_C(' ', (`LH_N)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (pp_lh__d2 _lh_addCons_arg1_0)))))) in
//│ 		        (let rec u'_2 = ((simpleEvalCon_lh__d1 _lh_simpleEval_arg1_0) _lh_simpleEval_Add_0_0) in
//│ 		          (let rec v'_1 = ((simpleEvalCon_lh__d2 _lh_simpleEval_arg1_0) _lh_simpleEval_Add_1_0) in
//│ 		            (`Con((u'_2 + v'_1))))))
//│ 		    | `Lam(_lh_simpleEval_Lam_0_0, _lh_simpleEval_Lam_1_0) -> 
//│ 		      (`Thunk((`Lam(_lh_simpleEval_Lam_0_0, _lh_simpleEval_Lam_1_0)), _lh_simpleEval_arg1_0))
//│ 		    | `App(_lh_simpleEval_App_0_0, _lh_simpleEval_App_1_0) -> 
//│ 		      (let rec u'_3 = ((simpleEval_lh__d1 _lh_simpleEval_arg1_0) _lh_simpleEval_App_0_0) in
//│ 		        (((simpleApply_lh__d1 _lh_simpleEval_arg1_0) u'_3) _lh_simpleEval_App_1_0))
//│ 		    | `IfZero(_lh_simpleEval_IfZero_0_0, _lh_simpleEval_IfZero_1_0, _lh_simpleEval_IfZero_2_0) -> 
//│ 		      (let rec val_1 = ((simpleEval_lh__d1 _lh_simpleEval_arg1_0) _lh_simpleEval_IfZero_0_0) in
//│ 		        (if ((eqTerm_lh__d1 val_1) (`Con(0))) then
//│ 		          ((simpleEval_lh__d1 _lh_simpleEval_arg1_0) _lh_simpleEval_IfZero_1_0)
//│ 		        else
//│ 		          ((simpleEval_lh__d1 _lh_simpleEval_arg1_0) _lh_simpleEval_IfZero_2_0)))
//│ 		    | `Thunk(_lh_simpleEval_Thunk_0_0, _lh_simpleEval_Thunk_1_0) -> 
//│ 		      ((simpleEval_lh__d1 _lh_simpleEval_Thunk_1_0) _lh_simpleEval_Thunk_0_0));;
//│ 		let rec mappend_lh__d1 xs_2_6 ys_2_6 =
//│ 		  (match xs_2_6 with
//│ 		    | `LH_C(h_2_6, t_2_7) -> 
//│ 		      (`LH_C(h_2_6, ((mappend_lh__d1 t_2_7) ys_2_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_6);;
//│ 		let rec showTerm_lh__d1 _lh_showTerm_arg1_2 =
//│ 		  (match _lh_showTerm_arg1_2 with
//│ 		    | `Con(_lh_showTerm_Con_0_2) -> 
//│ 		      ((mappend_lh__d1 (`LH_C('C', (`LH_C('o', (`LH_C('n', (`LH_C(' ', (`LH_N)))))))))) (string_of_int _lh_showTerm_Con_0_2))
//│ 		    | _ -> 
//│ 		      (failwith "msg"(`LH_C('u', (`LH_C('n', (`LH_C('i', (`LH_C('m', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_C('m', (`LH_C('e', (`LH_C('n', (`LH_C('t', (`LH_C('e', (`LH_C('d', (`LH_N)))))))))))))))))))))))))))));;
//│ 		let rec nMinus1_lh__d1 =
//│ 		  (`Add((`Var((`LH_C('n', (`LH_N))))), (`Con((0 - 1)))));;
//│ 		let rec partialSum0_lh__d1 =
//│ 		  (`Lam((`LH_C('s', (`LH_C('u', (`LH_C('m', (`LH_N))))))), (`Lam((`LH_C('n', (`LH_N))), (`IfZero((`Var((`LH_C('n', (`LH_N))))), (`Con(0)), (`Add((`Var((`LH_C('n', (`LH_N))))), (`App((`Var((`LH_C('s', (`LH_C('u', (`LH_C('m', (`LH_N))))))))), nMinus1_lh__d1))))))))));;
//│ 		let rec lfxx_lh__d1 =
//│ 		  (`Lam((`LH_C('x', (`LH_N))), (`App((`Var((`LH_C('F', (`LH_N))))), (`App((`Var((`LH_C('x', (`LH_N))))), (`Var((`LH_C('x', (`LH_N)))))))))));;
//│ 		let rec lfxx_lh__d2 =
//│ 		  (`Lam((`LH_C('x', (`LH_N))), (`App((`Var((`LH_C('F', (`LH_N))))), (`App((`Var((`LH_C('x', (`LH_N))))), (`Var((`LH_C('x', (`LH_N)))))))))));;
//│ 		let rec fix_lh__d1 =
//│ 		  (`Lam((`LH_C('F', (`LH_N))), (`App(lfxx_lh__d1, lfxx_lh__d2))));;
//│ 		let rec sum0_lh__d1 =
//│ 		  (`App(fix_lh__d1, partialSum0_lh__d1));;
//│ 		let rec null_lh__d1 _lh_null_arg1_1 =
//│ 		  (match _lh_null_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_1, _lh_null_LH_C_1_1) -> 
//│ 		      false);;
//│ 		let rec head_lh__d1 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_2_8, t_2_9) -> 
//│ 		      h_2_8
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec mainSimple_lh__d1 _lh_mainSimple_arg1_0 =
//│ 		  (if (null_lh__d1 _lh_mainSimple_arg1_0) then
//│ 		    (failwith "msg"(`LH_C('A', (`LH_C('r', (`LH_C('g', (`LH_C('s', (`LH_C(':', (`LH_C(' ', (`LH_C('n', (`LH_C('u', (`LH_C('m', (`LH_C('b', (`LH_C('e', (`LH_C('r', (`LH_C('-', (`LH_C('t', (`LH_C('o', (`LH_C('-', (`LH_C('s', (`LH_C('u', (`LH_C('m', (`LH_C('-', (`LH_C('u', (`LH_C('p', (`LH_C('-', (`LH_C('t', (`LH_C('o', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))
//│ 		  else
//│ 		    (showTerm_lh__d1 ((simpleEval_lh__d1 (`LH_N)) (`App(sum0_lh__d1, (`Con((head_lh__d1 _lh_mainSimple_arg1_0))))))));;
//│ 		let rec null_lh__d2 _lh_null_arg1_0 =
//│ 		  (match _lh_null_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_null_LH_C_0_0, _lh_null_LH_C_1_0) -> 
//│ 		      false);;
//│ 		let rec head_lh__d2 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_2_7, t_2_8) -> 
//│ 		      h_2_7
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec pp_lh__d3 _lh_pp_arg1_5 =
//│ 		  ((ppn_lh__d3 0) _lh_pp_arg1_5);;
//│ 		let rec myRunState_lh__d1 _lh_myRunState_arg1_0 =
//│ 		  (match _lh_myRunState_arg1_0 with
//│ 		    | `MyState(_lh_myRunState_MyState_0_0) -> 
//│ 		      _lh_myRunState_MyState_0_0);;
//│ 		let rec mappend_lh__d5 xs_2_2 ys_2_2 =
//│ 		  (match xs_2_2 with
//│ 		    | `LH_C(h_2_2, t_2_3) -> 
//│ 		      (`LH_C(h_2_2, ((mappend_lh__d5 t_2_3) ys_2_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_2);;
//│ 		let rec mappend_lh__d2_d1 xs_6 ys_6 =
//│ 		  (match xs_6 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      (`LH_C(h_6, ((mappend_lh__d2_d1 t_6) ys_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_6);;
//│ 		let rec pp_lh__d8 _lh_pp_arg1_0 =
//│ 		  ((ppn_lh__d3 0) _lh_pp_arg1_0);;
//│ 		let rec mappend_lh__d1_d8 xs_9 ys_9 =
//│ 		  (match xs_9 with
//│ 		    | `LH_C(h_9, t_9) -> 
//│ 		      (`LH_C(h_9, ((mappend_lh__d1_d8 t_9) ys_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_9);;
//│ 		let rec mappend_lh__d1_d9 xs_8 ys_8 =
//│ 		  (match xs_8 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      (`LH_C(h_8, ((mappend_lh__d1_d9 t_8) ys_8)))
//│ 		    | `LH_N -> 
//│ 		      ys_8);;
//│ 		let rec mappend_lh__d2_d0 xs_7 ys_7 =
//│ 		  (match xs_7 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      (`LH_C(h_7, ((mappend_lh__d2_d0 t_7) ys_7)))
//│ 		    | `LH_N -> 
//│ 		      ys_7);;
//│ 		let rec mappend_lh__d1_d7 xs_1_0 ys_1_0 =
//│ 		  (match xs_1_0 with
//│ 		    | `LH_C(h_1_0, t_1_0) -> 
//│ 		      (`LH_C(h_1_0, ((mappend_lh__d1_d7 t_1_0) ys_1_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_0);;
//│ 		let rec ppenv_lh__d1 _lh_ppenv_arg1_1 =
//│ 		  ((mappend_lh__d2_d1 ((mappend_lh__d1_d7 (`LH_C('[', (`LH_N)))) ((flatMap_lh__d1 (fun vt_1 -> 
//│ 		    (let rec _lh_matchIdent_4 = vt_1 in
//│ 		      (match _lh_matchIdent_4 with
//│ 		        | `LH_P2(_lh_ppenv_LH_P2_0_1, _lh_ppenv_LH_P2_1_1) -> 
//│ 		          ((mappend_lh__d1_d8 ((mappend_lh__d1_d9 ((mappend_lh__d2_d0 _lh_ppenv_LH_P2_0_1) (`LH_C('=', (`LH_N))))) (pp_lh__d8 _lh_ppenv_LH_P2_1_1))) (`LH_C(',', (`LH_C(' ', (`LH_N)))))))))) _lh_ppenv_arg1_1))) (`LH_C(']', (`LH_N))));;
//│ 		let rec myReturn_lh__d1 _lh_myReturn_arg1_0 =
//│ 		  (`MyState((fun s_0 -> 
//│ 		    (`LH_P2(s_0, _lh_myReturn_arg1_0)))));;
//│ 		let rec myBind_lh__d1 _lh_myBind_arg1_0 _lh_myBind_arg2_0 =
//│ 		  (`MyState((fun s_2 -> 
//│ 		    (let rec _lh_matchIdent_2 = ((myRunState_lh__d1 _lh_myBind_arg1_0) s_2) in
//│ 		      (match _lh_matchIdent_2 with
//│ 		        | `LH_P2(_lh_myBind_LH_P2_0_0, _lh_myBind_LH_P2_1_0) -> 
//│ 		          ((myRunState_lh__d1 (_lh_myBind_arg2_0 _lh_myBind_LH_P2_1_0)) _lh_myBind_LH_P2_0_0))))));;
//│ 		let rec myGet_lh__d1 =
//│ 		  (`MyState((fun s_1 -> 
//│ 		    (`LH_P2(s_1, s_1)))));;
//│ 		let rec lookupVar_lh__d1 _lh_lookupVar_arg1_0 =
//│ 		  (let rec lookup2_0 = (fun env_1 -> 
//│ 		    (((myMaybe_lh__d1 (fun _dummy_0 -> 
//│ 		      (failwith "msg"((mappend_lh__d2_d7 (`LH_C('u', (`LH_C('n', (`LH_C('d', (`LH_C('e', (`LH_C('f', (`LH_C('i', (`LH_C('n', (`LH_C('e', (`LH_C('d', (`LH_C(' ', (`LH_C('v', (`LH_C('a', (`LH_C('r', (`LH_C(':', (`LH_C(' ', (`LH_N)))))))))))))))))))))))))))))))) _lh_lookupVar_arg1_0)))) (fun x_0 -> 
//│ 		      x_0)) ((lookup_lh__d1 _lh_lookupVar_arg1_0) env_1))) in
//│ 		    ((myBind_lh__d1 myGet_lh__d1) (fun env_2 -> 
//│ 		      (myReturn_lh__d1 (lookup2_0 env_2)))));;
//│ 		let rec incr_lh__d1 =
//│ 		  (myReturn_lh__d1 (`Unit));;
//│ 		let rec myEvalState_lh__d1 _lh_myEvalState_arg1_0 _lh_myEvalState_arg2_0 =
//│ 		  (let rec _lh_matchIdent_0 = ((myRunState_lh__d1 _lh_myEvalState_arg1_0) _lh_myEvalState_arg2_0) in
//│ 		    (match _lh_matchIdent_0 with
//│ 		      | `LH_P2(_lh_myEvalState_LH_P2_0_0, _lh_myEvalState_LH_P2_1_0) -> 
//│ 		        _lh_myEvalState_LH_P2_1_0));;
//│ 		let rec withEnv_lh__d1 _lh_withEnv_arg1_0 _lh_withEnv_arg2_0 =
//│ 		  (myReturn_lh__d1 ((myEvalState_lh__d1 _lh_withEnv_arg2_0) _lh_withEnv_arg1_0));;
//│ 		let rec pushVar_lh__d1 _lh_pushVar_arg1_0 _lh_pushVar_arg2_0 _lh_pushVar_arg3_0 =
//│ 		  ((myBind_lh__d1 myGet_lh__d1) (fun env_0 -> 
//│ 		    ((withEnv_lh__d1 (`LH_C((`LH_P2(_lh_pushVar_arg1_0, _lh_pushVar_arg2_0)), env_0))) _lh_pushVar_arg3_0)));;
//│ 		let rec apply_lh__d1 _lh_apply_arg1_0 _lh_apply_arg2_0 =
//│ 		  (match _lh_apply_arg1_0 with
//│ 		    | `Thunk(_lh_apply_Thunk_0_0, _lh_apply_Thunk_1_0) -> 
//│ 		      (match _lh_apply_Thunk_0_0 with
//│ 		        | `Lam(_lh_apply_Lam_0_0, _lh_apply_Lam_1_0) -> 
//│ 		          ((myBind_lh__d1 myGet_lh__d1) (fun orig_0 -> 
//│ 		            ((withEnv_lh__d1 _lh_apply_Thunk_1_0) (((pushVar_lh__d1 _lh_apply_Lam_0_0) (`Thunk(_lh_apply_arg2_0, orig_0))) (traverseTerm_lh__d1 _lh_apply_Lam_1_0)))))
//│ 		        | _ -> 
//│ 		          (failwith "msg"((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 (`LH_C('b', (`LH_C('a', (`LH_C('d', (`LH_C(' ', (`LH_C('a', (`LH_C('p', (`LH_C('p', (`LH_C('l', (`LH_C('i', (`LH_C('c', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(':', (`LH_C(' ', (`LH_N)))))))))))))))))))))))))))))))))))) (pp_lh__d8 _lh_apply_arg1_0))) (`LH_C(' ', (`LH_C(' ', (`LH_C('[', (`LH_C(' ', (`LH_N))))))))))) (pp_lh__d8 _lh_apply_arg2_0))) (`LH_C(' ', (`LH_C(']', (`LH_C('.', (`LH_N))))))))))
//│ 		    | _ -> 
//│ 		      (failwith "msg"((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 ((mappend_lh__d2_d7 (`LH_C('b', (`LH_C('a', (`LH_C('d', (`LH_C(' ', (`LH_C('a', (`LH_C('p', (`LH_C('p', (`LH_C('l', (`LH_C('i', (`LH_C('c', (`LH_C('a', (`LH_C('t', (`LH_C('i', (`LH_C('o', (`LH_C('n', (`LH_C(':', (`LH_C(' ', (`LH_N)))))))))))))))))))))))))))))))))))) (pp_lh__d8 _lh_apply_arg1_0))) (`LH_C(' ', (`LH_C(' ', (`LH_C('[', (`LH_C(' ', (`LH_N))))))))))) (pp_lh__d8 _lh_apply_arg2_0))) (`LH_C(' ', (`LH_C(']', (`LH_C('.', (`LH_N))))))))))
//│ 		and
//│ 		eval_lh__d1 _lh_eval_arg1_0 =
//│ 		  (match _lh_eval_arg1_0 with
//│ 		    | `Var(_lh_eval_Var_0_0) -> 
//│ 		      ((myBind_lh__d1 myGet_lh__d1) (fun e_0 -> 
//│ 		        ((myBind_lh__d1 (lookupVar_lh__d1 _lh_eval_Var_0_0)) (fun t_1_1 -> 
//│ 		          (traverseTerm_lh__d1 t_1_1)))))
//│ 		    | `Add(_lh_eval_Add_0_0, _lh_eval_Add_1_0) -> 
//│ 		      ((myBind_lh__d1 (traverseCon_lh__d1 _lh_eval_Add_0_0)) (fun u'_0 -> 
//│ 		        ((myBind_lh__d1 (traverseCon_lh__d1 _lh_eval_Add_1_0)) (fun v'_0 -> 
//│ 		          (myReturn_lh__d1 (`Con((u'_0 + v'_0))))))))
//│ 		    | `Thunk(_lh_eval_Thunk_0_0, _lh_eval_Thunk_1_0) -> 
//│ 		      ((withEnv_lh__d1 _lh_eval_Thunk_1_0) (traverseTerm_lh__d1 _lh_eval_Thunk_0_0))
//│ 		    | `Lam(_lh_eval_Lam_0_0, _lh_eval_Lam_1_0) -> 
//│ 		      ((myBind_lh__d1 myGet_lh__d1) (fun env_3 -> 
//│ 		        (myReturn_lh__d1 (`Thunk((`Lam(_lh_eval_Lam_0_0, _lh_eval_Lam_1_0)), env_3)))))
//│ 		    | `App(_lh_eval_App_0_0, _lh_eval_App_1_0) -> 
//│ 		      ((myBind_lh__d1 (traverseTerm_lh__d1 _lh_eval_App_0_0)) (fun u'_1 -> 
//│ 		        ((apply_lh__d1 u'_1) _lh_eval_App_1_0)))
//│ 		    | `IfZero(_lh_eval_IfZero_0_0, _lh_eval_IfZero_1_0, _lh_eval_IfZero_2_0) -> 
//│ 		      ((myBind_lh__d1 (traverseTerm_lh__d1 _lh_eval_IfZero_0_0)) (fun val_0 -> 
//│ 		        (if ((eqTerm_lh__d1 val_0) (`Con(0))) then
//│ 		          (traverseTerm_lh__d1 _lh_eval_IfZero_1_0)
//│ 		        else
//│ 		          (traverseTerm_lh__d1 _lh_eval_IfZero_2_0))))
//│ 		    | `Con(_lh_eval_Con_0_0) -> 
//│ 		      (myReturn_lh__d1 (`Con(_lh_eval_Con_0_0)))
//│ 		    | `Incr -> 
//│ 		      ((myBind_lh__d1 incr_lh__d1) (fun _dummy_1 -> 
//│ 		        (myReturn_lh__d1 (`Con(0))))))
//│ 		and
//│ 		traverseCon_lh__d1 _lh_traverseCon_arg1_0 =
//│ 		  ((myBind_lh__d1 (traverseTerm_lh__d1 _lh_traverseCon_arg1_0)) (fun t'_0 -> 
//│ 		    (let rec _lh_matchIdent_1 = t'_0 in
//│ 		      (match _lh_matchIdent_1 with
//│ 		        | `Con(_lh_traverseCon_Con_0_0) -> 
//│ 		          (myReturn_lh__d1 _lh_traverseCon_Con_0_0)
//│ 		        | _ -> 
//│ 		          (failwith "msg"((mappend_lh__d2_d7 (`LH_C('N', (`LH_C('o', (`LH_C('t', (`LH_C(' ', (`LH_C('a', (`LH_C(' ', (`LH_C('C', (`LH_C('o', (`LH_C('n', (`LH_C(':', (`LH_C(' ', (`LH_N)))))))))))))))))))))))) (showTerm_lh__d3 t'_0)))))))
//│ 		and
//│ 		traverseTerm_lh__d1 _lh_traverseTerm_arg1_0 =
//│ 		  (eval_lh__d1 _lh_traverseTerm_arg1_0);;
//│ 		let rec mappend_lh__d6 xs_2_1 ys_2_1 =
//│ 		  (match xs_2_1 with
//│ 		    | `LH_C(h_2_1, t_2_2) -> 
//│ 		      (`LH_C(h_2_1, ((mappend_lh__d6 t_2_2) ys_2_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_2_1);;
//│ 		let rec ev_lh__d1 _lh_ev_arg1_0 =
//│ 		  (let rec envt2_0 = ((myRunState_lh__d1 (traverseTerm_lh__d1 _lh_ev_arg1_0)) (`LH_N)) in
//│ 		    (let rec _lh_matchIdent_7 = envt2_0 in
//│ 		      (match _lh_matchIdent_7 with
//│ 		        | `LH_P2(_lh_ev_LH_P2_0_0, _lh_ev_LH_P2_1_0) -> 
//│ 		          ((mappend_lh__d6 ((mappend_lh__d5 (pp_lh__d3 _lh_ev_LH_P2_1_0)) (`LH_C(' ', (`LH_C(' ', (`LH_N))))))) (ppenv_lh__d1 _lh_ev_LH_P2_0_0)))));;
//│ 		let rec nMinus1_lh__d2 =
//│ 		  (`Add((`Var((`LH_C('n', (`LH_N))))), (`Con((0 - 1)))));;
//│ 		let rec partialSum0_lh__d2 =
//│ 		  (`Lam((`LH_C('s', (`LH_C('u', (`LH_C('m', (`LH_N))))))), (`Lam((`LH_C('n', (`LH_N))), (`IfZero((`Var((`LH_C('n', (`LH_N))))), (`Con(0)), (`Add((`Var((`LH_C('n', (`LH_N))))), (`App((`Var((`LH_C('s', (`LH_C('u', (`LH_C('m', (`LH_N))))))))), nMinus1_lh__d2))))))))));;
//│ 		let rec lfxx_lh__d3 =
//│ 		  (`Lam((`LH_C('x', (`LH_N))), (`App((`Var((`LH_C('F', (`LH_N))))), (`App((`Var((`LH_C('x', (`LH_N))))), (`Var((`LH_C('x', (`LH_N)))))))))));;
//│ 		let rec lfxx_lh__d4 =
//│ 		  (`Lam((`LH_C('x', (`LH_N))), (`App((`Var((`LH_C('F', (`LH_N))))), (`App((`Var((`LH_C('x', (`LH_N))))), (`Var((`LH_C('x', (`LH_N)))))))))));;
//│ 		let rec fix_lh__d2 =
//│ 		  (`Lam((`LH_C('F', (`LH_N))), (`App(lfxx_lh__d3, lfxx_lh__d4))));;
//│ 		let rec sum0_lh__d2 =
//│ 		  (`App(fix_lh__d2, partialSum0_lh__d2));;
//│ 		let rec mainMonad_lh__d1 _lh_mainMonad_arg1_0 =
//│ 		  (if (null_lh__d2 _lh_mainMonad_arg1_0) then
//│ 		    (failwith "msg"(`LH_C('A', (`LH_C('r', (`LH_C('g', (`LH_C('s', (`LH_C(':', (`LH_C(' ', (`LH_C('n', (`LH_C('u', (`LH_C('m', (`LH_C('b', (`LH_C('e', (`LH_C('r', (`LH_C('-', (`LH_C('t', (`LH_C('o', (`LH_C('-', (`LH_C('s', (`LH_C('u', (`LH_C('m', (`LH_C('-', (`LH_C('u', (`LH_C('p', (`LH_C('-', (`LH_C('t', (`LH_C('o', (`LH_N))))))))))))))))))))))))))))))))))))))))))))))))))))
//│ 		  else
//│ 		    (ev_lh__d1 (`App(sum0_lh__d2, (`Con((head_lh__d2 _lh_mainMonad_arg1_0)))))));;
//│ 		let rec testLambda_nofib_lh__d1 _lh_testLambda_nofib_arg1_0 =
//│ 		  (`LH_P2((mainSimple_lh__d1 (`LH_C(_lh_testLambda_nofib_arg1_0, (`LH_N)))), (mainMonad_lh__d1 (`LH_C(_lh_testLambda_nofib_arg1_0, (`LH_N))))));;
//│ 		(testLambda_nofib_lh__d1 80)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< after expansion <<<<<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testLambda_nofib_lh_₁(primId⁰(80))
//│ def apply_lh_₁(_lh_apply_arg1⁰, _lh_apply_arg2⁰) = case _lh_apply_arg1⁰ of {
//│ 	Thunk _lh_apply_Thunk_0⁰ _lh_apply_Thunk_1⁰ => case _lh_apply_Thunk_0⁰ of {
//│ 		Lam _lh_apply_Lam_0⁰ _lh_apply_Lam_1⁰ => myBind_lh_₁(myGet_lh_₁, (fun orig⁰ -> withEnv_lh_₁(_lh_apply_Thunk_1⁰, pushVar_lh_₁(_lh_apply_Lam_0⁰, [Thunk _lh_apply_arg2⁰ orig⁰], traverseTerm_lh_₁(_lh_apply_Lam_1⁰)))))
//│ 		| _  => error⁰(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇([LH_C 'b' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'i' [LH_C 'c' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]], pp_lh_₈(_lh_apply_arg1⁰)), [LH_C ' ' [LH_C ' ' [LH_C '[' [LH_C ' ' [LH_N]]]]]), pp_lh_₈(_lh_apply_arg2⁰)), [LH_C ' ' [LH_C ']' [LH_C '.' [LH_N]]]]))}
//│ 	| _  => error⁰(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇([LH_C 'b' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'i' [LH_C 'c' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]], pp_lh_₈(_lh_apply_arg1⁰)), [LH_C ' ' [LH_C ' ' [LH_C '[' [LH_C ' ' [LH_N]]]]]), pp_lh_₈(_lh_apply_arg2⁰)), [LH_C ' ' [LH_C ']' [LH_C '.' [LH_N]]]]))}
//│ def bracket_lh_₁(_lh_bracket_arg1¹, _lh_bracket_arg2¹, _lh_bracket_arg3¹) = if (_lh_bracket_arg2¹ <= _lh_bracket_arg1¹) then mappend_lh_₂₇(mappend_lh_₂₇([LH_C '(' [LH_N]], _lh_bracket_arg3¹), [LH_C ')' [LH_N]]) else _lh_bracket_arg3¹
//│ def bracket_lh_₂(_lh_bracket_arg1⁰, _lh_bracket_arg2⁰, _lh_bracket_arg3⁰) = if (_lh_bracket_arg2⁰ <= _lh_bracket_arg1⁰) then mappend_lh_₂₇(mappend_lh_₂₇([LH_C '(' [LH_N]], _lh_bracket_arg3⁰), [LH_C ')' [LH_N]]) else _lh_bracket_arg3⁰
//│ def eqEnv_lh_₁(_lh_eqEnv_arg1⁰, _lh_eqEnv_arg2⁰) = case _lh_eqEnv_arg1⁰ of {
//│ 	LH_N  => case _lh_eqEnv_arg2⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| LH_C _lh_eqEnv_LH_C_0⁰ _lh_eqEnv_LH_C_1⁰ => case _lh_eqEnv_LH_C_0⁰ of {
//│ 		LH_P2 _lh_eqEnv_LH_P2_0⁰ _lh_eqEnv_LH_P2_1⁰ => case _lh_eqEnv_arg2⁰ of {
//│ 			LH_C _lh_eqEnv_LH_C_0¹ _lh_eqEnv_LH_C_1¹ => case _lh_eqEnv_LH_C_0¹ of {
//│ 				LH_P2 _lh_eqEnv_LH_P2_0¹ _lh_eqEnv_LH_P2_1¹ => if (eqList_lh_₃(_lh_eqEnv_LH_P2_0⁰, _lh_eqEnv_LH_P2_0¹) && eqTerm_lh_₁(_lh_eqEnv_LH_P2_1⁰, _lh_eqEnv_LH_P2_1¹)) then eqEnv_lh_₁(_lh_eqEnv_LH_C_1⁰, _lh_eqEnv_LH_C_1¹) else [False]
//│ 				| _  => [False]}
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqList_lh_₁(_lh_eqList_arg1¹, _lh_eqList_arg2¹) = case _lh_eqList_arg1¹ of {
//│ 	LH_N  => case _lh_eqList_arg2¹ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| LH_C _lh_eqList_LH_C_0² _lh_eqList_LH_C_1² => case _lh_eqList_arg2¹ of {
//│ 		LH_C _lh_eqList_LH_C_0³ _lh_eqList_LH_C_1³ => if polyEq⁰(_lh_eqList_LH_C_0², _lh_eqList_LH_C_0³) then eqList_lh_₁(_lh_eqList_LH_C_1², _lh_eqList_LH_C_1³) else [False]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqList_lh_₂(_lh_eqList_arg1², _lh_eqList_arg2²) = case _lh_eqList_arg1² of {
//│ 	LH_N  => case _lh_eqList_arg2² of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| LH_C _lh_eqList_LH_C_0⁴ _lh_eqList_LH_C_1⁴ => case _lh_eqList_arg2² of {
//│ 		LH_C _lh_eqList_LH_C_0⁵ _lh_eqList_LH_C_1⁵ => if polyEq⁰(_lh_eqList_LH_C_0⁴, _lh_eqList_LH_C_0⁵) then eqList_lh_₂(_lh_eqList_LH_C_1⁴, _lh_eqList_LH_C_1⁵) else [False]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqList_lh_₃(_lh_eqList_arg1⁰, _lh_eqList_arg2⁰) = case _lh_eqList_arg1⁰ of {
//│ 	LH_N  => case _lh_eqList_arg2⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| LH_C _lh_eqList_LH_C_0⁰ _lh_eqList_LH_C_1⁰ => case _lh_eqList_arg2⁰ of {
//│ 		LH_C _lh_eqList_LH_C_0¹ _lh_eqList_LH_C_1¹ => if polyEq⁰(_lh_eqList_LH_C_0⁰, _lh_eqList_LH_C_0¹) then eqList_lh_₃(_lh_eqList_LH_C_1⁰, _lh_eqList_LH_C_1¹) else [False]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def eqTerm_lh_₁(_lh_eqTerm_arg1⁰, _lh_eqTerm_arg2⁰) = case _lh_eqTerm_arg1⁰ of {
//│ 	Var _lh_eqTerm_Var_0⁰ => case _lh_eqTerm_arg2⁰ of {
//│ 		Var _lh_eqTerm_Var_0¹ => eqList_lh_₂(_lh_eqTerm_Var_0⁰, _lh_eqTerm_Var_0¹)
//│ 		| _  => [False]}
//│ 	| Con _lh_eqTerm_Con_0⁰ => case _lh_eqTerm_arg2⁰ of {
//│ 		Con _lh_eqTerm_Con_0¹ => (_lh_eqTerm_Con_0⁰ == _lh_eqTerm_Con_0¹)
//│ 		| _  => [False]}
//│ 	| Incr  => case _lh_eqTerm_arg2⁰ of {
//│ 		Incr  => [True]
//│ 		| _  => [False]}
//│ 	| Add _lh_eqTerm_Add_0⁰ _lh_eqTerm_Add_1⁰ => case _lh_eqTerm_arg2⁰ of {
//│ 		Add _lh_eqTerm_Add_0¹ _lh_eqTerm_Add_1¹ => (eqTerm_lh_₁(_lh_eqTerm_Add_0⁰, _lh_eqTerm_Add_0¹) && eqTerm_lh_₁(_lh_eqTerm_Add_1⁰, _lh_eqTerm_Add_1¹))
//│ 		| _  => [False]}
//│ 	| Lam _lh_eqTerm_Lam_0⁰ _lh_eqTerm_Lam_1⁰ => case _lh_eqTerm_arg2⁰ of {
//│ 		Lam _lh_eqTerm_Lam_0¹ _lh_eqTerm_Lam_1¹ => (eqList_lh_₃(_lh_eqTerm_Lam_0⁰, _lh_eqTerm_Lam_0¹) && eqTerm_lh_₁(_lh_eqTerm_Lam_1⁰, _lh_eqTerm_Lam_1¹))
//│ 		| _  => [False]}
//│ 	| App _lh_eqTerm_App_0⁰ _lh_eqTerm_App_1⁰ => case _lh_eqTerm_arg2⁰ of {
//│ 		App _lh_eqTerm_App_0¹ _lh_eqTerm_App_1¹ => (eqTerm_lh_₁(_lh_eqTerm_App_0⁰, _lh_eqTerm_App_0¹) && eqTerm_lh_₁(_lh_eqTerm_App_1⁰, _lh_eqTerm_App_1¹))
//│ 		| _  => [False]}
//│ 	| IfZero _lh_eqTerm_IfZero_0⁰ _lh_eqTerm_IfZero_1⁰ _lh_eqTerm_IfZero_2⁰ => case _lh_eqTerm_arg2⁰ of {
//│ 		IfZero _lh_eqTerm_IfZero_0¹ _lh_eqTerm_IfZero_1¹ _lh_eqTerm_IfZero_2¹ => ((eqTerm_lh_₁(_lh_eqTerm_IfZero_0⁰, _lh_eqTerm_IfZero_0¹) && eqTerm_lh_₁(_lh_eqTerm_IfZero_1⁰, _lh_eqTerm_IfZero_1¹)) && eqTerm_lh_₁(_lh_eqTerm_IfZero_2⁰, _lh_eqTerm_IfZero_2¹))
//│ 		| _  => [False]}
//│ 	| Thunk _lh_eqTerm_Thunk_0⁰ _lh_eqTerm_Thunk_1⁰ => case _lh_eqTerm_arg2⁰ of {
//│ 		Thunk _lh_eqTerm_Thunk_0¹ _lh_eqTerm_Thunk_1¹ => (eqTerm_lh_₁(_lh_eqTerm_Thunk_0⁰, _lh_eqTerm_Thunk_0¹) && eqEnv_lh_₁(_lh_eqTerm_Thunk_1⁰, _lh_eqTerm_Thunk_1¹))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def ev_lh_₁(_lh_ev_arg1⁰) = 
//│ 	let envt2⁰ = myRunState_lh_₁(traverseTerm_lh_₁(_lh_ev_arg1⁰), [LH_N])
//│ 	in let _lh_matchIdent⁵ = envt2⁰
//│ 	in case _lh_matchIdent⁵ of {
//│ 		LH_P2 _lh_ev_LH_P2_0⁰ _lh_ev_LH_P2_1⁰ => mappend_lh_₆(mappend_lh_₅(pp_lh_₃(_lh_ev_LH_P2_1⁰), 
//│ 			let t²⁸ = 	
//│ 				let t²⁹ = (fun ys³² -> ys³²)
//│ 				in let h²⁷ = ' '
//│ 				in (fun ys³³ -> [LH_C h²⁷ mappend_lh_₆(t²⁹, ys³³)])
//│ 			in let h²⁸ = ' '
//│ 			in (fun ys³⁴ -> [LH_C h²⁸ mappend_lh_₆(t²⁸, ys³⁴)])), ppenv_lh_₁(_lh_ev_LH_P2_0⁰))}
//│ def eval_lh_₁(_lh_eval_arg1⁰) = case _lh_eval_arg1⁰ of {
//│ 	Var _lh_eval_Var_0⁰ => myBind_lh_₁(myGet_lh_₁, (fun e⁰ -> myBind_lh_₁(lookupVar_lh_₁(_lh_eval_Var_0⁰), (fun t¹³ -> traverseTerm_lh_₁(t¹³)))))
//│ 	| Add _lh_eval_Add_0⁰ _lh_eval_Add_1⁰ => myBind_lh_₁(traverseCon_lh_₁(_lh_eval_Add_0⁰), (fun u'² -> myBind_lh_₁(traverseCon_lh_₁(_lh_eval_Add_1⁰), (fun v'¹ -> myReturn_lh_₁([Con (u'² + v'¹)])))))
//│ 	| Thunk _lh_eval_Thunk_0⁰ _lh_eval_Thunk_1⁰ => withEnv_lh_₁(_lh_eval_Thunk_1⁰, traverseTerm_lh_₁(_lh_eval_Thunk_0⁰))
//│ 	| Lam _lh_eval_Lam_0⁰ _lh_eval_Lam_1⁰ => myBind_lh_₁(myGet_lh_₁, (fun env² -> myReturn_lh_₁([Thunk [Lam _lh_eval_Lam_0⁰ _lh_eval_Lam_1⁰] env²])))
//│ 	| App _lh_eval_App_0⁰ _lh_eval_App_1⁰ => myBind_lh_₁(traverseTerm_lh_₁(_lh_eval_App_0⁰), (fun u'³ -> apply_lh_₁(u'³, _lh_eval_App_1⁰)))
//│ 	| IfZero _lh_eval_IfZero_0⁰ _lh_eval_IfZero_1⁰ _lh_eval_IfZero_2⁰ => myBind_lh_₁(traverseTerm_lh_₁(_lh_eval_IfZero_0⁰), (fun val¹ -> if eqTerm_lh_₁(val¹, [Con 0]) then traverseTerm_lh_₁(_lh_eval_IfZero_1⁰) else traverseTerm_lh_₁(_lh_eval_IfZero_2⁰)))
//│ 	| Con _lh_eval_Con_0⁰ => myReturn_lh_₁([Con _lh_eval_Con_0⁰])
//│ 	| Incr  => myBind_lh_₁(incr_lh_₁, (fun _dummy² -> myReturn_lh_₁([Con 0])))}
//│ def fix_lh_₁ = [Lam [LH_C 'F' [LH_N]] [App lfxx_lh_₁ lfxx_lh_₂]]
//│ def fix_lh_₂ = [Lam [LH_C 'F' [LH_N]] [App lfxx_lh_₃ lfxx_lh_₄]]
//│ def flatMap_lh_₁(_lh_flatMap_arg1⁰, _lh_flatMap_arg2⁰) = case _lh_flatMap_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_flatMap_LH_C_0⁰ _lh_flatMap_LH_C_1⁰ => mappend_lh_₂₇(_lh_flatMap_arg1⁰(_lh_flatMap_LH_C_0⁰), flatMap_lh_₁(_lh_flatMap_arg1⁰, _lh_flatMap_LH_C_1⁰))}
//│ def head_lh_₁(ls¹) = case ls¹ of {
//│ 	LH_C h³⁴ t³⁵ => h³⁴
//│ 	| LH_N  => error⁰}
//│ def head_lh_₂(ls⁰) = case ls⁰ of {
//│ 	LH_C h⁶ t⁶ => h⁶
//│ 	| LH_N  => error⁰}
//│ def incr_lh_₁ = myReturn_lh_₁([Unit])
//│ def lfxx_lh_₁ = [Lam [LH_C 'x' [LH_N]] [App [Var [LH_C 'F' [LH_N]]] [App [Var [LH_C 'x' [LH_N]]] [Var [LH_C 'x' [LH_N]]]]]]
//│ def lfxx_lh_₂ = [Lam [LH_C 'x' [LH_N]] [App [Var [LH_C 'F' [LH_N]]] [App [Var [LH_C 'x' [LH_N]]] [Var [LH_C 'x' [LH_N]]]]]]
//│ def lfxx_lh_₃ = [Lam [LH_C 'x' [LH_N]] [App [Var [LH_C 'F' [LH_N]]] [App [Var [LH_C 'x' [LH_N]]] [Var [LH_C 'x' [LH_N]]]]]]
//│ def lfxx_lh_₄ = [Lam [LH_C 'x' [LH_N]] [App [Var [LH_C 'F' [LH_N]]] [App [Var [LH_C 'x' [LH_N]]] [Var [LH_C 'x' [LH_N]]]]]]
//│ def lookupVar_lh_₁(_lh_lookupVar_arg1⁰) = 
//│ 	let lookup2⁰ = (fun env⁰ -> myMaybe_lh_₁((fun _dummy⁰ -> error⁰(mappend_lh_₂₇([LH_C 'u' [LH_C 'n' [LH_C 'd' [LH_C 'e' [LH_C 'f' [LH_C 'i' [LH_C 'n' [LH_C 'e' [LH_C 'd' [LH_C ' ' [LH_C 'v' [LH_C 'a' [LH_C 'r' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]], _lh_lookupVar_arg1⁰))), (fun x⁰ -> x⁰), lookup_lh_₁(_lh_lookupVar_arg1⁰, env⁰)))
//│ 	in myBind_lh_₁(myGet_lh_₁, (fun env¹ -> myReturn_lh_₁(lookup2⁰(env¹))))
//│ def lookup_lh_₁(_lh_lookup_arg1⁰, _lh_lookup_arg2⁰) = case _lh_lookup_arg2⁰ of {
//│ 	LH_N  => (fun _lh_myMaybe_arg1⁰ -> (fun _lh_myMaybe_arg2⁰ -> _lh_myMaybe_arg1⁰(99)))
//│ 	| LH_C _lh_lookup_LH_C_0⁰ _lh_lookup_LH_C_1⁰ => case _lh_lookup_LH_C_0⁰ of {
//│ 		LH_P2 _lh_lookup_LH_P2_0⁰ _lh_lookup_LH_P2_1⁰ => if eqList_lh_₁(_lh_lookup_arg1⁰, _lh_lookup_LH_P2_0⁰) then 
//│ 			let _lh_myMaybe_Just_0⁰ = _lh_lookup_LH_P2_1⁰
//│ 			in (fun _lh_myMaybe_arg1¹ -> (fun _lh_myMaybe_arg2¹ -> _lh_myMaybe_arg2¹(_lh_myMaybe_Just_0⁰))) else lookup_lh_₁(_lh_lookup_arg1⁰, _lh_lookup_LH_C_1⁰)}}
//│ def mainMonad_lh_₁(_lh_mainMonad_arg1⁰) = if null_lh_₂(_lh_mainMonad_arg1⁰) then error⁰([LH_C 'A' [LH_C 'r' [LH_C 'g' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'n' [LH_C 'u' [LH_C 'm' [LH_C 'b' [LH_C 'e' [LH_C 'r' [LH_C '-' [LH_C 't' [LH_C 'o' [LH_C '-' [LH_C 's' [LH_C 'u' [LH_C 'm' [LH_C '-' [LH_C 'u' [LH_C 'p' [LH_C '-' [LH_C 't' [LH_C 'o' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]) else ev_lh_₁([App sum0_lh_₂ [Con head_lh_₂(_lh_mainMonad_arg1⁰)]])
//│ def mainSimple_lh_₁(_lh_mainSimple_arg1⁰) = if null_lh_₁(_lh_mainSimple_arg1⁰) then error⁰([LH_C 'A' [LH_C 'r' [LH_C 'g' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'n' [LH_C 'u' [LH_C 'm' [LH_C 'b' [LH_C 'e' [LH_C 'r' [LH_C '-' [LH_C 't' [LH_C 'o' [LH_C '-' [LH_C 's' [LH_C 'u' [LH_C 'm' [LH_C '-' [LH_C 'u' [LH_C 'p' [LH_C '-' [LH_C 't' [LH_C 'o' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]) else showTerm_lh_₁(simpleEval_lh_₁([LH_N], [App sum0_lh_₁ [Con head_lh_₁(_lh_mainSimple_arg1⁰)]]))
//│ def mappend_lh_₁(xs⁶, ys⁶) = xs⁶(ys⁶)
//│ def mappend_lh_₁₀(xs¹⁰, ys¹⁵) = case xs¹⁰ of {
//│ 	LH_C h¹³ t¹⁴ => [LH_C h¹³ mappend_lh_₁₀(t¹⁴, ys¹⁵)]
//│ 	| LH_N  => ys¹⁵}
//│ def mappend_lh_₁₁(xs¹⁷, ys²⁷) = case xs¹⁷ of {
//│ 	LH_C h²² t²³ => [LH_C h²² mappend_lh_₁₁(t²³, ys²⁷)]
//│ 	| LH_N  => ys²⁷}
//│ def mappend_lh_₁₂(xs², ys²) = case xs² of {
//│ 	LH_C h² t² => [LH_C h² mappend_lh_₁₂(t², ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₁₃(xs²⁰, ys³¹) = case xs²⁰ of {
//│ 	LH_C h²⁶ t²⁷ => [LH_C h²⁶ mappend_lh_₁₃(t²⁷, ys³¹)]
//│ 	| LH_N  => ys³¹}
//│ def mappend_lh_₁₄(xs¹⁵, ys²⁵) = case xs¹⁵ of {
//│ 	LH_C h²¹ t²² => [LH_C h²¹ mappend_lh_₁₄(t²², ys²⁵)]
//│ 	| LH_N  => ys²⁵}
//│ def mappend_lh_₁₅(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₁₅(t¹, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₁₆(xs³, ys³) = case xs³ of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh_₁₆(t³, ys³)]
//│ 	| LH_N  => ys³}
//│ def mappend_lh_₁₇(xs²³, ys⁴³) = xs²³(ys⁴³)
//│ def mappend_lh_₁₈(xs⁷, ys⁷) = case xs⁷ of {
//│ 	LH_C h⁷ t⁷ => [LH_C h⁷ mappend_lh_₁₈(t⁷, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₁₉(xs⁹, ys⁹) = xs⁹(ys⁹)
//│ def mappend_lh_₂(xs¹², ys¹⁷) = case xs¹² of {
//│ 	LH_C h¹⁵ t¹⁶ => [LH_C h¹⁵ mappend_lh_₂(t¹⁶, ys¹⁷)]
//│ 	| LH_N  => ys¹⁷}
//│ def mappend_lh_₂₀(xs¹⁹, ys²⁹) = case xs¹⁹ of {
//│ 	LH_C h²⁴ t²⁵ => 
//│ 		let t²⁶ = mappend_lh_₂₀(t²⁵, ys²⁹)
//│ 		in let h²⁵ = h²⁴
//│ 		in (fun ys³⁰ -> [LH_C h²⁵ mappend_lh_₁₉(t²⁶, ys³⁰)])
//│ 	| LH_N  => ys²⁹}
//│ def mappend_lh_₂₁(xs⁴, ys⁴) = case xs⁴ of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₂₁(t⁴, ys⁴)]
//│ 	| LH_N  => ys⁴}
//│ def mappend_lh_₂₂(xs²⁵, ys⁴⁵) = xs²⁵(ys⁴⁵)
//│ def mappend_lh_₂₃(xs¹³, ys¹⁸) = case xs¹³ of {
//│ 	LH_C h¹⁶ t¹⁷ => [LH_C h¹⁶ mappend_lh_₂₃(t¹⁷, ys¹⁸)]
//│ 	| LH_N  => ys¹⁸}
//│ def mappend_lh_₂₄(xs²², ys⁴²) = xs²²(ys⁴²)
//│ def mappend_lh_₂₅(xs²¹, ys³⁵) = case xs²¹ of {
//│ 	LH_C h²⁹ t³⁰ => [LH_C h²⁹ mappend_lh_₂₅(t³⁰, ys³⁵)]
//│ 	| LH_N  => ys³⁵}
//│ def mappend_lh_₂₆(xs²⁴, ys⁴⁴) = case xs²⁴ of {
//│ 	LH_C h³⁵ t³⁶ => [LH_C h³⁵ mappend_lh_₂₆(t³⁶, ys⁴⁴)]
//│ 	| LH_N  => ys⁴⁴}
//│ def mappend_lh_₂₇(xs²⁶, ys⁴⁶) = case xs²⁶ of {
//│ 	LH_C h³⁶ t³⁷ => [LH_C h³⁶ mappend_lh_₂₇(t³⁷, ys⁴⁶)]
//│ 	| LH_N  => ys⁴⁶}
//│ def mappend_lh_₃(xs⁵, ys⁵) = case xs⁵ of {
//│ 	LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₃(t⁵, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mappend_lh_₄(xs¹⁸, ys²⁸) = case xs¹⁸ of {
//│ 	LH_C h²³ t²⁴ => [LH_C h²³ mappend_lh_₄(t²⁴, ys²⁸)]
//│ 	| LH_N  => ys²⁸}
//│ def mappend_lh_₅(xs¹⁴, ys¹⁹) = case xs¹⁴ of {
//│ 	LH_C h¹⁷ t¹⁸ => 
//│ 		let t¹⁹ = mappend_lh_₅(t¹⁸, ys¹⁹)
//│ 		in let h¹⁸ = h¹⁷
//│ 		in (fun ys²⁰ -> [LH_C h¹⁸ mappend_lh_₆(t¹⁹, ys²⁰)])
//│ 	| LH_N  => ys¹⁹}
//│ def mappend_lh_₆(xs¹⁶, ys²⁶) = xs¹⁶(ys²⁶)
//│ def mappend_lh_₇(xs¹¹, ys¹⁶) = case xs¹¹ of {
//│ 	LH_C h¹⁴ t¹⁵ => [LH_C h¹⁴ mappend_lh_₇(t¹⁵, ys¹⁶)]
//│ 	| LH_N  => ys¹⁶}
//│ def mappend_lh_₈(xs⁸, ys⁸) = case xs⁸ of {
//│ 	LH_C h⁸ t⁸ => [LH_C h⁸ mappend_lh_₈(t⁸, ys⁸)]
//│ 	| LH_N  => ys⁸}
//│ def mappend_lh_₉(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₉(t⁰, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def myBind_lh_₁(_lh_myBind_arg1⁰, _lh_myBind_arg2⁰) = 
//│ 	let _lh_myRunState_MyState_0¹ = (fun s¹ -> 
//│ 		let _lh_matchIdent⁶ = myRunState_lh_₁(_lh_myBind_arg1⁰, s¹)
//│ 		in case _lh_matchIdent⁶ of {
//│ 			LH_P2 _lh_myBind_LH_P2_0⁰ _lh_myBind_LH_P2_1⁰ => myRunState_lh_₁(_lh_myBind_arg2⁰(_lh_myBind_LH_P2_1⁰), _lh_myBind_LH_P2_0⁰)})
//│ 	in _lh_myRunState_MyState_0¹
//│ def myEvalState_lh_₁(_lh_myEvalState_arg1⁰, _lh_myEvalState_arg2⁰) = 
//│ 	let _lh_matchIdent¹ = myRunState_lh_₁(_lh_myEvalState_arg1⁰, _lh_myEvalState_arg2⁰)
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_P2 _lh_myEvalState_LH_P2_0⁰ _lh_myEvalState_LH_P2_1⁰ => _lh_myEvalState_LH_P2_1⁰}
//│ def myGet_lh_₁ = 
//│ 	let _lh_myRunState_MyState_0² = (fun s² -> [LH_P2 s² s²])
//│ 	in _lh_myRunState_MyState_0²
//│ def myMaybe_lh_₁(_lh_myMaybe_arg1², _lh_myMaybe_arg2², _lh_myMaybe_arg3⁰) = _lh_myMaybe_arg3⁰(_lh_myMaybe_arg1², _lh_myMaybe_arg2²)
//│ def myReturn_lh_₁(_lh_myReturn_arg1⁰) = 
//│ 	let _lh_myRunState_MyState_0⁰ = (fun s⁰ -> [LH_P2 s⁰ _lh_myReturn_arg1⁰])
//│ 	in _lh_myRunState_MyState_0⁰
//│ def myRunState_lh_₁(_lh_myRunState_arg1⁰) = _lh_myRunState_arg1⁰
//│ def nMinus1_lh_₁ = [Add [Var [LH_C 'n' [LH_N]]] [Con (0 - 1)]]
//│ def nMinus1_lh_₂ = [Add [Var [LH_C 'n' [LH_N]]] [Con (0 - 1)]]
//│ def null_lh_₁(_lh_null_arg1¹) = case _lh_null_arg1¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0¹ _lh_null_LH_C_1¹ => [False]}
//│ def null_lh_₂(_lh_null_arg1⁰) = case _lh_null_arg1⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_null_LH_C_0⁰ _lh_null_LH_C_1⁰ => [False]}
//│ def partialSum0_lh_₁ = [Lam [LH_C 's' [LH_C 'u' [LH_C 'm' [LH_N]]]] [Lam [LH_C 'n' [LH_N]] [IfZero [Var [LH_C 'n' [LH_N]]] [Con 0] [Add [Var [LH_C 'n' [LH_N]]] [App [Var [LH_C 's' [LH_C 'u' [LH_C 'm' [LH_N]]]]] nMinus1_lh_₁]]]]]
//│ def partialSum0_lh_₂ = [Lam [LH_C 's' [LH_C 'u' [LH_C 'm' [LH_N]]]] [Lam [LH_C 'n' [LH_N]] [IfZero [Var [LH_C 'n' [LH_N]]] [Con 0] [Add [Var [LH_C 'n' [LH_N]]] [App [Var [LH_C 's' [LH_C 'u' [LH_C 'm' [LH_N]]]]] nMinus1_lh_₂]]]]]
//│ def pp_lh_₁(_lh_pp_arg1²) = ppn_lh_₁(0, _lh_pp_arg1²)
//│ def pp_lh_₂(_lh_pp_arg1⁶) = ppn_lh_₂(0, _lh_pp_arg1⁶)
//│ def pp_lh_₃(_lh_pp_arg1⁰) = ppn_lh_₃(0, _lh_pp_arg1⁰)
//│ def pp_lh_₄(_lh_pp_arg1³) = ppn_lh_₃(0, _lh_pp_arg1³)
//│ def pp_lh_₅(_lh_pp_arg1⁷) = ppn_lh_₃(0, _lh_pp_arg1⁷)
//│ def pp_lh_₆(_lh_pp_arg1⁴) = ppn_lh_₃(0, _lh_pp_arg1⁴)
//│ def pp_lh_₇(_lh_pp_arg1⁵) = ppn_lh_₃(0, _lh_pp_arg1⁵)
//│ def pp_lh_₈(_lh_pp_arg1¹) = ppn_lh_₃(0, _lh_pp_arg1¹)
//│ def ppenv_lh_₁(_lh_ppenv_arg1⁰) = mappend_lh_₂₁(mappend_lh_₁₇(
//│ 	let t²⁰ = (fun ys²¹ -> ys²¹)
//│ 	in let h¹⁹ = '['
//│ 	in (fun ys²² -> [LH_C h¹⁹ mappend_lh_₁₇(t²⁰, ys²²)]), flatMap_lh_₁((fun vt⁰ -> 
//│ 	let _lh_matchIdent³ = vt⁰
//│ 	in case _lh_matchIdent³ of {
//│ 		LH_P2 _lh_ppenv_LH_P2_0⁰ _lh_ppenv_LH_P2_1⁰ => mappend_lh_₁₈(mappend_lh_₁₉(mappend_lh_₂₀(_lh_ppenv_LH_P2_0⁰, 
//│ 			let t²¹ = (fun ys²³ -> ys²³)
//│ 			in let h²⁰ = '='
//│ 			in (fun ys²⁴ -> [LH_C h²⁰ mappend_lh_₁₉(t²¹, ys²⁴)])), pp_lh_₈(_lh_ppenv_LH_P2_1⁰)), [LH_C ',' [LH_C ' ' [LH_N]]])}), _lh_ppenv_arg1⁰)), [LH_C ']' [LH_N]])
//│ def ppenv_lh_₂(_lh_ppenv_arg1¹) = mappend_lh_₂₇(mappend_lh_₂₇([LH_C '[' [LH_N]], flatMap_lh_₁((fun vt¹ -> 
//│ 	let _lh_matchIdent⁷ = vt¹
//│ 	in case _lh_matchIdent⁷ of {
//│ 		LH_P2 _lh_ppenv_LH_P2_0¹ _lh_ppenv_LH_P2_1¹ => mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇(_lh_ppenv_LH_P2_0¹, [LH_C '=' [LH_N]]), pp_lh_₁(_lh_ppenv_LH_P2_1¹)), [LH_C ',' [LH_C ' ' [LH_N]]])}), _lh_ppenv_arg1¹)), [LH_C ']' [LH_N]])
//│ def ppn_lh_₁(_lh_ppn_arg1¹, _lh_ppn_arg2¹) = case _lh_ppn_arg2¹ of {
//│ 	Var _lh_ppn_Var_0¹ => _lh_ppn_Var_0¹
//│ 	| Con _lh_ppn_Con_0¹ => string_of_int⁰(_lh_ppn_Con_0¹)
//│ 	| Incr  => [LH_C 'I' [LH_C 'N' [LH_C 'C' [LH_C 'R' [LH_N]]]]]
//│ 	| Lam _lh_ppn_Lam_0¹ _lh_ppn_Lam_1¹ => bracket_lh_₂(_lh_ppn_arg1¹, 0, mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₄(
//│ 		let t³¹ = (fun ys³⁶ -> ys³⁶)
//│ 		in let h³⁰ = '@'
//│ 		in (fun ys³⁷ -> [LH_C h³⁰ mappend_lh_₂₄(t³¹, ys³⁷)]), _lh_ppn_Lam_0¹), [LH_C '.' [LH_C ' ' [LH_N]]]), ppn_lh_₁((0 - 1), _lh_ppn_Lam_1¹)))
//│ 	| Add _lh_ppn_Add_0¹ _lh_ppn_Add_1¹ => bracket_lh_₁(_lh_ppn_arg1¹, 1, mappend_lh_₂₇(mappend_lh_₂₇(ppn_lh_₁(1, _lh_ppn_Add_0¹), [LH_C ' ' [LH_C '+' [LH_C ' ' [LH_N]]]]), ppn_lh_₁(1, _lh_ppn_Add_1¹)))
//│ 	| App _lh_ppn_App_0¹ _lh_ppn_App_1¹ => bracket_lh_₂(_lh_ppn_arg1¹, 2, mappend_lh_₂₇(mappend_lh_₂₇(ppn_lh_₁(2, _lh_ppn_App_0¹), [LH_C ' ' [LH_N]]), ppn_lh_₁(2, _lh_ppn_App_1¹)))
//│ 	| IfZero _lh_ppn_IfZero_0¹ _lh_ppn_IfZero_1¹ _lh_ppn_IfZero_2¹ => bracket_lh_₂(_lh_ppn_arg1¹, 0, mappend_lh_₂₆(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₅(mappend_lh_₂₂(
//│ 		let t³² = 	
//│ 			let t³³ = 	
//│ 				let t³⁴ = (fun ys³⁸ -> ys³⁸)
//│ 				in let h³¹ = ' '
//│ 				in (fun ys³⁹ -> [LH_C h³¹ mappend_lh_₂₂(t³⁴, ys³⁹)])
//│ 			in let h³² = 'F'
//│ 			in (fun ys⁴⁰ -> [LH_C h³² mappend_lh_₂₂(t³³, ys⁴⁰)])
//│ 		in let h³³ = 'I'
//│ 		in (fun ys⁴¹ -> [LH_C h³³ mappend_lh_₂₂(t³², ys⁴¹)]), ppn_lh_₁(0, _lh_ppn_IfZero_0¹)), [LH_C ' ' [LH_C 'T' [LH_C 'H' [LH_C 'E' [LH_C 'N' [LH_C ' ' [LH_N]]]]]]]), ppn_lh_₁(0, _lh_ppn_IfZero_1¹)), [LH_C ' ' [LH_C 'E' [LH_C 'L' [LH_C 'S' [LH_C 'E' [LH_C ' ' [LH_N]]]]]]]), ppn_lh_₁(0, _lh_ppn_IfZero_2¹)))
//│ 	| Thunk _lh_ppn_Thunk_0¹ _lh_ppn_Thunk_1¹ => bracket_lh_₂(_lh_ppn_arg1¹, 0, mappend_lh_₂₇(mappend_lh_₂₃(ppn_lh_₁(3, _lh_ppn_Thunk_0¹), [LH_C ':' [LH_C ':' [LH_N]]]), ppenv_lh_₂(_lh_ppn_Thunk_1¹)))}
//│ def ppn_lh_₂(_lh_ppn_arg1⁰, _lh_ppn_arg2⁰) = case _lh_ppn_arg2⁰ of {
//│ 	Var _lh_ppn_Var_0⁰ => _lh_ppn_Var_0⁰
//│ 	| Con _lh_ppn_Con_0⁰ => string_of_int⁰(_lh_ppn_Con_0⁰)
//│ 	| Incr  => [LH_C 'I' [LH_C 'N' [LH_C 'C' [LH_C 'R' [LH_N]]]]]
//│ 	| Lam _lh_ppn_Lam_0⁰ _lh_ppn_Lam_1⁰ => bracket_lh_₂(_lh_ppn_arg1⁰, 0, mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇([LH_C '@' [LH_N]], _lh_ppn_Lam_0⁰), [LH_C '.' [LH_C ' ' [LH_N]]]), ppn_lh_₂((0 - 1), _lh_ppn_Lam_1⁰)))
//│ 	| Add _lh_ppn_Add_0⁰ _lh_ppn_Add_1⁰ => bracket_lh_₂(_lh_ppn_arg1⁰, 1, mappend_lh_₂₇(mappend_lh_₂₇(ppn_lh_₂(1, _lh_ppn_Add_0⁰), [LH_C ' ' [LH_C '+' [LH_C ' ' [LH_N]]]]), ppn_lh_₂(1, _lh_ppn_Add_1⁰)))
//│ 	| App _lh_ppn_App_0⁰ _lh_ppn_App_1⁰ => bracket_lh_₂(_lh_ppn_arg1⁰, 2, mappend_lh_₂₇(mappend_lh_₂₇(ppn_lh_₂(2, _lh_ppn_App_0⁰), [LH_C ' ' [LH_N]]), ppn_lh_₂(2, _lh_ppn_App_1⁰)))
//│ 	| IfZero _lh_ppn_IfZero_0⁰ _lh_ppn_IfZero_1⁰ _lh_ppn_IfZero_2⁰ => bracket_lh_₂(_lh_ppn_arg1⁰, 0, mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇([LH_C 'I' [LH_C 'F' [LH_C ' ' [LH_N]]]], ppn_lh_₂(0, _lh_ppn_IfZero_0⁰)), [LH_C ' ' [LH_C 'T' [LH_C 'H' [LH_C 'E' [LH_C 'N' [LH_C ' ' [LH_N]]]]]]]), ppn_lh_₂(0, _lh_ppn_IfZero_1⁰)), [LH_C ' ' [LH_C 'E' [LH_C 'L' [LH_C 'S' [LH_C 'E' [LH_C ' ' [LH_N]]]]]]]), ppn_lh_₂(0, _lh_ppn_IfZero_2⁰)))
//│ 	| Thunk _lh_ppn_Thunk_0⁰ _lh_ppn_Thunk_1⁰ => bracket_lh_₂(_lh_ppn_arg1⁰, 0, mappend_lh_₂₇(mappend_lh_₂₇(ppn_lh_₂(3, _lh_ppn_Thunk_0⁰), [LH_C ':' [LH_C ':' [LH_N]]]), ppenv_lh_₂(_lh_ppn_Thunk_1⁰)))}
//│ def ppn_lh_₃(_lh_ppn_arg1², _lh_ppn_arg2²) = case _lh_ppn_arg2² of {
//│ 	Var _lh_ppn_Var_0² => _lh_ppn_Var_0²
//│ 	| Con _lh_ppn_Con_0² => string_of_int⁰(_lh_ppn_Con_0²)
//│ 	| Incr  => [LH_C 'I' [LH_C 'N' [LH_C 'C' [LH_C 'R' [LH_N]]]]]
//│ 	| Lam _lh_ppn_Lam_0² _lh_ppn_Lam_1² => bracket_lh_₂(_lh_ppn_arg1², 0, mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇([LH_C '@' [LH_N]], _lh_ppn_Lam_0²), [LH_C '.' [LH_C ' ' [LH_N]]]), ppn_lh_₃((0 - 1), _lh_ppn_Lam_1²)))
//│ 	| Add _lh_ppn_Add_0² _lh_ppn_Add_1² => bracket_lh_₂(_lh_ppn_arg1², 1, mappend_lh_₂₇(mappend_lh_₂₇(ppn_lh_₃(1, _lh_ppn_Add_0²), [LH_C ' ' [LH_C '+' [LH_C ' ' [LH_N]]]]), ppn_lh_₃(1, _lh_ppn_Add_1²)))
//│ 	| App _lh_ppn_App_0² _lh_ppn_App_1² => bracket_lh_₂(_lh_ppn_arg1², 2, mappend_lh_₂₇(mappend_lh_₂₇(ppn_lh_₃(2, _lh_ppn_App_0²), [LH_C ' ' [LH_N]]), ppn_lh_₃(2, _lh_ppn_App_1²)))
//│ 	| IfZero _lh_ppn_IfZero_0² _lh_ppn_IfZero_1² _lh_ppn_IfZero_2² => bracket_lh_₂(_lh_ppn_arg1², 0, mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇(mappend_lh_₂₇([LH_C 'I' [LH_C 'F' [LH_C ' ' [LH_N]]]], ppn_lh_₃(0, _lh_ppn_IfZero_0²)), [LH_C ' ' [LH_C 'T' [LH_C 'H' [LH_C 'E' [LH_C 'N' [LH_C ' ' [LH_N]]]]]]]), ppn_lh_₃(0, _lh_ppn_IfZero_1²)), [LH_C ' ' [LH_C 'E' [LH_C 'L' [LH_C 'S' [LH_C 'E' [LH_C ' ' [LH_N]]]]]]]), ppn_lh_₃(0, _lh_ppn_IfZero_2²)))
//│ 	| Thunk _lh_ppn_Thunk_0² _lh_ppn_Thunk_1² => bracket_lh_₂(_lh_ppn_arg1², 0, mappend_lh_₂₇(mappend_lh_₂₇(ppn_lh_₃(3, _lh_ppn_Thunk_0²), [LH_C ':' [LH_C ':' [LH_N]]]), ppenv_lh_₂(_lh_ppn_Thunk_1²)))}
//│ def pushVar_lh_₁(_lh_pushVar_arg1⁰, _lh_pushVar_arg2⁰, _lh_pushVar_arg3⁰) = myBind_lh_₁(myGet_lh_₁, (fun env³ -> withEnv_lh_₁([LH_C [LH_P2 _lh_pushVar_arg1⁰ _lh_pushVar_arg2⁰] env³], _lh_pushVar_arg3⁰)))
//│ def showTerm_lh_₁(_lh_showTerm_arg1⁰) = case _lh_showTerm_arg1⁰ of {
//│ 	Con _lh_showTerm_Con_0⁰ => mappend_lh_₁(
//│ 		let t⁹ = 	
//│ 			let t¹⁰ = 	
//│ 				let t¹¹ = 	
//│ 					let t¹² = (fun ys¹⁰ -> ys¹⁰)
//│ 					in let h⁹ = ' '
//│ 					in (fun ys¹¹ -> [LH_C h⁹ mappend_lh_₁(t¹², ys¹¹)])
//│ 				in let h¹⁰ = 'n'
//│ 				in (fun ys¹² -> [LH_C h¹⁰ mappend_lh_₁(t¹¹, ys¹²)])
//│ 			in let h¹¹ = 'o'
//│ 			in (fun ys¹³ -> [LH_C h¹¹ mappend_lh_₁(t¹⁰, ys¹³)])
//│ 		in let h¹² = 'C'
//│ 		in (fun ys¹⁴ -> [LH_C h¹² mappend_lh_₁(t⁹, ys¹⁴)]), string_of_int⁰(_lh_showTerm_Con_0⁰))
//│ 	| _  => error⁰([LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'd' [LH_N]]]]]]]]]]]]]])}
//│ def showTerm_lh_₂(_lh_showTerm_arg1¹) = case _lh_showTerm_arg1¹ of {
//│ 	Con _lh_showTerm_Con_0¹ => mappend_lh_₂₇([LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_N]]]]], string_of_int⁰(_lh_showTerm_Con_0¹))
//│ 	| _  => error⁰([LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'd' [LH_N]]]]]]]]]]]]]])}
//│ def showTerm_lh_₃(_lh_showTerm_arg1²) = case _lh_showTerm_arg1² of {
//│ 	Con _lh_showTerm_Con_0² => mappend_lh_₂₇([LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C ' ' [LH_N]]]]], string_of_int⁰(_lh_showTerm_Con_0²))
//│ 	| _  => error⁰([LH_C 'u' [LH_C 'n' [LH_C 'i' [LH_C 'm' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_C 'm' [LH_C 'e' [LH_C 'n' [LH_C 't' [LH_C 'e' [LH_C 'd' [LH_N]]]]]]]]]]]]]])}
//│ def simpleApply_lh_₁(_lh_simpleApply_arg1⁰, _lh_simpleApply_arg2⁰, _lh_simpleApply_arg3⁰) = case _lh_simpleApply_arg2⁰ of {
//│ 	Thunk _lh_simpleApply_Thunk_0⁰ _lh_simpleApply_Thunk_1⁰ => case _lh_simpleApply_Thunk_0⁰ of {
//│ 		Lam _lh_simpleApply_Lam_0⁰ _lh_simpleApply_Lam_1⁰ => simpleEval_lh_₁([LH_C [LH_P2 _lh_simpleApply_Lam_0⁰ [Thunk _lh_simpleApply_arg3⁰ _lh_simpleApply_arg1⁰]] _lh_simpleApply_Thunk_1⁰], _lh_simpleApply_Lam_1⁰)
//│ 		| _  => error⁰(mappend_lh_₁₃(mappend_lh_₈(mappend_lh_₁₀(mappend_lh_₁₄([LH_C 'b' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'i' [LH_C 'c' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]], pp_lh_₇(_lh_simpleApply_arg2⁰)), [LH_C ' ' [LH_C ' ' [LH_C '[' [LH_C ' ' [LH_N]]]]]), pp_lh_₆(_lh_simpleApply_arg3⁰)), [LH_C ' ' [LH_C ']' [LH_C '.' [LH_N]]]]))}
//│ 	| _  => error⁰(mappend_lh_₉(mappend_lh_₁₁(mappend_lh_₁₂(mappend_lh_₁₅([LH_C 'b' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'i' [LH_C 'c' [LH_C 'a' [LH_C 't' [LH_C 'i' [LH_C 'o' [LH_C 'n' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]], pp_lh_₅(_lh_simpleApply_arg2⁰)), [LH_C ' ' [LH_C ' ' [LH_C '[' [LH_C ' ' [LH_N]]]]]), pp_lh_₄(_lh_simpleApply_arg3⁰)), [LH_C ' ' [LH_C ']' [LH_C '.' [LH_N]]]]))}
//│ def simpleEvalCon_lh_₁(_lh_simpleEvalCon_arg1¹, _lh_simpleEvalCon_arg2¹) = 
//│ 	let e'¹ = simpleEval_lh_₁(_lh_simpleEvalCon_arg1¹, _lh_simpleEvalCon_arg2¹)
//│ 	in let _lh_matchIdent⁴ = e'¹
//│ 	in case _lh_matchIdent⁴ of {
//│ 		Con _lh_simpleEvalCon_Con_0¹ => _lh_simpleEvalCon_Con_0¹
//│ 		| _  => error⁰(mappend_lh_₇([LH_C 'N' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]], showTerm_lh_₂(e'¹)))}
//│ def simpleEvalCon_lh_₂(_lh_simpleEvalCon_arg1⁰, _lh_simpleEvalCon_arg2⁰) = 
//│ 	let e'⁰ = simpleEval_lh_₁(_lh_simpleEvalCon_arg1⁰, _lh_simpleEvalCon_arg2⁰)
//│ 	in let _lh_matchIdent⁰ = e'⁰
//│ 	in case _lh_matchIdent⁰ of {
//│ 		Con _lh_simpleEvalCon_Con_0⁰ => _lh_simpleEvalCon_Con_0⁰
//│ 		| _  => error⁰(mappend_lh_₁₆([LH_C 'N' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]], showTerm_lh_₃(e'⁰)))}
//│ def simpleEval_lh_₁(_lh_simpleEval_arg1⁰, _lh_simpleEval_arg2⁰) = case _lh_simpleEval_arg2⁰ of {
//│ 	Var _lh_simpleEval_Var_0⁰ => simpleEval_lh_₁(_lh_simpleEval_arg1⁰, myMaybe_lh_₁((fun _dummy¹ -> error⁰(mappend_lh_₃([LH_C 'u' [LH_C 'n' [LH_C 'd' [LH_C 'e' [LH_C 'f' [LH_C 'i' [LH_C 'n' [LH_C 'e' [LH_C 'd' [LH_C ' ' [LH_C 'v' [LH_C 'a' [LH_C 'r' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]], _lh_simpleEval_Var_0⁰))), (fun x¹ -> x¹), lookup_lh_₁(_lh_simpleEval_Var_0⁰, _lh_simpleEval_arg1⁰)))
//│ 	| Con _lh_simpleEval_Con_0⁰ => [Con _lh_simpleEval_Con_0⁰]
//│ 	| Incr  => [Con 0]
//│ 	| Add _lh_simpleEval_Add_0⁰ _lh_simpleEval_Add_1⁰ => 
//│ 		let addCons⁰ = (fun _lh_addCons_arg1⁰ -> (fun _lh_addCons_arg2⁰ -> case _lh_addCons_arg1⁰ of {
//│ 			Con _lh_addCons_Con_0⁰ => case _lh_addCons_arg2⁰ of {
//│ 				Con _lh_addCons_Con_0¹ => [Con (_lh_addCons_Con_0⁰ + _lh_addCons_Con_0¹)]
//│ 				| _  => error⁰(mappend_lh_₂([LH_C 't' [LH_C 'y' [LH_C 'p' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 'a' [LH_C 'r' [LH_C 'g' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 'A' [LH_C 'd' [LH_C 'd' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], pp_lh_₁(_lh_addCons_arg2⁰)))}
//│ 			| _  => case _lh_addCons_arg2⁰ of {
//│ 				Con _lh_addCons_Con_0² => error⁰(mappend_lh_₄([LH_C 't' [LH_C 'y' [LH_C 'p' [LH_C 'e' [LH_C ' ' [LH_C 'e' [LH_C 'r' [LH_C 'r' [LH_C 'o' [LH_C 'r' [LH_C ' ' [LH_C 'i' [LH_C 'n' [LH_C ' ' [LH_C 'f' [LH_C 'i' [LH_C 'r' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C 'r' [LH_C 'g' [LH_C ' ' [LH_C 'o' [LH_C 'f' [LH_C ' ' [LH_C 'A' [LH_C 'd' [LH_C 'd' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], pp_lh_₂(_lh_addCons_arg1⁰)))}}))
//│ 		in let u'⁰ = simpleEvalCon_lh_₁(_lh_simpleEval_arg1⁰, _lh_simpleEval_Add_0⁰)
//│ 		in let v'⁰ = simpleEvalCon_lh_₂(_lh_simpleEval_arg1⁰, _lh_simpleEval_Add_1⁰)
//│ 		in [Con (u'⁰ + v'⁰)]
//│ 	| Lam _lh_simpleEval_Lam_0⁰ _lh_simpleEval_Lam_1⁰ => [Thunk [Lam _lh_simpleEval_Lam_0⁰ _lh_simpleEval_Lam_1⁰] _lh_simpleEval_arg1⁰]
//│ 	| App _lh_simpleEval_App_0⁰ _lh_simpleEval_App_1⁰ => 
//│ 		let u'¹ = simpleEval_lh_₁(_lh_simpleEval_arg1⁰, _lh_simpleEval_App_0⁰)
//│ 		in simpleApply_lh_₁(_lh_simpleEval_arg1⁰, u'¹, _lh_simpleEval_App_1⁰)
//│ 	| IfZero _lh_simpleEval_IfZero_0⁰ _lh_simpleEval_IfZero_1⁰ _lh_simpleEval_IfZero_2⁰ => 
//│ 		let val⁰ = simpleEval_lh_₁(_lh_simpleEval_arg1⁰, _lh_simpleEval_IfZero_0⁰)
//│ 		in if eqTerm_lh_₁(val⁰, [Con 0]) then simpleEval_lh_₁(_lh_simpleEval_arg1⁰, _lh_simpleEval_IfZero_1⁰) else simpleEval_lh_₁(_lh_simpleEval_arg1⁰, _lh_simpleEval_IfZero_2⁰)
//│ 	| Thunk _lh_simpleEval_Thunk_0⁰ _lh_simpleEval_Thunk_1⁰ => simpleEval_lh_₁(_lh_simpleEval_Thunk_1⁰, _lh_simpleEval_Thunk_0⁰)}
//│ def sum0_lh_₁ = [App fix_lh_₁ partialSum0_lh_₁]
//│ def sum0_lh_₂ = [App fix_lh_₂ partialSum0_lh_₂]
//│ def testLambda_nofib_lh_₁(_lh_testLambda_nofib_arg1⁰) = [LH_P2 mainSimple_lh_₁([LH_C _lh_testLambda_nofib_arg1⁰ [LH_N]]) mainMonad_lh_₁([LH_C _lh_testLambda_nofib_arg1⁰ [LH_N]])]
//│ def traverseCon_lh_₁(_lh_traverseCon_arg1⁰) = myBind_lh_₁(traverseTerm_lh_₁(_lh_traverseCon_arg1⁰), (fun t'⁰ -> 
//│ 	let _lh_matchIdent² = t'⁰
//│ 	in case _lh_matchIdent² of {
//│ 		Con _lh_traverseCon_Con_0⁰ => myReturn_lh_₁(_lh_traverseCon_Con_0⁰)
//│ 		| _  => error⁰(mappend_lh_₂₇([LH_C 'N' [LH_C 'o' [LH_C 't' [LH_C ' ' [LH_C 'a' [LH_C ' ' [LH_C 'C' [LH_C 'o' [LH_C 'n' [LH_C ':' [LH_C ' ' [LH_N]]]]]]]]]]]], showTerm_lh_₃(t'⁰)))}))
//│ def traverseTerm_lh_₁(_lh_traverseTerm_arg1⁰) = eval_lh_₁(_lh_traverseTerm_arg1⁰)
//│ def withEnv_lh_₁(_lh_withEnv_arg1⁰, _lh_withEnv_arg2⁰) = myReturn_lh_₁(myEvalState_lh_₁(_lh_withEnv_arg2⁰, _lh_withEnv_arg1⁰))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
