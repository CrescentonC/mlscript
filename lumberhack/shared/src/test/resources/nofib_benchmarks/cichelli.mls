:NewParser
:ParseOnly

:lhNoIter
:lhInHaskell
:lhGenOCaml
max a b = if a > b then a else b
min a b = if a < b then a else b
last (h:t) = go h t
  where
    go h [] = h
    go h (head:t) = go head t
all p [] = True
all p (h:t) = if p h then all p t else False
data Key = K String Char Char Int {- String, end letters, length of string -}
data HashSet = H (Maybe Int) (Maybe Int) [Int]
type HashFun = [(Char,Int)]  {- Association list of Character to values -}
ends :: Key -> String
ends (K _ a z _) = [a,z]
morefreq :: Key -> Key -> Bool
morefreq (K _ a x _) (K _ b y _) = ((freq a) + (freq x)) > ((freq b) + (freq y))
freq :: Char -> Int
freq c = assoc c (freqtab 0)
assoc :: (Eq a) => a -> [(a,b)] -> b
assoc x ((y,z):yzs) = if polyEq x y then z else assoc x yzs
assocm :: (Eq a) => a -> [(a,b)] -> Maybe b
assocm x [] = Nothing
assocm x ((y,z):yzs) = if polyEq x y then Just z else assocm x yzs
--- freqtab :: [(Char, Int)]
freqtab _ = histo (concat (map ends (attribkeys (keys 0))))
histins x [] = [(x,1)]
histins x ((y,n):yns) = if polyEq x y then (y,n+1):yns else (y,n):(histins x yns)
histo :: (Eq a) => [a] -> [(a,Int)]
histo ls = (foldr histins []) ls
subset :: (Eq a) => [a] -> [a] -> Bool
subset xs ys = all (\x -> member x ys) xs
union :: (Eq a) => [a] -> [a] -> [a]
union xs ys = xs ++ [y | y <- ys, not (member y xs)]
attribkeys :: [String] -> [Key]
attribkeys ks = map (\k->(K k (head k) (last k) (length k))) ks
hinsert :: Int -> HashSet -> Maybe HashSet
hinsert h (H lo hi hs) =
  let lo' = minm lo h in
  let hi' = maxm hi h in
    if (member h hs) || ((1 + hi'- lo') > (length (keys 0))) then Nothing
    else Just (H (Just lo') (Just hi') (h:hs))
minm, maxm :: Maybe Int -> Int -> Int
minm Nothing y = y
minm (Just x) y = min x y
maxm Nothing y = y
maxm (Just x) y = max x y
member :: (Eq a) => a -> [a] -> Bool
member _ [] = False
member x (y:ys) = (polyEq x y) || (member x ys)
hash :: HashFun -> Key -> Int
hash cvs (K _ a z n) = n + (assoc a cvs) + (assoc z cvs)
partition' :: (a->Bool) -> [a] -> ([a],[a])
partition' p = foldr (select p) ([],[])
select p x (ts,fs) = if p x then (x:ts,fs) else (ts,x:fs)
freqsorted :: [Key] -> [Key]
freqsorted x = x
blocked :: [Key] -> [Key]
blocked ls = blocked' [] ls
blocked' ds [] = []
blocked' ds (k : ks) =
  let ds' = union ds (ends k) in
  case (partition' (\x->subset (ends x) ds') ks) of {
    (det,rest) ->  (k : det ++ blocked' ds' rest)
  }
keys _ = ["apple","banana","peach","apricot"]
data Status a = NotEver Int | YesIts Int a deriving Show
prog n = cichelli n
findhash :: [Key] -> FeedBack
findhash keys = findhash' (H Nothing Nothing []) [] keys
findhash' :: HashSet -> HashFun -> [Key] -> FeedBack
findhash' keyHashSet charAssocs [] = (YesIts 1 charAssocs)
findhash' keyHashSet charAssocs ((K s a z n):ks) =
  let try = (\newAssocs -> let newCharAssocs = newAssocs ++ charAssocs in (case (hinsert (hash newCharAssocs (K s a z n)) keyHashSet) of {Nothing -> (NotEver 1); Just newKeyHashSet -> findhash' newKeyHashSet newCharAssocs ks})) in
  let maxval = length (freqtab 0) in
  case (assocm a charAssocs, assocm z charAssocs) of
    (Nothing,Nothing) ->
        if polyEq a z then
          firstSuccess (\m-> try [(a,m)]) [0..maxval]
        else
          firstSuccess (\mn -> case mn of { (m,n) -> try [(a,m),(z,n)] }) [(m,n) | m<-[0..maxval], n<-[0..maxval]]
    (Nothing,Just zc) -> firstSuccess (\m->try [(a,m)]) [0..maxval]
    (Just ac,Nothing) -> firstSuccess (\n->try [(z,n)]) [0..maxval]
    (Just ac,Just zc) -> try []
-- Returns the first successful `working' function on a list of possible arguments
firstSuccess :: (a -> FeedBack) -> [a] -> FeedBack
firstSuccess f possibles =  first 0 (map f possibles)
first :: Int -> [FeedBack] -> FeedBack
first k [] = NotEver k
first k (a:l) = case a of
                (YesIts leaves y) -> YesIts (k+leaves) y
                (NotEver leaves)  -> first (k+leaves) l
type FeedBack = Status HashFun
cichelli :: Int -> FeedBack
cichelli n =
  let attribkeys' = attribkeys ((keys 0) ++ take (n `mod` 2) (keys 0)) in
  let hashkeys = (blocked.freqsorted) attribkeys' in
  findhash hashkeys
testCichelli_nofib n = prog n
testCichelli_nofib $ primId 6
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testCichelli_nofib_lh^868(primId⁰(6))
//│ def all_lh(_lh_all_arg1⁰, _lh_all_arg2⁰) = case _lh_all_arg2⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0⁰ _lh_all_LH_C_1⁰ => if _lh_all_arg1⁰(_lh_all_LH_C_0⁰) then all_lh^572(_lh_all_arg1⁰, _lh_all_LH_C_1⁰) else [False]
//│ 	| _  => error⁰}
//│ def assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_arg2⁰) = case _lh_assoc_arg2⁰ of {
//│ 	LH_C _lh_assoc_LH_C_0⁰ _lh_assoc_LH_C_1⁰ => case _lh_assoc_LH_C_0⁰ of {
//│ 		LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh^294(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_arg2⁰) = case _lh_assocm_arg2⁰ of {
//│ 	LH_N  => [Nothing]
//│ 	| LH_C _lh_assocm_LH_C_0⁰ _lh_assocm_LH_C_1⁰ => case _lh_assocm_LH_C_0⁰ of {
//│ 		LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh^268(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def attribkeys_lh(_lh_attribkeys_arg1⁰) = map_lh^649((fun k⁰ -> [K k⁰ head_lh^651(k⁰) last_lh^654(k⁰) length_lh^657(k⁰)]), _lh_attribkeys_arg1⁰)
//│ def blocked'_lh(_lh_blocked'_arg1⁰, _lh_blocked'_arg2⁰) = case _lh_blocked'_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_C_1⁰ => 
//│ 		let ds'⁰ = union_lh^688(_lh_blocked'_arg1⁰, ends_lh^691(_lh_blocked'_LH_C_0⁰))
//│ 		in let _lh_matchIdent³ = partition'_lh^695((fun x⁰ -> subset_lh^696(ends_lh^697(x⁰), ds'⁰)), _lh_blocked'_LH_C_1⁰)
//│ 		in case _lh_matchIdent³ of {
//│ 			LH_P2 _lh_blocked'_LH_P2_0⁰ _lh_blocked'_LH_P2_1⁰ => mappend_lh^708([LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰], blocked'_lh^713(ds'⁰, _lh_blocked'_LH_P2_1⁰))
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def blocked_lh(_lh_blocked_arg1⁰) = blocked'_lh^280([LH_N], _lh_blocked_arg1⁰)
//│ def cichelli_lh(_lh_cichelli_arg1⁰) = 
//│ 	let attribkeys'⁰ = attribkeys_lh^759(mappend_lh^760(keys_lh^761(0), take_lh^765((_lh_cichelli_arg1⁰ % 2), keys_lh^772(0))))
//│ 	in let hashkeys⁰ = (fun _lh_funcomp_x⁰ -> blocked_lh^778(freqsorted_lh^779(_lh_funcomp_x⁰)))(attribkeys'⁰)
//│ 	in findhash_lh^786(hashkeys⁰)
//│ def concat_lh(lss⁰) = case lss⁰ of {
//│ 	LH_C h⁶ t⁶ => mappend_lh^104(h⁶, concat_lh^107(t⁶))
//│ 	| LH_N  => [LH_N]}
//│ def ends_lh(_lh_ends_arg1⁰) = case _lh_ends_arg1⁰ of {
//│ 	K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]]
//│ 	| _  => error⁰}
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^43((a⁰ + 1), b⁰)] else [LH_N]
//│ def findhash'_lh(_lh_findhash'_arg1⁰, _lh_findhash'_arg2⁰, _lh_findhash'_arg3⁰) = case _lh_findhash'_arg3⁰ of {
//│ 	LH_N  => [YesIts 1 _lh_findhash'_arg2⁰]
//│ 	| LH_C _lh_findhash'_LH_C_0⁰ _lh_findhash'_LH_C_1⁰ => case _lh_findhash'_LH_C_0⁰ of {
//│ 		K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => 
//│ 			let try⁰ = (fun newAssocs⁰ -> 
//│ 				let newCharAssocs⁰ = mappend_lh^386(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ 				in let _lh_matchIdent⁰ = hinsert_lh^391(hash_lh^392(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ 				in case _lh_matchIdent⁰ of {
//│ 					Nothing  => [NotEver 1]
//│ 					| Just _lh_findhash'_Just_0⁰ => findhash'_lh^407(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰)
//│ 					| _  => error⁰})
//│ 			in let maxval⁰ = length_lh^419(freqtab_lh^420(0))
//│ 			in let _lh_matchIdent¹ = [LH_P2 assocm_lh^424(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh^429(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ 			in case _lh_matchIdent¹ of {
//│ 				LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {
//│ 					Nothing  => case _lh_findhash'_LH_P2_1⁰ of {
//│ 						Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh^443((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh^453(0, maxval⁰)) else firstSuccess_lh^459((fun mn⁰ -> 
//│ 							let _lh_matchIdent² = mn⁰
//│ 							in case _lh_matchIdent² of {
//│ 								LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]])
//│ 								| _  => error⁰}), 
//│ 							let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 								LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => 
//│ 									let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 										LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]
//│ 										| LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ 									in _lh_listcomp_fun²(enumFromTo_lh^493(0, maxval⁰))
//│ 								| LH_N  => [LH_N]})
//│ 							in _lh_listcomp_fun¹(enumFromTo_lh^504(0, maxval⁰)))
//│ 						| Just _lh_findhash'_Just_0¹ => firstSuccess_lh^513((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh^523(0, maxval⁰))
//│ 						| _  => error⁰}
//│ 					| Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {
//│ 						Nothing  => firstSuccess_lh^532((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh^542(0, maxval⁰))
//│ 						| Just _lh_findhash'_Just_0³ => try⁰([LH_N])
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def findhash_lh(_lh_findhash_arg1⁰) = findhash'_lh^811([H [Nothing] [Nothing] [LH_N]], [LH_N], _lh_findhash_arg1⁰)
//│ def firstSuccess_lh(_lh_firstSuccess_arg1⁰, _lh_firstSuccess_arg2⁰) = first_lh^114(0, map_lh^117(_lh_firstSuccess_arg1⁰, _lh_firstSuccess_arg2⁰))
//│ def first_lh(_lh_first_arg1⁰, _lh_first_arg2⁰) = case _lh_first_arg2⁰ of {
//│ 	LH_N  => [NotEver _lh_first_arg1⁰]
//│ 	| LH_C _lh_first_LH_C_0⁰ _lh_first_LH_C_1⁰ => 
//│ 		let _lh_matchIdent⁴ = _lh_first_LH_C_0⁰
//│ 		in case _lh_matchIdent⁴ of {
//│ 			YesIts _lh_first_YesIts_0⁰ _lh_first_YesIts_1⁰ => [YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰]
//│ 			| NotEver _lh_first_NotEver_0⁰ => first_lh^852((_lh_first_arg1⁰ + _lh_first_NotEver_0⁰), _lh_first_LH_C_1⁰)
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def foldr_lh(f¹, i⁰, ls¹) = case ls¹ of {
//│ 	LH_C h¹ t¹ => f¹(h¹, foldr_lh^19(f¹, i⁰, t¹))
//│ 	| LH_N  => i⁰}
//│ def freqsorted_lh(_lh_freqsorted_arg1⁰) = _lh_freqsorted_arg1⁰
//│ def freqtab_lh(_lh_freqtab_arg1⁰) = histo_lh^594(concat_lh^595(map_lh^596(ends_lh^597, attribkeys_lh^599(keys_lh^600(0)))))
//│ def hash_lh(_lh_hash_arg1⁰, _lh_hash_arg2⁰) = case _lh_hash_arg2⁰ of {
//│ 	K _lh_hash_K_0⁰ _lh_hash_K_1⁰ _lh_hash_K_2⁰ _lh_hash_K_3⁰ => ((_lh_hash_K_3⁰ + assoc_lh^732(_lh_hash_K_1⁰, _lh_hash_arg1⁰)) + assoc_lh^739(_lh_hash_K_2⁰, _lh_hash_arg1⁰))
//│ 	| _  => error⁰}
//│ def head_lh(ls²) = case ls² of {
//│ 	LH_C h² t² => h²
//│ 	| LH_N  => error⁰}
//│ def hinsert_lh(_lh_hinsert_arg1⁰, _lh_hinsert_arg2⁰) = case _lh_hinsert_arg2⁰ of {
//│ 	H _lh_hinsert_H_0⁰ _lh_hinsert_H_1⁰ _lh_hinsert_H_2⁰ => 
//│ 		let lo'⁰ = minm_lh^126(_lh_hinsert_H_0⁰, _lh_hinsert_arg1⁰)
//│ 		in let hi'⁰ = maxm_lh^131(_lh_hinsert_H_1⁰, _lh_hinsert_arg1⁰)
//│ 		in if (member_lh^137(_lh_hinsert_arg1⁰, _lh_hinsert_H_2⁰) || (((1 + hi'⁰) - lo'⁰) > length_lh^154(keys_lh^155(0)))) then [Nothing] else [Just [H [Just lo'⁰] [Just hi'⁰] [LH_C _lh_hinsert_arg1⁰ _lh_hinsert_H_2⁰]]]
//│ 	| _  => error⁰}
//│ def histins_lh(_lh_histins_arg1⁰, _lh_histins_arg2⁰) = case _lh_histins_arg2⁰ of {
//│ 	LH_N  => [LH_C [LH_P2 _lh_histins_arg1⁰ 1] [LH_N]]
//│ 	| LH_C _lh_histins_LH_C_0⁰ _lh_histins_LH_C_1⁰ => case _lh_histins_LH_C_0⁰ of {
//│ 		LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰ => if polyEq⁰(_lh_histins_arg1⁰, _lh_histins_LH_P2_0⁰) then [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰] else [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh^636(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def histo_lh(_lh_histo_arg1⁰) = foldr_lh^208(histins_lh^209, [LH_N], _lh_histo_arg1⁰)
//│ def keys_lh(_lh_keys_arg1⁰) = [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]] [LH_C [LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]] [LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]]]
//│ def last_lh(_lh_last_arg1⁰) = case _lh_last_arg1⁰ of {
//│ 	LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => 
//│ 		let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {
//│ 			LH_N  => _lh_go_arg1⁰
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰)
//│ 			| _  => error⁰}))
//│ 		in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def length_lh(ls⁴) = case ls⁴ of {
//│ 	LH_C h⁴ t⁴ => (1 + length_lh^84(t⁴))
//│ 	| LH_N  => 0}
//│ def map_lh(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh^5(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh^93(t⁵, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def max_lh(_lh_max_arg1⁰, _lh_max_arg2⁰) = if (_lh_max_arg1⁰ > _lh_max_arg2⁰) then _lh_max_arg1⁰ else _lh_max_arg2⁰
//│ def maxm_lh(_lh_maxm_arg1⁰, _lh_maxm_arg2⁰) = case _lh_maxm_arg1⁰ of {
//│ 	Nothing  => _lh_maxm_arg2⁰
//│ 	| Just _lh_maxm_Just_0⁰ => max_lh^228(_lh_maxm_Just_0⁰, _lh_maxm_arg2⁰)
//│ 	| _  => error⁰}
//│ def member_lh(_lh_member_arg1⁰, _lh_member_arg2⁰) = case _lh_member_arg2⁰ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_member_LH_C_0⁰ _lh_member_LH_C_1⁰ => (polyEq⁰(_lh_member_arg1⁰, _lh_member_LH_C_0⁰) || member_lh^801(_lh_member_arg1⁰, _lh_member_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def min_lh(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ < _lh_min_arg2⁰) then _lh_min_arg1⁰ else _lh_min_arg2⁰
//│ def minm_lh(_lh_minm_arg1⁰, _lh_minm_arg2⁰) = case _lh_minm_arg1⁰ of {
//│ 	Nothing  => _lh_minm_arg2⁰
//│ 	| Just _lh_minm_Just_0⁰ => min_lh^585(_lh_minm_Just_0⁰, _lh_minm_arg2⁰)
//│ 	| _  => error⁰}
//│ def partition'_lh(_lh_partition'_arg1⁰) = foldr_lh^371(select_lh^372(_lh_partition'_arg1⁰), [LH_P2 [LH_N] [LH_N]])
//│ def prog_lh(_lh_prog_arg1⁰) = cichelli_lh^608(_lh_prog_arg1⁰)
//│ def select_lh(_lh_select_arg1⁰, _lh_select_arg2⁰, _lh_select_arg3⁰) = case _lh_select_arg3⁰ of {
//│ 	LH_P2 _lh_select_LH_P2_0⁰ _lh_select_LH_P2_1⁰ => if _lh_select_arg1⁰(_lh_select_arg2⁰) then [LH_P2 [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰] _lh_select_LH_P2_1⁰] else [LH_P2 _lh_select_LH_P2_0⁰ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]]
//│ 	| _  => error⁰}
//│ def subset_lh(_lh_subset_arg1⁰, _lh_subset_arg2⁰) = all_lh^822((fun x¹ -> member_lh^823(x¹, _lh_subset_arg2⁰)), _lh_subset_arg1⁰)
//│ def take_lh(n⁰, ls³) = if (n⁰ > 0) then case ls³ of {
//│ 	LH_C h³ t³ => [LH_C h³ take_lh^64((n⁰ - 1), t³)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testCichelli_nofib_lh(_lh_testCichelli_nofib_arg1⁰) = prog_lh^836(_lh_testCichelli_nofib_arg1⁰)
//│ def union_lh(_lh_union_arg1⁰, _lh_union_arg2⁰) = mappend_lh^178(_lh_union_arg1⁰, 
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if not⁰(member_lh^183(_lh_listcomp_fun_ls_h⁰, _lh_union_arg1⁰)) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰(_lh_union_arg2⁰))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec keys_lh _lh_keys_arg1_0 =
//│ 		  (`LH_C((`LH_C('a', (`LH_C('p', (`LH_C('p', (`LH_C('l', (`LH_C('e', (`LH_N))))))))))), (`LH_C((`LH_C('b', (`LH_C('a', (`LH_C('n', (`LH_C('a', (`LH_C('n', (`LH_C('a', (`LH_N))))))))))))), (`LH_C((`LH_C('p', (`LH_C('e', (`LH_C('a', (`LH_C('c', (`LH_C('h', (`LH_N))))))))))), (`LH_C((`LH_C('a', (`LH_C('p', (`LH_C('r', (`LH_C('i', (`LH_C('c', (`LH_C('o', (`LH_C('t', (`LH_N))))))))))))))), (`LH_N)))))))));;
//│ 		let rec all_lh _lh_all_arg1_0 _lh_all_arg2_0 =
//│ 		  (match _lh_all_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_all_LH_C_0_0, _lh_all_LH_C_1_0) -> 
//│ 		      (if (_lh_all_arg1_0 _lh_all_LH_C_0_0) then
//│ 		        ((all_lh _lh_all_arg1_0) _lh_all_LH_C_1_0)
//│ 		      else
//│ 		        false)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec member_lh _lh_member_arg1_0 _lh_member_arg2_0 =
//│ 		  (match _lh_member_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_member_LH_C_0_0, _lh_member_LH_C_1_0) -> 
//│ 		      ((_lh_member_arg1_0 = _lh_member_LH_C_0_0) || ((member_lh _lh_member_arg1_0) _lh_member_LH_C_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec ends_lh _lh_ends_arg1_0 =
//│ 		  (match _lh_ends_arg1_0 with
//│ 		    | `K(_lh_ends_K_0_0, _lh_ends_K_1_0, _lh_ends_K_2_0, _lh_ends_K_3_0) -> 
//│ 		      (`LH_C(_lh_ends_K_1_0, (`LH_C(_lh_ends_K_2_0, (`LH_N)))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec mappend_lh xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      (`LH_C(h_5, ((mappend_lh t_5) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec select_lh _lh_select_arg1_0 _lh_select_arg2_0 _lh_select_arg3_0 =
//│ 		  (match _lh_select_arg3_0 with
//│ 		    | `LH_P2(_lh_select_LH_P2_0_0, _lh_select_LH_P2_1_0) -> 
//│ 		      (if (_lh_select_arg1_0 _lh_select_arg2_0) then
//│ 		        (`LH_P2((`LH_C(_lh_select_arg2_0, _lh_select_LH_P2_0_0)), _lh_select_LH_P2_1_0))
//│ 		      else
//│ 		        (`LH_P2(_lh_select_LH_P2_0_0, (`LH_C(_lh_select_arg2_0, _lh_select_LH_P2_1_0)))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec foldr_lh f_1 i_0 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      ((f_1 h_1) (((foldr_lh f_1) i_0) t_1))
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec freqsorted_lh _lh_freqsorted_arg1_0 =
//│ 		  _lh_freqsorted_arg1_0;;
//│ 		let rec enumFromTo_lh a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec map_lh f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C((f_0 h_0), ((map_lh f_0) t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec first_lh _lh_first_arg1_0 _lh_first_arg2_0 =
//│ 		  (match _lh_first_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`NotEver(_lh_first_arg1_0))
//│ 		    | `LH_C(_lh_first_LH_C_0_0, _lh_first_LH_C_1_0) -> 
//│ 		      (let rec _lh_matchIdent_4 = _lh_first_LH_C_0_0 in
//│ 		        (match _lh_matchIdent_4 with
//│ 		          | `YesIts(_lh_first_YesIts_0_0, _lh_first_YesIts_1_0) -> 
//│ 		            (`YesIts((_lh_first_arg1_0 + _lh_first_YesIts_0_0), _lh_first_YesIts_1_0))
//│ 		          | `NotEver(_lh_first_NotEver_0_0) -> 
//│ 		            ((first_lh (_lh_first_arg1_0 + _lh_first_NotEver_0_0)) _lh_first_LH_C_1_0)
//│ 		          | _ -> 
//│ 		            (failwith "error")))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec assocm_lh _lh_assocm_arg1_0 _lh_assocm_arg2_0 =
//│ 		  (match _lh_assocm_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`Nothing)
//│ 		    | `LH_C(_lh_assocm_LH_C_0_0, _lh_assocm_LH_C_1_0) -> 
//│ 		      (match _lh_assocm_LH_C_0_0 with
//│ 		        | `LH_P2(_lh_assocm_LH_P2_0_0, _lh_assocm_LH_P2_1_0) -> 
//│ 		          (if (_lh_assocm_arg1_0 = _lh_assocm_LH_P2_0_0) then
//│ 		            (`Just(_lh_assocm_LH_P2_1_0))
//│ 		          else
//│ 		            ((assocm_lh _lh_assocm_arg1_0) _lh_assocm_LH_C_1_0))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec histins_lh _lh_histins_arg1_0 _lh_histins_arg2_0 =
//│ 		  (match _lh_histins_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_C((`LH_P2(_lh_histins_arg1_0, 1)), (`LH_N)))
//│ 		    | `LH_C(_lh_histins_LH_C_0_0, _lh_histins_LH_C_1_0) -> 
//│ 		      (match _lh_histins_LH_C_0_0 with
//│ 		        | `LH_P2(_lh_histins_LH_P2_0_0, _lh_histins_LH_P2_1_0) -> 
//│ 		          (if (_lh_histins_arg1_0 = _lh_histins_LH_P2_0_0) then
//│ 		            (`LH_C((`LH_P2(_lh_histins_LH_P2_0_0, (_lh_histins_LH_P2_1_0 + 1))), _lh_histins_LH_C_1_0))
//│ 		          else
//│ 		            (`LH_C((`LH_P2(_lh_histins_LH_P2_0_0, _lh_histins_LH_P2_1_0)), ((histins_lh _lh_histins_arg1_0) _lh_histins_LH_C_1_0))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec last_lh _lh_last_arg1_0 =
//│ 		  (match _lh_last_arg1_0 with
//│ 		    | `LH_C(_lh_last_LH_C_0_0, _lh_last_LH_C_1_0) -> 
//│ 		      (let rec go_0 = (fun _lh_go_arg1_0 _lh_go_arg2_0 -> 
//│ 		        (match _lh_go_arg2_0 with
//│ 		          | `LH_N -> 
//│ 		            _lh_go_arg1_0
//│ 		          | `LH_C(_lh_go_LH_C_0_0, _lh_go_LH_C_1_0) -> 
//│ 		            ((go_0 _lh_go_LH_C_0_0) _lh_go_LH_C_1_0)
//│ 		          | _ -> 
//│ 		            (failwith "error"))) in
//│ 		        ((go_0 _lh_last_LH_C_0_0) _lh_last_LH_C_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec head_lh ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      h_2
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec length_lh ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      (1 + (length_lh t_4))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec assoc_lh _lh_assoc_arg1_0 _lh_assoc_arg2_0 =
//│ 		  (match _lh_assoc_arg2_0 with
//│ 		    | `LH_C(_lh_assoc_LH_C_0_0, _lh_assoc_LH_C_1_0) -> 
//│ 		      (match _lh_assoc_LH_C_0_0 with
//│ 		        | `LH_P2(_lh_assoc_LH_P2_0_0, _lh_assoc_LH_P2_1_0) -> 
//│ 		          (if (_lh_assoc_arg1_0 = _lh_assoc_LH_P2_0_0) then
//│ 		            _lh_assoc_LH_P2_1_0
//│ 		          else
//│ 		            ((assoc_lh _lh_assoc_arg1_0) _lh_assoc_LH_C_1_0))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec min_lh _lh_min_arg1_0 _lh_min_arg2_0 =
//│ 		  (if (_lh_min_arg1_0 < _lh_min_arg2_0) then
//│ 		    _lh_min_arg1_0
//│ 		  else
//│ 		    _lh_min_arg2_0);;
//│ 		let rec max_lh _lh_max_arg1_0 _lh_max_arg2_0 =
//│ 		  (if (_lh_max_arg1_0 > _lh_max_arg2_0) then
//│ 		    _lh_max_arg1_0
//│ 		  else
//│ 		    _lh_max_arg2_0);;
//│ 		let rec take_lh n_0 ls_3 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match ls_3 with
//│ 		      | `LH_C(h_3, t_3) -> 
//│ 		        (`LH_C(h_3, ((take_lh (n_0 - 1)) t_3)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec subset_lh _lh_subset_arg1_0 _lh_subset_arg2_0 =
//│ 		  ((all_lh (fun x_1 -> 
//│ 		    ((member_lh x_1) _lh_subset_arg2_0))) _lh_subset_arg1_0);;
//│ 		let rec union_lh _lh_union_arg1_0 _lh_union_arg2_0 =
//│ 		  ((mappend_lh _lh_union_arg1_0) (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		    (match _lh_listcomp_fun_para_0 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		        (if (not ((member_lh _lh_listcomp_fun_ls_h_0) _lh_union_arg1_0)) then
//│ 		          (`LH_C(_lh_listcomp_fun_ls_h_0, (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		        else
//│ 		          (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_0 _lh_union_arg2_0)));;
//│ 		let rec partition'_lh _lh_partition'_arg1_0 =
//│ 		  ((foldr_lh (select_lh _lh_partition'_arg1_0)) (`LH_P2((`LH_N), (`LH_N))));;
//│ 		let rec firstSuccess_lh _lh_firstSuccess_arg1_0 _lh_firstSuccess_arg2_0 =
//│ 		  ((first_lh 0) ((map_lh _lh_firstSuccess_arg1_0) _lh_firstSuccess_arg2_0));;
//│ 		let rec histo_lh _lh_histo_arg1_0 =
//│ 		  (((foldr_lh histins_lh) (`LH_N)) _lh_histo_arg1_0);;
//│ 		let rec concat_lh lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      ((mappend_lh h_6) (concat_lh t_6))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec attribkeys_lh _lh_attribkeys_arg1_0 =
//│ 		  ((map_lh (fun k_0 -> 
//│ 		    (`K(k_0, (head_lh k_0), (last_lh k_0), (length_lh k_0))))) _lh_attribkeys_arg1_0);;
//│ 		let rec hash_lh _lh_hash_arg1_0 _lh_hash_arg2_0 =
//│ 		  (match _lh_hash_arg2_0 with
//│ 		    | `K(_lh_hash_K_0_0, _lh_hash_K_1_0, _lh_hash_K_2_0, _lh_hash_K_3_0) -> 
//│ 		      ((_lh_hash_K_3_0 + ((assoc_lh _lh_hash_K_1_0) _lh_hash_arg1_0)) + ((assoc_lh _lh_hash_K_2_0) _lh_hash_arg1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec minm_lh _lh_minm_arg1_0 _lh_minm_arg2_0 =
//│ 		  (match _lh_minm_arg1_0 with
//│ 		    | `Nothing -> 
//│ 		      _lh_minm_arg2_0
//│ 		    | `Just(_lh_minm_Just_0_0) -> 
//│ 		      ((min_lh _lh_minm_Just_0_0) _lh_minm_arg2_0)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec maxm_lh _lh_maxm_arg1_0 _lh_maxm_arg2_0 =
//│ 		  (match _lh_maxm_arg1_0 with
//│ 		    | `Nothing -> 
//│ 		      _lh_maxm_arg2_0
//│ 		    | `Just(_lh_maxm_Just_0_0) -> 
//│ 		      ((max_lh _lh_maxm_Just_0_0) _lh_maxm_arg2_0)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec blocked'_lh _lh_blocked'_arg1_0 _lh_blocked'_arg2_0 =
//│ 		  (match _lh_blocked'_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_blocked'_LH_C_0_0, _lh_blocked'_LH_C_1_0) -> 
//│ 		      (let rec ds'_0 = ((union_lh _lh_blocked'_arg1_0) (ends_lh _lh_blocked'_LH_C_0_0)) in
//│ 		        (let rec _lh_matchIdent_3 = ((partition'_lh (fun x_0 -> 
//│ 		          ((subset_lh (ends_lh x_0)) ds'_0))) _lh_blocked'_LH_C_1_0) in
//│ 		          (match _lh_matchIdent_3 with
//│ 		            | `LH_P2(_lh_blocked'_LH_P2_0_0, _lh_blocked'_LH_P2_1_0) -> 
//│ 		              ((mappend_lh (`LH_C(_lh_blocked'_LH_C_0_0, _lh_blocked'_LH_P2_0_0))) ((blocked'_lh ds'_0) _lh_blocked'_LH_P2_1_0))
//│ 		            | _ -> 
//│ 		              (failwith "error"))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec freqtab_lh _lh_freqtab_arg1_0 =
//│ 		  (histo_lh (concat_lh ((map_lh ends_lh) (attribkeys_lh (keys_lh 0)))));;
//│ 		let rec hinsert_lh _lh_hinsert_arg1_0 _lh_hinsert_arg2_0 =
//│ 		  (match _lh_hinsert_arg2_0 with
//│ 		    | `H(_lh_hinsert_H_0_0, _lh_hinsert_H_1_0, _lh_hinsert_H_2_0) -> 
//│ 		      (let rec lo'_0 = ((minm_lh _lh_hinsert_H_0_0) _lh_hinsert_arg1_0) in
//│ 		        (let rec hi'_0 = ((maxm_lh _lh_hinsert_H_1_0) _lh_hinsert_arg1_0) in
//│ 		          (if (((member_lh _lh_hinsert_arg1_0) _lh_hinsert_H_2_0) || (((1 + hi'_0) - lo'_0) > (length_lh (keys_lh 0)))) then
//│ 		            (`Nothing)
//│ 		          else
//│ 		            (`Just((`H((`Just(lo'_0)), (`Just(hi'_0)), (`LH_C(_lh_hinsert_arg1_0, _lh_hinsert_H_2_0)))))))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec blocked_lh _lh_blocked_arg1_0 =
//│ 		  ((blocked'_lh (`LH_N)) _lh_blocked_arg1_0);;
//│ 		let rec findhash'_lh _lh_findhash'_arg1_0 _lh_findhash'_arg2_0 _lh_findhash'_arg3_0 =
//│ 		  (match _lh_findhash'_arg3_0 with
//│ 		    | `LH_N -> 
//│ 		      (`YesIts(1, _lh_findhash'_arg2_0))
//│ 		    | `LH_C(_lh_findhash'_LH_C_0_0, _lh_findhash'_LH_C_1_0) -> 
//│ 		      (match _lh_findhash'_LH_C_0_0 with
//│ 		        | `K(_lh_findhash'_K_0_0, _lh_findhash'_K_1_0, _lh_findhash'_K_2_0, _lh_findhash'_K_3_0) -> 
//│ 		          (let rec try_0 = (fun newAssocs_0 -> 
//│ 		            (let rec newCharAssocs_0 = ((mappend_lh newAssocs_0) _lh_findhash'_arg2_0) in
//│ 		              (let rec _lh_matchIdent_0 = ((hinsert_lh ((hash_lh newCharAssocs_0) (`K(_lh_findhash'_K_0_0, _lh_findhash'_K_1_0, _lh_findhash'_K_2_0, _lh_findhash'_K_3_0)))) _lh_findhash'_arg1_0) in
//│ 		                (match _lh_matchIdent_0 with
//│ 		                  | `Nothing -> 
//│ 		                    (`NotEver(1))
//│ 		                  | `Just(_lh_findhash'_Just_0_0) -> 
//│ 		                    (((findhash'_lh _lh_findhash'_Just_0_0) newCharAssocs_0) _lh_findhash'_LH_C_1_0)
//│ 		                  | _ -> 
//│ 		                    (failwith "error"))))) in
//│ 		            (let rec maxval_0 = (length_lh (freqtab_lh 0)) in
//│ 		              (let rec _lh_matchIdent_1 = (`LH_P2(((assocm_lh _lh_findhash'_K_1_0) _lh_findhash'_arg2_0), ((assocm_lh _lh_findhash'_K_2_0) _lh_findhash'_arg2_0))) in
//│ 		                (match _lh_matchIdent_1 with
//│ 		                  | `LH_P2(_lh_findhash'_LH_P2_0_0, _lh_findhash'_LH_P2_1_0) -> 
//│ 		                    (match _lh_findhash'_LH_P2_0_0 with
//│ 		                      | `Nothing -> 
//│ 		                        (match _lh_findhash'_LH_P2_1_0 with
//│ 		                          | `Nothing -> 
//│ 		                            (if (_lh_findhash'_K_1_0 = _lh_findhash'_K_2_0) then
//│ 		                              ((firstSuccess_lh (fun m_0 -> 
//│ 		                                (try_0 (`LH_C((`LH_P2(_lh_findhash'_K_1_0, m_0)), (`LH_N)))))) ((enumFromTo_lh 0) maxval_0))
//│ 		                            else
//│ 		                              ((firstSuccess_lh (fun mn_0 -> 
//│ 		                                (let rec _lh_matchIdent_2 = mn_0 in
//│ 		                                  (match _lh_matchIdent_2 with
//│ 		                                    | `LH_P2(_lh_findhash'_LH_P2_0_1, _lh_findhash'_LH_P2_1_1) -> 
//│ 		                                      (try_0 (`LH_C((`LH_P2(_lh_findhash'_K_1_0, _lh_findhash'_LH_P2_0_1)), (`LH_C((`LH_P2(_lh_findhash'_K_2_0, _lh_findhash'_LH_P2_1_1)), (`LH_N))))))
//│ 		                                    | _ -> 
//│ 		                                      (failwith "error"))))) (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		                                (match _lh_listcomp_fun_para_1 with
//│ 		                                  | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		                                    (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		                                      (match _lh_listcomp_fun_para_2 with
//│ 		                                        | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		                                          (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_h_2)), (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2)))
//│ 		                                        | `LH_N -> 
//│ 		                                          (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))) in
//│ 		                                      (_lh_listcomp_fun_2 ((enumFromTo_lh 0) maxval_0)))
//│ 		                                  | `LH_N -> 
//│ 		                                    (`LH_N))) in
//│ 		                                (_lh_listcomp_fun_1 ((enumFromTo_lh 0) maxval_0)))))
//│ 		                          | `Just(_lh_findhash'_Just_0_1) -> 
//│ 		                            ((firstSuccess_lh (fun m_1 -> 
//│ 		                              (try_0 (`LH_C((`LH_P2(_lh_findhash'_K_1_0, m_1)), (`LH_N)))))) ((enumFromTo_lh 0) maxval_0))
//│ 		                          | _ -> 
//│ 		                            (failwith "error"))
//│ 		                      | `Just(_lh_findhash'_Just_0_2) -> 
//│ 		                        (match _lh_findhash'_LH_P2_1_0 with
//│ 		                          | `Nothing -> 
//│ 		                            ((firstSuccess_lh (fun n_1 -> 
//│ 		                              (try_0 (`LH_C((`LH_P2(_lh_findhash'_K_2_0, n_1)), (`LH_N)))))) ((enumFromTo_lh 0) maxval_0))
//│ 		                          | `Just(_lh_findhash'_Just_0_3) -> 
//│ 		                            (try_0 (`LH_N))
//│ 		                          | _ -> 
//│ 		                            (failwith "error"))
//│ 		                      | _ -> 
//│ 		                        (failwith "error"))
//│ 		                  | _ -> 
//│ 		                    (failwith "error")))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec findhash_lh _lh_findhash_arg1_0 =
//│ 		  (((findhash'_lh (`H((`Nothing), (`Nothing), (`LH_N)))) (`LH_N)) _lh_findhash_arg1_0);;
//│ 		let rec cichelli_lh _lh_cichelli_arg1_0 =
//│ 		  (let rec attribkeys'_0 = (attribkeys_lh ((mappend_lh (keys_lh 0)) ((take_lh (_lh_cichelli_arg1_0 mod 2)) (keys_lh 0)))) in
//│ 		    (let rec hashkeys_0 = ((fun _lh_funcomp_x_0 -> 
//│ 		      (blocked_lh (freqsorted_lh _lh_funcomp_x_0))) attribkeys'_0) in
//│ 		      (findhash_lh hashkeys_0)));;
//│ 		let rec prog_lh _lh_prog_arg1_0 =
//│ 		  (cichelli_lh _lh_prog_arg1_0);;
//│ 		let rec testCichelli_nofib_lh _lh_testCichelli_nofib_arg1_0 =
//│ 		  (prog_lh _lh_testCichelli_nofib_arg1_0);;
//│ 		(testCichelli_nofib_lh 6)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case lss⁰ of {LH_C h⁶ t⁶ => mappend_lh(h⁶, concat_lh(t⁶)) | LH_N  => [LH_N]}: 112
//│ 	case _lh_blocked'_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_C_1⁰ => let ds'⁰ = union_lh(_lh_blocked'_arg1⁰, ends_lh(_lh_blocked'_LH_C_0⁰))
//│ in let _lh_matchIdent³ = partition'_lh((fun x⁰ -> subset_lh(ends_lh(x⁰), ds'⁰)), _lh_blocked'_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_blocked'_LH_P2_0⁰ _lh_blocked'_LH_P2_1⁰ => mappend_lh([LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰], blocked'_lh(ds'⁰, _lh_blocked'_LH_P2_1⁰)) | _  => error⁰} | _  => error⁰}: 724
//│ 	case _lh_first_arg2⁰ of {LH_N  => [NotEver _lh_first_arg1⁰] | LH_C _lh_first_LH_C_0⁰ _lh_first_LH_C_1⁰ => let _lh_matchIdent⁴ = _lh_first_LH_C_0⁰
//│ in case _lh_matchIdent⁴ of {YesIts _lh_first_YesIts_0⁰ _lh_first_YesIts_1⁰ => [YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰] | NotEver _lh_first_NotEver_0⁰ => first_lh((_lh_first_arg1⁰ + _lh_first_NotEver_0⁰), _lh_first_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 865
//│ [LH_N]: 11 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case lss⁰ of {LH_C h⁶ t⁶ => mappend_lh(h⁶, concat_lh(t⁶)) | LH_N  => [LH_N]}: 112
//│ 	case _lh_blocked'_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_C_1⁰ => let ds'⁰ = union_lh(_lh_blocked'_arg1⁰, ends_lh(_lh_blocked'_LH_C_0⁰))
//│ in let _lh_matchIdent³ = partition'_lh((fun x⁰ -> subset_lh(ends_lh(x⁰), ds'⁰)), _lh_blocked'_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_blocked'_LH_P2_0⁰ _lh_blocked'_LH_P2_1⁰ => mappend_lh([LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰], blocked'_lh(ds'⁰, _lh_blocked'_LH_P2_1⁰)) | _  => error⁰} | _  => error⁰}: 724
//│ 	case _lh_first_arg2⁰ of {LH_N  => [NotEver _lh_first_arg1⁰] | LH_C _lh_first_LH_C_0⁰ _lh_first_LH_C_1⁰ => let _lh_matchIdent⁴ = _lh_first_LH_C_0⁰
//│ in case _lh_matchIdent⁴ of {YesIts _lh_first_YesIts_0⁰ _lh_first_YesIts_1⁰ => [YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰] | NotEver _lh_first_NotEver_0⁰ => first_lh((_lh_first_arg1⁰ + _lh_first_NotEver_0⁰), _lh_first_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 865
//│ [LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 52 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 490
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]}: 501
//│ [LH_N]: 53 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 490
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]}: 501
//│ [LH_C h³ take_lh((n⁰ - 1), t³)]: 73 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ 	case _lh_assocm_arg2⁰ of {LH_N  => [Nothing] | LH_C _lh_assocm_LH_C_0⁰ _lh_assocm_LH_C_1⁰ => case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 277
//│ 	case _lh_assoc_arg2⁰ of {LH_C _lh_assoc_LH_C_0⁰ _lh_assoc_LH_C_1⁰ => case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 303
//│ 	case _lh_findhash'_arg3⁰ of {LH_N  => [YesIts 1 _lh_findhash'_arg2⁰] | LH_C _lh_findhash'_LH_C_0⁰ _lh_findhash'_LH_C_1⁰ => case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 563
//│ 	case _lh_member_arg2⁰ of {LH_N  => [False] | LH_C _lh_member_LH_C_0⁰ _lh_member_LH_C_1⁰ => (polyEq⁰(_lh_member_arg1⁰, _lh_member_LH_C_0⁰) || member_lh(_lh_member_arg1⁰, _lh_member_LH_C_1⁰)) | _  => error⁰}: 808
//│ [LH_N]: 74 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ 	case _lh_assocm_arg2⁰ of {LH_N  => [Nothing] | LH_C _lh_assocm_LH_C_0⁰ _lh_assocm_LH_C_1⁰ => case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 277
//│ 	case _lh_assoc_arg2⁰ of {LH_C _lh_assoc_LH_C_0⁰ _lh_assoc_LH_C_1⁰ => case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 303
//│ 	case _lh_findhash'_arg3⁰ of {LH_N  => [YesIts 1 _lh_findhash'_arg2⁰] | LH_C _lh_findhash'_LH_C_0⁰ _lh_findhash'_LH_C_1⁰ => case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 563
//│ 	case _lh_member_arg2⁰ of {LH_N  => [False] | LH_C _lh_member_LH_C_0⁰ _lh_member_LH_C_1⁰ => (polyEq⁰(_lh_member_arg1⁰, _lh_member_LH_C_0⁰) || member_lh(_lh_member_arg1⁰, _lh_member_LH_C_1⁰)) | _  => error⁰}: 808
//│ [LH_N]: 76 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ 	case _lh_assocm_arg2⁰ of {LH_N  => [Nothing] | LH_C _lh_assocm_LH_C_0⁰ _lh_assocm_LH_C_1⁰ => case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 277
//│ 	case _lh_assoc_arg2⁰ of {LH_C _lh_assoc_LH_C_0⁰ _lh_assoc_LH_C_1⁰ => case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 303
//│ 	case _lh_findhash'_arg3⁰ of {LH_N  => [YesIts 1 _lh_findhash'_arg2⁰] | LH_C _lh_findhash'_LH_C_0⁰ _lh_findhash'_LH_C_1⁰ => case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 563
//│ 	case _lh_member_arg2⁰ of {LH_N  => [False] | LH_C _lh_member_LH_C_0⁰ _lh_member_LH_C_1⁰ => (polyEq⁰(_lh_member_arg1⁰, _lh_member_LH_C_0⁰) || member_lh(_lh_member_arg1⁰, _lh_member_LH_C_1⁰)) | _  => error⁰}: 808
//│ [LH_C h⁵ mappend_lh(t⁵, ys⁰)]: 98 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ 	case _lh_assocm_arg2⁰ of {LH_N  => [Nothing] | LH_C _lh_assocm_LH_C_0⁰ _lh_assocm_LH_C_1⁰ => case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 277
//│ 	case _lh_assoc_arg2⁰ of {LH_C _lh_assoc_LH_C_0⁰ _lh_assoc_LH_C_1⁰ => case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 303
//│ 	case _lh_findhash'_arg3⁰ of {LH_N  => [YesIts 1 _lh_findhash'_arg2⁰] | LH_C _lh_findhash'_LH_C_0⁰ _lh_findhash'_LH_C_1⁰ => case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 563
//│ 	case _lh_member_arg2⁰ of {LH_N  => [False] | LH_C _lh_member_LH_C_0⁰ _lh_member_LH_C_1⁰ => (polyEq⁰(_lh_member_arg1⁰, _lh_member_LH_C_0⁰) || member_lh(_lh_member_arg1⁰, _lh_member_LH_C_1⁰)) | _  => error⁰}: 808
//│ [LH_N]: 111 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ 	case _lh_assocm_arg2⁰ of {LH_N  => [Nothing] | LH_C _lh_assocm_LH_C_0⁰ _lh_assocm_LH_C_1⁰ => case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 277
//│ 	case _lh_assoc_arg2⁰ of {LH_C _lh_assoc_LH_C_0⁰ _lh_assoc_LH_C_1⁰ => case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 303
//│ 	case _lh_findhash'_arg3⁰ of {LH_N  => [YesIts 1 _lh_findhash'_arg2⁰] | LH_C _lh_findhash'_LH_C_0⁰ _lh_findhash'_LH_C_1⁰ => case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 563
//│ 	case _lh_member_arg2⁰ of {LH_N  => [False] | LH_C _lh_member_LH_C_0⁰ _lh_member_LH_C_1⁰ => (polyEq⁰(_lh_member_arg1⁰, _lh_member_LH_C_0⁰) || member_lh(_lh_member_arg1⁰, _lh_member_LH_C_1⁰)) | _  => error⁰}: 808
//│ [Nothing]: 161 --->
//│ 	case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰}: 415
//│ [Just lo'⁰]: 163 --->
//│ 	case _lh_minm_arg1⁰ of {Nothing  => _lh_minm_arg2⁰ | Just _lh_minm_Just_0⁰ => min_lh(_lh_minm_Just_0⁰, _lh_minm_arg2⁰) | _  => error⁰}: 591
//│ [Just hi'⁰]: 165 --->
//│ 	case _lh_maxm_arg1⁰ of {Nothing  => _lh_maxm_arg2⁰ | Just _lh_maxm_Just_0⁰ => max_lh(_lh_maxm_Just_0⁰, _lh_maxm_arg2⁰) | _  => error⁰}: 234
//│ [LH_C _lh_hinsert_arg1⁰ _lh_hinsert_H_2⁰]: 168 --->
//│ 	case _lh_member_arg2⁰ of {LH_N  => [False] | LH_C _lh_member_LH_C_0⁰ _lh_member_LH_C_1⁰ => (polyEq⁰(_lh_member_arg1⁰, _lh_member_LH_C_0⁰) || member_lh(_lh_member_arg1⁰, _lh_member_LH_C_1⁰)) | _  => error⁰}: 808
//│ [H [Just lo'⁰] [Just hi'⁰] [LH_C _lh_hinsert_arg1⁰ _lh_hinsert_H_2⁰]]: 169 --->
//│ 	case _lh_hinsert_arg2⁰ of {H _lh_hinsert_H_0⁰ _lh_hinsert_H_1⁰ _lh_hinsert_H_2⁰ => let lo'⁰ = minm_lh(_lh_hinsert_H_0⁰, _lh_hinsert_arg1⁰)
//│ in let hi'⁰ = maxm_lh(_lh_hinsert_H_1⁰, _lh_hinsert_arg1⁰)
//│ in if (member_lh(_lh_hinsert_arg1⁰, _lh_hinsert_H_2⁰) || (((1 + hi'⁰) - lo'⁰) > length_lh(keys_lh(0)))) then [Nothing] else [Just [H [Just lo'⁰] [Just hi'⁰] [LH_C _lh_hinsert_arg1⁰ _lh_hinsert_H_2⁰]]] | _  => error⁰}: 175
//│ [Just [H [Just lo'⁰] [Just hi'⁰] [LH_C _lh_hinsert_arg1⁰ _lh_hinsert_H_2⁰]]]: 170 --->
//│ 	case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰}: 415
//│ [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 193 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ 	case _lh_assocm_arg2⁰ of {LH_N  => [Nothing] | LH_C _lh_assocm_LH_C_0⁰ _lh_assocm_LH_C_1⁰ => case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 277
//│ 	case _lh_assoc_arg2⁰ of {LH_C _lh_assoc_LH_C_0⁰ _lh_assoc_LH_C_1⁰ => case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 303
//│ 	case _lh_findhash'_arg3⁰ of {LH_N  => [YesIts 1 _lh_findhash'_arg2⁰] | LH_C _lh_findhash'_LH_C_0⁰ _lh_findhash'_LH_C_1⁰ => case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 563
//│ 	case _lh_member_arg2⁰ of {LH_N  => [False] | LH_C _lh_member_LH_C_0⁰ _lh_member_LH_C_1⁰ => (polyEq⁰(_lh_member_arg1⁰, _lh_member_LH_C_0⁰) || member_lh(_lh_member_arg1⁰, _lh_member_LH_C_1⁰)) | _  => error⁰}: 808
//│ [LH_N]: 198 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ 	case _lh_assocm_arg2⁰ of {LH_N  => [Nothing] | LH_C _lh_assocm_LH_C_0⁰ _lh_assocm_LH_C_1⁰ => case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 277
//│ 	case _lh_assoc_arg2⁰ of {LH_C _lh_assoc_LH_C_0⁰ _lh_assoc_LH_C_1⁰ => case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 303
//│ 	case _lh_findhash'_arg3⁰ of {LH_N  => [YesIts 1 _lh_findhash'_arg2⁰] | LH_C _lh_findhash'_LH_C_0⁰ _lh_findhash'_LH_C_1⁰ => case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 563
//│ 	case _lh_member_arg2⁰ of {LH_N  => [False] | LH_C _lh_member_LH_C_0⁰ _lh_member_LH_C_1⁰ => (polyEq⁰(_lh_member_arg1⁰, _lh_member_LH_C_0⁰) || member_lh(_lh_member_arg1⁰, _lh_member_LH_C_1⁰)) | _  => error⁰}: 808
//│ [LH_N]: 211 --->
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_histins_arg2⁰ of {LH_N  => [LH_C [LH_P2 _lh_histins_arg1⁰ 1] [LH_N]] | LH_C _lh_histins_LH_C_0⁰ _lh_histins_LH_C_1⁰ => case _lh_histins_LH_C_0⁰ of {LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰ => if polyEq⁰(_lh_histins_arg1⁰, _lh_histins_LH_P2_0⁰) then [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰] else [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)] | _  => error⁰} | _  => error⁰}: 646
//│ 	case _lh_select_arg3⁰ of {LH_P2 _lh_select_LH_P2_0⁰ _lh_select_LH_P2_1⁰ => if _lh_select_arg1⁰(_lh_select_arg2⁰) then [LH_P2 [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰] _lh_select_LH_P2_1⁰] else [LH_P2 _lh_select_LH_P2_0⁰ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]] | _  => error⁰}: 682
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_blocked'_LH_P2_0⁰ _lh_blocked'_LH_P2_1⁰ => mappend_lh([LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰], blocked'_lh(ds'⁰, _lh_blocked'_LH_P2_1⁰)) | _  => error⁰}: 720
//│ [Nothing]: 259 --->
//│ 	case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰}: 530
//│ 	case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰}: 552
//│ 	case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰}: 554
//│ [Just _lh_assocm_LH_P2_1⁰]: 267 --->
//│ 	case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰}: 530
//│ 	case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰}: 552
//│ 	case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰}: 554
//│ [LH_N]: 281 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ 	case _lh_member_arg2⁰ of {LH_N  => [False] | LH_C _lh_member_LH_C_0⁰ _lh_member_LH_C_1⁰ => (polyEq⁰(_lh_member_arg1⁰, _lh_member_LH_C_0⁰) || member_lh(_lh_member_arg1⁰, _lh_member_LH_C_1⁰)) | _  => error⁰}: 808
//│ [LH_N]: 311 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'e' [LH_N]]: 312 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'l' [LH_C 'e' [LH_N]]]: 313 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]: 314 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]: 315 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]]: 316 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 35
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256
//│ 	case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰}: 275
//│ 	case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰}: 301
//│ 	case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369
//│ 	case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474
//│ 	case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 561
//│ [LH_N]: 323 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'a' [LH_N]]: 324 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'n' [LH_C 'a' [LH_N]]]: 325 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]: 326 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]: 327 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]: 328 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]]: 329 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 35
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256
//│ 	case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰}: 275
//│ 	case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰}: 301
//│ 	case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369
//│ 	case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474
//│ 	case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 561
//│ [LH_N]: 335 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'h' [LH_N]]: 336 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'c' [LH_C 'h' [LH_N]]]: 337 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]: 338 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]: 339 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]]: 340 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 35
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256
//│ 	case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰}: 275
//│ 	case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰}: 301
//│ 	case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369
//│ 	case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474
//│ 	case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 561
//│ [LH_N]: 348 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 't' [LH_N]]: 349 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'o' [LH_C 't' [LH_N]]]: 350 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]: 351 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]: 352 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]: 353 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]: 354 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]]: 355 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 35
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256
//│ 	case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰}: 275
//│ 	case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰}: 301
//│ 	case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369
//│ 	case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474
//│ 	case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 561
//│ [LH_N]: 356 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]: 357 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]: 358 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_C [LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]] [LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]]: 359 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]] [LH_C [LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]] [LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]]]: 360 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_N]: 365 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if not⁰(member_lh(_lh_listcomp_fun_ls_h⁰, _lh_union_arg1⁰)) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | LH_N  => [LH_N]}: 199
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ 	case _lh_all_arg2⁰ of {LH_N  => [True] | LH_C _lh_all_LH_C_0⁰ _lh_all_LH_C_1⁰ => if _lh_all_arg1⁰(_lh_all_LH_C_0⁰) then all_lh(_lh_all_arg1⁰, _lh_all_LH_C_1⁰) else [False] | _  => error⁰}: 580
//│ [LH_C _lh_ends_K_2⁰ [LH_N]]: 366 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if not⁰(member_lh(_lh_listcomp_fun_ls_h⁰, _lh_union_arg1⁰)) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | LH_N  => [LH_N]}: 199
//│ 	case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246
//│ 	case _lh_all_arg2⁰ of {LH_N  => [True] | LH_C _lh_all_LH_C_0⁰ _lh_all_LH_C_1⁰ => if _lh_all_arg1⁰(_lh_all_LH_C_0⁰) then all_lh(_lh_all_arg1⁰, _lh_all_LH_C_1⁰) else [False] | _  => error⁰}: 580
//│ [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]]: 367 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 35
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if not⁰(member_lh(_lh_listcomp_fun_ls_h⁰, _lh_union_arg1⁰)) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | LH_N  => [LH_N]}: 199
//│ 	case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256
//│ 	case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰}: 275
//│ 	case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰}: 301
//│ 	case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369
//│ 	case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474
//│ 	case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 561
//│ 	case _lh_all_arg2⁰ of {LH_N  => [True] | LH_C _lh_all_LH_C_0⁰ _lh_all_LH_C_1⁰ => if _lh_all_arg1⁰(_lh_all_LH_C_0⁰) then all_lh(_lh_all_arg1⁰, _lh_all_LH_C_1⁰) else [False] | _  => error⁰}: 580
//│ 	case _lh_matchIdent⁴ of {YesIts _lh_first_YesIts_0⁰ _lh_first_YesIts_1⁰ => [YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰] | NotEver _lh_first_NotEver_0⁰ => first_lh((_lh_first_arg1⁰ + _lh_first_NotEver_0⁰), _lh_first_LH_C_1⁰) | _  => error⁰}: 862
//│ [LH_N]: 376 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_N]: 377 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case _lh_blocked'_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_C_1⁰ => let ds'⁰ = union_lh(_lh_blocked'_arg1⁰, ends_lh(_lh_blocked'_LH_C_0⁰))
//│ in let _lh_matchIdent³ = partition'_lh((fun x⁰ -> subset_lh(ends_lh(x⁰), ds'⁰)), _lh_blocked'_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_blocked'_LH_P2_0⁰ _lh_blocked'_LH_P2_1⁰ => mappend_lh([LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰], blocked'_lh(ds'⁰, _lh_blocked'_LH_P2_1⁰)) | _  => error⁰} | _  => error⁰}: 724
//│ [LH_P2 [LH_N] [LH_N]]: 378 --->
//│ 	case _lh_histins_arg2⁰ of {LH_N  => [LH_C [LH_P2 _lh_histins_arg1⁰ 1] [LH_N]] | LH_C _lh_histins_LH_C_0⁰ _lh_histins_LH_C_1⁰ => case _lh_histins_LH_C_0⁰ of {LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰ => if polyEq⁰(_lh_histins_arg1⁰, _lh_histins_LH_P2_0⁰) then [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰] else [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)] | _  => error⁰} | _  => error⁰}: 646
//│ 	case _lh_select_arg3⁰ of {LH_P2 _lh_select_LH_P2_0⁰ _lh_select_LH_P2_1⁰ => if _lh_select_arg1⁰(_lh_select_arg2⁰) then [LH_P2 [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰] _lh_select_LH_P2_1⁰] else [LH_P2 _lh_select_LH_P2_0⁰ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]] | _  => error⁰}: 682
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_blocked'_LH_P2_0⁰ _lh_blocked'_LH_P2_1⁰ => mappend_lh([LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰], blocked'_lh(ds'⁰, _lh_blocked'_LH_P2_1⁰)) | _  => error⁰}: 720
//│ [YesIts 1 _lh_findhash'_arg2⁰]: 384 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256
//│ 	case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰}: 275
//│ 	case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰}: 301
//│ 	case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369
//│ 	case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474
//│ 	case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 561
//│ 	case _lh_matchIdent⁴ of {YesIts _lh_first_YesIts_0⁰ _lh_first_YesIts_1⁰ => [YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰] | NotEver _lh_first_NotEver_0⁰ => first_lh((_lh_first_arg1⁰ + _lh_first_NotEver_0⁰), _lh_first_LH_C_1⁰) | _  => error⁰}: 862
//│ [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]: 399 --->
//│ 	case _lh_hash_arg2⁰ of {K _lh_hash_K_0⁰ _lh_hash_K_1⁰ _lh_hash_K_2⁰ _lh_hash_K_3⁰ => ((_lh_hash_K_3⁰ + assoc_lh(_lh_hash_K_1⁰, _lh_hash_arg1⁰)) + assoc_lh(_lh_hash_K_2⁰, _lh_hash_arg1⁰)) | _  => error⁰}: 746
//│ [NotEver 1]: 406 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256
//│ 	case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰}: 275
//│ 	case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰}: 301
//│ 	case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369
//│ 	case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474
//│ 	case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 561
//│ 	case _lh_matchIdent⁴ of {YesIts _lh_first_YesIts_0⁰ _lh_first_YesIts_1⁰ => [YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰] | NotEver _lh_first_NotEver_0⁰ => first_lh((_lh_first_arg1⁰ + _lh_first_NotEver_0⁰), _lh_first_LH_C_1⁰) | _  => error⁰}: 862
//│ [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]: 434 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 556
//│ [LH_P2 _lh_findhash'_K_1⁰ m⁰]: 447 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256
//│ 	case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰}: 275
//│ 	case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰}: 301
//│ 	case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369
//│ 	case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474
//│ 	case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 561
//│ [LH_N]: 448 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]]: 449 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹]: 465 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256
//│ 	case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰}: 275
//│ 	case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰}: 301
//│ 	case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369
//│ 	case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474
//│ 	case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 561
//│ [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹]: 468 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256
//│ 	case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰}: 275
//│ 	case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰}: 301
//│ 	case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369
//│ 	case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474
//│ 	case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 561
//│ [LH_N]: 469 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]: 470 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]: 471 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²]: 482 --->
//│ 	DeadCodeCons
//│ 	NoCons
//│ 	case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256
//│ 	case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369
//│ 	case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474
//│ [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 486 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_N]: 500 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_P2 _lh_findhash'_K_1⁰ m¹]: 517 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256
//│ 	case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰}: 275
//│ 	case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰}: 301
//│ 	case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369
//│ 	case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474
//│ 	case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 561
//│ [LH_N]: 518 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]]: 519 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_P2 _lh_findhash'_K_2⁰ n¹]: 536 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256
//│ 	case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰}: 275
//│ 	case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰}: 301
//│ 	case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369
//│ 	case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474
//│ 	case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 561
//│ [LH_N]: 537 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]]: 538 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_N]: 549 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_P2 _lh_histins_arg1⁰ 1]: 615 --->
//│ 	DeadCodeCons
//│ 	case _lh_histins_LH_C_0⁰ of {LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰ => if polyEq⁰(_lh_histins_arg1⁰, _lh_histins_LH_P2_0⁰) then [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰] else [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)] | _  => error⁰}: 644
//│ [LH_N]: 616 --->
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_histins_arg2⁰ of {LH_N  => [LH_C [LH_P2 _lh_histins_arg1⁰ 1] [LH_N]] | LH_C _lh_histins_LH_C_0⁰ _lh_histins_LH_C_1⁰ => case _lh_histins_LH_C_0⁰ of {LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰ => if polyEq⁰(_lh_histins_arg1⁰, _lh_histins_LH_P2_0⁰) then [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰] else [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)] | _  => error⁰} | _  => error⁰}: 646
//│ [LH_C [LH_P2 _lh_histins_arg1⁰ 1] [LH_N]]: 617 --->
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_histins_arg2⁰ of {LH_N  => [LH_C [LH_P2 _lh_histins_arg1⁰ 1] [LH_N]] | LH_C _lh_histins_LH_C_0⁰ _lh_histins_LH_C_1⁰ => case _lh_histins_LH_C_0⁰ of {LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰ => if polyEq⁰(_lh_histins_arg1⁰, _lh_histins_LH_P2_0⁰) then [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰] else [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)] | _  => error⁰} | _  => error⁰}: 646
//│ 	case _lh_select_arg3⁰ of {LH_P2 _lh_select_LH_P2_0⁰ _lh_select_LH_P2_1⁰ => if _lh_select_arg1⁰(_lh_select_arg2⁰) then [LH_P2 [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰] _lh_select_LH_P2_1⁰] else [LH_P2 _lh_select_LH_P2_0⁰ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]] | _  => error⁰}: 682
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_blocked'_LH_P2_0⁰ _lh_blocked'_LH_P2_1⁰ => mappend_lh([LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰], blocked'_lh(ds'⁰, _lh_blocked'_LH_P2_1⁰)) | _  => error⁰}: 720
//│ [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)]: 630 --->
//│ 	DeadCodeCons
//│ 	case _lh_histins_LH_C_0⁰ of {LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰ => if polyEq⁰(_lh_histins_arg1⁰, _lh_histins_LH_P2_0⁰) then [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰] else [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)] | _  => error⁰}: 644
//│ [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰]: 632 --->
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_histins_arg2⁰ of {LH_N  => [LH_C [LH_P2 _lh_histins_arg1⁰ 1] [LH_N]] | LH_C _lh_histins_LH_C_0⁰ _lh_histins_LH_C_1⁰ => case _lh_histins_LH_C_0⁰ of {LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰ => if polyEq⁰(_lh_histins_arg1⁰, _lh_histins_LH_P2_0⁰) then [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰] else [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)] | _  => error⁰} | _  => error⁰}: 646
//│ 	case _lh_select_arg3⁰ of {LH_P2 _lh_select_LH_P2_0⁰ _lh_select_LH_P2_1⁰ => if _lh_select_arg1⁰(_lh_select_arg2⁰) then [LH_P2 [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰] _lh_select_LH_P2_1⁰] else [LH_P2 _lh_select_LH_P2_0⁰ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]] | _  => error⁰}: 682
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_blocked'_LH_P2_0⁰ _lh_blocked'_LH_P2_1⁰ => mappend_lh([LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰], blocked'_lh(ds'⁰, _lh_blocked'_LH_P2_1⁰)) | _  => error⁰}: 720
//│ [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰]: 635 --->
//│ 	DeadCodeCons
//│ 	case _lh_histins_LH_C_0⁰ of {LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰ => if polyEq⁰(_lh_histins_arg1⁰, _lh_histins_LH_P2_0⁰) then [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰] else [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)] | _  => error⁰}: 644
//│ [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)]: 641 --->
//│ 	case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89
//│ 	case _lh_histins_arg2⁰ of {LH_N  => [LH_C [LH_P2 _lh_histins_arg1⁰ 1] [LH_N]] | LH_C _lh_histins_LH_C_0⁰ _lh_histins_LH_C_1⁰ => case _lh_histins_LH_C_0⁰ of {LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰ => if polyEq⁰(_lh_histins_arg1⁰, _lh_histins_LH_P2_0⁰) then [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰] else [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)] | _  => error⁰} | _  => error⁰}: 646
//│ 	case _lh_select_arg3⁰ of {LH_P2 _lh_select_LH_P2_0⁰ _lh_select_LH_P2_1⁰ => if _lh_select_arg1⁰(_lh_select_arg2⁰) then [LH_P2 [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰] _lh_select_LH_P2_1⁰] else [LH_P2 _lh_select_LH_P2_0⁰ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]] | _  => error⁰}: 682
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_blocked'_LH_P2_0⁰ _lh_blocked'_LH_P2_1⁰ => mappend_lh([LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰], blocked'_lh(ds'⁰, _lh_blocked'_LH_P2_1⁰)) | _  => error⁰}: 720
//│ [K k⁰ head_lh(k⁰) last_lh(k⁰) length_lh(k⁰)]: 660 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256
//│ 	case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰}: 275
//│ 	case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰}: 301
//│ 	case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369
//│ 	case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474
//│ 	case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 561
//│ 	case _lh_matchIdent⁴ of {YesIts _lh_first_YesIts_0⁰ _lh_first_YesIts_1⁰ => [YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰] | NotEver _lh_first_NotEver_0⁰ => first_lh((_lh_first_arg1⁰ + _lh_first_NotEver_0⁰), _lh_first_LH_C_1⁰) | _  => error⁰}: 862
//│ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰]: 672 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [LH_P2 [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰] _lh_select_LH_P2_1⁰]: 674 --->
//│ 	case _lh_histins_arg2⁰ of {LH_N  => [LH_C [LH_P2 _lh_histins_arg1⁰ 1] [LH_N]] | LH_C _lh_histins_LH_C_0⁰ _lh_histins_LH_C_1⁰ => case _lh_histins_LH_C_0⁰ of {LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰ => if polyEq⁰(_lh_histins_arg1⁰, _lh_histins_LH_P2_0⁰) then [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰] else [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)] | _  => error⁰} | _  => error⁰}: 646
//│ 	case _lh_select_arg3⁰ of {LH_P2 _lh_select_LH_P2_0⁰ _lh_select_LH_P2_1⁰ => if _lh_select_arg1⁰(_lh_select_arg2⁰) then [LH_P2 [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰] _lh_select_LH_P2_1⁰] else [LH_P2 _lh_select_LH_P2_0⁰ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]] | _  => error⁰}: 682
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_blocked'_LH_P2_0⁰ _lh_blocked'_LH_P2_1⁰ => mappend_lh([LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰], blocked'_lh(ds'⁰, _lh_blocked'_LH_P2_1⁰)) | _  => error⁰}: 720
//│ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]: 678 --->
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case _lh_blocked'_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_C_1⁰ => let ds'⁰ = union_lh(_lh_blocked'_arg1⁰, ends_lh(_lh_blocked'_LH_C_0⁰))
//│ in let _lh_matchIdent³ = partition'_lh((fun x⁰ -> subset_lh(ends_lh(x⁰), ds'⁰)), _lh_blocked'_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_blocked'_LH_P2_0⁰ _lh_blocked'_LH_P2_1⁰ => mappend_lh([LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰], blocked'_lh(ds'⁰, _lh_blocked'_LH_P2_1⁰)) | _  => error⁰} | _  => error⁰}: 724
//│ [LH_P2 _lh_select_LH_P2_0⁰ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]]: 679 --->
//│ 	case _lh_histins_arg2⁰ of {LH_N  => [LH_C [LH_P2 _lh_histins_arg1⁰ 1] [LH_N]] | LH_C _lh_histins_LH_C_0⁰ _lh_histins_LH_C_1⁰ => case _lh_histins_LH_C_0⁰ of {LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰ => if polyEq⁰(_lh_histins_arg1⁰, _lh_histins_LH_P2_0⁰) then [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰] else [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)] | _  => error⁰} | _  => error⁰}: 646
//│ 	case _lh_select_arg3⁰ of {LH_P2 _lh_select_LH_P2_0⁰ _lh_select_LH_P2_1⁰ => if _lh_select_arg1⁰(_lh_select_arg2⁰) then [LH_P2 [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰] _lh_select_LH_P2_1⁰] else [LH_P2 _lh_select_LH_P2_0⁰ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]] | _  => error⁰}: 682
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_blocked'_LH_P2_0⁰ _lh_blocked'_LH_P2_1⁰ => mappend_lh([LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰], blocked'_lh(ds'⁰, _lh_blocked'_LH_P2_1⁰)) | _  => error⁰}: 720
//│ [LH_N]: 687 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ 	case _lh_assocm_arg2⁰ of {LH_N  => [Nothing] | LH_C _lh_assocm_LH_C_0⁰ _lh_assocm_LH_C_1⁰ => case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 277
//│ 	case _lh_assoc_arg2⁰ of {LH_C _lh_assoc_LH_C_0⁰ _lh_assoc_LH_C_1⁰ => case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 303
//│ 	case _lh_findhash'_arg3⁰ of {LH_N  => [YesIts 1 _lh_findhash'_arg2⁰] | LH_C _lh_findhash'_LH_C_0⁰ _lh_findhash'_LH_C_1⁰ => case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 563
//│ 	case _lh_member_arg2⁰ of {LH_N  => [False] | LH_C _lh_member_LH_C_0⁰ _lh_member_LH_C_1⁰ => (polyEq⁰(_lh_member_arg1⁰, _lh_member_LH_C_0⁰) || member_lh(_lh_member_arg1⁰, _lh_member_LH_C_1⁰)) | _  => error⁰}: 808
//│ [LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰]: 711 --->
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ [Nothing]: 812 --->
//│ 	case _lh_minm_arg1⁰ of {Nothing  => _lh_minm_arg2⁰ | Just _lh_minm_Just_0⁰ => min_lh(_lh_minm_Just_0⁰, _lh_minm_arg2⁰) | _  => error⁰}: 591
//│ [Nothing]: 813 --->
//│ 	case _lh_maxm_arg1⁰ of {Nothing  => _lh_maxm_arg2⁰ | Just _lh_maxm_Just_0⁰ => max_lh(_lh_maxm_Just_0⁰, _lh_maxm_arg2⁰) | _  => error⁰}: 234
//│ [LH_N]: 814 --->
//│ 	case _lh_member_arg2⁰ of {LH_N  => [False] | LH_C _lh_member_LH_C_0⁰ _lh_member_LH_C_1⁰ => (polyEq⁰(_lh_member_arg1⁰, _lh_member_LH_C_0⁰) || member_lh(_lh_member_arg1⁰, _lh_member_LH_C_1⁰)) | _  => error⁰}: 808
//│ [H [Nothing] [Nothing] [LH_N]]: 815 --->
//│ 	case _lh_hinsert_arg2⁰ of {H _lh_hinsert_H_0⁰ _lh_hinsert_H_1⁰ _lh_hinsert_H_2⁰ => let lo'⁰ = minm_lh(_lh_hinsert_H_0⁰, _lh_hinsert_arg1⁰)
//│ in let hi'⁰ = maxm_lh(_lh_hinsert_H_1⁰, _lh_hinsert_arg1⁰)
//│ in if (member_lh(_lh_hinsert_arg1⁰, _lh_hinsert_H_2⁰) || (((1 + hi'⁰) - lo'⁰) > length_lh(keys_lh(0)))) then [Nothing] else [Just [H [Just lo'⁰] [Just hi'⁰] [LH_C _lh_hinsert_arg1⁰ _lh_hinsert_H_2⁰]]] | _  => error⁰}: 175
//│ [LH_N]: 817 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28
//│ 	case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100
//│ 	case _lh_assocm_arg2⁰ of {LH_N  => [Nothing] | LH_C _lh_assocm_LH_C_0⁰ _lh_assocm_LH_C_1⁰ => case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 277
//│ 	case _lh_assoc_arg2⁰ of {LH_C _lh_assoc_LH_C_0⁰ _lh_assoc_LH_C_1⁰ => case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 303
//│ 	case _lh_findhash'_arg3⁰ of {LH_N  => [YesIts 1 _lh_findhash'_arg2⁰] | LH_C _lh_findhash'_LH_C_0⁰ _lh_findhash'_LH_C_1⁰ => case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 563
//│ 	case _lh_member_arg2⁰ of {LH_N  => [False] | LH_C _lh_member_LH_C_0⁰ _lh_member_LH_C_1⁰ => (polyEq⁰(_lh_member_arg1⁰, _lh_member_LH_C_0⁰) || member_lh(_lh_member_arg1⁰, _lh_member_LH_C_1⁰)) | _  => error⁰}: 808
//│ [NotEver _lh_first_arg1⁰]: 842 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256
//│ 	case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰}: 275
//│ 	case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰}: 301
//│ 	case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369
//│ 	case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474
//│ 	case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 561
//│ 	case _lh_matchIdent⁴ of {YesIts _lh_first_YesIts_0⁰ _lh_first_YesIts_1⁰ => [YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰] | NotEver _lh_first_NotEver_0⁰ => first_lh((_lh_first_arg1⁰ + _lh_first_NotEver_0⁰), _lh_first_LH_C_1⁰) | _  => error⁰}: 862
//│ [YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰]: 851 --->
//│ 	NoCons
//│ 	DeadCodeCons
//│ 	case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256
//│ 	case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰}: 275
//│ 	case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰}: 301
//│ 	case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369
//│ 	case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474
//│ 	case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 561
//│ 	case _lh_matchIdent⁴ of {YesIts _lh_first_YesIts_0⁰ _lh_first_YesIts_1⁰ => [YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰] | NotEver _lh_first_NotEver_0⁰ => first_lh((_lh_first_arg1⁰ + _lh_first_NotEver_0⁰), _lh_first_LH_C_1⁰) | _  => error⁰}: 862
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12 --->
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 52
//│ 	[LH_N]: 53
//│ 	[LH_C h³ take_lh((n⁰ - 1), t³)]: 73
//│ 	[LH_N]: 74
//│ 	[LH_N]: 76
//│ 	[LH_C h⁵ mappend_lh(t⁵, ys⁰)]: 98
//│ 	[LH_N]: 111
//│ 	[LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 193
//│ 	[LH_N]: 198
//│ 	[LH_N]: 356
//│ 	[LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]: 357
//│ 	[LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]: 358
//│ 	[LH_C [LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]] [LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]]: 359
//│ 	[LH_C [LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]] [LH_C [LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]] [LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]]]: 360
//│ 	[LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 486
//│ 	[LH_N]: 500
//│ 	[LH_N]: 687
//│ 	[LH_N]: 817
//│ case ls¹ of {LH_C h¹ t¹ => f¹(h¹, foldr_lh(f¹, i⁰, t¹)) | LH_N  => i⁰}: 28 --->
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C h³ take_lh((n⁰ - 1), t³)]: 73
//│ 	[LH_N]: 74
//│ 	[LH_N]: 76
//│ 	[LH_C h⁵ mappend_lh(t⁵, ys⁰)]: 98
//│ 	[LH_N]: 111
//│ 	[LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 193
//│ 	[LH_N]: 198
//│ 	[LH_N]: 377
//│ 	[LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]: 678
//│ 	[LH_N]: 687
//│ 	[LH_N]: 817
//│ case ls² of {LH_C h² t² => h² | LH_N  => error⁰}: 35 --->
//│ 	[LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]]: 316
//│ 	[LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]]: 329
//│ 	[LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]]: 340
//│ 	[LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]]: 355
//│ 	[LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]]: 367
//│ case ls³ of {LH_C h³ t³ => [LH_C h³ take_lh((n⁰ - 1), t³)] | LH_N  => [LH_N]}: 75 --->
//│ 	[LH_N]: 356
//│ 	[LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]: 357
//│ 	[LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]: 358
//│ 	[LH_C [LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]] [LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]]: 359
//│ 	[LH_C [LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]] [LH_C [LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]] [LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]]]: 360
//│ case ls⁴ of {LH_C h⁴ t⁴ => (1 + length_lh(t⁴)) | LH_N  => 0}: 89 --->
//│ 	[LH_N]: 211
//│ 	[LH_N]: 311
//│ 	[LH_C 'e' [LH_N]]: 312
//│ 	[LH_C 'l' [LH_C 'e' [LH_N]]]: 313
//│ 	[LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]: 314
//│ 	[LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]: 315
//│ 	[LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]]: 316
//│ 	[LH_N]: 323
//│ 	[LH_C 'a' [LH_N]]: 324
//│ 	[LH_C 'n' [LH_C 'a' [LH_N]]]: 325
//│ 	[LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]: 326
//│ 	[LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]: 327
//│ 	[LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]: 328
//│ 	[LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]]: 329
//│ 	[LH_N]: 335
//│ 	[LH_C 'h' [LH_N]]: 336
//│ 	[LH_C 'c' [LH_C 'h' [LH_N]]]: 337
//│ 	[LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]: 338
//│ 	[LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]: 339
//│ 	[LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]]: 340
//│ 	[LH_N]: 348
//│ 	[LH_C 't' [LH_N]]: 349
//│ 	[LH_C 'o' [LH_C 't' [LH_N]]]: 350
//│ 	[LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]: 351
//│ 	[LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]: 352
//│ 	[LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]: 353
//│ 	[LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]: 354
//│ 	[LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]]: 355
//│ 	[LH_N]: 356
//│ 	[LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]: 357
//│ 	[LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]: 358
//│ 	[LH_C [LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]] [LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]]: 359
//│ 	[LH_C [LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]] [LH_C [LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]] [LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]]]: 360
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_ends_K_2⁰ [LH_N]]: 366
//│ 	[LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]]: 367
//│ 	[LH_N]: 616
//│ 	[LH_C [LH_P2 _lh_histins_arg1⁰ 1] [LH_N]]: 617
//│ 	[LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰]: 632
//│ 	[LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)]: 641
//│ case xs⁰ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys⁰)] | LH_N  => ys⁰}: 100 --->
//│ 	[LH_C h³ take_lh((n⁰ - 1), t³)]: 73
//│ 	[LH_N]: 74
//│ 	[LH_N]: 76
//│ 	[LH_C h⁵ mappend_lh(t⁵, ys⁰)]: 98
//│ 	[LH_N]: 111
//│ 	[LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 193
//│ 	[LH_N]: 198
//│ 	[LH_N]: 281
//│ 	[LH_N]: 356
//│ 	[LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]: 357
//│ 	[LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]: 358
//│ 	[LH_C [LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]] [LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]]: 359
//│ 	[LH_C [LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]] [LH_C [LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]] [LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]]]: 360
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_ends_K_2⁰ [LH_N]]: 366
//│ 	[LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]]: 367
//│ 	[LH_N]: 376
//│ 	[LH_N]: 448
//│ 	[LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]]: 449
//│ 	[LH_N]: 469
//│ 	[LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]: 470
//│ 	[LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]: 471
//│ 	[LH_N]: 518
//│ 	[LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]]: 519
//│ 	[LH_N]: 537
//│ 	[LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]]: 538
//│ 	[LH_N]: 549
//│ 	[LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰]: 672
//│ 	[LH_N]: 687
//│ 	[LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰]: 711
//│ 	[LH_N]: 817
//│ case lss⁰ of {LH_C h⁶ t⁶ => mappend_lh(h⁶, concat_lh(t⁶)) | LH_N  => [LH_N]}: 112 --->
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ case _lh_hinsert_arg2⁰ of {H _lh_hinsert_H_0⁰ _lh_hinsert_H_1⁰ _lh_hinsert_H_2⁰ => let lo'⁰ = minm_lh(_lh_hinsert_H_0⁰, _lh_hinsert_arg1⁰)
//│ in let hi'⁰ = maxm_lh(_lh_hinsert_H_1⁰, _lh_hinsert_arg1⁰)
//│ in if (member_lh(_lh_hinsert_arg1⁰, _lh_hinsert_H_2⁰) || (((1 + hi'⁰) - lo'⁰) > length_lh(keys_lh(0)))) then [Nothing] else [Just [H [Just lo'⁰] [Just hi'⁰] [LH_C _lh_hinsert_arg1⁰ _lh_hinsert_H_2⁰]]] | _  => error⁰}: 175 --->
//│ 	[H [Just lo'⁰] [Just hi'⁰] [LH_C _lh_hinsert_arg1⁰ _lh_hinsert_H_2⁰]]: 169
//│ 	[H [Nothing] [Nothing] [LH_N]]: 815
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if not⁰(member_lh(_lh_listcomp_fun_ls_h⁰, _lh_union_arg1⁰)) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰) | LH_N  => [LH_N]}: 199 --->
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_ends_K_2⁰ [LH_N]]: 366
//│ 	[LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]]: 367
//│ case _lh_maxm_arg1⁰ of {Nothing  => _lh_maxm_arg2⁰ | Just _lh_maxm_Just_0⁰ => max_lh(_lh_maxm_Just_0⁰, _lh_maxm_arg2⁰) | _  => error⁰}: 234 --->
//│ 	[Just hi'⁰]: 165
//│ 	[Nothing]: 813
//│ case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}: 246 --->
//│ 	[LH_N]: 311
//│ 	[LH_C 'e' [LH_N]]: 312
//│ 	[LH_C 'l' [LH_C 'e' [LH_N]]]: 313
//│ 	[LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]: 314
//│ 	[LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]: 315
//│ 	[LH_N]: 323
//│ 	[LH_C 'a' [LH_N]]: 324
//│ 	[LH_C 'n' [LH_C 'a' [LH_N]]]: 325
//│ 	[LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]: 326
//│ 	[LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]: 327
//│ 	[LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]: 328
//│ 	[LH_N]: 335
//│ 	[LH_C 'h' [LH_N]]: 336
//│ 	[LH_C 'c' [LH_C 'h' [LH_N]]]: 337
//│ 	[LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]: 338
//│ 	[LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]: 339
//│ 	[LH_N]: 348
//│ 	[LH_C 't' [LH_N]]: 349
//│ 	[LH_C 'o' [LH_C 't' [LH_N]]]: 350
//│ 	[LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]: 351
//│ 	[LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]: 352
//│ 	[LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]: 353
//│ 	[LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]: 354
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_ends_K_2⁰ [LH_N]]: 366
//│ case _lh_last_arg1⁰ of {LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {LH_N  => _lh_go_arg1⁰ | LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰) | _  => error⁰}))
//│ in go⁰(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰) | _  => error⁰}: 256 --->
//│ 	[LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]]: 316
//│ 	[LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]]: 329
//│ 	[LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]]: 340
//│ 	[LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]]: 355
//│ 	[LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]]: 367
//│ 	[YesIts 1 _lh_findhash'_arg2⁰]: 384
//│ 	[NotEver 1]: 406
//│ 	[LH_P2 _lh_findhash'_K_1⁰ m⁰]: 447
//│ 	[LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹]: 465
//│ 	[LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹]: 468
//│ 	[LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²]: 482
//│ 	[LH_P2 _lh_findhash'_K_1⁰ m¹]: 517
//│ 	[LH_P2 _lh_findhash'_K_2⁰ n¹]: 536
//│ 	[K k⁰ head_lh(k⁰) last_lh(k⁰) length_lh(k⁰)]: 660
//│ 	[NotEver _lh_first_arg1⁰]: 842
//│ 	[YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰]: 851
//│ case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰}: 275 --->
//│ 	[LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]]: 316
//│ 	[LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]]: 329
//│ 	[LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]]: 340
//│ 	[LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]]: 355
//│ 	[LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]]: 367
//│ 	[YesIts 1 _lh_findhash'_arg2⁰]: 384
//│ 	[NotEver 1]: 406
//│ 	[LH_P2 _lh_findhash'_K_1⁰ m⁰]: 447
//│ 	[LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹]: 465
//│ 	[LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹]: 468
//│ 	[LH_P2 _lh_findhash'_K_1⁰ m¹]: 517
//│ 	[LH_P2 _lh_findhash'_K_2⁰ n¹]: 536
//│ 	[K k⁰ head_lh(k⁰) last_lh(k⁰) length_lh(k⁰)]: 660
//│ 	[NotEver _lh_first_arg1⁰]: 842
//│ 	[YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰]: 851
//│ case _lh_assocm_arg2⁰ of {LH_N  => [Nothing] | LH_C _lh_assocm_LH_C_0⁰ _lh_assocm_LH_C_1⁰ => case _lh_assocm_LH_C_0⁰ of {LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1⁰, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1⁰, _lh_assocm_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 277 --->
//│ 	[LH_C h³ take_lh((n⁰ - 1), t³)]: 73
//│ 	[LH_N]: 74
//│ 	[LH_N]: 76
//│ 	[LH_C h⁵ mappend_lh(t⁵, ys⁰)]: 98
//│ 	[LH_N]: 111
//│ 	[LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 193
//│ 	[LH_N]: 198
//│ 	[LH_N]: 687
//│ 	[LH_N]: 817
//│ case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰}: 301 --->
//│ 	[LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]]: 316
//│ 	[LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]]: 329
//│ 	[LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]]: 340
//│ 	[LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]]: 355
//│ 	[LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]]: 367
//│ 	[YesIts 1 _lh_findhash'_arg2⁰]: 384
//│ 	[NotEver 1]: 406
//│ 	[LH_P2 _lh_findhash'_K_1⁰ m⁰]: 447
//│ 	[LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹]: 465
//│ 	[LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹]: 468
//│ 	[LH_P2 _lh_findhash'_K_1⁰ m¹]: 517
//│ 	[LH_P2 _lh_findhash'_K_2⁰ n¹]: 536
//│ 	[K k⁰ head_lh(k⁰) last_lh(k⁰) length_lh(k⁰)]: 660
//│ 	[NotEver _lh_first_arg1⁰]: 842
//│ 	[YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰]: 851
//│ case _lh_assoc_arg2⁰ of {LH_C _lh_assoc_LH_C_0⁰ _lh_assoc_LH_C_1⁰ => case _lh_assoc_LH_C_0⁰ of {LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1⁰, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1⁰, _lh_assoc_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 303 --->
//│ 	[LH_C h³ take_lh((n⁰ - 1), t³)]: 73
//│ 	[LH_N]: 74
//│ 	[LH_N]: 76
//│ 	[LH_C h⁵ mappend_lh(t⁵, ys⁰)]: 98
//│ 	[LH_N]: 111
//│ 	[LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 193
//│ 	[LH_N]: 198
//│ 	[LH_N]: 687
//│ 	[LH_N]: 817
//│ case _lh_ends_arg1⁰ of {K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]] | _  => error⁰}: 369 --->
//│ 	[LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]]: 316
//│ 	[LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]]: 329
//│ 	[LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]]: 340
//│ 	[LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]]: 355
//│ 	[LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]]: 367
//│ 	[YesIts 1 _lh_findhash'_arg2⁰]: 384
//│ 	[NotEver 1]: 406
//│ 	[LH_P2 _lh_findhash'_K_1⁰ m⁰]: 447
//│ 	[LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹]: 465
//│ 	[LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹]: 468
//│ 	[LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²]: 482
//│ 	[LH_P2 _lh_findhash'_K_1⁰ m¹]: 517
//│ 	[LH_P2 _lh_findhash'_K_2⁰ n¹]: 536
//│ 	[K k⁰ head_lh(k⁰) last_lh(k⁰) length_lh(k⁰)]: 660
//│ 	[NotEver _lh_first_arg1⁰]: 842
//│ 	[YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰]: 851
//│ case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰}: 415 --->
//│ 	[Nothing]: 161
//│ 	[Just [H [Just lo'⁰] [Just hi'⁰] [LH_C _lh_hinsert_arg1⁰ _lh_hinsert_H_2⁰]]]: 170
//│ case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}: 474 --->
//│ 	[LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]]: 316
//│ 	[LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]]: 329
//│ 	[LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]]: 340
//│ 	[LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]]: 355
//│ 	[LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]]: 367
//│ 	[YesIts 1 _lh_findhash'_arg2⁰]: 384
//│ 	[NotEver 1]: 406
//│ 	[LH_P2 _lh_findhash'_K_1⁰ m⁰]: 447
//│ 	[LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹]: 465
//│ 	[LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹]: 468
//│ 	[LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²]: 482
//│ 	[LH_P2 _lh_findhash'_K_1⁰ m¹]: 517
//│ 	[LH_P2 _lh_findhash'_K_2⁰ n¹]: 536
//│ 	[K k⁰ head_lh(k⁰) last_lh(k⁰) length_lh(k⁰)]: 660
//│ 	[NotEver _lh_first_arg1⁰]: 842
//│ 	[YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰]: 851
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 490 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 52
//│ 	[LH_N]: 53
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]}: 501 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 52
//│ 	[LH_N]: 53
//│ case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰}: 530 --->
//│ 	[Nothing]: 259
//│ 	[Just _lh_assocm_LH_P2_1⁰]: 267
//│ case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰}: 552 --->
//│ 	[Nothing]: 259
//│ 	[Just _lh_assocm_LH_P2_1⁰]: 267
//│ case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰}: 554 --->
//│ 	[Nothing]: 259
//│ 	[Just _lh_assocm_LH_P2_1⁰]: 267
//│ case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 556 --->
//│ 	[LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]: 434
//│ case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 561 --->
//│ 	[LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]]: 316
//│ 	[LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]]: 329
//│ 	[LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]]: 340
//│ 	[LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]]: 355
//│ 	[LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]]: 367
//│ 	[YesIts 1 _lh_findhash'_arg2⁰]: 384
//│ 	[NotEver 1]: 406
//│ 	[LH_P2 _lh_findhash'_K_1⁰ m⁰]: 447
//│ 	[LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹]: 465
//│ 	[LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹]: 468
//│ 	[LH_P2 _lh_findhash'_K_1⁰ m¹]: 517
//│ 	[LH_P2 _lh_findhash'_K_2⁰ n¹]: 536
//│ 	[K k⁰ head_lh(k⁰) last_lh(k⁰) length_lh(k⁰)]: 660
//│ 	[NotEver _lh_first_arg1⁰]: 842
//│ 	[YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰]: 851
//│ case _lh_findhash'_arg3⁰ of {LH_N  => [YesIts 1 _lh_findhash'_arg2⁰] | LH_C _lh_findhash'_LH_C_0⁰ _lh_findhash'_LH_C_1⁰ => case _lh_findhash'_LH_C_0⁰ of {K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => let try⁰ = (fun newAssocs⁰ -> let newCharAssocs⁰ = mappend_lh(newAssocs⁰, _lh_findhash'_arg2⁰)
//│ in let _lh_matchIdent⁰ = hinsert_lh(hash_lh(newCharAssocs⁰, [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]), _lh_findhash'_arg1⁰)
//│ in case _lh_matchIdent⁰ of {Nothing  => [NotEver 1] | Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs⁰, _lh_findhash'_LH_C_1⁰) | _  => error⁰})
//│ in let maxval⁰ = length_lh(freqtab_lh(0))
//│ in let _lh_matchIdent¹ = [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰} | _  => error⁰}: 563 --->
//│ 	[LH_C h³ take_lh((n⁰ - 1), t³)]: 73
//│ 	[LH_N]: 74
//│ 	[LH_N]: 76
//│ 	[LH_C h⁵ mappend_lh(t⁵, ys⁰)]: 98
//│ 	[LH_N]: 111
//│ 	[LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 193
//│ 	[LH_N]: 198
//│ 	[LH_N]: 687
//│ 	[LH_N]: 817
//│ case _lh_all_arg2⁰ of {LH_N  => [True] | LH_C _lh_all_LH_C_0⁰ _lh_all_LH_C_1⁰ => if _lh_all_arg1⁰(_lh_all_LH_C_0⁰) then all_lh(_lh_all_arg1⁰, _lh_all_LH_C_1⁰) else [False] | _  => error⁰}: 580 --->
//│ 	[LH_N]: 365
//│ 	[LH_C _lh_ends_K_2⁰ [LH_N]]: 366
//│ 	[LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]]: 367
//│ case _lh_minm_arg1⁰ of {Nothing  => _lh_minm_arg2⁰ | Just _lh_minm_Just_0⁰ => min_lh(_lh_minm_Just_0⁰, _lh_minm_arg2⁰) | _  => error⁰}: 591 --->
//│ 	[Just lo'⁰]: 163
//│ 	[Nothing]: 812
//│ case _lh_histins_LH_C_0⁰ of {LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰ => if polyEq⁰(_lh_histins_arg1⁰, _lh_histins_LH_P2_0⁰) then [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰] else [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)] | _  => error⁰}: 644 --->
//│ 	[LH_P2 _lh_histins_arg1⁰ 1]: 615
//│ 	[LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)]: 630
//│ 	[LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰]: 635
//│ case _lh_histins_arg2⁰ of {LH_N  => [LH_C [LH_P2 _lh_histins_arg1⁰ 1] [LH_N]] | LH_C _lh_histins_LH_C_0⁰ _lh_histins_LH_C_1⁰ => case _lh_histins_LH_C_0⁰ of {LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰ => if polyEq⁰(_lh_histins_arg1⁰, _lh_histins_LH_P2_0⁰) then [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰] else [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)] | _  => error⁰} | _  => error⁰}: 646 --->
//│ 	[LH_N]: 211
//│ 	[LH_P2 [LH_N] [LH_N]]: 378
//│ 	[LH_N]: 616
//│ 	[LH_C [LH_P2 _lh_histins_arg1⁰ 1] [LH_N]]: 617
//│ 	[LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰]: 632
//│ 	[LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)]: 641
//│ 	[LH_P2 [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰] _lh_select_LH_P2_1⁰]: 674
//│ 	[LH_P2 _lh_select_LH_P2_0⁰ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]]: 679
//│ case _lh_select_arg3⁰ of {LH_P2 _lh_select_LH_P2_0⁰ _lh_select_LH_P2_1⁰ => if _lh_select_arg1⁰(_lh_select_arg2⁰) then [LH_P2 [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰] _lh_select_LH_P2_1⁰] else [LH_P2 _lh_select_LH_P2_0⁰ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]] | _  => error⁰}: 682 --->
//│ 	[LH_N]: 211
//│ 	[LH_P2 [LH_N] [LH_N]]: 378
//│ 	[LH_C [LH_P2 _lh_histins_arg1⁰ 1] [LH_N]]: 617
//│ 	[LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰]: 632
//│ 	[LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)]: 641
//│ 	[LH_P2 [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰] _lh_select_LH_P2_1⁰]: 674
//│ 	[LH_P2 _lh_select_LH_P2_0⁰ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]]: 679
//│ case _lh_matchIdent³ of {LH_P2 _lh_blocked'_LH_P2_0⁰ _lh_blocked'_LH_P2_1⁰ => mappend_lh([LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰], blocked'_lh(ds'⁰, _lh_blocked'_LH_P2_1⁰)) | _  => error⁰}: 720 --->
//│ 	[LH_N]: 211
//│ 	[LH_P2 [LH_N] [LH_N]]: 378
//│ 	[LH_C [LH_P2 _lh_histins_arg1⁰ 1] [LH_N]]: 617
//│ 	[LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰]: 632
//│ 	[LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1⁰, _lh_histins_LH_C_1⁰)]: 641
//│ 	[LH_P2 [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_0⁰] _lh_select_LH_P2_1⁰]: 674
//│ 	[LH_P2 _lh_select_LH_P2_0⁰ [LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]]: 679
//│ case _lh_blocked'_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_C_1⁰ => let ds'⁰ = union_lh(_lh_blocked'_arg1⁰, ends_lh(_lh_blocked'_LH_C_0⁰))
//│ in let _lh_matchIdent³ = partition'_lh((fun x⁰ -> subset_lh(ends_lh(x⁰), ds'⁰)), _lh_blocked'_LH_C_1⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_blocked'_LH_P2_0⁰ _lh_blocked'_LH_P2_1⁰ => mappend_lh([LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰], blocked'_lh(ds'⁰, _lh_blocked'_LH_P2_1⁰)) | _  => error⁰} | _  => error⁰}: 724 --->
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_N]: 377
//│ 	[LH_C _lh_select_arg2⁰ _lh_select_LH_P2_1⁰]: 678
//│ case _lh_hash_arg2⁰ of {K _lh_hash_K_0⁰ _lh_hash_K_1⁰ _lh_hash_K_2⁰ _lh_hash_K_3⁰ => ((_lh_hash_K_3⁰ + assoc_lh(_lh_hash_K_1⁰, _lh_hash_arg1⁰)) + assoc_lh(_lh_hash_K_2⁰, _lh_hash_arg1⁰)) | _  => error⁰}: 746 --->
//│ 	[K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]: 399
//│ case _lh_member_arg2⁰ of {LH_N  => [False] | LH_C _lh_member_LH_C_0⁰ _lh_member_LH_C_1⁰ => (polyEq⁰(_lh_member_arg1⁰, _lh_member_LH_C_0⁰) || member_lh(_lh_member_arg1⁰, _lh_member_LH_C_1⁰)) | _  => error⁰}: 808 --->
//│ 	[LH_C h³ take_lh((n⁰ - 1), t³)]: 73
//│ 	[LH_N]: 74
//│ 	[LH_N]: 76
//│ 	[LH_C h⁵ mappend_lh(t⁵, ys⁰)]: 98
//│ 	[LH_N]: 111
//│ 	[LH_C _lh_hinsert_arg1⁰ _lh_hinsert_H_2⁰]: 168
//│ 	[LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 193
//│ 	[LH_N]: 198
//│ 	[LH_N]: 281
//│ 	[LH_N]: 687
//│ 	[LH_N]: 814
//│ 	[LH_N]: 817
//│ case _lh_matchIdent⁴ of {YesIts _lh_first_YesIts_0⁰ _lh_first_YesIts_1⁰ => [YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰] | NotEver _lh_first_NotEver_0⁰ => first_lh((_lh_first_arg1⁰ + _lh_first_NotEver_0⁰), _lh_first_LH_C_1⁰) | _  => error⁰}: 862 --->
//│ 	[LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]]: 367
//│ 	[YesIts 1 _lh_findhash'_arg2⁰]: 384
//│ 	[NotEver 1]: 406
//│ 	[K k⁰ head_lh(k⁰) last_lh(k⁰) length_lh(k⁰)]: 660
//│ 	[NotEver _lh_first_arg1⁰]: 842
//│ 	[YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰]: 851
//│ case _lh_first_arg2⁰ of {LH_N  => [NotEver _lh_first_arg1⁰] | LH_C _lh_first_LH_C_0⁰ _lh_first_LH_C_1⁰ => let _lh_matchIdent⁴ = _lh_first_LH_C_0⁰
//│ in case _lh_matchIdent⁴ of {YesIts _lh_first_YesIts_0⁰ _lh_first_YesIts_1⁰ => [YesIts (_lh_first_arg1⁰ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰] | NotEver _lh_first_NotEver_0⁰ => first_lh((_lh_first_arg1⁰ + _lh_first_NotEver_0⁰), _lh_first_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 865 --->
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]: 399 --->
//│ 	case _lh_hash_arg2⁰ of {K _lh_hash_K_0⁰ _lh_hash_K_1⁰ _lh_hash_K_2⁰ _lh_hash_K_3⁰ => ((_lh_hash_K_3⁰ + assoc_lh(_lh_hash_K_1⁰, _lh_hash_arg1⁰)) + assoc_lh(_lh_hash_K_2⁰, _lh_hash_arg1⁰)) | _  => error⁰}: 746
//│ [LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]: 434 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 556
//│ ------------------
//│ case _lh_matchIdent¹ of {LH_P2 _lh_findhash'_LH_P2_0⁰ _lh_findhash'_LH_P2_1⁰ => case _lh_findhash'_LH_P2_0⁰ of {Nothing  => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => if polyEq⁰(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰) then firstSuccess_lh((fun m⁰ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m⁰] [LH_N]])), enumFromTo_lh(0, maxval⁰)) else firstSuccess_lh((fun mn⁰ -> let _lh_matchIdent² = mn⁰
//│ in case _lh_matchIdent² of {LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2⁰ _lh_findhash'_LH_P2_1¹] [LH_N]]]) | _  => error⁰}), let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²(enumFromTo_lh(0, maxval⁰)) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(0, maxval⁰))) | Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_1⁰ m¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | _  => error⁰} | Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1⁰ of {Nothing  => firstSuccess_lh((fun n¹ -> try⁰([LH_C [LH_P2 _lh_findhash'_K_2⁰ n¹] [LH_N]])), enumFromTo_lh(0, maxval⁰)) | Just _lh_findhash'_Just_0³ => try⁰([LH_N]) | _  => error⁰} | _  => error⁰} | _  => error⁰}: 556 --->
//│ 	[LH_P2 assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2⁰) assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2⁰)]: 434
//│ case _lh_hash_arg2⁰ of {K _lh_hash_K_0⁰ _lh_hash_K_1⁰ _lh_hash_K_2⁰ _lh_hash_K_3⁰ => ((_lh_hash_K_3⁰ + assoc_lh(_lh_hash_K_1⁰, _lh_hash_arg1⁰)) + assoc_lh(_lh_hash_K_2⁰, _lh_hash_arg1⁰)) | _  => error⁰}: 746 --->
//│ 	[K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰]: 399
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testCichelli_nofib_lh(primId⁰(6))
//│ def all_lh(_lh_all_arg1¹, _lh_all_arg2¹) = case _lh_all_arg2¹ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0⁰ _lh_all_LH_C_1⁰ => if _lh_all_arg1¹(_lh_all_LH_C_0⁰) then all_lh(_lh_all_arg1¹, _lh_all_LH_C_1⁰) else [False]
//│ 	| _  => error⁰}
//│ def assoc_lh(_lh_assoc_arg1¹, _lh_assoc_arg2¹) = case _lh_assoc_arg2¹ of {
//│ 	LH_C _lh_assoc_LH_C_0⁰ _lh_assoc_LH_C_1⁰ => case _lh_assoc_LH_C_0⁰ of {
//│ 		LH_P2 _lh_assoc_LH_P2_0⁰ _lh_assoc_LH_P2_1⁰ => if polyEq⁰(_lh_assoc_arg1¹, _lh_assoc_LH_P2_0⁰) then _lh_assoc_LH_P2_1⁰ else assoc_lh(_lh_assoc_arg1¹, _lh_assoc_LH_C_1⁰)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def assocm_lh(_lh_assocm_arg1¹, _lh_assocm_arg2¹) = case _lh_assocm_arg2¹ of {
//│ 	LH_N  => [Nothing]
//│ 	| LH_C _lh_assocm_LH_C_0⁰ _lh_assocm_LH_C_1⁰ => case _lh_assocm_LH_C_0⁰ of {
//│ 		LH_P2 _lh_assocm_LH_P2_0⁰ _lh_assocm_LH_P2_1⁰ => if polyEq⁰(_lh_assocm_arg1¹, _lh_assocm_LH_P2_0⁰) then [Just _lh_assocm_LH_P2_1⁰] else assocm_lh(_lh_assocm_arg1¹, _lh_assocm_LH_C_1⁰)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def attribkeys_lh(_lh_attribkeys_arg1¹) = map_lh((fun k¹ -> [K k¹ head_lh(k¹) last_lh(k¹) length_lh(k¹)]), _lh_attribkeys_arg1¹)
//│ def blocked'_lh(_lh_blocked'_arg1¹, _lh_blocked'_arg2¹) = case _lh_blocked'_arg2¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_C_1⁰ => 
//│ 		let ds'¹ = union_lh(_lh_blocked'_arg1¹, ends_lh(_lh_blocked'_LH_C_0⁰))
//│ 		in let _lh_matchIdent⁸ = partition'_lh((fun x³ -> subset_lh(ends_lh(x³), ds'¹)), _lh_blocked'_LH_C_1⁰)
//│ 		in case _lh_matchIdent⁸ of {
//│ 			LH_P2 _lh_blocked'_LH_P2_0⁰ _lh_blocked'_LH_P2_1⁰ => mappend_lh([LH_C _lh_blocked'_LH_C_0⁰ _lh_blocked'_LH_P2_0⁰], blocked'_lh(ds'¹, _lh_blocked'_LH_P2_1⁰))
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def blocked_lh(_lh_blocked_arg1¹) = blocked'_lh([LH_N], _lh_blocked_arg1¹)
//│ def cichelli_lh(_lh_cichelli_arg1¹) = 
//│ 	let attribkeys'¹ = attribkeys_lh(mappend_lh(keys_lh(0), take_lh((_lh_cichelli_arg1¹ % 2), keys_lh(0))))
//│ 	in let hashkeys¹ = (fun _lh_funcomp_x¹ -> blocked_lh(freqsorted_lh(_lh_funcomp_x¹)))(attribkeys'¹)
//│ 	in findhash_lh(hashkeys¹)
//│ def concat_lh(lss¹) = case lss¹ of {
//│ 	LH_C h⁶ t⁶ => mappend_lh(h⁶, concat_lh(t⁶))
//│ 	| LH_N  => [LH_N]}
//│ def ends_lh(_lh_ends_arg1¹) = case _lh_ends_arg1¹ of {
//│ 	K _lh_ends_K_0⁰ _lh_ends_K_1⁰ _lh_ends_K_2⁰ _lh_ends_K_3⁰ => [LH_C _lh_ends_K_1⁰ [LH_C _lh_ends_K_2⁰ [LH_N]]]
//│ 	| _  => error⁰}
//│ def enumFromTo_lh(a¹, b¹) = if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh((a¹ + 1), b¹)] else [LH_N]
//│ def findhash'_lh(_lh_findhash'_arg1¹, _lh_findhash'_arg2¹, _lh_findhash'_arg3¹) = case _lh_findhash'_arg3¹ of {
//│ 	LH_N  => [YesIts 1 _lh_findhash'_arg2¹]
//│ 	| LH_C _lh_findhash'_LH_C_0⁰ _lh_findhash'_LH_C_1⁰ => case _lh_findhash'_LH_C_0⁰ of {
//│ 		K _lh_findhash'_K_0⁰ _lh_findhash'_K_1⁰ _lh_findhash'_K_2⁰ _lh_findhash'_K_3⁰ => 
//│ 			let try¹ = (fun newAssocs¹ -> 
//│ 				let newCharAssocs¹ = mappend_lh(newAssocs¹, _lh_findhash'_arg2¹)
//│ 				in let _lh_matchIdent⁵ = hinsert_lh(hash_lh(newCharAssocs¹, 
//│ 					let _lh_hash_K_3¹ = _lh_findhash'_K_3⁰
//│ 					in let _lh_hash_K_2¹ = _lh_findhash'_K_2⁰
//│ 					in let _lh_hash_K_1¹ = _lh_findhash'_K_1⁰
//│ 					in (fun _lh_hash_arg1¹ -> ((_lh_hash_K_3¹ + assoc_lh(_lh_hash_K_1¹, _lh_hash_arg1¹)) + assoc_lh(_lh_hash_K_2¹, _lh_hash_arg1¹)))), _lh_findhash'_arg1¹)
//│ 				in case _lh_matchIdent⁵ of {
//│ 					Nothing  => [NotEver 1]
//│ 					| Just _lh_findhash'_Just_0⁰ => findhash'_lh(_lh_findhash'_Just_0⁰, newCharAssocs¹, _lh_findhash'_LH_C_1⁰)
//│ 					| _  => error⁰})
//│ 			in let maxval¹ = length_lh(freqtab_lh(0))
//│ 			in let _lh_matchIdent⁶ = 	
//│ 				let _lh_findhash'_LH_P2_1² = assocm_lh(_lh_findhash'_K_2⁰, _lh_findhash'_arg2¹)
//│ 				in let _lh_findhash'_LH_P2_0² = assocm_lh(_lh_findhash'_K_1⁰, _lh_findhash'_arg2¹)
//│ 				in (fun _lh_findhash'_K_1¹ -> (fun _lh_findhash'_K_2¹ -> (fun maxval² -> (fun try² -> case _lh_findhash'_LH_P2_0² of {
//│ 					Nothing  => case _lh_findhash'_LH_P2_1² of {
//│ 						Nothing  => if polyEq⁰(_lh_findhash'_K_1¹, _lh_findhash'_K_2¹) then firstSuccess_lh((fun m² -> try²([LH_C [LH_P2 _lh_findhash'_K_1¹ m²] [LH_N]])), enumFromTo_lh(0, maxval²)) else firstSuccess_lh((fun mn¹ -> 
//│ 							let _lh_matchIdent⁷ = mn¹
//│ 							in case _lh_matchIdent⁷ of {
//│ 								LH_P2 _lh_findhash'_LH_P2_0¹ _lh_findhash'_LH_P2_1¹ => try²([LH_C [LH_P2 _lh_findhash'_K_1¹ _lh_findhash'_LH_P2_0¹] [LH_C [LH_P2 _lh_findhash'_K_2¹ _lh_findhash'_LH_P2_1¹] [LH_N]]])
//│ 								| _  => error⁰}), 
//│ 							let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 								LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => 
//│ 									let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 										LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_h²] _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t²)]
//│ 										| LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t¹)})
//│ 									in _lh_listcomp_fun⁵(enumFromTo_lh(0, maxval²))
//│ 								| LH_N  => [LH_N]})
//│ 							in _lh_listcomp_fun⁴(enumFromTo_lh(0, maxval²)))
//│ 						| Just _lh_findhash'_Just_0¹ => firstSuccess_lh((fun m³ -> try²([LH_C [LH_P2 _lh_findhash'_K_1¹ m³] [LH_N]])), enumFromTo_lh(0, maxval²))
//│ 						| _  => error⁰}
//│ 					| Just _lh_findhash'_Just_0² => case _lh_findhash'_LH_P2_1² of {
//│ 						Nothing  => firstSuccess_lh((fun n³ -> try²([LH_C [LH_P2 _lh_findhash'_K_2¹ n³] [LH_N]])), enumFromTo_lh(0, maxval²))
//│ 						| Just _lh_findhash'_Just_0³ => try²([LH_N])
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}))))
//│ 			in _lh_matchIdent⁶(_lh_findhash'_K_1⁰, _lh_findhash'_K_2⁰, maxval¹, try¹)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def findhash_lh(_lh_findhash_arg1¹) = findhash'_lh([H [Nothing] [Nothing] [LH_N]], [LH_N], _lh_findhash_arg1¹)
//│ def firstSuccess_lh(_lh_firstSuccess_arg1¹, _lh_firstSuccess_arg2¹) = first_lh(0, map_lh(_lh_firstSuccess_arg1¹, _lh_firstSuccess_arg2¹))
//│ def first_lh(_lh_first_arg1¹, _lh_first_arg2¹) = case _lh_first_arg2¹ of {
//│ 	LH_N  => [NotEver _lh_first_arg1¹]
//│ 	| LH_C _lh_first_LH_C_0⁰ _lh_first_LH_C_1⁰ => 
//│ 		let _lh_matchIdent⁹ = _lh_first_LH_C_0⁰
//│ 		in case _lh_matchIdent⁹ of {
//│ 			YesIts _lh_first_YesIts_0⁰ _lh_first_YesIts_1⁰ => [YesIts (_lh_first_arg1¹ + _lh_first_YesIts_0⁰) _lh_first_YesIts_1⁰]
//│ 			| NotEver _lh_first_NotEver_0⁰ => first_lh((_lh_first_arg1¹ + _lh_first_NotEver_0⁰), _lh_first_LH_C_1⁰)
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def foldr_lh(f³, i¹, ls⁹) = case ls⁹ of {
//│ 	LH_C h¹ t¹ => f³(h¹, foldr_lh(f³, i¹, t¹))
//│ 	| LH_N  => i¹}
//│ def freqsorted_lh(_lh_freqsorted_arg1¹) = _lh_freqsorted_arg1¹
//│ def freqtab_lh(_lh_freqtab_arg1¹) = histo_lh(concat_lh(map_lh(ends_lh, attribkeys_lh(keys_lh(0)))))
//│ def hash_lh(_lh_hash_arg1², _lh_hash_arg2¹) = _lh_hash_arg2¹(_lh_hash_arg1²)
//│ def head_lh(ls⁷) = case ls⁷ of {
//│ 	LH_C h² t² => h²
//│ 	| LH_N  => error⁰}
//│ def hinsert_lh(_lh_hinsert_arg1¹, _lh_hinsert_arg2¹) = case _lh_hinsert_arg2¹ of {
//│ 	H _lh_hinsert_H_0⁰ _lh_hinsert_H_1⁰ _lh_hinsert_H_2⁰ => 
//│ 		let lo'¹ = minm_lh(_lh_hinsert_H_0⁰, _lh_hinsert_arg1¹)
//│ 		in let hi'¹ = maxm_lh(_lh_hinsert_H_1⁰, _lh_hinsert_arg1¹)
//│ 		in if (member_lh(_lh_hinsert_arg1¹, _lh_hinsert_H_2⁰) || (((1 + hi'¹) - lo'¹) > length_lh(keys_lh(0)))) then [Nothing] else [Just [H [Just lo'¹] [Just hi'¹] [LH_C _lh_hinsert_arg1¹ _lh_hinsert_H_2⁰]]]
//│ 	| _  => error⁰}
//│ def histins_lh(_lh_histins_arg1¹, _lh_histins_arg2¹) = case _lh_histins_arg2¹ of {
//│ 	LH_N  => [LH_C [LH_P2 _lh_histins_arg1¹ 1] [LH_N]]
//│ 	| LH_C _lh_histins_LH_C_0⁰ _lh_histins_LH_C_1⁰ => case _lh_histins_LH_C_0⁰ of {
//│ 		LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰ => if polyEq⁰(_lh_histins_arg1¹, _lh_histins_LH_P2_0⁰) then [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ (_lh_histins_LH_P2_1⁰ + 1)] _lh_histins_LH_C_1⁰] else [LH_C [LH_P2 _lh_histins_LH_P2_0⁰ _lh_histins_LH_P2_1⁰] histins_lh(_lh_histins_arg1¹, _lh_histins_LH_C_1⁰)]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def histo_lh(_lh_histo_arg1¹) = foldr_lh(histins_lh, [LH_N], _lh_histo_arg1¹)
//│ def keys_lh(_lh_keys_arg1¹) = [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'p' [LH_C 'l' [LH_C 'e' [LH_N]]]]]] [LH_C [LH_C 'b' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_C 'n' [LH_C 'a' [LH_N]]]]]]] [LH_C [LH_C 'p' [LH_C 'e' [LH_C 'a' [LH_C 'c' [LH_C 'h' [LH_N]]]]]] [LH_C [LH_C 'a' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'c' [LH_C 'o' [LH_C 't' [LH_N]]]]]]]] [LH_N]]]]]
//│ def last_lh(_lh_last_arg1¹) = case _lh_last_arg1¹ of {
//│ 	LH_C _lh_last_LH_C_0⁰ _lh_last_LH_C_1⁰ => 
//│ 		let go¹ = (fun _lh_go_arg1¹ -> (fun _lh_go_arg2¹ -> case _lh_go_arg2¹ of {
//│ 			LH_N  => _lh_go_arg1¹
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => go¹(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰)
//│ 			| _  => error⁰}))
//│ 		in go¹(_lh_last_LH_C_0⁰, _lh_last_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def length_lh(ls⁶) = case ls⁶ of {
//│ 	LH_C h⁴ t⁴ => (1 + length_lh(t⁴))
//│ 	| LH_N  => 0}
//│ def map_lh(f², ls⁸) = case ls⁸ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f²(h⁰) map_lh(f², t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh(t⁵, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def max_lh(_lh_max_arg1¹, _lh_max_arg2¹) = if (_lh_max_arg1¹ > _lh_max_arg2¹) then _lh_max_arg1¹ else _lh_max_arg2¹
//│ def maxm_lh(_lh_maxm_arg1¹, _lh_maxm_arg2¹) = case _lh_maxm_arg1¹ of {
//│ 	Nothing  => _lh_maxm_arg2¹
//│ 	| Just _lh_maxm_Just_0⁰ => max_lh(_lh_maxm_Just_0⁰, _lh_maxm_arg2¹)
//│ 	| _  => error⁰}
//│ def member_lh(_lh_member_arg1¹, _lh_member_arg2¹) = case _lh_member_arg2¹ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_member_LH_C_0⁰ _lh_member_LH_C_1⁰ => (polyEq⁰(_lh_member_arg1¹, _lh_member_LH_C_0⁰) || member_lh(_lh_member_arg1¹, _lh_member_LH_C_1⁰))
//│ 	| _  => error⁰}
//│ def min_lh(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ < _lh_min_arg2¹) then _lh_min_arg1¹ else _lh_min_arg2¹
//│ def minm_lh(_lh_minm_arg1¹, _lh_minm_arg2¹) = case _lh_minm_arg1¹ of {
//│ 	Nothing  => _lh_minm_arg2¹
//│ 	| Just _lh_minm_Just_0⁰ => min_lh(_lh_minm_Just_0⁰, _lh_minm_arg2¹)
//│ 	| _  => error⁰}
//│ def partition'_lh(_lh_partition'_arg1¹) = foldr_lh(select_lh(_lh_partition'_arg1¹), [LH_P2 [LH_N] [LH_N]])
//│ def prog_lh(_lh_prog_arg1¹) = cichelli_lh(_lh_prog_arg1¹)
//│ def select_lh(_lh_select_arg1¹, _lh_select_arg2¹, _lh_select_arg3¹) = case _lh_select_arg3¹ of {
//│ 	LH_P2 _lh_select_LH_P2_0⁰ _lh_select_LH_P2_1⁰ => if _lh_select_arg1¹(_lh_select_arg2¹) then [LH_P2 [LH_C _lh_select_arg2¹ _lh_select_LH_P2_0⁰] _lh_select_LH_P2_1⁰] else [LH_P2 _lh_select_LH_P2_0⁰ [LH_C _lh_select_arg2¹ _lh_select_LH_P2_1⁰]]
//│ 	| _  => error⁰}
//│ def subset_lh(_lh_subset_arg1¹, _lh_subset_arg2¹) = all_lh((fun x² -> member_lh(x², _lh_subset_arg2¹)), _lh_subset_arg1¹)
//│ def take_lh(n², ls⁵) = if (n² > 0) then case ls⁵ of {
//│ 	LH_C h³ t³ => [LH_C h³ take_lh((n² - 1), t³)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testCichelli_nofib_lh(_lh_testCichelli_nofib_arg1¹) = prog_lh(_lh_testCichelli_nofib_arg1¹)
//│ def union_lh(_lh_union_arg1¹, _lh_union_arg2¹) = mappend_lh(_lh_union_arg1¹, 
//│ 	let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => if not⁰(member_lh(_lh_listcomp_fun_ls_h⁰, _lh_union_arg1¹)) then [LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun³(_lh_listcomp_fun_ls_t⁰)] else _lh_listcomp_fun³(_lh_listcomp_fun_ls_t⁰)
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun³(_lh_union_arg2¹))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
