:NewParser
:ParseOnly

:lhNoIter
:lhInHaskell
:lhGenOCaml
drop_lz n ls = case (force ls) of
                  [] -> lazy []
                  (h:t) -> if n > 0 then (drop_lz (n - 1) t) else t
even k = (k `mod` 2) == 0
splitAt_lz n ls = (take_lz n ls, drop_lz n ls)
int_val_of_char x = (int_of_char x) - 48
int_val_of_string s = f s 0
  where
    f [] a = a
    f (h:t) a = f t ((10*a) + (int_val_of_char h))
break p [] = ([], [])
break p (x:xs) = if p x then ([], (x:xs)) else case (break p xs) of { (ys, zs) -> ((x:ys), zs) }
lines s = case break (\x -> polyEq x '|') s of
                  (l, s') -> (l:(case s' of { [] -> []; _:s'' -> lines s'' }))
divmod a b = ((a `div` b), (a `mod` b))
process :: [String] -> [String]
process x = doInput (randomInts 111 47) x
doInput :: State -> [String] -> [String]
doInput state []     = []
doInput state (l:ls) = doLine l (\state -> doInput state ls) state
doLine :: String -> (State -> [String]) -> State -> [String]
doLine cs cont rs =
  let n = (int_val_of_string cs) in
  case (multiTest 100 rs n) of
    (t,rs') -> (if t then ("Probably prime": (cont rs')) else ("Composite": (cont rs')))
type State = [Int]
---------------------
makeNumber :: Integer -> [Integer] -> Integer
makeNumber b = foldl (\a -> \x -> (a * b) + x) 0
chop :: Integer -> Integer -> [Integer]
chop b =
  let chop' = (\a -> \n -> (case (n `divmod` b) of { (q,r) -> if n == 0 then a else chop' (r:a) q }))
  in
  chop' []
powerMod :: Integer -> Integer -> Integer -> Integer
powerMod a 0 m = 1
powerMod a b m =
  let a' = (mod a m) in
  let f = \a -> \b -> \c ->
          let g = (\a -> \b -> if even b then g ((a*a) `mod` m) (b `div` 2) else f a (b-1) ((a*c) `mod` m)) in
          if b == 0 then c else g a b
  in
  f a' (b-1) a'
-- log2 :: Integer -> Integer
log2 x = (length . chop 2) x
--------------------------
randomInts :: Int -> Int -> [Int]
randomInts s1 s2 = if (1 <= s1) && (s1 <= 2147483562) then
                   if (1 <= s2) && (s2 <= 2147483398) then rands s1 s2
                   else error "randomInts: Bad second seed."
                   else error "randomInts: Bad first seed."
rands :: Int -> Int -> [Int]
rands s1 s2 =
    let k    = (s1 `div` 53668) in
    let s1'  = ((40014 * (s1 - (k * 53668))) - (k * 12211)) in
    let s1'' = (if s1' < 0 then s1' + 2147483563 else s1') in
    let k'   = (s2 `div` 52774) in
    let s2'  = ((40692 * (s2 - (k' * 52774))) - (k' * 3791)) in
    let s2'' = (if s2' < 0 then s2' + 2147483399 else s2') in
    let z    = (s1'' - s2'') in
    if z < 1 then lazy ((z + 2147483562) : (rands s1'' s2'')) else lazy (z : (rands s1'' s2''))
--------------------------
multiTest :: Int -> [Int] -> Integer -> (Bool, [Int])
multiTest k rs n =
  let mTest = \k -> \rs ->
                  if k == 0 then
                    (True, rs)
                  else
                    case (singleTest n (findKQ n) rs) of { (t, rs') ->
                    if t then mTest (k-1) rs' else (False, rs') }
  in
  if ((n <= 1) || (even n)) then (n==2, rs) else mTest k rs
findKQ :: Integer -> (Integer, Integer)
findKQ n = f (0, (n-1))
  where
    f (k,q) = case (q `divmod` 2) of { (d,r) -> if r == 0 then f (k+1, d) else (k, q) }
singleTest :: Integer -> (Integer, Integer) -> [Int] -> (Bool, [Int])
singleTest n kq rs
  = case (random (n-2) rs) of { (x, rs') -> (singleTestX n kq (2+x), rs') }
singleTestX n (k, q) x =
  let square = (\x -> (x*x) `mod` n) in
  let witness = \ls -> case ls of {
    [] -> False;
    (t:ts) -> if t == (n-1) then True else (if t == 1 then False else witness ts)
  }
  in
  case (take_lz (k) (iterate square (powerMod x q n))) of {
    (t:ts) -> (t == 1) || (t == (n-1)) || witness ts
  }
random :: Integer -> [Int] -> (Integer, [Int])
random n rs =
  let ns        = (chop 65536 n) in
  case (splitAt_lz (length ns) rs) of { (rs1,rs2) -> (makeNumber 65536 (uniform ns rs1), rs2) }
uniform :: [Integer] -> [Int] -> [Integer]
uniform [n]    [r]    = [(r) `mod` n]
uniform (n:ns) (r:rs) =
  let t = ((r) `mod` (n+1)) in
  if t == n then t: (uniform ns rs)
            else t: (map (\x -> ((x) `mod` 65536)) rs)
---------------------
testPrimetest_nofib dummy = 
  let cts = primId "24|48|47|1317|8901" in
  process (lines cts)
testPrimetest_nofib $ primId 0
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testPrimetest_nofib_lh_₁^1248(primId⁰(0))
//│ def break_lh_₁(_lh_break_arg1⁰, _lh_break_arg2⁰) = case _lh_break_arg2⁰ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1⁰(_lh_break_LH_C_0⁰) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]] else 
//│ 		let _lh_matchIdent⁹ = break_lh_₁^978(_lh_break_arg1⁰, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent⁹ of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def chop_lh_₁(_lh_chop_arg1⁰) = 
//│ 	let chop'⁰ = (fun a⁰ -> (fun n¹ -> 
//│ 		let _lh_matchIdent¹ = divmod_lh_₂^268(n¹, _lh_chop_arg1⁰)
//│ 		in case _lh_matchIdent¹ of {
//│ 			LH_P2 _lh_chop_LH_P2_0⁰ _lh_chop_LH_P2_1⁰ => if (n¹ == 0) then a⁰ else chop'⁰([LH_C _lh_chop_LH_P2_1⁰ a⁰], _lh_chop_LH_P2_0⁰)
//│ 			| _  => error⁰}))
//│ 	in chop'⁰([LH_N])
//│ def divmod_lh_₁(_lh_divmod_arg1¹, _lh_divmod_arg2¹) = [LH_P2 div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹) (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)]
//│ def divmod_lh_₂(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) = [LH_P2 div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)]
//│ def doInput_lh_₁(_lh_doInput_arg1⁰, _lh_doInput_arg2⁰) = case _lh_doInput_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_doInput_LH_C_0⁰ _lh_doInput_LH_C_1⁰ => doLine_lh_₁^1150(_lh_doInput_LH_C_0⁰, (fun state⁰ -> doInput_lh_₁^1153(state⁰, _lh_doInput_LH_C_1⁰)), _lh_doInput_arg1⁰)
//│ 	| _  => error⁰}
//│ def doLine_lh_₁(_lh_doLine_arg1⁰, _lh_doLine_arg2⁰, _lh_doLine_arg3⁰) = 
//│ 	let n³ = int_val_of_string_lh_₁^890(_lh_doLine_arg1⁰)
//│ 	in let _lh_matchIdent⁸ = multiTest_lh_₁^893(100, _lh_doLine_arg3⁰, n³)
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_P2 _lh_doLine_LH_P2_0⁰ _lh_doLine_LH_P2_1⁰ => if _lh_doLine_LH_P2_0⁰ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)]
//│ 		| _  => error⁰}
//│ def drop_lz_lh_₁(_lh_drop_lz_arg1⁰, _lh_drop_lz_arg2⁰) = 
//│ 	let _lh_matchIdent⁰ = force⁰(_lh_drop_lz_arg2⁰)
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_N  => lazy⁰([LH_N])
//│ 		| LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => if (_lh_drop_lz_arg1⁰ > 0) then drop_lz_lh_₁^110((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰) else _lh_drop_lz_LH_C_1⁰
//│ 		| _  => error⁰}
//│ def even_lh_₁(_lh_even_arg1¹) = ((_lh_even_arg1¹ % 2) == 0)
//│ def even_lh_₂(_lh_even_arg1⁰) = ((_lh_even_arg1⁰ % 2) == 0)
//│ def findKQ_lh_₁(_lh_findKQ_arg1⁰) = 
//│ 	let f⁶ = (fun _lh_f_arg1⁰ -> case _lh_f_arg1⁰ of {
//│ 		LH_P2 _lh_f_LH_P2_0⁰ _lh_f_LH_P2_1⁰ => 
//│ 			let _lh_matchIdent⁵ = divmod_lh_₁^598(_lh_f_LH_P2_1⁰, 2)
//│ 			in case _lh_matchIdent⁵ of {
//│ 				LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => if (_lh_f_LH_P2_1¹ == 0) then f⁶([LH_P2 (_lh_f_LH_P2_0⁰ + 1) _lh_f_LH_P2_0¹]) else [LH_P2 _lh_f_LH_P2_0⁰ _lh_f_LH_P2_1⁰]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰})
//│ 	in f⁶([LH_P2 0 (_lh_findKQ_arg1⁰ - 1)])
//│ def foldl_lh_₁(f³, i⁰, ls³) = case ls³ of {
//│ 	LH_C h³ t³ => foldl_lh_₁^57(f³, f³(i⁰, h³), t³)
//│ 	| LH_N  => i⁰}
//│ def int_val_of_char_lh_₁(_lh_int_val_of_char_arg1⁰) = (int_of_char⁰(_lh_int_val_of_char_arg1⁰) - 48)
//│ def int_val_of_string_lh_₁(_lh_int_val_of_string_arg1⁰) = 
//│ 	let f⁷ = (fun _lh_f_arg1¹ -> (fun _lh_f_arg2⁰ -> case _lh_f_arg1¹ of {
//│ 		LH_N  => _lh_f_arg2⁰
//│ 		| LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰ => f⁷(_lh_f_LH_C_1⁰, ((10 * _lh_f_arg2⁰) + int_val_of_char_lh_₁^690(_lh_f_LH_C_0⁰)))
//│ 		| _  => error⁰}))
//│ 	in f⁷(_lh_int_val_of_string_arg1⁰, 0)
//│ def iterate_lh_₁(f⁴, x⁴) = lazy⁰([LH_C x⁴ iterate_lh_₁^365(f⁴, f⁴(x⁴))])
//│ def length_lh_₁(ls⁵) = case ls⁵ of {
//│ 	LH_C h⁵ t⁸ => (1 + length_lh_₁^302(t⁸))
//│ 	| LH_N  => 0}
//│ def lines_lh_₁(_lh_lines_arg1⁰) = 
//│ 	let _lh_matchIdent¹⁰ = break_lh_₁^1166((fun x⁶ -> polyEq⁰(x⁶, '|')), _lh_lines_arg1⁰)
//│ 	in case _lh_matchIdent¹⁰ of {
//│ 		LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ 
//│ 			let _lh_matchIdent¹¹ = _lh_lines_LH_P2_1⁰
//│ 			in case _lh_matchIdent¹¹ of {
//│ 				LH_N  => [LH_N]
//│ 				| LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁^1181(_lh_lines_LH_C_1⁰)
//│ 				| _  => error⁰}]
//│ 		| _  => error⁰}
//│ def makeNumber_lh_₁(_lh_makeNumber_arg1⁰) = foldl_lh_₁^309((fun a¹ -> (fun x³ -> ((a¹ * _lh_makeNumber_arg1⁰) + x³))), 0)
//│ def map_lh_₁(f², ls²) = case ls² of {
//│ 	LH_C h² t² => [LH_C f²(h²) map_lh_₁^33(f², t²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f¹, ls¹) = case ls¹ of {
//│ 	LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₂^19(f¹, t¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₃^5(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def multiTest_lh_₁(_lh_multiTest_arg1⁰, _lh_multiTest_arg2⁰, _lh_multiTest_arg3⁰) = 
//│ 	let mTest⁰ = (fun k⁰ -> (fun rs⁰ -> if (k⁰ == 0) then [LH_P2 [True] rs⁰] else 
//│ 		let _lh_matchIdent⁷ = singleTest_lh_₁^714(_lh_multiTest_arg3⁰, findKQ_lh_₁^717(_lh_multiTest_arg3⁰), rs⁰)
//│ 		in case _lh_matchIdent⁷ of {
//│ 			LH_P2 _lh_multiTest_LH_P2_0⁰ _lh_multiTest_LH_P2_1⁰ => if _lh_multiTest_LH_P2_0⁰ then mTest⁰((k⁰ - 1), _lh_multiTest_LH_P2_1⁰) else [LH_P2 [False] _lh_multiTest_LH_P2_1⁰]
//│ 			| _  => error⁰}))
//│ 	in if ((_lh_multiTest_arg3⁰ <= 1) || even_lh_₁^751(_lh_multiTest_arg3⁰)) then [LH_P2 (_lh_multiTest_arg3⁰ == 2) _lh_multiTest_arg2⁰] else mTest⁰(_lh_multiTest_arg1⁰, _lh_multiTest_arg2⁰)
//│ def powerMod_lh_₁(_lh_powerMod_arg1⁰, _lh_powerMod_arg2⁰, _lh_powerMod_arg3⁰) = case _lh_powerMod_arg2⁰ of {
//│ 	0  => 1
//│ 	| _  => 
//│ 		let a'⁰ = (_lh_powerMod_arg1⁰ mod _lh_powerMod_arg3⁰)
//│ 		in let f⁵ = (fun a² -> (fun b⁰ -> (fun c⁰ -> 
//│ 			let g⁰ = (fun a³ -> (fun b¹ -> if even_lh_₂^383(b¹) then g⁰(((a³ * a³) % _lh_powerMod_arg3⁰), div⁰(b¹, 2)) else f⁵(a³, (b¹ - 1), ((a³ * c⁰) % _lh_powerMod_arg3⁰))))
//│ 			in if (b⁰ == 0) then c⁰ else g⁰(a², b⁰))))
//│ 		in f⁵(a'⁰, (_lh_powerMod_arg2⁰ - 1), a'⁰)}
//│ def process_lh_₁(_lh_process_arg1⁰) = doInput_lh_₁^1192(randomInts_lh_₁^1193(111, 47), _lh_process_arg1⁰)
//│ def randomInts_lh_₁(_lh_randomInts_arg1⁰, _lh_randomInts_arg2⁰) = if ((1 <= _lh_randomInts_arg1⁰) && (_lh_randomInts_arg1⁰ <= 2147483562)) then if ((1 <= _lh_randomInts_arg2⁰) && (_lh_randomInts_arg2⁰ <= 2147483398)) then rands_lh_₁^1023(_lh_randomInts_arg1⁰, _lh_randomInts_arg2⁰) else error⁰([LH_C 'r' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'B' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C 'd' [LH_C '.' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) else error⁰([LH_C 'r' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'B' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'f' [LH_C 'i' [LH_C 'r' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C 'd' [LH_C '.' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ def random_lh_₁(_lh_random_arg1⁰, _lh_random_arg2⁰) = 
//│ 	let ns⁰ = chop_lh_₁^471(65536, _lh_random_arg1⁰)
//│ 	in let _lh_matchIdent² = splitAt_lz_lh_₁^476(length_lh_₁^477(ns⁰), _lh_random_arg2⁰)
//│ 	in case _lh_matchIdent² of {
//│ 		LH_P2 _lh_random_LH_P2_0⁰ _lh_random_LH_P2_1⁰ => [LH_P2 makeNumber_lh_₁^484(65536, uniform_lh_₁^487(ns⁰, _lh_random_LH_P2_0⁰)) _lh_random_LH_P2_1⁰]
//│ 		| _  => error⁰}
//│ def rands_lh_₁(_lh_rands_arg1⁰, _lh_rands_arg2⁰) = 
//│ 	let k¹ = div⁰(_lh_rands_arg1⁰, 53668)
//│ 	in let s1'⁰ = ((40014 * (_lh_rands_arg1⁰ - (k¹ * 53668))) - (k¹ * 12211))
//│ 	in let s1''⁰ = if (s1'⁰ < 0) then (s1'⁰ + 2147483563) else s1'⁰
//│ 	in let k'⁰ = div⁰(_lh_rands_arg2⁰, 52774)
//│ 	in let s2'⁰ = ((40692 * (_lh_rands_arg2⁰ - (k'⁰ * 52774))) - (k'⁰ * 3791))
//│ 	in let s2''⁰ = if (s2'⁰ < 0) then (s2'⁰ + 2147483399) else s2'⁰
//│ 	in let z⁰ = (s1''⁰ - s2''⁰)
//│ 	in if (z⁰ < 1) then lazy⁰([LH_C (z⁰ + 2147483562) rands_lh_₁^864(s1''⁰, s2''⁰)]) else lazy⁰([LH_C z⁰ rands_lh_₁^873(s1''⁰, s2''⁰)])
//│ def singleTestX_lh_₁(_lh_singleTestX_arg1⁰, _lh_singleTestX_arg2⁰, _lh_singleTestX_arg3⁰) = case _lh_singleTestX_arg2⁰ of {
//│ 	LH_P2 _lh_singleTestX_LH_P2_0⁰ _lh_singleTestX_LH_P2_1⁰ => 
//│ 		let square⁰ = (fun x⁵ -> ((x⁵ * x⁵) % _lh_singleTestX_arg1⁰))
//│ 		in let witness⁰ = (fun ls⁷ -> 
//│ 			let _lh_matchIdent³ = ls⁷
//│ 			in case _lh_matchIdent³ of {
//│ 				LH_N  => [False]
//│ 				| LH_C _lh_singleTestX_LH_C_0⁰ _lh_singleTestX_LH_C_1⁰ => if (_lh_singleTestX_LH_C_0⁰ == (_lh_singleTestX_arg1⁰ - 1)) then [True] else if (_lh_singleTestX_LH_C_0⁰ == 1) then [False] else witness⁰(_lh_singleTestX_LH_C_1⁰)
//│ 				| _  => error⁰})
//│ 		in let _lh_matchIdent⁴ = take_lz_lh_₁^540(_lh_singleTestX_LH_P2_0⁰, iterate_lh_₁^543(square⁰, powerMod_lh_₁^546(_lh_singleTestX_arg3⁰, _lh_singleTestX_LH_P2_1⁰, _lh_singleTestX_arg1⁰)))
//│ 		in case _lh_matchIdent⁴ of {
//│ 			LH_C _lh_singleTestX_LH_C_0¹ _lh_singleTestX_LH_C_1¹ => (((_lh_singleTestX_LH_C_0¹ == 1) || (_lh_singleTestX_LH_C_0¹ == (_lh_singleTestX_arg1⁰ - 1))) || witness⁰(_lh_singleTestX_LH_C_1¹))
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def singleTest_lh_₁(_lh_singleTest_arg1⁰, _lh_singleTest_arg2⁰, _lh_singleTest_arg3⁰) = 
//│ 	let _lh_matchIdent⁶ = random_lh_₁^649((_lh_singleTest_arg1⁰ - 2), _lh_singleTest_arg3⁰)
//│ 	in case _lh_matchIdent⁶ of {
//│ 		LH_P2 _lh_singleTest_LH_P2_0⁰ _lh_singleTest_LH_P2_1⁰ => [LH_P2 singleTestX_lh_₁^659(_lh_singleTest_arg1⁰, _lh_singleTest_arg2⁰, (2 + _lh_singleTest_LH_P2_0⁰)) _lh_singleTest_LH_P2_1⁰]
//│ 		| _  => error⁰}
//│ def splitAt_lz_lh_₁(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) = [LH_P2 take_lz_lh_₂^325(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) drop_lz_lh_₁^330(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)]
//│ def take_lz_lh_₁(n², ls⁶) = if (n² > 0) then case force⁰(ls⁶) of {
//│ 	LH_C h⁶ t⁹ => [LH_C h⁶ take_lz_lh_₁^347((n² - 1), t⁹)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lz_lh_₂(n⁰, ls⁴) = if (n⁰ > 0) then case force⁰(ls⁴) of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ take_lz_lh_₂^82((n⁰ - 1), t⁴)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPrimetest_nofib_lh_₁(_lh_testPrimetest_nofib_arg1⁰) = 
//│ 	let cts⁰ = primId⁰([LH_C '2' [LH_C '4' [LH_C '|' [LH_C '4' [LH_C '8' [LH_C '|' [LH_C '4' [LH_C '7' [LH_C '|' [LH_C '1' [LH_C '3' [LH_C '1' [LH_C '7' [LH_C '|' [LH_C '8' [LH_C '9' [LH_C '0' [LH_C '1' [LH_N]]]]]]]]]]]]]]]]]]])
//│ 	in process_lh_₁^1241(lines_lh_₁^1242(cts⁰))
//│ def uniform_lh_₁(_lh_uniform_arg1⁰, _lh_uniform_arg2⁰) = case _lh_uniform_arg1⁰ of {
//│ 	LH_C _lh_uniform_LH_C_0⁰ _lh_uniform_LH_C_1⁰ => case _lh_uniform_LH_C_1⁰ of {
//│ 		LH_N  => case _lh_uniform_arg2⁰ of {
//│ 			LH_C _lh_uniform_LH_C_0¹ _lh_uniform_LH_C_1¹ => case _lh_uniform_LH_C_1¹ of {
//│ 				LH_N  => [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]]
//│ 				| _  => case _lh_uniform_arg2⁰ of {
//│ 					LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => 
//│ 						let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ 						in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁^163(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁^170((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)]
//│ 					| _  => error⁰}}
//│ 			| _  => case _lh_uniform_arg2⁰ of {
//│ 				LH_C _lh_uniform_LH_C_0³ _lh_uniform_LH_C_1³ => 
//│ 					let t⁶ = (_lh_uniform_LH_C_0³ % (_lh_uniform_LH_C_0⁰ + 1))
//│ 					in if (t⁶ == _lh_uniform_LH_C_0⁰) then [LH_C t⁶ uniform_lh_₁^202(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)] else [LH_C t⁶ map_lh_₂^209((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)]
//│ 				| _  => error⁰}}
//│ 		| _  => case _lh_uniform_arg2⁰ of {
//│ 			LH_C _lh_uniform_LH_C_0⁴ _lh_uniform_LH_C_1⁴ => 
//│ 				let t⁷ = (_lh_uniform_LH_C_0⁴ % (_lh_uniform_LH_C_0⁰ + 1))
//│ 				in if (t⁷ == _lh_uniform_LH_C_0⁰) then [LH_C t⁷ uniform_lh_₁^241(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1⁴)] else [LH_C t⁷ map_lh_₃^248((fun x² -> (x² % 65536)), _lh_uniform_LH_C_1⁴)]
//│ 			| _  => error⁰}}
//│ 	| _  => error⁰}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec break_lh__d1 _lh_break_arg1_0 _lh_break_arg2_0 =
//│ 		  (match _lh_break_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2((`LH_N), (`LH_N)))
//│ 		    | `LH_C(_lh_break_LH_C_0_0, _lh_break_LH_C_1_0) -> 
//│ 		      (if (_lh_break_arg1_0 _lh_break_LH_C_0_0) then
//│ 		        (`LH_P2((`LH_N), (`LH_C(_lh_break_LH_C_0_0, _lh_break_LH_C_1_0))))
//│ 		      else
//│ 		        (let rec _lh_matchIdent_9 = ((break_lh__d1 _lh_break_arg1_0) _lh_break_LH_C_1_0) in
//│ 		          (match _lh_matchIdent_9 with
//│ 		            | `LH_P2(_lh_break_LH_P2_0_0, _lh_break_LH_P2_1_0) -> 
//│ 		              (`LH_P2((`LH_C(_lh_break_LH_C_0_0, _lh_break_LH_P2_0_0)), _lh_break_LH_P2_1_0))
//│ 		            | _ -> 
//│ 		              (failwith "error"))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec lines_lh__d1 _lh_lines_arg1_0 =
//│ 		  (let rec _lh_matchIdent_1_0 = ((break_lh__d1 (fun x_6 -> 
//│ 		    (x_6 = '|'))) _lh_lines_arg1_0) in
//│ 		    (match _lh_matchIdent_1_0 with
//│ 		      | `LH_P2(_lh_lines_LH_P2_0_0, _lh_lines_LH_P2_1_0) -> 
//│ 		        (`LH_C(_lh_lines_LH_P2_0_0, (let rec _lh_matchIdent_1_1 = _lh_lines_LH_P2_1_0 in
//│ 		          (match _lh_matchIdent_1_1 with
//│ 		            | `LH_N -> 
//│ 		              (`LH_N)
//│ 		            | `LH_C(_lh_lines_LH_C_0_0, _lh_lines_LH_C_1_0) -> 
//│ 		              (lines_lh__d1 _lh_lines_LH_C_1_0)
//│ 		            | _ -> 
//│ 		              (failwith "error")))))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec divmod_lh__d1 _lh_divmod_arg1_1 _lh_divmod_arg2_1 =
//│ 		  (`LH_P2((_lh_divmod_arg1_1 / _lh_divmod_arg2_1), (_lh_divmod_arg1_1 mod _lh_divmod_arg2_1)));;
//│ 		let rec findKQ_lh__d1 _lh_findKQ_arg1_0 =
//│ 		  (let rec f_6 = (fun _lh_f_arg1_0 -> 
//│ 		    (match _lh_f_arg1_0 with
//│ 		      | `LH_P2(_lh_f_LH_P2_0_0, _lh_f_LH_P2_1_0) -> 
//│ 		        (let rec _lh_matchIdent_5 = ((divmod_lh__d1 _lh_f_LH_P2_1_0) 2) in
//│ 		          (match _lh_matchIdent_5 with
//│ 		            | `LH_P2(_lh_f_LH_P2_0_1, _lh_f_LH_P2_1_1) -> 
//│ 		              (if (_lh_f_LH_P2_1_1 = 0) then
//│ 		                (f_6 (`LH_P2((_lh_f_LH_P2_0_0 + 1), _lh_f_LH_P2_0_1)))
//│ 		              else
//│ 		                (`LH_P2(_lh_f_LH_P2_0_0, _lh_f_LH_P2_1_0)))
//│ 		            | _ -> 
//│ 		              (failwith "error")))
//│ 		      | _ -> 
//│ 		        (failwith "error"))) in
//│ 		    (f_6 (`LH_P2(0, (_lh_findKQ_arg1_0 - 1)))));;
//│ 		let rec foldl_lh__d1 f_3 i_0 ls_3 =
//│ 		  (match ls_3 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      (((foldl_lh__d1 f_3) ((f_3 i_0) h_3)) t_3)
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec makeNumber_lh__d1 _lh_makeNumber_arg1_0 =
//│ 		  ((foldl_lh__d1 (fun a_1 x_3 -> 
//│ 		    ((a_1 * _lh_makeNumber_arg1_0) + x_3))) 0);;
//│ 		let rec drop_lz_lh__d1 _lh_drop_lz_arg1_0 _lh_drop_lz_arg2_0 =
//│ 		  (let rec _lh_matchIdent_0 = (Lazy.force _lh_drop_lz_arg2_0) in
//│ 		    (match _lh_matchIdent_0 with
//│ 		      | `LH_N -> 
//│ 		        (lazy (`LH_N))
//│ 		      | `LH_C(_lh_drop_lz_LH_C_0_0, _lh_drop_lz_LH_C_1_0) -> 
//│ 		        (if (_lh_drop_lz_arg1_0 > 0) then
//│ 		          ((drop_lz_lh__d1 (_lh_drop_lz_arg1_0 - 1)) _lh_drop_lz_LH_C_1_0)
//│ 		        else
//│ 		          _lh_drop_lz_LH_C_1_0)
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec take_lz_lh__d2 n_0 ls_4 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match (Lazy.force ls_4) with
//│ 		      | `LH_C(h_4, t_4) -> 
//│ 		        (`LH_C(h_4, ((take_lz_lh__d2 (n_0 - 1)) t_4)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec splitAt_lz_lh__d1 _lh_splitAt_lz_arg1_0 _lh_splitAt_lz_arg2_0 =
//│ 		  (`LH_P2(((take_lz_lh__d2 _lh_splitAt_lz_arg1_0) _lh_splitAt_lz_arg2_0), ((drop_lz_lh__d1 _lh_splitAt_lz_arg1_0) _lh_splitAt_lz_arg2_0)));;
//│ 		let rec map_lh__d2 f_1 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (`LH_C((f_1 h_1), ((map_lh__d2 f_1) t_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d1 f_2 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C((f_2 h_2), ((map_lh__d1 f_2) t_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d3 f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C((f_0 h_0), ((map_lh__d3 f_0) t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec uniform_lh__d1 _lh_uniform_arg1_0 _lh_uniform_arg2_0 =
//│ 		  (match _lh_uniform_arg1_0 with
//│ 		    | `LH_C(_lh_uniform_LH_C_0_0, _lh_uniform_LH_C_1_0) -> 
//│ 		      (match _lh_uniform_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (match _lh_uniform_arg2_0 with
//│ 		            | `LH_C(_lh_uniform_LH_C_0_1, _lh_uniform_LH_C_1_1) -> 
//│ 		              (match _lh_uniform_LH_C_1_1 with
//│ 		                | `LH_N -> 
//│ 		                  (`LH_C((_lh_uniform_LH_C_0_1 mod _lh_uniform_LH_C_0_0), (`LH_N)))
//│ 		                | _ -> 
//│ 		                  (match _lh_uniform_arg2_0 with
//│ 		                    | `LH_C(_lh_uniform_LH_C_0_2, _lh_uniform_LH_C_1_2) -> 
//│ 		                      (let rec t_5 = (_lh_uniform_LH_C_0_2 mod (_lh_uniform_LH_C_0_0 + 1)) in
//│ 		                        (if (t_5 = _lh_uniform_LH_C_0_0) then
//│ 		                          (`LH_C(t_5, ((uniform_lh__d1 _lh_uniform_LH_C_1_0) _lh_uniform_LH_C_1_2)))
//│ 		                        else
//│ 		                          (`LH_C(t_5, ((map_lh__d1 (fun x_0 -> 
//│ 		                            (x_0 mod 65536))) _lh_uniform_LH_C_1_2)))))
//│ 		                    | _ -> 
//│ 		                      (failwith "error")))
//│ 		            | _ -> 
//│ 		              (match _lh_uniform_arg2_0 with
//│ 		                | `LH_C(_lh_uniform_LH_C_0_3, _lh_uniform_LH_C_1_3) -> 
//│ 		                  (let rec t_6 = (_lh_uniform_LH_C_0_3 mod (_lh_uniform_LH_C_0_0 + 1)) in
//│ 		                    (if (t_6 = _lh_uniform_LH_C_0_0) then
//│ 		                      (`LH_C(t_6, ((uniform_lh__d1 _lh_uniform_LH_C_1_0) _lh_uniform_LH_C_1_3)))
//│ 		                    else
//│ 		                      (`LH_C(t_6, ((map_lh__d2 (fun x_1 -> 
//│ 		                        (x_1 mod 65536))) _lh_uniform_LH_C_1_3)))))
//│ 		                | _ -> 
//│ 		                  (failwith "error")))
//│ 		        | _ -> 
//│ 		          (match _lh_uniform_arg2_0 with
//│ 		            | `LH_C(_lh_uniform_LH_C_0_4, _lh_uniform_LH_C_1_4) -> 
//│ 		              (let rec t_7 = (_lh_uniform_LH_C_0_4 mod (_lh_uniform_LH_C_0_0 + 1)) in
//│ 		                (if (t_7 = _lh_uniform_LH_C_0_0) then
//│ 		                  (`LH_C(t_7, ((uniform_lh__d1 _lh_uniform_LH_C_1_0) _lh_uniform_LH_C_1_4)))
//│ 		                else
//│ 		                  (`LH_C(t_7, ((map_lh__d3 (fun x_2 -> 
//│ 		                    (x_2 mod 65536))) _lh_uniform_LH_C_1_4)))))
//│ 		            | _ -> 
//│ 		              (failwith "error")))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec divmod_lh__d2 _lh_divmod_arg1_0 _lh_divmod_arg2_0 =
//│ 		  (`LH_P2((_lh_divmod_arg1_0 / _lh_divmod_arg2_0), (_lh_divmod_arg1_0 mod _lh_divmod_arg2_0)));;
//│ 		let rec chop_lh__d1 _lh_chop_arg1_0 =
//│ 		  (let rec chop'_0 = (fun a_0 n_1 -> 
//│ 		    (let rec _lh_matchIdent_1 = ((divmod_lh__d2 n_1) _lh_chop_arg1_0) in
//│ 		      (match _lh_matchIdent_1 with
//│ 		        | `LH_P2(_lh_chop_LH_P2_0_0, _lh_chop_LH_P2_1_0) -> 
//│ 		          (if (n_1 = 0) then
//│ 		            a_0
//│ 		          else
//│ 		            ((chop'_0 (`LH_C(_lh_chop_LH_P2_1_0, a_0))) _lh_chop_LH_P2_0_0))
//│ 		        | _ -> 
//│ 		          (failwith "error")))) in
//│ 		    (chop'_0 (`LH_N)));;
//│ 		let rec length_lh__d1 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_5, t_8) -> 
//│ 		      (1 + (length_lh__d1 t_8))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec random_lh__d1 _lh_random_arg1_0 _lh_random_arg2_0 =
//│ 		  (let rec ns_0 = ((chop_lh__d1 65536) _lh_random_arg1_0) in
//│ 		    (let rec _lh_matchIdent_2 = ((splitAt_lz_lh__d1 (length_lh__d1 ns_0)) _lh_random_arg2_0) in
//│ 		      (match _lh_matchIdent_2 with
//│ 		        | `LH_P2(_lh_random_LH_P2_0_0, _lh_random_LH_P2_1_0) -> 
//│ 		          (`LH_P2(((makeNumber_lh__d1 65536) ((uniform_lh__d1 ns_0) _lh_random_LH_P2_0_0)), _lh_random_LH_P2_1_0))
//│ 		        | _ -> 
//│ 		          (failwith "error"))));;
//│ 		let rec iterate_lh__d1 f_4 x_4 =
//│ 		  (lazy (`LH_C(x_4, ((iterate_lh__d1 f_4) (f_4 x_4)))));;
//│ 		let rec take_lz_lh__d1 n_2 ls_6 =
//│ 		  (if (n_2 > 0) then
//│ 		    (match (Lazy.force ls_6) with
//│ 		      | `LH_C(h_6, t_9) -> 
//│ 		        (`LH_C(h_6, ((take_lz_lh__d1 (n_2 - 1)) t_9)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec even_lh__d2 _lh_even_arg1_0 =
//│ 		  ((_lh_even_arg1_0 mod 2) = 0);;
//│ 		let rec powerMod_lh__d1 _lh_powerMod_arg1_0 _lh_powerMod_arg2_0 _lh_powerMod_arg3_0 =
//│ 		  (match _lh_powerMod_arg2_0 with
//│ 		    | 0 -> 
//│ 		      1
//│ 		    | _ -> 
//│ 		      (let rec a'_0 = (_lh_powerMod_arg1_0 mod _lh_powerMod_arg3_0) in
//│ 		        (let rec f_5 = (fun a_2 b_0 c_0 -> 
//│ 		          (let rec g_0 = (fun a_3 b_1 -> 
//│ 		            (if (even_lh__d2 b_1) then
//│ 		              ((g_0 ((a_3 * a_3) mod _lh_powerMod_arg3_0)) (b_1 / 2))
//│ 		            else
//│ 		              (((f_5 a_3) (b_1 - 1)) ((a_3 * c_0) mod _lh_powerMod_arg3_0)))) in
//│ 		            (if (b_0 = 0) then
//│ 		              c_0
//│ 		            else
//│ 		              ((g_0 a_2) b_0)))) in
//│ 		          (((f_5 a'_0) (_lh_powerMod_arg2_0 - 1)) a'_0))));;
//│ 		let rec singleTestX_lh__d1 _lh_singleTestX_arg1_0 _lh_singleTestX_arg2_0 _lh_singleTestX_arg3_0 =
//│ 		  (match _lh_singleTestX_arg2_0 with
//│ 		    | `LH_P2(_lh_singleTestX_LH_P2_0_0, _lh_singleTestX_LH_P2_1_0) -> 
//│ 		      (let rec square_0 = (fun x_5 -> 
//│ 		        ((x_5 * x_5) mod _lh_singleTestX_arg1_0)) in
//│ 		        (let rec witness_0 = (fun ls_7 -> 
//│ 		          (let rec _lh_matchIdent_3 = ls_7 in
//│ 		            (match _lh_matchIdent_3 with
//│ 		              | `LH_N -> 
//│ 		                false
//│ 		              | `LH_C(_lh_singleTestX_LH_C_0_0, _lh_singleTestX_LH_C_1_0) -> 
//│ 		                (if (_lh_singleTestX_LH_C_0_0 = (_lh_singleTestX_arg1_0 - 1)) then
//│ 		                  true
//│ 		                else
//│ 		                  (if (_lh_singleTestX_LH_C_0_0 = 1) then
//│ 		                    false
//│ 		                  else
//│ 		                    (witness_0 _lh_singleTestX_LH_C_1_0)))
//│ 		              | _ -> 
//│ 		                (failwith "error")))) in
//│ 		          (let rec _lh_matchIdent_4 = ((take_lz_lh__d1 _lh_singleTestX_LH_P2_0_0) ((iterate_lh__d1 square_0) (((powerMod_lh__d1 _lh_singleTestX_arg3_0) _lh_singleTestX_LH_P2_1_0) _lh_singleTestX_arg1_0))) in
//│ 		            (match _lh_matchIdent_4 with
//│ 		              | `LH_C(_lh_singleTestX_LH_C_0_1, _lh_singleTestX_LH_C_1_1) -> 
//│ 		                (((_lh_singleTestX_LH_C_0_1 = 1) || (_lh_singleTestX_LH_C_0_1 = (_lh_singleTestX_arg1_0 - 1))) || (witness_0 _lh_singleTestX_LH_C_1_1))
//│ 		              | _ -> 
//│ 		                (failwith "error")))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec singleTest_lh__d1 _lh_singleTest_arg1_0 _lh_singleTest_arg2_0 _lh_singleTest_arg3_0 =
//│ 		  (let rec _lh_matchIdent_6 = ((random_lh__d1 (_lh_singleTest_arg1_0 - 2)) _lh_singleTest_arg3_0) in
//│ 		    (match _lh_matchIdent_6 with
//│ 		      | `LH_P2(_lh_singleTest_LH_P2_0_0, _lh_singleTest_LH_P2_1_0) -> 
//│ 		        (`LH_P2((((singleTestX_lh__d1 _lh_singleTest_arg1_0) _lh_singleTest_arg2_0) (2 + _lh_singleTest_LH_P2_0_0)), _lh_singleTest_LH_P2_1_0))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec even_lh__d1 _lh_even_arg1_1 =
//│ 		  ((_lh_even_arg1_1 mod 2) = 0);;
//│ 		let rec multiTest_lh__d1 _lh_multiTest_arg1_0 _lh_multiTest_arg2_0 _lh_multiTest_arg3_0 =
//│ 		  (let rec mTest_0 = (fun k_0 rs_0 -> 
//│ 		    (if (k_0 = 0) then
//│ 		      (`LH_P2(true, rs_0))
//│ 		    else
//│ 		      (let rec _lh_matchIdent_7 = (((singleTest_lh__d1 _lh_multiTest_arg3_0) (findKQ_lh__d1 _lh_multiTest_arg3_0)) rs_0) in
//│ 		        (match _lh_matchIdent_7 with
//│ 		          | `LH_P2(_lh_multiTest_LH_P2_0_0, _lh_multiTest_LH_P2_1_0) -> 
//│ 		            (if _lh_multiTest_LH_P2_0_0 then
//│ 		              ((mTest_0 (k_0 - 1)) _lh_multiTest_LH_P2_1_0)
//│ 		            else
//│ 		              (`LH_P2(false, _lh_multiTest_LH_P2_1_0)))
//│ 		          | _ -> 
//│ 		            (failwith "error"))))) in
//│ 		    (if ((_lh_multiTest_arg3_0 <= 1) || (even_lh__d1 _lh_multiTest_arg3_0)) then
//│ 		      (`LH_P2((_lh_multiTest_arg3_0 = 2), _lh_multiTest_arg2_0))
//│ 		    else
//│ 		      ((mTest_0 _lh_multiTest_arg1_0) _lh_multiTest_arg2_0)));;
//│ 		let rec int_val_of_char_lh__d1 _lh_int_val_of_char_arg1_0 =
//│ 		  ((int_of_char _lh_int_val_of_char_arg1_0) - 48);;
//│ 		let rec int_val_of_string_lh__d1 _lh_int_val_of_string_arg1_0 =
//│ 		  (let rec f_7 = (fun _lh_f_arg1_1 _lh_f_arg2_0 -> 
//│ 		    (match _lh_f_arg1_1 with
//│ 		      | `LH_N -> 
//│ 		        _lh_f_arg2_0
//│ 		      | `LH_C(_lh_f_LH_C_0_0, _lh_f_LH_C_1_0) -> 
//│ 		        ((f_7 _lh_f_LH_C_1_0) ((10 * _lh_f_arg2_0) + (int_val_of_char_lh__d1 _lh_f_LH_C_0_0)))
//│ 		      | _ -> 
//│ 		        (failwith "error"))) in
//│ 		    ((f_7 _lh_int_val_of_string_arg1_0) 0));;
//│ 		let rec doLine_lh__d1 _lh_doLine_arg1_0 _lh_doLine_arg2_0 _lh_doLine_arg3_0 =
//│ 		  (let rec n_3 = (int_val_of_string_lh__d1 _lh_doLine_arg1_0) in
//│ 		    (let rec _lh_matchIdent_8 = (((multiTest_lh__d1 100) _lh_doLine_arg3_0) n_3) in
//│ 		      (match _lh_matchIdent_8 with
//│ 		        | `LH_P2(_lh_doLine_LH_P2_0_0, _lh_doLine_LH_P2_1_0) -> 
//│ 		          (if _lh_doLine_LH_P2_0_0 then
//│ 		            (`LH_C((`LH_C('P', (`LH_C('r', (`LH_C('o', (`LH_C('b', (`LH_C('a', (`LH_C('b', (`LH_C('l', (`LH_C('y', (`LH_C(' ', (`LH_C('p', (`LH_C('r', (`LH_C('i', (`LH_C('m', (`LH_C('e', (`LH_N))))))))))))))))))))))))))))), (_lh_doLine_arg2_0 _lh_doLine_LH_P2_1_0)))
//│ 		          else
//│ 		            (`LH_C((`LH_C('C', (`LH_C('o', (`LH_C('m', (`LH_C('p', (`LH_C('o', (`LH_C('s', (`LH_C('i', (`LH_C('t', (`LH_C('e', (`LH_N))))))))))))))))))), (_lh_doLine_arg2_0 _lh_doLine_LH_P2_1_0))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))));;
//│ 		let rec doInput_lh__d1 _lh_doInput_arg1_0 _lh_doInput_arg2_0 =
//│ 		  (match _lh_doInput_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_doInput_LH_C_0_0, _lh_doInput_LH_C_1_0) -> 
//│ 		      (((doLine_lh__d1 _lh_doInput_LH_C_0_0) (fun state_0 -> 
//│ 		        ((doInput_lh__d1 state_0) _lh_doInput_LH_C_1_0))) _lh_doInput_arg1_0)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec rands_lh__d1 _lh_rands_arg1_0 _lh_rands_arg2_0 =
//│ 		  (let rec k_1 = (_lh_rands_arg1_0 / 53668) in
//│ 		    (let rec s1'_0 = ((40014 * (_lh_rands_arg1_0 - (k_1 * 53668))) - (k_1 * 12211)) in
//│ 		      (let rec s1''_0 = (if (s1'_0 < 0) then
//│ 		        (s1'_0 + 2147483563)
//│ 		      else
//│ 		        s1'_0) in
//│ 		        (let rec k'_0 = (_lh_rands_arg2_0 / 52774) in
//│ 		          (let rec s2'_0 = ((40692 * (_lh_rands_arg2_0 - (k'_0 * 52774))) - (k'_0 * 3791)) in
//│ 		            (let rec s2''_0 = (if (s2'_0 < 0) then
//│ 		              (s2'_0 + 2147483399)
//│ 		            else
//│ 		              s2'_0) in
//│ 		              (let rec z_0 = (s1''_0 - s2''_0) in
//│ 		                (if (z_0 < 1) then
//│ 		                  (lazy (`LH_C((z_0 + 2147483562), ((rands_lh__d1 s1''_0) s2''_0))))
//│ 		                else
//│ 		                  (lazy (`LH_C(z_0, ((rands_lh__d1 s1''_0) s2''_0))))))))))));;
//│ 		let rec randomInts_lh__d1 _lh_randomInts_arg1_0 _lh_randomInts_arg2_0 =
//│ 		  (if ((1 <= _lh_randomInts_arg1_0) && (_lh_randomInts_arg1_0 <= 2147483562)) then
//│ 		    (if ((1 <= _lh_randomInts_arg2_0) && (_lh_randomInts_arg2_0 <= 2147483398)) then
//│ 		      ((rands_lh__d1 _lh_randomInts_arg1_0) _lh_randomInts_arg2_0)
//│ 		    else
//│ 		      ((failwith "error") (`LH_C('r', (`LH_C('a', (`LH_C('n', (`LH_C('d', (`LH_C('o', (`LH_C('m', (`LH_C('I', (`LH_C('n', (`LH_C('t', (`LH_C('s', (`LH_C(':', (`LH_C(' ', (`LH_C('B', (`LH_C('a', (`LH_C('d', (`LH_C(' ', (`LH_C('s', (`LH_C('e', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('d', (`LH_C(' ', (`LH_C('s', (`LH_C('e', (`LH_C('e', (`LH_C('d', (`LH_C('.', (`LH_N)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
//│ 		  else
//│ 		    ((failwith "error") (`LH_C('r', (`LH_C('a', (`LH_C('n', (`LH_C('d', (`LH_C('o', (`LH_C('m', (`LH_C('I', (`LH_C('n', (`LH_C('t', (`LH_C('s', (`LH_C(':', (`LH_C(' ', (`LH_C('B', (`LH_C('a', (`LH_C('d', (`LH_C(' ', (`LH_C('f', (`LH_C('i', (`LH_C('r', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('s', (`LH_C('e', (`LH_C('e', (`LH_C('d', (`LH_C('.', (`LH_N)))))))))))))))))))))))))))))))))))))))))))))))))))))))));;
//│ 		let rec process_lh__d1 _lh_process_arg1_0 =
//│ 		  ((doInput_lh__d1 ((randomInts_lh__d1 111) 47)) _lh_process_arg1_0);;
//│ 		let rec testPrimetest_nofib_lh__d1 _lh_testPrimetest_nofib_arg1_0 =
//│ 		  (let rec cts_0 = (`LH_C('2', (`LH_C('4', (`LH_C('|', (`LH_C('4', (`LH_C('8', (`LH_C('|', (`LH_C('4', (`LH_C('7', (`LH_C('|', (`LH_C('1', (`LH_C('3', (`LH_C('1', (`LH_C('7', (`LH_C('|', (`LH_C('8', (`LH_C('9', (`LH_C('0', (`LH_C('1', (`LH_N))))))))))))))))))))))))))))))))))))) in
//│ 		    (process_lh__d1 (lines_lh__d1 cts_0)));;
//│ 		(testPrimetest_nofib_lh__d1 0)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f⁰(h⁰) map_lh_₃(f⁰, t⁰)]: 10 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_N]: 11 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C f¹(h¹) map_lh_₂(f¹, t¹)]: 24 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_N]: 25 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C f²(h²) map_lh_₁(f², t²)]: 38 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_N]: 39 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_P2 div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)]: 53 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_chop_LH_P2_0⁰ _lh_chop_LH_P2_1⁰ => if (n¹ == 0) then a⁰ else chop'⁰([LH_C _lh_chop_LH_P2_1⁰ a⁰], _lh_chop_LH_P2_0⁰) | _  => error⁰}: 289
//│ [LH_C h⁴ take_lz_lh_₂((n⁰ - 1), t⁴)]: 91 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₃(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₂(f¹, t¹)] | LH_N  => [LH_N]}: 26
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map_lh_₁(f², t²)] | LH_N  => [LH_N]}: 40
//│ 	case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}: 184
//│ 	case _lh_uniform_LH_C_1¹ of {LH_N  => [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]] | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}}: 185
//│ 	case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0³ _lh_uniform_LH_C_1³ => let t⁶ = (_lh_uniform_LH_C_0³ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁶ == _lh_uniform_LH_C_0⁰) then [LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)] else [LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)] | _  => error⁰}: 223
//│ 	case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0¹ _lh_uniform_LH_C_1¹ => case _lh_uniform_LH_C_1¹ of {LH_N  => [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]] | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}} | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0³ _lh_uniform_LH_C_1³ => let t⁶ = (_lh_uniform_LH_C_0³ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁶ == _lh_uniform_LH_C_0⁰) then [LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)] else [LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)] | _  => error⁰}}: 224
//│ 	case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0⁴ _lh_uniform_LH_C_1⁴ => let t⁷ = (_lh_uniform_LH_C_0⁴ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁷ == _lh_uniform_LH_C_0⁰) then [LH_C t⁷ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1⁴)] else [LH_C t⁷ map_lh_₃((fun x² -> (x² % 65536)), _lh_uniform_LH_C_1⁴)] | _  => error⁰}: 262
//│ [LH_N]: 92 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₃(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₂(f¹, t¹)] | LH_N  => [LH_N]}: 26
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map_lh_₁(f², t²)] | LH_N  => [LH_N]}: 40
//│ 	case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}: 184
//│ 	case _lh_uniform_LH_C_1¹ of {LH_N  => [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]] | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}}: 185
//│ 	case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0³ _lh_uniform_LH_C_1³ => let t⁶ = (_lh_uniform_LH_C_0³ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁶ == _lh_uniform_LH_C_0⁰) then [LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)] else [LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)] | _  => error⁰}: 223
//│ 	case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0¹ _lh_uniform_LH_C_1¹ => case _lh_uniform_LH_C_1¹ of {LH_N  => [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]] | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}} | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0³ _lh_uniform_LH_C_1³ => let t⁶ = (_lh_uniform_LH_C_0³ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁶ == _lh_uniform_LH_C_0⁰) then [LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)] else [LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)] | _  => error⁰}}: 224
//│ 	case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0⁴ _lh_uniform_LH_C_1⁴ => let t⁷ = (_lh_uniform_LH_C_0⁴ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁷ == _lh_uniform_LH_C_0⁰) then [LH_C t⁷ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1⁴)] else [LH_C t⁷ map_lh_₃((fun x² -> (x² % 65536)), _lh_uniform_LH_C_1⁴)] | _  => error⁰}: 262
//│ [LH_N]: 94 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₃(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ 	case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₂(f¹, t¹)] | LH_N  => [LH_N]}: 26
//│ 	case ls² of {LH_C h² t² => [LH_C f²(h²) map_lh_₁(f², t²)] | LH_N  => [LH_N]}: 40
//│ 	case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}: 184
//│ 	case _lh_uniform_LH_C_1¹ of {LH_N  => [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]] | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}}: 185
//│ 	case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0³ _lh_uniform_LH_C_1³ => let t⁶ = (_lh_uniform_LH_C_0³ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁶ == _lh_uniform_LH_C_0⁰) then [LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)] else [LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)] | _  => error⁰}: 223
//│ 	case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0¹ _lh_uniform_LH_C_1¹ => case _lh_uniform_LH_C_1¹ of {LH_N  => [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]] | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}} | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0³ _lh_uniform_LH_C_1³ => let t⁶ = (_lh_uniform_LH_C_0³ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁶ == _lh_uniform_LH_C_0⁰) then [LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)] else [LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)] | _  => error⁰}}: 224
//│ 	case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0⁴ _lh_uniform_LH_C_1⁴ => let t⁷ = (_lh_uniform_LH_C_0⁴ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁷ == _lh_uniform_LH_C_0⁰) then [LH_C t⁷ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1⁴)] else [LH_C t⁷ map_lh_₃((fun x² -> (x² % 65536)), _lh_uniform_LH_C_1⁴)] | _  => error⁰}: 262
//│ [LH_N]: 103 --->
//│ 	case force⁰(ls⁴) of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lz_lh_₂((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 93
//│ 	case _lh_matchIdent⁰ of {LH_N  => lazy⁰([LH_N]) | LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => if (_lh_drop_lz_arg1⁰ > 0) then drop_lz_lh_₁((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰) else _lh_drop_lz_LH_C_1⁰ | _  => error⁰}: 122
//│ [LH_N]: 145 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]]: 146 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)]: 168 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)]: 180 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)]: 207 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)]: 219 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C t⁷ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1⁴)]: 246 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C t⁷ map_lh_₃((fun x² -> (x² % 65536)), _lh_uniform_LH_C_1⁴)]: 258 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C _lh_chop_LH_P2_1⁰ a⁰]: 283 --->
//│ 	case _lh_uniform_LH_C_1⁰ of {LH_N  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0¹ _lh_uniform_LH_C_1¹ => case _lh_uniform_LH_C_1¹ of {LH_N  => [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]] | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}} | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0³ _lh_uniform_LH_C_1³ => let t⁶ = (_lh_uniform_LH_C_0³ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁶ == _lh_uniform_LH_C_0⁰) then [LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)] else [LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)] | _  => error⁰}} | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0⁴ _lh_uniform_LH_C_1⁴ => let t⁷ = (_lh_uniform_LH_C_0⁴ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁷ == _lh_uniform_LH_C_0⁰) then [LH_C t⁷ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1⁴)] else [LH_C t⁷ map_lh_₃((fun x² -> (x² % 65536)), _lh_uniform_LH_C_1⁴)] | _  => error⁰}}: 263
//│ 	case _lh_uniform_arg1⁰ of {LH_C _lh_uniform_LH_C_0⁰ _lh_uniform_LH_C_1⁰ => case _lh_uniform_LH_C_1⁰ of {LH_N  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0¹ _lh_uniform_LH_C_1¹ => case _lh_uniform_LH_C_1¹ of {LH_N  => [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]] | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}} | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0³ _lh_uniform_LH_C_1³ => let t⁶ = (_lh_uniform_LH_C_0³ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁶ == _lh_uniform_LH_C_0⁰) then [LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)] else [LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)] | _  => error⁰}} | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0⁴ _lh_uniform_LH_C_1⁴ => let t⁷ = (_lh_uniform_LH_C_0⁴ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁷ == _lh_uniform_LH_C_0⁰) then [LH_C t⁷ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1⁴)] else [LH_C t⁷ map_lh_₃((fun x² -> (x² % 65536)), _lh_uniform_LH_C_1⁴)] | _  => error⁰}} | _  => error⁰}: 265
//│ 	case ls⁵ of {LH_C h⁵ t⁸ => (1 + length_lh_₁(t⁸)) | LH_N  => 0}: 307
//│ [LH_N]: 294 --->
//│ 	case _lh_uniform_LH_C_1⁰ of {LH_N  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0¹ _lh_uniform_LH_C_1¹ => case _lh_uniform_LH_C_1¹ of {LH_N  => [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]] | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}} | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0³ _lh_uniform_LH_C_1³ => let t⁶ = (_lh_uniform_LH_C_0³ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁶ == _lh_uniform_LH_C_0⁰) then [LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)] else [LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)] | _  => error⁰}} | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0⁴ _lh_uniform_LH_C_1⁴ => let t⁷ = (_lh_uniform_LH_C_0⁴ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁷ == _lh_uniform_LH_C_0⁰) then [LH_C t⁷ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1⁴)] else [LH_C t⁷ map_lh_₃((fun x² -> (x² % 65536)), _lh_uniform_LH_C_1⁴)] | _  => error⁰}}: 263
//│ 	case _lh_uniform_arg1⁰ of {LH_C _lh_uniform_LH_C_0⁰ _lh_uniform_LH_C_1⁰ => case _lh_uniform_LH_C_1⁰ of {LH_N  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0¹ _lh_uniform_LH_C_1¹ => case _lh_uniform_LH_C_1¹ of {LH_N  => [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]] | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}} | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0³ _lh_uniform_LH_C_1³ => let t⁶ = (_lh_uniform_LH_C_0³ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁶ == _lh_uniform_LH_C_0⁰) then [LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)] else [LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)] | _  => error⁰}} | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0⁴ _lh_uniform_LH_C_1⁴ => let t⁷ = (_lh_uniform_LH_C_0⁴ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁷ == _lh_uniform_LH_C_0⁰) then [LH_C t⁷ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1⁴)] else [LH_C t⁷ map_lh_₃((fun x² -> (x² % 65536)), _lh_uniform_LH_C_1⁴)] | _  => error⁰}} | _  => error⁰}: 265
//│ 	case ls⁵ of {LH_C h⁵ t⁸ => (1 + length_lh_₁(t⁸)) | LH_N  => 0}: 307
//│ [LH_P2 take_lz_lh_₂(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) drop_lz_lh_₁(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)]: 335 --->
//│ 	case _lh_matchIdent² of {LH_P2 _lh_random_LH_P2_0⁰ _lh_random_LH_P2_1⁰ => [LH_P2 makeNumber_lh_₁(65536, uniform_lh_₁(ns⁰, _lh_random_LH_P2_0⁰)) _lh_random_LH_P2_1⁰] | _  => error⁰}: 496
//│ [LH_C h⁶ take_lz_lh_₁((n² - 1), t⁹)]: 356 --->
//│ 	case _lh_matchIdent³ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0⁰ _lh_singleTestX_LH_C_1⁰ => if (_lh_singleTestX_LH_C_0⁰ == (_lh_singleTestX_arg1⁰ - 1)) then [True] else if (_lh_singleTestX_LH_C_0⁰ == 1) then [False] else witness⁰(_lh_singleTestX_LH_C_1⁰) | _  => error⁰}: 537
//│ 	case _lh_matchIdent⁴ of {LH_C _lh_singleTestX_LH_C_0¹ _lh_singleTestX_LH_C_1¹ => (((_lh_singleTestX_LH_C_0¹ == 1) || (_lh_singleTestX_LH_C_0¹ == (_lh_singleTestX_arg1⁰ - 1))) || witness⁰(_lh_singleTestX_LH_C_1¹)) | _  => error⁰}: 580
//│ [LH_N]: 357 --->
//│ 	case _lh_matchIdent³ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0⁰ _lh_singleTestX_LH_C_1⁰ => if (_lh_singleTestX_LH_C_0⁰ == (_lh_singleTestX_arg1⁰ - 1)) then [True] else if (_lh_singleTestX_LH_C_0⁰ == 1) then [False] else witness⁰(_lh_singleTestX_LH_C_1⁰) | _  => error⁰}: 537
//│ 	case _lh_matchIdent⁴ of {LH_C _lh_singleTestX_LH_C_0¹ _lh_singleTestX_LH_C_1¹ => (((_lh_singleTestX_LH_C_0¹ == 1) || (_lh_singleTestX_LH_C_0¹ == (_lh_singleTestX_arg1⁰ - 1))) || witness⁰(_lh_singleTestX_LH_C_1¹)) | _  => error⁰}: 580
//│ [LH_N]: 359 --->
//│ 	case _lh_matchIdent³ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0⁰ _lh_singleTestX_LH_C_1⁰ => if (_lh_singleTestX_LH_C_0⁰ == (_lh_singleTestX_arg1⁰ - 1)) then [True] else if (_lh_singleTestX_LH_C_0⁰ == 1) then [False] else witness⁰(_lh_singleTestX_LH_C_1⁰) | _  => error⁰}: 537
//│ 	case _lh_matchIdent⁴ of {LH_C _lh_singleTestX_LH_C_0¹ _lh_singleTestX_LH_C_1¹ => (((_lh_singleTestX_LH_C_0¹ == 1) || (_lh_singleTestX_LH_C_0¹ == (_lh_singleTestX_arg1⁰ - 1))) || witness⁰(_lh_singleTestX_LH_C_1¹)) | _  => error⁰}: 580
//│ [LH_C x⁴ iterate_lh_₁(f⁴, f⁴(x⁴))]: 372 --->
//│ 	case force⁰(ls⁶) of {LH_C h⁶ t⁹ => [LH_C h⁶ take_lz_lh_₁((n² - 1), t⁹)] | LH_N  => [LH_N]}: 358
//│ [LH_P2 div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹) (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)]: 468 --->
//│ 	case _lh_matchIdent⁵ of {LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => if (_lh_f_LH_P2_1¹ == 0) then f⁶([LH_P2 (_lh_f_LH_P2_0⁰ + 1) _lh_f_LH_P2_0¹]) else [LH_P2 _lh_f_LH_P2_0⁰ _lh_f_LH_P2_1⁰] | _  => error⁰}: 623
//│ [LH_P2 makeNumber_lh_₁(65536, uniform_lh_₁(ns⁰, _lh_random_LH_P2_0⁰)) _lh_random_LH_P2_1⁰]: 494 --->
//│ 	case _lh_matchIdent⁶ of {LH_P2 _lh_singleTest_LH_P2_0⁰ _lh_singleTest_LH_P2_1⁰ => [LH_P2 singleTestX_lh_₁(_lh_singleTest_arg1⁰, _lh_singleTest_arg2⁰, (2 + _lh_singleTest_LH_P2_0⁰)) _lh_singleTest_LH_P2_1⁰] | _  => error⁰}: 673
//│ [LH_P2 (_lh_f_LH_P2_0⁰ + 1) _lh_f_LH_P2_0¹]: 616 --->
//│ 	case _lh_f_arg1⁰ of {LH_P2 _lh_f_LH_P2_0⁰ _lh_f_LH_P2_1⁰ => let _lh_matchIdent⁵ = divmod_lh_₁(_lh_f_LH_P2_1⁰, 2)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => if (_lh_f_LH_P2_1¹ == 0) then f⁶([LH_P2 (_lh_f_LH_P2_0⁰ + 1) _lh_f_LH_P2_0¹]) else [LH_P2 _lh_f_LH_P2_0⁰ _lh_f_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 626
//│ [LH_P2 _lh_f_LH_P2_0⁰ _lh_f_LH_P2_1⁰]: 620 --->
//│ 	case _lh_singleTestX_arg2⁰ of {LH_P2 _lh_singleTestX_LH_P2_0⁰ _lh_singleTestX_LH_P2_1⁰ => let square⁰ = (fun x⁵ -> ((x⁵ * x⁵) % _lh_singleTestX_arg1⁰))
//│ in let witness⁰ = (fun ls⁷ -> let _lh_matchIdent³ = ls⁷
//│ in case _lh_matchIdent³ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0⁰ _lh_singleTestX_LH_C_1⁰ => if (_lh_singleTestX_LH_C_0⁰ == (_lh_singleTestX_arg1⁰ - 1)) then [True] else if (_lh_singleTestX_LH_C_0⁰ == 1) then [False] else witness⁰(_lh_singleTestX_LH_C_1⁰) | _  => error⁰})
//│ in let _lh_matchIdent⁴ = take_lz_lh_₁(_lh_singleTestX_LH_P2_0⁰, iterate_lh_₁(square⁰, powerMod_lh_₁(_lh_singleTestX_arg3⁰, _lh_singleTestX_LH_P2_1⁰, _lh_singleTestX_arg1⁰)))
//│ in case _lh_matchIdent⁴ of {LH_C _lh_singleTestX_LH_C_0¹ _lh_singleTestX_LH_C_1¹ => (((_lh_singleTestX_LH_C_0¹ == 1) || (_lh_singleTestX_LH_C_0¹ == (_lh_singleTestX_arg1⁰ - 1))) || witness⁰(_lh_singleTestX_LH_C_1¹)) | _  => error⁰} | _  => error⁰}: 585
//│ [LH_P2 0 (_lh_findKQ_arg1⁰ - 1)]: 635 --->
//│ 	case _lh_f_arg1⁰ of {LH_P2 _lh_f_LH_P2_0⁰ _lh_f_LH_P2_1⁰ => let _lh_matchIdent⁵ = divmod_lh_₁(_lh_f_LH_P2_1⁰, 2)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => if (_lh_f_LH_P2_1¹ == 0) then f⁶([LH_P2 (_lh_f_LH_P2_0⁰ + 1) _lh_f_LH_P2_0¹]) else [LH_P2 _lh_f_LH_P2_0⁰ _lh_f_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 626
//│ [LH_P2 singleTestX_lh_₁(_lh_singleTest_arg1⁰, _lh_singleTest_arg2⁰, (2 + _lh_singleTest_LH_P2_0⁰)) _lh_singleTest_LH_P2_1⁰]: 671 --->
//│ 	case _lh_matchIdent⁷ of {LH_P2 _lh_multiTest_LH_P2_0⁰ _lh_multiTest_LH_P2_1⁰ => if _lh_multiTest_LH_P2_0⁰ then mTest⁰((k⁰ - 1), _lh_multiTest_LH_P2_1⁰) else [LH_P2 [False] _lh_multiTest_LH_P2_1⁰] | _  => error⁰}: 739
//│ [LH_P2 [True] rs⁰]: 713 --->
//│ 	case _lh_matchIdent⁸ of {LH_P2 _lh_doLine_LH_P2_0⁰ _lh_doLine_LH_P2_1⁰ => if _lh_doLine_LH_P2_0⁰ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] | _  => error⁰}: 960
//│ [LH_P2 [False] _lh_multiTest_LH_P2_1⁰]: 736 --->
//│ 	case _lh_matchIdent⁸ of {LH_P2 _lh_doLine_LH_P2_0⁰ _lh_doLine_LH_P2_1⁰ => if _lh_doLine_LH_P2_0⁰ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] | _  => error⁰}: 960
//│ [LH_P2 (_lh_multiTest_arg3⁰ == 2) _lh_multiTest_arg2⁰]: 761 --->
//│ 	case _lh_matchIdent⁸ of {LH_P2 _lh_doLine_LH_P2_0⁰ _lh_doLine_LH_P2_1⁰ => if _lh_doLine_LH_P2_0⁰ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] | _  => error⁰}: 960
//│ [LH_C (z⁰ + 2147483562) rands_lh_₁(s1''⁰, s2''⁰)]: 869 --->
//│ 	case force⁰(ls⁴) of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lz_lh_₂((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 93
//│ 	case _lh_matchIdent⁰ of {LH_N  => lazy⁰([LH_N]) | LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => if (_lh_drop_lz_arg1⁰ > 0) then drop_lz_lh_₁((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰) else _lh_drop_lz_LH_C_1⁰ | _  => error⁰}: 122
//│ [LH_C z⁰ rands_lh_₁(s1''⁰, s2''⁰)]: 878 --->
//│ 	case force⁰(ls⁴) of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lz_lh_₂((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 93
//│ 	case _lh_matchIdent⁰ of {LH_N  => lazy⁰([LH_N]) | LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => if (_lh_drop_lz_arg1⁰ > 0) then drop_lz_lh_₁((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰) else _lh_drop_lz_LH_C_1⁰ | _  => error⁰}: 122
//│ [LH_N]: 967 --->
//│ 	case _lh_f_arg1¹ of {LH_N  => _lh_f_arg2⁰ | LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰ => f⁷(_lh_f_LH_C_1⁰, ((10 * _lh_f_arg2⁰) + int_val_of_char_lh_₁(_lh_f_LH_C_0⁰))) | _  => error⁰}: 696
//│ [LH_N]: 968 --->
//│ 	case _lh_matchIdent¹¹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1185
//│ [LH_P2 [LH_N] [LH_N]]: 969 --->
//│ 	case _lh_matchIdent⁹ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰}: 990
//│ 	case _lh_matchIdent¹⁰ of {LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent¹¹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent¹¹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}] | _  => error⁰}: 1189
//│ [LH_N]: 973 --->
//│ 	case _lh_f_arg1¹ of {LH_N  => _lh_f_arg2⁰ | LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰ => f⁷(_lh_f_LH_C_1⁰, ((10 * _lh_f_arg2⁰) + int_val_of_char_lh_₁(_lh_f_LH_C_0⁰))) | _  => error⁰}: 696
//│ [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]: 976 --->
//│ 	case _lh_matchIdent¹¹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1185
//│ [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]]: 977 --->
//│ 	case _lh_matchIdent⁹ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰}: 990
//│ 	case _lh_matchIdent¹⁰ of {LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent¹¹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent¹¹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}] | _  => error⁰}: 1189
//│ [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 986 --->
//│ 	case _lh_f_arg1¹ of {LH_N  => _lh_f_arg2⁰ | LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰ => f⁷(_lh_f_LH_C_1⁰, ((10 * _lh_f_arg2⁰) + int_val_of_char_lh_₁(_lh_f_LH_C_0⁰))) | _  => error⁰}: 696
//│ [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]: 988 --->
//│ 	case _lh_matchIdent⁹ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰}: 990
//│ 	case _lh_matchIdent¹⁰ of {LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent¹¹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent¹¹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}] | _  => error⁰}: 1189
//│ [LH_N]: 1180 --->
//│ 	case _lh_doInput_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_doInput_LH_C_0⁰ _lh_doInput_LH_C_1⁰ => doLine_lh_₁(_lh_doInput_LH_C_0⁰, (fun state⁰ -> doInput_lh_₁(state⁰, _lh_doInput_LH_C_1⁰)), _lh_doInput_arg1⁰) | _  => error⁰}: 1163
//│ [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent¹¹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent¹¹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}]: 1187 --->
//│ 	case _lh_doInput_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_doInput_LH_C_0⁰ _lh_doInput_LH_C_1⁰ => doLine_lh_₁(_lh_doInput_LH_C_0⁰, (fun state⁰ -> doInput_lh_₁(state⁰, _lh_doInput_LH_C_1⁰)), _lh_doInput_arg1⁰) | _  => error⁰}: 1163
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₃(f⁰, t⁰)] | LH_N  => [LH_N]}: 12 --->
//│ 	[LH_C h⁴ take_lz_lh_₂((n⁰ - 1), t⁴)]: 91
//│ 	[LH_N]: 92
//│ 	[LH_N]: 94
//│ case ls¹ of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₂(f¹, t¹)] | LH_N  => [LH_N]}: 26 --->
//│ 	[LH_C h⁴ take_lz_lh_₂((n⁰ - 1), t⁴)]: 91
//│ 	[LH_N]: 92
//│ 	[LH_N]: 94
//│ case ls² of {LH_C h² t² => [LH_C f²(h²) map_lh_₁(f², t²)] | LH_N  => [LH_N]}: 40 --->
//│ 	[LH_C h⁴ take_lz_lh_₂((n⁰ - 1), t⁴)]: 91
//│ 	[LH_N]: 92
//│ 	[LH_N]: 94
//│ case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69 --->
//│ 	[LH_C f⁰(h⁰) map_lh_₃(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C f¹(h¹) map_lh_₂(f¹, t¹)]: 24
//│ 	[LH_N]: 25
//│ 	[LH_C f²(h²) map_lh_₁(f², t²)]: 38
//│ 	[LH_N]: 39
//│ 	[LH_N]: 145
//│ 	[LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]]: 146
//│ 	[LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)]: 168
//│ 	[LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)]: 180
//│ 	[LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)]: 207
//│ 	[LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)]: 219
//│ 	[LH_C t⁷ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1⁴)]: 246
//│ 	[LH_C t⁷ map_lh_₃((fun x² -> (x² % 65536)), _lh_uniform_LH_C_1⁴)]: 258
//│ case force⁰(ls⁴) of {LH_C h⁴ t⁴ => [LH_C h⁴ take_lz_lh_₂((n⁰ - 1), t⁴)] | LH_N  => [LH_N]}: 93 --->
//│ 	DeadCodeProd
//│ 	[LH_N]: 103
//│ 	[LH_C (z⁰ + 2147483562) rands_lh_₁(s1''⁰, s2''⁰)]: 869
//│ 	[LH_C z⁰ rands_lh_₁(s1''⁰, s2''⁰)]: 878
//│ case _lh_matchIdent⁰ of {LH_N  => lazy⁰([LH_N]) | LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => if (_lh_drop_lz_arg1⁰ > 0) then drop_lz_lh_₁((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰) else _lh_drop_lz_LH_C_1⁰ | _  => error⁰}: 122 --->
//│ 	DeadCodeProd
//│ 	[LH_N]: 103
//│ 	[LH_C (z⁰ + 2147483562) rands_lh_₁(s1''⁰, s2''⁰)]: 869
//│ 	[LH_C z⁰ rands_lh_₁(s1''⁰, s2''⁰)]: 878
//│ case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}: 184 --->
//│ 	[LH_C h⁴ take_lz_lh_₂((n⁰ - 1), t⁴)]: 91
//│ 	[LH_N]: 92
//│ 	[LH_N]: 94
//│ case _lh_uniform_LH_C_1¹ of {LH_N  => [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]] | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}}: 185 --->
//│ 	[LH_C h⁴ take_lz_lh_₂((n⁰ - 1), t⁴)]: 91
//│ 	[LH_N]: 92
//│ 	[LH_N]: 94
//│ case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0³ _lh_uniform_LH_C_1³ => let t⁶ = (_lh_uniform_LH_C_0³ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁶ == _lh_uniform_LH_C_0⁰) then [LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)] else [LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)] | _  => error⁰}: 223 --->
//│ 	[LH_C h⁴ take_lz_lh_₂((n⁰ - 1), t⁴)]: 91
//│ 	[LH_N]: 92
//│ 	[LH_N]: 94
//│ case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0¹ _lh_uniform_LH_C_1¹ => case _lh_uniform_LH_C_1¹ of {LH_N  => [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]] | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}} | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0³ _lh_uniform_LH_C_1³ => let t⁶ = (_lh_uniform_LH_C_0³ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁶ == _lh_uniform_LH_C_0⁰) then [LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)] else [LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)] | _  => error⁰}}: 224 --->
//│ 	[LH_C h⁴ take_lz_lh_₂((n⁰ - 1), t⁴)]: 91
//│ 	[LH_N]: 92
//│ 	[LH_N]: 94
//│ case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0⁴ _lh_uniform_LH_C_1⁴ => let t⁷ = (_lh_uniform_LH_C_0⁴ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁷ == _lh_uniform_LH_C_0⁰) then [LH_C t⁷ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1⁴)] else [LH_C t⁷ map_lh_₃((fun x² -> (x² % 65536)), _lh_uniform_LH_C_1⁴)] | _  => error⁰}: 262 --->
//│ 	[LH_C h⁴ take_lz_lh_₂((n⁰ - 1), t⁴)]: 91
//│ 	[LH_N]: 92
//│ 	[LH_N]: 94
//│ case _lh_uniform_LH_C_1⁰ of {LH_N  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0¹ _lh_uniform_LH_C_1¹ => case _lh_uniform_LH_C_1¹ of {LH_N  => [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]] | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}} | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0³ _lh_uniform_LH_C_1³ => let t⁶ = (_lh_uniform_LH_C_0³ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁶ == _lh_uniform_LH_C_0⁰) then [LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)] else [LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)] | _  => error⁰}} | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0⁴ _lh_uniform_LH_C_1⁴ => let t⁷ = (_lh_uniform_LH_C_0⁴ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁷ == _lh_uniform_LH_C_0⁰) then [LH_C t⁷ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1⁴)] else [LH_C t⁷ map_lh_₃((fun x² -> (x² % 65536)), _lh_uniform_LH_C_1⁴)] | _  => error⁰}}: 263 --->
//│ 	[LH_C _lh_chop_LH_P2_1⁰ a⁰]: 283
//│ 	[LH_N]: 294
//│ case _lh_uniform_arg1⁰ of {LH_C _lh_uniform_LH_C_0⁰ _lh_uniform_LH_C_1⁰ => case _lh_uniform_LH_C_1⁰ of {LH_N  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0¹ _lh_uniform_LH_C_1¹ => case _lh_uniform_LH_C_1¹ of {LH_N  => [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]] | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => let t⁵ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁵ == _lh_uniform_LH_C_0⁰) then [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)] else [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)] | _  => error⁰}} | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0³ _lh_uniform_LH_C_1³ => let t⁶ = (_lh_uniform_LH_C_0³ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁶ == _lh_uniform_LH_C_0⁰) then [LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)] else [LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)] | _  => error⁰}} | _  => case _lh_uniform_arg2⁰ of {LH_C _lh_uniform_LH_C_0⁴ _lh_uniform_LH_C_1⁴ => let t⁷ = (_lh_uniform_LH_C_0⁴ % (_lh_uniform_LH_C_0⁰ + 1))
//│ in if (t⁷ == _lh_uniform_LH_C_0⁰) then [LH_C t⁷ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1⁴)] else [LH_C t⁷ map_lh_₃((fun x² -> (x² % 65536)), _lh_uniform_LH_C_1⁴)] | _  => error⁰}} | _  => error⁰}: 265 --->
//│ 	[LH_C _lh_chop_LH_P2_1⁰ a⁰]: 283
//│ 	[LH_N]: 294
//│ case _lh_matchIdent¹ of {LH_P2 _lh_chop_LH_P2_0⁰ _lh_chop_LH_P2_1⁰ => if (n¹ == 0) then a⁰ else chop'⁰([LH_C _lh_chop_LH_P2_1⁰ a⁰], _lh_chop_LH_P2_0⁰) | _  => error⁰}: 289 --->
//│ 	[LH_P2 div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)]: 53
//│ case ls⁵ of {LH_C h⁵ t⁸ => (1 + length_lh_₁(t⁸)) | LH_N  => 0}: 307 --->
//│ 	[LH_C _lh_chop_LH_P2_1⁰ a⁰]: 283
//│ 	[LH_N]: 294
//│ case force⁰(ls⁶) of {LH_C h⁶ t⁹ => [LH_C h⁶ take_lz_lh_₁((n² - 1), t⁹)] | LH_N  => [LH_N]}: 358 --->
//│ 	[LH_C x⁴ iterate_lh_₁(f⁴, f⁴(x⁴))]: 372
//│ case _lh_matchIdent² of {LH_P2 _lh_random_LH_P2_0⁰ _lh_random_LH_P2_1⁰ => [LH_P2 makeNumber_lh_₁(65536, uniform_lh_₁(ns⁰, _lh_random_LH_P2_0⁰)) _lh_random_LH_P2_1⁰] | _  => error⁰}: 496 --->
//│ 	[LH_P2 take_lz_lh_₂(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) drop_lz_lh_₁(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)]: 335
//│ case _lh_matchIdent³ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0⁰ _lh_singleTestX_LH_C_1⁰ => if (_lh_singleTestX_LH_C_0⁰ == (_lh_singleTestX_arg1⁰ - 1)) then [True] else if (_lh_singleTestX_LH_C_0⁰ == 1) then [False] else witness⁰(_lh_singleTestX_LH_C_1⁰) | _  => error⁰}: 537 --->
//│ 	[LH_C h⁶ take_lz_lh_₁((n² - 1), t⁹)]: 356
//│ 	[LH_N]: 357
//│ 	[LH_N]: 359
//│ case _lh_matchIdent⁴ of {LH_C _lh_singleTestX_LH_C_0¹ _lh_singleTestX_LH_C_1¹ => (((_lh_singleTestX_LH_C_0¹ == 1) || (_lh_singleTestX_LH_C_0¹ == (_lh_singleTestX_arg1⁰ - 1))) || witness⁰(_lh_singleTestX_LH_C_1¹)) | _  => error⁰}: 580 --->
//│ 	[LH_C h⁶ take_lz_lh_₁((n² - 1), t⁹)]: 356
//│ 	[LH_N]: 357
//│ 	[LH_N]: 359
//│ case _lh_singleTestX_arg2⁰ of {LH_P2 _lh_singleTestX_LH_P2_0⁰ _lh_singleTestX_LH_P2_1⁰ => let square⁰ = (fun x⁵ -> ((x⁵ * x⁵) % _lh_singleTestX_arg1⁰))
//│ in let witness⁰ = (fun ls⁷ -> let _lh_matchIdent³ = ls⁷
//│ in case _lh_matchIdent³ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0⁰ _lh_singleTestX_LH_C_1⁰ => if (_lh_singleTestX_LH_C_0⁰ == (_lh_singleTestX_arg1⁰ - 1)) then [True] else if (_lh_singleTestX_LH_C_0⁰ == 1) then [False] else witness⁰(_lh_singleTestX_LH_C_1⁰) | _  => error⁰})
//│ in let _lh_matchIdent⁴ = take_lz_lh_₁(_lh_singleTestX_LH_P2_0⁰, iterate_lh_₁(square⁰, powerMod_lh_₁(_lh_singleTestX_arg3⁰, _lh_singleTestX_LH_P2_1⁰, _lh_singleTestX_arg1⁰)))
//│ in case _lh_matchIdent⁴ of {LH_C _lh_singleTestX_LH_C_0¹ _lh_singleTestX_LH_C_1¹ => (((_lh_singleTestX_LH_C_0¹ == 1) || (_lh_singleTestX_LH_C_0¹ == (_lh_singleTestX_arg1⁰ - 1))) || witness⁰(_lh_singleTestX_LH_C_1¹)) | _  => error⁰} | _  => error⁰}: 585 --->
//│ 	[LH_P2 _lh_f_LH_P2_0⁰ _lh_f_LH_P2_1⁰]: 620
//│ case _lh_matchIdent⁵ of {LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => if (_lh_f_LH_P2_1¹ == 0) then f⁶([LH_P2 (_lh_f_LH_P2_0⁰ + 1) _lh_f_LH_P2_0¹]) else [LH_P2 _lh_f_LH_P2_0⁰ _lh_f_LH_P2_1⁰] | _  => error⁰}: 623 --->
//│ 	[LH_P2 div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹) (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)]: 468
//│ case _lh_f_arg1⁰ of {LH_P2 _lh_f_LH_P2_0⁰ _lh_f_LH_P2_1⁰ => let _lh_matchIdent⁵ = divmod_lh_₁(_lh_f_LH_P2_1⁰, 2)
//│ in case _lh_matchIdent⁵ of {LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => if (_lh_f_LH_P2_1¹ == 0) then f⁶([LH_P2 (_lh_f_LH_P2_0⁰ + 1) _lh_f_LH_P2_0¹]) else [LH_P2 _lh_f_LH_P2_0⁰ _lh_f_LH_P2_1⁰] | _  => error⁰} | _  => error⁰}: 626 --->
//│ 	[LH_P2 (_lh_f_LH_P2_0⁰ + 1) _lh_f_LH_P2_0¹]: 616
//│ 	[LH_P2 0 (_lh_findKQ_arg1⁰ - 1)]: 635
//│ case _lh_matchIdent⁶ of {LH_P2 _lh_singleTest_LH_P2_0⁰ _lh_singleTest_LH_P2_1⁰ => [LH_P2 singleTestX_lh_₁(_lh_singleTest_arg1⁰, _lh_singleTest_arg2⁰, (2 + _lh_singleTest_LH_P2_0⁰)) _lh_singleTest_LH_P2_1⁰] | _  => error⁰}: 673 --->
//│ 	[LH_P2 makeNumber_lh_₁(65536, uniform_lh_₁(ns⁰, _lh_random_LH_P2_0⁰)) _lh_random_LH_P2_1⁰]: 494
//│ case _lh_f_arg1¹ of {LH_N  => _lh_f_arg2⁰ | LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰ => f⁷(_lh_f_LH_C_1⁰, ((10 * _lh_f_arg2⁰) + int_val_of_char_lh_₁(_lh_f_LH_C_0⁰))) | _  => error⁰}: 696 --->
//│ 	[LH_N]: 967
//│ 	[LH_N]: 973
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 986
//│ case _lh_matchIdent⁷ of {LH_P2 _lh_multiTest_LH_P2_0⁰ _lh_multiTest_LH_P2_1⁰ => if _lh_multiTest_LH_P2_0⁰ then mTest⁰((k⁰ - 1), _lh_multiTest_LH_P2_1⁰) else [LH_P2 [False] _lh_multiTest_LH_P2_1⁰] | _  => error⁰}: 739 --->
//│ 	[LH_P2 singleTestX_lh_₁(_lh_singleTest_arg1⁰, _lh_singleTest_arg2⁰, (2 + _lh_singleTest_LH_P2_0⁰)) _lh_singleTest_LH_P2_1⁰]: 671
//│ case _lh_matchIdent⁸ of {LH_P2 _lh_doLine_LH_P2_0⁰ _lh_doLine_LH_P2_1⁰ => if _lh_doLine_LH_P2_0⁰ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] | _  => error⁰}: 960 --->
//│ 	[LH_P2 [True] rs⁰]: 713
//│ 	[LH_P2 [False] _lh_multiTest_LH_P2_1⁰]: 736
//│ 	[LH_P2 (_lh_multiTest_arg3⁰ == 2) _lh_multiTest_arg2⁰]: 761
//│ case _lh_matchIdent⁹ of {LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰] | _  => error⁰}: 990 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 969
//│ 	[LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]]: 977
//│ 	[LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]: 988
//│ case _lh_doInput_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_doInput_LH_C_0⁰ _lh_doInput_LH_C_1⁰ => doLine_lh_₁(_lh_doInput_LH_C_0⁰, (fun state⁰ -> doInput_lh_₁(state⁰, _lh_doInput_LH_C_1⁰)), _lh_doInput_arg1⁰) | _  => error⁰}: 1163 --->
//│ 	[LH_N]: 1180
//│ 	[LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent¹¹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent¹¹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}]: 1187
//│ case _lh_matchIdent¹¹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1185 --->
//│ 	[LH_N]: 968
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]: 976
//│ case _lh_matchIdent¹⁰ of {LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent¹¹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent¹¹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}] | _  => error⁰}: 1189 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 969
//│ 	[LH_P2 [LH_N] [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]]: 977
//│ 	[LH_P2 [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰] _lh_break_LH_P2_1⁰]: 988
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C f⁰(h⁰) map_lh_₃(f⁰, t⁰)]: 10 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_N]: 11 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C f¹(h¹) map_lh_₂(f¹, t¹)]: 24 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_N]: 25 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C f²(h²) map_lh_₁(f², t²)]: 38 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_N]: 39 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_P2 div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)]: 53 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_chop_LH_P2_0⁰ _lh_chop_LH_P2_1⁰ => if (n¹ == 0) then a⁰ else chop'⁰([LH_C _lh_chop_LH_P2_1⁰ a⁰], _lh_chop_LH_P2_0⁰) | _  => error⁰}: 289
//│ [LH_N]: 145 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]]: 146 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)]: 168 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)]: 180 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)]: 207 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)]: 219 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C t⁷ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1⁴)]: 246 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_C t⁷ map_lh_₃((fun x² -> (x² % 65536)), _lh_uniform_LH_C_1⁴)]: 258 --->
//│ 	case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69
//│ [LH_P2 take_lz_lh_₂(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) drop_lz_lh_₁(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)]: 335 --->
//│ 	case _lh_matchIdent² of {LH_P2 _lh_random_LH_P2_0⁰ _lh_random_LH_P2_1⁰ => [LH_P2 makeNumber_lh_₁(65536, uniform_lh_₁(ns⁰, _lh_random_LH_P2_0⁰)) _lh_random_LH_P2_1⁰] | _  => error⁰}: 496
//│ [LH_C x⁴ iterate_lh_₁(f⁴, f⁴(x⁴))]: 372 --->
//│ 	case force⁰(ls⁶) of {LH_C h⁶ t⁹ => [LH_C h⁶ take_lz_lh_₁((n² - 1), t⁹)] | LH_N  => [LH_N]}: 358
//│ [LH_P2 div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹) (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)]: 468 --->
//│ 	case _lh_matchIdent⁵ of {LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => if (_lh_f_LH_P2_1¹ == 0) then f⁶([LH_P2 (_lh_f_LH_P2_0⁰ + 1) _lh_f_LH_P2_0¹]) else [LH_P2 _lh_f_LH_P2_0⁰ _lh_f_LH_P2_1⁰] | _  => error⁰}: 623
//│ [LH_P2 makeNumber_lh_₁(65536, uniform_lh_₁(ns⁰, _lh_random_LH_P2_0⁰)) _lh_random_LH_P2_1⁰]: 494 --->
//│ 	case _lh_matchIdent⁶ of {LH_P2 _lh_singleTest_LH_P2_0⁰ _lh_singleTest_LH_P2_1⁰ => [LH_P2 singleTestX_lh_₁(_lh_singleTest_arg1⁰, _lh_singleTest_arg2⁰, (2 + _lh_singleTest_LH_P2_0⁰)) _lh_singleTest_LH_P2_1⁰] | _  => error⁰}: 673
//│ [LH_P2 singleTestX_lh_₁(_lh_singleTest_arg1⁰, _lh_singleTest_arg2⁰, (2 + _lh_singleTest_LH_P2_0⁰)) _lh_singleTest_LH_P2_1⁰]: 671 --->
//│ 	case _lh_matchIdent⁷ of {LH_P2 _lh_multiTest_LH_P2_0⁰ _lh_multiTest_LH_P2_1⁰ => if _lh_multiTest_LH_P2_0⁰ then mTest⁰((k⁰ - 1), _lh_multiTest_LH_P2_1⁰) else [LH_P2 [False] _lh_multiTest_LH_P2_1⁰] | _  => error⁰}: 739
//│ [LH_P2 [True] rs⁰]: 713 --->
//│ 	case _lh_matchIdent⁸ of {LH_P2 _lh_doLine_LH_P2_0⁰ _lh_doLine_LH_P2_1⁰ => if _lh_doLine_LH_P2_0⁰ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] | _  => error⁰}: 960
//│ [LH_P2 [False] _lh_multiTest_LH_P2_1⁰]: 736 --->
//│ 	case _lh_matchIdent⁸ of {LH_P2 _lh_doLine_LH_P2_0⁰ _lh_doLine_LH_P2_1⁰ => if _lh_doLine_LH_P2_0⁰ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] | _  => error⁰}: 960
//│ [LH_P2 (_lh_multiTest_arg3⁰ == 2) _lh_multiTest_arg2⁰]: 761 --->
//│ 	case _lh_matchIdent⁸ of {LH_P2 _lh_doLine_LH_P2_0⁰ _lh_doLine_LH_P2_1⁰ => if _lh_doLine_LH_P2_0⁰ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] | _  => error⁰}: 960
//│ [LH_N]: 967 --->
//│ 	case _lh_f_arg1¹ of {LH_N  => _lh_f_arg2⁰ | LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰ => f⁷(_lh_f_LH_C_1⁰, ((10 * _lh_f_arg2⁰) + int_val_of_char_lh_₁(_lh_f_LH_C_0⁰))) | _  => error⁰}: 696
//│ [LH_N]: 968 --->
//│ 	case _lh_matchIdent¹¹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1185
//│ [LH_N]: 973 --->
//│ 	case _lh_f_arg1¹ of {LH_N  => _lh_f_arg2⁰ | LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰ => f⁷(_lh_f_LH_C_1⁰, ((10 * _lh_f_arg2⁰) + int_val_of_char_lh_₁(_lh_f_LH_C_0⁰))) | _  => error⁰}: 696
//│ [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]: 976 --->
//│ 	case _lh_matchIdent¹¹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1185
//│ [LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 986 --->
//│ 	case _lh_f_arg1¹ of {LH_N  => _lh_f_arg2⁰ | LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰ => f⁷(_lh_f_LH_C_1⁰, ((10 * _lh_f_arg2⁰) + int_val_of_char_lh_₁(_lh_f_LH_C_0⁰))) | _  => error⁰}: 696
//│ [LH_N]: 1180 --->
//│ 	case _lh_doInput_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_doInput_LH_C_0⁰ _lh_doInput_LH_C_1⁰ => doLine_lh_₁(_lh_doInput_LH_C_0⁰, (fun state⁰ -> doInput_lh_₁(state⁰, _lh_doInput_LH_C_1⁰)), _lh_doInput_arg1⁰) | _  => error⁰}: 1163
//│ [LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent¹¹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent¹¹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}]: 1187 --->
//│ 	case _lh_doInput_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_doInput_LH_C_0⁰ _lh_doInput_LH_C_1⁰ => doLine_lh_₁(_lh_doInput_LH_C_0⁰, (fun state⁰ -> doInput_lh_₁(state⁰, _lh_doInput_LH_C_1⁰)), _lh_doInput_arg1⁰) | _  => error⁰}: 1163
//│ ------------------
//│ case ls³ of {LH_C h³ t³ => foldl_lh_₁(f³, f³(i⁰, h³), t³) | LH_N  => i⁰}: 69 --->
//│ 	[LH_C f⁰(h⁰) map_lh_₃(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C f¹(h¹) map_lh_₂(f¹, t¹)]: 24
//│ 	[LH_N]: 25
//│ 	[LH_C f²(h²) map_lh_₁(f², t²)]: 38
//│ 	[LH_N]: 39
//│ 	[LH_N]: 145
//│ 	[LH_C (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰) [LH_N]]: 146
//│ 	[LH_C t⁵ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)]: 168
//│ 	[LH_C t⁵ map_lh_₁((fun x⁰ -> (x⁰ % 65536)), _lh_uniform_LH_C_1²)]: 180
//│ 	[LH_C t⁶ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)]: 207
//│ 	[LH_C t⁶ map_lh_₂((fun x¹ -> (x¹ % 65536)), _lh_uniform_LH_C_1³)]: 219
//│ 	[LH_C t⁷ uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1⁴)]: 246
//│ 	[LH_C t⁷ map_lh_₃((fun x² -> (x² % 65536)), _lh_uniform_LH_C_1⁴)]: 258
//│ case _lh_matchIdent¹ of {LH_P2 _lh_chop_LH_P2_0⁰ _lh_chop_LH_P2_1⁰ => if (n¹ == 0) then a⁰ else chop'⁰([LH_C _lh_chop_LH_P2_1⁰ a⁰], _lh_chop_LH_P2_0⁰) | _  => error⁰}: 289 --->
//│ 	[LH_P2 div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)]: 53
//│ case force⁰(ls⁶) of {LH_C h⁶ t⁹ => [LH_C h⁶ take_lz_lh_₁((n² - 1), t⁹)] | LH_N  => [LH_N]}: 358 --->
//│ 	[LH_C x⁴ iterate_lh_₁(f⁴, f⁴(x⁴))]: 372
//│ case _lh_matchIdent² of {LH_P2 _lh_random_LH_P2_0⁰ _lh_random_LH_P2_1⁰ => [LH_P2 makeNumber_lh_₁(65536, uniform_lh_₁(ns⁰, _lh_random_LH_P2_0⁰)) _lh_random_LH_P2_1⁰] | _  => error⁰}: 496 --->
//│ 	[LH_P2 take_lz_lh_₂(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) drop_lz_lh_₁(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)]: 335
//│ case _lh_matchIdent⁵ of {LH_P2 _lh_f_LH_P2_0¹ _lh_f_LH_P2_1¹ => if (_lh_f_LH_P2_1¹ == 0) then f⁶([LH_P2 (_lh_f_LH_P2_0⁰ + 1) _lh_f_LH_P2_0¹]) else [LH_P2 _lh_f_LH_P2_0⁰ _lh_f_LH_P2_1⁰] | _  => error⁰}: 623 --->
//│ 	[LH_P2 div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹) (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)]: 468
//│ case _lh_matchIdent⁶ of {LH_P2 _lh_singleTest_LH_P2_0⁰ _lh_singleTest_LH_P2_1⁰ => [LH_P2 singleTestX_lh_₁(_lh_singleTest_arg1⁰, _lh_singleTest_arg2⁰, (2 + _lh_singleTest_LH_P2_0⁰)) _lh_singleTest_LH_P2_1⁰] | _  => error⁰}: 673 --->
//│ 	[LH_P2 makeNumber_lh_₁(65536, uniform_lh_₁(ns⁰, _lh_random_LH_P2_0⁰)) _lh_random_LH_P2_1⁰]: 494
//│ case _lh_f_arg1¹ of {LH_N  => _lh_f_arg2⁰ | LH_C _lh_f_LH_C_0⁰ _lh_f_LH_C_1⁰ => f⁷(_lh_f_LH_C_1⁰, ((10 * _lh_f_arg2⁰) + int_val_of_char_lh_₁(_lh_f_LH_C_0⁰))) | _  => error⁰}: 696 --->
//│ 	[LH_N]: 967
//│ 	[LH_N]: 973
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_P2_0⁰]: 986
//│ case _lh_matchIdent⁷ of {LH_P2 _lh_multiTest_LH_P2_0⁰ _lh_multiTest_LH_P2_1⁰ => if _lh_multiTest_LH_P2_0⁰ then mTest⁰((k⁰ - 1), _lh_multiTest_LH_P2_1⁰) else [LH_P2 [False] _lh_multiTest_LH_P2_1⁰] | _  => error⁰}: 739 --->
//│ 	[LH_P2 singleTestX_lh_₁(_lh_singleTest_arg1⁰, _lh_singleTest_arg2⁰, (2 + _lh_singleTest_LH_P2_0⁰)) _lh_singleTest_LH_P2_1⁰]: 671
//│ case _lh_matchIdent⁸ of {LH_P2 _lh_doLine_LH_P2_0⁰ _lh_doLine_LH_P2_1⁰ => if _lh_doLine_LH_P2_0⁰ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2⁰(_lh_doLine_LH_P2_1⁰)] | _  => error⁰}: 960 --->
//│ 	[LH_P2 [True] rs⁰]: 713
//│ 	[LH_P2 [False] _lh_multiTest_LH_P2_1⁰]: 736
//│ 	[LH_P2 (_lh_multiTest_arg3⁰ == 2) _lh_multiTest_arg2⁰]: 761
//│ case _lh_doInput_arg2⁰ of {LH_N  => [LH_N] | LH_C _lh_doInput_LH_C_0⁰ _lh_doInput_LH_C_1⁰ => doLine_lh_₁(_lh_doInput_LH_C_0⁰, (fun state⁰ -> doInput_lh_₁(state⁰, _lh_doInput_LH_C_1⁰)), _lh_doInput_arg1⁰) | _  => error⁰}: 1163 --->
//│ 	[LH_N]: 1180
//│ 	[LH_C _lh_lines_LH_P2_0⁰ let _lh_matchIdent¹¹ = _lh_lines_LH_P2_1⁰
//│ in case _lh_matchIdent¹¹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}]: 1187
//│ case _lh_matchIdent¹¹ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0⁰ _lh_lines_LH_C_1⁰ => lines_lh_₁(_lh_lines_LH_C_1⁰) | _  => error⁰}: 1185 --->
//│ 	[LH_N]: 968
//│ 	[LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰]: 976
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testPrimetest_nofib_lh_₁(primId⁰(0))
//│ def break_lh_₁(_lh_break_arg1¹, _lh_break_arg2¹) = case _lh_break_arg2¹ of {
//│ 	LH_N  => [LH_P2 (fun _lh_f_arg2² -> (fun f²⁶ -> _lh_f_arg2²)) (fun _lh_dummy⁰ -> (fun _lh_doInput_arg1² -> [LH_N]))]
//│ 	| LH_C _lh_break_LH_C_0⁰ _lh_break_LH_C_1⁰ => if _lh_break_arg1¹(_lh_break_LH_C_0⁰) then [LH_P2 (fun _lh_f_arg2³ -> (fun f²⁷ -> _lh_f_arg2³)) 
//│ 		let _lh_lines_LH_C_1¹ = _lh_break_LH_C_1⁰
//│ 		in (fun _lh_dummy¹ -> lines_lh_₁(_lh_lines_LH_C_1¹))] else 
//│ 		let _lh_matchIdent¹⁹ = break_lh_₁(_lh_break_arg1¹, _lh_break_LH_C_1⁰)
//│ 		in case _lh_matchIdent¹⁹ of {
//│ 			LH_P2 _lh_break_LH_P2_0⁰ _lh_break_LH_P2_1⁰ => [LH_P2 
//│ 				let _lh_f_LH_C_1¹ = _lh_break_LH_P2_0⁰
//│ 				in let _lh_f_LH_C_0¹ = _lh_break_LH_C_0⁰
//│ 				in (fun _lh_f_arg2⁴ -> (fun f²⁸ -> f²⁸(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2⁴) + int_val_of_char_lh_₁(_lh_f_LH_C_0¹))))) _lh_break_LH_P2_1⁰]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def chop_lh_₁(_lh_chop_arg1¹) = 
//│ 	let chop'¹ = (fun a⁶ -> (fun n⁴ -> 
//│ 		let _lh_matchIdent¹² = divmod_lh_₂(n⁴, _lh_chop_arg1¹)
//│ 		in _lh_matchIdent¹²(a⁶, chop'¹, n⁴)))
//│ 	in chop'¹([LH_N])
//│ def divmod_lh_₁(_lh_divmod_arg1², _lh_divmod_arg2²) = 
//│ 	let _lh_f_LH_P2_1² = (_lh_divmod_arg1² % _lh_divmod_arg2²)
//│ 	in let _lh_f_LH_P2_0² = div⁰(_lh_divmod_arg1², _lh_divmod_arg2²)
//│ 	in (fun _lh_f_LH_P2_0³ -> (fun _lh_f_LH_P2_1³ -> (fun f¹⁶ -> if (_lh_f_LH_P2_1² == 0) then f¹⁶([LH_P2 (_lh_f_LH_P2_0³ + 1) _lh_f_LH_P2_0²]) else [LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³])))
//│ def divmod_lh_₂(_lh_divmod_arg1³, _lh_divmod_arg2³) = 
//│ 	let _lh_chop_LH_P2_1¹ = (_lh_divmod_arg1³ % _lh_divmod_arg2³)
//│ 	in let _lh_chop_LH_P2_0¹ = div⁰(_lh_divmod_arg1³, _lh_divmod_arg2³)
//│ 	in (fun a⁸ -> (fun chop'² -> (fun n⁸ -> if (n⁸ == 0) then a⁸ else chop'²([LH_C _lh_chop_LH_P2_1¹ a⁸], _lh_chop_LH_P2_0¹))))
//│ def doInput_lh_₁(_lh_doInput_arg1³, _lh_doInput_arg2¹) = _lh_doInput_arg2¹(_lh_doInput_arg1³)
//│ def doLine_lh_₁(_lh_doLine_arg1¹, _lh_doLine_arg2⁴, _lh_doLine_arg3¹) = 
//│ 	let n⁹ = int_val_of_string_lh_₁(_lh_doLine_arg1¹)
//│ 	in let _lh_matchIdent²¹ = multiTest_lh_₁(100, _lh_doLine_arg3¹, n⁹)
//│ 	in _lh_matchIdent²¹(_lh_doLine_arg2⁴)
//│ def drop_lz_lh_₁(_lh_drop_lz_arg1¹, _lh_drop_lz_arg2¹) = 
//│ 	let _lh_matchIdent¹⁴ = force⁰(_lh_drop_lz_arg2¹)
//│ 	in case _lh_matchIdent¹⁴ of {
//│ 		LH_N  => lazy⁰([LH_N])
//│ 		| LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => if (_lh_drop_lz_arg1¹ > 0) then drop_lz_lh_₁((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1⁰) else _lh_drop_lz_LH_C_1⁰
//│ 		| _  => error⁰}
//│ def even_lh_₁(_lh_even_arg1³) = ((_lh_even_arg1³ % 2) == 0)
//│ def even_lh_₂(_lh_even_arg1²) = ((_lh_even_arg1² % 2) == 0)
//│ def findKQ_lh_₁(_lh_findKQ_arg1¹) = 
//│ 	let f²⁹ = (fun _lh_f_arg1³ -> case _lh_f_arg1³ of {
//│ 		LH_P2 _lh_f_LH_P2_0⁰ _lh_f_LH_P2_1⁰ => 
//│ 			let _lh_matchIdent²⁰ = divmod_lh_₁(_lh_f_LH_P2_1⁰, 2)
//│ 			in _lh_matchIdent²⁰(_lh_f_LH_P2_0⁰, _lh_f_LH_P2_1⁰, f²⁹)
//│ 		| _  => error⁰})
//│ 	in f²⁹([LH_P2 0 (_lh_findKQ_arg1¹ - 1)])
//│ def foldl_lh_₁(f⁹, i¹, ls⁸) = ls⁸(f⁹, i¹)
//│ def int_val_of_char_lh_₁(_lh_int_val_of_char_arg1¹) = (int_of_char⁰(_lh_int_val_of_char_arg1¹) - 48)
//│ def int_val_of_string_lh_₁(_lh_int_val_of_string_arg1¹) = 
//│ 	let f¹⁷ = (fun _lh_f_arg1² -> (fun _lh_f_arg2¹ -> _lh_f_arg1²(_lh_f_arg2¹, f¹⁷)))
//│ 	in f¹⁷(_lh_int_val_of_string_arg1¹, 0)
//│ def iterate_lh_₁(f³⁰, x¹²) = lazy⁰(
//│ 	let t²² = iterate_lh_₁(f³⁰, f³⁰(x¹²))
//│ 	in let h¹⁶ = x¹²
//│ 	in (fun n⁶ -> [LH_C h¹⁶ take_lz_lh_₁((n⁶ - 1), t²²)]))
//│ def length_lh_₁(ls¹²) = case ls¹² of {
//│ 	LH_C h⁵ t⁸ => (1 + length_lh_₁(t⁸))
//│ 	| LH_N  => 0}
//│ def lines_lh_₁(_lh_lines_arg1¹) = 
//│ 	let _lh_matchIdent¹⁷ = break_lh_₁((fun x⁸ -> polyEq⁰(x⁸, '|')), _lh_lines_arg1¹)
//│ 	in case _lh_matchIdent¹⁷ of {
//│ 		LH_P2 _lh_lines_LH_P2_0⁰ _lh_lines_LH_P2_1⁰ => 
//│ 			let _lh_doInput_LH_C_1¹ = 	
//│ 				let _lh_matchIdent¹⁸ = _lh_lines_LH_P2_1⁰
//│ 				in _lh_matchIdent¹⁸(99)
//│ 			in let _lh_doInput_LH_C_0¹ = _lh_lines_LH_P2_0⁰
//│ 			in (fun _lh_doInput_arg1¹ -> doLine_lh_₁(_lh_doInput_LH_C_0¹, (fun state¹ -> doInput_lh_₁(state¹, _lh_doInput_LH_C_1¹)), _lh_doInput_arg1¹))
//│ 		| _  => error⁰}
//│ def makeNumber_lh_₁(_lh_makeNumber_arg1¹) = foldl_lh_₁((fun a⁷ -> (fun x⁷ -> ((a⁷ * _lh_makeNumber_arg1¹) + x⁷))), 0)
//│ def map_lh_₁(f¹³, ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h² t² => 
//│ 		let t¹¹ = map_lh_₁(f¹³, t²)
//│ 		in let h⁸ = f¹³(h²)
//│ 		in (fun f¹⁴ -> (fun i⁴ -> foldl_lh_₁(f¹⁴, f¹⁴(i⁴, h⁸), t¹¹)))
//│ 	| LH_N  => (fun f¹⁵ -> (fun i⁵ -> i⁵))}
//│ def map_lh_₂(f¹⁰, ls⁹) = case ls⁹ of {
//│ 	LH_C h¹ t¹ => 
//│ 		let t¹⁰ = map_lh_₂(f¹⁰, t¹)
//│ 		in let h⁷ = f¹⁰(h¹)
//│ 		in (fun f¹¹ -> (fun i² -> foldl_lh_₁(f¹¹, f¹¹(i², h⁷), t¹⁰)))
//│ 	| LH_N  => (fun f¹² -> (fun i³ -> i³))}
//│ def map_lh_₃(f³¹, ls¹³) = case ls¹³ of {
//│ 	LH_C h⁰ t⁰ => 
//│ 		let t²³ = map_lh_₃(f³¹, t⁰)
//│ 		in let h¹⁷ = f³¹(h⁰)
//│ 		in (fun f³² -> (fun i¹⁴ -> foldl_lh_₁(f³², f³²(i¹⁴, h¹⁷), t²³)))
//│ 	| LH_N  => (fun f³³ -> (fun i¹⁵ -> i¹⁵))}
//│ def multiTest_lh_₁(_lh_multiTest_arg1¹, _lh_multiTest_arg2¹, _lh_multiTest_arg3¹) = 
//│ 	let mTest² = (fun k³ -> (fun rs¹ -> if (k³ == 0) then 
//│ 		let _lh_doLine_LH_P2_1² = rs¹
//│ 		in let _lh_doLine_LH_P2_0² = [True]
//│ 		in (fun _lh_doLine_arg2² -> if _lh_doLine_LH_P2_0² then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2²(_lh_doLine_LH_P2_1²)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2²(_lh_doLine_LH_P2_1²)]) else 
//│ 		let _lh_matchIdent¹³ = singleTest_lh_₁(_lh_multiTest_arg3¹, findKQ_lh_₁(_lh_multiTest_arg3¹), rs¹)
//│ 		in _lh_matchIdent¹³(k³, mTest²)))
//│ 	in if ((_lh_multiTest_arg3¹ <= 1) || even_lh_₁(_lh_multiTest_arg3¹)) then 
//│ 		let _lh_doLine_LH_P2_1³ = _lh_multiTest_arg2¹
//│ 		in let _lh_doLine_LH_P2_0³ = (_lh_multiTest_arg3¹ == 2)
//│ 		in (fun _lh_doLine_arg2³ -> if _lh_doLine_LH_P2_0³ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2³(_lh_doLine_LH_P2_1³)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2³(_lh_doLine_LH_P2_1³)]) else mTest²(_lh_multiTest_arg1¹, _lh_multiTest_arg2¹)
//│ def powerMod_lh_₁(_lh_powerMod_arg1¹, _lh_powerMod_arg2¹, _lh_powerMod_arg3¹) = case _lh_powerMod_arg2¹ of {
//│ 	0  => 1
//│ 	| _  => 
//│ 		let a'¹ = (_lh_powerMod_arg1¹ mod _lh_powerMod_arg3¹)
//│ 		in let f⁸ = (fun a⁴ -> (fun b² -> (fun c¹ -> 
//│ 			let g¹ = (fun a⁵ -> (fun b³ -> if even_lh_₂(b³) then g¹(((a⁵ * a⁵) % _lh_powerMod_arg3¹), div⁰(b³, 2)) else f⁸(a⁵, (b³ - 1), ((a⁵ * c¹) % _lh_powerMod_arg3¹))))
//│ 			in if (b² == 0) then c¹ else g¹(a⁴, b²))))
//│ 		in f⁸(a'¹, (_lh_powerMod_arg2¹ - 1), a'¹)}
//│ def process_lh_₁(_lh_process_arg1¹) = doInput_lh_₁(randomInts_lh_₁(111, 47), _lh_process_arg1¹)
//│ def randomInts_lh_₁(_lh_randomInts_arg1¹, _lh_randomInts_arg2¹) = if ((1 <= _lh_randomInts_arg1¹) && (_lh_randomInts_arg1¹ <= 2147483562)) then if ((1 <= _lh_randomInts_arg2¹) && (_lh_randomInts_arg2¹ <= 2147483398)) then rands_lh_₁(_lh_randomInts_arg1¹, _lh_randomInts_arg2¹) else error⁰([LH_C 'r' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'B' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C 'd' [LH_C '.' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) else error⁰([LH_C 'r' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'B' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'f' [LH_C 'i' [LH_C 'r' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C 'd' [LH_C '.' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ def random_lh_₁(_lh_random_arg1¹, _lh_random_arg2¹) = 
//│ 	let ns² = chop_lh_₁(65536, _lh_random_arg1¹)
//│ 	in let _lh_matchIdent¹⁶ = splitAt_lz_lh_₁(length_lh_₁(ns²), _lh_random_arg2¹)
//│ 	in _lh_matchIdent¹⁶(ns²)
//│ def rands_lh_₁(_lh_rands_arg1¹, _lh_rands_arg2¹) = 
//│ 	let k⁴ = div⁰(_lh_rands_arg1¹, 53668)
//│ 	in let s1'¹ = ((40014 * (_lh_rands_arg1¹ - (k⁴ * 53668))) - (k⁴ * 12211))
//│ 	in let s1''¹ = if (s1'¹ < 0) then (s1'¹ + 2147483563) else s1'¹
//│ 	in let k'¹ = div⁰(_lh_rands_arg2¹, 52774)
//│ 	in let s2'¹ = ((40692 * (_lh_rands_arg2¹ - (k'¹ * 52774))) - (k'¹ * 3791))
//│ 	in let s2''¹ = if (s2'¹ < 0) then (s2'¹ + 2147483399) else s2'¹
//│ 	in let z¹ = (s1''¹ - s2''¹)
//│ 	in if (z¹ < 1) then lazy⁰([LH_C (z¹ + 2147483562) rands_lh_₁(s1''¹, s2''¹)]) else lazy⁰([LH_C z¹ rands_lh_₁(s1''¹, s2''¹)])
//│ def singleTestX_lh_₁(_lh_singleTestX_arg1¹, _lh_singleTestX_arg2¹, _lh_singleTestX_arg3¹) = case _lh_singleTestX_arg2¹ of {
//│ 	LH_P2 _lh_singleTestX_LH_P2_0⁰ _lh_singleTestX_LH_P2_1⁰ => 
//│ 		let square¹ = (fun x¹³ -> ((x¹³ * x¹³) % _lh_singleTestX_arg1¹))
//│ 		in let witness¹ = (fun ls¹⁵ -> 
//│ 			let _lh_matchIdent²² = ls¹⁵
//│ 			in case _lh_matchIdent²² of {
//│ 				LH_N  => [False]
//│ 				| LH_C _lh_singleTestX_LH_C_0⁰ _lh_singleTestX_LH_C_1⁰ => if (_lh_singleTestX_LH_C_0⁰ == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0⁰ == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1⁰)
//│ 				| _  => error⁰})
//│ 		in let _lh_matchIdent²³ = take_lz_lh_₁(_lh_singleTestX_LH_P2_0⁰, iterate_lh_₁(square¹, powerMod_lh_₁(_lh_singleTestX_arg3¹, _lh_singleTestX_LH_P2_1⁰, _lh_singleTestX_arg1¹)))
//│ 		in case _lh_matchIdent²³ of {
//│ 			LH_C _lh_singleTestX_LH_C_0¹ _lh_singleTestX_LH_C_1¹ => (((_lh_singleTestX_LH_C_0¹ == 1) || (_lh_singleTestX_LH_C_0¹ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1¹))
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def singleTest_lh_₁(_lh_singleTest_arg1², _lh_singleTest_arg2², _lh_singleTest_arg3¹) = 
//│ 	let _lh_matchIdent¹⁵ = random_lh_₁((_lh_singleTest_arg1² - 2), _lh_singleTest_arg3¹)
//│ 	in _lh_matchIdent¹⁵(_lh_singleTest_arg1², _lh_singleTest_arg2²)
//│ def splitAt_lz_lh_₁(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) = 
//│ 	let _lh_random_LH_P2_1¹ = drop_lz_lh_₁(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)
//│ 	in let _lh_random_LH_P2_0¹ = take_lz_lh_₂(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)
//│ 	in (fun ns¹ -> 
//│ 		let _lh_singleTest_LH_P2_1¹ = _lh_random_LH_P2_1¹
//│ 		in let _lh_singleTest_LH_P2_0¹ = makeNumber_lh_₁(65536, uniform_lh_₁(ns¹, _lh_random_LH_P2_0¹))
//│ 		in (fun _lh_singleTest_arg1¹ -> (fun _lh_singleTest_arg2¹ -> 
//│ 			let _lh_multiTest_LH_P2_1¹ = _lh_singleTest_LH_P2_1¹
//│ 			in let _lh_multiTest_LH_P2_0¹ = singleTestX_lh_₁(_lh_singleTest_arg1¹, _lh_singleTest_arg2¹, (2 + _lh_singleTest_LH_P2_0¹))
//│ 			in (fun k² -> (fun mTest¹ -> if _lh_multiTest_LH_P2_0¹ then mTest¹((k² - 1), _lh_multiTest_LH_P2_1¹) else 
//│ 				let _lh_doLine_LH_P2_1¹ = _lh_multiTest_LH_P2_1¹
//│ 				in let _lh_doLine_LH_P2_0¹ = [False]
//│ 				in (fun _lh_doLine_arg2¹ -> if _lh_doLine_LH_P2_0¹ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)]))))))
//│ def take_lz_lh_₁(n⁷, ls¹⁴) = if (n⁷ > 0) then force⁰(ls¹⁴, n⁷) else [LH_N]
//│ def take_lz_lh_₂(n⁵, ls¹¹) = if (n⁵ > 0) then case force⁰(ls¹¹) of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ take_lz_lh_₂((n⁵ - 1), t⁴)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPrimetest_nofib_lh_₁(_lh_testPrimetest_nofib_arg1¹) = 
//│ 	let cts¹ = primId⁰([LH_C '2' [LH_C '4' [LH_C '|' [LH_C '4' [LH_C '8' [LH_C '|' [LH_C '4' [LH_C '7' [LH_C '|' [LH_C '1' [LH_C '3' [LH_C '1' [LH_C '7' [LH_C '|' [LH_C '8' [LH_C '9' [LH_C '0' [LH_C '1' [LH_N]]]]]]]]]]]]]]]]]]])
//│ 	in process_lh_₁(lines_lh_₁(cts¹))
//│ def uniform_lh_₁(_lh_uniform_arg1¹, _lh_uniform_arg2¹) = case _lh_uniform_arg1¹ of {
//│ 	LH_C _lh_uniform_LH_C_0⁰ _lh_uniform_LH_C_1⁰ => case _lh_uniform_LH_C_1⁰ of {
//│ 		LH_N  => case _lh_uniform_arg2¹ of {
//│ 			LH_C _lh_uniform_LH_C_0¹ _lh_uniform_LH_C_1¹ => case _lh_uniform_LH_C_1¹ of {
//│ 				LH_N  => 
//│ 					let t¹² = (fun f¹⁹ -> (fun i⁷ -> i⁷))
//│ 					in let h⁹ = (_lh_uniform_LH_C_0¹ % _lh_uniform_LH_C_0⁰)
//│ 					in (fun f¹⁸ -> (fun i⁶ -> foldl_lh_₁(f¹⁸, f¹⁸(i⁶, h⁹), t¹²)))
//│ 				| _  => case _lh_uniform_arg2¹ of {
//│ 					LH_C _lh_uniform_LH_C_0² _lh_uniform_LH_C_1² => 
//│ 						let t¹³ = (_lh_uniform_LH_C_0² % (_lh_uniform_LH_C_0⁰ + 1))
//│ 						in if (t¹³ == _lh_uniform_LH_C_0⁰) then 
//│ 							let t¹⁴ = uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1²)
//│ 							in let h¹⁰ = t¹³
//│ 							in (fun f²⁰ -> (fun i⁸ -> foldl_lh_₁(f²⁰, f²⁰(i⁸, h¹⁰), t¹⁴))) else 
//│ 							let t¹⁵ = map_lh_₁((fun x⁹ -> (x⁹ % 65536)), _lh_uniform_LH_C_1²)
//│ 							in let h¹¹ = t¹³
//│ 							in (fun f²¹ -> (fun i⁹ -> foldl_lh_₁(f²¹, f²¹(i⁹, h¹¹), t¹⁵)))
//│ 					| _  => error⁰}}
//│ 			| _  => case _lh_uniform_arg2¹ of {
//│ 				LH_C _lh_uniform_LH_C_0³ _lh_uniform_LH_C_1³ => 
//│ 					let t¹⁶ = (_lh_uniform_LH_C_0³ % (_lh_uniform_LH_C_0⁰ + 1))
//│ 					in if (t¹⁶ == _lh_uniform_LH_C_0⁰) then 
//│ 						let t¹⁷ = uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1³)
//│ 						in let h¹² = t¹⁶
//│ 						in (fun f²² -> (fun i¹⁰ -> foldl_lh_₁(f²², f²²(i¹⁰, h¹²), t¹⁷))) else 
//│ 						let t¹⁸ = map_lh_₂((fun x¹⁰ -> (x¹⁰ % 65536)), _lh_uniform_LH_C_1³)
//│ 						in let h¹³ = t¹⁶
//│ 						in (fun f²³ -> (fun i¹¹ -> foldl_lh_₁(f²³, f²³(i¹¹, h¹³), t¹⁸)))
//│ 				| _  => error⁰}}
//│ 		| _  => case _lh_uniform_arg2¹ of {
//│ 			LH_C _lh_uniform_LH_C_0⁴ _lh_uniform_LH_C_1⁴ => 
//│ 				let t¹⁹ = (_lh_uniform_LH_C_0⁴ % (_lh_uniform_LH_C_0⁰ + 1))
//│ 				in if (t¹⁹ == _lh_uniform_LH_C_0⁰) then 
//│ 					let t²⁰ = uniform_lh_₁(_lh_uniform_LH_C_1⁰, _lh_uniform_LH_C_1⁴)
//│ 					in let h¹⁴ = t¹⁹
//│ 					in (fun f²⁴ -> (fun i¹² -> foldl_lh_₁(f²⁴, f²⁴(i¹², h¹⁴), t²⁰))) else 
//│ 					let t²¹ = map_lh_₃((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁴)
//│ 					in let h¹⁵ = t¹⁹
//│ 					in (fun f²⁵ -> (fun i¹³ -> foldl_lh_₁(f²⁵, f²⁵(i¹³, h¹⁵), t²¹)))
//│ 			| _  => error⁰}}
//│ 	| _  => error⁰}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
