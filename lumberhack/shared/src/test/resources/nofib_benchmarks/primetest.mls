:NewParser
:ParseOnly

:lhInHaskell
:lhGenOCaml
drop_lz n ls = case (force ls) of
                  [] -> lazy []
                  (h:t) -> if n > 0 then (drop_lz (n - 1) t) else t
even k = (k `mod` 2) == 0
splitAt_lz n ls = (take_lz n ls, drop_lz n ls)
int_val_of_char x = (int_of_char x) - 48
int_val_of_string s = f s 0
  where
    f [] a = a
    f (h:t) a = f t ((10*a) + (int_val_of_char h))
break p [] = ([], [])
break p (x:xs) = if p x then ([], (x:xs)) else case (break p xs) of { (ys, zs) -> ((x:ys), zs) }
lines s = case break (\x -> polyEq x '|') s of
                  (l, s') -> (l:(case s' of { [] -> []; _:s'' -> lines s'' }))
divmod a b = ((a `div` b), (a `mod` b))
process :: [String] -> [String]
process x = doInput (randomInts 111 47) x
doInput :: State -> [String] -> [String]
doInput state []     = []
doInput state (l:ls) = doLine l (\state -> doInput state ls) state
doLine :: String -> (State -> [String]) -> State -> [String]
doLine cs cont rs =
  let n = (int_val_of_string cs) in
  case (multiTest 100 rs n) of
    (t,rs') -> (if t then ("Probably prime": (cont rs')) else ("Composite": (cont rs')))
type State = [Int]
---------------------
makeNumber :: Integer -> [Integer] -> Integer
makeNumber b = foldl (\a -> \x -> (a * b) + x) 0
chop :: Integer -> Integer -> [Integer]
chop b =
  let chop' = (\a -> \n -> (case (n `divmod` b) of { (q,r) -> if n == 0 then a else chop' (r:a) q }))
  in
  chop' []
powerMod :: Integer -> Integer -> Integer -> Integer
powerMod a 0 m = 1
powerMod a b m =
  let a' = (mod a m) in
  let f = \a -> \b -> \c ->
          let g = (\a -> \b -> if even b then g ((a*a) `mod` m) (b `div` 2) else f a (b-1) ((a*c) `mod` m)) in
          if b == 0 then c else g a b
  in
  f a' (b-1) a'
-- log2 :: Integer -> Integer
log2 x = (length . chop 2) x
--------------------------
randomInts :: Int -> Int -> [Int]
randomInts s1 s2 = if (1 <= s1) && (s1 <= 2147483562) then
                   if (1 <= s2) && (s2 <= 2147483398) then rands s1 s2
                   else error "randomInts: Bad second seed."
                   else error "randomInts: Bad first seed."
rands :: Int -> Int -> [Int]
rands s1 s2 =
    let k    = (s1 `div` 53668) in
    let s1'  = ((40014 * (s1 - (k * 53668))) - (k * 12211)) in
    let s1'' = (if s1' < 0 then s1' + 2147483563 else s1') in
    let k'   = (s2 `div` 52774) in
    let s2'  = ((40692 * (s2 - (k' * 52774))) - (k' * 3791)) in
    let s2'' = (if s2' < 0 then s2' + 2147483399 else s2') in
    let z    = (s1'' - s2'') in
    if z < 1 then lazy ((z + 2147483562) : (rands s1'' s2'')) else lazy (z : (rands s1'' s2''))
--------------------------
multiTest :: Int -> [Int] -> Integer -> (Bool, [Int])
multiTest k rs n =
  let mTest = \k -> \rs ->
                  if k == 0 then
                    (True, rs)
                  else
                    case (singleTest n (findKQ n) rs) of { (t, rs') ->
                    if t then mTest (k-1) rs' else (False, rs') }
  in
  if ((n <= 1) || (even n)) then (n==2, rs) else mTest k rs
findKQ :: Integer -> (Integer, Integer)
findKQ n = f (0, (n-1))
  where
    f (k,q) = case (q `divmod` 2) of { (d,r) -> if r == 0 then f (k+1, d) else (k, q) }
singleTest :: Integer -> (Integer, Integer) -> [Int] -> (Bool, [Int])
singleTest n kq rs
  = case (random (n-2) rs) of { (x, rs') -> (singleTestX n kq (2+x), rs') }
singleTestX n (k, q) x =
  let square = (\x -> (x*x) `mod` n) in
  let witness = \ls -> case ls of {
    [] -> False;
    (t:ts) -> if t == (n-1) then True else (if t == 1 then False else witness ts)
  }
  in
  case (take_lz (k) (iterate square (powerMod x q n))) of {
    (t:ts) -> (t == 1) || (t == (n-1)) || witness ts
  }
random :: Integer -> [Int] -> (Integer, [Int])
random n rs =
  let ns        = (chop 65536 n) in
  case (splitAt_lz (length ns) rs) of { (rs1,rs2) -> (makeNumber 65536 (uniform ns rs1), rs2) }
uniform :: [Integer] -> [Int] -> [Integer]
uniform [n]    [r]    = [(r) `mod` n]
uniform (n:ns) (r:rs) =
  let t = ((r) `mod` (n+1)) in
  if t == n then t: (uniform ns rs)
            else t: (map (\x -> ((x) `mod` 65536)) rs)
---------------------
testPrimetest_nofib dummy = 
  let cts = primId "24|48|47|1317|8901" in
  process (lines cts)
testPrimetest_nofib $ primId 0
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testPrimetest_nofib₀^2928(primId⁰(0))
//│ def break₀(_lh_break_arg1¹, _lh_break_arg2¹) = case _lh_break_arg2¹ of {
//│ 	LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 	| LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1¹(_lh_break_LH_C_0¹) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]] else 
//│ 		let _lh_matchIdent¹⁶ = break₀^2331(_lh_break_arg1¹, _lh_break_LH_C_1¹)
//│ 		in case _lh_matchIdent¹⁶ of {
//│ 			LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def chop₀(_lh_chop_arg1¹) = 
//│ 	let chop'¹ = (fun a⁹ -> (fun n⁹ -> 
//│ 		let _lh_matchIdent²⁰ = divmod₁^2446(n⁹, _lh_chop_arg1¹)
//│ 		in case _lh_matchIdent²⁰ of {
//│ 			LH_P2 _lh_chop_LH_P2_0¹ _lh_chop_LH_P2_1¹ => if (n⁹ == 0) then a⁹ else chop'¹([LH_C _lh_chop_LH_P2_1¹ a⁹], _lh_chop_LH_P2_0¹)
//│ 			| _  => error⁰}))
//│ 	in chop'¹([LH_N])
//│ def divmod₀(_lh_divmod_arg1², _lh_divmod_arg2²) = [LH_P2 div⁰(_lh_divmod_arg1², _lh_divmod_arg2²) (_lh_divmod_arg1² % _lh_divmod_arg2²)]
//│ def divmod₁(_lh_divmod_arg1¹, _lh_divmod_arg2¹) = [LH_P2 div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹) (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)]
//│ def doInput₀(_lh_doInput_arg1¹, _lh_doInput_arg2¹) = case _lh_doInput_arg2¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_doInput_LH_C_0¹ _lh_doInput_LH_C_1¹ => doLine₀^2378(_lh_doInput_LH_C_0¹, (fun state¹ -> doInput₀^2381(state¹, _lh_doInput_LH_C_1¹)), _lh_doInput_arg1¹)
//│ 	| _  => error⁰}
//│ def doLine₀(_lh_doLine_arg1¹, _lh_doLine_arg2¹, _lh_doLine_arg3¹) = 
//│ 	let n⁸ = int_val_of_string₀^2233(_lh_doLine_arg1¹)
//│ 	in let _lh_matchIdent¹⁵ = multiTest₀^2236(100, _lh_doLine_arg3¹, n⁸)
//│ 	in case _lh_matchIdent¹⁵ of {
//│ 		LH_P2 _lh_doLine_LH_P2_0¹ _lh_doLine_LH_P2_1¹ => if _lh_doLine_LH_P2_0¹ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)]
//│ 		| _  => error⁰}
//│ def drop_lz₀(_lh_drop_lz_arg1¹, _lh_drop_lz_arg2¹) = 
//│ 	let _lh_matchIdent²¹ = force⁰(_lh_drop_lz_arg2¹)
//│ 	in case _lh_matchIdent²¹ of {
//│ 		LH_N  => lazy⁰([LH_N])
//│ 		| LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => if (_lh_drop_lz_arg1¹ > 0) then drop_lz₀^2498((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹) else _lh_drop_lz_LH_C_1¹
//│ 		| _  => error⁰}
//│ def even₀(_lh_even_arg1¹) = ((_lh_even_arg1¹ % 2) == 0)
//│ def even₁(_lh_even_arg1²) = ((_lh_even_arg1² % 2) == 0)
//│ def findKQ₀(_lh_findKQ_arg1¹) = 
//│ 	let f¹⁵ = (fun _lh_f_arg1² -> case _lh_f_arg1² of {
//│ 		LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1² => 
//│ 			let _lh_matchIdent¹⁹ = divmod₀^2395(_lh_f_LH_P2_1², 2)
//│ 			in case _lh_matchIdent¹⁹ of {
//│ 				LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => if (_lh_f_LH_P2_1³ == 0) then f¹⁵([LH_P2 (_lh_f_LH_P2_0² + 1) _lh_f_LH_P2_0³]) else [LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1²]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰})
//│ 	in f¹⁵([LH_P2 0 (_lh_findKQ_arg1¹ - 1)])
//│ def foldl₀(f²⁰, i³, ls²⁵) = case ls²⁵ of {
//│ 	LH_C h²⁴ t²⁹ => foldl₀^2764(f²⁰, f²⁰(i³, h²⁴), t²⁹)
//│ 	| LH_N  => i³}
//│ def int_val_of_char₀(_lh_int_val_of_char_arg1¹) = (int_of_char⁰(_lh_int_val_of_char_arg1¹) - 48)
//│ def int_val_of_string₀(_lh_int_val_of_string_arg1¹) = 
//│ 	let f¹⁸ = (fun _lh_f_arg1³ -> (fun _lh_f_arg2¹ -> case _lh_f_arg1³ of {
//│ 		LH_N  => _lh_f_arg2¹
//│ 		| LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹ => f¹⁸(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2¹) + int_val_of_char₀^2621(_lh_f_LH_C_0¹)))
//│ 		| _  => error⁰}))
//│ 	in f¹⁸(_lh_int_val_of_string_arg1¹, 0)
//│ def iterate₀(f¹⁶, x⁹) = lazy⁰([LH_C x⁹ iterate₀^2516(f¹⁶, f¹⁶(x⁹))])
//│ def length₀(ls²²) = case ls²² of {
//│ 	LH_C h²² t²⁷ => (1 + length₀^2641(t²⁷))
//│ 	| LH_N  => 0}
//│ def lines₀(_lh_lines_arg1¹) = 
//│ 	let _lh_matchIdent¹⁷ = break₀^2350((fun x⁸ -> polyEq⁰(x⁸, '|')), _lh_lines_arg1¹)
//│ 	in case _lh_matchIdent¹⁷ of {
//│ 		LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => [LH_C _lh_lines_LH_P2_0¹ 
//│ 			let _lh_matchIdent¹⁸ = _lh_lines_LH_P2_1¹
//│ 			in case _lh_matchIdent¹⁸ of {
//│ 				LH_N  => [LH_N]
//│ 				| LH_C _lh_lines_LH_C_0¹ _lh_lines_LH_C_1¹ => lines₀^2365(_lh_lines_LH_C_1¹)
//│ 				| _  => error⁰}]
//│ 		| _  => error⁰}
//│ def makeNumber₀(_lh_makeNumber_arg1¹) = foldl₀^2912((fun a¹² -> (fun x¹⁴ -> ((a¹² * _lh_makeNumber_arg1¹) + x¹⁴))), 0)
//│ def map₀(f¹⁹, ls²⁴) = case ls²⁴ of {
//│ 	LH_C h²³ t²⁸ => [LH_C f¹⁹(h²³) map₀^2753(f¹⁹, t²⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def multiTest₀(_lh_multiTest_arg1¹, _lh_multiTest_arg2¹, _lh_multiTest_arg3¹) = 
//│ 	let mTest¹ = (fun k³ -> (fun rs¹ -> if (k³ == 0) then [LH_P2 [True] rs¹] else 
//│ 		let _lh_matchIdent¹⁴ = singleTest₀^2175(_lh_multiTest_arg3¹, findKQ₀^2178(_lh_multiTest_arg3¹), rs¹)
//│ 		in case _lh_matchIdent¹⁴ of {
//│ 			LH_P2 _lh_multiTest_LH_P2_0¹ _lh_multiTest_LH_P2_1¹ => if _lh_multiTest_LH_P2_0¹ then mTest¹((k³ - 1), _lh_multiTest_LH_P2_1¹) else [LH_P2 [False] _lh_multiTest_LH_P2_1¹]
//│ 			| _  => error⁰}))
//│ 	in if ((_lh_multiTest_arg3¹ <= 1) || even₀^2212(_lh_multiTest_arg3¹)) then [LH_P2 (_lh_multiTest_arg3¹ == 2) _lh_multiTest_arg2¹] else mTest¹(_lh_multiTest_arg1¹, _lh_multiTest_arg2¹)
//│ def powerMod₀(_lh_powerMod_arg1¹, _lh_powerMod_arg2¹, _lh_powerMod_arg3¹) = case _lh_powerMod_arg2¹ of {
//│ 	0  => 1
//│ 	| _  => 
//│ 		let a'¹ = (_lh_powerMod_arg1¹ mod _lh_powerMod_arg3¹)
//│ 		in let f¹⁷ = (fun a¹⁰ -> (fun b⁴ -> (fun c¹ -> 
//│ 			let g¹ = (fun a¹¹ -> (fun b⁵ -> if even₁^2534(b⁵) then g¹(((a¹¹ * a¹¹) % _lh_powerMod_arg3¹), div⁰(b⁵, 2)) else f¹⁷(a¹¹, (b⁵ - 1), ((a¹¹ * c¹) % _lh_powerMod_arg3¹))))
//│ 			in if (b⁴ == 0) then c¹ else g¹(a¹⁰, b⁴))))
//│ 		in f¹⁷(a'¹, (_lh_powerMod_arg2¹ - 1), a'¹)}
//│ def process₀(_lh_process_arg1¹) = doInput₀^2309(randomInts₀^2310(111, 47), _lh_process_arg1¹)
//│ def randomInts₀(_lh_randomInts_arg1¹, _lh_randomInts_arg2¹) = if ((1 <= _lh_randomInts_arg1¹) && (_lh_randomInts_arg1¹ <= 2147483562)) then if ((1 <= _lh_randomInts_arg2¹) && (_lh_randomInts_arg2¹ <= 2147483398)) then rands₀^2042(_lh_randomInts_arg1¹, _lh_randomInts_arg2¹) else error⁰([LH_C 'r' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'B' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C 'd' [LH_C '.' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) else error⁰([LH_C 'r' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'B' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'f' [LH_C 'i' [LH_C 'r' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C 'd' [LH_C '.' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ def random₀(_lh_random_arg1¹, _lh_random_arg2¹) = 
//│ 	let ns¹ = chop₀^1986(65536, _lh_random_arg1¹)
//│ 	in let _lh_matchIdent¹³ = splitAt_lz₀^1991(length₀^1992(ns¹), _lh_random_arg2¹)
//│ 	in case _lh_matchIdent¹³ of {
//│ 		LH_P2 _lh_random_LH_P2_0¹ _lh_random_LH_P2_1¹ => [LH_P2 makeNumber₀^1999(65536, uniform₀^2002(ns¹, _lh_random_LH_P2_0¹)) _lh_random_LH_P2_1¹]
//│ 		| _  => error⁰}
//│ def rands₀(_lh_rands_arg1¹, _lh_rands_arg2¹) = 
//│ 	let k² = div⁰(_lh_rands_arg1¹, 53668)
//│ 	in let s1'¹ = ((40014 * (_lh_rands_arg1¹ - (k² * 53668))) - (k² * 12211))
//│ 	in let s1''¹ = if (s1'¹ < 0) then (s1'¹ + 2147483563) else s1'¹
//│ 	in let k'¹ = div⁰(_lh_rands_arg2¹, 52774)
//│ 	in let s2'¹ = ((40692 * (_lh_rands_arg2¹ - (k'¹ * 52774))) - (k'¹ * 3791))
//│ 	in let s2''¹ = if (s2'¹ < 0) then (s2'¹ + 2147483399) else s2'¹
//│ 	in let z¹ = (s1''¹ - s2''¹)
//│ 	in if (z¹ < 1) then lazy⁰([LH_C (z¹ + 2147483562) rands₀^1847(s1''¹, s2''¹)]) else lazy⁰([LH_C z¹ rands₀^1856(s1''¹, s2''¹)])
//│ def singleTestX₀(_lh_singleTestX_arg1¹, _lh_singleTestX_arg2¹, _lh_singleTestX_arg3¹) = case _lh_singleTestX_arg2¹ of {
//│ 	LH_P2 _lh_singleTestX_LH_P2_0¹ _lh_singleTestX_LH_P2_1¹ => 
//│ 		let square¹ = (fun x¹⁰ -> ((x¹⁰ * x¹⁰) % _lh_singleTestX_arg1¹))
//│ 		in let witness¹ = (fun ls²³ -> 
//│ 			let _lh_matchIdent²² = ls²³
//│ 			in case _lh_matchIdent²² of {
//│ 				LH_N  => [False]
//│ 				| LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1²)
//│ 				| _  => error⁰})
//│ 		in let _lh_matchIdent²³ = take_lz₁^2687(_lh_singleTestX_LH_P2_0¹, iterate₀^2690(square¹, powerMod₀^2693(_lh_singleTestX_arg3¹, _lh_singleTestX_LH_P2_1¹, _lh_singleTestX_arg1¹)))
//│ 		in case _lh_matchIdent²³ of {
//│ 			LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1³))
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def singleTest₀(_lh_singleTest_arg1¹, _lh_singleTest_arg2¹, _lh_singleTest_arg3¹) = 
//│ 	let _lh_matchIdent¹² = random₀^1873((_lh_singleTest_arg1¹ - 2), _lh_singleTest_arg3¹)
//│ 	in case _lh_matchIdent¹² of {
//│ 		LH_P2 _lh_singleTest_LH_P2_0¹ _lh_singleTest_LH_P2_1¹ => [LH_P2 singleTestX₀^1883(_lh_singleTest_arg1¹, _lh_singleTest_arg2¹, (2 + _lh_singleTest_LH_P2_0¹)) _lh_singleTest_LH_P2_1¹]
//│ 		| _  => error⁰}
//│ def splitAt_lz₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) = [LH_P2 take_lz₀^2736(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) drop_lz₀^2741(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)]
//│ def take_lz₀(n⁷, ls²¹) = if (n⁷ > 0) then case force⁰(ls²¹) of {
//│ 	LH_C h²¹ t²⁶ => [LH_C h²¹ take_lz₀^1970((n⁷ - 1), t²⁶)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lz₁(n⁶, ls²⁰) = if (n⁶ > 0) then case force⁰(ls²⁰) of {
//│ 	LH_C h²⁰ t²⁵ => [LH_C h²⁰ take_lz₁^1731((n⁶ - 1), t²⁵)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPrimetest_nofib₀(_lh_testPrimetest_nofib_arg1¹) = 
//│ 	let cts¹ = primId⁰([LH_C '2' [LH_C '4' [LH_C '|' [LH_C '4' [LH_C '8' [LH_C '|' [LH_C '4' [LH_C '7' [LH_C '|' [LH_C '1' [LH_C '3' [LH_C '1' [LH_C '7' [LH_C '|' [LH_C '8' [LH_C '9' [LH_C '0' [LH_C '1' [LH_N]]]]]]]]]]]]]]]]]]])
//│ 	in process₀^1954(lines₀^1955(cts¹))
//│ def uniform₀(_lh_uniform_arg1¹, _lh_uniform_arg2¹) = case _lh_uniform_arg1¹ of {
//│ 	LH_C _lh_uniform_LH_C_0⁵ _lh_uniform_LH_C_1⁵ => case _lh_uniform_LH_C_1⁵ of {
//│ 		LH_N  => case _lh_uniform_arg2¹ of {
//│ 			LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {
//│ 				LH_N  => [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]]
//│ 				| _  => case _lh_uniform_arg2¹ of {
//│ 					LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => 
//│ 						let t³⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ 						in if (t³⁰ == _lh_uniform_LH_C_0⁵) then [LH_C t³⁰ uniform₀^2807(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t³⁰ map₀^2814((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)]
//│ 					| _  => error⁰}}
//│ 			| _  => case _lh_uniform_arg2¹ of {
//│ 				LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => 
//│ 					let t³¹ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ 					in if (t³¹ == _lh_uniform_LH_C_0⁵) then [LH_C t³¹ uniform₀^2846(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)] else [LH_C t³¹ map₀^2853((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)]
//│ 				| _  => error⁰}}
//│ 		| _  => case _lh_uniform_arg2¹ of {
//│ 			LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => 
//│ 				let t³² = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ 				in if (t³² == _lh_uniform_LH_C_0⁵) then [LH_C t³² uniform₀^2885(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)] else [LH_C t³² map₀^2892((fun x¹³ -> (x¹³ % 65536)), _lh_uniform_LH_C_1⁹)]
//│ 			| _  => error⁰}}
//│ 	| _  => error⁰}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec break_d0 _lh_break_arg1_1 _lh_break_arg2_1 =
//│ 		  (match _lh_break_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2((`LH_N), (`LH_N)))
//│ 		    | `LH_C(_lh_break_LH_C_0_1, _lh_break_LH_C_1_1) -> 
//│ 		      (if (_lh_break_arg1_1 _lh_break_LH_C_0_1) then
//│ 		        (`LH_P2((`LH_N), (`LH_C(_lh_break_LH_C_0_1, _lh_break_LH_C_1_1))))
//│ 		      else
//│ 		        (let rec _lh_matchIdent_1_6 = ((break_d0 _lh_break_arg1_1) _lh_break_LH_C_1_1) in
//│ 		          (match _lh_matchIdent_1_6 with
//│ 		            | `LH_P2(_lh_break_LH_P2_0_1, _lh_break_LH_P2_1_1) -> 
//│ 		              (`LH_P2((`LH_C(_lh_break_LH_C_0_1, _lh_break_LH_P2_0_1)), _lh_break_LH_P2_1_1))
//│ 		            | _ -> 
//│ 		              (failwith "error"))))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and chop_d0 _lh_chop_arg1_1 =
//│ 		  (let rec chop'_1 = (fun a_9 n_9 -> 
//│ 		    (let rec _lh_matchIdent_2_0 = ((divmod_d1 n_9) _lh_chop_arg1_1) in
//│ 		      (match _lh_matchIdent_2_0 with
//│ 		        | `LH_P2(_lh_chop_LH_P2_0_1, _lh_chop_LH_P2_1_1) -> 
//│ 		          (if (n_9 = 0) then
//│ 		            a_9
//│ 		          else
//│ 		            ((chop'_1 (`LH_C(_lh_chop_LH_P2_1_1, a_9))) _lh_chop_LH_P2_0_1))
//│ 		        | _ -> 
//│ 		          (failwith "error")))) in
//│ 		    (chop'_1 (`LH_N)))
//│ 		and divmod_d0 _lh_divmod_arg1_2 _lh_divmod_arg2_2 =
//│ 		  (`LH_P2((_lh_divmod_arg1_2 / _lh_divmod_arg2_2), (_lh_divmod_arg1_2 mod _lh_divmod_arg2_2)))
//│ 		and divmod_d1 _lh_divmod_arg1_1 _lh_divmod_arg2_1 =
//│ 		  (`LH_P2((_lh_divmod_arg1_1 / _lh_divmod_arg2_1), (_lh_divmod_arg1_1 mod _lh_divmod_arg2_1)))
//│ 		and doInput_d0 _lh_doInput_arg1_1 _lh_doInput_arg2_1 =
//│ 		  (match _lh_doInput_arg2_1 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_doInput_LH_C_0_1, _lh_doInput_LH_C_1_1) -> 
//│ 		      (((doLine_d0 _lh_doInput_LH_C_0_1) (fun state_1 -> 
//│ 		        ((doInput_d0 state_1) _lh_doInput_LH_C_1_1))) _lh_doInput_arg1_1)
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and doLine_d0 _lh_doLine_arg1_1 _lh_doLine_arg2_1 _lh_doLine_arg3_1 =
//│ 		  (let rec n_8 = (int_val_of_string_d0 _lh_doLine_arg1_1) in
//│ 		    (let rec _lh_matchIdent_1_5 = (((multiTest_d0 100) _lh_doLine_arg3_1) n_8) in
//│ 		      (match _lh_matchIdent_1_5 with
//│ 		        | `LH_P2(_lh_doLine_LH_P2_0_1, _lh_doLine_LH_P2_1_1) -> 
//│ 		          (if _lh_doLine_LH_P2_0_1 then
//│ 		            (`LH_C((`LH_C('P', (`LH_C('r', (`LH_C('o', (`LH_C('b', (`LH_C('a', (`LH_C('b', (`LH_C('l', (`LH_C('y', (`LH_C(' ', (`LH_C('p', (`LH_C('r', (`LH_C('i', (`LH_C('m', (`LH_C('e', (`LH_N))))))))))))))))))))))))))))), (_lh_doLine_arg2_1 _lh_doLine_LH_P2_1_1)))
//│ 		          else
//│ 		            (`LH_C((`LH_C('C', (`LH_C('o', (`LH_C('m', (`LH_C('p', (`LH_C('o', (`LH_C('s', (`LH_C('i', (`LH_C('t', (`LH_C('e', (`LH_N))))))))))))))))))), (_lh_doLine_arg2_1 _lh_doLine_LH_P2_1_1))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))))
//│ 		and drop_lz_d0 _lh_drop_lz_arg1_1 _lh_drop_lz_arg2_1 =
//│ 		  (let rec _lh_matchIdent_2_1 = (Lazy.force _lh_drop_lz_arg2_1) in
//│ 		    (match _lh_matchIdent_2_1 with
//│ 		      | `LH_N -> 
//│ 		        (lazy (`LH_N))
//│ 		      | `LH_C(_lh_drop_lz_LH_C_0_1, _lh_drop_lz_LH_C_1_1) -> 
//│ 		        (if (_lh_drop_lz_arg1_1 > 0) then
//│ 		          ((drop_lz_d0 (_lh_drop_lz_arg1_1 - 1)) _lh_drop_lz_LH_C_1_1)
//│ 		        else
//│ 		          _lh_drop_lz_LH_C_1_1)
//│ 		      | _ -> 
//│ 		        (failwith "error")))
//│ 		and even_d0 _lh_even_arg1_1 =
//│ 		  ((_lh_even_arg1_1 mod 2) = 0)
//│ 		and even_d1 _lh_even_arg1_2 =
//│ 		  ((_lh_even_arg1_2 mod 2) = 0)
//│ 		and findKQ_d0 _lh_findKQ_arg1_1 =
//│ 		  (let rec f_1_5 = (fun _lh_f_arg1_2 -> 
//│ 		    (match _lh_f_arg1_2 with
//│ 		      | `LH_P2(_lh_f_LH_P2_0_2, _lh_f_LH_P2_1_2) -> 
//│ 		        (let rec _lh_matchIdent_1_9 = ((divmod_d0 _lh_f_LH_P2_1_2) 2) in
//│ 		          (match _lh_matchIdent_1_9 with
//│ 		            | `LH_P2(_lh_f_LH_P2_0_3, _lh_f_LH_P2_1_3) -> 
//│ 		              (if (_lh_f_LH_P2_1_3 = 0) then
//│ 		                (f_1_5 (`LH_P2((_lh_f_LH_P2_0_2 + 1), _lh_f_LH_P2_0_3)))
//│ 		              else
//│ 		                (`LH_P2(_lh_f_LH_P2_0_2, _lh_f_LH_P2_1_2)))
//│ 		            | _ -> 
//│ 		              (failwith "error")))
//│ 		      | _ -> 
//│ 		        (failwith "error"))) in
//│ 		    (f_1_5 (`LH_P2(0, (_lh_findKQ_arg1_1 - 1)))))
//│ 		and foldl_d0 f_2_0 i_3 ls_2_5 =
//│ 		  (match ls_2_5 with
//│ 		    | `LH_C(h_2_4, t_2_9) -> 
//│ 		      (((foldl_d0 f_2_0) ((f_2_0 i_3) h_2_4)) t_2_9)
//│ 		    | `LH_N -> 
//│ 		      i_3)
//│ 		and int_val_of_char_d0 _lh_int_val_of_char_arg1_1 =
//│ 		  ((int_of_char _lh_int_val_of_char_arg1_1) - 48)
//│ 		and int_val_of_string_d0 _lh_int_val_of_string_arg1_1 =
//│ 		  (let rec f_1_8 = (fun _lh_f_arg1_3 _lh_f_arg2_1 -> 
//│ 		    (match _lh_f_arg1_3 with
//│ 		      | `LH_N -> 
//│ 		        _lh_f_arg2_1
//│ 		      | `LH_C(_lh_f_LH_C_0_1, _lh_f_LH_C_1_1) -> 
//│ 		        ((f_1_8 _lh_f_LH_C_1_1) ((10 * _lh_f_arg2_1) + (int_val_of_char_d0 _lh_f_LH_C_0_1)))
//│ 		      | _ -> 
//│ 		        (failwith "error"))) in
//│ 		    ((f_1_8 _lh_int_val_of_string_arg1_1) 0))
//│ 		and iterate_d0 f_1_6 x_9 =
//│ 		  (lazy (`LH_C(x_9, ((iterate_d0 f_1_6) (f_1_6 x_9)))))
//│ 		and length_d0 ls_2_2 =
//│ 		  (match ls_2_2 with
//│ 		    | `LH_C(h_2_2, t_2_7) -> 
//│ 		      (1 + (length_d0 t_2_7))
//│ 		    | `LH_N -> 
//│ 		      0)
//│ 		and lines_d0 _lh_lines_arg1_1 =
//│ 		  (let rec _lh_matchIdent_1_7 = ((break_d0 (fun x_8 -> 
//│ 		    (x_8 = '|'))) _lh_lines_arg1_1) in
//│ 		    (match _lh_matchIdent_1_7 with
//│ 		      | `LH_P2(_lh_lines_LH_P2_0_1, _lh_lines_LH_P2_1_1) -> 
//│ 		        (`LH_C(_lh_lines_LH_P2_0_1, (let rec _lh_matchIdent_1_8 = _lh_lines_LH_P2_1_1 in
//│ 		          (match _lh_matchIdent_1_8 with
//│ 		            | `LH_N -> 
//│ 		              (`LH_N)
//│ 		            | `LH_C(_lh_lines_LH_C_0_1, _lh_lines_LH_C_1_1) -> 
//│ 		              (lines_d0 _lh_lines_LH_C_1_1)
//│ 		            | _ -> 
//│ 		              (failwith "error")))))
//│ 		      | _ -> 
//│ 		        (failwith "error")))
//│ 		and makeNumber_d0 _lh_makeNumber_arg1_1 =
//│ 		  ((foldl_d0 (fun a_1_2 x_1_4 -> 
//│ 		    ((a_1_2 * _lh_makeNumber_arg1_1) + x_1_4))) 0)
//│ 		and map_d0 f_1_9 ls_2_4 =
//│ 		  (match ls_2_4 with
//│ 		    | `LH_C(h_2_3, t_2_8) -> 
//│ 		      (`LH_C((f_1_9 h_2_3), ((map_d0 f_1_9) t_2_8)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N))
//│ 		and multiTest_d0 _lh_multiTest_arg1_1 _lh_multiTest_arg2_1 _lh_multiTest_arg3_1 =
//│ 		  (let rec mTest_1 = (fun k_3 rs_1 -> 
//│ 		    (if (k_3 = 0) then
//│ 		      (`LH_P2(true, rs_1))
//│ 		    else
//│ 		      (let rec _lh_matchIdent_1_4 = (((singleTest_d0 _lh_multiTest_arg3_1) (findKQ_d0 _lh_multiTest_arg3_1)) rs_1) in
//│ 		        (match _lh_matchIdent_1_4 with
//│ 		          | `LH_P2(_lh_multiTest_LH_P2_0_1, _lh_multiTest_LH_P2_1_1) -> 
//│ 		            (if _lh_multiTest_LH_P2_0_1 then
//│ 		              ((mTest_1 (k_3 - 1)) _lh_multiTest_LH_P2_1_1)
//│ 		            else
//│ 		              (`LH_P2(false, _lh_multiTest_LH_P2_1_1)))
//│ 		          | _ -> 
//│ 		            (failwith "error"))))) in
//│ 		    (if ((_lh_multiTest_arg3_1 <= 1) || (even_d0 _lh_multiTest_arg3_1)) then
//│ 		      (`LH_P2((_lh_multiTest_arg3_1 = 2), _lh_multiTest_arg2_1))
//│ 		    else
//│ 		      ((mTest_1 _lh_multiTest_arg1_1) _lh_multiTest_arg2_1)))
//│ 		and powerMod_d0 _lh_powerMod_arg1_1 _lh_powerMod_arg2_1 _lh_powerMod_arg3_1 =
//│ 		  (match _lh_powerMod_arg2_1 with
//│ 		    | 0 -> 
//│ 		      1
//│ 		    | _ -> 
//│ 		      (let rec a'_1 = (_lh_powerMod_arg1_1 mod _lh_powerMod_arg3_1) in
//│ 		        (let rec f_1_7 = (fun a_1_0 b_4 c_1 -> 
//│ 		          (let rec g_1 = (fun a_1_1 b_5 -> 
//│ 		            (if (even_d1 b_5) then
//│ 		              ((g_1 ((a_1_1 * a_1_1) mod _lh_powerMod_arg3_1)) (b_5 / 2))
//│ 		            else
//│ 		              (((f_1_7 a_1_1) (b_5 - 1)) ((a_1_1 * c_1) mod _lh_powerMod_arg3_1)))) in
//│ 		            (if (b_4 = 0) then
//│ 		              c_1
//│ 		            else
//│ 		              ((g_1 a_1_0) b_4)))) in
//│ 		          (((f_1_7 a'_1) (_lh_powerMod_arg2_1 - 1)) a'_1))))
//│ 		and process_d0 _lh_process_arg1_1 =
//│ 		  ((doInput_d0 ((randomInts_d0 111) 47)) _lh_process_arg1_1)
//│ 		and randomInts_d0 _lh_randomInts_arg1_1 _lh_randomInts_arg2_1 =
//│ 		  (if ((1 <= _lh_randomInts_arg1_1) && (_lh_randomInts_arg1_1 <= 2147483562)) then
//│ 		    (if ((1 <= _lh_randomInts_arg2_1) && (_lh_randomInts_arg2_1 <= 2147483398)) then
//│ 		      ((rands_d0 _lh_randomInts_arg1_1) _lh_randomInts_arg2_1)
//│ 		    else
//│ 		      ((failwith "error") (`LH_C('r', (`LH_C('a', (`LH_C('n', (`LH_C('d', (`LH_C('o', (`LH_C('m', (`LH_C('I', (`LH_C('n', (`LH_C('t', (`LH_C('s', (`LH_C(':', (`LH_C(' ', (`LH_C('B', (`LH_C('a', (`LH_C('d', (`LH_C(' ', (`LH_C('s', (`LH_C('e', (`LH_C('c', (`LH_C('o', (`LH_C('n', (`LH_C('d', (`LH_C(' ', (`LH_C('s', (`LH_C('e', (`LH_C('e', (`LH_C('d', (`LH_C('.', (`LH_N)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
//│ 		  else
//│ 		    ((failwith "error") (`LH_C('r', (`LH_C('a', (`LH_C('n', (`LH_C('d', (`LH_C('o', (`LH_C('m', (`LH_C('I', (`LH_C('n', (`LH_C('t', (`LH_C('s', (`LH_C(':', (`LH_C(' ', (`LH_C('B', (`LH_C('a', (`LH_C('d', (`LH_C(' ', (`LH_C('f', (`LH_C('i', (`LH_C('r', (`LH_C('s', (`LH_C('t', (`LH_C(' ', (`LH_C('s', (`LH_C('e', (`LH_C('e', (`LH_C('d', (`LH_C('.', (`LH_N)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
//│ 		and random_d0 _lh_random_arg1_1 _lh_random_arg2_1 =
//│ 		  (let rec ns_1 = ((chop_d0 65536) _lh_random_arg1_1) in
//│ 		    (let rec _lh_matchIdent_1_3 = ((splitAt_lz_d0 (length_d0 ns_1)) _lh_random_arg2_1) in
//│ 		      (match _lh_matchIdent_1_3 with
//│ 		        | `LH_P2(_lh_random_LH_P2_0_1, _lh_random_LH_P2_1_1) -> 
//│ 		          (`LH_P2(((makeNumber_d0 65536) ((uniform_d0 ns_1) _lh_random_LH_P2_0_1)), _lh_random_LH_P2_1_1))
//│ 		        | _ -> 
//│ 		          (failwith "error"))))
//│ 		and rands_d0 _lh_rands_arg1_1 _lh_rands_arg2_1 =
//│ 		  (let rec k_2 = (_lh_rands_arg1_1 / 53668) in
//│ 		    (let rec s1'_1 = ((40014 * (_lh_rands_arg1_1 - (k_2 * 53668))) - (k_2 * 12211)) in
//│ 		      (let rec s1''_1 = (if (s1'_1 < 0) then
//│ 		        (s1'_1 + 2147483563)
//│ 		      else
//│ 		        s1'_1) in
//│ 		        (let rec k'_1 = (_lh_rands_arg2_1 / 52774) in
//│ 		          (let rec s2'_1 = ((40692 * (_lh_rands_arg2_1 - (k'_1 * 52774))) - (k'_1 * 3791)) in
//│ 		            (let rec s2''_1 = (if (s2'_1 < 0) then
//│ 		              (s2'_1 + 2147483399)
//│ 		            else
//│ 		              s2'_1) in
//│ 		              (let rec z_1 = (s1''_1 - s2''_1) in
//│ 		                (if (z_1 < 1) then
//│ 		                  (lazy (`LH_C((z_1 + 2147483562), ((rands_d0 s1''_1) s2''_1))))
//│ 		                else
//│ 		                  (lazy (`LH_C(z_1, ((rands_d0 s1''_1) s2''_1))))))))))))
//│ 		and singleTestX_d0 _lh_singleTestX_arg1_1 _lh_singleTestX_arg2_1 _lh_singleTestX_arg3_1 =
//│ 		  (match _lh_singleTestX_arg2_1 with
//│ 		    | `LH_P2(_lh_singleTestX_LH_P2_0_1, _lh_singleTestX_LH_P2_1_1) -> 
//│ 		      (let rec square_1 = (fun x_1_0 -> 
//│ 		        ((x_1_0 * x_1_0) mod _lh_singleTestX_arg1_1)) in
//│ 		        (let rec witness_1 = (fun ls_2_3 -> 
//│ 		          (let rec _lh_matchIdent_2_2 = ls_2_3 in
//│ 		            (match _lh_matchIdent_2_2 with
//│ 		              | `LH_N -> 
//│ 		                false
//│ 		              | `LH_C(_lh_singleTestX_LH_C_0_2, _lh_singleTestX_LH_C_1_2) -> 
//│ 		                (if (_lh_singleTestX_LH_C_0_2 = (_lh_singleTestX_arg1_1 - 1)) then
//│ 		                  true
//│ 		                else
//│ 		                  (if (_lh_singleTestX_LH_C_0_2 = 1) then
//│ 		                    false
//│ 		                  else
//│ 		                    (witness_1 _lh_singleTestX_LH_C_1_2)))
//│ 		              | _ -> 
//│ 		                (failwith "error")))) in
//│ 		          (let rec _lh_matchIdent_2_3 = ((take_lz_d1 _lh_singleTestX_LH_P2_0_1) ((iterate_d0 square_1) (((powerMod_d0 _lh_singleTestX_arg3_1) _lh_singleTestX_LH_P2_1_1) _lh_singleTestX_arg1_1))) in
//│ 		            (match _lh_matchIdent_2_3 with
//│ 		              | `LH_C(_lh_singleTestX_LH_C_0_3, _lh_singleTestX_LH_C_1_3) -> 
//│ 		                (((_lh_singleTestX_LH_C_0_3 = 1) || (_lh_singleTestX_LH_C_0_3 = (_lh_singleTestX_arg1_1 - 1))) || (witness_1 _lh_singleTestX_LH_C_1_3))
//│ 		              | _ -> 
//│ 		                (failwith "error")))))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and singleTest_d0 _lh_singleTest_arg1_1 _lh_singleTest_arg2_1 _lh_singleTest_arg3_1 =
//│ 		  (let rec _lh_matchIdent_1_2 = ((random_d0 (_lh_singleTest_arg1_1 - 2)) _lh_singleTest_arg3_1) in
//│ 		    (match _lh_matchIdent_1_2 with
//│ 		      | `LH_P2(_lh_singleTest_LH_P2_0_1, _lh_singleTest_LH_P2_1_1) -> 
//│ 		        (`LH_P2((((singleTestX_d0 _lh_singleTest_arg1_1) _lh_singleTest_arg2_1) (2 + _lh_singleTest_LH_P2_0_1)), _lh_singleTest_LH_P2_1_1))
//│ 		      | _ -> 
//│ 		        (failwith "error")))
//│ 		and splitAt_lz_d0 _lh_splitAt_lz_arg1_1 _lh_splitAt_lz_arg2_1 =
//│ 		  (`LH_P2(((take_lz_d0 _lh_splitAt_lz_arg1_1) _lh_splitAt_lz_arg2_1), ((drop_lz_d0 _lh_splitAt_lz_arg1_1) _lh_splitAt_lz_arg2_1)))
//│ 		and take_lz_d0 n_7 ls_2_1 =
//│ 		  (if (n_7 > 0) then
//│ 		    (match (Lazy.force ls_2_1) with
//│ 		      | `LH_C(h_2_1, t_2_6) -> 
//│ 		        (`LH_C(h_2_1, ((take_lz_d0 (n_7 - 1)) t_2_6)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and take_lz_d1 n_6 ls_2_0 =
//│ 		  (if (n_6 > 0) then
//│ 		    (match (Lazy.force ls_2_0) with
//│ 		      | `LH_C(h_2_0, t_2_5) -> 
//│ 		        (`LH_C(h_2_0, ((take_lz_d1 (n_6 - 1)) t_2_5)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and testPrimetest_nofib_d0 _lh_testPrimetest_nofib_arg1_1 =
//│ 		  (let rec cts_1 = (`LH_C('2', (`LH_C('4', (`LH_C('|', (`LH_C('4', (`LH_C('8', (`LH_C('|', (`LH_C('4', (`LH_C('7', (`LH_C('|', (`LH_C('1', (`LH_C('3', (`LH_C('1', (`LH_C('7', (`LH_C('|', (`LH_C('8', (`LH_C('9', (`LH_C('0', (`LH_C('1', (`LH_N))))))))))))))))))))))))))))))))))))) in
//│ 		    (process_d0 (lines_d0 cts_1)))
//│ 		and uniform_d0 _lh_uniform_arg1_1 _lh_uniform_arg2_1 =
//│ 		  (match _lh_uniform_arg1_1 with
//│ 		    | `LH_C(_lh_uniform_LH_C_0_5, _lh_uniform_LH_C_1_5) -> 
//│ 		      (match _lh_uniform_LH_C_1_5 with
//│ 		        | `LH_N -> 
//│ 		          (match _lh_uniform_arg2_1 with
//│ 		            | `LH_C(_lh_uniform_LH_C_0_6, _lh_uniform_LH_C_1_6) -> 
//│ 		              (match _lh_uniform_LH_C_1_6 with
//│ 		                | `LH_N -> 
//│ 		                  (`LH_C((_lh_uniform_LH_C_0_6 mod _lh_uniform_LH_C_0_5), (`LH_N)))
//│ 		                | _ -> 
//│ 		                  (match _lh_uniform_arg2_1 with
//│ 		                    | `LH_C(_lh_uniform_LH_C_0_7, _lh_uniform_LH_C_1_7) -> 
//│ 		                      (let rec t_3_0 = (_lh_uniform_LH_C_0_7 mod (_lh_uniform_LH_C_0_5 + 1)) in
//│ 		                        (if (t_3_0 = _lh_uniform_LH_C_0_5) then
//│ 		                          (`LH_C(t_3_0, ((uniform_d0 _lh_uniform_LH_C_1_5) _lh_uniform_LH_C_1_7)))
//│ 		                        else
//│ 		                          (`LH_C(t_3_0, ((map_d0 (fun x_1_1 -> 
//│ 		                            (x_1_1 mod 65536))) _lh_uniform_LH_C_1_7)))))
//│ 		                    | _ -> 
//│ 		                      (failwith "error")))
//│ 		            | _ -> 
//│ 		              (match _lh_uniform_arg2_1 with
//│ 		                | `LH_C(_lh_uniform_LH_C_0_8, _lh_uniform_LH_C_1_8) -> 
//│ 		                  (let rec t_3_1 = (_lh_uniform_LH_C_0_8 mod (_lh_uniform_LH_C_0_5 + 1)) in
//│ 		                    (if (t_3_1 = _lh_uniform_LH_C_0_5) then
//│ 		                      (`LH_C(t_3_1, ((uniform_d0 _lh_uniform_LH_C_1_5) _lh_uniform_LH_C_1_8)))
//│ 		                    else
//│ 		                      (`LH_C(t_3_1, ((map_d0 (fun x_1_2 -> 
//│ 		                        (x_1_2 mod 65536))) _lh_uniform_LH_C_1_8)))))
//│ 		                | _ -> 
//│ 		                  (failwith "error")))
//│ 		        | _ -> 
//│ 		          (match _lh_uniform_arg2_1 with
//│ 		            | `LH_C(_lh_uniform_LH_C_0_9, _lh_uniform_LH_C_1_9) -> 
//│ 		              (let rec t_3_2 = (_lh_uniform_LH_C_0_9 mod (_lh_uniform_LH_C_0_5 + 1)) in
//│ 		                (if (t_3_2 = _lh_uniform_LH_C_0_5) then
//│ 		                  (`LH_C(t_3_2, ((uniform_d0 _lh_uniform_LH_C_1_5) _lh_uniform_LH_C_1_9)))
//│ 		                else
//│ 		                  (`LH_C(t_3_2, ((map_d0 (fun x_1_3 -> 
//│ 		                    (x_1_3 mod 65536))) _lh_uniform_LH_C_1_9)))))
//│ 		            | _ -> 
//│ 		              (failwith "error")))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		(testPrimetest_nofib_d0 0)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testPrimetest_nofib₀^2928] (hopeless to continue)
//│ 	[testPrimetest_nofib₀^2928 · lines₀^1955] (using original def)
//│ 		[testPrimetest_nofib₀^2928 · lines₀^1955 · break₀^2350] (using original def)
//│ 			[testPrimetest_nofib₀^2928 · lines₀^1955 · break₀^2350 · break₀^2331] ---> [testPrimetest_nofib₀^2928 · lines₀^1955 · break₀^2350] (using original def)
//│ 		[testPrimetest_nofib₀^2928 · lines₀^1955 · lines₀^2365] ---> [testPrimetest_nofib₀^2928 · lines₀^1955] (using original def)
//│ 	[testPrimetest_nofib₀^2928 · process₀^1954] (using original def)
//│ 		[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309] (using original def)
//│ 			[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doInput₀^2381] ---> [testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309] (using original def)
//│ 			[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378] (using original def)
//│ 				[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · int_val_of_string₀^2233] (using original def)
//│ 					[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · int_val_of_string₀^2233 · int_val_of_char₀^2621] (using original def)
//│ 				[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236] (using original def)
//│ 					[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · even₀^2212] (using original def)
//│ 					[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · findKQ₀^2178] (using original def)
//│ 						[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · findKQ₀^2178 · divmod₀^2395] (using original def)
//│ 					[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175] (using original def)
//│ 						[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873] (using original def)
//│ 							[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · chop₀^1986] (using original def)
//│ 								[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · chop₀^1986 · divmod₁^2446] (using original def)
//│ 							[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · length₀^1992] (using original def)
//│ 								[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · length₀^1992 · length₀^2641] ---> [testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · length₀^1992] (using original def)
//│ 							[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · makeNumber₀^1999] (using original def)
//│ 								[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · makeNumber₀^1999 · foldl₀^2912] (using original def)
//│ 									[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · makeNumber₀^1999 · foldl₀^2912 · foldl₀^2764] ---> [testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · makeNumber₀^1999 · foldl₀^2912] (using original def)
//│ 							[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · splitAt_lz₀^1991] (using original def)
//│ 								[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · splitAt_lz₀^1991 · drop_lz₀^2741] (using original def)
//│ 									[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · splitAt_lz₀^1991 · drop_lz₀^2741 · drop_lz₀^2498] ---> [testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · splitAt_lz₀^1991 · drop_lz₀^2741] (using original def)
//│ 								[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · splitAt_lz₀^1991 · take_lz₀^2736] (using original def)
//│ 									[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · splitAt_lz₀^1991 · take_lz₀^2736 · take_lz₀^1970] ---> [testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · splitAt_lz₀^1991 · take_lz₀^2736] (using original def)
//│ 							[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · uniform₀^2002] (using original def)
//│ 								[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · uniform₀^2002 · map₀^2814] (using original def)
//│ 									[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · uniform₀^2002 · map₀^2814 · map₀^2753] ---> [testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · uniform₀^2002 · map₀^2814] (using original def)
//│ 								[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · uniform₀^2002 · map₀^2853] (using original def)
//│ 									[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · uniform₀^2002 · map₀^2853 · map₀^2753] ---> [testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · uniform₀^2002 · map₀^2853] (using original def)
//│ 								[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · uniform₀^2002 · map₀^2892] (using original def)
//│ 									[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · uniform₀^2002 · map₀^2892 · map₀^2753] ---> [testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · uniform₀^2002 · map₀^2892] (using original def)
//│ 								[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · uniform₀^2002 · uniform₀^2807] ---> [testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · uniform₀^2002] (using original def)
//│ 								[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · uniform₀^2002 · uniform₀^2846] ---> [testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · uniform₀^2002] (using original def)
//│ 								[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · uniform₀^2002 · uniform₀^2885] ---> [testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · random₀^1873 · uniform₀^2002] (using original def)
//│ 						[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · singleTestX₀^1883] (using original def)
//│ 							[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · singleTestX₀^1883 · iterate₀^2690] (using original def)
//│ 								[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · singleTestX₀^1883 · iterate₀^2690 · iterate₀^2516] ---> [testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · singleTestX₀^1883 · iterate₀^2690] (using original def)
//│ 							[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · singleTestX₀^1883 · powerMod₀^2693] (using original def)
//│ 								[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · singleTestX₀^1883 · powerMod₀^2693 · even₁^2534] (using original def)
//│ 							[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · singleTestX₀^1883 · take_lz₁^2687] (using original def)
//│ 								[testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · singleTestX₀^1883 · take_lz₁^2687 · take_lz₁^1731] ---> [testPrimetest_nofib₀^2928 · process₀^1954 · doInput₀^2309 · doLine₀^2378 · multiTest₀^2236 · singleTest₀^2175 · singleTestX₀^1883 · take_lz₁^2687] (using original def)
//│ 		[testPrimetest_nofib₀^2928 · process₀^1954 · randomInts₀^2310] (using original def)
//│ 			[testPrimetest_nofib₀^2928 · process₀^1954 · randomInts₀^2310 · rands₀^2042] (using original def)
//│ 				[testPrimetest_nofib₀^2928 · process₀^1954 · randomInts₀^2310 · rands₀^2042 · rands₀^1847] ---> [testPrimetest_nofib₀^2928 · process₀^1954 · randomInts₀^2310 · rands₀^2042] (using original def)
//│ 				[testPrimetest_nofib₀^2928 · process₀^1954 · randomInts₀^2310 · rands₀^2042 · rands₀^1856] ---> [testPrimetest_nofib₀^2928 · process₀^1954 · randomInts₀^2310 · rands₀^2042] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testPrimetest_nofib₀₀(primId⁰(0))
//│ def testPrimetest_nofib₀₀(_lh_testPrimetest_nofib_arg1¹) = 
//│ 	let cts¹ = primId⁰([LH_C '2' [LH_C '4' [LH_C '|' [LH_C '4' [LH_C '8' [LH_C '|' [LH_C '4' [LH_C '7' [LH_C '|' [LH_C '1' [LH_C '3' [LH_C '1' [LH_C '7' [LH_C '|' [LH_C '8' [LH_C '9' [LH_C '0' [LH_C '1' [LH_N]]]]]]]]]]]]]]]]]]])
//│ 	in process₀₀(lines₀₀(cts¹))
//│ 	where
//│ 	def lines₀₀(_lh_lines_arg1¹) = 
//│ 		let _lh_matchIdent¹⁴ = break₀₀((fun x⁷ -> polyEq⁰(x⁷, '|')), _lh_lines_arg1¹)
//│ 		in case _lh_matchIdent¹⁴ of {
//│ 			LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => [LH_C _lh_lines_LH_P2_0¹ 
//│ 				let _lh_matchIdent¹⁵ = _lh_lines_LH_P2_1¹
//│ 				in case _lh_matchIdent¹⁵ of {
//│ 					LH_N  => [LH_N]
//│ 					| LH_C _lh_lines_LH_C_0¹ _lh_lines_LH_C_1¹ => lines₀₀(_lh_lines_LH_C_1¹)
//│ 					| _  => error⁰}]
//│ 			| _  => error⁰}
//│ 		where
//│ 		def break₀₀(_lh_break_arg1¹, _lh_break_arg2¹) = 
//│ 			case _lh_break_arg2¹ of {
//│ 				LH_N  => [LH_P2 [LH_N] [LH_N]]
//│ 				| LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1¹(_lh_break_LH_C_0¹) then [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]] else 
//│ 					let _lh_matchIdent²¹ = break₀₀(_lh_break_arg1¹, _lh_break_LH_C_1¹)
//│ 					in case _lh_matchIdent²¹ of {
//│ 						LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]
//│ 						| _  => error⁰}
//│ 				| _  => error⁰}
//│ 	def process₀₀(_lh_process_arg1¹) = 
//│ 		doInput₀₀(randomInts₀₀(111, 47), _lh_process_arg1¹)
//│ 		where
//│ 		def doInput₀₀(_lh_doInput_arg1¹, _lh_doInput_arg2¹) = 
//│ 			case _lh_doInput_arg2¹ of {
//│ 				LH_N  => [LH_N]
//│ 				| LH_C _lh_doInput_LH_C_0¹ _lh_doInput_LH_C_1¹ => doLine₀₀(_lh_doInput_LH_C_0¹, (fun state¹ -> doInput₀₀(state¹, _lh_doInput_LH_C_1¹)), _lh_doInput_arg1¹)
//│ 				| _  => error⁰}
//│ 			where
//│ 			def doLine₀₀(_lh_doLine_arg1¹, _lh_doLine_arg2¹, _lh_doLine_arg3¹) = 
//│ 				let n⁷ = int_val_of_string₀₀(_lh_doLine_arg1¹)
//│ 				in let _lh_matchIdent¹⁷ = multiTest₀₀(100, _lh_doLine_arg3¹, n⁷)
//│ 				in case _lh_matchIdent¹⁷ of {
//│ 					LH_P2 _lh_doLine_LH_P2_0¹ _lh_doLine_LH_P2_1¹ => if _lh_doLine_LH_P2_0¹ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)]
//│ 					| _  => error⁰}
//│ 				where
//│ 				def int_val_of_string₀₀(_lh_int_val_of_string_arg1¹) = 
//│ 					let f¹⁰ = (fun _lh_f_arg1² -> (fun _lh_f_arg2¹ -> case _lh_f_arg1² of {
//│ 						LH_N  => _lh_f_arg2¹
//│ 						| LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹ => f¹⁰(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2¹) + int_val_of_char₀₀(_lh_f_LH_C_0¹)))
//│ 						| _  => error⁰}))
//│ 					in f¹⁰(_lh_int_val_of_string_arg1¹, 0)
//│ 					where
//│ 					def int_val_of_char₀₀(_lh_int_val_of_char_arg1¹) = 
//│ 						(int_of_char⁰(_lh_int_val_of_char_arg1¹) - 48)
//│ 				def multiTest₀₀(_lh_multiTest_arg1¹, _lh_multiTest_arg2¹, _lh_multiTest_arg3¹) = 
//│ 					let mTest¹ = (fun k³ -> (fun rs¹ -> if (k³ == 0) then [LH_P2 [True] rs¹] else 
//│ 						let _lh_matchIdent²⁰ = singleTest₀₀(_lh_multiTest_arg3¹, findKQ₀₀(_lh_multiTest_arg3¹), rs¹)
//│ 						in case _lh_matchIdent²⁰ of {
//│ 							LH_P2 _lh_multiTest_LH_P2_0¹ _lh_multiTest_LH_P2_1¹ => if _lh_multiTest_LH_P2_0¹ then mTest¹((k³ - 1), _lh_multiTest_LH_P2_1¹) else [LH_P2 [False] _lh_multiTest_LH_P2_1¹]
//│ 							| _  => error⁰}))
//│ 					in if ((_lh_multiTest_arg3¹ <= 1) || even₀₀(_lh_multiTest_arg3¹)) then [LH_P2 (_lh_multiTest_arg3¹ == 2) _lh_multiTest_arg2¹] else mTest¹(_lh_multiTest_arg1¹, _lh_multiTest_arg2¹)
//│ 					where
//│ 					def even₀₀(_lh_even_arg1³) = 
//│ 						((_lh_even_arg1³ % 2) == 0)
//│ 					def findKQ₀₀(_lh_findKQ_arg1¹) = 
//│ 						let f¹³ = (fun _lh_f_arg1³ -> case _lh_f_arg1³ of {
//│ 							LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1² => 
//│ 								let _lh_matchIdent²² = divmod₀₀(_lh_f_LH_P2_1², 2)
//│ 								in case _lh_matchIdent²² of {
//│ 									LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => if (_lh_f_LH_P2_1³ == 0) then f¹³([LH_P2 (_lh_f_LH_P2_0² + 1) _lh_f_LH_P2_0³]) else [LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1²]
//│ 									| _  => error⁰}
//│ 							| _  => error⁰})
//│ 						in f¹³([LH_P2 0 (_lh_findKQ_arg1¹ - 1)])
//│ 						where
//│ 						def divmod₀₀(_lh_divmod_arg1³, _lh_divmod_arg2³) = 
//│ 							[LH_P2 div⁰(_lh_divmod_arg1³, _lh_divmod_arg2³) (_lh_divmod_arg1³ % _lh_divmod_arg2³)]
//│ 					def singleTest₀₀(_lh_singleTest_arg1¹, _lh_singleTest_arg2¹, _lh_singleTest_arg3¹) = 
//│ 						let _lh_matchIdent²³ = random₀₀((_lh_singleTest_arg1¹ - 2), _lh_singleTest_arg3¹)
//│ 						in case _lh_matchIdent²³ of {
//│ 							LH_P2 _lh_singleTest_LH_P2_0¹ _lh_singleTest_LH_P2_1¹ => [LH_P2 singleTestX₀₀(_lh_singleTest_arg1¹, _lh_singleTest_arg2¹, (2 + _lh_singleTest_LH_P2_0¹)) _lh_singleTest_LH_P2_1¹]
//│ 							| _  => error⁰}
//│ 						where
//│ 						def random₀₀(_lh_random_arg1¹, _lh_random_arg2¹) = 
//│ 							let ns¹ = chop₀₀(65536, _lh_random_arg1¹)
//│ 							in let _lh_matchIdent¹⁶ = splitAt_lz₀₀(length₀₀(ns¹), _lh_random_arg2¹)
//│ 							in case _lh_matchIdent¹⁶ of {
//│ 								LH_P2 _lh_random_LH_P2_0¹ _lh_random_LH_P2_1¹ => [LH_P2 makeNumber₀₀(65536, uniform₀₀(ns¹, _lh_random_LH_P2_0¹)) _lh_random_LH_P2_1¹]
//│ 								| _  => error⁰}
//│ 							where
//│ 							def chop₀₀(_lh_chop_arg1¹) = 
//│ 								let chop'¹ = (fun a⁴ -> (fun n⁴ -> 
//│ 									let _lh_matchIdent¹² = divmod₁₀(n⁴, _lh_chop_arg1¹)
//│ 									in case _lh_matchIdent¹² of {
//│ 										LH_P2 _lh_chop_LH_P2_0¹ _lh_chop_LH_P2_1¹ => if (n⁴ == 0) then a⁴ else chop'¹([LH_C _lh_chop_LH_P2_1¹ a⁴], _lh_chop_LH_P2_0¹)
//│ 										| _  => error⁰}))
//│ 								in chop'¹([LH_N])
//│ 								where
//│ 								def divmod₁₀(_lh_divmod_arg1², _lh_divmod_arg2²) = 
//│ 									[LH_P2 div⁰(_lh_divmod_arg1², _lh_divmod_arg2²) (_lh_divmod_arg1² % _lh_divmod_arg2²)]
//│ 							def length₀₀(ls⁷) = 
//│ 								case ls⁷ of {
//│ 									LH_C h⁶ t⁹ => (1 + length₀₀(t⁹))
//│ 									| LH_N  => 0}
//│ 							def makeNumber₀₀(_lh_makeNumber_arg1¹) = 
//│ 								foldl₀₀((fun a⁷ -> (fun x¹⁰ -> ((a⁷ * _lh_makeNumber_arg1¹) + x¹⁰))), 0)
//│ 								where
//│ 								def foldl₀₀(f⁸, i¹, ls⁹) = 
//│ 									case ls⁹ of {
//│ 										LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹)
//│ 										| LH_N  => i¹}
//│ 							def splitAt_lz₀₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) = 
//│ 								[LH_P2 take_lz₀₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) drop_lz₀₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)]
//│ 								where
//│ 								def drop_lz₀₀(_lh_drop_lz_arg1¹, _lh_drop_lz_arg2¹) = 
//│ 									let _lh_matchIdent¹³ = force⁰(_lh_drop_lz_arg2¹)
//│ 									in case _lh_matchIdent¹³ of {
//│ 										LH_N  => lazy⁰([LH_N])
//│ 										| LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => if (_lh_drop_lz_arg1¹ > 0) then drop_lz₀₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹) else _lh_drop_lz_LH_C_1¹
//│ 										| _  => error⁰}
//│ 								def take_lz₀₀(n⁶, ls¹¹) = 
//│ 									if (n⁶ > 0) then case force⁰(ls¹¹) of {
//│ 										LH_C h¹⁰ t¹³ => [LH_C h¹⁰ take_lz₀₀((n⁶ - 1), t¹³)]
//│ 										| LH_N  => [LH_N]} else [LH_N]
//│ 							def uniform₀₀(_lh_uniform_arg1¹, _lh_uniform_arg2¹) = 
//│ 								case _lh_uniform_arg1¹ of {
//│ 									LH_C _lh_uniform_LH_C_0⁵ _lh_uniform_LH_C_1⁵ => case _lh_uniform_LH_C_1⁵ of {
//│ 										LH_N  => case _lh_uniform_arg2¹ of {
//│ 											LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {
//│ 												LH_N  => [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]]
//│ 												| _  => case _lh_uniform_arg2¹ of {
//│ 													LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => 
//│ 														let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ 														in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)]
//│ 													| _  => error⁰}}
//│ 											| _  => case _lh_uniform_arg2¹ of {
//│ 												LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => 
//│ 													let t¹⁶ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ 													in if (t¹⁶ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)] else [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)]
//│ 												| _  => error⁰}}
//│ 										| _  => case _lh_uniform_arg2¹ of {
//│ 											LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => 
//│ 												let t¹⁷ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ 												in if (t¹⁷ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁷ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)] else [LH_C t¹⁷ map₀₂((fun x¹³ -> (x¹³ % 65536)), _lh_uniform_LH_C_1⁹)]
//│ 											| _  => error⁰}}
//│ 									| _  => error⁰}
//│ 								where
//│ 								def map₀₀(f⁶, ls⁶) = 
//│ 									case ls⁶ of {
//│ 										LH_C h⁵ t⁸ => [LH_C f⁶(h⁵) map₀₀(f⁶, t⁸)]
//│ 										| LH_N  => [LH_N]}
//│ 								def map₀₁(f¹¹, ls¹³) = 
//│ 									case ls¹³ of {
//│ 										LH_C h¹¹ t¹⁴ => [LH_C f¹¹(h¹¹) map₀₁(f¹¹, t¹⁴)]
//│ 										| LH_N  => [LH_N]}
//│ 								def map₀₂(f⁹, ls¹⁰) = 
//│ 									case ls¹⁰ of {
//│ 										LH_C h⁹ t¹² => [LH_C f⁹(h⁹) map₀₂(f⁹, t¹²)]
//│ 										| LH_N  => [LH_N]}
//│ 						def singleTestX₀₀(_lh_singleTestX_arg1¹, _lh_singleTestX_arg2¹, _lh_singleTestX_arg3¹) = 
//│ 							case _lh_singleTestX_arg2¹ of {
//│ 								LH_P2 _lh_singleTestX_LH_P2_0¹ _lh_singleTestX_LH_P2_1¹ => 
//│ 									let square¹ = (fun x⁹ -> ((x⁹ * x⁹) % _lh_singleTestX_arg1¹))
//│ 									in let witness¹ = (fun ls¹² -> 
//│ 										let _lh_matchIdent¹⁸ = ls¹²
//│ 										in case _lh_matchIdent¹⁸ of {
//│ 											LH_N  => [False]
//│ 											| LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1²)
//│ 											| _  => error⁰})
//│ 									in let _lh_matchIdent¹⁹ = take_lz₁₀(_lh_singleTestX_LH_P2_0¹, iterate₀₀(square¹, powerMod₀₀(_lh_singleTestX_arg3¹, _lh_singleTestX_LH_P2_1¹, _lh_singleTestX_arg1¹)))
//│ 									in case _lh_matchIdent¹⁹ of {
//│ 										LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1³))
//│ 										| _  => error⁰}
//│ 								| _  => error⁰}
//│ 							where
//│ 							def iterate₀₀(f⁷, x⁸) = 
//│ 								lazy⁰([LH_C x⁸ iterate₀₀(f⁷, f⁷(x⁸))])
//│ 							def powerMod₀₀(_lh_powerMod_arg1¹, _lh_powerMod_arg2¹, _lh_powerMod_arg3¹) = 
//│ 								case _lh_powerMod_arg2¹ of {
//│ 									0  => 1
//│ 									| _  => 
//│ 										let a'¹ = (_lh_powerMod_arg1¹ mod _lh_powerMod_arg3¹)
//│ 										in let f¹² = (fun a⁵ -> (fun b² -> (fun c¹ -> 
//│ 											let g¹ = (fun a⁶ -> (fun b³ -> if even₁₀(b³) then g¹(((a⁶ * a⁶) % _lh_powerMod_arg3¹), div⁰(b³, 2)) else f¹²(a⁶, (b³ - 1), ((a⁶ * c¹) % _lh_powerMod_arg3¹))))
//│ 											in if (b² == 0) then c¹ else g¹(a⁵, b²))))
//│ 										in f¹²(a'¹, (_lh_powerMod_arg2¹ - 1), a'¹)}
//│ 								where
//│ 								def even₁₀(_lh_even_arg1²) = 
//│ 									((_lh_even_arg1² % 2) == 0)
//│ 							def take_lz₁₀(n⁵, ls⁸) = 
//│ 								if (n⁵ > 0) then case force⁰(ls⁸) of {
//│ 									LH_C h⁷ t¹⁰ => [LH_C h⁷ take_lz₁₀((n⁵ - 1), t¹⁰)]
//│ 									| LH_N  => [LH_N]} else [LH_N]
//│ 		def randomInts₀₀(_lh_randomInts_arg1¹, _lh_randomInts_arg2¹) = 
//│ 			if ((1 <= _lh_randomInts_arg1¹) && (_lh_randomInts_arg1¹ <= 2147483562)) then if ((1 <= _lh_randomInts_arg2¹) && (_lh_randomInts_arg2¹ <= 2147483398)) then rands₀₀(_lh_randomInts_arg1¹, _lh_randomInts_arg2¹) else error⁰([LH_C 'r' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'B' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C 'd' [LH_C '.' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) else error⁰([LH_C 'r' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'B' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'f' [LH_C 'i' [LH_C 'r' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C 'd' [LH_C '.' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 			where
//│ 			def rands₀₀(_lh_rands_arg1¹, _lh_rands_arg2¹) = 
//│ 				let k² = div⁰(_lh_rands_arg1¹, 53668)
//│ 				in let s1'¹ = ((40014 * (_lh_rands_arg1¹ - (k² * 53668))) - (k² * 12211))
//│ 				in let s1''¹ = if (s1'¹ < 0) then (s1'¹ + 2147483563) else s1'¹
//│ 				in let k'¹ = div⁰(_lh_rands_arg2¹, 52774)
//│ 				in let s2'¹ = ((40692 * (_lh_rands_arg2¹ - (k'¹ * 52774))) - (k'¹ * 3791))
//│ 				in let s2''¹ = if (s2'¹ < 0) then (s2'¹ + 2147483399) else s2'¹
//│ 				in let z¹ = (s1''¹ - s2''¹)
//│ 				in if (z¹ < 1) then lazy⁰([LH_C (z¹ + 2147483562) rands₀₀(s1''¹, s2''¹)]) else lazy⁰([LH_C z¹ rands₀₀(s1''¹, s2''¹)])
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C _lh_chop_LH_P2_1¹ a⁴]: 1240 --->
//│ 	case ls⁷ of {LH_C h⁶ t⁹ => (1 + length₀₀(t⁹)) | LH_N  => 0}: 1439
//│ 	case _lh_uniform_LH_C_1⁵ of {LH_N  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]] | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t¹⁶ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁶ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)] else [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)] | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t¹⁷ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁷ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁷ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)] else [LH_C t¹⁷ map₀₂((fun x¹³ -> (x¹³ % 65536)), _lh_uniform_LH_C_1⁹)] | _  => error⁰}}: 2420
//│ 	case _lh_uniform_arg1¹ of {LH_C _lh_uniform_LH_C_0⁵ _lh_uniform_LH_C_1⁵ => case _lh_uniform_LH_C_1⁵ of {LH_N  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]] | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t¹⁶ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁶ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)] else [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)] | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t¹⁷ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁷ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁷ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)] else [LH_C t¹⁷ map₀₂((fun x¹³ -> (x¹³ % 65536)), _lh_uniform_LH_C_1⁹)] | _  => error⁰}} | _  => error⁰}: 2422
//│ [LH_N]: 1251 --->
//│ 	case ls⁷ of {LH_C h⁶ t⁹ => (1 + length₀₀(t⁹)) | LH_N  => 0}: 1439
//│ 	case _lh_uniform_LH_C_1⁵ of {LH_N  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]] | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t¹⁶ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁶ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)] else [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)] | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t¹⁷ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁷ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁷ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)] else [LH_C t¹⁷ map₀₂((fun x¹³ -> (x¹³ % 65536)), _lh_uniform_LH_C_1⁹)] | _  => error⁰}}: 2420
//│ 	case _lh_uniform_arg1¹ of {LH_C _lh_uniform_LH_C_0⁵ _lh_uniform_LH_C_1⁵ => case _lh_uniform_LH_C_1⁵ of {LH_N  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]] | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t¹⁶ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁶ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)] else [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)] | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t¹⁷ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁷ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁷ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)] else [LH_C t¹⁷ map₀₂((fun x¹³ -> (x¹³ % 65536)), _lh_uniform_LH_C_1⁹)] | _  => error⁰}} | _  => error⁰}: 2422
//│ [LH_C f⁶(h⁵) map₀₀(f⁶, t⁸)]: 1264 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_N]: 1265 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_N]: 1446 --->
//│ 	case _lh_matchIdent¹³ of {LH_N  => lazy⁰([LH_N]) | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => if (_lh_drop_lz_arg1¹ > 0) then drop_lz₀₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹) else _lh_drop_lz_LH_C_1¹ | _  => error⁰}: 1465
//│ 	case force⁰(ls¹¹) of {LH_C h¹⁰ t¹³ => [LH_C h¹⁰ take_lz₀₀((n⁶ - 1), t¹³)] | LH_N  => [LH_N]}: 1610
//│ [LH_N]: 1483 --->
//│ 	case _lh_doInput_arg2¹ of {LH_N  => [LH_N] | LH_C _lh_doInput_LH_C_0¹ _lh_doInput_LH_C_1¹ => doLine₀₀(_lh_doInput_LH_C_0¹, (fun state¹ -> doInput₀₀(state¹, _lh_doInput_LH_C_1¹)), _lh_doInput_arg1¹) | _  => error⁰}: 2469
//│ [LH_C _lh_lines_LH_P2_0¹ let _lh_matchIdent¹⁵ = _lh_lines_LH_P2_1¹
//│ in case _lh_matchIdent¹⁵ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0¹ _lh_lines_LH_C_1¹ => lines₀₀(_lh_lines_LH_C_1¹) | _  => error⁰}]: 1490 --->
//│ 	case _lh_doInput_arg2¹ of {LH_N  => [LH_N] | LH_C _lh_doInput_LH_C_0¹ _lh_doInput_LH_C_1¹ => doLine₀₀(_lh_doInput_LH_C_0¹, (fun state¹ -> doInput₀₀(state¹, _lh_doInput_LH_C_1¹)), _lh_doInput_arg1¹) | _  => error⁰}: 2469
//│ [LH_P2 div⁰(_lh_divmod_arg1², _lh_divmod_arg2²) (_lh_divmod_arg1² % _lh_divmod_arg2²)]: 1505 --->
//│ 	case _lh_matchIdent¹² of {LH_P2 _lh_chop_LH_P2_0¹ _lh_chop_LH_P2_1¹ => if (n⁴ == 0) then a⁴ else chop'¹([LH_C _lh_chop_LH_P2_1¹ a⁴], _lh_chop_LH_P2_0¹) | _  => error⁰}: 1246
//│ [LH_C x⁸ iterate₀₀(f⁷, f⁷(x⁸))]: 1517 --->
//│ 	case force⁰(ls⁸) of {LH_C h⁷ t¹⁰ => [LH_C h⁷ take_lz₁₀((n⁵ - 1), t¹⁰)] | LH_N  => [LH_N]}: 1541
//│ [LH_C h⁷ take_lz₁₀((n⁵ - 1), t¹⁰)]: 1539 --->
//│ 	case _lh_matchIdent¹⁸ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1²) | _  => error⁰}: 1816
//│ 	case _lh_matchIdent¹⁹ of {LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1³)) | _  => error⁰}: 1859
//│ [LH_N]: 1540 --->
//│ 	case _lh_matchIdent¹⁸ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1²) | _  => error⁰}: 1816
//│ 	case _lh_matchIdent¹⁹ of {LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1³)) | _  => error⁰}: 1859
//│ [LH_N]: 1542 --->
//│ 	case _lh_matchIdent¹⁸ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1²) | _  => error⁰}: 1816
//│ 	case _lh_matchIdent¹⁹ of {LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1³)) | _  => error⁰}: 1859
//│ [LH_P2 take_lz₀₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) drop_lz₀₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)]: 1556 --->
//│ 	case _lh_matchIdent¹⁶ of {LH_P2 _lh_random_LH_P2_0¹ _lh_random_LH_P2_1¹ => [LH_P2 makeNumber₀₀(65536, uniform₀₀(ns¹, _lh_random_LH_P2_0¹)) _lh_random_LH_P2_1¹] | _  => error⁰}: 1678
//│ [LH_C f⁹(h⁹) map₀₂(f⁹, t¹²)]: 1585 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_N]: 1586 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_C h¹⁰ take_lz₀₀((n⁶ - 1), t¹³)]: 1608 --->
//│ 	case ls⁶ of {LH_C h⁵ t⁸ => [LH_C f⁶(h⁵) map₀₀(f⁶, t⁸)] | LH_N  => [LH_N]}: 1266
//│ 	case ls¹⁰ of {LH_C h⁹ t¹² => [LH_C f⁹(h⁹) map₀₂(f⁹, t¹²)] | LH_N  => [LH_N]}: 1587
//│ 	case ls¹³ of {LH_C h¹¹ t¹⁴ => [LH_C f¹¹(h¹¹) map₀₁(f¹¹, t¹⁴)] | LH_N  => [LH_N]}: 1879
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}: 2341
//│ 	case _lh_uniform_LH_C_1⁶ of {LH_N  => [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]] | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}}: 2342
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t¹⁶ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁶ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)] else [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)] | _  => error⁰}: 2380
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]] | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t¹⁶ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁶ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)] else [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)] | _  => error⁰}}: 2381
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t¹⁷ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁷ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁷ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)] else [LH_C t¹⁷ map₀₂((fun x¹³ -> (x¹³ % 65536)), _lh_uniform_LH_C_1⁹)] | _  => error⁰}: 2419
//│ [LH_N]: 1609 --->
//│ 	case ls⁶ of {LH_C h⁵ t⁸ => [LH_C f⁶(h⁵) map₀₀(f⁶, t⁸)] | LH_N  => [LH_N]}: 1266
//│ 	case ls¹⁰ of {LH_C h⁹ t¹² => [LH_C f⁹(h⁹) map₀₂(f⁹, t¹²)] | LH_N  => [LH_N]}: 1587
//│ 	case ls¹³ of {LH_C h¹¹ t¹⁴ => [LH_C f¹¹(h¹¹) map₀₁(f¹¹, t¹⁴)] | LH_N  => [LH_N]}: 1879
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}: 2341
//│ 	case _lh_uniform_LH_C_1⁶ of {LH_N  => [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]] | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}}: 2342
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t¹⁶ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁶ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)] else [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)] | _  => error⁰}: 2380
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]] | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t¹⁶ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁶ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)] else [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)] | _  => error⁰}}: 2381
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t¹⁷ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁷ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁷ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)] else [LH_C t¹⁷ map₀₂((fun x¹³ -> (x¹³ % 65536)), _lh_uniform_LH_C_1⁹)] | _  => error⁰}: 2419
//│ [LH_N]: 1611 --->
//│ 	case ls⁶ of {LH_C h⁵ t⁸ => [LH_C f⁶(h⁵) map₀₀(f⁶, t⁸)] | LH_N  => [LH_N]}: 1266
//│ 	case ls¹⁰ of {LH_C h⁹ t¹² => [LH_C f⁹(h⁹) map₀₂(f⁹, t¹²)] | LH_N  => [LH_N]}: 1587
//│ 	case ls¹³ of {LH_C h¹¹ t¹⁴ => [LH_C f¹¹(h¹¹) map₀₁(f¹¹, t¹⁴)] | LH_N  => [LH_N]}: 1879
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}: 2341
//│ 	case _lh_uniform_LH_C_1⁶ of {LH_N  => [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]] | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}}: 2342
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t¹⁶ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁶ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)] else [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)] | _  => error⁰}: 2380
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]] | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t¹⁶ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁶ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)] else [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)] | _  => error⁰}}: 2381
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t¹⁷ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁷ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁷ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)] else [LH_C t¹⁷ map₀₂((fun x¹³ -> (x¹³ % 65536)), _lh_uniform_LH_C_1⁹)] | _  => error⁰}: 2419
//│ [LH_P2 makeNumber₀₀(65536, uniform₀₀(ns¹, _lh_random_LH_P2_0¹)) _lh_random_LH_P2_1¹]: 1676 --->
//│ 	case _lh_matchIdent²³ of {LH_P2 _lh_singleTest_LH_P2_0¹ _lh_singleTest_LH_P2_1¹ => [LH_P2 singleTestX₀₀(_lh_singleTest_arg1¹, _lh_singleTest_arg2¹, (2 + _lh_singleTest_LH_P2_0¹)) _lh_singleTest_LH_P2_1¹] | _  => error⁰}: 2449
//│ [LH_P2 div⁰(_lh_divmod_arg1³, _lh_divmod_arg2³) (_lh_divmod_arg1³ % _lh_divmod_arg2³)]: 1701 --->
//│ 	case _lh_matchIdent²² of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => if (_lh_f_LH_P2_1³ == 0) then f¹³([LH_P2 (_lh_f_LH_P2_0² + 1) _lh_f_LH_P2_0³]) else [LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1²] | _  => error⁰}: 2215
//│ [LH_C f¹¹(h¹¹) map₀₁(f¹¹, t¹⁴)]: 1877 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_N]: 1878 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_C (z¹ + 2147483562) rands₀₀(s1''¹, s2''¹)]: 1979 --->
//│ 	case _lh_matchIdent¹³ of {LH_N  => lazy⁰([LH_N]) | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => if (_lh_drop_lz_arg1¹ > 0) then drop_lz₀₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹) else _lh_drop_lz_LH_C_1¹ | _  => error⁰}: 1465
//│ 	case force⁰(ls¹¹) of {LH_C h¹⁰ t¹³ => [LH_C h¹⁰ take_lz₀₀((n⁶ - 1), t¹³)] | LH_N  => [LH_N]}: 1610
//│ [LH_C z¹ rands₀₀(s1''¹, s2''¹)]: 1988 --->
//│ 	case _lh_matchIdent¹³ of {LH_N  => lazy⁰([LH_N]) | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => if (_lh_drop_lz_arg1¹ > 0) then drop_lz₀₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹) else _lh_drop_lz_LH_C_1¹ | _  => error⁰}: 1465
//│ 	case force⁰(ls¹¹) of {LH_C h¹⁰ t¹³ => [LH_C h¹⁰ take_lz₀₀((n⁶ - 1), t¹³)] | LH_N  => [LH_N]}: 1610
//│ [LH_P2 [True] rs¹]: 2089 --->
//│ 	case _lh_matchIdent¹⁷ of {LH_P2 _lh_doLine_LH_P2_0¹ _lh_doLine_LH_P2_1¹ => if _lh_doLine_LH_P2_0¹ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] | _  => error⁰}: 1774
//│ [LH_P2 [False] _lh_multiTest_LH_P2_1¹]: 2112 --->
//│ 	case _lh_matchIdent¹⁷ of {LH_P2 _lh_doLine_LH_P2_0¹ _lh_doLine_LH_P2_1¹ => if _lh_doLine_LH_P2_0¹ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] | _  => error⁰}: 1774
//│ [LH_P2 (_lh_multiTest_arg3¹ == 2) _lh_multiTest_arg2¹]: 2137 --->
//│ 	case _lh_matchIdent¹⁷ of {LH_P2 _lh_doLine_LH_P2_0¹ _lh_doLine_LH_P2_1¹ => if _lh_doLine_LH_P2_0¹ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] | _  => error⁰}: 1774
//│ [LH_N]: 2159 --->
//│ 	case _lh_f_arg1² of {LH_N  => _lh_f_arg2¹ | LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹ => f¹⁰(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2¹) + int_val_of_char₀₀(_lh_f_LH_C_0¹))) | _  => error⁰}: 1633
//│ [LH_N]: 2160 --->
//│ 	case _lh_matchIdent¹⁵ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0¹ _lh_lines_LH_C_1¹ => lines₀₀(_lh_lines_LH_C_1¹) | _  => error⁰}: 1488
//│ [LH_P2 [LH_N] [LH_N]]: 2161 --->
//│ 	case _lh_matchIdent¹⁴ of {LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => [LH_C _lh_lines_LH_P2_0¹ let _lh_matchIdent¹⁵ = _lh_lines_LH_P2_1¹
//│ in case _lh_matchIdent¹⁵ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0¹ _lh_lines_LH_C_1¹ => lines₀₀(_lh_lines_LH_C_1¹) | _  => error⁰}] | _  => error⁰}: 1492
//│ 	case _lh_matchIdent²¹ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹] | _  => error⁰}: 2182
//│ [LH_N]: 2165 --->
//│ 	case _lh_f_arg1² of {LH_N  => _lh_f_arg2¹ | LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹ => f¹⁰(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2¹) + int_val_of_char₀₀(_lh_f_LH_C_0¹))) | _  => error⁰}: 1633
//│ [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]: 2168 --->
//│ 	case _lh_matchIdent¹⁵ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0¹ _lh_lines_LH_C_1¹ => lines₀₀(_lh_lines_LH_C_1¹) | _  => error⁰}: 1488
//│ [LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]]: 2169 --->
//│ 	case _lh_matchIdent¹⁴ of {LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => [LH_C _lh_lines_LH_P2_0¹ let _lh_matchIdent¹⁵ = _lh_lines_LH_P2_1¹
//│ in case _lh_matchIdent¹⁵ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0¹ _lh_lines_LH_C_1¹ => lines₀₀(_lh_lines_LH_C_1¹) | _  => error⁰}] | _  => error⁰}: 1492
//│ 	case _lh_matchIdent²¹ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹] | _  => error⁰}: 2182
//│ [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹]: 2178 --->
//│ 	case _lh_f_arg1² of {LH_N  => _lh_f_arg2¹ | LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹ => f¹⁰(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2¹) + int_val_of_char₀₀(_lh_f_LH_C_0¹))) | _  => error⁰}: 1633
//│ [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]: 2180 --->
//│ 	case _lh_matchIdent¹⁴ of {LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => [LH_C _lh_lines_LH_P2_0¹ let _lh_matchIdent¹⁵ = _lh_lines_LH_P2_1¹
//│ in case _lh_matchIdent¹⁵ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0¹ _lh_lines_LH_C_1¹ => lines₀₀(_lh_lines_LH_C_1¹) | _  => error⁰}] | _  => error⁰}: 1492
//│ 	case _lh_matchIdent²¹ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹] | _  => error⁰}: 2182
//│ [LH_P2 (_lh_f_LH_P2_0² + 1) _lh_f_LH_P2_0³]: 2208 --->
//│ 	case _lh_f_arg1³ of {LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1² => let _lh_matchIdent²² = divmod₀₀(_lh_f_LH_P2_1², 2)
//│ in case _lh_matchIdent²² of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => if (_lh_f_LH_P2_1³ == 0) then f¹³([LH_P2 (_lh_f_LH_P2_0² + 1) _lh_f_LH_P2_0³]) else [LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1²] | _  => error⁰} | _  => error⁰}: 2218
//│ [LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1²]: 2212 --->
//│ 	case _lh_singleTestX_arg2¹ of {LH_P2 _lh_singleTestX_LH_P2_0¹ _lh_singleTestX_LH_P2_1¹ => let square¹ = (fun x⁹ -> ((x⁹ * x⁹) % _lh_singleTestX_arg1¹))
//│ in let witness¹ = (fun ls¹² -> let _lh_matchIdent¹⁸ = ls¹²
//│ in case _lh_matchIdent¹⁸ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1²) | _  => error⁰})
//│ in let _lh_matchIdent¹⁹ = take_lz₁₀(_lh_singleTestX_LH_P2_0¹, iterate₀₀(square¹, powerMod₀₀(_lh_singleTestX_arg3¹, _lh_singleTestX_LH_P2_1¹, _lh_singleTestX_arg1¹)))
//│ in case _lh_matchIdent¹⁹ of {LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1³)) | _  => error⁰} | _  => error⁰}: 1864
//│ [LH_P2 0 (_lh_findKQ_arg1¹ - 1)]: 2227 --->
//│ 	case _lh_f_arg1³ of {LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1² => let _lh_matchIdent²² = divmod₀₀(_lh_f_LH_P2_1², 2)
//│ in case _lh_matchIdent²² of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => if (_lh_f_LH_P2_1³ == 0) then f¹³([LH_P2 (_lh_f_LH_P2_0² + 1) _lh_f_LH_P2_0³]) else [LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1²] | _  => error⁰} | _  => error⁰}: 2218
//│ [LH_N]: 2302 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]]: 2303 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)]: 2325 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)]: 2337 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)]: 2364 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)]: 2376 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_C t¹⁷ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)]: 2403 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_C t¹⁷ map₀₂((fun x¹³ -> (x¹³ % 65536)), _lh_uniform_LH_C_1⁹)]: 2415 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_P2 singleTestX₀₀(_lh_singleTest_arg1¹, _lh_singleTest_arg2¹, (2 + _lh_singleTest_LH_P2_0¹)) _lh_singleTest_LH_P2_1¹]: 2447 --->
//│ 	case _lh_matchIdent²⁰ of {LH_P2 _lh_multiTest_LH_P2_0¹ _lh_multiTest_LH_P2_1¹ => if _lh_multiTest_LH_P2_0¹ then mTest¹((k³ - 1), _lh_multiTest_LH_P2_1¹) else [LH_P2 [False] _lh_multiTest_LH_P2_1¹] | _  => error⁰}: 2115
//│ ------------------
//│ case _lh_matchIdent¹² of {LH_P2 _lh_chop_LH_P2_0¹ _lh_chop_LH_P2_1¹ => if (n⁴ == 0) then a⁴ else chop'¹([LH_C _lh_chop_LH_P2_1¹ a⁴], _lh_chop_LH_P2_0¹) | _  => error⁰}: 1246 --->
//│ 	[LH_P2 div⁰(_lh_divmod_arg1², _lh_divmod_arg2²) (_lh_divmod_arg1² % _lh_divmod_arg2²)]: 1505
//│ case ls⁶ of {LH_C h⁵ t⁸ => [LH_C f⁶(h⁵) map₀₀(f⁶, t⁸)] | LH_N  => [LH_N]}: 1266 --->
//│ 	[LH_C h¹⁰ take_lz₀₀((n⁶ - 1), t¹³)]: 1608
//│ 	[LH_N]: 1609
//│ 	[LH_N]: 1611
//│ case ls⁷ of {LH_C h⁶ t⁹ => (1 + length₀₀(t⁹)) | LH_N  => 0}: 1439 --->
//│ 	[LH_C _lh_chop_LH_P2_1¹ a⁴]: 1240
//│ 	[LH_N]: 1251
//│ case _lh_matchIdent¹³ of {LH_N  => lazy⁰([LH_N]) | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => if (_lh_drop_lz_arg1¹ > 0) then drop_lz₀₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹) else _lh_drop_lz_LH_C_1¹ | _  => error⁰}: 1465 --->
//│ 	DeadCodeProd
//│ 	[LH_N]: 1446
//│ 	[LH_C (z¹ + 2147483562) rands₀₀(s1''¹, s2''¹)]: 1979
//│ 	[LH_C z¹ rands₀₀(s1''¹, s2''¹)]: 1988
//│ case _lh_matchIdent¹⁵ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0¹ _lh_lines_LH_C_1¹ => lines₀₀(_lh_lines_LH_C_1¹) | _  => error⁰}: 1488 --->
//│ 	[LH_N]: 2160
//│ 	[LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]: 2168
//│ case _lh_matchIdent¹⁴ of {LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => [LH_C _lh_lines_LH_P2_0¹ let _lh_matchIdent¹⁵ = _lh_lines_LH_P2_1¹
//│ in case _lh_matchIdent¹⁵ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0¹ _lh_lines_LH_C_1¹ => lines₀₀(_lh_lines_LH_C_1¹) | _  => error⁰}] | _  => error⁰}: 1492 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 2161
//│ 	[LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]]: 2169
//│ 	[LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]: 2180
//│ case force⁰(ls⁸) of {LH_C h⁷ t¹⁰ => [LH_C h⁷ take_lz₁₀((n⁵ - 1), t¹⁰)] | LH_N  => [LH_N]}: 1541 --->
//│ 	[LH_C x⁸ iterate₀₀(f⁷, f⁷(x⁸))]: 1517
//│ case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572 --->
//│ 	[LH_C f⁶(h⁵) map₀₀(f⁶, t⁸)]: 1264
//│ 	[LH_N]: 1265
//│ 	[LH_C f⁹(h⁹) map₀₂(f⁹, t¹²)]: 1585
//│ 	[LH_N]: 1586
//│ 	[LH_C f¹¹(h¹¹) map₀₁(f¹¹, t¹⁴)]: 1877
//│ 	[LH_N]: 1878
//│ 	[LH_N]: 2302
//│ 	[LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]]: 2303
//│ 	[LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)]: 2325
//│ 	[LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)]: 2337
//│ 	[LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)]: 2364
//│ 	[LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)]: 2376
//│ 	[LH_C t¹⁷ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)]: 2403
//│ 	[LH_C t¹⁷ map₀₂((fun x¹³ -> (x¹³ % 65536)), _lh_uniform_LH_C_1⁹)]: 2415
//│ case ls¹⁰ of {LH_C h⁹ t¹² => [LH_C f⁹(h⁹) map₀₂(f⁹, t¹²)] | LH_N  => [LH_N]}: 1587 --->
//│ 	[LH_C h¹⁰ take_lz₀₀((n⁶ - 1), t¹³)]: 1608
//│ 	[LH_N]: 1609
//│ 	[LH_N]: 1611
//│ case force⁰(ls¹¹) of {LH_C h¹⁰ t¹³ => [LH_C h¹⁰ take_lz₀₀((n⁶ - 1), t¹³)] | LH_N  => [LH_N]}: 1610 --->
//│ 	DeadCodeProd
//│ 	[LH_N]: 1446
//│ 	[LH_C (z¹ + 2147483562) rands₀₀(s1''¹, s2''¹)]: 1979
//│ 	[LH_C z¹ rands₀₀(s1''¹, s2''¹)]: 1988
//│ case _lh_f_arg1² of {LH_N  => _lh_f_arg2¹ | LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹ => f¹⁰(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2¹) + int_val_of_char₀₀(_lh_f_LH_C_0¹))) | _  => error⁰}: 1633 --->
//│ 	[LH_N]: 2159
//│ 	[LH_N]: 2165
//│ 	[LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹]: 2178
//│ case _lh_matchIdent¹⁶ of {LH_P2 _lh_random_LH_P2_0¹ _lh_random_LH_P2_1¹ => [LH_P2 makeNumber₀₀(65536, uniform₀₀(ns¹, _lh_random_LH_P2_0¹)) _lh_random_LH_P2_1¹] | _  => error⁰}: 1678 --->
//│ 	[LH_P2 take_lz₀₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) drop_lz₀₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)]: 1556
//│ case _lh_matchIdent¹⁷ of {LH_P2 _lh_doLine_LH_P2_0¹ _lh_doLine_LH_P2_1¹ => if _lh_doLine_LH_P2_0¹ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] | _  => error⁰}: 1774 --->
//│ 	[LH_P2 [True] rs¹]: 2089
//│ 	[LH_P2 [False] _lh_multiTest_LH_P2_1¹]: 2112
//│ 	[LH_P2 (_lh_multiTest_arg3¹ == 2) _lh_multiTest_arg2¹]: 2137
//│ case _lh_matchIdent¹⁸ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1²) | _  => error⁰}: 1816 --->
//│ 	[LH_C h⁷ take_lz₁₀((n⁵ - 1), t¹⁰)]: 1539
//│ 	[LH_N]: 1540
//│ 	[LH_N]: 1542
//│ case _lh_matchIdent¹⁹ of {LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1³)) | _  => error⁰}: 1859 --->
//│ 	[LH_C h⁷ take_lz₁₀((n⁵ - 1), t¹⁰)]: 1539
//│ 	[LH_N]: 1540
//│ 	[LH_N]: 1542
//│ case _lh_singleTestX_arg2¹ of {LH_P2 _lh_singleTestX_LH_P2_0¹ _lh_singleTestX_LH_P2_1¹ => let square¹ = (fun x⁹ -> ((x⁹ * x⁹) % _lh_singleTestX_arg1¹))
//│ in let witness¹ = (fun ls¹² -> let _lh_matchIdent¹⁸ = ls¹²
//│ in case _lh_matchIdent¹⁸ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1²) | _  => error⁰})
//│ in let _lh_matchIdent¹⁹ = take_lz₁₀(_lh_singleTestX_LH_P2_0¹, iterate₀₀(square¹, powerMod₀₀(_lh_singleTestX_arg3¹, _lh_singleTestX_LH_P2_1¹, _lh_singleTestX_arg1¹)))
//│ in case _lh_matchIdent¹⁹ of {LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1³)) | _  => error⁰} | _  => error⁰}: 1864 --->
//│ 	[LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1²]: 2212
//│ case ls¹³ of {LH_C h¹¹ t¹⁴ => [LH_C f¹¹(h¹¹) map₀₁(f¹¹, t¹⁴)] | LH_N  => [LH_N]}: 1879 --->
//│ 	[LH_C h¹⁰ take_lz₀₀((n⁶ - 1), t¹³)]: 1608
//│ 	[LH_N]: 1609
//│ 	[LH_N]: 1611
//│ case _lh_matchIdent²⁰ of {LH_P2 _lh_multiTest_LH_P2_0¹ _lh_multiTest_LH_P2_1¹ => if _lh_multiTest_LH_P2_0¹ then mTest¹((k³ - 1), _lh_multiTest_LH_P2_1¹) else [LH_P2 [False] _lh_multiTest_LH_P2_1¹] | _  => error⁰}: 2115 --->
//│ 	[LH_P2 singleTestX₀₀(_lh_singleTest_arg1¹, _lh_singleTest_arg2¹, (2 + _lh_singleTest_LH_P2_0¹)) _lh_singleTest_LH_P2_1¹]: 2447
//│ case _lh_matchIdent²¹ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹] | _  => error⁰}: 2182 --->
//│ 	[LH_P2 [LH_N] [LH_N]]: 2161
//│ 	[LH_P2 [LH_N] [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]]: 2169
//│ 	[LH_P2 [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹] _lh_break_LH_P2_1¹]: 2180
//│ case _lh_matchIdent²² of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => if (_lh_f_LH_P2_1³ == 0) then f¹³([LH_P2 (_lh_f_LH_P2_0² + 1) _lh_f_LH_P2_0³]) else [LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1²] | _  => error⁰}: 2215 --->
//│ 	[LH_P2 div⁰(_lh_divmod_arg1³, _lh_divmod_arg2³) (_lh_divmod_arg1³ % _lh_divmod_arg2³)]: 1701
//│ case _lh_f_arg1³ of {LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1² => let _lh_matchIdent²² = divmod₀₀(_lh_f_LH_P2_1², 2)
//│ in case _lh_matchIdent²² of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => if (_lh_f_LH_P2_1³ == 0) then f¹³([LH_P2 (_lh_f_LH_P2_0² + 1) _lh_f_LH_P2_0³]) else [LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1²] | _  => error⁰} | _  => error⁰}: 2218 --->
//│ 	[LH_P2 (_lh_f_LH_P2_0² + 1) _lh_f_LH_P2_0³]: 2208
//│ 	[LH_P2 0 (_lh_findKQ_arg1¹ - 1)]: 2227
//│ case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}: 2341 --->
//│ 	[LH_C h¹⁰ take_lz₀₀((n⁶ - 1), t¹³)]: 1608
//│ 	[LH_N]: 1609
//│ 	[LH_N]: 1611
//│ case _lh_uniform_LH_C_1⁶ of {LH_N  => [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]] | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}}: 2342 --->
//│ 	[LH_C h¹⁰ take_lz₀₀((n⁶ - 1), t¹³)]: 1608
//│ 	[LH_N]: 1609
//│ 	[LH_N]: 1611
//│ case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t¹⁶ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁶ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)] else [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)] | _  => error⁰}: 2380 --->
//│ 	[LH_C h¹⁰ take_lz₀₀((n⁶ - 1), t¹³)]: 1608
//│ 	[LH_N]: 1609
//│ 	[LH_N]: 1611
//│ case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]] | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t¹⁶ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁶ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)] else [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)] | _  => error⁰}}: 2381 --->
//│ 	[LH_C h¹⁰ take_lz₀₀((n⁶ - 1), t¹³)]: 1608
//│ 	[LH_N]: 1609
//│ 	[LH_N]: 1611
//│ case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t¹⁷ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁷ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁷ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)] else [LH_C t¹⁷ map₀₂((fun x¹³ -> (x¹³ % 65536)), _lh_uniform_LH_C_1⁹)] | _  => error⁰}: 2419 --->
//│ 	[LH_C h¹⁰ take_lz₀₀((n⁶ - 1), t¹³)]: 1608
//│ 	[LH_N]: 1609
//│ 	[LH_N]: 1611
//│ case _lh_uniform_LH_C_1⁵ of {LH_N  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]] | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t¹⁶ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁶ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)] else [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)] | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t¹⁷ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁷ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁷ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)] else [LH_C t¹⁷ map₀₂((fun x¹³ -> (x¹³ % 65536)), _lh_uniform_LH_C_1⁹)] | _  => error⁰}}: 2420 --->
//│ 	[LH_C _lh_chop_LH_P2_1¹ a⁴]: 1240
//│ 	[LH_N]: 1251
//│ case _lh_uniform_arg1¹ of {LH_C _lh_uniform_LH_C_0⁵ _lh_uniform_LH_C_1⁵ => case _lh_uniform_LH_C_1⁵ of {LH_N  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]] | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t¹⁵ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁵ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)] else [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)] | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t¹⁶ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁶ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)] else [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)] | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t¹⁷ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t¹⁷ == _lh_uniform_LH_C_0⁵) then [LH_C t¹⁷ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)] else [LH_C t¹⁷ map₀₂((fun x¹³ -> (x¹³ % 65536)), _lh_uniform_LH_C_1⁹)] | _  => error⁰}} | _  => error⁰}: 2422 --->
//│ 	[LH_C _lh_chop_LH_P2_1¹ a⁴]: 1240
//│ 	[LH_N]: 1251
//│ case _lh_matchIdent²³ of {LH_P2 _lh_singleTest_LH_P2_0¹ _lh_singleTest_LH_P2_1¹ => [LH_P2 singleTestX₀₀(_lh_singleTest_arg1¹, _lh_singleTest_arg2¹, (2 + _lh_singleTest_LH_P2_0¹)) _lh_singleTest_LH_P2_1¹] | _  => error⁰}: 2449 --->
//│ 	[LH_P2 makeNumber₀₀(65536, uniform₀₀(ns¹, _lh_random_LH_P2_0¹)) _lh_random_LH_P2_1¹]: 1676
//│ case _lh_doInput_arg2¹ of {LH_N  => [LH_N] | LH_C _lh_doInput_LH_C_0¹ _lh_doInput_LH_C_1¹ => doLine₀₀(_lh_doInput_LH_C_0¹, (fun state¹ -> doInput₀₀(state¹, _lh_doInput_LH_C_1¹)), _lh_doInput_arg1¹) | _  => error⁰}: 2469 --->
//│ 	[LH_N]: 1483
//│ 	[LH_C _lh_lines_LH_P2_0¹ let _lh_matchIdent¹⁵ = _lh_lines_LH_P2_1¹
//│ in case _lh_matchIdent¹⁵ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0¹ _lh_lines_LH_C_1¹ => lines₀₀(_lh_lines_LH_C_1¹) | _  => error⁰}]: 1490
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C f⁶(h⁵) map₀₀(f⁶, t⁸)]: 1264 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_N]: 1265 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_N]: 1483 --->
//│ 	case _lh_doInput_arg2¹ of {LH_N  => [LH_N] | LH_C _lh_doInput_LH_C_0¹ _lh_doInput_LH_C_1¹ => doLine₀₀(_lh_doInput_LH_C_0¹, (fun state¹ -> doInput₀₀(state¹, _lh_doInput_LH_C_1¹)), _lh_doInput_arg1¹) | _  => error⁰}: 2469
//│ [LH_C _lh_lines_LH_P2_0¹ let _lh_matchIdent¹⁵ = _lh_lines_LH_P2_1¹
//│ in case _lh_matchIdent¹⁵ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0¹ _lh_lines_LH_C_1¹ => lines₀₀(_lh_lines_LH_C_1¹) | _  => error⁰}]: 1490 --->
//│ 	case _lh_doInput_arg2¹ of {LH_N  => [LH_N] | LH_C _lh_doInput_LH_C_0¹ _lh_doInput_LH_C_1¹ => doLine₀₀(_lh_doInput_LH_C_0¹, (fun state¹ -> doInput₀₀(state¹, _lh_doInput_LH_C_1¹)), _lh_doInput_arg1¹) | _  => error⁰}: 2469
//│ [LH_P2 div⁰(_lh_divmod_arg1², _lh_divmod_arg2²) (_lh_divmod_arg1² % _lh_divmod_arg2²)]: 1505 --->
//│ 	case _lh_matchIdent¹² of {LH_P2 _lh_chop_LH_P2_0¹ _lh_chop_LH_P2_1¹ => if (n⁴ == 0) then a⁴ else chop'¹([LH_C _lh_chop_LH_P2_1¹ a⁴], _lh_chop_LH_P2_0¹) | _  => error⁰}: 1246
//│ [LH_C x⁸ iterate₀₀(f⁷, f⁷(x⁸))]: 1517 --->
//│ 	case force⁰(ls⁸) of {LH_C h⁷ t¹⁰ => [LH_C h⁷ take_lz₁₀((n⁵ - 1), t¹⁰)] | LH_N  => [LH_N]}: 1541
//│ [LH_P2 take_lz₀₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) drop_lz₀₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)]: 1556 --->
//│ 	case _lh_matchIdent¹⁶ of {LH_P2 _lh_random_LH_P2_0¹ _lh_random_LH_P2_1¹ => [LH_P2 makeNumber₀₀(65536, uniform₀₀(ns¹, _lh_random_LH_P2_0¹)) _lh_random_LH_P2_1¹] | _  => error⁰}: 1678
//│ [LH_C f⁹(h⁹) map₀₂(f⁹, t¹²)]: 1585 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_N]: 1586 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_P2 makeNumber₀₀(65536, uniform₀₀(ns¹, _lh_random_LH_P2_0¹)) _lh_random_LH_P2_1¹]: 1676 --->
//│ 	case _lh_matchIdent²³ of {LH_P2 _lh_singleTest_LH_P2_0¹ _lh_singleTest_LH_P2_1¹ => [LH_P2 singleTestX₀₀(_lh_singleTest_arg1¹, _lh_singleTest_arg2¹, (2 + _lh_singleTest_LH_P2_0¹)) _lh_singleTest_LH_P2_1¹] | _  => error⁰}: 2449
//│ [LH_P2 div⁰(_lh_divmod_arg1³, _lh_divmod_arg2³) (_lh_divmod_arg1³ % _lh_divmod_arg2³)]: 1701 --->
//│ 	case _lh_matchIdent²² of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => if (_lh_f_LH_P2_1³ == 0) then f¹³([LH_P2 (_lh_f_LH_P2_0² + 1) _lh_f_LH_P2_0³]) else [LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1²] | _  => error⁰}: 2215
//│ [LH_C f¹¹(h¹¹) map₀₁(f¹¹, t¹⁴)]: 1877 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_N]: 1878 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_P2 [True] rs¹]: 2089 --->
//│ 	case _lh_matchIdent¹⁷ of {LH_P2 _lh_doLine_LH_P2_0¹ _lh_doLine_LH_P2_1¹ => if _lh_doLine_LH_P2_0¹ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] | _  => error⁰}: 1774
//│ [LH_P2 [False] _lh_multiTest_LH_P2_1¹]: 2112 --->
//│ 	case _lh_matchIdent¹⁷ of {LH_P2 _lh_doLine_LH_P2_0¹ _lh_doLine_LH_P2_1¹ => if _lh_doLine_LH_P2_0¹ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] | _  => error⁰}: 1774
//│ [LH_P2 (_lh_multiTest_arg3¹ == 2) _lh_multiTest_arg2¹]: 2137 --->
//│ 	case _lh_matchIdent¹⁷ of {LH_P2 _lh_doLine_LH_P2_0¹ _lh_doLine_LH_P2_1¹ => if _lh_doLine_LH_P2_0¹ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] | _  => error⁰}: 1774
//│ [LH_N]: 2159 --->
//│ 	case _lh_f_arg1² of {LH_N  => _lh_f_arg2¹ | LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹ => f¹⁰(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2¹) + int_val_of_char₀₀(_lh_f_LH_C_0¹))) | _  => error⁰}: 1633
//│ [LH_N]: 2160 --->
//│ 	case _lh_matchIdent¹⁵ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0¹ _lh_lines_LH_C_1¹ => lines₀₀(_lh_lines_LH_C_1¹) | _  => error⁰}: 1488
//│ [LH_N]: 2165 --->
//│ 	case _lh_f_arg1² of {LH_N  => _lh_f_arg2¹ | LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹ => f¹⁰(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2¹) + int_val_of_char₀₀(_lh_f_LH_C_0¹))) | _  => error⁰}: 1633
//│ [LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]: 2168 --->
//│ 	case _lh_matchIdent¹⁵ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0¹ _lh_lines_LH_C_1¹ => lines₀₀(_lh_lines_LH_C_1¹) | _  => error⁰}: 1488
//│ [LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹]: 2178 --->
//│ 	case _lh_f_arg1² of {LH_N  => _lh_f_arg2¹ | LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹ => f¹⁰(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2¹) + int_val_of_char₀₀(_lh_f_LH_C_0¹))) | _  => error⁰}: 1633
//│ [LH_N]: 2302 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]]: 2303 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)]: 2325 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)]: 2337 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)]: 2364 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)]: 2376 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_C t¹⁷ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)]: 2403 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_C t¹⁷ map₀₂((fun x¹³ -> (x¹³ % 65536)), _lh_uniform_LH_C_1⁹)]: 2415 --->
//│ 	case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572
//│ [LH_P2 singleTestX₀₀(_lh_singleTest_arg1¹, _lh_singleTest_arg2¹, (2 + _lh_singleTest_LH_P2_0¹)) _lh_singleTest_LH_P2_1¹]: 2447 --->
//│ 	case _lh_matchIdent²⁰ of {LH_P2 _lh_multiTest_LH_P2_0¹ _lh_multiTest_LH_P2_1¹ => if _lh_multiTest_LH_P2_0¹ then mTest¹((k³ - 1), _lh_multiTest_LH_P2_1¹) else [LH_P2 [False] _lh_multiTest_LH_P2_1¹] | _  => error⁰}: 2115
//│ ------------------
//│ case _lh_matchIdent¹² of {LH_P2 _lh_chop_LH_P2_0¹ _lh_chop_LH_P2_1¹ => if (n⁴ == 0) then a⁴ else chop'¹([LH_C _lh_chop_LH_P2_1¹ a⁴], _lh_chop_LH_P2_0¹) | _  => error⁰}: 1246 --->
//│ 	[LH_P2 div⁰(_lh_divmod_arg1², _lh_divmod_arg2²) (_lh_divmod_arg1² % _lh_divmod_arg2²)]: 1505
//│ case _lh_matchIdent¹⁵ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0¹ _lh_lines_LH_C_1¹ => lines₀₀(_lh_lines_LH_C_1¹) | _  => error⁰}: 1488 --->
//│ 	[LH_N]: 2160
//│ 	[LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹]: 2168
//│ case force⁰(ls⁸) of {LH_C h⁷ t¹⁰ => [LH_C h⁷ take_lz₁₀((n⁵ - 1), t¹⁰)] | LH_N  => [LH_N]}: 1541 --->
//│ 	[LH_C x⁸ iterate₀₀(f⁷, f⁷(x⁸))]: 1517
//│ case ls⁹ of {LH_C h⁸ t¹¹ => foldl₀₀(f⁸, f⁸(i¹, h⁸), t¹¹) | LH_N  => i¹}: 1572 --->
//│ 	[LH_C f⁶(h⁵) map₀₀(f⁶, t⁸)]: 1264
//│ 	[LH_N]: 1265
//│ 	[LH_C f⁹(h⁹) map₀₂(f⁹, t¹²)]: 1585
//│ 	[LH_N]: 1586
//│ 	[LH_C f¹¹(h¹¹) map₀₁(f¹¹, t¹⁴)]: 1877
//│ 	[LH_N]: 1878
//│ 	[LH_N]: 2302
//│ 	[LH_C (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵) [LH_N]]: 2303
//│ 	[LH_C t¹⁵ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)]: 2325
//│ 	[LH_C t¹⁵ map₀₀((fun x¹¹ -> (x¹¹ % 65536)), _lh_uniform_LH_C_1⁷)]: 2337
//│ 	[LH_C t¹⁶ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)]: 2364
//│ 	[LH_C t¹⁶ map₀₁((fun x¹² -> (x¹² % 65536)), _lh_uniform_LH_C_1⁸)]: 2376
//│ 	[LH_C t¹⁷ uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)]: 2403
//│ 	[LH_C t¹⁷ map₀₂((fun x¹³ -> (x¹³ % 65536)), _lh_uniform_LH_C_1⁹)]: 2415
//│ case _lh_f_arg1² of {LH_N  => _lh_f_arg2¹ | LH_C _lh_f_LH_C_0¹ _lh_f_LH_C_1¹ => f¹⁰(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2¹) + int_val_of_char₀₀(_lh_f_LH_C_0¹))) | _  => error⁰}: 1633 --->
//│ 	[LH_N]: 2159
//│ 	[LH_N]: 2165
//│ 	[LH_C _lh_break_LH_C_0¹ _lh_break_LH_P2_0¹]: 2178
//│ case _lh_matchIdent¹⁶ of {LH_P2 _lh_random_LH_P2_0¹ _lh_random_LH_P2_1¹ => [LH_P2 makeNumber₀₀(65536, uniform₀₀(ns¹, _lh_random_LH_P2_0¹)) _lh_random_LH_P2_1¹] | _  => error⁰}: 1678 --->
//│ 	[LH_P2 take_lz₀₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) drop_lz₀₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)]: 1556
//│ case _lh_matchIdent¹⁷ of {LH_P2 _lh_doLine_LH_P2_0¹ _lh_doLine_LH_P2_1¹ => if _lh_doLine_LH_P2_0¹ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2¹(_lh_doLine_LH_P2_1¹)] | _  => error⁰}: 1774 --->
//│ 	[LH_P2 [True] rs¹]: 2089
//│ 	[LH_P2 [False] _lh_multiTest_LH_P2_1¹]: 2112
//│ 	[LH_P2 (_lh_multiTest_arg3¹ == 2) _lh_multiTest_arg2¹]: 2137
//│ case _lh_matchIdent²⁰ of {LH_P2 _lh_multiTest_LH_P2_0¹ _lh_multiTest_LH_P2_1¹ => if _lh_multiTest_LH_P2_0¹ then mTest¹((k³ - 1), _lh_multiTest_LH_P2_1¹) else [LH_P2 [False] _lh_multiTest_LH_P2_1¹] | _  => error⁰}: 2115 --->
//│ 	[LH_P2 singleTestX₀₀(_lh_singleTest_arg1¹, _lh_singleTest_arg2¹, (2 + _lh_singleTest_LH_P2_0¹)) _lh_singleTest_LH_P2_1¹]: 2447
//│ case _lh_matchIdent²² of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => if (_lh_f_LH_P2_1³ == 0) then f¹³([LH_P2 (_lh_f_LH_P2_0² + 1) _lh_f_LH_P2_0³]) else [LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1²] | _  => error⁰}: 2215 --->
//│ 	[LH_P2 div⁰(_lh_divmod_arg1³, _lh_divmod_arg2³) (_lh_divmod_arg1³ % _lh_divmod_arg2³)]: 1701
//│ case _lh_matchIdent²³ of {LH_P2 _lh_singleTest_LH_P2_0¹ _lh_singleTest_LH_P2_1¹ => [LH_P2 singleTestX₀₀(_lh_singleTest_arg1¹, _lh_singleTest_arg2¹, (2 + _lh_singleTest_LH_P2_0¹)) _lh_singleTest_LH_P2_1¹] | _  => error⁰}: 2449 --->
//│ 	[LH_P2 makeNumber₀₀(65536, uniform₀₀(ns¹, _lh_random_LH_P2_0¹)) _lh_random_LH_P2_1¹]: 1676
//│ case _lh_doInput_arg2¹ of {LH_N  => [LH_N] | LH_C _lh_doInput_LH_C_0¹ _lh_doInput_LH_C_1¹ => doLine₀₀(_lh_doInput_LH_C_0¹, (fun state¹ -> doInput₀₀(state¹, _lh_doInput_LH_C_1¹)), _lh_doInput_arg1¹) | _  => error⁰}: 2469 --->
//│ 	[LH_N]: 1483
//│ 	[LH_C _lh_lines_LH_P2_0¹ let _lh_matchIdent¹⁵ = _lh_lines_LH_P2_1¹
//│ in case _lh_matchIdent¹⁵ of {LH_N  => [LH_N] | LH_C _lh_lines_LH_C_0¹ _lh_lines_LH_C_1¹ => lines₀₀(_lh_lines_LH_C_1¹) | _  => error⁰}]: 1490
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testPrimetest_nofib₀₀(primId⁰(0))
//│ def testPrimetest_nofib₀₀(_lh_testPrimetest_nofib_arg1²) = 
//│ 	let cts² = primId⁰([LH_C '2' [LH_C '4' [LH_C '|' [LH_C '4' [LH_C '8' [LH_C '|' [LH_C '4' [LH_C '7' [LH_C '|' [LH_C '1' [LH_C '3' [LH_C '1' [LH_C '7' [LH_C '|' [LH_C '8' [LH_C '9' [LH_C '0' [LH_C '1' [LH_N]]]]]]]]]]]]]]]]]]])
//│ 	in process₀₀(lines₀₀(cts²))
//│ 	where
//│ 	def lines₀₀(_lh_lines_arg1²) = 
//│ 		let _lh_matchIdent²⁶ = break₀₀((fun x¹⁵ -> polyEq⁰(x¹⁵, '|')), _lh_lines_arg1²)
//│ 		in case _lh_matchIdent²⁶ of {
//│ 			LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => 
//│ 				let _lh_doInput_LH_C_1² = 	
//│ 					let _lh_matchIdent²⁷ = _lh_lines_LH_P2_1¹
//│ 					in _lh_matchIdent²⁷(99)
//│ 				in let _lh_doInput_LH_C_0² = _lh_lines_LH_P2_0¹
//│ 				in (fun _lh_doInput_arg1² -> doLine₀₀(_lh_doInput_LH_C_0², (fun state² -> doInput₀₀(state², _lh_doInput_LH_C_1²)), _lh_doInput_arg1²))
//│ 			| _  => error⁰}
//│ 		where
//│ 		def break₀₀(_lh_break_arg1², _lh_break_arg2²) = 
//│ 			case _lh_break_arg2² of {
//│ 				LH_N  => [LH_P2 (fun _lh_f_arg2³ -> (fun f²⁷ -> _lh_f_arg2³)) (fun _lh_dummy⁰ -> (fun _lh_doInput_arg1³ -> [LH_N]))]
//│ 				| LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1²(_lh_break_LH_C_0¹) then [LH_P2 (fun _lh_f_arg2⁴ -> (fun f²⁸ -> _lh_f_arg2⁴)) 
//│ 					let _lh_lines_LH_C_1² = _lh_break_LH_C_1¹
//│ 					in (fun _lh_dummy¹ -> lines₀₀(_lh_lines_LH_C_1²))] else 
//│ 					let _lh_matchIdent²⁸ = break₀₀(_lh_break_arg1², _lh_break_LH_C_1¹)
//│ 					in case _lh_matchIdent²⁸ of {
//│ 						LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 
//│ 							let _lh_f_LH_C_1² = _lh_break_LH_P2_0¹
//│ 							in let _lh_f_LH_C_0² = _lh_break_LH_C_0¹
//│ 							in (fun _lh_f_arg2⁵ -> (fun f²⁹ -> f²⁹(_lh_f_LH_C_1², ((10 * _lh_f_arg2⁵) + int_val_of_char₀₀(_lh_f_LH_C_0²))))) _lh_break_LH_P2_1¹]
//│ 						| _  => error⁰}
//│ 				| _  => error⁰}
//│ 	def process₀₀(_lh_process_arg1²) = 
//│ 		doInput₀₀(randomInts₀₀(111, 47), _lh_process_arg1²)
//│ 		where
//│ 		def doInput₀₀(_lh_doInput_arg1⁴, _lh_doInput_arg2²) = 
//│ 			_lh_doInput_arg2²(_lh_doInput_arg1⁴)
//│ 			where
//│ 			def doLine₀₀(_lh_doLine_arg1², _lh_doLine_arg2³, _lh_doLine_arg3²) = 
//│ 				let n¹⁰ = int_val_of_string₀₀(_lh_doLine_arg1²)
//│ 				in let _lh_matchIdent³² = multiTest₀₀(100, _lh_doLine_arg3², n¹⁰)
//│ 				in _lh_matchIdent³²(_lh_doLine_arg2³)
//│ 				where
//│ 				def int_val_of_string₀₀(_lh_int_val_of_string_arg1²) = 
//│ 					let f¹⁶ = (fun _lh_f_arg1⁵ -> (fun _lh_f_arg2² -> _lh_f_arg1⁵(_lh_f_arg2², f¹⁶)))
//│ 					in f¹⁶(_lh_int_val_of_string_arg1², 0)
//│ 					where
//│ 					def int_val_of_char₀₀(_lh_int_val_of_char_arg1²) = 
//│ 						(int_of_char⁰(_lh_int_val_of_char_arg1²) - 48)
//│ 				def multiTest₀₀(_lh_multiTest_arg1², _lh_multiTest_arg2², _lh_multiTest_arg3²) = 
//│ 					let mTest³ = (fun k⁶ -> (fun rs² -> if (k⁶ == 0) then 
//│ 						let _lh_doLine_LH_P2_1³ = rs²
//│ 						in let _lh_doLine_LH_P2_0³ = [True]
//│ 						in (fun _lh_doLine_arg2⁴ -> if _lh_doLine_LH_P2_0³ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2⁴(_lh_doLine_LH_P2_1³)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2⁴(_lh_doLine_LH_P2_1³)]) else 
//│ 						let _lh_matchIdent³⁵ = singleTest₀₀(_lh_multiTest_arg3², findKQ₀₀(_lh_multiTest_arg3²), rs²)
//│ 						in _lh_matchIdent³⁵(k⁶, mTest³)))
//│ 					in if ((_lh_multiTest_arg3² <= 1) || even₀₀(_lh_multiTest_arg3²)) then 
//│ 						let _lh_doLine_LH_P2_1⁴ = _lh_multiTest_arg2²
//│ 						in let _lh_doLine_LH_P2_0⁴ = (_lh_multiTest_arg3² == 2)
//│ 						in (fun _lh_doLine_arg2⁵ -> if _lh_doLine_LH_P2_0⁴ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2⁵(_lh_doLine_LH_P2_1⁴)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2⁵(_lh_doLine_LH_P2_1⁴)]) else mTest³(_lh_multiTest_arg1², _lh_multiTest_arg2²)
//│ 					where
//│ 					def even₀₀(_lh_even_arg1⁵) = 
//│ 						((_lh_even_arg1⁵ % 2) == 0)
//│ 					def findKQ₀₀(_lh_findKQ_arg1²) = 
//│ 						let f¹⁴ = (fun _lh_f_arg1⁴ -> case _lh_f_arg1⁴ of {
//│ 							LH_P2 _lh_f_LH_P2_0² _lh_f_LH_P2_1² => 
//│ 								let _lh_matchIdent²⁴ = divmod₀₀(_lh_f_LH_P2_1², 2)
//│ 								in _lh_matchIdent²⁴(_lh_f_LH_P2_0², _lh_f_LH_P2_1², f¹⁴)
//│ 							| _  => error⁰})
//│ 						in f¹⁴([LH_P2 0 (_lh_findKQ_arg1² - 1)])
//│ 						where
//│ 						def divmod₀₀(_lh_divmod_arg1⁴, _lh_divmod_arg2⁴) = 
//│ 							let _lh_f_LH_P2_1⁴ = (_lh_divmod_arg1⁴ % _lh_divmod_arg2⁴)
//│ 							in let _lh_f_LH_P2_0⁴ = div⁰(_lh_divmod_arg1⁴, _lh_divmod_arg2⁴)
//│ 							in (fun _lh_f_LH_P2_0⁵ -> (fun _lh_f_LH_P2_1⁵ -> (fun f¹⁸ -> if (_lh_f_LH_P2_1⁴ == 0) then f¹⁸([LH_P2 (_lh_f_LH_P2_0⁵ + 1) _lh_f_LH_P2_0⁴]) else [LH_P2 _lh_f_LH_P2_0⁵ _lh_f_LH_P2_1⁵])))
//│ 					def singleTest₀₀(_lh_singleTest_arg1³, _lh_singleTest_arg2³, _lh_singleTest_arg3²) = 
//│ 						let _lh_matchIdent³⁴ = random₀₀((_lh_singleTest_arg1³ - 2), _lh_singleTest_arg3²)
//│ 						in _lh_matchIdent³⁴(_lh_singleTest_arg1³, _lh_singleTest_arg2³)
//│ 						where
//│ 						def random₀₀(_lh_random_arg1², _lh_random_arg2²) = 
//│ 							let ns³ = chop₀₀(65536, _lh_random_arg1²)
//│ 							in let _lh_matchIdent²⁵ = splitAt_lz₀₀(length₀₀(ns³), _lh_random_arg2²)
//│ 							in _lh_matchIdent²⁵(ns³)
//│ 							where
//│ 							def chop₀₀(_lh_chop_arg1²) = 
//│ 								let chop'² = (fun a¹¹ -> (fun n¹² -> 
//│ 									let _lh_matchIdent³³ = divmod₁₀(n¹², _lh_chop_arg1²)
//│ 									in _lh_matchIdent³³(a¹¹, chop'², n¹²)))
//│ 								in chop'²([LH_N])
//│ 								where
//│ 								def divmod₁₀(_lh_divmod_arg1⁵, _lh_divmod_arg2⁵) = 
//│ 									let _lh_chop_LH_P2_1² = (_lh_divmod_arg1⁵ % _lh_divmod_arg2⁵)
//│ 									in let _lh_chop_LH_P2_0² = div⁰(_lh_divmod_arg1⁵, _lh_divmod_arg2⁵)
//│ 									in (fun a¹² -> (fun chop'³ -> (fun n¹³ -> if (n¹³ == 0) then a¹² else chop'³([LH_C _lh_chop_LH_P2_1² a¹²], _lh_chop_LH_P2_0²))))
//│ 							def length₀₀(ls¹⁵) = 
//│ 								case ls¹⁵ of {
//│ 									LH_C h⁶ t⁹ => (1 + length₀₀(t⁹))
//│ 									| LH_N  => 0}
//│ 							def makeNumber₀₀(_lh_makeNumber_arg1²) = 
//│ 								foldl₀₀((fun a¹⁰ -> (fun x¹⁹ -> ((a¹⁰ * _lh_makeNumber_arg1²) + x¹⁹))), 0)
//│ 								where
//│ 								def foldl₀₀(f³⁹, i¹⁶, ls¹⁹) = 
//│ 									ls¹⁹(f³⁹, i¹⁶)
//│ 							def splitAt_lz₀₀(_lh_splitAt_lz_arg1², _lh_splitAt_lz_arg2²) = 
//│ 								let _lh_random_LH_P2_1² = drop_lz₀₀(_lh_splitAt_lz_arg1², _lh_splitAt_lz_arg2²)
//│ 								in let _lh_random_LH_P2_0² = take_lz₀₀(_lh_splitAt_lz_arg1², _lh_splitAt_lz_arg2²)
//│ 								in (fun ns² -> 
//│ 									let _lh_singleTest_LH_P2_1² = _lh_random_LH_P2_1²
//│ 									in let _lh_singleTest_LH_P2_0² = makeNumber₀₀(65536, uniform₀₀(ns², _lh_random_LH_P2_0²))
//│ 									in (fun _lh_singleTest_arg1² -> (fun _lh_singleTest_arg2² -> 
//│ 										let _lh_multiTest_LH_P2_1² = _lh_singleTest_LH_P2_1²
//│ 										in let _lh_multiTest_LH_P2_0² = singleTestX₀₀(_lh_singleTest_arg1², _lh_singleTest_arg2², (2 + _lh_singleTest_LH_P2_0²))
//│ 										in (fun k⁴ -> (fun mTest² -> if _lh_multiTest_LH_P2_0² then mTest²((k⁴ - 1), _lh_multiTest_LH_P2_1²) else 
//│ 											let _lh_doLine_LH_P2_1² = _lh_multiTest_LH_P2_1²
//│ 											in let _lh_doLine_LH_P2_0² = [False]
//│ 											in (fun _lh_doLine_arg2² -> if _lh_doLine_LH_P2_0² then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2²(_lh_doLine_LH_P2_1²)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2²(_lh_doLine_LH_P2_1²)]))))))
//│ 								where
//│ 								def drop_lz₀₀(_lh_drop_lz_arg1², _lh_drop_lz_arg2²) = 
//│ 									let _lh_matchIdent³¹ = force⁰(_lh_drop_lz_arg2²)
//│ 									in case _lh_matchIdent³¹ of {
//│ 										LH_N  => lazy⁰([LH_N])
//│ 										| LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => if (_lh_drop_lz_arg1² > 0) then drop_lz₀₀((_lh_drop_lz_arg1² - 1), _lh_drop_lz_LH_C_1¹) else _lh_drop_lz_LH_C_1¹
//│ 										| _  => error⁰}
//│ 								def take_lz₀₀(n⁹, ls¹⁴) = 
//│ 									if (n⁹ > 0) then case force⁰(ls¹⁴) of {
//│ 										LH_C h¹⁰ t¹³ => [LH_C h¹⁰ take_lz₀₀((n⁹ - 1), t¹³)]
//│ 										| LH_N  => [LH_N]} else [LH_N]
//│ 							def uniform₀₀(_lh_uniform_arg1², _lh_uniform_arg2²) = 
//│ 								case _lh_uniform_arg1² of {
//│ 									LH_C _lh_uniform_LH_C_0⁵ _lh_uniform_LH_C_1⁵ => case _lh_uniform_LH_C_1⁵ of {
//│ 										LH_N  => case _lh_uniform_arg2² of {
//│ 											LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {
//│ 												LH_N  => 
//│ 													let t¹⁹ = (fun f²⁰ -> (fun i³ -> i³))
//│ 													in let h¹³ = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ 													in (fun f¹⁹ -> (fun i² -> foldl₀₀(f¹⁹, f¹⁹(i², h¹³), t¹⁹)))
//│ 												| _  => case _lh_uniform_arg2² of {
//│ 													LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => 
//│ 														let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ 														in if (t²⁰ == _lh_uniform_LH_C_0⁵) then 
//│ 															let t²¹ = uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ 															in let h¹⁴ = t²⁰
//│ 															in (fun f²¹ -> (fun i⁴ -> foldl₀₀(f²¹, f²¹(i⁴, h¹⁴), t²¹))) else 
//│ 															let t²² = map₀₀((fun x¹⁶ -> (x¹⁶ % 65536)), _lh_uniform_LH_C_1⁷)
//│ 															in let h¹⁵ = t²⁰
//│ 															in (fun f²² -> (fun i⁵ -> foldl₀₀(f²², f²²(i⁵, h¹⁵), t²²)))
//│ 													| _  => error⁰}}
//│ 											| _  => case _lh_uniform_arg2² of {
//│ 												LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => 
//│ 													let t²³ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ 													in if (t²³ == _lh_uniform_LH_C_0⁵) then 
//│ 														let t²⁴ = uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ 														in let h¹⁶ = t²³
//│ 														in (fun f²³ -> (fun i⁶ -> foldl₀₀(f²³, f²³(i⁶, h¹⁶), t²⁴))) else 
//│ 														let t²⁵ = map₀₁((fun x¹⁷ -> (x¹⁷ % 65536)), _lh_uniform_LH_C_1⁸)
//│ 														in let h¹⁷ = t²³
//│ 														in (fun f²⁴ -> (fun i⁷ -> foldl₀₀(f²⁴, f²⁴(i⁷, h¹⁷), t²⁵)))
//│ 												| _  => error⁰}}
//│ 										| _  => case _lh_uniform_arg2² of {
//│ 											LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => 
//│ 												let t²⁶ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ 												in if (t²⁶ == _lh_uniform_LH_C_0⁵) then 
//│ 													let t²⁷ = uniform₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)
//│ 													in let h¹⁸ = t²⁶
//│ 													in (fun f²⁵ -> (fun i⁸ -> foldl₀₀(f²⁵, f²⁵(i⁸, h¹⁸), t²⁷))) else 
//│ 													let t²⁸ = map₀₂((fun x¹⁸ -> (x¹⁸ % 65536)), _lh_uniform_LH_C_1⁹)
//│ 													in let h¹⁹ = t²⁶
//│ 													in (fun f²⁶ -> (fun i⁹ -> foldl₀₀(f²⁶, f²⁶(i⁹, h¹⁹), t²⁸)))
//│ 											| _  => error⁰}}
//│ 									| _  => error⁰}
//│ 								where
//│ 								def map₀₀(f³⁰, ls¹⁶) = 
//│ 									case ls¹⁶ of {
//│ 										LH_C h⁵ t⁸ => 
//│ 											let t²⁹ = map₀₀(f³⁰, t⁸)
//│ 											in let h²⁰ = f³⁰(h⁵)
//│ 											in (fun f³¹ -> (fun i¹⁰ -> foldl₀₀(f³¹, f³¹(i¹⁰, h²⁰), t²⁹)))
//│ 										| LH_N  => (fun f³² -> (fun i¹¹ -> i¹¹))}
//│ 								def map₀₁(f³⁶, ls¹⁸) = 
//│ 									case ls¹⁸ of {
//│ 										LH_C h¹¹ t¹⁴ => 
//│ 											let t³¹ = map₀₁(f³⁶, t¹⁴)
//│ 											in let h²² = f³⁶(h¹¹)
//│ 											in (fun f³⁷ -> (fun i¹⁴ -> foldl₀₀(f³⁷, f³⁷(i¹⁴, h²²), t³¹)))
//│ 										| LH_N  => (fun f³⁸ -> (fun i¹⁵ -> i¹⁵))}
//│ 								def map₀₂(f³³, ls¹⁷) = 
//│ 									case ls¹⁷ of {
//│ 										LH_C h⁹ t¹² => 
//│ 											let t³⁰ = map₀₂(f³³, t¹²)
//│ 											in let h²¹ = f³³(h⁹)
//│ 											in (fun f³⁴ -> (fun i¹² -> foldl₀₀(f³⁴, f³⁴(i¹², h²¹), t³⁰)))
//│ 										| LH_N  => (fun f³⁵ -> (fun i¹³ -> i¹³))}
//│ 						def singleTestX₀₀(_lh_singleTestX_arg1², _lh_singleTestX_arg2², _lh_singleTestX_arg3²) = 
//│ 							case _lh_singleTestX_arg2² of {
//│ 								LH_P2 _lh_singleTestX_LH_P2_0¹ _lh_singleTestX_LH_P2_1¹ => 
//│ 									let square² = (fun x²⁰ -> ((x²⁰ * x²⁰) % _lh_singleTestX_arg1²))
//│ 									in let witness² = (fun ls²⁰ -> 
//│ 										let _lh_matchIdent²⁹ = ls²⁰
//│ 										in case _lh_matchIdent²⁹ of {
//│ 											LH_N  => [False]
//│ 											| LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1² - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness²(_lh_singleTestX_LH_C_1²)
//│ 											| _  => error⁰})
//│ 									in let _lh_matchIdent³⁰ = take_lz₁₀(_lh_singleTestX_LH_P2_0¹, iterate₀₀(square², powerMod₀₀(_lh_singleTestX_arg3², _lh_singleTestX_LH_P2_1¹, _lh_singleTestX_arg1²)))
//│ 									in case _lh_matchIdent³⁰ of {
//│ 										LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1² - 1))) || witness²(_lh_singleTestX_LH_C_1³))
//│ 										| _  => error⁰}
//│ 								| _  => error⁰}
//│ 							where
//│ 							def iterate₀₀(f¹⁵, x¹⁴) = 
//│ 								lazy⁰(
//│ 									let t¹⁸ = iterate₀₀(f¹⁵, f¹⁵(x¹⁴))
//│ 									in let h¹² = x¹⁴
//│ 									in (fun n⁸ -> [LH_C h¹² take_lz₁₀((n⁸ - 1), t¹⁸)]))
//│ 							def powerMod₀₀(_lh_powerMod_arg1², _lh_powerMod_arg2², _lh_powerMod_arg3²) = 
//│ 								case _lh_powerMod_arg2² of {
//│ 									0  => 1
//│ 									| _  => 
//│ 										let a'² = (_lh_powerMod_arg1² mod _lh_powerMod_arg3²)
//│ 										in let f¹⁷ = (fun a⁸ -> (fun b⁴ -> (fun c² -> 
//│ 											let g² = (fun a⁹ -> (fun b⁵ -> if even₁₀(b⁵) then g²(((a⁹ * a⁹) % _lh_powerMod_arg3²), div⁰(b⁵, 2)) else f¹⁷(a⁹, (b⁵ - 1), ((a⁹ * c²) % _lh_powerMod_arg3²))))
//│ 											in if (b⁴ == 0) then c² else g²(a⁸, b⁴))))
//│ 										in f¹⁷(a'², (_lh_powerMod_arg2² - 1), a'²)}
//│ 								where
//│ 								def even₁₀(_lh_even_arg1⁴) = 
//│ 									((_lh_even_arg1⁴ % 2) == 0)
//│ 							def take_lz₁₀(n¹¹, ls²¹) = 
//│ 								if (n¹¹ > 0) then force⁰(ls²¹, n¹¹) else [LH_N]
//│ 		def randomInts₀₀(_lh_randomInts_arg1², _lh_randomInts_arg2²) = 
//│ 			if ((1 <= _lh_randomInts_arg1²) && (_lh_randomInts_arg1² <= 2147483562)) then if ((1 <= _lh_randomInts_arg2²) && (_lh_randomInts_arg2² <= 2147483398)) then rands₀₀(_lh_randomInts_arg1², _lh_randomInts_arg2²) else error⁰([LH_C 'r' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'B' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C 'd' [LH_C '.' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) else error⁰([LH_C 'r' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'B' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'f' [LH_C 'i' [LH_C 'r' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C 'd' [LH_C '.' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 			where
//│ 			def rands₀₀(_lh_rands_arg1², _lh_rands_arg2²) = 
//│ 				let k⁵ = div⁰(_lh_rands_arg1², 53668)
//│ 				in let s1'² = ((40014 * (_lh_rands_arg1² - (k⁵ * 53668))) - (k⁵ * 12211))
//│ 				in let s1''² = if (s1'² < 0) then (s1'² + 2147483563) else s1'²
//│ 				in let k'² = div⁰(_lh_rands_arg2², 52774)
//│ 				in let s2'² = ((40692 * (_lh_rands_arg2² - (k'² * 52774))) - (k'² * 3791))
//│ 				in let s2''² = if (s2'² < 0) then (s2'² + 2147483399) else s2'²
//│ 				in let z² = (s1''² - s2''²)
//│ 				in if (z² < 1) then lazy⁰([LH_C (z² + 2147483562) rands₀₀(s1''², s2''²)]) else lazy⁰([LH_C z² rands₀₀(s1''², s2''²)])
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ ~~~~~~~~~~~~~~~~~~~~~~~ NEXT ITERATION ~~~~~~~~~~~~~~~~~~~~~~~
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testPrimetest_nofib₀₀^1] (hopeless to continue)
//│ 	[testPrimetest_nofib₀₀^1 · lines₀₀^1016] (using original def)
//│ 		[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · break₀₀^499] (using original def)
//│ 			[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · break₀₀^499 · break₀₀^823] ---> [testPrimetest_nofib₀₀^1 · lines₀₀^1016 · break₀₀^499] (using original def)
//│ 			[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · break₀₀^499 · int_val_of_char₀₀^841] (using original def)
//│ 			[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · break₀₀^499 · lines₀₀^817] ---> [testPrimetest_nofib₀₀^1 · lines₀₀^1016] (using original def)
//│ 		[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doInput₀₀^519] (using original def)
//│ 		[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516] (using original def)
//│ 			[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · int_val_of_string₀₀^1279] (using original def)
//│ 			[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282] (using original def)
//│ 				[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · even₀₀^1442] (using original def)
//│ 				[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · findKQ₀₀^1420] (using original def)
//│ 					[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · findKQ₀₀^1420 · divmod₀₀^166] (using original def)
//│ 				[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417] (using original def)
//│ 					[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331] (using original def)
//│ 						[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · chop₀₀^312] (using original def)
//│ 							[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · chop₀₀^312 · divmod₁₀^1311] (using original def)
//│ 						[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · length₀₀^318] (using original def)
//│ 							[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · length₀₀^318 · length₀₀^492] ---> [testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · length₀₀^318] (using original def)
//│ 						[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317] (using original def)
//│ 							[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · drop_lz₀₀^193] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · drop_lz₀₀^193 · drop_lz₀₀^1258] ---> [testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · drop_lz₀₀^193] (using original def)
//│ 							[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · makeNumber₀₀^204] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · makeNumber₀₀^204 · foldl₀₀^890] (using original def)
//│ 							[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · singleTestX₀₀^214] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · singleTestX₀₀^214 · iterate₀₀^1200] (using original def)
//│ 									[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · singleTestX₀₀^214 · iterate₀₀^1200 · iterate₀₀^332] ---> [testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · singleTestX₀₀^214 · iterate₀₀^1200] (using original def)
//│ 									[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · singleTestX₀₀^214 · iterate₀₀^1200 · take_lz₁₀^341] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · singleTestX₀₀^214 · powerMod₀₀^1203] (using original def)
//│ 									[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · singleTestX₀₀^214 · powerMod₀₀^1203 · even₁₀^413] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · singleTestX₀₀^214 · take_lz₁₀^1197] (using original def)
//│ 							[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · take_lz₀₀^198] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · take_lz₀₀^198 · take_lz₀₀^366] ---> [testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · take_lz₀₀^198] (using original def)
//│ 							[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · foldl₀₀^582] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · foldl₀₀^618] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · foldl₀₀^644] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · foldl₀₀^685] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · foldl₀₀^711] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · foldl₀₀^752] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · foldl₀₀^778] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · map₀₀^633] (using original def)
//│ 									[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · map₀₀^633 · foldl₀₀^869] (using original def)
//│ 									[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · map₀₀^633 · map₀₀^861] ---> [testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · map₀₀^633] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · map₀₁^700] (using original def)
//│ 									[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · map₀₁^700 · foldl₀₀^955] (using original def)
//│ 									[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · map₀₁^700 · map₀₁^947] ---> [testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · map₀₁^700] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · map₀₂^767] (using original def)
//│ 									[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · map₀₂^767 · foldl₀₀^925] (using original def)
//│ 									[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · map₀₂^767 · map₀₂^917] ---> [testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · map₀₂^767] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · uniform₀₀^612] ---> [testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · uniform₀₀^679] ---> [testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207] (using original def)
//│ 								[testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207 · uniform₀₀^746] ---> [testPrimetest_nofib₀₀^1 · lines₀₀^1016 · doLine₀₀^516 · multiTest₀₀^1282 · singleTest₀₀^1417 · random₀₀^1331 · splitAt_lz₀₀^317 · uniform₀₀^207] (using original def)
//│ 	[testPrimetest_nofib₀₀^1 · process₀₀^1015] (using original def)
//│ 		[testPrimetest_nofib₀₀^1 · process₀₀^1015 · doInput₀₀^382] (using original def)
//│ 		[testPrimetest_nofib₀₀^1 · process₀₀^1015 · randomInts₀₀^383] (using original def)
//│ 			[testPrimetest_nofib₀₀^1 · process₀₀^1015 · randomInts₀₀^383 · rands₀₀^32] (using original def)
//│ 				[testPrimetest_nofib₀₀^1 · process₀₀^1015 · randomInts₀₀^383 · rands₀₀^32 · rands₀₀^1114] ---> [testPrimetest_nofib₀₀^1 · process₀₀^1015 · randomInts₀₀^383 · rands₀₀^32] (using original def)
//│ 				[testPrimetest_nofib₀₀^1 · process₀₀^1015 · randomInts₀₀^383 · rands₀₀^32 · rands₀₀^1123] ---> [testPrimetest_nofib₀₀^1 · process₀₀^1015 · randomInts₀₀^383 · rands₀₀^32] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testPrimetest_nofib₀₀₀(primId⁰(0))
//│ def testPrimetest_nofib₀₀₀(_lh_testPrimetest_nofib_arg1¹) = 
//│ 	let cts¹ = primId⁰([LH_C '2' [LH_C '4' [LH_C '|' [LH_C '4' [LH_C '8' [LH_C '|' [LH_C '4' [LH_C '7' [LH_C '|' [LH_C '1' [LH_C '3' [LH_C '1' [LH_C '7' [LH_C '|' [LH_C '8' [LH_C '9' [LH_C '0' [LH_C '1' [LH_N]]]]]]]]]]]]]]]]]]])
//│ 	in process₀₀₀(lines₀₀₀(cts¹))
//│ 	where
//│ 	def lines₀₀₀(_lh_lines_arg1¹) = 
//│ 		let _lh_matchIdent¹³ = break₀₀₀((fun x⁷ -> polyEq⁰(x⁷, '|')), _lh_lines_arg1¹)
//│ 		in case _lh_matchIdent¹³ of {
//│ 			LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => 
//│ 				let _lh_doInput_LH_C_1¹ = 	
//│ 					let _lh_matchIdent¹⁴ = _lh_lines_LH_P2_1¹
//│ 					in _lh_matchIdent¹⁴(99)
//│ 				in let _lh_doInput_LH_C_0¹ = _lh_lines_LH_P2_0¹
//│ 				in (fun _lh_doInput_arg1³ -> doLine₀₀₀(_lh_doInput_LH_C_0¹, (fun state¹ -> doInput₀₀₀(state¹, _lh_doInput_LH_C_1¹)), _lh_doInput_arg1³))
//│ 			| _  => error⁰}
//│ 		where
//│ 		def break₀₀₀(_lh_break_arg1¹, _lh_break_arg2¹) = 
//│ 			case _lh_break_arg2¹ of {
//│ 				LH_N  => [LH_P2 (fun _lh_f_arg2⁵ -> (fun f⁵⁷ -> _lh_f_arg2⁵)) (fun _lh_dummy² -> (fun _lh_doInput_arg1⁶ -> [LH_N]))]
//│ 				| LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1¹(_lh_break_LH_C_0¹) then [LH_P2 (fun _lh_f_arg2⁶ -> (fun f⁵⁸ -> _lh_f_arg2⁶)) 
//│ 					let _lh_lines_LH_C_1¹ = _lh_break_LH_C_1¹
//│ 					in (fun _lh_dummy³ -> lines₀₀₀(_lh_lines_LH_C_1¹))] else 
//│ 					let _lh_matchIdent²³ = break₀₀₀(_lh_break_arg1¹, _lh_break_LH_C_1¹)
//│ 					in case _lh_matchIdent²³ of {
//│ 						LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 
//│ 							let _lh_f_LH_C_1¹ = _lh_break_LH_P2_0¹
//│ 							in let _lh_f_LH_C_0¹ = _lh_break_LH_C_0¹
//│ 							in (fun _lh_f_arg2⁷ -> (fun f⁵⁹ -> f⁵⁹(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2⁷) + int_val_of_char₀₀₀(_lh_f_LH_C_0¹))))) _lh_break_LH_P2_1¹]
//│ 						| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			where
//│ 			def int_val_of_char₀₀₀(_lh_int_val_of_char_arg1¹) = 
//│ 				(int_of_char⁰(_lh_int_val_of_char_arg1¹) - 48)
//│ 		def doInput₀₀₀(_lh_doInput_arg1⁴, _lh_doInput_arg2¹) = 
//│ 			_lh_doInput_arg2¹(_lh_doInput_arg1⁴)
//│ 		def doLine₀₀₀(_lh_doLine_arg1¹, _lh_doLine_arg2⁵, _lh_doLine_arg3¹) = 
//│ 			let n⁸ = int_val_of_string₀₀₀(_lh_doLine_arg1¹)
//│ 			in let _lh_matchIdent¹⁵ = multiTest₀₀₀(100, _lh_doLine_arg3¹, n⁸)
//│ 			in _lh_matchIdent¹⁵(_lh_doLine_arg2⁵)
//│ 			where
//│ 			def int_val_of_string₀₀₀(_lh_int_val_of_string_arg1¹) = 
//│ 				let f³⁴ = (fun _lh_f_arg1² -> (fun _lh_f_arg2⁴ -> _lh_f_arg1²(_lh_f_arg2⁴, f³⁴)))
//│ 				in f³⁴(_lh_int_val_of_string_arg1¹, 0)
//│ 			def multiTest₀₀₀(_lh_multiTest_arg1¹, _lh_multiTest_arg2¹, _lh_multiTest_arg3¹) = 
//│ 				let mTest³ = (fun k⁴ -> (fun rs¹ -> if (k⁴ == 0) then 
//│ 					let _lh_doLine_LH_P2_1⁴ = rs¹
//│ 					in let _lh_doLine_LH_P2_0⁴ = [True]
//│ 					in (fun _lh_doLine_arg2⁶ -> if _lh_doLine_LH_P2_0⁴ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2⁶(_lh_doLine_LH_P2_1⁴)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2⁶(_lh_doLine_LH_P2_1⁴)]) else 
//│ 					let _lh_matchIdent²¹ = singleTest₀₀₀(_lh_multiTest_arg3¹, findKQ₀₀₀(_lh_multiTest_arg3¹), rs¹)
//│ 					in _lh_matchIdent²¹(k⁴, mTest³)))
//│ 				in if ((_lh_multiTest_arg3¹ <= 1) || even₀₀₀(_lh_multiTest_arg3¹)) then 
//│ 					let _lh_doLine_LH_P2_1⁵ = _lh_multiTest_arg2¹
//│ 					in let _lh_doLine_LH_P2_0⁵ = (_lh_multiTest_arg3¹ == 2)
//│ 					in (fun _lh_doLine_arg2⁷ -> if _lh_doLine_LH_P2_0⁵ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2⁷(_lh_doLine_LH_P2_1⁵)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2⁷(_lh_doLine_LH_P2_1⁵)]) else mTest³(_lh_multiTest_arg1¹, _lh_multiTest_arg2¹)
//│ 				where
//│ 				def even₀₀₀(_lh_even_arg1³) = 
//│ 					((_lh_even_arg1³ % 2) == 0)
//│ 				def findKQ₀₀₀(_lh_findKQ_arg1¹) = 
//│ 					let f⁴¹ = (fun _lh_f_arg1³ -> case _lh_f_arg1³ of {
//│ 						LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => 
//│ 							let _lh_matchIdent¹⁹ = divmod₀₀₀(_lh_f_LH_P2_1³, 2)
//│ 							in _lh_matchIdent¹⁹(_lh_f_LH_P2_0³, _lh_f_LH_P2_1³, f⁴¹)
//│ 						| _  => error⁰})
//│ 					in f⁴¹([LH_P2 0 (_lh_findKQ_arg1¹ - 1)])
//│ 					where
//│ 					def divmod₀₀₀(_lh_divmod_arg1³, _lh_divmod_arg2³) = 
//│ 						let _lh_f_LH_P2_1⁴ = (_lh_divmod_arg1³ % _lh_divmod_arg2³)
//│ 						in let _lh_f_LH_P2_0⁴ = div⁰(_lh_divmod_arg1³, _lh_divmod_arg2³)
//│ 						in (fun _lh_f_LH_P2_0⁵ -> (fun _lh_f_LH_P2_1⁵ -> (fun f⁵¹ -> if (_lh_f_LH_P2_1⁴ == 0) then f⁵¹([LH_P2 (_lh_f_LH_P2_0⁵ + 1) _lh_f_LH_P2_0⁴]) else [LH_P2 _lh_f_LH_P2_0⁵ _lh_f_LH_P2_1⁵])))
//│ 				def singleTest₀₀₀(_lh_singleTest_arg1³, _lh_singleTest_arg2³, _lh_singleTest_arg3¹) = 
//│ 					let _lh_matchIdent¹⁸ = random₀₀₀((_lh_singleTest_arg1³ - 2), _lh_singleTest_arg3¹)
//│ 					in _lh_matchIdent¹⁸(_lh_singleTest_arg1³, _lh_singleTest_arg2³)
//│ 					where
//│ 					def random₀₀₀(_lh_random_arg1¹, _lh_random_arg2¹) = 
//│ 						let ns³ = chop₀₀₀(65536, _lh_random_arg1¹)
//│ 						in let _lh_matchIdent²² = splitAt_lz₀₀₀(length₀₀₀(ns³), _lh_random_arg2¹)
//│ 						in _lh_matchIdent²²(ns³)
//│ 						where
//│ 						def chop₀₀₀(_lh_chop_arg1¹) = 
//│ 							let chop'³ = (fun a⁶ -> (fun n⁹ -> 
//│ 								let _lh_matchIdent²⁰ = divmod₁₀₀(n⁹, _lh_chop_arg1¹)
//│ 								in _lh_matchIdent²⁰(a⁶, chop'³, n⁹)))
//│ 							in chop'³([LH_N])
//│ 							where
//│ 							def divmod₁₀₀(_lh_divmod_arg1², _lh_divmod_arg2²) = 
//│ 								let _lh_chop_LH_P2_1¹ = (_lh_divmod_arg1² % _lh_divmod_arg2²)
//│ 								in let _lh_chop_LH_P2_0¹ = div⁰(_lh_divmod_arg1², _lh_divmod_arg2²)
//│ 								in (fun a⁵ -> (fun chop'² -> (fun n⁶ -> if (n⁶ == 0) then a⁵ else chop'²([LH_C _lh_chop_LH_P2_1¹ a⁵], _lh_chop_LH_P2_0¹))))
//│ 						def length₀₀₀(ls⁹) = 
//│ 							case ls⁹ of {
//│ 								LH_C h²³ t²⁹ => (1 + length₀₀₀(t²⁹))
//│ 								| LH_N  => 0}
//│ 						def splitAt_lz₀₀₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) = 
//│ 							let _lh_random_LH_P2_1¹ = drop_lz₀₀₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)
//│ 							in let _lh_random_LH_P2_0¹ = take_lz₀₀₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)
//│ 							in (fun ns² -> 
//│ 								let _lh_singleTest_LH_P2_1¹ = _lh_random_LH_P2_1¹
//│ 								in let _lh_singleTest_LH_P2_0¹ = makeNumber₀₀₀(65536, uniform₀₀₀(ns², _lh_random_LH_P2_0¹))
//│ 								in (fun _lh_singleTest_arg1² -> (fun _lh_singleTest_arg2² -> 
//│ 									let _lh_multiTest_LH_P2_1¹ = _lh_singleTest_LH_P2_1¹
//│ 									in let _lh_multiTest_LH_P2_0¹ = singleTestX₀₀₀(_lh_singleTest_arg1², _lh_singleTest_arg2², (2 + _lh_singleTest_LH_P2_0¹))
//│ 									in (fun k³ -> (fun mTest² -> if _lh_multiTest_LH_P2_0¹ then mTest²((k³ - 1), _lh_multiTest_LH_P2_1¹) else 
//│ 										let _lh_doLine_LH_P2_1³ = _lh_multiTest_LH_P2_1¹
//│ 										in let _lh_doLine_LH_P2_0³ = [False]
//│ 										in (fun _lh_doLine_arg2⁴ -> if _lh_doLine_LH_P2_0³ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2⁴(_lh_doLine_LH_P2_1³)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2⁴(_lh_doLine_LH_P2_1³)]))))))
//│ 							where
//│ 							def drop_lz₀₀₀(_lh_drop_lz_arg1¹, _lh_drop_lz_arg2¹) = 
//│ 								let _lh_matchIdent¹² = force⁰(_lh_drop_lz_arg2¹)
//│ 								in case _lh_matchIdent¹² of {
//│ 									LH_N  => lazy⁰([LH_N])
//│ 									| LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => if (_lh_drop_lz_arg1¹ > 0) then drop_lz₀₀₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹) else _lh_drop_lz_LH_C_1¹
//│ 									| _  => error⁰}
//│ 							def makeNumber₀₀₀(_lh_makeNumber_arg1¹) = 
//│ 								foldl₀₀₀((fun a⁷ -> (fun x¹² -> ((a⁷ * _lh_makeNumber_arg1¹) + x¹²))), 0)
//│ 								where
//│ 								def foldl₀₀₀(f⁶¹, i³⁹, ls²⁵) = 
//│ 									ls²⁵(f⁶¹, i³⁹)
//│ 							def singleTestX₀₀₀(_lh_singleTestX_arg1¹, _lh_singleTestX_arg2¹, _lh_singleTestX_arg3¹) = 
//│ 								case _lh_singleTestX_arg2¹ of {
//│ 									LH_P2 _lh_singleTestX_LH_P2_0¹ _lh_singleTestX_LH_P2_1¹ => 
//│ 										let square¹ = (fun x¹¹ -> ((x¹¹ * x¹¹) % _lh_singleTestX_arg1¹))
//│ 										in let witness¹ = (fun ls¹² -> 
//│ 											let _lh_matchIdent¹⁶ = ls¹²
//│ 											in case _lh_matchIdent¹⁶ of {
//│ 												LH_N  => [False]
//│ 												| LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1²)
//│ 												| _  => error⁰})
//│ 										in let _lh_matchIdent¹⁷ = take_lz₁₀₁(_lh_singleTestX_LH_P2_0¹, iterate₀₀₀(square¹, powerMod₀₀₀(_lh_singleTestX_arg3¹, _lh_singleTestX_LH_P2_1¹, _lh_singleTestX_arg1¹)))
//│ 										in case _lh_matchIdent¹⁷ of {
//│ 											LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1³))
//│ 											| _  => error⁰}
//│ 									| _  => error⁰}
//│ 								where
//│ 								def iterate₀₀₀(f⁵⁰, x¹³) = 
//│ 									lazy⁰(
//│ 										let t³⁶ = iterate₀₀₀(f⁵⁰, f⁵⁰(x¹³))
//│ 										in let h³⁰ = x¹³
//│ 										in (fun n¹⁰ -> [LH_C h³⁰ take_lz₁₀₀((n¹⁰ - 1), t³⁶)]))
//│ 									where
//│ 									def take_lz₁₀₀(n⁷, ls⁸) = 
//│ 										if (n⁷ > 0) then force⁰(ls⁸, n⁷) else [LH_N]
//│ 								def powerMod₀₀₀(_lh_powerMod_arg1¹, _lh_powerMod_arg2¹, _lh_powerMod_arg3¹) = 
//│ 									case _lh_powerMod_arg2¹ of {
//│ 										0  => 1
//│ 										| _  => 
//│ 											let a'¹ = (_lh_powerMod_arg1¹ mod _lh_powerMod_arg3¹)
//│ 											in let f⁵² = (fun a⁸ -> (fun b² -> (fun c¹ -> 
//│ 												let g¹ = (fun a⁹ -> (fun b³ -> if even₁₀₀(b³) then g¹(((a⁹ * a⁹) % _lh_powerMod_arg3¹), div⁰(b³, 2)) else f⁵²(a⁹, (b³ - 1), ((a⁹ * c¹) % _lh_powerMod_arg3¹))))
//│ 												in if (b² == 0) then c¹ else g¹(a⁸, b²))))
//│ 											in f⁵²(a'¹, (_lh_powerMod_arg2¹ - 1), a'¹)}
//│ 									where
//│ 									def even₁₀₀(_lh_even_arg1²) = 
//│ 										((_lh_even_arg1² % 2) == 0)
//│ 								def take_lz₁₀₁(n¹¹, ls²³) = 
//│ 									if (n¹¹ > 0) then force⁰(ls²³, n¹¹) else [LH_N]
//│ 							def take_lz₀₀₀(n¹², ls²⁶) = 
//│ 								if (n¹² > 0) then case force⁰(ls²⁶) of {
//│ 									LH_C h³¹ t³⁷ => [LH_C h³¹ take_lz₀₀₀((n¹² - 1), t³⁷)]
//│ 									| LH_N  => [LH_N]} else [LH_N]
//│ 							def uniform₀₀₀(_lh_uniform_arg1¹, _lh_uniform_arg2¹) = 
//│ 								case _lh_uniform_arg1¹ of {
//│ 									LH_C _lh_uniform_LH_C_0⁵ _lh_uniform_LH_C_1⁵ => case _lh_uniform_LH_C_1⁵ of {
//│ 										LH_N  => case _lh_uniform_arg2¹ of {
//│ 											LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {
//│ 												LH_N  => 
//│ 													let t¹⁹ = (fun f²⁶ -> (fun i¹⁵ -> i¹⁵))
//│ 													in let h¹⁶ = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ 													in (fun f²⁷ -> (fun i¹⁶ -> foldl₀₀₁(f²⁷, f²⁷(i¹⁶, h¹⁶), t¹⁹)))
//│ 												| _  => case _lh_uniform_arg2¹ of {
//│ 													LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => 
//│ 														let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ 														in if (t²⁰ == _lh_uniform_LH_C_0⁵) then 
//│ 															let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ 															in let h¹⁷ = t²⁰
//│ 															in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else 
//│ 															let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ 															in let h¹⁸ = t²⁰
//│ 															in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²)))
//│ 													| _  => error⁰}}
//│ 											| _  => case _lh_uniform_arg2¹ of {
//│ 												LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => 
//│ 													let t²³ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ 													in if (t²³ == _lh_uniform_LH_C_0⁵) then 
//│ 														let t²⁴ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ 														in let h¹⁹ = t²³
//│ 														in (fun f³⁰ -> (fun i¹⁹ -> foldl₀₀₄(f³⁰, f³⁰(i¹⁹, h¹⁹), t²⁴))) else 
//│ 														let t²⁵ = map₀₁₀((fun x⁹ -> (x⁹ % 65536)), _lh_uniform_LH_C_1⁸)
//│ 														in let h²⁰ = t²³
//│ 														in (fun f³¹ -> (fun i²⁰ -> foldl₀₀₅(f³¹, f³¹(i²⁰, h²⁰), t²⁵)))
//│ 												| _  => error⁰}}
//│ 										| _  => case _lh_uniform_arg2¹ of {
//│ 											LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => 
//│ 												let t²⁶ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ 												in if (t²⁶ == _lh_uniform_LH_C_0⁵) then 
//│ 													let t²⁷ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)
//│ 													in let h²¹ = t²⁶
//│ 													in (fun f³² -> (fun i²¹ -> foldl₀₀₆(f³², f³²(i²¹, h²¹), t²⁷))) else 
//│ 													let t²⁸ = map₀₂₀((fun x¹⁰ -> (x¹⁰ % 65536)), _lh_uniform_LH_C_1⁹)
//│ 													in let h²² = t²⁶
//│ 													in (fun f³³ -> (fun i²² -> foldl₀₀₇(f³³, f³³(i²², h²²), t²⁸)))
//│ 											| _  => error⁰}}
//│ 									| _  => error⁰}
//│ 								where
//│ 								def foldl₀₀₁(f⁵³, i³⁴, ls¹⁹) = 
//│ 									ls¹⁹(f⁵³, i³⁴)
//│ 								def foldl₀₀₂(f⁴², i²⁸, ls¹⁵) = 
//│ 									ls¹⁵(f⁴², i²⁸)
//│ 								def foldl₀₀₃(f³⁵, i²³, ls¹⁰) = 
//│ 									ls¹⁰(f³⁵, i²³)
//│ 								def foldl₀₀₄(f⁴⁹, i³³, ls¹⁸) = 
//│ 									ls¹⁸(f⁴⁹, i³³)
//│ 								def foldl₀₀₅(f⁵⁵, i³⁶, ls²¹) = 
//│ 									ls²¹(f⁵⁵, i³⁶)
//│ 								def foldl₀₀₆(f⁵⁴, i³⁵, ls²⁰) = 
//│ 									ls²⁰(f⁵⁴, i³⁵)
//│ 								def foldl₀₀₇(f³⁷, i²⁵, ls¹³) = 
//│ 									ls¹³(f³⁷, i²⁵)
//│ 								def map₀₀₀(f⁴⁶, ls¹⁷) = 
//│ 									case ls¹⁷ of {
//│ 										LH_C h²⁸ t³⁴ => 
//│ 											let t³⁵ = map₀₀₀(f⁴⁶, t³⁴)
//│ 											in let h²⁹ = f⁴⁶(h²⁸)
//│ 											in (fun f⁴⁷ -> (fun i³¹ -> foldl₀₀₈(f⁴⁷, f⁴⁷(i³¹, h²⁹), t³⁵)))
//│ 										| LH_N  => (fun f⁴⁸ -> (fun i³² -> i³²))}
//│ 									where
//│ 									def foldl₀₀₈(f³⁶, i²⁴, ls¹¹) = 
//│ 										ls¹¹(f³⁶, i²⁴)
//│ 								def map₀₁₀(f³⁸, ls¹⁴) = 
//│ 									case ls¹⁴ of {
//│ 										LH_C h²⁴ t³⁰ => 
//│ 											let t³¹ = map₀₁₀(f³⁸, t³⁰)
//│ 											in let h²⁵ = f³⁸(h²⁴)
//│ 											in (fun f³⁹ -> (fun i²⁶ -> foldl₀₀₉(f³⁹, f³⁹(i²⁶, h²⁵), t³¹)))
//│ 										| LH_N  => (fun f⁴⁰ -> (fun i²⁷ -> i²⁷))}
//│ 									where
//│ 									def foldl₀₀₉(f⁶⁰, i³⁸, ls²⁴) = 
//│ 										ls²⁴(f⁶⁰, i³⁸)
//│ 								def map₀₂₀(f⁴³, ls¹⁶) = 
//│ 									case ls¹⁶ of {
//│ 										LH_C h²⁶ t³² => 
//│ 											let t³³ = map₀₂₀(f⁴³, t³²)
//│ 											in let h²⁷ = f⁴³(h²⁶)
//│ 											in (fun f⁴⁴ -> (fun i²⁹ -> foldl₀₀₁₀(f⁴⁴, f⁴⁴(i²⁹, h²⁷), t³³)))
//│ 										| LH_N  => (fun f⁴⁵ -> (fun i³⁰ -> i³⁰))}
//│ 									where
//│ 									def foldl₀₀₁₀(f⁵⁶, i³⁷, ls²²) = 
//│ 										ls²²(f⁵⁶, i³⁷)
//│ 	def process₀₀₀(_lh_process_arg1¹) = 
//│ 		doInput₀₀₁(randomInts₀₀₀(111, 47), _lh_process_arg1¹)
//│ 		where
//│ 		def doInput₀₀₁(_lh_doInput_arg1⁵, _lh_doInput_arg2²) = 
//│ 			_lh_doInput_arg2²(_lh_doInput_arg1⁵)
//│ 		def randomInts₀₀₀(_lh_randomInts_arg1¹, _lh_randomInts_arg2¹) = 
//│ 			if ((1 <= _lh_randomInts_arg1¹) && (_lh_randomInts_arg1¹ <= 2147483562)) then if ((1 <= _lh_randomInts_arg2¹) && (_lh_randomInts_arg2¹ <= 2147483398)) then rands₀₀₀(_lh_randomInts_arg1¹, _lh_randomInts_arg2¹) else error⁰([LH_C 'r' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'B' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C 'd' [LH_C '.' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) else error⁰([LH_C 'r' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'B' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'f' [LH_C 'i' [LH_C 'r' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C 'd' [LH_C '.' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 			where
//│ 			def rands₀₀₀(_lh_rands_arg1¹, _lh_rands_arg2¹) = 
//│ 				let k⁵ = div⁰(_lh_rands_arg1¹, 53668)
//│ 				in let s1'¹ = ((40014 * (_lh_rands_arg1¹ - (k⁵ * 53668))) - (k⁵ * 12211))
//│ 				in let s1''¹ = if (s1'¹ < 0) then (s1'¹ + 2147483563) else s1'¹
//│ 				in let k'¹ = div⁰(_lh_rands_arg2¹, 52774)
//│ 				in let s2'¹ = ((40692 * (_lh_rands_arg2¹ - (k'¹ * 52774))) - (k'¹ * 3791))
//│ 				in let s2''¹ = if (s2'¹ < 0) then (s2'¹ + 2147483399) else s2'¹
//│ 				in let z¹ = (s1''¹ - s2''¹)
//│ 				in if (z¹ < 1) then lazy⁰([LH_C (z¹ + 2147483562) rands₀₀₀(s1''¹, s2''¹)]) else lazy⁰([LH_C z¹ rands₀₀₀(s1''¹, s2''¹)])
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 1559 --->
//│ 	DeadCodeCons
//│ 	case _lh_matchIdent¹² of {LH_N  => lazy⁰([LH_N]) | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => if (_lh_drop_lz_arg1¹ > 0) then drop_lz₀₀₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹) else _lh_drop_lz_LH_C_1¹ | _  => error⁰}: 1578
//│ 	case force⁰(ls²⁶) of {LH_C h³¹ t³⁷ => [LH_C h³¹ take_lz₀₀₀((n¹² - 1), t³⁷)] | LH_N  => [LH_N]}: 3196
//│ [LH_C _lh_chop_LH_P2_1¹ a⁵]: 1637 --->
//│ 	case _lh_uniform_LH_C_1⁵ of {LH_N  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => let t¹⁹ = (fun f²⁶ -> (fun i¹⁵ -> i¹⁵))
//│ in let h¹⁶ = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ in (fun f²⁷ -> (fun i¹⁶ -> foldl₀₀₁(f²⁷, f²⁷(i¹⁶, h¹⁶), t¹⁹))) | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t²³ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²³ == _lh_uniform_LH_C_0⁵) then let t²⁴ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ in let h¹⁹ = t²³
//│ in (fun f³⁰ -> (fun i¹⁹ -> foldl₀₀₄(f³⁰, f³⁰(i¹⁹, h¹⁹), t²⁴))) else let t²⁵ = map₀₁₀((fun x⁹ -> (x⁹ % 65536)), _lh_uniform_LH_C_1⁸)
//│ in let h²⁰ = t²³
//│ in (fun f³¹ -> (fun i²⁰ -> foldl₀₀₅(f³¹, f³¹(i²⁰, h²⁰), t²⁵))) | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t²⁶ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁶ == _lh_uniform_LH_C_0⁵) then let t²⁷ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)
//│ in let h²¹ = t²⁶
//│ in (fun f³² -> (fun i²¹ -> foldl₀₀₆(f³², f³²(i²¹, h²¹), t²⁷))) else let t²⁸ = map₀₂₀((fun x¹⁰ -> (x¹⁰ % 65536)), _lh_uniform_LH_C_1⁹)
//│ in let h²² = t²⁶
//│ in (fun f³³ -> (fun i²² -> foldl₀₀₇(f³³, f³³(i²², h²²), t²⁸))) | _  => error⁰}}: 1876
//│ 	case _lh_uniform_arg1¹ of {LH_C _lh_uniform_LH_C_0⁵ _lh_uniform_LH_C_1⁵ => case _lh_uniform_LH_C_1⁵ of {LH_N  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => let t¹⁹ = (fun f²⁶ -> (fun i¹⁵ -> i¹⁵))
//│ in let h¹⁶ = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ in (fun f²⁷ -> (fun i¹⁶ -> foldl₀₀₁(f²⁷, f²⁷(i¹⁶, h¹⁶), t¹⁹))) | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t²³ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²³ == _lh_uniform_LH_C_0⁵) then let t²⁴ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ in let h¹⁹ = t²³
//│ in (fun f³⁰ -> (fun i¹⁹ -> foldl₀₀₄(f³⁰, f³⁰(i¹⁹, h¹⁹), t²⁴))) else let t²⁵ = map₀₁₀((fun x⁹ -> (x⁹ % 65536)), _lh_uniform_LH_C_1⁸)
//│ in let h²⁰ = t²³
//│ in (fun f³¹ -> (fun i²⁰ -> foldl₀₀₅(f³¹, f³¹(i²⁰, h²⁰), t²⁵))) | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t²⁶ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁶ == _lh_uniform_LH_C_0⁵) then let t²⁷ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)
//│ in let h²¹ = t²⁶
//│ in (fun f³² -> (fun i²¹ -> foldl₀₀₆(f³², f³²(i²¹, h²¹), t²⁷))) else let t²⁸ = map₀₂₀((fun x¹⁰ -> (x¹⁰ % 65536)), _lh_uniform_LH_C_1⁹)
//│ in let h²² = t²⁶
//│ in (fun f³³ -> (fun i²² -> foldl₀₀₇(f³³, f³³(i²², h²²), t²⁸))) | _  => error⁰}} | _  => error⁰}: 1878
//│ 	case ls⁹ of {LH_C h²³ t²⁹ => (1 + length₀₀₀(t²⁹)) | LH_N  => 0}: 1904
//│ [LH_N]: 1891 --->
//│ 	case _lh_matchIdent¹⁶ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1²) | _  => error⁰}: 2124
//│ [LH_P2 0 (_lh_findKQ_arg1¹ - 1)]: 2256 --->
//│ 	case _lh_f_arg1³ of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => let _lh_matchIdent¹⁹ = divmod₀₀₀(_lh_f_LH_P2_1³, 2)
//│ in _lh_matchIdent¹⁹(_lh_f_LH_P2_0³, _lh_f_LH_P2_1³, f⁴¹) | _  => error⁰}: 2247
//│ [LH_N]: 2294 --->
//│ 	case _lh_uniform_LH_C_1⁵ of {LH_N  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => let t¹⁹ = (fun f²⁶ -> (fun i¹⁵ -> i¹⁵))
//│ in let h¹⁶ = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ in (fun f²⁷ -> (fun i¹⁶ -> foldl₀₀₁(f²⁷, f²⁷(i¹⁶, h¹⁶), t¹⁹))) | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t²³ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²³ == _lh_uniform_LH_C_0⁵) then let t²⁴ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ in let h¹⁹ = t²³
//│ in (fun f³⁰ -> (fun i¹⁹ -> foldl₀₀₄(f³⁰, f³⁰(i¹⁹, h¹⁹), t²⁴))) else let t²⁵ = map₀₁₀((fun x⁹ -> (x⁹ % 65536)), _lh_uniform_LH_C_1⁸)
//│ in let h²⁰ = t²³
//│ in (fun f³¹ -> (fun i²⁰ -> foldl₀₀₅(f³¹, f³¹(i²⁰, h²⁰), t²⁵))) | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t²⁶ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁶ == _lh_uniform_LH_C_0⁵) then let t²⁷ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)
//│ in let h²¹ = t²⁶
//│ in (fun f³² -> (fun i²¹ -> foldl₀₀₆(f³², f³²(i²¹, h²¹), t²⁷))) else let t²⁸ = map₀₂₀((fun x¹⁰ -> (x¹⁰ % 65536)), _lh_uniform_LH_C_1⁹)
//│ in let h²² = t²⁶
//│ in (fun f³³ -> (fun i²² -> foldl₀₀₇(f³³, f³³(i²², h²²), t²⁸))) | _  => error⁰}}: 1876
//│ 	case _lh_uniform_arg1¹ of {LH_C _lh_uniform_LH_C_0⁵ _lh_uniform_LH_C_1⁵ => case _lh_uniform_LH_C_1⁵ of {LH_N  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => let t¹⁹ = (fun f²⁶ -> (fun i¹⁵ -> i¹⁵))
//│ in let h¹⁶ = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ in (fun f²⁷ -> (fun i¹⁶ -> foldl₀₀₁(f²⁷, f²⁷(i¹⁶, h¹⁶), t¹⁹))) | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t²³ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²³ == _lh_uniform_LH_C_0⁵) then let t²⁴ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ in let h¹⁹ = t²³
//│ in (fun f³⁰ -> (fun i¹⁹ -> foldl₀₀₄(f³⁰, f³⁰(i¹⁹, h¹⁹), t²⁴))) else let t²⁵ = map₀₁₀((fun x⁹ -> (x⁹ % 65536)), _lh_uniform_LH_C_1⁸)
//│ in let h²⁰ = t²³
//│ in (fun f³¹ -> (fun i²⁰ -> foldl₀₀₅(f³¹, f³¹(i²⁰, h²⁰), t²⁵))) | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t²⁶ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁶ == _lh_uniform_LH_C_0⁵) then let t²⁷ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)
//│ in let h²¹ = t²⁶
//│ in (fun f³² -> (fun i²¹ -> foldl₀₀₆(f³², f³²(i²¹, h²¹), t²⁷))) else let t²⁸ = map₀₂₀((fun x¹⁰ -> (x¹⁰ % 65536)), _lh_uniform_LH_C_1⁹)
//│ in let h²² = t²⁶
//│ in (fun f³³ -> (fun i²² -> foldl₀₀₇(f³³, f³³(i²², h²²), t²⁸))) | _  => error⁰}} | _  => error⁰}: 1878
//│ 	case ls⁹ of {LH_C h²³ t²⁹ => (1 + length₀₀₀(t²⁹)) | LH_N  => 0}: 1904
//│ [LH_C (z¹ + 2147483562) rands₀₀₀(s1''¹, s2''¹)]: 2600 --->
//│ 	DeadCodeCons
//│ 	case _lh_matchIdent¹² of {LH_N  => lazy⁰([LH_N]) | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => if (_lh_drop_lz_arg1¹ > 0) then drop_lz₀₀₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹) else _lh_drop_lz_LH_C_1¹ | _  => error⁰}: 1578
//│ 	case force⁰(ls²⁶) of {LH_C h³¹ t³⁷ => [LH_C h³¹ take_lz₀₀₀((n¹² - 1), t³⁷)] | LH_N  => [LH_N]}: 3196
//│ [LH_C z¹ rands₀₀₀(s1''¹, s2''¹)]: 2609 --->
//│ 	DeadCodeCons
//│ 	case _lh_matchIdent¹² of {LH_N  => lazy⁰([LH_N]) | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => if (_lh_drop_lz_arg1¹ > 0) then drop_lz₀₀₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹) else _lh_drop_lz_LH_C_1¹ | _  => error⁰}: 1578
//│ 	case force⁰(ls²⁶) of {LH_C h³¹ t³⁷ => [LH_C h³¹ take_lz₀₀₀((n¹² - 1), t³⁷)] | LH_N  => [LH_N]}: 3196
//│ [LH_C h³⁰ take_lz₁₀₀((n¹⁰ - 1), t³⁶)]: 2867 --->
//│ 	case _lh_matchIdent¹⁶ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1²) | _  => error⁰}: 2124
//│ 	case _lh_matchIdent¹⁷ of {LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1³)) | _  => error⁰}: 2167
//│ [LH_P2 (_lh_f_LH_P2_0⁵ + 1) _lh_f_LH_P2_0⁴]: 2915 --->
//│ 	case _lh_f_arg1³ of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => let _lh_matchIdent¹⁹ = divmod₀₀₀(_lh_f_LH_P2_1³, 2)
//│ in _lh_matchIdent¹⁹(_lh_f_LH_P2_0³, _lh_f_LH_P2_1³, f⁴¹) | _  => error⁰}: 2247
//│ [LH_P2 _lh_f_LH_P2_0⁵ _lh_f_LH_P2_1⁵]: 2919 --->
//│ 	case _lh_singleTestX_arg2¹ of {LH_P2 _lh_singleTestX_LH_P2_0¹ _lh_singleTestX_LH_P2_1¹ => let square¹ = (fun x¹¹ -> ((x¹¹ * x¹¹) % _lh_singleTestX_arg1¹))
//│ in let witness¹ = (fun ls¹² -> let _lh_matchIdent¹⁶ = ls¹²
//│ in case _lh_matchIdent¹⁶ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1²) | _  => error⁰})
//│ in let _lh_matchIdent¹⁷ = take_lz₁₀₁(_lh_singleTestX_LH_P2_0¹, iterate₀₀₀(square¹, powerMod₀₀₀(_lh_singleTestX_arg3¹, _lh_singleTestX_LH_P2_1¹, _lh_singleTestX_arg1¹)))
//│ in case _lh_matchIdent¹⁷ of {LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1³)) | _  => error⁰} | _  => error⁰}: 2172
//│ [LH_N]: 3052 --->
//│ 	case _lh_matchIdent¹⁷ of {LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1³)) | _  => error⁰}: 2167
//│ [LH_P2 (fun _lh_f_arg2⁵ -> (fun f⁵⁷ -> _lh_f_arg2⁵)) (fun _lh_dummy² -> (fun _lh_doInput_arg1⁶ -> [LH_N]))]: 3109 --->
//│ 	case _lh_matchIdent¹³ of {LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => let _lh_doInput_LH_C_1¹ = let _lh_matchIdent¹⁴ = _lh_lines_LH_P2_1¹
//│ in _lh_matchIdent¹⁴(99)
//│ in let _lh_doInput_LH_C_0¹ = _lh_lines_LH_P2_0¹
//│ in (fun _lh_doInput_arg1³ -> doLine₀₀₀(_lh_doInput_LH_C_0¹, (fun state¹ -> doInput₀₀₀(state¹, _lh_doInput_LH_C_1¹)), _lh_doInput_arg1³)) | _  => error⁰}: 1615
//│ 	case _lh_matchIdent²³ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 let _lh_f_LH_C_1¹ = _lh_break_LH_P2_0¹
//│ in let _lh_f_LH_C_0¹ = _lh_break_LH_C_0¹
//│ in (fun _lh_f_arg2⁷ -> (fun f⁵⁹ -> f⁵⁹(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2⁷) + int_val_of_char₀₀₀(_lh_f_LH_C_0¹))))) _lh_break_LH_P2_1¹] | _  => error⁰}: 3153
//│ [LH_P2 (fun _lh_f_arg2⁶ -> (fun f⁵⁸ -> _lh_f_arg2⁶)) let _lh_lines_LH_C_1¹ = _lh_break_LH_C_1¹
//│ in (fun _lh_dummy³ -> lines₀₀₀(_lh_lines_LH_C_1¹))]: 3122 --->
//│ 	case _lh_matchIdent¹³ of {LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => let _lh_doInput_LH_C_1¹ = let _lh_matchIdent¹⁴ = _lh_lines_LH_P2_1¹
//│ in _lh_matchIdent¹⁴(99)
//│ in let _lh_doInput_LH_C_0¹ = _lh_lines_LH_P2_0¹
//│ in (fun _lh_doInput_arg1³ -> doLine₀₀₀(_lh_doInput_LH_C_0¹, (fun state¹ -> doInput₀₀₀(state¹, _lh_doInput_LH_C_1¹)), _lh_doInput_arg1³)) | _  => error⁰}: 1615
//│ 	case _lh_matchIdent²³ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 let _lh_f_LH_C_1¹ = _lh_break_LH_P2_0¹
//│ in let _lh_f_LH_C_0¹ = _lh_break_LH_C_0¹
//│ in (fun _lh_f_arg2⁷ -> (fun f⁵⁹ -> f⁵⁹(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2⁷) + int_val_of_char₀₀₀(_lh_f_LH_C_0¹))))) _lh_break_LH_P2_1¹] | _  => error⁰}: 3153
//│ [LH_P2 let _lh_f_LH_C_1¹ = _lh_break_LH_P2_0¹
//│ in let _lh_f_LH_C_0¹ = _lh_break_LH_C_0¹
//│ in (fun _lh_f_arg2⁷ -> (fun f⁵⁹ -> f⁵⁹(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2⁷) + int_val_of_char₀₀₀(_lh_f_LH_C_0¹))))) _lh_break_LH_P2_1¹]: 3151 --->
//│ 	case _lh_matchIdent¹³ of {LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => let _lh_doInput_LH_C_1¹ = let _lh_matchIdent¹⁴ = _lh_lines_LH_P2_1¹
//│ in _lh_matchIdent¹⁴(99)
//│ in let _lh_doInput_LH_C_0¹ = _lh_lines_LH_P2_0¹
//│ in (fun _lh_doInput_arg1³ -> doLine₀₀₀(_lh_doInput_LH_C_0¹, (fun state¹ -> doInput₀₀₀(state¹, _lh_doInput_LH_C_1¹)), _lh_doInput_arg1³)) | _  => error⁰}: 1615
//│ 	case _lh_matchIdent²³ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 let _lh_f_LH_C_1¹ = _lh_break_LH_P2_0¹
//│ in let _lh_f_LH_C_0¹ = _lh_break_LH_C_0¹
//│ in (fun _lh_f_arg2⁷ -> (fun f⁵⁹ -> f⁵⁹(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2⁷) + int_val_of_char₀₀₀(_lh_f_LH_C_0¹))))) _lh_break_LH_P2_1¹] | _  => error⁰}: 3153
//│ [LH_C h³¹ take_lz₀₀₀((n¹² - 1), t³⁷)]: 3194 --->
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}: 1741
//│ 	case _lh_uniform_LH_C_1⁶ of {LH_N  => let t¹⁹ = (fun f²⁶ -> (fun i¹⁵ -> i¹⁵))
//│ in let h¹⁶ = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ in (fun f²⁷ -> (fun i¹⁶ -> foldl₀₀₁(f²⁷, f²⁷(i¹⁶, h¹⁶), t¹⁹))) | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}}: 1742
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t²³ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²³ == _lh_uniform_LH_C_0⁵) then let t²⁴ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ in let h¹⁹ = t²³
//│ in (fun f³⁰ -> (fun i¹⁹ -> foldl₀₀₄(f³⁰, f³⁰(i¹⁹, h¹⁹), t²⁴))) else let t²⁵ = map₀₁₀((fun x⁹ -> (x⁹ % 65536)), _lh_uniform_LH_C_1⁸)
//│ in let h²⁰ = t²³
//│ in (fun f³¹ -> (fun i²⁰ -> foldl₀₀₅(f³¹, f³¹(i²⁰, h²⁰), t²⁵))) | _  => error⁰}: 1808
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => let t¹⁹ = (fun f²⁶ -> (fun i¹⁵ -> i¹⁵))
//│ in let h¹⁶ = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ in (fun f²⁷ -> (fun i¹⁶ -> foldl₀₀₁(f²⁷, f²⁷(i¹⁶, h¹⁶), t¹⁹))) | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t²³ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²³ == _lh_uniform_LH_C_0⁵) then let t²⁴ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ in let h¹⁹ = t²³
//│ in (fun f³⁰ -> (fun i¹⁹ -> foldl₀₀₄(f³⁰, f³⁰(i¹⁹, h¹⁹), t²⁴))) else let t²⁵ = map₀₁₀((fun x⁹ -> (x⁹ % 65536)), _lh_uniform_LH_C_1⁸)
//│ in let h²⁰ = t²³
//│ in (fun f³¹ -> (fun i²⁰ -> foldl₀₀₅(f³¹, f³¹(i²⁰, h²⁰), t²⁵))) | _  => error⁰}}: 1809
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t²⁶ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁶ == _lh_uniform_LH_C_0⁵) then let t²⁷ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)
//│ in let h²¹ = t²⁶
//│ in (fun f³² -> (fun i²¹ -> foldl₀₀₆(f³², f³²(i²¹, h²¹), t²⁷))) else let t²⁸ = map₀₂₀((fun x¹⁰ -> (x¹⁰ % 65536)), _lh_uniform_LH_C_1⁹)
//│ in let h²² = t²⁶
//│ in (fun f³³ -> (fun i²² -> foldl₀₀₇(f³³, f³³(i²², h²²), t²⁸))) | _  => error⁰}: 1875
//│ 	case ls¹⁴ of {LH_C h²⁴ t³⁰ => let t³¹ = map₀₁₀(f³⁸, t³⁰)
//│ in let h²⁵ = f³⁸(h²⁴)
//│ in (fun f³⁹ -> (fun i²⁶ -> foldl₀₀₉(f³⁹, f³⁹(i²⁶, h²⁵), t³¹))) | LH_N  => (fun f⁴⁰ -> (fun i²⁷ -> i²⁷))}: 2211
//│ 	case ls¹⁶ of {LH_C h²⁶ t³² => let t³³ = map₀₂₀(f⁴³, t³²)
//│ in let h²⁷ = f⁴³(h²⁶)
//│ in (fun f⁴⁴ -> (fun i²⁹ -> foldl₀₀₁₀(f⁴⁴, f⁴⁴(i²⁹, h²⁷), t³³))) | LH_N  => (fun f⁴⁵ -> (fun i³⁰ -> i³⁰))}: 2807
//│ 	case ls¹⁷ of {LH_C h²⁸ t³⁴ => let t³⁵ = map₀₀₀(f⁴⁶, t³⁴)
//│ in let h²⁹ = f⁴⁶(h²⁸)
//│ in (fun f⁴⁷ -> (fun i³¹ -> foldl₀₀₈(f⁴⁷, f⁴⁷(i³¹, h²⁹), t³⁵))) | LH_N  => (fun f⁴⁸ -> (fun i³² -> i³²))}: 2837
//│ [LH_N]: 3195 --->
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}: 1741
//│ 	case _lh_uniform_LH_C_1⁶ of {LH_N  => let t¹⁹ = (fun f²⁶ -> (fun i¹⁵ -> i¹⁵))
//│ in let h¹⁶ = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ in (fun f²⁷ -> (fun i¹⁶ -> foldl₀₀₁(f²⁷, f²⁷(i¹⁶, h¹⁶), t¹⁹))) | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}}: 1742
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t²³ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²³ == _lh_uniform_LH_C_0⁵) then let t²⁴ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ in let h¹⁹ = t²³
//│ in (fun f³⁰ -> (fun i¹⁹ -> foldl₀₀₄(f³⁰, f³⁰(i¹⁹, h¹⁹), t²⁴))) else let t²⁵ = map₀₁₀((fun x⁹ -> (x⁹ % 65536)), _lh_uniform_LH_C_1⁸)
//│ in let h²⁰ = t²³
//│ in (fun f³¹ -> (fun i²⁰ -> foldl₀₀₅(f³¹, f³¹(i²⁰, h²⁰), t²⁵))) | _  => error⁰}: 1808
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => let t¹⁹ = (fun f²⁶ -> (fun i¹⁵ -> i¹⁵))
//│ in let h¹⁶ = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ in (fun f²⁷ -> (fun i¹⁶ -> foldl₀₀₁(f²⁷, f²⁷(i¹⁶, h¹⁶), t¹⁹))) | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t²³ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²³ == _lh_uniform_LH_C_0⁵) then let t²⁴ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ in let h¹⁹ = t²³
//│ in (fun f³⁰ -> (fun i¹⁹ -> foldl₀₀₄(f³⁰, f³⁰(i¹⁹, h¹⁹), t²⁴))) else let t²⁵ = map₀₁₀((fun x⁹ -> (x⁹ % 65536)), _lh_uniform_LH_C_1⁸)
//│ in let h²⁰ = t²³
//│ in (fun f³¹ -> (fun i²⁰ -> foldl₀₀₅(f³¹, f³¹(i²⁰, h²⁰), t²⁵))) | _  => error⁰}}: 1809
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t²⁶ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁶ == _lh_uniform_LH_C_0⁵) then let t²⁷ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)
//│ in let h²¹ = t²⁶
//│ in (fun f³² -> (fun i²¹ -> foldl₀₀₆(f³², f³²(i²¹, h²¹), t²⁷))) else let t²⁸ = map₀₂₀((fun x¹⁰ -> (x¹⁰ % 65536)), _lh_uniform_LH_C_1⁹)
//│ in let h²² = t²⁶
//│ in (fun f³³ -> (fun i²² -> foldl₀₀₇(f³³, f³³(i²², h²²), t²⁸))) | _  => error⁰}: 1875
//│ 	case ls¹⁴ of {LH_C h²⁴ t³⁰ => let t³¹ = map₀₁₀(f³⁸, t³⁰)
//│ in let h²⁵ = f³⁸(h²⁴)
//│ in (fun f³⁹ -> (fun i²⁶ -> foldl₀₀₉(f³⁹, f³⁹(i²⁶, h²⁵), t³¹))) | LH_N  => (fun f⁴⁰ -> (fun i²⁷ -> i²⁷))}: 2211
//│ 	case ls¹⁶ of {LH_C h²⁶ t³² => let t³³ = map₀₂₀(f⁴³, t³²)
//│ in let h²⁷ = f⁴³(h²⁶)
//│ in (fun f⁴⁴ -> (fun i²⁹ -> foldl₀₀₁₀(f⁴⁴, f⁴⁴(i²⁹, h²⁷), t³³))) | LH_N  => (fun f⁴⁵ -> (fun i³⁰ -> i³⁰))}: 2807
//│ 	case ls¹⁷ of {LH_C h²⁸ t³⁴ => let t³⁵ = map₀₀₀(f⁴⁶, t³⁴)
//│ in let h²⁹ = f⁴⁶(h²⁸)
//│ in (fun f⁴⁷ -> (fun i³¹ -> foldl₀₀₈(f⁴⁷, f⁴⁷(i³¹, h²⁹), t³⁵))) | LH_N  => (fun f⁴⁸ -> (fun i³² -> i³²))}: 2837
//│ [LH_N]: 3197 --->
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}: 1741
//│ 	case _lh_uniform_LH_C_1⁶ of {LH_N  => let t¹⁹ = (fun f²⁶ -> (fun i¹⁵ -> i¹⁵))
//│ in let h¹⁶ = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ in (fun f²⁷ -> (fun i¹⁶ -> foldl₀₀₁(f²⁷, f²⁷(i¹⁶, h¹⁶), t¹⁹))) | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}}: 1742
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t²³ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²³ == _lh_uniform_LH_C_0⁵) then let t²⁴ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ in let h¹⁹ = t²³
//│ in (fun f³⁰ -> (fun i¹⁹ -> foldl₀₀₄(f³⁰, f³⁰(i¹⁹, h¹⁹), t²⁴))) else let t²⁵ = map₀₁₀((fun x⁹ -> (x⁹ % 65536)), _lh_uniform_LH_C_1⁸)
//│ in let h²⁰ = t²³
//│ in (fun f³¹ -> (fun i²⁰ -> foldl₀₀₅(f³¹, f³¹(i²⁰, h²⁰), t²⁵))) | _  => error⁰}: 1808
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => let t¹⁹ = (fun f²⁶ -> (fun i¹⁵ -> i¹⁵))
//│ in let h¹⁶ = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ in (fun f²⁷ -> (fun i¹⁶ -> foldl₀₀₁(f²⁷, f²⁷(i¹⁶, h¹⁶), t¹⁹))) | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t²³ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²³ == _lh_uniform_LH_C_0⁵) then let t²⁴ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ in let h¹⁹ = t²³
//│ in (fun f³⁰ -> (fun i¹⁹ -> foldl₀₀₄(f³⁰, f³⁰(i¹⁹, h¹⁹), t²⁴))) else let t²⁵ = map₀₁₀((fun x⁹ -> (x⁹ % 65536)), _lh_uniform_LH_C_1⁸)
//│ in let h²⁰ = t²³
//│ in (fun f³¹ -> (fun i²⁰ -> foldl₀₀₅(f³¹, f³¹(i²⁰, h²⁰), t²⁵))) | _  => error⁰}}: 1809
//│ 	case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t²⁶ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁶ == _lh_uniform_LH_C_0⁵) then let t²⁷ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)
//│ in let h²¹ = t²⁶
//│ in (fun f³² -> (fun i²¹ -> foldl₀₀₆(f³², f³²(i²¹, h²¹), t²⁷))) else let t²⁸ = map₀₂₀((fun x¹⁰ -> (x¹⁰ % 65536)), _lh_uniform_LH_C_1⁹)
//│ in let h²² = t²⁶
//│ in (fun f³³ -> (fun i²² -> foldl₀₀₇(f³³, f³³(i²², h²²), t²⁸))) | _  => error⁰}: 1875
//│ 	case ls¹⁴ of {LH_C h²⁴ t³⁰ => let t³¹ = map₀₁₀(f³⁸, t³⁰)
//│ in let h²⁵ = f³⁸(h²⁴)
//│ in (fun f³⁹ -> (fun i²⁶ -> foldl₀₀₉(f³⁹, f³⁹(i²⁶, h²⁵), t³¹))) | LH_N  => (fun f⁴⁰ -> (fun i²⁷ -> i²⁷))}: 2211
//│ 	case ls¹⁶ of {LH_C h²⁶ t³² => let t³³ = map₀₂₀(f⁴³, t³²)
//│ in let h²⁷ = f⁴³(h²⁶)
//│ in (fun f⁴⁴ -> (fun i²⁹ -> foldl₀₀₁₀(f⁴⁴, f⁴⁴(i²⁹, h²⁷), t³³))) | LH_N  => (fun f⁴⁵ -> (fun i³⁰ -> i³⁰))}: 2807
//│ 	case ls¹⁷ of {LH_C h²⁸ t³⁴ => let t³⁵ = map₀₀₀(f⁴⁶, t³⁴)
//│ in let h²⁹ = f⁴⁶(h²⁸)
//│ in (fun f⁴⁷ -> (fun i³¹ -> foldl₀₀₈(f⁴⁷, f⁴⁷(i³¹, h²⁹), t³⁵))) | LH_N  => (fun f⁴⁸ -> (fun i³² -> i³²))}: 2837
//│ ------------------
//│ case _lh_matchIdent¹² of {LH_N  => lazy⁰([LH_N]) | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => if (_lh_drop_lz_arg1¹ > 0) then drop_lz₀₀₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹) else _lh_drop_lz_LH_C_1¹ | _  => error⁰}: 1578 --->
//│ 	DeadCodeProd
//│ 	[LH_N]: 1559
//│ 	[LH_C (z¹ + 2147483562) rands₀₀₀(s1''¹, s2''¹)]: 2600
//│ 	[LH_C z¹ rands₀₀₀(s1''¹, s2''¹)]: 2609
//│ case _lh_matchIdent¹³ of {LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => let _lh_doInput_LH_C_1¹ = let _lh_matchIdent¹⁴ = _lh_lines_LH_P2_1¹
//│ in _lh_matchIdent¹⁴(99)
//│ in let _lh_doInput_LH_C_0¹ = _lh_lines_LH_P2_0¹
//│ in (fun _lh_doInput_arg1³ -> doLine₀₀₀(_lh_doInput_LH_C_0¹, (fun state¹ -> doInput₀₀₀(state¹, _lh_doInput_LH_C_1¹)), _lh_doInput_arg1³)) | _  => error⁰}: 1615 --->
//│ 	[LH_P2 (fun _lh_f_arg2⁵ -> (fun f⁵⁷ -> _lh_f_arg2⁵)) (fun _lh_dummy² -> (fun _lh_doInput_arg1⁶ -> [LH_N]))]: 3109
//│ 	[LH_P2 (fun _lh_f_arg2⁶ -> (fun f⁵⁸ -> _lh_f_arg2⁶)) let _lh_lines_LH_C_1¹ = _lh_break_LH_C_1¹
//│ in (fun _lh_dummy³ -> lines₀₀₀(_lh_lines_LH_C_1¹))]: 3122
//│ 	[LH_P2 let _lh_f_LH_C_1¹ = _lh_break_LH_P2_0¹
//│ in let _lh_f_LH_C_0¹ = _lh_break_LH_C_0¹
//│ in (fun _lh_f_arg2⁷ -> (fun f⁵⁹ -> f⁵⁹(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2⁷) + int_val_of_char₀₀₀(_lh_f_LH_C_0¹))))) _lh_break_LH_P2_1¹]: 3151
//│ case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}: 1741 --->
//│ 	[LH_C h³¹ take_lz₀₀₀((n¹² - 1), t³⁷)]: 3194
//│ 	[LH_N]: 3195
//│ 	[LH_N]: 3197
//│ case _lh_uniform_LH_C_1⁶ of {LH_N  => let t¹⁹ = (fun f²⁶ -> (fun i¹⁵ -> i¹⁵))
//│ in let h¹⁶ = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ in (fun f²⁷ -> (fun i¹⁶ -> foldl₀₀₁(f²⁷, f²⁷(i¹⁶, h¹⁶), t¹⁹))) | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}}: 1742 --->
//│ 	[LH_C h³¹ take_lz₀₀₀((n¹² - 1), t³⁷)]: 3194
//│ 	[LH_N]: 3195
//│ 	[LH_N]: 3197
//│ case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t²³ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²³ == _lh_uniform_LH_C_0⁵) then let t²⁴ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ in let h¹⁹ = t²³
//│ in (fun f³⁰ -> (fun i¹⁹ -> foldl₀₀₄(f³⁰, f³⁰(i¹⁹, h¹⁹), t²⁴))) else let t²⁵ = map₀₁₀((fun x⁹ -> (x⁹ % 65536)), _lh_uniform_LH_C_1⁸)
//│ in let h²⁰ = t²³
//│ in (fun f³¹ -> (fun i²⁰ -> foldl₀₀₅(f³¹, f³¹(i²⁰, h²⁰), t²⁵))) | _  => error⁰}: 1808 --->
//│ 	[LH_C h³¹ take_lz₀₀₀((n¹² - 1), t³⁷)]: 3194
//│ 	[LH_N]: 3195
//│ 	[LH_N]: 3197
//│ case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => let t¹⁹ = (fun f²⁶ -> (fun i¹⁵ -> i¹⁵))
//│ in let h¹⁶ = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ in (fun f²⁷ -> (fun i¹⁶ -> foldl₀₀₁(f²⁷, f²⁷(i¹⁶, h¹⁶), t¹⁹))) | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t²³ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²³ == _lh_uniform_LH_C_0⁵) then let t²⁴ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ in let h¹⁹ = t²³
//│ in (fun f³⁰ -> (fun i¹⁹ -> foldl₀₀₄(f³⁰, f³⁰(i¹⁹, h¹⁹), t²⁴))) else let t²⁵ = map₀₁₀((fun x⁹ -> (x⁹ % 65536)), _lh_uniform_LH_C_1⁸)
//│ in let h²⁰ = t²³
//│ in (fun f³¹ -> (fun i²⁰ -> foldl₀₀₅(f³¹, f³¹(i²⁰, h²⁰), t²⁵))) | _  => error⁰}}: 1809 --->
//│ 	[LH_C h³¹ take_lz₀₀₀((n¹² - 1), t³⁷)]: 3194
//│ 	[LH_N]: 3195
//│ 	[LH_N]: 3197
//│ case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t²⁶ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁶ == _lh_uniform_LH_C_0⁵) then let t²⁷ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)
//│ in let h²¹ = t²⁶
//│ in (fun f³² -> (fun i²¹ -> foldl₀₀₆(f³², f³²(i²¹, h²¹), t²⁷))) else let t²⁸ = map₀₂₀((fun x¹⁰ -> (x¹⁰ % 65536)), _lh_uniform_LH_C_1⁹)
//│ in let h²² = t²⁶
//│ in (fun f³³ -> (fun i²² -> foldl₀₀₇(f³³, f³³(i²², h²²), t²⁸))) | _  => error⁰}: 1875 --->
//│ 	[LH_C h³¹ take_lz₀₀₀((n¹² - 1), t³⁷)]: 3194
//│ 	[LH_N]: 3195
//│ 	[LH_N]: 3197
//│ case _lh_uniform_LH_C_1⁵ of {LH_N  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => let t¹⁹ = (fun f²⁶ -> (fun i¹⁵ -> i¹⁵))
//│ in let h¹⁶ = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ in (fun f²⁷ -> (fun i¹⁶ -> foldl₀₀₁(f²⁷, f²⁷(i¹⁶, h¹⁶), t¹⁹))) | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t²³ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²³ == _lh_uniform_LH_C_0⁵) then let t²⁴ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ in let h¹⁹ = t²³
//│ in (fun f³⁰ -> (fun i¹⁹ -> foldl₀₀₄(f³⁰, f³⁰(i¹⁹, h¹⁹), t²⁴))) else let t²⁵ = map₀₁₀((fun x⁹ -> (x⁹ % 65536)), _lh_uniform_LH_C_1⁸)
//│ in let h²⁰ = t²³
//│ in (fun f³¹ -> (fun i²⁰ -> foldl₀₀₅(f³¹, f³¹(i²⁰, h²⁰), t²⁵))) | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t²⁶ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁶ == _lh_uniform_LH_C_0⁵) then let t²⁷ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)
//│ in let h²¹ = t²⁶
//│ in (fun f³² -> (fun i²¹ -> foldl₀₀₆(f³², f³²(i²¹, h²¹), t²⁷))) else let t²⁸ = map₀₂₀((fun x¹⁰ -> (x¹⁰ % 65536)), _lh_uniform_LH_C_1⁹)
//│ in let h²² = t²⁶
//│ in (fun f³³ -> (fun i²² -> foldl₀₀₇(f³³, f³³(i²², h²²), t²⁸))) | _  => error⁰}}: 1876 --->
//│ 	[LH_C _lh_chop_LH_P2_1¹ a⁵]: 1637
//│ 	[LH_N]: 2294
//│ case _lh_uniform_arg1¹ of {LH_C _lh_uniform_LH_C_0⁵ _lh_uniform_LH_C_1⁵ => case _lh_uniform_LH_C_1⁵ of {LH_N  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {LH_N  => let t¹⁹ = (fun f²⁶ -> (fun i¹⁵ -> i¹⁵))
//│ in let h¹⁶ = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ in (fun f²⁷ -> (fun i¹⁶ -> foldl₀₀₁(f²⁷, f²⁷(i¹⁶, h¹⁶), t¹⁹))) | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => let t²⁰ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁰ == _lh_uniform_LH_C_0⁵) then let t²¹ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ in let h¹⁷ = t²⁰
//│ in (fun f²⁸ -> (fun i¹⁷ -> foldl₀₀₂(f²⁸, f²⁸(i¹⁷, h¹⁷), t²¹))) else let t²² = map₀₀₀((fun x⁸ -> (x⁸ % 65536)), _lh_uniform_LH_C_1⁷)
//│ in let h¹⁸ = t²⁰
//│ in (fun f²⁹ -> (fun i¹⁸ -> foldl₀₀₃(f²⁹, f²⁹(i¹⁸, h¹⁸), t²²))) | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => let t²³ = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²³ == _lh_uniform_LH_C_0⁵) then let t²⁴ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ in let h¹⁹ = t²³
//│ in (fun f³⁰ -> (fun i¹⁹ -> foldl₀₀₄(f³⁰, f³⁰(i¹⁹, h¹⁹), t²⁴))) else let t²⁵ = map₀₁₀((fun x⁹ -> (x⁹ % 65536)), _lh_uniform_LH_C_1⁸)
//│ in let h²⁰ = t²³
//│ in (fun f³¹ -> (fun i²⁰ -> foldl₀₀₅(f³¹, f³¹(i²⁰, h²⁰), t²⁵))) | _  => error⁰}} | _  => case _lh_uniform_arg2¹ of {LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => let t²⁶ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ in if (t²⁶ == _lh_uniform_LH_C_0⁵) then let t²⁷ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)
//│ in let h²¹ = t²⁶
//│ in (fun f³² -> (fun i²¹ -> foldl₀₀₆(f³², f³²(i²¹, h²¹), t²⁷))) else let t²⁸ = map₀₂₀((fun x¹⁰ -> (x¹⁰ % 65536)), _lh_uniform_LH_C_1⁹)
//│ in let h²² = t²⁶
//│ in (fun f³³ -> (fun i²² -> foldl₀₀₇(f³³, f³³(i²², h²²), t²⁸))) | _  => error⁰}} | _  => error⁰}: 1878 --->
//│ 	[LH_C _lh_chop_LH_P2_1¹ a⁵]: 1637
//│ 	[LH_N]: 2294
//│ case ls⁹ of {LH_C h²³ t²⁹ => (1 + length₀₀₀(t²⁹)) | LH_N  => 0}: 1904 --->
//│ 	[LH_C _lh_chop_LH_P2_1¹ a⁵]: 1637
//│ 	[LH_N]: 2294
//│ case _lh_matchIdent¹⁶ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1²) | _  => error⁰}: 2124 --->
//│ 	[LH_N]: 1891
//│ 	[LH_C h³⁰ take_lz₁₀₀((n¹⁰ - 1), t³⁶)]: 2867
//│ case _lh_matchIdent¹⁷ of {LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1³)) | _  => error⁰}: 2167 --->
//│ 	[LH_C h³⁰ take_lz₁₀₀((n¹⁰ - 1), t³⁶)]: 2867
//│ 	[LH_N]: 3052
//│ case _lh_singleTestX_arg2¹ of {LH_P2 _lh_singleTestX_LH_P2_0¹ _lh_singleTestX_LH_P2_1¹ => let square¹ = (fun x¹¹ -> ((x¹¹ * x¹¹) % _lh_singleTestX_arg1¹))
//│ in let witness¹ = (fun ls¹² -> let _lh_matchIdent¹⁶ = ls¹²
//│ in case _lh_matchIdent¹⁶ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1²) | _  => error⁰})
//│ in let _lh_matchIdent¹⁷ = take_lz₁₀₁(_lh_singleTestX_LH_P2_0¹, iterate₀₀₀(square¹, powerMod₀₀₀(_lh_singleTestX_arg3¹, _lh_singleTestX_LH_P2_1¹, _lh_singleTestX_arg1¹)))
//│ in case _lh_matchIdent¹⁷ of {LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1³)) | _  => error⁰} | _  => error⁰}: 2172 --->
//│ 	[LH_P2 _lh_f_LH_P2_0⁵ _lh_f_LH_P2_1⁵]: 2919
//│ case ls¹⁴ of {LH_C h²⁴ t³⁰ => let t³¹ = map₀₁₀(f³⁸, t³⁰)
//│ in let h²⁵ = f³⁸(h²⁴)
//│ in (fun f³⁹ -> (fun i²⁶ -> foldl₀₀₉(f³⁹, f³⁹(i²⁶, h²⁵), t³¹))) | LH_N  => (fun f⁴⁰ -> (fun i²⁷ -> i²⁷))}: 2211 --->
//│ 	[LH_C h³¹ take_lz₀₀₀((n¹² - 1), t³⁷)]: 3194
//│ 	[LH_N]: 3195
//│ 	[LH_N]: 3197
//│ case _lh_f_arg1³ of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => let _lh_matchIdent¹⁹ = divmod₀₀₀(_lh_f_LH_P2_1³, 2)
//│ in _lh_matchIdent¹⁹(_lh_f_LH_P2_0³, _lh_f_LH_P2_1³, f⁴¹) | _  => error⁰}: 2247 --->
//│ 	[LH_P2 0 (_lh_findKQ_arg1¹ - 1)]: 2256
//│ 	[LH_P2 (_lh_f_LH_P2_0⁵ + 1) _lh_f_LH_P2_0⁴]: 2915
//│ case ls¹⁶ of {LH_C h²⁶ t³² => let t³³ = map₀₂₀(f⁴³, t³²)
//│ in let h²⁷ = f⁴³(h²⁶)
//│ in (fun f⁴⁴ -> (fun i²⁹ -> foldl₀₀₁₀(f⁴⁴, f⁴⁴(i²⁹, h²⁷), t³³))) | LH_N  => (fun f⁴⁵ -> (fun i³⁰ -> i³⁰))}: 2807 --->
//│ 	[LH_C h³¹ take_lz₀₀₀((n¹² - 1), t³⁷)]: 3194
//│ 	[LH_N]: 3195
//│ 	[LH_N]: 3197
//│ case ls¹⁷ of {LH_C h²⁸ t³⁴ => let t³⁵ = map₀₀₀(f⁴⁶, t³⁴)
//│ in let h²⁹ = f⁴⁶(h²⁸)
//│ in (fun f⁴⁷ -> (fun i³¹ -> foldl₀₀₈(f⁴⁷, f⁴⁷(i³¹, h²⁹), t³⁵))) | LH_N  => (fun f⁴⁸ -> (fun i³² -> i³²))}: 2837 --->
//│ 	[LH_C h³¹ take_lz₀₀₀((n¹² - 1), t³⁷)]: 3194
//│ 	[LH_N]: 3195
//│ 	[LH_N]: 3197
//│ case _lh_matchIdent²³ of {LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 let _lh_f_LH_C_1¹ = _lh_break_LH_P2_0¹
//│ in let _lh_f_LH_C_0¹ = _lh_break_LH_C_0¹
//│ in (fun _lh_f_arg2⁷ -> (fun f⁵⁹ -> f⁵⁹(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2⁷) + int_val_of_char₀₀₀(_lh_f_LH_C_0¹))))) _lh_break_LH_P2_1¹] | _  => error⁰}: 3153 --->
//│ 	[LH_P2 (fun _lh_f_arg2⁵ -> (fun f⁵⁷ -> _lh_f_arg2⁵)) (fun _lh_dummy² -> (fun _lh_doInput_arg1⁶ -> [LH_N]))]: 3109
//│ 	[LH_P2 (fun _lh_f_arg2⁶ -> (fun f⁵⁸ -> _lh_f_arg2⁶)) let _lh_lines_LH_C_1¹ = _lh_break_LH_C_1¹
//│ in (fun _lh_dummy³ -> lines₀₀₀(_lh_lines_LH_C_1¹))]: 3122
//│ 	[LH_P2 let _lh_f_LH_C_1¹ = _lh_break_LH_P2_0¹
//│ in let _lh_f_LH_C_0¹ = _lh_break_LH_C_0¹
//│ in (fun _lh_f_arg2⁷ -> (fun f⁵⁹ -> f⁵⁹(_lh_f_LH_C_1¹, ((10 * _lh_f_arg2⁷) + int_val_of_char₀₀₀(_lh_f_LH_C_0¹))))) _lh_break_LH_P2_1¹]: 3151
//│ case force⁰(ls²⁶) of {LH_C h³¹ t³⁷ => [LH_C h³¹ take_lz₀₀₀((n¹² - 1), t³⁷)] | LH_N  => [LH_N]}: 3196 --->
//│ 	DeadCodeProd
//│ 	[LH_N]: 1559
//│ 	[LH_C (z¹ + 2147483562) rands₀₀₀(s1''¹, s2''¹)]: 2600
//│ 	[LH_C z¹ rands₀₀₀(s1''¹, s2''¹)]: 2609
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_P2 0 (_lh_findKQ_arg1¹ - 1)]: 2256 --->
//│ 	case _lh_f_arg1³ of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => let _lh_matchIdent¹⁹ = divmod₀₀₀(_lh_f_LH_P2_1³, 2)
//│ in _lh_matchIdent¹⁹(_lh_f_LH_P2_0³, _lh_f_LH_P2_1³, f⁴¹) | _  => error⁰}: 2247
//│ [LH_P2 (_lh_f_LH_P2_0⁵ + 1) _lh_f_LH_P2_0⁴]: 2915 --->
//│ 	case _lh_f_arg1³ of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => let _lh_matchIdent¹⁹ = divmod₀₀₀(_lh_f_LH_P2_1³, 2)
//│ in _lh_matchIdent¹⁹(_lh_f_LH_P2_0³, _lh_f_LH_P2_1³, f⁴¹) | _  => error⁰}: 2247
//│ [LH_P2 _lh_f_LH_P2_0⁵ _lh_f_LH_P2_1⁵]: 2919 --->
//│ 	case _lh_singleTestX_arg2¹ of {LH_P2 _lh_singleTestX_LH_P2_0¹ _lh_singleTestX_LH_P2_1¹ => let square¹ = (fun x¹¹ -> ((x¹¹ * x¹¹) % _lh_singleTestX_arg1¹))
//│ in let witness¹ = (fun ls¹² -> let _lh_matchIdent¹⁶ = ls¹²
//│ in case _lh_matchIdent¹⁶ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1²) | _  => error⁰})
//│ in let _lh_matchIdent¹⁷ = take_lz₁₀₁(_lh_singleTestX_LH_P2_0¹, iterate₀₀₀(square¹, powerMod₀₀₀(_lh_singleTestX_arg3¹, _lh_singleTestX_LH_P2_1¹, _lh_singleTestX_arg1¹)))
//│ in case _lh_matchIdent¹⁷ of {LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1³)) | _  => error⁰} | _  => error⁰}: 2172
//│ ------------------
//│ case _lh_singleTestX_arg2¹ of {LH_P2 _lh_singleTestX_LH_P2_0¹ _lh_singleTestX_LH_P2_1¹ => let square¹ = (fun x¹¹ -> ((x¹¹ * x¹¹) % _lh_singleTestX_arg1¹))
//│ in let witness¹ = (fun ls¹² -> let _lh_matchIdent¹⁶ = ls¹²
//│ in case _lh_matchIdent¹⁶ of {LH_N  => [False] | LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1¹ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness¹(_lh_singleTestX_LH_C_1²) | _  => error⁰})
//│ in let _lh_matchIdent¹⁷ = take_lz₁₀₁(_lh_singleTestX_LH_P2_0¹, iterate₀₀₀(square¹, powerMod₀₀₀(_lh_singleTestX_arg3¹, _lh_singleTestX_LH_P2_1¹, _lh_singleTestX_arg1¹)))
//│ in case _lh_matchIdent¹⁷ of {LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1¹ - 1))) || witness¹(_lh_singleTestX_LH_C_1³)) | _  => error⁰} | _  => error⁰}: 2172 --->
//│ 	[LH_P2 _lh_f_LH_P2_0⁵ _lh_f_LH_P2_1⁵]: 2919
//│ case _lh_f_arg1³ of {LH_P2 _lh_f_LH_P2_0³ _lh_f_LH_P2_1³ => let _lh_matchIdent¹⁹ = divmod₀₀₀(_lh_f_LH_P2_1³, 2)
//│ in _lh_matchIdent¹⁹(_lh_f_LH_P2_0³, _lh_f_LH_P2_1³, f⁴¹) | _  => error⁰}: 2247 --->
//│ 	[LH_P2 0 (_lh_findKQ_arg1¹ - 1)]: 2256
//│ 	[LH_P2 (_lh_f_LH_P2_0⁵ + 1) _lh_f_LH_P2_0⁴]: 2915
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testPrimetest_nofib₀₀₀(primId⁰(0))
//│ def testPrimetest_nofib₀₀₀(_lh_testPrimetest_nofib_arg1²) = 
//│ 	let cts² = primId⁰([LH_C '2' [LH_C '4' [LH_C '|' [LH_C '4' [LH_C '8' [LH_C '|' [LH_C '4' [LH_C '7' [LH_C '|' [LH_C '1' [LH_C '3' [LH_C '1' [LH_C '7' [LH_C '|' [LH_C '8' [LH_C '9' [LH_C '0' [LH_C '1' [LH_N]]]]]]]]]]]]]]]]]]])
//│ 	in process₀₀₀(lines₀₀₀(cts²))
//│ 	where
//│ 	def lines₀₀₀(_lh_lines_arg1²) = 
//│ 		let _lh_matchIdent³⁵ = break₀₀₀((fun x²⁰ -> polyEq⁰(x²⁰, '|')), _lh_lines_arg1²)
//│ 		in case _lh_matchIdent³⁵ of {
//│ 			LH_P2 _lh_lines_LH_P2_0¹ _lh_lines_LH_P2_1¹ => 
//│ 				let _lh_doInput_LH_C_1² = 	
//│ 					let _lh_matchIdent³⁶ = _lh_lines_LH_P2_1¹
//│ 					in _lh_matchIdent³⁶(99)
//│ 				in let _lh_doInput_LH_C_0² = _lh_lines_LH_P2_0¹
//│ 				in (fun _lh_doInput_arg1¹⁰ -> doLine₀₀₀(_lh_doInput_LH_C_0², (fun state² -> doInput₀₀₀(state², _lh_doInput_LH_C_1²)), _lh_doInput_arg1¹⁰))
//│ 			| _  => error⁰}
//│ 		where
//│ 		def break₀₀₀(_lh_break_arg1², _lh_break_arg2²) = 
//│ 			case _lh_break_arg2² of {
//│ 				LH_N  => [LH_P2 (fun _lh_f_arg2⁹ -> (fun f⁸³ -> _lh_f_arg2⁹)) (fun _lh_dummy⁴ -> (fun _lh_doInput_arg1⁷ -> [LH_N]))]
//│ 				| LH_C _lh_break_LH_C_0¹ _lh_break_LH_C_1¹ => if _lh_break_arg1²(_lh_break_LH_C_0¹) then [LH_P2 (fun _lh_f_arg2¹⁰ -> (fun f⁸⁴ -> _lh_f_arg2¹⁰)) 
//│ 					let _lh_lines_LH_C_1² = _lh_break_LH_C_1¹
//│ 					in (fun _lh_dummy⁵ -> lines₀₀₀(_lh_lines_LH_C_1²))] else 
//│ 					let _lh_matchIdent³⁰ = break₀₀₀(_lh_break_arg1², _lh_break_LH_C_1¹)
//│ 					in case _lh_matchIdent³⁰ of {
//│ 						LH_P2 _lh_break_LH_P2_0¹ _lh_break_LH_P2_1¹ => [LH_P2 
//│ 							let _lh_f_LH_C_1² = _lh_break_LH_P2_0¹
//│ 							in let _lh_f_LH_C_0² = _lh_break_LH_C_0¹
//│ 							in (fun _lh_f_arg2¹¹ -> (fun f⁸⁵ -> f⁸⁵(_lh_f_LH_C_1², ((10 * _lh_f_arg2¹¹) + int_val_of_char₀₀₀(_lh_f_LH_C_0²))))) _lh_break_LH_P2_1¹]
//│ 						| _  => error⁰}
//│ 				| _  => error⁰}
//│ 			where
//│ 			def int_val_of_char₀₀₀(_lh_int_val_of_char_arg1²) = 
//│ 				(int_of_char⁰(_lh_int_val_of_char_arg1²) - 48)
//│ 		def doInput₀₀₀(_lh_doInput_arg1⁸, _lh_doInput_arg2³) = 
//│ 			_lh_doInput_arg2³(_lh_doInput_arg1⁸)
//│ 		def doLine₀₀₀(_lh_doLine_arg1², _lh_doLine_arg2⁹, _lh_doLine_arg3²) = 
//│ 			let n¹⁸ = int_val_of_string₀₀₀(_lh_doLine_arg1²)
//│ 			in let _lh_matchIdent³³ = multiTest₀₀₀(100, _lh_doLine_arg3², n¹⁸)
//│ 			in _lh_matchIdent³³(_lh_doLine_arg2⁹)
//│ 			where
//│ 			def int_val_of_string₀₀₀(_lh_int_val_of_string_arg1²) = 
//│ 				let f⁶⁴ = (fun _lh_f_arg1⁴ -> (fun _lh_f_arg2⁸ -> _lh_f_arg1⁴(_lh_f_arg2⁸, f⁶⁴)))
//│ 				in f⁶⁴(_lh_int_val_of_string_arg1², 0)
//│ 			def multiTest₀₀₀(_lh_multiTest_arg1², _lh_multiTest_arg2², _lh_multiTest_arg3²) = 
//│ 				let mTest⁵ = (fun k⁸ -> (fun rs² -> if (k⁸ == 0) then 
//│ 					let _lh_doLine_LH_P2_1⁷ = rs²
//│ 					in let _lh_doLine_LH_P2_0⁷ = [True]
//│ 					in (fun _lh_doLine_arg2¹⁰ -> if _lh_doLine_LH_P2_0⁷ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2¹⁰(_lh_doLine_LH_P2_1⁷)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2¹⁰(_lh_doLine_LH_P2_1⁷)]) else 
//│ 					let _lh_matchIdent³⁴ = singleTest₀₀₀(_lh_multiTest_arg3², findKQ₀₀₀(_lh_multiTest_arg3²), rs²)
//│ 					in _lh_matchIdent³⁴(k⁸, mTest⁵)))
//│ 				in if ((_lh_multiTest_arg3² <= 1) || even₀₀₀(_lh_multiTest_arg3²)) then 
//│ 					let _lh_doLine_LH_P2_1⁸ = _lh_multiTest_arg2²
//│ 					in let _lh_doLine_LH_P2_0⁸ = (_lh_multiTest_arg3² == 2)
//│ 					in (fun _lh_doLine_arg2¹¹ -> if _lh_doLine_LH_P2_0⁸ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2¹¹(_lh_doLine_LH_P2_1⁸)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2¹¹(_lh_doLine_LH_P2_1⁸)]) else mTest⁵(_lh_multiTest_arg1², _lh_multiTest_arg2²)
//│ 				where
//│ 				def even₀₀₀(_lh_even_arg1⁵) = 
//│ 					((_lh_even_arg1⁵ % 2) == 0)
//│ 				def findKQ₀₀₀(_lh_findKQ_arg1²) = 
//│ 					let f⁹¹ = (fun _lh_f_arg1⁵ -> _lh_f_arg1⁵(f⁹¹))
//│ 					in f⁹¹(
//│ 						let _lh_f_LH_P2_1⁹ = (_lh_findKQ_arg1² - 1)
//│ 						in let _lh_f_LH_P2_0⁹ = 0
//│ 						in (fun f⁹² -> 
//│ 							let _lh_matchIdent³² = divmod₀₀₀(_lh_f_LH_P2_1⁹, 2)
//│ 							in _lh_matchIdent³²(_lh_f_LH_P2_0⁹, _lh_f_LH_P2_1⁹, f⁹²)))
//│ 					where
//│ 					def divmod₀₀₀(_lh_divmod_arg1⁴, _lh_divmod_arg2⁴) = 
//│ 						let _lh_f_LH_P2_1⁶ = (_lh_divmod_arg1⁴ % _lh_divmod_arg2⁴)
//│ 						in let _lh_f_LH_P2_0⁶ = div⁰(_lh_divmod_arg1⁴, _lh_divmod_arg2⁴)
//│ 						in (fun _lh_f_LH_P2_0⁷ -> (fun _lh_f_LH_P2_1⁷ -> (fun f⁸¹ -> if (_lh_f_LH_P2_1⁶ == 0) then f⁸¹(
//│ 							let _lh_f_LH_P2_1⁸ = _lh_f_LH_P2_0⁶
//│ 							in let _lh_f_LH_P2_0⁸ = (_lh_f_LH_P2_0⁷ + 1)
//│ 							in (fun f⁸² -> 
//│ 								let _lh_matchIdent²⁷ = divmod₀₀₀(_lh_f_LH_P2_1⁸, 2)
//│ 								in _lh_matchIdent²⁷(_lh_f_LH_P2_0⁸, _lh_f_LH_P2_1⁸, f⁸²))) else 
//│ 							let _lh_singleTestX_LH_P2_1² = _lh_f_LH_P2_1⁷
//│ 							in let _lh_singleTestX_LH_P2_0² = _lh_f_LH_P2_0⁷
//│ 							in (fun _lh_singleTestX_arg1³ -> (fun _lh_singleTestX_arg3³ -> 
//│ 								let square² = (fun x¹⁸ -> ((x¹⁸ * x¹⁸) % _lh_singleTestX_arg1³))
//│ 								in let witness² = (fun ls⁴⁰ -> 
//│ 									let _lh_matchIdent²⁸ = ls⁴⁰
//│ 									in case _lh_matchIdent²⁸ of {
//│ 										LH_N  => [False]
//│ 										| LH_C _lh_singleTestX_LH_C_0² _lh_singleTestX_LH_C_1² => if (_lh_singleTestX_LH_C_0² == (_lh_singleTestX_arg1³ - 1)) then [True] else if (_lh_singleTestX_LH_C_0² == 1) then [False] else witness²(_lh_singleTestX_LH_C_1²)
//│ 										| _  => error⁰})
//│ 								in let _lh_matchIdent²⁹ = take_lz₁₀₁(_lh_singleTestX_LH_P2_0², iterate₀₀₀(square², powerMod₀₀₀(_lh_singleTestX_arg3³, _lh_singleTestX_LH_P2_1², _lh_singleTestX_arg1³)))
//│ 								in case _lh_matchIdent²⁹ of {
//│ 									LH_C _lh_singleTestX_LH_C_0³ _lh_singleTestX_LH_C_1³ => (((_lh_singleTestX_LH_C_0³ == 1) || (_lh_singleTestX_LH_C_0³ == (_lh_singleTestX_arg1³ - 1))) || witness²(_lh_singleTestX_LH_C_1³))
//│ 									| _  => error⁰})))))
//│ 				def singleTest₀₀₀(_lh_singleTest_arg1⁴, _lh_singleTest_arg2⁴, _lh_singleTest_arg3²) = 
//│ 					let _lh_matchIdent²⁴ = random₀₀₀((_lh_singleTest_arg1⁴ - 2), _lh_singleTest_arg3²)
//│ 					in _lh_matchIdent²⁴(_lh_singleTest_arg1⁴, _lh_singleTest_arg2⁴)
//│ 					where
//│ 					def random₀₀₀(_lh_random_arg1², _lh_random_arg2²) = 
//│ 						let ns⁴ = chop₀₀₀(65536, _lh_random_arg1²)
//│ 						in let _lh_matchIdent²⁵ = splitAt_lz₀₀₀(length₀₀₀(ns⁴), _lh_random_arg2²)
//│ 						in _lh_matchIdent²⁵(ns⁴)
//│ 						where
//│ 						def chop₀₀₀(_lh_chop_arg1²) = 
//│ 							let chop'⁴ = (fun a¹³ -> (fun n¹⁶ -> 
//│ 								let _lh_matchIdent³¹ = divmod₁₀₀(n¹⁶, _lh_chop_arg1²)
//│ 								in _lh_matchIdent³¹(a¹³, chop'⁴, n¹⁶)))
//│ 							in chop'⁴([LH_N])
//│ 							where
//│ 							def divmod₁₀₀(_lh_divmod_arg1⁵, _lh_divmod_arg2⁵) = 
//│ 								let _lh_chop_LH_P2_1² = (_lh_divmod_arg1⁵ % _lh_divmod_arg2⁵)
//│ 								in let _lh_chop_LH_P2_0² = div⁰(_lh_divmod_arg1⁵, _lh_divmod_arg2⁵)
//│ 								in (fun a¹⁴ -> (fun chop'⁵ -> (fun n¹⁹ -> if (n¹⁹ == 0) then a¹⁴ else chop'⁵([LH_C _lh_chop_LH_P2_1² a¹⁴], _lh_chop_LH_P2_0²))))
//│ 						def length₀₀₀(ls²⁷) = 
//│ 							case ls²⁷ of {
//│ 								LH_C h²³ t²⁹ => (1 + length₀₀₀(t²⁹))
//│ 								| LH_N  => 0}
//│ 						def splitAt_lz₀₀₀(_lh_splitAt_lz_arg1², _lh_splitAt_lz_arg2²) = 
//│ 							let _lh_random_LH_P2_1² = drop_lz₀₀₀(_lh_splitAt_lz_arg1², _lh_splitAt_lz_arg2²)
//│ 							in let _lh_random_LH_P2_0² = take_lz₀₀₀(_lh_splitAt_lz_arg1², _lh_splitAt_lz_arg2²)
//│ 							in (fun ns⁵ -> 
//│ 								let _lh_singleTest_LH_P2_1² = _lh_random_LH_P2_1²
//│ 								in let _lh_singleTest_LH_P2_0² = makeNumber₀₀₀(65536, uniform₀₀₀(ns⁵, _lh_random_LH_P2_0²))
//│ 								in (fun _lh_singleTest_arg1⁵ -> (fun _lh_singleTest_arg2⁵ -> 
//│ 									let _lh_multiTest_LH_P2_1² = _lh_singleTest_LH_P2_1²
//│ 									in let _lh_multiTest_LH_P2_0² = singleTestX₀₀₀(_lh_singleTest_arg1⁵, _lh_singleTest_arg2⁵, (2 + _lh_singleTest_LH_P2_0²))
//│ 									in (fun k⁷ -> (fun mTest⁴ -> if _lh_multiTest_LH_P2_0² then mTest⁴((k⁷ - 1), _lh_multiTest_LH_P2_1²) else 
//│ 										let _lh_doLine_LH_P2_1⁶ = _lh_multiTest_LH_P2_1²
//│ 										in let _lh_doLine_LH_P2_0⁶ = [False]
//│ 										in (fun _lh_doLine_arg2⁸ -> if _lh_doLine_LH_P2_0⁶ then [LH_C [LH_C 'P' [LH_C 'r' [LH_C 'o' [LH_C 'b' [LH_C 'a' [LH_C 'b' [LH_C 'l' [LH_C 'y' [LH_C ' ' [LH_C 'p' [LH_C 'r' [LH_C 'i' [LH_C 'm' [LH_C 'e' [LH_N]]]]]]]]]]]]]]] _lh_doLine_arg2⁸(_lh_doLine_LH_P2_1⁶)] else [LH_C [LH_C 'C' [LH_C 'o' [LH_C 'm' [LH_C 'p' [LH_C 'o' [LH_C 's' [LH_C 'i' [LH_C 't' [LH_C 'e' [LH_N]]]]]]]]]] _lh_doLine_arg2⁸(_lh_doLine_LH_P2_1⁶)]))))))
//│ 							where
//│ 							def drop_lz₀₀₀(_lh_drop_lz_arg1², _lh_drop_lz_arg2²) = 
//│ 								let _lh_matchIdent²⁶ = force⁰(_lh_drop_lz_arg2²)
//│ 								in case _lh_matchIdent²⁶ of {
//│ 									LH_N  => lazy⁰([LH_N])
//│ 									| LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => if (_lh_drop_lz_arg1² > 0) then drop_lz₀₀₀((_lh_drop_lz_arg1² - 1), _lh_drop_lz_LH_C_1¹) else _lh_drop_lz_LH_C_1¹
//│ 									| _  => error⁰}
//│ 							def makeNumber₀₀₀(_lh_makeNumber_arg1²) = 
//│ 								foldl₀₀₀((fun a¹² -> (fun x¹⁷ -> ((a¹² * _lh_makeNumber_arg1²) + x¹⁷))), 0)
//│ 								where
//│ 								def foldl₀₀₀(f⁶⁹, i⁴⁵, ls³⁵) = 
//│ 									ls³⁵(f⁶⁹, i⁴⁵)
//│ 							def singleTestX₀₀₀(_lh_singleTestX_arg1², _lh_singleTestX_arg2², _lh_singleTestX_arg3²) = 
//│ 								_lh_singleTestX_arg2²(_lh_singleTestX_arg1², _lh_singleTestX_arg3²)
//│ 								where
//│ 								def iterate₀₀₀(f⁸⁹, x¹⁹) = 
//│ 									lazy⁰(
//│ 										let t⁴⁹ = iterate₀₀₀(f⁸⁹, f⁸⁹(x¹⁹))
//│ 										in let h⁴⁰ = x¹⁹
//│ 										in (fun n¹⁷ -> [LH_C h⁴⁰ take_lz₁₀₀((n¹⁷ - 1), t⁴⁹)]))
//│ 									where
//│ 									def take_lz₁₀₀(n¹⁵, ls³⁶) = 
//│ 										if (n¹⁵ > 0) then force⁰(ls³⁶, n¹⁵) else [LH_N]
//│ 								def powerMod₀₀₀(_lh_powerMod_arg1², _lh_powerMod_arg2², _lh_powerMod_arg3²) = 
//│ 									case _lh_powerMod_arg2² of {
//│ 										0  => 1
//│ 										| _  => 
//│ 											let a'² = (_lh_powerMod_arg1² mod _lh_powerMod_arg3²)
//│ 											in let f⁶⁶ = (fun a¹⁰ -> (fun b⁴ -> (fun c² -> 
//│ 												let g² = (fun a¹¹ -> (fun b⁵ -> if even₁₀₀(b⁵) then g²(((a¹¹ * a¹¹) % _lh_powerMod_arg3²), div⁰(b⁵, 2)) else f⁶⁶(a¹¹, (b⁵ - 1), ((a¹¹ * c²) % _lh_powerMod_arg3²))))
//│ 												in if (b⁴ == 0) then c² else g²(a¹⁰, b⁴))))
//│ 											in f⁶⁶(a'², (_lh_powerMod_arg2² - 1), a'²)}
//│ 									where
//│ 									def even₁₀₀(_lh_even_arg1⁴) = 
//│ 										((_lh_even_arg1⁴ % 2) == 0)
//│ 								def take_lz₁₀₁(n¹³, ls³¹) = 
//│ 									if (n¹³ > 0) then force⁰(ls³¹, n¹³) else [LH_N]
//│ 							def take_lz₀₀₀(n¹⁴, ls³³) = 
//│ 								if (n¹⁴ > 0) then case force⁰(ls³³) of {
//│ 									LH_C h³¹ t³⁷ => [LH_C h³¹ take_lz₀₀₀((n¹⁴ - 1), t³⁷)]
//│ 									| LH_N  => [LH_N]} else [LH_N]
//│ 							def uniform₀₀₀(_lh_uniform_arg1², _lh_uniform_arg2²) = 
//│ 								case _lh_uniform_arg1² of {
//│ 									LH_C _lh_uniform_LH_C_0⁵ _lh_uniform_LH_C_1⁵ => case _lh_uniform_LH_C_1⁵ of {
//│ 										LH_N  => case _lh_uniform_arg2² of {
//│ 											LH_C _lh_uniform_LH_C_0⁶ _lh_uniform_LH_C_1⁶ => case _lh_uniform_LH_C_1⁶ of {
//│ 												LH_N  => 
//│ 													let t³⁸ = (fun f⁷⁰ -> (fun i⁴⁶ -> i⁴⁶))
//│ 													in let h³² = (_lh_uniform_LH_C_0⁶ % _lh_uniform_LH_C_0⁵)
//│ 													in (fun f⁷¹ -> (fun i⁴⁷ -> foldl₀₀₁(f⁷¹, f⁷¹(i⁴⁷, h³²), t³⁸)))
//│ 												| _  => case _lh_uniform_arg2² of {
//│ 													LH_C _lh_uniform_LH_C_0⁷ _lh_uniform_LH_C_1⁷ => 
//│ 														let t³⁹ = (_lh_uniform_LH_C_0⁷ % (_lh_uniform_LH_C_0⁵ + 1))
//│ 														in if (t³⁹ == _lh_uniform_LH_C_0⁵) then 
//│ 															let t⁴⁰ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁷)
//│ 															in let h³³ = t³⁹
//│ 															in (fun f⁷² -> (fun i⁴⁸ -> foldl₀₀₂(f⁷², f⁷²(i⁴⁸, h³³), t⁴⁰))) else 
//│ 															let t⁴¹ = map₀₀₀((fun x¹⁴ -> (x¹⁴ % 65536)), _lh_uniform_LH_C_1⁷)
//│ 															in let h³⁴ = t³⁹
//│ 															in (fun f⁷³ -> (fun i⁴⁹ -> foldl₀₀₃(f⁷³, f⁷³(i⁴⁹, h³⁴), t⁴¹)))
//│ 													| _  => error⁰}}
//│ 											| _  => case _lh_uniform_arg2² of {
//│ 												LH_C _lh_uniform_LH_C_0⁸ _lh_uniform_LH_C_1⁸ => 
//│ 													let t⁴² = (_lh_uniform_LH_C_0⁸ % (_lh_uniform_LH_C_0⁵ + 1))
//│ 													in if (t⁴² == _lh_uniform_LH_C_0⁵) then 
//│ 														let t⁴³ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁸)
//│ 														in let h³⁵ = t⁴²
//│ 														in (fun f⁷⁴ -> (fun i⁵⁰ -> foldl₀₀₄(f⁷⁴, f⁷⁴(i⁵⁰, h³⁵), t⁴³))) else 
//│ 														let t⁴⁴ = map₀₁₀((fun x¹⁵ -> (x¹⁵ % 65536)), _lh_uniform_LH_C_1⁸)
//│ 														in let h³⁶ = t⁴²
//│ 														in (fun f⁷⁵ -> (fun i⁵¹ -> foldl₀₀₅(f⁷⁵, f⁷⁵(i⁵¹, h³⁶), t⁴⁴)))
//│ 												| _  => error⁰}}
//│ 										| _  => case _lh_uniform_arg2² of {
//│ 											LH_C _lh_uniform_LH_C_0⁹ _lh_uniform_LH_C_1⁹ => 
//│ 												let t⁴⁵ = (_lh_uniform_LH_C_0⁹ % (_lh_uniform_LH_C_0⁵ + 1))
//│ 												in if (t⁴⁵ == _lh_uniform_LH_C_0⁵) then 
//│ 													let t⁴⁶ = uniform₀₀₀(_lh_uniform_LH_C_1⁵, _lh_uniform_LH_C_1⁹)
//│ 													in let h³⁷ = t⁴⁵
//│ 													in (fun f⁷⁶ -> (fun i⁵² -> foldl₀₀₆(f⁷⁶, f⁷⁶(i⁵², h³⁷), t⁴⁶))) else 
//│ 													let t⁴⁷ = map₀₂₀((fun x¹⁶ -> (x¹⁶ % 65536)), _lh_uniform_LH_C_1⁹)
//│ 													in let h³⁸ = t⁴⁵
//│ 													in (fun f⁷⁷ -> (fun i⁵³ -> foldl₀₀₇(f⁷⁷, f⁷⁷(i⁵³, h³⁸), t⁴⁷)))
//│ 											| _  => error⁰}}
//│ 									| _  => error⁰}
//│ 								where
//│ 								def foldl₀₀₁(f⁷⁹, i⁵⁵, ls³⁸) = 
//│ 									ls³⁸(f⁷⁹, i⁵⁵)
//│ 								def foldl₀₀₂(f⁶², i⁴⁰, ls²⁸) = 
//│ 									ls²⁸(f⁶², i⁴⁰)
//│ 								def foldl₀₀₃(f⁷⁸, i⁵⁴, ls³⁷) = 
//│ 									ls³⁷(f⁷⁸, i⁵⁴)
//│ 								def foldl₀₀₄(f⁸⁰, i⁵⁶, ls³⁹) = 
//│ 									ls³⁹(f⁸⁰, i⁵⁶)
//│ 								def foldl₀₀₅(f⁶⁵, i⁴², ls³⁰) = 
//│ 									ls³⁰(f⁶⁵, i⁴²)
//│ 								def foldl₀₀₆(f⁶³, i⁴¹, ls²⁹) = 
//│ 									ls²⁹(f⁶³, i⁴¹)
//│ 								def foldl₀₀₇(f⁶⁷, i⁴³, ls³²) = 
//│ 									ls³²(f⁶⁷, i⁴³)
//│ 								def map₀₀₀(f⁹³, ls⁴³) = 
//│ 									case ls⁴³ of {
//│ 										LH_C h²⁸ t³⁴ => 
//│ 											let t⁵⁰ = map₀₀₀(f⁹³, t³⁴)
//│ 											in let h⁴¹ = f⁹³(h²⁸)
//│ 											in (fun f⁹⁴ -> (fun i⁶⁰ -> foldl₀₀₈(f⁹⁴, f⁹⁴(i⁶⁰, h⁴¹), t⁵⁰)))
//│ 										| LH_N  => (fun f⁹⁵ -> (fun i⁶¹ -> i⁶¹))}
//│ 									where
//│ 									def foldl₀₀₈(f⁹⁹, i⁶⁴, ls⁴⁵) = 
//│ 										ls⁴⁵(f⁹⁹, i⁶⁴)
//│ 								def map₀₁₀(f⁸⁶, ls⁴¹) = 
//│ 									case ls⁴¹ of {
//│ 										LH_C h²⁴ t³⁰ => 
//│ 											let t⁴⁸ = map₀₁₀(f⁸⁶, t³⁰)
//│ 											in let h³⁹ = f⁸⁶(h²⁴)
//│ 											in (fun f⁸⁷ -> (fun i⁵⁷ -> foldl₀₀₉(f⁸⁷, f⁸⁷(i⁵⁷, h³⁹), t⁴⁸)))
//│ 										| LH_N  => (fun f⁸⁸ -> (fun i⁵⁸ -> i⁵⁸))}
//│ 									where
//│ 									def foldl₀₀₉(f⁹⁰, i⁵⁹, ls⁴²) = 
//│ 										ls⁴²(f⁹⁰, i⁵⁹)
//│ 								def map₀₂₀(f⁹⁶, ls⁴⁴) = 
//│ 									case ls⁴⁴ of {
//│ 										LH_C h²⁶ t³² => 
//│ 											let t⁵¹ = map₀₂₀(f⁹⁶, t³²)
//│ 											in let h⁴² = f⁹⁶(h²⁶)
//│ 											in (fun f⁹⁷ -> (fun i⁶² -> foldl₀₀₁₀(f⁹⁷, f⁹⁷(i⁶², h⁴²), t⁵¹)))
//│ 										| LH_N  => (fun f⁹⁸ -> (fun i⁶³ -> i⁶³))}
//│ 									where
//│ 									def foldl₀₀₁₀(f⁶⁸, i⁴⁴, ls³⁴) = 
//│ 										ls³⁴(f⁶⁸, i⁴⁴)
//│ 	def process₀₀₀(_lh_process_arg1²) = 
//│ 		doInput₀₀₁(randomInts₀₀₀(111, 47), _lh_process_arg1²)
//│ 		where
//│ 		def doInput₀₀₁(_lh_doInput_arg1⁹, _lh_doInput_arg2⁴) = 
//│ 			_lh_doInput_arg2⁴(_lh_doInput_arg1⁹)
//│ 		def randomInts₀₀₀(_lh_randomInts_arg1², _lh_randomInts_arg2²) = 
//│ 			if ((1 <= _lh_randomInts_arg1²) && (_lh_randomInts_arg1² <= 2147483562)) then if ((1 <= _lh_randomInts_arg2²) && (_lh_randomInts_arg2² <= 2147483398)) then rands₀₀₀(_lh_randomInts_arg1², _lh_randomInts_arg2²) else error⁰([LH_C 'r' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'B' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'c' [LH_C 'o' [LH_C 'n' [LH_C 'd' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C 'd' [LH_C '.' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) else error⁰([LH_C 'r' [LH_C 'a' [LH_C 'n' [LH_C 'd' [LH_C 'o' [LH_C 'm' [LH_C 'I' [LH_C 'n' [LH_C 't' [LH_C 's' [LH_C ':' [LH_C ' ' [LH_C 'B' [LH_C 'a' [LH_C 'd' [LH_C ' ' [LH_C 'f' [LH_C 'i' [LH_C 'r' [LH_C 's' [LH_C 't' [LH_C ' ' [LH_C 's' [LH_C 'e' [LH_C 'e' [LH_C 'd' [LH_C '.' [LH_N]]]]]]]]]]]]]]]]]]]]]]]]]]]])
//│ 			where
//│ 			def rands₀₀₀(_lh_rands_arg1², _lh_rands_arg2²) = 
//│ 				let k⁶ = div⁰(_lh_rands_arg1², 53668)
//│ 				in let s1'² = ((40014 * (_lh_rands_arg1² - (k⁶ * 53668))) - (k⁶ * 12211))
//│ 				in let s1''² = if (s1'² < 0) then (s1'² + 2147483563) else s1'²
//│ 				in let k'² = div⁰(_lh_rands_arg2², 52774)
//│ 				in let s2'² = ((40692 * (_lh_rands_arg2² - (k'² * 52774))) - (k'² * 3791))
//│ 				in let s2''² = if (s2'² < 0) then (s2'² + 2147483399) else s2'²
//│ 				in let z² = (s1''² - s2''²)
//│ 				in if (z² < 1) then lazy⁰([LH_C (z² + 2147483562) rands₀₀₀(s1''², s2''²)]) else lazy⁰([LH_C z² rands₀₀₀(s1''², s2''²)])
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
