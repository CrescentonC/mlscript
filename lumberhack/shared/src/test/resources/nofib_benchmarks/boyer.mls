


:lhInHaskell
:lhGenOCaml
data Term               = Var Id | Fun Id [Term] [Lemma] | ERROR
type Lemma              = (Term, Term)
type Substitution       = [(Id, Term)]
data Id = A | B | C | D | X | Y | Z | U | W |
          ADD1 | AND | APPEND | CONS | CONSP | DIFFERENCE |
          DIVIDES | EQUAL | EVEN | EXP | F | FALSE |
          FOUR | GCD | GREATEREQP | GREATERP | IF | IFF |
          IMPLIES | LENGTH | LESSEQP | LESSP | LISTP | MEMBER |
          NIL | NILP | NLISTP | NOT | ODD | ONE | OR | PLUS |
          QUOTIENT | REMAINDER | REVERSE | SUB1 | TIMES | TRUE |
          TWO | ZERO | ZEROP
          deriving Eq
instance Eq Term where
          Var i1 == Var i2                = i1 == i2
          Fun f1 ts1 _ == Fun f2 ts2 _    = f1 == f2 && (termLsEq ts1 ts2)
          _ == _                          = False
all f [] = True
all f (h:t) = if f h then all f t else False
replicate n x = if n == 0 then [] else (x:(replicate (n - 1) x))
termInList term (h:t) = if termEq term h then True else termInList term t
termInList term [] = False
termLsEq (h1:t1) (h2:t2) = if termEq h1 h2 then termLsEq t1 t2 else False
termLsEq [] [] = True
termLsEq _ _ = False
termEq (Var i1) (Var i2) = polyEq i1 i2
termEq (Fun f1 ts1 _) (Fun f2 ts2 _) = (polyEq f1 f2) && (termLsEq ts1 ts2)
termEq _ _ = False
one_way_unify :: Term -> Term -> (Bool, Substitution)
one_way_unify term1 term2 = one_way_unify1 term1 term2 []
one_way_unify1 :: Term -> Term -> Substitution -> (Bool, Substitution)
one_way_unify1 term1 (Var vid2) subst = case (find vid2 subst) of {
  (found, v2) -> if found then (termEq term1 v2, subst) else (True, (vid2,term1):subst)
}
one_way_unify1 (Fun f1 as1 _) (Fun f2 as2 _) subst = if (polyEq f1 f2) then one_way_unify1_lst as1 as2 subst else (False, [])
one_way_unify1 _ _ _ = (False, [])
one_way_unify1_lst [] [] subst = (True, subst)
one_way_unify1_lst (t1:ts1) (t2:ts2) subst = case (one_way_unify1 t1 t2 subst) of {
  (hd_ok, subst') -> case (one_way_unify1_lst ts1 ts2 subst') of {
    (tl_ok, subst'') -> (hd_ok && tl_ok, subst'')
  }
}
one_way_unify1_lst _ _ _ = (False, [])
find :: Id -> Substitution -> (Bool, Term)
find vid []                = (False, ERROR)
find vid1 ((vid2,val2):bs) = if (polyEq vid1 vid2) then (True, val2) else find vid1 bs
apply_subst :: Substitution -> Term -> Term
apply_subst subst (Var vid) = case (find vid subst) of {
  (found, value) -> if found then value else (Var vid)
}
apply_subst subst (Fun f args ls) = Fun f (map (apply_subst subst) args) ls
apply_subst subst _ = error
rewrite :: Term -> Term
rewrite (Var v) = (Var v)
rewrite (Fun f args lemmas) = rewrite_with_lemmas (Fun f (map rewrite args) lemmas) lemmas
rewrite _ = error
rewrite_with_lemmas :: Term -> [Lemma] -> Term
rewrite_with_lemmas term lss = rewrite_with_lemmas_helper term (force lss)
rewrite_with_lemmas_helper term lss = case lss of {
  [] -> term;
  ((lhs, rhs):ls) -> case (one_way_unify term lhs) of {
    (unified, subst) -> if unified then rewrite (apply_subst subst rhs) else rewrite_with_lemmas_helper term ls
  }
}
tautp :: Term -> Bool
tautp x = tautologyp (rewrite x) [] []
tautologyp :: Term -> [Term] -> [Term] -> Bool
tautologyp x true_lst false_lst =
  if (truep x true_lst) then
    True
  else if (falsep x false_lst) then
    False
  else case x of {
    (Fun IF [cond, t, e] _) ->
      if truep cond true_lst then
        tautologyp t true_lst false_lst
      else if falsep cond false_lst then
        tautologyp e true_lst false_lst
      else
        (tautologyp t (cond:true_lst) false_lst) && (tautologyp e true_lst (cond:false_lst));
    _ -> False
  }
truep :: Term -> [Term] -> Bool
truep (Fun TRUE _ _)   _ = True
truep x l                = termInList x l
falsep :: Term -> [Term] -> Bool
falsep (Fun FALSE _ _) _ = True
falsep x l               = termInList x l
test0 xxxx =
        let subst0 = [
                    (X, f (plus (plus a b) (plus c zero))),
                    (Y, f (times (times a b) (plus c d))),
                    (Z, f (reverse_ (append (append a b) nil))),
                    (U, equal (plus a b) (difference x y)),
                    (W, lessp (remainder a b) (member a (length_ b)))
                  ] in
        let theorem = implies (and_ (implies xxxx y) (and_ (implies y z) (and_ (implies z u) (implies u w)))) (implies x w) in
          tautp (apply_subst subst0 theorem)
    where
      a       =    Var A
      b       =    Var B
      c       =    Var C
      d       =    Var D
      u       =    Var U
      w       =    Var W
      x       =    Var X
      y       =    Var Y
      z       =    Var Z
      boyerFalse = Fun FALSE [] (lazy [])
      nil =        Fun NIL   [] (lazy [])
      boyerTrue =  Fun TRUE  [] (lazy [])
      zero    =    Fun ZERO  [] (lazy [])
      one     =    Fun ONE [] (lazy [(one, add1 zero)])
      two     =    Fun TWO [] (lazy [(two, add1 one)])
      four    =    Fun FOUR [] (lazy [(four, add1 (add1 two))])
      add1 a  =    Fun ADD1 [a] (lazy [])
      if_ a b c = Fun IF [a,b,c] (lazy [(if_ (if_ x y z) u w, if_ x (if_ y u w) (if_ z u w))])
      not_ a  =   Fun NOT [a] (lazy [(not_ x, if_ x boyerFalse boyerTrue)])
      and_ a b =  Fun AND [a,b] (lazy [(and_ x y, if_ x (if_ y boyerTrue boyerFalse) boyerFalse)])
      append a b = Fun APPEND [a,b] (lazy [(append (append x y) z, append x (append y z))])
      cons a b = Fun CONS [a,b] (lazy [])
      consp a =  Fun CONSP [a] (lazy [(consp (cons x y), boyerTrue)])
      difference a b
              = Fun DIFFERENCE [a,b] (lazy [
                (difference x x,                      zero),
                (difference (plus x y) x,             y),
                (difference (plus y x) x,             y),
                (difference (plus x y) (plus x z),    difference y z),
                (difference (plus y (plus x z)) x,    plus y z),
                (difference (add1 (plus y z)) z,      add1 y),
                (difference (add1 (add1 x)) two,      x)])
      divides a b
              = Fun DIVIDES [a,b] (lazy [
                (divides x y,                 zerop (remainder y x))])
      equal a b
              = Fun EQUAL [a,b] (lazy [
                (equal (plus x y) zero,       and_ (zerop x) (zerop y)),
                (equal (plus x y) (plus x z), equal y z),
                (equal zero (difference x y), not_ (lessp y x)),
                (equal x (difference x y),    or_ (equal x zero)
                                                  (zerop y)),
                (equal (times x y) zero,      or_ (zerop x) (zerop y)),
                (equal (append x y) (append x z), equal y z),
                (equal y (times x y),         or_ (equal y zero)
                                                  (equal x one)),
                (equal x (times x y),         or_ (equal x zero)
                                                  (equal y one)),
                (equal (times x y) one,       and_ (equal x one)
                                                  (equal y one)),
                (equal (difference x y)
                      (difference z y),      if_ (lessp x y)
                                                  (not_ (lessp y z))
                                                  (if_ (lessp z y)
                                                      (not_ (lessp y x))
                                                      (equal x z))),
                (equal (lessp x y) z,         if_ (lessp x y)
                                                  (equal boyerTrue z)
                                                  (equal boyerFalse z))])
      even_ a = Fun EVEN [a] (lazy [
                (even_ x,                     if_ (zerop x)
                                                  boyerTrue
                                                  (odd_ (sub1 x)))])
      exp_ a b
              = Fun EXP [a,b] (lazy [
                (exp_ x (plus y z),           times (exp_ x y) (exp_ x z)),
                (exp_ x (times y z),          exp_ (exp_ x y) z)])
      f a     = Fun F [a] (lazy [])
      gcd_ a b
              = Fun GCD [a,b] (lazy [
                (gcd_ x y,                     gcd_ y x),
                (gcd_ (times x z) (times y z), times z (gcd_ x y))])
      greatereqp a b
              = Fun GREATEREQP [a,b] (lazy [
                (greatereqp x y,              not_ (lessp x y))])
      greaterp a b
              = Fun GREATERP [a,b] (lazy [
                (greaterp x y,                lessp y x)])
      implies a b
              = Fun IMPLIES [a,b] (lazy [
                (implies x y,                 if_ x (if_ y boyerTrue boyerFalse) boyerTrue)])
      iff a b = Fun IFF [a,b] (lazy [
                (iff x y,                     and_ (implies x y)
                                                  (implies y x))])
      length_ a
              = Fun LENGTH [a] (lazy [
                (length_ (reverse_ x),        length_ x),
                (length_ (cons x (cons y (cons z (cons u w)))),
                                              plus four (length_
                                              w))])
      lesseqp a b
              = Fun LESSEQP [a,b] (lazy [
                (lesseqp x y,                 not_ (lessp y x))])
      lessp a b
              = Fun LESSP [a,b] (lazy [
                (lessp (remainder x y) y,     not_ (zerop y)),
                (lessp (quotient x y) x,      and_ (not_ (zerop x))
                                                  (lessp one y)),
                (lessp (plus x y) (plus x z), lessp y z),
                (lessp (times x z) (times y z),
                                              and_ (not_ (zerop z))
                                                  (lessp x y)),
                (lessp y (plus x y),          not_ (zerop x))])
      nilp a  = Fun NILP [a] (lazy [
                (nilp x,                      equal x nil)])
      listp a = Fun LISTP [a] (lazy [
                (listp x,                     or_ (nilp x) (consp x))])
      member a b
              = Fun MEMBER [a,b] (lazy [
                (member x (append y z),       or_ (member x y) (member x z)),
                (member x (reverse_ y),       member x y)])
      nlistp a
              = Fun NLISTP [a] (lazy [
                (nlistp x,                    not_ (listp x))])
      odd_ a  = Fun ODD [a] (lazy [
                (odd_ x,                      even_ (sub1 x))])
      or_ a b = Fun OR [a,b] (lazy [
                (or_ x y,                     if_ x boyerTrue (if_ y boyerTrue boyerFalse))])
      plus a b
              = Fun PLUS [a,b] (lazy [
                (plus (plus x y) z,           plus x (plus y z)),
                (plus (remainder x y)
                    (times y (quotient x y)), x),
                (plus x (add1 y),             add1 (plus x y))])
      quotient a b
              = Fun QUOTIENT [a,b] (lazy [
                (quotient (plus x (plus x y))
                          two,                plus x (quotient y two)),
                (quotient (times y x) y,      if_ (zerop y) zero x)])
      remainder a b
              = Fun REMAINDER [a,b] (lazy [
                (remainder x one,             zero),
                (remainder x x,               zero),
                (remainder (times x y) x,     zero),
                (remainder (times x y) y,     zero)])
      reverse_ a
              = Fun REVERSE [a] (lazy [(reverse_ (append x y), append (reverse_ y) (reverse_ x))])
      sub1 a  = Fun SUB1 [a] (lazy [(sub1 (add1 x), x)])
      times a b
              = Fun TIMES [a,b] (lazy [
                (times x (plus y z),          plus (times x y) (times x z)),
                (times (times x y) z,         times x (times y z)),
                (times x (difference y z),    difference (times y x) (times z x)),
                (times x (add1 y),            plus x (times x y))])
      zerop a = Fun ZEROP [a] (lazy [(zerop x, equal x zero)])
testBoyer_nofib n = all test0 (replicate n (Var X))
testBoyer_nofib $ primId 5
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> after expansion >>>>>>>>>>
//│ testBoyer_nofib_lh_₁(primId⁰(5))
//│ def all_lh_₁(_lh_all_arg1⁰, _lh_all_arg2⁰) = case _lh_all_arg2⁰ of {
//│ 	LH_N  => [True]
//│ 	| LH_C _lh_all_LH_C_0⁰ _lh_all_LH_C_1⁰ => if _lh_all_arg1⁰(_lh_all_LH_C_0⁰) then all_lh_₁(_lh_all_arg1⁰, _lh_all_LH_C_1⁰) else [False]}
//│ def apply_subst_lh_₁(_lh_apply_subst_arg1¹, _lh_apply_subst_arg2¹) = case _lh_apply_subst_arg2¹ of {
//│ 	Var _lh_apply_subst_Var_0¹ => 
//│ 		let _lh_matchIdent⁷ = find_lh_₁(_lh_apply_subst_Var_0¹, _lh_apply_subst_arg1¹)
//│ 		in case _lh_matchIdent⁷ of {
//│ 			LH_P2 _lh_apply_subst_LH_P2_0¹ _lh_apply_subst_LH_P2_1¹ => if _lh_apply_subst_LH_P2_0¹ then _lh_apply_subst_LH_P2_1¹ else [Var _lh_apply_subst_Var_0¹]}
//│ 	| Fun _lh_apply_subst_Fun_0¹ _lh_apply_subst_Fun_1¹ _lh_apply_subst_Fun_2¹ => [Fun _lh_apply_subst_Fun_0¹ map_lh_₁(apply_subst_lh_₁(_lh_apply_subst_arg1¹), _lh_apply_subst_Fun_1¹) _lh_apply_subst_Fun_2¹]
//│ 	| _  => error⁰}
//│ def apply_subst_lh_₂(_lh_apply_subst_arg1⁰, _lh_apply_subst_arg2⁰) = case _lh_apply_subst_arg2⁰ of {
//│ 	Var _lh_apply_subst_Var_0⁰ => 
//│ 		let _lh_matchIdent³ = find_lh_₁(_lh_apply_subst_Var_0⁰, _lh_apply_subst_arg1⁰)
//│ 		in case _lh_matchIdent³ of {
//│ 			LH_P2 _lh_apply_subst_LH_P2_0⁰ _lh_apply_subst_LH_P2_1⁰ => if _lh_apply_subst_LH_P2_0⁰ then _lh_apply_subst_LH_P2_1⁰ else [Var _lh_apply_subst_Var_0⁰]}
//│ 	| Fun _lh_apply_subst_Fun_0⁰ _lh_apply_subst_Fun_1⁰ _lh_apply_subst_Fun_2⁰ => [Fun _lh_apply_subst_Fun_0⁰ map_lh_₂(apply_subst_lh_₂(_lh_apply_subst_arg1⁰), _lh_apply_subst_Fun_1⁰) _lh_apply_subst_Fun_2⁰]
//│ 	| _  => error⁰}
//│ def falsep_lh_₁(_lh_falsep_arg1¹, _lh_falsep_arg2¹) = case _lh_falsep_arg1¹ of {
//│ 	Fun _lh_falsep_Fun_0¹ _lh_falsep_Fun_1¹ _lh_falsep_Fun_2¹ => case _lh_falsep_Fun_0¹ of {
//│ 		FALSE  => [True]
//│ 		| _  => termInList_lh_₅(_lh_falsep_arg1¹, _lh_falsep_arg2¹)}
//│ 	| _  => termInList_lh_₆(_lh_falsep_arg1¹, _lh_falsep_arg2¹)}
//│ def falsep_lh_₂(_lh_falsep_arg1⁰, _lh_falsep_arg2⁰) = case _lh_falsep_arg1⁰ of {
//│ 	Fun _lh_falsep_Fun_0⁰ _lh_falsep_Fun_1⁰ _lh_falsep_Fun_2⁰ => case _lh_falsep_Fun_0⁰ of {
//│ 		FALSE  => [True]
//│ 		| _  => termInList_lh_₇(_lh_falsep_arg1⁰, _lh_falsep_arg2⁰)}
//│ 	| _  => termInList_lh_₈(_lh_falsep_arg1⁰, _lh_falsep_arg2⁰)}
//│ def find_lh_₁(_lh_find_arg1⁰, _lh_find_arg2⁰) = case _lh_find_arg2⁰ of {
//│ 	LH_N  => [LH_P2 [False] [ERROR]]
//│ 	| LH_C _lh_find_LH_C_0⁰ _lh_find_LH_C_1⁰ => case _lh_find_LH_C_0⁰ of {
//│ 		LH_P2 _lh_find_LH_P2_0⁰ _lh_find_LH_P2_1⁰ => if polyEq⁰(_lh_find_arg1⁰, _lh_find_LH_P2_0⁰) then [LH_P2 [True] _lh_find_LH_P2_1⁰] else find_lh_₁(_lh_find_arg1⁰, _lh_find_LH_C_1⁰)}}
//│ def map_lh_₁(f¹, ls¹) = case ls¹ of {
//│ 	LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₁(f¹, t¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₂(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def one_way_unify1_lh_₁(_lh_one_way_unify1_arg1⁰, _lh_one_way_unify1_arg2⁰, _lh_one_way_unify1_arg3⁰) = case _lh_one_way_unify1_arg2⁰ of {
//│ 	Var _lh_one_way_unify1_Var_0⁰ => 
//│ 		let _lh_matchIdent² = find_lh_₁(_lh_one_way_unify1_Var_0⁰, _lh_one_way_unify1_arg3⁰)
//│ 		in case _lh_matchIdent² of {
//│ 			LH_P2 _lh_one_way_unify1_LH_P2_0⁰ _lh_one_way_unify1_LH_P2_1⁰ => if _lh_one_way_unify1_LH_P2_0⁰ then [LH_P2 termEq_lh_₈(_lh_one_way_unify1_arg1⁰, _lh_one_way_unify1_LH_P2_1⁰) _lh_one_way_unify1_arg3⁰] else [LH_P2 [True] [LH_C [LH_P2 _lh_one_way_unify1_Var_0⁰ _lh_one_way_unify1_arg1⁰] _lh_one_way_unify1_arg3⁰]]}
//│ 	| _  => case _lh_one_way_unify1_arg1⁰ of {
//│ 		Fun _lh_one_way_unify1_Fun_0⁰ _lh_one_way_unify1_Fun_1⁰ _lh_one_way_unify1_Fun_2⁰ => case _lh_one_way_unify1_arg2⁰ of {
//│ 			Fun _lh_one_way_unify1_Fun_0¹ _lh_one_way_unify1_Fun_1¹ _lh_one_way_unify1_Fun_2¹ => if polyEq⁰(_lh_one_way_unify1_Fun_0⁰, _lh_one_way_unify1_Fun_0¹) then one_way_unify1_lst_lh_₁(_lh_one_way_unify1_Fun_1⁰, _lh_one_way_unify1_Fun_1¹, _lh_one_way_unify1_arg3⁰) else [LH_P2 [False] [LH_N]]
//│ 			| _  => [LH_P2 [False] [LH_N]]}
//│ 		| _  => [LH_P2 [False] [LH_N]]}}
//│ def one_way_unify1_lst_lh_₁(_lh_one_way_unify1_lst_arg1⁰, _lh_one_way_unify1_lst_arg2⁰, _lh_one_way_unify1_lst_arg3⁰) = case _lh_one_way_unify1_lst_arg1⁰ of {
//│ 	LH_N  => case _lh_one_way_unify1_lst_arg2⁰ of {
//│ 		LH_N  => [LH_P2 [True] _lh_one_way_unify1_lst_arg3⁰]
//│ 		| _  => [LH_P2 [False] [LH_N]]}
//│ 	| LH_C _lh_one_way_unify1_lst_LH_C_0⁰ _lh_one_way_unify1_lst_LH_C_1⁰ => case _lh_one_way_unify1_lst_arg2⁰ of {
//│ 		LH_C _lh_one_way_unify1_lst_LH_C_0¹ _lh_one_way_unify1_lst_LH_C_1¹ => 
//│ 			let _lh_matchIdent⁰ = one_way_unify1_lh_₁(_lh_one_way_unify1_lst_LH_C_0⁰, _lh_one_way_unify1_lst_LH_C_0¹, _lh_one_way_unify1_lst_arg3⁰)
//│ 			in case _lh_matchIdent⁰ of {
//│ 				LH_P2 _lh_one_way_unify1_lst_LH_P2_0⁰ _lh_one_way_unify1_lst_LH_P2_1⁰ => 
//│ 					let _lh_matchIdent¹ = one_way_unify1_lst_lh_₁(_lh_one_way_unify1_lst_LH_C_1⁰, _lh_one_way_unify1_lst_LH_C_1¹, _lh_one_way_unify1_lst_LH_P2_1⁰)
//│ 					in case _lh_matchIdent¹ of {
//│ 						LH_P2 _lh_one_way_unify1_lst_LH_P2_0¹ _lh_one_way_unify1_lst_LH_P2_1¹ => [LH_P2 (_lh_one_way_unify1_lst_LH_P2_0⁰ && _lh_one_way_unify1_lst_LH_P2_0¹) _lh_one_way_unify1_lst_LH_P2_1¹]}}
//│ 		| _  => [LH_P2 [False] [LH_N]]}
//│ 	| _  => [LH_P2 [False] [LH_N]]}
//│ def one_way_unify_lh_₁(_lh_one_way_unify_arg1⁰, _lh_one_way_unify_arg2⁰) = one_way_unify1_lh_₁(_lh_one_way_unify_arg1⁰, _lh_one_way_unify_arg2⁰, [LH_N])
//│ def replicate_lh_₁(_lh_replicate_arg1⁰, _lh_replicate_arg2⁰) = if (_lh_replicate_arg1⁰ == 0) then [LH_N] else [LH_C _lh_replicate_arg2⁰ replicate_lh_₁((_lh_replicate_arg1⁰ - 1), _lh_replicate_arg2⁰)]
//│ def rewrite_lh_₁(_lh_rewrite_arg1⁰) = case _lh_rewrite_arg1⁰ of {
//│ 	Var _lh_rewrite_Var_0⁰ => [Var _lh_rewrite_Var_0⁰]
//│ 	| Fun _lh_rewrite_Fun_0⁰ _lh_rewrite_Fun_1⁰ _lh_rewrite_Fun_2⁰ => rewrite_with_lemmas_lh_₁([Fun _lh_rewrite_Fun_0⁰ map_lh_₂(rewrite_lh_₁, _lh_rewrite_Fun_1⁰) _lh_rewrite_Fun_2⁰], _lh_rewrite_Fun_2⁰)
//│ 	| _  => error⁰}
//│ def rewrite_with_lemmas_helper_lh_₁(_lh_rewrite_with_lemmas_helper_arg1⁰, _lh_rewrite_with_lemmas_helper_arg2⁰) = 
//│ 	let _lh_matchIdent⁴ = _lh_rewrite_with_lemmas_helper_arg2⁰
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_N  => _lh_rewrite_with_lemmas_helper_arg1⁰
//│ 		| LH_C _lh_rewrite_with_lemmas_helper_LH_C_0⁰ _lh_rewrite_with_lemmas_helper_LH_C_1⁰ => case _lh_rewrite_with_lemmas_helper_LH_C_0⁰ of {
//│ 			LH_P2 _lh_rewrite_with_lemmas_helper_LH_P2_0⁰ _lh_rewrite_with_lemmas_helper_LH_P2_1⁰ => 
//│ 				let _lh_matchIdent⁵ = one_way_unify_lh_₁(_lh_rewrite_with_lemmas_helper_arg1⁰, _lh_rewrite_with_lemmas_helper_LH_P2_0⁰)
//│ 				in case _lh_matchIdent⁵ of {
//│ 					LH_P2 _lh_rewrite_with_lemmas_helper_LH_P2_0¹ _lh_rewrite_with_lemmas_helper_LH_P2_1¹ => if _lh_rewrite_with_lemmas_helper_LH_P2_0¹ then rewrite_lh_₁(apply_subst_lh_₂(_lh_rewrite_with_lemmas_helper_LH_P2_1¹, _lh_rewrite_with_lemmas_helper_LH_P2_1⁰)) else rewrite_with_lemmas_helper_lh_₁(_lh_rewrite_with_lemmas_helper_arg1⁰, _lh_rewrite_with_lemmas_helper_LH_C_1⁰)}}}
//│ def rewrite_with_lemmas_lh_₁(_lh_rewrite_with_lemmas_arg1⁰, _lh_rewrite_with_lemmas_arg2⁰) = rewrite_with_lemmas_helper_lh_₁(_lh_rewrite_with_lemmas_arg1⁰, force⁰(_lh_rewrite_with_lemmas_arg2⁰))
//│ def tautologyp_lh_₁(_lh_tautologyp_arg1⁰, _lh_tautologyp_arg2⁰, _lh_tautologyp_arg3⁰) = if truep_lh_₁(_lh_tautologyp_arg1⁰, _lh_tautologyp_arg2⁰) then [True] else if falsep_lh_₂(_lh_tautologyp_arg1⁰, _lh_tautologyp_arg3⁰) then [False] else 
//│ 	let _lh_matchIdent⁶ = _lh_tautologyp_arg1⁰
//│ 	in case _lh_matchIdent⁶ of {
//│ 		Fun _lh_tautologyp_Fun_0⁰ _lh_tautologyp_Fun_1⁰ _lh_tautologyp_Fun_2⁰ => case _lh_tautologyp_Fun_0⁰ of {
//│ 			IF  => case _lh_tautologyp_Fun_1⁰ of {
//│ 				LH_C _lh_tautologyp_LH_C_0⁰ _lh_tautologyp_LH_C_1⁰ => case _lh_tautologyp_LH_C_1⁰ of {
//│ 					LH_C _lh_tautologyp_LH_C_0¹ _lh_tautologyp_LH_C_1¹ => case _lh_tautologyp_LH_C_1¹ of {
//│ 						LH_C _lh_tautologyp_LH_C_0² _lh_tautologyp_LH_C_1² => case _lh_tautologyp_LH_C_1² of {
//│ 							LH_N  => if truep_lh_₂(_lh_tautologyp_LH_C_0⁰, _lh_tautologyp_arg2⁰) then tautologyp_lh_₁(_lh_tautologyp_LH_C_0¹, _lh_tautologyp_arg2⁰, _lh_tautologyp_arg3⁰) else if falsep_lh_₁(_lh_tautologyp_LH_C_0⁰, _lh_tautologyp_arg3⁰) then tautologyp_lh_₁(_lh_tautologyp_LH_C_0², _lh_tautologyp_arg2⁰, _lh_tautologyp_arg3⁰) else (tautologyp_lh_₁(_lh_tautologyp_LH_C_0¹, [LH_C _lh_tautologyp_LH_C_0⁰ _lh_tautologyp_arg2⁰], _lh_tautologyp_arg3⁰) && tautologyp_lh_₁(_lh_tautologyp_LH_C_0², _lh_tautologyp_arg2⁰, [LH_C _lh_tautologyp_LH_C_0⁰ _lh_tautologyp_arg3⁰]))
//│ 							| _  => [False]}
//│ 						| _  => [False]}
//│ 					| _  => [False]}
//│ 				| _  => [False]}
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ def tautp_lh_₁(_lh_tautp_arg1⁰) = tautologyp_lh_₁(rewrite_lh_₁(_lh_tautp_arg1⁰), [LH_N], [LH_N])
//│ def termEq_lh_₁(_lh_termEq_arg1⁷, _lh_termEq_arg2⁷) = case _lh_termEq_arg1⁷ of {
//│ 	Var _lh_termEq_Var_0¹⁴ => case _lh_termEq_arg2⁷ of {
//│ 		Var _lh_termEq_Var_0¹⁵ => polyEq⁰(_lh_termEq_Var_0¹⁴, _lh_termEq_Var_0¹⁵)
//│ 		| _  => [False]}
//│ 	| Fun _lh_termEq_Fun_0¹⁴ _lh_termEq_Fun_1¹⁴ _lh_termEq_Fun_2¹⁴ => case _lh_termEq_arg2⁷ of {
//│ 		Fun _lh_termEq_Fun_0¹⁵ _lh_termEq_Fun_1¹⁵ _lh_termEq_Fun_2¹⁵ => (polyEq⁰(_lh_termEq_Fun_0¹⁴, _lh_termEq_Fun_0¹⁵) && termLsEq_lh_₁(_lh_termEq_Fun_1¹⁴, _lh_termEq_Fun_1¹⁵))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termEq_lh_₂(_lh_termEq_arg1⁶, _lh_termEq_arg2⁶) = case _lh_termEq_arg1⁶ of {
//│ 	Var _lh_termEq_Var_0¹² => case _lh_termEq_arg2⁶ of {
//│ 		Var _lh_termEq_Var_0¹³ => polyEq⁰(_lh_termEq_Var_0¹², _lh_termEq_Var_0¹³)
//│ 		| _  => [False]}
//│ 	| Fun _lh_termEq_Fun_0¹² _lh_termEq_Fun_1¹² _lh_termEq_Fun_2¹² => case _lh_termEq_arg2⁶ of {
//│ 		Fun _lh_termEq_Fun_0¹³ _lh_termEq_Fun_1¹³ _lh_termEq_Fun_2¹³ => (polyEq⁰(_lh_termEq_Fun_0¹², _lh_termEq_Fun_0¹³) && termLsEq_lh_₂(_lh_termEq_Fun_1¹², _lh_termEq_Fun_1¹³))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termEq_lh_₃(_lh_termEq_arg1⁵, _lh_termEq_arg2⁵) = case _lh_termEq_arg1⁵ of {
//│ 	Var _lh_termEq_Var_0¹⁰ => case _lh_termEq_arg2⁵ of {
//│ 		Var _lh_termEq_Var_0¹¹ => polyEq⁰(_lh_termEq_Var_0¹⁰, _lh_termEq_Var_0¹¹)
//│ 		| _  => [False]}
//│ 	| Fun _lh_termEq_Fun_0¹⁰ _lh_termEq_Fun_1¹⁰ _lh_termEq_Fun_2¹⁰ => case _lh_termEq_arg2⁵ of {
//│ 		Fun _lh_termEq_Fun_0¹¹ _lh_termEq_Fun_1¹¹ _lh_termEq_Fun_2¹¹ => (polyEq⁰(_lh_termEq_Fun_0¹⁰, _lh_termEq_Fun_0¹¹) && termLsEq_lh_₃(_lh_termEq_Fun_1¹⁰, _lh_termEq_Fun_1¹¹))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termEq_lh_₄(_lh_termEq_arg1⁴, _lh_termEq_arg2⁴) = case _lh_termEq_arg1⁴ of {
//│ 	Var _lh_termEq_Var_0⁸ => case _lh_termEq_arg2⁴ of {
//│ 		Var _lh_termEq_Var_0⁹ => polyEq⁰(_lh_termEq_Var_0⁸, _lh_termEq_Var_0⁹)
//│ 		| _  => [False]}
//│ 	| Fun _lh_termEq_Fun_0⁸ _lh_termEq_Fun_1⁸ _lh_termEq_Fun_2⁸ => case _lh_termEq_arg2⁴ of {
//│ 		Fun _lh_termEq_Fun_0⁹ _lh_termEq_Fun_1⁹ _lh_termEq_Fun_2⁹ => (polyEq⁰(_lh_termEq_Fun_0⁸, _lh_termEq_Fun_0⁹) && termLsEq_lh_₄(_lh_termEq_Fun_1⁸, _lh_termEq_Fun_1⁹))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termEq_lh_₅(_lh_termEq_arg1³, _lh_termEq_arg2³) = case _lh_termEq_arg1³ of {
//│ 	Var _lh_termEq_Var_0⁶ => case _lh_termEq_arg2³ of {
//│ 		Var _lh_termEq_Var_0⁷ => polyEq⁰(_lh_termEq_Var_0⁶, _lh_termEq_Var_0⁷)
//│ 		| _  => [False]}
//│ 	| Fun _lh_termEq_Fun_0⁶ _lh_termEq_Fun_1⁶ _lh_termEq_Fun_2⁶ => case _lh_termEq_arg2³ of {
//│ 		Fun _lh_termEq_Fun_0⁷ _lh_termEq_Fun_1⁷ _lh_termEq_Fun_2⁷ => (polyEq⁰(_lh_termEq_Fun_0⁶, _lh_termEq_Fun_0⁷) && termLsEq_lh_₅(_lh_termEq_Fun_1⁶, _lh_termEq_Fun_1⁷))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termEq_lh_₆(_lh_termEq_arg1², _lh_termEq_arg2²) = case _lh_termEq_arg1² of {
//│ 	Var _lh_termEq_Var_0⁴ => case _lh_termEq_arg2² of {
//│ 		Var _lh_termEq_Var_0⁵ => polyEq⁰(_lh_termEq_Var_0⁴, _lh_termEq_Var_0⁵)
//│ 		| _  => [False]}
//│ 	| Fun _lh_termEq_Fun_0⁴ _lh_termEq_Fun_1⁴ _lh_termEq_Fun_2⁴ => case _lh_termEq_arg2² of {
//│ 		Fun _lh_termEq_Fun_0⁵ _lh_termEq_Fun_1⁵ _lh_termEq_Fun_2⁵ => (polyEq⁰(_lh_termEq_Fun_0⁴, _lh_termEq_Fun_0⁵) && termLsEq_lh_₆(_lh_termEq_Fun_1⁴, _lh_termEq_Fun_1⁵))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termEq_lh_₇(_lh_termEq_arg1¹, _lh_termEq_arg2¹) = case _lh_termEq_arg1¹ of {
//│ 	Var _lh_termEq_Var_0² => case _lh_termEq_arg2¹ of {
//│ 		Var _lh_termEq_Var_0³ => polyEq⁰(_lh_termEq_Var_0², _lh_termEq_Var_0³)
//│ 		| _  => [False]}
//│ 	| Fun _lh_termEq_Fun_0² _lh_termEq_Fun_1² _lh_termEq_Fun_2² => case _lh_termEq_arg2¹ of {
//│ 		Fun _lh_termEq_Fun_0³ _lh_termEq_Fun_1³ _lh_termEq_Fun_2³ => (polyEq⁰(_lh_termEq_Fun_0², _lh_termEq_Fun_0³) && termLsEq_lh_₇(_lh_termEq_Fun_1², _lh_termEq_Fun_1³))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termEq_lh_₈(_lh_termEq_arg1⁰, _lh_termEq_arg2⁰) = case _lh_termEq_arg1⁰ of {
//│ 	Var _lh_termEq_Var_0⁰ => case _lh_termEq_arg2⁰ of {
//│ 		Var _lh_termEq_Var_0¹ => polyEq⁰(_lh_termEq_Var_0⁰, _lh_termEq_Var_0¹)
//│ 		| _  => [False]}
//│ 	| Fun _lh_termEq_Fun_0⁰ _lh_termEq_Fun_1⁰ _lh_termEq_Fun_2⁰ => case _lh_termEq_arg2⁰ of {
//│ 		Fun _lh_termEq_Fun_0¹ _lh_termEq_Fun_1¹ _lh_termEq_Fun_2¹ => (polyEq⁰(_lh_termEq_Fun_0⁰, _lh_termEq_Fun_0¹) && termLsEq_lh_₇(_lh_termEq_Fun_1⁰, _lh_termEq_Fun_1¹))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termInList_lh_₁(_lh_termInList_arg1⁷, _lh_termInList_arg2⁷) = case _lh_termInList_arg2⁷ of {
//│ 	LH_C _lh_termInList_LH_C_0⁷ _lh_termInList_LH_C_1⁷ => if termEq_lh_₁(_lh_termInList_arg1⁷, _lh_termInList_LH_C_0⁷) then [True] else termInList_lh_₁(_lh_termInList_arg1⁷, _lh_termInList_LH_C_1⁷)
//│ 	| LH_N  => [False]}
//│ def termInList_lh_₂(_lh_termInList_arg1⁶, _lh_termInList_arg2⁶) = case _lh_termInList_arg2⁶ of {
//│ 	LH_C _lh_termInList_LH_C_0⁶ _lh_termInList_LH_C_1⁶ => if termEq_lh_₂(_lh_termInList_arg1⁶, _lh_termInList_LH_C_0⁶) then [True] else termInList_lh_₂(_lh_termInList_arg1⁶, _lh_termInList_LH_C_1⁶)
//│ 	| LH_N  => [False]}
//│ def termInList_lh_₃(_lh_termInList_arg1⁵, _lh_termInList_arg2⁵) = case _lh_termInList_arg2⁵ of {
//│ 	LH_C _lh_termInList_LH_C_0⁵ _lh_termInList_LH_C_1⁵ => if termEq_lh_₃(_lh_termInList_arg1⁵, _lh_termInList_LH_C_0⁵) then [True] else termInList_lh_₃(_lh_termInList_arg1⁵, _lh_termInList_LH_C_1⁵)
//│ 	| LH_N  => [False]}
//│ def termInList_lh_₄(_lh_termInList_arg1⁴, _lh_termInList_arg2⁴) = case _lh_termInList_arg2⁴ of {
//│ 	LH_C _lh_termInList_LH_C_0⁴ _lh_termInList_LH_C_1⁴ => if termEq_lh_₄(_lh_termInList_arg1⁴, _lh_termInList_LH_C_0⁴) then [True] else termInList_lh_₄(_lh_termInList_arg1⁴, _lh_termInList_LH_C_1⁴)
//│ 	| LH_N  => [False]}
//│ def termInList_lh_₅(_lh_termInList_arg1³, _lh_termInList_arg2³) = case _lh_termInList_arg2³ of {
//│ 	LH_C _lh_termInList_LH_C_0³ _lh_termInList_LH_C_1³ => if termEq_lh_₅(_lh_termInList_arg1³, _lh_termInList_LH_C_0³) then [True] else termInList_lh_₅(_lh_termInList_arg1³, _lh_termInList_LH_C_1³)
//│ 	| LH_N  => [False]}
//│ def termInList_lh_₆(_lh_termInList_arg1², _lh_termInList_arg2²) = case _lh_termInList_arg2² of {
//│ 	LH_C _lh_termInList_LH_C_0² _lh_termInList_LH_C_1² => if termEq_lh_₆(_lh_termInList_arg1², _lh_termInList_LH_C_0²) then [True] else termInList_lh_₆(_lh_termInList_arg1², _lh_termInList_LH_C_1²)
//│ 	| LH_N  => [False]}
//│ def termInList_lh_₇(_lh_termInList_arg1¹, _lh_termInList_arg2¹) = case _lh_termInList_arg2¹ of {
//│ 	LH_C _lh_termInList_LH_C_0¹ _lh_termInList_LH_C_1¹ => if termEq_lh_₇(_lh_termInList_arg1¹, _lh_termInList_LH_C_0¹) then [True] else termInList_lh_₇(_lh_termInList_arg1¹, _lh_termInList_LH_C_1¹)
//│ 	| LH_N  => [False]}
//│ def termInList_lh_₈(_lh_termInList_arg1⁰, _lh_termInList_arg2⁰) = case _lh_termInList_arg2⁰ of {
//│ 	LH_C _lh_termInList_LH_C_0⁰ _lh_termInList_LH_C_1⁰ => if termEq_lh_₈(_lh_termInList_arg1⁰, _lh_termInList_LH_C_0⁰) then [True] else termInList_lh_₈(_lh_termInList_arg1⁰, _lh_termInList_LH_C_1⁰)
//│ 	| LH_N  => [False]}
//│ def termLsEq_lh_₁(_lh_termLsEq_arg1⁶, _lh_termLsEq_arg2⁶) = case _lh_termLsEq_arg1⁶ of {
//│ 	LH_C _lh_termLsEq_LH_C_0¹² _lh_termLsEq_LH_C_1¹² => case _lh_termLsEq_arg2⁶ of {
//│ 		LH_C _lh_termLsEq_LH_C_0¹³ _lh_termLsEq_LH_C_1¹³ => if termEq_lh_₁(_lh_termLsEq_LH_C_0¹², _lh_termLsEq_LH_C_0¹³) then termLsEq_lh_₁(_lh_termLsEq_LH_C_1¹², _lh_termLsEq_LH_C_1¹³) else [False]
//│ 		| _  => [False]}
//│ 	| LH_N  => case _lh_termLsEq_arg2⁶ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termLsEq_lh_₂(_lh_termLsEq_arg1⁵, _lh_termLsEq_arg2⁵) = case _lh_termLsEq_arg1⁵ of {
//│ 	LH_C _lh_termLsEq_LH_C_0¹⁰ _lh_termLsEq_LH_C_1¹⁰ => case _lh_termLsEq_arg2⁵ of {
//│ 		LH_C _lh_termLsEq_LH_C_0¹¹ _lh_termLsEq_LH_C_1¹¹ => if termEq_lh_₂(_lh_termLsEq_LH_C_0¹⁰, _lh_termLsEq_LH_C_0¹¹) then termLsEq_lh_₂(_lh_termLsEq_LH_C_1¹⁰, _lh_termLsEq_LH_C_1¹¹) else [False]
//│ 		| _  => [False]}
//│ 	| LH_N  => case _lh_termLsEq_arg2⁵ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termLsEq_lh_₃(_lh_termLsEq_arg1⁴, _lh_termLsEq_arg2⁴) = case _lh_termLsEq_arg1⁴ of {
//│ 	LH_C _lh_termLsEq_LH_C_0⁸ _lh_termLsEq_LH_C_1⁸ => case _lh_termLsEq_arg2⁴ of {
//│ 		LH_C _lh_termLsEq_LH_C_0⁹ _lh_termLsEq_LH_C_1⁹ => if termEq_lh_₃(_lh_termLsEq_LH_C_0⁸, _lh_termLsEq_LH_C_0⁹) then termLsEq_lh_₃(_lh_termLsEq_LH_C_1⁸, _lh_termLsEq_LH_C_1⁹) else [False]
//│ 		| _  => [False]}
//│ 	| LH_N  => case _lh_termLsEq_arg2⁴ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termLsEq_lh_₄(_lh_termLsEq_arg1³, _lh_termLsEq_arg2³) = case _lh_termLsEq_arg1³ of {
//│ 	LH_C _lh_termLsEq_LH_C_0⁶ _lh_termLsEq_LH_C_1⁶ => case _lh_termLsEq_arg2³ of {
//│ 		LH_C _lh_termLsEq_LH_C_0⁷ _lh_termLsEq_LH_C_1⁷ => if termEq_lh_₄(_lh_termLsEq_LH_C_0⁶, _lh_termLsEq_LH_C_0⁷) then termLsEq_lh_₄(_lh_termLsEq_LH_C_1⁶, _lh_termLsEq_LH_C_1⁷) else [False]
//│ 		| _  => [False]}
//│ 	| LH_N  => case _lh_termLsEq_arg2³ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termLsEq_lh_₅(_lh_termLsEq_arg1², _lh_termLsEq_arg2²) = case _lh_termLsEq_arg1² of {
//│ 	LH_C _lh_termLsEq_LH_C_0⁴ _lh_termLsEq_LH_C_1⁴ => case _lh_termLsEq_arg2² of {
//│ 		LH_C _lh_termLsEq_LH_C_0⁵ _lh_termLsEq_LH_C_1⁵ => if termEq_lh_₅(_lh_termLsEq_LH_C_0⁴, _lh_termLsEq_LH_C_0⁵) then termLsEq_lh_₅(_lh_termLsEq_LH_C_1⁴, _lh_termLsEq_LH_C_1⁵) else [False]
//│ 		| _  => [False]}
//│ 	| LH_N  => case _lh_termLsEq_arg2² of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termLsEq_lh_₆(_lh_termLsEq_arg1¹, _lh_termLsEq_arg2¹) = case _lh_termLsEq_arg1¹ of {
//│ 	LH_C _lh_termLsEq_LH_C_0² _lh_termLsEq_LH_C_1² => case _lh_termLsEq_arg2¹ of {
//│ 		LH_C _lh_termLsEq_LH_C_0³ _lh_termLsEq_LH_C_1³ => if termEq_lh_₆(_lh_termLsEq_LH_C_0², _lh_termLsEq_LH_C_0³) then termLsEq_lh_₆(_lh_termLsEq_LH_C_1², _lh_termLsEq_LH_C_1³) else [False]
//│ 		| _  => [False]}
//│ 	| LH_N  => case _lh_termLsEq_arg2¹ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termLsEq_lh_₇(_lh_termLsEq_arg1⁰, _lh_termLsEq_arg2⁰) = case _lh_termLsEq_arg1⁰ of {
//│ 	LH_C _lh_termLsEq_LH_C_0⁰ _lh_termLsEq_LH_C_1⁰ => case _lh_termLsEq_arg2⁰ of {
//│ 		LH_C _lh_termLsEq_LH_C_0¹ _lh_termLsEq_LH_C_1¹ => if termEq_lh_₇(_lh_termLsEq_LH_C_0⁰, _lh_termLsEq_LH_C_0¹) then termLsEq_lh_₇(_lh_termLsEq_LH_C_1⁰, _lh_termLsEq_LH_C_1¹) else [False]
//│ 		| _  => [False]}
//│ 	| LH_N  => case _lh_termLsEq_arg2⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def test0_lh_₁(_lh_test0_arg1⁰) = 
//│ 	let boyerTrue⁰ = [Fun [TRUE] [LH_N] lazy⁰([LH_N])]
//│ 	and append⁰ = (fun _lh_append_arg1⁰ -> (fun _lh_append_arg2⁰ -> [Fun [APPEND] [LH_C _lh_append_arg1⁰ [LH_C _lh_append_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 append⁰(append⁰(x⁰, y⁰), z⁰) append⁰(x⁰, append⁰(y⁰, z⁰))] [LH_N]])]))
//│ 	and difference⁰ = (fun _lh_difference_arg1⁰ -> (fun _lh_difference_arg2⁰ -> [Fun [DIFFERENCE] [LH_C _lh_difference_arg1⁰ [LH_C _lh_difference_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 difference⁰(x⁰, x⁰) zero⁰] [LH_C [LH_P2 difference⁰(plus⁰(x⁰, y⁰), x⁰) y⁰] [LH_C [LH_P2 difference⁰(plus⁰(y⁰, x⁰), x⁰) y⁰] [LH_C [LH_P2 difference⁰(plus⁰(x⁰, y⁰), plus⁰(x⁰, z⁰)) difference⁰(y⁰, z⁰)] [LH_C [LH_P2 difference⁰(plus⁰(y⁰, plus⁰(x⁰, z⁰)), x⁰) plus⁰(y⁰, z⁰)] [LH_C [LH_P2 difference⁰(add1⁰(plus⁰(y⁰, z⁰)), z⁰) add1⁰(y⁰)] [LH_C [LH_P2 difference⁰(add1⁰(add1⁰(x⁰)), two⁰) x⁰] [LH_N]]]]]]]])]))
//│ 	and listp⁰ = (fun _lh_listp_arg1⁰ -> [Fun [LISTP] [LH_C _lh_listp_arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 listp⁰(x⁰) or_⁰(nilp⁰(x⁰), consp⁰(x⁰))] [LH_N]])])
//│ 	and iff⁰ = (fun _lh_iff_arg1⁰ -> (fun _lh_iff_arg2⁰ -> [Fun [IFF] [LH_C _lh_iff_arg1⁰ [LH_C _lh_iff_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 iff⁰(x⁰, y⁰) and_⁰(implies⁰(x⁰, y⁰), implies⁰(y⁰, x⁰))] [LH_N]])]))
//│ 	and z⁰ = [Var [Z]]
//│ 	and remainder⁰ = (fun _lh_remainder_arg1⁰ -> (fun _lh_remainder_arg2⁰ -> [Fun [REMAINDER] [LH_C _lh_remainder_arg1⁰ [LH_C _lh_remainder_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 remainder⁰(x⁰, one⁰) zero⁰] [LH_C [LH_P2 remainder⁰(x⁰, x⁰) zero⁰] [LH_C [LH_P2 remainder⁰(times⁰(x⁰, y⁰), x⁰) zero⁰] [LH_C [LH_P2 remainder⁰(times⁰(x⁰, y⁰), y⁰) zero⁰] [LH_N]]]]])]))
//│ 	and nlistp⁰ = (fun _lh_nlistp_arg1⁰ -> [Fun [NLISTP] [LH_C _lh_nlistp_arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 nlistp⁰(x⁰) not_⁰(listp⁰(x⁰))] [LH_N]])])
//│ 	and and_⁰ = (fun _lh_and__arg1⁰ -> (fun _lh_and__arg2⁰ -> [Fun [AND] [LH_C _lh_and__arg1⁰ [LH_C _lh_and__arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 and_⁰(x⁰, y⁰) if_⁰(x⁰, if_⁰(y⁰, boyerTrue⁰, boyerFalse⁰), boyerFalse⁰)] [LH_N]])]))
//│ 	and implies⁰ = (fun _lh_implies_arg1⁰ -> (fun _lh_implies_arg2⁰ -> [Fun [IMPLIES] [LH_C _lh_implies_arg1⁰ [LH_C _lh_implies_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 implies⁰(x⁰, y⁰) if_⁰(x⁰, if_⁰(y⁰, boyerTrue⁰, boyerFalse⁰), boyerTrue⁰)] [LH_N]])]))
//│ 	and equal⁰ = (fun _lh_equal_arg1⁰ -> (fun _lh_equal_arg2⁰ -> [Fun [EQUAL] [LH_C _lh_equal_arg1⁰ [LH_C _lh_equal_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 equal⁰(plus⁰(x⁰, y⁰), zero⁰) and_⁰(zerop⁰(x⁰), zerop⁰(y⁰))] [LH_C [LH_P2 equal⁰(plus⁰(x⁰, y⁰), plus⁰(x⁰, z⁰)) equal⁰(y⁰, z⁰)] [LH_C [LH_P2 equal⁰(zero⁰, difference⁰(x⁰, y⁰)) not_⁰(lessp⁰(y⁰, x⁰))] [LH_C [LH_P2 equal⁰(x⁰, difference⁰(x⁰, y⁰)) or_⁰(equal⁰(x⁰, zero⁰), zerop⁰(y⁰))] [LH_C [LH_P2 equal⁰(times⁰(x⁰, y⁰), zero⁰) or_⁰(zerop⁰(x⁰), zerop⁰(y⁰))] [LH_C [LH_P2 equal⁰(append⁰(x⁰, y⁰), append⁰(x⁰, z⁰)) equal⁰(y⁰, z⁰)] [LH_C [LH_P2 equal⁰(y⁰, times⁰(x⁰, y⁰)) or_⁰(equal⁰(y⁰, zero⁰), equal⁰(x⁰, one⁰))] [LH_C [LH_P2 equal⁰(x⁰, times⁰(x⁰, y⁰)) or_⁰(equal⁰(x⁰, zero⁰), equal⁰(y⁰, one⁰))] [LH_C [LH_P2 equal⁰(times⁰(x⁰, y⁰), one⁰) and_⁰(equal⁰(x⁰, one⁰), equal⁰(y⁰, one⁰))] [LH_C [LH_P2 equal⁰(difference⁰(x⁰, y⁰), difference⁰(z⁰, y⁰)) if_⁰(lessp⁰(x⁰, y⁰), not_⁰(lessp⁰(y⁰, z⁰)), if_⁰(lessp⁰(z⁰, y⁰), not_⁰(lessp⁰(y⁰, x⁰)), equal⁰(x⁰, z⁰)))] [LH_C [LH_P2 equal⁰(lessp⁰(x⁰, y⁰), z⁰) if_⁰(lessp⁰(x⁰, y⁰), equal⁰(boyerTrue⁰, z⁰), equal⁰(boyerFalse⁰, z⁰))] [LH_N]]]]]]]]]]]])]))
//│ 	and divides⁰ = (fun _lh_divides_arg1⁰ -> (fun _lh_divides_arg2⁰ -> [Fun [DIVIDES] [LH_C _lh_divides_arg1⁰ [LH_C _lh_divides_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 divides⁰(x⁰, y⁰) zerop⁰(remainder⁰(y⁰, x⁰))] [LH_N]])]))
//│ 	and b⁰ = [Var [B]]
//│ 	and lesseqp⁰ = (fun _lh_lesseqp_arg1⁰ -> (fun _lh_lesseqp_arg2⁰ -> [Fun [LESSEQP] [LH_C _lh_lesseqp_arg1⁰ [LH_C _lh_lesseqp_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 lesseqp⁰(x⁰, y⁰) not_⁰(lessp⁰(y⁰, x⁰))] [LH_N]])]))
//│ 	and exp_⁰ = (fun _lh_exp__arg1⁰ -> (fun _lh_exp__arg2⁰ -> [Fun [EXP] [LH_C _lh_exp__arg1⁰ [LH_C _lh_exp__arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 exp_⁰(x⁰, plus⁰(y⁰, z⁰)) times⁰(exp_⁰(x⁰, y⁰), exp_⁰(x⁰, z⁰))] [LH_C [LH_P2 exp_⁰(x⁰, times⁰(y⁰, z⁰)) exp_⁰(exp_⁰(x⁰, y⁰), z⁰)] [LH_N]]])]))
//│ 	and lessp⁰ = (fun _lh_lessp_arg1⁰ -> (fun _lh_lessp_arg2⁰ -> [Fun [LESSP] [LH_C _lh_lessp_arg1⁰ [LH_C _lh_lessp_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 lessp⁰(remainder⁰(x⁰, y⁰), y⁰) not_⁰(zerop⁰(y⁰))] [LH_C [LH_P2 lessp⁰(quotient⁰(x⁰, y⁰), x⁰) and_⁰(not_⁰(zerop⁰(x⁰)), lessp⁰(one⁰, y⁰))] [LH_C [LH_P2 lessp⁰(plus⁰(x⁰, y⁰), plus⁰(x⁰, z⁰)) lessp⁰(y⁰, z⁰)] [LH_C [LH_P2 lessp⁰(times⁰(x⁰, z⁰), times⁰(y⁰, z⁰)) and_⁰(not_⁰(zerop⁰(z⁰)), lessp⁰(x⁰, y⁰))] [LH_C [LH_P2 lessp⁰(y⁰, plus⁰(x⁰, y⁰)) not_⁰(zerop⁰(x⁰))] [LH_N]]]]]])]))
//│ 	and reverse_⁰ = (fun _lh_reverse__arg1⁰ -> [Fun [REVERSE] [LH_C _lh_reverse__arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 reverse_⁰(append⁰(x⁰, y⁰)) append⁰(reverse_⁰(y⁰), reverse_⁰(x⁰))] [LH_N]])])
//│ 	and zerop⁰ = (fun _lh_zerop_arg1⁰ -> [Fun [ZEROP] [LH_C _lh_zerop_arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 zerop⁰(x⁰) equal⁰(x⁰, zero⁰)] [LH_N]])])
//│ 	and zero⁰ = [Fun [ZERO] [LH_N] lazy⁰([LH_N])]
//│ 	and u⁰ = [Var [U]]
//│ 	and times⁰ = (fun _lh_times_arg1⁰ -> (fun _lh_times_arg2⁰ -> [Fun [TIMES] [LH_C _lh_times_arg1⁰ [LH_C _lh_times_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 times⁰(x⁰, plus⁰(y⁰, z⁰)) plus⁰(times⁰(x⁰, y⁰), times⁰(x⁰, z⁰))] [LH_C [LH_P2 times⁰(times⁰(x⁰, y⁰), z⁰) times⁰(x⁰, times⁰(y⁰, z⁰))] [LH_C [LH_P2 times⁰(x⁰, difference⁰(y⁰, z⁰)) difference⁰(times⁰(y⁰, x⁰), times⁰(z⁰, x⁰))] [LH_C [LH_P2 times⁰(x⁰, add1⁰(y⁰)) plus⁰(x⁰, times⁰(x⁰, y⁰))] [LH_N]]]]])]))
//│ 	and one⁰ = [Fun [ONE] [LH_N] lazy⁰([LH_C [LH_P2 one⁰ add1⁰(zero⁰)] [LH_N]])]
//│ 	and plus⁰ = (fun _lh_plus_arg1⁰ -> (fun _lh_plus_arg2⁰ -> [Fun [PLUS] [LH_C _lh_plus_arg1⁰ [LH_C _lh_plus_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 plus⁰(plus⁰(x⁰, y⁰), z⁰) plus⁰(x⁰, plus⁰(y⁰, z⁰))] [LH_C [LH_P2 plus⁰(remainder⁰(x⁰, y⁰), times⁰(y⁰, quotient⁰(x⁰, y⁰))) x⁰] [LH_C [LH_P2 plus⁰(x⁰, add1⁰(y⁰)) add1⁰(plus⁰(x⁰, y⁰))] [LH_N]]]])]))
//│ 	and a⁰ = [Var [A]]
//│ 	and if_⁰ = (fun _lh_if__arg1⁰ -> (fun _lh_if__arg2⁰ -> (fun _lh_if__arg3⁰ -> [Fun [IF] [LH_C _lh_if__arg1⁰ [LH_C _lh_if__arg2⁰ [LH_C _lh_if__arg3⁰ [LH_N]]]] lazy⁰([LH_C [LH_P2 if_⁰(if_⁰(x⁰, y⁰, z⁰), u⁰, w⁰) if_⁰(x⁰, if_⁰(y⁰, u⁰, w⁰), if_⁰(z⁰, u⁰, w⁰))] [LH_N]])])))
//│ 	and w⁰ = [Var [W]]
//│ 	and nil⁰ = [Fun [NIL] [LH_N] lazy⁰([LH_N])]
//│ 	and x⁰ = [Var [X]]
//│ 	and odd_⁰ = (fun _lh_odd__arg1⁰ -> [Fun [ODD] [LH_C _lh_odd__arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 odd_⁰(x⁰) even_⁰(sub1⁰(x⁰))] [LH_N]])])
//│ 	and y⁰ = [Var [Y]]
//│ 	and greatereqp⁰ = (fun _lh_greatereqp_arg1⁰ -> (fun _lh_greatereqp_arg2⁰ -> [Fun [GREATEREQP] [LH_C _lh_greatereqp_arg1⁰ [LH_C _lh_greatereqp_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 greatereqp⁰(x⁰, y⁰) not_⁰(lessp⁰(x⁰, y⁰))] [LH_N]])]))
//│ 	and not_⁰ = (fun _lh_not__arg1⁰ -> [Fun [NOT] [LH_C _lh_not__arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 not_⁰(x⁰) if_⁰(x⁰, boyerFalse⁰, boyerTrue⁰)] [LH_N]])])
//│ 	and member⁰ = (fun _lh_member_arg1⁰ -> (fun _lh_member_arg2⁰ -> [Fun [MEMBER] [LH_C _lh_member_arg1⁰ [LH_C _lh_member_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 member⁰(x⁰, append⁰(y⁰, z⁰)) or_⁰(member⁰(x⁰, y⁰), member⁰(x⁰, z⁰))] [LH_C [LH_P2 member⁰(x⁰, reverse_⁰(y⁰)) member⁰(x⁰, y⁰)] [LH_N]]])]))
//│ 	and d⁰ = [Var [D]]
//│ 	and c⁰ = [Var [C]]
//│ 	and consp⁰ = (fun _lh_consp_arg1⁰ -> [Fun [CONSP] [LH_C _lh_consp_arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 consp⁰(cons⁰(x⁰, y⁰)) boyerTrue⁰] [LH_N]])])
//│ 	and nilp⁰ = (fun _lh_nilp_arg1⁰ -> [Fun [NILP] [LH_C _lh_nilp_arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 nilp⁰(x⁰) equal⁰(x⁰, nil⁰)] [LH_N]])])
//│ 	and f² = (fun _lh_f_arg1⁰ -> [Fun [F] [LH_C _lh_f_arg1⁰ [LH_N]] lazy⁰([LH_N])])
//│ 	and two⁰ = [Fun [TWO] [LH_N] lazy⁰([LH_C [LH_P2 two⁰ add1⁰(one⁰)] [LH_N]])]
//│ 	and sub1⁰ = (fun _lh_sub1_arg1⁰ -> [Fun [SUB1] [LH_C _lh_sub1_arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 sub1⁰(add1⁰(x⁰)) x⁰] [LH_N]])])
//│ 	and add1⁰ = (fun _lh_add1_arg1⁰ -> [Fun [ADD1] [LH_C _lh_add1_arg1⁰ [LH_N]] lazy⁰([LH_N])])
//│ 	and greaterp⁰ = (fun _lh_greaterp_arg1⁰ -> (fun _lh_greaterp_arg2⁰ -> [Fun [GREATERP] [LH_C _lh_greaterp_arg1⁰ [LH_C _lh_greaterp_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 greaterp⁰(x⁰, y⁰) lessp⁰(y⁰, x⁰)] [LH_N]])]))
//│ 	and or_⁰ = (fun _lh_or__arg1⁰ -> (fun _lh_or__arg2⁰ -> [Fun [OR] [LH_C _lh_or__arg1⁰ [LH_C _lh_or__arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 or_⁰(x⁰, y⁰) if_⁰(x⁰, boyerTrue⁰, if_⁰(y⁰, boyerTrue⁰, boyerFalse⁰))] [LH_N]])]))
//│ 	and length_⁰ = (fun _lh_length__arg1⁰ -> [Fun [LENGTH] [LH_C _lh_length__arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 length_⁰(reverse_⁰(x⁰)) length_⁰(x⁰)] [LH_C [LH_P2 length_⁰(cons⁰(x⁰, cons⁰(y⁰, cons⁰(z⁰, cons⁰(u⁰, w⁰))))) plus⁰(four⁰, length_⁰(w⁰))] [LH_N]]])])
//│ 	and boyerFalse⁰ = [Fun [FALSE] [LH_N] lazy⁰([LH_N])]
//│ 	and four⁰ = [Fun [FOUR] [LH_N] lazy⁰([LH_C [LH_P2 four⁰ add1⁰(add1⁰(two⁰))] [LH_N]])]
//│ 	and cons⁰ = (fun _lh_cons_arg1⁰ -> (fun _lh_cons_arg2⁰ -> [Fun [CONS] [LH_C _lh_cons_arg1⁰ [LH_C _lh_cons_arg2⁰ [LH_N]]] lazy⁰([LH_N])]))
//│ 	and quotient⁰ = (fun _lh_quotient_arg1⁰ -> (fun _lh_quotient_arg2⁰ -> [Fun [QUOTIENT] [LH_C _lh_quotient_arg1⁰ [LH_C _lh_quotient_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 quotient⁰(plus⁰(x⁰, plus⁰(x⁰, y⁰)), two⁰) plus⁰(x⁰, quotient⁰(y⁰, two⁰))] [LH_C [LH_P2 quotient⁰(times⁰(y⁰, x⁰), y⁰) if_⁰(zerop⁰(y⁰), zero⁰, x⁰)] [LH_N]]])]))
//│ 	and gcd_⁰ = (fun _lh_gcd__arg1⁰ -> (fun _lh_gcd__arg2⁰ -> [Fun [GCD] [LH_C _lh_gcd__arg1⁰ [LH_C _lh_gcd__arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 gcd_⁰(x⁰, y⁰) gcd_⁰(y⁰, x⁰)] [LH_C [LH_P2 gcd_⁰(times⁰(x⁰, z⁰), times⁰(y⁰, z⁰)) times⁰(z⁰, gcd_⁰(x⁰, y⁰))] [LH_N]]])]))
//│ 	and even_⁰ = (fun _lh_even__arg1⁰ -> [Fun [EVEN] [LH_C _lh_even__arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 even_⁰(x⁰) if_⁰(zerop⁰(x⁰), boyerTrue⁰, odd_⁰(sub1⁰(x⁰)))] [LH_N]])]) 
//│ 	in let subst0⁰ = [LH_C [LH_P2 [X] f²(plus⁰(plus⁰(a⁰, b⁰), plus⁰(c⁰, zero⁰)))] [LH_C [LH_P2 [Y] f²(times⁰(times⁰(a⁰, b⁰), plus⁰(c⁰, d⁰)))] [LH_C [LH_P2 [Z] f²(reverse_⁰(append⁰(append⁰(a⁰, b⁰), nil⁰)))] [LH_C [LH_P2 [U] equal⁰(plus⁰(a⁰, b⁰), difference⁰(x⁰, y⁰))] [LH_C [LH_P2 [W] lessp⁰(remainder⁰(a⁰, b⁰), member⁰(a⁰, length_⁰(b⁰)))] [LH_N]]]]]]
//│ 	in let theorem⁰ = implies⁰(and_⁰(implies⁰(_lh_test0_arg1⁰, y⁰), and_⁰(implies⁰(y⁰, z⁰), and_⁰(implies⁰(z⁰, u⁰), implies⁰(u⁰, w⁰)))), implies⁰(x⁰, w⁰))
//│ 	in tautp_lh_₁(apply_subst_lh_₁(subst0⁰, theorem⁰))
//│ def testBoyer_nofib_lh_₁(_lh_testBoyer_nofib_arg1⁰) = all_lh_₁(test0_lh_₁, replicate_lh_₁(_lh_testBoyer_nofib_arg1⁰, [Var [X]]))
//│ def truep_lh_₁(_lh_truep_arg1¹, _lh_truep_arg2¹) = case _lh_truep_arg1¹ of {
//│ 	Fun _lh_truep_Fun_0¹ _lh_truep_Fun_1¹ _lh_truep_Fun_2¹ => case _lh_truep_Fun_0¹ of {
//│ 		TRUE  => [True]
//│ 		| _  => termInList_lh_₂(_lh_truep_arg1¹, _lh_truep_arg2¹)}
//│ 	| _  => termInList_lh_₁(_lh_truep_arg1¹, _lh_truep_arg2¹)}
//│ def truep_lh_₂(_lh_truep_arg1⁰, _lh_truep_arg2⁰) = case _lh_truep_arg1⁰ of {
//│ 	Fun _lh_truep_Fun_0⁰ _lh_truep_Fun_1⁰ _lh_truep_Fun_2⁰ => case _lh_truep_Fun_0⁰ of {
//│ 		TRUE  => [True]
//│ 		| _  => termInList_lh_₄(_lh_truep_arg1⁰, _lh_truep_arg2⁰)}
//│ 	| _  => termInList_lh_₃(_lh_truep_arg1⁰, _lh_truep_arg2⁰)}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec replicate_lh__d1 _lh_replicate_arg1_0 _lh_replicate_arg2_0 =
//│ 		  (if (_lh_replicate_arg1_0 = 0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (`LH_C(_lh_replicate_arg2_0, ((replicate_lh__d1 (_lh_replicate_arg1_0 - 1)) _lh_replicate_arg2_0))));;
//│ 		let rec all_lh__d1 _lh_all_arg1_0 _lh_all_arg2_0 =
//│ 		  (match _lh_all_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      true
//│ 		    | `LH_C(_lh_all_LH_C_0_0, _lh_all_LH_C_1_0) -> 
//│ 		      (if (_lh_all_arg1_0 _lh_all_LH_C_0_0) then
//│ 		        ((all_lh__d1 _lh_all_arg1_0) _lh_all_LH_C_1_0)
//│ 		      else
//│ 		        false));;
//│ 		let rec find_lh__d1 _lh_find_arg1_0 _lh_find_arg2_0 =
//│ 		  (match _lh_find_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_P2(false, (`ERROR)))
//│ 		    | `LH_C(_lh_find_LH_C_0_0, _lh_find_LH_C_1_0) -> 
//│ 		      (match _lh_find_LH_C_0_0 with
//│ 		        | `LH_P2(_lh_find_LH_P2_0_0, _lh_find_LH_P2_1_0) -> 
//│ 		          (if (_lh_find_arg1_0 = _lh_find_LH_P2_0_0) then
//│ 		            (`LH_P2(true, _lh_find_LH_P2_1_0))
//│ 		          else
//│ 		            ((find_lh__d1 _lh_find_arg1_0) _lh_find_LH_C_1_0))));;
//│ 		let rec map_lh__d1 f_1 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (`LH_C((f_1 h_1), ((map_lh__d1 f_1) t_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec apply_subst_lh__d1 _lh_apply_subst_arg1_1 _lh_apply_subst_arg2_1 =
//│ 		  (match _lh_apply_subst_arg2_1 with
//│ 		    | `Var(_lh_apply_subst_Var_0_1) -> 
//│ 		      (let rec _lh_matchIdent_7 = ((find_lh__d1 _lh_apply_subst_Var_0_1) _lh_apply_subst_arg1_1) in
//│ 		        (match _lh_matchIdent_7 with
//│ 		          | `LH_P2(_lh_apply_subst_LH_P2_0_1, _lh_apply_subst_LH_P2_1_1) -> 
//│ 		            (if _lh_apply_subst_LH_P2_0_1 then
//│ 		              _lh_apply_subst_LH_P2_1_1
//│ 		            else
//│ 		              (`Var(_lh_apply_subst_Var_0_1)))))
//│ 		    | `Fun(_lh_apply_subst_Fun_0_1, _lh_apply_subst_Fun_1_1, _lh_apply_subst_Fun_2_1) -> 
//│ 		      (`Fun(_lh_apply_subst_Fun_0_1, ((map_lh__d1 (apply_subst_lh__d1 _lh_apply_subst_arg1_1)) _lh_apply_subst_Fun_1_1), _lh_apply_subst_Fun_2_1))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec map_lh__d2 f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C((f_0 h_0), ((map_lh__d2 f_0) t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec termEq_lh__d7 _lh_termEq_arg1_1 _lh_termEq_arg2_1 =
//│ 		  (match _lh_termEq_arg1_1 with
//│ 		    | `Var(_lh_termEq_Var_0_2) -> 
//│ 		      (match _lh_termEq_arg2_1 with
//│ 		        | `Var(_lh_termEq_Var_0_3) -> 
//│ 		          (_lh_termEq_Var_0_2 = _lh_termEq_Var_0_3)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Fun(_lh_termEq_Fun_0_2, _lh_termEq_Fun_1_2, _lh_termEq_Fun_2_2) -> 
//│ 		      (match _lh_termEq_arg2_1 with
//│ 		        | `Fun(_lh_termEq_Fun_0_3, _lh_termEq_Fun_1_3, _lh_termEq_Fun_2_3) -> 
//│ 		          ((_lh_termEq_Fun_0_2 = _lh_termEq_Fun_0_3) && ((termLsEq_lh__d7 _lh_termEq_Fun_1_2) _lh_termEq_Fun_1_3))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false)
//│ 		and
//│ 		termLsEq_lh__d7 _lh_termLsEq_arg1_0 _lh_termLsEq_arg2_0 =
//│ 		  (match _lh_termLsEq_arg1_0 with
//│ 		    | `LH_C(_lh_termLsEq_LH_C_0_0, _lh_termLsEq_LH_C_1_0) -> 
//│ 		      (match _lh_termLsEq_arg2_0 with
//│ 		        | `LH_C(_lh_termLsEq_LH_C_0_1, _lh_termLsEq_LH_C_1_1) -> 
//│ 		          (if ((termEq_lh__d7 _lh_termLsEq_LH_C_0_0) _lh_termLsEq_LH_C_0_1) then
//│ 		            ((termLsEq_lh__d7 _lh_termLsEq_LH_C_1_0) _lh_termLsEq_LH_C_1_1)
//│ 		          else
//│ 		            false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `LH_N -> 
//│ 		      (match _lh_termLsEq_arg2_0 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec termEq_lh__d8 _lh_termEq_arg1_0 _lh_termEq_arg2_0 =
//│ 		  (match _lh_termEq_arg1_0 with
//│ 		    | `Var(_lh_termEq_Var_0_0) -> 
//│ 		      (match _lh_termEq_arg2_0 with
//│ 		        | `Var(_lh_termEq_Var_0_1) -> 
//│ 		          (_lh_termEq_Var_0_0 = _lh_termEq_Var_0_1)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Fun(_lh_termEq_Fun_0_0, _lh_termEq_Fun_1_0, _lh_termEq_Fun_2_0) -> 
//│ 		      (match _lh_termEq_arg2_0 with
//│ 		        | `Fun(_lh_termEq_Fun_0_1, _lh_termEq_Fun_1_1, _lh_termEq_Fun_2_1) -> 
//│ 		          ((_lh_termEq_Fun_0_0 = _lh_termEq_Fun_0_1) && ((termLsEq_lh__d7 _lh_termEq_Fun_1_0) _lh_termEq_Fun_1_1))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec one_way_unify1_lh__d1 _lh_one_way_unify1_arg1_0 _lh_one_way_unify1_arg2_0 _lh_one_way_unify1_arg3_0 =
//│ 		  (match _lh_one_way_unify1_arg2_0 with
//│ 		    | `Var(_lh_one_way_unify1_Var_0_0) -> 
//│ 		      (let rec _lh_matchIdent_2 = ((find_lh__d1 _lh_one_way_unify1_Var_0_0) _lh_one_way_unify1_arg3_0) in
//│ 		        (match _lh_matchIdent_2 with
//│ 		          | `LH_P2(_lh_one_way_unify1_LH_P2_0_0, _lh_one_way_unify1_LH_P2_1_0) -> 
//│ 		            (if _lh_one_way_unify1_LH_P2_0_0 then
//│ 		              (`LH_P2(((termEq_lh__d8 _lh_one_way_unify1_arg1_0) _lh_one_way_unify1_LH_P2_1_0), _lh_one_way_unify1_arg3_0))
//│ 		            else
//│ 		              (`LH_P2(true, (`LH_C((`LH_P2(_lh_one_way_unify1_Var_0_0, _lh_one_way_unify1_arg1_0)), _lh_one_way_unify1_arg3_0)))))))
//│ 		    | _ -> 
//│ 		      (match _lh_one_way_unify1_arg1_0 with
//│ 		        | `Fun(_lh_one_way_unify1_Fun_0_0, _lh_one_way_unify1_Fun_1_0, _lh_one_way_unify1_Fun_2_0) -> 
//│ 		          (match _lh_one_way_unify1_arg2_0 with
//│ 		            | `Fun(_lh_one_way_unify1_Fun_0_1, _lh_one_way_unify1_Fun_1_1, _lh_one_way_unify1_Fun_2_1) -> 
//│ 		              (if (_lh_one_way_unify1_Fun_0_0 = _lh_one_way_unify1_Fun_0_1) then
//│ 		                (((one_way_unify1_lst_lh__d1 _lh_one_way_unify1_Fun_1_0) _lh_one_way_unify1_Fun_1_1) _lh_one_way_unify1_arg3_0)
//│ 		              else
//│ 		                (`LH_P2(false, (`LH_N))))
//│ 		            | _ -> 
//│ 		              (`LH_P2(false, (`LH_N))))
//│ 		        | _ -> 
//│ 		          (`LH_P2(false, (`LH_N)))))
//│ 		and
//│ 		one_way_unify1_lst_lh__d1 _lh_one_way_unify1_lst_arg1_0 _lh_one_way_unify1_lst_arg2_0 _lh_one_way_unify1_lst_arg3_0 =
//│ 		  (match _lh_one_way_unify1_lst_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (match _lh_one_way_unify1_lst_arg2_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_P2(true, _lh_one_way_unify1_lst_arg3_0))
//│ 		        | _ -> 
//│ 		          (`LH_P2(false, (`LH_N))))
//│ 		    | `LH_C(_lh_one_way_unify1_lst_LH_C_0_0, _lh_one_way_unify1_lst_LH_C_1_0) -> 
//│ 		      (match _lh_one_way_unify1_lst_arg2_0 with
//│ 		        | `LH_C(_lh_one_way_unify1_lst_LH_C_0_1, _lh_one_way_unify1_lst_LH_C_1_1) -> 
//│ 		          (let rec _lh_matchIdent_0 = (((one_way_unify1_lh__d1 _lh_one_way_unify1_lst_LH_C_0_0) _lh_one_way_unify1_lst_LH_C_0_1) _lh_one_way_unify1_lst_arg3_0) in
//│ 		            (match _lh_matchIdent_0 with
//│ 		              | `LH_P2(_lh_one_way_unify1_lst_LH_P2_0_0, _lh_one_way_unify1_lst_LH_P2_1_0) -> 
//│ 		                (let rec _lh_matchIdent_1 = (((one_way_unify1_lst_lh__d1 _lh_one_way_unify1_lst_LH_C_1_0) _lh_one_way_unify1_lst_LH_C_1_1) _lh_one_way_unify1_lst_LH_P2_1_0) in
//│ 		                  (match _lh_matchIdent_1 with
//│ 		                    | `LH_P2(_lh_one_way_unify1_lst_LH_P2_0_1, _lh_one_way_unify1_lst_LH_P2_1_1) -> 
//│ 		                      (`LH_P2((_lh_one_way_unify1_lst_LH_P2_0_0 && _lh_one_way_unify1_lst_LH_P2_0_1), _lh_one_way_unify1_lst_LH_P2_1_1))))))
//│ 		        | _ -> 
//│ 		          (`LH_P2(false, (`LH_N))))
//│ 		    | _ -> 
//│ 		      (`LH_P2(false, (`LH_N))));;
//│ 		let rec one_way_unify_lh__d1 _lh_one_way_unify_arg1_0 _lh_one_way_unify_arg2_0 =
//│ 		  (((one_way_unify1_lh__d1 _lh_one_way_unify_arg1_0) _lh_one_way_unify_arg2_0) (`LH_N));;
//│ 		let rec apply_subst_lh__d2 _lh_apply_subst_arg1_0 _lh_apply_subst_arg2_0 =
//│ 		  (match _lh_apply_subst_arg2_0 with
//│ 		    | `Var(_lh_apply_subst_Var_0_0) -> 
//│ 		      (let rec _lh_matchIdent_3 = ((find_lh__d1 _lh_apply_subst_Var_0_0) _lh_apply_subst_arg1_0) in
//│ 		        (match _lh_matchIdent_3 with
//│ 		          | `LH_P2(_lh_apply_subst_LH_P2_0_0, _lh_apply_subst_LH_P2_1_0) -> 
//│ 		            (if _lh_apply_subst_LH_P2_0_0 then
//│ 		              _lh_apply_subst_LH_P2_1_0
//│ 		            else
//│ 		              (`Var(_lh_apply_subst_Var_0_0)))))
//│ 		    | `Fun(_lh_apply_subst_Fun_0_0, _lh_apply_subst_Fun_1_0, _lh_apply_subst_Fun_2_0) -> 
//│ 		      (`Fun(_lh_apply_subst_Fun_0_0, ((map_lh__d2 (apply_subst_lh__d2 _lh_apply_subst_arg1_0)) _lh_apply_subst_Fun_1_0), _lh_apply_subst_Fun_2_0))
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec rewrite_lh__d1 _lh_rewrite_arg1_0 =
//│ 		  (match _lh_rewrite_arg1_0 with
//│ 		    | `Var(_lh_rewrite_Var_0_0) -> 
//│ 		      (`Var(_lh_rewrite_Var_0_0))
//│ 		    | `Fun(_lh_rewrite_Fun_0_0, _lh_rewrite_Fun_1_0, _lh_rewrite_Fun_2_0) -> 
//│ 		      ((rewrite_with_lemmas_lh__d1 (`Fun(_lh_rewrite_Fun_0_0, ((map_lh__d2 rewrite_lh__d1) _lh_rewrite_Fun_1_0), _lh_rewrite_Fun_2_0))) _lh_rewrite_Fun_2_0)
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"))
//│ 		and
//│ 		rewrite_with_lemmas_helper_lh__d1 _lh_rewrite_with_lemmas_helper_arg1_0 _lh_rewrite_with_lemmas_helper_arg2_0 =
//│ 		  (let rec _lh_matchIdent_4 = _lh_rewrite_with_lemmas_helper_arg2_0 in
//│ 		    (match _lh_matchIdent_4 with
//│ 		      | `LH_N -> 
//│ 		        _lh_rewrite_with_lemmas_helper_arg1_0
//│ 		      | `LH_C(_lh_rewrite_with_lemmas_helper_LH_C_0_0, _lh_rewrite_with_lemmas_helper_LH_C_1_0) -> 
//│ 		        (match _lh_rewrite_with_lemmas_helper_LH_C_0_0 with
//│ 		          | `LH_P2(_lh_rewrite_with_lemmas_helper_LH_P2_0_0, _lh_rewrite_with_lemmas_helper_LH_P2_1_0) -> 
//│ 		            (let rec _lh_matchIdent_5 = ((one_way_unify_lh__d1 _lh_rewrite_with_lemmas_helper_arg1_0) _lh_rewrite_with_lemmas_helper_LH_P2_0_0) in
//│ 		              (match _lh_matchIdent_5 with
//│ 		                | `LH_P2(_lh_rewrite_with_lemmas_helper_LH_P2_0_1, _lh_rewrite_with_lemmas_helper_LH_P2_1_1) -> 
//│ 		                  (if _lh_rewrite_with_lemmas_helper_LH_P2_0_1 then
//│ 		                    (rewrite_lh__d1 ((apply_subst_lh__d2 _lh_rewrite_with_lemmas_helper_LH_P2_1_1) _lh_rewrite_with_lemmas_helper_LH_P2_1_0))
//│ 		                  else
//│ 		                    ((rewrite_with_lemmas_helper_lh__d1 _lh_rewrite_with_lemmas_helper_arg1_0) _lh_rewrite_with_lemmas_helper_LH_C_1_0)))))))
//│ 		and
//│ 		rewrite_with_lemmas_lh__d1 _lh_rewrite_with_lemmas_arg1_0 _lh_rewrite_with_lemmas_arg2_0 =
//│ 		  ((rewrite_with_lemmas_helper_lh__d1 _lh_rewrite_with_lemmas_arg1_0) (Lazy.force _lh_rewrite_with_lemmas_arg2_0));;
//│ 		let rec termEq_lh__d4 _lh_termEq_arg1_4 _lh_termEq_arg2_4 =
//│ 		  (match _lh_termEq_arg1_4 with
//│ 		    | `Var(_lh_termEq_Var_0_8) -> 
//│ 		      (match _lh_termEq_arg2_4 with
//│ 		        | `Var(_lh_termEq_Var_0_9) -> 
//│ 		          (_lh_termEq_Var_0_8 = _lh_termEq_Var_0_9)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Fun(_lh_termEq_Fun_0_8, _lh_termEq_Fun_1_8, _lh_termEq_Fun_2_8) -> 
//│ 		      (match _lh_termEq_arg2_4 with
//│ 		        | `Fun(_lh_termEq_Fun_0_9, _lh_termEq_Fun_1_9, _lh_termEq_Fun_2_9) -> 
//│ 		          ((_lh_termEq_Fun_0_8 = _lh_termEq_Fun_0_9) && ((termLsEq_lh__d4 _lh_termEq_Fun_1_8) _lh_termEq_Fun_1_9))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false)
//│ 		and
//│ 		termLsEq_lh__d4 _lh_termLsEq_arg1_3 _lh_termLsEq_arg2_3 =
//│ 		  (match _lh_termLsEq_arg1_3 with
//│ 		    | `LH_C(_lh_termLsEq_LH_C_0_6, _lh_termLsEq_LH_C_1_6) -> 
//│ 		      (match _lh_termLsEq_arg2_3 with
//│ 		        | `LH_C(_lh_termLsEq_LH_C_0_7, _lh_termLsEq_LH_C_1_7) -> 
//│ 		          (if ((termEq_lh__d4 _lh_termLsEq_LH_C_0_6) _lh_termLsEq_LH_C_0_7) then
//│ 		            ((termLsEq_lh__d4 _lh_termLsEq_LH_C_1_6) _lh_termLsEq_LH_C_1_7)
//│ 		          else
//│ 		            false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `LH_N -> 
//│ 		      (match _lh_termLsEq_arg2_3 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec termInList_lh__d4 _lh_termInList_arg1_4 _lh_termInList_arg2_4 =
//│ 		  (match _lh_termInList_arg2_4 with
//│ 		    | `LH_C(_lh_termInList_LH_C_0_4, _lh_termInList_LH_C_1_4) -> 
//│ 		      (if ((termEq_lh__d4 _lh_termInList_arg1_4) _lh_termInList_LH_C_0_4) then
//│ 		        true
//│ 		      else
//│ 		        ((termInList_lh__d4 _lh_termInList_arg1_4) _lh_termInList_LH_C_1_4))
//│ 		    | `LH_N -> 
//│ 		      false);;
//│ 		let rec termEq_lh__d3 _lh_termEq_arg1_5 _lh_termEq_arg2_5 =
//│ 		  (match _lh_termEq_arg1_5 with
//│ 		    | `Var(_lh_termEq_Var_0_1_0) -> 
//│ 		      (match _lh_termEq_arg2_5 with
//│ 		        | `Var(_lh_termEq_Var_0_1_1) -> 
//│ 		          (_lh_termEq_Var_0_1_0 = _lh_termEq_Var_0_1_1)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Fun(_lh_termEq_Fun_0_1_0, _lh_termEq_Fun_1_1_0, _lh_termEq_Fun_2_1_0) -> 
//│ 		      (match _lh_termEq_arg2_5 with
//│ 		        | `Fun(_lh_termEq_Fun_0_1_1, _lh_termEq_Fun_1_1_1, _lh_termEq_Fun_2_1_1) -> 
//│ 		          ((_lh_termEq_Fun_0_1_0 = _lh_termEq_Fun_0_1_1) && ((termLsEq_lh__d3 _lh_termEq_Fun_1_1_0) _lh_termEq_Fun_1_1_1))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false)
//│ 		and
//│ 		termLsEq_lh__d3 _lh_termLsEq_arg1_4 _lh_termLsEq_arg2_4 =
//│ 		  (match _lh_termLsEq_arg1_4 with
//│ 		    | `LH_C(_lh_termLsEq_LH_C_0_8, _lh_termLsEq_LH_C_1_8) -> 
//│ 		      (match _lh_termLsEq_arg2_4 with
//│ 		        | `LH_C(_lh_termLsEq_LH_C_0_9, _lh_termLsEq_LH_C_1_9) -> 
//│ 		          (if ((termEq_lh__d3 _lh_termLsEq_LH_C_0_8) _lh_termLsEq_LH_C_0_9) then
//│ 		            ((termLsEq_lh__d3 _lh_termLsEq_LH_C_1_8) _lh_termLsEq_LH_C_1_9)
//│ 		          else
//│ 		            false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `LH_N -> 
//│ 		      (match _lh_termLsEq_arg2_4 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec termInList_lh__d3 _lh_termInList_arg1_5 _lh_termInList_arg2_5 =
//│ 		  (match _lh_termInList_arg2_5 with
//│ 		    | `LH_C(_lh_termInList_LH_C_0_5, _lh_termInList_LH_C_1_5) -> 
//│ 		      (if ((termEq_lh__d3 _lh_termInList_arg1_5) _lh_termInList_LH_C_0_5) then
//│ 		        true
//│ 		      else
//│ 		        ((termInList_lh__d3 _lh_termInList_arg1_5) _lh_termInList_LH_C_1_5))
//│ 		    | `LH_N -> 
//│ 		      false);;
//│ 		let rec truep_lh__d2 _lh_truep_arg1_0 _lh_truep_arg2_0 =
//│ 		  (match _lh_truep_arg1_0 with
//│ 		    | `Fun(_lh_truep_Fun_0_0, _lh_truep_Fun_1_0, _lh_truep_Fun_2_0) -> 
//│ 		      (match _lh_truep_Fun_0_0 with
//│ 		        | `TRUE -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          ((termInList_lh__d4 _lh_truep_arg1_0) _lh_truep_arg2_0))
//│ 		    | _ -> 
//│ 		      ((termInList_lh__d3 _lh_truep_arg1_0) _lh_truep_arg2_0));;
//│ 		let rec termEq_lh__d5 _lh_termEq_arg1_3 _lh_termEq_arg2_3 =
//│ 		  (match _lh_termEq_arg1_3 with
//│ 		    | `Var(_lh_termEq_Var_0_6) -> 
//│ 		      (match _lh_termEq_arg2_3 with
//│ 		        | `Var(_lh_termEq_Var_0_7) -> 
//│ 		          (_lh_termEq_Var_0_6 = _lh_termEq_Var_0_7)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Fun(_lh_termEq_Fun_0_6, _lh_termEq_Fun_1_6, _lh_termEq_Fun_2_6) -> 
//│ 		      (match _lh_termEq_arg2_3 with
//│ 		        | `Fun(_lh_termEq_Fun_0_7, _lh_termEq_Fun_1_7, _lh_termEq_Fun_2_7) -> 
//│ 		          ((_lh_termEq_Fun_0_6 = _lh_termEq_Fun_0_7) && ((termLsEq_lh__d5 _lh_termEq_Fun_1_6) _lh_termEq_Fun_1_7))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false)
//│ 		and
//│ 		termLsEq_lh__d5 _lh_termLsEq_arg1_2 _lh_termLsEq_arg2_2 =
//│ 		  (match _lh_termLsEq_arg1_2 with
//│ 		    | `LH_C(_lh_termLsEq_LH_C_0_4, _lh_termLsEq_LH_C_1_4) -> 
//│ 		      (match _lh_termLsEq_arg2_2 with
//│ 		        | `LH_C(_lh_termLsEq_LH_C_0_5, _lh_termLsEq_LH_C_1_5) -> 
//│ 		          (if ((termEq_lh__d5 _lh_termLsEq_LH_C_0_4) _lh_termLsEq_LH_C_0_5) then
//│ 		            ((termLsEq_lh__d5 _lh_termLsEq_LH_C_1_4) _lh_termLsEq_LH_C_1_5)
//│ 		          else
//│ 		            false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `LH_N -> 
//│ 		      (match _lh_termLsEq_arg2_2 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec termInList_lh__d5 _lh_termInList_arg1_3 _lh_termInList_arg2_3 =
//│ 		  (match _lh_termInList_arg2_3 with
//│ 		    | `LH_C(_lh_termInList_LH_C_0_3, _lh_termInList_LH_C_1_3) -> 
//│ 		      (if ((termEq_lh__d5 _lh_termInList_arg1_3) _lh_termInList_LH_C_0_3) then
//│ 		        true
//│ 		      else
//│ 		        ((termInList_lh__d5 _lh_termInList_arg1_3) _lh_termInList_LH_C_1_3))
//│ 		    | `LH_N -> 
//│ 		      false);;
//│ 		let rec termEq_lh__d6 _lh_termEq_arg1_2 _lh_termEq_arg2_2 =
//│ 		  (match _lh_termEq_arg1_2 with
//│ 		    | `Var(_lh_termEq_Var_0_4) -> 
//│ 		      (match _lh_termEq_arg2_2 with
//│ 		        | `Var(_lh_termEq_Var_0_5) -> 
//│ 		          (_lh_termEq_Var_0_4 = _lh_termEq_Var_0_5)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Fun(_lh_termEq_Fun_0_4, _lh_termEq_Fun_1_4, _lh_termEq_Fun_2_4) -> 
//│ 		      (match _lh_termEq_arg2_2 with
//│ 		        | `Fun(_lh_termEq_Fun_0_5, _lh_termEq_Fun_1_5, _lh_termEq_Fun_2_5) -> 
//│ 		          ((_lh_termEq_Fun_0_4 = _lh_termEq_Fun_0_5) && ((termLsEq_lh__d6 _lh_termEq_Fun_1_4) _lh_termEq_Fun_1_5))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false)
//│ 		and
//│ 		termLsEq_lh__d6 _lh_termLsEq_arg1_1 _lh_termLsEq_arg2_1 =
//│ 		  (match _lh_termLsEq_arg1_1 with
//│ 		    | `LH_C(_lh_termLsEq_LH_C_0_2, _lh_termLsEq_LH_C_1_2) -> 
//│ 		      (match _lh_termLsEq_arg2_1 with
//│ 		        | `LH_C(_lh_termLsEq_LH_C_0_3, _lh_termLsEq_LH_C_1_3) -> 
//│ 		          (if ((termEq_lh__d6 _lh_termLsEq_LH_C_0_2) _lh_termLsEq_LH_C_0_3) then
//│ 		            ((termLsEq_lh__d6 _lh_termLsEq_LH_C_1_2) _lh_termLsEq_LH_C_1_3)
//│ 		          else
//│ 		            false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `LH_N -> 
//│ 		      (match _lh_termLsEq_arg2_1 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec termInList_lh__d6 _lh_termInList_arg1_2 _lh_termInList_arg2_2 =
//│ 		  (match _lh_termInList_arg2_2 with
//│ 		    | `LH_C(_lh_termInList_LH_C_0_2, _lh_termInList_LH_C_1_2) -> 
//│ 		      (if ((termEq_lh__d6 _lh_termInList_arg1_2) _lh_termInList_LH_C_0_2) then
//│ 		        true
//│ 		      else
//│ 		        ((termInList_lh__d6 _lh_termInList_arg1_2) _lh_termInList_LH_C_1_2))
//│ 		    | `LH_N -> 
//│ 		      false);;
//│ 		let rec falsep_lh__d1 _lh_falsep_arg1_1 _lh_falsep_arg2_1 =
//│ 		  (match _lh_falsep_arg1_1 with
//│ 		    | `Fun(_lh_falsep_Fun_0_1, _lh_falsep_Fun_1_1, _lh_falsep_Fun_2_1) -> 
//│ 		      (match _lh_falsep_Fun_0_1 with
//│ 		        | `FALSE -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          ((termInList_lh__d5 _lh_falsep_arg1_1) _lh_falsep_arg2_1))
//│ 		    | _ -> 
//│ 		      ((termInList_lh__d6 _lh_falsep_arg1_1) _lh_falsep_arg2_1));;
//│ 		let rec termEq_lh__d1 _lh_termEq_arg1_7 _lh_termEq_arg2_7 =
//│ 		  (match _lh_termEq_arg1_7 with
//│ 		    | `Var(_lh_termEq_Var_0_1_4) -> 
//│ 		      (match _lh_termEq_arg2_7 with
//│ 		        | `Var(_lh_termEq_Var_0_1_5) -> 
//│ 		          (_lh_termEq_Var_0_1_4 = _lh_termEq_Var_0_1_5)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Fun(_lh_termEq_Fun_0_1_4, _lh_termEq_Fun_1_1_4, _lh_termEq_Fun_2_1_4) -> 
//│ 		      (match _lh_termEq_arg2_7 with
//│ 		        | `Fun(_lh_termEq_Fun_0_1_5, _lh_termEq_Fun_1_1_5, _lh_termEq_Fun_2_1_5) -> 
//│ 		          ((_lh_termEq_Fun_0_1_4 = _lh_termEq_Fun_0_1_5) && ((termLsEq_lh__d1 _lh_termEq_Fun_1_1_4) _lh_termEq_Fun_1_1_5))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false)
//│ 		and
//│ 		termLsEq_lh__d1 _lh_termLsEq_arg1_6 _lh_termLsEq_arg2_6 =
//│ 		  (match _lh_termLsEq_arg1_6 with
//│ 		    | `LH_C(_lh_termLsEq_LH_C_0_1_2, _lh_termLsEq_LH_C_1_1_2) -> 
//│ 		      (match _lh_termLsEq_arg2_6 with
//│ 		        | `LH_C(_lh_termLsEq_LH_C_0_1_3, _lh_termLsEq_LH_C_1_1_3) -> 
//│ 		          (if ((termEq_lh__d1 _lh_termLsEq_LH_C_0_1_2) _lh_termLsEq_LH_C_0_1_3) then
//│ 		            ((termLsEq_lh__d1 _lh_termLsEq_LH_C_1_1_2) _lh_termLsEq_LH_C_1_1_3)
//│ 		          else
//│ 		            false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `LH_N -> 
//│ 		      (match _lh_termLsEq_arg2_6 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec termInList_lh__d1 _lh_termInList_arg1_7 _lh_termInList_arg2_7 =
//│ 		  (match _lh_termInList_arg2_7 with
//│ 		    | `LH_C(_lh_termInList_LH_C_0_7, _lh_termInList_LH_C_1_7) -> 
//│ 		      (if ((termEq_lh__d1 _lh_termInList_arg1_7) _lh_termInList_LH_C_0_7) then
//│ 		        true
//│ 		      else
//│ 		        ((termInList_lh__d1 _lh_termInList_arg1_7) _lh_termInList_LH_C_1_7))
//│ 		    | `LH_N -> 
//│ 		      false);;
//│ 		let rec termEq_lh__d2 _lh_termEq_arg1_6 _lh_termEq_arg2_6 =
//│ 		  (match _lh_termEq_arg1_6 with
//│ 		    | `Var(_lh_termEq_Var_0_1_2) -> 
//│ 		      (match _lh_termEq_arg2_6 with
//│ 		        | `Var(_lh_termEq_Var_0_1_3) -> 
//│ 		          (_lh_termEq_Var_0_1_2 = _lh_termEq_Var_0_1_3)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `Fun(_lh_termEq_Fun_0_1_2, _lh_termEq_Fun_1_1_2, _lh_termEq_Fun_2_1_2) -> 
//│ 		      (match _lh_termEq_arg2_6 with
//│ 		        | `Fun(_lh_termEq_Fun_0_1_3, _lh_termEq_Fun_1_1_3, _lh_termEq_Fun_2_1_3) -> 
//│ 		          ((_lh_termEq_Fun_0_1_2 = _lh_termEq_Fun_0_1_3) && ((termLsEq_lh__d2 _lh_termEq_Fun_1_1_2) _lh_termEq_Fun_1_1_3))
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false)
//│ 		and
//│ 		termLsEq_lh__d2 _lh_termLsEq_arg1_5 _lh_termLsEq_arg2_5 =
//│ 		  (match _lh_termLsEq_arg1_5 with
//│ 		    | `LH_C(_lh_termLsEq_LH_C_0_1_0, _lh_termLsEq_LH_C_1_1_0) -> 
//│ 		      (match _lh_termLsEq_arg2_5 with
//│ 		        | `LH_C(_lh_termLsEq_LH_C_0_1_1, _lh_termLsEq_LH_C_1_1_1) -> 
//│ 		          (if ((termEq_lh__d2 _lh_termLsEq_LH_C_0_1_0) _lh_termLsEq_LH_C_0_1_1) then
//│ 		            ((termLsEq_lh__d2 _lh_termLsEq_LH_C_1_1_0) _lh_termLsEq_LH_C_1_1_1)
//│ 		          else
//│ 		            false)
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | `LH_N -> 
//│ 		      (match _lh_termLsEq_arg2_5 with
//│ 		        | `LH_N -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          false)
//│ 		    | _ -> 
//│ 		      false);;
//│ 		let rec termInList_lh__d2 _lh_termInList_arg1_6 _lh_termInList_arg2_6 =
//│ 		  (match _lh_termInList_arg2_6 with
//│ 		    | `LH_C(_lh_termInList_LH_C_0_6, _lh_termInList_LH_C_1_6) -> 
//│ 		      (if ((termEq_lh__d2 _lh_termInList_arg1_6) _lh_termInList_LH_C_0_6) then
//│ 		        true
//│ 		      else
//│ 		        ((termInList_lh__d2 _lh_termInList_arg1_6) _lh_termInList_LH_C_1_6))
//│ 		    | `LH_N -> 
//│ 		      false);;
//│ 		let rec truep_lh__d1 _lh_truep_arg1_1 _lh_truep_arg2_1 =
//│ 		  (match _lh_truep_arg1_1 with
//│ 		    | `Fun(_lh_truep_Fun_0_1, _lh_truep_Fun_1_1, _lh_truep_Fun_2_1) -> 
//│ 		      (match _lh_truep_Fun_0_1 with
//│ 		        | `TRUE -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          ((termInList_lh__d2 _lh_truep_arg1_1) _lh_truep_arg2_1))
//│ 		    | _ -> 
//│ 		      ((termInList_lh__d1 _lh_truep_arg1_1) _lh_truep_arg2_1));;
//│ 		let rec termInList_lh__d7 _lh_termInList_arg1_1 _lh_termInList_arg2_1 =
//│ 		  (match _lh_termInList_arg2_1 with
//│ 		    | `LH_C(_lh_termInList_LH_C_0_1, _lh_termInList_LH_C_1_1) -> 
//│ 		      (if ((termEq_lh__d7 _lh_termInList_arg1_1) _lh_termInList_LH_C_0_1) then
//│ 		        true
//│ 		      else
//│ 		        ((termInList_lh__d7 _lh_termInList_arg1_1) _lh_termInList_LH_C_1_1))
//│ 		    | `LH_N -> 
//│ 		      false);;
//│ 		let rec termInList_lh__d8 _lh_termInList_arg1_0 _lh_termInList_arg2_0 =
//│ 		  (match _lh_termInList_arg2_0 with
//│ 		    | `LH_C(_lh_termInList_LH_C_0_0, _lh_termInList_LH_C_1_0) -> 
//│ 		      (if ((termEq_lh__d8 _lh_termInList_arg1_0) _lh_termInList_LH_C_0_0) then
//│ 		        true
//│ 		      else
//│ 		        ((termInList_lh__d8 _lh_termInList_arg1_0) _lh_termInList_LH_C_1_0))
//│ 		    | `LH_N -> 
//│ 		      false);;
//│ 		let rec falsep_lh__d2 _lh_falsep_arg1_0 _lh_falsep_arg2_0 =
//│ 		  (match _lh_falsep_arg1_0 with
//│ 		    | `Fun(_lh_falsep_Fun_0_0, _lh_falsep_Fun_1_0, _lh_falsep_Fun_2_0) -> 
//│ 		      (match _lh_falsep_Fun_0_0 with
//│ 		        | `FALSE -> 
//│ 		          true
//│ 		        | _ -> 
//│ 		          ((termInList_lh__d7 _lh_falsep_arg1_0) _lh_falsep_arg2_0))
//│ 		    | _ -> 
//│ 		      ((termInList_lh__d8 _lh_falsep_arg1_0) _lh_falsep_arg2_0));;
//│ 		let rec tautologyp_lh__d1 _lh_tautologyp_arg1_0 _lh_tautologyp_arg2_0 _lh_tautologyp_arg3_0 =
//│ 		  (if ((truep_lh__d1 _lh_tautologyp_arg1_0) _lh_tautologyp_arg2_0) then
//│ 		    true
//│ 		  else
//│ 		    (if ((falsep_lh__d2 _lh_tautologyp_arg1_0) _lh_tautologyp_arg3_0) then
//│ 		      false
//│ 		    else
//│ 		      (let rec _lh_matchIdent_6 = _lh_tautologyp_arg1_0 in
//│ 		        (match _lh_matchIdent_6 with
//│ 		          | `Fun(_lh_tautologyp_Fun_0_0, _lh_tautologyp_Fun_1_0, _lh_tautologyp_Fun_2_0) -> 
//│ 		            (match _lh_tautologyp_Fun_0_0 with
//│ 		              | `IF -> 
//│ 		                (match _lh_tautologyp_Fun_1_0 with
//│ 		                  | `LH_C(_lh_tautologyp_LH_C_0_0, _lh_tautologyp_LH_C_1_0) -> 
//│ 		                    (match _lh_tautologyp_LH_C_1_0 with
//│ 		                      | `LH_C(_lh_tautologyp_LH_C_0_1, _lh_tautologyp_LH_C_1_1) -> 
//│ 		                        (match _lh_tautologyp_LH_C_1_1 with
//│ 		                          | `LH_C(_lh_tautologyp_LH_C_0_2, _lh_tautologyp_LH_C_1_2) -> 
//│ 		                            (match _lh_tautologyp_LH_C_1_2 with
//│ 		                              | `LH_N -> 
//│ 		                                (if ((truep_lh__d2 _lh_tautologyp_LH_C_0_0) _lh_tautologyp_arg2_0) then
//│ 		                                  (((tautologyp_lh__d1 _lh_tautologyp_LH_C_0_1) _lh_tautologyp_arg2_0) _lh_tautologyp_arg3_0)
//│ 		                                else
//│ 		                                  (if ((falsep_lh__d1 _lh_tautologyp_LH_C_0_0) _lh_tautologyp_arg3_0) then
//│ 		                                    (((tautologyp_lh__d1 _lh_tautologyp_LH_C_0_2) _lh_tautologyp_arg2_0) _lh_tautologyp_arg3_0)
//│ 		                                  else
//│ 		                                    ((((tautologyp_lh__d1 _lh_tautologyp_LH_C_0_1) (`LH_C(_lh_tautologyp_LH_C_0_0, _lh_tautologyp_arg2_0))) _lh_tautologyp_arg3_0) && (((tautologyp_lh__d1 _lh_tautologyp_LH_C_0_2) _lh_tautologyp_arg2_0) (`LH_C(_lh_tautologyp_LH_C_0_0, _lh_tautologyp_arg3_0))))))
//│ 		                              | _ -> 
//│ 		                                false)
//│ 		                          | _ -> 
//│ 		                            false)
//│ 		                      | _ -> 
//│ 		                        false)
//│ 		                  | _ -> 
//│ 		                    false)
//│ 		              | _ -> 
//│ 		                false)
//│ 		          | _ -> 
//│ 		            false))));;
//│ 		let rec tautp_lh__d1 _lh_tautp_arg1_0 =
//│ 		  (((tautologyp_lh__d1 (rewrite_lh__d1 _lh_tautp_arg1_0)) (`LH_N)) (`LH_N));;
//│ 		let rec test0_lh__d1 _lh_test0_arg1_0 =
//│ 		  let rec boyerTrue_0 = (`Fun((`TRUE), (`LH_N), (lazy (`LH_N))))
//│ 		  and append_0 = (fun _lh_append_arg1_0 _lh_append_arg2_0 -> 
//│ 		    (`Fun((`APPEND), (`LH_C(_lh_append_arg1_0, (`LH_C(_lh_append_arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((append_0 ((append_0 x_0) y_0)) z_0), ((append_0 x_0) ((append_0 y_0) z_0)))), (`LH_N)))))))
//│ 		  and difference_0 = (fun _lh_difference_arg1_0 _lh_difference_arg2_0 -> 
//│ 		    (`Fun((`DIFFERENCE), (`LH_C(_lh_difference_arg1_0, (`LH_C(_lh_difference_arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((difference_0 x_0) x_0), zero_0)), (`LH_C((`LH_P2(((difference_0 ((plus_0 x_0) y_0)) x_0), y_0)), (`LH_C((`LH_P2(((difference_0 ((plus_0 y_0) x_0)) x_0), y_0)), (`LH_C((`LH_P2(((difference_0 ((plus_0 x_0) y_0)) ((plus_0 x_0) z_0)), ((difference_0 y_0) z_0))), (`LH_C((`LH_P2(((difference_0 ((plus_0 y_0) ((plus_0 x_0) z_0))) x_0), ((plus_0 y_0) z_0))), (`LH_C((`LH_P2(((difference_0 (add1_0 ((plus_0 y_0) z_0))) z_0), (add1_0 y_0))), (`LH_C((`LH_P2(((difference_0 (add1_0 (add1_0 x_0))) two_0), x_0)), (`LH_N)))))))))))))))))))
//│ 		  and listp_0 = (fun _lh_listp_arg1_0 -> 
//│ 		    (`Fun((`LISTP), (`LH_C(_lh_listp_arg1_0, (`LH_N))), (lazy (`LH_C((`LH_P2((listp_0 x_0), ((or__0 (nilp_0 x_0)) (consp_0 x_0)))), (`LH_N)))))))
//│ 		  and iff_0 = (fun _lh_iff_arg1_0 _lh_iff_arg2_0 -> 
//│ 		    (`Fun((`IFF), (`LH_C(_lh_iff_arg1_0, (`LH_C(_lh_iff_arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((iff_0 x_0) y_0), ((and__0 ((implies_0 x_0) y_0)) ((implies_0 y_0) x_0)))), (`LH_N)))))))
//│ 		  and z_0 = (`Var((`Z)))
//│ 		  and remainder_0 = (fun _lh_remainder_arg1_0 _lh_remainder_arg2_0 -> 
//│ 		    (`Fun((`REMAINDER), (`LH_C(_lh_remainder_arg1_0, (`LH_C(_lh_remainder_arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((remainder_0 x_0) one_0), zero_0)), (`LH_C((`LH_P2(((remainder_0 x_0) x_0), zero_0)), (`LH_C((`LH_P2(((remainder_0 ((times_0 x_0) y_0)) x_0), zero_0)), (`LH_C((`LH_P2(((remainder_0 ((times_0 x_0) y_0)) y_0), zero_0)), (`LH_N)))))))))))))
//│ 		  and nlistp_0 = (fun _lh_nlistp_arg1_0 -> 
//│ 		    (`Fun((`NLISTP), (`LH_C(_lh_nlistp_arg1_0, (`LH_N))), (lazy (`LH_C((`LH_P2((nlistp_0 x_0), (not__0 (listp_0 x_0)))), (`LH_N)))))))
//│ 		  and and__0 = (fun _lh_and__arg1_0 _lh_and__arg2_0 -> 
//│ 		    (`Fun((`AND), (`LH_C(_lh_and__arg1_0, (`LH_C(_lh_and__arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((and__0 x_0) y_0), (((if__0 x_0) (((if__0 y_0) boyerTrue_0) boyerFalse_0)) boyerFalse_0))), (`LH_N)))))))
//│ 		  and implies_0 = (fun _lh_implies_arg1_0 _lh_implies_arg2_0 -> 
//│ 		    (`Fun((`IMPLIES), (`LH_C(_lh_implies_arg1_0, (`LH_C(_lh_implies_arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((implies_0 x_0) y_0), (((if__0 x_0) (((if__0 y_0) boyerTrue_0) boyerFalse_0)) boyerTrue_0))), (`LH_N)))))))
//│ 		  and equal_0 = (fun _lh_equal_arg1_0 _lh_equal_arg2_0 -> 
//│ 		    (`Fun((`EQUAL), (`LH_C(_lh_equal_arg1_0, (`LH_C(_lh_equal_arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((equal_0 ((plus_0 x_0) y_0)) zero_0), ((and__0 (zerop_0 x_0)) (zerop_0 y_0)))), (`LH_C((`LH_P2(((equal_0 ((plus_0 x_0) y_0)) ((plus_0 x_0) z_0)), ((equal_0 y_0) z_0))), (`LH_C((`LH_P2(((equal_0 zero_0) ((difference_0 x_0) y_0)), (not__0 ((lessp_0 y_0) x_0)))), (`LH_C((`LH_P2(((equal_0 x_0) ((difference_0 x_0) y_0)), ((or__0 ((equal_0 x_0) zero_0)) (zerop_0 y_0)))), (`LH_C((`LH_P2(((equal_0 ((times_0 x_0) y_0)) zero_0), ((or__0 (zerop_0 x_0)) (zerop_0 y_0)))), (`LH_C((`LH_P2(((equal_0 ((append_0 x_0) y_0)) ((append_0 x_0) z_0)), ((equal_0 y_0) z_0))), (`LH_C((`LH_P2(((equal_0 y_0) ((times_0 x_0) y_0)), ((or__0 ((equal_0 y_0) zero_0)) ((equal_0 x_0) one_0)))), (`LH_C((`LH_P2(((equal_0 x_0) ((times_0 x_0) y_0)), ((or__0 ((equal_0 x_0) zero_0)) ((equal_0 y_0) one_0)))), (`LH_C((`LH_P2(((equal_0 ((times_0 x_0) y_0)) one_0), ((and__0 ((equal_0 x_0) one_0)) ((equal_0 y_0) one_0)))), (`LH_C((`LH_P2(((equal_0 ((difference_0 x_0) y_0)) ((difference_0 z_0) y_0)), (((if__0 ((lessp_0 x_0) y_0)) (not__0 ((lessp_0 y_0) z_0))) (((if__0 ((lessp_0 z_0) y_0)) (not__0 ((lessp_0 y_0) x_0))) ((equal_0 x_0) z_0))))), (`LH_C((`LH_P2(((equal_0 ((lessp_0 x_0) y_0)) z_0), (((if__0 ((lessp_0 x_0) y_0)) ((equal_0 boyerTrue_0) z_0)) ((equal_0 boyerFalse_0) z_0)))), (`LH_N)))))))))))))))))))))))))))
//│ 		  and divides_0 = (fun _lh_divides_arg1_0 _lh_divides_arg2_0 -> 
//│ 		    (`Fun((`DIVIDES), (`LH_C(_lh_divides_arg1_0, (`LH_C(_lh_divides_arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((divides_0 x_0) y_0), (zerop_0 ((remainder_0 y_0) x_0)))), (`LH_N)))))))
//│ 		  and b_0 = (`Var((`B)))
//│ 		  and lesseqp_0 = (fun _lh_lesseqp_arg1_0 _lh_lesseqp_arg2_0 -> 
//│ 		    (`Fun((`LESSEQP), (`LH_C(_lh_lesseqp_arg1_0, (`LH_C(_lh_lesseqp_arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((lesseqp_0 x_0) y_0), (not__0 ((lessp_0 y_0) x_0)))), (`LH_N)))))))
//│ 		  and exp__0 = (fun _lh_exp__arg1_0 _lh_exp__arg2_0 -> 
//│ 		    (`Fun((`EXP), (`LH_C(_lh_exp__arg1_0, (`LH_C(_lh_exp__arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((exp__0 x_0) ((plus_0 y_0) z_0)), ((times_0 ((exp__0 x_0) y_0)) ((exp__0 x_0) z_0)))), (`LH_C((`LH_P2(((exp__0 x_0) ((times_0 y_0) z_0)), ((exp__0 ((exp__0 x_0) y_0)) z_0))), (`LH_N)))))))))
//│ 		  and lessp_0 = (fun _lh_lessp_arg1_0 _lh_lessp_arg2_0 -> 
//│ 		    (`Fun((`LESSP), (`LH_C(_lh_lessp_arg1_0, (`LH_C(_lh_lessp_arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((lessp_0 ((remainder_0 x_0) y_0)) y_0), (not__0 (zerop_0 y_0)))), (`LH_C((`LH_P2(((lessp_0 ((quotient_0 x_0) y_0)) x_0), ((and__0 (not__0 (zerop_0 x_0))) ((lessp_0 one_0) y_0)))), (`LH_C((`LH_P2(((lessp_0 ((plus_0 x_0) y_0)) ((plus_0 x_0) z_0)), ((lessp_0 y_0) z_0))), (`LH_C((`LH_P2(((lessp_0 ((times_0 x_0) z_0)) ((times_0 y_0) z_0)), ((and__0 (not__0 (zerop_0 z_0))) ((lessp_0 x_0) y_0)))), (`LH_C((`LH_P2(((lessp_0 y_0) ((plus_0 x_0) y_0)), (not__0 (zerop_0 x_0)))), (`LH_N)))))))))))))))
//│ 		  and reverse__0 = (fun _lh_reverse__arg1_0 -> 
//│ 		    (`Fun((`REVERSE), (`LH_C(_lh_reverse__arg1_0, (`LH_N))), (lazy (`LH_C((`LH_P2((reverse__0 ((append_0 x_0) y_0)), ((append_0 (reverse__0 y_0)) (reverse__0 x_0)))), (`LH_N)))))))
//│ 		  and zerop_0 = (fun _lh_zerop_arg1_0 -> 
//│ 		    (`Fun((`ZEROP), (`LH_C(_lh_zerop_arg1_0, (`LH_N))), (lazy (`LH_C((`LH_P2((zerop_0 x_0), ((equal_0 x_0) zero_0))), (`LH_N)))))))
//│ 		  and zero_0 = (`Fun((`ZERO), (`LH_N), (lazy (`LH_N))))
//│ 		  and u_0 = (`Var((`U)))
//│ 		  and times_0 = (fun _lh_times_arg1_0 _lh_times_arg2_0 -> 
//│ 		    (`Fun((`TIMES), (`LH_C(_lh_times_arg1_0, (`LH_C(_lh_times_arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((times_0 x_0) ((plus_0 y_0) z_0)), ((plus_0 ((times_0 x_0) y_0)) ((times_0 x_0) z_0)))), (`LH_C((`LH_P2(((times_0 ((times_0 x_0) y_0)) z_0), ((times_0 x_0) ((times_0 y_0) z_0)))), (`LH_C((`LH_P2(((times_0 x_0) ((difference_0 y_0) z_0)), ((difference_0 ((times_0 y_0) x_0)) ((times_0 z_0) x_0)))), (`LH_C((`LH_P2(((times_0 x_0) (add1_0 y_0)), ((plus_0 x_0) ((times_0 x_0) y_0)))), (`LH_N)))))))))))))
//│ 		  and one_0 = (`Fun((`ONE), (`LH_N), (lazy (`LH_C((`LH_P2(one_0, (add1_0 zero_0))), (`LH_N))))))
//│ 		  and plus_0 = (fun _lh_plus_arg1_0 _lh_plus_arg2_0 -> 
//│ 		    (`Fun((`PLUS), (`LH_C(_lh_plus_arg1_0, (`LH_C(_lh_plus_arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((plus_0 ((plus_0 x_0) y_0)) z_0), ((plus_0 x_0) ((plus_0 y_0) z_0)))), (`LH_C((`LH_P2(((plus_0 ((remainder_0 x_0) y_0)) ((times_0 y_0) ((quotient_0 x_0) y_0))), x_0)), (`LH_C((`LH_P2(((plus_0 x_0) (add1_0 y_0)), (add1_0 ((plus_0 x_0) y_0)))), (`LH_N)))))))))))
//│ 		  and a_0 = (`Var((`A)))
//│ 		  and if__0 = (fun _lh_if__arg1_0 _lh_if__arg2_0 _lh_if__arg3_0 -> 
//│ 		    (`Fun((`IF), (`LH_C(_lh_if__arg1_0, (`LH_C(_lh_if__arg2_0, (`LH_C(_lh_if__arg3_0, (`LH_N))))))), (lazy (`LH_C((`LH_P2((((if__0 (((if__0 x_0) y_0) z_0)) u_0) w_0), (((if__0 x_0) (((if__0 y_0) u_0) w_0)) (((if__0 z_0) u_0) w_0)))), (`LH_N)))))))
//│ 		  and w_0 = (`Var((`W)))
//│ 		  and nil_0 = (`Fun((`NIL), (`LH_N), (lazy (`LH_N))))
//│ 		  and x_0 = (`Var((`X)))
//│ 		  and odd__0 = (fun _lh_odd__arg1_0 -> 
//│ 		    (`Fun((`ODD), (`LH_C(_lh_odd__arg1_0, (`LH_N))), (lazy (`LH_C((`LH_P2((odd__0 x_0), (even__0 (sub1_0 x_0)))), (`LH_N)))))))
//│ 		  and y_0 = (`Var((`Y)))
//│ 		  and greatereqp_0 = (fun _lh_greatereqp_arg1_0 _lh_greatereqp_arg2_0 -> 
//│ 		    (`Fun((`GREATEREQP), (`LH_C(_lh_greatereqp_arg1_0, (`LH_C(_lh_greatereqp_arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((greatereqp_0 x_0) y_0), (not__0 ((lessp_0 x_0) y_0)))), (`LH_N)))))))
//│ 		  and not__0 = (fun _lh_not__arg1_0 -> 
//│ 		    (`Fun((`NOT), (`LH_C(_lh_not__arg1_0, (`LH_N))), (lazy (`LH_C((`LH_P2((not__0 x_0), (((if__0 x_0) boyerFalse_0) boyerTrue_0))), (`LH_N)))))))
//│ 		  and member_0 = (fun _lh_member_arg1_0 _lh_member_arg2_0 -> 
//│ 		    (`Fun((`MEMBER), (`LH_C(_lh_member_arg1_0, (`LH_C(_lh_member_arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((member_0 x_0) ((append_0 y_0) z_0)), ((or__0 ((member_0 x_0) y_0)) ((member_0 x_0) z_0)))), (`LH_C((`LH_P2(((member_0 x_0) (reverse__0 y_0)), ((member_0 x_0) y_0))), (`LH_N)))))))))
//│ 		  and d_0 = (`Var((`D)))
//│ 		  and c_0 = (`Var((`C)))
//│ 		  and consp_0 = (fun _lh_consp_arg1_0 -> 
//│ 		    (`Fun((`CONSP), (`LH_C(_lh_consp_arg1_0, (`LH_N))), (lazy (`LH_C((`LH_P2((consp_0 ((cons_0 x_0) y_0)), boyerTrue_0)), (`LH_N)))))))
//│ 		  and nilp_0 = (fun _lh_nilp_arg1_0 -> 
//│ 		    (`Fun((`NILP), (`LH_C(_lh_nilp_arg1_0, (`LH_N))), (lazy (`LH_C((`LH_P2((nilp_0 x_0), ((equal_0 x_0) nil_0))), (`LH_N)))))))
//│ 		  and f_2 = (fun _lh_f_arg1_0 -> 
//│ 		    (`Fun((`F), (`LH_C(_lh_f_arg1_0, (`LH_N))), (lazy (`LH_N)))))
//│ 		  and two_0 = (`Fun((`TWO), (`LH_N), (lazy (`LH_C((`LH_P2(two_0, (add1_0 one_0))), (`LH_N))))))
//│ 		  and sub1_0 = (fun _lh_sub1_arg1_0 -> 
//│ 		    (`Fun((`SUB1), (`LH_C(_lh_sub1_arg1_0, (`LH_N))), (lazy (`LH_C((`LH_P2((sub1_0 (add1_0 x_0)), x_0)), (`LH_N)))))))
//│ 		  and add1_0 = (fun _lh_add1_arg1_0 -> 
//│ 		    (`Fun((`ADD1), (`LH_C(_lh_add1_arg1_0, (`LH_N))), (lazy (`LH_N)))))
//│ 		  and greaterp_0 = (fun _lh_greaterp_arg1_0 _lh_greaterp_arg2_0 -> 
//│ 		    (`Fun((`GREATERP), (`LH_C(_lh_greaterp_arg1_0, (`LH_C(_lh_greaterp_arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((greaterp_0 x_0) y_0), ((lessp_0 y_0) x_0))), (`LH_N)))))))
//│ 		  and or__0 = (fun _lh_or__arg1_0 _lh_or__arg2_0 -> 
//│ 		    (`Fun((`OR), (`LH_C(_lh_or__arg1_0, (`LH_C(_lh_or__arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((or__0 x_0) y_0), (((if__0 x_0) boyerTrue_0) (((if__0 y_0) boyerTrue_0) boyerFalse_0)))), (`LH_N)))))))
//│ 		  and length__0 = (fun _lh_length__arg1_0 -> 
//│ 		    (`Fun((`LENGTH), (`LH_C(_lh_length__arg1_0, (`LH_N))), (lazy (`LH_C((`LH_P2((length__0 (reverse__0 x_0)), (length__0 x_0))), (`LH_C((`LH_P2((length__0 ((cons_0 x_0) ((cons_0 y_0) ((cons_0 z_0) ((cons_0 u_0) w_0))))), ((plus_0 four_0) (length__0 w_0)))), (`LH_N)))))))))
//│ 		  and boyerFalse_0 = (`Fun((`FALSE), (`LH_N), (lazy (`LH_N))))
//│ 		  and four_0 = (`Fun((`FOUR), (`LH_N), (lazy (`LH_C((`LH_P2(four_0, (add1_0 (add1_0 two_0)))), (`LH_N))))))
//│ 		  and cons_0 = (fun _lh_cons_arg1_0 _lh_cons_arg2_0 -> 
//│ 		    (`Fun((`CONS), (`LH_C(_lh_cons_arg1_0, (`LH_C(_lh_cons_arg2_0, (`LH_N))))), (lazy (`LH_N)))))
//│ 		  and quotient_0 = (fun _lh_quotient_arg1_0 _lh_quotient_arg2_0 -> 
//│ 		    (`Fun((`QUOTIENT), (`LH_C(_lh_quotient_arg1_0, (`LH_C(_lh_quotient_arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((quotient_0 ((plus_0 x_0) ((plus_0 x_0) y_0))) two_0), ((plus_0 x_0) ((quotient_0 y_0) two_0)))), (`LH_C((`LH_P2(((quotient_0 ((times_0 y_0) x_0)) y_0), (((if__0 (zerop_0 y_0)) zero_0) x_0))), (`LH_N)))))))))
//│ 		  and gcd__0 = (fun _lh_gcd__arg1_0 _lh_gcd__arg2_0 -> 
//│ 		    (`Fun((`GCD), (`LH_C(_lh_gcd__arg1_0, (`LH_C(_lh_gcd__arg2_0, (`LH_N))))), (lazy (`LH_C((`LH_P2(((gcd__0 x_0) y_0), ((gcd__0 y_0) x_0))), (`LH_C((`LH_P2(((gcd__0 ((times_0 x_0) z_0)) ((times_0 y_0) z_0)), ((times_0 z_0) ((gcd__0 x_0) y_0)))), (`LH_N)))))))))
//│ 		  and even__0 = (fun _lh_even__arg1_0 -> 
//│ 		    (`Fun((`EVEN), (`LH_C(_lh_even__arg1_0, (`LH_N))), (lazy (`LH_C((`LH_P2((even__0 x_0), (((if__0 (zerop_0 x_0)) boyerTrue_0) (odd__0 (sub1_0 x_0))))), (`LH_N)))))))
//│ 		  in (let rec subst0_0 = (`LH_C((`LH_P2((`X), (f_2 ((plus_0 ((plus_0 a_0) b_0)) ((plus_0 c_0) zero_0))))), (`LH_C((`LH_P2((`Y), (f_2 ((times_0 ((times_0 a_0) b_0)) ((plus_0 c_0) d_0))))), (`LH_C((`LH_P2((`Z), (f_2 (reverse__0 ((append_0 ((append_0 a_0) b_0)) nil_0))))), (`LH_C((`LH_P2((`U), ((equal_0 ((plus_0 a_0) b_0)) ((difference_0 x_0) y_0)))), (`LH_C((`LH_P2((`W), ((lessp_0 ((remainder_0 a_0) b_0)) ((member_0 a_0) (length__0 b_0))))), (`LH_N))))))))))) in
//│ 		    (let rec theorem_0 = ((implies_0 ((and__0 ((implies_0 _lh_test0_arg1_0) y_0)) ((and__0 ((implies_0 y_0) z_0)) ((and__0 ((implies_0 z_0) u_0)) ((implies_0 u_0) w_0))))) ((implies_0 x_0) w_0)) in
//│ 		      (tautp_lh__d1 ((apply_subst_lh__d1 subst0_0) theorem_0))));;
//│ 		let rec testBoyer_nofib_lh__d1 _lh_testBoyer_nofib_arg1_0 =
//│ 		  ((all_lh__d1 test0_lh__d1) ((replicate_lh__d1 _lh_testBoyer_nofib_arg1_0) (`Var((`X)))));;
//│ 		(testBoyer_nofib_lh__d1 5)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< after expansion <<<<<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testBoyer_nofib_lh_₁(primId⁰(5))
//│ def all_lh_₁(_lh_all_arg1², _lh_all_arg2⁰) = _lh_all_arg2⁰(_lh_all_arg1²)
//│ def apply_subst_lh_₁(_lh_apply_subst_arg1¹, _lh_apply_subst_arg2¹) = case _lh_apply_subst_arg2¹ of {
//│ 	Var _lh_apply_subst_Var_0¹ => 
//│ 		let _lh_matchIdent⁵ = find_lh_₁(_lh_apply_subst_Var_0¹, _lh_apply_subst_arg1¹)
//│ 		in case _lh_matchIdent⁵ of {
//│ 			LH_P2 _lh_apply_subst_LH_P2_0¹ _lh_apply_subst_LH_P2_1¹ => if _lh_apply_subst_LH_P2_0¹ then _lh_apply_subst_LH_P2_1¹ else [Var _lh_apply_subst_Var_0¹]}
//│ 	| Fun _lh_apply_subst_Fun_0¹ _lh_apply_subst_Fun_1¹ _lh_apply_subst_Fun_2¹ => [Fun _lh_apply_subst_Fun_0¹ map_lh_₁(apply_subst_lh_₁(_lh_apply_subst_arg1¹), _lh_apply_subst_Fun_1¹) _lh_apply_subst_Fun_2¹]
//│ 	| _  => error⁰}
//│ def apply_subst_lh_₂(_lh_apply_subst_arg1⁰, _lh_apply_subst_arg2⁰) = case _lh_apply_subst_arg2⁰ of {
//│ 	Var _lh_apply_subst_Var_0⁰ => 
//│ 		let _lh_matchIdent⁴ = find_lh_₁(_lh_apply_subst_Var_0⁰, _lh_apply_subst_arg1⁰)
//│ 		in case _lh_matchIdent⁴ of {
//│ 			LH_P2 _lh_apply_subst_LH_P2_0⁰ _lh_apply_subst_LH_P2_1⁰ => if _lh_apply_subst_LH_P2_0⁰ then _lh_apply_subst_LH_P2_1⁰ else [Var _lh_apply_subst_Var_0⁰]}
//│ 	| Fun _lh_apply_subst_Fun_0⁰ _lh_apply_subst_Fun_1⁰ _lh_apply_subst_Fun_2⁰ => [Fun _lh_apply_subst_Fun_0⁰ map_lh_₂(apply_subst_lh_₂(_lh_apply_subst_arg1⁰), _lh_apply_subst_Fun_1⁰) _lh_apply_subst_Fun_2⁰]
//│ 	| _  => error⁰}
//│ def falsep_lh_₁(_lh_falsep_arg1¹, _lh_falsep_arg2¹) = case _lh_falsep_arg1¹ of {
//│ 	Fun _lh_falsep_Fun_0¹ _lh_falsep_Fun_1¹ _lh_falsep_Fun_2¹ => case _lh_falsep_Fun_0¹ of {
//│ 		FALSE  => [True]
//│ 		| _  => termInList_lh_₅(_lh_falsep_arg1¹, _lh_falsep_arg2¹)}
//│ 	| _  => termInList_lh_₆(_lh_falsep_arg1¹, _lh_falsep_arg2¹)}
//│ def falsep_lh_₂(_lh_falsep_arg1⁰, _lh_falsep_arg2⁰) = case _lh_falsep_arg1⁰ of {
//│ 	Fun _lh_falsep_Fun_0⁰ _lh_falsep_Fun_1⁰ _lh_falsep_Fun_2⁰ => case _lh_falsep_Fun_0⁰ of {
//│ 		FALSE  => [True]
//│ 		| _  => termInList_lh_₇(_lh_falsep_arg1⁰, _lh_falsep_arg2⁰)}
//│ 	| _  => termInList_lh_₈(_lh_falsep_arg1⁰, _lh_falsep_arg2⁰)}
//│ def find_lh_₁(_lh_find_arg1⁵, _lh_find_arg2⁰) = _lh_find_arg2⁰(_lh_find_arg1⁵)
//│ def map_lh_₁(f¹, ls¹) = case ls¹ of {
//│ 	LH_C h¹ t¹ => [LH_C f¹(h¹) map_lh_₁(f¹, t¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₂(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def one_way_unify1_lh_₁(_lh_one_way_unify1_arg1⁰, _lh_one_way_unify1_arg2⁰, _lh_one_way_unify1_arg3⁰) = case _lh_one_way_unify1_arg2⁰ of {
//│ 	Var _lh_one_way_unify1_Var_0⁰ => 
//│ 		let _lh_matchIdent¹ = find_lh_₁(_lh_one_way_unify1_Var_0⁰, _lh_one_way_unify1_arg3⁰)
//│ 		in case _lh_matchIdent¹ of {
//│ 			LH_P2 _lh_one_way_unify1_LH_P2_0⁰ _lh_one_way_unify1_LH_P2_1⁰ => if _lh_one_way_unify1_LH_P2_0⁰ then [LH_P2 termEq_lh_₈(_lh_one_way_unify1_arg1⁰, _lh_one_way_unify1_LH_P2_1⁰) _lh_one_way_unify1_arg3⁰] else [LH_P2 [True] 
//│ 				let _lh_find_LH_C_1⁰ = _lh_one_way_unify1_arg3⁰
//│ 				in let _lh_find_LH_C_0⁰ = 	
//│ 					let _lh_find_LH_P2_1⁰ = _lh_one_way_unify1_arg1⁰
//│ 					in let _lh_find_LH_P2_0⁰ = _lh_one_way_unify1_Var_0⁰
//│ 					in (fun _lh_find_LH_C_1¹ -> (fun _lh_find_arg1⁰ -> if polyEq⁰(_lh_find_arg1⁰, _lh_find_LH_P2_0⁰) then [LH_P2 [True] _lh_find_LH_P2_1⁰] else find_lh_₁(_lh_find_arg1⁰, _lh_find_LH_C_1¹)))
//│ 				in (fun _lh_find_arg1¹ -> _lh_find_LH_C_0⁰(_lh_find_LH_C_1⁰, _lh_find_arg1¹))]}
//│ 	| _  => case _lh_one_way_unify1_arg1⁰ of {
//│ 		Fun _lh_one_way_unify1_Fun_0⁰ _lh_one_way_unify1_Fun_1⁰ _lh_one_way_unify1_Fun_2⁰ => case _lh_one_way_unify1_arg2⁰ of {
//│ 			Fun _lh_one_way_unify1_Fun_0¹ _lh_one_way_unify1_Fun_1¹ _lh_one_way_unify1_Fun_2¹ => if polyEq⁰(_lh_one_way_unify1_Fun_0⁰, _lh_one_way_unify1_Fun_0¹) then one_way_unify1_lst_lh_₁(_lh_one_way_unify1_Fun_1⁰, _lh_one_way_unify1_Fun_1¹, _lh_one_way_unify1_arg3⁰) else [LH_P2 [False] (fun _lh_find_arg1² -> [LH_P2 [False] [ERROR]])]
//│ 			| _  => [LH_P2 [False] (fun _lh_find_arg1³ -> [LH_P2 [False] [ERROR]])]}
//│ 		| _  => [LH_P2 [False] (fun _lh_find_arg1⁴ -> [LH_P2 [False] [ERROR]])]}}
//│ def one_way_unify1_lst_lh_₁(_lh_one_way_unify1_lst_arg1⁰, _lh_one_way_unify1_lst_arg2⁰, _lh_one_way_unify1_lst_arg3⁰) = case _lh_one_way_unify1_lst_arg1⁰ of {
//│ 	LH_N  => case _lh_one_way_unify1_lst_arg2⁰ of {
//│ 		LH_N  => [LH_P2 [True] _lh_one_way_unify1_lst_arg3⁰]
//│ 		| _  => [LH_P2 [False] (fun _lh_find_arg1¹⁸ -> [LH_P2 [False] [ERROR]])]}
//│ 	| LH_C _lh_one_way_unify1_lst_LH_C_0⁰ _lh_one_way_unify1_lst_LH_C_1⁰ => case _lh_one_way_unify1_lst_arg2⁰ of {
//│ 		LH_C _lh_one_way_unify1_lst_LH_C_0¹ _lh_one_way_unify1_lst_LH_C_1¹ => 
//│ 			let _lh_matchIdent⁶ = one_way_unify1_lh_₁(_lh_one_way_unify1_lst_LH_C_0⁰, _lh_one_way_unify1_lst_LH_C_0¹, _lh_one_way_unify1_lst_arg3⁰)
//│ 			in case _lh_matchIdent⁶ of {
//│ 				LH_P2 _lh_one_way_unify1_lst_LH_P2_0⁰ _lh_one_way_unify1_lst_LH_P2_1⁰ => 
//│ 					let _lh_matchIdent⁷ = one_way_unify1_lst_lh_₁(_lh_one_way_unify1_lst_LH_C_1⁰, _lh_one_way_unify1_lst_LH_C_1¹, _lh_one_way_unify1_lst_LH_P2_1⁰)
//│ 					in case _lh_matchIdent⁷ of {
//│ 						LH_P2 _lh_one_way_unify1_lst_LH_P2_0¹ _lh_one_way_unify1_lst_LH_P2_1¹ => [LH_P2 (_lh_one_way_unify1_lst_LH_P2_0⁰ && _lh_one_way_unify1_lst_LH_P2_0¹) _lh_one_way_unify1_lst_LH_P2_1¹]}}
//│ 		| _  => [LH_P2 [False] (fun _lh_find_arg1¹⁹ -> [LH_P2 [False] [ERROR]])]}
//│ 	| _  => [LH_P2 [False] (fun _lh_find_arg1²⁰ -> [LH_P2 [False] [ERROR]])]}
//│ def one_way_unify_lh_₁(_lh_one_way_unify_arg1⁰, _lh_one_way_unify_arg2⁰) = one_way_unify1_lh_₁(_lh_one_way_unify_arg1⁰, _lh_one_way_unify_arg2⁰, (fun _lh_find_arg1⁶ -> [LH_P2 [False] [ERROR]]))
//│ def replicate_lh_₁(_lh_replicate_arg1⁰, _lh_replicate_arg2⁰, _lh_floatOutId_0⁰) = if (_lh_replicate_arg1⁰ == 0) then [True] else 
//│ 	let _lh_all_LH_C_1⁰ = replicate_lh_₁((_lh_replicate_arg1⁰ - 1), _lh_replicate_arg2⁰)
//│ 	in let _lh_all_LH_C_0⁰ = _lh_replicate_arg2⁰
//│ 	in if _lh_floatOutId_0⁰(_lh_all_LH_C_0⁰) then all_lh_₁(_lh_floatOutId_0⁰, _lh_all_LH_C_1⁰) else [False]
//│ def rewrite_lh_₁(_lh_rewrite_arg1⁰) = case _lh_rewrite_arg1⁰ of {
//│ 	Var _lh_rewrite_Var_0⁰ => [Var _lh_rewrite_Var_0⁰]
//│ 	| Fun _lh_rewrite_Fun_0⁰ _lh_rewrite_Fun_1⁰ _lh_rewrite_Fun_2⁰ => rewrite_with_lemmas_lh_₁([Fun _lh_rewrite_Fun_0⁰ map_lh_₂(rewrite_lh_₁, _lh_rewrite_Fun_1⁰) _lh_rewrite_Fun_2⁰], _lh_rewrite_Fun_2⁰)
//│ 	| _  => error⁰}
//│ def rewrite_with_lemmas_helper_lh_₁(_lh_rewrite_with_lemmas_helper_arg1⁰, _lh_rewrite_with_lemmas_helper_arg2⁰) = 
//│ 	let _lh_matchIdent² = _lh_rewrite_with_lemmas_helper_arg2⁰
//│ 	in case _lh_matchIdent² of {
//│ 		LH_N  => _lh_rewrite_with_lemmas_helper_arg1⁰
//│ 		| LH_C _lh_rewrite_with_lemmas_helper_LH_C_0⁰ _lh_rewrite_with_lemmas_helper_LH_C_1⁰ => case _lh_rewrite_with_lemmas_helper_LH_C_0⁰ of {
//│ 			LH_P2 _lh_rewrite_with_lemmas_helper_LH_P2_0⁰ _lh_rewrite_with_lemmas_helper_LH_P2_1⁰ => 
//│ 				let _lh_matchIdent³ = one_way_unify_lh_₁(_lh_rewrite_with_lemmas_helper_arg1⁰, _lh_rewrite_with_lemmas_helper_LH_P2_0⁰)
//│ 				in case _lh_matchIdent³ of {
//│ 					LH_P2 _lh_rewrite_with_lemmas_helper_LH_P2_0¹ _lh_rewrite_with_lemmas_helper_LH_P2_1¹ => if _lh_rewrite_with_lemmas_helper_LH_P2_0¹ then rewrite_lh_₁(apply_subst_lh_₂(_lh_rewrite_with_lemmas_helper_LH_P2_1¹, _lh_rewrite_with_lemmas_helper_LH_P2_1⁰)) else rewrite_with_lemmas_helper_lh_₁(_lh_rewrite_with_lemmas_helper_arg1⁰, _lh_rewrite_with_lemmas_helper_LH_C_1⁰)}}}
//│ def rewrite_with_lemmas_lh_₁(_lh_rewrite_with_lemmas_arg1⁰, _lh_rewrite_with_lemmas_arg2⁰) = rewrite_with_lemmas_helper_lh_₁(_lh_rewrite_with_lemmas_arg1⁰, force⁰(_lh_rewrite_with_lemmas_arg2⁰))
//│ def tautologyp_lh_₁(_lh_tautologyp_arg1⁰, _lh_tautologyp_arg2⁰, _lh_tautologyp_arg3⁰) = if truep_lh_₁(_lh_tautologyp_arg1⁰, _lh_tautologyp_arg2⁰) then [True] else if falsep_lh_₂(_lh_tautologyp_arg1⁰, _lh_tautologyp_arg3⁰) then [False] else 
//│ 	let _lh_matchIdent⁰ = _lh_tautologyp_arg1⁰
//│ 	in case _lh_matchIdent⁰ of {
//│ 		Fun _lh_tautologyp_Fun_0⁰ _lh_tautologyp_Fun_1⁰ _lh_tautologyp_Fun_2⁰ => case _lh_tautologyp_Fun_0⁰ of {
//│ 			IF  => case _lh_tautologyp_Fun_1⁰ of {
//│ 				LH_C _lh_tautologyp_LH_C_0⁰ _lh_tautologyp_LH_C_1⁰ => case _lh_tautologyp_LH_C_1⁰ of {
//│ 					LH_C _lh_tautologyp_LH_C_0¹ _lh_tautologyp_LH_C_1¹ => case _lh_tautologyp_LH_C_1¹ of {
//│ 						LH_C _lh_tautologyp_LH_C_0² _lh_tautologyp_LH_C_1² => case _lh_tautologyp_LH_C_1² of {
//│ 							LH_N  => if truep_lh_₂(_lh_tautologyp_LH_C_0⁰, _lh_tautologyp_arg2⁰) then tautologyp_lh_₁(_lh_tautologyp_LH_C_0¹, _lh_tautologyp_arg2⁰, _lh_tautologyp_arg3⁰) else if falsep_lh_₁(_lh_tautologyp_LH_C_0⁰, _lh_tautologyp_arg3⁰) then tautologyp_lh_₁(_lh_tautologyp_LH_C_0², _lh_tautologyp_arg2⁰, _lh_tautologyp_arg3⁰) else (tautologyp_lh_₁(_lh_tautologyp_LH_C_0¹, [LH_C _lh_tautologyp_LH_C_0⁰ _lh_tautologyp_arg2⁰], _lh_tautologyp_arg3⁰) && tautologyp_lh_₁(_lh_tautologyp_LH_C_0², _lh_tautologyp_arg2⁰, [LH_C _lh_tautologyp_LH_C_0⁰ _lh_tautologyp_arg3⁰]))
//│ 							| _  => [False]}
//│ 						| _  => [False]}
//│ 					| _  => [False]}
//│ 				| _  => [False]}
//│ 			| _  => [False]}
//│ 		| _  => [False]}
//│ def tautp_lh_₁(_lh_tautp_arg1⁰) = tautologyp_lh_₁(rewrite_lh_₁(_lh_tautp_arg1⁰), [LH_N], [LH_N])
//│ def termEq_lh_₁(_lh_termEq_arg1⁰, _lh_termEq_arg2⁰) = case _lh_termEq_arg1⁰ of {
//│ 	Var _lh_termEq_Var_0⁰ => case _lh_termEq_arg2⁰ of {
//│ 		Var _lh_termEq_Var_0¹ => polyEq⁰(_lh_termEq_Var_0⁰, _lh_termEq_Var_0¹)
//│ 		| _  => [False]}
//│ 	| Fun _lh_termEq_Fun_0⁰ _lh_termEq_Fun_1⁰ _lh_termEq_Fun_2⁰ => case _lh_termEq_arg2⁰ of {
//│ 		Fun _lh_termEq_Fun_0¹ _lh_termEq_Fun_1¹ _lh_termEq_Fun_2¹ => (polyEq⁰(_lh_termEq_Fun_0⁰, _lh_termEq_Fun_0¹) && termLsEq_lh_₁(_lh_termEq_Fun_1⁰, _lh_termEq_Fun_1¹))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termEq_lh_₂(_lh_termEq_arg1², _lh_termEq_arg2²) = case _lh_termEq_arg1² of {
//│ 	Var _lh_termEq_Var_0⁴ => case _lh_termEq_arg2² of {
//│ 		Var _lh_termEq_Var_0⁵ => polyEq⁰(_lh_termEq_Var_0⁴, _lh_termEq_Var_0⁵)
//│ 		| _  => [False]}
//│ 	| Fun _lh_termEq_Fun_0⁴ _lh_termEq_Fun_1⁴ _lh_termEq_Fun_2⁴ => case _lh_termEq_arg2² of {
//│ 		Fun _lh_termEq_Fun_0⁵ _lh_termEq_Fun_1⁵ _lh_termEq_Fun_2⁵ => (polyEq⁰(_lh_termEq_Fun_0⁴, _lh_termEq_Fun_0⁵) && termLsEq_lh_₂(_lh_termEq_Fun_1⁴, _lh_termEq_Fun_1⁵))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termEq_lh_₃(_lh_termEq_arg1⁶, _lh_termEq_arg2⁶) = case _lh_termEq_arg1⁶ of {
//│ 	Var _lh_termEq_Var_0¹² => case _lh_termEq_arg2⁶ of {
//│ 		Var _lh_termEq_Var_0¹³ => polyEq⁰(_lh_termEq_Var_0¹², _lh_termEq_Var_0¹³)
//│ 		| _  => [False]}
//│ 	| Fun _lh_termEq_Fun_0¹² _lh_termEq_Fun_1¹² _lh_termEq_Fun_2¹² => case _lh_termEq_arg2⁶ of {
//│ 		Fun _lh_termEq_Fun_0¹³ _lh_termEq_Fun_1¹³ _lh_termEq_Fun_2¹³ => (polyEq⁰(_lh_termEq_Fun_0¹², _lh_termEq_Fun_0¹³) && termLsEq_lh_₃(_lh_termEq_Fun_1¹², _lh_termEq_Fun_1¹³))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termEq_lh_₄(_lh_termEq_arg1⁴, _lh_termEq_arg2⁴) = case _lh_termEq_arg1⁴ of {
//│ 	Var _lh_termEq_Var_0⁸ => case _lh_termEq_arg2⁴ of {
//│ 		Var _lh_termEq_Var_0⁹ => polyEq⁰(_lh_termEq_Var_0⁸, _lh_termEq_Var_0⁹)
//│ 		| _  => [False]}
//│ 	| Fun _lh_termEq_Fun_0⁸ _lh_termEq_Fun_1⁸ _lh_termEq_Fun_2⁸ => case _lh_termEq_arg2⁴ of {
//│ 		Fun _lh_termEq_Fun_0⁹ _lh_termEq_Fun_1⁹ _lh_termEq_Fun_2⁹ => (polyEq⁰(_lh_termEq_Fun_0⁸, _lh_termEq_Fun_0⁹) && termLsEq_lh_₄(_lh_termEq_Fun_1⁸, _lh_termEq_Fun_1⁹))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termEq_lh_₅(_lh_termEq_arg1⁵, _lh_termEq_arg2⁵) = case _lh_termEq_arg1⁵ of {
//│ 	Var _lh_termEq_Var_0¹⁰ => case _lh_termEq_arg2⁵ of {
//│ 		Var _lh_termEq_Var_0¹¹ => polyEq⁰(_lh_termEq_Var_0¹⁰, _lh_termEq_Var_0¹¹)
//│ 		| _  => [False]}
//│ 	| Fun _lh_termEq_Fun_0¹⁰ _lh_termEq_Fun_1¹⁰ _lh_termEq_Fun_2¹⁰ => case _lh_termEq_arg2⁵ of {
//│ 		Fun _lh_termEq_Fun_0¹¹ _lh_termEq_Fun_1¹¹ _lh_termEq_Fun_2¹¹ => (polyEq⁰(_lh_termEq_Fun_0¹⁰, _lh_termEq_Fun_0¹¹) && termLsEq_lh_₅(_lh_termEq_Fun_1¹⁰, _lh_termEq_Fun_1¹¹))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termEq_lh_₆(_lh_termEq_arg1⁷, _lh_termEq_arg2⁷) = case _lh_termEq_arg1⁷ of {
//│ 	Var _lh_termEq_Var_0¹⁴ => case _lh_termEq_arg2⁷ of {
//│ 		Var _lh_termEq_Var_0¹⁵ => polyEq⁰(_lh_termEq_Var_0¹⁴, _lh_termEq_Var_0¹⁵)
//│ 		| _  => [False]}
//│ 	| Fun _lh_termEq_Fun_0¹⁴ _lh_termEq_Fun_1¹⁴ _lh_termEq_Fun_2¹⁴ => case _lh_termEq_arg2⁷ of {
//│ 		Fun _lh_termEq_Fun_0¹⁵ _lh_termEq_Fun_1¹⁵ _lh_termEq_Fun_2¹⁵ => (polyEq⁰(_lh_termEq_Fun_0¹⁴, _lh_termEq_Fun_0¹⁵) && termLsEq_lh_₆(_lh_termEq_Fun_1¹⁴, _lh_termEq_Fun_1¹⁵))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termEq_lh_₇(_lh_termEq_arg1³, _lh_termEq_arg2³) = case _lh_termEq_arg1³ of {
//│ 	Var _lh_termEq_Var_0⁶ => case _lh_termEq_arg2³ of {
//│ 		Var _lh_termEq_Var_0⁷ => polyEq⁰(_lh_termEq_Var_0⁶, _lh_termEq_Var_0⁷)
//│ 		| _  => [False]}
//│ 	| Fun _lh_termEq_Fun_0⁶ _lh_termEq_Fun_1⁶ _lh_termEq_Fun_2⁶ => case _lh_termEq_arg2³ of {
//│ 		Fun _lh_termEq_Fun_0⁷ _lh_termEq_Fun_1⁷ _lh_termEq_Fun_2⁷ => (polyEq⁰(_lh_termEq_Fun_0⁶, _lh_termEq_Fun_0⁷) && termLsEq_lh_₇(_lh_termEq_Fun_1⁶, _lh_termEq_Fun_1⁷))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termEq_lh_₈(_lh_termEq_arg1¹, _lh_termEq_arg2¹) = case _lh_termEq_arg1¹ of {
//│ 	Var _lh_termEq_Var_0² => case _lh_termEq_arg2¹ of {
//│ 		Var _lh_termEq_Var_0³ => polyEq⁰(_lh_termEq_Var_0², _lh_termEq_Var_0³)
//│ 		| _  => [False]}
//│ 	| Fun _lh_termEq_Fun_0² _lh_termEq_Fun_1² _lh_termEq_Fun_2² => case _lh_termEq_arg2¹ of {
//│ 		Fun _lh_termEq_Fun_0³ _lh_termEq_Fun_1³ _lh_termEq_Fun_2³ => (polyEq⁰(_lh_termEq_Fun_0², _lh_termEq_Fun_0³) && termLsEq_lh_₇(_lh_termEq_Fun_1², _lh_termEq_Fun_1³))
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termInList_lh_₁(_lh_termInList_arg1¹, _lh_termInList_arg2¹) = case _lh_termInList_arg2¹ of {
//│ 	LH_C _lh_termInList_LH_C_0¹ _lh_termInList_LH_C_1¹ => if termEq_lh_₁(_lh_termInList_arg1¹, _lh_termInList_LH_C_0¹) then [True] else termInList_lh_₁(_lh_termInList_arg1¹, _lh_termInList_LH_C_1¹)
//│ 	| LH_N  => [False]}
//│ def termInList_lh_₂(_lh_termInList_arg1⁷, _lh_termInList_arg2⁷) = case _lh_termInList_arg2⁷ of {
//│ 	LH_C _lh_termInList_LH_C_0⁷ _lh_termInList_LH_C_1⁷ => if termEq_lh_₂(_lh_termInList_arg1⁷, _lh_termInList_LH_C_0⁷) then [True] else termInList_lh_₂(_lh_termInList_arg1⁷, _lh_termInList_LH_C_1⁷)
//│ 	| LH_N  => [False]}
//│ def termInList_lh_₃(_lh_termInList_arg1⁶, _lh_termInList_arg2⁶) = case _lh_termInList_arg2⁶ of {
//│ 	LH_C _lh_termInList_LH_C_0⁶ _lh_termInList_LH_C_1⁶ => if termEq_lh_₃(_lh_termInList_arg1⁶, _lh_termInList_LH_C_0⁶) then [True] else termInList_lh_₃(_lh_termInList_arg1⁶, _lh_termInList_LH_C_1⁶)
//│ 	| LH_N  => [False]}
//│ def termInList_lh_₄(_lh_termInList_arg1², _lh_termInList_arg2²) = case _lh_termInList_arg2² of {
//│ 	LH_C _lh_termInList_LH_C_0² _lh_termInList_LH_C_1² => if termEq_lh_₄(_lh_termInList_arg1², _lh_termInList_LH_C_0²) then [True] else termInList_lh_₄(_lh_termInList_arg1², _lh_termInList_LH_C_1²)
//│ 	| LH_N  => [False]}
//│ def termInList_lh_₅(_lh_termInList_arg1⁵, _lh_termInList_arg2⁵) = case _lh_termInList_arg2⁵ of {
//│ 	LH_C _lh_termInList_LH_C_0⁵ _lh_termInList_LH_C_1⁵ => if termEq_lh_₅(_lh_termInList_arg1⁵, _lh_termInList_LH_C_0⁵) then [True] else termInList_lh_₅(_lh_termInList_arg1⁵, _lh_termInList_LH_C_1⁵)
//│ 	| LH_N  => [False]}
//│ def termInList_lh_₆(_lh_termInList_arg1⁴, _lh_termInList_arg2⁴) = case _lh_termInList_arg2⁴ of {
//│ 	LH_C _lh_termInList_LH_C_0⁴ _lh_termInList_LH_C_1⁴ => if termEq_lh_₆(_lh_termInList_arg1⁴, _lh_termInList_LH_C_0⁴) then [True] else termInList_lh_₆(_lh_termInList_arg1⁴, _lh_termInList_LH_C_1⁴)
//│ 	| LH_N  => [False]}
//│ def termInList_lh_₇(_lh_termInList_arg1³, _lh_termInList_arg2³) = case _lh_termInList_arg2³ of {
//│ 	LH_C _lh_termInList_LH_C_0³ _lh_termInList_LH_C_1³ => if termEq_lh_₇(_lh_termInList_arg1³, _lh_termInList_LH_C_0³) then [True] else termInList_lh_₇(_lh_termInList_arg1³, _lh_termInList_LH_C_1³)
//│ 	| LH_N  => [False]}
//│ def termInList_lh_₈(_lh_termInList_arg1⁰, _lh_termInList_arg2⁰) = case _lh_termInList_arg2⁰ of {
//│ 	LH_C _lh_termInList_LH_C_0⁰ _lh_termInList_LH_C_1⁰ => if termEq_lh_₈(_lh_termInList_arg1⁰, _lh_termInList_LH_C_0⁰) then [True] else termInList_lh_₈(_lh_termInList_arg1⁰, _lh_termInList_LH_C_1⁰)
//│ 	| LH_N  => [False]}
//│ def termLsEq_lh_₁(_lh_termLsEq_arg1¹, _lh_termLsEq_arg2¹) = case _lh_termLsEq_arg1¹ of {
//│ 	LH_C _lh_termLsEq_LH_C_0² _lh_termLsEq_LH_C_1² => case _lh_termLsEq_arg2¹ of {
//│ 		LH_C _lh_termLsEq_LH_C_0³ _lh_termLsEq_LH_C_1³ => if termEq_lh_₁(_lh_termLsEq_LH_C_0², _lh_termLsEq_LH_C_0³) then termLsEq_lh_₁(_lh_termLsEq_LH_C_1², _lh_termLsEq_LH_C_1³) else [False]
//│ 		| _  => [False]}
//│ 	| LH_N  => case _lh_termLsEq_arg2¹ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termLsEq_lh_₂(_lh_termLsEq_arg1⁴, _lh_termLsEq_arg2⁴) = case _lh_termLsEq_arg1⁴ of {
//│ 	LH_C _lh_termLsEq_LH_C_0⁸ _lh_termLsEq_LH_C_1⁸ => case _lh_termLsEq_arg2⁴ of {
//│ 		LH_C _lh_termLsEq_LH_C_0⁹ _lh_termLsEq_LH_C_1⁹ => if termEq_lh_₂(_lh_termLsEq_LH_C_0⁸, _lh_termLsEq_LH_C_0⁹) then termLsEq_lh_₂(_lh_termLsEq_LH_C_1⁸, _lh_termLsEq_LH_C_1⁹) else [False]
//│ 		| _  => [False]}
//│ 	| LH_N  => case _lh_termLsEq_arg2⁴ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termLsEq_lh_₃(_lh_termLsEq_arg1³, _lh_termLsEq_arg2³) = case _lh_termLsEq_arg1³ of {
//│ 	LH_C _lh_termLsEq_LH_C_0⁶ _lh_termLsEq_LH_C_1⁶ => case _lh_termLsEq_arg2³ of {
//│ 		LH_C _lh_termLsEq_LH_C_0⁷ _lh_termLsEq_LH_C_1⁷ => if termEq_lh_₃(_lh_termLsEq_LH_C_0⁶, _lh_termLsEq_LH_C_0⁷) then termLsEq_lh_₃(_lh_termLsEq_LH_C_1⁶, _lh_termLsEq_LH_C_1⁷) else [False]
//│ 		| _  => [False]}
//│ 	| LH_N  => case _lh_termLsEq_arg2³ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termLsEq_lh_₄(_lh_termLsEq_arg1⁶, _lh_termLsEq_arg2⁶) = case _lh_termLsEq_arg1⁶ of {
//│ 	LH_C _lh_termLsEq_LH_C_0¹² _lh_termLsEq_LH_C_1¹² => case _lh_termLsEq_arg2⁶ of {
//│ 		LH_C _lh_termLsEq_LH_C_0¹³ _lh_termLsEq_LH_C_1¹³ => if termEq_lh_₄(_lh_termLsEq_LH_C_0¹², _lh_termLsEq_LH_C_0¹³) then termLsEq_lh_₄(_lh_termLsEq_LH_C_1¹², _lh_termLsEq_LH_C_1¹³) else [False]
//│ 		| _  => [False]}
//│ 	| LH_N  => case _lh_termLsEq_arg2⁶ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termLsEq_lh_₅(_lh_termLsEq_arg1⁵, _lh_termLsEq_arg2⁵) = case _lh_termLsEq_arg1⁵ of {
//│ 	LH_C _lh_termLsEq_LH_C_0¹⁰ _lh_termLsEq_LH_C_1¹⁰ => case _lh_termLsEq_arg2⁵ of {
//│ 		LH_C _lh_termLsEq_LH_C_0¹¹ _lh_termLsEq_LH_C_1¹¹ => if termEq_lh_₅(_lh_termLsEq_LH_C_0¹⁰, _lh_termLsEq_LH_C_0¹¹) then termLsEq_lh_₅(_lh_termLsEq_LH_C_1¹⁰, _lh_termLsEq_LH_C_1¹¹) else [False]
//│ 		| _  => [False]}
//│ 	| LH_N  => case _lh_termLsEq_arg2⁵ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termLsEq_lh_₆(_lh_termLsEq_arg1², _lh_termLsEq_arg2²) = case _lh_termLsEq_arg1² of {
//│ 	LH_C _lh_termLsEq_LH_C_0⁴ _lh_termLsEq_LH_C_1⁴ => case _lh_termLsEq_arg2² of {
//│ 		LH_C _lh_termLsEq_LH_C_0⁵ _lh_termLsEq_LH_C_1⁵ => if termEq_lh_₆(_lh_termLsEq_LH_C_0⁴, _lh_termLsEq_LH_C_0⁵) then termLsEq_lh_₆(_lh_termLsEq_LH_C_1⁴, _lh_termLsEq_LH_C_1⁵) else [False]
//│ 		| _  => [False]}
//│ 	| LH_N  => case _lh_termLsEq_arg2² of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def termLsEq_lh_₇(_lh_termLsEq_arg1⁰, _lh_termLsEq_arg2⁰) = case _lh_termLsEq_arg1⁰ of {
//│ 	LH_C _lh_termLsEq_LH_C_0⁰ _lh_termLsEq_LH_C_1⁰ => case _lh_termLsEq_arg2⁰ of {
//│ 		LH_C _lh_termLsEq_LH_C_0¹ _lh_termLsEq_LH_C_1¹ => if termEq_lh_₇(_lh_termLsEq_LH_C_0⁰, _lh_termLsEq_LH_C_0¹) then termLsEq_lh_₇(_lh_termLsEq_LH_C_1⁰, _lh_termLsEq_LH_C_1¹) else [False]
//│ 		| _  => [False]}
//│ 	| LH_N  => case _lh_termLsEq_arg2⁰ of {
//│ 		LH_N  => [True]
//│ 		| _  => [False]}
//│ 	| _  => [False]}
//│ def test0_lh_₁(_lh_test0_arg1⁰) = 
//│ 	let boyerTrue⁰ = [Fun [TRUE] [LH_N] lazy⁰([LH_N])]
//│ 	and append⁰ = (fun _lh_append_arg1⁰ -> (fun _lh_append_arg2⁰ -> [Fun [APPEND] [LH_C _lh_append_arg1⁰ [LH_C _lh_append_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 append⁰(append⁰(x⁰, y⁰), z⁰) append⁰(x⁰, append⁰(y⁰, z⁰))] [LH_N]])]))
//│ 	and difference⁰ = (fun _lh_difference_arg1⁰ -> (fun _lh_difference_arg2⁰ -> [Fun [DIFFERENCE] [LH_C _lh_difference_arg1⁰ [LH_C _lh_difference_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 difference⁰(x⁰, x⁰) zero⁰] [LH_C [LH_P2 difference⁰(plus⁰(x⁰, y⁰), x⁰) y⁰] [LH_C [LH_P2 difference⁰(plus⁰(y⁰, x⁰), x⁰) y⁰] [LH_C [LH_P2 difference⁰(plus⁰(x⁰, y⁰), plus⁰(x⁰, z⁰)) difference⁰(y⁰, z⁰)] [LH_C [LH_P2 difference⁰(plus⁰(y⁰, plus⁰(x⁰, z⁰)), x⁰) plus⁰(y⁰, z⁰)] [LH_C [LH_P2 difference⁰(add1⁰(plus⁰(y⁰, z⁰)), z⁰) add1⁰(y⁰)] [LH_C [LH_P2 difference⁰(add1⁰(add1⁰(x⁰)), two⁰) x⁰] [LH_N]]]]]]]])]))
//│ 	and listp⁰ = (fun _lh_listp_arg1⁰ -> [Fun [LISTP] [LH_C _lh_listp_arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 listp⁰(x⁰) or_⁰(nilp⁰(x⁰), consp⁰(x⁰))] [LH_N]])])
//│ 	and iff⁰ = (fun _lh_iff_arg1⁰ -> (fun _lh_iff_arg2⁰ -> [Fun [IFF] [LH_C _lh_iff_arg1⁰ [LH_C _lh_iff_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 iff⁰(x⁰, y⁰) and_⁰(implies⁰(x⁰, y⁰), implies⁰(y⁰, x⁰))] [LH_N]])]))
//│ 	and z⁰ = [Var [Z]]
//│ 	and remainder⁰ = (fun _lh_remainder_arg1⁰ -> (fun _lh_remainder_arg2⁰ -> [Fun [REMAINDER] [LH_C _lh_remainder_arg1⁰ [LH_C _lh_remainder_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 remainder⁰(x⁰, one⁰) zero⁰] [LH_C [LH_P2 remainder⁰(x⁰, x⁰) zero⁰] [LH_C [LH_P2 remainder⁰(times⁰(x⁰, y⁰), x⁰) zero⁰] [LH_C [LH_P2 remainder⁰(times⁰(x⁰, y⁰), y⁰) zero⁰] [LH_N]]]]])]))
//│ 	and nlistp⁰ = (fun _lh_nlistp_arg1⁰ -> [Fun [NLISTP] [LH_C _lh_nlistp_arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 nlistp⁰(x⁰) not_⁰(listp⁰(x⁰))] [LH_N]])])
//│ 	and and_⁰ = (fun _lh_and__arg1⁰ -> (fun _lh_and__arg2⁰ -> [Fun [AND] [LH_C _lh_and__arg1⁰ [LH_C _lh_and__arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 and_⁰(x⁰, y⁰) if_⁰(x⁰, if_⁰(y⁰, boyerTrue⁰, boyerFalse⁰), boyerFalse⁰)] [LH_N]])]))
//│ 	and implies⁰ = (fun _lh_implies_arg1⁰ -> (fun _lh_implies_arg2⁰ -> [Fun [IMPLIES] [LH_C _lh_implies_arg1⁰ [LH_C _lh_implies_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 implies⁰(x⁰, y⁰) if_⁰(x⁰, if_⁰(y⁰, boyerTrue⁰, boyerFalse⁰), boyerTrue⁰)] [LH_N]])]))
//│ 	and equal⁰ = (fun _lh_equal_arg1⁰ -> (fun _lh_equal_arg2⁰ -> [Fun [EQUAL] [LH_C _lh_equal_arg1⁰ [LH_C _lh_equal_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 equal⁰(plus⁰(x⁰, y⁰), zero⁰) and_⁰(zerop⁰(x⁰), zerop⁰(y⁰))] [LH_C [LH_P2 equal⁰(plus⁰(x⁰, y⁰), plus⁰(x⁰, z⁰)) equal⁰(y⁰, z⁰)] [LH_C [LH_P2 equal⁰(zero⁰, difference⁰(x⁰, y⁰)) not_⁰(lessp⁰(y⁰, x⁰))] [LH_C [LH_P2 equal⁰(x⁰, difference⁰(x⁰, y⁰)) or_⁰(equal⁰(x⁰, zero⁰), zerop⁰(y⁰))] [LH_C [LH_P2 equal⁰(times⁰(x⁰, y⁰), zero⁰) or_⁰(zerop⁰(x⁰), zerop⁰(y⁰))] [LH_C [LH_P2 equal⁰(append⁰(x⁰, y⁰), append⁰(x⁰, z⁰)) equal⁰(y⁰, z⁰)] [LH_C [LH_P2 equal⁰(y⁰, times⁰(x⁰, y⁰)) or_⁰(equal⁰(y⁰, zero⁰), equal⁰(x⁰, one⁰))] [LH_C [LH_P2 equal⁰(x⁰, times⁰(x⁰, y⁰)) or_⁰(equal⁰(x⁰, zero⁰), equal⁰(y⁰, one⁰))] [LH_C [LH_P2 equal⁰(times⁰(x⁰, y⁰), one⁰) and_⁰(equal⁰(x⁰, one⁰), equal⁰(y⁰, one⁰))] [LH_C [LH_P2 equal⁰(difference⁰(x⁰, y⁰), difference⁰(z⁰, y⁰)) if_⁰(lessp⁰(x⁰, y⁰), not_⁰(lessp⁰(y⁰, z⁰)), if_⁰(lessp⁰(z⁰, y⁰), not_⁰(lessp⁰(y⁰, x⁰)), equal⁰(x⁰, z⁰)))] [LH_C [LH_P2 equal⁰(lessp⁰(x⁰, y⁰), z⁰) if_⁰(lessp⁰(x⁰, y⁰), equal⁰(boyerTrue⁰, z⁰), equal⁰(boyerFalse⁰, z⁰))] [LH_N]]]]]]]]]]]])]))
//│ 	and divides⁰ = (fun _lh_divides_arg1⁰ -> (fun _lh_divides_arg2⁰ -> [Fun [DIVIDES] [LH_C _lh_divides_arg1⁰ [LH_C _lh_divides_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 divides⁰(x⁰, y⁰) zerop⁰(remainder⁰(y⁰, x⁰))] [LH_N]])]))
//│ 	and b⁰ = [Var [B]]
//│ 	and lesseqp⁰ = (fun _lh_lesseqp_arg1⁰ -> (fun _lh_lesseqp_arg2⁰ -> [Fun [LESSEQP] [LH_C _lh_lesseqp_arg1⁰ [LH_C _lh_lesseqp_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 lesseqp⁰(x⁰, y⁰) not_⁰(lessp⁰(y⁰, x⁰))] [LH_N]])]))
//│ 	and exp_⁰ = (fun _lh_exp__arg1⁰ -> (fun _lh_exp__arg2⁰ -> [Fun [EXP] [LH_C _lh_exp__arg1⁰ [LH_C _lh_exp__arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 exp_⁰(x⁰, plus⁰(y⁰, z⁰)) times⁰(exp_⁰(x⁰, y⁰), exp_⁰(x⁰, z⁰))] [LH_C [LH_P2 exp_⁰(x⁰, times⁰(y⁰, z⁰)) exp_⁰(exp_⁰(x⁰, y⁰), z⁰)] [LH_N]]])]))
//│ 	and lessp⁰ = (fun _lh_lessp_arg1⁰ -> (fun _lh_lessp_arg2⁰ -> [Fun [LESSP] [LH_C _lh_lessp_arg1⁰ [LH_C _lh_lessp_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 lessp⁰(remainder⁰(x⁰, y⁰), y⁰) not_⁰(zerop⁰(y⁰))] [LH_C [LH_P2 lessp⁰(quotient⁰(x⁰, y⁰), x⁰) and_⁰(not_⁰(zerop⁰(x⁰)), lessp⁰(one⁰, y⁰))] [LH_C [LH_P2 lessp⁰(plus⁰(x⁰, y⁰), plus⁰(x⁰, z⁰)) lessp⁰(y⁰, z⁰)] [LH_C [LH_P2 lessp⁰(times⁰(x⁰, z⁰), times⁰(y⁰, z⁰)) and_⁰(not_⁰(zerop⁰(z⁰)), lessp⁰(x⁰, y⁰))] [LH_C [LH_P2 lessp⁰(y⁰, plus⁰(x⁰, y⁰)) not_⁰(zerop⁰(x⁰))] [LH_N]]]]]])]))
//│ 	and reverse_⁰ = (fun _lh_reverse__arg1⁰ -> [Fun [REVERSE] [LH_C _lh_reverse__arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 reverse_⁰(append⁰(x⁰, y⁰)) append⁰(reverse_⁰(y⁰), reverse_⁰(x⁰))] [LH_N]])])
//│ 	and zerop⁰ = (fun _lh_zerop_arg1⁰ -> [Fun [ZEROP] [LH_C _lh_zerop_arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 zerop⁰(x⁰) equal⁰(x⁰, zero⁰)] [LH_N]])])
//│ 	and zero⁰ = [Fun [ZERO] [LH_N] lazy⁰([LH_N])]
//│ 	and u⁰ = [Var [U]]
//│ 	and times⁰ = (fun _lh_times_arg1⁰ -> (fun _lh_times_arg2⁰ -> [Fun [TIMES] [LH_C _lh_times_arg1⁰ [LH_C _lh_times_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 times⁰(x⁰, plus⁰(y⁰, z⁰)) plus⁰(times⁰(x⁰, y⁰), times⁰(x⁰, z⁰))] [LH_C [LH_P2 times⁰(times⁰(x⁰, y⁰), z⁰) times⁰(x⁰, times⁰(y⁰, z⁰))] [LH_C [LH_P2 times⁰(x⁰, difference⁰(y⁰, z⁰)) difference⁰(times⁰(y⁰, x⁰), times⁰(z⁰, x⁰))] [LH_C [LH_P2 times⁰(x⁰, add1⁰(y⁰)) plus⁰(x⁰, times⁰(x⁰, y⁰))] [LH_N]]]]])]))
//│ 	and one⁰ = [Fun [ONE] [LH_N] lazy⁰([LH_C [LH_P2 one⁰ add1⁰(zero⁰)] [LH_N]])]
//│ 	and plus⁰ = (fun _lh_plus_arg1⁰ -> (fun _lh_plus_arg2⁰ -> [Fun [PLUS] [LH_C _lh_plus_arg1⁰ [LH_C _lh_plus_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 plus⁰(plus⁰(x⁰, y⁰), z⁰) plus⁰(x⁰, plus⁰(y⁰, z⁰))] [LH_C [LH_P2 plus⁰(remainder⁰(x⁰, y⁰), times⁰(y⁰, quotient⁰(x⁰, y⁰))) x⁰] [LH_C [LH_P2 plus⁰(x⁰, add1⁰(y⁰)) add1⁰(plus⁰(x⁰, y⁰))] [LH_N]]]])]))
//│ 	and a⁰ = [Var [A]]
//│ 	and if_⁰ = (fun _lh_if__arg1⁰ -> (fun _lh_if__arg2⁰ -> (fun _lh_if__arg3⁰ -> [Fun [IF] [LH_C _lh_if__arg1⁰ [LH_C _lh_if__arg2⁰ [LH_C _lh_if__arg3⁰ [LH_N]]]] lazy⁰([LH_C [LH_P2 if_⁰(if_⁰(x⁰, y⁰, z⁰), u⁰, w⁰) if_⁰(x⁰, if_⁰(y⁰, u⁰, w⁰), if_⁰(z⁰, u⁰, w⁰))] [LH_N]])])))
//│ 	and w⁰ = [Var [W]]
//│ 	and nil⁰ = [Fun [NIL] [LH_N] lazy⁰([LH_N])]
//│ 	and x⁰ = [Var [X]]
//│ 	and odd_⁰ = (fun _lh_odd__arg1⁰ -> [Fun [ODD] [LH_C _lh_odd__arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 odd_⁰(x⁰) even_⁰(sub1⁰(x⁰))] [LH_N]])])
//│ 	and y⁰ = [Var [Y]]
//│ 	and greatereqp⁰ = (fun _lh_greatereqp_arg1⁰ -> (fun _lh_greatereqp_arg2⁰ -> [Fun [GREATEREQP] [LH_C _lh_greatereqp_arg1⁰ [LH_C _lh_greatereqp_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 greatereqp⁰(x⁰, y⁰) not_⁰(lessp⁰(x⁰, y⁰))] [LH_N]])]))
//│ 	and not_⁰ = (fun _lh_not__arg1⁰ -> [Fun [NOT] [LH_C _lh_not__arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 not_⁰(x⁰) if_⁰(x⁰, boyerFalse⁰, boyerTrue⁰)] [LH_N]])])
//│ 	and member⁰ = (fun _lh_member_arg1⁰ -> (fun _lh_member_arg2⁰ -> [Fun [MEMBER] [LH_C _lh_member_arg1⁰ [LH_C _lh_member_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 member⁰(x⁰, append⁰(y⁰, z⁰)) or_⁰(member⁰(x⁰, y⁰), member⁰(x⁰, z⁰))] [LH_C [LH_P2 member⁰(x⁰, reverse_⁰(y⁰)) member⁰(x⁰, y⁰)] [LH_N]]])]))
//│ 	and d⁰ = [Var [D]]
//│ 	and c⁰ = [Var [C]]
//│ 	and consp⁰ = (fun _lh_consp_arg1⁰ -> [Fun [CONSP] [LH_C _lh_consp_arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 consp⁰(cons⁰(x⁰, y⁰)) boyerTrue⁰] [LH_N]])])
//│ 	and nilp⁰ = (fun _lh_nilp_arg1⁰ -> [Fun [NILP] [LH_C _lh_nilp_arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 nilp⁰(x⁰) equal⁰(x⁰, nil⁰)] [LH_N]])])
//│ 	and f² = (fun _lh_f_arg1⁰ -> [Fun [F] [LH_C _lh_f_arg1⁰ [LH_N]] lazy⁰([LH_N])])
//│ 	and two⁰ = [Fun [TWO] [LH_N] lazy⁰([LH_C [LH_P2 two⁰ add1⁰(one⁰)] [LH_N]])]
//│ 	and sub1⁰ = (fun _lh_sub1_arg1⁰ -> [Fun [SUB1] [LH_C _lh_sub1_arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 sub1⁰(add1⁰(x⁰)) x⁰] [LH_N]])])
//│ 	and add1⁰ = (fun _lh_add1_arg1⁰ -> [Fun [ADD1] [LH_C _lh_add1_arg1⁰ [LH_N]] lazy⁰([LH_N])])
//│ 	and greaterp⁰ = (fun _lh_greaterp_arg1⁰ -> (fun _lh_greaterp_arg2⁰ -> [Fun [GREATERP] [LH_C _lh_greaterp_arg1⁰ [LH_C _lh_greaterp_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 greaterp⁰(x⁰, y⁰) lessp⁰(y⁰, x⁰)] [LH_N]])]))
//│ 	and or_⁰ = (fun _lh_or__arg1⁰ -> (fun _lh_or__arg2⁰ -> [Fun [OR] [LH_C _lh_or__arg1⁰ [LH_C _lh_or__arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 or_⁰(x⁰, y⁰) if_⁰(x⁰, boyerTrue⁰, if_⁰(y⁰, boyerTrue⁰, boyerFalse⁰))] [LH_N]])]))
//│ 	and length_⁰ = (fun _lh_length__arg1⁰ -> [Fun [LENGTH] [LH_C _lh_length__arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 length_⁰(reverse_⁰(x⁰)) length_⁰(x⁰)] [LH_C [LH_P2 length_⁰(cons⁰(x⁰, cons⁰(y⁰, cons⁰(z⁰, cons⁰(u⁰, w⁰))))) plus⁰(four⁰, length_⁰(w⁰))] [LH_N]]])])
//│ 	and boyerFalse⁰ = [Fun [FALSE] [LH_N] lazy⁰([LH_N])]
//│ 	and four⁰ = [Fun [FOUR] [LH_N] lazy⁰([LH_C [LH_P2 four⁰ add1⁰(add1⁰(two⁰))] [LH_N]])]
//│ 	and cons⁰ = (fun _lh_cons_arg1⁰ -> (fun _lh_cons_arg2⁰ -> [Fun [CONS] [LH_C _lh_cons_arg1⁰ [LH_C _lh_cons_arg2⁰ [LH_N]]] lazy⁰([LH_N])]))
//│ 	and quotient⁰ = (fun _lh_quotient_arg1⁰ -> (fun _lh_quotient_arg2⁰ -> [Fun [QUOTIENT] [LH_C _lh_quotient_arg1⁰ [LH_C _lh_quotient_arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 quotient⁰(plus⁰(x⁰, plus⁰(x⁰, y⁰)), two⁰) plus⁰(x⁰, quotient⁰(y⁰, two⁰))] [LH_C [LH_P2 quotient⁰(times⁰(y⁰, x⁰), y⁰) if_⁰(zerop⁰(y⁰), zero⁰, x⁰)] [LH_N]]])]))
//│ 	and gcd_⁰ = (fun _lh_gcd__arg1⁰ -> (fun _lh_gcd__arg2⁰ -> [Fun [GCD] [LH_C _lh_gcd__arg1⁰ [LH_C _lh_gcd__arg2⁰ [LH_N]]] lazy⁰([LH_C [LH_P2 gcd_⁰(x⁰, y⁰) gcd_⁰(y⁰, x⁰)] [LH_C [LH_P2 gcd_⁰(times⁰(x⁰, z⁰), times⁰(y⁰, z⁰)) times⁰(z⁰, gcd_⁰(x⁰, y⁰))] [LH_N]]])]))
//│ 	and even_⁰ = (fun _lh_even__arg1⁰ -> [Fun [EVEN] [LH_C _lh_even__arg1⁰ [LH_N]] lazy⁰([LH_C [LH_P2 even_⁰(x⁰) if_⁰(zerop⁰(x⁰), boyerTrue⁰, odd_⁰(sub1⁰(x⁰)))] [LH_N]])]) 
//│ 	in let subst0⁰ = 	
//│ 		let _lh_find_LH_C_1² = 	
//│ 			let _lh_find_LH_C_1³ = 	
//│ 				let _lh_find_LH_C_1⁴ = 	
//│ 					let _lh_find_LH_C_1⁵ = 	
//│ 						let _lh_find_LH_C_1⁶ = (fun _lh_find_arg1⁷ -> [LH_P2 [False] [ERROR]])
//│ 						in let _lh_find_LH_C_0¹ = 	
//│ 							let _lh_find_LH_P2_1¹ = lessp⁰(remainder⁰(a⁰, b⁰), member⁰(a⁰, length_⁰(b⁰)))
//│ 							in let _lh_find_LH_P2_0¹ = [W]
//│ 							in (fun _lh_find_LH_C_1⁷ -> (fun _lh_find_arg1⁸ -> if polyEq⁰(_lh_find_arg1⁸, _lh_find_LH_P2_0¹) then [LH_P2 [True] _lh_find_LH_P2_1¹] else find_lh_₁(_lh_find_arg1⁸, _lh_find_LH_C_1⁷)))
//│ 						in (fun _lh_find_arg1⁹ -> _lh_find_LH_C_0¹(_lh_find_LH_C_1⁶, _lh_find_arg1⁹))
//│ 					in let _lh_find_LH_C_0² = 	
//│ 						let _lh_find_LH_P2_1² = equal⁰(plus⁰(a⁰, b⁰), difference⁰(x⁰, y⁰))
//│ 						in let _lh_find_LH_P2_0² = [U]
//│ 						in (fun _lh_find_LH_C_1⁸ -> (fun _lh_find_arg1¹⁰ -> if polyEq⁰(_lh_find_arg1¹⁰, _lh_find_LH_P2_0²) then [LH_P2 [True] _lh_find_LH_P2_1²] else find_lh_₁(_lh_find_arg1¹⁰, _lh_find_LH_C_1⁸)))
//│ 					in (fun _lh_find_arg1¹¹ -> _lh_find_LH_C_0²(_lh_find_LH_C_1⁵, _lh_find_arg1¹¹))
//│ 				in let _lh_find_LH_C_0³ = 	
//│ 					let _lh_find_LH_P2_1³ = f²(reverse_⁰(append⁰(append⁰(a⁰, b⁰), nil⁰)))
//│ 					in let _lh_find_LH_P2_0³ = [Z]
//│ 					in (fun _lh_find_LH_C_1⁹ -> (fun _lh_find_arg1¹² -> if polyEq⁰(_lh_find_arg1¹², _lh_find_LH_P2_0³) then [LH_P2 [True] _lh_find_LH_P2_1³] else find_lh_₁(_lh_find_arg1¹², _lh_find_LH_C_1⁹)))
//│ 				in (fun _lh_find_arg1¹³ -> _lh_find_LH_C_0³(_lh_find_LH_C_1⁴, _lh_find_arg1¹³))
//│ 			in let _lh_find_LH_C_0⁴ = 	
//│ 				let _lh_find_LH_P2_1⁴ = f²(times⁰(times⁰(a⁰, b⁰), plus⁰(c⁰, d⁰)))
//│ 				in let _lh_find_LH_P2_0⁴ = [Y]
//│ 				in (fun _lh_find_LH_C_1¹⁰ -> (fun _lh_find_arg1¹⁴ -> if polyEq⁰(_lh_find_arg1¹⁴, _lh_find_LH_P2_0⁴) then [LH_P2 [True] _lh_find_LH_P2_1⁴] else find_lh_₁(_lh_find_arg1¹⁴, _lh_find_LH_C_1¹⁰)))
//│ 			in (fun _lh_find_arg1¹⁵ -> _lh_find_LH_C_0⁴(_lh_find_LH_C_1³, _lh_find_arg1¹⁵))
//│ 		in let _lh_find_LH_C_0⁵ = 	
//│ 			let _lh_find_LH_P2_1⁵ = f²(plus⁰(plus⁰(a⁰, b⁰), plus⁰(c⁰, zero⁰)))
//│ 			in let _lh_find_LH_P2_0⁵ = [X]
//│ 			in (fun _lh_find_LH_C_1¹¹ -> (fun _lh_find_arg1¹⁶ -> if polyEq⁰(_lh_find_arg1¹⁶, _lh_find_LH_P2_0⁵) then [LH_P2 [True] _lh_find_LH_P2_1⁵] else find_lh_₁(_lh_find_arg1¹⁶, _lh_find_LH_C_1¹¹)))
//│ 		in (fun _lh_find_arg1¹⁷ -> _lh_find_LH_C_0⁵(_lh_find_LH_C_1², _lh_find_arg1¹⁷))
//│ 	in let theorem⁰ = implies⁰(and_⁰(implies⁰(_lh_test0_arg1⁰, y⁰), and_⁰(implies⁰(y⁰, z⁰), and_⁰(implies⁰(z⁰, u⁰), implies⁰(u⁰, w⁰)))), implies⁰(x⁰, w⁰))
//│ 	in tautp_lh_₁(apply_subst_lh_₁(subst0⁰, theorem⁰))
//│ def testBoyer_nofib_lh_₁(_lh_testBoyer_nofib_arg1⁰) = all_lh_₁(test0_lh_₁, replicate_lh_₁(_lh_testBoyer_nofib_arg1⁰, [Var [X]]))
//│ def truep_lh_₁(_lh_truep_arg1¹, _lh_truep_arg2¹) = case _lh_truep_arg1¹ of {
//│ 	Fun _lh_truep_Fun_0¹ _lh_truep_Fun_1¹ _lh_truep_Fun_2¹ => case _lh_truep_Fun_0¹ of {
//│ 		TRUE  => [True]
//│ 		| _  => termInList_lh_₂(_lh_truep_arg1¹, _lh_truep_arg2¹)}
//│ 	| _  => termInList_lh_₁(_lh_truep_arg1¹, _lh_truep_arg2¹)}
//│ def truep_lh_₂(_lh_truep_arg1⁰, _lh_truep_arg2⁰) = case _lh_truep_arg1⁰ of {
//│ 	Fun _lh_truep_Fun_0⁰ _lh_truep_Fun_1⁰ _lh_truep_Fun_2⁰ => case _lh_truep_Fun_0⁰ of {
//│ 		TRUE  => [True]
//│ 		| _  => termInList_lh_₄(_lh_truep_arg1⁰, _lh_truep_arg2⁰)}
//│ 	| _  => termInList_lh_₃(_lh_truep_arg1⁰, _lh_truep_arg2⁰)}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


