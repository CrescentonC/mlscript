:NewParser
:ParseOnly

:lhInHaskell
:lhGenOCaml
myMax a b = if polyGt a b then a else b
data Complex a = Complex a a deriving (Eq, Show)
comp_magnitude (Complex a b) = (a *. a) +. (b *. b)
comp_times (Complex a b) (Complex c d) = Complex ((a *. c) -. (b *. d)) ((a *. d) +. (b *. c))
comp_plus (Complex a b) (Complex c d) = Complex (a +. c) (b +. d)
mandel c = 
  let infiniteMandel = lazy (c : (map_lz (\z -> comp_plus (comp_times z z) c) (infiniteMandel))) in
  infiniteMandel
whenDiverge::  Int -> Double -> Complex Double -> Int
whenDiverge limit radius c =
  let walkIt = \ls -> case ls of { [] -> 0; (x:xs) -> if (diverge x radius) then 0 else 1 + (walkIt xs) } in
  walkIt (take_lz limit (mandel c))
-- VERY IMPORTANT FUNCTION: sits in inner loop
diverge::Complex Double -> Double -> Bool
diverge cmplx radius = polyGt (comp_magnitude cmplx) radius
parallelMandel:: [Complex Double] -> Int -> Double -> [Int]
parallelMandel mat limit radius = map (whenDiverge limit radius) mat
-- mandelset::Double -> 			-- Minimum X viewport
-- 	         Double -> 			-- Minimum Y viewport
-- 	         Double -> 			-- Maximum X viewport
-- 	         Double ->			-- maximum Y viewport
-- 	         Integer -> 			-- Window width
-- 	         Integer -> 			-- Window height
-- 	         Int -> 			-- Window depth
-- 	         PixMap			-- result pixmap
mandelset x y x' y' screenX screenY lIMIT =
  let prettyRGB = (\s -> let t = (lIMIT - s) in (s,t,t)) in
  let windowToViewport = \s -> \t -> (Complex (x +. (((float_of_int s) *. (x' -. x)) /. (float_of_int screenX))) (y +. (((float_of_int t) *. (y' -. y)) /. (float_of_int screenY)))) in
  let result = parallelMandel [windowToViewport s t | t <- [1..screenY] , s<-[1..screenX]] lIMIT ((myMax (x'-.x) (y'-.y)) /. 2.0) in
  createPixmap screenX screenY lIMIT (map prettyRGB result)
data PixMap = Pixmap Integer Integer Int [(Int,Int,Int)] deriving Show
createPixmap::Integer -> Integer -> Int -> [(Int,Int,Int)] -> PixMap
createPixmap width height max colours = Pixmap width height max colours
testMandel_nofib dummy =
  let minx = 0.0 -. 2.0 in
  let miny = 0.0 -. 2.0 in
  let maxx = 2.0 in
  let maxy = 2.0 in
  let screenX = 80 in
  let screenY = 80 in
  let limit = 75 in
  mandelset minx miny maxx maxy screenX screenY limit
testMandel_nofib $ primId 0
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMandel_nofib_lh^418(primId⁰(0))
//│ def comp_magnitude_lh(_lh_comp_magnitude_arg1⁰) = case _lh_comp_magnitude_arg1⁰ of {
//│ 	Complex _lh_comp_magnitude_Complex_0⁰ _lh_comp_magnitude_Complex_1⁰ => ((_lh_comp_magnitude_Complex_0⁰ *. _lh_comp_magnitude_Complex_0⁰) +. (_lh_comp_magnitude_Complex_1⁰ *. _lh_comp_magnitude_Complex_1⁰))
//│ 	| _  => error⁰}
//│ def comp_plus_lh(_lh_comp_plus_arg1⁰, _lh_comp_plus_arg2⁰) = case _lh_comp_plus_arg1⁰ of {
//│ 	Complex _lh_comp_plus_Complex_0⁰ _lh_comp_plus_Complex_1⁰ => case _lh_comp_plus_arg2⁰ of {
//│ 		Complex _lh_comp_plus_Complex_0¹ _lh_comp_plus_Complex_1¹ => [Complex (_lh_comp_plus_Complex_0⁰ +. _lh_comp_plus_Complex_0¹) (_lh_comp_plus_Complex_1⁰ +. _lh_comp_plus_Complex_1¹)]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def comp_times_lh(_lh_comp_times_arg1⁰, _lh_comp_times_arg2⁰) = case _lh_comp_times_arg1⁰ of {
//│ 	Complex _lh_comp_times_Complex_0⁰ _lh_comp_times_Complex_1⁰ => case _lh_comp_times_arg2⁰ of {
//│ 		Complex _lh_comp_times_Complex_0¹ _lh_comp_times_Complex_1¹ => [Complex ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_0¹) -. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_1¹)) ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_1¹) +. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_0¹))]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def createPixmap_lh(_lh_createPixmap_arg1⁰, _lh_createPixmap_arg2⁰, _lh_createPixmap_arg3⁰, _lh_createPixmap_arg4⁰) = [Pixmap _lh_createPixmap_arg1⁰ _lh_createPixmap_arg2⁰ _lh_createPixmap_arg3⁰ _lh_createPixmap_arg4⁰]
//│ def diverge_lh(_lh_diverge_arg1⁰, _lh_diverge_arg2⁰) = polyGt⁰(comp_magnitude_lh^79(_lh_diverge_arg1⁰), _lh_diverge_arg2⁰)
//│ def enumFromTo_lh(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh^39((a⁰ + 1), b⁰)] else [LH_N]
//│ def mandel_lh(_lh_mandel_arg1⁰) = 
//│ 	let infiniteMandel⁰ = lazy⁰([LH_C _lh_mandel_arg1⁰ map_lz_lh^334((fun z⁰ -> comp_plus_lh^335(comp_times_lh^336(z⁰, z⁰), _lh_mandel_arg1⁰)), infiniteMandel⁰)])
//│ 	in infiniteMandel⁰
//│ def mandelset_lh(_lh_mandelset_arg1⁰, _lh_mandelset_arg2⁰, _lh_mandelset_arg3⁰, _lh_mandelset_arg4⁰, _lh_mandelset_arg5⁰, _lh_mandelset_arg6⁰, _lh_mandelset_arg7⁰) = 
//│ 	let prettyRGB⁰ = (fun s⁰ -> 
//│ 		let t³ = (_lh_mandelset_arg7⁰ - s⁰)
//│ 		in [LH_P3 s⁰ t³ t³])
//│ 	in let windowToViewport⁰ = (fun s¹ -> (fun t⁴ -> [Complex (_lh_mandelset_arg1⁰ +. ((float_of_int⁰(s¹) *. (_lh_mandelset_arg3⁰ -. _lh_mandelset_arg1⁰)) /. float_of_int⁰(_lh_mandelset_arg5⁰))) (_lh_mandelset_arg2⁰ +. ((float_of_int⁰(t⁴) *. (_lh_mandelset_arg4⁰ -. _lh_mandelset_arg2⁰)) /. float_of_int⁰(_lh_mandelset_arg6⁰)))]))
//│ 	in let result⁰ = parallelMandel_lh^197(
//│ 		let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 				let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 					LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C windowToViewport⁰(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h⁰) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 					| LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ 				in _lh_listcomp_fun¹(enumFromTo_lh^215(1, _lh_mandelset_arg5⁰))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁰(enumFromTo_lh^226(1, _lh_mandelset_arg6⁰)), _lh_mandelset_arg7⁰, (myMax_lh^237((_lh_mandelset_arg3⁰ -. _lh_mandelset_arg1⁰), (_lh_mandelset_arg4⁰ -. _lh_mandelset_arg2⁰)) /. 2.0))
//│ 	in createPixmap_lh^254(_lh_mandelset_arg5⁰, _lh_mandelset_arg6⁰, _lh_mandelset_arg7⁰, map_lh^261(prettyRGB⁰, result⁰))
//│ def map_lh(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh^5(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lz_lh(f¹, ls¹) = lazy⁰(case force⁰(ls¹) of {
//│ 	LH_C h¹ t¹ => [LH_C f¹(h¹) map_lz_lh^22(f¹, t¹)]
//│ 	| LH_N  => [LH_N]})
//│ def myMax_lh(_lh_myMax_arg1⁰, _lh_myMax_arg2⁰) = if polyGt⁰(_lh_myMax_arg1⁰, _lh_myMax_arg2⁰) then _lh_myMax_arg1⁰ else _lh_myMax_arg2⁰
//│ def parallelMandel_lh(_lh_parallelMandel_arg1⁰, _lh_parallelMandel_arg2⁰, _lh_parallelMandel_arg3⁰) = map_lh^311(whenDiverge_lh^312(_lh_parallelMandel_arg2⁰, _lh_parallelMandel_arg3⁰), _lh_parallelMandel_arg1⁰)
//│ def take_lz_lh(n⁰, ls²) = if (n⁰ > 0) then case force⁰(ls²) of {
//│ 	LH_C h² t² => [LH_C h² take_lz_lh^62((n⁰ - 1), t²)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testMandel_nofib_lh(_lh_testMandel_nofib_arg1⁰) = 
//│ 	let minx⁰ = (0.0 -. 2.0)
//│ 	in let miny⁰ = (0.0 -. 2.0)
//│ 	in let maxx⁰ = 2.0
//│ 	in let maxy⁰ = 2.0
//│ 	in let screenX⁰ = 80
//│ 	in let screenY⁰ = 80
//│ 	in let limit⁰ = 75
//│ 	in mandelset_lh^395(minx⁰, miny⁰, maxx⁰, maxy⁰, screenX⁰, screenY⁰, limit⁰)
//│ def whenDiverge_lh(_lh_whenDiverge_arg1⁰, _lh_whenDiverge_arg2⁰, _lh_whenDiverge_arg3⁰) = 
//│ 	let walkIt⁰ = (fun ls³ -> 
//│ 		let _lh_matchIdent⁰ = ls³
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_N  => 0
//│ 			| LH_C _lh_whenDiverge_LH_C_0⁰ _lh_whenDiverge_LH_C_1⁰ => if diverge_lh^280(_lh_whenDiverge_LH_C_0⁰, _lh_whenDiverge_arg2⁰) then 0 else (1 + walkIt⁰(_lh_whenDiverge_LH_C_1⁰))
//│ 			| _  => error⁰})
//│ 	in walkIt⁰(take_lz_lh^299(_lh_whenDiverge_arg1⁰, mandel_lh^302(_lh_whenDiverge_arg3⁰)))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromTo_lh a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec map_lh f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C((f_0 h_0), ((map_lh f_0) t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec take_lz_lh n_0 ls_2 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match (Lazy.force ls_2) with
//│ 		      | `LH_C(h_2, t_2) -> 
//│ 		        (`LH_C(h_2, ((take_lz_lh (n_0 - 1)) t_2)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec comp_plus_lh _lh_comp_plus_arg1_0 _lh_comp_plus_arg2_0 =
//│ 		  (match _lh_comp_plus_arg1_0 with
//│ 		    | `Complex(_lh_comp_plus_Complex_0_0, _lh_comp_plus_Complex_1_0) -> 
//│ 		      (match _lh_comp_plus_arg2_0 with
//│ 		        | `Complex(_lh_comp_plus_Complex_0_1, _lh_comp_plus_Complex_1_1) -> 
//│ 		          (`Complex((_lh_comp_plus_Complex_0_0 +. _lh_comp_plus_Complex_0_1), (_lh_comp_plus_Complex_1_0 +. _lh_comp_plus_Complex_1_1)))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec map_lz_lh f_1 ls_1 =
//│ 		  (lazy (match (Lazy.force ls_1) with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (`LH_C((f_1 h_1), ((map_lz_lh f_1) t_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec comp_times_lh _lh_comp_times_arg1_0 _lh_comp_times_arg2_0 =
//│ 		  (match _lh_comp_times_arg1_0 with
//│ 		    | `Complex(_lh_comp_times_Complex_0_0, _lh_comp_times_Complex_1_0) -> 
//│ 		      (match _lh_comp_times_arg2_0 with
//│ 		        | `Complex(_lh_comp_times_Complex_0_1, _lh_comp_times_Complex_1_1) -> 
//│ 		          (`Complex(((_lh_comp_times_Complex_0_0 *. _lh_comp_times_Complex_0_1) -. (_lh_comp_times_Complex_1_0 *. _lh_comp_times_Complex_1_1)), ((_lh_comp_times_Complex_0_0 *. _lh_comp_times_Complex_1_1) +. (_lh_comp_times_Complex_1_0 *. _lh_comp_times_Complex_0_1))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec comp_magnitude_lh _lh_comp_magnitude_arg1_0 =
//│ 		  (match _lh_comp_magnitude_arg1_0 with
//│ 		    | `Complex(_lh_comp_magnitude_Complex_0_0, _lh_comp_magnitude_Complex_1_0) -> 
//│ 		      ((_lh_comp_magnitude_Complex_0_0 *. _lh_comp_magnitude_Complex_0_0) +. (_lh_comp_magnitude_Complex_1_0 *. _lh_comp_magnitude_Complex_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec createPixmap_lh _lh_createPixmap_arg1_0 _lh_createPixmap_arg2_0 _lh_createPixmap_arg3_0 _lh_createPixmap_arg4_0 =
//│ 		  (`Pixmap(_lh_createPixmap_arg1_0, _lh_createPixmap_arg2_0, _lh_createPixmap_arg3_0, _lh_createPixmap_arg4_0));;
//│ 		let rec myMax_lh _lh_myMax_arg1_0 _lh_myMax_arg2_0 =
//│ 		  (if (_lh_myMax_arg1_0 > _lh_myMax_arg2_0) then
//│ 		    _lh_myMax_arg1_0
//│ 		  else
//│ 		    _lh_myMax_arg2_0);;
//│ 		let rec mandel_lh _lh_mandel_arg1_0 =
//│ 		  (let rec infiniteMandel_0 = (lazy (`LH_C(_lh_mandel_arg1_0, ((map_lz_lh (fun z_0 -> 
//│ 		    ((comp_plus_lh ((comp_times_lh z_0) z_0)) _lh_mandel_arg1_0))) infiniteMandel_0)))) in
//│ 		    infiniteMandel_0);;
//│ 		let rec diverge_lh _lh_diverge_arg1_0 _lh_diverge_arg2_0 =
//│ 		  ((comp_magnitude_lh _lh_diverge_arg1_0) > _lh_diverge_arg2_0);;
//│ 		let rec whenDiverge_lh _lh_whenDiverge_arg1_0 _lh_whenDiverge_arg2_0 _lh_whenDiverge_arg3_0 =
//│ 		  (let rec walkIt_0 = (fun ls_3 -> 
//│ 		    (let rec _lh_matchIdent_0 = ls_3 in
//│ 		      (match _lh_matchIdent_0 with
//│ 		        | `LH_N -> 
//│ 		          0
//│ 		        | `LH_C(_lh_whenDiverge_LH_C_0_0, _lh_whenDiverge_LH_C_1_0) -> 
//│ 		          (if ((diverge_lh _lh_whenDiverge_LH_C_0_0) _lh_whenDiverge_arg2_0) then
//│ 		            0
//│ 		          else
//│ 		            (1 + (walkIt_0 _lh_whenDiverge_LH_C_1_0)))
//│ 		        | _ -> 
//│ 		          (failwith "error")))) in
//│ 		    (walkIt_0 ((take_lz_lh _lh_whenDiverge_arg1_0) (mandel_lh _lh_whenDiverge_arg3_0))));;
//│ 		let rec parallelMandel_lh _lh_parallelMandel_arg1_0 _lh_parallelMandel_arg2_0 _lh_parallelMandel_arg3_0 =
//│ 		  ((map_lh ((whenDiverge_lh _lh_parallelMandel_arg2_0) _lh_parallelMandel_arg3_0)) _lh_parallelMandel_arg1_0);;
//│ 		let rec mandelset_lh _lh_mandelset_arg1_0 _lh_mandelset_arg2_0 _lh_mandelset_arg3_0 _lh_mandelset_arg4_0 _lh_mandelset_arg5_0 _lh_mandelset_arg6_0 _lh_mandelset_arg7_0 =
//│ 		  (let rec prettyRGB_0 = (fun s_0 -> 
//│ 		    (let rec t_3 = (_lh_mandelset_arg7_0 - s_0) in
//│ 		      (`LH_P3(s_0, t_3, t_3)))) in
//│ 		    (let rec windowToViewport_0 = (fun s_1 t_4 -> 
//│ 		      (`Complex((_lh_mandelset_arg1_0 +. (((float_of_int s_1) *. (_lh_mandelset_arg3_0 -. _lh_mandelset_arg1_0)) /. (float_of_int _lh_mandelset_arg5_0))), (_lh_mandelset_arg2_0 +. (((float_of_int t_4) *. (_lh_mandelset_arg4_0 -. _lh_mandelset_arg2_0)) /. (float_of_int _lh_mandelset_arg6_0)))))) in
//│ 		      (let rec result_0 = (((parallelMandel_lh (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		        (match _lh_listcomp_fun_para_0 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		            (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		              (match _lh_listcomp_fun_para_1 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		                  (`LH_C(((windowToViewport_0 _lh_listcomp_fun_ls_h_1) _lh_listcomp_fun_ls_h_0), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		                | `LH_N -> 
//│ 		                  (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))) in
//│ 		              (_lh_listcomp_fun_1 ((enumFromTo_lh 1) _lh_mandelset_arg5_0)))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_0 ((enumFromTo_lh 1) _lh_mandelset_arg6_0)))) _lh_mandelset_arg7_0) (((myMax_lh (_lh_mandelset_arg3_0 -. _lh_mandelset_arg1_0)) (_lh_mandelset_arg4_0 -. _lh_mandelset_arg2_0)) /. 2.0)) in
//│ 		        ((((createPixmap_lh _lh_mandelset_arg5_0) _lh_mandelset_arg6_0) _lh_mandelset_arg7_0) ((map_lh prettyRGB_0) result_0)))));;
//│ 		let rec testMandel_nofib_lh _lh_testMandel_nofib_arg1_0 =
//│ 		  (let rec minx_0 = (0.0 -. 2.0) in
//│ 		    (let rec miny_0 = (0.0 -. 2.0) in
//│ 		      (let rec maxx_0 = 2.0 in
//│ 		        (let rec maxy_0 = 2.0 in
//│ 		          (let rec screenX_0 = 80 in
//│ 		            (let rec screenY_0 = 80 in
//│ 		              (let rec limit_0 = 75 in
//│ 		                (((((((mandelset_lh minx_0) miny_0) maxx_0) maxy_0) screenX_0) screenY_0) limit_0))))))));;
//│ 		(testMandel_nofib_lh 0)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10 --->
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_N]: 11 --->
//│ 	NoCons
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_C f¹(h¹) map_lz_lh(f¹, t¹)]: 27 --->
//│ 	case force⁰(ls¹) of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lz_lh(f¹, t¹)] | LH_N  => [LH_N]}: 29
//│ 	case force⁰(ls²) of {LH_C h² t² => [LH_C h² take_lz_lh((n⁰ - 1), t²)] | LH_N  => [LH_N]}: 73
//│ [LH_N]: 28 --->
//│ 	case force⁰(ls¹) of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lz_lh(f¹, t¹)] | LH_N  => [LH_N]}: 29
//│ 	case force⁰(ls²) of {LH_C h² t² => [LH_C h² take_lz_lh((n⁰ - 1), t²)] | LH_N  => [LH_N]}: 73
//│ [LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 48 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C windowToViewport⁰(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h⁰) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 212
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C windowToViewport⁰(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h⁰) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(1, _lh_mandelset_arg5⁰)) | LH_N  => [LH_N]}: 223
//│ [LH_N]: 49 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C windowToViewport⁰(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h⁰) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 212
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C windowToViewport⁰(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h⁰) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(1, _lh_mandelset_arg5⁰)) | LH_N  => [LH_N]}: 223
//│ [LH_C h² take_lz_lh((n⁰ - 1), t²)]: 71 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0⁰ _lh_whenDiverge_LH_C_1⁰ => if diverge_lh(_lh_whenDiverge_LH_C_0⁰, _lh_whenDiverge_arg2⁰) then 0 else (1 + walkIt⁰(_lh_whenDiverge_LH_C_1⁰)) | _  => error⁰}: 295
//│ [LH_N]: 72 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0⁰ _lh_whenDiverge_LH_C_1⁰ => if diverge_lh(_lh_whenDiverge_LH_C_0⁰, _lh_whenDiverge_arg2⁰) then 0 else (1 + walkIt⁰(_lh_whenDiverge_LH_C_1⁰)) | _  => error⁰}: 295
//│ [LH_N]: 74 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0⁰ _lh_whenDiverge_LH_C_1⁰ => if diverge_lh(_lh_whenDiverge_LH_C_0⁰, _lh_whenDiverge_arg2⁰) then 0 else (1 + walkIt⁰(_lh_whenDiverge_LH_C_1⁰)) | _  => error⁰}: 295
//│ [Complex ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_0¹) -. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_1¹)) ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_1¹) +. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_0¹))]: 115 --->
//│ 	case _lh_comp_plus_arg1⁰ of {Complex _lh_comp_plus_Complex_0⁰ _lh_comp_plus_Complex_1⁰ => case _lh_comp_plus_arg2⁰ of {Complex _lh_comp_plus_Complex_0¹ _lh_comp_plus_Complex_1¹ => [Complex (_lh_comp_plus_Complex_0⁰ +. _lh_comp_plus_Complex_0¹) (_lh_comp_plus_Complex_1⁰ +. _lh_comp_plus_Complex_1¹)] | _  => error⁰} | _  => error⁰}: 138
//│ [Complex (_lh_comp_plus_Complex_0⁰ +. _lh_comp_plus_Complex_0¹) (_lh_comp_plus_Complex_1⁰ +. _lh_comp_plus_Complex_1¹)]: 134 --->
//│ 	case _lh_comp_times_arg2⁰ of {Complex _lh_comp_times_Complex_0¹ _lh_comp_times_Complex_1¹ => [Complex ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_0¹) -. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_1¹)) ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_1¹) +. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_0¹))] | _  => error⁰}: 117
//│ 	case _lh_comp_times_arg1⁰ of {Complex _lh_comp_times_Complex_0⁰ _lh_comp_times_Complex_1⁰ => case _lh_comp_times_arg2⁰ of {Complex _lh_comp_times_Complex_0¹ _lh_comp_times_Complex_1¹ => [Complex ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_0¹) -. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_1¹)) ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_1¹) +. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_0¹))] | _  => error⁰} | _  => error⁰}: 119
//│ 	case _lh_comp_magnitude_arg1⁰ of {Complex _lh_comp_magnitude_Complex_0⁰ _lh_comp_magnitude_Complex_1⁰ => ((_lh_comp_magnitude_Complex_0⁰ *. _lh_comp_magnitude_Complex_0⁰) +. (_lh_comp_magnitude_Complex_1⁰ *. _lh_comp_magnitude_Complex_1⁰)) | _  => error⁰}: 368
//│ [LH_P3 s⁰ t³ t³]: 149 --->
//│ 	NoCons
//│ 	case _lh_comp_times_arg2⁰ of {Complex _lh_comp_times_Complex_0¹ _lh_comp_times_Complex_1¹ => [Complex ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_0¹) -. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_1¹)) ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_1¹) +. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_0¹))] | _  => error⁰}: 117
//│ 	case _lh_comp_times_arg1⁰ of {Complex _lh_comp_times_Complex_0⁰ _lh_comp_times_Complex_1⁰ => case _lh_comp_times_arg2⁰ of {Complex _lh_comp_times_Complex_0¹ _lh_comp_times_Complex_1¹ => [Complex ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_0¹) -. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_1¹)) ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_1¹) +. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_0¹))] | _  => error⁰} | _  => error⁰}: 119
//│ 	case _lh_comp_plus_arg2⁰ of {Complex _lh_comp_plus_Complex_0¹ _lh_comp_plus_Complex_1¹ => [Complex (_lh_comp_plus_Complex_0⁰ +. _lh_comp_plus_Complex_0¹) (_lh_comp_plus_Complex_1⁰ +. _lh_comp_plus_Complex_1¹)] | _  => error⁰}: 136
//│ 	case _lh_comp_magnitude_arg1⁰ of {Complex _lh_comp_magnitude_Complex_0⁰ _lh_comp_magnitude_Complex_1⁰ => ((_lh_comp_magnitude_Complex_0⁰ *. _lh_comp_magnitude_Complex_0⁰) +. (_lh_comp_magnitude_Complex_1⁰ *. _lh_comp_magnitude_Complex_1⁰)) | _  => error⁰}: 368
//│ [Complex (_lh_mandelset_arg1⁰ +. ((float_of_int⁰(s¹) *. (_lh_mandelset_arg3⁰ -. _lh_mandelset_arg1⁰)) /. float_of_int⁰(_lh_mandelset_arg5⁰))) (_lh_mandelset_arg2⁰ +. ((float_of_int⁰(t⁴) *. (_lh_mandelset_arg4⁰ -. _lh_mandelset_arg2⁰)) /. float_of_int⁰(_lh_mandelset_arg6⁰)))]: 194 --->
//│ 	NoCons
//│ 	case _lh_comp_times_arg2⁰ of {Complex _lh_comp_times_Complex_0¹ _lh_comp_times_Complex_1¹ => [Complex ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_0¹) -. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_1¹)) ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_1¹) +. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_0¹))] | _  => error⁰}: 117
//│ 	case _lh_comp_times_arg1⁰ of {Complex _lh_comp_times_Complex_0⁰ _lh_comp_times_Complex_1⁰ => case _lh_comp_times_arg2⁰ of {Complex _lh_comp_times_Complex_0¹ _lh_comp_times_Complex_1¹ => [Complex ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_0¹) -. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_1¹)) ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_1¹) +. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_0¹))] | _  => error⁰} | _  => error⁰}: 119
//│ 	case _lh_comp_plus_arg2⁰ of {Complex _lh_comp_plus_Complex_0¹ _lh_comp_plus_Complex_1¹ => [Complex (_lh_comp_plus_Complex_0⁰ +. _lh_comp_plus_Complex_0¹) (_lh_comp_plus_Complex_1⁰ +. _lh_comp_plus_Complex_1¹)] | _  => error⁰}: 136
//│ 	case _lh_comp_magnitude_arg1⁰ of {Complex _lh_comp_magnitude_Complex_0⁰ _lh_comp_magnitude_Complex_1⁰ => ((_lh_comp_magnitude_Complex_0⁰ *. _lh_comp_magnitude_Complex_0⁰) +. (_lh_comp_magnitude_Complex_1⁰ *. _lh_comp_magnitude_Complex_1⁰)) | _  => error⁰}: 368
//│ [LH_C windowToViewport⁰(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h⁰) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 208 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_N]: 222 --->
//│ 	case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12
//│ [LH_C _lh_mandel_arg1⁰ map_lz_lh((fun z⁰ -> comp_plus_lh(comp_times_lh(z⁰, z⁰), _lh_mandel_arg1⁰)), infiniteMandel⁰)]: 348 --->
//│ 	case force⁰(ls¹) of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lz_lh(f¹, t¹)] | LH_N  => [LH_N]}: 29
//│ 	case force⁰(ls²) of {LH_C h² t² => [LH_C h² take_lz_lh((n⁰ - 1), t²)] | LH_N  => [LH_N]}: 73
//│ ------------------
//│ case ls⁰ of {LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh(f⁰, t⁰)] | LH_N  => [LH_N]}: 12 --->
//│ 	[LH_C f⁰(h⁰) map_lh(f⁰, t⁰)]: 10
//│ 	[LH_N]: 11
//│ 	[LH_C windowToViewport⁰(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h⁰) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]: 208
//│ 	[LH_N]: 222
//│ case force⁰(ls¹) of {LH_C h¹ t¹ => [LH_C f¹(h¹) map_lz_lh(f¹, t¹)] | LH_N  => [LH_N]}: 29 --->
//│ 	[LH_C f¹(h¹) map_lz_lh(f¹, t¹)]: 27
//│ 	[LH_N]: 28
//│ 	[LH_C _lh_mandel_arg1⁰ map_lz_lh((fun z⁰ -> comp_plus_lh(comp_times_lh(z⁰, z⁰), _lh_mandel_arg1⁰)), infiniteMandel⁰)]: 348
//│ case force⁰(ls²) of {LH_C h² t² => [LH_C h² take_lz_lh((n⁰ - 1), t²)] | LH_N  => [LH_N]}: 73 --->
//│ 	[LH_C f¹(h¹) map_lz_lh(f¹, t¹)]: 27
//│ 	[LH_N]: 28
//│ 	[LH_C _lh_mandel_arg1⁰ map_lz_lh((fun z⁰ -> comp_plus_lh(comp_times_lh(z⁰, z⁰), _lh_mandel_arg1⁰)), infiniteMandel⁰)]: 348
//│ case _lh_comp_times_arg2⁰ of {Complex _lh_comp_times_Complex_0¹ _lh_comp_times_Complex_1¹ => [Complex ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_0¹) -. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_1¹)) ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_1¹) +. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_0¹))] | _  => error⁰}: 117 --->
//│ 	[Complex (_lh_comp_plus_Complex_0⁰ +. _lh_comp_plus_Complex_0¹) (_lh_comp_plus_Complex_1⁰ +. _lh_comp_plus_Complex_1¹)]: 134
//│ 	[LH_P3 s⁰ t³ t³]: 149
//│ 	[Complex (_lh_mandelset_arg1⁰ +. ((float_of_int⁰(s¹) *. (_lh_mandelset_arg3⁰ -. _lh_mandelset_arg1⁰)) /. float_of_int⁰(_lh_mandelset_arg5⁰))) (_lh_mandelset_arg2⁰ +. ((float_of_int⁰(t⁴) *. (_lh_mandelset_arg4⁰ -. _lh_mandelset_arg2⁰)) /. float_of_int⁰(_lh_mandelset_arg6⁰)))]: 194
//│ case _lh_comp_times_arg1⁰ of {Complex _lh_comp_times_Complex_0⁰ _lh_comp_times_Complex_1⁰ => case _lh_comp_times_arg2⁰ of {Complex _lh_comp_times_Complex_0¹ _lh_comp_times_Complex_1¹ => [Complex ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_0¹) -. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_1¹)) ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_1¹) +. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_0¹))] | _  => error⁰} | _  => error⁰}: 119 --->
//│ 	[Complex (_lh_comp_plus_Complex_0⁰ +. _lh_comp_plus_Complex_0¹) (_lh_comp_plus_Complex_1⁰ +. _lh_comp_plus_Complex_1¹)]: 134
//│ 	[LH_P3 s⁰ t³ t³]: 149
//│ 	[Complex (_lh_mandelset_arg1⁰ +. ((float_of_int⁰(s¹) *. (_lh_mandelset_arg3⁰ -. _lh_mandelset_arg1⁰)) /. float_of_int⁰(_lh_mandelset_arg5⁰))) (_lh_mandelset_arg2⁰ +. ((float_of_int⁰(t⁴) *. (_lh_mandelset_arg4⁰ -. _lh_mandelset_arg2⁰)) /. float_of_int⁰(_lh_mandelset_arg6⁰)))]: 194
//│ case _lh_comp_plus_arg2⁰ of {Complex _lh_comp_plus_Complex_0¹ _lh_comp_plus_Complex_1¹ => [Complex (_lh_comp_plus_Complex_0⁰ +. _lh_comp_plus_Complex_0¹) (_lh_comp_plus_Complex_1⁰ +. _lh_comp_plus_Complex_1¹)] | _  => error⁰}: 136 --->
//│ 	[LH_P3 s⁰ t³ t³]: 149
//│ 	[Complex (_lh_mandelset_arg1⁰ +. ((float_of_int⁰(s¹) *. (_lh_mandelset_arg3⁰ -. _lh_mandelset_arg1⁰)) /. float_of_int⁰(_lh_mandelset_arg5⁰))) (_lh_mandelset_arg2⁰ +. ((float_of_int⁰(t⁴) *. (_lh_mandelset_arg4⁰ -. _lh_mandelset_arg2⁰)) /. float_of_int⁰(_lh_mandelset_arg6⁰)))]: 194
//│ case _lh_comp_plus_arg1⁰ of {Complex _lh_comp_plus_Complex_0⁰ _lh_comp_plus_Complex_1⁰ => case _lh_comp_plus_arg2⁰ of {Complex _lh_comp_plus_Complex_0¹ _lh_comp_plus_Complex_1¹ => [Complex (_lh_comp_plus_Complex_0⁰ +. _lh_comp_plus_Complex_0¹) (_lh_comp_plus_Complex_1⁰ +. _lh_comp_plus_Complex_1¹)] | _  => error⁰} | _  => error⁰}: 138 --->
//│ 	[Complex ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_0¹) -. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_1¹)) ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_1¹) +. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_0¹))]: 115
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C windowToViewport⁰(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h⁰) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 212 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 48
//│ 	[LH_N]: 49
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C windowToViewport⁰(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h⁰) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(enumFromTo_lh(1, _lh_mandelset_arg5⁰)) | LH_N  => [LH_N]}: 223 --->
//│ 	[LH_C a⁰ enumFromTo_lh((a⁰ + 1), b⁰)]: 48
//│ 	[LH_N]: 49
//│ case _lh_matchIdent⁰ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0⁰ _lh_whenDiverge_LH_C_1⁰ => if diverge_lh(_lh_whenDiverge_LH_C_0⁰, _lh_whenDiverge_arg2⁰) then 0 else (1 + walkIt⁰(_lh_whenDiverge_LH_C_1⁰)) | _  => error⁰}: 295 --->
//│ 	[LH_C h² take_lz_lh((n⁰ - 1), t²)]: 71
//│ 	[LH_N]: 72
//│ 	[LH_N]: 74
//│ case _lh_comp_magnitude_arg1⁰ of {Complex _lh_comp_magnitude_Complex_0⁰ _lh_comp_magnitude_Complex_1⁰ => ((_lh_comp_magnitude_Complex_0⁰ *. _lh_comp_magnitude_Complex_0⁰) +. (_lh_comp_magnitude_Complex_1⁰ *. _lh_comp_magnitude_Complex_1⁰)) | _  => error⁰}: 368 --->
//│ 	[Complex (_lh_comp_plus_Complex_0⁰ +. _lh_comp_plus_Complex_0¹) (_lh_comp_plus_Complex_1⁰ +. _lh_comp_plus_Complex_1¹)]: 134
//│ 	[LH_P3 s⁰ t³ t³]: 149
//│ 	[Complex (_lh_mandelset_arg1⁰ +. ((float_of_int⁰(s¹) *. (_lh_mandelset_arg3⁰ -. _lh_mandelset_arg1⁰)) /. float_of_int⁰(_lh_mandelset_arg5⁰))) (_lh_mandelset_arg2⁰ +. ((float_of_int⁰(t⁴) *. (_lh_mandelset_arg4⁰ -. _lh_mandelset_arg2⁰)) /. float_of_int⁰(_lh_mandelset_arg6⁰)))]: 194
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C h² take_lz_lh((n⁰ - 1), t²)]: 71 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0⁰ _lh_whenDiverge_LH_C_1⁰ => if diverge_lh(_lh_whenDiverge_LH_C_0⁰, _lh_whenDiverge_arg2⁰) then 0 else (1 + walkIt⁰(_lh_whenDiverge_LH_C_1⁰)) | _  => error⁰}: 295
//│ [LH_N]: 72 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0⁰ _lh_whenDiverge_LH_C_1⁰ => if diverge_lh(_lh_whenDiverge_LH_C_0⁰, _lh_whenDiverge_arg2⁰) then 0 else (1 + walkIt⁰(_lh_whenDiverge_LH_C_1⁰)) | _  => error⁰}: 295
//│ [LH_N]: 74 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0⁰ _lh_whenDiverge_LH_C_1⁰ => if diverge_lh(_lh_whenDiverge_LH_C_0⁰, _lh_whenDiverge_arg2⁰) then 0 else (1 + walkIt⁰(_lh_whenDiverge_LH_C_1⁰)) | _  => error⁰}: 295
//│ [Complex ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_0¹) -. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_1¹)) ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_1¹) +. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_0¹))]: 115 --->
//│ 	case _lh_comp_plus_arg1⁰ of {Complex _lh_comp_plus_Complex_0⁰ _lh_comp_plus_Complex_1⁰ => case _lh_comp_plus_arg2⁰ of {Complex _lh_comp_plus_Complex_0¹ _lh_comp_plus_Complex_1¹ => [Complex (_lh_comp_plus_Complex_0⁰ +. _lh_comp_plus_Complex_0¹) (_lh_comp_plus_Complex_1⁰ +. _lh_comp_plus_Complex_1¹)] | _  => error⁰} | _  => error⁰}: 138
//│ ------------------
//│ case _lh_comp_plus_arg1⁰ of {Complex _lh_comp_plus_Complex_0⁰ _lh_comp_plus_Complex_1⁰ => case _lh_comp_plus_arg2⁰ of {Complex _lh_comp_plus_Complex_0¹ _lh_comp_plus_Complex_1¹ => [Complex (_lh_comp_plus_Complex_0⁰ +. _lh_comp_plus_Complex_0¹) (_lh_comp_plus_Complex_1⁰ +. _lh_comp_plus_Complex_1¹)] | _  => error⁰} | _  => error⁰}: 138 --->
//│ 	[Complex ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_0¹) -. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_1¹)) ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_1¹) +. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_0¹))]: 115
//│ case _lh_matchIdent⁰ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0⁰ _lh_whenDiverge_LH_C_1⁰ => if diverge_lh(_lh_whenDiverge_LH_C_0⁰, _lh_whenDiverge_arg2⁰) then 0 else (1 + walkIt⁰(_lh_whenDiverge_LH_C_1⁰)) | _  => error⁰}: 295 --->
//│ 	[LH_C h² take_lz_lh((n⁰ - 1), t²)]: 71
//│ 	[LH_N]: 72
//│ 	[LH_N]: 74
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMandel_nofib_lh(primId⁰(0))
//│ def comp_magnitude_lh(_lh_comp_magnitude_arg1¹) = case _lh_comp_magnitude_arg1¹ of {
//│ 	Complex _lh_comp_magnitude_Complex_0⁰ _lh_comp_magnitude_Complex_1⁰ => ((_lh_comp_magnitude_Complex_0⁰ *. _lh_comp_magnitude_Complex_0⁰) +. (_lh_comp_magnitude_Complex_1⁰ *. _lh_comp_magnitude_Complex_1⁰))
//│ 	| _  => error⁰}
//│ def comp_plus_lh(_lh_comp_plus_arg1¹, _lh_comp_plus_arg2²) = _lh_comp_plus_arg1¹(_lh_comp_plus_arg2²)
//│ def comp_times_lh(_lh_comp_times_arg1¹, _lh_comp_times_arg2¹) = case _lh_comp_times_arg1¹ of {
//│ 	Complex _lh_comp_times_Complex_0⁰ _lh_comp_times_Complex_1⁰ => case _lh_comp_times_arg2¹ of {
//│ 		Complex _lh_comp_times_Complex_0¹ _lh_comp_times_Complex_1¹ => 
//│ 			let _lh_comp_plus_Complex_1² = ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_1¹) +. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_0¹))
//│ 			in let _lh_comp_plus_Complex_0² = ((_lh_comp_times_Complex_0⁰ *. _lh_comp_times_Complex_0¹) -. (_lh_comp_times_Complex_1⁰ *. _lh_comp_times_Complex_1¹))
//│ 			in (fun _lh_comp_plus_arg2¹ -> case _lh_comp_plus_arg2¹ of {
//│ 				Complex _lh_comp_plus_Complex_0¹ _lh_comp_plus_Complex_1¹ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0¹) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1¹)]
//│ 				| _  => error⁰})
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def createPixmap_lh(_lh_createPixmap_arg1¹, _lh_createPixmap_arg2¹, _lh_createPixmap_arg3¹, _lh_createPixmap_arg4¹) = [Pixmap _lh_createPixmap_arg1¹ _lh_createPixmap_arg2¹ _lh_createPixmap_arg3¹ _lh_createPixmap_arg4¹]
//│ def diverge_lh(_lh_diverge_arg1¹, _lh_diverge_arg2¹) = polyGt⁰(comp_magnitude_lh(_lh_diverge_arg1¹), _lh_diverge_arg2¹)
//│ def enumFromTo_lh(a¹, b¹) = if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh((a¹ + 1), b¹)] else [LH_N]
//│ def mandel_lh(_lh_mandel_arg1¹) = 
//│ 	let infiniteMandel¹ = lazy⁰([LH_C _lh_mandel_arg1¹ map_lz_lh((fun z¹ -> comp_plus_lh(comp_times_lh(z¹, z¹), _lh_mandel_arg1¹)), infiniteMandel¹)])
//│ 	in infiniteMandel¹
//│ def mandelset_lh(_lh_mandelset_arg1¹, _lh_mandelset_arg2¹, _lh_mandelset_arg3¹, _lh_mandelset_arg4¹, _lh_mandelset_arg5¹, _lh_mandelset_arg6¹, _lh_mandelset_arg7¹) = 
//│ 	let prettyRGB¹ = (fun s² -> 
//│ 		let t⁵ = (_lh_mandelset_arg7¹ - s²)
//│ 		in [LH_P3 s² t⁵ t⁵])
//│ 	in let windowToViewport¹ = (fun s³ -> (fun t⁶ -> [Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁶) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]))
//│ 	in let result¹ = parallelMandel_lh(
//│ 		let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 				let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 					LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h¹, _lh_listcomp_fun_ls_h⁰) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t¹)]
//│ 					| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t⁰)})
//│ 				in _lh_listcomp_fun³(enumFromTo_lh(1, _lh_mandelset_arg5¹))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²(enumFromTo_lh(1, _lh_mandelset_arg6¹)), _lh_mandelset_arg7¹, (myMax_lh((_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹), (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. 2.0))
//│ 	in createPixmap_lh(_lh_mandelset_arg5¹, _lh_mandelset_arg6¹, _lh_mandelset_arg7¹, map_lh(prettyRGB¹, result¹))
//│ def map_lh(f³, ls⁷) = case ls⁷ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f³(h⁰) map_lh(f³, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lz_lh(f², ls⁶) = lazy⁰(case force⁰(ls⁶) of {
//│ 	LH_C h¹ t¹ => [LH_C f²(h¹) map_lz_lh(f², t¹)]
//│ 	| LH_N  => [LH_N]})
//│ def myMax_lh(_lh_myMax_arg1¹, _lh_myMax_arg2¹) = if polyGt⁰(_lh_myMax_arg1¹, _lh_myMax_arg2¹) then _lh_myMax_arg1¹ else _lh_myMax_arg2¹
//│ def parallelMandel_lh(_lh_parallelMandel_arg1¹, _lh_parallelMandel_arg2¹, _lh_parallelMandel_arg3¹) = map_lh(whenDiverge_lh(_lh_parallelMandel_arg2¹, _lh_parallelMandel_arg3¹), _lh_parallelMandel_arg1¹)
//│ def take_lz_lh(n¹, ls⁴) = if (n¹ > 0) then case force⁰(ls⁴) of {
//│ 	LH_C h² t² => 
//│ 		let _lh_whenDiverge_LH_C_1¹ = take_lz_lh((n¹ - 1), t²)
//│ 		in let _lh_whenDiverge_LH_C_0¹ = h²
//│ 		in (fun _lh_whenDiverge_arg2¹ -> (fun walkIt¹ -> if diverge_lh(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹))))
//│ 	| LH_N  => (fun _lh_whenDiverge_arg2² -> (fun walkIt² -> 0))} else (fun _lh_whenDiverge_arg2³ -> (fun walkIt³ -> 0))
//│ def testMandel_nofib_lh(_lh_testMandel_nofib_arg1¹) = 
//│ 	let minx¹ = (0.0 -. 2.0)
//│ 	in let miny¹ = (0.0 -. 2.0)
//│ 	in let maxx¹ = 2.0
//│ 	in let maxy¹ = 2.0
//│ 	in let screenX¹ = 80
//│ 	in let screenY¹ = 80
//│ 	in let limit¹ = 75
//│ 	in mandelset_lh(minx¹, miny¹, maxx¹, maxy¹, screenX¹, screenY¹, limit¹)
//│ def whenDiverge_lh(_lh_whenDiverge_arg1¹, _lh_whenDiverge_arg2⁴, _lh_whenDiverge_arg3¹) = 
//│ 	let walkIt⁴ = (fun ls⁵ -> 
//│ 		let _lh_matchIdent¹ = ls⁵
//│ 		in _lh_matchIdent¹(_lh_whenDiverge_arg2⁴, walkIt⁴))
//│ 	in walkIt⁴(take_lz_lh(_lh_whenDiverge_arg1¹, mandel_lh(_lh_whenDiverge_arg3¹)))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ ~~~~~~~~~~~~~~~~~~~~~~~ NEXT ITERATION ~~~~~~~~~~~~~~~~~~~~~~~
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testMandel_nofib_lh^1] (hopeless to continue)
//│ 	[testMandel_nofib_lh^1 · mandelset_lh^388] (using original def)
//│ 		[testMandel_nofib_lh^1 · mandelset_lh^388 · createPixmap_lh^185] (using original def)
//│ 		[testMandel_nofib_lh^1 · mandelset_lh^388 · enumFromTo_lh^146] (using original def)
//│ 			[testMandel_nofib_lh^1 · mandelset_lh^388 · enumFromTo_lh^146 · enumFromTo_lh^12] ---> [testMandel_nofib_lh^1 · mandelset_lh^388 · enumFromTo_lh^146] (using original def)
//│ 		[testMandel_nofib_lh^1 · mandelset_lh^388 · enumFromTo_lh^157] (using original def)
//│ 			[testMandel_nofib_lh^1 · mandelset_lh^388 · enumFromTo_lh^157 · enumFromTo_lh^12] ---> [testMandel_nofib_lh^1 · mandelset_lh^388 · enumFromTo_lh^157] (using original def)
//│ 		[testMandel_nofib_lh^1 · mandelset_lh^388 · map_lh^192] (using original def)
//│ 			[testMandel_nofib_lh^1 · mandelset_lh^388 · map_lh^192 · map_lh^363] ---> [testMandel_nofib_lh^1 · mandelset_lh^388 · map_lh^192] (using original def)
//│ 		[testMandel_nofib_lh^1 · mandelset_lh^388 · myMax_lh^168] (using original def)
//│ 		[testMandel_nofib_lh^1 · mandelset_lh^388 · parallelMandel_lh^128] (using original def)
//│ 			[testMandel_nofib_lh^1 · mandelset_lh^388 · parallelMandel_lh^128 · map_lh^268] (using original def)
//│ 				[testMandel_nofib_lh^1 · mandelset_lh^388 · parallelMandel_lh^128 · map_lh^268 · map_lh^363] ---> [testMandel_nofib_lh^1 · mandelset_lh^388 · parallelMandel_lh^128 · map_lh^268] (using original def)
//│ 			[testMandel_nofib_lh^1 · mandelset_lh^388 · parallelMandel_lh^128 · whenDiverge_lh^269] (using original def)
//│ 				[testMandel_nofib_lh^1 · mandelset_lh^388 · parallelMandel_lh^128 · whenDiverge_lh^269 · mandel_lh^332] (using original def)
//│ 					[testMandel_nofib_lh^1 · mandelset_lh^388 · parallelMandel_lh^128 · whenDiverge_lh^269 · mandel_lh^332 · comp_plus_lh^302] (using original def)
//│ 					[testMandel_nofib_lh^1 · mandelset_lh^388 · parallelMandel_lh^128 · whenDiverge_lh^269 · mandel_lh^332 · comp_times_lh^303] (using original def)
//│ 					[testMandel_nofib_lh^1 · mandelset_lh^388 · parallelMandel_lh^128 · whenDiverge_lh^269 · mandel_lh^332 · map_lz_lh^301] (using original def)
//│ 						[testMandel_nofib_lh^1 · mandelset_lh^388 · parallelMandel_lh^128 · whenDiverge_lh^269 · mandel_lh^332 · map_lz_lh^301 · map_lz_lh^348] ---> [testMandel_nofib_lh^1 · mandelset_lh^388 · parallelMandel_lh^128 · whenDiverge_lh^269 · mandel_lh^332 · map_lz_lh^301] (using original def)
//│ 				[testMandel_nofib_lh^1 · mandelset_lh^388 · parallelMandel_lh^128 · whenDiverge_lh^269 · take_lz_lh^329] (using original def)
//│ 					[testMandel_nofib_lh^1 · mandelset_lh^388 · parallelMandel_lh^128 · whenDiverge_lh^269 · take_lz_lh^329 · diverge_lh^44] (using original def)
//│ 						[testMandel_nofib_lh^1 · mandelset_lh^388 · parallelMandel_lh^128 · whenDiverge_lh^269 · take_lz_lh^329 · diverge_lh^44 · comp_magnitude_lh^209] (using original def)
//│ 					[testMandel_nofib_lh^1 · mandelset_lh^388 · parallelMandel_lh^128 · whenDiverge_lh^269 · take_lz_lh^329 · take_lz_lh^34] ---> [testMandel_nofib_lh^1 · mandelset_lh^388 · parallelMandel_lh^128 · whenDiverge_lh^269 · take_lz_lh^329] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testMandel_nofib_lh_₀(primId⁰(0))
//│ def testMandel_nofib_lh_₀(_lh_testMandel_nofib_arg1¹) = 
//│ 	let minx¹ = (0.0 -. 2.0)
//│ 	in let miny¹ = (0.0 -. 2.0)
//│ 	in let maxx¹ = 2.0
//│ 	in let maxy¹ = 2.0
//│ 	in let screenX¹ = 80
//│ 	in let screenY¹ = 80
//│ 	in let limit¹ = 75
//│ 	in mandelset_lh_₀(minx¹, miny¹, maxx¹, maxy¹, screenX¹, screenY¹, limit¹)
//│ 	where
//│ 	def mandelset_lh_₀(_lh_mandelset_arg1¹, _lh_mandelset_arg2¹, _lh_mandelset_arg3¹, _lh_mandelset_arg4¹, _lh_mandelset_arg5¹, _lh_mandelset_arg6¹, _lh_mandelset_arg7¹) = 
//│ 		let prettyRGB¹ = (fun s² -> 
//│ 			let t⁷ = (_lh_mandelset_arg7¹ - s²)
//│ 			in [LH_P3 s² t⁷ t⁷])
//│ 		in let windowToViewport¹ = (fun s³ -> (fun t⁸ -> [Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁸) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]))
//│ 		in let result¹ = parallelMandel_lh_₀(
//│ 			let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 				LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 					let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 						LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 						| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 					in _lh_listcomp_fun³(enumFromTo_lh_₀(1, _lh_mandelset_arg5¹))
//│ 				| LH_N  => [LH_N]})
//│ 			in _lh_listcomp_fun²(enumFromTo_lh_₁(1, _lh_mandelset_arg6¹)), _lh_mandelset_arg7¹, (myMax_lh_₀((_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹), (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. 2.0))
//│ 		in createPixmap_lh_₀(_lh_mandelset_arg5¹, _lh_mandelset_arg6¹, _lh_mandelset_arg7¹, map_lh_₀(prettyRGB¹, result¹))
//│ 		where
//│ 		def createPixmap_lh_₀(_lh_createPixmap_arg1¹, _lh_createPixmap_arg2¹, _lh_createPixmap_arg3¹, _lh_createPixmap_arg4¹) = 
//│ 			[Pixmap _lh_createPixmap_arg1¹ _lh_createPixmap_arg2¹ _lh_createPixmap_arg3¹ _lh_createPixmap_arg4¹]
//│ 		def enumFromTo_lh_₀(a¹, b¹) = 
//│ 			if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh_₀((a¹ + 1), b¹)] else [LH_N]
//│ 		def enumFromTo_lh_₁(a², b²) = 
//│ 			if (a² <= b²) then [LH_C a² enumFromTo_lh_₁((a² + 1), b²)] else [LH_N]
//│ 		def map_lh_₀(f³, ls⁵) = 
//│ 			case ls⁵ of {
//│ 				LH_C h⁴ t⁶ => [LH_C f³(h⁴) map_lh_₀(f³, t⁶)]
//│ 				| LH_N  => [LH_N]}
//│ 		def myMax_lh_₀(_lh_myMax_arg1¹, _lh_myMax_arg2¹) = 
//│ 			if polyGt⁰(_lh_myMax_arg1¹, _lh_myMax_arg2¹) then _lh_myMax_arg1¹ else _lh_myMax_arg2¹
//│ 		def parallelMandel_lh_₀(_lh_parallelMandel_arg1¹, _lh_parallelMandel_arg2¹, _lh_parallelMandel_arg3¹) = 
//│ 			map_lh_₁(whenDiverge_lh_₀(_lh_parallelMandel_arg2¹, _lh_parallelMandel_arg3¹), _lh_parallelMandel_arg1¹)
//│ 			where
//│ 			def map_lh_₁(f⁴, ls⁶) = 
//│ 				case ls⁶ of {
//│ 					LH_C h⁵ t⁹ => [LH_C f⁴(h⁵) map_lh_₁(f⁴, t⁹)]
//│ 					| LH_N  => [LH_N]}
//│ 			def whenDiverge_lh_₀(_lh_whenDiverge_arg1¹, _lh_whenDiverge_arg2⁴, _lh_whenDiverge_arg3¹) = 
//│ 				let walkIt⁴ = (fun ls⁷ -> 
//│ 					let _lh_matchIdent¹ = ls⁷
//│ 					in _lh_matchIdent¹(_lh_whenDiverge_arg2⁴, walkIt⁴))
//│ 				in walkIt⁴(take_lz_lh_₀(_lh_whenDiverge_arg1¹, mandel_lh_₀(_lh_whenDiverge_arg3¹)))
//│ 				where
//│ 				def mandel_lh_₀(_lh_mandel_arg1¹) = 
//│ 					let infiniteMandel¹ = lazy⁰([LH_C _lh_mandel_arg1¹ map_lz_lh_₀((fun z¹ -> comp_plus_lh_₀(comp_times_lh_₀(z¹, z¹), _lh_mandel_arg1¹)), infiniteMandel¹)])
//│ 					in infiniteMandel¹
//│ 					where
//│ 					def comp_plus_lh_₀(_lh_comp_plus_arg1¹, _lh_comp_plus_arg2²) = 
//│ 						_lh_comp_plus_arg1¹(_lh_comp_plus_arg2²)
//│ 					def comp_times_lh_₀(_lh_comp_times_arg1¹, _lh_comp_times_arg2¹) = 
//│ 						case _lh_comp_times_arg1¹ of {
//│ 							Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2¹ of {
//│ 								Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => 
//│ 									let _lh_comp_plus_Complex_1² = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))
//│ 									in let _lh_comp_plus_Complex_0² = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³))
//│ 									in (fun _lh_comp_plus_arg2³ -> case _lh_comp_plus_arg2³ of {
//│ 										Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]
//│ 										| _  => error⁰})
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 					def map_lz_lh_₀(f², ls⁴) = 
//│ 						lazy⁰(case force⁰(ls⁴) of {
//│ 							LH_C h³ t⁵ => [LH_C f²(h³) map_lz_lh_₀(f², t⁵)]
//│ 							| LH_N  => [LH_N]})
//│ 				def take_lz_lh_₀(n¹, ls⁸) = 
//│ 					if (n¹ > 0) then case force⁰(ls⁸) of {
//│ 						LH_C h⁶ t¹⁰ => 
//│ 							let _lh_whenDiverge_LH_C_1¹ = take_lz_lh_₀((n¹ - 1), t¹⁰)
//│ 							in let _lh_whenDiverge_LH_C_0¹ = h⁶
//│ 							in (fun _lh_whenDiverge_arg2⁵ -> (fun walkIt⁵ -> if diverge_lh_₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2⁵) then 0 else (1 + walkIt⁵(_lh_whenDiverge_LH_C_1¹))))
//│ 						| LH_N  => (fun _lh_whenDiverge_arg2⁶ -> (fun walkIt⁶ -> 0))} else (fun _lh_whenDiverge_arg2⁷ -> (fun walkIt⁷ -> 0))
//│ 					where
//│ 					def diverge_lh_₀(_lh_diverge_arg1¹, _lh_diverge_arg2¹) = 
//│ 						polyGt⁰(comp_magnitude_lh_₀(_lh_diverge_arg1¹), _lh_diverge_arg2¹)
//│ 						where
//│ 						def comp_magnitude_lh_₀(_lh_comp_magnitude_arg1¹) = 
//│ 							case _lh_comp_magnitude_arg1¹ of {
//│ 								Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹))
//│ 								| _  => error⁰}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C f²(h³) map_lz_lh_₀(f², t⁵)]: 445 --->
//│ 	case force⁰(ls⁴) of {LH_C h³ t⁵ => [LH_C f²(h³) map_lz_lh_₀(f², t⁵)] | LH_N  => [LH_N]}: 447
//│ 	case force⁰(ls⁸) of {LH_C h⁶ t¹⁰ => let _lh_whenDiverge_LH_C_1¹ = take_lz_lh_₀((n¹ - 1), t¹⁰)
//│ in let _lh_whenDiverge_LH_C_0¹ = h⁶
//│ in (fun _lh_whenDiverge_arg2⁵ -> (fun walkIt⁵ -> if diverge_lh_₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2⁵) then 0 else (1 + walkIt⁵(_lh_whenDiverge_LH_C_1¹)))) | LH_N  => (fun _lh_whenDiverge_arg2⁶ -> (fun walkIt⁶ -> 0))}: 836
//│ [LH_N]: 446 --->
//│ 	case force⁰(ls⁴) of {LH_C h³ t⁵ => [LH_C f²(h³) map_lz_lh_₀(f², t⁵)] | LH_N  => [LH_N]}: 447
//│ 	case force⁰(ls⁸) of {LH_C h⁶ t¹⁰ => let _lh_whenDiverge_LH_C_1¹ = take_lz_lh_₀((n¹ - 1), t¹⁰)
//│ in let _lh_whenDiverge_LH_C_0¹ = h⁶
//│ in (fun _lh_whenDiverge_arg2⁵ -> (fun walkIt⁵ -> if diverge_lh_₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2⁵) then 0 else (1 + walkIt⁵(_lh_whenDiverge_LH_C_1¹)))) | LH_N  => (fun _lh_whenDiverge_arg2⁶ -> (fun walkIt⁶ -> 0))}: 836
//│ [LH_C a¹ enumFromTo_lh_₀((a¹ + 1), b¹)]: 466 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 620
//│ [LH_N]: 467 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 620
//│ [Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁸) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]: 602 --->
//│ 	case _lh_comp_magnitude_arg1¹ of {Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹)) | _  => error⁰}: 486
//│ 	case _lh_comp_plus_arg2³ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰}: 884
//│ 	case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => let _lh_comp_plus_Complex_1² = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))
//│ in let _lh_comp_plus_Complex_0² = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³))
//│ in (fun _lh_comp_plus_arg2³ -> case _lh_comp_plus_arg2³ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰}) | _  => error⁰}: 889
//│ 	case _lh_comp_times_arg1¹ of {Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => let _lh_comp_plus_Complex_1² = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))
//│ in let _lh_comp_plus_Complex_0² = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³))
//│ in (fun _lh_comp_plus_arg2³ -> case _lh_comp_plus_arg2³ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰}) | _  => error⁰} | _  => error⁰}: 891
//│ [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 616 --->
//│ 	case ls⁶ of {LH_C h⁵ t⁹ => [LH_C f⁴(h⁵) map_lh_₁(f⁴, t⁹)] | LH_N  => [LH_N]}: 696
//│ [LH_N]: 630 --->
//│ 	case ls⁶ of {LH_C h⁵ t⁹ => [LH_C f⁴(h⁵) map_lh_₁(f⁴, t⁹)] | LH_N  => [LH_N]}: 696
//│ [LH_C f⁴(h⁵) map_lh_₁(f⁴, t⁹)]: 694 --->
//│ 	case ls⁵ of {LH_C h⁴ t⁶ => [LH_C f³(h⁴) map_lh_₀(f³, t⁶)] | LH_N  => [LH_N]}: 546
//│ [LH_N]: 695 --->
//│ 	case ls⁵ of {LH_C h⁴ t⁶ => [LH_C f³(h⁴) map_lh_₀(f³, t⁶)] | LH_N  => [LH_N]}: 546
//│ [LH_C _lh_mandel_arg1¹ map_lz_lh_₀((fun z¹ -> comp_plus_lh_₀(comp_times_lh_₀(z¹, z¹), _lh_mandel_arg1¹)), infiniteMandel¹)]: 715 --->
//│ 	case force⁰(ls⁴) of {LH_C h³ t⁵ => [LH_C f²(h³) map_lz_lh_₀(f², t⁵)] | LH_N  => [LH_N]}: 447
//│ 	case force⁰(ls⁸) of {LH_C h⁶ t¹⁰ => let _lh_whenDiverge_LH_C_1¹ = take_lz_lh_₀((n¹ - 1), t¹⁰)
//│ in let _lh_whenDiverge_LH_C_0¹ = h⁶
//│ in (fun _lh_whenDiverge_arg2⁵ -> (fun walkIt⁵ -> if diverge_lh_₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2⁵) then 0 else (1 + walkIt⁵(_lh_whenDiverge_LH_C_1¹)))) | LH_N  => (fun _lh_whenDiverge_arg2⁶ -> (fun walkIt⁶ -> 0))}: 836
//│ [LH_C a² enumFromTo_lh_₁((a² + 1), b²)]: 744 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_lh_₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 631
//│ [LH_N]: 745 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_lh_₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 631
//│ [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]: 882 --->
//│ 	case _lh_comp_magnitude_arg1¹ of {Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹)) | _  => error⁰}: 486
//│ 	case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => let _lh_comp_plus_Complex_1² = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))
//│ in let _lh_comp_plus_Complex_0² = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³))
//│ in (fun _lh_comp_plus_arg2³ -> case _lh_comp_plus_arg2³ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰}) | _  => error⁰}: 889
//│ 	case _lh_comp_times_arg1¹ of {Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => let _lh_comp_plus_Complex_1² = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))
//│ in let _lh_comp_plus_Complex_0² = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³))
//│ in (fun _lh_comp_plus_arg2³ -> case _lh_comp_plus_arg2³ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰}) | _  => error⁰} | _  => error⁰}: 891
//│ ------------------
//│ case force⁰(ls⁴) of {LH_C h³ t⁵ => [LH_C f²(h³) map_lz_lh_₀(f², t⁵)] | LH_N  => [LH_N]}: 447 --->
//│ 	[LH_C f²(h³) map_lz_lh_₀(f², t⁵)]: 445
//│ 	[LH_N]: 446
//│ 	[LH_C _lh_mandel_arg1¹ map_lz_lh_₀((fun z¹ -> comp_plus_lh_₀(comp_times_lh_₀(z¹, z¹), _lh_mandel_arg1¹)), infiniteMandel¹)]: 715
//│ case _lh_comp_magnitude_arg1¹ of {Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹)) | _  => error⁰}: 486 --->
//│ 	[Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁸) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]: 602
//│ 	[Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]: 882
//│ case ls⁵ of {LH_C h⁴ t⁶ => [LH_C f³(h⁴) map_lh_₀(f³, t⁶)] | LH_N  => [LH_N]}: 546 --->
//│ 	[LH_C f⁴(h⁵) map_lh_₁(f⁴, t⁹)]: 694
//│ 	[LH_N]: 695
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 620 --->
//│ 	[LH_C a¹ enumFromTo_lh_₀((a¹ + 1), b¹)]: 466
//│ 	[LH_N]: 467
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_lh_₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 631 --->
//│ 	[LH_C a² enumFromTo_lh_₁((a² + 1), b²)]: 744
//│ 	[LH_N]: 745
//│ case ls⁶ of {LH_C h⁵ t⁹ => [LH_C f⁴(h⁵) map_lh_₁(f⁴, t⁹)] | LH_N  => [LH_N]}: 696 --->
//│ 	[LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 616
//│ 	[LH_N]: 630
//│ case force⁰(ls⁸) of {LH_C h⁶ t¹⁰ => let _lh_whenDiverge_LH_C_1¹ = take_lz_lh_₀((n¹ - 1), t¹⁰)
//│ in let _lh_whenDiverge_LH_C_0¹ = h⁶
//│ in (fun _lh_whenDiverge_arg2⁵ -> (fun walkIt⁵ -> if diverge_lh_₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2⁵) then 0 else (1 + walkIt⁵(_lh_whenDiverge_LH_C_1¹)))) | LH_N  => (fun _lh_whenDiverge_arg2⁶ -> (fun walkIt⁶ -> 0))}: 836 --->
//│ 	[LH_C f²(h³) map_lz_lh_₀(f², t⁵)]: 445
//│ 	[LH_N]: 446
//│ 	[LH_C _lh_mandel_arg1¹ map_lz_lh_₀((fun z¹ -> comp_plus_lh_₀(comp_times_lh_₀(z¹, z¹), _lh_mandel_arg1¹)), infiniteMandel¹)]: 715
//│ case _lh_comp_plus_arg2³ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰}: 884 --->
//│ 	[Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁸) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]: 602
//│ case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => let _lh_comp_plus_Complex_1² = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))
//│ in let _lh_comp_plus_Complex_0² = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³))
//│ in (fun _lh_comp_plus_arg2³ -> case _lh_comp_plus_arg2³ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰}) | _  => error⁰}: 889 --->
//│ 	[Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁸) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]: 602
//│ 	[Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]: 882
//│ case _lh_comp_times_arg1¹ of {Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => let _lh_comp_plus_Complex_1² = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))
//│ in let _lh_comp_plus_Complex_0² = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³))
//│ in (fun _lh_comp_plus_arg2³ -> case _lh_comp_plus_arg2³ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰}) | _  => error⁰} | _  => error⁰}: 891 --->
//│ 	[Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁸) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]: 602
//│ 	[Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]: 882
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C a¹ enumFromTo_lh_₀((a¹ + 1), b¹)]: 466 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 620
//│ [LH_N]: 467 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 620
//│ [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 616 --->
//│ 	case ls⁶ of {LH_C h⁵ t⁹ => [LH_C f⁴(h⁵) map_lh_₁(f⁴, t⁹)] | LH_N  => [LH_N]}: 696
//│ [LH_N]: 630 --->
//│ 	case ls⁶ of {LH_C h⁵ t⁹ => [LH_C f⁴(h⁵) map_lh_₁(f⁴, t⁹)] | LH_N  => [LH_N]}: 696
//│ [LH_C f⁴(h⁵) map_lh_₁(f⁴, t⁹)]: 694 --->
//│ 	case ls⁵ of {LH_C h⁴ t⁶ => [LH_C f³(h⁴) map_lh_₀(f³, t⁶)] | LH_N  => [LH_N]}: 546
//│ [LH_N]: 695 --->
//│ 	case ls⁵ of {LH_C h⁴ t⁶ => [LH_C f³(h⁴) map_lh_₀(f³, t⁶)] | LH_N  => [LH_N]}: 546
//│ [LH_C a² enumFromTo_lh_₁((a² + 1), b²)]: 744 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_lh_₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 631
//│ [LH_N]: 745 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_lh_₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 631
//│ ------------------
//│ case ls⁵ of {LH_C h⁴ t⁶ => [LH_C f³(h⁴) map_lh_₀(f³, t⁶)] | LH_N  => [LH_N]}: 546 --->
//│ 	[LH_C f⁴(h⁵) map_lh_₁(f⁴, t⁹)]: 694
//│ 	[LH_N]: 695
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 620 --->
//│ 	[LH_C a¹ enumFromTo_lh_₀((a¹ + 1), b¹)]: 466
//│ 	[LH_N]: 467
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_lh_₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 631 --->
//│ 	[LH_C a² enumFromTo_lh_₁((a² + 1), b²)]: 744
//│ 	[LH_N]: 745
//│ case ls⁶ of {LH_C h⁵ t⁹ => [LH_C f⁴(h⁵) map_lh_₁(f⁴, t⁹)] | LH_N  => [LH_N]}: 696 --->
//│ 	[LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 616
//│ 	[LH_N]: 630
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMandel_nofib_lh_₀(primId⁰(0))
//│ def testMandel_nofib_lh_₀(_lh_testMandel_nofib_arg1²) = 
//│ 	let minx² = (0.0 -. 2.0)
//│ 	in let miny² = (0.0 -. 2.0)
//│ 	in let maxx² = 2.0
//│ 	in let maxy² = 2.0
//│ 	in let screenX² = 80
//│ 	in let screenY² = 80
//│ 	in let limit² = 75
//│ 	in mandelset_lh_₀(minx², miny², maxx², maxy², screenX², screenY², limit²)
//│ 	where
//│ 	def mandelset_lh_₀(_lh_mandelset_arg1², _lh_mandelset_arg2², _lh_mandelset_arg3², _lh_mandelset_arg4², _lh_mandelset_arg5⁴, _lh_mandelset_arg6², _lh_mandelset_arg7²) = 
//│ 		let prettyRGB² = (fun s⁴ -> 
//│ 			let t¹³ = (_lh_mandelset_arg7² - s⁴)
//│ 			in [LH_P3 s⁴ t¹³ t¹³])
//│ 		in let windowToViewport⁶ = (fun s⁵ -> (fun t¹⁴ -> [Complex (_lh_mandelset_arg1² +. ((float_of_int⁰(s⁵) *. (_lh_mandelset_arg3² -. _lh_mandelset_arg1²)) /. float_of_int⁰(_lh_mandelset_arg5⁴))) (_lh_mandelset_arg2² +. ((float_of_int⁰(t¹⁴) *. (_lh_mandelset_arg4² -. _lh_mandelset_arg2²)) /. float_of_int⁰(_lh_mandelset_arg6²)))]))
//│ 		in let result² = parallelMandel_lh_₀(
//│ 			let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para⁵ -> _lh_listcomp_fun_para⁵(_lh_listcomp_fun¹¹, _lh_mandelset_arg5⁴, windowToViewport⁶))
//│ 			in _lh_listcomp_fun¹¹(enumFromTo_lh_₁(1, _lh_mandelset_arg6²)), _lh_mandelset_arg7², (myMax_lh_₀((_lh_mandelset_arg3² -. _lh_mandelset_arg1²), (_lh_mandelset_arg4² -. _lh_mandelset_arg2²)) /. 2.0))
//│ 		in createPixmap_lh_₀(_lh_mandelset_arg5⁴, _lh_mandelset_arg6², _lh_mandelset_arg7², map_lh_₀(prettyRGB², result²))
//│ 		where
//│ 		def createPixmap_lh_₀(_lh_createPixmap_arg1², _lh_createPixmap_arg2², _lh_createPixmap_arg3², _lh_createPixmap_arg4²) = 
//│ 			[Pixmap _lh_createPixmap_arg1² _lh_createPixmap_arg2² _lh_createPixmap_arg3² _lh_createPixmap_arg4²]
//│ 		def enumFromTo_lh_₀(a³, b³) = 
//│ 			if (a³ <= b³) then 
//│ 				let _lh_listcomp_fun_ls_t⁴ = enumFromTo_lh_₀((a³ + 1), b³)
//│ 				in let _lh_listcomp_fun_ls_h⁴ = a³
//│ 				in (fun _lh_listcomp_fun_ls_h⁵ -> (fun _lh_listcomp_fun⁴ -> (fun windowToViewport² -> (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁵ -> 
//│ 					let t¹¹ = _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)
//│ 					in let h⁷ = windowToViewport²(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun_ls_h⁵)
//│ 					in (fun f⁵ -> 
//│ 						let t¹² = map_lh_₁(f⁵, t¹¹)
//│ 						in let h⁸ = f⁵(h⁷)
//│ 						in (fun f⁶ -> [LH_C f⁶(h⁸) map_lh_₀(f⁶, t¹²)]))))))) else (fun _lh_listcomp_fun_ls_h⁶ -> (fun _lh_listcomp_fun⁶ -> (fun windowToViewport³ -> (fun _lh_listcomp_fun_ls_t⁶ -> (fun _lh_listcomp_fun⁷ -> _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁶))))))
//│ 		def enumFromTo_lh_₁(a⁴, b⁴) = 
//│ 			if (a⁴ <= b⁴) then 
//│ 				let _lh_listcomp_fun_ls_t⁷ = enumFromTo_lh_₁((a⁴ + 1), b⁴)
//│ 				in let _lh_listcomp_fun_ls_h⁷ = a⁴
//│ 				in (fun _lh_listcomp_fun⁸ -> (fun _lh_mandelset_arg5² -> (fun windowToViewport⁴ -> 
//│ 					let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁴ -> _lh_listcomp_fun_para⁴(_lh_listcomp_fun_ls_h⁷, _lh_listcomp_fun⁹, windowToViewport⁴, _lh_listcomp_fun_ls_t⁷, _lh_listcomp_fun⁸))
//│ 					in _lh_listcomp_fun⁹(enumFromTo_lh_₀(1, _lh_mandelset_arg5²))))) else (fun _lh_listcomp_fun¹⁰ -> (fun _lh_mandelset_arg5³ -> (fun windowToViewport⁵ -> (fun f⁹ -> (fun f¹⁰ -> [LH_N])))))
//│ 		def map_lh_₀(f⁷, ls¹¹) = 
//│ 			ls¹¹(f⁷)
//│ 		def myMax_lh_₀(_lh_myMax_arg1², _lh_myMax_arg2²) = 
//│ 			if polyGt⁰(_lh_myMax_arg1², _lh_myMax_arg2²) then _lh_myMax_arg1² else _lh_myMax_arg2²
//│ 		def parallelMandel_lh_₀(_lh_parallelMandel_arg1², _lh_parallelMandel_arg2², _lh_parallelMandel_arg3²) = 
//│ 			map_lh_₁(whenDiverge_lh_₀(_lh_parallelMandel_arg2², _lh_parallelMandel_arg3²), _lh_parallelMandel_arg1²)
//│ 			where
//│ 			def map_lh_₁(f⁸, ls¹²) = 
//│ 				ls¹²(f⁸)
//│ 			def whenDiverge_lh_₀(_lh_whenDiverge_arg1², _lh_whenDiverge_arg2⁸, _lh_whenDiverge_arg3²) = 
//│ 				let walkIt⁸ = (fun ls⁹ -> 
//│ 					let _lh_matchIdent² = ls⁹
//│ 					in _lh_matchIdent²(_lh_whenDiverge_arg2⁸, walkIt⁸))
//│ 				in walkIt⁸(take_lz_lh_₀(_lh_whenDiverge_arg1², mandel_lh_₀(_lh_whenDiverge_arg3²)))
//│ 				where
//│ 				def mandel_lh_₀(_lh_mandel_arg1²) = 
//│ 					let infiniteMandel² = lazy⁰([LH_C _lh_mandel_arg1² map_lz_lh_₀((fun z² -> comp_plus_lh_₀(comp_times_lh_₀(z², z²), _lh_mandel_arg1²)), infiniteMandel²)])
//│ 					in infiniteMandel²
//│ 					where
//│ 					def comp_plus_lh_₀(_lh_comp_plus_arg1², _lh_comp_plus_arg2⁴) = 
//│ 						_lh_comp_plus_arg1²(_lh_comp_plus_arg2⁴)
//│ 					def comp_times_lh_₀(_lh_comp_times_arg1², _lh_comp_times_arg2²) = 
//│ 						case _lh_comp_times_arg1² of {
//│ 							Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2² of {
//│ 								Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => 
//│ 									let _lh_comp_plus_Complex_1⁴ = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))
//│ 									in let _lh_comp_plus_Complex_0⁴ = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³))
//│ 									in (fun _lh_comp_plus_arg2⁵ -> case _lh_comp_plus_arg2⁵ of {
//│ 										Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0⁴ +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1⁴ +. _lh_comp_plus_Complex_1³)]
//│ 										| _  => error⁰})
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 					def map_lz_lh_₀(f¹¹, ls¹³) = 
//│ 						lazy⁰(case force⁰(ls¹³) of {
//│ 							LH_C h³ t⁵ => [LH_C f¹¹(h³) map_lz_lh_₀(f¹¹, t⁵)]
//│ 							| LH_N  => [LH_N]})
//│ 				def take_lz_lh_₀(n², ls¹⁰) = 
//│ 					if (n² > 0) then case force⁰(ls¹⁰) of {
//│ 						LH_C h⁶ t¹⁰ => 
//│ 							let _lh_whenDiverge_LH_C_1² = take_lz_lh_₀((n² - 1), t¹⁰)
//│ 							in let _lh_whenDiverge_LH_C_0² = h⁶
//│ 							in (fun _lh_whenDiverge_arg2⁹ -> (fun walkIt⁹ -> if diverge_lh_₀(_lh_whenDiverge_LH_C_0², _lh_whenDiverge_arg2⁹) then 0 else (1 + walkIt⁹(_lh_whenDiverge_LH_C_1²))))
//│ 						| LH_N  => (fun _lh_whenDiverge_arg2¹⁰ -> (fun walkIt¹⁰ -> 0))} else (fun _lh_whenDiverge_arg2¹¹ -> (fun walkIt¹¹ -> 0))
//│ 					where
//│ 					def diverge_lh_₀(_lh_diverge_arg1², _lh_diverge_arg2²) = 
//│ 						polyGt⁰(comp_magnitude_lh_₀(_lh_diverge_arg1²), _lh_diverge_arg2²)
//│ 						where
//│ 						def comp_magnitude_lh_₀(_lh_comp_magnitude_arg1²) = 
//│ 							case _lh_comp_magnitude_arg1² of {
//│ 								Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹))
//│ 								| _  => error⁰}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
