:NewParser
:ParseOnly

:lhInHaskell
:lhGenOCaml
myMax a b = if polyGt a b then a else b
data Complex a = Complex a a deriving (Eq, Show)
comp_magnitude (Complex a b) = (a *. a) +. (b *. b)
comp_times (Complex a b) (Complex c d) = Complex ((a *. c) -. (b *. d)) ((a *. d) +. (b *. c))
comp_plus (Complex a b) (Complex c d) = Complex (a +. c) (b +. d)
mandel c = 
  let infiniteMandel = lazy (c : (map_lz (\z -> comp_plus (comp_times z z) c) (infiniteMandel))) in
  infiniteMandel
whenDiverge::  Int -> Double -> Complex Double -> Int
whenDiverge limit radius c =
  let walkIt = \ls -> case ls of { [] -> 0; (x:xs) -> if (diverge x radius) then 0 else 1 + (walkIt xs) } in
  walkIt (take_lz limit (mandel c))
-- VERY IMPORTANT FUNCTION: sits in inner loop
diverge::Complex Double -> Double -> Bool
diverge cmplx radius = polyGt (comp_magnitude cmplx) radius
parallelMandel:: [Complex Double] -> Int -> Double -> [Int]
parallelMandel mat limit radius = map (whenDiverge limit radius) mat
-- mandelset::Double -> 			-- Minimum X viewport
-- 	         Double -> 			-- Minimum Y viewport
-- 	         Double -> 			-- Maximum X viewport
-- 	         Double ->			-- maximum Y viewport
-- 	         Integer -> 			-- Window width
-- 	         Integer -> 			-- Window height
-- 	         Int -> 			-- Window depth
-- 	         PixMap			-- result pixmap
mandelset x y x' y' screenX screenY lIMIT =
  let prettyRGB = (\s -> let t = (lIMIT - s) in (s,t,t)) in
  let windowToViewport = \s -> \t -> (Complex (x +. (((float_of_int s) *. (x' -. x)) /. (float_of_int screenX))) (y +. (((float_of_int t) *. (y' -. y)) /. (float_of_int screenY)))) in
  let result = parallelMandel [windowToViewport s t | t <- [1..screenY] , s<-[1..screenX]] lIMIT ((myMax (x'-.x) (y'-.y)) /. 2.0) in
  createPixmap screenX screenY lIMIT (map prettyRGB result)
data PixMap = Pixmap Integer Integer Int [(Int,Int,Int)] deriving Show
createPixmap::Integer -> Integer -> Int -> [(Int,Int,Int)] -> PixMap
createPixmap width height max colours = Pixmap width height max colours
testMandel_nofib dummy =
  let minx = 0.0 -. 2.0 in
  let miny = 0.0 -. 2.0 in
  let maxx = 2.0 in
  let maxy = 2.0 in
  let screenX = 80 in
  let screenY = 80 in
  let limit = 75 in
  mandelset minx miny maxx maxy screenX screenY limit
testMandel_nofib $ primId 0
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMandel_nofib_₀^1398(primId⁰(0))
//│ def comp_magnitude_₀(_lh_comp_magnitude_arg1¹) = case _lh_comp_magnitude_arg1¹ of {
//│ 	Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹))
//│ 	| _  => error⁰}
//│ def comp_plus_₀(_lh_comp_plus_arg1¹, _lh_comp_plus_arg2¹) = case _lh_comp_plus_arg1¹ of {
//│ 	Complex _lh_comp_plus_Complex_0² _lh_comp_plus_Complex_1² => case _lh_comp_plus_arg2¹ of {
//│ 		Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def comp_times_₀(_lh_comp_times_arg1¹, _lh_comp_times_arg2¹) = case _lh_comp_times_arg1¹ of {
//│ 	Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2¹ of {
//│ 		Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def createPixmap_₀(_lh_createPixmap_arg1¹, _lh_createPixmap_arg2¹, _lh_createPixmap_arg3¹, _lh_createPixmap_arg4¹) = [Pixmap _lh_createPixmap_arg1¹ _lh_createPixmap_arg2¹ _lh_createPixmap_arg3¹ _lh_createPixmap_arg4¹]
//│ def diverge_₀(_lh_diverge_arg1¹, _lh_diverge_arg2¹) = polyGt⁰(comp_magnitude_₀^1390(_lh_diverge_arg1¹), _lh_diverge_arg2¹)
//│ def enumFromTo_₀(a⁵, b²) = if (a⁵ <= b²) then [LH_C a⁵ enumFromTo_₀^1210((a⁵ + 1), b²)] else [LH_N]
//│ def enumFromTo_₁(a⁶, b³) = if (a⁶ <= b³) then [LH_C a⁶ enumFromTo_₁^1356((a⁶ + 1), b³)] else [LH_N]
//│ def mandel_₀(_lh_mandel_arg1¹) = 
//│ 	let infiniteMandel¹ = lazy⁰([LH_C _lh_mandel_arg1¹ map_lz_₀^1286((fun z¹ -> comp_plus_₀^1287(comp_times_₀^1288(z¹, z¹), _lh_mandel_arg1¹)), infiniteMandel¹)])
//│ 	in infiniteMandel¹
//│ def mandelset_₀(_lh_mandelset_arg1¹, _lh_mandelset_arg2¹, _lh_mandelset_arg3¹, _lh_mandelset_arg4¹, _lh_mandelset_arg5¹, _lh_mandelset_arg6¹, _lh_mandelset_arg7¹) = 
//│ 	let prettyRGB¹ = (fun s² -> 
//│ 		let t²⁵ = (_lh_mandelset_arg7¹ - s²)
//│ 		in [LH_P3 s² t²⁵ t²⁵])
//│ 	in let windowToViewport¹ = (fun s³ -> (fun t²⁶ -> [Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t²⁶) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]))
//│ 	in let result¹ = parallelMandel_₀^1017(
//│ 		let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 			LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 				let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 					LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 					| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 				in _lh_listcomp_fun³(enumFromTo_₁^1035(1, _lh_mandelset_arg5¹))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²(enumFromTo_₀^1046(1, _lh_mandelset_arg6¹)), _lh_mandelset_arg7¹, (myMax_₀^1057((_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹), (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. 2.0))
//│ 	in createPixmap_₀^1074(_lh_mandelset_arg5¹, _lh_mandelset_arg6¹, _lh_mandelset_arg7¹, map_₀^1081(prettyRGB¹, result¹))
//│ def map_lz_₀(f¹³, ls²²) = lazy⁰(case force⁰(ls²²) of {
//│ 	LH_C h²¹ t²⁷ => [LH_C f¹³(h²¹) map_lz_₀^1231(f¹³, t²⁷)]
//│ 	| LH_N  => [LH_N]})
//│ def map_₀(f¹², ls²⁰) = case ls²⁰ of {
//│ 	LH_C h²⁰ t²⁴ => [LH_C f¹²(h²⁰) map_₀^951(f¹², t²⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_₁(f¹⁴, ls²⁴) = case ls²⁴ of {
//│ 	LH_C h²³ t²⁹ => [LH_C f¹⁴(h²³) map_₁^1318(f¹⁴, t²⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def myMax_₀(_lh_myMax_arg1¹, _lh_myMax_arg2¹) = if polyGt⁰(_lh_myMax_arg1¹, _lh_myMax_arg2¹) then _lh_myMax_arg1¹ else _lh_myMax_arg2¹
//│ def parallelMandel_₀(_lh_parallelMandel_arg1¹, _lh_parallelMandel_arg2¹, _lh_parallelMandel_arg3¹) = map_₁^1338(whenDiverge_₀^1339(_lh_parallelMandel_arg2¹, _lh_parallelMandel_arg3¹), _lh_parallelMandel_arg1¹)
//│ def take_lz_₀(n⁴, ls²³) = if (n⁴ > 0) then case force⁰(ls²³) of {
//│ 	LH_C h²² t²⁸ => [LH_C h²² take_lz_₀^1251((n⁴ - 1), t²⁸)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testMandel_nofib_₀(_lh_testMandel_nofib_arg1¹) = 
//│ 	let minx¹ = (0.0 -. 2.0)
//│ 	in let miny¹ = (0.0 -. 2.0)
//│ 	in let maxx¹ = 2.0
//│ 	in let maxy¹ = 2.0
//│ 	in let screenX¹ = 80
//│ 	in let screenY¹ = 80
//│ 	in let limit¹ = 75
//│ 	in mandelset_₀^1147(minx¹, miny¹, maxx¹, maxy¹, screenX¹, screenY¹, limit¹)
//│ def whenDiverge_₀(_lh_whenDiverge_arg1¹, _lh_whenDiverge_arg2¹, _lh_whenDiverge_arg3¹) = 
//│ 	let walkIt¹ = (fun ls²¹ -> 
//│ 		let _lh_matchIdent¹ = ls²¹
//│ 		in case _lh_matchIdent¹ of {
//│ 			LH_N  => 0
//│ 			| LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge_₀^1173(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹))
//│ 			| _  => error⁰})
//│ 	in walkIt¹(take_lz_₀^1192(_lh_whenDiverge_arg1¹, mandel_₀^1195(_lh_whenDiverge_arg3¹)))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec comp_magnitude__d0 _lh_comp_magnitude_arg1_1 =
//│ 		  (match _lh_comp_magnitude_arg1_1 with
//│ 		    | `Complex(_lh_comp_magnitude_Complex_0_1, _lh_comp_magnitude_Complex_1_1) -> 
//│ 		      ((_lh_comp_magnitude_Complex_0_1 *. _lh_comp_magnitude_Complex_0_1) +. (_lh_comp_magnitude_Complex_1_1 *. _lh_comp_magnitude_Complex_1_1))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and comp_plus__d0 _lh_comp_plus_arg1_1 _lh_comp_plus_arg2_1 =
//│ 		  (match _lh_comp_plus_arg1_1 with
//│ 		    | `Complex(_lh_comp_plus_Complex_0_2, _lh_comp_plus_Complex_1_2) -> 
//│ 		      (match _lh_comp_plus_arg2_1 with
//│ 		        | `Complex(_lh_comp_plus_Complex_0_3, _lh_comp_plus_Complex_1_3) -> 
//│ 		          (`Complex((_lh_comp_plus_Complex_0_2 +. _lh_comp_plus_Complex_0_3), (_lh_comp_plus_Complex_1_2 +. _lh_comp_plus_Complex_1_3)))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and comp_times__d0 _lh_comp_times_arg1_1 _lh_comp_times_arg2_1 =
//│ 		  (match _lh_comp_times_arg1_1 with
//│ 		    | `Complex(_lh_comp_times_Complex_0_2, _lh_comp_times_Complex_1_2) -> 
//│ 		      (match _lh_comp_times_arg2_1 with
//│ 		        | `Complex(_lh_comp_times_Complex_0_3, _lh_comp_times_Complex_1_3) -> 
//│ 		          (`Complex(((_lh_comp_times_Complex_0_2 *. _lh_comp_times_Complex_0_3) -. (_lh_comp_times_Complex_1_2 *. _lh_comp_times_Complex_1_3)), ((_lh_comp_times_Complex_0_2 *. _lh_comp_times_Complex_1_3) +. (_lh_comp_times_Complex_1_2 *. _lh_comp_times_Complex_0_3))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and createPixmap__d0 _lh_createPixmap_arg1_1 _lh_createPixmap_arg2_1 _lh_createPixmap_arg3_1 _lh_createPixmap_arg4_1 =
//│ 		  (`Pixmap(_lh_createPixmap_arg1_1, _lh_createPixmap_arg2_1, _lh_createPixmap_arg3_1, _lh_createPixmap_arg4_1))
//│ 		and diverge__d0 _lh_diverge_arg1_1 _lh_diverge_arg2_1 =
//│ 		  ((comp_magnitude__d0 _lh_diverge_arg1_1) > _lh_diverge_arg2_1)
//│ 		and enumFromTo__d0 a_5 b_2 =
//│ 		  (if (a_5 <= b_2) then
//│ 		    (`LH_C(a_5, ((enumFromTo__d0 (a_5 + 1)) b_2)))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and enumFromTo__d1 a_6 b_3 =
//│ 		  (if (a_6 <= b_3) then
//│ 		    (`LH_C(a_6, ((enumFromTo__d1 (a_6 + 1)) b_3)))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and mandel__d0 _lh_mandel_arg1_1 =
//│ 		  (let rec infiniteMandel_1 = (lazy (`LH_C(_lh_mandel_arg1_1, ((map_lz__d0 (fun z_1 -> 
//│ 		    ((comp_plus__d0 ((comp_times__d0 z_1) z_1)) _lh_mandel_arg1_1))) infiniteMandel_1)))) in
//│ 		    infiniteMandel_1)
//│ 		and mandelset__d0 _lh_mandelset_arg1_1 _lh_mandelset_arg2_1 _lh_mandelset_arg3_1 _lh_mandelset_arg4_1 _lh_mandelset_arg5_1 _lh_mandelset_arg6_1 _lh_mandelset_arg7_1 =
//│ 		  (let rec prettyRGB_1 = (fun s_2 -> 
//│ 		    (let rec t_2_5 = (_lh_mandelset_arg7_1 - s_2) in
//│ 		      (`LH_P3(s_2, t_2_5, t_2_5)))) in
//│ 		    (let rec windowToViewport_1 = (fun s_3 t_2_6 -> 
//│ 		      (`Complex((_lh_mandelset_arg1_1 +. (((float_of_int s_3) *. (_lh_mandelset_arg3_1 -. _lh_mandelset_arg1_1)) /. (float_of_int _lh_mandelset_arg5_1))), (_lh_mandelset_arg2_1 +. (((float_of_int t_2_6) *. (_lh_mandelset_arg4_1 -. _lh_mandelset_arg2_1)) /. (float_of_int _lh_mandelset_arg6_1)))))) in
//│ 		      (let rec result_1 = (((parallelMandel__d0 (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		        (match _lh_listcomp_fun_para_2 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		            (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		              (match _lh_listcomp_fun_para_3 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_3, _lh_listcomp_fun_ls_t_3) -> 
//│ 		                  (`LH_C(((windowToViewport_1 _lh_listcomp_fun_ls_h_3) _lh_listcomp_fun_ls_h_2), (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3)))
//│ 		                | `LH_N -> 
//│ 		                  (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2))) in
//│ 		              (_lh_listcomp_fun_3 ((enumFromTo__d1 1) _lh_mandelset_arg5_1)))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_2 ((enumFromTo__d0 1) _lh_mandelset_arg6_1)))) _lh_mandelset_arg7_1) (((myMax__d0 (_lh_mandelset_arg3_1 -. _lh_mandelset_arg1_1)) (_lh_mandelset_arg4_1 -. _lh_mandelset_arg2_1)) /. 2.0)) in
//│ 		        ((((createPixmap__d0 _lh_mandelset_arg5_1) _lh_mandelset_arg6_1) _lh_mandelset_arg7_1) ((map__d0 prettyRGB_1) result_1)))))
//│ 		and map_lz__d0 f_1_3 ls_2_2 =
//│ 		  (lazy (match (Lazy.force ls_2_2) with
//│ 		    | `LH_C(h_2_1, t_2_7) -> 
//│ 		      (`LH_C((f_1_3 h_2_1), ((map_lz__d0 f_1_3) t_2_7)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)))
//│ 		and map__d0 f_1_2 ls_2_0 =
//│ 		  (match ls_2_0 with
//│ 		    | `LH_C(h_2_0, t_2_4) -> 
//│ 		      (`LH_C((f_1_2 h_2_0), ((map__d0 f_1_2) t_2_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N))
//│ 		and map__d1 f_1_4 ls_2_4 =
//│ 		  (match ls_2_4 with
//│ 		    | `LH_C(h_2_3, t_2_9) -> 
//│ 		      (`LH_C((f_1_4 h_2_3), ((map__d1 f_1_4) t_2_9)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N))
//│ 		and myMax__d0 _lh_myMax_arg1_1 _lh_myMax_arg2_1 =
//│ 		  (if (_lh_myMax_arg1_1 > _lh_myMax_arg2_1) then
//│ 		    _lh_myMax_arg1_1
//│ 		  else
//│ 		    _lh_myMax_arg2_1)
//│ 		and parallelMandel__d0 _lh_parallelMandel_arg1_1 _lh_parallelMandel_arg2_1 _lh_parallelMandel_arg3_1 =
//│ 		  ((map__d1 ((whenDiverge__d0 _lh_parallelMandel_arg2_1) _lh_parallelMandel_arg3_1)) _lh_parallelMandel_arg1_1)
//│ 		and take_lz__d0 n_4 ls_2_3 =
//│ 		  (if (n_4 > 0) then
//│ 		    (match (Lazy.force ls_2_3) with
//│ 		      | `LH_C(h_2_2, t_2_8) -> 
//│ 		        (`LH_C(h_2_2, ((take_lz__d0 (n_4 - 1)) t_2_8)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and testMandel_nofib__d0 _lh_testMandel_nofib_arg1_1 =
//│ 		  (let rec minx_1 = (0.0 -. 2.0) in
//│ 		    (let rec miny_1 = (0.0 -. 2.0) in
//│ 		      (let rec maxx_1 = 2.0 in
//│ 		        (let rec maxy_1 = 2.0 in
//│ 		          (let rec screenX_1 = 80 in
//│ 		            (let rec screenY_1 = 80 in
//│ 		              (let rec limit_1 = 75 in
//│ 		                (((((((mandelset__d0 minx_1) miny_1) maxx_1) maxy_1) screenX_1) screenY_1) limit_1))))))))
//│ 		and whenDiverge__d0 _lh_whenDiverge_arg1_1 _lh_whenDiverge_arg2_1 _lh_whenDiverge_arg3_1 =
//│ 		  (let rec walkIt_1 = (fun ls_2_1 -> 
//│ 		    (let rec _lh_matchIdent_1 = ls_2_1 in
//│ 		      (match _lh_matchIdent_1 with
//│ 		        | `LH_N -> 
//│ 		          0
//│ 		        | `LH_C(_lh_whenDiverge_LH_C_0_1, _lh_whenDiverge_LH_C_1_1) -> 
//│ 		          (if ((diverge__d0 _lh_whenDiverge_LH_C_0_1) _lh_whenDiverge_arg2_1) then
//│ 		            0
//│ 		          else
//│ 		            (1 + (walkIt_1 _lh_whenDiverge_LH_C_1_1)))
//│ 		        | _ -> 
//│ 		          (failwith "error")))) in
//│ 		    (walkIt_1 ((take_lz__d0 _lh_whenDiverge_arg1_1) (mandel__d0 _lh_whenDiverge_arg3_1))));;
//│ 		(testMandel_nofib__d0 0)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testMandel_nofib_₀^1398]
//│ 	[testMandel_nofib_₀^1398 · mandelset_₀^1147]
//│ 		[testMandel_nofib_₀^1398 · mandelset_₀^1147 · createPixmap_₀^1074] (hopeless to continue)
//│ 		[testMandel_nofib_₀^1398 · mandelset_₀^1147 · enumFromTo_₀^1046] (hopeless to continue)
//│ 			[testMandel_nofib_₀^1398 · mandelset_₀^1147 · enumFromTo_₀^1046 · enumFromTo_₀^1210] ---> [testMandel_nofib_₀^1398 · mandelset_₀^1147 · enumFromTo_₀^1046] (using original def)
//│ 		[testMandel_nofib_₀^1398 · mandelset_₀^1147 · enumFromTo_₁^1035] (hopeless to continue)
//│ 			[testMandel_nofib_₀^1398 · mandelset_₀^1147 · enumFromTo_₁^1035 · enumFromTo_₁^1356] ---> [testMandel_nofib_₀^1398 · mandelset_₀^1147 · enumFromTo_₁^1035] (using original def)
//│ 		[testMandel_nofib_₀^1398 · mandelset_₀^1147 · map_₀^1081]
//│ 			[testMandel_nofib_₀^1398 · mandelset_₀^1147 · map_₀^1081 · map_₀^951] ---> [testMandel_nofib_₀^1398 · mandelset_₀^1147 · map_₀^1081] (only one)
//│ 		[testMandel_nofib_₀^1398 · mandelset_₀^1147 · myMax_₀^1057] (hopeless to continue)
//│ 		[testMandel_nofib_₀^1398 · mandelset_₀^1147 · parallelMandel_₀^1017] (hopeless to continue)
//│ 			[testMandel_nofib_₀^1398 · mandelset_₀^1147 · parallelMandel_₀^1017 · map_₁^1338] (using original def)
//│ 				[testMandel_nofib_₀^1398 · mandelset_₀^1147 · parallelMandel_₀^1017 · map_₁^1338 · map_₁^1318] ---> [testMandel_nofib_₀^1398 · mandelset_₀^1147 · parallelMandel_₀^1017 · map_₁^1338] (using original def)
//│ 			[testMandel_nofib_₀^1398 · mandelset_₀^1147 · parallelMandel_₀^1017 · whenDiverge_₀^1339] (using original def)
//│ 				[testMandel_nofib_₀^1398 · mandelset_₀^1147 · parallelMandel_₀^1017 · whenDiverge_₀^1339 · diverge_₀^1173] (using original def)
//│ 					[testMandel_nofib_₀^1398 · mandelset_₀^1147 · parallelMandel_₀^1017 · whenDiverge_₀^1339 · diverge_₀^1173 · comp_magnitude_₀^1390] (using original def)
//│ 				[testMandel_nofib_₀^1398 · mandelset_₀^1147 · parallelMandel_₀^1017 · whenDiverge_₀^1339 · mandel_₀^1195] (using original def)
//│ 					[testMandel_nofib_₀^1398 · mandelset_₀^1147 · parallelMandel_₀^1017 · whenDiverge_₀^1339 · mandel_₀^1195 · comp_plus_₀^1287] (using original def)
//│ 					[testMandel_nofib_₀^1398 · mandelset_₀^1147 · parallelMandel_₀^1017 · whenDiverge_₀^1339 · mandel_₀^1195 · comp_times_₀^1288] (using original def)
//│ 					[testMandel_nofib_₀^1398 · mandelset_₀^1147 · parallelMandel_₀^1017 · whenDiverge_₀^1339 · mandel_₀^1195 · map_lz_₀^1286] (using original def)
//│ 						[testMandel_nofib_₀^1398 · mandelset_₀^1147 · parallelMandel_₀^1017 · whenDiverge_₀^1339 · mandel_₀^1195 · map_lz_₀^1286 · map_lz_₀^1231] ---> [testMandel_nofib_₀^1398 · mandelset_₀^1147 · parallelMandel_₀^1017 · whenDiverge_₀^1339 · mandel_₀^1195 · map_lz_₀^1286] (using original def)
//│ 				[testMandel_nofib_₀^1398 · mandelset_₀^1147 · parallelMandel_₀^1017 · whenDiverge_₀^1339 · take_lz_₀^1192] (using original def)
//│ 					[testMandel_nofib_₀^1398 · mandelset_₀^1147 · parallelMandel_₀^1017 · whenDiverge_₀^1339 · take_lz_₀^1192 · take_lz_₀^1251] ---> [testMandel_nofib_₀^1398 · mandelset_₀^1147 · parallelMandel_₀^1017 · whenDiverge_₀^1339 · take_lz_₀^1192] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testMandel_nofib_₀_₀(primId⁰(0))
//│ def testMandel_nofib_₀_₀(_lh_testMandel_nofib_arg1¹) = 
//│ 	let minx¹ = (0.0 -. 2.0)
//│ 	in let miny¹ = (0.0 -. 2.0)
//│ 	in let maxx¹ = 2.0
//│ 	in let maxy¹ = 2.0
//│ 	in let screenX¹ = 80
//│ 	in let screenY¹ = 80
//│ 	in let limit¹ = 75
//│ 	in mandelset_₀_₀(minx¹, miny¹, maxx¹, maxy¹, screenX¹, screenY¹, limit¹)
//│ 	where
//│ 	def mandelset_₀_₀(_lh_mandelset_arg1¹, _lh_mandelset_arg2¹, _lh_mandelset_arg3¹, _lh_mandelset_arg4¹, _lh_mandelset_arg5¹, _lh_mandelset_arg6¹, _lh_mandelset_arg7¹) = 
//│ 		let prettyRGB¹ = (fun s² -> 
//│ 			let t⁸ = (_lh_mandelset_arg7¹ - s²)
//│ 			in [LH_P3 s² t⁸ t⁸])
//│ 		in let windowToViewport¹ = (fun s³ -> (fun t⁹ -> [Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁹) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]))
//│ 		in let result¹ = parallelMandel_₀_₀(
//│ 			let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 				LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 					let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 						LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 						| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 					in _lh_listcomp_fun³(enumFromTo_₁_₀(1, _lh_mandelset_arg5¹))
//│ 				| LH_N  => [LH_N]})
//│ 			in _lh_listcomp_fun²(enumFromTo_₀_₀(1, _lh_mandelset_arg6¹)), _lh_mandelset_arg7¹, (myMax_₀_₀((_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹), (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. 2.0))
//│ 		in createPixmap_₀_₀(_lh_mandelset_arg5¹, _lh_mandelset_arg6¹, _lh_mandelset_arg7¹, map_₀_₀(prettyRGB¹, result¹))
//│ 		where
//│ 		def createPixmap_₀_₀(_lh_createPixmap_arg1¹, _lh_createPixmap_arg2¹, _lh_createPixmap_arg3¹, _lh_createPixmap_arg4¹) = 
//│ 			[Pixmap _lh_createPixmap_arg1¹ _lh_createPixmap_arg2¹ _lh_createPixmap_arg3¹ _lh_createPixmap_arg4¹]
//│ 		def enumFromTo_₀_₀(a³, b³) = 
//│ 			if (a³ <= b³) then [LH_C a³ enumFromTo_₀_₀((a³ + 1), b³)] else [LH_N]
//│ 		def enumFromTo_₁_₀(a², b²) = 
//│ 			if (a² <= b²) then [LH_C a² enumFromTo_₁_₀((a² + 1), b²)] else [LH_N]
//│ 		def map_₀_₀(f⁵, ls⁹) = 
//│ 			case ls⁹ of {
//│ 				LH_C h⁷ t¹¹ => [LH_C f⁵(h⁷) map_₀_₀(f⁵, t¹¹)]
//│ 				| LH_N  => [LH_N]}
//│ 		def myMax_₀_₀(_lh_myMax_arg1¹, _lh_myMax_arg2¹) = 
//│ 			if polyGt⁰(_lh_myMax_arg1¹, _lh_myMax_arg2¹) then _lh_myMax_arg1¹ else _lh_myMax_arg2¹
//│ 		def parallelMandel_₀_₀(_lh_parallelMandel_arg1¹, _lh_parallelMandel_arg2¹, _lh_parallelMandel_arg3¹) = 
//│ 			map_₁_₀(whenDiverge_₀_₀(_lh_parallelMandel_arg2¹, _lh_parallelMandel_arg3¹), _lh_parallelMandel_arg1¹)
//│ 			where
//│ 			def map_₁_₀(f³, ls⁵) = 
//│ 				case ls⁵ of {
//│ 					LH_C h⁴ t⁶ => [LH_C f³(h⁴) map_₁_₀(f³, t⁶)]
//│ 					| LH_N  => [LH_N]}
//│ 			def whenDiverge_₀_₀(_lh_whenDiverge_arg1¹, _lh_whenDiverge_arg2¹, _lh_whenDiverge_arg3¹) = 
//│ 				let walkIt¹ = (fun ls⁶ -> 
//│ 					let _lh_matchIdent¹ = ls⁶
//│ 					in case _lh_matchIdent¹ of {
//│ 						LH_N  => 0
//│ 						| LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge_₀_₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹))
//│ 						| _  => error⁰})
//│ 				in walkIt¹(take_lz_₀_₀(_lh_whenDiverge_arg1¹, mandel_₀_₀(_lh_whenDiverge_arg3¹)))
//│ 				where
//│ 				def diverge_₀_₀(_lh_diverge_arg1¹, _lh_diverge_arg2¹) = 
//│ 					polyGt⁰(comp_magnitude_₀_₀(_lh_diverge_arg1¹), _lh_diverge_arg2¹)
//│ 					where
//│ 					def comp_magnitude_₀_₀(_lh_comp_magnitude_arg1¹) = 
//│ 						case _lh_comp_magnitude_arg1¹ of {
//│ 							Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹))
//│ 							| _  => error⁰}
//│ 				def mandel_₀_₀(_lh_mandel_arg1¹) = 
//│ 					let infiniteMandel¹ = lazy⁰([LH_C _lh_mandel_arg1¹ map_lz_₀_₀((fun z¹ -> comp_plus_₀_₀(comp_times_₀_₀(z¹, z¹), _lh_mandel_arg1¹)), infiniteMandel¹)])
//│ 					in infiniteMandel¹
//│ 					where
//│ 					def comp_plus_₀_₀(_lh_comp_plus_arg1¹, _lh_comp_plus_arg2¹) = 
//│ 						case _lh_comp_plus_arg1¹ of {
//│ 							Complex _lh_comp_plus_Complex_0² _lh_comp_plus_Complex_1² => case _lh_comp_plus_arg2¹ of {
//│ 								Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 					def comp_times_₀_₀(_lh_comp_times_arg1¹, _lh_comp_times_arg2¹) = 
//│ 						case _lh_comp_times_arg1¹ of {
//│ 							Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2¹ of {
//│ 								Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))]
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 					def map_lz_₀_₀(f⁴, ls⁷) = 
//│ 						lazy⁰(case force⁰(ls⁷) of {
//│ 							LH_C h⁵ t⁷ => [LH_C f⁴(h⁵) map_lz_₀_₀(f⁴, t⁷)]
//│ 							| LH_N  => [LH_N]})
//│ 				def take_lz_₀_₀(n¹, ls⁸) = 
//│ 					if (n¹ > 0) then case force⁰(ls⁸) of {
//│ 						LH_C h⁶ t¹⁰ => [LH_C h⁶ take_lz_₀_₀((n¹ - 1), t¹⁰)]
//│ 						| LH_N  => [LH_N]} else [LH_N]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C a² enumFromTo_₁_₀((a² + 1), b²)]: 472 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 725
//│ [LH_N]: 473 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 725
//│ [LH_C a³ enumFromTo_₀_₀((a³ + 1), b³)]: 501 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_₁_₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 736
//│ [LH_N]: 502 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_₁_₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 736
//│ [LH_C f³(h⁴) map_₁_₀(f³, t⁶)]: 515 --->
//│ 	case ls⁹ of {LH_C h⁷ t¹¹ => [LH_C f⁵(h⁷) map_₀_₀(f⁵, t¹¹)] | LH_N  => [LH_N]}: 905
//│ [LH_N]: 516 --->
//│ 	case ls⁹ of {LH_C h⁷ t¹¹ => [LH_C f⁵(h⁷) map_₀_₀(f⁵, t¹¹)] | LH_N  => [LH_N]}: 905
//│ [LH_C f⁴(h⁵) map_lz_₀_₀(f⁴, t⁷)]: 566 --->
//│ 	case force⁰(ls⁷) of {LH_C h⁵ t⁷ => [LH_C f⁴(h⁵) map_lz_₀_₀(f⁴, t⁷)] | LH_N  => [LH_N]}: 568
//│ 	case force⁰(ls⁸) of {LH_C h⁶ t¹⁰ => [LH_C h⁶ take_lz_₀_₀((n¹ - 1), t¹⁰)] | LH_N  => [LH_N]}: 832
//│ [LH_N]: 567 --->
//│ 	case force⁰(ls⁷) of {LH_C h⁵ t⁷ => [LH_C f⁴(h⁵) map_lz_₀_₀(f⁴, t⁷)] | LH_N  => [LH_N]}: 568
//│ 	case force⁰(ls⁸) of {LH_C h⁶ t¹⁰ => [LH_C h⁶ take_lz_₀_₀((n¹ - 1), t¹⁰)] | LH_N  => [LH_N]}: 832
//│ [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))]: 600 --->
//│ 	case _lh_comp_plus_arg1¹ of {Complex _lh_comp_plus_Complex_0² _lh_comp_plus_Complex_1² => case _lh_comp_plus_arg2¹ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰} | _  => error⁰}: 853
//│ [Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁹) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]: 707 --->
//│ 	case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))] | _  => error⁰}: 602
//│ 	case _lh_comp_times_arg1¹ of {Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))] | _  => error⁰} | _  => error⁰}: 604
//│ 	case _lh_comp_plus_arg2¹ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰}: 851
//│ 	case _lh_comp_magnitude_arg1¹ of {Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹)) | _  => error⁰}: 892
//│ [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 721 --->
//│ 	case ls⁵ of {LH_C h⁴ t⁶ => [LH_C f³(h⁴) map_₁_₀(f³, t⁶)] | LH_N  => [LH_N]}: 517
//│ [LH_N]: 735 --->
//│ 	case ls⁵ of {LH_C h⁴ t⁶ => [LH_C f³(h⁴) map_₁_₀(f³, t⁶)] | LH_N  => [LH_N]}: 517
//│ [LH_C h⁶ take_lz_₀_₀((n¹ - 1), t¹⁰)]: 830 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge_₀_₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹)) | _  => error⁰}: 538
//│ [LH_N]: 831 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge_₀_₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹)) | _  => error⁰}: 538
//│ [LH_N]: 833 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge_₀_₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹)) | _  => error⁰}: 538
//│ [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]: 849 --->
//│ 	case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))] | _  => error⁰}: 602
//│ 	case _lh_comp_times_arg1¹ of {Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))] | _  => error⁰} | _  => error⁰}: 604
//│ 	case _lh_comp_magnitude_arg1¹ of {Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹)) | _  => error⁰}: 892
//│ [LH_C _lh_mandel_arg1¹ map_lz_₀_₀((fun z¹ -> comp_plus_₀_₀(comp_times_₀_₀(z¹, z¹), _lh_mandel_arg1¹)), infiniteMandel¹)]: 872 --->
//│ 	case force⁰(ls⁷) of {LH_C h⁵ t⁷ => [LH_C f⁴(h⁵) map_lz_₀_₀(f⁴, t⁷)] | LH_N  => [LH_N]}: 568
//│ 	case force⁰(ls⁸) of {LH_C h⁶ t¹⁰ => [LH_C h⁶ take_lz_₀_₀((n¹ - 1), t¹⁰)] | LH_N  => [LH_N]}: 832
//│ ------------------
//│ case ls⁵ of {LH_C h⁴ t⁶ => [LH_C f³(h⁴) map_₁_₀(f³, t⁶)] | LH_N  => [LH_N]}: 517 --->
//│ 	[LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 721
//│ 	[LH_N]: 735
//│ case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge_₀_₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹)) | _  => error⁰}: 538 --->
//│ 	[LH_C h⁶ take_lz_₀_₀((n¹ - 1), t¹⁰)]: 830
//│ 	[LH_N]: 831
//│ 	[LH_N]: 833
//│ case force⁰(ls⁷) of {LH_C h⁵ t⁷ => [LH_C f⁴(h⁵) map_lz_₀_₀(f⁴, t⁷)] | LH_N  => [LH_N]}: 568 --->
//│ 	[LH_C f⁴(h⁵) map_lz_₀_₀(f⁴, t⁷)]: 566
//│ 	[LH_N]: 567
//│ 	[LH_C _lh_mandel_arg1¹ map_lz_₀_₀((fun z¹ -> comp_plus_₀_₀(comp_times_₀_₀(z¹, z¹), _lh_mandel_arg1¹)), infiniteMandel¹)]: 872
//│ case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))] | _  => error⁰}: 602 --->
//│ 	[Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁹) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]: 707
//│ 	[Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]: 849
//│ case _lh_comp_times_arg1¹ of {Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))] | _  => error⁰} | _  => error⁰}: 604 --->
//│ 	[Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁹) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]: 707
//│ 	[Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]: 849
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 725 --->
//│ 	[LH_C a² enumFromTo_₁_₀((a² + 1), b²)]: 472
//│ 	[LH_N]: 473
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_₁_₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 736 --->
//│ 	[LH_C a³ enumFromTo_₀_₀((a³ + 1), b³)]: 501
//│ 	[LH_N]: 502
//│ case force⁰(ls⁸) of {LH_C h⁶ t¹⁰ => [LH_C h⁶ take_lz_₀_₀((n¹ - 1), t¹⁰)] | LH_N  => [LH_N]}: 832 --->
//│ 	[LH_C f⁴(h⁵) map_lz_₀_₀(f⁴, t⁷)]: 566
//│ 	[LH_N]: 567
//│ 	[LH_C _lh_mandel_arg1¹ map_lz_₀_₀((fun z¹ -> comp_plus_₀_₀(comp_times_₀_₀(z¹, z¹), _lh_mandel_arg1¹)), infiniteMandel¹)]: 872
//│ case _lh_comp_plus_arg2¹ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰}: 851 --->
//│ 	[Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁹) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]: 707
//│ case _lh_comp_plus_arg1¹ of {Complex _lh_comp_plus_Complex_0² _lh_comp_plus_Complex_1² => case _lh_comp_plus_arg2¹ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰} | _  => error⁰}: 853 --->
//│ 	[Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))]: 600
//│ case _lh_comp_magnitude_arg1¹ of {Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹)) | _  => error⁰}: 892 --->
//│ 	[Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁹) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]: 707
//│ 	[Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]: 849
//│ case ls⁹ of {LH_C h⁷ t¹¹ => [LH_C f⁵(h⁷) map_₀_₀(f⁵, t¹¹)] | LH_N  => [LH_N]}: 905 --->
//│ 	[LH_C f³(h⁴) map_₁_₀(f³, t⁶)]: 515
//│ 	[LH_N]: 516
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C a² enumFromTo_₁_₀((a² + 1), b²)]: 472 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 725
//│ [LH_N]: 473 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 725
//│ [LH_C a³ enumFromTo_₀_₀((a³ + 1), b³)]: 501 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_₁_₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 736
//│ [LH_N]: 502 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_₁_₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 736
//│ [LH_C f³(h⁴) map_₁_₀(f³, t⁶)]: 515 --->
//│ 	case ls⁹ of {LH_C h⁷ t¹¹ => [LH_C f⁵(h⁷) map_₀_₀(f⁵, t¹¹)] | LH_N  => [LH_N]}: 905
//│ [LH_N]: 516 --->
//│ 	case ls⁹ of {LH_C h⁷ t¹¹ => [LH_C f⁵(h⁷) map_₀_₀(f⁵, t¹¹)] | LH_N  => [LH_N]}: 905
//│ [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))]: 600 --->
//│ 	case _lh_comp_plus_arg1¹ of {Complex _lh_comp_plus_Complex_0² _lh_comp_plus_Complex_1² => case _lh_comp_plus_arg2¹ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰} | _  => error⁰}: 853
//│ [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 721 --->
//│ 	case ls⁵ of {LH_C h⁴ t⁶ => [LH_C f³(h⁴) map_₁_₀(f³, t⁶)] | LH_N  => [LH_N]}: 517
//│ [LH_N]: 735 --->
//│ 	case ls⁵ of {LH_C h⁴ t⁶ => [LH_C f³(h⁴) map_₁_₀(f³, t⁶)] | LH_N  => [LH_N]}: 517
//│ [LH_C h⁶ take_lz_₀_₀((n¹ - 1), t¹⁰)]: 830 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge_₀_₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹)) | _  => error⁰}: 538
//│ [LH_N]: 831 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge_₀_₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹)) | _  => error⁰}: 538
//│ [LH_N]: 833 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge_₀_₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹)) | _  => error⁰}: 538
//│ ------------------
//│ case ls⁵ of {LH_C h⁴ t⁶ => [LH_C f³(h⁴) map_₁_₀(f³, t⁶)] | LH_N  => [LH_N]}: 517 --->
//│ 	[LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 721
//│ 	[LH_N]: 735
//│ case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge_₀_₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹)) | _  => error⁰}: 538 --->
//│ 	[LH_C h⁶ take_lz_₀_₀((n¹ - 1), t¹⁰)]: 830
//│ 	[LH_N]: 831
//│ 	[LH_N]: 833
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 725 --->
//│ 	[LH_C a² enumFromTo_₁_₀((a² + 1), b²)]: 472
//│ 	[LH_N]: 473
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo_₁_₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 736 --->
//│ 	[LH_C a³ enumFromTo_₀_₀((a³ + 1), b³)]: 501
//│ 	[LH_N]: 502
//│ case _lh_comp_plus_arg1¹ of {Complex _lh_comp_plus_Complex_0² _lh_comp_plus_Complex_1² => case _lh_comp_plus_arg2¹ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰} | _  => error⁰}: 853 --->
//│ 	[Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))]: 600
//│ case ls⁹ of {LH_C h⁷ t¹¹ => [LH_C f⁵(h⁷) map_₀_₀(f⁵, t¹¹)] | LH_N  => [LH_N]}: 905 --->
//│ 	[LH_C f³(h⁴) map_₁_₀(f³, t⁶)]: 515
//│ 	[LH_N]: 516
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMandel_nofib_₀_₀(primId⁰(0))
//│ def testMandel_nofib_₀_₀(_lh_testMandel_nofib_arg1²) = 
//│ 	let minx² = (0.0 -. 2.0)
//│ 	in let miny² = (0.0 -. 2.0)
//│ 	in let maxx² = 2.0
//│ 	in let maxy² = 2.0
//│ 	in let screenX² = 80
//│ 	in let screenY² = 80
//│ 	in let limit² = 75
//│ 	in mandelset_₀_₀(minx², miny², maxx², maxy², screenX², screenY², limit²)
//│ 	where
//│ 	def mandelset_₀_₀(_lh_mandelset_arg1², _lh_mandelset_arg2², _lh_mandelset_arg3², _lh_mandelset_arg4², _lh_mandelset_arg5⁴, _lh_mandelset_arg6², _lh_mandelset_arg7²) = 
//│ 		let prettyRGB² = (fun s⁴ -> 
//│ 			let t¹⁴ = (_lh_mandelset_arg7² - s⁴)
//│ 			in [LH_P3 s⁴ t¹⁴ t¹⁴])
//│ 		in let windowToViewport⁶ = (fun s⁵ -> (fun t¹⁵ -> [Complex (_lh_mandelset_arg1² +. ((float_of_int⁰(s⁵) *. (_lh_mandelset_arg3² -. _lh_mandelset_arg1²)) /. float_of_int⁰(_lh_mandelset_arg5⁴))) (_lh_mandelset_arg2² +. ((float_of_int⁰(t¹⁵) *. (_lh_mandelset_arg4² -. _lh_mandelset_arg2²)) /. float_of_int⁰(_lh_mandelset_arg6²)))]))
//│ 		in let result² = parallelMandel_₀_₀(
//│ 			let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para⁵ -> _lh_listcomp_fun_para⁵(_lh_listcomp_fun¹¹, _lh_mandelset_arg5⁴, windowToViewport⁶))
//│ 			in _lh_listcomp_fun¹¹(enumFromTo_₀_₀(1, _lh_mandelset_arg6²)), _lh_mandelset_arg7², (myMax_₀_₀((_lh_mandelset_arg3² -. _lh_mandelset_arg1²), (_lh_mandelset_arg4² -. _lh_mandelset_arg2²)) /. 2.0))
//│ 		in createPixmap_₀_₀(_lh_mandelset_arg5⁴, _lh_mandelset_arg6², _lh_mandelset_arg7², map_₀_₀(prettyRGB², result²))
//│ 		where
//│ 		def createPixmap_₀_₀(_lh_createPixmap_arg1², _lh_createPixmap_arg2², _lh_createPixmap_arg3², _lh_createPixmap_arg4²) = 
//│ 			[Pixmap _lh_createPixmap_arg1² _lh_createPixmap_arg2² _lh_createPixmap_arg3² _lh_createPixmap_arg4²]
//│ 		def enumFromTo_₀_₀(a⁵, b⁵) = 
//│ 			if (a⁵ <= b⁵) then 
//│ 				let _lh_listcomp_fun_ls_t⁷ = enumFromTo_₀_₀((a⁵ + 1), b⁵)
//│ 				in let _lh_listcomp_fun_ls_h⁷ = a⁵
//│ 				in (fun _lh_listcomp_fun⁸ -> (fun _lh_mandelset_arg5² -> (fun windowToViewport⁴ -> 
//│ 					let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁴ -> _lh_listcomp_fun_para⁴(_lh_listcomp_fun_ls_h⁷, _lh_listcomp_fun⁹, windowToViewport⁴, _lh_listcomp_fun_ls_t⁷, _lh_listcomp_fun⁸))
//│ 					in _lh_listcomp_fun⁹(enumFromTo_₁_₀(1, _lh_mandelset_arg5²))))) else (fun _lh_listcomp_fun¹⁰ -> (fun _lh_mandelset_arg5³ -> (fun windowToViewport⁵ -> (fun f¹¹ -> (fun f¹² -> [LH_N])))))
//│ 		def enumFromTo_₁_₀(a⁴, b⁴) = 
//│ 			if (a⁴ <= b⁴) then 
//│ 				let _lh_listcomp_fun_ls_t⁴ = enumFromTo_₁_₀((a⁴ + 1), b⁴)
//│ 				in let _lh_listcomp_fun_ls_h⁴ = a⁴
//│ 				in (fun _lh_listcomp_fun_ls_h⁵ -> (fun _lh_listcomp_fun⁴ -> (fun windowToViewport² -> (fun _lh_listcomp_fun_ls_t⁵ -> (fun _lh_listcomp_fun⁵ -> 
//│ 					let t¹² = _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)
//│ 					in let h⁸ = windowToViewport²(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun_ls_h⁵)
//│ 					in (fun f⁹ -> 
//│ 						let t¹³ = map_₁_₀(f⁹, t¹²)
//│ 						in let h⁹ = f⁹(h⁸)
//│ 						in (fun f¹⁰ -> [LH_C f¹⁰(h⁹) map_₀_₀(f¹⁰, t¹³)]))))))) else (fun _lh_listcomp_fun_ls_h⁶ -> (fun _lh_listcomp_fun⁶ -> (fun windowToViewport³ -> (fun _lh_listcomp_fun_ls_t⁶ -> (fun _lh_listcomp_fun⁷ -> _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁶))))))
//│ 		def map_₀_₀(f⁷, ls¹²) = 
//│ 			ls¹²(f⁷)
//│ 		def myMax_₀_₀(_lh_myMax_arg1², _lh_myMax_arg2²) = 
//│ 			if polyGt⁰(_lh_myMax_arg1², _lh_myMax_arg2²) then _lh_myMax_arg1² else _lh_myMax_arg2²
//│ 		def parallelMandel_₀_₀(_lh_parallelMandel_arg1², _lh_parallelMandel_arg2², _lh_parallelMandel_arg3²) = 
//│ 			map_₁_₀(whenDiverge_₀_₀(_lh_parallelMandel_arg2², _lh_parallelMandel_arg3²), _lh_parallelMandel_arg1²)
//│ 			where
//│ 			def map_₁_₀(f⁶, ls¹¹) = 
//│ 				ls¹¹(f⁶)
//│ 			def whenDiverge_₀_₀(_lh_whenDiverge_arg1², _lh_whenDiverge_arg2⁵, _lh_whenDiverge_arg3²) = 
//│ 				let walkIt⁵ = (fun ls¹⁴ -> 
//│ 					let _lh_matchIdent² = ls¹⁴
//│ 					in _lh_matchIdent²(_lh_whenDiverge_arg2⁵, walkIt⁵))
//│ 				in walkIt⁵(take_lz_₀_₀(_lh_whenDiverge_arg1², mandel_₀_₀(_lh_whenDiverge_arg3²)))
//│ 				where
//│ 				def diverge_₀_₀(_lh_diverge_arg1², _lh_diverge_arg2²) = 
//│ 					polyGt⁰(comp_magnitude_₀_₀(_lh_diverge_arg1²), _lh_diverge_arg2²)
//│ 					where
//│ 					def comp_magnitude_₀_₀(_lh_comp_magnitude_arg1²) = 
//│ 						case _lh_comp_magnitude_arg1² of {
//│ 							Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹))
//│ 							| _  => error⁰}
//│ 				def mandel_₀_₀(_lh_mandel_arg1²) = 
//│ 					let infiniteMandel² = lazy⁰([LH_C _lh_mandel_arg1² map_lz_₀_₀((fun z² -> comp_plus_₀_₀(comp_times_₀_₀(z², z²), _lh_mandel_arg1²)), infiniteMandel²)])
//│ 					in infiniteMandel²
//│ 					where
//│ 					def comp_plus_₀_₀(_lh_comp_plus_arg1², _lh_comp_plus_arg2²) = 
//│ 						_lh_comp_plus_arg1²(_lh_comp_plus_arg2²)
//│ 					def comp_times_₀_₀(_lh_comp_times_arg1², _lh_comp_times_arg2²) = 
//│ 						case _lh_comp_times_arg1² of {
//│ 							Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2² of {
//│ 								Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => 
//│ 									let _lh_comp_plus_Complex_1⁴ = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))
//│ 									in let _lh_comp_plus_Complex_0⁴ = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³))
//│ 									in (fun _lh_comp_plus_arg2³ -> case _lh_comp_plus_arg2³ of {
//│ 										Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0⁴ +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1⁴ +. _lh_comp_plus_Complex_1³)]
//│ 										| _  => error⁰})
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 					def map_lz_₀_₀(f⁸, ls¹³) = 
//│ 						lazy⁰(case force⁰(ls¹³) of {
//│ 							LH_C h⁵ t⁷ => [LH_C f⁸(h⁵) map_lz_₀_₀(f⁸, t⁷)]
//│ 							| LH_N  => [LH_N]})
//│ 				def take_lz_₀_₀(n², ls¹⁰) = 
//│ 					if (n² > 0) then case force⁰(ls¹⁰) of {
//│ 						LH_C h⁶ t¹⁰ => 
//│ 							let _lh_whenDiverge_LH_C_1² = take_lz_₀_₀((n² - 1), t¹⁰)
//│ 							in let _lh_whenDiverge_LH_C_0² = h⁶
//│ 							in (fun _lh_whenDiverge_arg2² -> (fun walkIt² -> if diverge_₀_₀(_lh_whenDiverge_LH_C_0², _lh_whenDiverge_arg2²) then 0 else (1 + walkIt²(_lh_whenDiverge_LH_C_1²))))
//│ 						| LH_N  => (fun _lh_whenDiverge_arg2³ -> (fun walkIt³ -> 0))} else (fun _lh_whenDiverge_arg2⁴ -> (fun walkIt⁴ -> 0))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
