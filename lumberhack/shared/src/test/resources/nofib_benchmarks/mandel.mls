:NewParser
:ParseOnly

:lhInHaskell
:lhGenOCaml
myMax a b = if polyGt a b then a else b
data Complex a = Complex a a deriving (Eq, Show)
comp_magnitude (Complex a b) = (a *. a) +. (b *. b)
comp_times (Complex a b) (Complex c d) = Complex ((a *. c) -. (b *. d)) ((a *. d) +. (b *. c))
comp_plus (Complex a b) (Complex c d) = Complex (a +. c) (b +. d)
mandel c = 
  let infiniteMandel = lazy (c : (map_lz (\z -> comp_plus (comp_times z z) c) (infiniteMandel))) in
  infiniteMandel
whenDiverge::  Int -> Double -> Complex Double -> Int
whenDiverge limit radius c =
  let walkIt = \ls -> case ls of { [] -> 0; (x:xs) -> if (diverge x radius) then 0 else 1 + (walkIt xs) } in
  walkIt (take_lz limit (mandel c))
-- VERY IMPORTANT FUNCTION: sits in inner loop
diverge::Complex Double -> Double -> Bool
diverge cmplx radius = polyGt (comp_magnitude cmplx) radius
parallelMandel:: [Complex Double] -> Int -> Double -> [Int]
parallelMandel mat limit radius = map (whenDiverge limit radius) mat
-- mandelset::Double -> 			-- Minimum X viewport
-- 	         Double -> 			-- Minimum Y viewport
-- 	         Double -> 			-- Maximum X viewport
-- 	         Double ->			-- maximum Y viewport
-- 	         Integer -> 			-- Window width
-- 	         Integer -> 			-- Window height
-- 	         Int -> 			-- Window depth
-- 	         PixMap			-- result pixmap
mandelset x y x' y' screenX screenY lIMIT =
  let prettyRGB = (\s -> let t = (lIMIT - s) in (s,t,t)) in
  let windowToViewport = \s -> \t -> (Complex (x +. (((float_of_int s) *. (x' -. x)) /. (float_of_int screenX))) (y +. (((float_of_int t) *. (y' -. y)) /. (float_of_int screenY)))) in
  let result = parallelMandel [windowToViewport s t | t <- [1..screenY] , s<-[1..screenX]] lIMIT ((myMax (x'-.x) (y'-.y)) /. 2.0) in
  createPixmap screenX screenY lIMIT (map prettyRGB result)
data PixMap = Pixmap Integer Integer Int [(Int,Int,Int)] deriving Show
createPixmap::Integer -> Integer -> Int -> [(Int,Int,Int)] -> PixMap
createPixmap width height max colours = Pixmap width height max colours
testMandel_nofib dummy =
  let minx = 0.0 -. 2.0 in
  let miny = 0.0 -. 2.0 in
  let maxx = 2.0 in
  let maxy = 2.0 in
  let screenX = 80 in
  let screenY = 80 in
  let limit = 75 in
  mandelset minx miny maxx maxy screenX screenY limit
testMandel_nofib $ primId 0
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMandel_nofib₀^1398(primId⁰(0))
//│ def comp_magnitude₀(_lh_comp_magnitude_arg1¹) = case _lh_comp_magnitude_arg1¹ of {
//│ 	Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹))
//│ 	| _  => error⁰}
//│ def comp_plus₀(_lh_comp_plus_arg1¹, _lh_comp_plus_arg2¹) = case _lh_comp_plus_arg1¹ of {
//│ 	Complex _lh_comp_plus_Complex_0² _lh_comp_plus_Complex_1² => case _lh_comp_plus_arg2¹ of {
//│ 		Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def comp_times₀(_lh_comp_times_arg1¹, _lh_comp_times_arg2¹) = case _lh_comp_times_arg1¹ of {
//│ 	Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2¹ of {
//│ 		Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def createPixmap₀(_lh_createPixmap_arg1¹, _lh_createPixmap_arg2¹, _lh_createPixmap_arg3¹, _lh_createPixmap_arg4¹) = [Pixmap _lh_createPixmap_arg1¹ _lh_createPixmap_arg2¹ _lh_createPixmap_arg3¹ _lh_createPixmap_arg4¹]
//│ def diverge₀(_lh_diverge_arg1¹, _lh_diverge_arg2¹) = polyGt⁰(comp_magnitude₀^1390(_lh_diverge_arg1¹), _lh_diverge_arg2¹)
//│ def enumFromTo₀(a⁵, b²) = if (a⁵ <= b²) then [LH_C a⁵ enumFromTo₀^1210((a⁵ + 1), b²)] else [LH_N]
//│ def enumFromTo₁(a⁶, b³) = if (a⁶ <= b³) then [LH_C a⁶ enumFromTo₁^1356((a⁶ + 1), b³)] else [LH_N]
//│ def mandelset₀(_lh_mandelset_arg1¹, _lh_mandelset_arg2¹, _lh_mandelset_arg3¹, _lh_mandelset_arg4¹, _lh_mandelset_arg5¹, _lh_mandelset_arg6¹, _lh_mandelset_arg7¹) = 
//│ 	let prettyRGB¹ = (fun s² -> 
//│ 		let t²⁵ = (_lh_mandelset_arg7¹ - s²)
//│ 		in [LH_P3 s² t²⁵ t²⁵])
//│ 	in let windowToViewport¹ = (fun s³ -> (fun t²⁶ -> [Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t²⁶) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]))
//│ 	in let result¹ = parallelMandel₀^1017(
//│ 		let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 			LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 				let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 					LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 					| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 				in _lh_listcomp_fun³(enumFromTo₁^1035(1, _lh_mandelset_arg5¹))
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun²(enumFromTo₀^1046(1, _lh_mandelset_arg6¹)), _lh_mandelset_arg7¹, (myMax₀^1057((_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹), (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. 2.0))
//│ 	in createPixmap₀^1074(_lh_mandelset_arg5¹, _lh_mandelset_arg6¹, _lh_mandelset_arg7¹, map₀^1081(prettyRGB¹, result¹))
//│ def mandel₀(_lh_mandel_arg1¹) = 
//│ 	let infiniteMandel¹ = lazy⁰([LH_C _lh_mandel_arg1¹ map_lz₀^1286((fun z¹ -> comp_plus₀^1287(comp_times₀^1288(z¹, z¹), _lh_mandel_arg1¹)), infiniteMandel¹)])
//│ 	in infiniteMandel¹
//│ def map_lz₀(f¹³, ls²²) = lazy⁰(case force⁰(ls²²) of {
//│ 	LH_C h²¹ t²⁷ => [LH_C f¹³(h²¹) map_lz₀^1231(f¹³, t²⁷)]
//│ 	| LH_N  => [LH_N]})
//│ def map₀(f¹², ls²⁰) = case ls²⁰ of {
//│ 	LH_C h²⁰ t²⁴ => [LH_C f¹²(h²⁰) map₀^951(f¹², t²⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map₁(f¹⁴, ls²⁴) = case ls²⁴ of {
//│ 	LH_C h²³ t²⁹ => [LH_C f¹⁴(h²³) map₁^1318(f¹⁴, t²⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def myMax₀(_lh_myMax_arg1¹, _lh_myMax_arg2¹) = if polyGt⁰(_lh_myMax_arg1¹, _lh_myMax_arg2¹) then _lh_myMax_arg1¹ else _lh_myMax_arg2¹
//│ def parallelMandel₀(_lh_parallelMandel_arg1¹, _lh_parallelMandel_arg2¹, _lh_parallelMandel_arg3¹) = map₁^1338(whenDiverge₀^1339(_lh_parallelMandel_arg2¹, _lh_parallelMandel_arg3¹), _lh_parallelMandel_arg1¹)
//│ def take_lz₀(n⁴, ls²³) = if (n⁴ > 0) then case force⁰(ls²³) of {
//│ 	LH_C h²² t²⁸ => [LH_C h²² take_lz₀^1251((n⁴ - 1), t²⁸)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testMandel_nofib₀(_lh_testMandel_nofib_arg1¹) = 
//│ 	let minx¹ = (0.0 -. 2.0)
//│ 	in let miny¹ = (0.0 -. 2.0)
//│ 	in let maxx¹ = 2.0
//│ 	in let maxy¹ = 2.0
//│ 	in let screenX¹ = 80
//│ 	in let screenY¹ = 80
//│ 	in let limit¹ = 75
//│ 	in mandelset₀^1147(minx¹, miny¹, maxx¹, maxy¹, screenX¹, screenY¹, limit¹)
//│ def whenDiverge₀(_lh_whenDiverge_arg1¹, _lh_whenDiverge_arg2¹, _lh_whenDiverge_arg3¹) = 
//│ 	let walkIt¹ = (fun ls²¹ -> 
//│ 		let _lh_matchIdent¹ = ls²¹
//│ 		in case _lh_matchIdent¹ of {
//│ 			LH_N  => 0
//│ 			| LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge₀^1173(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹))
//│ 			| _  => error⁰})
//│ 	in walkIt¹(take_lz₀^1192(_lh_whenDiverge_arg1¹, mandel₀^1195(_lh_whenDiverge_arg3¹)))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec comp_magnitude_d0 _lh_comp_magnitude_arg1_1 =
//│ 		  (match _lh_comp_magnitude_arg1_1 with
//│ 		    | `Complex(_lh_comp_magnitude_Complex_0_1, _lh_comp_magnitude_Complex_1_1) -> 
//│ 		      ((_lh_comp_magnitude_Complex_0_1 *. _lh_comp_magnitude_Complex_0_1) +. (_lh_comp_magnitude_Complex_1_1 *. _lh_comp_magnitude_Complex_1_1))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and comp_plus_d0 _lh_comp_plus_arg1_1 _lh_comp_plus_arg2_1 =
//│ 		  (match _lh_comp_plus_arg1_1 with
//│ 		    | `Complex(_lh_comp_plus_Complex_0_2, _lh_comp_plus_Complex_1_2) -> 
//│ 		      (match _lh_comp_plus_arg2_1 with
//│ 		        | `Complex(_lh_comp_plus_Complex_0_3, _lh_comp_plus_Complex_1_3) -> 
//│ 		          (`Complex((_lh_comp_plus_Complex_0_2 +. _lh_comp_plus_Complex_0_3), (_lh_comp_plus_Complex_1_2 +. _lh_comp_plus_Complex_1_3)))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and comp_times_d0 _lh_comp_times_arg1_1 _lh_comp_times_arg2_1 =
//│ 		  (match _lh_comp_times_arg1_1 with
//│ 		    | `Complex(_lh_comp_times_Complex_0_2, _lh_comp_times_Complex_1_2) -> 
//│ 		      (match _lh_comp_times_arg2_1 with
//│ 		        | `Complex(_lh_comp_times_Complex_0_3, _lh_comp_times_Complex_1_3) -> 
//│ 		          (`Complex(((_lh_comp_times_Complex_0_2 *. _lh_comp_times_Complex_0_3) -. (_lh_comp_times_Complex_1_2 *. _lh_comp_times_Complex_1_3)), ((_lh_comp_times_Complex_0_2 *. _lh_comp_times_Complex_1_3) +. (_lh_comp_times_Complex_1_2 *. _lh_comp_times_Complex_0_3))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and createPixmap_d0 _lh_createPixmap_arg1_1 _lh_createPixmap_arg2_1 _lh_createPixmap_arg3_1 _lh_createPixmap_arg4_1 =
//│ 		  (`Pixmap(_lh_createPixmap_arg1_1, _lh_createPixmap_arg2_1, _lh_createPixmap_arg3_1, _lh_createPixmap_arg4_1))
//│ 		and diverge_d0 _lh_diverge_arg1_1 _lh_diverge_arg2_1 =
//│ 		  ((comp_magnitude_d0 _lh_diverge_arg1_1) > _lh_diverge_arg2_1)
//│ 		and enumFromTo_d0 a_5 b_2 =
//│ 		  (if (a_5 <= b_2) then
//│ 		    (`LH_C(a_5, ((enumFromTo_d0 (a_5 + 1)) b_2)))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and enumFromTo_d1 a_6 b_3 =
//│ 		  (if (a_6 <= b_3) then
//│ 		    (`LH_C(a_6, ((enumFromTo_d1 (a_6 + 1)) b_3)))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and mandelset_d0 _lh_mandelset_arg1_1 _lh_mandelset_arg2_1 _lh_mandelset_arg3_1 _lh_mandelset_arg4_1 _lh_mandelset_arg5_1 _lh_mandelset_arg6_1 _lh_mandelset_arg7_1 =
//│ 		  (let rec prettyRGB_1 = (fun s_2 -> 
//│ 		    (let rec t_2_5 = (_lh_mandelset_arg7_1 - s_2) in
//│ 		      (`LH_P3(s_2, t_2_5, t_2_5)))) in
//│ 		    (let rec windowToViewport_1 = (fun s_3 t_2_6 -> 
//│ 		      (`Complex((_lh_mandelset_arg1_1 +. (((float_of_int s_3) *. (_lh_mandelset_arg3_1 -. _lh_mandelset_arg1_1)) /. (float_of_int _lh_mandelset_arg5_1))), (_lh_mandelset_arg2_1 +. (((float_of_int t_2_6) *. (_lh_mandelset_arg4_1 -. _lh_mandelset_arg2_1)) /. (float_of_int _lh_mandelset_arg6_1)))))) in
//│ 		      (let rec result_1 = (((parallelMandel_d0 (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		        (match _lh_listcomp_fun_para_2 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		            (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		              (match _lh_listcomp_fun_para_3 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_3, _lh_listcomp_fun_ls_t_3) -> 
//│ 		                  (`LH_C(((windowToViewport_1 _lh_listcomp_fun_ls_h_3) _lh_listcomp_fun_ls_h_2), (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3)))
//│ 		                | `LH_N -> 
//│ 		                  (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2))) in
//│ 		              (_lh_listcomp_fun_3 ((enumFromTo_d1 1) _lh_mandelset_arg5_1)))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_2 ((enumFromTo_d0 1) _lh_mandelset_arg6_1)))) _lh_mandelset_arg7_1) (((myMax_d0 (_lh_mandelset_arg3_1 -. _lh_mandelset_arg1_1)) (_lh_mandelset_arg4_1 -. _lh_mandelset_arg2_1)) /. 2.0)) in
//│ 		        ((((createPixmap_d0 _lh_mandelset_arg5_1) _lh_mandelset_arg6_1) _lh_mandelset_arg7_1) ((map_d0 prettyRGB_1) result_1)))))
//│ 		and mandel_d0 _lh_mandel_arg1_1 =
//│ 		  (let rec infiniteMandel_1 = (lazy (`LH_C(_lh_mandel_arg1_1, ((map_lz_d0 (fun z_1 -> 
//│ 		    ((comp_plus_d0 ((comp_times_d0 z_1) z_1)) _lh_mandel_arg1_1))) infiniteMandel_1)))) in
//│ 		    infiniteMandel_1)
//│ 		and map_lz_d0 f_1_3 ls_2_2 =
//│ 		  (lazy (match (Lazy.force ls_2_2) with
//│ 		    | `LH_C(h_2_1, t_2_7) -> 
//│ 		      (`LH_C((f_1_3 h_2_1), ((map_lz_d0 f_1_3) t_2_7)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)))
//│ 		and map_d0 f_1_2 ls_2_0 =
//│ 		  (match ls_2_0 with
//│ 		    | `LH_C(h_2_0, t_2_4) -> 
//│ 		      (`LH_C((f_1_2 h_2_0), ((map_d0 f_1_2) t_2_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N))
//│ 		and map_d1 f_1_4 ls_2_4 =
//│ 		  (match ls_2_4 with
//│ 		    | `LH_C(h_2_3, t_2_9) -> 
//│ 		      (`LH_C((f_1_4 h_2_3), ((map_d1 f_1_4) t_2_9)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N))
//│ 		and myMax_d0 _lh_myMax_arg1_1 _lh_myMax_arg2_1 =
//│ 		  (if (_lh_myMax_arg1_1 > _lh_myMax_arg2_1) then
//│ 		    _lh_myMax_arg1_1
//│ 		  else
//│ 		    _lh_myMax_arg2_1)
//│ 		and parallelMandel_d0 _lh_parallelMandel_arg1_1 _lh_parallelMandel_arg2_1 _lh_parallelMandel_arg3_1 =
//│ 		  ((map_d1 ((whenDiverge_d0 _lh_parallelMandel_arg2_1) _lh_parallelMandel_arg3_1)) _lh_parallelMandel_arg1_1)
//│ 		and take_lz_d0 n_4 ls_2_3 =
//│ 		  (if (n_4 > 0) then
//│ 		    (match (Lazy.force ls_2_3) with
//│ 		      | `LH_C(h_2_2, t_2_8) -> 
//│ 		        (`LH_C(h_2_2, ((take_lz_d0 (n_4 - 1)) t_2_8)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and testMandel_nofib_d0 _lh_testMandel_nofib_arg1_1 =
//│ 		  (let rec minx_1 = (0.0 -. 2.0) in
//│ 		    (let rec miny_1 = (0.0 -. 2.0) in
//│ 		      (let rec maxx_1 = 2.0 in
//│ 		        (let rec maxy_1 = 2.0 in
//│ 		          (let rec screenX_1 = 80 in
//│ 		            (let rec screenY_1 = 80 in
//│ 		              (let rec limit_1 = 75 in
//│ 		                (((((((mandelset_d0 minx_1) miny_1) maxx_1) maxy_1) screenX_1) screenY_1) limit_1))))))))
//│ 		and whenDiverge_d0 _lh_whenDiverge_arg1_1 _lh_whenDiverge_arg2_1 _lh_whenDiverge_arg3_1 =
//│ 		  (let rec walkIt_1 = (fun ls_2_1 -> 
//│ 		    (let rec _lh_matchIdent_1 = ls_2_1 in
//│ 		      (match _lh_matchIdent_1 with
//│ 		        | `LH_N -> 
//│ 		          0
//│ 		        | `LH_C(_lh_whenDiverge_LH_C_0_1, _lh_whenDiverge_LH_C_1_1) -> 
//│ 		          (if ((diverge_d0 _lh_whenDiverge_LH_C_0_1) _lh_whenDiverge_arg2_1) then
//│ 		            0
//│ 		          else
//│ 		            (1 + (walkIt_1 _lh_whenDiverge_LH_C_1_1)))
//│ 		        | _ -> 
//│ 		          (failwith "error")))) in
//│ 		    (walkIt_1 ((take_lz_d0 _lh_whenDiverge_arg1_1) (mandel_d0 _lh_whenDiverge_arg3_1))));;
//│ 		(testMandel_nofib_d0 0)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testMandel_nofib₀^1398]
//│ 	[testMandel_nofib₀^1398 · mandelset₀^1147]
//│ 		[testMandel_nofib₀^1398 · mandelset₀^1147 · createPixmap₀^1074] (hopeless to continue)
//│ 		[testMandel_nofib₀^1398 · mandelset₀^1147 · enumFromTo₀^1046] (hopeless to continue)
//│ 			[testMandel_nofib₀^1398 · mandelset₀^1147 · enumFromTo₀^1046 · enumFromTo₀^1210] ---> [testMandel_nofib₀^1398 · mandelset₀^1147 · enumFromTo₀^1046] (using original def)
//│ 		[testMandel_nofib₀^1398 · mandelset₀^1147 · enumFromTo₁^1035] (hopeless to continue)
//│ 			[testMandel_nofib₀^1398 · mandelset₀^1147 · enumFromTo₁^1035 · enumFromTo₁^1356] ---> [testMandel_nofib₀^1398 · mandelset₀^1147 · enumFromTo₁^1035] (using original def)
//│ 		[testMandel_nofib₀^1398 · mandelset₀^1147 · map₀^1081]
//│ 			[testMandel_nofib₀^1398 · mandelset₀^1147 · map₀^1081 · map₀^951] ---> [testMandel_nofib₀^1398 · mandelset₀^1147 · map₀^1081] (only one)
//│ 		[testMandel_nofib₀^1398 · mandelset₀^1147 · myMax₀^1057] (hopeless to continue)
//│ 		[testMandel_nofib₀^1398 · mandelset₀^1147 · parallelMandel₀^1017] (hopeless to continue)
//│ 			[testMandel_nofib₀^1398 · mandelset₀^1147 · parallelMandel₀^1017 · map₁^1338] (using original def)
//│ 				[testMandel_nofib₀^1398 · mandelset₀^1147 · parallelMandel₀^1017 · map₁^1338 · map₁^1318] ---> [testMandel_nofib₀^1398 · mandelset₀^1147 · parallelMandel₀^1017 · map₁^1338] (using original def)
//│ 			[testMandel_nofib₀^1398 · mandelset₀^1147 · parallelMandel₀^1017 · whenDiverge₀^1339] (using original def)
//│ 				[testMandel_nofib₀^1398 · mandelset₀^1147 · parallelMandel₀^1017 · whenDiverge₀^1339 · diverge₀^1173] (using original def)
//│ 					[testMandel_nofib₀^1398 · mandelset₀^1147 · parallelMandel₀^1017 · whenDiverge₀^1339 · diverge₀^1173 · comp_magnitude₀^1390] (using original def)
//│ 				[testMandel_nofib₀^1398 · mandelset₀^1147 · parallelMandel₀^1017 · whenDiverge₀^1339 · mandel₀^1195] (using original def)
//│ 					[testMandel_nofib₀^1398 · mandelset₀^1147 · parallelMandel₀^1017 · whenDiverge₀^1339 · mandel₀^1195 · comp_plus₀^1287] (using original def)
//│ 					[testMandel_nofib₀^1398 · mandelset₀^1147 · parallelMandel₀^1017 · whenDiverge₀^1339 · mandel₀^1195 · comp_times₀^1288] (using original def)
//│ 					[testMandel_nofib₀^1398 · mandelset₀^1147 · parallelMandel₀^1017 · whenDiverge₀^1339 · mandel₀^1195 · map_lz₀^1286] (using original def)
//│ 						[testMandel_nofib₀^1398 · mandelset₀^1147 · parallelMandel₀^1017 · whenDiverge₀^1339 · mandel₀^1195 · map_lz₀^1286 · map_lz₀^1231] ---> [testMandel_nofib₀^1398 · mandelset₀^1147 · parallelMandel₀^1017 · whenDiverge₀^1339 · mandel₀^1195 · map_lz₀^1286] (using original def)
//│ 				[testMandel_nofib₀^1398 · mandelset₀^1147 · parallelMandel₀^1017 · whenDiverge₀^1339 · take_lz₀^1192] (using original def)
//│ 					[testMandel_nofib₀^1398 · mandelset₀^1147 · parallelMandel₀^1017 · whenDiverge₀^1339 · take_lz₀^1192 · take_lz₀^1251] ---> [testMandel_nofib₀^1398 · mandelset₀^1147 · parallelMandel₀^1017 · whenDiverge₀^1339 · take_lz₀^1192] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testMandel_nofib₀₀(primId⁰(0))
//│ def testMandel_nofib₀₀(_lh_testMandel_nofib_arg1¹) = 
//│ 	let minx¹ = (0.0 -. 2.0)
//│ 	in let miny¹ = (0.0 -. 2.0)
//│ 	in let maxx¹ = 2.0
//│ 	in let maxy¹ = 2.0
//│ 	in let screenX¹ = 80
//│ 	in let screenY¹ = 80
//│ 	in let limit¹ = 75
//│ 	in mandelset₀₀(minx¹, miny¹, maxx¹, maxy¹, screenX¹, screenY¹, limit¹)
//│ 	where
//│ 	def mandelset₀₀(_lh_mandelset_arg1¹, _lh_mandelset_arg2¹, _lh_mandelset_arg3¹, _lh_mandelset_arg4¹, _lh_mandelset_arg5¹, _lh_mandelset_arg6¹, _lh_mandelset_arg7¹) = 
//│ 		let prettyRGB¹ = (fun s² -> 
//│ 			let t⁶ = (_lh_mandelset_arg7¹ - s²)
//│ 			in [LH_P3 s² t⁶ t⁶])
//│ 		in let windowToViewport¹ = (fun s³ -> (fun t⁷ -> [Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁷) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]))
//│ 		in let result¹ = parallelMandel₀₀(
//│ 			let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 				LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => 
//│ 					let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 						LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 						| LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ 					in _lh_listcomp_fun³(enumFromTo₁₀(1, _lh_mandelset_arg5¹))
//│ 				| LH_N  => [LH_N]})
//│ 			in _lh_listcomp_fun²(enumFromTo₀₀(1, _lh_mandelset_arg6¹)), _lh_mandelset_arg7¹, (myMax₀₀((_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹), (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. 2.0))
//│ 		in createPixmap₀₀(_lh_mandelset_arg5¹, _lh_mandelset_arg6¹, _lh_mandelset_arg7¹, map₀₀(prettyRGB¹, result¹))
//│ 		where
//│ 		def createPixmap₀₀(_lh_createPixmap_arg1¹, _lh_createPixmap_arg2¹, _lh_createPixmap_arg3¹, _lh_createPixmap_arg4¹) = 
//│ 			[Pixmap _lh_createPixmap_arg1¹ _lh_createPixmap_arg2¹ _lh_createPixmap_arg3¹ _lh_createPixmap_arg4¹]
//│ 		def enumFromTo₀₀(a³, b³) = 
//│ 			if (a³ <= b³) then [LH_C a³ enumFromTo₀₀((a³ + 1), b³)] else [LH_N]
//│ 		def enumFromTo₁₀(a², b²) = 
//│ 			if (a² <= b²) then [LH_C a² enumFromTo₁₀((a² + 1), b²)] else [LH_N]
//│ 		def map₀₀(f⁴, ls⁶) = 
//│ 			case ls⁶ of {
//│ 				LH_C h⁵ t⁹ => [LH_C f⁴(h⁵) map₀₀(f⁴, t⁹)]
//│ 				| LH_N  => [LH_N]}
//│ 		def myMax₀₀(_lh_myMax_arg1¹, _lh_myMax_arg2¹) = 
//│ 			if polyGt⁰(_lh_myMax_arg1¹, _lh_myMax_arg2¹) then _lh_myMax_arg1¹ else _lh_myMax_arg2¹
//│ 		def parallelMandel₀₀(_lh_parallelMandel_arg1¹, _lh_parallelMandel_arg2¹, _lh_parallelMandel_arg3¹) = 
//│ 			map₁₀(whenDiverge₀₀(_lh_parallelMandel_arg2¹, _lh_parallelMandel_arg3¹), _lh_parallelMandel_arg1¹)
//│ 			where
//│ 			def map₁₀(f⁵, ls⁷) = 
//│ 				case ls⁷ of {
//│ 					LH_C h⁶ t¹⁰ => [LH_C f⁵(h⁶) map₁₀(f⁵, t¹⁰)]
//│ 					| LH_N  => [LH_N]}
//│ 			def whenDiverge₀₀(_lh_whenDiverge_arg1¹, _lh_whenDiverge_arg2¹, _lh_whenDiverge_arg3¹) = 
//│ 				let walkIt¹ = (fun ls⁸ -> 
//│ 					let _lh_matchIdent¹ = ls⁸
//│ 					in case _lh_matchIdent¹ of {
//│ 						LH_N  => 0
//│ 						| LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge₀₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹))
//│ 						| _  => error⁰})
//│ 				in walkIt¹(take_lz₀₀(_lh_whenDiverge_arg1¹, mandel₀₀(_lh_whenDiverge_arg3¹)))
//│ 				where
//│ 				def diverge₀₀(_lh_diverge_arg1¹, _lh_diverge_arg2¹) = 
//│ 					polyGt⁰(comp_magnitude₀₀(_lh_diverge_arg1¹), _lh_diverge_arg2¹)
//│ 					where
//│ 					def comp_magnitude₀₀(_lh_comp_magnitude_arg1¹) = 
//│ 						case _lh_comp_magnitude_arg1¹ of {
//│ 							Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹))
//│ 							| _  => error⁰}
//│ 				def mandel₀₀(_lh_mandel_arg1¹) = 
//│ 					let infiniteMandel¹ = lazy⁰([LH_C _lh_mandel_arg1¹ map_lz₀₀((fun z¹ -> comp_plus₀₀(comp_times₀₀(z¹, z¹), _lh_mandel_arg1¹)), infiniteMandel¹)])
//│ 					in infiniteMandel¹
//│ 					where
//│ 					def comp_plus₀₀(_lh_comp_plus_arg1¹, _lh_comp_plus_arg2¹) = 
//│ 						case _lh_comp_plus_arg1¹ of {
//│ 							Complex _lh_comp_plus_Complex_0² _lh_comp_plus_Complex_1² => case _lh_comp_plus_arg2¹ of {
//│ 								Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 					def comp_times₀₀(_lh_comp_times_arg1¹, _lh_comp_times_arg2¹) = 
//│ 						case _lh_comp_times_arg1¹ of {
//│ 							Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2¹ of {
//│ 								Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))]
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 					def map_lz₀₀(f³, ls⁵) = 
//│ 						lazy⁰(case force⁰(ls⁵) of {
//│ 							LH_C h⁴ t⁸ => [LH_C f³(h⁴) map_lz₀₀(f³, t⁸)]
//│ 							| LH_N  => [LH_N]})
//│ 				def take_lz₀₀(n¹, ls⁹) = 
//│ 					if (n¹ > 0) then case force⁰(ls⁹) of {
//│ 						LH_C h⁷ t¹¹ => [LH_C h⁷ take_lz₀₀((n¹ - 1), t¹¹)]
//│ 						| LH_N  => [LH_N]} else [LH_N]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁷) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]: 510 --->
//│ 	case _lh_comp_plus_arg2¹ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰}: 710
//│ 	case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))] | _  => error⁰}: 861
//│ 	case _lh_comp_times_arg1¹ of {Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))] | _  => error⁰} | _  => error⁰}: 863
//│ 	case _lh_comp_magnitude_arg1¹ of {Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹)) | _  => error⁰}: 881
//│ [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 524 --->
//│ 	case ls⁷ of {LH_C h⁶ t¹⁰ => [LH_C f⁵(h⁶) map₁₀(f⁵, t¹⁰)] | LH_N  => [LH_N]}: 764
//│ [LH_N]: 538 --->
//│ 	case ls⁷ of {LH_C h⁶ t¹⁰ => [LH_C f⁵(h⁶) map₁₀(f⁵, t¹⁰)] | LH_N  => [LH_N]}: 764
//│ [LH_C f³(h⁴) map_lz₀₀(f³, t⁸)]: 605 --->
//│ 	case force⁰(ls⁵) of {LH_C h⁴ t⁸ => [LH_C f³(h⁴) map_lz₀₀(f³, t⁸)] | LH_N  => [LH_N]}: 607
//│ 	case force⁰(ls⁹) of {LH_C h⁷ t¹¹ => [LH_C h⁷ take_lz₀₀((n¹ - 1), t¹¹)] | LH_N  => [LH_N]}: 903
//│ [LH_N]: 606 --->
//│ 	case force⁰(ls⁵) of {LH_C h⁴ t⁸ => [LH_C f³(h⁴) map_lz₀₀(f³, t⁸)] | LH_N  => [LH_N]}: 607
//│ 	case force⁰(ls⁹) of {LH_C h⁷ t¹¹ => [LH_C h⁷ take_lz₀₀((n¹ - 1), t¹¹)] | LH_N  => [LH_N]}: 903
//│ [LH_C a² enumFromTo₁₀((a² + 1), b²)]: 658 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 528
//│ [LH_N]: 659 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 528
//│ [LH_C _lh_mandel_arg1¹ map_lz₀₀((fun z¹ -> comp_plus₀₀(comp_times₀₀(z¹, z¹), _lh_mandel_arg1¹)), infiniteMandel¹)]: 679 --->
//│ 	case force⁰(ls⁵) of {LH_C h⁴ t⁸ => [LH_C f³(h⁴) map_lz₀₀(f³, t⁸)] | LH_N  => [LH_N]}: 607
//│ 	case force⁰(ls⁹) of {LH_C h⁷ t¹¹ => [LH_C h⁷ take_lz₀₀((n¹ - 1), t¹¹)] | LH_N  => [LH_N]}: 903
//│ [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]: 708 --->
//│ 	case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))] | _  => error⁰}: 861
//│ 	case _lh_comp_times_arg1¹ of {Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))] | _  => error⁰} | _  => error⁰}: 863
//│ 	case _lh_comp_magnitude_arg1¹ of {Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹)) | _  => error⁰}: 881
//│ [LH_C f⁵(h⁶) map₁₀(f⁵, t¹⁰)]: 762 --->
//│ 	case ls⁶ of {LH_C h⁵ t⁹ => [LH_C f⁴(h⁵) map₀₀(f⁴, t⁹)] | LH_N  => [LH_N]}: 631
//│ [LH_N]: 763 --->
//│ 	case ls⁶ of {LH_C h⁵ t⁹ => [LH_C f⁴(h⁵) map₀₀(f⁴, t⁹)] | LH_N  => [LH_N]}: 631
//│ [LH_C a³ enumFromTo₀₀((a³ + 1), b³)]: 826 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₁₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 539
//│ [LH_N]: 827 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₁₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 539
//│ [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))]: 859 --->
//│ 	case _lh_comp_plus_arg1¹ of {Complex _lh_comp_plus_Complex_0² _lh_comp_plus_Complex_1² => case _lh_comp_plus_arg2¹ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰} | _  => error⁰}: 712
//│ [LH_C h⁷ take_lz₀₀((n¹ - 1), t¹¹)]: 901 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge₀₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹)) | _  => error⁰}: 795
//│ [LH_N]: 902 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge₀₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹)) | _  => error⁰}: 795
//│ [LH_N]: 904 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge₀₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹)) | _  => error⁰}: 795
//│ ------------------
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 528 --->
//│ 	[LH_C a² enumFromTo₁₀((a² + 1), b²)]: 658
//│ 	[LH_N]: 659
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₁₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 539 --->
//│ 	[LH_C a³ enumFromTo₀₀((a³ + 1), b³)]: 826
//│ 	[LH_N]: 827
//│ case force⁰(ls⁵) of {LH_C h⁴ t⁸ => [LH_C f³(h⁴) map_lz₀₀(f³, t⁸)] | LH_N  => [LH_N]}: 607 --->
//│ 	[LH_C f³(h⁴) map_lz₀₀(f³, t⁸)]: 605
//│ 	[LH_N]: 606
//│ 	[LH_C _lh_mandel_arg1¹ map_lz₀₀((fun z¹ -> comp_plus₀₀(comp_times₀₀(z¹, z¹), _lh_mandel_arg1¹)), infiniteMandel¹)]: 679
//│ case ls⁶ of {LH_C h⁵ t⁹ => [LH_C f⁴(h⁵) map₀₀(f⁴, t⁹)] | LH_N  => [LH_N]}: 631 --->
//│ 	[LH_C f⁵(h⁶) map₁₀(f⁵, t¹⁰)]: 762
//│ 	[LH_N]: 763
//│ case _lh_comp_plus_arg2¹ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰}: 710 --->
//│ 	[Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁷) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]: 510
//│ case _lh_comp_plus_arg1¹ of {Complex _lh_comp_plus_Complex_0² _lh_comp_plus_Complex_1² => case _lh_comp_plus_arg2¹ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰} | _  => error⁰}: 712 --->
//│ 	[Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))]: 859
//│ case ls⁷ of {LH_C h⁶ t¹⁰ => [LH_C f⁵(h⁶) map₁₀(f⁵, t¹⁰)] | LH_N  => [LH_N]}: 764 --->
//│ 	[LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 524
//│ 	[LH_N]: 538
//│ case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge₀₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹)) | _  => error⁰}: 795 --->
//│ 	[LH_C h⁷ take_lz₀₀((n¹ - 1), t¹¹)]: 901
//│ 	[LH_N]: 902
//│ 	[LH_N]: 904
//│ case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))] | _  => error⁰}: 861 --->
//│ 	[Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁷) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]: 510
//│ 	[Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]: 708
//│ case _lh_comp_times_arg1¹ of {Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2¹ of {Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))] | _  => error⁰} | _  => error⁰}: 863 --->
//│ 	[Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁷) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]: 510
//│ 	[Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]: 708
//│ case _lh_comp_magnitude_arg1¹ of {Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹)) | _  => error⁰}: 881 --->
//│ 	[Complex (_lh_mandelset_arg1¹ +. ((float_of_int⁰(s³) *. (_lh_mandelset_arg3¹ -. _lh_mandelset_arg1¹)) /. float_of_int⁰(_lh_mandelset_arg5¹))) (_lh_mandelset_arg2¹ +. ((float_of_int⁰(t⁷) *. (_lh_mandelset_arg4¹ -. _lh_mandelset_arg2¹)) /. float_of_int⁰(_lh_mandelset_arg6¹)))]: 510
//│ 	[Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)]: 708
//│ case force⁰(ls⁹) of {LH_C h⁷ t¹¹ => [LH_C h⁷ take_lz₀₀((n¹ - 1), t¹¹)] | LH_N  => [LH_N]}: 903 --->
//│ 	[LH_C f³(h⁴) map_lz₀₀(f³, t⁸)]: 605
//│ 	[LH_N]: 606
//│ 	[LH_C _lh_mandel_arg1¹ map_lz₀₀((fun z¹ -> comp_plus₀₀(comp_times₀₀(z¹, z¹), _lh_mandel_arg1¹)), infiniteMandel¹)]: 679
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 524 --->
//│ 	case ls⁷ of {LH_C h⁶ t¹⁰ => [LH_C f⁵(h⁶) map₁₀(f⁵, t¹⁰)] | LH_N  => [LH_N]}: 764
//│ [LH_N]: 538 --->
//│ 	case ls⁷ of {LH_C h⁶ t¹⁰ => [LH_C f⁵(h⁶) map₁₀(f⁵, t¹⁰)] | LH_N  => [LH_N]}: 764
//│ [LH_C a² enumFromTo₁₀((a² + 1), b²)]: 658 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 528
//│ [LH_N]: 659 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 528
//│ [LH_C f⁵(h⁶) map₁₀(f⁵, t¹⁰)]: 762 --->
//│ 	case ls⁶ of {LH_C h⁵ t⁹ => [LH_C f⁴(h⁵) map₀₀(f⁴, t⁹)] | LH_N  => [LH_N]}: 631
//│ [LH_N]: 763 --->
//│ 	case ls⁶ of {LH_C h⁵ t⁹ => [LH_C f⁴(h⁵) map₀₀(f⁴, t⁹)] | LH_N  => [LH_N]}: 631
//│ [LH_C a³ enumFromTo₀₀((a³ + 1), b³)]: 826 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₁₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 539
//│ [LH_N]: 827 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₁₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 539
//│ [Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))]: 859 --->
//│ 	case _lh_comp_plus_arg1¹ of {Complex _lh_comp_plus_Complex_0² _lh_comp_plus_Complex_1² => case _lh_comp_plus_arg2¹ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰} | _  => error⁰}: 712
//│ [LH_C h⁷ take_lz₀₀((n¹ - 1), t¹¹)]: 901 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge₀₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹)) | _  => error⁰}: 795
//│ [LH_N]: 902 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge₀₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹)) | _  => error⁰}: 795
//│ [LH_N]: 904 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge₀₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹)) | _  => error⁰}: 795
//│ ------------------
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}: 528 --->
//│ 	[LH_C a² enumFromTo₁₀((a² + 1), b²)]: 658
//│ 	[LH_N]: 659
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)})
//│ in _lh_listcomp_fun³(enumFromTo₁₀(1, _lh_mandelset_arg5¹)) | LH_N  => [LH_N]}: 539 --->
//│ 	[LH_C a³ enumFromTo₀₀((a³ + 1), b³)]: 826
//│ 	[LH_N]: 827
//│ case ls⁶ of {LH_C h⁵ t⁹ => [LH_C f⁴(h⁵) map₀₀(f⁴, t⁹)] | LH_N  => [LH_N]}: 631 --->
//│ 	[LH_C f⁵(h⁶) map₁₀(f⁵, t¹⁰)]: 762
//│ 	[LH_N]: 763
//│ case _lh_comp_plus_arg1¹ of {Complex _lh_comp_plus_Complex_0² _lh_comp_plus_Complex_1² => case _lh_comp_plus_arg2¹ of {Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0² +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1² +. _lh_comp_plus_Complex_1³)] | _  => error⁰} | _  => error⁰}: 712 --->
//│ 	[Complex ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³)) ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))]: 859
//│ case ls⁷ of {LH_C h⁶ t¹⁰ => [LH_C f⁵(h⁶) map₁₀(f⁵, t¹⁰)] | LH_N  => [LH_N]}: 764 --->
//│ 	[LH_C windowToViewport¹(_lh_listcomp_fun_ls_h³, _lh_listcomp_fun_ls_h²) _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]: 524
//│ 	[LH_N]: 538
//│ case _lh_matchIdent¹ of {LH_N  => 0 | LH_C _lh_whenDiverge_LH_C_0¹ _lh_whenDiverge_LH_C_1¹ => if diverge₀₀(_lh_whenDiverge_LH_C_0¹, _lh_whenDiverge_arg2¹) then 0 else (1 + walkIt¹(_lh_whenDiverge_LH_C_1¹)) | _  => error⁰}: 795 --->
//│ 	[LH_C h⁷ take_lz₀₀((n¹ - 1), t¹¹)]: 901
//│ 	[LH_N]: 902
//│ 	[LH_N]: 904
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMandel_nofib₀₀(primId⁰(0))
//│ def testMandel_nofib₀₀(_lh_testMandel_nofib_arg1²) = 
//│ 	let minx² = (0.0 -. 2.0)
//│ 	in let miny² = (0.0 -. 2.0)
//│ 	in let maxx² = 2.0
//│ 	in let maxy² = 2.0
//│ 	in let screenX² = 80
//│ 	in let screenY² = 80
//│ 	in let limit² = 75
//│ 	in mandelset₀₀(minx², miny², maxx², maxy², screenX², screenY², limit²)
//│ 	where
//│ 	def mandelset₀₀(_lh_mandelset_arg1², _lh_mandelset_arg2², _lh_mandelset_arg3², _lh_mandelset_arg4², _lh_mandelset_arg5⁴, _lh_mandelset_arg6², _lh_mandelset_arg7²) = 
//│ 		let prettyRGB² = (fun s⁴ -> 
//│ 			let t¹² = (_lh_mandelset_arg7² - s⁴)
//│ 			in [LH_P3 s⁴ t¹² t¹²])
//│ 		in let windowToViewport⁴ = (fun s⁵ -> (fun t¹³ -> [Complex (_lh_mandelset_arg1² +. ((float_of_int⁰(s⁵) *. (_lh_mandelset_arg3² -. _lh_mandelset_arg1²)) /. float_of_int⁰(_lh_mandelset_arg5⁴))) (_lh_mandelset_arg2² +. ((float_of_int⁰(t¹³) *. (_lh_mandelset_arg4² -. _lh_mandelset_arg2²)) /. float_of_int⁰(_lh_mandelset_arg6²)))]))
//│ 		in let result² = parallelMandel₀₀(
//│ 			let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁵ -> _lh_listcomp_fun_para⁵(_lh_listcomp_fun⁷, _lh_mandelset_arg5⁴, windowToViewport⁴))
//│ 			in _lh_listcomp_fun⁷(enumFromTo₀₀(1, _lh_mandelset_arg6²)), _lh_mandelset_arg7², (myMax₀₀((_lh_mandelset_arg3² -. _lh_mandelset_arg1²), (_lh_mandelset_arg4² -. _lh_mandelset_arg2²)) /. 2.0))
//│ 		in createPixmap₀₀(_lh_mandelset_arg5⁴, _lh_mandelset_arg6², _lh_mandelset_arg7², map₀₀(prettyRGB², result²))
//│ 		where
//│ 		def createPixmap₀₀(_lh_createPixmap_arg1², _lh_createPixmap_arg2², _lh_createPixmap_arg3², _lh_createPixmap_arg4²) = 
//│ 			[Pixmap _lh_createPixmap_arg1² _lh_createPixmap_arg2² _lh_createPixmap_arg3² _lh_createPixmap_arg4²]
//│ 		def enumFromTo₀₀(a⁴, b⁴) = 
//│ 			if (a⁴ <= b⁴) then 
//│ 				let _lh_listcomp_fun_ls_t⁴ = enumFromTo₀₀((a⁴ + 1), b⁴)
//│ 				in let _lh_listcomp_fun_ls_h⁴ = a⁴
//│ 				in (fun _lh_listcomp_fun⁴ -> (fun _lh_mandelset_arg5² -> (fun windowToViewport² -> 
//│ 					let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁴ -> _lh_listcomp_fun_para⁴(_lh_listcomp_fun_ls_h⁴, _lh_listcomp_fun⁵, windowToViewport², _lh_listcomp_fun_ls_t⁴, _lh_listcomp_fun⁴))
//│ 					in _lh_listcomp_fun⁵(enumFromTo₁₀(1, _lh_mandelset_arg5²))))) else (fun _lh_listcomp_fun⁶ -> (fun _lh_mandelset_arg5³ -> (fun windowToViewport³ -> (fun f⁶ -> (fun f⁷ -> [LH_N])))))
//│ 		def enumFromTo₁₀(a⁵, b⁵) = 
//│ 			if (a⁵ <= b⁵) then 
//│ 				let _lh_listcomp_fun_ls_t⁵ = enumFromTo₁₀((a⁵ + 1), b⁵)
//│ 				in let _lh_listcomp_fun_ls_h⁵ = a⁵
//│ 				in (fun _lh_listcomp_fun_ls_h⁶ -> (fun _lh_listcomp_fun⁸ -> (fun windowToViewport⁵ -> (fun _lh_listcomp_fun_ls_t⁶ -> (fun _lh_listcomp_fun⁹ -> 
//│ 					let t¹⁴ = _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁵)
//│ 					in let h⁸ = windowToViewport⁵(_lh_listcomp_fun_ls_h⁵, _lh_listcomp_fun_ls_h⁶)
//│ 					in (fun f⁹ -> 
//│ 						let t¹⁵ = map₁₀(f⁹, t¹⁴)
//│ 						in let h⁹ = f⁹(h⁸)
//│ 						in (fun f¹⁰ -> [LH_C f¹⁰(h⁹) map₀₀(f¹⁰, t¹⁵)]))))))) else (fun _lh_listcomp_fun_ls_h⁷ -> (fun _lh_listcomp_fun¹⁰ -> (fun windowToViewport⁶ -> (fun _lh_listcomp_fun_ls_t⁷ -> (fun _lh_listcomp_fun¹¹ -> _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t⁷))))))
//│ 		def map₀₀(f⁸, ls¹¹) = 
//│ 			ls¹¹(f⁸)
//│ 		def myMax₀₀(_lh_myMax_arg1², _lh_myMax_arg2²) = 
//│ 			if polyGt⁰(_lh_myMax_arg1², _lh_myMax_arg2²) then _lh_myMax_arg1² else _lh_myMax_arg2²
//│ 		def parallelMandel₀₀(_lh_parallelMandel_arg1², _lh_parallelMandel_arg2², _lh_parallelMandel_arg3²) = 
//│ 			map₁₀(whenDiverge₀₀(_lh_parallelMandel_arg2², _lh_parallelMandel_arg3²), _lh_parallelMandel_arg1²)
//│ 			where
//│ 			def map₁₀(f¹², ls¹⁴) = 
//│ 				ls¹⁴(f¹²)
//│ 			def whenDiverge₀₀(_lh_whenDiverge_arg1², _lh_whenDiverge_arg2², _lh_whenDiverge_arg3²) = 
//│ 				let walkIt² = (fun ls¹⁰ -> 
//│ 					let _lh_matchIdent² = ls¹⁰
//│ 					in _lh_matchIdent²(_lh_whenDiverge_arg2², walkIt²))
//│ 				in walkIt²(take_lz₀₀(_lh_whenDiverge_arg1², mandel₀₀(_lh_whenDiverge_arg3²)))
//│ 				where
//│ 				def diverge₀₀(_lh_diverge_arg1², _lh_diverge_arg2²) = 
//│ 					polyGt⁰(comp_magnitude₀₀(_lh_diverge_arg1²), _lh_diverge_arg2²)
//│ 					where
//│ 					def comp_magnitude₀₀(_lh_comp_magnitude_arg1²) = 
//│ 						case _lh_comp_magnitude_arg1² of {
//│ 							Complex _lh_comp_magnitude_Complex_0¹ _lh_comp_magnitude_Complex_1¹ => ((_lh_comp_magnitude_Complex_0¹ *. _lh_comp_magnitude_Complex_0¹) +. (_lh_comp_magnitude_Complex_1¹ *. _lh_comp_magnitude_Complex_1¹))
//│ 							| _  => error⁰}
//│ 				def mandel₀₀(_lh_mandel_arg1²) = 
//│ 					let infiniteMandel² = lazy⁰([LH_C _lh_mandel_arg1² map_lz₀₀((fun z² -> comp_plus₀₀(comp_times₀₀(z², z²), _lh_mandel_arg1²)), infiniteMandel²)])
//│ 					in infiniteMandel²
//│ 					where
//│ 					def comp_plus₀₀(_lh_comp_plus_arg1², _lh_comp_plus_arg2³) = 
//│ 						_lh_comp_plus_arg1²(_lh_comp_plus_arg2³)
//│ 					def comp_times₀₀(_lh_comp_times_arg1², _lh_comp_times_arg2²) = 
//│ 						case _lh_comp_times_arg1² of {
//│ 							Complex _lh_comp_times_Complex_0² _lh_comp_times_Complex_1² => case _lh_comp_times_arg2² of {
//│ 								Complex _lh_comp_times_Complex_0³ _lh_comp_times_Complex_1³ => 
//│ 									let _lh_comp_plus_Complex_1⁴ = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_1³) +. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_0³))
//│ 									in let _lh_comp_plus_Complex_0⁴ = ((_lh_comp_times_Complex_0² *. _lh_comp_times_Complex_0³) -. (_lh_comp_times_Complex_1² *. _lh_comp_times_Complex_1³))
//│ 									in (fun _lh_comp_plus_arg2² -> case _lh_comp_plus_arg2² of {
//│ 										Complex _lh_comp_plus_Complex_0³ _lh_comp_plus_Complex_1³ => [Complex (_lh_comp_plus_Complex_0⁴ +. _lh_comp_plus_Complex_0³) (_lh_comp_plus_Complex_1⁴ +. _lh_comp_plus_Complex_1³)]
//│ 										| _  => error⁰})
//│ 								| _  => error⁰}
//│ 							| _  => error⁰}
//│ 					def map_lz₀₀(f¹¹, ls¹²) = 
//│ 						lazy⁰(case force⁰(ls¹²) of {
//│ 							LH_C h⁴ t⁸ => [LH_C f¹¹(h⁴) map_lz₀₀(f¹¹, t⁸)]
//│ 							| LH_N  => [LH_N]})
//│ 				def take_lz₀₀(n², ls¹³) = 
//│ 					if (n² > 0) then case force⁰(ls¹³) of {
//│ 						LH_C h⁷ t¹¹ => 
//│ 							let _lh_whenDiverge_LH_C_1² = take_lz₀₀((n² - 1), t¹¹)
//│ 							in let _lh_whenDiverge_LH_C_0² = h⁷
//│ 							in (fun _lh_whenDiverge_arg2³ -> (fun walkIt³ -> if diverge₀₀(_lh_whenDiverge_LH_C_0², _lh_whenDiverge_arg2³) then 0 else (1 + walkIt³(_lh_whenDiverge_LH_C_1²))))
//│ 						| LH_N  => (fun _lh_whenDiverge_arg2⁴ -> (fun walkIt⁴ -> 0))} else (fun _lh_whenDiverge_arg2⁵ -> (fun walkIt⁵ -> 0))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
