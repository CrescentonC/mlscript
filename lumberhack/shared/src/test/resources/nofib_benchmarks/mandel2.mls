

:lhInHaskell
:lhGenOCaml
max a b = if a > b then a else b
data MandTree = NS MandTree MandTree | EW MandTree MandTree | Leaf Colour deriving (Show)
-- Colour - colour of a point or rectangle
type Colour = Int
-- Point - 2-Tuple of integers, (Int1,Int2),
--         where Int1 - x-coord of point,
--               Int2 - y-coord of point.
type Point = (Int,Int)
-- MandTuple
type MandTuple = (Int,Int,Int,Int,Colour)
-- size: Size of window - Square 400x400
size :: Int
size = 200
-- build_tree - Constructs mandtree
build_tree :: Point -> Point -> MandTree
build_tree x1y1 x2y2 =
  case x1y1 of {
    (x1,y1) -> case x2y2 of {
      (x2,y2) ->
            let rec_col = check_perim x1y1 x2y2 in
            let split   = if (x2-x1) >= (y2-y1) then "NS" else "EW" in
            let split_x = (x2+x1) `div` 2 in
            let split_y = (y2+y1) `div` 2 in
            let nsp1    = x1y1 in
            let nsp2    = (split_x, y2) in
            let nsp3    = (split_x+1, y1) in
            let nsp4    = x2y2 in
            let ewp1    = x1y1 in
            let ewp2    = (x2, split_y) in
            let ewp3    = (x1, split_y+1) in
            let ewp4    = x2y2 in
            if rec_col /= (0-1) then
              Leaf rec_col
            else
              if polyEq split "NS" then (NS (build_tree nsp1 nsp2) (build_tree nsp3 nsp4)) else (EW (build_tree ewp1 ewp2) (build_tree ewp3 ewp4))
    }
  }
check_perim :: Point -> Point -> Colour
check_perim x1y1 x2y2 =
  case x1y1 of {
    (x1,y1) -> case x2y2 of {
      (x2,y2) ->
              let col1         = point_colour x1y1 in
              let col2         = point_colour (x2,y1) in
              let col3         = point_colour x2y2 in
              let col4         = point_colour (x1,y2) in
              let corners_diff = if col1 == col2 then (if col1 == col3 then (if col1 == col4 then False else True) else True) else True in
              let check_line = \xcyc xdyd -> 
                                  case xcyc of {
                                    (xc,yc) -> case xdyd of {
                                      (xd,yd) ->
                                        let finished = if (equalp xdyd right) then (xc >= x2)
                                                       else if (equalp xdyd down) then (yc <= y2)
                                                       else if (equalp xdyd left) then (xc <= x1)
                                                       else (yc >= y1)
                                        in
                                        if finished then True
                                        else if ((point_colour xcyc) /= col1) then False
                                        else check_line (xc+xd, yc+yd) (xd,yd)
                                    }
                                  }
              in
              let check_sides =
                            if (check_line (x1+1,y1) right) then
                              if (check_line (x2,y1+1) down) then
                                if (check_line (x2-1,y2) left) then
                                  if (check_line (x1,y2-1) up) then
                                    col1
                                  else
                                    (0-1)
                                else
                                  (0-1)
                              else
                                (0-1)
                            else
                              (0-1)
              in
              if (equalp x1y1 x2y2) then
                 point_colour x1y1
              else if corners_diff then
                 0-1
              else
                check_sides
    }
  }
-- Evaluate the color index of a point
-- This is the algoritm described on page 121 of "The Beauty of Fractals"
-- The code is commented with the step numbers from the algorithm.
-- point_colour - Calculates the dwell value of a point.
point_colour :: Point -> Colour
point_colour (x, y) = check_radius (np x) (nq y) 0 0.0 0.0 -- step1
-- check_radius - Calculates the escape radius of a point
check_radius :: Float -> Float -> Int -> Float -> Float -> Colour
check_radius p q k x y =
  let xn = new_x x y p in
  let yn = new_y x y q in
  let r = radius xn yn in
  let kp = k + 1       in
  if kp == num_cols then 0
  else
    if polyGt r (float_of_int m) then
      kp
    else
      check_radius p q (kp) xn yn
-- M Set Properties.
pmn :: Float -- Min p value.
pmn =  0.0 -. 2.25
pmx :: Float -- Max p value.
pmx =   0.75
qmn :: Float -- Min q value.
qmn = 0.0 -. 1.5
qmx :: Float -- Max q value
qmx = 1.5
m :: Int      -- The escape radius, M.
m =  20
--- Misc functions.
equalp :: Point -> Point -> Bool
equalp (x1, y1) (x2, y2) = ((x1 == x2) && (y1 == y2))
-- Set calculation functions.
num_cols :: Int -- The number of colors; num_cols+1 = length (the_colors).
num_cols = 26
delta_p :: Float      -- The change in p per pixel.
delta_p =  (pmx -. pmn) /. (float_of_int (size - 1))
delta_q :: Float      -- The change in q per pixel.
delta_q =  (qmx -. qmn) /. (float_of_int (size - 1))
np :: Int -> Float     -- Calculate a new value of p.
np x = pmn +. ((float_of_int x) *. delta_p)
nq :: Int -> Float     -- Calculate a new value of q.
nq y = qmn +. ((float_of_int y) *. delta_q)
radius :: Float -> Float -> Float       -- Current radius of apoint (x,y).
radius x y = (x *. x) +. (y *. y)
new_x :: Float -> Float -> Float -> Float       -- iterate new x value.
new_x x y p = (x *. x) -. (y *. y) +. p
new_y :: Float -> Float -> Float -> Float       -- iterate new y value.
new_y x y q = (2.0 *. x *. y) +. q
-- Misc. functions for traversing perimeter of rectangle.
up,down,left,right :: Point
up    = ( 0,0-1)
down  = ( 0, 1)
left  = (0-1, 0)
right = ( 1, 0)
-- finite: forces evaluation of a tree
finite            :: MandTree -> Bool
finite (Leaf c)   =  (c == c)
finite (NS t1 t2) =  ((finite t1) && (finite t2))
finite (EW t1 t2) =  ((finite t1) && (finite t2))
testMandel2_nofib n =
  let size' = max (length n) size in
  let tree = (build_tree (0,0) (size', size' `div` 2)) in
  finite tree
testMandel2_nofib $ primId [60]
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> after expansion >>>>>>>>>>
//│ testMandel2_nofib_lh_₁(primId⁰([LH_C 60 [LH_N]]))
//│ def build_tree_lh_₁(_lh_build_tree_arg1⁰, _lh_build_tree_arg2⁰) = 
//│ 	let _lh_matchIdent⁴ = _lh_build_tree_arg1⁰
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰ => 
//│ 			let _lh_matchIdent⁵ = _lh_build_tree_arg2⁰
//│ 			in case _lh_matchIdent⁵ of {
//│ 				LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹ => 
//│ 					let rec_col⁰ = check_perim_lh_₁(_lh_build_tree_arg1⁰, _lh_build_tree_arg2⁰)
//│ 					in let split⁰ = if ((_lh_build_tree_LH_P2_0¹ - _lh_build_tree_LH_P2_0⁰) >= (_lh_build_tree_LH_P2_1¹ - _lh_build_tree_LH_P2_1⁰)) then [LH_C 'N' [LH_C 'S' [LH_N]]] else [LH_C 'E' [LH_C 'W' [LH_N]]]
//│ 					in let split_x⁰ = div⁰((_lh_build_tree_LH_P2_0¹ + _lh_build_tree_LH_P2_0⁰), 2)
//│ 					in let split_y⁰ = div⁰((_lh_build_tree_LH_P2_1¹ + _lh_build_tree_LH_P2_1⁰), 2)
//│ 					in let nsp1⁰ = _lh_build_tree_arg1⁰
//│ 					in let nsp2⁰ = [LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]
//│ 					in let nsp3⁰ = [LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]
//│ 					in let nsp4⁰ = _lh_build_tree_arg2⁰
//│ 					in let ewp1⁰ = _lh_build_tree_arg1⁰
//│ 					in let ewp2⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]
//│ 					in let ewp3⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]
//│ 					in let ewp4⁰ = _lh_build_tree_arg2⁰
//│ 					in if (rec_col⁰ /= (0 - 1)) then [Leaf rec_col⁰] else if polyEq⁰(split⁰, [LH_C 'N' [LH_C 'S' [LH_N]]]) then [NS build_tree_lh_₁(nsp1⁰, nsp2⁰) build_tree_lh_₁(nsp3⁰, nsp4⁰)] else [EW build_tree_lh_₁(ewp1⁰, ewp2⁰) build_tree_lh_₁(ewp3⁰, ewp4⁰)]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ def check_perim_lh_₁(_lh_check_perim_arg1⁰, _lh_check_perim_arg2⁰) = 
//│ 	let _lh_matchIdent⁰ = _lh_check_perim_arg1⁰
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰ => 
//│ 			let _lh_matchIdent¹ = _lh_check_perim_arg2⁰
//│ 			in case _lh_matchIdent¹ of {
//│ 				LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹ => 
//│ 					let col1⁰ = point_colour_lh_₃(_lh_check_perim_arg1⁰)
//│ 					in let col2⁰ = point_colour_lh_₄([LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1⁰])
//│ 					in let col3⁰ = point_colour_lh_₁(_lh_check_perim_arg2⁰)
//│ 					in let col4⁰ = point_colour_lh_₅([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1¹])
//│ 					in let corners_diff⁰ = if (col1⁰ == col2⁰) then if (col1⁰ == col3⁰) then if (col1⁰ == col4⁰) then [False] else [True] else [True] else [True]
//│ 					in let check_line⁰ = (fun xcyc⁰ -> (fun xdyd⁰ -> 
//│ 						let _lh_matchIdent² = xcyc⁰
//│ 						in case _lh_matchIdent² of {
//│ 							LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1² => 
//│ 								let _lh_matchIdent³ = xdyd⁰
//│ 								in case _lh_matchIdent³ of {
//│ 									LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => 
//│ 										let finished⁰ = if equalp_lh_₁(xdyd⁰, right_lh_₁) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh_₂(xdyd⁰, down_lh_₂) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh_₄(xdyd⁰, left_lh_₂) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ 										in if finished⁰ then [True] else if (point_colour_lh_₆(xcyc⁰) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³])
//│ 									| _  => error⁰}
//│ 							| _  => error⁰}))
//│ 					in let check_sides⁰ = if check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0⁰ + 1) _lh_check_perim_LH_P2_1⁰], right_lh_₂) then if check_line⁰([LH_P2 _lh_check_perim_LH_P2_0¹ (_lh_check_perim_LH_P2_1⁰ + 1)], down_lh_₁) then if check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0¹ - 1) _lh_check_perim_LH_P2_1¹], left_lh_₁) then if check_line⁰([LH_P2 _lh_check_perim_LH_P2_0⁰ (_lh_check_perim_LH_P2_1¹ - 1)], up_lh_₁) then col1⁰ else (0 - 1) else (0 - 1) else (0 - 1) else (0 - 1)
//│ 					in if equalp_lh_₃(_lh_check_perim_arg1⁰, _lh_check_perim_arg2⁰) then point_colour_lh_₂(_lh_check_perim_arg1⁰) else if corners_diff⁰ then (0 - 1) else check_sides⁰
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ def check_radius_lh_₁(_lh_check_radius_arg1⁵, _lh_check_radius_arg2⁵, _lh_check_radius_arg3⁵, _lh_check_radius_arg4⁵, _lh_check_radius_arg5⁵) = 
//│ 	let xn⁵ = new_x_lh_₁(_lh_check_radius_arg4⁵, _lh_check_radius_arg5⁵, _lh_check_radius_arg1⁵)
//│ 	in let yn⁵ = new_y_lh_₁(_lh_check_radius_arg4⁵, _lh_check_radius_arg5⁵, _lh_check_radius_arg2⁵)
//│ 	in let r⁵ = radius_lh_₁(xn⁵, yn⁵)
//│ 	in let kp⁵ = (_lh_check_radius_arg3⁵ + 1)
//│ 	in if (kp⁵ == num_cols_lh_₁) then 0 else if polyGt⁰(r⁵, float_of_int⁰(m_lh_₁)) then kp⁵ else check_radius_lh_₁(_lh_check_radius_arg1⁵, _lh_check_radius_arg2⁵, kp⁵, xn⁵, yn⁵)
//│ def check_radius_lh_₂(_lh_check_radius_arg1⁴, _lh_check_radius_arg2⁴, _lh_check_radius_arg3⁴, _lh_check_radius_arg4⁴, _lh_check_radius_arg5⁴) = 
//│ 	let xn⁴ = new_x_lh_₂(_lh_check_radius_arg4⁴, _lh_check_radius_arg5⁴, _lh_check_radius_arg1⁴)
//│ 	in let yn⁴ = new_y_lh_₂(_lh_check_radius_arg4⁴, _lh_check_radius_arg5⁴, _lh_check_radius_arg2⁴)
//│ 	in let r⁴ = radius_lh_₂(xn⁴, yn⁴)
//│ 	in let kp⁴ = (_lh_check_radius_arg3⁴ + 1)
//│ 	in if (kp⁴ == num_cols_lh_₁) then 0 else if polyGt⁰(r⁴, float_of_int⁰(m_lh_₁)) then kp⁴ else check_radius_lh_₂(_lh_check_radius_arg1⁴, _lh_check_radius_arg2⁴, kp⁴, xn⁴, yn⁴)
//│ def check_radius_lh_₃(_lh_check_radius_arg1³, _lh_check_radius_arg2³, _lh_check_radius_arg3³, _lh_check_radius_arg4³, _lh_check_radius_arg5³) = 
//│ 	let xn³ = new_x_lh_₂(_lh_check_radius_arg4³, _lh_check_radius_arg5³, _lh_check_radius_arg1³)
//│ 	in let yn³ = new_y_lh_₂(_lh_check_radius_arg4³, _lh_check_radius_arg5³, _lh_check_radius_arg2³)
//│ 	in let r³ = radius_lh_₂(xn³, yn³)
//│ 	in let kp³ = (_lh_check_radius_arg3³ + 1)
//│ 	in if (kp³ == num_cols_lh_₁) then 0 else if polyGt⁰(r³, float_of_int⁰(m_lh_₁)) then kp³ else check_radius_lh_₃(_lh_check_radius_arg1³, _lh_check_radius_arg2³, kp³, xn³, yn³)
//│ def check_radius_lh_₄(_lh_check_radius_arg1², _lh_check_radius_arg2², _lh_check_radius_arg3², _lh_check_radius_arg4², _lh_check_radius_arg5²) = 
//│ 	let xn² = new_x_lh_₂(_lh_check_radius_arg4², _lh_check_radius_arg5², _lh_check_radius_arg1²)
//│ 	in let yn² = new_y_lh_₂(_lh_check_radius_arg4², _lh_check_radius_arg5², _lh_check_radius_arg2²)
//│ 	in let r² = radius_lh_₂(xn², yn²)
//│ 	in let kp² = (_lh_check_radius_arg3² + 1)
//│ 	in if (kp² == num_cols_lh_₁) then 0 else if polyGt⁰(r², float_of_int⁰(m_lh_₁)) then kp² else check_radius_lh_₄(_lh_check_radius_arg1², _lh_check_radius_arg2², kp², xn², yn²)
//│ def check_radius_lh_₅(_lh_check_radius_arg1¹, _lh_check_radius_arg2¹, _lh_check_radius_arg3¹, _lh_check_radius_arg4¹, _lh_check_radius_arg5¹) = 
//│ 	let xn¹ = new_x_lh_₂(_lh_check_radius_arg4¹, _lh_check_radius_arg5¹, _lh_check_radius_arg1¹)
//│ 	in let yn¹ = new_y_lh_₂(_lh_check_radius_arg4¹, _lh_check_radius_arg5¹, _lh_check_radius_arg2¹)
//│ 	in let r¹ = radius_lh_₂(xn¹, yn¹)
//│ 	in let kp¹ = (_lh_check_radius_arg3¹ + 1)
//│ 	in if (kp¹ == num_cols_lh_₁) then 0 else if polyGt⁰(r¹, float_of_int⁰(m_lh_₁)) then kp¹ else check_radius_lh_₅(_lh_check_radius_arg1¹, _lh_check_radius_arg2¹, kp¹, xn¹, yn¹)
//│ def check_radius_lh_₆(_lh_check_radius_arg1⁰, _lh_check_radius_arg2⁰, _lh_check_radius_arg3⁰, _lh_check_radius_arg4⁰, _lh_check_radius_arg5⁰) = 
//│ 	let xn⁰ = new_x_lh_₂(_lh_check_radius_arg4⁰, _lh_check_radius_arg5⁰, _lh_check_radius_arg1⁰)
//│ 	in let yn⁰ = new_y_lh_₂(_lh_check_radius_arg4⁰, _lh_check_radius_arg5⁰, _lh_check_radius_arg2⁰)
//│ 	in let r⁰ = radius_lh_₂(xn⁰, yn⁰)
//│ 	in let kp⁰ = (_lh_check_radius_arg3⁰ + 1)
//│ 	in if (kp⁰ == num_cols_lh_₁) then 0 else if polyGt⁰(r⁰, float_of_int⁰(m_lh_₁)) then kp⁰ else check_radius_lh_₆(_lh_check_radius_arg1⁰, _lh_check_radius_arg2⁰, kp⁰, xn⁰, yn⁰)
//│ def delta_p_lh_₁ = ((pmx_lh_₁ -. pmn_lh_₂) /. float_of_int⁰((size_lh_₁ - 1)))
//│ def delta_p_lh_₂ = ((pmx_lh_₁ -. pmn_lh_₂) /. float_of_int⁰((size_lh_₁ - 1)))
//│ def delta_q_lh_₁ = ((qmx_lh_₁ -. qmn_lh_₁) /. float_of_int⁰((size_lh_₁ - 1)))
//│ def down_lh_₁ = [LH_P2 0 1]
//│ def down_lh_₂ = [LH_P2 0 1]
//│ def equalp_lh_₁(_lh_equalp_arg1³, _lh_equalp_arg2³) = case _lh_equalp_arg1³ of {
//│ 	LH_P2 _lh_equalp_LH_P2_0⁶ _lh_equalp_LH_P2_1⁶ => case _lh_equalp_arg2³ of {
//│ 		LH_P2 _lh_equalp_LH_P2_0⁷ _lh_equalp_LH_P2_1⁷ => ((_lh_equalp_LH_P2_0⁶ == _lh_equalp_LH_P2_0⁷) && (_lh_equalp_LH_P2_1⁶ == _lh_equalp_LH_P2_1⁷))
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def equalp_lh_₂(_lh_equalp_arg1², _lh_equalp_arg2²) = case _lh_equalp_arg1² of {
//│ 	LH_P2 _lh_equalp_LH_P2_0⁴ _lh_equalp_LH_P2_1⁴ => case _lh_equalp_arg2² of {
//│ 		LH_P2 _lh_equalp_LH_P2_0⁵ _lh_equalp_LH_P2_1⁵ => ((_lh_equalp_LH_P2_0⁴ == _lh_equalp_LH_P2_0⁵) && (_lh_equalp_LH_P2_1⁴ == _lh_equalp_LH_P2_1⁵))
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def equalp_lh_₃(_lh_equalp_arg1¹, _lh_equalp_arg2¹) = case _lh_equalp_arg1¹ of {
//│ 	LH_P2 _lh_equalp_LH_P2_0² _lh_equalp_LH_P2_1² => case _lh_equalp_arg2¹ of {
//│ 		LH_P2 _lh_equalp_LH_P2_0³ _lh_equalp_LH_P2_1³ => ((_lh_equalp_LH_P2_0² == _lh_equalp_LH_P2_0³) && (_lh_equalp_LH_P2_1² == _lh_equalp_LH_P2_1³))
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def equalp_lh_₄(_lh_equalp_arg1⁰, _lh_equalp_arg2⁰) = case _lh_equalp_arg1⁰ of {
//│ 	LH_P2 _lh_equalp_LH_P2_0⁰ _lh_equalp_LH_P2_1⁰ => case _lh_equalp_arg2⁰ of {
//│ 		LH_P2 _lh_equalp_LH_P2_0¹ _lh_equalp_LH_P2_1¹ => ((_lh_equalp_LH_P2_0⁰ == _lh_equalp_LH_P2_0¹) && (_lh_equalp_LH_P2_1⁰ == _lh_equalp_LH_P2_1¹))
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def finite_lh_₁(_lh_finite_arg1⁰) = case _lh_finite_arg1⁰ of {
//│ 	Leaf _lh_finite_Leaf_0⁰ => (_lh_finite_Leaf_0⁰ == _lh_finite_Leaf_0⁰)
//│ 	| NS _lh_finite_NS_0⁰ _lh_finite_NS_1⁰ => (finite_lh_₁(_lh_finite_NS_0⁰) && finite_lh_₁(_lh_finite_NS_1⁰))
//│ 	| EW _lh_finite_EW_0⁰ _lh_finite_EW_1⁰ => (finite_lh_₁(_lh_finite_EW_0⁰) && finite_lh_₁(_lh_finite_EW_1⁰))
//│ 	| _  => error⁰}
//│ def left_lh_₁ = [LH_P2 (0 - 1) 0]
//│ def left_lh_₂ = [LH_P2 (0 - 1) 0]
//│ def length_lh_₁(ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => (1 + length_lh_₁(t⁰))
//│ 	| LH_N  => 0}
//│ def m_lh_₁ = 20
//│ def max_lh_₁(_lh_max_arg1⁰, _lh_max_arg2⁰) = if (_lh_max_arg1⁰ > _lh_max_arg2⁰) then _lh_max_arg1⁰ else _lh_max_arg2⁰
//│ def new_x_lh_₁(_lh_new_x_arg1¹, _lh_new_x_arg2¹, _lh_new_x_arg3¹) = (((_lh_new_x_arg1¹ *. _lh_new_x_arg1¹) -. (_lh_new_x_arg2¹ *. _lh_new_x_arg2¹)) +. _lh_new_x_arg3¹)
//│ def new_x_lh_₂(_lh_new_x_arg1⁰, _lh_new_x_arg2⁰, _lh_new_x_arg3⁰) = (((_lh_new_x_arg1⁰ *. _lh_new_x_arg1⁰) -. (_lh_new_x_arg2⁰ *. _lh_new_x_arg2⁰)) +. _lh_new_x_arg3⁰)
//│ def new_y_lh_₁(_lh_new_y_arg1¹, _lh_new_y_arg2¹, _lh_new_y_arg3¹) = (((2.0 *. _lh_new_y_arg1¹) *. _lh_new_y_arg2¹) +. _lh_new_y_arg3¹)
//│ def new_y_lh_₂(_lh_new_y_arg1⁰, _lh_new_y_arg2⁰, _lh_new_y_arg3⁰) = (((2.0 *. _lh_new_y_arg1⁰) *. _lh_new_y_arg2⁰) +. _lh_new_y_arg3⁰)
//│ def np_lh_₁(_lh_np_arg1⁵) = (pmn_lh_₁ +. (float_of_int⁰(_lh_np_arg1⁵) *. delta_p_lh_₁))
//│ def np_lh_₂(_lh_np_arg1⁴) = (pmn_lh_₂ +. (float_of_int⁰(_lh_np_arg1⁴) *. delta_p_lh_₂))
//│ def np_lh_₃(_lh_np_arg1³) = (pmn_lh_₂ +. (float_of_int⁰(_lh_np_arg1³) *. delta_p_lh_₂))
//│ def np_lh_₄(_lh_np_arg1²) = (pmn_lh_₂ +. (float_of_int⁰(_lh_np_arg1²) *. delta_p_lh_₂))
//│ def np_lh_₅(_lh_np_arg1¹) = (pmn_lh_₂ +. (float_of_int⁰(_lh_np_arg1¹) *. delta_p_lh_₂))
//│ def np_lh_₆(_lh_np_arg1⁰) = (pmn_lh_₂ +. (float_of_int⁰(_lh_np_arg1⁰) *. delta_p_lh_₂))
//│ def nq_lh_₁(_lh_nq_arg1⁵) = (qmn_lh_₁ +. (float_of_int⁰(_lh_nq_arg1⁵) *. delta_q_lh_₁))
//│ def nq_lh_₂(_lh_nq_arg1⁴) = (qmn_lh_₁ +. (float_of_int⁰(_lh_nq_arg1⁴) *. delta_q_lh_₁))
//│ def nq_lh_₃(_lh_nq_arg1³) = (qmn_lh_₁ +. (float_of_int⁰(_lh_nq_arg1³) *. delta_q_lh_₁))
//│ def nq_lh_₄(_lh_nq_arg1²) = (qmn_lh_₁ +. (float_of_int⁰(_lh_nq_arg1²) *. delta_q_lh_₁))
//│ def nq_lh_₅(_lh_nq_arg1¹) = (qmn_lh_₁ +. (float_of_int⁰(_lh_nq_arg1¹) *. delta_q_lh_₁))
//│ def nq_lh_₆(_lh_nq_arg1⁰) = (qmn_lh_₁ +. (float_of_int⁰(_lh_nq_arg1⁰) *. delta_q_lh_₁))
//│ def num_cols_lh_₁ = 26
//│ def pmn_lh_₁ = (0.0 -. 2.25)
//│ def pmn_lh_₂ = (0.0 -. 2.25)
//│ def pmx_lh_₁ = 0.75
//│ def point_colour_lh_₁(_lh_point_colour_arg1⁵) = case _lh_point_colour_arg1⁵ of {
//│ 	LH_P2 _lh_point_colour_LH_P2_0⁵ _lh_point_colour_LH_P2_1⁵ => check_radius_lh_₁(np_lh_₁(_lh_point_colour_LH_P2_0⁵), nq_lh_₁(_lh_point_colour_LH_P2_1⁵), 0, 0.0, 0.0)
//│ 	| _  => error⁰}
//│ def point_colour_lh_₂(_lh_point_colour_arg1⁴) = case _lh_point_colour_arg1⁴ of {
//│ 	LH_P2 _lh_point_colour_LH_P2_0⁴ _lh_point_colour_LH_P2_1⁴ => check_radius_lh_₂(np_lh_₂(_lh_point_colour_LH_P2_0⁴), nq_lh_₂(_lh_point_colour_LH_P2_1⁴), 0, 0.0, 0.0)
//│ 	| _  => error⁰}
//│ def point_colour_lh_₃(_lh_point_colour_arg1³) = case _lh_point_colour_arg1³ of {
//│ 	LH_P2 _lh_point_colour_LH_P2_0³ _lh_point_colour_LH_P2_1³ => check_radius_lh_₃(np_lh_₃(_lh_point_colour_LH_P2_0³), nq_lh_₃(_lh_point_colour_LH_P2_1³), 0, 0.0, 0.0)
//│ 	| _  => error⁰}
//│ def point_colour_lh_₄(_lh_point_colour_arg1²) = case _lh_point_colour_arg1² of {
//│ 	LH_P2 _lh_point_colour_LH_P2_0² _lh_point_colour_LH_P2_1² => check_radius_lh_₄(np_lh_₄(_lh_point_colour_LH_P2_0²), nq_lh_₄(_lh_point_colour_LH_P2_1²), 0, 0.0, 0.0)
//│ 	| _  => error⁰}
//│ def point_colour_lh_₅(_lh_point_colour_arg1¹) = case _lh_point_colour_arg1¹ of {
//│ 	LH_P2 _lh_point_colour_LH_P2_0¹ _lh_point_colour_LH_P2_1¹ => check_radius_lh_₅(np_lh_₅(_lh_point_colour_LH_P2_0¹), nq_lh_₅(_lh_point_colour_LH_P2_1¹), 0, 0.0, 0.0)
//│ 	| _  => error⁰}
//│ def point_colour_lh_₆(_lh_point_colour_arg1⁰) = case _lh_point_colour_arg1⁰ of {
//│ 	LH_P2 _lh_point_colour_LH_P2_0⁰ _lh_point_colour_LH_P2_1⁰ => check_radius_lh_₆(np_lh_₆(_lh_point_colour_LH_P2_0⁰), nq_lh_₆(_lh_point_colour_LH_P2_1⁰), 0, 0.0, 0.0)
//│ 	| _  => error⁰}
//│ def qmn_lh_₁ = (0.0 -. 1.5)
//│ def qmx_lh_₁ = 1.5
//│ def radius_lh_₁(_lh_radius_arg1¹, _lh_radius_arg2¹) = ((_lh_radius_arg1¹ *. _lh_radius_arg1¹) +. (_lh_radius_arg2¹ *. _lh_radius_arg2¹))
//│ def radius_lh_₂(_lh_radius_arg1⁰, _lh_radius_arg2⁰) = ((_lh_radius_arg1⁰ *. _lh_radius_arg1⁰) +. (_lh_radius_arg2⁰ *. _lh_radius_arg2⁰))
//│ def right_lh_₁ = [LH_P2 1 0]
//│ def right_lh_₂ = [LH_P2 1 0]
//│ def size_lh_₁ = 200
//│ def testMandel2_nofib_lh_₁(_lh_testMandel2_nofib_arg1⁰) = 
//│ 	let size'⁰ = max_lh_₁(length_lh_₁(_lh_testMandel2_nofib_arg1⁰), size_lh_₁)
//│ 	in let tree⁰ = build_tree_lh_₁([LH_P2 0 0], [LH_P2 size'⁰ div⁰(size'⁰, 2)])
//│ 	in finite_lh_₁(tree⁰)
//│ def up_lh_₁ = [LH_P2 0 (0 - 1)]
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec finite_lh__d1 _lh_finite_arg1_0 =
//│ 		  (match _lh_finite_arg1_0 with
//│ 		    | `Leaf(_lh_finite_Leaf_0_0) -> 
//│ 		      (_lh_finite_Leaf_0_0 = _lh_finite_Leaf_0_0)
//│ 		    | `NS(_lh_finite_NS_0_0, _lh_finite_NS_1_0) -> 
//│ 		      ((finite_lh__d1 _lh_finite_NS_0_0) && (finite_lh__d1 _lh_finite_NS_1_0))
//│ 		    | `EW(_lh_finite_EW_0_0, _lh_finite_EW_1_0) -> 
//│ 		      ((finite_lh__d1 _lh_finite_EW_0_0) && (finite_lh__d1 _lh_finite_EW_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec length_lh__d1 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (1 + (length_lh__d1 t_0))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec right_lh__d1 =
//│ 		  (`LH_P2(1, 0));;
//│ 		let rec right_lh__d2 =
//│ 		  (`LH_P2(1, 0));;
//│ 		let rec qmx_lh__d1 =
//│ 		  1.5;;
//│ 		let rec size_lh__d1 =
//│ 		  200;;
//│ 		let rec qmn_lh__d1 =
//│ 		  (0.0 -. 1.5);;
//│ 		let rec delta_q_lh__d1 =
//│ 		  ((qmx_lh__d1 -. qmn_lh__d1) /. (float_of_int (size_lh__d1 - 1)));;
//│ 		let rec nq_lh__d3 _lh_nq_arg1_3 =
//│ 		  (qmn_lh__d1 +. ((float_of_int _lh_nq_arg1_3) *. delta_q_lh__d1));;
//│ 		let rec num_cols_lh__d1 =
//│ 		  26;;
//│ 		let rec new_x_lh__d2 _lh_new_x_arg1_0 _lh_new_x_arg2_0 _lh_new_x_arg3_0 =
//│ 		  (((_lh_new_x_arg1_0 *. _lh_new_x_arg1_0) -. (_lh_new_x_arg2_0 *. _lh_new_x_arg2_0)) +. _lh_new_x_arg3_0);;
//│ 		let rec m_lh__d1 =
//│ 		  20;;
//│ 		let rec radius_lh__d2 _lh_radius_arg1_0 _lh_radius_arg2_0 =
//│ 		  ((_lh_radius_arg1_0 *. _lh_radius_arg1_0) +. (_lh_radius_arg2_0 *. _lh_radius_arg2_0));;
//│ 		let rec new_y_lh__d2 _lh_new_y_arg1_0 _lh_new_y_arg2_0 _lh_new_y_arg3_0 =
//│ 		  (((2.0 *. _lh_new_y_arg1_0) *. _lh_new_y_arg2_0) +. _lh_new_y_arg3_0);;
//│ 		let rec check_radius_lh__d3 _lh_check_radius_arg1_3 _lh_check_radius_arg2_3 _lh_check_radius_arg3_3 _lh_check_radius_arg4_3 _lh_check_radius_arg5_3 =
//│ 		  (let rec xn_3 = (((new_x_lh__d2 _lh_check_radius_arg4_3) _lh_check_radius_arg5_3) _lh_check_radius_arg1_3) in
//│ 		    (let rec yn_3 = (((new_y_lh__d2 _lh_check_radius_arg4_3) _lh_check_radius_arg5_3) _lh_check_radius_arg2_3) in
//│ 		      (let rec r_3 = ((radius_lh__d2 xn_3) yn_3) in
//│ 		        (let rec kp_3 = (_lh_check_radius_arg3_3 + 1) in
//│ 		          (if (kp_3 = num_cols_lh__d1) then
//│ 		            0
//│ 		          else
//│ 		            (if (r_3 > (float_of_int m_lh__d1)) then
//│ 		              kp_3
//│ 		            else
//│ 		              (((((check_radius_lh__d3 _lh_check_radius_arg1_3) _lh_check_radius_arg2_3) kp_3) xn_3) yn_3)))))));;
//│ 		let rec pmn_lh__d2 =
//│ 		  (0.0 -. 2.25);;
//│ 		let rec pmx_lh__d1 =
//│ 		  0.75;;
//│ 		let rec delta_p_lh__d2 =
//│ 		  ((pmx_lh__d1 -. pmn_lh__d2) /. (float_of_int (size_lh__d1 - 1)));;
//│ 		let rec np_lh__d3 _lh_np_arg1_3 =
//│ 		  (pmn_lh__d2 +. ((float_of_int _lh_np_arg1_3) *. delta_p_lh__d2));;
//│ 		let rec point_colour_lh__d3 _lh_point_colour_arg1_3 =
//│ 		  (match _lh_point_colour_arg1_3 with
//│ 		    | `LH_P2(_lh_point_colour_LH_P2_0_3, _lh_point_colour_LH_P2_1_3) -> 
//│ 		      (((((check_radius_lh__d3 (np_lh__d3 _lh_point_colour_LH_P2_0_3)) (nq_lh__d3 _lh_point_colour_LH_P2_1_3)) 0) 0.0) 0.0)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec delta_p_lh__d1 =
//│ 		  ((pmx_lh__d1 -. pmn_lh__d2) /. (float_of_int (size_lh__d1 - 1)));;
//│ 		let rec pmn_lh__d1 =
//│ 		  (0.0 -. 2.25);;
//│ 		let rec np_lh__d1 _lh_np_arg1_5 =
//│ 		  (pmn_lh__d1 +. ((float_of_int _lh_np_arg1_5) *. delta_p_lh__d1));;
//│ 		let rec new_y_lh__d1 _lh_new_y_arg1_1 _lh_new_y_arg2_1 _lh_new_y_arg3_1 =
//│ 		  (((2.0 *. _lh_new_y_arg1_1) *. _lh_new_y_arg2_1) +. _lh_new_y_arg3_1);;
//│ 		let rec new_x_lh__d1 _lh_new_x_arg1_1 _lh_new_x_arg2_1 _lh_new_x_arg3_1 =
//│ 		  (((_lh_new_x_arg1_1 *. _lh_new_x_arg1_1) -. (_lh_new_x_arg2_1 *. _lh_new_x_arg2_1)) +. _lh_new_x_arg3_1);;
//│ 		let rec radius_lh__d1 _lh_radius_arg1_1 _lh_radius_arg2_1 =
//│ 		  ((_lh_radius_arg1_1 *. _lh_radius_arg1_1) +. (_lh_radius_arg2_1 *. _lh_radius_arg2_1));;
//│ 		let rec check_radius_lh__d1 _lh_check_radius_arg1_5 _lh_check_radius_arg2_5 _lh_check_radius_arg3_5 _lh_check_radius_arg4_5 _lh_check_radius_arg5_5 =
//│ 		  (let rec xn_5 = (((new_x_lh__d1 _lh_check_radius_arg4_5) _lh_check_radius_arg5_5) _lh_check_radius_arg1_5) in
//│ 		    (let rec yn_5 = (((new_y_lh__d1 _lh_check_radius_arg4_5) _lh_check_radius_arg5_5) _lh_check_radius_arg2_5) in
//│ 		      (let rec r_5 = ((radius_lh__d1 xn_5) yn_5) in
//│ 		        (let rec kp_5 = (_lh_check_radius_arg3_5 + 1) in
//│ 		          (if (kp_5 = num_cols_lh__d1) then
//│ 		            0
//│ 		          else
//│ 		            (if (r_5 > (float_of_int m_lh__d1)) then
//│ 		              kp_5
//│ 		            else
//│ 		              (((((check_radius_lh__d1 _lh_check_radius_arg1_5) _lh_check_radius_arg2_5) kp_5) xn_5) yn_5)))))));;
//│ 		let rec nq_lh__d1 _lh_nq_arg1_5 =
//│ 		  (qmn_lh__d1 +. ((float_of_int _lh_nq_arg1_5) *. delta_q_lh__d1));;
//│ 		let rec point_colour_lh__d1 _lh_point_colour_arg1_5 =
//│ 		  (match _lh_point_colour_arg1_5 with
//│ 		    | `LH_P2(_lh_point_colour_LH_P2_0_5, _lh_point_colour_LH_P2_1_5) -> 
//│ 		      (((((check_radius_lh__d1 (np_lh__d1 _lh_point_colour_LH_P2_0_5)) (nq_lh__d1 _lh_point_colour_LH_P2_1_5)) 0) 0.0) 0.0)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec nq_lh__d4 _lh_nq_arg1_2 =
//│ 		  (qmn_lh__d1 +. ((float_of_int _lh_nq_arg1_2) *. delta_q_lh__d1));;
//│ 		let rec np_lh__d4 _lh_np_arg1_2 =
//│ 		  (pmn_lh__d2 +. ((float_of_int _lh_np_arg1_2) *. delta_p_lh__d2));;
//│ 		let rec check_radius_lh__d4 _lh_check_radius_arg1_2 _lh_check_radius_arg2_2 _lh_check_radius_arg3_2 _lh_check_radius_arg4_2 _lh_check_radius_arg5_2 =
//│ 		  (let rec xn_2 = (((new_x_lh__d2 _lh_check_radius_arg4_2) _lh_check_radius_arg5_2) _lh_check_radius_arg1_2) in
//│ 		    (let rec yn_2 = (((new_y_lh__d2 _lh_check_radius_arg4_2) _lh_check_radius_arg5_2) _lh_check_radius_arg2_2) in
//│ 		      (let rec r_2 = ((radius_lh__d2 xn_2) yn_2) in
//│ 		        (let rec kp_2 = (_lh_check_radius_arg3_2 + 1) in
//│ 		          (if (kp_2 = num_cols_lh__d1) then
//│ 		            0
//│ 		          else
//│ 		            (if (r_2 > (float_of_int m_lh__d1)) then
//│ 		              kp_2
//│ 		            else
//│ 		              (((((check_radius_lh__d4 _lh_check_radius_arg1_2) _lh_check_radius_arg2_2) kp_2) xn_2) yn_2)))))));;
//│ 		let rec point_colour_lh__d4 _lh_point_colour_arg1_2 =
//│ 		  (match _lh_point_colour_arg1_2 with
//│ 		    | `LH_P2(_lh_point_colour_LH_P2_0_2, _lh_point_colour_LH_P2_1_2) -> 
//│ 		      (((((check_radius_lh__d4 (np_lh__d4 _lh_point_colour_LH_P2_0_2)) (nq_lh__d4 _lh_point_colour_LH_P2_1_2)) 0) 0.0) 0.0)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec equalp_lh__d1 _lh_equalp_arg1_3 _lh_equalp_arg2_3 =
//│ 		  (match _lh_equalp_arg1_3 with
//│ 		    | `LH_P2(_lh_equalp_LH_P2_0_6, _lh_equalp_LH_P2_1_6) -> 
//│ 		      (match _lh_equalp_arg2_3 with
//│ 		        | `LH_P2(_lh_equalp_LH_P2_0_7, _lh_equalp_LH_P2_1_7) -> 
//│ 		          ((_lh_equalp_LH_P2_0_6 = _lh_equalp_LH_P2_0_7) && (_lh_equalp_LH_P2_1_6 = _lh_equalp_LH_P2_1_7))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec down_lh__d2 =
//│ 		  (`LH_P2(0, 1));;
//│ 		let rec left_lh__d1 =
//│ 		  (`LH_P2((0 - 1), 0));;
//│ 		let rec down_lh__d1 =
//│ 		  (`LH_P2(0, 1));;
//│ 		let rec nq_lh__d2 _lh_nq_arg1_4 =
//│ 		  (qmn_lh__d1 +. ((float_of_int _lh_nq_arg1_4) *. delta_q_lh__d1));;
//│ 		let rec np_lh__d2 _lh_np_arg1_4 =
//│ 		  (pmn_lh__d2 +. ((float_of_int _lh_np_arg1_4) *. delta_p_lh__d2));;
//│ 		let rec check_radius_lh__d2 _lh_check_radius_arg1_4 _lh_check_radius_arg2_4 _lh_check_radius_arg3_4 _lh_check_radius_arg4_4 _lh_check_radius_arg5_4 =
//│ 		  (let rec xn_4 = (((new_x_lh__d2 _lh_check_radius_arg4_4) _lh_check_radius_arg5_4) _lh_check_radius_arg1_4) in
//│ 		    (let rec yn_4 = (((new_y_lh__d2 _lh_check_radius_arg4_4) _lh_check_radius_arg5_4) _lh_check_radius_arg2_4) in
//│ 		      (let rec r_4 = ((radius_lh__d2 xn_4) yn_4) in
//│ 		        (let rec kp_4 = (_lh_check_radius_arg3_4 + 1) in
//│ 		          (if (kp_4 = num_cols_lh__d1) then
//│ 		            0
//│ 		          else
//│ 		            (if (r_4 > (float_of_int m_lh__d1)) then
//│ 		              kp_4
//│ 		            else
//│ 		              (((((check_radius_lh__d2 _lh_check_radius_arg1_4) _lh_check_radius_arg2_4) kp_4) xn_4) yn_4)))))));;
//│ 		let rec point_colour_lh__d2 _lh_point_colour_arg1_4 =
//│ 		  (match _lh_point_colour_arg1_4 with
//│ 		    | `LH_P2(_lh_point_colour_LH_P2_0_4, _lh_point_colour_LH_P2_1_4) -> 
//│ 		      (((((check_radius_lh__d2 (np_lh__d2 _lh_point_colour_LH_P2_0_4)) (nq_lh__d2 _lh_point_colour_LH_P2_1_4)) 0) 0.0) 0.0)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec check_radius_lh__d6 _lh_check_radius_arg1_0 _lh_check_radius_arg2_0 _lh_check_radius_arg3_0 _lh_check_radius_arg4_0 _lh_check_radius_arg5_0 =
//│ 		  (let rec xn_0 = (((new_x_lh__d2 _lh_check_radius_arg4_0) _lh_check_radius_arg5_0) _lh_check_radius_arg1_0) in
//│ 		    (let rec yn_0 = (((new_y_lh__d2 _lh_check_radius_arg4_0) _lh_check_radius_arg5_0) _lh_check_radius_arg2_0) in
//│ 		      (let rec r_0 = ((radius_lh__d2 xn_0) yn_0) in
//│ 		        (let rec kp_0 = (_lh_check_radius_arg3_0 + 1) in
//│ 		          (if (kp_0 = num_cols_lh__d1) then
//│ 		            0
//│ 		          else
//│ 		            (if (r_0 > (float_of_int m_lh__d1)) then
//│ 		              kp_0
//│ 		            else
//│ 		              (((((check_radius_lh__d6 _lh_check_radius_arg1_0) _lh_check_radius_arg2_0) kp_0) xn_0) yn_0)))))));;
//│ 		let rec np_lh__d6 _lh_np_arg1_0 =
//│ 		  (pmn_lh__d2 +. ((float_of_int _lh_np_arg1_0) *. delta_p_lh__d2));;
//│ 		let rec nq_lh__d6 _lh_nq_arg1_0 =
//│ 		  (qmn_lh__d1 +. ((float_of_int _lh_nq_arg1_0) *. delta_q_lh__d1));;
//│ 		let rec point_colour_lh__d6 _lh_point_colour_arg1_0 =
//│ 		  (match _lh_point_colour_arg1_0 with
//│ 		    | `LH_P2(_lh_point_colour_LH_P2_0_0, _lh_point_colour_LH_P2_1_0) -> 
//│ 		      (((((check_radius_lh__d6 (np_lh__d6 _lh_point_colour_LH_P2_0_0)) (nq_lh__d6 _lh_point_colour_LH_P2_1_0)) 0) 0.0) 0.0)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec left_lh__d2 =
//│ 		  (`LH_P2((0 - 1), 0));;
//│ 		let rec up_lh__d1 =
//│ 		  (`LH_P2(0, (0 - 1)));;
//│ 		let rec equalp_lh__d2 _lh_equalp_arg1_2 _lh_equalp_arg2_2 =
//│ 		  (match _lh_equalp_arg1_2 with
//│ 		    | `LH_P2(_lh_equalp_LH_P2_0_4, _lh_equalp_LH_P2_1_4) -> 
//│ 		      (match _lh_equalp_arg2_2 with
//│ 		        | `LH_P2(_lh_equalp_LH_P2_0_5, _lh_equalp_LH_P2_1_5) -> 
//│ 		          ((_lh_equalp_LH_P2_0_4 = _lh_equalp_LH_P2_0_5) && (_lh_equalp_LH_P2_1_4 = _lh_equalp_LH_P2_1_5))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec equalp_lh__d3 _lh_equalp_arg1_1 _lh_equalp_arg2_1 =
//│ 		  (match _lh_equalp_arg1_1 with
//│ 		    | `LH_P2(_lh_equalp_LH_P2_0_2, _lh_equalp_LH_P2_1_2) -> 
//│ 		      (match _lh_equalp_arg2_1 with
//│ 		        | `LH_P2(_lh_equalp_LH_P2_0_3, _lh_equalp_LH_P2_1_3) -> 
//│ 		          ((_lh_equalp_LH_P2_0_2 = _lh_equalp_LH_P2_0_3) && (_lh_equalp_LH_P2_1_2 = _lh_equalp_LH_P2_1_3))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec equalp_lh__d4 _lh_equalp_arg1_0 _lh_equalp_arg2_0 =
//│ 		  (match _lh_equalp_arg1_0 with
//│ 		    | `LH_P2(_lh_equalp_LH_P2_0_0, _lh_equalp_LH_P2_1_0) -> 
//│ 		      (match _lh_equalp_arg2_0 with
//│ 		        | `LH_P2(_lh_equalp_LH_P2_0_1, _lh_equalp_LH_P2_1_1) -> 
//│ 		          ((_lh_equalp_LH_P2_0_0 = _lh_equalp_LH_P2_0_1) && (_lh_equalp_LH_P2_1_0 = _lh_equalp_LH_P2_1_1))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec check_radius_lh__d5 _lh_check_radius_arg1_1 _lh_check_radius_arg2_1 _lh_check_radius_arg3_1 _lh_check_radius_arg4_1 _lh_check_radius_arg5_1 =
//│ 		  (let rec xn_1 = (((new_x_lh__d2 _lh_check_radius_arg4_1) _lh_check_radius_arg5_1) _lh_check_radius_arg1_1) in
//│ 		    (let rec yn_1 = (((new_y_lh__d2 _lh_check_radius_arg4_1) _lh_check_radius_arg5_1) _lh_check_radius_arg2_1) in
//│ 		      (let rec r_1 = ((radius_lh__d2 xn_1) yn_1) in
//│ 		        (let rec kp_1 = (_lh_check_radius_arg3_1 + 1) in
//│ 		          (if (kp_1 = num_cols_lh__d1) then
//│ 		            0
//│ 		          else
//│ 		            (if (r_1 > (float_of_int m_lh__d1)) then
//│ 		              kp_1
//│ 		            else
//│ 		              (((((check_radius_lh__d5 _lh_check_radius_arg1_1) _lh_check_radius_arg2_1) kp_1) xn_1) yn_1)))))));;
//│ 		let rec nq_lh__d5 _lh_nq_arg1_1 =
//│ 		  (qmn_lh__d1 +. ((float_of_int _lh_nq_arg1_1) *. delta_q_lh__d1));;
//│ 		let rec np_lh__d5 _lh_np_arg1_1 =
//│ 		  (pmn_lh__d2 +. ((float_of_int _lh_np_arg1_1) *. delta_p_lh__d2));;
//│ 		let rec point_colour_lh__d5 _lh_point_colour_arg1_1 =
//│ 		  (match _lh_point_colour_arg1_1 with
//│ 		    | `LH_P2(_lh_point_colour_LH_P2_0_1, _lh_point_colour_LH_P2_1_1) -> 
//│ 		      (((((check_radius_lh__d5 (np_lh__d5 _lh_point_colour_LH_P2_0_1)) (nq_lh__d5 _lh_point_colour_LH_P2_1_1)) 0) 0.0) 0.0)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec check_perim_lh__d1 _lh_check_perim_arg1_0 _lh_check_perim_arg2_0 =
//│ 		  (let rec _lh_matchIdent_0 = _lh_check_perim_arg1_0 in
//│ 		    (match _lh_matchIdent_0 with
//│ 		      | `LH_P2(_lh_check_perim_LH_P2_0_0, _lh_check_perim_LH_P2_1_0) -> 
//│ 		        (let rec _lh_matchIdent_1 = _lh_check_perim_arg2_0 in
//│ 		          (match _lh_matchIdent_1 with
//│ 		            | `LH_P2(_lh_check_perim_LH_P2_0_1, _lh_check_perim_LH_P2_1_1) -> 
//│ 		              (let rec col1_0 = (point_colour_lh__d3 _lh_check_perim_arg1_0) in
//│ 		                (let rec col2_0 = (point_colour_lh__d4 (`LH_P2(_lh_check_perim_LH_P2_0_1, _lh_check_perim_LH_P2_1_0))) in
//│ 		                  (let rec col3_0 = (point_colour_lh__d1 _lh_check_perim_arg2_0) in
//│ 		                    (let rec col4_0 = (point_colour_lh__d5 (`LH_P2(_lh_check_perim_LH_P2_0_0, _lh_check_perim_LH_P2_1_1))) in
//│ 		                      (let rec corners_diff_0 = (if (col1_0 = col2_0) then
//│ 		                        (if (col1_0 = col3_0) then
//│ 		                          (if (col1_0 = col4_0) then
//│ 		                            false
//│ 		                          else
//│ 		                            true)
//│ 		                        else
//│ 		                          true)
//│ 		                      else
//│ 		                        true) in
//│ 		                        (let rec check_line_0 = (fun xcyc_0 xdyd_0 -> 
//│ 		                          (let rec _lh_matchIdent_2 = xcyc_0 in
//│ 		                            (match _lh_matchIdent_2 with
//│ 		                              | `LH_P2(_lh_check_perim_LH_P2_0_2, _lh_check_perim_LH_P2_1_2) -> 
//│ 		                                (let rec _lh_matchIdent_3 = xdyd_0 in
//│ 		                                  (match _lh_matchIdent_3 with
//│ 		                                    | `LH_P2(_lh_check_perim_LH_P2_0_3, _lh_check_perim_LH_P2_1_3) -> 
//│ 		                                      (let rec finished_0 = (if ((equalp_lh__d1 xdyd_0) right_lh__d1) then
//│ 		                                        (_lh_check_perim_LH_P2_0_2 >= _lh_check_perim_LH_P2_0_1)
//│ 		                                      else
//│ 		                                        (if ((equalp_lh__d2 xdyd_0) down_lh__d2) then
//│ 		                                          (_lh_check_perim_LH_P2_1_2 <= _lh_check_perim_LH_P2_1_1)
//│ 		                                        else
//│ 		                                          (if ((equalp_lh__d4 xdyd_0) left_lh__d2) then
//│ 		                                            (_lh_check_perim_LH_P2_0_2 <= _lh_check_perim_LH_P2_0_0)
//│ 		                                          else
//│ 		                                            (_lh_check_perim_LH_P2_1_2 >= _lh_check_perim_LH_P2_1_0)))) in
//│ 		                                        (if finished_0 then
//│ 		                                          true
//│ 		                                        else
//│ 		                                          (if ((point_colour_lh__d6 xcyc_0) <> col1_0) then
//│ 		                                            false
//│ 		                                          else
//│ 		                                            ((check_line_0 (`LH_P2((_lh_check_perim_LH_P2_0_2 + _lh_check_perim_LH_P2_0_3), (_lh_check_perim_LH_P2_1_2 + _lh_check_perim_LH_P2_1_3)))) (`LH_P2(_lh_check_perim_LH_P2_0_3, _lh_check_perim_LH_P2_1_3))))))
//│ 		                                    | _ -> 
//│ 		                                      (failwith "error")))
//│ 		                              | _ -> 
//│ 		                                (failwith "error")))) in
//│ 		                          (let rec check_sides_0 = (if ((check_line_0 (`LH_P2((_lh_check_perim_LH_P2_0_0 + 1), _lh_check_perim_LH_P2_1_0))) right_lh__d2) then
//│ 		                            (if ((check_line_0 (`LH_P2(_lh_check_perim_LH_P2_0_1, (_lh_check_perim_LH_P2_1_0 + 1)))) down_lh__d1) then
//│ 		                              (if ((check_line_0 (`LH_P2((_lh_check_perim_LH_P2_0_1 - 1), _lh_check_perim_LH_P2_1_1))) left_lh__d1) then
//│ 		                                (if ((check_line_0 (`LH_P2(_lh_check_perim_LH_P2_0_0, (_lh_check_perim_LH_P2_1_1 - 1)))) up_lh__d1) then
//│ 		                                  col1_0
//│ 		                                else
//│ 		                                  (0 - 1))
//│ 		                              else
//│ 		                                (0 - 1))
//│ 		                            else
//│ 		                              (0 - 1))
//│ 		                          else
//│ 		                            (0 - 1)) in
//│ 		                            (if ((equalp_lh__d3 _lh_check_perim_arg1_0) _lh_check_perim_arg2_0) then
//│ 		                              (point_colour_lh__d2 _lh_check_perim_arg1_0)
//│ 		                            else
//│ 		                              (if corners_diff_0 then
//│ 		                                (0 - 1)
//│ 		                              else
//│ 		                                check_sides_0)))))))))
//│ 		            | _ -> 
//│ 		              (failwith "error")))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec build_tree_lh__d1 _lh_build_tree_arg1_0 _lh_build_tree_arg2_0 =
//│ 		  (let rec _lh_matchIdent_4 = _lh_build_tree_arg1_0 in
//│ 		    (match _lh_matchIdent_4 with
//│ 		      | `LH_P2(_lh_build_tree_LH_P2_0_0, _lh_build_tree_LH_P2_1_0) -> 
//│ 		        (let rec _lh_matchIdent_5 = _lh_build_tree_arg2_0 in
//│ 		          (match _lh_matchIdent_5 with
//│ 		            | `LH_P2(_lh_build_tree_LH_P2_0_1, _lh_build_tree_LH_P2_1_1) -> 
//│ 		              (let rec rec_col_0 = ((check_perim_lh__d1 _lh_build_tree_arg1_0) _lh_build_tree_arg2_0) in
//│ 		                (let rec split_0 = (if ((_lh_build_tree_LH_P2_0_1 - _lh_build_tree_LH_P2_0_0) >= (_lh_build_tree_LH_P2_1_1 - _lh_build_tree_LH_P2_1_0)) then
//│ 		                  (`LH_C('N', (`LH_C('S', (`LH_N)))))
//│ 		                else
//│ 		                  (`LH_C('E', (`LH_C('W', (`LH_N)))))) in
//│ 		                  (let rec split_x_0 = ((_lh_build_tree_LH_P2_0_1 + _lh_build_tree_LH_P2_0_0) / 2) in
//│ 		                    (let rec split_y_0 = ((_lh_build_tree_LH_P2_1_1 + _lh_build_tree_LH_P2_1_0) / 2) in
//│ 		                      (let rec nsp1_0 = _lh_build_tree_arg1_0 in
//│ 		                        (let rec nsp2_0 = (`LH_P2(split_x_0, _lh_build_tree_LH_P2_1_1)) in
//│ 		                          (let rec nsp3_0 = (`LH_P2((split_x_0 + 1), _lh_build_tree_LH_P2_1_0)) in
//│ 		                            (let rec nsp4_0 = _lh_build_tree_arg2_0 in
//│ 		                              (let rec ewp1_0 = _lh_build_tree_arg1_0 in
//│ 		                                (let rec ewp2_0 = (`LH_P2(_lh_build_tree_LH_P2_0_1, split_y_0)) in
//│ 		                                  (let rec ewp3_0 = (`LH_P2(_lh_build_tree_LH_P2_0_0, (split_y_0 + 1))) in
//│ 		                                    (let rec ewp4_0 = _lh_build_tree_arg2_0 in
//│ 		                                      (if (rec_col_0 <> (0 - 1)) then
//│ 		                                        (`Leaf(rec_col_0))
//│ 		                                      else
//│ 		                                        (if (split_0 = (`LH_C('N', (`LH_C('S', (`LH_N)))))) then
//│ 		                                          (`NS(((build_tree_lh__d1 nsp1_0) nsp2_0), ((build_tree_lh__d1 nsp3_0) nsp4_0)))
//│ 		                                        else
//│ 		                                          (`EW(((build_tree_lh__d1 ewp1_0) ewp2_0), ((build_tree_lh__d1 ewp3_0) ewp4_0)))))))))))))))))
//│ 		            | _ -> 
//│ 		              (failwith "error")))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec max_lh__d1 _lh_max_arg1_0 _lh_max_arg2_0 =
//│ 		  (if (_lh_max_arg1_0 > _lh_max_arg2_0) then
//│ 		    _lh_max_arg1_0
//│ 		  else
//│ 		    _lh_max_arg2_0);;
//│ 		let rec testMandel2_nofib_lh__d1 _lh_testMandel2_nofib_arg1_0 =
//│ 		  (let rec size'_0 = ((max_lh__d1 (length_lh__d1 _lh_testMandel2_nofib_arg1_0)) size_lh__d1) in
//│ 		    (let rec tree_0 = ((build_tree_lh__d1 (`LH_P2(0, 0))) (`LH_P2(size'_0, (size'_0 / 2)))) in
//│ 		      (finite_lh__d1 tree_0)));;
//│ 		(testMandel2_nofib_lh__d1 (`LH_C(60, (`LH_N))))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< after expansion <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_P2 0 1]: 692 --->
//│ 	case _lh_equalp_arg2² of {LH_P2 _lh_equalp_LH_P2_0⁵ _lh_equalp_LH_P2_1⁵ => ((_lh_equalp_LH_P2_0⁴ == _lh_equalp_LH_P2_0⁵) && (_lh_equalp_LH_P2_1⁴ == _lh_equalp_LH_P2_1⁵)) | _  => error⁰}: 818
//│ [LH_P2 (0 - 1) 0]: 801 --->
//│ 	case _lh_equalp_arg2⁰ of {LH_P2 _lh_equalp_LH_P2_0¹ _lh_equalp_LH_P2_1¹ => ((_lh_equalp_LH_P2_0⁰ == _lh_equalp_LH_P2_0¹) && (_lh_equalp_LH_P2_1⁰ == _lh_equalp_LH_P2_1¹)) | _  => error⁰}: 769
//│ [LH_P2 1 0]: 901 --->
//│ 	case _lh_equalp_arg2³ of {LH_P2 _lh_equalp_LH_P2_0⁷ _lh_equalp_LH_P2_1⁷ => ((_lh_equalp_LH_P2_0⁶ == _lh_equalp_LH_P2_0⁷) && (_lh_equalp_LH_P2_1⁶ == _lh_equalp_LH_P2_1⁷)) | _  => error⁰}: 846
//│ [LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1⁰]: 912 --->
//│ 	case _lh_point_colour_arg1² of {LH_P2 _lh_point_colour_LH_P2_0² _lh_point_colour_LH_P2_1² => check_radius_lh_₄(np_lh_₄(_lh_point_colour_LH_P2_0²), nq_lh_₄(_lh_point_colour_LH_P2_1²), 0, 0.0, 0.0) | _  => error⁰}: 732
//│ [LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1¹]: 920 --->
//│ 	case _lh_point_colour_arg1¹ of {LH_P2 _lh_point_colour_LH_P2_0¹ _lh_point_colour_LH_P2_1¹ => check_radius_lh_₅(np_lh_₅(_lh_point_colour_LH_P2_0¹), nq_lh_₅(_lh_point_colour_LH_P2_1¹), 0, 0.0, 0.0) | _  => error⁰}: 713
//│ [Leaf rec_col⁰]: 1231 --->
//│ 	case _lh_finite_arg1⁰ of {Leaf _lh_finite_Leaf_0⁰ => (_lh_finite_Leaf_0⁰ == _lh_finite_Leaf_0⁰) | NS _lh_finite_NS_0⁰ _lh_finite_NS_1⁰ => (finite_lh_₁(_lh_finite_NS_0⁰) && finite_lh_₁(_lh_finite_NS_1⁰)) | EW _lh_finite_EW_0⁰ _lh_finite_EW_1⁰ => (finite_lh_₁(_lh_finite_EW_0⁰) && finite_lh_₁(_lh_finite_EW_1⁰)) | _  => error⁰}: 1310
//│ [NS build_tree_lh_₁(nsp1⁰, nsp2⁰) build_tree_lh_₁(nsp3⁰, nsp4⁰)]: 1251 --->
//│ 	case _lh_finite_arg1⁰ of {Leaf _lh_finite_Leaf_0⁰ => (_lh_finite_Leaf_0⁰ == _lh_finite_Leaf_0⁰) | NS _lh_finite_NS_0⁰ _lh_finite_NS_1⁰ => (finite_lh_₁(_lh_finite_NS_0⁰) && finite_lh_₁(_lh_finite_NS_1⁰)) | EW _lh_finite_EW_0⁰ _lh_finite_EW_1⁰ => (finite_lh_₁(_lh_finite_EW_0⁰) && finite_lh_₁(_lh_finite_EW_1⁰)) | _  => error⁰}: 1310
//│ [EW build_tree_lh_₁(ewp1⁰, ewp2⁰) build_tree_lh_₁(ewp3⁰, ewp4⁰)]: 1262 --->
//│ 	case _lh_finite_arg1⁰ of {Leaf _lh_finite_Leaf_0⁰ => (_lh_finite_Leaf_0⁰ == _lh_finite_Leaf_0⁰) | NS _lh_finite_NS_0⁰ _lh_finite_NS_1⁰ => (finite_lh_₁(_lh_finite_NS_0⁰) && finite_lh_₁(_lh_finite_NS_1⁰)) | EW _lh_finite_EW_0⁰ _lh_finite_EW_1⁰ => (finite_lh_₁(_lh_finite_EW_0⁰) && finite_lh_₁(_lh_finite_EW_1⁰)) | _  => error⁰}: 1310
//│ ------------------
//│ case _lh_point_colour_arg1¹ of {LH_P2 _lh_point_colour_LH_P2_0¹ _lh_point_colour_LH_P2_1¹ => check_radius_lh_₅(np_lh_₅(_lh_point_colour_LH_P2_0¹), nq_lh_₅(_lh_point_colour_LH_P2_1¹), 0, 0.0, 0.0) | _  => error⁰}: 713 --->
//│ 	[LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1¹]: 920
//│ case _lh_point_colour_arg1² of {LH_P2 _lh_point_colour_LH_P2_0² _lh_point_colour_LH_P2_1² => check_radius_lh_₄(np_lh_₄(_lh_point_colour_LH_P2_0²), nq_lh_₄(_lh_point_colour_LH_P2_1²), 0, 0.0, 0.0) | _  => error⁰}: 732 --->
//│ 	[LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1⁰]: 912
//│ case _lh_equalp_arg2⁰ of {LH_P2 _lh_equalp_LH_P2_0¹ _lh_equalp_LH_P2_1¹ => ((_lh_equalp_LH_P2_0⁰ == _lh_equalp_LH_P2_0¹) && (_lh_equalp_LH_P2_1⁰ == _lh_equalp_LH_P2_1¹)) | _  => error⁰}: 769 --->
//│ 	[LH_P2 (0 - 1) 0]: 801
//│ case _lh_equalp_arg2² of {LH_P2 _lh_equalp_LH_P2_0⁵ _lh_equalp_LH_P2_1⁵ => ((_lh_equalp_LH_P2_0⁴ == _lh_equalp_LH_P2_0⁵) && (_lh_equalp_LH_P2_1⁴ == _lh_equalp_LH_P2_1⁵)) | _  => error⁰}: 818 --->
//│ 	[LH_P2 0 1]: 692
//│ case _lh_equalp_arg2³ of {LH_P2 _lh_equalp_LH_P2_0⁷ _lh_equalp_LH_P2_1⁷ => ((_lh_equalp_LH_P2_0⁶ == _lh_equalp_LH_P2_0⁷) && (_lh_equalp_LH_P2_1⁶ == _lh_equalp_LH_P2_1⁷)) | _  => error⁰}: 846 --->
//│ 	[LH_P2 1 0]: 901
//│ case _lh_finite_arg1⁰ of {Leaf _lh_finite_Leaf_0⁰ => (_lh_finite_Leaf_0⁰ == _lh_finite_Leaf_0⁰) | NS _lh_finite_NS_0⁰ _lh_finite_NS_1⁰ => (finite_lh_₁(_lh_finite_NS_0⁰) && finite_lh_₁(_lh_finite_NS_1⁰)) | EW _lh_finite_EW_0⁰ _lh_finite_EW_1⁰ => (finite_lh_₁(_lh_finite_EW_0⁰) && finite_lh_₁(_lh_finite_EW_1⁰)) | _  => error⁰}: 1310 --->
//│ 	[Leaf rec_col⁰]: 1231
//│ 	[NS build_tree_lh_₁(nsp1⁰, nsp2⁰) build_tree_lh_₁(nsp3⁰, nsp4⁰)]: 1251
//│ 	[EW build_tree_lh_₁(ewp1⁰, ewp2⁰) build_tree_lh_₁(ewp3⁰, ewp4⁰)]: 1262
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMandel2_nofib_lh_₁(primId⁰([LH_C 60 [LH_N]]))
//│ def build_tree_lh_₁(_lh_build_tree_arg1⁰, _lh_build_tree_arg2⁰) = 
//│ 	let _lh_matchIdent⁰ = _lh_build_tree_arg1⁰
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰ => 
//│ 			let _lh_matchIdent¹ = _lh_build_tree_arg2⁰
//│ 			in case _lh_matchIdent¹ of {
//│ 				LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹ => 
//│ 					let rec_col⁰ = check_perim_lh_₁(_lh_build_tree_arg1⁰, _lh_build_tree_arg2⁰)
//│ 					in let split⁰ = if ((_lh_build_tree_LH_P2_0¹ - _lh_build_tree_LH_P2_0⁰) >= (_lh_build_tree_LH_P2_1¹ - _lh_build_tree_LH_P2_1⁰)) then [LH_C 'N' [LH_C 'S' [LH_N]]] else [LH_C 'E' [LH_C 'W' [LH_N]]]
//│ 					in let split_x⁰ = div⁰((_lh_build_tree_LH_P2_0¹ + _lh_build_tree_LH_P2_0⁰), 2)
//│ 					in let split_y⁰ = div⁰((_lh_build_tree_LH_P2_1¹ + _lh_build_tree_LH_P2_1⁰), 2)
//│ 					in let nsp1⁰ = _lh_build_tree_arg1⁰
//│ 					in let nsp2⁰ = [LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]
//│ 					in let nsp3⁰ = [LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]
//│ 					in let nsp4⁰ = _lh_build_tree_arg2⁰
//│ 					in let ewp1⁰ = _lh_build_tree_arg1⁰
//│ 					in let ewp2⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]
//│ 					in let ewp3⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]
//│ 					in let ewp4⁰ = _lh_build_tree_arg2⁰
//│ 					in if (rec_col⁰ /= (0 - 1)) then 
//│ 						let _lh_finite_Leaf_0⁰ = rec_col⁰
//│ 						in (fun _lh_dummy⁰ -> (_lh_finite_Leaf_0⁰ == _lh_finite_Leaf_0⁰)) else if polyEq⁰(split⁰, [LH_C 'N' [LH_C 'S' [LH_N]]]) then 
//│ 						let _lh_finite_NS_1⁰ = build_tree_lh_₁(nsp3⁰, nsp4⁰)
//│ 						in let _lh_finite_NS_0⁰ = build_tree_lh_₁(nsp1⁰, nsp2⁰)
//│ 						in (fun _lh_dummy¹ -> (finite_lh_₁(_lh_finite_NS_0⁰) && finite_lh_₁(_lh_finite_NS_1⁰))) else 
//│ 						let _lh_finite_EW_1⁰ = build_tree_lh_₁(ewp3⁰, ewp4⁰)
//│ 						in let _lh_finite_EW_0⁰ = build_tree_lh_₁(ewp1⁰, ewp2⁰)
//│ 						in (fun _lh_dummy² -> (finite_lh_₁(_lh_finite_EW_0⁰) && finite_lh_₁(_lh_finite_EW_1⁰)))
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ def check_perim_lh_₁(_lh_check_perim_arg1⁰, _lh_check_perim_arg2⁰) = 
//│ 	let _lh_matchIdent² = _lh_check_perim_arg1⁰
//│ 	in case _lh_matchIdent² of {
//│ 		LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰ => 
//│ 			let _lh_matchIdent³ = _lh_check_perim_arg2⁰
//│ 			in case _lh_matchIdent³ of {
//│ 				LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹ => 
//│ 					let col1⁰ = point_colour_lh_₃(_lh_check_perim_arg1⁰)
//│ 					in let col2⁰ = point_colour_lh_₄(
//│ 						let _lh_point_colour_LH_P2_1⁴ = _lh_check_perim_LH_P2_1⁰
//│ 						in let _lh_point_colour_LH_P2_0⁴ = _lh_check_perim_LH_P2_0¹
//│ 						in (fun _lh_dummy³ -> check_radius_lh_₄(np_lh_₄(_lh_point_colour_LH_P2_0⁴), nq_lh_₄(_lh_point_colour_LH_P2_1⁴), 0, 0.0, 0.0)))
//│ 					in let col3⁰ = point_colour_lh_₁(_lh_check_perim_arg2⁰)
//│ 					in let col4⁰ = point_colour_lh_₅(
//│ 						let _lh_point_colour_LH_P2_1⁵ = _lh_check_perim_LH_P2_1¹
//│ 						in let _lh_point_colour_LH_P2_0⁵ = _lh_check_perim_LH_P2_0⁰
//│ 						in (fun _lh_dummy⁴ -> check_radius_lh_₅(np_lh_₅(_lh_point_colour_LH_P2_0⁵), nq_lh_₅(_lh_point_colour_LH_P2_1⁵), 0, 0.0, 0.0)))
//│ 					in let corners_diff⁰ = if (col1⁰ == col2⁰) then if (col1⁰ == col3⁰) then if (col1⁰ == col4⁰) then [False] else [True] else [True] else [True]
//│ 					in let check_line⁰ = (fun xcyc⁰ -> (fun xdyd⁰ -> 
//│ 						let _lh_matchIdent⁴ = xcyc⁰
//│ 						in case _lh_matchIdent⁴ of {
//│ 							LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1² => 
//│ 								let _lh_matchIdent⁵ = xdyd⁰
//│ 								in case _lh_matchIdent⁵ of {
//│ 									LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => 
//│ 										let finished⁰ = if equalp_lh_₁(xdyd⁰, right_lh_₁) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh_₂(xdyd⁰, down_lh_₂) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh_₄(xdyd⁰, left_lh_₂) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ 										in if finished⁰ then [True] else if (point_colour_lh_₆(xcyc⁰) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³])
//│ 									| _  => error⁰}
//│ 							| _  => error⁰}))
//│ 					in let check_sides⁰ = if check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0⁰ + 1) _lh_check_perim_LH_P2_1⁰], right_lh_₂) then if check_line⁰([LH_P2 _lh_check_perim_LH_P2_0¹ (_lh_check_perim_LH_P2_1⁰ + 1)], down_lh_₁) then if check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0¹ - 1) _lh_check_perim_LH_P2_1¹], left_lh_₁) then if check_line⁰([LH_P2 _lh_check_perim_LH_P2_0⁰ (_lh_check_perim_LH_P2_1¹ - 1)], up_lh_₁) then col1⁰ else (0 - 1) else (0 - 1) else (0 - 1) else (0 - 1)
//│ 					in if equalp_lh_₃(_lh_check_perim_arg1⁰, _lh_check_perim_arg2⁰) then point_colour_lh_₂(_lh_check_perim_arg1⁰) else if corners_diff⁰ then (0 - 1) else check_sides⁰
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ def check_radius_lh_₁(_lh_check_radius_arg1⁴, _lh_check_radius_arg2⁴, _lh_check_radius_arg3⁴, _lh_check_radius_arg4⁴, _lh_check_radius_arg5⁴) = 
//│ 	let xn⁴ = new_x_lh_₁(_lh_check_radius_arg4⁴, _lh_check_radius_arg5⁴, _lh_check_radius_arg1⁴)
//│ 	in let yn⁴ = new_y_lh_₁(_lh_check_radius_arg4⁴, _lh_check_radius_arg5⁴, _lh_check_radius_arg2⁴)
//│ 	in let r⁴ = radius_lh_₁(xn⁴, yn⁴)
//│ 	in let kp⁴ = (_lh_check_radius_arg3⁴ + 1)
//│ 	in if (kp⁴ == num_cols_lh_₁) then 0 else if polyGt⁰(r⁴, float_of_int⁰(m_lh_₁)) then kp⁴ else check_radius_lh_₁(_lh_check_radius_arg1⁴, _lh_check_radius_arg2⁴, kp⁴, xn⁴, yn⁴)
//│ def check_radius_lh_₂(_lh_check_radius_arg1³, _lh_check_radius_arg2³, _lh_check_radius_arg3³, _lh_check_radius_arg4³, _lh_check_radius_arg5³) = 
//│ 	let xn³ = new_x_lh_₂(_lh_check_radius_arg4³, _lh_check_radius_arg5³, _lh_check_radius_arg1³)
//│ 	in let yn³ = new_y_lh_₂(_lh_check_radius_arg4³, _lh_check_radius_arg5³, _lh_check_radius_arg2³)
//│ 	in let r³ = radius_lh_₂(xn³, yn³)
//│ 	in let kp³ = (_lh_check_radius_arg3³ + 1)
//│ 	in if (kp³ == num_cols_lh_₁) then 0 else if polyGt⁰(r³, float_of_int⁰(m_lh_₁)) then kp³ else check_radius_lh_₂(_lh_check_radius_arg1³, _lh_check_radius_arg2³, kp³, xn³, yn³)
//│ def check_radius_lh_₃(_lh_check_radius_arg1¹, _lh_check_radius_arg2¹, _lh_check_radius_arg3¹, _lh_check_radius_arg4¹, _lh_check_radius_arg5¹) = 
//│ 	let xn¹ = new_x_lh_₂(_lh_check_radius_arg4¹, _lh_check_radius_arg5¹, _lh_check_radius_arg1¹)
//│ 	in let yn¹ = new_y_lh_₂(_lh_check_radius_arg4¹, _lh_check_radius_arg5¹, _lh_check_radius_arg2¹)
//│ 	in let r¹ = radius_lh_₂(xn¹, yn¹)
//│ 	in let kp¹ = (_lh_check_radius_arg3¹ + 1)
//│ 	in if (kp¹ == num_cols_lh_₁) then 0 else if polyGt⁰(r¹, float_of_int⁰(m_lh_₁)) then kp¹ else check_radius_lh_₃(_lh_check_radius_arg1¹, _lh_check_radius_arg2¹, kp¹, xn¹, yn¹)
//│ def check_radius_lh_₄(_lh_check_radius_arg1², _lh_check_radius_arg2², _lh_check_radius_arg3², _lh_check_radius_arg4², _lh_check_radius_arg5²) = 
//│ 	let xn² = new_x_lh_₂(_lh_check_radius_arg4², _lh_check_radius_arg5², _lh_check_radius_arg1²)
//│ 	in let yn² = new_y_lh_₂(_lh_check_radius_arg4², _lh_check_radius_arg5², _lh_check_radius_arg2²)
//│ 	in let r² = radius_lh_₂(xn², yn²)
//│ 	in let kp² = (_lh_check_radius_arg3² + 1)
//│ 	in if (kp² == num_cols_lh_₁) then 0 else if polyGt⁰(r², float_of_int⁰(m_lh_₁)) then kp² else check_radius_lh_₄(_lh_check_radius_arg1², _lh_check_radius_arg2², kp², xn², yn²)
//│ def check_radius_lh_₅(_lh_check_radius_arg1⁰, _lh_check_radius_arg2⁰, _lh_check_radius_arg3⁰, _lh_check_radius_arg4⁰, _lh_check_radius_arg5⁰) = 
//│ 	let xn⁰ = new_x_lh_₂(_lh_check_radius_arg4⁰, _lh_check_radius_arg5⁰, _lh_check_radius_arg1⁰)
//│ 	in let yn⁰ = new_y_lh_₂(_lh_check_radius_arg4⁰, _lh_check_radius_arg5⁰, _lh_check_radius_arg2⁰)
//│ 	in let r⁰ = radius_lh_₂(xn⁰, yn⁰)
//│ 	in let kp⁰ = (_lh_check_radius_arg3⁰ + 1)
//│ 	in if (kp⁰ == num_cols_lh_₁) then 0 else if polyGt⁰(r⁰, float_of_int⁰(m_lh_₁)) then kp⁰ else check_radius_lh_₅(_lh_check_radius_arg1⁰, _lh_check_radius_arg2⁰, kp⁰, xn⁰, yn⁰)
//│ def check_radius_lh_₆(_lh_check_radius_arg1⁵, _lh_check_radius_arg2⁵, _lh_check_radius_arg3⁵, _lh_check_radius_arg4⁵, _lh_check_radius_arg5⁵) = 
//│ 	let xn⁵ = new_x_lh_₂(_lh_check_radius_arg4⁵, _lh_check_radius_arg5⁵, _lh_check_radius_arg1⁵)
//│ 	in let yn⁵ = new_y_lh_₂(_lh_check_radius_arg4⁵, _lh_check_radius_arg5⁵, _lh_check_radius_arg2⁵)
//│ 	in let r⁵ = radius_lh_₂(xn⁵, yn⁵)
//│ 	in let kp⁵ = (_lh_check_radius_arg3⁵ + 1)
//│ 	in if (kp⁵ == num_cols_lh_₁) then 0 else if polyGt⁰(r⁵, float_of_int⁰(m_lh_₁)) then kp⁵ else check_radius_lh_₆(_lh_check_radius_arg1⁵, _lh_check_radius_arg2⁵, kp⁵, xn⁵, yn⁵)
//│ def delta_p_lh_₁ = ((pmx_lh_₁ -. pmn_lh_₂) /. float_of_int⁰((size_lh_₁ - 1)))
//│ def delta_p_lh_₂ = ((pmx_lh_₁ -. pmn_lh_₂) /. float_of_int⁰((size_lh_₁ - 1)))
//│ def delta_q_lh_₁ = ((qmx_lh_₁ -. qmn_lh_₁) /. float_of_int⁰((size_lh_₁ - 1)))
//│ def down_lh_₁ = [LH_P2 0 1]
//│ def down_lh_₂(_lh_equalp_LH_P2_0¹⁰, _lh_equalp_LH_P2_1¹⁰) = 
//│ 	let _lh_equalp_LH_P2_1⁹ = 1
//│ 	in let _lh_equalp_LH_P2_0⁹ = 0
//│ 	in ((_lh_equalp_LH_P2_0¹⁰ == _lh_equalp_LH_P2_0⁹) && (_lh_equalp_LH_P2_1¹⁰ == _lh_equalp_LH_P2_1⁹))
//│ def equalp_lh_₁(_lh_equalp_arg1¹, _lh_equalp_arg2¹) = case _lh_equalp_arg1¹ of {
//│ 	LH_P2 _lh_equalp_LH_P2_0⁵ _lh_equalp_LH_P2_1⁵ => _lh_equalp_arg2¹(_lh_equalp_LH_P2_0⁵, _lh_equalp_LH_P2_1⁵)
//│ 	| _  => error⁰}
//│ def equalp_lh_₂(_lh_equalp_arg1⁰, _lh_equalp_arg2⁰) = case _lh_equalp_arg1⁰ of {
//│ 	LH_P2 _lh_equalp_LH_P2_0⁴ _lh_equalp_LH_P2_1⁴ => _lh_equalp_arg2⁰(_lh_equalp_LH_P2_0⁴, _lh_equalp_LH_P2_1⁴)
//│ 	| _  => error⁰}
//│ def equalp_lh_₃(_lh_equalp_arg1², _lh_equalp_arg2²) = case _lh_equalp_arg1² of {
//│ 	LH_P2 _lh_equalp_LH_P2_0⁶ _lh_equalp_LH_P2_1⁶ => case _lh_equalp_arg2² of {
//│ 		LH_P2 _lh_equalp_LH_P2_0⁷ _lh_equalp_LH_P2_1⁷ => ((_lh_equalp_LH_P2_0⁶ == _lh_equalp_LH_P2_0⁷) && (_lh_equalp_LH_P2_1⁶ == _lh_equalp_LH_P2_1⁷))
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def equalp_lh_₄(_lh_equalp_arg1³, _lh_equalp_arg2³) = case _lh_equalp_arg1³ of {
//│ 	LH_P2 _lh_equalp_LH_P2_0⁸ _lh_equalp_LH_P2_1⁸ => _lh_equalp_arg2³(_lh_equalp_LH_P2_0⁸, _lh_equalp_LH_P2_1⁸)
//│ 	| _  => error⁰}
//│ def finite_lh_₁(_lh_finite_arg1⁰) = _lh_finite_arg1⁰([lh_Unit])
//│ def left_lh_₁ = [LH_P2 (0 - 1) 0]
//│ def left_lh_₂(_lh_equalp_LH_P2_0³, _lh_equalp_LH_P2_1³) = 
//│ 	let _lh_equalp_LH_P2_1² = 0
//│ 	in let _lh_equalp_LH_P2_0² = (0 - 1)
//│ 	in ((_lh_equalp_LH_P2_0³ == _lh_equalp_LH_P2_0²) && (_lh_equalp_LH_P2_1³ == _lh_equalp_LH_P2_1²))
//│ def length_lh_₁(ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => (1 + length_lh_₁(t⁰))
//│ 	| LH_N  => 0}
//│ def m_lh_₁ = 20
//│ def max_lh_₁(_lh_max_arg1⁰, _lh_max_arg2⁰) = if (_lh_max_arg1⁰ > _lh_max_arg2⁰) then _lh_max_arg1⁰ else _lh_max_arg2⁰
//│ def new_x_lh_₁(_lh_new_x_arg1¹, _lh_new_x_arg2¹, _lh_new_x_arg3¹) = (((_lh_new_x_arg1¹ *. _lh_new_x_arg1¹) -. (_lh_new_x_arg2¹ *. _lh_new_x_arg2¹)) +. _lh_new_x_arg3¹)
//│ def new_x_lh_₂(_lh_new_x_arg1⁰, _lh_new_x_arg2⁰, _lh_new_x_arg3⁰) = (((_lh_new_x_arg1⁰ *. _lh_new_x_arg1⁰) -. (_lh_new_x_arg2⁰ *. _lh_new_x_arg2⁰)) +. _lh_new_x_arg3⁰)
//│ def new_y_lh_₁(_lh_new_y_arg1⁰, _lh_new_y_arg2⁰, _lh_new_y_arg3⁰) = (((2.0 *. _lh_new_y_arg1⁰) *. _lh_new_y_arg2⁰) +. _lh_new_y_arg3⁰)
//│ def new_y_lh_₂(_lh_new_y_arg1¹, _lh_new_y_arg2¹, _lh_new_y_arg3¹) = (((2.0 *. _lh_new_y_arg1¹) *. _lh_new_y_arg2¹) +. _lh_new_y_arg3¹)
//│ def np_lh_₁(_lh_np_arg1²) = (pmn_lh_₁ +. (float_of_int⁰(_lh_np_arg1²) *. delta_p_lh_₁))
//│ def np_lh_₂(_lh_np_arg1⁰) = (pmn_lh_₂ +. (float_of_int⁰(_lh_np_arg1⁰) *. delta_p_lh_₂))
//│ def np_lh_₃(_lh_np_arg1¹) = (pmn_lh_₂ +. (float_of_int⁰(_lh_np_arg1¹) *. delta_p_lh_₂))
//│ def np_lh_₄(_lh_np_arg1³) = (pmn_lh_₂ +. (float_of_int⁰(_lh_np_arg1³) *. delta_p_lh_₂))
//│ def np_lh_₅(_lh_np_arg1⁵) = (pmn_lh_₂ +. (float_of_int⁰(_lh_np_arg1⁵) *. delta_p_lh_₂))
//│ def np_lh_₆(_lh_np_arg1⁴) = (pmn_lh_₂ +. (float_of_int⁰(_lh_np_arg1⁴) *. delta_p_lh_₂))
//│ def nq_lh_₁(_lh_nq_arg1⁴) = (qmn_lh_₁ +. (float_of_int⁰(_lh_nq_arg1⁴) *. delta_q_lh_₁))
//│ def nq_lh_₂(_lh_nq_arg1⁰) = (qmn_lh_₁ +. (float_of_int⁰(_lh_nq_arg1⁰) *. delta_q_lh_₁))
//│ def nq_lh_₃(_lh_nq_arg1¹) = (qmn_lh_₁ +. (float_of_int⁰(_lh_nq_arg1¹) *. delta_q_lh_₁))
//│ def nq_lh_₄(_lh_nq_arg1³) = (qmn_lh_₁ +. (float_of_int⁰(_lh_nq_arg1³) *. delta_q_lh_₁))
//│ def nq_lh_₅(_lh_nq_arg1²) = (qmn_lh_₁ +. (float_of_int⁰(_lh_nq_arg1²) *. delta_q_lh_₁))
//│ def nq_lh_₆(_lh_nq_arg1⁵) = (qmn_lh_₁ +. (float_of_int⁰(_lh_nq_arg1⁵) *. delta_q_lh_₁))
//│ def num_cols_lh_₁ = 26
//│ def pmn_lh_₁ = (0.0 -. 2.25)
//│ def pmn_lh_₂ = (0.0 -. 2.25)
//│ def pmx_lh_₁ = 0.75
//│ def point_colour_lh_₁(_lh_point_colour_arg1²) = case _lh_point_colour_arg1² of {
//│ 	LH_P2 _lh_point_colour_LH_P2_0² _lh_point_colour_LH_P2_1² => check_radius_lh_₁(np_lh_₁(_lh_point_colour_LH_P2_0²), nq_lh_₁(_lh_point_colour_LH_P2_1²), 0, 0.0, 0.0)
//│ 	| _  => error⁰}
//│ def point_colour_lh_₂(_lh_point_colour_arg1⁰) = case _lh_point_colour_arg1⁰ of {
//│ 	LH_P2 _lh_point_colour_LH_P2_0⁰ _lh_point_colour_LH_P2_1⁰ => check_radius_lh_₂(np_lh_₂(_lh_point_colour_LH_P2_0⁰), nq_lh_₂(_lh_point_colour_LH_P2_1⁰), 0, 0.0, 0.0)
//│ 	| _  => error⁰}
//│ def point_colour_lh_₃(_lh_point_colour_arg1¹) = case _lh_point_colour_arg1¹ of {
//│ 	LH_P2 _lh_point_colour_LH_P2_0¹ _lh_point_colour_LH_P2_1¹ => check_radius_lh_₃(np_lh_₃(_lh_point_colour_LH_P2_0¹), nq_lh_₃(_lh_point_colour_LH_P2_1¹), 0, 0.0, 0.0)
//│ 	| _  => error⁰}
//│ def point_colour_lh_₄(_lh_point_colour_arg1⁴) = _lh_point_colour_arg1⁴([lh_Unit])
//│ def point_colour_lh_₅(_lh_point_colour_arg1⁵) = _lh_point_colour_arg1⁵([lh_Unit])
//│ def point_colour_lh_₆(_lh_point_colour_arg1³) = case _lh_point_colour_arg1³ of {
//│ 	LH_P2 _lh_point_colour_LH_P2_0³ _lh_point_colour_LH_P2_1³ => check_radius_lh_₆(np_lh_₆(_lh_point_colour_LH_P2_0³), nq_lh_₆(_lh_point_colour_LH_P2_1³), 0, 0.0, 0.0)
//│ 	| _  => error⁰}
//│ def qmn_lh_₁ = (0.0 -. 1.5)
//│ def qmx_lh_₁ = 1.5
//│ def radius_lh_₁(_lh_radius_arg1⁰, _lh_radius_arg2⁰) = ((_lh_radius_arg1⁰ *. _lh_radius_arg1⁰) +. (_lh_radius_arg2⁰ *. _lh_radius_arg2⁰))
//│ def radius_lh_₂(_lh_radius_arg1¹, _lh_radius_arg2¹) = ((_lh_radius_arg1¹ *. _lh_radius_arg1¹) +. (_lh_radius_arg2¹ *. _lh_radius_arg2¹))
//│ def right_lh_₁(_lh_equalp_LH_P2_0¹, _lh_equalp_LH_P2_1¹) = 
//│ 	let _lh_equalp_LH_P2_1⁰ = 0
//│ 	in let _lh_equalp_LH_P2_0⁰ = 1
//│ 	in ((_lh_equalp_LH_P2_0¹ == _lh_equalp_LH_P2_0⁰) && (_lh_equalp_LH_P2_1¹ == _lh_equalp_LH_P2_1⁰))
//│ def right_lh_₂ = [LH_P2 1 0]
//│ def size_lh_₁ = 200
//│ def testMandel2_nofib_lh_₁(_lh_testMandel2_nofib_arg1⁰) = 
//│ 	let size'⁰ = max_lh_₁(length_lh_₁(_lh_testMandel2_nofib_arg1⁰), size_lh_₁)
//│ 	in let tree⁰ = build_tree_lh_₁([LH_P2 0 0], [LH_P2 size'⁰ div⁰(size'⁰, 2)])
//│ 	in finite_lh_₁(tree⁰)
//│ def up_lh_₁ = [LH_P2 0 (0 - 1)]
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
