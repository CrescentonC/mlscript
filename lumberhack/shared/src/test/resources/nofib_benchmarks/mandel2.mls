:NewParser
:ParseOnly

:lhInHaskell
:lhGenOCaml
strEq (ha:ta) hbtb = case hbtb of { (hb:tb) -> if polyEq ha hb then strEq ta tb else False; [] -> False }
strEq [] hbtb = case hbtb of { (hb:tb) -> False; [] -> True }
max a b = if a > b then a else b
data MandTree = NS MandTree MandTree | EW MandTree MandTree | Leaf Colour deriving (Show)
-- Colour - colour of a point or rectangle
type Colour = Int
-- Point - 2-Tuple of integers, (Int1,Int2),
--         where Int1 - x-coord of point,
--               Int2 - y-coord of point.
type Point = (Int,Int)
-- MandTuple
type MandTuple = (Int,Int,Int,Int,Colour)
-- size: Size of window - Square 400x400
size :: Int
size = 200
-- build_tree - Constructs mandtree
build_tree :: Point -> Point -> MandTree
build_tree (x1,y1)
           (x2,y2)
           =
            let rec_col = check_perim (x1,y1) (x2,y2) in
            let split   = if (x2-x1) >= (y2-y1) then "NS" else "EW" in
            let split_x = (x2+x1) `div` 2 in
            let split_y = (y2+y1) `div` 2 in
            let nsp1    = (x1,y1) in
            let nsp2    = (split_x, y2) in
            let nsp3    = (split_x+1, y1) in
            let nsp4    = (x2,y2) in
            let ewp1    = (x1,y1) in
            let ewp2    = (x2, split_y) in
            let ewp3    = (x1, split_y+1) in
            let ewp4    = (x2,y2) in
            if rec_col /= (0-1) then
              Leaf rec_col
            else
              if strEq split "NS" then (NS (build_tree nsp1 nsp2) (build_tree nsp3 nsp4)) else (EW (build_tree ewp1 ewp2) (build_tree ewp3 ewp4))
check_perim :: Point -> Point -> Colour
check_perim (x1,y1) (x2,y2) =
              let col1         = point_colour (x1,y1) in
              let col2         = point_colour (x2,y1) in
              let col3         = point_colour (x2,y2) in
              let col4         = point_colour (x1,y2) in
              let corners_diff = if col1 == col2 then (if col1 == col3 then (if col1 == col4 then False else True) else True) else True in
              let check_line = \xcyc xdyd -> 
                                  case xcyc of {
                                    (xc,yc) -> case xdyd of {
                                      (xd,yd) ->
                                        let finished = if (equalp (xd,yd) right) then (xc >= x2)
                                                       else if (equalp (xd,yd) down) then (yc <= y2)
                                                       else if (equalp (xd,yd) left) then (xc <= x1)
                                                       else (yc >= y1)
                                        in
                                        if finished then True
                                        else if ((point_colour (xc,yc)) /= col1) then False
                                        else check_line (xc+xd, yc+yd) (xd,yd)
                                    }
                                  }
              in
              let check_sides =
                            if (check_line (x1+1,y1) right) then
                              if (check_line (x2,y1+1) down) then
                                if (check_line (x2-1,y2) left) then
                                  if (check_line (x1,y2-1) up) then
                                    col1
                                  else
                                    (0-1)
                                else
                                  (0-1)
                              else
                                (0-1)
                            else
                              (0-1)
              in
              if (equalp (x1,y1) (x2,y2)) then
                 point_colour (x1,y1)
              else if corners_diff then
                 0-1
              else
                check_sides
-- Evaluate the color index of a point
-- This is the algoritm described on page 121 of "The Beauty of Fractals"
-- The code is commented with the step numbers from the algorithm.
-- point_colour - Calculates the dwell value of a point.
point_colour :: Point -> Colour
point_colour (x, y) = check_radius (np x) (nq y) 0 0.0 0.0 -- step1
-- check_radius - Calculates the escape radius of a point
check_radius :: Float -> Float -> Int -> Float -> Float -> Colour
check_radius p q k x y =
  let xn = new_x x y p in
  let yn = new_y x y q in
  let r = radius xn yn in
  let kp = k + 1       in
  if kp == num_cols then 0
  else
    if polyGt r (float_of_int m) then
      kp
    else
      check_radius p q (kp) xn yn
-- M Set Properties.
pmn :: Float -- Min p value.
pmn =  0.0 -. 2.25
pmx :: Float -- Max p value.
pmx =   0.75
qmn :: Float -- Min q value.
qmn = 0.0 -. 1.5
qmx :: Float -- Max q value
qmx = 1.5
m :: Int      -- The escape radius, M.
m =  20
--- Misc functions.
equalp :: Point -> Point -> Bool
equalp (x1, y1) (x2, y2) = ((x1 == x2) && (y1 == y2))
-- Set calculation functions.
num_cols :: Int -- The number of colors; num_cols+1 = length (the_colors).
num_cols = 26
delta_p :: Float      -- The change in p per pixel.
delta_p =  (pmx -. pmn) /. (float_of_int (size - 1))
delta_q :: Float      -- The change in q per pixel.
delta_q =  (qmx -. qmn) /. (float_of_int (size - 1))
np :: Int -> Float     -- Calculate a new value of p.
np x = pmn +. ((float_of_int x) *. delta_p)
nq :: Int -> Float     -- Calculate a new value of q.
nq y = qmn +. ((float_of_int y) *. delta_q)
radius :: Float -> Float -> Float       -- Current radius of apoint (x,y).
radius x y = (x *. x) +. (y *. y)
new_x :: Float -> Float -> Float -> Float       -- iterate new x value.
new_x x y p = (x *. x) -. (y *. y) +. p
new_y :: Float -> Float -> Float -> Float       -- iterate new y value.
new_y x y q = (2.0 *. x *. y) +. q
-- Misc. functions for traversing perimeter of rectangle.
up,down,left,right :: Point
up    = ( 0,0-1)
down  = ( 0, 1)
left  = (0-1, 0)
right = ( 1, 0)
-- finite: forces evaluation of a tree
finite            :: MandTree -> Bool
finite (Leaf c)   =  (c == c)
finite (NS t1 t2) =  ((finite t1) && (finite t2))
finite (EW t1 t2) =  ((finite t1) && (finite t2))
testMandel2_nofib n =
  let size' = max (length n) size in
  let tree = (build_tree (0,0) (size', size' `div` 2)) in
  finite tree
testMandel2_nofib $ primId [5]
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testMandel2_nofib_lh^729(primId⁰([LH_C 5 [LH_N]]))
//│ def build_tree_lh(_lh_build_tree_arg1⁰, _lh_build_tree_arg2⁰) = case _lh_build_tree_arg1⁰ of {
//│ 	LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰ => case _lh_build_tree_arg2⁰ of {
//│ 		LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹ => 
//│ 			let rec_col⁰ = check_perim_lh^576([LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰], [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹])
//│ 			in let split⁰ = if ((_lh_build_tree_LH_P2_0¹ - _lh_build_tree_LH_P2_0⁰) >= (_lh_build_tree_LH_P2_1¹ - _lh_build_tree_LH_P2_1⁰)) then [LH_C 'N' [LH_C 'S' [LH_N]]] else [LH_C 'E' [LH_C 'W' [LH_N]]]
//│ 			in let split_x⁰ = div⁰((_lh_build_tree_LH_P2_0¹ + _lh_build_tree_LH_P2_0⁰), 2)
//│ 			in let split_y⁰ = div⁰((_lh_build_tree_LH_P2_1¹ + _lh_build_tree_LH_P2_1⁰), 2)
//│ 			in let nsp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ 			in let nsp2⁰ = [LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]
//│ 			in let nsp3⁰ = [LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]
//│ 			in let nsp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ 			in let ewp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ 			in let ewp2⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]
//│ 			in let ewp3⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]
//│ 			in let ewp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ 			in if (rec_col⁰ /= (0 - 1)) then [Leaf rec_col⁰] else if strEq_lh^670(split⁰, [LH_C 'N' [LH_C 'S' [LH_N]]]) then [NS build_tree_lh^679(nsp1⁰, nsp2⁰) build_tree_lh^684(nsp3⁰, nsp4⁰)] else [EW build_tree_lh^690(ewp1⁰, ewp2⁰) build_tree_lh^695(ewp3⁰, ewp4⁰)]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def check_perim_lh(_lh_check_perim_arg1⁰, _lh_check_perim_arg2⁰) = case _lh_check_perim_arg1⁰ of {
//│ 	LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰ => case _lh_check_perim_arg2⁰ of {
//│ 		LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹ => 
//│ 			let col1⁰ = point_colour_lh^47([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰])
//│ 			in let col2⁰ = point_colour_lh^52([LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1⁰])
//│ 			in let col3⁰ = point_colour_lh^57([LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹])
//│ 			in let col4⁰ = point_colour_lh^62([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1¹])
//│ 			in let corners_diff⁰ = if (col1⁰ == col2⁰) then if (col1⁰ == col3⁰) then if (col1⁰ == col4⁰) then [False] else [True] else [True] else [True]
//│ 			in let check_line⁰ = (fun xcyc⁰ -> (fun xdyd⁰ -> 
//│ 				let _lh_matchIdent⁰ = xcyc⁰
//│ 				in case _lh_matchIdent⁰ of {
//│ 					LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1² => 
//│ 						let _lh_matchIdent¹ = xdyd⁰
//│ 						in case _lh_matchIdent¹ of {
//│ 							LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => 
//│ 								let finished⁰ = if equalp_lh^93([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh^98) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh^105([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh^110) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh^117([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh^122) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ 								in if finished⁰ then [True] else if (point_colour_lh^140([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³])
//│ 							| _  => error⁰}
//│ 					| _  => error⁰}))
//│ 			in let check_sides⁰ = if check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0⁰ + 1) _lh_check_perim_LH_P2_1⁰], right_lh^186) then if check_line⁰([LH_P2 _lh_check_perim_LH_P2_0¹ (_lh_check_perim_LH_P2_1⁰ + 1)], down_lh^197) then if check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0¹ - 1) _lh_check_perim_LH_P2_1¹], left_lh^208) then if check_line⁰([LH_P2 _lh_check_perim_LH_P2_0⁰ (_lh_check_perim_LH_P2_1¹ - 1)], up_lh^219) then col1⁰ else (0 - 1) else (0 - 1) else (0 - 1) else (0 - 1)
//│ 			in if equalp_lh^246([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰], [LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹]) then point_colour_lh^255([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰]) else if corners_diff⁰ then (0 - 1) else check_sides⁰
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def check_radius_lh(_lh_check_radius_arg1⁰, _lh_check_radius_arg2⁰, _lh_check_radius_arg3⁰, _lh_check_radius_arg4⁰, _lh_check_radius_arg5⁰) = 
//│ 	let xn⁰ = new_x_lh^474(_lh_check_radius_arg4⁰, _lh_check_radius_arg5⁰, _lh_check_radius_arg1⁰)
//│ 	in let yn⁰ = new_y_lh^481(_lh_check_radius_arg4⁰, _lh_check_radius_arg5⁰, _lh_check_radius_arg2⁰)
//│ 	in let r⁰ = radius_lh^488(xn⁰, yn⁰)
//│ 	in let kp⁰ = (_lh_check_radius_arg3⁰ + 1)
//│ 	in if (kp⁰ == num_cols_lh^501) then 0 else if polyGt⁰(r⁰, float_of_int⁰(m_lh^508)) then kp⁰ else check_radius_lh^512(_lh_check_radius_arg1⁰, _lh_check_radius_arg2⁰, kp⁰, xn⁰, yn⁰)
//│ def delta_p_lh = ((pmx_lh^328 -. pmn_lh^330) /. float_of_int⁰((size_lh^335 - 1)))
//│ def delta_q_lh = ((qmx_lh^388 -. qmn_lh^390) /. float_of_int⁰((size_lh^395 - 1)))
//│ def down_lh = [LH_P2 0 1]
//│ def equalp_lh(_lh_equalp_arg1⁰, _lh_equalp_arg2⁰) = case _lh_equalp_arg1⁰ of {
//│ 	LH_P2 _lh_equalp_LH_P2_0⁰ _lh_equalp_LH_P2_1⁰ => case _lh_equalp_arg2⁰ of {
//│ 		LH_P2 _lh_equalp_LH_P2_0¹ _lh_equalp_LH_P2_1¹ => ((_lh_equalp_LH_P2_0⁰ == _lh_equalp_LH_P2_0¹) && (_lh_equalp_LH_P2_1⁰ == _lh_equalp_LH_P2_1¹))
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def finite_lh(_lh_finite_arg1⁰) = case _lh_finite_arg1⁰ of {
//│ 	Leaf _lh_finite_Leaf_0⁰ => (_lh_finite_Leaf_0⁰ == _lh_finite_Leaf_0⁰)
//│ 	| NS _lh_finite_NS_0⁰ _lh_finite_NS_1⁰ => (finite_lh^553(_lh_finite_NS_0⁰) && finite_lh^557(_lh_finite_NS_1⁰))
//│ 	| EW _lh_finite_EW_0⁰ _lh_finite_EW_1⁰ => (finite_lh^562(_lh_finite_EW_0⁰) && finite_lh^566(_lh_finite_EW_1⁰))
//│ 	| _  => error⁰}
//│ def left_lh = [LH_P2 (0 - 1) 0]
//│ def length_lh(ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => (1 + length_lh^5(t⁰))
//│ 	| LH_N  => 0}
//│ def m_lh = 20
//│ def max_lh(_lh_max_arg1⁰, _lh_max_arg2⁰) = if (_lh_max_arg1⁰ > _lh_max_arg2⁰) then _lh_max_arg1⁰ else _lh_max_arg2⁰
//│ def new_x_lh(_lh_new_x_arg1⁰, _lh_new_x_arg2⁰, _lh_new_x_arg3⁰) = (((_lh_new_x_arg1⁰ *. _lh_new_x_arg1⁰) -. (_lh_new_x_arg2⁰ *. _lh_new_x_arg2⁰)) +. _lh_new_x_arg3⁰)
//│ def new_y_lh(_lh_new_y_arg1⁰, _lh_new_y_arg2⁰, _lh_new_y_arg3⁰) = (((2.0 *. _lh_new_y_arg1⁰) *. _lh_new_y_arg2⁰) +. _lh_new_y_arg3⁰)
//│ def np_lh(_lh_np_arg1⁰) = (pmn_lh^315 +. (float_of_int⁰(_lh_np_arg1⁰) *. delta_p_lh^322))
//│ def nq_lh(_lh_nq_arg1⁰) = (qmn_lh^535 +. (float_of_int⁰(_lh_nq_arg1⁰) *. delta_q_lh^542))
//│ def num_cols_lh = 26
//│ def pmn_lh = (0.0 -. 2.25)
//│ def pmx_lh = 0.75
//│ def point_colour_lh(_lh_point_colour_arg1⁰) = case _lh_point_colour_arg1⁰ of {
//│ 	LH_P2 _lh_point_colour_LH_P2_0⁰ _lh_point_colour_LH_P2_1⁰ => check_radius_lh^13(np_lh^14(_lh_point_colour_LH_P2_0⁰), nq_lh^18(_lh_point_colour_LH_P2_1⁰), 0, 0.0, 0.0)
//│ 	| _  => error⁰}
//│ def qmn_lh = (0.0 -. 1.5)
//│ def qmx_lh = 1.5
//│ def radius_lh(_lh_radius_arg1⁰, _lh_radius_arg2⁰) = ((_lh_radius_arg1⁰ *. _lh_radius_arg1⁰) +. (_lh_radius_arg2⁰ *. _lh_radius_arg2⁰))
//│ def right_lh = [LH_P2 1 0]
//│ def size_lh = 200
//│ def strEq_lh(_lh_strEq_arg1⁰, _lh_strEq_arg2⁰) = case _lh_strEq_arg1⁰ of {
//│ 	LH_C _lh_strEq_LH_C_0⁰ _lh_strEq_LH_C_1⁰ => 
//│ 		let _lh_matchIdent² = _lh_strEq_arg2⁰
//│ 		in case _lh_matchIdent² of {
//│ 			LH_C _lh_strEq_LH_C_0¹ _lh_strEq_LH_C_1¹ => if polyEq⁰(_lh_strEq_LH_C_0⁰, _lh_strEq_LH_C_0¹) then strEq_lh^409(_lh_strEq_LH_C_1⁰, _lh_strEq_LH_C_1¹) else [False]
//│ 			| LH_N  => [False]
//│ 			| _  => error⁰}
//│ 	| LH_N  => 
//│ 		let _lh_matchIdent³ = _lh_strEq_arg2⁰
//│ 		in case _lh_matchIdent³ of {
//│ 			LH_C _lh_strEq_LH_C_0² _lh_strEq_LH_C_1² => [False]
//│ 			| LH_N  => [True]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def testMandel2_nofib_lh(_lh_testMandel2_nofib_arg1⁰) = 
//│ 	let size'⁰ = max_lh^357(length_lh^358(_lh_testMandel2_nofib_arg1⁰), size_lh^362)
//│ 	in let tree⁰ = build_tree_lh^364([LH_P2 0 0], [LH_P2 size'⁰ div⁰(size'⁰, 2)])
//│ 	in finite_lh^377(tree⁰)
//│ def up_lh = [LH_P2 0 (0 - 1)]
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec finite_lh _lh_finite_arg1_0 =
//│ 		  (match _lh_finite_arg1_0 with
//│ 		    | `Leaf(_lh_finite_Leaf_0_0) -> 
//│ 		      (_lh_finite_Leaf_0_0 = _lh_finite_Leaf_0_0)
//│ 		    | `NS(_lh_finite_NS_0_0, _lh_finite_NS_1_0) -> 
//│ 		      ((finite_lh _lh_finite_NS_0_0) && (finite_lh _lh_finite_NS_1_0))
//│ 		    | `EW(_lh_finite_EW_0_0, _lh_finite_EW_1_0) -> 
//│ 		      ((finite_lh _lh_finite_EW_0_0) && (finite_lh _lh_finite_EW_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec max_lh _lh_max_arg1_0 _lh_max_arg2_0 =
//│ 		  (if (_lh_max_arg1_0 > _lh_max_arg2_0) then
//│ 		    _lh_max_arg1_0
//│ 		  else
//│ 		    _lh_max_arg2_0);;
//│ 		let rec length_lh ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (1 + (length_lh t_0))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec size_lh =
//│ 		  200;;
//│ 		let rec right_lh =
//│ 		  (`LH_P2(1, 0));;
//│ 		let rec equalp_lh _lh_equalp_arg1_0 _lh_equalp_arg2_0 =
//│ 		  (match _lh_equalp_arg1_0 with
//│ 		    | `LH_P2(_lh_equalp_LH_P2_0_0, _lh_equalp_LH_P2_1_0) -> 
//│ 		      (match _lh_equalp_arg2_0 with
//│ 		        | `LH_P2(_lh_equalp_LH_P2_0_1, _lh_equalp_LH_P2_1_1) -> 
//│ 		          ((_lh_equalp_LH_P2_0_0 = _lh_equalp_LH_P2_0_1) && (_lh_equalp_LH_P2_1_0 = _lh_equalp_LH_P2_1_1))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec up_lh =
//│ 		  (`LH_P2(0, (0 - 1)));;
//│ 		let rec down_lh =
//│ 		  (`LH_P2(0, 1));;
//│ 		let rec left_lh =
//│ 		  (`LH_P2((0 - 1), 0));;
//│ 		let rec m_lh =
//│ 		  20;;
//│ 		let rec num_cols_lh =
//│ 		  26;;
//│ 		let rec new_y_lh _lh_new_y_arg1_0 _lh_new_y_arg2_0 _lh_new_y_arg3_0 =
//│ 		  (((2.0 *. _lh_new_y_arg1_0) *. _lh_new_y_arg2_0) +. _lh_new_y_arg3_0);;
//│ 		let rec new_x_lh _lh_new_x_arg1_0 _lh_new_x_arg2_0 _lh_new_x_arg3_0 =
//│ 		  (((_lh_new_x_arg1_0 *. _lh_new_x_arg1_0) -. (_lh_new_x_arg2_0 *. _lh_new_x_arg2_0)) +. _lh_new_x_arg3_0);;
//│ 		let rec radius_lh _lh_radius_arg1_0 _lh_radius_arg2_0 =
//│ 		  ((_lh_radius_arg1_0 *. _lh_radius_arg1_0) +. (_lh_radius_arg2_0 *. _lh_radius_arg2_0));;
//│ 		let rec check_radius_lh _lh_check_radius_arg1_0 _lh_check_radius_arg2_0 _lh_check_radius_arg3_0 _lh_check_radius_arg4_0 _lh_check_radius_arg5_0 =
//│ 		  (let rec xn_0 = (((new_x_lh _lh_check_radius_arg4_0) _lh_check_radius_arg5_0) _lh_check_radius_arg1_0) in
//│ 		    (let rec yn_0 = (((new_y_lh _lh_check_radius_arg4_0) _lh_check_radius_arg5_0) _lh_check_radius_arg2_0) in
//│ 		      (let rec r_0 = ((radius_lh xn_0) yn_0) in
//│ 		        (let rec kp_0 = (_lh_check_radius_arg3_0 + 1) in
//│ 		          (if (kp_0 = num_cols_lh) then
//│ 		            0
//│ 		          else
//│ 		            (if (r_0 > (float_of_int m_lh)) then
//│ 		              kp_0
//│ 		            else
//│ 		              (((((check_radius_lh _lh_check_radius_arg1_0) _lh_check_radius_arg2_0) kp_0) xn_0) yn_0)))))));;
//│ 		let rec pmn_lh =
//│ 		  (0.0 -. 2.25);;
//│ 		let rec pmx_lh =
//│ 		  0.75;;
//│ 		let rec delta_p_lh =
//│ 		  ((pmx_lh -. pmn_lh) /. (float_of_int (size_lh - 1)));;
//│ 		let rec np_lh _lh_np_arg1_0 =
//│ 		  (pmn_lh +. ((float_of_int _lh_np_arg1_0) *. delta_p_lh));;
//│ 		let rec qmx_lh =
//│ 		  1.5;;
//│ 		let rec qmn_lh =
//│ 		  (0.0 -. 1.5);;
//│ 		let rec delta_q_lh =
//│ 		  ((qmx_lh -. qmn_lh) /. (float_of_int (size_lh - 1)));;
//│ 		let rec nq_lh _lh_nq_arg1_0 =
//│ 		  (qmn_lh +. ((float_of_int _lh_nq_arg1_0) *. delta_q_lh));;
//│ 		let rec point_colour_lh _lh_point_colour_arg1_0 =
//│ 		  (match _lh_point_colour_arg1_0 with
//│ 		    | `LH_P2(_lh_point_colour_LH_P2_0_0, _lh_point_colour_LH_P2_1_0) -> 
//│ 		      (((((check_radius_lh (np_lh _lh_point_colour_LH_P2_0_0)) (nq_lh _lh_point_colour_LH_P2_1_0)) 0) 0.0) 0.0)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec check_perim_lh _lh_check_perim_arg1_0 _lh_check_perim_arg2_0 =
//│ 		  (match _lh_check_perim_arg1_0 with
//│ 		    | `LH_P2(_lh_check_perim_LH_P2_0_0, _lh_check_perim_LH_P2_1_0) -> 
//│ 		      (match _lh_check_perim_arg2_0 with
//│ 		        | `LH_P2(_lh_check_perim_LH_P2_0_1, _lh_check_perim_LH_P2_1_1) -> 
//│ 		          (let rec col1_0 = (point_colour_lh (`LH_P2(_lh_check_perim_LH_P2_0_0, _lh_check_perim_LH_P2_1_0))) in
//│ 		            (let rec col2_0 = (point_colour_lh (`LH_P2(_lh_check_perim_LH_P2_0_1, _lh_check_perim_LH_P2_1_0))) in
//│ 		              (let rec col3_0 = (point_colour_lh (`LH_P2(_lh_check_perim_LH_P2_0_1, _lh_check_perim_LH_P2_1_1))) in
//│ 		                (let rec col4_0 = (point_colour_lh (`LH_P2(_lh_check_perim_LH_P2_0_0, _lh_check_perim_LH_P2_1_1))) in
//│ 		                  (let rec corners_diff_0 = (if (col1_0 = col2_0) then
//│ 		                    (if (col1_0 = col3_0) then
//│ 		                      (if (col1_0 = col4_0) then
//│ 		                        false
//│ 		                      else
//│ 		                        true)
//│ 		                    else
//│ 		                      true)
//│ 		                  else
//│ 		                    true) in
//│ 		                    (let rec check_line_0 = (fun xcyc_0 xdyd_0 -> 
//│ 		                      (let rec _lh_matchIdent_0 = xcyc_0 in
//│ 		                        (match _lh_matchIdent_0 with
//│ 		                          | `LH_P2(_lh_check_perim_LH_P2_0_2, _lh_check_perim_LH_P2_1_2) -> 
//│ 		                            (let rec _lh_matchIdent_1 = xdyd_0 in
//│ 		                              (match _lh_matchIdent_1 with
//│ 		                                | `LH_P2(_lh_check_perim_LH_P2_0_3, _lh_check_perim_LH_P2_1_3) -> 
//│ 		                                  (let rec finished_0 = (if ((equalp_lh (`LH_P2(_lh_check_perim_LH_P2_0_3, _lh_check_perim_LH_P2_1_3))) right_lh) then
//│ 		                                    (_lh_check_perim_LH_P2_0_2 >= _lh_check_perim_LH_P2_0_1)
//│ 		                                  else
//│ 		                                    (if ((equalp_lh (`LH_P2(_lh_check_perim_LH_P2_0_3, _lh_check_perim_LH_P2_1_3))) down_lh) then
//│ 		                                      (_lh_check_perim_LH_P2_1_2 <= _lh_check_perim_LH_P2_1_1)
//│ 		                                    else
//│ 		                                      (if ((equalp_lh (`LH_P2(_lh_check_perim_LH_P2_0_3, _lh_check_perim_LH_P2_1_3))) left_lh) then
//│ 		                                        (_lh_check_perim_LH_P2_0_2 <= _lh_check_perim_LH_P2_0_0)
//│ 		                                      else
//│ 		                                        (_lh_check_perim_LH_P2_1_2 >= _lh_check_perim_LH_P2_1_0)))) in
//│ 		                                    (if finished_0 then
//│ 		                                      true
//│ 		                                    else
//│ 		                                      (if ((point_colour_lh (`LH_P2(_lh_check_perim_LH_P2_0_2, _lh_check_perim_LH_P2_1_2))) <> col1_0) then
//│ 		                                        false
//│ 		                                      else
//│ 		                                        ((check_line_0 (`LH_P2((_lh_check_perim_LH_P2_0_2 + _lh_check_perim_LH_P2_0_3), (_lh_check_perim_LH_P2_1_2 + _lh_check_perim_LH_P2_1_3)))) (`LH_P2(_lh_check_perim_LH_P2_0_3, _lh_check_perim_LH_P2_1_3))))))
//│ 		                                | _ -> 
//│ 		                                  (failwith "error")))
//│ 		                          | _ -> 
//│ 		                            (failwith "error")))) in
//│ 		                      (let rec check_sides_0 = (if ((check_line_0 (`LH_P2((_lh_check_perim_LH_P2_0_0 + 1), _lh_check_perim_LH_P2_1_0))) right_lh) then
//│ 		                        (if ((check_line_0 (`LH_P2(_lh_check_perim_LH_P2_0_1, (_lh_check_perim_LH_P2_1_0 + 1)))) down_lh) then
//│ 		                          (if ((check_line_0 (`LH_P2((_lh_check_perim_LH_P2_0_1 - 1), _lh_check_perim_LH_P2_1_1))) left_lh) then
//│ 		                            (if ((check_line_0 (`LH_P2(_lh_check_perim_LH_P2_0_0, (_lh_check_perim_LH_P2_1_1 - 1)))) up_lh) then
//│ 		                              col1_0
//│ 		                            else
//│ 		                              (0 - 1))
//│ 		                          else
//│ 		                            (0 - 1))
//│ 		                        else
//│ 		                          (0 - 1))
//│ 		                      else
//│ 		                        (0 - 1)) in
//│ 		                        (if ((equalp_lh (`LH_P2(_lh_check_perim_LH_P2_0_0, _lh_check_perim_LH_P2_1_0))) (`LH_P2(_lh_check_perim_LH_P2_0_1, _lh_check_perim_LH_P2_1_1))) then
//│ 		                          (point_colour_lh (`LH_P2(_lh_check_perim_LH_P2_0_0, _lh_check_perim_LH_P2_1_0)))
//│ 		                        else
//│ 		                          (if corners_diff_0 then
//│ 		                            (0 - 1)
//│ 		                          else
//│ 		                            check_sides_0)))))))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec strEq_lh _lh_strEq_arg1_0 _lh_strEq_arg2_0 =
//│ 		  (match _lh_strEq_arg1_0 with
//│ 		    | `LH_C(_lh_strEq_LH_C_0_0, _lh_strEq_LH_C_1_0) -> 
//│ 		      (let rec _lh_matchIdent_2 = _lh_strEq_arg2_0 in
//│ 		        (match _lh_matchIdent_2 with
//│ 		          | `LH_C(_lh_strEq_LH_C_0_1, _lh_strEq_LH_C_1_1) -> 
//│ 		            (if (_lh_strEq_LH_C_0_0 = _lh_strEq_LH_C_0_1) then
//│ 		              ((strEq_lh _lh_strEq_LH_C_1_0) _lh_strEq_LH_C_1_1)
//│ 		            else
//│ 		              false)
//│ 		          | `LH_N -> 
//│ 		            false
//│ 		          | _ -> 
//│ 		            (failwith "error")))
//│ 		    | `LH_N -> 
//│ 		      (let rec _lh_matchIdent_3 = _lh_strEq_arg2_0 in
//│ 		        (match _lh_matchIdent_3 with
//│ 		          | `LH_C(_lh_strEq_LH_C_0_2, _lh_strEq_LH_C_1_2) -> 
//│ 		            false
//│ 		          | `LH_N -> 
//│ 		            true
//│ 		          | _ -> 
//│ 		            (failwith "error")))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec build_tree_lh _lh_build_tree_arg1_0 _lh_build_tree_arg2_0 =
//│ 		  (match _lh_build_tree_arg1_0 with
//│ 		    | `LH_P2(_lh_build_tree_LH_P2_0_0, _lh_build_tree_LH_P2_1_0) -> 
//│ 		      (match _lh_build_tree_arg2_0 with
//│ 		        | `LH_P2(_lh_build_tree_LH_P2_0_1, _lh_build_tree_LH_P2_1_1) -> 
//│ 		          (let rec rec_col_0 = ((check_perim_lh (`LH_P2(_lh_build_tree_LH_P2_0_0, _lh_build_tree_LH_P2_1_0))) (`LH_P2(_lh_build_tree_LH_P2_0_1, _lh_build_tree_LH_P2_1_1))) in
//│ 		            (let rec split_0 = (if ((_lh_build_tree_LH_P2_0_1 - _lh_build_tree_LH_P2_0_0) >= (_lh_build_tree_LH_P2_1_1 - _lh_build_tree_LH_P2_1_0)) then
//│ 		              (`LH_C('N', (`LH_C('S', (`LH_N)))))
//│ 		            else
//│ 		              (`LH_C('E', (`LH_C('W', (`LH_N)))))) in
//│ 		              (let rec split_x_0 = ((_lh_build_tree_LH_P2_0_1 + _lh_build_tree_LH_P2_0_0) / 2) in
//│ 		                (let rec split_y_0 = ((_lh_build_tree_LH_P2_1_1 + _lh_build_tree_LH_P2_1_0) / 2) in
//│ 		                  (let rec nsp1_0 = (`LH_P2(_lh_build_tree_LH_P2_0_0, _lh_build_tree_LH_P2_1_0)) in
//│ 		                    (let rec nsp2_0 = (`LH_P2(split_x_0, _lh_build_tree_LH_P2_1_1)) in
//│ 		                      (let rec nsp3_0 = (`LH_P2((split_x_0 + 1), _lh_build_tree_LH_P2_1_0)) in
//│ 		                        (let rec nsp4_0 = (`LH_P2(_lh_build_tree_LH_P2_0_1, _lh_build_tree_LH_P2_1_1)) in
//│ 		                          (let rec ewp1_0 = (`LH_P2(_lh_build_tree_LH_P2_0_0, _lh_build_tree_LH_P2_1_0)) in
//│ 		                            (let rec ewp2_0 = (`LH_P2(_lh_build_tree_LH_P2_0_1, split_y_0)) in
//│ 		                              (let rec ewp3_0 = (`LH_P2(_lh_build_tree_LH_P2_0_0, (split_y_0 + 1))) in
//│ 		                                (let rec ewp4_0 = (`LH_P2(_lh_build_tree_LH_P2_0_1, _lh_build_tree_LH_P2_1_1)) in
//│ 		                                  (if (rec_col_0 <> (0 - 1)) then
//│ 		                                    (`Leaf(rec_col_0))
//│ 		                                  else
//│ 		                                    (if ((strEq_lh split_0) (`LH_C('N', (`LH_C('S', (`LH_N)))))) then
//│ 		                                      (`NS(((build_tree_lh nsp1_0) nsp2_0), ((build_tree_lh nsp3_0) nsp4_0)))
//│ 		                                    else
//│ 		                                      (`EW(((build_tree_lh ewp1_0) ewp2_0), ((build_tree_lh ewp3_0) ewp4_0)))))))))))))))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec testMandel2_nofib_lh _lh_testMandel2_nofib_arg1_0 =
//│ 		  (let rec size'_0 = ((max_lh (length_lh _lh_testMandel2_nofib_arg1_0)) size_lh) in
//│ 		    (let rec tree_0 = ((build_tree_lh (`LH_P2(0, 0))) (`LH_P2(size'_0, (size'_0 / 2)))) in
//│ 		      (finite_lh tree_0)));;
//│ 		(testMandel2_nofib_lh (`LH_C(5, (`LH_N))))
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_P2 0 (0 - 1)]: 37 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => let finished⁰ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ in if finished⁰ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]) | _  => error⁰}: 170
//│ [LH_P2 (0 - 1) 0]: 44 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => let finished⁰ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ in if finished⁰ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]) | _  => error⁰}: 170
//│ 	case _lh_equalp_arg2⁰ of {LH_P2 _lh_equalp_LH_P2_0¹ _lh_equalp_LH_P2_1¹ => ((_lh_equalp_LH_P2_0⁰ == _lh_equalp_LH_P2_0¹) && (_lh_equalp_LH_P2_1⁰ == _lh_equalp_LH_P2_1¹)) | _  => error⁰}: 299
//│ [LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰]: 50 --->
//│ 	case _lh_point_colour_arg1⁰ of {LH_P2 _lh_point_colour_LH_P2_0⁰ _lh_point_colour_LH_P2_1⁰ => check_radius_lh(np_lh(_lh_point_colour_LH_P2_0⁰), nq_lh(_lh_point_colour_LH_P2_1⁰), 0, 0.0, 0.0) | _  => error⁰}: 29
//│ [LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1⁰]: 55 --->
//│ 	case _lh_point_colour_arg1⁰ of {LH_P2 _lh_point_colour_LH_P2_0⁰ _lh_point_colour_LH_P2_1⁰ => check_radius_lh(np_lh(_lh_point_colour_LH_P2_0⁰), nq_lh(_lh_point_colour_LH_P2_1⁰), 0, 0.0, 0.0) | _  => error⁰}: 29
//│ [LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹]: 60 --->
//│ 	case _lh_point_colour_arg1⁰ of {LH_P2 _lh_point_colour_LH_P2_0⁰ _lh_point_colour_LH_P2_1⁰ => check_radius_lh(np_lh(_lh_point_colour_LH_P2_0⁰), nq_lh(_lh_point_colour_LH_P2_1⁰), 0, 0.0, 0.0) | _  => error⁰}: 29
//│ [LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1¹]: 65 --->
//│ 	case _lh_point_colour_arg1⁰ of {LH_P2 _lh_point_colour_LH_P2_0⁰ _lh_point_colour_LH_P2_1⁰ => check_radius_lh(np_lh(_lh_point_colour_LH_P2_0⁰), nq_lh(_lh_point_colour_LH_P2_1⁰), 0, 0.0, 0.0) | _  => error⁰}: 29
//│ [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]: 96 --->
//│ 	case _lh_equalp_arg1⁰ of {LH_P2 _lh_equalp_LH_P2_0⁰ _lh_equalp_LH_P2_1⁰ => case _lh_equalp_arg2⁰ of {LH_P2 _lh_equalp_LH_P2_0¹ _lh_equalp_LH_P2_1¹ => ((_lh_equalp_LH_P2_0⁰ == _lh_equalp_LH_P2_0¹) && (_lh_equalp_LH_P2_1⁰ == _lh_equalp_LH_P2_1¹)) | _  => error⁰} | _  => error⁰}: 301
//│ [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]: 108 --->
//│ 	case _lh_equalp_arg1⁰ of {LH_P2 _lh_equalp_LH_P2_0⁰ _lh_equalp_LH_P2_1⁰ => case _lh_equalp_arg2⁰ of {LH_P2 _lh_equalp_LH_P2_0¹ _lh_equalp_LH_P2_1¹ => ((_lh_equalp_LH_P2_0⁰ == _lh_equalp_LH_P2_0¹) && (_lh_equalp_LH_P2_1⁰ == _lh_equalp_LH_P2_1¹)) | _  => error⁰} | _  => error⁰}: 301
//│ [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]: 120 --->
//│ 	case _lh_equalp_arg1⁰ of {LH_P2 _lh_equalp_LH_P2_0⁰ _lh_equalp_LH_P2_1⁰ => case _lh_equalp_arg2⁰ of {LH_P2 _lh_equalp_LH_P2_0¹ _lh_equalp_LH_P2_1¹ => ((_lh_equalp_LH_P2_0⁰ == _lh_equalp_LH_P2_0¹) && (_lh_equalp_LH_P2_1⁰ == _lh_equalp_LH_P2_1¹)) | _  => error⁰} | _  => error⁰}: 301
//│ [LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]: 143 --->
//│ 	case _lh_point_colour_arg1⁰ of {LH_P2 _lh_point_colour_LH_P2_0⁰ _lh_point_colour_LH_P2_1⁰ => check_radius_lh(np_lh(_lh_point_colour_LH_P2_0⁰), nq_lh(_lh_point_colour_LH_P2_1⁰), 0, 0.0, 0.0) | _  => error⁰}: 29
//│ [LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)]: 160 --->
//│ 	case _lh_matchIdent⁰ of {LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1² => let _lh_matchIdent¹ = xdyd⁰
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => let finished⁰ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ in if finished⁰ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]) | _  => error⁰} | _  => error⁰}: 173
//│ [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]: 164 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => let finished⁰ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ in if finished⁰ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]) | _  => error⁰}: 170
//│ [LH_P2 (_lh_check_perim_LH_P2_0⁰ + 1) _lh_check_perim_LH_P2_1⁰]: 184 --->
//│ 	case _lh_matchIdent⁰ of {LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1² => let _lh_matchIdent¹ = xdyd⁰
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => let finished⁰ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ in if finished⁰ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]) | _  => error⁰} | _  => error⁰}: 173
//│ [LH_P2 _lh_check_perim_LH_P2_0¹ (_lh_check_perim_LH_P2_1⁰ + 1)]: 195 --->
//│ 	case _lh_matchIdent⁰ of {LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1² => let _lh_matchIdent¹ = xdyd⁰
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => let finished⁰ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ in if finished⁰ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]) | _  => error⁰} | _  => error⁰}: 173
//│ [LH_P2 (_lh_check_perim_LH_P2_0¹ - 1) _lh_check_perim_LH_P2_1¹]: 206 --->
//│ 	case _lh_matchIdent⁰ of {LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1² => let _lh_matchIdent¹ = xdyd⁰
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => let finished⁰ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ in if finished⁰ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]) | _  => error⁰} | _  => error⁰}: 173
//│ [LH_P2 _lh_check_perim_LH_P2_0⁰ (_lh_check_perim_LH_P2_1¹ - 1)]: 217 --->
//│ 	case _lh_matchIdent⁰ of {LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1² => let _lh_matchIdent¹ = xdyd⁰
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => let finished⁰ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ in if finished⁰ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]) | _  => error⁰} | _  => error⁰}: 173
//│ [LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰]: 249 --->
//│ 	case _lh_equalp_arg1⁰ of {LH_P2 _lh_equalp_LH_P2_0⁰ _lh_equalp_LH_P2_1⁰ => case _lh_equalp_arg2⁰ of {LH_P2 _lh_equalp_LH_P2_0¹ _lh_equalp_LH_P2_1¹ => ((_lh_equalp_LH_P2_0⁰ == _lh_equalp_LH_P2_0¹) && (_lh_equalp_LH_P2_1⁰ == _lh_equalp_LH_P2_1¹)) | _  => error⁰} | _  => error⁰}: 301
//│ [LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹]: 253 --->
//│ 	case _lh_equalp_arg2⁰ of {LH_P2 _lh_equalp_LH_P2_0¹ _lh_equalp_LH_P2_1¹ => ((_lh_equalp_LH_P2_0⁰ == _lh_equalp_LH_P2_0¹) && (_lh_equalp_LH_P2_1⁰ == _lh_equalp_LH_P2_1¹)) | _  => error⁰}: 299
//│ [LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰]: 258 --->
//│ 	case _lh_point_colour_arg1⁰ of {LH_P2 _lh_point_colour_LH_P2_0⁰ _lh_point_colour_LH_P2_1⁰ => check_radius_lh(np_lh(_lh_point_colour_LH_P2_0⁰), nq_lh(_lh_point_colour_LH_P2_1⁰), 0, 0.0, 0.0) | _  => error⁰}: 29
//│ [LH_P2 0 0]: 367 --->
//│ 	case _lh_build_tree_arg1⁰ of {LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰ => case _lh_build_tree_arg2⁰ of {LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹ => let rec_col⁰ = check_perim_lh([LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰], [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹])
//│ in let split⁰ = if ((_lh_build_tree_LH_P2_0¹ - _lh_build_tree_LH_P2_0⁰) >= (_lh_build_tree_LH_P2_1¹ - _lh_build_tree_LH_P2_1⁰)) then [LH_C 'N' [LH_C 'S' [LH_N]]] else [LH_C 'E' [LH_C 'W' [LH_N]]]
//│ in let split_x⁰ = div⁰((_lh_build_tree_LH_P2_0¹ + _lh_build_tree_LH_P2_0⁰), 2)
//│ in let split_y⁰ = div⁰((_lh_build_tree_LH_P2_1¹ + _lh_build_tree_LH_P2_1⁰), 2)
//│ in let nsp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let nsp2⁰ = [LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]
//│ in let nsp3⁰ = [LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]
//│ in let nsp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in let ewp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let ewp2⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]
//│ in let ewp3⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]
//│ in let ewp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in if (rec_col⁰ /= (0 - 1)) then [Leaf rec_col⁰] else if strEq_lh(split⁰, [LH_C 'N' [LH_C 'S' [LH_N]]]) then [NS build_tree_lh(nsp1⁰, nsp2⁰) build_tree_lh(nsp3⁰, nsp4⁰)] else [EW build_tree_lh(ewp1⁰, ewp2⁰) build_tree_lh(ewp3⁰, ewp4⁰)] | _  => error⁰} | _  => error⁰}: 718
//│ [LH_P2 size'⁰ div⁰(size'⁰, 2)]: 375 --->
//│ 	case _lh_build_tree_arg2⁰ of {LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹ => let rec_col⁰ = check_perim_lh([LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰], [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹])
//│ in let split⁰ = if ((_lh_build_tree_LH_P2_0¹ - _lh_build_tree_LH_P2_0⁰) >= (_lh_build_tree_LH_P2_1¹ - _lh_build_tree_LH_P2_1⁰)) then [LH_C 'N' [LH_C 'S' [LH_N]]] else [LH_C 'E' [LH_C 'W' [LH_N]]]
//│ in let split_x⁰ = div⁰((_lh_build_tree_LH_P2_0¹ + _lh_build_tree_LH_P2_0⁰), 2)
//│ in let split_y⁰ = div⁰((_lh_build_tree_LH_P2_1¹ + _lh_build_tree_LH_P2_1⁰), 2)
//│ in let nsp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let nsp2⁰ = [LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]
//│ in let nsp3⁰ = [LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]
//│ in let nsp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in let ewp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let ewp2⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]
//│ in let ewp3⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]
//│ in let ewp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in if (rec_col⁰ /= (0 - 1)) then [Leaf rec_col⁰] else if strEq_lh(split⁰, [LH_C 'N' [LH_C 'S' [LH_N]]]) then [NS build_tree_lh(nsp1⁰, nsp2⁰) build_tree_lh(nsp3⁰, nsp4⁰)] else [EW build_tree_lh(ewp1⁰, ewp2⁰) build_tree_lh(ewp3⁰, ewp4⁰)] | _  => error⁰}: 716
//│ [LH_P2 0 1]: 385 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => let finished⁰ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ in if finished⁰ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]) | _  => error⁰}: 170
//│ 	case _lh_equalp_arg2⁰ of {LH_P2 _lh_equalp_LH_P2_0¹ _lh_equalp_LH_P2_1¹ => ((_lh_equalp_LH_P2_0⁰ == _lh_equalp_LH_P2_0¹) && (_lh_equalp_LH_P2_1⁰ == _lh_equalp_LH_P2_1¹)) | _  => error⁰}: 299
//│ [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]: 579 --->
//│ 	case _lh_check_perim_arg1⁰ of {LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰ => case _lh_check_perim_arg2⁰ of {LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹ => let col1⁰ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰])
//│ in let col2⁰ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1⁰])
//│ in let col3⁰ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹])
//│ in let col4⁰ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1¹])
//│ in let corners_diff⁰ = if (col1⁰ == col2⁰) then if (col1⁰ == col3⁰) then if (col1⁰ == col4⁰) then [False] else [True] else [True] else [True]
//│ in let check_line⁰ = (fun xcyc⁰ -> (fun xdyd⁰ -> let _lh_matchIdent⁰ = xcyc⁰
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1² => let _lh_matchIdent¹ = xdyd⁰
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => let finished⁰ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ in if finished⁰ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]) | _  => error⁰} | _  => error⁰}))
//│ in let check_sides⁰ = if check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0⁰ + 1) _lh_check_perim_LH_P2_1⁰], right_lh) then if check_line⁰([LH_P2 _lh_check_perim_LH_P2_0¹ (_lh_check_perim_LH_P2_1⁰ + 1)], down_lh) then if check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0¹ - 1) _lh_check_perim_LH_P2_1¹], left_lh) then if check_line⁰([LH_P2 _lh_check_perim_LH_P2_0⁰ (_lh_check_perim_LH_P2_1¹ - 1)], up_lh) then col1⁰ else (0 - 1) else (0 - 1) else (0 - 1) else (0 - 1)
//│ in if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰], [LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹]) then point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰]) else if corners_diff⁰ then (0 - 1) else check_sides⁰ | _  => error⁰} | _  => error⁰}: 279
//│ [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]: 583 --->
//│ 	case _lh_check_perim_arg2⁰ of {LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹ => let col1⁰ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰])
//│ in let col2⁰ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1⁰])
//│ in let col3⁰ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹])
//│ in let col4⁰ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1¹])
//│ in let corners_diff⁰ = if (col1⁰ == col2⁰) then if (col1⁰ == col3⁰) then if (col1⁰ == col4⁰) then [False] else [True] else [True] else [True]
//│ in let check_line⁰ = (fun xcyc⁰ -> (fun xdyd⁰ -> let _lh_matchIdent⁰ = xcyc⁰
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1² => let _lh_matchIdent¹ = xdyd⁰
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => let finished⁰ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ in if finished⁰ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]) | _  => error⁰} | _  => error⁰}))
//│ in let check_sides⁰ = if check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0⁰ + 1) _lh_check_perim_LH_P2_1⁰], right_lh) then if check_line⁰([LH_P2 _lh_check_perim_LH_P2_0¹ (_lh_check_perim_LH_P2_1⁰ + 1)], down_lh) then if check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0¹ - 1) _lh_check_perim_LH_P2_1¹], left_lh) then if check_line⁰([LH_P2 _lh_check_perim_LH_P2_0⁰ (_lh_check_perim_LH_P2_1¹ - 1)], up_lh) then col1⁰ else (0 - 1) else (0 - 1) else (0 - 1) else (0 - 1)
//│ in if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰], [LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹]) then point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰]) else if corners_diff⁰ then (0 - 1) else check_sides⁰ | _  => error⁰}: 277
//│ [LH_N]: 600 --->
//│ 	case _lh_strEq_arg1⁰ of {LH_C _lh_strEq_LH_C_0⁰ _lh_strEq_LH_C_1⁰ => let _lh_matchIdent² = _lh_strEq_arg2⁰
//│ in case _lh_matchIdent² of {LH_C _lh_strEq_LH_C_0¹ _lh_strEq_LH_C_1¹ => if polyEq⁰(_lh_strEq_LH_C_0⁰, _lh_strEq_LH_C_0¹) then strEq_lh(_lh_strEq_LH_C_1⁰, _lh_strEq_LH_C_1¹) else [False] | LH_N  => [False] | _  => error⁰} | LH_N  => let _lh_matchIdent³ = _lh_strEq_arg2⁰
//│ in case _lh_matchIdent³ of {LH_C _lh_strEq_LH_C_0² _lh_strEq_LH_C_1² => [False] | LH_N  => [True] | _  => error⁰} | _  => error⁰}: 428
//│ [LH_C 'S' [LH_N]]: 601 --->
//│ 	case _lh_strEq_arg1⁰ of {LH_C _lh_strEq_LH_C_0⁰ _lh_strEq_LH_C_1⁰ => let _lh_matchIdent² = _lh_strEq_arg2⁰
//│ in case _lh_matchIdent² of {LH_C _lh_strEq_LH_C_0¹ _lh_strEq_LH_C_1¹ => if polyEq⁰(_lh_strEq_LH_C_0⁰, _lh_strEq_LH_C_0¹) then strEq_lh(_lh_strEq_LH_C_1⁰, _lh_strEq_LH_C_1¹) else [False] | LH_N  => [False] | _  => error⁰} | LH_N  => let _lh_matchIdent³ = _lh_strEq_arg2⁰
//│ in case _lh_matchIdent³ of {LH_C _lh_strEq_LH_C_0² _lh_strEq_LH_C_1² => [False] | LH_N  => [True] | _  => error⁰} | _  => error⁰}: 428
//│ [LH_C 'N' [LH_C 'S' [LH_N]]]: 602 --->
//│ 	case _lh_strEq_arg1⁰ of {LH_C _lh_strEq_LH_C_0⁰ _lh_strEq_LH_C_1⁰ => let _lh_matchIdent² = _lh_strEq_arg2⁰
//│ in case _lh_matchIdent² of {LH_C _lh_strEq_LH_C_0¹ _lh_strEq_LH_C_1¹ => if polyEq⁰(_lh_strEq_LH_C_0⁰, _lh_strEq_LH_C_0¹) then strEq_lh(_lh_strEq_LH_C_1⁰, _lh_strEq_LH_C_1¹) else [False] | LH_N  => [False] | _  => error⁰} | LH_N  => let _lh_matchIdent³ = _lh_strEq_arg2⁰
//│ in case _lh_matchIdent³ of {LH_C _lh_strEq_LH_C_0² _lh_strEq_LH_C_1² => [False] | LH_N  => [True] | _  => error⁰} | _  => error⁰}: 428
//│ [LH_N]: 605 --->
//│ 	case _lh_strEq_arg1⁰ of {LH_C _lh_strEq_LH_C_0⁰ _lh_strEq_LH_C_1⁰ => let _lh_matchIdent² = _lh_strEq_arg2⁰
//│ in case _lh_matchIdent² of {LH_C _lh_strEq_LH_C_0¹ _lh_strEq_LH_C_1¹ => if polyEq⁰(_lh_strEq_LH_C_0⁰, _lh_strEq_LH_C_0¹) then strEq_lh(_lh_strEq_LH_C_1⁰, _lh_strEq_LH_C_1¹) else [False] | LH_N  => [False] | _  => error⁰} | LH_N  => let _lh_matchIdent³ = _lh_strEq_arg2⁰
//│ in case _lh_matchIdent³ of {LH_C _lh_strEq_LH_C_0² _lh_strEq_LH_C_1² => [False] | LH_N  => [True] | _  => error⁰} | _  => error⁰}: 428
//│ [LH_C 'W' [LH_N]]: 606 --->
//│ 	case _lh_strEq_arg1⁰ of {LH_C _lh_strEq_LH_C_0⁰ _lh_strEq_LH_C_1⁰ => let _lh_matchIdent² = _lh_strEq_arg2⁰
//│ in case _lh_matchIdent² of {LH_C _lh_strEq_LH_C_0¹ _lh_strEq_LH_C_1¹ => if polyEq⁰(_lh_strEq_LH_C_0⁰, _lh_strEq_LH_C_0¹) then strEq_lh(_lh_strEq_LH_C_1⁰, _lh_strEq_LH_C_1¹) else [False] | LH_N  => [False] | _  => error⁰} | LH_N  => let _lh_matchIdent³ = _lh_strEq_arg2⁰
//│ in case _lh_matchIdent³ of {LH_C _lh_strEq_LH_C_0² _lh_strEq_LH_C_1² => [False] | LH_N  => [True] | _  => error⁰} | _  => error⁰}: 428
//│ [LH_C 'E' [LH_C 'W' [LH_N]]]: 607 --->
//│ 	case _lh_strEq_arg1⁰ of {LH_C _lh_strEq_LH_C_0⁰ _lh_strEq_LH_C_1⁰ => let _lh_matchIdent² = _lh_strEq_arg2⁰
//│ in case _lh_matchIdent² of {LH_C _lh_strEq_LH_C_0¹ _lh_strEq_LH_C_1¹ => if polyEq⁰(_lh_strEq_LH_C_0⁰, _lh_strEq_LH_C_0¹) then strEq_lh(_lh_strEq_LH_C_1⁰, _lh_strEq_LH_C_1¹) else [False] | LH_N  => [False] | _  => error⁰} | LH_N  => let _lh_matchIdent³ = _lh_strEq_arg2⁰
//│ in case _lh_matchIdent³ of {LH_C _lh_strEq_LH_C_0² _lh_strEq_LH_C_1² => [False] | LH_N  => [True] | _  => error⁰} | _  => error⁰}: 428
//│ [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]: 629 --->
//│ 	case _lh_build_tree_arg1⁰ of {LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰ => case _lh_build_tree_arg2⁰ of {LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹ => let rec_col⁰ = check_perim_lh([LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰], [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹])
//│ in let split⁰ = if ((_lh_build_tree_LH_P2_0¹ - _lh_build_tree_LH_P2_0⁰) >= (_lh_build_tree_LH_P2_1¹ - _lh_build_tree_LH_P2_1⁰)) then [LH_C 'N' [LH_C 'S' [LH_N]]] else [LH_C 'E' [LH_C 'W' [LH_N]]]
//│ in let split_x⁰ = div⁰((_lh_build_tree_LH_P2_0¹ + _lh_build_tree_LH_P2_0⁰), 2)
//│ in let split_y⁰ = div⁰((_lh_build_tree_LH_P2_1¹ + _lh_build_tree_LH_P2_1⁰), 2)
//│ in let nsp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let nsp2⁰ = [LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]
//│ in let nsp3⁰ = [LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]
//│ in let nsp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in let ewp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let ewp2⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]
//│ in let ewp3⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]
//│ in let ewp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in if (rec_col⁰ /= (0 - 1)) then [Leaf rec_col⁰] else if strEq_lh(split⁰, [LH_C 'N' [LH_C 'S' [LH_N]]]) then [NS build_tree_lh(nsp1⁰, nsp2⁰) build_tree_lh(nsp3⁰, nsp4⁰)] else [EW build_tree_lh(ewp1⁰, ewp2⁰) build_tree_lh(ewp3⁰, ewp4⁰)] | _  => error⁰} | _  => error⁰}: 718
//│ [LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]: 632 --->
//│ 	case _lh_build_tree_arg2⁰ of {LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹ => let rec_col⁰ = check_perim_lh([LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰], [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹])
//│ in let split⁰ = if ((_lh_build_tree_LH_P2_0¹ - _lh_build_tree_LH_P2_0⁰) >= (_lh_build_tree_LH_P2_1¹ - _lh_build_tree_LH_P2_1⁰)) then [LH_C 'N' [LH_C 'S' [LH_N]]] else [LH_C 'E' [LH_C 'W' [LH_N]]]
//│ in let split_x⁰ = div⁰((_lh_build_tree_LH_P2_0¹ + _lh_build_tree_LH_P2_0⁰), 2)
//│ in let split_y⁰ = div⁰((_lh_build_tree_LH_P2_1¹ + _lh_build_tree_LH_P2_1⁰), 2)
//│ in let nsp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let nsp2⁰ = [LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]
//│ in let nsp3⁰ = [LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]
//│ in let nsp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in let ewp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let ewp2⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]
//│ in let ewp3⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]
//│ in let ewp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in if (rec_col⁰ /= (0 - 1)) then [Leaf rec_col⁰] else if strEq_lh(split⁰, [LH_C 'N' [LH_C 'S' [LH_N]]]) then [NS build_tree_lh(nsp1⁰, nsp2⁰) build_tree_lh(nsp3⁰, nsp4⁰)] else [EW build_tree_lh(ewp1⁰, ewp2⁰) build_tree_lh(ewp3⁰, ewp4⁰)] | _  => error⁰}: 716
//│ [LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]: 639 --->
//│ 	case _lh_build_tree_arg1⁰ of {LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰ => case _lh_build_tree_arg2⁰ of {LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹ => let rec_col⁰ = check_perim_lh([LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰], [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹])
//│ in let split⁰ = if ((_lh_build_tree_LH_P2_0¹ - _lh_build_tree_LH_P2_0⁰) >= (_lh_build_tree_LH_P2_1¹ - _lh_build_tree_LH_P2_1⁰)) then [LH_C 'N' [LH_C 'S' [LH_N]]] else [LH_C 'E' [LH_C 'W' [LH_N]]]
//│ in let split_x⁰ = div⁰((_lh_build_tree_LH_P2_0¹ + _lh_build_tree_LH_P2_0⁰), 2)
//│ in let split_y⁰ = div⁰((_lh_build_tree_LH_P2_1¹ + _lh_build_tree_LH_P2_1⁰), 2)
//│ in let nsp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let nsp2⁰ = [LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]
//│ in let nsp3⁰ = [LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]
//│ in let nsp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in let ewp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let ewp2⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]
//│ in let ewp3⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]
//│ in let ewp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in if (rec_col⁰ /= (0 - 1)) then [Leaf rec_col⁰] else if strEq_lh(split⁰, [LH_C 'N' [LH_C 'S' [LH_N]]]) then [NS build_tree_lh(nsp1⁰, nsp2⁰) build_tree_lh(nsp3⁰, nsp4⁰)] else [EW build_tree_lh(ewp1⁰, ewp2⁰) build_tree_lh(ewp3⁰, ewp4⁰)] | _  => error⁰} | _  => error⁰}: 718
//│ [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]: 642 --->
//│ 	case _lh_build_tree_arg2⁰ of {LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹ => let rec_col⁰ = check_perim_lh([LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰], [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹])
//│ in let split⁰ = if ((_lh_build_tree_LH_P2_0¹ - _lh_build_tree_LH_P2_0⁰) >= (_lh_build_tree_LH_P2_1¹ - _lh_build_tree_LH_P2_1⁰)) then [LH_C 'N' [LH_C 'S' [LH_N]]] else [LH_C 'E' [LH_C 'W' [LH_N]]]
//│ in let split_x⁰ = div⁰((_lh_build_tree_LH_P2_0¹ + _lh_build_tree_LH_P2_0⁰), 2)
//│ in let split_y⁰ = div⁰((_lh_build_tree_LH_P2_1¹ + _lh_build_tree_LH_P2_1⁰), 2)
//│ in let nsp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let nsp2⁰ = [LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]
//│ in let nsp3⁰ = [LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]
//│ in let nsp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in let ewp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let ewp2⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]
//│ in let ewp3⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]
//│ in let ewp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in if (rec_col⁰ /= (0 - 1)) then [Leaf rec_col⁰] else if strEq_lh(split⁰, [LH_C 'N' [LH_C 'S' [LH_N]]]) then [NS build_tree_lh(nsp1⁰, nsp2⁰) build_tree_lh(nsp3⁰, nsp4⁰)] else [EW build_tree_lh(ewp1⁰, ewp2⁰) build_tree_lh(ewp3⁰, ewp4⁰)] | _  => error⁰}: 716
//│ [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]: 645 --->
//│ 	case _lh_build_tree_arg1⁰ of {LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰ => case _lh_build_tree_arg2⁰ of {LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹ => let rec_col⁰ = check_perim_lh([LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰], [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹])
//│ in let split⁰ = if ((_lh_build_tree_LH_P2_0¹ - _lh_build_tree_LH_P2_0⁰) >= (_lh_build_tree_LH_P2_1¹ - _lh_build_tree_LH_P2_1⁰)) then [LH_C 'N' [LH_C 'S' [LH_N]]] else [LH_C 'E' [LH_C 'W' [LH_N]]]
//│ in let split_x⁰ = div⁰((_lh_build_tree_LH_P2_0¹ + _lh_build_tree_LH_P2_0⁰), 2)
//│ in let split_y⁰ = div⁰((_lh_build_tree_LH_P2_1¹ + _lh_build_tree_LH_P2_1⁰), 2)
//│ in let nsp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let nsp2⁰ = [LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]
//│ in let nsp3⁰ = [LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]
//│ in let nsp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in let ewp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let ewp2⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]
//│ in let ewp3⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]
//│ in let ewp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in if (rec_col⁰ /= (0 - 1)) then [Leaf rec_col⁰] else if strEq_lh(split⁰, [LH_C 'N' [LH_C 'S' [LH_N]]]) then [NS build_tree_lh(nsp1⁰, nsp2⁰) build_tree_lh(nsp3⁰, nsp4⁰)] else [EW build_tree_lh(ewp1⁰, ewp2⁰) build_tree_lh(ewp3⁰, ewp4⁰)] | _  => error⁰} | _  => error⁰}: 718
//│ [LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]: 648 --->
//│ 	case _lh_build_tree_arg2⁰ of {LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹ => let rec_col⁰ = check_perim_lh([LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰], [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹])
//│ in let split⁰ = if ((_lh_build_tree_LH_P2_0¹ - _lh_build_tree_LH_P2_0⁰) >= (_lh_build_tree_LH_P2_1¹ - _lh_build_tree_LH_P2_1⁰)) then [LH_C 'N' [LH_C 'S' [LH_N]]] else [LH_C 'E' [LH_C 'W' [LH_N]]]
//│ in let split_x⁰ = div⁰((_lh_build_tree_LH_P2_0¹ + _lh_build_tree_LH_P2_0⁰), 2)
//│ in let split_y⁰ = div⁰((_lh_build_tree_LH_P2_1¹ + _lh_build_tree_LH_P2_1⁰), 2)
//│ in let nsp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let nsp2⁰ = [LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]
//│ in let nsp3⁰ = [LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]
//│ in let nsp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in let ewp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let ewp2⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]
//│ in let ewp3⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]
//│ in let ewp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in if (rec_col⁰ /= (0 - 1)) then [Leaf rec_col⁰] else if strEq_lh(split⁰, [LH_C 'N' [LH_C 'S' [LH_N]]]) then [NS build_tree_lh(nsp1⁰, nsp2⁰) build_tree_lh(nsp3⁰, nsp4⁰)] else [EW build_tree_lh(ewp1⁰, ewp2⁰) build_tree_lh(ewp3⁰, ewp4⁰)] | _  => error⁰}: 716
//│ [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]: 655 --->
//│ 	case _lh_build_tree_arg1⁰ of {LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰ => case _lh_build_tree_arg2⁰ of {LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹ => let rec_col⁰ = check_perim_lh([LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰], [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹])
//│ in let split⁰ = if ((_lh_build_tree_LH_P2_0¹ - _lh_build_tree_LH_P2_0⁰) >= (_lh_build_tree_LH_P2_1¹ - _lh_build_tree_LH_P2_1⁰)) then [LH_C 'N' [LH_C 'S' [LH_N]]] else [LH_C 'E' [LH_C 'W' [LH_N]]]
//│ in let split_x⁰ = div⁰((_lh_build_tree_LH_P2_0¹ + _lh_build_tree_LH_P2_0⁰), 2)
//│ in let split_y⁰ = div⁰((_lh_build_tree_LH_P2_1¹ + _lh_build_tree_LH_P2_1⁰), 2)
//│ in let nsp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let nsp2⁰ = [LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]
//│ in let nsp3⁰ = [LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]
//│ in let nsp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in let ewp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let ewp2⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]
//│ in let ewp3⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]
//│ in let ewp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in if (rec_col⁰ /= (0 - 1)) then [Leaf rec_col⁰] else if strEq_lh(split⁰, [LH_C 'N' [LH_C 'S' [LH_N]]]) then [NS build_tree_lh(nsp1⁰, nsp2⁰) build_tree_lh(nsp3⁰, nsp4⁰)] else [EW build_tree_lh(ewp1⁰, ewp2⁰) build_tree_lh(ewp3⁰, ewp4⁰)] | _  => error⁰} | _  => error⁰}: 718
//│ [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]: 658 --->
//│ 	case _lh_build_tree_arg2⁰ of {LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹ => let rec_col⁰ = check_perim_lh([LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰], [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹])
//│ in let split⁰ = if ((_lh_build_tree_LH_P2_0¹ - _lh_build_tree_LH_P2_0⁰) >= (_lh_build_tree_LH_P2_1¹ - _lh_build_tree_LH_P2_1⁰)) then [LH_C 'N' [LH_C 'S' [LH_N]]] else [LH_C 'E' [LH_C 'W' [LH_N]]]
//│ in let split_x⁰ = div⁰((_lh_build_tree_LH_P2_0¹ + _lh_build_tree_LH_P2_0⁰), 2)
//│ in let split_y⁰ = div⁰((_lh_build_tree_LH_P2_1¹ + _lh_build_tree_LH_P2_1⁰), 2)
//│ in let nsp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let nsp2⁰ = [LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]
//│ in let nsp3⁰ = [LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]
//│ in let nsp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in let ewp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let ewp2⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]
//│ in let ewp3⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]
//│ in let ewp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in if (rec_col⁰ /= (0 - 1)) then [Leaf rec_col⁰] else if strEq_lh(split⁰, [LH_C 'N' [LH_C 'S' [LH_N]]]) then [NS build_tree_lh(nsp1⁰, nsp2⁰) build_tree_lh(nsp3⁰, nsp4⁰)] else [EW build_tree_lh(ewp1⁰, ewp2⁰) build_tree_lh(ewp3⁰, ewp4⁰)] | _  => error⁰}: 716
//│ [Leaf rec_col⁰]: 669 --->
//│ 	case _lh_finite_arg1⁰ of {Leaf _lh_finite_Leaf_0⁰ => (_lh_finite_Leaf_0⁰ == _lh_finite_Leaf_0⁰) | NS _lh_finite_NS_0⁰ _lh_finite_NS_1⁰ => (finite_lh(_lh_finite_NS_0⁰) && finite_lh(_lh_finite_NS_1⁰)) | EW _lh_finite_EW_0⁰ _lh_finite_EW_1⁰ => (finite_lh(_lh_finite_EW_0⁰) && finite_lh(_lh_finite_EW_1⁰)) | _  => error⁰}: 571
//│ [LH_N]: 675 --->
//│ 	DeadCodeCons
//│ 	case _lh_matchIdent² of {LH_C _lh_strEq_LH_C_0¹ _lh_strEq_LH_C_1¹ => if polyEq⁰(_lh_strEq_LH_C_0⁰, _lh_strEq_LH_C_0¹) then strEq_lh(_lh_strEq_LH_C_1⁰, _lh_strEq_LH_C_1¹) else [False] | LH_N  => [False] | _  => error⁰}: 418
//│ 	case _lh_matchIdent³ of {LH_C _lh_strEq_LH_C_0² _lh_strEq_LH_C_1² => [False] | LH_N  => [True] | _  => error⁰}: 425
//│ [LH_C 'S' [LH_N]]: 676 --->
//│ 	DeadCodeCons
//│ 	case _lh_matchIdent² of {LH_C _lh_strEq_LH_C_0¹ _lh_strEq_LH_C_1¹ => if polyEq⁰(_lh_strEq_LH_C_0⁰, _lh_strEq_LH_C_0¹) then strEq_lh(_lh_strEq_LH_C_1⁰, _lh_strEq_LH_C_1¹) else [False] | LH_N  => [False] | _  => error⁰}: 418
//│ 	case _lh_matchIdent³ of {LH_C _lh_strEq_LH_C_0² _lh_strEq_LH_C_1² => [False] | LH_N  => [True] | _  => error⁰}: 425
//│ [LH_C 'N' [LH_C 'S' [LH_N]]]: 677 --->
//│ 	case _lh_matchIdent² of {LH_C _lh_strEq_LH_C_0¹ _lh_strEq_LH_C_1¹ => if polyEq⁰(_lh_strEq_LH_C_0⁰, _lh_strEq_LH_C_0¹) then strEq_lh(_lh_strEq_LH_C_1⁰, _lh_strEq_LH_C_1¹) else [False] | LH_N  => [False] | _  => error⁰}: 418
//│ 	case _lh_matchIdent³ of {LH_C _lh_strEq_LH_C_0² _lh_strEq_LH_C_1² => [False] | LH_N  => [True] | _  => error⁰}: 425
//│ [NS build_tree_lh(nsp1⁰, nsp2⁰) build_tree_lh(nsp3⁰, nsp4⁰)]: 689 --->
//│ 	case _lh_finite_arg1⁰ of {Leaf _lh_finite_Leaf_0⁰ => (_lh_finite_Leaf_0⁰ == _lh_finite_Leaf_0⁰) | NS _lh_finite_NS_0⁰ _lh_finite_NS_1⁰ => (finite_lh(_lh_finite_NS_0⁰) && finite_lh(_lh_finite_NS_1⁰)) | EW _lh_finite_EW_0⁰ _lh_finite_EW_1⁰ => (finite_lh(_lh_finite_EW_0⁰) && finite_lh(_lh_finite_EW_1⁰)) | _  => error⁰}: 571
//│ [EW build_tree_lh(ewp1⁰, ewp2⁰) build_tree_lh(ewp3⁰, ewp4⁰)]: 700 --->
//│ 	case _lh_finite_arg1⁰ of {Leaf _lh_finite_Leaf_0⁰ => (_lh_finite_Leaf_0⁰ == _lh_finite_Leaf_0⁰) | NS _lh_finite_NS_0⁰ _lh_finite_NS_1⁰ => (finite_lh(_lh_finite_NS_0⁰) && finite_lh(_lh_finite_NS_1⁰)) | EW _lh_finite_EW_0⁰ _lh_finite_EW_1⁰ => (finite_lh(_lh_finite_EW_0⁰) && finite_lh(_lh_finite_EW_1⁰)) | _  => error⁰}: 571
//│ [LH_P2 1 0]: 728 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => let finished⁰ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ in if finished⁰ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]) | _  => error⁰}: 170
//│ 	case _lh_equalp_arg2⁰ of {LH_P2 _lh_equalp_LH_P2_0¹ _lh_equalp_LH_P2_1¹ => ((_lh_equalp_LH_P2_0⁰ == _lh_equalp_LH_P2_0¹) && (_lh_equalp_LH_P2_1⁰ == _lh_equalp_LH_P2_1¹)) | _  => error⁰}: 299
//│ ------------------
//│ case _lh_point_colour_arg1⁰ of {LH_P2 _lh_point_colour_LH_P2_0⁰ _lh_point_colour_LH_P2_1⁰ => check_radius_lh(np_lh(_lh_point_colour_LH_P2_0⁰), nq_lh(_lh_point_colour_LH_P2_1⁰), 0, 0.0, 0.0) | _  => error⁰}: 29 --->
//│ 	[LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰]: 50
//│ 	[LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1⁰]: 55
//│ 	[LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹]: 60
//│ 	[LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1¹]: 65
//│ 	[LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]: 143
//│ 	[LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰]: 258
//│ case _lh_matchIdent¹ of {LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => let finished⁰ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ in if finished⁰ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]) | _  => error⁰}: 170 --->
//│ 	[LH_P2 0 (0 - 1)]: 37
//│ 	[LH_P2 (0 - 1) 0]: 44
//│ 	[LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]: 164
//│ 	[LH_P2 0 1]: 385
//│ 	[LH_P2 1 0]: 728
//│ case _lh_matchIdent⁰ of {LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1² => let _lh_matchIdent¹ = xdyd⁰
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => let finished⁰ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ in if finished⁰ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]) | _  => error⁰} | _  => error⁰}: 173 --->
//│ 	[LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)]: 160
//│ 	[LH_P2 (_lh_check_perim_LH_P2_0⁰ + 1) _lh_check_perim_LH_P2_1⁰]: 184
//│ 	[LH_P2 _lh_check_perim_LH_P2_0¹ (_lh_check_perim_LH_P2_1⁰ + 1)]: 195
//│ 	[LH_P2 (_lh_check_perim_LH_P2_0¹ - 1) _lh_check_perim_LH_P2_1¹]: 206
//│ 	[LH_P2 _lh_check_perim_LH_P2_0⁰ (_lh_check_perim_LH_P2_1¹ - 1)]: 217
//│ case _lh_check_perim_arg2⁰ of {LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹ => let col1⁰ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰])
//│ in let col2⁰ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1⁰])
//│ in let col3⁰ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹])
//│ in let col4⁰ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1¹])
//│ in let corners_diff⁰ = if (col1⁰ == col2⁰) then if (col1⁰ == col3⁰) then if (col1⁰ == col4⁰) then [False] else [True] else [True] else [True]
//│ in let check_line⁰ = (fun xcyc⁰ -> (fun xdyd⁰ -> let _lh_matchIdent⁰ = xcyc⁰
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1² => let _lh_matchIdent¹ = xdyd⁰
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => let finished⁰ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ in if finished⁰ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]) | _  => error⁰} | _  => error⁰}))
//│ in let check_sides⁰ = if check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0⁰ + 1) _lh_check_perim_LH_P2_1⁰], right_lh) then if check_line⁰([LH_P2 _lh_check_perim_LH_P2_0¹ (_lh_check_perim_LH_P2_1⁰ + 1)], down_lh) then if check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0¹ - 1) _lh_check_perim_LH_P2_1¹], left_lh) then if check_line⁰([LH_P2 _lh_check_perim_LH_P2_0⁰ (_lh_check_perim_LH_P2_1¹ - 1)], up_lh) then col1⁰ else (0 - 1) else (0 - 1) else (0 - 1) else (0 - 1)
//│ in if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰], [LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹]) then point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰]) else if corners_diff⁰ then (0 - 1) else check_sides⁰ | _  => error⁰}: 277 --->
//│ 	[LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]: 583
//│ case _lh_check_perim_arg1⁰ of {LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰ => case _lh_check_perim_arg2⁰ of {LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹ => let col1⁰ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰])
//│ in let col2⁰ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1⁰])
//│ in let col3⁰ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹])
//│ in let col4⁰ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1¹])
//│ in let corners_diff⁰ = if (col1⁰ == col2⁰) then if (col1⁰ == col3⁰) then if (col1⁰ == col4⁰) then [False] else [True] else [True] else [True]
//│ in let check_line⁰ = (fun xcyc⁰ -> (fun xdyd⁰ -> let _lh_matchIdent⁰ = xcyc⁰
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1² => let _lh_matchIdent¹ = xdyd⁰
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => let finished⁰ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ in if finished⁰ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1⁰) then [False] else check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]) | _  => error⁰} | _  => error⁰}))
//│ in let check_sides⁰ = if check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0⁰ + 1) _lh_check_perim_LH_P2_1⁰], right_lh) then if check_line⁰([LH_P2 _lh_check_perim_LH_P2_0¹ (_lh_check_perim_LH_P2_1⁰ + 1)], down_lh) then if check_line⁰([LH_P2 (_lh_check_perim_LH_P2_0¹ - 1) _lh_check_perim_LH_P2_1¹], left_lh) then if check_line⁰([LH_P2 _lh_check_perim_LH_P2_0⁰ (_lh_check_perim_LH_P2_1¹ - 1)], up_lh) then col1⁰ else (0 - 1) else (0 - 1) else (0 - 1) else (0 - 1)
//│ in if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰], [LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹]) then point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰]) else if corners_diff⁰ then (0 - 1) else check_sides⁰ | _  => error⁰} | _  => error⁰}: 279 --->
//│ 	[LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]: 579
//│ case _lh_equalp_arg2⁰ of {LH_P2 _lh_equalp_LH_P2_0¹ _lh_equalp_LH_P2_1¹ => ((_lh_equalp_LH_P2_0⁰ == _lh_equalp_LH_P2_0¹) && (_lh_equalp_LH_P2_1⁰ == _lh_equalp_LH_P2_1¹)) | _  => error⁰}: 299 --->
//│ 	[LH_P2 (0 - 1) 0]: 44
//│ 	[LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹]: 253
//│ 	[LH_P2 0 1]: 385
//│ 	[LH_P2 1 0]: 728
//│ case _lh_equalp_arg1⁰ of {LH_P2 _lh_equalp_LH_P2_0⁰ _lh_equalp_LH_P2_1⁰ => case _lh_equalp_arg2⁰ of {LH_P2 _lh_equalp_LH_P2_0¹ _lh_equalp_LH_P2_1¹ => ((_lh_equalp_LH_P2_0⁰ == _lh_equalp_LH_P2_0¹) && (_lh_equalp_LH_P2_1⁰ == _lh_equalp_LH_P2_1¹)) | _  => error⁰} | _  => error⁰}: 301 --->
//│ 	[LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]: 96
//│ 	[LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]: 108
//│ 	[LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³]: 120
//│ 	[LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰]: 249
//│ case _lh_matchIdent² of {LH_C _lh_strEq_LH_C_0¹ _lh_strEq_LH_C_1¹ => if polyEq⁰(_lh_strEq_LH_C_0⁰, _lh_strEq_LH_C_0¹) then strEq_lh(_lh_strEq_LH_C_1⁰, _lh_strEq_LH_C_1¹) else [False] | LH_N  => [False] | _  => error⁰}: 418 --->
//│ 	[LH_N]: 675
//│ 	[LH_C 'S' [LH_N]]: 676
//│ 	[LH_C 'N' [LH_C 'S' [LH_N]]]: 677
//│ case _lh_matchIdent³ of {LH_C _lh_strEq_LH_C_0² _lh_strEq_LH_C_1² => [False] | LH_N  => [True] | _  => error⁰}: 425 --->
//│ 	[LH_N]: 675
//│ 	[LH_C 'S' [LH_N]]: 676
//│ 	[LH_C 'N' [LH_C 'S' [LH_N]]]: 677
//│ case _lh_strEq_arg1⁰ of {LH_C _lh_strEq_LH_C_0⁰ _lh_strEq_LH_C_1⁰ => let _lh_matchIdent² = _lh_strEq_arg2⁰
//│ in case _lh_matchIdent² of {LH_C _lh_strEq_LH_C_0¹ _lh_strEq_LH_C_1¹ => if polyEq⁰(_lh_strEq_LH_C_0⁰, _lh_strEq_LH_C_0¹) then strEq_lh(_lh_strEq_LH_C_1⁰, _lh_strEq_LH_C_1¹) else [False] | LH_N  => [False] | _  => error⁰} | LH_N  => let _lh_matchIdent³ = _lh_strEq_arg2⁰
//│ in case _lh_matchIdent³ of {LH_C _lh_strEq_LH_C_0² _lh_strEq_LH_C_1² => [False] | LH_N  => [True] | _  => error⁰} | _  => error⁰}: 428 --->
//│ 	[LH_N]: 600
//│ 	[LH_C 'S' [LH_N]]: 601
//│ 	[LH_C 'N' [LH_C 'S' [LH_N]]]: 602
//│ 	[LH_N]: 605
//│ 	[LH_C 'W' [LH_N]]: 606
//│ 	[LH_C 'E' [LH_C 'W' [LH_N]]]: 607
//│ case _lh_finite_arg1⁰ of {Leaf _lh_finite_Leaf_0⁰ => (_lh_finite_Leaf_0⁰ == _lh_finite_Leaf_0⁰) | NS _lh_finite_NS_0⁰ _lh_finite_NS_1⁰ => (finite_lh(_lh_finite_NS_0⁰) && finite_lh(_lh_finite_NS_1⁰)) | EW _lh_finite_EW_0⁰ _lh_finite_EW_1⁰ => (finite_lh(_lh_finite_EW_0⁰) && finite_lh(_lh_finite_EW_1⁰)) | _  => error⁰}: 571 --->
//│ 	[Leaf rec_col⁰]: 669
//│ 	[NS build_tree_lh(nsp1⁰, nsp2⁰) build_tree_lh(nsp3⁰, nsp4⁰)]: 689
//│ 	[EW build_tree_lh(ewp1⁰, ewp2⁰) build_tree_lh(ewp3⁰, ewp4⁰)]: 700
//│ case _lh_build_tree_arg2⁰ of {LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹ => let rec_col⁰ = check_perim_lh([LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰], [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹])
//│ in let split⁰ = if ((_lh_build_tree_LH_P2_0¹ - _lh_build_tree_LH_P2_0⁰) >= (_lh_build_tree_LH_P2_1¹ - _lh_build_tree_LH_P2_1⁰)) then [LH_C 'N' [LH_C 'S' [LH_N]]] else [LH_C 'E' [LH_C 'W' [LH_N]]]
//│ in let split_x⁰ = div⁰((_lh_build_tree_LH_P2_0¹ + _lh_build_tree_LH_P2_0⁰), 2)
//│ in let split_y⁰ = div⁰((_lh_build_tree_LH_P2_1¹ + _lh_build_tree_LH_P2_1⁰), 2)
//│ in let nsp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let nsp2⁰ = [LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]
//│ in let nsp3⁰ = [LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]
//│ in let nsp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in let ewp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let ewp2⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]
//│ in let ewp3⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]
//│ in let ewp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in if (rec_col⁰ /= (0 - 1)) then [Leaf rec_col⁰] else if strEq_lh(split⁰, [LH_C 'N' [LH_C 'S' [LH_N]]]) then [NS build_tree_lh(nsp1⁰, nsp2⁰) build_tree_lh(nsp3⁰, nsp4⁰)] else [EW build_tree_lh(ewp1⁰, ewp2⁰) build_tree_lh(ewp3⁰, ewp4⁰)] | _  => error⁰}: 716 --->
//│ 	[LH_P2 size'⁰ div⁰(size'⁰, 2)]: 375
//│ 	[LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]: 632
//│ 	[LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]: 642
//│ 	[LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]: 648
//│ 	[LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]: 658
//│ case _lh_build_tree_arg1⁰ of {LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰ => case _lh_build_tree_arg2⁰ of {LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹ => let rec_col⁰ = check_perim_lh([LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰], [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹])
//│ in let split⁰ = if ((_lh_build_tree_LH_P2_0¹ - _lh_build_tree_LH_P2_0⁰) >= (_lh_build_tree_LH_P2_1¹ - _lh_build_tree_LH_P2_1⁰)) then [LH_C 'N' [LH_C 'S' [LH_N]]] else [LH_C 'E' [LH_C 'W' [LH_N]]]
//│ in let split_x⁰ = div⁰((_lh_build_tree_LH_P2_0¹ + _lh_build_tree_LH_P2_0⁰), 2)
//│ in let split_y⁰ = div⁰((_lh_build_tree_LH_P2_1¹ + _lh_build_tree_LH_P2_1⁰), 2)
//│ in let nsp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let nsp2⁰ = [LH_P2 split_x⁰ _lh_build_tree_LH_P2_1¹]
//│ in let nsp3⁰ = [LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]
//│ in let nsp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in let ewp1⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ in let ewp2⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ split_y⁰]
//│ in let ewp3⁰ = [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]
//│ in let ewp4⁰ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ in if (rec_col⁰ /= (0 - 1)) then [Leaf rec_col⁰] else if strEq_lh(split⁰, [LH_C 'N' [LH_C 'S' [LH_N]]]) then [NS build_tree_lh(nsp1⁰, nsp2⁰) build_tree_lh(nsp3⁰, nsp4⁰)] else [EW build_tree_lh(ewp1⁰, ewp2⁰) build_tree_lh(ewp3⁰, ewp4⁰)] | _  => error⁰} | _  => error⁰}: 718 --->
//│ 	[LH_P2 0 0]: 367
//│ 	[LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]: 629
//│ 	[LH_P2 (split_x⁰ + 1) _lh_build_tree_LH_P2_1⁰]: 639
//│ 	[LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]: 645
//│ 	[LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y⁰ + 1)]: 655
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testMandel2_nofib_lh(primId⁰([LH_C 5 [LH_N]]))
//│ def build_tree_lh(_lh_build_tree_arg1¹, _lh_build_tree_arg2¹) = case _lh_build_tree_arg1¹ of {
//│ 	LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰ => case _lh_build_tree_arg2¹ of {
//│ 		LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹ => 
//│ 			let rec_col¹ = check_perim_lh([LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰], [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹])
//│ 			in let split¹ = if ((_lh_build_tree_LH_P2_0¹ - _lh_build_tree_LH_P2_0⁰) >= (_lh_build_tree_LH_P2_1¹ - _lh_build_tree_LH_P2_1⁰)) then [LH_C 'N' [LH_C 'S' [LH_N]]] else [LH_C 'E' [LH_C 'W' [LH_N]]]
//│ 			in let split_x¹ = div⁰((_lh_build_tree_LH_P2_0¹ + _lh_build_tree_LH_P2_0⁰), 2)
//│ 			in let split_y¹ = div⁰((_lh_build_tree_LH_P2_1¹ + _lh_build_tree_LH_P2_1⁰), 2)
//│ 			in let nsp1¹ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ 			in let nsp2¹ = [LH_P2 split_x¹ _lh_build_tree_LH_P2_1¹]
//│ 			in let nsp3¹ = [LH_P2 (split_x¹ + 1) _lh_build_tree_LH_P2_1⁰]
//│ 			in let nsp4¹ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ 			in let ewp1¹ = [LH_P2 _lh_build_tree_LH_P2_0⁰ _lh_build_tree_LH_P2_1⁰]
//│ 			in let ewp2¹ = [LH_P2 _lh_build_tree_LH_P2_0¹ split_y¹]
//│ 			in let ewp3¹ = [LH_P2 _lh_build_tree_LH_P2_0⁰ (split_y¹ + 1)]
//│ 			in let ewp4¹ = [LH_P2 _lh_build_tree_LH_P2_0¹ _lh_build_tree_LH_P2_1¹]
//│ 			in if (rec_col¹ /= (0 - 1)) then [Leaf rec_col¹] else if strEq_lh(split¹, [LH_C 'N' [LH_C 'S' [LH_N]]]) then [NS build_tree_lh(nsp1¹, nsp2¹) build_tree_lh(nsp3¹, nsp4¹)] else [EW build_tree_lh(ewp1¹, ewp2¹) build_tree_lh(ewp3¹, ewp4¹)]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def check_perim_lh(_lh_check_perim_arg1¹, _lh_check_perim_arg2¹) = case _lh_check_perim_arg1¹ of {
//│ 	LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰ => case _lh_check_perim_arg2¹ of {
//│ 		LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹ => 
//│ 			let col1¹ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰])
//│ 			in let col2¹ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1⁰])
//│ 			in let col3¹ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹])
//│ 			in let col4¹ = point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1¹])
//│ 			in let corners_diff¹ = if (col1¹ == col2¹) then if (col1¹ == col3¹) then if (col1¹ == col4¹) then [False] else [True] else [True] else [True]
//│ 			in let check_line¹ = (fun xcyc¹ -> (fun xdyd¹ -> 
//│ 				let _lh_matchIdent⁴ = xcyc¹
//│ 				in case _lh_matchIdent⁴ of {
//│ 					LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1² => 
//│ 						let _lh_matchIdent⁵ = xdyd¹
//│ 						in case _lh_matchIdent⁵ of {
//│ 							LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³ => 
//│ 								let finished¹ = if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], right_lh) then (_lh_check_perim_LH_P2_0² >= _lh_check_perim_LH_P2_0¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], down_lh) then (_lh_check_perim_LH_P2_1² <= _lh_check_perim_LH_P2_1¹) else if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³], left_lh) then (_lh_check_perim_LH_P2_0² <= _lh_check_perim_LH_P2_0⁰) else (_lh_check_perim_LH_P2_1² >= _lh_check_perim_LH_P2_1⁰)
//│ 								in if finished¹ then [True] else if (point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0² _lh_check_perim_LH_P2_1²]) /= col1¹) then [False] else check_line¹([LH_P2 (_lh_check_perim_LH_P2_0² + _lh_check_perim_LH_P2_0³) (_lh_check_perim_LH_P2_1² + _lh_check_perim_LH_P2_1³)], [LH_P2 _lh_check_perim_LH_P2_0³ _lh_check_perim_LH_P2_1³])
//│ 							| _  => error⁰}
//│ 					| _  => error⁰}))
//│ 			in let check_sides¹ = if check_line¹([LH_P2 (_lh_check_perim_LH_P2_0⁰ + 1) _lh_check_perim_LH_P2_1⁰], right_lh) then if check_line¹([LH_P2 _lh_check_perim_LH_P2_0¹ (_lh_check_perim_LH_P2_1⁰ + 1)], down_lh) then if check_line¹([LH_P2 (_lh_check_perim_LH_P2_0¹ - 1) _lh_check_perim_LH_P2_1¹], left_lh) then if check_line¹([LH_P2 _lh_check_perim_LH_P2_0⁰ (_lh_check_perim_LH_P2_1¹ - 1)], up_lh) then col1¹ else (0 - 1) else (0 - 1) else (0 - 1) else (0 - 1)
//│ 			in if equalp_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰], [LH_P2 _lh_check_perim_LH_P2_0¹ _lh_check_perim_LH_P2_1¹]) then point_colour_lh([LH_P2 _lh_check_perim_LH_P2_0⁰ _lh_check_perim_LH_P2_1⁰]) else if corners_diff¹ then (0 - 1) else check_sides¹
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def check_radius_lh(_lh_check_radius_arg1¹, _lh_check_radius_arg2¹, _lh_check_radius_arg3¹, _lh_check_radius_arg4¹, _lh_check_radius_arg5¹) = 
//│ 	let xn¹ = new_x_lh(_lh_check_radius_arg4¹, _lh_check_radius_arg5¹, _lh_check_radius_arg1¹)
//│ 	in let yn¹ = new_y_lh(_lh_check_radius_arg4¹, _lh_check_radius_arg5¹, _lh_check_radius_arg2¹)
//│ 	in let r¹ = radius_lh(xn¹, yn¹)
//│ 	in let kp¹ = (_lh_check_radius_arg3¹ + 1)
//│ 	in if (kp¹ == num_cols_lh) then 0 else if polyGt⁰(r¹, float_of_int⁰(m_lh)) then kp¹ else check_radius_lh(_lh_check_radius_arg1¹, _lh_check_radius_arg2¹, kp¹, xn¹, yn¹)
//│ def delta_p_lh = ((pmx_lh -. pmn_lh) /. float_of_int⁰((size_lh - 1)))
//│ def delta_q_lh = ((qmx_lh -. qmn_lh) /. float_of_int⁰((size_lh - 1)))
//│ def down_lh = [LH_P2 0 1]
//│ def equalp_lh(_lh_equalp_arg1¹, _lh_equalp_arg2¹) = case _lh_equalp_arg1¹ of {
//│ 	LH_P2 _lh_equalp_LH_P2_0⁰ _lh_equalp_LH_P2_1⁰ => case _lh_equalp_arg2¹ of {
//│ 		LH_P2 _lh_equalp_LH_P2_0¹ _lh_equalp_LH_P2_1¹ => ((_lh_equalp_LH_P2_0⁰ == _lh_equalp_LH_P2_0¹) && (_lh_equalp_LH_P2_1⁰ == _lh_equalp_LH_P2_1¹))
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def finite_lh(_lh_finite_arg1¹) = case _lh_finite_arg1¹ of {
//│ 	Leaf _lh_finite_Leaf_0⁰ => (_lh_finite_Leaf_0⁰ == _lh_finite_Leaf_0⁰)
//│ 	| NS _lh_finite_NS_0⁰ _lh_finite_NS_1⁰ => (finite_lh(_lh_finite_NS_0⁰) && finite_lh(_lh_finite_NS_1⁰))
//│ 	| EW _lh_finite_EW_0⁰ _lh_finite_EW_1⁰ => (finite_lh(_lh_finite_EW_0⁰) && finite_lh(_lh_finite_EW_1⁰))
//│ 	| _  => error⁰}
//│ def left_lh = [LH_P2 (0 - 1) 0]
//│ def length_lh(ls¹) = case ls¹ of {
//│ 	LH_C h⁰ t⁰ => (1 + length_lh(t⁰))
//│ 	| LH_N  => 0}
//│ def m_lh = 20
//│ def max_lh(_lh_max_arg1¹, _lh_max_arg2¹) = if (_lh_max_arg1¹ > _lh_max_arg2¹) then _lh_max_arg1¹ else _lh_max_arg2¹
//│ def new_x_lh(_lh_new_x_arg1¹, _lh_new_x_arg2¹, _lh_new_x_arg3¹) = (((_lh_new_x_arg1¹ *. _lh_new_x_arg1¹) -. (_lh_new_x_arg2¹ *. _lh_new_x_arg2¹)) +. _lh_new_x_arg3¹)
//│ def new_y_lh(_lh_new_y_arg1¹, _lh_new_y_arg2¹, _lh_new_y_arg3¹) = (((2.0 *. _lh_new_y_arg1¹) *. _lh_new_y_arg2¹) +. _lh_new_y_arg3¹)
//│ def np_lh(_lh_np_arg1¹) = (pmn_lh +. (float_of_int⁰(_lh_np_arg1¹) *. delta_p_lh))
//│ def nq_lh(_lh_nq_arg1¹) = (qmn_lh +. (float_of_int⁰(_lh_nq_arg1¹) *. delta_q_lh))
//│ def num_cols_lh = 26
//│ def pmn_lh = (0.0 -. 2.25)
//│ def pmx_lh = 0.75
//│ def point_colour_lh(_lh_point_colour_arg1¹) = case _lh_point_colour_arg1¹ of {
//│ 	LH_P2 _lh_point_colour_LH_P2_0⁰ _lh_point_colour_LH_P2_1⁰ => check_radius_lh(np_lh(_lh_point_colour_LH_P2_0⁰), nq_lh(_lh_point_colour_LH_P2_1⁰), 0, 0.0, 0.0)
//│ 	| _  => error⁰}
//│ def qmn_lh = (0.0 -. 1.5)
//│ def qmx_lh = 1.5
//│ def radius_lh(_lh_radius_arg1¹, _lh_radius_arg2¹) = ((_lh_radius_arg1¹ *. _lh_radius_arg1¹) +. (_lh_radius_arg2¹ *. _lh_radius_arg2¹))
//│ def right_lh = [LH_P2 1 0]
//│ def size_lh = 200
//│ def strEq_lh(_lh_strEq_arg1¹, _lh_strEq_arg2¹) = case _lh_strEq_arg1¹ of {
//│ 	LH_C _lh_strEq_LH_C_0⁰ _lh_strEq_LH_C_1⁰ => 
//│ 		let _lh_matchIdent⁶ = _lh_strEq_arg2¹
//│ 		in case _lh_matchIdent⁶ of {
//│ 			LH_C _lh_strEq_LH_C_0¹ _lh_strEq_LH_C_1¹ => if polyEq⁰(_lh_strEq_LH_C_0⁰, _lh_strEq_LH_C_0¹) then strEq_lh(_lh_strEq_LH_C_1⁰, _lh_strEq_LH_C_1¹) else [False]
//│ 			| LH_N  => [False]
//│ 			| _  => error⁰}
//│ 	| LH_N  => 
//│ 		let _lh_matchIdent⁷ = _lh_strEq_arg2¹
//│ 		in case _lh_matchIdent⁷ of {
//│ 			LH_C _lh_strEq_LH_C_0² _lh_strEq_LH_C_1² => [False]
//│ 			| LH_N  => [True]
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def testMandel2_nofib_lh(_lh_testMandel2_nofib_arg1¹) = 
//│ 	let size'¹ = max_lh(length_lh(_lh_testMandel2_nofib_arg1¹), size_lh)
//│ 	in let tree¹ = build_tree_lh([LH_P2 0 0], [LH_P2 size'¹ div⁰(size'¹, 2)])
//│ 	in finite_lh(tree¹)
//│ def up_lh = [LH_P2 0 (0 - 1)]
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
