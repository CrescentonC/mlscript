:NewParser
:ParseOnly

// NOTE: division by zero in haskell will not crash!
:lhInHaskell
:lhGenOCaml
signum 0 = 0
signum n = if n > 0 then 1 else (0 - 1)
abs n = if n < 0 then (0 - n) else n
aux n = lazy (1: (lazy (n: (lazy (1: (aux (n+2)))))))
eContFrac = lazy (2:(aux 2))
ratTrans (a,b,c,d) ls = case (force ls) of {
                          [] -> error;
                          (x:xs) -> (
                            if d == 0 then
                              (ratTrans (b, a+(x*b), d, c+(x*d)) xs)
                            else
                              let q = (b `div` d)
                                    in if (
                                      (((signum c) == (signum d)) || ((abs c) < (abs d))) &&
                                      (((c+d)*q) <= (a+b)) &&
                                      ((((c+d)*q) + (c+d)) > (a+b))
                                    ) then (lazy (q:(ratTrans (c, d, a-(q*c), b-(q*d)) (lazy (x:xs))))) else (ratTrans (b, a+(x*b), d, c+(x*d)) xs))
                        }
takeDigits n xs = if n > 0 then (case (force xs) of {
                                        [] -> error;
                                        (h:t) -> h:(takeDigits (n-1) (ratTrans (10,0,0,1) t))
                                      }
                                ) else []
testDigitsOfE1_nofib n = takeDigits n eContFrac
testDigitsOfE1_nofib $ primId 300
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testDigitsOfE1_nofib_lh_₁^306(primId⁰(300))
//│ def abs_lh_₁(_lh_abs_arg1¹) = if (_lh_abs_arg1¹ < 0) then (0 - _lh_abs_arg1¹) else _lh_abs_arg1¹
//│ def abs_lh_₂(_lh_abs_arg1⁰) = if (_lh_abs_arg1⁰ < 0) then (0 - _lh_abs_arg1⁰) else _lh_abs_arg1⁰
//│ def aux_lh_₁(_lh_aux_arg1⁰) = lazy⁰([LH_C 1 lazy⁰([LH_C _lh_aux_arg1⁰ lazy⁰([LH_C 1 aux_lh_₁^243((_lh_aux_arg1⁰ + 2))])])])
//│ def eContFrac_lh_₁ = lazy⁰([LH_C 2 aux_lh_₁^295(2)])
//│ def ratTrans_lh_₁(_lh_ratTrans_arg1⁰, _lh_ratTrans_arg2⁰) = case _lh_ratTrans_arg1⁰ of {
//│ 	LH_P4 _lh_ratTrans_LH_P4_0⁰ _lh_ratTrans_LH_P4_1⁰ _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ => 
//│ 		let _lh_matchIdent⁰ = force⁰(_lh_ratTrans_arg2⁰)
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_N  => error⁰
//│ 			| LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰ => if (_lh_ratTrans_LH_P4_3⁰ == 0) then ratTrans_lh_₁^70([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) else 
//│ 				let q⁰ = div⁰(_lh_ratTrans_LH_P4_1⁰, _lh_ratTrans_LH_P4_3⁰)
//│ 				in if ((((signum_lh_₁^104(_lh_ratTrans_LH_P4_2⁰) == signum_lh_₂^108(_lh_ratTrans_LH_P4_3⁰)) || (abs_lh_₂^114(_lh_ratTrans_LH_P4_2⁰) < abs_lh_₁^118(_lh_ratTrans_LH_P4_3⁰))) && (((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) <= (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) && ((((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) + (_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰)) > (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) then lazy⁰([LH_C q⁰ ratTrans_lh_₁^171([LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))], lazy⁰([LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]))]) else ratTrans_lh_₁^202([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰)
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def signum_lh_₁(_lh_signum_arg1¹) = case _lh_signum_arg1¹ of {
//│ 	0  => 0
//│ 	| _  => if (_lh_signum_arg1¹ > 0) then 1 else (0 - 1)}
//│ def signum_lh_₂(_lh_signum_arg1⁰) = case _lh_signum_arg1⁰ of {
//│ 	0  => 0
//│ 	| _  => if (_lh_signum_arg1⁰ > 0) then 1 else (0 - 1)}
//│ def takeDigits_lh_₁(_lh_takeDigits_arg1⁰, _lh_takeDigits_arg2⁰) = if (_lh_takeDigits_arg1⁰ > 0) then 
//│ 	let _lh_matchIdent¹ = force⁰(_lh_takeDigits_arg2⁰)
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_N  => error⁰
//│ 		| LH_C _lh_takeDigits_LH_C_0⁰ _lh_takeDigits_LH_C_1⁰ => [LH_C _lh_takeDigits_LH_C_0⁰ takeDigits_lh_₁^268((_lh_takeDigits_arg1⁰ - 1), ratTrans_lh_₁^275([LH_P4 10 0 0 1], _lh_takeDigits_LH_C_1⁰))]
//│ 		| _  => error⁰} else [LH_N]
//│ def testDigitsOfE1_nofib_lh_₁(_lh_testDigitsOfE1_nofib_arg1⁰) = takeDigits_lh_₁^300(_lh_testDigitsOfE1_nofib_arg1⁰, eContFrac_lh_₁^303)
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec signum_lh__d2 _lh_signum_arg1_0 =
//│ 		  (match _lh_signum_arg1_0 with
//│ 		    | 0 -> 
//│ 		      0
//│ 		    | _ -> 
//│ 		      (if (_lh_signum_arg1_0 > 0) then
//│ 		        1
//│ 		      else
//│ 		        (0 - 1)));;
//│ 		let rec abs_lh__d2 _lh_abs_arg1_0 =
//│ 		  (if (_lh_abs_arg1_0 < 0) then
//│ 		    (0 - _lh_abs_arg1_0)
//│ 		  else
//│ 		    _lh_abs_arg1_0);;
//│ 		let rec signum_lh__d1 _lh_signum_arg1_1 =
//│ 		  (match _lh_signum_arg1_1 with
//│ 		    | 0 -> 
//│ 		      0
//│ 		    | _ -> 
//│ 		      (if (_lh_signum_arg1_1 > 0) then
//│ 		        1
//│ 		      else
//│ 		        (0 - 1)));;
//│ 		let rec abs_lh__d1 _lh_abs_arg1_1 =
//│ 		  (if (_lh_abs_arg1_1 < 0) then
//│ 		    (0 - _lh_abs_arg1_1)
//│ 		  else
//│ 		    _lh_abs_arg1_1);;
//│ 		let rec ratTrans_lh__d1 _lh_ratTrans_arg1_0 _lh_ratTrans_arg2_0 =
//│ 		  (match _lh_ratTrans_arg1_0 with
//│ 		    | `LH_P4(_lh_ratTrans_LH_P4_0_0, _lh_ratTrans_LH_P4_1_0, _lh_ratTrans_LH_P4_2_0, _lh_ratTrans_LH_P4_3_0) -> 
//│ 		      (let rec _lh_matchIdent_0 = (Lazy.force _lh_ratTrans_arg2_0) in
//│ 		        (match _lh_matchIdent_0 with
//│ 		          | `LH_N -> 
//│ 		            (failwith "error")
//│ 		          | `LH_C(_lh_ratTrans_LH_C_0_0, _lh_ratTrans_LH_C_1_0) -> 
//│ 		            (if (_lh_ratTrans_LH_P4_3_0 = 0) then
//│ 		              ((ratTrans_lh__d1 (`LH_P4(_lh_ratTrans_LH_P4_1_0, (_lh_ratTrans_LH_P4_0_0 + (_lh_ratTrans_LH_C_0_0 * _lh_ratTrans_LH_P4_1_0)), _lh_ratTrans_LH_P4_3_0, (_lh_ratTrans_LH_P4_2_0 + (_lh_ratTrans_LH_C_0_0 * _lh_ratTrans_LH_P4_3_0))))) _lh_ratTrans_LH_C_1_0)
//│ 		            else
//│ 		              (let rec q_0 = (_lh_ratTrans_LH_P4_1_0 / _lh_ratTrans_LH_P4_3_0) in
//│ 		                (if (((((signum_lh__d1 _lh_ratTrans_LH_P4_2_0) = (signum_lh__d2 _lh_ratTrans_LH_P4_3_0)) || ((abs_lh__d2 _lh_ratTrans_LH_P4_2_0) < (abs_lh__d1 _lh_ratTrans_LH_P4_3_0))) && (((_lh_ratTrans_LH_P4_2_0 + _lh_ratTrans_LH_P4_3_0) * q_0) <= (_lh_ratTrans_LH_P4_0_0 + _lh_ratTrans_LH_P4_1_0))) && ((((_lh_ratTrans_LH_P4_2_0 + _lh_ratTrans_LH_P4_3_0) * q_0) + (_lh_ratTrans_LH_P4_2_0 + _lh_ratTrans_LH_P4_3_0)) > (_lh_ratTrans_LH_P4_0_0 + _lh_ratTrans_LH_P4_1_0))) then
//│ 		                  (lazy (`LH_C(q_0, ((ratTrans_lh__d1 (`LH_P4(_lh_ratTrans_LH_P4_2_0, _lh_ratTrans_LH_P4_3_0, (_lh_ratTrans_LH_P4_0_0 - (q_0 * _lh_ratTrans_LH_P4_2_0)), (_lh_ratTrans_LH_P4_1_0 - (q_0 * _lh_ratTrans_LH_P4_3_0))))) (lazy (`LH_C(_lh_ratTrans_LH_C_0_0, _lh_ratTrans_LH_C_1_0)))))))
//│ 		                else
//│ 		                  ((ratTrans_lh__d1 (`LH_P4(_lh_ratTrans_LH_P4_1_0, (_lh_ratTrans_LH_P4_0_0 + (_lh_ratTrans_LH_C_0_0 * _lh_ratTrans_LH_P4_1_0)), _lh_ratTrans_LH_P4_3_0, (_lh_ratTrans_LH_P4_2_0 + (_lh_ratTrans_LH_C_0_0 * _lh_ratTrans_LH_P4_3_0))))) _lh_ratTrans_LH_C_1_0))))
//│ 		          | _ -> 
//│ 		            (failwith "error")))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec takeDigits_lh__d1 _lh_takeDigits_arg1_0 _lh_takeDigits_arg2_0 =
//│ 		  (if (_lh_takeDigits_arg1_0 > 0) then
//│ 		    (let rec _lh_matchIdent_1 = (Lazy.force _lh_takeDigits_arg2_0) in
//│ 		      (match _lh_matchIdent_1 with
//│ 		        | `LH_N -> 
//│ 		          (failwith "error")
//│ 		        | `LH_C(_lh_takeDigits_LH_C_0_0, _lh_takeDigits_LH_C_1_0) -> 
//│ 		          (`LH_C(_lh_takeDigits_LH_C_0_0, ((takeDigits_lh__d1 (_lh_takeDigits_arg1_0 - 1)) ((ratTrans_lh__d1 (`LH_P4(10, 0, 0, 1))) _lh_takeDigits_LH_C_1_0))))
//│ 		        | _ -> 
//│ 		          (failwith "error")))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec aux_lh__d1 _lh_aux_arg1_0 =
//│ 		  (lazy (`LH_C(1, (lazy (`LH_C(_lh_aux_arg1_0, (lazy (`LH_C(1, (aux_lh__d1 (_lh_aux_arg1_0 + 2)))))))))));;
//│ 		let rec eContFrac_lh__d1 =
//│ 		  (lazy (`LH_C(2, (aux_lh__d1 2))));;
//│ 		let rec testDigitsOfE1_nofib_lh__d1 _lh_testDigitsOfE1_nofib_arg1_0 =
//│ 		  ((takeDigits_lh__d1 _lh_testDigitsOfE1_nofib_arg1_0) eContFrac_lh__d1);;
//│ 		(testDigitsOfE1_nofib_lh__d1 300)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))]: 91 --->
//│ 	case _lh_ratTrans_arg1⁰ of {LH_P4 _lh_ratTrans_LH_P4_0⁰ _lh_ratTrans_LH_P4_1⁰ _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ => let _lh_matchIdent⁰ = force⁰(_lh_ratTrans_arg2⁰)
//│ in case _lh_matchIdent⁰ of {LH_N  => error⁰ | LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰ => if (_lh_ratTrans_LH_P4_3⁰ == 0) then ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) else let q⁰ = div⁰(_lh_ratTrans_LH_P4_1⁰, _lh_ratTrans_LH_P4_3⁰)
//│ in if ((((signum_lh_₁(_lh_ratTrans_LH_P4_2⁰) == signum_lh_₂(_lh_ratTrans_LH_P4_3⁰)) || (abs_lh_₂(_lh_ratTrans_LH_P4_2⁰) < abs_lh_₁(_lh_ratTrans_LH_P4_3⁰))) && (((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) <= (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) && ((((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) + (_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰)) > (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) then lazy⁰([LH_C q⁰ ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))], lazy⁰([LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]))]) else ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 234
//│ [LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))]: 192 --->
//│ 	case _lh_ratTrans_arg1⁰ of {LH_P4 _lh_ratTrans_LH_P4_0⁰ _lh_ratTrans_LH_P4_1⁰ _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ => let _lh_matchIdent⁰ = force⁰(_lh_ratTrans_arg2⁰)
//│ in case _lh_matchIdent⁰ of {LH_N  => error⁰ | LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰ => if (_lh_ratTrans_LH_P4_3⁰ == 0) then ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) else let q⁰ = div⁰(_lh_ratTrans_LH_P4_1⁰, _lh_ratTrans_LH_P4_3⁰)
//│ in if ((((signum_lh_₁(_lh_ratTrans_LH_P4_2⁰) == signum_lh_₂(_lh_ratTrans_LH_P4_3⁰)) || (abs_lh_₂(_lh_ratTrans_LH_P4_2⁰) < abs_lh_₁(_lh_ratTrans_LH_P4_3⁰))) && (((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) <= (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) && ((((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) + (_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰)) > (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) then lazy⁰([LH_C q⁰ ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))], lazy⁰([LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]))]) else ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 234
//│ [LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]: 197 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => error⁰ | LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰ => if (_lh_ratTrans_LH_P4_3⁰ == 0) then ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) else let q⁰ = div⁰(_lh_ratTrans_LH_P4_1⁰, _lh_ratTrans_LH_P4_3⁰)
//│ in if ((((signum_lh_₁(_lh_ratTrans_LH_P4_2⁰) == signum_lh_₂(_lh_ratTrans_LH_P4_3⁰)) || (abs_lh_₂(_lh_ratTrans_LH_P4_2⁰) < abs_lh_₁(_lh_ratTrans_LH_P4_3⁰))) && (((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) <= (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) && ((((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) + (_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰)) > (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) then lazy⁰([LH_C q⁰ ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))], lazy⁰([LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]))]) else ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) | _  => error⁰}: 231
//│ [LH_C q⁰ ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))], lazy⁰([LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]))]: 200 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => error⁰ | LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰ => if (_lh_ratTrans_LH_P4_3⁰ == 0) then ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) else let q⁰ = div⁰(_lh_ratTrans_LH_P4_1⁰, _lh_ratTrans_LH_P4_3⁰)
//│ in if ((((signum_lh_₁(_lh_ratTrans_LH_P4_2⁰) == signum_lh_₂(_lh_ratTrans_LH_P4_3⁰)) || (abs_lh_₂(_lh_ratTrans_LH_P4_2⁰) < abs_lh_₁(_lh_ratTrans_LH_P4_3⁰))) && (((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) <= (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) && ((((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) + (_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰)) > (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) then lazy⁰([LH_C q⁰ ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))], lazy⁰([LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]))]) else ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) | _  => error⁰}: 231
//│ 	case _lh_matchIdent¹ of {LH_N  => error⁰ | LH_C _lh_takeDigits_LH_C_0⁰ _lh_takeDigits_LH_C_1⁰ => [LH_C _lh_takeDigits_LH_C_0⁰ takeDigits_lh_₁((_lh_takeDigits_arg1⁰ - 1), ratTrans_lh_₁([LH_P4 10 0 0 1], _lh_takeDigits_LH_C_1⁰))] | _  => error⁰}: 287
//│ [LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))]: 223 --->
//│ 	case _lh_ratTrans_arg1⁰ of {LH_P4 _lh_ratTrans_LH_P4_0⁰ _lh_ratTrans_LH_P4_1⁰ _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ => let _lh_matchIdent⁰ = force⁰(_lh_ratTrans_arg2⁰)
//│ in case _lh_matchIdent⁰ of {LH_N  => error⁰ | LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰ => if (_lh_ratTrans_LH_P4_3⁰ == 0) then ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) else let q⁰ = div⁰(_lh_ratTrans_LH_P4_1⁰, _lh_ratTrans_LH_P4_3⁰)
//│ in if ((((signum_lh_₁(_lh_ratTrans_LH_P4_2⁰) == signum_lh_₂(_lh_ratTrans_LH_P4_3⁰)) || (abs_lh_₂(_lh_ratTrans_LH_P4_2⁰) < abs_lh_₁(_lh_ratTrans_LH_P4_3⁰))) && (((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) <= (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) && ((((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) + (_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰)) > (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) then lazy⁰([LH_C q⁰ ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))], lazy⁰([LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]))]) else ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 234
//│ [LH_C 1 aux_lh_₁((_lh_aux_arg1⁰ + 2))]: 250 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => error⁰ | LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰ => if (_lh_ratTrans_LH_P4_3⁰ == 0) then ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) else let q⁰ = div⁰(_lh_ratTrans_LH_P4_1⁰, _lh_ratTrans_LH_P4_3⁰)
//│ in if ((((signum_lh_₁(_lh_ratTrans_LH_P4_2⁰) == signum_lh_₂(_lh_ratTrans_LH_P4_3⁰)) || (abs_lh_₂(_lh_ratTrans_LH_P4_2⁰) < abs_lh_₁(_lh_ratTrans_LH_P4_3⁰))) && (((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) <= (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) && ((((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) + (_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰)) > (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) then lazy⁰([LH_C q⁰ ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))], lazy⁰([LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]))]) else ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) | _  => error⁰}: 231
//│ [LH_C _lh_aux_arg1⁰ lazy⁰([LH_C 1 aux_lh_₁((_lh_aux_arg1⁰ + 2))])]: 252 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => error⁰ | LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰ => if (_lh_ratTrans_LH_P4_3⁰ == 0) then ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) else let q⁰ = div⁰(_lh_ratTrans_LH_P4_1⁰, _lh_ratTrans_LH_P4_3⁰)
//│ in if ((((signum_lh_₁(_lh_ratTrans_LH_P4_2⁰) == signum_lh_₂(_lh_ratTrans_LH_P4_3⁰)) || (abs_lh_₂(_lh_ratTrans_LH_P4_2⁰) < abs_lh_₁(_lh_ratTrans_LH_P4_3⁰))) && (((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) <= (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) && ((((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) + (_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰)) > (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) then lazy⁰([LH_C q⁰ ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))], lazy⁰([LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]))]) else ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) | _  => error⁰}: 231
//│ [LH_C 1 lazy⁰([LH_C _lh_aux_arg1⁰ lazy⁰([LH_C 1 aux_lh_₁((_lh_aux_arg1⁰ + 2))])])]: 254 --->
//│ 	case _lh_matchIdent⁰ of {LH_N  => error⁰ | LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰ => if (_lh_ratTrans_LH_P4_3⁰ == 0) then ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) else let q⁰ = div⁰(_lh_ratTrans_LH_P4_1⁰, _lh_ratTrans_LH_P4_3⁰)
//│ in if ((((signum_lh_₁(_lh_ratTrans_LH_P4_2⁰) == signum_lh_₂(_lh_ratTrans_LH_P4_3⁰)) || (abs_lh_₂(_lh_ratTrans_LH_P4_2⁰) < abs_lh_₁(_lh_ratTrans_LH_P4_3⁰))) && (((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) <= (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) && ((((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) + (_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰)) > (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) then lazy⁰([LH_C q⁰ ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))], lazy⁰([LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]))]) else ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) | _  => error⁰}: 231
//│ [LH_P4 10 0 0 1]: 280 --->
//│ 	case _lh_ratTrans_arg1⁰ of {LH_P4 _lh_ratTrans_LH_P4_0⁰ _lh_ratTrans_LH_P4_1⁰ _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ => let _lh_matchIdent⁰ = force⁰(_lh_ratTrans_arg2⁰)
//│ in case _lh_matchIdent⁰ of {LH_N  => error⁰ | LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰ => if (_lh_ratTrans_LH_P4_3⁰ == 0) then ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) else let q⁰ = div⁰(_lh_ratTrans_LH_P4_1⁰, _lh_ratTrans_LH_P4_3⁰)
//│ in if ((((signum_lh_₁(_lh_ratTrans_LH_P4_2⁰) == signum_lh_₂(_lh_ratTrans_LH_P4_3⁰)) || (abs_lh_₂(_lh_ratTrans_LH_P4_2⁰) < abs_lh_₁(_lh_ratTrans_LH_P4_3⁰))) && (((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) <= (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) && ((((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) + (_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰)) > (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) then lazy⁰([LH_C q⁰ ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))], lazy⁰([LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]))]) else ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 234
//│ [LH_C 2 aux_lh_₁(2)]: 298 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => error⁰ | LH_C _lh_takeDigits_LH_C_0⁰ _lh_takeDigits_LH_C_1⁰ => [LH_C _lh_takeDigits_LH_C_0⁰ takeDigits_lh_₁((_lh_takeDigits_arg1⁰ - 1), ratTrans_lh_₁([LH_P4 10 0 0 1], _lh_takeDigits_LH_C_1⁰))] | _  => error⁰}: 287
//│ ------------------
//│ case _lh_matchIdent⁰ of {LH_N  => error⁰ | LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰ => if (_lh_ratTrans_LH_P4_3⁰ == 0) then ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) else let q⁰ = div⁰(_lh_ratTrans_LH_P4_1⁰, _lh_ratTrans_LH_P4_3⁰)
//│ in if ((((signum_lh_₁(_lh_ratTrans_LH_P4_2⁰) == signum_lh_₂(_lh_ratTrans_LH_P4_3⁰)) || (abs_lh_₂(_lh_ratTrans_LH_P4_2⁰) < abs_lh_₁(_lh_ratTrans_LH_P4_3⁰))) && (((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) <= (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) && ((((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) + (_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰)) > (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) then lazy⁰([LH_C q⁰ ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))], lazy⁰([LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]))]) else ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) | _  => error⁰}: 231 --->
//│ 	[LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]: 197
//│ 	[LH_C q⁰ ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))], lazy⁰([LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]))]: 200
//│ 	[LH_C 1 aux_lh_₁((_lh_aux_arg1⁰ + 2))]: 250
//│ 	[LH_C _lh_aux_arg1⁰ lazy⁰([LH_C 1 aux_lh_₁((_lh_aux_arg1⁰ + 2))])]: 252
//│ 	[LH_C 1 lazy⁰([LH_C _lh_aux_arg1⁰ lazy⁰([LH_C 1 aux_lh_₁((_lh_aux_arg1⁰ + 2))])])]: 254
//│ case _lh_ratTrans_arg1⁰ of {LH_P4 _lh_ratTrans_LH_P4_0⁰ _lh_ratTrans_LH_P4_1⁰ _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ => let _lh_matchIdent⁰ = force⁰(_lh_ratTrans_arg2⁰)
//│ in case _lh_matchIdent⁰ of {LH_N  => error⁰ | LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰ => if (_lh_ratTrans_LH_P4_3⁰ == 0) then ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) else let q⁰ = div⁰(_lh_ratTrans_LH_P4_1⁰, _lh_ratTrans_LH_P4_3⁰)
//│ in if ((((signum_lh_₁(_lh_ratTrans_LH_P4_2⁰) == signum_lh_₂(_lh_ratTrans_LH_P4_3⁰)) || (abs_lh_₂(_lh_ratTrans_LH_P4_2⁰) < abs_lh_₁(_lh_ratTrans_LH_P4_3⁰))) && (((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) <= (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) && ((((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q⁰) + (_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰)) > (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) then lazy⁰([LH_C q⁰ ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))], lazy⁰([LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]))]) else ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 234 --->
//│ 	[LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))]: 91
//│ 	[LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))]: 192
//│ 	[LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))]: 223
//│ 	[LH_P4 10 0 0 1]: 280
//│ case _lh_matchIdent¹ of {LH_N  => error⁰ | LH_C _lh_takeDigits_LH_C_0⁰ _lh_takeDigits_LH_C_1⁰ => [LH_C _lh_takeDigits_LH_C_0⁰ takeDigits_lh_₁((_lh_takeDigits_arg1⁰ - 1), ratTrans_lh_₁([LH_P4 10 0 0 1], _lh_takeDigits_LH_C_1⁰))] | _  => error⁰}: 287 --->
//│ 	[LH_C q⁰ ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q⁰ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q⁰ * _lh_ratTrans_LH_P4_3⁰))], lazy⁰([LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]))]: 200
//│ 	[LH_C 2 aux_lh_₁(2)]: 298
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testDigitsOfE1_nofib_lh_₁(primId⁰(300))
//│ def abs_lh_₁(_lh_abs_arg1³) = if (_lh_abs_arg1³ < 0) then (0 - _lh_abs_arg1³) else _lh_abs_arg1³
//│ def abs_lh_₂(_lh_abs_arg1²) = if (_lh_abs_arg1² < 0) then (0 - _lh_abs_arg1²) else _lh_abs_arg1²
//│ def aux_lh_₁(_lh_aux_arg1¹) = lazy⁰([LH_C 1 lazy⁰([LH_C _lh_aux_arg1¹ lazy⁰([LH_C 1 aux_lh_₁((_lh_aux_arg1¹ + 2))])])])
//│ def eContFrac_lh_₁ = lazy⁰([LH_C 2 aux_lh_₁(2)])
//│ def ratTrans_lh_₁(_lh_ratTrans_arg1¹, _lh_ratTrans_arg2¹) = case _lh_ratTrans_arg1¹ of {
//│ 	LH_P4 _lh_ratTrans_LH_P4_0⁰ _lh_ratTrans_LH_P4_1⁰ _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ => 
//│ 		let _lh_matchIdent² = force⁰(_lh_ratTrans_arg2¹)
//│ 		in case _lh_matchIdent² of {
//│ 			LH_N  => error⁰
//│ 			| LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰ => if (_lh_ratTrans_LH_P4_3⁰ == 0) then ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰) else 
//│ 				let q¹ = div⁰(_lh_ratTrans_LH_P4_1⁰, _lh_ratTrans_LH_P4_3⁰)
//│ 				in if ((((signum_lh_₁(_lh_ratTrans_LH_P4_2⁰) == signum_lh_₂(_lh_ratTrans_LH_P4_3⁰)) || (abs_lh_₂(_lh_ratTrans_LH_P4_2⁰) < abs_lh_₁(_lh_ratTrans_LH_P4_3⁰))) && (((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q¹) <= (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) && ((((_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰) * q¹) + (_lh_ratTrans_LH_P4_2⁰ + _lh_ratTrans_LH_P4_3⁰)) > (_lh_ratTrans_LH_P4_0⁰ + _lh_ratTrans_LH_P4_1⁰))) then lazy⁰([LH_C q¹ ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_2⁰ _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_0⁰ - (q¹ * _lh_ratTrans_LH_P4_2⁰)) (_lh_ratTrans_LH_P4_1⁰ - (q¹ * _lh_ratTrans_LH_P4_3⁰))], lazy⁰([LH_C _lh_ratTrans_LH_C_0⁰ _lh_ratTrans_LH_C_1⁰]))]) else ratTrans_lh_₁([LH_P4 _lh_ratTrans_LH_P4_1⁰ (_lh_ratTrans_LH_P4_0⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_1⁰)) _lh_ratTrans_LH_P4_3⁰ (_lh_ratTrans_LH_P4_2⁰ + (_lh_ratTrans_LH_C_0⁰ * _lh_ratTrans_LH_P4_3⁰))], _lh_ratTrans_LH_C_1⁰)
//│ 			| _  => error⁰}
//│ 	| _  => error⁰}
//│ def signum_lh_₁(_lh_signum_arg1³) = case _lh_signum_arg1³ of {
//│ 	0  => 0
//│ 	| _  => if (_lh_signum_arg1³ > 0) then 1 else (0 - 1)}
//│ def signum_lh_₂(_lh_signum_arg1²) = case _lh_signum_arg1² of {
//│ 	0  => 0
//│ 	| _  => if (_lh_signum_arg1² > 0) then 1 else (0 - 1)}
//│ def takeDigits_lh_₁(_lh_takeDigits_arg1¹, _lh_takeDigits_arg2¹) = if (_lh_takeDigits_arg1¹ > 0) then 
//│ 	let _lh_matchIdent³ = force⁰(_lh_takeDigits_arg2¹)
//│ 	in case _lh_matchIdent³ of {
//│ 		LH_N  => error⁰
//│ 		| LH_C _lh_takeDigits_LH_C_0⁰ _lh_takeDigits_LH_C_1⁰ => [LH_C _lh_takeDigits_LH_C_0⁰ takeDigits_lh_₁((_lh_takeDigits_arg1¹ - 1), ratTrans_lh_₁([LH_P4 10 0 0 1], _lh_takeDigits_LH_C_1⁰))]
//│ 		| _  => error⁰} else [LH_N]
//│ def testDigitsOfE1_nofib_lh_₁(_lh_testDigitsOfE1_nofib_arg1¹) = takeDigits_lh_₁(_lh_testDigitsOfE1_nofib_arg1¹, eContFrac_lh_₁)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
