:NewParser
:ParseOnly

:lhInHaskell
:lhGenOCaml
power a n = if n == 0 then 1 else a * (power a (n - 1))
dropWhile f [] = []
dropWhile f (h:t) = if (f h) then dropWhile f t else (h:t)
drop n []      = []
drop n (h:t)   = if n > 0 then (drop (n - 1) t) else t
foldl1 f (x:xs) = foldl f x xs
maximum xs = foldl1 (\x -> \y -> if x > y then x else y) xs
nub_lz ls =
  lazy ( case (force ls) of {
    [] -> [];
    (x:xs) -> x:(nub_lz (filter_lz (\y -> not (polyEq x y)) xs))
  })
take_lz n ls =
  if n == 0 then
    []
  else case (force ls) of {
    [] -> [];
    (h:t) -> h:(take_lz (n - 1) t)
  }
infRand m =
  let f = \x -> lazy (((mod x m) + 1):(f (((97 * x) + 11) `mod` (power 2 7)))) in
  f 37
simulate n m proc = (float_of_int (length (filter (\x -> x) [ proc (infRand m) | seed <- [1..n] ]))) /. (float_of_int n)
sim k =
  let proc = \rs ->
              let xs     = take_lz 100 (nub_lz rs) in
              let best   = 100 in
              let bestk  = maximum (take k xs) in
              let afterk = dropWhile (\x -> x < bestk) (drop k xs) in
              polyEq [best] (take 1 afterk)
  in
  simulate 5000 100 proc
testSecretary_nofib dummy = [ sim k | k <- [35..39] ]
testSecretary_nofib $ primId 0
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testSecretary_nofib_lh_₁^457(primId⁰(0))
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁^350(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]
//│ 	| _  => error⁰}
//│ def drop_lh_₁(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ > 0) then drop_lh_₁^307((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) else _lh_drop_LH_C_1⁰
//│ 	| _  => error⁰}
//│ def enumFromTo_lh_₁(a¹, b¹) = if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh_₁^423((a¹ + 1), b¹)] else [LH_N]
//│ def enumFromTo_lh_₂(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh_₂^131((a⁰ + 1), b⁰)] else [LH_N]
//│ def filter_lh_₁(f², ls²) = case ls² of {
//│ 	LH_C h² t² => if f²(h²) then [LH_C h² filter_lh_₁^72(f², t²)] else filter_lh_₁^78(f², t²)
//│ 	| LH_N  => [LH_N]}
//│ def filter_lz_lh_₁(f¹, ls¹) = lazy⁰(case force⁰(ls¹) of {
//│ 	LH_C h¹ t¹ => if f¹(h¹) then [LH_C h¹ filter_lz_lh_₁^48(f¹, t¹)] else force⁰(filter_lz_lh_₁^55(f¹, t¹))
//│ 	| LH_N  => [LH_N]})
//│ def foldl1_lh_₁(_lh_foldl1_arg1⁰, _lh_foldl1_arg2⁰) = case _lh_foldl1_arg2⁰ of {
//│ 	LH_C _lh_foldl1_LH_C_0⁰ _lh_foldl1_LH_C_1⁰ => foldl_lh_₁^157(_lh_foldl1_arg1⁰, _lh_foldl1_LH_C_0⁰, _lh_foldl1_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def foldl_lh_₁(f⁰, i⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => foldl_lh_₁^24(f⁰, f⁰(i⁰, h⁰), t⁰)
//│ 	| LH_N  => i⁰}
//│ def infRand_lh_₁(_lh_infRand_arg1⁰) = 
//│ 	let f³ = (fun x⁰ -> lazy⁰([LH_C ((x⁰ mod _lh_infRand_arg1⁰) + 1) f³((((97 * x⁰) + 11) % power_lh_₁^110(2, 7)))]))
//│ 	in f³(37)
//│ def length_lh_₁(ls³) = case ls³ of {
//│ 	LH_C h³ t³ => (1 + length_lh_₁^149(t³))
//│ 	| LH_N  => 0}
//│ def maximum_lh_₁(_lh_maximum_arg1⁰) = foldl1_lh_₁^285((fun x² -> (fun y¹ -> if (x² > y¹) then x² else y¹)), _lh_maximum_arg1⁰)
//│ def nub_lz_lh_₁(_lh_nub_lz_arg1⁰) = lazy⁰(
//│ 	let _lh_matchIdent⁰ = force⁰(_lh_nub_lz_arg1⁰)
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_nub_lz_LH_C_0⁰ _lh_nub_lz_LH_C_1⁰ => [LH_C _lh_nub_lz_LH_C_0⁰ nub_lz_lh_₁^175(filter_lz_lh_₁^176((fun y⁰ -> not⁰(polyEq⁰(_lh_nub_lz_LH_C_0⁰, y⁰))), _lh_nub_lz_LH_C_1⁰))]
//│ 		| _  => error⁰})
//│ def power_lh_₁(_lh_power_arg1⁰, _lh_power_arg2⁰) = if (_lh_power_arg2⁰ == 0) then 1 else (_lh_power_arg1⁰ * power_lh_₁^10(_lh_power_arg1⁰, (_lh_power_arg2⁰ - 1)))
//│ def sim_lh_₁(_lh_sim_arg1⁰) = 
//│ 	let proc⁰ = (fun rs⁰ -> 
//│ 		let xs⁰ = take_lz_lh_₁^363(100, nub_lz_lh_₁^366(rs⁰))
//│ 		in let best⁰ = 100
//│ 		in let bestk⁰ = maximum_lh_₁^371(take_lh_₁^372(_lh_sim_arg1⁰, xs⁰))
//│ 		in let afterk⁰ = dropWhile_lh_₁^378((fun x³ -> (x³ < bestk⁰)), drop_lh_₁^386(_lh_sim_arg1⁰, xs⁰))
//│ 		in polyEq⁰([LH_C best⁰ [LH_N]], take_lh_₂^397(1, afterk⁰)))
//│ 	in simulate_lh_₁^408(5000, 100, proc⁰)
//│ def simulate_lh_₁(_lh_simulate_arg1⁰, _lh_simulate_arg2⁰, _lh_simulate_arg3⁰) = (float_of_int⁰(length_lh_₁^197(filter_lh_₁^198((fun x¹ -> x¹), 
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C _lh_simulate_arg3⁰(infRand_lh_₁^204(_lh_simulate_arg2⁰)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰(enumFromTo_lh_₂^216(1, _lh_simulate_arg1⁰))))) /. float_of_int⁰(_lh_simulate_arg1⁰))
//│ def take_lh_₁(n¹, ls⁵) = if (n¹ > 0) then case ls⁵ of {
//│ 	LH_C h⁵ t⁵ => [LH_C h⁵ take_lh_₁^329((n¹ - 1), t⁵)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lh_₂(n⁰, ls⁴) = if (n⁰ > 0) then case ls⁴ of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ take_lh_₂^241((n⁰ - 1), t⁴)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lz_lh_₁(_lh_take_lz_arg1⁰, _lh_take_lz_arg2⁰) = if (_lh_take_lz_arg1⁰ == 0) then [LH_N] else 
//│ 	let _lh_matchIdent¹ = force⁰(_lh_take_lz_arg2⁰)
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_take_lz_LH_C_0⁰ _lh_take_lz_LH_C_1⁰ => [LH_C _lh_take_lz_LH_C_0⁰ take_lz_lh_₁^269((_lh_take_lz_arg1⁰ - 1), _lh_take_lz_LH_C_1⁰)]
//│ 		| _  => error⁰}
//│ def testSecretary_nofib_lh_₁(_lh_testSecretary_nofib_arg1⁰) = 
//│ 	let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C sim_lh_₁^438(_lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹(enumFromTo_lh_₁^449(35, 39))
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec foldl_lh__d1 f_0 i_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (((foldl_lh__d1 f_0) ((f_0 i_0) h_0)) t_0)
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec foldl1_lh__d1 _lh_foldl1_arg1_0 _lh_foldl1_arg2_0 =
//│ 		  (match _lh_foldl1_arg2_0 with
//│ 		    | `LH_C(_lh_foldl1_LH_C_0_0, _lh_foldl1_LH_C_1_0) -> 
//│ 		      (((foldl_lh__d1 _lh_foldl1_arg1_0) _lh_foldl1_LH_C_0_0) _lh_foldl1_LH_C_1_0)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec maximum_lh__d1 _lh_maximum_arg1_0 =
//│ 		  ((foldl1_lh__d1 (fun x_2 y_1 -> 
//│ 		    (if (x_2 > y_1) then
//│ 		      x_2
//│ 		    else
//│ 		      y_1))) _lh_maximum_arg1_0);;
//│ 		let rec take_lh__d1 n_1 ls_5 =
//│ 		  (if (n_1 > 0) then
//│ 		    (match ls_5 with
//│ 		      | `LH_C(h_5, t_5) -> 
//│ 		        (`LH_C(h_5, ((take_lh__d1 (n_1 - 1)) t_5)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec filter_lz_lh__d1 f_1 ls_1 =
//│ 		  (lazy (match (Lazy.force ls_1) with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (if (f_1 h_1) then
//│ 		        (`LH_C(h_1, ((filter_lz_lh__d1 f_1) t_1)))
//│ 		      else
//│ 		        (Lazy.force ((filter_lz_lh__d1 f_1) t_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec nub_lz_lh__d1 _lh_nub_lz_arg1_0 =
//│ 		  (lazy (let rec _lh_matchIdent_0 = (Lazy.force _lh_nub_lz_arg1_0) in
//│ 		    (match _lh_matchIdent_0 with
//│ 		      | `LH_N -> 
//│ 		        (`LH_N)
//│ 		      | `LH_C(_lh_nub_lz_LH_C_0_0, _lh_nub_lz_LH_C_1_0) -> 
//│ 		        (`LH_C(_lh_nub_lz_LH_C_0_0, (nub_lz_lh__d1 ((filter_lz_lh__d1 (fun y_0 -> 
//│ 		          (not (_lh_nub_lz_LH_C_0_0 = y_0)))) _lh_nub_lz_LH_C_1_0))))
//│ 		      | _ -> 
//│ 		        (failwith "error"))));;
//│ 		let rec take_lz_lh__d1 _lh_take_lz_arg1_0 _lh_take_lz_arg2_0 =
//│ 		  (if (_lh_take_lz_arg1_0 = 0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (let rec _lh_matchIdent_1 = (Lazy.force _lh_take_lz_arg2_0) in
//│ 		      (match _lh_matchIdent_1 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_N)
//│ 		        | `LH_C(_lh_take_lz_LH_C_0_0, _lh_take_lz_LH_C_1_0) -> 
//│ 		          (`LH_C(_lh_take_lz_LH_C_0_0, ((take_lz_lh__d1 (_lh_take_lz_arg1_0 - 1)) _lh_take_lz_LH_C_1_0)))
//│ 		        | _ -> 
//│ 		          (failwith "error"))));;
//│ 		let rec drop_lh__d1 _lh_drop_arg1_0 _lh_drop_arg2_0 =
//│ 		  (match _lh_drop_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0) -> 
//│ 		      (if (_lh_drop_arg1_0 > 0) then
//│ 		        ((drop_lh__d1 (_lh_drop_arg1_0 - 1)) _lh_drop_LH_C_1_0)
//│ 		      else
//│ 		        _lh_drop_LH_C_1_0)
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec power_lh__d1 _lh_power_arg1_0 _lh_power_arg2_0 =
//│ 		  (if (_lh_power_arg2_0 = 0) then
//│ 		    1
//│ 		  else
//│ 		    (_lh_power_arg1_0 * ((power_lh__d1 _lh_power_arg1_0) (_lh_power_arg2_0 - 1))));;
//│ 		let rec infRand_lh__d1 _lh_infRand_arg1_0 =
//│ 		  (let rec f_3 = (fun x_0 -> 
//│ 		    (lazy (`LH_C(((x_0 mod _lh_infRand_arg1_0) + 1), (f_3 (((97 * x_0) + 11) mod ((power_lh__d1 2) 7))))))) in
//│ 		    (f_3 37));;
//│ 		let rec enumFromTo_lh__d2 a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh__d2 (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec filter_lh__d1 f_2 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (if (f_2 h_2) then
//│ 		        (`LH_C(h_2, ((filter_lh__d1 f_2) t_2)))
//│ 		      else
//│ 		        ((filter_lh__d1 f_2) t_2))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec length_lh__d1 ls_3 =
//│ 		  (match ls_3 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      (1 + (length_lh__d1 t_3))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec simulate_lh__d1 _lh_simulate_arg1_0 _lh_simulate_arg2_0 _lh_simulate_arg3_0 =
//│ 		  ((float_of_int (length_lh__d1 ((filter_lh__d1 (fun x_1 -> 
//│ 		    x_1)) (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		    (match _lh_listcomp_fun_para_0 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		        (`LH_C((_lh_simulate_arg3_0 (infRand_lh__d1 _lh_simulate_arg2_0)), (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_0 ((enumFromTo_lh__d2 1) _lh_simulate_arg1_0)))))) /. (float_of_int _lh_simulate_arg1_0));;
//│ 		let rec dropWhile_lh__d1 _lh_dropWhile_arg1_0 _lh_dropWhile_arg2_0 =
//│ 		  (match _lh_dropWhile_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_dropWhile_LH_C_0_0, _lh_dropWhile_LH_C_1_0) -> 
//│ 		      (if (_lh_dropWhile_arg1_0 _lh_dropWhile_LH_C_0_0) then
//│ 		        ((dropWhile_lh__d1 _lh_dropWhile_arg1_0) _lh_dropWhile_LH_C_1_0)
//│ 		      else
//│ 		        (`LH_C(_lh_dropWhile_LH_C_0_0, _lh_dropWhile_LH_C_1_0)))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec take_lh__d2 n_0 ls_4 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match ls_4 with
//│ 		      | `LH_C(h_4, t_4) -> 
//│ 		        (`LH_C(h_4, ((take_lh__d2 (n_0 - 1)) t_4)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec sim_lh__d1 _lh_sim_arg1_0 =
//│ 		  (let rec proc_0 = (fun rs_0 -> 
//│ 		    (let rec xs_0 = ((take_lz_lh__d1 100) (nub_lz_lh__d1 rs_0)) in
//│ 		      (let rec best_0 = 100 in
//│ 		        (let rec bestk_0 = (maximum_lh__d1 ((take_lh__d1 _lh_sim_arg1_0) xs_0)) in
//│ 		          (let rec afterk_0 = ((dropWhile_lh__d1 (fun x_3 -> 
//│ 		            (x_3 < bestk_0))) ((drop_lh__d1 _lh_sim_arg1_0) xs_0)) in
//│ 		            ((`LH_C(best_0, (`LH_N))) = ((take_lh__d2 1) afterk_0))))))) in
//│ 		    (((simulate_lh__d1 5000) 100) proc_0));;
//│ 		let rec enumFromTo_lh__d1 a_1 b_1 =
//│ 		  (if (a_1 <= b_1) then
//│ 		    (`LH_C(a_1, ((enumFromTo_lh__d1 (a_1 + 1)) b_1)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec testSecretary_nofib_lh__d1 _lh_testSecretary_nofib_arg1_0 =
//│ 		  (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		    (match _lh_listcomp_fun_para_1 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		        (`LH_C((sim_lh__d1 _lh_listcomp_fun_ls_h_1), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_1 ((enumFromTo_lh__d1 35) 39)));;
//│ 		(testSecretary_nofib_lh__d1 0)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion strategies >>>>>>>
//│ [LH_C h² filter_lh_₁(f², t²)]: 77 --->
//│ 	case ls³ of {LH_C h³ t³ => (1 + length_lh_₁(t³)) | LH_N  => 0}: 154
//│ [LH_N]: 84 --->
//│ 	case ls³ of {LH_C h³ t³ => (1 + length_lh_₁(t³)) | LH_N  => 0}: 154
//│ [LH_C a⁰ enumFromTo_lh_₂((a⁰ + 1), b⁰)]: 140 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C _lh_simulate_arg3⁰(infRand_lh_₁(_lh_simulate_arg2⁰)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | LH_N  => [LH_N]}: 213
//│ [LH_N]: 141 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C _lh_simulate_arg3⁰(infRand_lh_₁(_lh_simulate_arg2⁰)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | LH_N  => [LH_N]}: 213
//│ [LH_N]: 173 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => [LH_N] | LH_C _lh_take_lz_LH_C_0⁰ _lh_take_lz_LH_C_1⁰ => [LH_C _lh_take_lz_LH_C_0⁰ take_lz_lh_₁((_lh_take_lz_arg1⁰ - 1), _lh_take_lz_LH_C_1⁰)] | _  => error⁰}: 280
//│ [LH_C _lh_nub_lz_LH_C_0⁰ nub_lz_lh_₁(filter_lz_lh_₁((fun y⁰ -> not⁰(polyEq⁰(_lh_nub_lz_LH_C_0⁰, y⁰))), _lh_nub_lz_LH_C_1⁰))]: 189 --->
//│ 	case _lh_matchIdent¹ of {LH_N  => [LH_N] | LH_C _lh_take_lz_LH_C_0⁰ _lh_take_lz_LH_C_1⁰ => [LH_C _lh_take_lz_LH_C_0⁰ take_lz_lh_₁((_lh_take_lz_arg1⁰ - 1), _lh_take_lz_LH_C_1⁰)] | _  => error⁰}: 280
//│ [LH_C _lh_simulate_arg3⁰(infRand_lh_₁(_lh_simulate_arg2⁰)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 211 --->
//│ 	case ls² of {LH_C h² t² => if f²(h²) then [LH_C h² filter_lh_₁(f², t²)] else filter_lh_₁(f², t²) | LH_N  => [LH_N]}: 85
//│ [LH_N]: 212 --->
//│ 	case ls² of {LH_C h² t² => if f²(h²) then [LH_C h² filter_lh_₁(f², t²)] else filter_lh_₁(f², t²) | LH_N  => [LH_N]}: 85
//│ [LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)]: 432 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C sim_lh_₁(_lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 446
//│ [LH_N]: 433 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C sim_lh_₁(_lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 446
//│ ------------------
//│ case ls² of {LH_C h² t² => if f²(h²) then [LH_C h² filter_lh_₁(f², t²)] else filter_lh_₁(f², t²) | LH_N  => [LH_N]}: 85 --->
//│ 	[LH_C _lh_simulate_arg3⁰(infRand_lh_₁(_lh_simulate_arg2⁰)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]: 211
//│ 	[LH_N]: 212
//│ case ls³ of {LH_C h³ t³ => (1 + length_lh_₁(t³)) | LH_N  => 0}: 154 --->
//│ 	[LH_C h² filter_lh_₁(f², t²)]: 77
//│ 	[LH_N]: 84
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C _lh_simulate_arg3⁰(infRand_lh_₁(_lh_simulate_arg2⁰)) _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | LH_N  => [LH_N]}: 213 --->
//│ 	[LH_C a⁰ enumFromTo_lh_₂((a⁰ + 1), b⁰)]: 140
//│ 	[LH_N]: 141
//│ case _lh_matchIdent¹ of {LH_N  => [LH_N] | LH_C _lh_take_lz_LH_C_0⁰ _lh_take_lz_LH_C_1⁰ => [LH_C _lh_take_lz_LH_C_0⁰ take_lz_lh_₁((_lh_take_lz_arg1⁰ - 1), _lh_take_lz_LH_C_1⁰)] | _  => error⁰}: 280 --->
//│ 	[LH_N]: 173
//│ 	[LH_C _lh_nub_lz_LH_C_0⁰ nub_lz_lh_₁(filter_lz_lh_₁((fun y⁰ -> not⁰(polyEq⁰(_lh_nub_lz_LH_C_0⁰, y⁰))), _lh_nub_lz_LH_C_1⁰))]: 189
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C sim_lh_₁(_lh_listcomp_fun_ls_h¹) _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)] | LH_N  => [LH_N]}: 446 --->
//│ 	[LH_C a¹ enumFromTo_lh_₁((a¹ + 1), b¹)]: 432
//│ 	[LH_N]: 433
//│ <<<<<<< fusion strategies <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testSecretary_nofib_lh_₁(primId⁰(0))
//│ def dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_arg2⁰) = case _lh_dropWhile_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰ => if _lh_dropWhile_arg1⁰(_lh_dropWhile_LH_C_0⁰) then dropWhile_lh_₁(_lh_dropWhile_arg1⁰, _lh_dropWhile_LH_C_1⁰) else [LH_C _lh_dropWhile_LH_C_0⁰ _lh_dropWhile_LH_C_1⁰]
//│ 	| _  => error⁰}
//│ def drop_lh_₁(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ > 0) then drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰) else _lh_drop_LH_C_1⁰
//│ 	| _  => error⁰}
//│ def enumFromTo_lh_₁(a¹, b¹, _lh_floatOutId_0¹) = if (a¹ <= b¹) then 
//│ 	let _lh_listcomp_fun_ls_t¹ = enumFromTo_lh_₁((a¹ + 1), b¹)
//│ 	in let _lh_listcomp_fun_ls_h¹ = a¹
//│ 	in [LH_C sim_lh_₁(_lh_listcomp_fun_ls_h¹) _lh_floatOutId_0¹(_lh_listcomp_fun_ls_t¹)] else [LH_N]
//│ def enumFromTo_lh_₂(a⁰, b⁰, _lh_floatOutId_0⁰, _lh_floatOutId_1⁰, _lh_floatOutId_2⁰, _lh_floatOutId_3⁰) = if (a⁰ <= b⁰) then 
//│ 	let _lh_listcomp_fun_ls_t⁰ = enumFromTo_lh_₂((a⁰ + 1), b⁰)
//│ 	in let _lh_listcomp_fun_ls_h⁰ = a⁰
//│ 	in let t¹ = _lh_floatOutId_0⁰(_lh_listcomp_fun_ls_t⁰)
//│ 	in let h¹ = _lh_floatOutId_2⁰(infRand_lh_₁(_lh_floatOutId_1⁰))
//│ 	in if _lh_floatOutId_3⁰(h¹) then (fun _lh_dummy⁰ -> 
//│ 		let t² = filter_lh_₁(_lh_floatOutId_3⁰, t¹)
//│ 		in let h² = h¹
//│ 		in (1 + length_lh_₁(t²))) else filter_lh_₁(_lh_floatOutId_3⁰, t¹) else (fun _lh_dummy¹ -> 0)
//│ def filter_lh_₁(f³, ls³) = ls³(f³)
//│ def filter_lz_lh_₁(f⁴, ls⁴) = lazy⁰(case force⁰(ls⁴) of {
//│ 	LH_C h⁴ t⁴ => if f⁴(h⁴) then [LH_C h⁴ filter_lz_lh_₁(f⁴, t⁴)] else force⁰(filter_lz_lh_₁(f⁴, t⁴))
//│ 	| LH_N  => [LH_N]})
//│ def foldl1_lh_₁(_lh_foldl1_arg1⁰, _lh_foldl1_arg2⁰) = case _lh_foldl1_arg2⁰ of {
//│ 	LH_C _lh_foldl1_LH_C_0⁰ _lh_foldl1_LH_C_1⁰ => foldl_lh_₁(_lh_foldl1_arg1⁰, _lh_foldl1_LH_C_0⁰, _lh_foldl1_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def foldl_lh_₁(f⁰, i⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => foldl_lh_₁(f⁰, f⁰(i⁰, h⁰), t⁰)
//│ 	| LH_N  => i⁰}
//│ def infRand_lh_₁(_lh_infRand_arg1⁰) = 
//│ 	let f⁵ = (fun x¹ -> lazy⁰([LH_C ((x¹ mod _lh_infRand_arg1⁰) + 1) f⁵((((97 * x¹) + 11) % power_lh_₁(2, 7)))]))
//│ 	in f⁵(37)
//│ def length_lh_₁(ls²) = ls²([lh_Unit])
//│ def maximum_lh_₁(_lh_maximum_arg1⁰) = foldl1_lh_₁((fun x⁰ -> (fun y⁰ -> if (x⁰ > y⁰) then x⁰ else y⁰)), _lh_maximum_arg1⁰)
//│ def nub_lz_lh_₁(_lh_nub_lz_arg1⁰) = lazy⁰(
//│ 	let _lh_matchIdent⁰ = force⁰(_lh_nub_lz_arg1⁰)
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_N  => (fun _lh_take_lz_arg1⁰ -> [LH_N])
//│ 		| LH_C _lh_nub_lz_LH_C_0⁰ _lh_nub_lz_LH_C_1⁰ => 
//│ 			let _lh_take_lz_LH_C_1⁰ = nub_lz_lh_₁(filter_lz_lh_₁((fun y¹ -> not⁰(polyEq⁰(_lh_nub_lz_LH_C_0⁰, y¹))), _lh_nub_lz_LH_C_1⁰))
//│ 			in let _lh_take_lz_LH_C_0⁰ = _lh_nub_lz_LH_C_0⁰
//│ 			in (fun _lh_take_lz_arg1¹ -> [LH_C _lh_take_lz_LH_C_0⁰ take_lz_lh_₁((_lh_take_lz_arg1¹ - 1), _lh_take_lz_LH_C_1⁰)])
//│ 		| _  => error⁰})
//│ def power_lh_₁(_lh_power_arg1⁰, _lh_power_arg2⁰) = if (_lh_power_arg2⁰ == 0) then 1 else (_lh_power_arg1⁰ * power_lh_₁(_lh_power_arg1⁰, (_lh_power_arg2⁰ - 1)))
//│ def sim_lh_₁(_lh_sim_arg1⁰) = 
//│ 	let proc⁰ = (fun rs⁰ -> 
//│ 		let xs⁰ = take_lz_lh_₁(100, nub_lz_lh_₁(rs⁰))
//│ 		in let best⁰ = 100
//│ 		in let bestk⁰ = maximum_lh_₁(take_lh_₁(_lh_sim_arg1⁰, xs⁰))
//│ 		in let afterk⁰ = dropWhile_lh_₁((fun x² -> (x² < bestk⁰)), drop_lh_₁(_lh_sim_arg1⁰, xs⁰))
//│ 		in polyEq⁰([LH_C best⁰ [LH_N]], take_lh_₂(1, afterk⁰)))
//│ 	in simulate_lh_₁(5000, 100, proc⁰)
//│ def simulate_lh_₁(_lh_simulate_arg1⁰, _lh_simulate_arg2², _lh_simulate_arg3²) = (float_of_int⁰(length_lh_₁(filter_lh_₁((fun x³ -> x³), 
//│ 	let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para¹ -> _lh_listcomp_fun_para¹(_lh_listcomp_fun⁵, _lh_simulate_arg2², _lh_simulate_arg3²))
//│ 	in _lh_listcomp_fun⁵(enumFromTo_lh_₂(1, _lh_simulate_arg1⁰))))) /. float_of_int⁰(_lh_simulate_arg1⁰))
//│ def take_lh_₁(n⁰, ls¹) = if (n⁰ > 0) then case ls¹ of {
//│ 	LH_C h³ t³ => [LH_C h³ take_lh_₁((n⁰ - 1), t³)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lh_₂(n¹, ls⁵) = if (n¹ > 0) then case ls⁵ of {
//│ 	LH_C h⁵ t⁵ => [LH_C h⁵ take_lh_₂((n¹ - 1), t⁵)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lz_lh_₁(_lh_take_lz_arg1², _lh_take_lz_arg2⁰) = if (_lh_take_lz_arg1² == 0) then [LH_N] else 
//│ 	let _lh_matchIdent¹ = force⁰(_lh_take_lz_arg2⁰)
//│ 	in _lh_matchIdent¹(_lh_take_lz_arg1²)
//│ def testSecretary_nofib_lh_₁(_lh_testSecretary_nofib_arg1⁰) = 
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> _lh_listcomp_fun_para⁰(_lh_listcomp_fun⁰))
//│ 	in _lh_listcomp_fun⁰(enumFromTo_lh_₁(35, 39))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<


