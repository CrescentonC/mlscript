:NewParser
:ParseOnly


:lhInHaskell
:lhGenOCaml
max a b = if a > b then a else b
drop n (h:t) = if n == 0 then (h:t) else (drop (n - 1) t)
snd (_, x) = x
inList x (h:t) = if x == h then True else inList x t
inList x [] = False
algb1 [] yss = map snd yss
algb1 (x:xs) yss = algb1 xs (algb2 x 0 0 yss)
algb2 _ _ _ [] = []
algb2 x k0j1 k1j1 ((y,k0j):ys)
  = let kjcurr = if x == y then k0j1+1 else max k1j1 k0j
    in (y,kjcurr) : (algb2 x k0j kjcurr ys)
algb xs ys = 0 : algb1 xs [ (y,0) | y <- ys ]
findk k km m [] = km
findk k km m ((x,y):xys) =
  if (x+y) >= m then findk (k+1) k (x+y) xys
  else findk (k+1) km m xys
algc m n xs []  = \x -> x
algc m n [x] ys = if inList x ys then (\t -> (x:t)) else (\x -> x)
algc m n xs ys
  = let m2 = (m `div` 2) in
    let xs1 = take m2 xs in
    let xs2 = drop m2 xs in
    let l1 = algb xs1 ys in
    let l2 = reverse (algb (reverse xs2) (reverse ys)) in
    let k = findk 0 0 (0-1) (zip l1 l2) in
    (algc m2 k xs1 (take k ys)) . (algc (m-m2) (n-k) xs2 (drop k ys))
lcss xs ys = algc (length xs) (length ys) xs ys []
lcssMain a b c d e f = lcss [a,b..c] [d,e..f]
testLCSS_nofib _ = lcssMain 1 2 60 30 31 90
testLCSS_nofib $ primId 0
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> After Expansion >>>>>>>>>>
//│ testLCSS_nofib_lh_₁^1016(primId⁰(0))
//│ def algb1_lh_₁(_lh_algb1_arg1², _lh_algb1_arg2²) = case _lh_algb1_arg1² of {
//│ 	LH_N  => map_lh_₁^154(snd_lh_₁^155, _lh_algb1_arg2²)
//│ 	| LH_C _lh_algb1_LH_C_0² _lh_algb1_LH_C_1² => algb1_lh_₁^159(_lh_algb1_LH_C_1², algb2_lh_₁^162(_lh_algb1_LH_C_0², 0, 0, _lh_algb1_arg2²))
//│ 	| _  => error⁰}
//│ def algb1_lh_₂(_lh_algb1_arg1¹, _lh_algb1_arg2¹) = case _lh_algb1_arg1¹ of {
//│ 	LH_N  => map_lh_₁^131(snd_lh_₁^132, _lh_algb1_arg2¹)
//│ 	| LH_C _lh_algb1_LH_C_0¹ _lh_algb1_LH_C_1¹ => algb1_lh_₂^136(_lh_algb1_LH_C_1¹, algb2_lh_₁^139(_lh_algb1_LH_C_0¹, 0, 0, _lh_algb1_arg2¹))
//│ 	| _  => error⁰}
//│ def algb1_lh_₃(_lh_algb1_arg1⁰, _lh_algb1_arg2⁰) = case _lh_algb1_arg1⁰ of {
//│ 	LH_N  => map_lh_₁^84(snd_lh_₁^85, _lh_algb1_arg2⁰)
//│ 	| LH_C _lh_algb1_LH_C_0⁰ _lh_algb1_LH_C_1⁰ => algb1_lh_₃^89(_lh_algb1_LH_C_1⁰, algb2_lh_₁^92(_lh_algb1_LH_C_0⁰, 0, 0, _lh_algb1_arg2⁰))
//│ 	| _  => error⁰}
//│ def algb2_lh_₁(_lh_algb2_arg1⁰, _lh_algb2_arg2⁰, _lh_algb2_arg3⁰, _lh_algb2_arg4⁰) = case _lh_algb2_arg4⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_algb2_LH_C_0⁰ _lh_algb2_LH_C_1⁰ => case _lh_algb2_LH_C_0⁰ of {
//│ 		LH_P2 _lh_algb2_LH_P2_0⁰ _lh_algb2_LH_P2_1⁰ => 
//│ 			let kjcurr⁰ = if (_lh_algb2_arg1⁰ == _lh_algb2_LH_P2_0⁰) then (_lh_algb2_arg2⁰ + 1) else max_lh_₁^24(_lh_algb2_arg3⁰, _lh_algb2_LH_P2_1⁰)
//│ 			in [LH_C [LH_P2 _lh_algb2_LH_P2_0⁰ kjcurr⁰] algb2_lh_₁^33(_lh_algb2_arg1⁰, _lh_algb2_LH_P2_1⁰, kjcurr⁰, _lh_algb2_LH_C_1⁰)]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def algb_lh_₁(_lh_algb_arg1³, _lh_algb_arg2³) = [LH_C 0 algb1_lh_₁^638(_lh_algb_arg1³, 
//│ 	let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 		LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ 0] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun³(_lh_algb_arg2³))]
//│ def algb_lh_₂(_lh_algb_arg1², _lh_algb_arg2²) = [LH_C 0 algb1_lh_₂^615(_lh_algb_arg1², 
//│ 	let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 		LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => [LH_C [LH_P2 _lh_listcomp_fun_ls_h² 0] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun²(_lh_algb_arg2²))]
//│ def algb_lh_₃(_lh_algb_arg1¹, _lh_algb_arg2¹) = [LH_C 0 algb1_lh_₃^380(_lh_algb_arg1¹, 
//│ 	let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ 0] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹(_lh_algb_arg2¹))]
//│ def algb_lh_₄(_lh_algb_arg1⁰, _lh_algb_arg2⁰) = [LH_C 0 algb1_lh_₃^351(_lh_algb_arg1⁰, 
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ 0] _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰(_lh_algb_arg2⁰))]
//│ def algc_lh_₁(_lh_algc_arg1⁰, _lh_algc_arg2⁰, _lh_algc_arg3⁰, _lh_algc_arg4⁰) = case _lh_algc_arg4⁰ of {
//│ 	LH_N  => (fun x⁰ -> x⁰)
//│ 	| _  => case _lh_algc_arg3⁰ of {
//│ 		LH_C _lh_algc_LH_C_0⁰ _lh_algc_LH_C_1⁰ => case _lh_algc_LH_C_1⁰ of {
//│ 			LH_N  => if inList_lh_₁^694(_lh_algc_LH_C_0⁰, _lh_algc_arg4⁰) then (fun t¹² -> [LH_C _lh_algc_LH_C_0⁰ t¹²]) else (fun x¹ -> x¹)
//│ 			| _  => 
//│ 				let m2⁰ = div⁰(_lh_algc_arg1⁰, 2)
//│ 				in let xs1⁰ = take_lh_₃^711(m2⁰, _lh_algc_arg3⁰)
//│ 				in let xs2⁰ = drop_lh_₁^716(m2⁰, _lh_algc_arg3⁰)
//│ 				in let l1⁰ = algb_lh_₂^721(xs1⁰, _lh_algc_arg4⁰)
//│ 				in let l2⁰ = reverse_lh_₄^726(algb_lh_₄^727(reverse_lh_₆^728(xs2⁰), reverse_lh_₁^732(_lh_algc_arg4⁰)))
//│ 				in let k⁰ = findk_lh_₂^737(0, 0, (0 - 1), zip_lh_₂^748(l1⁰, l2⁰))
//│ 				in (fun _lh_funcomp_x⁰ -> algc_lh_₁^754(m2⁰, k⁰, xs1⁰, take_lh_₁^761(k⁰, _lh_algc_arg4⁰), algc_lh_₁^767((_lh_algc_arg1⁰ - m2⁰), (_lh_algc_arg2⁰ - k⁰), xs2⁰, drop_lh_₂^782(k⁰, _lh_algc_arg4⁰), _lh_funcomp_x⁰)))}
//│ 		| _  => 
//│ 			let m2¹ = div⁰(_lh_algc_arg1⁰, 2)
//│ 			in let xs1¹ = take_lh_₂^804(m2¹, _lh_algc_arg3⁰)
//│ 			in let xs2¹ = drop_lh_₄^809(m2¹, _lh_algc_arg3⁰)
//│ 			in let l1¹ = algb_lh_₃^814(xs1¹, _lh_algc_arg4⁰)
//│ 			in let l2¹ = reverse_lh_₂^819(algb_lh_₁^820(reverse_lh_₅^821(xs2¹), reverse_lh_₃^825(_lh_algc_arg4⁰)))
//│ 			in let k¹ = findk_lh_₁^830(0, 0, (0 - 1), zip_lh_₁^841(l1¹, l2¹))
//│ 			in (fun _lh_funcomp_x¹ -> algc_lh_₁^847(m2¹, k¹, xs1¹, take_lh_₄^854(k¹, _lh_algc_arg4⁰), algc_lh_₁^860((_lh_algc_arg1⁰ - m2¹), (_lh_algc_arg2⁰ - k¹), xs2¹, drop_lh_₃^875(k¹, _lh_algc_arg4⁰), _lh_funcomp_x¹)))}}
//│ def drop_lh_₁(_lh_drop_arg1³, _lh_drop_arg2³) = case _lh_drop_arg2³ of {
//│ 	LH_C _lh_drop_LH_C_0³ _lh_drop_LH_C_1³ => if (_lh_drop_arg1³ == 0) then [LH_C _lh_drop_LH_C_0³ _lh_drop_LH_C_1³] else drop_lh_₁^543((_lh_drop_arg1³ - 1), _lh_drop_LH_C_1³)
//│ 	| _  => error⁰}
//│ def drop_lh_₂(_lh_drop_arg1², _lh_drop_arg2²) = case _lh_drop_arg2² of {
//│ 	LH_C _lh_drop_LH_C_0² _lh_drop_LH_C_1² => if (_lh_drop_arg1² == 0) then [LH_C _lh_drop_LH_C_0² _lh_drop_LH_C_1²] else drop_lh_₂^290((_lh_drop_arg1² - 1), _lh_drop_LH_C_1²)
//│ 	| _  => error⁰}
//│ def drop_lh_₃(_lh_drop_arg1¹, _lh_drop_arg2¹) = case _lh_drop_arg2¹ of {
//│ 	LH_C _lh_drop_LH_C_0¹ _lh_drop_LH_C_1¹ => if (_lh_drop_arg1¹ == 0) then [LH_C _lh_drop_LH_C_0¹ _lh_drop_LH_C_1¹] else drop_lh_₃^267((_lh_drop_arg1¹ - 1), _lh_drop_LH_C_1¹)
//│ 	| _  => error⁰}
//│ def drop_lh_₄(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ == 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₄^244((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def enumFromThenTo_lh_₁(a⁷, t¹⁵, b¹) = if (a⁷ <= b¹) then [LH_C a⁷ enumFromThenTo_lh_₁^958(t¹⁵, ((2 * t¹⁵) - a⁷), b¹)] else [LH_N]
//│ def enumFromThenTo_lh_₂(a⁶, t¹⁴, b⁰) = if (a⁶ <= b⁰) then [LH_C a⁶ enumFromThenTo_lh_₂^914(t¹⁴, ((2 * t¹⁴) - a⁶), b⁰)] else [LH_N]
//│ def findk_lh_₁(_lh_findk_arg1¹, _lh_findk_arg2¹, _lh_findk_arg3¹, _lh_findk_arg4¹) = case _lh_findk_arg4¹ of {
//│ 	LH_N  => _lh_findk_arg2¹
//│ 	| LH_C _lh_findk_LH_C_0¹ _lh_findk_LH_C_1¹ => case _lh_findk_LH_C_0¹ of {
//│ 		LH_P2 _lh_findk_LH_P2_0¹ _lh_findk_LH_P2_1¹ => if ((_lh_findk_LH_P2_0¹ + _lh_findk_LH_P2_1¹) >= _lh_findk_arg3¹) then findk_lh_₁^569((_lh_findk_arg1¹ + 1), _lh_findk_arg1¹, (_lh_findk_LH_P2_0¹ + _lh_findk_LH_P2_1¹), _lh_findk_LH_C_1¹) else findk_lh_₁^586((_lh_findk_arg1¹ + 1), _lh_findk_arg2¹, _lh_findk_arg3¹, _lh_findk_LH_C_1¹)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def findk_lh_₂(_lh_findk_arg1⁰, _lh_findk_arg2⁰, _lh_findk_arg3⁰, _lh_findk_arg4⁰) = case _lh_findk_arg4⁰ of {
//│ 	LH_N  => _lh_findk_arg2⁰
//│ 	| LH_C _lh_findk_LH_C_0⁰ _lh_findk_LH_C_1⁰ => case _lh_findk_LH_C_0⁰ of {
//│ 		LH_P2 _lh_findk_LH_P2_0⁰ _lh_findk_LH_P2_1⁰ => if ((_lh_findk_LH_P2_0⁰ + _lh_findk_LH_P2_1⁰) >= _lh_findk_arg3⁰) then findk_lh_₂^495((_lh_findk_arg1⁰ + 1), _lh_findk_arg1⁰, (_lh_findk_LH_P2_0⁰ + _lh_findk_LH_P2_1⁰), _lh_findk_LH_C_1⁰) else findk_lh_₂^512((_lh_findk_arg1⁰ + 1), _lh_findk_arg2⁰, _lh_findk_arg3⁰, _lh_findk_LH_C_1⁰)
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_arg2⁰) = case _lh_inList_arg2⁰ of {
//│ 	LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if (_lh_inList_arg1⁰ == _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁^472(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰)
//│ 	| LH_N  => [False]
//│ 	| _  => error⁰}
//│ def lcssMain_lh_₁(_lh_lcssMain_arg1⁰, _lh_lcssMain_arg2⁰, _lh_lcssMain_arg3⁰, _lh_lcssMain_arg4⁰, _lh_lcssMain_arg5⁰, _lh_lcssMain_arg6⁰) = lcss_lh_₁^979(enumFromThenTo_lh_₁^980(_lh_lcssMain_arg1⁰, _lh_lcssMain_arg2⁰, _lh_lcssMain_arg3⁰), enumFromThenTo_lh_₂^988(_lh_lcssMain_arg4⁰, _lh_lcssMain_arg5⁰, _lh_lcssMain_arg6⁰))
//│ def lcss_lh_₁(_lh_lcss_arg1⁰, _lh_lcss_arg2⁰) = algc_lh_₁^935(length_lh_₂^936(_lh_lcss_arg1⁰), length_lh_₁^940(_lh_lcss_arg2⁰), _lh_lcss_arg1⁰, _lh_lcss_arg2⁰, [LH_N])
//│ def length_lh_₁(ls¹⁸) = case ls¹⁸ of {
//│ 	LH_C h¹² t¹³ => (1 + length_lh_₁^901(t¹³))
//│ 	| LH_N  => 0}
//│ def length_lh_₂(ls¹⁷) = case ls¹⁷ of {
//│ 	LH_C h¹¹ t¹¹ => (1 + length_lh_₂^682(t¹¹))
//│ 	| LH_N  => 0}
//│ def map_lh_₁(f⁰, ls⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lh_₁^61(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def max_lh_₁(_lh_max_arg1⁰, _lh_max_arg2⁰) = if (_lh_max_arg1⁰ > _lh_max_arg2⁰) then _lh_max_arg1⁰ else _lh_max_arg2⁰
//│ def reverse_helper_lh_₁(ls⁶, a⁵) = case ls⁶ of {
//│ 	LH_C h⁶ t⁶ => reverse_helper_lh_₁^201(t⁶, [LH_C h⁶ a⁵])
//│ 	| LH_N  => a⁵}
//│ def reverse_helper_lh_₂(ls⁵, a⁴) = case ls⁵ of {
//│ 	LH_C h⁵ t⁵ => reverse_helper_lh_₂^189(t⁵, [LH_C h⁵ a⁴])
//│ 	| LH_N  => a⁴}
//│ def reverse_helper_lh_₃(ls⁴, a³) = case ls⁴ of {
//│ 	LH_C h⁴ t⁴ => reverse_helper_lh_₃^177(t⁴, [LH_C h⁴ a³])
//│ 	| LH_N  => a³}
//│ def reverse_helper_lh_₄(ls³, a²) = case ls³ of {
//│ 	LH_C h³ t³ => reverse_helper_lh_₄^119(t³, [LH_C h³ a²])
//│ 	| LH_N  => a²}
//│ def reverse_helper_lh_₅(ls², a¹) = case ls² of {
//│ 	LH_C h² t² => reverse_helper_lh_₅^107(t², [LH_C h² a¹])
//│ 	| LH_N  => a¹}
//│ def reverse_helper_lh_₆(ls¹, a⁰) = case ls¹ of {
//│ 	LH_C h¹ t¹ => reverse_helper_lh_₆^72(t¹, [LH_C h¹ a⁰])
//│ 	| LH_N  => a⁰}
//│ def reverse_lh_₁(ls¹⁶) = reverse_helper_lh_₁^672(ls¹⁶, [LH_N])
//│ def reverse_lh_₂(ls¹⁵) = reverse_helper_lh_₂^666(ls¹⁵, [LH_N])
//│ def reverse_lh_₃(ls¹⁴) = reverse_helper_lh_₃^660(ls¹⁴, [LH_N])
//│ def reverse_lh_₄(ls¹³) = reverse_helper_lh_₄^608(ls¹³, [LH_N])
//│ def reverse_lh_₅(ls¹¹) = reverse_helper_lh_₅^419(ls¹¹, [LH_N])
//│ def reverse_lh_₆(ls¹⁰) = reverse_helper_lh_₆^373(ls¹⁰, [LH_N])
//│ def snd_lh_₁(_lh_snd_arg1⁰) = case _lh_snd_arg1⁰ of {
//│ 	LH_P2 _lh_snd_LH_P2_0⁰ _lh_snd_LH_P2_1⁰ => _lh_snd_LH_P2_1⁰
//│ 	| _  => error⁰}
//│ def take_lh_₁(n³, ls¹²) = if (n³ > 0) then case ls¹² of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C h¹⁰ take_lh_₁^432((n³ - 1), t¹⁰)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lh_₂(n², ls⁹) = if (n² > 0) then case ls⁹ of {
//│ 	LH_C h⁹ t⁹ => [LH_C h⁹ take_lh_₂^334((n² - 1), t⁹)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lh_₃(n¹, ls⁸) = if (n¹ > 0) then case ls⁸ of {
//│ 	LH_C h⁸ t⁸ => [LH_C h⁸ take_lh_₃^311((n¹ - 1), t⁸)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lh_₄(n⁰, ls⁷) = if (n⁰ > 0) then case ls⁷ of {
//│ 	LH_C h⁷ t⁷ => [LH_C h⁷ take_lh_₄^219((n⁰ - 1), t⁷)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testLCSS_nofib_lh_₁(_lh_testLCSS_nofib_arg1⁰) = lcssMain_lh_₁^1002(1, 2, 60, 30, 31, 90)
//│ def zip_lh_₁(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C hx¹ tx¹ => case ys¹ of {
//│ 		LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip_lh_₁^453(tx¹, ty¹)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zip_lh_₂(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C hx⁰ tx⁰ => case ys⁰ of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh_₂^407(tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec enumFromThenTo_lh__d2 a_6 t_1_4 b_0 =
//│ 		  (if (a_6 <= b_0) then
//│ 		    (`LH_C(a_6, (((enumFromThenTo_lh__d2 t_1_4) ((2 * t_1_4) - a_6)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec max_lh__d1 _lh_max_arg1_0 _lh_max_arg2_0 =
//│ 		  (if (_lh_max_arg1_0 > _lh_max_arg2_0) then
//│ 		    _lh_max_arg1_0
//│ 		  else
//│ 		    _lh_max_arg2_0);;
//│ 		let rec algb2_lh__d1 _lh_algb2_arg1_0 _lh_algb2_arg2_0 _lh_algb2_arg3_0 _lh_algb2_arg4_0 =
//│ 		  (match _lh_algb2_arg4_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_algb2_LH_C_0_0, _lh_algb2_LH_C_1_0) -> 
//│ 		      (match _lh_algb2_LH_C_0_0 with
//│ 		        | `LH_P2(_lh_algb2_LH_P2_0_0, _lh_algb2_LH_P2_1_0) -> 
//│ 		          (let rec kjcurr_0 = (if (_lh_algb2_arg1_0 = _lh_algb2_LH_P2_0_0) then
//│ 		            (_lh_algb2_arg2_0 + 1)
//│ 		          else
//│ 		            ((max_lh__d1 _lh_algb2_arg3_0) _lh_algb2_LH_P2_1_0)) in
//│ 		            (`LH_C((`LH_P2(_lh_algb2_LH_P2_0_0, kjcurr_0)), ((((algb2_lh__d1 _lh_algb2_arg1_0) _lh_algb2_LH_P2_1_0) kjcurr_0) _lh_algb2_LH_C_1_0))))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec map_lh__d1 f_0 ls_0 =
//│ 		  (match ls_0 with
//│ 		    | `LH_C(h_0, t_0) -> 
//│ 		      (`LH_C((f_0 h_0), ((map_lh__d1 f_0) t_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec snd_lh__d1 _lh_snd_arg1_0 =
//│ 		  (match _lh_snd_arg1_0 with
//│ 		    | `LH_P2(_lh_snd_LH_P2_0_0, _lh_snd_LH_P2_1_0) -> 
//│ 		      _lh_snd_LH_P2_1_0
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec algb1_lh__d3 _lh_algb1_arg1_0 _lh_algb1_arg2_0 =
//│ 		  (match _lh_algb1_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      ((map_lh__d1 snd_lh__d1) _lh_algb1_arg2_0)
//│ 		    | `LH_C(_lh_algb1_LH_C_0_0, _lh_algb1_LH_C_1_0) -> 
//│ 		      ((algb1_lh__d3 _lh_algb1_LH_C_1_0) ((((algb2_lh__d1 _lh_algb1_LH_C_0_0) 0) 0) _lh_algb1_arg2_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec algb_lh__d3 _lh_algb_arg1_1 _lh_algb_arg2_1 =
//│ 		  (`LH_C(0, ((algb1_lh__d3 _lh_algb_arg1_1) (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		    (match _lh_listcomp_fun_para_1 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		        (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_1, 0)), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_1 _lh_algb_arg2_1)))));;
//│ 		let rec drop_lh__d4 _lh_drop_arg1_0 _lh_drop_arg2_0 =
//│ 		  (match _lh_drop_arg2_0 with
//│ 		    | `LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0) -> 
//│ 		      (if (_lh_drop_arg1_0 = 0) then
//│ 		        (`LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0))
//│ 		      else
//│ 		        ((drop_lh__d4 (_lh_drop_arg1_0 - 1)) _lh_drop_LH_C_1_0))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec inList_lh__d1 _lh_inList_arg1_0 _lh_inList_arg2_0 =
//│ 		  (match _lh_inList_arg2_0 with
//│ 		    | `LH_C(_lh_inList_LH_C_0_0, _lh_inList_LH_C_1_0) -> 
//│ 		      (if (_lh_inList_arg1_0 = _lh_inList_LH_C_0_0) then
//│ 		        true
//│ 		      else
//│ 		        ((inList_lh__d1 _lh_inList_arg1_0) _lh_inList_LH_C_1_0))
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec take_lh__d2 n_2 ls_9 =
//│ 		  (if (n_2 > 0) then
//│ 		    (match ls_9 with
//│ 		      | `LH_C(h_9, t_9) -> 
//│ 		        (`LH_C(h_9, ((take_lh__d2 (n_2 - 1)) t_9)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec findk_lh__d2 _lh_findk_arg1_0 _lh_findk_arg2_0 _lh_findk_arg3_0 _lh_findk_arg4_0 =
//│ 		  (match _lh_findk_arg4_0 with
//│ 		    | `LH_N -> 
//│ 		      _lh_findk_arg2_0
//│ 		    | `LH_C(_lh_findk_LH_C_0_0, _lh_findk_LH_C_1_0) -> 
//│ 		      (match _lh_findk_LH_C_0_0 with
//│ 		        | `LH_P2(_lh_findk_LH_P2_0_0, _lh_findk_LH_P2_1_0) -> 
//│ 		          (if ((_lh_findk_LH_P2_0_0 + _lh_findk_LH_P2_1_0) >= _lh_findk_arg3_0) then
//│ 		            ((((findk_lh__d2 (_lh_findk_arg1_0 + 1)) _lh_findk_arg1_0) (_lh_findk_LH_P2_0_0 + _lh_findk_LH_P2_1_0)) _lh_findk_LH_C_1_0)
//│ 		          else
//│ 		            ((((findk_lh__d2 (_lh_findk_arg1_0 + 1)) _lh_findk_arg2_0) _lh_findk_arg3_0) _lh_findk_LH_C_1_0))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec take_lh__d3 n_1 ls_8 =
//│ 		  (if (n_1 > 0) then
//│ 		    (match ls_8 with
//│ 		      | `LH_C(h_8, t_8) -> 
//│ 		        (`LH_C(h_8, ((take_lh__d3 (n_1 - 1)) t_8)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec drop_lh__d1 _lh_drop_arg1_3 _lh_drop_arg2_3 =
//│ 		  (match _lh_drop_arg2_3 with
//│ 		    | `LH_C(_lh_drop_LH_C_0_3, _lh_drop_LH_C_1_3) -> 
//│ 		      (if (_lh_drop_arg1_3 = 0) then
//│ 		        (`LH_C(_lh_drop_LH_C_0_3, _lh_drop_LH_C_1_3))
//│ 		      else
//│ 		        ((drop_lh__d1 (_lh_drop_arg1_3 - 1)) _lh_drop_LH_C_1_3))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec reverse_helper_lh__d1 ls_6 a_5 =
//│ 		  (match ls_6 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      ((reverse_helper_lh__d1 t_6) (`LH_C(h_6, a_5)))
//│ 		    | `LH_N -> 
//│ 		      a_5);;
//│ 		let rec reverse_lh__d1 ls_1_6 =
//│ 		  ((reverse_helper_lh__d1 ls_1_6) (`LH_N));;
//│ 		let rec reverse_helper_lh__d2 ls_5 a_4 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      ((reverse_helper_lh__d2 t_5) (`LH_C(h_5, a_4)))
//│ 		    | `LH_N -> 
//│ 		      a_4);;
//│ 		let rec reverse_lh__d2 ls_1_5 =
//│ 		  ((reverse_helper_lh__d2 ls_1_5) (`LH_N));;
//│ 		let rec reverse_helper_lh__d5 ls_2 a_1 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      ((reverse_helper_lh__d5 t_2) (`LH_C(h_2, a_1)))
//│ 		    | `LH_N -> 
//│ 		      a_1);;
//│ 		let rec reverse_lh__d5 ls_1_1 =
//│ 		  ((reverse_helper_lh__d5 ls_1_1) (`LH_N));;
//│ 		let rec reverse_helper_lh__d3 ls_4 a_3 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      ((reverse_helper_lh__d3 t_4) (`LH_C(h_4, a_3)))
//│ 		    | `LH_N -> 
//│ 		      a_3);;
//│ 		let rec reverse_lh__d3 ls_1_4 =
//│ 		  ((reverse_helper_lh__d3 ls_1_4) (`LH_N));;
//│ 		let rec take_lh__d4 n_0 ls_7 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match ls_7 with
//│ 		      | `LH_C(h_7, t_7) -> 
//│ 		        (`LH_C(h_7, ((take_lh__d4 (n_0 - 1)) t_7)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec drop_lh__d2 _lh_drop_arg1_2 _lh_drop_arg2_2 =
//│ 		  (match _lh_drop_arg2_2 with
//│ 		    | `LH_C(_lh_drop_LH_C_0_2, _lh_drop_LH_C_1_2) -> 
//│ 		      (if (_lh_drop_arg1_2 = 0) then
//│ 		        (`LH_C(_lh_drop_LH_C_0_2, _lh_drop_LH_C_1_2))
//│ 		      else
//│ 		        ((drop_lh__d2 (_lh_drop_arg1_2 - 1)) _lh_drop_LH_C_1_2))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec zip_lh__d1 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(hx_1, tx_1) -> 
//│ 		      (match ys_1 with
//│ 		        | `LH_C(hy_1, ty_1) -> 
//│ 		          (`LH_C((`LH_P2(hx_1, hy_1)), ((zip_lh__d1 tx_1) ty_1)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec reverse_helper_lh__d6 ls_1 a_0 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      ((reverse_helper_lh__d6 t_1) (`LH_C(h_1, a_0)))
//│ 		    | `LH_N -> 
//│ 		      a_0);;
//│ 		let rec reverse_lh__d6 ls_1_0 =
//│ 		  ((reverse_helper_lh__d6 ls_1_0) (`LH_N));;
//│ 		let rec algb1_lh__d1 _lh_algb1_arg1_2 _lh_algb1_arg2_2 =
//│ 		  (match _lh_algb1_arg1_2 with
//│ 		    | `LH_N -> 
//│ 		      ((map_lh__d1 snd_lh__d1) _lh_algb1_arg2_2)
//│ 		    | `LH_C(_lh_algb1_LH_C_0_2, _lh_algb1_LH_C_1_2) -> 
//│ 		      ((algb1_lh__d1 _lh_algb1_LH_C_1_2) ((((algb2_lh__d1 _lh_algb1_LH_C_0_2) 0) 0) _lh_algb1_arg2_2))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec algb_lh__d1 _lh_algb_arg1_3 _lh_algb_arg2_3 =
//│ 		  (`LH_C(0, ((algb1_lh__d1 _lh_algb_arg1_3) (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		    (match _lh_listcomp_fun_para_3 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_3, _lh_listcomp_fun_ls_t_3) -> 
//│ 		        (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_3, 0)), (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_3 _lh_algb_arg2_3)))));;
//│ 		let rec algb_lh__d4 _lh_algb_arg1_0 _lh_algb_arg2_0 =
//│ 		  (`LH_C(0, ((algb1_lh__d3 _lh_algb_arg1_0) (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		    (match _lh_listcomp_fun_para_0 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		        (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_0, 0)), (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_0 _lh_algb_arg2_0)))));;
//│ 		let rec drop_lh__d3 _lh_drop_arg1_1 _lh_drop_arg2_1 =
//│ 		  (match _lh_drop_arg2_1 with
//│ 		    | `LH_C(_lh_drop_LH_C_0_1, _lh_drop_LH_C_1_1) -> 
//│ 		      (if (_lh_drop_arg1_1 = 0) then
//│ 		        (`LH_C(_lh_drop_LH_C_0_1, _lh_drop_LH_C_1_1))
//│ 		      else
//│ 		        ((drop_lh__d3 (_lh_drop_arg1_1 - 1)) _lh_drop_LH_C_1_1))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec take_lh__d1 n_3 ls_1_2 =
//│ 		  (if (n_3 > 0) then
//│ 		    (match ls_1_2 with
//│ 		      | `LH_C(h_1_0, t_1_0) -> 
//│ 		        (`LH_C(h_1_0, ((take_lh__d1 (n_3 - 1)) t_1_0)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec findk_lh__d1 _lh_findk_arg1_1 _lh_findk_arg2_1 _lh_findk_arg3_1 _lh_findk_arg4_1 =
//│ 		  (match _lh_findk_arg4_1 with
//│ 		    | `LH_N -> 
//│ 		      _lh_findk_arg2_1
//│ 		    | `LH_C(_lh_findk_LH_C_0_1, _lh_findk_LH_C_1_1) -> 
//│ 		      (match _lh_findk_LH_C_0_1 with
//│ 		        | `LH_P2(_lh_findk_LH_P2_0_1, _lh_findk_LH_P2_1_1) -> 
//│ 		          (if ((_lh_findk_LH_P2_0_1 + _lh_findk_LH_P2_1_1) >= _lh_findk_arg3_1) then
//│ 		            ((((findk_lh__d1 (_lh_findk_arg1_1 + 1)) _lh_findk_arg1_1) (_lh_findk_LH_P2_0_1 + _lh_findk_LH_P2_1_1)) _lh_findk_LH_C_1_1)
//│ 		          else
//│ 		            ((((findk_lh__d1 (_lh_findk_arg1_1 + 1)) _lh_findk_arg2_1) _lh_findk_arg3_1) _lh_findk_LH_C_1_1))
//│ 		        | _ -> 
//│ 		          (failwith "error"))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec zip_lh__d2 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(hx_0, tx_0) -> 
//│ 		      (match ys_0 with
//│ 		        | `LH_C(hy_0, ty_0) -> 
//│ 		          (`LH_C((`LH_P2(hx_0, hy_0)), ((zip_lh__d2 tx_0) ty_0)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec reverse_helper_lh__d4 ls_3 a_2 =
//│ 		  (match ls_3 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      ((reverse_helper_lh__d4 t_3) (`LH_C(h_3, a_2)))
//│ 		    | `LH_N -> 
//│ 		      a_2);;
//│ 		let rec reverse_lh__d4 ls_1_3 =
//│ 		  ((reverse_helper_lh__d4 ls_1_3) (`LH_N));;
//│ 		let rec algb1_lh__d2 _lh_algb1_arg1_1 _lh_algb1_arg2_1 =
//│ 		  (match _lh_algb1_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      ((map_lh__d1 snd_lh__d1) _lh_algb1_arg2_1)
//│ 		    | `LH_C(_lh_algb1_LH_C_0_1, _lh_algb1_LH_C_1_1) -> 
//│ 		      ((algb1_lh__d2 _lh_algb1_LH_C_1_1) ((((algb2_lh__d1 _lh_algb1_LH_C_0_1) 0) 0) _lh_algb1_arg2_1))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec algb_lh__d2 _lh_algb_arg1_2 _lh_algb_arg2_2 =
//│ 		  (`LH_C(0, ((algb1_lh__d2 _lh_algb_arg1_2) (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		    (match _lh_listcomp_fun_para_2 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		        (`LH_C((`LH_P2(_lh_listcomp_fun_ls_h_2, 0)), (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_2 _lh_algb_arg2_2)))));;
//│ 		let rec algc_lh__d1 _lh_algc_arg1_0 _lh_algc_arg2_0 _lh_algc_arg3_0 _lh_algc_arg4_0 =
//│ 		  (match _lh_algc_arg4_0 with
//│ 		    | `LH_N -> 
//│ 		      (fun x_0 -> 
//│ 		        x_0)
//│ 		    | _ -> 
//│ 		      (match _lh_algc_arg3_0 with
//│ 		        | `LH_C(_lh_algc_LH_C_0_0, _lh_algc_LH_C_1_0) -> 
//│ 		          (match _lh_algc_LH_C_1_0 with
//│ 		            | `LH_N -> 
//│ 		              (if ((inList_lh__d1 _lh_algc_LH_C_0_0) _lh_algc_arg4_0) then
//│ 		                (fun t_1_2 -> 
//│ 		                  (`LH_C(_lh_algc_LH_C_0_0, t_1_2)))
//│ 		              else
//│ 		                (fun x_1 -> 
//│ 		                  x_1))
//│ 		            | _ -> 
//│ 		              (let rec m2_0 = (_lh_algc_arg1_0 / 2) in
//│ 		                (let rec xs1_0 = ((take_lh__d3 m2_0) _lh_algc_arg3_0) in
//│ 		                  (let rec xs2_0 = ((drop_lh__d1 m2_0) _lh_algc_arg3_0) in
//│ 		                    (let rec l1_0 = ((algb_lh__d2 xs1_0) _lh_algc_arg4_0) in
//│ 		                      (let rec l2_0 = (reverse_lh__d4 ((algb_lh__d4 (reverse_lh__d6 xs2_0)) (reverse_lh__d1 _lh_algc_arg4_0))) in
//│ 		                        (let rec k_0 = ((((findk_lh__d2 0) 0) (0 - 1)) ((zip_lh__d2 l1_0) l2_0)) in
//│ 		                          (fun _lh_funcomp_x_0 -> 
//│ 		                            (((((algc_lh__d1 m2_0) k_0) xs1_0) ((take_lh__d1 k_0) _lh_algc_arg4_0)) (((((algc_lh__d1 (_lh_algc_arg1_0 - m2_0)) (_lh_algc_arg2_0 - k_0)) xs2_0) ((drop_lh__d2 k_0) _lh_algc_arg4_0)) _lh_funcomp_x_0))))))))))
//│ 		        | _ -> 
//│ 		          (let rec m2_1 = (_lh_algc_arg1_0 / 2) in
//│ 		            (let rec xs1_1 = ((take_lh__d2 m2_1) _lh_algc_arg3_0) in
//│ 		              (let rec xs2_1 = ((drop_lh__d4 m2_1) _lh_algc_arg3_0) in
//│ 		                (let rec l1_1 = ((algb_lh__d3 xs1_1) _lh_algc_arg4_0) in
//│ 		                  (let rec l2_1 = (reverse_lh__d2 ((algb_lh__d1 (reverse_lh__d5 xs2_1)) (reverse_lh__d3 _lh_algc_arg4_0))) in
//│ 		                    (let rec k_1 = ((((findk_lh__d1 0) 0) (0 - 1)) ((zip_lh__d1 l1_1) l2_1)) in
//│ 		                      (fun _lh_funcomp_x_1 -> 
//│ 		                        (((((algc_lh__d1 m2_1) k_1) xs1_1) ((take_lh__d4 k_1) _lh_algc_arg4_0)) (((((algc_lh__d1 (_lh_algc_arg1_0 - m2_1)) (_lh_algc_arg2_0 - k_1)) xs2_1) ((drop_lh__d3 k_1) _lh_algc_arg4_0)) _lh_funcomp_x_1)))))))))));;
//│ 		let rec length_lh__d1 ls_1_8 =
//│ 		  (match ls_1_8 with
//│ 		    | `LH_C(h_1_2, t_1_3) -> 
//│ 		      (1 + (length_lh__d1 t_1_3))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec length_lh__d2 ls_1_7 =
//│ 		  (match ls_1_7 with
//│ 		    | `LH_C(h_1_1, t_1_1) -> 
//│ 		      (1 + (length_lh__d2 t_1_1))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec lcss_lh__d1 _lh_lcss_arg1_0 _lh_lcss_arg2_0 =
//│ 		  (((((algc_lh__d1 (length_lh__d2 _lh_lcss_arg1_0)) (length_lh__d1 _lh_lcss_arg2_0)) _lh_lcss_arg1_0) _lh_lcss_arg2_0) (`LH_N));;
//│ 		let rec enumFromThenTo_lh__d1 a_7 t_1_5 b_1 =
//│ 		  (if (a_7 <= b_1) then
//│ 		    (`LH_C(a_7, (((enumFromThenTo_lh__d1 t_1_5) ((2 * t_1_5) - a_7)) b_1)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec lcssMain_lh__d1 _lh_lcssMain_arg1_0 _lh_lcssMain_arg2_0 _lh_lcssMain_arg3_0 _lh_lcssMain_arg4_0 _lh_lcssMain_arg5_0 _lh_lcssMain_arg6_0 =
//│ 		  ((lcss_lh__d1 (((enumFromThenTo_lh__d1 _lh_lcssMain_arg1_0) _lh_lcssMain_arg2_0) _lh_lcssMain_arg3_0)) (((enumFromThenTo_lh__d2 _lh_lcssMain_arg4_0) _lh_lcssMain_arg5_0) _lh_lcssMain_arg6_0));;
//│ 		let rec testLCSS_nofib_lh__d1 _lh_testLCSS_nofib_arg1_0 =
//│ 		  ((((((lcssMain_lh__d1 1) 2) 60) 30) 31) 90);;
//│ 		(testLCSS_nofib_lh__d1 0)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< After Expansion <<<<<<<<<<
//│ 
//│ >>>>>>> fusion strategies >>>>>>>
//│ [LH_C h² a¹]: 112 --->
//│ 	case _lh_algb1_arg1² of {LH_N  => map_lh_₁(snd_lh_₁, _lh_algb1_arg2²) | LH_C _lh_algb1_LH_C_0² _lh_algb1_LH_C_1² => algb1_lh_₁(_lh_algb1_LH_C_1², algb2_lh_₁(_lh_algb1_LH_C_0², 0, 0, _lh_algb1_arg2²)) | _  => error⁰}: 173
//│ [LH_C h³ a²]: 124 --->
//│ 	case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh_₂(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 414
//│ [LH_C h⁴ a³]: 182 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ 0] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => [LH_N]}: 650
//│ [LH_C h⁵ a⁴]: 194 --->
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip_lh_₁(tx¹, ty¹)] | LH_N  => [LH_N]}: 460
//│ [LH_C h⁶ a⁵]: 206 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ 0] _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | LH_N  => [LH_N]}: 363
//│ [LH_P2 hx⁰ hy⁰]: 406 --->
//│ 	case _lh_findk_LH_C_0⁰ of {LH_P2 _lh_findk_LH_P2_0⁰ _lh_findk_LH_P2_1⁰ => if ((_lh_findk_LH_P2_0⁰ + _lh_findk_LH_P2_1⁰) >= _lh_findk_arg3⁰) then findk_lh_₂((_lh_findk_arg1⁰ + 1), _lh_findk_arg1⁰, (_lh_findk_LH_P2_0⁰ + _lh_findk_LH_P2_1⁰), _lh_findk_LH_C_1⁰) else findk_lh_₂((_lh_findk_arg1⁰ + 1), _lh_findk_arg2⁰, _lh_findk_arg3⁰, _lh_findk_LH_C_1⁰) | _  => error⁰}: 527
//│ [LH_C [LH_P2 hx⁰ hy⁰] zip_lh_₂(tx⁰, ty⁰)]: 412 --->
//│ 	case _lh_findk_arg4⁰ of {LH_N  => _lh_findk_arg2⁰ | LH_C _lh_findk_LH_C_0⁰ _lh_findk_LH_C_1⁰ => case _lh_findk_LH_C_0⁰ of {LH_P2 _lh_findk_LH_P2_0⁰ _lh_findk_LH_P2_1⁰ => if ((_lh_findk_LH_P2_0⁰ + _lh_findk_LH_P2_1⁰) >= _lh_findk_arg3⁰) then findk_lh_₂((_lh_findk_arg1⁰ + 1), _lh_findk_arg1⁰, (_lh_findk_LH_P2_0⁰ + _lh_findk_LH_P2_1⁰), _lh_findk_LH_C_1⁰) else findk_lh_₂((_lh_findk_arg1⁰ + 1), _lh_findk_arg2⁰, _lh_findk_arg3⁰, _lh_findk_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 529
//│ [LH_N]: 413 --->
//│ 	case _lh_findk_arg4⁰ of {LH_N  => _lh_findk_arg2⁰ | LH_C _lh_findk_LH_C_0⁰ _lh_findk_LH_C_1⁰ => case _lh_findk_LH_C_0⁰ of {LH_P2 _lh_findk_LH_P2_0⁰ _lh_findk_LH_P2_1⁰ => if ((_lh_findk_LH_P2_0⁰ + _lh_findk_LH_P2_1⁰) >= _lh_findk_arg3⁰) then findk_lh_₂((_lh_findk_arg1⁰ + 1), _lh_findk_arg1⁰, (_lh_findk_LH_P2_0⁰ + _lh_findk_LH_P2_1⁰), _lh_findk_LH_C_1⁰) else findk_lh_₂((_lh_findk_arg1⁰ + 1), _lh_findk_arg2⁰, _lh_findk_arg3⁰, _lh_findk_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 529
//│ [LH_N]: 415 --->
//│ 	case _lh_findk_arg4⁰ of {LH_N  => _lh_findk_arg2⁰ | LH_C _lh_findk_LH_C_0⁰ _lh_findk_LH_C_1⁰ => case _lh_findk_LH_C_0⁰ of {LH_P2 _lh_findk_LH_P2_0⁰ _lh_findk_LH_P2_1⁰ => if ((_lh_findk_LH_P2_0⁰ + _lh_findk_LH_P2_1⁰) >= _lh_findk_arg3⁰) then findk_lh_₂((_lh_findk_arg1⁰ + 1), _lh_findk_arg1⁰, (_lh_findk_LH_P2_0⁰ + _lh_findk_LH_P2_1⁰), _lh_findk_LH_C_1⁰) else findk_lh_₂((_lh_findk_arg1⁰ + 1), _lh_findk_arg2⁰, _lh_findk_arg3⁰, _lh_findk_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 529
//│ [LH_N]: 422 --->
//│ 	case _lh_algb1_arg1² of {LH_N  => map_lh_₁(snd_lh_₁, _lh_algb1_arg2²) | LH_C _lh_algb1_LH_C_0² _lh_algb1_LH_C_1² => algb1_lh_₁(_lh_algb1_LH_C_1², algb2_lh_₁(_lh_algb1_LH_C_0², 0, 0, _lh_algb1_arg2²)) | _  => error⁰}: 173
//│ [LH_P2 hx¹ hy¹]: 452 --->
//│ 	case _lh_findk_LH_C_0¹ of {LH_P2 _lh_findk_LH_P2_0¹ _lh_findk_LH_P2_1¹ => if ((_lh_findk_LH_P2_0¹ + _lh_findk_LH_P2_1¹) >= _lh_findk_arg3¹) then findk_lh_₁((_lh_findk_arg1¹ + 1), _lh_findk_arg1¹, (_lh_findk_LH_P2_0¹ + _lh_findk_LH_P2_1¹), _lh_findk_LH_C_1¹) else findk_lh_₁((_lh_findk_arg1¹ + 1), _lh_findk_arg2¹, _lh_findk_arg3¹, _lh_findk_LH_C_1¹) | _  => error⁰}: 601
//│ [LH_C [LH_P2 hx¹ hy¹] zip_lh_₁(tx¹, ty¹)]: 458 --->
//│ 	case _lh_findk_arg4¹ of {LH_N  => _lh_findk_arg2¹ | LH_C _lh_findk_LH_C_0¹ _lh_findk_LH_C_1¹ => case _lh_findk_LH_C_0¹ of {LH_P2 _lh_findk_LH_P2_0¹ _lh_findk_LH_P2_1¹ => if ((_lh_findk_LH_P2_0¹ + _lh_findk_LH_P2_1¹) >= _lh_findk_arg3¹) then findk_lh_₁((_lh_findk_arg1¹ + 1), _lh_findk_arg1¹, (_lh_findk_LH_P2_0¹ + _lh_findk_LH_P2_1¹), _lh_findk_LH_C_1¹) else findk_lh_₁((_lh_findk_arg1¹ + 1), _lh_findk_arg2¹, _lh_findk_arg3¹, _lh_findk_LH_C_1¹) | _  => error⁰} | _  => error⁰}: 603
//│ [LH_N]: 459 --->
//│ 	case _lh_findk_arg4¹ of {LH_N  => _lh_findk_arg2¹ | LH_C _lh_findk_LH_C_0¹ _lh_findk_LH_C_1¹ => case _lh_findk_LH_C_0¹ of {LH_P2 _lh_findk_LH_P2_0¹ _lh_findk_LH_P2_1¹ => if ((_lh_findk_LH_P2_0¹ + _lh_findk_LH_P2_1¹) >= _lh_findk_arg3¹) then findk_lh_₁((_lh_findk_arg1¹ + 1), _lh_findk_arg1¹, (_lh_findk_LH_P2_0¹ + _lh_findk_LH_P2_1¹), _lh_findk_LH_C_1¹) else findk_lh_₁((_lh_findk_arg1¹ + 1), _lh_findk_arg2¹, _lh_findk_arg3¹, _lh_findk_LH_C_1¹) | _  => error⁰} | _  => error⁰}: 603
//│ [LH_N]: 461 --->
//│ 	case _lh_findk_arg4¹ of {LH_N  => _lh_findk_arg2¹ | LH_C _lh_findk_LH_C_0¹ _lh_findk_LH_C_1¹ => case _lh_findk_LH_C_0¹ of {LH_P2 _lh_findk_LH_P2_0¹ _lh_findk_LH_P2_1¹ => if ((_lh_findk_LH_P2_0¹ + _lh_findk_LH_P2_1¹) >= _lh_findk_arg3¹) then findk_lh_₁((_lh_findk_arg1¹ + 1), _lh_findk_arg1¹, (_lh_findk_LH_P2_0¹ + _lh_findk_LH_P2_1¹), _lh_findk_LH_C_1¹) else findk_lh_₁((_lh_findk_arg1¹ + 1), _lh_findk_arg2¹, _lh_findk_arg3¹, _lh_findk_LH_C_1¹) | _  => error⁰} | _  => error⁰}: 603
//│ [LH_N]: 611 --->
//│ 	case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh_₂(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 414
//│ [LH_N]: 663 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ 0] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => [LH_N]}: 650
//│ [LH_N]: 669 --->
//│ 	case ys¹ of {LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip_lh_₁(tx¹, ty¹)] | LH_N  => [LH_N]}: 460
//│ [LH_N]: 675 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ 0] _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | LH_N  => [LH_N]}: 363
//│ ------------------
//│ case _lh_algb1_arg1² of {LH_N  => map_lh_₁(snd_lh_₁, _lh_algb1_arg2²) | LH_C _lh_algb1_LH_C_0² _lh_algb1_LH_C_1² => algb1_lh_₁(_lh_algb1_LH_C_1², algb2_lh_₁(_lh_algb1_LH_C_0², 0, 0, _lh_algb1_arg2²)) | _  => error⁰}: 173 --->
//│ 	[LH_C h² a¹]: 112
//│ 	[LH_N]: 422
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ 0] _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)] | LH_N  => [LH_N]}: 363 --->
//│ 	[LH_C h⁶ a⁵]: 206
//│ 	[LH_N]: 675
//│ case ys⁰ of {LH_C hy⁰ ty⁰ => [LH_C [LH_P2 hx⁰ hy⁰] zip_lh_₂(tx⁰, ty⁰)] | LH_N  => [LH_N]}: 414 --->
//│ 	[LH_C h³ a²]: 124
//│ 	[LH_N]: 611
//│ case ys¹ of {LH_C hy¹ ty¹ => [LH_C [LH_P2 hx¹ hy¹] zip_lh_₁(tx¹, ty¹)] | LH_N  => [LH_N]}: 460 --->
//│ 	[LH_C h⁵ a⁴]: 194
//│ 	[LH_N]: 669
//│ case _lh_findk_LH_C_0⁰ of {LH_P2 _lh_findk_LH_P2_0⁰ _lh_findk_LH_P2_1⁰ => if ((_lh_findk_LH_P2_0⁰ + _lh_findk_LH_P2_1⁰) >= _lh_findk_arg3⁰) then findk_lh_₂((_lh_findk_arg1⁰ + 1), _lh_findk_arg1⁰, (_lh_findk_LH_P2_0⁰ + _lh_findk_LH_P2_1⁰), _lh_findk_LH_C_1⁰) else findk_lh_₂((_lh_findk_arg1⁰ + 1), _lh_findk_arg2⁰, _lh_findk_arg3⁰, _lh_findk_LH_C_1⁰) | _  => error⁰}: 527 --->
//│ 	[LH_P2 hx⁰ hy⁰]: 406
//│ case _lh_findk_arg4⁰ of {LH_N  => _lh_findk_arg2⁰ | LH_C _lh_findk_LH_C_0⁰ _lh_findk_LH_C_1⁰ => case _lh_findk_LH_C_0⁰ of {LH_P2 _lh_findk_LH_P2_0⁰ _lh_findk_LH_P2_1⁰ => if ((_lh_findk_LH_P2_0⁰ + _lh_findk_LH_P2_1⁰) >= _lh_findk_arg3⁰) then findk_lh_₂((_lh_findk_arg1⁰ + 1), _lh_findk_arg1⁰, (_lh_findk_LH_P2_0⁰ + _lh_findk_LH_P2_1⁰), _lh_findk_LH_C_1⁰) else findk_lh_₂((_lh_findk_arg1⁰ + 1), _lh_findk_arg2⁰, _lh_findk_arg3⁰, _lh_findk_LH_C_1⁰) | _  => error⁰} | _  => error⁰}: 529 --->
//│ 	[LH_C [LH_P2 hx⁰ hy⁰] zip_lh_₂(tx⁰, ty⁰)]: 412
//│ 	[LH_N]: 413
//│ 	[LH_N]: 415
//│ case _lh_findk_LH_C_0¹ of {LH_P2 _lh_findk_LH_P2_0¹ _lh_findk_LH_P2_1¹ => if ((_lh_findk_LH_P2_0¹ + _lh_findk_LH_P2_1¹) >= _lh_findk_arg3¹) then findk_lh_₁((_lh_findk_arg1¹ + 1), _lh_findk_arg1¹, (_lh_findk_LH_P2_0¹ + _lh_findk_LH_P2_1¹), _lh_findk_LH_C_1¹) else findk_lh_₁((_lh_findk_arg1¹ + 1), _lh_findk_arg2¹, _lh_findk_arg3¹, _lh_findk_LH_C_1¹) | _  => error⁰}: 601 --->
//│ 	[LH_P2 hx¹ hy¹]: 452
//│ case _lh_findk_arg4¹ of {LH_N  => _lh_findk_arg2¹ | LH_C _lh_findk_LH_C_0¹ _lh_findk_LH_C_1¹ => case _lh_findk_LH_C_0¹ of {LH_P2 _lh_findk_LH_P2_0¹ _lh_findk_LH_P2_1¹ => if ((_lh_findk_LH_P2_0¹ + _lh_findk_LH_P2_1¹) >= _lh_findk_arg3¹) then findk_lh_₁((_lh_findk_arg1¹ + 1), _lh_findk_arg1¹, (_lh_findk_LH_P2_0¹ + _lh_findk_LH_P2_1¹), _lh_findk_LH_C_1¹) else findk_lh_₁((_lh_findk_arg1¹ + 1), _lh_findk_arg2¹, _lh_findk_arg3¹, _lh_findk_LH_C_1¹) | _  => error⁰} | _  => error⁰}: 603 --->
//│ 	[LH_C [LH_P2 hx¹ hy¹] zip_lh_₁(tx¹, ty¹)]: 458
//│ 	[LH_N]: 459
//│ 	[LH_N]: 461
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ 0] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)] | LH_N  => [LH_N]}: 650 --->
//│ 	[LH_C h⁴ a³]: 182
//│ 	[LH_N]: 663
//│ <<<<<<< fusion strategies <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testLCSS_nofib_lh_₁(primId⁰(0))
//│ def algb1_lh_₁(_lh_algb1_arg1², _lh_algb1_arg2⁴) = _lh_algb1_arg1²(_lh_algb1_arg2⁴)
//│ def algb1_lh_₂(_lh_algb1_arg1⁰, _lh_algb1_arg2¹) = case _lh_algb1_arg1⁰ of {
//│ 	LH_N  => map_lh_₁(snd_lh_₁, _lh_algb1_arg2¹)
//│ 	| LH_C _lh_algb1_LH_C_0¹ _lh_algb1_LH_C_1¹ => algb1_lh_₂(_lh_algb1_LH_C_1¹, algb2_lh_₁(_lh_algb1_LH_C_0¹, 0, 0, _lh_algb1_arg2¹))
//│ 	| _  => error⁰}
//│ def algb1_lh_₃(_lh_algb1_arg1¹, _lh_algb1_arg2³) = case _lh_algb1_arg1¹ of {
//│ 	LH_N  => map_lh_₁(snd_lh_₁, _lh_algb1_arg2³)
//│ 	| LH_C _lh_algb1_LH_C_0² _lh_algb1_LH_C_1² => algb1_lh_₃(_lh_algb1_LH_C_1², algb2_lh_₁(_lh_algb1_LH_C_0², 0, 0, _lh_algb1_arg2³))
//│ 	| _  => error⁰}
//│ def algb2_lh_₁(_lh_algb2_arg1⁰, _lh_algb2_arg2⁰, _lh_algb2_arg3⁰, _lh_algb2_arg4⁰) = case _lh_algb2_arg4⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_algb2_LH_C_0⁰ _lh_algb2_LH_C_1⁰ => case _lh_algb2_LH_C_0⁰ of {
//│ 		LH_P2 _lh_algb2_LH_P2_0⁰ _lh_algb2_LH_P2_1⁰ => 
//│ 			let kjcurr⁰ = if (_lh_algb2_arg1⁰ == _lh_algb2_LH_P2_0⁰) then (_lh_algb2_arg2⁰ + 1) else max_lh_₁(_lh_algb2_arg3⁰, _lh_algb2_LH_P2_1⁰)
//│ 			in [LH_C [LH_P2 _lh_algb2_LH_P2_0⁰ kjcurr⁰] algb2_lh_₁(_lh_algb2_arg1⁰, _lh_algb2_LH_P2_1⁰, kjcurr⁰, _lh_algb2_LH_C_1⁰)]
//│ 		| _  => error⁰}
//│ 	| _  => error⁰}
//│ def algb_lh_₁(_lh_algb_arg1¹, _lh_algb_arg2¹) = [LH_C 0 algb1_lh_₁(_lh_algb_arg1¹, 
//│ 	let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para¹ -> _lh_listcomp_fun_para¹(_lh_listcomp_fun⁵))
//│ 	in _lh_listcomp_fun⁵(_lh_algb_arg2¹))]
//│ def algb_lh_₂(_lh_algb_arg1³, _lh_algb_arg2³) = [LH_C 0 algb1_lh_₂(_lh_algb_arg1³, 
//│ 	let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 		LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h³ 0] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t³)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁷(_lh_algb_arg2³))]
//│ def algb_lh_₃(_lh_algb_arg1⁰, _lh_algb_arg2⁰) = [LH_C 0 algb1_lh_₃(_lh_algb_arg1⁰, 
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => [LH_C [LH_P2 _lh_listcomp_fun_ls_h⁰ 0] _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰(_lh_algb_arg2⁰))]
//│ def algb_lh_₄(_lh_algb_arg1², _lh_algb_arg2²) = [LH_C 0 algb1_lh_₃(_lh_algb_arg1², 
//│ 	let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun⁶))
//│ 	in _lh_listcomp_fun⁶(_lh_algb_arg2²))]
//│ def algc_lh_₁(_lh_algc_arg1⁰, _lh_algc_arg2⁰, _lh_algc_arg3⁰, _lh_algc_arg4⁰, _lh_floatOutId_0³) = case _lh_algc_arg4⁰ of {
//│ 	LH_N  => _lh_floatOutId_0³
//│ 	| _  => case _lh_algc_arg3⁰ of {
//│ 		LH_C _lh_algc_LH_C_0⁰ _lh_algc_LH_C_1⁰ => case _lh_algc_LH_C_1⁰ of {
//│ 			LH_N  => if inList_lh_₁(_lh_algc_LH_C_0⁰, _lh_algc_arg4⁰) then [LH_C _lh_algc_LH_C_0⁰ _lh_floatOutId_0³] else _lh_floatOutId_0³
//│ 			| _  => 
//│ 				let m2⁰ = div⁰(_lh_algc_arg1⁰, 2)
//│ 				in let xs1⁰ = take_lh_₃(m2⁰, _lh_algc_arg3⁰)
//│ 				in let xs2⁰ = drop_lh_₁(m2⁰, _lh_algc_arg3⁰)
//│ 				in let l1⁰ = algb_lh_₂(xs1⁰, _lh_algc_arg4⁰)
//│ 				in let l2⁰ = reverse_lh_₄(algb_lh_₄(reverse_lh_₆(xs2⁰), reverse_lh_₁(_lh_algc_arg4⁰)))
//│ 				in let k⁰ = findk_lh_₂(0, 0, (0 - 1), zip_lh_₂(l1⁰, l2⁰))
//│ 				in algc_lh_₁(m2⁰, k⁰, xs1⁰, take_lh_₁(k⁰, _lh_algc_arg4⁰), algc_lh_₁((_lh_algc_arg1⁰ - m2⁰), (_lh_algc_arg2⁰ - k⁰), xs2⁰, drop_lh_₂(k⁰, _lh_algc_arg4⁰), _lh_floatOutId_0³))}
//│ 		| _  => 
//│ 			let m2¹ = div⁰(_lh_algc_arg1⁰, 2)
//│ 			in let xs1¹ = take_lh_₂(m2¹, _lh_algc_arg3⁰)
//│ 			in let xs2¹ = drop_lh_₄(m2¹, _lh_algc_arg3⁰)
//│ 			in let l1¹ = algb_lh_₃(xs1¹, _lh_algc_arg4⁰)
//│ 			in let l2¹ = reverse_lh_₂(algb_lh_₁(reverse_lh_₅(xs2¹), reverse_lh_₃(_lh_algc_arg4⁰)))
//│ 			in let k¹ = findk_lh_₁(0, 0, (0 - 1), zip_lh_₁(l1¹, l2¹))
//│ 			in algc_lh_₁(m2¹, k¹, xs1¹, take_lh_₄(k¹, _lh_algc_arg4⁰), algc_lh_₁((_lh_algc_arg1⁰ - m2¹), (_lh_algc_arg2⁰ - k¹), xs2¹, drop_lh_₃(k¹, _lh_algc_arg4⁰), _lh_floatOutId_0³))}}
//│ def drop_lh_₁(_lh_drop_arg1¹, _lh_drop_arg2¹) = case _lh_drop_arg2¹ of {
//│ 	LH_C _lh_drop_LH_C_0¹ _lh_drop_LH_C_1¹ => if (_lh_drop_arg1¹ == 0) then [LH_C _lh_drop_LH_C_0¹ _lh_drop_LH_C_1¹] else drop_lh_₁((_lh_drop_arg1¹ - 1), _lh_drop_LH_C_1¹)
//│ 	| _  => error⁰}
//│ def drop_lh_₂(_lh_drop_arg1², _lh_drop_arg2²) = case _lh_drop_arg2² of {
//│ 	LH_C _lh_drop_LH_C_0² _lh_drop_LH_C_1² => if (_lh_drop_arg1² == 0) then [LH_C _lh_drop_LH_C_0² _lh_drop_LH_C_1²] else drop_lh_₂((_lh_drop_arg1² - 1), _lh_drop_LH_C_1²)
//│ 	| _  => error⁰}
//│ def drop_lh_₃(_lh_drop_arg1³, _lh_drop_arg2³) = case _lh_drop_arg2³ of {
//│ 	LH_C _lh_drop_LH_C_0³ _lh_drop_LH_C_1³ => if (_lh_drop_arg1³ == 0) then [LH_C _lh_drop_LH_C_0³ _lh_drop_LH_C_1³] else drop_lh_₃((_lh_drop_arg1³ - 1), _lh_drop_LH_C_1³)
//│ 	| _  => error⁰}
//│ def drop_lh_₄(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ == 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₄((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰)
//│ 	| _  => error⁰}
//│ def enumFromThenTo_lh_₁(a³, t⁶, b⁰) = if (a³ <= b⁰) then [LH_C a³ enumFromThenTo_lh_₁(t⁶, ((2 * t⁶) - a³), b⁰)] else [LH_N]
//│ def enumFromThenTo_lh_₂(a⁶, t¹⁰, b¹) = if (a⁶ <= b¹) then [LH_C a⁶ enumFromThenTo_lh_₂(t¹⁰, ((2 * t¹⁰) - a⁶), b¹)] else [LH_N]
//│ def findk_lh_₁(_lh_findk_arg1⁴, _lh_findk_arg2⁴, _lh_findk_arg3⁴, _lh_findk_arg4¹) = _lh_findk_arg4¹(_lh_findk_arg2⁴, _lh_findk_arg1⁴, _lh_findk_arg3⁴)
//│ def findk_lh_₂(_lh_findk_arg1⁰, _lh_findk_arg2⁰, _lh_findk_arg3⁰, _lh_findk_arg4⁰) = _lh_findk_arg4⁰(_lh_findk_arg2⁰, _lh_findk_arg1⁰, _lh_findk_arg3⁰)
//│ def inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_arg2⁰) = case _lh_inList_arg2⁰ of {
//│ 	LH_C _lh_inList_LH_C_0⁰ _lh_inList_LH_C_1⁰ => if (_lh_inList_arg1⁰ == _lh_inList_LH_C_0⁰) then [True] else inList_lh_₁(_lh_inList_arg1⁰, _lh_inList_LH_C_1⁰)
//│ 	| LH_N  => [False]
//│ 	| _  => error⁰}
//│ def lcssMain_lh_₁(_lh_lcssMain_arg1⁰, _lh_lcssMain_arg2⁰, _lh_lcssMain_arg3⁰, _lh_lcssMain_arg4⁰, _lh_lcssMain_arg5⁰, _lh_lcssMain_arg6⁰) = lcss_lh_₁(enumFromThenTo_lh_₁(_lh_lcssMain_arg1⁰, _lh_lcssMain_arg2⁰, _lh_lcssMain_arg3⁰), enumFromThenTo_lh_₂(_lh_lcssMain_arg4⁰, _lh_lcssMain_arg5⁰, _lh_lcssMain_arg6⁰))
//│ def lcss_lh_₁(_lh_lcss_arg1⁰, _lh_lcss_arg2⁰) = algc_lh_₁(length_lh_₂(_lh_lcss_arg1⁰), length_lh_₁(_lh_lcss_arg2⁰), _lh_lcss_arg1⁰, _lh_lcss_arg2⁰, [LH_N])
//│ def length_lh_₁(ls¹) = case ls¹ of {
//│ 	LH_C h¹ t¹ => (1 + length_lh_₁(t¹))
//│ 	| LH_N  => 0}
//│ def length_lh_₂(ls¹⁸) = case ls¹⁸ of {
//│ 	LH_C h¹² t¹⁵ => (1 + length_lh_₂(t¹⁵))
//│ 	| LH_N  => 0}
//│ def map_lh_₁(f⁰, ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h¹⁰ t¹² => [LH_C f⁰(h¹⁰) map_lh_₁(f⁰, t¹²)]
//│ 	| LH_N  => [LH_N]}
//│ def max_lh_₁(_lh_max_arg1⁰, _lh_max_arg2⁰) = if (_lh_max_arg1⁰ > _lh_max_arg2⁰) then _lh_max_arg1⁰ else _lh_max_arg2⁰
//│ def reverse_helper_lh_₁(ls⁹, a⁴) = case ls⁹ of {
//│ 	LH_C h⁶ t⁷ => reverse_helper_lh_₁(t⁷, 
//│ 		let _lh_listcomp_fun_ls_t² = a⁴
//│ 		in let _lh_listcomp_fun_ls_h² = h⁶
//│ 		in (fun _lh_listcomp_fun⁴ -> [LH_C [LH_P2 _lh_listcomp_fun_ls_h² 0] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t²)]))
//│ 	| LH_N  => a⁴}
//│ def reverse_helper_lh_₂(ls⁸, a²) = case ls⁸ of {
//│ 	LH_C h⁵ t⁵ => reverse_helper_lh_₂(t⁵, 
//│ 		let ty⁰ = a²
//│ 		in let hy⁰ = h⁵
//│ 		in (fun hx¹ -> (fun tx¹ -> 
//│ 			let _lh_findk_LH_C_1⁰ = zip_lh_₁(tx¹, ty⁰)
//│ 			in let _lh_findk_LH_C_0⁰ = 	
//│ 				let _lh_findk_LH_P2_1⁰ = hy⁰
//│ 				in let _lh_findk_LH_P2_0⁰ = hx¹
//│ 				in (fun _lh_findk_LH_C_1¹ -> (fun _lh_findk_arg1² -> (fun _lh_findk_arg2² -> (fun _lh_findk_arg3² -> if ((_lh_findk_LH_P2_0⁰ + _lh_findk_LH_P2_1⁰) >= _lh_findk_arg3²) then findk_lh_₁((_lh_findk_arg1² + 1), _lh_findk_arg1², (_lh_findk_LH_P2_0⁰ + _lh_findk_LH_P2_1⁰), _lh_findk_LH_C_1¹) else findk_lh_₁((_lh_findk_arg1² + 1), _lh_findk_arg2², _lh_findk_arg3², _lh_findk_LH_C_1¹)))))
//│ 			in (fun _lh_findk_arg2³ -> (fun _lh_findk_arg1³ -> (fun _lh_findk_arg3³ -> _lh_findk_LH_C_0⁰(_lh_findk_LH_C_1⁰, _lh_findk_arg1³, _lh_findk_arg2³, _lh_findk_arg3³)))))))
//│ 	| LH_N  => a²}
//│ def reverse_helper_lh_₃(ls⁷, a¹) = case ls⁷ of {
//│ 	LH_C h⁴ t⁴ => reverse_helper_lh_₃(t⁴, 
//│ 		let _lh_listcomp_fun_ls_t¹ = a¹
//│ 		in let _lh_listcomp_fun_ls_h¹ = h⁴
//│ 		in (fun _lh_listcomp_fun³ -> [LH_C [LH_P2 _lh_listcomp_fun_ls_h¹ 0] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t¹)]))
//│ 	| LH_N  => a¹}
//│ def reverse_helper_lh_₄(ls¹⁵, a⁷) = case ls¹⁵ of {
//│ 	LH_C h¹¹ t¹³ => reverse_helper_lh_₄(t¹³, 
//│ 		let ty¹ = a⁷
//│ 		in let hy¹ = h¹¹
//│ 		in (fun hx³ -> (fun tx³ -> 
//│ 			let _lh_findk_LH_C_1² = zip_lh_₂(tx³, ty¹)
//│ 			in let _lh_findk_LH_C_0¹ = 	
//│ 				let _lh_findk_LH_P2_1¹ = hy¹
//│ 				in let _lh_findk_LH_P2_0¹ = hx³
//│ 				in (fun _lh_findk_LH_C_1³ -> (fun _lh_findk_arg1⁶ -> (fun _lh_findk_arg2⁶ -> (fun _lh_findk_arg3⁶ -> if ((_lh_findk_LH_P2_0¹ + _lh_findk_LH_P2_1¹) >= _lh_findk_arg3⁶) then findk_lh_₂((_lh_findk_arg1⁶ + 1), _lh_findk_arg1⁶, (_lh_findk_LH_P2_0¹ + _lh_findk_LH_P2_1¹), _lh_findk_LH_C_1³) else findk_lh_₂((_lh_findk_arg1⁶ + 1), _lh_findk_arg2⁶, _lh_findk_arg3⁶, _lh_findk_LH_C_1³)))))
//│ 			in (fun _lh_findk_arg2⁷ -> (fun _lh_findk_arg1⁷ -> (fun _lh_findk_arg3⁷ -> _lh_findk_LH_C_0¹(_lh_findk_LH_C_1², _lh_findk_arg1⁷, _lh_findk_arg2⁷, _lh_findk_arg3⁷)))))))
//│ 	| LH_N  => a⁷}
//│ def reverse_helper_lh_₅(ls⁰, a⁰) = case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => reverse_helper_lh_₅(t⁰, 
//│ 		let _lh_algb1_LH_C_1⁰ = a⁰
//│ 		in let _lh_algb1_LH_C_0⁰ = h⁰
//│ 		in (fun _lh_algb1_arg2⁰ -> algb1_lh_₁(_lh_algb1_LH_C_1⁰, algb2_lh_₁(_lh_algb1_LH_C_0⁰, 0, 0, _lh_algb1_arg2⁰))))
//│ 	| LH_N  => a⁰}
//│ def reverse_helper_lh_₆(ls¹¹, a⁵) = case ls¹¹ of {
//│ 	LH_C h⁷ t⁸ => reverse_helper_lh_₆(t⁸, [LH_C h⁷ a⁵])
//│ 	| LH_N  => a⁵}
//│ def reverse_lh_₁(ls³) = reverse_helper_lh_₁(ls³, (fun _lh_listcomp_fun¹ -> [LH_N]))
//│ def reverse_lh_₂(ls¹⁶) = reverse_helper_lh_₂(ls¹⁶, (fun hx⁴ -> (fun tx⁴ -> (fun _lh_findk_arg2⁸ -> (fun _lh_findk_arg1⁸ -> (fun _lh_findk_arg3⁸ -> _lh_findk_arg2⁸))))))
//│ def reverse_lh_₃(ls⁵) = reverse_helper_lh_₃(ls⁵, (fun _lh_listcomp_fun² -> [LH_N]))
//│ def reverse_lh_₄(ls¹⁷) = reverse_helper_lh_₄(ls¹⁷, (fun hx⁵ -> (fun tx⁵ -> (fun _lh_findk_arg2⁹ -> (fun _lh_findk_arg1⁹ -> (fun _lh_findk_arg3⁹ -> _lh_findk_arg2⁹))))))
//│ def reverse_lh_₅(ls⁴) = reverse_helper_lh_₅(ls⁴, (fun _lh_algb1_arg2² -> map_lh_₁(snd_lh_₁, _lh_algb1_arg2²)))
//│ def reverse_lh_₆(ls¹⁰) = reverse_helper_lh_₆(ls¹⁰, [LH_N])
//│ def snd_lh_₁(_lh_snd_arg1⁰) = case _lh_snd_arg1⁰ of {
//│ 	LH_P2 _lh_snd_LH_P2_0⁰ _lh_snd_LH_P2_1⁰ => _lh_snd_LH_P2_1⁰
//│ 	| _  => error⁰}
//│ def take_lh_₁(n³, ls¹³) = if (n³ > 0) then case ls¹³ of {
//│ 	LH_C h⁹ t¹¹ => [LH_C h⁹ take_lh_₁((n³ - 1), t¹¹)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lh_₂(n², ls¹²) = if (n² > 0) then case ls¹² of {
//│ 	LH_C h⁸ t⁹ => [LH_C h⁸ take_lh_₂((n² - 1), t⁹)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lh_₃(n⁰, ls²) = if (n⁰ > 0) then case ls² of {
//│ 	LH_C h² t² => [LH_C h² take_lh_₃((n⁰ - 1), t²)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lh_₄(n¹, ls⁶) = if (n¹ > 0) then case ls⁶ of {
//│ 	LH_C h³ t³ => [LH_C h³ take_lh_₄((n¹ - 1), t³)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testLCSS_nofib_lh_₁(_lh_testLCSS_nofib_arg1⁰) = lcssMain_lh_₁(1, 2, 60, 30, 31, 90)
//│ def zip_lh_₁(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C hx⁰ tx⁰ => ys⁰(hx⁰, tx⁰)
//│ 	| LH_N  => (fun _lh_findk_arg2¹ -> (fun _lh_findk_arg1¹ -> (fun _lh_findk_arg3¹ -> _lh_findk_arg2¹)))}
//│ def zip_lh_₂(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C hx² tx² => ys¹(hx², tx²)
//│ 	| LH_N  => (fun _lh_findk_arg2⁵ -> (fun _lh_findk_arg1⁵ -> (fun _lh_findk_arg3⁵ -> _lh_findk_arg2⁵)))}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
