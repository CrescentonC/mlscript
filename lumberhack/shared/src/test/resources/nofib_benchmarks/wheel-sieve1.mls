:NewParser
:ParseOnly

// prime :: Int -> Int
// prime n = primes !! n
//   where
//     primes = sieve (wheels primes) primes (squares primes) n

// sieve (Wheel s ns:ws) ps qs input =
//   -- It's always the case that input*input > head ps,
//   -- but GHC doesn't know that. We do this so that stuff
//   -- isn't floated to top-level into a CAF.
//   [n' | o <- s:[s*2,s*3..(min (input*input) (head ps-1))*s],
//         n <- ns,
//         n'<- [n+o], noFactor n']
//   ++
//   sieve ws (tail ps) (tail qs) input
//   where
//   noFactor = if s<=2 then const True else notDivBy ps qs

// notDivBy (p:ps) (q:qs) n =
//   q > n || n `mod` p > 0 && notDivBy ps qs n

// squares :: [Int] -> [Int]
// squares ps = [p*p | p<-ps]

// wheels :: [Int] -> [Wheel]
// wheels ps = ws
//   where
//     ws = Wheel 1 [1] : zipWith nextSize ws ps

// nextSize (Wheel s ns) p =
//   Wheel (s*p) ns'
//   where
//   ns' = [n' | o <- [0,s..(p-1)*s],
//               n <- ns,
//               n' <- [n+o], n'`mod`p > 0]

// main = forM_ [1..100] $ const $ do
// 	[arg] <- getArgs
// 	print (prime (read arg))

// squares ps = map (\p -> p * p) ps
// min a b = if a > b then b else a
// noFactor s ps qs n = if (s<=2) then True else notDivBy ps qs n
// notDivBy (p:ps) (q:qs) n = (q > n) || (((n `mod` p) > 0) && (notDivBy ps qs n))
// nextSize (Wheel s ns) p = Wheel (s*p) [n' | o <- [0,s..((p-1)*s)], n <- ns, n' <- [n + o], (n' `mod` p) > 0]
// wheels ps = (Wheel 1 [1]):(zipWith nextSize (wheels ps) ps)
// sieve ((Wheel s ns):ws) ps qs input = [n' | o <- (s:[s*2,s*3..(min (input*input) ((head ps)-1))*s]), n <- ns, n'<- [n+o], noFactor s ps qs n'] ++ (sieve ws (tail ps) (tail qs) input)
// primes n = sieve (wheels (primes n)) (primes n) (squares (primes n)) n
// prime n = atIndex n (primes n)
// testWheelSieve1_nofib n = prime n
// testWheelSieve1_nofib $ primId 1000

:lhInHaskell
:lhGenOCaml
append_lz xs ys = case xs of {
  (x:xs) -> lazy (x:(append_lz xs ys));
  [] -> ys
}
squares ps = map_lz (\p -> p * p) ps
min a b = if a > b then b else a
noFactor s ps qs n = if (s<=2) then True else notDivBy ps qs n
notDivBy xs ys n = case (force ys) of {
  (q:qs) -> if (q > n)
            then True
            else case (force xs) of {
              (p:ps) -> (((n `mod` p) > 0) && (notDivBy ps qs n))
            }
}
nextSize (Wheel s ns) p = Wheel (s*p) [n' | o <- [0,s..((p-1)*s)], n <- ns, n' <- [n + o], (n' `mod` p) > 0]
wheels ps = lazy ((Wheel 1 [1]):(zipWith_lz_lz nextSize (wheels ps) ps))
sieve wls ps qs input = case (force wls) of {
  ((Wheel s ns):ws) ->
    append_lz [n' | o <- (s:[s*2,s*3..(min (input*input) ((head_lz ps)-1))*s]), n <- ns, n'<- [n+o], noFactor s ps qs n'] (sieve ws (tail_lz ps) (tail_lz qs) input)
}
primes n = lazy (sieve (wheels (primes n)) (primes n) (squares (primes n)) n)
prime n = atIndex_lz n (primes n)
testWheelSieve1_nofib n = prime n
testWheelSieve1_nofib $ primId 1000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testWheelSieve1_nofib_lh_₁^496(primId⁰(1000))
//│ def append_lz_lh_₁(_lh_append_lz_arg1⁰, _lh_append_lz_arg2⁰) = 
//│ 	let _lh_matchIdent² = _lh_append_lz_arg1⁰
//│ 	in case _lh_matchIdent² of {
//│ 		LH_C _lh_append_lz_LH_C_0⁰ _lh_append_lz_LH_C_1⁰ => lazy⁰([LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh_₁^119(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)])
//│ 		| LH_N  => _lh_append_lz_arg2⁰
//│ 		| _  => error⁰}
//│ def atIndex_lz_lh_₁(n⁰, ls⁴) = if (n⁰ < 0) then error⁰ else case force⁰(ls⁴) of {
//│ 	LH_C h⁴ t⁶ => if (n⁰ == 0) then h⁴ else atIndex_lz_lh_₁^469((n⁰ - 1), t⁶)
//│ 	| LH_N  => error⁰}
//│ def enumFromThenTo_lh_₁(a¹, t¹, b¹) = if (a¹ <= b¹) then [LH_C a¹ enumFromThenTo_lh_₁^87(t¹, ((2 * t¹) - a¹), b¹)] else [LH_N]
//│ def enumFromThenTo_lh_₂(a⁰, t⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromThenTo_lh_₂^50(t⁰, ((2 * t⁰) - a⁰), b⁰)] else [LH_N]
//│ def head_lz_lh_₁(ls⁰) = case force⁰(ls⁰) of {
//│ 	LH_C h⁰ t² => h⁰
//│ 	| LH_N  => error⁰}
//│ def map_lz_lh_₁(f⁰, ls³) = lazy⁰(case force⁰(ls³) of {
//│ 	LH_C h³ t⁵ => [LH_C f⁰(h³) map_lz_lh_₁^171(f⁰, t⁵)]
//│ 	| LH_N  => [LH_N]})
//│ def min_lh_₁(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ > _lh_min_arg2⁰) then _lh_min_arg2⁰ else _lh_min_arg1⁰
//│ def nextSize_lh_₁(_lh_nextSize_arg1⁰, _lh_nextSize_arg2⁰) = case _lh_nextSize_arg1⁰ of {
//│ 	Wheel _lh_nextSize_Wheel_0⁰ _lh_nextSize_Wheel_1⁰ => [Wheel (_lh_nextSize_Wheel_0⁰ * _lh_nextSize_arg2⁰) 
//│ 		let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => 
//│ 				let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 					LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => 
//│ 						let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 							LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)
//│ 							| LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ 						in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]])
//│ 					| LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ 				in _lh_listcomp_fun¹(_lh_nextSize_Wheel_1⁰)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁰(enumFromThenTo_lh_₂^265(0, _lh_nextSize_Wheel_0⁰, ((_lh_nextSize_arg2⁰ - 1) * _lh_nextSize_Wheel_0⁰)))]
//│ 	| _  => error⁰}
//│ def noFactor_lh_₁(_lh_noFactor_arg1⁰, _lh_noFactor_arg2⁰, _lh_noFactor_arg3⁰, _lh_noFactor_arg4⁰) = if (_lh_noFactor_arg1⁰ <= 2) then [True] else notDivBy_lh_₁^152(_lh_noFactor_arg2⁰, _lh_noFactor_arg3⁰, _lh_noFactor_arg4⁰)
//│ def notDivBy_lh_₁(_lh_notDivBy_arg1⁰, _lh_notDivBy_arg2⁰, _lh_notDivBy_arg3⁰) = 
//│ 	let _lh_matchIdent⁰ = force⁰(_lh_notDivBy_arg2⁰)
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_C _lh_notDivBy_LH_C_0⁰ _lh_notDivBy_LH_C_1⁰ => if (_lh_notDivBy_LH_C_0⁰ > _lh_notDivBy_arg3⁰) then [True] else 
//│ 			let _lh_matchIdent¹ = force⁰(_lh_notDivBy_arg1⁰)
//│ 			in case _lh_matchIdent¹ of {
//│ 				LH_C _lh_notDivBy_LH_C_0¹ _lh_notDivBy_LH_C_1¹ => (((_lh_notDivBy_arg3⁰ % _lh_notDivBy_LH_C_0¹) > 0) && notDivBy_lh_₁^26(_lh_notDivBy_LH_C_1¹, _lh_notDivBy_LH_C_1⁰, _lh_notDivBy_arg3⁰))
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ def prime_lh_₁(_lh_prime_arg1⁰) = atIndex_lz_lh_₁^484(_lh_prime_arg1⁰, primes_lh_₁^487(_lh_prime_arg1⁰))
//│ def primes_lh_₁(_lh_primes_arg1⁰) = lazy⁰(sieve_lh_₁^433(wheels_lh_₁^434(primes_lh_₁^435(_lh_primes_arg1⁰)), primes_lh_₁^440(_lh_primes_arg1⁰), squares_lh_₁^444(primes_lh_₁^445(_lh_primes_arg1⁰)), _lh_primes_arg1⁰))
//│ def sieve_lh_₁(_lh_sieve_arg1⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_sieve_arg4⁰) = 
//│ 	let _lh_matchIdent³ = force⁰(_lh_sieve_arg1⁰)
//│ 	in case _lh_matchIdent³ of {
//│ 		LH_C _lh_sieve_LH_C_0⁰ _lh_sieve_LH_C_1⁰ => case _lh_sieve_LH_C_0⁰ of {
//│ 			Wheel _lh_sieve_Wheel_0⁰ _lh_sieve_Wheel_1⁰ => append_lz_lh_₁^292(
//│ 				let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 					LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => 
//│ 						let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 							LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => 
//│ 								let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 									LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁^296(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)
//│ 									| LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ 								in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]])
//│ 							| LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ 						in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰)
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun³([LH_C _lh_sieve_Wheel_0⁰ enumFromThenTo_lh_₁^343((_lh_sieve_Wheel_0⁰ * 2), (_lh_sieve_Wheel_0⁰ * 3), (min_lh_₁^357((_lh_sieve_arg4⁰ * _lh_sieve_arg4⁰), (head_lz_lh_₁^365(_lh_sieve_arg2⁰) - 1)) * _lh_sieve_Wheel_0⁰))]), sieve_lh_₁^380(_lh_sieve_LH_C_1⁰, tail_lz_lh_₁^383(_lh_sieve_arg2⁰), tail_lz_lh_₂^387(_lh_sieve_arg3⁰), _lh_sieve_arg4⁰))
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ def squares_lh_₁(_lh_squares_arg1⁰) = map_lz_lh_₁^403((fun p⁰ -> (p⁰ * p⁰)), _lh_squares_arg1⁰)
//│ def tail_lz_lh_₁(ls²) = case force⁰(ls²) of {
//│ 	LH_C h² t⁴ => t⁴
//│ 	| LH_N  => error⁰}
//│ def tail_lz_lh_₂(ls¹) = case force⁰(ls¹) of {
//│ 	LH_C h¹ t³ => t³
//│ 	| LH_N  => error⁰}
//│ def testWheelSieve1_nofib_lh_₁(_lh_testWheelSieve1_nofib_arg1⁰) = prime_lh_₁^492(_lh_testWheelSieve1_nofib_arg1⁰)
//│ def wheels_lh_₁(_lh_wheels_arg1⁰) = lazy⁰([LH_C [Wheel 1 [LH_C 1 [LH_N]]] zipWith_lz_lz_lh_₁^420(nextSize_lh_₁^421, wheels_lh_₁^423(_lh_wheels_arg1⁰), _lh_wheels_arg1⁰)])
//│ def zipWith_lz_lz_lh_₁(f¹, xs⁰, ys⁰) = lazy⁰(case force⁰(xs⁰) of {
//│ 	LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₁^194(f¹, tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec atIndex_lz_lh__d1 n_0 ls_4 =
//│ 		  (if (n_0 < 0) then
//│ 		    (failwith "error")
//│ 		  else
//│ 		    (match (Lazy.force ls_4) with
//│ 		      | `LH_C(h_4, t_6) -> 
//│ 		        (if (n_0 = 0) then
//│ 		          h_4
//│ 		        else
//│ 		          ((atIndex_lz_lh__d1 (n_0 - 1)) t_6))
//│ 		      | `LH_N -> 
//│ 		        (failwith "error")));;
//│ 		let rec map_lz_lh__d1 f_0 ls_3 =
//│ 		  (lazy (match (Lazy.force ls_3) with
//│ 		    | `LH_C(h_3, t_5) -> 
//│ 		      (`LH_C((f_0 h_3), ((map_lz_lh__d1 f_0) t_5)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec squares_lh__d1 _lh_squares_arg1_0 =
//│ 		  ((map_lz_lh__d1 (fun p_0 -> 
//│ 		    (p_0 * p_0))) _lh_squares_arg1_0);;
//│ 		let rec enumFromThenTo_lh__d2 a_0 t_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, (((enumFromThenTo_lh__d2 t_0) ((2 * t_0) - a_0)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec nextSize_lh__d1 _lh_nextSize_arg1_0 _lh_nextSize_arg2_0 =
//│ 		  (match _lh_nextSize_arg1_0 with
//│ 		    | `Wheel(_lh_nextSize_Wheel_0_0, _lh_nextSize_Wheel_1_0) -> 
//│ 		      (`Wheel((_lh_nextSize_Wheel_0_0 * _lh_nextSize_arg2_0), (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		        (match _lh_listcomp_fun_para_0 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		            (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		              (match _lh_listcomp_fun_para_1 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		                  (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		                    (match _lh_listcomp_fun_para_2 with
//│ 		                      | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		                        (if ((_lh_listcomp_fun_ls_h_2 mod _lh_nextSize_arg2_0) > 0) then
//│ 		                          (`LH_C(_lh_listcomp_fun_ls_h_2, (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2)))
//│ 		                        else
//│ 		                          (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2))
//│ 		                      | `LH_N -> 
//│ 		                        (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))) in
//│ 		                    (_lh_listcomp_fun_2 (`LH_C((_lh_listcomp_fun_ls_h_1 + _lh_listcomp_fun_ls_h_0), (`LH_N)))))
//│ 		                | `LH_N -> 
//│ 		                  (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))) in
//│ 		              (_lh_listcomp_fun_1 _lh_nextSize_Wheel_1_0))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_0 (((enumFromThenTo_lh__d2 0) _lh_nextSize_Wheel_0_0) ((_lh_nextSize_arg2_0 - 1) * _lh_nextSize_Wheel_0_0))))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec zipWith_lz_lz_lh__d1 f_1 xs_0 ys_0 =
//│ 		  (lazy (match (Lazy.force xs_0) with
//│ 		    | `LH_C(hx_0, tx_0) -> 
//│ 		      (match (Lazy.force ys_0) with
//│ 		        | `LH_C(hy_0, ty_0) -> 
//│ 		          (`LH_C(((f_1 hx_0) hy_0), (((zipWith_lz_lz_lh__d1 f_1) tx_0) ty_0)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		let rec wheels_lh__d1 _lh_wheels_arg1_0 =
//│ 		  (lazy (`LH_C((`Wheel(1, (`LH_C(1, (`LH_N))))), (((zipWith_lz_lz_lh__d1 nextSize_lh__d1) (wheels_lh__d1 _lh_wheels_arg1_0)) _lh_wheels_arg1_0))));;
//│ 		let rec min_lh__d1 _lh_min_arg1_0 _lh_min_arg2_0 =
//│ 		  (if (_lh_min_arg1_0 > _lh_min_arg2_0) then
//│ 		    _lh_min_arg2_0
//│ 		  else
//│ 		    _lh_min_arg1_0);;
//│ 		let rec head_lz_lh__d1 ls_0 =
//│ 		  (match (Lazy.force ls_0) with
//│ 		    | `LH_C(h_0, t_2) -> 
//│ 		      h_0
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec notDivBy_lh__d1 _lh_notDivBy_arg1_0 _lh_notDivBy_arg2_0 _lh_notDivBy_arg3_0 =
//│ 		  (let rec _lh_matchIdent_0 = (Lazy.force _lh_notDivBy_arg2_0) in
//│ 		    (match _lh_matchIdent_0 with
//│ 		      | `LH_C(_lh_notDivBy_LH_C_0_0, _lh_notDivBy_LH_C_1_0) -> 
//│ 		        (if (_lh_notDivBy_LH_C_0_0 > _lh_notDivBy_arg3_0) then
//│ 		          true
//│ 		        else
//│ 		          (let rec _lh_matchIdent_1 = (Lazy.force _lh_notDivBy_arg1_0) in
//│ 		            (match _lh_matchIdent_1 with
//│ 		              | `LH_C(_lh_notDivBy_LH_C_0_1, _lh_notDivBy_LH_C_1_1) -> 
//│ 		                (((_lh_notDivBy_arg3_0 mod _lh_notDivBy_LH_C_0_1) > 0) && (((notDivBy_lh__d1 _lh_notDivBy_LH_C_1_1) _lh_notDivBy_LH_C_1_0) _lh_notDivBy_arg3_0))
//│ 		              | _ -> 
//│ 		                (failwith "error"))))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec noFactor_lh__d1 _lh_noFactor_arg1_0 _lh_noFactor_arg2_0 _lh_noFactor_arg3_0 _lh_noFactor_arg4_0 =
//│ 		  (if (_lh_noFactor_arg1_0 <= 2) then
//│ 		    true
//│ 		  else
//│ 		    (((notDivBy_lh__d1 _lh_noFactor_arg2_0) _lh_noFactor_arg3_0) _lh_noFactor_arg4_0));;
//│ 		let rec append_lz_lh__d1 _lh_append_lz_arg1_0 _lh_append_lz_arg2_0 =
//│ 		  (let rec _lh_matchIdent_2 = _lh_append_lz_arg1_0 in
//│ 		    (match _lh_matchIdent_2 with
//│ 		      | `LH_C(_lh_append_lz_LH_C_0_0, _lh_append_lz_LH_C_1_0) -> 
//│ 		        (lazy (`LH_C(_lh_append_lz_LH_C_0_0, ((append_lz_lh__d1 _lh_append_lz_LH_C_1_0) _lh_append_lz_arg2_0))))
//│ 		      | `LH_N -> 
//│ 		        _lh_append_lz_arg2_0
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec enumFromThenTo_lh__d1 a_1 t_1 b_1 =
//│ 		  (if (a_1 <= b_1) then
//│ 		    (`LH_C(a_1, (((enumFromThenTo_lh__d1 t_1) ((2 * t_1) - a_1)) b_1)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec tail_lz_lh__d2 ls_1 =
//│ 		  (match (Lazy.force ls_1) with
//│ 		    | `LH_C(h_1, t_3) -> 
//│ 		      t_3
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec tail_lz_lh__d1 ls_2 =
//│ 		  (match (Lazy.force ls_2) with
//│ 		    | `LH_C(h_2, t_4) -> 
//│ 		      t_4
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"));;
//│ 		let rec sieve_lh__d1 _lh_sieve_arg1_0 _lh_sieve_arg2_0 _lh_sieve_arg3_0 _lh_sieve_arg4_0 =
//│ 		  (let rec _lh_matchIdent_3 = (Lazy.force _lh_sieve_arg1_0) in
//│ 		    (match _lh_matchIdent_3 with
//│ 		      | `LH_C(_lh_sieve_LH_C_0_0, _lh_sieve_LH_C_1_0) -> 
//│ 		        (match _lh_sieve_LH_C_0_0 with
//│ 		          | `Wheel(_lh_sieve_Wheel_0_0, _lh_sieve_Wheel_1_0) -> 
//│ 		            ((append_lz_lh__d1 (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		              (match _lh_listcomp_fun_para_3 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_3, _lh_listcomp_fun_ls_t_3) -> 
//│ 		                  (let rec _lh_listcomp_fun_4 = (fun _lh_listcomp_fun_para_4 -> 
//│ 		                    (match _lh_listcomp_fun_para_4 with
//│ 		                      | `LH_C(_lh_listcomp_fun_ls_h_4, _lh_listcomp_fun_ls_t_4) -> 
//│ 		                        (let rec _lh_listcomp_fun_5 = (fun _lh_listcomp_fun_para_5 -> 
//│ 		                          (match _lh_listcomp_fun_para_5 with
//│ 		                            | `LH_C(_lh_listcomp_fun_ls_h_5, _lh_listcomp_fun_ls_t_5) -> 
//│ 		                              (if ((((noFactor_lh__d1 _lh_sieve_Wheel_0_0) _lh_sieve_arg2_0) _lh_sieve_arg3_0) _lh_listcomp_fun_ls_h_5) then
//│ 		                                (`LH_C(_lh_listcomp_fun_ls_h_5, (_lh_listcomp_fun_5 _lh_listcomp_fun_ls_t_5)))
//│ 		                              else
//│ 		                                (_lh_listcomp_fun_5 _lh_listcomp_fun_ls_t_5))
//│ 		                            | `LH_N -> 
//│ 		                              (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4))) in
//│ 		                          (_lh_listcomp_fun_5 (`LH_C((_lh_listcomp_fun_ls_h_4 + _lh_listcomp_fun_ls_h_3), (`LH_N)))))
//│ 		                      | `LH_N -> 
//│ 		                        (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3))) in
//│ 		                    (_lh_listcomp_fun_4 _lh_sieve_Wheel_1_0))
//│ 		                | `LH_N -> 
//│ 		                  (`LH_N))) in
//│ 		              (_lh_listcomp_fun_3 (`LH_C(_lh_sieve_Wheel_0_0, (((enumFromThenTo_lh__d1 (_lh_sieve_Wheel_0_0 * 2)) (_lh_sieve_Wheel_0_0 * 3)) (((min_lh__d1 (_lh_sieve_arg4_0 * _lh_sieve_arg4_0)) ((head_lz_lh__d1 _lh_sieve_arg2_0) - 1)) * _lh_sieve_Wheel_0_0))))))) ((((sieve_lh__d1 _lh_sieve_LH_C_1_0) (tail_lz_lh__d1 _lh_sieve_arg2_0)) (tail_lz_lh__d2 _lh_sieve_arg3_0)) _lh_sieve_arg4_0))
//│ 		          | _ -> 
//│ 		            (failwith "error"))
//│ 		      | _ -> 
//│ 		        (failwith "error")));;
//│ 		let rec primes_lh__d1 _lh_primes_arg1_0 =
//│ 		  (lazy ((((sieve_lh__d1 (wheels_lh__d1 (primes_lh__d1 _lh_primes_arg1_0))) (primes_lh__d1 _lh_primes_arg1_0)) (squares_lh__d1 (primes_lh__d1 _lh_primes_arg1_0))) _lh_primes_arg1_0));;
//│ 		let rec prime_lh__d1 _lh_prime_arg1_0 =
//│ 		  ((atIndex_lz_lh__d1 _lh_prime_arg1_0) (primes_lh__d1 _lh_prime_arg1_0));;
//│ 		let rec testWheelSieve1_nofib_lh__d1 _lh_testWheelSieve1_nofib_arg1_0 =
//│ 		  (prime_lh__d1 _lh_testWheelSieve1_nofib_arg1_0);;
//│ 		(testWheelSieve1_nofib_lh__d1 1000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C a⁰ enumFromThenTo_lh_₂(t⁰, ((2 * t⁰) - a⁰), b⁰)]: 65 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(_lh_nextSize_Wheel_1⁰) | LH_N  => [LH_N]}: 262
//│ [LH_N]: 66 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(_lh_nextSize_Wheel_1⁰) | LH_N  => [LH_N]}: 262
//│ [LH_C a¹ enumFromThenTo_lh_₁(t¹, ((2 * t¹) - a¹), b¹)]: 102 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰) | LH_N  => [LH_N]}: 339
//│ [LH_N]: 103 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰) | LH_N  => [LH_N]}: 339
//│ [LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh_₁(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]: 124 --->
//│ 	DeadCodeCons
//│ 	case _lh_matchIdent¹ of {LH_C _lh_notDivBy_LH_C_0¹ _lh_notDivBy_LH_C_1¹ => (((_lh_notDivBy_arg3⁰ % _lh_notDivBy_LH_C_0¹) > 0) && notDivBy_lh_₁(_lh_notDivBy_LH_C_1¹, _lh_notDivBy_LH_C_1⁰, _lh_notDivBy_arg3⁰)) | _  => error⁰}: 35
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t² => h⁰ | LH_N  => error⁰}: 113
//│ 	case force⁰(ls²) of {LH_C h² t⁴ => t⁴ | LH_N  => error⁰}: 144
//│ 	case force⁰(ls³) of {LH_C h³ t⁵ => [LH_C f⁰(h³) map_lz_lh_₁(f⁰, t⁵)] | LH_N  => [LH_N]}: 178
//│ 	case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₁(f¹, tx⁰, ty⁰)] | LH_N  => [LH_N]}: 203
//│ 	case force⁰(ls⁴) of {LH_C h⁴ t⁶ => if (n⁰ == 0) then h⁴ else atIndex_lz_lh_₁((n⁰ - 1), t⁶) | LH_N  => error⁰}: 480
//│ [LH_C f⁰(h³) map_lz_lh_₁(f⁰, t⁵)]: 176 --->
//│ 	case _lh_matchIdent⁰ of {LH_C _lh_notDivBy_LH_C_0⁰ _lh_notDivBy_LH_C_1⁰ => if (_lh_notDivBy_LH_C_0⁰ > _lh_notDivBy_arg3⁰) then [True] else let _lh_matchIdent¹ = force⁰(_lh_notDivBy_arg1⁰)
//│ in case _lh_matchIdent¹ of {LH_C _lh_notDivBy_LH_C_0¹ _lh_notDivBy_LH_C_1¹ => (((_lh_notDivBy_arg3⁰ % _lh_notDivBy_LH_C_0¹) > 0) && notDivBy_lh_₁(_lh_notDivBy_LH_C_1¹, _lh_notDivBy_LH_C_1⁰, _lh_notDivBy_arg3⁰)) | _  => error⁰} | _  => error⁰}: 39
//│ 	case force⁰(ls¹) of {LH_C h¹ t³ => t³ | LH_N  => error⁰}: 137
//│ [LH_N]: 177 --->
//│ 	case _lh_matchIdent⁰ of {LH_C _lh_notDivBy_LH_C_0⁰ _lh_notDivBy_LH_C_1⁰ => if (_lh_notDivBy_LH_C_0⁰ > _lh_notDivBy_arg3⁰) then [True] else let _lh_matchIdent¹ = force⁰(_lh_notDivBy_arg1⁰)
//│ in case _lh_matchIdent¹ of {LH_C _lh_notDivBy_LH_C_0¹ _lh_notDivBy_LH_C_1¹ => (((_lh_notDivBy_arg3⁰ % _lh_notDivBy_LH_C_0¹) > 0) && notDivBy_lh_₁(_lh_notDivBy_LH_C_1¹, _lh_notDivBy_LH_C_1⁰, _lh_notDivBy_arg3⁰)) | _  => error⁰} | _  => error⁰}: 39
//│ 	case force⁰(ls¹) of {LH_C h¹ t³ => t³ | LH_N  => error⁰}: 137
//│ [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₁(f¹, tx⁰, ty⁰)]: 201 --->
//│ 	case force⁰(xs⁰) of {LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₁(f¹, tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 205
//│ 	case _lh_matchIdent³ of {LH_C _lh_sieve_LH_C_0⁰ _lh_sieve_LH_C_1⁰ => case _lh_sieve_LH_C_0⁰ of {Wheel _lh_sieve_Wheel_0⁰ _lh_sieve_Wheel_1⁰ => append_lz_lh_₁(let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun³([LH_C _lh_sieve_Wheel_0⁰ enumFromThenTo_lh_₁((_lh_sieve_Wheel_0⁰ * 2), (_lh_sieve_Wheel_0⁰ * 3), (min_lh_₁((_lh_sieve_arg4⁰ * _lh_sieve_arg4⁰), (head_lz_lh_₁(_lh_sieve_arg2⁰) - 1)) * _lh_sieve_Wheel_0⁰))]), sieve_lh_₁(_lh_sieve_LH_C_1⁰, tail_lz_lh_₁(_lh_sieve_arg2⁰), tail_lz_lh_₂(_lh_sieve_arg3⁰), _lh_sieve_arg4⁰)) | _  => error⁰} | _  => error⁰}: 397
//│ [LH_N]: 202 --->
//│ 	case force⁰(xs⁰) of {LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₁(f¹, tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 205
//│ 	case _lh_matchIdent³ of {LH_C _lh_sieve_LH_C_0⁰ _lh_sieve_LH_C_1⁰ => case _lh_sieve_LH_C_0⁰ of {Wheel _lh_sieve_Wheel_0⁰ _lh_sieve_Wheel_1⁰ => append_lz_lh_₁(let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun³([LH_C _lh_sieve_Wheel_0⁰ enumFromThenTo_lh_₁((_lh_sieve_Wheel_0⁰ * 2), (_lh_sieve_Wheel_0⁰ * 3), (min_lh_₁((_lh_sieve_arg4⁰ * _lh_sieve_arg4⁰), (head_lz_lh_₁(_lh_sieve_arg2⁰) - 1)) * _lh_sieve_Wheel_0⁰))]), sieve_lh_₁(_lh_sieve_LH_C_1⁰, tail_lz_lh_₁(_lh_sieve_arg2⁰), tail_lz_lh_₂(_lh_sieve_arg3⁰), _lh_sieve_arg4⁰)) | _  => error⁰} | _  => error⁰}: 397
//│ [LH_N]: 204 --->
//│ 	case force⁰(xs⁰) of {LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₁(f¹, tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 205
//│ 	case _lh_matchIdent³ of {LH_C _lh_sieve_LH_C_0⁰ _lh_sieve_LH_C_1⁰ => case _lh_sieve_LH_C_0⁰ of {Wheel _lh_sieve_Wheel_0⁰ _lh_sieve_Wheel_1⁰ => append_lz_lh_₁(let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun³([LH_C _lh_sieve_Wheel_0⁰ enumFromThenTo_lh_₁((_lh_sieve_Wheel_0⁰ * 2), (_lh_sieve_Wheel_0⁰ * 3), (min_lh_₁((_lh_sieve_arg4⁰ * _lh_sieve_arg4⁰), (head_lz_lh_₁(_lh_sieve_arg2⁰) - 1)) * _lh_sieve_Wheel_0⁰))]), sieve_lh_₁(_lh_sieve_LH_C_1⁰, tail_lz_lh_₁(_lh_sieve_arg2⁰), tail_lz_lh_₂(_lh_sieve_arg3⁰), _lh_sieve_arg4⁰)) | _  => error⁰} | _  => error⁰}: 397
//│ [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 232 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 255
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 332
//│ [LH_N]: 248 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 240
//│ [LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]: 249 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 240
//│ [LH_N]: 261 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 255
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 332
//│ [Wheel (_lh_nextSize_Wheel_0⁰ * _lh_nextSize_arg2⁰) let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(_lh_nextSize_Wheel_1⁰) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(enumFromThenTo_lh_₂(0, _lh_nextSize_Wheel_0⁰, ((_lh_nextSize_arg2⁰ - 1) * _lh_nextSize_Wheel_0⁰)))]: 282 --->
//│ 	case _lh_nextSize_arg1⁰ of {Wheel _lh_nextSize_Wheel_0⁰ _lh_nextSize_Wheel_1⁰ => [Wheel (_lh_nextSize_Wheel_0⁰ * _lh_nextSize_arg2⁰) let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(_lh_nextSize_Wheel_1⁰) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(enumFromThenTo_lh_₂(0, _lh_nextSize_Wheel_0⁰, ((_lh_nextSize_arg2⁰ - 1) * _lh_nextSize_Wheel_0⁰)))] | _  => error⁰}: 284
//│ 	case _lh_sieve_LH_C_0⁰ of {Wheel _lh_sieve_Wheel_0⁰ _lh_sieve_Wheel_1⁰ => append_lz_lh_₁(let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun³([LH_C _lh_sieve_Wheel_0⁰ enumFromThenTo_lh_₁((_lh_sieve_Wheel_0⁰ * 2), (_lh_sieve_Wheel_0⁰ * 3), (min_lh_₁((_lh_sieve_arg4⁰ * _lh_sieve_arg4⁰), (head_lz_lh_₁(_lh_sieve_arg2⁰) - 1)) * _lh_sieve_Wheel_0⁰))]), sieve_lh_₁(_lh_sieve_LH_C_1⁰, tail_lz_lh_₁(_lh_sieve_arg2⁰), tail_lz_lh_₂(_lh_sieve_arg3⁰), _lh_sieve_arg4⁰)) | _  => error⁰}: 395
//│ [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)]: 309 --->
//│ 	case _lh_matchIdent² of {LH_C _lh_append_lz_LH_C_0⁰ _lh_append_lz_LH_C_1⁰ => lazy⁰([LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh_₁(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]) | LH_N  => _lh_append_lz_arg2⁰ | _  => error⁰}: 128
//│ [LH_N]: 325 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)}: 317
//│ [LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]: 326 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)}: 317
//│ [LH_N]: 338 --->
//│ 	case _lh_matchIdent² of {LH_C _lh_append_lz_LH_C_0⁰ _lh_append_lz_LH_C_1⁰ => lazy⁰([LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh_₁(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]) | LH_N  => _lh_append_lz_arg2⁰ | _  => error⁰}: 128
//│ [LH_C _lh_sieve_Wheel_0⁰ enumFromThenTo_lh_₁((_lh_sieve_Wheel_0⁰ * 2), (_lh_sieve_Wheel_0⁰ * 3), (min_lh_₁((_lh_sieve_arg4⁰ * _lh_sieve_arg4⁰), (head_lz_lh_₁(_lh_sieve_arg2⁰) - 1)) * _lh_sieve_Wheel_0⁰))]: 376 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰) | LH_N  => [LH_N]}: 339
//│ [LH_N]: 417 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 255
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 332
//│ [LH_C 1 [LH_N]]: 418 --->
//│ 	case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 255
//│ 	case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 332
//│ [Wheel 1 [LH_C 1 [LH_N]]]: 419 --->
//│ 	case _lh_nextSize_arg1⁰ of {Wheel _lh_nextSize_Wheel_0⁰ _lh_nextSize_Wheel_1⁰ => [Wheel (_lh_nextSize_Wheel_0⁰ * _lh_nextSize_arg2⁰) let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(_lh_nextSize_Wheel_1⁰) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(enumFromThenTo_lh_₂(0, _lh_nextSize_Wheel_0⁰, ((_lh_nextSize_arg2⁰ - 1) * _lh_nextSize_Wheel_0⁰)))] | _  => error⁰}: 284
//│ 	case _lh_sieve_LH_C_0⁰ of {Wheel _lh_sieve_Wheel_0⁰ _lh_sieve_Wheel_1⁰ => append_lz_lh_₁(let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun³([LH_C _lh_sieve_Wheel_0⁰ enumFromThenTo_lh_₁((_lh_sieve_Wheel_0⁰ * 2), (_lh_sieve_Wheel_0⁰ * 3), (min_lh_₁((_lh_sieve_arg4⁰ * _lh_sieve_arg4⁰), (head_lz_lh_₁(_lh_sieve_arg2⁰) - 1)) * _lh_sieve_Wheel_0⁰))]), sieve_lh_₁(_lh_sieve_LH_C_1⁰, tail_lz_lh_₁(_lh_sieve_arg2⁰), tail_lz_lh_₂(_lh_sieve_arg3⁰), _lh_sieve_arg4⁰)) | _  => error⁰}: 395
//│ [LH_C [Wheel 1 [LH_C 1 [LH_N]]] zipWith_lz_lz_lh_₁(nextSize_lh_₁, wheels_lh_₁(_lh_wheels_arg1⁰), _lh_wheels_arg1⁰)]: 429 --->
//│ 	case force⁰(xs⁰) of {LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₁(f¹, tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 205
//│ 	case _lh_matchIdent³ of {LH_C _lh_sieve_LH_C_0⁰ _lh_sieve_LH_C_1⁰ => case _lh_sieve_LH_C_0⁰ of {Wheel _lh_sieve_Wheel_0⁰ _lh_sieve_Wheel_1⁰ => append_lz_lh_₁(let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun³([LH_C _lh_sieve_Wheel_0⁰ enumFromThenTo_lh_₁((_lh_sieve_Wheel_0⁰ * 2), (_lh_sieve_Wheel_0⁰ * 3), (min_lh_₁((_lh_sieve_arg4⁰ * _lh_sieve_arg4⁰), (head_lz_lh_₁(_lh_sieve_arg2⁰) - 1)) * _lh_sieve_Wheel_0⁰))]), sieve_lh_₁(_lh_sieve_LH_C_1⁰, tail_lz_lh_₁(_lh_sieve_arg2⁰), tail_lz_lh_₂(_lh_sieve_arg3⁰), _lh_sieve_arg4⁰)) | _  => error⁰} | _  => error⁰}: 397
//│ ------------------
//│ case _lh_matchIdent¹ of {LH_C _lh_notDivBy_LH_C_0¹ _lh_notDivBy_LH_C_1¹ => (((_lh_notDivBy_arg3⁰ % _lh_notDivBy_LH_C_0¹) > 0) && notDivBy_lh_₁(_lh_notDivBy_LH_C_1¹, _lh_notDivBy_LH_C_1⁰, _lh_notDivBy_arg3⁰)) | _  => error⁰}: 35 --->
//│ 	[LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh_₁(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]: 124
//│ case _lh_matchIdent⁰ of {LH_C _lh_notDivBy_LH_C_0⁰ _lh_notDivBy_LH_C_1⁰ => if (_lh_notDivBy_LH_C_0⁰ > _lh_notDivBy_arg3⁰) then [True] else let _lh_matchIdent¹ = force⁰(_lh_notDivBy_arg1⁰)
//│ in case _lh_matchIdent¹ of {LH_C _lh_notDivBy_LH_C_0¹ _lh_notDivBy_LH_C_1¹ => (((_lh_notDivBy_arg3⁰ % _lh_notDivBy_LH_C_0¹) > 0) && notDivBy_lh_₁(_lh_notDivBy_LH_C_1¹, _lh_notDivBy_LH_C_1⁰, _lh_notDivBy_arg3⁰)) | _  => error⁰} | _  => error⁰}: 39 --->
//│ 	[LH_C f⁰(h³) map_lz_lh_₁(f⁰, t⁵)]: 176
//│ 	[LH_N]: 177
//│ case force⁰(ls⁰) of {LH_C h⁰ t² => h⁰ | LH_N  => error⁰}: 113 --->
//│ 	[LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh_₁(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]: 124
//│ case _lh_matchIdent² of {LH_C _lh_append_lz_LH_C_0⁰ _lh_append_lz_LH_C_1⁰ => lazy⁰([LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh_₁(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]) | LH_N  => _lh_append_lz_arg2⁰ | _  => error⁰}: 128 --->
//│ 	[LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)]: 309
//│ 	[LH_N]: 338
//│ case force⁰(ls¹) of {LH_C h¹ t³ => t³ | LH_N  => error⁰}: 137 --->
//│ 	[LH_C f⁰(h³) map_lz_lh_₁(f⁰, t⁵)]: 176
//│ 	[LH_N]: 177
//│ case force⁰(ls²) of {LH_C h² t⁴ => t⁴ | LH_N  => error⁰}: 144 --->
//│ 	[LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh_₁(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]: 124
//│ case force⁰(ls³) of {LH_C h³ t⁵ => [LH_C f⁰(h³) map_lz_lh_₁(f⁰, t⁵)] | LH_N  => [LH_N]}: 178 --->
//│ 	[LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh_₁(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]: 124
//│ case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₁(f¹, tx⁰, ty⁰)] | LH_N  => [LH_N]}: 203 --->
//│ 	[LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh_₁(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]: 124
//│ case force⁰(xs⁰) of {LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₁(f¹, tx⁰, ty⁰)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 205 --->
//│ 	[LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₁(f¹, tx⁰, ty⁰)]: 201
//│ 	[LH_N]: 202
//│ 	[LH_N]: 204
//│ 	[LH_C [Wheel 1 [LH_C 1 [LH_N]]] zipWith_lz_lz_lh_₁(nextSize_lh_₁, wheels_lh_₁(_lh_wheels_arg1⁰), _lh_wheels_arg1⁰)]: 429
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 240 --->
//│ 	[LH_N]: 248
//│ 	[LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]: 249
//│ case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}: 255 --->
//│ 	[LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 232
//│ 	[LH_N]: 261
//│ 	[LH_N]: 417
//│ 	[LH_C 1 [LH_N]]: 418
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(_lh_nextSize_Wheel_1⁰) | LH_N  => [LH_N]}: 262 --->
//│ 	[LH_C a⁰ enumFromThenTo_lh_₂(t⁰, ((2 * t⁰) - a⁰), b⁰)]: 65
//│ 	[LH_N]: 66
//│ case _lh_nextSize_arg1⁰ of {Wheel _lh_nextSize_Wheel_0⁰ _lh_nextSize_Wheel_1⁰ => [Wheel (_lh_nextSize_Wheel_0⁰ * _lh_nextSize_arg2⁰) let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(_lh_nextSize_Wheel_1⁰) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(enumFromThenTo_lh_₂(0, _lh_nextSize_Wheel_0⁰, ((_lh_nextSize_arg2⁰ - 1) * _lh_nextSize_Wheel_0⁰)))] | _  => error⁰}: 284 --->
//│ 	[Wheel (_lh_nextSize_Wheel_0⁰ * _lh_nextSize_arg2⁰) let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(_lh_nextSize_Wheel_1⁰) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(enumFromThenTo_lh_₂(0, _lh_nextSize_Wheel_0⁰, ((_lh_nextSize_arg2⁰ - 1) * _lh_nextSize_Wheel_0⁰)))]: 282
//│ 	[Wheel 1 [LH_C 1 [LH_N]]]: 419
//│ case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)}: 317 --->
//│ 	[LH_N]: 325
//│ 	[LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]: 326
//│ case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}: 332 --->
//│ 	[LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]: 232
//│ 	[LH_N]: 261
//│ 	[LH_N]: 417
//│ 	[LH_C 1 [LH_N]]: 418
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰) | LH_N  => [LH_N]}: 339 --->
//│ 	[LH_C a¹ enumFromThenTo_lh_₁(t¹, ((2 * t¹) - a¹), b¹)]: 102
//│ 	[LH_N]: 103
//│ 	[LH_C _lh_sieve_Wheel_0⁰ enumFromThenTo_lh_₁((_lh_sieve_Wheel_0⁰ * 2), (_lh_sieve_Wheel_0⁰ * 3), (min_lh_₁((_lh_sieve_arg4⁰ * _lh_sieve_arg4⁰), (head_lz_lh_₁(_lh_sieve_arg2⁰) - 1)) * _lh_sieve_Wheel_0⁰))]: 376
//│ case _lh_sieve_LH_C_0⁰ of {Wheel _lh_sieve_Wheel_0⁰ _lh_sieve_Wheel_1⁰ => append_lz_lh_₁(let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun³([LH_C _lh_sieve_Wheel_0⁰ enumFromThenTo_lh_₁((_lh_sieve_Wheel_0⁰ * 2), (_lh_sieve_Wheel_0⁰ * 3), (min_lh_₁((_lh_sieve_arg4⁰ * _lh_sieve_arg4⁰), (head_lz_lh_₁(_lh_sieve_arg2⁰) - 1)) * _lh_sieve_Wheel_0⁰))]), sieve_lh_₁(_lh_sieve_LH_C_1⁰, tail_lz_lh_₁(_lh_sieve_arg2⁰), tail_lz_lh_₂(_lh_sieve_arg3⁰), _lh_sieve_arg4⁰)) | _  => error⁰}: 395 --->
//│ 	[Wheel (_lh_nextSize_Wheel_0⁰ * _lh_nextSize_arg2⁰) let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(_lh_nextSize_Wheel_1⁰) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁰(enumFromThenTo_lh_₂(0, _lh_nextSize_Wheel_0⁰, ((_lh_nextSize_arg2⁰ - 1) * _lh_nextSize_Wheel_0⁰)))]: 282
//│ 	[Wheel 1 [LH_C 1 [LH_N]]]: 419
//│ case _lh_matchIdent³ of {LH_C _lh_sieve_LH_C_0⁰ _lh_sieve_LH_C_1⁰ => case _lh_sieve_LH_C_0⁰ of {Wheel _lh_sieve_Wheel_0⁰ _lh_sieve_Wheel_1⁰ => append_lz_lh_₁(let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun³([LH_C _lh_sieve_Wheel_0⁰ enumFromThenTo_lh_₁((_lh_sieve_Wheel_0⁰ * 2), (_lh_sieve_Wheel_0⁰ * 3), (min_lh_₁((_lh_sieve_arg4⁰ * _lh_sieve_arg4⁰), (head_lz_lh_₁(_lh_sieve_arg2⁰) - 1)) * _lh_sieve_Wheel_0⁰))]), sieve_lh_₁(_lh_sieve_LH_C_1⁰, tail_lz_lh_₁(_lh_sieve_arg2⁰), tail_lz_lh_₂(_lh_sieve_arg3⁰), _lh_sieve_arg4⁰)) | _  => error⁰} | _  => error⁰}: 397 --->
//│ 	[LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₁(f¹, tx⁰, ty⁰)]: 201
//│ 	[LH_N]: 202
//│ 	[LH_N]: 204
//│ 	[LH_C [Wheel 1 [LH_C 1 [LH_N]]] zipWith_lz_lz_lh_₁(nextSize_lh_₁, wheels_lh_₁(_lh_wheels_arg1⁰), _lh_wheels_arg1⁰)]: 429
//│ case force⁰(ls⁴) of {LH_C h⁴ t⁶ => if (n⁰ == 0) then h⁴ else atIndex_lz_lh_₁((n⁰ - 1), t⁶) | LH_N  => error⁰}: 480 --->
//│ 	[LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh_₁(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)]: 124
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C a⁰ enumFromThenTo_lh_₂(t⁰, ((2 * t⁰) - a⁰), b⁰)]: 65 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(_lh_nextSize_Wheel_1⁰) | LH_N  => [LH_N]}: 262
//│ [LH_N]: 66 --->
//│ 	case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(_lh_nextSize_Wheel_1⁰) | LH_N  => [LH_N]}: 262
//│ [LH_C a¹ enumFromThenTo_lh_₁(t¹, ((2 * t¹) - a¹), b¹)]: 102 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰) | LH_N  => [LH_N]}: 339
//│ [LH_N]: 103 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰) | LH_N  => [LH_N]}: 339
//│ [LH_N]: 248 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 240
//│ [LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]: 249 --->
//│ 	case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 240
//│ [LH_N]: 325 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)}: 317
//│ [LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]: 326 --->
//│ 	case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)}: 317
//│ [LH_C _lh_sieve_Wheel_0⁰ enumFromThenTo_lh_₁((_lh_sieve_Wheel_0⁰ * 2), (_lh_sieve_Wheel_0⁰ * 3), (min_lh_₁((_lh_sieve_arg4⁰ * _lh_sieve_arg4⁰), (head_lz_lh_₁(_lh_sieve_arg2⁰) - 1)) * _lh_sieve_Wheel_0⁰))]: 376 --->
//│ 	case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰) | LH_N  => [LH_N]}: 339
//│ ------------------
//│ case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}: 240 --->
//│ 	[LH_N]: 248
//│ 	[LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]: 249
//│ case _lh_listcomp_fun_para⁰ of {LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => if ((_lh_listcomp_fun_ls_h² % _lh_nextSize_arg2⁰) > 0) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²) | LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)})
//│ in _lh_listcomp_fun²([LH_C (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰) [LH_N]]) | LH_N  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)})
//│ in _lh_listcomp_fun¹(_lh_nextSize_Wheel_1⁰) | LH_N  => [LH_N]}: 262 --->
//│ 	[LH_C a⁰ enumFromThenTo_lh_₂(t⁰, ((2 * t⁰) - a⁰), b⁰)]: 65
//│ 	[LH_N]: 66
//│ case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)}: 317 --->
//│ 	[LH_N]: 325
//│ 	[LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]: 326
//│ case _lh_listcomp_fun_para³ of {LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => if noFactor_lh_₁(_lh_sieve_Wheel_0⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)] else _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵) | LH_N  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)})
//│ in _lh_listcomp_fun⁵([LH_C (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³) [LH_N]]) | LH_N  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)})
//│ in _lh_listcomp_fun⁴(_lh_sieve_Wheel_1⁰) | LH_N  => [LH_N]}: 339 --->
//│ 	[LH_C a¹ enumFromThenTo_lh_₁(t¹, ((2 * t¹) - a¹), b¹)]: 102
//│ 	[LH_N]: 103
//│ 	[LH_C _lh_sieve_Wheel_0⁰ enumFromThenTo_lh_₁((_lh_sieve_Wheel_0⁰ * 2), (_lh_sieve_Wheel_0⁰ * 3), (min_lh_₁((_lh_sieve_arg4⁰ * _lh_sieve_arg4⁰), (head_lz_lh_₁(_lh_sieve_arg2⁰) - 1)) * _lh_sieve_Wheel_0⁰))]: 376
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testWheelSieve1_nofib_lh_₁(primId⁰(1000))
//│ def append_lz_lh_₁(_lh_append_lz_arg1¹, _lh_append_lz_arg2¹) = 
//│ 	let _lh_matchIdent⁷ = _lh_append_lz_arg1¹
//│ 	in case _lh_matchIdent⁷ of {
//│ 		LH_C _lh_append_lz_LH_C_0⁰ _lh_append_lz_LH_C_1⁰ => lazy⁰([LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh_₁(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2¹)])
//│ 		| LH_N  => _lh_append_lz_arg2¹
//│ 		| _  => error⁰}
//│ def atIndex_lz_lh_₁(n¹, ls⁷) = if (n¹ < 0) then error⁰ else case force⁰(ls⁷) of {
//│ 	LH_C h⁴ t⁶ => if (n¹ == 0) then h⁴ else atIndex_lz_lh_₁((n¹ - 1), t⁶)
//│ 	| LH_N  => error⁰}
//│ def enumFromThenTo_lh_₁(a², t⁷, b²) = if (a² <= b²) then 
//│ 	let _lh_listcomp_fun_ls_t¹⁰ = enumFromThenTo_lh_₁(t⁷, ((2 * t⁷) - a²), b²)
//│ 	in let _lh_listcomp_fun_ls_h⁸ = a²
//│ 	in (fun _lh_listcomp_fun¹⁴ -> (fun _lh_sieve_Wheel_0⁴ -> (fun _lh_sieve_Wheel_1² -> (fun _lh_sieve_arg2⁵ -> (fun _lh_sieve_arg3⁵ -> 
//│ 		let _lh_listcomp_fun¹⁵ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => 
//│ 				let _lh_listcomp_fun¹⁶ = (fun _lh_listcomp_fun_para¹⁰ -> _lh_listcomp_fun_para¹⁰(_lh_listcomp_fun¹⁶, _lh_sieve_Wheel_0⁴, _lh_sieve_arg2⁵, _lh_sieve_arg3⁵, _lh_listcomp_fun_ls_t⁴, _lh_listcomp_fun¹⁵))
//│ 				in _lh_listcomp_fun¹⁶(
//│ 					let _lh_listcomp_fun_ls_t¹¹ = (fun _lh_listcomp_fun¹⁹ -> (fun _lh_sieve_Wheel_0⁶ -> (fun _lh_sieve_arg2⁷ -> (fun _lh_sieve_arg3⁷ -> (fun _lh_listcomp_fun_ls_t¹³ -> (fun _lh_listcomp_fun²⁰ -> _lh_listcomp_fun²⁰(_lh_listcomp_fun_ls_t¹³)))))))
//│ 					in let _lh_listcomp_fun_ls_h⁹ = (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h⁸)
//│ 					in (fun _lh_listcomp_fun¹⁷ -> (fun _lh_sieve_Wheel_0⁵ -> (fun _lh_sieve_arg2⁶ -> (fun _lh_sieve_arg3⁶ -> (fun _lh_listcomp_fun_ls_t¹² -> (fun _lh_listcomp_fun¹⁸ -> if noFactor_lh_₁(_lh_sieve_Wheel_0⁵, _lh_sieve_arg2⁶, _lh_sieve_arg3⁶, _lh_listcomp_fun_ls_h⁹) then [LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun¹⁷(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹⁷(_lh_listcomp_fun_ls_t¹¹))))))))
//│ 			| LH_N  => _lh_listcomp_fun¹⁴(_lh_listcomp_fun_ls_t¹⁰)})
//│ 		in _lh_listcomp_fun¹⁵(_lh_sieve_Wheel_1²)))))) else (fun _lh_listcomp_fun²¹ -> (fun _lh_sieve_Wheel_0⁷ -> (fun _lh_sieve_Wheel_1³ -> (fun _lh_sieve_arg2⁸ -> (fun _lh_sieve_arg3⁸ -> [LH_N])))))
//│ def enumFromThenTo_lh_₂(a³, t⁸, b³) = if (a³ <= b³) then 
//│ 	let _lh_listcomp_fun_ls_t¹⁴ = enumFromThenTo_lh_₂(t⁸, ((2 * t⁸) - a³), b³)
//│ 	in let _lh_listcomp_fun_ls_h¹⁰ = a³
//│ 	in (fun _lh_listcomp_fun²³ -> (fun _lh_nextSize_Wheel_1¹ -> (fun _lh_nextSize_arg2² -> 
//│ 		let _lh_listcomp_fun²⁴ = (fun _lh_listcomp_fun_para¹² -> case _lh_listcomp_fun_para¹² of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => 
//│ 				let _lh_listcomp_fun²⁵ = (fun _lh_listcomp_fun_para¹³ -> _lh_listcomp_fun_para¹³(_lh_listcomp_fun²⁵, _lh_nextSize_arg2², _lh_listcomp_fun_ls_t¹, _lh_listcomp_fun²⁴))
//│ 				in _lh_listcomp_fun²⁵(
//│ 					let _lh_listcomp_fun_ls_t¹⁵ = (fun _lh_listcomp_fun²⁸ -> (fun _lh_nextSize_arg2⁴ -> (fun _lh_listcomp_fun_ls_t¹⁷ -> (fun _lh_listcomp_fun²⁹ -> _lh_listcomp_fun²⁹(_lh_listcomp_fun_ls_t¹⁷)))))
//│ 					in let _lh_listcomp_fun_ls_h¹¹ = (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h¹⁰)
//│ 					in (fun _lh_listcomp_fun²⁶ -> (fun _lh_nextSize_arg2³ -> (fun _lh_listcomp_fun_ls_t¹⁶ -> (fun _lh_listcomp_fun²⁷ -> if ((_lh_listcomp_fun_ls_h¹¹ % _lh_nextSize_arg2³) > 0) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun²⁶(_lh_listcomp_fun_ls_t¹⁵)] else _lh_listcomp_fun²⁶(_lh_listcomp_fun_ls_t¹⁵))))))
//│ 			| LH_N  => _lh_listcomp_fun²³(_lh_listcomp_fun_ls_t¹⁴)})
//│ 		in _lh_listcomp_fun²⁴(_lh_nextSize_Wheel_1¹)))) else (fun _lh_listcomp_fun³⁰ -> (fun _lh_nextSize_Wheel_1² -> (fun _lh_nextSize_arg2⁵ -> [LH_N])))
//│ def head_lz_lh_₁(ls⁶) = case force⁰(ls⁶) of {
//│ 	LH_C h⁰ t² => h⁰
//│ 	| LH_N  => error⁰}
//│ def map_lz_lh_₁(f², ls⁵) = lazy⁰(case force⁰(ls⁵) of {
//│ 	LH_C h³ t⁵ => [LH_C f²(h³) map_lz_lh_₁(f², t⁵)]
//│ 	| LH_N  => [LH_N]})
//│ def min_lh_₁(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ def nextSize_lh_₁(_lh_nextSize_arg1¹, _lh_nextSize_arg2¹) = case _lh_nextSize_arg1¹ of {
//│ 	Wheel _lh_nextSize_Wheel_0⁰ _lh_nextSize_Wheel_1⁰ => [Wheel (_lh_nextSize_Wheel_0⁰ * _lh_nextSize_arg2¹) 
//│ 		let _lh_listcomp_fun²² = (fun _lh_listcomp_fun_para¹¹ -> _lh_listcomp_fun_para¹¹(_lh_listcomp_fun²², _lh_nextSize_Wheel_1⁰, _lh_nextSize_arg2¹))
//│ 		in _lh_listcomp_fun²²(enumFromThenTo_lh_₂(0, _lh_nextSize_Wheel_0⁰, ((_lh_nextSize_arg2¹ - 1) * _lh_nextSize_Wheel_0⁰)))]
//│ 	| _  => error⁰}
//│ def noFactor_lh_₁(_lh_noFactor_arg1¹, _lh_noFactor_arg2¹, _lh_noFactor_arg3¹, _lh_noFactor_arg4¹) = if (_lh_noFactor_arg1¹ <= 2) then [True] else notDivBy_lh_₁(_lh_noFactor_arg2¹, _lh_noFactor_arg3¹, _lh_noFactor_arg4¹)
//│ def notDivBy_lh_₁(_lh_notDivBy_arg1¹, _lh_notDivBy_arg2¹, _lh_notDivBy_arg3¹) = 
//│ 	let _lh_matchIdent⁵ = force⁰(_lh_notDivBy_arg2¹)
//│ 	in case _lh_matchIdent⁵ of {
//│ 		LH_C _lh_notDivBy_LH_C_0⁰ _lh_notDivBy_LH_C_1⁰ => if (_lh_notDivBy_LH_C_0⁰ > _lh_notDivBy_arg3¹) then [True] else 
//│ 			let _lh_matchIdent⁶ = force⁰(_lh_notDivBy_arg1¹)
//│ 			in case _lh_matchIdent⁶ of {
//│ 				LH_C _lh_notDivBy_LH_C_0¹ _lh_notDivBy_LH_C_1¹ => (((_lh_notDivBy_arg3¹ % _lh_notDivBy_LH_C_0¹) > 0) && notDivBy_lh_₁(_lh_notDivBy_LH_C_1¹, _lh_notDivBy_LH_C_1⁰, _lh_notDivBy_arg3¹))
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ def prime_lh_₁(_lh_prime_arg1¹) = atIndex_lz_lh_₁(_lh_prime_arg1¹, primes_lh_₁(_lh_prime_arg1¹))
//│ def primes_lh_₁(_lh_primes_arg1¹) = lazy⁰(sieve_lh_₁(wheels_lh_₁(primes_lh_₁(_lh_primes_arg1¹)), primes_lh_₁(_lh_primes_arg1¹), squares_lh_₁(primes_lh_₁(_lh_primes_arg1¹)), _lh_primes_arg1¹))
//│ def sieve_lh_₁(_lh_sieve_arg1¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_sieve_arg4¹) = 
//│ 	let _lh_matchIdent⁴ = force⁰(_lh_sieve_arg1¹)
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_C _lh_sieve_LH_C_0⁰ _lh_sieve_LH_C_1⁰ => case _lh_sieve_LH_C_0⁰ of {
//│ 			Wheel _lh_sieve_Wheel_0⁰ _lh_sieve_Wheel_1⁰ => append_lz_lh_₁(
//│ 				let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> _lh_listcomp_fun_para⁶(_lh_listcomp_fun⁶, _lh_sieve_Wheel_0⁰, _lh_sieve_Wheel_1⁰, _lh_sieve_arg2¹, _lh_sieve_arg3¹))
//│ 				in _lh_listcomp_fun⁶(
//│ 					let _lh_listcomp_fun_ls_t⁶ = enumFromThenTo_lh_₁((_lh_sieve_Wheel_0⁰ * 2), (_lh_sieve_Wheel_0⁰ * 3), (min_lh_₁((_lh_sieve_arg4¹ * _lh_sieve_arg4¹), (head_lz_lh_₁(_lh_sieve_arg2¹) - 1)) * _lh_sieve_Wheel_0⁰))
//│ 					in let _lh_listcomp_fun_ls_h⁶ = _lh_sieve_Wheel_0⁰
//│ 					in (fun _lh_listcomp_fun⁷ -> (fun _lh_sieve_Wheel_0¹ -> (fun _lh_sieve_Wheel_1¹ -> (fun _lh_sieve_arg2² -> (fun _lh_sieve_arg3² -> 
//│ 						let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 							LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => 
//│ 								let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁸ -> _lh_listcomp_fun_para⁸(_lh_listcomp_fun⁹, _lh_sieve_Wheel_0¹, _lh_sieve_arg2², _lh_sieve_arg3², _lh_listcomp_fun_ls_t⁴, _lh_listcomp_fun⁸))
//│ 								in _lh_listcomp_fun⁹(
//│ 									let _lh_listcomp_fun_ls_t⁷ = (fun _lh_listcomp_fun¹² -> (fun _lh_sieve_Wheel_0³ -> (fun _lh_sieve_arg2⁴ -> (fun _lh_sieve_arg3⁴ -> (fun _lh_listcomp_fun_ls_t⁹ -> (fun _lh_listcomp_fun¹³ -> _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁹)))))))
//│ 									in let _lh_listcomp_fun_ls_h⁷ = (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h⁶)
//│ 									in (fun _lh_listcomp_fun¹⁰ -> (fun _lh_sieve_Wheel_0² -> (fun _lh_sieve_arg2³ -> (fun _lh_sieve_arg3³ -> (fun _lh_listcomp_fun_ls_t⁸ -> (fun _lh_listcomp_fun¹¹ -> if noFactor_lh_₁(_lh_sieve_Wheel_0², _lh_sieve_arg2³, _lh_sieve_arg3³, _lh_listcomp_fun_ls_h⁷) then [LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t⁷))))))))
//│ 							| LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁶)})
//│ 						in _lh_listcomp_fun⁸(_lh_sieve_Wheel_1¹))))))), sieve_lh_₁(_lh_sieve_LH_C_1⁰, tail_lz_lh_₁(_lh_sieve_arg2¹), tail_lz_lh_₂(_lh_sieve_arg3¹), _lh_sieve_arg4¹))
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ def squares_lh_₁(_lh_squares_arg1¹) = map_lz_lh_₁((fun p¹ -> (p¹ * p¹)), _lh_squares_arg1¹)
//│ def tail_lz_lh_₁(ls⁹) = case force⁰(ls⁹) of {
//│ 	LH_C h² t⁴ => t⁴
//│ 	| LH_N  => error⁰}
//│ def tail_lz_lh_₂(ls⁸) = case force⁰(ls⁸) of {
//│ 	LH_C h¹ t³ => t³
//│ 	| LH_N  => error⁰}
//│ def testWheelSieve1_nofib_lh_₁(_lh_testWheelSieve1_nofib_arg1¹) = prime_lh_₁(_lh_testWheelSieve1_nofib_arg1¹)
//│ def wheels_lh_₁(_lh_wheels_arg1¹) = lazy⁰([LH_C [Wheel 1 [LH_C 1 [LH_N]]] zipWith_lz_lz_lh_₁(nextSize_lh_₁, wheels_lh_₁(_lh_wheels_arg1¹), _lh_wheels_arg1¹)])
//│ def zipWith_lz_lz_lh_₁(f³, xs¹, ys¹) = lazy⁰(case force⁰(xs¹) of {
//│ 	LH_C hx⁰ tx⁰ => case force⁰(ys¹) of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C f³(hx⁰, hy⁰) zipWith_lz_lz_lh_₁(f³, tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ recursive consumer: sieve_lh_₁
//│ nextSize_lh_₁
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ enumFromThenTo_lh_₁ -> 3
//│ enumFromThenTo_lh_₂ -> 3
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ testWheelSieve1_nofib_lh_₁(primId⁰(1000))
//│ def append_lz_lh_₁(_lh_append_lz_arg1⁰, _lh_append_lz_arg2⁰) = 
//│ 	let _lh_matchIdent³ = _lh_append_lz_arg1⁰
//│ 	in case _lh_matchIdent³ of {
//│ 		LH_C _lh_append_lz_LH_C_0⁰ _lh_append_lz_LH_C_1⁰ => lazy⁰([LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh_₁(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)])
//│ 		| LH_N  => _lh_append_lz_arg2⁰
//│ 		| _  => error⁰}
//│ def atIndex_lz_lh_₁(n⁰, ls²) = if (n⁰ < 0) then error⁰ else case force⁰(ls²) of {
//│ 	LH_C h² t² => if (n⁰ == 0) then h² else atIndex_lz_lh_₁((n⁰ - 1), t²)
//│ 	| LH_N  => error⁰}
//│ def enumFromThenTo_lh_₁(a⁰, t³, b⁰) = if (a⁰ <= b⁰) then 
//│ 	let _lh_listcomp_fun_ls_t⁵ = enumFromThenTo_lh_₁(t³, ((2 * t³) - a⁰), b⁰)
//│ 	in let _lh_listcomp_fun_ls_h³ = a⁰
//│ 	in (fun _lh_listcomp_fun⁸ -> (fun _lh_sieve_Wheel_0⁴ -> (fun _lh_sieve_Wheel_1² -> (fun _lh_sieve_arg2⁴ -> (fun _lh_sieve_arg3⁴ -> 
//│ 		let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁶ => 
//│ 				let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para⁴ -> _lh_listcomp_fun_para⁴(_lh_listcomp_fun¹⁰, _lh_sieve_Wheel_0⁴, _lh_sieve_arg2⁴, _lh_sieve_arg3⁴, _lh_listcomp_fun_ls_t⁶, _lh_listcomp_fun⁹))
//│ 				in _lh_listcomp_fun¹⁰(
//│ 					let _lh_listcomp_fun_ls_t⁷ = (fun _lh_listcomp_fun¹¹ -> (fun _lh_sieve_Wheel_0⁵ -> (fun _lh_sieve_arg2⁵ -> (fun _lh_sieve_arg3⁵ -> (fun _lh_listcomp_fun_ls_t⁸ -> (fun _lh_listcomp_fun¹² -> _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁸)))))))
//│ 					in let _lh_listcomp_fun_ls_h⁵ = (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³)
//│ 					in (fun _lh_listcomp_fun¹³ -> (fun _lh_sieve_Wheel_0⁶ -> (fun _lh_sieve_arg2⁶ -> (fun _lh_sieve_arg3⁶ -> (fun _lh_listcomp_fun_ls_t⁹ -> (fun _lh_listcomp_fun¹⁴ -> if noFactor_lh_₁(_lh_sieve_Wheel_0⁶, _lh_sieve_arg2⁶, _lh_sieve_arg3⁶, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷))))))))
//│ 			| LH_N  => _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁵)})
//│ 		in _lh_listcomp_fun⁹(_lh_sieve_Wheel_1²)))))) else (fun _lh_listcomp_fun¹⁵ -> (fun _lh_sieve_Wheel_0⁷ -> (fun _lh_sieve_Wheel_1³ -> (fun _lh_sieve_arg2⁷ -> (fun _lh_sieve_arg3⁷ -> [LH_N])))))
//│ def enumFromThenTo_lh_₂(a¹, t⁴, b¹) = if (a¹ <= b¹) then 
//│ 	let _lh_listcomp_fun_ls_t¹⁰ = enumFromThenTo_lh_₂(t⁴, ((2 * t⁴) - a¹), b¹)
//│ 	in let _lh_listcomp_fun_ls_h⁶ = a¹
//│ 	in (fun _lh_listcomp_fun¹⁷ -> (fun _lh_nextSize_Wheel_1¹ -> (fun _lh_nextSize_arg2¹ -> 
//│ 		let _lh_listcomp_fun¹⁸ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t¹¹ => 
//│ 				let _lh_listcomp_fun¹⁹ = (fun _lh_listcomp_fun_para⁷ -> _lh_listcomp_fun_para⁷(_lh_listcomp_fun¹⁹, _lh_nextSize_arg2¹, _lh_listcomp_fun_ls_t¹¹, _lh_listcomp_fun¹⁸))
//│ 				in _lh_listcomp_fun¹⁹(
//│ 					let _lh_listcomp_fun_ls_t¹² = (fun _lh_listcomp_fun²⁰ -> (fun _lh_nextSize_arg2² -> (fun _lh_listcomp_fun_ls_t¹³ -> (fun _lh_listcomp_fun²¹ -> _lh_listcomp_fun²¹(_lh_listcomp_fun_ls_t¹³)))))
//│ 					in let _lh_listcomp_fun_ls_h⁸ = (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶)
//│ 					in (fun _lh_listcomp_fun²² -> (fun _lh_nextSize_arg2³ -> (fun _lh_listcomp_fun_ls_t¹⁴ -> (fun _lh_listcomp_fun²³ -> if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2³) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun²²(_lh_listcomp_fun_ls_t¹²)] else _lh_listcomp_fun²²(_lh_listcomp_fun_ls_t¹²))))))
//│ 			| LH_N  => _lh_listcomp_fun¹⁷(_lh_listcomp_fun_ls_t¹⁰)})
//│ 		in _lh_listcomp_fun¹⁸(_lh_nextSize_Wheel_1¹)))) else (fun _lh_listcomp_fun²⁴ -> (fun _lh_nextSize_Wheel_1² -> (fun _lh_nextSize_arg2⁴ -> [LH_N])))
//│ def head_lz_lh_₁(ls¹) = case force⁰(ls¹) of {
//│ 	LH_C h¹ t¹ => h¹
//│ 	| LH_N  => error⁰}
//│ def map_lz_lh_₁(f⁰, ls⁰) = lazy⁰(case force⁰(ls⁰) of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh_₁(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]})
//│ def min_lh_₁(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ > _lh_min_arg2⁰) then _lh_min_arg2⁰ else _lh_min_arg1⁰
//│ def nextSize_lh_₁(_lh_nextSize_arg1⁰, _lh_nextSize_arg2⁰) = case _lh_nextSize_arg1⁰ of {
//│ 	Wheel _lh_nextSize_Wheel_0⁰ _lh_nextSize_Wheel_1⁰ => [Wheel (_lh_nextSize_Wheel_0⁰ * _lh_nextSize_arg2⁰) 
//│ 		let _lh_listcomp_fun¹⁶ = (fun _lh_listcomp_fun_para⁵ -> _lh_listcomp_fun_para⁵(_lh_listcomp_fun¹⁶, _lh_nextSize_Wheel_1⁰, _lh_nextSize_arg2⁰))
//│ 		in _lh_listcomp_fun¹⁶(enumFromThenTo_lh_₂(0, _lh_nextSize_Wheel_0⁰, ((_lh_nextSize_arg2⁰ - 1) * _lh_nextSize_Wheel_0⁰)))]
//│ 	| _  => error⁰}
//│ def noFactor_lh_₁(_lh_noFactor_arg1⁰, _lh_noFactor_arg2⁰, _lh_noFactor_arg3⁰, _lh_noFactor_arg4⁰) = if (_lh_noFactor_arg1⁰ <= 2) then [True] else notDivBy_lh_₁(_lh_noFactor_arg2⁰, _lh_noFactor_arg3⁰, _lh_noFactor_arg4⁰)
//│ def notDivBy_lh_₁(_lh_notDivBy_arg1⁰, _lh_notDivBy_arg2⁰, _lh_notDivBy_arg3⁰) = 
//│ 	let _lh_matchIdent¹ = force⁰(_lh_notDivBy_arg2⁰)
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_C _lh_notDivBy_LH_C_0⁰ _lh_notDivBy_LH_C_1⁰ => if (_lh_notDivBy_LH_C_0⁰ > _lh_notDivBy_arg3⁰) then [True] else 
//│ 			let _lh_matchIdent² = force⁰(_lh_notDivBy_arg1⁰)
//│ 			in case _lh_matchIdent² of {
//│ 				LH_C _lh_notDivBy_LH_C_0¹ _lh_notDivBy_LH_C_1¹ => (((_lh_notDivBy_arg3⁰ % _lh_notDivBy_LH_C_0¹) > 0) && notDivBy_lh_₁(_lh_notDivBy_LH_C_1¹, _lh_notDivBy_LH_C_1⁰, _lh_notDivBy_arg3⁰))
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ def prime_lh_₁(_lh_prime_arg1⁰) = atIndex_lz_lh_₁(_lh_prime_arg1⁰, primes_lh_₁(_lh_prime_arg1⁰))
//│ def primes_lh_₁(_lh_primes_arg1⁰) = lazy⁰(sieve_lh_₁(wheels_lh_₁(primes_lh_₁(_lh_primes_arg1⁰)), primes_lh_₁(_lh_primes_arg1⁰), squares_lh_₁(primes_lh_₁(_lh_primes_arg1⁰)), _lh_primes_arg1⁰))
//│ def sieve_lh_₁(_lh_sieve_arg1⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_sieve_arg4⁰) = 
//│ 	let _lh_matchIdent⁰ = force⁰(_lh_sieve_arg1⁰)
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_C _lh_sieve_LH_C_0⁰ _lh_sieve_LH_C_1⁰ => case _lh_sieve_LH_C_0⁰ of {
//│ 			Wheel _lh_sieve_Wheel_0⁰ _lh_sieve_Wheel_1⁰ => append_lz_lh_₁(
//│ 				let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> _lh_listcomp_fun_para⁰(_lh_listcomp_fun⁰, _lh_sieve_Wheel_0⁰, _lh_sieve_Wheel_1⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰))
//│ 				in _lh_listcomp_fun⁰(
//│ 					let _lh_listcomp_fun_ls_t⁰ = enumFromThenTo_lh_₁((_lh_sieve_Wheel_0⁰ * 2), (_lh_sieve_Wheel_0⁰ * 3), (min_lh_₁((_lh_sieve_arg4⁰ * _lh_sieve_arg4⁰), (head_lz_lh_₁(_lh_sieve_arg2⁰) - 1)) * _lh_sieve_Wheel_0⁰))
//│ 					in let _lh_listcomp_fun_ls_h⁰ = _lh_sieve_Wheel_0⁰
//│ 					in (fun _lh_listcomp_fun¹ -> (fun _lh_sieve_Wheel_0¹ -> (fun _lh_sieve_Wheel_1¹ -> (fun _lh_sieve_arg2¹ -> (fun _lh_sieve_arg3¹ -> 
//│ 						let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 							LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => 
//│ 								let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun³, _lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_t¹, _lh_listcomp_fun²))
//│ 								in _lh_listcomp_fun³(
//│ 									let _lh_listcomp_fun_ls_t² = (fun _lh_listcomp_fun⁴ -> (fun _lh_sieve_Wheel_0² -> (fun _lh_sieve_arg2² -> (fun _lh_sieve_arg3² -> (fun _lh_listcomp_fun_ls_t³ -> (fun _lh_listcomp_fun⁵ -> _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t³)))))))
//│ 									in let _lh_listcomp_fun_ls_h² = (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰)
//│ 									in (fun _lh_listcomp_fun⁶ -> (fun _lh_sieve_Wheel_0³ -> (fun _lh_sieve_arg2³ -> (fun _lh_sieve_arg3³ -> (fun _lh_listcomp_fun_ls_t⁴ -> (fun _lh_listcomp_fun⁷ -> if noFactor_lh_₁(_lh_sieve_Wheel_0³, _lh_sieve_arg2³, _lh_sieve_arg3³, _lh_listcomp_fun_ls_h²) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t²))))))))
//│ 							| LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t⁰)})
//│ 						in _lh_listcomp_fun²(_lh_sieve_Wheel_1¹))))))), sieve_lh_₁(_lh_sieve_LH_C_1⁰, tail_lz_lh_₁(_lh_sieve_arg2⁰), tail_lz_lh_₂(_lh_sieve_arg3⁰), _lh_sieve_arg4⁰))
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ def squares_lh_₁(_lh_squares_arg1⁰) = map_lz_lh_₁((fun p⁰ -> (p⁰ * p⁰)), _lh_squares_arg1⁰)
//│ def tail_lz_lh_₁(ls⁴) = case force⁰(ls⁴) of {
//│ 	LH_C h⁴ t⁶ => t⁶
//│ 	| LH_N  => error⁰}
//│ def tail_lz_lh_₂(ls³) = case force⁰(ls³) of {
//│ 	LH_C h³ t⁵ => t⁵
//│ 	| LH_N  => error⁰}
//│ def testWheelSieve1_nofib_lh_₁(_lh_testWheelSieve1_nofib_arg1⁰) = prime_lh_₁(_lh_testWheelSieve1_nofib_arg1⁰)
//│ def wheels_lh_₁(_lh_wheels_arg1⁰) = lazy⁰([LH_C [Wheel 1 [LH_C 1 [LH_N]]] zipWith_lz_lz_lh_₁(nextSize_lh_₁, wheels_lh_₁(_lh_wheels_arg1⁰), _lh_wheels_arg1⁰)])
//│ def zipWith_lz_lz_lh_₁(f¹, xs⁰, ys⁰) = lazy⁰(case force⁰(xs⁰) of {
//│ 	LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₁(f¹, tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ testWheelSieve1_nofib_lh_₁(primId⁰(1000))
//│ def append_lz_lh_₁(_lh_append_lz_arg1⁰, _lh_append_lz_arg2⁰) = 
//│ 	let _lh_matchIdent³ = _lh_append_lz_arg1⁰
//│ 	in case _lh_matchIdent³ of {
//│ 		LH_C _lh_append_lz_LH_C_0⁰ _lh_append_lz_LH_C_1⁰ => lazy⁰([LH_C _lh_append_lz_LH_C_0⁰ append_lz_lh_₁(_lh_append_lz_LH_C_1⁰, _lh_append_lz_arg2⁰)])
//│ 		| LH_N  => _lh_append_lz_arg2⁰
//│ 		| _  => error⁰}
//│ def atIndex_lz_lh_₁(n⁰, ls²) = if (n⁰ < 0) then error⁰ else case force⁰(ls²) of {
//│ 	LH_C h² t² => if (n⁰ == 0) then h² else atIndex_lz_lh_₁((n⁰ - 1), t²)
//│ 	| LH_N  => error⁰}
//│ def enumFromThenTo_lh_₁(a⁰, t³, b⁰) = if (a⁰ <= b⁰) then 
//│ 	let _lh_listcomp_fun_ls_t⁵ = enumFromThenTo_lh_₁(t³, ((2 * t³) - a⁰), b⁰)
//│ 	in let _lh_listcomp_fun_ls_h³ = a⁰
//│ 	in (fun _lh_listcomp_fun⁸ -> (fun _lh_sieve_Wheel_0⁴ -> (fun _lh_sieve_Wheel_1² -> (fun _lh_sieve_arg2⁴ -> (fun _lh_sieve_arg3⁴ -> 
//│ 		let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁶ => 
//│ 				let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para⁴ -> _lh_listcomp_fun_para⁴(_lh_listcomp_fun¹⁰, _lh_sieve_Wheel_0⁴, _lh_sieve_arg2⁴, _lh_sieve_arg3⁴, _lh_listcomp_fun_ls_t⁶, _lh_listcomp_fun⁹))
//│ 				in _lh_listcomp_fun¹⁰(
//│ 					let _lh_listcomp_fun_ls_t⁷ = (fun _lh_listcomp_fun¹¹ -> (fun _lh_sieve_Wheel_0⁵ -> (fun _lh_sieve_arg2⁵ -> (fun _lh_sieve_arg3⁵ -> (fun _lh_listcomp_fun_ls_t⁸ -> (fun _lh_listcomp_fun¹² -> _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t⁸)))))))
//│ 					in let _lh_listcomp_fun_ls_h⁵ = (_lh_listcomp_fun_ls_h⁴ + _lh_listcomp_fun_ls_h³)
//│ 					in (fun _lh_listcomp_fun¹³ -> (fun _lh_sieve_Wheel_0⁶ -> (fun _lh_sieve_arg2⁶ -> (fun _lh_sieve_arg3⁶ -> (fun _lh_listcomp_fun_ls_t⁹ -> (fun _lh_listcomp_fun¹⁴ -> if noFactor_lh_₁(_lh_sieve_Wheel_0⁶, _lh_sieve_arg2⁶, _lh_sieve_arg3⁶, _lh_listcomp_fun_ls_h⁵) then [LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷)] else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t⁷))))))))
//│ 			| LH_N  => _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁵)})
//│ 		in _lh_listcomp_fun⁹(_lh_sieve_Wheel_1²)))))) else (fun _lh_listcomp_fun¹⁵ -> (fun _lh_sieve_Wheel_0⁷ -> (fun _lh_sieve_Wheel_1³ -> (fun _lh_sieve_arg2⁷ -> (fun _lh_sieve_arg3⁷ -> [LH_N])))))
//│ def enumFromThenTo_lh_₂(a¹, t⁴, b¹) = if (a¹ <= b¹) then 
//│ 	let _lh_listcomp_fun_ls_t¹⁰ = enumFromThenTo_lh_₂(t⁴, ((2 * t⁴) - a¹), b¹)
//│ 	in let _lh_listcomp_fun_ls_h⁶ = a¹
//│ 	in (fun _lh_listcomp_fun¹⁷ -> (fun _lh_nextSize_Wheel_1¹ -> (fun _lh_nextSize_arg2¹ -> 
//│ 		let _lh_listcomp_fun¹⁸ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t¹¹ => 
//│ 				let _lh_listcomp_fun¹⁹ = (fun _lh_listcomp_fun_para⁷ -> _lh_listcomp_fun_para⁷(_lh_listcomp_fun¹⁹, _lh_nextSize_arg2¹, _lh_listcomp_fun_ls_t¹¹, _lh_listcomp_fun¹⁸))
//│ 				in _lh_listcomp_fun¹⁹(
//│ 					let _lh_listcomp_fun_ls_t¹² = (fun _lh_listcomp_fun²⁰ -> (fun _lh_nextSize_arg2² -> (fun _lh_listcomp_fun_ls_t¹³ -> (fun _lh_listcomp_fun²¹ -> _lh_listcomp_fun²¹(_lh_listcomp_fun_ls_t¹³)))))
//│ 					in let _lh_listcomp_fun_ls_h⁸ = (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶)
//│ 					in (fun _lh_listcomp_fun²² -> (fun _lh_nextSize_arg2³ -> (fun _lh_listcomp_fun_ls_t¹⁴ -> (fun _lh_listcomp_fun²³ -> if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2³) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun²²(_lh_listcomp_fun_ls_t¹²)] else _lh_listcomp_fun²²(_lh_listcomp_fun_ls_t¹²))))))
//│ 			| LH_N  => _lh_listcomp_fun¹⁷(_lh_listcomp_fun_ls_t¹⁰)})
//│ 		in _lh_listcomp_fun¹⁸(_lh_nextSize_Wheel_1¹)))) else (fun _lh_listcomp_fun²⁴ -> (fun _lh_nextSize_Wheel_1² -> (fun _lh_nextSize_arg2⁴ -> [LH_N])))
//│ def head_lz_lh_₁(ls¹) = case force⁰(ls¹) of {
//│ 	LH_C h¹ t¹ => h¹
//│ 	| LH_N  => error⁰}
//│ def map_lz_lh_₁(f⁰, ls⁰) = lazy⁰(case force⁰(ls⁰) of {
//│ 	LH_C h⁰ t⁰ => [LH_C f⁰(h⁰) map_lz_lh_₁(f⁰, t⁰)]
//│ 	| LH_N  => [LH_N]})
//│ def min_lh_₁(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ > _lh_min_arg2⁰) then _lh_min_arg2⁰ else _lh_min_arg1⁰
//│ def nextSize_lh_₁(_lh_nextSize_arg1⁰, _lh_nextSize_arg2⁰) = case _lh_nextSize_arg1⁰ of {
//│ 	Wheel _lh_nextSize_Wheel_0⁰ _lh_nextSize_Wheel_1⁰ => [Wheel (_lh_nextSize_Wheel_0⁰ * _lh_nextSize_arg2⁰) 
//│ 		let _lh_listcomp_fun¹⁶ = (fun _lh_listcomp_fun_para⁵ -> _lh_listcomp_fun_para⁵(_lh_listcomp_fun¹⁶, _lh_nextSize_Wheel_1⁰, _lh_nextSize_arg2⁰))
//│ 		in _lh_listcomp_fun¹⁶(enumFromThenTo_lh_₂(0, _lh_nextSize_Wheel_0⁰, ((_lh_nextSize_arg2⁰ - 1) * _lh_nextSize_Wheel_0⁰)))]
//│ 	| _  => error⁰}
//│ def noFactor_lh_₁(_lh_noFactor_arg1⁰, _lh_noFactor_arg2⁰, _lh_noFactor_arg3⁰, _lh_noFactor_arg4⁰) = if (_lh_noFactor_arg1⁰ <= 2) then [True] else notDivBy_lh_₁(_lh_noFactor_arg2⁰, _lh_noFactor_arg3⁰, _lh_noFactor_arg4⁰)
//│ def notDivBy_lh_₁(_lh_notDivBy_arg1⁰, _lh_notDivBy_arg2⁰, _lh_notDivBy_arg3⁰) = 
//│ 	let _lh_matchIdent¹ = force⁰(_lh_notDivBy_arg2⁰)
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_C _lh_notDivBy_LH_C_0⁰ _lh_notDivBy_LH_C_1⁰ => if (_lh_notDivBy_LH_C_0⁰ > _lh_notDivBy_arg3⁰) then [True] else 
//│ 			let _lh_matchIdent² = force⁰(_lh_notDivBy_arg1⁰)
//│ 			in case _lh_matchIdent² of {
//│ 				LH_C _lh_notDivBy_LH_C_0¹ _lh_notDivBy_LH_C_1¹ => (((_lh_notDivBy_arg3⁰ % _lh_notDivBy_LH_C_0¹) > 0) && notDivBy_lh_₁(_lh_notDivBy_LH_C_1¹, _lh_notDivBy_LH_C_1⁰, _lh_notDivBy_arg3⁰))
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ def prime_lh_₁(_lh_prime_arg1⁰) = atIndex_lz_lh_₁(_lh_prime_arg1⁰, primes_lh_₁(_lh_prime_arg1⁰))
//│ def primes_lh_₁(_lh_primes_arg1⁰) = lazy⁰(sieve_lh_₁(wheels_lh_₁(primes_lh_₁(_lh_primes_arg1⁰)), primes_lh_₁(_lh_primes_arg1⁰), squares_lh_₁(primes_lh_₁(_lh_primes_arg1⁰)), _lh_primes_arg1⁰))
//│ def sieve_lh_₁(_lh_sieve_arg1⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰, _lh_sieve_arg4⁰) = 
//│ 	let _lh_matchIdent⁰ = force⁰(_lh_sieve_arg1⁰)
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_C _lh_sieve_LH_C_0⁰ _lh_sieve_LH_C_1⁰ => case _lh_sieve_LH_C_0⁰ of {
//│ 			Wheel _lh_sieve_Wheel_0⁰ _lh_sieve_Wheel_1⁰ => append_lz_lh_₁(
//│ 				let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> _lh_listcomp_fun_para⁰(_lh_listcomp_fun⁰, _lh_sieve_Wheel_0⁰, _lh_sieve_Wheel_1⁰, _lh_sieve_arg2⁰, _lh_sieve_arg3⁰))
//│ 				in _lh_listcomp_fun⁰(
//│ 					let _lh_listcomp_fun_ls_t⁰ = enumFromThenTo_lh_₁((_lh_sieve_Wheel_0⁰ * 2), (_lh_sieve_Wheel_0⁰ * 3), (min_lh_₁((_lh_sieve_arg4⁰ * _lh_sieve_arg4⁰), (head_lz_lh_₁(_lh_sieve_arg2⁰) - 1)) * _lh_sieve_Wheel_0⁰))
//│ 					in let _lh_listcomp_fun_ls_h⁰ = _lh_sieve_Wheel_0⁰
//│ 					in (fun _lh_listcomp_fun¹ -> (fun _lh_sieve_Wheel_0¹ -> (fun _lh_sieve_Wheel_1¹ -> (fun _lh_sieve_arg2¹ -> (fun _lh_sieve_arg3¹ -> 
//│ 						let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 							LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => 
//│ 								let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para² -> _lh_listcomp_fun_para²(_lh_listcomp_fun³, _lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_t¹, _lh_listcomp_fun²))
//│ 								in _lh_listcomp_fun³(
//│ 									let _lh_listcomp_fun_ls_t² = (fun _lh_listcomp_fun⁴ -> (fun _lh_sieve_Wheel_0² -> (fun _lh_sieve_arg2² -> (fun _lh_sieve_arg3² -> (fun _lh_listcomp_fun_ls_t³ -> (fun _lh_listcomp_fun⁵ -> _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t³)))))))
//│ 									in let _lh_listcomp_fun_ls_h² = (_lh_listcomp_fun_ls_h¹ + _lh_listcomp_fun_ls_h⁰)
//│ 									in (fun _lh_listcomp_fun⁶ -> (fun _lh_sieve_Wheel_0³ -> (fun _lh_sieve_arg2³ -> (fun _lh_sieve_arg3³ -> (fun _lh_listcomp_fun_ls_t⁴ -> (fun _lh_listcomp_fun⁷ -> if noFactor_lh_₁(_lh_sieve_Wheel_0³, _lh_sieve_arg2³, _lh_sieve_arg3³, _lh_listcomp_fun_ls_h²) then [LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t²)] else _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t²))))))))
//│ 							| LH_N  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t⁰)})
//│ 						in _lh_listcomp_fun²(_lh_sieve_Wheel_1¹))))))), sieve_lh_₁(_lh_sieve_LH_C_1⁰, tail_lz_lh_₁(_lh_sieve_arg2⁰), tail_lz_lh_₂(_lh_sieve_arg3⁰), _lh_sieve_arg4⁰))
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ def squares_lh_₁(_lh_squares_arg1⁰) = map_lz_lh_₁((fun p⁰ -> (p⁰ * p⁰)), _lh_squares_arg1⁰)
//│ def tail_lz_lh_₁(ls⁴) = case force⁰(ls⁴) of {
//│ 	LH_C h⁴ t⁶ => t⁶
//│ 	| LH_N  => error⁰}
//│ def tail_lz_lh_₂(ls³) = case force⁰(ls³) of {
//│ 	LH_C h³ t⁵ => t⁵
//│ 	| LH_N  => error⁰}
//│ def testWheelSieve1_nofib_lh_₁(_lh_testWheelSieve1_nofib_arg1⁰) = prime_lh_₁(_lh_testWheelSieve1_nofib_arg1⁰)
//│ def wheels_lh_₁(_lh_wheels_arg1⁰) = lazy⁰([LH_C [Wheel 1 [LH_C 1 [LH_N]]] zipWith_lz_lz_lh_₁(nextSize_lh_₁, wheels_lh_₁(_lh_wheels_arg1⁰), _lh_wheels_arg1⁰)])
//│ def zipWith_lz_lz_lh_₁(f¹, xs⁰, ys⁰) = lazy⁰(case force⁰(xs⁰) of {
//│ 	LH_C hx⁰ tx⁰ => case force⁰(ys⁰) of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C f¹(hx⁰, hy⁰) zipWith_lz_lz_lh_₁(f¹, tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ <<<<<<< after floating out <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
