:NewParser
:ParseOnly

// prime :: Int -> Int
// prime n = primes !! n
//   where
//     primes = sieve (wheels primes) primes (squares primes) n

// sieve (Wheel s ns:ws) ps qs input =
//   -- It's always the case that input*input > head ps,
//   -- but GHC doesn't know that. We do this so that stuff
//   -- isn't floated to top-level into a CAF.
//   [n' | o <- s:[s*2,s*3..(min (input*input) (head ps-1))*s],
//         n <- ns,
//         n'<- [n+o], noFactor n']
//   ++
//   sieve ws (tail ps) (tail qs) input
//   where
//   noFactor = if s<=2 then const True else notDivBy ps qs

// notDivBy (p:ps) (q:qs) n =
//   q > n || n `mod` p > 0 && notDivBy ps qs n

// squares :: [Int] -> [Int]
// squares ps = [p*p | p<-ps]

// wheels :: [Int] -> [Wheel]
// wheels ps = ws
//   where
//     ws = Wheel 1 [1] : zipWith nextSize ws ps

// nextSize (Wheel s ns) p =
//   Wheel (s*p) ns'
//   where
//   ns' = [n' | o <- [0,s..(p-1)*s],
//               n <- ns,
//               n' <- [n+o], n'`mod`p > 0]

// main = forM_ [1..100] $ const $ do
// 	[arg] <- getArgs
// 	print (prime (read arg))

// squares ps = map (\p -> p * p) ps
// min a b = if a > b then b else a
// noFactor s ps qs n = if (s<=2) then True else notDivBy ps qs n
// notDivBy (p:ps) (q:qs) n = (q > n) || (((n `mod` p) > 0) && (notDivBy ps qs n))
// nextSize (Wheel s ns) p = Wheel (s*p) [n' | o <- [0,s..((p-1)*s)], n <- ns, n' <- [n + o], (n' `mod` p) > 0]
// wheels ps = (Wheel 1 [1]):(zipWith nextSize (wheels ps) ps)
// sieve ((Wheel s ns):ws) ps qs input = [n' | o <- (s:[s*2,s*3..(min (input*input) ((head ps)-1))*s]), n <- ns, n'<- [n+o], noFactor s ps qs n'] ++ (sieve ws (tail ps) (tail qs) input)
// primes n = sieve (wheels (primes n)) (primes n) (squares (primes n)) n
// prime n = atIndex n (primes n)
// testWheelSieve1_nofib n = prime n
// testWheelSieve1_nofib $ primId 1000

:lhInHaskell
:lhGenOCaml
append_lz xs ys = case xs of {
  (x:xs) -> lazy (x:(append_lz xs ys));
  [] -> ys
}
squares ps = map_lz (\p -> p * p) ps
min a b = if a > b then b else a
noFactor s ps qs n = if (s<=2) then True else notDivBy ps qs n
notDivBy xs ys n = case (force ys) of {
  (q:qs) -> if (q > n)
            then True
            else case (force xs) of {
              (p:ps) -> (((n `mod` p) > 0) && (notDivBy ps qs n))
            }
}
nextSize (Wheel s ns) p = Wheel (s*p) [n' | o <- [0,s..((p-1)*s)], n <- ns, n' <- [n + o], (n' `mod` p) > 0]
wheels ps = lazy ((Wheel 1 [1]):(zipWith_lz_lz nextSize (wheels ps) ps))
sieve wls ps qs input = case (force wls) of {
  ((Wheel s ns):ws) ->
    append_lz [n' | o <- (s:[s*2,s*3..(min (input*input) ((head_lz ps)-1))*s]), n <- ns, n'<- [n+o], noFactor s ps qs n'] (sieve ws (tail_lz ps) (tail_lz qs) input)
}
primes n = lazy (sieve (wheels (primes n)) (primes n) (squares (primes n)) n)
prime n = atIndex_lz n (primes n)
testWheelSieve1_nofib n = prime n
testWheelSieve1_nofib $ primId 1000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testWheelSieve1_nofib_₀^1446(primId⁰(1000))
//│ def append_lz_₀(_lh_append_lz_arg1¹, _lh_append_lz_arg2¹) = 
//│ 	let _lh_matchIdent⁴ = _lh_append_lz_arg1¹
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_C _lh_append_lz_LH_C_0¹ _lh_append_lz_LH_C_1¹ => lazy⁰([LH_C _lh_append_lz_LH_C_0¹ append_lz_₀^1036(_lh_append_lz_LH_C_1¹, _lh_append_lz_arg2¹)])
//│ 		| LH_N  => _lh_append_lz_arg2¹
//│ 		| _  => error⁰}
//│ def atIndex_lz_₀(n⁴, ls¹⁹) = if (n⁴ < 0) then error⁰ else case force⁰(ls¹⁹) of {
//│ 	LH_C h²⁰ t²² => if (n⁴ == 0) then h²⁰ else atIndex_lz_₀^966((n⁴ - 1), t²²)
//│ 	| LH_N  => error⁰}
//│ def enumFromThenTo_₀(a⁵, t²⁴, b²) = if (a⁵ <= b²) then [LH_C a⁵ enumFromThenTo_₀^1088(t²⁴, ((2 * t²⁴) - a⁵), b²)] else [LH_N]
//│ def enumFromThenTo_₁(a⁶, t²⁷, b³) = if (a⁶ <= b³) then [LH_C a⁶ enumFromThenTo_₁^1220(t²⁷, ((2 * t²⁷) - a⁶), b³)] else [LH_N]
//│ def head_lz_₀(ls²¹) = case force⁰(ls²¹) of {
//│ 	LH_C h²² t²⁵ => h²²
//│ 	| LH_N  => error⁰}
//│ def map_lz_₀(f¹², ls²³) = lazy⁰(case force⁰(ls²³) of {
//│ 	LH_C h²⁴ t²⁸ => [LH_C f¹²(h²⁴) map_lz_₀^1291(f¹², t²⁸)]
//│ 	| LH_N  => [LH_N]})
//│ def min_₀(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ def nextSize_₀(_lh_nextSize_arg1¹, _lh_nextSize_arg2¹) = case _lh_nextSize_arg1¹ of {
//│ 	Wheel _lh_nextSize_Wheel_0¹ _lh_nextSize_Wheel_1¹ => [Wheel (_lh_nextSize_Wheel_0¹ * _lh_nextSize_arg2¹) 
//│ 		let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => 
//│ 				let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 					LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => 
//│ 						let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {
//│ 							LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)
//│ 							| LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ 						in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]])
//│ 					| LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)})
//│ 				in _lh_listcomp_fun⁷(_lh_nextSize_Wheel_1¹)
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁶(enumFromThenTo_₁^1192(0, _lh_nextSize_Wheel_0¹, ((_lh_nextSize_arg2¹ - 1) * _lh_nextSize_Wheel_0¹)))]
//│ 	| _  => error⁰}
//│ def noFactor_₀(_lh_noFactor_arg1¹, _lh_noFactor_arg2¹, _lh_noFactor_arg3¹, _lh_noFactor_arg4¹) = if (_lh_noFactor_arg1¹ <= 2) then [True] else notDivBy_₀^1020(_lh_noFactor_arg2¹, _lh_noFactor_arg3¹, _lh_noFactor_arg4¹)
//│ def notDivBy_₀(_lh_notDivBy_arg1¹, _lh_notDivBy_arg2¹, _lh_notDivBy_arg3¹) = 
//│ 	let _lh_matchIdent⁵ = force⁰(_lh_notDivBy_arg2¹)
//│ 	in case _lh_matchIdent⁵ of {
//│ 		LH_C _lh_notDivBy_LH_C_0² _lh_notDivBy_LH_C_1² => if (_lh_notDivBy_LH_C_0² > _lh_notDivBy_arg3¹) then [True] else 
//│ 			let _lh_matchIdent⁶ = force⁰(_lh_notDivBy_arg1¹)
//│ 			in case _lh_matchIdent⁶ of {
//│ 				LH_C _lh_notDivBy_LH_C_0³ _lh_notDivBy_LH_C_1³ => (((_lh_notDivBy_arg3¹ % _lh_notDivBy_LH_C_0³) > 0) && notDivBy_₀^1266(_lh_notDivBy_LH_C_1³, _lh_notDivBy_LH_C_1², _lh_notDivBy_arg3¹))
//│ 				| _  => error⁰}
//│ 		| _  => error⁰}
//│ def prime_₀(_lh_prime_arg1¹) = atIndex_lz_₀^1074(_lh_prime_arg1¹, primes_₀^1077(_lh_prime_arg1¹))
//│ def primes_₀(_lh_primes_arg1¹) = lazy⁰(sieve_₀^982(wheels_₀^983(primes_₀^984(_lh_primes_arg1¹)), primes_₀^989(_lh_primes_arg1¹), squares_₀^993(primes_₀^994(_lh_primes_arg1¹)), _lh_primes_arg1¹))
//│ def sieve_₀(_lh_sieve_arg1¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_sieve_arg4¹) = 
//│ 	let _lh_matchIdent⁷ = force⁰(_lh_sieve_arg1¹)
//│ 	in case _lh_matchIdent⁷ of {
//│ 		LH_C _lh_sieve_LH_C_0¹ _lh_sieve_LH_C_1¹ => case _lh_sieve_LH_C_0¹ of {
//│ 			Wheel _lh_sieve_Wheel_0¹ _lh_sieve_Wheel_1¹ => append_lz_₀^1307(
//│ 				let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {
//│ 					LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => 
//│ 						let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {
//│ 							LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => 
//│ 								let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {
//│ 									LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀^1311(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)
//│ 									| LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ 								in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]])
//│ 							| LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ 						in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹)
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun⁹([LH_C _lh_sieve_Wheel_0¹ enumFromThenTo_₀^1358((_lh_sieve_Wheel_0¹ * 2), (_lh_sieve_Wheel_0¹ * 3), (min_₀^1372((_lh_sieve_arg4¹ * _lh_sieve_arg4¹), (head_lz_₀^1380(_lh_sieve_arg2¹) - 1)) * _lh_sieve_Wheel_0¹))]), sieve_₀^1395(_lh_sieve_LH_C_1¹, tail_lz_₀^1398(_lh_sieve_arg2¹), tail_lz_₁^1402(_lh_sieve_arg3¹), _lh_sieve_arg4¹))
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ def squares_₀(_lh_squares_arg1¹) = map_lz_₀^1003((fun p¹ -> (p¹ * p¹)), _lh_squares_arg1¹)
//│ def tail_lz_₀(ls²⁰) = case force⁰(ls²⁰) of {
//│ 	LH_C h²¹ t²³ => t²³
//│ 	| LH_N  => error⁰}
//│ def tail_lz_₁(ls²²) = case force⁰(ls²²) of {
//│ 	LH_C h²³ t²⁶ => t²⁶
//│ 	| LH_N  => error⁰}
//│ def testWheelSieve1_nofib_₀(_lh_testWheelSieve1_nofib_arg1¹) = prime_₀^1133(_lh_testWheelSieve1_nofib_arg1¹)
//│ def wheels_₀(_lh_wheels_arg1¹) = lazy⁰([LH_C [Wheel 1 [LH_C 1 [LH_N]]] zipWith_lz_lz_₀^1055(nextSize_₀^1056, wheels_₀^1058(_lh_wheels_arg1¹), _lh_wheels_arg1¹)])
//│ def zipWith_lz_lz_₀(f¹³, xs⁹, ys⁹) = lazy⁰(case force⁰(xs⁹) of {
//│ 	LH_C hx⁸ tx⁸ => case force⁰(ys⁹) of {
//│ 		LH_C hy⁸ ty⁸ => [LH_C f¹³(hx⁸, hy⁸) zipWith_lz_lz_₀^1430(f¹³, tx⁸, ty⁸)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]})
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec append_lz__d0 _lh_append_lz_arg1_1 _lh_append_lz_arg2_1 =
//│ 		  (let rec _lh_matchIdent_4 = _lh_append_lz_arg1_1 in
//│ 		    (match _lh_matchIdent_4 with
//│ 		      | `LH_C(_lh_append_lz_LH_C_0_1, _lh_append_lz_LH_C_1_1) -> 
//│ 		        (lazy (`LH_C(_lh_append_lz_LH_C_0_1, ((append_lz__d0 _lh_append_lz_LH_C_1_1) _lh_append_lz_arg2_1))))
//│ 		      | `LH_N -> 
//│ 		        _lh_append_lz_arg2_1
//│ 		      | _ -> 
//│ 		        (failwith "error")))
//│ 		and atIndex_lz__d0 n_4 ls_1_9 =
//│ 		  (if (n_4 < 0) then
//│ 		    (failwith "error")
//│ 		  else
//│ 		    (match (Lazy.force ls_1_9) with
//│ 		      | `LH_C(h_2_0, t_2_2) -> 
//│ 		        (if (n_4 = 0) then
//│ 		          h_2_0
//│ 		        else
//│ 		          ((atIndex_lz__d0 (n_4 - 1)) t_2_2))
//│ 		      | `LH_N -> 
//│ 		        (failwith "error")))
//│ 		and enumFromThenTo__d0 a_5 t_2_4 b_2 =
//│ 		  (if (a_5 <= b_2) then
//│ 		    (`LH_C(a_5, (((enumFromThenTo__d0 t_2_4) ((2 * t_2_4) - a_5)) b_2)))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and enumFromThenTo__d1 a_6 t_2_7 b_3 =
//│ 		  (if (a_6 <= b_3) then
//│ 		    (`LH_C(a_6, (((enumFromThenTo__d1 t_2_7) ((2 * t_2_7) - a_6)) b_3)))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and head_lz__d0 ls_2_1 =
//│ 		  (match (Lazy.force ls_2_1) with
//│ 		    | `LH_C(h_2_2, t_2_5) -> 
//│ 		      h_2_2
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"))
//│ 		and map_lz__d0 f_1_2 ls_2_3 =
//│ 		  (lazy (match (Lazy.force ls_2_3) with
//│ 		    | `LH_C(h_2_4, t_2_8) -> 
//│ 		      (`LH_C((f_1_2 h_2_4), ((map_lz__d0 f_1_2) t_2_8)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)))
//│ 		and min__d0 _lh_min_arg1_1 _lh_min_arg2_1 =
//│ 		  (if (_lh_min_arg1_1 > _lh_min_arg2_1) then
//│ 		    _lh_min_arg2_1
//│ 		  else
//│ 		    _lh_min_arg1_1)
//│ 		and nextSize__d0 _lh_nextSize_arg1_1 _lh_nextSize_arg2_1 =
//│ 		  (match _lh_nextSize_arg1_1 with
//│ 		    | `Wheel(_lh_nextSize_Wheel_0_1, _lh_nextSize_Wheel_1_1) -> 
//│ 		      (`Wheel((_lh_nextSize_Wheel_0_1 * _lh_nextSize_arg2_1), (let rec _lh_listcomp_fun_6 = (fun _lh_listcomp_fun_para_6 -> 
//│ 		        (match _lh_listcomp_fun_para_6 with
//│ 		          | `LH_C(_lh_listcomp_fun_ls_h_6, _lh_listcomp_fun_ls_t_6) -> 
//│ 		            (let rec _lh_listcomp_fun_7 = (fun _lh_listcomp_fun_para_7 -> 
//│ 		              (match _lh_listcomp_fun_para_7 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_7, _lh_listcomp_fun_ls_t_7) -> 
//│ 		                  (let rec _lh_listcomp_fun_8 = (fun _lh_listcomp_fun_para_8 -> 
//│ 		                    (match _lh_listcomp_fun_para_8 with
//│ 		                      | `LH_C(_lh_listcomp_fun_ls_h_8, _lh_listcomp_fun_ls_t_8) -> 
//│ 		                        (if ((_lh_listcomp_fun_ls_h_8 mod _lh_nextSize_arg2_1) > 0) then
//│ 		                          (`LH_C(_lh_listcomp_fun_ls_h_8, (_lh_listcomp_fun_8 _lh_listcomp_fun_ls_t_8)))
//│ 		                        else
//│ 		                          (_lh_listcomp_fun_8 _lh_listcomp_fun_ls_t_8))
//│ 		                      | `LH_N -> 
//│ 		                        (_lh_listcomp_fun_7 _lh_listcomp_fun_ls_t_7))) in
//│ 		                    (_lh_listcomp_fun_8 (`LH_C((_lh_listcomp_fun_ls_h_7 + _lh_listcomp_fun_ls_h_6), (`LH_N)))))
//│ 		                | `LH_N -> 
//│ 		                  (_lh_listcomp_fun_6 _lh_listcomp_fun_ls_t_6))) in
//│ 		              (_lh_listcomp_fun_7 _lh_nextSize_Wheel_1_1))
//│ 		          | `LH_N -> 
//│ 		            (`LH_N))) in
//│ 		        (_lh_listcomp_fun_6 (((enumFromThenTo__d1 0) _lh_nextSize_Wheel_0_1) ((_lh_nextSize_arg2_1 - 1) * _lh_nextSize_Wheel_0_1))))))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and noFactor__d0 _lh_noFactor_arg1_1 _lh_noFactor_arg2_1 _lh_noFactor_arg3_1 _lh_noFactor_arg4_1 =
//│ 		  (if (_lh_noFactor_arg1_1 <= 2) then
//│ 		    true
//│ 		  else
//│ 		    (((notDivBy__d0 _lh_noFactor_arg2_1) _lh_noFactor_arg3_1) _lh_noFactor_arg4_1))
//│ 		and notDivBy__d0 _lh_notDivBy_arg1_1 _lh_notDivBy_arg2_1 _lh_notDivBy_arg3_1 =
//│ 		  (let rec _lh_matchIdent_5 = (Lazy.force _lh_notDivBy_arg2_1) in
//│ 		    (match _lh_matchIdent_5 with
//│ 		      | `LH_C(_lh_notDivBy_LH_C_0_2, _lh_notDivBy_LH_C_1_2) -> 
//│ 		        (if (_lh_notDivBy_LH_C_0_2 > _lh_notDivBy_arg3_1) then
//│ 		          true
//│ 		        else
//│ 		          (let rec _lh_matchIdent_6 = (Lazy.force _lh_notDivBy_arg1_1) in
//│ 		            (match _lh_matchIdent_6 with
//│ 		              | `LH_C(_lh_notDivBy_LH_C_0_3, _lh_notDivBy_LH_C_1_3) -> 
//│ 		                (((_lh_notDivBy_arg3_1 mod _lh_notDivBy_LH_C_0_3) > 0) && (((notDivBy__d0 _lh_notDivBy_LH_C_1_3) _lh_notDivBy_LH_C_1_2) _lh_notDivBy_arg3_1))
//│ 		              | _ -> 
//│ 		                (failwith "error"))))
//│ 		      | _ -> 
//│ 		        (failwith "error")))
//│ 		and prime__d0 _lh_prime_arg1_1 =
//│ 		  ((atIndex_lz__d0 _lh_prime_arg1_1) (primes__d0 _lh_prime_arg1_1))
//│ 		and primes__d0 _lh_primes_arg1_1 =
//│ 		  (lazy ((((sieve__d0 (wheels__d0 (primes__d0 _lh_primes_arg1_1))) (primes__d0 _lh_primes_arg1_1)) (squares__d0 (primes__d0 _lh_primes_arg1_1))) _lh_primes_arg1_1))
//│ 		and sieve__d0 _lh_sieve_arg1_1 _lh_sieve_arg2_1 _lh_sieve_arg3_1 _lh_sieve_arg4_1 =
//│ 		  (let rec _lh_matchIdent_7 = (Lazy.force _lh_sieve_arg1_1) in
//│ 		    (match _lh_matchIdent_7 with
//│ 		      | `LH_C(_lh_sieve_LH_C_0_1, _lh_sieve_LH_C_1_1) -> 
//│ 		        (match _lh_sieve_LH_C_0_1 with
//│ 		          | `Wheel(_lh_sieve_Wheel_0_1, _lh_sieve_Wheel_1_1) -> 
//│ 		            ((append_lz__d0 (let rec _lh_listcomp_fun_9 = (fun _lh_listcomp_fun_para_9 -> 
//│ 		              (match _lh_listcomp_fun_para_9 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_9, _lh_listcomp_fun_ls_t_9) -> 
//│ 		                  (let rec _lh_listcomp_fun_1_0 = (fun _lh_listcomp_fun_para_1_0 -> 
//│ 		                    (match _lh_listcomp_fun_para_1_0 with
//│ 		                      | `LH_C(_lh_listcomp_fun_ls_h_1_0, _lh_listcomp_fun_ls_t_1_0) -> 
//│ 		                        (let rec _lh_listcomp_fun_1_1 = (fun _lh_listcomp_fun_para_1_1 -> 
//│ 		                          (match _lh_listcomp_fun_para_1_1 with
//│ 		                            | `LH_C(_lh_listcomp_fun_ls_h_1_1, _lh_listcomp_fun_ls_t_1_1) -> 
//│ 		                              (if ((((noFactor__d0 _lh_sieve_Wheel_0_1) _lh_sieve_arg2_1) _lh_sieve_arg3_1) _lh_listcomp_fun_ls_h_1_1) then
//│ 		                                (`LH_C(_lh_listcomp_fun_ls_h_1_1, (_lh_listcomp_fun_1_1 _lh_listcomp_fun_ls_t_1_1)))
//│ 		                              else
//│ 		                                (_lh_listcomp_fun_1_1 _lh_listcomp_fun_ls_t_1_1))
//│ 		                            | `LH_N -> 
//│ 		                              (_lh_listcomp_fun_1_0 _lh_listcomp_fun_ls_t_1_0))) in
//│ 		                          (_lh_listcomp_fun_1_1 (`LH_C((_lh_listcomp_fun_ls_h_1_0 + _lh_listcomp_fun_ls_h_9), (`LH_N)))))
//│ 		                      | `LH_N -> 
//│ 		                        (_lh_listcomp_fun_9 _lh_listcomp_fun_ls_t_9))) in
//│ 		                    (_lh_listcomp_fun_1_0 _lh_sieve_Wheel_1_1))
//│ 		                | `LH_N -> 
//│ 		                  (`LH_N))) in
//│ 		              (_lh_listcomp_fun_9 (`LH_C(_lh_sieve_Wheel_0_1, (((enumFromThenTo__d0 (_lh_sieve_Wheel_0_1 * 2)) (_lh_sieve_Wheel_0_1 * 3)) (((min__d0 (_lh_sieve_arg4_1 * _lh_sieve_arg4_1)) ((head_lz__d0 _lh_sieve_arg2_1) - 1)) * _lh_sieve_Wheel_0_1))))))) ((((sieve__d0 _lh_sieve_LH_C_1_1) (tail_lz__d0 _lh_sieve_arg2_1)) (tail_lz__d1 _lh_sieve_arg3_1)) _lh_sieve_arg4_1))
//│ 		          | _ -> 
//│ 		            (failwith "error"))
//│ 		      | _ -> 
//│ 		        (failwith "error")))
//│ 		and squares__d0 _lh_squares_arg1_1 =
//│ 		  ((map_lz__d0 (fun p_1 -> 
//│ 		    (p_1 * p_1))) _lh_squares_arg1_1)
//│ 		and tail_lz__d0 ls_2_0 =
//│ 		  (match (Lazy.force ls_2_0) with
//│ 		    | `LH_C(h_2_1, t_2_3) -> 
//│ 		      t_2_3
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"))
//│ 		and tail_lz__d1 ls_2_2 =
//│ 		  (match (Lazy.force ls_2_2) with
//│ 		    | `LH_C(h_2_3, t_2_6) -> 
//│ 		      t_2_6
//│ 		    | `LH_N -> 
//│ 		      (failwith "error"))
//│ 		and testWheelSieve1_nofib__d0 _lh_testWheelSieve1_nofib_arg1_1 =
//│ 		  (prime__d0 _lh_testWheelSieve1_nofib_arg1_1)
//│ 		and wheels__d0 _lh_wheels_arg1_1 =
//│ 		  (lazy (`LH_C((`Wheel(1, (`LH_C(1, (`LH_N))))), (((zipWith_lz_lz__d0 nextSize__d0) (wheels__d0 _lh_wheels_arg1_1)) _lh_wheels_arg1_1))))
//│ 		and zipWith_lz_lz__d0 f_1_3 xs_9 ys_9 =
//│ 		  (lazy (match (Lazy.force xs_9) with
//│ 		    | `LH_C(hx_8, tx_8) -> 
//│ 		      (match (Lazy.force ys_9) with
//│ 		        | `LH_C(hy_8, ty_8) -> 
//│ 		          (`LH_C(((f_1_3 hx_8) hy_8), (((zipWith_lz_lz__d0 f_1_3) tx_8) ty_8)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)));;
//│ 		(testWheelSieve1_nofib__d0 1000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testWheelSieve1_nofib_₀^1446] (hopeless to continue)
//│ 	[testWheelSieve1_nofib_₀^1446 · prime_₀^1133] (using original def)
//│ 		[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · atIndex_lz_₀^1074] (using original def)
//│ 			[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · atIndex_lz_₀^1074 · atIndex_lz_₀^966] ---> [testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · atIndex_lz_₀^1074] (using original def)
//│ 		[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077] (using original def)
//│ 			[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · primes_₀^984] ---> [testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077] (using original def)
//│ 			[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · primes_₀^989] ---> [testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077] (using original def)
//│ 			[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · primes_₀^994] ---> [testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077] (using original def)
//│ 			[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982] (using original def)
//│ 				[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982 · append_lz_₀^1307] (using original def)
//│ 					[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982 · append_lz_₀^1307 · append_lz_₀^1036] ---> [testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982 · append_lz_₀^1307] (using original def)
//│ 				[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982 · enumFromThenTo_₀^1358] (using original def)
//│ 					[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982 · enumFromThenTo_₀^1358 · enumFromThenTo_₀^1088] ---> [testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982 · enumFromThenTo_₀^1358] (using original def)
//│ 				[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982 · head_lz_₀^1380] (using original def)
//│ 				[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982 · min_₀^1372] (using original def)
//│ 				[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982 · noFactor_₀^1311] (using original def)
//│ 					[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982 · noFactor_₀^1311 · notDivBy_₀^1020] (using original def)
//│ 						[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982 · noFactor_₀^1311 · notDivBy_₀^1020 · notDivBy_₀^1266] ---> [testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982 · noFactor_₀^1311 · notDivBy_₀^1020] (using original def)
//│ 				[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982 · sieve_₀^1395] ---> [testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982] (using original def)
//│ 				[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982 · tail_lz_₀^1398] (using original def)
//│ 				[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · sieve_₀^982 · tail_lz_₁^1402] (using original def)
//│ 			[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · squares_₀^993] (using original def)
//│ 				[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · squares_₀^993 · map_lz_₀^1003] (using original def)
//│ 					[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · squares_₀^993 · map_lz_₀^1003 · map_lz_₀^1291] ---> [testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · squares_₀^993 · map_lz_₀^1003] (using original def)
//│ 			[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · wheels_₀^983] (using original def)
//│ 				[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · wheels_₀^983 · nextSize_₀^1056] (using original def)
//│ 					[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · wheels_₀^983 · nextSize_₀^1056 · enumFromThenTo_₁^1192] (using original def)
//│ 						[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · wheels_₀^983 · nextSize_₀^1056 · enumFromThenTo_₁^1192 · enumFromThenTo_₁^1220] ---> [testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · wheels_₀^983 · nextSize_₀^1056 · enumFromThenTo_₁^1192] (using original def)
//│ 				[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · wheels_₀^983 · wheels_₀^1058] ---> [testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · wheels_₀^983] (using original def)
//│ 				[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · wheels_₀^983 · zipWith_lz_lz_₀^1055] (using original def)
//│ 					[testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · wheels_₀^983 · zipWith_lz_lz_₀^1055 · zipWith_lz_lz_₀^1430] ---> [testWheelSieve1_nofib_₀^1446 · prime_₀^1133 · primes_₀^1077 · wheels_₀^983 · zipWith_lz_lz_₀^1055] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testWheelSieve1_nofib_₀_₀(primId⁰(1000))
//│ def testWheelSieve1_nofib_₀_₀(_lh_testWheelSieve1_nofib_arg1¹) = 
//│ 	prime_₀_₀(_lh_testWheelSieve1_nofib_arg1¹)
//│ 	where
//│ 	def prime_₀_₀(_lh_prime_arg1¹) = 
//│ 		atIndex_lz_₀_₀(_lh_prime_arg1¹, primes_₀_₀(_lh_prime_arg1¹))
//│ 		where
//│ 		def atIndex_lz_₀_₀(n¹, ls⁸) = 
//│ 			if (n¹ < 0) then error⁰ else case force⁰(ls⁸) of {
//│ 				LH_C h⁸ t¹² => if (n¹ == 0) then h⁸ else atIndex_lz_₀_₀((n¹ - 1), t¹²)
//│ 				| LH_N  => error⁰}
//│ 		def primes_₀_₀(_lh_primes_arg1¹) = 
//│ 			lazy⁰(sieve_₀_₀(wheels_₀_₀(primes_₀_₀(_lh_primes_arg1¹)), primes_₀_₀(_lh_primes_arg1¹), squares_₀_₀(primes_₀_₀(_lh_primes_arg1¹)), _lh_primes_arg1¹))
//│ 			where
//│ 			def sieve_₀_₀(_lh_sieve_arg1¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_sieve_arg4¹) = 
//│ 				let _lh_matchIdent⁷ = force⁰(_lh_sieve_arg1¹)
//│ 				in case _lh_matchIdent⁷ of {
//│ 					LH_C _lh_sieve_LH_C_0¹ _lh_sieve_LH_C_1¹ => case _lh_sieve_LH_C_0¹ of {
//│ 						Wheel _lh_sieve_Wheel_0¹ _lh_sieve_Wheel_1¹ => append_lz_₀_₀(
//│ 							let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {
//│ 								LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => 
//│ 									let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {
//│ 										LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => 
//│ 											let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {
//│ 												LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)
//│ 												| LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ 											in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]])
//│ 										| LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ 									in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹)
//│ 								| LH_N  => [LH_N]})
//│ 							in _lh_listcomp_fun⁹([LH_C _lh_sieve_Wheel_0¹ enumFromThenTo_₀_₀((_lh_sieve_Wheel_0¹ * 2), (_lh_sieve_Wheel_0¹ * 3), (min_₀_₀((_lh_sieve_arg4¹ * _lh_sieve_arg4¹), (head_lz_₀_₀(_lh_sieve_arg2¹) - 1)) * _lh_sieve_Wheel_0¹))]), sieve_₀_₀(_lh_sieve_LH_C_1¹, tail_lz_₀_₀(_lh_sieve_arg2¹), tail_lz_₁_₀(_lh_sieve_arg3¹), _lh_sieve_arg4¹))
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				where
//│ 				def append_lz_₀_₀(_lh_append_lz_arg1¹, _lh_append_lz_arg2¹) = 
//│ 					let _lh_matchIdent⁴ = _lh_append_lz_arg1¹
//│ 					in case _lh_matchIdent⁴ of {
//│ 						LH_C _lh_append_lz_LH_C_0¹ _lh_append_lz_LH_C_1¹ => lazy⁰([LH_C _lh_append_lz_LH_C_0¹ append_lz_₀_₀(_lh_append_lz_LH_C_1¹, _lh_append_lz_arg2¹)])
//│ 						| LH_N  => _lh_append_lz_arg2¹
//│ 						| _  => error⁰}
//│ 				def enumFromThenTo_₀_₀(a³, t¹¹, b³) = 
//│ 					if (a³ <= b³) then [LH_C a³ enumFromThenTo_₀_₀(t¹¹, ((2 * t¹¹) - a³), b³)] else [LH_N]
//│ 				def head_lz_₀_₀(ls⁵) = 
//│ 					case force⁰(ls⁵) of {
//│ 						LH_C h⁵ t⁸ => h⁵
//│ 						| LH_N  => error⁰}
//│ 				def min_₀_₀(_lh_min_arg1¹, _lh_min_arg2¹) = 
//│ 					if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ 				def noFactor_₀_₀(_lh_noFactor_arg1¹, _lh_noFactor_arg2¹, _lh_noFactor_arg3¹, _lh_noFactor_arg4¹) = 
//│ 					if (_lh_noFactor_arg1¹ <= 2) then [True] else notDivBy_₀_₀(_lh_noFactor_arg2¹, _lh_noFactor_arg3¹, _lh_noFactor_arg4¹)
//│ 					where
//│ 					def notDivBy_₀_₀(_lh_notDivBy_arg1¹, _lh_notDivBy_arg2¹, _lh_notDivBy_arg3¹) = 
//│ 						let _lh_matchIdent⁵ = force⁰(_lh_notDivBy_arg2¹)
//│ 						in case _lh_matchIdent⁵ of {
//│ 							LH_C _lh_notDivBy_LH_C_0² _lh_notDivBy_LH_C_1² => if (_lh_notDivBy_LH_C_0² > _lh_notDivBy_arg3¹) then [True] else 
//│ 								let _lh_matchIdent⁶ = force⁰(_lh_notDivBy_arg1¹)
//│ 								in case _lh_matchIdent⁶ of {
//│ 									LH_C _lh_notDivBy_LH_C_0³ _lh_notDivBy_LH_C_1³ => (((_lh_notDivBy_arg3¹ % _lh_notDivBy_LH_C_0³) > 0) && notDivBy_₀_₀(_lh_notDivBy_LH_C_1³, _lh_notDivBy_LH_C_1², _lh_notDivBy_arg3¹))
//│ 									| _  => error⁰}
//│ 							| _  => error⁰}
//│ 				def tail_lz_₀_₀(ls⁷) = 
//│ 					case force⁰(ls⁷) of {
//│ 						LH_C h⁷ t¹⁰ => t¹⁰
//│ 						| LH_N  => error⁰}
//│ 				def tail_lz_₁_₀(ls⁹) = 
//│ 					case force⁰(ls⁹) of {
//│ 						LH_C h⁹ t¹³ => t¹³
//│ 						| LH_N  => error⁰}
//│ 			def squares_₀_₀(_lh_squares_arg1¹) = 
//│ 				map_lz_₀_₀((fun p¹ -> (p¹ * p¹)), _lh_squares_arg1¹)
//│ 				where
//│ 				def map_lz_₀_₀(f², ls⁶) = 
//│ 					lazy⁰(case force⁰(ls⁶) of {
//│ 						LH_C h⁶ t⁹ => [LH_C f²(h⁶) map_lz_₀_₀(f², t⁹)]
//│ 						| LH_N  => [LH_N]})
//│ 			def wheels_₀_₀(_lh_wheels_arg1¹) = 
//│ 				lazy⁰([LH_C [Wheel 1 [LH_C 1 [LH_N]]] zipWith_lz_lz_₀_₀(nextSize_₀_₀, wheels_₀_₀(_lh_wheels_arg1¹), _lh_wheels_arg1¹)])
//│ 				where
//│ 				def nextSize_₀_₀(_lh_nextSize_arg1¹, _lh_nextSize_arg2¹) = 
//│ 					case _lh_nextSize_arg1¹ of {
//│ 						Wheel _lh_nextSize_Wheel_0¹ _lh_nextSize_Wheel_1¹ => [Wheel (_lh_nextSize_Wheel_0¹ * _lh_nextSize_arg2¹) 
//│ 							let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 								LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => 
//│ 									let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 										LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => 
//│ 											let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {
//│ 												LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)
//│ 												| LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ 											in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]])
//│ 										| LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)})
//│ 									in _lh_listcomp_fun⁷(_lh_nextSize_Wheel_1¹)
//│ 								| LH_N  => [LH_N]})
//│ 							in _lh_listcomp_fun⁶(enumFromThenTo_₁_₀(0, _lh_nextSize_Wheel_0¹, ((_lh_nextSize_arg2¹ - 1) * _lh_nextSize_Wheel_0¹)))]
//│ 						| _  => error⁰}
//│ 					where
//│ 					def enumFromThenTo_₁_₀(a², t⁷, b²) = 
//│ 						if (a² <= b²) then [LH_C a² enumFromThenTo_₁_₀(t⁷, ((2 * t⁷) - a²), b²)] else [LH_N]
//│ 				def zipWith_lz_lz_₀_₀(f³, xs¹, ys¹) = 
//│ 					lazy⁰(case force⁰(xs¹) of {
//│ 						LH_C hx¹ tx¹ => case force⁰(ys¹) of {
//│ 							LH_C hy¹ ty¹ => [LH_C f³(hx¹, hy¹) zipWith_lz_lz_₀_₀(f³, tx¹, ty¹)]
//│ 							| LH_N  => [LH_N]}
//│ 						| LH_N  => [LH_N]})
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C a² enumFromThenTo_₁_₀(t⁷, ((2 * t⁷) - a²), b²)]: 532 --->
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun⁷(_lh_nextSize_Wheel_1¹) | LH_N  => [LH_N]}: 855
//│ [LH_N]: 533 --->
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun⁷(_lh_nextSize_Wheel_1¹) | LH_N  => [LH_N]}: 855
//│ [LH_C _lh_append_lz_LH_C_0¹ append_lz_₀_₀(_lh_append_lz_LH_C_1¹, _lh_append_lz_arg2¹)]: 554 --->
//│ 	DeadCodeCons
//│ 	case force⁰(ls⁵) of {LH_C h⁵ t⁸ => h⁵ | LH_N  => error⁰}: 543
//│ 	case force⁰(ls⁶) of {LH_C h⁶ t⁹ => [LH_C f²(h⁶) map_lz_₀_₀(f², t⁹)] | LH_N  => [LH_N]}: 576
//│ 	case force⁰(ls⁷) of {LH_C h⁷ t¹⁰ => t¹⁰ | LH_N  => error⁰}: 585
//│ 	case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f³(hx¹, hy¹) zipWith_lz_lz_₀_₀(f³, tx¹, ty¹)] | LH_N  => [LH_N]}: 635
//│ 	case _lh_matchIdent⁶ of {LH_C _lh_notDivBy_LH_C_0³ _lh_notDivBy_LH_C_1³ => (((_lh_notDivBy_arg3¹ % _lh_notDivBy_LH_C_0³) > 0) && notDivBy_₀_₀(_lh_notDivBy_LH_C_1³, _lh_notDivBy_LH_C_1², _lh_notDivBy_arg3¹)) | _  => error⁰}: 676
//│ 	case force⁰(ls⁸) of {LH_C h⁸ t¹² => if (n¹ == 0) then h⁸ else atIndex_lz_₀_₀((n¹ - 1), t¹²) | LH_N  => error⁰}: 711
//│ [LH_C f²(h⁶) map_lz_₀_₀(f², t⁹)]: 574 --->
//│ 	case _lh_matchIdent⁵ of {LH_C _lh_notDivBy_LH_C_0² _lh_notDivBy_LH_C_1² => if (_lh_notDivBy_LH_C_0² > _lh_notDivBy_arg3¹) then [True] else let _lh_matchIdent⁶ = force⁰(_lh_notDivBy_arg1¹)
//│ in case _lh_matchIdent⁶ of {LH_C _lh_notDivBy_LH_C_0³ _lh_notDivBy_LH_C_1³ => (((_lh_notDivBy_arg3¹ % _lh_notDivBy_LH_C_0³) > 0) && notDivBy_₀_₀(_lh_notDivBy_LH_C_1³, _lh_notDivBy_LH_C_1², _lh_notDivBy_arg3¹)) | _  => error⁰} | _  => error⁰}: 680
//│ 	case force⁰(ls⁹) of {LH_C h⁹ t¹³ => t¹³ | LH_N  => error⁰}: 720
//│ [LH_N]: 575 --->
//│ 	case _lh_matchIdent⁵ of {LH_C _lh_notDivBy_LH_C_0² _lh_notDivBy_LH_C_1² => if (_lh_notDivBy_LH_C_0² > _lh_notDivBy_arg3¹) then [True] else let _lh_matchIdent⁶ = force⁰(_lh_notDivBy_arg1¹)
//│ in case _lh_matchIdent⁶ of {LH_C _lh_notDivBy_LH_C_0³ _lh_notDivBy_LH_C_1³ => (((_lh_notDivBy_arg3¹ % _lh_notDivBy_LH_C_0³) > 0) && notDivBy_₀_₀(_lh_notDivBy_LH_C_1³, _lh_notDivBy_LH_C_1², _lh_notDivBy_arg3¹)) | _  => error⁰} | _  => error⁰}: 680
//│ 	case force⁰(ls⁹) of {LH_C h⁹ t¹³ => t¹³ | LH_N  => error⁰}: 720
//│ [LH_C a³ enumFromThenTo_₀_₀(t¹¹, ((2 * t¹¹) - a³), b³)]: 608 --->
//│ 	case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹) | LH_N  => [LH_N]}: 932
//│ [LH_N]: 609 --->
//│ 	case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹) | LH_N  => [LH_N]}: 932
//│ [LH_C f³(hx¹, hy¹) zipWith_lz_lz_₀_₀(f³, tx¹, ty¹)]: 633 --->
//│ 	case force⁰(xs¹) of {LH_C hx¹ tx¹ => case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f³(hx¹, hy¹) zipWith_lz_lz_₀_₀(f³, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 637
//│ 	case _lh_matchIdent⁷ of {LH_C _lh_sieve_LH_C_0¹ _lh_sieve_LH_C_1¹ => case _lh_sieve_LH_C_0¹ of {Wheel _lh_sieve_Wheel_0¹ _lh_sieve_Wheel_1¹ => append_lz_₀_₀(let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁹([LH_C _lh_sieve_Wheel_0¹ enumFromThenTo_₀_₀((_lh_sieve_Wheel_0¹ * 2), (_lh_sieve_Wheel_0¹ * 3), (min_₀_₀((_lh_sieve_arg4¹ * _lh_sieve_arg4¹), (head_lz_₀_₀(_lh_sieve_arg2¹) - 1)) * _lh_sieve_Wheel_0¹))]), sieve_₀_₀(_lh_sieve_LH_C_1¹, tail_lz_₀_₀(_lh_sieve_arg2¹), tail_lz_₁_₀(_lh_sieve_arg3¹), _lh_sieve_arg4¹)) | _  => error⁰} | _  => error⁰}: 990
//│ [LH_N]: 634 --->
//│ 	case force⁰(xs¹) of {LH_C hx¹ tx¹ => case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f³(hx¹, hy¹) zipWith_lz_lz_₀_₀(f³, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 637
//│ 	case _lh_matchIdent⁷ of {LH_C _lh_sieve_LH_C_0¹ _lh_sieve_LH_C_1¹ => case _lh_sieve_LH_C_0¹ of {Wheel _lh_sieve_Wheel_0¹ _lh_sieve_Wheel_1¹ => append_lz_₀_₀(let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁹([LH_C _lh_sieve_Wheel_0¹ enumFromThenTo_₀_₀((_lh_sieve_Wheel_0¹ * 2), (_lh_sieve_Wheel_0¹ * 3), (min_₀_₀((_lh_sieve_arg4¹ * _lh_sieve_arg4¹), (head_lz_₀_₀(_lh_sieve_arg2¹) - 1)) * _lh_sieve_Wheel_0¹))]), sieve_₀_₀(_lh_sieve_LH_C_1¹, tail_lz_₀_₀(_lh_sieve_arg2¹), tail_lz_₁_₀(_lh_sieve_arg3¹), _lh_sieve_arg4¹)) | _  => error⁰} | _  => error⁰}: 990
//│ [LH_N]: 636 --->
//│ 	case force⁰(xs¹) of {LH_C hx¹ tx¹ => case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f³(hx¹, hy¹) zipWith_lz_lz_₀_₀(f³, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 637
//│ 	case _lh_matchIdent⁷ of {LH_C _lh_sieve_LH_C_0¹ _lh_sieve_LH_C_1¹ => case _lh_sieve_LH_C_0¹ of {Wheel _lh_sieve_Wheel_0¹ _lh_sieve_Wheel_1¹ => append_lz_₀_₀(let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁹([LH_C _lh_sieve_Wheel_0¹ enumFromThenTo_₀_₀((_lh_sieve_Wheel_0¹ * 2), (_lh_sieve_Wheel_0¹ * 3), (min_₀_₀((_lh_sieve_arg4¹ * _lh_sieve_arg4¹), (head_lz_₀_₀(_lh_sieve_arg2¹) - 1)) * _lh_sieve_Wheel_0¹))]), sieve_₀_₀(_lh_sieve_LH_C_1¹, tail_lz_₀_₀(_lh_sieve_arg2¹), tail_lz_₁_₀(_lh_sieve_arg3¹), _lh_sieve_arg4¹)) | _  => error⁰} | _  => error⁰}: 990
//│ [LH_N]: 770 --->
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)}: 848
//│ 	case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)}: 925
//│ [LH_C 1 [LH_N]]: 771 --->
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)}: 848
//│ 	case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)}: 925
//│ [Wheel 1 [LH_C 1 [LH_N]]]: 772 --->
//│ 	case _lh_nextSize_arg1¹ of {Wheel _lh_nextSize_Wheel_0¹ _lh_nextSize_Wheel_1¹ => [Wheel (_lh_nextSize_Wheel_0¹ * _lh_nextSize_arg2¹) let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun⁷(_lh_nextSize_Wheel_1¹) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁶(enumFromThenTo_₁_₀(0, _lh_nextSize_Wheel_0¹, ((_lh_nextSize_arg2¹ - 1) * _lh_nextSize_Wheel_0¹)))] | _  => error⁰}: 877
//│ 	case _lh_sieve_LH_C_0¹ of {Wheel _lh_sieve_Wheel_0¹ _lh_sieve_Wheel_1¹ => append_lz_₀_₀(let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁹([LH_C _lh_sieve_Wheel_0¹ enumFromThenTo_₀_₀((_lh_sieve_Wheel_0¹ * 2), (_lh_sieve_Wheel_0¹ * 3), (min_₀_₀((_lh_sieve_arg4¹ * _lh_sieve_arg4¹), (head_lz_₀_₀(_lh_sieve_arg2¹) - 1)) * _lh_sieve_Wheel_0¹))]), sieve_₀_₀(_lh_sieve_LH_C_1¹, tail_lz_₀_₀(_lh_sieve_arg2¹), tail_lz_₁_₀(_lh_sieve_arg3¹), _lh_sieve_arg4¹)) | _  => error⁰}: 988
//│ [LH_C [Wheel 1 [LH_C 1 [LH_N]]] zipWith_lz_lz_₀_₀(nextSize_₀_₀, wheels_₀_₀(_lh_wheels_arg1¹), _lh_wheels_arg1¹)]: 782 --->
//│ 	case force⁰(xs¹) of {LH_C hx¹ tx¹ => case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f³(hx¹, hy¹) zipWith_lz_lz_₀_₀(f³, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 637
//│ 	case _lh_matchIdent⁷ of {LH_C _lh_sieve_LH_C_0¹ _lh_sieve_LH_C_1¹ => case _lh_sieve_LH_C_0¹ of {Wheel _lh_sieve_Wheel_0¹ _lh_sieve_Wheel_1¹ => append_lz_₀_₀(let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁹([LH_C _lh_sieve_Wheel_0¹ enumFromThenTo_₀_₀((_lh_sieve_Wheel_0¹ * 2), (_lh_sieve_Wheel_0¹ * 3), (min_₀_₀((_lh_sieve_arg4¹ * _lh_sieve_arg4¹), (head_lz_₀_₀(_lh_sieve_arg2¹) - 1)) * _lh_sieve_Wheel_0¹))]), sieve_₀_₀(_lh_sieve_LH_C_1¹, tail_lz_₀_₀(_lh_sieve_arg2¹), tail_lz_₁_₀(_lh_sieve_arg3¹), _lh_sieve_arg4¹)) | _  => error⁰} | _  => error⁰}: 990
//│ [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]: 825 --->
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)}: 848
//│ 	case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)}: 925
//│ [LH_N]: 841 --->
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)}: 833
//│ [LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]: 842 --->
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)}: 833
//│ [LH_N]: 854 --->
//│ 	case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)}: 848
//│ 	case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)}: 925
//│ [Wheel (_lh_nextSize_Wheel_0¹ * _lh_nextSize_arg2¹) let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun⁷(_lh_nextSize_Wheel_1¹) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁶(enumFromThenTo_₁_₀(0, _lh_nextSize_Wheel_0¹, ((_lh_nextSize_arg2¹ - 1) * _lh_nextSize_Wheel_0¹)))]: 875 --->
//│ 	case _lh_nextSize_arg1¹ of {Wheel _lh_nextSize_Wheel_0¹ _lh_nextSize_Wheel_1¹ => [Wheel (_lh_nextSize_Wheel_0¹ * _lh_nextSize_arg2¹) let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun⁷(_lh_nextSize_Wheel_1¹) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁶(enumFromThenTo_₁_₀(0, _lh_nextSize_Wheel_0¹, ((_lh_nextSize_arg2¹ - 1) * _lh_nextSize_Wheel_0¹)))] | _  => error⁰}: 877
//│ 	case _lh_sieve_LH_C_0¹ of {Wheel _lh_sieve_Wheel_0¹ _lh_sieve_Wheel_1¹ => append_lz_₀_₀(let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁹([LH_C _lh_sieve_Wheel_0¹ enumFromThenTo_₀_₀((_lh_sieve_Wheel_0¹ * 2), (_lh_sieve_Wheel_0¹ * 3), (min_₀_₀((_lh_sieve_arg4¹ * _lh_sieve_arg4¹), (head_lz_₀_₀(_lh_sieve_arg2¹) - 1)) * _lh_sieve_Wheel_0¹))]), sieve_₀_₀(_lh_sieve_LH_C_1¹, tail_lz_₀_₀(_lh_sieve_arg2¹), tail_lz_₁_₀(_lh_sieve_arg3¹), _lh_sieve_arg4¹)) | _  => error⁰}: 988
//│ [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)]: 902 --->
//│ 	case _lh_matchIdent⁴ of {LH_C _lh_append_lz_LH_C_0¹ _lh_append_lz_LH_C_1¹ => lazy⁰([LH_C _lh_append_lz_LH_C_0¹ append_lz_₀_₀(_lh_append_lz_LH_C_1¹, _lh_append_lz_arg2¹)]) | LH_N  => _lh_append_lz_arg2¹ | _  => error⁰}: 558
//│ [LH_N]: 918 --->
//│ 	case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)}: 910
//│ [LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]: 919 --->
//│ 	case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)}: 910
//│ [LH_N]: 931 --->
//│ 	case _lh_matchIdent⁴ of {LH_C _lh_append_lz_LH_C_0¹ _lh_append_lz_LH_C_1¹ => lazy⁰([LH_C _lh_append_lz_LH_C_0¹ append_lz_₀_₀(_lh_append_lz_LH_C_1¹, _lh_append_lz_arg2¹)]) | LH_N  => _lh_append_lz_arg2¹ | _  => error⁰}: 558
//│ [LH_C _lh_sieve_Wheel_0¹ enumFromThenTo_₀_₀((_lh_sieve_Wheel_0¹ * 2), (_lh_sieve_Wheel_0¹ * 3), (min_₀_₀((_lh_sieve_arg4¹ * _lh_sieve_arg4¹), (head_lz_₀_₀(_lh_sieve_arg2¹) - 1)) * _lh_sieve_Wheel_0¹))]: 969 --->
//│ 	case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹) | LH_N  => [LH_N]}: 932
//│ ------------------
//│ case force⁰(ls⁵) of {LH_C h⁵ t⁸ => h⁵ | LH_N  => error⁰}: 543 --->
//│ 	[LH_C _lh_append_lz_LH_C_0¹ append_lz_₀_₀(_lh_append_lz_LH_C_1¹, _lh_append_lz_arg2¹)]: 554
//│ case _lh_matchIdent⁴ of {LH_C _lh_append_lz_LH_C_0¹ _lh_append_lz_LH_C_1¹ => lazy⁰([LH_C _lh_append_lz_LH_C_0¹ append_lz_₀_₀(_lh_append_lz_LH_C_1¹, _lh_append_lz_arg2¹)]) | LH_N  => _lh_append_lz_arg2¹ | _  => error⁰}: 558 --->
//│ 	[LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)]: 902
//│ 	[LH_N]: 931
//│ case force⁰(ls⁶) of {LH_C h⁶ t⁹ => [LH_C f²(h⁶) map_lz_₀_₀(f², t⁹)] | LH_N  => [LH_N]}: 576 --->
//│ 	[LH_C _lh_append_lz_LH_C_0¹ append_lz_₀_₀(_lh_append_lz_LH_C_1¹, _lh_append_lz_arg2¹)]: 554
//│ case force⁰(ls⁷) of {LH_C h⁷ t¹⁰ => t¹⁰ | LH_N  => error⁰}: 585 --->
//│ 	[LH_C _lh_append_lz_LH_C_0¹ append_lz_₀_₀(_lh_append_lz_LH_C_1¹, _lh_append_lz_arg2¹)]: 554
//│ case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f³(hx¹, hy¹) zipWith_lz_lz_₀_₀(f³, tx¹, ty¹)] | LH_N  => [LH_N]}: 635 --->
//│ 	[LH_C _lh_append_lz_LH_C_0¹ append_lz_₀_₀(_lh_append_lz_LH_C_1¹, _lh_append_lz_arg2¹)]: 554
//│ case force⁰(xs¹) of {LH_C hx¹ tx¹ => case force⁰(ys¹) of {LH_C hy¹ ty¹ => [LH_C f³(hx¹, hy¹) zipWith_lz_lz_₀_₀(f³, tx¹, ty¹)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 637 --->
//│ 	[LH_C f³(hx¹, hy¹) zipWith_lz_lz_₀_₀(f³, tx¹, ty¹)]: 633
//│ 	[LH_N]: 634
//│ 	[LH_N]: 636
//│ 	[LH_C [Wheel 1 [LH_C 1 [LH_N]]] zipWith_lz_lz_₀_₀(nextSize_₀_₀, wheels_₀_₀(_lh_wheels_arg1¹), _lh_wheels_arg1¹)]: 782
//│ case _lh_matchIdent⁶ of {LH_C _lh_notDivBy_LH_C_0³ _lh_notDivBy_LH_C_1³ => (((_lh_notDivBy_arg3¹ % _lh_notDivBy_LH_C_0³) > 0) && notDivBy_₀_₀(_lh_notDivBy_LH_C_1³, _lh_notDivBy_LH_C_1², _lh_notDivBy_arg3¹)) | _  => error⁰}: 676 --->
//│ 	[LH_C _lh_append_lz_LH_C_0¹ append_lz_₀_₀(_lh_append_lz_LH_C_1¹, _lh_append_lz_arg2¹)]: 554
//│ case _lh_matchIdent⁵ of {LH_C _lh_notDivBy_LH_C_0² _lh_notDivBy_LH_C_1² => if (_lh_notDivBy_LH_C_0² > _lh_notDivBy_arg3¹) then [True] else let _lh_matchIdent⁶ = force⁰(_lh_notDivBy_arg1¹)
//│ in case _lh_matchIdent⁶ of {LH_C _lh_notDivBy_LH_C_0³ _lh_notDivBy_LH_C_1³ => (((_lh_notDivBy_arg3¹ % _lh_notDivBy_LH_C_0³) > 0) && notDivBy_₀_₀(_lh_notDivBy_LH_C_1³, _lh_notDivBy_LH_C_1², _lh_notDivBy_arg3¹)) | _  => error⁰} | _  => error⁰}: 680 --->
//│ 	[LH_C f²(h⁶) map_lz_₀_₀(f², t⁹)]: 574
//│ 	[LH_N]: 575
//│ case force⁰(ls⁸) of {LH_C h⁸ t¹² => if (n¹ == 0) then h⁸ else atIndex_lz_₀_₀((n¹ - 1), t¹²) | LH_N  => error⁰}: 711 --->
//│ 	[LH_C _lh_append_lz_LH_C_0¹ append_lz_₀_₀(_lh_append_lz_LH_C_1¹, _lh_append_lz_arg2¹)]: 554
//│ case force⁰(ls⁹) of {LH_C h⁹ t¹³ => t¹³ | LH_N  => error⁰}: 720 --->
//│ 	[LH_C f²(h⁶) map_lz_₀_₀(f², t⁹)]: 574
//│ 	[LH_N]: 575
//│ case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)}: 833 --->
//│ 	[LH_N]: 841
//│ 	[LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]: 842
//│ case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)}: 848 --->
//│ 	[LH_N]: 770
//│ 	[LH_C 1 [LH_N]]: 771
//│ 	[LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]: 825
//│ 	[LH_N]: 854
//│ case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun⁷(_lh_nextSize_Wheel_1¹) | LH_N  => [LH_N]}: 855 --->
//│ 	[LH_C a² enumFromThenTo_₁_₀(t⁷, ((2 * t⁷) - a²), b²)]: 532
//│ 	[LH_N]: 533
//│ case _lh_nextSize_arg1¹ of {Wheel _lh_nextSize_Wheel_0¹ _lh_nextSize_Wheel_1¹ => [Wheel (_lh_nextSize_Wheel_0¹ * _lh_nextSize_arg2¹) let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun⁷(_lh_nextSize_Wheel_1¹) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁶(enumFromThenTo_₁_₀(0, _lh_nextSize_Wheel_0¹, ((_lh_nextSize_arg2¹ - 1) * _lh_nextSize_Wheel_0¹)))] | _  => error⁰}: 877 --->
//│ 	[Wheel 1 [LH_C 1 [LH_N]]]: 772
//│ 	[Wheel (_lh_nextSize_Wheel_0¹ * _lh_nextSize_arg2¹) let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun⁷(_lh_nextSize_Wheel_1¹) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁶(enumFromThenTo_₁_₀(0, _lh_nextSize_Wheel_0¹, ((_lh_nextSize_arg2¹ - 1) * _lh_nextSize_Wheel_0¹)))]: 875
//│ case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)}: 910 --->
//│ 	[LH_N]: 918
//│ 	[LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]: 919
//│ case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)}: 925 --->
//│ 	[LH_N]: 770
//│ 	[LH_C 1 [LH_N]]: 771
//│ 	[LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]: 825
//│ 	[LH_N]: 854
//│ case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹) | LH_N  => [LH_N]}: 932 --->
//│ 	[LH_C a³ enumFromThenTo_₀_₀(t¹¹, ((2 * t¹¹) - a³), b³)]: 608
//│ 	[LH_N]: 609
//│ 	[LH_C _lh_sieve_Wheel_0¹ enumFromThenTo_₀_₀((_lh_sieve_Wheel_0¹ * 2), (_lh_sieve_Wheel_0¹ * 3), (min_₀_₀((_lh_sieve_arg4¹ * _lh_sieve_arg4¹), (head_lz_₀_₀(_lh_sieve_arg2¹) - 1)) * _lh_sieve_Wheel_0¹))]: 969
//│ case _lh_sieve_LH_C_0¹ of {Wheel _lh_sieve_Wheel_0¹ _lh_sieve_Wheel_1¹ => append_lz_₀_₀(let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁹([LH_C _lh_sieve_Wheel_0¹ enumFromThenTo_₀_₀((_lh_sieve_Wheel_0¹ * 2), (_lh_sieve_Wheel_0¹ * 3), (min_₀_₀((_lh_sieve_arg4¹ * _lh_sieve_arg4¹), (head_lz_₀_₀(_lh_sieve_arg2¹) - 1)) * _lh_sieve_Wheel_0¹))]), sieve_₀_₀(_lh_sieve_LH_C_1¹, tail_lz_₀_₀(_lh_sieve_arg2¹), tail_lz_₁_₀(_lh_sieve_arg3¹), _lh_sieve_arg4¹)) | _  => error⁰}: 988 --->
//│ 	[Wheel 1 [LH_C 1 [LH_N]]]: 772
//│ 	[Wheel (_lh_nextSize_Wheel_0¹ * _lh_nextSize_arg2¹) let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun⁷(_lh_nextSize_Wheel_1¹) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁶(enumFromThenTo_₁_₀(0, _lh_nextSize_Wheel_0¹, ((_lh_nextSize_arg2¹ - 1) * _lh_nextSize_Wheel_0¹)))]: 875
//│ case _lh_matchIdent⁷ of {LH_C _lh_sieve_LH_C_0¹ _lh_sieve_LH_C_1¹ => case _lh_sieve_LH_C_0¹ of {Wheel _lh_sieve_Wheel_0¹ _lh_sieve_Wheel_1¹ => append_lz_₀_₀(let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹) | LH_N  => [LH_N]})
//│ in _lh_listcomp_fun⁹([LH_C _lh_sieve_Wheel_0¹ enumFromThenTo_₀_₀((_lh_sieve_Wheel_0¹ * 2), (_lh_sieve_Wheel_0¹ * 3), (min_₀_₀((_lh_sieve_arg4¹ * _lh_sieve_arg4¹), (head_lz_₀_₀(_lh_sieve_arg2¹) - 1)) * _lh_sieve_Wheel_0¹))]), sieve_₀_₀(_lh_sieve_LH_C_1¹, tail_lz_₀_₀(_lh_sieve_arg2¹), tail_lz_₁_₀(_lh_sieve_arg3¹), _lh_sieve_arg4¹)) | _  => error⁰} | _  => error⁰}: 990 --->
//│ 	[LH_C f³(hx¹, hy¹) zipWith_lz_lz_₀_₀(f³, tx¹, ty¹)]: 633
//│ 	[LH_N]: 634
//│ 	[LH_N]: 636
//│ 	[LH_C [Wheel 1 [LH_C 1 [LH_N]]] zipWith_lz_lz_₀_₀(nextSize_₀_₀, wheels_₀_₀(_lh_wheels_arg1¹), _lh_wheels_arg1¹)]: 782
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C a² enumFromThenTo_₁_₀(t⁷, ((2 * t⁷) - a²), b²)]: 532 --->
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun⁷(_lh_nextSize_Wheel_1¹) | LH_N  => [LH_N]}: 855
//│ [LH_N]: 533 --->
//│ 	case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun⁷(_lh_nextSize_Wheel_1¹) | LH_N  => [LH_N]}: 855
//│ [LH_C a³ enumFromThenTo_₀_₀(t¹¹, ((2 * t¹¹) - a³), b³)]: 608 --->
//│ 	case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹) | LH_N  => [LH_N]}: 932
//│ [LH_N]: 609 --->
//│ 	case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹) | LH_N  => [LH_N]}: 932
//│ [LH_N]: 841 --->
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)}: 833
//│ [LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]: 842 --->
//│ 	case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)}: 833
//│ [LH_N]: 918 --->
//│ 	case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)}: 910
//│ [LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]: 919 --->
//│ 	case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)}: 910
//│ [LH_C _lh_sieve_Wheel_0¹ enumFromThenTo_₀_₀((_lh_sieve_Wheel_0¹ * 2), (_lh_sieve_Wheel_0¹ * 3), (min_₀_₀((_lh_sieve_arg4¹ * _lh_sieve_arg4¹), (head_lz_₀_₀(_lh_sieve_arg2¹) - 1)) * _lh_sieve_Wheel_0¹))]: 969 --->
//│ 	case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹) | LH_N  => [LH_N]}: 932
//│ ------------------
//│ case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)}: 833 --->
//│ 	[LH_N]: 841
//│ 	[LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]: 842
//│ case _lh_listcomp_fun_para⁶ of {LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => if ((_lh_listcomp_fun_ls_h⁸ % _lh_nextSize_arg2¹) > 0) then [LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)] else _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸) | LH_N  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)})
//│ in _lh_listcomp_fun⁸([LH_C (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h⁶) [LH_N]]) | LH_N  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)})
//│ in _lh_listcomp_fun⁷(_lh_nextSize_Wheel_1¹) | LH_N  => [LH_N]}: 855 --->
//│ 	[LH_C a² enumFromThenTo_₁_₀(t⁷, ((2 * t⁷) - a²), b²)]: 532
//│ 	[LH_N]: 533
//│ case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)}: 910 --->
//│ 	[LH_N]: 918
//│ 	[LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]: 919
//│ case _lh_listcomp_fun_para⁹ of {LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => if noFactor_₀_₀(_lh_sieve_Wheel_0¹, _lh_sieve_arg2¹, _lh_sieve_arg3¹, _lh_listcomp_fun_ls_h¹¹) then [LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | LH_N  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)})
//│ in _lh_listcomp_fun¹¹([LH_C (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h⁹) [LH_N]]) | LH_N  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)})
//│ in _lh_listcomp_fun¹⁰(_lh_sieve_Wheel_1¹) | LH_N  => [LH_N]}: 932 --->
//│ 	[LH_C a³ enumFromThenTo_₀_₀(t¹¹, ((2 * t¹¹) - a³), b³)]: 608
//│ 	[LH_N]: 609
//│ 	[LH_C _lh_sieve_Wheel_0¹ enumFromThenTo_₀_₀((_lh_sieve_Wheel_0¹ * 2), (_lh_sieve_Wheel_0¹ * 3), (min_₀_₀((_lh_sieve_arg4¹ * _lh_sieve_arg4¹), (head_lz_₀_₀(_lh_sieve_arg2¹) - 1)) * _lh_sieve_Wheel_0¹))]: 969
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testWheelSieve1_nofib_₀_₀(primId⁰(1000))
//│ def testWheelSieve1_nofib_₀_₀(_lh_testWheelSieve1_nofib_arg1²) = 
//│ 	prime_₀_₀(_lh_testWheelSieve1_nofib_arg1²)
//│ 	where
//│ 	def prime_₀_₀(_lh_prime_arg1²) = 
//│ 		atIndex_lz_₀_₀(_lh_prime_arg1², primes_₀_₀(_lh_prime_arg1²))
//│ 		where
//│ 		def atIndex_lz_₀_₀(n², ls¹⁴) = 
//│ 			if (n² < 0) then error⁰ else case force⁰(ls¹⁴) of {
//│ 				LH_C h⁸ t¹² => if (n² == 0) then h⁸ else atIndex_lz_₀_₀((n² - 1), t¹²)
//│ 				| LH_N  => error⁰}
//│ 		def primes_₀_₀(_lh_primes_arg1²) = 
//│ 			lazy⁰(sieve_₀_₀(wheels_₀_₀(primes_₀_₀(_lh_primes_arg1²)), primes_₀_₀(_lh_primes_arg1²), squares_₀_₀(primes_₀_₀(_lh_primes_arg1²)), _lh_primes_arg1²))
//│ 			where
//│ 			def sieve_₀_₀(_lh_sieve_arg1², _lh_sieve_arg2², _lh_sieve_arg3², _lh_sieve_arg4²) = 
//│ 				let _lh_matchIdent⁸ = force⁰(_lh_sieve_arg1²)
//│ 				in case _lh_matchIdent⁸ of {
//│ 					LH_C _lh_sieve_LH_C_0¹ _lh_sieve_LH_C_1¹ => case _lh_sieve_LH_C_0¹ of {
//│ 						Wheel _lh_sieve_Wheel_0¹ _lh_sieve_Wheel_1¹ => append_lz_₀_₀(
//│ 							let _lh_listcomp_fun¹² = (fun _lh_listcomp_fun_para¹² -> _lh_listcomp_fun_para¹²(_lh_listcomp_fun¹², _lh_sieve_Wheel_0¹, _lh_sieve_Wheel_1¹, _lh_sieve_arg2², _lh_sieve_arg3²))
//│ 							in _lh_listcomp_fun¹²(
//│ 								let _lh_listcomp_fun_ls_t¹² = enumFromThenTo_₀_₀((_lh_sieve_Wheel_0¹ * 2), (_lh_sieve_Wheel_0¹ * 3), (min_₀_₀((_lh_sieve_arg4² * _lh_sieve_arg4²), (head_lz_₀_₀(_lh_sieve_arg2²) - 1)) * _lh_sieve_Wheel_0¹))
//│ 								in let _lh_listcomp_fun_ls_h¹² = _lh_sieve_Wheel_0¹
//│ 								in (fun _lh_listcomp_fun¹³ -> (fun _lh_sieve_Wheel_0² -> (fun _lh_sieve_Wheel_1² -> (fun _lh_sieve_arg2³ -> (fun _lh_sieve_arg3³ -> 
//│ 									let _lh_listcomp_fun¹⁴ = (fun _lh_listcomp_fun_para¹³ -> case _lh_listcomp_fun_para¹³ of {
//│ 										LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => 
//│ 											let _lh_listcomp_fun¹⁵ = (fun _lh_listcomp_fun_para¹⁴ -> _lh_listcomp_fun_para¹⁴(_lh_listcomp_fun¹⁵, _lh_sieve_Wheel_0², _lh_sieve_arg2³, _lh_sieve_arg3³, _lh_listcomp_fun_ls_t¹⁰, _lh_listcomp_fun¹⁴))
//│ 											in _lh_listcomp_fun¹⁵(
//│ 												let _lh_listcomp_fun_ls_t¹³ = (fun _lh_listcomp_fun¹⁸ -> (fun _lh_sieve_Wheel_0⁴ -> (fun _lh_sieve_arg2⁵ -> (fun _lh_sieve_arg3⁵ -> (fun _lh_listcomp_fun_ls_t¹⁵ -> (fun _lh_listcomp_fun¹⁹ -> _lh_listcomp_fun¹⁹(_lh_listcomp_fun_ls_t¹⁵)))))))
//│ 												in let _lh_listcomp_fun_ls_h¹³ = (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h¹²)
//│ 												in (fun _lh_listcomp_fun¹⁶ -> (fun _lh_sieve_Wheel_0³ -> (fun _lh_sieve_arg2⁴ -> (fun _lh_sieve_arg3⁴ -> (fun _lh_listcomp_fun_ls_t¹⁴ -> (fun _lh_listcomp_fun¹⁷ -> if noFactor_₀_₀(_lh_sieve_Wheel_0³, _lh_sieve_arg2⁴, _lh_sieve_arg3⁴, _lh_listcomp_fun_ls_h¹³) then [LH_C _lh_listcomp_fun_ls_h¹³ _lh_listcomp_fun¹⁶(_lh_listcomp_fun_ls_t¹³)] else _lh_listcomp_fun¹⁶(_lh_listcomp_fun_ls_t¹³))))))))
//│ 										| LH_N  => _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t¹²)})
//│ 									in _lh_listcomp_fun¹⁴(_lh_sieve_Wheel_1²))))))), sieve_₀_₀(_lh_sieve_LH_C_1¹, tail_lz_₀_₀(_lh_sieve_arg2²), tail_lz_₁_₀(_lh_sieve_arg3²), _lh_sieve_arg4²))
//│ 						| _  => error⁰}
//│ 					| _  => error⁰}
//│ 				where
//│ 				def append_lz_₀_₀(_lh_append_lz_arg1², _lh_append_lz_arg2²) = 
//│ 					let _lh_matchIdent¹¹ = _lh_append_lz_arg1²
//│ 					in case _lh_matchIdent¹¹ of {
//│ 						LH_C _lh_append_lz_LH_C_0¹ _lh_append_lz_LH_C_1¹ => lazy⁰([LH_C _lh_append_lz_LH_C_0¹ append_lz_₀_₀(_lh_append_lz_LH_C_1¹, _lh_append_lz_arg2²)])
//│ 						| LH_N  => _lh_append_lz_arg2²
//│ 						| _  => error⁰}
//│ 				def enumFromThenTo_₀_₀(a⁴, t¹⁴, b⁴) = 
//│ 					if (a⁴ <= b⁴) then 
//│ 						let _lh_listcomp_fun_ls_t¹⁶ = enumFromThenTo_₀_₀(t¹⁴, ((2 * t¹⁴) - a⁴), b⁴)
//│ 						in let _lh_listcomp_fun_ls_h¹⁴ = a⁴
//│ 						in (fun _lh_listcomp_fun²⁰ -> (fun _lh_sieve_Wheel_0⁵ -> (fun _lh_sieve_Wheel_1³ -> (fun _lh_sieve_arg2⁶ -> (fun _lh_sieve_arg3⁶ -> 
//│ 							let _lh_listcomp_fun²¹ = (fun _lh_listcomp_fun_para¹⁵ -> case _lh_listcomp_fun_para¹⁵ of {
//│ 								LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => 
//│ 									let _lh_listcomp_fun²² = (fun _lh_listcomp_fun_para¹⁶ -> _lh_listcomp_fun_para¹⁶(_lh_listcomp_fun²², _lh_sieve_Wheel_0⁵, _lh_sieve_arg2⁶, _lh_sieve_arg3⁶, _lh_listcomp_fun_ls_t¹⁰, _lh_listcomp_fun²¹))
//│ 									in _lh_listcomp_fun²²(
//│ 										let _lh_listcomp_fun_ls_t¹⁷ = (fun _lh_listcomp_fun²⁵ -> (fun _lh_sieve_Wheel_0⁷ -> (fun _lh_sieve_arg2⁸ -> (fun _lh_sieve_arg3⁸ -> (fun _lh_listcomp_fun_ls_t¹⁹ -> (fun _lh_listcomp_fun²⁶ -> _lh_listcomp_fun²⁶(_lh_listcomp_fun_ls_t¹⁹)))))))
//│ 										in let _lh_listcomp_fun_ls_h¹⁵ = (_lh_listcomp_fun_ls_h¹⁰ + _lh_listcomp_fun_ls_h¹⁴)
//│ 										in (fun _lh_listcomp_fun²³ -> (fun _lh_sieve_Wheel_0⁶ -> (fun _lh_sieve_arg2⁷ -> (fun _lh_sieve_arg3⁷ -> (fun _lh_listcomp_fun_ls_t¹⁸ -> (fun _lh_listcomp_fun²⁴ -> if noFactor_₀_₀(_lh_sieve_Wheel_0⁶, _lh_sieve_arg2⁷, _lh_sieve_arg3⁷, _lh_listcomp_fun_ls_h¹⁵) then [LH_C _lh_listcomp_fun_ls_h¹⁵ _lh_listcomp_fun²³(_lh_listcomp_fun_ls_t¹⁷)] else _lh_listcomp_fun²³(_lh_listcomp_fun_ls_t¹⁷))))))))
//│ 								| LH_N  => _lh_listcomp_fun²⁰(_lh_listcomp_fun_ls_t¹⁶)})
//│ 							in _lh_listcomp_fun²¹(_lh_sieve_Wheel_1³)))))) else (fun _lh_listcomp_fun²⁷ -> (fun _lh_sieve_Wheel_0⁸ -> (fun _lh_sieve_Wheel_1⁴ -> (fun _lh_sieve_arg2⁹ -> (fun _lh_sieve_arg3⁹ -> [LH_N])))))
//│ 				def head_lz_₀_₀(ls¹⁰) = 
//│ 					case force⁰(ls¹⁰) of {
//│ 						LH_C h⁵ t⁸ => h⁵
//│ 						| LH_N  => error⁰}
//│ 				def min_₀_₀(_lh_min_arg1², _lh_min_arg2²) = 
//│ 					if (_lh_min_arg1² > _lh_min_arg2²) then _lh_min_arg2² else _lh_min_arg1²
//│ 				def noFactor_₀_₀(_lh_noFactor_arg1², _lh_noFactor_arg2², _lh_noFactor_arg3², _lh_noFactor_arg4²) = 
//│ 					if (_lh_noFactor_arg1² <= 2) then [True] else notDivBy_₀_₀(_lh_noFactor_arg2², _lh_noFactor_arg3², _lh_noFactor_arg4²)
//│ 					where
//│ 					def notDivBy_₀_₀(_lh_notDivBy_arg1², _lh_notDivBy_arg2², _lh_notDivBy_arg3²) = 
//│ 						let _lh_matchIdent⁹ = force⁰(_lh_notDivBy_arg2²)
//│ 						in case _lh_matchIdent⁹ of {
//│ 							LH_C _lh_notDivBy_LH_C_0² _lh_notDivBy_LH_C_1² => if (_lh_notDivBy_LH_C_0² > _lh_notDivBy_arg3²) then [True] else 
//│ 								let _lh_matchIdent¹⁰ = force⁰(_lh_notDivBy_arg1²)
//│ 								in case _lh_matchIdent¹⁰ of {
//│ 									LH_C _lh_notDivBy_LH_C_0³ _lh_notDivBy_LH_C_1³ => (((_lh_notDivBy_arg3² % _lh_notDivBy_LH_C_0³) > 0) && notDivBy_₀_₀(_lh_notDivBy_LH_C_1³, _lh_notDivBy_LH_C_1², _lh_notDivBy_arg3²))
//│ 									| _  => error⁰}
//│ 							| _  => error⁰}
//│ 				def tail_lz_₀_₀(ls¹³) = 
//│ 					case force⁰(ls¹³) of {
//│ 						LH_C h⁷ t¹⁰ => t¹⁰
//│ 						| LH_N  => error⁰}
//│ 				def tail_lz_₁_₀(ls¹¹) = 
//│ 					case force⁰(ls¹¹) of {
//│ 						LH_C h⁹ t¹³ => t¹³
//│ 						| LH_N  => error⁰}
//│ 			def squares_₀_₀(_lh_squares_arg1²) = 
//│ 				map_lz_₀_₀((fun p² -> (p² * p²)), _lh_squares_arg1²)
//│ 				where
//│ 				def map_lz_₀_₀(f⁴, ls¹²) = 
//│ 					lazy⁰(case force⁰(ls¹²) of {
//│ 						LH_C h⁶ t⁹ => [LH_C f⁴(h⁶) map_lz_₀_₀(f⁴, t⁹)]
//│ 						| LH_N  => [LH_N]})
//│ 			def wheels_₀_₀(_lh_wheels_arg1²) = 
//│ 				lazy⁰([LH_C [Wheel 1 [LH_C 1 [LH_N]]] zipWith_lz_lz_₀_₀(nextSize_₀_₀, wheels_₀_₀(_lh_wheels_arg1²), _lh_wheels_arg1²)])
//│ 				where
//│ 				def nextSize_₀_₀(_lh_nextSize_arg1², _lh_nextSize_arg2²) = 
//│ 					case _lh_nextSize_arg1² of {
//│ 						Wheel _lh_nextSize_Wheel_0¹ _lh_nextSize_Wheel_1¹ => [Wheel (_lh_nextSize_Wheel_0¹ * _lh_nextSize_arg2²) 
//│ 							let _lh_listcomp_fun²⁸ = (fun _lh_listcomp_fun_para¹⁷ -> _lh_listcomp_fun_para¹⁷(_lh_listcomp_fun²⁸, _lh_nextSize_Wheel_1¹, _lh_nextSize_arg2²))
//│ 							in _lh_listcomp_fun²⁸(enumFromThenTo_₁_₀(0, _lh_nextSize_Wheel_0¹, ((_lh_nextSize_arg2² - 1) * _lh_nextSize_Wheel_0¹)))]
//│ 						| _  => error⁰}
//│ 					where
//│ 					def enumFromThenTo_₁_₀(a⁵, t¹⁵, b⁵) = 
//│ 						if (a⁵ <= b⁵) then 
//│ 							let _lh_listcomp_fun_ls_t²⁰ = enumFromThenTo_₁_₀(t¹⁵, ((2 * t¹⁵) - a⁵), b⁵)
//│ 							in let _lh_listcomp_fun_ls_h¹⁶ = a⁵
//│ 							in (fun _lh_listcomp_fun²⁹ -> (fun _lh_nextSize_Wheel_1² -> (fun _lh_nextSize_arg2³ -> 
//│ 								let _lh_listcomp_fun³⁰ = (fun _lh_listcomp_fun_para¹⁸ -> case _lh_listcomp_fun_para¹⁸ of {
//│ 									LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => 
//│ 										let _lh_listcomp_fun³¹ = (fun _lh_listcomp_fun_para¹⁹ -> _lh_listcomp_fun_para¹⁹(_lh_listcomp_fun³¹, _lh_nextSize_arg2³, _lh_listcomp_fun_ls_t⁷, _lh_listcomp_fun³⁰))
//│ 										in _lh_listcomp_fun³¹(
//│ 											let _lh_listcomp_fun_ls_t²¹ = (fun _lh_listcomp_fun³⁴ -> (fun _lh_nextSize_arg2⁵ -> (fun _lh_listcomp_fun_ls_t²³ -> (fun _lh_listcomp_fun³⁵ -> _lh_listcomp_fun³⁵(_lh_listcomp_fun_ls_t²³)))))
//│ 											in let _lh_listcomp_fun_ls_h¹⁷ = (_lh_listcomp_fun_ls_h⁷ + _lh_listcomp_fun_ls_h¹⁶)
//│ 											in (fun _lh_listcomp_fun³² -> (fun _lh_nextSize_arg2⁴ -> (fun _lh_listcomp_fun_ls_t²² -> (fun _lh_listcomp_fun³³ -> if ((_lh_listcomp_fun_ls_h¹⁷ % _lh_nextSize_arg2⁴) > 0) then [LH_C _lh_listcomp_fun_ls_h¹⁷ _lh_listcomp_fun³²(_lh_listcomp_fun_ls_t²¹)] else _lh_listcomp_fun³²(_lh_listcomp_fun_ls_t²¹))))))
//│ 									| LH_N  => _lh_listcomp_fun²⁹(_lh_listcomp_fun_ls_t²⁰)})
//│ 								in _lh_listcomp_fun³⁰(_lh_nextSize_Wheel_1²)))) else (fun _lh_listcomp_fun³⁶ -> (fun _lh_nextSize_Wheel_1³ -> (fun _lh_nextSize_arg2⁶ -> [LH_N])))
//│ 				def zipWith_lz_lz_₀_₀(f⁵, xs², ys²) = 
//│ 					lazy⁰(case force⁰(xs²) of {
//│ 						LH_C hx¹ tx¹ => case force⁰(ys²) of {
//│ 							LH_C hy¹ ty¹ => [LH_C f⁵(hx¹, hy¹) zipWith_lz_lz_₀_₀(f⁵, tx¹, ty¹)]
//│ 							| LH_N  => [LH_N]}
//│ 						| LH_N  => [LH_N]})
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
