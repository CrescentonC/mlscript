

:lhInHaskell
:lhGenOCaml
append__lz xs ys = case xs of {
                      [] -> ys;
                      (h:t) -> lazy (h:(append__lz t ys))
                    }
import System.Environment
import Control.Monad (forM_)
import Data.List
import Prelude hiding (length, or, foldr, maximum, concat, foldl)
data BinTree a b = Cell a | Node b (BinTree a b) (BinTree a b) deriving Show
type Circuit a = (Int, [Label], [Label], [State a])
type Label = (String, Pid)
type Pid = Int
data Component = None | Inp | Outp | Dff | Inv | And2 | Or2 | Xor deriving (Eq, Show)
data Unit = Unit
--- data State a = PS
---   {pid        :: Int,    -- site identifier
---    compType   :: Component,  -- component represented in the site
---    pathDepth  :: Int,    -- path depth at which outputs become valid
---    inports    :: [InPort a],  -- tags and latches for the inputs
---    outports   :: [OutPort a]  -- tags and latches for the outputs
---   }
data State a = PS Int Component Int [InPort a] [OutPort a] deriving Show
pid (PS _pid _compType _pathDepth _inports _outports) = _pid
compType (PS _pid _compType _pathDepth _inports _outports) = _compType
pathDepth (PS _pid _compType _pathDepth _inports _outports) = _pathDepth
inports (PS _pid _compType _pathDepth _inports _outports) = _inports
outports (PS _pid _compType _pathDepth _inports _outports) = _outports
updateOutports ps new = PS (pid ps) (compType ps) (pathDepth ps) (inports ps) new
updateInports ps new = PS (pid ps) (compType ps) (pathDepth ps) new (outports ps)
type InPort a =
  (Pid,  -- identifies processor that will supply the input signal
   Int,  -- the output port number of the signal
   a)    -- latch to hold the input signal value
type OutPort a =
  (Int,  -- output port number for the signal value
  a,  -- latch to hold the signal value
  Bool,  -- need to send it to the left?
  Int,  -- distance to send to the left
  Bool,  -- need to send it to the right?
  Int)  -- distance to send to the right
data Boolean = F | T deriving (Eq, Show)
type Packet a =
  (Pid,  -- id of this packet
  Int,  -- output port number for the signal value
  a,  -- latch to hold the signal value
  Bool,  -- need to send it to the left?
  Int,  -- distance to send to the left
  Bool,  -- need to send it to the right?
  Int,  -- distance to send to the right
  Int)  -- extent
--- class (Eq a, Show a) => Signal a where
---   zeroS, one :: a
---   inv :: a -> a
---   and2, or2, xor :: a -> a -> a
---   inv x = if (x==one) then zeroS else one
---   and2 x y = if (x==one) && (y==one) then one else zeroS
---   or2 x y = if (x==one) || (y==one) then one else zeroS
---   xor x y = if (x==y) then one else zeroS
--- instance Signal Boolean where
---   zeroS = F
---   one   = T
unzip ls = foldr (\ab asbs -> case ab of {(a, b) -> (case asbs of {(as, bs) -> ((a:as), (b:bs))})}) ([],[]) ls
combine y h ys t = (y:h) : (transpose (ys:t))
transpose [] = []
transpose ([] : xss) = transpose xss
transpose ((x : xs) : xss) = case (unzip [(hd, tl) | hd : tl <- xss]) of {
  (hds, tls) -> combine x hds xs tls
}
snd (_, b) = b
or [] = False
or (h:t) = if h then True else (or t)
drop n []      = []
drop n (h:t)   = if n <= 0 then (h:t) else (drop (n - 1) t)
scanl f q ls   = q : (case ls of
                               []   -> [];
                               x:xs -> scanl f (f q x) xs)
quotRem a b = (div a b, mod a b)
power b n = if n == 0 then 1 else (b * (power b (n - 1)))
maximum (h:t) = go h t
  where go m [] = m
        go m (h:t) = if m > h then go m t else go h t
maximum [] = error
copy n x = if n > 0 then x:(copy (n - 1) x) else []
copy_lz n x = if n > 0 then lazy (x:(copy_lz (n - 1) x)) else lazy []
until p f i = if (p i) then i else until p f (f i)
splitAt n ls = (take n ls, drop n ls)
put :: [a] -> BinTree a Unit
put [x] = Cell x
put xs  = case (splitAt ((length xs) `div` 2) xs) of {
  (fstHalf, sndHalf) -> Node Unit (put fstHalf) (put sndHalf)
}
get :: BinTree a b -> [a]
get (Cell x) = [x]
get (Node x l r) = get l ++ get r
upsweep :: (a -> a -> a) -> BinTree a b -> (a, BinTree a (a,a))
upsweep f (Cell a)     = (a, Cell a)
upsweep f (Node x l r) = case (upsweep f l) of {
  (lv, l') -> case (upsweep f r) of {
    (rv, r') -> (f lv rv, Node (lv, rv) l' r')
  }
}
downsweep :: (a -> b -> c -> (c,c)) -> c -> BinTree d (a,b) -> BinTree c Unit
downsweep g d (Cell x)      = Cell d
downsweep g d (Node (lv,rv) l r) = case (g lv rv d) of {
  (dl, dr) -> case (downsweep g dl l, downsweep g dr r) of {
    (l', r') -> Node Unit l' r'
  }
}
sweep_ud :: (a -> a -> a) -> (a -> a -> b -> (b,b)) -> b -> BinTree a c -> (a, BinTree b Unit)
sweep_ud up down u t = case (upsweep up t) of {
  (ans, t') -> (ans, downsweep down u t')
}
scanL :: (a -> a -> a) -> a -> [a] -> (a,[a])
scanL f u xs =
  let down = \l r x -> (x, f x l) in
  case (sweep_ud f down u (put xs)) of {
    (up_ans, t') -> (up_ans, get t')
  }
scanR :: (a -> a -> a) -> a -> [a] -> (a,[a])
scanR f u xs =
  let down = \l r x -> (f r x, x) in
  case (sweep_ud f down u (put xs)) of {
    (up_ans, t') -> (up_ans, get t')
  }
scanlr :: (a -> a -> a) -> (a -> a -> a) -> a -> a -> [a] -> ((a,a), [(a,a)])
scanlr f g lu ru xs =
  let xs' = map (\x -> (x,x)) xs in
  case (sweep_ud (up f g) (down f g) (lu,ru) (put xs')) of {
    ((l_ans,r_ans), t) -> let ans = (g r_ans ru, f lu l_ans) in (ans, get t)
  }
  where
    up f g (lx,ly) (rx,ry) = (f lx rx, g ly ry)
    down f g (lx,ly) (rx,ry) (a,b) = ((a, g ry b), (f a lx, b))
nearest_power_of_two :: Int -> Int
nearest_power_of_two x = until (\a -> a >= x) (\a -> a * 2) 1
--- pad_circuit :: Signal a => Circuit a -> Circuit a
pad_circuit (size, ins, outs, states) =
  let p2 = nearest_power_of_two size in
  (p2, ins, outs, take_lz p2 (append__lz states (copy_lz p2 emptyState)))
--- emptyState :: Signal a => State a
emptyState = PS (0-1) None (0-1) [] []
inv x = if (polyEq x T) then F else T
and2 x y = if (polyEq x T) && (polyEq y T) then T else F
or2 x y = if (polyEq x T) || (polyEq y T) then T else F
xor x y = if (polyEq x y) then T else F
--- emptyPacket :: Signal a => Packet a
emptyPacket = (0-1, 0-1, F, False, 0, False, 0, 1)
send_right :: Packet a -> Packet a -> Packet a
send_right (ia,sa,ma,qla,dla,qra,dra,ea) (ib,sb,mb,qlb,dlb,qrb,drb,eb) =
  if qra && (dra>eb)
    then (ia,sa,ma,qla,dla,qra,dra-eb,ea+eb)
    else (ib,sb,mb,qlb,dlb,qrb,drb,ea+eb)
send_left :: Packet a -> Packet a -> Packet a
send_left (ia,sa,ma,qla,dla,qra,dra,ea) (ib,sb,mb,qlb,dlb,qrb,drb,eb) =
  if qlb && (dlb>ea)
    then (ib,sb,mb,qlb,dlb-ea,qrb,drb,ea+eb)
    else (ia,sa,ma,qla,dla,qra,dra,ea+eb)
--- send :: Signal a => [Packet a] -> ((Packet a, Packet a), [(Packet a, Packet a)])
send xs = scanlr send_right send_left emptyPacket emptyPacket xs
--- circuit_simulate :: Signal a => [[a]] -> Circuit a -> [[a]]
circuit_simulate inputs_list circuit = map collect_outputs (simulate inputs_list circuit)
collect_outputs :: Circuit a -> [a]
collect_outputs (size, ins, outs, states) = map (get_output states) outs
   where
    get_output states (label, p) = third (head [ head (inports s) | s<-states, (p == (pid s))])
    third (_,_,v) = v
--- simulate :: Signal a => [[a]] -> Circuit a -> [Circuit a]
simulate inputs_list (size, ins, outs, states) =
  tail (scanl (do_cycle (critical_path_depth (size, ins, outs, states))) (size, ins, outs, map init_dffs states) inputs_list)
--- do_cycle :: Signal a => Int -> Circuit a -> [a] -> Circuit a
do_cycle cpd (size, ins, outs, states) inputs =
  let states1 = map (store_inputs (zip ins inputs)) states in
  let states2 = do_sends 0 states1 in
  let states3 = foldl sim_then_send states2 [1..cpd] in
  let states4 = restore_requests states states3 in
  (size, ins, outs, states4)
    where
    sim_then_send state d = do_sends d (simulate_components d state)
--- restore_requests :: Signal a => [State a] -> [State a] -> [State a]
restore_requests old_states new_states = zipWith restore old_states new_states
     where
      restore os ns = updateOutports ns (zipWith restore_outport (outports os) (outports ns))
      restore_outport (p,_,ql,dl,qr,dq) (_,m,_,_,_,_) = (p,m,ql,dl,qr,dq)
--- do_sends :: Signal a => Int -> [State a] -> [State a]
do_sends d states = until (acknowledge d) (do_send d) states
--- acknowledge :: Signal a => Int -> [State a] -> Bool
acknowledge d states =
  let states1 = map (check_depth d) states in 
  not (or (map (check_requests . outports) states1))
    where
    check_requests xs = or (map check_lr_requests xs)
    check_lr_requests (p,m,ql,dl,qr,dr) = ql || qr
--- do_send :: Signal a => Int -> [State a] -> [State a]
do_send d states =
  let states1 = map (check_depth d) states in
  let send_results = map (snd . send) ((transpose . pad_packets) (map make_packet states1)) in
  let pss' = transpose send_results in
  zipWith (update_io d) pss' states
--- update_io :: Signal a => Int -> [(Packet a,Packet a)] -> State a -> State a
update_io d lrps state =
  let update_is = \state -> updateInports state (foldr update_i (inports state) lrps) in
  let update_os = \state -> if (pathDepth state) == d then updateOutports state (zipWith update_o lrps (outports state)) else state in
  update_os (update_is state)
--- update_o :: Signal a => (Packet a, Packet a) -> OutPort a -> OutPort a
update_o (lp, rp) out = check_left lp (check_right rp out)
check_left (pid, port, pm, pql, pdl, pqr, pdr, e) (p, m, ql, dl, qr, dr)
  = if pqr && (pdr>0)
    then (p, m, ql, dl, qr, dr)
    else (p, m, ql, dl, False, dr)
check_right (pid, port, pm, pql, pdl, pqr, pdr, e) (p, m, ql, dl, qr, dr)
  = if pql && (pdl>0)
    then (p, m, ql, dl, qr, dr)
    else (p, m, False, dl, qr, dr)
--- update_i :: Signal a => (Packet a, Packet a) -> [InPort a] -> [InPort a]
update_i (l,r) ins = up_i l (up_i r ins)
--- up_i :: Signal a => Packet a -> [InPort a] -> [InPort a]
up_i (i, p, m', _, _, _, _, _) ins = map (compare_and_update (i,p,m')) ins
--- compare_and_update :: Signal a => InPort a -> InPort a -> InPort a
compare_and_update (i, p, m') (pid, port, m)
  = if polyEq (i, p) (pid, port)
    then (pid, port, m')
    else (pid, port, m)
--- make_packet :: Signal a => State a -> [Packet a]
make_packet state = [ (pid state, p, m, ql, dl, qr, dr, 1) | (p, m, ql, dl, qr, dr) <- outports state ]
--- pad_packets :: Signal a => [[Packet a]] -> [[Packet a]]
pad_packets pss =
  let pad = \xs -> let max_ps = maximum (map length pss) in take_lz max_ps (append__lz xs (copy_lz max_ps emptyPacket)) in
  map pad pss
--- check_depth :: Signal a => Int -> State a -> State a
check_depth d state
  = if (pathDepth state) == d
    then state
    else update_requests False state
--- update_requests :: Signal a => Bool -> State a -> State a
update_requests b state
  = updateOutports state [ (p, m, b, dl, b, dr) | (p, m, ql, dl, qr, dr) <- outports state ]
--- simulate_components :: Signal a => Int -> [State a] -> [State a]
simulate_components depth states = map (simulate_component depth) states
--- simulate_component :: Signal a => Int -> State a -> State a
simulate_component d state =
  let out_signals = [ sig | (_,_,sig) <- inports state] in
  let new_value = apply_component (compType state) out_signals in
    if (d == (pathDepth state)) && not (polyEq new_value Nothing)
    then case new_value of {Just v -> update_outports state v}
    else state
--- apply_component :: Signal a => Component -> [a] -> Maybe a
apply_component Inp _      = Nothing
apply_component Outp [x]   = Just x
apply_component Dff [x]    = Just x
apply_component Inv [x]    = Just (inv x)
apply_component And2 [x,y] = Just (and2 x y)
apply_component Or2 [x,y]  = Just (or2 x y)
apply_component Xor [x,y]  = Just (xor x y)
apply_component None s     = Nothing
apply_component _ _ = error
--- store_inputs :: Signal a => [(Label,a)] -> State a -> State a
store_inputs label_inputs (PS pid Inp _b _c _d)
  = head [ update_outports (PS pid Inp _b _c _d) value | ((label, input_pid), value) <- label_inputs, pid == input_pid ]
store_inputs label_inputs state = state
--- init_dffs :: Signal a => State a -> State a
init_dffs state =
  if polyEq (compType state) Dff
  then update_outports state F
  else state
--- critical_path_depth :: Signal a => Circuit a -> Int
critical_path_depth (size, ins, outs, states) = maximum (map pathDepth states)
--- update_outports :: Signal a => State a -> a -> State a
update_outports state value
  = updateOutports state [ (p, value, ql, dl, qr, dr) | (p, m, ql, dl, qr, dr) <- (outports state) ]
--- regs :: Signal a => Int -> Circuit a
regs bits =
  let is = ("sto",0):(zipWith_lz_nl ilabel [0..] [ (7*x)+1 | x <- [0..bits-1]]) in
  let os = zipWith_lz_nl olabel [0..] [ (7*x)+7 | x <- [0..bits-1]] in
  let sto = PS 0 Inp 0 [] [(0, F, False, 0, True, (8*(bits-1))+5)] in
  let states = sto:(concat (map (reg 0) [ (7*x)+1 | x <- [0..bits-1]])) in
  (1+(7*bits), is, os, states)
    where
    ilabel n pid = ("x" ++ (string_of_int n), pid)
    olabel n pid = ("y" ++ (string_of_int n), pid)
--- reg :: Signal a => Pid -> Pid -> [State a]
reg sto n
  = [ PS n Inp 0 [] [(0, F, False, 0, True, 4)],
      PS (n+1) Dff 1 [(n+5, 0, F)] [(0, F, False, 0, True, 5)],
      PS (n+2) Inv 1 [(sto, 0, F)] [(0, F, False, 0, True, 1)],
      PS (n+3) And2 2 [(n+1, 0, F), (n+2, 0, F)] [(0, F, False, 0, True, 2)],
      PS (n+4) And2 1 [(sto, 0, F), (n, 0, F)] [(0, F, False, 0, True, 1)],
      PS (n+5) Or2 3 [(n+3, 0, F), (n+4, 0, F)] [(0, F, True, 4, False, 0)],
      PS (n+6) Outp 4 [(n+1, 0, F)] []
    ]
testCircsim_nofib n = run 8 n
run :: Int -> Int -> [[Boolean]]
run num_bits num_cycles =
  let example = pad_circuit (regs num_bits) in
  let inputs = copy (num_bits + 1) (T) in
  let cycles = copy num_cycles (inputs) in
  circuit_simulate cycles example
testCircsim_nofib $ primId 40
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> after expansion >>>>>>>>>>
//│ testCircsim_nofib_lh_₁(primId⁰(40))
//│ def acknowledge_lh_₁(_lh_acknowledge_arg1¹, _lh_acknowledge_arg2¹) = 
//│ 	let check_requests¹ = (fun _lh_check_requests_arg1¹ -> or_lh_₁(map_lh_₁₁(check_lr_requests¹, _lh_check_requests_arg1¹)))
//│ 	and check_lr_requests¹ = (fun _lh_check_lr_requests_arg1¹ -> case _lh_check_lr_requests_arg1¹ of {
//│ 			LH_P6 _lh_check_lr_requests_LH_P6_0¹ _lh_check_lr_requests_LH_P6_1¹ _lh_check_lr_requests_LH_P6_2¹ _lh_check_lr_requests_LH_P6_3¹ _lh_check_lr_requests_LH_P6_4¹ _lh_check_lr_requests_LH_P6_5¹ => (_lh_check_lr_requests_LH_P6_2¹ || _lh_check_lr_requests_LH_P6_4¹)}) 
//│ 	in let states1² = map_lh_₁₃(check_depth_lh_₂(_lh_acknowledge_arg1¹), _lh_acknowledge_arg2¹)
//│ 	in not⁰(or_lh_₂(map_lh_₁₂((fun _lh_funcomp_x³ -> check_requests¹(outports_lh_₅(_lh_funcomp_x³))), states1²)))
//│ def acknowledge_lh_₂(_lh_acknowledge_arg1⁰, _lh_acknowledge_arg2⁰) = 
//│ 	let check_lr_requests⁰ = (fun _lh_check_lr_requests_arg1⁰ -> case _lh_check_lr_requests_arg1⁰ of {
//│ 			LH_P6 _lh_check_lr_requests_LH_P6_0⁰ _lh_check_lr_requests_LH_P6_1⁰ _lh_check_lr_requests_LH_P6_2⁰ _lh_check_lr_requests_LH_P6_3⁰ _lh_check_lr_requests_LH_P6_4⁰ _lh_check_lr_requests_LH_P6_5⁰ => (_lh_check_lr_requests_LH_P6_2⁰ || _lh_check_lr_requests_LH_P6_4⁰)})
//│ 	and check_requests⁰ = (fun _lh_check_requests_arg1⁰ -> or_lh_₃(map_lh_₁₇(check_lr_requests⁰, _lh_check_requests_arg1⁰))) 
//│ 	in let states1⁰ = map_lh_₁₈(check_depth_lh_₄(_lh_acknowledge_arg1⁰), _lh_acknowledge_arg2⁰)
//│ 	in not⁰(or_lh_₄(map_lh_₁₉((fun _lh_funcomp_x⁰ -> check_requests⁰(outports_lh_₆(_lh_funcomp_x⁰))), states1⁰)))
//│ def and2_lh_₁(_lh_and2_arg1⁰, _lh_and2_arg2⁰) = if (polyEq⁰(_lh_and2_arg1⁰, [T]) && polyEq⁰(_lh_and2_arg2⁰, [T])) then [T] else [F]
//│ def append__lz_lh_₁(_lh_append__lz_arg1¹, _lh_append__lz_arg2¹) = 
//│ 	let _lh_matchIdent²⁰ = _lh_append__lz_arg1¹
//│ 	in case _lh_matchIdent²⁰ of {
//│ 		LH_N  => _lh_append__lz_arg2¹
//│ 		| LH_C _lh_append__lz_LH_C_0¹ _lh_append__lz_LH_C_1¹ => lazy⁰([LH_C _lh_append__lz_LH_C_0¹ append__lz_lh_₁(_lh_append__lz_LH_C_1¹, _lh_append__lz_arg2¹)])}
//│ def append__lz_lh_₂(_lh_append__lz_arg1⁰, _lh_append__lz_arg2⁰) = 
//│ 	let _lh_matchIdent¹¹ = _lh_append__lz_arg1⁰
//│ 	in case _lh_matchIdent¹¹ of {
//│ 		LH_N  => _lh_append__lz_arg2⁰
//│ 		| LH_C _lh_append__lz_LH_C_0⁰ _lh_append__lz_LH_C_1⁰ => lazy⁰([LH_C _lh_append__lz_LH_C_0⁰ append__lz_lh_₂(_lh_append__lz_LH_C_1⁰, _lh_append__lz_arg2⁰)])}
//│ def apply_component_lh_₁(_lh_apply_component_arg1⁰, _lh_apply_component_arg2⁰) = case _lh_apply_component_arg1⁰ of {
//│ 	Inp  => [Nothing]
//│ 	| Outp  => case _lh_apply_component_arg2⁰ of {
//│ 		LH_C _lh_apply_component_LH_C_0⁰ _lh_apply_component_LH_C_1⁰ => case _lh_apply_component_LH_C_1⁰ of {
//│ 			LH_N  => [Just _lh_apply_component_LH_C_0⁰]
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| Dff  => case _lh_apply_component_arg2⁰ of {
//│ 		LH_C _lh_apply_component_LH_C_0¹ _lh_apply_component_LH_C_1¹ => case _lh_apply_component_LH_C_1¹ of {
//│ 			LH_N  => [Just _lh_apply_component_LH_C_0¹]
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| Inv  => case _lh_apply_component_arg2⁰ of {
//│ 		LH_C _lh_apply_component_LH_C_0² _lh_apply_component_LH_C_1² => case _lh_apply_component_LH_C_1² of {
//│ 			LH_N  => [Just inv_lh_₁(_lh_apply_component_LH_C_0²)]
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| And2  => case _lh_apply_component_arg2⁰ of {
//│ 		LH_C _lh_apply_component_LH_C_0³ _lh_apply_component_LH_C_1³ => case _lh_apply_component_LH_C_1³ of {
//│ 			LH_C _lh_apply_component_LH_C_0⁴ _lh_apply_component_LH_C_1⁴ => case _lh_apply_component_LH_C_1⁴ of {
//│ 				LH_N  => [Just and2_lh_₁(_lh_apply_component_LH_C_0³, _lh_apply_component_LH_C_0⁴)]
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| Or2  => case _lh_apply_component_arg2⁰ of {
//│ 		LH_C _lh_apply_component_LH_C_0⁵ _lh_apply_component_LH_C_1⁵ => case _lh_apply_component_LH_C_1⁵ of {
//│ 			LH_C _lh_apply_component_LH_C_0⁶ _lh_apply_component_LH_C_1⁶ => case _lh_apply_component_LH_C_1⁶ of {
//│ 				LH_N  => [Just or2_lh_₁(_lh_apply_component_LH_C_0⁵, _lh_apply_component_LH_C_0⁶)]
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| Xor  => case _lh_apply_component_arg2⁰ of {
//│ 		LH_C _lh_apply_component_LH_C_0⁷ _lh_apply_component_LH_C_1⁷ => case _lh_apply_component_LH_C_1⁷ of {
//│ 			LH_C _lh_apply_component_LH_C_0⁸ _lh_apply_component_LH_C_1⁸ => case _lh_apply_component_LH_C_1⁸ of {
//│ 				LH_N  => [Just xor_lh_₁(_lh_apply_component_LH_C_0⁷, _lh_apply_component_LH_C_0⁸)]
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| None  => [Nothing]
//│ 	| _  => error⁰}
//│ def check_depth_lh_₁(_lh_check_depth_arg1³, _lh_check_depth_arg2³) = if (pathDepth_lh_₆(_lh_check_depth_arg2³) == _lh_check_depth_arg1³) then _lh_check_depth_arg2³ else update_requests_lh_₁([False], _lh_check_depth_arg2³)
//│ def check_depth_lh_₂(_lh_check_depth_arg1², _lh_check_depth_arg2²) = if (pathDepth_lh_₈(_lh_check_depth_arg2²) == _lh_check_depth_arg1²) then _lh_check_depth_arg2² else update_requests_lh_₂([False], _lh_check_depth_arg2²)
//│ def check_depth_lh_₃(_lh_check_depth_arg1¹, _lh_check_depth_arg2¹) = if (pathDepth_lh_₉(_lh_check_depth_arg2¹) == _lh_check_depth_arg1¹) then _lh_check_depth_arg2¹ else update_requests_lh_₂([False], _lh_check_depth_arg2¹)
//│ def check_depth_lh_₄(_lh_check_depth_arg1⁰, _lh_check_depth_arg2⁰) = if (pathDepth_lh_₉(_lh_check_depth_arg2⁰) == _lh_check_depth_arg1⁰) then _lh_check_depth_arg2⁰ else update_requests_lh_₂([False], _lh_check_depth_arg2⁰)
//│ def check_left_lh_₁(_lh_check_left_arg1⁰, _lh_check_left_arg2⁰) = case _lh_check_left_arg1⁰ of {
//│ 	LH_P8 _lh_check_left_LH_P8_0⁰ _lh_check_left_LH_P8_1⁰ _lh_check_left_LH_P8_2⁰ _lh_check_left_LH_P8_3⁰ _lh_check_left_LH_P8_4⁰ _lh_check_left_LH_P8_5⁰ _lh_check_left_LH_P8_6⁰ _lh_check_left_LH_P8_7⁰ => case _lh_check_left_arg2⁰ of {
//│ 		LH_P6 _lh_check_left_LH_P6_0⁰ _lh_check_left_LH_P6_1⁰ _lh_check_left_LH_P6_2⁰ _lh_check_left_LH_P6_3⁰ _lh_check_left_LH_P6_4⁰ _lh_check_left_LH_P6_5⁰ => if (_lh_check_left_LH_P8_5⁰ && (_lh_check_left_LH_P8_6⁰ > 0)) then [LH_P6 _lh_check_left_LH_P6_0⁰ _lh_check_left_LH_P6_1⁰ _lh_check_left_LH_P6_2⁰ _lh_check_left_LH_P6_3⁰ _lh_check_left_LH_P6_4⁰ _lh_check_left_LH_P6_5⁰] else [LH_P6 _lh_check_left_LH_P6_0⁰ _lh_check_left_LH_P6_1⁰ _lh_check_left_LH_P6_2⁰ _lh_check_left_LH_P6_3⁰ [False] _lh_check_left_LH_P6_5⁰]}}
//│ def check_right_lh_₁(_lh_check_right_arg1⁰, _lh_check_right_arg2⁰) = case _lh_check_right_arg1⁰ of {
//│ 	LH_P8 _lh_check_right_LH_P8_0⁰ _lh_check_right_LH_P8_1⁰ _lh_check_right_LH_P8_2⁰ _lh_check_right_LH_P8_3⁰ _lh_check_right_LH_P8_4⁰ _lh_check_right_LH_P8_5⁰ _lh_check_right_LH_P8_6⁰ _lh_check_right_LH_P8_7⁰ => case _lh_check_right_arg2⁰ of {
//│ 		LH_P6 _lh_check_right_LH_P6_0⁰ _lh_check_right_LH_P6_1⁰ _lh_check_right_LH_P6_2⁰ _lh_check_right_LH_P6_3⁰ _lh_check_right_LH_P6_4⁰ _lh_check_right_LH_P6_5⁰ => if (_lh_check_right_LH_P8_3⁰ && (_lh_check_right_LH_P8_4⁰ > 0)) then [LH_P6 _lh_check_right_LH_P6_0⁰ _lh_check_right_LH_P6_1⁰ _lh_check_right_LH_P6_2⁰ _lh_check_right_LH_P6_3⁰ _lh_check_right_LH_P6_4⁰ _lh_check_right_LH_P6_5⁰] else [LH_P6 _lh_check_right_LH_P6_0⁰ _lh_check_right_LH_P6_1⁰ [False] _lh_check_right_LH_P6_3⁰ _lh_check_right_LH_P6_4⁰ _lh_check_right_LH_P6_5⁰]}}
//│ def circuit_simulate_lh_₁(_lh_circuit_simulate_arg1⁰, _lh_circuit_simulate_arg2⁰) = map_lh_₂(collect_outputs_lh_₁, simulate_lh_₁(_lh_circuit_simulate_arg1⁰, _lh_circuit_simulate_arg2⁰))
//│ def collect_outputs_lh_₁(_lh_collect_outputs_arg1⁰) = case _lh_collect_outputs_arg1⁰ of {
//│ 	LH_P4 _lh_collect_outputs_LH_P4_0⁰ _lh_collect_outputs_LH_P4_1⁰ _lh_collect_outputs_LH_P4_2⁰ _lh_collect_outputs_LH_P4_3⁰ => 
//│ 		let third⁰ = (fun _lh_third_arg1⁰ -> case _lh_third_arg1⁰ of {
//│ 				LH_P3 _lh_third_LH_P3_0⁰ _lh_third_LH_P3_1⁰ _lh_third_LH_P3_2⁰ => _lh_third_LH_P3_2⁰})
//│ 		and get_output⁰ = (fun _lh_get_output_arg1⁰ -> (fun _lh_get_output_arg2⁰ -> case _lh_get_output_arg2⁰ of {
//│ 				LH_P2 _lh_get_output_LH_P2_0⁰ _lh_get_output_LH_P2_1⁰ => third⁰(head_lh_₁(
//│ 					let _lh_listcomp_fun¹³ = (fun _lh_listcomp_fun_para¹³ -> case _lh_listcomp_fun_para¹³ of {
//│ 						LH_C _lh_listcomp_fun_ls_h¹³ _lh_listcomp_fun_ls_t¹³ => if (_lh_get_output_LH_P2_1⁰ == pid_lh_₁(_lh_listcomp_fun_ls_h¹³)) then [LH_C head_lh_₂(inports_lh_₁(_lh_listcomp_fun_ls_h¹³)) _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t¹³)] else _lh_listcomp_fun¹³(_lh_listcomp_fun_ls_t¹³)
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun¹³(_lh_get_output_arg1⁰)))})) 
//│ 		in map_lh_₄(get_output⁰(_lh_collect_outputs_LH_P4_3⁰), _lh_collect_outputs_LH_P4_2⁰)}
//│ def combine_lh_₁(_lh_combine_arg1¹, _lh_combine_arg2¹, _lh_combine_arg3¹, _lh_combine_arg4¹) = [LH_C [LH_C _lh_combine_arg1¹ _lh_combine_arg2¹] transpose_lh_₁([LH_C _lh_combine_arg3¹ _lh_combine_arg4¹])]
//│ def combine_lh_₂(_lh_combine_arg1⁰, _lh_combine_arg2⁰, _lh_combine_arg3⁰, _lh_combine_arg4⁰) = [LH_C [LH_C _lh_combine_arg1⁰ _lh_combine_arg2⁰] transpose_lh_₂([LH_C _lh_combine_arg3⁰ _lh_combine_arg4⁰])]
//│ def compType_lh_₁(_lh_compType_arg1⁴) = case _lh_compType_arg1⁴ of {
//│ 	PS _lh_compType_PS_0⁴ _lh_compType_PS_1⁴ _lh_compType_PS_2⁴ _lh_compType_PS_3⁴ _lh_compType_PS_4⁴ => _lh_compType_PS_1⁴}
//│ def compType_lh_₂(_lh_compType_arg1³) = case _lh_compType_arg1³ of {
//│ 	PS _lh_compType_PS_0³ _lh_compType_PS_1³ _lh_compType_PS_2³ _lh_compType_PS_3³ _lh_compType_PS_4³ => _lh_compType_PS_1³}
//│ def compType_lh_₃(_lh_compType_arg1²) = case _lh_compType_arg1² of {
//│ 	PS _lh_compType_PS_0² _lh_compType_PS_1² _lh_compType_PS_2² _lh_compType_PS_3² _lh_compType_PS_4² => _lh_compType_PS_1²}
//│ def compType_lh_₄(_lh_compType_arg1¹) = case _lh_compType_arg1¹ of {
//│ 	PS _lh_compType_PS_0¹ _lh_compType_PS_1¹ _lh_compType_PS_2¹ _lh_compType_PS_3¹ _lh_compType_PS_4¹ => _lh_compType_PS_1¹}
//│ def compType_lh_₅(_lh_compType_arg1⁰) = case _lh_compType_arg1⁰ of {
//│ 	PS _lh_compType_PS_0⁰ _lh_compType_PS_1⁰ _lh_compType_PS_2⁰ _lh_compType_PS_3⁰ _lh_compType_PS_4⁰ => _lh_compType_PS_1⁰}
//│ def compare_and_update_lh_₁(_lh_compare_and_update_arg1⁰, _lh_compare_and_update_arg2⁰) = case _lh_compare_and_update_arg1⁰ of {
//│ 	LH_P3 _lh_compare_and_update_LH_P3_0⁰ _lh_compare_and_update_LH_P3_1⁰ _lh_compare_and_update_LH_P3_2⁰ => case _lh_compare_and_update_arg2⁰ of {
//│ 		LH_P3 _lh_compare_and_update_LH_P3_0¹ _lh_compare_and_update_LH_P3_1¹ _lh_compare_and_update_LH_P3_2¹ => if polyEq⁰([LH_P2 _lh_compare_and_update_LH_P3_0⁰ _lh_compare_and_update_LH_P3_1⁰], [LH_P2 _lh_compare_and_update_LH_P3_0¹ _lh_compare_and_update_LH_P3_1¹]) then [LH_P3 _lh_compare_and_update_LH_P3_0¹ _lh_compare_and_update_LH_P3_1¹ _lh_compare_and_update_LH_P3_2⁰] else [LH_P3 _lh_compare_and_update_LH_P3_0¹ _lh_compare_and_update_LH_P3_1¹ _lh_compare_and_update_LH_P3_2¹]}}
//│ def concat_lh_₁(lss⁰) = case lss⁰ of {
//│ 	LH_C h³³ t³³ => mappend_lh_₃(h³³, concat_lh_₁(t³³))
//│ 	| LH_N  => [LH_N]}
//│ def copy_lh_₁(_lh_copy_arg1¹, _lh_copy_arg2¹) = if (_lh_copy_arg1¹ > 0) then [LH_C _lh_copy_arg2¹ copy_lh_₁((_lh_copy_arg1¹ - 1), _lh_copy_arg2¹)] else [LH_N]
//│ def copy_lh_₂(_lh_copy_arg1⁰, _lh_copy_arg2⁰) = if (_lh_copy_arg1⁰ > 0) then [LH_C _lh_copy_arg2⁰ copy_lh_₂((_lh_copy_arg1⁰ - 1), _lh_copy_arg2⁰)] else [LH_N]
//│ def copy_lz_lh_₁(_lh_copy_lz_arg1¹, _lh_copy_lz_arg2¹) = if (_lh_copy_lz_arg1¹ > 0) then lazy⁰([LH_C _lh_copy_lz_arg2¹ copy_lz_lh_₁((_lh_copy_lz_arg1¹ - 1), _lh_copy_lz_arg2¹)]) else lazy⁰([LH_N])
//│ def copy_lz_lh_₂(_lh_copy_lz_arg1⁰, _lh_copy_lz_arg2⁰) = if (_lh_copy_lz_arg1⁰ > 0) then lazy⁰([LH_C _lh_copy_lz_arg2⁰ copy_lz_lh_₂((_lh_copy_lz_arg1⁰ - 1), _lh_copy_lz_arg2⁰)]) else lazy⁰([LH_N])
//│ def critical_path_depth_lh_₁(_lh_critical_path_depth_arg1⁰) = case _lh_critical_path_depth_arg1⁰ of {
//│ 	LH_P4 _lh_critical_path_depth_LH_P4_0⁰ _lh_critical_path_depth_LH_P4_1⁰ _lh_critical_path_depth_LH_P4_2⁰ _lh_critical_path_depth_LH_P4_3⁰ => maximum_lh_₁(map_lh_₆(pathDepth_lh_₁, _lh_critical_path_depth_LH_P4_3⁰))}
//│ def do_cycle_lh_₁(_lh_do_cycle_arg1⁰, _lh_do_cycle_arg2⁰, _lh_do_cycle_arg3⁰) = case _lh_do_cycle_arg2⁰ of {
//│ 	LH_P4 _lh_do_cycle_LH_P4_0⁰ _lh_do_cycle_LH_P4_1⁰ _lh_do_cycle_LH_P4_2⁰ _lh_do_cycle_LH_P4_3⁰ => 
//│ 		let sim_then_send⁰ = (fun _lh_sim_then_send_arg1⁰ -> (fun _lh_sim_then_send_arg2⁰ -> do_sends_lh_₁(_lh_sim_then_send_arg2⁰, simulate_components_lh_₁(_lh_sim_then_send_arg2⁰, _lh_sim_then_send_arg1⁰))))
//│ 		in let states1⁴ = map_lh_₅(store_inputs_lh_₁(zip_lh_₁(_lh_do_cycle_LH_P4_1⁰, _lh_do_cycle_arg3⁰)), _lh_do_cycle_LH_P4_3⁰)
//│ 		in let states2⁰ = do_sends_lh_₂(0, states1⁴)
//│ 		in let states3⁰ = foldl_lh_₁(sim_then_send⁰, states2⁰, enumFromTo_lh_₄(1, _lh_do_cycle_arg1⁰))
//│ 		in let states4⁰ = restore_requests_lh_₁(_lh_do_cycle_LH_P4_3⁰, states3⁰)
//│ 		in [LH_P4 _lh_do_cycle_LH_P4_0⁰ _lh_do_cycle_LH_P4_1⁰ _lh_do_cycle_LH_P4_2⁰ states4⁰]}
//│ def do_send_lh_₁(_lh_do_send_arg1¹, _lh_do_send_arg2¹) = 
//│ 	let states1³ = map_lh_₈(check_depth_lh_₁(_lh_do_send_arg1¹), _lh_do_send_arg2¹)
//│ 	in let send_results¹ = map_lh_₁₀((fun _lh_funcomp_x⁴ -> snd_lh_₁(send_lh_₁(_lh_funcomp_x⁴))), (fun _lh_funcomp_x⁵ -> transpose_lh_₁(pad_packets_lh_₁(_lh_funcomp_x⁵)))(map_lh_₉(make_packet_lh_₁, states1³)))
//│ 	in let pss'¹ = transpose_lh_₂(send_results¹)
//│ 	in zipWith_lh_₃(update_io_lh_₁(_lh_do_send_arg1¹), pss'¹, _lh_do_send_arg2¹)
//│ def do_send_lh_₂(_lh_do_send_arg1⁰, _lh_do_send_arg2⁰) = 
//│ 	let states1¹ = map_lh_₁₅(check_depth_lh_₃(_lh_do_send_arg1⁰), _lh_do_send_arg2⁰)
//│ 	in let send_results⁰ = map_lh_₁₄((fun _lh_funcomp_x¹ -> snd_lh_₂(send_lh_₂(_lh_funcomp_x¹))), (fun _lh_funcomp_x² -> transpose_lh_₃(pad_packets_lh_₂(_lh_funcomp_x²)))(map_lh_₁₆(make_packet_lh_₂, states1¹)))
//│ 	in let pss'⁰ = transpose_lh_₄(send_results⁰)
//│ 	in zipWith_lh_₄(update_io_lh_₂(_lh_do_send_arg1⁰), pss'⁰, _lh_do_send_arg2⁰)
//│ def do_sends_lh_₁(_lh_do_sends_arg1¹, _lh_do_sends_arg2¹) = until_lh_₂(acknowledge_lh_₁(_lh_do_sends_arg1¹), do_send_lh_₁(_lh_do_sends_arg1¹), _lh_do_sends_arg2¹)
//│ def do_sends_lh_₂(_lh_do_sends_arg1⁰, _lh_do_sends_arg2⁰) = until_lh_₃(acknowledge_lh_₂(_lh_do_sends_arg1⁰), do_send_lh_₂(_lh_do_sends_arg1⁰), _lh_do_sends_arg2⁰)
//│ def downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_arg2⁰, _lh_downsweep_arg3⁰) = case _lh_downsweep_arg3⁰ of {
//│ 	Cell _lh_downsweep_Cell_0⁰ => [Cell _lh_downsweep_arg2⁰]
//│ 	| Node _lh_downsweep_Node_0⁰ _lh_downsweep_Node_1⁰ _lh_downsweep_Node_2⁰ => case _lh_downsweep_Node_0⁰ of {
//│ 		LH_P2 _lh_downsweep_LH_P2_0⁰ _lh_downsweep_LH_P2_1⁰ => 
//│ 			let _lh_matchIdent² = _lh_downsweep_arg1⁰(_lh_downsweep_LH_P2_0⁰, _lh_downsweep_LH_P2_1⁰, _lh_downsweep_arg2⁰)
//│ 			in case _lh_matchIdent² of {
//│ 				LH_P2 _lh_downsweep_LH_P2_0¹ _lh_downsweep_LH_P2_1¹ => 
//│ 					let _lh_matchIdent³ = [LH_P2 downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_0¹, _lh_downsweep_Node_1⁰) downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_1¹, _lh_downsweep_Node_2⁰)]
//│ 					in case _lh_matchIdent³ of {
//│ 						LH_P2 _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1² => [Node [Unit] _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1²]}}}}
//│ def drop_lh_₁(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰)}
//│ def emptyPacket_lh_₁ = [LH_P8 (0 - 1) (0 - 1) [F] [False] 0 [False] 0 1]
//│ def emptyPacket_lh_₂ = [LH_P8 (0 - 1) (0 - 1) [F] [False] 0 [False] 0 1]
//│ def emptyPacket_lh_₃ = [LH_P8 (0 - 1) (0 - 1) [F] [False] 0 [False] 0 1]
//│ def emptyPacket_lh_₄ = [LH_P8 (0 - 1) (0 - 1) [F] [False] 0 [False] 0 1]
//│ def emptyPacket_lh_₅ = [LH_P8 (0 - 1) (0 - 1) [F] [False] 0 [False] 0 1]
//│ def emptyState_lh_₁ = [PS (0 - 1) [None] (0 - 1) [LH_N] [LH_N]]
//│ def enumFromTo_lh_₁(a⁵, b³) = if (a⁵ <= b³) then [LH_C a⁵ enumFromTo_lh_₁((a⁵ + 1), b³)] else [LH_N]
//│ def enumFromTo_lh_₂(a², b²) = if (a² <= b²) then [LH_C a² enumFromTo_lh_₂((a² + 1), b²)] else [LH_N]
//│ def enumFromTo_lh_₃(a¹, b¹) = if (a¹ <= b¹) then [LH_C a¹ enumFromTo_lh_₃((a¹ + 1), b¹)] else [LH_N]
//│ def enumFromTo_lh_₄(a⁰, b⁰) = if (a⁰ <= b⁰) then [LH_C a⁰ enumFromTo_lh_₄((a⁰ + 1), b⁰)] else [LH_N]
//│ def enumFrom_lh_₁(a⁴) = lazy⁰([LH_C a⁴ enumFrom_lh_₁((a⁴ + 1))])
//│ def enumFrom_lh_₂(a³) = lazy⁰([LH_C a³ enumFrom_lh_₂((a³ + 1))])
//│ def foldl_lh_₁(f²³, i¹, ls²²) = case ls²² of {
//│ 	LH_C h²² t²² => foldl_lh_₁(f²³, f²³(i¹, h²²), t²²)
//│ 	| LH_N  => i¹}
//│ def foldr_lh_₁(f², i⁰, ls⁵) = case ls⁵ of {
//│ 	LH_C h⁵ t⁵ => f²(h⁵, foldr_lh_₁(f², i⁰, t⁵))
//│ 	| LH_N  => i⁰}
//│ def get_lh_₁(_lh_get_arg1⁰) = case _lh_get_arg1⁰ of {
//│ 	Cell _lh_get_Cell_0⁰ => [LH_C _lh_get_Cell_0⁰ [LH_N]]
//│ 	| Node _lh_get_Node_0⁰ _lh_get_Node_1⁰ _lh_get_Node_2⁰ => mappend_lh_₃(get_lh_₁(_lh_get_Node_1⁰), get_lh_₁(_lh_get_Node_2⁰))}
//│ def head_lh_₁(ls²⁵) = case ls²⁵ of {
//│ 	LH_C h²⁵ t²⁵ => h²⁵
//│ 	| LH_N  => error⁰}
//│ def head_lh_₂(ls²⁴) = case ls²⁴ of {
//│ 	LH_C h²⁴ t²⁴ => h²⁴
//│ 	| LH_N  => error⁰}
//│ def head_lh_₃(ls¹⁹) = case ls¹⁹ of {
//│ 	LH_C h¹⁹ t¹⁹ => h¹⁹
//│ 	| LH_N  => error⁰}
//│ def init_dffs_lh_₁(_lh_init_dffs_arg1⁰) = if polyEq⁰(compType_lh_₁(_lh_init_dffs_arg1⁰), [Dff]) then update_outports_lh_₁(_lh_init_dffs_arg1⁰, [F]) else _lh_init_dffs_arg1⁰
//│ def inports_lh_₁(_lh_inports_arg1⁵) = case _lh_inports_arg1⁵ of {
//│ 	PS _lh_inports_PS_0⁵ _lh_inports_PS_1⁵ _lh_inports_PS_2⁵ _lh_inports_PS_3⁵ _lh_inports_PS_4⁵ => _lh_inports_PS_3⁵}
//│ def inports_lh_₂(_lh_inports_arg1⁴) = case _lh_inports_arg1⁴ of {
//│ 	PS _lh_inports_PS_0⁴ _lh_inports_PS_1⁴ _lh_inports_PS_2⁴ _lh_inports_PS_3⁴ _lh_inports_PS_4⁴ => _lh_inports_PS_3⁴}
//│ def inports_lh_₃(_lh_inports_arg1³) = case _lh_inports_arg1³ of {
//│ 	PS _lh_inports_PS_0³ _lh_inports_PS_1³ _lh_inports_PS_2³ _lh_inports_PS_3³ _lh_inports_PS_4³ => _lh_inports_PS_3³}
//│ def inports_lh_₄(_lh_inports_arg1²) = case _lh_inports_arg1² of {
//│ 	PS _lh_inports_PS_0² _lh_inports_PS_1² _lh_inports_PS_2² _lh_inports_PS_3² _lh_inports_PS_4² => _lh_inports_PS_3²}
//│ def inports_lh_₅(_lh_inports_arg1¹) = case _lh_inports_arg1¹ of {
//│ 	PS _lh_inports_PS_0¹ _lh_inports_PS_1¹ _lh_inports_PS_2¹ _lh_inports_PS_3¹ _lh_inports_PS_4¹ => _lh_inports_PS_3¹}
//│ def inports_lh_₆(_lh_inports_arg1⁰) = case _lh_inports_arg1⁰ of {
//│ 	PS _lh_inports_PS_0⁰ _lh_inports_PS_1⁰ _lh_inports_PS_2⁰ _lh_inports_PS_3⁰ _lh_inports_PS_4⁰ => _lh_inports_PS_3⁰}
//│ def inv_lh_₁(_lh_inv_arg1⁰) = if polyEq⁰(_lh_inv_arg1⁰, [T]) then [F] else [T]
//│ def length_lh_₁(ls¹) = case ls¹ of {
//│ 	LH_C h¹ t¹ => (1 + length_lh_₁(t¹))
//│ 	| LH_N  => 0}
//│ def make_packet_lh_₁(_lh_make_packet_arg1¹) = 
//│ 	let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁷ _lh_listcomp_fun_ls_t⁷ => case _lh_listcomp_fun_ls_h⁷ of {
//│ 			LH_P6 _lh_make_packet_LH_P6_0¹ _lh_make_packet_LH_P6_1¹ _lh_make_packet_LH_P6_2¹ _lh_make_packet_LH_P6_3¹ _lh_make_packet_LH_P6_4¹ _lh_make_packet_LH_P6_5¹ => [LH_C [LH_P8 pid_lh_₅(_lh_make_packet_arg1¹) _lh_make_packet_LH_P6_0¹ _lh_make_packet_LH_P6_1¹ _lh_make_packet_LH_P6_2¹ _lh_make_packet_LH_P6_3¹ _lh_make_packet_LH_P6_4¹ _lh_make_packet_LH_P6_5¹ 1] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)]
//│ 			| _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁷)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁷(outports_lh_₇(_lh_make_packet_arg1¹))
//│ def make_packet_lh_₂(_lh_make_packet_arg1⁰) = 
//│ 	let _lh_listcomp_fun⁴ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => case _lh_listcomp_fun_ls_h⁴ of {
//│ 			LH_P6 _lh_make_packet_LH_P6_0⁰ _lh_make_packet_LH_P6_1⁰ _lh_make_packet_LH_P6_2⁰ _lh_make_packet_LH_P6_3⁰ _lh_make_packet_LH_P6_4⁰ _lh_make_packet_LH_P6_5⁰ => [LH_C [LH_P8 pid_lh_₅(_lh_make_packet_arg1⁰) _lh_make_packet_LH_P6_0⁰ _lh_make_packet_LH_P6_1⁰ _lh_make_packet_LH_P6_2⁰ _lh_make_packet_LH_P6_3⁰ _lh_make_packet_LH_P6_4⁰ _lh_make_packet_LH_P6_5⁰ 1] _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)]
//│ 			| _  => _lh_listcomp_fun⁴(_lh_listcomp_fun_ls_t⁴)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁴(outports_lh_₈(_lh_make_packet_arg1⁰))
//│ def map_lh_₁(f²⁸, ls²⁹) = case ls²⁹ of {
//│ 	LH_C h³² t³² => [LH_C f²⁸(h³²) map_lh_₁(f²⁸, t³²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₀(f¹⁴, ls¹⁵) = case ls¹⁵ of {
//│ 	LH_C h¹⁵ t¹⁵ => [LH_C f¹⁴(h¹⁵) map_lh_₁₀(f¹⁴, t¹⁵)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₁(f¹³, ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h¹⁴ t¹⁴ => [LH_C f¹³(h¹⁴) map_lh_₁₁(f¹³, t¹⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₂(f¹², ls¹³) = case ls¹³ of {
//│ 	LH_C h¹³ t¹³ => [LH_C f¹²(h¹³) map_lh_₁₂(f¹², t¹³)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₃(f¹¹, ls¹²) = case ls¹² of {
//│ 	LH_C h¹² t¹² => [LH_C f¹¹(h¹²) map_lh_₁₃(f¹¹, t¹²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₄(f⁹, ls¹¹) = case ls¹¹ of {
//│ 	LH_C h¹¹ t¹¹ => [LH_C f⁹(h¹¹) map_lh_₁₄(f⁹, t¹¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₅(f⁸, ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h¹⁰ t¹⁰ => [LH_C f⁸(h¹⁰) map_lh_₁₅(f⁸, t¹⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₆(f⁷, ls⁹) = case ls⁹ of {
//│ 	LH_C h⁹ t⁹ => [LH_C f⁷(h⁹) map_lh_₁₆(f⁷, t⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₇(f⁶, ls⁸) = case ls⁸ of {
//│ 	LH_C h⁸ t⁸ => [LH_C f⁶(h⁸) map_lh_₁₇(f⁶, t⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₈(f⁵, ls⁷) = case ls⁷ of {
//│ 	LH_C h⁷ t⁷ => [LH_C f⁵(h⁷) map_lh_₁₈(f⁵, t⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₉(f⁴, ls⁶) = case ls⁶ of {
//│ 	LH_C h⁶ t⁶ => [LH_C f⁴(h⁶) map_lh_₁₉(f⁴, t⁶)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂(f²⁶, ls²⁸) = case ls²⁸ of {
//│ 	LH_C h²⁹ t²⁹ => [LH_C f²⁶(h²⁹) map_lh_₂(f²⁶, t²⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂₀(f¹, ls⁴) = case ls⁴ of {
//│ 	LH_C h⁴ t⁴ => [LH_C f¹(h⁴) map_lh_₂₀(f¹, t⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂₁(f⁰, ls²) = case ls² of {
//│ 	LH_C h² t² => [LH_C f⁰(h²) map_lh_₂₁(f⁰, t²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f²⁵, ls²⁷) = case ls²⁷ of {
//│ 	LH_C h²⁷ t²⁷ => [LH_C f²⁵(h²⁷) map_lh_₃(f²⁵, t²⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f²⁴, ls²³) = case ls²³ of {
//│ 	LH_C h²³ t²³ => [LH_C f²⁴(h²³) map_lh_₄(f²⁴, t²³)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f²², ls²¹) = case ls²¹ of {
//│ 	LH_C h²¹ t²¹ => [LH_C f²²(h²¹) map_lh_₅(f²², t²¹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f²¹, ls²⁰) = case ls²⁰ of {
//│ 	LH_C h²⁰ t²⁰ => [LH_C f²¹(h²⁰) map_lh_₆(f²¹, t²⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₇(f¹⁸, ls¹⁸) = case ls¹⁸ of {
//│ 	LH_C h¹⁸ t¹⁸ => [LH_C f¹⁸(h¹⁸) map_lh_₇(f¹⁸, t¹⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₈(f¹⁷, ls¹⁷) = case ls¹⁷ of {
//│ 	LH_C h¹⁷ t¹⁷ => [LH_C f¹⁷(h¹⁷) map_lh_₈(f¹⁷, t¹⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₉(f¹⁵, ls¹⁶) = case ls¹⁶ of {
//│ 	LH_C h¹⁶ t¹⁶ => [LH_C f¹⁵(h¹⁶) map_lh_₉(f¹⁵, t¹⁶)]
//│ 	| LH_N  => [LH_N]}
//│ def mappend_lh_₁(xs¹¹, ys⁹) = case xs¹¹ of {
//│ 	LH_C h³¹ t³¹ => [LH_C h³¹ mappend_lh_₁(t³¹, ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_lh_₂(xs⁹, ys⁷) = case xs⁹ of {
//│ 	LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₂(t³⁰, ys⁷)]
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₃(xs⁸, ys⁶) = case xs⁸ of {
//│ 	LH_C h²⁸ t²⁸ => [LH_C h²⁸ mappend_lh_₃(t²⁸, ys⁶)]
//│ 	| LH_N  => ys⁶}
//│ def maximum_lh_₁(_lh_maximum_arg1¹) = case _lh_maximum_arg1¹ of {
//│ 	LH_C _lh_maximum_LH_C_0¹ _lh_maximum_LH_C_1¹ => 
//│ 		let go¹ = (fun _lh_go_arg1¹ -> (fun _lh_go_arg2¹ -> case _lh_go_arg2¹ of {
//│ 			LH_N  => _lh_go_arg1¹
//│ 			| LH_C _lh_go_LH_C_0¹ _lh_go_LH_C_1¹ => if (_lh_go_arg1¹ > _lh_go_LH_C_0¹) then go¹(_lh_go_arg1¹, _lh_go_LH_C_1¹) else go¹(_lh_go_LH_C_0¹, _lh_go_LH_C_1¹)}))
//│ 		in go¹(_lh_maximum_LH_C_0¹, _lh_maximum_LH_C_1¹)
//│ 	| LH_N  => error⁰}
//│ def maximum_lh_₂(_lh_maximum_arg1⁰) = case _lh_maximum_arg1⁰ of {
//│ 	LH_C _lh_maximum_LH_C_0⁰ _lh_maximum_LH_C_1⁰ => 
//│ 		let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {
//│ 			LH_N  => _lh_go_arg1⁰
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => if (_lh_go_arg1⁰ > _lh_go_LH_C_0⁰) then go⁰(_lh_go_arg1⁰, _lh_go_LH_C_1⁰) else go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰)}))
//│ 		in go⁰(_lh_maximum_LH_C_0⁰, _lh_maximum_LH_C_1⁰)
//│ 	| LH_N  => error⁰}
//│ def nearest_power_of_two_lh_₁(_lh_nearest_power_of_two_arg1⁰) = until_lh_₁((fun a⁶ -> (a⁶ >= _lh_nearest_power_of_two_arg1⁰)), (fun a⁷ -> (a⁷ * 2)), 1)
//│ def or2_lh_₁(_lh_or2_arg1⁰, _lh_or2_arg2⁰) = if (polyEq⁰(_lh_or2_arg1⁰, [T]) || polyEq⁰(_lh_or2_arg2⁰, [T])) then [T] else [F]
//│ def or_lh_₁(_lh_or_arg1³) = case _lh_or_arg1³ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_or_LH_C_0³ _lh_or_LH_C_1³ => if _lh_or_LH_C_0³ then [True] else or_lh_₁(_lh_or_LH_C_1³)}
//│ def or_lh_₂(_lh_or_arg1²) = case _lh_or_arg1² of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_or_LH_C_0² _lh_or_LH_C_1² => if _lh_or_LH_C_0² then [True] else or_lh_₂(_lh_or_LH_C_1²)}
//│ def or_lh_₃(_lh_or_arg1¹) = case _lh_or_arg1¹ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_or_LH_C_0¹ _lh_or_LH_C_1¹ => if _lh_or_LH_C_0¹ then [True] else or_lh_₃(_lh_or_LH_C_1¹)}
//│ def or_lh_₄(_lh_or_arg1⁰) = case _lh_or_arg1⁰ of {
//│ 	LH_N  => [False]
//│ 	| LH_C _lh_or_LH_C_0⁰ _lh_or_LH_C_1⁰ => if _lh_or_LH_C_0⁰ then [True] else or_lh_₄(_lh_or_LH_C_1⁰)}
//│ def outports_lh_₁(_lh_outports_arg1⁷) = case _lh_outports_arg1⁷ of {
//│ 	PS _lh_outports_PS_0⁷ _lh_outports_PS_1⁷ _lh_outports_PS_2⁷ _lh_outports_PS_3⁷ _lh_outports_PS_4⁷ => _lh_outports_PS_4⁷}
//│ def outports_lh_₂(_lh_outports_arg1⁶) = case _lh_outports_arg1⁶ of {
//│ 	PS _lh_outports_PS_0⁶ _lh_outports_PS_1⁶ _lh_outports_PS_2⁶ _lh_outports_PS_3⁶ _lh_outports_PS_4⁶ => _lh_outports_PS_4⁶}
//│ def outports_lh_₃(_lh_outports_arg1⁵) = case _lh_outports_arg1⁵ of {
//│ 	PS _lh_outports_PS_0⁵ _lh_outports_PS_1⁵ _lh_outports_PS_2⁵ _lh_outports_PS_3⁵ _lh_outports_PS_4⁵ => _lh_outports_PS_4⁵}
//│ def outports_lh_₄(_lh_outports_arg1⁴) = case _lh_outports_arg1⁴ of {
//│ 	PS _lh_outports_PS_0⁴ _lh_outports_PS_1⁴ _lh_outports_PS_2⁴ _lh_outports_PS_3⁴ _lh_outports_PS_4⁴ => _lh_outports_PS_4⁴}
//│ def outports_lh_₅(_lh_outports_arg1³) = case _lh_outports_arg1³ of {
//│ 	PS _lh_outports_PS_0³ _lh_outports_PS_1³ _lh_outports_PS_2³ _lh_outports_PS_3³ _lh_outports_PS_4³ => _lh_outports_PS_4³}
//│ def outports_lh_₆(_lh_outports_arg1²) = case _lh_outports_arg1² of {
//│ 	PS _lh_outports_PS_0² _lh_outports_PS_1² _lh_outports_PS_2² _lh_outports_PS_3² _lh_outports_PS_4² => _lh_outports_PS_4²}
//│ def outports_lh_₇(_lh_outports_arg1¹) = case _lh_outports_arg1¹ of {
//│ 	PS _lh_outports_PS_0¹ _lh_outports_PS_1¹ _lh_outports_PS_2¹ _lh_outports_PS_3¹ _lh_outports_PS_4¹ => _lh_outports_PS_4¹}
//│ def outports_lh_₈(_lh_outports_arg1⁰) = case _lh_outports_arg1⁰ of {
//│ 	PS _lh_outports_PS_0⁰ _lh_outports_PS_1⁰ _lh_outports_PS_2⁰ _lh_outports_PS_3⁰ _lh_outports_PS_4⁰ => _lh_outports_PS_4⁰}
//│ def pad_circuit_lh_₁(_lh_pad_circuit_arg1⁰) = case _lh_pad_circuit_arg1⁰ of {
//│ 	LH_P4 _lh_pad_circuit_LH_P4_0⁰ _lh_pad_circuit_LH_P4_1⁰ _lh_pad_circuit_LH_P4_2⁰ _lh_pad_circuit_LH_P4_3⁰ => 
//│ 		let p2⁰ = nearest_power_of_two_lh_₁(_lh_pad_circuit_LH_P4_0⁰)
//│ 		in [LH_P4 p2⁰ _lh_pad_circuit_LH_P4_1⁰ _lh_pad_circuit_LH_P4_2⁰ take_lz_lh_₁(p2⁰, append__lz_lh_₁(_lh_pad_circuit_LH_P4_3⁰, copy_lz_lh_₁(p2⁰, emptyState_lh_₁)))]}
//│ def pad_packets_lh_₁(_lh_pad_packets_arg1¹) = 
//│ 	let pad¹ = (fun xs³ -> 
//│ 		let max_ps¹ = maximum_lh_₂(map_lh_₂₁(length_lh_₁, _lh_pad_packets_arg1¹))
//│ 		in take_lz_lh_₂(max_ps¹, append__lz_lh_₂(xs³, copy_lz_lh_₂(max_ps¹, emptyPacket_lh_₁))))
//│ 	in map_lh_₂₀(pad¹, _lh_pad_packets_arg1¹)
//│ def pad_packets_lh_₂(_lh_pad_packets_arg1⁰) = 
//│ 	let pad⁰ = (fun xs¹ -> 
//│ 		let max_ps⁰ = maximum_lh_₂(map_lh_₂₁(length_lh_₁, _lh_pad_packets_arg1⁰))
//│ 		in take_lz_lh_₂(max_ps⁰, append__lz_lh_₂(xs¹, copy_lz_lh_₂(max_ps⁰, emptyPacket_lh_₅))))
//│ 	in map_lh_₂₁(pad⁰, _lh_pad_packets_arg1⁰)
//│ def pathDepth_lh_₁(_lh_pathDepth_arg1⁸) = case _lh_pathDepth_arg1⁸ of {
//│ 	PS _lh_pathDepth_PS_0⁸ _lh_pathDepth_PS_1⁸ _lh_pathDepth_PS_2⁸ _lh_pathDepth_PS_3⁸ _lh_pathDepth_PS_4⁸ => _lh_pathDepth_PS_2⁸}
//│ def pathDepth_lh_₂(_lh_pathDepth_arg1⁷) = case _lh_pathDepth_arg1⁷ of {
//│ 	PS _lh_pathDepth_PS_0⁷ _lh_pathDepth_PS_1⁷ _lh_pathDepth_PS_2⁷ _lh_pathDepth_PS_3⁷ _lh_pathDepth_PS_4⁷ => _lh_pathDepth_PS_2⁷}
//│ def pathDepth_lh_₃(_lh_pathDepth_arg1⁶) = case _lh_pathDepth_arg1⁶ of {
//│ 	PS _lh_pathDepth_PS_0⁶ _lh_pathDepth_PS_1⁶ _lh_pathDepth_PS_2⁶ _lh_pathDepth_PS_3⁶ _lh_pathDepth_PS_4⁶ => _lh_pathDepth_PS_2⁶}
//│ def pathDepth_lh_₄(_lh_pathDepth_arg1⁵) = case _lh_pathDepth_arg1⁵ of {
//│ 	PS _lh_pathDepth_PS_0⁵ _lh_pathDepth_PS_1⁵ _lh_pathDepth_PS_2⁵ _lh_pathDepth_PS_3⁵ _lh_pathDepth_PS_4⁵ => _lh_pathDepth_PS_2⁵}
//│ def pathDepth_lh_₅(_lh_pathDepth_arg1⁴) = case _lh_pathDepth_arg1⁴ of {
//│ 	PS _lh_pathDepth_PS_0⁴ _lh_pathDepth_PS_1⁴ _lh_pathDepth_PS_2⁴ _lh_pathDepth_PS_3⁴ _lh_pathDepth_PS_4⁴ => _lh_pathDepth_PS_2⁴}
//│ def pathDepth_lh_₆(_lh_pathDepth_arg1³) = case _lh_pathDepth_arg1³ of {
//│ 	PS _lh_pathDepth_PS_0³ _lh_pathDepth_PS_1³ _lh_pathDepth_PS_2³ _lh_pathDepth_PS_3³ _lh_pathDepth_PS_4³ => _lh_pathDepth_PS_2³}
//│ def pathDepth_lh_₇(_lh_pathDepth_arg1²) = case _lh_pathDepth_arg1² of {
//│ 	PS _lh_pathDepth_PS_0² _lh_pathDepth_PS_1² _lh_pathDepth_PS_2² _lh_pathDepth_PS_3² _lh_pathDepth_PS_4² => _lh_pathDepth_PS_2²}
//│ def pathDepth_lh_₈(_lh_pathDepth_arg1¹) = case _lh_pathDepth_arg1¹ of {
//│ 	PS _lh_pathDepth_PS_0¹ _lh_pathDepth_PS_1¹ _lh_pathDepth_PS_2¹ _lh_pathDepth_PS_3¹ _lh_pathDepth_PS_4¹ => _lh_pathDepth_PS_2¹}
//│ def pathDepth_lh_₉(_lh_pathDepth_arg1⁰) = case _lh_pathDepth_arg1⁰ of {
//│ 	PS _lh_pathDepth_PS_0⁰ _lh_pathDepth_PS_1⁰ _lh_pathDepth_PS_2⁰ _lh_pathDepth_PS_3⁰ _lh_pathDepth_PS_4⁰ => _lh_pathDepth_PS_2⁰}
//│ def pid_lh_₁(_lh_pid_arg1⁴) = case _lh_pid_arg1⁴ of {
//│ 	PS _lh_pid_PS_0⁴ _lh_pid_PS_1⁴ _lh_pid_PS_2⁴ _lh_pid_PS_3⁴ _lh_pid_PS_4⁴ => _lh_pid_PS_0⁴}
//│ def pid_lh_₂(_lh_pid_arg1³) = case _lh_pid_arg1³ of {
//│ 	PS _lh_pid_PS_0³ _lh_pid_PS_1³ _lh_pid_PS_2³ _lh_pid_PS_3³ _lh_pid_PS_4³ => _lh_pid_PS_0³}
//│ def pid_lh_₃(_lh_pid_arg1²) = case _lh_pid_arg1² of {
//│ 	PS _lh_pid_PS_0² _lh_pid_PS_1² _lh_pid_PS_2² _lh_pid_PS_3² _lh_pid_PS_4² => _lh_pid_PS_0²}
//│ def pid_lh_₄(_lh_pid_arg1¹) = case _lh_pid_arg1¹ of {
//│ 	PS _lh_pid_PS_0¹ _lh_pid_PS_1¹ _lh_pid_PS_2¹ _lh_pid_PS_3¹ _lh_pid_PS_4¹ => _lh_pid_PS_0¹}
//│ def pid_lh_₅(_lh_pid_arg1⁰) = case _lh_pid_arg1⁰ of {
//│ 	PS _lh_pid_PS_0⁰ _lh_pid_PS_1⁰ _lh_pid_PS_2⁰ _lh_pid_PS_3⁰ _lh_pid_PS_4⁰ => _lh_pid_PS_0⁰}
//│ def put_lh_₁(_lh_put_arg1⁰) = case _lh_put_arg1⁰ of {
//│ 	LH_C _lh_put_LH_C_0⁰ _lh_put_LH_C_1⁰ => case _lh_put_LH_C_1⁰ of {
//│ 		LH_N  => [Cell _lh_put_LH_C_0⁰]
//│ 		| _  => 
//│ 			let _lh_matchIdent⁵ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_put_arg1⁰), 2), _lh_put_arg1⁰)
//│ 			in case _lh_matchIdent⁵ of {
//│ 				LH_P2 _lh_put_LH_P2_0⁰ _lh_put_LH_P2_1⁰ => [Node [Unit] put_lh_₁(_lh_put_LH_P2_0⁰) put_lh_₁(_lh_put_LH_P2_1⁰)]}}
//│ 	| _  => 
//│ 		let _lh_matchIdent⁶ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_put_arg1⁰), 2), _lh_put_arg1⁰)
//│ 		in case _lh_matchIdent⁶ of {
//│ 			LH_P2 _lh_put_LH_P2_0¹ _lh_put_LH_P2_1¹ => [Node [Unit] put_lh_₁(_lh_put_LH_P2_0¹) put_lh_₁(_lh_put_LH_P2_1¹)]}}
//│ def reg_lh_₁(_lh_reg_arg1⁰, _lh_reg_arg2⁰) = [LH_C [PS _lh_reg_arg2⁰ [Inp] 0 [LH_N] [LH_C [LH_P6 0 [F] [False] 0 [True] 4] [LH_N]]] [LH_C [PS (_lh_reg_arg2⁰ + 1) [Dff] 1 [LH_C [LH_P3 (_lh_reg_arg2⁰ + 5) 0 [F]] [LH_N]] [LH_C [LH_P6 0 [F] [False] 0 [True] 5] [LH_N]]] [LH_C [PS (_lh_reg_arg2⁰ + 2) [Inv] 1 [LH_C [LH_P3 _lh_reg_arg1⁰ 0 [F]] [LH_N]] [LH_C [LH_P6 0 [F] [False] 0 [True] 1] [LH_N]]] [LH_C [PS (_lh_reg_arg2⁰ + 3) [And2] 2 [LH_C [LH_P3 (_lh_reg_arg2⁰ + 1) 0 [F]] [LH_C [LH_P3 (_lh_reg_arg2⁰ + 2) 0 [F]] [LH_N]]] [LH_C [LH_P6 0 [F] [False] 0 [True] 2] [LH_N]]] [LH_C [PS (_lh_reg_arg2⁰ + 4) [And2] 1 [LH_C [LH_P3 _lh_reg_arg1⁰ 0 [F]] [LH_C [LH_P3 _lh_reg_arg2⁰ 0 [F]] [LH_N]]] [LH_C [LH_P6 0 [F] [False] 0 [True] 1] [LH_N]]] [LH_C [PS (_lh_reg_arg2⁰ + 5) [Or2] 3 [LH_C [LH_P3 (_lh_reg_arg2⁰ + 3) 0 [F]] [LH_C [LH_P3 (_lh_reg_arg2⁰ + 4) 0 [F]] [LH_N]]] [LH_C [LH_P6 0 [F] [True] 4 [False] 0] [LH_N]]] [LH_C [PS (_lh_reg_arg2⁰ + 6) [Outp] 4 [LH_C [LH_P3 (_lh_reg_arg2⁰ + 1) 0 [F]] [LH_N]] [LH_N]] [LH_N]]]]]]]]
//│ def regs_lh_₁(_lh_regs_arg1⁰) = 
//│ 	let ilabel⁰ = (fun _lh_ilabel_arg1⁰ -> (fun _lh_ilabel_arg2⁰ -> [LH_P2 mappend_lh_₂([LH_C 'x' [LH_N]], string_of_int⁰(_lh_ilabel_arg1⁰)) _lh_ilabel_arg2⁰]))
//│ 	and olabel⁰ = (fun _lh_olabel_arg1⁰ -> (fun _lh_olabel_arg2⁰ -> [LH_P2 mappend_lh_₁([LH_C 'y' [LH_N]], string_of_int⁰(_lh_olabel_arg1⁰)) _lh_olabel_arg2⁰])) 
//│ 	in let is⁰ = [LH_C [LH_P2 [LH_C 's' [LH_C 't' [LH_C 'o' [LH_N]]]] 0] zipWith_lz_nl_lh_₁(ilabel⁰, enumFrom_lh_₁(0), 
//│ 		let _lh_listcomp_fun¹⁴ = (fun _lh_listcomp_fun_para¹⁴ -> case _lh_listcomp_fun_para¹⁴ of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹⁴ _lh_listcomp_fun_ls_t¹⁴ => [LH_C ((7 * _lh_listcomp_fun_ls_h¹⁴) + 1) _lh_listcomp_fun¹⁴(_lh_listcomp_fun_ls_t¹⁴)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun¹⁴(enumFromTo_lh_₂(0, (_lh_regs_arg1⁰ - 1))))]
//│ 	in let os⁰ = zipWith_lz_nl_lh_₂(olabel⁰, enumFrom_lh_₂(0), 
//│ 		let _lh_listcomp_fun¹⁵ = (fun _lh_listcomp_fun_para¹⁵ -> case _lh_listcomp_fun_para¹⁵ of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹⁵ _lh_listcomp_fun_ls_t¹⁵ => [LH_C ((7 * _lh_listcomp_fun_ls_h¹⁵) + 7) _lh_listcomp_fun¹⁵(_lh_listcomp_fun_ls_t¹⁵)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun¹⁵(enumFromTo_lh_₃(0, (_lh_regs_arg1⁰ - 1))))
//│ 	in let sto⁰ = [PS 0 [Inp] 0 [LH_N] [LH_C [LH_P6 0 [F] [False] 0 [True] ((8 * (_lh_regs_arg1⁰ - 1)) + 5)] [LH_N]]]
//│ 	in let states⁰ = [LH_C sto⁰ concat_lh_₁(map_lh_₁(reg_lh_₁(0), 
//│ 		let _lh_listcomp_fun¹⁶ = (fun _lh_listcomp_fun_para¹⁶ -> case _lh_listcomp_fun_para¹⁶ of {
//│ 			LH_C _lh_listcomp_fun_ls_h¹⁶ _lh_listcomp_fun_ls_t¹⁶ => [LH_C ((7 * _lh_listcomp_fun_ls_h¹⁶) + 1) _lh_listcomp_fun¹⁶(_lh_listcomp_fun_ls_t¹⁶)]
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun¹⁶(enumFromTo_lh_₁(0, (_lh_regs_arg1⁰ - 1)))))]
//│ 	in [LH_P4 (1 + (7 * _lh_regs_arg1⁰)) is⁰ os⁰ states⁰]
//│ def restore_requests_lh_₁(_lh_restore_requests_arg1⁰, _lh_restore_requests_arg2⁰) = 
//│ 	let restore⁰ = (fun _lh_restore_arg1⁰ -> (fun _lh_restore_arg2⁰ -> updateOutports_lh_₂(_lh_restore_arg2⁰, zipWith_lh_₂(restore_outport⁰, outports_lh_₃(_lh_restore_arg1⁰), outports_lh_₂(_lh_restore_arg2⁰)))))
//│ 	and restore_outport⁰ = (fun _lh_restore_outport_arg1⁰ -> (fun _lh_restore_outport_arg2⁰ -> case _lh_restore_outport_arg1⁰ of {
//│ 			LH_P6 _lh_restore_outport_LH_P6_0⁰ _lh_restore_outport_LH_P6_1⁰ _lh_restore_outport_LH_P6_2⁰ _lh_restore_outport_LH_P6_3⁰ _lh_restore_outport_LH_P6_4⁰ _lh_restore_outport_LH_P6_5⁰ => case _lh_restore_outport_arg2⁰ of {
//│ 				LH_P6 _lh_restore_outport_LH_P6_0¹ _lh_restore_outport_LH_P6_1¹ _lh_restore_outport_LH_P6_2¹ _lh_restore_outport_LH_P6_3¹ _lh_restore_outport_LH_P6_4¹ _lh_restore_outport_LH_P6_5¹ => [LH_P6 _lh_restore_outport_LH_P6_0⁰ _lh_restore_outport_LH_P6_1¹ _lh_restore_outport_LH_P6_2⁰ _lh_restore_outport_LH_P6_3⁰ _lh_restore_outport_LH_P6_4⁰ _lh_restore_outport_LH_P6_5⁰]}})) 
//│ 	in zipWith_lh_₁(restore⁰, _lh_restore_requests_arg1⁰, _lh_restore_requests_arg2⁰)
//│ def run_lh_₁(_lh_run_arg1⁰, _lh_run_arg2⁰) = 
//│ 	let example⁰ = pad_circuit_lh_₁(regs_lh_₁(_lh_run_arg1⁰))
//│ 	in let inputs⁰ = copy_lh_₂((_lh_run_arg1⁰ + 1), [T])
//│ 	in let cycles⁰ = copy_lh_₁(_lh_run_arg2⁰, inputs⁰)
//│ 	in circuit_simulate_lh_₁(cycles⁰, example⁰)
//│ def scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg2⁰, _lh_scanl_arg3⁰) = [LH_C _lh_scanl_arg2⁰ 
//│ 	let _lh_matchIdent¹⁹ = _lh_scanl_arg3⁰
//│ 	in case _lh_matchIdent¹⁹ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰)}]
//│ def scanlr_lh_₁(_lh_scanlr_arg1¹, _lh_scanlr_arg2¹, _lh_scanlr_arg3¹, _lh_scanlr_arg4¹, _lh_scanlr_arg5¹) = 
//│ 	let up¹ = (fun _lh_up_arg1¹ -> (fun _lh_up_arg2¹ -> (fun _lh_up_arg3¹ -> (fun _lh_up_arg4¹ -> case _lh_up_arg3¹ of {
//│ 			LH_P2 _lh_up_LH_P2_0² _lh_up_LH_P2_1² => case _lh_up_arg4¹ of {
//│ 				LH_P2 _lh_up_LH_P2_0³ _lh_up_LH_P2_1³ => [LH_P2 _lh_up_arg1¹(_lh_up_LH_P2_0², _lh_up_LH_P2_0³) _lh_up_arg2¹(_lh_up_LH_P2_1², _lh_up_LH_P2_1³)]}}))))
//│ 	and down¹ = (fun _lh_down_arg1¹ -> (fun _lh_down_arg2¹ -> (fun _lh_down_arg3¹ -> (fun _lh_down_arg4¹ -> (fun _lh_down_arg5¹ -> case _lh_down_arg3¹ of {
//│ 			LH_P2 _lh_down_LH_P2_0³ _lh_down_LH_P2_1³ => case _lh_down_arg4¹ of {
//│ 				LH_P2 _lh_down_LH_P2_0⁴ _lh_down_LH_P2_1⁴ => case _lh_down_arg5¹ of {
//│ 					LH_P2 _lh_down_LH_P2_0⁵ _lh_down_LH_P2_1⁵ => [LH_P2 [LH_P2 _lh_down_LH_P2_0⁵ _lh_down_arg2¹(_lh_down_LH_P2_1⁴, _lh_down_LH_P2_1⁵)] [LH_P2 _lh_down_arg1¹(_lh_down_LH_P2_0⁵, _lh_down_LH_P2_0³) _lh_down_LH_P2_1⁵]]}}}))))) 
//│ 	in let xs'¹ = map_lh_₂₁((fun x¹ -> [LH_P2 x¹ x¹]), _lh_scanlr_arg5¹)
//│ 	in let _lh_matchIdent¹⁰ = sweep_ud_lh_₁(up¹(_lh_scanlr_arg1¹, _lh_scanlr_arg2¹), down¹(_lh_scanlr_arg1¹, _lh_scanlr_arg2¹), [LH_P2 _lh_scanlr_arg3¹ _lh_scanlr_arg4¹], put_lh_₁(xs'¹))
//│ 	in case _lh_matchIdent¹⁰ of {
//│ 		LH_P2 _lh_scanlr_LH_P2_0² _lh_scanlr_LH_P2_1² => case _lh_scanlr_LH_P2_0² of {
//│ 			LH_P2 _lh_scanlr_LH_P2_0³ _lh_scanlr_LH_P2_1³ => 
//│ 				let ans¹ = [LH_P2 _lh_scanlr_arg2¹(_lh_scanlr_LH_P2_1³, _lh_scanlr_arg4¹) _lh_scanlr_arg1¹(_lh_scanlr_arg3¹, _lh_scanlr_LH_P2_0³)]
//│ 				in [LH_P2 ans¹ get_lh_₁(_lh_scanlr_LH_P2_1²)]}}
//│ def scanlr_lh_₂(_lh_scanlr_arg1⁰, _lh_scanlr_arg2⁰, _lh_scanlr_arg3⁰, _lh_scanlr_arg4⁰, _lh_scanlr_arg5⁰) = 
//│ 	let down⁰ = (fun _lh_down_arg1⁰ -> (fun _lh_down_arg2⁰ -> (fun _lh_down_arg3⁰ -> (fun _lh_down_arg4⁰ -> (fun _lh_down_arg5⁰ -> case _lh_down_arg3⁰ of {
//│ 			LH_P2 _lh_down_LH_P2_0⁰ _lh_down_LH_P2_1⁰ => case _lh_down_arg4⁰ of {
//│ 				LH_P2 _lh_down_LH_P2_0¹ _lh_down_LH_P2_1¹ => case _lh_down_arg5⁰ of {
//│ 					LH_P2 _lh_down_LH_P2_0² _lh_down_LH_P2_1² => [LH_P2 [LH_P2 _lh_down_LH_P2_0² _lh_down_arg2⁰(_lh_down_LH_P2_1¹, _lh_down_LH_P2_1²)] [LH_P2 _lh_down_arg1⁰(_lh_down_LH_P2_0², _lh_down_LH_P2_0⁰) _lh_down_LH_P2_1²]]}}})))))
//│ 	and up⁰ = (fun _lh_up_arg1⁰ -> (fun _lh_up_arg2⁰ -> (fun _lh_up_arg3⁰ -> (fun _lh_up_arg4⁰ -> case _lh_up_arg3⁰ of {
//│ 			LH_P2 _lh_up_LH_P2_0⁰ _lh_up_LH_P2_1⁰ => case _lh_up_arg4⁰ of {
//│ 				LH_P2 _lh_up_LH_P2_0¹ _lh_up_LH_P2_1¹ => [LH_P2 _lh_up_arg1⁰(_lh_up_LH_P2_0⁰, _lh_up_LH_P2_0¹) _lh_up_arg2⁰(_lh_up_LH_P2_1⁰, _lh_up_LH_P2_1¹)]}})))) 
//│ 	in let xs'⁰ = map_lh_₂₁((fun x⁰ -> [LH_P2 x⁰ x⁰]), _lh_scanlr_arg5⁰)
//│ 	in let _lh_matchIdent⁷ = sweep_ud_lh_₁(up⁰(_lh_scanlr_arg1⁰, _lh_scanlr_arg2⁰), down⁰(_lh_scanlr_arg1⁰, _lh_scanlr_arg2⁰), [LH_P2 _lh_scanlr_arg3⁰ _lh_scanlr_arg4⁰], put_lh_₁(xs'⁰))
//│ 	in case _lh_matchIdent⁷ of {
//│ 		LH_P2 _lh_scanlr_LH_P2_0⁰ _lh_scanlr_LH_P2_1⁰ => case _lh_scanlr_LH_P2_0⁰ of {
//│ 			LH_P2 _lh_scanlr_LH_P2_0¹ _lh_scanlr_LH_P2_1¹ => 
//│ 				let ans⁰ = [LH_P2 _lh_scanlr_arg2⁰(_lh_scanlr_LH_P2_1¹, _lh_scanlr_arg4⁰) _lh_scanlr_arg1⁰(_lh_scanlr_arg3⁰, _lh_scanlr_LH_P2_0¹)]
//│ 				in [LH_P2 ans⁰ get_lh_₁(_lh_scanlr_LH_P2_1⁰)]}}
//│ def send_left_lh_₁(_lh_send_left_arg1¹, _lh_send_left_arg2¹) = case _lh_send_left_arg1¹ of {
//│ 	LH_P8 _lh_send_left_LH_P8_0² _lh_send_left_LH_P8_1² _lh_send_left_LH_P8_2² _lh_send_left_LH_P8_3² _lh_send_left_LH_P8_4² _lh_send_left_LH_P8_5² _lh_send_left_LH_P8_6² _lh_send_left_LH_P8_7² => case _lh_send_left_arg2¹ of {
//│ 		LH_P8 _lh_send_left_LH_P8_0³ _lh_send_left_LH_P8_1³ _lh_send_left_LH_P8_2³ _lh_send_left_LH_P8_3³ _lh_send_left_LH_P8_4³ _lh_send_left_LH_P8_5³ _lh_send_left_LH_P8_6³ _lh_send_left_LH_P8_7³ => if (_lh_send_left_LH_P8_3³ && (_lh_send_left_LH_P8_4³ > _lh_send_left_LH_P8_7²)) then [LH_P8 _lh_send_left_LH_P8_0³ _lh_send_left_LH_P8_1³ _lh_send_left_LH_P8_2³ _lh_send_left_LH_P8_3³ (_lh_send_left_LH_P8_4³ - _lh_send_left_LH_P8_7²) _lh_send_left_LH_P8_5³ _lh_send_left_LH_P8_6³ (_lh_send_left_LH_P8_7² + _lh_send_left_LH_P8_7³)] else [LH_P8 _lh_send_left_LH_P8_0² _lh_send_left_LH_P8_1² _lh_send_left_LH_P8_2² _lh_send_left_LH_P8_3² _lh_send_left_LH_P8_4² _lh_send_left_LH_P8_5² _lh_send_left_LH_P8_6² (_lh_send_left_LH_P8_7² + _lh_send_left_LH_P8_7³)]}}
//│ def send_left_lh_₂(_lh_send_left_arg1⁰, _lh_send_left_arg2⁰) = case _lh_send_left_arg1⁰ of {
//│ 	LH_P8 _lh_send_left_LH_P8_0⁰ _lh_send_left_LH_P8_1⁰ _lh_send_left_LH_P8_2⁰ _lh_send_left_LH_P8_3⁰ _lh_send_left_LH_P8_4⁰ _lh_send_left_LH_P8_5⁰ _lh_send_left_LH_P8_6⁰ _lh_send_left_LH_P8_7⁰ => case _lh_send_left_arg2⁰ of {
//│ 		LH_P8 _lh_send_left_LH_P8_0¹ _lh_send_left_LH_P8_1¹ _lh_send_left_LH_P8_2¹ _lh_send_left_LH_P8_3¹ _lh_send_left_LH_P8_4¹ _lh_send_left_LH_P8_5¹ _lh_send_left_LH_P8_6¹ _lh_send_left_LH_P8_7¹ => if (_lh_send_left_LH_P8_3¹ && (_lh_send_left_LH_P8_4¹ > _lh_send_left_LH_P8_7⁰)) then [LH_P8 _lh_send_left_LH_P8_0¹ _lh_send_left_LH_P8_1¹ _lh_send_left_LH_P8_2¹ _lh_send_left_LH_P8_3¹ (_lh_send_left_LH_P8_4¹ - _lh_send_left_LH_P8_7⁰) _lh_send_left_LH_P8_5¹ _lh_send_left_LH_P8_6¹ (_lh_send_left_LH_P8_7⁰ + _lh_send_left_LH_P8_7¹)] else [LH_P8 _lh_send_left_LH_P8_0⁰ _lh_send_left_LH_P8_1⁰ _lh_send_left_LH_P8_2⁰ _lh_send_left_LH_P8_3⁰ _lh_send_left_LH_P8_4⁰ _lh_send_left_LH_P8_5⁰ _lh_send_left_LH_P8_6⁰ (_lh_send_left_LH_P8_7⁰ + _lh_send_left_LH_P8_7¹)]}}
//│ def send_lh_₁(_lh_send_arg1¹) = scanlr_lh_₁(send_right_lh_₁, send_left_lh_₁, emptyPacket_lh_₂, emptyPacket_lh_₃, _lh_send_arg1¹)
//│ def send_lh_₂(_lh_send_arg1⁰) = scanlr_lh_₂(send_right_lh_₂, send_left_lh_₂, emptyPacket_lh_₅, emptyPacket_lh_₄, _lh_send_arg1⁰)
//│ def send_right_lh_₁(_lh_send_right_arg1¹, _lh_send_right_arg2¹) = case _lh_send_right_arg1¹ of {
//│ 	LH_P8 _lh_send_right_LH_P8_0² _lh_send_right_LH_P8_1² _lh_send_right_LH_P8_2² _lh_send_right_LH_P8_3² _lh_send_right_LH_P8_4² _lh_send_right_LH_P8_5² _lh_send_right_LH_P8_6² _lh_send_right_LH_P8_7² => case _lh_send_right_arg2¹ of {
//│ 		LH_P8 _lh_send_right_LH_P8_0³ _lh_send_right_LH_P8_1³ _lh_send_right_LH_P8_2³ _lh_send_right_LH_P8_3³ _lh_send_right_LH_P8_4³ _lh_send_right_LH_P8_5³ _lh_send_right_LH_P8_6³ _lh_send_right_LH_P8_7³ => if (_lh_send_right_LH_P8_5² && (_lh_send_right_LH_P8_6² > _lh_send_right_LH_P8_7³)) then [LH_P8 _lh_send_right_LH_P8_0² _lh_send_right_LH_P8_1² _lh_send_right_LH_P8_2² _lh_send_right_LH_P8_3² _lh_send_right_LH_P8_4² _lh_send_right_LH_P8_5² (_lh_send_right_LH_P8_6² - _lh_send_right_LH_P8_7³) (_lh_send_right_LH_P8_7² + _lh_send_right_LH_P8_7³)] else [LH_P8 _lh_send_right_LH_P8_0³ _lh_send_right_LH_P8_1³ _lh_send_right_LH_P8_2³ _lh_send_right_LH_P8_3³ _lh_send_right_LH_P8_4³ _lh_send_right_LH_P8_5³ _lh_send_right_LH_P8_6³ (_lh_send_right_LH_P8_7² + _lh_send_right_LH_P8_7³)]}}
//│ def send_right_lh_₂(_lh_send_right_arg1⁰, _lh_send_right_arg2⁰) = case _lh_send_right_arg1⁰ of {
//│ 	LH_P8 _lh_send_right_LH_P8_0⁰ _lh_send_right_LH_P8_1⁰ _lh_send_right_LH_P8_2⁰ _lh_send_right_LH_P8_3⁰ _lh_send_right_LH_P8_4⁰ _lh_send_right_LH_P8_5⁰ _lh_send_right_LH_P8_6⁰ _lh_send_right_LH_P8_7⁰ => case _lh_send_right_arg2⁰ of {
//│ 		LH_P8 _lh_send_right_LH_P8_0¹ _lh_send_right_LH_P8_1¹ _lh_send_right_LH_P8_2¹ _lh_send_right_LH_P8_3¹ _lh_send_right_LH_P8_4¹ _lh_send_right_LH_P8_5¹ _lh_send_right_LH_P8_6¹ _lh_send_right_LH_P8_7¹ => if (_lh_send_right_LH_P8_5⁰ && (_lh_send_right_LH_P8_6⁰ > _lh_send_right_LH_P8_7¹)) then [LH_P8 _lh_send_right_LH_P8_0⁰ _lh_send_right_LH_P8_1⁰ _lh_send_right_LH_P8_2⁰ _lh_send_right_LH_P8_3⁰ _lh_send_right_LH_P8_4⁰ _lh_send_right_LH_P8_5⁰ (_lh_send_right_LH_P8_6⁰ - _lh_send_right_LH_P8_7¹) (_lh_send_right_LH_P8_7⁰ + _lh_send_right_LH_P8_7¹)] else [LH_P8 _lh_send_right_LH_P8_0¹ _lh_send_right_LH_P8_1¹ _lh_send_right_LH_P8_2¹ _lh_send_right_LH_P8_3¹ _lh_send_right_LH_P8_4¹ _lh_send_right_LH_P8_5¹ _lh_send_right_LH_P8_6¹ (_lh_send_right_LH_P8_7⁰ + _lh_send_right_LH_P8_7¹)]}}
//│ def simulate_component_lh_₁(_lh_simulate_component_arg1⁰, _lh_simulate_component_arg2⁰) = 
//│ 	let out_signals⁰ = 	
//│ 		let _lh_listcomp_fun⁹ = (fun _lh_listcomp_fun_para⁹ -> case _lh_listcomp_fun_para⁹ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁹ _lh_listcomp_fun_ls_t⁹ => case _lh_listcomp_fun_ls_h⁹ of {
//│ 				LH_P3 _lh_simulate_component_LH_P3_0⁰ _lh_simulate_component_LH_P3_1⁰ _lh_simulate_component_LH_P3_2⁰ => [LH_C _lh_simulate_component_LH_P3_2⁰ _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)]
//│ 				| _  => _lh_listcomp_fun⁹(_lh_listcomp_fun_ls_t⁹)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁹(inports_lh_₄(_lh_simulate_component_arg2⁰))
//│ 	in let new_value⁰ = apply_component_lh_₁(compType_lh_₄(_lh_simulate_component_arg2⁰), out_signals⁰)
//│ 	in if ((_lh_simulate_component_arg1⁰ == pathDepth_lh_₄(_lh_simulate_component_arg2⁰)) && not⁰(polyEq⁰(new_value⁰, [Nothing]))) then 
//│ 		let _lh_matchIdent¹⁸ = new_value⁰
//│ 		in case _lh_matchIdent¹⁸ of {
//│ 			Just _lh_simulate_component_Just_0⁰ => update_outports_lh_₃(_lh_simulate_component_arg2⁰, _lh_simulate_component_Just_0⁰)} else _lh_simulate_component_arg2⁰
//│ def simulate_components_lh_₁(_lh_simulate_components_arg1⁰, _lh_simulate_components_arg2⁰) = map_lh_₇(simulate_component_lh_₁(_lh_simulate_components_arg1⁰), _lh_simulate_components_arg2⁰)
//│ def simulate_lh_₁(_lh_simulate_arg1⁰, _lh_simulate_arg2⁰) = case _lh_simulate_arg2⁰ of {
//│ 	LH_P4 _lh_simulate_LH_P4_0⁰ _lh_simulate_LH_P4_1⁰ _lh_simulate_LH_P4_2⁰ _lh_simulate_LH_P4_3⁰ => tail_lh_₁(scanl_lh_₁(do_cycle_lh_₁(critical_path_depth_lh_₁([LH_P4 _lh_simulate_LH_P4_0⁰ _lh_simulate_LH_P4_1⁰ _lh_simulate_LH_P4_2⁰ _lh_simulate_LH_P4_3⁰])), [LH_P4 _lh_simulate_LH_P4_0⁰ _lh_simulate_LH_P4_1⁰ _lh_simulate_LH_P4_2⁰ map_lh_₃(init_dffs_lh_₁, _lh_simulate_LH_P4_3⁰)], _lh_simulate_arg1⁰))}
//│ def snd_lh_₁(_lh_snd_arg1¹) = case _lh_snd_arg1¹ of {
//│ 	LH_P2 _lh_snd_LH_P2_0¹ _lh_snd_LH_P2_1¹ => _lh_snd_LH_P2_1¹}
//│ def snd_lh_₂(_lh_snd_arg1⁰) = case _lh_snd_arg1⁰ of {
//│ 	LH_P2 _lh_snd_LH_P2_0⁰ _lh_snd_LH_P2_1⁰ => _lh_snd_LH_P2_1⁰}
//│ def splitAt_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) = [LH_P2 take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]
//│ def store_inputs_lh_₁(_lh_store_inputs_arg1⁰, _lh_store_inputs_arg2⁰) = case _lh_store_inputs_arg2⁰ of {
//│ 	PS _lh_store_inputs_PS_0⁰ _lh_store_inputs_PS_1⁰ _lh_store_inputs_PS_2⁰ _lh_store_inputs_PS_3⁰ _lh_store_inputs_PS_4⁰ => case _lh_store_inputs_PS_1⁰ of {
//│ 		Inp  => head_lh_₃(
//│ 			let _lh_listcomp_fun¹¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {
//│ 				LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => case _lh_listcomp_fun_ls_h¹¹ of {
//│ 					LH_P2 _lh_store_inputs_LH_P2_0⁰ _lh_store_inputs_LH_P2_1⁰ => case _lh_store_inputs_LH_P2_0⁰ of {
//│ 						LH_P2 _lh_store_inputs_LH_P2_0¹ _lh_store_inputs_LH_P2_1¹ => if (_lh_store_inputs_PS_0⁰ == _lh_store_inputs_LH_P2_1¹) then [LH_C update_outports_lh_₂([PS _lh_store_inputs_PS_0⁰ [Inp] _lh_store_inputs_PS_2⁰ _lh_store_inputs_PS_3⁰ _lh_store_inputs_PS_4⁰], _lh_store_inputs_LH_P2_1⁰) _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)
//│ 						| _  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)}
//│ 					| _  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)}
//│ 				| LH_N  => [LH_N]})
//│ 			in _lh_listcomp_fun¹¹(_lh_store_inputs_arg1⁰))
//│ 		| _  => _lh_store_inputs_arg2⁰}
//│ 	| _  => _lh_store_inputs_arg2⁰}
//│ def sweep_ud_lh_₁(_lh_sweep_ud_arg1⁰, _lh_sweep_ud_arg2⁰, _lh_sweep_ud_arg3⁰, _lh_sweep_ud_arg4⁰) = 
//│ 	let _lh_matchIdent⁴ = upsweep_lh_₁(_lh_sweep_ud_arg1⁰, _lh_sweep_ud_arg4⁰)
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_P2 _lh_sweep_ud_LH_P2_0⁰ _lh_sweep_ud_LH_P2_1⁰ => [LH_P2 _lh_sweep_ud_LH_P2_0⁰ downsweep_lh_₁(_lh_sweep_ud_arg2⁰, _lh_sweep_ud_arg3⁰, _lh_sweep_ud_LH_P2_1⁰)]}
//│ def tail_lh_₁(ls²⁶) = case ls²⁶ of {
//│ 	LH_C h²⁶ t²⁶ => t²⁶
//│ 	| LH_N  => error⁰}
//│ def take_lh_₁(n⁰, ls⁰) = if (n⁰ > 0) then case ls⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ take_lh_₁((n⁰ - 1), t⁰)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lz_lh_₁(n², ls³⁰) = if (n² > 0) then case force⁰(ls³⁰) of {
//│ 	LH_C h³⁴ t³⁴ => [LH_C h³⁴ take_lz_lh_₁((n² - 1), t³⁴)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lz_lh_₂(n¹, ls³) = if (n¹ > 0) then case force⁰(ls³) of {
//│ 	LH_C h³ t³ => [LH_C h³ take_lz_lh_₂((n¹ - 1), t³)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testCircsim_nofib_lh_₁(_lh_testCircsim_nofib_arg1⁰) = run_lh_₁(8, _lh_testCircsim_nofib_arg1⁰)
//│ def transpose_lh_₁(_lh_transpose_arg1³) = case _lh_transpose_arg1³ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_transpose_LH_C_0⁹ _lh_transpose_LH_C_1⁹ => case _lh_transpose_LH_C_0⁹ of {
//│ 		LH_N  => transpose_lh_₁(_lh_transpose_LH_C_1⁹)
//│ 		| LH_C _lh_transpose_LH_C_0¹⁰ _lh_transpose_LH_C_1¹⁰ => 
//│ 			let _lh_matchIdent¹⁷ = unzip_lh_₁(
//│ 				let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {
//│ 					LH_C _lh_listcomp_fun_ls_h⁸ _lh_listcomp_fun_ls_t⁸ => case _lh_listcomp_fun_ls_h⁸ of {
//│ 						LH_C _lh_transpose_LH_C_0¹¹ _lh_transpose_LH_C_1¹¹ => [LH_C [LH_P2 _lh_transpose_LH_C_0¹¹ _lh_transpose_LH_C_1¹¹] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)]
//│ 						| _  => _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁸)}
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun⁸(_lh_transpose_LH_C_1⁹))
//│ 			in case _lh_matchIdent¹⁷ of {
//│ 				LH_P2 _lh_transpose_LH_P2_0³ _lh_transpose_LH_P2_1³ => combine_lh_₁(_lh_transpose_LH_C_0¹⁰, _lh_transpose_LH_P2_0³, _lh_transpose_LH_C_1¹⁰, _lh_transpose_LH_P2_1³)}}}
//│ def transpose_lh_₂(_lh_transpose_arg1²) = case _lh_transpose_arg1² of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_transpose_LH_C_0⁶ _lh_transpose_LH_C_1⁶ => case _lh_transpose_LH_C_0⁶ of {
//│ 		LH_N  => transpose_lh_₂(_lh_transpose_LH_C_1⁶)
//│ 		| LH_C _lh_transpose_LH_C_0⁷ _lh_transpose_LH_C_1⁷ => 
//│ 			let _lh_matchIdent¹⁶ = unzip_lh_₂(
//│ 				let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 					LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => case _lh_listcomp_fun_ls_h⁶ of {
//│ 						LH_C _lh_transpose_LH_C_0⁸ _lh_transpose_LH_C_1⁸ => [LH_C [LH_P2 _lh_transpose_LH_C_0⁸ _lh_transpose_LH_C_1⁸] _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)]
//│ 						| _  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁶)}
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun⁶(_lh_transpose_LH_C_1⁶))
//│ 			in case _lh_matchIdent¹⁶ of {
//│ 				LH_P2 _lh_transpose_LH_P2_0² _lh_transpose_LH_P2_1² => combine_lh_₂(_lh_transpose_LH_C_0⁷, _lh_transpose_LH_P2_0², _lh_transpose_LH_C_1⁷, _lh_transpose_LH_P2_1²)}}}
//│ def transpose_lh_₃(_lh_transpose_arg1¹) = case _lh_transpose_arg1¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_transpose_LH_C_0³ _lh_transpose_LH_C_1³ => case _lh_transpose_LH_C_0³ of {
//│ 		LH_N  => transpose_lh_₃(_lh_transpose_LH_C_1³)
//│ 		| LH_C _lh_transpose_LH_C_0⁴ _lh_transpose_LH_C_1⁴ => 
//│ 			let _lh_matchIdent¹⁵ = unzip_lh_₂(
//│ 				let _lh_listcomp_fun⁵ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 					LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => case _lh_listcomp_fun_ls_h⁵ of {
//│ 						LH_C _lh_transpose_LH_C_0⁵ _lh_transpose_LH_C_1⁵ => [LH_C [LH_P2 _lh_transpose_LH_C_0⁵ _lh_transpose_LH_C_1⁵] _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)]
//│ 						| _  => _lh_listcomp_fun⁵(_lh_listcomp_fun_ls_t⁵)}
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun⁵(_lh_transpose_LH_C_1³))
//│ 			in case _lh_matchIdent¹⁵ of {
//│ 				LH_P2 _lh_transpose_LH_P2_0¹ _lh_transpose_LH_P2_1¹ => combine_lh_₂(_lh_transpose_LH_C_0⁴, _lh_transpose_LH_P2_0¹, _lh_transpose_LH_C_1⁴, _lh_transpose_LH_P2_1¹)}}}
//│ def transpose_lh_₄(_lh_transpose_arg1⁰) = case _lh_transpose_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_transpose_LH_C_0⁰ _lh_transpose_LH_C_1⁰ => case _lh_transpose_LH_C_0⁰ of {
//│ 		LH_N  => transpose_lh_₄(_lh_transpose_LH_C_1⁰)
//│ 		| LH_C _lh_transpose_LH_C_0¹ _lh_transpose_LH_C_1¹ => 
//│ 			let _lh_matchIdent¹⁴ = unzip_lh_₂(
//│ 				let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 					LH_C _lh_listcomp_fun_ls_h³ _lh_listcomp_fun_ls_t³ => case _lh_listcomp_fun_ls_h³ of {
//│ 						LH_C _lh_transpose_LH_C_0² _lh_transpose_LH_C_1² => [LH_C [LH_P2 _lh_transpose_LH_C_0² _lh_transpose_LH_C_1²] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)]
//│ 						| _  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t³)}
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun³(_lh_transpose_LH_C_1⁰))
//│ 			in case _lh_matchIdent¹⁴ of {
//│ 				LH_P2 _lh_transpose_LH_P2_0⁰ _lh_transpose_LH_P2_1⁰ => combine_lh_₂(_lh_transpose_LH_C_0¹, _lh_transpose_LH_P2_0⁰, _lh_transpose_LH_C_1¹, _lh_transpose_LH_P2_1⁰)}}}
//│ def until_lh_₁(_lh_until_arg1², _lh_until_arg2², _lh_until_arg3²) = if _lh_until_arg1²(_lh_until_arg3²) then _lh_until_arg3² else until_lh_₁(_lh_until_arg1², _lh_until_arg2², _lh_until_arg2²(_lh_until_arg3²))
//│ def until_lh_₂(_lh_until_arg1¹, _lh_until_arg2¹, _lh_until_arg3¹) = if _lh_until_arg1¹(_lh_until_arg3¹) then _lh_until_arg3¹ else until_lh_₂(_lh_until_arg1¹, _lh_until_arg2¹, _lh_until_arg2¹(_lh_until_arg3¹))
//│ def until_lh_₃(_lh_until_arg1⁰, _lh_until_arg2⁰, _lh_until_arg3⁰) = if _lh_until_arg1⁰(_lh_until_arg3⁰) then _lh_until_arg3⁰ else until_lh_₃(_lh_until_arg1⁰, _lh_until_arg2⁰, _lh_until_arg2⁰(_lh_until_arg3⁰))
//│ def unzip_lh_₁(_lh_unzip_arg1¹) = foldr_lh_₁((fun ab¹ -> (fun asbs¹ -> 
//│ 	let _lh_matchIdent¹² = ab¹
//│ 	in case _lh_matchIdent¹² of {
//│ 		LH_P2 _lh_unzip_LH_P2_0² _lh_unzip_LH_P2_1² => 
//│ 			let _lh_matchIdent¹³ = asbs¹
//│ 			in case _lh_matchIdent¹³ of {
//│ 				LH_P2 _lh_unzip_LH_P2_0³ _lh_unzip_LH_P2_1³ => [LH_P2 [LH_C _lh_unzip_LH_P2_0² _lh_unzip_LH_P2_0³] [LH_C _lh_unzip_LH_P2_1² _lh_unzip_LH_P2_1³]]}})), [LH_P2 [LH_N] [LH_N]], _lh_unzip_arg1¹)
//│ def unzip_lh_₂(_lh_unzip_arg1⁰) = foldr_lh_₁((fun ab⁰ -> (fun asbs⁰ -> 
//│ 	let _lh_matchIdent⁸ = ab⁰
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_P2 _lh_unzip_LH_P2_0⁰ _lh_unzip_LH_P2_1⁰ => 
//│ 			let _lh_matchIdent⁹ = asbs⁰
//│ 			in case _lh_matchIdent⁹ of {
//│ 				LH_P2 _lh_unzip_LH_P2_0¹ _lh_unzip_LH_P2_1¹ => [LH_P2 [LH_C _lh_unzip_LH_P2_0⁰ _lh_unzip_LH_P2_0¹] [LH_C _lh_unzip_LH_P2_1⁰ _lh_unzip_LH_P2_1¹]]}})), [LH_P2 [LH_N] [LH_N]], _lh_unzip_arg1⁰)
//│ def up_i_lh_₁(_lh_up_i_arg1⁰, _lh_up_i_arg2⁰) = case _lh_up_i_arg1⁰ of {
//│ 	LH_P8 _lh_up_i_LH_P8_0⁰ _lh_up_i_LH_P8_1⁰ _lh_up_i_LH_P8_2⁰ _lh_up_i_LH_P8_3⁰ _lh_up_i_LH_P8_4⁰ _lh_up_i_LH_P8_5⁰ _lh_up_i_LH_P8_6⁰ _lh_up_i_LH_P8_7⁰ => map_lh_₂₁(compare_and_update_lh_₁([LH_P3 _lh_up_i_LH_P8_0⁰ _lh_up_i_LH_P8_1⁰ _lh_up_i_LH_P8_2⁰]), _lh_up_i_arg2⁰)}
//│ def updateInports_lh_₁(_lh_updateInports_arg1⁰, _lh_updateInports_arg2⁰) = [PS pid_lh_₅(_lh_updateInports_arg1⁰) compType_lh_₅(_lh_updateInports_arg1⁰) pathDepth_lh_₉(_lh_updateInports_arg1⁰) _lh_updateInports_arg2⁰ outports_lh_₈(_lh_updateInports_arg1⁰)]
//│ def updateOutports_lh_₁(_lh_updateOutports_arg1³, _lh_updateOutports_arg2³) = [PS pid_lh_₂(_lh_updateOutports_arg1³) compType_lh_₂(_lh_updateOutports_arg1³) pathDepth_lh_₂(_lh_updateOutports_arg1³) inports_lh_₂(_lh_updateOutports_arg1³) _lh_updateOutports_arg2³]
//│ def updateOutports_lh_₂(_lh_updateOutports_arg1², _lh_updateOutports_arg2²) = [PS pid_lh_₃(_lh_updateOutports_arg1²) compType_lh_₃(_lh_updateOutports_arg1²) pathDepth_lh_₃(_lh_updateOutports_arg1²) inports_lh_₃(_lh_updateOutports_arg1²) _lh_updateOutports_arg2²]
//│ def updateOutports_lh_₃(_lh_updateOutports_arg1¹, _lh_updateOutports_arg2¹) = [PS pid_lh_₄(_lh_updateOutports_arg1¹) compType_lh_₅(_lh_updateOutports_arg1¹) pathDepth_lh_₅(_lh_updateOutports_arg1¹) inports_lh_₅(_lh_updateOutports_arg1¹) _lh_updateOutports_arg2¹]
//│ def updateOutports_lh_₄(_lh_updateOutports_arg1⁰, _lh_updateOutports_arg2⁰) = [PS pid_lh_₅(_lh_updateOutports_arg1⁰) compType_lh_₅(_lh_updateOutports_arg1⁰) pathDepth_lh_₉(_lh_updateOutports_arg1⁰) inports_lh_₆(_lh_updateOutports_arg1⁰) _lh_updateOutports_arg2⁰]
//│ def update_i_lh_₁(_lh_update_i_arg1⁰, _lh_update_i_arg2⁰) = case _lh_update_i_arg1⁰ of {
//│ 	LH_P2 _lh_update_i_LH_P2_0⁰ _lh_update_i_LH_P2_1⁰ => up_i_lh_₁(_lh_update_i_LH_P2_0⁰, up_i_lh_₁(_lh_update_i_LH_P2_1⁰, _lh_update_i_arg2⁰))}
//│ def update_io_lh_₁(_lh_update_io_arg1¹, _lh_update_io_arg2¹, _lh_update_io_arg3¹) = 
//│ 	let update_is¹ = (fun state² -> updateInports_lh_₁(state², foldr_lh_₁(update_i_lh_₁, inports_lh_₆(state²), _lh_update_io_arg2¹)))
//│ 	in let update_os¹ = (fun state³ -> if (pathDepth_lh_₇(state³) == _lh_update_io_arg1¹) then updateOutports_lh_₄(state³, zipWith_lh_₅(update_o_lh_₁, _lh_update_io_arg2¹, outports_lh_₈(state³))) else state³)
//│ 	in update_os¹(update_is¹(_lh_update_io_arg3¹))
//│ def update_io_lh_₂(_lh_update_io_arg1⁰, _lh_update_io_arg2⁰, _lh_update_io_arg3⁰) = 
//│ 	let update_is⁰ = (fun state⁰ -> updateInports_lh_₁(state⁰, foldr_lh_₁(update_i_lh_₁, inports_lh_₆(state⁰), _lh_update_io_arg2⁰)))
//│ 	in let update_os⁰ = (fun state¹ -> if (pathDepth_lh_₉(state¹) == _lh_update_io_arg1⁰) then updateOutports_lh_₄(state¹, zipWith_lh_₅(update_o_lh_₁, _lh_update_io_arg2⁰, outports_lh_₈(state¹))) else state¹)
//│ 	in update_os⁰(update_is⁰(_lh_update_io_arg3⁰))
//│ def update_o_lh_₁(_lh_update_o_arg1⁰, _lh_update_o_arg2⁰) = case _lh_update_o_arg1⁰ of {
//│ 	LH_P2 _lh_update_o_LH_P2_0⁰ _lh_update_o_LH_P2_1⁰ => check_left_lh_₁(_lh_update_o_LH_P2_0⁰, check_right_lh_₁(_lh_update_o_LH_P2_1⁰, _lh_update_o_arg2⁰))}
//│ def update_outports_lh_₁(_lh_update_outports_arg1², _lh_update_outports_arg2²) = updateOutports_lh_₁(_lh_update_outports_arg1², 
//│ 	let _lh_listcomp_fun¹² = (fun _lh_listcomp_fun_para¹² -> case _lh_listcomp_fun_para¹² of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹² _lh_listcomp_fun_ls_t¹² => case _lh_listcomp_fun_ls_h¹² of {
//│ 			LH_P6 _lh_update_outports_LH_P6_0² _lh_update_outports_LH_P6_1² _lh_update_outports_LH_P6_2² _lh_update_outports_LH_P6_3² _lh_update_outports_LH_P6_4² _lh_update_outports_LH_P6_5² => [LH_C [LH_P6 _lh_update_outports_LH_P6_0² _lh_update_outports_arg2² _lh_update_outports_LH_P6_2² _lh_update_outports_LH_P6_3² _lh_update_outports_LH_P6_4² _lh_update_outports_LH_P6_5²] _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t¹²)]
//│ 			| _  => _lh_listcomp_fun¹²(_lh_listcomp_fun_ls_t¹²)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹²(outports_lh_₁(_lh_update_outports_arg1²)))
//│ def update_outports_lh_₂(_lh_update_outports_arg1¹, _lh_update_outports_arg2¹) = updateOutports_lh_₃(_lh_update_outports_arg1¹, 
//│ 	let _lh_listcomp_fun¹⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹⁰ => case _lh_listcomp_fun_ls_h¹⁰ of {
//│ 			LH_P6 _lh_update_outports_LH_P6_0¹ _lh_update_outports_LH_P6_1¹ _lh_update_outports_LH_P6_2¹ _lh_update_outports_LH_P6_3¹ _lh_update_outports_LH_P6_4¹ _lh_update_outports_LH_P6_5¹ => [LH_C [LH_P6 _lh_update_outports_LH_P6_0¹ _lh_update_outports_arg2¹ _lh_update_outports_LH_P6_2¹ _lh_update_outports_LH_P6_3¹ _lh_update_outports_LH_P6_4¹ _lh_update_outports_LH_P6_5¹] _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)]
//│ 			| _  => _lh_listcomp_fun¹⁰(_lh_listcomp_fun_ls_t¹⁰)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹⁰(outports_lh_₄(_lh_update_outports_arg1¹)))
//│ def update_outports_lh_₃(_lh_update_outports_arg1⁰, _lh_update_outports_arg2⁰) = updateOutports_lh_₄(_lh_update_outports_arg1⁰, 
//│ 	let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 		LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => case _lh_listcomp_fun_ls_h² of {
//│ 			LH_P6 _lh_update_outports_LH_P6_0⁰ _lh_update_outports_LH_P6_1⁰ _lh_update_outports_LH_P6_2⁰ _lh_update_outports_LH_P6_3⁰ _lh_update_outports_LH_P6_4⁰ _lh_update_outports_LH_P6_5⁰ => [LH_C [LH_P6 _lh_update_outports_LH_P6_0⁰ _lh_update_outports_arg2⁰ _lh_update_outports_LH_P6_2⁰ _lh_update_outports_LH_P6_3⁰ _lh_update_outports_LH_P6_4⁰ _lh_update_outports_LH_P6_5⁰] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)]
//│ 			| _  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t²)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun²(outports_lh_₈(_lh_update_outports_arg1⁰)))
//│ def update_requests_lh_₁(_lh_update_requests_arg1¹, _lh_update_requests_arg2¹) = updateOutports_lh_₄(_lh_update_requests_arg2¹, 
//│ 	let _lh_listcomp_fun¹ = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {
//│ 			LH_P6 _lh_update_requests_LH_P6_0¹ _lh_update_requests_LH_P6_1¹ _lh_update_requests_LH_P6_2¹ _lh_update_requests_LH_P6_3¹ _lh_update_requests_LH_P6_4¹ _lh_update_requests_LH_P6_5¹ => [LH_C [LH_P6 _lh_update_requests_LH_P6_0¹ _lh_update_requests_LH_P6_1¹ _lh_update_requests_arg1¹ _lh_update_requests_LH_P6_3¹ _lh_update_requests_arg1¹ _lh_update_requests_LH_P6_5¹] _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)]
//│ 			| _  => _lh_listcomp_fun¹(_lh_listcomp_fun_ls_t¹)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹(outports_lh_₈(_lh_update_requests_arg2¹)))
//│ def update_requests_lh_₂(_lh_update_requests_arg1⁰, _lh_update_requests_arg2⁰) = updateOutports_lh_₄(_lh_update_requests_arg2⁰, 
//│ 	let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {
//│ 			LH_P6 _lh_update_requests_LH_P6_0⁰ _lh_update_requests_LH_P6_1⁰ _lh_update_requests_LH_P6_2⁰ _lh_update_requests_LH_P6_3⁰ _lh_update_requests_LH_P6_4⁰ _lh_update_requests_LH_P6_5⁰ => [LH_C [LH_P6 _lh_update_requests_LH_P6_0⁰ _lh_update_requests_LH_P6_1⁰ _lh_update_requests_arg1⁰ _lh_update_requests_LH_P6_3⁰ _lh_update_requests_arg1⁰ _lh_update_requests_LH_P6_5⁰] _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 			| _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁰(outports_lh_₈(_lh_update_requests_arg2⁰)))
//│ def upsweep_lh_₁(_lh_upsweep_arg1⁰, _lh_upsweep_arg2⁰) = case _lh_upsweep_arg2⁰ of {
//│ 	Cell _lh_upsweep_Cell_0⁰ => [LH_P2 _lh_upsweep_Cell_0⁰ [Cell _lh_upsweep_Cell_0⁰]]
//│ 	| Node _lh_upsweep_Node_0⁰ _lh_upsweep_Node_1⁰ _lh_upsweep_Node_2⁰ => 
//│ 		let _lh_matchIdent⁰ = upsweep_lh_₁(_lh_upsweep_arg1⁰, _lh_upsweep_Node_1⁰)
//│ 		in case _lh_matchIdent⁰ of {
//│ 			LH_P2 _lh_upsweep_LH_P2_0⁰ _lh_upsweep_LH_P2_1⁰ => 
//│ 				let _lh_matchIdent¹ = upsweep_lh_₁(_lh_upsweep_arg1⁰, _lh_upsweep_Node_2⁰)
//│ 				in case _lh_matchIdent¹ of {
//│ 					LH_P2 _lh_upsweep_LH_P2_0¹ _lh_upsweep_LH_P2_1¹ => [LH_P2 _lh_upsweep_arg1⁰(_lh_upsweep_LH_P2_0⁰, _lh_upsweep_LH_P2_0¹) [Node [LH_P2 _lh_upsweep_LH_P2_0⁰ _lh_upsweep_LH_P2_0¹] _lh_upsweep_LH_P2_1⁰ _lh_upsweep_LH_P2_1¹]]}}}
//│ def xor_lh_₁(_lh_xor_arg1⁰, _lh_xor_arg2⁰) = if polyEq⁰(_lh_xor_arg1⁰, _lh_xor_arg2⁰) then [T] else [F]
//│ def zipWith_lh_₁(f²⁰, xs⁶, ys⁴) = case xs⁶ of {
//│ 	LH_C hx⁴ tx⁴ => case ys⁴ of {
//│ 		LH_C hy⁴ ty⁴ => [LH_C f²⁰(hx⁴, hy⁴) zipWith_lh_₁(f²⁰, tx⁴, ty⁴)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lh_₂(f¹⁹, xs⁵, ys³) = case xs⁵ of {
//│ 	LH_C hx³ tx³ => case ys³ of {
//│ 		LH_C hy³ ty³ => [LH_C f¹⁹(hx³, hy³) zipWith_lh_₂(f¹⁹, tx³, ty³)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lh_₃(f¹⁶, xs⁴, ys²) = case xs⁴ of {
//│ 	LH_C hx² tx² => case ys² of {
//│ 		LH_C hy² ty² => [LH_C f¹⁶(hx², hy²) zipWith_lh_₃(f¹⁶, tx², ty²)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lh_₄(f¹⁰, xs², ys¹) = case xs² of {
//│ 	LH_C hx¹ tx¹ => case ys¹ of {
//│ 		LH_C hy¹ ty¹ => [LH_C f¹⁰(hx¹, hy¹) zipWith_lh_₄(f¹⁰, tx¹, ty¹)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lh_₅(f³, xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C hx⁰ tx⁰ => case ys⁰ of {
//│ 		LH_C hy⁰ ty⁰ => [LH_C f³(hx⁰, hy⁰) zipWith_lh_₅(f³, tx⁰, ty⁰)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lz_nl_lh_₁(f²⁹, xs¹², ys¹⁰) = case ys¹⁰ of {
//│ 	LH_C hy⁷ ty⁷ => case force⁰(xs¹²) of {
//│ 		LH_C hx⁷ tx⁷ => [LH_C f²⁹(hx⁷, hy⁷) zipWith_lz_nl_lh_₁(f²⁹, tx⁷, ty⁷)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lz_nl_lh_₂(f²⁷, xs¹⁰, ys⁸) = case ys⁸ of {
//│ 	LH_C hy⁶ ty⁶ => case force⁰(xs¹⁰) of {
//│ 		LH_C hx⁶ tx⁶ => [LH_C f²⁷(hx⁶, hy⁶) zipWith_lz_nl_lh_₂(f²⁷, tx⁶, ty⁶)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zip_lh_₁(xs⁷, ys⁵) = case xs⁷ of {
//│ 	LH_C hx⁵ tx⁵ => case ys⁵ of {
//│ 		LH_C hy⁵ ty⁵ => [LH_C [LH_P2 hx⁵ hy⁵] zip_lh_₁(tx⁵, ty⁵)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec copy_lh__d1 _lh_copy_arg1_1 _lh_copy_arg2_1 =
//│ 		  (if (_lh_copy_arg1_1 > 0) then
//│ 		    (`LH_C(_lh_copy_arg2_1, ((copy_lh__d1 (_lh_copy_arg1_1 - 1)) _lh_copy_arg2_1)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec copy_lz_lh__d1 _lh_copy_lz_arg1_1 _lh_copy_lz_arg2_1 =
//│ 		  (if (_lh_copy_lz_arg1_1 > 0) then
//│ 		    (lazy (`LH_C(_lh_copy_lz_arg2_1, ((copy_lz_lh__d1 (_lh_copy_lz_arg1_1 - 1)) _lh_copy_lz_arg2_1))))
//│ 		  else
//│ 		    (lazy (`LH_N)));;
//│ 		let rec take_lz_lh__d1 n_2 ls_3_0 =
//│ 		  (if (n_2 > 0) then
//│ 		    (match (Lazy.force ls_3_0) with
//│ 		      | `LH_C(h_3_4, t_3_4) -> 
//│ 		        (`LH_C(h_3_4, ((take_lz_lh__d1 (n_2 - 1)) t_3_4)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec emptyState_lh__d1 =
//│ 		  (`PS((0 - 1), (`None), (0 - 1), (`LH_N), (`LH_N)));;
//│ 		let rec append__lz_lh__d1 _lh_append__lz_arg1_1 _lh_append__lz_arg2_1 =
//│ 		  (let rec _lh_matchIdent_2_0 = _lh_append__lz_arg1_1 in
//│ 		    (match _lh_matchIdent_2_0 with
//│ 		      | `LH_N -> 
//│ 		        _lh_append__lz_arg2_1
//│ 		      | `LH_C(_lh_append__lz_LH_C_0_1, _lh_append__lz_LH_C_1_1) -> 
//│ 		        (lazy (`LH_C(_lh_append__lz_LH_C_0_1, ((append__lz_lh__d1 _lh_append__lz_LH_C_1_1) _lh_append__lz_arg2_1))))));;
//│ 		let rec until_lh__d1 _lh_until_arg1_2 _lh_until_arg2_2 _lh_until_arg3_2 =
//│ 		  (if (_lh_until_arg1_2 _lh_until_arg3_2) then
//│ 		    _lh_until_arg3_2
//│ 		  else
//│ 		    (((until_lh__d1 _lh_until_arg1_2) _lh_until_arg2_2) (_lh_until_arg2_2 _lh_until_arg3_2)));;
//│ 		let rec nearest_power_of_two_lh__d1 _lh_nearest_power_of_two_arg1_0 =
//│ 		  (((until_lh__d1 (fun a_6 -> 
//│ 		    (a_6 >= _lh_nearest_power_of_two_arg1_0))) (fun a_7 -> 
//│ 		    (a_7 * 2))) 1);;
//│ 		let rec pad_circuit_lh__d1 _lh_pad_circuit_arg1_0 =
//│ 		  (match _lh_pad_circuit_arg1_0 with
//│ 		    | `LH_P4(_lh_pad_circuit_LH_P4_0_0, _lh_pad_circuit_LH_P4_1_0, _lh_pad_circuit_LH_P4_2_0, _lh_pad_circuit_LH_P4_3_0) -> 
//│ 		      (let rec p2_0 = (nearest_power_of_two_lh__d1 _lh_pad_circuit_LH_P4_0_0) in
//│ 		        (`LH_P4(p2_0, _lh_pad_circuit_LH_P4_1_0, _lh_pad_circuit_LH_P4_2_0, ((take_lz_lh__d1 p2_0) ((append__lz_lh__d1 _lh_pad_circuit_LH_P4_3_0) ((copy_lz_lh__d1 p2_0) emptyState_lh__d1)))))));;
//│ 		let rec copy_lh__d2 _lh_copy_arg1_0 _lh_copy_arg2_0 =
//│ 		  (if (_lh_copy_arg1_0 > 0) then
//│ 		    (`LH_C(_lh_copy_arg2_0, ((copy_lh__d2 (_lh_copy_arg1_0 - 1)) _lh_copy_arg2_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec outports_lh__d2 _lh_outports_arg1_6 =
//│ 		  (match _lh_outports_arg1_6 with
//│ 		    | `PS(_lh_outports_PS_0_6, _lh_outports_PS_1_6, _lh_outports_PS_2_6, _lh_outports_PS_3_6, _lh_outports_PS_4_6) -> 
//│ 		      _lh_outports_PS_4_6);;
//│ 		let rec outports_lh__d3 _lh_outports_arg1_5 =
//│ 		  (match _lh_outports_arg1_5 with
//│ 		    | `PS(_lh_outports_PS_0_5, _lh_outports_PS_1_5, _lh_outports_PS_2_5, _lh_outports_PS_3_5, _lh_outports_PS_4_5) -> 
//│ 		      _lh_outports_PS_4_5);;
//│ 		let rec zipWith_lh__d2 f_1_9 xs_5 ys_3 =
//│ 		  (match xs_5 with
//│ 		    | `LH_C(hx_3, tx_3) -> 
//│ 		      (match ys_3 with
//│ 		        | `LH_C(hy_3, ty_3) -> 
//│ 		          (`LH_C(((f_1_9 hx_3) hy_3), (((zipWith_lh__d2 f_1_9) tx_3) ty_3)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec zipWith_lh__d1 f_2_0 xs_6 ys_4 =
//│ 		  (match xs_6 with
//│ 		    | `LH_C(hx_4, tx_4) -> 
//│ 		      (match ys_4 with
//│ 		        | `LH_C(hy_4, ty_4) -> 
//│ 		          (`LH_C(((f_2_0 hx_4) hy_4), (((zipWith_lh__d1 f_2_0) tx_4) ty_4)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec pathDepth_lh__d3 _lh_pathDepth_arg1_6 =
//│ 		  (match _lh_pathDepth_arg1_6 with
//│ 		    | `PS(_lh_pathDepth_PS_0_6, _lh_pathDepth_PS_1_6, _lh_pathDepth_PS_2_6, _lh_pathDepth_PS_3_6, _lh_pathDepth_PS_4_6) -> 
//│ 		      _lh_pathDepth_PS_2_6);;
//│ 		let rec inports_lh__d3 _lh_inports_arg1_3 =
//│ 		  (match _lh_inports_arg1_3 with
//│ 		    | `PS(_lh_inports_PS_0_3, _lh_inports_PS_1_3, _lh_inports_PS_2_3, _lh_inports_PS_3_3, _lh_inports_PS_4_3) -> 
//│ 		      _lh_inports_PS_3_3);;
//│ 		let rec compType_lh__d3 _lh_compType_arg1_2 =
//│ 		  (match _lh_compType_arg1_2 with
//│ 		    | `PS(_lh_compType_PS_0_2, _lh_compType_PS_1_2, _lh_compType_PS_2_2, _lh_compType_PS_3_2, _lh_compType_PS_4_2) -> 
//│ 		      _lh_compType_PS_1_2);;
//│ 		let rec pid_lh__d3 _lh_pid_arg1_2 =
//│ 		  (match _lh_pid_arg1_2 with
//│ 		    | `PS(_lh_pid_PS_0_2, _lh_pid_PS_1_2, _lh_pid_PS_2_2, _lh_pid_PS_3_2, _lh_pid_PS_4_2) -> 
//│ 		      _lh_pid_PS_0_2);;
//│ 		let rec updateOutports_lh__d2 _lh_updateOutports_arg1_2 _lh_updateOutports_arg2_2 =
//│ 		  (`PS((pid_lh__d3 _lh_updateOutports_arg1_2), (compType_lh__d3 _lh_updateOutports_arg1_2), (pathDepth_lh__d3 _lh_updateOutports_arg1_2), (inports_lh__d3 _lh_updateOutports_arg1_2), _lh_updateOutports_arg2_2));;
//│ 		let rec restore_requests_lh__d1 _lh_restore_requests_arg1_0 _lh_restore_requests_arg2_0 =
//│ 		  let rec restore_0 = (fun _lh_restore_arg1_0 _lh_restore_arg2_0 -> 
//│ 		    ((updateOutports_lh__d2 _lh_restore_arg2_0) (((zipWith_lh__d2 restore_outport_0) (outports_lh__d3 _lh_restore_arg1_0)) (outports_lh__d2 _lh_restore_arg2_0))))
//│ 		  and restore_outport_0 = (fun _lh_restore_outport_arg1_0 _lh_restore_outport_arg2_0 -> 
//│ 		    (match _lh_restore_outport_arg1_0 with
//│ 		      | `LH_P6(_lh_restore_outport_LH_P6_0_0, _lh_restore_outport_LH_P6_1_0, _lh_restore_outport_LH_P6_2_0, _lh_restore_outport_LH_P6_3_0, _lh_restore_outport_LH_P6_4_0, _lh_restore_outport_LH_P6_5_0) -> 
//│ 		        (match _lh_restore_outport_arg2_0 with
//│ 		          | `LH_P6(_lh_restore_outport_LH_P6_0_1, _lh_restore_outport_LH_P6_1_1, _lh_restore_outport_LH_P6_2_1, _lh_restore_outport_LH_P6_3_1, _lh_restore_outport_LH_P6_4_1, _lh_restore_outport_LH_P6_5_1) -> 
//│ 		            (`LH_P6(_lh_restore_outport_LH_P6_0_0, _lh_restore_outport_LH_P6_1_1, _lh_restore_outport_LH_P6_2_0, _lh_restore_outport_LH_P6_3_0, _lh_restore_outport_LH_P6_4_0, _lh_restore_outport_LH_P6_5_0)))))
//│ 		  in (((zipWith_lh__d1 restore_0) _lh_restore_requests_arg1_0) _lh_restore_requests_arg2_0);;
//│ 		let rec pathDepth_lh__d4 _lh_pathDepth_arg1_5 =
//│ 		  (match _lh_pathDepth_arg1_5 with
//│ 		    | `PS(_lh_pathDepth_PS_0_5, _lh_pathDepth_PS_1_5, _lh_pathDepth_PS_2_5, _lh_pathDepth_PS_3_5, _lh_pathDepth_PS_4_5) -> 
//│ 		      _lh_pathDepth_PS_2_5);;
//│ 		let rec compType_lh__d4 _lh_compType_arg1_1 =
//│ 		  (match _lh_compType_arg1_1 with
//│ 		    | `PS(_lh_compType_PS_0_1, _lh_compType_PS_1_1, _lh_compType_PS_2_1, _lh_compType_PS_3_1, _lh_compType_PS_4_1) -> 
//│ 		      _lh_compType_PS_1_1);;
//│ 		let rec pathDepth_lh__d9 _lh_pathDepth_arg1_0 =
//│ 		  (match _lh_pathDepth_arg1_0 with
//│ 		    | `PS(_lh_pathDepth_PS_0_0, _lh_pathDepth_PS_1_0, _lh_pathDepth_PS_2_0, _lh_pathDepth_PS_3_0, _lh_pathDepth_PS_4_0) -> 
//│ 		      _lh_pathDepth_PS_2_0);;
//│ 		let rec compType_lh__d5 _lh_compType_arg1_0 =
//│ 		  (match _lh_compType_arg1_0 with
//│ 		    | `PS(_lh_compType_PS_0_0, _lh_compType_PS_1_0, _lh_compType_PS_2_0, _lh_compType_PS_3_0, _lh_compType_PS_4_0) -> 
//│ 		      _lh_compType_PS_1_0);;
//│ 		let rec pid_lh__d5 _lh_pid_arg1_0 =
//│ 		  (match _lh_pid_arg1_0 with
//│ 		    | `PS(_lh_pid_PS_0_0, _lh_pid_PS_1_0, _lh_pid_PS_2_0, _lh_pid_PS_3_0, _lh_pid_PS_4_0) -> 
//│ 		      _lh_pid_PS_0_0);;
//│ 		let rec inports_lh__d6 _lh_inports_arg1_0 =
//│ 		  (match _lh_inports_arg1_0 with
//│ 		    | `PS(_lh_inports_PS_0_0, _lh_inports_PS_1_0, _lh_inports_PS_2_0, _lh_inports_PS_3_0, _lh_inports_PS_4_0) -> 
//│ 		      _lh_inports_PS_3_0);;
//│ 		let rec updateOutports_lh__d4 _lh_updateOutports_arg1_0 _lh_updateOutports_arg2_0 =
//│ 		  (`PS((pid_lh__d5 _lh_updateOutports_arg1_0), (compType_lh__d5 _lh_updateOutports_arg1_0), (pathDepth_lh__d9 _lh_updateOutports_arg1_0), (inports_lh__d6 _lh_updateOutports_arg1_0), _lh_updateOutports_arg2_0));;
//│ 		let rec outports_lh__d8 _lh_outports_arg1_0 =
//│ 		  (match _lh_outports_arg1_0 with
//│ 		    | `PS(_lh_outports_PS_0_0, _lh_outports_PS_1_0, _lh_outports_PS_2_0, _lh_outports_PS_3_0, _lh_outports_PS_4_0) -> 
//│ 		      _lh_outports_PS_4_0);;
//│ 		let rec update_outports_lh__d3 _lh_update_outports_arg1_0 _lh_update_outports_arg2_0 =
//│ 		  ((updateOutports_lh__d4 _lh_update_outports_arg1_0) (let rec _lh_listcomp_fun_2 = (fun _lh_listcomp_fun_para_2 -> 
//│ 		    (match _lh_listcomp_fun_para_2 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_2, _lh_listcomp_fun_ls_t_2) -> 
//│ 		        (match _lh_listcomp_fun_ls_h_2 with
//│ 		          | `LH_P6(_lh_update_outports_LH_P6_0_0, _lh_update_outports_LH_P6_1_0, _lh_update_outports_LH_P6_2_0, _lh_update_outports_LH_P6_3_0, _lh_update_outports_LH_P6_4_0, _lh_update_outports_LH_P6_5_0) -> 
//│ 		            (`LH_C((`LH_P6(_lh_update_outports_LH_P6_0_0, _lh_update_outports_arg2_0, _lh_update_outports_LH_P6_2_0, _lh_update_outports_LH_P6_3_0, _lh_update_outports_LH_P6_4_0, _lh_update_outports_LH_P6_5_0)), (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2)))
//│ 		          | _ -> 
//│ 		            (_lh_listcomp_fun_2 _lh_listcomp_fun_ls_t_2))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_2 (outports_lh__d8 _lh_update_outports_arg1_0))));;
//│ 		let rec inports_lh__d4 _lh_inports_arg1_2 =
//│ 		  (match _lh_inports_arg1_2 with
//│ 		    | `PS(_lh_inports_PS_0_2, _lh_inports_PS_1_2, _lh_inports_PS_2_2, _lh_inports_PS_3_2, _lh_inports_PS_4_2) -> 
//│ 		      _lh_inports_PS_3_2);;
//│ 		let rec or2_lh__d1 _lh_or2_arg1_0 _lh_or2_arg2_0 =
//│ 		  (if ((_lh_or2_arg1_0 = (`T)) || (_lh_or2_arg2_0 = (`T))) then
//│ 		    (`T)
//│ 		  else
//│ 		    (`F));;
//│ 		let rec and2_lh__d1 _lh_and2_arg1_0 _lh_and2_arg2_0 =
//│ 		  (if ((_lh_and2_arg1_0 = (`T)) && (_lh_and2_arg2_0 = (`T))) then
//│ 		    (`T)
//│ 		  else
//│ 		    (`F));;
//│ 		let rec inv_lh__d1 _lh_inv_arg1_0 =
//│ 		  (if (_lh_inv_arg1_0 = (`T)) then
//│ 		    (`F)
//│ 		  else
//│ 		    (`T));;
//│ 		let rec xor_lh__d1 _lh_xor_arg1_0 _lh_xor_arg2_0 =
//│ 		  (if (_lh_xor_arg1_0 = _lh_xor_arg2_0) then
//│ 		    (`T)
//│ 		  else
//│ 		    (`F));;
//│ 		let rec apply_component_lh__d1 _lh_apply_component_arg1_0 _lh_apply_component_arg2_0 =
//│ 		  (match _lh_apply_component_arg1_0 with
//│ 		    | `Inp -> 
//│ 		      (`Nothing)
//│ 		    | `Outp -> 
//│ 		      (match _lh_apply_component_arg2_0 with
//│ 		        | `LH_C(_lh_apply_component_LH_C_0_0, _lh_apply_component_LH_C_1_0) -> 
//│ 		          (match _lh_apply_component_LH_C_1_0 with
//│ 		            | `LH_N -> 
//│ 		              (`Just(_lh_apply_component_LH_C_0_0))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | `Dff -> 
//│ 		      (match _lh_apply_component_arg2_0 with
//│ 		        | `LH_C(_lh_apply_component_LH_C_0_1, _lh_apply_component_LH_C_1_1) -> 
//│ 		          (match _lh_apply_component_LH_C_1_1 with
//│ 		            | `LH_N -> 
//│ 		              (`Just(_lh_apply_component_LH_C_0_1))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | `Inv -> 
//│ 		      (match _lh_apply_component_arg2_0 with
//│ 		        | `LH_C(_lh_apply_component_LH_C_0_2, _lh_apply_component_LH_C_1_2) -> 
//│ 		          (match _lh_apply_component_LH_C_1_2 with
//│ 		            | `LH_N -> 
//│ 		              (`Just((inv_lh__d1 _lh_apply_component_LH_C_0_2)))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | `And2 -> 
//│ 		      (match _lh_apply_component_arg2_0 with
//│ 		        | `LH_C(_lh_apply_component_LH_C_0_3, _lh_apply_component_LH_C_1_3) -> 
//│ 		          (match _lh_apply_component_LH_C_1_3 with
//│ 		            | `LH_C(_lh_apply_component_LH_C_0_4, _lh_apply_component_LH_C_1_4) -> 
//│ 		              (match _lh_apply_component_LH_C_1_4 with
//│ 		                | `LH_N -> 
//│ 		                  (`Just(((and2_lh__d1 _lh_apply_component_LH_C_0_3) _lh_apply_component_LH_C_0_4)))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | `Or2 -> 
//│ 		      (match _lh_apply_component_arg2_0 with
//│ 		        | `LH_C(_lh_apply_component_LH_C_0_5, _lh_apply_component_LH_C_1_5) -> 
//│ 		          (match _lh_apply_component_LH_C_1_5 with
//│ 		            | `LH_C(_lh_apply_component_LH_C_0_6, _lh_apply_component_LH_C_1_6) -> 
//│ 		              (match _lh_apply_component_LH_C_1_6 with
//│ 		                | `LH_N -> 
//│ 		                  (`Just(((or2_lh__d1 _lh_apply_component_LH_C_0_5) _lh_apply_component_LH_C_0_6)))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | `Xor -> 
//│ 		      (match _lh_apply_component_arg2_0 with
//│ 		        | `LH_C(_lh_apply_component_LH_C_0_7, _lh_apply_component_LH_C_1_7) -> 
//│ 		          (match _lh_apply_component_LH_C_1_7 with
//│ 		            | `LH_C(_lh_apply_component_LH_C_0_8, _lh_apply_component_LH_C_1_8) -> 
//│ 		              (match _lh_apply_component_LH_C_1_8 with
//│ 		                | `LH_N -> 
//│ 		                  (`Just(((xor_lh__d1 _lh_apply_component_LH_C_0_7) _lh_apply_component_LH_C_0_8)))
//│ 		                | _ -> 
//│ 		                  (failwith "lh_default_error"))
//│ 		            | _ -> 
//│ 		              (failwith "lh_default_error"))
//│ 		        | _ -> 
//│ 		          (failwith "lh_default_error"))
//│ 		    | `None -> 
//│ 		      (`Nothing)
//│ 		    | _ -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec simulate_component_lh__d1 _lh_simulate_component_arg1_0 _lh_simulate_component_arg2_0 =
//│ 		  (let rec out_signals_0 = (let rec _lh_listcomp_fun_9 = (fun _lh_listcomp_fun_para_9 -> 
//│ 		    (match _lh_listcomp_fun_para_9 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_9, _lh_listcomp_fun_ls_t_9) -> 
//│ 		        (match _lh_listcomp_fun_ls_h_9 with
//│ 		          | `LH_P3(_lh_simulate_component_LH_P3_0_0, _lh_simulate_component_LH_P3_1_0, _lh_simulate_component_LH_P3_2_0) -> 
//│ 		            (`LH_C(_lh_simulate_component_LH_P3_2_0, (_lh_listcomp_fun_9 _lh_listcomp_fun_ls_t_9)))
//│ 		          | _ -> 
//│ 		            (_lh_listcomp_fun_9 _lh_listcomp_fun_ls_t_9))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_9 (inports_lh__d4 _lh_simulate_component_arg2_0))) in
//│ 		    (let rec new_value_0 = ((apply_component_lh__d1 (compType_lh__d4 _lh_simulate_component_arg2_0)) out_signals_0) in
//│ 		      (if ((_lh_simulate_component_arg1_0 = (pathDepth_lh__d4 _lh_simulate_component_arg2_0)) && (not (new_value_0 = (`Nothing)))) then
//│ 		        (let rec _lh_matchIdent_1_8 = new_value_0 in
//│ 		          (match _lh_matchIdent_1_8 with
//│ 		            | `Just(_lh_simulate_component_Just_0_0) -> 
//│ 		              ((update_outports_lh__d3 _lh_simulate_component_arg2_0) _lh_simulate_component_Just_0_0)))
//│ 		      else
//│ 		        _lh_simulate_component_arg2_0)));;
//│ 		let rec map_lh__d7 f_1_8 ls_1_8 =
//│ 		  (match ls_1_8 with
//│ 		    | `LH_C(h_1_8, t_1_8) -> 
//│ 		      (`LH_C((f_1_8 h_1_8), ((map_lh__d7 f_1_8) t_1_8)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec simulate_components_lh__d1 _lh_simulate_components_arg1_0 _lh_simulate_components_arg2_0 =
//│ 		  ((map_lh__d7 (simulate_component_lh__d1 _lh_simulate_components_arg1_0)) _lh_simulate_components_arg2_0);;
//│ 		let rec enumFromTo_lh__d4 a_0 b_0 =
//│ 		  (if (a_0 <= b_0) then
//│ 		    (`LH_C(a_0, ((enumFromTo_lh__d4 (a_0 + 1)) b_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec until_lh__d3 _lh_until_arg1_0 _lh_until_arg2_0 _lh_until_arg3_0 =
//│ 		  (if (_lh_until_arg1_0 _lh_until_arg3_0) then
//│ 		    _lh_until_arg3_0
//│ 		  else
//│ 		    (((until_lh__d3 _lh_until_arg1_0) _lh_until_arg2_0) (_lh_until_arg2_0 _lh_until_arg3_0)));;
//│ 		let rec map_lh__d1_d9 f_4 ls_6 =
//│ 		  (match ls_6 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      (`LH_C((f_4 h_6), ((map_lh__d1_d9 f_4) t_6)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec or_lh__d3 _lh_or_arg1_1 =
//│ 		  (match _lh_or_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_or_LH_C_0_1, _lh_or_LH_C_1_1) -> 
//│ 		      (if _lh_or_LH_C_0_1 then
//│ 		        true
//│ 		      else
//│ 		        (or_lh__d3 _lh_or_LH_C_1_1)));;
//│ 		let rec outports_lh__d6 _lh_outports_arg1_2 =
//│ 		  (match _lh_outports_arg1_2 with
//│ 		    | `PS(_lh_outports_PS_0_2, _lh_outports_PS_1_2, _lh_outports_PS_2_2, _lh_outports_PS_3_2, _lh_outports_PS_4_2) -> 
//│ 		      _lh_outports_PS_4_2);;
//│ 		let rec or_lh__d4 _lh_or_arg1_0 =
//│ 		  (match _lh_or_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_or_LH_C_0_0, _lh_or_LH_C_1_0) -> 
//│ 		      (if _lh_or_LH_C_0_0 then
//│ 		        true
//│ 		      else
//│ 		        (or_lh__d4 _lh_or_LH_C_1_0)));;
//│ 		let rec map_lh__d1_d8 f_5 ls_7 =
//│ 		  (match ls_7 with
//│ 		    | `LH_C(h_7, t_7) -> 
//│ 		      (`LH_C((f_5 h_7), ((map_lh__d1_d8 f_5) t_7)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec update_requests_lh__d2 _lh_update_requests_arg1_0 _lh_update_requests_arg2_0 =
//│ 		  ((updateOutports_lh__d4 _lh_update_requests_arg2_0) (let rec _lh_listcomp_fun_0 = (fun _lh_listcomp_fun_para_0 -> 
//│ 		    (match _lh_listcomp_fun_para_0 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_0, _lh_listcomp_fun_ls_t_0) -> 
//│ 		        (match _lh_listcomp_fun_ls_h_0 with
//│ 		          | `LH_P6(_lh_update_requests_LH_P6_0_0, _lh_update_requests_LH_P6_1_0, _lh_update_requests_LH_P6_2_0, _lh_update_requests_LH_P6_3_0, _lh_update_requests_LH_P6_4_0, _lh_update_requests_LH_P6_5_0) -> 
//│ 		            (`LH_C((`LH_P6(_lh_update_requests_LH_P6_0_0, _lh_update_requests_LH_P6_1_0, _lh_update_requests_arg1_0, _lh_update_requests_LH_P6_3_0, _lh_update_requests_arg1_0, _lh_update_requests_LH_P6_5_0)), (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0)))
//│ 		          | _ -> 
//│ 		            (_lh_listcomp_fun_0 _lh_listcomp_fun_ls_t_0))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_0 (outports_lh__d8 _lh_update_requests_arg2_0))));;
//│ 		let rec check_depth_lh__d4 _lh_check_depth_arg1_0 _lh_check_depth_arg2_0 =
//│ 		  (if ((pathDepth_lh__d9 _lh_check_depth_arg2_0) = _lh_check_depth_arg1_0) then
//│ 		    _lh_check_depth_arg2_0
//│ 		  else
//│ 		    ((update_requests_lh__d2 false) _lh_check_depth_arg2_0));;
//│ 		let rec map_lh__d1_d7 f_6 ls_8 =
//│ 		  (match ls_8 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      (`LH_C((f_6 h_8), ((map_lh__d1_d7 f_6) t_8)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec acknowledge_lh__d2 _lh_acknowledge_arg1_0 _lh_acknowledge_arg2_0 =
//│ 		  let rec check_lr_requests_0 = (fun _lh_check_lr_requests_arg1_0 -> 
//│ 		    (match _lh_check_lr_requests_arg1_0 with
//│ 		      | `LH_P6(_lh_check_lr_requests_LH_P6_0_0, _lh_check_lr_requests_LH_P6_1_0, _lh_check_lr_requests_LH_P6_2_0, _lh_check_lr_requests_LH_P6_3_0, _lh_check_lr_requests_LH_P6_4_0, _lh_check_lr_requests_LH_P6_5_0) -> 
//│ 		        (_lh_check_lr_requests_LH_P6_2_0 || _lh_check_lr_requests_LH_P6_4_0)))
//│ 		  and check_requests_0 = (fun _lh_check_requests_arg1_0 -> 
//│ 		    (or_lh__d3 ((map_lh__d1_d7 check_lr_requests_0) _lh_check_requests_arg1_0)))
//│ 		  in (let rec states1_0 = ((map_lh__d1_d8 (check_depth_lh__d4 _lh_acknowledge_arg1_0)) _lh_acknowledge_arg2_0) in
//│ 		    (not (or_lh__d4 ((map_lh__d1_d9 (fun _lh_funcomp_x_0 -> 
//│ 		      (check_requests_0 (outports_lh__d6 _lh_funcomp_x_0)))) states1_0))));;
//│ 		let rec foldr_lh__d1 f_2 i_0 ls_5 =
//│ 		  (match ls_5 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      ((f_2 h_5) (((foldr_lh__d1 f_2) i_0) t_5))
//│ 		    | `LH_N -> 
//│ 		      i_0);;
//│ 		let rec unzip_lh__d2 _lh_unzip_arg1_0 =
//│ 		  (((foldr_lh__d1 (fun ab_0 asbs_0 -> 
//│ 		    (let rec _lh_matchIdent_8 = ab_0 in
//│ 		      (match _lh_matchIdent_8 with
//│ 		        | `LH_P2(_lh_unzip_LH_P2_0_0, _lh_unzip_LH_P2_1_0) -> 
//│ 		          (let rec _lh_matchIdent_9 = asbs_0 in
//│ 		            (match _lh_matchIdent_9 with
//│ 		              | `LH_P2(_lh_unzip_LH_P2_0_1, _lh_unzip_LH_P2_1_1) -> 
//│ 		                (`LH_P2((`LH_C(_lh_unzip_LH_P2_0_0, _lh_unzip_LH_P2_0_1)), (`LH_C(_lh_unzip_LH_P2_1_0, _lh_unzip_LH_P2_1_1)))))))))) (`LH_P2((`LH_N), (`LH_N)))) _lh_unzip_arg1_0);;
//│ 		let rec combine_lh__d2 _lh_combine_arg1_0 _lh_combine_arg2_0 _lh_combine_arg3_0 _lh_combine_arg4_0 =
//│ 		  (`LH_C((`LH_C(_lh_combine_arg1_0, _lh_combine_arg2_0)), (transpose_lh__d2 (`LH_C(_lh_combine_arg3_0, _lh_combine_arg4_0)))))
//│ 		and
//│ 		transpose_lh__d2 _lh_transpose_arg1_2 =
//│ 		  (match _lh_transpose_arg1_2 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_transpose_LH_C_0_6, _lh_transpose_LH_C_1_6) -> 
//│ 		      (match _lh_transpose_LH_C_0_6 with
//│ 		        | `LH_N -> 
//│ 		          (transpose_lh__d2 _lh_transpose_LH_C_1_6)
//│ 		        | `LH_C(_lh_transpose_LH_C_0_7, _lh_transpose_LH_C_1_7) -> 
//│ 		          (let rec _lh_matchIdent_1_6 = (unzip_lh__d2 (let rec _lh_listcomp_fun_6 = (fun _lh_listcomp_fun_para_6 -> 
//│ 		            (match _lh_listcomp_fun_para_6 with
//│ 		              | `LH_C(_lh_listcomp_fun_ls_h_6, _lh_listcomp_fun_ls_t_6) -> 
//│ 		                (match _lh_listcomp_fun_ls_h_6 with
//│ 		                  | `LH_C(_lh_transpose_LH_C_0_8, _lh_transpose_LH_C_1_8) -> 
//│ 		                    (`LH_C((`LH_P2(_lh_transpose_LH_C_0_8, _lh_transpose_LH_C_1_8)), (_lh_listcomp_fun_6 _lh_listcomp_fun_ls_t_6)))
//│ 		                  | _ -> 
//│ 		                    (_lh_listcomp_fun_6 _lh_listcomp_fun_ls_t_6))
//│ 		              | `LH_N -> 
//│ 		                (`LH_N))) in
//│ 		            (_lh_listcomp_fun_6 _lh_transpose_LH_C_1_6))) in
//│ 		            (match _lh_matchIdent_1_6 with
//│ 		              | `LH_P2(_lh_transpose_LH_P2_0_2, _lh_transpose_LH_P2_1_2) -> 
//│ 		                ((((combine_lh__d2 _lh_transpose_LH_C_0_7) _lh_transpose_LH_P2_0_2) _lh_transpose_LH_C_1_7) _lh_transpose_LH_P2_1_2)))));;
//│ 		let rec transpose_lh__d3 _lh_transpose_arg1_1 =
//│ 		  (match _lh_transpose_arg1_1 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_transpose_LH_C_0_3, _lh_transpose_LH_C_1_3) -> 
//│ 		      (match _lh_transpose_LH_C_0_3 with
//│ 		        | `LH_N -> 
//│ 		          (transpose_lh__d3 _lh_transpose_LH_C_1_3)
//│ 		        | `LH_C(_lh_transpose_LH_C_0_4, _lh_transpose_LH_C_1_4) -> 
//│ 		          (let rec _lh_matchIdent_1_5 = (unzip_lh__d2 (let rec _lh_listcomp_fun_5 = (fun _lh_listcomp_fun_para_5 -> 
//│ 		            (match _lh_listcomp_fun_para_5 with
//│ 		              | `LH_C(_lh_listcomp_fun_ls_h_5, _lh_listcomp_fun_ls_t_5) -> 
//│ 		                (match _lh_listcomp_fun_ls_h_5 with
//│ 		                  | `LH_C(_lh_transpose_LH_C_0_5, _lh_transpose_LH_C_1_5) -> 
//│ 		                    (`LH_C((`LH_P2(_lh_transpose_LH_C_0_5, _lh_transpose_LH_C_1_5)), (_lh_listcomp_fun_5 _lh_listcomp_fun_ls_t_5)))
//│ 		                  | _ -> 
//│ 		                    (_lh_listcomp_fun_5 _lh_listcomp_fun_ls_t_5))
//│ 		              | `LH_N -> 
//│ 		                (`LH_N))) in
//│ 		            (_lh_listcomp_fun_5 _lh_transpose_LH_C_1_3))) in
//│ 		            (match _lh_matchIdent_1_5 with
//│ 		              | `LH_P2(_lh_transpose_LH_P2_0_1, _lh_transpose_LH_P2_1_1) -> 
//│ 		                ((((combine_lh__d2 _lh_transpose_LH_C_0_4) _lh_transpose_LH_P2_0_1) _lh_transpose_LH_C_1_4) _lh_transpose_LH_P2_1_1)))));;
//│ 		let rec map_lh__d1_d5 f_8 ls_1_0 =
//│ 		  (match ls_1_0 with
//│ 		    | `LH_C(h_1_0, t_1_0) -> 
//│ 		      (`LH_C((f_8 h_1_0), ((map_lh__d1_d5 f_8) t_1_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec snd_lh__d2 _lh_snd_arg1_0 =
//│ 		  (match _lh_snd_arg1_0 with
//│ 		    | `LH_P2(_lh_snd_LH_P2_0_0, _lh_snd_LH_P2_1_0) -> 
//│ 		      _lh_snd_LH_P2_1_0);;
//│ 		let rec transpose_lh__d4 _lh_transpose_arg1_0 =
//│ 		  (match _lh_transpose_arg1_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_transpose_LH_C_0_0, _lh_transpose_LH_C_1_0) -> 
//│ 		      (match _lh_transpose_LH_C_0_0 with
//│ 		        | `LH_N -> 
//│ 		          (transpose_lh__d4 _lh_transpose_LH_C_1_0)
//│ 		        | `LH_C(_lh_transpose_LH_C_0_1, _lh_transpose_LH_C_1_1) -> 
//│ 		          (let rec _lh_matchIdent_1_4 = (unzip_lh__d2 (let rec _lh_listcomp_fun_3 = (fun _lh_listcomp_fun_para_3 -> 
//│ 		            (match _lh_listcomp_fun_para_3 with
//│ 		              | `LH_C(_lh_listcomp_fun_ls_h_3, _lh_listcomp_fun_ls_t_3) -> 
//│ 		                (match _lh_listcomp_fun_ls_h_3 with
//│ 		                  | `LH_C(_lh_transpose_LH_C_0_2, _lh_transpose_LH_C_1_2) -> 
//│ 		                    (`LH_C((`LH_P2(_lh_transpose_LH_C_0_2, _lh_transpose_LH_C_1_2)), (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3)))
//│ 		                  | _ -> 
//│ 		                    (_lh_listcomp_fun_3 _lh_listcomp_fun_ls_t_3))
//│ 		              | `LH_N -> 
//│ 		                (`LH_N))) in
//│ 		            (_lh_listcomp_fun_3 _lh_transpose_LH_C_1_0))) in
//│ 		            (match _lh_matchIdent_1_4 with
//│ 		              | `LH_P2(_lh_transpose_LH_P2_0_0, _lh_transpose_LH_P2_1_0) -> 
//│ 		                ((((combine_lh__d2 _lh_transpose_LH_C_0_1) _lh_transpose_LH_P2_0_0) _lh_transpose_LH_C_1_1) _lh_transpose_LH_P2_1_0)))));;
//│ 		let rec check_right_lh__d1 _lh_check_right_arg1_0 _lh_check_right_arg2_0 =
//│ 		  (match _lh_check_right_arg1_0 with
//│ 		    | `LH_P8(_lh_check_right_LH_P8_0_0, _lh_check_right_LH_P8_1_0, _lh_check_right_LH_P8_2_0, _lh_check_right_LH_P8_3_0, _lh_check_right_LH_P8_4_0, _lh_check_right_LH_P8_5_0, _lh_check_right_LH_P8_6_0, _lh_check_right_LH_P8_7_0) -> 
//│ 		      (match _lh_check_right_arg2_0 with
//│ 		        | `LH_P6(_lh_check_right_LH_P6_0_0, _lh_check_right_LH_P6_1_0, _lh_check_right_LH_P6_2_0, _lh_check_right_LH_P6_3_0, _lh_check_right_LH_P6_4_0, _lh_check_right_LH_P6_5_0) -> 
//│ 		          (if (_lh_check_right_LH_P8_3_0 && (_lh_check_right_LH_P8_4_0 > 0)) then
//│ 		            (`LH_P6(_lh_check_right_LH_P6_0_0, _lh_check_right_LH_P6_1_0, _lh_check_right_LH_P6_2_0, _lh_check_right_LH_P6_3_0, _lh_check_right_LH_P6_4_0, _lh_check_right_LH_P6_5_0))
//│ 		          else
//│ 		            (`LH_P6(_lh_check_right_LH_P6_0_0, _lh_check_right_LH_P6_1_0, false, _lh_check_right_LH_P6_3_0, _lh_check_right_LH_P6_4_0, _lh_check_right_LH_P6_5_0)))));;
//│ 		let rec check_left_lh__d1 _lh_check_left_arg1_0 _lh_check_left_arg2_0 =
//│ 		  (match _lh_check_left_arg1_0 with
//│ 		    | `LH_P8(_lh_check_left_LH_P8_0_0, _lh_check_left_LH_P8_1_0, _lh_check_left_LH_P8_2_0, _lh_check_left_LH_P8_3_0, _lh_check_left_LH_P8_4_0, _lh_check_left_LH_P8_5_0, _lh_check_left_LH_P8_6_0, _lh_check_left_LH_P8_7_0) -> 
//│ 		      (match _lh_check_left_arg2_0 with
//│ 		        | `LH_P6(_lh_check_left_LH_P6_0_0, _lh_check_left_LH_P6_1_0, _lh_check_left_LH_P6_2_0, _lh_check_left_LH_P6_3_0, _lh_check_left_LH_P6_4_0, _lh_check_left_LH_P6_5_0) -> 
//│ 		          (if (_lh_check_left_LH_P8_5_0 && (_lh_check_left_LH_P8_6_0 > 0)) then
//│ 		            (`LH_P6(_lh_check_left_LH_P6_0_0, _lh_check_left_LH_P6_1_0, _lh_check_left_LH_P6_2_0, _lh_check_left_LH_P6_3_0, _lh_check_left_LH_P6_4_0, _lh_check_left_LH_P6_5_0))
//│ 		          else
//│ 		            (`LH_P6(_lh_check_left_LH_P6_0_0, _lh_check_left_LH_P6_1_0, _lh_check_left_LH_P6_2_0, _lh_check_left_LH_P6_3_0, false, _lh_check_left_LH_P6_5_0)))));;
//│ 		let rec update_o_lh__d1 _lh_update_o_arg1_0 _lh_update_o_arg2_0 =
//│ 		  (match _lh_update_o_arg1_0 with
//│ 		    | `LH_P2(_lh_update_o_LH_P2_0_0, _lh_update_o_LH_P2_1_0) -> 
//│ 		      ((check_left_lh__d1 _lh_update_o_LH_P2_0_0) ((check_right_lh__d1 _lh_update_o_LH_P2_1_0) _lh_update_o_arg2_0)));;
//│ 		let rec updateInports_lh__d1 _lh_updateInports_arg1_0 _lh_updateInports_arg2_0 =
//│ 		  (`PS((pid_lh__d5 _lh_updateInports_arg1_0), (compType_lh__d5 _lh_updateInports_arg1_0), (pathDepth_lh__d9 _lh_updateInports_arg1_0), _lh_updateInports_arg2_0, (outports_lh__d8 _lh_updateInports_arg1_0)));;
//│ 		let rec map_lh__d2_d1 f_0 ls_2 =
//│ 		  (match ls_2 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C((f_0 h_2), ((map_lh__d2_d1 f_0) t_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec compare_and_update_lh__d1 _lh_compare_and_update_arg1_0 _lh_compare_and_update_arg2_0 =
//│ 		  (match _lh_compare_and_update_arg1_0 with
//│ 		    | `LH_P3(_lh_compare_and_update_LH_P3_0_0, _lh_compare_and_update_LH_P3_1_0, _lh_compare_and_update_LH_P3_2_0) -> 
//│ 		      (match _lh_compare_and_update_arg2_0 with
//│ 		        | `LH_P3(_lh_compare_and_update_LH_P3_0_1, _lh_compare_and_update_LH_P3_1_1, _lh_compare_and_update_LH_P3_2_1) -> 
//│ 		          (if ((`LH_P2(_lh_compare_and_update_LH_P3_0_0, _lh_compare_and_update_LH_P3_1_0)) = (`LH_P2(_lh_compare_and_update_LH_P3_0_1, _lh_compare_and_update_LH_P3_1_1))) then
//│ 		            (`LH_P3(_lh_compare_and_update_LH_P3_0_1, _lh_compare_and_update_LH_P3_1_1, _lh_compare_and_update_LH_P3_2_0))
//│ 		          else
//│ 		            (`LH_P3(_lh_compare_and_update_LH_P3_0_1, _lh_compare_and_update_LH_P3_1_1, _lh_compare_and_update_LH_P3_2_1)))));;
//│ 		let rec up_i_lh__d1 _lh_up_i_arg1_0 _lh_up_i_arg2_0 =
//│ 		  (match _lh_up_i_arg1_0 with
//│ 		    | `LH_P8(_lh_up_i_LH_P8_0_0, _lh_up_i_LH_P8_1_0, _lh_up_i_LH_P8_2_0, _lh_up_i_LH_P8_3_0, _lh_up_i_LH_P8_4_0, _lh_up_i_LH_P8_5_0, _lh_up_i_LH_P8_6_0, _lh_up_i_LH_P8_7_0) -> 
//│ 		      ((map_lh__d2_d1 (compare_and_update_lh__d1 (`LH_P3(_lh_up_i_LH_P8_0_0, _lh_up_i_LH_P8_1_0, _lh_up_i_LH_P8_2_0)))) _lh_up_i_arg2_0));;
//│ 		let rec update_i_lh__d1 _lh_update_i_arg1_0 _lh_update_i_arg2_0 =
//│ 		  (match _lh_update_i_arg1_0 with
//│ 		    | `LH_P2(_lh_update_i_LH_P2_0_0, _lh_update_i_LH_P2_1_0) -> 
//│ 		      ((up_i_lh__d1 _lh_update_i_LH_P2_0_0) ((up_i_lh__d1 _lh_update_i_LH_P2_1_0) _lh_update_i_arg2_0)));;
//│ 		let rec zipWith_lh__d5 f_3 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(hx_0, tx_0) -> 
//│ 		      (match ys_0 with
//│ 		        | `LH_C(hy_0, ty_0) -> 
//│ 		          (`LH_C(((f_3 hx_0) hy_0), (((zipWith_lh__d5 f_3) tx_0) ty_0)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec update_io_lh__d2 _lh_update_io_arg1_0 _lh_update_io_arg2_0 _lh_update_io_arg3_0 =
//│ 		  (let rec update_is_0 = (fun state_0 -> 
//│ 		    ((updateInports_lh__d1 state_0) (((foldr_lh__d1 update_i_lh__d1) (inports_lh__d6 state_0)) _lh_update_io_arg2_0))) in
//│ 		    (let rec update_os_0 = (fun state_1 -> 
//│ 		      (if ((pathDepth_lh__d9 state_1) = _lh_update_io_arg1_0) then
//│ 		        ((updateOutports_lh__d4 state_1) (((zipWith_lh__d5 update_o_lh__d1) _lh_update_io_arg2_0) (outports_lh__d8 state_1)))
//│ 		      else
//│ 		        state_1)) in
//│ 		      (update_os_0 (update_is_0 _lh_update_io_arg3_0))));;
//│ 		let rec map_lh__d1_d4 f_9 ls_1_1 =
//│ 		  (match ls_1_1 with
//│ 		    | `LH_C(h_1_1, t_1_1) -> 
//│ 		      (`LH_C((f_9 h_1_1), ((map_lh__d1_d4 f_9) t_1_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec check_depth_lh__d3 _lh_check_depth_arg1_1 _lh_check_depth_arg2_1 =
//│ 		  (if ((pathDepth_lh__d9 _lh_check_depth_arg2_1) = _lh_check_depth_arg1_1) then
//│ 		    _lh_check_depth_arg2_1
//│ 		  else
//│ 		    ((update_requests_lh__d2 false) _lh_check_depth_arg2_1));;
//│ 		let rec make_packet_lh__d2 _lh_make_packet_arg1_0 =
//│ 		  (let rec _lh_listcomp_fun_4 = (fun _lh_listcomp_fun_para_4 -> 
//│ 		    (match _lh_listcomp_fun_para_4 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_4, _lh_listcomp_fun_ls_t_4) -> 
//│ 		        (match _lh_listcomp_fun_ls_h_4 with
//│ 		          | `LH_P6(_lh_make_packet_LH_P6_0_0, _lh_make_packet_LH_P6_1_0, _lh_make_packet_LH_P6_2_0, _lh_make_packet_LH_P6_3_0, _lh_make_packet_LH_P6_4_0, _lh_make_packet_LH_P6_5_0) -> 
//│ 		            (`LH_C((`LH_P8((pid_lh__d5 _lh_make_packet_arg1_0), _lh_make_packet_LH_P6_0_0, _lh_make_packet_LH_P6_1_0, _lh_make_packet_LH_P6_2_0, _lh_make_packet_LH_P6_3_0, _lh_make_packet_LH_P6_4_0, _lh_make_packet_LH_P6_5_0, 1)), (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4)))
//│ 		          | _ -> 
//│ 		            (_lh_listcomp_fun_4 _lh_listcomp_fun_ls_t_4))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_4 (outports_lh__d8 _lh_make_packet_arg1_0)));;
//│ 		let rec zipWith_lh__d4 f_1_0 xs_2 ys_1 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(hx_1, tx_1) -> 
//│ 		      (match ys_1 with
//│ 		        | `LH_C(hy_1, ty_1) -> 
//│ 		          (`LH_C(((f_1_0 hx_1) hy_1), (((zipWith_lh__d4 f_1_0) tx_1) ty_1)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec emptyPacket_lh__d5 =
//│ 		  (`LH_P8((0 - 1), (0 - 1), (`F), false, 0, false, 0, 1));;
//│ 		let rec append__lz_lh__d2 _lh_append__lz_arg1_0 _lh_append__lz_arg2_0 =
//│ 		  (let rec _lh_matchIdent_1_1 = _lh_append__lz_arg1_0 in
//│ 		    (match _lh_matchIdent_1_1 with
//│ 		      | `LH_N -> 
//│ 		        _lh_append__lz_arg2_0
//│ 		      | `LH_C(_lh_append__lz_LH_C_0_0, _lh_append__lz_LH_C_1_0) -> 
//│ 		        (lazy (`LH_C(_lh_append__lz_LH_C_0_0, ((append__lz_lh__d2 _lh_append__lz_LH_C_1_0) _lh_append__lz_arg2_0))))));;
//│ 		let rec length_lh__d1 ls_1 =
//│ 		  (match ls_1 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (1 + (length_lh__d1 t_1))
//│ 		    | `LH_N -> 
//│ 		      0);;
//│ 		let rec take_lz_lh__d2 n_1 ls_3 =
//│ 		  (if (n_1 > 0) then
//│ 		    (match (Lazy.force ls_3) with
//│ 		      | `LH_C(h_3, t_3) -> 
//│ 		        (`LH_C(h_3, ((take_lz_lh__d2 (n_1 - 1)) t_3)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec copy_lz_lh__d2 _lh_copy_lz_arg1_0 _lh_copy_lz_arg2_0 =
//│ 		  (if (_lh_copy_lz_arg1_0 > 0) then
//│ 		    (lazy (`LH_C(_lh_copy_lz_arg2_0, ((copy_lz_lh__d2 (_lh_copy_lz_arg1_0 - 1)) _lh_copy_lz_arg2_0))))
//│ 		  else
//│ 		    (lazy (`LH_N)));;
//│ 		let rec maximum_lh__d2 _lh_maximum_arg1_0 =
//│ 		  (match _lh_maximum_arg1_0 with
//│ 		    | `LH_C(_lh_maximum_LH_C_0_0, _lh_maximum_LH_C_1_0) -> 
//│ 		      (let rec go_0 = (fun _lh_go_arg1_0 _lh_go_arg2_0 -> 
//│ 		        (match _lh_go_arg2_0 with
//│ 		          | `LH_N -> 
//│ 		            _lh_go_arg1_0
//│ 		          | `LH_C(_lh_go_LH_C_0_0, _lh_go_LH_C_1_0) -> 
//│ 		            (if (_lh_go_arg1_0 > _lh_go_LH_C_0_0) then
//│ 		              ((go_0 _lh_go_arg1_0) _lh_go_LH_C_1_0)
//│ 		            else
//│ 		              ((go_0 _lh_go_LH_C_0_0) _lh_go_LH_C_1_0)))) in
//│ 		        ((go_0 _lh_maximum_LH_C_0_0) _lh_maximum_LH_C_1_0))
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec pad_packets_lh__d2 _lh_pad_packets_arg1_0 =
//│ 		  (let rec pad_0 = (fun xs_1 -> 
//│ 		    (let rec max_ps_0 = (maximum_lh__d2 ((map_lh__d2_d1 length_lh__d1) _lh_pad_packets_arg1_0)) in
//│ 		      ((take_lz_lh__d2 max_ps_0) ((append__lz_lh__d2 xs_1) ((copy_lz_lh__d2 max_ps_0) emptyPacket_lh__d5))))) in
//│ 		    ((map_lh__d2_d1 pad_0) _lh_pad_packets_arg1_0));;
//│ 		let rec send_left_lh__d2 _lh_send_left_arg1_0 _lh_send_left_arg2_0 =
//│ 		  (match _lh_send_left_arg1_0 with
//│ 		    | `LH_P8(_lh_send_left_LH_P8_0_0, _lh_send_left_LH_P8_1_0, _lh_send_left_LH_P8_2_0, _lh_send_left_LH_P8_3_0, _lh_send_left_LH_P8_4_0, _lh_send_left_LH_P8_5_0, _lh_send_left_LH_P8_6_0, _lh_send_left_LH_P8_7_0) -> 
//│ 		      (match _lh_send_left_arg2_0 with
//│ 		        | `LH_P8(_lh_send_left_LH_P8_0_1, _lh_send_left_LH_P8_1_1, _lh_send_left_LH_P8_2_1, _lh_send_left_LH_P8_3_1, _lh_send_left_LH_P8_4_1, _lh_send_left_LH_P8_5_1, _lh_send_left_LH_P8_6_1, _lh_send_left_LH_P8_7_1) -> 
//│ 		          (if (_lh_send_left_LH_P8_3_1 && (_lh_send_left_LH_P8_4_1 > _lh_send_left_LH_P8_7_0)) then
//│ 		            (`LH_P8(_lh_send_left_LH_P8_0_1, _lh_send_left_LH_P8_1_1, _lh_send_left_LH_P8_2_1, _lh_send_left_LH_P8_3_1, (_lh_send_left_LH_P8_4_1 - _lh_send_left_LH_P8_7_0), _lh_send_left_LH_P8_5_1, _lh_send_left_LH_P8_6_1, (_lh_send_left_LH_P8_7_0 + _lh_send_left_LH_P8_7_1)))
//│ 		          else
//│ 		            (`LH_P8(_lh_send_left_LH_P8_0_0, _lh_send_left_LH_P8_1_0, _lh_send_left_LH_P8_2_0, _lh_send_left_LH_P8_3_0, _lh_send_left_LH_P8_4_0, _lh_send_left_LH_P8_5_0, _lh_send_left_LH_P8_6_0, (_lh_send_left_LH_P8_7_0 + _lh_send_left_LH_P8_7_1))))));;
//│ 		let rec mappend_lh__d3 xs_8 ys_6 =
//│ 		  (match xs_8 with
//│ 		    | `LH_C(h_2_8, t_2_8) -> 
//│ 		      (`LH_C(h_2_8, ((mappend_lh__d3 t_2_8) ys_6)))
//│ 		    | `LH_N -> 
//│ 		      ys_6);;
//│ 		let rec get_lh__d1 _lh_get_arg1_0 =
//│ 		  (match _lh_get_arg1_0 with
//│ 		    | `Cell(_lh_get_Cell_0_0) -> 
//│ 		      (`LH_C(_lh_get_Cell_0_0, (`LH_N)))
//│ 		    | `Node(_lh_get_Node_0_0, _lh_get_Node_1_0, _lh_get_Node_2_0) -> 
//│ 		      ((mappend_lh__d3 (get_lh__d1 _lh_get_Node_1_0)) (get_lh__d1 _lh_get_Node_2_0)));;
//│ 		let rec take_lh__d1 n_0 ls_0 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match ls_0 with
//│ 		      | `LH_C(h_0, t_0) -> 
//│ 		        (`LH_C(h_0, ((take_lh__d1 (n_0 - 1)) t_0)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec drop_lh__d1 _lh_drop_arg1_0 _lh_drop_arg2_0 =
//│ 		  (match _lh_drop_arg2_0 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0) -> 
//│ 		      (if (_lh_drop_arg1_0 <= 0) then
//│ 		        (`LH_C(_lh_drop_LH_C_0_0, _lh_drop_LH_C_1_0))
//│ 		      else
//│ 		        ((drop_lh__d1 (_lh_drop_arg1_0 - 1)) _lh_drop_LH_C_1_0)));;
//│ 		let rec splitAt_lh__d1 _lh_splitAt_arg1_0 _lh_splitAt_arg2_0 =
//│ 		  (`LH_P2(((take_lh__d1 _lh_splitAt_arg1_0) _lh_splitAt_arg2_0), ((drop_lh__d1 _lh_splitAt_arg1_0) _lh_splitAt_arg2_0)));;
//│ 		let rec put_lh__d1 _lh_put_arg1_0 =
//│ 		  (match _lh_put_arg1_0 with
//│ 		    | `LH_C(_lh_put_LH_C_0_0, _lh_put_LH_C_1_0) -> 
//│ 		      (match _lh_put_LH_C_1_0 with
//│ 		        | `LH_N -> 
//│ 		          (`Cell(_lh_put_LH_C_0_0))
//│ 		        | _ -> 
//│ 		          (let rec _lh_matchIdent_5 = ((splitAt_lh__d1 ((length_lh__d1 _lh_put_arg1_0) / 2)) _lh_put_arg1_0) in
//│ 		            (match _lh_matchIdent_5 with
//│ 		              | `LH_P2(_lh_put_LH_P2_0_0, _lh_put_LH_P2_1_0) -> 
//│ 		                (`Node((`Unit), (put_lh__d1 _lh_put_LH_P2_0_0), (put_lh__d1 _lh_put_LH_P2_1_0))))))
//│ 		    | _ -> 
//│ 		      (let rec _lh_matchIdent_6 = ((splitAt_lh__d1 ((length_lh__d1 _lh_put_arg1_0) / 2)) _lh_put_arg1_0) in
//│ 		        (match _lh_matchIdent_6 with
//│ 		          | `LH_P2(_lh_put_LH_P2_0_1, _lh_put_LH_P2_1_1) -> 
//│ 		            (`Node((`Unit), (put_lh__d1 _lh_put_LH_P2_0_1), (put_lh__d1 _lh_put_LH_P2_1_1))))));;
//│ 		let rec upsweep_lh__d1 _lh_upsweep_arg1_0 _lh_upsweep_arg2_0 =
//│ 		  (match _lh_upsweep_arg2_0 with
//│ 		    | `Cell(_lh_upsweep_Cell_0_0) -> 
//│ 		      (`LH_P2(_lh_upsweep_Cell_0_0, (`Cell(_lh_upsweep_Cell_0_0))))
//│ 		    | `Node(_lh_upsweep_Node_0_0, _lh_upsweep_Node_1_0, _lh_upsweep_Node_2_0) -> 
//│ 		      (let rec _lh_matchIdent_0 = ((upsweep_lh__d1 _lh_upsweep_arg1_0) _lh_upsweep_Node_1_0) in
//│ 		        (match _lh_matchIdent_0 with
//│ 		          | `LH_P2(_lh_upsweep_LH_P2_0_0, _lh_upsweep_LH_P2_1_0) -> 
//│ 		            (let rec _lh_matchIdent_1 = ((upsweep_lh__d1 _lh_upsweep_arg1_0) _lh_upsweep_Node_2_0) in
//│ 		              (match _lh_matchIdent_1 with
//│ 		                | `LH_P2(_lh_upsweep_LH_P2_0_1, _lh_upsweep_LH_P2_1_1) -> 
//│ 		                  (`LH_P2(((_lh_upsweep_arg1_0 _lh_upsweep_LH_P2_0_0) _lh_upsweep_LH_P2_0_1), (`Node((`LH_P2(_lh_upsweep_LH_P2_0_0, _lh_upsweep_LH_P2_0_1)), _lh_upsweep_LH_P2_1_0, _lh_upsweep_LH_P2_1_1)))))))));;
//│ 		let rec downsweep_lh__d1 _lh_downsweep_arg1_0 _lh_downsweep_arg2_0 _lh_downsweep_arg3_0 =
//│ 		  (match _lh_downsweep_arg3_0 with
//│ 		    | `Cell(_lh_downsweep_Cell_0_0) -> 
//│ 		      (`Cell(_lh_downsweep_arg2_0))
//│ 		    | `Node(_lh_downsweep_Node_0_0, _lh_downsweep_Node_1_0, _lh_downsweep_Node_2_0) -> 
//│ 		      (match _lh_downsweep_Node_0_0 with
//│ 		        | `LH_P2(_lh_downsweep_LH_P2_0_0, _lh_downsweep_LH_P2_1_0) -> 
//│ 		          (let rec _lh_matchIdent_2 = (((_lh_downsweep_arg1_0 _lh_downsweep_LH_P2_0_0) _lh_downsweep_LH_P2_1_0) _lh_downsweep_arg2_0) in
//│ 		            (match _lh_matchIdent_2 with
//│ 		              | `LH_P2(_lh_downsweep_LH_P2_0_1, _lh_downsweep_LH_P2_1_1) -> 
//│ 		                (let rec _lh_matchIdent_3 = (`LH_P2((((downsweep_lh__d1 _lh_downsweep_arg1_0) _lh_downsweep_LH_P2_0_1) _lh_downsweep_Node_1_0), (((downsweep_lh__d1 _lh_downsweep_arg1_0) _lh_downsweep_LH_P2_1_1) _lh_downsweep_Node_2_0))) in
//│ 		                  (match _lh_matchIdent_3 with
//│ 		                    | `LH_P2(_lh_downsweep_LH_P2_0_2, _lh_downsweep_LH_P2_1_2) -> 
//│ 		                      (`Node((`Unit), _lh_downsweep_LH_P2_0_2, _lh_downsweep_LH_P2_1_2))))))));;
//│ 		let rec sweep_ud_lh__d1 _lh_sweep_ud_arg1_0 _lh_sweep_ud_arg2_0 _lh_sweep_ud_arg3_0 _lh_sweep_ud_arg4_0 =
//│ 		  (let rec _lh_matchIdent_4 = ((upsweep_lh__d1 _lh_sweep_ud_arg1_0) _lh_sweep_ud_arg4_0) in
//│ 		    (match _lh_matchIdent_4 with
//│ 		      | `LH_P2(_lh_sweep_ud_LH_P2_0_0, _lh_sweep_ud_LH_P2_1_0) -> 
//│ 		        (`LH_P2(_lh_sweep_ud_LH_P2_0_0, (((downsweep_lh__d1 _lh_sweep_ud_arg2_0) _lh_sweep_ud_arg3_0) _lh_sweep_ud_LH_P2_1_0)))));;
//│ 		let rec scanlr_lh__d2 _lh_scanlr_arg1_0 _lh_scanlr_arg2_0 _lh_scanlr_arg3_0 _lh_scanlr_arg4_0 _lh_scanlr_arg5_0 =
//│ 		  let rec down_0 = (fun _lh_down_arg1_0 _lh_down_arg2_0 _lh_down_arg3_0 _lh_down_arg4_0 _lh_down_arg5_0 -> 
//│ 		    (match _lh_down_arg3_0 with
//│ 		      | `LH_P2(_lh_down_LH_P2_0_0, _lh_down_LH_P2_1_0) -> 
//│ 		        (match _lh_down_arg4_0 with
//│ 		          | `LH_P2(_lh_down_LH_P2_0_1, _lh_down_LH_P2_1_1) -> 
//│ 		            (match _lh_down_arg5_0 with
//│ 		              | `LH_P2(_lh_down_LH_P2_0_2, _lh_down_LH_P2_1_2) -> 
//│ 		                (`LH_P2((`LH_P2(_lh_down_LH_P2_0_2, ((_lh_down_arg2_0 _lh_down_LH_P2_1_1) _lh_down_LH_P2_1_2))), (`LH_P2(((_lh_down_arg1_0 _lh_down_LH_P2_0_2) _lh_down_LH_P2_0_0), _lh_down_LH_P2_1_2))))))))
//│ 		  and up_0 = (fun _lh_up_arg1_0 _lh_up_arg2_0 _lh_up_arg3_0 _lh_up_arg4_0 -> 
//│ 		    (match _lh_up_arg3_0 with
//│ 		      | `LH_P2(_lh_up_LH_P2_0_0, _lh_up_LH_P2_1_0) -> 
//│ 		        (match _lh_up_arg4_0 with
//│ 		          | `LH_P2(_lh_up_LH_P2_0_1, _lh_up_LH_P2_1_1) -> 
//│ 		            (`LH_P2(((_lh_up_arg1_0 _lh_up_LH_P2_0_0) _lh_up_LH_P2_0_1), ((_lh_up_arg2_0 _lh_up_LH_P2_1_0) _lh_up_LH_P2_1_1))))))
//│ 		  in (let rec xs'_0 = ((map_lh__d2_d1 (fun x_0 -> 
//│ 		    (`LH_P2(x_0, x_0)))) _lh_scanlr_arg5_0) in
//│ 		    (let rec _lh_matchIdent_7 = ((((sweep_ud_lh__d1 ((up_0 _lh_scanlr_arg1_0) _lh_scanlr_arg2_0)) ((down_0 _lh_scanlr_arg1_0) _lh_scanlr_arg2_0)) (`LH_P2(_lh_scanlr_arg3_0, _lh_scanlr_arg4_0))) (put_lh__d1 xs'_0)) in
//│ 		      (match _lh_matchIdent_7 with
//│ 		        | `LH_P2(_lh_scanlr_LH_P2_0_0, _lh_scanlr_LH_P2_1_0) -> 
//│ 		          (match _lh_scanlr_LH_P2_0_0 with
//│ 		            | `LH_P2(_lh_scanlr_LH_P2_0_1, _lh_scanlr_LH_P2_1_1) -> 
//│ 		              (let rec ans_0 = (`LH_P2(((_lh_scanlr_arg2_0 _lh_scanlr_LH_P2_1_1) _lh_scanlr_arg4_0), ((_lh_scanlr_arg1_0 _lh_scanlr_arg3_0) _lh_scanlr_LH_P2_0_1))) in
//│ 		                (`LH_P2(ans_0, (get_lh__d1 _lh_scanlr_LH_P2_1_0))))))));;
//│ 		let rec emptyPacket_lh__d4 =
//│ 		  (`LH_P8((0 - 1), (0 - 1), (`F), false, 0, false, 0, 1));;
//│ 		let rec send_right_lh__d2 _lh_send_right_arg1_0 _lh_send_right_arg2_0 =
//│ 		  (match _lh_send_right_arg1_0 with
//│ 		    | `LH_P8(_lh_send_right_LH_P8_0_0, _lh_send_right_LH_P8_1_0, _lh_send_right_LH_P8_2_0, _lh_send_right_LH_P8_3_0, _lh_send_right_LH_P8_4_0, _lh_send_right_LH_P8_5_0, _lh_send_right_LH_P8_6_0, _lh_send_right_LH_P8_7_0) -> 
//│ 		      (match _lh_send_right_arg2_0 with
//│ 		        | `LH_P8(_lh_send_right_LH_P8_0_1, _lh_send_right_LH_P8_1_1, _lh_send_right_LH_P8_2_1, _lh_send_right_LH_P8_3_1, _lh_send_right_LH_P8_4_1, _lh_send_right_LH_P8_5_1, _lh_send_right_LH_P8_6_1, _lh_send_right_LH_P8_7_1) -> 
//│ 		          (if (_lh_send_right_LH_P8_5_0 && (_lh_send_right_LH_P8_6_0 > _lh_send_right_LH_P8_7_1)) then
//│ 		            (`LH_P8(_lh_send_right_LH_P8_0_0, _lh_send_right_LH_P8_1_0, _lh_send_right_LH_P8_2_0, _lh_send_right_LH_P8_3_0, _lh_send_right_LH_P8_4_0, _lh_send_right_LH_P8_5_0, (_lh_send_right_LH_P8_6_0 - _lh_send_right_LH_P8_7_1), (_lh_send_right_LH_P8_7_0 + _lh_send_right_LH_P8_7_1)))
//│ 		          else
//│ 		            (`LH_P8(_lh_send_right_LH_P8_0_1, _lh_send_right_LH_P8_1_1, _lh_send_right_LH_P8_2_1, _lh_send_right_LH_P8_3_1, _lh_send_right_LH_P8_4_1, _lh_send_right_LH_P8_5_1, _lh_send_right_LH_P8_6_1, (_lh_send_right_LH_P8_7_0 + _lh_send_right_LH_P8_7_1))))));;
//│ 		let rec send_lh__d2 _lh_send_arg1_0 =
//│ 		  (((((scanlr_lh__d2 send_right_lh__d2) send_left_lh__d2) emptyPacket_lh__d5) emptyPacket_lh__d4) _lh_send_arg1_0);;
//│ 		let rec map_lh__d1_d6 f_7 ls_9 =
//│ 		  (match ls_9 with
//│ 		    | `LH_C(h_9, t_9) -> 
//│ 		      (`LH_C((f_7 h_9), ((map_lh__d1_d6 f_7) t_9)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec do_send_lh__d2 _lh_do_send_arg1_0 _lh_do_send_arg2_0 =
//│ 		  (let rec states1_1 = ((map_lh__d1_d5 (check_depth_lh__d3 _lh_do_send_arg1_0)) _lh_do_send_arg2_0) in
//│ 		    (let rec send_results_0 = ((map_lh__d1_d4 (fun _lh_funcomp_x_1 -> 
//│ 		      (snd_lh__d2 (send_lh__d2 _lh_funcomp_x_1)))) ((fun _lh_funcomp_x_2 -> 
//│ 		      (transpose_lh__d3 (pad_packets_lh__d2 _lh_funcomp_x_2))) ((map_lh__d1_d6 make_packet_lh__d2) states1_1))) in
//│ 		      (let rec pss'_0 = (transpose_lh__d4 send_results_0) in
//│ 		        (((zipWith_lh__d4 (update_io_lh__d2 _lh_do_send_arg1_0)) pss'_0) _lh_do_send_arg2_0))));;
//│ 		let rec do_sends_lh__d2 _lh_do_sends_arg1_0 _lh_do_sends_arg2_0 =
//│ 		  (((until_lh__d3 (acknowledge_lh__d2 _lh_do_sends_arg1_0)) (do_send_lh__d2 _lh_do_sends_arg1_0)) _lh_do_sends_arg2_0);;
//│ 		let rec until_lh__d2 _lh_until_arg1_1 _lh_until_arg2_1 _lh_until_arg3_1 =
//│ 		  (if (_lh_until_arg1_1 _lh_until_arg3_1) then
//│ 		    _lh_until_arg3_1
//│ 		  else
//│ 		    (((until_lh__d2 _lh_until_arg1_1) _lh_until_arg2_1) (_lh_until_arg2_1 _lh_until_arg3_1)));;
//│ 		let rec map_lh__d1_d1 f_1_3 ls_1_4 =
//│ 		  (match ls_1_4 with
//│ 		    | `LH_C(h_1_4, t_1_4) -> 
//│ 		      (`LH_C((f_1_3 h_1_4), ((map_lh__d1_d1 f_1_3) t_1_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec outports_lh__d5 _lh_outports_arg1_3 =
//│ 		  (match _lh_outports_arg1_3 with
//│ 		    | `PS(_lh_outports_PS_0_3, _lh_outports_PS_1_3, _lh_outports_PS_2_3, _lh_outports_PS_3_3, _lh_outports_PS_4_3) -> 
//│ 		      _lh_outports_PS_4_3);;
//│ 		let rec or_lh__d1 _lh_or_arg1_3 =
//│ 		  (match _lh_or_arg1_3 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_or_LH_C_0_3, _lh_or_LH_C_1_3) -> 
//│ 		      (if _lh_or_LH_C_0_3 then
//│ 		        true
//│ 		      else
//│ 		        (or_lh__d1 _lh_or_LH_C_1_3)));;
//│ 		let rec map_lh__d1_d3 f_1_1 ls_1_2 =
//│ 		  (match ls_1_2 with
//│ 		    | `LH_C(h_1_2, t_1_2) -> 
//│ 		      (`LH_C((f_1_1 h_1_2), ((map_lh__d1_d3 f_1_1) t_1_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec pathDepth_lh__d8 _lh_pathDepth_arg1_1 =
//│ 		  (match _lh_pathDepth_arg1_1 with
//│ 		    | `PS(_lh_pathDepth_PS_0_1, _lh_pathDepth_PS_1_1, _lh_pathDepth_PS_2_1, _lh_pathDepth_PS_3_1, _lh_pathDepth_PS_4_1) -> 
//│ 		      _lh_pathDepth_PS_2_1);;
//│ 		let rec check_depth_lh__d2 _lh_check_depth_arg1_2 _lh_check_depth_arg2_2 =
//│ 		  (if ((pathDepth_lh__d8 _lh_check_depth_arg2_2) = _lh_check_depth_arg1_2) then
//│ 		    _lh_check_depth_arg2_2
//│ 		  else
//│ 		    ((update_requests_lh__d2 false) _lh_check_depth_arg2_2));;
//│ 		let rec map_lh__d1_d2 f_1_2 ls_1_3 =
//│ 		  (match ls_1_3 with
//│ 		    | `LH_C(h_1_3, t_1_3) -> 
//│ 		      (`LH_C((f_1_2 h_1_3), ((map_lh__d1_d2 f_1_2) t_1_3)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec or_lh__d2 _lh_or_arg1_2 =
//│ 		  (match _lh_or_arg1_2 with
//│ 		    | `LH_N -> 
//│ 		      false
//│ 		    | `LH_C(_lh_or_LH_C_0_2, _lh_or_LH_C_1_2) -> 
//│ 		      (if _lh_or_LH_C_0_2 then
//│ 		        true
//│ 		      else
//│ 		        (or_lh__d2 _lh_or_LH_C_1_2)));;
//│ 		let rec acknowledge_lh__d1 _lh_acknowledge_arg1_1 _lh_acknowledge_arg2_1 =
//│ 		  let rec check_requests_1 = (fun _lh_check_requests_arg1_1 -> 
//│ 		    (or_lh__d1 ((map_lh__d1_d1 check_lr_requests_1) _lh_check_requests_arg1_1)))
//│ 		  and check_lr_requests_1 = (fun _lh_check_lr_requests_arg1_1 -> 
//│ 		    (match _lh_check_lr_requests_arg1_1 with
//│ 		      | `LH_P6(_lh_check_lr_requests_LH_P6_0_1, _lh_check_lr_requests_LH_P6_1_1, _lh_check_lr_requests_LH_P6_2_1, _lh_check_lr_requests_LH_P6_3_1, _lh_check_lr_requests_LH_P6_4_1, _lh_check_lr_requests_LH_P6_5_1) -> 
//│ 		        (_lh_check_lr_requests_LH_P6_2_1 || _lh_check_lr_requests_LH_P6_4_1)))
//│ 		  in (let rec states1_2 = ((map_lh__d1_d3 (check_depth_lh__d2 _lh_acknowledge_arg1_1)) _lh_acknowledge_arg2_1) in
//│ 		    (not (or_lh__d2 ((map_lh__d1_d2 (fun _lh_funcomp_x_3 -> 
//│ 		      (check_requests_1 (outports_lh__d5 _lh_funcomp_x_3)))) states1_2))));;
//│ 		let rec pathDepth_lh__d7 _lh_pathDepth_arg1_2 =
//│ 		  (match _lh_pathDepth_arg1_2 with
//│ 		    | `PS(_lh_pathDepth_PS_0_2, _lh_pathDepth_PS_1_2, _lh_pathDepth_PS_2_2, _lh_pathDepth_PS_3_2, _lh_pathDepth_PS_4_2) -> 
//│ 		      _lh_pathDepth_PS_2_2);;
//│ 		let rec update_io_lh__d1 _lh_update_io_arg1_1 _lh_update_io_arg2_1 _lh_update_io_arg3_1 =
//│ 		  (let rec update_is_1 = (fun state_2 -> 
//│ 		    ((updateInports_lh__d1 state_2) (((foldr_lh__d1 update_i_lh__d1) (inports_lh__d6 state_2)) _lh_update_io_arg2_1))) in
//│ 		    (let rec update_os_1 = (fun state_3 -> 
//│ 		      (if ((pathDepth_lh__d7 state_3) = _lh_update_io_arg1_1) then
//│ 		        ((updateOutports_lh__d4 state_3) (((zipWith_lh__d5 update_o_lh__d1) _lh_update_io_arg2_1) (outports_lh__d8 state_3)))
//│ 		      else
//│ 		        state_3)) in
//│ 		      (update_os_1 (update_is_1 _lh_update_io_arg3_1))));;
//│ 		let rec zipWith_lh__d3 f_1_6 xs_4 ys_2 =
//│ 		  (match xs_4 with
//│ 		    | `LH_C(hx_2, tx_2) -> 
//│ 		      (match ys_2 with
//│ 		        | `LH_C(hy_2, ty_2) -> 
//│ 		          (`LH_C(((f_1_6 hx_2) hy_2), (((zipWith_lh__d3 f_1_6) tx_2) ty_2)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d1_d0 f_1_4 ls_1_5 =
//│ 		  (match ls_1_5 with
//│ 		    | `LH_C(h_1_5, t_1_5) -> 
//│ 		      (`LH_C((f_1_4 h_1_5), ((map_lh__d1_d0 f_1_4) t_1_5)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec map_lh__d9 f_1_5 ls_1_6 =
//│ 		  (match ls_1_6 with
//│ 		    | `LH_C(h_1_6, t_1_6) -> 
//│ 		      (`LH_C((f_1_5 h_1_6), ((map_lh__d9 f_1_5) t_1_6)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec update_requests_lh__d1 _lh_update_requests_arg1_1 _lh_update_requests_arg2_1 =
//│ 		  ((updateOutports_lh__d4 _lh_update_requests_arg2_1) (let rec _lh_listcomp_fun_1 = (fun _lh_listcomp_fun_para_1 -> 
//│ 		    (match _lh_listcomp_fun_para_1 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_1, _lh_listcomp_fun_ls_t_1) -> 
//│ 		        (match _lh_listcomp_fun_ls_h_1 with
//│ 		          | `LH_P6(_lh_update_requests_LH_P6_0_1, _lh_update_requests_LH_P6_1_1, _lh_update_requests_LH_P6_2_1, _lh_update_requests_LH_P6_3_1, _lh_update_requests_LH_P6_4_1, _lh_update_requests_LH_P6_5_1) -> 
//│ 		            (`LH_C((`LH_P6(_lh_update_requests_LH_P6_0_1, _lh_update_requests_LH_P6_1_1, _lh_update_requests_arg1_1, _lh_update_requests_LH_P6_3_1, _lh_update_requests_arg1_1, _lh_update_requests_LH_P6_5_1)), (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1)))
//│ 		          | _ -> 
//│ 		            (_lh_listcomp_fun_1 _lh_listcomp_fun_ls_t_1))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_1 (outports_lh__d8 _lh_update_requests_arg2_1))));;
//│ 		let rec pathDepth_lh__d6 _lh_pathDepth_arg1_3 =
//│ 		  (match _lh_pathDepth_arg1_3 with
//│ 		    | `PS(_lh_pathDepth_PS_0_3, _lh_pathDepth_PS_1_3, _lh_pathDepth_PS_2_3, _lh_pathDepth_PS_3_3, _lh_pathDepth_PS_4_3) -> 
//│ 		      _lh_pathDepth_PS_2_3);;
//│ 		let rec check_depth_lh__d1 _lh_check_depth_arg1_3 _lh_check_depth_arg2_3 =
//│ 		  (if ((pathDepth_lh__d6 _lh_check_depth_arg2_3) = _lh_check_depth_arg1_3) then
//│ 		    _lh_check_depth_arg2_3
//│ 		  else
//│ 		    ((update_requests_lh__d1 false) _lh_check_depth_arg2_3));;
//│ 		let rec map_lh__d2_d0 f_1 ls_4 =
//│ 		  (match ls_4 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      (`LH_C((f_1 h_4), ((map_lh__d2_d0 f_1) t_4)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec emptyPacket_lh__d1 =
//│ 		  (`LH_P8((0 - 1), (0 - 1), (`F), false, 0, false, 0, 1));;
//│ 		let rec pad_packets_lh__d1 _lh_pad_packets_arg1_1 =
//│ 		  (let rec pad_1 = (fun xs_3 -> 
//│ 		    (let rec max_ps_1 = (maximum_lh__d2 ((map_lh__d2_d1 length_lh__d1) _lh_pad_packets_arg1_1)) in
//│ 		      ((take_lz_lh__d2 max_ps_1) ((append__lz_lh__d2 xs_3) ((copy_lz_lh__d2 max_ps_1) emptyPacket_lh__d1))))) in
//│ 		    ((map_lh__d2_d0 pad_1) _lh_pad_packets_arg1_1));;
//│ 		let rec snd_lh__d1 _lh_snd_arg1_1 =
//│ 		  (match _lh_snd_arg1_1 with
//│ 		    | `LH_P2(_lh_snd_LH_P2_0_1, _lh_snd_LH_P2_1_1) -> 
//│ 		      _lh_snd_LH_P2_1_1);;
//│ 		let rec outports_lh__d7 _lh_outports_arg1_1 =
//│ 		  (match _lh_outports_arg1_1 with
//│ 		    | `PS(_lh_outports_PS_0_1, _lh_outports_PS_1_1, _lh_outports_PS_2_1, _lh_outports_PS_3_1, _lh_outports_PS_4_1) -> 
//│ 		      _lh_outports_PS_4_1);;
//│ 		let rec make_packet_lh__d1 _lh_make_packet_arg1_1 =
//│ 		  (let rec _lh_listcomp_fun_7 = (fun _lh_listcomp_fun_para_7 -> 
//│ 		    (match _lh_listcomp_fun_para_7 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_7, _lh_listcomp_fun_ls_t_7) -> 
//│ 		        (match _lh_listcomp_fun_ls_h_7 with
//│ 		          | `LH_P6(_lh_make_packet_LH_P6_0_1, _lh_make_packet_LH_P6_1_1, _lh_make_packet_LH_P6_2_1, _lh_make_packet_LH_P6_3_1, _lh_make_packet_LH_P6_4_1, _lh_make_packet_LH_P6_5_1) -> 
//│ 		            (`LH_C((`LH_P8((pid_lh__d5 _lh_make_packet_arg1_1), _lh_make_packet_LH_P6_0_1, _lh_make_packet_LH_P6_1_1, _lh_make_packet_LH_P6_2_1, _lh_make_packet_LH_P6_3_1, _lh_make_packet_LH_P6_4_1, _lh_make_packet_LH_P6_5_1, 1)), (_lh_listcomp_fun_7 _lh_listcomp_fun_ls_t_7)))
//│ 		          | _ -> 
//│ 		            (_lh_listcomp_fun_7 _lh_listcomp_fun_ls_t_7))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_7 (outports_lh__d7 _lh_make_packet_arg1_1)));;
//│ 		let rec unzip_lh__d1 _lh_unzip_arg1_1 =
//│ 		  (((foldr_lh__d1 (fun ab_1 asbs_1 -> 
//│ 		    (let rec _lh_matchIdent_1_2 = ab_1 in
//│ 		      (match _lh_matchIdent_1_2 with
//│ 		        | `LH_P2(_lh_unzip_LH_P2_0_2, _lh_unzip_LH_P2_1_2) -> 
//│ 		          (let rec _lh_matchIdent_1_3 = asbs_1 in
//│ 		            (match _lh_matchIdent_1_3 with
//│ 		              | `LH_P2(_lh_unzip_LH_P2_0_3, _lh_unzip_LH_P2_1_3) -> 
//│ 		                (`LH_P2((`LH_C(_lh_unzip_LH_P2_0_2, _lh_unzip_LH_P2_0_3)), (`LH_C(_lh_unzip_LH_P2_1_2, _lh_unzip_LH_P2_1_3)))))))))) (`LH_P2((`LH_N), (`LH_N)))) _lh_unzip_arg1_1);;
//│ 		let rec combine_lh__d1 _lh_combine_arg1_1 _lh_combine_arg2_1 _lh_combine_arg3_1 _lh_combine_arg4_1 =
//│ 		  (`LH_C((`LH_C(_lh_combine_arg1_1, _lh_combine_arg2_1)), (transpose_lh__d1 (`LH_C(_lh_combine_arg3_1, _lh_combine_arg4_1)))))
//│ 		and
//│ 		transpose_lh__d1 _lh_transpose_arg1_3 =
//│ 		  (match _lh_transpose_arg1_3 with
//│ 		    | `LH_N -> 
//│ 		      (`LH_N)
//│ 		    | `LH_C(_lh_transpose_LH_C_0_9, _lh_transpose_LH_C_1_9) -> 
//│ 		      (match _lh_transpose_LH_C_0_9 with
//│ 		        | `LH_N -> 
//│ 		          (transpose_lh__d1 _lh_transpose_LH_C_1_9)
//│ 		        | `LH_C(_lh_transpose_LH_C_0_1_0, _lh_transpose_LH_C_1_1_0) -> 
//│ 		          (let rec _lh_matchIdent_1_7 = (unzip_lh__d1 (let rec _lh_listcomp_fun_8 = (fun _lh_listcomp_fun_para_8 -> 
//│ 		            (match _lh_listcomp_fun_para_8 with
//│ 		              | `LH_C(_lh_listcomp_fun_ls_h_8, _lh_listcomp_fun_ls_t_8) -> 
//│ 		                (match _lh_listcomp_fun_ls_h_8 with
//│ 		                  | `LH_C(_lh_transpose_LH_C_0_1_1, _lh_transpose_LH_C_1_1_1) -> 
//│ 		                    (`LH_C((`LH_P2(_lh_transpose_LH_C_0_1_1, _lh_transpose_LH_C_1_1_1)), (_lh_listcomp_fun_8 _lh_listcomp_fun_ls_t_8)))
//│ 		                  | _ -> 
//│ 		                    (_lh_listcomp_fun_8 _lh_listcomp_fun_ls_t_8))
//│ 		              | `LH_N -> 
//│ 		                (`LH_N))) in
//│ 		            (_lh_listcomp_fun_8 _lh_transpose_LH_C_1_9))) in
//│ 		            (match _lh_matchIdent_1_7 with
//│ 		              | `LH_P2(_lh_transpose_LH_P2_0_3, _lh_transpose_LH_P2_1_3) -> 
//│ 		                ((((combine_lh__d1 _lh_transpose_LH_C_0_1_0) _lh_transpose_LH_P2_0_3) _lh_transpose_LH_C_1_1_0) _lh_transpose_LH_P2_1_3)))));;
//│ 		let rec emptyPacket_lh__d3 =
//│ 		  (`LH_P8((0 - 1), (0 - 1), (`F), false, 0, false, 0, 1));;
//│ 		let rec emptyPacket_lh__d2 =
//│ 		  (`LH_P8((0 - 1), (0 - 1), (`F), false, 0, false, 0, 1));;
//│ 		let rec send_left_lh__d1 _lh_send_left_arg1_1 _lh_send_left_arg2_1 =
//│ 		  (match _lh_send_left_arg1_1 with
//│ 		    | `LH_P8(_lh_send_left_LH_P8_0_2, _lh_send_left_LH_P8_1_2, _lh_send_left_LH_P8_2_2, _lh_send_left_LH_P8_3_2, _lh_send_left_LH_P8_4_2, _lh_send_left_LH_P8_5_2, _lh_send_left_LH_P8_6_2, _lh_send_left_LH_P8_7_2) -> 
//│ 		      (match _lh_send_left_arg2_1 with
//│ 		        | `LH_P8(_lh_send_left_LH_P8_0_3, _lh_send_left_LH_P8_1_3, _lh_send_left_LH_P8_2_3, _lh_send_left_LH_P8_3_3, _lh_send_left_LH_P8_4_3, _lh_send_left_LH_P8_5_3, _lh_send_left_LH_P8_6_3, _lh_send_left_LH_P8_7_3) -> 
//│ 		          (if (_lh_send_left_LH_P8_3_3 && (_lh_send_left_LH_P8_4_3 > _lh_send_left_LH_P8_7_2)) then
//│ 		            (`LH_P8(_lh_send_left_LH_P8_0_3, _lh_send_left_LH_P8_1_3, _lh_send_left_LH_P8_2_3, _lh_send_left_LH_P8_3_3, (_lh_send_left_LH_P8_4_3 - _lh_send_left_LH_P8_7_2), _lh_send_left_LH_P8_5_3, _lh_send_left_LH_P8_6_3, (_lh_send_left_LH_P8_7_2 + _lh_send_left_LH_P8_7_3)))
//│ 		          else
//│ 		            (`LH_P8(_lh_send_left_LH_P8_0_2, _lh_send_left_LH_P8_1_2, _lh_send_left_LH_P8_2_2, _lh_send_left_LH_P8_3_2, _lh_send_left_LH_P8_4_2, _lh_send_left_LH_P8_5_2, _lh_send_left_LH_P8_6_2, (_lh_send_left_LH_P8_7_2 + _lh_send_left_LH_P8_7_3))))));;
//│ 		let rec scanlr_lh__d1 _lh_scanlr_arg1_1 _lh_scanlr_arg2_1 _lh_scanlr_arg3_1 _lh_scanlr_arg4_1 _lh_scanlr_arg5_1 =
//│ 		  let rec up_1 = (fun _lh_up_arg1_1 _lh_up_arg2_1 _lh_up_arg3_1 _lh_up_arg4_1 -> 
//│ 		    (match _lh_up_arg3_1 with
//│ 		      | `LH_P2(_lh_up_LH_P2_0_2, _lh_up_LH_P2_1_2) -> 
//│ 		        (match _lh_up_arg4_1 with
//│ 		          | `LH_P2(_lh_up_LH_P2_0_3, _lh_up_LH_P2_1_3) -> 
//│ 		            (`LH_P2(((_lh_up_arg1_1 _lh_up_LH_P2_0_2) _lh_up_LH_P2_0_3), ((_lh_up_arg2_1 _lh_up_LH_P2_1_2) _lh_up_LH_P2_1_3))))))
//│ 		  and down_1 = (fun _lh_down_arg1_1 _lh_down_arg2_1 _lh_down_arg3_1 _lh_down_arg4_1 _lh_down_arg5_1 -> 
//│ 		    (match _lh_down_arg3_1 with
//│ 		      | `LH_P2(_lh_down_LH_P2_0_3, _lh_down_LH_P2_1_3) -> 
//│ 		        (match _lh_down_arg4_1 with
//│ 		          | `LH_P2(_lh_down_LH_P2_0_4, _lh_down_LH_P2_1_4) -> 
//│ 		            (match _lh_down_arg5_1 with
//│ 		              | `LH_P2(_lh_down_LH_P2_0_5, _lh_down_LH_P2_1_5) -> 
//│ 		                (`LH_P2((`LH_P2(_lh_down_LH_P2_0_5, ((_lh_down_arg2_1 _lh_down_LH_P2_1_4) _lh_down_LH_P2_1_5))), (`LH_P2(((_lh_down_arg1_1 _lh_down_LH_P2_0_5) _lh_down_LH_P2_0_3), _lh_down_LH_P2_1_5))))))))
//│ 		  in (let rec xs'_1 = ((map_lh__d2_d1 (fun x_1 -> 
//│ 		    (`LH_P2(x_1, x_1)))) _lh_scanlr_arg5_1) in
//│ 		    (let rec _lh_matchIdent_1_0 = ((((sweep_ud_lh__d1 ((up_1 _lh_scanlr_arg1_1) _lh_scanlr_arg2_1)) ((down_1 _lh_scanlr_arg1_1) _lh_scanlr_arg2_1)) (`LH_P2(_lh_scanlr_arg3_1, _lh_scanlr_arg4_1))) (put_lh__d1 xs'_1)) in
//│ 		      (match _lh_matchIdent_1_0 with
//│ 		        | `LH_P2(_lh_scanlr_LH_P2_0_2, _lh_scanlr_LH_P2_1_2) -> 
//│ 		          (match _lh_scanlr_LH_P2_0_2 with
//│ 		            | `LH_P2(_lh_scanlr_LH_P2_0_3, _lh_scanlr_LH_P2_1_3) -> 
//│ 		              (let rec ans_1 = (`LH_P2(((_lh_scanlr_arg2_1 _lh_scanlr_LH_P2_1_3) _lh_scanlr_arg4_1), ((_lh_scanlr_arg1_1 _lh_scanlr_arg3_1) _lh_scanlr_LH_P2_0_3))) in
//│ 		                (`LH_P2(ans_1, (get_lh__d1 _lh_scanlr_LH_P2_1_2))))))));;
//│ 		let rec send_right_lh__d1 _lh_send_right_arg1_1 _lh_send_right_arg2_1 =
//│ 		  (match _lh_send_right_arg1_1 with
//│ 		    | `LH_P8(_lh_send_right_LH_P8_0_2, _lh_send_right_LH_P8_1_2, _lh_send_right_LH_P8_2_2, _lh_send_right_LH_P8_3_2, _lh_send_right_LH_P8_4_2, _lh_send_right_LH_P8_5_2, _lh_send_right_LH_P8_6_2, _lh_send_right_LH_P8_7_2) -> 
//│ 		      (match _lh_send_right_arg2_1 with
//│ 		        | `LH_P8(_lh_send_right_LH_P8_0_3, _lh_send_right_LH_P8_1_3, _lh_send_right_LH_P8_2_3, _lh_send_right_LH_P8_3_3, _lh_send_right_LH_P8_4_3, _lh_send_right_LH_P8_5_3, _lh_send_right_LH_P8_6_3, _lh_send_right_LH_P8_7_3) -> 
//│ 		          (if (_lh_send_right_LH_P8_5_2 && (_lh_send_right_LH_P8_6_2 > _lh_send_right_LH_P8_7_3)) then
//│ 		            (`LH_P8(_lh_send_right_LH_P8_0_2, _lh_send_right_LH_P8_1_2, _lh_send_right_LH_P8_2_2, _lh_send_right_LH_P8_3_2, _lh_send_right_LH_P8_4_2, _lh_send_right_LH_P8_5_2, (_lh_send_right_LH_P8_6_2 - _lh_send_right_LH_P8_7_3), (_lh_send_right_LH_P8_7_2 + _lh_send_right_LH_P8_7_3)))
//│ 		          else
//│ 		            (`LH_P8(_lh_send_right_LH_P8_0_3, _lh_send_right_LH_P8_1_3, _lh_send_right_LH_P8_2_3, _lh_send_right_LH_P8_3_3, _lh_send_right_LH_P8_4_3, _lh_send_right_LH_P8_5_3, _lh_send_right_LH_P8_6_3, (_lh_send_right_LH_P8_7_2 + _lh_send_right_LH_P8_7_3))))));;
//│ 		let rec send_lh__d1 _lh_send_arg1_1 =
//│ 		  (((((scanlr_lh__d1 send_right_lh__d1) send_left_lh__d1) emptyPacket_lh__d2) emptyPacket_lh__d3) _lh_send_arg1_1);;
//│ 		let rec map_lh__d8 f_1_7 ls_1_7 =
//│ 		  (match ls_1_7 with
//│ 		    | `LH_C(h_1_7, t_1_7) -> 
//│ 		      (`LH_C((f_1_7 h_1_7), ((map_lh__d8 f_1_7) t_1_7)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec do_send_lh__d1 _lh_do_send_arg1_1 _lh_do_send_arg2_1 =
//│ 		  (let rec states1_3 = ((map_lh__d8 (check_depth_lh__d1 _lh_do_send_arg1_1)) _lh_do_send_arg2_1) in
//│ 		    (let rec send_results_1 = ((map_lh__d1_d0 (fun _lh_funcomp_x_4 -> 
//│ 		      (snd_lh__d1 (send_lh__d1 _lh_funcomp_x_4)))) ((fun _lh_funcomp_x_5 -> 
//│ 		      (transpose_lh__d1 (pad_packets_lh__d1 _lh_funcomp_x_5))) ((map_lh__d9 make_packet_lh__d1) states1_3))) in
//│ 		      (let rec pss'_1 = (transpose_lh__d2 send_results_1) in
//│ 		        (((zipWith_lh__d3 (update_io_lh__d1 _lh_do_send_arg1_1)) pss'_1) _lh_do_send_arg2_1))));;
//│ 		let rec do_sends_lh__d1 _lh_do_sends_arg1_1 _lh_do_sends_arg2_1 =
//│ 		  (((until_lh__d2 (acknowledge_lh__d1 _lh_do_sends_arg1_1)) (do_send_lh__d1 _lh_do_sends_arg1_1)) _lh_do_sends_arg2_1);;
//│ 		let rec map_lh__d5 f_2_2 ls_2_1 =
//│ 		  (match ls_2_1 with
//│ 		    | `LH_C(h_2_1, t_2_1) -> 
//│ 		      (`LH_C((f_2_2 h_2_1), ((map_lh__d5 f_2_2) t_2_1)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec head_lh__d3 ls_1_9 =
//│ 		  (match ls_1_9 with
//│ 		    | `LH_C(h_1_9, t_1_9) -> 
//│ 		      h_1_9
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec outports_lh__d4 _lh_outports_arg1_4 =
//│ 		  (match _lh_outports_arg1_4 with
//│ 		    | `PS(_lh_outports_PS_0_4, _lh_outports_PS_1_4, _lh_outports_PS_2_4, _lh_outports_PS_3_4, _lh_outports_PS_4_4) -> 
//│ 		      _lh_outports_PS_4_4);;
//│ 		let rec pid_lh__d4 _lh_pid_arg1_1 =
//│ 		  (match _lh_pid_arg1_1 with
//│ 		    | `PS(_lh_pid_PS_0_1, _lh_pid_PS_1_1, _lh_pid_PS_2_1, _lh_pid_PS_3_1, _lh_pid_PS_4_1) -> 
//│ 		      _lh_pid_PS_0_1);;
//│ 		let rec pathDepth_lh__d5 _lh_pathDepth_arg1_4 =
//│ 		  (match _lh_pathDepth_arg1_4 with
//│ 		    | `PS(_lh_pathDepth_PS_0_4, _lh_pathDepth_PS_1_4, _lh_pathDepth_PS_2_4, _lh_pathDepth_PS_3_4, _lh_pathDepth_PS_4_4) -> 
//│ 		      _lh_pathDepth_PS_2_4);;
//│ 		let rec inports_lh__d5 _lh_inports_arg1_1 =
//│ 		  (match _lh_inports_arg1_1 with
//│ 		    | `PS(_lh_inports_PS_0_1, _lh_inports_PS_1_1, _lh_inports_PS_2_1, _lh_inports_PS_3_1, _lh_inports_PS_4_1) -> 
//│ 		      _lh_inports_PS_3_1);;
//│ 		let rec updateOutports_lh__d3 _lh_updateOutports_arg1_1 _lh_updateOutports_arg2_1 =
//│ 		  (`PS((pid_lh__d4 _lh_updateOutports_arg1_1), (compType_lh__d5 _lh_updateOutports_arg1_1), (pathDepth_lh__d5 _lh_updateOutports_arg1_1), (inports_lh__d5 _lh_updateOutports_arg1_1), _lh_updateOutports_arg2_1));;
//│ 		let rec update_outports_lh__d2 _lh_update_outports_arg1_1 _lh_update_outports_arg2_1 =
//│ 		  ((updateOutports_lh__d3 _lh_update_outports_arg1_1) (let rec _lh_listcomp_fun_1_0 = (fun _lh_listcomp_fun_para_1_0 -> 
//│ 		    (match _lh_listcomp_fun_para_1_0 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_1_0, _lh_listcomp_fun_ls_t_1_0) -> 
//│ 		        (match _lh_listcomp_fun_ls_h_1_0 with
//│ 		          | `LH_P6(_lh_update_outports_LH_P6_0_1, _lh_update_outports_LH_P6_1_1, _lh_update_outports_LH_P6_2_1, _lh_update_outports_LH_P6_3_1, _lh_update_outports_LH_P6_4_1, _lh_update_outports_LH_P6_5_1) -> 
//│ 		            (`LH_C((`LH_P6(_lh_update_outports_LH_P6_0_1, _lh_update_outports_arg2_1, _lh_update_outports_LH_P6_2_1, _lh_update_outports_LH_P6_3_1, _lh_update_outports_LH_P6_4_1, _lh_update_outports_LH_P6_5_1)), (_lh_listcomp_fun_1_0 _lh_listcomp_fun_ls_t_1_0)))
//│ 		          | _ -> 
//│ 		            (_lh_listcomp_fun_1_0 _lh_listcomp_fun_ls_t_1_0))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_1_0 (outports_lh__d4 _lh_update_outports_arg1_1))));;
//│ 		let rec store_inputs_lh__d1 _lh_store_inputs_arg1_0 _lh_store_inputs_arg2_0 =
//│ 		  (match _lh_store_inputs_arg2_0 with
//│ 		    | `PS(_lh_store_inputs_PS_0_0, _lh_store_inputs_PS_1_0, _lh_store_inputs_PS_2_0, _lh_store_inputs_PS_3_0, _lh_store_inputs_PS_4_0) -> 
//│ 		      (match _lh_store_inputs_PS_1_0 with
//│ 		        | `Inp -> 
//│ 		          (head_lh__d3 (let rec _lh_listcomp_fun_1_1 = (fun _lh_listcomp_fun_para_1_1 -> 
//│ 		            (match _lh_listcomp_fun_para_1_1 with
//│ 		              | `LH_C(_lh_listcomp_fun_ls_h_1_1, _lh_listcomp_fun_ls_t_1_1) -> 
//│ 		                (match _lh_listcomp_fun_ls_h_1_1 with
//│ 		                  | `LH_P2(_lh_store_inputs_LH_P2_0_0, _lh_store_inputs_LH_P2_1_0) -> 
//│ 		                    (match _lh_store_inputs_LH_P2_0_0 with
//│ 		                      | `LH_P2(_lh_store_inputs_LH_P2_0_1, _lh_store_inputs_LH_P2_1_1) -> 
//│ 		                        (if (_lh_store_inputs_PS_0_0 = _lh_store_inputs_LH_P2_1_1) then
//│ 		                          (`LH_C(((update_outports_lh__d2 (`PS(_lh_store_inputs_PS_0_0, (`Inp), _lh_store_inputs_PS_2_0, _lh_store_inputs_PS_3_0, _lh_store_inputs_PS_4_0))) _lh_store_inputs_LH_P2_1_0), (_lh_listcomp_fun_1_1 _lh_listcomp_fun_ls_t_1_1)))
//│ 		                        else
//│ 		                          (_lh_listcomp_fun_1_1 _lh_listcomp_fun_ls_t_1_1))
//│ 		                      | _ -> 
//│ 		                        (_lh_listcomp_fun_1_1 _lh_listcomp_fun_ls_t_1_1))
//│ 		                  | _ -> 
//│ 		                    (_lh_listcomp_fun_1_1 _lh_listcomp_fun_ls_t_1_1))
//│ 		              | `LH_N -> 
//│ 		                (`LH_N))) in
//│ 		            (_lh_listcomp_fun_1_1 _lh_store_inputs_arg1_0)))
//│ 		        | _ -> 
//│ 		          _lh_store_inputs_arg2_0)
//│ 		    | _ -> 
//│ 		      _lh_store_inputs_arg2_0);;
//│ 		let rec foldl_lh__d1 f_2_3 i_1 ls_2_2 =
//│ 		  (match ls_2_2 with
//│ 		    | `LH_C(h_2_2, t_2_2) -> 
//│ 		      (((foldl_lh__d1 f_2_3) ((f_2_3 i_1) h_2_2)) t_2_2)
//│ 		    | `LH_N -> 
//│ 		      i_1);;
//│ 		let rec zip_lh__d1 xs_7 ys_5 =
//│ 		  (match xs_7 with
//│ 		    | `LH_C(hx_5, tx_5) -> 
//│ 		      (match ys_5 with
//│ 		        | `LH_C(hy_5, ty_5) -> 
//│ 		          (`LH_C((`LH_P2(hx_5, hy_5)), ((zip_lh__d1 tx_5) ty_5)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec do_cycle_lh__d1 _lh_do_cycle_arg1_0 _lh_do_cycle_arg2_0 _lh_do_cycle_arg3_0 =
//│ 		  (match _lh_do_cycle_arg2_0 with
//│ 		    | `LH_P4(_lh_do_cycle_LH_P4_0_0, _lh_do_cycle_LH_P4_1_0, _lh_do_cycle_LH_P4_2_0, _lh_do_cycle_LH_P4_3_0) -> 
//│ 		      (let rec sim_then_send_0 = (fun _lh_sim_then_send_arg1_0 _lh_sim_then_send_arg2_0 -> 
//│ 		        ((do_sends_lh__d1 _lh_sim_then_send_arg2_0) ((simulate_components_lh__d1 _lh_sim_then_send_arg2_0) _lh_sim_then_send_arg1_0))) in
//│ 		        (let rec states1_4 = ((map_lh__d5 (store_inputs_lh__d1 ((zip_lh__d1 _lh_do_cycle_LH_P4_1_0) _lh_do_cycle_arg3_0))) _lh_do_cycle_LH_P4_3_0) in
//│ 		          (let rec states2_0 = ((do_sends_lh__d2 0) states1_4) in
//│ 		            (let rec states3_0 = (((foldl_lh__d1 sim_then_send_0) states2_0) ((enumFromTo_lh__d4 1) _lh_do_cycle_arg1_0)) in
//│ 		              (let rec states4_0 = ((restore_requests_lh__d1 _lh_do_cycle_LH_P4_3_0) states3_0) in
//│ 		                (`LH_P4(_lh_do_cycle_LH_P4_0_0, _lh_do_cycle_LH_P4_1_0, _lh_do_cycle_LH_P4_2_0, states4_0))))))));;
//│ 		let rec compType_lh__d1 _lh_compType_arg1_4 =
//│ 		  (match _lh_compType_arg1_4 with
//│ 		    | `PS(_lh_compType_PS_0_4, _lh_compType_PS_1_4, _lh_compType_PS_2_4, _lh_compType_PS_3_4, _lh_compType_PS_4_4) -> 
//│ 		      _lh_compType_PS_1_4);;
//│ 		let rec pid_lh__d2 _lh_pid_arg1_3 =
//│ 		  (match _lh_pid_arg1_3 with
//│ 		    | `PS(_lh_pid_PS_0_3, _lh_pid_PS_1_3, _lh_pid_PS_2_3, _lh_pid_PS_3_3, _lh_pid_PS_4_3) -> 
//│ 		      _lh_pid_PS_0_3);;
//│ 		let rec inports_lh__d2 _lh_inports_arg1_4 =
//│ 		  (match _lh_inports_arg1_4 with
//│ 		    | `PS(_lh_inports_PS_0_4, _lh_inports_PS_1_4, _lh_inports_PS_2_4, _lh_inports_PS_3_4, _lh_inports_PS_4_4) -> 
//│ 		      _lh_inports_PS_3_4);;
//│ 		let rec compType_lh__d2 _lh_compType_arg1_3 =
//│ 		  (match _lh_compType_arg1_3 with
//│ 		    | `PS(_lh_compType_PS_0_3, _lh_compType_PS_1_3, _lh_compType_PS_2_3, _lh_compType_PS_3_3, _lh_compType_PS_4_3) -> 
//│ 		      _lh_compType_PS_1_3);;
//│ 		let rec pathDepth_lh__d2 _lh_pathDepth_arg1_7 =
//│ 		  (match _lh_pathDepth_arg1_7 with
//│ 		    | `PS(_lh_pathDepth_PS_0_7, _lh_pathDepth_PS_1_7, _lh_pathDepth_PS_2_7, _lh_pathDepth_PS_3_7, _lh_pathDepth_PS_4_7) -> 
//│ 		      _lh_pathDepth_PS_2_7);;
//│ 		let rec updateOutports_lh__d1 _lh_updateOutports_arg1_3 _lh_updateOutports_arg2_3 =
//│ 		  (`PS((pid_lh__d2 _lh_updateOutports_arg1_3), (compType_lh__d2 _lh_updateOutports_arg1_3), (pathDepth_lh__d2 _lh_updateOutports_arg1_3), (inports_lh__d2 _lh_updateOutports_arg1_3), _lh_updateOutports_arg2_3));;
//│ 		let rec outports_lh__d1 _lh_outports_arg1_7 =
//│ 		  (match _lh_outports_arg1_7 with
//│ 		    | `PS(_lh_outports_PS_0_7, _lh_outports_PS_1_7, _lh_outports_PS_2_7, _lh_outports_PS_3_7, _lh_outports_PS_4_7) -> 
//│ 		      _lh_outports_PS_4_7);;
//│ 		let rec update_outports_lh__d1 _lh_update_outports_arg1_2 _lh_update_outports_arg2_2 =
//│ 		  ((updateOutports_lh__d1 _lh_update_outports_arg1_2) (let rec _lh_listcomp_fun_1_2 = (fun _lh_listcomp_fun_para_1_2 -> 
//│ 		    (match _lh_listcomp_fun_para_1_2 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_1_2, _lh_listcomp_fun_ls_t_1_2) -> 
//│ 		        (match _lh_listcomp_fun_ls_h_1_2 with
//│ 		          | `LH_P6(_lh_update_outports_LH_P6_0_2, _lh_update_outports_LH_P6_1_2, _lh_update_outports_LH_P6_2_2, _lh_update_outports_LH_P6_3_2, _lh_update_outports_LH_P6_4_2, _lh_update_outports_LH_P6_5_2) -> 
//│ 		            (`LH_C((`LH_P6(_lh_update_outports_LH_P6_0_2, _lh_update_outports_arg2_2, _lh_update_outports_LH_P6_2_2, _lh_update_outports_LH_P6_3_2, _lh_update_outports_LH_P6_4_2, _lh_update_outports_LH_P6_5_2)), (_lh_listcomp_fun_1_2 _lh_listcomp_fun_ls_t_1_2)))
//│ 		          | _ -> 
//│ 		            (_lh_listcomp_fun_1_2 _lh_listcomp_fun_ls_t_1_2))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_1_2 (outports_lh__d1 _lh_update_outports_arg1_2))));;
//│ 		let rec init_dffs_lh__d1 _lh_init_dffs_arg1_0 =
//│ 		  (if ((compType_lh__d1 _lh_init_dffs_arg1_0) = (`Dff)) then
//│ 		    ((update_outports_lh__d1 _lh_init_dffs_arg1_0) (`F))
//│ 		  else
//│ 		    _lh_init_dffs_arg1_0);;
//│ 		let rec tail_lh__d1 ls_2_6 =
//│ 		  (match ls_2_6 with
//│ 		    | `LH_C(h_2_6, t_2_6) -> 
//│ 		      t_2_6
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec map_lh__d3 f_2_5 ls_2_7 =
//│ 		  (match ls_2_7 with
//│ 		    | `LH_C(h_2_7, t_2_7) -> 
//│ 		      (`LH_C((f_2_5 h_2_7), ((map_lh__d3 f_2_5) t_2_7)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec scanl_lh__d1 _lh_scanl_arg1_0 _lh_scanl_arg2_0 _lh_scanl_arg3_0 =
//│ 		  (`LH_C(_lh_scanl_arg2_0, (let rec _lh_matchIdent_1_9 = _lh_scanl_arg3_0 in
//│ 		    (match _lh_matchIdent_1_9 with
//│ 		      | `LH_N -> 
//│ 		        (`LH_N)
//│ 		      | `LH_C(_lh_scanl_LH_C_0_0, _lh_scanl_LH_C_1_0) -> 
//│ 		        (((scanl_lh__d1 _lh_scanl_arg1_0) ((_lh_scanl_arg1_0 _lh_scanl_arg2_0) _lh_scanl_LH_C_0_0)) _lh_scanl_LH_C_1_0)))));;
//│ 		let rec map_lh__d6 f_2_1 ls_2_0 =
//│ 		  (match ls_2_0 with
//│ 		    | `LH_C(h_2_0, t_2_0) -> 
//│ 		      (`LH_C((f_2_1 h_2_0), ((map_lh__d6 f_2_1) t_2_0)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec maximum_lh__d1 _lh_maximum_arg1_1 =
//│ 		  (match _lh_maximum_arg1_1 with
//│ 		    | `LH_C(_lh_maximum_LH_C_0_1, _lh_maximum_LH_C_1_1) -> 
//│ 		      (let rec go_1 = (fun _lh_go_arg1_1 _lh_go_arg2_1 -> 
//│ 		        (match _lh_go_arg2_1 with
//│ 		          | `LH_N -> 
//│ 		            _lh_go_arg1_1
//│ 		          | `LH_C(_lh_go_LH_C_0_1, _lh_go_LH_C_1_1) -> 
//│ 		            (if (_lh_go_arg1_1 > _lh_go_LH_C_0_1) then
//│ 		              ((go_1 _lh_go_arg1_1) _lh_go_LH_C_1_1)
//│ 		            else
//│ 		              ((go_1 _lh_go_LH_C_0_1) _lh_go_LH_C_1_1)))) in
//│ 		        ((go_1 _lh_maximum_LH_C_0_1) _lh_maximum_LH_C_1_1))
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec pathDepth_lh__d1 _lh_pathDepth_arg1_8 =
//│ 		  (match _lh_pathDepth_arg1_8 with
//│ 		    | `PS(_lh_pathDepth_PS_0_8, _lh_pathDepth_PS_1_8, _lh_pathDepth_PS_2_8, _lh_pathDepth_PS_3_8, _lh_pathDepth_PS_4_8) -> 
//│ 		      _lh_pathDepth_PS_2_8);;
//│ 		let rec critical_path_depth_lh__d1 _lh_critical_path_depth_arg1_0 =
//│ 		  (match _lh_critical_path_depth_arg1_0 with
//│ 		    | `LH_P4(_lh_critical_path_depth_LH_P4_0_0, _lh_critical_path_depth_LH_P4_1_0, _lh_critical_path_depth_LH_P4_2_0, _lh_critical_path_depth_LH_P4_3_0) -> 
//│ 		      (maximum_lh__d1 ((map_lh__d6 pathDepth_lh__d1) _lh_critical_path_depth_LH_P4_3_0)));;
//│ 		let rec simulate_lh__d1 _lh_simulate_arg1_0 _lh_simulate_arg2_0 =
//│ 		  (match _lh_simulate_arg2_0 with
//│ 		    | `LH_P4(_lh_simulate_LH_P4_0_0, _lh_simulate_LH_P4_1_0, _lh_simulate_LH_P4_2_0, _lh_simulate_LH_P4_3_0) -> 
//│ 		      (tail_lh__d1 (((scanl_lh__d1 (do_cycle_lh__d1 (critical_path_depth_lh__d1 (`LH_P4(_lh_simulate_LH_P4_0_0, _lh_simulate_LH_P4_1_0, _lh_simulate_LH_P4_2_0, _lh_simulate_LH_P4_3_0))))) (`LH_P4(_lh_simulate_LH_P4_0_0, _lh_simulate_LH_P4_1_0, _lh_simulate_LH_P4_2_0, ((map_lh__d3 init_dffs_lh__d1) _lh_simulate_LH_P4_3_0)))) _lh_simulate_arg1_0)));;
//│ 		let rec head_lh__d2 ls_2_4 =
//│ 		  (match ls_2_4 with
//│ 		    | `LH_C(h_2_4, t_2_4) -> 
//│ 		      h_2_4
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec pid_lh__d1 _lh_pid_arg1_4 =
//│ 		  (match _lh_pid_arg1_4 with
//│ 		    | `PS(_lh_pid_PS_0_4, _lh_pid_PS_1_4, _lh_pid_PS_2_4, _lh_pid_PS_3_4, _lh_pid_PS_4_4) -> 
//│ 		      _lh_pid_PS_0_4);;
//│ 		let rec inports_lh__d1 _lh_inports_arg1_5 =
//│ 		  (match _lh_inports_arg1_5 with
//│ 		    | `PS(_lh_inports_PS_0_5, _lh_inports_PS_1_5, _lh_inports_PS_2_5, _lh_inports_PS_3_5, _lh_inports_PS_4_5) -> 
//│ 		      _lh_inports_PS_3_5);;
//│ 		let rec map_lh__d4 f_2_4 ls_2_3 =
//│ 		  (match ls_2_3 with
//│ 		    | `LH_C(h_2_3, t_2_3) -> 
//│ 		      (`LH_C((f_2_4 h_2_3), ((map_lh__d4 f_2_4) t_2_3)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec head_lh__d1 ls_2_5 =
//│ 		  (match ls_2_5 with
//│ 		    | `LH_C(h_2_5, t_2_5) -> 
//│ 		      h_2_5
//│ 		    | `LH_N -> 
//│ 		      (failwith "lh_default_error"));;
//│ 		let rec collect_outputs_lh__d1 _lh_collect_outputs_arg1_0 =
//│ 		  (match _lh_collect_outputs_arg1_0 with
//│ 		    | `LH_P4(_lh_collect_outputs_LH_P4_0_0, _lh_collect_outputs_LH_P4_1_0, _lh_collect_outputs_LH_P4_2_0, _lh_collect_outputs_LH_P4_3_0) -> 
//│ 		      let rec third_0 = (fun _lh_third_arg1_0 -> 
//│ 		        (match _lh_third_arg1_0 with
//│ 		          | `LH_P3(_lh_third_LH_P3_0_0, _lh_third_LH_P3_1_0, _lh_third_LH_P3_2_0) -> 
//│ 		            _lh_third_LH_P3_2_0))
//│ 		      and get_output_0 = (fun _lh_get_output_arg1_0 _lh_get_output_arg2_0 -> 
//│ 		        (match _lh_get_output_arg2_0 with
//│ 		          | `LH_P2(_lh_get_output_LH_P2_0_0, _lh_get_output_LH_P2_1_0) -> 
//│ 		            (third_0 (head_lh__d1 (let rec _lh_listcomp_fun_1_3 = (fun _lh_listcomp_fun_para_1_3 -> 
//│ 		              (match _lh_listcomp_fun_para_1_3 with
//│ 		                | `LH_C(_lh_listcomp_fun_ls_h_1_3, _lh_listcomp_fun_ls_t_1_3) -> 
//│ 		                  (if (_lh_get_output_LH_P2_1_0 = (pid_lh__d1 _lh_listcomp_fun_ls_h_1_3)) then
//│ 		                    (`LH_C((head_lh__d2 (inports_lh__d1 _lh_listcomp_fun_ls_h_1_3)), (_lh_listcomp_fun_1_3 _lh_listcomp_fun_ls_t_1_3)))
//│ 		                  else
//│ 		                    (_lh_listcomp_fun_1_3 _lh_listcomp_fun_ls_t_1_3))
//│ 		                | `LH_N -> 
//│ 		                  (`LH_N))) in
//│ 		              (_lh_listcomp_fun_1_3 _lh_get_output_arg1_0))))))
//│ 		      in ((map_lh__d4 (get_output_0 _lh_collect_outputs_LH_P4_3_0)) _lh_collect_outputs_LH_P4_2_0));;
//│ 		let rec map_lh__d2 f_2_6 ls_2_8 =
//│ 		  (match ls_2_8 with
//│ 		    | `LH_C(h_2_9, t_2_9) -> 
//│ 		      (`LH_C((f_2_6 h_2_9), ((map_lh__d2 f_2_6) t_2_9)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec circuit_simulate_lh__d1 _lh_circuit_simulate_arg1_0 _lh_circuit_simulate_arg2_0 =
//│ 		  ((map_lh__d2 collect_outputs_lh__d1) ((simulate_lh__d1 _lh_circuit_simulate_arg1_0) _lh_circuit_simulate_arg2_0));;
//│ 		let rec mappend_lh__d1 xs_1_1 ys_9 =
//│ 		  (match xs_1_1 with
//│ 		    | `LH_C(h_3_1, t_3_1) -> 
//│ 		      (`LH_C(h_3_1, ((mappend_lh__d1 t_3_1) ys_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_9);;
//│ 		let rec enumFromTo_lh__d2 a_2 b_2 =
//│ 		  (if (a_2 <= b_2) then
//│ 		    (`LH_C(a_2, ((enumFromTo_lh__d2 (a_2 + 1)) b_2)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec mappend_lh__d2 xs_9 ys_7 =
//│ 		  (match xs_9 with
//│ 		    | `LH_C(h_3_0, t_3_0) -> 
//│ 		      (`LH_C(h_3_0, ((mappend_lh__d2 t_3_0) ys_7)))
//│ 		    | `LH_N -> 
//│ 		      ys_7);;
//│ 		let rec enumFrom_lh__d2 a_3 =
//│ 		  (lazy (`LH_C(a_3, (enumFrom_lh__d2 (a_3 + 1)))));;
//│ 		let rec map_lh__d1 f_2_8 ls_2_9 =
//│ 		  (match ls_2_9 with
//│ 		    | `LH_C(h_3_2, t_3_2) -> 
//│ 		      (`LH_C((f_2_8 h_3_2), ((map_lh__d1 f_2_8) t_3_2)))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec enumFromTo_lh__d1 a_5 b_3 =
//│ 		  (if (a_5 <= b_3) then
//│ 		    (`LH_C(a_5, ((enumFromTo_lh__d1 (a_5 + 1)) b_3)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec enumFrom_lh__d1 a_4 =
//│ 		  (lazy (`LH_C(a_4, (enumFrom_lh__d1 (a_4 + 1)))));;
//│ 		let rec zipWith_lz_nl_lh__d2 f_2_7 xs_1_0 ys_8 =
//│ 		  (match ys_8 with
//│ 		    | `LH_C(hy_6, ty_6) -> 
//│ 		      (match (Lazy.force xs_1_0) with
//│ 		        | `LH_C(hx_6, tx_6) -> 
//│ 		          (`LH_C(((f_2_7 hx_6) hy_6), (((zipWith_lz_nl_lh__d2 f_2_7) tx_6) ty_6)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec enumFromTo_lh__d3 a_1 b_1 =
//│ 		  (if (a_1 <= b_1) then
//│ 		    (`LH_C(a_1, ((enumFromTo_lh__d3 (a_1 + 1)) b_1)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec concat_lh__d1 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_3_3, t_3_3) -> 
//│ 		      ((mappend_lh__d3 h_3_3) (concat_lh__d1 t_3_3))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec reg_lh__d1 _lh_reg_arg1_0 _lh_reg_arg2_0 =
//│ 		  (`LH_C((`PS(_lh_reg_arg2_0, (`Inp), 0, (`LH_N), (`LH_C((`LH_P6(0, (`F), false, 0, true, 4)), (`LH_N))))), (`LH_C((`PS((_lh_reg_arg2_0 + 1), (`Dff), 1, (`LH_C((`LH_P3((_lh_reg_arg2_0 + 5), 0, (`F))), (`LH_N))), (`LH_C((`LH_P6(0, (`F), false, 0, true, 5)), (`LH_N))))), (`LH_C((`PS((_lh_reg_arg2_0 + 2), (`Inv), 1, (`LH_C((`LH_P3(_lh_reg_arg1_0, 0, (`F))), (`LH_N))), (`LH_C((`LH_P6(0, (`F), false, 0, true, 1)), (`LH_N))))), (`LH_C((`PS((_lh_reg_arg2_0 + 3), (`And2), 2, (`LH_C((`LH_P3((_lh_reg_arg2_0 + 1), 0, (`F))), (`LH_C((`LH_P3((_lh_reg_arg2_0 + 2), 0, (`F))), (`LH_N))))), (`LH_C((`LH_P6(0, (`F), false, 0, true, 2)), (`LH_N))))), (`LH_C((`PS((_lh_reg_arg2_0 + 4), (`And2), 1, (`LH_C((`LH_P3(_lh_reg_arg1_0, 0, (`F))), (`LH_C((`LH_P3(_lh_reg_arg2_0, 0, (`F))), (`LH_N))))), (`LH_C((`LH_P6(0, (`F), false, 0, true, 1)), (`LH_N))))), (`LH_C((`PS((_lh_reg_arg2_0 + 5), (`Or2), 3, (`LH_C((`LH_P3((_lh_reg_arg2_0 + 3), 0, (`F))), (`LH_C((`LH_P3((_lh_reg_arg2_0 + 4), 0, (`F))), (`LH_N))))), (`LH_C((`LH_P6(0, (`F), true, 4, false, 0)), (`LH_N))))), (`LH_C((`PS((_lh_reg_arg2_0 + 6), (`Outp), 4, (`LH_C((`LH_P3((_lh_reg_arg2_0 + 1), 0, (`F))), (`LH_N))), (`LH_N))), (`LH_N)))))))))))))));;
//│ 		let rec zipWith_lz_nl_lh__d1 f_2_9 xs_1_2 ys_1_0 =
//│ 		  (match ys_1_0 with
//│ 		    | `LH_C(hy_7, ty_7) -> 
//│ 		      (match (Lazy.force xs_1_2) with
//│ 		        | `LH_C(hx_7, tx_7) -> 
//│ 		          (`LH_C(((f_2_9 hx_7) hy_7), (((zipWith_lz_nl_lh__d1 f_2_9) tx_7) ty_7)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec regs_lh__d1 _lh_regs_arg1_0 =
//│ 		  let rec ilabel_0 = (fun _lh_ilabel_arg1_0 _lh_ilabel_arg2_0 -> 
//│ 		    (`LH_P2(((mappend_lh__d2 (`LH_C('x', (`LH_N)))) (string_of_int _lh_ilabel_arg1_0)), _lh_ilabel_arg2_0)))
//│ 		  and olabel_0 = (fun _lh_olabel_arg1_0 _lh_olabel_arg2_0 -> 
//│ 		    (`LH_P2(((mappend_lh__d1 (`LH_C('y', (`LH_N)))) (string_of_int _lh_olabel_arg1_0)), _lh_olabel_arg2_0)))
//│ 		  in (let rec is_0 = (`LH_C((`LH_P2((`LH_C('s', (`LH_C('t', (`LH_C('o', (`LH_N))))))), 0)), (((zipWith_lz_nl_lh__d1 ilabel_0) (enumFrom_lh__d1 0)) (let rec _lh_listcomp_fun_1_4 = (fun _lh_listcomp_fun_para_1_4 -> 
//│ 		    (match _lh_listcomp_fun_para_1_4 with
//│ 		      | `LH_C(_lh_listcomp_fun_ls_h_1_4, _lh_listcomp_fun_ls_t_1_4) -> 
//│ 		        (`LH_C(((7 * _lh_listcomp_fun_ls_h_1_4) + 1), (_lh_listcomp_fun_1_4 _lh_listcomp_fun_ls_t_1_4)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))) in
//│ 		    (_lh_listcomp_fun_1_4 ((enumFromTo_lh__d2 0) (_lh_regs_arg1_0 - 1))))))) in
//│ 		    (let rec os_0 = (((zipWith_lz_nl_lh__d2 olabel_0) (enumFrom_lh__d2 0)) (let rec _lh_listcomp_fun_1_5 = (fun _lh_listcomp_fun_para_1_5 -> 
//│ 		      (match _lh_listcomp_fun_para_1_5 with
//│ 		        | `LH_C(_lh_listcomp_fun_ls_h_1_5, _lh_listcomp_fun_ls_t_1_5) -> 
//│ 		          (`LH_C(((7 * _lh_listcomp_fun_ls_h_1_5) + 7), (_lh_listcomp_fun_1_5 _lh_listcomp_fun_ls_t_1_5)))
//│ 		        | `LH_N -> 
//│ 		          (`LH_N))) in
//│ 		      (_lh_listcomp_fun_1_5 ((enumFromTo_lh__d3 0) (_lh_regs_arg1_0 - 1))))) in
//│ 		      (let rec sto_0 = (`PS(0, (`Inp), 0, (`LH_N), (`LH_C((`LH_P6(0, (`F), false, 0, true, ((8 * (_lh_regs_arg1_0 - 1)) + 5))), (`LH_N))))) in
//│ 		        (let rec states_0 = (`LH_C(sto_0, (concat_lh__d1 ((map_lh__d1 (reg_lh__d1 0)) (let rec _lh_listcomp_fun_1_6 = (fun _lh_listcomp_fun_para_1_6 -> 
//│ 		          (match _lh_listcomp_fun_para_1_6 with
//│ 		            | `LH_C(_lh_listcomp_fun_ls_h_1_6, _lh_listcomp_fun_ls_t_1_6) -> 
//│ 		              (`LH_C(((7 * _lh_listcomp_fun_ls_h_1_6) + 1), (_lh_listcomp_fun_1_6 _lh_listcomp_fun_ls_t_1_6)))
//│ 		            | `LH_N -> 
//│ 		              (`LH_N))) in
//│ 		          (_lh_listcomp_fun_1_6 ((enumFromTo_lh__d1 0) (_lh_regs_arg1_0 - 1)))))))) in
//│ 		          (`LH_P4((1 + (7 * _lh_regs_arg1_0)), is_0, os_0, states_0))))));;
//│ 		let rec run_lh__d1 _lh_run_arg1_0 _lh_run_arg2_0 =
//│ 		  (let rec example_0 = (pad_circuit_lh__d1 (regs_lh__d1 _lh_run_arg1_0)) in
//│ 		    (let rec inputs_0 = ((copy_lh__d2 (_lh_run_arg1_0 + 1)) (`T)) in
//│ 		      (let rec cycles_0 = ((copy_lh__d1 _lh_run_arg2_0) inputs_0) in
//│ 		        ((circuit_simulate_lh__d1 cycles_0) example_0))));;
//│ 		let rec testCircsim_nofib_lh__d1 _lh_testCircsim_nofib_arg1_0 =
//│ 		  ((run_lh__d1 8) _lh_testCircsim_nofib_arg1_0);;
//│ 		(testCircsim_nofib_lh__d1 40)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< after expansion <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [Cell _lh_upsweep_Cell_0⁰]: 50 --->
//│ 	case _lh_downsweep_arg3⁰ of {Cell _lh_downsweep_Cell_0⁰ => [Cell _lh_downsweep_arg2⁰] | Node _lh_downsweep_Node_0⁰ _lh_downsweep_Node_1⁰ _lh_downsweep_Node_2⁰ => case _lh_downsweep_Node_0⁰ of {LH_P2 _lh_downsweep_LH_P2_0⁰ _lh_downsweep_LH_P2_1⁰ => let _lh_matchIdent² = _lh_downsweep_arg1⁰(_lh_downsweep_LH_P2_0⁰, _lh_downsweep_LH_P2_1⁰, _lh_downsweep_arg2⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_downsweep_LH_P2_0¹ _lh_downsweep_LH_P2_1¹ => let _lh_matchIdent³ = [LH_P2 downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_0¹, _lh_downsweep_Node_1⁰) downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_1¹, _lh_downsweep_Node_2⁰)]
//│ in case _lh_matchIdent³ of {LH_P2 _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1² => [Node [Unit] _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1²]}}}}: 120
//│ [LH_P2 _lh_upsweep_LH_P2_0⁰ _lh_upsweep_LH_P2_0¹]: 71 --->
//│ 	case _lh_downsweep_Node_0⁰ of {LH_P2 _lh_downsweep_LH_P2_0⁰ _lh_downsweep_LH_P2_1⁰ => let _lh_matchIdent² = _lh_downsweep_arg1⁰(_lh_downsweep_LH_P2_0⁰, _lh_downsweep_LH_P2_1⁰, _lh_downsweep_arg2⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_downsweep_LH_P2_0¹ _lh_downsweep_LH_P2_1¹ => let _lh_matchIdent³ = [LH_P2 downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_0¹, _lh_downsweep_Node_1⁰) downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_1¹, _lh_downsweep_Node_2⁰)]
//│ in case _lh_matchIdent³ of {LH_P2 _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1² => [Node [Unit] _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1²]}}}: 119
//│ [Node [LH_P2 _lh_upsweep_LH_P2_0⁰ _lh_upsweep_LH_P2_0¹] _lh_upsweep_LH_P2_1⁰ _lh_upsweep_LH_P2_1¹]: 74 --->
//│ 	case _lh_downsweep_arg3⁰ of {Cell _lh_downsweep_Cell_0⁰ => [Cell _lh_downsweep_arg2⁰] | Node _lh_downsweep_Node_0⁰ _lh_downsweep_Node_1⁰ _lh_downsweep_Node_2⁰ => case _lh_downsweep_Node_0⁰ of {LH_P2 _lh_downsweep_LH_P2_0⁰ _lh_downsweep_LH_P2_1⁰ => let _lh_matchIdent² = _lh_downsweep_arg1⁰(_lh_downsweep_LH_P2_0⁰, _lh_downsweep_LH_P2_1⁰, _lh_downsweep_arg2⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_downsweep_LH_P2_0¹ _lh_downsweep_LH_P2_1¹ => let _lh_matchIdent³ = [LH_P2 downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_0¹, _lh_downsweep_Node_1⁰) downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_1¹, _lh_downsweep_Node_2⁰)]
//│ in case _lh_matchIdent³ of {LH_P2 _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1² => [Node [Unit] _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1²]}}}}: 120
//│ [LH_P2 downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_0¹, _lh_downsweep_Node_1⁰) downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_1¹, _lh_downsweep_Node_2⁰)]: 109 --->
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1² => [Node [Unit] _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1²]}: 115
//│ [Cell _lh_put_LH_C_0⁰]: 185 --->
//│ 	case _lh_upsweep_arg2⁰ of {Cell _lh_upsweep_Cell_0⁰ => [LH_P2 _lh_upsweep_Cell_0⁰ [Cell _lh_upsweep_Cell_0⁰]] | Node _lh_upsweep_Node_0⁰ _lh_upsweep_Node_1⁰ _lh_upsweep_Node_2⁰ => let _lh_matchIdent⁰ = upsweep_lh_₁(_lh_upsweep_arg1⁰, _lh_upsweep_Node_1⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_upsweep_LH_P2_0⁰ _lh_upsweep_LH_P2_1⁰ => let _lh_matchIdent¹ = upsweep_lh_₁(_lh_upsweep_arg1⁰, _lh_upsweep_Node_2⁰)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_upsweep_LH_P2_0¹ _lh_upsweep_LH_P2_1¹ => [LH_P2 _lh_upsweep_arg1⁰(_lh_upsweep_LH_P2_0⁰, _lh_upsweep_LH_P2_0¹) [Node [LH_P2 _lh_upsweep_LH_P2_0⁰ _lh_upsweep_LH_P2_0¹] _lh_upsweep_LH_P2_1⁰ _lh_upsweep_LH_P2_1¹]]}}}: 80
//│ [Node [Unit] put_lh_₁(_lh_put_LH_P2_0⁰) put_lh_₁(_lh_put_LH_P2_1⁰)]: 205 --->
//│ 	case _lh_upsweep_arg2⁰ of {Cell _lh_upsweep_Cell_0⁰ => [LH_P2 _lh_upsweep_Cell_0⁰ [Cell _lh_upsweep_Cell_0⁰]] | Node _lh_upsweep_Node_0⁰ _lh_upsweep_Node_1⁰ _lh_upsweep_Node_2⁰ => let _lh_matchIdent⁰ = upsweep_lh_₁(_lh_upsweep_arg1⁰, _lh_upsweep_Node_1⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_upsweep_LH_P2_0⁰ _lh_upsweep_LH_P2_1⁰ => let _lh_matchIdent¹ = upsweep_lh_₁(_lh_upsweep_arg1⁰, _lh_upsweep_Node_2⁰)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_upsweep_LH_P2_0¹ _lh_upsweep_LH_P2_1¹ => [LH_P2 _lh_upsweep_arg1⁰(_lh_upsweep_LH_P2_0⁰, _lh_upsweep_LH_P2_0¹) [Node [LH_P2 _lh_upsweep_LH_P2_0⁰ _lh_upsweep_LH_P2_0¹] _lh_upsweep_LH_P2_1⁰ _lh_upsweep_LH_P2_1¹]]}}}: 80
//│ [Node [Unit] put_lh_₁(_lh_put_LH_P2_0¹) put_lh_₁(_lh_put_LH_P2_1¹)]: 228 --->
//│ 	case _lh_upsweep_arg2⁰ of {Cell _lh_upsweep_Cell_0⁰ => [LH_P2 _lh_upsweep_Cell_0⁰ [Cell _lh_upsweep_Cell_0⁰]] | Node _lh_upsweep_Node_0⁰ _lh_upsweep_Node_1⁰ _lh_upsweep_Node_2⁰ => let _lh_matchIdent⁰ = upsweep_lh_₁(_lh_upsweep_arg1⁰, _lh_upsweep_Node_1⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_upsweep_LH_P2_0⁰ _lh_upsweep_LH_P2_1⁰ => let _lh_matchIdent¹ = upsweep_lh_₁(_lh_upsweep_arg1⁰, _lh_upsweep_Node_2⁰)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_upsweep_LH_P2_0¹ _lh_upsweep_LH_P2_1¹ => [LH_P2 _lh_upsweep_arg1⁰(_lh_upsweep_LH_P2_0⁰, _lh_upsweep_LH_P2_0¹) [Node [LH_P2 _lh_upsweep_LH_P2_0⁰ _lh_upsweep_LH_P2_0¹] _lh_upsweep_LH_P2_1⁰ _lh_upsweep_LH_P2_1¹]]}}}: 80
//│ [LH_P3 _lh_up_i_LH_P8_0⁰ _lh_up_i_LH_P8_1⁰ _lh_up_i_LH_P8_2⁰]: 254 --->
//│ 	case _lh_compare_and_update_arg1⁰ of {LH_P3 _lh_compare_and_update_LH_P3_0⁰ _lh_compare_and_update_LH_P3_1⁰ _lh_compare_and_update_LH_P3_2⁰ => case _lh_compare_and_update_arg2⁰ of {LH_P3 _lh_compare_and_update_LH_P3_0¹ _lh_compare_and_update_LH_P3_1¹ _lh_compare_and_update_LH_P3_2¹ => if polyEq⁰([LH_P2 _lh_compare_and_update_LH_P3_0⁰ _lh_compare_and_update_LH_P3_1⁰], [LH_P2 _lh_compare_and_update_LH_P3_0¹ _lh_compare_and_update_LH_P3_1¹]) then [LH_P3 _lh_compare_and_update_LH_P3_0¹ _lh_compare_and_update_LH_P3_1¹ _lh_compare_and_update_LH_P3_2⁰] else [LH_P3 _lh_compare_and_update_LH_P3_0¹ _lh_compare_and_update_LH_P3_1¹ _lh_compare_and_update_LH_P3_2¹]}}: 158
//│ [LH_P6 _lh_check_right_LH_P6_0⁰ _lh_check_right_LH_P6_1⁰ _lh_check_right_LH_P6_2⁰ _lh_check_right_LH_P6_3⁰ _lh_check_right_LH_P6_4⁰ _lh_check_right_LH_P6_5⁰]: 309 --->
//│ 	case _lh_check_left_arg2⁰ of {LH_P6 _lh_check_left_LH_P6_0⁰ _lh_check_left_LH_P6_1⁰ _lh_check_left_LH_P6_2⁰ _lh_check_left_LH_P6_3⁰ _lh_check_left_LH_P6_4⁰ _lh_check_left_LH_P6_5⁰ => if (_lh_check_left_LH_P8_5⁰ && (_lh_check_left_LH_P8_6⁰ > 0)) then [LH_P6 _lh_check_left_LH_P6_0⁰ _lh_check_left_LH_P6_1⁰ _lh_check_left_LH_P6_2⁰ _lh_check_left_LH_P6_3⁰ _lh_check_left_LH_P6_4⁰ _lh_check_left_LH_P6_5⁰] else [LH_P6 _lh_check_left_LH_P6_0⁰ _lh_check_left_LH_P6_1⁰ _lh_check_left_LH_P6_2⁰ _lh_check_left_LH_P6_3⁰ [False] _lh_check_left_LH_P6_5⁰]}: 288
//│ [LH_P6 _lh_check_right_LH_P6_0⁰ _lh_check_right_LH_P6_1⁰ [False] _lh_check_right_LH_P6_3⁰ _lh_check_right_LH_P6_4⁰ _lh_check_right_LH_P6_5⁰]: 316 --->
//│ 	case _lh_check_left_arg2⁰ of {LH_P6 _lh_check_left_LH_P6_0⁰ _lh_check_left_LH_P6_1⁰ _lh_check_left_LH_P6_2⁰ _lh_check_left_LH_P6_3⁰ _lh_check_left_LH_P6_4⁰ _lh_check_left_LH_P6_5⁰ => if (_lh_check_left_LH_P8_5⁰ && (_lh_check_left_LH_P8_6⁰ > 0)) then [LH_P6 _lh_check_left_LH_P6_0⁰ _lh_check_left_LH_P6_1⁰ _lh_check_left_LH_P6_2⁰ _lh_check_left_LH_P6_3⁰ _lh_check_left_LH_P6_4⁰ _lh_check_left_LH_P6_5⁰] else [LH_P6 _lh_check_left_LH_P6_0⁰ _lh_check_left_LH_P6_1⁰ _lh_check_left_LH_P6_2⁰ _lh_check_left_LH_P6_3⁰ [False] _lh_check_left_LH_P6_5⁰]}: 288
//│ [LH_P2 [LH_P2 _lh_down_LH_P2_0² _lh_down_arg2⁰(_lh_down_LH_P2_1¹, _lh_down_LH_P2_1²)] [LH_P2 _lh_down_arg1⁰(_lh_down_LH_P2_0², _lh_down_LH_P2_0⁰) _lh_down_LH_P2_1²]]: 478 --->
//│ 	case _lh_matchIdent² of {LH_P2 _lh_downsweep_LH_P2_0¹ _lh_downsweep_LH_P2_1¹ => let _lh_matchIdent³ = [LH_P2 downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_0¹, _lh_downsweep_Node_1⁰) downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_1¹, _lh_downsweep_Node_2⁰)]
//│ in case _lh_matchIdent³ of {LH_P2 _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1² => [Node [Unit] _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1²]}}: 117
//│ [LH_P2 ans⁰ get_lh_₁(_lh_scanlr_LH_P2_1⁰)]: 552 --->
//│ 	case _lh_snd_arg1⁰ of {LH_P2 _lh_snd_LH_P2_0⁰ _lh_snd_LH_P2_1⁰ => _lh_snd_LH_P2_1⁰}: 1565
//│ [LH_P2 [LH_P2 _lh_down_LH_P2_0⁵ _lh_down_arg2¹(_lh_down_LH_P2_1⁴, _lh_down_LH_P2_1⁵)] [LH_P2 _lh_down_arg1¹(_lh_down_LH_P2_0⁵, _lh_down_LH_P2_0³) _lh_down_LH_P2_1⁵]]: 811 --->
//│ 	case _lh_matchIdent² of {LH_P2 _lh_downsweep_LH_P2_0¹ _lh_downsweep_LH_P2_1¹ => let _lh_matchIdent³ = [LH_P2 downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_0¹, _lh_downsweep_Node_1⁰) downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_1¹, _lh_downsweep_Node_2⁰)]
//│ in case _lh_matchIdent³ of {LH_P2 _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1² => [Node [Unit] _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1²]}}: 117
//│ [LH_P2 ans¹ get_lh_₁(_lh_scanlr_LH_P2_1²)]: 885 --->
//│ 	case _lh_snd_arg1¹ of {LH_P2 _lh_snd_LH_P2_0¹ _lh_snd_LH_P2_1¹ => _lh_snd_LH_P2_1¹}: 1965
//│ [LH_C _lh_copy_lz_arg2⁰ copy_lz_lh_₂((_lh_copy_lz_arg1⁰ - 1), _lh_copy_lz_arg2⁰)]: 941 --->
//│ 	case force⁰(ls³) of {LH_C h³ t³ => [LH_C h³ take_lz_lh_₂((n¹ - 1), t³)] | LH_N  => [LH_N]}: 1047
//│ [LH_N]: 944 --->
//│ 	case force⁰(ls³) of {LH_C h³ t³ => [LH_C h³ take_lz_lh_₂((n¹ - 1), t³)] | LH_N  => [LH_N]}: 1047
//│ [LH_C _lh_append__lz_LH_C_0⁰ append__lz_lh_₂(_lh_append__lz_LH_C_1⁰, _lh_append__lz_arg2⁰)]: 1021 --->
//│ 	case force⁰(ls³) of {LH_C h³ t³ => [LH_C h³ take_lz_lh_₂((n¹ - 1), t³)] | LH_N  => [LH_N]}: 1047
//│ [LH_C [LH_C _lh_combine_arg1¹ _lh_combine_arg2¹] transpose_lh_₁([LH_C _lh_combine_arg3¹ _lh_combine_arg4¹])]: 1191 --->
//│ 	case ls¹⁵ of {LH_C h¹⁵ t¹⁵ => [LH_C f¹⁴(h¹⁵) map_lh_₁₀(f¹⁴, t¹⁵)] | LH_N  => [LH_N]}: 1960
//│ [LH_C f⁴(h⁶) map_lh_₁₉(f⁴, t⁶)]: 1405 --->
//│ 	case _lh_or_arg1⁰ of {LH_N  => [False] | LH_C _lh_or_LH_C_0⁰ _lh_or_LH_C_1⁰ => if _lh_or_LH_C_0⁰ then [True] else or_lh_₄(_lh_or_LH_C_1⁰)}: 1418
//│ [LH_N]: 1406 --->
//│ 	case _lh_or_arg1⁰ of {LH_N  => [False] | LH_C _lh_or_LH_C_0⁰ _lh_or_LH_C_1⁰ => if _lh_or_LH_C_0⁰ then [True] else or_lh_₄(_lh_or_LH_C_1⁰)}: 1418
//│ [LH_C f⁵(h⁷) map_lh_₁₈(f⁵, t⁷)]: 1455 --->
//│ 	case ls⁶ of {LH_C h⁶ t⁶ => [LH_C f⁴(h⁶) map_lh_₁₉(f⁴, t⁶)] | LH_N  => [LH_N]}: 1407
//│ [LH_N]: 1456 --->
//│ 	case ls⁶ of {LH_C h⁶ t⁶ => [LH_C f⁴(h⁶) map_lh_₁₉(f⁴, t⁶)] | LH_N  => [LH_N]}: 1407
//│ [LH_C f⁶(h⁸) map_lh_₁₇(f⁶, t⁸)]: 1469 --->
//│ 	case _lh_or_arg1¹ of {LH_N  => [False] | LH_C _lh_or_LH_C_0¹ _lh_or_LH_C_1¹ => if _lh_or_LH_C_0¹ then [True] else or_lh_₃(_lh_or_LH_C_1¹)}: 1428
//│ [LH_N]: 1470 --->
//│ 	case _lh_or_arg1¹ of {LH_N  => [False] | LH_C _lh_or_LH_C_0¹ _lh_or_LH_C_1¹ => if _lh_or_LH_C_0¹ then [True] else or_lh_₃(_lh_or_LH_C_1¹)}: 1428
//│ [LH_C f⁸(h¹⁰) map_lh_₁₅(f⁸, t¹⁰)]: 1501 --->
//│ 	case ls⁹ of {LH_C h⁹ t⁹ => [LH_C f⁷(h⁹) map_lh_₁₆(f⁷, t⁹)] | LH_N  => [LH_N]}: 1489
//│ [LH_N]: 1502 --->
//│ 	case ls⁹ of {LH_C h⁹ t⁹ => [LH_C f⁷(h⁹) map_lh_₁₆(f⁷, t⁹)] | LH_N  => [LH_N]}: 1489
//│ [LH_C f¹¹(h¹²) map_lh_₁₃(f¹¹, t¹²)]: 1792 --->
//│ 	case ls¹³ of {LH_C h¹³ t¹³ => [LH_C f¹²(h¹³) map_lh_₁₂(f¹², t¹³)] | LH_N  => [LH_N]}: 1808
//│ [LH_N]: 1793 --->
//│ 	case ls¹³ of {LH_C h¹³ t¹³ => [LH_C f¹²(h¹³) map_lh_₁₂(f¹², t¹³)] | LH_N  => [LH_N]}: 1808
//│ [LH_C f¹²(h¹³) map_lh_₁₂(f¹², t¹³)]: 1806 --->
//│ 	case _lh_or_arg1² of {LH_N  => [False] | LH_C _lh_or_LH_C_0² _lh_or_LH_C_1² => if _lh_or_LH_C_0² then [True] else or_lh_₂(_lh_or_LH_C_1²)}: 1823
//│ [LH_N]: 1807 --->
//│ 	case _lh_or_arg1² of {LH_N  => [False] | LH_C _lh_or_LH_C_0² _lh_or_LH_C_1² => if _lh_or_LH_C_0² then [True] else or_lh_₂(_lh_or_LH_C_1²)}: 1823
//│ [LH_C f¹³(h¹⁴) map_lh_₁₁(f¹³, t¹⁴)]: 1844 --->
//│ 	case _lh_or_arg1³ of {LH_N  => [False] | LH_C _lh_or_LH_C_0³ _lh_or_LH_C_1³ => if _lh_or_LH_C_0³ then [True] else or_lh_₁(_lh_or_LH_C_1³)}: 1833
//│ [LH_N]: 1845 --->
//│ 	case _lh_or_arg1³ of {LH_N  => [False] | LH_C _lh_or_LH_C_0³ _lh_or_LH_C_1³ => if _lh_or_LH_C_0³ then [True] else or_lh_₁(_lh_or_LH_C_1³)}: 1833
//│ [LH_C f¹⁷(h¹⁷) map_lh_₈(f¹⁷, t¹⁷)]: 2090 --->
//│ 	case ls¹⁶ of {LH_C h¹⁶ t¹⁶ => [LH_C f¹⁵(h¹⁶) map_lh_₉(f¹⁵, t¹⁶)] | LH_N  => [LH_N]}: 2025
//│ [LH_N]: 2091 --->
//│ 	case ls¹⁶ of {LH_C h¹⁶ t¹⁶ => [LH_C f¹⁵(h¹⁶) map_lh_₉(f¹⁵, t¹⁶)] | LH_N  => [LH_N]}: 2025
//│ [LH_N]: 2096 --->
//│ 	case ls¹⁵ of {LH_C h¹⁵ t¹⁵ => [LH_C f¹⁴(h¹⁵) map_lh_₁₀(f¹⁴, t¹⁵)] | LH_N  => [LH_N]}: 1960
//│ [LH_P2 hx⁵ hy⁵]: 2647 --->
//│ 	case _lh_listcomp_fun_ls_h¹¹ of {LH_P2 _lh_store_inputs_LH_P2_0⁰ _lh_store_inputs_LH_P2_1⁰ => case _lh_store_inputs_LH_P2_0⁰ of {LH_P2 _lh_store_inputs_LH_P2_0¹ _lh_store_inputs_LH_P2_1¹ => if (_lh_store_inputs_PS_0⁰ == _lh_store_inputs_LH_P2_1¹) then [LH_C update_outports_lh_₂([PS _lh_store_inputs_PS_0⁰ [Inp] _lh_store_inputs_PS_2⁰ _lh_store_inputs_PS_3⁰ _lh_store_inputs_PS_4⁰], _lh_store_inputs_LH_P2_1⁰) _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | _  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)} | _  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)}: 2822
//│ [LH_C [LH_P2 hx⁵ hy⁵] zip_lh_₁(tx⁵, ty⁵)]: 2653 --->
//│ 	case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => case _lh_listcomp_fun_ls_h¹¹ of {LH_P2 _lh_store_inputs_LH_P2_0⁰ _lh_store_inputs_LH_P2_1⁰ => case _lh_store_inputs_LH_P2_0⁰ of {LH_P2 _lh_store_inputs_LH_P2_0¹ _lh_store_inputs_LH_P2_1¹ => if (_lh_store_inputs_PS_0⁰ == _lh_store_inputs_LH_P2_1¹) then [LH_C update_outports_lh_₂([PS _lh_store_inputs_PS_0⁰ [Inp] _lh_store_inputs_PS_2⁰ _lh_store_inputs_PS_3⁰ _lh_store_inputs_PS_4⁰], _lh_store_inputs_LH_P2_1⁰) _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | _  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)} | _  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)} | LH_N  => [LH_N]}: 2824
//│ [LH_N]: 2654 --->
//│ 	case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => case _lh_listcomp_fun_ls_h¹¹ of {LH_P2 _lh_store_inputs_LH_P2_0⁰ _lh_store_inputs_LH_P2_1⁰ => case _lh_store_inputs_LH_P2_0⁰ of {LH_P2 _lh_store_inputs_LH_P2_0¹ _lh_store_inputs_LH_P2_1¹ => if (_lh_store_inputs_PS_0⁰ == _lh_store_inputs_LH_P2_1¹) then [LH_C update_outports_lh_₂([PS _lh_store_inputs_PS_0⁰ [Inp] _lh_store_inputs_PS_2⁰ _lh_store_inputs_PS_3⁰ _lh_store_inputs_PS_4⁰], _lh_store_inputs_LH_P2_1⁰) _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | _  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)} | _  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)} | LH_N  => [LH_N]}: 2824
//│ [LH_N]: 2656 --->
//│ 	case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => case _lh_listcomp_fun_ls_h¹¹ of {LH_P2 _lh_store_inputs_LH_P2_0⁰ _lh_store_inputs_LH_P2_1⁰ => case _lh_store_inputs_LH_P2_0⁰ of {LH_P2 _lh_store_inputs_LH_P2_0¹ _lh_store_inputs_LH_P2_1¹ => if (_lh_store_inputs_PS_0⁰ == _lh_store_inputs_LH_P2_1¹) then [LH_C update_outports_lh_₂([PS _lh_store_inputs_PS_0⁰ [Inp] _lh_store_inputs_PS_2⁰ _lh_store_inputs_PS_3⁰ _lh_store_inputs_PS_4⁰], _lh_store_inputs_LH_P2_1⁰) _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | _  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)} | _  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)} | LH_N  => [LH_N]}: 2824
//│ [LH_C a⁰ enumFromTo_lh_₄((a⁰ + 1), b⁰)]: 2764 --->
//│ 	case ls²² of {LH_C h²² t²² => foldl_lh_₁(f²³, f²³(i¹, h²²), t²²) | LH_N  => i¹}: 2782
//│ [LH_N]: 2765 --->
//│ 	case ls²² of {LH_C h²² t²² => foldl_lh_₁(f²³, f²³(i¹, h²²), t²²) | LH_N  => i¹}: 2782
//│ [LH_P4 _lh_simulate_LH_P4_0⁰ _lh_simulate_LH_P4_1⁰ _lh_simulate_LH_P4_2⁰ _lh_simulate_LH_P4_3⁰]: 3131 --->
//│ 	case _lh_critical_path_depth_arg1⁰ of {LH_P4 _lh_critical_path_depth_LH_P4_0⁰ _lh_critical_path_depth_LH_P4_1⁰ _lh_critical_path_depth_LH_P4_2⁰ _lh_critical_path_depth_LH_P4_3⁰ => maximum_lh_₁(map_lh_₆(pathDepth_lh_₁, _lh_critical_path_depth_LH_P4_3⁰))}: 2918
//│ [LH_C a¹ enumFromTo_lh_₃((a¹ + 1), b¹)]: 3166 --->
//│ 	case _lh_listcomp_fun_para¹⁵ of {LH_C _lh_listcomp_fun_ls_h¹⁵ _lh_listcomp_fun_ls_t¹⁵ => [LH_C ((7 * _lh_listcomp_fun_ls_h¹⁵) + 7) _lh_listcomp_fun¹⁵(_lh_listcomp_fun_ls_t¹⁵)] | LH_N  => [LH_N]}: 3768
//│ [LH_N]: 3167 --->
//│ 	case _lh_listcomp_fun_para¹⁵ of {LH_C _lh_listcomp_fun_ls_h¹⁵ _lh_listcomp_fun_ls_t¹⁵ => [LH_C ((7 * _lh_listcomp_fun_ls_h¹⁵) + 7) _lh_listcomp_fun¹⁵(_lh_listcomp_fun_ls_t¹⁵)] | LH_N  => [LH_N]}: 3768
//│ [LH_C a² enumFromTo_lh_₂((a² + 1), b²)]: 3186 --->
//│ 	case _lh_listcomp_fun_para¹⁴ of {LH_C _lh_listcomp_fun_ls_h¹⁴ _lh_listcomp_fun_ls_t¹⁴ => [LH_C ((7 * _lh_listcomp_fun_ls_h¹⁴) + 1) _lh_listcomp_fun¹⁴(_lh_listcomp_fun_ls_t¹⁴)] | LH_N  => [LH_N]}: 3730
//│ [LH_N]: 3187 --->
//│ 	case _lh_listcomp_fun_para¹⁴ of {LH_C _lh_listcomp_fun_ls_h¹⁴ _lh_listcomp_fun_ls_t¹⁴ => [LH_C ((7 * _lh_listcomp_fun_ls_h¹⁴) + 1) _lh_listcomp_fun¹⁴(_lh_listcomp_fun_ls_t¹⁴)] | LH_N  => [LH_N]}: 3730
//│ [LH_C a³ enumFrom_lh_₂((a³ + 1))]: 3248 --->
//│ 	case force⁰(xs¹⁰) of {LH_C hx⁶ tx⁶ => [LH_C f²⁷(hx⁶, hy⁶) zipWith_lz_nl_lh_₂(f²⁷, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 3221
//│ [LH_C f²⁸(h³²) map_lh_₁(f²⁸, t³²)]: 3260 --->
//│ 	case lss⁰ of {LH_C h³³ t³³ => mappend_lh_₃(h³³, concat_lh_₁(t³³)) | LH_N  => [LH_N]}: 3499
//│ [LH_N]: 3261 --->
//│ 	case lss⁰ of {LH_C h³³ t³³ => mappend_lh_₃(h³³, concat_lh_₁(t³³)) | LH_N  => [LH_N]}: 3499
//│ [LH_C a⁴ enumFrom_lh_₁((a⁴ + 1))]: 3274 --->
//│ 	case force⁰(xs¹²) of {LH_C hx⁷ tx⁷ => [LH_C f²⁹(hx⁷, hy⁷) zipWith_lz_nl_lh_₁(f²⁹, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 3519
//│ [LH_C a⁵ enumFromTo_lh_₁((a⁵ + 1), b³)]: 3292 --->
//│ 	case _lh_listcomp_fun_para¹⁶ of {LH_C _lh_listcomp_fun_ls_h¹⁶ _lh_listcomp_fun_ls_t¹⁶ => [LH_C ((7 * _lh_listcomp_fun_ls_h¹⁶) + 1) _lh_listcomp_fun¹⁶(_lh_listcomp_fun_ls_t¹⁶)] | LH_N  => [LH_N]}: 3831
//│ [LH_N]: 3293 --->
//│ 	case _lh_listcomp_fun_para¹⁶ of {LH_C _lh_listcomp_fun_ls_h¹⁶ _lh_listcomp_fun_ls_t¹⁶ => [LH_C ((7 * _lh_listcomp_fun_ls_h¹⁶) + 1) _lh_listcomp_fun¹⁶(_lh_listcomp_fun_ls_t¹⁶)] | LH_N  => [LH_N]}: 3831
//│ [LH_C _lh_append__lz_LH_C_0¹ append__lz_lh_₁(_lh_append__lz_LH_C_1¹, _lh_append__lz_arg2¹)]: 3535 --->
//│ 	case force⁰(ls³⁰) of {LH_C h³⁴ t³⁴ => [LH_C h³⁴ take_lz_lh_₁((n² - 1), t³⁴)] | LH_N  => [LH_N]}: 3617
//│ [LH_C _lh_copy_lz_arg2¹ copy_lz_lh_₁((_lh_copy_lz_arg1¹ - 1), _lh_copy_lz_arg2¹)]: 3589 --->
//│ 	case force⁰(ls³⁰) of {LH_C h³⁴ t³⁴ => [LH_C h³⁴ take_lz_lh_₁((n² - 1), t³⁴)] | LH_N  => [LH_N]}: 3617
//│ [LH_N]: 3592 --->
//│ 	case force⁰(ls³⁰) of {LH_C h³⁴ t³⁴ => [LH_C h³⁴ take_lz_lh_₁((n² - 1), t³⁴)] | LH_N  => [LH_N]}: 3617
//│ [LH_C _lh_copy_arg2⁰ copy_lh_₂((_lh_copy_arg1⁰ - 1), _lh_copy_arg2⁰)]: 3637 --->
//│ 	case ys⁵ of {LH_C hy⁵ ty⁵ => [LH_C [LH_P2 hx⁵ hy⁵] zip_lh_₁(tx⁵, ty⁵)] | LH_N  => [LH_N]}: 2655
//│ [LH_N]: 3638 --->
//│ 	case ys⁵ of {LH_C hy⁵ ty⁵ => [LH_C [LH_P2 hx⁵ hy⁵] zip_lh_₁(tx⁵, ty⁵)] | LH_N  => [LH_N]}: 2655
//│ [LH_C _lh_copy_arg2¹ copy_lh_₁((_lh_copy_arg1¹ - 1), _lh_copy_arg2¹)]: 3657 --->
//│ 	case _lh_matchIdent¹⁹ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰)}: 3022
//│ [LH_N]: 3658 --->
//│ 	case _lh_matchIdent¹⁹ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰)}: 3022
//│ [LH_N]: 3675 --->
//│ 	case xs⁹ of {LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₂(t³⁰, ys⁷)] | LH_N  => ys⁷}: 3200
//│ [LH_C 'x' [LH_N]]: 3676 --->
//│ 	case xs⁹ of {LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₂(t³⁰, ys⁷)] | LH_N  => ys⁷}: 3200
//│ [LH_N]: 3688 --->
//│ 	case xs¹¹ of {LH_C h³¹ t³¹ => [LH_C h³¹ mappend_lh_₁(t³¹, ys⁹)] | LH_N  => ys⁹}: 3236
//│ [LH_C 'y' [LH_N]]: 3689 --->
//│ 	case xs¹¹ of {LH_C h³¹ t³¹ => [LH_C h³¹ mappend_lh_₁(t³¹, ys⁹)] | LH_N  => ys⁹}: 3236
//│ [LH_C ((7 * _lh_listcomp_fun_ls_h¹⁴) + 1) _lh_listcomp_fun¹⁴(_lh_listcomp_fun_ls_t¹⁴)]: 3728 --->
//│ 	case ys¹⁰ of {LH_C hy⁷ ty⁷ => case force⁰(xs¹²) of {LH_C hx⁷ tx⁷ => [LH_C f²⁹(hx⁷, hy⁷) zipWith_lz_nl_lh_₁(f²⁹, tx⁷, ty⁷)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 3521
//│ [LH_N]: 3729 --->
//│ 	case ys¹⁰ of {LH_C hy⁷ ty⁷ => case force⁰(xs¹²) of {LH_C hx⁷ tx⁷ => [LH_C f²⁹(hx⁷, hy⁷) zipWith_lz_nl_lh_₁(f²⁹, tx⁷, ty⁷)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 3521
//│ [LH_C ((7 * _lh_listcomp_fun_ls_h¹⁵) + 7) _lh_listcomp_fun¹⁵(_lh_listcomp_fun_ls_t¹⁵)]: 3766 --->
//│ 	case ys⁸ of {LH_C hy⁶ ty⁶ => case force⁰(xs¹⁰) of {LH_C hx⁶ tx⁶ => [LH_C f²⁷(hx⁶, hy⁶) zipWith_lz_nl_lh_₂(f²⁷, tx⁶, ty⁶)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 3223
//│ [LH_N]: 3767 --->
//│ 	case ys⁸ of {LH_C hy⁶ ty⁶ => case force⁰(xs¹⁰) of {LH_C hx⁶ tx⁶ => [LH_C f²⁷(hx⁶, hy⁶) zipWith_lz_nl_lh_₂(f²⁷, tx⁶, ty⁶)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 3223
//│ [LH_C ((7 * _lh_listcomp_fun_ls_h¹⁶) + 1) _lh_listcomp_fun¹⁶(_lh_listcomp_fun_ls_t¹⁶)]: 3829 --->
//│ 	case ls²⁹ of {LH_C h³² t³² => [LH_C f²⁸(h³²) map_lh_₁(f²⁸, t³²)] | LH_N  => [LH_N]}: 3262
//│ [LH_N]: 3830 --->
//│ 	case ls²⁹ of {LH_C h³² t³² => [LH_C f²⁸(h³²) map_lh_₁(f²⁸, t³²)] | LH_N  => [LH_N]}: 3262
//│ [LH_P4 (1 + (7 * _lh_regs_arg1⁰)) is⁰ os⁰ states⁰]: 3860 --->
//│ 	case _lh_pad_circuit_arg1⁰ of {LH_P4 _lh_pad_circuit_LH_P4_0⁰ _lh_pad_circuit_LH_P4_1⁰ _lh_pad_circuit_LH_P4_2⁰ _lh_pad_circuit_LH_P4_3⁰ => let p2⁰ = nearest_power_of_two_lh_₁(_lh_pad_circuit_LH_P4_0⁰)
//│ in [LH_P4 p2⁰ _lh_pad_circuit_LH_P4_1⁰ _lh_pad_circuit_LH_P4_2⁰ take_lz_lh_₁(p2⁰, append__lz_lh_₁(_lh_pad_circuit_LH_P4_3⁰, copy_lz_lh_₁(p2⁰, emptyState_lh_₁)))]}: 3889
//│ [LH_P4 p2⁰ _lh_pad_circuit_LH_P4_1⁰ _lh_pad_circuit_LH_P4_2⁰ take_lz_lh_₁(p2⁰, append__lz_lh_₁(_lh_pad_circuit_LH_P4_3⁰, copy_lz_lh_₁(p2⁰, emptyState_lh_₁)))]: 3887 --->
//│ 	case _lh_simulate_arg2⁰ of {LH_P4 _lh_simulate_LH_P4_0⁰ _lh_simulate_LH_P4_1⁰ _lh_simulate_LH_P4_2⁰ _lh_simulate_LH_P4_3⁰ => tail_lh_₁(scanl_lh_₁(do_cycle_lh_₁(critical_path_depth_lh_₁([LH_P4 _lh_simulate_LH_P4_0⁰ _lh_simulate_LH_P4_1⁰ _lh_simulate_LH_P4_2⁰ _lh_simulate_LH_P4_3⁰])), [LH_P4 _lh_simulate_LH_P4_0⁰ _lh_simulate_LH_P4_1⁰ _lh_simulate_LH_P4_2⁰ map_lh_₃(init_dffs_lh_₁, _lh_simulate_LH_P4_3⁰)], _lh_simulate_arg1⁰))}: 3148
//│ ------------------
//│ case _lh_upsweep_arg2⁰ of {Cell _lh_upsweep_Cell_0⁰ => [LH_P2 _lh_upsweep_Cell_0⁰ [Cell _lh_upsweep_Cell_0⁰]] | Node _lh_upsweep_Node_0⁰ _lh_upsweep_Node_1⁰ _lh_upsweep_Node_2⁰ => let _lh_matchIdent⁰ = upsweep_lh_₁(_lh_upsweep_arg1⁰, _lh_upsweep_Node_1⁰)
//│ in case _lh_matchIdent⁰ of {LH_P2 _lh_upsweep_LH_P2_0⁰ _lh_upsweep_LH_P2_1⁰ => let _lh_matchIdent¹ = upsweep_lh_₁(_lh_upsweep_arg1⁰, _lh_upsweep_Node_2⁰)
//│ in case _lh_matchIdent¹ of {LH_P2 _lh_upsweep_LH_P2_0¹ _lh_upsweep_LH_P2_1¹ => [LH_P2 _lh_upsweep_arg1⁰(_lh_upsweep_LH_P2_0⁰, _lh_upsweep_LH_P2_0¹) [Node [LH_P2 _lh_upsweep_LH_P2_0⁰ _lh_upsweep_LH_P2_0¹] _lh_upsweep_LH_P2_1⁰ _lh_upsweep_LH_P2_1¹]]}}}: 80 --->
//│ 	[Cell _lh_put_LH_C_0⁰]: 185
//│ 	[Node [Unit] put_lh_₁(_lh_put_LH_P2_0⁰) put_lh_₁(_lh_put_LH_P2_1⁰)]: 205
//│ 	[Node [Unit] put_lh_₁(_lh_put_LH_P2_0¹) put_lh_₁(_lh_put_LH_P2_1¹)]: 228
//│ case _lh_matchIdent³ of {LH_P2 _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1² => [Node [Unit] _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1²]}: 115 --->
//│ 	[LH_P2 downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_0¹, _lh_downsweep_Node_1⁰) downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_1¹, _lh_downsweep_Node_2⁰)]: 109
//│ case _lh_matchIdent² of {LH_P2 _lh_downsweep_LH_P2_0¹ _lh_downsweep_LH_P2_1¹ => let _lh_matchIdent³ = [LH_P2 downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_0¹, _lh_downsweep_Node_1⁰) downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_1¹, _lh_downsweep_Node_2⁰)]
//│ in case _lh_matchIdent³ of {LH_P2 _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1² => [Node [Unit] _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1²]}}: 117 --->
//│ 	[LH_P2 [LH_P2 _lh_down_LH_P2_0² _lh_down_arg2⁰(_lh_down_LH_P2_1¹, _lh_down_LH_P2_1²)] [LH_P2 _lh_down_arg1⁰(_lh_down_LH_P2_0², _lh_down_LH_P2_0⁰) _lh_down_LH_P2_1²]]: 478
//│ 	[LH_P2 [LH_P2 _lh_down_LH_P2_0⁵ _lh_down_arg2¹(_lh_down_LH_P2_1⁴, _lh_down_LH_P2_1⁵)] [LH_P2 _lh_down_arg1¹(_lh_down_LH_P2_0⁵, _lh_down_LH_P2_0³) _lh_down_LH_P2_1⁵]]: 811
//│ case _lh_downsweep_Node_0⁰ of {LH_P2 _lh_downsweep_LH_P2_0⁰ _lh_downsweep_LH_P2_1⁰ => let _lh_matchIdent² = _lh_downsweep_arg1⁰(_lh_downsweep_LH_P2_0⁰, _lh_downsweep_LH_P2_1⁰, _lh_downsweep_arg2⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_downsweep_LH_P2_0¹ _lh_downsweep_LH_P2_1¹ => let _lh_matchIdent³ = [LH_P2 downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_0¹, _lh_downsweep_Node_1⁰) downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_1¹, _lh_downsweep_Node_2⁰)]
//│ in case _lh_matchIdent³ of {LH_P2 _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1² => [Node [Unit] _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1²]}}}: 119 --->
//│ 	[LH_P2 _lh_upsweep_LH_P2_0⁰ _lh_upsweep_LH_P2_0¹]: 71
//│ case _lh_downsweep_arg3⁰ of {Cell _lh_downsweep_Cell_0⁰ => [Cell _lh_downsweep_arg2⁰] | Node _lh_downsweep_Node_0⁰ _lh_downsweep_Node_1⁰ _lh_downsweep_Node_2⁰ => case _lh_downsweep_Node_0⁰ of {LH_P2 _lh_downsweep_LH_P2_0⁰ _lh_downsweep_LH_P2_1⁰ => let _lh_matchIdent² = _lh_downsweep_arg1⁰(_lh_downsweep_LH_P2_0⁰, _lh_downsweep_LH_P2_1⁰, _lh_downsweep_arg2⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_downsweep_LH_P2_0¹ _lh_downsweep_LH_P2_1¹ => let _lh_matchIdent³ = [LH_P2 downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_0¹, _lh_downsweep_Node_1⁰) downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_LH_P2_1¹, _lh_downsweep_Node_2⁰)]
//│ in case _lh_matchIdent³ of {LH_P2 _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1² => [Node [Unit] _lh_downsweep_LH_P2_0² _lh_downsweep_LH_P2_1²]}}}}: 120 --->
//│ 	[Cell _lh_upsweep_Cell_0⁰]: 50
//│ 	[Node [LH_P2 _lh_upsweep_LH_P2_0⁰ _lh_upsweep_LH_P2_0¹] _lh_upsweep_LH_P2_1⁰ _lh_upsweep_LH_P2_1¹]: 74
//│ case _lh_compare_and_update_arg1⁰ of {LH_P3 _lh_compare_and_update_LH_P3_0⁰ _lh_compare_and_update_LH_P3_1⁰ _lh_compare_and_update_LH_P3_2⁰ => case _lh_compare_and_update_arg2⁰ of {LH_P3 _lh_compare_and_update_LH_P3_0¹ _lh_compare_and_update_LH_P3_1¹ _lh_compare_and_update_LH_P3_2¹ => if polyEq⁰([LH_P2 _lh_compare_and_update_LH_P3_0⁰ _lh_compare_and_update_LH_P3_1⁰], [LH_P2 _lh_compare_and_update_LH_P3_0¹ _lh_compare_and_update_LH_P3_1¹]) then [LH_P3 _lh_compare_and_update_LH_P3_0¹ _lh_compare_and_update_LH_P3_1¹ _lh_compare_and_update_LH_P3_2⁰] else [LH_P3 _lh_compare_and_update_LH_P3_0¹ _lh_compare_and_update_LH_P3_1¹ _lh_compare_and_update_LH_P3_2¹]}}: 158 --->
//│ 	[LH_P3 _lh_up_i_LH_P8_0⁰ _lh_up_i_LH_P8_1⁰ _lh_up_i_LH_P8_2⁰]: 254
//│ case _lh_check_left_arg2⁰ of {LH_P6 _lh_check_left_LH_P6_0⁰ _lh_check_left_LH_P6_1⁰ _lh_check_left_LH_P6_2⁰ _lh_check_left_LH_P6_3⁰ _lh_check_left_LH_P6_4⁰ _lh_check_left_LH_P6_5⁰ => if (_lh_check_left_LH_P8_5⁰ && (_lh_check_left_LH_P8_6⁰ > 0)) then [LH_P6 _lh_check_left_LH_P6_0⁰ _lh_check_left_LH_P6_1⁰ _lh_check_left_LH_P6_2⁰ _lh_check_left_LH_P6_3⁰ _lh_check_left_LH_P6_4⁰ _lh_check_left_LH_P6_5⁰] else [LH_P6 _lh_check_left_LH_P6_0⁰ _lh_check_left_LH_P6_1⁰ _lh_check_left_LH_P6_2⁰ _lh_check_left_LH_P6_3⁰ [False] _lh_check_left_LH_P6_5⁰]}: 288 --->
//│ 	[LH_P6 _lh_check_right_LH_P6_0⁰ _lh_check_right_LH_P6_1⁰ _lh_check_right_LH_P6_2⁰ _lh_check_right_LH_P6_3⁰ _lh_check_right_LH_P6_4⁰ _lh_check_right_LH_P6_5⁰]: 309
//│ 	[LH_P6 _lh_check_right_LH_P6_0⁰ _lh_check_right_LH_P6_1⁰ [False] _lh_check_right_LH_P6_3⁰ _lh_check_right_LH_P6_4⁰ _lh_check_right_LH_P6_5⁰]: 316
//│ case force⁰(ls³) of {LH_C h³ t³ => [LH_C h³ take_lz_lh_₂((n¹ - 1), t³)] | LH_N  => [LH_N]}: 1047 --->
//│ 	[LH_C _lh_copy_lz_arg2⁰ copy_lz_lh_₂((_lh_copy_lz_arg1⁰ - 1), _lh_copy_lz_arg2⁰)]: 941
//│ 	[LH_N]: 944
//│ 	[LH_C _lh_append__lz_LH_C_0⁰ append__lz_lh_₂(_lh_append__lz_LH_C_1⁰, _lh_append__lz_arg2⁰)]: 1021
//│ case ls⁶ of {LH_C h⁶ t⁶ => [LH_C f⁴(h⁶) map_lh_₁₉(f⁴, t⁶)] | LH_N  => [LH_N]}: 1407 --->
//│ 	[LH_C f⁵(h⁷) map_lh_₁₈(f⁵, t⁷)]: 1455
//│ 	[LH_N]: 1456
//│ case _lh_or_arg1⁰ of {LH_N  => [False] | LH_C _lh_or_LH_C_0⁰ _lh_or_LH_C_1⁰ => if _lh_or_LH_C_0⁰ then [True] else or_lh_₄(_lh_or_LH_C_1⁰)}: 1418 --->
//│ 	[LH_C f⁴(h⁶) map_lh_₁₉(f⁴, t⁶)]: 1405
//│ 	[LH_N]: 1406
//│ case _lh_or_arg1¹ of {LH_N  => [False] | LH_C _lh_or_LH_C_0¹ _lh_or_LH_C_1¹ => if _lh_or_LH_C_0¹ then [True] else or_lh_₃(_lh_or_LH_C_1¹)}: 1428 --->
//│ 	[LH_C f⁶(h⁸) map_lh_₁₇(f⁶, t⁸)]: 1469
//│ 	[LH_N]: 1470
//│ case ls⁹ of {LH_C h⁹ t⁹ => [LH_C f⁷(h⁹) map_lh_₁₆(f⁷, t⁹)] | LH_N  => [LH_N]}: 1489 --->
//│ 	[LH_C f⁸(h¹⁰) map_lh_₁₅(f⁸, t¹⁰)]: 1501
//│ 	[LH_N]: 1502
//│ case _lh_snd_arg1⁰ of {LH_P2 _lh_snd_LH_P2_0⁰ _lh_snd_LH_P2_1⁰ => _lh_snd_LH_P2_1⁰}: 1565 --->
//│ 	[LH_P2 ans⁰ get_lh_₁(_lh_scanlr_LH_P2_1⁰)]: 552
//│ case ls¹³ of {LH_C h¹³ t¹³ => [LH_C f¹²(h¹³) map_lh_₁₂(f¹², t¹³)] | LH_N  => [LH_N]}: 1808 --->
//│ 	[LH_C f¹¹(h¹²) map_lh_₁₃(f¹¹, t¹²)]: 1792
//│ 	[LH_N]: 1793
//│ case _lh_or_arg1² of {LH_N  => [False] | LH_C _lh_or_LH_C_0² _lh_or_LH_C_1² => if _lh_or_LH_C_0² then [True] else or_lh_₂(_lh_or_LH_C_1²)}: 1823 --->
//│ 	[LH_C f¹²(h¹³) map_lh_₁₂(f¹², t¹³)]: 1806
//│ 	[LH_N]: 1807
//│ case _lh_or_arg1³ of {LH_N  => [False] | LH_C _lh_or_LH_C_0³ _lh_or_LH_C_1³ => if _lh_or_LH_C_0³ then [True] else or_lh_₁(_lh_or_LH_C_1³)}: 1833 --->
//│ 	[LH_C f¹³(h¹⁴) map_lh_₁₁(f¹³, t¹⁴)]: 1844
//│ 	[LH_N]: 1845
//│ case ls¹⁵ of {LH_C h¹⁵ t¹⁵ => [LH_C f¹⁴(h¹⁵) map_lh_₁₀(f¹⁴, t¹⁵)] | LH_N  => [LH_N]}: 1960 --->
//│ 	[LH_C [LH_C _lh_combine_arg1¹ _lh_combine_arg2¹] transpose_lh_₁([LH_C _lh_combine_arg3¹ _lh_combine_arg4¹])]: 1191
//│ 	[LH_N]: 2096
//│ case _lh_snd_arg1¹ of {LH_P2 _lh_snd_LH_P2_0¹ _lh_snd_LH_P2_1¹ => _lh_snd_LH_P2_1¹}: 1965 --->
//│ 	[LH_P2 ans¹ get_lh_₁(_lh_scanlr_LH_P2_1²)]: 885
//│ case ls¹⁶ of {LH_C h¹⁶ t¹⁶ => [LH_C f¹⁵(h¹⁶) map_lh_₉(f¹⁵, t¹⁶)] | LH_N  => [LH_N]}: 2025 --->
//│ 	[LH_C f¹⁷(h¹⁷) map_lh_₈(f¹⁷, t¹⁷)]: 2090
//│ 	[LH_N]: 2091
//│ case ys⁵ of {LH_C hy⁵ ty⁵ => [LH_C [LH_P2 hx⁵ hy⁵] zip_lh_₁(tx⁵, ty⁵)] | LH_N  => [LH_N]}: 2655 --->
//│ 	[LH_C _lh_copy_arg2⁰ copy_lh_₂((_lh_copy_arg1⁰ - 1), _lh_copy_arg2⁰)]: 3637
//│ 	[LH_N]: 3638
//│ case ls²² of {LH_C h²² t²² => foldl_lh_₁(f²³, f²³(i¹, h²²), t²²) | LH_N  => i¹}: 2782 --->
//│ 	[LH_C a⁰ enumFromTo_lh_₄((a⁰ + 1), b⁰)]: 2764
//│ 	[LH_N]: 2765
//│ case _lh_listcomp_fun_ls_h¹¹ of {LH_P2 _lh_store_inputs_LH_P2_0⁰ _lh_store_inputs_LH_P2_1⁰ => case _lh_store_inputs_LH_P2_0⁰ of {LH_P2 _lh_store_inputs_LH_P2_0¹ _lh_store_inputs_LH_P2_1¹ => if (_lh_store_inputs_PS_0⁰ == _lh_store_inputs_LH_P2_1¹) then [LH_C update_outports_lh_₂([PS _lh_store_inputs_PS_0⁰ [Inp] _lh_store_inputs_PS_2⁰ _lh_store_inputs_PS_3⁰ _lh_store_inputs_PS_4⁰], _lh_store_inputs_LH_P2_1⁰) _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | _  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)} | _  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)}: 2822 --->
//│ 	[LH_P2 hx⁵ hy⁵]: 2647
//│ case _lh_listcomp_fun_para¹¹ of {LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹¹ => case _lh_listcomp_fun_ls_h¹¹ of {LH_P2 _lh_store_inputs_LH_P2_0⁰ _lh_store_inputs_LH_P2_1⁰ => case _lh_store_inputs_LH_P2_0⁰ of {LH_P2 _lh_store_inputs_LH_P2_0¹ _lh_store_inputs_LH_P2_1¹ => if (_lh_store_inputs_PS_0⁰ == _lh_store_inputs_LH_P2_1¹) then [LH_C update_outports_lh_₂([PS _lh_store_inputs_PS_0⁰ [Inp] _lh_store_inputs_PS_2⁰ _lh_store_inputs_PS_3⁰ _lh_store_inputs_PS_4⁰], _lh_store_inputs_LH_P2_1⁰) _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹) | _  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)} | _  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t¹¹)} | LH_N  => [LH_N]}: 2824 --->
//│ 	[LH_C [LH_P2 hx⁵ hy⁵] zip_lh_₁(tx⁵, ty⁵)]: 2653
//│ 	[LH_N]: 2654
//│ 	[LH_N]: 2656
//│ case _lh_critical_path_depth_arg1⁰ of {LH_P4 _lh_critical_path_depth_LH_P4_0⁰ _lh_critical_path_depth_LH_P4_1⁰ _lh_critical_path_depth_LH_P4_2⁰ _lh_critical_path_depth_LH_P4_3⁰ => maximum_lh_₁(map_lh_₆(pathDepth_lh_₁, _lh_critical_path_depth_LH_P4_3⁰))}: 2918 --->
//│ 	[LH_P4 _lh_simulate_LH_P4_0⁰ _lh_simulate_LH_P4_1⁰ _lh_simulate_LH_P4_2⁰ _lh_simulate_LH_P4_3⁰]: 3131
//│ case _lh_matchIdent¹⁹ of {LH_N  => [LH_N] | LH_C _lh_scanl_LH_C_0⁰ _lh_scanl_LH_C_1⁰ => scanl_lh_₁(_lh_scanl_arg1⁰, _lh_scanl_arg1⁰(_lh_scanl_arg2⁰, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰)}: 3022 --->
//│ 	[LH_C _lh_copy_arg2¹ copy_lh_₁((_lh_copy_arg1¹ - 1), _lh_copy_arg2¹)]: 3657
//│ 	[LH_N]: 3658
//│ case _lh_simulate_arg2⁰ of {LH_P4 _lh_simulate_LH_P4_0⁰ _lh_simulate_LH_P4_1⁰ _lh_simulate_LH_P4_2⁰ _lh_simulate_LH_P4_3⁰ => tail_lh_₁(scanl_lh_₁(do_cycle_lh_₁(critical_path_depth_lh_₁([LH_P4 _lh_simulate_LH_P4_0⁰ _lh_simulate_LH_P4_1⁰ _lh_simulate_LH_P4_2⁰ _lh_simulate_LH_P4_3⁰])), [LH_P4 _lh_simulate_LH_P4_0⁰ _lh_simulate_LH_P4_1⁰ _lh_simulate_LH_P4_2⁰ map_lh_₃(init_dffs_lh_₁, _lh_simulate_LH_P4_3⁰)], _lh_simulate_arg1⁰))}: 3148 --->
//│ 	[LH_P4 p2⁰ _lh_pad_circuit_LH_P4_1⁰ _lh_pad_circuit_LH_P4_2⁰ take_lz_lh_₁(p2⁰, append__lz_lh_₁(_lh_pad_circuit_LH_P4_3⁰, copy_lz_lh_₁(p2⁰, emptyState_lh_₁)))]: 3887
//│ case xs⁹ of {LH_C h³⁰ t³⁰ => [LH_C h³⁰ mappend_lh_₂(t³⁰, ys⁷)] | LH_N  => ys⁷}: 3200 --->
//│ 	[LH_N]: 3675
//│ 	[LH_C 'x' [LH_N]]: 3676
//│ case force⁰(xs¹⁰) of {LH_C hx⁶ tx⁶ => [LH_C f²⁷(hx⁶, hy⁶) zipWith_lz_nl_lh_₂(f²⁷, tx⁶, ty⁶)] | LH_N  => [LH_N]}: 3221 --->
//│ 	[LH_C a³ enumFrom_lh_₂((a³ + 1))]: 3248
//│ case ys⁸ of {LH_C hy⁶ ty⁶ => case force⁰(xs¹⁰) of {LH_C hx⁶ tx⁶ => [LH_C f²⁷(hx⁶, hy⁶) zipWith_lz_nl_lh_₂(f²⁷, tx⁶, ty⁶)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 3223 --->
//│ 	[LH_C ((7 * _lh_listcomp_fun_ls_h¹⁵) + 7) _lh_listcomp_fun¹⁵(_lh_listcomp_fun_ls_t¹⁵)]: 3766
//│ 	[LH_N]: 3767
//│ case xs¹¹ of {LH_C h³¹ t³¹ => [LH_C h³¹ mappend_lh_₁(t³¹, ys⁹)] | LH_N  => ys⁹}: 3236 --->
//│ 	[LH_N]: 3688
//│ 	[LH_C 'y' [LH_N]]: 3689
//│ case ls²⁹ of {LH_C h³² t³² => [LH_C f²⁸(h³²) map_lh_₁(f²⁸, t³²)] | LH_N  => [LH_N]}: 3262 --->
//│ 	[LH_C ((7 * _lh_listcomp_fun_ls_h¹⁶) + 1) _lh_listcomp_fun¹⁶(_lh_listcomp_fun_ls_t¹⁶)]: 3829
//│ 	[LH_N]: 3830
//│ case lss⁰ of {LH_C h³³ t³³ => mappend_lh_₃(h³³, concat_lh_₁(t³³)) | LH_N  => [LH_N]}: 3499 --->
//│ 	[LH_C f²⁸(h³²) map_lh_₁(f²⁸, t³²)]: 3260
//│ 	[LH_N]: 3261
//│ case force⁰(xs¹²) of {LH_C hx⁷ tx⁷ => [LH_C f²⁹(hx⁷, hy⁷) zipWith_lz_nl_lh_₁(f²⁹, tx⁷, ty⁷)] | LH_N  => [LH_N]}: 3519 --->
//│ 	[LH_C a⁴ enumFrom_lh_₁((a⁴ + 1))]: 3274
//│ case ys¹⁰ of {LH_C hy⁷ ty⁷ => case force⁰(xs¹²) of {LH_C hx⁷ tx⁷ => [LH_C f²⁹(hx⁷, hy⁷) zipWith_lz_nl_lh_₁(f²⁹, tx⁷, ty⁷)] | LH_N  => [LH_N]} | LH_N  => [LH_N]}: 3521 --->
//│ 	[LH_C ((7 * _lh_listcomp_fun_ls_h¹⁴) + 1) _lh_listcomp_fun¹⁴(_lh_listcomp_fun_ls_t¹⁴)]: 3728
//│ 	[LH_N]: 3729
//│ case force⁰(ls³⁰) of {LH_C h³⁴ t³⁴ => [LH_C h³⁴ take_lz_lh_₁((n² - 1), t³⁴)] | LH_N  => [LH_N]}: 3617 --->
//│ 	[LH_C _lh_append__lz_LH_C_0¹ append__lz_lh_₁(_lh_append__lz_LH_C_1¹, _lh_append__lz_arg2¹)]: 3535
//│ 	[LH_C _lh_copy_lz_arg2¹ copy_lz_lh_₁((_lh_copy_lz_arg1¹ - 1), _lh_copy_lz_arg2¹)]: 3589
//│ 	[LH_N]: 3592
//│ case _lh_listcomp_fun_para¹⁴ of {LH_C _lh_listcomp_fun_ls_h¹⁴ _lh_listcomp_fun_ls_t¹⁴ => [LH_C ((7 * _lh_listcomp_fun_ls_h¹⁴) + 1) _lh_listcomp_fun¹⁴(_lh_listcomp_fun_ls_t¹⁴)] | LH_N  => [LH_N]}: 3730 --->
//│ 	[LH_C a² enumFromTo_lh_₂((a² + 1), b²)]: 3186
//│ 	[LH_N]: 3187
//│ case _lh_listcomp_fun_para¹⁵ of {LH_C _lh_listcomp_fun_ls_h¹⁵ _lh_listcomp_fun_ls_t¹⁵ => [LH_C ((7 * _lh_listcomp_fun_ls_h¹⁵) + 7) _lh_listcomp_fun¹⁵(_lh_listcomp_fun_ls_t¹⁵)] | LH_N  => [LH_N]}: 3768 --->
//│ 	[LH_C a¹ enumFromTo_lh_₃((a¹ + 1), b¹)]: 3166
//│ 	[LH_N]: 3167
//│ case _lh_listcomp_fun_para¹⁶ of {LH_C _lh_listcomp_fun_ls_h¹⁶ _lh_listcomp_fun_ls_t¹⁶ => [LH_C ((7 * _lh_listcomp_fun_ls_h¹⁶) + 1) _lh_listcomp_fun¹⁶(_lh_listcomp_fun_ls_t¹⁶)] | LH_N  => [LH_N]}: 3831 --->
//│ 	[LH_C a⁵ enumFromTo_lh_₁((a⁵ + 1), b³)]: 3292
//│ 	[LH_N]: 3293
//│ case _lh_pad_circuit_arg1⁰ of {LH_P4 _lh_pad_circuit_LH_P4_0⁰ _lh_pad_circuit_LH_P4_1⁰ _lh_pad_circuit_LH_P4_2⁰ _lh_pad_circuit_LH_P4_3⁰ => let p2⁰ = nearest_power_of_two_lh_₁(_lh_pad_circuit_LH_P4_0⁰)
//│ in [LH_P4 p2⁰ _lh_pad_circuit_LH_P4_1⁰ _lh_pad_circuit_LH_P4_2⁰ take_lz_lh_₁(p2⁰, append__lz_lh_₁(_lh_pad_circuit_LH_P4_3⁰, copy_lz_lh_₁(p2⁰, emptyState_lh_₁)))]}: 3889 --->
//│ 	[LH_P4 (1 + (7 * _lh_regs_arg1⁰)) is⁰ os⁰ states⁰]: 3860
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testCircsim_nofib_lh_₁(primId⁰(40))
//│ def acknowledge_lh_₁(_lh_acknowledge_arg1⁰, _lh_acknowledge_arg2⁰) = 
//│ 	let check_lr_requests⁰ = (fun _lh_check_lr_requests_arg1⁰ -> case _lh_check_lr_requests_arg1⁰ of {
//│ 			LH_P6 _lh_check_lr_requests_LH_P6_0⁰ _lh_check_lr_requests_LH_P6_1⁰ _lh_check_lr_requests_LH_P6_2⁰ _lh_check_lr_requests_LH_P6_3⁰ _lh_check_lr_requests_LH_P6_4⁰ _lh_check_lr_requests_LH_P6_5⁰ => (_lh_check_lr_requests_LH_P6_2⁰ || _lh_check_lr_requests_LH_P6_4⁰)})
//│ 	and check_requests⁰ = (fun _lh_check_requests_arg1⁰ -> or_lh_₁(map_lh_₁₁(check_lr_requests⁰, _lh_check_requests_arg1⁰))) 
//│ 	in let states1⁰ = map_lh_₁₃(check_depth_lh_₂(_lh_acknowledge_arg1⁰), _lh_acknowledge_arg2⁰)
//│ 	in not⁰(or_lh_₂(map_lh_₁₂((fun _lh_funcomp_x⁰ -> check_requests⁰(outports_lh_₅(_lh_funcomp_x⁰))), states1⁰)))
//│ def acknowledge_lh_₂(_lh_acknowledge_arg1¹, _lh_acknowledge_arg2¹) = 
//│ 	let check_requests¹ = (fun _lh_check_requests_arg1¹ -> or_lh_₃(map_lh_₁₇(check_lr_requests¹, _lh_check_requests_arg1¹)))
//│ 	and check_lr_requests¹ = (fun _lh_check_lr_requests_arg1¹ -> case _lh_check_lr_requests_arg1¹ of {
//│ 			LH_P6 _lh_check_lr_requests_LH_P6_0¹ _lh_check_lr_requests_LH_P6_1¹ _lh_check_lr_requests_LH_P6_2¹ _lh_check_lr_requests_LH_P6_3¹ _lh_check_lr_requests_LH_P6_4¹ _lh_check_lr_requests_LH_P6_5¹ => (_lh_check_lr_requests_LH_P6_2¹ || _lh_check_lr_requests_LH_P6_4¹)}) 
//│ 	in let states1³ = map_lh_₁₈(check_depth_lh_₄(_lh_acknowledge_arg1¹), _lh_acknowledge_arg2¹)
//│ 	in not⁰(or_lh_₄(map_lh_₁₉((fun _lh_funcomp_x³ -> check_requests¹(outports_lh_₆(_lh_funcomp_x³))), states1³)))
//│ def and2_lh_₁(_lh_and2_arg1⁰, _lh_and2_arg2⁰) = if (polyEq⁰(_lh_and2_arg1⁰, [T]) && polyEq⁰(_lh_and2_arg2⁰, [T])) then [T] else [F]
//│ def append__lz_lh_₁(_lh_append__lz_arg1⁰, _lh_append__lz_arg2⁰) = 
//│ 	let _lh_matchIdent¹ = _lh_append__lz_arg1⁰
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_N  => _lh_append__lz_arg2⁰
//│ 		| LH_C _lh_append__lz_LH_C_0⁰ _lh_append__lz_LH_C_1⁰ => lazy⁰(
//│ 			let t⁴ = append__lz_lh_₁(_lh_append__lz_LH_C_1⁰, _lh_append__lz_arg2⁰)
//│ 			in let h⁴ = _lh_append__lz_LH_C_0⁰
//│ 			in (fun n⁰ -> [LH_C h⁴ take_lz_lh_₁((n⁰ - 1), t⁴)]))}
//│ def append__lz_lh_₂(_lh_append__lz_arg1¹, _lh_append__lz_arg2¹) = 
//│ 	let _lh_matchIdent¹¹ = _lh_append__lz_arg1¹
//│ 	in case _lh_matchIdent¹¹ of {
//│ 		LH_N  => _lh_append__lz_arg2¹
//│ 		| LH_C _lh_append__lz_LH_C_0¹ _lh_append__lz_LH_C_1¹ => lazy⁰(
//│ 			let t²⁴ = append__lz_lh_₂(_lh_append__lz_LH_C_1¹, _lh_append__lz_arg2¹)
//│ 			in let h²⁴ = _lh_append__lz_LH_C_0¹
//│ 			in (fun n⁶ -> [LH_C h²⁴ take_lz_lh_₂((n⁶ - 1), t²⁴)]))}
//│ def apply_component_lh_₁(_lh_apply_component_arg1⁰, _lh_apply_component_arg2⁰) = case _lh_apply_component_arg1⁰ of {
//│ 	Inp  => [Nothing]
//│ 	| Outp  => case _lh_apply_component_arg2⁰ of {
//│ 		LH_C _lh_apply_component_LH_C_0⁰ _lh_apply_component_LH_C_1⁰ => case _lh_apply_component_LH_C_1⁰ of {
//│ 			LH_N  => [Just _lh_apply_component_LH_C_0⁰]
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| Dff  => case _lh_apply_component_arg2⁰ of {
//│ 		LH_C _lh_apply_component_LH_C_0¹ _lh_apply_component_LH_C_1¹ => case _lh_apply_component_LH_C_1¹ of {
//│ 			LH_N  => [Just _lh_apply_component_LH_C_0¹]
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| Inv  => case _lh_apply_component_arg2⁰ of {
//│ 		LH_C _lh_apply_component_LH_C_0² _lh_apply_component_LH_C_1² => case _lh_apply_component_LH_C_1² of {
//│ 			LH_N  => [Just inv_lh_₁(_lh_apply_component_LH_C_0²)]
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| And2  => case _lh_apply_component_arg2⁰ of {
//│ 		LH_C _lh_apply_component_LH_C_0³ _lh_apply_component_LH_C_1³ => case _lh_apply_component_LH_C_1³ of {
//│ 			LH_C _lh_apply_component_LH_C_0⁴ _lh_apply_component_LH_C_1⁴ => case _lh_apply_component_LH_C_1⁴ of {
//│ 				LH_N  => [Just and2_lh_₁(_lh_apply_component_LH_C_0³, _lh_apply_component_LH_C_0⁴)]
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| Or2  => case _lh_apply_component_arg2⁰ of {
//│ 		LH_C _lh_apply_component_LH_C_0⁵ _lh_apply_component_LH_C_1⁵ => case _lh_apply_component_LH_C_1⁵ of {
//│ 			LH_C _lh_apply_component_LH_C_0⁶ _lh_apply_component_LH_C_1⁶ => case _lh_apply_component_LH_C_1⁶ of {
//│ 				LH_N  => [Just or2_lh_₁(_lh_apply_component_LH_C_0⁵, _lh_apply_component_LH_C_0⁶)]
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| Xor  => case _lh_apply_component_arg2⁰ of {
//│ 		LH_C _lh_apply_component_LH_C_0⁷ _lh_apply_component_LH_C_1⁷ => case _lh_apply_component_LH_C_1⁷ of {
//│ 			LH_C _lh_apply_component_LH_C_0⁸ _lh_apply_component_LH_C_1⁸ => case _lh_apply_component_LH_C_1⁸ of {
//│ 				LH_N  => [Just xor_lh_₁(_lh_apply_component_LH_C_0⁷, _lh_apply_component_LH_C_0⁸)]
//│ 				| _  => error⁰}
//│ 			| _  => error⁰}
//│ 		| _  => error⁰}
//│ 	| None  => [Nothing]
//│ 	| _  => error⁰}
//│ def check_depth_lh_₁(_lh_check_depth_arg1⁰, _lh_check_depth_arg2⁰) = if (pathDepth_lh_₆(_lh_check_depth_arg2⁰) == _lh_check_depth_arg1⁰) then _lh_check_depth_arg2⁰ else update_requests_lh_₁([False], _lh_check_depth_arg2⁰)
//│ def check_depth_lh_₂(_lh_check_depth_arg1¹, _lh_check_depth_arg2¹) = if (pathDepth_lh_₈(_lh_check_depth_arg2¹) == _lh_check_depth_arg1¹) then _lh_check_depth_arg2¹ else update_requests_lh_₂([False], _lh_check_depth_arg2¹)
//│ def check_depth_lh_₃(_lh_check_depth_arg1³, _lh_check_depth_arg2³) = if (pathDepth_lh_₉(_lh_check_depth_arg2³) == _lh_check_depth_arg1³) then _lh_check_depth_arg2³ else update_requests_lh_₂([False], _lh_check_depth_arg2³)
//│ def check_depth_lh_₄(_lh_check_depth_arg1², _lh_check_depth_arg2²) = if (pathDepth_lh_₉(_lh_check_depth_arg2²) == _lh_check_depth_arg1²) then _lh_check_depth_arg2² else update_requests_lh_₂([False], _lh_check_depth_arg2²)
//│ def check_left_lh_₁(_lh_check_left_arg1⁰, _lh_check_left_arg2⁰) = case _lh_check_left_arg1⁰ of {
//│ 	LH_P8 _lh_check_left_LH_P8_0⁰ _lh_check_left_LH_P8_1⁰ _lh_check_left_LH_P8_2⁰ _lh_check_left_LH_P8_3⁰ _lh_check_left_LH_P8_4⁰ _lh_check_left_LH_P8_5⁰ _lh_check_left_LH_P8_6⁰ _lh_check_left_LH_P8_7⁰ => _lh_check_left_arg2⁰(_lh_check_left_LH_P8_5⁰, _lh_check_left_LH_P8_6⁰)}
//│ def check_right_lh_₁(_lh_check_right_arg1⁰, _lh_check_right_arg2⁰, _lh_floatOutId_0², _lh_floatOutId_1²) = case _lh_check_right_arg1⁰ of {
//│ 	LH_P8 _lh_check_right_LH_P8_0⁰ _lh_check_right_LH_P8_1⁰ _lh_check_right_LH_P8_2⁰ _lh_check_right_LH_P8_3⁰ _lh_check_right_LH_P8_4⁰ _lh_check_right_LH_P8_5⁰ _lh_check_right_LH_P8_6⁰ _lh_check_right_LH_P8_7⁰ => case _lh_check_right_arg2⁰ of {
//│ 		LH_P6 _lh_check_right_LH_P6_0⁰ _lh_check_right_LH_P6_1⁰ _lh_check_right_LH_P6_2⁰ _lh_check_right_LH_P6_3⁰ _lh_check_right_LH_P6_4⁰ _lh_check_right_LH_P6_5⁰ => if (_lh_check_right_LH_P8_3⁰ && (_lh_check_right_LH_P8_4⁰ > 0)) then 
//│ 			let _lh_check_left_LH_P6_5⁰ = _lh_check_right_LH_P6_5⁰
//│ 			in let _lh_check_left_LH_P6_4⁰ = _lh_check_right_LH_P6_4⁰
//│ 			in let _lh_check_left_LH_P6_3⁰ = _lh_check_right_LH_P6_3⁰
//│ 			in let _lh_check_left_LH_P6_2⁰ = _lh_check_right_LH_P6_2⁰
//│ 			in let _lh_check_left_LH_P6_1⁰ = _lh_check_right_LH_P6_1⁰
//│ 			in let _lh_check_left_LH_P6_0⁰ = _lh_check_right_LH_P6_0⁰
//│ 			in if (_lh_floatOutId_0² && (_lh_floatOutId_1² > 0)) then [LH_P6 _lh_check_left_LH_P6_0⁰ _lh_check_left_LH_P6_1⁰ _lh_check_left_LH_P6_2⁰ _lh_check_left_LH_P6_3⁰ _lh_check_left_LH_P6_4⁰ _lh_check_left_LH_P6_5⁰] else [LH_P6 _lh_check_left_LH_P6_0⁰ _lh_check_left_LH_P6_1⁰ _lh_check_left_LH_P6_2⁰ _lh_check_left_LH_P6_3⁰ [False] _lh_check_left_LH_P6_5⁰] else 
//│ 			let _lh_check_left_LH_P6_5¹ = _lh_check_right_LH_P6_5⁰
//│ 			in let _lh_check_left_LH_P6_4¹ = _lh_check_right_LH_P6_4⁰
//│ 			in let _lh_check_left_LH_P6_3¹ = _lh_check_right_LH_P6_3⁰
//│ 			in let _lh_check_left_LH_P6_2¹ = [False]
//│ 			in let _lh_check_left_LH_P6_1¹ = _lh_check_right_LH_P6_1⁰
//│ 			in let _lh_check_left_LH_P6_0¹ = _lh_check_right_LH_P6_0⁰
//│ 			in if (_lh_floatOutId_0² && (_lh_floatOutId_1² > 0)) then [LH_P6 _lh_check_left_LH_P6_0¹ _lh_check_left_LH_P6_1¹ _lh_check_left_LH_P6_2¹ _lh_check_left_LH_P6_3¹ _lh_check_left_LH_P6_4¹ _lh_check_left_LH_P6_5¹] else [LH_P6 _lh_check_left_LH_P6_0¹ _lh_check_left_LH_P6_1¹ _lh_check_left_LH_P6_2¹ _lh_check_left_LH_P6_3¹ [False] _lh_check_left_LH_P6_5¹]}}
//│ def circuit_simulate_lh_₁(_lh_circuit_simulate_arg1⁰, _lh_circuit_simulate_arg2⁰) = map_lh_₂(collect_outputs_lh_₁, simulate_lh_₁(_lh_circuit_simulate_arg1⁰, _lh_circuit_simulate_arg2⁰))
//│ def collect_outputs_lh_₁(_lh_collect_outputs_arg1⁰) = case _lh_collect_outputs_arg1⁰ of {
//│ 	LH_P4 _lh_collect_outputs_LH_P4_0⁰ _lh_collect_outputs_LH_P4_1⁰ _lh_collect_outputs_LH_P4_2⁰ _lh_collect_outputs_LH_P4_3⁰ => 
//│ 		let third⁰ = (fun _lh_third_arg1⁰ -> case _lh_third_arg1⁰ of {
//│ 				LH_P3 _lh_third_LH_P3_0⁰ _lh_third_LH_P3_1⁰ _lh_third_LH_P3_2⁰ => _lh_third_LH_P3_2⁰})
//│ 		and get_output⁰ = (fun _lh_get_output_arg1⁰ -> (fun _lh_get_output_arg2⁰ -> case _lh_get_output_arg2⁰ of {
//│ 				LH_P2 _lh_get_output_LH_P2_0⁰ _lh_get_output_LH_P2_1⁰ => third⁰(head_lh_₁(
//│ 					let _lh_listcomp_fun²⁰ = (fun _lh_listcomp_fun_para¹⁰ -> case _lh_listcomp_fun_para¹⁰ of {
//│ 						LH_C _lh_listcomp_fun_ls_h¹³ _lh_listcomp_fun_ls_t¹⁴ => if (_lh_get_output_LH_P2_1⁰ == pid_lh_₁(_lh_listcomp_fun_ls_h¹³)) then [LH_C head_lh_₂(inports_lh_₁(_lh_listcomp_fun_ls_h¹³)) _lh_listcomp_fun²⁰(_lh_listcomp_fun_ls_t¹⁴)] else _lh_listcomp_fun²⁰(_lh_listcomp_fun_ls_t¹⁴)
//│ 						| LH_N  => [LH_N]})
//│ 					in _lh_listcomp_fun²⁰(_lh_get_output_arg1⁰)))})) 
//│ 		in map_lh_₄(get_output⁰(_lh_collect_outputs_LH_P4_3⁰), _lh_collect_outputs_LH_P4_2⁰)}
//│ def combine_lh_₁(_lh_combine_arg1¹, _lh_combine_arg2¹, _lh_combine_arg3¹, _lh_combine_arg4¹, f²⁰) = 
//│ 	let t¹⁵ = transpose_lh_₁([LH_C _lh_combine_arg3¹ _lh_combine_arg4¹])
//│ 	in let h¹⁵ = [LH_C _lh_combine_arg1¹ _lh_combine_arg2¹]
//│ 	in [LH_C f²⁰(h¹⁵) map_lh_₁₀(f²⁰, t¹⁵)]
//│ def combine_lh_₂(_lh_combine_arg1⁰, _lh_combine_arg2⁰, _lh_combine_arg3⁰, _lh_combine_arg4⁰) = [LH_C [LH_C _lh_combine_arg1⁰ _lh_combine_arg2⁰] transpose_lh_₂([LH_C _lh_combine_arg3⁰ _lh_combine_arg4⁰])]
//│ def compType_lh_₁(_lh_compType_arg1²) = case _lh_compType_arg1² of {
//│ 	PS _lh_compType_PS_0² _lh_compType_PS_1² _lh_compType_PS_2² _lh_compType_PS_3² _lh_compType_PS_4² => _lh_compType_PS_1²}
//│ def compType_lh_₂(_lh_compType_arg1¹) = case _lh_compType_arg1¹ of {
//│ 	PS _lh_compType_PS_0¹ _lh_compType_PS_1¹ _lh_compType_PS_2¹ _lh_compType_PS_3¹ _lh_compType_PS_4¹ => _lh_compType_PS_1¹}
//│ def compType_lh_₃(_lh_compType_arg1⁴) = case _lh_compType_arg1⁴ of {
//│ 	PS _lh_compType_PS_0⁴ _lh_compType_PS_1⁴ _lh_compType_PS_2⁴ _lh_compType_PS_3⁴ _lh_compType_PS_4⁴ => _lh_compType_PS_1⁴}
//│ def compType_lh_₄(_lh_compType_arg1³) = case _lh_compType_arg1³ of {
//│ 	PS _lh_compType_PS_0³ _lh_compType_PS_1³ _lh_compType_PS_2³ _lh_compType_PS_3³ _lh_compType_PS_4³ => _lh_compType_PS_1³}
//│ def compType_lh_₅(_lh_compType_arg1⁰) = case _lh_compType_arg1⁰ of {
//│ 	PS _lh_compType_PS_0⁰ _lh_compType_PS_1⁰ _lh_compType_PS_2⁰ _lh_compType_PS_3⁰ _lh_compType_PS_4⁰ => _lh_compType_PS_1⁰}
//│ def compare_and_update_lh_₁(_lh_compare_and_update_arg1⁰, _lh_compare_and_update_arg2¹) = _lh_compare_and_update_arg1⁰(_lh_compare_and_update_arg2¹)
//│ def concat_lh_₁(lss⁰) = lss⁰([lh_Unit])
//│ def copy_lh_₁(_lh_copy_arg1⁰, _lh_copy_arg2⁰, _lh_floatOutId_0⁸, _lh_floatOutId_1⁶) = if (_lh_copy_arg1⁰ > 0) then 
//│ 	let _lh_scanl_LH_C_1⁰ = copy_lh_₁((_lh_copy_arg1⁰ - 1), _lh_copy_arg2⁰)
//│ 	in let _lh_scanl_LH_C_0⁰ = _lh_copy_arg2⁰
//│ 	in scanl_lh_₁(_lh_floatOutId_0⁸, _lh_floatOutId_0⁸(_lh_floatOutId_1⁶, _lh_scanl_LH_C_0⁰), _lh_scanl_LH_C_1⁰) else [LH_N]
//│ def copy_lh_₂(_lh_copy_arg1¹, _lh_copy_arg2¹, _lh_floatOutId_0¹⁵, _lh_floatOutId_1⁹, _lh_floatOutId_2², _lh_floatOutId_3⁰, _lh_floatOutId_4⁰, _lh_floatOutId_5⁰, _lh_floatOutId_6⁰) = if (_lh_copy_arg1¹ > 0) then 
//│ 	let ty⁵ = copy_lh_₂((_lh_copy_arg1¹ - 1), _lh_copy_arg2¹)
//│ 	in let hy⁵ = _lh_copy_arg2¹
//│ 	in let _lh_listcomp_fun_ls_t⁸ = zip_lh_₁(_lh_floatOutId_1⁹, ty⁵)
//│ 	in let _lh_listcomp_fun_ls_h⁸ = 	
//│ 		let _lh_store_inputs_LH_P2_1⁰ = hy⁵
//│ 		in let _lh_store_inputs_LH_P2_0⁰ = _lh_floatOutId_0¹⁵
//│ 		in (fun _lh_listcomp_fun_ls_t⁹ -> (fun _lh_listcomp_fun¹¹ -> (fun _lh_store_inputs_PS_0¹ -> (fun _lh_store_inputs_PS_2¹ -> (fun _lh_store_inputs_PS_3¹ -> (fun _lh_store_inputs_PS_4¹ -> case _lh_store_inputs_LH_P2_0⁰ of {
//│ 			LH_P2 _lh_store_inputs_LH_P2_0¹ _lh_store_inputs_LH_P2_1¹ => if (_lh_store_inputs_PS_0¹ == _lh_store_inputs_LH_P2_1¹) then [LH_C update_outports_lh_₂([PS _lh_store_inputs_PS_0¹ [Inp] _lh_store_inputs_PS_2¹ _lh_store_inputs_PS_3¹ _lh_store_inputs_PS_4¹], _lh_store_inputs_LH_P2_1⁰) _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t⁹)] else _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t⁹)
//│ 			| _  => _lh_listcomp_fun¹¹(_lh_listcomp_fun_ls_t⁹)}))))))
//│ 	in _lh_listcomp_fun_ls_h⁸(_lh_listcomp_fun_ls_t⁸, _lh_floatOutId_2², _lh_floatOutId_3⁰, _lh_floatOutId_4⁰, _lh_floatOutId_5⁰, _lh_floatOutId_6⁰) else [LH_N]
//│ def copy_lz_lh_₁(_lh_copy_lz_arg1¹, _lh_copy_lz_arg2¹) = if (_lh_copy_lz_arg1¹ > 0) then lazy⁰(
//│ 	let t¹⁴ = copy_lz_lh_₁((_lh_copy_lz_arg1¹ - 1), _lh_copy_lz_arg2¹)
//│ 	in let h¹⁴ = _lh_copy_lz_arg2¹
//│ 	in (fun n³ -> [LH_C h¹⁴ take_lz_lh_₁((n³ - 1), t¹⁴)])) else lazy⁰((fun n⁴ -> [LH_N]))
//│ def copy_lz_lh_₂(_lh_copy_lz_arg1⁰, _lh_copy_lz_arg2⁰) = if (_lh_copy_lz_arg1⁰ > 0) then lazy⁰(
//│ 	let t¹³ = copy_lz_lh_₂((_lh_copy_lz_arg1⁰ - 1), _lh_copy_lz_arg2⁰)
//│ 	in let h¹³ = _lh_copy_lz_arg2⁰
//│ 	in (fun n¹ -> [LH_C h¹³ take_lz_lh_₂((n¹ - 1), t¹³)])) else lazy⁰((fun n² -> [LH_N]))
//│ def critical_path_depth_lh_₁(_lh_critical_path_depth_arg1⁰) = _lh_critical_path_depth_arg1⁰([lh_Unit])
//│ def do_cycle_lh_₁(_lh_do_cycle_arg1⁰, _lh_do_cycle_arg2⁰, _lh_do_cycle_arg3⁰) = case _lh_do_cycle_arg2⁰ of {
//│ 	LH_P4 _lh_do_cycle_LH_P4_0⁰ _lh_do_cycle_LH_P4_1⁰ _lh_do_cycle_LH_P4_2⁰ _lh_do_cycle_LH_P4_3⁰ => 
//│ 		let sim_then_send⁰ = (fun _lh_sim_then_send_arg1⁰ -> (fun _lh_sim_then_send_arg2⁰ -> do_sends_lh_₁(_lh_sim_then_send_arg2⁰, simulate_components_lh_₁(_lh_sim_then_send_arg2⁰, _lh_sim_then_send_arg1⁰))))
//│ 		in let states1¹ = map_lh_₅(store_inputs_lh_₁(zip_lh_₁(_lh_do_cycle_LH_P4_1⁰, _lh_do_cycle_arg3⁰)), _lh_do_cycle_LH_P4_3⁰)
//│ 		in let states2⁰ = do_sends_lh_₂(0, states1¹)
//│ 		in let states3⁰ = foldl_lh_₁(sim_then_send⁰, states2⁰, enumFromTo_lh_₄(1, _lh_do_cycle_arg1⁰))
//│ 		in let states4⁰ = restore_requests_lh_₁(_lh_do_cycle_LH_P4_3⁰, states3⁰)
//│ 		in [LH_P4 _lh_do_cycle_LH_P4_0⁰ _lh_do_cycle_LH_P4_1⁰ _lh_do_cycle_LH_P4_2⁰ states4⁰]}
//│ def do_send_lh_₁(_lh_do_send_arg1¹, _lh_do_send_arg2¹) = 
//│ 	let states1⁴ = map_lh_₈(check_depth_lh_₁(_lh_do_send_arg1¹), _lh_do_send_arg2¹)
//│ 	in let send_results¹ = map_lh_₁₀((fun _lh_funcomp_x⁴ -> snd_lh_₁(send_lh_₁(_lh_funcomp_x⁴))), (fun _lh_funcomp_x⁵ -> transpose_lh_₁(pad_packets_lh_₁(_lh_funcomp_x⁵)))(map_lh_₉(make_packet_lh_₁, states1⁴)))
//│ 	in let pss'¹ = transpose_lh_₂(send_results¹)
//│ 	in zipWith_lh_₃(update_io_lh_₁(_lh_do_send_arg1¹), pss'¹, _lh_do_send_arg2¹)
//│ def do_send_lh_₂(_lh_do_send_arg1⁰, _lh_do_send_arg2⁰) = 
//│ 	let states1² = map_lh_₁₅(check_depth_lh_₃(_lh_do_send_arg1⁰), _lh_do_send_arg2⁰)
//│ 	in let send_results⁰ = map_lh_₁₄((fun _lh_funcomp_x¹ -> snd_lh_₂(send_lh_₂(_lh_funcomp_x¹))), (fun _lh_funcomp_x² -> transpose_lh_₃(pad_packets_lh_₂(_lh_funcomp_x²)))(map_lh_₁₆(make_packet_lh_₂, states1²)))
//│ 	in let pss'⁰ = transpose_lh_₄(send_results⁰)
//│ 	in zipWith_lh_₄(update_io_lh_₂(_lh_do_send_arg1⁰), pss'⁰, _lh_do_send_arg2⁰)
//│ def do_sends_lh_₁(_lh_do_sends_arg1¹, _lh_do_sends_arg2¹) = until_lh_₂(acknowledge_lh_₁(_lh_do_sends_arg1¹), do_send_lh_₁(_lh_do_sends_arg1¹), _lh_do_sends_arg2¹)
//│ def do_sends_lh_₂(_lh_do_sends_arg1⁰, _lh_do_sends_arg2⁰) = until_lh_₃(acknowledge_lh_₂(_lh_do_sends_arg1⁰), do_send_lh_₂(_lh_do_sends_arg1⁰), _lh_do_sends_arg2⁰)
//│ def downsweep_lh_₁(_lh_downsweep_arg1⁰, _lh_downsweep_arg2⁰, _lh_downsweep_arg3⁰) = _lh_downsweep_arg3⁰(_lh_downsweep_arg2⁰, _lh_downsweep_arg1⁰)
//│ def drop_lh_₁(_lh_drop_arg1⁰, _lh_drop_arg2⁰) = case _lh_drop_arg2⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰ => if (_lh_drop_arg1⁰ <= 0) then [LH_C _lh_drop_LH_C_0⁰ _lh_drop_LH_C_1⁰] else drop_lh_₁((_lh_drop_arg1⁰ - 1), _lh_drop_LH_C_1⁰)}
//│ def emptyPacket_lh_₁ = [LH_P8 (0 - 1) (0 - 1) [F] [False] 0 [False] 0 1]
//│ def emptyPacket_lh_₂ = [LH_P8 (0 - 1) (0 - 1) [F] [False] 0 [False] 0 1]
//│ def emptyPacket_lh_₃ = [LH_P8 (0 - 1) (0 - 1) [F] [False] 0 [False] 0 1]
//│ def emptyPacket_lh_₄ = [LH_P8 (0 - 1) (0 - 1) [F] [False] 0 [False] 0 1]
//│ def emptyPacket_lh_₅ = [LH_P8 (0 - 1) (0 - 1) [F] [False] 0 [False] 0 1]
//│ def emptyState_lh_₁ = [PS (0 - 1) [None] (0 - 1) [LH_N] [LH_N]]
//│ def enumFromTo_lh_₁(a⁵, b², _lh_floatOutId_0⁹, _lh_floatOutId_1⁷, _lh_floatOutId_2¹) = if (a⁵ <= b²) then 
//│ 	let _lh_listcomp_fun_ls_t⁷ = enumFromTo_lh_₁((a⁵ + 1), b²)
//│ 	in let _lh_listcomp_fun_ls_h⁷ = a⁵
//│ 	in let t²⁰ = _lh_floatOutId_0⁹(_lh_listcomp_fun_ls_t⁷)
//│ 	in let h²⁰ = ((7 * _lh_listcomp_fun_ls_h⁷) + 1)
//│ 	in let t²¹ = map_lh_₁(_lh_floatOutId_1⁷, t²⁰)
//│ 	in let h²¹ = _lh_floatOutId_1⁷(h²⁰)
//│ 	in mappend_lh_₃(h²¹, concat_lh_₁(t²¹)) else [LH_N]
//│ def enumFromTo_lh_₂(a³, b¹, _lh_floatOutId_0⁷, _lh_floatOutId_1⁵, _lh_floatOutId_2⁰) = if (a³ <= b¹) then 
//│ 	let _lh_listcomp_fun_ls_t³ = enumFromTo_lh_₂((a³ + 1), b¹)
//│ 	in let _lh_listcomp_fun_ls_h³ = a³
//│ 	in let ty⁰ = _lh_floatOutId_0⁷(_lh_listcomp_fun_ls_t³)
//│ 	in let hy⁰ = ((7 * _lh_listcomp_fun_ls_h³) + 1)
//│ 	in force⁰(_lh_floatOutId_2⁰, _lh_floatOutId_1⁵, hy⁰, ty⁰) else [LH_N]
//│ def enumFromTo_lh_₃(a⁷, b³, _lh_floatOutId_0¹⁶, _lh_floatOutId_1¹⁰, _lh_floatOutId_2³) = if (a⁷ <= b³) then 
//│ 	let _lh_listcomp_fun_ls_t¹⁰ = enumFromTo_lh_₃((a⁷ + 1), b³)
//│ 	in let _lh_listcomp_fun_ls_h⁹ = a⁷
//│ 	in let ty⁶ = _lh_floatOutId_0¹⁶(_lh_listcomp_fun_ls_t¹⁰)
//│ 	in let hy⁶ = ((7 * _lh_listcomp_fun_ls_h⁹) + 7)
//│ 	in force⁰(_lh_floatOutId_2³, _lh_floatOutId_1¹⁰, hy⁶, ty⁶) else [LH_N]
//│ def enumFromTo_lh_₄(a², b⁰, _lh_floatOutId_0⁵, _lh_floatOutId_1³) = if (a² <= b⁰) then 
//│ 	let t⁷ = enumFromTo_lh_₄((a² + 1), b⁰)
//│ 	in let h⁷ = a²
//│ 	in foldl_lh_₁(_lh_floatOutId_0⁵, _lh_floatOutId_0⁵(_lh_floatOutId_1³, h⁷), t⁷) else _lh_floatOutId_1³
//│ def enumFrom_lh_₁(a⁶) = lazy⁰(
//│ 	let tx³ = enumFrom_lh_₁((a⁶ + 1))
//│ 	in let hx³ = a⁶
//│ 	in (fun f³¹ -> (fun hy³ -> (fun ty³ -> [LH_C f³¹(hx³, hy³) zipWith_lz_nl_lh_₁(f³¹, tx³, ty³)]))))
//│ def enumFrom_lh_₂(a⁴) = lazy⁰(
//│ 	let tx² = enumFrom_lh_₂((a⁴ + 1))
//│ 	in let hx² = a⁴
//│ 	in (fun f²¹ -> (fun hy² -> (fun ty² -> [LH_C f²¹(hx², hy²) zipWith_lz_nl_lh_₂(f²¹, tx², ty²)]))))
//│ def foldl_lh_₁(f⁴, i⁰, ls²) = ls²(f⁴, i⁰)
//│ def foldr_lh_₁(f¹⁷, i³, ls¹⁰) = case ls¹⁰ of {
//│ 	LH_C h¹² t¹² => f¹⁷(h¹², foldr_lh_₁(f¹⁷, i³, t¹²))
//│ 	| LH_N  => i³}
//│ def get_lh_₁(_lh_get_arg1⁰) = case _lh_get_arg1⁰ of {
//│ 	Cell _lh_get_Cell_0⁰ => [LH_C _lh_get_Cell_0⁰ [LH_N]]
//│ 	| Node _lh_get_Node_0⁰ _lh_get_Node_1⁰ _lh_get_Node_2⁰ => mappend_lh_₃(get_lh_₁(_lh_get_Node_1⁰), get_lh_₁(_lh_get_Node_2⁰))}
//│ def head_lh_₁(ls²⁵) = case ls²⁵ of {
//│ 	LH_C h³¹ t³¹ => h³¹
//│ 	| LH_N  => error⁰}
//│ def head_lh_₂(ls⁴) = case ls⁴ of {
//│ 	LH_C h⁵ t⁵ => h⁵
//│ 	| LH_N  => error⁰}
//│ def head_lh_₃(ls²²) = case ls²² of {
//│ 	LH_C h²⁹ t²⁹ => h²⁹
//│ 	| LH_N  => error⁰}
//│ def init_dffs_lh_₁(_lh_init_dffs_arg1⁰) = if polyEq⁰(compType_lh_₁(_lh_init_dffs_arg1⁰), [Dff]) then update_outports_lh_₁(_lh_init_dffs_arg1⁰, [F]) else _lh_init_dffs_arg1⁰
//│ def inports_lh_₁(_lh_inports_arg1²) = case _lh_inports_arg1² of {
//│ 	PS _lh_inports_PS_0² _lh_inports_PS_1² _lh_inports_PS_2² _lh_inports_PS_3² _lh_inports_PS_4² => _lh_inports_PS_3²}
//│ def inports_lh_₂(_lh_inports_arg1¹) = case _lh_inports_arg1¹ of {
//│ 	PS _lh_inports_PS_0¹ _lh_inports_PS_1¹ _lh_inports_PS_2¹ _lh_inports_PS_3¹ _lh_inports_PS_4¹ => _lh_inports_PS_3¹}
//│ def inports_lh_₃(_lh_inports_arg1⁵) = case _lh_inports_arg1⁵ of {
//│ 	PS _lh_inports_PS_0⁵ _lh_inports_PS_1⁵ _lh_inports_PS_2⁵ _lh_inports_PS_3⁵ _lh_inports_PS_4⁵ => _lh_inports_PS_3⁵}
//│ def inports_lh_₄(_lh_inports_arg1⁰) = case _lh_inports_arg1⁰ of {
//│ 	PS _lh_inports_PS_0⁰ _lh_inports_PS_1⁰ _lh_inports_PS_2⁰ _lh_inports_PS_3⁰ _lh_inports_PS_4⁰ => _lh_inports_PS_3⁰}
//│ def inports_lh_₅(_lh_inports_arg1⁴) = case _lh_inports_arg1⁴ of {
//│ 	PS _lh_inports_PS_0⁴ _lh_inports_PS_1⁴ _lh_inports_PS_2⁴ _lh_inports_PS_3⁴ _lh_inports_PS_4⁴ => _lh_inports_PS_3⁴}
//│ def inports_lh_₆(_lh_inports_arg1³) = case _lh_inports_arg1³ of {
//│ 	PS _lh_inports_PS_0³ _lh_inports_PS_1³ _lh_inports_PS_2³ _lh_inports_PS_3³ _lh_inports_PS_4³ => _lh_inports_PS_3³}
//│ def inv_lh_₁(_lh_inv_arg1⁰) = if polyEq⁰(_lh_inv_arg1⁰, [T]) then [F] else [T]
//│ def length_lh_₁(ls¹⁸) = case ls¹⁸ of {
//│ 	LH_C h²⁵ t²⁵ => (1 + length_lh_₁(t²⁵))
//│ 	| LH_N  => 0}
//│ def make_packet_lh_₁(_lh_make_packet_arg1⁰) = 
//│ 	let _lh_listcomp_fun¹⁶ = (fun _lh_listcomp_fun_para⁶ -> case _lh_listcomp_fun_para⁶ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹⁰ _lh_listcomp_fun_ls_t¹¹ => case _lh_listcomp_fun_ls_h¹⁰ of {
//│ 			LH_P6 _lh_make_packet_LH_P6_0⁰ _lh_make_packet_LH_P6_1⁰ _lh_make_packet_LH_P6_2⁰ _lh_make_packet_LH_P6_3⁰ _lh_make_packet_LH_P6_4⁰ _lh_make_packet_LH_P6_5⁰ => [LH_C [LH_P8 pid_lh_₅(_lh_make_packet_arg1⁰) _lh_make_packet_LH_P6_0⁰ _lh_make_packet_LH_P6_1⁰ _lh_make_packet_LH_P6_2⁰ _lh_make_packet_LH_P6_3⁰ _lh_make_packet_LH_P6_4⁰ _lh_make_packet_LH_P6_5⁰ 1] _lh_listcomp_fun¹⁶(_lh_listcomp_fun_ls_t¹¹)]
//│ 			| _  => _lh_listcomp_fun¹⁶(_lh_listcomp_fun_ls_t¹¹)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹⁶(outports_lh_₇(_lh_make_packet_arg1⁰))
//│ def make_packet_lh_₂(_lh_make_packet_arg1¹) = 
//│ 	let _lh_listcomp_fun²⁶ = (fun _lh_listcomp_fun_para¹⁶ -> case _lh_listcomp_fun_para¹⁶ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹⁶ _lh_listcomp_fun_ls_t¹⁷ => case _lh_listcomp_fun_ls_h¹⁶ of {
//│ 			LH_P6 _lh_make_packet_LH_P6_0¹ _lh_make_packet_LH_P6_1¹ _lh_make_packet_LH_P6_2¹ _lh_make_packet_LH_P6_3¹ _lh_make_packet_LH_P6_4¹ _lh_make_packet_LH_P6_5¹ => [LH_C [LH_P8 pid_lh_₅(_lh_make_packet_arg1¹) _lh_make_packet_LH_P6_0¹ _lh_make_packet_LH_P6_1¹ _lh_make_packet_LH_P6_2¹ _lh_make_packet_LH_P6_3¹ _lh_make_packet_LH_P6_4¹ _lh_make_packet_LH_P6_5¹ 1] _lh_listcomp_fun²⁶(_lh_listcomp_fun_ls_t¹⁷)]
//│ 			| _  => _lh_listcomp_fun²⁶(_lh_listcomp_fun_ls_t¹⁷)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun²⁶(outports_lh_₈(_lh_make_packet_arg1¹))
//│ def map_lh_₁(f²⁵, ls¹⁶) = ls¹⁶(f²⁵)
//│ def map_lh_₁₀(f⁴³, ls²⁷) = ls²⁷(f⁴³)
//│ def map_lh_₁₁(f⁶, ls⁵, _lh_floatOutId_0⁴) = case ls⁵ of {
//│ 	LH_C h⁶ t⁶ => 
//│ 		let _lh_or_LH_C_1⁰ = map_lh_₁₁(f⁶, t⁶)
//│ 		in let _lh_or_LH_C_0⁰ = f⁶(h⁶)
//│ 		in if _lh_or_LH_C_0⁰ then [True] else or_lh_₁(_lh_or_LH_C_1⁰)
//│ 	| LH_N  => [False]}
//│ def map_lh_₁₂(f²³, ls¹²) = ls¹²(f²³)
//│ def map_lh_₁₃(f¹², ls⁹, _lh_floatOutId_0⁶, _lh_floatOutId_1⁴) = case ls⁹ of {
//│ 	LH_C h¹⁰ t¹⁰ => 
//│ 		let t¹¹ = map_lh_₁₃(f¹², t¹⁰)
//│ 		in let h¹¹ = f¹²(h¹⁰)
//│ 		in let _lh_or_LH_C_1¹ = map_lh_₁₂(_lh_floatOutId_0⁶, t¹¹)
//│ 		in let _lh_or_LH_C_0¹ = _lh_floatOutId_0⁶(h¹¹)
//│ 		in if _lh_or_LH_C_0¹ then [True] else or_lh_₂(_lh_or_LH_C_1¹)
//│ 	| LH_N  => [False]}
//│ def map_lh_₁₄(f³⁵, ls²⁰) = case ls²⁰ of {
//│ 	LH_C h²⁷ t²⁷ => [LH_C f³⁵(h²⁷) map_lh_₁₄(f³⁵, t²⁷)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₅(f¹, ls¹, _lh_floatOutId_0³) = case ls¹ of {
//│ 	LH_C h¹ t¹ => 
//│ 		let t² = map_lh_₁₅(f¹, t¹)
//│ 		in let h² = f¹(h¹)
//│ 		in [LH_C _lh_floatOutId_0³(h²) map_lh_₁₆(_lh_floatOutId_0³, t²)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₁₆(f⁴⁵, ls²⁸) = ls²⁸(f⁴⁵)
//│ def map_lh_₁₇(f⁴², ls²⁶, _lh_floatOutId_0¹⁷) = case ls²⁶ of {
//│ 	LH_C h³² t³² => 
//│ 		let _lh_or_LH_C_1³ = map_lh_₁₇(f⁴², t³²)
//│ 		in let _lh_or_LH_C_0³ = f⁴²(h³²)
//│ 		in if _lh_or_LH_C_0³ then [True] else or_lh_₃(_lh_or_LH_C_1³)
//│ 	| LH_N  => [False]}
//│ def map_lh_₁₈(f²⁸, ls¹⁷, _lh_floatOutId_0¹⁰, _lh_floatOutId_1⁸) = case ls¹⁷ of {
//│ 	LH_C h²² t²² => 
//│ 		let t²³ = map_lh_₁₈(f²⁸, t²²)
//│ 		in let h²³ = f²⁸(h²²)
//│ 		in let _lh_or_LH_C_1² = map_lh_₁₉(_lh_floatOutId_0¹⁰, t²³)
//│ 		in let _lh_or_LH_C_0² = _lh_floatOutId_0¹⁰(h²³)
//│ 		in if _lh_or_LH_C_0² then [True] else or_lh_₄(_lh_or_LH_C_1²)
//│ 	| LH_N  => [False]}
//│ def map_lh_₁₉(f¹⁰, ls⁷) = ls⁷(f¹⁰)
//│ def map_lh_₂(f²⁴, ls¹⁴) = case ls¹⁴ of {
//│ 	LH_C h¹⁸ t¹⁸ => [LH_C f²⁴(h¹⁸) map_lh_₂(f²⁴, t¹⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂₀(f⁹, ls⁶) = case ls⁶ of {
//│ 	LH_C h⁸ t⁸ => [LH_C f⁹(h⁸) map_lh_₂₀(f⁹, t⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₂₁(f¹¹, ls⁸) = case ls⁸ of {
//│ 	LH_C h⁹ t⁹ => [LH_C f¹¹(h⁹) map_lh_₂₁(f¹¹, t⁹)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₃(f³⁸, ls²¹) = case ls²¹ of {
//│ 	LH_C h²⁸ t²⁸ => [LH_C f³⁸(h²⁸) map_lh_₃(f³⁸, t²⁸)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₄(f⁴⁰, ls²⁴) = case ls²⁴ of {
//│ 	LH_C h³⁰ t³⁰ => [LH_C f⁴⁰(h³⁰) map_lh_₄(f⁴⁰, t³⁰)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₅(f³⁴, ls¹⁹) = case ls¹⁹ of {
//│ 	LH_C h²⁶ t²⁶ => [LH_C f³⁴(h²⁶) map_lh_₅(f³⁴, t²⁶)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₆(f²², ls¹¹) = case ls¹¹ of {
//│ 	LH_C h¹⁶ t¹⁶ => [LH_C f²²(h¹⁶) map_lh_₆(f²², t¹⁶)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₇(f⁵, ls³) = case ls³ of {
//│ 	LH_C h³ t³ => [LH_C f⁵(h³) map_lh_₇(f⁵, t³)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₈(f⁴⁶, ls²⁹, _lh_floatOutId_0¹⁸) = case ls²⁹ of {
//│ 	LH_C h³³ t³³ => 
//│ 		let t³⁴ = map_lh_₈(f⁴⁶, t³³)
//│ 		in let h³⁴ = f⁴⁶(h³³)
//│ 		in [LH_C _lh_floatOutId_0¹⁸(h³⁴) map_lh_₉(_lh_floatOutId_0¹⁸, t³⁴)]
//│ 	| LH_N  => [LH_N]}
//│ def map_lh_₉(f⁰, ls⁰) = ls⁰(f⁰)
//│ def mappend_lh_₁(xs², ys²) = xs²(ys²)
//│ def mappend_lh_₂(xs⁵, ys³) = xs⁵(ys³)
//│ def mappend_lh_₃(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ mappend_lh_₃(t⁰, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def maximum_lh_₁(_lh_maximum_arg1⁰) = case _lh_maximum_arg1⁰ of {
//│ 	LH_C _lh_maximum_LH_C_0⁰ _lh_maximum_LH_C_1⁰ => 
//│ 		let go⁰ = (fun _lh_go_arg1⁰ -> (fun _lh_go_arg2⁰ -> case _lh_go_arg2⁰ of {
//│ 			LH_N  => _lh_go_arg1⁰
//│ 			| LH_C _lh_go_LH_C_0⁰ _lh_go_LH_C_1⁰ => if (_lh_go_arg1⁰ > _lh_go_LH_C_0⁰) then go⁰(_lh_go_arg1⁰, _lh_go_LH_C_1⁰) else go⁰(_lh_go_LH_C_0⁰, _lh_go_LH_C_1⁰)}))
//│ 		in go⁰(_lh_maximum_LH_C_0⁰, _lh_maximum_LH_C_1⁰)
//│ 	| LH_N  => error⁰}
//│ def maximum_lh_₂(_lh_maximum_arg1¹) = case _lh_maximum_arg1¹ of {
//│ 	LH_C _lh_maximum_LH_C_0¹ _lh_maximum_LH_C_1¹ => 
//│ 		let go¹ = (fun _lh_go_arg1¹ -> (fun _lh_go_arg2¹ -> case _lh_go_arg2¹ of {
//│ 			LH_N  => _lh_go_arg1¹
//│ 			| LH_C _lh_go_LH_C_0¹ _lh_go_LH_C_1¹ => if (_lh_go_arg1¹ > _lh_go_LH_C_0¹) then go¹(_lh_go_arg1¹, _lh_go_LH_C_1¹) else go¹(_lh_go_LH_C_0¹, _lh_go_LH_C_1¹)}))
//│ 		in go¹(_lh_maximum_LH_C_0¹, _lh_maximum_LH_C_1¹)
//│ 	| LH_N  => error⁰}
//│ def nearest_power_of_two_lh_₁(_lh_nearest_power_of_two_arg1⁰) = until_lh_₁((fun a⁰ -> (a⁰ >= _lh_nearest_power_of_two_arg1⁰)), (fun a¹ -> (a¹ * 2)), 1)
//│ def or2_lh_₁(_lh_or2_arg1⁰, _lh_or2_arg2⁰) = if (polyEq⁰(_lh_or2_arg1⁰, [T]) || polyEq⁰(_lh_or2_arg2⁰, [T])) then [T] else [F]
//│ def or_lh_₁(_lh_or_arg1¹) = _lh_or_arg1¹([lh_Unit])
//│ def or_lh_₂(_lh_or_arg1³) = _lh_or_arg1³([lh_Unit])
//│ def or_lh_₃(_lh_or_arg1⁰) = _lh_or_arg1⁰([lh_Unit])
//│ def or_lh_₄(_lh_or_arg1²) = _lh_or_arg1²([lh_Unit])
//│ def outports_lh_₁(_lh_outports_arg1⁷) = case _lh_outports_arg1⁷ of {
//│ 	PS _lh_outports_PS_0⁷ _lh_outports_PS_1⁷ _lh_outports_PS_2⁷ _lh_outports_PS_3⁷ _lh_outports_PS_4⁷ => _lh_outports_PS_4⁷}
//│ def outports_lh_₂(_lh_outports_arg1¹) = case _lh_outports_arg1¹ of {
//│ 	PS _lh_outports_PS_0¹ _lh_outports_PS_1¹ _lh_outports_PS_2¹ _lh_outports_PS_3¹ _lh_outports_PS_4¹ => _lh_outports_PS_4¹}
//│ def outports_lh_₃(_lh_outports_arg1³) = case _lh_outports_arg1³ of {
//│ 	PS _lh_outports_PS_0³ _lh_outports_PS_1³ _lh_outports_PS_2³ _lh_outports_PS_3³ _lh_outports_PS_4³ => _lh_outports_PS_4³}
//│ def outports_lh_₄(_lh_outports_arg1⁵) = case _lh_outports_arg1⁵ of {
//│ 	PS _lh_outports_PS_0⁵ _lh_outports_PS_1⁵ _lh_outports_PS_2⁵ _lh_outports_PS_3⁵ _lh_outports_PS_4⁵ => _lh_outports_PS_4⁵}
//│ def outports_lh_₅(_lh_outports_arg1²) = case _lh_outports_arg1² of {
//│ 	PS _lh_outports_PS_0² _lh_outports_PS_1² _lh_outports_PS_2² _lh_outports_PS_3² _lh_outports_PS_4² => _lh_outports_PS_4²}
//│ def outports_lh_₆(_lh_outports_arg1⁴) = case _lh_outports_arg1⁴ of {
//│ 	PS _lh_outports_PS_0⁴ _lh_outports_PS_1⁴ _lh_outports_PS_2⁴ _lh_outports_PS_3⁴ _lh_outports_PS_4⁴ => _lh_outports_PS_4⁴}
//│ def outports_lh_₇(_lh_outports_arg1⁰) = case _lh_outports_arg1⁰ of {
//│ 	PS _lh_outports_PS_0⁰ _lh_outports_PS_1⁰ _lh_outports_PS_2⁰ _lh_outports_PS_3⁰ _lh_outports_PS_4⁰ => _lh_outports_PS_4⁰}
//│ def outports_lh_₈(_lh_outports_arg1⁶) = case _lh_outports_arg1⁶ of {
//│ 	PS _lh_outports_PS_0⁶ _lh_outports_PS_1⁶ _lh_outports_PS_2⁶ _lh_outports_PS_3⁶ _lh_outports_PS_4⁶ => _lh_outports_PS_4⁶}
//│ def pad_circuit_lh_₁(_lh_pad_circuit_arg1⁰) = _lh_pad_circuit_arg1⁰([lh_Unit])
//│ def pad_packets_lh_₁(_lh_pad_packets_arg1⁰) = 
//│ 	let pad⁰ = (fun xs⁷ -> 
//│ 		let max_ps⁰ = maximum_lh_₂(map_lh_₂₁(length_lh_₁, _lh_pad_packets_arg1⁰))
//│ 		in take_lz_lh_₂(max_ps⁰, append__lz_lh_₂(xs⁷, copy_lz_lh_₂(max_ps⁰, emptyPacket_lh_₁))))
//│ 	in map_lh_₂₀(pad⁰, _lh_pad_packets_arg1⁰)
//│ def pad_packets_lh_₂(_lh_pad_packets_arg1¹) = 
//│ 	let pad¹ = (fun xs¹⁵ -> 
//│ 		let max_ps¹ = maximum_lh_₂(map_lh_₂₁(length_lh_₁, _lh_pad_packets_arg1¹))
//│ 		in take_lz_lh_₂(max_ps¹, append__lz_lh_₂(xs¹⁵, copy_lz_lh_₂(max_ps¹, emptyPacket_lh_₅))))
//│ 	in map_lh_₂₁(pad¹, _lh_pad_packets_arg1¹)
//│ def pathDepth_lh_₁(_lh_pathDepth_arg1⁵) = case _lh_pathDepth_arg1⁵ of {
//│ 	PS _lh_pathDepth_PS_0⁵ _lh_pathDepth_PS_1⁵ _lh_pathDepth_PS_2⁵ _lh_pathDepth_PS_3⁵ _lh_pathDepth_PS_4⁵ => _lh_pathDepth_PS_2⁵}
//│ def pathDepth_lh_₂(_lh_pathDepth_arg1⁰) = case _lh_pathDepth_arg1⁰ of {
//│ 	PS _lh_pathDepth_PS_0⁰ _lh_pathDepth_PS_1⁰ _lh_pathDepth_PS_2⁰ _lh_pathDepth_PS_3⁰ _lh_pathDepth_PS_4⁰ => _lh_pathDepth_PS_2⁰}
//│ def pathDepth_lh_₃(_lh_pathDepth_arg1⁶) = case _lh_pathDepth_arg1⁶ of {
//│ 	PS _lh_pathDepth_PS_0⁶ _lh_pathDepth_PS_1⁶ _lh_pathDepth_PS_2⁶ _lh_pathDepth_PS_3⁶ _lh_pathDepth_PS_4⁶ => _lh_pathDepth_PS_2⁶}
//│ def pathDepth_lh_₄(_lh_pathDepth_arg1¹) = case _lh_pathDepth_arg1¹ of {
//│ 	PS _lh_pathDepth_PS_0¹ _lh_pathDepth_PS_1¹ _lh_pathDepth_PS_2¹ _lh_pathDepth_PS_3¹ _lh_pathDepth_PS_4¹ => _lh_pathDepth_PS_2¹}
//│ def pathDepth_lh_₅(_lh_pathDepth_arg1²) = case _lh_pathDepth_arg1² of {
//│ 	PS _lh_pathDepth_PS_0² _lh_pathDepth_PS_1² _lh_pathDepth_PS_2² _lh_pathDepth_PS_3² _lh_pathDepth_PS_4² => _lh_pathDepth_PS_2²}
//│ def pathDepth_lh_₆(_lh_pathDepth_arg1⁷) = case _lh_pathDepth_arg1⁷ of {
//│ 	PS _lh_pathDepth_PS_0⁷ _lh_pathDepth_PS_1⁷ _lh_pathDepth_PS_2⁷ _lh_pathDepth_PS_3⁷ _lh_pathDepth_PS_4⁷ => _lh_pathDepth_PS_2⁷}
//│ def pathDepth_lh_₇(_lh_pathDepth_arg1³) = case _lh_pathDepth_arg1³ of {
//│ 	PS _lh_pathDepth_PS_0³ _lh_pathDepth_PS_1³ _lh_pathDepth_PS_2³ _lh_pathDepth_PS_3³ _lh_pathDepth_PS_4³ => _lh_pathDepth_PS_2³}
//│ def pathDepth_lh_₈(_lh_pathDepth_arg1⁸) = case _lh_pathDepth_arg1⁸ of {
//│ 	PS _lh_pathDepth_PS_0⁸ _lh_pathDepth_PS_1⁸ _lh_pathDepth_PS_2⁸ _lh_pathDepth_PS_3⁸ _lh_pathDepth_PS_4⁸ => _lh_pathDepth_PS_2⁸}
//│ def pathDepth_lh_₉(_lh_pathDepth_arg1⁴) = case _lh_pathDepth_arg1⁴ of {
//│ 	PS _lh_pathDepth_PS_0⁴ _lh_pathDepth_PS_1⁴ _lh_pathDepth_PS_2⁴ _lh_pathDepth_PS_3⁴ _lh_pathDepth_PS_4⁴ => _lh_pathDepth_PS_2⁴}
//│ def pid_lh_₁(_lh_pid_arg1³) = case _lh_pid_arg1³ of {
//│ 	PS _lh_pid_PS_0³ _lh_pid_PS_1³ _lh_pid_PS_2³ _lh_pid_PS_3³ _lh_pid_PS_4³ => _lh_pid_PS_0³}
//│ def pid_lh_₂(_lh_pid_arg1¹) = case _lh_pid_arg1¹ of {
//│ 	PS _lh_pid_PS_0¹ _lh_pid_PS_1¹ _lh_pid_PS_2¹ _lh_pid_PS_3¹ _lh_pid_PS_4¹ => _lh_pid_PS_0¹}
//│ def pid_lh_₃(_lh_pid_arg1²) = case _lh_pid_arg1² of {
//│ 	PS _lh_pid_PS_0² _lh_pid_PS_1² _lh_pid_PS_2² _lh_pid_PS_3² _lh_pid_PS_4² => _lh_pid_PS_0²}
//│ def pid_lh_₄(_lh_pid_arg1⁰) = case _lh_pid_arg1⁰ of {
//│ 	PS _lh_pid_PS_0⁰ _lh_pid_PS_1⁰ _lh_pid_PS_2⁰ _lh_pid_PS_3⁰ _lh_pid_PS_4⁰ => _lh_pid_PS_0⁰}
//│ def pid_lh_₅(_lh_pid_arg1⁴) = case _lh_pid_arg1⁴ of {
//│ 	PS _lh_pid_PS_0⁴ _lh_pid_PS_1⁴ _lh_pid_PS_2⁴ _lh_pid_PS_3⁴ _lh_pid_PS_4⁴ => _lh_pid_PS_0⁴}
//│ def put_lh_₁(_lh_put_arg1⁰, _lh_floatOutId_0¹⁴) = case _lh_put_arg1⁰ of {
//│ 	LH_C _lh_put_LH_C_0⁰ _lh_put_LH_C_1⁰ => case _lh_put_LH_C_1⁰ of {
//│ 		LH_N  => 
//│ 			let _lh_upsweep_Cell_0⁰ = _lh_put_LH_C_0⁰
//│ 			in [LH_P2 _lh_upsweep_Cell_0⁰ 
//│ 				let _lh_downsweep_Cell_0⁰ = _lh_upsweep_Cell_0⁰
//│ 				in (fun _lh_downsweep_arg2¹ -> (fun _lh_downsweep_arg1² -> [Cell _lh_downsweep_arg2¹]))]
//│ 		| _  => 
//│ 			let _lh_matchIdent¹² = splitAt_lh_₁(div⁰(length_lh_₁(_lh_put_arg1⁰), 2), _lh_put_arg1⁰)
//│ 			in case _lh_matchIdent¹² of {
//│ 				LH_P2 _lh_put_LH_P2_0⁰ _lh_put_LH_P2_1⁰ => 
//│ 					let _lh_upsweep_Node_2⁰ = put_lh_₁(_lh_put_LH_P2_1⁰)
//│ 					in let _lh_upsweep_Node_1⁰ = put_lh_₁(_lh_put_LH_P2_0⁰)
//│ 					in let _lh_upsweep_Node_0⁰ = [Unit]
//│ 					in let _lh_matchIdent¹³ = upsweep_lh_₁(_lh_floatOutId_0¹⁴, _lh_upsweep_Node_1⁰)
//│ 					in case _lh_matchIdent¹³ of {
//│ 						LH_P2 _lh_upsweep_LH_P2_0⁰ _lh_upsweep_LH_P2_1⁰ => 
//│ 							let _lh_matchIdent¹⁴ = upsweep_lh_₁(_lh_floatOutId_0¹⁴, _lh_upsweep_Node_2⁰)
//│ 							in case _lh_matchIdent¹⁴ of {
//│ 								LH_P2 _lh_upsweep_LH_P2_0¹ _lh_upsweep_LH_P2_1¹ => [LH_P2 _lh_floatOutId_0¹⁴(_lh_upsweep_LH_P2_0⁰, _lh_upsweep_LH_P2_0¹) 
//│ 									let _lh_downsweep_Node_2¹ = _lh_upsweep_LH_P2_1¹
//│ 									in let _lh_downsweep_Node_1¹ = _lh_upsweep_LH_P2_1⁰
//│ 									in let _lh_downsweep_Node_0⁰ = 	
//│ 										let _lh_downsweep_LH_P2_1² = _lh_upsweep_LH_P2_0¹
//│ 										in let _lh_downsweep_LH_P2_0² = _lh_upsweep_LH_P2_0⁰
//│ 										in (fun _lh_downsweep_Node_1² -> (fun _lh_downsweep_Node_2² -> (fun _lh_downsweep_arg1³ -> (fun _lh_downsweep_arg2² -> 
//│ 											let _lh_matchIdent¹⁵ = _lh_downsweep_arg1³(_lh_downsweep_LH_P2_0², _lh_downsweep_LH_P2_1², _lh_downsweep_arg2²)
//│ 											in _lh_matchIdent¹⁵(_lh_downsweep_Node_1², _lh_downsweep_Node_2², _lh_downsweep_arg1³)))))
//│ 									in (fun _lh_downsweep_arg2³ -> (fun _lh_downsweep_arg1⁴ -> _lh_downsweep_Node_0⁰(_lh_downsweep_Node_1¹, _lh_downsweep_Node_2¹, _lh_downsweep_arg1⁴, _lh_downsweep_arg2³)))]}}}}
//│ 	| _  => 
//│ 		let _lh_matchIdent¹⁶ = splitAt_lh_₁(div⁰(length_lh_₁(_lh_put_arg1⁰), 2), _lh_put_arg1⁰)
//│ 		in case _lh_matchIdent¹⁶ of {
//│ 			LH_P2 _lh_put_LH_P2_0¹ _lh_put_LH_P2_1¹ => 
//│ 				let _lh_upsweep_Node_2¹ = put_lh_₁(_lh_put_LH_P2_1¹)
//│ 				in let _lh_upsweep_Node_1¹ = put_lh_₁(_lh_put_LH_P2_0¹)
//│ 				in let _lh_upsweep_Node_0¹ = [Unit]
//│ 				in let _lh_matchIdent¹⁷ = upsweep_lh_₁(_lh_floatOutId_0¹⁴, _lh_upsweep_Node_1¹)
//│ 				in case _lh_matchIdent¹⁷ of {
//│ 					LH_P2 _lh_upsweep_LH_P2_0² _lh_upsweep_LH_P2_1² => 
//│ 						let _lh_matchIdent¹⁸ = upsweep_lh_₁(_lh_floatOutId_0¹⁴, _lh_upsweep_Node_2¹)
//│ 						in case _lh_matchIdent¹⁸ of {
//│ 							LH_P2 _lh_upsweep_LH_P2_0³ _lh_upsweep_LH_P2_1³ => [LH_P2 _lh_floatOutId_0¹⁴(_lh_upsweep_LH_P2_0², _lh_upsweep_LH_P2_0³) 
//│ 								let _lh_downsweep_Node_2³ = _lh_upsweep_LH_P2_1³
//│ 								in let _lh_downsweep_Node_1³ = _lh_upsweep_LH_P2_1²
//│ 								in let _lh_downsweep_Node_0¹ = 	
//│ 									let _lh_downsweep_LH_P2_1³ = _lh_upsweep_LH_P2_0³
//│ 									in let _lh_downsweep_LH_P2_0³ = _lh_upsweep_LH_P2_0²
//│ 									in (fun _lh_downsweep_Node_1⁴ -> (fun _lh_downsweep_Node_2⁴ -> (fun _lh_downsweep_arg1⁵ -> (fun _lh_downsweep_arg2⁴ -> 
//│ 										let _lh_matchIdent¹⁹ = _lh_downsweep_arg1⁵(_lh_downsweep_LH_P2_0³, _lh_downsweep_LH_P2_1³, _lh_downsweep_arg2⁴)
//│ 										in _lh_matchIdent¹⁹(_lh_downsweep_Node_1⁴, _lh_downsweep_Node_2⁴, _lh_downsweep_arg1⁵)))))
//│ 								in (fun _lh_downsweep_arg2⁵ -> (fun _lh_downsweep_arg1⁶ -> _lh_downsweep_Node_0¹(_lh_downsweep_Node_1³, _lh_downsweep_Node_2³, _lh_downsweep_arg1⁶, _lh_downsweep_arg2⁵)))]}}}}
//│ def reg_lh_₁(_lh_reg_arg1⁰, _lh_reg_arg2⁰) = [LH_C [PS _lh_reg_arg2⁰ [Inp] 0 [LH_N] [LH_C [LH_P6 0 [F] [False] 0 [True] 4] [LH_N]]] [LH_C [PS (_lh_reg_arg2⁰ + 1) [Dff] 1 [LH_C [LH_P3 (_lh_reg_arg2⁰ + 5) 0 [F]] [LH_N]] [LH_C [LH_P6 0 [F] [False] 0 [True] 5] [LH_N]]] [LH_C [PS (_lh_reg_arg2⁰ + 2) [Inv] 1 [LH_C [LH_P3 _lh_reg_arg1⁰ 0 [F]] [LH_N]] [LH_C [LH_P6 0 [F] [False] 0 [True] 1] [LH_N]]] [LH_C [PS (_lh_reg_arg2⁰ + 3) [And2] 2 [LH_C [LH_P3 (_lh_reg_arg2⁰ + 1) 0 [F]] [LH_C [LH_P3 (_lh_reg_arg2⁰ + 2) 0 [F]] [LH_N]]] [LH_C [LH_P6 0 [F] [False] 0 [True] 2] [LH_N]]] [LH_C [PS (_lh_reg_arg2⁰ + 4) [And2] 1 [LH_C [LH_P3 _lh_reg_arg1⁰ 0 [F]] [LH_C [LH_P3 _lh_reg_arg2⁰ 0 [F]] [LH_N]]] [LH_C [LH_P6 0 [F] [False] 0 [True] 1] [LH_N]]] [LH_C [PS (_lh_reg_arg2⁰ + 5) [Or2] 3 [LH_C [LH_P3 (_lh_reg_arg2⁰ + 3) 0 [F]] [LH_C [LH_P3 (_lh_reg_arg2⁰ + 4) 0 [F]] [LH_N]]] [LH_C [LH_P6 0 [F] [True] 4 [False] 0] [LH_N]]] [LH_C [PS (_lh_reg_arg2⁰ + 6) [Outp] 4 [LH_C [LH_P3 (_lh_reg_arg2⁰ + 1) 0 [F]] [LH_N]] [LH_N]] [LH_N]]]]]]]]
//│ def regs_lh_₁(_lh_regs_arg1⁰, _lh_dummy¹², _lh_simulate_arg1¹) = 
//│ 	let ilabel⁰ = (fun _lh_ilabel_arg1⁰ -> (fun _lh_ilabel_arg2⁰ -> [LH_P2 mappend_lh_₂(
//│ 			let t³⁵ = (fun ys¹¹ -> ys¹¹)
//│ 			in let h³⁵ = 'x'
//│ 			in (fun ys¹² -> [LH_C h³⁵ mappend_lh_₂(t³⁵, ys¹²)]), string_of_int⁰(_lh_ilabel_arg1⁰)) _lh_ilabel_arg2⁰]))
//│ 	and olabel⁰ = (fun _lh_olabel_arg1⁰ -> (fun _lh_olabel_arg2⁰ -> [LH_P2 mappend_lh_₁(
//│ 			let t³⁶ = (fun ys¹³ -> ys¹³)
//│ 			in let h³⁶ = 'y'
//│ 			in (fun ys¹⁴ -> [LH_C h³⁶ mappend_lh_₁(t³⁶, ys¹⁴)]), string_of_int⁰(_lh_olabel_arg1⁰)) _lh_olabel_arg2⁰])) 
//│ 	in let is⁰ = [LH_C [LH_P2 [LH_C 's' [LH_C 't' [LH_C 'o' [LH_N]]]] 0] zipWith_lz_nl_lh_₁(ilabel⁰, enumFrom_lh_₁(0), 
//│ 		let _lh_listcomp_fun²³ = (fun _lh_listcomp_fun_para¹³ -> _lh_listcomp_fun_para¹³(_lh_listcomp_fun²³))
//│ 		in _lh_listcomp_fun²³(enumFromTo_lh_₂(0, (_lh_regs_arg1⁰ - 1))))]
//│ 	in let os⁰ = zipWith_lz_nl_lh_₂(olabel⁰, enumFrom_lh_₂(0), 
//│ 		let _lh_listcomp_fun²⁴ = (fun _lh_listcomp_fun_para¹⁴ -> _lh_listcomp_fun_para¹⁴(_lh_listcomp_fun²⁴))
//│ 		in _lh_listcomp_fun²⁴(enumFromTo_lh_₃(0, (_lh_regs_arg1⁰ - 1))))
//│ 	in let sto⁰ = [PS 0 [Inp] 0 [LH_N] [LH_C [LH_P6 0 [F] [False] 0 [True] ((8 * (_lh_regs_arg1⁰ - 1)) + 5)] [LH_N]]]
//│ 	in let states⁰ = [LH_C sto⁰ concat_lh_₁(map_lh_₁(reg_lh_₁(0), 
//│ 		let _lh_listcomp_fun²⁵ = (fun _lh_listcomp_fun_para¹⁵ -> _lh_listcomp_fun_para¹⁵(_lh_listcomp_fun²⁵))
//│ 		in _lh_listcomp_fun²⁵(enumFromTo_lh_₁(0, (_lh_regs_arg1⁰ - 1)))))]
//│ 	in let _lh_pad_circuit_LH_P4_3⁰ = states⁰
//│ 	in let _lh_pad_circuit_LH_P4_2⁰ = os⁰
//│ 	in let _lh_pad_circuit_LH_P4_1⁰ = is⁰
//│ 	in let _lh_pad_circuit_LH_P4_0⁰ = (1 + (7 * _lh_regs_arg1⁰))
//│ 	in let p2⁰ = nearest_power_of_two_lh_₁(_lh_pad_circuit_LH_P4_0⁰)
//│ 	in let _lh_simulate_LH_P4_3⁰ = take_lz_lh_₁(p2⁰, append__lz_lh_₁(_lh_pad_circuit_LH_P4_3⁰, copy_lz_lh_₁(p2⁰, emptyState_lh_₁)))
//│ 	in let _lh_simulate_LH_P4_2⁰ = _lh_pad_circuit_LH_P4_2⁰
//│ 	in let _lh_simulate_LH_P4_1⁰ = _lh_pad_circuit_LH_P4_1⁰
//│ 	in let _lh_simulate_LH_P4_0⁰ = p2⁰
//│ 	in tail_lh_₁(scanl_lh_₁(do_cycle_lh_₁(critical_path_depth_lh_₁(
//│ 		let _lh_critical_path_depth_LH_P4_3⁰ = _lh_simulate_LH_P4_3⁰
//│ 		in let _lh_critical_path_depth_LH_P4_2⁰ = _lh_simulate_LH_P4_2⁰
//│ 		in let _lh_critical_path_depth_LH_P4_1⁰ = _lh_simulate_LH_P4_1⁰
//│ 		in let _lh_critical_path_depth_LH_P4_0⁰ = _lh_simulate_LH_P4_0⁰
//│ 		in (fun _lh_dummy¹³ -> maximum_lh_₁(map_lh_₆(pathDepth_lh_₁, _lh_critical_path_depth_LH_P4_3⁰))))), [LH_P4 _lh_simulate_LH_P4_0⁰ _lh_simulate_LH_P4_1⁰ _lh_simulate_LH_P4_2⁰ map_lh_₃(init_dffs_lh_₁, _lh_simulate_LH_P4_3⁰)], _lh_simulate_arg1¹))
//│ def restore_requests_lh_₁(_lh_restore_requests_arg1⁰, _lh_restore_requests_arg2⁰) = 
//│ 	let restore⁰ = (fun _lh_restore_arg1⁰ -> (fun _lh_restore_arg2⁰ -> updateOutports_lh_₂(_lh_restore_arg2⁰, zipWith_lh_₂(restore_outport⁰, outports_lh_₃(_lh_restore_arg1⁰), outports_lh_₂(_lh_restore_arg2⁰)))))
//│ 	and restore_outport⁰ = (fun _lh_restore_outport_arg1⁰ -> (fun _lh_restore_outport_arg2⁰ -> case _lh_restore_outport_arg1⁰ of {
//│ 			LH_P6 _lh_restore_outport_LH_P6_0⁰ _lh_restore_outport_LH_P6_1⁰ _lh_restore_outport_LH_P6_2⁰ _lh_restore_outport_LH_P6_3⁰ _lh_restore_outport_LH_P6_4⁰ _lh_restore_outport_LH_P6_5⁰ => case _lh_restore_outport_arg2⁰ of {
//│ 				LH_P6 _lh_restore_outport_LH_P6_0¹ _lh_restore_outport_LH_P6_1¹ _lh_restore_outport_LH_P6_2¹ _lh_restore_outport_LH_P6_3¹ _lh_restore_outport_LH_P6_4¹ _lh_restore_outport_LH_P6_5¹ => [LH_P6 _lh_restore_outport_LH_P6_0⁰ _lh_restore_outport_LH_P6_1¹ _lh_restore_outport_LH_P6_2⁰ _lh_restore_outport_LH_P6_3⁰ _lh_restore_outport_LH_P6_4⁰ _lh_restore_outport_LH_P6_5⁰]}})) 
//│ 	in zipWith_lh_₁(restore⁰, _lh_restore_requests_arg1⁰, _lh_restore_requests_arg2⁰)
//│ def run_lh_₁(_lh_run_arg1⁰, _lh_run_arg2⁰) = 
//│ 	let example⁰ = pad_circuit_lh_₁(regs_lh_₁(_lh_run_arg1⁰))
//│ 	in let inputs⁰ = copy_lh_₂((_lh_run_arg1⁰ + 1), [T])
//│ 	in let cycles⁰ = copy_lh_₁(_lh_run_arg2⁰, inputs⁰)
//│ 	in circuit_simulate_lh_₁(cycles⁰, example⁰)
//│ def scanl_lh_₁(_lh_scanl_arg1², _lh_scanl_arg2², _lh_scanl_arg3⁰) = [LH_C _lh_scanl_arg2² 
//│ 	let _lh_matchIdent²³ = _lh_scanl_arg3⁰
//│ 	in _lh_matchIdent²³(_lh_scanl_arg1², _lh_scanl_arg2²)]
//│ def scanlr_lh_₁(_lh_scanlr_arg1¹, _lh_scanlr_arg2¹, _lh_scanlr_arg3¹, _lh_scanlr_arg4¹, _lh_scanlr_arg5¹) = 
//│ 	let up¹ = (fun _lh_up_arg1¹ -> (fun _lh_up_arg2¹ -> (fun _lh_up_arg3¹ -> (fun _lh_up_arg4¹ -> case _lh_up_arg3¹ of {
//│ 			LH_P2 _lh_up_LH_P2_0² _lh_up_LH_P2_1² => case _lh_up_arg4¹ of {
//│ 				LH_P2 _lh_up_LH_P2_0³ _lh_up_LH_P2_1³ => [LH_P2 _lh_up_arg1¹(_lh_up_LH_P2_0², _lh_up_LH_P2_0³) _lh_up_arg2¹(_lh_up_LH_P2_1², _lh_up_LH_P2_1³)]}}))))
//│ 	and down¹ = (fun _lh_down_arg1¹ -> (fun _lh_down_arg2¹ -> (fun _lh_down_arg3¹ -> (fun _lh_down_arg4¹ -> (fun _lh_down_arg5¹ -> case _lh_down_arg3¹ of {
//│ 			LH_P2 _lh_down_LH_P2_0³ _lh_down_LH_P2_1³ => case _lh_down_arg4¹ of {
//│ 				LH_P2 _lh_down_LH_P2_0⁴ _lh_down_LH_P2_1⁴ => case _lh_down_arg5¹ of {
//│ 					LH_P2 _lh_down_LH_P2_0⁵ _lh_down_LH_P2_1⁵ => 
//│ 						let _lh_downsweep_LH_P2_1⁴ = [LH_P2 _lh_down_arg1¹(_lh_down_LH_P2_0⁵, _lh_down_LH_P2_0³) _lh_down_LH_P2_1⁵]
//│ 						in let _lh_downsweep_LH_P2_0⁴ = [LH_P2 _lh_down_LH_P2_0⁵ _lh_down_arg2¹(_lh_down_LH_P2_1⁴, _lh_down_LH_P2_1⁵)]
//│ 						in (fun _lh_downsweep_Node_1⁵ -> (fun _lh_downsweep_Node_2⁵ -> (fun _lh_downsweep_arg1⁷ -> 
//│ 							let _lh_matchIdent²¹ = 	
//│ 								let _lh_downsweep_LH_P2_1⁵ = downsweep_lh_₁(_lh_downsweep_arg1⁷, _lh_downsweep_LH_P2_1⁴, _lh_downsweep_Node_2⁵)
//│ 								in let _lh_downsweep_LH_P2_0⁵ = downsweep_lh_₁(_lh_downsweep_arg1⁷, _lh_downsweep_LH_P2_0⁴, _lh_downsweep_Node_1⁵)
//│ 								in (fun _lh_dummy¹¹ -> [Node [Unit] _lh_downsweep_LH_P2_0⁵ _lh_downsweep_LH_P2_1⁵])
//│ 							in _lh_matchIdent²¹([lh_Unit]))))}}}))))) 
//│ 	in let xs'¹ = map_lh_₂₁((fun x¹ -> [LH_P2 x¹ x¹]), _lh_scanlr_arg5¹)
//│ 	in let _lh_matchIdent²² = sweep_ud_lh_₁(up¹(_lh_scanlr_arg1¹, _lh_scanlr_arg2¹), down¹(_lh_scanlr_arg1¹, _lh_scanlr_arg2¹), [LH_P2 _lh_scanlr_arg3¹ _lh_scanlr_arg4¹], put_lh_₁(xs'¹))
//│ 	in case _lh_matchIdent²² of {
//│ 		LH_P2 _lh_scanlr_LH_P2_0² _lh_scanlr_LH_P2_1² => case _lh_scanlr_LH_P2_0² of {
//│ 			LH_P2 _lh_scanlr_LH_P2_0³ _lh_scanlr_LH_P2_1³ => 
//│ 				let ans¹ = [LH_P2 _lh_scanlr_arg2¹(_lh_scanlr_LH_P2_1³, _lh_scanlr_arg4¹) _lh_scanlr_arg1¹(_lh_scanlr_arg3¹, _lh_scanlr_LH_P2_0³)]
//│ 				in let _lh_snd_LH_P2_1¹ = get_lh_₁(_lh_scanlr_LH_P2_1²)
//│ 				in let _lh_snd_LH_P2_0¹ = ans¹
//│ 				in _lh_snd_LH_P2_1¹}}
//│ def scanlr_lh_₂(_lh_scanlr_arg1⁰, _lh_scanlr_arg2⁰, _lh_scanlr_arg3⁰, _lh_scanlr_arg4⁰, _lh_scanlr_arg5⁰) = 
//│ 	let down⁰ = (fun _lh_down_arg1⁰ -> (fun _lh_down_arg2⁰ -> (fun _lh_down_arg3⁰ -> (fun _lh_down_arg4⁰ -> (fun _lh_down_arg5⁰ -> case _lh_down_arg3⁰ of {
//│ 			LH_P2 _lh_down_LH_P2_0⁰ _lh_down_LH_P2_1⁰ => case _lh_down_arg4⁰ of {
//│ 				LH_P2 _lh_down_LH_P2_0¹ _lh_down_LH_P2_1¹ => case _lh_down_arg5⁰ of {
//│ 					LH_P2 _lh_down_LH_P2_0² _lh_down_LH_P2_1² => 
//│ 						let _lh_downsweep_LH_P2_1⁰ = [LH_P2 _lh_down_arg1⁰(_lh_down_LH_P2_0², _lh_down_LH_P2_0⁰) _lh_down_LH_P2_1²]
//│ 						in let _lh_downsweep_LH_P2_0⁰ = [LH_P2 _lh_down_LH_P2_0² _lh_down_arg2⁰(_lh_down_LH_P2_1¹, _lh_down_LH_P2_1²)]
//│ 						in (fun _lh_downsweep_Node_1⁰ -> (fun _lh_downsweep_Node_2⁰ -> (fun _lh_downsweep_arg1¹ -> 
//│ 							let _lh_matchIdent⁶ = 	
//│ 								let _lh_downsweep_LH_P2_1¹ = downsweep_lh_₁(_lh_downsweep_arg1¹, _lh_downsweep_LH_P2_1⁰, _lh_downsweep_Node_2⁰)
//│ 								in let _lh_downsweep_LH_P2_0¹ = downsweep_lh_₁(_lh_downsweep_arg1¹, _lh_downsweep_LH_P2_0⁰, _lh_downsweep_Node_1⁰)
//│ 								in (fun _lh_dummy⁴ -> [Node [Unit] _lh_downsweep_LH_P2_0¹ _lh_downsweep_LH_P2_1¹])
//│ 							in _lh_matchIdent⁶([lh_Unit]))))}}})))))
//│ 	and up⁰ = (fun _lh_up_arg1⁰ -> (fun _lh_up_arg2⁰ -> (fun _lh_up_arg3⁰ -> (fun _lh_up_arg4⁰ -> case _lh_up_arg3⁰ of {
//│ 			LH_P2 _lh_up_LH_P2_0⁰ _lh_up_LH_P2_1⁰ => case _lh_up_arg4⁰ of {
//│ 				LH_P2 _lh_up_LH_P2_0¹ _lh_up_LH_P2_1¹ => [LH_P2 _lh_up_arg1⁰(_lh_up_LH_P2_0⁰, _lh_up_LH_P2_0¹) _lh_up_arg2⁰(_lh_up_LH_P2_1⁰, _lh_up_LH_P2_1¹)]}})))) 
//│ 	in let xs'⁰ = map_lh_₂₁((fun x⁰ -> [LH_P2 x⁰ x⁰]), _lh_scanlr_arg5⁰)
//│ 	in let _lh_matchIdent⁷ = sweep_ud_lh_₁(up⁰(_lh_scanlr_arg1⁰, _lh_scanlr_arg2⁰), down⁰(_lh_scanlr_arg1⁰, _lh_scanlr_arg2⁰), [LH_P2 _lh_scanlr_arg3⁰ _lh_scanlr_arg4⁰], put_lh_₁(xs'⁰))
//│ 	in case _lh_matchIdent⁷ of {
//│ 		LH_P2 _lh_scanlr_LH_P2_0⁰ _lh_scanlr_LH_P2_1⁰ => case _lh_scanlr_LH_P2_0⁰ of {
//│ 			LH_P2 _lh_scanlr_LH_P2_0¹ _lh_scanlr_LH_P2_1¹ => 
//│ 				let ans⁰ = [LH_P2 _lh_scanlr_arg2⁰(_lh_scanlr_LH_P2_1¹, _lh_scanlr_arg4⁰) _lh_scanlr_arg1⁰(_lh_scanlr_arg3⁰, _lh_scanlr_LH_P2_0¹)]
//│ 				in let _lh_snd_LH_P2_1⁰ = get_lh_₁(_lh_scanlr_LH_P2_1⁰)
//│ 				in let _lh_snd_LH_P2_0⁰ = ans⁰
//│ 				in _lh_snd_LH_P2_1⁰}}
//│ def send_left_lh_₁(_lh_send_left_arg1¹, _lh_send_left_arg2¹) = case _lh_send_left_arg1¹ of {
//│ 	LH_P8 _lh_send_left_LH_P8_0² _lh_send_left_LH_P8_1² _lh_send_left_LH_P8_2² _lh_send_left_LH_P8_3² _lh_send_left_LH_P8_4² _lh_send_left_LH_P8_5² _lh_send_left_LH_P8_6² _lh_send_left_LH_P8_7² => case _lh_send_left_arg2¹ of {
//│ 		LH_P8 _lh_send_left_LH_P8_0³ _lh_send_left_LH_P8_1³ _lh_send_left_LH_P8_2³ _lh_send_left_LH_P8_3³ _lh_send_left_LH_P8_4³ _lh_send_left_LH_P8_5³ _lh_send_left_LH_P8_6³ _lh_send_left_LH_P8_7³ => if (_lh_send_left_LH_P8_3³ && (_lh_send_left_LH_P8_4³ > _lh_send_left_LH_P8_7²)) then [LH_P8 _lh_send_left_LH_P8_0³ _lh_send_left_LH_P8_1³ _lh_send_left_LH_P8_2³ _lh_send_left_LH_P8_3³ (_lh_send_left_LH_P8_4³ - _lh_send_left_LH_P8_7²) _lh_send_left_LH_P8_5³ _lh_send_left_LH_P8_6³ (_lh_send_left_LH_P8_7² + _lh_send_left_LH_P8_7³)] else [LH_P8 _lh_send_left_LH_P8_0² _lh_send_left_LH_P8_1² _lh_send_left_LH_P8_2² _lh_send_left_LH_P8_3² _lh_send_left_LH_P8_4² _lh_send_left_LH_P8_5² _lh_send_left_LH_P8_6² (_lh_send_left_LH_P8_7² + _lh_send_left_LH_P8_7³)]}}
//│ def send_left_lh_₂(_lh_send_left_arg1⁰, _lh_send_left_arg2⁰) = case _lh_send_left_arg1⁰ of {
//│ 	LH_P8 _lh_send_left_LH_P8_0⁰ _lh_send_left_LH_P8_1⁰ _lh_send_left_LH_P8_2⁰ _lh_send_left_LH_P8_3⁰ _lh_send_left_LH_P8_4⁰ _lh_send_left_LH_P8_5⁰ _lh_send_left_LH_P8_6⁰ _lh_send_left_LH_P8_7⁰ => case _lh_send_left_arg2⁰ of {
//│ 		LH_P8 _lh_send_left_LH_P8_0¹ _lh_send_left_LH_P8_1¹ _lh_send_left_LH_P8_2¹ _lh_send_left_LH_P8_3¹ _lh_send_left_LH_P8_4¹ _lh_send_left_LH_P8_5¹ _lh_send_left_LH_P8_6¹ _lh_send_left_LH_P8_7¹ => if (_lh_send_left_LH_P8_3¹ && (_lh_send_left_LH_P8_4¹ > _lh_send_left_LH_P8_7⁰)) then [LH_P8 _lh_send_left_LH_P8_0¹ _lh_send_left_LH_P8_1¹ _lh_send_left_LH_P8_2¹ _lh_send_left_LH_P8_3¹ (_lh_send_left_LH_P8_4¹ - _lh_send_left_LH_P8_7⁰) _lh_send_left_LH_P8_5¹ _lh_send_left_LH_P8_6¹ (_lh_send_left_LH_P8_7⁰ + _lh_send_left_LH_P8_7¹)] else [LH_P8 _lh_send_left_LH_P8_0⁰ _lh_send_left_LH_P8_1⁰ _lh_send_left_LH_P8_2⁰ _lh_send_left_LH_P8_3⁰ _lh_send_left_LH_P8_4⁰ _lh_send_left_LH_P8_5⁰ _lh_send_left_LH_P8_6⁰ (_lh_send_left_LH_P8_7⁰ + _lh_send_left_LH_P8_7¹)]}}
//│ def send_lh_₁(_lh_send_arg1⁰) = scanlr_lh_₁(send_right_lh_₁, send_left_lh_₁, emptyPacket_lh_₂, emptyPacket_lh_₃, _lh_send_arg1⁰)
//│ def send_lh_₂(_lh_send_arg1¹) = scanlr_lh_₂(send_right_lh_₂, send_left_lh_₂, emptyPacket_lh_₅, emptyPacket_lh_₄, _lh_send_arg1¹)
//│ def send_right_lh_₁(_lh_send_right_arg1¹, _lh_send_right_arg2¹) = case _lh_send_right_arg1¹ of {
//│ 	LH_P8 _lh_send_right_LH_P8_0² _lh_send_right_LH_P8_1² _lh_send_right_LH_P8_2² _lh_send_right_LH_P8_3² _lh_send_right_LH_P8_4² _lh_send_right_LH_P8_5² _lh_send_right_LH_P8_6² _lh_send_right_LH_P8_7² => case _lh_send_right_arg2¹ of {
//│ 		LH_P8 _lh_send_right_LH_P8_0³ _lh_send_right_LH_P8_1³ _lh_send_right_LH_P8_2³ _lh_send_right_LH_P8_3³ _lh_send_right_LH_P8_4³ _lh_send_right_LH_P8_5³ _lh_send_right_LH_P8_6³ _lh_send_right_LH_P8_7³ => if (_lh_send_right_LH_P8_5² && (_lh_send_right_LH_P8_6² > _lh_send_right_LH_P8_7³)) then [LH_P8 _lh_send_right_LH_P8_0² _lh_send_right_LH_P8_1² _lh_send_right_LH_P8_2² _lh_send_right_LH_P8_3² _lh_send_right_LH_P8_4² _lh_send_right_LH_P8_5² (_lh_send_right_LH_P8_6² - _lh_send_right_LH_P8_7³) (_lh_send_right_LH_P8_7² + _lh_send_right_LH_P8_7³)] else [LH_P8 _lh_send_right_LH_P8_0³ _lh_send_right_LH_P8_1³ _lh_send_right_LH_P8_2³ _lh_send_right_LH_P8_3³ _lh_send_right_LH_P8_4³ _lh_send_right_LH_P8_5³ _lh_send_right_LH_P8_6³ (_lh_send_right_LH_P8_7² + _lh_send_right_LH_P8_7³)]}}
//│ def send_right_lh_₂(_lh_send_right_arg1⁰, _lh_send_right_arg2⁰) = case _lh_send_right_arg1⁰ of {
//│ 	LH_P8 _lh_send_right_LH_P8_0⁰ _lh_send_right_LH_P8_1⁰ _lh_send_right_LH_P8_2⁰ _lh_send_right_LH_P8_3⁰ _lh_send_right_LH_P8_4⁰ _lh_send_right_LH_P8_5⁰ _lh_send_right_LH_P8_6⁰ _lh_send_right_LH_P8_7⁰ => case _lh_send_right_arg2⁰ of {
//│ 		LH_P8 _lh_send_right_LH_P8_0¹ _lh_send_right_LH_P8_1¹ _lh_send_right_LH_P8_2¹ _lh_send_right_LH_P8_3¹ _lh_send_right_LH_P8_4¹ _lh_send_right_LH_P8_5¹ _lh_send_right_LH_P8_6¹ _lh_send_right_LH_P8_7¹ => if (_lh_send_right_LH_P8_5⁰ && (_lh_send_right_LH_P8_6⁰ > _lh_send_right_LH_P8_7¹)) then [LH_P8 _lh_send_right_LH_P8_0⁰ _lh_send_right_LH_P8_1⁰ _lh_send_right_LH_P8_2⁰ _lh_send_right_LH_P8_3⁰ _lh_send_right_LH_P8_4⁰ _lh_send_right_LH_P8_5⁰ (_lh_send_right_LH_P8_6⁰ - _lh_send_right_LH_P8_7¹) (_lh_send_right_LH_P8_7⁰ + _lh_send_right_LH_P8_7¹)] else [LH_P8 _lh_send_right_LH_P8_0¹ _lh_send_right_LH_P8_1¹ _lh_send_right_LH_P8_2¹ _lh_send_right_LH_P8_3¹ _lh_send_right_LH_P8_4¹ _lh_send_right_LH_P8_5¹ _lh_send_right_LH_P8_6¹ (_lh_send_right_LH_P8_7⁰ + _lh_send_right_LH_P8_7¹)]}}
//│ def simulate_component_lh_₁(_lh_simulate_component_arg1⁰, _lh_simulate_component_arg2⁰) = 
//│ 	let out_signals⁰ = 	
//│ 		let _lh_listcomp_fun⁶ = (fun _lh_listcomp_fun_para³ -> case _lh_listcomp_fun_para³ of {
//│ 			LH_C _lh_listcomp_fun_ls_h⁴ _lh_listcomp_fun_ls_t⁴ => case _lh_listcomp_fun_ls_h⁴ of {
//│ 				LH_P3 _lh_simulate_component_LH_P3_0⁰ _lh_simulate_component_LH_P3_1⁰ _lh_simulate_component_LH_P3_2⁰ => [LH_C _lh_simulate_component_LH_P3_2⁰ _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁴)]
//│ 				| _  => _lh_listcomp_fun⁶(_lh_listcomp_fun_ls_t⁴)}
//│ 			| LH_N  => [LH_N]})
//│ 		in _lh_listcomp_fun⁶(inports_lh_₄(_lh_simulate_component_arg2⁰))
//│ 	in let new_value⁰ = apply_component_lh_₁(compType_lh_₄(_lh_simulate_component_arg2⁰), out_signals⁰)
//│ 	in if ((_lh_simulate_component_arg1⁰ == pathDepth_lh_₄(_lh_simulate_component_arg2⁰)) && not⁰(polyEq⁰(new_value⁰, [Nothing]))) then 
//│ 		let _lh_matchIdent¹⁰ = new_value⁰
//│ 		in case _lh_matchIdent¹⁰ of {
//│ 			Just _lh_simulate_component_Just_0⁰ => update_outports_lh_₃(_lh_simulate_component_arg2⁰, _lh_simulate_component_Just_0⁰)} else _lh_simulate_component_arg2⁰
//│ def simulate_components_lh_₁(_lh_simulate_components_arg1⁰, _lh_simulate_components_arg2⁰) = map_lh_₇(simulate_component_lh_₁(_lh_simulate_components_arg1⁰), _lh_simulate_components_arg2⁰)
//│ def simulate_lh_₁(_lh_simulate_arg1⁰, _lh_simulate_arg2⁰) = _lh_simulate_arg2⁰(_lh_simulate_arg1⁰)
//│ def snd_lh_₁(_lh_snd_arg1¹) = _lh_snd_arg1¹
//│ def snd_lh_₂(_lh_snd_arg1⁰) = _lh_snd_arg1⁰
//│ def splitAt_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) = [LH_P2 take_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰) drop_lh_₁(_lh_splitAt_arg1⁰, _lh_splitAt_arg2⁰)]
//│ def store_inputs_lh_₁(_lh_store_inputs_arg1⁰, _lh_store_inputs_arg2⁰) = case _lh_store_inputs_arg2⁰ of {
//│ 	PS _lh_store_inputs_PS_0⁴ _lh_store_inputs_PS_1⁰ _lh_store_inputs_PS_2⁴ _lh_store_inputs_PS_3⁴ _lh_store_inputs_PS_4⁴ => case _lh_store_inputs_PS_1⁰ of {
//│ 		Inp  => head_lh_₃(
//│ 			let _lh_listcomp_fun¹⁹ = (fun _lh_listcomp_fun_para⁹ -> _lh_listcomp_fun_para⁹(_lh_listcomp_fun¹⁹, _lh_store_inputs_PS_0⁴, _lh_store_inputs_PS_2⁴, _lh_store_inputs_PS_3⁴, _lh_store_inputs_PS_4⁴))
//│ 			in _lh_listcomp_fun¹⁹(_lh_store_inputs_arg1⁰))
//│ 		| _  => _lh_store_inputs_arg2⁰}
//│ 	| _  => _lh_store_inputs_arg2⁰}
//│ def sweep_ud_lh_₁(_lh_sweep_ud_arg1⁰, _lh_sweep_ud_arg2⁰, _lh_sweep_ud_arg3⁰, _lh_sweep_ud_arg4⁰) = 
//│ 	let _lh_matchIdent² = upsweep_lh_₁(_lh_sweep_ud_arg1⁰, _lh_sweep_ud_arg4⁰)
//│ 	in case _lh_matchIdent² of {
//│ 		LH_P2 _lh_sweep_ud_LH_P2_0⁰ _lh_sweep_ud_LH_P2_1⁰ => [LH_P2 _lh_sweep_ud_LH_P2_0⁰ downsweep_lh_₁(_lh_sweep_ud_arg2⁰, _lh_sweep_ud_arg3⁰, _lh_sweep_ud_LH_P2_1⁰)]}
//│ def tail_lh_₁(ls¹⁵) = case ls¹⁵ of {
//│ 	LH_C h¹⁹ t¹⁹ => t¹⁹
//│ 	| LH_N  => error⁰}
//│ def take_lh_₁(n⁵, ls¹³) = if (n⁵ > 0) then case ls¹³ of {
//│ 	LH_C h¹⁷ t¹⁷ => [LH_C h¹⁷ take_lh_₁((n⁵ - 1), t¹⁷)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lz_lh_₁(n⁷, ls²³) = if (n⁷ > 0) then force⁰(ls²³, n⁷) else [LH_N]
//│ def take_lz_lh_₂(n⁸, ls³⁰) = if (n⁸ > 0) then force⁰(ls³⁰, n⁸) else [LH_N]
//│ def testCircsim_nofib_lh_₁(_lh_testCircsim_nofib_arg1⁰) = run_lh_₁(8, _lh_testCircsim_nofib_arg1⁰)
//│ def transpose_lh_₁(_lh_transpose_arg1²) = case _lh_transpose_arg1² of {
//│ 	LH_N  => (fun f³⁹ -> [LH_N])
//│ 	| LH_C _lh_transpose_LH_C_0⁶ _lh_transpose_LH_C_1⁶ => case _lh_transpose_LH_C_0⁶ of {
//│ 		LH_N  => transpose_lh_₁(_lh_transpose_LH_C_1⁶)
//│ 		| LH_C _lh_transpose_LH_C_0⁷ _lh_transpose_LH_C_1⁷ => 
//│ 			let _lh_matchIdent²⁰ = unzip_lh_₁(
//│ 				let _lh_listcomp_fun¹⁷ = (fun _lh_listcomp_fun_para⁷ -> case _lh_listcomp_fun_para⁷ of {
//│ 					LH_C _lh_listcomp_fun_ls_h¹¹ _lh_listcomp_fun_ls_t¹² => case _lh_listcomp_fun_ls_h¹¹ of {
//│ 						LH_C _lh_transpose_LH_C_0⁸ _lh_transpose_LH_C_1⁸ => [LH_C [LH_P2 _lh_transpose_LH_C_0⁸ _lh_transpose_LH_C_1⁸] _lh_listcomp_fun¹⁷(_lh_listcomp_fun_ls_t¹²)]
//│ 						| _  => _lh_listcomp_fun¹⁷(_lh_listcomp_fun_ls_t¹²)}
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun¹⁷(_lh_transpose_LH_C_1⁶))
//│ 			in case _lh_matchIdent²⁰ of {
//│ 				LH_P2 _lh_transpose_LH_P2_0² _lh_transpose_LH_P2_1² => combine_lh_₁(_lh_transpose_LH_C_0⁷, _lh_transpose_LH_P2_0², _lh_transpose_LH_C_1⁷, _lh_transpose_LH_P2_1²)}}}
//│ def transpose_lh_₂(_lh_transpose_arg1³) = case _lh_transpose_arg1³ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_transpose_LH_C_0⁹ _lh_transpose_LH_C_1⁹ => case _lh_transpose_LH_C_0⁹ of {
//│ 		LH_N  => transpose_lh_₂(_lh_transpose_LH_C_1⁹)
//│ 		| LH_C _lh_transpose_LH_C_0¹⁰ _lh_transpose_LH_C_1¹⁰ => 
//│ 			let _lh_matchIdent²⁴ = unzip_lh_₂(
//│ 				let _lh_listcomp_fun²² = (fun _lh_listcomp_fun_para¹² -> case _lh_listcomp_fun_para¹² of {
//│ 					LH_C _lh_listcomp_fun_ls_h¹⁵ _lh_listcomp_fun_ls_t¹⁶ => case _lh_listcomp_fun_ls_h¹⁵ of {
//│ 						LH_C _lh_transpose_LH_C_0¹¹ _lh_transpose_LH_C_1¹¹ => [LH_C [LH_P2 _lh_transpose_LH_C_0¹¹ _lh_transpose_LH_C_1¹¹] _lh_listcomp_fun²²(_lh_listcomp_fun_ls_t¹⁶)]
//│ 						| _  => _lh_listcomp_fun²²(_lh_listcomp_fun_ls_t¹⁶)}
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun²²(_lh_transpose_LH_C_1⁹))
//│ 			in case _lh_matchIdent²⁴ of {
//│ 				LH_P2 _lh_transpose_LH_P2_0³ _lh_transpose_LH_P2_1³ => combine_lh_₂(_lh_transpose_LH_C_0¹⁰, _lh_transpose_LH_P2_0³, _lh_transpose_LH_C_1¹⁰, _lh_transpose_LH_P2_1³)}}}
//│ def transpose_lh_₃(_lh_transpose_arg1⁰) = case _lh_transpose_arg1⁰ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_transpose_LH_C_0⁰ _lh_transpose_LH_C_1⁰ => case _lh_transpose_LH_C_0⁰ of {
//│ 		LH_N  => transpose_lh_₃(_lh_transpose_LH_C_1⁰)
//│ 		| LH_C _lh_transpose_LH_C_0¹ _lh_transpose_LH_C_1¹ => 
//│ 			let _lh_matchIdent⁰ = unzip_lh_₂(
//│ 				let _lh_listcomp_fun⁰ = (fun _lh_listcomp_fun_para⁰ -> case _lh_listcomp_fun_para⁰ of {
//│ 					LH_C _lh_listcomp_fun_ls_h⁰ _lh_listcomp_fun_ls_t⁰ => case _lh_listcomp_fun_ls_h⁰ of {
//│ 						LH_C _lh_transpose_LH_C_0² _lh_transpose_LH_C_1² => [LH_C [LH_P2 _lh_transpose_LH_C_0² _lh_transpose_LH_C_1²] _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)]
//│ 						| _  => _lh_listcomp_fun⁰(_lh_listcomp_fun_ls_t⁰)}
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun⁰(_lh_transpose_LH_C_1⁰))
//│ 			in case _lh_matchIdent⁰ of {
//│ 				LH_P2 _lh_transpose_LH_P2_0⁰ _lh_transpose_LH_P2_1⁰ => combine_lh_₂(_lh_transpose_LH_C_0¹, _lh_transpose_LH_P2_0⁰, _lh_transpose_LH_C_1¹, _lh_transpose_LH_P2_1⁰)}}}
//│ def transpose_lh_₄(_lh_transpose_arg1¹) = case _lh_transpose_arg1¹ of {
//│ 	LH_N  => [LH_N]
//│ 	| LH_C _lh_transpose_LH_C_0³ _lh_transpose_LH_C_1³ => case _lh_transpose_LH_C_0³ of {
//│ 		LH_N  => transpose_lh_₄(_lh_transpose_LH_C_1³)
//│ 		| LH_C _lh_transpose_LH_C_0⁴ _lh_transpose_LH_C_1⁴ => 
//│ 			let _lh_matchIdent⁵ = unzip_lh_₂(
//│ 				let _lh_listcomp_fun² = (fun _lh_listcomp_fun_para¹ -> case _lh_listcomp_fun_para¹ of {
//│ 					LH_C _lh_listcomp_fun_ls_h¹ _lh_listcomp_fun_ls_t¹ => case _lh_listcomp_fun_ls_h¹ of {
//│ 						LH_C _lh_transpose_LH_C_0⁵ _lh_transpose_LH_C_1⁵ => [LH_C [LH_P2 _lh_transpose_LH_C_0⁵ _lh_transpose_LH_C_1⁵] _lh_listcomp_fun²(_lh_listcomp_fun_ls_t¹)]
//│ 						| _  => _lh_listcomp_fun²(_lh_listcomp_fun_ls_t¹)}
//│ 					| LH_N  => [LH_N]})
//│ 				in _lh_listcomp_fun²(_lh_transpose_LH_C_1³))
//│ 			in case _lh_matchIdent⁵ of {
//│ 				LH_P2 _lh_transpose_LH_P2_0¹ _lh_transpose_LH_P2_1¹ => combine_lh_₂(_lh_transpose_LH_C_0⁴, _lh_transpose_LH_P2_0¹, _lh_transpose_LH_C_1⁴, _lh_transpose_LH_P2_1¹)}}}
//│ def until_lh_₁(_lh_until_arg1², _lh_until_arg2², _lh_until_arg3²) = if _lh_until_arg1²(_lh_until_arg3²) then _lh_until_arg3² else until_lh_₁(_lh_until_arg1², _lh_until_arg2², _lh_until_arg2²(_lh_until_arg3²))
//│ def until_lh_₂(_lh_until_arg1¹, _lh_until_arg2¹, _lh_until_arg3¹) = if _lh_until_arg1¹(_lh_until_arg3¹) then _lh_until_arg3¹ else until_lh_₂(_lh_until_arg1¹, _lh_until_arg2¹, _lh_until_arg2¹(_lh_until_arg3¹))
//│ def until_lh_₃(_lh_until_arg1⁰, _lh_until_arg2⁰, _lh_until_arg3⁰) = if _lh_until_arg1⁰(_lh_until_arg3⁰) then _lh_until_arg3⁰ else until_lh_₃(_lh_until_arg1⁰, _lh_until_arg2⁰, _lh_until_arg2⁰(_lh_until_arg3⁰))
//│ def unzip_lh_₁(_lh_unzip_arg1¹) = foldr_lh_₁((fun ab¹ -> (fun asbs¹ -> 
//│ 	let _lh_matchIdent⁸ = ab¹
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_P2 _lh_unzip_LH_P2_0² _lh_unzip_LH_P2_1² => 
//│ 			let _lh_matchIdent⁹ = asbs¹
//│ 			in case _lh_matchIdent⁹ of {
//│ 				LH_P2 _lh_unzip_LH_P2_0³ _lh_unzip_LH_P2_1³ => [LH_P2 [LH_C _lh_unzip_LH_P2_0² _lh_unzip_LH_P2_0³] [LH_C _lh_unzip_LH_P2_1² _lh_unzip_LH_P2_1³]]}})), [LH_P2 [LH_N] [LH_N]], _lh_unzip_arg1¹)
//│ def unzip_lh_₂(_lh_unzip_arg1⁰) = foldr_lh_₁((fun ab⁰ -> (fun asbs⁰ -> 
//│ 	let _lh_matchIdent³ = ab⁰
//│ 	in case _lh_matchIdent³ of {
//│ 		LH_P2 _lh_unzip_LH_P2_0⁰ _lh_unzip_LH_P2_1⁰ => 
//│ 			let _lh_matchIdent⁴ = asbs⁰
//│ 			in case _lh_matchIdent⁴ of {
//│ 				LH_P2 _lh_unzip_LH_P2_0¹ _lh_unzip_LH_P2_1¹ => [LH_P2 [LH_C _lh_unzip_LH_P2_0⁰ _lh_unzip_LH_P2_0¹] [LH_C _lh_unzip_LH_P2_1⁰ _lh_unzip_LH_P2_1¹]]}})), [LH_P2 [LH_N] [LH_N]], _lh_unzip_arg1⁰)
//│ def up_i_lh_₁(_lh_up_i_arg1⁰, _lh_up_i_arg2⁰) = case _lh_up_i_arg1⁰ of {
//│ 	LH_P8 _lh_up_i_LH_P8_0⁰ _lh_up_i_LH_P8_1⁰ _lh_up_i_LH_P8_2⁰ _lh_up_i_LH_P8_3⁰ _lh_up_i_LH_P8_4⁰ _lh_up_i_LH_P8_5⁰ _lh_up_i_LH_P8_6⁰ _lh_up_i_LH_P8_7⁰ => map_lh_₂₁(compare_and_update_lh_₁(
//│ 		let _lh_compare_and_update_LH_P3_2⁰ = _lh_up_i_LH_P8_2⁰
//│ 		in let _lh_compare_and_update_LH_P3_1⁰ = _lh_up_i_LH_P8_1⁰
//│ 		in let _lh_compare_and_update_LH_P3_0⁰ = _lh_up_i_LH_P8_0⁰
//│ 		in (fun _lh_compare_and_update_arg2⁰ -> case _lh_compare_and_update_arg2⁰ of {
//│ 			LH_P3 _lh_compare_and_update_LH_P3_0¹ _lh_compare_and_update_LH_P3_1¹ _lh_compare_and_update_LH_P3_2¹ => if polyEq⁰([LH_P2 _lh_compare_and_update_LH_P3_0⁰ _lh_compare_and_update_LH_P3_1⁰], [LH_P2 _lh_compare_and_update_LH_P3_0¹ _lh_compare_and_update_LH_P3_1¹]) then [LH_P3 _lh_compare_and_update_LH_P3_0¹ _lh_compare_and_update_LH_P3_1¹ _lh_compare_and_update_LH_P3_2⁰] else [LH_P3 _lh_compare_and_update_LH_P3_0¹ _lh_compare_and_update_LH_P3_1¹ _lh_compare_and_update_LH_P3_2¹]})), _lh_up_i_arg2⁰)}
//│ def updateInports_lh_₁(_lh_updateInports_arg1⁰, _lh_updateInports_arg2⁰) = [PS pid_lh_₅(_lh_updateInports_arg1⁰) compType_lh_₅(_lh_updateInports_arg1⁰) pathDepth_lh_₉(_lh_updateInports_arg1⁰) _lh_updateInports_arg2⁰ outports_lh_₈(_lh_updateInports_arg1⁰)]
//│ def updateOutports_lh_₁(_lh_updateOutports_arg1⁰, _lh_updateOutports_arg2⁰) = [PS pid_lh_₂(_lh_updateOutports_arg1⁰) compType_lh_₂(_lh_updateOutports_arg1⁰) pathDepth_lh_₂(_lh_updateOutports_arg1⁰) inports_lh_₂(_lh_updateOutports_arg1⁰) _lh_updateOutports_arg2⁰]
//│ def updateOutports_lh_₂(_lh_updateOutports_arg1³, _lh_updateOutports_arg2³) = [PS pid_lh_₃(_lh_updateOutports_arg1³) compType_lh_₃(_lh_updateOutports_arg1³) pathDepth_lh_₃(_lh_updateOutports_arg1³) inports_lh_₃(_lh_updateOutports_arg1³) _lh_updateOutports_arg2³]
//│ def updateOutports_lh_₃(_lh_updateOutports_arg1¹, _lh_updateOutports_arg2¹) = [PS pid_lh_₄(_lh_updateOutports_arg1¹) compType_lh_₅(_lh_updateOutports_arg1¹) pathDepth_lh_₅(_lh_updateOutports_arg1¹) inports_lh_₅(_lh_updateOutports_arg1¹) _lh_updateOutports_arg2¹]
//│ def updateOutports_lh_₄(_lh_updateOutports_arg1², _lh_updateOutports_arg2²) = [PS pid_lh_₅(_lh_updateOutports_arg1²) compType_lh_₅(_lh_updateOutports_arg1²) pathDepth_lh_₉(_lh_updateOutports_arg1²) inports_lh_₆(_lh_updateOutports_arg1²) _lh_updateOutports_arg2²]
//│ def update_i_lh_₁(_lh_update_i_arg1⁰, _lh_update_i_arg2⁰) = case _lh_update_i_arg1⁰ of {
//│ 	LH_P2 _lh_update_i_LH_P2_0⁰ _lh_update_i_LH_P2_1⁰ => up_i_lh_₁(_lh_update_i_LH_P2_0⁰, up_i_lh_₁(_lh_update_i_LH_P2_1⁰, _lh_update_i_arg2⁰))}
//│ def update_io_lh_₁(_lh_update_io_arg1¹, _lh_update_io_arg2¹, _lh_update_io_arg3¹) = 
//│ 	let update_is¹ = (fun state² -> updateInports_lh_₁(state², foldr_lh_₁(update_i_lh_₁, inports_lh_₆(state²), _lh_update_io_arg2¹)))
//│ 	in let update_os¹ = (fun state³ -> if (pathDepth_lh_₇(state³) == _lh_update_io_arg1¹) then updateOutports_lh_₄(state³, zipWith_lh_₅(update_o_lh_₁, _lh_update_io_arg2¹, outports_lh_₈(state³))) else state³)
//│ 	in update_os¹(update_is¹(_lh_update_io_arg3¹))
//│ def update_io_lh_₂(_lh_update_io_arg1⁰, _lh_update_io_arg2⁰, _lh_update_io_arg3⁰) = 
//│ 	let update_is⁰ = (fun state⁰ -> updateInports_lh_₁(state⁰, foldr_lh_₁(update_i_lh_₁, inports_lh_₆(state⁰), _lh_update_io_arg2⁰)))
//│ 	in let update_os⁰ = (fun state¹ -> if (pathDepth_lh_₉(state¹) == _lh_update_io_arg1⁰) then updateOutports_lh_₄(state¹, zipWith_lh_₅(update_o_lh_₁, _lh_update_io_arg2⁰, outports_lh_₈(state¹))) else state¹)
//│ 	in update_os⁰(update_is⁰(_lh_update_io_arg3⁰))
//│ def update_o_lh_₁(_lh_update_o_arg1⁰, _lh_update_o_arg2⁰) = case _lh_update_o_arg1⁰ of {
//│ 	LH_P2 _lh_update_o_LH_P2_0⁰ _lh_update_o_LH_P2_1⁰ => check_left_lh_₁(_lh_update_o_LH_P2_0⁰, check_right_lh_₁(_lh_update_o_LH_P2_1⁰, _lh_update_o_arg2⁰))}
//│ def update_outports_lh_₁(_lh_update_outports_arg1⁰, _lh_update_outports_arg2⁰) = updateOutports_lh_₁(_lh_update_outports_arg1⁰, 
//│ 	let _lh_listcomp_fun⁷ = (fun _lh_listcomp_fun_para⁴ -> case _lh_listcomp_fun_para⁴ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁵ _lh_listcomp_fun_ls_t⁵ => case _lh_listcomp_fun_ls_h⁵ of {
//│ 			LH_P6 _lh_update_outports_LH_P6_0⁰ _lh_update_outports_LH_P6_1⁰ _lh_update_outports_LH_P6_2⁰ _lh_update_outports_LH_P6_3⁰ _lh_update_outports_LH_P6_4⁰ _lh_update_outports_LH_P6_5⁰ => [LH_C [LH_P6 _lh_update_outports_LH_P6_0⁰ _lh_update_outports_arg2⁰ _lh_update_outports_LH_P6_2⁰ _lh_update_outports_LH_P6_3⁰ _lh_update_outports_LH_P6_4⁰ _lh_update_outports_LH_P6_5⁰] _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁵)]
//│ 			| _  => _lh_listcomp_fun⁷(_lh_listcomp_fun_ls_t⁵)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁷(outports_lh_₁(_lh_update_outports_arg1⁰)))
//│ def update_outports_lh_₂(_lh_update_outports_arg1¹, _lh_update_outports_arg2¹) = updateOutports_lh_₃(_lh_update_outports_arg1¹, 
//│ 	let _lh_listcomp_fun⁸ = (fun _lh_listcomp_fun_para⁵ -> case _lh_listcomp_fun_para⁵ of {
//│ 		LH_C _lh_listcomp_fun_ls_h⁶ _lh_listcomp_fun_ls_t⁶ => case _lh_listcomp_fun_ls_h⁶ of {
//│ 			LH_P6 _lh_update_outports_LH_P6_0¹ _lh_update_outports_LH_P6_1¹ _lh_update_outports_LH_P6_2¹ _lh_update_outports_LH_P6_3¹ _lh_update_outports_LH_P6_4¹ _lh_update_outports_LH_P6_5¹ => [LH_C [LH_P6 _lh_update_outports_LH_P6_0¹ _lh_update_outports_arg2¹ _lh_update_outports_LH_P6_2¹ _lh_update_outports_LH_P6_3¹ _lh_update_outports_LH_P6_4¹ _lh_update_outports_LH_P6_5¹] _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁶)]
//│ 			| _  => _lh_listcomp_fun⁸(_lh_listcomp_fun_ls_t⁶)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun⁸(outports_lh_₄(_lh_update_outports_arg1¹)))
//│ def update_outports_lh_₃(_lh_update_outports_arg1², _lh_update_outports_arg2²) = updateOutports_lh_₄(_lh_update_outports_arg1², 
//│ 	let _lh_listcomp_fun¹⁸ = (fun _lh_listcomp_fun_para⁸ -> case _lh_listcomp_fun_para⁸ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹² _lh_listcomp_fun_ls_t¹³ => case _lh_listcomp_fun_ls_h¹² of {
//│ 			LH_P6 _lh_update_outports_LH_P6_0² _lh_update_outports_LH_P6_1² _lh_update_outports_LH_P6_2² _lh_update_outports_LH_P6_3² _lh_update_outports_LH_P6_4² _lh_update_outports_LH_P6_5² => [LH_C [LH_P6 _lh_update_outports_LH_P6_0² _lh_update_outports_arg2² _lh_update_outports_LH_P6_2² _lh_update_outports_LH_P6_3² _lh_update_outports_LH_P6_4² _lh_update_outports_LH_P6_5²] _lh_listcomp_fun¹⁸(_lh_listcomp_fun_ls_t¹³)]
//│ 			| _  => _lh_listcomp_fun¹⁸(_lh_listcomp_fun_ls_t¹³)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun¹⁸(outports_lh_₈(_lh_update_outports_arg1²)))
//│ def update_requests_lh_₁(_lh_update_requests_arg1¹, _lh_update_requests_arg2¹) = updateOutports_lh_₄(_lh_update_requests_arg2¹, 
//│ 	let _lh_listcomp_fun²¹ = (fun _lh_listcomp_fun_para¹¹ -> case _lh_listcomp_fun_para¹¹ of {
//│ 		LH_C _lh_listcomp_fun_ls_h¹⁴ _lh_listcomp_fun_ls_t¹⁵ => case _lh_listcomp_fun_ls_h¹⁴ of {
//│ 			LH_P6 _lh_update_requests_LH_P6_0¹ _lh_update_requests_LH_P6_1¹ _lh_update_requests_LH_P6_2¹ _lh_update_requests_LH_P6_3¹ _lh_update_requests_LH_P6_4¹ _lh_update_requests_LH_P6_5¹ => [LH_C [LH_P6 _lh_update_requests_LH_P6_0¹ _lh_update_requests_LH_P6_1¹ _lh_update_requests_arg1¹ _lh_update_requests_LH_P6_3¹ _lh_update_requests_arg1¹ _lh_update_requests_LH_P6_5¹] _lh_listcomp_fun²¹(_lh_listcomp_fun_ls_t¹⁵)]
//│ 			| _  => _lh_listcomp_fun²¹(_lh_listcomp_fun_ls_t¹⁵)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun²¹(outports_lh_₈(_lh_update_requests_arg2¹)))
//│ def update_requests_lh_₂(_lh_update_requests_arg1⁰, _lh_update_requests_arg2⁰) = updateOutports_lh_₄(_lh_update_requests_arg2⁰, 
//│ 	let _lh_listcomp_fun³ = (fun _lh_listcomp_fun_para² -> case _lh_listcomp_fun_para² of {
//│ 		LH_C _lh_listcomp_fun_ls_h² _lh_listcomp_fun_ls_t² => case _lh_listcomp_fun_ls_h² of {
//│ 			LH_P6 _lh_update_requests_LH_P6_0⁰ _lh_update_requests_LH_P6_1⁰ _lh_update_requests_LH_P6_2⁰ _lh_update_requests_LH_P6_3⁰ _lh_update_requests_LH_P6_4⁰ _lh_update_requests_LH_P6_5⁰ => [LH_C [LH_P6 _lh_update_requests_LH_P6_0⁰ _lh_update_requests_LH_P6_1⁰ _lh_update_requests_arg1⁰ _lh_update_requests_LH_P6_3⁰ _lh_update_requests_arg1⁰ _lh_update_requests_LH_P6_5⁰] _lh_listcomp_fun³(_lh_listcomp_fun_ls_t²)]
//│ 			| _  => _lh_listcomp_fun³(_lh_listcomp_fun_ls_t²)}
//│ 		| LH_N  => [LH_N]})
//│ 	in _lh_listcomp_fun³(outports_lh_₈(_lh_update_requests_arg2⁰)))
//│ def upsweep_lh_₁(_lh_upsweep_arg1³, _lh_upsweep_arg2⁰) = _lh_upsweep_arg2⁰(_lh_upsweep_arg1³)
//│ def xor_lh_₁(_lh_xor_arg1⁰, _lh_xor_arg2⁰) = if polyEq⁰(_lh_xor_arg1⁰, _lh_xor_arg2⁰) then [T] else [F]
//│ def zipWith_lh_₁(f³², xs⁹, ys⁶) = case xs⁹ of {
//│ 	LH_C hx⁴ tx⁴ => case ys⁶ of {
//│ 		LH_C hy⁴ ty⁴ => [LH_C f³²(hx⁴, hy⁴) zipWith_lh_₁(f³², tx⁴, ty⁴)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lh_₂(f¹⁸, xs⁶, ys⁴) = case xs⁶ of {
//│ 	LH_C hx¹ tx¹ => case ys⁴ of {
//│ 		LH_C hy¹ ty¹ => [LH_C f¹⁸(hx¹, hy¹) zipWith_lh_₂(f¹⁸, tx¹, ty¹)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lh_₃(f⁴¹, xs¹³, ys⁸) = case xs¹³ of {
//│ 	LH_C hx⁷ tx⁷ => case ys⁸ of {
//│ 		LH_C hy⁷ ty⁷ => [LH_C f⁴¹(hx⁷, hy⁷) zipWith_lh_₃(f⁴¹, tx⁷, ty⁷)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lh_₄(f⁴⁴, xs¹⁴, ys⁹) = case xs¹⁴ of {
//│ 	LH_C hx⁸ tx⁸ => case ys⁹ of {
//│ 		LH_C hy⁸ ty⁸ => [LH_C f⁴⁴(hx⁸, hy⁸) zipWith_lh_₄(f⁴⁴, tx⁸, ty⁸)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lh_₅(f⁴⁹, xs¹⁶, ys¹⁰) = case xs¹⁶ of {
//│ 	LH_C hx⁹ tx⁹ => case ys¹⁰ of {
//│ 		LH_C hy⁹ ty⁹ => [LH_C f⁴⁹(hx⁹, hy⁹) zipWith_lh_₅(f⁴⁹, tx⁹, ty⁹)]
//│ 		| LH_N  => [LH_N]}
//│ 	| LH_N  => [LH_N]}
//│ def zipWith_lz_nl_lh_₁(f¹⁹, xs⁸, ys⁵) = ys⁵(f¹⁹, xs⁸)
//│ def zipWith_lz_nl_lh_₂(f³³, xs¹⁰, ys⁷) = ys⁷(f³³, xs¹⁰)
//│ def zip_lh_₁(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C hx⁰ tx⁰ => ys¹(hx⁰, tx⁰)
//│ 	| LH_N  => (fun _lh_listcomp_fun¹ -> (fun _lh_store_inputs_PS_0⁰ -> (fun _lh_store_inputs_PS_2⁰ -> (fun _lh_store_inputs_PS_3⁰ -> (fun _lh_store_inputs_PS_4⁰ -> [LH_N])))))}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<
