:NewParser
:ParseOnly

// pidgits n = 0 % (0 # (1,0,1)) where
//   i%ds
//      | i >= n = []
//      | True = (concat h ++ "\t:" ++ show j ++ "\n") ++ j%t
//      where k = i+10;
//            j = min n k;
//            (h,t) | k > n = (take (n`mod`10) ds ++ replicate (k-n) " ",[])
//                  | True = splitAt 10 ds
//   j # s
//      | n>a || r+n>=d = k # t
//      | True = show q : k # (n*10,(a-(q*d))*10,d)
//      where k = j+1; 
//            t@(n,a,d) = k&s; 
//            (q,r) = (n*3+a) `divMod` d
//   j&(n,a,d) = (n*j,(a+n*2)*y,d*y) where y=(j*2+1)

:lhInHaskell
:lhGenOCaml
drop_lz n ls = if n > 0 then lazy (case (force ls) of { [] -> []; (h:t) -> force (drop_lz (n - 1) t) }) else ls
splitAt_lz n xs = (take_lz n xs, drop_lz n xs)
min a b = if a > b then b else a
replicate n x = if n > 0 then (x:(replicate (n - 1) x)) else []
divmod a b = ((a `div` b), (a `mod` b))
percOp i ds n =
  if i >= n then
    []
  else
    let k = (i + 10) in
          let j = (min n k) in
                case (if k > n then ((take_lz (n `mod` 10) ds) ++ (replicate (k-n) " "), (lazy [])) else (splitAt_lz 10 ds)) of {
                  (h, t) -> (concat h) ++ ("t:" ++ ((string_of_int j) ++ "n")) ++ (percOp j t n)
                }
hashOp j s =
  lazy (let k = j + 1 in
      case (ampOp k s) of {
        (n, a, d) -> case (divmod ((n * 3) + a) d) of {
          (q, r) -> if ((n > a) || ((r + n) >= d)) then (force (hashOp k (n, a, d))) else ((string_of_int q) : (hashOp k (n*10, (a-(q*d))*10, d)))
        }
      })
ampOp j (n,a,d) = let y = ((j * 2) + 1) in (n * j, (a + (n * 2)) * y, d * y)
pidgits n = percOp 0 (hashOp 0 (1,0,1)) n
testPiDigits_nofib n = pidgits n
testPiDigits_nofib $ primId 5000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testPiDigits_nofib_₀^1406(primId⁰(5000))
//│ def ampOp_₀(_lh_ampOp_arg1¹, _lh_ampOp_arg2¹) = case _lh_ampOp_arg2¹ of {
//│ 	LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => 
//│ 		let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ 		in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)]
//│ 	| _  => error⁰}
//│ def concat_₀(lss¹) = case lss¹ of {
//│ 	LH_C h²⁶ t²⁸ => mappend_₀^1355(h²⁶, concat_₀^1358(t²⁸))
//│ 	| LH_N  => [LH_N]}
//│ def divmod_₀(_lh_divmod_arg1¹, _lh_divmod_arg2¹) = [LH_P2 div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹) (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)]
//│ def drop_lz_₀(_lh_drop_lz_arg1¹, _lh_drop_lz_arg2¹) = if (_lh_drop_lz_arg1¹ > 0) then lazy⁰(
//│ 	let _lh_matchIdent⁵ = force⁰(_lh_drop_lz_arg2¹)
//│ 	in case _lh_matchIdent⁵ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀^1049((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹))
//│ 		| _  => error⁰}) else _lh_drop_lz_arg2¹
//│ def hashOp_₀(_lh_hashOp_arg1¹, _lh_hashOp_arg2¹) = lazy⁰(
//│ 	let k³ = (_lh_hashOp_arg1¹ + 1)
//│ 	in let _lh_matchIdent⁶ = ampOp_₀^1236(k³, _lh_hashOp_arg2¹)
//│ 	in case _lh_matchIdent⁶ of {
//│ 		LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹ => 
//│ 			let _lh_matchIdent⁷ = divmod_₀^1242(((_lh_hashOp_LH_P3_0¹ * 3) + _lh_hashOp_LH_P3_1¹), _lh_hashOp_LH_P3_2¹)
//│ 			in case _lh_matchIdent⁷ of {
//│ 				LH_P2 _lh_hashOp_LH_P2_0¹ _lh_hashOp_LH_P2_1¹ => if ((_lh_hashOp_LH_P3_0¹ > _lh_hashOp_LH_P3_1¹) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0¹) >= _lh_hashOp_LH_P3_2¹)) then force⁰(hashOp_₀^1274(k³, [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀^1286(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰})
//│ def mappend_₀(xs¹³, ys¹³) = case xs¹³ of {
//│ 	LH_C h²⁵ t²⁷ => [LH_C h²⁵ mappend_₀^1344(t²⁷, ys¹³)]
//│ 	| LH_N  => ys¹³}
//│ def mappend_₁(xs¹⁰, ys¹⁰) = case xs¹⁰ of {
//│ 	LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁^1133(t²³, ys¹⁰)]
//│ 	| LH_N  => ys¹⁰}
//│ def mappend_₂(xs¹¹, ys¹¹) = case xs¹¹ of {
//│ 	LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂^1198(t²⁵, ys¹¹)]
//│ 	| LH_N  => ys¹¹}
//│ def mappend_₃(xs⁹, ys⁹) = case xs⁹ of {
//│ 	LH_C h²⁰ t²² => [LH_C h²⁰ mappend_₃^1121(t²², ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_₄(xs¹², ys¹²) = case xs¹² of {
//│ 	LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄^1210(t²⁶, ys¹²)]
//│ 	| LH_N  => ys¹²}
//│ def mappend_₅(xs¹⁴, ys¹⁴) = case xs¹⁴ of {
//│ 	LH_C h²⁸ t³⁰ => [LH_C h²⁸ mappend_₅^1396(t³⁰, ys¹⁴)]
//│ 	| LH_N  => ys¹⁴}
//│ def min_₀(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ def percOp_₀(_lh_percOp_arg1¹, _lh_percOp_arg2¹, _lh_percOp_arg3¹) = if (_lh_percOp_arg1¹ >= _lh_percOp_arg3¹) then [LH_N] else 
//│ 	let k² = (_lh_percOp_arg1¹ + 10)
//│ 	in let j¹ = min_₀^951(_lh_percOp_arg3¹, k²)
//│ 	in let _lh_matchIdent⁴ = if (k² > _lh_percOp_arg3¹) then [LH_P2 mappend_₁^961(take_lz_₁^962((_lh_percOp_arg3¹ % 10), _lh_percOp_arg2¹), replicate_₀^972((k² - _lh_percOp_arg3¹), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])] else splitAt_lz_₀^988(10, _lh_percOp_arg2¹)
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_P2 _lh_percOp_LH_P2_0¹ _lh_percOp_LH_P2_1¹ => mappend_₂^995(mappend_₃^996(concat_₀^997(_lh_percOp_LH_P2_0¹), mappend_₄^1001([LH_C 't' [LH_C ':' [LH_N]]], mappend_₅^1008(string_of_int⁰(j¹), [LH_C 'n' [LH_N]]))), percOp_₀^1020(j¹, _lh_percOp_LH_P2_1¹, _lh_percOp_arg3¹))
//│ 		| _  => error⁰}
//│ def pidgits_₀(_lh_pidgits_arg1¹) = percOp_₀^1168(0, hashOp_₀^1171(0, [LH_P3 1 0 1]), _lh_pidgits_arg1¹)
//│ def replicate_₀(_lh_replicate_arg1¹, _lh_replicate_arg2¹) = if (_lh_replicate_arg1¹ > 0) then [LH_C _lh_replicate_arg2¹ replicate_₀^1328((_lh_replicate_arg1¹ - 1), _lh_replicate_arg2¹)] else [LH_N]
//│ def splitAt_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) = [LH_P2 take_lz_₀^1183(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) drop_lz_₀^1188(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)]
//│ def take_lz_₀(n⁵, ls²⁰) = if (n⁵ > 0) then case force⁰(ls²⁰) of {
//│ 	LH_C h²⁷ t²⁹ => [LH_C h²⁷ take_lz_₀^1378((n⁵ - 1), t²⁹)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lz_₁(n⁴, ls¹⁹) = if (n⁴ > 0) then case force⁰(ls¹⁹) of {
//│ 	LH_C h²² t²⁴ => [LH_C h²² take_lz_₁^1152((n⁴ - 1), t²⁴)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPiDigits_nofib_₀(_lh_testPiDigits_nofib_arg1¹) = pidgits_₀^1365(_lh_testPiDigits_nofib_arg1¹)
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec ampOp__d0 _lh_ampOp_arg1_1 _lh_ampOp_arg2_1 =
//│ 		  (match _lh_ampOp_arg2_1 with
//│ 		    | `LH_P3(_lh_ampOp_LH_P3_0_1, _lh_ampOp_LH_P3_1_1, _lh_ampOp_LH_P3_2_1) -> 
//│ 		      (let rec y_1 = ((_lh_ampOp_arg1_1 * 2) + 1) in
//│ 		        (`LH_P3((_lh_ampOp_LH_P3_0_1 * _lh_ampOp_arg1_1), ((_lh_ampOp_LH_P3_1_1 + (_lh_ampOp_LH_P3_0_1 * 2)) * y_1), (_lh_ampOp_LH_P3_2_1 * y_1))))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and concat__d0 lss_1 =
//│ 		  (match lss_1 with
//│ 		    | `LH_C(h_2_6, t_2_8) -> 
//│ 		      ((mappend__d0 h_2_6) (concat__d0 t_2_8))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N))
//│ 		and divmod__d0 _lh_divmod_arg1_1 _lh_divmod_arg2_1 =
//│ 		  (`LH_P2((_lh_divmod_arg1_1 / _lh_divmod_arg2_1), (_lh_divmod_arg1_1 mod _lh_divmod_arg2_1)))
//│ 		and drop_lz__d0 _lh_drop_lz_arg1_1 _lh_drop_lz_arg2_1 =
//│ 		  (if (_lh_drop_lz_arg1_1 > 0) then
//│ 		    (lazy (let rec _lh_matchIdent_5 = (Lazy.force _lh_drop_lz_arg2_1) in
//│ 		      (match _lh_matchIdent_5 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_N)
//│ 		        | `LH_C(_lh_drop_lz_LH_C_0_1, _lh_drop_lz_LH_C_1_1) -> 
//│ 		          (Lazy.force ((drop_lz__d0 (_lh_drop_lz_arg1_1 - 1)) _lh_drop_lz_LH_C_1_1))
//│ 		        | _ -> 
//│ 		          (failwith "error"))))
//│ 		  else
//│ 		    _lh_drop_lz_arg2_1)
//│ 		and hashOp__d0 _lh_hashOp_arg1_1 _lh_hashOp_arg2_1 =
//│ 		  (lazy (let rec k_3 = (_lh_hashOp_arg1_1 + 1) in
//│ 		    (let rec _lh_matchIdent_6 = ((ampOp__d0 k_3) _lh_hashOp_arg2_1) in
//│ 		      (match _lh_matchIdent_6 with
//│ 		        | `LH_P3(_lh_hashOp_LH_P3_0_1, _lh_hashOp_LH_P3_1_1, _lh_hashOp_LH_P3_2_1) -> 
//│ 		          (let rec _lh_matchIdent_7 = ((divmod__d0 ((_lh_hashOp_LH_P3_0_1 * 3) + _lh_hashOp_LH_P3_1_1)) _lh_hashOp_LH_P3_2_1) in
//│ 		            (match _lh_matchIdent_7 with
//│ 		              | `LH_P2(_lh_hashOp_LH_P2_0_1, _lh_hashOp_LH_P2_1_1) -> 
//│ 		                (if ((_lh_hashOp_LH_P3_0_1 > _lh_hashOp_LH_P3_1_1) || ((_lh_hashOp_LH_P2_1_1 + _lh_hashOp_LH_P3_0_1) >= _lh_hashOp_LH_P3_2_1)) then
//│ 		                  (Lazy.force ((hashOp__d0 k_3) (`LH_P3(_lh_hashOp_LH_P3_0_1, _lh_hashOp_LH_P3_1_1, _lh_hashOp_LH_P3_2_1))))
//│ 		                else
//│ 		                  (`LH_C((string_of_int _lh_hashOp_LH_P2_0_1), ((hashOp__d0 k_3) (`LH_P3((_lh_hashOp_LH_P3_0_1 * 10), ((_lh_hashOp_LH_P3_1_1 - (_lh_hashOp_LH_P2_0_1 * _lh_hashOp_LH_P3_2_1)) * 10), _lh_hashOp_LH_P3_2_1))))))
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        | _ -> 
//│ 		          (failwith "error")))))
//│ 		and mappend__d0 xs_1_3 ys_1_3 =
//│ 		  (match xs_1_3 with
//│ 		    | `LH_C(h_2_5, t_2_7) -> 
//│ 		      (`LH_C(h_2_5, ((mappend__d0 t_2_7) ys_1_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_3)
//│ 		and mappend__d1 xs_1_0 ys_1_0 =
//│ 		  (match xs_1_0 with
//│ 		    | `LH_C(h_2_1, t_2_3) -> 
//│ 		      (`LH_C(h_2_1, ((mappend__d1 t_2_3) ys_1_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_0)
//│ 		and mappend__d2 xs_1_1 ys_1_1 =
//│ 		  (match xs_1_1 with
//│ 		    | `LH_C(h_2_3, t_2_5) -> 
//│ 		      (`LH_C(h_2_3, ((mappend__d2 t_2_5) ys_1_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_1)
//│ 		and mappend__d3 xs_9 ys_9 =
//│ 		  (match xs_9 with
//│ 		    | `LH_C(h_2_0, t_2_2) -> 
//│ 		      (`LH_C(h_2_0, ((mappend__d3 t_2_2) ys_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_9)
//│ 		and mappend__d4 xs_1_2 ys_1_2 =
//│ 		  (match xs_1_2 with
//│ 		    | `LH_C(h_2_4, t_2_6) -> 
//│ 		      (`LH_C(h_2_4, ((mappend__d4 t_2_6) ys_1_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_2)
//│ 		and mappend__d5 xs_1_4 ys_1_4 =
//│ 		  (match xs_1_4 with
//│ 		    | `LH_C(h_2_8, t_3_0) -> 
//│ 		      (`LH_C(h_2_8, ((mappend__d5 t_3_0) ys_1_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_4)
//│ 		and min__d0 _lh_min_arg1_1 _lh_min_arg2_1 =
//│ 		  (if (_lh_min_arg1_1 > _lh_min_arg2_1) then
//│ 		    _lh_min_arg2_1
//│ 		  else
//│ 		    _lh_min_arg1_1)
//│ 		and percOp__d0 _lh_percOp_arg1_1 _lh_percOp_arg2_1 _lh_percOp_arg3_1 =
//│ 		  (if (_lh_percOp_arg1_1 >= _lh_percOp_arg3_1) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (let rec k_2 = (_lh_percOp_arg1_1 + 10) in
//│ 		      (let rec j_1 = ((min__d0 _lh_percOp_arg3_1) k_2) in
//│ 		        (let rec _lh_matchIdent_4 = (if (k_2 > _lh_percOp_arg3_1) then
//│ 		          (`LH_P2(((mappend__d1 ((take_lz__d1 (_lh_percOp_arg3_1 mod 10)) _lh_percOp_arg2_1)) ((replicate__d0 (k_2 - _lh_percOp_arg3_1)) (`LH_C(' ', (`LH_N))))), (lazy (`LH_N))))
//│ 		        else
//│ 		          ((splitAt_lz__d0 10) _lh_percOp_arg2_1)) in
//│ 		          (match _lh_matchIdent_4 with
//│ 		            | `LH_P2(_lh_percOp_LH_P2_0_1, _lh_percOp_LH_P2_1_1) -> 
//│ 		              ((mappend__d2 ((mappend__d3 (concat__d0 _lh_percOp_LH_P2_0_1)) ((mappend__d4 (`LH_C('t', (`LH_C(':', (`LH_N)))))) ((mappend__d5 (string_of_int j_1)) (`LH_C('n', (`LH_N))))))) (((percOp__d0 j_1) _lh_percOp_LH_P2_1_1) _lh_percOp_arg3_1))
//│ 		            | _ -> 
//│ 		              (failwith "error"))))))
//│ 		and pidgits__d0 _lh_pidgits_arg1_1 =
//│ 		  (((percOp__d0 0) ((hashOp__d0 0) (`LH_P3(1, 0, 1)))) _lh_pidgits_arg1_1)
//│ 		and replicate__d0 _lh_replicate_arg1_1 _lh_replicate_arg2_1 =
//│ 		  (if (_lh_replicate_arg1_1 > 0) then
//│ 		    (`LH_C(_lh_replicate_arg2_1, ((replicate__d0 (_lh_replicate_arg1_1 - 1)) _lh_replicate_arg2_1)))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and splitAt_lz__d0 _lh_splitAt_lz_arg1_1 _lh_splitAt_lz_arg2_1 =
//│ 		  (`LH_P2(((take_lz__d0 _lh_splitAt_lz_arg1_1) _lh_splitAt_lz_arg2_1), ((drop_lz__d0 _lh_splitAt_lz_arg1_1) _lh_splitAt_lz_arg2_1)))
//│ 		and take_lz__d0 n_5 ls_2_0 =
//│ 		  (if (n_5 > 0) then
//│ 		    (match (Lazy.force ls_2_0) with
//│ 		      | `LH_C(h_2_7, t_2_9) -> 
//│ 		        (`LH_C(h_2_7, ((take_lz__d0 (n_5 - 1)) t_2_9)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and take_lz__d1 n_4 ls_1_9 =
//│ 		  (if (n_4 > 0) then
//│ 		    (match (Lazy.force ls_1_9) with
//│ 		      | `LH_C(h_2_2, t_2_4) -> 
//│ 		        (`LH_C(h_2_2, ((take_lz__d1 (n_4 - 1)) t_2_4)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and testPiDigits_nofib__d0 _lh_testPiDigits_nofib_arg1_1 =
//│ 		  (pidgits__d0 _lh_testPiDigits_nofib_arg1_1);;
//│ 		(testPiDigits_nofib__d0 5000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 980 --->
//│ 	case xs¹³ of {LH_C h²⁵ t²⁷ => [LH_C h²⁵ mappend_₀(t²⁷, ys¹³)] | LH_N  => ys¹³}: 1351
//│ [LH_C ' ' [LH_N]]: 981 --->
//│ 	case xs¹³ of {LH_C h²⁵ t²⁷ => [LH_C h²⁵ mappend_₀(t²⁷, ys¹³)] | LH_N  => ys¹³}: 1351
//│ [LH_N]: 985 --->
//│ 	case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹)) | _  => error⁰}: 1060
//│ 	case force⁰(ls¹⁹) of {LH_C h²² t²⁴ => [LH_C h²² take_lz_₁((n⁴ - 1), t²⁴)] | LH_N  => [LH_N]}: 1163
//│ 	case force⁰(ls²⁰) of {LH_C h²⁷ t²⁹ => [LH_C h²⁷ take_lz_₀((n⁵ - 1), t²⁹)] | LH_N  => [LH_N]}: 1389
//│ [LH_P2 mappend_₁(take_lz_₁((_lh_percOp_arg3¹ % 10), _lh_percOp_arg2¹), replicate_₀((k² - _lh_percOp_arg3¹), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])]: 987 --->
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_percOp_LH_P2_0¹ _lh_percOp_LH_P2_1¹ => mappend_₂(mappend_₃(concat_₀(_lh_percOp_LH_P2_0¹), mappend_₄([LH_C 't' [LH_C ':' [LH_N]]], mappend_₅(string_of_int⁰(j¹), [LH_C 'n' [LH_N]]))), percOp_₀(j¹, _lh_percOp_LH_P2_1¹, _lh_percOp_arg3¹)) | _  => error⁰}: 1029
//│ [LH_N]: 1004 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)] | LH_N  => ys¹²}: 1217
//│ [LH_C ':' [LH_N]]: 1005 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)] | LH_N  => ys¹²}: 1217
//│ [LH_C 't' [LH_C ':' [LH_N]]]: 1006 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)] | LH_N  => ys¹²}: 1217
//│ [LH_N]: 1014 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ [LH_C 'n' [LH_N]]: 1015 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ [LH_N]: 1047 --->
//│ 	case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹)) | _  => error⁰}: 1060
//│ 	case force⁰(ls¹⁹) of {LH_C h²² t²⁴ => [LH_C h²² take_lz_₁((n⁴ - 1), t²⁴)] | LH_N  => [LH_N]}: 1163
//│ 	case force⁰(ls²⁰) of {LH_C h²⁷ t²⁹ => [LH_C h²⁷ take_lz_₀((n⁵ - 1), t²⁹)] | LH_N  => [LH_N]}: 1389
//│ [LH_P2 div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹) (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)]: 1077 --->
//│ 	case _lh_matchIdent⁷ of {LH_P2 _lh_hashOp_LH_P2_0¹ _lh_hashOp_LH_P2_1¹ => if ((_lh_hashOp_LH_P3_0¹ > _lh_hashOp_LH_P3_1¹) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0¹) >= _lh_hashOp_LH_P3_2¹)) then force⁰(hashOp_₀(k³, [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])] | _  => error⁰}: 1313
//│ [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)]: 1113 --->
//│ 	case _lh_matchIdent⁶ of {LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹ => let _lh_matchIdent⁷ = divmod_₀(((_lh_hashOp_LH_P3_0¹ * 3) + _lh_hashOp_LH_P3_1¹), _lh_hashOp_LH_P3_2¹)
//│ in case _lh_matchIdent⁷ of {LH_P2 _lh_hashOp_LH_P2_0¹ _lh_hashOp_LH_P2_1¹ => if ((_lh_hashOp_LH_P3_0¹ > _lh_hashOp_LH_P3_1¹) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0¹) >= _lh_hashOp_LH_P3_2¹)) then force⁰(hashOp_₀(k³, [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])] | _  => error⁰} | _  => error⁰}: 1316
//│ [LH_C h²⁰ mappend_₃(t²², ys⁹)]: 1126 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ [LH_C h²¹ mappend_₁(t²³, ys¹⁰)]: 1138 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_C h²² take_lz_₁((n⁴ - 1), t²⁴)]: 1161 --->
//│ 	case xs¹⁰ of {LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁(t²³, ys¹⁰)] | LH_N  => ys¹⁰}: 1140
//│ [LH_N]: 1162 --->
//│ 	case xs¹⁰ of {LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁(t²³, ys¹⁰)] | LH_N  => ys¹⁰}: 1140
//│ [LH_N]: 1164 --->
//│ 	case xs¹⁰ of {LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁(t²³, ys¹⁰)] | LH_N  => ys¹⁰}: 1140
//│ [LH_P3 1 0 1]: 1177 --->
//│ 	case _lh_ampOp_arg2¹ of {LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)] | _  => error⁰}: 1116
//│ [LH_P2 take_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) drop_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)]: 1193 --->
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_percOp_LH_P2_0¹ _lh_percOp_LH_P2_1¹ => mappend_₂(mappend_₃(concat_₀(_lh_percOp_LH_P2_0¹), mappend_₄([LH_C 't' [LH_C ':' [LH_N]]], mappend_₅(string_of_int⁰(j¹), [LH_C 'n' [LH_N]]))), percOp_₀(j¹, _lh_percOp_LH_P2_1¹, _lh_percOp_arg3¹)) | _  => error⁰}: 1029
//│ [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)]: 1215 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹]: 1280 --->
//│ 	case _lh_ampOp_arg2¹ of {LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)] | _  => error⁰}: 1116
//│ [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹]: 1308 --->
//│ 	case _lh_ampOp_arg2¹ of {LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)] | _  => error⁰}: 1116
//│ [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])]: 1310 --->
//│ 	case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹)) | _  => error⁰}: 1060
//│ 	case force⁰(ls¹⁹) of {LH_C h²² t²⁴ => [LH_C h²² take_lz_₁((n⁴ - 1), t²⁴)] | LH_N  => [LH_N]}: 1163
//│ 	case force⁰(ls²⁰) of {LH_C h²⁷ t²⁹ => [LH_C h²⁷ take_lz_₀((n⁵ - 1), t²⁹)] | LH_N  => [LH_N]}: 1389
//│ [LH_C _lh_replicate_arg2¹ replicate_₀((_lh_replicate_arg1¹ - 1), _lh_replicate_arg2¹)]: 1337 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_N]: 1338 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_C h²⁵ mappend_₀(t²⁷, ys¹³)]: 1349 --->
//│ 	case xs⁹ of {LH_C h²⁰ t²² => [LH_C h²⁰ mappend_₃(t²², ys⁹)] | LH_N  => ys⁹}: 1128
//│ [LH_N]: 1362 --->
//│ 	case xs⁹ of {LH_C h²⁰ t²² => [LH_C h²⁰ mappend_₃(t²², ys⁹)] | LH_N  => ys⁹}: 1128
//│ [LH_C h²⁷ take_lz_₀((n⁵ - 1), t²⁹)]: 1387 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_N]: 1388 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_N]: 1390 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_C h²⁸ mappend_₅(t³⁰, ys¹⁴)]: 1401 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ ------------------
//│ case _lh_matchIdent⁴ of {LH_P2 _lh_percOp_LH_P2_0¹ _lh_percOp_LH_P2_1¹ => mappend_₂(mappend_₃(concat_₀(_lh_percOp_LH_P2_0¹), mappend_₄([LH_C 't' [LH_C ':' [LH_N]]], mappend_₅(string_of_int⁰(j¹), [LH_C 'n' [LH_N]]))), percOp_₀(j¹, _lh_percOp_LH_P2_1¹, _lh_percOp_arg3¹)) | _  => error⁰}: 1029 --->
//│ 	[LH_P2 mappend_₁(take_lz_₁((_lh_percOp_arg3¹ % 10), _lh_percOp_arg2¹), replicate_₀((k² - _lh_percOp_arg3¹), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])]: 987
//│ 	[LH_P2 take_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) drop_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)]: 1193
//│ case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹)) | _  => error⁰}: 1060 --->
//│ 	[LH_N]: 985
//│ 	[LH_N]: 1047
//│ 	[LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])]: 1310
//│ case _lh_ampOp_arg2¹ of {LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)] | _  => error⁰}: 1116 --->
//│ 	[LH_P3 1 0 1]: 1177
//│ 	[LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹]: 1280
//│ 	[LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹]: 1308
//│ case xs⁹ of {LH_C h²⁰ t²² => [LH_C h²⁰ mappend_₃(t²², ys⁹)] | LH_N  => ys⁹}: 1128 --->
//│ 	[LH_C h²⁵ mappend_₀(t²⁷, ys¹³)]: 1349
//│ 	[LH_N]: 1362
//│ case xs¹⁰ of {LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁(t²³, ys¹⁰)] | LH_N  => ys¹⁰}: 1140 --->
//│ 	[LH_C h²² take_lz_₁((n⁴ - 1), t²⁴)]: 1161
//│ 	[LH_N]: 1162
//│ 	[LH_N]: 1164
//│ case force⁰(ls¹⁹) of {LH_C h²² t²⁴ => [LH_C h²² take_lz_₁((n⁴ - 1), t²⁴)] | LH_N  => [LH_N]}: 1163 --->
//│ 	[LH_N]: 985
//│ 	[LH_N]: 1047
//│ 	[LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])]: 1310
//│ case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205 --->
//│ 	[LH_N]: 1014
//│ 	[LH_C 'n' [LH_N]]: 1015
//│ 	[LH_C h²⁰ mappend_₃(t²², ys⁹)]: 1126
//│ 	[LH_C h²⁴ mappend_₄(t²⁶, ys¹²)]: 1215
//│ 	[LH_C h²⁸ mappend_₅(t³⁰, ys¹⁴)]: 1401
//│ case xs¹² of {LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)] | LH_N  => ys¹²}: 1217 --->
//│ 	[LH_N]: 1004
//│ 	[LH_C ':' [LH_N]]: 1005
//│ 	[LH_C 't' [LH_C ':' [LH_N]]]: 1006
//│ case _lh_matchIdent⁷ of {LH_P2 _lh_hashOp_LH_P2_0¹ _lh_hashOp_LH_P2_1¹ => if ((_lh_hashOp_LH_P3_0¹ > _lh_hashOp_LH_P3_1¹) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0¹) >= _lh_hashOp_LH_P3_2¹)) then force⁰(hashOp_₀(k³, [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])] | _  => error⁰}: 1313 --->
//│ 	[LH_P2 div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹) (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)]: 1077
//│ case _lh_matchIdent⁶ of {LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹ => let _lh_matchIdent⁷ = divmod_₀(((_lh_hashOp_LH_P3_0¹ * 3) + _lh_hashOp_LH_P3_1¹), _lh_hashOp_LH_P3_2¹)
//│ in case _lh_matchIdent⁷ of {LH_P2 _lh_hashOp_LH_P2_0¹ _lh_hashOp_LH_P2_1¹ => if ((_lh_hashOp_LH_P3_0¹ > _lh_hashOp_LH_P3_1¹) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0¹) >= _lh_hashOp_LH_P3_2¹)) then force⁰(hashOp_₀(k³, [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])] | _  => error⁰} | _  => error⁰}: 1316 --->
//│ 	[LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)]: 1113
//│ case xs¹³ of {LH_C h²⁵ t²⁷ => [LH_C h²⁵ mappend_₀(t²⁷, ys¹³)] | LH_N  => ys¹³}: 1351 --->
//│ 	NoProd
//│ 	[LH_N]: 980
//│ 	[LH_C ' ' [LH_N]]: 981
//│ case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363 --->
//│ 	[LH_C h²¹ mappend_₁(t²³, ys¹⁰)]: 1138
//│ 	[LH_C _lh_replicate_arg2¹ replicate_₀((_lh_replicate_arg1¹ - 1), _lh_replicate_arg2¹)]: 1337
//│ 	[LH_N]: 1338
//│ 	[LH_C h²⁷ take_lz_₀((n⁵ - 1), t²⁹)]: 1387
//│ 	[LH_N]: 1388
//│ 	[LH_N]: 1390
//│ case force⁰(ls²⁰) of {LH_C h²⁷ t²⁹ => [LH_C h²⁷ take_lz_₀((n⁵ - 1), t²⁹)] | LH_N  => [LH_N]}: 1389 --->
//│ 	[LH_N]: 985
//│ 	[LH_N]: 1047
//│ 	[LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])]: 1310
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_P2 mappend_₁(take_lz_₁((_lh_percOp_arg3¹ % 10), _lh_percOp_arg2¹), replicate_₀((k² - _lh_percOp_arg3¹), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])]: 987 --->
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_percOp_LH_P2_0¹ _lh_percOp_LH_P2_1¹ => mappend_₂(mappend_₃(concat_₀(_lh_percOp_LH_P2_0¹), mappend_₄([LH_C 't' [LH_C ':' [LH_N]]], mappend_₅(string_of_int⁰(j¹), [LH_C 'n' [LH_N]]))), percOp_₀(j¹, _lh_percOp_LH_P2_1¹, _lh_percOp_arg3¹)) | _  => error⁰}: 1029
//│ [LH_N]: 1004 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)] | LH_N  => ys¹²}: 1217
//│ [LH_C ':' [LH_N]]: 1005 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)] | LH_N  => ys¹²}: 1217
//│ [LH_C 't' [LH_C ':' [LH_N]]]: 1006 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)] | LH_N  => ys¹²}: 1217
//│ [LH_N]: 1014 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ [LH_C 'n' [LH_N]]: 1015 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ [LH_P2 div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹) (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)]: 1077 --->
//│ 	case _lh_matchIdent⁷ of {LH_P2 _lh_hashOp_LH_P2_0¹ _lh_hashOp_LH_P2_1¹ => if ((_lh_hashOp_LH_P3_0¹ > _lh_hashOp_LH_P3_1¹) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0¹) >= _lh_hashOp_LH_P3_2¹)) then force⁰(hashOp_₀(k³, [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])] | _  => error⁰}: 1313
//│ [LH_C h²⁰ mappend_₃(t²², ys⁹)]: 1126 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ [LH_C h²¹ mappend_₁(t²³, ys¹⁰)]: 1138 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_C h²² take_lz_₁((n⁴ - 1), t²⁴)]: 1161 --->
//│ 	case xs¹⁰ of {LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁(t²³, ys¹⁰)] | LH_N  => ys¹⁰}: 1140
//│ [LH_N]: 1162 --->
//│ 	case xs¹⁰ of {LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁(t²³, ys¹⁰)] | LH_N  => ys¹⁰}: 1140
//│ [LH_N]: 1164 --->
//│ 	case xs¹⁰ of {LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁(t²³, ys¹⁰)] | LH_N  => ys¹⁰}: 1140
//│ [LH_P2 take_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) drop_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)]: 1193 --->
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_percOp_LH_P2_0¹ _lh_percOp_LH_P2_1¹ => mappend_₂(mappend_₃(concat_₀(_lh_percOp_LH_P2_0¹), mappend_₄([LH_C 't' [LH_C ':' [LH_N]]], mappend_₅(string_of_int⁰(j¹), [LH_C 'n' [LH_N]]))), percOp_₀(j¹, _lh_percOp_LH_P2_1¹, _lh_percOp_arg3¹)) | _  => error⁰}: 1029
//│ [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)]: 1215 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ [LH_C _lh_replicate_arg2¹ replicate_₀((_lh_replicate_arg1¹ - 1), _lh_replicate_arg2¹)]: 1337 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_N]: 1338 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_C h²⁵ mappend_₀(t²⁷, ys¹³)]: 1349 --->
//│ 	case xs⁹ of {LH_C h²⁰ t²² => [LH_C h²⁰ mappend_₃(t²², ys⁹)] | LH_N  => ys⁹}: 1128
//│ [LH_N]: 1362 --->
//│ 	case xs⁹ of {LH_C h²⁰ t²² => [LH_C h²⁰ mappend_₃(t²², ys⁹)] | LH_N  => ys⁹}: 1128
//│ [LH_C h²⁷ take_lz_₀((n⁵ - 1), t²⁹)]: 1387 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_N]: 1388 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_N]: 1390 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_C h²⁸ mappend_₅(t³⁰, ys¹⁴)]: 1401 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ ------------------
//│ case _lh_matchIdent⁴ of {LH_P2 _lh_percOp_LH_P2_0¹ _lh_percOp_LH_P2_1¹ => mappend_₂(mappend_₃(concat_₀(_lh_percOp_LH_P2_0¹), mappend_₄([LH_C 't' [LH_C ':' [LH_N]]], mappend_₅(string_of_int⁰(j¹), [LH_C 'n' [LH_N]]))), percOp_₀(j¹, _lh_percOp_LH_P2_1¹, _lh_percOp_arg3¹)) | _  => error⁰}: 1029 --->
//│ 	[LH_P2 mappend_₁(take_lz_₁((_lh_percOp_arg3¹ % 10), _lh_percOp_arg2¹), replicate_₀((k² - _lh_percOp_arg3¹), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])]: 987
//│ 	[LH_P2 take_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) drop_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)]: 1193
//│ case xs⁹ of {LH_C h²⁰ t²² => [LH_C h²⁰ mappend_₃(t²², ys⁹)] | LH_N  => ys⁹}: 1128 --->
//│ 	[LH_C h²⁵ mappend_₀(t²⁷, ys¹³)]: 1349
//│ 	[LH_N]: 1362
//│ case xs¹⁰ of {LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁(t²³, ys¹⁰)] | LH_N  => ys¹⁰}: 1140 --->
//│ 	[LH_C h²² take_lz_₁((n⁴ - 1), t²⁴)]: 1161
//│ 	[LH_N]: 1162
//│ 	[LH_N]: 1164
//│ case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205 --->
//│ 	[LH_N]: 1014
//│ 	[LH_C 'n' [LH_N]]: 1015
//│ 	[LH_C h²⁰ mappend_₃(t²², ys⁹)]: 1126
//│ 	[LH_C h²⁴ mappend_₄(t²⁶, ys¹²)]: 1215
//│ 	[LH_C h²⁸ mappend_₅(t³⁰, ys¹⁴)]: 1401
//│ case xs¹² of {LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)] | LH_N  => ys¹²}: 1217 --->
//│ 	[LH_N]: 1004
//│ 	[LH_C ':' [LH_N]]: 1005
//│ 	[LH_C 't' [LH_C ':' [LH_N]]]: 1006
//│ case _lh_matchIdent⁷ of {LH_P2 _lh_hashOp_LH_P2_0¹ _lh_hashOp_LH_P2_1¹ => if ((_lh_hashOp_LH_P3_0¹ > _lh_hashOp_LH_P3_1¹) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0¹) >= _lh_hashOp_LH_P3_2¹)) then force⁰(hashOp_₀(k³, [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])] | _  => error⁰}: 1313 --->
//│ 	[LH_P2 div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹) (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)]: 1077
//│ case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363 --->
//│ 	[LH_C h²¹ mappend_₁(t²³, ys¹⁰)]: 1138
//│ 	[LH_C _lh_replicate_arg2¹ replicate_₀((_lh_replicate_arg1¹ - 1), _lh_replicate_arg2¹)]: 1337
//│ 	[LH_N]: 1338
//│ 	[LH_C h²⁷ take_lz_₀((n⁵ - 1), t²⁹)]: 1387
//│ 	[LH_N]: 1388
//│ 	[LH_N]: 1390
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testPiDigits_nofib_₀(primId⁰(5000))
//│ def ampOp_₀(_lh_ampOp_arg1², _lh_ampOp_arg2²) = case _lh_ampOp_arg2² of {
//│ 	LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => 
//│ 		let y² = ((_lh_ampOp_arg1² * 2) + 1)
//│ 		in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1²) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y²) (_lh_ampOp_LH_P3_2¹ * y²)]
//│ 	| _  => error⁰}
//│ def concat_₀(lss²) = lss²(99)
//│ def divmod_₀(_lh_divmod_arg1², _lh_divmod_arg2²) = 
//│ 	let _lh_hashOp_LH_P2_1² = (_lh_divmod_arg1² % _lh_divmod_arg2²)
//│ 	in let _lh_hashOp_LH_P2_0² = div⁰(_lh_divmod_arg1², _lh_divmod_arg2²)
//│ 	in (fun _lh_hashOp_LH_P3_0² -> (fun _lh_hashOp_LH_P3_1² -> (fun _lh_hashOp_LH_P3_2² -> (fun k⁴ -> if ((_lh_hashOp_LH_P3_0² > _lh_hashOp_LH_P3_1²) || ((_lh_hashOp_LH_P2_1² + _lh_hashOp_LH_P3_0²) >= _lh_hashOp_LH_P3_2²)) then force⁰(hashOp_₀(k⁴, [LH_P3 _lh_hashOp_LH_P3_0² _lh_hashOp_LH_P3_1² _lh_hashOp_LH_P3_2²])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0²) hashOp_₀(k⁴, [LH_P3 (_lh_hashOp_LH_P3_0² * 10) ((_lh_hashOp_LH_P3_1² - (_lh_hashOp_LH_P2_0² * _lh_hashOp_LH_P3_2²)) * 10) _lh_hashOp_LH_P3_2²])]))))
//│ def drop_lz_₀(_lh_drop_lz_arg1², _lh_drop_lz_arg2²) = if (_lh_drop_lz_arg1² > 0) then lazy⁰(
//│ 	let _lh_matchIdent⁸ = force⁰(_lh_drop_lz_arg2²)
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀((_lh_drop_lz_arg1² - 1), _lh_drop_lz_LH_C_1¹))
//│ 		| _  => error⁰}) else _lh_drop_lz_arg2²
//│ def hashOp_₀(_lh_hashOp_arg1², _lh_hashOp_arg2²) = lazy⁰(
//│ 	let k⁶ = (_lh_hashOp_arg1² + 1)
//│ 	in let _lh_matchIdent¹⁰ = ampOp_₀(k⁶, _lh_hashOp_arg2²)
//│ 	in case _lh_matchIdent¹⁰ of {
//│ 		LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹ => 
//│ 			let _lh_matchIdent¹¹ = divmod_₀(((_lh_hashOp_LH_P3_0¹ * 3) + _lh_hashOp_LH_P3_1¹), _lh_hashOp_LH_P3_2¹)
//│ 			in _lh_matchIdent¹¹(_lh_hashOp_LH_P3_0¹, _lh_hashOp_LH_P3_1¹, _lh_hashOp_LH_P3_2¹, k⁶)
//│ 		| _  => error⁰})
//│ def mappend_₀(xs¹⁵, ys¹⁸) = case xs¹⁵ of {
//│ 	LH_C h²⁵ t²⁷ => 
//│ 		let t³³ = mappend_₀(t²⁷, ys¹⁸)
//│ 		in let h³¹ = h²⁵
//│ 		in (fun ys¹⁹ -> 
//│ 			let t³⁴ = mappend_₃(t³³, ys¹⁹)
//│ 			in let h³² = h³¹
//│ 			in (fun ys²⁰ -> [LH_C h³² mappend_₂(t³⁴, ys²⁰)]))
//│ 	| LH_N  => ys¹⁸}
//│ def mappend_₁(xs¹⁸, ys³¹) = xs¹⁸(ys³¹)
//│ def mappend_₂(xs¹⁹, ys³²) = xs¹⁹(ys³²)
//│ def mappend_₃(xs²⁰, ys⁴⁰) = xs²⁰(ys⁴⁰)
//│ def mappend_₄(xs¹⁶, ys²⁸) = xs¹⁶(ys²⁸)
//│ def mappend_₅(xs¹⁷, ys²⁹) = case xs¹⁷ of {
//│ 	LH_C h²⁸ t³⁰ => 
//│ 		let t⁴⁰ = mappend_₅(t³⁰, ys²⁹)
//│ 		in let h³⁸ = h²⁸
//│ 		in (fun ys³⁰ -> [LH_C h³⁸ mappend_₂(t⁴⁰, ys³⁰)])
//│ 	| LH_N  => ys²⁹}
//│ def min_₀(_lh_min_arg1², _lh_min_arg2²) = if (_lh_min_arg1² > _lh_min_arg2²) then _lh_min_arg2² else _lh_min_arg1²
//│ def percOp_₀(_lh_percOp_arg1², _lh_percOp_arg2², _lh_percOp_arg3³) = if (_lh_percOp_arg1² >= _lh_percOp_arg3³) then [LH_N] else 
//│ 	let k⁵ = (_lh_percOp_arg1² + 10)
//│ 	in let j³ = min_₀(_lh_percOp_arg3³, k⁵)
//│ 	in let _lh_matchIdent⁹ = if (k⁵ > _lh_percOp_arg3³) then 
//│ 		let _lh_percOp_LH_P2_1³ = lazy⁰([LH_N])
//│ 		in let _lh_percOp_LH_P2_0³ = mappend_₁(take_lz_₁((_lh_percOp_arg3³ % 10), _lh_percOp_arg2²), replicate_₀((k⁵ - _lh_percOp_arg3³), [LH_C ' ' [LH_N]]))
//│ 		in (fun _lh_percOp_arg3⁴ -> (fun j⁴ -> mappend_₂(mappend_₃(concat_₀(_lh_percOp_LH_P2_0³), mappend_₄(
//│ 			let t⁴¹ = 	
//│ 				let t⁴³ = (fun ys³⁷ -> ys³⁷)
//│ 				in let h⁴¹ = ':'
//│ 				in (fun ys³⁵ -> 
//│ 					let t⁴⁴ = mappend_₄(t⁴³, ys³⁵)
//│ 					in let h⁴² = h⁴¹
//│ 					in (fun ys³⁶ -> [LH_C h⁴² mappend_₂(t⁴⁴, ys³⁶)]))
//│ 			in let h³⁹ = 't'
//│ 			in (fun ys³³ -> 
//│ 				let t⁴² = mappend_₄(t⁴¹, ys³³)
//│ 				in let h⁴⁰ = h³⁹
//│ 				in (fun ys³⁴ -> [LH_C h⁴⁰ mappend_₂(t⁴², ys³⁴)])), mappend_₅(string_of_int⁰(j⁴), 
//│ 			let t⁴⁵ = (fun ys³⁹ -> ys³⁹)
//│ 			in let h⁴³ = 'n'
//│ 			in (fun ys³⁸ -> [LH_C h⁴³ mappend_₂(t⁴⁵, ys³⁸)])))), percOp_₀(j⁴, _lh_percOp_LH_P2_1³, _lh_percOp_arg3⁴)))) else splitAt_lz_₀(10, _lh_percOp_arg2²)
//│ 	in _lh_matchIdent⁹(_lh_percOp_arg3³, j³)
//│ def pidgits_₀(_lh_pidgits_arg1²) = percOp_₀(0, hashOp_₀(0, [LH_P3 1 0 1]), _lh_pidgits_arg1²)
//│ def replicate_₀(_lh_replicate_arg1², _lh_replicate_arg2²) = if (_lh_replicate_arg1² > 0) then 
//│ 	let t⁴⁶ = replicate_₀((_lh_replicate_arg1² - 1), _lh_replicate_arg2²)
//│ 	in let h⁴⁴ = _lh_replicate_arg2²
//│ 	in (fun _lh_dummy¹ -> mappend_₀(h⁴⁴, concat_₀(t⁴⁶))) else (fun _lh_dummy² -> (fun ys⁴¹ -> ys⁴¹))
//│ def splitAt_lz_₀(_lh_splitAt_lz_arg1², _lh_splitAt_lz_arg2²) = 
//│ 	let _lh_percOp_LH_P2_1² = drop_lz_₀(_lh_splitAt_lz_arg1², _lh_splitAt_lz_arg2²)
//│ 	in let _lh_percOp_LH_P2_0² = take_lz_₀(_lh_splitAt_lz_arg1², _lh_splitAt_lz_arg2²)
//│ 	in (fun _lh_percOp_arg3² -> (fun j² -> mappend_₂(mappend_₃(concat_₀(_lh_percOp_LH_P2_0²), mappend_₄(
//│ 		let t³⁵ = 	
//│ 			let t³⁷ = (fun ys²⁵ -> ys²⁵)
//│ 			in let h³⁵ = ':'
//│ 			in (fun ys²³ -> 
//│ 				let t³⁸ = mappend_₄(t³⁷, ys²³)
//│ 				in let h³⁶ = h³⁵
//│ 				in (fun ys²⁴ -> [LH_C h³⁶ mappend_₂(t³⁸, ys²⁴)]))
//│ 		in let h³³ = 't'
//│ 		in (fun ys²¹ -> 
//│ 			let t³⁶ = mappend_₄(t³⁵, ys²¹)
//│ 			in let h³⁴ = h³³
//│ 			in (fun ys²² -> [LH_C h³⁴ mappend_₂(t³⁶, ys²²)])), mappend_₅(string_of_int⁰(j²), 
//│ 		let t³⁹ = (fun ys²⁷ -> ys²⁷)
//│ 		in let h³⁷ = 'n'
//│ 		in (fun ys²⁶ -> [LH_C h³⁷ mappend_₂(t³⁹, ys²⁶)])))), percOp_₀(j², _lh_percOp_LH_P2_1², _lh_percOp_arg3²))))
//│ def take_lz_₀(n⁷, ls²²) = if (n⁷ > 0) then case force⁰(ls²²) of {
//│ 	LH_C h²⁷ t²⁹ => 
//│ 		let t⁴⁷ = take_lz_₀((n⁷ - 1), t²⁹)
//│ 		in let h⁴⁵ = h²⁷
//│ 		in (fun _lh_dummy³ -> mappend_₀(h⁴⁵, concat_₀(t⁴⁷)))
//│ 	| LH_N  => (fun _lh_dummy⁴ -> (fun ys⁴² -> ys⁴²))} else (fun _lh_dummy⁵ -> (fun ys⁴³ -> ys⁴³))
//│ def take_lz_₁(n⁶, ls²¹) = if (n⁶ > 0) then case force⁰(ls²¹) of {
//│ 	LH_C h²² t²⁴ => 
//│ 		let t³¹ = take_lz_₁((n⁶ - 1), t²⁴)
//│ 		in let h²⁹ = h²²
//│ 		in (fun ys¹⁵ -> 
//│ 			let t³² = mappend_₁(t³¹, ys¹⁵)
//│ 			in let h³⁰ = h²⁹
//│ 			in (fun _lh_dummy⁰ -> mappend_₀(h³⁰, concat_₀(t³²))))
//│ 	| LH_N  => (fun ys¹⁶ -> ys¹⁶)} else (fun ys¹⁷ -> ys¹⁷)
//│ def testPiDigits_nofib_₀(_lh_testPiDigits_nofib_arg1²) = pidgits_₀(_lh_testPiDigits_nofib_arg1²)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ ~~~~~~~~~~~~~~~~~~~~~~~ NEXT ITERATION ~~~~~~~~~~~~~~~~~~~~~~~
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [testPiDigits_nofib_₀^1]
//│ 	[testPiDigits_nofib_₀^1 · pidgits_₀^165]
//│ 		[testPiDigits_nofib_₀^1 · pidgits_₀^165 · hashOp_₀^114] (hopeless to continue)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · hashOp_₀^114 · ampOp_₀^549] (using original def)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · hashOp_₀^114 · divmod_₀^555] (using original def)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · hashOp_₀^114 · divmod_₀^555 · hashOp_₀^293] ---> [testPiDigits_nofib_₀^1 · pidgits_₀^165 · hashOp_₀^114] (using original def)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · hashOp_₀^114 · divmod_₀^555 · hashOp_₀^305] ---> [testPiDigits_nofib_₀^1 · pidgits_₀^165 · hashOp_₀^114] (using original def)
//│ 		[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111]
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · concat_₀^438] (hopeless to continue)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · mappend_₁^413] (hopeless to continue)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · mappend_₂^436] (hopeless to continue)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · mappend_₂^453] (hopeless to continue)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · mappend_₂^473] (hopeless to continue)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · mappend_₂^495] (hopeless to continue)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · mappend_₃^437] (hopeless to continue)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · mappend_₄^442] (hopeless to continue)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · mappend_₄^446] (hopeless to continue)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · mappend_₄^466] (hopeless to continue)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · mappend_₅^486] (hopeless to continue)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · mappend_₅^486 · mappend_₂^352] (using original def)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · mappend_₅^486 · mappend_₅^345] ---> [testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · mappend_₅^486] (using original def)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · min_₀^400] (hopeless to continue)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · percOp_₀^508] ---> [testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111] (only one)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · replicate_₀^424] (hopeless to continue)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · replicate_₀^424 · concat_₀^603] (using original def)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · replicate_₀^424 · mappend_₀^600] (using original def)
//│ 					[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · replicate_₀^424 · mappend_₀^600 · mappend_₀^82] ---> [testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · replicate_₀^424 · mappend_₀^600] (using original def)
//│ 					[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · replicate_₀^424 · mappend_₀^600 · mappend_₂^95] (using original def)
//│ 					[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · replicate_₀^424 · mappend_₀^600 · mappend_₃^88] (using original def)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · replicate_₀^424 · replicate_₀^590] ---> [testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · replicate_₀^424] (using original def)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520]
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · concat_₀^181] (hopeless to continue)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · drop_lz_₀^169] (hopeless to continue)
//│ 					[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · drop_lz_₀^169 · drop_lz_₀^63] ---> [testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · drop_lz_₀^169] (using original def)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · mappend_₂^179] (hopeless to continue)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · mappend_₂^196] (hopeless to continue)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · mappend_₂^216] (hopeless to continue)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · mappend_₂^238] (hopeless to continue)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · mappend_₃^180] (hopeless to continue)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · mappend_₄^185] (hopeless to continue)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · mappend_₄^189] (hopeless to continue)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · mappend_₄^209] (hopeless to continue)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · mappend_₅^229] (hopeless to continue)
//│ 					[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · mappend_₅^229 · mappend_₂^352] (using original def)
//│ 					[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · mappend_₅^229 · mappend_₅^345] ---> [testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · mappend_₅^229] (using original def)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · percOp_₀^251] ---> [testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111] (only one)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · take_lz_₀^174] (hopeless to continue)
//│ 					[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · take_lz_₀^174 · concat_₀^637] (using original def)
//│ 					[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · take_lz_₀^174 · mappend_₀^634] (using original def)
//│ 						[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · take_lz_₀^174 · mappend_₀^634 · mappend_₀^82] ---> [testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · take_lz_₀^174 · mappend_₀^634] (using original def)
//│ 						[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · take_lz_₀^174 · mappend_₀^634 · mappend_₂^95] (using original def)
//│ 						[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · take_lz_₀^174 · mappend_₀^634 · mappend_₃^88] (using original def)
//│ 					[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · take_lz_₀^174 · take_lz_₀^624] ---> [testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · splitAt_lz_₀^520 · take_lz_₀^174] (using original def)
//│ 			[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · take_lz_₁^414] (hopeless to continue)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · take_lz_₁^414 · concat_₀^33] (using original def)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · take_lz_₁^414 · mappend_₀^30] (using original def)
//│ 					[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · take_lz_₁^414 · mappend_₀^30 · mappend_₀^82] ---> [testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · take_lz_₁^414 · mappend_₀^30] (using original def)
//│ 					[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · take_lz_₁^414 · mappend_₀^30 · mappend_₂^95] (using original def)
//│ 					[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · take_lz_₁^414 · mappend_₀^30 · mappend_₃^88] (using original def)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · take_lz_₁^414 · mappend_₁^24] (using original def)
//│ 				[testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · take_lz_₁^414 · take_lz_₁^14] ---> [testPiDigits_nofib_₀^1 · pidgits_₀^165 · percOp_₀^111 · take_lz_₁^414] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ testPiDigits_nofib_₀_₀(primId⁰(5000))
//│ def testPiDigits_nofib_₀_₀(_lh_testPiDigits_nofib_arg1¹) = 
//│ 	pidgits_₀_₀(_lh_testPiDigits_nofib_arg1¹)
//│ 	where
//│ 	def pidgits_₀_₀(_lh_pidgits_arg1¹) = 
//│ 		percOp_₀_₀(0, hashOp_₀_₀(0, [LH_P3 1 0 1]), _lh_pidgits_arg1¹)
//│ 		where
//│ 		def hashOp_₀_₀(_lh_hashOp_arg1¹, _lh_hashOp_arg2¹) = 
//│ 			lazy⁰(
//│ 				let k⁴ = (_lh_hashOp_arg1¹ + 1)
//│ 				in let _lh_matchIdent⁴ = ampOp_₀_₀(k⁴, _lh_hashOp_arg2¹)
//│ 				in case _lh_matchIdent⁴ of {
//│ 					LH_P3 _lh_hashOp_LH_P3_0³ _lh_hashOp_LH_P3_1³ _lh_hashOp_LH_P3_2³ => 
//│ 						let _lh_matchIdent⁵ = divmod_₀_₀(((_lh_hashOp_LH_P3_0³ * 3) + _lh_hashOp_LH_P3_1³), _lh_hashOp_LH_P3_2³)
//│ 						in _lh_matchIdent⁵(_lh_hashOp_LH_P3_0³, _lh_hashOp_LH_P3_1³, _lh_hashOp_LH_P3_2³, k⁴)
//│ 					| _  => error⁰})
//│ 			where
//│ 			def ampOp_₀_₀(_lh_ampOp_arg1¹, _lh_ampOp_arg2¹) = 
//│ 				case _lh_ampOp_arg2¹ of {
//│ 					LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => 
//│ 						let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ 						in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)]
//│ 					| _  => error⁰}
//│ 			def divmod_₀_₀(_lh_divmod_arg1¹, _lh_divmod_arg2¹) = 
//│ 				let _lh_hashOp_LH_P2_1¹ = (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)
//│ 				in let _lh_hashOp_LH_P2_0¹ = div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹)
//│ 				in (fun _lh_hashOp_LH_P3_0² -> (fun _lh_hashOp_LH_P3_1² -> (fun _lh_hashOp_LH_P3_2² -> (fun k³ -> if ((_lh_hashOp_LH_P3_0² > _lh_hashOp_LH_P3_1²) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0²) >= _lh_hashOp_LH_P3_2²)) then force⁰(hashOp_₀_₀(k³, [LH_P3 _lh_hashOp_LH_P3_0² _lh_hashOp_LH_P3_1² _lh_hashOp_LH_P3_2²])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0² * 10) ((_lh_hashOp_LH_P3_1² - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2²)) * 10) _lh_hashOp_LH_P3_2²])]))))
//│ 		def percOp_₀_₀(_lh_percOp_arg1¹, _lh_percOp_arg2¹, _lh_percOp_arg3⁴) = 
//│ 			if (_lh_percOp_arg1¹ >= _lh_percOp_arg3⁴) then [LH_N] else 
//│ 				let k⁵ = (_lh_percOp_arg1¹ + 10)
//│ 				in let j⁴ = min_₀_₀(_lh_percOp_arg3⁴, k⁵)
//│ 				in let _lh_matchIdent⁷ = if (k⁵ > _lh_percOp_arg3⁴) then 
//│ 					let _lh_percOp_LH_P2_1³ = lazy⁰([LH_N])
//│ 					in let _lh_percOp_LH_P2_0³ = mappend_₁_₀(take_lz_₁_₀((_lh_percOp_arg3⁴ % 10), _lh_percOp_arg2¹), replicate_₀_₀((k⁵ - _lh_percOp_arg3⁴), [LH_C ' ' [LH_N]]))
//│ 					in (fun _lh_percOp_arg3⁵ -> (fun j⁵ -> mappend_₂_₀(mappend_₃_₀(concat_₀_₀(_lh_percOp_LH_P2_0³), mappend_₄_₀(
//│ 						let t³² = 	
//│ 							let t³³ = (fun ys⁵⁸ -> ys⁵⁸)
//│ 							in let h³² = ':'
//│ 							in (fun ys⁵⁹ -> 
//│ 								let t³⁴ = mappend_₄_₁(t³³, ys⁵⁹)
//│ 								in let h³³ = h³²
//│ 								in (fun ys⁶⁰ -> [LH_C h³³ mappend_₂_₁(t³⁴, ys⁶⁰)]))
//│ 						in let h³⁴ = 't'
//│ 						in (fun ys⁶¹ -> 
//│ 							let t³⁵ = mappend_₄_₂(t³², ys⁶¹)
//│ 							in let h³⁵ = h³⁴
//│ 							in (fun ys⁶² -> [LH_C h³⁵ mappend_₂_₂(t³⁵, ys⁶²)])), mappend_₅_₀(string_of_int⁰(j⁵), 
//│ 						let t³⁶ = (fun ys⁶³ -> ys⁶³)
//│ 						in let h³⁶ = 'n'
//│ 						in (fun ys⁶⁴ -> [LH_C h³⁶ mappend_₂_₃(t³⁶, ys⁶⁴)])))), percOp_₀_₀(j⁵, _lh_percOp_LH_P2_1³, _lh_percOp_arg3⁵)))) else splitAt_lz_₀_₀(10, _lh_percOp_arg2¹)
//│ 				in _lh_matchIdent⁷(_lh_percOp_arg3⁴, j⁴)
//│ 			where
//│ 			def concat_₀_₀(lss⁵) = 
//│ 				lss⁵(99)
//│ 			def mappend_₁_₀(xs⁸, ys³¹) = 
//│ 				xs⁸(ys³¹)
//│ 			def mappend_₂_₀(xs²⁰, ys⁵¹) = 
//│ 				xs²⁰(ys⁵¹)
//│ 			def mappend_₂_₁(xs¹⁰, ys⁴¹) = 
//│ 				xs¹⁰(ys⁴¹)
//│ 			def mappend_₂_₂(xs³⁴, ys⁷⁹) = 
//│ 				xs³⁴(ys⁷⁹)
//│ 			def mappend_₂_₃(xs²⁶, ys⁷¹) = 
//│ 				xs²⁶(ys⁷¹)
//│ 			def mappend_₃_₀(xs²⁸, ys⁷³) = 
//│ 				xs²⁸(ys⁷³)
//│ 			def mappend_₄_₀(xs³⁰, ys⁷⁵) = 
//│ 				xs³⁰(ys⁷⁵)
//│ 			def mappend_₄_₁(xs³³, ys⁷⁸) = 
//│ 				xs³³(ys⁷⁸)
//│ 			def mappend_₄_₂(xs³², ys⁷⁷) = 
//│ 				xs³²(ys⁷⁷)
//│ 			def mappend_₅_₀(xs³⁵, ys⁸⁰) = 
//│ 				case xs³⁵ of {
//│ 					LH_C h⁴² t⁴² => 
//│ 						let t⁴³ = mappend_₅_₀(t⁴², ys⁸⁰)
//│ 						in let h⁴³ = h⁴²
//│ 						in (fun ys⁸¹ -> [LH_C h⁴³ mappend_₂_₄(t⁴³, ys⁸¹)])
//│ 					| LH_N  => ys⁸⁰}
//│ 				where
//│ 				def mappend_₂_₄(xs¹⁹, ys⁵⁰) = 
//│ 					xs¹⁹(ys⁵⁰)
//│ 			def min_₀_₀(_lh_min_arg1¹, _lh_min_arg2¹) = 
//│ 				if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ 			def replicate_₀_₀(_lh_replicate_arg1¹, _lh_replicate_arg2¹) = 
//│ 				if (_lh_replicate_arg1¹ > 0) then 
//│ 					let t²⁶ = replicate_₀_₀((_lh_replicate_arg1¹ - 1), _lh_replicate_arg2¹)
//│ 					in let h²⁶ = _lh_replicate_arg2¹
//│ 					in (fun _lh_dummy⁶ -> mappend_₀_₀(h²⁶, concat_₀_₁(t²⁶))) else (fun _lh_dummy⁷ -> (fun ys⁴⁰ -> ys⁴⁰))
//│ 				where
//│ 				def concat_₀_₁(lss²) = 
//│ 					lss²(99)
//│ 				def mappend_₀_₀(xs²¹, ys⁵⁴) = 
//│ 					case xs²¹ of {
//│ 						LH_C h²⁹ t²⁹ => 
//│ 							let t³⁰ = mappend_₀_₀(t²⁹, ys⁵⁴)
//│ 							in let h³⁰ = h²⁹
//│ 							in (fun ys⁵⁵ -> 
//│ 								let t³¹ = mappend_₃_₁(t³⁰, ys⁵⁵)
//│ 								in let h³¹ = h³⁰
//│ 								in (fun ys⁵⁶ -> [LH_C h³¹ mappend_₂_₅(t³¹, ys⁵⁶)]))
//│ 						| LH_N  => ys⁵⁴}
//│ 					where
//│ 					def mappend_₂_₅(xs²², ys⁵⁷) = 
//│ 						xs²²(ys⁵⁷)
//│ 					def mappend_₃_₁(xs¹², ys⁴³) = 
//│ 						xs¹²(ys⁴³)
//│ 			def splitAt_lz_₀_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) = 
//│ 				let _lh_percOp_LH_P2_1² = drop_lz_₀_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)
//│ 				in let _lh_percOp_LH_P2_0² = take_lz_₀_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)
//│ 				in (fun _lh_percOp_arg3³ -> (fun j³ -> mappend_₂_₆(mappend_₃_₂(concat_₀_₂(_lh_percOp_LH_P2_0²), mappend_₄_₃(
//│ 					let t²¹ = 	
//│ 						let t²² = (fun ys³³ -> ys³³)
//│ 						in let h²¹ = ':'
//│ 						in (fun ys³⁴ -> 
//│ 							let t²³ = mappend_₄_₄(t²², ys³⁴)
//│ 							in let h²² = h²¹
//│ 							in (fun ys³⁵ -> [LH_C h²² mappend_₂_₇(t²³, ys³⁵)]))
//│ 					in let h²³ = 't'
//│ 					in (fun ys³⁶ -> 
//│ 						let t²⁴ = mappend_₄_₅(t²¹, ys³⁶)
//│ 						in let h²⁴ = h²³
//│ 						in (fun ys³⁷ -> [LH_C h²⁴ mappend_₂_₈(t²⁴, ys³⁷)])), mappend_₅_₁(string_of_int⁰(j³), 
//│ 					let t²⁵ = (fun ys³⁸ -> ys³⁸)
//│ 					in let h²⁵ = 'n'
//│ 					in (fun ys³⁹ -> [LH_C h²⁵ mappend_₂_₉(t²⁵, ys³⁹)])))), percOp_₀_₀(j³, _lh_percOp_LH_P2_1², _lh_percOp_arg3³))))
//│ 				where
//│ 				def concat_₀_₂(lss¹) = 
//│ 					lss¹(99)
//│ 				def drop_lz_₀_₀(_lh_drop_lz_arg1¹, _lh_drop_lz_arg2¹) = 
//│ 					if (_lh_drop_lz_arg1¹ > 0) then lazy⁰(
//│ 						let _lh_matchIdent⁶ = force⁰(_lh_drop_lz_arg2¹)
//│ 						in case _lh_matchIdent⁶ of {
//│ 							LH_N  => [LH_N]
//│ 							| LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀_₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹))
//│ 							| _  => error⁰}) else _lh_drop_lz_arg2¹
//│ 				def mappend_₂_₆(xs¹⁶, ys⁴⁷) = 
//│ 					xs¹⁶(ys⁴⁷)
//│ 				def mappend_₂_₇(xs⁶, ys²⁹) = 
//│ 					xs⁶(ys²⁹)
//│ 				def mappend_₂_₈(xs¹⁷, ys⁴⁸) = 
//│ 					xs¹⁷(ys⁴⁸)
//│ 				def mappend_₂_₉(xs²⁹, ys⁷⁴) = 
//│ 					xs²⁹(ys⁷⁴)
//│ 				def mappend_₃_₂(xs¹⁴, ys⁴⁵) = 
//│ 					xs¹⁴(ys⁴⁵)
//│ 				def mappend_₄_₃(xs⁹, ys³²) = 
//│ 					xs⁹(ys³²)
//│ 				def mappend_₄_₄(xs¹¹, ys⁴²) = 
//│ 					xs¹¹(ys⁴²)
//│ 				def mappend_₄_₅(xs¹³, ys⁴⁴) = 
//│ 					xs¹³(ys⁴⁴)
//│ 				def mappend_₅_₁(xs²³, ys⁶⁵) = 
//│ 					case xs²³ of {
//│ 						LH_C h³⁷ t³⁷ => 
//│ 							let t³⁸ = mappend_₅_₁(t³⁷, ys⁶⁵)
//│ 							in let h³⁸ = h³⁷
//│ 							in (fun ys⁶⁶ -> [LH_C h³⁸ mappend_₂_₁₀(t³⁸, ys⁶⁶)])
//│ 						| LH_N  => ys⁶⁵}
//│ 					where
//│ 					def mappend_₂_₁₀(xs¹⁸, ys⁴⁹) = 
//│ 						xs¹⁸(ys⁴⁹)
//│ 				def take_lz_₀_₀(n², ls²) = 
//│ 					if (n² > 0) then case force⁰(ls²) of {
//│ 						LH_C h²⁷ t²⁷ => 
//│ 							let t²⁸ = take_lz_₀_₀((n² - 1), t²⁷)
//│ 							in let h²⁸ = h²⁷
//│ 							in (fun _lh_dummy⁸ -> mappend_₀_₁(h²⁸, concat_₀_₃(t²⁸)))
//│ 						| LH_N  => (fun _lh_dummy⁹ -> (fun ys⁵² -> ys⁵²))} else (fun _lh_dummy¹⁰ -> (fun ys⁵³ -> ys⁵³))
//│ 					where
//│ 					def concat_₀_₃(lss³) = 
//│ 						lss³(99)
//│ 					def mappend_₀_₁(xs³⁶, ys⁸⁵) = 
//│ 						case xs³⁶ of {
//│ 							LH_C h⁴⁷ t⁴⁷ => 
//│ 								let t⁴⁸ = mappend_₀_₁(t⁴⁷, ys⁸⁵)
//│ 								in let h⁴⁸ = h⁴⁷
//│ 								in (fun ys⁸⁶ -> 
//│ 									let t⁴⁹ = mappend_₃_₃(t⁴⁸, ys⁸⁶)
//│ 									in let h⁴⁹ = h⁴⁸
//│ 									in (fun ys⁸⁷ -> [LH_C h⁴⁹ mappend_₂_₁₁(t⁴⁹, ys⁸⁷)]))
//│ 							| LH_N  => ys⁸⁵}
//│ 						where
//│ 						def mappend_₂_₁₁(xs¹⁵, ys⁴⁶) = 
//│ 							xs¹⁵(ys⁴⁶)
//│ 						def mappend_₃_₃(xs³¹, ys⁷⁶) = 
//│ 							xs³¹(ys⁷⁶)
//│ 			def take_lz_₁_₀(n³, ls³) = 
//│ 				if (n³ > 0) then case force⁰(ls³) of {
//│ 					LH_C h⁴⁴ t⁴⁴ => 
//│ 						let t⁴⁵ = take_lz_₁_₀((n³ - 1), t⁴⁴)
//│ 						in let h⁴⁵ = h⁴⁴
//│ 						in (fun ys⁸² -> 
//│ 							let t⁴⁶ = mappend_₁_₁(t⁴⁵, ys⁸²)
//│ 							in let h⁴⁶ = h⁴⁵
//│ 							in (fun _lh_dummy¹¹ -> mappend_₀_₂(h⁴⁶, concat_₀_₄(t⁴⁶))))
//│ 					| LH_N  => (fun ys⁸³ -> ys⁸³)} else (fun ys⁸⁴ -> ys⁸⁴)
//│ 				where
//│ 				def concat_₀_₄(lss⁴) = 
//│ 					lss⁴(99)
//│ 				def mappend_₀_₂(xs²⁵, ys⁶⁸) = 
//│ 					case xs²⁵ of {
//│ 						LH_C h³⁹ t³⁹ => 
//│ 							let t⁴⁰ = mappend_₀_₂(t³⁹, ys⁶⁸)
//│ 							in let h⁴⁰ = h³⁹
//│ 							in (fun ys⁶⁹ -> 
//│ 								let t⁴¹ = mappend_₃_₄(t⁴⁰, ys⁶⁹)
//│ 								in let h⁴¹ = h⁴⁰
//│ 								in (fun ys⁷⁰ -> [LH_C h⁴¹ mappend_₂_₁₂(t⁴¹, ys⁷⁰)]))
//│ 						| LH_N  => ys⁶⁸}
//│ 					where
//│ 					def mappend_₂_₁₂(xs²⁷, ys⁷²) = 
//│ 						xs²⁷(ys⁷²)
//│ 					def mappend_₃_₄(xs²⁴, ys⁶⁷) = 
//│ 						xs²⁴(ys⁶⁷)
//│ 				def mappend_₁_₁(xs⁷, ys³⁰) = 
//│ 					xs⁷(ys³⁰)
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_P3 _lh_hashOp_LH_P3_0² _lh_hashOp_LH_P3_1² _lh_hashOp_LH_P3_2²]: 858 --->
//│ 	case _lh_ampOp_arg2¹ of {LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)] | _  => error⁰}: 1044
//│ [LH_P3 (_lh_hashOp_LH_P3_0² * 10) ((_lh_hashOp_LH_P3_1² - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2²)) * 10) _lh_hashOp_LH_P3_2²]: 886 --->
//│ 	case _lh_ampOp_arg2¹ of {LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)] | _  => error⁰}: 1044
//│ [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0² * 10) ((_lh_hashOp_LH_P3_1² - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2²)) * 10) _lh_hashOp_LH_P3_2²])]: 888 --->
//│ 	case _lh_matchIdent⁶ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀_₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹)) | _  => error⁰}: 991
//│ 	case force⁰(ls²) of {LH_C h²⁷ t²⁷ => let t²⁸ = take_lz_₀_₀((n² - 1), t²⁷)
//│ in let h²⁸ = h²⁷
//│ in (fun _lh_dummy⁸ -> mappend_₀_₁(h²⁸, concat_₀_₃(t²⁸))) | LH_N  => (fun _lh_dummy⁹ -> (fun ys⁵² -> ys⁵²))}: 1088
//│ 	case force⁰(ls³) of {LH_C h⁴⁴ t⁴⁴ => let t⁴⁵ = take_lz_₁_₀((n³ - 1), t⁴⁴)
//│ in let h⁴⁵ = h⁴⁴
//│ in (fun ys⁸² -> let t⁴⁶ = mappend_₁_₁(t⁴⁵, ys⁸²)
//│ in let h⁴⁶ = h⁴⁵
//│ in (fun _lh_dummy¹¹ -> mappend_₀_₂(h⁴⁶, concat_₀_₄(t⁴⁶)))) | LH_N  => (fun ys⁸³ -> ys⁸³)}: 1454
//│ [LH_N]: 978 --->
//│ 	case _lh_matchIdent⁶ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀_₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹)) | _  => error⁰}: 991
//│ 	case force⁰(ls²) of {LH_C h²⁷ t²⁷ => let t²⁸ = take_lz_₀_₀((n² - 1), t²⁷)
//│ in let h²⁸ = h²⁷
//│ in (fun _lh_dummy⁸ -> mappend_₀_₁(h²⁸, concat_₀_₃(t²⁸))) | LH_N  => (fun _lh_dummy⁹ -> (fun ys⁵² -> ys⁵²))}: 1088
//│ 	case force⁰(ls³) of {LH_C h⁴⁴ t⁴⁴ => let t⁴⁵ = take_lz_₁_₀((n³ - 1), t⁴⁴)
//│ in let h⁴⁵ = h⁴⁴
//│ in (fun ys⁸² -> let t⁴⁶ = mappend_₁_₁(t⁴⁵, ys⁸²)
//│ in let h⁴⁶ = h⁴⁵
//│ in (fun _lh_dummy¹¹ -> mappend_₀_₂(h⁴⁶, concat_₀_₄(t⁴⁶)))) | LH_N  => (fun ys⁸³ -> ys⁸³)}: 1454
//│ [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)]: 1041 --->
//│ 	case _lh_matchIdent⁴ of {LH_P3 _lh_hashOp_LH_P3_0³ _lh_hashOp_LH_P3_1³ _lh_hashOp_LH_P3_2³ => let _lh_matchIdent⁵ = divmod_₀_₀(((_lh_hashOp_LH_P3_0³ * 3) + _lh_hashOp_LH_P3_1³), _lh_hashOp_LH_P3_2³)
//│ in _lh_matchIdent⁵(_lh_hashOp_LH_P3_0³, _lh_hashOp_LH_P3_1³, _lh_hashOp_LH_P3_2³, k⁴) | _  => error⁰}: 953
//│ [LH_N]: 1162 --->
//│ 	case _lh_matchIdent⁶ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀_₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹)) | _  => error⁰}: 991
//│ 	case force⁰(ls²) of {LH_C h²⁷ t²⁷ => let t²⁸ = take_lz_₀_₀((n² - 1), t²⁷)
//│ in let h²⁸ = h²⁷
//│ in (fun _lh_dummy⁸ -> mappend_₀_₁(h²⁸, concat_₀_₃(t²⁸))) | LH_N  => (fun _lh_dummy⁹ -> (fun ys⁵² -> ys⁵²))}: 1088
//│ 	case force⁰(ls³) of {LH_C h⁴⁴ t⁴⁴ => let t⁴⁵ = take_lz_₁_₀((n³ - 1), t⁴⁴)
//│ in let h⁴⁵ = h⁴⁴
//│ in (fun ys⁸² -> let t⁴⁶ = mappend_₁_₁(t⁴⁵, ys⁸²)
//│ in let h⁴⁶ = h⁴⁵
//│ in (fun _lh_dummy¹¹ -> mappend_₀_₂(h⁴⁶, concat_₀_₄(t⁴⁶)))) | LH_N  => (fun ys⁸³ -> ys⁸³)}: 1454
//│ [LH_N]: 1183 --->
//│ 	case xs²¹ of {LH_C h²⁹ t²⁹ => let t³⁰ = mappend_₀_₀(t²⁹, ys⁵⁴)
//│ in let h³⁰ = h²⁹
//│ in (fun ys⁵⁵ -> let t³¹ = mappend_₃_₁(t³⁰, ys⁵⁵)
//│ in let h³¹ = h³⁰
//│ in (fun ys⁵⁶ -> [LH_C h³¹ mappend_₂_₅(t³¹, ys⁵⁶)])) | LH_N  => ys⁵⁴}: 1122
//│ [LH_C ' ' [LH_N]]: 1184 --->
//│ 	case xs²¹ of {LH_C h²⁹ t²⁹ => let t³⁰ = mappend_₀_₀(t²⁹, ys⁵⁴)
//│ in let h³⁰ = h²⁹
//│ in (fun ys⁵⁵ -> let t³¹ = mappend_₃_₁(t³⁰, ys⁵⁵)
//│ in let h³¹ = h³⁰
//│ in (fun ys⁵⁶ -> [LH_C h³¹ mappend_₂_₅(t³¹, ys⁵⁶)])) | LH_N  => ys⁵⁴}: 1122
//│ [LH_P3 1 0 1]: 1469 --->
//│ 	case _lh_ampOp_arg2¹ of {LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)] | _  => error⁰}: 1044
//│ ------------------
//│ case _lh_matchIdent⁴ of {LH_P3 _lh_hashOp_LH_P3_0³ _lh_hashOp_LH_P3_1³ _lh_hashOp_LH_P3_2³ => let _lh_matchIdent⁵ = divmod_₀_₀(((_lh_hashOp_LH_P3_0³ * 3) + _lh_hashOp_LH_P3_1³), _lh_hashOp_LH_P3_2³)
//│ in _lh_matchIdent⁵(_lh_hashOp_LH_P3_0³, _lh_hashOp_LH_P3_1³, _lh_hashOp_LH_P3_2³, k⁴) | _  => error⁰}: 953 --->
//│ 	[LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)]: 1041
//│ case _lh_matchIdent⁶ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀_₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹)) | _  => error⁰}: 991 --->
//│ 	[LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0² * 10) ((_lh_hashOp_LH_P3_1² - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2²)) * 10) _lh_hashOp_LH_P3_2²])]: 888
//│ 	[LH_N]: 978
//│ 	[LH_N]: 1162
//│ case _lh_ampOp_arg2¹ of {LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)] | _  => error⁰}: 1044 --->
//│ 	[LH_P3 _lh_hashOp_LH_P3_0² _lh_hashOp_LH_P3_1² _lh_hashOp_LH_P3_2²]: 858
//│ 	[LH_P3 (_lh_hashOp_LH_P3_0² * 10) ((_lh_hashOp_LH_P3_1² - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2²)) * 10) _lh_hashOp_LH_P3_2²]: 886
//│ 	[LH_P3 1 0 1]: 1469
//│ case force⁰(ls²) of {LH_C h²⁷ t²⁷ => let t²⁸ = take_lz_₀_₀((n² - 1), t²⁷)
//│ in let h²⁸ = h²⁷
//│ in (fun _lh_dummy⁸ -> mappend_₀_₁(h²⁸, concat_₀_₃(t²⁸))) | LH_N  => (fun _lh_dummy⁹ -> (fun ys⁵² -> ys⁵²))}: 1088 --->
//│ 	[LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0² * 10) ((_lh_hashOp_LH_P3_1² - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2²)) * 10) _lh_hashOp_LH_P3_2²])]: 888
//│ 	[LH_N]: 978
//│ 	[LH_N]: 1162
//│ case xs²¹ of {LH_C h²⁹ t²⁹ => let t³⁰ = mappend_₀_₀(t²⁹, ys⁵⁴)
//│ in let h³⁰ = h²⁹
//│ in (fun ys⁵⁵ -> let t³¹ = mappend_₃_₁(t³⁰, ys⁵⁵)
//│ in let h³¹ = h³⁰
//│ in (fun ys⁵⁶ -> [LH_C h³¹ mappend_₂_₅(t³¹, ys⁵⁶)])) | LH_N  => ys⁵⁴}: 1122 --->
//│ 	[LH_N]: 1183
//│ 	[LH_C ' ' [LH_N]]: 1184
//│ case force⁰(ls³) of {LH_C h⁴⁴ t⁴⁴ => let t⁴⁵ = take_lz_₁_₀((n³ - 1), t⁴⁴)
//│ in let h⁴⁵ = h⁴⁴
//│ in (fun ys⁸² -> let t⁴⁶ = mappend_₁_₁(t⁴⁵, ys⁸²)
//│ in let h⁴⁶ = h⁴⁵
//│ in (fun _lh_dummy¹¹ -> mappend_₀_₂(h⁴⁶, concat_₀_₄(t⁴⁶)))) | LH_N  => (fun ys⁸³ -> ys⁸³)}: 1454 --->
//│ 	[LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0² * 10) ((_lh_hashOp_LH_P3_1² - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2²)) * 10) _lh_hashOp_LH_P3_2²])]: 888
//│ 	[LH_N]: 978
//│ 	[LH_N]: 1162
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_P3 _lh_hashOp_LH_P3_0² _lh_hashOp_LH_P3_1² _lh_hashOp_LH_P3_2²]: 858 --->
//│ 	case _lh_ampOp_arg2¹ of {LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)] | _  => error⁰}: 1044
//│ [LH_P3 (_lh_hashOp_LH_P3_0² * 10) ((_lh_hashOp_LH_P3_1² - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2²)) * 10) _lh_hashOp_LH_P3_2²]: 886 --->
//│ 	case _lh_ampOp_arg2¹ of {LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)] | _  => error⁰}: 1044
//│ [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)]: 1041 --->
//│ 	case _lh_matchIdent⁴ of {LH_P3 _lh_hashOp_LH_P3_0³ _lh_hashOp_LH_P3_1³ _lh_hashOp_LH_P3_2³ => let _lh_matchIdent⁵ = divmod_₀_₀(((_lh_hashOp_LH_P3_0³ * 3) + _lh_hashOp_LH_P3_1³), _lh_hashOp_LH_P3_2³)
//│ in _lh_matchIdent⁵(_lh_hashOp_LH_P3_0³, _lh_hashOp_LH_P3_1³, _lh_hashOp_LH_P3_2³, k⁴) | _  => error⁰}: 953
//│ [LH_N]: 1183 --->
//│ 	case xs²¹ of {LH_C h²⁹ t²⁹ => let t³⁰ = mappend_₀_₀(t²⁹, ys⁵⁴)
//│ in let h³⁰ = h²⁹
//│ in (fun ys⁵⁵ -> let t³¹ = mappend_₃_₁(t³⁰, ys⁵⁵)
//│ in let h³¹ = h³⁰
//│ in (fun ys⁵⁶ -> [LH_C h³¹ mappend_₂_₅(t³¹, ys⁵⁶)])) | LH_N  => ys⁵⁴}: 1122
//│ [LH_C ' ' [LH_N]]: 1184 --->
//│ 	case xs²¹ of {LH_C h²⁹ t²⁹ => let t³⁰ = mappend_₀_₀(t²⁹, ys⁵⁴)
//│ in let h³⁰ = h²⁹
//│ in (fun ys⁵⁵ -> let t³¹ = mappend_₃_₁(t³⁰, ys⁵⁵)
//│ in let h³¹ = h³⁰
//│ in (fun ys⁵⁶ -> [LH_C h³¹ mappend_₂_₅(t³¹, ys⁵⁶)])) | LH_N  => ys⁵⁴}: 1122
//│ [LH_P3 1 0 1]: 1469 --->
//│ 	case _lh_ampOp_arg2¹ of {LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)] | _  => error⁰}: 1044
//│ ------------------
//│ case _lh_matchIdent⁴ of {LH_P3 _lh_hashOp_LH_P3_0³ _lh_hashOp_LH_P3_1³ _lh_hashOp_LH_P3_2³ => let _lh_matchIdent⁵ = divmod_₀_₀(((_lh_hashOp_LH_P3_0³ * 3) + _lh_hashOp_LH_P3_1³), _lh_hashOp_LH_P3_2³)
//│ in _lh_matchIdent⁵(_lh_hashOp_LH_P3_0³, _lh_hashOp_LH_P3_1³, _lh_hashOp_LH_P3_2³, k⁴) | _  => error⁰}: 953 --->
//│ 	[LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)]: 1041
//│ case _lh_ampOp_arg2¹ of {LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)] | _  => error⁰}: 1044 --->
//│ 	[LH_P3 _lh_hashOp_LH_P3_0² _lh_hashOp_LH_P3_1² _lh_hashOp_LH_P3_2²]: 858
//│ 	[LH_P3 (_lh_hashOp_LH_P3_0² * 10) ((_lh_hashOp_LH_P3_1² - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2²)) * 10) _lh_hashOp_LH_P3_2²]: 886
//│ 	[LH_P3 1 0 1]: 1469
//│ case xs²¹ of {LH_C h²⁹ t²⁹ => let t³⁰ = mappend_₀_₀(t²⁹, ys⁵⁴)
//│ in let h³⁰ = h²⁹
//│ in (fun ys⁵⁵ -> let t³¹ = mappend_₃_₁(t³⁰, ys⁵⁵)
//│ in let h³¹ = h³⁰
//│ in (fun ys⁵⁶ -> [LH_C h³¹ mappend_₂_₅(t³¹, ys⁵⁶)])) | LH_N  => ys⁵⁴}: 1122 --->
//│ 	[LH_N]: 1183
//│ 	[LH_C ' ' [LH_N]]: 1184
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testPiDigits_nofib_₀_₀(primId⁰(5000))
//│ def testPiDigits_nofib_₀_₀(_lh_testPiDigits_nofib_arg1²) = 
//│ 	pidgits_₀_₀(_lh_testPiDigits_nofib_arg1²)
//│ 	where
//│ 	def pidgits_₀_₀(_lh_pidgits_arg1²) = 
//│ 		percOp_₀_₀(0, hashOp_₀_₀(0, 
//│ 			let _lh_ampOp_LH_P3_2⁴ = 1
//│ 			in let _lh_ampOp_LH_P3_1⁴ = 0
//│ 			in let _lh_ampOp_LH_P3_0⁴ = 1
//│ 			in (fun _lh_ampOp_arg1⁴ -> 
//│ 				let y⁴ = ((_lh_ampOp_arg1⁴ * 2) + 1)
//│ 				in let _lh_hashOp_LH_P3_2⁷ = (_lh_ampOp_LH_P3_2⁴ * y⁴)
//│ 				in let _lh_hashOp_LH_P3_1⁷ = ((_lh_ampOp_LH_P3_1⁴ + (_lh_ampOp_LH_P3_0⁴ * 2)) * y⁴)
//│ 				in let _lh_hashOp_LH_P3_0⁷ = (_lh_ampOp_LH_P3_0⁴ * _lh_ampOp_arg1⁴)
//│ 				in (fun k⁹ -> 
//│ 					let _lh_matchIdent¹⁰ = divmod_₀_₀(((_lh_hashOp_LH_P3_0⁷ * 3) + _lh_hashOp_LH_P3_1⁷), _lh_hashOp_LH_P3_2⁷)
//│ 					in _lh_matchIdent¹⁰(_lh_hashOp_LH_P3_0⁷, _lh_hashOp_LH_P3_1⁷, _lh_hashOp_LH_P3_2⁷, k⁹)))), _lh_pidgits_arg1²)
//│ 		where
//│ 		def hashOp_₀_₀(_lh_hashOp_arg1², _lh_hashOp_arg2²) = 
//│ 			lazy⁰(
//│ 				let k¹¹ = (_lh_hashOp_arg1² + 1)
//│ 				in let _lh_matchIdent¹³ = ampOp_₀_₀(k¹¹, _lh_hashOp_arg2²)
//│ 				in _lh_matchIdent¹³(k¹¹))
//│ 			where
//│ 			def ampOp_₀_₀(_lh_ampOp_arg1⁵, _lh_ampOp_arg2²) = 
//│ 				_lh_ampOp_arg2²(_lh_ampOp_arg1⁵)
//│ 			def divmod_₀_₀(_lh_divmod_arg1², _lh_divmod_arg2²) = 
//│ 				let _lh_hashOp_LH_P2_1² = (_lh_divmod_arg1² % _lh_divmod_arg2²)
//│ 				in let _lh_hashOp_LH_P2_0² = div⁰(_lh_divmod_arg1², _lh_divmod_arg2²)
//│ 				in (fun _lh_hashOp_LH_P3_0⁴ -> (fun _lh_hashOp_LH_P3_1⁴ -> (fun _lh_hashOp_LH_P3_2⁴ -> (fun k⁶ -> if ((_lh_hashOp_LH_P3_0⁴ > _lh_hashOp_LH_P3_1⁴) || ((_lh_hashOp_LH_P2_1² + _lh_hashOp_LH_P3_0⁴) >= _lh_hashOp_LH_P3_2⁴)) then force⁰(hashOp_₀_₀(k⁶, 
//│ 					let _lh_ampOp_LH_P3_2² = _lh_hashOp_LH_P3_2⁴
//│ 					in let _lh_ampOp_LH_P3_1² = _lh_hashOp_LH_P3_1⁴
//│ 					in let _lh_ampOp_LH_P3_0² = _lh_hashOp_LH_P3_0⁴
//│ 					in (fun _lh_ampOp_arg1² -> 
//│ 						let y² = ((_lh_ampOp_arg1² * 2) + 1)
//│ 						in let _lh_hashOp_LH_P3_2⁵ = (_lh_ampOp_LH_P3_2² * y²)
//│ 						in let _lh_hashOp_LH_P3_1⁵ = ((_lh_ampOp_LH_P3_1² + (_lh_ampOp_LH_P3_0² * 2)) * y²)
//│ 						in let _lh_hashOp_LH_P3_0⁵ = (_lh_ampOp_LH_P3_0² * _lh_ampOp_arg1²)
//│ 						in (fun k⁷ -> 
//│ 							let _lh_matchIdent⁸ = divmod_₀_₀(((_lh_hashOp_LH_P3_0⁵ * 3) + _lh_hashOp_LH_P3_1⁵), _lh_hashOp_LH_P3_2⁵)
//│ 							in _lh_matchIdent⁸(_lh_hashOp_LH_P3_0⁵, _lh_hashOp_LH_P3_1⁵, _lh_hashOp_LH_P3_2⁵, k⁷))))) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0²) hashOp_₀_₀(k⁶, 
//│ 					let _lh_ampOp_LH_P3_2³ = _lh_hashOp_LH_P3_2⁴
//│ 					in let _lh_ampOp_LH_P3_1³ = ((_lh_hashOp_LH_P3_1⁴ - (_lh_hashOp_LH_P2_0² * _lh_hashOp_LH_P3_2⁴)) * 10)
//│ 					in let _lh_ampOp_LH_P3_0³ = (_lh_hashOp_LH_P3_0⁴ * 10)
//│ 					in (fun _lh_ampOp_arg1³ -> 
//│ 						let y³ = ((_lh_ampOp_arg1³ * 2) + 1)
//│ 						in let _lh_hashOp_LH_P3_2⁶ = (_lh_ampOp_LH_P3_2³ * y³)
//│ 						in let _lh_hashOp_LH_P3_1⁶ = ((_lh_ampOp_LH_P3_1³ + (_lh_ampOp_LH_P3_0³ * 2)) * y³)
//│ 						in let _lh_hashOp_LH_P3_0⁶ = (_lh_ampOp_LH_P3_0³ * _lh_ampOp_arg1³)
//│ 						in (fun k⁸ -> 
//│ 							let _lh_matchIdent⁹ = divmod_₀_₀(((_lh_hashOp_LH_P3_0⁶ * 3) + _lh_hashOp_LH_P3_1⁶), _lh_hashOp_LH_P3_2⁶)
//│ 							in _lh_matchIdent⁹(_lh_hashOp_LH_P3_0⁶, _lh_hashOp_LH_P3_1⁶, _lh_hashOp_LH_P3_2⁶, k⁸))))]))))
//│ 		def percOp_₀_₀(_lh_percOp_arg1², _lh_percOp_arg2², _lh_percOp_arg3⁷) = 
//│ 			if (_lh_percOp_arg1² >= _lh_percOp_arg3⁷) then [LH_N] else 
//│ 				let k¹⁰ = (_lh_percOp_arg1² + 10)
//│ 				in let j⁷ = min_₀_₀(_lh_percOp_arg3⁷, k¹⁰)
//│ 				in let _lh_matchIdent¹¹ = if (k¹⁰ > _lh_percOp_arg3⁷) then 
//│ 					let _lh_percOp_LH_P2_1⁵ = lazy⁰([LH_N])
//│ 					in let _lh_percOp_LH_P2_0⁵ = mappend_₁_₀(take_lz_₁_₀((_lh_percOp_arg3⁷ % 10), _lh_percOp_arg2²), replicate_₀_₀((k¹⁰ - _lh_percOp_arg3⁷), 
//│ 						let t⁵⁸ = (fun ys¹¹⁴ -> ys¹¹⁴)
//│ 						in let h⁵⁸ = ' '
//│ 						in (fun ys¹¹¹ -> 
//│ 							let t⁵⁹ = mappend_₀_₀(t⁵⁸, ys¹¹¹)
//│ 							in let h⁵⁹ = h⁵⁸
//│ 							in (fun ys¹¹² -> 
//│ 								let t⁶⁰ = mappend_₃_₁(t⁵⁹, ys¹¹²)
//│ 								in let h⁶⁰ = h⁵⁹
//│ 								in (fun ys¹¹³ -> [LH_C h⁶⁰ mappend_₂_₅(t⁶⁰, ys¹¹³)])))))
//│ 					in (fun _lh_percOp_arg3⁸ -> (fun j⁸ -> mappend_₂_₀(mappend_₃_₀(concat_₀_₀(_lh_percOp_LH_P2_0⁵), mappend_₄_₀(
//│ 						let t⁶¹ = 	
//│ 							let t⁶² = (fun ys¹¹⁵ -> ys¹¹⁵)
//│ 							in let h⁶¹ = ':'
//│ 							in (fun ys¹¹⁶ -> 
//│ 								let t⁶³ = mappend_₄_₁(t⁶², ys¹¹⁶)
//│ 								in let h⁶² = h⁶¹
//│ 								in (fun ys¹¹⁷ -> [LH_C h⁶² mappend_₂_₁(t⁶³, ys¹¹⁷)]))
//│ 						in let h⁶³ = 't'
//│ 						in (fun ys¹¹⁸ -> 
//│ 							let t⁶⁴ = mappend_₄_₂(t⁶¹, ys¹¹⁸)
//│ 							in let h⁶⁴ = h⁶³
//│ 							in (fun ys¹¹⁹ -> [LH_C h⁶⁴ mappend_₂_₂(t⁶⁴, ys¹¹⁹)])), mappend_₅_₀(string_of_int⁰(j⁸), 
//│ 						let t⁶⁵ = (fun ys¹²⁰ -> ys¹²⁰)
//│ 						in let h⁶⁵ = 'n'
//│ 						in (fun ys¹²¹ -> [LH_C h⁶⁵ mappend_₂_₃(t⁶⁵, ys¹²¹)])))), percOp_₀_₀(j⁸, _lh_percOp_LH_P2_1⁵, _lh_percOp_arg3⁸)))) else splitAt_lz_₀_₀(10, _lh_percOp_arg2²)
//│ 				in _lh_matchIdent¹¹(_lh_percOp_arg3⁷, j⁷)
//│ 			where
//│ 			def concat_₀_₀(lss⁸) = 
//│ 				lss⁸(99)
//│ 			def mappend_₁_₀(xs⁶², ys¹³⁹) = 
//│ 				xs⁶²(ys¹³⁹)
//│ 			def mappend_₂_₀(xs⁵⁷, ys¹³³) = 
//│ 				xs⁵⁷(ys¹³³)
//│ 			def mappend_₂_₁(xs⁵⁵, ys¹³¹) = 
//│ 				xs⁵⁵(ys¹³¹)
//│ 			def mappend_₂_₂(xs⁴⁹, ys¹²²) = 
//│ 				xs⁴⁹(ys¹²²)
//│ 			def mappend_₂_₃(xs⁵⁹, ys¹³⁵) = 
//│ 				xs⁵⁹(ys¹³⁵)
//│ 			def mappend_₃_₀(xs⁴⁷, ys¹⁰²) = 
//│ 				xs⁴⁷(ys¹⁰²)
//│ 			def mappend_₄_₀(xs³⁷, ys⁹¹) = 
//│ 				xs³⁷(ys⁹¹)
//│ 			def mappend_₄_₁(xs⁴⁰, ys⁹⁵) = 
//│ 				xs⁴⁰(ys⁹⁵)
//│ 			def mappend_₄_₂(xs⁵², ys¹²⁸) = 
//│ 				xs⁵²(ys¹²⁸)
//│ 			def mappend_₅_₀(xs³⁸, ys⁹²) = 
//│ 				case xs³⁸ of {
//│ 					LH_C h⁴² t⁴² => 
//│ 						let t⁵² = mappend_₅_₀(t⁴², ys⁹²)
//│ 						in let h⁵² = h⁴²
//│ 						in (fun ys⁹³ -> [LH_C h⁵² mappend_₂_₄(t⁵², ys⁹³)])
//│ 					| LH_N  => ys⁹²}
//│ 				where
//│ 				def mappend_₂_₄(xs⁴³, ys⁹⁸) = 
//│ 					xs⁴³(ys⁹⁸)
//│ 			def min_₀_₀(_lh_min_arg1², _lh_min_arg2²) = 
//│ 				if (_lh_min_arg1² > _lh_min_arg2²) then _lh_min_arg2² else _lh_min_arg1²
//│ 			def replicate_₀_₀(_lh_replicate_arg1², _lh_replicate_arg2²) = 
//│ 				if (_lh_replicate_arg1² > 0) then 
//│ 					let t⁵¹ = replicate_₀_₀((_lh_replicate_arg1² - 1), _lh_replicate_arg2²)
//│ 					in let h⁵¹ = _lh_replicate_arg2²
//│ 					in (fun _lh_dummy¹⁵ -> mappend_₀_₀(h⁵¹, concat_₀_₁(t⁵¹))) else (fun _lh_dummy¹⁶ -> (fun ys⁹⁰ -> ys⁹⁰))
//│ 				where
//│ 				def concat_₀_₁(lss⁷) = 
//│ 					lss⁷(99)
//│ 				def mappend_₀_₀(xs⁵⁰, ys¹²³) = 
//│ 					xs⁵⁰(ys¹²³)
//│ 					where
//│ 					def mappend_₂_₅(xs⁶¹, ys¹³⁸) = 
//│ 						xs⁶¹(ys¹³⁸)
//│ 					def mappend_₃_₁(xs³⁹, ys⁹⁴) = 
//│ 						xs³⁹(ys⁹⁴)
//│ 			def splitAt_lz_₀_₀(_lh_splitAt_lz_arg1², _lh_splitAt_lz_arg2²) = 
//│ 				let _lh_percOp_LH_P2_1⁴ = drop_lz_₀_₀(_lh_splitAt_lz_arg1², _lh_splitAt_lz_arg2²)
//│ 				in let _lh_percOp_LH_P2_0⁴ = take_lz_₀_₀(_lh_splitAt_lz_arg1², _lh_splitAt_lz_arg2²)
//│ 				in (fun _lh_percOp_arg3⁶ -> (fun j⁶ -> mappend_₂_₆(mappend_₃_₂(concat_₀_₂(_lh_percOp_LH_P2_0⁴), mappend_₄_₃(
//│ 					let t⁵³ = 	
//│ 						let t⁵⁴ = (fun ys¹⁰⁴ -> ys¹⁰⁴)
//│ 						in let h⁵³ = ':'
//│ 						in (fun ys¹⁰⁵ -> 
//│ 							let t⁵⁵ = mappend_₄_₄(t⁵⁴, ys¹⁰⁵)
//│ 							in let h⁵⁴ = h⁵³
//│ 							in (fun ys¹⁰⁶ -> [LH_C h⁵⁴ mappend_₂_₇(t⁵⁵, ys¹⁰⁶)]))
//│ 					in let h⁵⁵ = 't'
//│ 					in (fun ys¹⁰⁷ -> 
//│ 						let t⁵⁶ = mappend_₄_₅(t⁵³, ys¹⁰⁷)
//│ 						in let h⁵⁶ = h⁵⁵
//│ 						in (fun ys¹⁰⁸ -> [LH_C h⁵⁶ mappend_₂_₈(t⁵⁶, ys¹⁰⁸)])), mappend_₅_₁(string_of_int⁰(j⁶), 
//│ 					let t⁵⁷ = (fun ys¹⁰⁹ -> ys¹⁰⁹)
//│ 					in let h⁵⁷ = 'n'
//│ 					in (fun ys¹¹⁰ -> [LH_C h⁵⁷ mappend_₂_₉(t⁵⁷, ys¹¹⁰)])))), percOp_₀_₀(j⁶, _lh_percOp_LH_P2_1⁴, _lh_percOp_arg3⁶))))
//│ 				where
//│ 				def concat_₀_₂(lss⁶) = 
//│ 					lss⁶(99)
//│ 				def drop_lz_₀_₀(_lh_drop_lz_arg1², _lh_drop_lz_arg2²) = 
//│ 					if (_lh_drop_lz_arg1² > 0) then lazy⁰(
//│ 						let _lh_matchIdent¹² = force⁰(_lh_drop_lz_arg2²)
//│ 						in case _lh_matchIdent¹² of {
//│ 							LH_N  => [LH_N]
//│ 							| LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀_₀((_lh_drop_lz_arg1² - 1), _lh_drop_lz_LH_C_1¹))
//│ 							| _  => error⁰}) else _lh_drop_lz_arg2²
//│ 				def mappend_₂_₆(xs⁴², ys⁹⁷) = 
//│ 					xs⁴²(ys⁹⁷)
//│ 				def mappend_₂_₇(xs⁴¹, ys⁹⁶) = 
//│ 					xs⁴¹(ys⁹⁶)
//│ 				def mappend_₂_₈(xs⁴⁴, ys⁹⁹) = 
//│ 					xs⁴⁴(ys⁹⁹)
//│ 				def mappend_₂_₉(xs⁵⁶, ys¹³²) = 
//│ 					xs⁵⁶(ys¹³²)
//│ 				def mappend_₃_₂(xs⁵⁴, ys¹³⁰) = 
//│ 					xs⁵⁴(ys¹³⁰)
//│ 				def mappend_₄_₃(xs⁴⁸, ys¹⁰³) = 
//│ 					xs⁴⁸(ys¹⁰³)
//│ 				def mappend_₄_₄(xs⁴⁶, ys¹⁰¹) = 
//│ 					xs⁴⁶(ys¹⁰¹)
//│ 				def mappend_₄_₅(xs⁵⁸, ys¹³⁴) = 
//│ 					xs⁵⁸(ys¹³⁴)
//│ 				def mappend_₅_₁(xs⁶⁰, ys¹³⁶) = 
//│ 					case xs⁶⁰ of {
//│ 						LH_C h³⁷ t³⁷ => 
//│ 							let t⁶⁸ = mappend_₅_₁(t³⁷, ys¹³⁶)
//│ 							in let h⁶⁸ = h³⁷
//│ 							in (fun ys¹³⁷ -> [LH_C h⁶⁸ mappend_₂_₁₀(t⁶⁸, ys¹³⁷)])
//│ 						| LH_N  => ys¹³⁶}
//│ 					where
//│ 					def mappend_₂_₁₀(xs⁶³, ys¹⁴⁰) = 
//│ 						xs⁶³(ys¹⁴⁰)
//│ 				def take_lz_₀_₀(n⁴, ls⁴) = 
//│ 					if (n⁴ > 0) then case force⁰(ls⁴) of {
//│ 						LH_C h²⁷ t²⁷ => 
//│ 							let t⁵⁰ = take_lz_₀_₀((n⁴ - 1), t²⁷)
//│ 							in let h⁵⁰ = h²⁷
//│ 							in (fun _lh_dummy¹² -> mappend_₀_₁(h⁵⁰, concat_₀_₃(t⁵⁰)))
//│ 						| LH_N  => (fun _lh_dummy¹³ -> (fun ys⁸⁸ -> ys⁸⁸))} else (fun _lh_dummy¹⁴ -> (fun ys⁸⁹ -> ys⁸⁹))
//│ 					where
//│ 					def concat_₀_₃(lss⁹) = 
//│ 						lss⁹(99)
//│ 					def mappend_₀_₁(xs⁶⁴, ys¹⁴¹) = 
//│ 						case xs⁶⁴ of {
//│ 							LH_C h⁴⁷ t⁴⁷ => 
//│ 								let t⁶⁹ = mappend_₀_₁(t⁴⁷, ys¹⁴¹)
//│ 								in let h⁶⁹ = h⁴⁷
//│ 								in (fun ys¹⁴² -> 
//│ 									let t⁷⁰ = mappend_₃_₃(t⁶⁹, ys¹⁴²)
//│ 									in let h⁷⁰ = h⁶⁹
//│ 									in (fun ys¹⁴³ -> [LH_C h⁷⁰ mappend_₂_₁₁(t⁷⁰, ys¹⁴³)]))
//│ 							| LH_N  => ys¹⁴¹}
//│ 						where
//│ 						def mappend_₂_₁₁(xs⁵¹, ys¹²⁷) = 
//│ 							xs⁵¹(ys¹²⁷)
//│ 						def mappend_₃_₃(xs⁴⁵, ys¹⁰⁰) = 
//│ 							xs⁴⁵(ys¹⁰⁰)
//│ 			def take_lz_₁_₀(n⁵, ls⁵) = 
//│ 				if (n⁵ > 0) then case force⁰(ls⁵) of {
//│ 					LH_C h⁴⁴ t⁴⁴ => 
//│ 						let t⁶⁶ = take_lz_₁_₀((n⁵ - 1), t⁴⁴)
//│ 						in let h⁶⁶ = h⁴⁴
//│ 						in (fun ys¹²⁴ -> 
//│ 							let t⁶⁷ = mappend_₁_₁(t⁶⁶, ys¹²⁴)
//│ 							in let h⁶⁷ = h⁶⁶
//│ 							in (fun _lh_dummy¹⁷ -> mappend_₀_₂(h⁶⁷, concat_₀_₄(t⁶⁷))))
//│ 					| LH_N  => (fun ys¹²⁵ -> ys¹²⁵)} else (fun ys¹²⁶ -> ys¹²⁶)
//│ 				where
//│ 				def concat_₀_₄(lss¹⁰) = 
//│ 					lss¹⁰(99)
//│ 				def mappend_₀_₂(xs⁶⁶, ys¹⁴⁵) = 
//│ 					case xs⁶⁶ of {
//│ 						LH_C h³⁹ t³⁹ => 
//│ 							let t⁷¹ = mappend_₀_₂(t³⁹, ys¹⁴⁵)
//│ 							in let h⁷¹ = h³⁹
//│ 							in (fun ys¹⁴⁶ -> 
//│ 								let t⁷² = mappend_₃_₄(t⁷¹, ys¹⁴⁶)
//│ 								in let h⁷² = h⁷¹
//│ 								in (fun ys¹⁴⁷ -> [LH_C h⁷² mappend_₂_₁₂(t⁷², ys¹⁴⁷)]))
//│ 						| LH_N  => ys¹⁴⁵}
//│ 					where
//│ 					def mappend_₂_₁₂(xs⁶⁵, ys¹⁴⁴) = 
//│ 						xs⁶⁵(ys¹⁴⁴)
//│ 					def mappend_₃_₄(xs⁶⁷, ys¹⁴⁸) = 
//│ 						xs⁶⁷(ys¹⁴⁸)
//│ 				def mappend_₁_₁(xs⁵³, ys¹²⁹) = 
//│ 					xs⁵³(ys¹²⁹)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

