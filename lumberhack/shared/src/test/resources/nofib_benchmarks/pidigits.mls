:NewParser
:ParseOnly

// pidgits n = 0 % (0 # (1,0,1)) where
//   i%ds
//      | i >= n = []
//      | True = (concat h ++ "\t:" ++ show j ++ "\n") ++ j%t
//      where k = i+10;
//            j = min n k;
//            (h,t) | k > n = (take (n`mod`10) ds ++ replicate (k-n) " ",[])
//                  | True = splitAt 10 ds
//   j # s
//      | n>a || r+n>=d = k # t
//      | True = show q : k # (n*10,(a-(q*d))*10,d)
//      where k = j+1; 
//            t@(n,a,d) = k&s; 
//            (q,r) = (n*3+a) `divMod` d
//   j&(n,a,d) = (n*j,(a+n*2)*y,d*y) where y=(j*2+1)

:lhNoIter
:lhInHaskell
:lhGenOCaml
drop_lz n ls = if n > 0 then lazy (case (force ls) of { [] -> []; (h:t) -> force (drop_lz (n - 1) t) }) else ls
splitAt_lz n xs = (take_lz n xs, drop_lz n xs)
min a b = if a > b then b else a
replicate n x = if n > 0 then (x:(replicate (n - 1) x)) else []
divmod a b = ((a `div` b), (a `mod` b))
percOp i ds n =
  if i >= n then
    []
  else
    let k = (i + 10) in
          let j = (min n k) in
                case (if k > n then ((take_lz (n `mod` 10) ds) ++ (replicate (k-n) " "), (lazy [])) else (splitAt_lz 10 ds)) of {
                  (h, t) -> (concat h) ++ ("t:" ++ ((string_of_int j) ++ "n")) ++ (percOp j t n)
                }
hashOp j s =
  lazy (let k = j + 1 in
      case (ampOp k s) of {
        (n, a, d) -> case (divmod ((n * 3) + a) d) of {
          (q, r) -> if ((n > a) || ((r + n) >= d)) then (force (hashOp k (n, a, d))) else ((string_of_int q) : (hashOp k (n*10, (a-(q*d))*10, d)))
        }
      })
ampOp j (n,a,d) = let y = ((j * 2) + 1) in (n * j, (a + (n * 2)) * y, d * y)
pidgits n = percOp 0 (hashOp 0 (1,0,1)) n
testPiDigits_nofib n = pidgits n
testPiDigits_nofib $ primId 5000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testPiDigits_nofib_₀^1406(primId⁰(5000))
//│ def ampOp_₀(_lh_ampOp_arg1¹, _lh_ampOp_arg2¹) = case _lh_ampOp_arg2¹ of {
//│ 	LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => 
//│ 		let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ 		in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)]
//│ 	| _  => error⁰}
//│ def concat_₀(lss¹) = case lss¹ of {
//│ 	LH_C h²⁶ t²⁸ => mappend_₀^1355(h²⁶, concat_₀^1358(t²⁸))
//│ 	| LH_N  => [LH_N]}
//│ def divmod_₀(_lh_divmod_arg1¹, _lh_divmod_arg2¹) = [LH_P2 div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹) (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)]
//│ def drop_lz_₀(_lh_drop_lz_arg1¹, _lh_drop_lz_arg2¹) = if (_lh_drop_lz_arg1¹ > 0) then lazy⁰(
//│ 	let _lh_matchIdent⁵ = force⁰(_lh_drop_lz_arg2¹)
//│ 	in case _lh_matchIdent⁵ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀^1049((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹))
//│ 		| _  => error⁰}) else _lh_drop_lz_arg2¹
//│ def hashOp_₀(_lh_hashOp_arg1¹, _lh_hashOp_arg2¹) = lazy⁰(
//│ 	let k³ = (_lh_hashOp_arg1¹ + 1)
//│ 	in let _lh_matchIdent⁶ = ampOp_₀^1236(k³, _lh_hashOp_arg2¹)
//│ 	in case _lh_matchIdent⁶ of {
//│ 		LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹ => 
//│ 			let _lh_matchIdent⁷ = divmod_₀^1242(((_lh_hashOp_LH_P3_0¹ * 3) + _lh_hashOp_LH_P3_1¹), _lh_hashOp_LH_P3_2¹)
//│ 			in case _lh_matchIdent⁷ of {
//│ 				LH_P2 _lh_hashOp_LH_P2_0¹ _lh_hashOp_LH_P2_1¹ => if ((_lh_hashOp_LH_P3_0¹ > _lh_hashOp_LH_P3_1¹) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0¹) >= _lh_hashOp_LH_P3_2¹)) then force⁰(hashOp_₀^1274(k³, [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀^1286(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰})
//│ def mappend_₀(xs¹³, ys¹³) = case xs¹³ of {
//│ 	LH_C h²⁵ t²⁷ => [LH_C h²⁵ mappend_₀^1344(t²⁷, ys¹³)]
//│ 	| LH_N  => ys¹³}
//│ def mappend_₁(xs¹⁰, ys¹⁰) = case xs¹⁰ of {
//│ 	LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁^1133(t²³, ys¹⁰)]
//│ 	| LH_N  => ys¹⁰}
//│ def mappend_₂(xs¹¹, ys¹¹) = case xs¹¹ of {
//│ 	LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂^1198(t²⁵, ys¹¹)]
//│ 	| LH_N  => ys¹¹}
//│ def mappend_₃(xs⁹, ys⁹) = case xs⁹ of {
//│ 	LH_C h²⁰ t²² => [LH_C h²⁰ mappend_₃^1121(t²², ys⁹)]
//│ 	| LH_N  => ys⁹}
//│ def mappend_₄(xs¹², ys¹²) = case xs¹² of {
//│ 	LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄^1210(t²⁶, ys¹²)]
//│ 	| LH_N  => ys¹²}
//│ def mappend_₅(xs¹⁴, ys¹⁴) = case xs¹⁴ of {
//│ 	LH_C h²⁸ t³⁰ => [LH_C h²⁸ mappend_₅^1396(t³⁰, ys¹⁴)]
//│ 	| LH_N  => ys¹⁴}
//│ def min_₀(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ def percOp_₀(_lh_percOp_arg1¹, _lh_percOp_arg2¹, _lh_percOp_arg3¹) = if (_lh_percOp_arg1¹ >= _lh_percOp_arg3¹) then [LH_N] else 
//│ 	let k² = (_lh_percOp_arg1¹ + 10)
//│ 	in let j¹ = min_₀^951(_lh_percOp_arg3¹, k²)
//│ 	in let _lh_matchIdent⁴ = if (k² > _lh_percOp_arg3¹) then [LH_P2 mappend_₁^961(take_lz_₁^962((_lh_percOp_arg3¹ % 10), _lh_percOp_arg2¹), replicate_₀^972((k² - _lh_percOp_arg3¹), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])] else splitAt_lz_₀^988(10, _lh_percOp_arg2¹)
//│ 	in case _lh_matchIdent⁴ of {
//│ 		LH_P2 _lh_percOp_LH_P2_0¹ _lh_percOp_LH_P2_1¹ => mappend_₂^995(mappend_₃^996(concat_₀^997(_lh_percOp_LH_P2_0¹), mappend_₄^1001([LH_C 't' [LH_C ':' [LH_N]]], mappend_₅^1008(string_of_int⁰(j¹), [LH_C 'n' [LH_N]]))), percOp_₀^1020(j¹, _lh_percOp_LH_P2_1¹, _lh_percOp_arg3¹))
//│ 		| _  => error⁰}
//│ def pidgits_₀(_lh_pidgits_arg1¹) = percOp_₀^1168(0, hashOp_₀^1171(0, [LH_P3 1 0 1]), _lh_pidgits_arg1¹)
//│ def replicate_₀(_lh_replicate_arg1¹, _lh_replicate_arg2¹) = if (_lh_replicate_arg1¹ > 0) then [LH_C _lh_replicate_arg2¹ replicate_₀^1328((_lh_replicate_arg1¹ - 1), _lh_replicate_arg2¹)] else [LH_N]
//│ def splitAt_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) = [LH_P2 take_lz_₀^1183(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) drop_lz_₀^1188(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)]
//│ def take_lz_₀(n⁵, ls²⁰) = if (n⁵ > 0) then case force⁰(ls²⁰) of {
//│ 	LH_C h²⁷ t²⁹ => [LH_C h²⁷ take_lz_₀^1378((n⁵ - 1), t²⁹)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lz_₁(n⁴, ls¹⁹) = if (n⁴ > 0) then case force⁰(ls¹⁹) of {
//│ 	LH_C h²² t²⁴ => [LH_C h²² take_lz_₁^1152((n⁴ - 1), t²⁴)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPiDigits_nofib_₀(_lh_testPiDigits_nofib_arg1¹) = pidgits_₀^1365(_lh_testPiDigits_nofib_arg1¹)
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec ampOp__d0 _lh_ampOp_arg1_1 _lh_ampOp_arg2_1 =
//│ 		  (match _lh_ampOp_arg2_1 with
//│ 		    | `LH_P3(_lh_ampOp_LH_P3_0_1, _lh_ampOp_LH_P3_1_1, _lh_ampOp_LH_P3_2_1) -> 
//│ 		      (let rec y_1 = ((_lh_ampOp_arg1_1 * 2) + 1) in
//│ 		        (`LH_P3((_lh_ampOp_LH_P3_0_1 * _lh_ampOp_arg1_1), ((_lh_ampOp_LH_P3_1_1 + (_lh_ampOp_LH_P3_0_1 * 2)) * y_1), (_lh_ampOp_LH_P3_2_1 * y_1))))
//│ 		    | _ -> 
//│ 		      (failwith "error"))
//│ 		and concat__d0 lss_1 =
//│ 		  (match lss_1 with
//│ 		    | `LH_C(h_2_6, t_2_8) -> 
//│ 		      ((mappend__d0 h_2_6) (concat__d0 t_2_8))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N))
//│ 		and divmod__d0 _lh_divmod_arg1_1 _lh_divmod_arg2_1 =
//│ 		  (`LH_P2((_lh_divmod_arg1_1 / _lh_divmod_arg2_1), (_lh_divmod_arg1_1 mod _lh_divmod_arg2_1)))
//│ 		and drop_lz__d0 _lh_drop_lz_arg1_1 _lh_drop_lz_arg2_1 =
//│ 		  (if (_lh_drop_lz_arg1_1 > 0) then
//│ 		    (lazy (let rec _lh_matchIdent_5 = (Lazy.force _lh_drop_lz_arg2_1) in
//│ 		      (match _lh_matchIdent_5 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_N)
//│ 		        | `LH_C(_lh_drop_lz_LH_C_0_1, _lh_drop_lz_LH_C_1_1) -> 
//│ 		          (Lazy.force ((drop_lz__d0 (_lh_drop_lz_arg1_1 - 1)) _lh_drop_lz_LH_C_1_1))
//│ 		        | _ -> 
//│ 		          (failwith "error"))))
//│ 		  else
//│ 		    _lh_drop_lz_arg2_1)
//│ 		and hashOp__d0 _lh_hashOp_arg1_1 _lh_hashOp_arg2_1 =
//│ 		  (lazy (let rec k_3 = (_lh_hashOp_arg1_1 + 1) in
//│ 		    (let rec _lh_matchIdent_6 = ((ampOp__d0 k_3) _lh_hashOp_arg2_1) in
//│ 		      (match _lh_matchIdent_6 with
//│ 		        | `LH_P3(_lh_hashOp_LH_P3_0_1, _lh_hashOp_LH_P3_1_1, _lh_hashOp_LH_P3_2_1) -> 
//│ 		          (let rec _lh_matchIdent_7 = ((divmod__d0 ((_lh_hashOp_LH_P3_0_1 * 3) + _lh_hashOp_LH_P3_1_1)) _lh_hashOp_LH_P3_2_1) in
//│ 		            (match _lh_matchIdent_7 with
//│ 		              | `LH_P2(_lh_hashOp_LH_P2_0_1, _lh_hashOp_LH_P2_1_1) -> 
//│ 		                (if ((_lh_hashOp_LH_P3_0_1 > _lh_hashOp_LH_P3_1_1) || ((_lh_hashOp_LH_P2_1_1 + _lh_hashOp_LH_P3_0_1) >= _lh_hashOp_LH_P3_2_1)) then
//│ 		                  (Lazy.force ((hashOp__d0 k_3) (`LH_P3(_lh_hashOp_LH_P3_0_1, _lh_hashOp_LH_P3_1_1, _lh_hashOp_LH_P3_2_1))))
//│ 		                else
//│ 		                  (`LH_C((string_of_int _lh_hashOp_LH_P2_0_1), ((hashOp__d0 k_3) (`LH_P3((_lh_hashOp_LH_P3_0_1 * 10), ((_lh_hashOp_LH_P3_1_1 - (_lh_hashOp_LH_P2_0_1 * _lh_hashOp_LH_P3_2_1)) * 10), _lh_hashOp_LH_P3_2_1))))))
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        | _ -> 
//│ 		          (failwith "error")))))
//│ 		and mappend__d0 xs_1_3 ys_1_3 =
//│ 		  (match xs_1_3 with
//│ 		    | `LH_C(h_2_5, t_2_7) -> 
//│ 		      (`LH_C(h_2_5, ((mappend__d0 t_2_7) ys_1_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_3)
//│ 		and mappend__d1 xs_1_0 ys_1_0 =
//│ 		  (match xs_1_0 with
//│ 		    | `LH_C(h_2_1, t_2_3) -> 
//│ 		      (`LH_C(h_2_1, ((mappend__d1 t_2_3) ys_1_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_0)
//│ 		and mappend__d2 xs_1_1 ys_1_1 =
//│ 		  (match xs_1_1 with
//│ 		    | `LH_C(h_2_3, t_2_5) -> 
//│ 		      (`LH_C(h_2_3, ((mappend__d2 t_2_5) ys_1_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_1)
//│ 		and mappend__d3 xs_9 ys_9 =
//│ 		  (match xs_9 with
//│ 		    | `LH_C(h_2_0, t_2_2) -> 
//│ 		      (`LH_C(h_2_0, ((mappend__d3 t_2_2) ys_9)))
//│ 		    | `LH_N -> 
//│ 		      ys_9)
//│ 		and mappend__d4 xs_1_2 ys_1_2 =
//│ 		  (match xs_1_2 with
//│ 		    | `LH_C(h_2_4, t_2_6) -> 
//│ 		      (`LH_C(h_2_4, ((mappend__d4 t_2_6) ys_1_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_2)
//│ 		and mappend__d5 xs_1_4 ys_1_4 =
//│ 		  (match xs_1_4 with
//│ 		    | `LH_C(h_2_8, t_3_0) -> 
//│ 		      (`LH_C(h_2_8, ((mappend__d5 t_3_0) ys_1_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_1_4)
//│ 		and min__d0 _lh_min_arg1_1 _lh_min_arg2_1 =
//│ 		  (if (_lh_min_arg1_1 > _lh_min_arg2_1) then
//│ 		    _lh_min_arg2_1
//│ 		  else
//│ 		    _lh_min_arg1_1)
//│ 		and percOp__d0 _lh_percOp_arg1_1 _lh_percOp_arg2_1 _lh_percOp_arg3_1 =
//│ 		  (if (_lh_percOp_arg1_1 >= _lh_percOp_arg3_1) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (let rec k_2 = (_lh_percOp_arg1_1 + 10) in
//│ 		      (let rec j_1 = ((min__d0 _lh_percOp_arg3_1) k_2) in
//│ 		        (let rec _lh_matchIdent_4 = (if (k_2 > _lh_percOp_arg3_1) then
//│ 		          (`LH_P2(((mappend__d1 ((take_lz__d1 (_lh_percOp_arg3_1 mod 10)) _lh_percOp_arg2_1)) ((replicate__d0 (k_2 - _lh_percOp_arg3_1)) (`LH_C(' ', (`LH_N))))), (lazy (`LH_N))))
//│ 		        else
//│ 		          ((splitAt_lz__d0 10) _lh_percOp_arg2_1)) in
//│ 		          (match _lh_matchIdent_4 with
//│ 		            | `LH_P2(_lh_percOp_LH_P2_0_1, _lh_percOp_LH_P2_1_1) -> 
//│ 		              ((mappend__d2 ((mappend__d3 (concat__d0 _lh_percOp_LH_P2_0_1)) ((mappend__d4 (`LH_C('t', (`LH_C(':', (`LH_N)))))) ((mappend__d5 (string_of_int j_1)) (`LH_C('n', (`LH_N))))))) (((percOp__d0 j_1) _lh_percOp_LH_P2_1_1) _lh_percOp_arg3_1))
//│ 		            | _ -> 
//│ 		              (failwith "error"))))))
//│ 		and pidgits__d0 _lh_pidgits_arg1_1 =
//│ 		  (((percOp__d0 0) ((hashOp__d0 0) (`LH_P3(1, 0, 1)))) _lh_pidgits_arg1_1)
//│ 		and replicate__d0 _lh_replicate_arg1_1 _lh_replicate_arg2_1 =
//│ 		  (if (_lh_replicate_arg1_1 > 0) then
//│ 		    (`LH_C(_lh_replicate_arg2_1, ((replicate__d0 (_lh_replicate_arg1_1 - 1)) _lh_replicate_arg2_1)))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and splitAt_lz__d0 _lh_splitAt_lz_arg1_1 _lh_splitAt_lz_arg2_1 =
//│ 		  (`LH_P2(((take_lz__d0 _lh_splitAt_lz_arg1_1) _lh_splitAt_lz_arg2_1), ((drop_lz__d0 _lh_splitAt_lz_arg1_1) _lh_splitAt_lz_arg2_1)))
//│ 		and take_lz__d0 n_5 ls_2_0 =
//│ 		  (if (n_5 > 0) then
//│ 		    (match (Lazy.force ls_2_0) with
//│ 		      | `LH_C(h_2_7, t_2_9) -> 
//│ 		        (`LH_C(h_2_7, ((take_lz__d0 (n_5 - 1)) t_2_9)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and take_lz__d1 n_4 ls_1_9 =
//│ 		  (if (n_4 > 0) then
//│ 		    (match (Lazy.force ls_1_9) with
//│ 		      | `LH_C(h_2_2, t_2_4) -> 
//│ 		        (`LH_C(h_2_2, ((take_lz__d1 (n_4 - 1)) t_2_4)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N))
//│ 		and testPiDigits_nofib__d0 _lh_testPiDigits_nofib_arg1_1 =
//│ 		  (pidgits__d0 _lh_testPiDigits_nofib_arg1_1);;
//│ 		(testPiDigits_nofib__d0 5000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_N]: 980 --->
//│ 	case xs¹³ of {LH_C h²⁵ t²⁷ => [LH_C h²⁵ mappend_₀(t²⁷, ys¹³)] | LH_N  => ys¹³}: 1351
//│ [LH_C ' ' [LH_N]]: 981 --->
//│ 	case xs¹³ of {LH_C h²⁵ t²⁷ => [LH_C h²⁵ mappend_₀(t²⁷, ys¹³)] | LH_N  => ys¹³}: 1351
//│ [LH_N]: 985 --->
//│ 	case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹)) | _  => error⁰}: 1060
//│ 	case force⁰(ls¹⁹) of {LH_C h²² t²⁴ => [LH_C h²² take_lz_₁((n⁴ - 1), t²⁴)] | LH_N  => [LH_N]}: 1163
//│ 	case force⁰(ls²⁰) of {LH_C h²⁷ t²⁹ => [LH_C h²⁷ take_lz_₀((n⁵ - 1), t²⁹)] | LH_N  => [LH_N]}: 1389
//│ [LH_P2 mappend_₁(take_lz_₁((_lh_percOp_arg3¹ % 10), _lh_percOp_arg2¹), replicate_₀((k² - _lh_percOp_arg3¹), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])]: 987 --->
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_percOp_LH_P2_0¹ _lh_percOp_LH_P2_1¹ => mappend_₂(mappend_₃(concat_₀(_lh_percOp_LH_P2_0¹), mappend_₄([LH_C 't' [LH_C ':' [LH_N]]], mappend_₅(string_of_int⁰(j¹), [LH_C 'n' [LH_N]]))), percOp_₀(j¹, _lh_percOp_LH_P2_1¹, _lh_percOp_arg3¹)) | _  => error⁰}: 1029
//│ [LH_N]: 1004 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)] | LH_N  => ys¹²}: 1217
//│ [LH_C ':' [LH_N]]: 1005 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)] | LH_N  => ys¹²}: 1217
//│ [LH_C 't' [LH_C ':' [LH_N]]]: 1006 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)] | LH_N  => ys¹²}: 1217
//│ [LH_N]: 1014 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ [LH_C 'n' [LH_N]]: 1015 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ [LH_N]: 1047 --->
//│ 	case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹)) | _  => error⁰}: 1060
//│ 	case force⁰(ls¹⁹) of {LH_C h²² t²⁴ => [LH_C h²² take_lz_₁((n⁴ - 1), t²⁴)] | LH_N  => [LH_N]}: 1163
//│ 	case force⁰(ls²⁰) of {LH_C h²⁷ t²⁹ => [LH_C h²⁷ take_lz_₀((n⁵ - 1), t²⁹)] | LH_N  => [LH_N]}: 1389
//│ [LH_P2 div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹) (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)]: 1077 --->
//│ 	case _lh_matchIdent⁷ of {LH_P2 _lh_hashOp_LH_P2_0¹ _lh_hashOp_LH_P2_1¹ => if ((_lh_hashOp_LH_P3_0¹ > _lh_hashOp_LH_P3_1¹) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0¹) >= _lh_hashOp_LH_P3_2¹)) then force⁰(hashOp_₀(k³, [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])] | _  => error⁰}: 1313
//│ [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)]: 1113 --->
//│ 	case _lh_matchIdent⁶ of {LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹ => let _lh_matchIdent⁷ = divmod_₀(((_lh_hashOp_LH_P3_0¹ * 3) + _lh_hashOp_LH_P3_1¹), _lh_hashOp_LH_P3_2¹)
//│ in case _lh_matchIdent⁷ of {LH_P2 _lh_hashOp_LH_P2_0¹ _lh_hashOp_LH_P2_1¹ => if ((_lh_hashOp_LH_P3_0¹ > _lh_hashOp_LH_P3_1¹) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0¹) >= _lh_hashOp_LH_P3_2¹)) then force⁰(hashOp_₀(k³, [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])] | _  => error⁰} | _  => error⁰}: 1316
//│ [LH_C h²⁰ mappend_₃(t²², ys⁹)]: 1126 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ [LH_C h²¹ mappend_₁(t²³, ys¹⁰)]: 1138 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_C h²² take_lz_₁((n⁴ - 1), t²⁴)]: 1161 --->
//│ 	case xs¹⁰ of {LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁(t²³, ys¹⁰)] | LH_N  => ys¹⁰}: 1140
//│ [LH_N]: 1162 --->
//│ 	case xs¹⁰ of {LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁(t²³, ys¹⁰)] | LH_N  => ys¹⁰}: 1140
//│ [LH_N]: 1164 --->
//│ 	case xs¹⁰ of {LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁(t²³, ys¹⁰)] | LH_N  => ys¹⁰}: 1140
//│ [LH_P3 1 0 1]: 1177 --->
//│ 	case _lh_ampOp_arg2¹ of {LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)] | _  => error⁰}: 1116
//│ [LH_P2 take_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) drop_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)]: 1193 --->
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_percOp_LH_P2_0¹ _lh_percOp_LH_P2_1¹ => mappend_₂(mappend_₃(concat_₀(_lh_percOp_LH_P2_0¹), mappend_₄([LH_C 't' [LH_C ':' [LH_N]]], mappend_₅(string_of_int⁰(j¹), [LH_C 'n' [LH_N]]))), percOp_₀(j¹, _lh_percOp_LH_P2_1¹, _lh_percOp_arg3¹)) | _  => error⁰}: 1029
//│ [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)]: 1215 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹]: 1280 --->
//│ 	case _lh_ampOp_arg2¹ of {LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)] | _  => error⁰}: 1116
//│ [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹]: 1308 --->
//│ 	case _lh_ampOp_arg2¹ of {LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)] | _  => error⁰}: 1116
//│ [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])]: 1310 --->
//│ 	case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹)) | _  => error⁰}: 1060
//│ 	case force⁰(ls¹⁹) of {LH_C h²² t²⁴ => [LH_C h²² take_lz_₁((n⁴ - 1), t²⁴)] | LH_N  => [LH_N]}: 1163
//│ 	case force⁰(ls²⁰) of {LH_C h²⁷ t²⁹ => [LH_C h²⁷ take_lz_₀((n⁵ - 1), t²⁹)] | LH_N  => [LH_N]}: 1389
//│ [LH_C _lh_replicate_arg2¹ replicate_₀((_lh_replicate_arg1¹ - 1), _lh_replicate_arg2¹)]: 1337 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_N]: 1338 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_C h²⁵ mappend_₀(t²⁷, ys¹³)]: 1349 --->
//│ 	case xs⁹ of {LH_C h²⁰ t²² => [LH_C h²⁰ mappend_₃(t²², ys⁹)] | LH_N  => ys⁹}: 1128
//│ [LH_N]: 1362 --->
//│ 	case xs⁹ of {LH_C h²⁰ t²² => [LH_C h²⁰ mappend_₃(t²², ys⁹)] | LH_N  => ys⁹}: 1128
//│ [LH_C h²⁷ take_lz_₀((n⁵ - 1), t²⁹)]: 1387 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_N]: 1388 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_N]: 1390 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_C h²⁸ mappend_₅(t³⁰, ys¹⁴)]: 1401 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ ------------------
//│ case _lh_matchIdent⁴ of {LH_P2 _lh_percOp_LH_P2_0¹ _lh_percOp_LH_P2_1¹ => mappend_₂(mappend_₃(concat_₀(_lh_percOp_LH_P2_0¹), mappend_₄([LH_C 't' [LH_C ':' [LH_N]]], mappend_₅(string_of_int⁰(j¹), [LH_C 'n' [LH_N]]))), percOp_₀(j¹, _lh_percOp_LH_P2_1¹, _lh_percOp_arg3¹)) | _  => error⁰}: 1029 --->
//│ 	[LH_P2 mappend_₁(take_lz_₁((_lh_percOp_arg3¹ % 10), _lh_percOp_arg2¹), replicate_₀((k² - _lh_percOp_arg3¹), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])]: 987
//│ 	[LH_P2 take_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) drop_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)]: 1193
//│ case _lh_matchIdent⁵ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1¹)) | _  => error⁰}: 1060 --->
//│ 	[LH_N]: 985
//│ 	[LH_N]: 1047
//│ 	[LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])]: 1310
//│ case _lh_ampOp_arg2¹ of {LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)] | _  => error⁰}: 1116 --->
//│ 	[LH_P3 1 0 1]: 1177
//│ 	[LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹]: 1280
//│ 	[LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹]: 1308
//│ case xs⁹ of {LH_C h²⁰ t²² => [LH_C h²⁰ mappend_₃(t²², ys⁹)] | LH_N  => ys⁹}: 1128 --->
//│ 	[LH_C h²⁵ mappend_₀(t²⁷, ys¹³)]: 1349
//│ 	[LH_N]: 1362
//│ case xs¹⁰ of {LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁(t²³, ys¹⁰)] | LH_N  => ys¹⁰}: 1140 --->
//│ 	[LH_C h²² take_lz_₁((n⁴ - 1), t²⁴)]: 1161
//│ 	[LH_N]: 1162
//│ 	[LH_N]: 1164
//│ case force⁰(ls¹⁹) of {LH_C h²² t²⁴ => [LH_C h²² take_lz_₁((n⁴ - 1), t²⁴)] | LH_N  => [LH_N]}: 1163 --->
//│ 	[LH_N]: 985
//│ 	[LH_N]: 1047
//│ 	[LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])]: 1310
//│ case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205 --->
//│ 	[LH_N]: 1014
//│ 	[LH_C 'n' [LH_N]]: 1015
//│ 	[LH_C h²⁰ mappend_₃(t²², ys⁹)]: 1126
//│ 	[LH_C h²⁴ mappend_₄(t²⁶, ys¹²)]: 1215
//│ 	[LH_C h²⁸ mappend_₅(t³⁰, ys¹⁴)]: 1401
//│ case xs¹² of {LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)] | LH_N  => ys¹²}: 1217 --->
//│ 	[LH_N]: 1004
//│ 	[LH_C ':' [LH_N]]: 1005
//│ 	[LH_C 't' [LH_C ':' [LH_N]]]: 1006
//│ case _lh_matchIdent⁷ of {LH_P2 _lh_hashOp_LH_P2_0¹ _lh_hashOp_LH_P2_1¹ => if ((_lh_hashOp_LH_P3_0¹ > _lh_hashOp_LH_P3_1¹) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0¹) >= _lh_hashOp_LH_P3_2¹)) then force⁰(hashOp_₀(k³, [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])] | _  => error⁰}: 1313 --->
//│ 	[LH_P2 div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹) (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)]: 1077
//│ case _lh_matchIdent⁶ of {LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹ => let _lh_matchIdent⁷ = divmod_₀(((_lh_hashOp_LH_P3_0¹ * 3) + _lh_hashOp_LH_P3_1¹), _lh_hashOp_LH_P3_2¹)
//│ in case _lh_matchIdent⁷ of {LH_P2 _lh_hashOp_LH_P2_0¹ _lh_hashOp_LH_P2_1¹ => if ((_lh_hashOp_LH_P3_0¹ > _lh_hashOp_LH_P3_1¹) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0¹) >= _lh_hashOp_LH_P3_2¹)) then force⁰(hashOp_₀(k³, [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])] | _  => error⁰} | _  => error⁰}: 1316 --->
//│ 	[LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y¹) (_lh_ampOp_LH_P3_2¹ * y¹)]: 1113
//│ case xs¹³ of {LH_C h²⁵ t²⁷ => [LH_C h²⁵ mappend_₀(t²⁷, ys¹³)] | LH_N  => ys¹³}: 1351 --->
//│ 	NoProd
//│ 	[LH_N]: 980
//│ 	[LH_C ' ' [LH_N]]: 981
//│ case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363 --->
//│ 	[LH_C h²¹ mappend_₁(t²³, ys¹⁰)]: 1138
//│ 	[LH_C _lh_replicate_arg2¹ replicate_₀((_lh_replicate_arg1¹ - 1), _lh_replicate_arg2¹)]: 1337
//│ 	[LH_N]: 1338
//│ 	[LH_C h²⁷ take_lz_₀((n⁵ - 1), t²⁹)]: 1387
//│ 	[LH_N]: 1388
//│ 	[LH_N]: 1390
//│ case force⁰(ls²⁰) of {LH_C h²⁷ t²⁹ => [LH_C h²⁷ take_lz_₀((n⁵ - 1), t²⁹)] | LH_N  => [LH_N]}: 1389 --->
//│ 	[LH_N]: 985
//│ 	[LH_N]: 1047
//│ 	[LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])]: 1310
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_P2 mappend_₁(take_lz_₁((_lh_percOp_arg3¹ % 10), _lh_percOp_arg2¹), replicate_₀((k² - _lh_percOp_arg3¹), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])]: 987 --->
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_percOp_LH_P2_0¹ _lh_percOp_LH_P2_1¹ => mappend_₂(mappend_₃(concat_₀(_lh_percOp_LH_P2_0¹), mappend_₄([LH_C 't' [LH_C ':' [LH_N]]], mappend_₅(string_of_int⁰(j¹), [LH_C 'n' [LH_N]]))), percOp_₀(j¹, _lh_percOp_LH_P2_1¹, _lh_percOp_arg3¹)) | _  => error⁰}: 1029
//│ [LH_N]: 1004 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)] | LH_N  => ys¹²}: 1217
//│ [LH_C ':' [LH_N]]: 1005 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)] | LH_N  => ys¹²}: 1217
//│ [LH_C 't' [LH_C ':' [LH_N]]]: 1006 --->
//│ 	case xs¹² of {LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)] | LH_N  => ys¹²}: 1217
//│ [LH_N]: 1014 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ [LH_C 'n' [LH_N]]: 1015 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ [LH_P2 div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹) (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)]: 1077 --->
//│ 	case _lh_matchIdent⁷ of {LH_P2 _lh_hashOp_LH_P2_0¹ _lh_hashOp_LH_P2_1¹ => if ((_lh_hashOp_LH_P3_0¹ > _lh_hashOp_LH_P3_1¹) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0¹) >= _lh_hashOp_LH_P3_2¹)) then force⁰(hashOp_₀(k³, [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])] | _  => error⁰}: 1313
//│ [LH_C h²⁰ mappend_₃(t²², ys⁹)]: 1126 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ [LH_C h²¹ mappend_₁(t²³, ys¹⁰)]: 1138 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_C h²² take_lz_₁((n⁴ - 1), t²⁴)]: 1161 --->
//│ 	case xs¹⁰ of {LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁(t²³, ys¹⁰)] | LH_N  => ys¹⁰}: 1140
//│ [LH_N]: 1162 --->
//│ 	case xs¹⁰ of {LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁(t²³, ys¹⁰)] | LH_N  => ys¹⁰}: 1140
//│ [LH_N]: 1164 --->
//│ 	case xs¹⁰ of {LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁(t²³, ys¹⁰)] | LH_N  => ys¹⁰}: 1140
//│ [LH_P2 take_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) drop_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)]: 1193 --->
//│ 	case _lh_matchIdent⁴ of {LH_P2 _lh_percOp_LH_P2_0¹ _lh_percOp_LH_P2_1¹ => mappend_₂(mappend_₃(concat_₀(_lh_percOp_LH_P2_0¹), mappend_₄([LH_C 't' [LH_C ':' [LH_N]]], mappend_₅(string_of_int⁰(j¹), [LH_C 'n' [LH_N]]))), percOp_₀(j¹, _lh_percOp_LH_P2_1¹, _lh_percOp_arg3¹)) | _  => error⁰}: 1029
//│ [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)]: 1215 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ [LH_C _lh_replicate_arg2¹ replicate_₀((_lh_replicate_arg1¹ - 1), _lh_replicate_arg2¹)]: 1337 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_N]: 1338 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_C h²⁵ mappend_₀(t²⁷, ys¹³)]: 1349 --->
//│ 	case xs⁹ of {LH_C h²⁰ t²² => [LH_C h²⁰ mappend_₃(t²², ys⁹)] | LH_N  => ys⁹}: 1128
//│ [LH_N]: 1362 --->
//│ 	case xs⁹ of {LH_C h²⁰ t²² => [LH_C h²⁰ mappend_₃(t²², ys⁹)] | LH_N  => ys⁹}: 1128
//│ [LH_C h²⁷ take_lz_₀((n⁵ - 1), t²⁹)]: 1387 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_N]: 1388 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_N]: 1390 --->
//│ 	case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363
//│ [LH_C h²⁸ mappend_₅(t³⁰, ys¹⁴)]: 1401 --->
//│ 	case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205
//│ ------------------
//│ case _lh_matchIdent⁴ of {LH_P2 _lh_percOp_LH_P2_0¹ _lh_percOp_LH_P2_1¹ => mappend_₂(mappend_₃(concat_₀(_lh_percOp_LH_P2_0¹), mappend_₄([LH_C 't' [LH_C ':' [LH_N]]], mappend_₅(string_of_int⁰(j¹), [LH_C 'n' [LH_N]]))), percOp_₀(j¹, _lh_percOp_LH_P2_1¹, _lh_percOp_arg3¹)) | _  => error⁰}: 1029 --->
//│ 	[LH_P2 mappend_₁(take_lz_₁((_lh_percOp_arg3¹ % 10), _lh_percOp_arg2¹), replicate_₀((k² - _lh_percOp_arg3¹), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])]: 987
//│ 	[LH_P2 take_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) drop_lz_₀(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)]: 1193
//│ case xs⁹ of {LH_C h²⁰ t²² => [LH_C h²⁰ mappend_₃(t²², ys⁹)] | LH_N  => ys⁹}: 1128 --->
//│ 	[LH_C h²⁵ mappend_₀(t²⁷, ys¹³)]: 1349
//│ 	[LH_N]: 1362
//│ case xs¹⁰ of {LH_C h²¹ t²³ => [LH_C h²¹ mappend_₁(t²³, ys¹⁰)] | LH_N  => ys¹⁰}: 1140 --->
//│ 	[LH_C h²² take_lz_₁((n⁴ - 1), t²⁴)]: 1161
//│ 	[LH_N]: 1162
//│ 	[LH_N]: 1164
//│ case xs¹¹ of {LH_C h²³ t²⁵ => [LH_C h²³ mappend_₂(t²⁵, ys¹¹)] | LH_N  => ys¹¹}: 1205 --->
//│ 	[LH_N]: 1014
//│ 	[LH_C 'n' [LH_N]]: 1015
//│ 	[LH_C h²⁰ mappend_₃(t²², ys⁹)]: 1126
//│ 	[LH_C h²⁴ mappend_₄(t²⁶, ys¹²)]: 1215
//│ 	[LH_C h²⁸ mappend_₅(t³⁰, ys¹⁴)]: 1401
//│ case xs¹² of {LH_C h²⁴ t²⁶ => [LH_C h²⁴ mappend_₄(t²⁶, ys¹²)] | LH_N  => ys¹²}: 1217 --->
//│ 	[LH_N]: 1004
//│ 	[LH_C ':' [LH_N]]: 1005
//│ 	[LH_C 't' [LH_C ':' [LH_N]]]: 1006
//│ case _lh_matchIdent⁷ of {LH_P2 _lh_hashOp_LH_P2_0¹ _lh_hashOp_LH_P2_1¹ => if ((_lh_hashOp_LH_P3_0¹ > _lh_hashOp_LH_P3_1¹) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0¹) >= _lh_hashOp_LH_P3_2¹)) then force⁰(hashOp_₀(k³, [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_₀(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])] | _  => error⁰}: 1313 --->
//│ 	[LH_P2 div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹) (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)]: 1077
//│ case lss¹ of {LH_C h²⁶ t²⁸ => mappend_₀(h²⁶, concat_₀(t²⁸)) | LH_N  => [LH_N]}: 1363 --->
//│ 	[LH_C h²¹ mappend_₁(t²³, ys¹⁰)]: 1138
//│ 	[LH_C _lh_replicate_arg2¹ replicate_₀((_lh_replicate_arg1¹ - 1), _lh_replicate_arg2¹)]: 1337
//│ 	[LH_N]: 1338
//│ 	[LH_C h²⁷ take_lz_₀((n⁵ - 1), t²⁹)]: 1387
//│ 	[LH_N]: 1388
//│ 	[LH_N]: 1390
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testPiDigits_nofib_₀(primId⁰(5000))
//│ def ampOp_₀(_lh_ampOp_arg1², _lh_ampOp_arg2²) = case _lh_ampOp_arg2² of {
//│ 	LH_P3 _lh_ampOp_LH_P3_0¹ _lh_ampOp_LH_P3_1¹ _lh_ampOp_LH_P3_2¹ => 
//│ 		let y² = ((_lh_ampOp_arg1² * 2) + 1)
//│ 		in [LH_P3 (_lh_ampOp_LH_P3_0¹ * _lh_ampOp_arg1²) ((_lh_ampOp_LH_P3_1¹ + (_lh_ampOp_LH_P3_0¹ * 2)) * y²) (_lh_ampOp_LH_P3_2¹ * y²)]
//│ 	| _  => error⁰}
//│ def concat_₀(lss²) = lss²(99)
//│ def divmod_₀(_lh_divmod_arg1², _lh_divmod_arg2²) = 
//│ 	let _lh_hashOp_LH_P2_1² = (_lh_divmod_arg1² % _lh_divmod_arg2²)
//│ 	in let _lh_hashOp_LH_P2_0² = div⁰(_lh_divmod_arg1², _lh_divmod_arg2²)
//│ 	in (fun _lh_hashOp_LH_P3_0² -> (fun _lh_hashOp_LH_P3_1² -> (fun _lh_hashOp_LH_P3_2² -> (fun k⁴ -> if ((_lh_hashOp_LH_P3_0² > _lh_hashOp_LH_P3_1²) || ((_lh_hashOp_LH_P2_1² + _lh_hashOp_LH_P3_0²) >= _lh_hashOp_LH_P3_2²)) then force⁰(hashOp_₀(k⁴, [LH_P3 _lh_hashOp_LH_P3_0² _lh_hashOp_LH_P3_1² _lh_hashOp_LH_P3_2²])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0²) hashOp_₀(k⁴, [LH_P3 (_lh_hashOp_LH_P3_0² * 10) ((_lh_hashOp_LH_P3_1² - (_lh_hashOp_LH_P2_0² * _lh_hashOp_LH_P3_2²)) * 10) _lh_hashOp_LH_P3_2²])]))))
//│ def drop_lz_₀(_lh_drop_lz_arg1², _lh_drop_lz_arg2²) = if (_lh_drop_lz_arg1² > 0) then lazy⁰(
//│ 	let _lh_matchIdent⁸ = force⁰(_lh_drop_lz_arg2²)
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_drop_lz_LH_C_0¹ _lh_drop_lz_LH_C_1¹ => force⁰(drop_lz_₀((_lh_drop_lz_arg1² - 1), _lh_drop_lz_LH_C_1¹))
//│ 		| _  => error⁰}) else _lh_drop_lz_arg2²
//│ def hashOp_₀(_lh_hashOp_arg1², _lh_hashOp_arg2²) = lazy⁰(
//│ 	let k⁶ = (_lh_hashOp_arg1² + 1)
//│ 	in let _lh_matchIdent¹⁰ = ampOp_₀(k⁶, _lh_hashOp_arg2²)
//│ 	in case _lh_matchIdent¹⁰ of {
//│ 		LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹ => 
//│ 			let _lh_matchIdent¹¹ = divmod_₀(((_lh_hashOp_LH_P3_0¹ * 3) + _lh_hashOp_LH_P3_1¹), _lh_hashOp_LH_P3_2¹)
//│ 			in _lh_matchIdent¹¹(_lh_hashOp_LH_P3_0¹, _lh_hashOp_LH_P3_1¹, _lh_hashOp_LH_P3_2¹, k⁶)
//│ 		| _  => error⁰})
//│ def mappend_₀(xs¹⁵, ys¹⁸) = case xs¹⁵ of {
//│ 	LH_C h²⁵ t²⁷ => 
//│ 		let t³³ = mappend_₀(t²⁷, ys¹⁸)
//│ 		in let h³¹ = h²⁵
//│ 		in (fun ys¹⁹ -> 
//│ 			let t³⁴ = mappend_₃(t³³, ys¹⁹)
//│ 			in let h³² = h³¹
//│ 			in (fun ys²⁰ -> [LH_C h³² mappend_₂(t³⁴, ys²⁰)]))
//│ 	| LH_N  => ys¹⁸}
//│ def mappend_₁(xs¹⁸, ys³¹) = xs¹⁸(ys³¹)
//│ def mappend_₂(xs¹⁹, ys³²) = xs¹⁹(ys³²)
//│ def mappend_₃(xs²⁰, ys⁴⁰) = xs²⁰(ys⁴⁰)
//│ def mappend_₄(xs¹⁶, ys²⁸) = xs¹⁶(ys²⁸)
//│ def mappend_₅(xs¹⁷, ys²⁹) = case xs¹⁷ of {
//│ 	LH_C h²⁸ t³⁰ => 
//│ 		let t⁴⁰ = mappend_₅(t³⁰, ys²⁹)
//│ 		in let h³⁸ = h²⁸
//│ 		in (fun ys³⁰ -> [LH_C h³⁸ mappend_₂(t⁴⁰, ys³⁰)])
//│ 	| LH_N  => ys²⁹}
//│ def min_₀(_lh_min_arg1², _lh_min_arg2²) = if (_lh_min_arg1² > _lh_min_arg2²) then _lh_min_arg2² else _lh_min_arg1²
//│ def percOp_₀(_lh_percOp_arg1², _lh_percOp_arg2², _lh_percOp_arg3³) = if (_lh_percOp_arg1² >= _lh_percOp_arg3³) then [LH_N] else 
//│ 	let k⁵ = (_lh_percOp_arg1² + 10)
//│ 	in let j³ = min_₀(_lh_percOp_arg3³, k⁵)
//│ 	in let _lh_matchIdent⁹ = if (k⁵ > _lh_percOp_arg3³) then 
//│ 		let _lh_percOp_LH_P2_1³ = lazy⁰([LH_N])
//│ 		in let _lh_percOp_LH_P2_0³ = mappend_₁(take_lz_₁((_lh_percOp_arg3³ % 10), _lh_percOp_arg2²), replicate_₀((k⁵ - _lh_percOp_arg3³), [LH_C ' ' [LH_N]]))
//│ 		in (fun _lh_percOp_arg3⁴ -> (fun j⁴ -> mappend_₂(mappend_₃(concat_₀(_lh_percOp_LH_P2_0³), mappend_₄(
//│ 			let t⁴¹ = 	
//│ 				let t⁴³ = (fun ys³⁷ -> ys³⁷)
//│ 				in let h⁴¹ = ':'
//│ 				in (fun ys³⁵ -> 
//│ 					let t⁴⁴ = mappend_₄(t⁴³, ys³⁵)
//│ 					in let h⁴² = h⁴¹
//│ 					in (fun ys³⁶ -> [LH_C h⁴² mappend_₂(t⁴⁴, ys³⁶)]))
//│ 			in let h³⁹ = 't'
//│ 			in (fun ys³³ -> 
//│ 				let t⁴² = mappend_₄(t⁴¹, ys³³)
//│ 				in let h⁴⁰ = h³⁹
//│ 				in (fun ys³⁴ -> [LH_C h⁴⁰ mappend_₂(t⁴², ys³⁴)])), mappend_₅(string_of_int⁰(j⁴), 
//│ 			let t⁴⁵ = (fun ys³⁹ -> ys³⁹)
//│ 			in let h⁴³ = 'n'
//│ 			in (fun ys³⁸ -> [LH_C h⁴³ mappend_₂(t⁴⁵, ys³⁸)])))), percOp_₀(j⁴, _lh_percOp_LH_P2_1³, _lh_percOp_arg3⁴)))) else splitAt_lz_₀(10, _lh_percOp_arg2²)
//│ 	in _lh_matchIdent⁹(_lh_percOp_arg3³, j³)
//│ def pidgits_₀(_lh_pidgits_arg1²) = percOp_₀(0, hashOp_₀(0, [LH_P3 1 0 1]), _lh_pidgits_arg1²)
//│ def replicate_₀(_lh_replicate_arg1², _lh_replicate_arg2²) = if (_lh_replicate_arg1² > 0) then 
//│ 	let t⁴⁶ = replicate_₀((_lh_replicate_arg1² - 1), _lh_replicate_arg2²)
//│ 	in let h⁴⁴ = _lh_replicate_arg2²
//│ 	in (fun _lh_dummy¹ -> mappend_₀(h⁴⁴, concat_₀(t⁴⁶))) else (fun _lh_dummy² -> (fun ys⁴¹ -> ys⁴¹))
//│ def splitAt_lz_₀(_lh_splitAt_lz_arg1², _lh_splitAt_lz_arg2²) = 
//│ 	let _lh_percOp_LH_P2_1² = drop_lz_₀(_lh_splitAt_lz_arg1², _lh_splitAt_lz_arg2²)
//│ 	in let _lh_percOp_LH_P2_0² = take_lz_₀(_lh_splitAt_lz_arg1², _lh_splitAt_lz_arg2²)
//│ 	in (fun _lh_percOp_arg3² -> (fun j² -> mappend_₂(mappend_₃(concat_₀(_lh_percOp_LH_P2_0²), mappend_₄(
//│ 		let t³⁵ = 	
//│ 			let t³⁷ = (fun ys²⁵ -> ys²⁵)
//│ 			in let h³⁵ = ':'
//│ 			in (fun ys²³ -> 
//│ 				let t³⁸ = mappend_₄(t³⁷, ys²³)
//│ 				in let h³⁶ = h³⁵
//│ 				in (fun ys²⁴ -> [LH_C h³⁶ mappend_₂(t³⁸, ys²⁴)]))
//│ 		in let h³³ = 't'
//│ 		in (fun ys²¹ -> 
//│ 			let t³⁶ = mappend_₄(t³⁵, ys²¹)
//│ 			in let h³⁴ = h³³
//│ 			in (fun ys²² -> [LH_C h³⁴ mappend_₂(t³⁶, ys²²)])), mappend_₅(string_of_int⁰(j²), 
//│ 		let t³⁹ = (fun ys²⁷ -> ys²⁷)
//│ 		in let h³⁷ = 'n'
//│ 		in (fun ys²⁶ -> [LH_C h³⁷ mappend_₂(t³⁹, ys²⁶)])))), percOp_₀(j², _lh_percOp_LH_P2_1², _lh_percOp_arg3²))))
//│ def take_lz_₀(n⁷, ls²²) = if (n⁷ > 0) then case force⁰(ls²²) of {
//│ 	LH_C h²⁷ t²⁹ => 
//│ 		let t⁴⁷ = take_lz_₀((n⁷ - 1), t²⁹)
//│ 		in let h⁴⁵ = h²⁷
//│ 		in (fun _lh_dummy³ -> mappend_₀(h⁴⁵, concat_₀(t⁴⁷)))
//│ 	| LH_N  => (fun _lh_dummy⁴ -> (fun ys⁴² -> ys⁴²))} else (fun _lh_dummy⁵ -> (fun ys⁴³ -> ys⁴³))
//│ def take_lz_₁(n⁶, ls²¹) = if (n⁶ > 0) then case force⁰(ls²¹) of {
//│ 	LH_C h²² t²⁴ => 
//│ 		let t³¹ = take_lz_₁((n⁶ - 1), t²⁴)
//│ 		in let h²⁹ = h²²
//│ 		in (fun ys¹⁵ -> 
//│ 			let t³² = mappend_₁(t³¹, ys¹⁵)
//│ 			in let h³⁰ = h²⁹
//│ 			in (fun _lh_dummy⁰ -> mappend_₀(h³⁰, concat_₀(t³²))))
//│ 	| LH_N  => (fun ys¹⁶ -> ys¹⁶)} else (fun ys¹⁷ -> ys¹⁷)
//│ def testPiDigits_nofib_₀(_lh_testPiDigits_nofib_arg1²) = pidgits_₀(_lh_testPiDigits_nofib_arg1²)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

