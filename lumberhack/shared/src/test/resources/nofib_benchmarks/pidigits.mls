:NewParser
:ParseOnly

// pidgits n = 0 % (0 # (1,0,1)) where
//   i%ds
//      | i >= n = []
//      | True = (concat h ++ "\t:" ++ show j ++ "\n") ++ j%t
//      where k = i+10;
//            j = min n k;
//            (h,t) | k > n = (take (n`mod`10) ds ++ replicate (k-n) " ",[])
//                  | True = splitAt 10 ds
//   j # s
//      | n>a || r+n>=d = k # t
//      | True = show q : k # (n*10,(a-(q*d))*10,d)
//      where k = j+1; 
//            t@(n,a,d) = k&s; 
//            (q,r) = (n*3+a) `divMod` d
//   j&(n,a,d) = (n*j,(a+n*2)*y,d*y) where y=(j*2+1)

:lhNoIter
:lhInHaskell
:lhGenOCaml
drop_lz n ls = if n > 0 then lazy (case (force ls) of { [] -> []; (h:t) -> force (drop_lz (n - 1) t) }) else ls
splitAt_lz n xs = (take_lz n xs, drop_lz n xs)
min a b = if a > b then b else a
replicate n x = if n > 0 then (x:(replicate (n - 1) x)) else []
divmod a b = ((a `div` b), (a `mod` b))
percOp i ds n =
  if i >= n then
    []
  else
    let k = (i + 10) in
          let j = (min n k) in
                case (if k > n then ((take_lz (n `mod` 10) ds) ++ (replicate (k-n) " "), (lazy [])) else (splitAt_lz 10 ds)) of {
                  (h, t) -> (concat h) ++ ("t:" ++ ((string_of_int j) ++ "n")) ++ (percOp j t n)
                }
hashOp j s =
  lazy (let k = j + 1 in
      case (ampOp k s) of {
        (n, a, d) -> case (divmod ((n * 3) + a) d) of {
          (q, r) -> if ((n > a) || ((r + n) >= d)) then (force (hashOp k (n, a, d))) else ((string_of_int q) : (hashOp k (n*10, (a-(q*d))*10, d)))
        }
      })
ampOp j (n,a,d) = let y = ((j * 2) + 1) in (n * j, (a + (n * 2)) * y, d * y)
pidgits n = percOp 0 (hashOp 0 (1,0,1)) n
testPiDigits_nofib n = pidgits n
testPiDigits_nofib $ primId 5000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ testPiDigits_nofib_lh^382(primId⁰(5000))
//│ def ampOp_lh(_lh_ampOp_arg1⁰, _lh_ampOp_arg2⁰) = case _lh_ampOp_arg2⁰ of {
//│ 	LH_P3 _lh_ampOp_LH_P3_0⁰ _lh_ampOp_LH_P3_1⁰ _lh_ampOp_LH_P3_2⁰ => 
//│ 		let y⁰ = ((_lh_ampOp_arg1⁰ * 2) + 1)
//│ 		in [LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1⁰) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y⁰) (_lh_ampOp_LH_P3_2⁰ * y⁰)]
//│ 	| _  => error⁰}
//│ def concat_lh(lss⁰) = case lss⁰ of {
//│ 	LH_C h² t² => mappend_lh^39(h², concat_lh^42(t²))
//│ 	| LH_N  => [LH_N]}
//│ def divmod_lh(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) = [LH_P2 div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)]
//│ def drop_lz_lh(_lh_drop_lz_arg1⁰, _lh_drop_lz_arg2⁰) = if (_lh_drop_lz_arg1⁰ > 0) then lazy⁰(
//│ 	let _lh_matchIdent⁰ = force⁰(_lh_drop_lz_arg2⁰)
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => force⁰(drop_lz_lh^65((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰))
//│ 		| _  => error⁰}) else _lh_drop_lz_arg2⁰
//│ def hashOp_lh(_lh_hashOp_arg1⁰, _lh_hashOp_arg2⁰) = lazy⁰(
//│ 	let k¹ = (_lh_hashOp_arg1⁰ + 1)
//│ 	in let _lh_matchIdent² = ampOp_lh^296(k¹, _lh_hashOp_arg2⁰)
//│ 	in case _lh_matchIdent² of {
//│ 		LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰ => 
//│ 			let _lh_matchIdent³ = divmod_lh^302(((_lh_hashOp_LH_P3_0⁰ * 3) + _lh_hashOp_LH_P3_1⁰), _lh_hashOp_LH_P3_2⁰)
//│ 			in case _lh_matchIdent³ of {
//│ 				LH_P2 _lh_hashOp_LH_P2_0⁰ _lh_hashOp_LH_P2_1⁰ => if ((_lh_hashOp_LH_P3_0⁰ > _lh_hashOp_LH_P3_1⁰) || ((_lh_hashOp_LH_P2_1⁰ + _lh_hashOp_LH_P3_0⁰) >= _lh_hashOp_LH_P3_2⁰)) then force⁰(hashOp_lh^334(k¹, [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh^346(k¹, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰})
//│ def mappend_lh(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ mappend_lh^28(t¹, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def min_lh(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ > _lh_min_arg2⁰) then _lh_min_arg2⁰ else _lh_min_arg1⁰
//│ def percOp_lh(_lh_percOp_arg1⁰, _lh_percOp_arg2⁰, _lh_percOp_arg3⁰) = if (_lh_percOp_arg1⁰ >= _lh_percOp_arg3⁰) then [LH_N] else 
//│ 	let k⁰ = (_lh_percOp_arg1⁰ + 10)
//│ 	in let j⁰ = min_lh^178(_lh_percOp_arg3⁰, k⁰)
//│ 	in let _lh_matchIdent¹ = if (k⁰ > _lh_percOp_arg3⁰) then [LH_P2 mappend_lh^188(take_lz_lh^189((_lh_percOp_arg3⁰ % 10), _lh_percOp_arg2⁰), replicate_lh^199((k⁰ - _lh_percOp_arg3⁰), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])] else splitAt_lz_lh^215(10, _lh_percOp_arg2⁰)
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_P2 _lh_percOp_LH_P2_0⁰ _lh_percOp_LH_P2_1⁰ => mappend_lh^222(mappend_lh^223(concat_lh^224(_lh_percOp_LH_P2_0⁰), mappend_lh^228([LH_C 't' [LH_C ':' [LH_N]]], mappend_lh^235(string_of_int⁰(j⁰), [LH_C 'n' [LH_N]]))), percOp_lh^247(j⁰, _lh_percOp_LH_P2_1⁰, _lh_percOp_arg3⁰))
//│ 		| _  => error⁰}
//│ def pidgits_lh(_lh_pidgits_arg1⁰) = percOp_lh^113(0, hashOp_lh^116(0, [LH_P3 1 0 1]), _lh_pidgits_arg1⁰)
//│ def replicate_lh(_lh_replicate_arg1⁰, _lh_replicate_arg2⁰) = if (_lh_replicate_arg1⁰ > 0) then [LH_C _lh_replicate_arg2⁰ replicate_lh^99((_lh_replicate_arg1⁰ - 1), _lh_replicate_arg2⁰)] else [LH_N]
//│ def splitAt_lz_lh(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) = [LH_P2 take_lz_lh^277(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) drop_lz_lh^282(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)]
//│ def take_lz_lh(n⁰, ls⁰) = if (n⁰ > 0) then case force⁰(ls⁰) of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ take_lz_lh^10((n⁰ - 1), t⁰)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPiDigits_nofib_lh(_lh_testPiDigits_nofib_arg1⁰) = pidgits_lh^49(_lh_testPiDigits_nofib_arg1⁰)
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec take_lz_lh n_0 ls_0 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match (Lazy.force ls_0) with
//│ 		      | `LH_C(h_0, t_0) -> 
//│ 		        (`LH_C(h_0, ((take_lz_lh (n_0 - 1)) t_0)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec min_lh _lh_min_arg1_0 _lh_min_arg2_0 =
//│ 		  (if (_lh_min_arg1_0 > _lh_min_arg2_0) then
//│ 		    _lh_min_arg2_0
//│ 		  else
//│ 		    _lh_min_arg1_0);;
//│ 		let rec drop_lz_lh _lh_drop_lz_arg1_0 _lh_drop_lz_arg2_0 =
//│ 		  (if (_lh_drop_lz_arg1_0 > 0) then
//│ 		    (lazy (let rec _lh_matchIdent_0 = (Lazy.force _lh_drop_lz_arg2_0) in
//│ 		      (match _lh_matchIdent_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_N)
//│ 		        | `LH_C(_lh_drop_lz_LH_C_0_0, _lh_drop_lz_LH_C_1_0) -> 
//│ 		          (Lazy.force ((drop_lz_lh (_lh_drop_lz_arg1_0 - 1)) _lh_drop_lz_LH_C_1_0))
//│ 		        | _ -> 
//│ 		          (failwith "error"))))
//│ 		  else
//│ 		    _lh_drop_lz_arg2_0);;
//│ 		let rec replicate_lh _lh_replicate_arg1_0 _lh_replicate_arg2_0 =
//│ 		  (if (_lh_replicate_arg1_0 > 0) then
//│ 		    (`LH_C(_lh_replicate_arg2_0, ((replicate_lh (_lh_replicate_arg1_0 - 1)) _lh_replicate_arg2_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec mappend_lh xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (`LH_C(h_1, ((mappend_lh t_1) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec divmod_lh _lh_divmod_arg1_0 _lh_divmod_arg2_0 =
//│ 		  (`LH_P2((_lh_divmod_arg1_0 / _lh_divmod_arg2_0), (_lh_divmod_arg1_0 mod _lh_divmod_arg2_0)));;
//│ 		let rec ampOp_lh _lh_ampOp_arg1_0 _lh_ampOp_arg2_0 =
//│ 		  (match _lh_ampOp_arg2_0 with
//│ 		    | `LH_P3(_lh_ampOp_LH_P3_0_0, _lh_ampOp_LH_P3_1_0, _lh_ampOp_LH_P3_2_0) -> 
//│ 		      (let rec y_0 = ((_lh_ampOp_arg1_0 * 2) + 1) in
//│ 		        (`LH_P3((_lh_ampOp_LH_P3_0_0 * _lh_ampOp_arg1_0), ((_lh_ampOp_LH_P3_1_0 + (_lh_ampOp_LH_P3_0_0 * 2)) * y_0), (_lh_ampOp_LH_P3_2_0 * y_0))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec splitAt_lz_lh _lh_splitAt_lz_arg1_0 _lh_splitAt_lz_arg2_0 =
//│ 		  (`LH_P2(((take_lz_lh _lh_splitAt_lz_arg1_0) _lh_splitAt_lz_arg2_0), ((drop_lz_lh _lh_splitAt_lz_arg1_0) _lh_splitAt_lz_arg2_0)));;
//│ 		let rec concat_lh lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      ((mappend_lh h_2) (concat_lh t_2))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec hashOp_lh _lh_hashOp_arg1_0 _lh_hashOp_arg2_0 =
//│ 		  (lazy (let rec k_1 = (_lh_hashOp_arg1_0 + 1) in
//│ 		    (let rec _lh_matchIdent_2 = ((ampOp_lh k_1) _lh_hashOp_arg2_0) in
//│ 		      (match _lh_matchIdent_2 with
//│ 		        | `LH_P3(_lh_hashOp_LH_P3_0_0, _lh_hashOp_LH_P3_1_0, _lh_hashOp_LH_P3_2_0) -> 
//│ 		          (let rec _lh_matchIdent_3 = ((divmod_lh ((_lh_hashOp_LH_P3_0_0 * 3) + _lh_hashOp_LH_P3_1_0)) _lh_hashOp_LH_P3_2_0) in
//│ 		            (match _lh_matchIdent_3 with
//│ 		              | `LH_P2(_lh_hashOp_LH_P2_0_0, _lh_hashOp_LH_P2_1_0) -> 
//│ 		                (if ((_lh_hashOp_LH_P3_0_0 > _lh_hashOp_LH_P3_1_0) || ((_lh_hashOp_LH_P2_1_0 + _lh_hashOp_LH_P3_0_0) >= _lh_hashOp_LH_P3_2_0)) then
//│ 		                  (Lazy.force ((hashOp_lh k_1) (`LH_P3(_lh_hashOp_LH_P3_0_0, _lh_hashOp_LH_P3_1_0, _lh_hashOp_LH_P3_2_0))))
//│ 		                else
//│ 		                  (`LH_C((string_of_int _lh_hashOp_LH_P2_0_0), ((hashOp_lh k_1) (`LH_P3((_lh_hashOp_LH_P3_0_0 * 10), ((_lh_hashOp_LH_P3_1_0 - (_lh_hashOp_LH_P2_0_0 * _lh_hashOp_LH_P3_2_0)) * 10), _lh_hashOp_LH_P3_2_0))))))
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        | _ -> 
//│ 		          (failwith "error")))));;
//│ 		let rec percOp_lh _lh_percOp_arg1_0 _lh_percOp_arg2_0 _lh_percOp_arg3_0 =
//│ 		  (if (_lh_percOp_arg1_0 >= _lh_percOp_arg3_0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (let rec k_0 = (_lh_percOp_arg1_0 + 10) in
//│ 		      (let rec j_0 = ((min_lh _lh_percOp_arg3_0) k_0) in
//│ 		        (let rec _lh_matchIdent_1 = (if (k_0 > _lh_percOp_arg3_0) then
//│ 		          (`LH_P2(((mappend_lh ((take_lz_lh (_lh_percOp_arg3_0 mod 10)) _lh_percOp_arg2_0)) ((replicate_lh (k_0 - _lh_percOp_arg3_0)) (`LH_C(' ', (`LH_N))))), (lazy (`LH_N))))
//│ 		        else
//│ 		          ((splitAt_lz_lh 10) _lh_percOp_arg2_0)) in
//│ 		          (match _lh_matchIdent_1 with
//│ 		            | `LH_P2(_lh_percOp_LH_P2_0_0, _lh_percOp_LH_P2_1_0) -> 
//│ 		              ((mappend_lh ((mappend_lh (concat_lh _lh_percOp_LH_P2_0_0)) ((mappend_lh (`LH_C('t', (`LH_C(':', (`LH_N)))))) ((mappend_lh (string_of_int j_0)) (`LH_C('n', (`LH_N))))))) (((percOp_lh j_0) _lh_percOp_LH_P2_1_0) _lh_percOp_arg3_0))
//│ 		            | _ -> 
//│ 		              (failwith "error"))))));;
//│ 		let rec pidgits_lh _lh_pidgits_arg1_0 =
//│ 		  (((percOp_lh 0) ((hashOp_lh 0) (`LH_P3(1, 0, 1)))) _lh_pidgits_arg1_0);;
//│ 		let rec testPiDigits_nofib_lh _lh_testPiDigits_nofib_arg1_0 =
//│ 		  (pidgits_lh _lh_testPiDigits_nofib_arg1_0);;
//│ 		(testPiDigits_nofib_lh 5000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C h⁰ take_lz_lh((n⁰ - 1), t⁰)]: 19 --->
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys⁰)] | LH_N  => ys⁰}: 35
//│ 	case lss⁰ of {LH_C h² t² => mappend_lh(h², concat_lh(t²)) | LH_N  => [LH_N]}: 47
//│ [LH_N]: 20 --->
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys⁰)] | LH_N  => ys⁰}: 35
//│ 	case lss⁰ of {LH_C h² t² => mappend_lh(h², concat_lh(t²)) | LH_N  => [LH_N]}: 47
//│ [LH_N]: 22 --->
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys⁰)] | LH_N  => ys⁰}: 35
//│ 	case lss⁰ of {LH_C h² t² => mappend_lh(h², concat_lh(t²)) | LH_N  => [LH_N]}: 47
//│ [LH_C h¹ mappend_lh(t¹, ys⁰)]: 33 --->
//│ 	NoCons
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys⁰)] | LH_N  => ys⁰}: 35
//│ 	case lss⁰ of {LH_C h² t² => mappend_lh(h², concat_lh(t²)) | LH_N  => [LH_N]}: 47
//│ [LH_N]: 46 --->
//│ 	NoCons
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys⁰)] | LH_N  => ys⁰}: 35
//│ 	case lss⁰ of {LH_C h² t² => mappend_lh(h², concat_lh(t²)) | LH_N  => [LH_N]}: 47
//│ [LH_N]: 63 --->
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C h⁰ take_lz_lh((n⁰ - 1), t⁰)] | LH_N  => [LH_N]}: 21
//│ 	case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => force⁰(drop_lz_lh((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰)) | _  => error⁰}: 76
//│ [LH_C _lh_replicate_arg2⁰ replicate_lh((_lh_replicate_arg1⁰ - 1), _lh_replicate_arg2⁰)]: 108 --->
//│ 	NoCons
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys⁰)] | LH_N  => ys⁰}: 35
//│ 	case lss⁰ of {LH_C h² t² => mappend_lh(h², concat_lh(t²)) | LH_N  => [LH_N]}: 47
//│ [LH_N]: 109 --->
//│ 	NoCons
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys⁰)] | LH_N  => ys⁰}: 35
//│ 	case lss⁰ of {LH_C h² t² => mappend_lh(h², concat_lh(t²)) | LH_N  => [LH_N]}: 47
//│ [LH_P3 1 0 1]: 122 --->
//│ 	case _lh_ampOp_arg2⁰ of {LH_P3 _lh_ampOp_LH_P3_0⁰ _lh_ampOp_LH_P3_1⁰ _lh_ampOp_LH_P3_2⁰ => let y⁰ = ((_lh_ampOp_arg1⁰ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1⁰) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y⁰) (_lh_ampOp_LH_P3_2⁰ * y⁰)] | _  => error⁰}: 164
//│ [LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1⁰) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y⁰) (_lh_ampOp_LH_P3_2⁰ * y⁰)]: 161 --->
//│ 	case _lh_matchIdent² of {LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰ => let _lh_matchIdent³ = divmod_lh(((_lh_hashOp_LH_P3_0⁰ * 3) + _lh_hashOp_LH_P3_1⁰), _lh_hashOp_LH_P3_2⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_hashOp_LH_P2_0⁰ _lh_hashOp_LH_P2_1⁰ => if ((_lh_hashOp_LH_P3_0⁰ > _lh_hashOp_LH_P3_1⁰) || ((_lh_hashOp_LH_P2_1⁰ + _lh_hashOp_LH_P3_0⁰) >= _lh_hashOp_LH_P3_2⁰)) then force⁰(hashOp_lh(k¹, [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh(k¹, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])] | _  => error⁰} | _  => error⁰}: 376
//│ [LH_N]: 172 --->
//│ 	NoCons
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys⁰)] | LH_N  => ys⁰}: 35
//│ 	case lss⁰ of {LH_C h² t² => mappend_lh(h², concat_lh(t²)) | LH_N  => [LH_N]}: 47
//│ [LH_N]: 207 --->
//│ 	NoCons
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys⁰)] | LH_N  => ys⁰}: 35
//│ [LH_C ' ' [LH_N]]: 208 --->
//│ 	NoCons
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys⁰)] | LH_N  => ys⁰}: 35
//│ [LH_N]: 212 --->
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C h⁰ take_lz_lh((n⁰ - 1), t⁰)] | LH_N  => [LH_N]}: 21
//│ 	case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => force⁰(drop_lz_lh((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰)) | _  => error⁰}: 76
//│ [LH_P2 mappend_lh(take_lz_lh((_lh_percOp_arg3⁰ % 10), _lh_percOp_arg2⁰), replicate_lh((k⁰ - _lh_percOp_arg3⁰), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])]: 214 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_percOp_LH_P2_0⁰ _lh_percOp_LH_P2_1⁰ => mappend_lh(mappend_lh(concat_lh(_lh_percOp_LH_P2_0⁰), mappend_lh([LH_C 't' [LH_C ':' [LH_N]]], mappend_lh(string_of_int⁰(j⁰), [LH_C 'n' [LH_N]]))), percOp_lh(j⁰, _lh_percOp_LH_P2_1⁰, _lh_percOp_arg3⁰)) | _  => error⁰}: 256
//│ [LH_N]: 231 --->
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys⁰)] | LH_N  => ys⁰}: 35
//│ [LH_C ':' [LH_N]]: 232 --->
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys⁰)] | LH_N  => ys⁰}: 35
//│ [LH_C 't' [LH_C ':' [LH_N]]]: 233 --->
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys⁰)] | LH_N  => ys⁰}: 35
//│ [LH_N]: 241 --->
//│ 	NoCons
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys⁰)] | LH_N  => ys⁰}: 35
//│ 	case lss⁰ of {LH_C h² t² => mappend_lh(h², concat_lh(t²)) | LH_N  => [LH_N]}: 47
//│ [LH_C 'n' [LH_N]]: 242 --->
//│ 	NoCons
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys⁰)] | LH_N  => ys⁰}: 35
//│ 	case lss⁰ of {LH_C h² t² => mappend_lh(h², concat_lh(t²)) | LH_N  => [LH_N]}: 47
//│ [LH_P2 div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)]: 274 --->
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_hashOp_LH_P2_0⁰ _lh_hashOp_LH_P2_1⁰ => if ((_lh_hashOp_LH_P3_0⁰ > _lh_hashOp_LH_P3_1⁰) || ((_lh_hashOp_LH_P2_1⁰ + _lh_hashOp_LH_P3_0⁰) >= _lh_hashOp_LH_P3_2⁰)) then force⁰(hashOp_lh(k¹, [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh(k¹, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])] | _  => error⁰}: 373
//│ [LH_P2 take_lz_lh(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) drop_lz_lh(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)]: 287 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_percOp_LH_P2_0⁰ _lh_percOp_LH_P2_1⁰ => mappend_lh(mappend_lh(concat_lh(_lh_percOp_LH_P2_0⁰), mappend_lh([LH_C 't' [LH_C ':' [LH_N]]], mappend_lh(string_of_int⁰(j⁰), [LH_C 'n' [LH_N]]))), percOp_lh(j⁰, _lh_percOp_LH_P2_1⁰, _lh_percOp_arg3⁰)) | _  => error⁰}: 256
//│ [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰]: 340 --->
//│ 	case _lh_ampOp_arg2⁰ of {LH_P3 _lh_ampOp_LH_P3_0⁰ _lh_ampOp_LH_P3_1⁰ _lh_ampOp_LH_P3_2⁰ => let y⁰ = ((_lh_ampOp_arg1⁰ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1⁰) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y⁰) (_lh_ampOp_LH_P3_2⁰ * y⁰)] | _  => error⁰}: 164
//│ [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰]: 368 --->
//│ 	case _lh_ampOp_arg2⁰ of {LH_P3 _lh_ampOp_LH_P3_0⁰ _lh_ampOp_LH_P3_1⁰ _lh_ampOp_LH_P3_2⁰ => let y⁰ = ((_lh_ampOp_arg1⁰ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1⁰) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y⁰) (_lh_ampOp_LH_P3_2⁰ * y⁰)] | _  => error⁰}: 164
//│ [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh(k¹, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])]: 370 --->
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C h⁰ take_lz_lh((n⁰ - 1), t⁰)] | LH_N  => [LH_N]}: 21
//│ 	case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => force⁰(drop_lz_lh((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰)) | _  => error⁰}: 76
//│ ------------------
//│ case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C h⁰ take_lz_lh((n⁰ - 1), t⁰)] | LH_N  => [LH_N]}: 21 --->
//│ 	[LH_N]: 63
//│ 	[LH_N]: 212
//│ 	[LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh(k¹, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])]: 370
//│ case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys⁰)] | LH_N  => ys⁰}: 35 --->
//│ 	NoProd
//│ 	[LH_C h⁰ take_lz_lh((n⁰ - 1), t⁰)]: 19
//│ 	[LH_N]: 20
//│ 	[LH_N]: 22
//│ 	[LH_C h¹ mappend_lh(t¹, ys⁰)]: 33
//│ 	[LH_N]: 46
//│ 	[LH_C _lh_replicate_arg2⁰ replicate_lh((_lh_replicate_arg1⁰ - 1), _lh_replicate_arg2⁰)]: 108
//│ 	[LH_N]: 109
//│ 	[LH_N]: 172
//│ 	[LH_N]: 207
//│ 	[LH_C ' ' [LH_N]]: 208
//│ 	[LH_N]: 231
//│ 	[LH_C ':' [LH_N]]: 232
//│ 	[LH_C 't' [LH_C ':' [LH_N]]]: 233
//│ 	[LH_N]: 241
//│ 	[LH_C 'n' [LH_N]]: 242
//│ case lss⁰ of {LH_C h² t² => mappend_lh(h², concat_lh(t²)) | LH_N  => [LH_N]}: 47 --->
//│ 	[LH_C h⁰ take_lz_lh((n⁰ - 1), t⁰)]: 19
//│ 	[LH_N]: 20
//│ 	[LH_N]: 22
//│ 	[LH_C h¹ mappend_lh(t¹, ys⁰)]: 33
//│ 	[LH_N]: 46
//│ 	[LH_C _lh_replicate_arg2⁰ replicate_lh((_lh_replicate_arg1⁰ - 1), _lh_replicate_arg2⁰)]: 108
//│ 	[LH_N]: 109
//│ 	[LH_N]: 172
//│ 	[LH_N]: 241
//│ 	[LH_C 'n' [LH_N]]: 242
//│ case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => force⁰(drop_lz_lh((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰)) | _  => error⁰}: 76 --->
//│ 	[LH_N]: 63
//│ 	[LH_N]: 212
//│ 	[LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh(k¹, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])]: 370
//│ case _lh_ampOp_arg2⁰ of {LH_P3 _lh_ampOp_LH_P3_0⁰ _lh_ampOp_LH_P3_1⁰ _lh_ampOp_LH_P3_2⁰ => let y⁰ = ((_lh_ampOp_arg1⁰ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1⁰) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y⁰) (_lh_ampOp_LH_P3_2⁰ * y⁰)] | _  => error⁰}: 164 --->
//│ 	[LH_P3 1 0 1]: 122
//│ 	[LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰]: 340
//│ 	[LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰]: 368
//│ case _lh_matchIdent¹ of {LH_P2 _lh_percOp_LH_P2_0⁰ _lh_percOp_LH_P2_1⁰ => mappend_lh(mappend_lh(concat_lh(_lh_percOp_LH_P2_0⁰), mappend_lh([LH_C 't' [LH_C ':' [LH_N]]], mappend_lh(string_of_int⁰(j⁰), [LH_C 'n' [LH_N]]))), percOp_lh(j⁰, _lh_percOp_LH_P2_1⁰, _lh_percOp_arg3⁰)) | _  => error⁰}: 256 --->
//│ 	[LH_P2 mappend_lh(take_lz_lh((_lh_percOp_arg3⁰ % 10), _lh_percOp_arg2⁰), replicate_lh((k⁰ - _lh_percOp_arg3⁰), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])]: 214
//│ 	[LH_P2 take_lz_lh(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) drop_lz_lh(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)]: 287
//│ case _lh_matchIdent³ of {LH_P2 _lh_hashOp_LH_P2_0⁰ _lh_hashOp_LH_P2_1⁰ => if ((_lh_hashOp_LH_P3_0⁰ > _lh_hashOp_LH_P3_1⁰) || ((_lh_hashOp_LH_P2_1⁰ + _lh_hashOp_LH_P3_0⁰) >= _lh_hashOp_LH_P3_2⁰)) then force⁰(hashOp_lh(k¹, [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh(k¹, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])] | _  => error⁰}: 373 --->
//│ 	[LH_P2 div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)]: 274
//│ case _lh_matchIdent² of {LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰ => let _lh_matchIdent³ = divmod_lh(((_lh_hashOp_LH_P3_0⁰ * 3) + _lh_hashOp_LH_P3_1⁰), _lh_hashOp_LH_P3_2⁰)
//│ in case _lh_matchIdent³ of {LH_P2 _lh_hashOp_LH_P2_0⁰ _lh_hashOp_LH_P2_1⁰ => if ((_lh_hashOp_LH_P3_0⁰ > _lh_hashOp_LH_P3_1⁰) || ((_lh_hashOp_LH_P2_1⁰ + _lh_hashOp_LH_P3_0⁰) >= _lh_hashOp_LH_P3_2⁰)) then force⁰(hashOp_lh(k¹, [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh(k¹, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])] | _  => error⁰} | _  => error⁰}: 376 --->
//│ 	[LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1⁰) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y⁰) (_lh_ampOp_LH_P3_2⁰ * y⁰)]: 161
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_P2 mappend_lh(take_lz_lh((_lh_percOp_arg3⁰ % 10), _lh_percOp_arg2⁰), replicate_lh((k⁰ - _lh_percOp_arg3⁰), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])]: 214 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_percOp_LH_P2_0⁰ _lh_percOp_LH_P2_1⁰ => mappend_lh(mappend_lh(concat_lh(_lh_percOp_LH_P2_0⁰), mappend_lh([LH_C 't' [LH_C ':' [LH_N]]], mappend_lh(string_of_int⁰(j⁰), [LH_C 'n' [LH_N]]))), percOp_lh(j⁰, _lh_percOp_LH_P2_1⁰, _lh_percOp_arg3⁰)) | _  => error⁰}: 256
//│ [LH_P2 div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)]: 274 --->
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_hashOp_LH_P2_0⁰ _lh_hashOp_LH_P2_1⁰ => if ((_lh_hashOp_LH_P3_0⁰ > _lh_hashOp_LH_P3_1⁰) || ((_lh_hashOp_LH_P2_1⁰ + _lh_hashOp_LH_P3_0⁰) >= _lh_hashOp_LH_P3_2⁰)) then force⁰(hashOp_lh(k¹, [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh(k¹, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])] | _  => error⁰}: 373
//│ [LH_P2 take_lz_lh(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) drop_lz_lh(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)]: 287 --->
//│ 	case _lh_matchIdent¹ of {LH_P2 _lh_percOp_LH_P2_0⁰ _lh_percOp_LH_P2_1⁰ => mappend_lh(mappend_lh(concat_lh(_lh_percOp_LH_P2_0⁰), mappend_lh([LH_C 't' [LH_C ':' [LH_N]]], mappend_lh(string_of_int⁰(j⁰), [LH_C 'n' [LH_N]]))), percOp_lh(j⁰, _lh_percOp_LH_P2_1⁰, _lh_percOp_arg3⁰)) | _  => error⁰}: 256
//│ ------------------
//│ case _lh_matchIdent¹ of {LH_P2 _lh_percOp_LH_P2_0⁰ _lh_percOp_LH_P2_1⁰ => mappend_lh(mappend_lh(concat_lh(_lh_percOp_LH_P2_0⁰), mappend_lh([LH_C 't' [LH_C ':' [LH_N]]], mappend_lh(string_of_int⁰(j⁰), [LH_C 'n' [LH_N]]))), percOp_lh(j⁰, _lh_percOp_LH_P2_1⁰, _lh_percOp_arg3⁰)) | _  => error⁰}: 256 --->
//│ 	[LH_P2 mappend_lh(take_lz_lh((_lh_percOp_arg3⁰ % 10), _lh_percOp_arg2⁰), replicate_lh((k⁰ - _lh_percOp_arg3⁰), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])]: 214
//│ 	[LH_P2 take_lz_lh(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) drop_lz_lh(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)]: 287
//│ case _lh_matchIdent³ of {LH_P2 _lh_hashOp_LH_P2_0⁰ _lh_hashOp_LH_P2_1⁰ => if ((_lh_hashOp_LH_P3_0⁰ > _lh_hashOp_LH_P3_1⁰) || ((_lh_hashOp_LH_P2_1⁰ + _lh_hashOp_LH_P3_0⁰) >= _lh_hashOp_LH_P3_2⁰)) then force⁰(hashOp_lh(k¹, [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh(k¹, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])] | _  => error⁰}: 373 --->
//│ 	[LH_P2 div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)]: 274
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testPiDigits_nofib_lh(primId⁰(5000))
//│ def ampOp_lh(_lh_ampOp_arg1¹, _lh_ampOp_arg2¹) = case _lh_ampOp_arg2¹ of {
//│ 	LH_P3 _lh_ampOp_LH_P3_0⁰ _lh_ampOp_LH_P3_1⁰ _lh_ampOp_LH_P3_2⁰ => 
//│ 		let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ 		in [LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y¹) (_lh_ampOp_LH_P3_2⁰ * y¹)]
//│ 	| _  => error⁰}
//│ def concat_lh(lss¹) = case lss¹ of {
//│ 	LH_C h² t² => mappend_lh(h², concat_lh(t²))
//│ 	| LH_N  => [LH_N]}
//│ def divmod_lh(_lh_divmod_arg1¹, _lh_divmod_arg2¹) = 
//│ 	let _lh_hashOp_LH_P2_1¹ = (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)
//│ 	in let _lh_hashOp_LH_P2_0¹ = div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹)
//│ 	in (fun _lh_hashOp_LH_P3_0¹ -> (fun _lh_hashOp_LH_P3_1¹ -> (fun _lh_hashOp_LH_P3_2¹ -> (fun k² -> if ((_lh_hashOp_LH_P3_0¹ > _lh_hashOp_LH_P3_1¹) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0¹) >= _lh_hashOp_LH_P3_2¹)) then force⁰(hashOp_lh(k², [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_lh(k², [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])]))))
//│ def drop_lz_lh(_lh_drop_lz_arg1¹, _lh_drop_lz_arg2¹) = if (_lh_drop_lz_arg1¹ > 0) then lazy⁰(
//│ 	let _lh_matchIdent⁷ = force⁰(_lh_drop_lz_arg2¹)
//│ 	in case _lh_matchIdent⁷ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => force⁰(drop_lz_lh((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1⁰))
//│ 		| _  => error⁰}) else _lh_drop_lz_arg2¹
//│ def hashOp_lh(_lh_hashOp_arg1¹, _lh_hashOp_arg2¹) = lazy⁰(
//│ 	let k⁴ = (_lh_hashOp_arg1¹ + 1)
//│ 	in let _lh_matchIdent⁵ = ampOp_lh(k⁴, _lh_hashOp_arg2¹)
//│ 	in case _lh_matchIdent⁵ of {
//│ 		LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰ => 
//│ 			let _lh_matchIdent⁶ = divmod_lh(((_lh_hashOp_LH_P3_0⁰ * 3) + _lh_hashOp_LH_P3_1⁰), _lh_hashOp_LH_P3_2⁰)
//│ 			in _lh_matchIdent⁶(_lh_hashOp_LH_P3_0⁰, _lh_hashOp_LH_P3_1⁰, _lh_hashOp_LH_P3_2⁰, k⁴)
//│ 		| _  => error⁰})
//│ def mappend_lh(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ mappend_lh(t¹, ys¹)]
//│ 	| LH_N  => ys¹}
//│ def min_lh(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ def percOp_lh(_lh_percOp_arg1¹, _lh_percOp_arg2¹, _lh_percOp_arg3¹) = if (_lh_percOp_arg1¹ >= _lh_percOp_arg3¹) then [LH_N] else 
//│ 	let k³ = (_lh_percOp_arg1¹ + 10)
//│ 	in let j¹ = min_lh(_lh_percOp_arg3¹, k³)
//│ 	in let _lh_matchIdent⁴ = if (k³ > _lh_percOp_arg3¹) then 
//│ 		let _lh_percOp_LH_P2_1¹ = lazy⁰([LH_N])
//│ 		in let _lh_percOp_LH_P2_0¹ = mappend_lh(take_lz_lh((_lh_percOp_arg3¹ % 10), _lh_percOp_arg2¹), replicate_lh((k³ - _lh_percOp_arg3¹), [LH_C ' ' [LH_N]]))
//│ 		in (fun _lh_percOp_arg3² -> (fun j² -> mappend_lh(mappend_lh(concat_lh(_lh_percOp_LH_P2_0¹), mappend_lh([LH_C 't' [LH_C ':' [LH_N]]], mappend_lh(string_of_int⁰(j²), [LH_C 'n' [LH_N]]))), percOp_lh(j², _lh_percOp_LH_P2_1¹, _lh_percOp_arg3²)))) else splitAt_lz_lh(10, _lh_percOp_arg2¹)
//│ 	in _lh_matchIdent⁴(_lh_percOp_arg3¹, j¹)
//│ def pidgits_lh(_lh_pidgits_arg1¹) = percOp_lh(0, hashOp_lh(0, [LH_P3 1 0 1]), _lh_pidgits_arg1¹)
//│ def replicate_lh(_lh_replicate_arg1¹, _lh_replicate_arg2¹) = if (_lh_replicate_arg1¹ > 0) then [LH_C _lh_replicate_arg2¹ replicate_lh((_lh_replicate_arg1¹ - 1), _lh_replicate_arg2¹)] else [LH_N]
//│ def splitAt_lz_lh(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) = 
//│ 	let _lh_percOp_LH_P2_1² = drop_lz_lh(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)
//│ 	in let _lh_percOp_LH_P2_0² = take_lz_lh(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)
//│ 	in (fun _lh_percOp_arg3³ -> (fun j³ -> mappend_lh(mappend_lh(concat_lh(_lh_percOp_LH_P2_0²), mappend_lh([LH_C 't' [LH_C ':' [LH_N]]], mappend_lh(string_of_int⁰(j³), [LH_C 'n' [LH_N]]))), percOp_lh(j³, _lh_percOp_LH_P2_1², _lh_percOp_arg3³))))
//│ def take_lz_lh(n¹, ls¹) = if (n¹ > 0) then case force⁰(ls¹) of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ take_lz_lh((n¹ - 1), t⁰)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPiDigits_nofib_lh(_lh_testPiDigits_nofib_arg1¹) = pidgits_lh(_lh_testPiDigits_nofib_arg1¹)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

