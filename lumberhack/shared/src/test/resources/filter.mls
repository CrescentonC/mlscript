:NewParser
:ParseOnly


fun filter(ls) = if ls is
  C(h, t) then f => if f(h) then C(h, filter(t)(f)) else filter(t)(f)
  N then f => N
fun predicate(x) = x > 3
filter(C(0, C(5, C(2, C(4, N)))))(predicate)
//│ |#fun| |filter|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |f| |=>| |#if| |f|(|h|)| |#then| |C|(|h|,| |filter|(|t|)|(|f|)|)| |#else| |filter|(|t|)|(|f|)|↵|N| |#then| |f| |=>| |N|←|↵|#fun| |predicate|(|x|)| |#=| |x| |>| |3|↵|filter|(|C|(|0|,| |C|(|5|,| |C|(|2|,| |C|(|4|,| |N|)|)|)|)|)|(|predicate|)|
//│ Parsed: {fun filter = ls, => if ls is ‹(C (h, t,)) then f, => if (f (h,)) then C (h, filter (t,) (f,),) else filter (t,) (f,); (N) then f, => N›; fun predicate = x, => > (x,) (3,); filter (C (0, C (5, C (2, C (4, N,),),),),) (predicate,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ filter^29([C 0 [C 5 [C 2 [C 4 [N]]]]], predicate^40)
//│ def filter(ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter^6(t⁰, f⁰)] else filter^12(t⁰, f⁰))
//│ 	| N  => (fun f¹ -> [N])}
//│ def predicate(x⁰) = (x⁰ > 3)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 34 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ [C 4 [N]]: 35 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ [C 2 [C 4 [N]]]: 36 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ [C 5 [C 2 [C 4 [N]]]]: 37 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ [C 0 [C 5 [C 2 [C 4 [N]]]]]: 38 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ ------------------
//│ case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21 --->
//│ 	[N]: 34
//│ 	[C 4 [N]]: 35
//│ 	[C 2 [C 4 [N]]]: 36
//│ 	[C 5 [C 2 [C 4 [N]]]]: 37
//│ 	[C 0 [C 5 [C 2 [C 4 [N]]]]]: 38
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 34 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ [C 4 [N]]: 35 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ [C 2 [C 4 [N]]]: 36 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ [C 5 [C 2 [C 4 [N]]]]: 37 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ [C 0 [C 5 [C 2 [C 4 [N]]]]]: 38 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ ------------------
//│ case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21 --->
//│ 	[N]: 34
//│ 	[C 4 [N]]: 35
//│ 	[C 2 [C 4 [N]]]: 36
//│ 	[C 5 [C 2 [C 4 [N]]]]: 37
//│ 	[C 0 [C 5 [C 2 [C 4 [N]]]]]: 38
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ filter(
//│ 	let t¹ = 	
//│ 		let t² = 	
//│ 			let t³ = 	
//│ 				let t⁴ = (fun f⁶ -> [N])
//│ 				in let h⁴ = 4
//│ 				in (fun f⁵ -> if f⁵(h⁴) then [C h⁴ filter(t⁴, f⁵)] else filter(t⁴, f⁵))
//│ 			in let h³ = 2
//│ 			in (fun f⁴ -> if f⁴(h³) then [C h³ filter(t³, f⁴)] else filter(t³, f⁴))
//│ 		in let h² = 5
//│ 		in (fun f³ -> if f³(h²) then [C h² filter(t², f³)] else filter(t², f³))
//│ 	in let h¹ = 0
//│ 	in (fun f² -> if f²(h¹) then [C h¹ filter(t¹, f²)] else filter(t¹, f²)), predicate)
//│ def filter(ls¹) = ls¹
//│ def predicate(x¹) = (x¹ > 3)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ filter
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ 
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ let t⁰ = 	
//│ 	let t¹ = 	
//│ 		let t² = 	
//│ 			let t³ = (fun f⁰ -> [N])
//│ 			in let h⁰ = 4
//│ 			in (fun f¹ -> if f¹(h⁰) then [C h⁰ t³(f¹)] else t³(f¹))
//│ 		in let h¹ = 2
//│ 		in (fun f² -> if f²(h¹) then [C h¹ t²(f²)] else t²(f²))
//│ 	in let h² = 5
//│ 	in (fun f³ -> if f³(h²) then [C h² t¹(f³)] else t¹(f³))
//│ in let h³ = 0
//│ in if predicate(h³) then [C h³ t⁰(predicate)] else t⁰(predicate)
//│ def filter(ls⁰) = ls⁰
//│ def predicate(x⁰) = (x⁰ > 3)
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ let t⁰ = 	
//│ 	let t¹ = 	
//│ 		let t² = 	
//│ 			let t³ = (fun f⁰ -> [N])
//│ 			in let h⁰ = 4
//│ 			in (fun f¹ -> if f¹(h⁰) then [C h⁰ t³(f¹)] else t³(f¹))
//│ 		in let h¹ = 2
//│ 		in (fun f² -> if f²(h¹) then [C h¹ t²(f²)] else t²(f²))
//│ 	in let h² = 5
//│ 	in (fun f³ -> if f³(h²) then [C h² t¹(f³)] else t¹(f³))
//│ in let h³ = 0
//│ in if predicate(h³) then [C h³ t⁰(predicate)] else t⁰(predicate)
//│ def filter(ls⁰) = ls⁰
//│ def predicate(x⁰) = (x⁰ > 3)
//│ <<<<<<< after floating out <<<<<<<



// NOTE: infinite list as producer
fun filter(ls) = if ls is
  C(h, t) then f => if f(h) then C(h, filter(t)(f)) else filter(t)(f)
  N then f => N
fun predicate(x) = x > 3
let l = C(0, C(5, C(2, C(4, C(1, l)))))
filter(l)(predicate)
//│ |#fun| |filter|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |f| |=>| |#if| |f|(|h|)| |#then| |C|(|h|,| |filter|(|t|)|(|f|)|)| |#else| |filter|(|t|)|(|f|)|↵|N| |#then| |f| |=>| |N|←|↵|#fun| |predicate|(|x|)| |#=| |x| |>| |3|↵|#let| |l| |#=| |C|(|0|,| |C|(|5|,| |C|(|2|,| |C|(|4|,| |C|(|1|,| |l|)|)|)|)|)|↵|filter|(|l|)|(|predicate|)|
//│ Parsed: {fun filter = ls, => if ls is ‹(C (h, t,)) then f, => if (f (h,)) then C (h, filter (t,) (f,),) else filter (t,) (f,); (N) then f, => N›; fun predicate = x, => > (x,) (3,); let l = C (0, C (5, C (2, C (4, C (1, l,),),),),); filter (l,) (predicate,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ filter^40(l^41, predicate^43)
//│ def filter(ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter^6(t⁰, f⁰)] else filter^12(t⁰, f⁰))
//│ 	| N  => (fun f¹ -> [N])}
//│ def l = [C 0 [C 5 [C 2 [C 4 [C 1 l^34]]]]]
//│ def predicate(x⁰) = (x⁰ > 3)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 1 l]: 35 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ [C 4 [C 1 l]]: 36 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ [C 2 [C 4 [C 1 l]]]: 37 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ [C 5 [C 2 [C 4 [C 1 l]]]]: 38 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ [C 0 [C 5 [C 2 [C 4 [C 1 l]]]]]: 39 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ ------------------
//│ case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21 --->
//│ 	[C 1 l]: 35
//│ 	[C 4 [C 1 l]]: 36
//│ 	[C 2 [C 4 [C 1 l]]]: 37
//│ 	[C 5 [C 2 [C 4 [C 1 l]]]]: 38
//│ 	[C 0 [C 5 [C 2 [C 4 [C 1 l]]]]]: 39
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C 1 l]: 35 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ [C 4 [C 1 l]]: 36 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ [C 2 [C 4 [C 1 l]]]: 37 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ [C 5 [C 2 [C 4 [C 1 l]]]]: 38 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ [C 0 [C 5 [C 2 [C 4 [C 1 l]]]]]: 39 --->
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21
//│ ------------------
//│ case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> if f⁰(h⁰) then [C h⁰ filter(t⁰, f⁰)] else filter(t⁰, f⁰)) | N  => (fun f¹ -> [N])}: 21 --->
//│ 	[C 1 l]: 35
//│ 	[C 4 [C 1 l]]: 36
//│ 	[C 2 [C 4 [C 1 l]]]: 37
//│ 	[C 5 [C 2 [C 4 [C 1 l]]]]: 38
//│ 	[C 0 [C 5 [C 2 [C 4 [C 1 l]]]]]: 39
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ filter(l, predicate)
//│ def filter(ls¹) = ls¹
//│ def l = 
//│ 	let t¹ = 	
//│ 		let t² = 	
//│ 			let t³ = 	
//│ 				let t⁴ = 	
//│ 					let t⁵ = l
//│ 					in let h⁵ = 1
//│ 					in (fun f⁶ -> if f⁶(h⁵) then [C h⁵ filter(t⁵, f⁶)] else filter(t⁵, f⁶))
//│ 				in let h⁴ = 4
//│ 				in (fun f⁵ -> if f⁵(h⁴) then [C h⁴ filter(t⁴, f⁵)] else filter(t⁴, f⁵))
//│ 			in let h³ = 2
//│ 			in (fun f⁴ -> if f⁴(h³) then [C h³ filter(t³, f⁴)] else filter(t³, f⁴))
//│ 		in let h² = 5
//│ 		in (fun f³ -> if f³(h²) then [C h² filter(t², f³)] else filter(t², f³))
//│ 	in let h¹ = 0
//│ 	in (fun f² -> if f²(h¹) then [C h¹ filter(t¹, f²)] else filter(t¹, f²))
//│ def predicate(x¹) = (x¹ > 3)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ filter
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ l -> 0
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ l(predicate)
//│ def filter(ls⁰) = ls⁰
//│ def l = 
//│ 	let t⁰ = 	
//│ 		let t¹ = 	
//│ 			let t² = 	
//│ 				let t³ = 	
//│ 					let t⁴ = l
//│ 					in let h⁰ = 1
//│ 					in (fun f⁰ -> if f⁰(h⁰) then [C h⁰ t⁴(f⁰)] else t⁴(f⁰))
//│ 				in let h¹ = 4
//│ 				in (fun f¹ -> if f¹(h¹) then [C h¹ t³(f¹)] else t³(f¹))
//│ 			in let h² = 2
//│ 			in (fun f² -> if f²(h²) then [C h² t²(f²)] else t²(f²))
//│ 		in let h³ = 5
//│ 		in (fun f³ -> if f³(h³) then [C h³ t¹(f³)] else t¹(f³))
//│ 	in let h⁴ = 0
//│ 	in (fun f⁴ -> if f⁴(h⁴) then [C h⁴ t⁰(f⁴)] else t⁰(f⁴))
//│ def predicate(x⁰) = (x⁰ > 3)
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ l(predicate)
//│ def filter(ls⁰) = ls⁰
//│ def l = 
//│ 	let t⁰ = 	
//│ 		let t¹ = 	
//│ 			let t² = 	
//│ 				let t³ = 	
//│ 					let t⁴ = l
//│ 					in let h⁰ = 1
//│ 					in (fun f⁰ -> if f⁰(h⁰) then [C h⁰ t⁴(f⁰)] else t⁴(f⁰))
//│ 				in let h¹ = 4
//│ 				in (fun f¹ -> if f¹(h¹) then [C h¹ t³(f¹)] else t³(f¹))
//│ 			in let h² = 2
//│ 			in (fun f² -> if f²(h²) then [C h² t²(f²)] else t²(f²))
//│ 		in let h³ = 5
//│ 		in (fun f³ -> if f³(h³) then [C h³ t¹(f³)] else t¹(f³))
//│ 	in let h⁴ = 0
//│ 	in (fun f⁴ -> if f⁴(h⁴) then [C h⁴ t⁰(f⁴)] else t⁰(f⁴))
//│ def predicate(x⁰) = (x⁰ > 3)
//│ <<<<<<< after floating out <<<<<<<

// WRONG: infinite list and recusive length match
// :stdout
fun filter(ls) = if ls is
  C(h, t) then f =>
    let tail = if t is
      C(hh, tt) then if f(hh) then C(hh, filter(tt)(f)) else filter(tt)(f)
    if f(h) then C(h, tail) else tail
fun predicate(x) = x > 3
let l = C(0, C(5, C(2, C(4, C(1, l)))))
filter(l)(predicate)
//│ |#fun| |filter|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |f| |=>|→|#let| |tail| |#=| |#if| |t| |is|→|C|(|hh|,| |tt|)| |#then| |#if| |f|(|hh|)| |#then| |C|(|hh|,| |filter|(|tt|)|(|f|)|)| |#else| |filter|(|tt|)|(|f|)|←|↵|#if| |f|(|h|)| |#then| |C|(|h|,| |tail|)| |#else| |tail|←|←|↵|#fun| |predicate|(|x|)| |#=| |x| |>| |3|↵|#let| |l| |#=| |C|(|0|,| |C|(|5|,| |C|(|2|,| |C|(|4|,| |C|(|1|,| |l|)|)|)|)|)|↵|filter|(|l|)|(|predicate|)|
//│ Parsed: {fun filter = ls, => if ls is ‹(C (h, t,)) then f, => {let tail = if t is ‹(C (hh, tt,)) then if (f (hh,)) then C (hh, filter (tt,) (f,),) else filter (tt,) (f,)›; if (f (h,)) then C (h, tail,) else tail}›; fun predicate = x, => > (x,) (3,); let l = C (0, C (5, C (2, C (4, C (1, l,),),),),); filter (l,) (predicate,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ filter^49(l^50, predicate^52)
//│ def filter(ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => (fun f⁰ -> 
//│ 		let tail⁰ = case t⁰ of {
//│ 			C hh⁰ tt⁰ => if f⁰(hh⁰) then [C hh⁰ filter^7(tt⁰, f⁰)] else filter^13(tt⁰, f⁰)}
//│ 		in if f⁰(h⁰) then [C h⁰ tail⁰] else tail⁰)}
//│ def l = [C 0 [C 5 [C 2 [C 4 [C 1 l^43]]]]]
//│ def predicate(x⁰) = (x⁰ > 3)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 1 l]: 44 --->
//│ 	case t⁰ of {C hh⁰ tt⁰ => if f⁰(hh⁰) then [C hh⁰ filter(tt⁰, f⁰)] else filter(tt⁰, f⁰)}: 19
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> let tail⁰ = case t⁰ of {C hh⁰ tt⁰ => if f⁰(hh⁰) then [C hh⁰ filter(tt⁰, f⁰)] else filter(tt⁰, f⁰)}
//│ in if f⁰(h⁰) then [C h⁰ tail⁰] else tail⁰)}: 30
//│ [C 4 [C 1 l]]: 45 --->
//│ 	case t⁰ of {C hh⁰ tt⁰ => if f⁰(hh⁰) then [C hh⁰ filter(tt⁰, f⁰)] else filter(tt⁰, f⁰)}: 19
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> let tail⁰ = case t⁰ of {C hh⁰ tt⁰ => if f⁰(hh⁰) then [C hh⁰ filter(tt⁰, f⁰)] else filter(tt⁰, f⁰)}
//│ in if f⁰(h⁰) then [C h⁰ tail⁰] else tail⁰)}: 30
//│ [C 2 [C 4 [C 1 l]]]: 46 --->
//│ 	case t⁰ of {C hh⁰ tt⁰ => if f⁰(hh⁰) then [C hh⁰ filter(tt⁰, f⁰)] else filter(tt⁰, f⁰)}: 19
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> let tail⁰ = case t⁰ of {C hh⁰ tt⁰ => if f⁰(hh⁰) then [C hh⁰ filter(tt⁰, f⁰)] else filter(tt⁰, f⁰)}
//│ in if f⁰(h⁰) then [C h⁰ tail⁰] else tail⁰)}: 30
//│ [C 5 [C 2 [C 4 [C 1 l]]]]: 47 --->
//│ 	case t⁰ of {C hh⁰ tt⁰ => if f⁰(hh⁰) then [C hh⁰ filter(tt⁰, f⁰)] else filter(tt⁰, f⁰)}: 19
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> let tail⁰ = case t⁰ of {C hh⁰ tt⁰ => if f⁰(hh⁰) then [C hh⁰ filter(tt⁰, f⁰)] else filter(tt⁰, f⁰)}
//│ in if f⁰(h⁰) then [C h⁰ tail⁰] else tail⁰)}: 30
//│ [C 0 [C 5 [C 2 [C 4 [C 1 l]]]]]: 48 --->
//│ 	case t⁰ of {C hh⁰ tt⁰ => if f⁰(hh⁰) then [C hh⁰ filter(tt⁰, f⁰)] else filter(tt⁰, f⁰)}: 19
//│ 	case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> let tail⁰ = case t⁰ of {C hh⁰ tt⁰ => if f⁰(hh⁰) then [C hh⁰ filter(tt⁰, f⁰)] else filter(tt⁰, f⁰)}
//│ in if f⁰(h⁰) then [C h⁰ tail⁰] else tail⁰)}: 30
//│ ------------------
//│ case t⁰ of {C hh⁰ tt⁰ => if f⁰(hh⁰) then [C hh⁰ filter(tt⁰, f⁰)] else filter(tt⁰, f⁰)}: 19 --->
//│ 	[C 1 l]: 44
//│ 	[C 4 [C 1 l]]: 45
//│ 	[C 2 [C 4 [C 1 l]]]: 46
//│ 	[C 5 [C 2 [C 4 [C 1 l]]]]: 47
//│ 	[C 0 [C 5 [C 2 [C 4 [C 1 l]]]]]: 48
//│ case ls⁰ of {C h⁰ t⁰ => (fun f⁰ -> let tail⁰ = case t⁰ of {C hh⁰ tt⁰ => if f⁰(hh⁰) then [C hh⁰ filter(tt⁰, f⁰)] else filter(tt⁰, f⁰)}
//│ in if f⁰(h⁰) then [C h⁰ tail⁰] else tail⁰)}: 30 --->
//│ 	[C 1 l]: 44
//│ 	[C 4 [C 1 l]]: 45
//│ 	[C 2 [C 4 [C 1 l]]]: 46
//│ 	[C 5 [C 2 [C 4 [C 1 l]]]]: 47
//│ 	[C 0 [C 5 [C 2 [C 4 [C 1 l]]]]]: 48
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ filter(l, predicate)
//│ def filter(ls¹) = case ls¹ of {
//│ 	C h⁰ t⁰ => (fun f¹ -> 
//│ 		let tail¹ = case t⁰ of {
//│ 			C hh⁰ tt⁰ => if f¹(hh⁰) then [C hh⁰ filter(tt⁰, f¹)] else filter(tt⁰, f¹)}
//│ 		in if f¹(h⁰) then [C h⁰ tail¹] else tail¹)}
//│ def l = [C 0 [C 5 [C 2 [C 4 [C 1 l]]]]]
//│ def predicate(x¹) = (x¹ > 3)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ 
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ 
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ filter(l, predicate)
//│ def filter(ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => (fun f⁰ -> 
//│ 		let tail⁰ = case t⁰ of {
//│ 			C hh⁰ tt⁰ => if f⁰(hh⁰) then [C hh⁰ filter(tt⁰, f⁰)] else filter(tt⁰, f⁰)}
//│ 		in if f⁰(h⁰) then [C h⁰ tail⁰] else tail⁰)}
//│ def l = [C 0 [C 5 [C 2 [C 4 [C 1 l]]]]]
//│ def predicate(x⁰) = (x⁰ > 3)
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ filter(l, predicate)
//│ def filter(ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => (fun f⁰ -> 
//│ 		let tail⁰ = case t⁰ of {
//│ 			C hh⁰ tt⁰ => if f⁰(hh⁰) then [C hh⁰ filter(tt⁰, f⁰)] else filter(tt⁰, f⁰)}
//│ 		in if f⁰(h⁰) then [C h⁰ tail⁰] else tail⁰)}
//│ def l = [C 0 [C 5 [C 2 [C 4 [C 1 l]]]]]
//│ def predicate(x⁰) = (x⁰ > 3)
//│ <<<<<<< after floating out <<<<<<<
