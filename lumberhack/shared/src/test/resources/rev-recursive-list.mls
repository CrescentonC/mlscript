:NewParser
:ParseOnly

fun concat(xs, ys) = if xs is
  N then ys
  C(h, t) then C(h, concat(t, ys))
fun rev(ls) = if ls is
  C(h, t) then concat(rev(t), C(h, N))
  N then N
let l = C(1, l)
rev(l)
//│ |#fun| |concat|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|N| |#then| |ys|↵|C|(|h|,| |t|)| |#then| |C|(|h|,| |concat|(|t|,| |ys|)|)|←|↵|#fun| |rev|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |concat|(|rev|(|t|)|,| |C|(|h|,| |N|)|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|1|,| |l|)|↵|rev|(|l|)|
//│ Parsed: {fun concat = xs, ys, => if xs is ‹(N) then ys; (C (h, t,)) then C (h, concat (t, ys,),)›; fun rev = ls, => if ls is ‹(C (h, t,)) then concat (rev (t,), C (h, N,),); (N) then N›; let l = C (1, l,); rev (l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ rev^29(l^30)
//│ def concat(xs⁰, ys⁰) = case xs⁰ of {
//│ 	N  => ys⁰
//│ 	| C h⁰ t⁰ => [C h⁰ concat^4(t⁰, ys⁰)]}
//│ def l = [C 1 l^27]
//│ def rev(ls⁰) = case ls⁰ of {
//│ 	C h¹ t¹ => concat^14(rev^15(t¹), [C h¹ [N]])
//│ 	| N  => [N]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [l^30]
//│ 	[l^30 · l^27] ---> [l^30] (only one)
//│ [rev^29]
//│ 	[rev^29 · concat^14]
//│ 		[rev^29 · concat^14 · concat^4] ---> [rev^29 · concat^14] (only one)
//│ 	[rev^29 · rev^15] ---> [rev^29] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ rev₀(l₀)
//│ def l₀ = 
//│ 	[C 1 l₀]
//│ def rev₀(ls¹) = 
//│ 	case ls¹ of {
//│ 		C h² t² => concat₀(rev₀(t²), [C h² [N]])
//│ 		| N  => [N]}
//│ 	where
//│ 	def concat₀(xs¹, ys¹) = 
//│ 		case xs¹ of {
//│ 			N  => ys¹
//│ 			| C h³ t³ => [C h³ concat₀(t³, ys¹)]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 39 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => ys¹ | C h³ t³ => [C h³ concat₀(t³, ys¹)]}: 57
//│ [C h² [N]]: 40 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => ys¹ | C h³ t³ => [C h³ concat₀(t³, ys¹)]}: 57
//│ [N]: 42 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => ys¹ | C h³ t³ => [C h³ concat₀(t³, ys¹)]}: 57
//│ [C 1 l₀]: 47 --->
//│ 	case ls¹ of {C h² t² => concat₀(rev₀(t²), [C h² [N]]) | N  => [N]}: 43
//│ [C h³ concat₀(t³, ys¹)]: 56 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => ys¹ | C h³ t³ => [C h³ concat₀(t³, ys¹)]}: 57
//│ ------------------
//│ case ls¹ of {C h² t² => concat₀(rev₀(t²), [C h² [N]]) | N  => [N]}: 43 --->
//│ 	[C 1 l₀]: 47
//│ case xs¹ of {N  => ys¹ | C h³ t³ => [C h³ concat₀(t³, ys¹)]}: 57 --->
//│ 	[N]: 39
//│ 	[C h² [N]]: 40
//│ 	[N]: 42
//│ 	[C h³ concat₀(t³, ys¹)]: 56
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C 1 l₀]: 47 --->
//│ 	case ls¹ of {C h² t² => concat₀(rev₀(t²), [C h² [N]]) | N  => [N]}: 43
//│ ------------------
//│ case ls¹ of {C h² t² => concat₀(rev₀(t²), [C h² [N]]) | N  => [N]}: 43 --->
//│ 	[C 1 l₀]: 47
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ rev₀(l₀)
//│ def l₀ = 
//│ 	let h⁴ = lazy⁰(1)
//│ 	in let t⁴ = lazy⁰(l₀)
//│ 	in concat₀(rev₀(force⁰(t⁴)), [C force⁰(h⁴) [N]])
//│ def rev₀(ls²) = 
//│ 	ls²
//│ 	where
//│ 	def concat₀(xs², ys²) = 
//│ 		case xs² of {
//│ 			N  => ys²
//│ 			| C h³ t³ => [C h³ concat₀(t³, ys²)]}
//│ <<<<<<< after fusion <<<<<<<


fun concat(xs, ys) = if xs is
  N then ys
  C(h, t) then C(h, concat(t, ys))
fun rev(ls) = if ls is
  C(h, t) then concat(rev(t), C(h, N))
  N then N
let l = C(1, C(2, l))
rev(l)
//│ |#fun| |concat|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|N| |#then| |ys|↵|C|(|h|,| |t|)| |#then| |C|(|h|,| |concat|(|t|,| |ys|)|)|←|↵|#fun| |rev|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |concat|(|rev|(|t|)|,| |C|(|h|,| |N|)|)|↵|N| |#then| |N|←|↵|#let| |l| |#=| |C|(|1|,| |C|(|2|,| |l|)|)|↵|rev|(|l|)|
//│ Parsed: {fun concat = xs, ys, => if xs is ‹(N) then ys; (C (h, t,)) then C (h, concat (t, ys,),)›; fun rev = ls, => if ls is ‹(C (h, t,)) then concat (rev (t,), C (h, N,),); (N) then N›; let l = C (1, C (2, l,),); rev (l,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ rev^31(l^32)
//│ def concat(xs⁰, ys⁰) = case xs⁰ of {
//│ 	N  => ys⁰
//│ 	| C h⁰ t⁰ => [C h⁰ concat^4(t⁰, ys⁰)]}
//│ def l = [C 1 [C 2 l^28]]
//│ def rev(ls⁰) = case ls⁰ of {
//│ 	C h¹ t¹ => concat^14(rev^15(t¹), [C h¹ [N]])
//│ 	| N  => [N]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [l^32]
//│ 	[l^32 · l^28] ---> [l^32] (only one)
//│ [rev^31]
//│ 	[rev^31 · concat^14]
//│ 		[rev^31 · concat^14 · concat^4] ---> [rev^31 · concat^14] (only one)
//│ 	[rev^31 · rev^15] ---> [rev^31] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ rev₀(l₀)
//│ def l₀ = 
//│ 	[C 1 [C 2 l₀]]
//│ def rev₀(ls¹) = 
//│ 	case ls¹ of {
//│ 		C h³ t³ => concat₀(rev₀(t³), [C h³ [N]])
//│ 		| N  => [N]}
//│ 	where
//│ 	def concat₀(xs¹, ys¹) = 
//│ 		case xs¹ of {
//│ 			N  => ys¹
//│ 			| C h² t² => [C h² concat₀(t², ys¹)]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 2 l₀]: 37 --->
//│ 	case ls¹ of {C h³ t³ => concat₀(rev₀(t³), [C h³ [N]]) | N  => [N]}: 62
//│ [C 1 [C 2 l₀]]: 38 --->
//│ 	case ls¹ of {C h³ t³ => concat₀(rev₀(t³), [C h³ [N]]) | N  => [N]}: 62
//│ [C h² concat₀(t², ys¹)]: 47 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => ys¹ | C h² t² => [C h² concat₀(t², ys¹)]}: 48
//│ [N]: 58 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => ys¹ | C h² t² => [C h² concat₀(t², ys¹)]}: 48
//│ [C h³ [N]]: 59 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => ys¹ | C h² t² => [C h² concat₀(t², ys¹)]}: 48
//│ [N]: 61 --->
//│ 	NoCons
//│ 	case xs¹ of {N  => ys¹ | C h² t² => [C h² concat₀(t², ys¹)]}: 48
//│ ------------------
//│ case xs¹ of {N  => ys¹ | C h² t² => [C h² concat₀(t², ys¹)]}: 48 --->
//│ 	[C h² concat₀(t², ys¹)]: 47
//│ 	[N]: 58
//│ 	[C h³ [N]]: 59
//│ 	[N]: 61
//│ case ls¹ of {C h³ t³ => concat₀(rev₀(t³), [C h³ [N]]) | N  => [N]}: 62 --->
//│ 	[C 2 l₀]: 37
//│ 	[C 1 [C 2 l₀]]: 38
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C 2 l₀]: 37 --->
//│ 	case ls¹ of {C h³ t³ => concat₀(rev₀(t³), [C h³ [N]]) | N  => [N]}: 62
//│ [C 1 [C 2 l₀]]: 38 --->
//│ 	case ls¹ of {C h³ t³ => concat₀(rev₀(t³), [C h³ [N]]) | N  => [N]}: 62
//│ ------------------
//│ case ls¹ of {C h³ t³ => concat₀(rev₀(t³), [C h³ [N]]) | N  => [N]}: 62 --->
//│ 	[C 2 l₀]: 37
//│ 	[C 1 [C 2 l₀]]: 38
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ rev₀(l₀)
//│ def l₀ = 
//│ 	let h⁴ = lazy⁰(1)
//│ 	in let t⁴ = lazy⁰(
//│ 		let h⁵ = lazy⁰(2)
//│ 		in let t⁵ = lazy⁰(l₀)
//│ 		in concat₀(rev₀(force⁰(t⁵)), [C force⁰(h⁵) [N]]))
//│ 	in concat₀(rev₀(force⁰(t⁴)), [C force⁰(h⁴) [N]])
//│ def rev₀(ls²) = 
//│ 	ls²
//│ 	where
//│ 	def concat₀(xs², ys²) = 
//│ 		case xs² of {
//│ 			N  => ys²
//│ 			| C h² t² => [C h² concat₀(t², ys²)]}
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ ~~~~~~~~~~~~~~~~~~~~~~~ NEXT ITERATION ~~~~~~~~~~~~~~~~~~~~~~~
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [l₀^2] (hopeless to continue)
//│ 	[l₀^2 · concat₀^14] (using original def)
//│ 		[l₀^2 · concat₀^14 · concat₀^48] ---> [l₀^2 · concat₀^14] (using original def)
//│ 	[l₀^2 · concat₀^30] (using original def)
//│ 		[l₀^2 · concat₀^30 · concat₀^48] ---> [l₀^2 · concat₀^30] (using original def)
//│ 	[l₀^2 · l₀^12] ---> [l₀^2] (using original def)
//│ 	[l₀^2 · rev₀^15] (using original def)
//│ 	[l₀^2 · rev₀^31] (using original def)
//│ [rev₀^1] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ rev₀₂(l₀₀)
//│ def l₀₀ = 
//│ 	let h³ = lazy⁰(1)
//│ 	in let t³ = lazy⁰(
//│ 		let h⁴ = lazy⁰(2)
//│ 		in let t⁴ = lazy⁰(l₀₀)
//│ 		in concat₀₀(rev₀₀(force⁰(t⁴)), [C force⁰(h⁴) [N]]))
//│ 	in concat₀₁(rev₀₁(force⁰(t³)), [C force⁰(h³) [N]])
//│ 	where
//│ 	def concat₀₀(xs², ys²) = 
//│ 		case xs² of {
//│ 			N  => ys²
//│ 			| C h⁶ t⁶ => [C h⁶ concat₀₀(t⁶, ys²)]}
//│ 	def concat₀₁(xs¹, ys¹) = 
//│ 		case xs¹ of {
//│ 			N  => ys¹
//│ 			| C h⁵ t⁵ => [C h⁵ concat₀₁(t⁵, ys¹)]}
//│ 	def rev₀₀(ls¹) = 
//│ 		ls¹
//│ 	def rev₀₁(ls³) = 
//│ 		ls³
//│ def rev₀₂(ls²) = 
//│ 	ls²
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N]: 79 --->
//│ 	case xs¹ of {N  => ys¹ | C h⁵ t⁵ => [C h⁵ concat₀₁(t⁵, ys¹)]}: 115
//│ [C force⁰(h⁴) [N]]: 80 --->
//│ 	case xs¹ of {N  => ys¹ | C h⁵ t⁵ => [C h⁵ concat₀₁(t⁵, ys¹)]}: 115
//│ [N]: 95 --->
//│ 	NoCons
//│ 	case xs² of {N  => ys² | C h⁶ t⁶ => [C h⁶ concat₀₀(t⁶, ys²)]}: 127
//│ [C force⁰(h³) [N]]: 96 --->
//│ 	NoCons
//│ 	case xs² of {N  => ys² | C h⁶ t⁶ => [C h⁶ concat₀₀(t⁶, ys²)]}: 127
//│ [C h⁵ concat₀₁(t⁵, ys¹)]: 114 --->
//│ 	NoCons
//│ 	case xs² of {N  => ys² | C h⁶ t⁶ => [C h⁶ concat₀₀(t⁶, ys²)]}: 127
//│ [C h⁶ concat₀₀(t⁶, ys²)]: 126 --->
//│ 	case xs¹ of {N  => ys¹ | C h⁵ t⁵ => [C h⁵ concat₀₁(t⁵, ys¹)]}: 115
//│ ------------------
//│ case xs¹ of {N  => ys¹ | C h⁵ t⁵ => [C h⁵ concat₀₁(t⁵, ys¹)]}: 115 --->
//│ 	[N]: 79
//│ 	[C force⁰(h⁴) [N]]: 80
//│ 	[C h⁶ concat₀₀(t⁶, ys²)]: 126
//│ case xs² of {N  => ys² | C h⁶ t⁶ => [C h⁶ concat₀₀(t⁶, ys²)]}: 127 --->
//│ 	[N]: 95
//│ 	[C force⁰(h³) [N]]: 96
//│ 	[C h⁵ concat₀₁(t⁵, ys¹)]: 114
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 79 --->
//│ 	case xs¹ of {N  => ys¹ | C h⁵ t⁵ => [C h⁵ concat₀₁(t⁵, ys¹)]}: 115
//│ [C force⁰(h⁴) [N]]: 80 --->
//│ 	case xs¹ of {N  => ys¹ | C h⁵ t⁵ => [C h⁵ concat₀₁(t⁵, ys¹)]}: 115
//│ [C h⁶ concat₀₀(t⁶, ys²)]: 126 --->
//│ 	case xs¹ of {N  => ys¹ | C h⁵ t⁵ => [C h⁵ concat₀₁(t⁵, ys¹)]}: 115
//│ ------------------
//│ case xs¹ of {N  => ys¹ | C h⁵ t⁵ => [C h⁵ concat₀₁(t⁵, ys¹)]}: 115 --->
//│ 	[N]: 79
//│ 	[C force⁰(h⁴) [N]]: 80
//│ 	[C h⁶ concat₀₀(t⁶, ys²)]: 126
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ rev₀₂(l₀₀)
//│ def l₀₀ = 
//│ 	let h⁸ = lazy⁰(1)
//│ 	in let t⁸ = lazy⁰(
//│ 		let h⁹ = lazy⁰(2)
//│ 		in let t⁹ = lazy⁰(l₀₀)
//│ 		in concat₀₀(rev₀₀(force⁰(t⁹)), 
//│ 			let h¹⁰ = lazy⁰(force⁰(h⁹))
//│ 			in let t¹⁰ = lazy⁰((fun ys⁷ -> ys⁷))
//│ 			in (fun ys⁶ -> [C force⁰(h¹⁰) concat₀₁(force⁰(t¹⁰), ys⁶)])))
//│ 	in concat₀₁(rev₀₁(force⁰(t⁸)), [C force⁰(h⁸) [N]])
//│ 	where
//│ 	def concat₀₀(xs³, ys³) = 
//│ 		case xs³ of {
//│ 			N  => ys³
//│ 			| C h⁶ t⁶ => 
//│ 				let h⁷ = lazy⁰(h⁶)
//│ 				in let t⁷ = lazy⁰(concat₀₀(t⁶, ys³))
//│ 				in (fun ys⁴ -> [C force⁰(h⁷) concat₀₁(force⁰(t⁷), ys⁴)])}
//│ 	def concat₀₁(xs⁴, ys⁵) = 
//│ 		xs⁴(ys⁵)
//│ 	def rev₀₀(ls⁶) = 
//│ 		ls⁶
//│ 	def rev₀₁(ls⁵) = 
//│ 		ls⁵
//│ def rev₀₂(ls⁴) = 
//│ 	ls⁴
//│ <<<<<<< after fusion <<<<<<<


// above, rev using concat; below, rev using accumulating parameter

// NOTE: fuses well, as long as the producer recursive length is a multiple of the consumer recursive length?
fun rev(ls, a) = if ls is
  C(h, t) then rev(t, C(h, a))
  N then a
let l = C(1, C(2, l))
rev(l, N)
//│ |#fun| |rev|(|ls|,| |a|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |rev|(|t|,| |C|(|h|,| |a|)|)|↵|N| |#then| |a|←|↵|#let| |l| |#=| |C|(|1|,| |C|(|2|,| |l|)|)|↵|rev|(|l|,| |N|)|
//│ Parsed: {fun rev = ls, a, => if ls is ‹(C (h, t,)) then rev (t, C (h, a,),); (N) then a›; let l = C (1, C (2, l,),); rev (l, N,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ rev^18(l^19, [N])
//│ def l = [C 1 [C 2 l^15]]
//│ def rev(ls⁰, a⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => rev^2(t⁰, [C h⁰ a⁰])
//│ 	| N  => a⁰}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [l^19]
//│ 	[l^19 · l^15] ---> [l^19] (only one)
//│ [rev^18]
//│ 	[rev^18 · rev^2] ---> [rev^18] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ rev₀(l₀, [N])
//│ def l₀ = 
//│ 	[C 1 [C 2 l₀]]
//│ def rev₀(ls¹, a¹) = 
//│ 	case ls¹ of {
//│ 		C h¹ t¹ => rev₀(t¹, [C h¹ a¹])
//│ 		| N  => a¹}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C 2 l₀]: 26 --->
//│ 	case ls¹ of {C h¹ t¹ => rev₀(t¹, [C h¹ a¹]) | N  => a¹}: 37
//│ [C 1 [C 2 l₀]]: 27 --->
//│ 	case ls¹ of {C h¹ t¹ => rev₀(t¹, [C h¹ a¹]) | N  => a¹}: 37
//│ ------------------
//│ case ls¹ of {C h¹ t¹ => rev₀(t¹, [C h¹ a¹]) | N  => a¹}: 37 --->
//│ 	[C 2 l₀]: 26
//│ 	[C 1 [C 2 l₀]]: 27
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C 2 l₀]: 26 --->
//│ 	case ls¹ of {C h¹ t¹ => rev₀(t¹, [C h¹ a¹]) | N  => a¹}: 37
//│ [C 1 [C 2 l₀]]: 27 --->
//│ 	case ls¹ of {C h¹ t¹ => rev₀(t¹, [C h¹ a¹]) | N  => a¹}: 37
//│ ------------------
//│ case ls¹ of {C h¹ t¹ => rev₀(t¹, [C h¹ a¹]) | N  => a¹}: 37 --->
//│ 	[C 2 l₀]: 26
//│ 	[C 1 [C 2 l₀]]: 27
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ rev₀(l₀, [N])
//│ def l₀ = 
//│ 	let h² = lazy⁰(1)
//│ 	in let t² = lazy⁰(
//│ 		let h³ = lazy⁰(2)
//│ 		in let t³ = lazy⁰(l₀)
//│ 		in (fun a³ -> rev₀(force⁰(t³), [C force⁰(h³) a³])))
//│ 	in (fun a² -> rev₀(force⁰(t²), [C force⁰(h²) a²]))
//│ def rev₀(ls², a⁴) = 
//│ 	ls²(a⁴)
//│ <<<<<<< after fusion <<<<<<<


fun rev(ls, a) = if ls is
  C(h, t) then rev(t, C(h, a))
  N then a
let l = C(A, C(B, l))
rev(l, N)
//│ |#fun| |rev|(|ls|,| |a|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |rev|(|t|,| |C|(|h|,| |a|)|)|↵|N| |#then| |a|←|↵|#let| |l| |#=| |C|(|A|,| |C|(|B|,| |l|)|)|↵|rev|(|l|,| |N|)|
//│ Parsed: {fun rev = ls, a, => if ls is ‹(C (h, t,)) then rev (t, C (h, a,),); (N) then a›; let l = C (A, C (B, l,),); rev (l, N,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ rev^18(l^19, [N])
//│ def l = [C [A] [C [B] l^15]]
//│ def rev(ls⁰, a⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => rev^2(t⁰, [C h⁰ a⁰])
//│ 	| N  => a⁰}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [l^19]
//│ 	[l^19 · l^15] ---> [l^19] (only one)
//│ [rev^18]
//│ 	[rev^18 · rev^2]
//│ 		[rev^18 · rev^2 · rev^2] ---> [rev^18] (only one)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ rev₀(l₀, [N])
//│ def l₀ = 
//│ 	[C [A] [C [B] l₀]]
//│ def rev₀(ls¹, a¹) = 
//│ 	case ls¹ of {
//│ 		C h¹ t¹ => rev₁(t¹, [C h¹ a¹])
//│ 		| N  => a¹}
//│ 	where
//│ 	def rev₁(ls², a²) = 
//│ 		case ls² of {
//│ 			C h² t² => rev₀(t², [C h² a²])
//│ 			| N  => a²}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C [B] l₀]: 38 --->
//│ 	case ls² of {C h² t² => rev₀(t², [C h² a²]) | N  => a²}: 49
//│ [C [A] [C [B] l₀]]: 39 --->
//│ 	case ls¹ of {C h¹ t¹ => rev₁(t¹, [C h¹ a¹]) | N  => a¹}: 32
//│ ------------------
//│ case ls¹ of {C h¹ t¹ => rev₁(t¹, [C h¹ a¹]) | N  => a¹}: 32 --->
//│ 	[C [A] [C [B] l₀]]: 39
//│ case ls² of {C h² t² => rev₀(t², [C h² a²]) | N  => a²}: 49 --->
//│ 	[C [B] l₀]: 38
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C [B] l₀]: 38 --->
//│ 	case ls² of {C h² t² => rev₀(t², [C h² a²]) | N  => a²}: 49
//│ [C [A] [C [B] l₀]]: 39 --->
//│ 	case ls¹ of {C h¹ t¹ => rev₁(t¹, [C h¹ a¹]) | N  => a¹}: 32
//│ ------------------
//│ case ls¹ of {C h¹ t¹ => rev₁(t¹, [C h¹ a¹]) | N  => a¹}: 32 --->
//│ 	[C [A] [C [B] l₀]]: 39
//│ case ls² of {C h² t² => rev₀(t², [C h² a²]) | N  => a²}: 49 --->
//│ 	[C [B] l₀]: 38
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ rev₀(l₀, [N])
//│ def l₀ = 
//│ 	let h³ = lazy⁰([A])
//│ 	in let t³ = lazy⁰(
//│ 		let h⁴ = lazy⁰([B])
//│ 		in let t⁴ = lazy⁰(l₀)
//│ 		in (fun a⁵ -> rev₀(force⁰(t⁴), [C force⁰(h⁴) a⁵])))
//│ 	in (fun a⁴ -> rev₁(force⁰(t³), [C force⁰(h³) a⁴]))
//│ def rev₀(ls³, a³) = 
//│ 	ls³(a³)
//│ 	where
//│ 	def rev₁(ls⁴, a⁶) = 
//│ 		ls⁴(a⁶)
//│ <<<<<<< after fusion <<<<<<<
