:NewParser
:ParseOnly

fun f(x) = if x is
  N then K
  C(a) then primitive
if f(N) is
  K then 0
  L then 1
//│ |#fun| |f|(|x|)| |#=| |#if| |x| |is|→|N| |#then| |K|↵|C|(|a|)| |#then| |primitive|←|↵|#if| |f|(|N|)| |is|→|K| |#then| |0|↵|L| |#then| |1|←|
//│ Parsed: {fun f = x, => if x is ‹(N) then K; (C (a,)) then primitive›; if f (N,) is ‹(K) then 0; (L) then 1›}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ case f^6([N]) of {
//│ 	K  => 0
//│ 	| L  => 1}
//│ def f(x⁰) = case x⁰ of {
//│ 	N  => [K]
//│ 	| C a⁰ => primitive⁰}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [f^6] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ case f₀([N]) of {
//│ 	K  => 0
//│ 	| L  => 1}
//│ def f₀(x¹) = 
//│ 	case x¹ of {
//│ 		N  => [K]
//│ 		| C a¹ => primitive⁰}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [K]: 13 --->
//│ 	case f₀([N]) of {K  => 0 | L  => 1}: 22
//│ [N]: 18 --->
//│ 	case x¹ of {N  => [K] | C a¹ => primitive⁰}: 15
//│ ------------------
//│ case x¹ of {N  => [K] | C a¹ => primitive⁰}: 15 --->
//│ 	[N]: 18
//│ case f₀([N]) of {K  => 0 | L  => 1}: 22 --->
//│ 	[K]: 13
//│ 	NoProd
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N]: 18 --->
//│ 	case x¹ of {N  => [K] | C a¹ => primitive⁰}: 15
//│ ------------------
//│ case x¹ of {N  => [K] | C a¹ => primitive⁰}: 15 --->
//│ 	[N]: 18
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ case f₀((fun _lh_dummy⁰ -> [K])) of {
//│ 	K  => 0
//│ 	| L  => 1}
//│ def f₀(x²) = 
//│ 	x²(99)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ ~~~~~~~~~~~~~~~~~~~~~~~ NEXT ITERATION ~~~~~~~~~~~~~~~~~~~~~~~
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [f₀^1] (hopeless to continue)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ case f₀₀((fun _lh_dummy¹ -> [K])) of {
//│ 	K  => 0
//│ 	| L  => 1}
//│ def f₀₀(x¹) = 
//│ 	x¹(99)
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [K]: 17 --->
//│ 	case f₀₀((fun _lh_dummy¹ -> [K])) of {K  => 0 | L  => 1}: 22
//│ ------------------
//│ case f₀₀((fun _lh_dummy¹ -> [K])) of {K  => 0 | L  => 1}: 22 --->
//│ 	[K]: 17
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [K]: 17 --->
//│ 	case f₀₀((fun _lh_dummy¹ -> [K])) of {K  => 0 | L  => 1}: 22
//│ ------------------
//│ case f₀₀((fun _lh_dummy¹ -> [K])) of {K  => 0 | L  => 1}: 22 --->
//│ 	[K]: 17
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ f₀₀((fun _lh_dummy² -> (fun _lh_dummy³ -> 0)), 99)
//│ def f₀₀(x²) = 
//│ 	x²(99)
//│ <<<<<<< after fusion <<<<<<<

