:NewParser
:ParseOnly

// this will be stackoverflow
_LUMBERHACK_EVAL_LUMBERHACK_ERROR
let p =
  let k = k
  k
p
//│ |_LUMBERHACK_EVAL_LUMBERHACK_ERROR|↵|#let| |p| |#=|→|#let| |k| |#=| |k|↵|k|←|↵|p|
//│ Parsed: {_LUMBERHACK_EVAL_LUMBERHACK_ERROR; let p = {let k = k; k}; p}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ p^4
//│ def p = 
//│ 	let k⁰ = k⁰
//│ 	in k⁰
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ !!!!!!ERROR!!!!!!
//│ java.lang.StackOverflowError
//│ !!!!!!ERROR!!!!!!

// this will be scope error instead of stackoverflow
_LUMBERHACK_EVAL_LUMBERHACK_ERROR
let p =
  let k = k
  x => D(k)
p(0)
//│ |_LUMBERHACK_EVAL_LUMBERHACK_ERROR|↵|#let| |p| |#=|→|#let| |k| |#=| |k|↵|x| |=>| |D|(|k|)|←|↵|p|(|0|)|
//│ Parsed: {_LUMBERHACK_EVAL_LUMBERHACK_ERROR; let p = {let k = k; x, => D (k,)}; p (0,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (p^6 0)
//│ def p = 
//│ 	let k⁰ = k⁰
//│ 	in (fun x⁰ -> [D k⁰])
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>>>>> Original Eval Res >>>>>>>>>>
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: k⁰ not in ctx
//│ !!!!!!ERROR!!!!!!

// this will be type error
_LUMBERHACK_ERROR
fun f(x) = if x is
  A then 
    let t = f(t)
    B
f(A)
//│ |_LUMBERHACK_ERROR|↵|#fun| |f|(|x|)| |#=| |#if| |x| |is|→|A| |#then| |→|#let| |t| |#=| |f|(|t|)|↵|B|←|←|↵|f|(|A|)|
//│ Parsed: {_LUMBERHACK_ERROR; fun f = x, => if x is ‹(A) then {let t = f (t,); B}›; f (A,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ (f^9 [A])
//│ def f = (fun x⁰ -> case x⁰ of {
//│ 	A  => 
//│ 		let t⁰ = (f^2 t⁰)
//│ 		in [B]})
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ !!!!!!ERROR!!!!!!
//│ java.lang.Exception: Internal Error: type error B <: Destruct(A)
//│ !!!!!!ERROR!!!!!!
