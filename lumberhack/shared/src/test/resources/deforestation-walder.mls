:NewParser
:ParseOnly

// CORRECT: need bubbling out and inlining of square to be exactly same as wadler's out
fun map(f, ls) = if ls is
  C(h, t) then C(f(h), map(f, t))
  N then N
fun upto(a, b) = if a > b then N else C(a, upto(a + 1, b))
fun sum(ls) = summ(0, ls)
fun summ(acc, ls) = if ls is
  N then acc
  C(h, t) then summ(acc + h, t)
fun main(n) = sum(map(x => x * x, upto(1, n)))
main
//│ |#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |upto|(|a|,| |b|)| |#=| |#if| |a| |>| |b| |#then| |N| |#else| |C|(|a|,| |upto|(|a| |+| |1|,| |b|)|)|↵|#fun| |sum|(|ls|)| |#=| |summ|(|0|,| |ls|)|↵|#fun| |summ|(|acc|,| |ls|)| |#=| |#if| |ls| |is|→|N| |#then| |acc|↵|C|(|h|,| |t|)| |#then| |summ|(|acc| |+| |h|,| |t|)|←|↵|#fun| |main|(|n|)| |#=| |sum|(|map|(|x| |=>| |x| |*| |x|,| |upto|(|1|,| |n|)|)|)|↵|main|
//│ Parsed: {fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun upto = a, b, => if (> (a,) (b,)) then N else C (a, upto (+ (a,) (1,), b,),); fun sum = ls, => summ (0, ls,); fun summ = acc, ls, => if ls is ‹(N) then acc; (C (h, t,)) then summ (+ (acc,) (h,), t,)›; fun main = n, => sum (map (x, => * (x,) (x,), upto (1, n,),),); main}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ main^72
//│ def main(n⁰) = sum^55(map^56((fun x⁰ -> (x⁰ * x⁰)), upto^64(1, n⁰)))
//│ def map(f⁰, ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map^5(f⁰, t⁰)]
//│ 	| N  => [N]}
//│ def sum(ls¹) = summ^35(0, ls¹)
//│ def summ(acc⁰, ls²) = case ls² of {
//│ 	N  => acc⁰
//│ 	| C h¹ t¹ => summ^43((acc⁰ + h¹), t¹)}
//│ def upto(a⁰, b⁰) = if (a⁰ > b⁰) then [N] else [C a⁰ upto^22((a⁰ + 1), b⁰)]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [main^72] (hopeless to continue)
//│ 	[main^72 · map^56] (using original def)
//│ 		[main^72 · map^56 · map^5] ---> [main^72 · map^56] (using original def)
//│ 	[main^72 · sum^55] (using original def)
//│ 		[main^72 · sum^55 · summ^35] (using original def)
//│ 			[main^72 · sum^55 · summ^35 · summ^43] ---> [main^72 · sum^55 · summ^35] (using original def)
//│ 	[main^72 · upto^64] (using original def)
//│ 		[main^72 · upto^64 · upto^22] ---> [main^72 · upto^64] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ main_₀
//│ def main_₀(n¹) = 
//│ 	sum_₀(map_₀((fun x¹ -> (x¹ * x¹)), upto_₀(1, n¹)))
//│ 	where
//│ 	def map_₀(f¹, ls⁵) = 
//│ 		case ls⁵ of {
//│ 			C h³ t³ => [C f¹(h³) map_₀(f¹, t³)]
//│ 			| N  => [N]}
//│ 	def sum_₀(ls³) = 
//│ 		summ_₀(0, ls³)
//│ 		where
//│ 		def summ_₀(acc¹, ls⁴) = 
//│ 			case ls⁴ of {
//│ 				N  => acc¹
//│ 				| C h² t² => summ_₀((acc¹ + h²), t²)}
//│ 	def upto_₀(a¹, b¹) = 
//│ 		if (a¹ > b¹) then [N] else [C a¹ upto_₀((a¹ + 1), b¹)]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C f¹(h³) map_₀(f¹, t³)]: 119 --->
//│ 	case ls⁴ of {N  => acc¹ | C h² t² => summ_₀((acc¹ + h²), t²)}: 107
//│ [N]: 120 --->
//│ 	case ls⁴ of {N  => acc¹ | C h² t² => summ_₀((acc¹ + h²), t²)}: 107
//│ [N]: 129 --->
//│ 	case ls⁵ of {C h³ t³ => [C f¹(h³) map_₀(f¹, t³)] | N  => [N]}: 121
//│ [C a¹ upto_₀((a¹ + 1), b¹)]: 140 --->
//│ 	case ls⁵ of {C h³ t³ => [C f¹(h³) map_₀(f¹, t³)] | N  => [N]}: 121
//│ ------------------
//│ case ls⁴ of {N  => acc¹ | C h² t² => summ_₀((acc¹ + h²), t²)}: 107 --->
//│ 	[C f¹(h³) map_₀(f¹, t³)]: 119
//│ 	[N]: 120
//│ case ls⁵ of {C h³ t³ => [C f¹(h³) map_₀(f¹, t³)] | N  => [N]}: 121 --->
//│ 	[N]: 129
//│ 	[C a¹ upto_₀((a¹ + 1), b¹)]: 140
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C f¹(h³) map_₀(f¹, t³)]: 119 --->
//│ 	case ls⁴ of {N  => acc¹ | C h² t² => summ_₀((acc¹ + h²), t²)}: 107
//│ [N]: 120 --->
//│ 	case ls⁴ of {N  => acc¹ | C h² t² => summ_₀((acc¹ + h²), t²)}: 107
//│ [N]: 129 --->
//│ 	case ls⁵ of {C h³ t³ => [C f¹(h³) map_₀(f¹, t³)] | N  => [N]}: 121
//│ [C a¹ upto_₀((a¹ + 1), b¹)]: 140 --->
//│ 	case ls⁵ of {C h³ t³ => [C f¹(h³) map_₀(f¹, t³)] | N  => [N]}: 121
//│ ------------------
//│ case ls⁴ of {N  => acc¹ | C h² t² => summ_₀((acc¹ + h²), t²)}: 107 --->
//│ 	[C f¹(h³) map_₀(f¹, t³)]: 119
//│ 	[N]: 120
//│ case ls⁵ of {C h³ t³ => [C f¹(h³) map_₀(f¹, t³)] | N  => [N]}: 121 --->
//│ 	[N]: 129
//│ 	[C a¹ upto_₀((a¹ + 1), b¹)]: 140
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ main_₀
//│ def main_₀(n²) = 
//│ 	sum_₀(map_₀((fun x² -> (x² * x²)), upto_₀(1, n²)))
//│ 	where
//│ 	def map_₀(f², ls⁶) = 
//│ 		ls⁶(f²)
//│ 	def sum_₀(ls⁷) = 
//│ 		summ_₀(0, ls⁷)
//│ 		where
//│ 		def summ_₀(acc², ls⁸) = 
//│ 			ls⁸(acc²)
//│ 	def upto_₀(a², b²) = 
//│ 		if (a² > b²) then (fun f³ -> (fun acc³ -> acc³)) else 
//│ 			let t⁴ = upto_₀((a² + 1), b²)
//│ 			in let h⁴ = a²
//│ 			in (fun f⁴ -> 
//│ 				let t⁵ = map_₀(f⁴, t⁴)
//│ 				in let h⁵ = f⁴(h⁴)
//│ 				in (fun acc⁴ -> summ_₀((acc⁴ + h⁵), t⁵)))
//│ <<<<<<< after fusion <<<<<<<


// CORRECT: slightly different from actual example in wadler's paper: the sum is no longer tail recursive
// our approach (after bubbling out of parameters and inlining of square):
// upto₀ a b f = if a > b then 0 else f(a) + upto₀(a + 1, b, f)
fun map(f, ls) = if ls is
  C(h, t) then C(f(h), map(f, t))
  N then N
fun upto(a, b) = if a > b then N else C(a, upto(a + 1, b))
fun sum(ls) = if ls is
  C(h, t) then h + sum(t)
  N then 0
fun main(n) = sum(map(x => x * x, upto(1, n)))
main
//│ |#fun| |map|(|f|,| |ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|f|,| |t|)|)|↵|N| |#then| |N|←|↵|#fun| |upto|(|a|,| |b|)| |#=| |#if| |a| |>| |b| |#then| |N| |#else| |C|(|a|,| |upto|(|a| |+| |1|,| |b|)|)|↵|#fun| |sum|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |h| |+| |sum|(|t|)|↵|N| |#then| |0|←|↵|#fun| |main|(|n|)| |#=| |sum|(|map|(|x| |=>| |x| |*| |x|,| |upto|(|1|,| |n|)|)|)|↵|main|
//│ Parsed: {fun map = f, ls, => if ls is ‹(C (h, t,)) then C (f (h,), map (f, t,),); (N) then N›; fun upto = a, b, => if (> (a,) (b,)) then N else C (a, upto (+ (a,) (1,), b,),); fun sum = ls, => if ls is ‹(C (h, t,)) then + (h,) (sum (t,),); (N) then 0›; fun main = n, => sum (map (x, => * (x,) (x,), upto (1, n,),),); main}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ main^63
//│ def main(n⁰) = sum^46(map^47((fun x⁰ -> (x⁰ * x⁰)), upto^55(1, n⁰)))
//│ def map(f⁰, ls⁰) = case ls⁰ of {
//│ 	C h⁰ t⁰ => [C f⁰(h⁰) map^5(f⁰, t⁰)]
//│ 	| N  => [N]}
//│ def sum(ls¹) = case ls¹ of {
//│ 	C h¹ t¹ => (h¹ + sum^39(t¹))
//│ 	| N  => 0}
//│ def upto(a⁰, b⁰) = if (a⁰ > b⁰) then [N] else [C a⁰ upto^22((a⁰ + 1), b⁰)]
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [main^63] (hopeless to continue)
//│ 	[main^63 · map^47] (using original def)
//│ 		[main^63 · map^47 · map^5] ---> [main^63 · map^47] (using original def)
//│ 	[main^63 · sum^46] (using original def)
//│ 		[main^63 · sum^46 · sum^39] ---> [main^63 · sum^46] (using original def)
//│ 	[main^63 · upto^55] (using original def)
//│ 		[main^63 · upto^55 · upto^22] ---> [main^63 · upto^55] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ main_₀
//│ def main_₀(n¹) = 
//│ 	sum_₀(map_₀((fun x¹ -> (x¹ * x¹)), upto_₀(1, n¹)))
//│ 	where
//│ 	def map_₀(f¹, ls²) = 
//│ 		case ls² of {
//│ 			C h² t² => [C f¹(h²) map_₀(f¹, t²)]
//│ 			| N  => [N]}
//│ 	def sum_₀(ls³) = 
//│ 		case ls³ of {
//│ 			C h³ t³ => (h³ + sum_₀(t³))
//│ 			| N  => 0}
//│ 	def upto_₀(a¹, b¹) = 
//│ 		if (a¹ > b¹) then [N] else [C a¹ upto_₀((a¹ + 1), b¹)]
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C f¹(h²) map_₀(f¹, t²)]: 73 --->
//│ 	case ls³ of {C h³ t³ => (h³ + sum_₀(t³)) | N  => 0}: 124
//│ [N]: 74 --->
//│ 	case ls³ of {C h³ t³ => (h³ + sum_₀(t³)) | N  => 0}: 124
//│ [N]: 100 --->
//│ 	case ls² of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 75
//│ [C a¹ upto_₀((a¹ + 1), b¹)]: 111 --->
//│ 	case ls² of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 75
//│ ------------------
//│ case ls² of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 75 --->
//│ 	[N]: 100
//│ 	[C a¹ upto_₀((a¹ + 1), b¹)]: 111
//│ case ls³ of {C h³ t³ => (h³ + sum_₀(t³)) | N  => 0}: 124 --->
//│ 	[C f¹(h²) map_₀(f¹, t²)]: 73
//│ 	[N]: 74
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C f¹(h²) map_₀(f¹, t²)]: 73 --->
//│ 	case ls³ of {C h³ t³ => (h³ + sum_₀(t³)) | N  => 0}: 124
//│ [N]: 74 --->
//│ 	case ls³ of {C h³ t³ => (h³ + sum_₀(t³)) | N  => 0}: 124
//│ [N]: 100 --->
//│ 	case ls² of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 75
//│ [C a¹ upto_₀((a¹ + 1), b¹)]: 111 --->
//│ 	case ls² of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 75
//│ ------------------
//│ case ls² of {C h² t² => [C f¹(h²) map_₀(f¹, t²)] | N  => [N]}: 75 --->
//│ 	[N]: 100
//│ 	[C a¹ upto_₀((a¹ + 1), b¹)]: 111
//│ case ls³ of {C h³ t³ => (h³ + sum_₀(t³)) | N  => 0}: 124 --->
//│ 	[C f¹(h²) map_₀(f¹, t²)]: 73
//│ 	[N]: 74
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ main_₀
//│ def main_₀(n²) = 
//│ 	sum_₀(map_₀((fun x² -> (x² * x²)), upto_₀(1, n²)))
//│ 	where
//│ 	def map_₀(f², ls⁴) = 
//│ 		ls⁴(f²)
//│ 	def sum_₀(ls⁵) = 
//│ 		ls⁵(99)
//│ 	def upto_₀(a², b²) = 
//│ 		if (a² > b²) then (fun f³ -> (fun _lh_dummy⁰ -> 0)) else 
//│ 			let t⁴ = upto_₀((a² + 1), b²)
//│ 			in let h⁴ = a²
//│ 			in (fun f⁴ -> 
//│ 				let t⁵ = map_₀(f⁴, t⁴)
//│ 				in let h⁵ = f⁴(h⁴)
//│ 				in (fun _lh_dummy¹ -> (h⁵ + sum_₀(t⁵))))
//│ <<<<<<< after fusion <<<<<<<

// WRONG: cannot fuse at all if there is no concrete input
fun append(xs, ys) = if xs is
  C(h, t) then C(h, append(t, ys))
  N then ys
fun main(x, y, z) = append(append(x, y), z)
main
//│ |#fun| |append|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |C|(|h|,| |append|(|t|,| |ys|)|)|↵|N| |#then| |ys|←|↵|#fun| |main|(|x|,| |y|,| |z|)| |#=| |append|(|append|(|x|,| |y|)|,| |z|)|↵|main|
//│ Parsed: {fun append = xs, ys, => if xs is ‹(C (h, t,)) then C (h, append (t, ys,),); (N) then ys›; fun main = x, y, z, => append (append (x, y,), z,); main}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ main^25
//│ def append(xs⁰, ys⁰) = case xs⁰ of {
//│ 	C h⁰ t⁰ => [C h⁰ append^3(t⁰, ys⁰)]
//│ 	| N  => ys⁰}
//│ def main(x⁰, y⁰, z⁰) = append^13(append^14(x⁰, y⁰), z⁰)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [main^25] (hopeless to continue)
//│ 	[main^25 · append^13] (using original def)
//│ 		[main^25 · append^13 · append^3] ---> [main^25 · append^13] (using original def)
//│ 	[main^25 · append^14] (using original def)
//│ 		[main^25 · append^14 · append^3] ---> [main^25 · append^14] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ main_₀
//│ def main_₀(x¹, y¹, z¹) = 
//│ 	append_₀(append_₁(x¹, y¹), z¹)
//│ 	where
//│ 	def append_₀(xs², ys²) = 
//│ 		case xs² of {
//│ 			C h² t² => [C h² append_₀(t², ys²)]
//│ 			| N  => ys²}
//│ 	def append_₁(xs¹, ys¹) = 
//│ 		case xs¹ of {
//│ 			C h¹ t¹ => [C h¹ append_₁(t¹, ys¹)]
//│ 			| N  => ys¹}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h¹ append_₁(t¹, ys¹)]: 45 --->
//│ 	case xs² of {C h² t² => [C h² append_₀(t², ys²)] | N  => ys²}: 59
//│ ------------------
//│ case xs² of {C h² t² => [C h² append_₀(t², ys²)] | N  => ys²}: 59 --->
//│ 	NoProd
//│ 	[C h¹ append_₁(t¹, ys¹)]: 45
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ main_₀
//│ def main_₀(x², y², z²) = 
//│ 	append_₀(append_₁(x², y²), z²)
//│ 	where
//│ 	def append_₀(xs⁴, ys⁴) = 
//│ 		case xs⁴ of {
//│ 			C h² t² => [C h² append_₀(t², ys⁴)]
//│ 			| N  => ys⁴}
//│ 	def append_₁(xs³, ys³) = 
//│ 		case xs³ of {
//│ 			C h¹ t¹ => [C h¹ append_₁(t¹, ys³)]
//│ 			| N  => ys³}
//│ <<<<<<< after fusion <<<<<<<


// WRONG: cannot fuse if noprod flow into y
fun append(xs, ys) = if xs is
  C(h, t) then C(h, append(t, ys))
  N then ys
fun idList(ls) = if ls is
  C(h, t) then C(h, t)
  N then N
fun append2(xs, ys) = if xs is
  C(h, t) then C(h, append2(t, ys))
  N then idList(ys)
fun main(x, y, z) = append(append2(x, y), z)
main
//│ |#fun| |append|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |C|(|h|,| |append|(|t|,| |ys|)|)|↵|N| |#then| |ys|←|↵|#fun| |idList|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|h|,| |t|)|↵|N| |#then| |N|←|↵|#fun| |append2|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |C|(|h|,| |append2|(|t|,| |ys|)|)|↵|N| |#then| |idList|(|ys|)|←|↵|#fun| |main|(|x|,| |y|,| |z|)| |#=| |append|(|append2|(|x|,| |y|)|,| |z|)|↵|main|
//│ Parsed: {fun append = xs, ys, => if xs is ‹(C (h, t,)) then C (h, append (t, ys,),); (N) then ys›; fun idList = ls, => if ls is ‹(C (h, t,)) then C (h, t,); (N) then N›; fun append2 = xs, ys, => if xs is ‹(C (h, t,)) then C (h, append2 (t, ys,),); (N) then idList (ys,)›; fun main = x, y, z, => append (append2 (x, y,), z,); main}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ main^46
//│ def append(xs⁰, ys⁰) = case xs⁰ of {
//│ 	C h⁰ t⁰ => [C h⁰ append^3(t⁰, ys⁰)]
//│ 	| N  => ys⁰}
//│ def append2(xs¹, ys¹) = case xs¹ of {
//│ 	C h² t² => [C h² append2^22(t², ys¹)]
//│ 	| N  => idList^28(ys¹)}
//│ def idList(ls⁰) = case ls⁰ of {
//│ 	C h¹ t¹ => [C h¹ t¹]
//│ 	| N  => [N]}
//│ def main(x⁰, y⁰, z⁰) = append^34(append2^35(x⁰, y⁰), z⁰)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [main^46] (hopeless to continue)
//│ 	[main^46 · append2^35] (using original def)
//│ 		[main^46 · append2^35 · append2^22] ---> [main^46 · append2^35] (using original def)
//│ 		[main^46 · append2^35 · idList^28] (using original def)
//│ 	[main^46 · append^34] (using original def)
//│ 		[main^46 · append^34 · append^3] ---> [main^46 · append^34] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ main_₀
//│ def main_₀(x¹, y¹, z¹) = 
//│ 	append_₀(append2_₀(x¹, y¹), z¹)
//│ 	where
//│ 	def append2_₀(xs², ys²) = 
//│ 		case xs² of {
//│ 			C h³ t³ => [C h³ append2_₀(t³, ys²)]
//│ 			| N  => idList_₀(ys²)}
//│ 		where
//│ 		def idList_₀(ls¹) = 
//│ 			case ls¹ of {
//│ 				C h⁵ t⁵ => [C h⁵ t⁵]
//│ 				| N  => [N]}
//│ 	def append_₀(xs³, ys³) = 
//│ 		case xs³ of {
//│ 			C h⁴ t⁴ => [C h⁴ append_₀(t⁴, ys³)]
//│ 			| N  => ys³}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h³ append2_₀(t³, ys²)]: 66 --->
//│ 	case xs³ of {C h⁴ t⁴ => [C h⁴ append_₀(t⁴, ys³)] | N  => ys³}: 82
//│ [C h⁵ t⁵]: 88 --->
//│ 	case xs³ of {C h⁴ t⁴ => [C h⁴ append_₀(t⁴, ys³)] | N  => ys³}: 82
//│ [N]: 89 --->
//│ 	case xs³ of {C h⁴ t⁴ => [C h⁴ append_₀(t⁴, ys³)] | N  => ys³}: 82
//│ ------------------
//│ case xs³ of {C h⁴ t⁴ => [C h⁴ append_₀(t⁴, ys³)] | N  => ys³}: 82 --->
//│ 	NoProd
//│ 	[C h³ append2_₀(t³, ys²)]: 66
//│ 	[C h⁵ t⁵]: 88
//│ 	[N]: 89
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ main_₀
//│ def main_₀(x², y², z²) = 
//│ 	append_₀(append2_₀(x², y²), z²)
//│ 	where
//│ 	def append2_₀(xs⁴, ys⁴) = 
//│ 		case xs⁴ of {
//│ 			C h³ t³ => [C h³ append2_₀(t³, ys⁴)]
//│ 			| N  => idList_₀(ys⁴)}
//│ 		where
//│ 		def idList_₀(ls²) = 
//│ 			case ls² of {
//│ 				C h⁵ t⁵ => [C h⁵ t⁵]
//│ 				| N  => [N]}
//│ 	def append_₀(xs⁵, ys⁵) = 
//│ 		case xs⁵ of {
//│ 			C h⁴ t⁴ => [C h⁴ append_₀(t⁴, ys⁵)]
//│ 			| N  => ys⁵}
//│ <<<<<<< after fusion <<<<<<<

// CORRECT: will fuse if idList is recursive (this idea can be generalized to other
// data structure? an id to traverse the data to expose its structure)
fun append(xs, ys) = if xs is
  C(h, t) then C(h, append(t, ys))
  N then ys
fun idList(ls) = if ls is
  C(h, t) then C(h, idList(t))
  N then N
fun append2(xs, ys) = if xs is
  C(h, t) then C(h, append2(t, ys))
  N then idList(ys)
fun main(x, y, z) = append(append2(x, y), z)
main
//│ |#fun| |append|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |C|(|h|,| |append|(|t|,| |ys|)|)|↵|N| |#then| |ys|←|↵|#fun| |idList|(|ls|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|h|,| |idList|(|t|)|)|↵|N| |#then| |N|←|↵|#fun| |append2|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |C|(|h|,| |append2|(|t|,| |ys|)|)|↵|N| |#then| |idList|(|ys|)|←|↵|#fun| |main|(|x|,| |y|,| |z|)| |#=| |append|(|append2|(|x|,| |y|)|,| |z|)|↵|main|
//│ Parsed: {fun append = xs, ys, => if xs is ‹(C (h, t,)) then C (h, append (t, ys,),); (N) then ys›; fun idList = ls, => if ls is ‹(C (h, t,)) then C (h, idList (t,),); (N) then N›; fun append2 = xs, ys, => if xs is ‹(C (h, t,)) then C (h, append2 (t, ys,),); (N) then idList (ys,)›; fun main = x, y, z, => append (append2 (x, y,), z,); main}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ main^48
//│ def append(xs⁰, ys⁰) = case xs⁰ of {
//│ 	C h⁰ t⁰ => [C h⁰ append^3(t⁰, ys⁰)]
//│ 	| N  => ys⁰}
//│ def append2(xs¹, ys¹) = case xs¹ of {
//│ 	C h² t² => [C h² append2^24(t², ys¹)]
//│ 	| N  => idList^30(ys¹)}
//│ def idList(ls⁰) = case ls⁰ of {
//│ 	C h¹ t¹ => [C h¹ idList^15(t¹)]
//│ 	| N  => [N]}
//│ def main(x⁰, y⁰, z⁰) = append^36(append2^37(x⁰, y⁰), z⁰)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [main^48] (hopeless to continue)
//│ 	[main^48 · append2^37] (using original def)
//│ 		[main^48 · append2^37 · append2^24] ---> [main^48 · append2^37] (using original def)
//│ 		[main^48 · append2^37 · idList^30] (using original def)
//│ 			[main^48 · append2^37 · idList^30 · idList^15] ---> [main^48 · append2^37 · idList^30] (using original def)
//│ 	[main^48 · append^36] (using original def)
//│ 		[main^48 · append^36 · append^3] ---> [main^48 · append^36] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ main_₀
//│ def main_₀(x¹, y¹, z¹) = 
//│ 	append_₀(append2_₀(x¹, y¹), z¹)
//│ 	where
//│ 	def append2_₀(xs², ys²) = 
//│ 		case xs² of {
//│ 			C h³ t³ => [C h³ append2_₀(t³, ys²)]
//│ 			| N  => idList_₀(ys²)}
//│ 		where
//│ 		def idList_₀(ls¹) = 
//│ 			case ls¹ of {
//│ 				C h⁵ t⁵ => [C h⁵ idList_₀(t⁵)]
//│ 				| N  => [N]}
//│ 	def append_₀(xs³, ys³) = 
//│ 		case xs³ of {
//│ 			C h⁴ t⁴ => [C h⁴ append_₀(t⁴, ys³)]
//│ 			| N  => ys³}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h³ append2_₀(t³, ys²)]: 56 --->
//│ 	case xs³ of {C h⁴ t⁴ => [C h⁴ append_₀(t⁴, ys³)] | N  => ys³}: 84
//│ [C h⁵ idList_₀(t⁵)]: 92 --->
//│ 	case xs³ of {C h⁴ t⁴ => [C h⁴ append_₀(t⁴, ys³)] | N  => ys³}: 84
//│ [N]: 93 --->
//│ 	case xs³ of {C h⁴ t⁴ => [C h⁴ append_₀(t⁴, ys³)] | N  => ys³}: 84
//│ ------------------
//│ case xs³ of {C h⁴ t⁴ => [C h⁴ append_₀(t⁴, ys³)] | N  => ys³}: 84 --->
//│ 	[C h³ append2_₀(t³, ys²)]: 56
//│ 	[C h⁵ idList_₀(t⁵)]: 92
//│ 	[N]: 93
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C h³ append2_₀(t³, ys²)]: 56 --->
//│ 	case xs³ of {C h⁴ t⁴ => [C h⁴ append_₀(t⁴, ys³)] | N  => ys³}: 84
//│ [C h⁵ idList_₀(t⁵)]: 92 --->
//│ 	case xs³ of {C h⁴ t⁴ => [C h⁴ append_₀(t⁴, ys³)] | N  => ys³}: 84
//│ [N]: 93 --->
//│ 	case xs³ of {C h⁴ t⁴ => [C h⁴ append_₀(t⁴, ys³)] | N  => ys³}: 84
//│ ------------------
//│ case xs³ of {C h⁴ t⁴ => [C h⁴ append_₀(t⁴, ys³)] | N  => ys³}: 84 --->
//│ 	[C h³ append2_₀(t³, ys²)]: 56
//│ 	[C h⁵ idList_₀(t⁵)]: 92
//│ 	[N]: 93
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ main_₀
//│ def main_₀(x², y², z²) = 
//│ 	append_₀(append2_₀(x², y²), z²)
//│ 	where
//│ 	def append2_₀(xs⁴, ys⁴) = 
//│ 		case xs⁴ of {
//│ 			C h³ t³ => 
//│ 				let t⁶ = append2_₀(t³, ys⁴)
//│ 				in let h⁶ = h³
//│ 				in (fun ys⁵ -> [C h⁶ append_₀(t⁶, ys⁵)])
//│ 			| N  => idList_₀(ys⁴)}
//│ 		where
//│ 		def idList_₀(ls²) = 
//│ 			case ls² of {
//│ 				C h⁵ t⁵ => 
//│ 					let t⁷ = idList_₀(t⁵)
//│ 					in let h⁷ = h⁵
//│ 					in (fun ys⁷ -> [C h⁷ append_₀(t⁷, ys⁷)])
//│ 				| N  => (fun ys⁸ -> ys⁸)}
//│ 	def append_₀(xs⁵, ys⁶) = 
//│ 		xs⁵(ys⁶)
//│ <<<<<<< after fusion <<<<<<<



// CORRECT: NOTE: provide all lists using map, then it will fuse to be like
// fun map0(ls, f) = if ls is
//    C(h, t) then ys3 => ys4 => C(f(h), map0(t, f)(ys3)(ys4))
//    N then ys => ys
// fun map1(ls, f) = if ls is
//    C(h, t) then ys5 => C(f(h), map1(t, f)(ys5))
//    N then ys => ys
// fun map2 = map      // normal map
// (map0(x, f)(map1(x, f)))(map2(x, f))
fun append(xs, ys) = if xs is
  C(h, t) then C(h, append(t, ys))
  N then ys
fun main(x, y, z) = append(append(map(x, primitive), map(y, primitive)), map(z, primitive))
fun map(ls, f) = if ls is
  C(h, t) then C(f(h), map(t, f))
  N then N
main
//│ |#fun| |append|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |C|(|h|,| |append|(|t|,| |ys|)|)|↵|N| |#then| |ys|←|↵|#fun| |main|(|x|,| |y|,| |z|)| |#=| |append|(|append|(|map|(|x|,| |primitive|)|,| |map|(|y|,| |primitive|)|)|,| |map|(|z|,| |primitive|)|)|↵|#fun| |map|(|ls|,| |f|)| |#=| |#if| |ls| |is|→|C|(|h|,| |t|)| |#then| |C|(|f|(|h|)|,| |map|(|t|,| |f|)|)|↵|N| |#then| |N|←|↵|main|
//│ Parsed: {fun append = xs, ys, => if xs is ‹(C (h, t,)) then C (h, append (t, ys,),); (N) then ys›; fun main = x, y, z, => append (append (map (x, primitive,), map (y, primitive,),), map (z, primitive,),); fun map = ls, f, => if ls is ‹(C (h, t,)) then C (f (h,), map (t, f,),); (N) then N›; main}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ main^51
//│ def append(xs⁰, ys⁰) = case xs⁰ of {
//│ 	C h⁰ t⁰ => [C h⁰ append^3(t⁰, ys⁰)]
//│ 	| N  => ys⁰}
//│ def main(x⁰, y⁰, z⁰) = append^13(append^14(map^15(x⁰, primitive⁰), map^21(y⁰, primitive⁰)), map^28(z⁰, primitive⁰))
//│ def map(ls⁰, f⁰) = case ls⁰ of {
//│ 	C h¹ t¹ => [C f⁰(h¹) map^41(t¹, f⁰)]
//│ 	| N  => [N]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [main^51] (hopeless to continue)
//│ 	[main^51 · append^13] (using original def)
//│ 		[main^51 · append^13 · append^3] ---> [main^51 · append^13] (using original def)
//│ 	[main^51 · append^14] (using original def)
//│ 		[main^51 · append^14 · append^3] ---> [main^51 · append^14] (using original def)
//│ 	[main^51 · map^15] (using original def)
//│ 		[main^51 · map^15 · map^41] ---> [main^51 · map^15] (using original def)
//│ 	[main^51 · map^21] (using original def)
//│ 		[main^51 · map^21 · map^41] ---> [main^51 · map^21] (using original def)
//│ 	[main^51 · map^28] (using original def)
//│ 		[main^51 · map^28 · map^41] ---> [main^51 · map^28] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ main_₀
//│ def main_₀(x¹, y¹, z¹) = 
//│ 	append_₀(append_₁(map_₀(x¹, primitive⁰), map_₁(y¹, primitive⁰)), map_₂(z¹, primitive⁰))
//│ 	where
//│ 	def append_₀(xs¹, ys¹) = 
//│ 		case xs¹ of {
//│ 			C h² t² => [C h² append_₀(t², ys¹)]
//│ 			| N  => ys¹}
//│ 	def append_₁(xs², ys²) = 
//│ 		case xs² of {
//│ 			C h⁵ t⁵ => [C h⁵ append_₁(t⁵, ys²)]
//│ 			| N  => ys²}
//│ 	def map_₀(ls¹, f¹) = 
//│ 		case ls¹ of {
//│ 			C h³ t³ => [C f¹(h³) map_₀(t³, f¹)]
//│ 			| N  => [N]}
//│ 	def map_₁(ls³, f³) = 
//│ 		case ls³ of {
//│ 			C h⁶ t⁶ => [C f³(h⁶) map_₁(t⁶, f³)]
//│ 			| N  => [N]}
//│ 	def map_₂(ls², f²) = 
//│ 		case ls² of {
//│ 			C h⁴ t⁴ => [C f²(h⁴) map_₂(t⁴, f²)]
//│ 			| N  => [N]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C f¹(h³) map_₀(t³, f¹)]: 73 --->
//│ 	case xs² of {C h⁵ t⁵ => [C h⁵ append_₁(t⁵, ys²)] | N  => ys²}: 125
//│ [N]: 74 --->
//│ 	case xs² of {C h⁵ t⁵ => [C h⁵ append_₁(t⁵, ys²)] | N  => ys²}: 125
//│ [C h⁵ append_₁(t⁵, ys²)]: 123 --->
//│ 	case xs¹ of {C h² t² => [C h² append_₀(t², ys¹)] | N  => ys¹}: 61
//│ [C f³(h⁶) map_₁(t⁶, f³)]: 137 --->
//│ 	case xs¹ of {C h² t² => [C h² append_₀(t², ys¹)] | N  => ys¹}: 61
//│ [N]: 138 --->
//│ 	case xs¹ of {C h² t² => [C h² append_₀(t², ys¹)] | N  => ys¹}: 61
//│ ------------------
//│ case xs¹ of {C h² t² => [C h² append_₀(t², ys¹)] | N  => ys¹}: 61 --->
//│ 	[C h⁵ append_₁(t⁵, ys²)]: 123
//│ 	[C f³(h⁶) map_₁(t⁶, f³)]: 137
//│ 	[N]: 138
//│ case xs² of {C h⁵ t⁵ => [C h⁵ append_₁(t⁵, ys²)] | N  => ys²}: 125 --->
//│ 	[C f¹(h³) map_₀(t³, f¹)]: 73
//│ 	[N]: 74
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C f¹(h³) map_₀(t³, f¹)]: 73 --->
//│ 	case xs² of {C h⁵ t⁵ => [C h⁵ append_₁(t⁵, ys²)] | N  => ys²}: 125
//│ [N]: 74 --->
//│ 	case xs² of {C h⁵ t⁵ => [C h⁵ append_₁(t⁵, ys²)] | N  => ys²}: 125
//│ [C h⁵ append_₁(t⁵, ys²)]: 123 --->
//│ 	case xs¹ of {C h² t² => [C h² append_₀(t², ys¹)] | N  => ys¹}: 61
//│ [C f³(h⁶) map_₁(t⁶, f³)]: 137 --->
//│ 	case xs¹ of {C h² t² => [C h² append_₀(t², ys¹)] | N  => ys¹}: 61
//│ [N]: 138 --->
//│ 	case xs¹ of {C h² t² => [C h² append_₀(t², ys¹)] | N  => ys¹}: 61
//│ ------------------
//│ case xs¹ of {C h² t² => [C h² append_₀(t², ys¹)] | N  => ys¹}: 61 --->
//│ 	[C h⁵ append_₁(t⁵, ys²)]: 123
//│ 	[C f³(h⁶) map_₁(t⁶, f³)]: 137
//│ 	[N]: 138
//│ case xs² of {C h⁵ t⁵ => [C h⁵ append_₁(t⁵, ys²)] | N  => ys²}: 125 --->
//│ 	[C f¹(h³) map_₀(t³, f¹)]: 73
//│ 	[N]: 74
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ main_₀
//│ def main_₀(x², y², z²) = 
//│ 	append_₀(append_₁(map_₀(x², primitive⁰), map_₁(y², primitive⁰)), map_₂(z², primitive⁰))
//│ 	where
//│ 	def append_₀(xs³, ys⁶) = 
//│ 		xs³(ys⁶)
//│ 	def append_₁(xs⁴, ys⁷) = 
//│ 		xs⁴(ys⁷)
//│ 	def map_₀(ls⁴, f⁴) = 
//│ 		case ls⁴ of {
//│ 			C h³ t³ => 
//│ 				let t⁷ = map_₀(t³, f⁴)
//│ 				in let h⁷ = f⁴(h³)
//│ 				in (fun ys³ -> 
//│ 					let t⁸ = append_₁(t⁷, ys³)
//│ 					in let h⁸ = h⁷
//│ 					in (fun ys⁴ -> [C h⁸ append_₀(t⁸, ys⁴)]))
//│ 			| N  => (fun ys⁵ -> ys⁵)}
//│ 	def map_₁(ls⁶, f⁶) = 
//│ 		case ls⁶ of {
//│ 			C h⁶ t⁶ => 
//│ 				let t⁹ = map_₁(t⁶, f⁶)
//│ 				in let h⁹ = f⁶(h⁶)
//│ 				in (fun ys⁸ -> [C h⁹ append_₀(t⁹, ys⁸)])
//│ 			| N  => (fun ys⁹ -> ys⁹)}
//│ 	def map_₂(ls⁵, f⁵) = 
//│ 		case ls⁵ of {
//│ 			C h⁴ t⁴ => [C f⁵(h⁴) map_₂(t⁴, f⁵)]
//│ 			| N  => [N]}
//│ <<<<<<< after fusion <<<<<<<


// CORRECT: will fuse
fun append(xs, ys) = if xs is
  C(h, t) then C(h, append(t, ys))
  N then ys
fun main(x, y) = append(append(x, N), y)
main
//│ |#fun| |append|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |C|(|h|,| |append|(|t|,| |ys|)|)|↵|N| |#then| |ys|←|↵|#fun| |main|(|x|,| |y|)| |#=| |append|(|append|(|x|,| |N|)|,| |y|)|↵|main|
//│ Parsed: {fun append = xs, ys, => if xs is ‹(C (h, t,)) then C (h, append (t, ys,),); (N) then ys›; fun main = x, y, => append (append (x, N,), y,); main}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ main^24
//│ def append(xs⁰, ys⁰) = case xs⁰ of {
//│ 	C h⁰ t⁰ => [C h⁰ append^3(t⁰, ys⁰)]
//│ 	| N  => ys⁰}
//│ def main(x⁰, y⁰) = append^13(append^14(x⁰, [N]), y⁰)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [main^24] (hopeless to continue)
//│ 	[main^24 · append^13] (using original def)
//│ 		[main^24 · append^13 · append^3] ---> [main^24 · append^13] (using original def)
//│ 	[main^24 · append^14] (using original def)
//│ 		[main^24 · append^14 · append^3] ---> [main^24 · append^14] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ main_₀
//│ def main_₀(x¹, y¹) = 
//│ 	append_₀(append_₁(x¹, [N]), y¹)
//│ 	where
//│ 	def append_₀(xs², ys²) = 
//│ 		case xs² of {
//│ 			C h² t² => [C h² append_₀(t², ys²)]
//│ 			| N  => ys²}
//│ 	def append_₁(xs¹, ys¹) = 
//│ 		case xs¹ of {
//│ 			C h¹ t¹ => [C h¹ append_₁(t¹, ys¹)]
//│ 			| N  => ys¹}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h¹ append_₁(t¹, ys¹)]: 32 --->
//│ 	case xs² of {C h² t² => [C h² append_₀(t², ys²)] | N  => ys²}: 57
//│ [N]: 41 --->
//│ 	case xs² of {C h² t² => [C h² append_₀(t², ys²)] | N  => ys²}: 57
//│ ------------------
//│ case xs² of {C h² t² => [C h² append_₀(t², ys²)] | N  => ys²}: 57 --->
//│ 	[C h¹ append_₁(t¹, ys¹)]: 32
//│ 	[N]: 41
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C h¹ append_₁(t¹, ys¹)]: 32 --->
//│ 	case xs² of {C h² t² => [C h² append_₀(t², ys²)] | N  => ys²}: 57
//│ [N]: 41 --->
//│ 	case xs² of {C h² t² => [C h² append_₀(t², ys²)] | N  => ys²}: 57
//│ ------------------
//│ case xs² of {C h² t² => [C h² append_₀(t², ys²)] | N  => ys²}: 57 --->
//│ 	[C h¹ append_₁(t¹, ys¹)]: 32
//│ 	[N]: 41
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ main_₀
//│ def main_₀(x², y²) = 
//│ 	append_₀(append_₁(x², (fun ys⁵ -> ys⁵)), y²)
//│ 	where
//│ 	def append_₀(xs⁴, ys⁶) = 
//│ 		xs⁴(ys⁶)
//│ 	def append_₁(xs³, ys³) = 
//│ 		case xs³ of {
//│ 			C h¹ t¹ => 
//│ 				let t³ = append_₁(t¹, ys³)
//│ 				in let h³ = h¹
//│ 				in (fun ys⁴ -> [C h³ append_₀(t³, ys⁴)])
//│ 			| N  => ys³}
//│ <<<<<<< after fusion <<<<<<<


// CORRECT: will fuse
fun append(xs, ys) = if xs is
  C(h, t) then C(h, append(t, ys))
  N then ys // <--------- this `ys` contains no known information if not provided
fun main(x, y) = append(append(x, C(1, C(2, N))), y)
main
//│ |#fun| |append|(|xs|,| |ys|)| |#=| |#if| |xs| |is|→|C|(|h|,| |t|)| |#then| |C|(|h|,| |append|(|t|,| |ys|)|)|↵|N| |#then| |ys| |/* <--------- this `ys` contains no known information if not provided*/|←|↵|#fun| |main|(|x|,| |y|)| |#=| |append|(|append|(|x|,| |C|(|1|,| |C|(|2|,| |N|)|)|)|,| |y|)|↵|main|
//│ Parsed: {fun append = xs, ys, => if xs is ‹(C (h, t,)) then C (h, append (t, ys,),); (N) then ys›; fun main = x, y, => append (append (x, C (1, C (2, N,),),), y,); main}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ main^28
//│ def append(xs⁰, ys⁰) = case xs⁰ of {
//│ 	C h⁰ t⁰ => [C h⁰ append^3(t⁰, ys⁰)]
//│ 	| N  => ys⁰}
//│ def main(x⁰, y⁰) = append^13(append^14(x⁰, [C 1 [C 2 [N]]]), y⁰)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [main^28] (hopeless to continue)
//│ 	[main^28 · append^13] (using original def)
//│ 		[main^28 · append^13 · append^3] ---> [main^28 · append^13] (using original def)
//│ 	[main^28 · append^14] (using original def)
//│ 		[main^28 · append^14 · append^3] ---> [main^28 · append^14] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ main_₀
//│ def main_₀(x¹, y¹) = 
//│ 	append_₀(append_₁(x¹, [C 1 [C 2 [N]]]), y¹)
//│ 	where
//│ 	def append_₀(xs¹, ys¹) = 
//│ 		case xs¹ of {
//│ 			C h¹ t¹ => [C h¹ append_₀(t¹, ys¹)]
//│ 			| N  => ys¹}
//│ 	def append_₁(xs², ys²) = 
//│ 		case xs² of {
//│ 			C h² t² => [C h² append_₁(t², ys²)]
//│ 			| N  => ys²}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [C h² append_₁(t², ys²)]: 48 --->
//│ 	case xs¹ of {C h¹ t¹ => [C h¹ append_₀(t¹, ys¹)] | N  => ys¹}: 38
//│ [N]: 59 --->
//│ 	case xs¹ of {C h¹ t¹ => [C h¹ append_₀(t¹, ys¹)] | N  => ys¹}: 38
//│ [C 2 [N]]: 60 --->
//│ 	case xs¹ of {C h¹ t¹ => [C h¹ append_₀(t¹, ys¹)] | N  => ys¹}: 38
//│ [C 1 [C 2 [N]]]: 61 --->
//│ 	case xs¹ of {C h¹ t¹ => [C h¹ append_₀(t¹, ys¹)] | N  => ys¹}: 38
//│ ------------------
//│ case xs¹ of {C h¹ t¹ => [C h¹ append_₀(t¹, ys¹)] | N  => ys¹}: 38 --->
//│ 	[C h² append_₁(t², ys²)]: 48
//│ 	[N]: 59
//│ 	[C 2 [N]]: 60
//│ 	[C 1 [C 2 [N]]]: 61
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [C h² append_₁(t², ys²)]: 48 --->
//│ 	case xs¹ of {C h¹ t¹ => [C h¹ append_₀(t¹, ys¹)] | N  => ys¹}: 38
//│ [N]: 59 --->
//│ 	case xs¹ of {C h¹ t¹ => [C h¹ append_₀(t¹, ys¹)] | N  => ys¹}: 38
//│ [C 2 [N]]: 60 --->
//│ 	case xs¹ of {C h¹ t¹ => [C h¹ append_₀(t¹, ys¹)] | N  => ys¹}: 38
//│ [C 1 [C 2 [N]]]: 61 --->
//│ 	case xs¹ of {C h¹ t¹ => [C h¹ append_₀(t¹, ys¹)] | N  => ys¹}: 38
//│ ------------------
//│ case xs¹ of {C h¹ t¹ => [C h¹ append_₀(t¹, ys¹)] | N  => ys¹}: 38 --->
//│ 	[C h² append_₁(t², ys²)]: 48
//│ 	[N]: 59
//│ 	[C 2 [N]]: 60
//│ 	[C 1 [C 2 [N]]]: 61
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ main_₀
//│ def main_₀(x², y²) = 
//│ 	append_₀(append_₁(x², 
//│ 		let t⁴ = 	
//│ 			let t⁵ = (fun ys⁸ -> ys⁸)
//│ 			in let h⁵ = 2
//│ 			in (fun ys⁷ -> [C h⁵ append_₀(t⁵, ys⁷)])
//│ 		in let h⁴ = 1
//│ 		in (fun ys⁶ -> [C h⁴ append_₀(t⁴, ys⁶)])), y²)
//│ 	where
//│ 	def append_₀(xs³, ys³) = 
//│ 		xs³(ys³)
//│ 	def append_₁(xs⁴, ys⁴) = 
//│ 		case xs⁴ of {
//│ 			C h² t² => 
//│ 				let t³ = append_₁(t², ys⁴)
//│ 				in let h³ = h²
//│ 				in (fun ys⁵ -> [C h³ append_₀(t³, ys⁵)])
//│ 			| N  => ys⁴}
//│ <<<<<<< after fusion <<<<<<<



// CORRECT: same amount of fusion done
fun flip(t) = if t is
  T(l, r) then T(flip(l), flip(r))
  N(v) then N(v)
fun ff(t) = flip(flip(t))
ff
//│ |#fun| |flip|(|t|)| |#=| |#if| |t| |is|→|T|(|l|,| |r|)| |#then| |T|(|flip|(|l|)|,| |flip|(|r|)|)|↵|N|(|v|)| |#then| |N|(|v|)|←|↵|#fun| |ff|(|t|)| |#=| |flip|(|flip|(|t|)|)|↵|ff|
//│ Parsed: {fun flip = t, => if t is ‹(T (l, r,)) then T (flip (l,), flip (r,),); (N (v,)) then N (v,)›; fun ff = t, => flip (flip (t,),); ff}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ ff^19
//│ def ff(t¹) = flip^13(flip^14(t¹))
//│ def flip(t⁰) = case t⁰ of {
//│ 	T l⁰ r⁰ => [T flip^2(l⁰) flip^5(r⁰)]
//│ 	| N v⁰ => [N v⁰]}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [ff^19] (hopeless to continue)
//│ 	[ff^19 · flip^13] (using original def)
//│ 		[ff^19 · flip^13 · flip^2] ---> [ff^19 · flip^13] (using original def)
//│ 		[ff^19 · flip^13 · flip^5] ---> [ff^19 · flip^13] (using original def)
//│ 	[ff^19 · flip^14] (using original def)
//│ 		[ff^19 · flip^14 · flip^2] ---> [ff^19 · flip^14] (using original def)
//│ 		[ff^19 · flip^14 · flip^5] ---> [ff^19 · flip^14] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ ff_₀
//│ def ff_₀(t³) = 
//│ 	flip_₀(flip_₁(t³))
//│ 	where
//│ 	def flip_₀(t⁴) = 
//│ 		case t⁴ of {
//│ 			T l² r² => [T flip_₀(l²) flip_₀(r²)]
//│ 			| N v² => [N v²]}
//│ 	def flip_₁(t²) = 
//│ 		case t² of {
//│ 			T l¹ r¹ => [T flip_₁(l¹) flip_₁(r¹)]
//│ 			| N v¹ => [N v¹]}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [T flip_₁(l¹) flip_₁(r¹)]: 27 --->
//│ 	case t⁴ of {T l² r² => [T flip_₀(l²) flip_₀(r²)] | N v² => [N v²]}: 48
//│ [N v¹]: 29 --->
//│ 	case t⁴ of {T l² r² => [T flip_₀(l²) flip_₀(r²)] | N v² => [N v²]}: 48
//│ ------------------
//│ case t⁴ of {T l² r² => [T flip_₀(l²) flip_₀(r²)] | N v² => [N v²]}: 48 --->
//│ 	[T flip_₁(l¹) flip_₁(r¹)]: 27
//│ 	[N v¹]: 29
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [T flip_₁(l¹) flip_₁(r¹)]: 27 --->
//│ 	case t⁴ of {T l² r² => [T flip_₀(l²) flip_₀(r²)] | N v² => [N v²]}: 48
//│ [N v¹]: 29 --->
//│ 	case t⁴ of {T l² r² => [T flip_₀(l²) flip_₀(r²)] | N v² => [N v²]}: 48
//│ ------------------
//│ case t⁴ of {T l² r² => [T flip_₀(l²) flip_₀(r²)] | N v² => [N v²]}: 48 --->
//│ 	[T flip_₁(l¹) flip_₁(r¹)]: 27
//│ 	[N v¹]: 29
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ ff_₀
//│ def ff_₀(t⁶) = 
//│ 	flip_₀(flip_₁(t⁶))
//│ 	where
//│ 	def flip_₀(t⁷) = 
//│ 		t⁷(99)
//│ 	def flip_₁(t⁵) = 
//│ 		case t⁵ of {
//│ 			T l¹ r¹ => 
//│ 				let r³ = flip_₁(r¹)
//│ 				in let l³ = flip_₁(l¹)
//│ 				in (fun _lh_dummy⁰ -> [T flip_₀(l³) flip_₀(r³)])
//│ 			| N v¹ => 
//│ 				let v³ = v¹
//│ 				in (fun _lh_dummy¹ -> [N v³])}
//│ <<<<<<< after fusion <<<<<<<

// CORRECT:
fun squaretr(t) = if t is
  N(v) then N(v * v)
  T(l, r) then T(squaretr(l), squaretr(r))
fun sumtr(t) = if t is
  N(v) then v
  T(l, r) then sumtr(l) + sumtr(r)
fun main(t) = sumtr(squaretr(t))
main
//│ |#fun| |squaretr|(|t|)| |#=| |#if| |t| |is|→|N|(|v|)| |#then| |N|(|v| |*| |v|)|↵|T|(|l|,| |r|)| |#then| |T|(|squaretr|(|l|)|,| |squaretr|(|r|)|)|←|↵|#fun| |sumtr|(|t|)| |#=| |#if| |t| |is|→|N|(|v|)| |#then| |v|↵|T|(|l|,| |r|)| |#then| |sumtr|(|l|)| |+| |sumtr|(|r|)|←|↵|#fun| |main|(|t|)| |#=| |sumtr|(|squaretr|(|t|)|)|↵|main|
//│ Parsed: {fun squaretr = t, => if t is ‹(N (v,)) then N (* (v,) (v,),); (T (l, r,)) then T (squaretr (l,), squaretr (r,),)›; fun sumtr = t, => if t is ‹(N (v,)) then v; (T (l, r,)) then + (sumtr (l,),) (sumtr (r,),)›; fun main = t, => sumtr (squaretr (t,),); main}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ main^36
//│ def main(t²) = sumtr^30(squaretr^31(t²))
//│ def squaretr(t⁰) = case t⁰ of {
//│ 	N v⁰ => [N (v⁰ * v⁰)]
//│ 	| T l⁰ r⁰ => [T squaretr^8(l⁰) squaretr^11(r⁰)]}
//│ def sumtr(t¹) = case t¹ of {
//│ 	N v¹ => v¹
//│ 	| T l¹ r¹ => (sumtr^20(l¹) + sumtr^24(r¹))}
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> expansion >>>>>>>
//│ [main^36] (hopeless to continue)
//│ 	[main^36 · squaretr^31] (using original def)
//│ 		[main^36 · squaretr^31 · squaretr^11] ---> [main^36 · squaretr^31] (using original def)
//│ 		[main^36 · squaretr^31 · squaretr^8] ---> [main^36 · squaretr^31] (using original def)
//│ 	[main^36 · sumtr^30] (using original def)
//│ 		[main^36 · sumtr^30 · sumtr^20] ---> [main^36 · sumtr^30] (using original def)
//│ 		[main^36 · sumtr^30 · sumtr^24] ---> [main^36 · sumtr^30] (using original def)
//│ <<<<<<< expansion <<<<<<<
//│ 
//│ >>>>>>> expanded program >>>>>>>
//│ main_₀
//│ def main_₀(t⁴) = 
//│ 	sumtr_₀(squaretr_₀(t⁴))
//│ 	where
//│ 	def squaretr_₀(t⁵) = 
//│ 		case t⁵ of {
//│ 			N v³ => [N (v³ * v³)]
//│ 			| T l³ r³ => [T squaretr_₀(l³) squaretr_₀(r³)]}
//│ 	def sumtr_₀(t³) = 
//│ 		case t³ of {
//│ 			N v² => v²
//│ 			| T l² r² => (sumtr_₀(l²) + sumtr_₀(r²))}
//│ <<<<<<< expanded program <<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [N (v³ * v³)]: 62 --->
//│ 	case t³ of {N v² => v² | T l² r² => (sumtr_₀(l²) + sumtr_₀(r²))}: 48
//│ [T squaretr_₀(l³) squaretr_₀(r³)]: 69 --->
//│ 	case t³ of {N v² => v² | T l² r² => (sumtr_₀(l²) + sumtr_₀(r²))}: 48
//│ ------------------
//│ case t³ of {N v² => v² | T l² r² => (sumtr_₀(l²) + sumtr_₀(r²))}: 48 --->
//│ 	[N (v³ * v³)]: 62
//│ 	[T squaretr_₀(l³) squaretr_₀(r³)]: 69
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [N (v³ * v³)]: 62 --->
//│ 	case t³ of {N v² => v² | T l² r² => (sumtr_₀(l²) + sumtr_₀(r²))}: 48
//│ [T squaretr_₀(l³) squaretr_₀(r³)]: 69 --->
//│ 	case t³ of {N v² => v² | T l² r² => (sumtr_₀(l²) + sumtr_₀(r²))}: 48
//│ ------------------
//│ case t³ of {N v² => v² | T l² r² => (sumtr_₀(l²) + sumtr_₀(r²))}: 48 --->
//│ 	[N (v³ * v³)]: 62
//│ 	[T squaretr_₀(l³) squaretr_₀(r³)]: 69
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ main_₀
//│ def main_₀(t⁷) = 
//│ 	sumtr_₀(squaretr_₀(t⁷))
//│ 	where
//│ 	def squaretr_₀(t⁸) = 
//│ 		case t⁸ of {
//│ 			N v³ => 
//│ 				let v⁴ = (v³ * v³)
//│ 				in (fun _lh_dummy⁰ -> v⁴)
//│ 			| T l³ r³ => 
//│ 				let r⁴ = squaretr_₀(r³)
//│ 				in let l⁴ = squaretr_₀(l³)
//│ 				in (fun _lh_dummy¹ -> (sumtr_₀(l⁴) + sumtr_₀(r⁴)))}
//│ 	def sumtr_₀(t⁶) = 
//│ 		t⁶(99)
//│ <<<<<<< after fusion <<<<<<<
