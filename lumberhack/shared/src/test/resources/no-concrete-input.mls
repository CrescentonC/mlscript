:NewParser
:ParseOnly


// CORRECT: when the top level result is consumed by nocons
fun f(a) = if a is
  A(aa) then f(B)
  B then OK
fun g(b) =
  f(b)
g
//│ |#fun| |f|(|a|)| |#=| |#if| |a| |is|→|A|(|aa|)| |#then| |f|(|B|)|↵|B| |#then| |OK|←|↵|#fun| |g|(|b|)| |#=|→|f|(|b|)|←|↵|g|
//│ Parsed: {fun f = a, => if a is ‹(A (aa,)) then f (B,); (B) then OK›; fun g = b, => {f (b,)}; g}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ g^12
//│ def f(a⁰) = case a⁰ of {
//│ 	A aa⁰ => f^2([B])
//│ 	| B  => [OK]}
//│ def g(b⁰) = f^8(b⁰)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [B]: 3 --->
//│ 	case a⁰ of {A aa⁰ => f([B]) | B  => [OK]}: 6
//│ ------------------
//│ case a⁰ of {A aa⁰ => f([B]) | B  => [OK]}: 6 --->
//│ 	NoProd
//│ 	[B]: 3
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ g
//│ def f(a¹) = case a¹ of {
//│ 	A aa⁰ => f([B])
//│ 	| B  => [OK]}
//│ def g(b¹) = f(b¹)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ 
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ 
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ g
//│ def f(a⁰) = case a⁰ of {
//│ 	A aa⁰ => f([B])
//│ 	| B  => [OK]}
//│ def g(b⁰) = f(b⁰)
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ g
//│ def f(a⁰) = case a⁰ of {
//│ 	A aa⁰ => f([B])
//│ 	| B  => [OK]}
//│ def g(b⁰) = f(b⁰)
//│ <<<<<<< after floating out <<<<<<<

// CORRECT: when the top level result is consumed by nocons
fun f(a) = if a is
  A(aa) then f(B)
  B then OK
fun g(b) =
  f(b)
primitive(g)
//│ |#fun| |f|(|a|)| |#=| |#if| |a| |is|→|A|(|aa|)| |#then| |f|(|B|)|↵|B| |#then| |OK|←|↵|#fun| |g|(|b|)| |#=|→|f|(|b|)|←|↵|primitive|(|g|)|
//│ Parsed: {fun f = a, => if a is ‹(A (aa,)) then f (B,); (B) then OK›; fun g = b, => {f (b,)}; primitive (g,)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ primitive⁰(g^13)
//│ def f(a⁰) = case a⁰ of {
//│ 	A aa⁰ => f^2([B])
//│ 	| B  => [OK]}
//│ def g(b⁰) = f^8(b⁰)
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [B]: 3 --->
//│ 	case a⁰ of {A aa⁰ => f([B]) | B  => [OK]}: 6
//│ ------------------
//│ case a⁰ of {A aa⁰ => f([B]) | B  => [OK]}: 6 --->
//│ 	NoProd
//│ 	[B]: 3
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ primitive⁰(g)
//│ def f(a¹) = case a¹ of {
//│ 	A aa⁰ => f([B])
//│ 	| B  => [OK]}
//│ def g(b¹) = f(b¹)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ 
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ 
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ primitive⁰(g)
//│ def f(a⁰) = case a⁰ of {
//│ 	A aa⁰ => f([B])
//│ 	| B  => [OK]}
//│ def g(b⁰) = f(b⁰)
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ primitive⁰(g)
//│ def f(a⁰) = case a⁰ of {
//│ 	A aa⁰ => f([B])
//│ 	| B  => [OK]}
//│ def g(b⁰) = f(b⁰)
//│ <<<<<<< after floating out <<<<<<<


// CORRECT: when the top level result is consumed by nocons
fun f(a) = if primitive then B else a
fun g(x) = if x is
  B then C
  D then E
fun k(a) = g(f(a))
k
//│ |#fun| |f|(|a|)| |#=| |#if| |primitive| |#then| |B| |#else| |a|↵|#fun| |g|(|x|)| |#=| |#if| |x| |is|→|B| |#then| |C|↵|D| |#then| |E|←|↵|#fun| |k|(|a|)| |#=| |g|(|f|(|a|)|)|↵|k|
//│ Parsed: {fun f = a, => if (primitive) then B else a; fun g = x, => if x is ‹(B) then C; (D) then E›; fun k = a, => g (f (a,),); k}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ k^17
//│ def f(a⁰) = if primitive⁰ then [B] else a⁰
//│ def g(x⁰) = case x⁰ of {
//│ 	B  => [C]
//│ 	| D  => [E]}
//│ def k(a¹) = g^11(f^12(a¹))
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [B]: 2 --->
//│ 	case x⁰ of {B  => [C] | D  => [E]}: 9
//│ ------------------
//│ case x⁰ of {B  => [C] | D  => [E]}: 9 --->
//│ 	NoProd
//│ 	[B]: 2
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ 
//│ ------------------
//│ 
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ k
//│ def f(a²) = if primitive⁰ then [B] else a²
//│ def g(x¹) = case x¹ of {
//│ 	B  => [C]
//│ 	| D  => [E]}
//│ def k(a³) = g(f(a³))
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ 
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ 
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ k
//│ def f(a⁰) = if primitive⁰ then [B] else a⁰
//│ def g(x⁰) = case x⁰ of {
//│ 	B  => [C]
//│ 	| D  => [E]}
//│ def k(a¹) = g(f(a¹))
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ k
//│ def f(a⁰) = if primitive⁰ then [B] else a⁰
//│ def g(x⁰) = case x⁰ of {
//│ 	B  => [C]
//│ 	| D  => [E]}
//│ def k(a¹) = g(f(a¹))
//│ <<<<<<< after floating out <<<<<<<
